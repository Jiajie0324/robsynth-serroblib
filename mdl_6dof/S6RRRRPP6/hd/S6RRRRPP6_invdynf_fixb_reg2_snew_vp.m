% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:38
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:38:16
% EndTime: 2019-05-07 18:38:24
% DurationCPUTime: 8.59s
% Computational Cost: add. (22583->298), mult. (45142->307), div. (0->0), fcn. (31923->8), ass. (0->181)
t2467 = sin(qJ(2));
t2466 = sin(qJ(3));
t2470 = cos(qJ(3));
t2504 = qJD(1) * t2467;
t2434 = -t2470 * qJD(2) + t2466 * t2504;
t2435 = qJD(2) * t2466 + t2470 * t2504;
t2465 = sin(qJ(4));
t2469 = cos(qJ(4));
t2414 = t2469 * t2434 + t2435 * t2465;
t2471 = cos(qJ(2));
t2503 = qJD(1) * t2471;
t2455 = -qJD(3) + t2503;
t2451 = -qJD(4) + t2455;
t2399 = t2414 * t2451;
t2490 = qJD(2) * t2503;
t2492 = t2467 * qJDD(1);
t2483 = t2490 + t2492;
t2480 = -t2466 * qJDD(2) - t2470 * t2483;
t2409 = -t2434 * qJD(3) - t2480;
t2479 = t2470 * qJDD(2) - t2466 * t2483;
t2478 = -t2435 * qJD(3) + t2479;
t2476 = t2469 * t2409 + t2465 * t2478;
t2474 = -t2414 * qJD(4) + t2476;
t2516 = t2399 + t2474;
t2416 = -t2434 * t2465 + t2435 * t2469;
t2413 = t2416 ^ 2;
t2509 = t2451 ^ 2;
t2375 = t2509 + t2413;
t2458 = qJD(2) * t2504;
t2491 = t2471 * qJDD(1);
t2487 = t2458 - t2491;
t2486 = -qJDD(3) - t2487;
t2485 = -qJDD(4) + t2486;
t2498 = t2414 * t2416;
t2482 = t2485 - t2498;
t2349 = t2375 * t2465 + t2469 * t2482;
t2519 = t2375 * t2469 - t2465 * t2482;
t2314 = t2349 * t2470 + t2466 * t2519;
t2536 = t2314 * t2471;
t2294 = t2467 * t2516 + t2536;
t2468 = sin(qJ(1));
t2311 = t2349 * t2466 - t2470 * t2519;
t2472 = cos(qJ(1));
t2535 = t2311 * t2472;
t2562 = t2294 * t2468 - t2535;
t2538 = t2311 * t2468;
t2561 = t2294 * t2472 + t2538;
t2481 = t2485 + t2498;
t2412 = t2414 ^ 2;
t2514 = -t2412 - t2509;
t2327 = -t2514 * t2465 + t2469 * t2481;
t2528 = t2481 * t2465 + t2514 * t2469;
t2301 = t2327 * t2470 - t2466 * t2528;
t2488 = t2409 * t2465 - t2469 * t2478;
t2484 = qJD(4) * t2416 + t2488;
t2497 = t2416 * t2451;
t2513 = t2484 - t2497;
t2545 = t2327 * t2466 + t2470 * t2528;
t2549 = t2467 * t2513 + t2471 * t2545;
t2559 = t2301 * t2472 + t2468 * t2549;
t2560 = t2301 * t2468 - t2472 * t2549;
t2539 = t2314 * t2467;
t2284 = t2471 * t2516 - t2539;
t2335 = t2497 + t2484;
t2517 = -t2399 + t2474;
t2533 = -t2469 * t2335 + t2517 * t2465;
t2534 = -t2465 * t2335 - t2469 * t2517;
t2541 = t2466 * t2533 + t2470 * t2534;
t2515 = -t2412 - t2413;
t2542 = -t2466 * t2534 + t2470 * t2533;
t2550 = t2467 * t2515 + t2471 * t2542;
t2551 = t2468 * t2550 - t2472 * t2541;
t2548 = t2468 * t2541 + t2472 * t2550;
t2553 = t2467 * t2542 - t2471 * t2515;
t2552 = t2467 * t2545 - t2471 * t2513;
t2512 = qJD(2) ^ 2;
t2511 = t2434 ^ 2;
t2510 = t2435 ^ 2;
t2508 = t2455 ^ 2;
t2507 = -2 * qJD(5);
t2506 = 2 * qJD(6);
t2505 = t2471 * g(3);
t2496 = t2434 * t2435;
t2495 = t2434 * t2455;
t2494 = qJD(3) + t2455;
t2449 = t2468 * g(1) - t2472 * g(2);
t2473 = qJD(1) ^ 2;
t2431 = qJDD(1) * pkin(1) + t2473 * pkin(7) + t2449;
t2437 = 0.2e1 * t2490 + t2492;
t2381 = (t2487 + t2458) * pkin(2) - t2437 * pkin(8) - t2431;
t2450 = -g(1) * t2472 - g(2) * t2468;
t2432 = -pkin(1) * t2473 + qJDD(1) * pkin(7) + t2450;
t2424 = -g(3) * t2467 + t2471 * t2432;
t2436 = (-pkin(2) * t2471 - pkin(8) * t2467) * qJD(1);
t2393 = -pkin(2) * t2512 + qJDD(2) * pkin(8) + t2436 * t2503 + t2424;
t2361 = t2466 * t2381 + t2470 * t2393;
t2461 = t2467 ^ 2;
t2462 = t2471 ^ 2;
t2493 = t2461 + t2462;
t2489 = -pkin(4) * t2451 + t2507;
t2425 = -pkin(3) * t2455 - pkin(9) * t2435;
t2322 = -pkin(3) * t2511 + pkin(9) * t2478 + t2455 * t2425 + t2361;
t2360 = t2470 * t2381 - t2466 * t2393;
t2404 = -t2486 - t2496;
t2475 = (-t2409 + t2495) * pkin(9) + t2404 * pkin(3) + t2360;
t2297 = -t2465 * t2322 + t2469 * t2475;
t2378 = pkin(4) * t2414 - qJ(5) * t2416;
t2283 = t2485 * pkin(4) - t2509 * qJ(5) + t2416 * t2378 + qJDD(5) - t2297;
t2392 = t2505 - qJDD(2) * pkin(2) - t2512 * pkin(8) + (qJD(1) * t2436 + t2432) * t2467;
t2354 = -t2478 * pkin(3) - t2511 * pkin(9) + t2435 * t2425 + t2392;
t2477 = t2484 * pkin(4) - qJ(5) * t2516 + t2354;
t2298 = t2469 * t2322 + t2465 * t2475;
t2282 = -t2509 * pkin(4) - qJ(5) * t2485 - t2414 * t2378 + t2451 * t2507 + t2298;
t2454 = t2471 * t2473 * t2467;
t2453 = -t2462 * t2473 - t2512;
t2452 = -t2461 * t2473 - t2512;
t2448 = -qJDD(2) + t2454;
t2447 = qJDD(2) + t2454;
t2444 = t2493 * t2473;
t2443 = -qJDD(1) * t2468 - t2472 * t2473;
t2442 = qJDD(1) * t2472 - t2468 * t2473;
t2441 = t2493 * qJDD(1);
t2438 = -0.2e1 * t2458 + t2491;
t2423 = -t2467 * t2432 - t2505;
t2422 = t2448 * t2471 - t2452 * t2467;
t2421 = -t2447 * t2467 + t2453 * t2471;
t2420 = t2448 * t2467 + t2452 * t2471;
t2419 = t2447 * t2471 + t2453 * t2467;
t2418 = -t2508 - t2510;
t2410 = -t2508 - t2511;
t2403 = t2486 - t2496;
t2402 = -t2510 - t2511;
t2394 = pkin(5) * t2416 + qJ(6) * t2451;
t2387 = -t2423 * t2467 + t2424 * t2471;
t2386 = t2423 * t2471 + t2424 * t2467;
t2385 = t2434 * t2494 + t2480;
t2384 = t2409 + t2495;
t2383 = -t2435 * t2494 + t2479;
t2382 = (qJD(3) - t2455) * t2435 - t2479;
t2377 = t2403 * t2470 - t2418 * t2466;
t2376 = t2403 * t2466 + t2418 * t2470;
t2373 = -t2404 * t2466 + t2410 * t2470;
t2372 = t2404 * t2470 + t2410 * t2466;
t2356 = t2383 * t2470 - t2385 * t2466;
t2355 = t2383 * t2466 + t2385 * t2470;
t2353 = t2377 * t2471 + t2384 * t2467;
t2352 = t2377 * t2467 - t2384 * t2471;
t2345 = t2373 * t2471 + t2382 * t2467;
t2344 = t2373 * t2467 - t2382 * t2471;
t2340 = (-qJD(4) + t2451) * t2414 + t2476;
t2324 = t2356 * t2471 + t2402 * t2467;
t2323 = t2356 * t2467 - t2402 * t2471;
t2320 = -t2360 * t2466 + t2361 * t2470;
t2319 = t2360 * t2470 + t2361 * t2466;
t2318 = t2320 * t2471 + t2392 * t2467;
t2317 = t2320 * t2467 - t2392 * t2471;
t2295 = -t2340 * t2467 - t2536;
t2292 = t2340 * t2471 - t2539;
t2290 = t2416 * t2489 + t2477;
t2275 = t2488 * qJ(6) + (qJ(6) * qJD(4) - t2394 + t2489) * t2416 + t2477 - t2412 * pkin(5) + t2414 * t2506;
t2268 = -pkin(5) * t2484 - t2412 * qJ(6) - t2451 * t2394 + qJDD(6) + t2282;
t2267 = t2474 * pkin(5) + (-pkin(5) * t2414 + t2506) * t2451 + t2283 + t2481 * qJ(6);
t2266 = -t2297 * t2465 + t2298 * t2469;
t2265 = t2297 * t2469 + t2298 * t2465;
t2264 = t2282 * t2469 + t2283 * t2465;
t2263 = t2282 * t2465 - t2283 * t2469;
t2262 = t2267 * t2465 + t2268 * t2469;
t2261 = -t2267 * t2469 + t2268 * t2465;
t2260 = -t2265 * t2466 + t2266 * t2470;
t2259 = t2265 * t2470 + t2266 * t2466;
t2258 = t2260 * t2471 + t2354 * t2467;
t2257 = t2260 * t2467 - t2354 * t2471;
t2256 = -t2263 * t2466 + t2264 * t2470;
t2255 = t2263 * t2470 + t2264 * t2466;
t2254 = t2256 * t2471 + t2290 * t2467;
t2253 = t2256 * t2467 - t2290 * t2471;
t2252 = -t2261 * t2466 + t2262 * t2470;
t2251 = t2261 * t2470 + t2262 * t2466;
t2250 = t2252 * t2471 + t2275 * t2467;
t2249 = t2252 * t2467 - t2275 * t2471;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2443, -t2442, 0, -t2449 * t2468 + t2450 * t2472, 0, 0, 0, 0, 0, 0, t2421 * t2472 - t2438 * t2468, t2422 * t2472 + t2437 * t2468, t2441 * t2472 - t2444 * t2468, t2387 * t2472 - t2431 * t2468, 0, 0, 0, 0, 0, 0, t2345 * t2472 + t2372 * t2468, t2353 * t2472 + t2376 * t2468, t2324 * t2472 + t2355 * t2468, t2318 * t2472 + t2319 * t2468, 0, 0, 0, 0, 0, 0, -t2560, t2561, t2548, t2258 * t2472 + t2259 * t2468, 0, 0, 0, 0, 0, 0, t2548, t2560, t2295 * t2472 - t2538, t2254 * t2472 + t2255 * t2468, 0, 0, 0, 0, 0, 0, t2548, -t2561, -t2560, t2250 * t2472 + t2251 * t2468; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2442, t2443, 0, t2449 * t2472 + t2450 * t2468, 0, 0, 0, 0, 0, 0, t2421 * t2468 + t2438 * t2472, t2422 * t2468 - t2437 * t2472, t2441 * t2468 + t2444 * t2472, t2387 * t2468 + t2431 * t2472, 0, 0, 0, 0, 0, 0, t2345 * t2468 - t2372 * t2472, t2353 * t2468 - t2376 * t2472, t2324 * t2468 - t2355 * t2472, t2318 * t2468 - t2319 * t2472, 0, 0, 0, 0, 0, 0, t2559, t2562, t2551, t2258 * t2468 - t2259 * t2472, 0, 0, 0, 0, 0, 0, t2551, -t2559, t2295 * t2468 + t2535, t2254 * t2468 - t2255 * t2472, 0, 0, 0, 0, 0, 0, t2551, -t2562, t2559, t2250 * t2468 - t2251 * t2472; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2419, t2420, 0, t2386, 0, 0, 0, 0, 0, 0, t2344, t2352, t2323, t2317, 0, 0, 0, 0, 0, 0, t2552, -t2284, t2553, t2257, 0, 0, 0, 0, 0, 0, t2553, -t2552, t2292, t2253, 0, 0, 0, 0, 0, 0, t2553, t2284, t2552, t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2473, -qJDD(1), 0, t2450, 0, 0, 0, 0, 0, 0, t2421, t2422, t2441, t2387, 0, 0, 0, 0, 0, 0, t2345, t2353, t2324, t2318, 0, 0, 0, 0, 0, 0, t2549, t2294, t2550, t2258, 0, 0, 0, 0, 0, 0, t2550, -t2549, t2295, t2254, 0, 0, 0, 0, 0, 0, t2550, -t2294, t2549, t2250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2473, 0, t2449, 0, 0, 0, 0, 0, 0, t2438, -t2437, t2444, t2431, 0, 0, 0, 0, 0, 0, -t2372, -t2376, -t2355, -t2319, 0, 0, 0, 0, 0, 0, t2301, -t2311, -t2541, -t2259, 0, 0, 0, 0, 0, 0, -t2541, -t2301, t2311, -t2255, 0, 0, 0, 0, 0, 0, -t2541, t2311, t2301, -t2251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2419, t2420, 0, t2386, 0, 0, 0, 0, 0, 0, t2344, t2352, t2323, t2317, 0, 0, 0, 0, 0, 0, t2552, -t2284, t2553, t2257, 0, 0, 0, 0, 0, 0, t2553, -t2552, t2292, t2253, 0, 0, 0, 0, 0, 0, t2553, t2284, t2552, t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2453, t2448, t2491, t2424, 0, 0, 0, 0, 0, 0, t2373, t2377, t2356, t2320, 0, 0, 0, 0, 0, 0, t2545, t2314, t2542, t2260, 0, 0, 0, 0, 0, 0, t2542, -t2545, -t2314, t2256, 0, 0, 0, 0, 0, 0, t2542, -t2314, t2545, t2252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2447, t2452, -t2492, t2423, 0, 0, 0, 0, 0, 0, -t2382, -t2384, -t2402, -t2392, 0, 0, 0, 0, 0, 0, -t2513, -t2516, -t2515, -t2354, 0, 0, 0, 0, 0, 0, -t2515, t2513, t2340, -t2290, 0, 0, 0, 0, 0, 0, -t2515, t2516, -t2513, -t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2438, t2437, -t2444, -t2431, 0, 0, 0, 0, 0, 0, t2372, t2376, t2355, t2319, 0, 0, 0, 0, 0, 0, -t2301, t2311, t2541, t2259, 0, 0, 0, 0, 0, 0, t2541, t2301, -t2311, t2255, 0, 0, 0, 0, 0, 0, t2541, -t2311, -t2301, t2251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2410, t2403, t2383, t2361, 0, 0, 0, 0, 0, 0, t2528, t2349, t2533, t2266, 0, 0, 0, 0, 0, 0, t2533, -t2528, -t2349, t2264, 0, 0, 0, 0, 0, 0, t2533, -t2349, t2528, t2262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2404, t2418, t2385, t2360, 0, 0, 0, 0, 0, 0, -t2327, -t2519, t2534, t2265, 0, 0, 0, 0, 0, 0, t2534, t2327, t2519, t2263, 0, 0, 0, 0, 0, 0, t2534, t2519, -t2327, t2261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2382, t2384, t2402, t2392, 0, 0, 0, 0, 0, 0, t2513, t2516, t2515, t2354, 0, 0, 0, 0, 0, 0, t2515, -t2513, -t2340, t2290, 0, 0, 0, 0, 0, 0, t2515, -t2516, t2513, t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2514, t2482, -t2335, t2298, 0, 0, 0, 0, 0, 0, -t2335, -t2514, -t2482, t2282, 0, 0, 0, 0, 0, 0, -t2335, -t2482, t2514, t2268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2481, -t2375, -t2517, t2297, 0, 0, 0, 0, 0, 0, -t2517, t2481, t2375, -t2283, 0, 0, 0, 0, 0, 0, -t2517, t2375, -t2481, -t2267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2513, t2516, t2515, t2354, 0, 0, 0, 0, 0, 0, t2515, -t2513, -t2340, t2290, 0, 0, 0, 0, 0, 0, t2515, -t2516, t2513, t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2515, -t2513, -t2340, t2290, 0, 0, 0, 0, 0, 0, t2515, -t2516, t2513, t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2335, t2514, t2482, -t2282, 0, 0, 0, 0, 0, 0, t2335, t2482, -t2514, -t2268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, -t2481, -t2375, t2283, 0, 0, 0, 0, 0, 0, t2517, -t2375, t2481, t2267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2515, -t2516, t2513, t2275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, -t2375, t2481, t2267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2335, -t2482, t2514, t2268;];
f_new_reg  = t1;
