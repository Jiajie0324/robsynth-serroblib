% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP6_invdynJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:15:08
% EndTime: 2019-03-09 21:15:25
% DurationCPUTime: 8.00s
% Computational Cost: add. (9684->651), mult. (20899->773), div. (0->0), fcn. (14453->10), ass. (0->313)
t242 = cos(qJ(3));
t240 = sin(qJ(2));
t243 = cos(qJ(2));
t377 = t242 * t243;
t294 = pkin(3) * t240 - pkin(9) * t377;
t245 = -pkin(9) - pkin(8);
t341 = qJD(3) * t245;
t309 = pkin(2) * t240 - pkin(8) * t243;
t160 = t309 * qJD(1);
t239 = sin(qJ(3));
t364 = qJD(1) * t240;
t333 = t239 * t364;
t367 = pkin(7) * t333 + t242 * t160;
t454 = -qJD(1) * t294 + t242 * t341 - t367;
t143 = t239 * t160;
t382 = t240 * t242;
t385 = t239 * t243;
t453 = -t143 - (-pkin(7) * t382 - pkin(9) * t385) * qJD(1) + t239 * t341;
t359 = qJD(2) * t242;
t156 = -t333 + t359;
t361 = qJD(2) * t239;
t157 = t242 * t364 + t361;
t238 = sin(qJ(4));
t424 = cos(qJ(4));
t93 = -t424 * t156 + t157 * t238;
t427 = t93 ^ 2;
t286 = t238 * t156 + t157 * t424;
t91 = t286 ^ 2;
t452 = t91 - t427;
t363 = qJD(1) * t243;
t339 = t239 * t363;
t340 = t424 * t242;
t388 = t238 * t239;
t432 = qJD(3) + qJD(4);
t329 = t424 * qJD(4);
t434 = t424 * qJD(3) + t329;
t371 = -t238 * t339 - t242 * t434 + t340 * t363 + t388 * t432;
t402 = qJD(2) * pkin(2);
t177 = pkin(7) * t364 - t402;
t113 = -pkin(3) * t156 + t177;
t269 = -qJ(5) * t286 + t113;
t42 = pkin(4) * t93 + t269;
t451 = t42 * t93;
t403 = qJ(5) * t93;
t414 = t286 * t93;
t179 = t245 * t239;
t180 = t245 * t242;
t354 = qJD(4) * t238;
t450 = t179 * t329 + t180 * t354 + t238 * t454 + t453 * t424;
t159 = t238 * t242 + t239 * t424;
t108 = t432 * t159;
t370 = -t159 * t363 + t108;
t223 = pkin(7) * t363;
t356 = qJD(3) * t239;
t310 = -t223 + (-t339 + t356) * pkin(3);
t318 = qJD(3) + t363;
t347 = t240 * qJDD(1);
t267 = qJD(2) * t318 + t347;
t350 = qJD(1) * qJD(3);
t326 = t240 * t350;
t298 = -qJDD(2) + t326;
t278 = t298 * t239;
t251 = t267 * t242 - t278;
t292 = qJD(2) * qJD(3) + t347;
t351 = qJD(1) * qJD(2);
t327 = t243 * t351;
t449 = t292 + t327;
t358 = qJD(2) * t243;
t338 = t239 * t358;
t355 = qJD(3) * t242;
t448 = t240 * t355 + t338;
t244 = cos(qJ(1));
t381 = t240 * t244;
t241 = sin(qJ(1));
t383 = t240 * t241;
t447 = g(1) * t381 + g(2) * t383;
t172 = -pkin(2) * t243 - pkin(8) * t240 - pkin(1);
t149 = t172 * qJD(1);
t178 = qJD(2) * pkin(8) + t223;
t104 = t239 * t149 + t242 * t178;
t77 = pkin(9) * t156 + t104;
t399 = t238 * t77;
t209 = -qJD(3) + t363;
t103 = t242 * t149 - t178 * t239;
t76 = -pkin(9) * t157 + t103;
t70 = -pkin(3) * t209 + t76;
t35 = -t424 * t70 + t399;
t443 = pkin(5) * t286;
t295 = t35 + t443;
t373 = qJD(5) + t295;
t433 = pkin(5) * t93 - qJD(6);
t192 = -qJD(4) + t209;
t317 = t449 * t239 + t242 * t326;
t275 = t242 * qJDD(2) - t317;
t32 = -t156 * t329 + t157 * t354 - t238 * t275 - t424 * t251;
t14 = -t192 * t93 - t32;
t413 = pkin(4) + qJ(6);
t26 = t413 * t93 + t269;
t33 = qJD(4) * t286 + t238 * t251 - t424 * t275;
t431 = -pkin(5) * t33 + qJDD(6);
t446 = -t26 * t93 + t431;
t236 = qJ(3) + qJ(4);
t228 = cos(t236);
t227 = sin(t236);
t375 = t244 * t227;
t378 = t241 * t243;
t124 = t228 * t378 - t375;
t376 = t243 * t244;
t126 = t227 * t241 + t228 * t376;
t226 = t243 * qJDD(1);
t435 = -t240 * t351 + t226;
t133 = pkin(7) * t435 + qJDD(2) * pkin(8);
t153 = qJDD(3) - t435;
t348 = t239 * qJDD(2);
t163 = t309 * qJD(2);
t109 = qJD(1) * t163 + qJDD(1) * t172;
t99 = t242 * t109;
t20 = -t239 * t133 + t99 - (t348 + (t327 + t347) * t242) * pkin(9) + t153 * pkin(3) - t77 * qJD(3);
t280 = t239 * t109 + t242 * t133 + t149 * t355 - t178 * t356;
t27 = pkin(9) * t275 + t280;
t324 = -t238 * t20 - t424 * t27 - t70 * t329 + t77 * t354;
t390 = t228 * t240;
t264 = g(1) * t126 + g(2) * t124 + g(3) * t390 + t324;
t445 = t113 * t93 + t264;
t444 = pkin(4) * t286;
t407 = qJ(5) * t364 - t450;
t442 = t286 * t42;
t40 = t424 * t76 - t399;
t396 = -pkin(3) * t329 - qJD(5) + t40;
t74 = t424 * t77;
t39 = t238 * t76 + t74;
t314 = pkin(3) * t354 - t39;
t112 = t238 * t179 - t180 * t424;
t441 = qJD(4) * t112 + t453 * t238 - t424 * t454;
t184 = t192 ^ 2;
t440 = -t91 - t184;
t418 = g(2) * t241;
t306 = g(1) * t244 + t418;
t439 = t243 * t306;
t438 = t286 * t413;
t148 = qJDD(4) + t153;
t132 = t148 * qJ(5);
t171 = qJD(5) * t192;
t437 = t171 - t132;
t436 = t371 * qJ(5) - qJD(5) * t159 + t310;
t430 = -t32 * pkin(5) - t148 * qJ(6) + qJD(6) * t192;
t135 = t148 * pkin(4);
t123 = t227 * t378 + t228 * t244;
t125 = -t241 * t228 + t243 * t375;
t323 = -t424 * t20 + t238 * t27 + t77 * t329 + t70 * t354;
t392 = t227 * t240;
t265 = g(1) * t125 + g(2) * t123 + g(3) * t392 - t323;
t261 = -qJDD(5) + t265;
t258 = t135 + t261;
t253 = -t26 * t286 + t258 - t430;
t429 = -t113 * t286 + t265;
t248 = -t192 * t286 - t33;
t428 = -0.2e1 * pkin(1);
t423 = pkin(7) * t239;
t421 = g(1) * t241;
t138 = t239 * t378 + t242 * t244;
t419 = g(2) * t138;
t417 = g(2) * t244;
t416 = g(3) * t240;
t415 = g(3) * t243;
t229 = t240 * pkin(7);
t412 = pkin(5) - t245;
t158 = -t340 + t388;
t411 = qJD(6) * t158 + t370 * t413 + t436;
t410 = -t370 * pkin(5) - t407;
t332 = t240 * t413;
t409 = -t371 * pkin(5) + qJD(1) * t332 + t441;
t408 = t370 * pkin(4) + t436;
t406 = pkin(4) * t364 + t441;
t36 = t238 * t70 + t74;
t404 = qJ(5) * t33;
t401 = t192 * t36;
t216 = pkin(3) * t238 + qJ(5);
t400 = t216 * t33;
t155 = t242 * t172;
t102 = -pkin(9) * t382 + t155 + (-pkin(3) - t423) * t243;
t213 = pkin(7) * t377;
t366 = t239 * t172 + t213;
t387 = t239 * t240;
t110 = -pkin(9) * t387 + t366;
t398 = t238 * t102 + t424 * t110;
t397 = t314 + t433;
t395 = -t396 + t443;
t394 = qJDD(2) * pkin(2);
t393 = t157 * t209;
t391 = t227 * t243;
t389 = t228 * t243;
t386 = t239 * t241;
t384 = t239 * t244;
t380 = t240 * t245;
t379 = t241 * t242;
t220 = pkin(3) * t242 + pkin(2);
t183 = t243 * t220;
t374 = -qJD(5) - t35;
t372 = -t36 + t433;
t369 = t239 * t163 + t172 * t355;
t360 = qJD(2) * t240;
t368 = t242 * t163 + t360 * t423;
t210 = pkin(3) * t387;
t164 = t229 + t210;
t234 = t240 ^ 2;
t365 = -t243 ^ 2 + t234;
t362 = qJD(2) * t156;
t357 = qJD(3) * t156;
t353 = t157 * qJD(2);
t352 = t177 * qJD(3);
t343 = t238 * t387;
t342 = t239 * t376;
t114 = t448 * pkin(3) + pkin(7) * t358;
t337 = t209 * t356;
t336 = t240 * t356;
t334 = t209 * t355;
t331 = t412 * t244;
t325 = -pkin(1) - t183;
t322 = -t123 * pkin(4) + qJ(5) * t124;
t321 = -t125 * pkin(4) + qJ(5) * t126;
t320 = -qJ(5) * t227 - t220;
t319 = -qJD(3) * t149 - t133;
t219 = -pkin(3) * t424 - pkin(4);
t316 = g(3) * (pkin(4) * t389 + qJ(5) * t391 + t183);
t315 = t424 * t358;
t181 = qJ(5) * t390;
t313 = -pkin(4) * t392 + t181;
t215 = g(1) * t383;
t312 = -g(2) * t381 + t215;
t30 = qJ(5) * t192 - t36;
t52 = qJ(5) * t243 - t398;
t308 = g(1) * t123 - g(2) * t125;
t307 = g(1) * t124 - g(2) * t126;
t305 = t178 * t355 - t99;
t221 = pkin(7) * t347;
t134 = pkin(7) * t327 + t221 - t394;
t129 = t240 * t340 - t343;
t303 = -qJ(5) * t129 + t164;
t302 = t102 * t424 - t238 * t110;
t301 = pkin(3) * t157 + t403;
t300 = g(2) * t322;
t299 = -pkin(8) * t153 + t352;
t297 = -g(3) * t391 + t227 * t447;
t296 = -g(3) * t389 + t228 * t447;
t4 = t324 + t437;
t293 = -qJ(5) * t159 - t220;
t53 = t243 * pkin(4) - t302;
t5 = -t135 + qJDD(5) + t323;
t291 = -t227 * t332 + t181;
t289 = -pkin(7) * qJDD(2) + t351 * t428;
t288 = -qJ(6) * t123 + t322;
t287 = -qJ(6) * t125 + t321;
t111 = -t179 * t424 - t238 * t180;
t56 = t294 * qJD(2) + (-t213 + (pkin(9) * t240 - t172) * t239) * qJD(3) + t368;
t59 = -t448 * pkin(9) + (-t240 * t359 - t243 * t356) * pkin(7) + t369;
t285 = t102 * t354 + t110 * t329 + t238 * t59 - t424 * t56;
t284 = t239 * t153 - t334;
t283 = t242 * t153 + t337;
t281 = t102 * t329 - t110 * t354 + t238 * t56 + t424 * t59;
t279 = pkin(3) * t384 - t124 * pkin(4) + t244 * pkin(7) - qJ(5) * t123 + t241 * t380;
t277 = qJDD(1) * t242 - t239 * t350;
t247 = qJD(1) ^ 2;
t276 = pkin(1) * t247 + t306;
t246 = qJD(2) ^ 2;
t274 = pkin(7) * t246 + qJDD(1) * t428 + t417;
t272 = t244 * pkin(1) + pkin(3) * t386 + t126 * pkin(4) + t241 * pkin(7) + qJ(5) * t125 + t220 * t376;
t271 = -t111 * t148 + t296;
t270 = t112 * t148 + t297;
t60 = t108 * t240 + t238 * t338 - t242 * t315;
t268 = qJ(5) * t60 - qJD(5) * t129 + t114;
t266 = -t416 - t439;
t263 = -qJD(3) * pkin(8) * t209 + t134 - t394 + t415;
t262 = t148 - t414;
t259 = -t264 - t437;
t257 = -t261 + t442;
t10 = -qJ(5) * t360 + qJD(5) * t243 - t281;
t69 = -pkin(3) * t275 + t134;
t256 = t148 * t216 + t259;
t254 = -t264 + t446;
t252 = t32 * qJ(5) - qJD(5) * t286 + t69;
t212 = pkin(3) * t379;
t207 = -qJ(6) + t219;
t141 = t242 * t376 + t386;
t140 = -t342 + t379;
t139 = -t241 * t377 + t384;
t128 = t159 * t240;
t90 = pkin(4) * t158 + t293;
t83 = -t158 * pkin(5) + t112;
t82 = t159 * pkin(5) + t111;
t75 = t158 * t413 + t293;
t71 = pkin(4) * t128 + t303;
t61 = t239 * t315 - t238 * t336 - qJD(4) * t343 + (t238 * t358 + t240 * t434) * t242;
t55 = t403 + t444;
t54 = t128 * t413 + t303;
t47 = t301 + t444;
t43 = -pkin(5) * t128 - t52;
t41 = t129 * pkin(5) + t243 * qJ(6) + t53;
t38 = t403 + t438;
t29 = pkin(4) * t192 - t374;
t28 = t301 + t438;
t15 = -t30 - t433;
t13 = t192 * t413 + t373;
t12 = pkin(4) * t61 + t268;
t11 = -pkin(4) * t360 + t285;
t9 = qJD(6) * t128 + t413 * t61 + t268;
t8 = -pkin(5) * t61 - t10;
t7 = -t60 * pkin(5) - qJD(2) * t332 + t243 * qJD(6) + t285;
t6 = t33 * pkin(4) + t252;
t3 = t93 * qJD(6) + t33 * t413 + t252;
t2 = -t4 + t431;
t1 = t5 + t430;
t16 = [qJDD(1), -t417 + t421, t306, qJDD(1) * t234 + 0.2e1 * t240 * t327, 0.2e1 * t226 * t240 - 0.2e1 * t351 * t365, qJDD(2) * t240 + t243 * t246, qJDD(2) * t243 - t240 * t246, 0, t289 * t240 + (-t274 + t421) * t243, t240 * t274 + t243 * t289 - t215, -t157 * t336 + (-t240 * t278 + t243 * t353 + t449 * t382) * t242 (t156 * t242 - t157 * t239) * t358 + ((-t157 * qJD(3) + t275) * t242 + (-t357 - t251) * t239) * t240 (-t348 + (-t209 - t318) * t359) * t243 + (-t243 * t277 + t283 + t353) * t240 (t209 * t361 - t275) * t243 + (-t284 + t362) * t240, -t153 * t243 - t209 * t360 -(-t172 * t356 + t368) * t209 + t155 * t153 - g(1) * t139 - g(2) * t141 + ((t334 - t362) * pkin(7) + (-pkin(7) * t153 + qJD(2) * t177 - t319) * t239 + t305) * t243 + (-pkin(7) * t275 + t103 * qJD(2) + t134 * t239 + t242 * t352) * t240, t369 * t209 - t366 * t153 - g(1) * t138 - g(2) * t140 + (t177 * t359 + (-t337 + t353) * pkin(7) + t280) * t243 + (-t239 * t352 - t104 * qJD(2) + t134 * t242 + (t348 + t277 * t240 + (-t209 + t318) * t359) * pkin(7)) * t240, -t129 * t32 - t286 * t60, t128 * t32 - t129 * t33 - t286 * t61 + t60 * t93, t129 * t148 + t192 * t60 + t243 * t32 + t286 * t360, -t128 * t148 + t192 * t61 + t243 * t33 - t360 * t93, -t148 * t243 - t192 * t360, t113 * t61 + t114 * t93 + t69 * t128 + t148 * t302 + t164 * t33 + t192 * t285 + t243 * t323 - t35 * t360 + t307, -t113 * t60 + t114 * t286 + t69 * t129 - t148 * t398 - t164 * t32 + t192 * t281 - t243 * t324 - t36 * t360 - t308, t10 * t93 + t11 * t286 + t128 * t4 + t129 * t5 - t29 * t60 + t30 * t61 - t32 * t53 + t33 * t52 + t312, -t11 * t192 - t12 * t93 - t128 * t6 + t148 * t53 - t243 * t5 + t29 * t360 - t33 * t71 - t42 * t61 - t307, t10 * t192 - t12 * t286 - t129 * t6 - t148 * t52 + t243 * t4 - t30 * t360 + t32 * t71 + t42 * t60 + t308, t6 * t71 + t42 * t12 + t4 * t52 + t30 * t10 + t5 * t53 + t29 * t11 - g(1) * (t241 * t325 + t279) - g(2) * (-t244 * t380 + t272) t1 * t129 - t128 * t2 - t13 * t60 - t15 * t61 + t286 * t7 - t32 * t41 - t33 * t43 - t8 * t93 + t312, -t129 * t3 + t148 * t43 + t15 * t360 - t192 * t8 - t2 * t243 + t26 * t60 - t286 * t9 + t32 * t54 + t308, t1 * t243 + t128 * t3 - t13 * t360 - t148 * t41 + t192 * t7 + t26 * t61 + t33 * t54 + t9 * t93 + t307, t3 * t54 + t26 * t9 + t1 * t41 + t13 * t7 + t2 * t43 + t15 * t8 - g(1) * (-qJ(6) * t124 + t279) - g(2) * (qJ(6) * t126 + t240 * t331 + t272) - (-pkin(5) * t240 + t325) * t421; 0, 0, 0, -t240 * t247 * t243, t365 * t247, t347, t226, qJDD(2), t240 * t276 - t221 - t415, t416 + (-pkin(7) * qJDD(1) + t276) * t243, -t298 * t239 ^ 2 + (t239 * t267 - t393) * t242 (-t317 + t393) * t239 + (t357 + 0.2e1 * t348 + t292 * t242 + (-t336 + (-t156 + t359) * t243) * qJD(1)) * t242 (-t157 * t240 + t209 * t377) * qJD(1) + t284 (-t156 * t240 - t209 * t385) * qJD(1) + t283, t209 * t364, -pkin(2) * t317 + t367 * t209 + t299 * t239 + (-t103 * t240 + (pkin(7) * t156 - t177 * t239) * t243) * qJD(1) + (t240 * t306 - t263) * t242, -t143 * t209 + (-t243 * pkin(7) * t157 + t104 * t240) * qJD(1) + (-pkin(2) * t292 + (t209 * t229 + (-t177 - t402) * t243) * qJD(1) + t299) * t242 + ((pkin(2) * t350 - t306) * t240 + t263) * t239, -t159 * t32 - t286 * t371, t158 * t32 - t159 * t33 - t286 * t370 + t371 * t93, t148 * t159 + t192 * t371 - t286 * t364, -t148 * t158 + t192 * t370 + t364 * t93, t192 * t364, t370 * t113 + t69 * t158 + t192 * t441 - t220 * t33 + t310 * t93 + t35 * t364 + t271, -t371 * t113 + t69 * t159 + t450 * t192 + t220 * t32 + t310 * t286 + t36 * t364 - t270, -t111 * t32 - t112 * t33 + t158 * t4 + t159 * t5 + t286 * t406 - t29 * t371 + t30 * t370 + t407 * t93 + t266, -t158 * t6 - t192 * t406 - t29 * t364 - t33 * t90 - t370 * t42 - t408 * t93 - t271, -t159 * t6 + t192 * t407 - t286 * t408 + t30 * t364 + t32 * t90 + t371 * t42 + t270, t6 * t90 - t4 * t112 + t5 * t111 - t316 + t408 * t42 + t407 * t30 + t406 * t29 + t245 * t439 + (g(3) * t245 + t306 * (pkin(4) * t228 - t320)) * t240, t1 * t159 - t13 * t371 - t15 * t370 - t158 * t2 + t286 * t409 - t32 * t82 - t33 * t83 - t410 * t93 + t266, t148 * t83 - t15 * t364 - t159 * t3 - t192 * t410 + t26 * t371 - t286 * t411 + t32 * t75 + t297, t13 * t364 - t148 * t82 + t158 * t3 + t192 * t409 + t26 * t370 + t33 * t75 + t411 * t93 + t296, t3 * t75 + t1 * t82 + t2 * t83 - t316 + t411 * t26 + t410 * t15 + t409 * t13 + (-g(3) * qJ(6) * t228 - g(1) * t331 - t412 * t418) * t243 + (-g(3) * t412 + t306 * (t228 * t413 - t320)) * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157 * t156, -t156 ^ 2 + t157 ^ 2, t156 * t209 + t251, t275 - t393, t153, -g(1) * t140 + t419 - t104 * t209 - t157 * t177 + (t319 + t416) * t239 - t305, g(1) * t141 - g(2) * t139 + g(3) * t382 - t103 * t209 - t156 * t177 - t280, t414, t452, t14, t248, t148, -t39 * t192 + (t148 * t424 - t157 * t93 + t192 * t354) * pkin(3) + t429, -t40 * t192 + (-t148 * t238 - t157 * t286 + t192 * t329) * pkin(3) + t445, -t219 * t32 - t400 + (-t30 + t314) * t286 + (t29 + t396) * t93, t148 * t219 - t192 * t314 + t47 * t93 - t258 + t442, t192 * t396 + t286 * t47 + t256 - t451, -t4 * t216 + t5 * t219 - t42 * t47 - t29 * t39 - g(1) * (t212 + t321) - t300 - g(3) * (-t210 + t313) + t396 * t30 + (g(1) * t342 + t29 * t354 + t419) * pkin(3), -t207 * t32 - t400 + (t15 + t397) * t286 + (t13 - t395) * t93, -t192 * t395 + t28 * t286 + t256 + t446, -t148 * t207 + t192 * t397 - t28 * t93 + t253, t1 * t207 + t2 * t216 - t26 * t28 - g(1) * (-pkin(3) * t342 + t212 + t287) - g(2) * (-pkin(3) * t138 + t288) - g(3) * (-t210 + t291) + t395 * t15 + t397 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t414, t452, t14, t248, t148, -t401 + t429, t192 * t35 + t445, pkin(4) * t32 - t404 + (-t30 - t36) * t286 + (t29 + t374) * t93, t55 * t93 - 0.2e1 * t135 + t257 + t401, t192 * t374 + t286 * t55 + t132 + t259 - t451, -t5 * pkin(4) - g(1) * t321 - g(3) * t313 - t4 * qJ(5) - t29 * t36 + t30 * t374 - t42 * t55 - t300, -t404 + t413 * t32 + (t15 + t372) * t286 + (t13 - t373) * t93, -t192 * t295 + t286 * t38 + 0.2e1 * t132 - 0.2e1 * t171 + t254, t148 * t413 + t192 * t372 - t38 * t93 + t253, -g(1) * t287 - g(2) * t288 - g(3) * t291 + t2 * qJ(5) - t1 * t413 + t13 * t372 + t15 * t373 - t26 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, t262, t440, -t192 * t30 - t135 + t257, t14, t440, -t262, t15 * t192 - t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, t148 + t414, -t184 - t427, -t13 * t192 + t254 - t437;];
tau_reg  = t16;
