% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRPP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPP6_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP6_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP6_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP6_inertiaDJ_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:15:04
% EndTime: 2019-03-09 21:15:11
% DurationCPUTime: 2.55s
% Computational Cost: add. (3649->316), mult. (8764->515), div. (0->0), fcn. (7322->6), ass. (0->142)
t108 = sin(qJ(2));
t107 = sin(qJ(3));
t110 = cos(qJ(2));
t165 = qJD(2) * t110;
t148 = t107 * t165;
t109 = cos(qJ(3));
t163 = qJD(3) * t109;
t186 = t108 * t163 + t148;
t185 = -0.4e1 * t108;
t180 = cos(qJ(4));
t142 = t180 * qJD(4);
t143 = t180 * qJD(3);
t184 = t143 + t142;
t102 = t108 ^ 2;
t139 = (-t110 ^ 2 + t102) * qJD(2);
t103 = t109 ^ 2;
t168 = t107 ^ 2 - t103;
t140 = t168 * qJD(3);
t183 = qJD(3) + qJD(4);
t162 = qJD(3) * t110;
t153 = t107 * t162;
t98 = t108 * qJD(2);
t116 = t109 * t98 + t153;
t129 = pkin(2) * t108 - pkin(8) * t110;
t64 = t129 * qJD(2);
t130 = -t110 * pkin(2) - t108 * pkin(8);
t67 = -pkin(1) + t130;
t31 = pkin(7) * t116 - t107 * t64 - t67 * t163;
t182 = -pkin(9) - pkin(8);
t106 = sin(qJ(4));
t144 = qJD(2) * t180;
t133 = t110 * t144;
t164 = qJD(3) * t107;
t154 = t108 * t164;
t171 = t107 * t108;
t156 = t106 * t171;
t26 = t107 * t133 - t106 * t154 - qJD(4) * t156 + (t106 * t165 + t184 * t108) * t109;
t181 = t26 * pkin(5);
t179 = pkin(7) * t107;
t137 = pkin(3) * t142;
t79 = t137 + qJD(5);
t87 = t106 * pkin(3) + qJ(5);
t178 = t87 * t79;
t177 = pkin(4) + qJ(6);
t170 = t108 * t109;
t61 = t109 * t67;
t41 = -pkin(9) * t170 + t61 + (-pkin(3) - t179) * t110;
t169 = t109 * t110;
t85 = pkin(7) * t169;
t173 = t107 * t67 + t85;
t47 = -pkin(9) * t171 + t173;
t176 = t106 * t41 + t180 * t47;
t149 = t107 * t98;
t174 = pkin(7) * t149 + t109 * t64;
t65 = pkin(3) * t171 + t108 * pkin(7);
t172 = t106 * t107;
t166 = qJ(5) * qJD(5);
t161 = qJD(4) * t106;
t160 = t110 * qJD(5);
t159 = t110 * qJD(6);
t158 = -0.2e1 * pkin(1) * qJD(2);
t157 = -0.2e1 * pkin(2) * qJD(3);
t93 = pkin(7) * t165;
t50 = t186 * pkin(3) + t93;
t95 = pkin(3) * t164;
t94 = pkin(3) * t161;
t92 = -t109 * pkin(3) - pkin(2);
t155 = t180 * t109;
t151 = t109 * t162;
t150 = t110 * t161;
t147 = t107 * t163;
t146 = t110 * t98;
t145 = t109 * t165;
t20 = (pkin(3) * t108 - pkin(9) * t169) * qJD(2) + (-t85 + (pkin(9) * t108 - t67) * t107) * qJD(3) + t174;
t23 = -pkin(9) * t186 - t31;
t6 = -t106 * t20 - t41 * t142 + t47 * t161 - t180 * t23;
t141 = t106 * t23 + t47 * t142 + t41 * t161 - t180 * t20;
t138 = 0.2e1 * t146;
t136 = qJD(3) * t106 * t182;
t135 = t107 * t145;
t91 = -t180 * pkin(3) - pkin(4);
t52 = t108 * t155 - t156;
t134 = -t52 * qJ(5) + t65;
t89 = qJ(5) * t98;
t132 = t89 - t6;
t96 = pkin(4) * t98;
t5 = -t96 + t141;
t17 = t110 * qJ(5) - t176;
t131 = -t106 * t47 + t180 * t41;
t63 = t106 * t109 + t180 * t107;
t51 = t63 * t108;
t128 = -t87 * t26 - t79 * t51;
t46 = t183 * t63;
t62 = -t155 + t172;
t127 = -t87 * t46 - t79 * t62;
t126 = -qJ(5) * t26 - qJD(5) * t51;
t125 = -qJ(5) * t46 - qJD(5) * t62;
t124 = t79 * qJ(5) + t87 * qJD(5);
t123 = 0.2e1 * t89 - 0.2e1 * t160 - t6;
t122 = t182 * t143;
t18 = t110 * pkin(4) - t131;
t121 = -t63 * qJ(5) + t92;
t45 = -t184 * t109 + t183 * t172;
t120 = t45 * qJ(5) - t63 * qJD(5) + t95;
t71 = t182 * t107;
t72 = t182 * t109;
t48 = -t106 * t72 - t180 * t71;
t49 = t106 * t71 - t180 * t72;
t25 = t106 * t148 + t46 * t108 - t109 * t133;
t119 = -t25 * pkin(5) - qJ(6) * t98 + t5;
t27 = -t107 * t122 - t109 * t136 - t71 * t142 - t72 * t161;
t118 = t27 * t110 + t49 * t98;
t28 = t49 * qJD(4) + t107 * t136 - t109 * t122;
t117 = -t28 * t110 + t48 * t98;
t4 = -t132 + t160;
t114 = t25 * qJ(5) - t52 * qJD(5) + t50;
t113 = t87 * t98 + (-qJD(5) - t79) * t110 + t132;
t112 = 0.2e1 * qJD(5);
t111 = 0.2e1 * qJD(6);
t83 = -qJ(6) + t91;
t80 = t112 + t137;
t78 = t94 - qJD(6);
t77 = -0.2e1 * t146;
t66 = 0.2e1 * t79;
t38 = t62 * pkin(4) + t121;
t34 = -t62 * pkin(5) + t49;
t33 = t63 * pkin(5) + t48;
t32 = -t173 * qJD(3) + t174;
t30 = t177 * t62 + t121;
t29 = t51 * pkin(4) + t134;
t19 = t177 * t51 + t134;
t14 = t46 * pkin(4) + t120;
t13 = -t45 * pkin(5) + t28;
t12 = -t46 * pkin(5) - t27;
t11 = -t51 * pkin(5) - t17;
t10 = t52 * pkin(5) + t110 * qJ(6) + t18;
t9 = t62 * qJD(6) + t177 * t46 + t120;
t8 = t26 * pkin(4) + t114;
t3 = t51 * qJD(6) + t177 * t26 + t114;
t2 = -t4 - t181;
t1 = t119 + t159;
t7 = [0, 0, 0, t138, -0.2e1 * t139, 0, 0, 0, t108 * t158, t110 * t158, -0.2e1 * t102 * t147 + 0.2e1 * t103 * t146, 0.2e1 * t102 * t140 + t135 * t185, 0.2e1 * t108 * t153 + 0.2e1 * t109 * t139, -0.2e1 * t107 * t139 + 0.2e1 * t108 * t151, t77, 0.2e1 * t61 * t98 - 0.2e1 * t32 * t110 + 0.2e1 * (t102 * t163 + t107 * t146) * pkin(7), -0.2e1 * t31 * t110 - 0.2e1 * t173 * t98 + 0.2e1 * (-t102 * t164 + t109 * t138) * pkin(7), -0.2e1 * t52 * t25, 0.2e1 * t25 * t51 - 0.2e1 * t52 * t26, 0.2e1 * t25 * t110 + 0.2e1 * t52 * t98, 0.2e1 * t26 * t110 - 0.2e1 * t51 * t98, t77, 0.2e1 * t110 * t141 + 0.2e1 * t131 * t98 + 0.2e1 * t65 * t26 + 0.2e1 * t50 * t51, -0.2e1 * t6 * t110 - 0.2e1 * t176 * t98 - 0.2e1 * t65 * t25 + 0.2e1 * t50 * t52, 0.2e1 * t17 * t26 - 0.2e1 * t18 * t25 + 0.2e1 * t4 * t51 + 0.2e1 * t5 * t52, -0.2e1 * t5 * t110 + 0.2e1 * t18 * t98 - 0.2e1 * t29 * t26 - 0.2e1 * t8 * t51, 0.2e1 * t4 * t110 - 0.2e1 * t17 * t98 + 0.2e1 * t29 * t25 - 0.2e1 * t8 * t52, 0.2e1 * t17 * t4 + 0.2e1 * t18 * t5 + 0.2e1 * t29 * t8, 0.2e1 * t1 * t52 - 0.2e1 * t10 * t25 - 0.2e1 * t11 * t26 - 0.2e1 * t2 * t51, 0.2e1 * t11 * t98 - 0.2e1 * t2 * t110 + 0.2e1 * t19 * t25 - 0.2e1 * t3 * t52, 0.2e1 * t1 * t110 - 0.2e1 * t10 * t98 + 0.2e1 * t19 * t26 + 0.2e1 * t3 * t51, 0.2e1 * t10 * t1 + 0.2e1 * t11 * t2 + 0.2e1 * t19 * t3; 0, 0, 0, 0, 0, t165, -t98, 0, -t93, pkin(7) * t98, -t108 * t140 + t135, t147 * t185 - t168 * t165, t149 - t151, t116, 0 (pkin(8) * t169 + (-pkin(2) * t109 + t179) * t108) * qJD(3) + (t107 * t130 - t85) * qJD(2) (pkin(7) * t170 + t107 * t129) * qJD(3) + (t109 * t130 + t110 * t179) * qJD(2), -t25 * t63 - t52 * t45, t25 * t62 - t63 * t26 + t45 * t51 - t52 * t46, t45 * t110 + t63 * t98, t46 * t110 - t62 * t98, 0, t92 * t26 + t65 * t46 + t50 * t62 + t51 * t95 - t117, -t92 * t25 - t65 * t45 + t50 * t63 + t52 * t95 - t118, t17 * t46 - t18 * t45 - t48 * t25 - t49 * t26 + t27 * t51 + t28 * t52 + t4 * t62 + t5 * t63, -t14 * t51 - t38 * t26 - t29 * t46 - t8 * t62 + t117, -t14 * t52 + t38 * t25 + t29 * t45 - t8 * t63 + t118, t29 * t14 + t17 * t27 + t18 * t28 + t8 * t38 - t4 * t49 + t5 * t48, t1 * t63 - t10 * t45 - t11 * t46 - t12 * t51 + t13 * t52 - t2 * t62 - t33 * t25 - t34 * t26, -t12 * t110 + t19 * t45 + t30 * t25 - t3 * t63 + t34 * t98 - t9 * t52, t13 * t110 + t19 * t46 + t30 * t26 + t3 * t62 - t33 * t98 + t9 * t51, t1 * t33 + t10 * t13 + t11 * t12 + t19 * t9 + t2 * t34 + t3 * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t147, -0.2e1 * t140, 0, 0, 0, t107 * t157, t109 * t157, -0.2e1 * t63 * t45, 0.2e1 * t45 * t62 - 0.2e1 * t63 * t46, 0, 0, 0, 0.2e1 * t92 * t46 + 0.2e1 * t62 * t95, -0.2e1 * t92 * t45 + 0.2e1 * t63 * t95, 0.2e1 * t27 * t62 + 0.2e1 * t28 * t63 - 0.2e1 * t48 * t45 - 0.2e1 * t49 * t46, -0.2e1 * t14 * t62 - 0.2e1 * t38 * t46, -0.2e1 * t14 * t63 + 0.2e1 * t38 * t45, 0.2e1 * t38 * t14 - 0.2e1 * t49 * t27 + 0.2e1 * t48 * t28, -0.2e1 * t12 * t62 + 0.2e1 * t13 * t63 - 0.2e1 * t33 * t45 - 0.2e1 * t34 * t46, 0.2e1 * t30 * t45 - 0.2e1 * t9 * t63, 0.2e1 * t30 * t46 + 0.2e1 * t9 * t62, 0.2e1 * t34 * t12 + 0.2e1 * t33 * t13 + 0.2e1 * t30 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145 - t154, -t186, t98, t32, t31, 0, 0, -t25, -t26, t98 (t108 * t144 + t150) * pkin(3) - t141 (-t106 * t98 + t110 * t142) * pkin(3) + t6, -t91 * t25 + t52 * t94 + t128, -pkin(3) * t150 + t91 * t98 + t5, t113, -t17 * t79 + t18 * t94 - t4 * t87 + t5 * t91, -t83 * t25 + t78 * t52 + t128, t113 - t181, -t83 * t98 + (-qJD(6) + t78) * t110 - t119, t1 * t83 + t10 * t78 + t11 * t79 + t2 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, -t164, 0, -pkin(8) * t163, pkin(8) * t164, 0, 0, -t45, -t46, 0, -t28, t27, -t91 * t45 + t63 * t94 + t127, t28, -t27, -t27 * t87 + t28 * t91 + t48 * t94 + t49 * t79, -t83 * t45 + t78 * t63 + t127, t12, -t13, t12 * t87 + t13 * t83 + t33 * t78 + t34 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t94, -0.2e1 * t137, 0, 0.2e1 * t94, t66, 0.2e1 * t91 * t94 + 0.2e1 * t178, 0, t66, -0.2e1 * t78, 0.2e1 * t83 * t78 + 0.2e1 * t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, -t26, t98, -t141, t6, pkin(4) * t25 + t126, -0.2e1 * t96 + t141, t123, -t5 * pkin(4) - t4 * qJ(5) - t17 * qJD(5), -qJD(6) * t52 + t177 * t25 + t126, t123 - t181, t177 * t98 - t119 - 0.2e1 * t159, t2 * qJ(5) + t11 * qJD(5) - t10 * qJD(6) - t1 * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, -t46, 0, -t28, t27, pkin(4) * t45 + t125, t28, -t27, -t28 * pkin(4) - t27 * qJ(5) + t49 * qJD(5), -qJD(6) * t63 + t177 * t45 + t125, t12, -t13, t12 * qJ(5) + t34 * qJD(5) - t33 * qJD(6) - t13 * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, -t137, 0, t94, t80, -pkin(4) * t94 + t124, 0, t80, t111 - t94, -t83 * qJD(6) - t177 * t78 + t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0.2e1 * t166, 0, t112, t111, 0.2e1 * qJD(6) * t177 + 0.2e1 * t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t98, 0, t5, -t25, 0, -t98, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, 0, t28, -t45, 0, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, 0, 0, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, t98, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
