% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP6_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:15:11
% EndTime: 2019-03-09 21:15:33
% DurationCPUTime: 11.01s
% Computational Cost: add. (12437->771), mult. (27452->888), div. (0->0), fcn. (19044->10), ass. (0->352)
t272 = cos(qJ(2));
t411 = qJD(1) * t272;
t238 = -qJD(3) + t411;
t221 = -qJD(4) + t238;
t268 = sin(qJ(3));
t269 = sin(qJ(2));
t412 = qJD(1) * t269;
t377 = t268 * t412;
t271 = cos(qJ(3));
t408 = qJD(2) * t271;
t185 = -t377 + t408;
t383 = t271 * t412;
t410 = qJD(2) * t268;
t186 = t383 + t410;
t267 = sin(qJ(4));
t483 = cos(qJ(4));
t321 = t267 * t185 + t186 * t483;
t361 = qJD(3) + t411;
t332 = t361 * qJD(2);
t395 = t269 * qJDD(1);
t304 = t332 + t395;
t404 = qJD(3) * t269;
t369 = qJD(1) * t404;
t214 = t268 * t369;
t396 = t268 * qJDD(2);
t360 = -t214 + t396;
t283 = t304 * t271 + t360;
t232 = t268 * t395;
t398 = qJD(1) * qJD(2);
t370 = t272 * t398;
t511 = qJD(2) * qJD(3) + t370;
t358 = t268 * t511 + t271 * t369 + t232;
t314 = t271 * qJDD(2) - t358;
t48 = qJD(4) * t321 + t267 * t283 - t483 * t314;
t513 = t321 * t221 + t48;
t116 = -t483 * t185 + t186 * t267;
t113 = t116 ^ 2;
t114 = t321 ^ 2;
t337 = t114 - t113;
t384 = t268 * t411;
t385 = t483 * t271;
t437 = t267 * t268;
t491 = qJD(3) + qJD(4);
t372 = t483 * qJD(4);
t373 = t483 * qJD(3);
t493 = t373 + t372;
t418 = -t267 * t384 - t271 * t493 + t385 * t411 + t437 * t491;
t348 = pkin(2) * t269 - pkin(8) * t272;
t190 = t348 * qJD(1);
t137 = pkin(7) * t377 + t271 * t190;
t426 = t271 * t272;
t331 = pkin(3) * t269 - pkin(9) * t426;
t106 = qJD(1) * t331 + t137;
t171 = t268 * t190;
t431 = t269 * t271;
t434 = t268 * t272;
t123 = t171 + (-pkin(7) * t431 - pkin(9) * t434) * qJD(1);
t274 = -pkin(9) - pkin(8);
t207 = t274 * t268;
t208 = t274 * t271;
t335 = t274 * t373;
t357 = qJD(3) * t267 * t274;
t402 = qJD(4) * t267;
t466 = -t267 * t106 - t483 * t123 + t207 * t372 + t208 * t402 + t268 * t335 + t271 * t357;
t205 = -qJD(2) * pkin(2) + pkin(7) * t412;
t139 = -pkin(3) * t185 + t205;
t306 = -qJ(5) * t321 + t139;
t57 = pkin(4) * t116 + t306;
t514 = t116 * t57;
t454 = qJ(5) * t116;
t512 = t116 * t321;
t188 = t267 * t271 + t268 * t483;
t132 = t491 * t188;
t417 = -t188 * t411 + t132;
t252 = pkin(7) * t411;
t405 = qJD(3) * t268;
t350 = -t252 + (-t384 + t405) * pkin(3);
t407 = qJD(2) * t272;
t382 = t268 * t407;
t403 = qJD(3) * t271;
t510 = t269 * t403 + t382;
t273 = cos(qJ(1));
t430 = t269 * t273;
t270 = sin(qJ(1));
t432 = t269 * t270;
t509 = g(1) * t430 + g(2) * t432;
t477 = g(2) * t270;
t345 = g(1) * t273 + t477;
t325 = t345 * t272;
t475 = g(3) * t269;
t303 = -t475 - t325;
t349 = pkin(2) * t272 + pkin(8) * t269;
t200 = -pkin(1) - t349;
t178 = t200 * qJD(1);
t206 = qJD(2) * pkin(8) + t252;
t128 = t178 * t268 + t206 * t271;
t99 = pkin(9) * t185 + t128;
t459 = t267 * t99;
t127 = t271 * t178 - t206 * t268;
t98 = -pkin(9) * t186 + t127;
t90 = -pkin(3) * t238 + t98;
t50 = -t483 * t90 + t459;
t504 = pkin(5) * t321;
t329 = t50 + t504;
t420 = qJD(5) + t329;
t492 = t116 * pkin(5) - qJD(6);
t47 = -t185 * t372 + t186 * t402 - t267 * t314 - t483 * t283;
t508 = t116 * t221 + t47;
t472 = pkin(4) + qJ(6);
t41 = t116 * t472 + t306;
t490 = -pkin(5) * t48 + qJDD(6);
t507 = -t116 * t41 + t490;
t265 = qJ(3) + qJ(4);
t257 = cos(t265);
t256 = sin(t265);
t422 = t273 * t256;
t427 = t270 * t272;
t152 = t257 * t427 - t422;
t423 = t272 * t273;
t154 = t256 * t270 + t257 * t423;
t191 = t348 * qJD(2);
t133 = qJD(1) * t191 + qJDD(1) * t200;
t122 = t271 * t133;
t255 = t272 * qJDD(1);
t494 = -t269 * t398 + t255;
t182 = qJDD(3) - t494;
t298 = t395 + t511;
t161 = pkin(7) * t494 + qJDD(2) * pkin(8);
t362 = -qJD(3) * t178 - t161;
t33 = t182 * pkin(3) + t214 * pkin(9) + t122 + (-pkin(9) * qJDD(2) + t362) * t268 + (-pkin(9) * t298 - qJD(3) * t206) * t271;
t61 = t268 * t133 + t271 * t161 + t178 * t403 - t206 * t405;
t42 = pkin(9) * t314 + t61;
t366 = -t267 * t33 - t90 * t372 + t99 * t402 - t483 * t42;
t439 = t257 * t269;
t301 = g(1) * t154 + g(2) * t152 + g(3) * t439 + t366;
t506 = t116 * t139 + t301;
t505 = pkin(4) * t321;
t465 = qJ(5) * t412 - t466;
t503 = t321 * t57;
t55 = t483 * t98 - t459;
t457 = -pkin(3) * t372 - qJD(5) + t55;
t94 = t483 * t99;
t54 = t267 * t98 + t94;
t353 = pkin(3) * t402 - t54;
t502 = t127 * t238 + t61;
t136 = t267 * t207 - t208 * t483;
t463 = qJD(4) * t136 + t106 * t483 - t267 * t123 + t268 * t357 - t271 * t335;
t499 = t321 * t472;
t212 = t221 ^ 2;
t498 = -t114 - t212;
t151 = t256 * t427 + t257 * t273;
t497 = -t152 * pkin(4) - qJ(5) * t151;
t177 = qJDD(4) + t182;
t160 = t177 * qJ(5);
t199 = qJD(5) * t221;
t496 = t199 - t160;
t242 = pkin(7) * t426;
t142 = t268 * t200 + t242;
t495 = qJ(5) * t418 - qJD(5) * t188 + t350;
t489 = -t47 * pkin(5) - t177 * qJ(6) + qJD(6) * t221;
t250 = pkin(7) * t395;
t452 = qJDD(2) * pkin(2);
t162 = pkin(7) * t370 + t250 - t452;
t474 = g(3) * t272;
t296 = t269 * t345 - t162 - t474;
t488 = qJD(3) * pkin(8) * t238 + t296 + t452;
t163 = t177 * pkin(4);
t153 = -t270 * t257 + t272 * t422;
t441 = t256 * t269;
t7 = -t267 * t42 + t483 * t33 - t99 * t372 - t90 * t402;
t302 = g(1) * t153 + g(2) * t151 + g(3) * t441 + t7;
t294 = -qJDD(5) + t302;
t290 = t163 + t294;
t282 = -t321 * t41 + t290 - t489;
t487 = -t139 * t321 + t302;
t34 = t177 * t188 + t221 * t418 - t321 * t412;
t187 = -t385 + t437;
t486 = t116 * t412 - t177 * t187 + t221 * t417;
t288 = t116 * t418 + t187 * t47 - t188 * t48 - t321 * t417;
t485 = -0.2e1 * pkin(1);
t482 = pkin(7) * t268;
t481 = pkin(8) * t182;
t480 = g(1) * t270;
t425 = t271 * t273;
t166 = t268 * t427 + t425;
t478 = g(2) * t166;
t476 = g(2) * t273;
t258 = t269 * pkin(7);
t471 = pkin(5) - t274;
t470 = qJD(6) * t187 + t417 * t472 + t495;
t469 = -pkin(5) * t417 - t465;
t375 = t472 * t269;
t468 = -pkin(5) * t418 + qJD(1) * t375 + t463;
t467 = pkin(4) * t417 + t495;
t464 = pkin(4) * t412 + t463;
t462 = qJ(5) * t48;
t51 = t267 * t90 + t94;
t461 = t221 * t51;
t245 = pkin(3) * t267 + qJ(5);
t460 = t245 * t48;
t458 = t353 + t492;
t456 = -t457 + t504;
t455 = pkin(7) * qJDD(1);
t446 = t128 * t238;
t445 = t185 * t238;
t444 = t186 * t185;
t443 = t186 * t238;
t440 = t256 * t272;
t438 = t257 * t272;
t436 = t268 * t269;
t435 = t268 * t270;
t433 = t268 * t273;
t429 = t269 * t274;
t428 = t270 * t271;
t424 = t272 * t238;
t249 = pkin(3) * t271 + pkin(2);
t211 = t272 * t249;
t421 = -qJD(5) - t50;
t419 = -t51 + t492;
t184 = t271 * t200;
t125 = -pkin(9) * t431 + t184 + (-pkin(3) - t482) * t272;
t134 = -pkin(9) * t436 + t142;
t77 = t267 * t125 + t483 * t134;
t409 = qJD(2) * t269;
t416 = t271 * t191 + t409 * t482;
t239 = pkin(3) * t436;
t192 = t258 + t239;
t415 = t273 * pkin(1) + t270 * pkin(7);
t263 = t269 ^ 2;
t264 = t272 ^ 2;
t414 = t263 - t264;
t413 = t263 + t264;
t406 = qJD(3) * t128;
t401 = t185 * qJD(3);
t400 = t186 * qJD(3);
t399 = t205 * qJD(3);
t390 = t267 * t436;
t389 = t268 * t423;
t388 = t273 * t429;
t276 = qJD(1) ^ 2;
t387 = t269 * t276 * t272;
t261 = t273 * pkin(7);
t386 = pkin(3) * t433 + t270 * t429 + t261;
t140 = pkin(3) * t510 + pkin(7) * t407;
t381 = t238 * t405;
t380 = t268 * t404;
t378 = t221 * t412;
t374 = t471 * t273;
t368 = -pkin(1) - t211;
t365 = -t151 * pkin(4) + qJ(5) * t152;
t364 = -t153 * pkin(4) + qJ(5) * t154;
t363 = -qJ(5) * t256 - t249;
t135 = -t483 * t207 - t208 * t267;
t359 = pkin(3) * t435 + t249 * t423 + t415;
t248 = -pkin(3) * t483 - pkin(4);
t356 = g(3) * (pkin(4) * t438 + qJ(5) * t440 + t211);
t355 = t483 * t407;
t354 = t269 * t370;
t209 = qJ(5) * t439;
t352 = -pkin(4) * t441 + t209;
t244 = g(1) * t432;
t351 = -g(2) * t430 + t244;
t347 = g(1) * t151 - g(2) * t153;
t346 = g(1) * t152 - g(2) * t154;
t71 = qJ(5) * t272 - t77;
t157 = t269 * t385 - t390;
t343 = -qJ(5) * t157 + t192;
t76 = t125 * t483 - t267 * t134;
t341 = g(2) * t365;
t340 = pkin(3) * t186 + t454;
t339 = pkin(7) * t185 - t205 * t268;
t156 = t188 * t269;
t82 = t268 * t355 - t267 * t380 - qJD(4) * t390 + (t267 * t407 + t269 * t493) * t271;
t17 = t116 * t82 + t156 * t48;
t81 = t132 * t269 + t267 * t382 - t271 * t355;
t16 = -t157 * t47 - t321 * t81;
t334 = -g(3) * t440 + t256 * t509;
t333 = -g(3) * t438 + t257 * t509;
t4 = t366 + t496;
t330 = -qJ(5) * t188 - t249;
t72 = t272 * pkin(4) - t76;
t5 = -t163 + qJDD(5) - t7;
t328 = -t256 * t375 + t209;
t327 = -t272 * pkin(7) * t186 + t128 * t269;
t324 = -pkin(7) * qJDD(2) + t398 * t485;
t323 = -qJ(6) * t151 + t365;
t322 = -qJ(6) * t153 + t364;
t318 = t268 * t182 - t238 * t403;
t75 = t331 * qJD(2) + (-t242 + (pkin(9) * t269 - t200) * t268) * qJD(3) + t416;
t96 = t268 * t191 + t200 * t403 + (-t269 * t408 - t272 * t405) * pkin(7);
t80 = -pkin(9) * t510 + t96;
t316 = t125 * t402 + t134 * t372 + t267 * t80 - t483 * t75;
t20 = t125 * t372 - t134 * t402 + t267 * t75 + t483 * t80;
t15 = t116 * t417 + t187 * t48;
t14 = -t188 * t47 - t321 * t418;
t315 = pkin(1) * t276 + t345;
t275 = qJD(2) ^ 2;
t313 = pkin(7) * t275 + qJDD(1) * t485 + t476;
t310 = t154 * pkin(4) + qJ(5) * t153 + t359;
t309 = -t135 * t177 + t333;
t308 = t136 * t177 + t334;
t307 = qJ(5) * t81 - qJD(5) * t157 + t140;
t305 = t270 * t368 + t386;
t45 = t221 * qJ(5) - t51;
t297 = t116 * t81 + t156 * t47 - t157 * t48 - t321 * t82;
t295 = t177 - t512;
t292 = -t301 - t496;
t291 = t298 * t271;
t12 = t116 * t409 + t156 * t177 - t221 * t82 - t272 * t48;
t11 = t157 * t177 + t221 * t81 + t272 * t47 + t321 * t409;
t289 = -t294 + t503;
t18 = -qJ(5) * t409 + qJD(5) * t272 - t20;
t89 = -pkin(3) * t314 + t162;
t287 = t177 * t245 + t292;
t286 = -t135 * t47 - t136 * t48 + t303;
t284 = -t301 + t507;
t281 = t47 * qJ(5) - qJD(5) * t321 + t89;
t241 = pkin(3) * t428;
t236 = -qJ(6) + t248;
t169 = t271 * t423 + t435;
t168 = -t389 + t428;
t167 = -t270 * t426 + t433;
t141 = -pkin(7) * t434 + t184;
t138 = -pkin(7) * t383 + t171;
t126 = -t177 * t272 - t221 * t409;
t112 = pkin(4) * t187 + t330;
t105 = -t187 * pkin(5) + t136;
t104 = pkin(5) * t188 + t135;
t97 = -qJD(3) * t142 + t416;
t95 = t187 * t472 + t330;
t91 = pkin(4) * t156 + t343;
t74 = t454 + t505;
t73 = t156 * t472 + t343;
t64 = t340 + t505;
t62 = -t268 * t161 + t122 - t406;
t58 = -pkin(5) * t156 - t71;
t56 = t157 * pkin(5) + t272 * qJ(6) + t72;
t53 = t454 + t499;
t44 = pkin(4) * t221 - t421;
t43 = t340 + t499;
t28 = -t45 - t492;
t23 = t221 * t472 + t420;
t22 = pkin(4) * t82 + t307;
t19 = -pkin(4) * t409 + t316;
t13 = qJD(6) * t156 + t472 * t82 + t307;
t10 = -pkin(5) * t82 - t18;
t9 = -t81 * pkin(5) - qJD(2) * t375 + t272 * qJD(6) + t316;
t8 = t48 * pkin(4) + t281;
t3 = t116 * qJD(6) + t472 * t48 + t281;
t2 = -t4 + t490;
t1 = t5 + t489;
t6 = [0, 0, 0, 0, 0, qJDD(1), -t476 + t480, t345, 0, 0, qJDD(1) * t263 + 0.2e1 * t354, 0.2e1 * t255 * t269 - 0.2e1 * t398 * t414, qJDD(2) * t269 + t272 * t275, qJDD(1) * t264 - 0.2e1 * t354, qJDD(2) * t272 - t269 * t275, 0, t324 * t269 + (-t313 + t480) * t272, t269 * t313 + t272 * t324 - t244, 0.2e1 * t413 * t455 - t345, -g(1) * (-pkin(1) * t270 + t261) - g(2) * t415 + (pkin(7) ^ 2 * t413 + pkin(1) ^ 2) * qJDD(1), -t186 * t380 + (t186 * t407 + (t291 + t360) * t269) * t271 (t185 * t271 - t186 * t268) * t407 + ((-t360 - t401) * t268 + (-t268 * t332 - t232 + t314 - t400) * t271) * t269, -t360 * t272 + (qJD(2) * t186 + t381) * t269 + ((t182 - t255) * t269 + (-t238 - t361) * t407) * t271, -t185 * t510 - t314 * t436 (t238 * t410 - t314) * t272 + (qJD(2) * t185 - t318) * t269, -t182 * t272 - t238 * t409, -g(1) * t167 - g(2) * t169 + t141 * t182 - t97 * t238 + (-qJD(2) * t339 - t62) * t272 + (-pkin(7) * t314 + t127 * qJD(2) + t162 * t268 + t271 * t399) * t269, -g(1) * t166 - g(2) * t168 - t142 * t182 + t96 * t238 + t61 * t272 + (-t268 * t399 + t162 * t271 + (t271 * t395 + t360) * pkin(7)) * t269 + ((t205 * t272 + t258 * t361) * t271 - t327) * qJD(2), t96 * t185 + t142 * t314 - t97 * t186 - t141 * t360 + t244 + (-t128 * t434 + (-t127 * t272 - t141 * t361) * t271) * qJD(2) + (-t476 + (qJD(3) * t127 - t61) * t268 + (-qJDD(1) * t141 - t406 - t62) * t271) * t269, t61 * t142 + t128 * t96 + t62 * t141 + t127 * t97 - g(1) * t261 - g(2) * (t273 * t349 + t415) - t200 * t480 + (t162 * t269 + t205 * t407) * pkin(7), t16, t297, t11, t17, -t12, t126, t116 * t140 + t139 * t82 + t156 * t89 + t177 * t76 + t192 * t48 + t221 * t316 - t272 * t7 - t409 * t50 + t346, -t139 * t81 + t140 * t321 + t157 * t89 - t177 * t77 - t192 * t47 + t20 * t221 - t272 * t366 - t409 * t51 - t347, -t116 * t20 + t156 * t366 - t157 * t7 + t316 * t321 + t47 * t76 - t48 * t77 - t50 * t81 - t51 * t82 + t351, -t366 * t77 + t51 * t20 + t7 * t76 + t50 * t316 + t89 * t192 + t139 * t140 - g(1) * t305 - g(2) * (t359 - t388) t126, -t11, t12, t16, t297, t17, t116 * t18 + t156 * t4 + t157 * t5 + t19 * t321 - t44 * t81 + t45 * t82 - t47 * t72 + t48 * t71 + t351, -t116 * t22 - t156 * t8 + t177 * t72 - t19 * t221 - t272 * t5 + t409 * t44 - t48 * t91 - t57 * t82 - t346, -t157 * t8 - t177 * t71 + t18 * t221 - t22 * t321 + t272 * t4 - t409 * t45 + t47 * t91 + t57 * t81 + t347, t8 * t91 + t57 * t22 + t4 * t71 + t45 * t18 + t5 * t72 + t44 * t19 - g(1) * (t305 + t497) - g(2) * (t310 - t388) t126, t12, t11, t17, -t297, t16, t1 * t157 - t10 * t116 - t156 * t2 - t23 * t81 - t28 * t82 + t321 * t9 - t47 * t56 - t48 * t58 + t351, -t10 * t221 - t13 * t321 - t157 * t3 + t177 * t58 - t2 * t272 + t28 * t409 + t41 * t81 + t47 * t73 + t347, t1 * t272 + t116 * t13 + t156 * t3 - t177 * t56 + t221 * t9 - t23 * t409 + t41 * t82 + t48 * t73 + t346, t3 * t73 + t41 * t13 + t1 * t56 + t23 * t9 + t2 * t58 + t28 * t10 - g(1) * (-qJ(6) * t152 + t386 + t497) - g(2) * (qJ(6) * t154 + t269 * t374 + t310) - (-pkin(5) * t269 + t368) * t480; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t387, t414 * t276, t395, t387, t255, qJDD(2), t269 * t315 - t250 - t474, t475 + (t315 - t455) * t272, 0, 0, t360 * t268 + (t268 * t304 - t443) * t271 (-t358 + t443) * t268 + (-t214 + t291 + 0.2e1 * t396 - t445) * t271 (-t186 * t269 + t271 * t424) * qJD(1) + t318, t268 * t445 + t271 * t314, t381 + t271 * t182 + (-t185 * t269 - t268 * t424) * qJD(1), t238 * t412, -pkin(2) * t358 + t137 * t238 + (t399 - t481) * t268 + (-t127 * t269 + t272 * t339) * qJD(1) + t488 * t271, pkin(2) * t214 - t138 * t238 + t327 * qJD(1) + (-pkin(2) * t298 - t205 * t238 - t481) * t271 - t488 * t268, t137 * t186 - t138 * t185 + (-t62 + t446 + (t360 - t401) * pkin(8)) * t268 + ((t268 * t298 + t314 + t400) * pkin(8) + t502) * t271 + t303, -t205 * t252 - t127 * t137 - t128 * t138 + t296 * pkin(2) + (-t62 * t268 + t61 * t271 + (-t127 * t271 - t128 * t268) * qJD(3) + t303) * pkin(8), t14, t288, t34, t15, t486, t378, t116 * t350 + t139 * t417 + t187 * t89 + t221 * t463 - t249 * t48 + t412 * t50 + t309, -t139 * t418 + t188 * t89 + t221 * t466 + t249 * t47 + t321 * t350 + t412 * t51 - t308, -t116 * t466 + t187 * t366 - t188 * t7 + t321 * t463 - t417 * t51 - t418 * t50 + t286, -t366 * t136 - t7 * t135 - t89 * t249 - g(3) * (t211 - t429) + t466 * t51 + t463 * t50 + t350 * t139 + t345 * (t249 * t269 + t272 * t274) t378, -t34, -t486, t14, t288, t15, t116 * t465 + t187 * t4 + t188 * t5 + t321 * t464 + t417 * t45 - t418 * t44 + t286, -t112 * t48 - t116 * t467 - t187 * t8 - t221 * t464 - t412 * t44 - t417 * t57 - t309, t112 * t47 - t188 * t8 + t221 * t465 - t321 * t467 + t412 * t45 + t418 * t57 + t308, t8 * t112 - t4 * t136 + t5 * t135 - t356 + t467 * t57 + t465 * t45 + t464 * t44 + t274 * t325 + (g(3) * t274 + t345 * (pkin(4) * t257 - t363)) * t269, t378, -t486, t34, t15, -t288, t14, t1 * t188 - t104 * t47 - t105 * t48 - t116 * t469 - t187 * t2 - t23 * t418 - t28 * t417 + t321 * t468 + t303, t105 * t177 - t188 * t3 - t221 * t469 - t28 * t412 - t321 * t470 + t41 * t418 + t47 * t95 + t334, -t104 * t177 + t116 * t470 + t187 * t3 + t221 * t468 + t23 * t412 + t41 * t417 + t48 * t95 + t333, t3 * t95 + t1 * t104 + t2 * t105 - t356 + t470 * t41 + t469 * t28 + t468 * t23 + (-g(3) * qJ(6) * t257 - g(1) * t374 - t471 * t477) * t272 + (-g(3) * t471 + t345 * (t257 * t472 - t363)) * t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t444, -t185 ^ 2 + t186 ^ 2, t283 + t445, t444, t314 - t443, t182, -t206 * t403 - g(1) * t168 + t478 - t446 - t186 * t205 + t122 + (t362 + t475) * t268, g(1) * t169 - g(2) * t167 + g(3) * t431 - t185 * t205 - t502, 0, 0, t512, t337, -t508, -t512, -t513, t177, -t54 * t221 + (-t116 * t186 + t177 * t483 + t221 * t402) * pkin(3) + t487, -t55 * t221 + (-t177 * t267 - t186 * t321 + t221 * t372) * pkin(3) + t506, t51 * t321 + t55 * t116 + t116 * t50 - t54 * t321 + (t483 * t47 - t267 * t48 + (-t116 * t483 + t267 * t321) * qJD(4)) * pkin(3), -g(1) * t241 - t50 * t54 - t51 * t55 + (g(2) * t425 + t7 * t483 - t139 * t186 - t366 * t267 - t303 * t268 + (t50 * t267 + t483 * t51) * qJD(4)) * pkin(3), t177, t508, t513, t512, t337, -t512, -t248 * t47 - t460 + (t353 - t45) * t321 + (t457 + t44) * t116, t116 * t64 + t177 * t248 - t221 * t353 - t290 + t503, t221 * t457 + t321 * t64 + t287 - t514, -t4 * t245 + t5 * t248 - t57 * t64 - t44 * t54 - g(1) * (t241 + t364) - t341 - g(3) * (-t239 + t352) + t457 * t45 + (g(1) * t389 + t402 * t44 + t478) * pkin(3), t177, t513, -t508, -t512, -t337, t512, -t236 * t47 - t460 + (t28 + t458) * t321 + (-t456 + t23) * t116, -t221 * t456 + t321 * t43 + t287 + t507, -t116 * t43 - t177 * t236 + t221 * t458 + t282, t1 * t236 + t2 * t245 - t41 * t43 - g(1) * (-pkin(3) * t389 + t241 + t322) - g(2) * (-pkin(3) * t166 + t323) - g(3) * (-t239 + t328) + t456 * t28 + t458 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t512, t337, -t508, -t512, -t513, t177, -t461 + t487, t221 * t50 + t506, 0, 0, t177, t508, t513, t512, t337, -t512, pkin(4) * t47 - t462 + (-t45 - t51) * t321 + (t44 + t421) * t116, t116 * t74 - 0.2e1 * t163 + t289 + t461, t221 * t421 + t321 * t74 + t160 + t292 - t514, -t5 * pkin(4) - g(1) * t364 - g(3) * t352 - t4 * qJ(5) + t421 * t45 - t44 * t51 - t57 * t74 - t341, t177, t513, -t508, -t512, -t337, t512, -t462 + t472 * t47 + (t28 + t419) * t321 + (t23 - t420) * t116, -t221 * t329 + t321 * t53 + 0.2e1 * t160 - 0.2e1 * t199 + t284, -t116 * t53 + t177 * t472 + t221 * t419 + t282, -g(1) * t322 - g(2) * t323 - g(3) * t328 + t2 * qJ(5) - t1 * t472 + t23 * t419 + t28 * t420 - t41 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t508, t295, t498, -t221 * t45 - t163 + t289, 0, 0, 0, 0, 0, 0, -t508, t498, -t295, t221 * t28 - t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t513, t177 + t512, -t113 - t212, -t221 * t23 + t284 - t496;];
tau_reg  = t6;
