% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6PRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tauc_reg [6x32]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6PRRRRR3_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR3_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR3_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR3_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:51:32
% EndTime: 2019-03-09 00:51:49
% DurationCPUTime: 6.11s
% Computational Cost: add. (5939->462), mult. (14853->663), div. (0->0), fcn. (11509->12), ass. (0->239)
t213 = sin(qJ(4));
t218 = cos(qJ(4));
t283 = t218 * qJD(3);
t214 = sin(qJ(3));
t294 = qJD(2) * t214;
t166 = t213 * t294 - t283;
t292 = qJD(3) * t213;
t168 = t218 * t294 + t292;
t212 = sin(qJ(5));
t217 = cos(qJ(5));
t103 = t217 * t166 + t168 * t212;
t215 = sin(qJ(2));
t209 = sin(pkin(6));
t297 = qJD(1) * t209;
t275 = t215 * t297;
t180 = qJD(2) * pkin(8) + t275;
t210 = cos(pkin(6));
t219 = cos(qJ(3));
t296 = qJD(1) * t219;
t136 = -t214 * t180 + t210 * t296;
t127 = -qJD(3) * pkin(3) - t136;
t88 = pkin(4) * t166 + t127;
t46 = pkin(5) * t103 + t88;
t211 = sin(qJ(6));
t216 = cos(qJ(6));
t239 = t166 * t212 - t217 * t168;
t54 = t216 * t103 - t211 * t239;
t359 = t46 * t54;
t241 = t103 * t211 + t216 * t239;
t358 = t241 * t54;
t246 = pkin(3) * t214 - pkin(9) * t219;
t177 = t246 * qJD(3);
t291 = qJD(3) * t214;
t220 = cos(qJ(2));
t308 = t219 * t220;
t336 = pkin(8) * t213;
t367 = (-t213 * t308 + t215 * t218) * t297 - t218 * t177 - t291 * t336;
t182 = -pkin(3) * t219 - pkin(9) * t214 - pkin(2);
t288 = qJD(4) * t218;
t366 = -(t213 * t215 + t218 * t308) * t297 + t213 * t177 + t182 * t288;
t355 = t241 ^ 2 - t54 ^ 2;
t293 = qJD(2) * t219;
t196 = -qJD(4) + t293;
t190 = -qJD(5) + t196;
t185 = -qJD(6) + t190;
t281 = qJD(3) * qJD(4);
t289 = qJD(4) * t213;
t268 = t214 * t289;
t342 = t219 * t283 - t268;
t130 = qJD(2) * t342 + t218 * t281;
t290 = qJD(3) * t219;
t266 = t213 * t290;
t267 = t214 * t288;
t229 = t266 + t267;
t131 = qJD(2) * t229 + t213 * t281;
t223 = qJD(5) * t239 - t130 * t212 - t217 * t131;
t284 = qJD(6) * t216;
t285 = qJD(6) * t211;
t286 = qJD(5) * t217;
t287 = qJD(5) * t212;
t35 = t217 * t130 - t212 * t131 - t166 * t286 - t168 * t287;
t8 = -t103 * t284 + t211 * t223 + t216 * t35 + t239 * t285;
t353 = -t185 * t54 + t8;
t282 = qJD(2) * qJD(3);
t200 = t214 * t282;
t315 = t210 * t214;
t195 = qJD(1) * t315;
t137 = t219 * t180 + t195;
t128 = qJD(3) * pkin(9) + t137;
t274 = t220 * t297;
t139 = qJD(2) * t182 - t274;
t75 = -t128 * t213 + t218 * t139;
t61 = -pkin(10) * t168 + t75;
t44 = -pkin(4) * t196 + t61;
t322 = t139 * t213;
t76 = t128 * t218 + t322;
t62 = -pkin(10) * t166 + t76;
t51 = t217 * t62;
t24 = t212 * t44 + t51;
t135 = (t177 + t275) * qJD(2);
t295 = qJD(2) * t209;
t271 = t220 * t295;
t92 = -t180 * t291 + (qJD(3) * t210 + t271) * t296;
t256 = -t218 * t135 + t213 * t92;
t224 = -qJD(4) * t76 - t256;
t22 = pkin(4) * t200 - pkin(10) * t130 + t224;
t232 = -t128 * t289 + t213 * t135 + t139 * t288 + t218 * t92;
t27 = -pkin(10) * t131 + t232;
t261 = -t212 * t27 + t217 * t22;
t226 = -qJD(5) * t24 + t261;
t2 = pkin(5) * t200 - pkin(11) * t35 + t226;
t257 = -t212 * t22 - t217 * t27 - t44 * t286 + t62 * t287;
t3 = pkin(11) * t223 - t257;
t277 = t216 * t2 - t211 * t3;
t365 = t46 * t241 + t277;
t225 = qJD(6) * t241 - t211 * t35 + t216 * t223;
t348 = t185 * t241 + t225;
t309 = t218 * t219;
t198 = pkin(8) * t309;
t237 = pkin(4) * t214 - pkin(10) * t309;
t364 = -t237 * qJD(3) - (-t198 + (pkin(10) * t214 - t182) * t213) * qJD(4) + t367;
t363 = -t229 * pkin(10) + (-t214 * t283 - t219 * t289) * pkin(8) + t366;
t270 = t213 * t293;
t339 = pkin(9) + pkin(10);
t276 = qJD(4) * t339;
t174 = t246 * qJD(2);
t303 = t218 * t136 + t213 * t174;
t357 = pkin(10) * t270 - t213 * t276 - t303;
t253 = -t136 * t213 + t218 * t174;
t362 = qJD(2) * t237 + t218 * t276 + t253;
t361 = pkin(11) * t103;
t360 = pkin(11) * t239;
t356 = t239 * t103;
t169 = t212 * t213 - t217 * t218;
t231 = t169 * t219;
t341 = qJD(4) + qJD(5);
t305 = qJD(2) * t231 - t341 * t169;
t170 = t212 * t218 + t213 * t217;
t304 = (-t293 + t341) * t170;
t354 = -t103 ^ 2 + t239 ^ 2;
t352 = -t103 * t190 + t35;
t351 = t103 * t88 + t257;
t350 = t88 * t239 + t226;
t49 = t212 * t62;
t23 = t217 * t44 - t49;
t14 = t23 + t360;
t12 = -pkin(5) * t190 + t14;
t15 = t24 - t361;
t328 = t216 * t15;
t5 = t211 * t12 + t328;
t349 = -qJD(6) * t5 + t365;
t347 = t190 * t239 + t223;
t165 = t218 * t182;
t310 = t214 * t218;
t109 = -pkin(10) * t310 + t165 + (-pkin(4) - t336) * t219;
t299 = t213 * t182 + t198;
t312 = t213 * t214;
t119 = -pkin(10) * t312 + t299;
t346 = t109 * t286 - t119 * t287 - t364 * t212 + t363 * t217;
t345 = t363 * t212 + t364 * t217;
t344 = t362 * t217;
t144 = t170 * t214;
t247 = -t137 + (-t270 + t289) * pkin(4);
t186 = t339 * t213;
t187 = t339 * t218;
t300 = -t212 * t186 + t217 * t187;
t343 = -t186 * t286 - t187 * t287 - t362 * t212 + t357 * t217;
t262 = qJD(6) * t12 + t3;
t13 = t15 * t285;
t264 = t211 * t2 - t13;
t340 = t216 * t262 + t264;
t325 = t212 * t109 + t217 * t119;
t70 = -qJD(3) * t231 - t341 * t144;
t338 = -pkin(5) * t291 + pkin(11) * t70 + qJD(5) * t325 + t345;
t71 = -t287 * t312 + (t341 * t310 + t266) * t217 + t342 * t212;
t337 = -pkin(11) * t71 + t346;
t107 = t216 * t169 + t170 * t211;
t335 = -qJD(6) * t107 - t304 * t211 + t305 * t216;
t108 = -t169 * t211 + t170 * t216;
t334 = qJD(6) * t108 + t305 * t211 + t304 * t216;
t333 = t217 * t61 - t49;
t331 = t304 * pkin(5) + t247;
t330 = qJD(2) * pkin(2);
t329 = t216 * t12;
t251 = t214 * t271;
t93 = qJD(1) * t251 + qJD(3) * t195 + t180 * t290;
t327 = t93 * t213;
t326 = t93 * t218;
t324 = t127 * t213;
t323 = t130 * t213;
t321 = t166 * t196;
t320 = t168 * t196;
t319 = t196 * t218;
t318 = t209 * t215;
t317 = t209 * t220;
t222 = qJD(2) ^ 2;
t316 = t209 * t222;
t314 = t211 * t212;
t313 = t212 * t216;
t311 = t213 * t219;
t221 = qJD(3) ^ 2;
t307 = t221 * t214;
t306 = t221 * t219;
t178 = pkin(4) * t312 + t214 * pkin(8);
t207 = t214 ^ 2;
t298 = -t219 ^ 2 + t207;
t280 = pkin(4) * qJD(5) * t185;
t278 = t215 * t316;
t138 = pkin(4) * t229 + pkin(8) * t290;
t203 = -pkin(4) * t218 - pkin(3);
t272 = t215 * t295;
t269 = t196 * t289;
t259 = -t212 * t61 - t51;
t255 = t217 * t109 - t119 * t212;
t252 = -t217 * t186 - t187 * t212;
t250 = t219 * t271;
t90 = -pkin(11) * t169 + t300;
t249 = pkin(5) * t294 + t305 * pkin(11) + t300 * qJD(5) + qJD(6) * t90 + t357 * t212 + t344;
t89 = -pkin(11) * t170 + t252;
t248 = -t304 * pkin(11) + qJD(6) * t89 + t343;
t181 = -t274 - t330;
t245 = -t181 - t274;
t145 = t169 * t214;
t39 = -pkin(5) * t219 + pkin(11) * t145 + t255;
t40 = -pkin(11) * t144 + t325;
t244 = t211 * t39 + t216 * t40;
t151 = t219 * t318 + t315;
t117 = -t151 * t213 - t218 * t317;
t234 = -t151 * t218 + t213 * t317;
t65 = t117 * t217 + t212 * t234;
t66 = t117 * t212 - t217 * t234;
t243 = -t211 * t66 + t216 * t65;
t242 = t211 * t65 + t216 * t66;
t85 = t216 * t144 - t145 * t211;
t86 = -t144 * t211 - t145 * t216;
t238 = qJD(2) * t207 - t196 * t219;
t69 = pkin(4) * t131 + t93;
t202 = pkin(4) * t217 + pkin(5);
t236 = pkin(4) * t313 + t202 * t211;
t235 = -pkin(4) * t314 + t202 * t216;
t150 = -t210 * t219 + t214 * t318;
t228 = qJD(3) * (-t245 - t330);
t143 = pkin(5) * t169 + t203;
t116 = qJD(3) * t151 + t251;
t115 = -qJD(3) * t150 + t250;
t111 = pkin(5) * t144 + t178;
t82 = pkin(4) * t168 - pkin(5) * t239;
t48 = qJD(4) * t117 + t115 * t218 + t213 * t272;
t47 = qJD(4) * t234 - t115 * t213 + t218 * t272;
t41 = pkin(5) * t71 + t138;
t25 = -pkin(5) * t223 + t69;
t19 = qJD(6) * t86 + t211 * t70 + t216 * t71;
t18 = -qJD(6) * t85 - t211 * t71 + t216 * t70;
t17 = t333 + t360;
t16 = t259 + t361;
t11 = -qJD(5) * t66 - t212 * t48 + t217 * t47;
t10 = qJD(5) * t65 + t212 * t47 + t217 * t48;
t4 = -t15 * t211 + t329;
t1 = [0, 0, -t278, -t220 * t316, 0, 0, 0, 0, 0, -t219 * t278 + (-t116 - t251) * qJD(3), t214 * t278 + (-t115 - t250) * qJD(3), 0, 0, 0, 0, 0, t116 * t166 + t117 * t200 + t131 * t150 - t196 * t47, t116 * t168 + t130 * t150 + t196 * t48 + t200 * t234, 0, 0, 0, 0, 0, t103 * t116 - t11 * t190 - t150 * t223 + t200 * t65, t10 * t190 - t116 * t239 + t150 * t35 - t200 * t66, 0, 0, 0, 0, 0 -(-qJD(6) * t242 - t10 * t211 + t11 * t216) * t185 + t243 * t200 + t116 * t54 - t150 * t225 (qJD(6) * t243 + t10 * t216 + t11 * t211) * t185 - t242 * t200 - t116 * t241 + t150 * t8; 0, 0, 0, 0, 0.2e1 * t219 * t200, -0.2e1 * t298 * t282, t306, -t307, 0, -pkin(8) * t306 + t214 * t228, pkin(8) * t307 + t219 * t228, t130 * t310 + t342 * t168 (-t166 * t218 - t168 * t213) * t290 + (-t323 - t131 * t218 + (t166 * t213 - t168 * t218) * qJD(4)) * t214, t196 * t268 - t130 * t219 + (t168 * t214 + t218 * t238) * qJD(3), t196 * t267 + t131 * t219 + (-t166 * t214 - t213 * t238) * qJD(3) (-t196 - t293) * t291 (t182 * t289 + t367) * t196 + ((pkin(8) * t166 + t324) * qJD(3) + (t322 + (pkin(8) * t196 + t128) * t218) * qJD(4) + t256) * t219 + (-t166 * t274 + t127 * t288 + pkin(8) * t131 + t327 + ((-pkin(8) * t311 + t165) * qJD(2) + t75) * qJD(3)) * t214, t366 * t196 + (t127 * t283 + (qJD(3) * t168 - t269) * pkin(8) + t232) * t219 + (-t168 * t274 - t127 * t289 + pkin(8) * t130 + t326 + (-pkin(8) * t319 - qJD(2) * t299 - t76) * qJD(3)) * t214, -t145 * t35 - t239 * t70, -t103 * t70 - t144 * t35 - t145 * t223 + t239 * t71, -t190 * t70 - t219 * t35 + (-qJD(2) * t145 - t239) * t291, t190 * t71 - t219 * t223 + (-qJD(2) * t144 - t103) * t291 (-t190 - t293) * t291, -t261 * t219 + t138 * t103 - t178 * t223 + t69 * t144 + t88 * t71 + t345 * t190 + (t190 * t325 + t219 * t24) * qJD(5) + (-t103 * t274 + (qJD(2) * t255 + t23) * qJD(3)) * t214, -t257 * t219 - t138 * t239 + t178 * t35 - t69 * t145 + t88 * t70 + t346 * t190 + (t239 * t274 + (-qJD(2) * t325 - t24) * qJD(3)) * t214, -t18 * t241 + t8 * t86, -t18 * t54 + t19 * t241 + t225 * t86 - t8 * t85, -t18 * t185 - t219 * t8 + (qJD(2) * t86 - t241) * t291, t185 * t19 - t219 * t225 + (-qJD(2) * t85 - t54) * t291 (-t185 - t293) * t291, -t277 * t219 + t41 * t54 - t111 * t225 + t25 * t85 + t46 * t19 + (t211 * t337 + t216 * t338) * t185 + (t185 * t244 + t219 * t5) * qJD(6) + (-t54 * t274 + ((-t211 * t40 + t216 * t39) * qJD(2) + t4) * qJD(3)) * t214, t340 * t219 - t41 * t241 + t111 * t8 + t25 * t86 + t46 * t18 + ((qJD(6) * t39 + t337) * t216 + (-qJD(6) * t40 - t338) * t211) * t185 + (t241 * t274 + (-qJD(2) * t244 - t5) * qJD(3)) * t214; 0, 0, 0, 0, -t214 * t222 * t219, t298 * t222, 0, 0, 0, qJD(3) * t137 - t181 * t294 - t93, t245 * t293, -t168 * t319 + t323 (t130 + t321) * t218 + (-t131 + t320) * t213, -t196 * t288 + (t196 * t309 + (-t168 + t292) * t214) * qJD(2), t269 + (-t196 * t311 + (t166 + t283) * t214) * qJD(2), t196 * t294, -pkin(3) * t131 - t326 + t253 * t196 - t137 * t166 + (pkin(9) * t319 + t324) * qJD(4) + (-t75 * t214 + (-pkin(9) * t291 - t127 * t219) * t213) * qJD(2), -pkin(3) * t130 + t327 - t303 * t196 - t137 * t168 + (-pkin(9) * t196 * t213 + t127 * t218) * qJD(4) + (-t127 * t309 + (-pkin(9) * t283 + t76) * t214) * qJD(2), t170 * t35 - t239 * t305, -t103 * t305 - t169 * t35 + t170 * t223 + t239 * t304, -t305 * t190 + (qJD(3) * t170 + t239) * t294, t304 * t190 + (-qJD(3) * t169 + t103) * t294, t190 * t294, t69 * t169 - t203 * t223 + t304 * t88 + (t187 * t286 + (-qJD(5) * t186 + t357) * t212 + t344) * t190 + t247 * t103 + (qJD(3) * t252 - t23) * t294, t69 * t170 + t203 * t35 + t305 * t88 + t343 * t190 - t247 * t239 + (-qJD(3) * t300 + t24) * t294, t108 * t8 - t241 * t335, -t107 * t8 + t108 * t225 + t241 * t334 - t335 * t54, -t335 * t185 + (qJD(3) * t108 + t241) * t294, t334 * t185 + (-qJD(3) * t107 + t54) * t294, t185 * t294, t25 * t107 - t143 * t225 + t331 * t54 + t334 * t46 + (t211 * t248 + t216 * t249) * t185 + ((-t211 * t90 + t216 * t89) * qJD(3) - t4) * t294, t25 * t108 + t143 * t8 - t331 * t241 + t335 * t46 + (-t211 * t249 + t216 * t248) * t185 + (-(t211 * t89 + t216 * t90) * qJD(3) + t5) * t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168 * t166, -t166 ^ 2 + t168 ^ 2, t130 - t321, -t131 - t320, t200, -t127 * t168 - t196 * t76 + t224, t127 * t166 - t196 * t75 - t232, -t356, t354, t352, t347, t200, t259 * t190 + (-t103 * t168 + t190 * t287 + t200 * t217) * pkin(4) + t350, -t333 * t190 + (t168 * t239 + t190 * t286 - t200 * t212) * pkin(4) + t351, -t358, t355, t353, t348, t200, t235 * t200 + (t16 * t216 - t17 * t211) * t185 - t82 * t54 - (-t211 * t217 - t313) * t280 + (t185 * t236 - t5) * qJD(6) + t365, -t236 * t200 - t216 * t3 - (t16 * t211 + t17 * t216) * t185 + t82 * t241 + t359 + (t216 * t217 - t314) * t280 + (t185 * t235 - t329) * qJD(6) - t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, t354, t352, t347, t200, -t190 * t24 + t350, -t190 * t23 + t351, -t358, t355, t353, t348, t200 (-t14 * t211 - t328) * t185 + (t185 * t285 + t200 * t216 + t239 * t54) * pkin(5) + t349, t359 + t13 + (t15 * t185 - t2) * t211 + (-t14 * t185 - t262) * t216 + (t185 * t284 - t200 * t211 - t239 * t241) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t358, t355, t353, t348, t200, -t185 * t5 + t349, -t185 * t4 - t340 + t359;];
tauc_reg  = t1;
