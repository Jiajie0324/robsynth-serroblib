% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 11:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 11:07:27
% EndTime: 2019-05-05 11:07:37
% DurationCPUTime: 10.55s
% Computational Cost: add. (92176->338), mult. (182690->513), div. (0->0), fcn. (137653->14), ass. (0->287)
t2240 = sin(pkin(6));
t2302 = -g(3) + qJDD(1);
t2286 = t2240 * t2302;
t2239 = sin(pkin(12));
t2241 = cos(pkin(12));
t2215 = g(1) * t2239 - g(2) * t2241;
t2242 = cos(pkin(6));
t2294 = t2215 * t2242;
t2314 = t2286 + t2294;
t2253 = cos(qJ(3));
t2300 = qJD(2) * t2253;
t2228 = -qJD(4) + t2300;
t2223 = -qJD(5) + t2228;
t2217 = -qJD(6) + t2223;
t2313 = qJD(6) - t2217;
t2312 = qJD(3) ^ 2;
t2247 = sin(qJ(4));
t2252 = cos(qJ(4));
t2248 = sin(qJ(3));
t2301 = qJD(2) * t2248;
t2205 = -t2252 * qJD(3) + t2247 * t2301;
t2206 = qJD(3) * t2247 + t2252 * t2301;
t2246 = sin(qJ(5));
t2251 = cos(qJ(5));
t2183 = t2251 * t2205 + t2206 * t2246;
t2185 = -t2205 * t2246 + t2206 * t2251;
t2245 = sin(qJ(6));
t2250 = cos(qJ(6));
t2155 = t2250 * t2183 + t2185 * t2245;
t2311 = t2155 ^ 2;
t2157 = -t2183 * t2245 + t2185 * t2250;
t2310 = t2157 ^ 2;
t2309 = t2183 ^ 2;
t2308 = t2185 ^ 2;
t2307 = t2205 ^ 2;
t2306 = t2206 ^ 2;
t2305 = t2217 ^ 2;
t2304 = t2223 ^ 2;
t2303 = t2228 ^ 2;
t2299 = t2155 * t2157;
t2298 = t2183 * t2185;
t2297 = t2183 * t2223;
t2296 = t2205 * t2206;
t2295 = t2205 * t2228;
t2293 = qJD(4) + t2228;
t2292 = qJD(5) + t2223;
t2291 = qJD(6) + t2217;
t2216 = -g(1) * t2241 - g(2) * t2239;
t2249 = sin(qJ(2));
t2254 = cos(qJ(2));
t2174 = t2254 * t2216 + t2249 * t2314;
t2255 = qJD(2) ^ 2;
t2165 = -pkin(2) * t2255 + qJDD(2) * pkin(8) + t2174;
t2258 = -t2240 * t2215 + t2242 * t2302;
t2154 = t2253 * t2165 + t2248 * t2258;
t2207 = (-pkin(3) * t2253 - pkin(9) * t2248) * qJD(2);
t2135 = -pkin(3) * t2312 + qJDD(3) * pkin(9) + t2207 * t2300 + t2154;
t2281 = t2249 * t2216 - t2254 * t2314;
t2164 = -qJDD(2) * pkin(2) - t2255 * pkin(8) + t2281;
t2288 = qJD(3) * t2300;
t2289 = t2248 * qJDD(2);
t2209 = t2288 + t2289;
t2231 = qJD(3) * t2301;
t2233 = t2253 * qJDD(2);
t2210 = t2233 - 0.2e1 * t2231;
t2139 = (-t2209 - t2288) * pkin(9) - t2210 * pkin(3) + t2164;
t2103 = -t2247 * t2135 + t2252 * t2139;
t2287 = t2233 - qJDD(4) - t2231;
t2172 = -t2287 - t2296;
t2262 = -t2247 * qJDD(3) - t2252 * t2209;
t2178 = -qJD(4) * t2205 - t2262;
t2092 = (-t2178 + t2295) * pkin(10) + t2172 * pkin(4) + t2103;
t2104 = t2252 * t2135 + t2247 * t2139;
t2194 = -pkin(4) * t2228 - pkin(10) * t2206;
t2283 = -t2252 * qJDD(3) + t2247 * t2209;
t2260 = -qJD(4) * t2206 - t2283;
t2096 = -pkin(4) * t2307 + pkin(10) * t2260 + t2228 * t2194 + t2104;
t2059 = t2246 * t2092 + t2251 * t2096;
t2235 = t2248 ^ 2;
t2236 = t2253 ^ 2;
t2290 = t2235 + t2236;
t2058 = t2251 * t2092 - t2246 * t2096;
t2256 = -t2251 * t2178 - t2246 * t2260;
t2131 = -t2183 * qJD(5) - t2256;
t2284 = t2246 * t2178 - t2251 * t2260;
t2259 = qJD(5) * t2185 + t2284;
t2285 = -t2245 * t2131 - t2250 * t2259;
t2282 = -qJDD(5) + t2287;
t2143 = -t2282 - t2298;
t2047 = (-t2131 + t2297) * pkin(11) + t2143 * pkin(5) + t2058;
t2166 = -pkin(5) * t2223 - pkin(11) * t2185;
t2050 = -pkin(5) * t2309 - pkin(11) * t2259 + t2223 * t2166 + t2059;
t2028 = t2047 * t2250 - t2050 * t2245;
t2029 = t2047 * t2245 + t2050 * t2250;
t2014 = t2028 * t2250 + t2029 * t2245;
t2015 = -t2028 * t2245 + t2029 * t2250;
t2003 = t2014 * t2251 + t2015 * t2246;
t2004 = -t2014 * t2246 + t2015 * t2251;
t1997 = -t2003 * t2247 + t2004 * t2252;
t2193 = t2253 * t2258;
t2134 = -t2193 - qJDD(3) * pkin(3) - t2312 * pkin(9) + (qJD(2) * t2207 + t2165) * t2248;
t2105 = -t2260 * pkin(4) - t2307 * pkin(10) + t2206 * t2194 + t2134;
t2070 = pkin(5) * t2259 - pkin(11) * t2309 + t2185 * t2166 + t2105;
t1995 = t1997 * t2253 + t2070 * t2248;
t1996 = t2003 * t2252 + t2004 * t2247;
t2280 = t1995 * t2249 - t1996 * t2254;
t2072 = -t2157 * t2291 + t2285;
t2257 = -t2250 * t2131 + t2245 * t2259;
t2074 = t2155 * t2291 + t2257;
t2048 = t2072 * t2245 + t2074 * t2250;
t2049 = t2072 * t2250 - t2074 * t2245;
t2026 = t2048 * t2251 + t2049 * t2246;
t2027 = -t2048 * t2246 + t2049 * t2251;
t2013 = -t2026 * t2247 + t2027 * t2252;
t2100 = -t2310 - t2311;
t2011 = t2013 * t2253 + t2100 * t2248;
t2012 = t2026 * t2252 + t2027 * t2247;
t2279 = t2011 * t2249 - t2012 * t2254;
t2041 = t2058 * t2251 + t2059 * t2246;
t2042 = -t2058 * t2246 + t2059 * t2251;
t2021 = -t2041 * t2247 + t2042 * t2252;
t2019 = t2021 * t2253 + t2105 * t2248;
t2020 = t2041 * t2252 + t2042 * t2247;
t2278 = t2019 * t2249 - t2020 * t2254;
t2261 = -qJDD(6) + t2282;
t2111 = -t2261 - t2299;
t2112 = -t2305 - t2311;
t2085 = t2111 * t2250 + t2112 * t2245;
t2086 = -t2111 * t2245 + t2112 * t2250;
t2054 = t2085 * t2251 + t2086 * t2246;
t2055 = -t2085 * t2246 + t2086 * t2251;
t2038 = -t2054 * t2247 + t2055 * t2252;
t2071 = t2157 * t2313 - t2285;
t2025 = t2038 * t2253 + t2071 * t2248;
t2037 = t2054 * t2252 + t2055 * t2247;
t2277 = t2025 * t2249 - t2037 * t2254;
t2110 = t2261 - t2299;
t2136 = -t2305 - t2310;
t2097 = t2110 * t2245 + t2136 * t2250;
t2098 = t2110 * t2250 - t2136 * t2245;
t2060 = t2097 * t2251 + t2098 * t2246;
t2061 = -t2097 * t2246 + t2098 * t2251;
t2044 = -t2060 * t2247 + t2061 * t2252;
t2073 = -t2155 * t2313 - t2257;
t2031 = t2044 * t2253 + t2073 * t2248;
t2043 = t2060 * t2252 + t2061 * t2247;
t2276 = t2031 * t2249 - t2043 * t2254;
t2114 = -t2185 * t2292 - t2284;
t2116 = t2183 * t2292 + t2256;
t2087 = t2114 * t2246 + t2116 * t2251;
t2088 = t2114 * t2251 - t2116 * t2246;
t2057 = -t2087 * t2247 + t2088 * t2252;
t2132 = -t2308 - t2309;
t2052 = t2057 * t2253 + t2132 * t2248;
t2056 = t2087 * t2252 + t2088 * t2247;
t2275 = t2052 * t2249 - t2056 * t2254;
t2150 = -t2304 - t2309;
t2108 = t2143 * t2251 + t2150 * t2246;
t2109 = -t2143 * t2246 + t2150 * t2251;
t2084 = -t2108 * t2247 + t2109 * t2252;
t2113 = (qJD(5) - t2223) * t2185 + t2284;
t2063 = t2084 * t2253 + t2113 * t2248;
t2083 = t2108 * t2252 + t2109 * t2247;
t2274 = t2063 * t2249 - t2083 * t2254;
t2078 = -t2103 * t2247 + t2104 * t2252;
t2065 = t2078 * t2253 + t2134 * t2248;
t2077 = t2103 * t2252 + t2104 * t2247;
t2273 = t2065 * t2249 - t2077 * t2254;
t2142 = t2282 - t2298;
t2162 = -t2304 - t2308;
t2121 = t2142 * t2246 + t2162 * t2251;
t2122 = t2142 * t2251 - t2162 * t2246;
t2094 = -t2121 * t2247 + t2122 * t2252;
t2115 = t2131 + t2297;
t2069 = t2094 * t2253 + t2115 * t2248;
t2093 = t2121 * t2252 + t2122 * t2247;
t2272 = t2069 * t2249 - t2093 * t2254;
t2159 = -t2206 * t2293 - t2283;
t2161 = t2205 * t2293 + t2262;
t2126 = t2159 * t2252 - t2161 * t2247;
t2170 = -t2306 - t2307;
t2107 = t2126 * t2253 + t2170 * t2248;
t2125 = t2159 * t2247 + t2161 * t2252;
t2271 = t2107 * t2249 - t2125 * t2254;
t2153 = -t2165 * t2248 + t2193;
t2118 = -t2153 * t2248 + t2154 * t2253;
t2270 = t2118 * t2249 - t2164 * t2254;
t2179 = -t2303 - t2307;
t2145 = -t2172 * t2247 + t2179 * t2252;
t2158 = (qJD(4) - t2228) * t2206 + t2283;
t2120 = t2145 * t2253 + t2158 * t2248;
t2144 = t2172 * t2252 + t2179 * t2247;
t2269 = t2120 * t2249 - t2144 * t2254;
t2171 = t2287 - t2296;
t2186 = -t2303 - t2306;
t2152 = t2171 * t2252 - t2186 * t2247;
t2160 = t2178 + t2295;
t2124 = t2152 * t2253 + t2160 * t2248;
t2151 = t2171 * t2247 + t2186 * t2252;
t2268 = t2124 * t2249 - t2151 * t2254;
t2267 = t2249 * t2174 - t2254 * t2281;
t2227 = t2248 * t2255 * t2253;
t2219 = qJDD(3) + t2227;
t2226 = -t2236 * t2255 - t2312;
t2190 = -t2219 * t2248 + t2226 * t2253;
t2266 = t2190 * t2249 + t2210 * t2254;
t2220 = -qJDD(3) + t2227;
t2225 = -t2235 * t2255 - t2312;
t2191 = t2220 * t2253 - t2225 * t2248;
t2208 = 0.2e1 * t2288 + t2289;
t2265 = t2191 * t2249 - t2208 * t2254;
t2211 = t2290 * qJDD(2);
t2214 = t2290 * t2255;
t2264 = t2211 * t2249 + t2214 * t2254;
t2263 = qJDD(2) * t2254 - t2249 * t2255;
t2213 = -qJDD(2) * t2249 - t2254 * t2255;
t2199 = t2263 * t2242;
t2198 = t2213 * t2242;
t2197 = t2263 * t2240;
t2196 = t2213 * t2240;
t2189 = t2220 * t2248 + t2225 * t2253;
t2188 = t2219 * t2253 + t2226 * t2248;
t2187 = t2211 * t2254 - t2214 * t2249;
t2182 = t2264 * t2242;
t2181 = t2264 * t2240;
t2168 = t2191 * t2254 + t2208 * t2249;
t2167 = t2190 * t2254 - t2210 * t2249;
t2149 = -t2240 * t2189 + t2242 * t2265;
t2148 = -t2240 * t2188 + t2242 * t2266;
t2147 = t2242 * t2189 + t2240 * t2265;
t2146 = t2242 * t2188 + t2240 * t2266;
t2140 = t2174 * t2254 + t2249 * t2281;
t2128 = t2240 ^ 2 * t2215 + (-t2286 + t2267) * t2242;
t2127 = t2242 ^ 2 * t2302 + (t2267 - t2294) * t2240;
t2123 = t2152 * t2248 - t2160 * t2253;
t2119 = t2145 * t2248 - t2158 * t2253;
t2117 = t2153 * t2253 + t2154 * t2248;
t2106 = t2126 * t2248 - t2170 * t2253;
t2102 = t2118 * t2254 + t2164 * t2249;
t2101 = t2124 * t2254 + t2151 * t2249;
t2099 = t2120 * t2254 + t2144 * t2249;
t2091 = t2107 * t2254 + t2125 * t2249;
t2082 = -t2240 * t2123 + t2242 * t2268;
t2081 = t2242 * t2123 + t2240 * t2268;
t2080 = -t2240 * t2117 + t2242 * t2270;
t2079 = t2242 * t2117 + t2240 * t2270;
t2076 = -t2240 * t2119 + t2242 * t2269;
t2075 = t2242 * t2119 + t2240 * t2269;
t2068 = t2094 * t2248 - t2115 * t2253;
t2067 = -t2240 * t2106 + t2242 * t2271;
t2066 = t2242 * t2106 + t2240 * t2271;
t2064 = t2078 * t2248 - t2134 * t2253;
t2062 = t2084 * t2248 - t2113 * t2253;
t2053 = t2069 * t2254 + t2093 * t2249;
t2051 = t2057 * t2248 - t2132 * t2253;
t2046 = t2063 * t2254 + t2083 * t2249;
t2045 = t2065 * t2254 + t2077 * t2249;
t2040 = -t2240 * t2068 + t2242 * t2272;
t2039 = t2242 * t2068 + t2240 * t2272;
t2036 = -t2240 * t2062 + t2242 * t2274;
t2035 = t2242 * t2062 + t2240 * t2274;
t2034 = -t2240 * t2064 + t2242 * t2273;
t2033 = t2242 * t2064 + t2240 * t2273;
t2032 = t2052 * t2254 + t2056 * t2249;
t2030 = t2044 * t2248 - t2073 * t2253;
t2024 = t2038 * t2248 - t2071 * t2253;
t2023 = -t2240 * t2051 + t2242 * t2275;
t2022 = t2242 * t2051 + t2240 * t2275;
t2018 = t2021 * t2248 - t2105 * t2253;
t2017 = t2031 * t2254 + t2043 * t2249;
t2016 = t2025 * t2254 + t2037 * t2249;
t2010 = t2013 * t2248 - t2100 * t2253;
t2009 = -t2240 * t2030 + t2242 * t2276;
t2008 = t2242 * t2030 + t2240 * t2276;
t2007 = t2019 * t2254 + t2020 * t2249;
t2006 = -t2240 * t2024 + t2242 * t2277;
t2005 = t2242 * t2024 + t2240 * t2277;
t2002 = t2011 * t2254 + t2012 * t2249;
t2001 = -t2240 * t2018 + t2242 * t2278;
t2000 = t2242 * t2018 + t2240 * t2278;
t1999 = -t2240 * t2010 + t2242 * t2279;
t1998 = t2242 * t2010 + t2240 * t2279;
t1994 = t1997 * t2248 - t2070 * t2253;
t1993 = t1995 * t2254 + t1996 * t2249;
t1992 = -t2240 * t1994 + t2242 * t2280;
t1991 = t2242 * t1994 + t2240 * t2280;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2215 * t2239 + t2216 * t2241, 0, 0, 0, 0, 0, 0, -t2199 * t2239 + t2213 * t2241, -t2198 * t2239 - t2241 * t2263, 0, -t2128 * t2239 + t2140 * t2241, 0, 0, 0, 0, 0, 0, -t2148 * t2239 + t2167 * t2241, -t2149 * t2239 + t2168 * t2241, -t2182 * t2239 + t2187 * t2241, -t2080 * t2239 + t2102 * t2241, 0, 0, 0, 0, 0, 0, -t2076 * t2239 + t2099 * t2241, -t2082 * t2239 + t2101 * t2241, -t2067 * t2239 + t2091 * t2241, -t2034 * t2239 + t2045 * t2241, 0, 0, 0, 0, 0, 0, -t2036 * t2239 + t2046 * t2241, -t2040 * t2239 + t2053 * t2241, -t2023 * t2239 + t2032 * t2241, -t2001 * t2239 + t2007 * t2241, 0, 0, 0, 0, 0, 0, -t2006 * t2239 + t2016 * t2241, -t2009 * t2239 + t2017 * t2241, -t1999 * t2239 + t2002 * t2241, -t1992 * t2239 + t1993 * t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215 * t2241 + t2216 * t2239, 0, 0, 0, 0, 0, 0, t2199 * t2241 + t2213 * t2239, t2198 * t2241 - t2239 * t2263, 0, t2128 * t2241 + t2140 * t2239, 0, 0, 0, 0, 0, 0, t2148 * t2241 + t2167 * t2239, t2149 * t2241 + t2168 * t2239, t2182 * t2241 + t2187 * t2239, t2080 * t2241 + t2102 * t2239, 0, 0, 0, 0, 0, 0, t2076 * t2241 + t2099 * t2239, t2082 * t2241 + t2101 * t2239, t2067 * t2241 + t2091 * t2239, t2034 * t2241 + t2045 * t2239, 0, 0, 0, 0, 0, 0, t2036 * t2241 + t2046 * t2239, t2040 * t2241 + t2053 * t2239, t2023 * t2241 + t2032 * t2239, t2001 * t2241 + t2007 * t2239, 0, 0, 0, 0, 0, 0, t2006 * t2241 + t2016 * t2239, t2009 * t2241 + t2017 * t2239, t1999 * t2241 + t2002 * t2239, t1992 * t2241 + t1993 * t2239; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2302, 0, 0, 0, 0, 0, 0, t2197, t2196, 0, t2127, 0, 0, 0, 0, 0, 0, t2146, t2147, t2181, t2079, 0, 0, 0, 0, 0, 0, t2075, t2081, t2066, t2033, 0, 0, 0, 0, 0, 0, t2035, t2039, t2022, t2000, 0, 0, 0, 0, 0, 0, t2005, t2008, t1998, t1991; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2216, 0, 0, 0, 0, 0, 0, t2213, -t2263, 0, t2140, 0, 0, 0, 0, 0, 0, t2167, t2168, t2187, t2102, 0, 0, 0, 0, 0, 0, t2099, t2101, t2091, t2045, 0, 0, 0, 0, 0, 0, t2046, t2053, t2032, t2007, 0, 0, 0, 0, 0, 0, t2016, t2017, t2002, t1993; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215, 0, 0, 0, 0, 0, 0, t2199, t2198, 0, t2128, 0, 0, 0, 0, 0, 0, t2148, t2149, t2182, t2080, 0, 0, 0, 0, 0, 0, t2076, t2082, t2067, t2034, 0, 0, 0, 0, 0, 0, t2036, t2040, t2023, t2001, 0, 0, 0, 0, 0, 0, t2006, t2009, t1999, t1992; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2302, 0, 0, 0, 0, 0, 0, t2197, t2196, 0, t2127, 0, 0, 0, 0, 0, 0, t2146, t2147, t2181, t2079, 0, 0, 0, 0, 0, 0, t2075, t2081, t2066, t2033, 0, 0, 0, 0, 0, 0, t2035, t2039, t2022, t2000, 0, 0, 0, 0, 0, 0, t2005, t2008, t1998, t1991; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2255, -qJDD(2), 0, t2174, 0, 0, 0, 0, 0, 0, t2190, t2191, t2211, t2118, 0, 0, 0, 0, 0, 0, t2120, t2124, t2107, t2065, 0, 0, 0, 0, 0, 0, t2063, t2069, t2052, t2019, 0, 0, 0, 0, 0, 0, t2025, t2031, t2011, t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2255, 0, -t2281, 0, 0, 0, 0, 0, 0, t2210, -t2208, t2214, -t2164, 0, 0, 0, 0, 0, 0, -t2144, -t2151, -t2125, -t2077, 0, 0, 0, 0, 0, 0, -t2083, -t2093, -t2056, -t2020, 0, 0, 0, 0, 0, 0, -t2037, -t2043, -t2012, -t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2258, 0, 0, 0, 0, 0, 0, t2188, t2189, 0, t2117, 0, 0, 0, 0, 0, 0, t2119, t2123, t2106, t2064, 0, 0, 0, 0, 0, 0, t2062, t2068, t2051, t2018, 0, 0, 0, 0, 0, 0, t2024, t2030, t2010, t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2226, t2220, t2233, t2154, 0, 0, 0, 0, 0, 0, t2145, t2152, t2126, t2078, 0, 0, 0, 0, 0, 0, t2084, t2094, t2057, t2021, 0, 0, 0, 0, 0, 0, t2038, t2044, t2013, t1997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2219, t2225, -t2289, t2153, 0, 0, 0, 0, 0, 0, -t2158, -t2160, -t2170, -t2134, 0, 0, 0, 0, 0, 0, -t2113, -t2115, -t2132, -t2105, 0, 0, 0, 0, 0, 0, -t2071, -t2073, -t2100, -t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2210, t2208, -t2214, t2164, 0, 0, 0, 0, 0, 0, t2144, t2151, t2125, t2077, 0, 0, 0, 0, 0, 0, t2083, t2093, t2056, t2020, 0, 0, 0, 0, 0, 0, t2037, t2043, t2012, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2179, t2171, t2159, t2104, 0, 0, 0, 0, 0, 0, t2109, t2122, t2088, t2042, 0, 0, 0, 0, 0, 0, t2055, t2061, t2027, t2004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2172, t2186, t2161, t2103, 0, 0, 0, 0, 0, 0, t2108, t2121, t2087, t2041, 0, 0, 0, 0, 0, 0, t2054, t2060, t2026, t2003; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2158, t2160, t2170, t2134, 0, 0, 0, 0, 0, 0, t2113, t2115, t2132, t2105, 0, 0, 0, 0, 0, 0, t2071, t2073, t2100, t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2150, t2142, t2114, t2059, 0, 0, 0, 0, 0, 0, t2086, t2098, t2049, t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2143, t2162, t2116, t2058, 0, 0, 0, 0, 0, 0, t2085, t2097, t2048, t2014; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2113, t2115, t2132, t2105, 0, 0, 0, 0, 0, 0, t2071, t2073, t2100, t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2112, t2110, t2072, t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2111, t2136, t2074, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2071, t2073, t2100, t2070;];
f_new_reg  = t1;
