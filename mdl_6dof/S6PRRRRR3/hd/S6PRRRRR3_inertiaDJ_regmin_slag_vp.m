% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6PRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRRRR3_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR3_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR3_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR3_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:51:32
% EndTime: 2019-03-09 00:51:41
% DurationCPUTime: 2.80s
% Computational Cost: add. (3083->270), mult. (8167->486), div. (0->0), fcn. (7824->12), ass. (0->165)
t118 = sin(qJ(3));
t117 = sin(qJ(4));
t123 = cos(qJ(3));
t178 = qJD(3) * t123;
t152 = t117 * t178;
t122 = cos(qJ(4));
t175 = qJD(4) * t122;
t204 = t118 * t175 + t152;
t203 = -0.4e1 * t118;
t116 = sin(qJ(5));
t121 = cos(qJ(5));
t84 = t116 * t122 + t121 * t117;
t69 = t84 * t118;
t183 = t122 * t123;
t102 = pkin(8) * t183;
t138 = -t123 * pkin(3) - t118 * pkin(9);
t92 = -pkin(2) + t138;
t191 = t117 * t92 + t102;
t149 = t122 * t178;
t176 = qJD(4) * t117;
t202 = -t118 * t176 + t149;
t111 = t122 ^ 2;
t182 = t117 ^ 2 - t111;
t142 = t182 * qJD(4);
t201 = qJD(4) + qJD(5);
t174 = qJD(4) * t123;
t158 = t117 * t174;
t179 = qJD(3) * t122;
t128 = t118 * t179 + t158;
t137 = pkin(3) * t118 - pkin(9) * t123;
t90 = t137 * qJD(3);
t40 = pkin(8) * t128 - t117 * t90 - t92 * t175;
t200 = pkin(9) + pkin(10);
t199 = pkin(8) * t117;
t198 = t121 * pkin(4);
t197 = t123 * pkin(5);
t184 = t118 * t122;
t82 = t122 * t92;
t56 = -pkin(10) * t184 + t82 + (-pkin(4) - t199) * t123;
t185 = t117 * t118;
t65 = -pkin(10) * t185 + t191;
t58 = t121 * t65;
t196 = t116 * t56 + t58;
t107 = qJD(3) * t118;
t153 = t117 * t107;
t194 = pkin(8) * t153 + t122 * t90;
t95 = t200 * t117;
t96 = t200 * t122;
t193 = -t116 * t95 + t121 * t96;
t120 = cos(qJ(6));
t22 = -t69 * pkin(11) + t196;
t192 = t120 * t22;
t114 = cos(pkin(6));
t113 = sin(pkin(6));
t119 = sin(qJ(2));
t189 = t113 * t119;
t71 = -t114 * t123 + t118 * t189;
t190 = qJD(3) * t71;
t124 = cos(qJ(2));
t188 = t113 * t124;
t115 = sin(qJ(6));
t187 = t115 * t116;
t186 = t116 * t120;
t91 = pkin(4) * t185 + t118 * pkin(8);
t110 = t118 ^ 2;
t181 = -t123 ^ 2 + t110;
t180 = qJD(2) * t119;
t177 = qJD(3) * t124;
t173 = qJD(5) * t116;
t172 = qJD(5) * t121;
t171 = qJD(6) * t115;
t170 = qJD(6) * t120;
t169 = -0.2e1 * pkin(2) * qJD(3);
t168 = -0.2e1 * pkin(3) * qJD(4);
t106 = pkin(8) * t178;
t66 = t204 * pkin(4) + t106;
t167 = pkin(5) * t107;
t166 = pkin(4) * t176;
t165 = pkin(4) * t173;
t164 = pkin(4) * t172;
t163 = pkin(5) * t171;
t162 = pkin(5) * t170;
t105 = -t122 * pkin(4) - pkin(3);
t30 = (pkin(4) * t118 - pkin(10) * t183) * qJD(3) + (-t102 + (pkin(10) * t118 - t92) * t117) * qJD(4) + t194;
t35 = -pkin(10) * t204 - t40;
t146 = -t116 * t35 + t121 * t30;
t13 = -qJD(5) * t196 + t146;
t83 = t116 * t117 - t121 * t122;
t36 = -t83 * t178 - t201 * t69;
t8 = -t36 * pkin(11) + t13 + t167;
t12 = -t116 * t30 - t121 * t35 - t56 * t172 + t173 * t65;
t37 = -t173 * t185 + (t201 * t184 + t152) * t121 + t202 * t116;
t9 = -t37 * pkin(11) - t12;
t161 = -t115 * t9 + t120 * t8;
t160 = qJD(4) * t200;
t156 = t122 * t174;
t155 = t113 * t180;
t154 = qJD(2) * t188;
t151 = t117 * t175;
t150 = t118 * t178;
t145 = -t116 * t65 + t121 * t56;
t70 = t83 * t118;
t21 = t70 * pkin(11) + t145 - t197;
t148 = -t21 + t197;
t18 = t22 * t171;
t147 = -t115 * t8 + t18;
t144 = -t116 * t96 - t121 * t95;
t104 = pkin(5) + t198;
t143 = qJD(6) * (-pkin(5) - t104);
t141 = t181 * qJD(3);
t140 = 0.2e1 * t150;
t139 = t117 * t149;
t136 = t115 * t21 + t192;
t72 = t114 * t118 + t123 * t189;
t129 = t117 * t188 - t72 * t122;
t63 = -t72 * t117 - t122 * t188;
t32 = t116 * t129 + t121 * t63;
t33 = t116 * t63 - t121 * t129;
t135 = t115 * t33 - t120 * t32;
t134 = t115 * t32 + t120 * t33;
t44 = -t84 * pkin(11) + t144;
t45 = -t83 * pkin(11) + t193;
t133 = t115 * t45 - t120 * t44;
t132 = t115 * t44 + t120 * t45;
t42 = -t115 * t70 + t120 * t69;
t43 = -t115 * t69 - t120 * t70;
t54 = t115 * t84 + t120 * t83;
t55 = -t115 * t83 + t120 * t84;
t62 = qJD(3) * t72 + t118 * t154;
t131 = t62 * t117 + t175 * t71;
t130 = -t62 * t122 + t176 * t71;
t88 = t117 * t160;
t89 = t122 * t160;
t38 = t116 * t89 + t121 * t88 + t95 * t172 + t173 * t96;
t2 = -qJD(6) * t136 + t161;
t39 = -qJD(5) * t193 + t116 * t88 - t121 * t89;
t126 = (t116 * t171 + (-t120 * t121 + t187) * qJD(5)) * pkin(4);
t125 = (-t116 * t170 + (-t115 * t121 - t186) * qJD(5)) * pkin(4);
t100 = -0.2e1 * t150;
t68 = t83 * pkin(5) + t105;
t61 = t123 * t154 - t190;
t60 = t201 * t84;
t59 = t201 * t83;
t57 = t69 * pkin(5) + t91;
t49 = -t104 * t171 + t125;
t48 = -t104 * t170 + t126;
t46 = t60 * pkin(5) + t166;
t41 = -t191 * qJD(4) + t194;
t27 = qJD(4) * t63 + t117 * t155 + t61 * t122;
t26 = qJD(4) * t129 - t61 * t117 + t122 * t155;
t23 = t37 * pkin(5) + t66;
t20 = t59 * pkin(11) + t39;
t19 = -t60 * pkin(11) - t38;
t17 = qJD(6) * t55 - t115 * t59 + t120 * t60;
t16 = -qJD(6) * t54 - t115 * t60 - t120 * t59;
t15 = qJD(6) * t43 + t115 * t36 + t120 * t37;
t14 = -qJD(6) * t42 - t115 * t37 + t120 * t36;
t11 = -qJD(5) * t33 - t116 * t27 + t121 * t26;
t10 = -t116 * t26 - t121 * t27 - t129 * t173 - t172 * t63;
t7 = -qJD(6) * t132 - t115 * t19 + t120 * t20;
t6 = qJD(6) * t133 - t115 * t20 - t120 * t19;
t4 = -qJD(6) * t134 + t115 * t10 + t120 * t11;
t3 = qJD(6) * t135 + t120 * t10 - t115 * t11;
t1 = (-qJD(6) * t21 - t9) * t120 + t147;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t155, -t154, 0, 0, 0, 0, 0 (-t118 * t177 - t123 * t180) * t113 (t118 * t180 - t123 * t177) * t113, 0, 0, 0, 0, 0 (t117 * t190 - t26) * t123 + (qJD(3) * t63 + t131) * t118 (t179 * t71 + t27) * t123 + (qJD(3) * t129 - t130) * t118, 0, 0, 0, 0, 0, t107 * t32 - t11 * t123 + t71 * t37 + t62 * t69, -t10 * t123 - t107 * t33 + t71 * t36 - t62 * t70, 0, 0, 0, 0, 0, -t107 * t135 - t4 * t123 + t71 * t15 + t62 * t42, -t107 * t134 - t3 * t123 + t71 * t14 + t62 * t43; 0, 0, 0, 0, t140, -0.2e1 * t141, 0, 0, 0, t118 * t169, t123 * t169, -0.2e1 * t110 * t151 + 0.2e1 * t111 * t150, 0.2e1 * t110 * t142 + t139 * t203, 0.2e1 * t118 * t158 + 0.2e1 * t179 * t181, -0.2e1 * t117 * t141 + 0.2e1 * t118 * t156, t100, 0.2e1 * t82 * t107 - 0.2e1 * t41 * t123 + 0.2e1 * (t110 * t175 + t117 * t150) * pkin(8), -0.2e1 * t40 * t123 - 0.2e1 * t191 * t107 + 0.2e1 * (-t110 * t176 + t122 * t140) * pkin(8), -0.2e1 * t70 * t36, -0.2e1 * t36 * t69 + 0.2e1 * t70 * t37, -0.2e1 * t107 * t70 - 0.2e1 * t36 * t123, -0.2e1 * t107 * t69 + 0.2e1 * t37 * t123, t100, 0.2e1 * t107 * t145 - 0.2e1 * t13 * t123 + 0.2e1 * t91 * t37 + 0.2e1 * t66 * t69, -0.2e1 * t107 * t196 - 0.2e1 * t12 * t123 + 0.2e1 * t91 * t36 - 0.2e1 * t66 * t70, 0.2e1 * t43 * t14, -0.2e1 * t14 * t42 - 0.2e1 * t43 * t15, 0.2e1 * t107 * t43 - 0.2e1 * t14 * t123, -0.2e1 * t107 * t42 + 0.2e1 * t15 * t123, t100, -0.2e1 * t2 * t123 + 0.2e1 * (-t115 * t22 + t120 * t21) * t107 + 0.2e1 * t23 * t42 + 0.2e1 * t57 * t15, -0.2e1 * t1 * t123 - 0.2e1 * t107 * t136 + 0.2e1 * t57 * t14 + 0.2e1 * t23 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, -t61, 0, 0, 0, 0, 0, t130, t131, 0, 0, 0, 0, 0, t71 * t60 + t62 * t83, -t71 * t59 + t62 * t84, 0, 0, 0, 0, 0, t71 * t17 + t62 * t54, t71 * t16 + t62 * t55; 0, 0, 0, 0, 0, 0, t178, -t107, 0, -t106, pkin(8) * t107, -t118 * t142 + t139, t151 * t203 - t178 * t182, t153 - t156, t128, 0 (pkin(9) * t183 + (-pkin(3) * t122 + t199) * t118) * qJD(4) + (t117 * t138 - t102) * qJD(3) (pkin(8) * t184 + t117 * t137) * qJD(4) + (t122 * t138 + t123 * t199) * qJD(3), t36 * t84 + t70 * t59, -t36 * t83 - t84 * t37 + t59 * t69 + t70 * t60, t107 * t84 + t59 * t123, -t107 * t83 + t60 * t123, 0, t105 * t37 + t107 * t144 - t39 * t123 + t166 * t69 + t91 * t60 + t66 * t83, t105 * t36 - t107 * t193 - t38 * t123 - t166 * t70 - t91 * t59 + t66 * t84, t14 * t55 + t43 * t16, -t14 * t54 - t55 * t15 - t16 * t42 - t43 * t17, t107 * t55 - t16 * t123, -t107 * t54 + t17 * t123, 0, -t107 * t133 - t7 * t123 + t68 * t15 + t57 * t17 + t23 * t54 + t46 * t42, -t107 * t132 - t6 * t123 + t68 * t14 + t57 * t16 + t23 * t55 + t46 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t151, -0.2e1 * t142, 0, 0, 0, t117 * t168, t122 * t168, -0.2e1 * t84 * t59, 0.2e1 * t59 * t83 - 0.2e1 * t84 * t60, 0, 0, 0, 0.2e1 * t105 * t60 + 0.2e1 * t166 * t83, -0.2e1 * t105 * t59 + 0.2e1 * t166 * t84, 0.2e1 * t55 * t16, -0.2e1 * t16 * t54 - 0.2e1 * t55 * t17, 0, 0, 0, 0.2e1 * t68 * t17 + 0.2e1 * t46 * t54, 0.2e1 * t68 * t16 + 0.2e1 * t46 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, -t27, 0, 0, 0, 0, 0, t11, t10, 0, 0, 0, 0, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, -t204, t107, t41, t40, 0, 0, t36, -t37, t107, t107 * t198 + (-t58 + (t123 * pkin(4) - t56) * t116) * qJD(5) + t146 (-t107 * t116 + t123 * t172) * pkin(4) + t12, 0, 0, t14, -t15, t107, -t49 * t123 + (-pkin(4) * t187 + t120 * t104) * t107 + t2, -t48 * t123 - (pkin(4) * t186 + t115 * t104) * t107 - t120 * t9 - t21 * t170 + t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, -t176, 0, -pkin(9) * t175, pkin(9) * t176, 0, 0, -t59, -t60, 0, t39, t38, 0, 0, t16, -t17, 0, t7, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t165, -0.2e1 * t164, 0, 0, 0, 0, 0, 0.2e1 * t49, 0.2e1 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t10, 0, 0, 0, 0, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t37, t107, t13, t12, 0, 0, t14, -t15, t107, t120 * t167 + (t115 * t148 - t192) * qJD(6) + t161, t18 + (-t8 - t167) * t115 + (qJD(6) * t148 - t9) * t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, -t60, 0, t39, t38, 0, 0, t16, -t17, 0, t7, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t165, -t164, 0, 0, 0, 0, 0, t115 * t143 + t125, t120 * t143 + t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t163, -0.2e1 * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t15, t107, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, -t17, 0, t7, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
