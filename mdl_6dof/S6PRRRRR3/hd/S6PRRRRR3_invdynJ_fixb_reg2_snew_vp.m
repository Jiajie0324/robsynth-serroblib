% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 11:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRRRR3_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR3_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR3_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR3_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR3_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR3_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 11:05:07
% EndTime: 2019-05-05 11:05:23
% DurationCPUTime: 7.90s
% Computational Cost: add. (55151->508), mult. (109472->744), div. (0->0), fcn. (82455->14), ass. (0->315)
t278 = sin(qJ(6));
t280 = sin(qJ(4));
t285 = cos(qJ(4));
t281 = sin(qJ(3));
t326 = qJD(2) * t281;
t240 = -t285 * qJD(3) + t280 * t326;
t241 = qJD(3) * t280 + t285 * t326;
t279 = sin(qJ(5));
t284 = cos(qJ(5));
t221 = t284 * t240 + t241 * t279;
t223 = -t240 * t279 + t241 * t284;
t283 = cos(qJ(6));
t189 = t283 * t221 + t223 * t278;
t191 = -t221 * t278 + t223 * t283;
t147 = t191 * t189;
t324 = qJD(2) * qJD(3);
t266 = t281 * t324;
t286 = cos(qJ(3));
t322 = t286 * qJDD(2);
t245 = -t266 + t322;
t239 = -qJDD(4) + t245;
t236 = -qJDD(5) + t239;
t233 = -qJDD(6) + t236;
t362 = -t147 - t233;
t370 = t278 * t362;
t193 = t223 * t221;
t361 = -t193 - t236;
t369 = t279 * t361;
t368 = t283 * t362;
t367 = t284 * t361;
t274 = sin(pkin(6));
t275 = cos(pkin(6));
t347 = sin(pkin(12));
t348 = cos(pkin(12));
t298 = t347 * g(1) - t348 * g(2);
t292 = t275 * t298;
t327 = -g(3) + qJDD(1);
t366 = t274 * t327 + t292;
t288 = qJD(2) ^ 2;
t336 = t241 * t240;
t297 = -t239 - t336;
t365 = t280 * t297;
t364 = t285 * t297;
t316 = t286 * t324;
t323 = t281 * qJDD(2);
t244 = t316 + t323;
t302 = -t280 * qJDD(3) - t285 * t244;
t217 = -qJD(4) * t240 - t302;
t303 = t285 * qJDD(3) - t280 * t244;
t293 = -qJD(4) * t241 + t303;
t313 = t279 * t217 - t284 * t293;
t160 = -qJD(5) * t223 - t313;
t161 = -t221 * qJD(5) + t284 * t217 + t279 * t293;
t106 = -qJD(6) * t189 + t160 * t278 + t161 * t283;
t263 = qJD(2) * t286 - qJD(4);
t257 = -qJD(5) + t263;
t251 = -qJD(6) + t257;
t174 = t189 * t251;
t363 = t106 + t174;
t206 = t221 * t257;
t143 = -t206 + t161;
t360 = t206 + t161;
t232 = t240 * t263;
t198 = t217 - t232;
t187 = t189 ^ 2;
t188 = t191 ^ 2;
t359 = t221 ^ 2;
t220 = t223 ^ 2;
t358 = t240 ^ 2;
t238 = t241 ^ 2;
t248 = t251 ^ 2;
t256 = t257 ^ 2;
t261 = t263 ^ 2;
t357 = qJD(3) ^ 2;
t290 = -t274 * t298 + t275 * t327;
t289 = t281 * t290;
t250 = -t348 * g(1) - t347 * g(2);
t282 = sin(qJ(2));
t287 = cos(qJ(2));
t213 = t287 * t250 + t282 * t366;
t202 = -t288 * pkin(2) + qJDD(2) * pkin(8) + t213;
t309 = -pkin(3) * t286 - pkin(9) * t281;
t312 = t288 * t309 + t202;
t165 = -t357 * pkin(3) + qJDD(3) * pkin(9) + t286 * t312 + t289;
t308 = t282 * t250 - t287 * t366;
t201 = -qJDD(2) * pkin(2) - t288 * pkin(8) + t308;
t306 = -t245 + t266;
t307 = t244 + t316;
t171 = pkin(3) * t306 - pkin(9) * t307 + t201;
t123 = t280 * t165 - t285 * t171;
t109 = t297 * pkin(4) - pkin(10) * t198 - t123;
t124 = t285 * t165 + t280 * t171;
t229 = -pkin(4) * t263 - pkin(10) * t241;
t113 = -t358 * pkin(4) + pkin(10) * t293 + t263 * t229 + t124;
t66 = -t284 * t109 + t279 * t113;
t67 = t279 * t109 + t284 * t113;
t40 = t279 * t67 - t284 * t66;
t356 = pkin(4) * t40;
t295 = (-qJD(5) - t257) * t223 - t313;
t101 = -t143 * t284 + t279 * t295;
t355 = pkin(4) * t101;
t47 = pkin(5) * t361 - pkin(11) * t143 - t66;
t203 = -pkin(5) * t257 - pkin(11) * t223;
t57 = -pkin(5) * t359 + pkin(11) * t160 + t203 * t257 + t67;
t32 = t278 * t57 - t283 * t47;
t33 = t278 * t47 + t283 * t57;
t17 = t278 * t33 - t283 * t32;
t354 = t17 * t279;
t353 = t17 * t284;
t228 = t286 * t290;
t164 = -qJDD(3) * pkin(3) - t357 * pkin(9) + t281 * t312 - t228;
t125 = -t293 * pkin(4) - t358 * pkin(10) + t241 * t229 + t164;
t79 = -t160 * pkin(5) - t359 * pkin(11) + t223 * t203 + t125;
t352 = t278 * t79;
t351 = t280 * t40;
t350 = t283 * t79;
t349 = t285 * t40;
t346 = t125 * t279;
t345 = t125 * t284;
t131 = -t147 + t233;
t344 = t131 * t278;
t343 = t131 * t283;
t342 = t164 * t280;
t341 = t164 * t285;
t176 = -t193 + t236;
t340 = t176 * t279;
t339 = t176 * t284;
t209 = t239 - t336;
t338 = t209 * t280;
t337 = t209 * t285;
t335 = t251 * t278;
t334 = t251 * t283;
t333 = t257 * t279;
t332 = t257 * t284;
t331 = t263 * t280;
t330 = t263 * t285;
t262 = t281 * t288 * t286;
t254 = qJDD(3) + t262;
t329 = t281 * t254;
t253 = -t262 + qJDD(3);
t328 = t286 * t253;
t325 = qJD(4) - t263;
t16 = pkin(5) * t17;
t18 = t278 * t32 + t283 * t33;
t8 = t18 * t279 + t353;
t321 = pkin(4) * t8 + t16;
t320 = t286 * t147;
t319 = t286 * t193;
t318 = t286 * t336;
t314 = -t283 * t160 + t278 * t161;
t296 = (-qJD(6) - t251) * t191 - t314;
t88 = t106 - t174;
t53 = t278 * t296 - t283 * t88;
t55 = t278 * t88 + t283 * t296;
t28 = t279 * t55 + t284 * t53;
t52 = pkin(5) * t53;
t317 = pkin(4) * t28 + t52;
t41 = t279 * t66 + t284 * t67;
t91 = t123 * t280 + t285 * t124;
t185 = t202 * t281 - t228;
t186 = t286 * t202 + t289;
t145 = t185 * t281 + t286 * t186;
t138 = -t248 - t187;
t99 = t138 * t278 + t368;
t311 = pkin(5) * t99 - t32;
t200 = -t220 - t256;
t149 = t200 * t284 + t340;
t310 = pkin(4) * t149 - t67;
t305 = t123 * t285 - t124 * t280;
t304 = -pkin(2) + t309;
t182 = -t256 - t359;
t129 = t182 * t279 + t367;
t301 = pkin(4) * t129 - t66;
t166 = -t188 - t248;
t115 = t166 * t283 + t344;
t300 = pkin(5) * t115 - t33;
t100 = t138 * t283 - t370;
t61 = t100 * t279 + t284 * t99;
t299 = pkin(4) * t61 + t311;
t116 = -t166 * t278 + t343;
t68 = t115 * t284 + t116 * t279;
t294 = pkin(4) * t68 + t300;
t291 = (-qJD(4) - t263) * t241 + t303;
t271 = t286 ^ 2;
t270 = t281 ^ 2;
t269 = t271 * t288;
t267 = t270 * t288;
t260 = -t269 - t357;
t259 = -t267 - t357;
t249 = t267 + t269;
t247 = (t270 + t271) * qJDD(2);
t246 = -0.2e1 * t266 + t322;
t243 = 0.2e1 * t316 + t323;
t231 = -t238 + t261;
t230 = -t261 + t358;
t227 = -t259 * t281 - t328;
t226 = t260 * t286 - t329;
t225 = t238 - t358;
t224 = -t238 - t261;
t218 = -t261 - t358;
t208 = t238 + t358;
t205 = -t220 + t256;
t204 = -t256 + t359;
t199 = t325 * t240 + t302;
t197 = t217 + t232;
t195 = -t325 * t241 + t303;
t192 = t220 - t359;
t184 = -t224 * t280 + t337;
t183 = t224 * t285 + t338;
t180 = t218 * t285 - t365;
t179 = t218 * t280 + t364;
t173 = -t188 + t248;
t172 = t187 - t248;
t168 = (t221 * t284 - t223 * t279) * t257;
t167 = (t221 * t279 + t223 * t284) * t257;
t162 = -t220 - t359;
t157 = t198 * t280 + t285 * t291;
t156 = -t198 * t285 + t280 * t291;
t155 = t204 * t284 + t340;
t154 = -t205 * t279 + t367;
t153 = t204 * t279 - t339;
t152 = t205 * t284 + t369;
t151 = t184 * t286 - t199 * t281;
t150 = -t200 * t279 + t339;
t148 = t180 * t286 - t195 * t281;
t146 = t188 - t187;
t139 = (qJD(5) - t257) * t223 + t313;
t137 = t161 * t284 + t223 * t333;
t136 = t161 * t279 - t223 * t332;
t135 = -t160 * t279 - t221 * t332;
t134 = t160 * t284 - t221 * t333;
t130 = t182 * t284 - t369;
t128 = t157 * t286 - t208 * t281;
t127 = (t189 * t283 - t191 * t278) * t251;
t126 = (t189 * t278 + t191 * t283) * t251;
t121 = -t187 - t188;
t120 = t172 * t283 + t344;
t119 = -t173 * t278 + t368;
t118 = t172 * t278 - t343;
t117 = t173 * t283 + t370;
t111 = -t149 * t280 + t150 * t285;
t110 = t149 * t285 + t150 * t280;
t105 = -qJD(6) * t191 - t314;
t104 = -t139 * t284 - t279 * t360;
t103 = t143 * t279 + t284 * t295;
t102 = -t139 * t279 + t284 * t360;
t97 = -pkin(10) * t149 + t345;
t96 = -t129 * t280 + t130 * t285;
t95 = t129 * t285 + t130 * t280;
t94 = -t126 * t279 + t127 * t284;
t93 = t126 * t284 + t127 * t279;
t92 = -pkin(10) * t129 + t346;
t84 = (qJD(6) - t251) * t191 + t314;
t83 = t106 * t283 + t191 * t335;
t82 = t106 * t278 - t191 * t334;
t81 = -t105 * t278 - t189 * t334;
t80 = t105 * t283 - t189 * t335;
t78 = t111 * t286 + t281 * t360;
t77 = -pkin(4) * t360 + pkin(10) * t150 + t346;
t76 = t164 * t281 + t286 * t91;
t75 = t139 * t281 + t286 * t96;
t74 = -pkin(4) * t139 + pkin(10) * t130 - t345;
t73 = -t118 * t279 + t120 * t284;
t72 = -t117 * t279 + t119 * t284;
t71 = t118 * t284 + t120 * t279;
t70 = t117 * t284 + t119 * t279;
t69 = -t115 * t279 + t116 * t284;
t64 = -t101 * t280 + t103 * t285;
t63 = t101 * t285 + t103 * t280;
t62 = t100 * t284 - t279 * t99;
t60 = -pkin(11) * t115 + t350;
t59 = -pkin(11) * t99 + t352;
t58 = t162 * t281 + t286 * t64;
t56 = -t278 * t363 - t283 * t84;
t54 = -t278 * t84 + t283 * t363;
t51 = -t279 * t82 + t284 * t83;
t50 = -t279 * t80 + t284 * t81;
t49 = t279 * t83 + t284 * t82;
t48 = t279 * t81 + t284 * t80;
t45 = -pkin(5) * t363 + pkin(11) * t116 + t352;
t44 = -t280 * t68 + t285 * t69;
t43 = t280 * t69 + t285 * t68;
t42 = -pkin(5) * t84 + pkin(11) * t100 - t350;
t39 = -pkin(4) * t125 + pkin(10) * t41;
t38 = -t280 * t61 + t285 * t62;
t37 = t280 * t62 + t285 * t61;
t36 = -pkin(10) * t101 - t40;
t35 = t281 * t363 + t286 * t44;
t34 = -pkin(4) * t162 + pkin(10) * t103 + t41;
t31 = -t279 * t54 + t284 * t56;
t30 = -t279 * t53 + t284 * t55;
t29 = t279 * t56 + t284 * t54;
t26 = t281 * t84 + t286 * t38;
t25 = t285 * t41 - t351;
t24 = t280 * t41 + t349;
t23 = -pkin(10) * t68 - t279 * t45 + t284 * t60;
t22 = t125 * t281 + t25 * t286;
t21 = -pkin(10) * t61 - t279 * t42 + t284 * t59;
t20 = -pkin(4) * t363 + pkin(10) * t69 + t279 * t60 + t284 * t45;
t19 = -pkin(4) * t84 + pkin(10) * t62 + t279 * t59 + t284 * t42;
t15 = -t28 * t280 + t285 * t30;
t14 = t28 * t285 + t280 * t30;
t13 = t121 * t281 + t15 * t286;
t12 = -pkin(5) * t79 + pkin(11) * t18;
t11 = -pkin(11) * t53 - t17;
t10 = -pkin(5) * t121 + pkin(11) * t55 + t18;
t9 = t18 * t284 - t354;
t7 = -pkin(10) * t28 - t10 * t279 + t11 * t284;
t6 = -pkin(4) * t121 + pkin(10) * t30 + t10 * t284 + t11 * t279;
t5 = -t280 * t8 + t285 * t9;
t4 = t280 * t9 + t285 * t8;
t3 = -pkin(10) * t8 - pkin(11) * t353 - t12 * t279;
t2 = t281 * t79 + t286 * t5;
t1 = -pkin(4) * t79 + pkin(10) * t9 - pkin(11) * t354 + t12 * t284;
t27 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t327, 0, 0, 0, 0, 0, 0, (qJDD(2) * t287 - t282 * t288) * t274, (-qJDD(2) * t282 - t287 * t288) * t274, 0, t275 ^ 2 * t327 + (t282 * t213 - t287 * t308 - t292) * t274, 0, 0, 0, 0, 0, 0, t275 * (t254 * t286 + t260 * t281) + (t226 * t282 + t246 * t287) * t274, t275 * (-t253 * t281 + t259 * t286) + (t227 * t282 - t243 * t287) * t274, (t247 * t282 + t249 * t287) * t274, t275 * (-t185 * t286 + t186 * t281) + (t145 * t282 - t201 * t287) * t274, 0, 0, 0, 0, 0, 0, t275 * (t180 * t281 + t195 * t286) + (t148 * t282 - t179 * t287) * t274, t275 * (t184 * t281 + t199 * t286) + (t151 * t282 - t183 * t287) * t274, t275 * (t157 * t281 + t208 * t286) + (t128 * t282 - t156 * t287) * t274, t275 * (-t164 * t286 + t281 * t91) + (t282 * t76 + t287 * t305) * t274, 0, 0, 0, 0, 0, 0, t275 * (-t139 * t286 + t281 * t96) + (t282 * t75 - t287 * t95) * t274, t275 * (t111 * t281 - t286 * t360) + (-t110 * t287 + t282 * t78) * t274, t275 * (-t162 * t286 + t281 * t64) + (t282 * t58 - t287 * t63) * t274, t275 * (-t125 * t286 + t25 * t281) + (t22 * t282 - t24 * t287) * t274, 0, 0, 0, 0, 0, 0, t275 * (t281 * t38 - t286 * t84) + (t26 * t282 - t287 * t37) * t274, t275 * (t281 * t44 - t286 * t363) + (t282 * t35 - t287 * t43) * t274, t275 * (-t121 * t286 + t15 * t281) + (t13 * t282 - t14 * t287) * t274, t275 * (t281 * t5 - t286 * t79) + (t2 * t282 - t287 * t4) * t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t308, -t213, 0, 0, t307 * t281, t243 * t286 + t246 * t281, t329 + t286 * (-t267 + t357), -t306 * t286, t281 * (t269 - t357) + t328, 0, pkin(2) * t246 + pkin(8) * t226 - t201 * t286, -pkin(2) * t243 + pkin(8) * t227 + t201 * t281, pkin(2) * t249 + pkin(8) * t247 + t145, -pkin(2) * t201 + pkin(8) * t145, t281 * (t217 * t285 + t241 * t331) - t318, t281 * (t195 * t285 - t197 * t280) - t286 * t225, t281 * (-t231 * t280 + t364) - t286 * t198, t281 * (-t240 * t330 - t280 * t293) + t318, t281 * (t230 * t285 + t338) - t286 * t291, t286 * t239 + t281 * (t240 * t285 - t241 * t280) * t263, t281 * (-pkin(9) * t179 + t342) + t286 * (-pkin(3) * t179 + t123) - pkin(2) * t179 + pkin(8) * t148, t281 * (-pkin(9) * t183 + t341) + t286 * (-pkin(3) * t183 + t124) - pkin(2) * t183 + pkin(8) * t151, pkin(8) * t128 + t156 * t304 + t281 * t305, pkin(8) * t76 - t304 * t305, t281 * (-t136 * t280 + t137 * t285) - t319, t281 * (-t102 * t280 + t104 * t285) - t286 * t192, t281 * (-t152 * t280 + t154 * t285) - t286 * t143, t281 * (-t134 * t280 + t135 * t285) + t319, t281 * (-t153 * t280 + t155 * t285) - t286 * t295, t281 * (-t167 * t280 + t168 * t285) + t286 * t236, t281 * (-pkin(9) * t95 - t280 * t74 + t285 * t92) + t286 * (-pkin(3) * t95 - t301) - pkin(2) * t95 + pkin(8) * t75, t281 * (-pkin(9) * t110 - t280 * t77 + t285 * t97) + t286 * (-pkin(3) * t110 - t310) - pkin(2) * t110 + pkin(8) * t78, t281 * (-pkin(9) * t63 - t280 * t34 + t285 * t36) + t286 * (-pkin(3) * t63 - t355) - pkin(2) * t63 + pkin(8) * t58, t281 * (-pkin(9) * t24 - pkin(10) * t349 - t280 * t39) + t286 * (-pkin(3) * t24 - t356) - pkin(2) * t24 + pkin(8) * t22, t281 * (-t280 * t49 + t285 * t51) - t320, t281 * (-t280 * t29 + t285 * t31) - t286 * t146, t281 * (-t280 * t70 + t285 * t72) - t286 * t88, t281 * (-t280 * t48 + t285 * t50) + t320, t281 * (-t280 * t71 + t285 * t73) - t286 * t296, t281 * (-t280 * t93 + t285 * t94) + t286 * t233, t281 * (-pkin(9) * t37 - t19 * t280 + t21 * t285) + t286 * (-pkin(3) * t37 - t299) - pkin(2) * t37 + pkin(8) * t26, t281 * (-pkin(9) * t43 - t20 * t280 + t23 * t285) + t286 * (-pkin(3) * t43 - t294) - pkin(2) * t43 + pkin(8) * t35, t281 * (-pkin(9) * t14 - t280 * t6 + t285 * t7) + t286 * (-pkin(3) * t14 - t317) - pkin(2) * t14 + pkin(8) * t13, t281 * (-pkin(9) * t4 - t1 * t280 + t285 * t3) + t286 * (-pkin(3) * t4 - t321) - pkin(2) * t4 + pkin(8) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262, t267 - t269, t323, t262, t322, qJDD(3), -t185, -t186, 0, 0, t217 * t280 - t241 * t330, t195 * t280 + t197 * t285, t231 * t285 + t365, -t240 * t331 + t285 * t293, t230 * t280 - t337, (t240 * t280 + t241 * t285) * t263, pkin(3) * t195 + pkin(9) * t180 - t341, pkin(3) * t199 + pkin(9) * t184 + t342, pkin(3) * t208 + pkin(9) * t157 + t91, -pkin(3) * t164 + pkin(9) * t91, t136 * t285 + t137 * t280, t102 * t285 + t104 * t280, t152 * t285 + t154 * t280, t134 * t285 + t135 * t280, t153 * t285 + t155 * t280, t167 * t285 + t168 * t280, -pkin(3) * t139 + pkin(9) * t96 + t280 * t92 + t285 * t74, -pkin(3) * t360 + pkin(9) * t111 + t280 * t97 + t285 * t77, -pkin(3) * t162 + pkin(9) * t64 + t280 * t36 + t285 * t34, -pkin(3) * t125 + pkin(9) * t25 - pkin(10) * t351 + t285 * t39, t280 * t51 + t285 * t49, t280 * t31 + t285 * t29, t280 * t72 + t285 * t70, t280 * t50 + t285 * t48, t280 * t73 + t285 * t71, t280 * t94 + t285 * t93, -pkin(3) * t84 + pkin(9) * t38 + t19 * t285 + t21 * t280, -pkin(3) * t363 + pkin(9) * t44 + t20 * t285 + t23 * t280, -pkin(3) * t121 + pkin(9) * t15 + t280 * t7 + t285 * t6, -pkin(3) * t79 + pkin(9) * t5 + t1 * t285 + t280 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t336, t225, t198, -t336, t291, -t239, -t123, -t124, 0, 0, t193, t192, t143, -t193, t295, -t236, t301, t310, t355, t356, t147, t146, t88, -t147, t296, -t233, t299, t294, t317, t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, t192, t143, -t193, t295, -t236, -t66, -t67, 0, 0, t147, t146, t88, -t147, t296, -t233, t311, t300, t52, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, t146, t88, -t147, t296, -t233, -t32, -t33, 0, 0;];
tauJ_reg  = t27;
