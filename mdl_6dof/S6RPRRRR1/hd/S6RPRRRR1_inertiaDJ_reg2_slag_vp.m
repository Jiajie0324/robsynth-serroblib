% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:55:16
% EndTime: 2019-03-09 06:55:26
% DurationCPUTime: 3.40s
% Computational Cost: add. (7383->256), mult. (15114->438), div. (0->0), fcn. (14741->10), ass. (0->157)
t95 = sin(qJ(6));
t93 = t95 ^ 2;
t98 = cos(qJ(6));
t94 = t98 ^ 2;
t211 = t93 + t94;
t199 = cos(qJ(4));
t164 = t199 * pkin(3);
t146 = t164 + pkin(4);
t198 = cos(qJ(5));
t131 = t198 * t146;
t153 = t199 * qJD(4);
t149 = pkin(3) * t153;
t197 = sin(qJ(4));
t152 = t197 * qJD(4);
t96 = sin(qJ(5));
t50 = -qJD(5) * t131 - t198 * t149 + (t197 * qJD(5) + t152) * t96 * pkin(3);
t217 = t211 * t50;
t145 = t197 * t198;
t216 = (qJD(4) + qJD(5)) * pkin(3) * (t199 * t96 + t145);
t144 = sin(pkin(11)) * pkin(1) + pkin(7);
t135 = pkin(8) + t144;
t126 = t135 * t199;
t99 = cos(qJ(3));
t132 = t99 * t135;
t97 = sin(qJ(3));
t215 = t97 * t126 + t197 * t132;
t209 = (t93 - t94) * qJD(6);
t159 = t197 * t97;
t129 = -t199 * t99 + t159;
t114 = t198 * t129;
t74 = t197 * t99 + t199 * t97;
t56 = t96 * t74 + t114;
t122 = t96 * t129;
t57 = t198 * t74 - t122;
t89 = -cos(pkin(11)) * pkin(1) - pkin(2);
t78 = -t99 * pkin(3) + t89;
t58 = t129 * pkin(4) + t78;
t108 = t56 * pkin(5) - t57 * pkin(10) + t58;
t207 = -(t199 * qJD(3) + t153) * t99 + qJD(3) * t159 + t97 * t152;
t125 = t135 * t197;
t117 = qJD(3) * t125;
t118 = qJD(3) * t126;
t49 = -t97 * t125 + t199 * t132;
t37 = -qJD(4) * t49 + t97 * t117 - t99 * t118;
t100 = -pkin(9) * t207 - t37;
t106 = -t74 * pkin(9) - t215;
t103 = t198 * t106;
t176 = qJD(5) * t96;
t119 = t74 * qJD(4);
t109 = -t74 * qJD(3) - t119;
t36 = qJD(4) * t215 + t99 * t117 + t97 * t118;
t27 = t109 * pkin(9) - t36;
t40 = -t129 * pkin(9) + t49;
t6 = -qJD(5) * t103 + t96 * t100 + t40 * t176 - t198 * t27;
t213 = -qJD(6) * t108 + t6;
t33 = qJD(5) * t114 - t96 * t109 + t74 * t176 + t198 * t207;
t154 = qJD(5) * t198;
t34 = -qJD(5) * t122 - t198 * t109 + t74 * t154 - t207 * t96;
t212 = t56 * t33 - t57 * t34;
t104 = t96 * t106;
t30 = t198 * t40 + t104;
t11 = t98 * t108 - t95 * t30;
t12 = t95 * t108 + t98 * t30;
t210 = -t11 * t95 + t12 * t98;
t206 = 0.2e1 * qJD(3);
t29 = t96 * t40 - t103;
t7 = qJD(5) * t104 + t198 * t100 + t40 * t154 + t96 * t27;
t205 = t29 * t7;
t204 = t33 * pkin(10);
t203 = t34 * pkin(5);
t202 = t7 * t57;
t5 = t7 * t95;
t201 = t97 * pkin(3);
t92 = qJD(6) * t98;
t200 = t29 * t92 + t5;
t165 = pkin(4) * t176;
t51 = t165 + t216;
t194 = t29 * t51;
t193 = t29 * t96;
t192 = t56 * t34;
t191 = t56 * t51;
t190 = t56 * t96;
t189 = t57 * t33;
t188 = t93 * t33;
t31 = t94 * t33;
t187 = t95 * t34;
t186 = t98 * t33;
t185 = t98 * t34;
t184 = t57 * t185 - t56 * t186;
t163 = t197 * pkin(3);
t70 = -t96 * t163 + t131;
t66 = -pkin(5) - t70;
t182 = t51 * t95 + t66 * t92;
t147 = pkin(4) * t154;
t69 = t211 * t147;
t91 = -t198 * pkin(4) - pkin(5);
t181 = t95 * t165 + t91 * t92;
t71 = pkin(3) * t145 + t96 * t146;
t177 = qJD(5) * pkin(4);
t174 = qJD(6) * t95;
t173 = t97 * qJD(3);
t172 = t99 * qJD(3);
t171 = 0.2e1 * t192;
t170 = t95 * t186;
t169 = t89 * t206;
t168 = pkin(5) * t174;
t167 = pkin(5) * t92;
t166 = pkin(3) * t173;
t162 = t57 * t174;
t161 = t95 * t92;
t160 = t97 * t172;
t67 = pkin(10) + t71;
t157 = t211 * t67;
t90 = t96 * pkin(4) + pkin(10);
t156 = t211 * t90;
t59 = t66 * t174;
t155 = -t51 * t98 + t59;
t151 = -0.2e1 * t165;
t55 = t57 ^ 2;
t150 = t55 * t161;
t148 = pkin(3) * t152;
t143 = t29 * t34 + t7 * t56;
t142 = t11 * t98 + t12 * t95;
t139 = t50 * t56 + t51 * t57;
t138 = t56 * t67 - t57 * t66;
t137 = t56 * t90 - t57 * t91;
t75 = t91 * t174;
t136 = -t98 * t165 + t75;
t134 = -t95 * t33 + t57 * t92;
t15 = t162 + t186;
t14 = t56 * t174 - t185;
t133 = qJD(3) * t144;
t130 = t211 * t198;
t128 = (-t198 * t56 + t57 * t96) * qJD(5);
t123 = t78 * t74;
t116 = -t33 * t66 - t34 * t67 + t139;
t115 = pkin(3) * qJD(4) * t129;
t46 = pkin(4) * t119 + (t74 * pkin(4) + t201) * qJD(3);
t101 = t203 + t46 + t204;
t2 = -t95 * t101 + t30 * t174 + t213 * t98;
t3 = t98 * t101 + t213 * t95 - t30 * t92;
t1 = -t142 * qJD(6) - t2 * t98 - t3 * t95;
t111 = t74 * t207;
t110 = pkin(4) * t128 - t33 * t91 - t34 * t90;
t107 = pkin(3) * t109;
t102 = t129 * t109;
t85 = -0.2e1 * t161;
t84 = 0.2e1 * t161;
t73 = -0.2e1 * t209;
t25 = t29 * t174;
t19 = t57 * t31;
t18 = t57 * t188;
t16 = t56 * t92 + t187;
t13 = t209 * t57 + t170;
t10 = -t31 - t188;
t8 = -0.4e1 * t57 * t161 + t188 - t31;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t160 (-t97 ^ 2 + t99 ^ 2) * t206, 0, -0.2e1 * t160, 0, 0, t97 * t169, t99 * t169, 0, 0, -0.2e1 * t111, 0.2e1 * t74 * t109 + 0.2e1 * t207 * t129, 0, -0.2e1 * t102, 0, 0, 0.2e1 * qJD(4) * t123 + 0.2e1 * (t129 * t201 + t123) * qJD(3), 0.2e1 * t74 * t166 - 0.2e1 * t207 * t78, 0.2e1 * t49 * t109 + 0.2e1 * t36 * t129 - 0.2e1 * t207 * t215 - 0.2e1 * t37 * t74, 0.2e1 * t78 * t166 - 0.2e1 * t215 * t37 - 0.2e1 * t49 * t36, -0.2e1 * t189, 0.2e1 * t212, 0, t171, 0, 0, 0.2e1 * t58 * t34 + 0.2e1 * t46 * t56, -0.2e1 * t58 * t33 + 0.2e1 * t46 * t57, -0.2e1 * t29 * t33 - 0.2e1 * t30 * t34 + 0.2e1 * t6 * t56 + 0.2e1 * t202, -0.2e1 * t30 * t6 + 0.2e1 * t58 * t46 + 0.2e1 * t205, -0.2e1 * t19 - 0.2e1 * t150, 0.4e1 * t57 * t170 + 0.2e1 * t209 * t55, -0.2e1 * t162 * t56 + 0.2e1 * t184, -0.2e1 * t18 + 0.2e1 * t150, -0.2e1 * t134 * t56 - 0.2e1 * t57 * t187, t171, 0.2e1 * t11 * t34 + 0.2e1 * t134 * t29 + 0.2e1 * t3 * t56 + 0.2e1 * t57 * t5, -0.2e1 * t12 * t34 - 0.2e1 * t15 * t29 + 0.2e1 * t2 * t56 + 0.2e1 * t202 * t98, 0.2e1 * t142 * t33 + 0.2e1 * (-qJD(6) * t210 + t2 * t95 - t3 * t98) * t57, 0.2e1 * t11 * t3 - 0.2e1 * t12 * t2 + 0.2e1 * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109 * t215 - t37 * t129 - t207 * t49 - t36 * t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30 * t33 - t57 * t6 + t143, 0, 0, 0, 0, 0, 0, 0, t212 * t98 + t184, 0, t1 * t57 - t210 * t33 + t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t111 - 0.2e1 * t102, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t189 + 0.2e1 * t192, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t18 - 0.2e1 * t19 + 0.2e1 * t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, 0, -t173, 0, -t99 * t133, t97 * t133, 0, 0, 0, 0, -t207, 0, t109, 0, t37, t36, t197 * t107 - t199 * t115 + t74 * t148 + t164 * t207 (t37 * t199 - t36 * t197 + (t197 * t215 + t49 * t199) * qJD(4)) * pkin(3), 0, 0, -t33, 0, -t34, 0, -t7, t6, t70 * t33 - t71 * t34 + t139, -t30 * t50 - t6 * t71 - t7 * t70 + t194, -t13, t8, t16, t13, -t14, 0, t25 + (-qJD(6) * t138 - t7) * t98 + t116 * t95, t116 * t98 + t138 * t174 + t200, t1, t1 * t67 - t210 * t50 + t7 * t66 + t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, -t172, 0, 0, 0, 0, 0, 0, 0, 0, t109, t207, 0, t199 * t107 + t197 * t115 + t74 * t149 - t163 * t207, 0, 0, 0, 0, 0, 0, -t34, t33, 0, -t33 * t71 - t34 * t70 - t50 * t57 + t191, 0, 0, 0, 0, 0, 0, t14, t16, t10, -t157 * t33 - t217 * t57 + t34 * t66 + t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t148, -0.2e1 * t149, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t51, 0.2e1 * t50, 0, -0.2e1 * t50 * t71 - 0.2e1 * t51 * t70, t84, t73, 0, t85, 0, 0, 0.2e1 * t155, 0.2e1 * t182, -0.2e1 * t217, -0.2e1 * t157 * t50 + 0.2e1 * t66 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t207, 0, t109, 0, t37, t36, 0, 0, 0, 0, -t33, 0, -t34, 0, -t7, t6 (t198 * t33 - t34 * t96 + t128) * pkin(4) (-t198 * t7 - t6 * t96 + (t198 * t30 + t193) * qJD(5)) * pkin(4), -t13, t8, t16, t13, -t14, 0, t25 + (-qJD(6) * t137 - t7) * t98 + t110 * t95, t110 * t98 + t137 * t174 + t200, t1, t7 * t91 + (t198 * t210 + t193) * t177 + t1 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, t207, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t33, 0 (-t198 * t34 - t33 * t96 + (t198 * t57 + t190) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, t14, t16, t10, t34 * t91 - t33 * t156 + (t130 * t57 + t190) * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t149, 0, 0, 0, 0, 0, 0, 0, 0, t151 - t216, -t147 + t50, 0 (-t198 * t51 - t50 * t96 + (t198 * t71 - t70 * t96) * qJD(5)) * pkin(4), t84, t73, 0, t85, 0, 0, t59 + t75 + (-t51 - t165) * t98, t181 + t182, t69 - t217, t51 * t91 - t50 * t156 + (t130 * t67 + t66 * t96) * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, -0.2e1 * t147, 0, 0, t84, t73, 0, t85, 0, 0, 0.2e1 * t136, 0.2e1 * t181, 0.2e1 * t69, 0.2e1 * (t130 * t90 + t91 * t96) * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, 0, -t34, 0, -t7, t6, 0, 0, -t13, t8, t16, t13, -t14, 0, t25 + (pkin(5) * t33 - pkin(10) * t34) * t95 + (-t7 + (-pkin(5) * t57 - pkin(10) * t56) * qJD(6)) * t98, pkin(5) * t15 + pkin(10) * t14 + t200, t1, -t7 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t33, 0, 0, 0, 0, 0, 0, 0, 0, t14, t16, t10, -t204 * t211 - t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t50, 0, 0, t84, t73, 0, t85, 0, 0, t155 - t168, -t167 + t182, -t217, -t51 * pkin(5) - pkin(10) * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t165, -t147, 0, 0, t84, t73, 0, t85, 0, 0, t136 - t168, -t167 + t181, t69 (-pkin(5) * t96 + pkin(10) * t130) * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, t73, 0, t85, 0, 0, -0.2e1 * t168, -0.2e1 * t167, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, 0, -t134, t34, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t174, 0, t50 * t95 - t67 * t92, t174 * t67 + t50 * t98, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t174, 0, -t147 * t95 - t90 * t92, -t147 * t98 + t174 * t90, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t174, 0, -pkin(10) * t92, pkin(10) * t174, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
