% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRRR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRR6_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:48:46
% EndTime: 2019-03-08 20:48:53
% DurationCPUTime: 3.03s
% Computational Cost: add. (2764->313), mult. (6812->562), div. (0->0), fcn. (6298->10), ass. (0->161)
t180 = sin(qJ(6));
t90 = sin(qJ(5));
t138 = t180 * t90;
t181 = cos(qJ(6));
t93 = cos(qJ(5));
t139 = t181 * t93;
t105 = t139 - t138;
t91 = sin(qJ(4));
t44 = t105 * t91;
t94 = cos(qJ(4));
t184 = pkin(4) * t94;
t117 = pkin(9) * t91 + t184;
t191 = t93 * t117;
t88 = sin(pkin(6));
t95 = cos(qJ(2));
t176 = t88 * t95;
t154 = t91 * t176;
t92 = sin(qJ(2));
t177 = t88 * t92;
t77 = qJD(2) * t177;
t82 = t94 * qJD(4);
t89 = cos(pkin(6));
t32 = -qJD(4) * t154 - t94 * t77 + t89 * t82;
t178 = t32 * t94;
t158 = t91 * qJD(4);
t47 = t94 * t176 + t89 * t91;
t41 = t47 * t158;
t190 = t41 - t178;
t131 = t181 * qJD(6);
t189 = t181 * qJD(5) + t131;
t84 = t90 ^ 2;
t86 = t93 ^ 2;
t169 = t84 - t86;
t130 = qJD(5) * t169;
t188 = qJD(5) + qJD(6);
t185 = -pkin(10) - pkin(9);
t187 = t185 * t94 + qJ(3);
t186 = 2 * qJD(3);
t183 = t91 * pkin(4);
t182 = t93 * pkin(4);
t60 = t180 * t93 + t181 * t90;
t29 = t188 * t60;
t179 = t29 * t91;
t25 = t47 * t32;
t96 = -pkin(2) - pkin(8);
t175 = t90 * t96;
t174 = t91 * t96;
t173 = t93 * t94;
t172 = t94 * t29;
t171 = t94 * t96;
t165 = qJD(2) * t95;
t145 = t88 * t165;
t170 = qJ(3) * t145 + qJD(3) * t177;
t116 = -t94 * pkin(9) + t183;
t109 = qJ(3) + t116;
t74 = t93 * t174;
t40 = t90 * t109 + t74;
t168 = t84 + t86;
t85 = t91 ^ 2;
t87 = t94 ^ 2;
t167 = t85 - t87;
t166 = t85 + t87;
t164 = qJD(4) * t47;
t163 = qJD(4) * t93;
t162 = qJD(5) * t90;
t161 = qJD(5) * t93;
t160 = qJD(5) * t94;
t159 = qJD(5) * t96;
t157 = t93 * qJD(3);
t156 = qJ(3) * qJD(4);
t155 = -0.2e1 * pkin(4) * qJD(5);
t153 = t90 * t174;
t152 = t90 * t171;
t151 = pkin(5) * t162;
t150 = t90 * t160;
t149 = t90 * t159;
t148 = t93 * t160;
t147 = t47 * t162;
t146 = t60 * t82;
t144 = t90 * t161;
t143 = t96 * t158;
t142 = t93 * t158;
t141 = t91 * t82;
t140 = t96 * t82;
t137 = pkin(5) - t175;
t136 = t168 * t94;
t135 = qJD(4) * t181;
t134 = qJD(4) * t180;
t133 = qJD(6) * t180;
t129 = t167 * qJD(4);
t75 = 0.2e1 * t141;
t128 = t90 * t142;
t127 = t87 * t144;
t126 = t94 * t138;
t125 = pkin(5) * t131;
t124 = pkin(5) * t133;
t123 = t185 * t181;
t122 = t185 * t180;
t121 = t91 * t135;
t120 = t91 * t134;
t119 = t94 * t135;
t118 = t94 * t134;
t48 = t89 * t94 - t154;
t33 = t93 * t177 - t48 * t90;
t34 = t90 * t177 + t48 * t93;
t115 = t33 * t93 + t34 * t90;
t114 = t33 * t90 - t34 * t93;
t106 = t93 * t109;
t39 = t106 - t153;
t113 = t39 * t93 + t40 * t90;
t112 = t39 * t90 - t40 * t93;
t111 = t90 * t123;
t110 = t90 * t122;
t108 = t47 * t161 + t32 * t90;
t107 = -t32 * t93 + t147;
t52 = t90 * t158 - t148;
t23 = t91 * t149 - t90 * (t117 * qJD(4) + qJD(3)) - qJD(5) * t106 - t93 * t140;
t16 = t180 * t33 + t181 * t34;
t102 = t187 * t93 + (t137 + t182) * t91;
t100 = t181 * t102;
t101 = pkin(10) * t52 - t23;
t30 = -t90 * t94 * pkin(10) + t40;
t97 = t157 + (-t74 + (-t183 - t187) * t90) * qJD(5) + (t137 * t94 + (-t185 * t91 + t184) * t93) * qJD(4);
t3 = -qJD(6) * t100 - t181 * t101 + t30 * t133 - t180 * t97;
t71 = t185 * t93;
t36 = -t181 * t71 + t110;
t31 = -t91 * t77 + t164;
t10 = -t34 * qJD(5) + t93 * t145 + t31 * t90;
t11 = t33 * qJD(5) + t90 * t145 - t31 * t93;
t104 = -t115 * qJD(5) - t10 * t90 + t11 * t93;
t24 = t157 - t40 * qJD(5) + (-t152 + t191) * qJD(4);
t103 = -t113 * qJD(5) - t23 * t93 - t24 * t90;
t5 = -t31 * t91 - t178 + (t47 * t91 + t48 * t94) * qJD(4);
t99 = t180 * t102;
t98 = -t180 * t101 + t181 * t97;
t14 = t181 * t30 + t99;
t83 = qJ(3) * t186;
t81 = -t93 * pkin(5) - pkin(4);
t58 = (pkin(5) * t90 - t96) * t94;
t51 = t91 * t161 + t90 * t82;
t50 = -t142 - t150;
t49 = t91 * t162 - t93 * t82;
t45 = t94 * t139 - t126;
t43 = t60 * t94;
t42 = t60 * t91;
t38 = -pkin(5) * t52 + t143;
t37 = t94 * t130 + t128;
t35 = t180 * t71 + t111;
t28 = (t180 * qJD(5) + t133) * t90 - t189 * t93;
t22 = -t36 * qJD(6) + (t93 * t123 - t110) * qJD(5);
t21 = -t188 * t111 - t122 * t161 - t71 * t133;
t20 = -t93 * t120 - t90 * t121 - t188 * t126 + t189 * t173;
t19 = -t188 * t44 - t146;
t18 = -t90 * t120 + t93 * t121 + t172;
t17 = t90 * t118 - t93 * t119 + t179;
t15 = -t180 * t34 + t181 * t33;
t13 = -t180 * t30 + t100;
t4 = -qJD(6) * t14 + t98;
t2 = -t16 * qJD(6) + t181 * t10 - t180 * t11;
t1 = -t180 * t10 - t181 * t11 - t33 * t131 + t34 * t133;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t88 ^ 2 * t92 * t165 - 0.2e1 * t48 * t31 + 0.2e1 * t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t33 * t10 + 0.2e1 * t34 * t11 + 0.2e1 * t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t16 * t1 + 0.2e1 * t15 * t2 + 0.2e1 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, -t145, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t145, -pkin(2) * t77 + t170, 0, 0, 0, 0, 0, 0 (t91 * t165 + t92 * t82) * t88 (-t92 * t158 + t94 * t165) * t88, -t5, t5 * t96 + t170, 0, 0, 0, 0, 0, 0 (-t90 * t164 + t10) * t91 + (qJD(4) * t33 + t108) * t94 (-t47 * t163 - t11) * t91 + (-qJD(4) * t34 - t107) * t94, t115 * t158 + (t114 * qJD(5) - t10 * t93 - t11 * t90) * t94, t10 * t39 + t11 * t40 + t190 * t96 - t34 * t23 + t33 * t24, 0, 0, 0, 0, 0, 0, t15 * t82 + t2 * t91 + t47 * t20 + t32 * t43, t1 * t91 - t16 * t82 - t47 * t18 + t32 * t45, t1 * t43 + t15 * t18 - t16 * t20 - t2 * t45, -t1 * t14 + t2 * t13 + t15 * t4 - t16 * t3 + t32 * t58 + t47 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186, t83, -0.2e1 * t141, 0.2e1 * t129, 0, t75, 0, 0, 0.2e1 * qJD(3) * t91 + 0.2e1 * t94 * t156, 0.2e1 * qJD(3) * t94 - 0.2e1 * t91 * t156, 0, t83, -0.2e1 * t141 * t86 - 0.2e1 * t127, 0.4e1 * t128 * t94 + 0.2e1 * t130 * t87, -0.2e1 * t91 * t150 - 0.2e1 * t167 * t163, -0.2e1 * t141 * t84 + 0.2e1 * t127, 0.2e1 * t129 * t90 - 0.2e1 * t91 * t148, t75, -0.2e1 * t87 * t93 * t159 + 0.2e1 * t24 * t91 + 0.2e1 * (t39 + 0.2e1 * t153) * t82, 0.2e1 * t87 * t149 + 0.2e1 * t23 * t91 + 0.2e1 * (-t40 + 0.2e1 * t74) * t82, 0.2e1 * t113 * t158 + 0.2e1 * (t112 * qJD(5) + t23 * t90 - t24 * t93) * t94, -0.2e1 * t141 * t96 ^ 2 - 0.2e1 * t40 * t23 + 0.2e1 * t39 * t24, -0.2e1 * t45 * t18, 0.2e1 * t18 * t43 - 0.2e1 * t45 * t20, -0.2e1 * t18 * t91 + 0.2e1 * t45 * t82, 0.2e1 * t43 * t20, -0.2e1 * t20 * t91 - 0.2e1 * t43 * t82, t75, 0.2e1 * t13 * t82 + 0.2e1 * t58 * t20 + 0.2e1 * t38 * t43 + 0.2e1 * t4 * t91, -0.2e1 * t14 * t82 - 0.2e1 * t58 * t18 + 0.2e1 * t3 * t91 + 0.2e1 * t38 * t45, 0.2e1 * t13 * t18 - 0.2e1 * t14 * t20 + 0.2e1 * t3 * t43 - 0.2e1 * t4 * t45, 0.2e1 * t13 * t4 - 0.2e1 * t14 * t3 + 0.2e1 * t58 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 + (-qJD(4) * t114 - t32) * t94 + t104 * t91, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t44 + t15 * t19 - t16 * t17 - t2 * t42 + t190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166 * t161, t166 * t162, 0, -t112 * t82 + (t103 - 0.2e1 * t140) * t91, 0, 0, 0, 0, 0, 0, t19 * t91 - t94 * t20 + (-t42 * t94 + t43 * t91) * qJD(4), t17 * t91 + t94 * t18 + (-t44 * t94 + t45 * t91) * qJD(4), t17 * t43 - t42 * t18 - t19 * t45 - t44 * t20, t13 * t19 - t14 * t17 + t158 * t58 - t3 * t44 - t38 * t94 - t4 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t168) * t75, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t44 * t17 - 0.2e1 * t42 * t19 - 0.2e1 * t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t31, 0, 0, 0, 0, 0, 0, 0, 0, t107, t108, t104, -t32 * pkin(4) + pkin(9) * t104, 0, 0, 0, 0, 0, 0, -t105 * t32 + t47 * t29, -t47 * t28 + t32 * t60, -t1 * t105 + t15 * t28 - t16 * t29 - t2 * t60, pkin(5) * t147 - t1 * t36 + t15 * t22 - t16 * t21 + t2 * t35 + t32 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158, 0, -t82, 0, -t143, -t140, 0, 0, -t37, -0.4e1 * t94 * t144 + t169 * t158, t51, t37, -t49, 0 (-t152 - t191) * qJD(5) + (t116 * t90 - t74) * qJD(4) (t117 * t90 - t93 * t171) * qJD(5) + (-pkin(9) * t173 + (t175 + t182) * t91) * qJD(4), t103, -pkin(4) * t143 + pkin(9) * t103, -t18 * t60 - t45 * t28, -t105 * t18 - t60 * t20 + t28 * t43 - t45 * t29, -t28 * t91 + t146, -t105 * t20 + t43 * t29, t105 * t82 - t179, 0, -t105 * t38 + t43 * t151 + t81 * t20 + t22 * t91 + t58 * t29 + t35 * t82, t45 * t151 - t81 * t18 + t21 * t91 - t58 * t28 - t36 * t82 + t38 * t60, -t105 * t3 + t13 * t28 - t14 * t29 + t35 * t18 - t36 * t20 + t21 * t43 - t22 * t45 - t4 * t60, t13 * t22 - t14 * t21 + t151 * t58 - t3 * t36 + t4 * t35 + t38 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158, -t82, 0, 0, 0, 0, 0, 0, 0, 0, t50, t52, qJD(4) * t136 (pkin(9) * t136 - t183) * qJD(4), 0, 0, 0, 0, 0, 0, -t105 * t158 - t172, t60 * t158 + t94 * t28, -t105 * t17 - t19 * t60 - t42 * t28 - t44 * t29, -pkin(5) * t150 + t158 * t81 - t17 * t36 + t19 * t35 - t44 * t21 - t42 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t144, -0.2e1 * t130, 0, -0.2e1 * t144, 0, 0, t90 * t155, t93 * t155, 0, 0, -0.2e1 * t60 * t28, -0.2e1 * t105 * t28 - 0.2e1 * t60 * t29, 0, -0.2e1 * t105 * t29, 0, 0, -0.2e1 * t105 * t151 + 0.2e1 * t81 * t29, 0.2e1 * t60 * t151 - 0.2e1 * t81 * t28, -0.2e1 * t105 * t21 - 0.2e1 * t22 * t60 + 0.2e1 * t35 * t28 - 0.2e1 * t36 * t29, 0.2e1 * t151 * t81 - 0.2e1 * t36 * t21 + 0.2e1 * t35 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0 (t181 * t2 - t180 * t1 + (-t15 * t180 + t16 * t181) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, t52, t82, t24, t23, 0, 0, 0, 0, -t18, 0, -t20, t82, pkin(5) * t119 - qJD(6) * t99 - t124 * t91 - t131 * t30 + t98 (-t131 * t91 - t118) * pkin(5) + t3 (t181 * t18 - t180 * t20 + (t180 * t45 - t181 * t43) * qJD(6)) * pkin(5) (t181 * t4 - t180 * t3 + (-t13 * t180 + t14 * t181) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t49, 0, 0, 0, 0, 0, 0, 0, 0, t19, t17, 0 (t181 * t19 - t180 * t17 + (t180 * t42 + t181 * t44) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, 0, -t162, 0, -pkin(9) * t161, pkin(9) * t162, 0, 0, 0, 0, -t28, 0, -t29, 0, t22, t21 (t181 * t28 - t180 * t29 + (t105 * t181 + t180 * t60) * qJD(6)) * pkin(5) (t181 * t22 - t180 * t21 + (-t180 * t35 + t181 * t36) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t124, -0.2e1 * t125, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t20, t82, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, -t29, 0, t22, t21, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t124, -t125, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t6;
