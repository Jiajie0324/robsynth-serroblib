% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 01:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 01:34:37
% EndTime: 2019-05-05 01:35:04
% DurationCPUTime: 21.28s
% Computational Cost: add. (104327->781), mult. (199034->1233), div. (0->0), fcn. (139892->12), ass. (0->556)
t721 = cos(qJ(2));
t796 = qJDD(2) * t721;
t717 = sin(qJ(2));
t722 = qJD(2) ^ 2;
t812 = t717 * t722;
t674 = t796 - t812;
t708 = sin(pkin(6));
t652 = t674 * t708;
t710 = cos(pkin(6));
t695 = t710 * qJDD(2);
t654 = -t695 * t721 + t710 * t812;
t707 = sin(pkin(11));
t709 = cos(pkin(11));
t785 = g(1) * t707 - t709 * g(2);
t809 = g(3) - qJDD(1);
t649 = t708 * t785 + t710 * t809;
t813 = t717 * t649;
t560 = (-t652 * t708 + t654 * t710) * pkin(7) - t813;
t798 = qJDD(2) * t717;
t675 = t721 * t722 + t798;
t613 = t654 * t707 - t675 * t709;
t871 = -qJ(1) * t613 - t560 * t707;
t608 = t654 * t709 + t675 * t707;
t870 = -qJ(1) * t608 - t560 * t709;
t651 = t675 * t708;
t653 = t675 * t710;
t810 = t721 * t649;
t563 = (t651 * t708 + t653 * t710) * pkin(7) - t810;
t611 = t653 * t707 - t674 * t709;
t869 = -qJ(1) * t611 - t563 * t707;
t606 = t653 * t709 + t674 * t707;
t868 = -qJ(1) * t606 - t563 * t709;
t714 = sin(qJ(6));
t715 = sin(qJ(5));
t719 = cos(qJ(5));
t720 = cos(qJ(4));
t805 = qJD(2) * t720;
t665 = -t719 * qJD(4) + t715 * t805;
t667 = qJD(4) * t715 + t719 * t805;
t718 = cos(qJ(6));
t619 = t718 * t665 + t667 * t714;
t621 = -t665 * t714 + t667 * t718;
t564 = t621 * t619;
t802 = qJD(2) * qJD(4);
t786 = t720 * t802;
t716 = sin(qJ(4));
t799 = qJDD(2) * t716;
t670 = -t786 - t799;
t663 = qJDD(5) - t670;
t725 = qJDD(6) + t663;
t856 = -t564 + t725;
t863 = t714 * t856;
t630 = t667 * t665;
t854 = -t630 + t663;
t862 = t715 * t854;
t861 = t718 * t856;
t860 = t719 * t854;
t806 = qJD(2) * t716;
t692 = qJD(5) + t806;
t650 = t692 * t665;
t788 = t716 * t802;
t797 = qJDD(2) * t720;
t671 = -t788 + t797;
t789 = t665 * qJD(5) - t715 * qJDD(4) - t719 * t671;
t574 = -t650 + t789;
t859 = -t708 * t809 + t710 * t785;
t858 = t707 * t809;
t857 = t709 * t809;
t683 = qJD(6) + t692;
t590 = t683 * t619;
t781 = -t719 * qJDD(4) + t715 * t671;
t604 = -qJD(5) * t667 - t781;
t728 = qJD(6) * t619 - t604 * t714 + t718 * t789;
t855 = -t590 - t728;
t573 = t789 + t650;
t782 = -t718 * t604 - t714 * t789;
t466 = (qJD(6) - t683) * t621 + t782;
t678 = g(1) * t709 + g(2) * t707;
t628 = -t709 * t678 - t707 * t785;
t569 = (qJD(5) - t692) * t667 + t781;
t774 = pkin(7) * t675 - t810;
t853 = pkin(1) * t654 + t708 * t774;
t775 = pkin(7) * t674 + t813;
t852 = pkin(1) * t653 + t708 * t775;
t627 = -t707 * t678 + t709 * t785;
t851 = pkin(1) * t652 + t710 * t774;
t850 = -pkin(1) * t651 + t710 * t775;
t617 = t619 ^ 2;
t618 = t621 ^ 2;
t849 = t665 ^ 2;
t662 = t667 ^ 2;
t682 = t683 ^ 2;
t691 = t692 ^ 2;
t848 = qJD(4) ^ 2;
t847 = 2 * qJD(3);
t846 = -pkin(8) - pkin(2);
t841 = pkin(4) * t716;
t840 = pkin(4) * t720;
t596 = -t678 * t717 - t721 * t859;
t597 = -t721 * t678 + t717 * t859;
t532 = t596 * t717 + t597 * t721;
t839 = pkin(7) * t532;
t777 = -pkin(9) * t720 + t841;
t668 = t777 * qJD(2);
t706 = qJDD(2) * pkin(2);
t744 = qJDD(3) + t596;
t581 = -t722 * qJ(3) - t706 + t744;
t724 = -qJDD(2) * pkin(8) + t581;
t808 = t720 * t649 - t716 * t724;
t517 = -pkin(4) * t848 + qJDD(4) * pkin(9) - t668 * t806 - t808;
t712 = t722 * pkin(8);
t801 = qJDD(2) * qJ(3);
t723 = -t722 * pkin(2) + t597 + t801;
t778 = pkin(9) * t716 + t840;
t526 = -t670 * pkin(4) - t671 * pkin(9) - t712 + (qJD(4) * t778 + t847) * qJD(2) + t723;
t443 = t715 * t517 - t719 * t526;
t413 = t854 * pkin(5) + pkin(10) * t574 - t443;
t444 = t719 * t517 + t715 * t526;
t643 = pkin(5) * t692 - pkin(10) * t667;
t419 = -pkin(5) * t849 + pkin(10) * t604 - t643 * t692 + t444;
t354 = -t718 * t413 + t419 * t714;
t355 = t714 * t413 + t718 * t419;
t312 = -t354 * t718 + t355 * t714;
t838 = t312 * t715;
t837 = t312 * t719;
t783 = t649 * t716 + t720 * t724;
t516 = -qJDD(4) * pkin(4) - t848 * pkin(9) + t668 * t805 - t783;
t447 = -t604 * pkin(5) - pkin(10) * t849 + t643 * t667 + t516;
t836 = t447 * t714;
t835 = t447 * t718;
t834 = t516 * t715;
t833 = t516 * t719;
t534 = t564 + t725;
t832 = t534 * t714;
t831 = t534 * t718;
t594 = t630 + t663;
t830 = t594 * t715;
t829 = t594 * t719;
t703 = t716 ^ 2;
t704 = t720 ^ 2;
t807 = t703 + t704;
t673 = t807 * qJDD(2);
t828 = t673 * t717;
t827 = t673 * t721;
t790 = t716 * t720 * t722;
t679 = qJDD(4) + t790;
t826 = t679 * t716;
t825 = t679 * t720;
t680 = qJDD(4) - t790;
t824 = t680 * t716;
t823 = t680 * t720;
t822 = t683 * t714;
t821 = t683 * t718;
t820 = t692 * t715;
t819 = t692 * t719;
t818 = t703 * t722;
t817 = t704 * t722;
t815 = t708 * t649;
t795 = qJD(2) * t847;
t579 = t723 + t795;
t577 = -t712 + t579;
t814 = t716 * t577;
t811 = t720 * t577;
t800 = qJDD(2) * t708;
t794 = t716 * t564;
t793 = t720 * t564;
t792 = t716 * t630;
t791 = t720 * t630;
t787 = t709 * t800;
t313 = t354 * t714 + t718 * t355;
t380 = t443 * t715 + t719 * t444;
t780 = t717 * t790;
t779 = t721 * t790;
t283 = t313 * t719 - t838;
t278 = t283 * t716 - t447 * t720;
t282 = t313 * t715 + t837;
t773 = -t278 * t721 + t282 * t717;
t470 = -t590 + t728;
t407 = -t466 * t714 + t470 * t718;
t409 = -t466 * t718 - t470 * t714;
t344 = -t407 * t715 + t409 * t719;
t519 = -t617 - t618;
t333 = t344 * t716 - t519 * t720;
t342 = t407 * t719 + t409 * t715;
t772 = -t333 * t721 + t342 * t717;
t465 = (qJD(6) + t683) * t621 + t782;
t408 = -t465 * t714 + t718 * t855;
t410 = -t465 * t718 - t714 * t855;
t345 = -t408 * t715 + t410 * t719;
t557 = -t618 + t617;
t338 = -t345 * t716 - t557 * t720;
t343 = t408 * t719 + t410 * t715;
t771 = t338 * t721 + t343 * t717;
t359 = t380 * t716 - t516 * t720;
t379 = -t443 * t719 + t444 * t715;
t770 = -t359 * t721 + t379 * t717;
t544 = -t682 - t617;
t459 = t544 * t714 + t861;
t460 = t544 * t718 - t863;
t399 = -t459 * t715 + t460 * t719;
t364 = t399 * t716 - t465 * t720;
t398 = t459 * t719 + t460 * t715;
t769 = -t364 * t721 + t398 * t717;
t578 = -t618 - t682;
t475 = t578 * t718 - t832;
t476 = -t578 * t714 - t831;
t416 = -t475 * t715 + t476 * t719;
t370 = t416 * t716 - t720 * t855;
t415 = t475 * t719 + t476 * t715;
t768 = -t370 * t721 + t415 * t717;
t589 = -t618 + t682;
t481 = t589 * t718 + t863;
t483 = -t589 * t714 + t861;
t425 = -t481 * t715 + t483 * t719;
t373 = -t425 * t716 - t470 * t720;
t423 = t481 * t719 + t483 * t715;
t767 = t373 * t721 + t423 * t717;
t588 = t617 - t682;
t482 = t588 * t714 + t831;
t484 = t588 * t718 - t832;
t426 = -t482 * t715 + t484 * t719;
t374 = -t426 * t716 - t466 * t720;
t424 = t482 * t719 + t484 * t715;
t766 = t374 * t721 + t424 * t717;
t506 = -qJD(6) * t621 - t782;
t461 = t506 * t718 + t619 * t822;
t462 = -t506 * t714 + t619 * t821;
t404 = -t461 * t715 + t462 * t719;
t382 = -t404 * t716 - t793;
t402 = t461 * t719 + t462 * t715;
t765 = t382 * t721 + t402 * t717;
t463 = t621 * t821 - t714 * t728;
t464 = -t621 * t822 - t718 * t728;
t405 = -t463 * t715 + t464 * t719;
t383 = -t405 * t716 + t793;
t403 = t463 * t719 + t464 * t715;
t764 = t383 * t721 + t403 * t717;
t528 = (-t619 * t714 - t621 * t718) * t683;
t529 = (-t619 * t718 + t621 * t714) * t683;
t450 = -t528 * t715 + t529 * t719;
t438 = -t450 * t716 + t720 * t725;
t449 = t528 * t719 + t529 * t715;
t763 = t438 * t721 + t449 * t717;
t503 = -t569 * t719 - t574 * t715;
t592 = t662 + t849;
t453 = t503 * t716 + t592 * t720;
t501 = -t569 * t715 + t574 * t719;
t762 = -t453 * t721 + t501 * t717;
t455 = -t716 * t808 + t720 * t783;
t761 = -t455 * t721 + t577 * t717;
t570 = (-qJD(5) - t692) * t667 - t781;
t502 = t570 * t719 + t573 * t715;
t629 = -t662 + t849;
t471 = -t502 * t716 - t629 * t720;
t500 = t570 * t715 - t573 * t719;
t760 = t471 * t721 + t500 * t717;
t614 = -t691 - t849;
t537 = t614 * t719 - t862;
t473 = t537 * t716 + t570 * t720;
t536 = t614 * t715 + t860;
t759 = -t473 * t721 + t536 * t717;
t624 = -t662 - t691;
t546 = -t624 * t715 - t829;
t477 = t546 * t716 + t573 * t720;
t545 = t624 * t719 - t830;
t758 = -t477 * t721 + t545 * t717;
t648 = -t662 + t691;
t555 = -t648 * t715 + t860;
t485 = -t555 * t716 - t574 * t720;
t553 = t648 * t719 + t862;
t757 = t485 * t721 + t553 * t717;
t647 = -t691 + t849;
t556 = t647 * t719 - t830;
t486 = -t556 * t716 - t569 * t720;
t554 = t647 * t715 + t829;
t756 = t486 * t721 + t554 * t717;
t566 = -t604 * t715 + t665 * t819;
t522 = -t566 * t716 - t791;
t565 = t604 * t719 + t665 * t820;
t755 = t522 * t721 + t565 * t717;
t568 = -t667 * t820 - t719 * t789;
t523 = -t568 * t716 + t791;
t567 = t667 * t819 - t715 * t789;
t754 = t523 * t721 + t567 * t717;
t456 = -t716 * t783 - t720 * t808;
t583 = (-t665 * t719 + t667 * t715) * t692;
t558 = -t583 * t716 + t663 * t720;
t582 = (-t665 * t715 - t667 * t719) * t692;
t753 = t558 * t721 + t582 * t717;
t513 = t579 * t721 + t581 * t717;
t752 = t579 * t717 - t581 * t721;
t531 = t596 * t721 - t597 * t717;
t669 = 0.2e1 * t786 + t799;
t672 = -0.2e1 * t788 + t797;
t622 = t669 * t716 - t672 * t720;
t677 = (-t703 + t704) * t722;
t751 = t622 * t721 + t677 * t717;
t688 = -t818 - t848;
t634 = t688 * t716 + t823;
t750 = -t634 * t721 + t669 * t717;
t690 = -t817 - t848;
t636 = t690 * t720 - t826;
t749 = -t636 * t721 + t672 * t717;
t676 = t807 * t722;
t746 = -t676 * t717 + t827;
t664 = t807 * t802;
t745 = qJDD(4) * t717 + t664 * t721;
t687 = t818 - t848;
t633 = -t687 * t716 - t825;
t743 = t633 * t721 - t716 * t798;
t689 = -t817 + t848;
t635 = -t689 * t720 - t824;
t742 = t635 * t721 + t717 * t797;
t644 = -t670 * t720 - t703 * t802;
t741 = t644 * t721 - t780;
t645 = -t671 * t716 - t704 * t802;
t740 = t645 * t721 + t780;
t305 = -pkin(5) * t447 + pkin(10) * t313;
t265 = -pkin(9) * t282 - pkin(10) * t837 - t305 * t715;
t270 = -pkin(4) * t282 - pkin(5) * t312;
t279 = t283 * t720 + t447 * t716;
t249 = pkin(3) * t282 - t716 * t265 - t720 * t270 + t279 * t846;
t254 = pkin(3) * t278 - pkin(4) * t447 + pkin(9) * t283 - pkin(10) * t838 - qJ(3) * t279 + t305 * t719;
t264 = t278 * t717 + t282 * t721;
t739 = pkin(7) * t264 + t249 * t721 + t254 * t717;
t298 = -pkin(5) * t519 + pkin(10) * t409 + t313;
t301 = -pkin(10) * t407 - t312;
t267 = -pkin(9) * t342 - t298 * t715 + t301 * t719;
t323 = -pkin(4) * t342 - pkin(5) * t407;
t334 = t344 * t720 + t519 * t716;
t261 = pkin(3) * t342 - t716 * t267 - t720 * t323 + t334 * t846;
t263 = pkin(3) * t333 - pkin(4) * t519 + pkin(9) * t344 - qJ(3) * t334 + t298 * t719 + t301 * t715;
t304 = t333 * t717 + t342 * t721;
t738 = pkin(7) * t304 + t261 * t721 + t263 * t717;
t363 = -pkin(5) * t465 + pkin(10) * t460 - t835;
t395 = -pkin(10) * t459 + t836;
t309 = -pkin(9) * t398 - t363 * t715 + t395 * t719;
t321 = -pkin(4) * t398 - pkin(5) * t459 + t354;
t365 = t399 * t720 + t465 * t716;
t269 = pkin(3) * t398 - t716 * t309 - t720 * t321 + t365 * t846;
t284 = pkin(3) * t364 - pkin(4) * t465 + pkin(9) * t399 - qJ(3) * t365 + t363 * t719 + t395 * t715;
t328 = t364 * t717 + t398 * t721;
t737 = pkin(7) * t328 + t269 * t721 + t284 * t717;
t366 = -pkin(5) * t855 + pkin(10) * t476 + t836;
t400 = -pkin(10) * t475 + t835;
t318 = -pkin(9) * t415 - t366 * t715 + t400 * t719;
t322 = -pkin(4) * t415 - pkin(5) * t475 + t355;
t371 = t416 * t720 + t716 * t855;
t274 = pkin(3) * t415 - t716 * t318 - t720 * t322 + t371 * t846;
t290 = pkin(3) * t370 - pkin(4) * t855 + pkin(9) * t416 - qJ(3) * t371 + t366 * t719 + t400 * t715;
t335 = t370 * t717 + t415 * t721;
t736 = pkin(7) * t335 + t274 * t721 + t290 * t717;
t360 = t380 * t720 + t516 * t716;
t286 = t846 * t360 + (pkin(3) + t778) * t379;
t299 = pkin(3) * t359 - pkin(4) * t516 + pkin(9) * t380 - qJ(3) * t360;
t324 = t359 * t717 + t379 * t721;
t735 = pkin(7) * t324 + t286 * t721 + t299 * t717;
t357 = -pkin(9) * t501 - t379;
t454 = t503 * t720 - t592 * t716;
t320 = -t716 * t357 + (pkin(3) + t840) * t501 + t846 * t454;
t325 = pkin(3) * t453 + pkin(4) * t592 + pkin(9) * t503 - qJ(3) * t454 + t380;
t414 = t453 * t717 + t501 * t721;
t734 = pkin(7) * t414 + t320 * t721 + t325 * t717;
t418 = -pkin(4) * t536 + t443;
t448 = -pkin(9) * t536 + t834;
t474 = t537 * t720 - t570 * t716;
t327 = pkin(3) * t536 - t720 * t418 - t716 * t448 + t474 * t846;
t356 = pkin(3) * t473 + pkin(4) * t570 + pkin(9) * t537 - qJ(3) * t474 - t833;
t432 = t473 * t717 + t536 * t721;
t733 = pkin(7) * t432 + t327 * t721 + t356 * t717;
t421 = -pkin(4) * t545 + t444;
t451 = -pkin(9) * t545 + t833;
t478 = t546 * t720 - t573 * t716;
t330 = pkin(3) * t545 - t720 * t421 - t716 * t451 + t478 * t846;
t358 = pkin(3) * t477 + pkin(4) * t573 + pkin(9) * t546 - qJ(3) * t478 + t834;
t434 = t477 * t717 + t545 * t721;
t732 = pkin(7) * t434 + t330 * t721 + t358 * t717;
t390 = pkin(3) * t577 + t456 * t846;
t401 = pkin(3) * t455 - qJ(3) * t456;
t433 = t455 * t717 + t577 * t721;
t731 = pkin(7) * t433 + t390 * t721 + t401 * t717;
t638 = t688 * t720 - t824;
t489 = pkin(3) * t634 - qJ(3) * t638 + t783;
t498 = pkin(3) * t669 + t638 * t846 + t811;
t586 = t634 * t717 + t669 * t721;
t730 = pkin(7) * t586 + t489 * t717 + t498 * t721;
t641 = -t690 * t716 - t825;
t490 = pkin(3) * t636 - qJ(3) * t641 + t808;
t497 = pkin(3) * t672 + t641 * t846 - t814;
t587 = t636 * t717 + t672 * t721;
t729 = pkin(7) * t587 + t490 * t717 + t497 * t721;
t452 = -pkin(3) * t676 - t456;
t625 = -t676 * t721 - t828;
t727 = -pkin(3) * t828 + pkin(7) * t625 + t452 * t721;
t726 = pkin(7) * t513 + (pkin(2) * t721 + qJ(3) * t717) * t649;
t684 = t707 * t800;
t646 = qJDD(4) * t721 - t664 * t717;
t640 = -t689 * t716 + t823;
t639 = (t671 - t788) * t720;
t637 = t687 * t720 - t826;
t632 = (-t670 + t786) * t716;
t631 = t710 * t649;
t626 = t745 * t710;
t623 = -t669 * t720 - t672 * t716;
t616 = t746 * t710;
t615 = t746 * t708;
t603 = -t644 * t717 - t779;
t602 = -t645 * t717 + t779;
t601 = -t635 * t717 + t720 * t796;
t600 = -t633 * t717 - t716 * t796;
t585 = -0.2e1 * t706 + t744;
t584 = t597 + t795 + 0.2e1 * t801;
t580 = -t622 * t717 + t677 * t721;
t559 = t583 * t720 + t663 * t716;
t552 = -t616 * t707 + t625 * t709;
t551 = t616 * t709 + t625 * t707;
t550 = -t708 * t632 + t710 * t741;
t549 = -t708 * t639 + t710 * t740;
t548 = -t708 * t640 + t710 * t742;
t547 = -t708 * t637 + t710 * t743;
t543 = -t708 * t641 + t710 * t749;
t542 = -t708 * t638 + t710 * t750;
t541 = t710 * t641 + t708 * t749;
t540 = t710 * t638 + t708 * t750;
t530 = -t708 * t623 + t710 * t751;
t527 = t532 * t710;
t525 = t568 * t720 + t792;
t524 = t566 * t720 - t792;
t518 = -pkin(2) * t581 + qJ(3) * t579;
t515 = t708 * t596 - t851;
t514 = t708 * t597 - t850;
t510 = -t708 * t585 + t851;
t509 = t513 * t710;
t508 = -t708 * t584 + t850;
t505 = -t531 * t710 + t815;
t504 = -t531 * t708 - t631;
t499 = -t558 * t717 + t582 * t721;
t496 = qJ(3) * t672 + t636 * t846 + t811;
t495 = qJ(3) * t669 + t634 * t846 + t814;
t494 = -t543 * t707 + t587 * t709;
t493 = -t542 * t707 + t586 * t709;
t492 = t543 * t709 + t587 * t707;
t491 = t542 * t709 + t586 * t707;
t488 = t556 * t720 - t569 * t716;
t487 = t555 * t720 - t574 * t716;
t480 = t710 * t752 + t815;
t479 = t708 * t752 - t631;
t472 = t502 * t720 - t629 * t716;
t458 = -t523 * t717 + t567 * t721;
t457 = -t522 * t717 + t565 * t721;
t446 = -t708 * t559 + t710 * t753;
t445 = -qJ(3) * t676 - t673 * t846 - t455;
t441 = -t486 * t717 + t554 * t721;
t440 = -t485 * t717 + t553 * t721;
t439 = t450 * t720 + t716 * t725;
t437 = -pkin(1) * t504 + t710 * t839;
t436 = -t505 * t707 + t532 * t709;
t435 = t505 * t709 + t532 * t707;
t431 = (-t504 * t708 - t505 * t710) * pkin(7);
t430 = -t480 * t707 + t513 * t709;
t429 = t480 * t709 + t513 * t707;
t428 = -t708 * t525 + t710 * t754;
t427 = -t708 * t524 + t710 * t755;
t422 = -pkin(3) * t827 - t717 * t452 + (-t615 * t708 - t616 * t710) * pkin(7);
t420 = -t471 * t717 + t500 * t721;
t406 = (-pkin(2) * t717 + qJ(3) * t721) * t649 + (-t479 * t708 - t480 * t710) * pkin(7);
t397 = -t708 * t488 + t710 * t756;
t396 = -t708 * t487 + t710 * t757;
t394 = -t708 * t478 + t710 * t758;
t393 = t710 * t478 + t708 * t758;
t392 = -t708 * t474 + t710 * t759;
t391 = t710 * t474 + t708 * t759;
t389 = qJ(3) * t577 + t455 * t846;
t388 = -t708 * t456 + t710 * t761;
t387 = t710 * t456 + t708 * t761;
t386 = -t438 * t717 + t449 * t721;
t385 = t405 * t720 + t794;
t384 = t404 * t720 - t794;
t381 = -pkin(1) * t479 - t708 * t518 + t710 * t726;
t378 = t721 * t490 - t717 * t497 + (-t541 * t708 - t543 * t710) * pkin(7);
t377 = t721 * t489 - t717 * t498 + (-t540 * t708 - t542 * t710) * pkin(7);
t376 = t426 * t720 - t466 * t716;
t375 = t425 * t720 - t470 * t716;
t372 = -t708 * t472 + t710 * t760;
t369 = -t708 * t454 + t710 * t762;
t368 = t710 * t454 + t708 * t762;
t367 = -pkin(1) * t615 - t708 * t445 + t710 * t727;
t362 = -pkin(1) * t541 - t708 * t496 + t710 * t729;
t361 = -pkin(1) * t540 - t708 * t495 + t710 * t730;
t352 = -t394 * t707 + t434 * t709;
t351 = t394 * t709 + t434 * t707;
t350 = -t708 * t439 + t710 * t763;
t349 = -t392 * t707 + t432 * t709;
t348 = t392 * t709 + t432 * t707;
t347 = -t388 * t707 + t433 * t709;
t346 = t388 * t709 + t433 * t707;
t341 = -t374 * t717 + t424 * t721;
t340 = -t373 * t717 + t423 * t721;
t339 = t345 * t720 - t557 * t716;
t337 = -t383 * t717 + t403 * t721;
t336 = -t382 * t717 + t402 * t721;
t332 = -t369 * t707 + t414 * t709;
t331 = t369 * t709 + t414 * t707;
t329 = qJ(3) * t545 - t716 * t421 + t720 * t451 + t477 * t846;
t326 = qJ(3) * t536 - t716 * t418 + t720 * t448 + t473 * t846;
t319 = t720 * t357 + (qJ(3) + t841) * t501 + t846 * t453;
t317 = -t708 * t376 + t710 * t766;
t316 = -t708 * t375 + t710 * t767;
t315 = -t708 * t385 + t710 * t764;
t314 = -t708 * t384 + t710 * t765;
t311 = -t708 * t371 + t710 * t768;
t310 = t710 * t371 + t708 * t768;
t308 = -t708 * t365 + t710 * t769;
t307 = t710 * t365 + t708 * t769;
t306 = -t338 * t717 + t343 * t721;
t303 = -t708 * t360 + t710 * t770;
t302 = t710 * t360 + t708 * t770;
t300 = -t717 * t390 + t721 * t401 + (-t387 * t708 - t388 * t710) * pkin(7);
t297 = -pkin(1) * t387 - t708 * t389 + t710 * t731;
t296 = -t311 * t707 + t335 * t709;
t295 = t311 * t709 + t335 * t707;
t294 = -t708 * t339 + t710 * t771;
t293 = -t717 * t330 + t721 * t358 + (-t393 * t708 - t394 * t710) * pkin(7);
t292 = -t708 * t334 + t710 * t772;
t291 = t710 * t334 + t708 * t772;
t289 = -t717 * t327 + t721 * t356 + (-t391 * t708 - t392 * t710) * pkin(7);
t288 = -t308 * t707 + t328 * t709;
t287 = t308 * t709 + t328 * t707;
t285 = t846 * t359 + (qJ(3) + t777) * t379;
t281 = -t303 * t707 + t324 * t709;
t280 = t303 * t709 + t324 * t707;
t277 = -pkin(1) * t393 - t708 * t329 + t710 * t732;
t276 = -pkin(1) * t391 - t708 * t326 + t710 * t733;
t275 = -t717 * t320 + t721 * t325 + (-t368 * t708 - t369 * t710) * pkin(7);
t273 = qJ(3) * t415 + t720 * t318 - t716 * t322 + t370 * t846;
t272 = -t292 * t707 + t304 * t709;
t271 = t292 * t709 + t304 * t707;
t268 = qJ(3) * t398 + t720 * t309 - t716 * t321 + t364 * t846;
t266 = -pkin(1) * t368 - t708 * t319 + t710 * t734;
t262 = -t717 * t286 + t721 * t299 + (-t302 * t708 - t303 * t710) * pkin(7);
t260 = qJ(3) * t342 + t720 * t267 - t716 * t323 + t333 * t846;
t259 = -t708 * t279 + t710 * t773;
t258 = t710 * t279 + t708 * t773;
t257 = -t717 * t274 + t721 * t290 + (-t310 * t708 - t311 * t710) * pkin(7);
t256 = -pkin(1) * t302 - t708 * t285 + t710 * t735;
t255 = -t717 * t269 + t721 * t284 + (-t307 * t708 - t308 * t710) * pkin(7);
t253 = -pkin(1) * t310 - t708 * t273 + t710 * t736;
t252 = -pkin(1) * t307 - t708 * t268 + t710 * t737;
t251 = -t259 * t707 + t264 * t709;
t250 = t259 * t709 + t264 * t707;
t248 = qJ(3) * t282 + t720 * t265 - t716 * t270 + t278 * t846;
t247 = -t717 * t261 + t721 * t263 + (-t291 * t708 - t292 * t710) * pkin(7);
t246 = -pkin(1) * t291 - t708 * t260 + t710 * t738;
t245 = -t717 * t249 + t721 * t254 + (-t258 * t708 - t259 * t710) * pkin(7);
t244 = -pkin(1) * t258 - t708 * t248 + t710 * t739;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t628, 0, 0, 0, 0, 0, 0, t613, t611, 0, t436, 0, 0, 0, 0, 0, 0, 0, -t613, -t611, t430, 0, 0, 0, 0, 0, 0, t493, t494, t552, t347, 0, 0, 0, 0, 0, 0, t349, t352, t332, t281, 0, 0, 0, 0, 0, 0, t288, t296, t272, t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t627, 0, 0, 0, 0, 0, 0, -t608, -t606, 0, t435, 0, 0, 0, 0, 0, 0, 0, t608, t606, t429, 0, 0, 0, 0, 0, 0, t491, t492, t551, t346, 0, 0, 0, 0, 0, 0, t348, t351, t331, t280, 0, 0, 0, 0, 0, 0, t287, t295, t271, t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t809, 0, 0, 0, 0, 0, 0, t652, -t651, 0, t504, 0, 0, 0, 0, 0, 0, 0, -t652, t651, t479, 0, 0, 0, 0, 0, 0, t540, t541, t615, t387, 0, 0, 0, 0, 0, 0, t391, t393, t368, t302, 0, 0, 0, 0, 0, 0, t307, t310, t291, t258; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t858, -t857, -t627, -qJ(1) * t627, 0, 0, -t611, 0, t613, t684, -t515 * t707 - t870, -t514 * t707 - t868, -t527 * t707 + t531 * t709, -qJ(1) * t435 + t431 * t709 - t437 * t707, t684, t611, -t613, 0, 0, 0, -t509 * t707 - t709 * t752, -t510 * t707 + t870, -t508 * t707 + t868, -qJ(1) * t429 - t381 * t707 + t406 * t709, -t549 * t707 + t602 * t709, -t530 * t707 + t580 * t709, -t548 * t707 + t601 * t709, -t550 * t707 + t603 * t709, -t547 * t707 + t600 * t709, -t626 * t707 + t646 * t709, -qJ(1) * t491 - t361 * t707 + t377 * t709, -qJ(1) * t492 - t362 * t707 + t378 * t709, -qJ(1) * t551 - t367 * t707 + t422 * t709, -qJ(1) * t346 - t297 * t707 + t300 * t709, -t428 * t707 + t458 * t709, -t372 * t707 + t420 * t709, -t396 * t707 + t440 * t709, -t427 * t707 + t457 * t709, -t397 * t707 + t441 * t709, -t446 * t707 + t499 * t709, -qJ(1) * t348 - t276 * t707 + t289 * t709, -qJ(1) * t351 - t277 * t707 + t293 * t709, -qJ(1) * t331 - t266 * t707 + t275 * t709, -qJ(1) * t280 - t256 * t707 + t262 * t709, -t315 * t707 + t337 * t709, -t294 * t707 + t306 * t709, -t316 * t707 + t340 * t709, -t314 * t707 + t336 * t709, -t317 * t707 + t341 * t709, -t350 * t707 + t386 * t709, -qJ(1) * t287 - t252 * t707 + t255 * t709, -qJ(1) * t295 - t253 * t707 + t257 * t709, -qJ(1) * t271 - t246 * t707 + t247 * t709, -qJ(1) * t250 - t244 * t707 + t245 * t709; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t857, -t858, t628, qJ(1) * t628, 0, 0, t606, 0, -t608, -t787, t515 * t709 - t871, t514 * t709 - t869, t527 * t709 + t531 * t707, qJ(1) * t436 + t431 * t707 + t437 * t709, -t787, -t606, t608, 0, 0, 0, t509 * t709 - t707 * t752, t510 * t709 + t871, t508 * t709 + t869, qJ(1) * t430 + t381 * t709 + t406 * t707, t549 * t709 + t602 * t707, t530 * t709 + t580 * t707, t548 * t709 + t601 * t707, t550 * t709 + t603 * t707, t547 * t709 + t600 * t707, t626 * t709 + t646 * t707, qJ(1) * t493 + t361 * t709 + t377 * t707, qJ(1) * t494 + t362 * t709 + t378 * t707, qJ(1) * t552 + t367 * t709 + t422 * t707, qJ(1) * t347 + t297 * t709 + t300 * t707, t428 * t709 + t458 * t707, t372 * t709 + t420 * t707, t396 * t709 + t440 * t707, t427 * t709 + t457 * t707, t397 * t709 + t441 * t707, t446 * t709 + t499 * t707, qJ(1) * t349 + t276 * t709 + t289 * t707, qJ(1) * t352 + t277 * t709 + t293 * t707, qJ(1) * t332 + t266 * t709 + t275 * t707, qJ(1) * t281 + t256 * t709 + t262 * t707, t315 * t709 + t337 * t707, t294 * t709 + t306 * t707, t316 * t709 + t340 * t707, t314 * t709 + t336 * t707, t317 * t709 + t341 * t707, t350 * t709 + t386 * t707, qJ(1) * t288 + t252 * t709 + t255 * t707, qJ(1) * t296 + t253 * t709 + t257 * t707, qJ(1) * t272 + t246 * t709 + t247 * t707, qJ(1) * t251 + t244 * t709 + t245 * t707; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t785, t678, 0, 0, 0, 0, t651, 0, t652, t695, -t710 * t596 - t853, -t710 * t597 - t852, t532 * t708, pkin(1) * t505 + t708 * t839, t695, -t651, -t652, 0, 0, 0, t513 * t708, t710 * t585 + t853, t710 * t584 + t852, pkin(1) * t480 + t710 * t518 + t708 * t726, t710 * t639 + t708 * t740, t710 * t623 + t708 * t751, t710 * t640 + t708 * t742, t710 * t632 + t708 * t741, t710 * t637 + t708 * t743, t745 * t708, pkin(1) * t542 + t710 * t495 + t708 * t730, pkin(1) * t543 + t710 * t496 + t708 * t729, pkin(1) * t616 + t710 * t445 + t708 * t727, pkin(1) * t388 + t710 * t389 + t708 * t731, t710 * t525 + t708 * t754, t710 * t472 + t708 * t760, t710 * t487 + t708 * t757, t710 * t524 + t708 * t755, t710 * t488 + t708 * t756, t710 * t559 + t708 * t753, pkin(1) * t392 + t710 * t326 + t708 * t733, pkin(1) * t394 + t710 * t329 + t708 * t732, pkin(1) * t369 + t710 * t319 + t708 * t734, pkin(1) * t303 + t710 * t285 + t708 * t735, t710 * t385 + t708 * t764, t710 * t339 + t708 * t771, t710 * t375 + t708 * t767, t710 * t384 + t708 * t765, t710 * t376 + t708 * t766, t710 * t439 + t708 * t763, pkin(1) * t308 + t710 * t268 + t708 * t737, pkin(1) * t311 + t710 * t273 + t708 * t736, pkin(1) * t292 + t710 * t260 + t708 * t738, pkin(1) * t259 + t710 * t248 + t708 * t739;];
tauB_reg  = t1;
