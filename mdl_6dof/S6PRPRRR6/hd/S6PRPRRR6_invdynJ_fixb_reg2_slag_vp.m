% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:48:54
% EndTime: 2019-03-08 20:49:07
% DurationCPUTime: 7.36s
% Computational Cost: add. (7416->611), mult. (15403->823), div. (0->0), fcn. (11347->14), ass. (0->289)
t206 = sin(qJ(4));
t210 = cos(qJ(4));
t257 = pkin(4) * t210 + pkin(9) * t206;
t142 = qJD(4) * t257 + qJD(3);
t256 = pkin(4) * t206 - pkin(9) * t210;
t154 = qJ(3) + t256;
t205 = sin(qJ(5));
t213 = -pkin(2) - pkin(8);
t209 = cos(qJ(5));
t314 = t209 * qJD(4);
t281 = t210 * t314;
t342 = t206 * t213;
t299 = t205 * t342;
t318 = qJD(5) * t209;
t202 = sin(pkin(6));
t331 = qJD(1) * t202;
t207 = sin(qJ(2));
t341 = t207 * t209;
t211 = cos(qJ(2));
t345 = t205 * t211;
t366 = -qJD(5) * t299 + t205 * t142 + t154 * t318 + t213 * t281 - (t206 * t341 + t345) * t331;
t344 = t206 * t207;
t412 = t209 * t142 - (-t205 * t344 + t209 * t211) * t331;
t350 = t202 * t207;
t203 = cos(pkin(6));
t364 = cos(pkin(11));
t267 = t364 * t207;
t201 = sin(pkin(11));
t351 = t201 * t211;
t125 = t203 * t267 + t351;
t266 = t364 * t211;
t352 = t201 * t207;
t127 = -t203 * t352 + t266;
t396 = -g(1) * t127 - g(2) * t125;
t229 = g(3) * t350 - t396;
t325 = qJD(2) * t210;
t289 = t205 * t325;
t145 = t289 - t314;
t322 = qJD(4) * t205;
t147 = t209 * t325 + t322;
t204 = sin(qJ(6));
t208 = cos(qJ(6));
t246 = t145 * t204 - t208 * t147;
t69 = t208 * t145 + t147 * t204;
t382 = t69 * t246;
t173 = t209 * t342;
t273 = -t205 * t213 + pkin(5);
t343 = t206 * t209;
t303 = pkin(10) * t343;
t411 = (-t173 + (pkin(10) * t210 - t154) * t205) * qJD(5) + (t210 * t273 + t303) * qJD(4) + t412;
t317 = qJD(5) * t210;
t285 = t209 * t317;
t321 = qJD(4) * t206;
t288 = t205 * t321;
t233 = -t285 + t288;
t410 = -pkin(10) * t233 - t366;
t326 = qJD(2) * t206;
t290 = t205 * t326;
t392 = pkin(10) + pkin(9);
t294 = qJD(5) * t392;
t150 = t257 * qJD(2);
t283 = t211 * t331;
t253 = qJD(3) - t283;
t132 = qJD(2) * t213 + t253;
t330 = qJD(1) * t203;
t177 = t206 * t330;
t92 = t132 * t210 - t177;
t60 = t205 * t150 + t209 * t92;
t409 = pkin(10) * t290 + t205 * t294 + t60;
t59 = t209 * t150 - t205 * t92;
t408 = -t209 * t294 - (pkin(5) * t210 + t303) * qJD(2) - t59;
t278 = qJD(4) * t330;
t310 = qJDD(1) * t203;
t284 = t207 * t331;
t169 = qJD(2) * t284;
t311 = qJDD(1) * t202;
t274 = t211 * t311;
t240 = qJDD(3) + t169 - t274;
t95 = qJDD(2) * t213 + t240;
t262 = t132 * t321 + t206 * t310 + (t278 - t95) * t210;
t320 = qJD(4) * t210;
t301 = -t132 * t320 - t206 * t95 - t210 * t310;
t34 = -t206 * t278 - t301;
t329 = qJD(1) * t210;
t280 = t203 * t329;
t93 = t132 * t206 + t280;
t221 = -(t206 * t92 - t210 * t93) * qJD(4) + t34 * t206 - t262 * t210;
t124 = -t203 * t266 + t352;
t126 = t203 * t351 + t267;
t349 = t202 * t211;
t398 = g(1) * t126 + g(2) * t124 - g(3) * t349;
t407 = t221 - t398;
t186 = qJD(5) + t326;
t102 = qJD(2) * t154 + t284;
t31 = qJDD(4) * pkin(9) + t34;
t319 = qJD(5) * t205;
t275 = t207 * t311;
t58 = t275 + t154 * qJDD(2) + (t142 + t283) * qJD(2);
t77 = qJD(4) * pkin(9) + t93;
t239 = -t102 * t318 - t205 * t58 - t209 * t31 + t319 * t77;
t38 = t209 * t102 - t205 * t77;
t406 = -t38 * t186 - t239;
t305 = t210 * qJDD(2);
t405 = qJD(4) * qJD(5) + t305;
t404 = t246 ^ 2 - t69 ^ 2;
t174 = qJD(6) + t186;
t296 = qJD(2) * t285 + t205 * t405;
t242 = t209 * qJDD(4) - t296;
t313 = qJD(2) * qJD(4);
t277 = t206 * t313;
t224 = t205 * t277 + t242;
t315 = qJD(6) * t208;
t316 = qJD(6) * t204;
t287 = t206 * t314;
t234 = t205 * t317 + t287;
t65 = qJD(2) * t234 - t205 * qJDD(4) - t209 * t405;
t18 = t145 * t315 + t147 * t316 - t204 * t224 + t208 * t65;
t403 = t174 * t69 - t18;
t23 = -pkin(10) * t147 + t38;
t21 = pkin(5) * t186 + t23;
t39 = t102 * t205 + t209 * t77;
t24 = -pkin(10) * t145 + t39;
t11 = -qJD(5) * t39 - t205 * t31 + t209 * t58;
t276 = t210 * t313;
t306 = t206 * qJDD(2);
t141 = qJDD(5) + t276 + t306;
t4 = t141 * pkin(5) + t65 * pkin(10) + t11;
t5 = pkin(10) * t224 - t239;
t1 = (qJD(6) * t21 + t5) * t208 + t204 * t4 - t24 * t316;
t300 = t206 * t349;
t131 = t203 * t210 - t300;
t200 = qJ(5) + qJ(6);
t195 = sin(t200);
t196 = cos(t200);
t378 = qJD(4) * pkin(4);
t76 = -t92 - t378;
t61 = pkin(5) * t145 + t76;
t353 = t201 * t202;
t82 = t126 * t206 + t210 * t353;
t268 = t202 * t364;
t84 = -t124 * t206 + t210 * t268;
t402 = t61 * t69 - g(1) * (-t127 * t195 - t196 * t82) - g(2) * (-t125 * t195 + t196 * t84) - g(3) * (-t131 * t196 - t195 * t350) - t1;
t375 = t208 * t24;
t13 = t204 * t21 + t375;
t2 = -qJD(6) * t13 - t204 * t5 + t208 * t4;
t401 = t61 * t246 - g(1) * (t127 * t196 - t195 * t82) - g(2) * (t125 * t196 + t195 * t84) - g(3) * (-t131 * t195 + t196 * t350) + t2;
t226 = qJD(6) * t246 + t204 * t65 + t208 * t224;
t400 = -t174 * t246 + t226;
t399 = -t39 * t186 - t11;
t340 = t208 * t209;
t348 = t204 * t205;
t148 = -t340 + t348;
t115 = t148 * t206;
t149 = t204 * t209 + t205 * t208;
t113 = t149 * t206;
t104 = t205 * t154 + t173;
t87 = -t131 * t205 + t202 * t341;
t397 = -g(1) * (t127 * t209 - t205 * t82) - g(2) * (t125 * t209 + t205 * t84) - g(3) * t87;
t304 = qJD(5) + qJD(6);
t261 = qJD(5) * t206 + qJD(2);
t282 = t205 * t320;
t395 = t209 * t261 + t282;
t336 = qJDD(1) - g(3);
t394 = -t336 * t350 - t396;
t328 = qJD(2) * qJ(3);
t153 = t284 + t328;
t393 = qJD(4) * (-t153 + t284 - t328) - qJDD(4) * t213;
t140 = t209 * t154;
t338 = t209 * t210;
t67 = -pkin(10) * t338 + t206 * t273 + t140;
t346 = t205 * t210;
t80 = -pkin(10) * t346 + t104;
t29 = -t204 * t80 + t208 * t67;
t390 = qJD(6) * t29 + t411 * t204 - t410 * t208;
t30 = t204 * t67 + t208 * t80;
t389 = -qJD(6) * t30 + t410 * t204 + t411 * t208;
t388 = pkin(5) * t205;
t387 = pkin(9) * t141;
t384 = t124 * pkin(8);
t383 = t126 * pkin(8);
t381 = t203 ^ 2 * qJDD(1) - g(3);
t167 = t392 * t205;
t168 = t392 * t209;
t96 = -t167 * t208 - t168 * t204;
t380 = qJD(6) * t96 + t408 * t204 - t409 * t208;
t97 = -t167 * t204 + t168 * t208;
t379 = -qJD(6) * t97 + t409 * t204 + t408 * t208;
t377 = t204 * t24;
t309 = qJDD(2) * qJ(3);
t98 = t275 + t309 + (qJD(3) + t283) * qJD(2);
t376 = t207 * t98;
t374 = t209 * t38;
t371 = t65 * t205;
t134 = t149 * qJD(2);
t79 = t304 * t149;
t370 = t206 * t134 + t79;
t369 = -t204 * t290 + t208 * t318 + t209 * t315 - t304 * t348 + t326 * t340;
t368 = -t148 * qJD(2) - t115 * t304 + t149 * t320;
t116 = t148 * t210;
t367 = qJD(4) * t116 + t113 * t304 + t134;
t365 = -qJD(5) * t104 - t213 * t282 + t412;
t363 = qJDD(2) * pkin(2);
t362 = qJDD(4) * pkin(4);
t361 = t145 * t186;
t360 = t145 * t205;
t359 = t147 * t145;
t358 = t147 * t209;
t357 = t153 * t211;
t356 = t186 * t205;
t355 = t195 * t206;
t354 = t196 * t206;
t347 = t205 * t141;
t339 = t209 * t141;
t215 = qJD(2) ^ 2;
t337 = t211 * t215;
t335 = pkin(2) * t349 + qJ(3) * t350;
t198 = t206 ^ 2;
t199 = t210 ^ 2;
t334 = t198 - t199;
t333 = t198 + t199;
t214 = qJD(4) ^ 2;
t332 = -t214 - t215;
t327 = qJD(2) * t153;
t324 = qJD(2) * t211;
t323 = qJD(4) * t147;
t308 = qJDD(4) * t206;
t298 = t210 * t215 * t206;
t297 = t229 * t210;
t293 = t207 * t329;
t292 = qJD(2) * t350;
t291 = t202 * t324;
t117 = t124 * pkin(2);
t272 = -t117 - t384;
t118 = t126 * pkin(2);
t271 = -t118 - t383;
t265 = t125 * qJ(3) - t117;
t264 = t127 * qJ(3) - t118;
t263 = t333 * qJDD(2);
t260 = g(3) * (pkin(8) * t349 + t335);
t259 = t206 * t276;
t258 = pkin(5) * t319 - t280 - (-qJD(2) * t388 + t132) * t206;
t88 = t131 * t209 + t205 * t350;
t36 = -t204 * t88 + t208 * t87;
t37 = t204 * t87 + t208 * t88;
t252 = -t205 * t39 - t374;
t251 = t205 * t38 - t209 * t39;
t248 = t98 * qJ(3) + t153 * qJD(3);
t247 = (-qJD(2) * pkin(2) + t253) * t207 + t357;
t190 = pkin(5) * t209 + pkin(4);
t245 = t190 * t206 - t210 * t392;
t244 = qJDD(2) * t207 + t337;
t130 = t203 * t206 + t210 * t349;
t238 = t186 * t318 + t347;
t237 = -t186 * t319 + t339;
t32 = t262 - t362;
t81 = t126 * t210 - t206 * t353;
t83 = t124 * t210 + t206 * t268;
t236 = g(1) * t81 + g(2) * t83 - g(3) * t130;
t235 = g(1) * t82 - g(2) * t84 + g(3) * t131;
t231 = -t236 - t32;
t228 = t398 + t274;
t227 = t205 * t261 - t281;
t225 = qJDD(3) - t228;
t223 = pkin(9) * qJD(5) * t186 - t231;
t222 = qJD(5) * t252 - t11 * t205 - t209 * t239;
t220 = t224 * t209;
t219 = qJD(2) * t253 - t213 * t214 + t309 + t98;
t193 = qJDD(4) * t210;
t143 = (-t213 + t388) * t210;
t138 = qJDD(6) + t141;
t123 = t244 * t202;
t122 = (-qJDD(2) * t211 + t207 * t215) * t202;
t114 = t149 * t210;
t105 = t240 - t363;
t103 = t140 - t299;
t99 = -pkin(5) * t233 + t213 * t321;
t86 = -qJD(4) * t300 + t203 * t320 - t210 * t292;
t85 = -qJD(4) * t130 + t206 * t292;
t43 = -t316 * t346 + (t304 * t338 - t288) * t208 - t234 * t204;
t41 = -t204 * t288 + t208 * t287 + t210 * t79;
t26 = qJD(5) * t87 + t205 * t291 + t85 * t209;
t25 = -qJD(5) * t88 - t85 * t205 + t209 * t291;
t20 = -pkin(5) * t224 + t32;
t15 = t208 * t23 - t377;
t14 = -t204 * t23 - t375;
t12 = t208 * t21 - t377;
t7 = -qJD(6) * t37 - t204 * t26 + t208 * t25;
t6 = qJD(6) * t36 + t204 * t25 + t208 * t26;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t336, 0, 0, 0, 0, 0, 0, -t122, -t123, 0 (t207 ^ 2 + t211 ^ 2) * t202 ^ 2 * qJDD(1) + t381, 0, 0, 0, 0, 0, 0, 0, t122, t123 (qJD(2) * t247 - t105 * t211 + t376) * t202 + t381, 0, 0, 0, 0, 0, 0, -t86 * qJD(4) - t130 * qJDD(4) + (t206 * t244 + t207 * t276) * t202, -t85 * qJD(4) - t131 * qJDD(4) + (t210 * t337 + (-t277 + t305) * t207) * t202 (t130 * t210 - t131 * t206) * qJDD(2) + (-t206 * t85 + t210 * t86 + (-t130 * t206 - t131 * t210) * qJD(4)) * qJD(2), t130 * t262 + t131 * t34 + t85 * t93 - t86 * t92 - g(3) + (t153 * t324 + t376) * t202, 0, 0, 0, 0, 0, 0, -t130 * t224 + t87 * t141 + t86 * t145 + t25 * t186, -t130 * t65 - t141 * t88 + t147 * t86 - t186 * t26, -t26 * t145 - t25 * t147 + t224 * t88 + t87 * t65, t11 * t87 + t130 * t32 - t239 * t88 + t25 * t38 + t26 * t39 + t76 * t86 - g(3), 0, 0, 0, 0, 0, 0, -t130 * t226 + t138 * t36 + t174 * t7 + t69 * t86, -t130 * t18 - t138 * t37 - t174 * t6 - t246 * t86, t18 * t36 + t226 * t37 + t246 * t7 - t6 * t69, t1 * t37 + t12 * t7 + t13 * t6 + t130 * t20 + t2 * t36 + t61 * t86 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t228, t394, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t225 - 0.2e1 * t363, 0.2e1 * qJD(2) * qJD(3) + 0.2e1 * t309 - t394, -t105 * pkin(2) - g(1) * t264 - g(2) * t265 - g(3) * t335 - t247 * t331 + t248, qJDD(2) * t199 - 0.2e1 * t259, -0.2e1 * t206 * t305 + 0.2e1 * t313 * t334, -t206 * t214 + t193, qJDD(2) * t198 + 0.2e1 * t259, -t210 * t214 - t308, 0, -t393 * t210 + (t219 - t229) * t206, t206 * t393 + t219 * t210 - t297, t169 * t333 - t213 * t263 - t407, -g(1) * (t264 - t383) - g(2) * (t265 - t384) - t260 + (-t357 + (-t206 * t93 - t210 * t92) * t207) * t331 + t221 * t213 + t248, -t147 * t234 - t338 * t65 (t145 * t209 + t147 * t205) * t321 + (t220 + t371 + (-t358 + t360) * qJD(5)) * t210 (-t186 * t314 - t65) * t206 + (t237 + t323) * t210, -t145 * t233 - t224 * t346 ((t186 + t326) * t322 + t242) * t206 + (-t145 * qJD(4) - t238) * t210, t141 * t206 + t186 * t320, t103 * t141 + t365 * t186 + t398 * t205 + (t11 + (t145 * t213 - t205 * t76) * qJD(4) - t229 * t209) * t206 + (t38 * qJD(4) + t145 * t284 + t32 * t205 + t213 * t224 + t318 * t76) * t210, -t104 * t141 - t366 * t186 + t398 * t209 + (t239 + (t147 * t213 - t209 * t76) * qJD(4) + t229 * t205) * t206 + (-qJD(4) * t39 + t147 * t284 + t32 * t209 + t213 * t65 - t319 * t76) * t210, t104 * t242 + t103 * t65 - t365 * t147 - t366 * t145 + (t374 + (qJD(2) * t104 + t39) * t205) * t321 + (qJD(5) * t251 - t11 * t209 + t205 * t239) * t210 + t297, -t239 * t104 + t11 * t103 - g(1) * t271 - g(2) * t272 - t260 + t366 * t39 + t365 * t38 + (-t210 * t32 + t321 * t76) * t213 + (-g(3) * t256 + t329 * t76) * t350 + t396 * t154, t116 * t18 + t246 * t41, t114 * t18 - t116 * t226 + t246 * t43 + t41 * t69, -t116 * t138 - t174 * t41 - t18 * t206 - t246 * t320, -t114 * t226 + t43 * t69, -t114 * t138 - t174 * t43 + t206 * t226 - t320 * t69, t138 * t206 + t174 * t320, t29 * t138 + t2 * t206 + t12 * t320 + t99 * t69 - t143 * t226 + t20 * t114 + t61 * t43 - g(1) * (-t126 * t195 + t127 * t354) - g(2) * (-t124 * t195 + t125 * t354) + t389 * t174 + (t69 * t293 - g(3) * (t195 * t211 + t196 * t344)) * t202, -t30 * t138 - t1 * t206 - t13 * t320 - t99 * t246 - t143 * t18 - t20 * t116 - t61 * t41 - g(1) * (-t126 * t196 - t127 * t355) - g(2) * (-t124 * t196 - t125 * t355) - t390 * t174 + (-t246 * t293 - g(3) * (-t195 * t344 + t196 * t211)) * t202, -t1 * t114 + t116 * t2 + t12 * t41 - t13 * t43 + t18 * t29 + t226 * t30 + t246 * t389 - t390 * t69 + t297, t1 * t30 + t2 * t29 + t20 * t143 + t61 * t99 - g(1) * (-t126 * t388 + t271) - g(2) * (-t124 * t388 + t272) - t260 + t390 * t13 + t389 * t12 + (-g(3) * pkin(5) * t345 + (-g(3) * t245 + t329 * t61) * t207) * t202 + t396 * (qJ(3) + t245); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t215, t169 + t225 - t327 - t363, 0, 0, 0, 0, 0, 0, t206 * t332 + t193, t210 * t332 - t308, -t263, -t327 + t407, 0, 0, 0, 0, 0, 0, t210 * t242 + (-t347 + (t145 + t289) * qJD(4)) * t206 - t395 * t186, t210 * t65 + (t323 - t339) * t206 + t227 * t186 (t242 * t209 + (t209 * t277 - t65) * t205) * t206 + t395 * t147 + t227 * t145, t252 * qJD(2) + (-qJD(4) * t251 - t32) * t210 + (qJD(4) * t76 + t222) * t206 - t398, 0, 0, 0, 0, 0, 0, -t113 * t138 - t174 * t368 + t210 * t226 + t321 * t69, t115 * t138 + t174 * t367 + t210 * t18 - t246 * t321, -t113 * t18 - t115 * t226 - t246 * t368 + t367 * t69, -t1 * t115 - t113 * t2 - t12 * t368 - t13 * t367 - t20 * t210 + t321 * t61 - t398; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, -t334 * t215, t305, -t298, -t306, qJDD(4), qJD(4) * t93 - t153 * t325 - t236 - t262, t153 * t326 + (t92 + t177) * qJD(4) + t235 + t301, 0, 0, t186 * t358 - t371 (-t65 - t361) * t209 + (-t147 * qJD(5) + (-t147 + t322) * t326 + t242) * t205 (-t147 * t210 + t186 * t343) * qJD(2) + t238, t145 * t356 + t220 (t145 * t210 - t206 * t356) * qJD(2) + t237, -t186 * t325, -pkin(4) * t296 - t59 * t186 - t38 * t325 - t93 * t145 + (-t387 + t76 * qJD(5) + (t76 + t378) * t326) * t205 + (-t223 + t362) * t209, t39 * t325 + pkin(4) * t65 - t147 * t93 + t186 * t60 + (t186 * t76 - t387) * t209 + t223 * t205, t60 * t145 + t59 * t147 + t406 * t209 + t399 * t205 + (-t371 + t220 + (t358 + t360) * qJD(5)) * pkin(9) - t235, -t38 * t59 - t39 * t60 - t76 * t93 + t231 * pkin(4) + (t222 - t235) * pkin(9), -t18 * t149 - t246 * t369, t18 * t148 + t149 * t226 + t246 * t370 - t369 * t69, t149 * t138 + t174 * t369 + t246 * t325, -t148 * t226 + t370 * t69, -t148 * t138 - t174 * t370 + t325 * t69, -t174 * t325, -t12 * t325 + t138 * t96 + t148 * t20 + t174 * t379 + t190 * t226 - t196 * t236 + t258 * t69 + t370 * t61, t13 * t325 - t138 * t97 + t149 * t20 - t174 * t380 + t18 * t190 + t195 * t236 - t246 * t258 + t369 * t61, -t1 * t148 - t12 * t369 - t13 * t370 - t149 * t2 + t18 * t96 + t226 * t97 + t246 * t379 - t380 * t69 - t235, t1 * t97 + t2 * t96 - t20 * t190 - g(1) * (t190 * t81 + t392 * t82) - g(2) * (t190 * t83 - t392 * t84) - g(3) * (-t130 * t190 + t131 * t392) + t258 * t61 + t380 * t13 + t379 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t359, -t145 ^ 2 + t147 ^ 2, t361 - t65, -t359, t147 * t186 + t224, t141, -t76 * t147 + t397 - t399, t76 * t145 - g(1) * (-t127 * t205 - t209 * t82) - g(2) * (-t125 * t205 + t209 * t84) + g(3) * t88 - t406, 0, 0, -t382, t404, t403, t382, t400, t138, -t14 * t174 + (t138 * t208 - t147 * t69 - t174 * t316) * pkin(5) + t401, t15 * t174 + (-t138 * t204 + t147 * t246 - t174 * t315) * pkin(5) + t402, -t12 * t69 - t13 * t246 - t14 * t246 + t15 * t69 + (t18 * t208 + t226 * t204 + (-t204 * t246 - t208 * t69) * qJD(6)) * pkin(5), -t12 * t14 - t13 * t15 + (t1 * t204 + t2 * t208 - t61 * t147 + (-t12 * t204 + t13 * t208) * qJD(6) + t397) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t382, t404, t403, t382, t400, t138, t13 * t174 + t401, t12 * t174 + t402, 0, 0;];
tau_reg  = t3;
