% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPPR8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPRPPR8_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:00:00
% EndTime: 2019-03-09 03:00:03
% DurationCPUTime: 1.11s
% Computational Cost: add. (807->128), mult. (1412->209), div. (0->0), fcn. (982->4), ass. (0->86)
t44 = sin(qJ(3));
t47 = -pkin(3) - pkin(4);
t95 = t44 * t47;
t31 = t44 * qJD(4);
t46 = cos(qJ(3));
t81 = t46 * qJ(4);
t55 = -t44 * pkin(3) + t81;
t15 = t55 * qJD(3) + t31;
t37 = -pkin(8) + t47;
t64 = t37 * t44;
t66 = -qJ(2) + t81;
t94 = t46 * pkin(5) + t64 + t66;
t42 = qJ(4) + pkin(5);
t63 = t37 * t46;
t54 = -t42 * t44 + t63;
t87 = t42 * t46;
t93 = t87 + t64;
t43 = sin(qJ(6));
t38 = t43 ^ 2;
t45 = cos(qJ(6));
t40 = t45 ^ 2;
t86 = t38 - t40;
t67 = qJD(6) * t86;
t39 = t44 ^ 2;
t41 = t46 ^ 2;
t26 = (t39 - t41) * qJD(3);
t33 = t46 * qJD(3);
t48 = -pkin(1) - pkin(7);
t80 = qJ(5) + t48;
t12 = t44 * qJD(5) + t80 * t33;
t92 = t54 * qJD(6) - t12;
t24 = t80 * t46;
t34 = qJD(6) * t43;
t32 = t44 * qJD(3);
t30 = t48 * t32;
t65 = t46 * qJD(5) - t30;
t51 = qJ(5) * t32 - t65;
t60 = t46 * qJD(4) - qJD(2);
t79 = qJD(6) * t45;
t2 = -t24 * t34 - t45 * t51 - t43 * (t54 * qJD(3) + t60) - (-qJ(2) + t93) * t79;
t6 = -t45 * t24 + t94 * t43;
t3 = t43 * t65 + t45 * t60 - qJD(6) * t6 + (t45 * t63 + (-t43 * qJ(5) - t45 * t42) * t44) * qJD(3);
t5 = t43 * t24 + t94 * t45;
t56 = t43 * t5 - t45 * t6;
t91 = t56 * qJD(6) + t2 * t43 - t3 * t45;
t57 = t43 * t6 + t45 * t5;
t1 = -t57 * qJD(6) - t2 * t45 - t3 * t43;
t90 = 0.2e1 * qJD(2);
t49 = 0.2e1 * qJD(4);
t23 = t80 * t44;
t89 = t23 * t12;
t85 = t38 + t40;
t83 = t39 + t41;
t82 = qJ(4) * t44;
t78 = qJD(6) * t46;
t77 = t23 * qJD(3);
t76 = t23 * qJD(4);
t75 = qJ(2) * qJD(3);
t74 = t43 * t78;
t73 = t45 * t78;
t72 = t43 * t79;
t71 = t45 * t33;
t70 = t44 * t33;
t69 = t48 * t33;
t68 = t85 * t44;
t27 = 0.2e1 * t70;
t62 = t43 * t71;
t61 = t39 * t72;
t50 = t93 * qJD(3) - qJD(6) * t23 + t31;
t36 = qJ(2) * t90;
t35 = qJ(4) * t49;
t28 = -0.2e1 * t70;
t25 = qJ(2) - t55;
t22 = 0.2e1 * t26;
t21 = t66 + t95;
t20 = -t43 * t32 + t73;
t19 = -t43 * t33 - t44 * t79;
t18 = t45 * t32 + t74;
t17 = -t44 * t34 + t71;
t16 = qJD(3) * t68;
t14 = (pkin(3) * t46 + t82) * qJD(3) - t60;
t13 = t31 + (t81 + t95) * qJD(3);
t10 = (t47 * t46 - t82) * qJD(3) + t60;
t9 = t44 * t67 - t62;
t4 = t65 * t46 + t12 * t44 + (t23 * t46 + (-t46 * qJ(5) - t24) * t44) * qJD(3);
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, t36, t28, t22, 0, t27, 0, 0, 0.2e1 * qJD(2) * t44 + 0.2e1 * t46 * t75, 0.2e1 * qJD(2) * t46 - 0.2e1 * t44 * t75, 0, t36, t28, 0, -0.2e1 * t26, 0, 0, t27, 0.2e1 * t14 * t44 + 0.2e1 * t25 * t33, 0, -0.2e1 * t14 * t46 + 0.2e1 * t25 * t32, 0.2e1 * t25 * t14, t27, t22, 0, t28, 0, 0, 0.2e1 * t10 * t46 - 0.2e1 * t21 * t32, 0.2e1 * t10 * t44 + 0.2e1 * t21 * t33, 0.2e1 * t4, 0.2e1 * t21 * t10 - 0.2e1 * t24 * t51 + 0.2e1 * t89, 0.2e1 * t40 * t70 - 0.2e1 * t61, 0.2e1 * t39 * t67 - 0.4e1 * t44 * t62, -0.2e1 * t45 * t26 - 0.2e1 * t44 * t74, 0.2e1 * t38 * t70 + 0.2e1 * t61, 0.2e1 * t43 * t26 - 0.2e1 * t44 * t73, t28, 0.2e1 * (t43 * t77 + t3) * t46 + 0.2e1 * (-qJD(3) * t5 + t12 * t43 + t23 * t79) * t44, 0.2e1 * (t45 * t77 + t2) * t46 + 0.2e1 * (qJD(3) * t6 + t12 * t45 - t23 * t34) * t44, -0.2e1 * t57 * t33 + 0.2e1 * t91 * t44, -0.2e1 * t6 * t2 + 0.2e1 * t5 * t3 + 0.2e1 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, t83 * t79, -t83 * t34, 0 (-t56 * qJD(3) + t12) * t44 + (-t1 + t77) * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (0.1e1 - t85) * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, -t33, 0, -t30, -t69, 0, 0, 0, -t32, 0, 0, t33, 0, -t30, -t15, t69, t15 * t48, 0, 0, -t33, 0, -t32, 0, t12, t51, t13, t12 * qJ(4) + t51 * t47 + t76, t9, t86 * t33 + 0.4e1 * t44 * t72, -t20, -t9, t18, 0, t50 * t43 - t92 * t45, t92 * t43 + t50 * t45, -t1, t1 * t37 + t12 * t42 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t33, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, t33, t15, 0, 0, 0, 0, 0, 0, t33, t32, 0, t13, 0, 0, 0, 0, 0, 0, t17, t19, -t16, t31 + (t37 * t68 + t87) * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, t35, 0, 0, 0, 0, 0, 0, t49, 0, 0, t35, 0.2e1 * t72, -0.2e1 * t67, 0, -0.2e1 * t72, 0, 0, 0.2e1 * qJD(4) * t45 - 0.2e1 * t42 * t34, -0.2e1 * qJD(4) * t43 - 0.2e1 * t42 * t79, 0, t42 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, t32, t51, 0, 0, 0, 0, 0, 0, -t20, t18, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t33, 0, t10, 0, 0, 0, 0, 0, 0, -t18, -t20, -t85 * t33, -t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, t19, -t32, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, 0, t34, 0, -t37 * t79, t37 * t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t79, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
