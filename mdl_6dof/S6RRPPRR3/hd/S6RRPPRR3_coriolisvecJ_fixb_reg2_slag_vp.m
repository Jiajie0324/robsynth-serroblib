% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPRR3_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR3_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR3_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPPRR3_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:58:38
% EndTime: 2019-03-09 08:59:07
% DurationCPUTime: 13.51s
% Computational Cost: add. (22303->589), mult. (66995->805), div. (0->0), fcn. (55145->12), ass. (0->284)
t266 = sin(qJ(6));
t269 = cos(qJ(6));
t394 = cos(qJ(5));
t265 = cos(pkin(6));
t336 = qJD(1) * t265;
t248 = qJD(2) + t336;
t264 = cos(pkin(12));
t262 = sin(pkin(11));
t268 = sin(qJ(2));
t270 = cos(qJ(2));
t369 = cos(pkin(11));
t285 = t262 * t270 + t268 * t369;
t263 = sin(pkin(6));
t337 = qJD(1) * t263;
t217 = t285 * t337;
t261 = sin(pkin(12));
t348 = t261 * t217;
t413 = t248 * t264 - t348;
t160 = t394 * t413;
t173 = -t217 * t264 - t248 * t261;
t267 = sin(qJ(5));
t121 = t267 * t173 + t160;
t421 = qJD(6) - t121;
t313 = t421 ^ 2;
t346 = t263 * t270;
t302 = t369 * t346;
t241 = qJD(1) * t302;
t335 = qJD(2) * t263;
t324 = t268 * t335;
t304 = qJD(1) * t324;
t208 = qJD(2) * t241 - t262 * t304;
t236 = t261 * t394 + t267 * t264;
t280 = t236 * t208;
t414 = -t173 * t394 + t267 * t413;
t416 = qJD(5) * t414;
t80 = t280 + t416;
t425 = -t266 * t313 + t269 * t80;
t325 = t268 * t337;
t213 = t262 * t325 - t241;
t251 = t265 * t270 * pkin(1);
t245 = qJD(1) * t251;
t390 = pkin(8) + qJ(3);
t322 = t390 * t268;
t305 = t263 * t322;
t196 = -qJD(1) * t305 + t245;
t177 = pkin(2) * t248 + t196;
t393 = pkin(1) * t268;
t250 = t265 * t393;
t396 = t346 * t390 + t250;
t197 = t396 * qJD(1);
t318 = t369 * t197;
t130 = t262 * t177 + t318;
t125 = qJ(4) * t248 + t130;
t237 = (-pkin(2) * t270 - pkin(1)) * t263;
t338 = qJD(1) * t237;
t228 = qJD(3) + t338;
t137 = pkin(3) * t213 - qJ(4) * t217 + t228;
t75 = -t125 * t261 + t264 * t137;
t53 = pkin(4) * t213 + pkin(9) * t173 + t75;
t76 = t264 * t125 + t261 * t137;
t59 = pkin(9) * t413 + t76;
t26 = t267 * t53 + t394 * t59;
t283 = qJD(5) + t213;
t22 = pkin(10) * t283 + t26;
t184 = t262 * t197;
t129 = t177 * t369 - t184;
t124 = -t248 * pkin(3) + qJD(4) - t129;
t90 = -pkin(4) * t413 + t124;
t41 = -pkin(5) * t121 - pkin(10) * t414 + t90;
t14 = t22 * t269 + t266 * t41;
t326 = t394 * t264;
t362 = t208 * t261;
t79 = t267 * (-qJD(5) * t173 + t362) - qJD(5) * t160 - t208 * t326;
t243 = qJD(2) * t245;
t277 = (-qJD(2) * t322 + qJD(3) * t270) * t263;
t164 = qJD(1) * t277 + t243;
t347 = t263 * t268;
t180 = -qJD(2) * t396 - qJD(3) * t347;
t165 = t180 * qJD(1);
t106 = t164 * t262 - t369 * t165;
t91 = pkin(4) * t362 + t106;
t24 = pkin(5) * t80 + pkin(10) * t79 + t91;
t222 = t285 * t263;
t216 = qJD(2) * t222;
t207 = qJD(1) * t216;
t323 = qJD(5) * t394;
t334 = qJD(5) * t267;
t345 = t264 * t208;
t242 = pkin(2) * t304;
t108 = pkin(3) * t207 - qJ(4) * t208 - qJD(4) * t217 + t242;
t107 = t369 * t164 + t262 * t165;
t99 = qJD(4) * t248 + t107;
t57 = t264 * t108 - t261 * t99;
t46 = pkin(4) * t207 - pkin(9) * t345 + t57;
t58 = t261 * t108 + t264 * t99;
t49 = -pkin(9) * t362 + t58;
t289 = -t267 * t46 - t53 * t323 + t334 * t59 - t394 * t49;
t5 = pkin(10) * t207 - t289;
t2 = -qJD(6) * t14 + t269 * t24 - t266 * t5;
t424 = t14 * t421 + t2;
t299 = t22 * t266 - t269 * t41;
t1 = -qJD(6) * t299 + t24 * t266 + t269 * t5;
t412 = t299 * t421 + t1;
t423 = t121 ^ 2;
t422 = t121 * t283;
t420 = t414 ^ 2;
t278 = t269 * t283;
t93 = t266 * t414 - t278;
t419 = t414 * t93;
t95 = t266 * t283 + t269 * t414;
t418 = t414 * t95;
t417 = t213 * t414;
t286 = -t267 * t261 + t326;
t342 = -t286 * t213 + t261 * t334 - t264 * t323;
t341 = t283 * t236;
t415 = t213 * t413 + t345;
t253 = pkin(2) * t262 + qJ(4);
t389 = pkin(9) + t253;
t231 = t389 * t261;
t232 = t389 * t264;
t287 = -t231 * t394 - t267 * t232;
t392 = pkin(9) * t264;
t141 = t196 * t369 - t184;
t310 = pkin(2) * t325;
t150 = pkin(3) * t217 + qJ(4) * t213 + t310;
t86 = -t141 * t261 + t264 * t150;
t66 = pkin(4) * t217 + t213 * t392 + t86;
t358 = t213 * t261;
t87 = t264 * t141 + t261 * t150;
t74 = pkin(9) * t358 + t87;
t372 = qJD(4) * t286 + qJD(5) * t287 - t267 * t66 - t394 * t74;
t411 = -pkin(10) * t217 + t372;
t140 = t196 * t262 + t318;
t105 = -pkin(4) * t358 + t140;
t410 = -pkin(5) * t341 - pkin(10) * t342 + t105;
t315 = t217 * t266 + t269 * t342;
t407 = -t173 * t213 + t362;
t406 = t236 * t207 - t283 * t342;
t257 = t263 ^ 2;
t329 = qJD(1) * qJD(2);
t405 = -0.2e1 * t257 * t329;
t316 = -t269 * t217 + t266 * t342;
t403 = t316 * t95;
t169 = -t267 * t231 + t232 * t394;
t370 = qJD(4) * t236 + qJD(5) * t169 - t267 * t74 + t394 * t66;
t402 = t217 * t413;
t221 = t262 * t347 - t302;
t155 = t207 * t221;
t401 = t213 * t216 + t155;
t368 = qJD(6) * t95;
t40 = -t269 * t207 - t266 * t79 + t368;
t400 = t286 * t40 - t341 * t93;
t319 = t267 * t49 - t394 * t46;
t8 = -qJD(5) * t26 - t319;
t333 = qJD(6) * t266;
t281 = t236 * t333 + t315;
t351 = t236 * t269;
t399 = -t281 * t421 + t80 * t351;
t398 = -t286 * t79 - t341 * t414;
t210 = t213 ^ 2;
t397 = -t207 * t261 - t210 * t264;
t188 = t222 * t264 + t261 * t265;
t195 = pkin(2) * t265 + t251 - t305;
t340 = pkin(8) * t346 + t250;
t211 = qJ(3) * t346 + t340;
t147 = t262 * t195 + t369 * t211;
t138 = qJ(4) * t265 + t147;
t153 = pkin(3) * t221 - qJ(4) * t222 + t237;
t88 = -t138 * t261 + t264 * t153;
t65 = pkin(4) * t221 - pkin(9) * t188 + t88;
t187 = t222 * t261 - t265 * t264;
t89 = t264 * t138 + t261 * t153;
t72 = -pkin(9) * t187 + t89;
t385 = t267 * t65 + t394 * t72;
t215 = -qJD(2) * t302 + t262 * t324;
t246 = qJD(2) * t251;
t179 = t246 + t277;
t128 = t369 * t179 + t262 * t180;
t116 = qJD(4) * t265 + t128;
t309 = pkin(2) * t324;
t126 = pkin(3) * t216 + qJ(4) * t215 - qJD(4) * t222 + t309;
t67 = -t116 * t261 + t264 * t126;
t52 = pkin(4) * t216 + t215 * t392 + t67;
t357 = t215 * t261;
t68 = t264 * t116 + t261 * t126;
t56 = pkin(9) * t357 + t68;
t12 = -qJD(5) * t385 - t267 * t56 + t394 * t52;
t395 = t217 ^ 2;
t391 = t95 * t93;
t255 = -pkin(2) * t369 - pkin(3);
t239 = -t264 * pkin(4) + t255;
t162 = -pkin(5) * t286 - t236 * pkin(10) + t239;
t112 = t162 * t266 + t169 * t269;
t388 = qJD(6) * t112 + t266 * t411 + t269 * t410;
t111 = t162 * t269 - t169 * t266;
t387 = -qJD(6) * t111 + t266 * t410 - t269 * t411;
t332 = qJD(6) * t269;
t386 = -t266 * t40 - t93 * t332;
t131 = t187 * t394 + t188 * t267;
t382 = t131 * t80;
t379 = t286 * t80;
t39 = -qJD(6) * t278 - t266 * t207 + t269 * t79 + t333 * t414;
t378 = t266 * t39;
t377 = t266 * t80;
t376 = t266 * t93;
t375 = t266 * t95;
t374 = t269 * t93;
t373 = t269 * t95;
t371 = t217 * pkin(5) + t370;
t367 = t414 * t121;
t366 = t414 * t217;
t365 = t173 * t217;
t364 = t173 * t261;
t360 = t213 * t217;
t359 = t213 * t248;
t356 = t217 * t121;
t355 = t217 * t248;
t352 = t236 * t266;
t349 = t257 * qJD(1) ^ 2;
t343 = t264 * t207 - t210 * t261;
t339 = t268 ^ 2 - t270 ^ 2;
t331 = qJD(2) - t248;
t327 = t270 * t349;
t320 = t270 * t329;
t127 = t179 * t262 - t369 * t180;
t312 = t421 * t269;
t311 = t248 + t336;
t308 = t268 * t327;
t307 = t315 * t93 - t40 * t351;
t306 = t39 * t286 + t341 * t95;
t303 = -t121 * t342 - t236 * t80;
t301 = pkin(1) * t405;
t96 = -pkin(4) * t357 + t127;
t298 = -t261 * t75 + t264 * t76;
t28 = pkin(10) * t221 + t385;
t146 = t195 * t369 - t262 * t211;
t139 = -t265 * pkin(3) - t146;
t102 = t187 * pkin(4) + t139;
t132 = -t267 * t187 + t188 * t394;
t47 = t131 * pkin(5) - t132 * pkin(10) + t102;
t16 = t266 * t47 + t269 * t28;
t15 = -t266 * t28 + t269 * t47;
t297 = t264 * t413;
t296 = -t124 * t215 + t139 * t208;
t101 = t132 * t269 + t221 * t266;
t295 = t208 * t221 - t213 * t215;
t294 = t257 * t268 * t320;
t25 = -t267 * t59 + t394 * t53;
t32 = -t267 * t72 + t394 * t65;
t290 = -t269 * t39 - t333 * t95;
t11 = t267 * t52 + t65 * t323 - t334 * t72 + t394 * t56;
t21 = -pkin(5) * t283 - t25;
t288 = -pkin(10) * t80 + t21 * t421;
t219 = -pkin(8) * t304 + t243;
t282 = t236 * t332 - t316;
t227 = t340 * qJD(2);
t279 = t297 + t364;
t275 = -t253 * t207 + t255 * t208 + (-qJD(4) + t124) * t213;
t274 = t286 * t207 - t283 * t341;
t273 = t1 * t269 - t2 * t266 + (-t14 * t266 + t269 * t299) * qJD(6);
t272 = -t282 * t421 - t352 * t80;
t258 = t264 ^ 2;
t256 = t261 ^ 2;
t233 = -pkin(8) * t347 + t251;
t226 = -pkin(8) * t324 + t246;
t225 = t340 * qJD(1);
t224 = -pkin(8) * t325 + t245;
t220 = qJD(1) * t227;
t100 = t132 * t266 - t221 * t269;
t85 = qJD(5) * t132 - t215 * t236;
t84 = t187 * t323 + t215 * t326 + (qJD(5) * t188 - t357) * t267;
t69 = pkin(5) * t414 - pkin(10) * t121;
t43 = qJD(6) * t101 - t216 * t269 - t266 * t84;
t42 = t132 * t333 - t216 * t266 - t221 * t332 + t269 * t84;
t29 = pkin(5) * t85 + pkin(10) * t84 + t96;
t27 = -t221 * pkin(5) - t32;
t18 = t25 * t269 + t266 * t69;
t17 = -t25 * t266 + t269 * t69;
t10 = -t216 * pkin(5) - t12;
t9 = pkin(10) * t216 + t11;
t6 = -t207 * pkin(5) - t8;
t4 = -qJD(6) * t16 - t266 * t9 + t269 * t29;
t3 = qJD(6) * t15 + t266 * t29 + t269 * t9;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t294, t339 * t405, t311 * t270 * t335, -0.2e1 * t294, -t311 * t324, 0, -t220 * t265 - t227 * t248 + t268 * t301, -t219 * t265 - t226 * t248 + t270 * t301 (t219 * t270 + t220 * t268 + (-t224 * t270 - t225 * t268) * qJD(2) + (t226 * t270 + t227 * t268 + (-t233 * t270 - t268 * t340) * qJD(2)) * qJD(1)) * t263, t219 * t340 - t220 * t233 - t224 * t227 + t225 * t226, t208 * t222 - t215 * t217, -t207 * t222 - t216 * t217 - t295, t208 * t265 - t215 * t248, t401, -t207 * t265 - t216 * t248, 0, -t106 * t265 - t127 * t248 + t207 * t237 + t216 * t228 + (qJD(1) * t221 + t213) * t309, -t107 * t265 - t128 * t248 + t208 * t237 - t215 * t228 + (qJD(1) * t222 + t217) * t309, t106 * t222 - t107 * t221 + t127 * t217 - t128 * t213 + t129 * t215 - t130 * t216 - t146 * t208 - t147 * t207, -t106 * t146 + t107 * t147 - t127 * t129 + t128 * t130 + (t228 + t338) * t309 (t173 * t215 + t188 * t208) * t264, -t279 * t215 + (-t187 * t264 - t188 * t261) * t208, -t173 * t216 + t188 * t207 + t264 * t295 (t208 * t187 + t215 * t413) * t261, -t187 * t207 + t216 * t413 - t261 * t295, t401, t106 * t187 - t127 * t413 + t88 * t207 + t67 * t213 + t75 * t216 + t57 * t221 + t261 * t296, t106 * t188 - t127 * t173 - t207 * t89 - t213 * t68 - t216 * t76 - t221 * t58 + t264 * t296, t68 * t413 - t58 * t187 + t67 * t173 - t57 * t188 + (t261 * t76 + t264 * t75) * t215 + (-t261 * t89 - t264 * t88) * t208, t106 * t139 + t124 * t127 + t57 * t88 + t58 * t89 + t67 * t75 + t68 * t76, -t132 * t79 - t414 * t84, -t121 * t84 + t131 * t79 - t132 * t80 - t414 * t85, t132 * t207 + t216 * t414 - t79 * t221 - t283 * t84, -t121 * t85 + t382, t121 * t216 - t131 * t207 - t80 * t221 - t283 * t85, t216 * t283 + t155, t102 * t80 + t12 * t283 - t121 * t96 + t91 * t131 + t32 * t207 + t25 * t216 + t8 * t221 + t90 * t85, -t102 * t79 - t11 * t283 + t91 * t132 - t207 * t385 - t26 * t216 + t221 * t289 + t414 * t96 - t90 * t84, t11 * t121 - t12 * t414 + t131 * t289 - t132 * t8 + t25 * t84 - t26 * t85 + t32 * t79 - t385 * t80, t102 * t91 + t11 * t26 + t12 * t25 - t289 * t385 + t32 * t8 + t90 * t96, -t101 * t39 - t42 * t95, t100 * t39 - t101 * t40 + t42 * t93 - t43 * t95, t101 * t80 - t131 * t39 - t42 * t421 + t85 * t95, t100 * t40 + t43 * t93, -t100 * t80 - t131 * t40 - t421 * t43 - t85 * t93, t421 * t85 + t382, t10 * t93 + t100 * t6 + t131 * t2 + t15 * t80 + t21 * t43 + t27 * t40 - t299 * t85 + t4 * t421, -t1 * t131 + t10 * t95 + t101 * t6 - t14 * t85 - t16 * t80 - t21 * t42 - t27 * t39 - t3 * t421, -t1 * t100 - t101 * t2 - t14 * t43 + t15 * t39 - t16 * t40 - t299 * t42 - t3 * t93 - t4 * t95, t1 * t16 + t10 * t21 + t14 * t3 + t15 * t2 + t27 * t6 - t299 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t308, t339 * t349, t331 * t270 * t337, t308, -t331 * t325, 0, -pkin(8) * t263 * t320 + t225 * t248 + (-t265 * t329 + t349) * t393, pkin(1) * t327 + t224 * t248 - t219, 0, 0, t360, -t210 + t395, t208 + t359, -t360, -qJD(2) * t217 + t355, 0, t140 * t248 - t213 * t310 - t217 * t228 - t106, t141 * t248 + t213 * t228 - t217 * t310 - t107 (t130 - t140) * t217 + (-t129 + t141) * t213 + (-t207 * t262 - t208 * t369) * pkin(2), t129 * t140 - t130 * t141 + (-t106 * t369 + t107 * t262 - t228 * t325) * pkin(2), t407 * t264, t279 * t213 + (-t256 + t258) * t208, t365 - t397, -t415 * t261, t343 - t402, -t360, -t106 * t264 + t140 * t413 - t86 * t213 - t75 * t217 + t261 * t275, t106 * t261 + t140 * t173 + t213 * t87 + t217 * t76 + t264 * t275, -t86 * t173 + t87 * t348 + (qJD(4) * t413 - t75 * t213 - t87 * t248 + t58) * t264 + (-qJD(4) * t173 - t213 * t76 - t57) * t261, t106 * t255 - t124 * t140 - t75 * t86 - t76 * t87 + (-t57 * t261 + t58 * t264) * t253 + t298 * qJD(4), -t236 * t79 - t342 * t414, t303 + t398, -t366 + t406, -t121 * t341 - t379, t274 - t356, -t283 * t217, t105 * t121 + t207 * t287 - t25 * t217 + t239 * t80 - t283 * t370 - t286 * t91 + t341 * t90, -t105 * t414 - t169 * t207 + t26 * t217 + t91 * t236 - t239 * t79 - t283 * t372 - t342 * t90, t121 * t372 - t169 * t80 - t236 * t8 + t25 * t342 - t26 * t341 - t286 * t289 + t287 * t79 + t370 * t414, -t105 * t90 - t169 * t289 + t239 * t91 - t25 * t370 + t26 * t372 + t287 * t8, -t281 * t95 - t351 * t39, t403 + (t378 + (-t373 + t376) * qJD(6)) * t236 + t307, t306 + t399, t282 * t93 + t352 * t40, t272 + t400, t341 * t421 - t379, t111 * t80 - t2 * t286 + t21 * t282 - t287 * t40 - t299 * t341 + t352 * t6 + t371 * t93 - t388 * t421, t1 * t286 - t112 * t80 - t14 * t341 - t21 * t281 + t287 * t39 + t351 * t6 + t371 * t95 + t387 * t421, t111 * t39 - t112 * t40 + t388 * t95 + t387 * t93 + t316 * t14 - t315 * t299 + (-t1 * t266 - t2 * t269 + (-t14 * t269 - t266 * t299) * qJD(6)) * t236, t1 * t112 + t111 * t2 - t14 * t387 + t21 * t371 - t287 * t6 + t299 * t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207 + t355, t208 - t359, -t210 - t395, t129 * t217 + t130 * t213 + t242, 0, 0, 0, 0, 0, 0, t343 + t402, t365 + t397 (t297 - t364) * t213 + (-t256 - t258) * t208, -t124 * t217 + t213 * t298 + t261 * t58 + t264 * t57, 0, 0, 0, 0, 0, 0, t274 + t356, -t366 - t406, t303 - t398, -t217 * t90 - t236 * t289 - t25 * t341 - t26 * t342 + t286 * t8, 0, 0, 0, 0, 0, 0, t272 - t400, t306 - t399, -t403 + (-t378 + (t373 + t376) * qJD(6)) * t236 + t307, -t14 * t315 + t21 * t341 + t236 * t273 - t286 * t6 - t299 * t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t407, t415, -t173 ^ 2 - t413 ^ 2, -t173 * t75 - t413 * t76 + t106, 0, 0, 0, 0, 0, 0, t280 + 0.2e1 * t416 + t417, -t79 + t422, -t420 - t423, -t121 * t26 + t25 * t414 + t91, 0, 0, 0, 0, 0, 0, -t419 + t425, -t269 * t313 - t377 - t418 (t374 - t375) * t121 - t290 + t386, -t414 * t21 + t266 * t412 + t269 * t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, t420 - t423, -t79 - t422, t367, -t280 + t417, t207, t213 * t26 - t414 * t90 - t319, -t121 * t90 + t25 * t283 + t289, 0, 0, t312 * t95 - t378 -(-t374 - t375) * t121 + t290 + t386, t312 * t421 + t377 - t418, -t269 * t40 + t376 * t421, t419 + t425, -t421 * t414, -pkin(5) * t40 + t414 * t299 - t26 * t93 - t269 * t6 + (-pkin(10) * t332 - t17) * t421 + t288 * t266, pkin(5) * t39 + t414 * t14 - t26 * t95 + t266 * t6 + (pkin(10) * t333 + t18) * t421 + t288 * t269, t17 * t95 + t18 * t93 + ((-t40 + t368) * pkin(10) + t412) * t269 + ((qJD(6) * t93 - t39) * pkin(10) - t424) * t266, -pkin(5) * t6 + pkin(10) * t273 - t14 * t18 + t17 * t299 - t21 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t391, -t93 ^ 2 + t95 ^ 2, t421 * t93 - t39, -t391, t421 * t95 - t40, t80, -t21 * t95 + t424, t21 * t93 - t412, 0, 0;];
tauc_reg  = t7;
