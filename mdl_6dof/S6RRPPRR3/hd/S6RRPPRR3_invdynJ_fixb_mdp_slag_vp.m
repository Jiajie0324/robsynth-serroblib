% Calculate vector of inverse dynamics joint torques for
% S6RRPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta3,theta4]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPPRR3_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPPRR3_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR3_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR3_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR3_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR3_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPPRR3_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRPPRR3_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:59:04
% EndTime: 2019-03-09 08:59:29
% DurationCPUTime: 19.55s
% Computational Cost: add. (12047->680), mult. (34370->926), div. (0->0), fcn. (29126->16), ass. (0->308)
t688 = sin(pkin(11));
t694 = sin(qJ(2));
t698 = cos(qJ(2));
t834 = cos(pkin(11));
t652 = -t698 * t688 - t694 * t834;
t689 = sin(pkin(6));
t757 = t698 * t834;
t736 = qJD(1) * t757;
t786 = qJD(2) * t694;
t763 = t689 * t786;
t739 = qJD(1) * t763;
t579 = -t688 * t739 + (qJD(2) * t736 - qJDD(1) * t652) * t689;
t691 = cos(pkin(6));
t777 = qJDD(1) * t691;
t669 = qJDD(2) + t777;
t687 = sin(pkin(12));
t690 = cos(pkin(12));
t553 = t579 * t687 - t690 * t669;
t554 = t579 * t690 + t669 * t687;
t693 = sin(qJ(5));
t697 = cos(qJ(5));
t749 = t697 * t553 + t693 * t554;
t637 = t652 * t689;
t634 = qJD(1) * t637;
t788 = qJD(1) * t691;
t670 = qJD(2) + t788;
t596 = t634 * t690 - t670 * t687;
t807 = t687 * t634;
t855 = t670 * t690 + t807;
t859 = -t596 * t697 + t693 * t855;
t470 = qJD(5) * t859 + t749;
t468 = qJDD(6) + t470;
t696 = cos(qJ(6));
t464 = t696 * t468;
t692 = sin(qJ(6));
t581 = t697 * t855;
t526 = t596 * t693 + t581;
t519 = qJD(6) - t526;
t861 = t519 ^ 2;
t862 = -t861 * t692 + t464;
t787 = qJD(1) * t694;
t764 = t689 * t787;
t630 = t688 * t764 - t689 * t736;
t624 = qJD(5) + t630;
t860 = t526 * t624;
t649 = t687 * t693 - t697 * t690;
t792 = t624 * t649;
t651 = t687 * t697 + t690 * t693;
t791 = t624 * t651;
t801 = t691 * t694;
t672 = pkin(1) * t801;
t804 = t689 * t698;
t790 = pkin(8) * t804 + t672;
t680 = pkin(2) * t698 + pkin(1);
t730 = t680 * qJDD(1);
t774 = pkin(2) * t739 + qJDD(3);
t856 = t689 * t730 - t774;
t638 = t652 * t691;
t695 = sin(qJ(1));
t699 = cos(qJ(1));
t800 = t694 * t688;
t716 = t757 - t800;
t586 = -t638 * t699 + t695 * t716;
t684 = pkin(12) + qJ(5);
t681 = sin(t684);
t682 = cos(t684);
t803 = t689 * t699;
t567 = t586 * t682 - t681 * t803;
t705 = t691 * t716;
t585 = t695 * t652 + t699 * t705;
t854 = t567 * t692 + t585 * t696;
t853 = t567 * t696 - t585 * t692;
t840 = pkin(1) * t691;
t673 = t698 * t840;
t836 = pkin(8) + qJ(3);
t761 = t836 * t694;
t740 = t689 * t761;
t613 = pkin(2) * t691 + t673 - t740;
t626 = qJ(3) * t804 + t790;
t563 = t688 * t613 + t834 * t626;
t551 = qJ(4) * t691 + t563;
t738 = t689 * t757;
t636 = t689 * t800 - t738;
t729 = pkin(3) * t636 + qJ(4) * t637;
t737 = t680 * t689;
t574 = -t737 + t729;
t503 = -t551 * t687 + t690 * t574;
t611 = -t637 * t690 + t687 * t691;
t479 = pkin(4) * t636 - pkin(9) * t611 + t503;
t504 = t690 * t551 + t687 * t574;
t610 = -t637 * t687 - t691 * t690;
t488 = -pkin(9) * t610 + t504;
t851 = t693 * t479 + t697 * t488;
t615 = (t804 * t836 + t672) * qJD(1);
t607 = t688 * t615;
t667 = qJD(1) * t673;
t614 = -qJD(1) * t740 + t667;
t557 = t614 * t834 - t607;
t571 = pkin(2) * t764 - pkin(3) * t634 + qJ(4) * t630;
t501 = -t557 * t687 + t690 * t571;
t480 = pkin(9) * t630 * t690 - pkin(4) * t634 + t501;
t502 = t690 * t557 + t687 * t571;
t818 = t630 * t687;
t490 = pkin(9) * t818 + t502;
t676 = pkin(2) * t688 + qJ(4);
t835 = pkin(9) + t676;
t647 = t835 * t687;
t648 = t835 * t690;
t718 = -t647 * t697 - t648 * t693;
t850 = qJD(4) * t649 - qJD(5) * t718 + t693 * t480 + t697 * t490;
t592 = -t647 * t693 + t648 * t697;
t849 = -qJD(4) * t651 - qJD(5) * t592 - t480 * t697 + t490 * t693;
t541 = -t610 * t693 + t611 * t697;
t629 = t636 * t696;
t848 = -t541 * t692 + t629;
t508 = t624 * t692 + t696 * t859;
t784 = qJD(5) * t693;
t469 = qJD(5) * t581 - t693 * t553 + t697 * t554 + t596 * t784;
t703 = qJD(2) * t652;
t776 = qJDD(1) * t694;
t578 = -qJDD(1) * t738 + (-qJD(1) * t703 + t688 * t776) * t689;
t577 = qJDD(5) + t578;
t752 = t469 * t692 - t696 * t577;
t450 = qJD(6) * t508 + t752;
t824 = t859 * t692;
t506 = -t696 * t624 + t824;
t847 = t450 * t649 + t506 * t791;
t600 = pkin(2) * t670 + t614;
t756 = t834 * t615;
t537 = t688 * t600 + t756;
t530 = qJ(4) * t670 + t537;
t640 = -qJD(1) * t737 + qJD(3);
t550 = pkin(3) * t630 + qJ(4) * t634 + t640;
t491 = -t530 * t687 + t690 * t550;
t471 = pkin(4) * t630 + pkin(9) * t596 + t491;
t492 = t690 * t530 + t687 * t550;
t475 = pkin(9) * t855 + t492;
t445 = t471 * t693 + t475 * t697;
t775 = qJDD(1) * t698;
t771 = pkin(1) * t775;
t666 = t691 * t771;
t772 = qJD(2) * t840;
t741 = qJD(1) * t772;
t758 = qJD(2) * t836;
t785 = qJD(3) * t694;
t535 = -t694 * t741 + pkin(2) * t669 + t666 + (-qJDD(1) * t761 + (-t698 * t758 - t785) * qJD(1)) * t689;
t708 = qJD(3) * t698 - t694 * t758;
t765 = qJDD(1) * t790 + t698 * t741;
t544 = (qJ(3) * t775 + qJD(1) * t708) * t689 + t765;
t496 = t688 * t535 + t834 * t544;
t482 = qJ(4) * t669 + qJD(4) * t670 + t496;
t497 = pkin(3) * t578 - qJ(4) * t579 + qJD(4) * t634 - t856;
t456 = -t482 * t687 + t690 * t497;
t443 = pkin(4) * t578 - pkin(9) * t554 + t456;
t457 = t690 * t482 + t687 * t497;
t448 = -pkin(9) * t553 + t457;
t753 = -t697 * t443 + t448 * t693;
t843 = qJD(5) * t445 + t753;
t432 = -pkin(5) * t577 + t843;
t587 = -t695 * t638 - t699 * t716;
t805 = t689 * t695;
t569 = t587 * t681 + t682 * t805;
t717 = t586 * t681 + t682 * t803;
t712 = g(1) * t569 - g(2) * t717 + g(3) * (t637 * t681 + t682 * t691);
t846 = t519 * (pkin(5) * t859 + pkin(10) * t519) + t432 + t712;
t750 = -t634 * t692 + t696 * t792;
t782 = qJD(6) * t692;
t709 = t651 * t782 + t750;
t845 = t651 * t464 - t519 * t709;
t844 = -t577 * t651 + t624 * t792;
t625 = t630 ^ 2;
t683 = t689 ^ 2;
t842 = 0.2e1 * t683;
t841 = pkin(1) * t683;
t797 = t695 * t698;
t798 = t694 * t699;
t645 = -t691 * t797 - t798;
t839 = g(1) * t645;
t838 = g(1) * t695;
t837 = g(3) * t698;
t833 = MDP(6) * t689;
t832 = MDP(7) * t689;
t781 = qJD(6) * t696;
t766 = t696 * t469 + t692 * t577 + t624 * t781;
t449 = -t782 * t859 + t766;
t831 = t449 * t692;
t829 = t468 * t692;
t828 = t506 * t519;
t827 = t508 * t519;
t826 = t526 * t634;
t825 = t859 * t634;
t821 = t578 * t687;
t633 = t716 * t689 * qJD(2);
t817 = t633 * t687;
t816 = t633 * t690;
t815 = t636 * t692;
t814 = t651 * t692;
t813 = t651 * t696;
t812 = t669 * MDP(8);
t810 = t682 * t692;
t809 = t682 * t696;
t700 = qJD(1) ^ 2;
t808 = t683 * t700;
t806 = t689 * t694;
t802 = t690 * t578;
t799 = t694 * t695;
t796 = t698 * t699;
t668 = t698 * t772;
t601 = t689 * t708 + t668;
t762 = t836 * t689;
t602 = -t689 * t785 + (-t698 * t762 - t672) * qJD(2);
t534 = t834 * t601 + t688 * t602;
t521 = qJD(4) * t691 + t534;
t632 = t689 * t703;
t532 = pkin(2) * t763 - pkin(3) * t632 - qJ(4) * t633 + qJD(4) * t637;
t484 = t690 * t521 + t687 * t532;
t793 = -pkin(5) * t634 - t849;
t685 = t694 ^ 2;
t789 = -t698 ^ 2 + t685;
t783 = qJD(5) * t697;
t780 = qJD(2) - t670;
t536 = t600 * t834 - t607;
t529 = -t670 * pkin(3) + qJD(4) - t536;
t779 = -qJD(4) + t529;
t778 = qJD(1) * qJD(2);
t773 = t694 * t841;
t770 = pkin(8) * t776;
t768 = t698 * t808;
t767 = t691 * t796;
t760 = t698 * t778;
t759 = g(2) * t803 - g(3) * t691;
t714 = t693 * t443 + t697 * t448 + t471 * t783 - t475 * t784;
t431 = pkin(10) * t577 + t714;
t495 = t535 * t834 - t688 * t544;
t486 = -t669 * pkin(3) + qJDD(4) - t495;
t462 = t553 * pkin(4) + t486;
t438 = t470 * pkin(5) - t469 * pkin(10) + t462;
t754 = -t692 * t431 + t696 * t438;
t751 = t696 * t634 + t692 * t792;
t483 = -t521 * t687 + t690 * t532;
t533 = t601 * t688 - t834 * t602;
t556 = t614 * t688 + t756;
t639 = pkin(2) * t801 - t762;
t747 = -t639 * t695 + t699 * t680;
t745 = t519 * t696;
t744 = t670 + t788;
t743 = qJD(1) * t780;
t742 = t669 + t777;
t679 = -pkin(2) * t834 - pkin(3);
t735 = g(1) * t699 + g(2) * t695;
t734 = t449 * t649 + t508 * t791;
t733 = -t649 * t577 - t624 * t791;
t511 = pkin(4) * t817 + t533;
t515 = -pkin(4) * t818 + t556;
t657 = -t690 * pkin(4) + t679;
t582 = t649 * pkin(5) - t651 * pkin(10) + t657;
t732 = -pkin(10) * t634 - qJD(6) * t582 + t850;
t731 = -pkin(5) * t791 - pkin(10) * t792 + qJD(6) * t592 + t515;
t562 = t613 * t834 - t688 * t626;
t728 = t696 * t431 + t692 * t438;
t442 = pkin(10) * t624 + t445;
t505 = -pkin(4) * t855 + t529;
t458 = -pkin(5) * t526 - pkin(10) * t859 + t505;
t436 = t442 * t696 + t458 * t692;
t727 = t442 * t692 - t458 * t696;
t452 = pkin(10) * t636 + t851;
t552 = -t691 * pkin(3) - t562;
t514 = t610 * pkin(4) + t552;
t540 = t697 * t610 + t611 * t693;
t461 = t540 * pkin(5) - t541 * pkin(10) + t514;
t726 = t452 * t696 + t461 * t692;
t725 = -t452 * t692 + t461 * t696;
t467 = -pkin(4) * t632 - pkin(9) * t816 + t483;
t474 = -pkin(9) * t817 + t484;
t724 = t467 * t697 - t474 * t693;
t444 = t471 * t697 - t475 * t693;
t723 = t479 * t697 - t488 * t693;
t720 = -t491 * t687 + t492 * t690;
t513 = t541 * t696 + t815;
t719 = -t639 * t699 - t680 * t695;
t713 = t693 * t467 + t697 * t474 + t479 * t783 - t488 * t784;
t588 = t652 * t699 - t695 * t705;
t711 = g(1) * t588 + g(2) * t585 - g(3) * t636;
t710 = t651 * t781 - t751;
t706 = t486 + t711;
t704 = t790 * t670;
t441 = -pkin(5) * t624 - t444;
t702 = -pkin(10) * t468 + (t441 + t444) * t519;
t701 = -t468 * t814 - t519 * t710;
t661 = pkin(2) * t767;
t646 = -t691 * t799 + t796;
t644 = -t691 * t798 - t797;
t643 = -t767 + t799;
t604 = -t637 * t682 + t681 * t691;
t570 = -t587 * t682 + t681 * t805;
t510 = t570 * t696 - t588 * t692;
t509 = -t570 * t692 - t588 * t696;
t500 = qJD(5) * t541 + t633 * t651;
t499 = -qJD(5) * t540 - t633 * t649;
t460 = qJD(6) * t513 + t499 * t692 + t632 * t696;
t459 = qJD(6) * t848 + t499 * t696 - t632 * t692;
t453 = pkin(5) * t500 - pkin(10) * t499 + t511;
t451 = -pkin(5) * t636 - t723;
t434 = pkin(5) * t632 + qJD(5) * t851 - t724;
t433 = -pkin(10) * t632 + t713;
t430 = -t436 * qJD(6) + t754;
t429 = -t727 * qJD(6) + t728;
t1 = [(qJDD(1) * t685 + 0.2e1 * t694 * t760) * t683 * MDP(4) + (-g(2) * t699 + t838) * MDP(2) + (t496 * t563 + t537 * t534 + t495 * t562 - t536 * t533 - g(1) * t719 - g(2) * t747 + (pkin(2) * t640 * t786 + t680 * t856) * t689) * MDP(12) + (-(-pkin(8) * t763 + t668) * t670 - t790 * t669 - (-pkin(8) * t739 + t765) * t691 - g(1) * t643 - g(2) * t645 + 0.2e1 * (-t760 - t776) * t841) * MDP(10) + (t694 * t775 - t778 * t789) * MDP(5) * t842 + (t698 * t742 - t744 * t786) * t832 + (qJD(2) * t698 * t744 + t694 * t742) * t833 + (-(qJD(6) * t725 + t433 * t696 + t453 * t692) * t519 - t726 * t468 - t429 * t540 - t436 * t500 + t434 * t508 + t451 * t449 + t432 * t513 + t441 * t459 - g(1) * t854 - g(2) * t509) * MDP(30) + (t724 * t624 + t723 * t577 - t753 * t636 - t444 * t632 - t511 * t526 + t514 * t470 + t462 * t540 + t505 * t500 + g(1) * t567 - g(2) * t570 + (-t445 * t636 - t624 * t851) * qJD(5)) * MDP(22) + (-t469 * t540 - t470 * t541 + t499 * t526 - t500 * t859) * MDP(18) + (-t470 * t636 - t500 * t624 - t526 * t632 - t540 * t577) * MDP(20) + ((-qJD(6) * t726 - t433 * t692 + t453 * t696) * t519 + t725 * t468 + t430 * t540 - t727 * t500 + t434 * t506 + t451 * t450 - t432 * t848 + t441 * t460 + g(1) * t853 - g(2) * t510) * MDP(29) + (-t450 * t540 - t460 * t519 + t468 * t848 - t500 * t506) * MDP(27) + (t449 * t848 - t450 * t513 - t459 * t506 - t460 * t508) * MDP(25) + (t484 * t855 - t504 * t553 - t457 * t610 + t483 * t596 - t503 * t554 - t456 * t611 - g(1) * t585 + g(2) * t588 + (-t491 * t690 - t492 * t687) * t633) * MDP(15) + (t483 * t630 + t503 * t578 + t456 * t636 - t491 * t632 - t533 * t855 + t552 * t553 + t486 * t610 + t529 * t817 - g(1) * (-t586 * t690 + t687 * t803) - g(2) * (-t587 * t690 + t687 * t805)) * MDP(13) + (t457 * t504 + t492 * t484 + t456 * t503 + t491 * t483 + t486 * t552 + t529 * t533 - g(1) * (-pkin(3) * t586 + qJ(4) * t585 + t719) - g(2) * (-pkin(3) * t587 - qJ(4) * t588 + t747)) * MDP(16) + (t449 * t540 + t459 * t519 + t468 * t513 + t500 * t508) * MDP(26) + (t468 * t540 + t500 * t519) * MDP(28) + (t449 * t513 + t459 * t508) * MDP(24) + (-t484 * t630 - t504 * t578 - t457 * t636 + t492 * t632 - t533 * t596 + t552 * t554 + t486 * t611 + t529 * t816 - g(1) * (t586 * t687 + t690 * t803) - g(2) * (t587 * t687 + t690 * t805)) * MDP(14) + (t495 * t637 - t496 * t636 - t533 * t634 - t534 * t630 - t536 * t633 + t537 * t632 - t562 * t579 - t563 * t578 - t689 * t735) * MDP(11) + (t577 * t636 - t624 * t632) * MDP(21) + (t771 * t842 + (-pkin(8) * t806 + t673) * t669 + (-t689 * t770 + t666) * t691 - g(1) * t644 - g(2) * t646 + (-t704 + (-t691 * t790 - 0.2e1 * t773) * qJD(1)) * qJD(2)) * MDP(9) + t691 * t812 + (t469 * t541 + t499 * t859) * MDP(17) + (t469 * t636 + t499 * t624 + t541 * t577 - t632 * t859) * MDP(19) + (-g(1) * t717 - g(2) * t569 + t445 * t632 + t462 * t541 + t514 * t469 + t505 * t499 + t511 * t859 - t577 * t851 - t624 * t713 - t636 * t714) * MDP(23) + qJDD(1) * MDP(1) + t735 * MDP(3); (t751 * t508 + t750 * t506 + (-t831 - t450 * t696 + (t506 * t692 - t508 * t696) * qJD(6)) * t651) * MDP(25) + t624 * t634 * MDP(21) + (t468 * t649 + t519 * t791) * MDP(28) + ((t582 * t696 - t592 * t692) * t468 + t430 * t649 - t718 * t450 + t432 * t814 - g(1) * (-t587 * t692 + t588 * t809) - g(2) * (t585 * t809 + t586 * t692) - g(3) * (-t636 * t809 - t637 * t692) + (t692 * t732 - t696 * t731) * t519 + t793 * t506 - t791 * t727 + t710 * t441) * MDP(29) + (-(t582 * t692 + t592 * t696) * t468 - t429 * t649 - t718 * t449 + t432 * t813 - g(1) * (-t587 * t696 - t588 * t810) - g(2) * (-t585 * t810 + t586 * t696) - g(3) * (t636 * t810 - t637 * t696) + (t692 * t731 + t696 * t732) * t519 + t793 * t508 - t791 * t436 - t709 * t441) * MDP(30) + (-t445 * t634 + t462 * t651 + t657 * t469 - t792 * t505 - t515 * t859 - t592 * t577 + t624 * t850 + t711 * t681) * MDP(23) + (t469 * t651 - t792 * t859) * MDP(17) + (t733 + t826) * MDP(20) + (-g(2) * t661 + t536 * t556 - t537 * t557 + (t496 * t688 + t495 * t834 - t839 + g(2) * t799 + (-t640 * t787 - t837) * t689) * pkin(2)) * MDP(12) - t694 * MDP(4) * t768 + (-t780 * t787 + t775) * t832 + (t698 * t743 + t776) * t833 + (t444 * t634 + t462 * t649 + t657 * t470 + t791 * t505 + t515 * t526 + t577 * t718 + t624 * t849 - t711 * t682) * MDP(22) + (-t469 * t649 - t470 * t651 - t526 * t792 - t791 * t859) * MDP(18) + (-(t537 - t556) * t634 + (-t536 + t557) * t630 + (-t578 * t688 - t579 * t834) * pkin(2)) * MDP(11) + (t449 * t813 - t508 * t709) * MDP(24) + (pkin(1) * t768 + g(1) * t646 - g(2) * t644 + t667 * t670 + (pkin(8) * t743 + g(3)) * t806 - t765) * MDP(10) + (t825 - t844) * MDP(19) + (t734 + t845) * MDP(26) + (g(1) * t587 - g(2) * t586 + g(3) * t637 - t501 * t596 - t502 * t807 + (qJD(4) * t855 - t491 * t630 - t502 * t670 - t676 * t553 + t457) * t690 + (-qJD(4) * t596 - t492 * t630 + t554 * t676 - t456) * t687) * MDP(15) + (t486 * t679 - t492 * t502 - t491 * t501 - t529 * t556 - g(1) * (pkin(2) * t645 + pkin(3) * t588 - qJ(4) * t587) - g(2) * (-pkin(2) * t799 + pkin(3) * t585 + qJ(4) * t586 + t661) - g(3) * (pkin(2) * t804 - t729) + (-t456 * t687 + t457 * t690) * t676 + t720 * qJD(4)) * MDP(16) + (-t676 * t802 - t492 * t634 + t554 * t679 + t556 * t596 + (t690 * t779 + t502) * t630 + t706 * t687) * MDP(14) + (-t676 * t821 + t491 * t634 + t679 * t553 + t556 * t807 + (t687 * t779 - t501) * t630 + (t556 * t670 - t706) * t690) * MDP(13) + t789 * MDP(5) * t808 + (t701 - t847) * MDP(27) + t812 + (t700 * t773 - t839 + g(2) * t643 + t666 + (-t770 - t837) * t689 + (-qJD(2) * t790 + t704) * qJD(1)) * MDP(9); (-t634 ^ 2 - t625) * MDP(11) + (-t536 * t634 + t537 * t630 + (-t730 - t838) * t689 + t759 + t774) * MDP(12) + (-t625 * t687 - t634 * t855 + t802) * MDP(13) + (-t596 * t634 - t625 * t690 - t821) * MDP(14) + (-t687 * t553 - t690 * t554 + (-t596 * t687 + t690 * t855) * t630) * MDP(15) + (-g(1) * t805 + t456 * t690 + t457 * t687 + t529 * t634 + t630 * t720 + t759) * MDP(16) + (t733 - t826) * MDP(22) + (t825 + t844) * MDP(23) + (t701 + t847) * MDP(29) + (t734 - t845) * MDP(30); (-t596 * t630 + t553) * MDP(13) + (t630 * t855 + t554) * MDP(14) + (-t596 ^ 2 - t855 ^ 2) * MDP(15) + (-t491 * t596 - t492 * t855 + t706) * MDP(16) + (t624 * t859 + t470) * MDP(22) + (t469 + t860) * MDP(23) + (-t506 * t859 + t862) * MDP(29) + (-t508 * t859 - t696 * t861 - t829) * MDP(30); -t526 ^ 2 * MDP(18) + (t469 - t860) * MDP(19) - t749 * MDP(20) + t577 * MDP(21) + (t445 * t624 - t712 - t843) * MDP(22) + (g(1) * t570 + g(2) * t567 + g(3) * t604 + t444 * t624 - t505 * t526 - t714) * MDP(23) + (t508 * t745 + t831) * MDP(24) + ((t449 - t828) * t696 + (-t450 - t827) * t692) * MDP(25) + (t519 * t745 + t829) * MDP(26) + t862 * MDP(27) + (-pkin(5) * t450 - t445 * t506 + t702 * t692 - t696 * t846) * MDP(29) + (-pkin(5) * t449 - t445 * t508 + t692 * t846 + t702 * t696) * MDP(30) + (-t526 * MDP(17) + (-qJD(5) + t624) * MDP(20) - t505 * MDP(22) - t508 * MDP(26) + t506 * MDP(27) - t519 * MDP(28) + t727 * MDP(29) + t436 * MDP(30) + MDP(18) * t859) * t859; t508 * t506 * MDP(24) + (-t506 ^ 2 + t508 ^ 2) * MDP(25) + (t766 + t828) * MDP(26) + (-t752 + t827) * MDP(27) + t468 * MDP(28) + (t436 * t519 - t441 * t508 - g(1) * t509 + g(2) * t854 - g(3) * (-t604 * t692 + t629) + t754) * MDP(29) + (-t727 * t519 + t441 * t506 + g(1) * t510 + g(2) * t853 - g(3) * (-t604 * t696 - t815) - t728) * MDP(30) + (-MDP(26) * t824 - MDP(27) * t508 - MDP(29) * t436 + MDP(30) * t727) * qJD(6);];
tau  = t1;
