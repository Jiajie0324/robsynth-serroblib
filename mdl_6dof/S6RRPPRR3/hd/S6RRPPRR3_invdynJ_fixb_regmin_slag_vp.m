% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRR3_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR3_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR3_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR3_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR3_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPPRR3_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:58:42
% EndTime: 2019-03-09 08:59:04
% DurationCPUTime: 11.04s
% Computational Cost: add. (11962->581), mult. (34274->807), div. (0->0), fcn. (29126->16), ass. (0->302)
t264 = sin(qJ(6));
t268 = cos(qJ(6));
t260 = sin(pkin(11));
t266 = sin(qJ(2));
t270 = cos(qJ(2));
t387 = cos(pkin(11));
t224 = -t270 * t260 - t266 * t387;
t261 = sin(pkin(6));
t326 = t270 * t387;
t309 = qJD(1) * t326;
t356 = qJD(2) * t266;
t334 = t261 * t356;
t312 = qJD(1) * t334;
t151 = -t260 * t312 + (qJD(2) * t309 - qJDD(1) * t224) * t261;
t263 = cos(pkin(6));
t347 = qJDD(1) * t263;
t241 = qJDD(2) + t347;
t259 = sin(pkin(12));
t262 = cos(pkin(12));
t125 = t151 * t259 - t262 * t241;
t126 = t151 * t262 + t241 * t259;
t265 = sin(qJ(5));
t269 = cos(qJ(5));
t321 = t269 * t125 + t265 * t126;
t209 = t224 * t261;
t206 = qJD(1) * t209;
t358 = qJD(1) * t263;
t242 = qJD(2) + t358;
t168 = t206 * t262 - t242 * t259;
t374 = t259 * t206;
t419 = t242 * t262 + t374;
t423 = -t168 * t269 + t265 * t419;
t42 = qJD(5) * t423 + t321;
t40 = qJDD(6) + t42;
t153 = t269 * t419;
t98 = t168 * t265 + t153;
t91 = qJD(6) - t98;
t427 = t91 ^ 2;
t428 = -t264 * t427 + t268 * t40;
t357 = qJD(1) * t266;
t335 = t261 * t357;
t202 = t260 * t335 - t261 * t309;
t196 = qJD(5) + t202;
t426 = t196 * t98;
t78 = -t268 * t196 + t264 * t423;
t425 = t423 * t78;
t80 = t196 * t264 + t268 * t423;
t424 = t423 * t80;
t221 = t259 * t265 - t269 * t262;
t137 = t221 * t202;
t213 = t221 * qJD(5);
t362 = -t213 - t137;
t223 = t259 * t269 + t262 * t265;
t361 = t196 * t223;
t368 = t263 * t266;
t244 = pkin(1) * t368;
t371 = t261 * t270;
t360 = pkin(8) * t371 + t244;
t252 = pkin(2) * t270 + pkin(1);
t304 = t252 * qJDD(1);
t344 = pkin(2) * t312 + qJDD(3);
t420 = t261 * t304 - t344;
t251 = -pkin(2) * t387 - pkin(3);
t229 = -t262 * pkin(4) + t251;
t154 = t221 * pkin(5) - t223 * pkin(10) + t229;
t248 = pkin(2) * t260 + qJ(4);
t396 = pkin(9) + t248;
t219 = t396 * t259;
t220 = t396 * t262;
t164 = -t219 * t265 + t220 * t269;
t256 = pkin(12) + qJ(5);
t254 = cos(t256);
t267 = sin(qJ(1));
t271 = cos(qJ(1));
t367 = t266 * t260;
t289 = t326 - t367;
t279 = t263 * t289;
t157 = t267 * t224 + t271 * t279;
t160 = t224 * t271 - t267 * t279;
t311 = t261 * t326;
t208 = t261 * t367 - t311;
t285 = g(1) * t160 + g(2) * t157 - g(3) * t208;
t276 = t285 * t254;
t403 = pkin(1) * t263;
t245 = t270 * t403;
t239 = qJD(1) * t245;
t397 = pkin(8) + qJ(3);
t332 = t397 * t266;
t313 = t261 * t332;
t186 = -qJD(1) * t313 + t239;
t187 = (t371 * t397 + t244) * qJD(1);
t324 = t387 * t187;
t128 = t186 * t260 + t324;
t382 = t202 * t259;
t87 = -pkin(4) * t382 + t128;
t418 = (-t361 * pkin(5) + t362 * pkin(10) + qJD(6) * t164 + t87) * t91 - t154 * t40 + t276;
t210 = t224 * t263;
t158 = -t210 * t271 + t267 * t289;
t253 = sin(t256);
t370 = t261 * t271;
t139 = t158 * t254 - t253 * t370;
t417 = t139 * t264 + t157 * t268;
t416 = t139 * t268 - t157 * t264;
t293 = -t219 * t269 - t220 * t265;
t179 = t260 * t187;
t129 = t186 * t387 - t179;
t143 = pkin(2) * t335 - pkin(3) * t206 + qJ(4) * t202;
t73 = -t129 * t259 + t262 * t143;
t52 = pkin(9) * t202 * t262 - pkin(4) * t206 + t73;
t74 = t262 * t129 + t259 * t143;
t62 = pkin(9) * t382 + t74;
t414 = qJD(4) * t221 - qJD(5) * t293 + t265 * t52 + t269 * t62;
t413 = -qJD(4) * t223 - qJD(5) * t164 + t265 * t62 - t269 * t52;
t182 = -t209 * t259 - t263 * t262;
t183 = -t209 * t262 + t259 * t263;
t113 = -t182 * t265 + t183 * t269;
t201 = t208 * t268;
t412 = -t113 * t264 + t201;
t411 = -qJD(5) + t196;
t159 = -t267 * t210 - t271 * t289;
t372 = t261 * t267;
t141 = t159 * t253 + t254 * t372;
t292 = t158 * t253 + t254 * t370;
t287 = g(1) * t141 - g(2) * t292 + g(3) * (t209 * t253 + t254 * t263);
t277 = qJD(2) * t224;
t346 = qJDD(1) * t266;
t150 = -qJDD(1) * t311 + (-qJD(1) * t277 + t260 * t346) * t261;
t149 = qJDD(5) + t150;
t172 = t242 * pkin(2) + t186;
t109 = t260 * t172 + t324;
t102 = qJ(4) * t242 + t109;
t310 = t252 * t261;
t212 = -qJD(1) * t310 + qJD(3);
t122 = t202 * pkin(3) + t206 * qJ(4) + t212;
t63 = -t102 * t259 + t262 * t122;
t43 = pkin(4) * t202 + pkin(9) * t168 + t63;
t64 = t262 * t102 + t259 * t122;
t47 = pkin(9) * t419 + t64;
t17 = t265 * t43 + t269 * t47;
t345 = qJDD(1) * t270;
t340 = pkin(1) * t345;
t238 = t263 * t340;
t342 = qJD(2) * t403;
t315 = qJD(1) * t342;
t327 = qJD(2) * t397;
t355 = qJD(3) * t266;
t107 = -t266 * t315 + t241 * pkin(2) + t238 + (-qJDD(1) * t332 + (-t270 * t327 - t355) * qJD(1)) * t261;
t281 = qJD(3) * t270 - t266 * t327;
t336 = qJDD(1) * t360 + t270 * t315;
t116 = (qJ(3) * t345 + qJD(1) * t281) * t261 + t336;
t68 = t260 * t107 + t387 * t116;
t54 = qJ(4) * t241 + qJD(4) * t242 + t68;
t69 = t150 * pkin(3) - t151 * qJ(4) + t206 * qJD(4) - t420;
t28 = -t259 * t54 + t262 * t69;
t15 = pkin(4) * t150 - pkin(9) * t126 + t28;
t29 = t259 * t69 + t262 * t54;
t20 = -pkin(9) * t125 + t29;
t328 = -t269 * t15 + t265 * t20;
t4 = -t149 * pkin(5) + qJD(5) * t17 + t328;
t410 = (pkin(5) * t423 + t91 * pkin(10)) * t91 + t287 + t4;
t352 = qJD(6) * t264;
t89 = t137 * t268 - t206 * t264;
t283 = t213 * t268 + t223 * t352 + t89;
t377 = t223 * t268;
t409 = -t283 * t91 + t40 * t377;
t354 = qJD(5) * t265;
t41 = qJD(5) * t153 - t265 * t125 + t269 * t126 + t168 * t354;
t22 = qJD(6) * t80 - t268 * t149 + t264 * t41;
t407 = -t221 * t22 - t361 * t78;
t406 = -t223 * t149 - t196 * t362;
t67 = t107 * t387 - t260 * t116;
t58 = -t241 * pkin(3) + qJDD(4) - t67;
t34 = t125 * pkin(4) + t58;
t10 = t42 * pkin(5) - t41 * pkin(10) + t34;
t353 = qJD(5) * t269;
t291 = t265 * t15 + t269 * t20 + t43 * t353 - t354 * t47;
t3 = pkin(10) * t149 + t291;
t14 = pkin(10) * t196 + t17;
t108 = t172 * t387 - t179;
t101 = -t242 * pkin(3) + qJD(4) - t108;
t77 = -pkin(4) * t419 + t101;
t30 = -pkin(5) * t98 - pkin(10) * t423 + t77;
t302 = t14 * t264 - t268 * t30;
t1 = -t302 * qJD(6) + t264 * t10 + t268 * t3;
t197 = t202 ^ 2;
t255 = t261 ^ 2;
t405 = 0.2e1 * t255;
t404 = pkin(1) * t255;
t364 = t267 * t270;
t365 = t266 * t271;
t217 = -t263 * t364 - t365;
t402 = g(1) * t217;
t401 = g(1) * t267;
t400 = g(3) * t270;
t399 = t78 * t91;
t398 = t80 * t91;
t185 = t263 * pkin(2) + t245 - t313;
t198 = qJ(3) * t371 + t360;
t135 = t260 * t185 + t387 * t198;
t123 = qJ(4) * t263 + t135;
t303 = t208 * pkin(3) + t209 * qJ(4);
t146 = -t310 + t303;
t75 = -t123 * t259 + t262 * t146;
t51 = pkin(4) * t208 - pkin(9) * t183 + t75;
t76 = t262 * t123 + t259 * t146;
t60 = -pkin(9) * t182 + t76;
t296 = t265 * t51 + t269 * t60;
t204 = t261 * t277;
t205 = t289 * t261 * qJD(2);
t104 = pkin(2) * t334 - pkin(3) * t204 - qJ(4) * t205 + qJD(4) * t209;
t240 = t270 * t342;
t173 = t261 * t281 + t240;
t333 = t397 * t261;
t174 = -t261 * t355 + (-t270 * t333 - t244) * qJD(2);
t106 = t387 * t173 + t260 * t174;
t93 = qJD(4) * t263 + t106;
t56 = t259 * t104 + t262 * t93;
t393 = t206 * t98;
t351 = qJD(6) * t268;
t21 = t264 * t149 + t196 * t351 + t268 * t41 - t352 * t423;
t392 = t21 * t264;
t390 = t264 * t40;
t389 = t423 * t206;
t388 = -pkin(5) * t206 - t413;
t385 = t150 * t259;
t381 = t205 * t259;
t380 = t205 * t262;
t379 = t208 * t264;
t272 = qJD(1) ^ 2;
t375 = t255 * t272;
t373 = t261 * t266;
t369 = t262 * t150;
t366 = t266 * t267;
t363 = t270 * t271;
t257 = t266 ^ 2;
t359 = -t270 ^ 2 + t257;
t350 = qJD(2) - t242;
t349 = -qJD(4) + t101;
t348 = qJD(1) * qJD(2);
t343 = t266 * t404;
t339 = pkin(8) * t346;
t338 = t270 * t375;
t337 = t263 * t363;
t331 = t270 * t348;
t329 = g(2) * t370 - g(3) * t263;
t55 = t262 * t104 - t259 * t93;
t322 = t268 * t91;
t105 = t173 * t260 - t387 * t174;
t211 = pkin(2) * t368 - t333;
t319 = -t211 * t267 + t271 * t252;
t318 = t242 + t358;
t317 = qJD(1) * t350;
t316 = t241 + t347;
t314 = t21 * t221 + t361 * t80;
t308 = g(1) * t271 + g(2) * t267;
t306 = -t221 * t149 - t361 * t196;
t83 = pkin(4) * t381 + t105;
t8 = t14 * t268 + t264 * t30;
t24 = pkin(10) * t208 + t296;
t112 = t269 * t182 + t183 * t265;
t134 = t185 * t387 - t260 * t198;
t124 = -t263 * pkin(3) - t134;
t86 = t182 * pkin(4) + t124;
t33 = t112 * pkin(5) - t113 * pkin(10) + t86;
t301 = t24 * t268 + t264 * t33;
t300 = -t24 * t264 + t268 * t33;
t299 = -t259 * t63 + t262 * t64;
t39 = -pkin(4) * t204 - pkin(9) * t380 + t55;
t46 = -pkin(9) * t381 + t56;
t298 = -t265 * t46 + t269 * t39;
t16 = -t265 * t47 + t269 * t43;
t297 = -t265 * t60 + t269 * t51;
t85 = t113 * t268 + t379;
t294 = -t211 * t271 - t252 * t267;
t290 = t265 * t39 + t269 * t46 + t51 * t353 - t354 * t60;
t286 = g(1) * t159 - g(2) * t158 + g(3) * t209;
t88 = t137 * t264 + t268 * t206;
t284 = -t213 * t264 + t223 * t351 - t88;
t280 = t285 + t58;
t278 = t360 * t242;
t13 = -pkin(5) * t196 - t16;
t275 = -pkin(10) * t40 + (t13 + t16) * t91;
t2 = -qJD(6) * t8 + t268 * t10 - t264 * t3;
t274 = -t223 * t390 - t284 * t91;
t273 = -t164 * t40 + t4 * t223 + (-pkin(10) * t206 - qJD(6) * t154 + t414) * t91 + t286;
t233 = pkin(2) * t337;
t218 = -t263 * t366 + t363;
t216 = -t263 * t365 - t364;
t215 = -t337 + t366;
t176 = -t209 * t254 + t253 * t263;
t142 = -t159 * t254 + t253 * t372;
t82 = t142 * t268 - t160 * t264;
t81 = -t142 * t264 - t160 * t268;
t72 = qJD(5) * t113 + t205 * t223;
t71 = -qJD(5) * t112 - t205 * t221;
t32 = qJD(6) * t85 + t204 * t268 + t264 * t71;
t31 = qJD(6) * t412 - t204 * t264 + t268 * t71;
t25 = pkin(5) * t72 - pkin(10) * t71 + t83;
t23 = -pkin(5) * t208 - t297;
t6 = t204 * pkin(5) + qJD(5) * t296 - t298;
t5 = -pkin(10) * t204 + t290;
t7 = [qJDD(1), -g(2) * t271 + t401, t308 (qJDD(1) * t257 + 0.2e1 * t266 * t331) * t255 (t266 * t345 - t348 * t359) * t405 (qJD(2) * t270 * t318 + t266 * t316) * t261 (t270 * t316 - t318 * t356) * t261, t241 * t263, t340 * t405 + (-pkin(8) * t373 + t245) * t241 + (-t261 * t339 + t238) * t263 - g(1) * t216 - g(2) * t218 + (-t278 + (-t263 * t360 - 0.2e1 * t343) * qJD(1)) * qJD(2) -(-pkin(8) * t334 + t240) * t242 - t360 * t241 - (-pkin(8) * t312 + t336) * t263 - g(1) * t215 - g(2) * t217 + 0.2e1 * (-t331 - t346) * t404, -t105 * t206 - t106 * t202 - t108 * t205 + t109 * t204 - t134 * t151 - t135 * t150 - t68 * t208 + t67 * t209 - t261 * t308, t68 * t135 + t109 * t106 + t67 * t134 - t108 * t105 - g(1) * t294 - g(2) * t319 + (pkin(2) * t212 * t356 + t252 * t420) * t261, t55 * t202 + t75 * t150 + t28 * t208 - t63 * t204 - t105 * t419 + t124 * t125 + t58 * t182 + t101 * t381 - g(1) * (-t158 * t262 + t259 * t370) - g(2) * (-t159 * t262 + t259 * t372) -t56 * t202 - t76 * t150 - t29 * t208 + t64 * t204 - t105 * t168 + t124 * t126 + t58 * t183 + t101 * t380 - g(1) * (t158 * t259 + t262 * t370) - g(2) * (t159 * t259 + t262 * t372) t56 * t419 - t76 * t125 - t29 * t182 + t55 * t168 - t75 * t126 - t28 * t183 - g(1) * t157 + g(2) * t160 + (-t259 * t64 - t262 * t63) * t205, t29 * t76 + t64 * t56 + t28 * t75 + t63 * t55 + t58 * t124 + t101 * t105 - g(1) * (-pkin(3) * t158 + qJ(4) * t157 + t294) - g(2) * (-pkin(3) * t159 - qJ(4) * t160 + t319) t113 * t41 + t423 * t71, -t112 * t41 - t113 * t42 - t423 * t72 + t71 * t98, t113 * t149 + t196 * t71 - t204 * t423 + t208 * t41, -t112 * t149 - t196 * t72 - t204 * t98 - t208 * t42, t149 * t208 - t196 * t204, t298 * t196 + t297 * t149 - t328 * t208 - t16 * t204 - t83 * t98 + t86 * t42 + t34 * t112 + t77 * t72 + g(1) * t139 - g(2) * t142 + (-t17 * t208 - t196 * t296) * qJD(5), -g(1) * t292 - g(2) * t141 + t34 * t113 - t149 * t296 + t17 * t204 - t196 * t290 - t208 * t291 + t86 * t41 + t423 * t83 + t77 * t71, t21 * t85 + t31 * t80, t21 * t412 - t22 * t85 - t31 * t78 - t32 * t80, t112 * t21 + t31 * t91 + t40 * t85 + t72 * t80, -t112 * t22 - t32 * t91 + t40 * t412 - t72 * t78, t112 * t40 + t72 * t91 (-qJD(6) * t301 + t268 * t25 - t264 * t5) * t91 + t300 * t40 + t2 * t112 - t302 * t72 + t6 * t78 + t23 * t22 - t4 * t412 + t13 * t32 + g(1) * t416 - g(2) * t82 -(qJD(6) * t300 + t264 * t25 + t268 * t5) * t91 - t301 * t40 - t1 * t112 - t8 * t72 + t6 * t80 + t23 * t21 + t4 * t85 + t13 * t31 - g(1) * t417 - g(2) * t81; 0, 0, 0, -t266 * t338, t359 * t375 (t270 * t317 + t346) * t261 (-t350 * t357 + t345) * t261, t241, t272 * t343 - t402 + g(2) * t215 + t238 + (-t339 - t400) * t261 + (-qJD(2) * t360 + t278) * qJD(1), pkin(1) * t338 + g(1) * t218 - g(2) * t216 + t239 * t242 + (pkin(8) * t317 + g(3)) * t373 - t336 -(t109 - t128) * t206 + (-t108 + t129) * t202 + (-t150 * t260 - t151 * t387) * pkin(2), -g(2) * t233 + t108 * t128 - t109 * t129 + (t68 * t260 + t67 * t387 - t402 + g(2) * t366 + (-t212 * t357 - t400) * t261) * pkin(2), -t248 * t385 + t251 * t125 + t128 * t374 + t63 * t206 + (t259 * t349 - t73) * t202 + (t128 * t242 - t280) * t262, -t248 * t369 + t251 * t126 + t128 * t168 - t64 * t206 + (t262 * t349 + t74) * t202 + t280 * t259, -t73 * t168 - t74 * t374 + (qJD(4) * t419 - t248 * t125 - t63 * t202 - t74 * t242 + t29) * t262 + (-qJD(4) * t168 + t126 * t248 - t202 * t64 - t28) * t259 + t286, t58 * t251 - t64 * t74 - t63 * t73 - t101 * t128 - g(1) * (pkin(2) * t217 + t160 * pkin(3) - t159 * qJ(4)) - g(2) * (-pkin(2) * t366 + pkin(3) * t157 + qJ(4) * t158 + t233) - g(3) * (pkin(2) * t371 - t303) + (-t28 * t259 + t29 * t262) * t248 + t299 * qJD(4), t41 * t223 + t362 * t423, -t41 * t221 - t223 * t42 - t361 * t423 + t362 * t98, t389 - t406, t306 + t393, t196 * t206, t149 * t293 + t16 * t206 + t196 * t413 + t34 * t221 + t229 * t42 + t361 * t77 + t87 * t98 - t276, -t164 * t149 - t17 * t206 + t196 * t414 + t34 * t223 + t229 * t41 + t285 * t253 + t362 * t77 - t423 * t87, t21 * t377 - t283 * t80, t89 * t78 + t80 * t88 - (-t264 * t80 - t268 * t78) * t213 + (-t392 - t22 * t268 + (t264 * t78 - t268 * t80) * qJD(6)) * t223, t314 + t409, t274 + t407, t40 * t221 + t361 * t91, t284 * t13 + t2 * t221 - t293 * t22 + t273 * t264 - t268 * t418 - t361 * t302 + t388 * t78, -t1 * t221 - t283 * t13 - t293 * t21 + t264 * t418 + t273 * t268 - t361 * t8 + t388 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206 ^ 2 - t197, -t108 * t206 + t109 * t202 + (-t304 - t401) * t261 + t329 + t344, -t197 * t259 - t206 * t419 + t369, -t168 * t206 - t197 * t262 - t385, -t259 * t125 - t262 * t126 + (-t168 * t259 + t262 * t419) * t202, -g(1) * t372 + t101 * t206 + t202 * t299 + t29 * t259 + t28 * t262 + t329, 0, 0, 0, 0, 0, t306 - t393, t389 + t406, 0, 0, 0, 0, 0, t274 - t407, t314 - t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168 * t202 + t125, t202 * t419 + t126, -t168 ^ 2 - t419 ^ 2, -t63 * t168 - t419 * t64 + t280, 0, 0, 0, 0, 0, t196 * t423 + t42, t41 + t426, 0, 0, 0, 0, 0, -t425 + t428, -t268 * t427 - t390 - t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t423 * t98, t423 ^ 2 - t98 ^ 2, t41 - t426, t411 * t423 - t321, t149, t17 * t411 - t423 * t77 - t287 - t328, g(1) * t142 + g(2) * t139 + g(3) * t176 + t16 * t196 - t77 * t98 - t291, t322 * t80 + t392 (t21 - t399) * t268 + (-t22 - t398) * t264, t322 * t91 + t390 - t424, t425 + t428, -t91 * t423, -pkin(5) * t22 - t17 * t78 + t275 * t264 - t268 * t410 + t302 * t423, -pkin(5) * t21 - t17 * t80 + t264 * t410 + t275 * t268 + t423 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80 * t78, -t78 ^ 2 + t80 ^ 2, t21 + t399, -t22 + t398, t40, t8 * t91 - t13 * t80 - g(1) * t81 + g(2) * t417 - g(3) * (-t176 * t264 + t201) + t2, -t302 * t91 + t13 * t78 + g(1) * t82 + g(2) * t416 - g(3) * (-t176 * t268 - t379) - t1;];
tau_reg  = t7;
