% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 10:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 10:04:53
% EndTime: 2019-05-06 10:06:06
% DurationCPUTime: 73.57s
% Computational Cost: add. (660322->1118), mult. (1790779->1818), div. (0->0), fcn. (1445998->14), ass. (0->806)
t1232 = sin(pkin(12));
t1233 = sin(pkin(11));
t1236 = cos(pkin(11));
t1234 = sin(pkin(6));
t1244 = cos(qJ(2));
t1389 = qJD(1) * t1244;
t1347 = t1234 * t1389;
t1240 = sin(qJ(2));
t1361 = t1234 * t1240;
t1348 = qJD(1) * t1361;
t1192 = t1233 * t1347 + t1236 * t1348;
t1237 = cos(pkin(6));
t1224 = qJD(1) * t1237 + qJD(2);
t1235 = cos(pkin(12));
t1163 = -t1232 * t1192 + t1224 * t1235;
t1164 = t1192 * t1235 + t1224 * t1232;
t1113 = t1163 * t1164;
t1353 = qJDD(1) * t1240;
t1198 = (qJD(2) * t1389 + t1353) * t1234;
t1354 = qJDD(1) * t1234;
t1199 = -qJD(2) * t1348 + t1244 * t1354;
t1152 = t1198 * t1233 - t1236 * t1199;
t1415 = t1113 + t1152;
t1429 = t1232 * t1415;
t1190 = t1233 * t1348 - t1236 * t1347;
t1151 = t1192 * t1190;
t1331 = qJDD(1) * t1237 + qJDD(2);
t1414 = -t1151 + t1331;
t1428 = t1233 * t1414;
t1427 = t1235 * t1415;
t1426 = t1236 * t1414;
t1238 = sin(qJ(6));
t1239 = sin(qJ(5));
t1243 = cos(qJ(5));
t1107 = t1163 * t1239 + t1164 * t1243;
t1153 = t1236 * t1198 + t1233 * t1199;
t1131 = -t1153 * t1232 + t1235 * t1331;
t1132 = t1235 * t1153 + t1232 * t1331;
t1332 = -t1243 * t1131 + t1132 * t1239;
t1008 = -qJD(5) * t1107 - t1332;
t1259 = qJDD(6) - t1008;
t1185 = qJD(5) + t1190;
t1242 = cos(qJ(6));
t1074 = t1107 * t1238 - t1242 * t1185;
t1076 = t1107 * t1242 + t1185 * t1238;
t992 = t1076 * t1074;
t1420 = t1259 - t992;
t1425 = t1238 * t1420;
t1105 = -t1243 * t1163 + t1164 * t1239;
t1036 = t1107 * t1105;
t1149 = qJDD(5) + t1152;
t1417 = -t1036 + t1149;
t1424 = t1239 * t1417;
t1423 = t1242 * t1420;
t1422 = t1243 * t1417;
t1081 = t1185 * t1105;
t1258 = qJD(5) * t1105 - t1131 * t1239 - t1132 * t1243;
t1421 = t1258 + t1081;
t1207 = t1224 * t1348;
t1171 = t1199 - t1207;
t1419 = t1171 * t1237;
t1229 = t1234 ^ 2;
t1246 = qJD(1) ^ 2;
t1360 = t1237 * t1246;
t1390 = qJD(1) * t1224;
t1418 = t1229 * (-t1360 + t1390);
t1130 = t1190 * t1163;
t1060 = t1130 - t1132;
t1061 = -t1132 - t1130;
t1175 = t1224 * t1190;
t1413 = -t1175 + t1153;
t1208 = t1224 * t1347;
t1168 = t1208 + t1198;
t1101 = qJD(6) + t1105;
t1019 = t1101 * t1074;
t1335 = t1074 * qJD(6) - t1238 * t1149 + t1242 * t1258;
t897 = t1335 + t1019;
t1241 = sin(qJ(1));
t1245 = cos(qJ(1));
t1219 = g(1) * t1241 - t1245 * g(2);
t1278 = qJDD(1) * pkin(1) + t1219;
t1403 = pkin(8) * t1234;
t1256 = t1246 * t1403 + t1278;
t1254 = t1237 * t1256;
t1220 = g(1) * t1245 + g(2) * t1241;
t1255 = -pkin(1) * t1246 + pkin(8) * t1354 - t1220;
t1136 = -g(3) * t1361 + t1240 * t1254 + t1244 * t1255;
t1276 = pkin(2) * t1224 - qJ(3) * t1348;
t1231 = t1244 ^ 2;
t1362 = t1229 * t1246;
t1337 = t1231 * t1362;
t1078 = -pkin(2) * t1337 + t1199 * qJ(3) - t1224 * t1276 + t1136;
t1253 = t1240 * t1255;
t1359 = t1240 * t1246;
t1336 = t1229 * t1359;
t1249 = -t1253 - t1198 * qJ(3) + t1331 * pkin(2) + (t1237 * t1278 + pkin(2) * t1336 + (pkin(8) * t1360 + qJ(3) * t1390 - g(3)) * t1234) * t1244;
t982 = -0.2e1 * qJD(3) * t1190 + t1236 * t1078 + t1233 * t1249;
t1334 = -t1242 * t1149 - t1238 * t1258;
t892 = (qJD(6) - t1101) * t1076 + t1334;
t958 = (qJD(5) - t1185) * t1107 + t1332;
t1176 = t1237 * g(3) + t1234 * t1256;
t1102 = t1199 * pkin(2) + qJ(3) * t1337 - t1276 * t1348 - qJDD(3) + t1176;
t1412 = -qJ(4) * t1413 - t1102;
t1072 = t1074 ^ 2;
t1073 = t1076 ^ 2;
t1095 = t1101 ^ 2;
t1103 = t1105 ^ 2;
t1104 = t1107 ^ 2;
t1161 = t1163 ^ 2;
t1162 = t1164 ^ 2;
t1411 = t1185 ^ 2;
t1410 = t1190 ^ 2;
t1189 = t1192 ^ 2;
t1206 = t1224 ^ 2;
t1409 = 0.2e1 * qJD(3);
t1408 = 2 * qJD(4);
t1407 = pkin(2) * t1234;
t1406 = pkin(2) * t1237;
t1405 = pkin(3) * t1233;
t1404 = pkin(5) * t1239;
t1034 = pkin(5) * t1105 - pkin(10) * t1107;
t1369 = t1192 * t1224;
t1114 = t1152 + t1369;
t1250 = t1114 * pkin(3) + t1412;
t1142 = pkin(3) * t1190 - qJ(4) * t1192;
t1252 = qJ(4) * t1331 - t1190 * t1142 + t982;
t1251 = -pkin(3) * t1206 + t1252;
t1352 = t1164 * t1408;
t883 = t1232 * t1251 - t1235 * t1250 + t1352;
t1248 = pkin(4) * t1415 + pkin(9) * t1060 - t883;
t1125 = pkin(4) * t1190 - pkin(9) * t1164;
t884 = t1163 * t1408 + t1232 * t1250 + t1235 * t1251;
t849 = -pkin(4) * t1161 + pkin(9) * t1131 - t1125 * t1190 + t884;
t755 = t1239 * t1248 + t1243 * t849;
t743 = -pkin(5) * t1411 + pkin(10) * t1149 - t1034 * t1105 + t755;
t1333 = t1078 * t1233 - t1236 * t1249;
t938 = qJDD(4) - t1331 * pkin(3) - t1206 * qJ(4) + (t1409 + t1142) * t1192 + t1333;
t904 = -t1131 * pkin(4) - t1161 * pkin(9) + t1125 * t1164 + t938;
t802 = t1421 * pkin(10) + (t1107 * t1185 - t1008) * pkin(5) + t904;
t695 = t1238 * t802 + t1242 * t743;
t754 = t1239 * t849 - t1243 * t1248;
t686 = t1239 * t755 - t1243 * t754;
t1402 = t1232 * t686;
t1401 = t1232 * t938;
t1400 = t1235 * t686;
t1399 = t1235 * t938;
t742 = -t1149 * pkin(5) - pkin(10) * t1411 + t1034 * t1107 + t754;
t1398 = t1238 * t742;
t915 = t1259 + t992;
t1397 = t1238 * t915;
t1396 = t1239 * t904;
t981 = t1192 * t1409 + t1333;
t905 = t1233 * t982 - t1236 * t981;
t1395 = t1240 * t905;
t1394 = t1242 * t742;
t1393 = t1242 * t915;
t1392 = t1243 * t904;
t1391 = t1244 * t905;
t1006 = t1036 + t1149;
t1387 = t1006 * t1239;
t1386 = t1006 * t1243;
t1063 = -t1113 + t1152;
t1385 = t1063 * t1232;
t1384 = t1063 * t1235;
t1383 = t1101 * t1238;
t1382 = t1101 * t1242;
t1381 = t1102 * t1233;
t1380 = t1102 * t1236;
t1139 = t1151 + t1331;
t1379 = t1139 * t1233;
t1378 = t1139 * t1236;
t1377 = t1152 * t1233;
t1376 = t1164 * t1190;
t1375 = t1176 * t1240;
t1374 = t1176 * t1244;
t1373 = t1185 * t1239;
t1372 = t1185 * t1243;
t1371 = t1190 * t1232;
t1370 = t1190 * t1235;
t1218 = t1244 * t1336;
t1196 = t1218 + t1331;
t1368 = t1196 * t1240;
t1367 = t1196 * t1244;
t1197 = -t1218 + t1331;
t1366 = t1197 * t1240;
t1365 = t1197 * t1244;
t1364 = t1224 * t1233;
t1363 = t1224 * t1236;
t1230 = t1240 ^ 2;
t1355 = t1230 + t1231;
t1351 = -pkin(3) * t1236 - pkin(2);
t1350 = -pkin(5) * t1243 - pkin(4);
t1349 = t1234 * t1390;
t1346 = t1239 * t992;
t1345 = t1243 * t992;
t1344 = t1233 * t1036;
t1343 = t1236 * t1036;
t1342 = t1233 * t1113;
t1341 = t1236 * t1113;
t1340 = t1234 * t1151;
t1339 = t1237 * t1151;
t1338 = t1230 * t1362;
t792 = t1232 * t883 + t1235 * t884;
t906 = t1233 * t981 + t1236 * t982;
t694 = t1238 * t743 - t1242 * t802;
t687 = t1239 * t754 + t1243 * t755;
t1181 = -t1219 * t1241 - t1245 * t1220;
t1217 = qJDD(1) * t1245 - t1241 * t1246;
t1330 = -pkin(7) * t1217 - g(3) * t1241;
t1186 = -t1206 - t1338;
t1141 = -t1186 * t1240 - t1365;
t1329 = pkin(8) * t1141 - t1375;
t1203 = -t1337 - t1206;
t1156 = t1203 * t1244 - t1368;
t1328 = pkin(8) * t1156 + t1374;
t791 = t1232 * t884 - t1235 * t883;
t649 = t1238 * t695 - t1242 * t694;
t650 = t1238 * t694 + t1242 * t695;
t623 = t1239 * t650 - t1243 * t742;
t624 = t1239 * t742 + t1243 * t650;
t597 = -t1232 * t623 + t1235 * t624;
t581 = t1233 * t597 - t1236 * t649;
t582 = t1233 * t649 + t1236 * t597;
t1327 = t1240 * t582 + t1244 * t581;
t644 = t1235 * t687 - t1402;
t638 = t1233 * t644 - t1236 * t904;
t639 = t1233 * t904 + t1236 * t644;
t1326 = t1240 * t639 + t1244 * t638;
t896 = -t1019 + t1335;
t806 = -t1238 * t896 - t1242 * t892;
t939 = t1072 + t1073;
t772 = t1239 * t806 + t1243 * t939;
t773 = -t1239 * t939 + t1243 * t806;
t705 = -t1232 * t772 + t1235 * t773;
t804 = -t1238 * t892 + t1242 * t896;
t673 = t1233 * t705 - t1236 * t804;
t674 = t1233 * t804 + t1236 * t705;
t1325 = t1240 * t674 + t1244 * t673;
t893 = (-qJD(6) - t1101) * t1076 - t1334;
t805 = t1238 * t897 + t1242 * t893;
t991 = -t1073 + t1072;
t779 = t1239 * t805 + t1243 * t991;
t780 = -t1239 * t991 + t1243 * t805;
t710 = -t1232 * t779 + t1235 * t780;
t803 = -t1238 * t893 + t1242 * t897;
t678 = t1233 * t710 + t1236 * t803;
t679 = -t1233 * t803 + t1236 * t710;
t1324 = t1240 * t679 + t1244 * t678;
t968 = -t1095 - t1072;
t851 = t1242 * t968 - t1425;
t781 = t1239 * t851 + t1243 * t893;
t782 = -t1239 * t893 + t1243 * t851;
t717 = -t1232 * t781 + t1235 * t782;
t850 = t1238 * t968 + t1423;
t684 = t1233 * t717 - t1236 * t850;
t685 = t1233 * t850 + t1236 * t717;
t1323 = t1240 * t685 + t1244 * t684;
t972 = -t1073 - t1095;
t855 = -t1238 * t972 - t1393;
t784 = t1239 * t855 + t1243 * t897;
t785 = -t1239 * t897 + t1243 * t855;
t721 = -t1232 * t784 + t1235 * t785;
t854 = t1242 * t972 - t1397;
t689 = t1233 * t721 - t1236 * t854;
t690 = t1233 * t854 + t1236 * t721;
t1322 = t1240 * t690 + t1244 * t689;
t1018 = -t1073 + t1095;
t874 = -t1018 * t1238 + t1423;
t795 = t1239 * t874 + t1243 * t896;
t797 = -t1239 * t896 + t1243 * t874;
t724 = -t1232 * t795 + t1235 * t797;
t872 = -t1018 * t1242 - t1425;
t698 = t1233 * t724 + t1236 * t872;
t700 = -t1233 * t872 + t1236 * t724;
t1321 = t1240 * t700 + t1244 * t698;
t1017 = t1072 - t1095;
t875 = t1017 * t1242 - t1397;
t796 = t1239 * t875 + t1243 * t892;
t798 = -t1239 * t892 + t1243 * t875;
t725 = -t1232 * t796 + t1235 * t798;
t873 = -t1017 * t1238 - t1393;
t699 = t1233 * t725 + t1236 * t873;
t701 = -t1233 * t873 + t1236 * t725;
t1320 = t1240 * t701 + t1244 * t699;
t925 = -qJD(6) * t1076 - t1334;
t889 = t1074 * t1382 - t1238 * t925;
t844 = t1239 * t889 + t1345;
t846 = t1243 * t889 - t1346;
t764 = -t1232 * t844 + t1235 * t846;
t888 = -t1074 * t1383 - t1242 * t925;
t731 = t1233 * t764 + t1236 * t888;
t733 = -t1233 * t888 + t1236 * t764;
t1319 = t1240 * t733 + t1244 * t731;
t891 = -t1076 * t1383 - t1242 * t1335;
t845 = t1239 * t891 - t1345;
t847 = t1243 * t891 + t1346;
t765 = -t1232 * t845 + t1235 * t847;
t890 = -t1076 * t1382 + t1238 * t1335;
t732 = t1233 * t765 + t1236 * t890;
t734 = -t1233 * t890 + t1236 * t765;
t1318 = t1240 * t734 + t1244 * t732;
t922 = (-t1074 * t1242 + t1076 * t1238) * t1101;
t885 = t1239 * t922 - t1243 * t1259;
t886 = t1239 * t1259 + t1243 * t922;
t794 = -t1232 * t885 + t1235 * t886;
t921 = (t1074 * t1238 + t1076 * t1242) * t1101;
t760 = t1233 * t794 + t1236 * t921;
t761 = -t1233 * t921 + t1236 * t794;
t1317 = t1240 * t761 + t1244 * t760;
t766 = t1233 * t792 - t1236 * t938;
t767 = t1233 * t938 + t1236 * t792;
t1316 = t1240 * t767 + t1244 * t766;
t962 = -t1081 + t1258;
t877 = -t1239 * t958 + t1243 * t962;
t879 = -t1239 * t962 - t1243 * t958;
t789 = -t1232 * t877 + t1235 * t879;
t983 = -t1103 - t1104;
t770 = t1233 * t789 - t1236 * t983;
t771 = t1233 * t983 + t1236 * t789;
t1315 = t1240 * t771 + t1244 * t770;
t1035 = -t1104 + t1103;
t957 = (qJD(5) + t1185) * t1107 + t1332;
t876 = -t1239 * t957 - t1243 * t1421;
t878 = t1239 * t1421 - t1243 * t957;
t788 = -t1232 * t876 + t1235 * t878;
t775 = t1035 * t1236 + t1233 * t788;
t776 = -t1035 * t1233 + t1236 * t788;
t1314 = t1240 * t776 + t1244 * t775;
t1022 = -t1411 - t1103;
t919 = t1022 * t1239 + t1422;
t920 = t1022 * t1243 - t1424;
t843 = -t1232 * t919 + t1235 * t920;
t807 = t1233 * t843 - t1236 * t957;
t808 = t1233 * t957 + t1236 * t843;
t1313 = t1240 * t808 + t1244 * t807;
t1049 = -t1104 - t1411;
t935 = t1049 * t1243 - t1387;
t936 = -t1049 * t1239 - t1386;
t860 = -t1232 * t935 + t1235 * t936;
t814 = t1233 * t860 + t1236 * t1421;
t815 = -t1233 * t1421 + t1236 * t860;
t1312 = t1240 * t815 + t1244 * t814;
t1080 = -t1104 + t1411;
t944 = t1080 * t1243 + t1424;
t946 = -t1080 * t1239 + t1422;
t866 = -t1232 * t944 + t1235 * t946;
t821 = t1233 * t866 + t1236 * t962;
t823 = -t1233 * t962 + t1236 * t866;
t1311 = t1240 * t823 + t1244 * t821;
t1079 = t1103 - t1411;
t945 = t1079 * t1239 + t1386;
t947 = t1079 * t1243 - t1387;
t867 = -t1232 * t945 + t1235 * t947;
t822 = t1233 * t867 + t1236 * t958;
t824 = -t1233 * t958 + t1236 * t867;
t1310 = t1240 * t824 + t1244 * t822;
t948 = t1008 * t1243 + t1105 * t1373;
t949 = -t1008 * t1239 + t1105 * t1372;
t870 = -t1232 * t948 + t1235 * t949;
t838 = t1233 * t870 + t1343;
t840 = t1236 * t870 - t1344;
t1309 = t1240 * t840 + t1244 * t838;
t950 = t1107 * t1372 - t1239 * t1258;
t951 = -t1107 * t1373 - t1243 * t1258;
t871 = -t1232 * t950 + t1235 * t951;
t839 = t1233 * t871 - t1343;
t841 = t1236 * t871 + t1344;
t1308 = t1240 * t841 + t1244 * t839;
t1307 = t1240 * t906 + t1391;
t1000 = (-t1105 * t1243 + t1107 * t1239) * t1185;
t999 = (-t1105 * t1239 - t1107 * t1243) * t1185;
t913 = t1000 * t1235 - t1232 * t999;
t910 = -t1149 * t1236 + t1233 * t913;
t911 = t1149 * t1233 + t1236 * t913;
t1306 = t1240 * t911 + t1244 * t910;
t1067 = t1161 + t1162;
t1056 = -t1131 - t1376;
t987 = -t1056 * t1235 - t1060 * t1232;
t928 = t1067 * t1236 + t1233 * t987;
t929 = -t1067 * t1233 + t1236 * t987;
t1305 = t1240 * t929 + t1244 * t928;
t1057 = t1131 - t1376;
t1085 = -t1410 - t1161;
t994 = t1085 * t1235 - t1429;
t932 = t1057 * t1236 + t1233 * t994;
t933 = -t1057 * t1233 + t1236 * t994;
t1304 = t1240 * t933 + t1244 * t932;
t1100 = -t1162 - t1410;
t1004 = -t1100 * t1232 - t1384;
t940 = t1004 * t1233 + t1061 * t1236;
t941 = t1004 * t1236 - t1061 * t1233;
t1303 = t1240 * t941 + t1244 * t940;
t1112 = -t1162 + t1161;
t986 = t1057 * t1235 + t1061 * t1232;
t942 = t1112 * t1236 + t1233 * t986;
t943 = -t1112 * t1233 + t1236 * t986;
t1302 = t1240 * t943 + t1244 * t942;
t1128 = -t1162 + t1410;
t1025 = -t1128 * t1232 + t1427;
t963 = t1025 * t1233 + t1060 * t1236;
t965 = t1025 * t1236 - t1060 * t1233;
t1301 = t1240 * t965 + t1244 * t963;
t1127 = t1161 - t1410;
t1026 = t1127 * t1235 - t1385;
t964 = t1026 * t1233 + t1056 * t1236;
t966 = t1026 * t1236 - t1056 * t1233;
t1300 = t1240 * t966 + t1244 * t964;
t1053 = -t1131 * t1232 - t1163 * t1370;
t1010 = t1053 * t1233 - t1341;
t1012 = t1053 * t1236 + t1342;
t1298 = t1010 * t1244 + t1012 * t1240;
t1055 = t1132 * t1235 - t1164 * t1371;
t1011 = t1055 * t1233 + t1341;
t1013 = t1055 * t1236 - t1342;
t1297 = t1011 * t1244 + t1013 * t1240;
t1051 = (t1163 * t1235 + t1164 * t1232) * t1190;
t1146 = t1236 * t1152;
t1028 = t1051 * t1233 - t1146;
t1029 = t1051 * t1236 + t1377;
t1296 = t1028 * t1244 + t1029 * t1240;
t1038 = -t1114 * t1233 + t1236 * t1413;
t1040 = -t1114 * t1236 - t1233 * t1413;
t1295 = t1038 * t1244 + t1040 * t1240;
t1119 = t1175 + t1153;
t1277 = -t1152 + t1369;
t1039 = -t1119 * t1236 + t1233 * t1277;
t1041 = t1119 * t1233 + t1236 * t1277;
t1294 = t1039 * t1244 + t1041 * t1240;
t1137 = -t1410 - t1206;
t1068 = t1137 * t1233 + t1426;
t1069 = t1137 * t1236 - t1428;
t1293 = t1068 * t1244 + t1069 * t1240;
t1160 = -t1189 - t1206;
t1083 = t1160 * t1236 - t1379;
t1084 = -t1160 * t1233 - t1378;
t1292 = t1083 * t1244 + t1084 * t1240;
t1173 = -t1189 + t1206;
t1089 = t1173 * t1236 + t1428;
t1091 = -t1173 * t1233 + t1426;
t1291 = t1089 * t1244 + t1091 * t1240;
t1172 = t1410 - t1206;
t1090 = t1172 * t1233 + t1378;
t1092 = t1172 * t1236 - t1379;
t1290 = t1090 * t1244 + t1092 * t1240;
t1108 = t1190 * t1364 - t1146;
t1109 = t1190 * t1363 + t1377;
t1289 = t1108 * t1244 + t1109 * t1240;
t1110 = t1153 * t1233 + t1192 * t1363;
t1111 = t1153 * t1236 - t1192 * t1364;
t1288 = t1110 * t1244 + t1111 * t1240;
t1123 = (-t1190 * t1233 - t1192 * t1236) * t1224;
t1124 = (-t1190 * t1236 + t1192 * t1233) * t1224;
t1287 = t1123 * t1244 + t1124 * t1240;
t1135 = t1253 + (t1234 * g(3) - t1254) * t1244;
t1286 = -t1135 * t1244 + t1136 * t1240;
t1065 = t1135 * t1240 + t1136 * t1244;
t1285 = t1168 * t1244 + t1171 * t1240;
t1169 = -t1208 + t1198;
t1170 = t1199 + t1207;
t1284 = -t1169 * t1244 + t1170 * t1240;
t1283 = t1186 * t1244 - t1366;
t1201 = -t1338 + t1206;
t1282 = t1201 * t1244 + t1368;
t1281 = t1203 * t1240 + t1367;
t1202 = t1337 - t1206;
t1280 = t1202 * t1240 + t1365;
t1180 = t1219 * t1245 - t1220 * t1241;
t1279 = t1234 * t1331;
t576 = pkin(9) * t624 + (-pkin(10) * t1239 + t1350) * t649;
t588 = -pkin(9) * t623 + (-pkin(10) * t1243 + t1404) * t649;
t596 = t1232 * t624 + t1235 * t623;
t558 = -qJ(4) * t596 - t1232 * t576 + t1235 * t588;
t569 = -pkin(3) * t596 - pkin(4) * t623 + pkin(5) * t742 - pkin(10) * t650;
t545 = -pkin(2) * t596 + qJ(3) * t582 + t1233 * t558 + t1236 * t569;
t548 = -qJ(3) * t581 - t1233 * t569 + t1236 * t558;
t561 = -t1240 * t581 + t1244 * t582;
t1275 = pkin(8) * t561 + t1240 * t548 + t1244 * t545;
t633 = -pkin(10) * t804 - t649;
t609 = pkin(9) * t773 + t1239 * t633 + t1350 * t804;
t612 = -pkin(9) * t772 + t1243 * t633 + t1404 * t804;
t704 = t1232 * t773 + t1235 * t772;
t578 = -qJ(4) * t704 - t1232 * t609 + t1235 * t612;
t606 = -pkin(3) * t704 - pkin(4) * t772 - pkin(5) * t939 - pkin(10) * t806 - t650;
t563 = -pkin(2) * t704 + qJ(3) * t674 + t1233 * t578 + t1236 * t606;
t564 = -qJ(3) * t673 - t1233 * t606 + t1236 * t578;
t625 = -t1240 * t673 + t1244 * t674;
t1274 = pkin(8) * t625 + t1240 * t564 + t1244 * t563;
t643 = t1232 * t687 + t1400;
t682 = -pkin(4) * t904 + pkin(9) * t687;
t604 = -pkin(9) * t1400 - qJ(4) * t643 - t1232 * t682;
t613 = -pkin(3) * t643 - pkin(4) * t686;
t565 = -pkin(2) * t643 + qJ(3) * t639 + t1233 * t604 + t1236 * t613;
t572 = -qJ(3) * t638 - t1233 * t613 + t1236 * t604;
t602 = -t1240 * t638 + t1244 * t639;
t1273 = pkin(8) * t602 + t1240 * t572 + t1244 * t565;
t680 = -pkin(5) * t850 + t694;
t713 = -pkin(10) * t850 + t1398;
t619 = -pkin(4) * t850 + pkin(9) * t782 + t1239 * t713 + t1243 * t680;
t627 = -pkin(9) * t781 - t1239 * t680 + t1243 * t713;
t716 = t1232 * t782 + t1235 * t781;
t592 = -qJ(4) * t716 - t1232 * t619 + t1235 * t627;
t636 = -pkin(3) * t716 - pkin(4) * t781 - pkin(5) * t893 - pkin(10) * t851 + t1394;
t570 = -pkin(2) * t716 + qJ(3) * t685 + t1233 * t592 + t1236 * t636;
t573 = -qJ(3) * t684 - t1233 * t636 + t1236 * t592;
t642 = -t1240 * t684 + t1244 * t685;
t1272 = pkin(8) * t642 + t1240 * t573 + t1244 * t570;
t681 = -pkin(5) * t854 + t695;
t715 = -pkin(10) * t854 + t1394;
t620 = -pkin(4) * t854 + pkin(9) * t785 + t1239 * t715 + t1243 * t681;
t628 = -pkin(9) * t784 - t1239 * t681 + t1243 * t715;
t720 = t1232 * t785 + t1235 * t784;
t594 = -qJ(4) * t720 - t1232 * t620 + t1235 * t628;
t640 = -pkin(3) * t720 - pkin(4) * t784 - pkin(5) * t897 - pkin(10) * t855 - t1398;
t571 = -pkin(2) * t720 + qJ(3) * t690 + t1233 * t594 + t1236 * t640;
t575 = -qJ(3) * t689 - t1233 * t640 + t1236 * t594;
t645 = -t1240 * t689 + t1244 * t690;
t1271 = pkin(8) * t645 + t1240 * t575 + t1244 * t571;
t671 = -pkin(4) * t983 + pkin(9) * t879 + t687;
t677 = -pkin(9) * t877 - t686;
t787 = t1232 * t879 + t1235 * t877;
t616 = -qJ(4) * t787 - t1232 * t671 + t1235 * t677;
t748 = -pkin(3) * t787 - pkin(4) * t877;
t603 = -pkin(2) * t787 + qJ(3) * t771 + t1233 * t616 + t1236 * t748;
t605 = -qJ(3) * t770 - t1233 * t748 + t1236 * t616;
t702 = -t1240 * t770 + t1244 * t771;
t1270 = pkin(8) * t702 + t1240 * t605 + t1244 * t603;
t790 = -pkin(4) * t957 + pkin(9) * t920 - t1392;
t825 = -pkin(9) * t919 + t1396;
t842 = t1232 * t920 + t1235 * t919;
t703 = -qJ(4) * t842 - t1232 * t790 + t1235 * t825;
t707 = -pkin(3) * t842 - pkin(4) * t919 + t754;
t629 = -pkin(2) * t842 + qJ(3) * t808 + t1233 * t703 + t1236 * t707;
t641 = -qJ(3) * t807 - t1233 * t707 + t1236 * t703;
t729 = -t1240 * t807 + t1244 * t808;
t1269 = pkin(8) * t729 + t1240 * t641 + t1244 * t629;
t799 = pkin(4) * t1421 + pkin(9) * t936 + t1396;
t831 = -pkin(9) * t935 + t1392;
t859 = t1232 * t936 + t1235 * t935;
t708 = -qJ(4) * t859 - t1232 * t799 + t1235 * t831;
t714 = -pkin(3) * t859 - pkin(4) * t935 + t755;
t637 = -pkin(2) * t859 + qJ(3) * t815 + t1233 * t708 + t1236 * t714;
t646 = -qJ(3) * t814 - t1233 * t714 + t1236 * t708;
t739 = -t1240 * t814 + t1244 * t815;
t1268 = pkin(8) * t739 + t1240 * t646 + t1244 * t637;
t660 = qJ(3) * t767 + (-qJ(4) * t1233 + t1351) * t791;
t676 = -qJ(3) * t766 + (-qJ(4) * t1236 + t1405) * t791;
t692 = -t1240 * t766 + t1244 * t767;
t1267 = pkin(8) * t692 + t1240 * t676 + t1244 * t660;
t985 = -t1056 * t1232 + t1060 * t1235;
t774 = -qJ(4) * t985 - t791;
t726 = qJ(3) * t929 + t1233 * t774 + t1351 * t985;
t738 = -qJ(3) * t928 + t1236 * t774 + t1405 * t985;
t852 = -t1240 * t928 + t1244 * t929;
t1266 = pkin(8) * t852 + t1240 * t738 + t1244 * t726;
t993 = t1085 * t1232 + t1427;
t834 = t1232 * t1252 - t1235 * t1412 + t1352 + (-t1114 * t1235 - t1206 * t1232 - t993) * pkin(3);
t898 = -qJ(4) * t993 + t1401;
t740 = -pkin(2) * t993 + qJ(3) * t933 + t1233 * t898 + t1236 * t834;
t749 = -qJ(3) * t932 - t1233 * t834 + t1236 * t898;
t858 = -t1240 * t932 + t1244 * t933;
t1265 = pkin(8) * t858 + t1240 * t749 + t1244 * t740;
t1003 = t1100 * t1235 - t1385;
t837 = -pkin(3) * t1003 + t884;
t903 = -qJ(4) * t1003 + t1399;
t747 = -pkin(2) * t1003 + qJ(3) * t941 + t1233 * t903 + t1236 * t837;
t752 = -qJ(3) * t940 - t1233 * t837 + t1236 * t903;
t861 = -t1240 * t940 + t1244 * t941;
t1264 = pkin(8) * t861 + t1240 * t752 + t1244 * t747;
t1122 = -t1410 - t1189;
t853 = -pkin(2) * t1122 + qJ(3) * t1041 + t906;
t863 = -qJ(3) * t1039 - t905;
t956 = -t1039 * t1240 + t1041 * t1244;
t1263 = pkin(8) * t956 + t1240 * t863 + t1244 * t853;
t1016 = -qJ(3) * t1068 - t1381;
t973 = -pkin(2) * t1114 + qJ(3) * t1069 + t1380;
t990 = -t1068 * t1240 + t1069 * t1244;
t1262 = pkin(8) * t990 + t1016 * t1240 + t1244 * t973;
t1015 = -t1083 * t1240 + t1084 * t1244;
t1027 = -qJ(3) * t1083 - t1380;
t979 = -pkin(2) * t1413 + qJ(3) * t1084 - t1381;
t1261 = pkin(8) * t1015 + t1027 * t1240 + t1244 * t979;
t1120 = t1169 * t1240 + t1170 * t1244;
t1260 = pkin(8) * t1120 + t1065;
t816 = t1244 * t906 - t1395;
t887 = pkin(2) * t1102 + qJ(3) * t906;
t1257 = pkin(8) * t816 - qJ(3) * t1395 + t1244 * t887;
t1228 = t1234 * t1229;
t1216 = qJDD(1) * t1241 + t1245 * t1246;
t1212 = t1237 * t1331;
t1205 = t1355 * t1362;
t1204 = (t1230 - t1231) * t1362;
t1200 = -pkin(7) * t1216 + g(3) * t1245;
t1174 = t1355 * t1349;
t1167 = (t1353 + (qJD(2) + t1224) * t1389) * t1234;
t1166 = t1198 * t1244 - t1230 * t1349;
t1165 = -t1199 * t1240 - t1231 * t1349;
t1155 = t1202 * t1244 - t1366;
t1154 = -t1201 * t1240 + t1367;
t1148 = t1189 - t1410;
t1134 = (t1228 * t1244 * t1246 + t1168 * t1237) * t1240;
t1133 = (-t1228 * t1359 + t1419) * t1244;
t1121 = -t1168 * t1240 + t1171 * t1244;
t1099 = t1171 * t1234 + t1237 * t1281;
t1098 = -t1170 * t1234 + t1237 * t1280;
t1097 = -t1169 * t1234 + t1237 * t1282;
t1096 = t1234 * t1281 - t1419;
t1094 = -t1167 * t1234 + t1237 * t1283;
t1093 = t1167 * t1237 + t1234 * t1283;
t1088 = -t1204 * t1234 + t1237 * t1285;
t1087 = t1205 * t1234 + t1237 * t1284;
t1086 = -t1205 * t1237 + t1234 * t1284;
t1054 = t1132 * t1232 + t1164 * t1370;
t1052 = t1131 * t1235 - t1163 * t1371;
t1050 = (t1163 * t1232 - t1164 * t1235) * t1190;
t1048 = -t1099 * t1241 + t1156 * t1245;
t1047 = t1099 * t1245 + t1156 * t1241;
t1046 = -t1123 * t1240 + t1124 * t1244;
t1045 = -t1094 * t1241 + t1141 * t1245;
t1044 = t1094 * t1245 + t1141 * t1241;
t1043 = t1176 * t1234 + t1237 * t1286;
t1042 = -t1176 * t1237 + t1234 * t1286;
t1037 = -t1234 * qJDD(2) + (t1287 - t1354) * t1237;
t1033 = -t1110 * t1240 + t1111 * t1244;
t1032 = -t1108 * t1240 + t1109 * t1244;
t1031 = -t1087 * t1241 + t1120 * t1245;
t1030 = t1087 * t1245 + t1120 * t1241;
t1024 = t1127 * t1232 + t1384;
t1023 = t1128 * t1235 + t1429;
t1021 = -t1090 * t1240 + t1092 * t1244;
t1020 = -t1089 * t1240 + t1091 * t1244;
t1014 = -t1375 + (-t1096 * t1234 - t1099 * t1237) * pkin(8);
t998 = -t1374 + (-t1093 * t1234 - t1094 * t1237) * pkin(8);
t997 = t1237 * t1288 - t1340;
t996 = t1237 * t1289 + t1340;
t995 = -pkin(1) * t1096 + t1135 * t1234 + t1237 * t1328;
t989 = -pkin(1) * t1093 + t1136 * t1234 + t1237 * t1329;
t984 = t1057 * t1232 - t1061 * t1235;
t978 = -t1234 * t1277 + t1237 * t1290;
t977 = -t1119 * t1234 + t1237 * t1291;
t976 = pkin(8) * t1065 * t1237 - pkin(1) * t1042;
t975 = -t1043 * t1241 + t1065 * t1245;
t974 = t1043 * t1245 + t1065 * t1241;
t971 = -t1234 * t1413 + t1237 * t1292;
t970 = t1234 * t1292 + t1237 * t1413;
t969 = -pkin(1) * t1086 + t1237 * t1260;
t967 = (-t1042 * t1234 - t1043 * t1237) * pkin(8);
t955 = -t1038 * t1240 + t1040 * t1244;
t954 = -t1114 * t1234 + t1237 * t1293;
t953 = t1114 * t1237 + t1234 * t1293;
t952 = (-t1086 * t1234 - t1087 * t1237) * pkin(8) - t1286;
t934 = pkin(2) * t1083 - t982;
t931 = -t1028 * t1240 + t1029 * t1244;
t930 = pkin(2) * t1068 - t981;
t927 = -t1148 * t1234 + t1237 * t1295;
t924 = -t1122 * t1234 + t1237 * t1294;
t923 = t1122 * t1237 + t1234 * t1294;
t918 = -t1011 * t1240 + t1013 * t1244;
t917 = -t1010 * t1240 + t1012 * t1244;
t912 = t1000 * t1232 + t1235 * t999;
t909 = -t1050 * t1234 + t1237 * t1296;
t908 = t1015 * t1245 - t1241 * t971;
t907 = t1015 * t1241 + t1245 * t971;
t902 = -t1241 * t954 + t1245 * t990;
t901 = t1241 * t990 + t1245 * t954;
t900 = -t1054 * t1234 + t1237 * t1297;
t899 = -t1052 * t1234 + t1237 * t1298;
t881 = -t1240 * t964 + t1244 * t966;
t880 = -t1240 * t963 + t1244 * t965;
t869 = t1232 * t951 + t1235 * t950;
t868 = t1232 * t949 + t1235 * t948;
t865 = t1232 * t947 + t1235 * t945;
t864 = t1232 * t946 + t1235 * t944;
t862 = -t1240 * t942 + t1244 * t943;
t857 = -t1241 * t924 + t1245 * t956;
t856 = t1241 * t956 + t1245 * t924;
t836 = -t1024 * t1234 + t1237 * t1300;
t835 = -t1023 * t1234 + t1237 * t1301;
t830 = -t1003 * t1234 + t1237 * t1303;
t829 = t1003 * t1237 + t1234 * t1303;
t828 = -t1234 * t984 + t1237 * t1302;
t827 = -t1234 * t993 + t1237 * t1304;
t826 = t1234 * t1304 + t1237 * t993;
t820 = -t1234 * t985 + t1237 * t1305;
t819 = t1234 * t1305 + t1237 * t985;
t818 = -t1240 * t910 + t1244 * t911;
t817 = pkin(2) * t940 + pkin(3) * t1061 + qJ(4) * t1004 + t1401;
t813 = t1027 * t1244 - t1240 * t979 + (-t1234 * t970 - t1237 * t971) * pkin(8);
t812 = pkin(2) * t932 + pkin(3) * t1057 + qJ(4) * t994 - t1399;
t811 = t1102 * t1234 + t1237 * t1307;
t810 = -t1102 * t1237 + t1234 * t1307;
t809 = t1016 * t1244 - t1240 * t973 + (-t1234 * t953 - t1237 * t954) * pkin(8);
t793 = t1232 * t886 + t1235 * t885;
t786 = t1232 * t878 + t1235 * t876;
t783 = -pkin(1) * t970 - t1234 * t934 + t1237 * t1261;
t778 = -pkin(1) * t953 - t1234 * t930 + t1237 * t1262;
t777 = -t1234 * t912 + t1237 * t1306;
t769 = -t1241 * t830 + t1245 * t861;
t768 = t1241 * t861 + t1245 * t830;
t763 = t1232 * t847 + t1235 * t845;
t762 = t1232 * t846 + t1235 * t844;
t759 = -t1240 * t839 + t1244 * t841;
t758 = -t1240 * t838 + t1244 * t840;
t757 = -t1241 * t827 + t1245 * t858;
t756 = t1241 * t858 + t1245 * t827;
t751 = -t1241 * t820 + t1245 * t852;
t750 = t1241 * t852 + t1245 * t820;
t746 = -t1240 * t822 + t1244 * t824;
t745 = -t1240 * t821 + t1244 * t823;
t744 = pkin(2) * t928 + pkin(3) * t1067 + qJ(4) * t987 + t792;
t737 = -t1241 * t811 + t1245 * t816;
t736 = t1241 * t816 + t1245 * t811;
t735 = -t1240 * t853 + t1244 * t863 + (-t1234 * t923 - t1237 * t924) * pkin(8);
t730 = -pkin(1) * t923 - t1039 * t1407 + t1237 * t1263;
t728 = -t1234 * t869 + t1237 * t1308;
t727 = -t1234 * t868 + t1237 * t1309;
t723 = t1232 * t798 + t1235 * t796;
t722 = t1232 * t797 + t1235 * t795;
t719 = -t1234 * t865 + t1237 * t1310;
t718 = -t1234 * t864 + t1237 * t1311;
t712 = -t1234 * t859 + t1237 * t1312;
t711 = t1234 * t1312 + t1237 * t859;
t709 = t1232 * t780 + t1235 * t779;
t706 = -t1240 * t775 + t1244 * t776;
t697 = -t1234 * t842 + t1237 * t1313;
t696 = t1234 * t1313 + t1237 * t842;
t693 = pkin(2) * t766 - pkin(3) * t938 + qJ(4) * t792;
t691 = -t1240 * t760 + t1244 * t761;
t688 = -qJ(3) * t1391 - t1240 * t887 + (-t1234 * t810 - t1237 * t811) * pkin(8);
t683 = -pkin(1) * t810 + t1237 * t1257 - t1407 * t905;
t675 = pkin(2) * t814 + pkin(3) * t1421 + qJ(4) * t860 + t1232 * t831 + t1235 * t799;
t672 = -t1234 * t786 + t1237 * t1314;
t670 = -t1234 * t787 + t1237 * t1315;
t669 = t1234 * t1315 + t1237 * t787;
t668 = -t1240 * t732 + t1244 * t734;
t667 = -t1240 * t731 + t1244 * t733;
t666 = -t1234 * t791 + t1237 * t1316;
t665 = t1234 * t1316 + t1237 * t791;
t664 = pkin(2) * t807 - pkin(3) * t957 + qJ(4) * t843 + t1232 * t825 + t1235 * t790;
t663 = -t1234 * t793 + t1237 * t1317;
t662 = -t1241 * t712 + t1245 * t739;
t661 = t1241 * t739 + t1245 * t712;
t659 = -t1241 * t697 + t1245 * t729;
t658 = t1241 * t729 + t1245 * t697;
t657 = -t1240 * t747 + t1244 * t752 + (-t1234 * t829 - t1237 * t830) * pkin(8);
t656 = -t1240 * t740 + t1244 * t749 + (-t1234 * t826 - t1237 * t827) * pkin(8);
t655 = -t1234 * t763 + t1237 * t1318;
t654 = -t1234 * t762 + t1237 * t1319;
t653 = -t1240 * t699 + t1244 * t701;
t652 = -t1240 * t698 + t1244 * t700;
t651 = -pkin(1) * t829 - t1234 * t817 + t1237 * t1264;
t648 = -t1240 * t726 + t1244 * t738 + (-t1234 * t819 - t1237 * t820) * pkin(8);
t647 = -pkin(1) * t826 - t1234 * t812 + t1237 * t1265;
t635 = -t1241 * t670 + t1245 * t702;
t634 = t1241 * t702 + t1245 * t670;
t632 = -t1241 * t666 + t1245 * t692;
t631 = t1241 * t692 + t1245 * t666;
t630 = -t1240 * t678 + t1244 * t679;
t626 = -pkin(1) * t819 - t1234 * t744 + t1237 * t1266;
t622 = -t1234 * t723 + t1237 * t1320;
t621 = -t1234 * t722 + t1237 * t1321;
t618 = -t1234 * t720 + t1237 * t1322;
t617 = t1234 * t1322 + t1237 * t720;
t615 = -t1234 * t716 + t1237 * t1323;
t614 = t1234 * t1323 + t1237 * t716;
t611 = -t1234 * t709 + t1237 * t1324;
t610 = pkin(2) * t770 - pkin(3) * t983 + qJ(4) * t789 + t1232 * t677 + t1235 * t671;
t608 = -t1234 * t704 + t1237 * t1325;
t607 = t1234 * t1325 + t1237 * t704;
t601 = -t1241 * t618 + t1245 * t645;
t600 = t1241 * t645 + t1245 * t618;
t599 = -t1241 * t615 + t1245 * t642;
t598 = t1241 * t642 + t1245 * t615;
t595 = -t1240 * t660 + t1244 * t676 + (-t1234 * t665 - t1237 * t666) * pkin(8);
t593 = -t1240 * t637 + t1244 * t646 + (-t1234 * t711 - t1237 * t712) * pkin(8);
t591 = -t1241 * t608 + t1245 * t625;
t590 = t1241 * t625 + t1245 * t608;
t589 = -pkin(1) * t665 - t1234 * t693 + t1237 * t1267;
t587 = -t1240 * t629 + t1244 * t641 + (-t1234 * t696 - t1237 * t697) * pkin(8);
t586 = -t1234 * t643 + t1237 * t1326;
t585 = t1234 * t1326 + t1237 * t643;
t584 = pkin(2) * t638 - pkin(3) * t904 - pkin(9) * t1402 + qJ(4) * t644 + t1235 * t682;
t583 = -pkin(1) * t711 - t1234 * t675 + t1237 * t1268;
t580 = pkin(2) * t689 - pkin(3) * t854 + qJ(4) * t721 + t1232 * t628 + t1235 * t620;
t579 = pkin(2) * t684 - pkin(3) * t850 + qJ(4) * t717 + t1232 * t627 + t1235 * t619;
t577 = -pkin(1) * t696 - t1234 * t664 + t1237 * t1269;
t574 = pkin(2) * t673 - pkin(3) * t804 + qJ(4) * t705 + t1232 * t612 + t1235 * t609;
t568 = -t1241 * t586 + t1245 * t602;
t567 = t1241 * t602 + t1245 * t586;
t566 = -t1240 * t603 + t1244 * t605 + (-t1234 * t669 - t1237 * t670) * pkin(8);
t562 = -pkin(1) * t669 - t1234 * t610 + t1237 * t1270;
t560 = -t1234 * t596 + t1237 * t1327;
t559 = t1234 * t1327 + t1237 * t596;
t557 = -t1240 * t571 + t1244 * t575 + (-t1234 * t617 - t1237 * t618) * pkin(8);
t556 = -t1240 * t570 + t1244 * t573 + (-t1234 * t614 - t1237 * t615) * pkin(8);
t555 = pkin(2) * t581 - pkin(3) * t649 + qJ(4) * t597 + t1232 * t588 + t1235 * t576;
t554 = -pkin(1) * t617 - t1234 * t580 + t1237 * t1271;
t553 = -pkin(1) * t614 - t1234 * t579 + t1237 * t1272;
t552 = -t1240 * t563 + t1244 * t564 + (-t1234 * t607 - t1237 * t608) * pkin(8);
t551 = -t1241 * t560 + t1245 * t561;
t550 = t1241 * t561 + t1245 * t560;
t549 = -t1240 * t565 + t1244 * t572 + (-t1234 * t585 - t1237 * t586) * pkin(8);
t547 = -pkin(1) * t585 - t1234 * t584 + t1237 * t1273;
t546 = -pkin(1) * t607 - t1234 * t574 + t1237 * t1274;
t544 = -t1240 * t545 + t1244 * t548 + (-t1234 * t559 - t1237 * t560) * pkin(8);
t543 = -pkin(1) * t559 - t1234 * t555 + t1237 * t1275;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1216, -t1217, 0, t1181, 0, 0, 0, 0, 0, 0, t1048, t1045, t1031, t975, 0, 0, 0, 0, 0, 0, t902, t908, t857, t737, 0, 0, 0, 0, 0, 0, t757, t769, t751, t632, 0, 0, 0, 0, 0, 0, t659, t662, t635, t568, 0, 0, 0, 0, 0, 0, t599, t601, t591, t551; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1217, -t1216, 0, t1180, 0, 0, 0, 0, 0, 0, t1047, t1044, t1030, t974, 0, 0, 0, 0, 0, 0, t901, t907, t856, t736, 0, 0, 0, 0, 0, 0, t756, t768, t750, t631, 0, 0, 0, 0, 0, 0, t658, t661, t634, t567, 0, 0, 0, 0, 0, 0, t598, t600, t590, t550; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1096, t1093, t1086, t1042, 0, 0, 0, 0, 0, 0, t953, t970, t923, t810, 0, 0, 0, 0, 0, 0, t826, t829, t819, t665, 0, 0, 0, 0, 0, 0, t696, t711, t669, t585, 0, 0, 0, 0, 0, 0, t614, t617, t607, t559; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1217, 0, -t1216, 0, t1330, -t1200, -t1180, -pkin(7) * t1180, -t1134 * t1241 + t1166 * t1245, -t1088 * t1241 + t1121 * t1245, -t1097 * t1241 + t1154 * t1245, -t1133 * t1241 + t1165 * t1245, -t1098 * t1241 + t1155 * t1245, t1245 * t1174 + t1241 * t1279, -pkin(7) * t1047 + t1014 * t1245 - t1241 * t995, -pkin(7) * t1044 - t1241 * t989 + t1245 * t998, -pkin(7) * t1030 - t1241 * t969 + t1245 * t952, -pkin(7) * t974 - t1241 * t976 + t1245 * t967, t1033 * t1245 - t1241 * t997, -t1241 * t927 + t1245 * t955, t1020 * t1245 - t1241 * t977, t1032 * t1245 - t1241 * t996, t1021 * t1245 - t1241 * t978, -t1037 * t1241 + t1046 * t1245, -pkin(7) * t901 - t1241 * t778 + t1245 * t809, -pkin(7) * t907 - t1241 * t783 + t1245 * t813, -pkin(7) * t856 - t1241 * t730 + t1245 * t735, -pkin(7) * t736 - t1241 * t683 + t1245 * t688, -t1241 * t900 + t1245 * t918, -t1241 * t828 + t1245 * t862, -t1241 * t835 + t1245 * t880, -t1241 * t899 + t1245 * t917, -t1241 * t836 + t1245 * t881, -t1241 * t909 + t1245 * t931, -pkin(7) * t756 - t1241 * t647 + t1245 * t656, -pkin(7) * t768 - t1241 * t651 + t1245 * t657, -pkin(7) * t750 - t1241 * t626 + t1245 * t648, -pkin(7) * t631 - t1241 * t589 + t1245 * t595, -t1241 * t728 + t1245 * t759, -t1241 * t672 + t1245 * t706, -t1241 * t718 + t1245 * t745, -t1241 * t727 + t1245 * t758, -t1241 * t719 + t1245 * t746, -t1241 * t777 + t1245 * t818, -pkin(7) * t658 - t1241 * t577 + t1245 * t587, -pkin(7) * t661 - t1241 * t583 + t1245 * t593, -pkin(7) * t634 - t1241 * t562 + t1245 * t566, -pkin(7) * t567 - t1241 * t547 + t1245 * t549, -t1241 * t655 + t1245 * t668, -t1241 * t611 + t1245 * t630, -t1241 * t621 + t1245 * t652, -t1241 * t654 + t1245 * t667, -t1241 * t622 + t1245 * t653, -t1241 * t663 + t1245 * t691, -pkin(7) * t598 - t1241 * t553 + t1245 * t556, -pkin(7) * t600 - t1241 * t554 + t1245 * t557, -pkin(7) * t590 - t1241 * t546 + t1245 * t552, -pkin(7) * t550 - t1241 * t543 + t1245 * t544; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1216, 0, t1217, 0, t1200, t1330, t1181, pkin(7) * t1181, t1134 * t1245 + t1166 * t1241, t1088 * t1245 + t1121 * t1241, t1097 * t1245 + t1154 * t1241, t1133 * t1245 + t1165 * t1241, t1098 * t1245 + t1155 * t1241, t1241 * t1174 - t1245 * t1279, pkin(7) * t1048 + t1014 * t1241 + t1245 * t995, pkin(7) * t1045 + t1241 * t998 + t1245 * t989, pkin(7) * t1031 + t1241 * t952 + t1245 * t969, pkin(7) * t975 + t1241 * t967 + t1245 * t976, t1033 * t1241 + t1245 * t997, t1241 * t955 + t1245 * t927, t1020 * t1241 + t1245 * t977, t1032 * t1241 + t1245 * t996, t1021 * t1241 + t1245 * t978, t1037 * t1245 + t1046 * t1241, pkin(7) * t902 + t1241 * t809 + t1245 * t778, pkin(7) * t908 + t1241 * t813 + t1245 * t783, pkin(7) * t857 + t1241 * t735 + t1245 * t730, pkin(7) * t737 + t1241 * t688 + t1245 * t683, t1241 * t918 + t1245 * t900, t1241 * t862 + t1245 * t828, t1241 * t880 + t1245 * t835, t1241 * t917 + t1245 * t899, t1241 * t881 + t1245 * t836, t1241 * t931 + t1245 * t909, pkin(7) * t757 + t1241 * t656 + t1245 * t647, pkin(7) * t769 + t1241 * t657 + t1245 * t651, pkin(7) * t751 + t1241 * t648 + t1245 * t626, pkin(7) * t632 + t1241 * t595 + t1245 * t589, t1241 * t759 + t1245 * t728, t1241 * t706 + t1245 * t672, t1241 * t745 + t1245 * t718, t1241 * t758 + t1245 * t727, t1241 * t746 + t1245 * t719, t1241 * t818 + t1245 * t777, pkin(7) * t659 + t1241 * t587 + t1245 * t577, pkin(7) * t662 + t1241 * t593 + t1245 * t583, pkin(7) * t635 + t1241 * t566 + t1245 * t562, pkin(7) * t568 + t1241 * t549 + t1245 * t547, t1241 * t668 + t1245 * t655, t1241 * t630 + t1245 * t611, t1241 * t652 + t1245 * t621, t1241 * t667 + t1245 * t654, t1241 * t653 + t1245 * t622, t1241 * t691 + t1245 * t663, pkin(7) * t599 + t1241 * t556 + t1245 * t553, pkin(7) * t601 + t1241 * t557 + t1245 * t554, pkin(7) * t591 + t1241 * t552 + t1245 * t546, pkin(7) * t551 + t1241 * t544 + t1245 * t543; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1219, t1220, 0, 0, (t1198 * t1234 + t1244 * t1418) * t1240, t1204 * t1237 + t1234 * t1285, t1169 * t1237 + t1234 * t1282, (t1199 * t1234 - t1240 * t1418) * t1244, t1170 * t1237 + t1234 * t1280, t1212, pkin(1) * t1099 - t1135 * t1237 + t1234 * t1328, pkin(1) * t1094 - t1136 * t1237 + t1234 * t1329, pkin(1) * t1087 + t1234 * t1260, pkin(1) * t1043 + t1065 * t1403, t1234 * t1288 + t1339, t1148 * t1237 + t1234 * t1295, t1119 * t1237 + t1234 * t1291, t1234 * t1289 - t1339, t1234 * t1290 + t1237 * t1277, t1234 * t1287 + t1212, pkin(1) * t954 + t1234 * t1262 + t1237 * t930, pkin(1) * t971 + t1234 * t1261 + t1237 * t934, pkin(1) * t924 + t1039 * t1406 + t1234 * t1263, pkin(1) * t811 + t1234 * t1257 + t1406 * t905, t1054 * t1237 + t1234 * t1297, t1234 * t1302 + t1237 * t984, t1023 * t1237 + t1234 * t1301, t1052 * t1237 + t1234 * t1298, t1024 * t1237 + t1234 * t1300, t1050 * t1237 + t1234 * t1296, pkin(1) * t827 + t1234 * t1265 + t1237 * t812, pkin(1) * t830 + t1234 * t1264 + t1237 * t817, pkin(1) * t820 + t1234 * t1266 + t1237 * t744, pkin(1) * t666 + t1234 * t1267 + t1237 * t693, t1234 * t1308 + t1237 * t869, t1234 * t1314 + t1237 * t786, t1234 * t1311 + t1237 * t864, t1234 * t1309 + t1237 * t868, t1234 * t1310 + t1237 * t865, t1234 * t1306 + t1237 * t912, pkin(1) * t697 + t1234 * t1269 + t1237 * t664, pkin(1) * t712 + t1234 * t1268 + t1237 * t675, pkin(1) * t670 + t1234 * t1270 + t1237 * t610, pkin(1) * t586 + t1234 * t1273 + t1237 * t584, t1234 * t1318 + t1237 * t763, t1234 * t1324 + t1237 * t709, t1234 * t1321 + t1237 * t722, t1234 * t1319 + t1237 * t762, t1234 * t1320 + t1237 * t723, t1234 * t1317 + t1237 * t793, pkin(1) * t615 + t1234 * t1272 + t1237 * t579, pkin(1) * t618 + t1234 * t1271 + t1237 * t580, pkin(1) * t608 + t1234 * t1274 + t1237 * t574, pkin(1) * t560 + t1234 * t1275 + t1237 * t555;];
tauB_reg  = t1;
