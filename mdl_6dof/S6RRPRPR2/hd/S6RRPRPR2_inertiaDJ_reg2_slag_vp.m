% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR2_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:13:55
% EndTime: 2019-03-09 10:14:02
% DurationCPUTime: 2.35s
% Computational Cost: add. (5304->203), mult. (11313->351), div. (0->0), fcn. (11575->8), ass. (0->129)
t162 = sin(qJ(4));
t163 = cos(qJ(4));
t148 = sin(pkin(10));
t154 = -qJ(3) - pkin(7);
t169 = t148 * t154;
t171 = -t148 * pkin(8) + t169;
t149 = cos(pkin(10));
t168 = t149 * t154;
t172 = -t149 * pkin(8) + t168;
t78 = sin(qJ(2));
t80 = cos(qJ(2));
t91 = t171 * t80 + t172 * t78;
t92 = t171 * t78 - t172 * t80;
t25 = t162 * t92 - t163 * t91;
t126 = t149 * pkin(2) + pkin(3);
t132 = t148 * pkin(2);
t173 = -t163 * t126 + t162 * t132;
t77 = sin(qJ(6));
t75 = t77 ^ 2;
t79 = cos(qJ(6));
t76 = t79 ^ 2;
t167 = (t75 - t76) * qJD(6);
t166 = pkin(4) + pkin(9);
t128 = qJD(2) * t148;
t129 = qJD(2) * t149;
t112 = -t78 * t128 + t80 * t129;
t152 = t80 * t128 + t78 * t129;
t102 = t148 * t78 - t149 * t80;
t103 = t148 * t80 + t149 * t78;
t41 = -t162 * t102 + t163 * t103;
t29 = t41 * qJD(4) + t162 * t112 + t163 * t152;
t86 = t41 * pkin(5) + t25;
t40 = t163 * t102 + t162 * t103;
t28 = t40 * qJD(4) - t163 * t112 + t162 * t152;
t142 = t78 * qJD(2);
t136 = pkin(2) * t142;
t46 = t152 * pkin(3) + t136;
t95 = t28 * qJ(5) - t41 * qJD(5) + t46;
t170 = -qJD(6) * t86 - t166 * t29 - t95;
t26 = t162 * t91 + t163 * t92;
t82 = 0.2e1 * qJD(5);
t145 = qJD(6) * t77;
t71 = -t80 * pkin(2) - pkin(1);
t49 = t102 * pkin(3) + t71;
t94 = -t41 * qJ(5) + t49;
t19 = t166 * t40 + t94;
t130 = qJD(2) * t154;
t104 = qJD(3) * t80 + t78 * t130;
t105 = -qJD(3) * t78 + t80 * t130;
t36 = -t148 * t104 + t149 * t105;
t85 = -t112 * pkin(8) + t36;
t37 = t149 * t104 + t148 * t105;
t87 = -t152 * pkin(8) + t37;
t13 = t26 * qJD(4) + t162 * t87 - t163 * t85;
t83 = -t28 * pkin(5) + t13;
t2 = t19 * t145 + t170 * t79 - t77 * t83;
t165 = t2 * t77;
t12 = t25 * qJD(4) - t162 * t85 - t163 * t87;
t7 = -t29 * pkin(5) - t12;
t5 = t7 * t77;
t6 = t7 * t79;
t144 = qJD(6) * t79;
t20 = -t40 * pkin(5) + t26;
t164 = t20 * t144 + t5;
t60 = t162 * t126 + t163 * t132;
t51 = t60 * qJD(4);
t161 = t25 * t51;
t160 = t29 * t75;
t159 = t29 * t77;
t158 = t29 * t79;
t157 = t40 * t29;
t156 = t41 * t51;
t50 = t173 * qJD(4);
t48 = -qJD(5) + t50;
t56 = qJ(5) + t60;
t155 = t48 * t56;
t27 = t76 * t29;
t153 = t56 * t144 - t48 * t77;
t140 = qJ(5) * qJD(6);
t151 = qJD(5) * t77 + t79 * t140;
t147 = qJD(6) * t20;
t143 = qJD(6) * t166;
t141 = t80 * qJD(2);
t139 = 0.2e1 * t157;
t23 = -0.2e1 * t41 * t28;
t138 = -0.2e1 * pkin(1) * qJD(2);
t137 = t77 * t158;
t135 = t78 * t141;
t134 = t77 * t144;
t33 = (t75 + t76) * t51;
t39 = t40 ^ 2;
t127 = t39 * t134;
t10 = -t77 * t19 + t79 * t86;
t11 = t79 * t19 + t77 * t86;
t125 = t10 * t79 + t11 * t77;
t124 = -t10 * t77 + t11 * t79;
t123 = -t12 * t26 + t13 * t25;
t118 = -qJ(5) * t29 - qJD(5) * t40;
t117 = -qJ(5) * t48 + qJD(5) * t56;
t116 = t41 * t144 - t28 * t77;
t115 = t41 * t145 + t79 * t28;
t114 = t40 * t144 + t159;
t113 = t40 * t145 - t158;
t57 = -pkin(4) + t173;
t55 = -pkin(9) + t57;
t111 = qJD(6) * (t40 * t56 - t41 * t55);
t110 = qJD(6) * (qJ(5) * t40 + t166 * t41);
t109 = 0.2e1 * t28 * t40 - 0.2e1 * t29 * t41;
t108 = -t29 * t56 + t40 * t48 + t156;
t106 = t166 * t28 + t118;
t101 = -t28 * t55 + t108;
t3 = -t19 * t144 + t170 * t77 + t79 * t83;
t98 = t124 * qJD(6) + t3 * t79 - t165;
t97 = -t125 * qJD(6) - t2 * t79 - t3 * t77;
t96 = 0.2e1 * t12 * t40 + 0.2e1 * t13 * t41 - 0.2e1 * t25 * t28 - 0.2e1 * t26 * t29;
t74 = qJ(5) * t82;
t73 = qJD(5) * t79;
t65 = -0.2e1 * t134;
t64 = 0.2e1 * t134;
t62 = 0.2e1 * t167;
t45 = t48 * t79;
t43 = -t168 * t80 + t169 * t78;
t42 = t168 * t78 + t169 * t80;
t24 = t40 * pkin(4) + t94;
t16 = -t40 * t167 + t137;
t15 = -0.4e1 * t40 * t134 - t160 + t27;
t14 = t29 * pkin(4) + t95;
t1 = -t10 * t145 - t165 + (qJD(6) * t11 + t3) * t79;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t135, 0.2e1 * (-t78 ^ 2 + t80 ^ 2) * qJD(2), 0, -0.2e1 * t135, 0, 0, t78 * t138, t80 * t138, 0, 0, 0.2e1 * t103 * t112, -0.2e1 * t112 * t102 - 0.2e1 * t103 * t152, 0, 0.2e1 * t102 * t152, 0, 0, 0.2e1 * t102 * t136 + 0.2e1 * t71 * t152, 0.2e1 * t103 * t136 + 0.2e1 * t71 * t112, -0.2e1 * t37 * t102 - 0.2e1 * t36 * t103 - 0.2e1 * t42 * t112 - 0.2e1 * t43 * t152, 0.2e1 * t71 * t136 + 0.2e1 * t36 * t42 + 0.2e1 * t37 * t43, t23, t109, 0, t139, 0, 0, 0.2e1 * t29 * t49 + 0.2e1 * t40 * t46, -0.2e1 * t28 * t49 + 0.2e1 * t41 * t46, t96, 0.2e1 * t46 * t49 + 0.2e1 * t123, 0, 0, 0, t23, t109, t139, t96, -0.2e1 * t14 * t40 - 0.2e1 * t24 * t29, -0.2e1 * t14 * t41 + 0.2e1 * t24 * t28, 0.2e1 * t14 * t24 + 0.2e1 * t123, 0.2e1 * t75 * t157 + 0.2e1 * t127, 0.4e1 * t40 * t137 - 0.2e1 * t39 * t167, 0.2e1 * t116 * t40 + 0.2e1 * t41 * t159, 0.2e1 * t40 * t27 - 0.2e1 * t127, -0.2e1 * t115 * t40 + 0.2e1 * t41 * t158, t23, -0.2e1 * t10 * t28 + 0.2e1 * t113 * t20 + 0.2e1 * t3 * t41 - 0.2e1 * t40 * t6, 0.2e1 * t11 * t28 + 0.2e1 * t114 * t20 + 0.2e1 * t2 * t41 + 0.2e1 * t40 * t5, 0.2e1 * t124 * t29 + 0.2e1 * t97 * t40, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t20 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, 0, -t142, 0, -pkin(7) * t141, pkin(7) * t142, 0, 0, 0, 0, t112, 0, -t152, 0, t36, -t37 (-t149 * t112 - t148 * t152) * pkin(2) (t148 * t37 + t149 * t36) * pkin(2), 0, 0, -t28, 0, -t29, 0, -t13, t12, -t173 * t28 - t29 * t60 + t40 * t50 + t156, -t12 * t60 + t13 * t173 - t26 * t50 + t161, 0, t28, t29, 0, 0, 0, -t28 * t57 + t108, t13, -t12, -t12 * t56 + t13 * t57 - t26 * t48 + t161, t16, t15, -t115, -t16, -t116, 0, t101 * t79 + t77 * t111 + t164, t6 + t79 * t111 + (-t101 - t147) * t77, -t1, t125 * t51 - t20 * t48 + t98 * t55 + t56 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t51, 0.2e1 * t50, 0, 0.2e1 * t173 * t51 - 0.2e1 * t50 * t60, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t51, -0.2e1 * t48, 0.2e1 * t51 * t57 - 0.2e1 * t155, t65, t62, 0, t64, 0, 0, 0.2e1 * t153, -0.2e1 * t56 * t145 - 0.2e1 * t45, -0.2e1 * t33, 0.2e1 * t55 * t33 - 0.2e1 * t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, t112, 0, t136, 0, 0, 0, 0, 0, 0, t29, -t28, 0, t46, 0, 0, 0, 0, 0, 0, 0, -t29, t28, t14, 0, 0, 0, 0, 0, 0, -t116, t115, t27 + t160, t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, -t29, 0, -t13, t12, 0, 0, 0, t28, t29, 0, 0, 0, pkin(4) * t28 + t118, t13, -t12, -pkin(4) * t13 - qJ(5) * t12 + qJD(5) * t26, t16, t15, -t115, -t16, -t116, 0, t106 * t79 + t77 * t110 + t164, t6 + t79 * t110 + (-t106 - t147) * t77, -t1, qJ(5) * t7 + qJD(5) * t20 - t166 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, t82 - t50, -pkin(4) * t51 + t117, t65, t62, 0, t64, 0, 0, t151 + t153, -t45 + t73 + (-qJ(5) - t56) * t145, -t33, -t166 * t33 + t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, t74, t65, t62, 0, t64, 0, 0, 0.2e1 * t151, -0.2e1 * t77 * t140 + 0.2e1 * t73, 0, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, 0, t13, 0, 0, 0, 0, 0, 0, -t115, -t116, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, 0, -t113, -t28, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, -t144, 0, -t55 * t145 + t51 * t79, -t55 * t144 - t51 * t77, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144, t145, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, -t144, 0, t77 * t143, t79 * t143, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, -t144, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
