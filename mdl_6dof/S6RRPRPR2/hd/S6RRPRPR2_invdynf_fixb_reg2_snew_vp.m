% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 13:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 13:06:07
% EndTime: 2019-05-06 13:06:16
% DurationCPUTime: 9.82s
% Computational Cost: add. (37402->334), mult. (88519->406), div. (0->0), fcn. (65736->10), ass. (0->235)
t2272 = qJDD(2) + qJDD(4);
t2276 = sin(pkin(10));
t2277 = cos(pkin(10));
t2284 = cos(qJ(2));
t2328 = qJD(1) * t2284;
t2280 = sin(qJ(2));
t2329 = qJD(1) * t2280;
t2242 = -t2276 * t2329 + t2277 * t2328;
t2243 = (t2276 * t2284 + t2277 * t2280) * qJD(1);
t2279 = sin(qJ(4));
t2283 = cos(qJ(4));
t2219 = -t2283 * t2242 + t2243 * t2279;
t2221 = t2242 * t2279 + t2243 * t2283;
t2320 = t2221 * t2219;
t2183 = t2272 + t2320;
t2273 = qJD(2) + qJD(4);
t2271 = t2273 ^ 2;
t2332 = t2221 ^ 2;
t2306 = -t2271 - t2332;
t2165 = t2183 * t2279 - t2283 * t2306;
t2167 = t2183 * t2283 + t2279 * t2306;
t2132 = t2165 * t2277 + t2167 * t2276;
t2135 = t2165 * t2276 - t2167 * t2277;
t2111 = t2132 * t2280 + t2135 * t2284;
t2281 = sin(qJ(1));
t2348 = t2111 * t2281;
t2285 = cos(qJ(1));
t2347 = t2111 * t2285;
t2218 = t2219 ^ 2;
t2182 = -t2271 - t2218;
t2299 = t2272 - t2320;
t2149 = t2182 * t2279 + t2283 * t2299;
t2152 = -t2182 * t2283 + t2279 * t2299;
t2122 = t2149 * t2277 - t2152 * t2276;
t2125 = t2149 * t2276 + t2152 * t2277;
t2096 = t2122 * t2280 + t2125 * t2284;
t2346 = t2096 * t2281;
t2345 = t2096 * t2285;
t2108 = t2132 * t2284 - t2135 * t2280;
t2093 = t2122 * t2284 - t2125 * t2280;
t2308 = qJD(2) * t2328;
t2310 = t2280 * qJDD(1);
t2249 = t2308 + t2310;
t2269 = t2284 * qJDD(1);
t2309 = qJD(2) * t2329;
t2250 = t2269 - t2309;
t2228 = -t2249 * t2276 + t2277 * t2250;
t2229 = t2249 * t2277 + t2250 * t2276;
t2296 = t2279 * t2228 + t2283 * t2229;
t2315 = qJD(4) - t2273;
t2162 = t2219 * t2315 - t2296;
t2344 = t2162 * t2279;
t2343 = t2162 * t2283;
t2275 = t2284 ^ 2;
t2287 = qJD(1) ^ 2;
t2294 = qJD(2) * pkin(2) - qJ(3) * t2329;
t2258 = t2281 * g(1) - t2285 * g(2);
t2295 = qJDD(1) * pkin(1) + t2258;
t2200 = t2250 * pkin(2) - t2294 * t2329 - qJDD(3) + t2295 + (qJ(3) * t2275 + pkin(7)) * t2287;
t2241 = t2242 ^ 2;
t2301 = qJD(2) * pkin(3) - pkin(8) * t2243;
t2169 = t2228 * pkin(3) + t2241 * pkin(8) - t2243 * t2301 + t2200;
t2214 = t2273 * t2221;
t2179 = -qJD(4) * t2219 + t2296;
t2321 = t2219 * t2273;
t2303 = -t2179 + t2321;
t2342 = pkin(4) * t2214 + t2303 * qJ(5) - 0.2e1 * qJD(5) * t2221 - t2169;
t2337 = -t2218 - t2332;
t2341 = t2281 * t2337;
t2340 = t2285 * t2337;
t2278 = sin(qJ(6));
t2282 = cos(qJ(6));
t2201 = -t2282 * t2219 + t2273 * t2278;
t2335 = t2201 ^ 2;
t2203 = t2219 * t2278 + t2273 * t2282;
t2334 = t2203 ^ 2;
t2217 = qJD(6) + t2221;
t2333 = t2217 ^ 2;
t2331 = t2243 ^ 2;
t2330 = 0.2e1 * qJD(5);
t2327 = qJD(2) * t2242;
t2326 = qJD(2) * t2243;
t2322 = t2201 * t2203;
t2319 = t2242 * t2243;
t2318 = t2275 * t2287;
t2259 = -g(1) * t2285 - g(2) * t2281;
t2246 = -pkin(1) * t2287 + qJDD(1) * pkin(7) + t2259;
t2317 = t2280 * t2246;
t2316 = t2280 * t2287;
t2314 = qJD(4) + t2273;
t2313 = qJD(6) - t2217;
t2312 = qJD(6) + t2217;
t2274 = t2280 ^ 2;
t2311 = t2274 + t2275;
t2196 = qJDD(2) * pkin(2) - t2249 * qJ(3) - t2317 + (qJ(3) * qJD(1) * qJD(2) + pkin(2) * t2316 - g(3)) * t2284;
t2235 = -t2280 * g(3) + t2284 * t2246;
t2197 = -pkin(2) * t2318 + t2250 * qJ(3) - qJD(2) * t2294 + t2235;
t2172 = 0.2e1 * qJD(3) * t2242 + t2276 * t2196 + t2277 * t2197;
t2307 = -t2333 - t2334;
t2208 = -t2229 + t2327;
t2171 = -0.2e1 * qJD(3) * t2243 + t2277 * t2196 - t2276 * t2197;
t2225 = qJDD(2) + t2319;
t2143 = pkin(3) * t2225 + pkin(8) * t2208 + t2171;
t2148 = -t2241 * pkin(3) + t2228 * pkin(8) - qJD(2) * t2301 + t2172;
t2118 = t2283 * t2143 - t2279 * t2148;
t2302 = -t2283 * t2228 + t2279 * t2229;
t2178 = qJD(4) * t2221 + t2302;
t2304 = t2282 * t2178 - t2278 * t2272;
t2187 = pkin(4) * t2219 - qJ(5) * t2221;
t2112 = -t2272 * pkin(4) - t2271 * qJ(5) + t2221 * t2187 + qJDD(5) - t2118;
t2090 = -t2299 * pkin(9) + (t2179 + t2321) * pkin(5) + t2112;
t2211 = pkin(5) * t2221 - pkin(9) * t2273;
t2092 = -t2218 * pkin(5) - t2221 * t2211 + (pkin(4) + pkin(9)) * t2178 + t2342;
t2298 = t2090 * t2282 - t2092 * t2278;
t2119 = t2279 * t2143 + t2283 * t2148;
t2297 = -t2278 * t2178 - t2282 * t2272;
t2293 = qJDD(6) + t2179;
t2292 = t2201 * t2313 + t2297;
t2290 = -t2271 * pkin(4) + t2272 * qJ(5) - t2219 * t2187 + t2119;
t2289 = t2293 - t2322;
t2286 = qJD(2) ^ 2;
t2263 = t2284 * t2316;
t2262 = -t2286 - t2318;
t2261 = -t2274 * t2287 - t2286;
t2257 = -qJDD(2) + t2263;
t2256 = qJDD(2) + t2263;
t2255 = t2311 * t2287;
t2254 = -qJDD(1) * t2281 - t2285 * t2287;
t2253 = qJDD(1) * t2285 - t2281 * t2287;
t2252 = t2311 * qJDD(1);
t2251 = t2269 - 0.2e1 * t2309;
t2248 = 0.2e1 * t2308 + t2310;
t2245 = t2287 * pkin(7) + t2295;
t2236 = -t2286 - t2331;
t2234 = -t2284 * g(3) - t2317;
t2233 = t2257 * t2284 - t2261 * t2280;
t2232 = -t2256 * t2280 + t2262 * t2284;
t2231 = t2257 * t2280 + t2261 * t2284;
t2230 = t2256 * t2284 + t2262 * t2280;
t2226 = -qJDD(2) + t2319;
t2224 = -t2286 - t2241;
t2207 = t2229 + t2327;
t2206 = t2228 + t2326;
t2205 = -t2228 + t2326;
t2204 = -t2241 - t2331;
t2199 = -t2234 * t2280 + t2235 * t2284;
t2198 = t2234 * t2284 + t2235 * t2280;
t2192 = t2226 * t2277 - t2236 * t2276;
t2191 = t2226 * t2276 + t2236 * t2277;
t2190 = t2224 * t2277 - t2225 * t2276;
t2189 = t2224 * t2276 + t2225 * t2277;
t2181 = t2206 * t2277 - t2208 * t2276;
t2180 = t2206 * t2276 + t2208 * t2277;
t2174 = -t2191 * t2280 + t2192 * t2284;
t2173 = t2191 * t2284 + t2192 * t2280;
t2164 = -t2333 - t2335;
t2163 = -t2334 - t2335;
t2160 = -t2219 * t2314 + t2296;
t2158 = -t2178 + t2214;
t2157 = t2178 + t2214;
t2156 = t2221 * t2315 + t2302;
t2155 = t2221 * t2314 + t2302;
t2154 = -t2189 * t2280 + t2190 * t2284;
t2153 = t2189 * t2284 + t2190 * t2280;
t2147 = -t2293 - t2322;
t2145 = -t2180 * t2280 + t2181 * t2284;
t2144 = t2180 * t2284 + t2181 * t2280;
t2141 = -t2201 * t2312 - t2297;
t2140 = -t2203 * t2313 + t2304;
t2139 = t2203 * t2312 - t2304;
t2137 = -t2171 * t2276 + t2172 * t2277;
t2136 = t2171 * t2277 + t2172 * t2276;
t2131 = t2158 * t2283 - t2344;
t2130 = -t2156 * t2283 - t2344;
t2129 = t2158 * t2279 + t2343;
t2128 = -t2156 * t2279 + t2343;
t2127 = t2282 * t2147 - t2278 * t2307;
t2126 = t2278 * t2147 + t2282 * t2307;
t2121 = t2282 * t2164 - t2278 * t2289;
t2120 = t2278 * t2164 + t2282 * t2289;
t2117 = -t2178 * pkin(4) - t2342;
t2116 = t2282 * t2140 - t2278 * t2292;
t2115 = t2278 * t2140 + t2282 * t2292;
t2114 = -t2136 * t2280 + t2137 * t2284;
t2113 = t2136 * t2284 + t2137 * t2280;
t2107 = t2273 * t2330 + t2290;
t2106 = t2126 * t2279 + t2141 * t2283;
t2105 = -t2126 * t2283 + t2141 * t2279;
t2104 = t2120 * t2279 + t2139 * t2283;
t2103 = -t2120 * t2283 + t2139 * t2279;
t2102 = -t2129 * t2276 + t2131 * t2277;
t2101 = -t2128 * t2276 + t2130 * t2277;
t2100 = t2129 * t2277 + t2131 * t2276;
t2099 = t2128 * t2277 + t2130 * t2276;
t2098 = t2115 * t2279 + t2163 * t2283;
t2097 = -t2115 * t2283 + t2163 * t2279;
t2091 = -t2178 * pkin(5) - t2218 * pkin(9) + (t2330 + t2211) * t2273 + t2290;
t2089 = -t2118 * t2279 + t2119 * t2283;
t2088 = t2118 * t2283 + t2119 * t2279;
t2087 = t2107 * t2283 + t2112 * t2279;
t2086 = t2107 * t2279 - t2112 * t2283;
t2085 = -t2105 * t2276 + t2106 * t2277;
t2084 = t2105 * t2277 + t2106 * t2276;
t2083 = -t2103 * t2276 + t2104 * t2277;
t2082 = t2103 * t2277 + t2104 * t2276;
t2081 = -t2100 * t2280 + t2102 * t2284;
t2080 = -t2099 * t2280 + t2101 * t2284;
t2079 = t2100 * t2284 + t2102 * t2280;
t2078 = t2099 * t2284 + t2101 * t2280;
t2077 = -t2097 * t2276 + t2098 * t2277;
t2076 = t2097 * t2277 + t2098 * t2276;
t2075 = t2090 * t2278 + t2092 * t2282;
t2073 = -t2088 * t2276 + t2089 * t2277;
t2072 = t2088 * t2277 + t2089 * t2276;
t2071 = -t2086 * t2276 + t2087 * t2277;
t2070 = t2086 * t2277 + t2087 * t2276;
t2069 = -t2084 * t2280 + t2085 * t2284;
t2068 = t2084 * t2284 + t2085 * t2280;
t2067 = -t2082 * t2280 + t2083 * t2284;
t2066 = t2082 * t2284 + t2083 * t2280;
t2065 = -t2076 * t2280 + t2077 * t2284;
t2064 = t2076 * t2284 + t2077 * t2280;
t2063 = t2282 * t2075 - t2278 * t2298;
t2062 = t2278 * t2075 + t2282 * t2298;
t2061 = -t2072 * t2280 + t2073 * t2284;
t2060 = t2072 * t2284 + t2073 * t2280;
t2059 = t2062 * t2279 + t2091 * t2283;
t2058 = -t2062 * t2283 + t2091 * t2279;
t2057 = -t2070 * t2280 + t2071 * t2284;
t2056 = t2070 * t2284 + t2071 * t2280;
t2055 = -t2058 * t2276 + t2059 * t2277;
t2054 = t2058 * t2277 + t2059 * t2276;
t2053 = -t2054 * t2280 + t2055 * t2284;
t2052 = t2054 * t2284 + t2055 * t2280;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2254, -t2253, 0, -t2258 * t2281 + t2259 * t2285, 0, 0, 0, 0, 0, 0, t2232 * t2285 - t2251 * t2281, t2233 * t2285 + t2248 * t2281, t2252 * t2285 - t2255 * t2281, t2199 * t2285 - t2245 * t2281, 0, 0, 0, 0, 0, 0, t2154 * t2285 + t2205 * t2281, t2174 * t2285 + t2207 * t2281, t2145 * t2285 + t2204 * t2281, t2114 * t2285 - t2200 * t2281, 0, 0, 0, 0, 0, 0, t2155 * t2281 - t2345, -t2281 * t2303 + t2347, t2081 * t2285 + t2341, t2061 * t2285 - t2169 * t2281, 0, 0, 0, 0, 0, 0, t2080 * t2285 + t2341, -t2157 * t2281 + t2345, -t2160 * t2281 - t2347, t2057 * t2285 - t2117 * t2281, 0, 0, 0, 0, 0, 0, t2067 * t2285 + t2121 * t2281, t2069 * t2285 + t2127 * t2281, t2065 * t2285 + t2116 * t2281, t2053 * t2285 + t2063 * t2281; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2253, t2254, 0, t2258 * t2285 + t2259 * t2281, 0, 0, 0, 0, 0, 0, t2232 * t2281 + t2251 * t2285, t2233 * t2281 - t2248 * t2285, t2252 * t2281 + t2255 * t2285, t2199 * t2281 + t2245 * t2285, 0, 0, 0, 0, 0, 0, t2154 * t2281 - t2205 * t2285, t2174 * t2281 - t2207 * t2285, t2145 * t2281 - t2204 * t2285, t2114 * t2281 + t2200 * t2285, 0, 0, 0, 0, 0, 0, -t2155 * t2285 - t2346, t2285 * t2303 + t2348, t2081 * t2281 - t2340, t2061 * t2281 + t2169 * t2285, 0, 0, 0, 0, 0, 0, t2080 * t2281 - t2340, t2157 * t2285 + t2346, t2160 * t2285 - t2348, t2057 * t2281 + t2117 * t2285, 0, 0, 0, 0, 0, 0, t2067 * t2281 - t2121 * t2285, t2069 * t2281 - t2127 * t2285, t2065 * t2281 - t2116 * t2285, t2053 * t2281 - t2063 * t2285; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2230, t2231, 0, t2198, 0, 0, 0, 0, 0, 0, t2153, t2173, t2144, t2113, 0, 0, 0, 0, 0, 0, t2093, -t2108, t2079, t2060, 0, 0, 0, 0, 0, 0, t2078, -t2093, t2108, t2056, 0, 0, 0, 0, 0, 0, t2066, t2068, t2064, t2052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2287, -qJDD(1), 0, t2259, 0, 0, 0, 0, 0, 0, t2232, t2233, t2252, t2199, 0, 0, 0, 0, 0, 0, t2154, t2174, t2145, t2114, 0, 0, 0, 0, 0, 0, -t2096, t2111, t2081, t2061, 0, 0, 0, 0, 0, 0, t2080, t2096, -t2111, t2057, 0, 0, 0, 0, 0, 0, t2067, t2069, t2065, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2287, 0, t2258, 0, 0, 0, 0, 0, 0, t2251, -t2248, t2255, t2245, 0, 0, 0, 0, 0, 0, -t2205, -t2207, -t2204, t2200, 0, 0, 0, 0, 0, 0, -t2155, t2303, -t2337, t2169, 0, 0, 0, 0, 0, 0, -t2337, t2157, t2160, t2117, 0, 0, 0, 0, 0, 0, -t2121, -t2127, -t2116, -t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2230, t2231, 0, t2198, 0, 0, 0, 0, 0, 0, t2153, t2173, t2144, t2113, 0, 0, 0, 0, 0, 0, t2093, -t2108, t2079, t2060, 0, 0, 0, 0, 0, 0, t2078, -t2093, t2108, t2056, 0, 0, 0, 0, 0, 0, t2066, t2068, t2064, t2052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2262, t2257, t2269, t2235, 0, 0, 0, 0, 0, 0, t2190, t2192, t2181, t2137, 0, 0, 0, 0, 0, 0, -t2125, t2135, t2102, t2073, 0, 0, 0, 0, 0, 0, t2101, t2125, -t2135, t2071, 0, 0, 0, 0, 0, 0, t2083, t2085, t2077, t2055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2256, t2261, -t2310, t2234, 0, 0, 0, 0, 0, 0, t2189, t2191, t2180, t2136, 0, 0, 0, 0, 0, 0, t2122, -t2132, t2100, t2072, 0, 0, 0, 0, 0, 0, t2099, -t2122, t2132, t2070, 0, 0, 0, 0, 0, 0, t2082, t2084, t2076, t2054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2251, t2248, -t2255, -t2245, 0, 0, 0, 0, 0, 0, t2205, t2207, t2204, -t2200, 0, 0, 0, 0, 0, 0, t2155, -t2303, t2337, -t2169, 0, 0, 0, 0, 0, 0, t2337, -t2157, -t2160, -t2117, 0, 0, 0, 0, 0, 0, t2121, t2127, t2116, t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2224, t2226, t2206, t2172, 0, 0, 0, 0, 0, 0, -t2152, -t2167, t2131, t2089, 0, 0, 0, 0, 0, 0, t2130, t2152, t2167, t2087, 0, 0, 0, 0, 0, 0, t2104, t2106, t2098, t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2225, t2236, t2208, t2171, 0, 0, 0, 0, 0, 0, t2149, -t2165, t2129, t2088, 0, 0, 0, 0, 0, 0, t2128, -t2149, t2165, t2086, 0, 0, 0, 0, 0, 0, t2103, t2105, t2097, t2058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2205, t2207, t2204, -t2200, 0, 0, 0, 0, 0, 0, t2155, -t2303, t2337, -t2169, 0, 0, 0, 0, 0, 0, t2337, -t2157, -t2160, -t2117, 0, 0, 0, 0, 0, 0, t2121, t2127, t2116, t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2182, -t2183, t2158, t2119, 0, 0, 0, 0, 0, 0, -t2156, -t2182, t2183, t2107, 0, 0, 0, 0, 0, 0, t2139, t2141, t2163, t2091; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299, t2306, t2162, t2118, 0, 0, 0, 0, 0, 0, t2162, -t2299, -t2306, -t2112, 0, 0, 0, 0, 0, 0, -t2120, -t2126, -t2115, -t2062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2155, -t2303, t2337, -t2169, 0, 0, 0, 0, 0, 0, t2337, -t2157, -t2160, -t2117, 0, 0, 0, 0, 0, 0, t2121, t2127, t2116, t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2337, -t2157, -t2160, -t2117, 0, 0, 0, 0, 0, 0, t2121, t2127, t2116, t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2156, t2182, -t2183, -t2107, 0, 0, 0, 0, 0, 0, -t2139, -t2141, -t2163, -t2091; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2162, t2299, t2306, t2112, 0, 0, 0, 0, 0, 0, t2120, t2126, t2115, t2062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2164, t2147, t2140, t2075; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2289, t2307, t2292, t2298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2139, t2141, t2163, t2091;];
f_new_reg  = t1;
