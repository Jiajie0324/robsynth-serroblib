% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 13:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 13:03:53
% EndTime: 2019-05-06 13:04:28
% DurationCPUTime: 14.28s
% Computational Cost: add. (44687->565), mult. (105954->772), div. (0->0), fcn. (79103->10), ass. (0->341)
t332 = cos(qJ(4));
t322 = qJD(2) + qJD(4);
t320 = t322 ^ 2;
t325 = sin(pkin(10));
t326 = cos(pkin(10));
t333 = cos(qJ(2));
t329 = sin(qJ(2));
t388 = qJD(1) * t329;
t297 = qJD(1) * t326 * t333 - t325 * t388;
t298 = (t325 * t333 + t326 * t329) * qJD(1);
t328 = sin(qJ(4));
t274 = t297 * t328 + t298 * t332;
t428 = t274 ^ 2;
t437 = -t428 - t320;
t321 = qJDD(2) + qJDD(4);
t272 = -t297 * t332 + t298 * t328;
t399 = t274 * t272;
t438 = t399 + t321;
t447 = t438 * t328;
t178 = -t332 * t437 + t447;
t446 = t438 * t332;
t180 = t328 * t437 + t446;
t121 = t178 * t326 + t180 * t325;
t124 = t178 * t325 - t180 * t326;
t315 = t329 * qJDD(1);
t378 = qJD(1) * qJD(2);
t374 = t333 * t378;
t304 = t315 + t374;
t316 = t333 * qJDD(1);
t375 = t329 * t378;
t305 = t316 - t375;
t283 = -t304 * t325 + t305 * t326;
t284 = t304 * t326 + t305 * t325;
t356 = t328 * t283 + t332 * t284;
t380 = qJD(4) + t322;
t344 = -t272 * t380 + t356;
t483 = -pkin(1) * t344 + pkin(7) * (t121 * t329 + t124 * t333);
t482 = qJ(3) * t121;
t481 = pkin(2) * t121 + pkin(3) * t178;
t480 = -pkin(2) * t344 + qJ(3) * t124;
t257 = -t428 + t320;
t439 = t321 - t399;
t451 = t328 * t439;
t185 = t257 * t332 + t451;
t448 = t332 * t439;
t189 = -t257 * t328 + t448;
t478 = t329 * (t185 * t325 - t189 * t326) - t333 * (t185 * t326 + t189 * t325);
t429 = t272 ^ 2;
t219 = -t320 - t429;
t150 = t219 * t328 + t448;
t153 = -t219 * t332 + t451;
t102 = t150 * t325 + t153 * t326;
t99 = t150 * t326 - t153 * t325;
t477 = pkin(7) * (t102 * t333 + t329 * t99);
t256 = t429 - t320;
t187 = t256 * t328 + t446;
t191 = t256 * t332 - t447;
t474 = t329 * (t187 * t325 - t191 * t326) - t333 * (t187 * t326 + t191 * t325);
t472 = pkin(8) * t178;
t471 = pkin(8) * t180;
t470 = qJ(3) * t99;
t469 = qJ(3) * t102;
t468 = -pkin(2) * t99 - pkin(3) * t150;
t463 = pkin(8) * t150;
t462 = pkin(8) * t153;
t324 = t333 ^ 2;
t335 = qJD(1) ^ 2;
t351 = qJD(2) * pkin(2) - qJ(3) * t388;
t330 = sin(qJ(1));
t425 = cos(qJ(1));
t371 = t330 * g(1) - g(2) * t425;
t352 = qJDD(1) * pkin(1) + t371;
t243 = t305 * pkin(2) - t351 * t388 - qJDD(3) + t352 + (qJ(3) * t324 + pkin(7)) * t335;
t295 = t297 ^ 2;
t359 = qJD(2) * pkin(3) - pkin(8) * t298;
t182 = t283 * pkin(3) + t295 * pkin(8) - t298 * t359 + t243;
t262 = t322 * t274;
t427 = 2 * qJD(5);
t459 = pkin(4) * t262 - t274 * t427 - t182;
t426 = pkin(4) + pkin(9);
t435 = -t429 - t428;
t458 = pkin(1) * t435;
t457 = pkin(2) * t435;
t456 = pkin(3) * t435;
t282 = t297 * t298;
t434 = qJDD(2) + t282;
t455 = t325 * t434;
t454 = t326 * t434;
t327 = sin(qJ(6));
t204 = -qJD(4) * t272 + t356;
t201 = qJDD(6) + t204;
t331 = cos(qJ(6));
t244 = -t272 * t331 + t322 * t327;
t246 = t272 * t327 + t322 * t331;
t208 = t246 * t244;
t442 = t201 - t208;
t453 = t327 * t442;
t450 = t331 * t442;
t226 = pkin(4) * t272 - qJ(5) * t274;
t294 = qJD(2) * t297;
t252 = t284 - t294;
t392 = t329 * t335;
t353 = g(1) * t425 + g(2) * t330;
t416 = qJDD(1) * pkin(7);
t301 = -pkin(1) * t335 - t353 + t416;
t394 = t329 * t301;
t239 = qJDD(2) * pkin(2) - t304 * qJ(3) - t394 + (pkin(2) * t392 + qJ(3) * t378 - g(3)) * t333;
t287 = -t329 * g(3) + t333 * t301;
t318 = t324 * t335;
t240 = -pkin(2) * t318 + t305 * qJ(3) - qJD(2) * t351 + t287;
t360 = -0.2e1 * qJD(3) * t298 + t239 * t326 - t325 * t240;
t141 = pkin(3) * t434 - pkin(8) * t252 + t360;
t184 = 0.2e1 * qJD(3) * t297 + t239 * t325 + t240 * t326;
t145 = -t295 * pkin(3) + t283 * pkin(8) - qJD(2) * t359 + t184;
t89 = -t141 * t332 + t328 * t145;
t80 = -pkin(4) * t321 - qJ(5) * t320 + t226 * t274 + qJDD(5) + t89;
t433 = -pkin(9) * t439 + t80;
t261 = t272 * t322;
t441 = t204 + t261;
t338 = pkin(5) * t441 + t433;
t366 = -t283 * t332 + t328 * t284;
t203 = qJD(4) * t274 + t366;
t255 = pkin(5) * t274 - pkin(9) * t322;
t172 = t204 - t261;
t443 = qJ(5) * t172;
t336 = -t443 + t459;
t56 = -pkin(5) * t429 + t203 * t426 - t274 * t255 + t336;
t32 = t327 * t56 - t331 * t338;
t417 = t331 * t56;
t33 = t327 * t338 + t417;
t17 = -t32 * t331 + t327 * t33;
t436 = t428 - t429;
t347 = (-t272 * t328 - t274 * t332) * t322;
t348 = (-t272 * t332 + t274 * t328) * t322;
t432 = t329 * (-t325 * t347 + t326 * t348) + t333 * (t325 * t348 + t326 * t347);
t395 = t322 * t332;
t350 = t203 * t328 + t272 * t395;
t396 = t322 * t328;
t362 = -t203 * t332 + t272 * t396;
t431 = t329 * (-t325 * t362 + t326 * t350) + t333 * (t325 * t350 + t326 * t362);
t361 = t204 * t332 - t274 * t396;
t363 = t204 * t328 + t274 * t395;
t430 = t329 * (-t325 * t363 + t326 * t361) + t333 * (t325 * t361 + t326 * t363);
t241 = t244 ^ 2;
t242 = t246 ^ 2;
t267 = qJD(6) + t274;
t265 = t267 ^ 2;
t296 = t298 ^ 2;
t424 = pkin(4) * t328;
t423 = pkin(4) * t332;
t90 = t328 * t141 + t332 * t145;
t341 = -pkin(4) * t320 + t321 * qJ(5) - t272 * t226 + t90;
t78 = t322 * t427 + t341;
t422 = -pkin(4) * t80 + qJ(5) * t78;
t50 = t328 * t90 - t332 * t89;
t421 = t325 * t50;
t420 = t326 * t50;
t55 = -t203 * pkin(5) - t429 * pkin(9) + (t427 + t255) * t322 + t341;
t418 = t327 * t55;
t53 = t331 * t55;
t126 = t184 * t325 + t326 * t360;
t415 = t126 * t329;
t143 = t201 + t208;
t414 = t143 * t327;
t413 = t143 * t331;
t166 = t203 + t262;
t412 = t166 * t332;
t411 = t182 * t328;
t410 = t182 * t332;
t403 = t243 * t325;
t402 = t243 * t326;
t401 = t267 * t327;
t400 = t267 * t331;
t279 = qJDD(2) - t282;
t398 = t279 * t325;
t397 = t279 * t326;
t310 = t333 * t392;
t393 = t329 * (qJDD(2) + t310);
t391 = t333 * (qJDD(2) - t310);
t381 = -qJD(4) + t322;
t167 = t274 * t381 - t366;
t168 = t272 * t381 + t356;
t390 = -pkin(4) * t168 + qJ(5) * t167;
t387 = qJD(2) * t298;
t386 = qJD(2) * t325;
t385 = qJD(2) * t326;
t379 = qJD(6) + t267;
t377 = t328 * t208;
t376 = t332 * t208;
t373 = qJ(5) * t328 + pkin(3);
t51 = t328 * t89 + t332 * t90;
t127 = t184 * t326 - t325 * t360;
t370 = -t203 * t331 + t327 * t321;
t286 = t333 * g(3) + t394;
t365 = t329 * t286 + t287 * t333;
t364 = qJ(5) * t55 - t17 * t426;
t18 = t327 * t32 + t331 * t33;
t357 = t327 * t203 + t331 * t321;
t193 = -t242 - t265;
t104 = t193 * t331 - t414;
t139 = -t244 * t379 + t357;
t354 = qJ(5) * t139 - t104 * t426 + t53;
t250 = t283 + t387;
t134 = t246 * t379 + t370;
t176 = -t265 - t241;
t97 = t176 * t327 + t450;
t349 = qJ(5) * t134 - t426 * t97 + t418;
t175 = -t241 - t242;
t149 = -qJD(6) * t244 + t357;
t215 = t267 * t244;
t138 = t149 + t215;
t345 = (-qJD(6) + t267) * t246 - t370;
t83 = -t138 * t331 + t327 * t345;
t346 = qJ(5) * t175 - t426 * t83 - t17;
t343 = -pkin(4) * t439 - qJ(5) * t219 + t80;
t340 = -pkin(4) * t437 + qJ(5) * t438 + t78;
t337 = -t203 * pkin(4) - t459;
t334 = qJD(2) ^ 2;
t323 = t329 ^ 2;
t317 = t323 * t335;
t306 = t316 - 0.2e1 * t375;
t303 = t315 + 0.2e1 * t374;
t300 = t335 * pkin(7) + t352;
t290 = -t296 - t334;
t289 = -t296 + t334;
t288 = t295 - t334;
t277 = -t334 - t295;
t251 = t284 + t294;
t249 = -t283 + t387;
t247 = -t295 - t296;
t235 = -t290 * t325 - t397;
t234 = t290 * t326 - t398;
t233 = t277 * t326 - t455;
t232 = t277 * t325 + t454;
t214 = -t242 + t265;
t213 = t241 - t265;
t207 = t242 - t241;
t206 = t250 * t326 + t252 * t325;
t205 = t250 * t325 - t252 * t326;
t165 = t203 - t262;
t164 = t274 * t380 + t366;
t148 = -qJD(6) * t246 - t370;
t147 = (-t244 * t331 + t246 * t327) * t267;
t146 = (t244 * t327 + t246 * t331) * t267;
t137 = t149 - t215;
t131 = t149 * t331 - t246 * t401;
t130 = -t149 * t327 - t246 * t400;
t129 = -t148 * t327 + t244 * t400;
t128 = -t148 * t331 - t244 * t401;
t125 = -t410 + t472;
t120 = -t146 * t328 + t201 * t332;
t119 = t146 * t332 + t201 * t328;
t118 = t213 * t331 - t414;
t117 = -t214 * t327 + t450;
t116 = -t213 * t327 - t413;
t115 = -t214 * t331 - t453;
t114 = -t165 * t332 + t328 * t441;
t113 = -t328 * t344 - t412;
t112 = -t164 * t332 - t172 * t328;
t111 = t167 * t332 + t168 * t328;
t110 = -t165 * t328 - t332 * t441;
t109 = -t166 * t328 + t332 * t344;
t108 = -t164 * t328 + t172 * t332;
t107 = t167 * t328 - t168 * t332;
t106 = -t411 - t463;
t105 = -t193 * t327 - t413;
t98 = t176 * t331 - t453;
t95 = -t130 * t328 + t376;
t94 = -t128 * t328 - t376;
t93 = t130 * t332 + t377;
t92 = t128 * t332 - t377;
t91 = -pkin(3) * t344 - t411 - t471;
t87 = -pkin(3) * t164 + t410 - t462;
t86 = t337 + t443;
t85 = t138 * t327 + t331 * t345;
t84 = -t134 * t331 - t137 * t327;
t82 = t134 * t327 - t137 * t331;
t76 = -t115 * t328 + t138 * t332;
t75 = -t116 * t328 + t332 * t345;
t74 = t115 * t332 + t138 * t328;
t73 = t116 * t332 + t328 * t345;
t72 = t104 * t328 + t139 * t332;
t71 = -t104 * t332 + t139 * t328;
t70 = t134 * t332 + t328 * t97;
t69 = t134 * t328 - t332 * t97;
t68 = -t110 * t325 + t114 * t326;
t67 = -t107 * t325 + t111 * t326;
t66 = t110 * t326 + t114 * t325;
t65 = t107 * t326 + t111 * t325;
t64 = t207 * t332 - t328 * t82;
t63 = t207 * t328 + t332 * t82;
t62 = (t166 + t203) * pkin(4) + t336;
t61 = (t344 + t172) * qJ(5) + t337;
t60 = -qJ(5) * t435 + t80;
t59 = t175 * t332 + t328 * t83;
t58 = t175 * t328 - t332 * t83;
t57 = -pkin(4) * t435 + t78;
t49 = t332 * t61 - t344 * t424 - t472;
t48 = qJ(5) * t412 - t328 * t62 + t463;
t47 = pkin(3) * t182 + pkin(8) * t51;
t46 = pkin(5) * t83 - qJ(5) * t85;
t45 = t471 + t328 * t61 + (pkin(3) + t423) * t344;
t44 = t166 * t373 + t332 * t62 + t462;
t43 = t328 * t80 + t332 * t78;
t42 = t328 * t78 - t332 * t80;
t41 = -pkin(8) * t110 - t50;
t40 = -t325 * t71 + t326 * t72;
t39 = t325 * t72 + t326 * t71;
t38 = -t325 * t69 + t326 * t70;
t37 = t325 * t70 + t326 * t69;
t36 = pkin(8) * t114 - t456 + t51;
t35 = -t325 * t58 + t326 * t59;
t34 = t325 * t59 + t326 * t58;
t30 = -pkin(8) * t107 - t328 * t57 + t332 * t60;
t29 = pkin(5) * t139 - t105 * t426 - t418;
t28 = t326 * t51 - t421;
t27 = t325 * t51 + t420;
t26 = pkin(5) * t134 - t426 * t98 + t53;
t25 = pkin(8) * t111 + t328 * t60 + t332 * t57 - t456;
t24 = -pkin(8) * t42 + (qJ(5) * t332 - t424) * t86;
t23 = -t417 - t327 * t433 - qJ(5) * t105 + (-t327 * t441 + t104) * pkin(5);
t22 = pkin(5) * t97 - qJ(5) * t98 - t32;
t21 = -t325 * t42 + t326 * t43;
t20 = t325 * t43 + t326 * t42;
t19 = pkin(8) * t43 + (t373 + t423) * t86;
t15 = t17 * t328 + t332 * t55;
t14 = -t17 * t332 + t328 * t55;
t13 = pkin(5) * t175 - t426 * t85 - t18;
t12 = -pkin(8) * t71 + t23 * t332 - t29 * t328;
t11 = -pkin(8) * t69 + t22 * t332 - t26 * t328;
t10 = -pkin(3) * t105 + pkin(8) * t72 + t23 * t328 + t29 * t332;
t9 = -pkin(3) * t98 + pkin(8) * t70 + t22 * t328 + t26 * t332;
t8 = -pkin(8) * t58 - t13 * t328 + t332 * t46;
t7 = pkin(5) * t17 - qJ(5) * t18;
t6 = -pkin(3) * t85 + pkin(8) * t59 + t13 * t332 + t328 * t46;
t5 = pkin(5) * t55 - t18 * t426;
t4 = -t14 * t325 + t15 * t326;
t3 = t14 * t326 + t15 * t325;
t2 = -pkin(8) * t14 - t328 * t5 + t332 * t7;
t1 = -pkin(3) * t18 + pkin(8) * t15 + t328 * t7 + t332 * t5;
t16 = [0, 0, 0, 0, 0, qJDD(1), t371, t353, 0, 0, (t304 + t374) * t329, t303 * t333 + t306 * t329, t393 + t333 * (-t317 + t334), (t305 - t375) * t333, t329 * (t318 - t334) + t391, 0, t333 * t300 + pkin(1) * t306 + pkin(7) * (t333 * (-t318 - t334) - t393), -t329 * t300 - pkin(1) * t303 + pkin(7) * (-t391 - t329 * (-t317 - t334)), pkin(1) * (t317 + t318) + (t323 + t324) * t416 + t365, pkin(1) * t300 + pkin(7) * t365, t329 * (t284 * t326 - t298 * t386) + t333 * (t284 * t325 + t298 * t385), t329 * (-t249 * t326 - t251 * t325) + t333 * (-t249 * t325 + t251 * t326), t329 * (-t289 * t325 + t454) + t333 * (t289 * t326 + t455), t329 * (-t283 * t325 - t297 * t385) + t333 * (t283 * t326 - t297 * t386), t329 * (t288 * t326 - t398) + t333 * (t288 * t325 + t397), (t329 * (t297 * t326 + t298 * t325) + t333 * (t297 * t325 - t298 * t326)) * qJD(2), t329 * (-qJ(3) * t232 - t403) + t333 * (-pkin(2) * t249 + qJ(3) * t233 + t402) - pkin(1) * t249 + pkin(7) * (-t232 * t329 + t233 * t333), t329 * (-qJ(3) * t234 - t402) + t333 * (-pkin(2) * t251 + qJ(3) * t235 - t403) - pkin(1) * t251 + pkin(7) * (-t234 * t329 + t235 * t333), t329 * (-qJ(3) * t205 - t126) + t333 * (-pkin(2) * t247 + qJ(3) * t206 + t127) - pkin(1) * t247 + pkin(7) * (-t205 * t329 + t206 * t333), -qJ(3) * t415 + t333 * (pkin(2) * t243 + qJ(3) * t127) + pkin(1) * t243 + pkin(7) * (t127 * t333 - t415), t430, t329 * (-t108 * t325 + t112 * t326) + t333 * (t108 * t326 + t112 * t325), -t478, t431, -t474, t432, t329 * (t106 * t326 - t325 * t87 - t470) + t333 * (-pkin(2) * t164 + t106 * t325 + t326 * t87 - t469) - pkin(1) * t164 - t477, t329 * (t125 * t326 - t325 * t91 + t482) + t333 * (t125 * t325 + t326 * t91 + t480) + t483, t329 * (-qJ(3) * t66 - t325 * t36 + t326 * t41) + t333 * (qJ(3) * t68 + t325 * t41 + t326 * t36 - t457) - t458 + pkin(7) * (-t329 * t66 + t333 * t68), t329 * (-pkin(8) * t420 - qJ(3) * t27 - t325 * t47) + t333 * (pkin(2) * t182 - pkin(8) * t421 + qJ(3) * t28 + t326 * t47) + pkin(1) * t182 + pkin(7) * (-t27 * t329 + t28 * t333), t432, t478, t474, t430, t329 * (-t109 * t325 + t113 * t326) + t333 * (t109 * t326 + t113 * t325), t431, t329 * (-qJ(3) * t65 - t25 * t325 + t30 * t326) + t333 * (qJ(3) * t67 + t25 * t326 + t30 * t325 - t457) - t458 + pkin(7) * (-t329 * t65 + t333 * t67), t329 * (-t325 * t44 + t326 * t48 + t470) + t333 * (pkin(2) * t166 + t325 * t48 + t326 * t44 + t469) + pkin(1) * t166 + t477, t329 * (-t325 * t45 + t326 * t49 - t482) + t333 * (t325 * t49 + t326 * t45 - t480) - t483, t329 * (-qJ(3) * t20 - t19 * t325 + t24 * t326) + t333 * (pkin(2) * t86 + qJ(3) * t21 + t19 * t326 + t24 * t325) + pkin(1) * t86 + pkin(7) * (-t20 * t329 + t21 * t333), t329 * (-t325 * t93 + t326 * t95) + t333 * (t325 * t95 + t326 * t93), t329 * (-t325 * t63 + t326 * t64) + t333 * (t325 * t64 + t326 * t63), t329 * (-t325 * t74 + t326 * t76) + t333 * (t325 * t76 + t326 * t74), t329 * (-t325 * t92 + t326 * t94) + t333 * (t325 * t94 + t326 * t92), t329 * (-t325 * t73 + t326 * t75) + t333 * (t325 * t75 + t326 * t73), t329 * (-t119 * t325 + t120 * t326) + t333 * (t119 * t326 + t120 * t325), t329 * (-qJ(3) * t37 + t11 * t326 - t325 * t9) + t333 * (-pkin(2) * t98 + qJ(3) * t38 + t11 * t325 + t326 * t9) - pkin(1) * t98 + pkin(7) * (-t329 * t37 + t333 * t38), t329 * (-qJ(3) * t39 - t10 * t325 + t12 * t326) + t333 * (-pkin(2) * t105 + qJ(3) * t40 + t10 * t326 + t12 * t325) - pkin(1) * t105 + pkin(7) * (-t329 * t39 + t333 * t40), t329 * (-qJ(3) * t34 - t325 * t6 + t326 * t8) + t333 * (-pkin(2) * t85 + qJ(3) * t35 + t325 * t8 + t326 * t6) - pkin(1) * t85 + pkin(7) * (-t329 * t34 + t333 * t35), t329 * (-qJ(3) * t3 - t1 * t325 + t2 * t326) + t333 * (-pkin(2) * t18 + qJ(3) * t4 + t1 * t326 + t2 * t325) - pkin(1) * t18 + pkin(7) * (-t3 * t329 + t333 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t310, -t318 + t317, t315, t310, t316, qJDD(2), -t286, -t287, 0, 0, -t282, t296 - t295, t252, t282, t250, qJDD(2), pkin(2) * t232 + t360, pkin(2) * t234 - t184, pkin(2) * t205, pkin(2) * t126, t399, t436, t441, -t399, t167, t321, -t468 - t89, -t481 - t90, pkin(2) * t66 + pkin(3) * t110, pkin(2) * t27 + pkin(3) * t50, t321, -t168, t165, t399, t436, -t399, pkin(2) * t65 + pkin(3) * t107 + t390, t343 + t468, t340 + t481, pkin(2) * t20 + pkin(3) * t42 + t422, t131, t84, t117, t129, t118, t147, pkin(2) * t37 + pkin(3) * t69 + t349, pkin(2) * t39 + pkin(3) * t71 + t354, pkin(2) * t34 + pkin(3) * t58 + t346, pkin(2) * t3 + pkin(3) * t14 + t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t249, t251, t247, -t243, 0, 0, 0, 0, 0, 0, t164, t344, t435, -t182, 0, 0, 0, 0, 0, 0, t435, -t166, -t344, -t86, 0, 0, 0, 0, 0, 0, t98, t105, t85, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, t436, t441, -t399, t167, t321, -t89, -t90, 0, 0, t321, -t168, t165, t399, t436, -t399, t390, t343, t340, t422, t131, t84, t117, t129, t118, t147, t349, t354, t346, t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, t439, t437, t80, 0, 0, 0, 0, 0, 0, t97, t104, t83, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, t207, t138, -t208, t345, t201, -t32, -t33, 0, 0;];
tauJ_reg  = t16;
