% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:08
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:07:53
% EndTime: 2019-03-08 20:08:01
% DurationCPUTime: 5.48s
% Computational Cost: add. (7409->531), mult. (17568->680), div. (0->0), fcn. (14377->14), ass. (0->277)
t210 = cos(pkin(11));
t374 = cos(qJ(4));
t286 = t374 * t210;
t208 = sin(pkin(11));
t215 = sin(qJ(4));
t311 = t215 * t208;
t244 = t286 - t311;
t209 = sin(pkin(6));
t218 = cos(qJ(2));
t316 = t209 * t218;
t230 = t244 * t316;
t363 = pkin(8) + qJ(3);
t178 = t363 * t208;
t179 = t363 * t210;
t386 = -t374 * t178 - t215 * t179;
t388 = -qJD(1) * t230 + t244 * qJD(3) + qJD(4) * t386;
t280 = qJD(4) * t374;
t301 = qJD(4) * t215;
t283 = t208 * t301;
t167 = -t210 * t280 + t283;
t172 = t208 * t374 + t215 * t210;
t168 = t172 * qJD(4);
t216 = sin(qJ(2));
t304 = qJD(1) * t209;
t285 = t216 * t304;
t394 = pkin(4) * t168 + pkin(9) * t167 - t285;
t192 = qJD(2) * t286;
t227 = -qJD(2) * t283 + qJDD(2) * t172;
t385 = qJD(4) * t192 + t227;
t393 = qJD(4) * qJD(5) + t385;
t211 = cos(pkin(6));
t340 = sin(pkin(10));
t270 = t340 * t218;
t341 = cos(pkin(10));
t273 = t341 * t216;
t160 = t211 * t273 + t270;
t207 = pkin(11) + qJ(4);
t199 = sin(t207);
t200 = cos(t207);
t275 = t209 * t341;
t116 = t160 * t199 + t200 * t275;
t271 = t340 * t216;
t272 = t341 * t218;
t162 = -t211 * t271 + t272;
t274 = t209 * t340;
t118 = t162 * t199 - t200 * t274;
t317 = t209 * t216;
t147 = t199 * t317 - t211 * t200;
t237 = g(1) * t118 + g(2) * t116 + g(3) * t147;
t366 = g(3) * t209;
t165 = t172 * qJD(2);
t214 = sin(qJ(5));
t217 = cos(qJ(5));
t136 = qJD(4) * t214 + t165 * t217;
t300 = qJD(5) * t214;
t238 = t214 * qJDD(4) - t165 * t300 + t217 * t393;
t350 = t238 * qJ(6);
t294 = t208 * qJDD(2);
t258 = -qJDD(2) * t286 + t215 * t294;
t115 = qJD(2) * t168 + t258;
t108 = qJDD(5) + t115;
t365 = t108 * pkin(5);
t175 = qJD(2) * qJ(3) + t285;
t303 = qJD(1) * t211;
t141 = t210 * t175 + t208 * t303;
t356 = pkin(8) * qJD(2);
t125 = t210 * t356 + t141;
t190 = t210 * t303;
t124 = t190 + (-t175 - t356) * t208;
t281 = t218 * t304;
t295 = qJDD(2) * qJ(3);
t297 = qJDD(1) * t209;
t138 = t216 * t297 + t295 + (qJD(3) + t281) * qJD(2);
t296 = qJDD(1) * t211;
t188 = t210 * t296;
t88 = t188 + (-pkin(8) * qJDD(2) - t138) * t208;
t106 = t210 * t138 + t208 * t296;
t293 = t210 * qJDD(2);
t89 = pkin(8) * t293 + t106;
t290 = -t124 * t280 - t215 * t88 - t374 * t89;
t22 = -t125 * t301 - t290;
t20 = qJDD(4) * pkin(9) + t22;
t66 = t215 * t124 + t125 * t374;
t62 = qJD(4) * pkin(9) + t66;
t196 = t210 * pkin(3) + pkin(2);
t259 = qJD(3) - t281;
t152 = -qJD(2) * t196 + t259;
t163 = qJD(2) * t311 - t192;
t73 = t163 * pkin(4) - t165 * pkin(9) + t152;
t38 = t214 * t73 + t217 * t62;
t278 = t218 * t297;
t302 = qJD(2) * t216;
t279 = qJD(1) * t302;
t384 = t209 * t279 + qJDD(3);
t246 = -t278 + t384;
t339 = qJDD(2) * pkin(2);
t146 = t246 - t339;
t47 = -pkin(3) * t293 + t115 * pkin(4) - pkin(9) * t385 + t146;
t7 = -qJD(5) * t38 - t214 * t20 + t217 * t47;
t2 = -t136 * qJD(6) - t350 + t365 + t7;
t153 = qJD(5) + t163;
t134 = -t217 * qJD(4) + t165 * t214;
t27 = -qJ(6) * t134 + t38;
t352 = t27 * t153;
t392 = t2 + t352;
t351 = t38 * t153;
t391 = t7 + t351;
t390 = -t214 * t388 + t394 * t217;
t111 = -pkin(4) * t244 - pkin(9) * t172 - t196;
t299 = qJD(5) * t217;
t389 = t111 * t299 + t394 * t214 + t217 * t388;
t130 = -t215 * t178 + t179 * t374;
t231 = t172 * t316;
t342 = -qJD(1) * t231 + qJD(3) * t172 + qJD(4) * t130;
t268 = t153 * t214;
t387 = t136 * t268;
t159 = -t211 * t272 + t271;
t161 = t211 * t270 + t273;
t264 = g(1) * t161 + g(2) * t159;
t233 = -g(3) * t316 + t264;
t229 = t233 * t199;
t219 = qJD(2) ^ 2;
t235 = (qJDD(2) * t218 - t216 * t219) * t209;
t123 = t217 * t130;
t57 = t214 * t111 + t123;
t60 = -t217 * qJDD(4) + t165 * t299 + t214 * t393;
t383 = pkin(5) * t60 + qJDD(6);
t117 = t160 * t200 - t199 * t275;
t119 = t162 * t200 + t199 * t274;
t148 = t199 * t211 + t200 * t317;
t310 = t217 * t218;
t288 = t209 * t310;
t382 = -g(3) * (-t148 * t214 - t288) - g(2) * (-t117 * t214 + t159 * t217) - g(1) * (-t119 * t214 + t161 * t217);
t251 = -t146 + t264;
t381 = t209 * (-g(3) * t218 + t279) + t251 + t339;
t256 = (-t175 * t208 + t190) * t208 - t141 * t210;
t380 = t218 * t256 - (-qJD(2) * pkin(2) + t259) * t216;
t379 = t136 ^ 2;
t378 = t165 ^ 2;
t174 = t196 * t316;
t367 = g(3) * t174;
t364 = t134 * pkin(5);
t362 = qJ(6) + pkin(9);
t254 = qJ(6) * t167 - qJD(6) * t172;
t361 = t168 * pkin(5) + t254 * t217 + (-t123 + (qJ(6) * t172 - t111) * t214) * qJD(5) + t390;
t282 = t172 * t299;
t360 = -qJ(6) * t282 + (-qJD(5) * t130 + t254) * t214 + t389;
t359 = -t130 * t300 + t389;
t358 = -qJD(5) * t57 + t390;
t37 = -t214 * t62 + t217 * t73;
t26 = -qJ(6) * t136 + t37;
t16 = pkin(5) * t153 + t26;
t357 = -t26 + t16;
t109 = pkin(4) * t165 + pkin(9) * t163;
t122 = t215 * t125;
t65 = t124 * t374 - t122;
t43 = t214 * t109 + t217 * t65;
t266 = t124 * t301 + t125 * t280 + t215 * t89 - t374 * t88;
t338 = qJDD(4) * pkin(4);
t21 = t266 - t338;
t13 = t21 + t383;
t355 = t13 * t214;
t354 = t153 * t37;
t353 = t21 * t214;
t349 = t238 * t214;
t348 = t60 * qJ(6);
t347 = t60 * t217;
t346 = -t134 * t299 - t214 * t60;
t276 = qJD(5) * t362;
t327 = t163 * t214;
t345 = -qJ(6) * t327 + t217 * qJD(6) - t214 * t276 - t43;
t326 = t163 * t217;
t42 = t217 * t109 - t214 * t65;
t344 = -pkin(5) * t165 - qJ(6) * t326 - t214 * qJD(6) - t217 * t276 - t42;
t324 = t167 * t214;
t243 = t282 - t324;
t343 = pkin(5) * t243 + t342;
t337 = t134 * t153;
t336 = t134 * t163;
t335 = t134 * t165;
t334 = t136 * t134;
t333 = t136 * t153;
t332 = t136 * t165;
t331 = t136 * t214;
t330 = t153 * t165;
t329 = t160 * t214;
t328 = t162 * t214;
t325 = t165 * t163;
t323 = t167 * t217;
t322 = t172 * t214;
t321 = t172 * t217;
t319 = t200 * t214;
t318 = t200 * t217;
t315 = t363 * t216;
t314 = t214 * t108;
t313 = t214 * t218;
t95 = t217 * t108;
t309 = t218 * t219;
t308 = qJDD(1) - g(3);
t307 = -t159 * t196 + t160 * t363;
t306 = -t161 * t196 + t162 * t363;
t204 = t208 ^ 2;
t206 = t210 ^ 2;
t305 = t204 + t206;
t291 = g(3) * t317;
t289 = t209 * t313;
t287 = t237 * t214;
t284 = t209 * t302;
t6 = t217 * t20 + t214 * t47 + t73 * t299 - t62 * t300;
t269 = qJD(6) + t364;
t56 = t217 * t111 - t130 * t214;
t267 = t153 * t217;
t265 = pkin(4) * t200 + pkin(9) * t199;
t263 = g(1) * t162 + g(2) * t160;
t262 = t196 * qJDD(2);
t3 = -qJD(6) * t134 - t348 + t6;
t261 = -t153 * t16 + t3;
t260 = t6 - t354;
t257 = t214 * t38 + t217 * t37;
t198 = pkin(5) * t217 + pkin(4);
t255 = t198 * t200 + t199 * t362;
t249 = t95 + (-t300 - t327) * t153;
t157 = -t208 * t317 + t210 * t211;
t158 = t208 * t211 + t210 * t317;
t93 = t215 * t157 + t158 * t374;
t74 = -t214 * t93 - t288;
t248 = -t217 * t93 + t289;
t245 = t157 * t374 - t215 * t158;
t242 = -t172 * t300 - t323;
t61 = -qJD(4) * pkin(4) - t65;
t241 = -pkin(9) * t108 + t153 * t61;
t240 = -g(1) * (t161 * t319 + t162 * t217) - g(2) * (t159 * t319 + t160 * t217) - (-t200 * t313 + t216 * t217) * t366;
t239 = -g(1) * (-t161 * t318 + t328) - g(2) * (-t159 * t318 + t329) - (t200 * t310 + t214 * t216) * t366;
t236 = g(1) * t119 + g(2) * t117 + g(3) * t148;
t234 = -t21 + t237;
t228 = t233 + t278;
t105 = -t138 * t208 + t188;
t226 = -t105 * t208 + t106 * t210 - t263;
t225 = -g(1) * (-t119 * t217 - t161 * t214) - g(2) * (-t117 * t217 - t159 * t214) - g(3) * (-t148 * t217 + t289) - t6;
t224 = t237 - t266;
t223 = -t228 + t384;
t220 = t7 + t382;
t181 = t362 * t217;
t180 = t362 * t214;
t156 = t163 ^ 2;
t133 = t134 ^ 2;
t127 = -t262 + t246;
t83 = pkin(5) * t322 - t386;
t64 = qJD(2) * t231 + qJD(4) * t93;
t63 = qJD(2) * t230 + qJD(4) * t245;
t53 = -t133 + t379;
t51 = -t108 * t244 + t153 * t168;
t50 = -pkin(5) * t327 + t66;
t49 = -qJ(6) * t322 + t57;
t48 = t269 + t61;
t46 = -pkin(5) * t244 - qJ(6) * t321 + t56;
t41 = -t60 + t333;
t40 = t238 + t337;
t36 = qJD(5) * t248 - t214 * t63 + t217 * t284;
t35 = qJD(5) * t74 + t214 * t284 + t217 * t63;
t34 = -t153 ^ 2 * t217 - t314 - t332;
t33 = t153 * t267 + t314 - t332;
t32 = t249 + t335;
t31 = t249 - t335;
t30 = t134 * t268 - t347;
t29 = t136 * t267 + t349;
t18 = t134 * t243 + t322 * t60;
t17 = t136 * t242 + t238 * t321;
t12 = -t134 * t168 - t153 * t243 - t172 * t314 + t244 * t60;
t11 = t136 * t168 + t153 * t242 + t172 * t95 - t238 * t244;
t10 = (t238 - t336) * t217 - t387 + t346;
t9 = (-t238 - t336) * t217 + t387 + t346;
t8 = (t134 * t217 + t331) * t167 + (-t349 - t347 + (t134 * t214 - t136 * t217) * qJD(5)) * t172;
t5 = t108 * t74 + t134 * t64 + t153 * t36 - t245 * t60;
t4 = t108 * t248 + t136 * t64 - t153 * t35 - t238 * t245;
t1 = -t134 * t35 - t136 * t36 - t238 * t74 + t248 * t60;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t308, 0, 0, 0, 0, 0, 0, t235 (-qJDD(2) * t216 - t309) * t209, 0, -g(3) + (t211 ^ 2 + (t216 ^ 2 + t218 ^ 2) * t209 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t210 * t235, -t208 * t235, t305 * t209 * t309 + (-t157 * t208 + t158 * t210) * qJDD(2), t105 * t157 + t106 * t158 - g(3) + (-qJD(2) * t380 - t146 * t218) * t209, 0, 0, 0, 0, 0, 0, -t64 * qJD(4) + t245 * qJDD(4) + (-t115 * t218 + t163 * t302) * t209, -t63 * qJD(4) - t93 * qJDD(4) + t165 * t284 - t316 * t385, -t93 * t115 - t63 * t163 + t64 * t165 - t245 * t385, t22 * t93 - t266 * t245 + t66 * t63 - t65 * t64 - g(3) + (-t127 * t218 + t152 * t302) * t209, 0, 0, 0, 0, 0, 0, t5, t4, t1, -t21 * t245 - t248 * t6 + t35 * t38 + t36 * t37 + t61 * t64 + t7 * t74 - g(3), 0, 0, 0, 0, 0, 0, t5, t4, t1, -t13 * t245 + t16 * t36 + t2 * t74 - t248 * t3 + t27 * t35 + t48 * t64 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t228, -t308 * t317 + t263, 0, 0, t204 * qJDD(2), 0.2e1 * t208 * t293, 0, t206 * qJDD(2), 0, 0, t381 * t210, -t381 * t208, -t291 + t226 + (qJD(2) * t259 + t295) * t305, -t256 * qJD(3) + t251 * pkin(2) + t226 * qJ(3) + (-g(3) * (pkin(2) * t218 + qJ(3) * t216) + t380 * qJD(1)) * t209, -t165 * t167 + t172 * t385, -t172 * t115 + t167 * t163 - t165 * t168 + t244 * t385, -qJD(4) * t167 + qJDD(4) * t172, -t115 * t244 + t163 * t168, -qJD(4) * t168 + qJDD(4) * t244, 0, -qJD(4) * t342 + qJDD(4) * t386 - t196 * t115 - t127 * t244 + t152 * t168 - t163 * t285 + t200 * t233, -qJD(4) * t388 - t130 * qJDD(4) + t127 * t172 - t152 * t167 - t165 * t285 - t196 * t385 - t229, -t130 * t115 - t163 * t388 + t165 * t342 + t65 * t167 - t66 * t168 + t172 * t266 + t22 * t244 - t385 * t386 - t263 - t291, t22 * t130 - t266 * t386 - t127 * t196 - t152 * t285 - g(1) * t306 - g(2) * t307 - g(3) * (t209 * t315 + t174) + t388 * t66 - t342 * t65, t17, t8, t11, t18, t12, t51, -t61 * t324 + t56 * t108 - t386 * t60 + t37 * t168 - t7 * t244 + (t299 * t61 + t353) * t172 + t358 * t153 + t342 * t134 + t239, -t61 * t323 - t57 * t108 - t386 * t238 - t38 * t168 + t6 * t244 + (t21 * t217 - t300 * t61) * t172 - t359 * t153 + t342 * t136 + t240, -t56 * t238 - t57 * t60 + t257 * t167 - t358 * t136 - t359 * t134 + t229 + (-t6 * t214 - t7 * t217 + (t214 * t37 - t217 * t38) * qJD(5)) * t172, t6 * t57 + t7 * t56 - t21 * t386 - g(1) * (-t161 * t265 + t306) - g(2) * (-t159 * t265 + t307) - t367 + t342 * t61 + t359 * t38 + t358 * t37 - (t218 * t265 + t315) * t366, t17, t8, t11, t18, t12, t51, -t48 * t324 + t46 * t108 + t16 * t168 - t2 * t244 + t83 * t60 + (t299 * t48 + t355) * t172 + t361 * t153 + t343 * t134 + t239, -t48 * t323 - t49 * t108 - t27 * t168 + t3 * t244 + t83 * t238 + (t13 * t217 - t300 * t48) * t172 - t360 * t153 + t343 * t136 + t240, -t46 * t238 - t49 * t60 + (t16 * t217 + t214 * t27) * t167 - t361 * t136 - t360 * t134 + t229 + (-t2 * t217 - t3 * t214 + (t16 * t214 - t217 * t27) * qJD(5)) * t172, t3 * t49 + t2 * t46 + t13 * t83 - g(1) * (pkin(5) * t328 - t161 * t255 + t306) - g(2) * (pkin(5) * t329 - t159 * t255 + t307) - t367 + t343 * t48 + t360 * t27 + t361 * t16 - (t255 * t218 + (pkin(5) * t214 + t363) * t216) * t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, t294, -t305 * t219, qJD(2) * t256 + t223 - t339, 0, 0, 0, 0, 0, 0, 0.2e1 * t165 * qJD(4) + t258 (t192 - t163) * qJD(4) + t227, -t156 - t378, t66 * t163 + t65 * t165 + t223 - t262, 0, 0, 0, 0, 0, 0, t31, t34, t9, -t61 * t165 + t260 * t214 + t217 * t391 - t233, 0, 0, 0, 0, 0, 0, t31, t34, t9, -t48 * t165 + t261 * t214 + t217 * t392 - t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t325, -t156 + t378 (t192 + t163) * qJD(4) + t227, -t325, -t258, qJDD(4), qJD(4) * t66 - t152 * t165 + t224, t152 * t163 + (t65 + t122) * qJD(4) + t236 + t290, 0, 0, t29, t10, t33, t30, t32, -t330, -pkin(4) * t60 - t66 * t134 - t42 * t153 - t37 * t165 + t241 * t214 + (-pkin(9) * qJD(5) * t153 + t234) * t217, -pkin(4) * t238 - t66 * t136 + t38 * t165 + t353 + (pkin(9) * t300 + t43) * t153 + t241 * t217 - t287, t43 * t134 + t42 * t136 + ((qJD(5) * t136 - t60) * pkin(9) + t260) * t217 + ((qJD(5) * t134 + t238) * pkin(9) - t391) * t214 - t236, -t37 * t42 - t38 * t43 - t61 * t66 + t234 * pkin(4) + (-qJD(5) * t257 - t7 * t214 + t6 * t217 - t236) * pkin(9), t29, t10, t33, t30, t32, -t330, -t180 * t108 - t50 * t134 - t16 * t165 - t198 * t60 + t344 * t153 + (t163 * t48 + (t48 + t364) * qJD(5)) * t214 + (-t13 + t237) * t217, t48 * t326 - t181 * t108 + t355 - t50 * t136 + t27 * t165 - t198 * t238 - t345 * t153 + (pkin(5) * t331 + t217 * t48) * qJD(5) - t287, -t345 * t134 - t344 * t136 + t180 * t238 - t181 * t60 - t214 * t392 + t261 * t217 - t236, t3 * t181 - t2 * t180 - t13 * t198 - g(1) * (-t118 * t198 + t119 * t362) - g(2) * (-t116 * t198 + t117 * t362) - g(3) * (-t147 * t198 + t148 * t362) + (pkin(5) * t300 - t50) * t48 + t345 * t27 + t344 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t334, t53, t40, -t334, t41, t108, -t61 * t136 + t220 + t351, t134 * t61 + t225 + t354, 0, 0, t334, t53, t40, -t334, t41, t108, 0.2e1 * t365 - t350 + t352 + (-t269 - t48) * t136 + t220, -t379 * pkin(5) + t348 + t26 * t153 + (qJD(6) + t48) * t134 + t225, -pkin(5) * t238 - t134 * t357, t357 * t27 + (-t48 * t136 + t2 + t382) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60 + t333, t238 - t337, -t133 - t379, t134 * t27 + t136 * t16 - t224 - t338 + t383;];
tau_reg  = t14;
