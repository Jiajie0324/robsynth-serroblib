% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:46
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:44:59
% EndTime: 2019-05-04 23:45:23
% DurationCPUTime: 22.59s
% Computational Cost: add. (135156->810), mult. (303652->1263), div. (0->0), fcn. (234568->12), ass. (0->598)
t811 = sin(qJ(5));
t804 = sin(pkin(11));
t807 = cos(pkin(11));
t812 = sin(qJ(4));
t815 = cos(qJ(4));
t847 = t804 * t815 + t807 * t812;
t772 = t847 * qJD(2);
t814 = cos(qJ(5));
t749 = -qJD(4) * t814 + t772 * t811;
t751 = qJD(4) * t811 + t772 * t814;
t699 = t751 * t749;
t907 = qJDD(2) * t807;
t930 = t804 * t812;
t764 = qJDD(2) * t930 - t815 * t907;
t911 = t772 * qJD(4);
t723 = -t764 - t911;
t714 = qJDD(5) - t723;
t886 = -t714 + t699;
t942 = t886 * t811;
t941 = t886 * t814;
t978 = t886 * pkin(5);
t915 = qJD(2) * t807;
t770 = qJD(2) * t930 - t815 * t915;
t731 = t772 * t770;
t972 = qJDD(4) - t731;
t983 = t812 * t972;
t982 = t815 * t972;
t800 = t807 ^ 2;
t970 = qJD(2) ^ 2;
t794 = t800 * t970;
t799 = t804 ^ 2;
t914 = t970 * t799;
t779 = t794 + t914;
t806 = sin(pkin(6));
t809 = cos(pkin(6));
t805 = sin(pkin(10));
t808 = cos(pkin(10));
t889 = g(1) * t805 - g(2) * t808;
t923 = g(3) - qJDD(1);
t981 = -t806 * t923 + t809 * t889;
t971 = t970 * (t799 + t800);
t775 = t807 * t971;
t816 = cos(qJ(2));
t813 = sin(qJ(2));
t905 = t813 * qJDD(2);
t745 = t775 * t816 + t807 * t905;
t906 = qJDD(2) * t816;
t895 = t807 * t906;
t838 = -t775 * t813 + t895;
t975 = t838 * t809;
t980 = t745 * t808 + t805 * t975;
t979 = t745 * t805 - t808 * t975;
t977 = t805 * t923;
t976 = t808 * t923;
t733 = t838 * t806;
t761 = qJD(5) + t770;
t706 = t761 * t749;
t912 = t770 * qJD(4);
t973 = t847 * qJDD(2);
t725 = t973 - t912;
t828 = qJD(5) * t749 - qJDD(4) * t811 - t725 * t814;
t974 = -t706 - t828;
t885 = -qJDD(4) * t814 + t811 * t725;
t636 = (qJD(5) - t761) * t751 + t885;
t784 = g(1) * t808 + g(2) * t805;
t740 = -t784 * t808 - t805 * t889;
t739 = -t805 * t784 + t808 * t889;
t711 = -t816 * t784 + t813 * t981;
t747 = t749 ^ 2;
t748 = t751 ^ 2;
t760 = t761 ^ 2;
t762 = t770 ^ 2;
t763 = t772 ^ 2;
t969 = qJD(4) ^ 2;
t968 = 2 * qJD(3);
t677 = -t760 - t747;
t600 = t677 * t811 - t941;
t967 = pkin(4) * t600;
t691 = -t748 - t760;
t654 = t699 + t714;
t944 = t654 * t811;
t609 = t691 * t814 - t944;
t966 = pkin(4) * t609;
t965 = pkin(4) * t812;
t964 = pkin(7) * t806;
t963 = pkin(7) * t809;
t640 = -t706 + t828;
t564 = -t636 * t814 - t640 * t811;
t667 = -t747 - t748;
t530 = t564 * t812 - t667 * t815;
t962 = pkin(8) * t530;
t601 = t677 * t814 + t942;
t635 = (qJD(5) + t761) * t751 + t885;
t543 = t601 * t812 - t635 * t815;
t961 = pkin(8) * t543;
t943 = t654 * t814;
t610 = -t691 * t811 - t943;
t548 = t610 * t812 - t815 * t974;
t960 = pkin(8) * t548;
t562 = -t636 * t811 + t640 * t814;
t959 = pkin(9) * t562;
t958 = pkin(9) * t600;
t957 = pkin(9) * t609;
t531 = t564 * t815 + t667 * t812;
t470 = t530 * t807 + t531 * t804;
t471 = -t530 * t804 + t531 * t807;
t866 = t471 * t813 - t562 * t816;
t402 = -t806 * t470 + t809 * t866;
t442 = t471 * t816 + t562 * t813;
t363 = t402 * t808 + t442 * t805;
t956 = qJ(1) * t363;
t544 = t601 * t815 + t635 * t812;
t485 = t543 * t807 + t544 * t804;
t486 = -t543 * t804 + t544 * t807;
t864 = t486 * t813 - t600 * t816;
t416 = -t806 * t485 + t809 * t864;
t460 = t486 * t816 + t600 * t813;
t376 = t416 * t808 + t460 * t805;
t955 = qJ(1) * t376;
t549 = t610 * t815 + t812 * t974;
t488 = t548 * t807 + t549 * t804;
t489 = -t548 * t804 + t549 * t807;
t863 = t489 * t813 - t609 * t816;
t423 = -t806 * t488 + t809 * t863;
t463 = t489 * t816 + t609 * t813;
t379 = t423 * t808 + t463 * t805;
t954 = qJ(1) * t379;
t953 = qJ(3) * t470;
t952 = qJ(3) * t485;
t951 = qJ(3) * t488;
t803 = qJDD(2) * pkin(2);
t754 = t806 * t889 + t809 * t923;
t820 = qJDD(2) * qJ(3) + t711;
t660 = t807 * (-pkin(2) * t970 + t820) - t804 * t754 + t915 * t968;
t647 = -pkin(3) * t794 + pkin(8) * t907 + t660;
t928 = t807 * t754;
t819 = -t928 + ((-qJ(3) - pkin(8)) * qJDD(2) + (-(2 * qJD(3)) + (pkin(3) * t807 + pkin(2)) * qJD(2)) * qJD(2) - t711) * t804;
t580 = t647 * t815 + t812 * t819;
t715 = pkin(4) * t770 - pkin(9) * t772;
t557 = -pkin(4) * t969 + qJDD(4) * pkin(9) - t715 * t770 + t580;
t710 = -t813 * t784 - t816 * t981;
t701 = -qJ(3) * t970 + qJDD(3) + t710 - t803;
t680 = -pkin(3) * t907 - pkin(8) * t779 + t701;
t589 = (-t725 + t912) * pkin(9) + (-t723 + t911) * pkin(4) + t680;
t916 = -t557 * t811 + t589 * t814;
t899 = -qJ(6) * t828 - t916;
t837 = -qJ(6) * t706 - t899;
t913 = qJD(6) * t751;
t466 = t837 - 0.2e1 * t913 - t978;
t950 = t466 * t811;
t949 = t466 * t814;
t579 = t647 * t812 - t815 * t819;
t515 = -t579 * t815 + t580 * t812;
t948 = t515 * t804;
t947 = t515 * t807;
t556 = -qJDD(4) * pkin(4) - pkin(9) * t969 + t715 * t772 + t579;
t946 = t556 * t811;
t945 = t556 * t814;
t940 = t680 * t812;
t939 = t680 * t815;
t938 = t701 * t816;
t720 = qJDD(4) + t731;
t937 = t720 * t812;
t936 = t720 * t815;
t931 = t804 * t807;
t897 = t970 * t931;
t753 = t804 * t895 - t813 * t897;
t935 = t753 * t805;
t934 = t753 * t808;
t933 = t761 * t811;
t932 = t761 * t814;
t927 = t813 * t701;
t926 = t813 * t754;
t925 = t816 * t754;
t922 = pkin(1) * t402 + t442 * t964;
t921 = pkin(1) * t416 + t460 * t964;
t920 = pkin(1) * t423 + t463 * t964;
t919 = -pkin(2) * t562 + qJ(3) * t471;
t918 = -pkin(2) * t600 + qJ(3) * t486;
t917 = -pkin(2) * t609 + qJ(3) * t489;
t509 = t557 * t814 + t589 * t811;
t909 = qJDD(2) * t799;
t908 = qJDD(2) * t806;
t904 = t812 * t699;
t903 = t815 * t699;
t902 = t816 * t731;
t901 = t813 * t931;
t900 = t813 * t731;
t898 = -pkin(4) * t815 - pkin(3);
t896 = t804 * t907;
t401 = t809 * t470 + t806 * t866;
t894 = -pkin(1) * t401 + t442 * t963;
t415 = t809 * t485 + t806 * t864;
t893 = -pkin(1) * t415 + t460 * t963;
t422 = t809 * t488 + t806 * t863;
t892 = -pkin(1) * t422 + t463 * t963;
t891 = -pkin(3) * t600 + pkin(8) * t544;
t890 = -pkin(3) * t609 + pkin(8) * t549;
t887 = -t701 + t803;
t516 = t579 * t812 + t580 * t815;
t659 = t928 + ((-pkin(2) * qJD(2) + t968) * qJD(2) + t820) * t804;
t593 = t659 * t804 + t660 * t807;
t884 = t806 * t901;
t883 = t809 * t901;
t882 = t816 * t897;
t592 = t659 * t807 - t660 * t804;
t793 = t800 * qJDD(2);
t777 = t793 + t909;
t737 = t777 * t816 - t779 * t813;
t880 = pkin(7) * t737 + t592 * t813;
t782 = -t813 * t970 + t906;
t879 = -pkin(7) * t782 - t926;
t845 = t816 * t970 + t905;
t878 = -pkin(7) * t845 + t925;
t877 = t806 * t882;
t876 = t809 * t882;
t675 = -qJD(5) * t751 - t885;
t703 = pkin(5) * t761 - qJ(6) * t751;
t836 = qJ(6) * t675 - 0.2e1 * qJD(6) * t749 - t761 * t703 + t509;
t454 = -qJ(6) * t636 + (-t667 - t747) * pkin(5) + t836;
t742 = 0.2e1 * t913;
t457 = t742 + (-t640 + t706) * qJ(6) + t978 + t899;
t388 = -t454 * t811 + t457 * t814 - t959;
t528 = -pkin(4) * t562 - pkin(5) * t640;
t529 = pkin(8) * t531;
t358 = -pkin(3) * t562 + t388 * t812 + t528 * t815 + t529;
t361 = t388 * t815 - t528 * t812 - t962;
t335 = -t358 * t804 + t361 * t807 - t953;
t825 = -pkin(2) * t470 - pkin(3) * t530 + pkin(4) * t667 - pkin(9) * t564;
t357 = -t454 * t814 - t457 * t811 + t825;
t875 = t335 * t813 + t357 * t816;
t439 = t742 - t837 - t967 + 0.2e1 * t978;
t510 = -pkin(5) * t675 - qJ(6) * t747 + t703 * t751 + qJDD(6) + t556;
t477 = -pkin(5) * t635 + qJ(6) * t677 - t510;
t446 = qJ(6) * t941 - t477 * t811 - t958;
t369 = t439 * t815 + t446 * t812 + t891;
t374 = -t439 * t812 + t446 * t815 - t961;
t339 = -t369 * t804 + t374 * t807 - t952;
t824 = -pkin(2) * t485 - pkin(3) * t543 + pkin(4) * t635 - pkin(9) * t601;
t389 = -qJ(6) * t942 - t477 * t814 + t824;
t874 = t339 * t813 + t389 * t816;
t499 = -qJ(6) * t691 + t510;
t575 = -pkin(5) * t974 - qJ(6) * t654;
t451 = t499 * t814 - t575 * t811 - t957;
t452 = -t966 + (-t691 - t747) * pkin(5) + t836;
t372 = t451 * t812 + t452 * t815 + t890;
t381 = t451 * t815 - t452 * t812 - t960;
t342 = -t372 * t804 + t381 * t807 - t951;
t823 = -pkin(2) * t488 - pkin(3) * t548 + pkin(4) * t974 - pkin(9) * t610;
t391 = -t499 * t811 - t575 * t814 + t823;
t873 = t342 * t813 + t391 * t816;
t443 = t509 * t811 + t814 * t916;
t435 = -t443 - t959;
t383 = t812 * t435 + t562 * t898 + t529;
t399 = t435 * t815 + t562 * t965 - t962;
t345 = -t383 * t804 + t399 * t807 - t953;
t444 = t509 * t814 - t811 * t916;
t371 = -t444 + t825;
t872 = t345 * t813 + t371 * t816;
t474 = -pkin(5) * t747 + t836;
t419 = t474 * t814 - t950;
t393 = t419 * t812 - t510 * t815;
t394 = t419 * t815 + t510 * t812;
t349 = -t393 * t804 + t394 * t807;
t418 = t474 * t811 + t949;
t871 = t349 * t813 - t418 * t816;
t478 = -t916 - t967;
t511 = t946 - t958;
t404 = t478 * t815 + t511 * t812 + t891;
t417 = -t478 * t812 + t511 * t815 - t961;
t351 = -t404 * t804 + t417 * t807 - t952;
t408 = t824 + t945;
t870 = t351 * t813 + t408 * t816;
t479 = t509 - t966;
t512 = t945 - t957;
t405 = t479 * t815 + t512 * t812 + t890;
t420 = -t479 * t812 + t512 * t815 - t960;
t352 = -t405 * t804 + t420 * t807 - t951;
t409 = t823 - t946;
t869 = t352 * t813 + t409 * t816;
t433 = t444 * t812 - t556 * t815;
t434 = t444 * t815 + t556 * t812;
t366 = -t433 * t804 + t434 * t807;
t868 = t366 * t813 - t443 * t816;
t456 = t516 * t807 - t948;
t867 = t456 * t813 - t680 * t816;
t565 = -t635 * t814 - t811 * t974;
t697 = -t748 + t747;
t538 = t565 * t812 + t697 * t815;
t539 = t565 * t815 - t697 * t812;
t481 = -t538 * t804 + t539 * t807;
t563 = t635 * t811 - t814 * t974;
t865 = t481 * t813 + t563 * t816;
t705 = -t748 + t760;
t614 = -t705 * t811 - t941;
t552 = t614 * t812 + t640 * t815;
t554 = t614 * t815 - t640 * t812;
t494 = -t552 * t804 + t554 * t807;
t612 = -t705 * t814 + t942;
t862 = t494 * t813 + t612 * t816;
t704 = t747 - t760;
t615 = t704 * t814 - t944;
t553 = t615 * t812 + t636 * t815;
t555 = t615 * t815 - t636 * t812;
t495 = -t553 * t804 + t555 * t807;
t613 = -t704 * t811 - t943;
t861 = t495 * t813 + t613 * t816;
t630 = -t675 * t811 + t749 * t932;
t585 = t630 * t812 + t903;
t587 = t630 * t815 - t904;
t526 = -t585 * t804 + t587 * t807;
t629 = -t675 * t814 - t749 * t933;
t860 = t526 * t813 + t629 * t816;
t632 = -t751 * t933 - t814 * t828;
t586 = t632 * t812 - t903;
t588 = t632 * t815 + t904;
t527 = -t586 * t804 + t588 * t807;
t631 = -t751 * t932 + t811 * t828;
t859 = t527 * t813 + t631 * t816;
t651 = (-t749 * t814 + t751 * t811) * t761;
t616 = t651 * t812 - t714 * t815;
t617 = t651 * t815 + t714 * t812;
t546 = -t616 * t804 + t617 * t807;
t650 = (t749 * t811 + t751 * t814) * t761;
t858 = t546 * t813 + t650 * t816;
t857 = t593 * t813 - t938;
t716 = -t969 - t762;
t661 = t716 * t812 + t982;
t662 = t716 * t815 - t983;
t599 = -t661 * t804 + t662 * t807;
t722 = t764 + 0.2e1 * t911;
t856 = t599 * t813 - t722 * t816;
t663 = -t764 * t812 - t815 * t973;
t665 = -t764 * t815 + t812 * t973;
t604 = -t663 * t804 + t665 * t807;
t698 = -t762 - t763;
t855 = t604 * t813 - t698 * t816;
t724 = t973 - 0.2e1 * t912;
t664 = -t722 * t812 + t724 * t815;
t666 = -t722 * t815 - t724 * t812;
t605 = -t664 * t804 + t666 * t807;
t730 = t762 - t763;
t854 = t605 * t813 + t730 * t816;
t755 = t762 - t969;
t685 = t755 * t812 + t936;
t688 = t755 * t815 - t937;
t622 = -t685 * t804 + t688 * t807;
t853 = t622 * t813 + t764 * t816;
t756 = -t763 + t969;
t686 = t756 * t815 + t983;
t689 = -t756 * t812 + t982;
t623 = -t686 * t804 + t689 * t807;
t852 = t623 * t813 - t816 * t973;
t757 = -t763 - t969;
t687 = t757 * t815 - t937;
t690 = -t757 * t812 - t936;
t624 = -t687 * t804 + t690 * t807;
t851 = t624 * t813 - t724 * t816;
t656 = t710 * t816 - t711 * t813;
t657 = t710 * t813 + t711 * t816;
t768 = t845 * t809;
t850 = t768 * t808 + t782 * t805;
t728 = t768 * t805 - t782 * t808;
t849 = t777 * t813 + t779 * t816;
t778 = t793 - t909;
t780 = t794 - t914;
t848 = t778 * t813 + t780 * t816;
t708 = (-t770 * t812 - t772 * t815) * qJD(4);
t709 = (-t770 * t815 + t772 * t812) * qJD(4);
t649 = -t708 * t804 + t709 * t807;
t846 = -qJDD(4) * t816 + t649 * t813;
t692 = t723 * t815 + t812 * t912;
t693 = -t723 * t812 + t815 * t912;
t627 = -t692 * t804 + t693 * t807;
t844 = t627 * t813 + t902;
t694 = t725 * t812 + t815 * t911;
t695 = t725 * t815 - t812 * t911;
t628 = -t694 * t804 + t695 * t807;
t843 = t628 * t813 - t902;
t842 = (-t401 * t806 - t402 * t809) * pkin(7);
t841 = (-t415 * t806 - t416 * t809) * pkin(7);
t840 = (-t422 * t806 - t423 * t809) * pkin(7);
t774 = t804 * t971;
t839 = t774 * t813 - t804 * t906;
t436 = -pkin(5) * t510 + qJ(6) * t474;
t355 = -pkin(9) * t418 - qJ(6) * t949 - t436 * t811;
t382 = -pkin(4) * t418 - pkin(5) * t466;
t328 = -pkin(3) * t418 + pkin(8) * t394 + t355 * t812 + t382 * t815;
t332 = -pkin(8) * t393 + t355 * t815 - t382 * t812;
t348 = t393 * t807 + t394 * t804;
t308 = -qJ(3) * t348 - t328 * t804 + t332 * t807;
t323 = -pkin(2) * t348 - pkin(3) * t393 + pkin(4) * t510 - pkin(9) * t419 + qJ(6) * t950 - t436 * t814;
t341 = t349 * t816 + t418 * t813;
t834 = pkin(7) * t341 + t308 * t813 + t323 * t816;
t346 = pkin(8) * t434 + (-pkin(9) * t812 + t898) * t443;
t356 = -pkin(8) * t433 + (-pkin(9) * t815 + t965) * t443;
t365 = t433 * t807 + t434 * t804;
t322 = -qJ(3) * t365 - t346 * t804 + t356 * t807;
t343 = -pkin(2) * t365 - pkin(3) * t433 + pkin(4) * t556 - pkin(9) * t444;
t354 = t366 * t816 + t443 * t813;
t833 = pkin(7) * t354 + t322 * t813 + t343 * t816;
t455 = t516 * t804 + t947;
t504 = -pkin(3) * t680 + pkin(8) * t516;
t398 = -pkin(8) * t947 - qJ(3) * t455 - t504 * t804;
t426 = -pkin(2) * t455 - pkin(3) * t515;
t445 = t456 * t816 + t680 * t813;
t832 = pkin(7) * t445 + t398 * t813 + t426 * t816;
t491 = -pkin(3) * t698 + pkin(8) * t665 + t516;
t503 = -pkin(8) * t663 - t515;
t602 = t663 * t807 + t665 * t804;
t431 = -qJ(3) * t602 - t491 * t804 + t503 * t807;
t560 = -pkin(2) * t602 - pkin(3) * t663;
t568 = t604 * t816 + t698 * t813;
t831 = pkin(7) * t568 + t431 * t813 + t560 * t816;
t582 = -pkin(3) * t722 + pkin(8) * t662 - t939;
t598 = t661 * t807 + t662 * t804;
t611 = -pkin(8) * t661 + t940;
t496 = -qJ(3) * t598 - t582 * t804 + t611 * t807;
t507 = -pkin(2) * t598 - pkin(3) * t661 + t579;
t574 = t599 * t816 + t722 * t813;
t830 = pkin(7) * t574 + t496 * t813 + t507 * t816;
t594 = -pkin(3) * t724 + pkin(8) * t690 + t940;
t618 = -pkin(8) * t687 + t939;
t621 = t687 * t807 + t690 * t804;
t506 = -qJ(3) * t621 - t594 * t804 + t618 * t807;
t517 = -pkin(2) * t621 - pkin(3) * t687 + t580;
t590 = t624 * t816 + t724 * t813;
t829 = pkin(7) * t590 + t506 * t813 + t517 * t816;
t827 = -pkin(7) * t745 + t659 * t816 + t804 * t927;
t744 = t774 * t816 + t804 * t905;
t826 = pkin(7) * t744 + t660 * t816 + t807 * t927;
t566 = t593 * t816 + t927;
t822 = pkin(7) * t566 - (-pkin(2) * t816 - qJ(3) * t813) * t592;
t769 = t782 * t809;
t767 = t782 * t806;
t766 = t845 * t806;
t738 = t778 * t816 - t780 * t813;
t734 = t839 * t809;
t732 = t839 * t806;
t729 = -t769 * t805 - t808 * t845;
t727 = t769 * t808 - t805 * t845;
t718 = t849 * t809;
t717 = t849 * t806;
t713 = -t876 + (-t800 * t806 - t883) * qJDD(2);
t712 = t876 + (-t799 * t806 + t883) * qJDD(2);
t702 = -0.2e1 * t806 * t896 + t809 * t848;
t683 = -t734 * t805 + t744 * t808;
t681 = t734 * t808 + t744 * t805;
t679 = -t925 + (t766 * t806 + t768 * t809) * pkin(7);
t678 = -t926 + (-t767 * t806 - t769 * t809) * pkin(7);
t671 = -t718 * t805 + t737 * t808;
t670 = t718 * t808 + t737 * t805;
t669 = -qJ(3) * t775 + t807 * t887;
t668 = qJ(3) * t774 - t804 * t887;
t652 = t657 * t809;
t648 = t708 * t807 + t709 * t804;
t643 = qJDD(4) * t813 + t649 * t816;
t642 = -pkin(1) * t767 + t806 * t710 + t809 * t878;
t641 = pkin(1) * t766 + t806 * t711 + t809 * t879;
t634 = -t656 * t809 + t806 * t754;
t633 = -t656 * t806 - t809 * t754;
t626 = t694 * t807 + t695 * t804;
t625 = t692 * t807 + t693 * t804;
t620 = t686 * t807 + t689 * t804;
t619 = t685 * t807 + t688 * t804;
t608 = t623 * t816 + t813 * t973;
t607 = t622 * t816 - t764 * t813;
t603 = t664 * t807 + t666 * t804;
t596 = t628 * t816 + t900;
t595 = t627 * t816 - t900;
t581 = pkin(2) * t779 + qJ(3) * t777 + t593;
t577 = t605 * t816 - t730 * t813;
t576 = -t806 * t648 + t809 * t846;
t573 = -pkin(1) * t633 + t657 * t963;
t572 = -t634 * t805 + t657 * t808;
t571 = t634 * t808 + t657 * t805;
t570 = t807 * t938 - t813 * t660 + (-t732 * t806 - t734 * t809) * pkin(7);
t569 = t804 * t938 - t813 * t659 + (-t733 * t806 - t809 * t975) * pkin(7);
t567 = -pkin(2) * t701 + qJ(3) * t593;
t559 = (-t633 * t806 - t634 * t809) * pkin(7);
t558 = t816 * t592 + (-t717 * t806 - t718 * t809) * pkin(7);
t545 = t616 * t807 + t617 * t804;
t541 = -pkin(1) * t732 - t806 * t668 + t809 * t826;
t540 = -pkin(1) * t733 - t806 * t669 + t809 * t827;
t537 = -t806 * t620 + t809 * t852;
t536 = -t806 * t619 + t809 * t853;
t535 = -t806 * t626 + t809 * t843;
t534 = -t806 * t625 + t809 * t844;
t533 = -t806 * t621 + t809 * t851;
t532 = t809 * t621 + t806 * t851;
t525 = t586 * t807 + t588 * t804;
t524 = t585 * t807 + t587 * t804;
t523 = -t806 * t603 + t809 * t854;
t522 = t546 * t816 - t650 * t813;
t521 = -t806 * t598 + t809 * t856;
t520 = t809 * t598 + t806 * t856;
t519 = -t806 * t602 + t809 * t855;
t518 = t809 * t602 + t806 * t855;
t514 = t592 * t806 + t809 * t857;
t513 = -t592 * t809 + t806 * t857;
t505 = -pkin(1) * t717 - t806 * t581 + t809 * t880;
t502 = -pkin(2) * t724 + qJ(3) * t624 + t594 * t807 + t618 * t804;
t501 = t527 * t816 - t631 * t813;
t500 = t526 * t816 - t629 * t813;
t498 = -t533 * t805 + t590 * t808;
t497 = t533 * t808 + t590 * t805;
t493 = t553 * t807 + t555 * t804;
t492 = t552 * t807 + t554 * t804;
t490 = -pkin(2) * t722 + qJ(3) * t599 + t582 * t807 + t611 * t804;
t483 = -t521 * t805 + t574 * t808;
t482 = t521 * t808 + t574 * t805;
t480 = t538 * t807 + t539 * t804;
t476 = -t519 * t805 + t568 * t808;
t475 = t519 * t808 + t568 * t805;
t473 = -t514 * t805 + t566 * t808;
t472 = t514 * t808 + t566 * t805;
t468 = -t806 * t545 + t809 * t858;
t467 = t809 * t545 + t806 * t858;
t465 = t495 * t816 - t613 * t813;
t464 = t494 * t816 - t612 * t813;
t453 = t481 * t816 - t563 * t813;
t450 = -t806 * t525 + t809 * t859;
t449 = -t806 * t524 + t809 * t860;
t448 = t809 * t525 + t806 * t859;
t447 = t809 * t524 + t806 * t860;
t438 = -t468 * t805 + t522 * t808;
t437 = t468 * t808 + t522 * t805;
t432 = -(pkin(2) * t813 - qJ(3) * t816) * t592 + (-t513 * t806 - t514 * t809) * pkin(7);
t430 = -t806 * t493 + t809 * t861;
t429 = -t806 * t492 + t809 * t862;
t428 = t809 * t493 + t806 * t861;
t427 = t809 * t492 + t806 * t862;
t425 = -pkin(1) * t513 - t806 * t567 + t809 * t822;
t424 = -pkin(2) * t698 + qJ(3) * t604 + t491 * t807 + t503 * t804;
t413 = -t450 * t805 + t501 * t808;
t412 = -t449 * t805 + t500 * t808;
t411 = t450 * t808 + t501 * t805;
t410 = t449 * t808 + t500 * t805;
t407 = -t806 * t480 + t809 * t865;
t406 = t809 * t480 + t806 * t865;
t403 = t816 * t506 - t813 * t517 + (-t532 * t806 - t533 * t809) * pkin(7);
t397 = -t806 * t455 + t809 * t867;
t396 = t809 * t455 + t806 * t867;
t395 = t816 * t496 - t813 * t507 + (-t520 * t806 - t521 * t809) * pkin(7);
t392 = -pkin(2) * t680 - pkin(8) * t948 + qJ(3) * t456 + t504 * t807;
t390 = -pkin(1) * t532 - t806 * t502 + t809 * t829;
t387 = -t430 * t805 + t465 * t808;
t386 = -t429 * t805 + t464 * t808;
t385 = t430 * t808 + t465 * t805;
t384 = t429 * t808 + t464 * t805;
t380 = -t423 * t805 + t463 * t808;
t378 = qJ(1) * t380;
t377 = -t416 * t805 + t460 * t808;
t375 = qJ(1) * t377;
t373 = -pkin(1) * t520 - t806 * t490 + t809 * t830;
t370 = t816 * t431 - t813 * t560 + (-t518 * t806 - t519 * t809) * pkin(7);
t368 = -t407 * t805 + t453 * t808;
t367 = t407 * t808 + t453 * t805;
t364 = -t402 * t805 + t442 * t808;
t362 = qJ(1) * t364;
t360 = -t397 * t805 + t445 * t808;
t359 = t397 * t808 + t445 * t805;
t353 = -pkin(1) * t518 - t806 * t424 + t809 * t831;
t350 = t405 * t807 + t420 * t804 + t917;
t347 = t404 * t807 + t417 * t804 + t918;
t344 = t383 * t807 + t399 * t804 + t919;
t340 = t372 * t807 + t381 * t804 + t917;
t338 = t369 * t807 + t374 * t804 + t918;
t337 = -t806 * t365 + t809 * t868;
t336 = t809 * t365 + t806 * t868;
t334 = t358 * t807 + t361 * t804 + t919;
t333 = t816 * t398 - t813 * t426 + (-t396 * t806 - t397 * t809) * pkin(7);
t331 = -pkin(1) * t396 - t806 * t392 + t809 * t832;
t330 = t816 * t352 - t813 * t409 + t840;
t329 = t816 * t351 - t813 * t408 + t841;
t327 = -t806 * t348 + t809 * t871;
t326 = t809 * t348 + t806 * t871;
t325 = -t337 * t805 + t354 * t808;
t324 = t337 * t808 + t354 * t805;
t321 = t816 * t342 - t813 * t391 + t840;
t320 = t816 * t339 - t813 * t389 + t841;
t319 = t816 * t345 - t813 * t371 + t842;
t318 = -pkin(2) * t443 + qJ(3) * t366 + t346 * t807 + t356 * t804;
t317 = -t806 * t350 + t809 * t869 + t892;
t316 = -t806 * t347 + t809 * t870 + t893;
t315 = t816 * t335 - t813 * t357 + t842;
t314 = -t327 * t805 + t341 * t808;
t313 = t327 * t808 + t341 * t805;
t312 = -t806 * t344 + t809 * t872 + t894;
t311 = -t806 * t340 + t809 * t873 + t892;
t310 = -t806 * t338 + t809 * t874 + t893;
t309 = -t806 * t334 + t809 * t875 + t894;
t307 = -pkin(2) * t418 + qJ(3) * t349 + t328 * t807 + t332 * t804;
t306 = t816 * t322 - t813 * t343 + (-t336 * t806 - t337 * t809) * pkin(7);
t305 = -pkin(1) * t336 - t806 * t318 + t809 * t833;
t304 = t816 * t308 - t813 * t323 + (-t326 * t806 - t327 * t809) * pkin(7);
t303 = -pkin(1) * t326 - t806 * t307 + t809 * t834;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t740, 0, 0, 0, 0, 0, 0, t729, t728, 0, t572, 0, 0, 0, 0, 0, 0, -t980, t683, t671, t473, 0, 0, 0, 0, 0, 0, t483, t498, t476, t360, 0, 0, 0, 0, 0, 0, t377, t380, t364, t325, 0, 0, 0, 0, 0, 0, t377, t380, t364, t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t739, 0, 0, 0, 0, 0, 0, t727, -t850, 0, t571, 0, 0, 0, 0, 0, 0, -t979, t681, t670, t472, 0, 0, 0, 0, 0, 0, t482, t497, t475, t359, 0, 0, 0, 0, 0, 0, t376, t379, t363, t324, 0, 0, 0, 0, 0, 0, t376, t379, t363, t313; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t923, 0, 0, 0, 0, 0, 0, t767, -t766, 0, t633, 0, 0, 0, 0, 0, 0, t733, t732, t717, t513, 0, 0, 0, 0, 0, 0, t520, t532, t518, t396, 0, 0, 0, 0, 0, 0, t415, t422, t401, t336, 0, 0, 0, 0, 0, 0, t415, t422, t401, t326; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t977, -t976, -t739, -qJ(1) * t739, 0, 0, -t728, 0, t729, t805 * t908, -qJ(1) * t727 - t642 * t805 + t678 * t808, qJ(1) * t850 - t641 * t805 + t679 * t808, -t652 * t805 + t656 * t808, -qJ(1) * t571 + t559 * t808 - t573 * t805, -t712 * t805 + t934, -t702 * t805 + t738 * t808, t683, -t713 * t805 - t934, t980, 0, qJ(1) * t979 - t540 * t805 + t569 * t808, -qJ(1) * t681 - t541 * t805 + t570 * t808, -qJ(1) * t670 - t505 * t805 + t558 * t808, -qJ(1) * t472 - t425 * t805 + t432 * t808, -t535 * t805 + t596 * t808, -t523 * t805 + t577 * t808, -t537 * t805 + t608 * t808, -t534 * t805 + t595 * t808, -t536 * t805 + t607 * t808, -t576 * t805 + t643 * t808, -qJ(1) * t482 - t373 * t805 + t395 * t808, -qJ(1) * t497 - t390 * t805 + t403 * t808, -qJ(1) * t475 - t353 * t805 + t370 * t808, -qJ(1) * t359 - t331 * t805 + t333 * t808, t413, t368, t386, t412, t387, t438, -t316 * t805 + t329 * t808 - t955, -t317 * t805 + t330 * t808 - t954, -t312 * t805 + t319 * t808 - t956, -qJ(1) * t324 - t305 * t805 + t306 * t808, t413, t368, t386, t412, t387, t438, -t310 * t805 + t320 * t808 - t955, -t311 * t805 + t321 * t808 - t954, -t309 * t805 + t315 * t808 - t956, -qJ(1) * t313 - t303 * t805 + t304 * t808; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t976, -t977, t740, qJ(1) * t740, 0, 0, t850, 0, t727, -t808 * t908, qJ(1) * t729 + t642 * t808 + t678 * t805, qJ(1) * t728 + t641 * t808 + t679 * t805, t652 * t808 + t656 * t805, qJ(1) * t572 + t559 * t805 + t573 * t808, t712 * t808 + t935, t702 * t808 + t738 * t805, t681, t713 * t808 - t935, t979, 0, -qJ(1) * t980 + t540 * t808 + t569 * t805, qJ(1) * t683 + t541 * t808 + t570 * t805, qJ(1) * t671 + t505 * t808 + t558 * t805, qJ(1) * t473 + t425 * t808 + t432 * t805, t535 * t808 + t596 * t805, t523 * t808 + t577 * t805, t537 * t808 + t608 * t805, t534 * t808 + t595 * t805, t536 * t808 + t607 * t805, t576 * t808 + t643 * t805, qJ(1) * t483 + t373 * t808 + t395 * t805, qJ(1) * t498 + t390 * t808 + t403 * t805, qJ(1) * t476 + t353 * t808 + t370 * t805, qJ(1) * t360 + t331 * t808 + t333 * t805, t411, t367, t384, t410, t385, t437, t316 * t808 + t329 * t805 + t375, t317 * t808 + t330 * t805 + t378, t312 * t808 + t319 * t805 + t362, qJ(1) * t325 + t305 * t808 + t306 * t805, t411, t367, t384, t410, t385, t437, t310 * t808 + t320 * t805 + t375, t311 * t808 + t321 * t805 + t378, t309 * t808 + t315 * t805 + t362, qJ(1) * t314 + t303 * t808 + t304 * t805; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t889, t784, 0, 0, 0, 0, t766, 0, t767, t809 * qJDD(2), pkin(1) * t769 - t809 * t710 + t806 * t878, -pkin(1) * t768 - t809 * t711 + t806 * t879, t657 * t806, pkin(1) * t634 + t657 * t964, t877 + (t799 * t809 + t884) * qJDD(2), t806 * t848 + 0.2e1 * t809 * t896, t732, -t877 + (t800 * t809 - t884) * qJDD(2), -t733, 0, pkin(1) * t975 + t809 * t669 + t806 * t827, pkin(1) * t734 + t809 * t668 + t806 * t826, pkin(1) * t718 + t809 * t581 + t806 * t880, pkin(1) * t514 + t809 * t567 + t806 * t822, t809 * t626 + t806 * t843, t809 * t603 + t806 * t854, t809 * t620 + t806 * t852, t809 * t625 + t806 * t844, t809 * t619 + t806 * t853, t809 * t648 + t806 * t846, pkin(1) * t521 + t809 * t490 + t806 * t830, pkin(1) * t533 + t809 * t502 + t806 * t829, pkin(1) * t519 + t809 * t424 + t806 * t831, pkin(1) * t397 + t809 * t392 + t806 * t832, t448, t406, t427, t447, t428, t467, t809 * t347 + t806 * t870 + t921, t809 * t350 + t806 * t869 + t920, t809 * t344 + t806 * t872 + t922, pkin(1) * t337 + t809 * t318 + t806 * t833, t448, t406, t427, t447, t428, t467, t809 * t338 + t806 * t874 + t921, t809 * t340 + t806 * t873 + t920, t809 * t334 + t806 * t875 + t922, pkin(1) * t327 + t809 * t307 + t806 * t834;];
tauB_reg  = t1;
