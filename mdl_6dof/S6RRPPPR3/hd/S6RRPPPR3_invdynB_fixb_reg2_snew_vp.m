% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:35:38
% EndTime: 2019-05-06 08:35:57
% DurationCPUTime: 13.58s
% Computational Cost: add. (40507->640), mult. (89888->858), div. (0->0), fcn. (50491->8), ass. (0->432)
t700 = qJD(2) ^ 2;
t695 = sin(qJ(2));
t687 = t695 ^ 2;
t701 = qJD(1) ^ 2;
t775 = t687 * t701;
t665 = t700 + t775;
t698 = cos(qJ(2));
t826 = t698 * t701;
t741 = t695 * t826;
t661 = -qJDD(2) + t741;
t771 = t698 * t661;
t600 = t665 * t695 + t771;
t754 = qJD(1) * qJD(2);
t678 = t698 * t754;
t752 = qJDD(1) * t695;
t649 = 0.2e1 * t678 + t752;
t696 = sin(qJ(1));
t699 = cos(qJ(1));
t536 = t600 * t696 - t649 * t699;
t814 = pkin(6) * t536;
t540 = t600 * t699 + t649 * t696;
t534 = pkin(6) * t540;
t688 = t698 ^ 2;
t774 = t688 * t701;
t667 = t700 + t774;
t660 = qJDD(2) + t741;
t782 = t660 * t695;
t602 = t667 * t698 + t782;
t677 = t695 * t754;
t750 = qJDD(1) * t698;
t652 = -0.2e1 * t677 + t750;
t538 = t602 * t696 - t652 * t699;
t813 = pkin(6) * t538;
t542 = t602 * t699 + t652 * t696;
t535 = pkin(6) * t542;
t642 = t698 * t660;
t598 = -t667 * t695 + t642;
t816 = pkin(1) * t598;
t835 = -qJ(3) * t667 + t816;
t810 = pkin(7) * t598;
t769 = pkin(1) * t649 - pkin(7) * t600;
t834 = 2 * qJD(5);
t781 = t661 * t695;
t593 = -t665 * t698 + t781;
t833 = pkin(1) * t593;
t764 = t687 + t688;
t654 = t764 * qJDD(1);
t657 = t764 * t701;
t579 = t654 * t696 + t657 * t699;
t812 = pkin(6) * t579;
t581 = t654 * t699 - t657 * t696;
t577 = pkin(6) * t581;
t811 = pkin(7) * t593;
t691 = sin(pkin(9));
t692 = cos(pkin(9));
t762 = qJD(1) * t698;
t634 = -qJD(2) * t692 + t691 * t762;
t635 = qJD(2) * t691 + t692 * t762;
t583 = t634 * t635;
t650 = t678 + t752;
t824 = -t583 + t650;
t832 = t691 * t824;
t831 = t692 * t824;
t694 = sin(qJ(6));
t697 = cos(qJ(6));
t570 = -t697 * t634 - t635 * t694;
t572 = t634 * t694 - t635 * t697;
t507 = t572 * t570;
t637 = qJDD(6) + t650;
t825 = -t507 + t637;
t830 = t694 * t825;
t829 = t697 * t825;
t768 = pkin(1) * t652 - pkin(7) * t602;
t786 = t652 * t698;
t792 = t649 * t695;
t576 = -t786 + t792;
t658 = (t687 - t688) * t701;
t828 = t576 * t696 + t658 * t699;
t827 = t576 * t699 - t658 * t696;
t668 = -t700 + t774;
t603 = t668 * t698 + t781;
t749 = qJDD(1) * t699;
t561 = t603 * t696 - t698 * t749;
t563 = t603 * t699 + t696 * t750;
t651 = -t677 + t750;
t615 = -qJDD(2) * t691 - t692 * t651;
t763 = qJD(1) * t695;
t740 = t634 * t763;
t556 = t615 - t740;
t767 = pkin(1) * t657 + pkin(7) * t654;
t659 = -qJD(2) * pkin(3) - qJ(4) * t763;
t746 = 0.2e1 * qJD(1) * qJD(4);
t823 = -qJD(2) * t659 + t698 * t746;
t822 = pkin(3) * t774 + qJ(4) * t651;
t662 = g(1) * t696 - t699 * g(2);
t626 = qJDD(1) * pkin(1) + pkin(7) * t701 + t662;
t710 = -pkin(2) * t677 + t626;
t820 = t651 * pkin(3) - qJ(4) * t774 + qJDD(4);
t707 = t710 + t820;
t818 = 2 * qJD(3);
t757 = t818 + t659;
t729 = t757 * t695;
t807 = qJ(3) + pkin(4);
t808 = pkin(2) + qJ(5);
t444 = t808 * t651 + t807 * t650 + (t729 + (-qJ(5) * t695 + t698 * t807) * qJD(2)) * qJD(1) + t707;
t663 = g(1) * t699 + g(2) * t696;
t627 = -pkin(1) * t701 + qJDD(1) * pkin(7) - t663;
t809 = t698 * g(3);
t606 = t695 * t627 + t809;
t733 = qJDD(2) * pkin(2) + t700 * qJ(3) - qJDD(3);
t715 = pkin(3) * t660 + t650 * qJ(4) + t733;
t709 = t606 - t715;
t720 = pkin(4) * t695 + qJ(5) * t698;
t760 = qJD(2) * t698;
t736 = qJ(4) * t760;
t722 = -pkin(2) * t698 - qJ(3) * t695;
t647 = t722 * qJD(1);
t756 = -0.2e1 * qJD(4) + t647;
t476 = -t700 * pkin(4) - qJDD(2) * qJ(5) + (t736 + (-qJD(1) * t720 + t756) * t695) * qJD(1) + t709;
t723 = t692 * t444 - t476 * t691 + t635 * t834;
t407 = t691 * t444 + t692 * t476 + t634 * t834;
t821 = -t668 * t695 + t771;
t719 = t650 + t678;
t727 = t763 * t818;
t702 = qJ(3) * t719 + t710 + t727;
t505 = (t651 + t652) * pkin(2) + t702;
t728 = qJD(1) * t647 + t627;
t708 = t695 * t728 - t733 + t809;
t683 = t695 * g(3);
t765 = t700 * pkin(2) + t683;
t819 = -t728 * t698 + t765;
t568 = t570 ^ 2;
t569 = t572 ^ 2;
t631 = t634 ^ 2;
t632 = t635 ^ 2;
t671 = qJD(6) + t763;
t669 = t671 ^ 2;
t817 = pkin(2) + pkin(3);
t815 = pkin(2) * t651;
t806 = qJ(3) * t657;
t804 = qJ(3) * t698;
t385 = pkin(5) * t824 - pkin(8) * t556 + t723;
t614 = -qJDD(2) * t692 + t651 * t691;
t616 = pkin(5) * t763 + pkin(8) * t635;
t390 = -pkin(5) * t631 + pkin(8) * t614 - t616 * t763 + t407;
t354 = -t697 * t385 + t390 * t694;
t355 = t385 * t694 + t390 * t697;
t338 = -t354 * t697 + t355 * t694;
t802 = t338 * t692;
t716 = t765 + t822;
t704 = t757 * qJD(2) + (qJD(1) * t756 + t627) * t698 - t716;
t475 = -t700 * qJ(5) + qJDD(2) * t807 - t720 * t826 + qJDD(5) + t704;
t429 = -t614 * pkin(5) - t631 * pkin(8) - t616 * t635 + t475;
t801 = t429 * t694;
t800 = t429 * t697;
t799 = t475 * t691;
t798 = t475 * t692;
t495 = t507 + t637;
t797 = t495 * t694;
t796 = t495 * t697;
t558 = t583 + t650;
t795 = t558 * t692;
t794 = t626 * t695;
t793 = t626 * t698;
t790 = t649 * t698;
t788 = t652 * t695;
t777 = t671 * t694;
t776 = t671 * t697;
t773 = t691 * t338;
t772 = t691 * t558;
t755 = qJD(6) + t671;
t753 = qJD(3) * qJD(2);
t751 = qJDD(1) * t696;
t748 = qJDD(2) * qJ(3);
t747 = pkin(3) + t808;
t745 = t695 * t507;
t744 = t698 * t507;
t743 = t695 * t583;
t742 = t698 * t583;
t739 = t635 * t763;
t738 = t691 * t763;
t737 = t692 * t763;
t339 = t354 * t694 + t697 * t355;
t607 = t627 * t698 - t683;
t520 = t606 * t695 + t698 * t607;
t731 = -t697 * t614 + t615 * t694;
t730 = -t632 - t775;
t589 = -t662 * t696 - t699 * t663;
t726 = t696 * t741;
t725 = t699 * t741;
t656 = -t696 * t701 + t749;
t724 = -pkin(6) * t656 - g(3) * t696;
t721 = pkin(2) * t695 - t804;
t363 = t407 * t691 + t692 * t723;
t364 = t407 * t692 - t691 * t723;
t519 = t606 * t698 - t607 * t695;
t718 = t614 * t694 + t615 * t697;
t574 = t788 + t790;
t588 = t662 * t699 - t663 * t696;
t713 = qJ(4) * qJDD(1) - t728;
t712 = (-qJD(6) + t671) * t572 - t731;
t493 = -qJD(6) * t570 + t718;
t711 = t614 - t739;
t521 = t748 + 0.2e1 * t753 - t819;
t682 = -0.2e1 * t753;
t705 = t682 + (-qJDD(2) + t661) * qJ(3) + t833 + t819;
t703 = t815 + (t649 + t719) * qJ(3) + t710;
t674 = t695 * t746;
t666 = t700 - t775;
t655 = t699 * t701 + t751;
t645 = t721 * qJDD(1);
t641 = t764 * t754;
t629 = t698 * t650;
t628 = t695 * t650;
t621 = -pkin(6) * t655 + g(3) * t699;
t619 = (-t695 * t817 + t804) * qJDD(1);
t618 = -t632 + t775;
t617 = t631 - t775;
t613 = qJDD(2) * t696 + t641 * t699;
t612 = -t687 * t754 + t629;
t611 = -qJDD(2) * t699 + t641 * t696;
t610 = -t651 * t695 - t688 * t754;
t599 = -t666 * t695 + t642;
t595 = t678 * t695 + t628;
t592 = t666 * t698 + t782;
t591 = (t651 - t677) * t698;
t587 = -qJ(3) * t652 - qJ(4) * t660;
t578 = t632 - t631;
t573 = -t775 - t631;
t567 = t612 * t699 - t726;
t566 = t610 * t699 + t726;
t565 = t612 * t696 + t725;
t564 = t610 * t696 - t725;
t562 = t599 * t699 + t695 * t751;
t560 = t599 * t696 - t695 * t749;
t559 = qJ(4) * t661 + t649 * t817;
t555 = t615 + t740;
t552 = -t614 - t739;
t551 = t671 * t570;
t550 = -t631 - t632;
t548 = (-t634 * t692 + t635 * t691) * t763;
t547 = (t634 * t691 + t635 * t692) * t763;
t545 = -t569 + t669;
t544 = t568 - t669;
t533 = -t793 - t811;
t532 = -t794 - t810;
t531 = -t615 * t692 - t635 * t738;
t530 = t615 * t691 - t635 * t737;
t529 = t614 * t691 + t634 * t737;
t528 = t614 * t692 - t634 * t738;
t524 = t606 - t816;
t523 = t607 - t833;
t522 = -t569 - t669;
t517 = t708 + t806;
t516 = -t548 * t695 + t629;
t515 = pkin(2) * t657 + t521;
t514 = t702 + t815;
t513 = -t617 * t692 + t772;
t512 = -t691 * t730 - t795;
t511 = t618 * t691 - t831;
t510 = t617 * t691 + t795;
t509 = t692 * t730 - t772;
t508 = t618 * t692 + t832;
t506 = t569 - t568;
t504 = t703 + t727;
t503 = t520 * t699 - t626 * t696;
t502 = t520 * t696 + t626 * t699;
t501 = -t669 - t568;
t500 = t573 * t692 - t832;
t499 = t691 * t573 + t831;
t498 = -t531 * t695 + t742;
t497 = -t529 * t695 - t742;
t492 = -qJD(6) * t572 - t731;
t491 = (t695 * t756 + t736) * qJD(1) + t709;
t490 = t552 * t692 + t555 * t691;
t489 = t691 * t556 + t692 * t711;
t488 = -t552 * t691 + t555 * t692;
t487 = -t556 * t692 + t691 * t711;
t486 = t704 + t748;
t485 = (-t570 * t697 + t572 * t694) * t671;
t484 = (-t570 * t694 - t572 * t697) * t671;
t483 = -pkin(2) * t660 + t708 - t835;
t482 = -pkin(2) * t665 + t705;
t481 = t815 + qJ(3) * t650 + (qJ(3) * t760 + t729) * qJD(1) + t707;
t480 = -t568 - t569;
t479 = -t806 + t674 + (-qJ(4) * t754 - g(3)) * t698 + t713 * t695 + t715;
t478 = t521 * t698 + t695 * t708;
t477 = t521 * t695 - t698 * t708;
t474 = -t511 * t695 + t556 * t698;
t473 = t512 * t695 + t555 * t698;
t472 = -t513 * t695 + t698 * t711;
t471 = -t512 * t698 + t555 * t695;
t469 = -t657 * t817 + t698 * t713 + t682 + t716 - t748 + t823;
t468 = qJ(4) * t665 + qJD(1) * t729 + t703 + t820;
t467 = -pkin(2) * t792 + t504 * t698 + t811;
t466 = qJ(3) * t786 - t505 * t695 - t810;
t465 = -t490 * t695 + t578 * t698;
t464 = t500 * t695 + t552 * t698;
t463 = -t500 * t698 + t552 * t695;
t462 = t493 + t551;
t461 = t493 - t551;
t460 = -t570 * t755 + t718;
t457 = t572 * t755 + t731;
t456 = -t515 * t695 + t517 * t698;
t455 = t544 * t697 - t797;
t454 = -t545 * t694 + t829;
t453 = t544 * t694 + t796;
t452 = t545 * t697 + t830;
t451 = -pkin(3) * t652 - qJ(4) * t667 - t659 * t763 - t505 - t820;
t450 = t493 * t697 - t572 * t777;
t449 = t493 * t694 + t572 * t776;
t448 = -t492 * t694 + t570 * t776;
t447 = t492 * t697 + t570 * t777;
t446 = t489 * t695 + t550 * t698;
t445 = -t489 * t698 + t550 * t695;
t443 = -t522 * t694 - t796;
t442 = t522 * t697 - t797;
t439 = -t665 * t817 + t705 + t822 + t823;
t437 = t674 + t817 * t660 + (-t695 * t647 - t736) * qJD(1) - t709 + t835;
t436 = t501 * t697 - t830;
t435 = t501 * t694 + t829;
t433 = t478 * t699 - t514 * t696;
t432 = t478 * t696 + t514 * t699;
t431 = t486 * t698 + t491 * t695;
t430 = t486 * t695 - t491 * t698;
t428 = t484 * t691 - t485 * t692;
t427 = t484 * t692 + t485 * t691;
t426 = t473 * t699 - t509 * t696;
t425 = t473 * t696 + t509 * t699;
t424 = qJ(3) * t481 - qJ(4) * t491;
t423 = -t451 * t695 + t587 * t698 + t810;
t422 = t468 * t698 - t559 * t695 + t811;
t421 = -t428 * t695 + t637 * t698;
t420 = -pkin(1) * t477 + pkin(2) * t708 - qJ(3) * t521;
t419 = t464 * t699 - t499 * t696;
t418 = t464 * t696 + t499 * t699;
t417 = -t469 * t695 + t479 * t698;
t416 = t446 * t699 - t487 * t696;
t415 = t446 * t696 + t487 * t699;
t414 = -pkin(7) * t477 - t514 * t721;
t413 = t462 * t694 + t697 * t712;
t412 = -t457 * t697 - t461 * t694;
t411 = -t462 * t697 + t694 * t712;
t410 = -t457 * t694 + t461 * t697;
t408 = -qJ(4) * t489 + t487 * t807;
t405 = t453 * t691 - t455 * t692;
t404 = t452 * t691 - t454 * t692;
t403 = t453 * t692 + t455 * t691;
t402 = t452 * t692 + t454 * t691;
t400 = t449 * t691 - t450 * t692;
t399 = t447 * t691 - t448 * t692;
t398 = t449 * t692 + t450 * t691;
t397 = t447 * t692 + t448 * t691;
t396 = t431 * t699 - t481 * t696;
t395 = t431 * t696 + t481 * t699;
t394 = -t691 * t442 + t443 * t692;
t393 = t442 * t692 + t443 * t691;
t392 = -qJ(4) * t486 + t481 * t817;
t391 = -pkin(8) * t442 + t800;
t389 = -t691 * t435 + t436 * t692;
t388 = t435 * t692 + t436 * t691;
t387 = -t400 * t695 + t744;
t386 = -t399 * t695 - t744;
t384 = -pkin(8) * t435 + t801;
t382 = -qJ(4) * t555 + t509 * t747 - t798;
t381 = -qJ(4) * t552 + t499 * t747 - t799;
t380 = -t404 * t695 + t462 * t698;
t379 = -t405 * t695 + t698 * t712;
t378 = t394 * t695 + t460 * t698;
t377 = -t394 * t698 + t460 * t695;
t376 = -pkin(1) * t430 - qJ(3) * t486 + t491 * t817;
t375 = -pkin(5) * t460 + pkin(8) * t443 + t801;
t374 = t389 * t695 + t457 * t698;
t373 = -t389 * t698 + t457 * t695;
t372 = -qJ(4) * t512 + t509 * t807 - t407;
t371 = -pkin(5) * t457 + pkin(8) * t436 - t800;
t370 = -qJ(4) * t500 + t499 * t807 + t723;
t369 = -pkin(1) * t471 + t512 * t747 - t555 * t807 + t799;
t368 = -t691 * t411 + t413 * t692;
t367 = t410 * t691 - t412 * t692;
t366 = t411 * t692 + t413 * t691;
t365 = t410 * t692 + t412 * t691;
t362 = -pkin(1) * t463 + t500 * t747 - t552 * t807 - t798;
t361 = -t367 * t695 + t506 * t698;
t360 = t368 * t695 + t480 * t698;
t359 = -t368 * t698 + t480 * t695;
t358 = -pkin(7) * t430 - t392 * t695 + t424 * t698;
t357 = t364 * t695 + t475 * t698;
t356 = -t364 * t698 + t475 * t695;
t352 = t378 * t699 - t393 * t696;
t351 = t378 * t696 + t393 * t699;
t350 = t374 * t699 - t388 * t696;
t349 = t374 * t696 + t388 * t699;
t348 = -qJ(4) * t550 + t487 * t747 + t363;
t347 = -pkin(7) * t471 + t372 * t698 - t382 * t695;
t346 = -pkin(1) * t445 + t489 * t747 - t550 * t807 + t364;
t345 = -pkin(7) * t463 + t370 * t698 - t381 * t695;
t344 = t360 * t699 - t366 * t696;
t343 = t360 * t696 + t366 * t699;
t342 = t357 * t699 - t363 * t696;
t341 = t357 * t696 + t363 * t699;
t340 = -pkin(7) * t445 - t348 * t695 + t408 * t698;
t336 = -pkin(5) * t429 + pkin(8) * t339;
t335 = -qJ(4) * t364 + t363 * t807;
t334 = -pkin(8) * t411 - t338;
t333 = pkin(5) * t442 - qJ(4) * t394 + t393 * t807 - t355;
t332 = -pkin(5) * t480 + pkin(8) * t413 + t339;
t331 = -qJ(4) * t475 + t363 * t747;
t330 = -qJ(4) * t460 + t375 * t691 - t391 * t692 + t393 * t747;
t329 = pkin(5) * t411 - qJ(4) * t368 + t366 * t807;
t328 = pkin(5) * t435 - qJ(4) * t389 + t388 * t807 - t354;
t327 = -qJ(4) * t457 + t371 * t691 - t384 * t692 + t388 * t747;
t326 = -pkin(1) * t377 + t375 * t692 + t391 * t691 + t394 * t747 - t460 * t807;
t325 = -pkin(1) * t356 + t364 * t747 - t475 * t807;
t324 = -pkin(1) * t373 + t371 * t692 + t384 * t691 + t389 * t747 - t457 * t807;
t323 = t339 * t692 - t773;
t322 = t339 * t691 + t802;
t321 = t323 * t695 + t429 * t698;
t320 = -t323 * t698 + t429 * t695;
t319 = -pkin(7) * t377 - t330 * t695 + t333 * t698;
t318 = -pkin(7) * t356 - t331 * t695 + t335 * t698;
t317 = -pkin(7) * t373 - t327 * t695 + t328 * t698;
t316 = -qJ(4) * t480 + t332 * t691 - t334 * t692 + t366 * t747;
t315 = t321 * t699 - t322 * t696;
t314 = t321 * t696 + t322 * t699;
t313 = -pkin(1) * t359 + t332 * t692 + t334 * t691 + t368 * t747 - t480 * t807;
t312 = -pkin(7) * t359 - t316 * t695 + t329 * t698;
t311 = pkin(5) * t338 - qJ(4) * t323 + t322 * t807;
t310 = pkin(8) * t802 - qJ(4) * t429 + t322 * t747 + t336 * t691;
t309 = -pkin(1) * t320 - pkin(8) * t773 + t323 * t747 + t336 * t692 - t429 * t807;
t308 = -pkin(7) * t320 - t310 * t695 + t311 * t698;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t655, -t656, 0, t589, 0, 0, 0, 0, 0, 0, -t542, t540, t581, t503, 0, 0, 0, 0, 0, 0, -t542, t581, -t540, t433, 0, 0, 0, 0, 0, 0, -t540, t542, -t581, t396, 0, 0, 0, 0, 0, 0, t419, t426, t416, t342, 0, 0, 0, 0, 0, 0, t350, t352, t344, t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t656, -t655, 0, t588, 0, 0, 0, 0, 0, 0, -t538, t536, t579, t502, 0, 0, 0, 0, 0, 0, -t538, t579, -t536, t432, 0, 0, 0, 0, 0, 0, -t536, t538, -t579, t395, 0, 0, 0, 0, 0, 0, t418, t425, t415, t341, 0, 0, 0, 0, 0, 0, t349, t351, t343, t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t598, t593, 0, -t519, 0, 0, 0, 0, 0, 0, t598, 0, -t593, t477, 0, 0, 0, 0, 0, 0, -t593, -t598, 0, t430, 0, 0, 0, 0, 0, 0, t463, t471, t445, t356, 0, 0, 0, 0, 0, 0, t373, t377, t359, t320; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t656, 0, -t655, 0, t724, -t621, -t588, -pkin(6) * t588, t567, -t827, t562, t566, t563, t613, -t524 * t696 + t532 * t699 + t813, -t523 * t696 + t533 * t699 - t814, t519 * t699 - t812, -pkin(6) * t502 - (pkin(1) * t696 - pkin(7) * t699) * t519, t567, t562, t827, t613, -t563, t566, t466 * t699 - t483 * t696 + t813, t456 * t699 - t645 * t696 - t812, t467 * t699 - t482 * t696 + t814, -pkin(6) * t432 + t414 * t699 - t420 * t696, t566, -t827, t563, t567, t562, t613, t422 * t699 - t439 * t696 + t814, t423 * t699 - t437 * t696 - t813, t417 * t699 - t619 * t696 + t812, -pkin(6) * t395 + t358 * t699 - t376 * t696, t498 * t699 - t530 * t696, t465 * t699 - t488 * t696, t474 * t699 - t508 * t696, t497 * t699 - t528 * t696, t472 * t699 - t510 * t696, t516 * t699 - t547 * t696, -pkin(6) * t418 + t345 * t699 - t362 * t696, -pkin(6) * t425 + t347 * t699 - t369 * t696, -pkin(6) * t415 + t340 * t699 - t346 * t696, -pkin(6) * t341 + t318 * t699 - t325 * t696, t387 * t699 - t398 * t696, t361 * t699 - t365 * t696, t380 * t699 - t402 * t696, t386 * t699 - t397 * t696, t379 * t699 - t403 * t696, t421 * t699 - t427 * t696, -pkin(6) * t349 + t317 * t699 - t324 * t696, -pkin(6) * t351 + t319 * t699 - t326 * t696, -pkin(6) * t343 + t312 * t699 - t313 * t696, -pkin(6) * t314 + t308 * t699 - t309 * t696; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t655, 0, t656, 0, t621, t724, t589, pkin(6) * t589, t565, -t828, t560, t564, t561, t611, t524 * t699 + t532 * t696 - t535, t523 * t699 + t533 * t696 + t534, t519 * t696 + t577, pkin(6) * t503 - (-pkin(1) * t699 - pkin(7) * t696) * t519, t565, t560, t828, t611, -t561, t564, t466 * t696 + t483 * t699 - t535, t456 * t696 + t645 * t699 + t577, t467 * t696 + t482 * t699 - t534, pkin(6) * t433 + t414 * t696 + t420 * t699, t564, -t828, t561, t565, t560, t611, t422 * t696 + t439 * t699 - t534, t423 * t696 + t437 * t699 + t535, t417 * t696 + t619 * t699 - t577, pkin(6) * t396 + t358 * t696 + t376 * t699, t498 * t696 + t530 * t699, t465 * t696 + t488 * t699, t474 * t696 + t508 * t699, t497 * t696 + t528 * t699, t472 * t696 + t510 * t699, t516 * t696 + t547 * t699, pkin(6) * t419 + t345 * t696 + t362 * t699, pkin(6) * t426 + t347 * t696 + t369 * t699, pkin(6) * t416 + t340 * t696 + t346 * t699, pkin(6) * t342 + t318 * t696 + t325 * t699, t387 * t696 + t398 * t699, t361 * t696 + t365 * t699, t380 * t696 + t402 * t699, t386 * t696 + t397 * t699, t379 * t696 + t403 * t699, t421 * t696 + t427 * t699, pkin(6) * t350 + t317 * t696 + t324 * t699, pkin(6) * t352 + t319 * t696 + t326 * t699, pkin(6) * t344 + t312 * t696 + t313 * t699, pkin(6) * t315 + t308 * t696 + t309 * t699; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t662, t663, 0, 0, t595, t574, t592, t591, -t821, 0, t768 + t793, -t769 - t794, t520 + t767, pkin(1) * t626 + pkin(7) * t520, t595, t592, -t574, 0, t821, t591, qJ(3) * t788 + t505 * t698 + t768, t515 * t698 + t517 * t695 + t767, pkin(2) * t790 + t504 * t695 + t769, pkin(7) * t478 + (pkin(1) - t722) * t514, t591, t574, -t821, t595, t592, 0, t468 * t695 + t559 * t698 + t769, t451 * t698 + t587 * t695 - t768, t469 * t698 + t479 * t695 - t767, pkin(1) * t481 + pkin(7) * t431 + t392 * t698 + t424 * t695, t531 * t698 + t743, t490 * t698 + t578 * t695, t511 * t698 + t556 * t695, t529 * t698 - t743, t513 * t698 + t695 * t711, t548 * t698 + t628, pkin(1) * t499 + pkin(7) * t464 + t370 * t695 + t381 * t698, pkin(1) * t509 + pkin(7) * t473 + t372 * t695 + t382 * t698, pkin(1) * t487 + pkin(7) * t446 + t348 * t698 + t408 * t695, pkin(1) * t363 + pkin(7) * t357 + t331 * t698 + t335 * t695, t400 * t698 + t745, t367 * t698 + t506 * t695, t404 * t698 + t462 * t695, t399 * t698 - t745, t405 * t698 + t695 * t712, t428 * t698 + t637 * t695, pkin(1) * t388 + pkin(7) * t374 + t327 * t698 + t328 * t695, pkin(1) * t393 + pkin(7) * t378 + t330 * t698 + t333 * t695, pkin(1) * t366 + pkin(7) * t360 + t316 * t698 + t329 * t695, pkin(1) * t322 + pkin(7) * t321 + t310 * t698 + t311 * t695;];
tauB_reg  = t1;
