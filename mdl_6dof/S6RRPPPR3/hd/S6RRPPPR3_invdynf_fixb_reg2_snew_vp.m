% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPPPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:36:18
% EndTime: 2019-05-06 08:36:22
% DurationCPUTime: 4.20s
% Computational Cost: add. (12180->301), mult. (27189->294), div. (0->0), fcn. (15343->8), ass. (0->173)
t1665 = sin(qJ(2));
t1668 = cos(qJ(2));
t1671 = qJD(1) ^ 2;
t1690 = t1665 * t1668 * t1671;
t1632 = qJDD(2) + t1690;
t1633 = -qJDD(2) + t1690;
t1670 = qJD(2) ^ 2;
t1657 = t1665 ^ 2;
t1703 = t1657 * t1671;
t1637 = t1670 + t1703;
t1598 = t1633 * t1668 + t1637 * t1665;
t1711 = qJD(2) * t1668;
t1647 = qJD(1) * t1711;
t1695 = t1665 * qJDD(1);
t1623 = 0.2e1 * t1647 + t1695;
t1666 = sin(qJ(1));
t1669 = cos(qJ(1));
t1726 = t1598 * t1666 - t1623 * t1669;
t1725 = t1598 * t1669 + t1623 * t1666;
t1658 = t1668 ^ 2;
t1702 = t1658 * t1671;
t1638 = t1670 + t1702;
t1600 = t1632 * t1665 + t1638 * t1668;
t1713 = qJD(1) * t1665;
t1646 = qJD(2) * t1713;
t1694 = t1668 * qJDD(1);
t1626 = -0.2e1 * t1646 + t1694;
t1724 = t1600 * t1666 - t1626 * t1669;
t1723 = t1600 * t1669 + t1626 * t1666;
t1625 = -t1646 + t1694;
t1661 = sin(pkin(9));
t1662 = cos(pkin(9));
t1606 = -t1661 * qJDD(2) - t1625 * t1662;
t1712 = qJD(1) * t1668;
t1617 = -t1662 * qJD(2) + t1661 * t1712;
t1692 = t1617 * t1713;
t1676 = -t1606 + t1692;
t1618 = qJD(2) * t1661 + t1662 * t1712;
t1664 = sin(qJ(6));
t1667 = cos(qJ(6));
t1587 = -t1667 * t1617 - t1618 * t1664;
t1722 = t1587 ^ 2;
t1589 = t1617 * t1664 - t1618 * t1667;
t1721 = t1589 ^ 2;
t1615 = t1617 ^ 2;
t1720 = t1618 ^ 2;
t1640 = qJD(6) + t1713;
t1719 = t1640 ^ 2;
t1718 = 2 * qJD(3);
t1717 = 2 * qJD(5);
t1716 = qJ(3) + pkin(4);
t1715 = t1625 * pkin(2);
t1714 = t1668 * g(3);
t1710 = qJDD(2) * qJ(3);
t1709 = t1587 * t1589;
t1708 = t1617 * t1618;
t1635 = -g(1) * t1669 - g(2) * t1666;
t1614 = -pkin(1) * t1671 + qJDD(1) * pkin(7) + t1635;
t1701 = t1665 * t1614;
t1700 = -qJD(2) * pkin(3) - qJ(4) * t1713 + t1718;
t1621 = (-pkin(2) * t1668 - qJ(3) * t1665) * qJD(1);
t1699 = -(2 * qJD(4)) + t1621;
t1698 = qJD(6) - t1640;
t1697 = qJD(6) + t1640;
t1603 = -t1665 * g(3) + t1668 * t1614;
t1696 = t1657 + t1658;
t1693 = qJ(4) * t1711;
t1691 = t1618 * t1713;
t1624 = t1647 + t1695;
t1634 = t1666 * g(1) - t1669 * g(2);
t1613 = qJDD(1) * pkin(1) + t1671 * pkin(7) + t1634;
t1675 = -pkin(2) * t1646 + t1613;
t1673 = t1625 * pkin(3) - qJ(4) * t1702 + qJDD(4) + t1675;
t1688 = t1700 * t1665;
t1541 = (pkin(2) + qJ(5)) * t1625 + t1716 * t1624 + (t1688 + (-qJ(5) * t1665 + t1716 * t1668) * qJD(2)) * qJD(1) + t1673;
t1622 = (pkin(4) * t1665 + qJ(5) * t1668) * qJD(1);
t1678 = -qJDD(2) * pkin(2) - t1670 * qJ(3) + qJDD(3) + t1714;
t1674 = -pkin(3) * t1632 - t1624 * qJ(4) + t1678 + t1701;
t1554 = -t1670 * pkin(4) - qJDD(2) * qJ(5) + (t1693 + (-t1622 + t1699) * t1665) * qJD(1) + t1674;
t1529 = t1661 * t1541 + t1662 * t1554 + t1617 * t1717;
t1689 = -t1670 * pkin(2) + t1603;
t1605 = -qJDD(2) * t1662 + t1625 * t1661;
t1687 = t1667 * t1605 - t1664 * t1606;
t1677 = t1624 - t1708;
t1686 = -t1703 - t1720;
t1685 = t1662 * t1541 - t1661 * t1554 + t1618 * t1717;
t1684 = -qJDD(6) - t1624;
t1522 = t1677 * pkin(5) + t1676 * pkin(8) + t1685;
t1607 = pkin(5) * t1713 + pkin(8) * t1618;
t1525 = -pkin(5) * t1615 + pkin(8) * t1605 - t1607 * t1713 + t1529;
t1508 = t1522 * t1667 - t1525 * t1664;
t1509 = t1522 * t1664 + t1525 * t1667;
t1683 = t1508 * t1667 + t1509 * t1664;
t1545 = -t1698 * t1589 + t1687;
t1679 = -t1664 * t1605 - t1667 * t1606;
t1547 = t1698 * t1587 + t1679;
t1682 = t1545 * t1664 + t1547 * t1667;
t1563 = -t1684 - t1709;
t1567 = -t1719 - t1722;
t1681 = t1563 * t1667 + t1567 * t1664;
t1564 = t1684 - t1709;
t1574 = -t1719 - t1721;
t1680 = t1564 * t1664 + t1574 * t1667;
t1627 = t1696 * qJDD(1);
t1630 = t1696 * t1671;
t1592 = t1627 * t1669 - t1630 * t1666;
t1591 = t1627 * t1666 + t1630 * t1669;
t1597 = t1632 * t1668 - t1638 * t1665;
t1594 = t1633 * t1665 - t1637 * t1668;
t1672 = -pkin(3) * t1702 - t1625 * qJ(4) + t1700 * qJD(2) + t1699 * t1712 + t1689;
t1553 = -t1670 * qJ(5) + t1716 * qJDD(2) - t1622 * t1712 + qJDD(5) + t1672;
t1629 = -qJDD(1) * t1666 - t1669 * t1671;
t1628 = qJDD(1) * t1669 - t1666 * t1671;
t1602 = -t1701 - t1714;
t1590 = -t1703 - t1615;
t1586 = -t1624 - t1708;
t1585 = t1606 + t1692;
t1584 = t1605 - t1691;
t1583 = -t1605 - t1691;
t1582 = -t1615 - t1720;
t1575 = (qJD(1) * t1621 + t1614) * t1665 + t1678;
t1573 = qJD(2) * t1718 + t1621 * t1712 + t1689 + t1710;
t1572 = -t1602 * t1665 + t1603 * t1668;
t1571 = t1602 * t1668 + t1603 * t1665;
t1570 = t1713 * t1718 + t1715 + (t1624 + t1647) * qJ(3) + t1675;
t1569 = t1662 * t1586 - t1661 * t1686;
t1568 = t1661 * t1586 + t1662 * t1686;
t1566 = t1662 * t1590 - t1661 * t1677;
t1565 = t1661 * t1590 + t1662 * t1677;
t1562 = (t1699 * t1665 + t1693) * qJD(1) + t1674;
t1561 = t1662 * t1584 - t1661 * t1676;
t1560 = t1661 * t1584 + t1662 * t1676;
t1559 = t1672 + t1710;
t1558 = t1715 + t1624 * qJ(3) + (qJ(3) * t1711 + t1688) * qJD(1) + t1673;
t1557 = -t1721 - t1722;
t1556 = t1573 * t1668 + t1575 * t1665;
t1555 = t1573 * t1665 - t1575 * t1668;
t1552 = t1569 * t1665 + t1585 * t1668;
t1551 = -t1569 * t1668 + t1585 * t1665;
t1549 = t1566 * t1665 + t1583 * t1668;
t1548 = -t1566 * t1668 + t1583 * t1665;
t1546 = -t1697 * t1587 - t1679;
t1544 = t1697 * t1589 - t1687;
t1543 = t1561 * t1665 + t1582 * t1668;
t1542 = -t1561 * t1668 + t1582 * t1665;
t1540 = t1564 * t1667 - t1574 * t1664;
t1536 = -t1563 * t1664 + t1567 * t1667;
t1534 = t1559 * t1668 + t1562 * t1665;
t1533 = t1559 * t1665 - t1562 * t1668;
t1532 = -t1605 * pkin(5) - t1615 * pkin(8) - t1618 * t1607 + t1553;
t1531 = t1545 * t1667 - t1547 * t1664;
t1527 = t1662 * t1540 - t1661 * t1680;
t1526 = t1661 * t1540 + t1662 * t1680;
t1524 = t1662 * t1536 - t1661 * t1681;
t1523 = t1661 * t1536 + t1662 * t1681;
t1521 = t1527 * t1665 + t1546 * t1668;
t1520 = -t1527 * t1668 + t1546 * t1665;
t1519 = t1524 * t1665 + t1544 * t1668;
t1518 = -t1524 * t1668 + t1544 * t1665;
t1517 = t1662 * t1531 - t1661 * t1682;
t1516 = t1661 * t1531 + t1662 * t1682;
t1515 = t1662 * t1529 - t1661 * t1685;
t1514 = t1661 * t1529 + t1662 * t1685;
t1513 = t1517 * t1665 + t1557 * t1668;
t1512 = -t1517 * t1668 + t1557 * t1665;
t1511 = t1515 * t1665 + t1553 * t1668;
t1510 = -t1515 * t1668 + t1553 * t1665;
t1507 = -t1508 * t1664 + t1509 * t1667;
t1505 = t1662 * t1507 - t1661 * t1683;
t1504 = t1661 * t1507 + t1662 * t1683;
t1503 = t1505 * t1665 + t1532 * t1668;
t1502 = -t1505 * t1668 + t1532 * t1665;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1629, -t1628, 0, -t1634 * t1666 + t1635 * t1669, 0, 0, 0, 0, 0, 0, -t1723, t1725, t1592, t1572 * t1669 - t1613 * t1666, 0, 0, 0, 0, 0, 0, -t1723, t1592, -t1725, t1556 * t1669 - t1570 * t1666, 0, 0, 0, 0, 0, 0, -t1725, t1723, -t1592, t1534 * t1669 - t1558 * t1666, 0, 0, 0, 0, 0, 0, t1549 * t1669 - t1565 * t1666, t1552 * t1669 - t1568 * t1666, t1543 * t1669 - t1560 * t1666, t1511 * t1669 - t1514 * t1666, 0, 0, 0, 0, 0, 0, t1519 * t1669 - t1523 * t1666, t1521 * t1669 - t1526 * t1666, t1513 * t1669 - t1516 * t1666, t1503 * t1669 - t1504 * t1666; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1628, t1629, 0, t1634 * t1669 + t1635 * t1666, 0, 0, 0, 0, 0, 0, -t1724, t1726, t1591, t1572 * t1666 + t1613 * t1669, 0, 0, 0, 0, 0, 0, -t1724, t1591, -t1726, t1556 * t1666 + t1570 * t1669, 0, 0, 0, 0, 0, 0, -t1726, t1724, -t1591, t1534 * t1666 + t1558 * t1669, 0, 0, 0, 0, 0, 0, t1549 * t1666 + t1565 * t1669, t1552 * t1666 + t1568 * t1669, t1543 * t1666 + t1560 * t1669, t1511 * t1666 + t1514 * t1669, 0, 0, 0, 0, 0, 0, t1519 * t1666 + t1523 * t1669, t1521 * t1666 + t1526 * t1669, t1513 * t1666 + t1516 * t1669, t1503 * t1666 + t1504 * t1669; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1597, t1594, 0, t1571, 0, 0, 0, 0, 0, 0, t1597, 0, -t1594, t1555, 0, 0, 0, 0, 0, 0, -t1594, -t1597, 0, t1533, 0, 0, 0, 0, 0, 0, t1548, t1551, t1542, t1510, 0, 0, 0, 0, 0, 0, t1518, t1520, t1512, t1502; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1671, -qJDD(1), 0, t1635, 0, 0, 0, 0, 0, 0, -t1600, t1598, t1627, t1572, 0, 0, 0, 0, 0, 0, -t1600, t1627, -t1598, t1556, 0, 0, 0, 0, 0, 0, -t1598, t1600, -t1627, t1534, 0, 0, 0, 0, 0, 0, t1549, t1552, t1543, t1511, 0, 0, 0, 0, 0, 0, t1519, t1521, t1513, t1503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1671, 0, t1634, 0, 0, 0, 0, 0, 0, t1626, -t1623, t1630, t1613, 0, 0, 0, 0, 0, 0, t1626, t1630, t1623, t1570, 0, 0, 0, 0, 0, 0, t1623, -t1626, -t1630, t1558, 0, 0, 0, 0, 0, 0, t1565, t1568, t1560, t1514, 0, 0, 0, 0, 0, 0, t1523, t1526, t1516, t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1597, t1594, 0, t1571, 0, 0, 0, 0, 0, 0, t1597, 0, -t1594, t1555, 0, 0, 0, 0, 0, 0, -t1594, -t1597, 0, t1533, 0, 0, 0, 0, 0, 0, t1548, t1551, t1542, t1510, 0, 0, 0, 0, 0, 0, t1518, t1520, t1512, t1502; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1638, t1633, t1694, t1603, 0, 0, 0, 0, 0, 0, -t1638, t1694, -t1633, t1573, 0, 0, 0, 0, 0, 0, -t1633, t1638, -t1694, t1559, 0, 0, 0, 0, 0, 0, t1583, t1585, t1582, t1553, 0, 0, 0, 0, 0, 0, t1544, t1546, t1557, t1532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1632, -t1637, -t1695, t1602, 0, 0, 0, 0, 0, 0, t1632, -t1695, t1637, -t1575, 0, 0, 0, 0, 0, 0, t1637, -t1632, t1695, -t1562, 0, 0, 0, 0, 0, 0, -t1566, -t1569, -t1561, -t1515, 0, 0, 0, 0, 0, 0, -t1524, -t1527, -t1517, -t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1626, t1623, -t1630, -t1613, 0, 0, 0, 0, 0, 0, -t1626, -t1630, -t1623, -t1570, 0, 0, 0, 0, 0, 0, -t1623, t1626, t1630, -t1558, 0, 0, 0, 0, 0, 0, -t1565, -t1568, -t1560, -t1514, 0, 0, 0, 0, 0, 0, -t1523, -t1526, -t1516, -t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1638, t1694, -t1633, t1573, 0, 0, 0, 0, 0, 0, -t1633, t1638, -t1694, t1559, 0, 0, 0, 0, 0, 0, t1583, t1585, t1582, t1553, 0, 0, 0, 0, 0, 0, t1544, t1546, t1557, t1532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1626, -t1630, -t1623, -t1570, 0, 0, 0, 0, 0, 0, -t1623, t1626, t1630, -t1558, 0, 0, 0, 0, 0, 0, -t1565, -t1568, -t1560, -t1514, 0, 0, 0, 0, 0, 0, -t1523, -t1526, -t1516, -t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1632, t1695, -t1637, t1575, 0, 0, 0, 0, 0, 0, -t1637, t1632, -t1695, t1562, 0, 0, 0, 0, 0, 0, t1566, t1569, t1561, t1515, 0, 0, 0, 0, 0, 0, t1524, t1527, t1517, t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1637, t1632, -t1695, t1562, 0, 0, 0, 0, 0, 0, t1566, t1569, t1561, t1515, 0, 0, 0, 0, 0, 0, t1524, t1527, t1517, t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1633, -t1638, t1694, -t1559, 0, 0, 0, 0, 0, 0, -t1583, -t1585, -t1582, -t1553, 0, 0, 0, 0, 0, 0, -t1544, -t1546, -t1557, -t1532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1623, -t1626, -t1630, t1558, 0, 0, 0, 0, 0, 0, t1565, t1568, t1560, t1514, 0, 0, 0, 0, 0, 0, t1523, t1526, t1516, t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1590, t1586, t1584, t1529, 0, 0, 0, 0, 0, 0, t1536, t1540, t1531, t1507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1677, t1686, t1676, t1685, 0, 0, 0, 0, 0, 0, t1681, t1680, t1682, t1683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1583, t1585, t1582, t1553, 0, 0, 0, 0, 0, 0, t1544, t1546, t1557, t1532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1567, t1564, t1545, t1509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1563, t1574, t1547, t1508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1544, t1546, t1557, t1532;];
f_new_reg  = t1;
