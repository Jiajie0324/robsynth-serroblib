% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRRP3_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:33:15
% EndTime: 2019-05-06 17:33:36
% DurationCPUTime: 10.40s
% Computational Cost: add. (56349->554), mult. (129436->743), div. (0->0), fcn. (95134->10), ass. (0->349)
t313 = sin(pkin(10));
t314 = cos(pkin(10));
t321 = cos(qJ(2));
t381 = qJD(1) * t321;
t318 = sin(qJ(2));
t382 = qJD(1) * t318;
t289 = t313 * t381 + t314 * t382;
t317 = sin(qJ(4));
t320 = cos(qJ(4));
t271 = qJD(2) * t317 + t289 * t320;
t316 = sin(qJ(5));
t319 = cos(qJ(5));
t349 = qJD(2) * t320 - t317 * t289;
t238 = t271 * t316 - t319 * t349;
t240 = t319 * t271 + t316 * t349;
t195 = t240 * t238;
t305 = t318 * qJDD(1);
t372 = qJD(1) * qJD(2);
t358 = t321 * t372;
t296 = t305 + t358;
t306 = t321 * qJDD(1);
t359 = t318 * t372;
t297 = t306 - t359;
t351 = t313 * t296 - t314 * t297;
t262 = qJDD(4) + t351;
t261 = qJDD(5) + t262;
t435 = t195 - t261;
t442 = pkin(5) * t435;
t245 = t349 * t271;
t434 = t262 + t245;
t441 = t317 * t434;
t440 = t320 * t434;
t236 = t238 ^ 2;
t287 = t313 * t382 - t314 * t381;
t284 = qJD(4) + t287;
t279 = qJD(5) + t284;
t277 = t279 ^ 2;
t190 = -t277 - t236;
t398 = t435 * t319;
t130 = t190 * t316 - t398;
t129 = pkin(4) * t130;
t265 = t314 * t296 + t313 * t297;
t223 = qJD(4) * t349 + t317 * qJDD(2) + t320 * t265;
t344 = -t271 * qJD(4) + qJDD(2) * t320 - t317 * t265;
t166 = -t238 * qJD(5) + t319 * t223 + t316 * t344;
t218 = t279 * t238;
t147 = t218 + t166;
t438 = qJ(6) * t147;
t322 = qJD(1) ^ 2;
t423 = sin(qJ(1));
t424 = cos(qJ(1));
t335 = g(1) * t424 + g(2) * t423;
t407 = qJDD(1) * pkin(7);
t326 = -t322 * pkin(1) - t335 + t407;
t273 = -t318 * g(3) + t321 * t326;
t311 = t321 ^ 2;
t308 = t311 * t322;
t338 = qJD(2) * pkin(2) - qJ(3) * t382;
t241 = -pkin(2) * t308 + t297 * qJ(3) - qJD(2) * t338 + t273;
t325 = t318 * t326;
t386 = t318 * t322;
t323 = -t325 - t296 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t386 + qJ(3) * t372 - g(3)) * t321;
t187 = -0.2e1 * qJD(3) * t287 + t314 * t241 + t313 * t323;
t255 = pkin(3) * t287 - pkin(8) * t289;
t430 = qJD(2) ^ 2;
t169 = -pkin(3) * t430 + qJDD(2) * pkin(8) - t255 * t287 + t187;
t347 = g(1) * t423 - t424 * g(2);
t334 = qJDD(1) * pkin(1) + t347;
t243 = t297 * pkin(2) + (qJ(3) * t311 + pkin(7)) * t322 - t338 * t382 - qJDD(3) + t334;
t380 = qJD(2) * t289;
t246 = t351 + t380;
t282 = qJD(2) * t287;
t249 = -t265 + t282;
t178 = pkin(3) * t246 + t249 * pkin(8) - t243;
t121 = t317 * t169 - t320 * t178;
t253 = t284 * t349;
t200 = -t253 + t223;
t104 = pkin(4) * t434 - pkin(9) * t200 - t121;
t122 = t320 * t169 + t317 * t178;
t250 = pkin(4) * t284 - pkin(9) * t271;
t348 = t349 ^ 2;
t107 = -pkin(4) * t348 + pkin(9) * t344 - t284 * t250 + t122;
t66 = -t319 * t104 + t107 * t316;
t330 = 0.2e1 * qJD(6) * t240 + t438 + t442 + t66;
t329 = -t330 - t442;
t439 = t129 + t329;
t263 = t289 * t287;
t431 = -t263 + qJDD(2);
t437 = t313 * t431;
t436 = t314 * t431;
t399 = t435 * t316;
t432 = -t218 + t166;
t199 = t253 + t223;
t354 = t223 * t316 - t319 * t344;
t144 = (qJD(5) - t279) * t240 + t354;
t237 = t240 ^ 2;
t270 = t271 ^ 2;
t283 = t284 ^ 2;
t285 = t287 ^ 2;
t286 = t289 ^ 2;
t131 = t190 * t319 + t399;
t90 = t130 * t320 + t131 * t317;
t429 = pkin(3) * t90;
t67 = t316 * t104 + t319 * t107;
t32 = t316 * t67 - t319 * t66;
t428 = pkin(4) * t32;
t101 = -t144 * t319 + t147 * t316;
t99 = -t144 * t316 - t147 * t319;
t62 = t101 * t317 + t320 * t99;
t427 = pkin(8) * t62;
t426 = pkin(8) * t90;
t425 = pkin(9) * t99;
t206 = -t237 - t277;
t183 = t195 + t261;
t401 = t183 * t316;
t153 = t206 * t319 - t401;
t400 = t183 * t319;
t154 = -t206 * t316 - t400;
t110 = t153 * t320 + t154 * t317;
t422 = pkin(3) * t110;
t421 = pkin(3) * t313;
t420 = pkin(8) * t110;
t419 = pkin(9) * t130;
t418 = pkin(9) * t153;
t171 = -t236 - t237;
t64 = t101 * t320 - t317 * t99;
t56 = -t171 * t314 + t313 * t64;
t57 = t171 * t313 + t314 * t64;
t417 = pkin(7) * (-t318 * t56 + t321 * t57) - pkin(1) * t62;
t143 = (qJD(5) + t279) * t240 + t354;
t91 = -t130 * t317 + t131 * t320;
t75 = -t143 * t314 + t313 * t91;
t76 = t143 * t313 + t314 * t91;
t416 = pkin(7) * (-t318 * t75 + t321 * t76) - pkin(1) * t90;
t415 = qJ(3) * t56;
t414 = qJ(3) * t75;
t111 = -t153 * t317 + t154 * t320;
t80 = t111 * t313 - t314 * t432;
t413 = qJ(3) * t80;
t412 = t316 * t330;
t411 = t317 * t32;
t410 = t319 * t330;
t409 = t32 * t320;
t81 = t111 * t314 + t313 * t432;
t408 = pkin(7) * (-t318 * t80 + t321 * t81) - pkin(1) * t110;
t353 = t241 * t313 - t314 * t323;
t340 = -qJDD(2) * pkin(3) - t430 * pkin(8) + t353;
t328 = -t344 * pkin(4) - t348 * pkin(9) + t250 * t271 + t340;
t350 = (0.2e1 * qJD(3) + t255) * t289;
t118 = t350 + t328;
t406 = t118 * t316;
t405 = t118 * t319;
t376 = qJD(3) * t289;
t186 = t353 + 0.2e1 * t376;
t136 = -t186 * t314 + t187 * t313;
t404 = t136 * t318;
t168 = t350 + t340;
t403 = t168 * t317;
t402 = t168 * t320;
t209 = -t245 + t262;
t397 = t209 * t317;
t396 = t209 * t320;
t395 = t243 * t313;
t394 = t243 * t314;
t257 = qJDD(2) + t263;
t393 = t257 * t313;
t392 = t257 * t314;
t391 = t271 * t284;
t390 = t279 * t316;
t389 = t279 * t319;
t388 = t317 * t271;
t304 = t321 * t386;
t387 = t318 * (qJDD(2) + t304);
t385 = t320 * t271;
t384 = t321 * (qJDD(2) - t304);
t379 = qJD(2) * t313;
t378 = qJD(2) * t314;
t375 = qJD(6) * t238;
t371 = pkin(2) * t56 - pkin(3) * t171 + pkin(8) * t64;
t370 = pkin(2) * t75 - pkin(3) * t143 + pkin(8) * t91;
t369 = pkin(2) * t80 - pkin(3) * t432 + pkin(8) * t111;
t368 = t313 * t195;
t367 = t314 * t195;
t152 = pkin(4) * t153;
t366 = t152 - t67;
t365 = -pkin(3) * t314 - pkin(2);
t364 = -pkin(2) * t62 + qJ(3) * t57;
t363 = -pkin(2) * t90 + qJ(3) * t76;
t97 = pkin(4) * t99;
t43 = -pkin(3) * t62 - t97;
t227 = -0.2e1 * t375;
t165 = -qJD(5) * t240 - t354;
t211 = pkin(5) * t279 - qJ(6) * t240;
t343 = t236 * pkin(5) - t165 * qJ(6) + t279 * t211 - t67;
t51 = t227 - t343;
t21 = t316 * t51 - t410;
t46 = pkin(5) * t330;
t362 = pkin(4) * t21 - t46;
t361 = -pkin(2) * t110 + qJ(3) * t81;
t360 = -pkin(4) * t171 + pkin(9) * t101;
t357 = -pkin(4) * t143 + pkin(9) * t131;
t356 = -pkin(4) * t432 + pkin(9) * t154;
t33 = t316 * t66 + t319 * t67;
t85 = t121 * t317 + t320 * t122;
t137 = t186 * t313 + t314 * t187;
t272 = t321 * g(3) + t325;
t352 = t318 * t272 + t321 * t273;
t346 = -t129 + t66;
t84 = -t121 * t320 + t122 * t317;
t342 = t317 * t349;
t341 = t320 * t349;
t339 = pkin(5) * t206 + t343;
t337 = t313 * t245;
t336 = t314 * t245;
t247 = -t351 + t380;
t333 = t152 + t339;
t332 = t344 + t391;
t324 = -t165 * pkin(5) - t236 * qJ(6) + t211 * t240 + qJDD(6) + t328;
t82 = t350 + t324;
t310 = t318 ^ 2;
t307 = t310 * t322;
t298 = t306 - 0.2e1 * t359;
t295 = t305 + 0.2e1 * t358;
t293 = t322 * pkin(7) + t334;
t281 = -0.2e1 * t376;
t276 = -t286 - t430;
t275 = -t286 + t430;
t274 = t285 - t430;
t256 = -t430 - t285;
t252 = -t270 + t283;
t251 = t348 - t283;
t248 = t282 + t265;
t244 = -t285 - t286;
t242 = t270 - t348;
t228 = 0.2e1 * t375;
t226 = -t270 - t283;
t225 = -t276 * t313 - t392;
t224 = t276 * t314 - t393;
t221 = -t283 - t348;
t217 = t348 + t270;
t215 = -t237 + t277;
t214 = t236 - t277;
t213 = t256 * t314 - t437;
t212 = t256 * t313 + t436;
t207 = (t341 + t388) * t284;
t203 = t247 * t314 + t248 * t313;
t202 = t247 * t313 - t248 * t314;
t197 = t344 - t391;
t193 = t237 - t236;
t192 = t223 * t320 - t284 * t388;
t191 = -t284 * t341 - t317 * t344;
t189 = t251 * t320 - t397;
t188 = -t252 * t317 + t440;
t180 = -t226 * t317 - t396;
t179 = t226 * t320 - t397;
t175 = (-t238 * t319 + t240 * t316) * t279;
t174 = (-t238 * t316 - t240 * t319) * t279;
t173 = t221 * t320 - t441;
t172 = t221 * t317 + t440;
t161 = t200 * t317 + t320 * t332;
t160 = t197 * t320 - t199 * t317;
t159 = -t200 * t320 + t317 * t332;
t158 = t214 * t319 - t401;
t157 = -t215 * t316 - t398;
t156 = t214 * t316 + t400;
t155 = t215 * t319 - t399;
t150 = t180 * t314 + t199 * t313;
t149 = t180 * t313 - t199 * t314;
t142 = t173 * t314 - t197 * t313;
t141 = t173 * t313 + t197 * t314;
t138 = pkin(5) * t147;
t135 = t166 * t319 - t240 * t390;
t134 = t166 * t316 + t240 * t389;
t133 = -t165 * t316 + t238 * t389;
t132 = t165 * t319 + t238 * t390;
t127 = t161 * t314 - t217 * t313;
t126 = t161 * t313 + t217 * t314;
t125 = -t174 * t317 + t175 * t320;
t124 = t174 * t320 + t175 * t317;
t123 = -pkin(8) * t179 + t402;
t119 = -pkin(8) * t172 + t403;
t117 = -pkin(5) * t432 - qJ(6) * t183;
t116 = -t156 * t317 + t158 * t320;
t115 = -t155 * t317 + t157 * t320;
t114 = t156 * t320 + t158 * t317;
t113 = t155 * t320 + t157 * t317;
t112 = -pkin(3) * t179 + t122;
t106 = -pkin(3) * t172 + t121;
t100 = -t143 * t319 - t316 * t432;
t98 = -t143 * t316 + t319 * t432;
t95 = -t134 * t317 + t135 * t320;
t94 = -t132 * t317 + t133 * t320;
t93 = t134 * t320 + t135 * t317;
t92 = t132 * t320 + t133 * t317;
t87 = t405 - t418;
t86 = t406 - t419;
t83 = t318 * (t125 * t314 + t261 * t313) + t321 * (t125 * t313 - t261 * t314);
t77 = -qJ(6) * t206 + t82;
t72 = t356 + t406;
t70 = -t168 * t314 + t313 * t85;
t69 = t357 - t405;
t68 = -pkin(8) * t159 - t84;
t63 = t100 * t320 - t317 * t98;
t61 = t100 * t317 + t320 * t98;
t58 = -pkin(5) * t143 + qJ(6) * t190 - t255 * t289 + t281 - t324;
t53 = t318 * (t314 * t95 + t368) + t321 * (t313 * t95 - t367);
t52 = t318 * (t314 * t94 - t368) + t321 * (t313 * t94 + t367);
t50 = t318 * (t116 * t314 - t144 * t313) + t321 * (t116 * t313 + t144 * t314);
t49 = t318 * (t115 * t314 + t147 * t313) + t321 * (t115 * t313 - t147 * t314);
t48 = -t117 * t316 + t319 * t77 - t418;
t44 = qJ(6) * t398 - t316 * t58 - t419;
t41 = t117 * t319 + t316 * t77 + t356;
t40 = -t366 - t422;
t39 = t330 + t438;
t38 = qJ(6) * t399 + t319 * t58 + t357;
t37 = -pkin(5) * t171 - qJ(6) * t144 + t51;
t36 = t346 - t429;
t35 = t138 + t43;
t34 = -t317 * t72 + t320 * t87 - t420;
t31 = -t317 * t69 + t320 * t86 - t426;
t30 = -pkin(5) * t82 + qJ(6) * t51;
t29 = t227 - t333 - t422;
t28 = t318 * (t193 * t313 + t314 * t63) + t321 * (-t193 * t314 + t313 * t63);
t27 = -pkin(4) * t118 + pkin(9) * t33;
t26 = -t429 - t439;
t24 = -t32 - t425;
t23 = t33 + t360;
t22 = t319 * t51 + t412;
t20 = -t317 * t41 + t320 * t48 - t420;
t19 = -t317 * t38 + t320 * t44 - t426;
t18 = t320 * t33 - t411;
t17 = t317 * t33 + t409;
t16 = -t316 * t37 + t319 * t39 - t425;
t15 = t316 * t39 + t319 * t37 + t360;
t14 = t118 * t313 + t18 * t314;
t13 = -t118 * t314 + t18 * t313;
t12 = -t21 * t317 + t22 * t320;
t11 = t21 * t320 + t22 * t317;
t10 = -pkin(3) * t17 - t428;
t9 = -t23 * t317 + t24 * t320 - t427;
t8 = -pkin(9) * t21 + qJ(6) * t410 - t30 * t316;
t7 = t12 * t314 + t313 * t82;
t6 = t12 * t313 - t314 * t82;
t5 = -pkin(4) * t82 + pkin(9) * t22 + qJ(6) * t412 + t30 * t319;
t4 = -pkin(8) * t17 - pkin(9) * t409 - t27 * t317;
t3 = -t15 * t317 + t16 * t320 - t427;
t2 = -pkin(3) * t11 - t362;
t1 = -pkin(8) * t11 - t317 * t5 + t320 * t8;
t25 = [0, 0, 0, 0, 0, qJDD(1), t347, t335, 0, 0, (t296 + t358) * t318, t295 * t321 + t298 * t318, t387 + t321 * (-t307 + t430), (t297 - t359) * t321, t318 * (t308 - t430) + t384, 0, t321 * t293 + pkin(1) * t298 + pkin(7) * (t321 * (-t308 - t430) - t387), -t318 * t293 - pkin(1) * t295 + pkin(7) * (-t384 - t318 * (-t307 - t430)), pkin(1) * (t307 + t308) + (t310 + t311) * t407 + t352, pkin(1) * t293 + pkin(7) * t352, t318 * (t265 * t314 - t289 * t379) + t321 * (t265 * t313 + t289 * t378), t318 * (-t246 * t314 + t249 * t313) + t321 * (-t246 * t313 - t249 * t314), t318 * (-t275 * t313 + t436) + t321 * (t275 * t314 + t437), t318 * (t287 * t378 + t313 * t351) + t321 * (t287 * t379 - t314 * t351), t318 * (t274 * t314 - t393) + t321 * (t274 * t313 + t392), (t318 * (-t287 * t314 + t289 * t313) + t321 * (-t287 * t313 - t289 * t314)) * qJD(2), t318 * (-qJ(3) * t212 - t395) + t321 * (-pkin(2) * t246 + qJ(3) * t213 + t394) - pkin(1) * t246 + pkin(7) * (-t212 * t318 + t213 * t321), t318 * (-qJ(3) * t224 - t394) + t321 * (pkin(2) * t249 + qJ(3) * t225 - t395) + pkin(1) * t249 + pkin(7) * (-t224 * t318 + t225 * t321), t318 * (-qJ(3) * t202 - t136) + t321 * (-pkin(2) * t244 + qJ(3) * t203 + t137) - pkin(1) * t244 + pkin(7) * (-t202 * t318 + t203 * t321), -qJ(3) * t404 + t321 * (pkin(2) * t243 + qJ(3) * t137) + pkin(1) * t243 + pkin(7) * (t137 * t321 - t404), t318 * (t314 * t192 - t337) + t321 * (t313 * t192 + t336), t318 * (t160 * t314 + t242 * t313) + t321 * (t160 * t313 - t242 * t314), t318 * (t188 * t314 + t200 * t313) + t321 * (t188 * t313 - t200 * t314), t318 * (t314 * t191 + t337) + t321 * (t313 * t191 - t336), t318 * (t189 * t314 + t313 * t332) + t321 * (t189 * t313 - t314 * t332), t318 * (t207 * t314 + t262 * t313) + t321 * (t207 * t313 - t262 * t314), t318 * (-qJ(3) * t141 - t106 * t313 + t119 * t314) + t321 * (-pkin(2) * t172 + qJ(3) * t142 + t106 * t314 + t119 * t313) - pkin(1) * t172 + pkin(7) * (-t141 * t318 + t142 * t321), t318 * (-qJ(3) * t149 - t112 * t313 + t123 * t314) + t321 * (-pkin(2) * t179 + qJ(3) * t150 + t112 * t314 + t123 * t313) - pkin(1) * t179 + pkin(7) * (-t149 * t318 + t150 * t321), t318 * (-qJ(3) * t126 + t314 * t68) + t321 * (qJ(3) * t127 + t313 * t68) + pkin(7) * (-t126 * t318 + t127 * t321) + (t318 * t421 + t321 * t365 - pkin(1)) * t159, (t318 * (-pkin(8) * t314 + t421) + t321 * (-pkin(8) * t313 + t365) - pkin(1)) * t84 + (pkin(7) + qJ(3)) * (-t318 * t70 + t321 * (t168 * t313 + t314 * t85)), t53, t28, t49, t52, t50, t83, t318 * (t31 * t314 - t313 * t36 - t414) + t321 * (t31 * t313 + t314 * t36 + t363) + t416, t318 * (-t313 * t40 + t314 * t34 - t413) + t321 * (t313 * t34 + t314 * t40 + t361) + t408, t318 * (-t313 * t43 + t314 * t9 - t415) + t321 * (t313 * t9 + t314 * t43 + t364) + t417, t318 * (-qJ(3) * t13 - t10 * t313 + t314 * t4) + t321 * (-pkin(2) * t17 + qJ(3) * t14 + t10 * t314 + t313 * t4) - pkin(1) * t17 + pkin(7) * (-t13 * t318 + t14 * t321), t53, t28, t49, t52, t50, t83, t318 * (t19 * t314 - t26 * t313 - t414) + t321 * (t19 * t313 + t26 * t314 + t363) + t416, t318 * (t20 * t314 - t29 * t313 - t413) + t321 * (t20 * t313 + t29 * t314 + t361) + t408, t318 * (t3 * t314 - t313 * t35 - t415) + t321 * (t3 * t313 + t314 * t35 + t364) + t417, t318 * (-qJ(3) * t6 + t1 * t314 - t2 * t313) + t321 * (-pkin(2) * t11 + qJ(3) * t7 + t1 * t313 + t2 * t314) - pkin(1) * t11 + pkin(7) * (-t318 * t6 + t321 * t7); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304, t307 - t308, t305, t304, t306, qJDD(2), -t272, -t273, 0, 0, t263, t286 - t285, t248, -t263, t247, qJDD(2), pkin(2) * t212 + t281 - t353, pkin(2) * t224 - t187, pkin(2) * t202, pkin(2) * t136, t223 * t317 + t284 * t385, t197 * t317 + t199 * t320, t252 * t320 + t441, -t284 * t342 + t320 * t344, t251 * t317 + t396, (t342 - t385) * t284, pkin(2) * t141 + pkin(3) * t197 + pkin(8) * t173 - t402, pkin(2) * t149 - pkin(3) * t199 + pkin(8) * t180 + t403, pkin(2) * t126 + pkin(3) * t217 + pkin(8) * t161 + t85, pkin(2) * t70 - pkin(3) * t168 + pkin(8) * t85, t93, t61, t113, t92, t114, t124, t317 * t86 + t320 * t69 + t370, t317 * t87 + t320 * t72 + t369, t23 * t320 + t24 * t317 + t371, pkin(2) * t13 - pkin(3) * t118 + pkin(8) * t18 - pkin(9) * t411 + t27 * t320, t93, t61, t113, t92, t114, t124, t317 * t44 + t320 * t38 + t370, t317 * t48 + t320 * t41 + t369, t15 * t320 + t16 * t317 + t371, pkin(2) * t6 - pkin(3) * t82 + pkin(8) * t12 + t317 * t8 + t320 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t246, -t249, t244, -t243, 0, 0, 0, 0, 0, 0, t172, t179, t159, t84, 0, 0, 0, 0, 0, 0, t90, t110, t62, t17, 0, 0, 0, 0, 0, 0, t90, t110, t62, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t245, t242, t200, t245, t332, t262, -t121, -t122, 0, 0, t195, t193, t147, -t195, -t144, t261, -t346, t366, t97, t428, t195, t193, t147, -t195, -t144, t261, t439, t228 + t333, -t138 + t97, t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t195, t193, t147, -t195, -t144, t261, -t66, -t67, 0, 0, t195, t193, t147, -t195, -t144, t261, t329, t228 + t339, -t138, -t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, t432, t171, t82;];
tauJ_reg  = t25;
