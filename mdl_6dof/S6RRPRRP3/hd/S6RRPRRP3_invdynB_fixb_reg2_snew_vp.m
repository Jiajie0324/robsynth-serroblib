% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:33:36
% EndTime: 2019-05-06 17:34:03
% DurationCPUTime: 25.84s
% Computational Cost: add. (179754->805), mult. (412855->1180), div. (0->0), fcn. (303760->10), ass. (0->582)
t978 = cos(qJ(2));
t1034 = qJD(1) * t978;
t974 = sin(qJ(2));
t1035 = qJD(1) * t974;
t969 = sin(pkin(10));
t970 = cos(pkin(10));
t928 = t1034 * t969 + t1035 * t970;
t973 = sin(qJ(4));
t977 = cos(qJ(4));
t900 = -qJD(2) * t977 + t928 * t973;
t901 = qJD(2) * t973 + t928 * t977;
t972 = sin(qJ(5));
t976 = cos(qJ(5));
t847 = t976 * t900 + t901 * t972;
t850 = -t900 * t972 + t901 * t976;
t797 = t850 * t847;
t1026 = qJD(1) * qJD(2);
t1012 = t978 * t1026;
t1025 = qJDD(1) * t974;
t938 = t1012 + t1025;
t1013 = t974 * t1026;
t962 = t978 * qJDD(1);
t939 = t962 - t1013;
t1000 = t938 * t969 - t970 * t939;
t886 = qJDD(4) + t1000;
t884 = qJDD(5) + t886;
t1002 = -t884 + t797;
t1058 = t1002 * t972;
t1057 = t1002 * t976;
t1098 = t1002 * pkin(5);
t926 = -t970 * t1034 + t1035 * t969;
t887 = t928 * t926;
t1093 = -t887 + qJDD(2);
t1102 = t1093 * t969;
t1101 = t1093 * t970;
t858 = t901 * t900;
t1096 = -t858 + t886;
t1100 = t1096 * t973;
t1099 = t1096 * t977;
t1033 = qJD(2) * t928;
t859 = t1000 + t1033;
t889 = t970 * t938 + t969 * t939;
t828 = -t900 * qJD(4) + t973 * qJDD(2) + t977 * t889;
t1001 = -t977 * qJDD(2) + t973 * t889;
t992 = qJD(4) * t901 + t1001;
t747 = -t847 * qJD(5) + t976 * t828 - t972 * t992;
t922 = qJD(4) + t926;
t916 = qJD(5) + t922;
t823 = t916 * t847;
t1097 = -t823 + t747;
t877 = t922 * t900;
t802 = -t877 - t828;
t800 = -t877 + t828;
t920 = qJD(2) * t926;
t863 = -t889 + t920;
t772 = t797 + t884;
t1060 = t772 * t972;
t843 = t850 ^ 2;
t915 = t916 ^ 2;
t808 = -t843 - t915;
t726 = t808 * t976 - t1060;
t1059 = t772 * t976;
t729 = -t808 * t972 - t1059;
t668 = t726 * t977 + t729 * t973;
t1095 = -pkin(3) * t668 - pkin(4) * t726;
t842 = t847 ^ 2;
t782 = -t915 - t842;
t700 = t782 * t972 - t1057;
t701 = t782 * t976 + t1058;
t642 = t700 * t977 + t701 * t973;
t1094 = -pkin(3) * t642 - pkin(4) * t700;
t967 = t978 ^ 2;
t980 = qJD(1) ^ 2;
t993 = qJD(2) * pkin(2) - qJ(3) * t1035;
t975 = sin(qJ(1));
t979 = cos(qJ(1));
t948 = t975 * g(1) - t979 * g(2);
t994 = qJDD(1) * pkin(1) + t948;
t856 = t939 * pkin(2) + (qJ(3) * t967 + pkin(7)) * t980 - t993 * t1035 - qJDD(3) + t994;
t803 = (qJD(4) - t922) * t901 + t1001;
t1004 = t972 * t828 + t976 * t992;
t715 = (qJD(5) - t916) * t850 + t1004;
t1092 = t900 ^ 2;
t899 = t901 ^ 2;
t921 = t922 ^ 2;
t924 = t926 ^ 2;
t925 = t928 ^ 2;
t1091 = qJD(2) ^ 2;
t1088 = pkin(3) * t969;
t719 = -t823 - t747;
t655 = -t715 * t972 + t719 * t976;
t657 = -t715 * t976 - t719 * t972;
t596 = -t655 * t973 + t657 * t977;
t758 = -t842 - t843;
t582 = t596 * t969 - t758 * t970;
t583 = t596 * t970 + t758 * t969;
t520 = -t582 * t974 + t583 * t978;
t594 = t655 * t977 + t657 * t973;
t506 = t520 * t975 - t594 * t979;
t1085 = pkin(6) * t506;
t643 = -t700 * t973 + t701 * t977;
t714 = (qJD(5) + t916) * t850 + t1004;
t609 = t643 * t969 - t714 * t970;
t610 = t643 * t970 + t714 * t969;
t560 = -t609 * t974 + t610 * t978;
t530 = t560 * t975 - t642 * t979;
t1084 = pkin(6) * t530;
t669 = -t726 * t973 + t729 * t977;
t616 = -t1097 * t970 + t669 * t969;
t617 = t1097 * t969 + t669 * t970;
t566 = -t616 * t974 + t617 * t978;
t537 = t566 * t975 - t668 * t979;
t1083 = pkin(6) * t537;
t519 = t582 * t978 + t583 * t974;
t1082 = pkin(7) * t519;
t559 = t609 * t978 + t610 * t974;
t1081 = pkin(7) * t559;
t565 = t616 * t978 + t617 * t974;
t1080 = pkin(7) * t565;
t1079 = pkin(8) * t594;
t1078 = pkin(8) * t642;
t1077 = pkin(8) * t668;
t1076 = pkin(9) * t655;
t1075 = pkin(9) * t700;
t1074 = pkin(9) * t726;
t1073 = qJ(3) * t582;
t1072 = qJ(3) * t609;
t1071 = qJ(3) * t616;
t949 = g(1) * t979 + g(2) * t975;
t986 = -pkin(1) * t980 + qJDD(1) * pkin(7) - t949;
t909 = -t974 * g(3) + t978 * t986;
t964 = t967 * t980;
t851 = -pkin(2) * t964 + t939 * qJ(3) - qJD(2) * t993 + t909;
t1040 = t974 * t980;
t983 = t974 * t986;
t981 = -t983 - t938 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t1040 + qJ(3) * t1026 - g(3)) * t978;
t776 = -0.2e1 * qJD(3) * t926 + t970 * t851 + t969 * t981;
t878 = pkin(3) * t926 - pkin(8) * t928;
t750 = -pkin(3) * t1091 + qJDD(2) * pkin(8) - t878 * t926 + t776;
t768 = pkin(3) * t859 + t863 * pkin(8) - t856;
t687 = t973 * t750 - t977 * t768;
t660 = pkin(4) * t1096 + pkin(9) * t802 - t687;
t688 = t977 * t750 + t973 * t768;
t866 = pkin(4) * t922 - pkin(9) * t901;
t666 = -pkin(4) * t1092 - pkin(9) * t992 - t922 * t866 + t688;
t598 = -t976 * t660 + t972 * t666;
t599 = t972 * t660 + t976 * t666;
t534 = -t598 * t976 + t599 * t972;
t1070 = t534 * t973;
t1069 = t534 * t977;
t1029 = qJD(6) * t850;
t1015 = t747 * qJ(6) + t598;
t991 = -qJ(6) * t823 - t1015;
t567 = -0.2e1 * t1029 + t991 - t1098;
t1068 = t567 * t972;
t1067 = t567 * t976;
t1003 = t969 * t851 - t970 * t981;
t995 = -qJDD(2) * pkin(3) - t1091 * pkin(8) + t1003;
t985 = t992 * pkin(4) - t1092 * pkin(9) + t901 * t866 + t995;
t999 = (0.2e1 * qJD(3) + t878) * t928;
t685 = t999 + t985;
t1066 = t685 * t972;
t1065 = t685 * t976;
t1030 = qJD(3) * t928;
t775 = t1003 + 0.2e1 * t1030;
t708 = -t775 * t970 + t776 * t969;
t1064 = t708 * t974;
t1063 = t708 * t978;
t749 = t999 + t995;
t1062 = t749 * t973;
t1061 = t749 * t977;
t813 = t858 + t886;
t1056 = t813 * t973;
t1055 = t813 * t977;
t1054 = t856 * t969;
t1053 = t856 * t970;
t880 = qJDD(2) + t887;
t1052 = t880 * t969;
t1051 = t880 * t970;
t1050 = t916 * t972;
t1049 = t916 * t976;
t1048 = t922 * t973;
t1047 = t922 * t977;
t932 = t980 * pkin(7) + t994;
t1046 = t932 * t974;
t1045 = t932 * t978;
t957 = t978 * t1040;
t946 = qJDD(2) + t957;
t1044 = t946 * t974;
t947 = qJDD(2) - t957;
t1043 = t947 * t974;
t1042 = t947 * t978;
t966 = t974 ^ 2;
t1041 = t966 * t980;
t1039 = -pkin(1) * t594 + pkin(7) * t520;
t1038 = -pkin(1) * t642 + pkin(7) * t560;
t1037 = -pkin(1) * t668 + pkin(7) * t566;
t1036 = t966 + t967;
t1032 = qJD(2) * t969;
t1031 = qJD(2) * t970;
t1024 = qJDD(1) * t975;
t1023 = qJDD(1) * t979;
t1022 = qJDD(2) * t979;
t1021 = t969 * t797;
t1020 = t970 * t797;
t1019 = t969 * t858;
t1018 = t970 * t858;
t1017 = t975 * t887;
t1016 = t979 * t887;
t1014 = -pkin(3) * t970 - pkin(2);
t1011 = -pkin(2) * t594 + qJ(3) * t583;
t1010 = -pkin(2) * t642 + qJ(3) * t610;
t1009 = -pkin(2) * t668 + qJ(3) * t617;
t1008 = -pkin(4) * t758 + pkin(9) * t657;
t1007 = -pkin(4) * t714 + pkin(9) * t701;
t1006 = -pkin(4) * t1097 + pkin(9) * t729;
t535 = t598 * t972 + t976 * t599;
t709 = t775 * t969 + t970 * t776;
t908 = t978 * g(3) + t983;
t854 = t908 * t974 + t978 * t909;
t898 = -t948 * t975 - t979 * t949;
t998 = t975 * t957;
t997 = t979 * t957;
t562 = -pkin(3) * t594 - pkin(4) * t655;
t943 = -t975 * t980 + t1023;
t996 = -pkin(6) * t943 - g(3) * t975;
t627 = -t687 * t977 + t688 * t973;
t628 = t687 * t973 + t688 * t977;
t853 = t908 * t978 - t909 * t974;
t897 = t948 * t979 - t949 * t975;
t861 = -t1000 + t1033;
t746 = -qJD(5) * t850 - t1004;
t815 = pkin(5) * t916 - qJ(6) * t850;
t990 = t746 * qJ(6) - 0.2e1 * qJD(6) * t847 - t916 * t815 + t599;
t989 = -pkin(1) * t519 - pkin(2) * t582 + pkin(3) * t758 - pkin(8) * t596;
t988 = -pkin(1) * t559 - pkin(2) * t609 + pkin(3) * t714 - pkin(8) * t643;
t987 = -pkin(1) * t565 - pkin(2) * t616 + pkin(3) * t1097 - pkin(8) * t669;
t982 = -t746 * pkin(5) - t842 * qJ(6) + t850 * t815 + qJDD(6) + t985;
t618 = t999 + t982;
t960 = t975 * qJDD(2);
t956 = -t964 - t1091;
t955 = t964 - t1091;
t954 = -t1041 - t1091;
t953 = -t1041 + t1091;
t945 = t964 - t1041;
t944 = t964 + t1041;
t942 = t979 * t980 + t1024;
t941 = t1036 * qJDD(1);
t940 = t962 - 0.2e1 * t1013;
t937 = 0.2e1 * t1012 + t1025;
t935 = t978 * t946;
t934 = t1036 * t1026;
t923 = -pkin(6) * t942 + g(3) * t979;
t914 = -t925 - t1091;
t913 = -t925 + t1091;
t912 = t924 - t1091;
t911 = -t1026 * t966 + t938 * t978;
t910 = -t1026 * t967 - t939 * t974;
t907 = -t954 * t974 - t1042;
t906 = -t953 * t974 + t935;
t905 = t956 * t978 - t1044;
t904 = t955 * t978 - t1043;
t903 = t954 * t978 - t1043;
t902 = t956 * t974 + t935;
t893 = t941 * t979 - t944 * t975;
t892 = t941 * t975 + t944 * t979;
t890 = -t937 * t974 + t940 * t978;
t885 = -t925 + t924;
t879 = -t1091 - t924;
t876 = (-t926 * t970 + t928 * t969) * qJD(2);
t875 = (-t926 * t969 - t928 * t970) * qJD(2);
t874 = t907 * t979 + t937 * t975;
t873 = t905 * t979 - t940 * t975;
t872 = t907 * t975 - t937 * t979;
t871 = t905 * t975 + t940 * t979;
t870 = -t899 + t921;
t869 = -t921 + t1092;
t868 = -pkin(7) * t903 - t1045;
t867 = -pkin(7) * t902 - t1046;
t865 = -pkin(1) * t903 + t909;
t864 = -pkin(1) * t902 + t908;
t862 = -t920 - t889;
t857 = -t924 - t925;
t855 = -t899 + t1092;
t849 = -t1032 * t928 + t889 * t970;
t846 = t1031 * t928 + t889 * t969;
t845 = t1000 * t969 + t1031 * t926;
t844 = -t1000 * t970 + t1032 * t926;
t837 = 0.2e1 * t1029;
t835 = -t899 - t921;
t834 = -t914 * t969 - t1051;
t833 = -t913 * t969 + t1101;
t832 = t912 * t970 - t1052;
t831 = t914 * t970 - t1052;
t830 = t913 * t970 + t1102;
t829 = t912 * t969 + t1051;
t826 = -t921 - t1092;
t822 = t899 + t1092;
t821 = t854 * t979 - t932 * t975;
t820 = t854 * t975 + t932 * t979;
t819 = -t843 + t915;
t818 = t842 - t915;
t817 = t879 * t970 - t1102;
t816 = t879 * t969 + t1101;
t811 = (-t900 * t977 + t901 * t973) * t922;
t810 = (t900 * t973 + t901 * t977) * t922;
t809 = -t875 * t974 + t876 * t978;
t807 = t861 * t970 - t862 * t969;
t806 = -t859 * t970 + t863 * t969;
t805 = t861 * t969 + t862 * t970;
t804 = -t859 * t969 - t863 * t970;
t798 = (-qJD(4) - t922) * t901 - t1001;
t796 = -t843 + t842;
t795 = -t1048 * t901 + t828 * t977;
t794 = -t1047 * t901 - t828 * t973;
t793 = t1047 * t900 + t973 * t992;
t792 = -t1048 * t900 + t977 * t992;
t791 = -qJ(3) * t831 - t1053;
t790 = -t846 * t974 + t849 * t978;
t789 = -t844 * t974 + t845 * t978;
t788 = -t831 * t974 + t834 * t978;
t787 = -t830 * t974 + t833 * t978;
t786 = -t829 * t974 + t832 * t978;
t785 = t831 * t978 + t834 * t974;
t784 = t811 * t970 + t886 * t969;
t783 = t811 * t969 - t886 * t970;
t781 = t869 * t977 - t1056;
t780 = -t870 * t973 + t1099;
t779 = -t869 * t973 - t1055;
t778 = -t870 * t977 - t1100;
t777 = -qJ(3) * t816 - t1054;
t770 = -t835 * t973 - t1055;
t769 = t835 * t977 - t1056;
t765 = (-t847 * t976 + t850 * t972) * t916;
t764 = (-t847 * t972 - t850 * t976) * t916;
t763 = t826 * t977 - t1100;
t762 = t826 * t973 + t1099;
t761 = -t816 * t974 + t817 * t978;
t760 = t816 * t978 + t817 * t974;
t759 = pkin(2) * t863 + qJ(3) * t834 - t1054;
t757 = t795 * t970 + t1019;
t756 = t793 * t970 - t1019;
t755 = t795 * t969 - t1018;
t754 = t793 * t969 + t1018;
t753 = -pkin(2) * t859 + qJ(3) * t817 + t1053;
t752 = t788 * t979 - t863 * t975;
t751 = t788 * t975 + t863 * t979;
t742 = t761 * t979 + t859 * t975;
t741 = -t805 * t974 + t807 * t978;
t740 = -t804 * t974 + t806 * t978;
t739 = t761 * t975 - t859 * t979;
t738 = t805 * t978 + t807 * t974;
t737 = -t802 * t973 - t803 * t977;
t736 = t798 * t977 - t800 * t973;
t735 = t802 * t977 - t803 * t973;
t734 = -t798 * t973 - t800 * t977;
t733 = t818 * t976 - t1060;
t732 = -t819 * t972 - t1057;
t731 = t818 * t972 + t1059;
t730 = t819 * t976 - t1058;
t728 = t781 * t970 - t803 * t969;
t727 = t780 * t970 - t802 * t969;
t725 = t781 * t969 + t803 * t970;
t724 = t780 * t969 + t802 * t970;
t722 = t770 * t970 + t800 * t969;
t721 = t770 * t969 - t800 * t970;
t720 = -t783 * t974 + t784 * t978;
t713 = t763 * t970 - t798 * t969;
t712 = t763 * t969 + t798 * t970;
t711 = t741 * t979 + t857 * t975;
t710 = t741 * t975 - t857 * t979;
t707 = -t1050 * t850 + t747 * t976;
t706 = t1049 * t850 + t747 * t972;
t705 = t1049 * t847 - t746 * t972;
t704 = t1050 * t847 + t746 * t976;
t703 = t736 * t970 - t855 * t969;
t702 = t736 * t969 + t855 * t970;
t698 = t737 * t970 - t822 * t969;
t697 = t737 * t969 + t822 * t970;
t696 = -t764 * t973 + t765 * t977;
t695 = -t764 * t977 - t765 * t973;
t694 = -pkin(1) * t738 - pkin(2) * t805;
t693 = -pkin(1) * t785 - pkin(2) * t831 + t776;
t692 = pkin(2) * t856 + qJ(3) * t709;
t691 = -pkin(8) * t769 + t1061;
t690 = -t755 * t974 + t757 * t978;
t689 = -t754 * t974 + t756 * t978;
t686 = -pkin(8) * t762 + t1062;
t684 = t696 * t970 + t884 * t969;
t683 = t696 * t969 - t884 * t970;
t682 = -pkin(1) * t760 - pkin(2) * t816 + t775;
t681 = -qJ(3) * t805 - t708;
t680 = -pkin(5) * t1097 - qJ(6) * t772;
t679 = -pkin(7) * t785 - t759 * t974 + t791 * t978;
t678 = -pkin(2) * t857 + qJ(3) * t807 + t709;
t677 = -t731 * t973 + t733 * t977;
t676 = -t730 * t973 + t732 * t977;
t675 = -t731 * t977 - t733 * t973;
t674 = -t730 * t977 - t732 * t973;
t673 = -pkin(7) * t760 - t753 * t974 + t777 * t978;
t672 = -pkin(3) * t769 + t688;
t671 = -t725 * t974 + t728 * t978;
t670 = -t724 * t974 + t727 * t978;
t665 = -pkin(3) * t762 + t687;
t662 = -t721 * t974 + t722 * t978;
t661 = t721 * t978 + t722 * t974;
t656 = -t1097 * t972 - t714 * t976;
t654 = t1097 * t976 - t714 * t972;
t653 = -t712 * t974 + t713 * t978;
t652 = t712 * t978 + t713 * t974;
t650 = t709 * t978 - t1064;
t649 = t709 * t974 + t1063;
t648 = -t706 * t973 + t707 * t977;
t647 = -t704 * t973 + t705 * t977;
t646 = -t706 * t977 - t707 * t973;
t645 = -t704 * t977 - t705 * t973;
t644 = -t702 * t974 + t703 * t978;
t640 = t1065 - t1074;
t639 = t650 * t979 - t856 * t975;
t638 = t650 * t975 + t856 * t979;
t637 = -t697 * t974 + t698 * t978;
t636 = t697 * t978 + t698 * t974;
t635 = t1066 - t1075;
t634 = t648 * t970 + t1021;
t633 = t647 * t970 - t1021;
t632 = t648 * t969 - t1020;
t631 = t647 * t969 + t1020;
t630 = t662 * t979 + t769 * t975;
t629 = t662 * t975 - t769 * t979;
t626 = t653 * t979 + t762 * t975;
t625 = t653 * t975 - t762 * t979;
t624 = -t683 * t974 + t684 * t978;
t623 = t683 * t978 + t684 * t974;
t622 = t677 * t970 - t715 * t969;
t621 = t676 * t970 - t719 * t969;
t620 = t677 * t969 + t715 * t970;
t619 = t676 * t969 + t719 * t970;
t614 = -pkin(1) * t649 - pkin(2) * t708;
t613 = -qJ(6) * t808 + t618;
t612 = t637 * t979 + t735 * t975;
t611 = t637 * t975 - t735 * t979;
t607 = t1006 + t1066;
t606 = t628 * t970 + t749 * t969;
t605 = t628 * t969 - t749 * t970;
t604 = t1007 - t1065;
t603 = -pkin(8) * t735 - t627;
t602 = -pkin(7) * t738 - t678 * t974 + t681 * t978;
t601 = t624 * t979 - t695 * t975;
t600 = t624 * t975 + t695 * t979;
t595 = -t654 * t973 + t656 * t977;
t593 = -t654 * t977 - t656 * t973;
t591 = -qJ(3) * t721 - t672 * t969 + t691 * t970;
t590 = -qJ(3) * t712 - t665 * t969 + t686 * t970;
t589 = -pkin(5) * t714 + qJ(6) * t782 - t878 * t928 - 0.2e1 * t1030 - t982;
t588 = -pkin(7) * t649 - qJ(3) * t1063 - t692 * t974;
t587 = t595 * t970 - t796 * t969;
t586 = t595 * t969 + t796 * t970;
t585 = -pkin(1) * t661 - pkin(2) * t721 + pkin(3) * t800 - pkin(8) * t770 - t1062;
t584 = -pkin(2) * t769 + qJ(3) * t722 + t672 * t970 + t691 * t969;
t580 = -pkin(1) * t652 - pkin(2) * t712 - pkin(3) * t798 - pkin(8) * t763 + t1061;
t579 = -pkin(2) * t762 + qJ(3) * t713 + t665 * t970 + t686 * t969;
t578 = -t632 * t974 + t634 * t978;
t577 = -t631 * t974 + t633 * t978;
t576 = t632 * t978 + t634 * t974;
t575 = t631 * t978 + t633 * t974;
t574 = -pkin(5) * t842 + t990;
t573 = -qJ(3) * t697 + t1088 * t735 + t603 * t970;
t572 = -t620 * t974 + t622 * t978;
t571 = -t619 * t974 + t621 * t978;
t570 = t620 * t978 + t622 * t974;
t569 = t619 * t978 + t621 * t974;
t568 = t613 * t976 - t680 * t972 - t1074;
t563 = qJ(6) * t1057 - t589 * t972 - t1075;
t561 = qJ(3) * t698 + t1014 * t735 + t969 * t603;
t557 = t613 * t972 + t680 * t976 + t1006;
t556 = t599 + t1095;
t555 = t837 + (-t719 + t823) * qJ(6) + t1098 + t1015;
t554 = -t605 * t974 + t606 * t978;
t553 = t605 * t978 + t606 * t974;
t552 = qJ(6) * t1058 + t589 * t976 + t1007;
t551 = -qJ(6) * t715 + (-t758 - t842) * pkin(5) + t990;
t550 = t598 + t1094;
t549 = -pkin(1) * t636 - pkin(2) * t697 - pkin(3) * t822 - pkin(8) * t737 - t628;
t548 = -pkin(5) * t719 + t562;
t547 = t578 * t979 - t646 * t975;
t546 = t577 * t979 - t645 * t975;
t545 = t578 * t975 + t646 * t979;
t544 = t577 * t975 + t645 * t979;
t543 = t572 * t979 - t675 * t975;
t542 = t571 * t979 - t674 * t975;
t541 = t572 * t975 + t675 * t979;
t540 = t571 * t975 + t674 * t979;
t539 = -t607 * t973 + t640 * t977 - t1077;
t538 = t566 * t979 + t668 * t975;
t536 = pkin(6) * t538;
t533 = -t604 * t973 + t635 * t977 - t1078;
t532 = -pkin(5) * t618 + qJ(6) * t574;
t531 = t560 * t979 + t642 * t975;
t529 = pkin(6) * t531;
t528 = (-t808 - t842) * pkin(5) + t990 + t1095;
t527 = -qJ(3) * t605 + (-pkin(8) * t970 + t1088) * t627;
t526 = -t586 * t974 + t587 * t978;
t525 = t586 * t978 + t587 * t974;
t524 = -pkin(4) * t685 + pkin(9) * t535;
t523 = t554 * t979 + t627 * t975;
t522 = t554 * t975 - t627 * t979;
t521 = t1094 + t837 - t991 + 0.2e1 * t1098;
t517 = -t534 - t1076;
t516 = t1008 + t535;
t515 = -pkin(7) * t661 - t584 * t974 + t591 * t978;
t514 = -pkin(7) * t652 - t579 * t974 + t590 * t978;
t513 = t574 * t976 - t1068;
t512 = t574 * t972 + t1067;
t511 = qJ(3) * t606 + (-pkin(8) * t969 + t1014) * t627;
t510 = t526 * t979 - t593 * t975;
t509 = t526 * t975 + t593 * t979;
t508 = -pkin(1) * t553 - pkin(2) * t605 + pkin(3) * t749 - pkin(8) * t628;
t507 = t520 * t979 + t594 * t975;
t505 = pkin(6) * t507;
t504 = -pkin(7) * t636 - t561 * t974 + t573 * t978;
t503 = -t557 * t973 + t568 * t977 - t1077;
t502 = -t552 * t973 + t563 * t977 - t1078;
t501 = t535 * t977 - t1070;
t500 = t535 * t973 + t1069;
t499 = -t551 * t972 + t555 * t976 - t1076;
t498 = t551 * t976 + t555 * t972 + t1008;
t497 = t539 * t970 - t556 * t969 - t1071;
t496 = t501 * t970 + t685 * t969;
t495 = t501 * t969 - t685 * t970;
t494 = -t607 * t977 - t640 * t973 + t987;
t493 = t533 * t970 - t550 * t969 - t1072;
t492 = -t604 * t977 - t635 * t973 + t988;
t491 = t539 * t969 + t556 * t970 + t1009;
t490 = t533 * t969 + t550 * t970 + t1010;
t489 = -t512 * t973 + t513 * t977;
t488 = t512 * t977 + t513 * t973;
t487 = -pkin(3) * t500 - pkin(4) * t534;
t486 = -t557 * t977 - t568 * t973 + t987;
t485 = -t516 * t973 + t517 * t977 - t1079;
t484 = -pkin(9) * t512 - qJ(6) * t1067 - t532 * t972;
t483 = t489 * t970 + t618 * t969;
t482 = t489 * t969 - t618 * t970;
t481 = -t552 * t977 - t563 * t973 + t988;
t480 = t503 * t970 - t528 * t969 - t1071;
t479 = -pkin(7) * t553 - t511 * t974 + t527 * t978;
t478 = t503 * t969 + t528 * t970 + t1009;
t477 = t502 * t970 - t521 * t969 - t1072;
t476 = -pkin(4) * t618 + pkin(9) * t513 - qJ(6) * t1068 + t532 * t976;
t475 = t502 * t969 + t521 * t970 + t1010;
t474 = -pkin(8) * t500 - pkin(9) * t1069 - t524 * t973;
t473 = -t495 * t974 + t496 * t978;
t472 = t495 * t978 + t496 * t974;
t471 = t485 * t970 - t562 * t969 - t1073;
t470 = -t498 * t973 + t499 * t977 - t1079;
t469 = -pkin(3) * t488 - pkin(4) * t512 - pkin(5) * t567;
t468 = -t516 * t977 - t517 * t973 + t989;
t467 = t485 * t969 + t562 * t970 + t1011;
t466 = -t491 * t974 + t497 * t978 - t1080;
t465 = -t490 * t974 + t493 * t978 - t1081;
t464 = t470 * t970 - t548 * t969 - t1073;
t463 = t473 * t979 + t500 * t975;
t462 = t473 * t975 - t500 * t979;
t461 = -t482 * t974 + t483 * t978;
t460 = t482 * t978 + t483 * t974;
t459 = -t498 * t977 - t499 * t973 + t989;
t458 = t470 * t969 + t548 * t970 + t1011;
t457 = -t478 * t974 + t480 * t978 - t1080;
t456 = -t475 * t974 + t477 * t978 - t1081;
t455 = t461 * t979 + t488 * t975;
t454 = t461 * t975 - t488 * t979;
t453 = -qJ(3) * t495 + t474 * t970 - t487 * t969;
t452 = -pkin(8) * t488 - t476 * t973 + t484 * t977;
t451 = -t467 * t974 + t471 * t978 - t1082;
t450 = -pkin(1) * t472 - pkin(2) * t495 + pkin(3) * t685 - pkin(8) * t501 + pkin(9) * t1070 - t524 * t977;
t449 = -pkin(2) * t500 + qJ(3) * t496 + t474 * t969 + t487 * t970;
t448 = -t458 * t974 + t464 * t978 - t1082;
t447 = -qJ(3) * t482 + t452 * t970 - t469 * t969;
t446 = -pkin(1) * t460 - pkin(2) * t482 + pkin(3) * t618 - pkin(8) * t489 - t476 * t977 - t484 * t973;
t445 = -pkin(2) * t488 + qJ(3) * t483 + t452 * t969 + t469 * t970;
t444 = -pkin(7) * t472 - t449 * t974 + t453 * t978;
t443 = -pkin(7) * t460 - t445 * t974 + t447 * t978;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t942, -t943, 0, t898, 0, 0, 0, 0, 0, 0, t873, t874, t893, t821, 0, 0, 0, 0, 0, 0, t742, t752, t711, t639, 0, 0, 0, 0, 0, 0, t626, t630, t612, t523, 0, 0, 0, 0, 0, 0, t531, t538, t507, t463, 0, 0, 0, 0, 0, 0, t531, t538, t507, t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t943, -t942, 0, t897, 0, 0, 0, 0, 0, 0, t871, t872, t892, t820, 0, 0, 0, 0, 0, 0, t739, t751, t710, t638, 0, 0, 0, 0, 0, 0, t625, t629, t611, t522, 0, 0, 0, 0, 0, 0, t530, t537, t506, t462, 0, 0, 0, 0, 0, 0, t530, t537, t506, t454; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t902, t903, 0, -t853, 0, 0, 0, 0, 0, 0, t760, t785, t738, t649, 0, 0, 0, 0, 0, 0, t652, t661, t636, t553, 0, 0, 0, 0, 0, 0, t559, t565, t519, t472, 0, 0, 0, 0, 0, 0, t559, t565, t519, t460; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t943, 0, -t942, 0, t996, -t923, -t897, -pkin(6) * t897, t911 * t979 - t998, t890 * t979 - t945 * t975, t1024 * t974 + t906 * t979, t910 * t979 + t998, t904 * t979 + t962 * t975, t934 * t979 + t960, -pkin(6) * t871 - t864 * t975 + t867 * t979, -pkin(6) * t872 - t865 * t975 + t868 * t979, -pkin(6) * t892 + t853 * t979, -pkin(6) * t820 - (pkin(1) * t975 - pkin(7) * t979) * t853, t790 * t979 + t1017, t740 * t979 - t885 * t975, t787 * t979 - t862 * t975, t789 * t979 - t1017, t786 * t979 + t861 * t975, t809 * t979 + t960, -pkin(6) * t739 + t673 * t979 - t682 * t975, -pkin(6) * t751 + t679 * t979 - t693 * t975, -pkin(6) * t710 + t602 * t979 - t694 * t975, -pkin(6) * t638 + t588 * t979 - t614 * t975, t690 * t979 - t794 * t975, t644 * t979 - t734 * t975, t670 * t979 - t778 * t975, t689 * t979 - t792 * t975, t671 * t979 - t779 * t975, t720 * t979 - t810 * t975, -pkin(6) * t625 + t514 * t979 - t580 * t975, -pkin(6) * t629 + t515 * t979 - t585 * t975, -pkin(6) * t611 + t504 * t979 - t549 * t975, -pkin(6) * t522 + t479 * t979 - t508 * t975, t547, t510, t542, t546, t543, t601, t465 * t979 - t492 * t975 - t1084, t466 * t979 - t494 * t975 - t1083, t451 * t979 - t468 * t975 - t1085, -pkin(6) * t462 + t444 * t979 - t450 * t975, t547, t510, t542, t546, t543, t601, t456 * t979 - t481 * t975 - t1084, t457 * t979 - t486 * t975 - t1083, t448 * t979 - t459 * t975 - t1085, -pkin(6) * t454 + t443 * t979 - t446 * t975; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t942, 0, t943, 0, t923, t996, t898, pkin(6) * t898, t911 * t975 + t997, t890 * t975 + t945 * t979, -t1023 * t974 + t906 * t975, t910 * t975 - t997, t904 * t975 - t962 * t979, t934 * t975 - t1022, pkin(6) * t873 + t864 * t979 + t867 * t975, pkin(6) * t874 + t865 * t979 + t868 * t975, pkin(6) * t893 + t853 * t975, pkin(6) * t821 - (-pkin(1) * t979 - pkin(7) * t975) * t853, t790 * t975 - t1016, t740 * t975 + t885 * t979, t787 * t975 + t862 * t979, t789 * t975 + t1016, t786 * t975 - t861 * t979, t809 * t975 - t1022, pkin(6) * t742 + t673 * t975 + t682 * t979, pkin(6) * t752 + t679 * t975 + t693 * t979, pkin(6) * t711 + t602 * t975 + t694 * t979, pkin(6) * t639 + t588 * t975 + t614 * t979, t690 * t975 + t794 * t979, t644 * t975 + t734 * t979, t670 * t975 + t778 * t979, t689 * t975 + t792 * t979, t671 * t975 + t779 * t979, t720 * t975 + t810 * t979, pkin(6) * t626 + t514 * t975 + t580 * t979, pkin(6) * t630 + t515 * t975 + t585 * t979, pkin(6) * t612 + t504 * t975 + t549 * t979, pkin(6) * t523 + t479 * t975 + t508 * t979, t545, t509, t540, t544, t541, t600, t465 * t975 + t492 * t979 + t529, t466 * t975 + t494 * t979 + t536, t451 * t975 + t468 * t979 + t505, pkin(6) * t463 + t444 * t975 + t450 * t979, t545, t509, t540, t544, t541, t600, t456 * t975 + t481 * t979 + t529, t457 * t975 + t486 * t979 + t536, t448 * t975 + t459 * t979 + t505, pkin(6) * t455 + t443 * t975 + t446 * t979; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t948, t949, 0, 0, (t938 + t1012) * t974, t937 * t978 + t940 * t974, t953 * t978 + t1044, (t939 - t1013) * t978, t955 * t974 + t1042, 0, pkin(1) * t940 + pkin(7) * t905 + t1045, -pkin(1) * t937 + pkin(7) * t907 - t1046, pkin(1) * t944 + pkin(7) * t941 + t854, pkin(1) * t932 + pkin(7) * t854, t846 * t978 + t849 * t974, t804 * t978 + t806 * t974, t830 * t978 + t833 * t974, t844 * t978 + t845 * t974, t829 * t978 + t832 * t974, t875 * t978 + t876 * t974, -pkin(1) * t859 + pkin(7) * t761 + t753 * t978 + t777 * t974, pkin(1) * t863 + pkin(7) * t788 + t759 * t978 + t791 * t974, -pkin(1) * t857 + pkin(7) * t741 + t678 * t978 + t681 * t974, pkin(1) * t856 + pkin(7) * t650 - qJ(3) * t1064 + t692 * t978, t755 * t978 + t757 * t974, t702 * t978 + t703 * t974, t724 * t978 + t727 * t974, t754 * t978 + t756 * t974, t725 * t978 + t728 * t974, t783 * t978 + t784 * t974, -pkin(1) * t762 + pkin(7) * t653 + t579 * t978 + t590 * t974, -pkin(1) * t769 + pkin(7) * t662 + t584 * t978 + t591 * t974, -pkin(1) * t735 + pkin(7) * t637 + t561 * t978 + t573 * t974, -pkin(1) * t627 + pkin(7) * t554 + t511 * t978 + t527 * t974, t576, t525, t569, t575, t570, t623, t490 * t978 + t493 * t974 + t1038, t491 * t978 + t497 * t974 + t1037, t467 * t978 + t471 * t974 + t1039, -pkin(1) * t500 + pkin(7) * t473 + t449 * t978 + t453 * t974, t576, t525, t569, t575, t570, t623, t475 * t978 + t477 * t974 + t1038, t478 * t978 + t480 * t974 + t1037, t458 * t978 + t464 * t974 + t1039, -pkin(1) * t488 + pkin(7) * t461 + t445 * t978 + t447 * t974;];
tauB_reg  = t1;
