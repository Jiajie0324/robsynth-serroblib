% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:50:42
% EndTime: 2019-03-09 11:51:00
% DurationCPUTime: 9.72s
% Computational Cost: add. (17264->690), mult. (40342->831), div. (0->0), fcn. (30446->14), ass. (0->327)
t292 = sin(qJ(2));
t295 = cos(qJ(2));
t289 = -qJ(3) - pkin(7);
t353 = qJD(2) * t289;
t225 = -qJD(3) * t292 + t295 * t353;
t256 = t289 * t292;
t166 = qJDD(2) * pkin(2) + t225 * qJD(1) + qJDD(1) * t256;
t224 = qJD(3) * t295 + t292 * t353;
t257 = t289 * t295;
t175 = t224 * qJD(1) - qJDD(1) * t257;
t288 = sin(pkin(10));
t423 = cos(pkin(10));
t385 = -t423 * t166 + t288 * t175;
t105 = -qJDD(2) * pkin(3) + t385;
t350 = t423 * t295;
t262 = qJD(1) * t350;
t381 = qJD(1) * t292;
t227 = t288 * t381 - t262;
t216 = qJD(4) + t227;
t456 = pkin(2) * t288;
t267 = pkin(8) + t456;
t284 = qJ(2) + pkin(10);
t277 = cos(t284);
t276 = sin(t284);
t293 = sin(qJ(1));
t296 = cos(qJ(1));
t336 = g(1) * t296 + g(2) * t293;
t324 = t336 * t276;
t310 = -g(3) * t277 + t324;
t489 = qJD(4) * t267 * t216 + t105 - t310;
t242 = t288 * t295 + t423 * t292;
t230 = t242 * qJD(1);
t146 = pkin(2) * t381 + pkin(3) * t230 + pkin(8) * t227;
t247 = qJD(1) * t257;
t233 = t288 * t247;
t246 = qJD(1) * t256;
t177 = t423 * t246 + t233;
t291 = sin(qJ(4));
t294 = cos(qJ(4));
t103 = t291 * t146 + t294 * t177;
t437 = pkin(9) + t267;
t352 = qJD(4) * t437;
t405 = t227 * t291;
t488 = pkin(9) * t405 + t291 * t352 + t103;
t102 = t294 * t146 - t177 * t291;
t487 = -pkin(4) * t230 - t102 + (-pkin(9) * t227 - t352) * t294;
t187 = qJD(2) * t294 - t291 * t230;
t188 = qJD(2) * t291 + t230 * t294;
t290 = sin(qJ(5));
t457 = cos(qJ(5));
t122 = -t457 * t187 + t188 * t290;
t120 = t122 ^ 2;
t322 = t290 * t187 + t457 * t188;
t459 = t322 ^ 2;
t486 = -t120 + t459;
t380 = qJD(4) * t291;
t485 = t380 + t405;
t378 = qJD(5) * t290;
t484 = pkin(4) * t378;
t483 = t457 * pkin(4);
t209 = qJD(5) + t216;
t418 = t122 * t209;
t375 = qJD(1) * qJD(2);
t357 = t292 * t375;
t306 = qJDD(1) * t242 - t288 * t357;
t302 = qJD(2) * t262 + t306;
t476 = qJD(2) * qJD(4) + t302;
t115 = -t291 * qJDD(2) + t230 * t380 - t294 * t476;
t379 = qJD(4) * t294;
t366 = t230 * t379 + t291 * t476;
t325 = qJDD(2) * t294 - t366;
t358 = t457 * qJD(5);
t56 = t457 * t115 - t187 * t358 + t188 * t378 - t290 * t325;
t482 = -t56 + t418;
t481 = t122 * qJ(6);
t480 = t122 * t322;
t406 = t216 * t291;
t479 = t188 * t406;
t365 = t457 * t291;
t245 = t290 * t294 + t365;
t466 = qJD(4) + qJD(5);
t180 = t466 * t245;
t478 = t245 * t227 + t180;
t364 = t457 * t294;
t394 = t290 * t291;
t244 = -t364 + t394;
t468 = t457 * qJD(4) + t358;
t386 = t244 * t227 - t468 * t294 + t466 * t394;
t477 = -g(1) * t293 + g(2) * t296;
t414 = t322 * t209;
t57 = qJD(5) * t322 - t290 * t115 - t457 * t325;
t475 = -t57 + t414;
t319 = -t288 * t292 + t350;
t232 = t319 * qJD(2);
t321 = t232 * t291 + t242 * t379;
t432 = qJD(2) * pkin(2);
t236 = t246 + t432;
t172 = t423 * t236 + t233;
t157 = -qJD(2) * pkin(3) - t172;
t118 = -t187 * pkin(4) + t157;
t287 = qJ(4) + qJ(5);
t280 = cos(t287);
t396 = t280 * t293;
t279 = sin(t287);
t397 = t279 * t296;
t194 = -t277 * t396 + t397;
t395 = t280 * t296;
t398 = t279 * t293;
t196 = t277 * t395 + t398;
t229 = t242 * qJD(2);
t373 = t292 * qJDD(1);
t333 = -qJDD(1) * t350 + t288 * t373;
t174 = qJD(1) * t229 + t333;
t167 = qJDD(4) + t174;
t110 = t288 * t166 + t423 * t175;
t106 = qJDD(2) * pkin(8) + t110;
t371 = pkin(2) * t357 + qJDD(3);
t372 = t295 * qJDD(1);
t421 = qJDD(1) * pkin(1);
t94 = -pkin(2) * t372 + t174 * pkin(3) - pkin(8) * t302 + t371 - t421;
t91 = t294 * t94;
t438 = t295 * pkin(2);
t275 = pkin(1) + t438;
t254 = -t275 * qJD(1) + qJD(3);
t134 = pkin(3) * t227 - pkin(8) * t230 + t254;
t351 = t423 * t247;
t173 = t288 * t236 - t351;
t158 = qJD(2) * pkin(8) + t173;
t93 = t134 * t291 + t158 * t294;
t36 = -qJD(4) * t93 - t106 * t291 + t91;
t20 = pkin(4) * t167 + pkin(9) * t115 + t36;
t35 = t294 * t106 + t134 * t379 - t158 * t380 + t291 * t94;
t23 = pkin(9) * t325 + t35;
t92 = t294 * t134 - t158 * t291;
t81 = -pkin(9) * t188 + t92;
t68 = pkin(4) * t216 + t81;
t82 = pkin(9) * t187 + t93;
t3 = t290 * t20 + t457 * t23 + t68 * t358 - t82 * t378;
t440 = g(3) * t280;
t309 = g(1) * t196 - g(2) * t194 + t276 * t440 - t3;
t474 = t118 * t122 + t309;
t237 = t437 * t291;
t238 = t437 * t294;
t427 = -t237 * t358 - t238 * t378 + t487 * t290 - t488 * t457;
t169 = -t290 * t237 + t457 * t238;
t426 = -t169 * qJD(5) + t488 * t290 + t487 * t457;
t331 = -t216 * t92 + t35;
t473 = qJ(6) * t322;
t176 = t246 * t288 - t351;
t340 = t485 * pkin(4) - t176;
t162 = qJDD(5) + t167;
t344 = pkin(4) * t358;
t453 = pkin(4) * t290;
t470 = -t162 * t453 - t209 * t344;
t171 = -pkin(3) * t319 - pkin(8) * t242 - t275;
t186 = t288 * t256 - t423 * t257;
t178 = t294 * t186;
t117 = t291 * t171 + t178;
t389 = t294 * t296;
t392 = t291 * t293;
t217 = t277 * t392 + t389;
t390 = t293 * t294;
t391 = t291 * t296;
t219 = -t277 * t391 + t390;
t467 = -g(1) * t219 + g(2) * t217;
t152 = t162 * pkin(5);
t428 = t56 * qJ(6);
t465 = -t322 * qJD(6) + t152 + t428;
t193 = t277 * t398 + t395;
t195 = -t277 * t397 + t396;
t441 = g(3) * t279;
t464 = -g(1) * t195 + g(2) * t193 + t276 * t441;
t354 = t457 * t20 - t290 * t23;
t79 = t457 * t82;
t38 = t290 * t68 + t79;
t4 = -qJD(5) * t38 + t354;
t301 = t4 + t464;
t463 = -t118 * t322 + t301;
t462 = t162 * t245 - t386 * t209;
t443 = g(3) * t276;
t311 = -t336 * t277 - t443;
t461 = -t244 * t56 + t322 * t478;
t349 = t122 * pkin(5) + qJD(6);
t73 = t118 + t349;
t460 = -t73 * t322 + t464;
t458 = t230 ^ 2;
t297 = -pkin(9) - pkin(8);
t455 = pkin(2) * t292;
t454 = pkin(4) * t188;
t452 = pkin(4) * t291;
t260 = t296 * t275;
t445 = g(2) * t260;
t439 = g(3) * t295;
t77 = t290 * t82;
t37 = t457 * t68 - t77;
t25 = t37 - t473;
t24 = pkin(5) * t209 + t25;
t436 = -t25 + t24;
t435 = -t478 * qJ(6) - qJD(6) * t244 + t427;
t434 = -pkin(5) * t230 + qJ(6) * t386 - t245 * qJD(6) + t426;
t41 = t457 * t81 - t77;
t116 = t294 * t171 - t186 * t291;
t400 = t242 * t294;
t87 = -pkin(4) * t319 - pkin(9) * t400 + t116;
t401 = t242 * t291;
t98 = -pkin(9) * t401 + t117;
t61 = t290 * t87 + t457 * t98;
t433 = qJ(6) * t57;
t430 = t216 * t93;
t425 = -t122 * t344 - t57 * t453;
t424 = t478 * pkin(5) + t340;
t422 = pkin(7) * qJDD(1);
t420 = t115 * t291;
t417 = t122 * t230;
t413 = t322 * t230;
t411 = t187 * t227;
t410 = t187 * t230;
t409 = t188 * t187;
t408 = t188 * t230;
t407 = t209 * t230;
t404 = t230 * t227;
t402 = t232 * t294;
t249 = pkin(5) * t279 + t452;
t399 = t249 * t277;
t393 = t291 * t167;
t151 = t294 * t167;
t112 = t291 * t325;
t388 = t187 * t379 + t112;
t384 = t249 - t289;
t281 = t294 * pkin(4);
t250 = pkin(5) * t280 + t281;
t285 = t292 ^ 2;
t286 = t295 ^ 2;
t383 = t285 - t286;
t382 = t285 + t286;
t377 = qJD(6) * t122;
t370 = t292 * t432;
t368 = t242 * t394;
t299 = qJD(1) ^ 2;
t367 = t292 * t299 * t295;
t363 = t423 * pkin(2);
t362 = t242 * t380;
t356 = -t289 + t452;
t40 = -t290 * t81 - t79;
t60 = -t290 * t98 + t457 * t87;
t144 = t423 * t224 + t288 * t225;
t147 = pkin(3) * t229 - pkin(8) * t232 + t370;
t347 = -t144 * t291 + t294 * t147;
t143 = t224 * t288 - t423 * t225;
t168 = -t457 * t237 - t238 * t290;
t185 = -t423 * t256 - t257 * t288;
t345 = t216 * t294;
t343 = t295 * t357;
t342 = t477 * t276;
t341 = t122 * t386 - t245 * t57;
t268 = -t363 - pkin(3);
t339 = pkin(3) * t277 + pkin(8) * t276;
t338 = -g(1) * t193 - g(2) * t195;
t337 = -g(1) * t194 - g(2) * t196;
t334 = -t244 * t162 - t478 * t209;
t142 = pkin(4) * t401 + t185;
t332 = -t291 * t93 - t294 * t92;
t248 = pkin(3) + t250;
t283 = -qJ(6) + t297;
t330 = t248 * t277 - t276 * t283;
t274 = t281 + pkin(3);
t329 = t274 * t277 - t276 * t297;
t328 = -t277 * t440 + (g(1) * t395 + g(2) * t396) * t276;
t255 = -t281 + t268;
t104 = pkin(4) * t321 + t143;
t326 = -t485 * t216 + t151;
t323 = -0.2e1 * pkin(1) * t375 - pkin(7) * qJDD(2);
t53 = -pkin(9) * t402 + pkin(4) * t229 + (-t178 + (pkin(9) * t242 - t171) * t291) * qJD(4) + t347;
t63 = t294 * t144 + t291 * t147 + t171 * t379 - t186 * t380;
t59 = -pkin(9) * t321 + t63;
t10 = t290 * t53 + t87 * t358 - t98 * t378 + t457 * t59;
t320 = -t362 + t402;
t318 = t216 * t157 - t267 * t167;
t316 = t325 * t294;
t212 = -t275 * qJDD(1) + t371;
t313 = t277 * t441 - t279 * t324;
t298 = qJD(2) ^ 2;
t308 = -pkin(7) * t298 + 0.2e1 * t421 - t477;
t307 = pkin(1) * t299 + t336 - t422;
t305 = t309 + t433;
t11 = -t61 * qJD(5) - t290 * t59 + t457 * t53;
t65 = -pkin(4) * t325 + t105;
t21 = t57 * pkin(5) + qJDD(6) + t65;
t273 = pkin(5) + t483;
t226 = t227 ^ 2;
t220 = t277 * t389 + t392;
t218 = -t277 * t390 + t391;
t189 = t244 * pkin(5) + t255;
t154 = t242 * t364 - t368;
t153 = t245 * t242;
t131 = -qJ(6) * t244 + t169;
t130 = -qJ(6) * t245 + t168;
t100 = pkin(5) * t153 + t142;
t99 = pkin(5) * t322 + t454;
t96 = -t162 * t319 + t209 * t229;
t70 = t232 * t365 - t290 * t362 - qJD(5) * t368 + (t232 * t290 + t468 * t242) * t294;
t69 = t180 * t242 + t244 * t232;
t64 = -t117 * qJD(4) + t347;
t55 = pkin(5) * t70 + t104;
t46 = -qJ(6) * t153 + t61;
t45 = t334 + t417;
t44 = t334 - t417;
t43 = -t413 - t462;
t42 = -t413 + t462;
t39 = -pkin(5) * t319 - qJ(6) * t154 + t60;
t28 = t41 - t473;
t27 = t40 + t481;
t26 = t38 - t481;
t17 = t122 * t478 + t244 * t57;
t16 = -t245 * t56 - t322 * t386;
t15 = t122 * t70 + t153 * t57;
t14 = -t154 * t56 - t322 * t69;
t13 = -t122 * t229 - t153 * t162 - t209 * t70 + t319 * t57;
t12 = t154 * t162 - t209 * t69 + t229 * t322 + t319 * t56;
t9 = -qJ(6) * t70 - qJD(6) * t153 + t10;
t8 = t229 * pkin(5) + t69 * qJ(6) - t154 * qJD(6) + t11;
t7 = t341 + t461;
t6 = t341 - t461;
t5 = t122 * t69 + t153 * t56 - t154 * t57 - t322 * t70;
t2 = t3 - t377 - t433;
t1 = t4 + t465;
t18 = [0, 0, 0, 0, 0, qJDD(1), -t477, t336, 0, 0, qJDD(1) * t285 + 0.2e1 * t343, 0.2e1 * t292 * t372 - 0.2e1 * t383 * t375, qJDD(2) * t292 + t295 * t298, qJDD(1) * t286 - 0.2e1 * t343, qJDD(2) * t295 - t292 * t298, 0, t292 * t323 + t295 * t308, -t292 * t308 + t295 * t323, 0.2e1 * t382 * t422 - t336, -g(1) * (-pkin(1) * t293 + pkin(7) * t296) - g(2) * (pkin(1) * t296 + pkin(7) * t293) + (t382 * pkin(7) ^ 2 + pkin(1) ^ 2) * qJDD(1), t230 * t232 + t242 * t302, -t242 * t174 - t232 * t227 - t230 * t229 + t302 * t319, qJD(2) * t232 + qJDD(2) * t242, -t174 * t319 + t227 * t229, -qJD(2) * t229 + qJDD(2) * t319, 0, -t185 * qJDD(2) - t174 * t275 - t212 * t319 + t229 * t254 - t477 * t277 + (t227 * t455 - t143) * qJD(2), -t144 * qJD(2) - t186 * qJDD(2) + t212 * t242 + t230 * t370 + t254 * t232 - t275 * t302 + t342, t110 * t319 + t143 * t230 - t144 * t227 - t172 * t232 - t173 * t229 - t186 * t174 + t185 * t302 + t242 * t385 - t336, t110 * t186 + t173 * t144 + t385 * t185 - t172 * t143 - t212 * t275 + t254 * t370 - g(1) * (-t275 * t293 - t289 * t296) - g(2) * (-t289 * t293 + t260) -t115 * t400 + t188 * t320 (t187 * t294 - t188 * t291) * t232 + (t316 + t420 + (-t187 * t291 - t188 * t294) * qJD(4)) * t242, t115 * t319 + t151 * t242 + t188 * t229 + t216 * t320, -t112 * t242 - t187 * t321, t187 * t229 - t216 * t321 - t242 * t393 - t319 * t325, -t167 * t319 + t216 * t229, -g(1) * t218 - g(2) * t220 + t105 * t401 + t116 * t167 - t143 * t187 + t157 * t321 - t185 * t325 + t64 * t216 + t92 * t229 - t319 * t36, -g(1) * t217 - g(2) * t219 + t105 * t400 - t115 * t185 - t117 * t167 + t143 * t188 + t157 * t320 - t216 * t63 - t229 * t93 + t319 * t35, t63 * t187 + t117 * t325 - t64 * t188 + t116 * t115 + t332 * t232 + (-t35 * t291 - t36 * t294 + (t291 * t92 - t294 * t93) * qJD(4)) * t242 - t342, -t445 + t105 * t185 + t36 * t116 + t35 * t117 + t157 * t143 + t93 * t63 + t92 * t64 + (g(1) * t289 - g(2) * t339) * t296 + (-g(1) * (-t275 - t339) + g(2) * t289) * t293, t14, t5, t12, t15, t13, t96, t104 * t122 + t11 * t209 + t118 * t70 + t142 * t57 + t153 * t65 + t162 * t60 + t229 * t37 - t319 * t4 + t337, -t10 * t209 + t104 * t322 - t118 * t69 - t142 * t56 + t154 * t65 - t162 * t61 - t229 * t38 + t3 * t319 + t338, -t10 * t122 - t11 * t322 - t153 * t3 - t154 * t4 + t37 * t69 - t38 * t70 + t56 * t60 - t57 * t61 - t342, -t445 + t38 * t10 + t118 * t104 + t37 * t11 + t65 * t142 + t3 * t61 + t4 * t60 + (-g(1) * t356 - g(2) * t329) * t296 + (-g(1) * (-t275 - t329) - g(2) * t356) * t293, t14, t5, t12, t15, t13, t96, -t1 * t319 + t100 * t57 + t122 * t55 + t153 * t21 + t162 * t39 + t209 * t8 + t229 * t24 + t70 * t73 + t337, -t100 * t56 + t154 * t21 - t162 * t46 + t2 * t319 - t209 * t9 - t229 * t26 + t322 * t55 - t69 * t73 + t338, -t1 * t154 - t122 * t9 - t153 * t2 + t24 * t69 - t26 * t70 - t322 * t8 + t39 * t56 - t46 * t57 - t342, -t445 + t1 * t39 + t21 * t100 + t2 * t46 + t24 * t8 + t26 * t9 + t73 * t55 + (-g(1) * t384 - g(2) * t330) * t296 + (-g(1) * (-t275 - t330) - g(2) * t384) * t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, t383 * t299, t373, t367, t372, qJDD(2), t292 * t307 - t439, g(3) * t292 + t295 * t307, 0, 0, t404, -t226 + t458 (t262 + t227) * qJD(2) + t306, -t404, -t333, qJDD(2), t176 * qJD(2) - t254 * t230 + (t423 * qJDD(2) - t227 * t381) * pkin(2) + t310 - t385, qJD(2) * t177 + t227 * t254 + (-qJDD(2) * t288 - t230 * t381) * pkin(2) - t110 - t311, -t174 * t456 - t302 * t363 - (-t173 + t176) * t230 + (t177 - t172) * t227, t172 * t176 - t173 * t177 + (-t423 * t385 - t439 + t110 * t288 + (-qJD(1) * t254 + t336) * t292) * pkin(2), t188 * t345 - t420 (-t115 + t411) * t294 - t479 + t388, t216 * t345 + t393 - t408, -t187 * t406 + t316, t326 - t410, -t216 * t230, t268 * t366 - t102 * t216 - t92 * t230 + t176 * t187 + t318 * t291 + (-t268 * qJDD(2) - t489) * t294, t103 * t216 - t115 * t268 - t176 * t188 + t230 * t93 + t291 * t489 + t318 * t294, t102 * t188 - t103 * t187 + ((qJD(4) * t188 + t325) * t267 + t331) * t294 + (-t267 * t115 - t93 * t227 - t36 + (-t187 * t267 - t93) * qJD(4)) * t291 + t311, t105 * t268 - t93 * t103 - t92 * t102 - t157 * t176 - g(3) * (t339 + t438) + (qJD(4) * t332 - t36 * t291 + t35 * t294) * t267 + t336 * (pkin(3) * t276 - pkin(8) * t277 + t455) t16, t6, t42, t17, t45, -t407, t118 * t478 + t122 * t340 + t162 * t168 + t209 * t426 - t230 * t37 + t244 * t65 + t255 * t57 + t328, -t118 * t386 - t162 * t169 - t209 * t427 + t230 * t38 + t245 * t65 - t255 * t56 + t322 * t340 + t313, -t122 * t427 + t168 * t56 - t169 * t57 - t244 * t3 - t245 * t4 - t322 * t426 + t37 * t386 - t38 * t478 + t311, t3 * t169 + t4 * t168 + t65 * t255 - g(3) * (t329 + t438) + t427 * t38 + t426 * t37 + t340 * t118 + t336 * (t274 * t276 + t277 * t297 + t455) t16, t6, t42, t17, t45, -t407, t122 * t424 + t130 * t162 + t189 * t57 + t209 * t434 + t21 * t244 - t230 * t24 + t478 * t73 + t328, -t131 * t162 - t189 * t56 - t209 * t435 + t21 * t245 + t230 * t26 + t322 * t424 - t386 * t73 + t313, -t1 * t245 - t122 * t435 + t130 * t56 - t131 * t57 - t2 * t244 + t24 * t386 - t26 * t478 - t322 * t434 + t311, t2 * t131 + t1 * t130 + t21 * t189 - g(3) * (t330 + t438) + t424 * t73 + t435 * t26 + t434 * t24 + t336 * (t248 * t276 + t277 * t283 + t455); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t230 * qJD(2) + t333 (t262 - t227) * qJD(2) + t306, -t226 - t458, t172 * t230 + t173 * t227 + t212 + t477, 0, 0, 0, 0, 0, 0, t326 + t410, -t216 ^ 2 * t294 - t393 - t408 (t115 + t411) * t294 + t479 + t388, -t157 * t230 + (t36 + t430) * t294 + t331 * t291 + t477, 0, 0, 0, 0, 0, 0, t44, t43, t7, -t118 * t230 - t244 * t4 + t245 * t3 - t37 * t478 - t38 * t386 + t477, 0, 0, 0, 0, 0, 0, t44, t43, t7, -t1 * t244 + t2 * t245 - t230 * t73 - t24 * t478 - t26 * t386 + t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t409, -t187 ^ 2 + t188 ^ 2, -t187 * t216 - t115, t409, t188 * t216 + t325, t167, -t158 * t379 - t157 * t188 + t430 + t91 + (-qJD(4) * t134 - t106 + t443) * t291 + t467, g(1) * t220 - g(2) * t218 - t157 * t187 + t294 * t443 - t331, 0, 0, t480, t486, t482, -t480, t475, t162, -t40 * t209 + (-t122 * t188 + t457 * t162 - t209 * t378) * pkin(4) + t463, t209 * t41 - t322 * t454 + t470 + t474, t56 * t483 + t425 + (t38 + t40 + t484) * t322 + (t41 - t37) * t122, -t37 * t40 - t38 * t41 + (t3 * t290 + t4 * t457 - t118 * t188 + t291 * t443 + (-t37 * t290 + t38 * t457) * qJD(5) + t467) * pkin(4), t480, t486, t482, -t480, t475, t162, -t99 * t122 + t273 * t162 - t27 * t209 + (-t79 + (-pkin(4) * t209 - t68) * t290) * qJD(5) + t354 + t460 + t465, t122 * t73 + t209 * t28 - t322 * t99 + t305 + t377 + t470, t273 * t56 + t425 + (t26 + t27 + t484) * t322 + (t28 - t24) * t122, t1 * t273 - t26 * t28 - t24 * t27 - t73 * t99 - g(1) * (t250 * t293 - t296 * t399) - g(2) * (-t250 * t296 - t293 * t399) + t249 * t443 + (t2 * t290 + (-t24 * t290 + t457 * t26) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t480, t486, t482, -t480, t475, t162, t38 * t209 + t463, t209 * t37 + t474, 0, 0, t480, t486, t482, -t480, t475, t162, t428 + t26 * t209 + 0.2e1 * t152 + (-t349 - t73) * t322 + t301, -pkin(5) * t459 + t209 * t25 + (qJD(6) + t73) * t122 + t305, pkin(5) * t56 - t122 * t436, t436 * t26 + (t1 + t460) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 + t414, -t56 - t418, -t120 - t459, t26 * t122 + t24 * t322 + t21 - t310;];
tau_reg  = t18;
