% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:32:23
% EndTime: 2019-03-08 21:32:36
% DurationCPUTime: 8.04s
% Computational Cost: add. (8006->630), mult. (18872->803), div. (0->0), fcn. (14920->14), ass. (0->308)
t226 = sin(qJ(2));
t221 = sin(pkin(6));
t341 = qJD(1) * t221;
t318 = t226 * t341;
t225 = sin(qJ(3));
t336 = qJD(3) * t225;
t414 = -pkin(3) * t336 + t318;
t219 = sin(pkin(11));
t228 = cos(qJ(3));
t381 = cos(pkin(11));
t299 = t381 * t225;
t177 = t219 * t228 + t299;
t169 = t177 * qJD(3);
t298 = t381 * t228;
t356 = t219 * t225;
t266 = t298 - t356;
t172 = t266 * qJD(3);
t421 = pkin(4) * t169 - pkin(9) * t172 - t414;
t398 = qJ(4) + pkin(8);
t304 = qJD(3) * t398;
t160 = t228 * qJD(4) - t225 * t304;
t257 = -t225 * qJD(4) - t228 * t304;
t229 = cos(qJ(2));
t313 = t229 * t341;
t418 = t160 * t381 + t219 * t257 - t266 * t313;
t200 = qJD(2) * t298;
t338 = qJD(2) * t225;
t167 = t219 * t338 - t200;
t159 = qJD(5) + t167;
t333 = qJD(1) * qJD(2);
t309 = t229 * t333;
t378 = qJDD(2) * pkin(8);
t147 = t378 + (qJDD(1) * t226 + t309) * t221;
t222 = cos(pkin(6));
t340 = qJD(1) * t222;
t420 = qJD(3) * t340 + t147;
t352 = t221 * t226;
t173 = t222 * t228 - t225 * t352;
t170 = t177 * qJD(2);
t224 = sin(qJ(5));
t227 = cos(qJ(5));
t129 = -t227 * qJD(3) + t170 * t224;
t131 = qJD(3) * t224 + t170 * t227;
t370 = t131 * t224;
t374 = t129 * t227;
t279 = t370 + t374;
t332 = qJD(2) * qJD(3);
t307 = t225 * t332;
t247 = qJDD(2) * t177 - t219 * t307;
t415 = qJD(3) * t200 + t247;
t233 = -t227 * qJDD(3) + t224 * t415;
t56 = qJD(5) * t131 + t233;
t388 = t56 * t227;
t330 = qJD(3) * qJD(5);
t335 = qJD(5) * t224;
t55 = -t224 * qJDD(3) + t170 * t335 + (-t415 - t330) * t227;
t389 = t55 * t224;
t419 = t177 * ((t129 * t224 - t131 * t227) * qJD(5) - t388 + t389) - t279 * t172;
t209 = t228 * pkin(3) + pkin(2);
t104 = -pkin(4) * t266 - pkin(9) * t177 - t209;
t189 = t398 * t228;
t128 = t189 * t381 - t356 * t398;
t334 = qJD(5) * t227;
t397 = t104 * t334 - t128 * t335 + t224 * t421 + t418 * t227;
t285 = pkin(5) * t224 - qJ(6) * t227;
t201 = t228 * t340;
t183 = qJD(2) * pkin(8) + t318;
t294 = qJ(4) * qJD(2) + t183;
t123 = -t225 * t294 + t201;
t312 = t225 * t340;
t417 = t228 * t294;
t124 = t312 + t417;
t300 = t381 * t124;
t63 = t219 * t123 + t300;
t385 = -t224 * qJD(6) + t159 * t285 - t63;
t383 = t160 * t219 - t177 * t313 - t381 * t257;
t382 = cos(pkin(10));
t301 = t382 * t229;
t220 = sin(pkin(10));
t354 = t220 * t226;
t163 = -t222 * t301 + t354;
t302 = t382 * t226;
t353 = t220 * t229;
t165 = t222 * t353 + t302;
t289 = g(1) * t165 + g(2) * t163;
t350 = t221 * t229;
t254 = -g(3) * t350 + t289;
t413 = qJD(3) * t170;
t412 = pkin(3) * t307 + qJDD(4);
t113 = t219 * t124;
t117 = qJD(3) * pkin(3) + t123;
t60 = t117 * t381 - t113;
t53 = -qJD(3) * pkin(4) - t60;
t30 = t129 * pkin(5) - t131 * qJ(6) + t53;
t328 = t225 * qJDD(2);
t283 = -qJDD(2) * t298 + t219 * t328;
t106 = qJD(2) * t169 + t283;
t100 = qJDD(5) + t106;
t402 = pkin(3) * t219;
t206 = pkin(9) + t402;
t377 = t100 * t206;
t411 = t159 * t30 - t377;
t363 = t172 * t224;
t269 = t177 * t334 + t363;
t95 = t224 * t100;
t410 = t169 * t129 + t159 * t269 + t177 * t95 - t266 * t56;
t230 = qJD(3) ^ 2;
t305 = qJDD(1) * t350;
t310 = t226 * t333;
t284 = t221 * t310 - t305;
t379 = qJDD(2) * pkin(2);
t146 = t284 - t379;
t273 = -t146 + t289;
t409 = -pkin(8) * t230 + t221 * (-g(3) * t229 + t310) + t273 + t379;
t387 = t224 * t104 + t227 * t128;
t396 = -qJD(5) * t387 - t418 * t224 + t227 * t421;
t407 = t131 ^ 2;
t406 = t159 ^ 2;
t405 = t170 ^ 2;
t404 = qJ(6) * t169 - qJD(6) * t266 + t397;
t403 = -t169 * pkin(5) - t396;
t401 = pkin(3) * t225;
t216 = qJ(3) + pkin(11);
t211 = cos(t216);
t400 = pkin(4) * t211;
t399 = pkin(5) * t100;
t329 = qJDD(1) * t222;
t199 = t228 * t329;
t331 = qJD(2) * qJD(4);
t48 = qJDD(3) * pkin(3) + t199 - qJD(3) * t417 + (-qJ(4) * qJDD(2) - t331 - t420) * t225;
t327 = t228 * qJDD(2);
t320 = t225 * t329 + t420 * t228;
t69 = -t183 * t336 + t320;
t50 = t228 * t331 + (-t307 + t327) * qJ(4) + t69;
t14 = -t219 * t50 + t381 * t48;
t15 = t219 * t48 + t381 * t50;
t65 = t123 * t381 - t113;
t326 = pkin(3) * t338;
t88 = pkin(4) * t170 + pkin(9) * t167 + t326;
t33 = t224 * t88 + t227 * t65;
t395 = qJD(2) * pkin(2);
t61 = t219 * t117 + t300;
t54 = qJD(3) * pkin(9) + t61;
t158 = -qJD(2) * t209 + qJD(4) - t313;
t76 = pkin(4) * t167 - pkin(9) * t170 + t158;
t28 = t224 * t76 + t227 * t54;
t20 = qJ(6) * t159 + t28;
t394 = t159 * t20;
t27 = -t224 * t54 + t227 * t76;
t393 = t159 * t27;
t392 = t159 * t28;
t391 = t206 * t55;
t52 = t224 * t56;
t390 = t227 * t55;
t386 = -t129 * t334 - t52;
t286 = t227 * pkin(5) + t224 * qJ(6);
t384 = t285 * t172 + (qJD(5) * t286 - qJD(6) * t227) * t177 + t383;
t380 = qJ(6) * t100;
t376 = t129 * t159;
t375 = t129 * t206;
t373 = t131 * t129;
t372 = t131 * t170;
t371 = t131 * t206;
t369 = t159 * t170;
t295 = t159 * t224;
t368 = t159 * t227;
t210 = sin(t216);
t367 = t163 * t210;
t366 = t165 * t210;
t365 = t170 * t129;
t364 = t170 * t167;
t362 = t172 * t227;
t361 = t183 * t225;
t360 = t206 * t224;
t359 = t206 * t227;
t358 = t211 * t224;
t357 = t211 * t227;
t355 = t220 * t221;
t351 = t221 * t228;
t96 = t227 * t100;
t348 = t227 * t229;
t347 = qJD(6) - t27;
t346 = qJDD(1) - g(3);
t164 = t222 * t302 + t353;
t345 = -t163 * t209 + t164 * t398;
t166 = -t222 * t354 + t301;
t344 = -t165 * t209 + t166 * t398;
t217 = t225 ^ 2;
t218 = t228 ^ 2;
t343 = t217 - t218;
t342 = t217 + t218;
t184 = -t313 - t395;
t339 = qJD(2) * t184;
t337 = qJD(2) * t226;
t324 = t210 * t350;
t322 = t221 * t348;
t196 = t224 * t350;
t231 = qJD(2) ^ 2;
t321 = t225 * t231 * t228;
t319 = t381 * pkin(3);
t317 = t221 * t337;
t316 = qJD(2) * t350;
t315 = t206 * t335;
t314 = t206 * t334;
t311 = t129 ^ 2 - t407;
t306 = t229 * t332;
t303 = t221 * t382;
t13 = qJDD(3) * pkin(9) + t15;
t38 = -pkin(3) * t327 + t106 * pkin(4) - pkin(9) * t415 + t146 + t412;
t4 = -t224 * t13 + t227 * t38 - t54 * t334 - t76 * t335;
t119 = t131 * t335;
t297 = -t119 - t390;
t127 = t219 * t189 + t398 * t299;
t293 = -pkin(9) * t367 - t163 * t400 + t345;
t292 = -pkin(9) * t366 - t165 * t400 + t344;
t291 = t228 * t307;
t290 = t220 * pkin(3) * t351 - t166 * t401;
t12 = -qJDD(3) * pkin(4) - t14;
t207 = -t319 - pkin(4);
t288 = g(1) * t166 + g(2) * t164;
t287 = t209 * t350 + t352 * t398;
t32 = -t224 * t65 + t227 * t88;
t57 = t104 * t227 - t128 * t224;
t277 = t173 * pkin(3);
t276 = qJDD(2) * t229 - t226 * t231;
t275 = -t159 * t335 - t167 * t295 + t96;
t274 = t159 * t334 + t167 * t368 + t95;
t174 = t222 * t225 + t226 * t351;
t94 = t219 * t173 + t174 * t381;
t77 = t224 * t94 + t322;
t3 = t227 * t13 + t224 * t38 + t76 * t334 - t335 * t54;
t137 = t183 * t228 + t312;
t268 = -t177 * t335 + t362;
t121 = qJD(3) * t173 + t228 * t316;
t122 = -qJD(3) * t174 - t225 * t316;
t64 = t121 * t381 + t219 * t122;
t24 = -qJD(5) * t77 + t224 * t317 + t227 * t64;
t25 = -qJD(5) * t196 + t224 * t64 - t227 * t317 + t334 * t94;
t78 = t227 * t94 - t196;
t267 = -t24 * t129 + t131 * t25 - t55 * t77 - t78 * t56;
t134 = t196 * t211 - t227 * t352;
t82 = -t163 * t358 - t164 * t227;
t84 = -t165 * t358 - t166 * t227;
t265 = -g(1) * t84 - g(2) * t82 - g(3) * t134;
t135 = (t211 * t348 + t224 * t226) * t221;
t83 = -t163 * t357 + t164 * t224;
t85 = -t165 * t357 + t166 * t224;
t264 = -g(1) * t85 - g(2) * t83 - g(3) * t135;
t62 = t121 * t219 - t122 * t381;
t93 = -t173 * t381 + t174 * t219;
t263 = -t100 * t77 + t62 * t129 - t159 * t25 + t93 * t56;
t262 = pkin(9) * t324 + t350 * t400 + t287;
t261 = t159 * t53 - t377;
t107 = -t164 * t210 - t211 * t303;
t109 = -t166 * t210 + t211 * t355;
t149 = -t210 * t352 + t211 * t222;
t260 = -g(1) * t109 - g(2) * t107 - g(3) * t149;
t108 = t164 * t211 - t210 * t303;
t110 = t166 * t211 + t210 * t355;
t150 = t210 * t222 + t211 * t352;
t259 = -g(1) * t110 - g(2) * t108 - g(3) * t150;
t258 = t109 * pkin(4) + pkin(9) * t110 + t290;
t256 = t129 * t295 - t388;
t255 = -t56 * t359 + t259;
t253 = -t275 - t365;
t251 = t149 * pkin(4) + pkin(9) * t150 + t277;
t250 = (-t164 * t225 - t228 * t303) * pkin(3);
t249 = t254 * t210;
t248 = t100 * t78 - t131 * t62 + t159 * t24 + t55 * t93;
t111 = t150 * t224 + t322;
t71 = t108 * t224 - t163 * t227;
t73 = t110 * t224 - t165 * t227;
t246 = g(1) * t73 + g(2) * t71 + g(3) * t111 + t4;
t244 = qJD(5) * t159 * t206 - t260;
t5 = pkin(5) * t56 + qJ(6) * t55 - qJD(6) * t131 + t12;
t243 = -t244 - t5;
t242 = t12 + t244;
t241 = t129 * t269 + t177 * t52;
t240 = -pkin(8) * qJDD(3) + (t184 + t313 - t395) * qJD(3);
t105 = -qJDD(2) * t209 + t284 + t412;
t239 = t107 * pkin(4) + t108 * pkin(9) + t250;
t112 = t150 * t227 - t196;
t72 = t108 * t227 + t163 * t224;
t74 = t110 * t227 + t165 * t224;
t238 = -g(1) * t74 - g(2) * t72 - g(3) * t112 + t3;
t237 = t131 * t30 + qJDD(6) - t246;
t136 = t201 - t361;
t70 = -t137 * qJD(3) - t225 * t147 + t199;
t234 = -t70 * t225 + t69 * t228 + (-t136 * t228 - t137 * t225) * qJD(3) - t288;
t232 = t131 * t159 - t170 * t334 - t224 * t330 - t233;
t175 = -t286 + t207;
t162 = t167 ^ 2;
t75 = pkin(5) * t131 + qJ(6) * t129;
t66 = t177 * t285 + t127;
t43 = pkin(5) * t266 - t57;
t42 = -qJ(6) * t266 + t387;
t41 = -t100 * t266 + t159 * t169;
t34 = -t55 + t376;
t29 = -pkin(5) * t170 - t32;
t26 = qJ(6) * t170 + t33;
t22 = t274 - t372;
t21 = t131 * t368 - t389;
t19 = -pkin(5) * t159 + t347;
t9 = t131 * t268 - t177 * t390;
t6 = t131 * t169 + t159 * t268 + t177 * t96 + t266 * t55;
t2 = qJDD(6) - t4 - t399;
t1 = qJD(6) * t159 + t3 + t380;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t346, 0, 0, 0, 0, 0, 0, t276 * t221 (-qJDD(2) * t226 - t229 * t231) * t221, 0, -g(3) + (t222 ^ 2 + (t226 ^ 2 + t229 ^ 2) * t221 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t122 * qJD(3) + t173 * qJDD(3) + (-t225 * t306 + t228 * t276) * t221, -t121 * qJD(3) - t174 * qJDD(3) + (-t225 * t276 - t228 * t306) * t221 (-t173 * t225 + t174 * t228) * qJDD(2) + (t121 * t228 - t122 * t225 + (-t173 * t228 - t174 * t225) * qJD(3)) * qJD(2), t121 * t137 + t122 * t136 + t173 * t70 + t174 * t69 - g(3) + (-t146 * t229 + t184 * t337) * t221, 0, 0, 0, 0, 0, 0, -t62 * qJD(3) - t93 * qJDD(3) + (-t106 * t229 + t167 * t337) * t221, -t64 * qJD(3) - t94 * qJDD(3) + (t170 * t337 - t229 * t415) * t221, -t94 * t106 - t64 * t167 + t62 * t170 + t415 * t93, -t14 * t93 + t15 * t94 - t60 * t62 + t61 * t64 - g(3) + (-t105 * t229 + t158 * t337) * t221, 0, 0, 0, 0, 0, 0, t263, -t248, t267, t12 * t93 + t24 * t28 - t25 * t27 + t3 * t78 - t4 * t77 + t53 * t62 - g(3), 0, 0, 0, 0, 0, 0, t263, t267, t248, t1 * t78 + t19 * t25 + t2 * t77 + t20 * t24 + t30 * t62 + t5 * t93 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t254 + t305, -t346 * t352 + t288, 0, 0, qJDD(2) * t217 + 0.2e1 * t291, 0.2e1 * t225 * t327 - 0.2e1 * t332 * t343, qJDD(3) * t225 + t228 * t230, qJDD(2) * t218 - 0.2e1 * t291, qJDD(3) * t228 - t225 * t230, 0, t240 * t225 + t228 * t409, -t225 * t409 + t240 * t228, t342 * t378 + (-g(3) * t226 - t309 * t342) * t221 + t234, t273 * pkin(2) + t234 * pkin(8) + (-g(3) * (pkin(2) * t229 + pkin(8) * t226) + (-t184 * t226 + (t136 * t225 - t137 * t228) * t229) * qJD(1)) * t221, t170 * t172 + t177 * t415, -t177 * t106 - t172 * t167 - t170 * t169 + t266 * t415, qJD(3) * t172 + qJDD(3) * t177, -t106 * t266 + t167 * t169, -qJD(3) * t169 + qJDD(3) * t266, 0, -t167 * t318 - qJDD(3) * t127 - t105 * t266 - t106 * t209 + t158 * t169 + t254 * t211 + (t167 * t401 - t383) * qJD(3), -g(1) * t366 - g(2) * t367 + g(3) * t324 - qJD(3) * t418 - t128 * qJDD(3) + t105 * t177 + t158 * t172 - t170 * t414 - t209 * t415, -g(3) * t352 - t128 * t106 + t127 * t415 - t14 * t177 + t15 * t266 - t167 * t418 - t61 * t169 + t170 * t383 - t60 * t172 - t288, -g(1) * t344 - g(2) * t345 - g(3) * t287 - t105 * t209 - t14 * t127 + t15 * t128 - t158 * t414 - t383 * t60 + t418 * t61, t9, t419, t6, t241, -t410, t41, t53 * t363 + t100 * t57 + t127 * t56 + t169 * t27 - t266 * t4 + (t12 * t224 + t334 * t53) * t177 + t396 * t159 + t383 * t129 + t264, t53 * t362 - t100 * t387 - t127 * t55 - t169 * t28 + t266 * t3 + (t12 * t227 - t335 * t53) * t177 - t397 * t159 + t383 * t131 - t265, t55 * t57 - t56 * t387 + (-t224 * t28 - t227 * t27) * t172 - t396 * t131 - t397 * t129 + t249 + (-t224 * t3 - t227 * t4 + (t224 * t27 - t227 * t28) * qJD(5)) * t177, -g(1) * t292 - g(2) * t293 - g(3) * t262 + t12 * t127 + t27 * t396 + t28 * t397 + t3 * t387 + t383 * t53 + t4 * t57, t9, t6, -t419, t41, t410, t241, t30 * t363 - t100 * t43 - t169 * t19 + t266 * t2 + t56 * t66 + (t224 * t5 + t30 * t334) * t177 - t403 * t159 + t384 * t129 + t264, -t42 * t56 - t43 * t55 + (t19 * t227 - t20 * t224) * t172 + t403 * t131 - t404 * t129 + t249 + (-t1 * t224 + t2 * t227 + (-t19 * t224 - t20 * t227) * qJD(5)) * t177, -t30 * t362 - t1 * t266 + t100 * t42 + t169 * t20 + t55 * t66 + (-t227 * t5 + t30 * t335) * t177 + t404 * t159 - t384 * t131 + t265, t1 * t42 + t5 * t66 + t2 * t43 - g(1) * (pkin(5) * t85 + qJ(6) * t84 + t292) - g(2) * (pkin(5) * t83 + qJ(6) * t82 + t293) - g(3) * (pkin(5) * t135 + qJ(6) * t134 + t262) + t384 * t30 + t404 * t20 + t403 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t321, t343 * t231, t328, t321, t327, qJDD(3), -g(3) * t173 + t199 + (-g(1) * t220 + g(2) * t382) * t351 + (-t147 + t288 - t339) * t225, -t228 * t339 - g(1) * (-t166 * t228 - t225 * t355) - g(2) * (-t164 * t228 + t225 * t303) + g(3) * t174 + (t136 + t361) * qJD(3) - t320, 0, 0, t364, -t162 + t405 (t200 + t167) * qJD(3) + t247, -t364, -t283, qJDD(3), t63 * qJD(3) - t158 * t170 + (qJDD(3) * t381 - t167 * t338) * pkin(3) + t260 + t14, qJD(3) * t65 + t158 * t167 + (-qJDD(3) * t219 - t170 * t338) * pkin(3) - t259 - t15, -t106 * t402 - t415 * t319 - (-t61 + t63) * t170 + (t65 - t60) * t167, -g(1) * t290 - g(2) * t250 - g(3) * t277 + t14 * t319 + t15 * t402 - t158 * t326 + t60 * t63 - t61 * t65, t21, -t167 * t279 + t297 + t386, t22, t256, -t253, -t369, -t129 * t63 - t159 * t32 - t170 * t27 + t207 * t56 + t224 * t261 - t227 * t242, -t131 * t63 + t159 * t33 + t170 * t28 - t207 * t55 + t224 * t242 + t227 * t261, t129 * t33 + t131 * t32 + (-t167 * t27 + t3 + (-t27 + t371) * qJD(5)) * t227 + (-t167 * t28 - t391 - t4 + (-t28 + t375) * qJD(5)) * t224 + t255, -g(1) * t258 - g(2) * t239 - g(3) * t251 + t12 * t207 + t3 * t359 - t360 * t4 - t53 * t63 + (-t315 - t33) * t28 + (-t314 - t32) * t27, t21, t22, t119 + (t131 * t167 + t56) * t224 + (t55 + t376) * t227, -t369, t253, t256, t385 * t129 + t159 * t29 + t170 * t19 + t175 * t56 + t224 * t411 + t243 * t227, t129 * t26 - t131 * t29 + (t167 * t19 + t1 + (t19 + t371) * qJD(5)) * t227 + (-t167 * t20 - t391 + t2 + (-t20 + t375) * qJD(5)) * t224 + t255, -t385 * t131 - t159 * t26 - t170 * t20 + t175 * t55 + t243 * t224 - t227 * t411, t1 * t359 + t5 * t175 + t2 * t360 - g(1) * (t109 * t286 + t258) - g(2) * (t107 * t286 + t239) - g(3) * (t149 * t286 + t251) + t385 * t30 + (-t315 - t26) * t20 + (t314 - t29) * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283 + 0.2e1 * t413 (t200 - t167) * qJD(3) + t247, -t162 - t405, t167 * t61 + t170 * t60 + t105 - t254, 0, 0, 0, 0, 0, 0, t275 - t365, -t227 * t406 - t372 - t95 (-t129 * t167 + t55) * t227 + t131 * t295 + t386, -t170 * t53 + (t4 + t392) * t227 + (t3 - t393) * t224 - t254, 0, 0, 0, 0, 0, 0, -t224 * t406 - t365 + t96 (t370 - t374) * t167 - t297 + t386, t274 + t372, -t170 * t30 + (-t2 + t394) * t227 + (t159 * t19 + t1) * t224 - t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t373, -t311, t34, -t373, t232, t100, -t131 * t53 + t246 + t392, t129 * t53 - t238 + t393, 0, 0, t373, t34, t311, t100, -t232, -t373, -t129 * t75 - t237 + t392 + 0.2e1 * t399, pkin(5) * t55 - qJ(6) * t56 + (t20 - t28) * t131 + (t19 - t347) * t129, 0.2e1 * t380 - t129 * t30 + t131 * t75 + (0.2e1 * qJD(6) - t27) * t159 + t238, t1 * qJ(6) - t2 * pkin(5) - t30 * t75 - t19 * t28 - g(1) * (-pkin(5) * t73 + qJ(6) * t74) - g(2) * (-pkin(5) * t71 + qJ(6) * t72) - g(3) * (-pkin(5) * t111 + qJ(6) * t112) + t347 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(5) - t283 + t373 - t413, t34, -t406 - t407, t237 - t394 - t399;];
tau_reg  = t7;
