% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPRP2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:32:15
% EndTime: 2019-03-08 21:32:23
% DurationCPUTime: 2.40s
% Computational Cost: add. (2658->225), mult. (6692->408), div. (0->0), fcn. (6548->10), ass. (0->143)
t181 = sin(qJ(2));
t138 = qJD(2) * t181;
t89 = sin(pkin(6));
t132 = t89 * t138;
t94 = cos(qJ(2));
t172 = t89 * t94;
t140 = t89 * t181;
t164 = cos(pkin(6));
t91 = sin(qJ(3));
t93 = cos(qJ(3));
t110 = t91 * t140 - t164 * t93;
t163 = cos(pkin(11));
t64 = t93 * t140 + t164 * t91;
t88 = sin(pkin(11));
t42 = -t110 * t88 + t163 * t64;
t90 = sin(qJ(5));
t92 = cos(qJ(5));
t33 = t92 * t172 + t90 * t42;
t162 = qJD(2) * t94;
t143 = t89 * t162;
t100 = t64 * qJD(3) + t91 * t143;
t187 = t110 * qJD(3) - t93 * t143;
t95 = -t88 * t100 - t163 * t187;
t10 = t33 * qJD(5) - t90 * t132 - t92 * t95;
t153 = t90 * t172;
t84 = qJD(5) * t92;
t11 = -qJD(5) * t153 - t92 * t132 + t42 * t84 + t90 * t95;
t34 = t92 * t42 - t153;
t122 = t33 * t92 - t34 * t90;
t105 = t122 * qJD(5) - t10 * t92 + t11 * t90;
t86 = t90 ^ 2;
t87 = t92 ^ 2;
t166 = t86 - t87;
t73 = t166 * qJD(5);
t192 = t10 * t90 + t11 * t92;
t136 = t163 * t93;
t173 = t88 * t91;
t67 = -t136 + t173;
t137 = t163 * t91;
t68 = t88 * t93 + t137;
t81 = -t93 * pkin(3) - pkin(2);
t117 = -t67 * pkin(4) + t68 * pkin(9) - t81;
t167 = -qJ(4) - pkin(8);
t74 = t167 * t93;
t53 = -t163 * t74 + t167 * t173;
t191 = -t90 * t117 + t92 * t53;
t161 = qJD(3) * t91;
t62 = qJD(3) * t136 - t88 * t161;
t168 = t92 * t62;
t83 = qJD(5) * t90;
t119 = t68 * t83 - t168;
t174 = t68 * t92;
t24 = t163 * t100 - t187 * t88;
t41 = t110 * t163 + t88 * t64;
t61 = t68 * qJD(3);
t189 = -t10 * t67 + t119 * t41 - t24 * t174 + t34 * t61;
t160 = qJD(3) * t93;
t188 = t100 * t91 + t110 * t160 - t64 * t161 - t187 * t93;
t150 = pkin(3) * t161;
t112 = t61 * pkin(4) - t62 * pkin(9) + t150;
t135 = qJD(3) * t167;
t114 = -t91 * qJD(4) + t93 * t135;
t59 = t93 * qJD(4) + t91 * t135;
t39 = t88 * t114 + t163 * t59;
t5 = -qJD(5) * t191 + t92 * t112 - t90 * t39;
t109 = t92 * t117;
t21 = -t90 * t53 - t109;
t4 = qJD(5) * t109 - t90 * t112 - t92 * t39 + t53 * t83;
t186 = t4 * t90 - t5 * t92 + (-t191 * t92 + t21 * t90) * qJD(5);
t157 = t67 * qJD(6);
t165 = t61 * qJ(6);
t1 = t157 - t4 + t165;
t17 = t67 * qJ(6) + t191;
t18 = -t67 * pkin(5) - t21;
t182 = t61 * pkin(5);
t3 = -t182 - t5;
t185 = t1 * t90 - t3 * t92 + (t17 * t92 + t18 * t90) * qJD(5);
t129 = t92 * pkin(5) + t90 * qJ(6);
t184 = t129 * qJD(5) - t92 * qJD(6);
t183 = 0.2e1 * qJD(6);
t14 = t41 * t24;
t38 = -t163 * t114 + t88 * t59;
t52 = -t167 * t137 - t88 * t74;
t179 = t52 * t38;
t79 = t88 * pkin(3) + pkin(9);
t178 = t61 * t79;
t177 = t67 * t79;
t176 = t68 * t62;
t175 = t68 * t90;
t171 = t90 * t61;
t170 = t90 * t62;
t169 = t92 * t61;
t159 = qJD(3) * t94;
t156 = t90 * qJD(6);
t50 = 0.2e1 * t67 * t61;
t154 = -0.2e1 * pkin(2) * qJD(3);
t152 = t90 * t168;
t80 = -t163 * pkin(3) - pkin(4);
t151 = 0.2e1 * qJD(5) * t80;
t149 = t91 * t159;
t148 = t79 * t83;
t147 = t79 * t84;
t146 = t41 * t84;
t142 = t90 * t84;
t141 = t91 * t160;
t66 = t68 ^ 2;
t133 = t66 * t142;
t128 = pkin(5) * t90 - qJ(6) * t92;
t126 = -t17 * t90 + t18 * t92;
t125 = -t191 * t90 - t21 * t92;
t123 = t24 * t52 + t41 * t38;
t121 = t62 * t80 - t178;
t120 = -t68 * t80 + t177;
t47 = t67 * t84 + t171;
t45 = t67 * t83 - t169;
t48 = t68 * t84 + t170;
t118 = -0.2e1 * t34 * t10 + 0.2e1 * t33 * t11 + 0.2e1 * t14;
t116 = -t11 * t67 + t68 * t146 + t41 * t170 + t24 * t175 - t33 * t61;
t115 = t33 * t83 + t34 * t84 - t192;
t65 = -t129 + t80;
t7 = t128 * t62 + t184 * t68 + t38;
t113 = -t7 + (t65 * t68 - t177) * qJD(5);
t25 = t128 * t68 + t52;
t60 = -pkin(5) * t83 + qJ(6) * t84 + t156;
t106 = qJD(5) * t25 - t60 * t68 + t62 * t65 - t178;
t104 = t126 * qJD(5) + t1 * t92 + t3 * t90;
t103 = t125 * qJD(5) - t4 * t92 - t5 * t90;
t101 = t105 * t79;
t96 = t122 * t62 + ((-t33 * t90 - t34 * t92) * qJD(5) + t192) * t68;
t85 = t89 ^ 2;
t76 = -0.2e1 * t142;
t75 = 0.2e1 * t142;
t43 = (-t86 - t87) * t62;
t32 = 0.2e1 * t87 * t176 - 0.2e1 * t133;
t31 = 0.2e1 * t86 * t176 + 0.2e1 * t133;
t28 = t68 * t73 - t152;
t26 = 0.4e1 * t68 * t142 + t166 * t62;
t20 = -0.2e1 * t68 * t152 + t66 * t73;
t16 = t68 * t171 + t48 * t67;
t15 = -0.2e1 * t119 * t67 + 0.2e1 * t68 * t169;
t13 = -t24 * t92 + t41 * t83;
t12 = t24 * t90 + t146;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (-t181 * t85 + (t110 * t91 + t64 * t93) * t89) * t162, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t138 * t85 * t94 + 0.2e1 * t42 * t95 + 0.2e1 * t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t132, -t143, 0, 0, 0, 0, 0, 0, 0, 0 (-t93 * t138 - t149) * t89 (t91 * t138 - t93 * t159) * t89, t188, -pkin(2) * t132 + t188 * pkin(8), 0, 0, 0, 0, 0, 0 (t67 * t138 - t61 * t94) * t89 (t68 * t138 - t62 * t94) * t89, t24 * t68 + t41 * t62 - t42 * t61 - t67 * t95, -pkin(3) * t149 * t89 + t132 * t81 + t42 * t39 + t53 * t95 + t123, 0, 0, 0, 0, 0, 0, t116, -t189, t96, -t10 * t191 - t11 * t21 - t33 * t5 - t34 * t4 + t123, 0, 0, 0, 0, 0, 0, t116, t96, t189, t34 * t1 - t10 * t17 + t11 * t18 + t24 * t25 + t33 * t3 + t41 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t141, 0.2e1 * (-t91 ^ 2 + t93 ^ 2) * qJD(3), 0, -0.2e1 * t141, 0, 0, t91 * t154, t93 * t154, 0, 0, 0.2e1 * t176, -0.2e1 * t68 * t61 - 0.2e1 * t62 * t67, 0, t50, 0, 0, 0.2e1 * t67 * t150 + 0.2e1 * t81 * t61, 0.2e1 * t68 * t150 + 0.2e1 * t81 * t62, 0.2e1 * t38 * t68 - 0.2e1 * t39 * t67 + 0.2e1 * t52 * t62 - 0.2e1 * t53 * t61, 0.2e1 * t150 * t81 + 0.2e1 * t53 * t39 + 0.2e1 * t179, t32, 0.2e1 * t20, t15, t31, -0.2e1 * t16, t50, 0.2e1 * t175 * t38 + 0.2e1 * t21 * t61 + 0.2e1 * t48 * t52 + 0.2e1 * t5 * t67, -0.2e1 * t119 * t52 + 0.2e1 * t174 * t38 - 0.2e1 * t191 * t61 + 0.2e1 * t4 * t67, 0.2e1 * t125 * t62 + 0.2e1 * t186 * t68, -0.2e1 * t191 * t4 + 0.2e1 * t21 * t5 + 0.2e1 * t179, t32, t15, -0.2e1 * t20, t50, 0.2e1 * t16, t31, 0.2e1 * t7 * t175 - 0.2e1 * t18 * t61 + 0.2e1 * t25 * t48 - 0.2e1 * t3 * t67, 0.2e1 * t126 * t62 - 0.2e1 * t185 * t68, 0.2e1 * t1 * t67 + 0.2e1 * t119 * t25 + 0.2e1 * t17 * t61 - 0.2e1 * t174 * t7, 0.2e1 * t17 * t1 + 0.2e1 * t18 * t3 + 0.2e1 * t25 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, t187, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t95, 0 (-t163 * t24 + t88 * t95) * pkin(3), 0, 0, 0, 0, 0, 0, t13, t12, t105, t24 * t80 + t101, 0, 0, 0, 0, 0, 0, t13, t105, -t12, t24 * t65 - t41 * t60 + t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t160, 0, -t161, 0, -pkin(8) * t160, pkin(8) * t161, 0, 0, 0, 0, t62, 0, -t61, 0, -t38, -t39 (-t163 * t62 - t61 * t88) * pkin(3) (-t163 * t38 + t39 * t88) * pkin(3), -t28, -t26, t47, t28, -t45, 0, -t38 * t92 + t121 * t90 + (-t120 * t92 + t52 * t90) * qJD(5), t38 * t90 + t121 * t92 + (t120 * t90 + t52 * t92) * qJD(5), t103, t103 * t79 + t38 * t80, -t28, t47, t26, 0, t45, t28, t106 * t90 + t113 * t92, t104, -t106 * t92 + t113 * t90, t104 * t79 - t25 * t60 + t7 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, -0.2e1 * t73, 0, t76, 0, 0, t90 * t151, t92 * t151, 0, 0, t75, 0, 0.2e1 * t73, 0, 0, t76, 0.2e1 * t60 * t92 + 0.2e1 * t65 * t83, 0, 0.2e1 * t60 * t90 - 0.2e1 * t65 * t84, -0.2e1 * t65 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t62, 0, t150, 0, 0, 0, 0, 0, 0, -t45, -t47, t43, -t186, 0, 0, 0, 0, 0, 0, -t45, t43, t47, t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, t10, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, -t10, -t11 * pkin(5) - t10 * qJ(6) + t34 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, 0, -t48, t61, t5, t4, 0, 0, 0, -t119, 0, t61, t48, 0, t5 + 0.2e1 * t182, -t129 * t62 + (qJD(5) * t128 - t156) * t68, 0.2e1 * t157 - t4 + 0.2e1 * t165, -t3 * pkin(5) + t1 * qJ(6) + t17 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t83, 0, -t147, t148, 0, 0, 0, t84, 0, 0, t83, 0, -t147, -t184, -t148, -t184 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, -t84, 0, 0, 0, 0, 0, 0, 0, 0, -t83, 0, t84, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, qJ(6) * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, -t119, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t2;
