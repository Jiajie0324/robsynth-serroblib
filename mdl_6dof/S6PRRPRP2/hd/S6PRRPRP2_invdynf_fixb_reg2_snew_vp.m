% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:50
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:50:07
% EndTime: 2019-05-05 03:50:17
% DurationCPUTime: 11.79s
% Computational Cost: add. (30361->301), mult. (66257->421), div. (0->0), fcn. (49017->12), ass. (0->235)
t2524 = cos(qJ(3));
t2577 = qJD(2) * t2524;
t2563 = qJD(3) * t2577;
t2521 = sin(qJ(3));
t2565 = t2521 * qJDD(2);
t2487 = t2563 + t2565;
t2512 = sin(pkin(11));
t2515 = cos(pkin(11));
t2507 = t2524 * qJDD(2);
t2578 = qJD(2) * t2521;
t2564 = qJD(3) * t2578;
t2556 = t2507 - t2564;
t2558 = t2487 * t2512 - t2515 * t2556;
t2554 = qJDD(5) + t2558;
t2482 = t2512 * t2577 + t2515 * t2578;
t2520 = sin(qJ(5));
t2523 = cos(qJ(5));
t2461 = -qJD(3) * t2523 + t2482 * t2520;
t2463 = qJD(3) * t2520 + t2482 * t2523;
t2571 = t2461 * t2463;
t2409 = t2554 + t2571;
t2460 = t2463 ^ 2;
t2480 = t2512 * t2578 - t2515 * t2577;
t2475 = qJD(5) + t2480;
t2583 = t2475 ^ 2;
t2587 = -t2460 - t2583;
t2383 = t2409 * t2523 + t2520 * t2587;
t2457 = t2515 * t2487 + t2512 * t2556;
t2532 = -qJD(5) * t2461 + qJDD(3) * t2520 + t2457 * t2523;
t2570 = t2461 * t2475;
t2531 = t2532 - t2570;
t2358 = t2383 * t2512 + t2515 * t2531;
t2360 = t2383 * t2515 - t2512 * t2531;
t2329 = t2358 * t2524 + t2360 * t2521;
t2514 = sin(pkin(6));
t2517 = cos(pkin(6));
t2335 = t2358 * t2521 - t2360 * t2524;
t2381 = t2409 * t2520 - t2523 * t2587;
t2522 = sin(qJ(2));
t2525 = cos(qJ(2));
t2546 = t2335 * t2522 + t2381 * t2525;
t2310 = t2514 * t2329 + t2517 * t2546;
t2321 = t2335 * t2525 - t2381 * t2522;
t2513 = sin(pkin(10));
t2516 = cos(pkin(10));
t2622 = t2310 * t2513 - t2321 * t2516;
t2621 = t2310 * t2516 + t2321 * t2513;
t2308 = -t2329 * t2517 + t2514 * t2546;
t2399 = t2532 + t2570;
t2559 = -t2523 * qJDD(3) + t2457 * t2520;
t2533 = (-qJD(5) + t2475) * t2463 - t2559;
t2585 = -t2399 * t2523 + t2520 * t2533;
t2433 = t2461 ^ 2;
t2420 = t2460 + t2433;
t2584 = t2399 * t2520 + t2523 * t2533;
t2597 = t2420 * t2515 + t2512 * t2584;
t2598 = -t2420 * t2512 + t2515 * t2584;
t2603 = -t2521 * t2597 + t2524 * t2598;
t2607 = t2522 * t2585 + t2525 * t2603;
t2604 = t2521 * t2598 + t2524 * t2597;
t2608 = t2522 * t2603 - t2525 * t2585;
t2611 = -t2514 * t2604 + t2517 * t2608;
t2616 = -t2513 * t2611 + t2516 * t2607;
t2615 = t2513 * t2607 + t2516 * t2611;
t2612 = t2514 * t2608 + t2517 * t2604;
t2410 = t2554 - t2571;
t2586 = -t2583 - t2433;
t2590 = -t2410 * t2520 + t2523 * t2586;
t2602 = t2512 * t2590;
t2601 = t2515 * t2590;
t2591 = t2410 * t2523 + t2520 * t2586;
t2600 = t2522 * t2591;
t2599 = t2525 * t2591;
t2557 = g(1) * t2513 - g(2) * t2516;
t2579 = -g(3) + qJDD(1);
t2592 = t2514 * t2579 + t2517 * t2557;
t2527 = qJD(2) ^ 2;
t2503 = t2521 * t2527 * t2524;
t2495 = qJDD(3) + t2503;
t2582 = t2480 ^ 2;
t2581 = t2482 ^ 2;
t2580 = -2 * qJD(4);
t2576 = qJD(3) * t2482;
t2569 = t2480 * qJD(3);
t2568 = t2480 * t2482;
t2509 = t2524 ^ 2;
t2567 = t2509 * t2527;
t2469 = -t2514 * t2557 + t2517 * t2579;
t2493 = -g(1) * t2516 - g(2) * t2513;
t2448 = t2525 * t2493 + t2522 * t2592;
t2530 = -t2527 * pkin(2) + qJDD(2) * pkin(8) + t2448;
t2422 = t2521 * t2469 + t2524 * t2530;
t2494 = qJD(3) * pkin(3) - qJ(4) * t2578;
t2407 = -pkin(3) * t2567 + qJ(4) * t2556 - qJD(3) * t2494 + t2422;
t2421 = t2524 * t2469 - t2521 * t2530;
t2528 = t2421 + (-t2487 + t2563) * qJ(4) + t2495 * pkin(3);
t2367 = t2515 * t2407 + t2480 * t2580 + t2512 * t2528;
t2449 = pkin(4) * t2480 - pkin(9) * t2482;
t2526 = qJD(3) ^ 2;
t2356 = -pkin(4) * t2526 + qJDD(3) * pkin(9) - t2449 * t2480 + t2367;
t2555 = t2522 * t2493 - t2525 * t2592;
t2439 = -qJDD(2) * pkin(2) - t2527 * pkin(8) + t2555;
t2412 = -t2556 * pkin(3) - qJ(4) * t2567 + t2494 * t2578 + qJDD(4) + t2439;
t2434 = t2558 + t2576;
t2561 = -t2457 + t2569;
t2529 = pkin(4) * t2434 + pkin(9) * t2561 + t2412;
t2341 = t2523 * t2356 + t2520 * t2529;
t2508 = t2521 ^ 2;
t2566 = t2508 + t2509;
t2340 = -t2356 * t2520 + t2523 * t2529;
t2560 = t2407 * t2512 - t2515 * t2528;
t2431 = pkin(5) * t2461 - qJ(6) * t2463;
t2323 = -pkin(5) * t2583 + qJ(6) * t2554 + 0.2e1 * qJD(6) * t2475 - t2461 * t2431 + t2341;
t2328 = -pkin(5) * t2554 - qJ(6) * t2583 + t2431 * t2463 + qJDD(6) - t2340;
t2307 = t2323 * t2523 + t2328 * t2520;
t2355 = -qJDD(3) * pkin(4) - t2526 * pkin(9) + ((2 * qJD(4)) + t2449) * t2482 + t2560;
t2534 = -qJD(5) * t2463 - t2559;
t2337 = -t2534 * pkin(5) + (pkin(5) * t2475 - 0.2e1 * qJD(6)) * t2463 + t2355 - t2531 * qJ(6);
t2294 = t2307 * t2512 - t2337 * t2515;
t2295 = t2307 * t2515 + t2337 * t2512;
t2288 = -t2294 * t2521 + t2295 * t2524;
t2306 = t2323 * t2520 - t2328 * t2523;
t2553 = t2288 * t2522 - t2306 * t2525;
t2314 = -t2340 * t2520 + t2341 * t2523;
t2304 = t2314 * t2512 - t2355 * t2515;
t2305 = t2314 * t2515 + t2355 * t2512;
t2291 = -t2304 * t2521 + t2305 * t2524;
t2313 = t2340 * t2523 + t2341 * t2520;
t2552 = t2291 * t2522 - t2313 * t2525;
t2366 = t2482 * t2580 - t2560;
t2342 = t2366 * t2515 + t2367 * t2512;
t2343 = -t2366 * t2512 + t2367 * t2515;
t2316 = -t2342 * t2521 + t2343 * t2524;
t2551 = t2316 * t2522 - t2412 * t2525;
t2395 = (qJD(5) + t2475) * t2463 + t2559;
t2359 = -t2395 * t2515 + t2602;
t2361 = t2395 * t2512 + t2601;
t2332 = -t2359 * t2521 + t2361 * t2524;
t2547 = t2332 * t2522 - t2599;
t2396 = t2463 * t2475 - t2534;
t2363 = -t2396 * t2515 + t2602;
t2365 = t2396 * t2512 + t2601;
t2336 = -t2363 * t2521 + t2365 * t2524;
t2545 = t2336 * t2522 - t2599;
t2435 = -t2558 + t2576;
t2437 = -t2457 - t2569;
t2405 = t2435 * t2512 + t2437 * t2515;
t2406 = t2435 * t2515 - t2437 * t2512;
t2373 = -t2405 * t2521 + t2406 * t2524;
t2432 = -t2581 - t2582;
t2544 = t2373 * t2522 - t2432 * t2525;
t2450 = -t2526 - t2582;
t2452 = qJDD(3) - t2568;
t2413 = t2450 * t2512 + t2452 * t2515;
t2414 = t2450 * t2515 - t2452 * t2512;
t2380 = -t2413 * t2521 + t2414 * t2524;
t2543 = t2380 * t2522 - t2434 * t2525;
t2386 = -t2421 * t2521 + t2422 * t2524;
t2542 = t2386 * t2522 - t2439 * t2525;
t2453 = -qJDD(3) - t2568;
t2470 = -t2526 - t2581;
t2427 = t2453 * t2512 + t2470 * t2515;
t2428 = t2453 * t2515 - t2470 * t2512;
t2392 = -t2427 * t2521 + t2428 * t2524;
t2541 = t2392 * t2522 + t2525 * t2561;
t2540 = t2448 * t2522 - t2525 * t2555;
t2502 = -t2526 - t2567;
t2466 = -t2495 * t2521 + t2502 * t2524;
t2488 = t2507 - 0.2e1 * t2564;
t2539 = t2466 * t2522 + t2488 * t2525;
t2496 = -qJDD(3) + t2503;
t2501 = -t2508 * t2527 - t2526;
t2467 = t2496 * t2524 - t2501 * t2521;
t2486 = 0.2e1 * t2563 + t2565;
t2538 = t2467 * t2522 - t2486 * t2525;
t2489 = t2566 * qJDD(2);
t2492 = t2566 * t2527;
t2537 = t2489 * t2522 + t2492 * t2525;
t2536 = qJDD(2) * t2525 - t2522 * t2527;
t2491 = -qJDD(2) * t2522 - t2525 * t2527;
t2479 = t2536 * t2517;
t2478 = t2491 * t2517;
t2477 = t2536 * t2514;
t2476 = t2491 * t2514;
t2465 = t2496 * t2521 + t2501 * t2524;
t2464 = t2495 * t2524 + t2502 * t2521;
t2458 = t2489 * t2525 - t2492 * t2522;
t2456 = t2537 * t2517;
t2455 = t2537 * t2514;
t2442 = t2467 * t2525 + t2486 * t2522;
t2441 = t2466 * t2525 - t2488 * t2522;
t2418 = -t2465 * t2514 + t2517 * t2538;
t2417 = -t2464 * t2514 + t2517 * t2539;
t2416 = t2465 * t2517 + t2514 * t2538;
t2415 = t2464 * t2517 + t2514 * t2539;
t2408 = t2448 * t2525 + t2522 * t2555;
t2394 = -t2469 * t2514 + t2517 * t2540;
t2393 = t2469 * t2517 + t2514 * t2540;
t2391 = t2427 * t2524 + t2428 * t2521;
t2385 = t2421 * t2524 + t2422 * t2521;
t2379 = t2413 * t2524 + t2414 * t2521;
t2376 = t2392 * t2525 - t2522 * t2561;
t2375 = t2386 * t2525 + t2439 * t2522;
t2374 = t2380 * t2525 + t2434 * t2522;
t2372 = t2405 * t2524 + t2406 * t2521;
t2357 = t2373 * t2525 + t2432 * t2522;
t2349 = -t2391 * t2514 + t2517 * t2541;
t2348 = t2391 * t2517 + t2514 * t2541;
t2347 = -t2385 * t2514 + t2517 * t2542;
t2346 = t2385 * t2517 + t2514 * t2542;
t2345 = -t2379 * t2514 + t2517 * t2543;
t2344 = t2379 * t2517 + t2514 * t2543;
t2339 = -t2372 * t2514 + t2517 * t2544;
t2338 = t2372 * t2517 + t2514 * t2544;
t2334 = t2363 * t2524 + t2365 * t2521;
t2330 = t2359 * t2524 + t2361 * t2521;
t2322 = t2336 * t2525 + t2600;
t2320 = t2332 * t2525 + t2600;
t2315 = t2342 * t2524 + t2343 * t2521;
t2312 = t2316 * t2525 + t2412 * t2522;
t2311 = -t2334 * t2514 + t2517 * t2545;
t2309 = t2334 * t2517 + t2514 * t2545;
t2303 = -t2330 * t2514 + t2517 * t2547;
t2301 = t2330 * t2517 + t2514 * t2547;
t2293 = -t2514 * t2315 + t2517 * t2551;
t2292 = t2517 * t2315 + t2514 * t2551;
t2290 = t2304 * t2524 + t2305 * t2521;
t2289 = t2291 * t2525 + t2313 * t2522;
t2287 = t2294 * t2524 + t2295 * t2521;
t2286 = t2288 * t2525 + t2306 * t2522;
t2285 = -t2514 * t2290 + t2517 * t2552;
t2284 = t2517 * t2290 + t2514 * t2552;
t2283 = -t2514 * t2287 + t2517 * t2553;
t2282 = t2517 * t2287 + t2514 * t2553;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2516 * t2493 - t2513 * t2557, 0, 0, 0, 0, 0, 0, -t2479 * t2513 + t2491 * t2516, -t2478 * t2513 - t2516 * t2536, 0, -t2394 * t2513 + t2408 * t2516, 0, 0, 0, 0, 0, 0, -t2417 * t2513 + t2441 * t2516, -t2418 * t2513 + t2442 * t2516, -t2456 * t2513 + t2458 * t2516, -t2347 * t2513 + t2375 * t2516, 0, 0, 0, 0, 0, 0, -t2345 * t2513 + t2374 * t2516, -t2349 * t2513 + t2376 * t2516, -t2339 * t2513 + t2357 * t2516, -t2293 * t2513 + t2312 * t2516, 0, 0, 0, 0, 0, 0, -t2303 * t2513 + t2320 * t2516, -t2622, t2616, -t2285 * t2513 + t2289 * t2516, 0, 0, 0, 0, 0, 0, -t2311 * t2513 + t2322 * t2516, t2616, t2622, -t2283 * t2513 + t2286 * t2516; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2513 * t2493 + t2516 * t2557, 0, 0, 0, 0, 0, 0, t2479 * t2516 + t2491 * t2513, t2478 * t2516 - t2513 * t2536, 0, t2394 * t2516 + t2408 * t2513, 0, 0, 0, 0, 0, 0, t2417 * t2516 + t2441 * t2513, t2418 * t2516 + t2442 * t2513, t2456 * t2516 + t2458 * t2513, t2347 * t2516 + t2375 * t2513, 0, 0, 0, 0, 0, 0, t2345 * t2516 + t2374 * t2513, t2349 * t2516 + t2376 * t2513, t2339 * t2516 + t2357 * t2513, t2293 * t2516 + t2312 * t2513, 0, 0, 0, 0, 0, 0, t2303 * t2516 + t2320 * t2513, t2621, t2615, t2285 * t2516 + t2289 * t2513, 0, 0, 0, 0, 0, 0, t2311 * t2516 + t2322 * t2513, t2615, -t2621, t2283 * t2516 + t2286 * t2513; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2579, 0, 0, 0, 0, 0, 0, t2477, t2476, 0, t2393, 0, 0, 0, 0, 0, 0, t2415, t2416, t2455, t2346, 0, 0, 0, 0, 0, 0, t2344, t2348, t2338, t2292, 0, 0, 0, 0, 0, 0, t2301, t2308, t2612, t2284, 0, 0, 0, 0, 0, 0, t2309, t2612, -t2308, t2282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2493, 0, 0, 0, 0, 0, 0, t2491, -t2536, 0, t2408, 0, 0, 0, 0, 0, 0, t2441, t2442, t2458, t2375, 0, 0, 0, 0, 0, 0, t2374, t2376, t2357, t2312, 0, 0, 0, 0, 0, 0, t2320, t2321, t2607, t2289, 0, 0, 0, 0, 0, 0, t2322, t2607, -t2321, t2286; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2557, 0, 0, 0, 0, 0, 0, t2479, t2478, 0, t2394, 0, 0, 0, 0, 0, 0, t2417, t2418, t2456, t2347, 0, 0, 0, 0, 0, 0, t2345, t2349, t2339, t2293, 0, 0, 0, 0, 0, 0, t2303, t2310, t2611, t2285, 0, 0, 0, 0, 0, 0, t2311, t2611, -t2310, t2283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2579, 0, 0, 0, 0, 0, 0, t2477, t2476, 0, t2393, 0, 0, 0, 0, 0, 0, t2415, t2416, t2455, t2346, 0, 0, 0, 0, 0, 0, t2344, t2348, t2338, t2292, 0, 0, 0, 0, 0, 0, t2301, t2308, t2612, t2284, 0, 0, 0, 0, 0, 0, t2309, t2612, -t2308, t2282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2527, -qJDD(2), 0, t2448, 0, 0, 0, 0, 0, 0, t2466, t2467, t2489, t2386, 0, 0, 0, 0, 0, 0, t2380, t2392, t2373, t2316, 0, 0, 0, 0, 0, 0, t2332, t2335, t2603, t2291, 0, 0, 0, 0, 0, 0, t2336, t2603, -t2335, t2288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2527, 0, -t2555, 0, 0, 0, 0, 0, 0, t2488, -t2486, t2492, -t2439, 0, 0, 0, 0, 0, 0, -t2434, t2561, -t2432, -t2412, 0, 0, 0, 0, 0, 0, -t2591, t2381, -t2585, -t2313, 0, 0, 0, 0, 0, 0, -t2591, -t2585, -t2381, -t2306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2469, 0, 0, 0, 0, 0, 0, t2464, t2465, 0, t2385, 0, 0, 0, 0, 0, 0, t2379, t2391, t2372, t2315, 0, 0, 0, 0, 0, 0, t2330, -t2329, t2604, t2290, 0, 0, 0, 0, 0, 0, t2334, t2604, t2329, t2287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2502, t2496, t2507, t2422, 0, 0, 0, 0, 0, 0, t2414, t2428, t2406, t2343, 0, 0, 0, 0, 0, 0, t2361, -t2360, t2598, t2305, 0, 0, 0, 0, 0, 0, t2365, t2598, t2360, t2295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2495, t2501, -t2565, t2421, 0, 0, 0, 0, 0, 0, t2413, t2427, t2405, t2342, 0, 0, 0, 0, 0, 0, t2359, -t2358, t2597, t2304, 0, 0, 0, 0, 0, 0, t2363, t2597, t2358, t2294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2488, t2486, -t2492, t2439, 0, 0, 0, 0, 0, 0, t2434, -t2561, t2432, t2412, 0, 0, 0, 0, 0, 0, t2591, -t2381, t2585, t2313, 0, 0, 0, 0, 0, 0, t2591, t2585, t2381, t2306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2450, t2453, t2435, t2367, 0, 0, 0, 0, 0, 0, t2590, -t2383, t2584, t2314, 0, 0, 0, 0, 0, 0, t2590, t2584, t2383, t2307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2452, t2470, t2437, t2366, 0, 0, 0, 0, 0, 0, -t2395, -t2531, t2420, -t2355, 0, 0, 0, 0, 0, 0, -t2396, t2420, t2531, -t2337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2434, -t2561, t2432, t2412, 0, 0, 0, 0, 0, 0, t2591, -t2381, t2585, t2313, 0, 0, 0, 0, 0, 0, t2591, t2585, t2381, t2306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2586, -t2409, t2533, t2341, 0, 0, 0, 0, 0, 0, t2586, t2533, t2409, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2410, t2587, -t2399, t2340, 0, 0, 0, 0, 0, 0, t2410, -t2399, -t2587, -t2328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, t2531, -t2420, t2355, 0, 0, 0, 0, 0, 0, t2396, -t2420, -t2531, t2337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2586, t2533, t2409, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2396, -t2420, -t2531, t2337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2410, t2399, t2587, t2328;];
f_new_reg  = t1;
