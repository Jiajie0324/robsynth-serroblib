% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 10:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 10:16:22
% EndTime: 2019-05-07 10:16:29
% DurationCPUTime: 8.14s
% Computational Cost: add. (37261->323), mult. (80215->385), div. (0->0), fcn. (58436->10), ass. (0->221)
t2252 = qJDD(2) + qJDD(3);
t2223 = sin(qJ(3));
t2228 = cos(qJ(3));
t2229 = cos(qJ(2));
t2267 = qJD(1) * t2229;
t2224 = sin(qJ(2));
t2268 = qJD(1) * t2224;
t2180 = t2223 * t2268 - t2228 * t2267;
t2182 = (t2223 * t2229 + t2224 * t2228) * qJD(1);
t2262 = t2180 * t2182;
t2155 = t2252 + t2262;
t2179 = t2182 ^ 2;
t2218 = qJD(2) + qJD(3);
t2270 = t2218 ^ 2;
t2281 = -t2179 - t2270;
t2113 = t2155 * t2223 - t2228 * t2281;
t2115 = t2155 * t2228 + t2223 * t2281;
t2100 = t2113 * t2224 - t2115 * t2229;
t2225 = sin(qJ(1));
t2230 = cos(qJ(1));
t2250 = qJD(2) * t2267;
t2253 = t2224 * qJDD(1);
t2188 = t2250 + t2253;
t2215 = t2229 * qJDD(1);
t2251 = qJD(2) * t2268;
t2189 = t2215 - t2251;
t2143 = -qJD(3) * t2180 + t2188 * t2228 + t2189 * t2223;
t2261 = t2218 * t2180;
t2236 = t2143 - t2261;
t2296 = t2100 * t2225 - t2230 * t2236;
t2295 = t2100 * t2230 + t2225 * t2236;
t2243 = -t2252 + t2262;
t2272 = t2180 ^ 2;
t2280 = -t2270 - t2272;
t2287 = t2243 * t2223 + t2228 * t2280;
t2288 = t2223 * t2280 - t2228 * t2243;
t2290 = -t2224 * t2288 + t2229 * t2287;
t2294 = t2225 * t2290;
t2293 = t2230 * t2290;
t2087 = t2113 * t2229 + t2115 * t2224;
t2145 = t2179 + t2272;
t2244 = t2223 * t2188 - t2228 * t2189;
t2238 = (-qJD(3) + t2218) * t2182 - t2244;
t2245 = -t2143 - t2261;
t2278 = -t2223 * t2245 + t2228 * t2238;
t2279 = t2223 * t2238 + t2228 * t2245;
t2286 = -t2224 * t2279 + t2229 * t2278;
t2292 = t2145 * t2230 + t2225 * t2286;
t2291 = -t2145 * t2225 + t2230 * t2286;
t2289 = t2224 * t2287 + t2229 * t2288;
t2142 = qJD(3) * t2182 + t2244;
t2118 = t2218 * t2182 + t2142;
t2285 = t2224 * t2278 + t2229 * t2279;
t2222 = sin(qJ(5));
t2227 = cos(qJ(5));
t2150 = -t2227 * t2180 + t2182 * t2222;
t2148 = qJD(6) + t2150;
t2282 = qJD(6) + t2148;
t2152 = t2180 * t2222 + t2182 * t2227;
t2213 = -qJD(5) + t2218;
t2221 = sin(qJ(6));
t2226 = cos(qJ(6));
t2137 = t2152 * t2221 + t2226 * t2213;
t2277 = t2137 ^ 2;
t2139 = t2152 * t2226 - t2213 * t2221;
t2276 = t2139 ^ 2;
t2275 = t2148 ^ 2;
t2274 = t2150 ^ 2;
t2273 = t2152 ^ 2;
t2271 = t2213 ^ 2;
t2269 = 2 * qJD(4);
t2265 = t2137 * t2139;
t2264 = t2150 * t2152;
t2220 = t2229 ^ 2;
t2232 = qJD(1) ^ 2;
t2259 = t2220 * t2232;
t2198 = -g(1) * t2230 - g(2) * t2225;
t2184 = -pkin(1) * t2232 + qJDD(1) * pkin(7) + t2198;
t2258 = t2224 * t2184;
t2257 = t2224 * t2232;
t2256 = qJD(5) + t2213;
t2255 = qJD(6) - t2148;
t2167 = -t2224 * g(3) + t2229 * t2184;
t2241 = qJD(2) * pkin(2) - pkin(8) * t2268;
t2134 = -pkin(2) * t2259 + t2189 * pkin(8) - qJD(2) * t2241 + t2167;
t2235 = qJDD(2) * pkin(2) - t2188 * pkin(8) - t2258 + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2257 - g(3)) * t2229;
t2107 = t2228 * t2134 + t2223 * t2235;
t2158 = pkin(3) * t2180 - qJ(4) * t2182;
t2083 = -pkin(3) * t2270 + t2252 * qJ(4) - t2180 * t2158 + t2218 * t2269 + t2107;
t2168 = -pkin(4) * t2218 - pkin(9) * t2182;
t2073 = -pkin(4) * t2272 + pkin(9) * t2142 + t2168 * t2218 + t2083;
t2106 = -t2223 * t2134 + t2228 * t2235;
t2084 = -t2252 * pkin(3) - qJ(4) * t2270 + t2182 * t2158 + qJDD(4) - t2106;
t2234 = pkin(4) * t2243 + pkin(9) * t2245 + t2084;
t2046 = t2227 * t2073 + t2222 * t2234;
t2219 = t2224 ^ 2;
t2254 = t2219 + t2220;
t2197 = t2225 * g(1) - t2230 * g(2);
t2249 = -qJDD(5) + t2252;
t2045 = -t2222 * t2073 + t2227 * t2234;
t2242 = -t2222 * t2142 - t2227 * t2143;
t2092 = -qJD(5) * t2150 - t2242;
t2248 = -t2150 * t2213 - t2092;
t2247 = -t2221 * t2092 - t2226 * t2249;
t2246 = -t2227 * t2142 + t2222 * t2143;
t2240 = qJDD(1) * pkin(1) + t2197;
t2239 = -qJD(5) * t2152 - qJDD(6) - t2246;
t2079 = (qJD(5) - t2213) * t2152 + t2246;
t2237 = -t2226 * t2092 + t2221 * t2249;
t2146 = t2189 * pkin(2) - t2241 * t2268 + (pkin(8) * t2220 + pkin(7)) * t2232 + t2240;
t2233 = -pkin(3) * t2118 + qJ(4) * t2236 + t2146;
t2059 = -t2142 * pkin(4) - t2272 * pkin(9) + (t2269 + t2168) * t2182 + t2233;
t2231 = qJD(2) ^ 2;
t2205 = t2229 * t2257;
t2203 = -t2231 - t2259;
t2202 = -t2219 * t2232 - t2231;
t2196 = -qJDD(2) + t2205;
t2195 = qJDD(2) + t2205;
t2194 = t2254 * t2232;
t2193 = -qJDD(1) * t2225 - t2230 * t2232;
t2192 = qJDD(1) * t2230 - t2225 * t2232;
t2191 = t2254 * qJDD(1);
t2190 = t2215 - 0.2e1 * t2251;
t2187 = 0.2e1 * t2250 + t2253;
t2183 = t2232 * pkin(7) + t2240;
t2166 = -t2229 * g(3) - t2258;
t2163 = t2196 * t2229 - t2202 * t2224;
t2162 = -t2195 * t2224 + t2203 * t2229;
t2161 = t2196 * t2224 + t2202 * t2229;
t2160 = t2195 * t2229 + t2203 * t2224;
t2140 = -t2271 - t2273;
t2133 = -t2166 * t2224 + t2167 * t2229;
t2132 = t2166 * t2229 + t2167 * t2224;
t2119 = (qJD(3) + t2218) * t2182 + t2244;
t2112 = pkin(5) * t2150 - pkin(10) * t2152;
t2111 = -t2249 - t2264;
t2110 = t2249 - t2264;
t2109 = -t2271 - t2274;
t2105 = -t2273 - t2274;
t2104 = -t2275 - t2276;
t2103 = t2110 * t2227 - t2140 * t2222;
t2102 = t2110 * t2222 + t2140 * t2227;
t2097 = -t2275 - t2277;
t2091 = -t2276 - t2277;
t2086 = t2109 * t2227 - t2111 * t2222;
t2085 = t2109 * t2222 + t2111 * t2227;
t2082 = t2150 * t2256 + t2242;
t2080 = -t2152 * t2256 - t2246;
t2078 = t2182 * t2269 + t2233;
t2077 = -t2106 * t2223 + t2107 * t2228;
t2076 = t2106 * t2228 + t2107 * t2223;
t2075 = t2239 - t2265;
t2074 = -t2239 - t2265;
t2071 = t2102 * t2223 + t2103 * t2228;
t2070 = -t2102 * t2228 + t2103 * t2223;
t2063 = t2137 * t2255 + t2237;
t2062 = -t2137 * t2282 - t2237;
t2061 = -t2139 * t2255 + t2247;
t2060 = t2139 * t2282 - t2247;
t2058 = t2085 * t2223 + t2086 * t2228;
t2057 = -t2085 * t2228 + t2086 * t2223;
t2056 = t2083 * t2228 + t2084 * t2223;
t2055 = t2083 * t2223 - t2084 * t2228;
t2054 = t2080 * t2227 - t2082 * t2222;
t2053 = t2080 * t2222 + t2082 * t2227;
t2052 = t2075 * t2226 - t2104 * t2221;
t2051 = t2075 * t2221 + t2104 * t2226;
t2050 = -t2074 * t2221 + t2097 * t2226;
t2049 = t2074 * t2226 + t2097 * t2221;
t2048 = -t2076 * t2224 + t2077 * t2229;
t2047 = t2076 * t2229 + t2077 * t2224;
t2044 = -t2070 * t2224 + t2071 * t2229;
t2043 = t2070 * t2229 + t2071 * t2224;
t2042 = t2061 * t2226 - t2063 * t2221;
t2041 = t2061 * t2221 + t2063 * t2226;
t2040 = pkin(5) * t2079 + pkin(10) * t2248 + t2059;
t2039 = t2052 * t2227 + t2062 * t2222;
t2038 = t2052 * t2222 - t2062 * t2227;
t2037 = t2050 * t2227 + t2060 * t2222;
t2036 = t2050 * t2222 - t2060 * t2227;
t2035 = -pkin(5) * t2271 - pkin(10) * t2249 - t2150 * t2112 + t2046;
t2034 = pkin(5) * t2249 - pkin(10) * t2271 + t2152 * t2112 - t2045;
t2033 = -t2057 * t2224 + t2058 * t2229;
t2032 = t2057 * t2229 + t2058 * t2224;
t2031 = -t2055 * t2224 + t2056 * t2229;
t2030 = t2055 * t2229 + t2056 * t2224;
t2029 = t2042 * t2227 + t2091 * t2222;
t2028 = t2042 * t2222 - t2091 * t2227;
t2027 = t2053 * t2223 + t2054 * t2228;
t2026 = -t2053 * t2228 + t2054 * t2223;
t2025 = -t2045 * t2222 + t2046 * t2227;
t2024 = t2045 * t2227 + t2046 * t2222;
t2023 = t2038 * t2223 + t2039 * t2228;
t2022 = -t2038 * t2228 + t2039 * t2223;
t2021 = t2035 * t2226 + t2040 * t2221;
t2020 = -t2035 * t2221 + t2040 * t2226;
t2019 = t2036 * t2223 + t2037 * t2228;
t2018 = -t2036 * t2228 + t2037 * t2223;
t2017 = t2028 * t2223 + t2029 * t2228;
t2016 = -t2028 * t2228 + t2029 * t2223;
t2015 = -t2026 * t2224 + t2027 * t2229;
t2014 = t2026 * t2229 + t2027 * t2224;
t2013 = t2024 * t2223 + t2025 * t2228;
t2012 = -t2024 * t2228 + t2025 * t2223;
t2011 = -t2022 * t2224 + t2023 * t2229;
t2010 = t2022 * t2229 + t2023 * t2224;
t2009 = -t2020 * t2221 + t2021 * t2226;
t2008 = t2020 * t2226 + t2021 * t2221;
t2007 = -t2018 * t2224 + t2019 * t2229;
t2006 = t2018 * t2229 + t2019 * t2224;
t2005 = -t2016 * t2224 + t2017 * t2229;
t2004 = t2016 * t2229 + t2017 * t2224;
t2003 = t2009 * t2227 + t2034 * t2222;
t2002 = t2009 * t2222 - t2034 * t2227;
t2001 = -t2012 * t2224 + t2013 * t2229;
t2000 = t2012 * t2229 + t2013 * t2224;
t1999 = t2002 * t2223 + t2003 * t2228;
t1998 = -t2002 * t2228 + t2003 * t2223;
t1997 = -t1998 * t2224 + t1999 * t2229;
t1996 = t1998 * t2229 + t1999 * t2224;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2193, -t2192, 0, -t2197 * t2225 + t2198 * t2230, 0, 0, 0, 0, 0, 0, t2162 * t2230 - t2190 * t2225, t2163 * t2230 + t2187 * t2225, t2191 * t2230 - t2194 * t2225, t2133 * t2230 - t2183 * t2225, 0, 0, 0, 0, 0, 0, t2119 * t2225 + t2293, t2295, t2291, t2048 * t2230 - t2146 * t2225, 0, 0, 0, 0, 0, 0, t2118 * t2225 + t2293, t2291, -t2295, t2031 * t2230 - t2078 * t2225, 0, 0, 0, 0, 0, 0, t2033 * t2230 - t2079 * t2225, t2044 * t2230 + t2225 * t2248, t2015 * t2230 - t2105 * t2225, t2001 * t2230 - t2059 * t2225, 0, 0, 0, 0, 0, 0, t2007 * t2230 - t2049 * t2225, t2011 * t2230 - t2051 * t2225, t2005 * t2230 - t2041 * t2225, t1997 * t2230 - t2008 * t2225; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2192, t2193, 0, t2197 * t2230 + t2198 * t2225, 0, 0, 0, 0, 0, 0, t2162 * t2225 + t2190 * t2230, t2163 * t2225 - t2187 * t2230, t2191 * t2225 + t2194 * t2230, t2133 * t2225 + t2183 * t2230, 0, 0, 0, 0, 0, 0, -t2119 * t2230 + t2294, t2296, t2292, t2048 * t2225 + t2146 * t2230, 0, 0, 0, 0, 0, 0, -t2118 * t2230 + t2294, t2292, -t2296, t2031 * t2225 + t2078 * t2230, 0, 0, 0, 0, 0, 0, t2033 * t2225 + t2079 * t2230, t2044 * t2225 - t2230 * t2248, t2015 * t2225 + t2105 * t2230, t2001 * t2225 + t2059 * t2230, 0, 0, 0, 0, 0, 0, t2007 * t2225 + t2049 * t2230, t2011 * t2225 + t2051 * t2230, t2005 * t2225 + t2041 * t2230, t1997 * t2225 + t2008 * t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2160, t2161, 0, t2132, 0, 0, 0, 0, 0, 0, t2289, -t2087, t2285, t2047, 0, 0, 0, 0, 0, 0, t2289, t2285, t2087, t2030, 0, 0, 0, 0, 0, 0, t2032, t2043, t2014, t2000, 0, 0, 0, 0, 0, 0, t2006, t2010, t2004, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2232, -qJDD(1), 0, t2198, 0, 0, 0, 0, 0, 0, t2162, t2163, t2191, t2133, 0, 0, 0, 0, 0, 0, t2290, t2100, t2286, t2048, 0, 0, 0, 0, 0, 0, t2290, t2286, -t2100, t2031, 0, 0, 0, 0, 0, 0, t2033, t2044, t2015, t2001, 0, 0, 0, 0, 0, 0, t2007, t2011, t2005, t1997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2232, 0, t2197, 0, 0, 0, 0, 0, 0, t2190, -t2187, t2194, t2183, 0, 0, 0, 0, 0, 0, -t2119, -t2236, t2145, t2146, 0, 0, 0, 0, 0, 0, -t2118, t2145, t2236, t2078, 0, 0, 0, 0, 0, 0, t2079, -t2248, t2105, t2059, 0, 0, 0, 0, 0, 0, t2049, t2051, t2041, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2160, t2161, 0, t2132, 0, 0, 0, 0, 0, 0, t2289, -t2087, t2285, t2047, 0, 0, 0, 0, 0, 0, t2289, t2285, t2087, t2030, 0, 0, 0, 0, 0, 0, t2032, t2043, t2014, t2000, 0, 0, 0, 0, 0, 0, t2006, t2010, t2004, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2203, t2196, t2215, t2167, 0, 0, 0, 0, 0, 0, t2287, -t2115, t2278, t2077, 0, 0, 0, 0, 0, 0, t2287, t2278, t2115, t2056, 0, 0, 0, 0, 0, 0, t2058, t2071, t2027, t2013, 0, 0, 0, 0, 0, 0, t2019, t2023, t2017, t1999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2195, t2202, -t2253, t2166, 0, 0, 0, 0, 0, 0, t2288, -t2113, t2279, t2076, 0, 0, 0, 0, 0, 0, t2288, t2279, t2113, t2055, 0, 0, 0, 0, 0, 0, t2057, t2070, t2026, t2012, 0, 0, 0, 0, 0, 0, t2018, t2022, t2016, t1998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2190, t2187, -t2194, -t2183, 0, 0, 0, 0, 0, 0, t2119, t2236, -t2145, -t2146, 0, 0, 0, 0, 0, 0, t2118, -t2145, -t2236, -t2078, 0, 0, 0, 0, 0, 0, -t2079, t2248, -t2105, -t2059, 0, 0, 0, 0, 0, 0, -t2049, -t2051, -t2041, -t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2280, -t2155, t2238, t2107, 0, 0, 0, 0, 0, 0, t2280, t2238, t2155, t2083, 0, 0, 0, 0, 0, 0, t2086, t2103, t2054, t2025, 0, 0, 0, 0, 0, 0, t2037, t2039, t2029, t2003; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2243, t2281, t2245, t2106, 0, 0, 0, 0, 0, 0, -t2243, t2245, -t2281, -t2084, 0, 0, 0, 0, 0, 0, -t2085, -t2102, -t2053, -t2024, 0, 0, 0, 0, 0, 0, -t2036, -t2038, -t2028, -t2002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2119, t2236, -t2145, -t2146, 0, 0, 0, 0, 0, 0, t2118, -t2145, -t2236, -t2078, 0, 0, 0, 0, 0, 0, -t2079, t2248, -t2105, -t2059, 0, 0, 0, 0, 0, 0, -t2049, -t2051, -t2041, -t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2280, t2238, t2155, t2083, 0, 0, 0, 0, 0, 0, t2086, t2103, t2054, t2025, 0, 0, 0, 0, 0, 0, t2037, t2039, t2029, t2003; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2118, -t2145, -t2236, -t2078, 0, 0, 0, 0, 0, 0, -t2079, t2248, -t2105, -t2059, 0, 0, 0, 0, 0, 0, -t2049, -t2051, -t2041, -t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2243, -t2245, t2281, t2084, 0, 0, 0, 0, 0, 0, t2085, t2102, t2053, t2024, 0, 0, 0, 0, 0, 0, t2036, t2038, t2028, t2002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2109, t2110, t2080, t2046, 0, 0, 0, 0, 0, 0, t2050, t2052, t2042, t2009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2111, t2140, t2082, t2045, 0, 0, 0, 0, 0, 0, -t2060, -t2062, -t2091, -t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2079, -t2248, t2105, t2059, 0, 0, 0, 0, 0, 0, t2049, t2051, t2041, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2097, t2075, t2061, t2021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2074, t2104, t2063, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2060, t2062, t2091, t2034;];
f_new_reg  = t1;
