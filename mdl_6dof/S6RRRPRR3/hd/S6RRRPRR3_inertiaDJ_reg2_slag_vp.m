% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR3_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:13:23
% EndTime: 2019-03-09 18:13:34
% DurationCPUTime: 3.88s
% Computational Cost: add. (6851->306), mult. (14232->495), div. (0->0), fcn. (13580->8), ass. (0->166)
t110 = sin(qJ(2));
t214 = cos(qJ(3));
t216 = -pkin(8) - pkin(7);
t167 = t216 * t214;
t112 = cos(qJ(2));
t212 = sin(qJ(3));
t182 = t212 * t112;
t52 = -t110 * t167 - t216 * t182;
t175 = t212 * qJD(3);
t227 = -t212 * qJD(2) - t175;
t108 = sin(qJ(6));
t106 = t108 ^ 2;
t111 = cos(qJ(6));
t107 = t111 ^ 2;
t197 = t106 - t107;
t220 = t197 * qJD(6);
t135 = -t214 * t110 - t182;
t119 = (qJD(2) + qJD(3)) * t135;
t95 = t214 * t112;
t159 = t212 * t110 - t95;
t177 = t214 * qJD(3);
t132 = t214 * qJD(2) + t177;
t206 = t227 * t110;
t219 = -t112 * t132 - t206;
t166 = t216 * t212;
t144 = qJD(2) * t166;
t146 = qJD(2) * t167;
t32 = t52 * qJD(3) - t110 * t146 - t112 * t144;
t75 = t216 * t95;
t33 = (qJD(3) * t166 + t144) * t110 - qJD(3) * t75 - t112 * t146;
t53 = t110 * t166 - t75;
t226 = 0.2e1 * t53 * t119 - 0.2e1 * t135 * t33 + 0.2e1 * t32 * t159 - 0.2e1 * t219 * t52;
t97 = -t112 * pkin(2) - pkin(1);
t45 = t159 * pkin(3) + qJ(4) * t135 + t97;
t35 = -t159 * pkin(4) - t45;
t109 = sin(qJ(5));
t213 = cos(qJ(5));
t138 = t213 * t159;
t50 = -t109 * t135 - t138;
t139 = t109 * t159;
t51 = -t135 * t213 + t139;
t118 = t50 * pkin(5) - t51 * pkin(10) + t35;
t103 = qJD(5) * t109;
t115 = pkin(9) * t219 + t33;
t130 = t135 * qJD(3);
t120 = -qJD(2) * t135 - t130;
t116 = pkin(9) * t120 - t32;
t131 = pkin(9) * t135 + t52;
t127 = t213 * t131;
t43 = t159 * pkin(9) + t53;
t8 = -qJD(5) * t127 + t43 * t103 - t109 * t115 - t213 * t116;
t225 = -qJD(6) * t118 + t8;
t224 = t219 * t159;
t223 = t106 + t107;
t113 = 2 * qJD(4);
t171 = pkin(2) * t177;
t222 = t113 + t171;
t129 = t109 * t131;
t28 = t213 * t43 + t129;
t13 = -t108 * t28 + t111 * t118;
t14 = t108 * t118 + t111 * t28;
t221 = -t108 * t13 + t111 * t14;
t104 = qJD(5) * t213;
t218 = -0.2e1 * t220;
t217 = -pkin(3) - pkin(4);
t27 = t109 * t43 - t127;
t9 = qJD(5) * t129 + t43 * t104 + t109 * t116 - t213 * t115;
t215 = t27 * t9;
t143 = t171 + qJD(4);
t189 = t214 * pkin(2);
t96 = -t189 - pkin(3);
t150 = -pkin(4) + t96;
t188 = t212 * pkin(2);
t94 = t188 + qJ(4);
t207 = t109 * t150 + t213 * t94;
t170 = pkin(2) * t175;
t86 = t213 * t170;
t42 = qJD(5) * t207 + t109 * t143 - t86;
t211 = t27 * t42;
t202 = t213 * qJ(4) + t109 * t217;
t60 = t109 * qJD(4) + qJD(5) * t202;
t210 = t27 * t60;
t21 = -qJD(5) * t138 - t103 * t135 - t109 * t120 + t213 * t219;
t209 = t51 * t21;
t165 = t213 * t217;
t203 = t213 * qJD(4) + qJD(5) * t165;
t201 = qJD(6) * t27;
t199 = t108 * t111;
t102 = qJD(6) * t108;
t196 = qJD(6) * t111;
t195 = t110 * qJD(2);
t194 = t112 * qJD(2);
t22 = qJD(5) * t139 - t104 * t135 - t109 * t219 - t213 * t120;
t193 = 0.2e1 * t50 * t22;
t192 = -0.2e1 * pkin(1) * qJD(2);
t134 = t213 * t150;
t191 = qJD(5) * t134 + t109 * t170 + t213 * t143;
t190 = t9 * t213;
t187 = pkin(2) * t195;
t186 = t42 * t213;
t185 = t60 * t213;
t184 = t51 * t102;
t183 = t51 * t196;
t181 = t108 * t196;
t180 = t110 * t194;
t179 = -t53 * t32 + t52 * t33;
t178 = qJD(6) * t213;
t57 = -t109 * t94 + t134;
t55 = pkin(5) - t57;
t79 = -t109 * qJ(4) + t165;
t76 = pkin(5) - t79;
t174 = qJD(6) * (-t55 - t76);
t41 = t94 * t103 - t191;
t26 = t223 * t41;
t59 = qJ(4) * t103 - t203;
t37 = t223 * t59;
t173 = 0.4e1 * t51 * t199;
t172 = t109 * t223;
t49 = t51 ^ 2;
t169 = t49 * t181;
t164 = pkin(5) * t21 - pkin(10) * t22;
t163 = pkin(5) * t51 + pkin(10) * t50;
t36 = t42 * t111;
t162 = -t55 * t102 + t36;
t54 = t60 * t111;
t161 = -t76 * t102 + t54;
t160 = -t27 * t21 + t9 * t51;
t30 = -pkin(3) * t119 + qJ(4) * t219 + qJD(4) * t135 + t187;
t19 = -pkin(4) * t120 - t30;
t114 = t22 * pkin(5) + t21 * pkin(10) + t19;
t3 = t28 * t102 - t108 * t114 + t225 * t111;
t4 = t225 * t108 + t111 * t114 - t28 * t196;
t158 = -t4 * t108 - t3 * t111;
t157 = t21 * t50 - t51 * t22;
t156 = t41 * t50 + t42 * t51;
t56 = -pkin(10) + t207;
t154 = t50 * t56 - t51 * t55;
t153 = t59 * t50 + t60 * t51;
t77 = -pkin(10) + t202;
t152 = t50 * t77 - t51 * t76;
t151 = t135 * t170;
t149 = t108 * t14 + t111 * t13;
t142 = t109 * t50 + t213 * t51;
t141 = -t42 * t108 - t55 * t196;
t140 = -t60 * t108 - t76 * t196;
t136 = t223 * t213;
t124 = -qJD(6) * t149 + t158;
t123 = -t21 * t55 - t22 * t56 + t156 - t201;
t122 = -t21 * t76 - t22 * t77 + t153 - t201;
t121 = t213 * t21 - t109 * t22 + (t109 * t51 - t213 * t50) * qJD(5);
t100 = pkin(5) * t196;
t99 = pkin(5) * t102;
t93 = -0.2e1 * t170;
t88 = -0.2e1 * t181;
t87 = 0.2e1 * t181;
t65 = t111 * t103 + t108 * t178;
t64 = t108 * t103 - t111 * t178;
t63 = t136 * qJD(5);
t39 = 0.2e1 * t135 * t219;
t17 = t108 * t22 + t50 * t196;
t16 = t50 * t102 - t111 * t22;
t15 = t21 * t199 + t51 * t220;
t10 = qJD(6) * t173 - t197 * t21;
t7 = t9 * t111;
t1 = -t14 * t102 - t13 * t196 + t158;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t180, 0.2e1 * (-t110 ^ 2 + t112 ^ 2) * qJD(2), 0, -0.2e1 * t180, 0, 0, t110 * t192, t112 * t192, 0, 0, t39, -0.2e1 * t119 * t135 + 0.2e1 * t224, 0, -0.2e1 * t159 * t119, 0, 0, -0.2e1 * t97 * t130 + 0.2e1 * (t110 * pkin(2) * t159 - t97 * t135) * qJD(2), -0.2e1 * t135 * t187 - 0.2e1 * t219 * t97, t226, 0.2e1 * t97 * t187 + 0.2e1 * t179, t39, 0, -0.2e1 * t120 * t135 - 0.2e1 * t224, 0, 0, 0.2e1 * t159 * t120, 0.2e1 * t45 * t120 + 0.2e1 * t30 * t159, t226, 0.2e1 * t135 * t30 + 0.2e1 * t219 * t45, 0.2e1 * t45 * t30 + 0.2e1 * t179, -0.2e1 * t209, 0.2e1 * t157, 0, t193, 0, 0, 0.2e1 * t19 * t50 + 0.2e1 * t35 * t22, 0.2e1 * t19 * t51 - 0.2e1 * t35 * t21, -0.2e1 * t28 * t22 + 0.2e1 * t8 * t50 + 0.2e1 * t160, 0.2e1 * t35 * t19 - 0.2e1 * t28 * t8 + 0.2e1 * t215, -0.2e1 * t107 * t209 - 0.2e1 * t169, t21 * t173 + 0.2e1 * t220 * t49, -0.2e1 * t157 * t111 - 0.2e1 * t50 * t184, -0.2e1 * t106 * t209 + 0.2e1 * t169, 0.2e1 * t157 * t108 - 0.2e1 * t50 * t183, t193, 0.2e1 * t160 * t108 + 0.2e1 * t13 * t22 + 0.2e1 * t27 * t183 + 0.2e1 * t4 * t50, 0.2e1 * t111 * t160 - 0.2e1 * t14 * t22 - 0.2e1 * t184 * t27 + 0.2e1 * t3 * t50, 0.2e1 * t149 * t21 + 0.2e1 * (-qJD(6) * t221 + t108 * t3 - t111 * t4) * t51, 0.2e1 * t13 * t4 - 0.2e1 * t14 * t3 + 0.2e1 * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, 0, -t195, 0, -pkin(7) * t194, pkin(7) * t195, 0, 0, 0, 0, -t219, 0, t119, 0, -t33, t32, t119 * t188 - t159 * t171 + t189 * t219 - t151 (-t212 * t32 - t214 * t33 + (t212 * t52 + t214 * t53) * qJD(3)) * pkin(2), 0, -t219, 0, 0, t120, 0, -t33, t94 * t119 - t143 * t159 - t219 * t96 - t151, -t32, t53 * t143 + t52 * t170 - t32 * t94 + t33 * t96, 0, 0, t21, 0, t22, 0, t9, -t8, -t207 * t22 + t57 * t21 + t156, -t207 * t8 - t28 * t41 - t9 * t57 + t211, t15, t10, -t17, -t15, t16, 0, t123 * t108 - t154 * t196 + t7 (qJD(6) * t154 - t9) * t108 + t123 * t111, -t1, t124 * t56 - t221 * t41 + t9 * t55 + t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, -0.2e1 * t171, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, 0.2e1 * t143, 0.2e1 * t94 * t143 + 0.2e1 * t96 * t170, 0, 0, 0, 0, 0, 0, 0.2e1 * t42, -0.2e1 * t41, 0, -0.2e1 * t207 * t41 - 0.2e1 * t57 * t42, t87, t218, 0, t88, 0, 0, 0.2e1 * t162, 0.2e1 * t141, 0.2e1 * t26, -0.2e1 * t26 * t56 + 0.2e1 * t55 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, 0, t119, 0, -t33, t32, 0, 0, 0, -t219, 0, 0, t120, 0, -t33, t95 * qJD(4) - pkin(3) * t206 + (-t132 * qJ(4) - t212 * qJD(4)) * t110 + (-pkin(3) * t132 + t227 * qJ(4)) * t112, -t32, -t33 * pkin(3) - t32 * qJ(4) + t53 * qJD(4), 0, 0, t21, 0, t22, 0, t9, -t8, -t202 * t22 + t79 * t21 + t153, -t202 * t8 - t28 * t59 - t9 * t79 + t210, t15, t10, -t17, -t15, t16, 0, t122 * t108 - t152 * t196 + t7 (qJD(6) * t152 - t9) * t108 + t122 * t111, -t1, t124 * t77 - t221 * t59 + t9 * t76 + t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, -t171, 0, 0, 0, 0, 0, 0, 0, 0, -t170, 0, t222, -pkin(3) * t170 + t143 * qJ(4) + t94 * qJD(4), 0, 0, 0, 0, 0, 0, -t86 + t222 * t109 + (t207 + t202) * qJD(5) (-qJ(4) - t94) * t103 + t191 + t203, 0, -t202 * t41 - t207 * t59 - t42 * t79 - t57 * t60, t87, t218, 0, t88, 0, 0, t108 * t174 + t36 + t54 (-t42 - t60) * t108 + t111 * t174, t223 * (t41 + t59) t42 * t76 + t55 * t60 + t223 * (-t41 * t77 - t56 * t59); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, qJ(4) * t113, 0, 0, 0, 0, 0, 0, 0.2e1 * t60, -0.2e1 * t59, 0, -0.2e1 * t202 * t59 - 0.2e1 * t79 * t60, t87, t218, 0, t88, 0, 0, 0.2e1 * t161, 0.2e1 * t140, 0.2e1 * t37, -0.2e1 * t37 * t77 + 0.2e1 * t76 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, 0, t33, 0, 0, 0, 0, 0, 0, 0, 0, t121, -t190 - t8 * t109 + (t109 * t27 + t213 * t28) * qJD(5), 0, 0, 0, 0, 0, 0, t108 * t121 - t142 * t196, t102 * t142 + t111 * t121, 0, -t190 + (qJD(5) * t27 + t124) * t109 + t221 * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, 0, 0, 0, 0, 0, 0, t103, t104, 0, -t186 - t41 * t109 + (-t109 * t57 + t207 * t213) * qJD(5), 0, 0, 0, 0, 0, 0, t65, -t64, -t63, -t186 - t41 * t172 + (t109 * t55 + t136 * t56) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, t104, 0, -t185 - t59 * t109 + (-t109 * t79 + t202 * t213) * qJD(5), 0, 0, 0, 0, 0, 0, t65, -t64, -t63, -t185 - t59 * t172 + (t109 * t76 + t136 * t77) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (-t213 + t136) * t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, 0, -t22, 0, -t9, t8, 0, 0, -t15, -t10, t17, t15, -t16, 0, -t7 + t164 * t108 + (t108 * t27 - t163 * t111) * qJD(6), t9 * t108 + t164 * t111 + (t108 * t163 + t111 * t27) * qJD(6), t1, -t9 * pkin(5) + pkin(10) * t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t41, 0, 0, t88, -t218, 0, t87, 0, 0, -t162 + t99, t100 - t141, -t26, -t42 * pkin(5) - pkin(10) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, t59, 0, 0, t88, -t218, 0, t87, 0, 0, -t161 + t99, t100 - t140, -t37, -t60 * pkin(5) - pkin(10) * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, -t104, 0, 0, 0, 0, 0, 0, 0, 0, -t65, t64, t63 (-pkin(5) * t109 + pkin(10) * t136) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, t218, 0, t88, 0, 0, -0.2e1 * t99, -0.2e1 * t100, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111 * t21 - t184, 0, t108 * t21 - t183, t22, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t196, 0, t102, 0, t108 * t41 - t56 * t196, t102 * t56 + t111 * t41, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t196, 0, t102, 0, t108 * t59 - t77 * t196, t102 * t77 + t111 * t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108 * t104 - t109 * t196, t102 * t109 - t104 * t111, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, 0, -t102, 0, -pkin(10) * t196, pkin(10) * t102, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t2;
