% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR3_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR3_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR3_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR3_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:13:23
% EndTime: 2019-03-09 18:13:40
% DurationCPUTime: 7.01s
% Computational Cost: add. (14320->532), mult. (33915->646), div. (0->0), fcn. (24236->8), ass. (0->259)
t212 = sin(qJ(6));
t216 = cos(qJ(6));
t217 = cos(qJ(2));
t351 = cos(qJ(3));
t199 = t351 * t217;
t261 = qJD(1) * t199;
t214 = sin(qJ(3));
t215 = sin(qJ(2));
t302 = qJD(1) * t215;
t282 = t214 * t302;
t154 = -t261 + t282;
t172 = t214 * t217 + t215 * t351;
t156 = t172 * qJD(1);
t213 = sin(qJ(5));
t350 = cos(qJ(5));
t109 = t154 * t213 + t156 * t350;
t358 = -t154 * t350 + t156 * t213;
t201 = -pkin(2) * t217 - pkin(1);
t186 = qJD(1) * t201;
t94 = pkin(3) * t154 - qJ(4) * t156 + t186;
t75 = -pkin(4) * t154 - t94;
t38 = pkin(5) * t358 - pkin(10) * t109 + t75;
t208 = qJD(2) + qJD(3);
t295 = qJD(5) - t208;
t150 = t156 * pkin(9);
t218 = -pkin(3) - pkin(4);
t352 = -pkin(8) - pkin(7);
t187 = t352 * t215;
t178 = qJD(1) * t187;
t165 = qJD(2) * pkin(2) + t178;
t188 = t352 * t217;
t180 = qJD(1) * t188;
t310 = t214 * t180;
t117 = t165 * t351 + t310;
t357 = qJD(4) - t117;
t73 = t208 * t218 - t150 + t357;
t205 = t208 * qJ(4);
t163 = t351 * t180;
t118 = t165 * t214 - t163;
t347 = t154 * pkin(9);
t238 = t118 + t347;
t79 = t205 + t238;
t45 = t213 * t73 + t350 * t79;
t42 = pkin(10) * t295 + t45;
t22 = t212 * t38 + t216 * t42;
t305 = t208 * t261;
t112 = t208 * t282 - t305;
t286 = qJD(2) * t352;
t262 = qJD(1) * t286;
t166 = t215 * t262;
t167 = t217 * t262;
t270 = t214 * t166 - t167 * t351;
t71 = qJD(3) * t118 + t270;
t227 = t112 * pkin(9) + t71;
t279 = qJD(5) * t350;
t299 = qJD(5) * t213;
t367 = t208 * t172;
t113 = t367 * qJD(1);
t204 = t208 * qJD(4);
t278 = t351 * qJD(3);
t300 = qJD(3) * t214;
t264 = -t165 * t278 - t166 * t351 - t167 * t214 - t180 * t300;
t68 = t204 - t264;
t51 = pkin(9) * t113 + t68;
t246 = -t213 * t227 - t279 * t73 + t299 * t79 - t350 * t51;
t240 = t112 * t350 - t213 * t113 + t156 * t299;
t229 = -t154 * t279 + t240;
t293 = qJD(1) * qJD(2);
t277 = t215 * t293;
t265 = pkin(2) * t277;
t60 = pkin(3) * t113 + qJ(4) * t112 - qJD(4) * t156 + t265;
t39 = -t113 * pkin(4) - t60;
t271 = -t213 * t112 - t113 * t350;
t48 = qJD(5) * t109 + t271;
t8 = t48 * pkin(5) + pkin(10) * t229 + t39;
t3 = -qJD(6) * t22 + t212 * t246 + t216 * t8;
t1 = t3 * t212;
t252 = t212 * t42 - t216 * t38;
t254 = t212 * t22 - t216 * t252;
t297 = qJD(6) * t216;
t298 = qJD(6) * t212;
t379 = t22 * t298 - t252 * t297 + t254 * t358 + t1;
t366 = qJD(6) + t358;
t89 = t109 * t216 + t212 * t295;
t324 = t89 * t366;
t251 = t216 * t295;
t33 = -qJD(6) * t251 + t109 * t298 + t216 * t229;
t34 = qJD(6) * t89 - t212 * t229;
t87 = t109 * t212 - t251;
t342 = t366 * t87;
t6 = (t33 + t342) * t216 + (t34 + t324) * t212;
t2 = -qJD(6) * t252 + t212 * t8 - t216 * t246;
t346 = t2 * t216;
t376 = -t346 + t379;
t336 = t212 * t33;
t372 = t366 * t216;
t375 = t372 * t89 - t336;
t335 = t212 * t48;
t374 = -t109 * t89 + t366 * t372 + t335;
t44 = -t213 * t79 + t350 * t73;
t41 = -pkin(5) * t295 - t44;
t273 = t366 * t41;
t373 = t208 * t367;
t81 = -t156 * t208 + t113;
t268 = t214 * t215 - t199;
t371 = t113 * t268 + t154 * t367;
t301 = qJD(2) * t215;
t355 = -t217 * (qJD(2) * t351 + t278) + t214 * t301 + t215 * t300;
t370 = -t112 * t268 + t172 * t113 - t154 * t355 + t156 * t367;
t369 = t295 * t44;
t320 = t366 * t109;
t368 = t109 * t358;
t365 = t109 ^ 2 - t358 ^ 2;
t275 = t213 * t51 - t227 * t350;
t11 = qJD(5) * t45 + t275;
t9 = t11 * t216;
t280 = -t109 * t252 + t9;
t341 = t11 * t212;
t255 = -t109 * t22 - t341;
t249 = t75 * t109 + t275;
t330 = t216 * t48;
t364 = t109 * t87 + t330;
t237 = -t358 * t75 - t246;
t36 = t109 * t208 + t271;
t362 = t295 * t358 - t229;
t67 = pkin(5) * t109 + pkin(10) * t358;
t361 = -0.2e1 * t293;
t126 = t178 * t214 - t163;
t248 = t126 + t347;
t127 = t178 * t351 + t310;
t93 = t150 + t127;
t57 = t213 * t248 + t350 * t93;
t200 = -pkin(2) * t351 - pkin(3);
t197 = -pkin(4) + t200;
t198 = pkin(2) * t214 + qJ(4);
t134 = t197 * t350 - t198 * t213;
t193 = pkin(2) * t278 + qJD(4);
t291 = pkin(2) * t300;
t96 = qJD(5) * t134 + t193 * t350 + t213 * t291;
t344 = t96 - t57;
t135 = t197 * t213 + t198 * t350;
t343 = t135 * qJD(5) + (t248 - t291) * t350 + (t193 - t93) * t213;
t181 = -qJ(4) * t213 + t218 * t350;
t139 = qJD(4) * t350 + qJD(5) * t181;
t86 = t150 + t117;
t55 = t213 * t238 + t350 * t86;
t322 = t139 - t55;
t182 = qJ(4) * t350 + t213 * t218;
t321 = t182 * qJD(5) + t350 * t238 + (qJD(4) - t86) * t213;
t131 = t187 * t214 - t188 * t351;
t354 = t295 ^ 2;
t353 = t156 ^ 2;
t349 = pkin(4) * t156;
t130 = -t187 * t351 - t214 * t188;
t100 = -pkin(9) * t172 + t130;
t101 = pkin(9) * t268 + t131;
t64 = -t100 * t350 + t101 * t213;
t348 = t11 * t64;
t345 = t89 * t87;
t245 = t350 * t268;
t122 = t172 * t213 - t245;
t340 = t122 * t48;
t339 = t130 * t71;
t58 = -qJD(5) * t245 + t172 * t299 - t213 * t367 + t350 * t355;
t334 = t212 * t58;
t333 = t212 * t87;
t332 = t212 * t89;
t331 = t216 * t34;
t329 = t216 * t58;
t328 = t216 * t87;
t327 = t216 * t89;
t179 = t215 * t286;
t263 = t217 * t286;
t76 = t179 * t351 + t187 * t278 + t188 * t300 + t214 * t263;
t326 = t76 * t208;
t269 = t214 * t179 - t263 * t351;
t77 = qJD(3) * t131 + t269;
t325 = t77 * t208;
t323 = t94 * t156;
t319 = t366 * t212;
t315 = t117 * t208;
t314 = t156 * t154;
t312 = t186 * t156;
t220 = qJD(1) ^ 2;
t309 = t217 * t220;
t219 = qJD(2) ^ 2;
t308 = t219 * t215;
t307 = t219 * t217;
t306 = -t127 + t193;
t114 = pkin(3) * t156 + qJ(4) * t154;
t303 = t215 ^ 2 - t217 ^ 2;
t290 = pkin(2) * t301;
t289 = pkin(2) * t302;
t288 = t11 * t350;
t287 = t215 * t309;
t285 = t212 * t350;
t284 = t216 * t350;
t283 = t350 * t208;
t91 = t154 ^ 2 - t353;
t84 = -t114 - t349;
t43 = -t67 + t84;
t40 = t43 - t289;
t27 = -t212 * t57 + t216 * t40;
t276 = t212 * t96 + t27;
t272 = pkin(1) * t361;
t115 = pkin(3) * t268 - qJ(4) * t172 + t201;
t260 = t217 * t277;
t259 = -t126 + t291;
t256 = -t109 * t45 + t358 * t44;
t253 = -t212 * t252 - t216 * t22;
t250 = t213 * t268;
t123 = t172 * t350 + t250;
t90 = -pkin(4) * t268 - t115;
t49 = pkin(5) * t122 - pkin(10) * t123 + t90;
t65 = t100 * t213 + t101 * t350;
t31 = -t212 * t65 + t216 * t49;
t32 = t212 * t49 + t216 * t65;
t99 = t289 + t114;
t244 = -pkin(10) * t48 + t273;
t243 = -t109 * t213 + t350 * t358;
t66 = pkin(3) * t367 + qJ(4) * t355 - qJD(4) * t172 + t290;
t242 = -t154 * t94 - t264;
t241 = t154 * t186 + t264;
t133 = -pkin(10) + t135;
t236 = -t133 * t48 - t366 * t96 - t273;
t177 = -pkin(10) + t182;
t235 = -t139 * t366 - t177 * t48 - t273;
t234 = -t130 * t112 - t113 * t131 - t154 * t76 + t77 * t156 + t71 * t172;
t233 = -qJD(6) * t254 - t1 + t346;
t230 = -t336 - t331 + (t327 + t333) * qJD(6);
t226 = -t270 + (-qJD(3) + t208) * t118;
t222 = t126 * t208 + (t163 + (-pkin(2) * t208 - t165) * t214) * qJD(3) - t270;
t50 = -pkin(4) * t367 - t66;
t221 = pkin(9) * t355 + t187 * t300 - t188 * t278 + t269;
t176 = pkin(5) - t181;
t132 = pkin(5) - t134;
t129 = t156 * t212 + t216 * t283;
t128 = t156 * t216 - t212 * t283;
t116 = t355 * t208;
t103 = t205 + t118;
t98 = -pkin(3) * t208 + t357;
t80 = t305 + (t154 - t282) * t208;
t78 = -t99 - t349;
t63 = pkin(9) * t367 + t76;
t61 = -t112 * t172 - t156 * t355;
t59 = qJD(5) * t250 + t172 * t279 - t213 * t355 - t350 * t367;
t30 = t212 * t67 + t216 * t44;
t29 = -t212 * t44 + t216 * t67;
t28 = t212 * t40 + t216 * t57;
t26 = t212 * t43 + t216 * t55;
t25 = -t212 * t55 + t216 * t43;
t24 = qJD(5) * t65 + t213 * t63 - t221 * t350;
t23 = t100 * t279 - t101 * t299 + t213 * t221 + t350 * t63;
t16 = t59 * pkin(5) + t58 * pkin(10) + t50;
t15 = -t333 * t366 + t331;
t12 = t319 * t366 - t364;
t5 = -qJD(6) * t32 + t16 * t216 - t212 * t23;
t4 = qJD(6) * t31 + t16 * t212 + t216 * t23;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t260, t303 * t361, t307, -0.2e1 * t260, -t308, 0, -pkin(7) * t307 + t215 * t272, pkin(7) * t308 + t217 * t272, 0, 0, t61, -t370, -t116, t371, -t373, 0, t201 * t113 + t154 * t290 + t186 * t367 + t265 * t268 - t325, -t201 * t112 + t156 * t290 + t172 * t265 - t186 * t355 - t326, t117 * t355 - t118 * t367 + t264 * t268 + t234, -t117 * t77 + t118 * t76 - t131 * t264 + 0.2e1 * t186 * t290 + t339, t61, -t116, t370, 0, t373, t371, t115 * t113 + t66 * t154 + t268 * t60 + t367 * t94 - t325, -t103 * t367 - t268 * t68 - t355 * t98 + t234, t112 * t115 - t156 * t66 - t172 * t60 + t355 * t94 + t326, t103 * t76 + t115 * t60 + t131 * t68 + t66 * t94 + t77 * t98 + t339, -t109 * t58 - t123 * t229, -t109 * t59 + t122 * t229 - t123 * t48 + t358 * t58, -t58 * t295, t358 * t59 + t340, -t59 * t295, 0, t122 * t39 - t24 * t295 + t358 * t50 + t48 * t90 + t59 * t75, t109 * t50 + t123 * t39 - t229 * t90 - t23 * t295 - t58 * t75, t109 * t24 + t11 * t123 + t122 * t246 - t229 * t64 - t23 * t358 + t44 * t58 - t45 * t59 - t48 * t65, t23 * t45 - t24 * t44 - t246 * t65 + t39 * t90 + t50 * t75 + t348, -t58 * t327 + (-t216 * t33 - t298 * t89) * t123 (t328 + t332) * t58 + (t336 - t331 + (-t327 + t333) * qJD(6)) * t123, t123 * t330 - t122 * t33 + t59 * t89 + (-t123 * t298 - t329) * t366, -t58 * t333 + (t212 * t34 + t297 * t87) * t123, -t123 * t335 - t122 * t34 - t59 * t87 + (-t123 * t297 + t334) * t366, t366 * t59 + t340, -t41 * t334 + t366 * t5 + t122 * t3 - t252 * t59 + t24 * t87 + t31 * t48 + t34 * t64 + (t297 * t41 + t341) * t123, -t41 * t329 - t366 * t4 - t122 * t2 - t22 * t59 + t24 * t89 - t32 * t48 - t33 * t64 + (-t298 * t41 + t9) * t123, t31 * t33 - t32 * t34 - t4 * t87 - t5 * t89 + t254 * t58 + (qJD(6) * t253 - t2 * t212 - t216 * t3) * t123, t2 * t32 + t22 * t4 + t24 * t41 - t252 * t5 + t3 * t31 + t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t287, t303 * t220, 0, t287, 0, 0, t220 * pkin(1) * t215, pkin(1) * t309, 0, 0, t314, -t91, t80, -t314, -t81, 0, -t154 * t289 + t222 - t312, t127 * t208 + (-t156 * t302 - t208 * t278) * pkin(2) + t241 (t118 - t126) * t156 + (-t117 + t127) * t154 + (t351 * t112 - t113 * t214 + (-t154 * t351 + t156 * t214) * qJD(3)) * pkin(2), t117 * t126 - t118 * t127 + (-t186 * t302 - t351 * t71 - t214 * t264 + (-t117 * t214 + t118 * t351) * qJD(3)) * pkin(2), t314, t80, t91, 0, t81, -t314, -t99 * t154 + t222 - t323, -t112 * t200 - t113 * t198 + (t103 + t259) * t156 + (t98 - t306) * t154, t156 * t99 + t208 * t306 + t204 + t242, t103 * t306 + t198 * t68 + t200 * t71 + t259 * t98 - t94 * t99, -t368, -t365, -t362, t368, t36, 0, -t78 * t358 + (t45 - t343) * qJD(5) + t249 + t343 * t208, -t78 * t109 - t295 * t344 + t237, t109 * t343 + t134 * t229 - t135 * t48 - t344 * t358 + t256, -t11 * t134 - t135 * t246 - t343 * t44 + t344 * t45 - t75 * t78, -t375, t6, -t374, t15, t12, t320, t132 * t34 + t343 * t87 + (-t133 * t297 - t27) * t366 + t236 * t212 + t280, -t132 * t33 + t343 * t89 + (t133 * t298 + t28) * t366 + t236 * t216 + t255, t28 * t87 + t276 * t89 + (-t87 * t96 - t2) * t216 + t230 * t133 + t379, t11 * t132 + t343 * t41 + (t216 * t96 - t28) * t22 + t276 * t252 + t233 * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, -t91, t80, -t314, -t81, 0, t226 - t312, t241 + t315, 0, 0, t314, t80, t91, 0, t81, -t314, -t114 * t154 + t226 - t323, pkin(3) * t112 - qJ(4) * t113 + (t103 - t118) * t156 + (t98 - t357) * t154, t114 * t156 + 0.2e1 * t204 + t242 - t315, -pkin(3) * t71 + qJ(4) * t68 + t103 * t357 - t114 * t94 - t118 * t98, -t368, -t365, -t362, t368, t36, 0, -t84 * t358 + (t45 - t321) * qJD(5) + t249 + t321 * t208, -t84 * t109 - t295 * t322 + t237, t109 * t321 + t181 * t229 - t182 * t48 - t322 * t358 + t256, -t11 * t181 - t182 * t246 - t321 * t44 + t322 * t45 - t75 * t84, -t375, t6, -t374, t15, t12, t320, t176 * t34 + t321 * t87 + (-t177 * t297 - t25) * t366 + t235 * t212 + t280, -t176 * t33 + t321 * t89 + (t177 * t298 + t26) * t366 + t235 * t216 + t255, t25 * t89 + t26 * t87 + (-t328 + t332) * t139 + t230 * t177 + t376, t11 * t176 - t139 * t253 + t177 * t233 - t22 * t26 + t25 * t252 + t321 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, t80, -t208 ^ 2 - t353, -t103 * t208 + t323 + t71, 0, 0, 0, 0, 0, 0, -t156 * t358 - t213 * t354, -t156 * t109 - t350 * t354, -t213 * t48 + t350 * t240 + t243 * t208 + (-t154 * t350 ^ 2 - t243) * qJD(5), -t288 - t75 * t156 + (t279 - t283) * t45 + (-t246 - t369) * t213, 0, 0, 0, 0, 0, 0, -t350 * t34 + (-t212 * t279 - t128) * t366 + (t295 * t87 - t297 * t366 - t335) * t213, t350 * t33 + (-t216 * t279 + t129) * t366 + (t295 * t89 + t298 * t366 - t330) * t213, t128 * t89 + t129 * t87 + (-t284 * t87 + t285 * t89) * qJD(5) + t230 * t213, -t288 + t252 * t128 - t22 * t129 + (t22 * t284 + t252 * t285) * qJD(5) + (t295 * t41 + t233) * t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t368, t365, t362, -t368, -t36, 0, -t208 * t45 - t249, -t237 + t369, 0, 0, t375, -t6, t374, t319 * t87 - t331, -t212 * t366 ^ 2 + t364, -t320, -pkin(5) * t34 - t45 * t87 + (-pkin(10) * t297 - t29) * t366 + t244 * t212 - t280, pkin(5) * t33 - t45 * t89 + (pkin(10) * t298 + t30) * t366 + t244 * t216 - t255, pkin(10) * t230 + t29 * t89 + t30 * t87 - t376, -pkin(5) * t11 + pkin(10) * t233 - t22 * t30 + t252 * t29 - t41 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t345, -t87 ^ 2 + t89 ^ 2, -t33 + t342, -t345, t324 - t34, t48, t22 * t366 - t41 * t89 + t3, -t252 * t366 + t41 * t87 - t2, 0, 0;];
tauc_reg  = t7;
