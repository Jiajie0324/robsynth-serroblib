% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:13:30
% EndTime: 2019-03-09 18:13:50
% DurationCPUTime: 11.22s
% Computational Cost: add. (17326->708), mult. (38093->836), div. (0->0), fcn. (27556->12), ass. (0->325)
t279 = cos(qJ(2));
t459 = cos(qJ(3));
t250 = t459 * t279;
t354 = qJD(1) * t250;
t275 = sin(qJ(3));
t276 = sin(qJ(2));
t404 = qJD(1) * t276;
t376 = t275 * t404;
t182 = -t354 + t376;
t198 = t275 * t279 + t276 * t459;
t184 = t198 * qJD(1);
t274 = sin(qJ(5));
t458 = cos(qJ(5));
t122 = t274 * t182 + t184 * t458;
t273 = sin(qJ(6));
t278 = cos(qJ(6));
t267 = qJD(2) + qJD(3);
t396 = qJD(5) - t267;
t103 = t278 * t122 + t273 * t396;
t368 = qJDD(1) * t459;
t393 = t276 * qJDD(1);
t480 = t267 * t198;
t100 = qJD(1) * t480 + t275 * t393 - t279 * t368;
t401 = qJD(5) * t274;
t392 = t279 * qJDD(1);
t356 = -t267 * t354 - t275 * t392 - t276 * t368;
t99 = t267 * t376 + t356;
t320 = -t274 * t100 + t184 * t401 + t458 * t99;
t373 = qJD(5) * t458;
t297 = -t182 * t373 + t320;
t339 = t278 * t396;
t266 = qJDD(2) + qJDD(3);
t360 = -qJDD(5) + t266;
t399 = qJD(6) * t273;
t31 = -qJD(6) * t339 + t122 * t399 + t273 * t360 + t278 * t297;
t440 = t31 * t273;
t469 = -t458 * t182 + t274 * t184;
t477 = qJD(6) + t469;
t487 = t477 * t278;
t492 = t103 * t487 - t440;
t369 = -t458 * t100 - t274 * t99;
t49 = qJD(5) * t122 + t369;
t48 = qJDD(6) + t49;
t444 = t273 * t48;
t491 = -t103 * t122 + t477 * t487 + t444;
t32 = qJD(6) * t103 - t273 * t297 + t278 * t360;
t430 = t103 * t477;
t101 = t122 * t273 - t339;
t433 = t101 * t477;
t490 = t273 * (-t32 - t430) + t278 * (-t31 - t433);
t174 = t184 * pkin(9);
t460 = pkin(3) + pkin(4);
t281 = -pkin(8) - pkin(7);
t215 = t281 * t276;
t204 = qJD(1) * t215;
t193 = qJD(2) * pkin(2) + t204;
t216 = t281 * t279;
t206 = qJD(1) * t216;
t412 = t275 * t206;
t125 = t459 * t193 + t412;
t466 = qJD(4) - t125;
t84 = -t267 * t460 - t174 + t466;
t259 = t267 * qJ(4);
t191 = t459 * t206;
t126 = t275 * t193 - t191;
t451 = t182 * pkin(9);
t316 = t126 + t451;
t90 = t259 + t316;
t56 = -t274 * t90 + t458 * t84;
t53 = -pkin(5) * t396 - t56;
t365 = t477 * t53;
t80 = -t184 * t267 + t100;
t263 = t279 * pkin(2);
t252 = t263 + pkin(1);
t214 = t252 * qJD(1);
t108 = t182 * pkin(3) - t184 * qJ(4) - t214;
t86 = -pkin(4) * t182 - t108;
t50 = pkin(5) * t469 - pkin(10) * t122 + t86;
t57 = t274 * t84 + t458 * t90;
t54 = pkin(10) * t396 + t57;
t23 = -t273 * t54 + t278 * t50;
t24 = t273 * t50 + t278 * t54;
t270 = qJ(2) + qJ(3);
t260 = sin(t270);
t261 = cos(t270);
t179 = t260 * t274 + t261 * t458;
t280 = cos(qJ(1));
t155 = t179 * t280;
t277 = sin(qJ(1));
t153 = t179 * t277;
t380 = t260 * t458;
t180 = -t261 * t274 + t380;
t345 = g(2) * t153 + g(3) * t180;
t323 = g(1) * t155 + t345;
t341 = t23 * t278 + t24 * t273;
t398 = qJD(6) * t278;
t394 = qJD(1) * qJD(2);
t370 = t279 * t394;
t142 = qJDD(2) * pkin(2) - t281 * (-t370 - t393);
t478 = t276 * t394 - t392;
t145 = t281 * t478;
t372 = t459 * qJD(3);
t402 = qJD(3) * t275;
t358 = -t459 * t142 + t275 * t145 + t193 * t402 - t206 * t372;
t258 = t266 * pkin(3);
t465 = qJDD(4) - t258;
t64 = t358 + t465;
t44 = -pkin(4) * t266 + pkin(9) * t99 + t64;
t359 = -t275 * t142 - t459 * t145 - t193 * t372 - t206 * t402;
t255 = t266 * qJ(4);
t257 = t267 * qJD(4);
t468 = t255 + t257;
t61 = -t359 + t468;
t45 = pkin(9) * t100 + t61;
t331 = -t274 * t44 - t84 * t373 + t401 * t90 - t458 * t45;
t10 = -pkin(10) * t360 - t331;
t271 = qJDD(1) * pkin(1);
t176 = pkin(2) * t478 - t271;
t51 = t100 * pkin(3) + t99 * qJ(4) - t184 * qJD(4) + t176;
t39 = -t100 * pkin(4) - t51;
t8 = t49 * pkin(5) + pkin(10) * t297 + t39;
t2 = qJD(6) * t23 + t278 * t10 + t273 * t8;
t7 = t278 * t8;
t3 = -qJD(6) * t24 - t273 * t10 + t7;
t472 = t2 * t278 - t3 * t273;
t293 = t23 * t398 + t24 * t399 + t341 * t469 + t323 - t472;
t363 = t275 * t276 - t250;
t486 = t100 * t363 + t182 * t480;
t403 = qJD(2) * t276;
t463 = -t279 * (qJD(2) * t459 + t372) + t275 * t403 + t276 * t402;
t485 = t198 * t100 - t182 * t463 + t184 * t480 - t363 * t99;
t484 = t266 * t363 + t267 * t480;
t483 = t122 * t24;
t482 = t396 * t56;
t428 = t477 * t122;
t481 = t122 * t469;
t415 = t261 * t277;
t152 = t274 * t415 - t277 * t380;
t414 = t261 * t280;
t154 = t274 * t414 - t280 * t380;
t324 = g(1) * t154 + g(2) * t152 + g(3) * t179;
t476 = t122 ^ 2 - t469 ^ 2;
t366 = t274 * t45 + t90 * t373 + t84 * t401 - t458 * t44;
t11 = pkin(5) * t360 + t366;
t9 = t11 * t278;
t374 = t122 * t23 + t9;
t295 = t86 * t122 - t324 + t366;
t290 = -t469 * t86 - t323 - t331;
t442 = t278 * t48;
t475 = t101 * t122 + t442;
t38 = t122 * t267 + t369;
t473 = t396 * t469 - t297;
t76 = pkin(5) * t122 + pkin(10) * t469;
t251 = -pkin(2) * t459 - pkin(3);
t243 = -pkin(4) + t251;
t245 = pkin(2) * t275 + qJ(4);
t159 = t243 * t458 - t274 * t245;
t235 = pkin(2) * t372 + qJD(4);
t388 = pkin(2) * t402;
t110 = qJD(5) * t159 + t235 * t458 + t274 * t388;
t139 = t459 * t204 + t412;
t107 = t174 + t139;
t138 = t204 * t275 - t191;
t336 = t138 + t451;
t66 = t107 * t458 + t274 * t336;
t438 = t110 - t66;
t160 = t274 * t243 + t458 * t245;
t437 = qJD(5) * t160 + (t336 - t388) * t458 + (-t107 + t235) * t274;
t207 = -t274 * qJ(4) - t458 * t460;
t165 = qJD(4) * t458 + qJD(5) * t207;
t98 = t174 + t125;
t63 = t274 * t316 + t458 * t98;
t436 = t165 - t63;
t208 = t458 * qJ(4) - t274 * t460;
t435 = qJD(5) * t208 + t316 * t458 + (qJD(4) - t98) * t274;
t149 = t275 * t215 - t459 * t216;
t408 = t261 * pkin(3) + t260 * qJ(4);
t265 = g(1) * t280;
t467 = g(2) * t277 + t265;
t462 = t396 ^ 2;
t461 = t184 ^ 2;
t457 = pkin(4) * t184;
t454 = g(2) * t280;
t452 = g(3) * t279;
t246 = t261 * pkin(4);
t449 = t276 * pkin(2);
t448 = pkin(9) + t281;
t447 = t11 * t273;
t330 = t458 * t363;
t67 = -qJD(5) * t330 + t198 * t401 - t274 * t480 + t458 * t463;
t443 = t273 * t67;
t441 = t278 * t67;
t439 = t32 * t278;
t434 = pkin(7) * qJDD(1);
t432 = t101 * t273;
t431 = t103 * t101;
t429 = t103 * t278;
t427 = t477 * t273;
t423 = t125 * t267;
t422 = t126 * t267;
t338 = t274 * t363;
t133 = t198 * t458 + t338;
t421 = t133 * t273;
t420 = t133 * t278;
t419 = t184 * t182;
t417 = t260 * t277;
t416 = t260 * t280;
t411 = t280 * t281;
t123 = t184 * pkin(3) + t182 * qJ(4);
t410 = t235 - t139;
t268 = t276 ^ 2;
t269 = t279 ^ 2;
t406 = t268 - t269;
t405 = t268 + t269;
t400 = qJD(6) * t477;
t391 = t277 * t449;
t390 = t280 * t449;
t389 = pkin(2) * t404;
t387 = pkin(2) * t403;
t284 = qJD(1) ^ 2;
t386 = t276 * t284 * t279;
t220 = t280 * t252;
t385 = pkin(3) * t414 + qJ(4) * t416 + t220;
t384 = t246 + t408;
t383 = t263 + t408;
t382 = -g(1) * t416 - g(2) * t417 + g(3) * t261;
t381 = qJD(2) * t281;
t379 = t273 * t458;
t378 = t278 * t458;
t377 = t458 * t267;
t105 = t182 ^ 2 - t461;
t205 = t276 * t381;
t355 = t279 * t381;
t364 = t275 * t205 - t459 * t355;
t148 = -t459 * t215 - t275 * t216;
t124 = t363 * pkin(3) - t198 * qJ(4) - t252;
t357 = pkin(4) * t414 + t385;
t353 = t276 * t370;
t96 = -t123 - t457;
t217 = qJ(4) * t415;
t352 = t152 * pkin(5) - pkin(10) * t153 + t217;
t219 = qJ(4) * t414;
t351 = t154 * pkin(5) - pkin(10) * t155 + t219;
t350 = -t138 + t388;
t349 = -pkin(3) * t260 - t449;
t348 = g(1) * t152 - g(2) * t154;
t346 = g(1) * t277 - t454;
t344 = -qJD(6) * t54 - t454;
t342 = -t122 * t57 + t469 * t56;
t340 = t23 * t273 - t24 * t278;
t104 = -pkin(4) * t363 - t124;
t132 = t198 * t274 - t330;
t58 = t132 * pkin(5) - t133 * pkin(10) + t104;
t114 = -pkin(9) * t198 + t148;
t115 = pkin(9) * t363 + t149;
t74 = t274 * t114 + t115 * t458;
t35 = -t273 * t74 + t278 * t58;
t36 = t273 * t58 + t278 * t74;
t113 = t389 + t123;
t337 = -t252 - t408;
t334 = -0.2e1 * pkin(1) * t394 - pkin(7) * qJDD(2);
t333 = t133 * t398 - t443;
t332 = -t133 * t399 - t441;
t329 = -pkin(10) * t48 + t365;
t328 = -t274 * t122 + t458 * t469;
t327 = t179 * pkin(5) - pkin(10) * t180 + t384;
t75 = pkin(3) * t480 + qJ(4) * t463 - t198 * qJD(4) + t387;
t87 = t459 * t205 + t215 * t372 + t216 * t402 + t275 * t355;
t322 = -t358 - t382;
t321 = g(1) * t414 + g(2) * t415 + g(3) * t260 + t359;
t318 = t273 * t324 - t447 - t483;
t317 = -qJD(6) * t50 - t10 + t345;
t88 = qJD(3) * t149 + t364;
t315 = -t149 * t100 - t148 * t99 - t87 * t182 + t88 * t184 - t467;
t55 = -t76 + t96;
t157 = -pkin(10) + t160;
t314 = -t110 * t477 - t157 * t48 - t365;
t203 = -pkin(10) + t208;
t313 = -t165 * t477 - t203 * t48 - t365;
t312 = g(1) * t415 - g(2) * t414 - t148 * t266 - t88 * t267;
t283 = qJD(2) ^ 2;
t311 = -pkin(7) * t283 + 0.2e1 * t271 + t346;
t310 = pkin(1) * t284 - t434 + t467;
t309 = -t108 * t182 - t321;
t308 = -t214 * t182 + t321;
t307 = t214 * t184 + t322;
t306 = t467 * t460 * t260;
t305 = -pkin(10) * t400 + t324;
t303 = g(1) * t417 - g(2) * t416 + t149 * t266 + t87 * t267;
t301 = -qJD(6) * t341 + t472;
t298 = -t108 * t184 + t322 - t465;
t296 = -t440 - t439 + (t429 + t432) * qJD(6);
t292 = (-g(1) * (t337 - t246) + g(2) * t448) * t277;
t59 = -pkin(4) * t480 - t75;
t286 = pkin(9) * t463 + t215 * t402 - t216 * t372 + t364;
t202 = pkin(5) - t207;
t156 = pkin(5) - t159;
t144 = t273 * t184 + t278 * t377;
t143 = t278 * t184 - t273 * t377;
t136 = t155 * t278 - t273 * t277;
t135 = -t155 * t273 - t277 * t278;
t117 = t259 + t126;
t112 = -pkin(3) * t267 + t466;
t95 = t198 * t266 - t267 * t463;
t89 = -t113 - t457;
t79 = -t356 + (t182 - t376) * t267;
t73 = -t114 * t458 + t115 * t274;
t72 = pkin(9) * t480 + t87;
t68 = qJD(5) * t338 + t198 * t373 - t274 * t463 - t458 * t480;
t60 = -t184 * t463 - t99 * t198;
t52 = t55 - t389;
t34 = t273 * t76 + t278 * t56;
t33 = -t273 * t56 + t278 * t76;
t30 = t273 * t52 + t278 * t66;
t29 = -t273 * t66 + t278 * t52;
t28 = t273 * t55 + t278 * t63;
t27 = -t273 * t63 + t278 * t55;
t26 = qJD(5) * t74 + t274 * t72 - t286 * t458;
t25 = t114 * t373 - t115 * t401 + t274 * t286 + t458 * t72;
t18 = t68 * pkin(5) + t67 * pkin(10) + t59;
t17 = -t432 * t477 + t439;
t14 = t427 * t477 - t475;
t5 = -qJD(6) * t36 + t18 * t278 - t25 * t273;
t4 = qJD(6) * t35 + t18 * t273 + t25 * t278;
t1 = [0, 0, 0, 0, 0, qJDD(1), t346, t467, 0, 0, qJDD(1) * t268 + 0.2e1 * t353, 0.2e1 * t276 * t392 - 0.2e1 * t394 * t406, qJDD(2) * t276 + t279 * t283, qJDD(1) * t269 - 0.2e1 * t353, qJDD(2) * t279 - t276 * t283, 0, t276 * t334 + t279 * t311, -t276 * t311 + t279 * t334, 0.2e1 * t405 * t434 - t467, -g(1) * (-pkin(1) * t277 + pkin(7) * t280) - g(2) * (pkin(1) * t280 + pkin(7) * t277) + (pkin(7) ^ 2 * t405 + pkin(1) ^ 2) * qJDD(1), t60, -t485, t95, t486, -t484, 0, -t252 * t100 + t176 * t363 + t182 * t387 - t214 * t480 + t312, t176 * t198 + t184 * t387 + t214 * t463 + t252 * t99 - t303, t125 * t463 - t126 * t480 + t198 * t358 + t359 * t363 + t315, -t359 * t149 + t126 * t87 + t358 * t148 - t125 * t88 - t176 * t252 - t214 * t387 - g(1) * (-t252 * t277 - t411) - g(2) * (-t277 * t281 + t220) t60, t95, t485, 0, t484, t486, t124 * t100 + t108 * t480 + t75 * t182 + t363 * t51 + t312, -t112 * t463 - t117 * t480 + t64 * t198 - t363 * t61 + t315, t108 * t463 + t124 * t99 - t75 * t184 - t51 * t198 + t303, t61 * t149 + t117 * t87 + t51 * t124 + t108 * t75 + t64 * t148 + t112 * t88 + g(1) * t411 - g(2) * t385 + (-g(1) * t337 + g(2) * t281) * t277, -t122 * t67 - t133 * t297, -t122 * t68 + t132 * t297 - t133 * t49 + t469 * t67, -t133 * t360 - t396 * t67, t132 * t49 + t469 * t68, t132 * t360 - t396 * t68, 0, g(1) * t153 - g(2) * t155 + t104 * t49 + t39 * t132 - t26 * t396 + t360 * t73 + t469 * t59 + t86 * t68, -t104 * t297 + t59 * t122 + t39 * t133 - t25 * t396 + t360 * t74 - t86 * t67 - t348, t26 * t122 + t132 * t331 + t133 * t366 - t25 * t469 - t297 * t73 - t74 * t49 + t56 * t67 - t57 * t68 + t467, -g(2) * t357 + t39 * t104 + t57 * t25 - t56 * t26 + t265 * t448 - t331 * t74 + t366 * t73 + t86 * t59 + t292, t103 * t332 - t31 * t420 (t101 * t278 + t103 * t273) * t67 + (t440 - t439 + (-t429 + t432) * qJD(6)) * t133, t103 * t68 - t132 * t31 + t332 * t477 + t420 * t48, t101 * t333 + t32 * t421, -t101 * t68 - t132 * t32 - t333 * t477 - t421 * t48, t132 * t48 + t477 * t68, t5 * t477 + t35 * t48 + t3 * t132 + t23 * t68 + t26 * t101 + t73 * t32 - t53 * t443 - g(1) * (-t153 * t278 - t273 * t280) - g(2) * t136 + (t398 * t53 + t447) * t133, -t4 * t477 - t36 * t48 - t2 * t132 - t24 * t68 + t26 * t103 - t73 * t31 - t53 * t441 - g(1) * (t153 * t273 - t278 * t280) - g(2) * t135 + (-t399 * t53 + t9) * t133, -t101 * t4 - t103 * t5 + t31 * t35 - t32 * t36 + t341 * t67 + (qJD(6) * t340 - t2 * t273 - t278 * t3) * t133 + t348, t2 * t36 + t24 * t4 + t3 * t35 + t23 * t5 + t11 * t73 + t53 * t26 - g(1) * (-pkin(5) * t153 - pkin(9) * t280 - pkin(10) * t152 - t411) - g(2) * (pkin(5) * t155 + pkin(10) * t154 + t357) + t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t386, t406 * t284, t393, t386, t392, qJDD(2), t276 * t310 - t452, g(3) * t276 + t279 * t310, 0, 0, t419, -t105, t79, -t419, -t80, t266, t138 * t267 + (-t182 * t404 + t266 * t459 - t267 * t402) * pkin(2) + t307, t139 * t267 + (-t184 * t404 - t266 * t275 - t267 * t372) * pkin(2) + t308 (t126 - t138) * t184 + (-t125 + t139) * t182 + (t459 * t99 - t100 * t275 + (-t182 * t459 + t184 * t275) * qJD(3)) * pkin(2), t125 * t138 - t126 * t139 + (-t459 * t358 - t452 - t359 * t275 + (-t125 * t275 + t126 * t459) * qJD(3) + (qJD(1) * t214 + t467) * t276) * pkin(2), t419, t79, t105, t266, t80, -t419, -t113 * t182 - t251 * t266 - t267 * t350 + t298, -t100 * t245 - t251 * t99 + (t117 + t350) * t184 + (t112 - t410) * t182, t113 * t184 + t245 * t266 + t267 * t410 + t309 + t468, t61 * t245 + t64 * t251 - t108 * t113 - g(1) * (t280 * t349 + t219) - g(2) * (t277 * t349 + t217) - g(3) * t383 + t410 * t117 + t350 * t112, -t481, -t476, -t473, t481, t38, t360, -t159 * t360 - t396 * t437 - t469 * t89 + t295, -t89 * t122 + t160 * t360 - t396 * t438 + t290, t122 * t437 + t159 * t297 - t160 * t49 - t438 * t469 + t342, -t331 * t160 - t366 * t159 - t86 * t89 - g(1) * (t219 - t390) - g(2) * (t217 - t391) - g(3) * (t246 + t383) + t438 * t57 - t437 * t56 + t306, -t492, -t490, -t491, t17, t14, t428, -t477 * t29 + t156 * t32 + t437 * t101 + (-t157 * t400 - t324) * t278 + t314 * t273 + t374, -t156 * t31 + (t157 * t399 + t30) * t477 + t437 * t103 + t314 * t278 + t318 (t110 * t273 + t29) * t103 + (-t110 * t278 + t30) * t101 + t296 * t157 + t293, t11 * t156 - t24 * t30 - t23 * t29 - g(1) * (t351 - t390) - g(2) * (t352 - t391) - g(3) * (t263 + t327) + t437 * t53 + t306 - t340 * t110 + t301 * t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t419, -t105, t79, -t419, -t80, t266, t307 + t422, t308 + t423, 0, 0, t419, t79, t105, t266, t80, -t419, -t123 * t182 + t258 + t298 + t422, pkin(3) * t99 - qJ(4) * t100 + (t117 - t126) * t184 + (t112 - t466) * t182, t123 * t184 + 0.2e1 * t255 + 0.2e1 * t257 + t309 - t423, t61 * qJ(4) - t64 * pkin(3) - t108 * t123 - t112 * t126 - g(1) * (-pkin(3) * t416 + t219) - g(2) * (-pkin(3) * t417 + t217) - g(3) * t408 + t466 * t117, -t481, -t476, -t473, t481, t38, t360, -t207 * t360 - t396 * t435 - t469 * t96 + t295, -t96 * t122 + t208 * t360 - t396 * t436 + t290, t122 * t435 + t207 * t297 - t208 * t49 - t436 * t469 + t342, -g(1) * t219 - g(2) * t217 - g(3) * t384 - t207 * t366 - t208 * t331 - t435 * t56 + t436 * t57 - t86 * t96 + t306, -t492, -t490, -t491, t17, t14, t428, -t477 * t27 + t202 * t32 + t435 * t101 + (-t203 * t400 - t324) * t278 + t313 * t273 + t374, -t202 * t31 + (t203 * t399 + t28) * t477 + t435 * t103 + t313 * t278 + t318 (t165 * t273 + t27) * t103 + (-t165 * t278 + t28) * t101 + t296 * t203 + t293, -g(1) * t351 - g(2) * t352 - g(3) * t327 + t11 * t202 - t165 * t340 + t203 * t301 - t23 * t27 - t24 * t28 + t435 * t53 + t306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266 + t419, t79, -t267 ^ 2 - t461, -t117 * t267 - t298, 0, 0, 0, 0, 0, 0, -t184 * t469 - t274 * t462 - t458 * t360, -t184 * t122 + t274 * t360 - t458 * t462, -t274 * t49 + t458 * t320 + t328 * t267 + (-t182 * t458 ^ 2 - t328) * qJD(5), -t366 * t458 - t86 * t184 + (t373 - t377) * t57 + (-t331 - t482) * t274 + t382, 0, 0, 0, 0, 0, 0, -t458 * t32 + (-t273 * t373 - t143) * t477 + (t101 * t396 - t398 * t477 - t444) * t274, t458 * t31 + (-t278 * t373 + t144) * t477 + (t103 * t396 + t399 * t477 - t442) * t274, t144 * t101 + t143 * t103 + (-t101 * t378 + t103 * t379) * qJD(5) + t296 * t274, -t11 * t458 - t23 * t143 - t24 * t144 + (-t23 * t379 + t24 * t378) * qJD(5) + (t396 * t53 + t301) * t274 + t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, t476, t473, -t481, -t38, -t360, t396 * t57 - t295, -t290 + t482, 0, 0, t492, t490, t491, t101 * t427 - t439, -t273 * t477 ^ 2 + t475, -t428, -pkin(5) * t32 - t101 * t57 + t273 * t329 + t278 * t305 - t33 * t477 - t374, pkin(5) * t31 - t103 * t57 + t477 * t34 + t483 + t329 * t278 + (t11 - t305) * t273, pkin(10) * t296 + t101 * t34 + t103 * t33 - t293, -t23 * t33 - t24 * t34 - t53 * t57 + (-t11 + t324) * pkin(5) + (t301 - t323) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t431, -t101 ^ 2 + t103 ^ 2, -t31 + t433, -t431, -t32 + t430, t48, -g(1) * t135 - t53 * t103 + t24 * t477 + t273 * t317 + t278 * t344 + t7, g(1) * t136 + t53 * t101 + t23 * t477 + (-t344 - t8) * t273 + t317 * t278, 0, 0;];
tau_reg  = t1;
