% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 03:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:59:32
% EndTime: 2019-05-06 03:00:19
% DurationCPUTime: 36.22s
% Computational Cost: add. (276290->880), mult. (547786->1355), div. (0->0), fcn. (387336->12), ass. (0->600)
t954 = sin(qJ(1));
t959 = cos(qJ(1));
t920 = g(1) * t959 + g(2) * t954;
t960 = qJD(1) ^ 2;
t901 = -pkin(1) * t960 - t920;
t946 = sin(pkin(11));
t947 = cos(pkin(11));
t919 = g(1) * t954 - t959 * g(2);
t966 = qJDD(1) * pkin(1) + t919;
t851 = t946 * t901 - t947 * t966;
t852 = t947 * t901 + t946 * t966;
t784 = t851 * t947 - t852 * t946;
t1017 = t784 * t954;
t975 = t851 * t946 + t947 * t852;
t716 = t959 * t975 + t1017;
t1016 = t784 * t959;
t1055 = -t954 * t975 + t1016;
t908 = qJDD(1) * t947 - t946 * t960;
t995 = g(3) - qJDD(2);
t1038 = -qJ(2) * t908 - t946 * t995;
t907 = qJDD(1) * t946 + t947 * t960;
t1039 = t959 * t907 + t908 * t954;
t879 = -qJ(2) * t907 + t947 * t995;
t1054 = -pkin(6) * t1039 + t1038 * t954 + t879 * t959;
t854 = -t907 * t954 + t959 * t908;
t1053 = -pkin(6) * t854 + t1038 * t959 - t879 * t954;
t952 = sin(qJ(4));
t957 = cos(qJ(4));
t953 = sin(qJ(3));
t993 = qJD(1) * t953;
t898 = -t957 * qJD(3) + t952 * t993;
t958 = cos(qJ(3));
t992 = qJD(1) * t958;
t930 = -qJD(4) + t992;
t881 = t898 * t930;
t988 = qJD(1) * qJD(3);
t978 = t958 * t988;
t987 = qJDD(1) * t953;
t904 = t978 + t987;
t979 = t898 * qJD(4) - t952 * qJDD(3) - t957 * t904;
t807 = t881 + t979;
t950 = sin(qJ(6));
t899 = qJD(3) * t952 + t957 * t993;
t951 = sin(qJ(5));
t956 = cos(qJ(5));
t848 = t956 * t898 + t899 * t951;
t850 = -t898 * t951 + t899 * t956;
t955 = cos(qJ(6));
t779 = t955 * t848 + t850 * t950;
t781 = -t848 * t950 + t850 * t955;
t1018 = t779 * t781;
t935 = t953 * t988;
t986 = qJDD(1) * t958;
t905 = -t935 + t986;
t895 = -qJDD(4) + t905;
t889 = -qJDD(5) + t895;
t883 = -qJDD(6) + t889;
t961 = -t883 - t1018;
t1049 = t950 * t961;
t1009 = t848 * t850;
t962 = -t889 - t1009;
t1048 = t951 * t962;
t1008 = t898 * t899;
t965 = -t895 - t1008;
t1047 = t952 * t965;
t1045 = t955 * t961;
t1044 = t956 * t962;
t1043 = t957 * t965;
t922 = -qJD(5) + t930;
t915 = -qJD(6) + t922;
t760 = t779 * t915;
t967 = t957 * qJDD(3) - t952 * t904;
t963 = qJD(4) * t899 - t967;
t976 = -t951 * t979 + t956 * t963;
t743 = -qJD(5) * t850 - t976;
t744 = -t848 * qJD(5) - t951 * t963 - t956 * t979;
t964 = qJD(6) * t779 - t743 * t950 - t744 * t955;
t1041 = t760 - t964;
t824 = t848 * t922;
t713 = t824 - t744;
t1040 = t824 + t744;
t806 = t979 - t881;
t977 = -t955 * t743 + t950 * t744;
t616 = (qJD(6) + t915) * t781 + t977;
t709 = (qJD(5) + t922) * t850 + t976;
t802 = (qJD(4) + t930) * t899 - t967;
t777 = t779 ^ 2;
t778 = t781 ^ 2;
t1037 = t848 ^ 2;
t847 = t850 ^ 2;
t1036 = t898 ^ 2;
t894 = t899 ^ 2;
t912 = t915 ^ 2;
t921 = t922 ^ 2;
t928 = t930 ^ 2;
t1035 = qJD(3) ^ 2;
t1034 = pkin(3) * t953;
t1033 = pkin(3) * t958;
t831 = -qJDD(1) * pkin(2) - t960 * pkin(7) + t851;
t968 = -t905 + t935;
t969 = t904 + t978;
t770 = pkin(3) * t968 - pkin(8) * t969 + t831;
t832 = -pkin(2) * t960 + qJDD(1) * pkin(7) + t852;
t813 = t958 * t832 - t953 * t995;
t971 = -pkin(8) * t953 - t1033;
t902 = t971 * qJD(1);
t787 = -pkin(3) * t1035 + qJDD(3) * pkin(8) + t902 * t992 + t813;
t705 = -t957 * t770 + t952 * t787;
t661 = t965 * pkin(4) + pkin(9) * t807 - t705;
t706 = t952 * t770 + t957 * t787;
t870 = -pkin(4) * t930 - pkin(9) * t899;
t668 = -pkin(4) * t1036 - pkin(9) * t963 + t930 * t870 + t706;
t589 = -t956 * t661 + t951 * t668;
t549 = t962 * pkin(5) + pkin(10) * t713 - t589;
t590 = t951 * t661 + t956 * t668;
t816 = -pkin(5) * t922 - pkin(10) * t850;
t569 = -pkin(5) * t1037 + pkin(10) * t743 + t816 * t922 + t590;
t499 = -t955 * t549 + t569 * t950;
t500 = t950 * t549 + t955 * t569;
t453 = -t499 * t955 + t500 * t950;
t1030 = t453 * t951;
t1029 = t453 * t956;
t529 = -t589 * t956 + t590 * t951;
t1028 = t529 * t952;
t1027 = t529 * t957;
t934 = t958 * t995;
t786 = t934 - qJDD(3) * pkin(3) - t1035 * pkin(8) + (qJD(1) * t902 + t832) * t953;
t703 = t963 * pkin(4) - t1036 * pkin(9) + t899 * t870 + t786;
t621 = -t743 * pkin(5) - pkin(10) * t1037 + t850 * t816 + t703;
t1026 = t621 * t950;
t1025 = t621 * t955;
t696 = t883 - t1018;
t1024 = t696 * t950;
t1023 = t696 * t955;
t1022 = t703 * t951;
t1021 = t703 * t956;
t764 = t889 - t1009;
t1020 = t764 * t951;
t1019 = t764 * t956;
t1015 = t786 * t952;
t1014 = t786 * t957;
t827 = t895 - t1008;
t1013 = t827 * t952;
t1012 = t827 * t957;
t1011 = t831 * t953;
t1010 = t831 * t958;
t1005 = t915 * t950;
t1004 = t915 * t955;
t929 = t958 * t960 * t953;
t917 = -t929 + qJDD(3);
t1003 = t917 * t953;
t1002 = t917 * t958;
t918 = qJDD(3) + t929;
t1001 = t918 * t953;
t1000 = t922 * t951;
t999 = t922 * t956;
t998 = t930 * t952;
t997 = t930 * t957;
t942 = t953 ^ 2;
t996 = t942 * t960;
t943 = t958 ^ 2;
t994 = t942 + t943;
t985 = t953 * t1018;
t984 = t958 * t1018;
t983 = t953 * t1009;
t982 = t958 * t1009;
t981 = t953 * t1008;
t980 = t958 * t1008;
t454 = t499 * t950 + t955 * t500;
t530 = t589 * t951 + t956 * t590;
t811 = t832 * t953 + t934;
t747 = t811 * t953 + t958 * t813;
t863 = -t919 * t954 - t959 * t920;
t973 = t946 * t929;
t972 = t947 * t929;
t911 = qJDD(1) * t959 - t954 * t960;
t970 = -pkin(6) * t911 - g(3) * t954;
t636 = -t705 * t957 + t706 * t952;
t637 = t705 * t952 + t706 * t957;
t746 = t811 * t958 - t813 * t953;
t862 = t919 * t959 - t920 * t954;
t940 = t943 * t960;
t927 = -t940 - t1035;
t926 = t940 - t1035;
t925 = -t996 - t1035;
t924 = -t996 + t1035;
t914 = t940 - t996;
t913 = t940 + t996;
t910 = qJDD(1) * t954 + t959 * t960;
t909 = t994 * qJDD(1);
t906 = -0.2e1 * t935 + t986;
t903 = 0.2e1 * t978 + t987;
t897 = t958 * t918;
t896 = t994 * t988;
t882 = -pkin(6) * t910 + g(3) * t959;
t876 = -t894 + t928;
t875 = -t928 + t1036;
t874 = t904 * t958 - t942 * t988;
t873 = -t905 * t953 - t943 * t988;
t872 = qJDD(3) * t946 + t896 * t947;
t871 = -qJDD(3) * t947 + t896 * t946;
t869 = -t925 * t953 - t1002;
t868 = -t924 * t953 + t897;
t867 = t927 * t958 - t1001;
t866 = t926 * t958 - t1003;
t865 = t925 * t958 - t1003;
t864 = t927 * t953 + t897;
t861 = -t894 + t1036;
t860 = -t894 - t928;
t859 = t909 * t947 - t913 * t946;
t858 = t909 * t946 + t913 * t947;
t853 = -t903 * t953 + t906 * t958;
t845 = -t928 - t1036;
t841 = t874 * t947 - t973;
t840 = t873 * t947 + t973;
t839 = t874 * t946 + t972;
t838 = t873 * t946 - t972;
t837 = t868 * t947 + t946 * t987;
t836 = t866 * t947 + t946 * t986;
t835 = t868 * t946 - t947 * t987;
t834 = t866 * t946 - t947 * t986;
t826 = t894 + t1036;
t822 = -t847 + t921;
t821 = -t921 + t1037;
t820 = t869 * t947 + t903 * t946;
t819 = t867 * t947 - t906 * t946;
t818 = t869 * t946 - t903 * t947;
t817 = t867 * t946 + t906 * t947;
t815 = (t898 * t957 - t899 * t952) * t930;
t814 = (-t898 * t952 - t899 * t957) * t930;
t812 = t853 * t947 - t914 * t946;
t810 = t853 * t946 + t914 * t947;
t809 = -t847 - t921;
t803 = (-qJD(4) + t930) * t899 + t967;
t801 = t899 * t998 - t957 * t979;
t800 = t899 * t997 + t952 * t979;
t799 = -t898 * t997 + t952 * t963;
t798 = t898 * t998 + t957 * t963;
t797 = -t858 * t954 + t859 * t959;
t796 = t858 * t959 + t859 * t954;
t795 = t815 * t958 - t895 * t953;
t794 = -t847 + t1037;
t793 = -pkin(7) * t865 + t1010;
t792 = t875 * t957 + t1013;
t791 = -t876 * t952 + t1043;
t790 = -pkin(7) * t864 + t1011;
t789 = -t875 * t952 + t1012;
t788 = -t876 * t957 - t1047;
t775 = -pkin(2) * t865 + t813;
t774 = -pkin(2) * t864 + t811;
t773 = -t860 * t952 + t1012;
t772 = t860 * t957 + t1013;
t771 = -t921 - t1037;
t769 = pkin(1) * t995 + qJ(2) * t975;
t768 = t845 * t957 - t1047;
t767 = t845 * t952 + t1043;
t759 = -t778 + t912;
t758 = t777 - t912;
t757 = (t848 * t956 - t850 * t951) * t922;
t756 = (t848 * t951 + t850 * t956) * t922;
t755 = -t778 - t912;
t754 = t801 * t958 + t981;
t753 = t799 * t958 - t981;
t752 = -t818 * t954 + t820 * t959;
t751 = -t817 * t954 + t819 * t959;
t750 = t818 * t959 + t820 * t954;
t749 = t817 * t959 + t819 * t954;
t748 = -t847 - t1037;
t740 = -t802 * t957 - t807 * t952;
t739 = t803 * t957 + t806 * t952;
t738 = -t802 * t952 + t807 * t957;
t737 = -t803 * t952 + t806 * t957;
t736 = t795 * t947 - t814 * t946;
t735 = t795 * t946 + t814 * t947;
t734 = t792 * t958 - t802 * t953;
t733 = t791 * t958 - t807 * t953;
t732 = t821 * t956 + t1020;
t731 = -t822 * t951 + t1044;
t730 = t821 * t951 - t1019;
t729 = t822 * t956 + t1048;
t728 = t773 * t958 - t806 * t953;
t727 = t773 * t953 + t806 * t958;
t726 = -t809 * t951 + t1019;
t725 = t809 * t956 + t1020;
t724 = -qJ(2) * t858 + t746 * t947;
t723 = qJ(2) * t859 + t746 * t946;
t722 = t768 * t958 - t803 * t953;
t721 = t768 * t953 + t803 * t958;
t720 = -t778 + t777;
t719 = t747 * t947 + t831 * t946;
t718 = t747 * t946 - t831 * t947;
t717 = -pkin(8) * t772 + t1014;
t714 = t739 * t958 - t861 * t953;
t708 = (qJD(5) - t922) * t850 + t976;
t707 = -t912 - t777;
t704 = -pkin(8) * t767 + t1015;
t702 = t1000 * t850 + t744 * t956;
t701 = t744 * t951 - t850 * t999;
t700 = -t743 * t951 - t848 * t999;
t699 = -t1000 * t848 + t743 * t956;
t695 = t771 * t956 - t1048;
t694 = t771 * t951 + t1044;
t693 = t754 * t947 - t800 * t946;
t692 = t753 * t947 - t798 * t946;
t691 = t754 * t946 + t800 * t947;
t690 = t753 * t946 + t798 * t947;
t689 = t740 * t958 - t826 * t953;
t688 = t740 * t953 + t826 * t958;
t687 = (t779 * t955 - t781 * t950) * t915;
t686 = (t779 * t950 + t781 * t955) * t915;
t685 = -t756 * t952 + t757 * t957;
t684 = -t756 * t957 - t757 * t952;
t683 = -qJ(2) * t818 - t775 * t946 + t793 * t947;
t682 = -qJ(2) * t817 - t774 * t946 + t790 * t947;
t681 = t734 * t947 - t789 * t946;
t680 = t733 * t947 - t788 * t946;
t679 = t734 * t946 + t789 * t947;
t678 = t733 * t946 + t788 * t947;
t677 = t685 * t958 - t889 * t953;
t676 = -t777 - t778;
t675 = t728 * t947 + t772 * t946;
t674 = t728 * t946 - t772 * t947;
t673 = -pkin(1) * t865 + qJ(2) * t820 + t775 * t947 + t793 * t946;
t672 = -pkin(1) * t864 + qJ(2) * t819 + t774 * t947 + t790 * t946;
t671 = t722 * t947 + t767 * t946;
t670 = t722 * t946 - t767 * t947;
t669 = -pkin(3) * t772 + t706;
t667 = -pkin(3) * t767 + t705;
t665 = t758 * t955 + t1024;
t664 = -t759 * t950 + t1045;
t663 = t758 * t950 - t1023;
t662 = t759 * t955 + t1049;
t658 = -t755 * t950 + t1023;
t657 = t755 * t955 + t1024;
t656 = -t730 * t952 + t732 * t957;
t655 = -t729 * t952 + t731 * t957;
t654 = -t730 * t957 - t732 * t952;
t653 = -t729 * t957 - t731 * t952;
t652 = t714 * t947 - t737 * t946;
t651 = t714 * t946 + t737 * t947;
t650 = -t725 * t952 + t726 * t957;
t649 = t725 * t957 + t726 * t952;
t648 = t689 * t947 + t738 * t946;
t647 = t689 * t946 - t738 * t947;
t646 = -pkin(9) * t725 + t1021;
t644 = -qJD(6) * t781 - t977;
t643 = -t718 * t954 + t719 * t959;
t642 = t718 * t959 + t719 * t954;
t641 = -t709 * t956 - t713 * t951;
t640 = -t1040 * t951 - t708 * t956;
t639 = -t709 * t951 + t713 * t956;
t638 = t1040 * t956 - t708 * t951;
t635 = t707 * t955 - t1049;
t634 = t707 * t950 + t1045;
t633 = -pkin(9) * t694 + t1022;
t632 = -t701 * t952 + t702 * t957;
t631 = -t699 * t952 + t700 * t957;
t630 = -t701 * t957 - t702 * t952;
t629 = -t699 * t957 - t700 * t952;
t628 = -t694 * t952 + t695 * t957;
t627 = t694 * t957 + t695 * t952;
t626 = -pkin(2) * t727 - pkin(3) * t806 - pkin(8) * t773 - t1015;
t625 = -t686 * t951 + t687 * t956;
t624 = t686 * t956 + t687 * t951;
t623 = -pkin(2) * t721 - pkin(3) * t803 - pkin(8) * t768 + t1014;
t622 = -qJ(2) * t718 - (pkin(2) * t946 - pkin(7) * t947) * t746;
t620 = t760 + t964;
t615 = (qJD(6) - t915) * t781 + t977;
t614 = t1005 * t781 - t955 * t964;
t613 = -t1004 * t781 - t950 * t964;
t612 = -t1004 * t779 - t644 * t950;
t611 = -t1005 * t779 + t644 * t955;
t610 = t637 * t958 + t786 * t953;
t609 = t637 * t953 - t786 * t958;
t608 = t677 * t947 - t684 * t946;
t607 = t677 * t946 + t684 * t947;
t606 = t632 * t958 + t983;
t605 = t631 * t958 - t983;
t604 = t656 * t958 - t709 * t953;
t603 = t655 * t958 - t713 * t953;
t602 = -pkin(8) * t738 - t636;
t601 = t1040 * t953 + t650 * t958;
t600 = -t1040 * t958 + t650 * t953;
t599 = -t674 * t954 + t675 * t959;
t598 = t674 * t959 + t675 * t954;
t597 = -pkin(4) * t1040 + pkin(9) * t726 + t1022;
t596 = -t670 * t954 + t671 * t959;
t595 = t670 * t959 + t671 * t954;
t594 = qJ(2) * t719 - (-pkin(2) * t947 - pkin(7) * t946 - pkin(1)) * t746;
t593 = -pkin(4) * t708 + pkin(9) * t695 - t1021;
t592 = t628 * t958 + t708 * t953;
t591 = t628 * t953 - t708 * t958;
t587 = -t663 * t951 + t665 * t956;
t586 = -t662 * t951 + t664 * t956;
t585 = t663 * t956 + t665 * t951;
t584 = t662 * t956 + t664 * t951;
t583 = -pkin(7) * t727 - t669 * t953 + t717 * t958;
t582 = -t657 * t951 + t658 * t956;
t581 = t657 * t956 + t658 * t951;
t580 = -pkin(7) * t721 - t667 * t953 + t704 * t958;
t579 = -t647 * t954 + t648 * t959;
t578 = t647 * t959 + t648 * t954;
t577 = -t639 * t952 + t641 * t957;
t576 = -t638 * t952 + t640 * t957;
t575 = t639 * t957 + t641 * t952;
t574 = -t638 * t957 - t640 * t952;
t573 = -pkin(2) * t688 - pkin(3) * t826 - pkin(8) * t740 - t637;
t572 = -pkin(10) * t657 + t1025;
t571 = -t634 * t951 + t635 * t956;
t570 = t634 * t956 + t635 * t951;
t567 = t604 * t947 - t654 * t946;
t566 = t603 * t947 - t653 * t946;
t565 = t604 * t946 + t654 * t947;
t564 = t603 * t946 + t653 * t947;
t563 = -t624 * t952 + t625 * t957;
t562 = -t624 * t957 - t625 * t952;
t561 = t576 * t958 - t794 * t953;
t560 = -pkin(10) * t634 + t1026;
t559 = t610 * t947 + t636 * t946;
t558 = t610 * t946 - t636 * t947;
t557 = t563 * t958 - t883 * t953;
t556 = -pkin(7) * t688 + t1034 * t738 + t602 * t958;
t555 = t606 * t947 - t630 * t946;
t554 = t605 * t947 - t629 * t946;
t553 = t606 * t946 + t630 * t947;
t552 = t605 * t946 + t629 * t947;
t551 = t601 * t947 + t649 * t946;
t550 = t601 * t946 - t649 * t947;
t548 = t577 * t958 + t748 * t953;
t547 = t577 * t953 - t748 * t958;
t544 = -t616 * t955 - t620 * t950;
t543 = -t1041 * t950 - t615 * t955;
t542 = -t616 * t950 + t620 * t955;
t541 = t1041 * t955 - t615 * t950;
t540 = -pkin(2) * t609 + pkin(3) * t786 - pkin(8) * t637;
t539 = -t613 * t951 + t614 * t956;
t538 = -t611 * t951 + t612 * t956;
t537 = t613 * t956 + t614 * t951;
t536 = t611 * t956 + t612 * t951;
t535 = t592 * t947 + t627 * t946;
t534 = t592 * t946 - t627 * t947;
t533 = -pkin(3) * t649 - pkin(4) * t725 + t590;
t532 = -pkin(3) * t575 - pkin(4) * t639;
t531 = -pkin(3) * t627 - pkin(4) * t694 + t589;
t528 = -t585 * t952 + t587 * t957;
t527 = -t584 * t952 + t586 * t957;
t526 = -t585 * t957 - t587 * t952;
t525 = -t584 * t957 - t586 * t952;
t524 = -pkin(5) * t1041 + pkin(10) * t658 + t1026;
t523 = -pkin(7) * t609 + (-pkin(8) * t958 + t1034) * t636;
t522 = -pkin(8) * t649 - t597 * t952 + t646 * t957;
t521 = -t581 * t952 + t582 * t957;
t520 = t581 * t957 + t582 * t952;
t519 = -pkin(5) * t615 + pkin(10) * t635 - t1025;
t518 = -qJ(2) * t674 + t583 * t947 - t626 * t946;
t517 = -qJ(2) * t670 + t580 * t947 - t623 * t946;
t516 = -pkin(8) * t627 - t593 * t952 + t633 * t957;
t515 = -pkin(4) * t703 + pkin(9) * t530;
t514 = -pkin(1) * t727 + qJ(2) * t675 + t583 * t946 + t626 * t947;
t513 = -pkin(1) * t721 + qJ(2) * t671 + t580 * t946 + t623 * t947;
t512 = -t570 * t952 + t571 * t957;
t511 = t570 * t957 + t571 * t952;
t510 = -pkin(9) * t639 - t529;
t509 = t561 * t947 - t574 * t946;
t508 = t561 * t946 + t574 * t947;
t507 = t548 * t947 + t575 * t946;
t506 = t548 * t946 - t575 * t947;
t505 = -pkin(4) * t748 + pkin(9) * t641 + t530;
t504 = t528 * t958 - t616 * t953;
t503 = t527 * t958 - t620 * t953;
t502 = t557 * t947 - t562 * t946;
t501 = t557 * t946 + t562 * t947;
t497 = -t558 * t954 + t559 * t959;
t496 = t558 * t959 + t559 * t954;
t495 = t1041 * t953 + t521 * t958;
t494 = -t1041 * t958 + t521 * t953;
t493 = -t550 * t954 + t551 * t959;
t492 = t550 * t959 + t551 * t954;
t491 = -t542 * t951 + t544 * t956;
t490 = -t541 * t951 + t543 * t956;
t489 = t542 * t956 + t544 * t951;
t488 = t541 * t956 + t543 * t951;
t487 = -t537 * t952 + t539 * t957;
t486 = -t536 * t952 + t538 * t957;
t485 = -t537 * t957 - t539 * t952;
t484 = -t536 * t957 - t538 * t952;
t483 = -pkin(2) * t600 + pkin(3) * t1040 - pkin(8) * t650 - t597 * t957 - t646 * t952;
t482 = -t534 * t954 + t535 * t959;
t481 = t534 * t959 + t535 * t954;
t480 = -qJ(2) * t647 + t556 * t947 - t573 * t946;
t479 = t512 * t958 + t615 * t953;
t478 = t512 * t953 - t615 * t958;
t477 = t487 * t958 + t985;
t476 = t486 * t958 - t985;
t475 = -pkin(2) * t591 + pkin(3) * t708 - pkin(8) * t628 - t593 * t957 - t633 * t952;
t474 = -pkin(1) * t688 + qJ(2) * t648 + t556 * t946 + t573 * t947;
t473 = t530 * t957 - t1028;
t472 = t530 * t952 + t1027;
t471 = t473 * t958 + t703 * t953;
t470 = t473 * t953 - t703 * t958;
t469 = -pkin(9) * t581 - t524 * t951 + t572 * t956;
t468 = -pkin(7) * t600 + t522 * t958 - t533 * t953;
t467 = t504 * t947 - t526 * t946;
t466 = t503 * t947 - t525 * t946;
t465 = t504 * t946 + t526 * t947;
t464 = t503 * t946 + t525 * t947;
t463 = -pkin(9) * t570 - t519 * t951 + t560 * t956;
t462 = t495 * t947 + t520 * t946;
t461 = t495 * t946 - t520 * t947;
t460 = -qJ(2) * t558 + t523 * t947 - t540 * t946;
t459 = -pkin(4) * t1041 + pkin(9) * t582 + t524 * t956 + t572 * t951;
t458 = -pkin(7) * t591 + t516 * t958 - t531 * t953;
t457 = -t506 * t954 + t507 * t959;
t456 = t506 * t959 + t507 * t954;
t455 = -pkin(4) * t615 + pkin(9) * t571 + t519 * t956 + t560 * t951;
t452 = -pkin(1) * t609 + qJ(2) * t559 + t523 * t946 + t540 * t947;
t451 = -pkin(3) * t472 - pkin(4) * t529;
t450 = t479 * t947 + t511 * t946;
t449 = t479 * t946 - t511 * t947;
t448 = -t489 * t952 + t491 * t957;
t447 = -t488 * t952 + t490 * t957;
t446 = t489 * t957 + t491 * t952;
t445 = -t488 * t957 - t490 * t952;
t444 = -pkin(5) * t621 + pkin(10) * t454;
t443 = t447 * t958 - t720 * t953;
t442 = -pkin(3) * t520 - pkin(4) * t581 - pkin(5) * t657 + t500;
t441 = t477 * t947 - t485 * t946;
t440 = t476 * t947 - t484 * t946;
t439 = t477 * t946 + t485 * t947;
t438 = t476 * t946 + t484 * t947;
t437 = t448 * t958 + t676 * t953;
t436 = t448 * t953 - t676 * t958;
t435 = -pkin(8) * t575 - t505 * t952 + t510 * t957;
t434 = -pkin(10) * t542 - t453;
t433 = -pkin(3) * t511 - pkin(4) * t570 - pkin(5) * t634 + t499;
t432 = -pkin(5) * t676 + pkin(10) * t544 + t454;
t431 = -pkin(8) * t472 - pkin(9) * t1027 - t515 * t952;
t430 = t471 * t947 + t472 * t946;
t429 = t471 * t946 - t472 * t947;
t428 = -pkin(2) * t547 + pkin(3) * t748 - pkin(8) * t577 - t505 * t957 - t510 * t952;
t427 = -qJ(2) * t550 + t468 * t947 - t483 * t946;
t426 = -t461 * t954 + t462 * t959;
t425 = t461 * t959 + t462 * t954;
t424 = -pkin(7) * t547 + t435 * t958 - t532 * t953;
t423 = -pkin(1) * t600 + qJ(2) * t551 + t468 * t946 + t483 * t947;
t422 = -qJ(2) * t534 + t458 * t947 - t475 * t946;
t421 = -pkin(3) * t446 - pkin(4) * t489 - pkin(5) * t542;
t420 = -pkin(1) * t591 + qJ(2) * t535 + t458 * t946 + t475 * t947;
t419 = t454 * t956 - t1030;
t418 = t454 * t951 + t1029;
t417 = -pkin(8) * t520 - t459 * t952 + t469 * t957;
t416 = -t449 * t954 + t450 * t959;
t415 = t449 * t959 + t450 * t954;
t414 = t443 * t947 - t445 * t946;
t413 = t443 * t946 + t445 * t947;
t412 = t437 * t947 + t446 * t946;
t411 = t437 * t946 - t446 * t947;
t410 = -pkin(2) * t470 + pkin(3) * t703 - pkin(8) * t473 + pkin(9) * t1028 - t515 * t957;
t409 = -pkin(8) * t511 - t455 * t952 + t463 * t957;
t408 = -pkin(2) * t494 + pkin(3) * t1041 - pkin(8) * t521 - t459 * t957 - t469 * t952;
t407 = -t429 * t954 + t430 * t959;
t406 = t429 * t959 + t430 * t954;
t405 = -pkin(2) * t478 + pkin(3) * t615 - pkin(8) * t512 - t455 * t957 - t463 * t952;
t404 = -pkin(9) * t489 - t432 * t951 + t434 * t956;
t403 = -pkin(4) * t676 + pkin(9) * t491 + t432 * t956 + t434 * t951;
t402 = -pkin(7) * t470 + t431 * t958 - t451 * t953;
t401 = -pkin(7) * t494 + t417 * t958 - t442 * t953;
t400 = -qJ(2) * t506 + t424 * t947 - t428 * t946;
t399 = -pkin(1) * t547 + qJ(2) * t507 + t424 * t946 + t428 * t947;
t398 = -t418 * t952 + t419 * t957;
t397 = t418 * t957 + t419 * t952;
t396 = -pkin(9) * t418 - pkin(10) * t1029 - t444 * t951;
t395 = t398 * t958 + t621 * t953;
t394 = t398 * t953 - t621 * t958;
t393 = -pkin(7) * t478 + t409 * t958 - t433 * t953;
t392 = -pkin(4) * t621 + pkin(9) * t419 - pkin(10) * t1030 + t444 * t956;
t391 = -t411 * t954 + t412 * t959;
t390 = t411 * t959 + t412 * t954;
t389 = -qJ(2) * t429 + t402 * t947 - t410 * t946;
t388 = -pkin(3) * t397 - pkin(4) * t418 - pkin(5) * t453;
t387 = -qJ(2) * t461 + t401 * t947 - t408 * t946;
t386 = -pkin(8) * t446 - t403 * t952 + t404 * t957;
t385 = -pkin(1) * t470 + qJ(2) * t430 + t402 * t946 + t410 * t947;
t384 = -pkin(1) * t494 + qJ(2) * t462 + t401 * t946 + t408 * t947;
t383 = t395 * t947 + t397 * t946;
t382 = t395 * t946 - t397 * t947;
t381 = -qJ(2) * t449 + t393 * t947 - t405 * t946;
t380 = -pkin(2) * t436 + pkin(3) * t676 - pkin(8) * t448 - t403 * t957 - t404 * t952;
t379 = -pkin(1) * t478 + qJ(2) * t450 + t393 * t946 + t405 * t947;
t378 = -pkin(7) * t436 + t386 * t958 - t421 * t953;
t377 = -pkin(8) * t397 - t392 * t952 + t396 * t957;
t376 = -t382 * t954 + t383 * t959;
t375 = t382 * t959 + t383 * t954;
t374 = -pkin(2) * t394 + pkin(3) * t621 - pkin(8) * t398 - t392 * t957 - t396 * t952;
t373 = -qJ(2) * t411 + t378 * t947 - t380 * t946;
t372 = -pkin(1) * t436 + qJ(2) * t412 + t378 * t946 + t380 * t947;
t371 = -pkin(7) * t394 + t377 * t958 - t388 * t953;
t370 = -qJ(2) * t382 + t371 * t947 - t374 * t946;
t369 = -pkin(1) * t394 + qJ(2) * t383 + t371 * t946 + t374 * t947;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t910, -t911, 0, t863, 0, 0, 0, 0, 0, 0, -t1039, -t854, 0, t716, 0, 0, 0, 0, 0, 0, t751, t752, t797, t643, 0, 0, 0, 0, 0, 0, t596, t599, t579, t497, 0, 0, 0, 0, 0, 0, t482, t493, t457, t407, 0, 0, 0, 0, 0, 0, t416, t426, t391, t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t911, -t910, 0, t862, 0, 0, 0, 0, 0, 0, t854, -t1039, 0, -t1055, 0, 0, 0, 0, 0, 0, t749, t750, t796, t642, 0, 0, 0, 0, 0, 0, t595, t598, t578, t496, 0, 0, 0, 0, 0, 0, t481, t492, t456, t406, 0, 0, 0, 0, 0, 0, t415, t425, t390, t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t995, 0, 0, 0, 0, 0, 0, t864, t865, 0, -t746, 0, 0, 0, 0, 0, 0, t721, t727, t688, t609, 0, 0, 0, 0, 0, 0, t591, t600, t547, t470, 0, 0, 0, 0, 0, 0, t478, t494, t436, t394; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t911, 0, -t910, 0, t970, -t882, -t862, -pkin(6) * t862, 0, 0, t854, 0, -t1039, 0, t1053, -t1054, t1055, pkin(6) * t1055 + qJ(2) * t1016 - t769 * t954, -t839 * t954 + t841 * t959, -t810 * t954 + t812 * t959, -t835 * t954 + t837 * t959, -t838 * t954 + t840 * t959, -t834 * t954 + t836 * t959, -t871 * t954 + t872 * t959, -pkin(6) * t749 - t672 * t954 + t682 * t959, -pkin(6) * t750 - t673 * t954 + t683 * t959, -pkin(6) * t796 - t723 * t954 + t724 * t959, -pkin(6) * t642 - t594 * t954 + t622 * t959, -t691 * t954 + t693 * t959, -t651 * t954 + t652 * t959, -t678 * t954 + t680 * t959, -t690 * t954 + t692 * t959, -t679 * t954 + t681 * t959, -t735 * t954 + t736 * t959, -pkin(6) * t595 - t513 * t954 + t517 * t959, -pkin(6) * t598 - t514 * t954 + t518 * t959, -pkin(6) * t578 - t474 * t954 + t480 * t959, -pkin(6) * t496 - t452 * t954 + t460 * t959, -t553 * t954 + t555 * t959, -t508 * t954 + t509 * t959, -t564 * t954 + t566 * t959, -t552 * t954 + t554 * t959, -t565 * t954 + t567 * t959, -t607 * t954 + t608 * t959, -pkin(6) * t481 - t420 * t954 + t422 * t959, -pkin(6) * t492 - t423 * t954 + t427 * t959, -pkin(6) * t456 - t399 * t954 + t400 * t959, -pkin(6) * t406 - t385 * t954 + t389 * t959, -t439 * t954 + t441 * t959, -t413 * t954 + t414 * t959, -t464 * t954 + t466 * t959, -t438 * t954 + t440 * t959, -t465 * t954 + t467 * t959, -t501 * t954 + t502 * t959, -pkin(6) * t415 - t379 * t954 + t381 * t959, -pkin(6) * t425 - t384 * t954 + t387 * t959, -pkin(6) * t390 - t372 * t954 + t373 * t959, -pkin(6) * t375 - t369 * t954 + t370 * t959; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t910, 0, t911, 0, t882, t970, t863, pkin(6) * t863, 0, 0, t1039, 0, t854, 0, t1054, t1053, t716, pkin(6) * t716 + qJ(2) * t1017 + t769 * t959, t839 * t959 + t841 * t954, t810 * t959 + t812 * t954, t835 * t959 + t837 * t954, t838 * t959 + t840 * t954, t834 * t959 + t836 * t954, t871 * t959 + t872 * t954, pkin(6) * t751 + t672 * t959 + t682 * t954, pkin(6) * t752 + t673 * t959 + t683 * t954, pkin(6) * t797 + t723 * t959 + t724 * t954, pkin(6) * t643 + t594 * t959 + t622 * t954, t691 * t959 + t693 * t954, t651 * t959 + t652 * t954, t678 * t959 + t680 * t954, t690 * t959 + t692 * t954, t679 * t959 + t681 * t954, t735 * t959 + t736 * t954, pkin(6) * t596 + t513 * t959 + t517 * t954, pkin(6) * t599 + t514 * t959 + t518 * t954, pkin(6) * t579 + t474 * t959 + t480 * t954, pkin(6) * t497 + t452 * t959 + t460 * t954, t553 * t959 + t555 * t954, t508 * t959 + t509 * t954, t564 * t959 + t566 * t954, t552 * t959 + t554 * t954, t565 * t959 + t567 * t954, t607 * t959 + t608 * t954, pkin(6) * t482 + t420 * t959 + t422 * t954, pkin(6) * t493 + t423 * t959 + t427 * t954, pkin(6) * t457 + t399 * t959 + t400 * t954, pkin(6) * t407 + t385 * t959 + t389 * t954, t439 * t959 + t441 * t954, t413 * t959 + t414 * t954, t464 * t959 + t466 * t954, t438 * t959 + t440 * t954, t465 * t959 + t467 * t954, t501 * t959 + t502 * t954, pkin(6) * t416 + t379 * t959 + t381 * t954, pkin(6) * t426 + t384 * t959 + t387 * t954, pkin(6) * t391 + t372 * t959 + t373 * t954, pkin(6) * t376 + t369 * t959 + t370 * t954; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t919, t920, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t908 - t851, -pkin(1) * t907 - t852, 0, -pkin(1) * t784, t969 * t953, t903 * t958 + t906 * t953, t924 * t958 + t1001, -t968 * t958, t926 * t953 + t1002, 0, pkin(1) * t817 + pkin(2) * t906 + pkin(7) * t867 - t1010, pkin(1) * t818 - pkin(2) * t903 + pkin(7) * t869 + t1011, pkin(1) * t858 + pkin(2) * t913 + pkin(7) * t909 + t747, pkin(1) * t718 - pkin(2) * t831 + pkin(7) * t747, t801 * t953 - t980, t739 * t953 + t861 * t958, t791 * t953 + t807 * t958, t799 * t953 + t980, t792 * t953 + t802 * t958, t815 * t953 + t895 * t958, pkin(1) * t670 - pkin(2) * t767 + pkin(7) * t722 + t667 * t958 + t704 * t953, pkin(1) * t674 - pkin(2) * t772 + pkin(7) * t728 + t669 * t958 + t717 * t953, pkin(1) * t647 + pkin(7) * t689 + t953 * t602 + (-pkin(2) - t1033) * t738, pkin(1) * t558 + pkin(7) * t610 + (-pkin(2) + t971) * t636, t632 * t953 - t982, t576 * t953 + t794 * t958, t655 * t953 + t713 * t958, t631 * t953 + t982, t656 * t953 + t709 * t958, t685 * t953 + t889 * t958, pkin(1) * t534 - pkin(2) * t627 + pkin(7) * t592 + t516 * t953 + t531 * t958, pkin(1) * t550 - pkin(2) * t649 + pkin(7) * t601 + t522 * t953 + t533 * t958, pkin(1) * t506 - pkin(2) * t575 + pkin(7) * t548 + t435 * t953 + t532 * t958, pkin(1) * t429 - pkin(2) * t472 + pkin(7) * t471 + t431 * t953 + t451 * t958, t487 * t953 - t984, t447 * t953 + t720 * t958, t527 * t953 + t620 * t958, t486 * t953 + t984, t528 * t953 + t616 * t958, t563 * t953 + t883 * t958, pkin(1) * t449 - pkin(2) * t511 + pkin(7) * t479 + t409 * t953 + t433 * t958, pkin(1) * t461 - pkin(2) * t520 + pkin(7) * t495 + t417 * t953 + t442 * t958, pkin(1) * t411 - pkin(2) * t446 + pkin(7) * t437 + t386 * t953 + t421 * t958, pkin(1) * t382 - pkin(2) * t397 + pkin(7) * t395 + t377 * t953 + t388 * t958;];
tauB_reg  = t1;
