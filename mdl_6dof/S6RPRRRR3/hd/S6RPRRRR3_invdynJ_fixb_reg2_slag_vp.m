% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:02:38
% EndTime: 2019-03-09 07:03:01
% DurationCPUTime: 12.59s
% Computational Cost: add. (17950->700), mult. (38241->913), div. (0->0), fcn. (26433->18), ass. (0->320)
t305 = sin(pkin(11));
t277 = pkin(1) * t305 + pkin(7);
t256 = t277 * qJD(1);
t310 = sin(qJ(3));
t230 = t310 * t256;
t314 = cos(qJ(3));
t198 = qJD(2) * t314 - t230;
t363 = pkin(3) * t310 - pkin(8) * t314;
t241 = t363 * qJD(1);
t309 = sin(qJ(4));
t313 = cos(qJ(4));
t138 = -t198 * t309 + t241 * t313;
t422 = t313 * t314;
t349 = pkin(4) * t310 - pkin(9) * t422;
t316 = -pkin(9) - pkin(8);
t387 = qJD(4) * t316;
t503 = -qJD(1) * t349 + t313 * t387 - t138;
t139 = t198 * t313 + t241 * t309;
t414 = qJD(1) * t314;
t385 = t309 * t414;
t502 = -pkin(9) * t385 - t309 * t387 + t139;
t400 = t313 * qJD(3);
t415 = qJD(1) * t310;
t231 = t309 * t415 - t400;
t412 = qJD(3) * t309;
t233 = t313 * t415 + t412;
t308 = sin(qJ(5));
t312 = cos(qJ(5));
t158 = t231 * t312 + t233 * t308;
t307 = sin(qJ(6));
t355 = -t231 * t308 + t233 * t312;
t470 = cos(qJ(6));
t486 = -t158 * t307 + t355 * t470;
t83 = t158 * t470 + t307 * t355;
t456 = t83 * t486;
t427 = t308 * t309;
t234 = -t312 * t313 + t427;
t403 = qJD(5) * t312;
t406 = qJD(4) * t313;
t341 = -t312 * t406 - t313 * t403;
t396 = qJD(4) + qJD(5);
t419 = -t234 * t414 + t396 * t427 + t341;
t235 = t308 * t313 + t309 * t312;
t167 = t396 * t235;
t418 = -t235 * t414 + t167;
t272 = -qJD(4) + t414;
t410 = qJD(3) * t314;
t250 = t277 * qJDD(1);
t494 = qJD(2) * qJD(3) + t250;
t368 = -t314 * qJDD(2) + t256 * t410 + t310 * t494;
t125 = -qJDD(3) * pkin(3) + t368;
t300 = qJ(1) + pkin(11);
t288 = sin(t300);
t289 = cos(t300);
t362 = g(1) * t289 + g(2) * t288;
t457 = g(3) * t314;
t334 = t310 * t362 - t457;
t330 = -t125 + t334;
t501 = pkin(8) * qJD(4) * t272 + t330;
t492 = t486 ^ 2 - t83 ^ 2;
t265 = -qJD(5) + t272;
t199 = qJD(2) * t310 + t256 * t314;
t186 = qJD(3) * pkin(8) + t199;
t364 = pkin(3) * t314 + pkin(8) * t310;
t350 = -pkin(2) - t364;
t306 = cos(pkin(11));
t469 = pkin(1) * t306;
t223 = t350 - t469;
t188 = t223 * qJD(1);
t109 = -t186 * t309 + t188 * t313;
t95 = -pkin(9) * t233 + t109;
t88 = -pkin(4) * t272 + t95;
t110 = t186 * t313 + t188 * t309;
t96 = -pkin(9) * t231 + t110;
t92 = t308 * t96;
t45 = t312 * t88 - t92;
t483 = pkin(10) * t355;
t38 = t45 - t483;
t34 = -pkin(5) * t265 + t38;
t94 = t312 * t96;
t46 = t308 * t88 + t94;
t497 = pkin(10) * t158;
t39 = t46 - t497;
t451 = t307 * t39;
t10 = t34 * t470 - t451;
t392 = t470 * t39;
t11 = t307 * t34 + t392;
t500 = -t10 * t83 + t11 * t486;
t399 = qJD(1) * qJD(3);
t377 = t314 * t399;
t397 = t310 * qJDD(1);
t407 = qJD(4) * t310;
t493 = qJD(1) * t407 - qJDD(3);
t143 = -qJD(4) * t400 + (-t377 - t397) * t313 + t493 * t309;
t144 = t309 * (qJD(3) * (qJD(4) + t414) + t397) + t493 * t313;
t405 = qJD(5) * t308;
t348 = -t143 * t308 + t144 * t312 - t231 * t405 + t233 * t403;
t378 = qJD(6) * t470;
t402 = qJD(6) * t307;
t57 = t143 * t312 + t144 * t308 + t231 * t403 + t233 * t405;
t19 = t158 * t378 + t307 * t348 + t355 * t402 + t470 * t57;
t255 = -qJD(6) + t265;
t490 = -t255 * t83 - t19;
t294 = t314 * qJDD(1);
t227 = t310 * t399 + qJDD(4) - t294;
t222 = qJDD(5) + t227;
t389 = -t310 * qJDD(2) - t314 * t494;
t411 = qJD(3) * t310;
t133 = -t256 * t411 - t389;
t124 = qJDD(3) * pkin(8) + t133;
t244 = t363 * qJD(3);
t152 = qJD(1) * t244 + qJDD(1) * t223;
t136 = t313 * t152;
t48 = -qJD(4) * t110 - t124 * t309 + t136;
t33 = pkin(4) * t227 + pkin(9) * t143 + t48;
t408 = qJD(4) * t309;
t47 = t124 * t313 + t152 * t309 - t186 * t408 + t188 * t406;
t40 = -pkin(9) * t144 + t47;
t9 = -qJD(5) * t46 - t308 * t40 + t312 * t33;
t6 = pkin(5) * t222 + pkin(10) * t57 + t9;
t8 = t308 * t33 + t312 * t40 + t403 * t88 - t405 * t96;
t7 = -pkin(10) * t348 + t8;
t1 = t307 * t6 + t34 * t378 - t39 * t402 + t470 * t7;
t304 = qJ(4) + qJ(5);
t298 = qJ(6) + t304;
t284 = sin(t298);
t285 = cos(t298);
t434 = t288 * t314;
t171 = t284 * t289 - t285 * t434;
t432 = t289 * t314;
t173 = t284 * t288 + t285 * t432;
t458 = g(3) * t310;
t185 = -qJD(3) * pkin(3) - t198;
t151 = pkin(4) * t231 + t185;
t89 = pkin(5) * t158 + t151;
t489 = g(1) * t173 - g(2) * t171 + t285 * t458 + t83 * t89 - t1;
t259 = t316 * t309;
t260 = t316 * t313;
t450 = t259 * t403 + t260 * t405 + t308 * t503 - t312 * t502;
t175 = t259 * t308 - t260 * t312;
t449 = -qJD(5) * t175 + t308 * t502 + t312 * t503;
t20 = qJD(6) * t486 - t307 * t57 + t348 * t470;
t475 = -t255 * t486 - t20;
t170 = t284 * t434 + t285 * t289;
t172 = -t284 * t432 + t285 * t288;
t2 = -qJD(6) * t11 - t307 * t7 + t470 * t6;
t477 = -g(1) * t172 + g(2) * t170 + t284 * t458 - t486 * t89 + t2;
t496 = -pkin(5) * t415 + pkin(10) * t419 + t449;
t495 = pkin(10) * t418 - t450;
t439 = t158 * t355;
t379 = t310 * t406;
t382 = t309 * t410;
t339 = t379 + t382;
t491 = -t158 ^ 2 + t355 ^ 2;
t488 = -t158 * t265 - t57;
t296 = sin(t304);
t297 = cos(t304);
t430 = t297 * t314;
t180 = -t288 * t430 + t289 * t296;
t182 = t288 * t296 + t289 * t430;
t487 = g(1) * t182 - g(2) * t180 + t151 * t158 + t297 * t458 - t8;
t482 = t109 * t272 + t47;
t442 = pkin(1) * qJDD(1);
t201 = t234 * t310;
t203 = t313 * t223;
t424 = t310 * t313;
t435 = t277 * t309;
t126 = -pkin(9) * t424 + t203 + (-pkin(4) - t435) * t314;
t239 = t277 * t422;
t165 = t223 * t309 + t239;
t426 = t309 * t310;
t142 = -pkin(9) * t426 + t165;
t73 = t126 * t308 + t142 * t312;
t365 = -t199 + (-t385 + t408) * pkin(4);
t343 = qJD(3) * t235;
t338 = t314 * t343;
t321 = t201 * t396 - t338;
t425 = t309 * t314;
t193 = t288 * t425 + t289 * t313;
t195 = t288 * t313 - t289 * t425;
t479 = -g(1) * t195 + g(2) * t193;
t431 = t296 * t314;
t179 = t288 * t431 + t289 * t297;
t181 = t288 * t297 - t289 * t431;
t478 = -g(1) * t181 + g(2) * t179 + t296 * t458;
t476 = -t151 * t355 + t478 + t9;
t474 = -t265 * t355 - t348;
t380 = t314 * t400;
t340 = -t309 * t407 + t380;
t473 = t227 * t424 - t272 * t340;
t472 = t158 * t411 - t314 * t348;
t468 = pkin(4) * t309;
t467 = pkin(4) * t313;
t464 = g(1) * t288;
t459 = g(2) * t289;
t174 = t259 * t312 + t260 * t308;
t131 = -pkin(10) * t235 + t174;
t132 = -pkin(10) * t234 + t175;
t70 = t131 * t470 - t132 * t307;
t455 = qJD(6) * t70 + t307 * t496 - t470 * t495;
t71 = t131 * t307 + t132 * t470;
t454 = -qJD(6) * t71 + t307 * t495 + t470 * t496;
t200 = t235 * t310;
t122 = -t200 * t307 - t201 * t470;
t102 = t167 * t310 + t308 * t382 - t312 * t380;
t41 = t102 * t470 + t200 * t378 - t201 * t402 - t307 * t321;
t453 = -t122 * t20 + t41 * t83;
t452 = t102 * t158 + t201 * t348;
t50 = t312 * t95 - t92;
t163 = -t234 * t307 + t235 * t470;
t448 = -qJD(6) * t163 + t307 * t419 - t418 * t470;
t447 = t234 * t378 + t235 * t402 + t307 * t418 + t419 * t470;
t286 = pkin(4) * t312 + pkin(5);
t428 = t307 * t308;
t49 = -t308 * t95 - t94;
t43 = t49 + t497;
t44 = t50 - t483;
t446 = -t307 * t43 - t470 * t44 + t286 * t378 + (-t308 * t402 + (t312 * t470 - t428) * qJD(5)) * pkin(4);
t386 = t470 * t308;
t445 = t307 * t44 - t470 * t43 - t286 * t402 + (-t308 * t378 + (-t307 * t312 - t386) * qJD(5)) * pkin(4);
t444 = -t200 * t222 - t265 * t321;
t121 = t200 * t470 - t201 * t307;
t212 = qJDD(6) + t222;
t42 = qJD(6) * t122 - t307 * t102 - t321 * t470;
t443 = -t121 * t212 + t255 * t42;
t440 = t110 * t272;
t438 = t231 * t272;
t437 = t233 * t231;
t436 = t233 * t272;
t433 = t289 * t309;
t301 = -pkin(10) + t316;
t429 = t301 * t310;
t423 = t310 * t316;
t421 = -t144 * t424 - t231 * t380;
t420 = pkin(5) * t418 + t365;
t417 = t244 * t313 + t411 * t435;
t209 = pkin(4) * t426 + t277 * t310;
t302 = t310 ^ 2;
t303 = t314 ^ 2;
t416 = t302 - t303;
t278 = -pkin(2) - t469;
t257 = qJD(1) * t278;
t413 = qJD(3) * t231;
t409 = qJD(4) * t231;
t404 = qJD(5) * t309;
t401 = t151 * qJD(3);
t251 = qJDD(1) * t278;
t74 = t349 * qJD(3) + (-t239 + (pkin(9) * t310 - t223) * t309) * qJD(4) + t417;
t100 = t223 * t406 + t309 * t244 + (-t310 * t400 - t314 * t408) * t277;
t77 = -pkin(9) * t339 + t100;
t395 = t126 * t403 + t308 * t74 + t312 * t77;
t318 = qJD(1) ^ 2;
t390 = t310 * t318 * t314;
t168 = pkin(4) * t339 + t277 * t410;
t315 = cos(qJ(1));
t388 = pkin(1) * t315 + pkin(2) * t289 + pkin(7) * t288;
t287 = pkin(3) + t467;
t384 = t233 * t410;
t383 = t272 * t412;
t311 = sin(qJ(1));
t375 = -pkin(1) * t311 + pkin(7) * t289;
t246 = pkin(5) * t297 + t467;
t374 = t19 * t314 + t411 * t486;
t372 = t314 * t57 + t355 * t411;
t72 = t126 * t312 - t142 * t308;
t371 = t143 * t314 + t233 * t411;
t370 = -t143 + t409;
t367 = t233 * t379;
t366 = t310 * t377;
t361 = g(1) * t311 - g(2) * t315;
t360 = -t121 * t19 + t42 * t486;
t359 = -t122 * t212 - t255 * t41;
t358 = -t102 * t265 + t201 * t222;
t357 = -t109 * t313 - t110 * t309;
t356 = t109 * t309 - t110 * t313;
t240 = pkin(3) + t246;
t354 = t240 * t314 - t429;
t352 = t287 * t314 - t423;
t58 = -pkin(5) * t314 + pkin(10) * t201 + t72;
t59 = -pkin(10) * t200 + t73;
t28 = -t307 * t59 + t470 * t58;
t29 = t307 * t58 + t470 * t59;
t346 = t20 * t314 - t411 * t83;
t344 = -t227 * t309 + t272 * t406;
t342 = -qJD(1) * t257 + t362;
t337 = -pkin(8) * t227 - t185 * t272;
t317 = qJD(3) ^ 2;
t336 = t277 * t317 + 0.2e1 * t251 + t459;
t335 = 0.2e1 * qJD(3) * t257 - qJDD(3) * t277;
t76 = pkin(4) * t144 + t125;
t332 = -t314 * t362 - t458;
t26 = -qJD(5) * t73 - t308 * t77 + t312 * t74;
t328 = qJD(4) * t357 - t48 * t309 + t47 * t313;
t327 = t133 * t314 + t368 * t310 + (-t198 * t314 - t199 * t310) * qJD(3);
t326 = t341 + (t404 + t408) * t308;
t320 = -t200 * t57 - t321 * t355;
t261 = t310 * t464;
t249 = qJDD(3) * t314 - t310 * t317;
t248 = qJDD(3) * t310 + t314 * t317;
t245 = pkin(5) * t296 + t468;
t211 = pkin(4) * t386 + t286 * t307;
t210 = -pkin(4) * t428 + t286 * t470;
t196 = t288 * t309 + t289 * t422;
t194 = -t288 * t422 + t433;
t192 = pkin(5) * t234 - t287;
t164 = -t277 * t425 + t203;
t162 = t234 * t470 + t235 * t307;
t145 = pkin(5) * t200 + t209;
t111 = pkin(4) * t233 + pkin(5) * t355;
t101 = -qJD(4) * t165 + t417;
t67 = -pkin(5) * t321 + t168;
t30 = pkin(5) * t348 + t76;
t25 = -t142 * t405 + t395;
t18 = (-t396 * t424 - t382) * pkin(10) * t312 + (-qJD(5) * t142 + (t310 * t404 - t340) * pkin(10)) * t308 + t395;
t17 = pkin(5) * t411 + pkin(10) * t102 + t26;
t13 = t38 * t470 - t451;
t12 = -t307 * t38 - t392;
t4 = -qJD(6) * t29 + t17 * t470 - t18 * t307;
t3 = qJD(6) * t28 + t17 * t307 + t18 * t470;
t5 = [0, 0, 0, 0, 0, qJDD(1), t361, g(1) * t315 + g(2) * t311, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t306 * t442 - t459 + t464, -0.2e1 * t305 * t442 + t362, 0 (t361 + (t305 ^ 2 + t306 ^ 2) * t442) * pkin(1), qJDD(1) * t302 + 0.2e1 * t366, 0.2e1 * t294 * t310 - 0.2e1 * t399 * t416, t248, qJDD(1) * t303 - 0.2e1 * t366, t249, 0, t335 * t310 + (-t336 + t464) * t314, t310 * t336 + t314 * t335 - t261 (t302 + t303) * t250 + t327 - t362, t251 * t278 - g(1) * (-pkin(2) * t288 + t375) - g(2) * t388 + t327 * t277, -t143 * t424 + t233 * t340, -t367 + (-t384 + (t143 + t409) * t310) * t309 + t421, t371 + t473, t144 * t426 + t231 * t339 (t144 + t383) * t314 + (t344 - t413) * t310, -t227 * t314 - t272 * t411, -g(1) * t194 - g(2) * t196 - t101 * t272 + t164 * t227 + (-t48 + (t185 * t309 + t231 * t277) * qJD(3)) * t314 + (qJD(3) * t109 + t125 * t309 + t144 * t277 + t185 * t406) * t310, -g(1) * t193 - g(2) * t195 + t100 * t272 - t165 * t227 + (t47 + (t185 * t313 + t233 * t277) * qJD(3)) * t314 + (-qJD(3) * t110 + t125 * t313 - t143 * t277 - t185 * t408) * t310, -t100 * t231 - t101 * t233 + t143 * t164 - t144 * t165 + t261 + t357 * t410 + (qJD(4) * t356 - t309 * t47 - t313 * t48 - t459) * t310, t47 * t165 + t110 * t100 + t48 * t164 + t109 * t101 - g(1) * t375 - g(2) * (t289 * t364 + t388) - t350 * t464 + (t125 * t310 + t185 * t410) * t277, -t102 * t355 + t201 * t57, -t320 + t452, -t358 + t372, -t158 * t321 + t200 * t348, t444 - t472, -t222 * t314 - t265 * t411, -t26 * t265 + t72 * t222 + t168 * t158 + t209 * t348 + t76 * t200 - g(1) * t180 - g(2) * t182 + (t235 * t401 - t9) * t314 + (t45 * qJD(3) - t151 * t326) * t310, -g(1) * t179 - g(2) * t181 - t102 * t151 + t168 * t355 - t201 * t76 - t209 * t57 - t222 * t73 + t25 * t265 + t314 * t8 - t411 * t46, -t25 * t158 - t73 * t348 - t8 * t200 - t26 * t355 + t72 * t57 + t9 * t201 + t45 * t102 + t261 - t46 * t338 + (t326 * t46 - t459) * t310, t8 * t73 + t46 * t25 + t9 * t72 + t45 * t26 + t76 * t209 + t151 * t168 - g(1) * (pkin(4) * t433 + t375) - g(2) * (t287 * t432 - t289 * t423 + t388) + (-g(1) * (-pkin(2) - t352) - g(2) * t468) * t288, -t122 * t19 - t41 * t486, -t360 + t453, -t359 + t374, t121 * t20 + t42 * t83, t346 + t443, -t212 * t314 - t255 * t411, -g(1) * t171 - g(2) * t173 + t10 * t411 + t121 * t30 + t145 * t20 - t2 * t314 + t212 * t28 - t255 * t4 + t42 * t89 + t67 * t83, -g(1) * t170 - g(2) * t172 + t1 * t314 - t11 * t411 + t122 * t30 - t145 * t19 - t212 * t29 + t255 * t3 - t41 * t89 + t486 * t67, -t1 * t121 + t10 * t41 - t11 * t42 - t122 * t2 + t19 * t28 - t20 * t29 - t3 * t83 - t310 * t459 - t4 * t486 + t261, t1 * t29 + t11 * t3 + t2 * t28 + t10 * t4 + t30 * t145 + t89 * t67 - g(1) * (t245 * t289 + t375) - g(2) * (t240 * t432 - t289 * t429 + t388) + (-g(1) * (-pkin(2) - t354) - g(2) * t245) * t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t249, -t248, 0, t133 * t310 - t368 * t314 - g(3) + (-t198 * t310 + t199 * t314) * qJD(3), 0, 0, 0, 0, 0, 0 (-t144 + t383) * t314 + (t344 + t413) * t310, t371 - t473, t367 + (t310 * t370 + t384) * t309 + t421, -g(3) + (-qJD(3) * t356 - t125) * t314 + (qJD(3) * t185 + t328) * t310, 0, 0, 0, 0, 0, 0, t444 + t472, t358 + t372, t320 + t452, -t46 * t102 - t9 * t200 - t8 * t201 - g(3) + (-t343 * t45 - t76) * t314 + (t326 * t45 + t401) * t310, 0, 0, 0, 0, 0, 0, -t346 + t443, t359 + t374, t360 + t453, t1 * t122 - t10 * t42 - t11 * t41 - t121 * t2 - t30 * t314 + t411 * t89 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t390, t416 * t318, t397, t390, t294, qJDD(3), qJD(3) * t199 + t310 * t342 - t368 - t457, t458 + (t198 + t230) * qJD(3) + t342 * t314 + t389, 0, 0, -t143 * t309 - t313 * t436 (-t143 + t438) * t313 + (-t144 + t436) * t309 (-t233 * t310 + t272 * t422) * qJD(1) - t344, -t144 * t313 - t309 * t438, t272 * t408 + t227 * t313 + (t231 * t310 - t272 * t425) * qJD(1), t272 * t415, -pkin(3) * t144 - t109 * t415 + t138 * t272 - t199 * t231 + t309 * t337 + t313 * t501, pkin(3) * t143 + t110 * t415 - t139 * t272 - t199 * t233 - t309 * t501 + t313 * t337, t138 * t233 + t139 * t231 + ((qJD(4) * t233 - t144) * pkin(8) + t482) * t313 + (pkin(8) * t370 + t440 - t48) * t309 + t332, -t109 * t138 - t110 * t139 - t185 * t199 + t330 * pkin(3) + (t328 + t332) * pkin(8), -t235 * t57 - t355 * t419, t158 * t419 + t234 * t57 - t235 * t348 - t355 * t418, t222 * t235 + t265 * t419 - t355 * t415, t158 * t418 + t234 * t348, t158 * t415 - t222 * t234 + t265 * t418, t265 * t415, t151 * t418 + t158 * t365 + t174 * t222 + t76 * t234 - t265 * t449 - t287 * t348 + t297 * t334 - t415 * t45, -t151 * t419 - t175 * t222 + t235 * t76 + t265 * t450 + t287 * t57 - t296 * t334 + t355 * t365 + t415 * t46, -t158 * t450 + t174 * t57 - t175 * t348 - t8 * t234 - t9 * t235 - t355 * t449 - t418 * t46 + t419 * t45 + t332, -g(3) * t352 + t151 * t365 + t9 * t174 + t8 * t175 - t76 * t287 + t449 * t45 + t450 * t46 + t362 * (t287 * t310 + t314 * t316) -t163 * t19 - t447 * t486, t162 * t19 - t163 * t20 + t447 * t83 + t448 * t486, t163 * t212 + t255 * t447 - t415 * t486, t162 * t20 - t448 * t83, -t162 * t212 - t255 * t448 + t415 * t83, t255 * t415, -t10 * t415 + t162 * t30 + t192 * t20 + t212 * t70 - t255 * t454 + t285 * t334 + t420 * t83 - t448 * t89, t11 * t415 + t163 * t30 - t19 * t192 - t212 * t71 + t255 * t455 - t284 * t334 + t420 * t486 - t447 * t89, -t1 * t162 + t10 * t447 + t11 * t448 - t163 * t2 + t19 * t70 - t20 * t71 - t454 * t486 - t455 * t83 + t332, -g(3) * t354 + t1 * t71 + t10 * t454 + t11 * t455 + t30 * t192 + t2 * t70 + t420 * t89 + t362 * (t240 * t310 + t301 * t314); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t437, -t231 ^ 2 + t233 ^ 2, -t143 - t438, -t437, -t144 - t436, t227, -t186 * t406 - t440 - t185 * t233 + t136 + (-qJD(4) * t188 - t124 + t458) * t309 + t479, g(1) * t196 - g(2) * t194 + g(3) * t424 + t185 * t231 - t482, 0, 0, t439, t491, t488, -t439, t474, t222, t265 * t49 + (-t158 * t233 + t222 * t312 + t265 * t405) * pkin(4) + t476, -t265 * t50 + (-t222 * t308 - t233 * t355 + t265 * t403) * pkin(4) + t487, t46 * t355 + t50 * t158 - t45 * t158 + t49 * t355 + (-t308 * t348 + t312 * t57 + (-t158 * t312 + t308 * t355) * qJD(5)) * pkin(4), -t45 * t49 - t46 * t50 + (t8 * t308 + t9 * t312 - t151 * t233 + g(3) * t426 + (-t308 * t45 + t312 * t46) * qJD(5) + t479) * pkin(4), t456, t492, t490, -t456, t475, t212, -t111 * t83 + t210 * t212 - t255 * t445 + t477, -t111 * t486 - t211 * t212 + t255 * t446 + t489, t19 * t210 - t20 * t211 - t445 * t486 - t446 * t83 + t500, t1 * t211 + t2 * t210 - t89 * t111 - g(1) * (-t245 * t432 + t246 * t288) - g(2) * (-t245 * t434 - t246 * t289) + t245 * t458 + t446 * t11 + t445 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t439, t491, t488, -t439, t474, t222, -t265 * t46 + t476, -t265 * t45 + t487, 0, 0, t456, t492, t490, -t456, t475, t212, t12 * t255 + (t212 * t470 + t255 * t402 - t355 * t83) * pkin(5) + t477, -t13 * t255 + (-t212 * t307 + t255 * t378 - t355 * t486) * pkin(5) + t489, t12 * t486 + t13 * t83 + (t470 * t19 - t20 * t307 + (t307 * t486 - t470 * t83) * qJD(6)) * pkin(5) + t500, -t10 * t12 - t11 * t13 + (t1 * t307 + t2 * t470 - t89 * t355 + (-t10 * t307 + t11 * t470) * qJD(6) + t478) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, t492, t490, -t456, t475, t212, -t11 * t255 + t477, -t10 * t255 + t489, 0, 0;];
tau_reg  = t5;
