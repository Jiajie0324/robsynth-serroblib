% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:05:39
% EndTime: 2019-03-09 14:06:12
% DurationCPUTime: 19.08s
% Computational Cost: add. (32247->799), mult. (74128->1043), div. (0->0), fcn. (56565->18), ass. (0->346)
t373 = sin(pkin(11));
t374 = cos(pkin(11));
t378 = sin(qJ(4));
t382 = cos(qJ(4));
t311 = t373 * t382 + t374 * t378;
t289 = t311 * qJD(4);
t383 = cos(qJ(2));
t404 = t311 * t383;
t467 = qJD(1) * t404 - t289;
t474 = t382 * t374;
t310 = t373 * t378 - t474;
t461 = qJD(1) * t383;
t455 = qJD(4) * t382;
t456 = qJD(4) * t378;
t522 = -t373 * t456 + t374 * t455;
t551 = t310 * t461 + t522;
t379 = sin(qJ(2));
t462 = qJD(1) * t379;
t443 = t373 * t462;
t459 = qJD(2) * t374;
t302 = t443 - t459;
t441 = t374 * t462;
t460 = qJD(2) * t373;
t304 = t441 + t460;
t220 = t302 * t378 - t304 * t382;
t221 = t382 * t302 + t304 * t378;
t377 = sin(qJ(5));
t381 = cos(qJ(5));
t148 = t220 * t381 + t221 * t377;
t152 = t220 * t377 - t381 * t221;
t376 = sin(qJ(6));
t513 = cos(qJ(6));
t79 = t148 * t513 - t376 * t152;
t555 = t79 ^ 2;
t84 = t376 * t148 + t152 * t513;
t554 = t84 ^ 2;
t343 = -qJD(4) + t461;
t333 = -qJD(5) + t343;
t327 = -qJD(6) + t333;
t553 = t327 * t84;
t552 = t79 * t327;
t420 = pkin(2) * t379 - qJ(3) * t383;
t314 = t420 * qJD(1);
t242 = pkin(7) * t443 + t374 * t314;
t478 = t374 * t383;
t409 = pkin(3) * t379 - pkin(8) * t478;
t203 = qJD(1) * t409 + t242;
t290 = t373 * t314;
t479 = t374 * t379;
t480 = t373 * t383;
t405 = -pkin(7) * t479 - pkin(8) * t480;
t227 = qJD(1) * t405 + t290;
t497 = pkin(8) + qJ(3);
t325 = t497 * t373;
t326 = t497 * t374;
t469 = qJD(3) * t474 - t382 * t227 - t325 * t455 + (-qJD(3) * t373 - qJD(4) * t326 - t203) * t378;
t237 = -t378 * t325 + t382 * t326;
t468 = -t311 * qJD(3) - qJD(4) * t237 - t382 * t203 + t227 * t378;
t550 = -pkin(4) * t462 - pkin(9) * t551 + t468;
t549 = -pkin(9) * t467 - t469;
t548 = t148 ^ 2;
t547 = t152 ^ 2;
t498 = t84 * t79;
t546 = t148 * t333;
t545 = t152 * t333;
t453 = qJD(5) * t381;
t454 = qJD(5) * t377;
t471 = t310 * t453 + t311 * t454 - t377 * t467 - t381 * t551;
t226 = -t310 * t377 + t311 * t381;
t470 = qJD(5) * t226 + t377 * t551 - t381 * t467;
t448 = t379 * qJDD(1);
t353 = pkin(7) * t448;
t450 = qJD(1) * qJD(2);
t435 = t383 * t450;
t279 = -qJDD(2) * pkin(2) + pkin(7) * t435 + qJDD(3) + t353;
t368 = g(3) * t383;
t380 = sin(qJ(1));
t384 = cos(qJ(1));
t423 = g(1) * t384 + g(2) * t380;
t398 = -t423 * t379 + t368;
t393 = t279 + t398;
t534 = -t554 + t555;
t421 = pkin(2) * t383 + qJ(3) * t379;
t320 = -pkin(1) - t421;
t292 = t320 * qJD(1);
t355 = pkin(7) * t461;
t328 = qJD(2) * qJ(3) + t355;
t229 = t374 * t292 - t328 * t373;
t172 = -pkin(3) * t461 - pkin(8) * t304 + t229;
t230 = t373 * t292 + t374 * t328;
t177 = -pkin(8) * t302 + t230;
t108 = t382 * t172 - t177 * t378;
t93 = pkin(9) * t220 + t108;
t88 = -pkin(4) * t343 + t93;
t109 = t172 * t378 + t177 * t382;
t94 = -pkin(9) * t221 + t109;
t90 = t377 * t94;
t46 = t381 * t88 - t90;
t525 = pkin(10) * t148;
t36 = t46 + t525;
t34 = -pkin(5) * t333 + t36;
t92 = t381 * t94;
t47 = t377 * t88 + t92;
t539 = pkin(10) * t152;
t37 = t47 + t539;
t492 = t376 * t37;
t12 = t34 * t513 - t492;
t445 = t513 * t37;
t13 = t376 * t34 + t445;
t544 = t12 * t84 - t13 * t79;
t437 = qJD(6) * t513;
t452 = qJD(6) * t376;
t357 = t374 * qJDD(2);
t403 = t435 + t448;
t251 = t373 * t403 - t357;
t449 = qJDD(2) * t373;
t252 = t374 * t403 + t449;
t133 = t378 * t251 - t382 * t252 + t302 * t455 + t304 * t456;
t134 = -qJD(4) * t220 + t382 * t251 + t252 * t378;
t55 = t381 * t133 + t377 * t134 - t220 * t454 + t221 * t453;
t56 = -t377 * t133 + t381 * t134 - t220 * t453 - t221 * t454;
t20 = -t148 * t452 - t152 * t437 + t376 * t56 + t513 * t55;
t532 = -t20 + t553;
t360 = t383 * qJDD(1);
t402 = t379 * t450 - t360;
t309 = qJDD(4) + t402;
t293 = qJDD(5) + t309;
t282 = qJD(2) * t420 - qJD(3) * t379;
t217 = qJD(1) * t282 + qJDD(1) * t320;
t265 = -pkin(7) * t402 + qJDD(2) * qJ(3) + qJD(2) * qJD(3);
t163 = t374 * t217 - t265 * t373;
t116 = pkin(3) * t402 - pkin(8) * t252 + t163;
t164 = t373 * t217 + t374 * t265;
t136 = -pkin(8) * t251 + t164;
t43 = -qJD(4) * t109 + t382 * t116 - t136 * t378;
t30 = pkin(4) * t309 + pkin(9) * t133 + t43;
t42 = t378 * t116 + t382 * t136 + t172 * t455 - t177 * t456;
t32 = -pkin(9) * t134 + t42;
t9 = -qJD(5) * t47 + t381 * t30 - t32 * t377;
t6 = pkin(5) * t293 + pkin(10) * t55 + t9;
t428 = -t377 * t30 - t381 * t32 - t88 * t453 + t94 * t454;
t7 = -pkin(10) * t56 - t428;
t1 = t34 * t437 - t37 * t452 + t376 * t6 + t513 * t7;
t370 = pkin(11) + qJ(4);
t361 = qJ(5) + t370;
t351 = qJ(6) + t361;
t337 = sin(t351);
t338 = cos(t351);
t475 = t380 * t383;
t245 = t337 * t384 - t338 * t475;
t473 = t383 * t384;
t247 = t337 * t380 + t338 * t473;
t499 = g(3) * t379;
t319 = -qJD(2) * pkin(2) + pkin(7) * t462 + qJD(3);
t241 = pkin(3) * t302 + t319;
t167 = pkin(4) * t221 + t241;
t98 = -pkin(5) * t152 + t167;
t531 = g(1) * t247 - g(2) * t245 + t338 * t499 - t84 * t98 - t1;
t236 = -t382 * t325 - t326 * t378;
t196 = -pkin(9) * t311 + t236;
t197 = -pkin(9) * t310 + t237;
t494 = t196 * t453 - t197 * t454 + t377 * t550 - t549 * t381;
t131 = t377 * t196 + t381 * t197;
t493 = -qJD(5) * t131 + t549 * t377 + t381 * t550;
t21 = -qJD(6) * t79 - t376 * t55 + t513 * t56;
t516 = -t21 + t552;
t2 = -qJD(6) * t13 - t376 * t7 + t513 * t6;
t244 = t337 * t475 + t338 * t384;
t246 = -t337 * t473 + t338 * t380;
t518 = -g(1) * t246 + g(2) * t244 + t337 * t499 + t79 * t98 + t2;
t541 = t220 ^ 2;
t540 = t221 ^ 2;
t538 = -pkin(10) * t470 + t494;
t537 = -pkin(5) * t462 + pkin(10) * t471 + t493;
t486 = t152 * t148;
t536 = t220 * t343;
t535 = t221 * t343;
t533 = -t547 + t548;
t530 = -t55 + t545;
t348 = sin(t361);
t349 = cos(t361);
t254 = t348 * t384 - t349 * t475;
t256 = t348 * t380 + t349 * t473;
t529 = g(1) * t256 - g(2) * t254 - t152 * t167 + t349 * t499 + t428;
t301 = t374 * t320;
t228 = -pkin(8) * t479 + t301 + (-pkin(7) * t373 - pkin(3)) * t383;
t258 = pkin(7) * t478 + t373 * t320;
t481 = t373 * t379;
t235 = -pkin(8) * t481 + t258;
t158 = t382 * t228 - t235 * t378;
t278 = t310 * t379;
t123 = -pkin(4) * t383 + pkin(9) * t278 + t158;
t159 = t378 * t228 + t382 * t235;
t277 = t311 * t379;
t132 = -pkin(9) * t277 + t159;
t74 = t377 * t123 + t381 * t132;
t442 = t373 * t461;
t294 = pkin(3) * t442 + t355;
t430 = -pkin(4) * t467 - t294;
t371 = t379 ^ 2;
t372 = t383 ^ 2;
t464 = t371 - t372;
t426 = qJD(1) * t464;
t253 = t348 * t475 + t349 * t384;
t255 = -t348 * t473 + t349 * t380;
t521 = -g(1) * t255 + g(2) * t253 + t348 * t499;
t358 = sin(t370);
t359 = cos(t370);
t267 = t358 * t475 + t359 * t384;
t269 = -t358 * t473 + t359 * t380;
t520 = -g(1) * t269 + g(2) * t267 + t358 * t499;
t519 = -t56 + t546;
t517 = t148 * t167 + t521 + t9;
t515 = -0.2e1 * pkin(1);
t514 = pkin(5) * t56;
t512 = pkin(3) * t251;
t511 = pkin(4) * t134;
t509 = pkin(7) * t302;
t508 = pkin(7) * t304;
t505 = g(1) * t380;
t500 = g(2) * t384;
t363 = t373 * pkin(3);
t130 = t381 * t196 - t197 * t377;
t102 = -pkin(10) * t226 + t130;
t225 = t381 * t310 + t311 * t377;
t103 = -pkin(10) * t225 + t131;
t57 = t102 * t513 - t376 * t103;
t496 = qJD(6) * t57 + t376 * t537 + t513 * t538;
t58 = t376 * t102 + t103 * t513;
t495 = -qJD(6) * t58 - t376 * t538 + t513 * t537;
t49 = t381 * t93 - t90;
t157 = -t376 * t225 + t226 * t513;
t491 = -qJD(6) * t157 + t376 * t471 - t470 * t513;
t490 = t225 * t437 + t226 * t452 + t376 * t470 + t471 * t513;
t352 = pkin(4) * t381 + pkin(5);
t48 = -t377 * t93 - t92;
t40 = t48 - t539;
t41 = t49 + t525;
t477 = t376 * t377;
t489 = -t376 * t40 - t513 * t41 + t352 * t437 + (-t377 * t452 + (t381 * t513 - t477) * qJD(5)) * pkin(4);
t444 = t513 * t377;
t488 = t376 * t41 - t513 * t40 - t352 * t452 + (-t377 * t437 + (-t376 * t381 - t444) * qJD(5)) * pkin(4);
t487 = pkin(7) * qJDD(1);
t485 = t220 * t221;
t484 = t251 * t374;
t483 = t252 * t373;
t386 = qJD(1) ^ 2;
t482 = t372 * t386;
t476 = t379 * t384;
t472 = pkin(5) * t470 + t430;
t458 = qJD(2) * t379;
t446 = pkin(7) * t458;
t233 = t374 * t282 + t373 * t446;
t457 = qJD(2) * t383;
t440 = t373 * t457;
t295 = pkin(3) * t440 + pkin(7) * t457;
t315 = pkin(3) * t481 + t379 * pkin(7);
t465 = t384 * pkin(1) + t380 * pkin(7);
t463 = t371 + t372;
t451 = qJD(3) - t319;
t369 = -pkin(9) - t497;
t350 = pkin(3) * t374 + pkin(2);
t434 = t373 * t448;
t433 = t373 * t360;
t432 = t374 * t448;
t431 = t374 * t360;
t345 = pkin(4) * t358;
t296 = -pkin(5) * t348 - t345;
t73 = t381 * t123 - t132 * t377;
t346 = pkin(4) * t359;
t313 = t346 + t350;
t425 = t379 * t435;
t344 = t379 * t505;
t424 = -g(2) * t476 + t344;
t199 = qJD(2) * t404 + t379 * t522;
t168 = pkin(4) * t199 + t295;
t232 = pkin(4) * t277 + t315;
t422 = -t500 + t505;
t336 = pkin(5) * t349;
t266 = t313 + t336;
t362 = -pkin(10) + t369;
t418 = t266 * t383 - t362 * t379;
t191 = -t277 * t377 - t278 * t381;
t416 = t302 * t374 + t304 * t373;
t415 = t313 * t383 - t369 * t379;
t413 = t350 * t383 + t379 * t497;
t262 = pkin(4) * t310 - t350;
t411 = qJD(1) * (t302 + t459);
t410 = qJD(1) * (-t304 + t460);
t59 = -pkin(5) * t383 - pkin(10) * t191 + t73;
t190 = t381 * t277 - t278 * t377;
t60 = -pkin(10) * t190 + t74;
t26 = -t376 * t60 + t513 * t59;
t27 = t376 * t59 + t513 * t60;
t407 = -pkin(7) * qJDD(2) + t450 * t515;
t121 = -t376 * t190 + t191 * t513;
t198 = t289 * t379 + t378 * t440 - t457 * t474;
t192 = qJD(2) * t409 + t233;
t263 = t373 * t282;
t208 = qJD(2) * t405 + t263;
t76 = -qJD(4) * t159 + t382 * t192 - t208 * t378;
t69 = pkin(4) * t458 + pkin(9) * t198 + t76;
t75 = t378 * t192 + t382 * t208 + t228 * t455 - t235 * t456;
t71 = -pkin(9) * t199 + t75;
t22 = t123 * t453 - t132 * t454 + t377 * t69 + t381 * t71;
t401 = pkin(1) * t386 + t423;
t385 = qJD(2) ^ 2;
t400 = pkin(7) * t385 + qJDD(1) * t515 + t500;
t193 = t279 + t512;
t397 = -t383 * t423 - t499;
t101 = t193 + t511;
t23 = -qJD(5) * t74 - t377 * t71 + t381 * t69;
t392 = t393 + t512;
t388 = t392 + t511;
t366 = t384 * pkin(7);
t339 = t379 * t386 * t383;
t316 = t345 + t363;
t299 = qJDD(1) * t372 - 0.2e1 * t425;
t297 = t336 + t346;
t287 = qJDD(6) + t293;
t285 = pkin(4) * t444 + t376 * t352;
t284 = -pkin(4) * t477 + t352 * t513;
t271 = -t296 + t363;
t270 = t358 * t380 + t359 * t473;
t268 = t358 * t384 - t359 * t475;
t257 = -pkin(7) * t480 + t301;
t243 = -pkin(7) * t441 + t290;
t234 = -t374 * t446 + t263;
t171 = pkin(5) * t225 + t262;
t156 = t225 * t513 + t226 * t376;
t146 = pkin(5) * t190 + t232;
t120 = t190 * t513 + t191 * t376;
t104 = -pkin(4) * t220 - pkin(5) * t148;
t100 = qJD(5) * t191 - t198 * t377 + t381 * t199;
t99 = t381 * t198 + t377 * t199 + t277 * t453 - t278 * t454;
t72 = pkin(5) * t100 + t168;
t39 = qJD(6) * t121 + t100 * t513 - t376 * t99;
t38 = t376 * t100 + t190 * t437 + t191 * t452 + t513 * t99;
t33 = t101 + t514;
t17 = -pkin(10) * t100 + t22;
t16 = pkin(5) * t458 + pkin(10) * t99 + t23;
t15 = t36 * t513 - t492;
t14 = -t376 * t36 - t445;
t4 = -qJD(6) * t27 + t16 * t513 - t376 * t17;
t3 = qJD(6) * t26 + t376 * t16 + t17 * t513;
t5 = [0, 0, 0, 0, 0, qJDD(1), t422, t423, 0, 0, qJDD(1) * t371 + 0.2e1 * t425, -0.2e1 * qJD(2) * t426 + 0.2e1 * t360 * t379, qJDD(2) * t379 + t383 * t385, t299, qJDD(2) * t383 - t379 * t385, 0, t407 * t379 + (-t400 + t505) * t383, t379 * t400 + t383 * t407 - t344, 0.2e1 * t463 * t487 - t423, -g(1) * (-pkin(1) * t380 + t366) - g(2) * t465 + (pkin(7) ^ 2 * t463 + pkin(1) ^ 2) * qJDD(1) (t252 * t379 + t304 * t457) * t374 (-t483 - t484) * t379 - t416 * t457 (-t252 - t432) * t383 + (t304 * t379 + t374 * t426) * qJD(2) (t251 * t379 + t302 * t457) * t373 (t251 + t434) * t383 + (-t302 * t379 - t373 * t426) * qJD(2), t299, -t423 * t373 + (pkin(7) * t251 + t279 * t373 + (qJD(1) * t257 + t229) * qJD(2)) * t379 + (-t233 * qJD(1) - t257 * qJDD(1) - t163 + t422 * t374 + (t319 * t373 + t509) * qJD(2)) * t383, -t423 * t374 + (pkin(7) * t252 + t279 * t374 + (-qJD(1) * t258 - t230) * qJD(2)) * t379 + (t234 * qJD(1) + t258 * qJDD(1) + t164 - t422 * t373 + (t319 * t374 + t508) * qJD(2)) * t383, -t233 * t304 - t234 * t302 - t251 * t258 - t252 * t257 + t344 + (-t229 * t374 - t230 * t373) * t457 + (-t163 * t374 - t164 * t373 - t500) * t379, t164 * t258 + t230 * t234 + t163 * t257 + t229 * t233 - g(1) * t366 - g(2) * (t384 * t421 + t465) - t320 * t505 + (t279 * t379 + t319 * t457) * pkin(7), t133 * t278 + t198 * t220, t133 * t277 + t134 * t278 + t198 * t221 + t199 * t220, t133 * t383 + t198 * t343 - t220 * t458 - t278 * t309, t134 * t277 + t199 * t221, t134 * t383 + t199 * t343 - t221 * t458 - t277 * t309, -t309 * t383 - t343 * t458, -g(1) * t268 - g(2) * t270 + t108 * t458 + t134 * t315 + t158 * t309 + t193 * t277 + t199 * t241 + t221 * t295 - t343 * t76 - t383 * t43, -g(1) * t267 - g(2) * t269 - t109 * t458 - t133 * t315 - t159 * t309 - t193 * t278 - t198 * t241 - t220 * t295 + t343 * t75 + t383 * t42, t108 * t198 - t109 * t199 + t133 * t158 - t134 * t159 + t220 * t76 - t221 * t75 - t277 * t42 + t278 * t43 + t424, t42 * t159 + t109 * t75 + t43 * t158 + t108 * t76 + t193 * t315 + t241 * t295 - g(1) * (t384 * t363 + t366) - g(2) * (t350 * t473 + t476 * t497 + t465) + (-g(1) * (-pkin(1) - t413) - g(2) * t363) * t380, t148 * t99 - t191 * t55, t100 * t148 - t152 * t99 + t190 * t55 - t191 * t56, -t148 * t458 + t191 * t293 + t333 * t99 + t383 * t55, -t100 * t152 + t190 * t56, t100 * t333 + t152 * t458 - t190 * t293 + t383 * t56, -t293 * t383 - t333 * t458, -g(1) * t254 - g(2) * t256 + t100 * t167 + t101 * t190 - t152 * t168 - t23 * t333 + t232 * t56 + t293 * t73 - t383 * t9 + t458 * t46, -g(1) * t253 - g(2) * t255 + t101 * t191 - t148 * t168 - t167 * t99 + t22 * t333 - t232 * t55 - t293 * t74 - t383 * t428 - t458 * t47, -t100 * t47 + t148 * t23 + t152 * t22 + t190 * t428 - t191 * t9 + t46 * t99 + t55 * t73 - t56 * t74 + t424, -t428 * t74 + t47 * t22 + t9 * t73 + t46 * t23 + t101 * t232 + t167 * t168 - g(1) * (t316 * t384 + t366) - g(2) * (t313 * t473 - t369 * t476 + t465) + (-g(1) * (-pkin(1) - t415) - g(2) * t316) * t380, -t121 * t20 + t38 * t79, t120 * t20 - t121 * t21 - t38 * t84 + t39 * t79, t121 * t287 + t20 * t383 + t327 * t38 - t458 * t79, t120 * t21 - t39 * t84, -t120 * t287 + t21 * t383 + t327 * t39 + t458 * t84, -t287 * t383 - t327 * t458, -g(1) * t245 - g(2) * t247 + t12 * t458 + t120 * t33 + t146 * t21 - t2 * t383 + t26 * t287 - t327 * t4 + t39 * t98 - t72 * t84, -g(1) * t244 - g(2) * t246 + t1 * t383 + t121 * t33 - t13 * t458 - t146 * t20 - t27 * t287 + t3 * t327 - t38 * t98 - t72 * t79, -t1 * t120 + t12 * t38 - t121 * t2 - t13 * t39 + t20 * t26 - t21 * t27 + t3 * t84 + t4 * t79 + t424, t1 * t27 + t13 * t3 + t2 * t26 + t12 * t4 + t33 * t146 + t98 * t72 - g(1) * (t271 * t384 + t366) - g(2) * (t266 * t473 - t362 * t476 + t465) + (-g(1) * (-pkin(1) - t418) - g(2) * t271) * t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t339, t464 * t386, t448, t339, t360, qJDD(2), t379 * t401 - t353 - t368, t499 + (t401 - t487) * t383, 0, 0, -t304 * t374 * t461 + t483, -t251 * t373 + t252 * t374 + t416 * t461, t374 * t482 + t379 * t410 - t433, -t302 * t442 - t484, -t373 * t482 + t379 * t411 - t431, t339, qJ(3) * t433 - pkin(2) * t251 - t393 * t374 + ((-qJ(3) * t460 - t229) * t379 + (t373 * t451 + t242 - t509) * t383) * qJD(1), qJ(3) * t431 - pkin(2) * t252 + t393 * t373 + ((-qJ(3) * t459 + t230) * t379 + (t374 * t451 - t243 - t508) * t383) * qJD(1), t242 * t304 + t243 * t302 + (-qJ(3) * t251 - qJD(3) * t302 + t229 * t461 + t164) * t374 + (qJ(3) * t252 + qJD(3) * t304 + t230 * t461 - t163) * t373 + t397, -t319 * t355 - t229 * t242 - t230 * t243 + (-t229 * t373 + t230 * t374) * qJD(3) - t393 * pkin(2) + (-t163 * t373 + t164 * t374 + t397) * qJ(3), -t133 * t311 - t220 * t551, t133 * t310 - t134 * t311 - t220 * t467 - t221 * t551, t220 * t462 + t309 * t311 - t343 * t551, t134 * t310 - t221 * t467, t221 * t462 - t309 * t310 - t343 * t467, t343 * t462, -t108 * t462 - t134 * t350 + t193 * t310 - t221 * t294 + t236 * t309 - t241 * t467 - t343 * t468 - t359 * t398, t109 * t462 + t133 * t350 + t193 * t311 + t220 * t294 - t237 * t309 + t241 * t551 + t343 * t469 + t358 * t398, -t108 * t551 + t109 * t467 + t133 * t236 - t134 * t237 + t220 * t468 - t221 * t469 - t310 * t42 - t311 * t43 + t397, -g(3) * t413 + t108 * t468 + t109 * t469 - t193 * t350 + t43 * t236 + t42 * t237 - t241 * t294 + t423 * (t350 * t379 - t383 * t497) t148 * t471 - t226 * t55, t148 * t470 - t152 * t471 + t225 * t55 - t226 * t56, t148 * t462 + t226 * t293 + t333 * t471, -t152 * t470 + t225 * t56, -t152 * t462 - t225 * t293 + t333 * t470, t333 * t462, t101 * t225 + t130 * t293 - t152 * t430 + t167 * t470 + t262 * t56 - t333 * t493 - t349 * t398 - t46 * t462, t101 * t226 - t131 * t293 - t148 * t430 - t167 * t471 - t262 * t55 + t333 * t494 + t348 * t398 + t462 * t47, t130 * t55 - t131 * t56 + t148 * t493 + t152 * t494 + t225 * t428 - t226 * t9 + t46 * t471 - t47 * t470 + t397, -g(3) * t415 + t101 * t262 + t9 * t130 - t428 * t131 + t430 * t167 + t493 * t46 + t494 * t47 + t423 * (t313 * t379 + t369 * t383) -t157 * t20 + t490 * t79, t156 * t20 - t157 * t21 - t490 * t84 - t491 * t79, t157 * t287 + t327 * t490 + t462 * t79, t156 * t21 + t491 * t84, -t156 * t287 - t327 * t491 - t462 * t84, t327 * t462, -t12 * t462 + t156 * t33 + t171 * t21 + t287 * t57 - t327 * t495 - t338 * t398 - t472 * t84 - t491 * t98, t13 * t462 + t157 * t33 - t171 * t20 - t287 * t58 + t327 * t496 + t337 * t398 - t472 * t79 - t490 * t98, -t1 * t156 + t12 * t490 + t13 * t491 - t157 * t2 + t20 * t57 - t21 * t58 + t495 * t79 + t496 * t84 + t397, -g(3) * t418 + t1 * t58 + t12 * t495 + t13 * t496 + t33 * t171 + t2 * t57 + t472 * t98 + t423 * (t266 * t379 + t362 * t383); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383 * t410 - t357 + t434, t383 * t411 + t432 + t449, -t302 ^ 2 - t304 ^ 2, t229 * t304 + t230 * t302 + t393, 0, 0, 0, 0, 0, 0, t134 + t536, -t133 + t535, -t540 - t541, -t108 * t220 + t109 * t221 + t392, 0, 0, 0, 0, 0, 0, t56 + t546, -t55 - t545, -t547 - t548, -t148 * t46 - t152 * t47 + t388, 0, 0, 0, 0, 0, 0, t21 + t552, -t20 - t553, -t554 - t555, -t12 * t79 - t13 * t84 + t388 + t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, -t540 + t541, -t133 - t535, t485, -t134 + t536, t309, -t109 * t343 + t220 * t241 + t43 + t520, g(1) * t270 - g(2) * t268 - t108 * t343 + t221 * t241 + t359 * t499 - t42, 0, 0, t486, t533, t530, -t486, t519, t293, t333 * t48 + (-t152 * t220 + t293 * t381 + t333 * t454) * pkin(4) + t517, -t333 * t49 + (-t148 * t220 - t293 * t377 + t333 * t453) * pkin(4) + t529, -t148 * t47 - t152 * t49 + t152 * t46 - t148 * t48 + (-t377 * t56 + t381 * t55 + (-t148 * t377 + t152 * t381) * qJD(5)) * pkin(4), -t46 * t48 - t47 * t49 + (-t428 * t377 + t9 * t381 + t167 * t220 + (-t377 * t46 + t381 * t47) * qJD(5) + t520) * pkin(4), t498, t534, t532, -t498, t516, t287, t104 * t84 + t284 * t287 - t327 * t488 + t518, t104 * t79 - t285 * t287 + t327 * t489 + t531, t20 * t284 - t21 * t285 + t488 * t79 + t489 * t84 + t544, t1 * t285 + t2 * t284 - t98 * t104 - g(1) * (t296 * t473 + t297 * t380) - g(2) * (t296 * t475 - t297 * t384) - t296 * t499 + t489 * t13 + t488 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t486, t533, t530, -t486, t519, t293, -t333 * t47 + t517, -t333 * t46 + t529, 0, 0, t498, t534, t532, -t498, t516, t287, t14 * t327 + (-t148 * t84 + t287 * t513 + t327 * t452) * pkin(5) + t518, -t15 * t327 + (-t148 * t79 - t287 * t376 + t327 * t437) * pkin(5) + t531, -t14 * t79 - t15 * t84 + (t513 * t20 - t21 * t376 + (-t376 * t79 + t513 * t84) * qJD(6)) * pkin(5) + t544, -t12 * t14 - t13 * t15 + (t1 * t376 + t2 * t513 + t98 * t148 + (-t12 * t376 + t13 * t513) * qJD(6) + t521) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t498, t534, t532, -t498, t516, t287, -t13 * t327 + t518, -t12 * t327 + t531, 0, 0;];
tau_reg  = t5;
