% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR8_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR8_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR8_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR8_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:05:30
% EndTime: 2019-03-09 14:05:49
% DurationCPUTime: 7.86s
% Computational Cost: add. (11137->489), mult. (28093->687), div. (0->0), fcn. (22244->10), ass. (0->255)
t259 = sin(qJ(5));
t265 = cos(qJ(2));
t337 = qJD(1) * t265;
t244 = -qJD(4) + t337;
t256 = sin(pkin(11));
t261 = sin(qJ(2));
t338 = qJD(1) * t261;
t318 = t256 * t338;
t257 = cos(pkin(11));
t325 = t257 * qJD(2);
t213 = t318 - t325;
t317 = t257 * t338;
t336 = qJD(2) * t256;
t215 = t317 + t336;
t260 = sin(qJ(4));
t264 = cos(qJ(4));
t161 = t213 * t260 - t215 * t264;
t228 = -pkin(2) * t265 - qJ(3) * t261 - pkin(1);
t206 = t228 * qJD(1);
t250 = pkin(7) * t337;
t234 = qJD(2) * qJ(3) + t250;
t170 = t257 * t206 - t234 * t256;
t322 = pkin(3) * t337;
t124 = -pkin(8) * t215 + t170 - t322;
t171 = t256 * t206 + t257 * t234;
t129 = -pkin(8) * t213 + t171;
t71 = t264 * t124 - t129 * t260;
t59 = pkin(9) * t161 + t71;
t54 = -pkin(4) * t244 + t59;
t263 = cos(qJ(5));
t162 = t264 * t213 + t215 * t260;
t72 = t124 * t260 + t129 * t264;
t60 = -pkin(9) * t162 + t72;
t58 = t263 * t60;
t21 = t259 * t54 + t58;
t99 = t161 * t259 - t263 * t162;
t393 = pkin(10) * t99;
t13 = t21 + t393;
t258 = sin(qJ(6));
t327 = qJD(6) * t258;
t11 = t13 * t327;
t262 = cos(qJ(6));
t377 = t161 * t263 + t162 * t259;
t50 = t258 * t377 + t262 * t99;
t249 = pkin(7) * t338;
t361 = qJD(2) * pkin(2);
t305 = qJD(3) - t361;
t227 = t249 + t305;
t177 = pkin(3) * t213 + t227;
t113 = pkin(4) * t162 + t177;
t62 = -pkin(5) * t99 + t113;
t407 = -t62 * t50 + t11;
t292 = pkin(2) * t261 - qJ(3) * t265;
t223 = t292 * qJD(1);
t204 = t256 * t223;
t355 = t257 * t261;
t356 = t256 * t265;
t281 = -pkin(7) * t355 - pkin(8) * t356;
t168 = qJD(1) * t281 + t204;
t406 = qJD(3) * t257 - t168;
t351 = t264 * t257;
t358 = t256 * t260;
t220 = -t351 + t358;
t279 = t220 * t265;
t405 = -qJD(1) * t279 + t220 * qJD(4);
t221 = t256 * t264 + t257 * t260;
t280 = t221 * t265;
t341 = -qJD(1) * t280 + t221 * qJD(4);
t324 = qJD(1) * qJD(2);
t247 = t261 * t324;
t315 = t265 * t324;
t296 = t256 * t315;
t330 = qJD(4) * t264;
t116 = -t213 * t330 + t315 * t351 + (-qJD(4) * t215 - t296) * t260;
t199 = qJD(2) * t292 - t261 * qJD(3);
t188 = t199 * qJD(1);
t226 = (qJD(3) - t249) * qJD(2);
t148 = t257 * t188 - t256 * t226;
t354 = t257 * t265;
t285 = pkin(3) * t261 - pkin(8) * t354;
t275 = t285 * qJD(2);
t120 = qJD(1) * t275 + t148;
t149 = t256 * t188 + t257 * t226;
t126 = -pkin(8) * t296 + t149;
t303 = t264 * t120 - t260 * t126;
t269 = -qJD(4) * t72 + t303;
t24 = pkin(4) * t247 - pkin(9) * t116 + t269;
t274 = qJD(2) * t280;
t372 = qJD(4) * t161;
t117 = qJD(1) * t274 - t372;
t332 = qJD(4) * t260;
t278 = t260 * t120 + t124 * t330 + t264 * t126 - t129 * t332;
t26 = -pkin(9) * t117 + t278;
t312 = t263 * t24 - t259 * t26;
t271 = -qJD(5) * t21 + t312;
t328 = qJD(5) * t263;
t329 = qJD(5) * t259;
t41 = t263 * t116 - t259 * t117 + t161 * t329 - t162 * t328;
t2 = pkin(5) * t247 - pkin(10) * t41 + t271;
t404 = -t258 * t2 + t407;
t239 = -qJD(5) + t244;
t233 = -qJD(6) + t239;
t403 = t233 * t50;
t402 = t239 * t99;
t378 = t258 * t99 - t262 * t377;
t389 = t378 * t50;
t401 = t233 * t378;
t178 = pkin(7) * t318 + t257 * t223;
t150 = qJD(1) * t285 + t178;
t368 = pkin(8) + qJ(3);
t230 = t368 * t256;
t231 = t368 * t257;
t286 = qJD(3) * t256 + qJD(4) * t231;
t400 = -t230 * t330 + t406 * t264 + (-t150 - t286) * t260;
t385 = t378 ^ 2 - t50 ^ 2;
t268 = qJD(5) * t377 - t259 * t116 - t263 * t117;
t326 = qJD(6) * t262;
t8 = t258 * t268 + t262 * t41 + t326 * t99 + t327 * t377;
t383 = t8 + t403;
t388 = -pkin(9) * t341 + t400;
t142 = t264 * t150;
t340 = -t260 * t230 + t264 * t231;
t398 = -pkin(4) * t338 + pkin(9) * t405 - t221 * qJD(3) - t340 * qJD(4) + t260 * t168 - t142;
t397 = t239 * t377;
t9 = qJD(6) * t378 + t258 * t41 - t262 * t268;
t370 = -t9 - t401;
t307 = -t259 * t24 - t263 * t26 - t54 * t328 + t60 * t329;
t3 = pkin(10) * t268 - t307;
t319 = t262 * t2 - t258 * t3;
t394 = -t62 * t378 + t319;
t392 = pkin(10) * t377;
t390 = t377 * t99;
t387 = t161 * t244;
t386 = t162 * t244;
t166 = t263 * t220 + t221 * t259;
t347 = -qJD(5) * t166 - t259 * t341 - t263 * t405;
t167 = -t220 * t259 + t221 * t263;
t346 = qJD(5) * t167 - t259 * t405 + t263 * t341;
t384 = t377 ^ 2 - t99 ^ 2;
t382 = t41 + t402;
t381 = -t113 * t99 + t307;
t380 = t113 * t377 + t271;
t379 = t268 + t397;
t375 = -0.2e1 * t324;
t374 = t398 * t263;
t299 = -t264 * t230 - t231 * t260;
t143 = -pkin(9) * t221 + t299;
t144 = -pkin(9) * t220 + t340;
t345 = t259 * t143 + t263 * t144;
t207 = t256 * t322 + t250;
t314 = pkin(4) * t341 - t207;
t212 = t257 * t228;
t169 = -pkin(8) * t355 + t212 + (-pkin(7) * t256 - pkin(3)) * t265;
t242 = pkin(7) * t354;
t184 = t256 * t228 + t242;
t357 = t256 * t261;
t176 = -pkin(8) * t357 + t184;
t343 = t260 * t169 + t264 * t176;
t373 = t143 * t328 - t144 * t329 + t259 * t398 + t263 * t388;
t56 = t259 * t60;
t20 = t263 * t54 - t56;
t12 = t20 + t392;
t10 = -pkin(5) * t239 + t12;
t359 = t262 * t13;
t5 = t258 * t10 + t359;
t371 = -qJD(6) * t5 + t394;
t103 = t262 * t166 + t167 * t258;
t367 = -qJD(6) * t103 - t346 * t258 + t347 * t262;
t104 = -t166 * t258 + t167 * t262;
t366 = qJD(6) * t104 + t347 * t258 + t346 * t262;
t365 = t263 * t59 - t56;
t363 = t346 * pkin(5) + t314;
t196 = t220 * t261;
t300 = t264 * t169 - t176 * t260;
t83 = -pkin(4) * t265 + pkin(9) * t196 + t300;
t195 = t221 * t261;
t85 = -pkin(9) * t195 + t343;
t362 = t259 * t83 + t263 * t85;
t360 = t262 * t10;
t353 = t258 * t259;
t352 = t259 * t262;
t267 = qJD(1) ^ 2;
t350 = t265 * t267;
t266 = qJD(2) ^ 2;
t349 = t266 * t261;
t348 = t266 * t265;
t335 = qJD(2) * t261;
t320 = pkin(7) * t335;
t174 = t257 * t199 + t256 * t320;
t243 = pkin(7) * t315;
t198 = pkin(3) * t296 + t243;
t334 = qJD(2) * t265;
t251 = pkin(7) * t334;
t208 = t256 * pkin(3) * t334 + t251;
t224 = pkin(3) * t357 + t261 * pkin(7);
t339 = t261 ^ 2 - t265 ^ 2;
t331 = qJD(4) * t261;
t323 = pkin(7) * t356;
t321 = pkin(4) * qJD(5) * t233;
t246 = -pkin(3) * t257 - pkin(2);
t313 = qJD(6) * t10 + t3;
t145 = -qJD(2) * t279 - t221 * t331;
t140 = t275 + t174;
t190 = t256 * t199;
t152 = qJD(2) * t281 + t190;
t302 = t264 * t140 - t260 * t152;
t36 = pkin(4) * t335 - pkin(9) * t145 - qJD(4) * t343 + t302;
t146 = t330 * t355 - t331 * t358 + t274;
t277 = t260 * t140 + t264 * t152 + t169 * t330 - t176 * t332;
t43 = -pkin(9) * t146 + t277;
t310 = -t259 * t43 + t263 * t36;
t309 = -t259 * t59 - t58;
t308 = -t259 * t85 + t263 * t83;
t306 = pkin(1) * t375;
t301 = t263 * t143 - t144 * t259;
t298 = t213 + t325;
t297 = -t215 + t336;
t88 = pkin(4) * t117 + t198;
t118 = pkin(4) * t146 + t208;
t173 = pkin(4) * t195 + t224;
t65 = -pkin(10) * t167 + t301;
t295 = -t346 * pkin(10) + qJD(6) * t65 + t373;
t66 = -pkin(10) * t166 + t345;
t294 = pkin(5) * t338 + t347 * pkin(10) + t345 * qJD(5) + qJD(6) * t66 + t388 * t259 - t374;
t293 = -t227 + t305;
t139 = -t195 * t259 - t196 * t263;
t30 = -pkin(5) * t265 - pkin(10) * t139 + t308;
t138 = t263 * t195 - t196 * t259;
t31 = -pkin(10) * t138 + t362;
t291 = t258 * t30 + t262 * t31;
t80 = t262 * t138 + t139 * t258;
t81 = -t138 * t258 + t139 * t262;
t189 = pkin(4) * t220 + t246;
t248 = pkin(4) * t263 + pkin(5);
t284 = pkin(4) * t352 + t248 * t258;
t283 = -pkin(4) * t353 + t248 * t262;
t282 = t259 * t36 + t263 * t43 + t83 * t328 - t329 * t85;
t183 = t212 - t323;
t179 = -pkin(7) * t317 + t204;
t175 = -t257 * t320 + t190;
t122 = pkin(5) * t166 + t189;
t93 = pkin(5) * t138 + t173;
t67 = -pkin(4) * t161 - pkin(5) * t377;
t64 = qJD(5) * t139 + t259 * t145 + t263 * t146;
t63 = -qJD(5) * t138 + t263 * t145 - t259 * t146;
t44 = pkin(5) * t64 + t118;
t27 = -pkin(5) * t268 + t88;
t17 = t365 + t392;
t16 = t309 - t393;
t15 = qJD(6) * t81 + t258 * t63 + t262 * t64;
t14 = -qJD(6) * t80 - t258 * t64 + t262 * t63;
t7 = -pkin(10) * t64 + t282;
t6 = pkin(5) * t335 - pkin(10) * t63 - qJD(5) * t362 + t310;
t4 = -t13 * t258 + t360;
t1 = [0, 0, 0, 0.2e1 * t265 * t247, t339 * t375, t348, -t349, 0, -pkin(7) * t348 + t261 * t306, pkin(7) * t349 + t265 * t306 (-qJD(1) * t174 - t148) * t265 + ((pkin(7) * t213 + t227 * t256) * t265 + (t170 + (t183 + 0.2e1 * t323) * qJD(1)) * t261) * qJD(2) (qJD(1) * t175 + t149) * t265 + ((pkin(7) * t215 + t227 * t257) * t265 + (-t171 + (-t184 + 0.2e1 * t242) * qJD(1)) * t261) * qJD(2), -t174 * t215 - t175 * t213 + (-t148 * t257 - t149 * t256) * t261 + (-t170 * t257 - t171 * t256 + (-t183 * t257 - t184 * t256) * qJD(1)) * t334, t148 * t183 + t149 * t184 + t170 * t174 + t171 * t175 + (t227 + t249) * t251, -t116 * t196 - t145 * t161, -t116 * t195 + t117 * t196 - t145 * t162 + t146 * t161, -t116 * t265 - t145 * t244 + (-qJD(1) * t196 - t161) * t335, t117 * t265 + t146 * t244 + (-qJD(1) * t195 - t162) * t335 (-t244 - t337) * t335, -t302 * t244 - t303 * t265 + t208 * t162 + t224 * t117 + t198 * t195 + t177 * t146 + (t244 * t343 + t265 * t72) * qJD(4) + (qJD(1) * t300 + t71) * t335, t277 * t244 + t278 * t265 - t208 * t161 + t224 * t116 - t198 * t196 + t177 * t145 + (-qJD(1) * t343 - t72) * t335, t139 * t41 - t377 * t63, -t138 * t41 + t139 * t268 + t377 * t64 + t63 * t99, -t63 * t239 - t41 * t265 + (qJD(1) * t139 - t377) * t335, t64 * t239 - t268 * t265 + (-qJD(1) * t138 + t99) * t335 (-t239 - t337) * t335, -t310 * t239 - t312 * t265 - t118 * t99 - t173 * t268 + t88 * t138 + t113 * t64 + (t21 * t265 + t239 * t362) * qJD(5) + (qJD(1) * t308 + t20) * t335, t282 * t239 - t307 * t265 - t118 * t377 + t173 * t41 + t88 * t139 + t113 * t63 + (-qJD(1) * t362 - t21) * t335, t14 * t378 + t8 * t81, t14 * t50 - t15 * t378 - t8 * t80 - t81 * t9, -t14 * t233 - t8 * t265 + (qJD(1) * t81 + t378) * t335, t15 * t233 + t9 * t265 + (-qJD(1) * t80 + t50) * t335 (-t233 - t337) * t335 -(-t258 * t7 + t262 * t6) * t233 - t319 * t265 - t44 * t50 + t93 * t9 + t27 * t80 + t62 * t15 + (t233 * t291 + t265 * t5) * qJD(6) + ((-t258 * t31 + t262 * t30) * qJD(1) + t4) * t335, -t11 * t265 + t62 * t14 + t27 * t81 + t44 * t378 + t93 * t8 + ((-qJD(6) * t31 + t6) * t233 + t2 * t265) * t258 + ((qJD(6) * t30 + t7) * t233 + t313 * t265) * t262 + (-qJD(1) * t291 - t5) * t335; 0, 0, 0, -t261 * t350, t339 * t267, 0, 0, 0, t267 * pkin(1) * t261, pkin(1) * t350 ((-qJ(3) * t336 - t170) * t261 + (-pkin(7) * t298 + t256 * t293 + t178) * t265) * qJD(1) ((-qJ(3) * t325 + t171) * t261 + (pkin(7) * t297 + t257 * t293 - t179) * t265) * qJD(1), t178 * t215 + t179 * t213 + (-qJD(3) * t213 + t170 * t337 + t149) * t257 + (qJD(3) * t215 + t171 * t337 - t148) * t256, -t170 * t178 - t171 * t179 + (-t170 * t256 + t171 * t257) * qJD(3) + (-t148 * t256 + t149 * t257) * qJ(3) + (-t227 - t361) * t250, t116 * t221 + t161 * t405, -t116 * t220 - t117 * t221 + t161 * t341 + t162 * t405, t405 * t244 + (qJD(2) * t221 + t161) * t338, t341 * t244 + (-qJD(2) * t220 + t162) * t338, t244 * t338, t246 * t117 - t207 * t162 + t198 * t220 + (t142 + t286 * t264 + (-qJD(4) * t230 + t406) * t260) * t244 + t341 * t177 + (qJD(2) * t299 - t71) * t338, t246 * t116 + t207 * t161 + t198 * t221 + t400 * t244 - t405 * t177 + (-qJD(2) * t340 + t72) * t338, t41 * t167 - t347 * t377, -t166 * t41 + t167 * t268 + t346 * t377 + t347 * t99, -t347 * t239 + (qJD(2) * t167 + t377) * t338, t346 * t239 + (-qJD(2) * t166 - t99) * t338, t239 * t338, t88 * t166 - t189 * t268 - t314 * t99 + (t144 * t328 + (qJD(5) * t143 + t388) * t259 - t374) * t239 + t346 * t113 + (qJD(2) * t301 - t20) * t338, t88 * t167 + t189 * t41 + t373 * t239 + t347 * t113 - t314 * t377 + (-qJD(2) * t345 + t21) * t338, t8 * t104 + t367 * t378, -t103 * t8 - t104 * t9 - t366 * t378 + t367 * t50, -t367 * t233 + (qJD(2) * t104 - t378) * t338, t366 * t233 + (-qJD(2) * t103 - t50) * t338, t233 * t338, t27 * t103 + t122 * t9 + t366 * t62 - t363 * t50 + (t258 * t295 + t262 * t294) * t233 + ((-t258 * t66 + t262 * t65) * qJD(2) - t4) * t338, t27 * t104 + t122 * t8 + t367 * t62 + t363 * t378 + (-t258 * t294 + t262 * t295) * t233 + (-(t258 * t65 + t262 * t66) * qJD(2) + t5) * t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t297 * t337, t298 * t337, -t213 ^ 2 - t215 ^ 2, t170 * t215 + t171 * t213 + t243, 0, 0, 0, 0, 0, t117 + t387, t116 + t386, 0, 0, 0, 0, 0, -t268 + t397, t41 - t402, 0, 0, 0, 0, 0, t9 - t401, t8 - t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t161 * t162, t161 ^ 2 - t162 ^ 2, t116 - t386, -t221 * t315 + t372 + t387, t247, t161 * t177 - t244 * t72 + t269, t162 * t177 - t244 * t71 - t278, t390, t384, t382, t379, t247, t309 * t239 + (-t161 * t99 + t239 * t329 + t247 * t263) * pkin(4) + t380, -t365 * t239 + (-t161 * t377 + t239 * t328 - t247 * t259) * pkin(4) + t381, -t389, t385, t383, t370, t247, t283 * t247 + (t16 * t262 - t17 * t258) * t233 + t67 * t50 - (-t258 * t263 - t352) * t321 + (t233 * t284 - t5) * qJD(6) + t394, -t284 * t247 - t262 * t3 - (t16 * t258 + t17 * t262) * t233 - t67 * t378 + (t262 * t263 - t353) * t321 + (t233 * t283 - t360) * qJD(6) + t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t390, t384, t382, t379, t247, -t21 * t239 + t380, -t20 * t239 + t381, -t389, t385, t383, t370, t247 (-t12 * t258 - t359) * t233 + (t233 * t327 + t247 * t262 - t377 * t50) * pkin(5) + t371 (t13 * t233 - t2) * t258 + (-t12 * t233 - t313) * t262 + (t233 * t326 - t247 * t258 + t377 * t378) * pkin(5) + t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t389, t385, t383, t370, t247, -t233 * t5 + t371, -t233 * t4 - t262 * t313 + t404;];
tauc_reg  = t1;
