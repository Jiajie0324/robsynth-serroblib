% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR8_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:05:30
% EndTime: 2019-03-09 14:05:38
% DurationCPUTime: 2.44s
% Computational Cost: add. (5987->268), mult. (14590->485), div. (0->0), fcn. (14542->10), ass. (0->151)
t130 = sin(pkin(11));
t192 = pkin(8) + qJ(3);
t114 = t192 * t130;
t131 = cos(pkin(11));
t115 = t192 * t131;
t134 = sin(qJ(4));
t138 = cos(qJ(4));
t177 = -t134 * t114 + t138 * t115;
t174 = qJD(4) * t138;
t179 = t138 * t131;
t60 = (qJD(3) * t130 + qJD(4) * t115) * t134 - qJD(3) * t179 + t114 * t174;
t123 = -t131 * pkin(3) - pkin(2);
t196 = 0.2e1 * t123;
t110 = t138 * t130 + t134 * t131;
t101 = t110 * qJD(4);
t195 = t101 * pkin(4);
t139 = cos(qJ(2));
t194 = t139 * pkin(4);
t193 = t139 * pkin(5);
t133 = sin(qJ(5));
t135 = sin(qJ(2));
t186 = t130 * t135;
t147 = -t139 * pkin(2) - t135 * qJ(3);
t112 = -pkin(1) + t147;
t183 = t131 * t139;
t121 = pkin(7) * t183;
t90 = t130 * t112 + t121;
t88 = -pkin(8) * t186 + t90;
t188 = t134 * t88;
t105 = t131 * t112;
t184 = t131 * t135;
t83 = -pkin(8) * t184 + t105 + (-pkin(7) * t130 - pkin(3)) * t139;
t151 = t138 * t83 - t188;
t180 = t134 * t130;
t109 = -t179 + t180;
t97 = t109 * t135;
t40 = t97 * pkin(9) + t151 - t194;
t137 = cos(qJ(5));
t189 = t134 * t83 + t138 * t88;
t96 = t110 * t135;
t42 = -t96 * pkin(9) + t189;
t41 = t137 * t42;
t191 = t133 * t40 + t41;
t149 = -t138 * t114 - t134 * t115;
t69 = -t110 * pkin(9) + t149;
t70 = -t109 * pkin(9) + t177;
t190 = t133 * t69 + t137 * t70;
t136 = cos(qJ(6));
t66 = -t133 * t97 + t137 * t96;
t16 = -pkin(10) * t66 + t191;
t187 = t136 * t16;
t126 = t135 * qJD(2);
t160 = pkin(7) * t126;
t98 = -t135 * qJD(3) + (pkin(2) * t135 - qJ(3) * t139) * qJD(2);
t86 = t130 * t160 + t131 * t98;
t185 = t130 * t139;
t132 = sin(qJ(6));
t182 = t132 * t133;
t181 = t133 * t136;
t169 = t139 * qJD(2);
t125 = pkin(7) * t169;
t158 = t130 * t169;
t102 = pkin(3) * t158 + t125;
t111 = pkin(3) * t186 + t135 * pkin(7);
t176 = qJD(3) * t139;
t175 = qJD(4) * t135;
t173 = qJD(5) * t133;
t172 = qJD(5) * t137;
t171 = qJD(6) * t132;
t170 = qJD(6) * t136;
t168 = -0.2e1 * pkin(1) * qJD(2);
t167 = pkin(7) * t185;
t166 = pkin(4) * t126;
t165 = pkin(5) * t126;
t164 = pkin(4) * t173;
t163 = pkin(4) * t172;
t162 = pkin(5) * t171;
t161 = pkin(5) * t170;
t71 = -t109 * t169 - t110 * t175;
t72 = t110 * t169 + t174 * t184 - t175 * t180;
t30 = -qJD(5) * t66 - t133 * t72 + t137 * t71;
t68 = (pkin(3) * t135 - pkin(8) * t183) * qJD(2) + t86;
t93 = t130 * t98;
t74 = t93 + (-pkin(7) * t184 - pkin(8) * t185) * qJD(2);
t28 = -t189 * qJD(4) - t134 * t74 + t138 * t68;
t23 = -t71 * pkin(9) + t166 + t28;
t27 = qJD(4) * t188 - t134 * t68 - t138 * t74 - t83 * t174;
t25 = -t72 * pkin(9) - t27;
t154 = -t133 * t25 + t137 * t23;
t9 = -t191 * qJD(5) + t154;
t6 = -t30 * pkin(10) + t165 + t9;
t67 = -t133 * t96 - t137 * t97;
t31 = qJD(5) * t67 + t133 * t71 + t137 * t72;
t8 = -t133 * t23 - t137 * t25 - t40 * t172 + t42 * t173;
t7 = -t31 * pkin(10) - t8;
t159 = -t132 * t7 + t136 * t6;
t157 = t135 * t169;
t153 = -t133 * t42 + t137 * t40;
t15 = -t67 * pkin(10) + t153 - t193;
t156 = -t15 + t193;
t14 = t16 * t171;
t155 = -t132 * t6 + t14;
t152 = -t133 * t70 + t137 * t69;
t124 = t137 * pkin(4) + pkin(5);
t150 = qJD(6) * (-pkin(5) - t124);
t54 = t72 * pkin(4) + t102;
t85 = t96 * pkin(4) + t111;
t148 = 0.2e1 * (t130 ^ 2 + t131 ^ 2) * qJD(3);
t87 = -t131 * t160 + t93;
t146 = -t86 * t130 + t87 * t131;
t145 = t132 * t15 + t187;
t82 = -t133 * t109 + t137 * t110;
t32 = -t82 * pkin(10) + t152;
t81 = t137 * t109 + t133 * t110;
t33 = -t81 * pkin(10) + t190;
t144 = t132 * t33 - t136 * t32;
t143 = t132 * t32 + t136 * t33;
t37 = t132 * t67 + t136 * t66;
t38 = -t132 * t66 + t136 * t67;
t47 = t132 * t82 + t136 * t81;
t48 = -t132 * t81 + t136 * t82;
t92 = t109 * pkin(4) + t123;
t52 = -t101 * pkin(9) - t60;
t100 = t109 * qJD(4);
t61 = -t110 * qJD(3) - t177 * qJD(4);
t53 = t100 * pkin(9) + t61;
t19 = -t133 * t53 - t137 * t52 - t69 * t172 + t70 * t173;
t2 = -qJD(6) * t145 + t159;
t20 = -t190 * qJD(5) - t133 * t52 + t137 * t53;
t141 = (t133 * t171 + (-t136 * t137 + t182) * qJD(5)) * pkin(4);
t140 = (-t133 * t170 + (-t132 * t137 - t181) * qJD(5)) * pkin(4);
t118 = -0.2e1 * t157;
t89 = t105 - t167;
t80 = -t124 * t171 + t140;
t79 = -t124 * t170 + t141;
t55 = t81 * pkin(5) + t92;
t46 = qJD(5) * t82 - t133 * t100 + t137 * t101;
t45 = -qJD(5) * t81 - t137 * t100 - t133 * t101;
t44 = t66 * pkin(5) + t85;
t39 = t46 * pkin(5) + t195;
t26 = t31 * pkin(5) + t54;
t18 = qJD(6) * t48 + t132 * t45 + t136 * t46;
t17 = -qJD(6) * t47 - t132 * t46 + t136 * t45;
t13 = -t45 * pkin(10) + t20;
t12 = -t46 * pkin(10) - t19;
t11 = qJD(6) * t38 + t132 * t30 + t136 * t31;
t10 = -qJD(6) * t37 - t132 * t31 + t136 * t30;
t4 = -qJD(6) * t143 - t132 * t12 + t136 * t13;
t3 = qJD(6) * t144 - t136 * t12 - t132 * t13;
t1 = (-qJD(6) * t15 - t7) * t136 + t155;
t5 = [0, 0, 0, 0.2e1 * t157, 0.2e1 * (-t135 ^ 2 + t139 ^ 2) * qJD(2), 0, 0, 0, t135 * t168, t139 * t168, -0.2e1 * t86 * t139 + 0.2e1 * (t89 + 0.2e1 * t167) * t126, 0.2e1 * t87 * t139 + 0.2e1 * (-t90 + 0.2e1 * t121) * t126, 0.2e1 * (-t130 * t87 - t131 * t86) * t135 + 0.2e1 * (-t130 * t90 - t131 * t89) * t169, 0.2e1 * pkin(7) ^ 2 * t157 + 0.2e1 * t89 * t86 + 0.2e1 * t90 * t87, -0.2e1 * t97 * t71, -0.2e1 * t71 * t96 + 0.2e1 * t97 * t72, -0.2e1 * t97 * t126 - 0.2e1 * t71 * t139, -0.2e1 * t96 * t126 + 0.2e1 * t72 * t139, t118, 0.2e1 * t102 * t96 + 0.2e1 * t111 * t72 + 0.2e1 * t151 * t126 - 0.2e1 * t28 * t139, -0.2e1 * t102 * t97 + 0.2e1 * t111 * t71 - 0.2e1 * t189 * t126 - 0.2e1 * t27 * t139, 0.2e1 * t67 * t30, -0.2e1 * t30 * t66 - 0.2e1 * t67 * t31, 0.2e1 * t67 * t126 - 0.2e1 * t30 * t139, -0.2e1 * t66 * t126 + 0.2e1 * t31 * t139, t118, 0.2e1 * t153 * t126 - 0.2e1 * t9 * t139 + 0.2e1 * t85 * t31 + 0.2e1 * t54 * t66, -0.2e1 * t191 * t126 - 0.2e1 * t8 * t139 + 0.2e1 * t85 * t30 + 0.2e1 * t54 * t67, 0.2e1 * t38 * t10, -0.2e1 * t10 * t37 - 0.2e1 * t11 * t38, -0.2e1 * t10 * t139 + 0.2e1 * t38 * t126, 0.2e1 * t11 * t139 - 0.2e1 * t37 * t126, t118, -0.2e1 * t2 * t139 + 0.2e1 * (-t132 * t16 + t136 * t15) * t126 + 0.2e1 * t26 * t37 + 0.2e1 * t44 * t11, -0.2e1 * t1 * t139 + 0.2e1 * t44 * t10 - 0.2e1 * t145 * t126 + 0.2e1 * t26 * t38; 0, 0, 0, 0, 0, t169, -t126, 0, -t125, t160, t130 * t176 + (t130 * t147 - t121) * qJD(2), t131 * t176 + (t131 * t147 + t167) * qJD(2), t146, -pkin(2) * t125 + (-t130 * t89 + t131 * t90) * qJD(3) + t146 * qJ(3), t97 * t100 + t71 * t110, t100 * t96 + t97 * t101 - t71 * t109 - t110 * t72, t100 * t139 + t110 * t126, t101 * t139 - t109 * t126, 0, t111 * t101 + t102 * t109 + t123 * t72 + t149 * t126 - t61 * t139, -t111 * t100 + t102 * t110 + t123 * t71 - t177 * t126 - t60 * t139, t30 * t82 + t67 * t45, -t30 * t81 - t82 * t31 - t45 * t66 - t67 * t46, t82 * t126 - t45 * t139, -t81 * t126 + t46 * t139, 0, t152 * t126 - t20 * t139 + t66 * t195 + t92 * t31 + t85 * t46 + t54 * t81, -t190 * t126 - t19 * t139 + t67 * t195 + t92 * t30 + t85 * t45 + t54 * t82, t10 * t48 + t38 * t17, -t10 * t47 - t11 * t48 - t17 * t37 - t38 * t18, t48 * t126 - t17 * t139, -t47 * t126 + t18 * t139, 0, t55 * t11 - t144 * t126 - t4 * t139 + t44 * t18 + t26 * t47 + t39 * t37, t55 * t10 - t143 * t126 - t3 * t139 + t44 * t17 + t26 * t48 + t39 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, qJ(3) * t148, -0.2e1 * t110 * t100, 0.2e1 * t100 * t109 - 0.2e1 * t110 * t101, 0, 0, 0, t101 * t196, -t100 * t196, 0.2e1 * t82 * t45, -0.2e1 * t45 * t81 - 0.2e1 * t82 * t46, 0, 0, 0, 0.2e1 * t81 * t195 + 0.2e1 * t92 * t46, 0.2e1 * t82 * t195 + 0.2e1 * t92 * t45, 0.2e1 * t48 * t17, -0.2e1 * t17 * t47 - 0.2e1 * t18 * t48, 0, 0, 0, 0.2e1 * t18 * t55 + 0.2e1 * t39 * t47, 0.2e1 * t17 * t55 + 0.2e1 * t39 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, t131 * t169, 0, t125, 0, 0, 0, 0, 0, t72, t71, 0, 0, 0, 0, 0, t31, t30, 0, 0, 0, 0, 0, t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, -t100, 0, 0, 0, 0, 0, t46, t45, 0, 0, 0, 0, 0, t18, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t72, t126, t28, t27, 0, 0, t30, -t31, t126, t137 * t166 + (-t41 + (-t40 + t194) * t133) * qJD(5) + t154 (-t133 * t126 + t139 * t172) * pkin(4) + t8, 0, 0, t10, -t11, t126, -t80 * t139 + (-pkin(4) * t182 + t136 * t124) * t126 + t2, -t79 * t139 - (pkin(4) * t181 + t132 * t124) * t126 - t136 * t7 - t15 * t170 + t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, -t101, 0, t61, t60, 0, 0, t45, -t46, 0, t20, t19, 0, 0, t17, -t18, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t164, -0.2e1 * t163, 0, 0, 0, 0, 0, 0.2e1 * t80, 0.2e1 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t31, t126, t9, t8, 0, 0, t10, -t11, t126, t136 * t165 + (t156 * t132 - t187) * qJD(6) + t159, t14 + (-t6 - t165) * t132 + (qJD(6) * t156 - t7) * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, -t46, 0, t20, t19, 0, 0, t17, -t18, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164, -t163, 0, 0, 0, 0, 0, t132 * t150 + t140, t136 * t150 + t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t162, -0.2e1 * t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, t126, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, -t18, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, -t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
