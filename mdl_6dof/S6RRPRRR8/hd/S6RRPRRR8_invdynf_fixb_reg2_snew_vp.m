% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 22:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR8_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 22:44:26
% EndTime: 2019-05-06 22:44:37
% DurationCPUTime: 11.42s
% Computational Cost: add. (145369->345), mult. (320930->479), div. (0->0), fcn. (240654->12), ass. (0->273)
t2234 = cos(qJ(2));
t2263 = qJD(1) * t2234;
t2212 = -qJD(4) + t2263;
t2207 = -qJD(5) + t2212;
t2201 = -qJD(6) + t2207;
t2279 = qJD(6) - t2201;
t2250 = qJD(2) * t2263;
t2229 = sin(qJ(2));
t2251 = t2229 * qJDD(1);
t2194 = t2250 + t2251;
t2224 = sin(pkin(11));
t2225 = cos(pkin(11));
t2178 = qJDD(2) * t2224 + t2194 * t2225;
t2264 = qJD(1) * t2229;
t2190 = -t2225 * qJD(2) + t2224 * t2264;
t2182 = t2190 * t2263;
t2162 = -t2178 + t2182;
t2215 = qJD(2) * t2264;
t2218 = t2234 * qJDD(1);
t2195 = t2218 - t2215;
t2191 = qJD(2) * t2224 + t2225 * t2264;
t2257 = t2190 * t2191;
t2164 = -t2195 - t2257;
t2278 = qJD(2) ^ 2;
t2228 = sin(qJ(4));
t2233 = cos(qJ(4));
t2167 = t2233 * t2190 + t2191 * t2228;
t2168 = -t2190 * t2228 + t2191 * t2233;
t2227 = sin(qJ(5));
t2232 = cos(qJ(5));
t2142 = t2232 * t2167 + t2168 * t2227;
t2144 = -t2167 * t2227 + t2168 * t2232;
t2226 = sin(qJ(6));
t2231 = cos(qJ(6));
t2108 = t2231 * t2142 + t2144 * t2226;
t2277 = t2108 ^ 2;
t2110 = -t2142 * t2226 + t2144 * t2231;
t2276 = t2110 ^ 2;
t2275 = t2142 ^ 2;
t2274 = t2144 ^ 2;
t2273 = t2167 ^ 2;
t2272 = t2168 ^ 2;
t2271 = t2190 ^ 2;
t2270 = t2191 ^ 2;
t2269 = t2201 ^ 2;
t2268 = t2207 ^ 2;
t2267 = t2212 ^ 2;
t2266 = -2 * qJD(3);
t2265 = t2234 * g(3);
t2262 = t2108 * t2110;
t2261 = t2142 * t2144;
t2260 = t2142 * t2207;
t2259 = t2167 * t2168;
t2258 = t2167 * t2212;
t2222 = t2234 ^ 2;
t2236 = qJD(1) ^ 2;
t2256 = t2222 * t2236;
t2255 = qJD(4) + t2212;
t2254 = qJD(5) + t2207;
t2253 = qJD(6) + t2201;
t2230 = sin(qJ(1));
t2235 = cos(qJ(1));
t2205 = t2230 * g(1) - t2235 * g(2);
t2187 = qJDD(1) * pkin(1) + t2236 * pkin(7) + t2205;
t2149 = (-t2194 - t2250) * qJ(3) + (-t2195 + t2215) * pkin(2) - t2187;
t2206 = -g(1) * t2235 - g(2) * t2230;
t2188 = -pkin(1) * t2236 + qJDD(1) * pkin(7) + t2206;
t2176 = -g(3) * t2229 + t2234 * t2188;
t2192 = (-pkin(2) * t2234 - qJ(3) * t2229) * qJD(1);
t2155 = -pkin(2) * t2278 + qJDD(2) * qJ(3) + t2192 * t2263 + t2176;
t2121 = t2225 * t2149 - t2224 * t2155 + t2191 * t2266;
t2098 = pkin(3) * t2164 + pkin(8) * t2162 + t2121;
t2122 = t2224 * t2149 + t2225 * t2155 + t2190 * t2266;
t2179 = -pkin(3) * t2263 - pkin(8) * t2191;
t2244 = t2225 * qJDD(2) - t2194 * t2224;
t2100 = -pkin(3) * t2271 + pkin(8) * t2244 + t2179 * t2263 + t2122;
t2068 = t2233 * t2098 - t2228 * t2100;
t2239 = -t2233 * t2178 - t2228 * t2244;
t2133 = -t2167 * qJD(4) - t2239;
t2248 = -qJDD(4) + t2195;
t2136 = -t2248 - t2259;
t2054 = (-t2133 + t2258) * pkin(9) + t2136 * pkin(4) + t2068;
t2069 = t2228 * t2098 + t2233 * t2100;
t2156 = -pkin(4) * t2212 - pkin(9) * t2168;
t2245 = t2228 * t2178 - t2233 * t2244;
t2241 = -qJD(4) * t2168 - t2245;
t2056 = -pkin(4) * t2273 + pkin(9) * t2241 + t2212 * t2156 + t2069;
t2032 = t2227 * t2054 + t2232 * t2056;
t2221 = t2229 ^ 2;
t2252 = t2221 + t2222;
t2249 = t2191 * t2263;
t2031 = t2232 * t2054 - t2227 * t2056;
t2237 = -t2232 * t2133 - t2227 * t2241;
t2094 = -t2142 * qJD(5) - t2237;
t2246 = t2227 * t2133 - t2232 * t2241;
t2240 = qJD(5) * t2144 + t2246;
t2247 = -t2226 * t2094 - t2231 * t2240;
t2243 = -qJDD(5) + t2248;
t2242 = -qJDD(6) + t2243;
t2104 = -t2243 - t2261;
t2238 = -t2231 * t2094 + t2226 * t2240;
t2154 = t2265 + qJDD(3) - t2278 * qJ(3) - qJDD(2) * pkin(2) + (qJD(1) * t2192 + t2188) * t2229;
t2123 = -t2244 * pkin(3) - t2271 * pkin(8) + t2191 * t2179 + t2154;
t2081 = -t2241 * pkin(4) - t2273 * pkin(9) + t2168 * t2156 + t2123;
t2211 = t2234 * t2236 * t2229;
t2210 = -t2256 - t2278;
t2209 = -t2221 * t2236 - t2278;
t2204 = -qJDD(2) + t2211;
t2203 = qJDD(2) + t2211;
t2200 = t2252 * t2236;
t2199 = -qJDD(1) * t2230 - t2235 * t2236;
t2198 = qJDD(1) * t2235 - t2230 * t2236;
t2197 = t2252 * qJDD(1);
t2196 = t2218 - 0.2e1 * t2215;
t2193 = 0.2e1 * t2250 + t2251;
t2180 = -t2256 - t2270;
t2175 = -t2188 * t2229 - t2265;
t2174 = t2204 * t2234 - t2209 * t2229;
t2173 = -t2203 * t2229 + t2210 * t2234;
t2172 = t2204 * t2229 + t2209 * t2234;
t2171 = t2203 * t2234 + t2210 * t2229;
t2169 = -t2256 - t2271;
t2163 = t2195 - t2257;
t2161 = t2178 + t2182;
t2160 = t2244 - t2249;
t2159 = -t2244 - t2249;
t2157 = -t2270 - t2271;
t2153 = -t2267 - t2272;
t2151 = -t2175 * t2229 + t2176 * t2234;
t2150 = t2175 * t2234 + t2176 * t2229;
t2146 = t2163 * t2225 - t2180 * t2224;
t2145 = t2163 * t2224 + t2180 * t2225;
t2140 = -t2267 - t2273;
t2138 = -t2164 * t2224 + t2169 * t2225;
t2137 = t2164 * t2225 + t2169 * t2224;
t2135 = t2248 - t2259;
t2132 = t2160 * t2225 - t2162 * t2224;
t2131 = t2160 * t2224 + t2162 * t2225;
t2129 = -pkin(5) * t2207 - pkin(10) * t2144;
t2127 = -t2268 - t2274;
t2126 = -t2272 - t2273;
t2125 = t2146 * t2234 + t2161 * t2229;
t2124 = t2146 * t2229 - t2161 * t2234;
t2120 = t2138 * t2234 + t2159 * t2229;
t2119 = t2138 * t2229 - t2159 * t2234;
t2118 = t2167 * t2255 + t2239;
t2117 = t2133 + t2258;
t2116 = -t2168 * t2255 - t2245;
t2115 = (qJD(4) - t2212) * t2168 + t2245;
t2114 = t2132 * t2234 + t2157 * t2229;
t2113 = t2132 * t2229 - t2157 * t2234;
t2112 = t2135 * t2233 - t2153 * t2228;
t2111 = t2135 * t2228 + t2153 * t2233;
t2107 = -t2268 - t2275;
t2106 = -t2136 * t2228 + t2140 * t2233;
t2105 = t2136 * t2233 + t2140 * t2228;
t2103 = t2243 - t2261;
t2101 = -t2269 - t2276;
t2095 = -t2274 - t2275;
t2091 = -t2121 * t2224 + t2122 * t2225;
t2090 = t2121 * t2225 + t2122 * t2224;
t2089 = t2116 * t2233 - t2118 * t2228;
t2088 = t2116 * t2228 + t2118 * t2233;
t2087 = t2103 * t2232 - t2127 * t2227;
t2086 = t2103 * t2227 + t2127 * t2232;
t2085 = -t2111 * t2224 + t2112 * t2225;
t2084 = t2111 * t2225 + t2112 * t2224;
t2083 = t2091 * t2234 + t2154 * t2229;
t2082 = t2091 * t2229 - t2154 * t2234;
t2080 = -t2269 - t2277;
t2079 = -t2242 - t2262;
t2078 = t2242 - t2262;
t2077 = -t2104 * t2227 + t2107 * t2232;
t2076 = t2104 * t2232 + t2107 * t2227;
t2075 = -t2105 * t2224 + t2106 * t2225;
t2074 = t2105 * t2225 + t2106 * t2224;
t2073 = t2142 * t2254 + t2237;
t2072 = t2094 + t2260;
t2071 = -t2144 * t2254 - t2246;
t2070 = (qJD(5) - t2207) * t2144 + t2246;
t2067 = t2085 * t2234 + t2117 * t2229;
t2066 = t2085 * t2229 - t2117 * t2234;
t2065 = t2075 * t2234 + t2115 * t2229;
t2064 = t2075 * t2229 - t2115 * t2234;
t2063 = -t2276 - t2277;
t2062 = t2078 * t2231 - t2101 * t2226;
t2061 = t2078 * t2226 + t2101 * t2231;
t2060 = -t2088 * t2224 + t2089 * t2225;
t2059 = t2088 * t2225 + t2089 * t2224;
t2058 = -t2086 * t2228 + t2087 * t2233;
t2057 = t2086 * t2233 + t2087 * t2228;
t2051 = t2060 * t2234 + t2126 * t2229;
t2050 = t2060 * t2229 - t2126 * t2234;
t2049 = -t2079 * t2226 + t2080 * t2231;
t2048 = t2079 * t2231 + t2080 * t2226;
t2047 = -t2076 * t2228 + t2077 * t2233;
t2046 = t2076 * t2233 + t2077 * t2228;
t2045 = t2071 * t2232 - t2073 * t2227;
t2044 = t2071 * t2227 + t2073 * t2232;
t2043 = -t2068 * t2228 + t2069 * t2233;
t2042 = t2068 * t2233 + t2069 * t2228;
t2041 = pkin(5) * t2240 - pkin(10) * t2275 + t2144 * t2129 + t2081;
t2040 = t2108 * t2253 + t2238;
t2039 = -t2108 * t2279 - t2238;
t2038 = -t2110 * t2253 + t2247;
t2037 = t2110 * t2279 - t2247;
t2036 = -t2061 * t2227 + t2062 * t2232;
t2035 = t2061 * t2232 + t2062 * t2227;
t2034 = -t2057 * t2224 + t2058 * t2225;
t2033 = t2057 * t2225 + t2058 * t2224;
t2030 = -t2048 * t2227 + t2049 * t2232;
t2029 = t2048 * t2232 + t2049 * t2227;
t2028 = -t2046 * t2224 + t2047 * t2225;
t2027 = t2046 * t2225 + t2047 * t2224;
t2026 = -t2044 * t2228 + t2045 * t2233;
t2025 = t2044 * t2233 + t2045 * t2228;
t2024 = t2034 * t2234 + t2072 * t2229;
t2023 = t2034 * t2229 - t2072 * t2234;
t2022 = -pkin(5) * t2275 - pkin(10) * t2240 + t2207 * t2129 + t2032;
t2021 = -t2042 * t2224 + t2043 * t2225;
t2020 = t2042 * t2225 + t2043 * t2224;
t2019 = t2038 * t2231 - t2040 * t2226;
t2018 = t2038 * t2226 + t2040 * t2231;
t2017 = t2028 * t2234 + t2070 * t2229;
t2016 = t2028 * t2229 - t2070 * t2234;
t2015 = (-t2094 + t2260) * pkin(10) + t2104 * pkin(5) + t2031;
t2014 = t2021 * t2234 + t2123 * t2229;
t2013 = t2021 * t2229 - t2123 * t2234;
t2012 = -t2035 * t2228 + t2036 * t2233;
t2011 = t2035 * t2233 + t2036 * t2228;
t2010 = -t2031 * t2227 + t2032 * t2232;
t2009 = t2031 * t2232 + t2032 * t2227;
t2008 = -t2029 * t2228 + t2030 * t2233;
t2007 = t2029 * t2233 + t2030 * t2228;
t2006 = -t2025 * t2224 + t2026 * t2225;
t2005 = t2025 * t2225 + t2026 * t2224;
t2004 = t2006 * t2234 + t2095 * t2229;
t2003 = t2006 * t2229 - t2095 * t2234;
t2002 = t2015 * t2226 + t2022 * t2231;
t2001 = t2015 * t2231 - t2022 * t2226;
t2000 = -t2018 * t2227 + t2019 * t2232;
t1999 = t2018 * t2232 + t2019 * t2227;
t1998 = -t2011 * t2224 + t2012 * t2225;
t1997 = t2011 * t2225 + t2012 * t2224;
t1996 = -t2009 * t2228 + t2010 * t2233;
t1995 = t2009 * t2233 + t2010 * t2228;
t1994 = t1998 * t2234 + t2039 * t2229;
t1993 = t1998 * t2229 - t2039 * t2234;
t1992 = -t2007 * t2224 + t2008 * t2225;
t1991 = t2007 * t2225 + t2008 * t2224;
t1990 = t1992 * t2234 + t2037 * t2229;
t1989 = t1992 * t2229 - t2037 * t2234;
t1988 = -t2001 * t2226 + t2002 * t2231;
t1987 = t2001 * t2231 + t2002 * t2226;
t1986 = -t1999 * t2228 + t2000 * t2233;
t1985 = t1999 * t2233 + t2000 * t2228;
t1984 = -t1995 * t2224 + t1996 * t2225;
t1983 = t1995 * t2225 + t1996 * t2224;
t1982 = t1984 * t2234 + t2081 * t2229;
t1981 = t1984 * t2229 - t2081 * t2234;
t1980 = -t1987 * t2227 + t1988 * t2232;
t1979 = t1987 * t2232 + t1988 * t2227;
t1978 = -t1985 * t2224 + t1986 * t2225;
t1977 = t1985 * t2225 + t1986 * t2224;
t1976 = t1978 * t2234 + t2063 * t2229;
t1975 = t1978 * t2229 - t2063 * t2234;
t1974 = -t1979 * t2228 + t1980 * t2233;
t1973 = t1979 * t2233 + t1980 * t2228;
t1972 = -t1973 * t2224 + t1974 * t2225;
t1971 = t1973 * t2225 + t1974 * t2224;
t1970 = t1972 * t2234 + t2041 * t2229;
t1969 = t1972 * t2229 - t2041 * t2234;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2199, -t2198, 0, -t2205 * t2230 + t2206 * t2235, 0, 0, 0, 0, 0, 0, t2173 * t2235 - t2196 * t2230, t2174 * t2235 + t2193 * t2230, t2197 * t2235 - t2200 * t2230, t2151 * t2235 - t2187 * t2230, 0, 0, 0, 0, 0, 0, t2120 * t2235 + t2137 * t2230, t2125 * t2235 + t2145 * t2230, t2114 * t2235 + t2131 * t2230, t2083 * t2235 + t2090 * t2230, 0, 0, 0, 0, 0, 0, t2065 * t2235 + t2074 * t2230, t2067 * t2235 + t2084 * t2230, t2051 * t2235 + t2059 * t2230, t2014 * t2235 + t2020 * t2230, 0, 0, 0, 0, 0, 0, t2017 * t2235 + t2027 * t2230, t2024 * t2235 + t2033 * t2230, t2004 * t2235 + t2005 * t2230, t1982 * t2235 + t1983 * t2230, 0, 0, 0, 0, 0, 0, t1990 * t2235 + t1991 * t2230, t1994 * t2235 + t1997 * t2230, t1976 * t2235 + t1977 * t2230, t1970 * t2235 + t1971 * t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2198, t2199, 0, t2205 * t2235 + t2206 * t2230, 0, 0, 0, 0, 0, 0, t2173 * t2230 + t2196 * t2235, t2174 * t2230 - t2193 * t2235, t2197 * t2230 + t2200 * t2235, t2151 * t2230 + t2187 * t2235, 0, 0, 0, 0, 0, 0, t2120 * t2230 - t2137 * t2235, t2125 * t2230 - t2145 * t2235, t2114 * t2230 - t2131 * t2235, t2083 * t2230 - t2090 * t2235, 0, 0, 0, 0, 0, 0, t2065 * t2230 - t2074 * t2235, t2067 * t2230 - t2084 * t2235, t2051 * t2230 - t2059 * t2235, t2014 * t2230 - t2020 * t2235, 0, 0, 0, 0, 0, 0, t2017 * t2230 - t2027 * t2235, t2024 * t2230 - t2033 * t2235, t2004 * t2230 - t2005 * t2235, t1982 * t2230 - t1983 * t2235, 0, 0, 0, 0, 0, 0, t1990 * t2230 - t1991 * t2235, t1994 * t2230 - t1997 * t2235, t1976 * t2230 - t1977 * t2235, t1970 * t2230 - t1971 * t2235; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2171, t2172, 0, t2150, 0, 0, 0, 0, 0, 0, t2119, t2124, t2113, t2082, 0, 0, 0, 0, 0, 0, t2064, t2066, t2050, t2013, 0, 0, 0, 0, 0, 0, t2016, t2023, t2003, t1981, 0, 0, 0, 0, 0, 0, t1989, t1993, t1975, t1969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2236, -qJDD(1), 0, t2206, 0, 0, 0, 0, 0, 0, t2173, t2174, t2197, t2151, 0, 0, 0, 0, 0, 0, t2120, t2125, t2114, t2083, 0, 0, 0, 0, 0, 0, t2065, t2067, t2051, t2014, 0, 0, 0, 0, 0, 0, t2017, t2024, t2004, t1982, 0, 0, 0, 0, 0, 0, t1990, t1994, t1976, t1970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2236, 0, t2205, 0, 0, 0, 0, 0, 0, t2196, -t2193, t2200, t2187, 0, 0, 0, 0, 0, 0, -t2137, -t2145, -t2131, -t2090, 0, 0, 0, 0, 0, 0, -t2074, -t2084, -t2059, -t2020, 0, 0, 0, 0, 0, 0, -t2027, -t2033, -t2005, -t1983, 0, 0, 0, 0, 0, 0, -t1991, -t1997, -t1977, -t1971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2171, t2172, 0, t2150, 0, 0, 0, 0, 0, 0, t2119, t2124, t2113, t2082, 0, 0, 0, 0, 0, 0, t2064, t2066, t2050, t2013, 0, 0, 0, 0, 0, 0, t2016, t2023, t2003, t1981, 0, 0, 0, 0, 0, 0, t1989, t1993, t1975, t1969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2210, t2204, t2218, t2176, 0, 0, 0, 0, 0, 0, t2138, t2146, t2132, t2091, 0, 0, 0, 0, 0, 0, t2075, t2085, t2060, t2021, 0, 0, 0, 0, 0, 0, t2028, t2034, t2006, t1984, 0, 0, 0, 0, 0, 0, t1992, t1998, t1978, t1972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2203, t2209, -t2251, t2175, 0, 0, 0, 0, 0, 0, -t2159, -t2161, -t2157, -t2154, 0, 0, 0, 0, 0, 0, -t2115, -t2117, -t2126, -t2123, 0, 0, 0, 0, 0, 0, -t2070, -t2072, -t2095, -t2081, 0, 0, 0, 0, 0, 0, -t2037, -t2039, -t2063, -t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2196, t2193, -t2200, -t2187, 0, 0, 0, 0, 0, 0, t2137, t2145, t2131, t2090, 0, 0, 0, 0, 0, 0, t2074, t2084, t2059, t2020, 0, 0, 0, 0, 0, 0, t2027, t2033, t2005, t1983, 0, 0, 0, 0, 0, 0, t1991, t1997, t1977, t1971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2169, t2163, t2160, t2122, 0, 0, 0, 0, 0, 0, t2106, t2112, t2089, t2043, 0, 0, 0, 0, 0, 0, t2047, t2058, t2026, t1996, 0, 0, 0, 0, 0, 0, t2008, t2012, t1986, t1974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2164, t2180, t2162, t2121, 0, 0, 0, 0, 0, 0, t2105, t2111, t2088, t2042, 0, 0, 0, 0, 0, 0, t2046, t2057, t2025, t1995, 0, 0, 0, 0, 0, 0, t2007, t2011, t1985, t1973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2159, t2161, t2157, t2154, 0, 0, 0, 0, 0, 0, t2115, t2117, t2126, t2123, 0, 0, 0, 0, 0, 0, t2070, t2072, t2095, t2081, 0, 0, 0, 0, 0, 0, t2037, t2039, t2063, t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2140, t2135, t2116, t2069, 0, 0, 0, 0, 0, 0, t2077, t2087, t2045, t2010, 0, 0, 0, 0, 0, 0, t2030, t2036, t2000, t1980; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2136, t2153, t2118, t2068, 0, 0, 0, 0, 0, 0, t2076, t2086, t2044, t2009, 0, 0, 0, 0, 0, 0, t2029, t2035, t1999, t1979; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2115, t2117, t2126, t2123, 0, 0, 0, 0, 0, 0, t2070, t2072, t2095, t2081, 0, 0, 0, 0, 0, 0, t2037, t2039, t2063, t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2107, t2103, t2071, t2032, 0, 0, 0, 0, 0, 0, t2049, t2062, t2019, t1988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2104, t2127, t2073, t2031, 0, 0, 0, 0, 0, 0, t2048, t2061, t2018, t1987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2070, t2072, t2095, t2081, 0, 0, 0, 0, 0, 0, t2037, t2039, t2063, t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2080, t2078, t2038, t2002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2079, t2101, t2040, t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2037, t2039, t2063, t2041;];
f_new_reg  = t1;
