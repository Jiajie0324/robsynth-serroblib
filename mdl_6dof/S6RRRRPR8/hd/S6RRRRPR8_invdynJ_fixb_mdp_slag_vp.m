% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR8_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR8_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR8_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR8_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR8_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR8_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR8_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR8_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:45:17
% EndTime: 2019-03-09 22:45:44
% DurationCPUTime: 19.89s
% Computational Cost: add. (9938->752), mult. (21611->944), div. (0->0), fcn. (15503->12), ass. (0->309)
t775 = sin(qJ(3));
t776 = sin(qJ(2));
t906 = qJD(1) * t776;
t871 = t775 * t906;
t779 = cos(qJ(3));
t901 = qJD(2) * t779;
t706 = -t871 + t901;
t903 = qJD(2) * t775;
t707 = t779 * t906 + t903;
t774 = sin(qJ(4));
t959 = cos(qJ(4));
t635 = -t959 * t706 + t707 * t774;
t773 = sin(qJ(6));
t778 = cos(qJ(6));
t818 = t774 * t706 + t707 * t959;
t574 = t635 * t773 + t778 * t818;
t780 = cos(qJ(2));
t765 = t780 * qJDD(1);
t888 = qJD(1) * qJD(2);
t974 = -t776 * t888 + t765;
t703 = qJDD(3) - t974;
t698 = qJDD(4) + t703;
t683 = -qJDD(6) + t698;
t905 = qJD(1) * t780;
t863 = qJD(3) + t905;
t885 = qJDD(1) * t776;
t801 = qJD(2) * t863 + t885;
t887 = qJD(1) * qJD(3);
t866 = t776 * t887;
t836 = -qJDD(2) + t866;
t813 = t836 * t775;
t789 = t801 * t779 - t813;
t824 = qJD(2) * qJD(3) + t885;
t867 = t780 * t888;
t992 = t824 + t867;
t858 = t775 * t992 + t779 * t866;
t806 = qJDD(2) * t779 - t858;
t869 = t959 * qJD(4);
t896 = qJD(4) * t774;
t547 = -t706 * t869 + t707 * t896 - t774 * t806 - t959 * t789;
t548 = qJD(4) * t818 + t774 * t789 - t959 * t806;
t894 = qJD(6) * t778;
t895 = qJD(6) * t773;
t859 = t778 * t547 - t773 * t548 - t635 * t894 + t818 * t895;
t750 = -qJD(3) + t905;
t735 = -qJD(4) + t750;
t889 = -qJD(6) - t735;
t988 = -t778 * t635 + t773 * t818;
t1011 = -t683 * MDP(33) + (t574 ^ 2 - t988 ^ 2) * MDP(30) - (t889 * t988 + t859) * MDP(31) + t988 * MDP(29) * t574;
t1001 = t635 * t818;
t865 = -t547 * t773 - t778 * t548;
t514 = qJD(6) * t574 + t865;
t526 = -t635 * t735 - t547;
t962 = t818 ^ 2;
t1010 = t698 * MDP(22) + (-t735 * t818 - t548) * MDP(21) + MDP(18) * t1001 + (-t635 ^ 2 + t962) * MDP(19) + t526 * MDP(20) + (t574 * t889 + t514) * MDP(32) - t1011;
t947 = qJD(2) * pkin(2);
t726 = pkin(7) * t906 - t947;
t823 = pkin(3) * t706 - t726;
t804 = qJ(5) * t818 + t823;
t961 = pkin(4) + pkin(5);
t538 = -t635 * t961 + t804;
t772 = qJ(3) + qJ(4);
t766 = sin(t772);
t781 = cos(qJ(1));
t927 = t781 * t766;
t767 = cos(t772);
t777 = sin(qJ(1));
t931 = t777 * t767;
t672 = t780 * t927 - t931;
t928 = t780 * t781;
t673 = t766 * t777 + t767 * t928;
t612 = t672 * t778 - t673 * t773;
t828 = t766 * t778 - t767 * t773;
t721 = -pkin(2) * t780 - pkin(8) * t776 - pkin(1);
t699 = t721 * qJD(1);
t763 = pkin(7) * t905;
t727 = qJD(2) * pkin(8) + t763;
t648 = t775 * t699 + t779 * t727;
t607 = pkin(9) * t706 + t648;
t852 = pkin(2) * t776 - pkin(8) * t780;
t715 = t852 * qJD(2);
t653 = qJD(1) * t715 + qJDD(1) * t721;
t641 = t779 * t653;
t681 = pkin(7) * t974 + qJDD(2) * pkin(8);
t883 = t775 * qJDD(2);
t884 = qJDD(1) * t779;
t533 = -t775 * t681 + t641 - (t776 * t884 + t779 * t867 + t883) * pkin(9) + t703 * pkin(3) - t607 * qJD(3);
t897 = qJD(3) * t779;
t898 = qJD(3) * t775;
t810 = t775 * t653 + t779 * t681 + t699 * t897 - t727 * t898;
t539 = pkin(9) * t806 + t810;
t647 = t779 * t699 - t727 * t775;
t606 = -pkin(9) * t707 + t647;
t595 = -pkin(3) * t750 + t606;
t860 = -t959 * t533 + t774 * t539 + t595 * t896 + t607 * t869;
t684 = t698 * pkin(4);
t969 = t684 - qJDD(5);
t509 = t860 - t969;
t503 = -pkin(5) * t698 + pkin(10) * t547 + t509;
t861 = -t774 * t533 - t959 * t539 - t595 * t869 + t607 * t896;
t680 = t698 * qJ(5);
t719 = t735 * qJD(5);
t976 = t680 - t719;
t508 = -t861 + t976;
t506 = pkin(10) * t548 + t508;
t936 = t774 * t607;
t550 = t959 * t595 - t936;
t890 = qJD(5) - t550;
t983 = pkin(10) * t818;
t891 = -t890 + t983;
t525 = t735 * t961 - t891;
t602 = t959 * t607;
t551 = t774 * t595 + t602;
t997 = pkin(10) * t635;
t532 = t551 + t997;
t720 = t735 * qJ(5);
t528 = t532 - t720;
t862 = t778 * t503 - t773 * t506 - t525 * t895 - t528 * t894;
t949 = g(3) * t776;
t930 = t777 * t780;
t938 = t767 * t781;
t670 = t766 * t930 + t938;
t671 = t767 * t930 - t927;
t972 = t670 * t778 - t671 * t773;
t1006 = g(1) * t612 + g(2) * t972 + t538 * t574 + t828 * t949 - t862;
t608 = t670 * t773 + t671 * t778;
t827 = t766 * t773 + t767 * t778;
t832 = t672 * t773 + t673 * t778;
t1009 = -g(1) * t832 - g(2) * t608 - t538 * t988 - t827 * t949;
t929 = t779 * t780;
t826 = pkin(3) * t776 - pkin(9) * t929;
t960 = pkin(9) + pkin(8);
t877 = qJD(3) * t960;
t712 = t852 * qJD(1);
t912 = pkin(7) * t871 + t779 * t712;
t1008 = qJD(1) * t826 + t779 * t877 + t912;
t693 = t775 * t712;
t932 = t776 * t779;
t933 = t775 * t780;
t1007 = -t693 - (-pkin(7) * t932 - pkin(9) * t933) * qJD(1) - t775 * t877;
t879 = t773 * t503 + t778 * t506 + t525 * t894;
t1005 = t879 + t1009;
t935 = t774 * t775;
t817 = t779 * t959 - t935;
t970 = qJD(3) + qJD(4);
t973 = t959 * qJD(3) + t869;
t917 = -t779 * t973 + t817 * t905 + t935 * t970;
t728 = t960 * t775;
t729 = t960 * t779;
t656 = -t774 * t728 + t959 * t729;
t849 = g(1) * t781 + g(2) * t777;
t820 = t849 * t776;
t948 = g(3) * t780;
t964 = t820 - t948;
t999 = t656 * t698 + t766 * t964;
t946 = qJ(5) * t635;
t559 = pkin(4) * t635 - t804;
t995 = t559 * t635;
t994 = t635 * t823;
t993 = t1007 * t959 - t1008 * t774 - t728 * t869 - t729 * t896;
t709 = t774 * t779 + t775 * t959;
t652 = t970 * t709;
t916 = -t709 * t905 + t652;
t958 = pkin(3) * t775;
t855 = pkin(3) * t898 - t905 * t958 - t763;
t900 = qJD(2) * t780;
t876 = t775 * t900;
t991 = t776 * t897 + t876;
t984 = pkin(4) * t818;
t979 = t818 * t961;
t556 = t774 * t606 + t602;
t853 = pkin(3) * t896 - t556;
t921 = -qJ(5) * t906 + t993;
t977 = qJD(4) * t656 + t1007 * t774 + t1008 * t959;
t557 = t959 * t606 - t936;
t911 = pkin(3) * t869 + qJD(5) - t557;
t975 = qJ(5) * t917 - qJD(5) * t709 + t855;
t688 = t775 * t930 + t779 * t781;
t690 = -t775 * t928 + t777 * t779;
t971 = -g(1) * t690 + g(2) * t688;
t940 = t766 * t776;
t797 = g(1) * t672 + g(2) * t670 + g(3) * t940 - t860;
t790 = t559 * t818 - t797 - t969;
t967 = t818 * t823 + t797;
t957 = pkin(7) * t775;
t768 = t776 * pkin(7);
t945 = qJDD(2) * pkin(2);
t944 = t551 * t735;
t941 = t707 * t750;
t939 = t767 * t776;
t937 = t773 * t528;
t934 = t775 * t776;
t926 = -t911 + t983;
t925 = -t916 * t961 - t975;
t830 = -t709 * t773 - t778 * t817;
t924 = qJD(6) * t830 + t773 * t916 - t778 * t917;
t643 = t709 * t778 - t773 * t817;
t923 = qJD(6) * t643 - t773 * t917 - t778 * t916;
t922 = pkin(4) * t916 + t975;
t920 = pkin(4) * t906 + t977;
t705 = t779 * t721;
t646 = -pkin(9) * t932 + t705 + (-pkin(3) - t957) * t780;
t752 = pkin(7) * t929;
t910 = t775 * t721 + t752;
t654 = -pkin(9) * t934 + t910;
t918 = t774 * t646 + t959 * t654;
t914 = t775 * t715 + t721 * t897;
t902 = qJD(2) * t776;
t913 = t779 * t715 + t902 * t957;
t751 = pkin(3) * t934;
t716 = t768 + t751;
t770 = t776 ^ 2;
t909 = -t780 ^ 2 + t770;
t904 = qJD(2) * t706;
t899 = qJD(3) * t706;
t893 = t707 * qJD(2);
t892 = t726 * qJD(3);
t880 = t776 * t961;
t659 = pkin(3) * t991 + pkin(7) * t900;
t760 = pkin(3) * t779 + pkin(2);
t878 = pkin(7) + t958;
t875 = t750 * t897;
t874 = t750 * t898;
t873 = t776 * t898;
t864 = -qJD(3) * t699 - t681;
t759 = -pkin(3) * t959 - pkin(4);
t857 = t959 * t900;
t856 = -pkin(4) * t940 + qJ(5) * t939;
t854 = -t853 + t997;
t851 = -g(1) * t670 + g(2) * t672;
t850 = g(1) * t671 - g(2) * t673;
t848 = g(1) * t777 - g(2) * t781;
t761 = pkin(7) * t885;
t847 = -pkin(7) * t867 - t761 + t945;
t576 = -qJ(5) * t780 + t918;
t677 = t817 * t776;
t845 = qJ(5) * t677 - t716;
t843 = t646 * t959 - t774 * t654;
t842 = t727 * t897 - t641;
t621 = -pkin(10) * t817 + t656;
t841 = -pkin(10) * t917 - qJD(1) * t880 + qJD(6) * t621 - t977;
t655 = t728 * t959 + t774 * t729;
t620 = -t709 * pkin(10) + t655;
t840 = -pkin(10) * t916 - qJD(6) * t620 - t921;
t839 = -pkin(3) * t707 - t946;
t838 = -pkin(8) * t703 + t892;
t837 = qJ(5) * t773 + t778 * t961;
t577 = t780 * pkin(4) - t843;
t558 = t780 * pkin(5) - t677 * pkin(10) + t577;
t676 = t709 * t776;
t560 = pkin(10) * t676 + t576;
t835 = t558 * t778 - t560 * t773;
t834 = t558 * t773 + t560 * t778;
t831 = t778 * t676 - t677 * t773;
t615 = t676 * t773 + t677 * t778;
t753 = -pkin(5) + t759;
t754 = pkin(3) * t774 + qJ(5);
t829 = t753 * t778 - t754 * t773;
t825 = qJ(5) * t709 + t760;
t822 = t760 * t780 + t776 * t960 + pkin(1);
t821 = pkin(4) * t767 + qJ(5) * t766 + t760;
t819 = -0.2e1 * pkin(1) * t888 - pkin(7) * qJDD(2);
t816 = t703 * t775 - t875;
t815 = t779 * t703 + t874;
t580 = t826 * qJD(2) + (-t752 + (pkin(9) * t776 - t721) * t775) * qJD(3) + t913;
t584 = -t991 * pkin(9) + (-t776 * t901 - t780 * t898) * pkin(7) + t914;
t812 = -t580 * t959 + t774 * t584 + t646 * t896 + t654 * t869;
t811 = -t775 * t887 + t884;
t809 = t774 * t580 + t959 * t584 + t646 * t869 - t654 * t896;
t808 = t528 * t895 - t879;
t785 = qJD(1) ^ 2;
t807 = pkin(1) * t785 + t849;
t805 = -t655 * t698 - t767 * t948 + (g(1) * t938 + g(2) * t931) * t776;
t585 = t652 * t776 + t774 * t876 - t779 * t857;
t803 = -qJ(5) * t585 + qJD(5) * t677 - t659;
t800 = -qJD(3) * pkin(8) * t750 - t847 - t945 + t948;
t784 = qJD(2) ^ 2;
t799 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t784 + t848;
t798 = g(1) * t673 + g(2) * t671 + g(3) * t939 + t861;
t518 = qJ(5) * t902 - qJD(5) * t780 + t809;
t794 = -g(1) * (-t672 * pkin(4) + qJ(5) * t673) - g(2) * (-t670 * pkin(4) + qJ(5) * t671);
t791 = -t550 * t735 + t798;
t594 = -pkin(3) * t806 - t847;
t788 = -t547 * qJ(5) + qJD(5) * t818 - t594;
t691 = t775 * t777 + t779 * t928;
t689 = t775 * t781 - t777 * t929;
t632 = -pkin(4) * t817 - t825;
t603 = t817 * t961 + t825;
t596 = pkin(4) * t676 - t845;
t586 = t775 * t857 - t774 * t873 - t896 * t934 + (t774 * t900 + t776 * t973) * t779;
t579 = t946 + t984;
t578 = -t676 * t961 + t845;
t564 = -t839 + t984;
t553 = -t946 - t979;
t545 = -t720 + t551;
t544 = pkin(4) * t735 + t890;
t543 = t839 - t979;
t524 = pkin(4) * t586 - t803;
t521 = qJD(6) * t615 - t585 * t773 - t778 * t586;
t520 = qJD(6) * t831 - t585 * t778 + t586 * t773;
t519 = -pkin(4) * t902 + t812;
t517 = -t586 * t961 + t803;
t516 = pkin(10) * t586 + t518;
t515 = t585 * pkin(10) - qJD(2) * t880 + t812;
t512 = t525 * t773 + t528 * t778;
t511 = t525 * t778 - t937;
t510 = t548 * pkin(4) - t788;
t507 = -t548 * t961 + t788;
t1 = [((t706 * t779 - t707 * t775) * t900 + ((-t707 * qJD(3) + t806) * t779 + (-t899 - t789) * t775) * t776) * MDP(12) + (-t707 * t873 + (-t776 * t813 + t780 * t893 + t932 * t992) * t779) * MDP(11) + ((qJD(6) * t835 + t515 * t773 + t516 * t778) * t889 + t834 * t683 + t808 * t780 + t512 * t902 + t517 * t574 - t578 * t859 + t507 * t615 + t538 * t520 + g(1) * t972 - g(2) * t612) * MDP(35) + (-t514 * t780 + t521 * t889 - t683 * t831 + t902 * t988) * MDP(32) + (-(-qJD(6) * t834 + t515 * t778 - t516 * t773) * t889 - t835 * t683 + t862 * t780 - t511 * t902 + t517 * t988 + t578 * t514 - t507 * t831 + t538 * t521 + g(1) * t608 - g(2) * t832) * MDP(34) + (-t514 * t615 - t520 * t988 - t521 * t574 - t831 * t859) * MDP(30) + (t776 * t819 + t780 * t799) * MDP(9) + (-t776 * t799 + t780 * t819) * MDP(10) + ((t750 * t903 - t806) * t780 + (-t816 + t904) * t776) * MDP(14) + ((-t883 + (-t750 - t863) * t901) * t780 + (-t780 * t811 + t815 + t893) * t776) * MDP(13) + (-t703 * t780 - t750 * t902) * MDP(15) + (-t698 * t780 - t735 * t902) * MDP(22) + (t548 * t780 + t586 * t735 - t635 * t902 - t676 * t698) * MDP(21) + (t509 * t780 + t510 * t676 + t519 * t735 + t524 * t635 - t544 * t902 + t548 * t596 + t559 * t586 - t577 * t698 + t850) * MDP(25) + t848 * MDP(2) + t849 * MDP(3) + (t508 * t576 + t545 * t518 + t510 * t596 + t559 * t524 + t509 * t577 + t544 * t519 - g(1) * (-pkin(4) * t671 - qJ(5) * t670) - g(2) * (pkin(4) * t673 + qJ(5) * t672) + (-g(1) * t878 - g(2) * t822) * t781 + (g(1) * t822 - g(2) * t878) * t777) * MDP(28) + (qJDD(1) * t770 + 0.2e1 * t776 * t867) * MDP(4) + (-t520 * t889 - t574 * t902 - t615 * t683 - t780 * t859) * MDP(31) + (-t683 * t780 + t889 * t902) * MDP(33) + (t520 * t574 - t615 * t859) * MDP(29) + (t716 * t548 + t550 * t902 - t586 * t823 + t594 * t676 + t659 * t635 + t698 * t843 + t735 * t812 + t780 * t860 + t850) * MDP(23) + (-t716 * t547 - t551 * t902 + t585 * t823 + t594 * t677 + t659 * t818 - t698 * t918 + t735 * t809 - t780 * t861 + t851) * MDP(24) + (-(-t721 * t898 + t913) * t750 + t705 * t703 - g(1) * t689 - g(2) * t691 + ((t875 - t904) * pkin(7) + (-pkin(7) * t703 + qJD(2) * t726 - t864) * t775 + t842) * t780 + (-pkin(7) * t806 + t647 * qJD(2) - t775 * t847 + t779 * t892) * t776) * MDP(16) + (t914 * t750 - t910 * t703 - g(1) * t688 - g(2) * t690 + (t726 * t901 + (-t874 + t893) * pkin(7) + t810) * t780 + (-t775 * t892 - t648 * qJD(2) - t847 * t779 + (t883 + t811 * t776 + (-t750 + t863) * t901) * pkin(7)) * t776) * MDP(17) + 0.2e1 * (t765 * t776 - t888 * t909) * MDP(5) + (t547 * t780 + t585 * t735 + t677 * t698 + t818 * t902) * MDP(20) + (-t508 * t780 - t510 * t677 - t518 * t735 - t524 * t818 + t545 * t902 + t547 * t596 + t559 * t585 + t576 * t698 - t851) * MDP(27) + (-t508 * t676 + t509 * t677 - t518 * t635 + t519 * t818 - t544 * t585 - t545 * t586 - t547 * t577 - t548 * t576 + t776 * t848) * MDP(26) + (t547 * t676 - t548 * t677 + t585 * t635 - t586 * t818) * MDP(19) + (-t547 * t677 - t585 * t818) * MDP(18) + qJDD(1) * MDP(1) + (qJDD(2) * t780 - t776 * t784) * MDP(7) + (qJDD(2) * t776 + t780 * t784) * MDP(6); (-MDP(4) * t776 * t780 + MDP(5) * t909) * t785 + (t698 * t709 + t735 * t917) * MDP(20) + (-(t620 * t778 - t621 * t773) * t683 + t603 * t514 - t507 * t830 - (t773 * t840 - t778 * t841) * t889 + t925 * t988 + t923 * t538 + t964 * t827) * MDP(34) + (-t514 * t643 - t574 * t923 - t830 * t859 - t924 * t988) * MDP(30) + (t750 * MDP(15) - MDP(20) * t818 + t635 * MDP(21) + t735 * MDP(22) - t550 * MDP(23) + t551 * MDP(24) + t544 * MDP(25) - t545 * MDP(27) + t574 * MDP(31) - MDP(32) * t988 - MDP(33) * t889 + t511 * MDP(34) - t512 * MDP(35)) * t906 + (t760 * t547 + t594 * t709 + t735 * t993 + t855 * t818 + t917 * t823 - t999) * MDP(24) + (-t510 * t709 + t547 * t632 + t917 * t559 - t921 * t735 - t922 * t818 + t999) * MDP(27) + (t776 * t807 - t761 - t948) * MDP(9) + (t949 + (-pkin(7) * qJDD(1) + t807) * t780) * MDP(10) + ((-t706 * t776 - t750 * t933) * qJD(1) + t815) * MDP(14) + (-t693 * t750 + (-pkin(7) * t707 * t780 + t648 * t776) * qJD(1) + (-pkin(2) * t824 + (t750 * t768 + (-t726 - t947) * t780) * qJD(1) + t838) * t779 + ((pkin(2) * t887 - t849) * t776 + t800) * t775) * MDP(17) + (-pkin(2) * t858 + t912 * t750 + t838 * t775 + (-t647 * t776 + (pkin(7) * t706 - t726 * t775) * t780) * qJD(1) + (t820 - t800) * t779) * MDP(16) + MDP(7) * t765 + MDP(6) * t885 + ((-t707 * t776 + t750 * t929) * qJD(1) + t816) * MDP(13) + (t508 * t656 + t509 * t655 + t510 * t632 + t922 * t559 + t921 * t545 + t920 * t544 + (-g(3) * t821 - t849 * t960) * t780 + (-g(3) * t960 + t821 * t849) * t776) * MDP(28) + (t574 * t924 - t643 * t859) * MDP(29) + (t698 * t817 + t735 * t916) * MDP(21) + (-t510 * t817 + t548 * t632 + t559 * t916 + t635 * t922 + t735 * t920 + t805) * MDP(25) + (-t760 * t548 - t594 * t817 + t855 * t635 + t735 * t977 - t823 * t916 + t805) * MDP(23) + (t508 * t817 + t509 * t709 - t544 * t917 - t545 * t916 - t547 * t655 - t548 * t656 - t635 * t921 - t780 * t849 + t818 * t920 - t949) * MDP(26) + (-t547 * t817 - t548 * t709 + t635 * t917 - t818 * t916) * MDP(19) + (-t643 * t683 - t889 * t924) * MDP(31) + ((t620 * t773 + t621 * t778) * t683 - t603 * t859 + t507 * t643 - (t773 * t841 + t778 * t840) * t889 + t925 * t574 + t924 * t538 + t964 * t828) * MDP(35) + (-t683 * t830 + t889 * t923) * MDP(32) + (-t836 * t775 ^ 2 + (t775 * t801 - t941) * t779) * MDP(11) + ((-t858 + t941) * t775 + (t899 + 0.2e1 * t883 + t824 * t779 + (-t873 + (-t706 + t901) * t780) * qJD(1)) * t779) * MDP(12) + (-t547 * t709 - t818 * t917) * MDP(18) + qJDD(2) * MDP(8); (-t556 * t735 + (-t635 * t707 + t698 * t959 + t735 * t896) * pkin(3) + t967) * MDP(23) + (-t564 * t635 - t698 * t759 + t735 * t853 - t790) * MDP(25) + (t706 * t750 + t789) * MDP(13) + (g(1) * t691 - g(2) * t689 + g(3) * t932 - t647 * t750 - t706 * t726 - t810) * MDP(17) + (t564 * t818 + t698 * t754 - t735 * t911 - t798 + t976 - t995) * MDP(27) + (-t547 * t759 - t548 * t754 + (t545 + t853) * t818 + (t544 - t911) * t635) * MDP(26) + (-t557 * t735 - t994 + (-t698 * t774 - t707 * t818 + t735 * t869) * pkin(3) + t798) * MDP(24) + (-t829 * t683 - t543 * t988 - ((-qJD(6) * t754 - t854) * t778 + (-qJD(6) * t753 + t926) * t773) * t889 + t1006) * MDP(34) + ((t753 * t773 + t754 * t778) * t683 - t543 * t574 - (t773 * t854 + t778 * t926) * t889 + (t829 * t889 - t937) * qJD(6) + t1005) * MDP(35) + (t806 - t941) * MDP(14) + (-t706 ^ 2 + t707 ^ 2) * MDP(12) + t703 * MDP(15) + (-t648 * t750 - t707 * t726 + (t864 + t949) * t775 - t842 + t971) * MDP(16) + (t508 * t754 + t509 * t759 - t559 * t564 - t544 * t556 - g(3) * (-t751 + t856) + t911 * t545 + (t544 * t896 + t971) * pkin(3) + t794) * MDP(28) - t707 * t706 * MDP(11) + t1010; (-t944 + t967) * MDP(23) + (t791 - t994) * MDP(24) + (-t579 * t635 + t684 - t790 - t944) * MDP(25) + (pkin(4) * t547 - qJ(5) * t548 + (t545 - t551) * t818 + (t544 - t890) * t635) * MDP(26) + (t579 * t818 + 0.2e1 * t680 - 0.2e1 * t719 - t791 - t995) * MDP(27) + (-t509 * pkin(4) - g(3) * t856 + t508 * qJ(5) - t544 * t551 + t545 * t890 - t559 * t579 + t794) * MDP(28) + (t837 * t683 - t553 * t988 - ((-qJ(5) * qJD(6) - t532) * t778 + (qJD(6) * t961 + t891) * t773) * t889 + t1006) * MDP(34) + ((qJ(5) * t778 - t773 * t961) * t683 - t553 * t574 - (t773 * t532 + t778 * t891) * t889 + (-t837 * t889 - t937) * qJD(6) + t1005) * MDP(35) + t1010; (-t698 + t1001) * MDP(25) + t526 * MDP(26) + (-t735 ^ 2 - t962) * MDP(27) + (t545 * t735 + t790) * MDP(28) + (-t683 * t778 - t818 * t988) * MDP(34) + (-t574 * t818 + t683 * t773) * MDP(35) - (MDP(34) * t773 + MDP(35) * t778) * t889 ^ 2; (-t865 + (-qJD(6) - t889) * t574) * MDP(32) + (-t512 * t889 - t1006) * MDP(34) + (-t511 * t889 - t1009 + t808) * MDP(35) + t1011;];
tau  = t1;
