% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR8_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:44:48
% EndTime: 2019-03-09 22:44:58
% DurationCPUTime: 3.12s
% Computational Cost: add. (3903->337), mult. (9478->546), div. (0->0), fcn. (8261->8), ass. (0->158)
t142 = sin(qJ(2));
t141 = sin(qJ(3));
t144 = cos(qJ(2));
t200 = t144 * qJD(2);
t181 = t141 * t200;
t143 = cos(qJ(3));
t203 = qJD(3) * t143;
t225 = t142 * t203 + t181;
t224 = -0.4e1 * t142;
t220 = cos(qJ(4));
t175 = t220 * qJD(4);
t223 = t220 * qJD(3) + t175;
t136 = t142 ^ 2;
t172 = (-t144 ^ 2 + t136) * qJD(2);
t137 = t143 ^ 2;
t206 = t141 ^ 2 - t137;
t173 = t206 * qJD(3);
t222 = qJD(3) + qJD(4);
t164 = -t144 * pkin(2) - t142 * pkin(8);
t101 = -pkin(1) + t164;
t129 = t142 * qJD(2);
t202 = qJD(3) * t144;
t185 = t141 * t202;
t152 = t143 * t129 + t185;
t163 = pkin(2) * t142 - pkin(8) * t144;
t97 = t163 * qJD(2);
t48 = pkin(7) * t152 - t101 * t203 - t141 * t97;
t146 = 2 * qJD(5);
t145 = -pkin(4) - pkin(5);
t221 = -pkin(9) - pkin(8);
t219 = cos(qJ(6));
t218 = pkin(3) * t142;
t217 = pkin(7) * t141;
t140 = sin(qJ(4));
t209 = t142 * t143;
t92 = t143 * t101;
t67 = -pkin(9) * t209 + t92 + (-pkin(3) - t217) * t144;
t210 = t141 * t142;
t208 = t143 * t144;
t119 = pkin(7) * t208;
t213 = t141 * t101 + t119;
t72 = -pkin(9) * t210 + t213;
t216 = t140 * t67 + t220 * t72;
t105 = t221 * t143;
t212 = t140 * t141;
t74 = -t220 * t105 + t221 * t212;
t182 = t141 * t129;
t214 = pkin(7) * t182 + t143 * t97;
t211 = t140 * t143;
t132 = qJD(6) * t219;
t207 = t219 * qJD(5) + t145 * t132;
t98 = pkin(3) * t210 + t142 * pkin(7);
t204 = qJD(3) * t141;
t201 = qJD(4) * t140;
t139 = sin(qJ(6));
t131 = qJD(6) * t139;
t199 = t144 * qJD(5);
t128 = pkin(3) * t175;
t114 = t128 + qJD(5);
t198 = qJD(5) + t114;
t197 = -0.2e1 * pkin(1) * qJD(2);
t196 = -0.2e1 * pkin(2) * qJD(3);
t195 = pkin(4) * t129;
t194 = pkin(3) * t204;
t193 = pkin(3) * t201;
t125 = -t220 * pkin(3) - pkin(4);
t120 = -pkin(5) + t125;
t192 = t219 * t114 + t120 * t132 + t139 * t193;
t191 = t140 * t210;
t127 = pkin(7) * t200;
t75 = t225 * pkin(3) + t127;
t126 = -t143 * pkin(3) - pkin(2);
t190 = t221 * qJD(3);
t189 = t220 * t143;
t188 = t219 * qJ(5);
t122 = t140 * pkin(3) + qJ(5);
t187 = t219 * t122;
t186 = t142 * t204;
t183 = t143 * t202;
t180 = t141 * t203;
t179 = t142 * t200;
t178 = t143 * t200;
t177 = qJD(2) * t220;
t35 = (-pkin(9) * t208 + t218) * qJD(2) + (-t119 + (pkin(9) * t142 - t101) * t141) * qJD(3) + t214;
t41 = -pkin(9) * t225 - t48;
t174 = t140 * t41 + t72 * t175 + t67 * t201 - t220 * t35;
t171 = 0.2e1 * t179;
t170 = t221 * t220;
t169 = t141 * t178;
t168 = t144 * t177;
t32 = -t144 * qJ(5) + t216;
t167 = -t140 * t72 + t220 * t67;
t166 = t144 * t193 - t174;
t81 = t142 * t189 - t191;
t165 = t81 * qJ(5) - t98;
t162 = t141 * t170;
t161 = qJD(3) * t170;
t33 = t144 * pkin(4) - t167;
t94 = t220 * t141 + t211;
t160 = t94 * qJ(5) - t126;
t24 = t144 * pkin(5) - t81 * pkin(10) + t33;
t80 = t94 * t142;
t28 = t80 * pkin(10) + t32;
t71 = t222 * t94;
t42 = t140 * t181 + t71 * t142 - t143 * t168;
t6 = t42 * pkin(10) + t145 * t129 + t174;
t123 = qJ(5) * t129;
t13 = -t140 * t35 - t67 * t175 + t72 * t201 - t220 * t41;
t153 = t123 - t13;
t11 = t153 - t199;
t43 = t141 * t168 - t140 * t186 - qJD(4) * t191 + (t140 * t200 + t223 * t142) * t143;
t7 = t43 * pkin(10) + t11;
t159 = t24 * t131 + t28 * t132 + t139 * t7 - t219 * t6;
t1 = t28 * t131 - t24 * t132 - t139 * t6 - t219 * t7;
t73 = -t140 * t105 - t162;
t55 = -t94 * pkin(10) + t73;
t93 = -t189 + t212;
t56 = t93 * pkin(10) + t74;
t158 = t139 * t55 + t219 * t56;
t52 = t139 * t80 + t219 * t81;
t65 = t139 * t93 + t219 * t94;
t44 = -qJD(4) * t162 - t105 * t201 - t141 * t161 - t190 * t211;
t157 = t74 * t129 + t44 * t144;
t45 = -t105 * t175 - t143 * t161 + (qJD(4) * t221 + t190) * t212;
t156 = -t73 * t129 + t45 * t144;
t155 = t139 * t145 + t188;
t154 = t139 * t120 + t187;
t150 = -t42 * qJ(5) + t81 * qJD(5) - t75;
t70 = -t223 * t143 + t222 * t212;
t149 = -t70 * qJ(5) + t94 * qJD(5) - t194;
t148 = t71 * pkin(10) - t44;
t147 = t70 * pkin(10) + t45;
t121 = -0.2e1 * t193;
t113 = -0.2e1 * t179;
t110 = t219 * t193;
t79 = t139 * qJD(5) + qJD(6) * t155;
t78 = qJ(5) * t131 - t207;
t64 = t139 * t94 - t219 * t93;
t60 = t93 * pkin(4) - t160;
t54 = qJD(6) * t154 + t139 * t114 - t110;
t53 = t122 * t131 - t192;
t51 = t139 * t81 - t219 * t80;
t49 = -t213 * qJD(3) + t214;
t47 = t145 * t93 + t160;
t46 = t80 * pkin(4) - t165;
t34 = t145 * t80 + t165;
t29 = t71 * pkin(4) - t149;
t20 = t65 * qJD(6) - t139 * t70 - t219 * t71;
t19 = t94 * t131 - t93 * t132 - t139 * t71 + t219 * t70;
t18 = t145 * t71 + t149;
t17 = t43 * pkin(4) - t150;
t16 = t52 * qJD(6) - t139 * t42 - t219 * t43;
t15 = t81 * t131 - t80 * t132 - t139 * t43 + t219 * t42;
t12 = t174 - t195;
t10 = t145 * t43 + t150;
t9 = t158 * qJD(6) + t139 * t148 - t219 * t147;
t8 = t56 * t131 - t55 * t132 - t139 * t147 - t219 * t148;
t2 = [0, 0, 0, t171, -0.2e1 * t172, 0, 0, 0, t142 * t197, t144 * t197, -0.2e1 * t136 * t180 + 0.2e1 * t137 * t179, 0.2e1 * t136 * t173 + t169 * t224, 0.2e1 * t142 * t185 + 0.2e1 * t143 * t172, -0.2e1 * t141 * t172 + 0.2e1 * t142 * t183, t113, 0.2e1 * t92 * t129 - 0.2e1 * t49 * t144 + 0.2e1 * (t136 * t203 + t141 * t179) * pkin(7), -0.2e1 * t48 * t144 - 0.2e1 * t213 * t129 + 0.2e1 * (-t136 * t204 + t143 * t171) * pkin(7), -0.2e1 * t81 * t42, 0.2e1 * t42 * t80 - 0.2e1 * t81 * t43, 0.2e1 * t129 * t81 + 0.2e1 * t42 * t144, -0.2e1 * t129 * t80 + 0.2e1 * t43 * t144, t113, 0.2e1 * t129 * t167 + 0.2e1 * t144 * t174 + 0.2e1 * t98 * t43 + 0.2e1 * t75 * t80, -0.2e1 * t129 * t216 - 0.2e1 * t13 * t144 - 0.2e1 * t98 * t42 + 0.2e1 * t75 * t81, 0.2e1 * t12 * t144 - 0.2e1 * t129 * t33 + 0.2e1 * t17 * t80 + 0.2e1 * t46 * t43, -0.2e1 * t11 * t80 + 0.2e1 * t12 * t81 - 0.2e1 * t32 * t43 - 0.2e1 * t33 * t42, -0.2e1 * t11 * t144 + 0.2e1 * t129 * t32 - 0.2e1 * t17 * t81 + 0.2e1 * t46 * t42, 0.2e1 * t32 * t11 + 0.2e1 * t33 * t12 + 0.2e1 * t46 * t17, -0.2e1 * t52 * t15, 0.2e1 * t15 * t51 - 0.2e1 * t52 * t16, -0.2e1 * t129 * t52 - 0.2e1 * t15 * t144, 0.2e1 * t129 * t51 - 0.2e1 * t16 * t144, t113, -0.2e1 * t159 * t144 - 0.2e1 * (-t139 * t28 + t219 * t24) * t129 + 0.2e1 * t10 * t51 + 0.2e1 * t34 * t16, 0.2e1 * t1 * t144 + 0.2e1 * (t139 * t24 + t219 * t28) * t129 + 0.2e1 * t10 * t52 - 0.2e1 * t34 * t15; 0, 0, 0, 0, 0, t200, -t129, 0, -t127, pkin(7) * t129, -t142 * t173 + t169, t180 * t224 - t206 * t200, t182 - t183, t152, 0 (pkin(8) * t208 + (-pkin(2) * t143 + t217) * t142) * qJD(3) + (t141 * t164 - t119) * qJD(2) (pkin(7) * t209 + t141 * t163) * qJD(3) + (t143 * t164 + t144 * t217) * qJD(2), -t42 * t94 - t81 * t70, t42 * t93 - t94 * t43 + t70 * t80 - t81 * t71, t129 * t94 + t70 * t144, -t129 * t93 + t71 * t144, 0, t126 * t43 + t194 * t80 + t98 * t71 + t75 * t93 + t156, -t126 * t42 + t194 * t81 - t98 * t70 + t75 * t94 - t157, t17 * t93 + t29 * t80 + t60 * t43 + t46 * t71 + t156, -t11 * t93 + t12 * t94 - t32 * t71 - t33 * t70 - t73 * t42 - t74 * t43 + t44 * t80 + t45 * t81, -t17 * t94 - t29 * t81 + t60 * t42 + t46 * t70 + t157, t11 * t74 + t12 * t73 + t17 * t60 + t46 * t29 - t32 * t44 + t33 * t45, -t15 * t65 - t52 * t19, t15 * t64 - t65 * t16 + t19 * t51 - t52 * t20, -t129 * t65 - t19 * t144, t129 * t64 - t20 * t144, 0, -t9 * t144 - (-t139 * t56 + t219 * t55) * t129 + t18 * t51 + t47 * t16 + t10 * t64 + t34 * t20, t10 * t65 + t129 * t158 + t8 * t144 - t47 * t15 + t18 * t52 - t34 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t180, -0.2e1 * t173, 0, 0, 0, t141 * t196, t143 * t196, -0.2e1 * t94 * t70, 0.2e1 * t70 * t93 - 0.2e1 * t94 * t71, 0, 0, 0, 0.2e1 * t126 * t71 + 0.2e1 * t194 * t93, -0.2e1 * t126 * t70 + 0.2e1 * t194 * t94, 0.2e1 * t29 * t93 + 0.2e1 * t60 * t71, 0.2e1 * t44 * t93 + 0.2e1 * t45 * t94 - 0.2e1 * t73 * t70 - 0.2e1 * t74 * t71, -0.2e1 * t29 * t94 + 0.2e1 * t60 * t70, 0.2e1 * t60 * t29 - 0.2e1 * t74 * t44 + 0.2e1 * t73 * t45, -0.2e1 * t65 * t19, 0.2e1 * t19 * t64 - 0.2e1 * t65 * t20, 0, 0, 0, 0.2e1 * t18 * t64 + 0.2e1 * t47 * t20, 0.2e1 * t18 * t65 - 0.2e1 * t47 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t178 - t186, -t225, t129, t49, t48, 0, 0, -t42, -t43, t129, t177 * t218 + t166 (-t129 * t140 + t144 * t175) * pkin(3) + t13 (pkin(4) - t125) * t129 + t166, -t114 * t80 - t122 * t43 - t125 * t42 + t193 * t81, t122 * t129 - t144 * t198 + t153, t11 * t122 + t32 * t114 + t12 * t125 + t193 * t33, 0, 0, t15, t16, t129, -t54 * t144 - (t120 * t219 - t139 * t122) * t129 + t159, t129 * t154 + t53 * t144 - t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203, -t204, 0, -pkin(8) * t203, pkin(8) * t204, 0, 0, -t70, -t71, 0, -t45, t44, -t45, -t114 * t93 - t122 * t71 - t125 * t70 + t193 * t94, -t44, t74 * t114 - t44 * t122 + t45 * t125 + t193 * t73, 0, 0, t19, t20, 0, t9, -t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, -0.2e1 * t128, t121, 0, 0.2e1 * t114, 0.2e1 * t122 * t114 + 0.2e1 * t125 * t193, 0, 0, 0, 0, 0, 0.2e1 * t54, -0.2e1 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t43, t129, -t174, t13, -t174 + 0.2e1 * t195, pkin(4) * t42 - t43 * qJ(5) - t80 * qJD(5), 0.2e1 * t123 - t13 - 0.2e1 * t199, -t12 * pkin(4) + t11 * qJ(5) + t32 * qJD(5), 0, 0, t15, t16, t129, -t79 * t144 - (-t139 * qJ(5) + t145 * t219) * t129 + t159, t129 * t155 + t78 * t144 - t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t71, 0, -t45, t44, -t45, pkin(4) * t70 - t71 * qJ(5) - t93 * qJD(5), -t44, -t45 * pkin(4) - t44 * qJ(5) + t74 * qJD(5), 0, 0, t19, t20, 0, t9, -t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t193, -t128, -t193, 0, t146 + t128, -pkin(4) * t193 + t114 * qJ(5) + t122 * qJD(5), 0, 0, 0, 0, 0, -t110 + t198 * t139 + (t188 + t187 + (t120 + t145) * t139) * qJD(6) (-qJ(5) - t122) * t131 + t192 + t207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, qJ(5) * t146, 0, 0, 0, 0, 0, 0.2e1 * t79, -0.2e1 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t129, -t42, 0, t12, 0, 0, 0, 0, 0, -t129 * t219 - t131 * t144, t129 * t139 - t132 * t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, 0, t45, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, 0, 0, 0, 0, 0, t131, t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t16, -t129, -t159, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t20, 0, -t9, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, -t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t2;
