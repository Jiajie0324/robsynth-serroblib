% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPR8_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:44:49
% EndTime: 2019-03-09 22:45:13
% DurationCPUTime: 9.82s
% Computational Cost: add. (15871->662), mult. (37520->841), div. (0->0), fcn. (26003->8), ass. (0->299)
t292 = sin(qJ(3));
t293 = sin(qJ(2));
t388 = qJD(1) * t293;
t355 = t292 * t388;
t295 = cos(qJ(3));
t382 = qJD(2) * t295;
t228 = -t355 + t382;
t360 = t295 * t388;
t384 = qJD(2) * t292;
t229 = t360 + t384;
t291 = sin(qJ(4));
t441 = cos(qJ(4));
t165 = -t441 * t228 + t229 * t291;
t290 = sin(qJ(6));
t294 = cos(qJ(6));
t312 = t291 * t228 + t229 * t441;
t103 = t165 * t290 + t294 * t312;
t465 = -t294 * t165 + t290 * t312;
t435 = t103 * t465;
t352 = t441 * qJD(3);
t332 = t295 * t352;
t351 = t441 * qJD(4);
t296 = cos(qJ(2));
t387 = qJD(1) * t296;
t361 = t292 * t387;
t362 = t441 * t295;
t403 = t291 * t292;
t449 = qJD(3) + qJD(4);
t392 = -t291 * t361 - t295 * t351 + t362 * t387 + t403 * t449 - t332;
t402 = t291 * t295;
t231 = t292 * t441 + t402;
t180 = t449 * t231;
t391 = -t231 * t387 + t180;
t468 = t103 ^ 2 - t465 ^ 2;
t271 = -qJD(3) + t387;
t258 = -qJD(4) + t271;
t248 = qJD(6) + t258;
t379 = qJD(3) * t293;
t349 = qJD(1) * t379;
t255 = t292 * t349;
t338 = qJD(3) + t387;
t318 = qJD(2) * t338;
t307 = t295 * t318 - t255;
t371 = qJD(1) * qJD(2);
t350 = t296 * t371;
t380 = qJD(3) * t292;
t364 = qJD(2) * t380 + t292 * t350 + t295 * t349;
t377 = qJD(4) * t291;
t82 = -t228 * t351 + t229 * t377 + t291 * t364 - t441 * t307;
t83 = qJD(4) * t312 + t291 * t307 + t441 * t364;
t27 = qJD(6) * t103 - t290 * t82 - t294 * t83;
t459 = t103 * t248 - t27;
t443 = pkin(4) + pkin(5);
t367 = t293 * t443;
t335 = qJD(2) * t367;
t243 = -pkin(2) * t296 - pkin(8) * t293 - pkin(1);
t221 = t243 * qJD(1);
t284 = pkin(7) * t387;
t251 = qJD(2) * pkin(8) + t284;
t175 = t295 * t221 - t251 * t292;
t141 = -pkin(9) * t229 + t175;
t128 = -pkin(3) * t271 + t141;
t176 = t221 * t292 + t251 * t295;
t142 = pkin(9) * t228 + t176;
t328 = pkin(2) * t293 - pkin(8) * t296;
t237 = t328 * qJD(2);
t222 = qJD(1) * t237;
t276 = t293 * t371;
t336 = pkin(7) * t276;
t119 = -qJD(3) * t176 + t295 * t222 + t292 * t336;
t73 = t255 * pkin(9) + (-pkin(9) * t295 * t338 + pkin(3) * t388) * qJD(2) + t119;
t378 = qJD(3) * t295;
t118 = t221 * t378 + t292 * t222 - t251 * t380 - t295 * t336;
t87 = -pkin(9) * t364 + t118;
t343 = t128 * t377 + t142 * t351 + t291 * t87 - t441 * t73;
t10 = pkin(10) * t82 - qJD(1) * t335 + t343;
t375 = qJD(6) * t294;
t376 = qJD(6) * t290;
t404 = t291 * t142;
t63 = t441 * t128 - t404;
t393 = qJD(5) - t63;
t461 = pkin(10) * t312;
t471 = -t461 + t393;
t46 = t258 * t443 + t471;
t242 = t258 * qJ(5);
t480 = t165 * pkin(10);
t135 = t441 * t142;
t64 = t291 * t128 + t135;
t50 = t64 + t480;
t48 = -t242 + t50;
t241 = t258 * qJD(5);
t266 = qJ(5) * t276;
t344 = -t128 * t351 + t142 * t377 - t291 * t73 - t441 * t87;
t14 = t266 - t241 - t344;
t7 = pkin(10) * t83 + t14;
t354 = -t294 * t10 + t290 * t7 + t48 * t375 + t46 * t376;
t283 = pkin(7) * t388;
t436 = qJD(2) * pkin(2);
t250 = t283 - t436;
t315 = pkin(3) * t228 - t250;
t306 = qJ(5) * t312 + t315;
t55 = -t165 * t443 + t306;
t467 = -t103 * t55 - t354;
t442 = -pkin(9) - pkin(8);
t363 = qJD(3) * t442;
t236 = t292 * t363;
t252 = t442 * t292;
t253 = t442 * t295;
t125 = t441 * t236 + t252 * t351 + t253 * t377 + t363 * t402;
t235 = t328 * qJD(1);
t187 = pkin(7) * t355 + t295 * t235;
t398 = t295 * t296;
t317 = pkin(3) * t293 - pkin(9) * t398;
t150 = qJD(1) * t317 + t187;
t215 = t292 * t235;
t399 = t293 * t295;
t400 = t292 * t296;
t172 = t215 + (-pkin(7) * t399 - pkin(9) * t400) * qJD(1);
t96 = t291 * t150 + t441 * t172;
t92 = qJ(5) * t388 + t96;
t429 = t125 - t92;
t70 = t441 * t141 - t404;
t419 = pkin(3) * t351 + qJD(5) - t70;
t69 = t141 * t291 + t135;
t330 = pkin(3) * t377 - t69;
t474 = t258 * t312 + t83;
t186 = t291 * t252 - t441 * t253;
t426 = qJD(4) * t186 + t150 * t441 - t442 * t332 + (-t172 + t236) * t291;
t1 = t290 * t10 + t294 * t7 + t46 * t375 - t376 * t48;
t448 = t465 * t55 - t1;
t26 = -t165 * t375 - t290 * t83 + t294 * t82 + t312 * t376;
t460 = -t248 * t465 + t26;
t479 = t392 * pkin(10) + qJD(1) * t367 + t426;
t478 = -t391 * pkin(10) - t429;
t78 = pkin(4) * t165 - t306;
t477 = t165 * t78;
t476 = -t461 + t419;
t475 = -t480 + t330;
t417 = t165 * qJ(5);
t473 = t165 * t312;
t472 = t165 * t315;
t329 = -t284 + (-t361 + t380) * pkin(3);
t357 = t293 * t378;
t381 = qJD(2) * t296;
t359 = t292 * t381;
t469 = t357 + t359;
t444 = t312 ^ 2;
t353 = t165 ^ 2 - t444;
t466 = -t165 * t258 - t82;
t463 = -0.2e1 * t371;
t462 = pkin(4) * t312;
t432 = t312 * t78;
t457 = t315 * t312;
t453 = t312 * t443;
t452 = t175 * t271 + t118;
t451 = t176 * t271 - t119;
t273 = pkin(7) * t398;
t196 = t292 * t243 + t273;
t450 = -qJ(5) * t392 + qJD(5) * t231 - t329;
t333 = t441 * t381;
t358 = t292 * t379;
t401 = t292 * t293;
t366 = t291 * t401;
t121 = t292 * t333 - t291 * t358 - qJD(4) * t366 + (t291 * t381 + (t352 + t351) * t293) * t295;
t207 = t231 * t293;
t383 = qJD(2) * t293;
t447 = -t121 * t258 - t296 * t83 + (qJD(1) * t207 + t165) * t383;
t230 = -t362 + t403;
t446 = t258 * t391 - (qJD(2) * t230 - t165) * t388;
t445 = t165 * t392 + t230 * t82 - t231 * t83 - t312 * t391;
t440 = pkin(7) * t292;
t185 = -t441 * t252 - t253 * t291;
t148 = -pkin(10) * t231 + t185;
t149 = pkin(10) * t230 + t186;
t88 = t148 * t294 - t149 * t290;
t439 = qJD(6) * t88 + t479 * t290 - t478 * t294;
t89 = t148 * t290 + t149 * t294;
t438 = -qJD(6) * t89 + t478 * t290 + t479 * t294;
t437 = -t391 * t443 + t450;
t12 = -t290 * t48 + t294 * t46;
t434 = t12 * t248;
t13 = t290 * t46 + t294 * t48;
t433 = t13 * t248;
t430 = -t391 * pkin(4) + t450;
t428 = t125 - t96;
t427 = pkin(4) * t388 + t426;
t171 = t230 * t290 + t231 * t294;
t425 = -qJD(6) * t171 + t392 * t290 + t391 * t294;
t424 = -t230 * t375 + t231 * t376 - t391 * t290 + t392 * t294;
t281 = -pkin(3) * t441 - pkin(4);
t274 = -pkin(5) + t281;
t275 = pkin(3) * t291 + qJ(5);
t199 = t274 * t294 - t275 * t290;
t423 = qJD(6) * t199 + t475 * t290 + t476 * t294;
t200 = t274 * t290 + t275 * t294;
t422 = -qJD(6) * t200 - t476 * t290 + t475 * t294;
t240 = qJ(5) * t294 - t290 * t443;
t421 = qJD(6) * t240 + t471 * t290 + t294 * t50;
t239 = -qJ(5) * t290 - t294 * t443;
t420 = -qJD(6) * t239 + t290 * t50 - t471 * t294;
t410 = t228 * t271;
t409 = t229 * t228;
t408 = t229 * t271;
t407 = t250 * t292;
t405 = t271 * t292;
t397 = t296 * t271;
t299 = qJD(1) ^ 2;
t396 = t296 * t299;
t298 = qJD(2) ^ 2;
t395 = t298 * t293;
t394 = t298 * t296;
t227 = t295 * t243;
t174 = -pkin(9) * t399 + t227 + (-pkin(3) - t440) * t296;
t181 = -pkin(9) * t401 + t196;
t111 = t291 * t174 + t441 * t181;
t390 = t295 * t237 + t383 * t440;
t238 = pkin(3) * t401 + t293 * pkin(7);
t288 = t293 ^ 2;
t389 = -t296 ^ 2 + t288;
t386 = qJD(2) * t185;
t385 = qJD(2) * t186;
t374 = t228 * qJD(3);
t373 = t229 * qJD(3);
t372 = t288 * qJD(1);
t370 = pkin(7) * t400;
t285 = pkin(7) * t381;
t365 = t293 * t396;
t191 = t469 * pkin(3) + t285;
t282 = -pkin(3) * t295 - pkin(2);
t356 = t258 * t388;
t347 = -t250 - t436;
t346 = pkin(1) * t463;
t345 = t248 ^ 2;
t340 = -t228 + t382;
t339 = -t229 + t384;
t337 = pkin(4) * t276;
t334 = -t125 * t165 - t185 * t82 - t186 * t83;
t331 = t296 * t276;
t105 = -qJ(5) * t296 + t111;
t208 = t293 * t362 - t366;
t326 = qJ(5) * t208 - t238;
t110 = t174 * t441 - t291 * t181;
t324 = -t229 * pkin(3) - t417;
t106 = t296 * pkin(4) - t110;
t74 = t296 * pkin(5) - t208 * pkin(10) + t106;
t84 = pkin(10) * t207 + t105;
t39 = -t290 * t84 + t294 * t74;
t40 = t290 * t74 + t294 * t84;
t322 = t121 * t165 + t207 * t83;
t144 = t207 * t290 + t208 * t294;
t316 = qJ(5) * t231 - t282;
t160 = pkin(3) * t364 + pkin(7) * t350;
t314 = -t258 * t64 - t343;
t313 = -t258 * t63 + t344;
t311 = t292 * t318;
t310 = t165 * t391 + t83 * t230;
t109 = t317 * qJD(2) + (-t273 + (pkin(9) * t293 - t243) * t292) * qJD(3) + t390;
t139 = t292 * t237 + t243 * t378 + (-t293 * t382 - t296 * t380) * pkin(7);
t117 = -pkin(9) * t469 + t139;
t309 = -t109 * t441 + t291 * t117 + t174 * t377 + t181 * t351;
t36 = t291 * t109 + t441 * t117 + t174 * t351 - t181 * t377;
t120 = t180 * t293 + t291 * t359 - t295 * t333;
t305 = -qJ(5) * t120 + qJD(5) * t208 - t191;
t15 = -t337 + t343;
t303 = t120 * t165 - t121 * t312 + t207 * t82 - t208 * t83;
t34 = qJ(5) * t383 - qJD(5) * t296 + t36;
t302 = -t82 * qJ(5) + qJD(5) * t312 - t160;
t195 = t227 - t370;
t193 = (-t258 - t387) * t383;
t188 = -pkin(7) * t360 + t215;
t170 = -t294 * t230 + t231 * t290;
t159 = pkin(4) * t230 - t316;
t143 = -t294 * t207 + t208 * t290;
t140 = -qJD(3) * t196 + t390;
t136 = -t230 * t443 + t316;
t129 = pkin(4) * t207 - t326;
t108 = t417 + t462;
t107 = -t207 * t443 + t326;
t91 = -t324 + t462;
t66 = -t417 - t453;
t59 = -t242 + t64;
t58 = pkin(4) * t258 + t393;
t57 = t324 - t453;
t56 = t392 * t258 + (qJD(2) * t231 - t312) * t388;
t45 = pkin(4) * t121 - t305;
t42 = qJD(6) * t144 - t290 * t120 - t294 * t121;
t41 = t294 * t120 - t290 * t121 - t207 * t375 + t208 * t376;
t38 = -t120 * t312 - t208 * t82;
t35 = -pkin(4) * t383 + t309;
t33 = -t82 * t231 - t312 * t392;
t30 = t120 * t258 + t296 * t82 + (qJD(1) * t208 + t312) * t383;
t29 = -t121 * t443 + t305;
t28 = t83 * pkin(4) - t302;
t21 = pkin(10) * t121 + t34;
t20 = t120 * pkin(10) + t309 - t335;
t11 = -t443 * t83 + t302;
t4 = -qJD(6) * t40 + t294 * t20 - t290 * t21;
t3 = qJD(6) * t39 + t290 * t20 + t294 * t21;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t331, t389 * t463, t394, -0.2e1 * t331, -t395, 0, -pkin(7) * t394 + t293 * t346, pkin(7) * t395 + t296 * t346, 0, 0, t307 * t399 + (t295 * t381 - t358) * t229 (t228 * t295 - t229 * t292) * t381 + ((t255 - t374) * t292 + (-t311 - t364 - t373) * t295) * t293, t271 * t358 + t255 * t296 + (t229 * t293 + (t372 + (-t271 - t338) * t296) * t295) * qJD(2), -t228 * t469 + t364 * t401, t271 * t357 + t364 * t296 + (t228 * t293 + (-t372 + t397) * t292) * qJD(2) (-t271 - t387) * t383, -t119 * t296 - t140 * t271 + (pkin(7) * t364 + t250 * t378) * t293 + ((-pkin(7) * t228 + t407) * t296 + (t175 + (t195 + t370) * qJD(1)) * t293) * qJD(2), t139 * t271 + (-t250 * t380 - pkin(7) * t255 + (pkin(7) * t378 - qJD(1) * t196 - t176) * qJD(2)) * t293 + (t118 + (t250 * t295 + (t229 + 0.2e1 * t360) * pkin(7)) * qJD(2)) * t296, t139 * t228 - t196 * t364 - t140 * t229 + t195 * t255 + (-t176 * t400 + (-t175 * t296 - t195 * t338) * t295) * qJD(2) + (-t118 * t292 - t119 * t295 + (t175 * t292 - t176 * t295) * qJD(3)) * t293, t118 * t196 + t119 * t195 + t139 * t176 + t140 * t175 + (t250 + t283) * t285, t38, t303, t30, t322, -t447, t193, -t121 * t315 + t160 * t207 + t165 * t191 + t343 * t296 + t238 * t83 + t258 * t309 + (qJD(1) * t110 + t63) * t383, t120 * t315 - t344 * t296 + t160 * t208 + t312 * t191 - t238 * t82 + t258 * t36 + (-qJD(1) * t111 - t64) * t383, t110 * t82 - t111 * t83 + t120 * t63 - t121 * t64 - t165 * t36 + t207 * t344 + t208 * t343 + t309 * t312, -t110 * t343 - t111 * t344 + t160 * t238 - t191 * t315 - t309 * t63 + t36 * t64, t38, t30, -t303, t193, t447, t322, t121 * t78 + t129 * t83 + t15 * t296 + t165 * t45 + t207 * t28 + t258 * t35 + (-qJD(1) * t106 - t58) * t383, -t105 * t83 - t106 * t82 - t120 * t58 - t121 * t59 - t14 * t207 + t15 * t208 - t165 * t34 + t312 * t35, t120 * t78 + t129 * t82 - t14 * t296 - t312 * t45 - t208 * t28 - t258 * t34 + (qJD(1) * t105 + t59) * t383, t105 * t14 + t106 * t15 + t129 * t28 + t34 * t59 + t35 * t58 + t45 * t78, -t103 * t41 - t144 * t26, -t103 * t42 + t143 * t26 - t144 * t27 + t41 * t465, -t248 * t41 - t26 * t296 + (-qJD(1) * t144 - t103) * t383, t143 * t27 + t42 * t465, -t248 * t42 - t27 * t296 + (qJD(1) * t143 + t465) * t383 (-t248 - t387) * t383, t107 * t27 + t11 * t143 - t354 * t296 + t248 * t4 + t29 * t465 + t42 * t55 + (-qJD(1) * t39 - t12) * t383, -t1 * t296 + t103 * t29 - t107 * t26 + t11 * t144 - t248 * t3 - t41 * t55 + (qJD(1) * t40 + t13) * t383, -t1 * t143 - t103 * t4 + t12 * t41 - t13 * t42 + t144 * t354 + t26 * t39 - t27 * t40 - t3 * t465, t1 * t40 + t107 * t11 + t12 * t4 + t13 * t3 + t29 * t55 - t354 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, t389 * t299, 0, t365, 0, 0, t299 * pkin(1) * t293, pkin(1) * t396, 0, 0, -t255 * t292 + (t311 - t408) * t295 (-t364 + t408) * t292 + (t307 - t410) * t295, -t271 * t378 + (t293 * t339 + t295 * t397) * qJD(1), t228 * t405 - t295 * t364, t271 * t380 + (-t292 * t397 + t293 * t340) * qJD(1), t271 * t388, -pkin(2) * t364 + t187 * t271 + (pkin(8) * t271 * t295 + t407) * qJD(3) + ((-pkin(8) * t384 - t175) * t293 + (-pkin(7) * t340 - t407) * t296) * qJD(1), pkin(2) * t255 - t188 * t271 + (-pkin(8) * t405 + (t250 - t436) * t295) * qJD(3) + ((-pkin(8) * t382 + t176) * t293 + (pkin(7) * t339 + t295 * t347) * t296) * qJD(1), t187 * t229 - t188 * t228 + ((-t364 + t373) * pkin(8) + t452) * t295 + ((t307 - t374) * pkin(8) + t451) * t292, -t175 * t187 - t176 * t188 + t347 * t284 + (t118 * t295 - t119 * t292 + (-t175 * t295 - t176 * t292) * qJD(3)) * pkin(8), t33, t445, t56, t310, t446, t356, t160 * t230 + t282 * t83 + t426 * t258 - t391 * t315 + t329 * t165 + (-t63 - t386) * t388, t160 * t231 - t282 * t82 + t428 * t258 + t392 * t315 + t329 * t312 + (t64 - t385) * t388, t165 * t96 + t230 * t344 + t231 * t343 + t312 * t426 - t391 * t64 + t392 * t63 + t334, t160 * t282 + t185 * t343 - t186 * t344 - t315 * t329 - t426 * t63 + t428 * t64, t33, t56, -t445, t356, -t446, t310, t159 * t83 + t230 * t28 + t391 * t78 + t427 * t258 - t430 * t165 + (t58 - t386) * t388, -t14 * t230 + t15 * t231 + t165 * t92 + t312 * t427 - t391 * t59 - t392 * t58 + t334, t159 * t82 - t231 * t28 + t392 * t78 - t429 * t258 + t430 * t312 + (-t59 + t385) * t388, t14 * t186 + t15 * t185 + t159 * t28 + t427 * t58 + t429 * t59 - t430 * t78, -t103 * t424 - t26 * t171, t103 * t425 + t170 * t26 - t171 * t27 + t424 * t465, -t424 * t248 + (-qJD(2) * t171 + t103) * t388, t27 * t170 - t425 * t465, t425 * t248 + (qJD(2) * t170 - t465) * t388, t248 * t388, t11 * t170 + t136 * t27 + t437 * t465 - t425 * t55 + t438 * t248 + (-qJD(2) * t88 + t12) * t388, t11 * t171 - t136 * t26 - t424 * t55 - t439 * t248 + t437 * t103 + (qJD(2) * t89 - t13) * t388, -t1 * t170 - t103 * t438 + t12 * t424 + t13 * t425 + t171 * t354 + t26 * t88 - t27 * t89 - t439 * t465, t1 * t89 + t11 * t136 + t12 * t438 + t13 * t439 - t354 * t88 + t437 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t409, -t228 ^ 2 + t229 ^ 2, t307 + t410, t409, -t364 - t408, t276, -t229 * t250 - t451, -t228 * t250 - t452, 0, 0, t473, -t353, t466, -t473, -t474, t276, t457 - t69 * t258 + (-t165 * t229 + t258 * t377 + t276 * t441) * pkin(3) - t343, -t472 - t70 * t258 + (-t229 * t312 + t258 * t351 - t276 * t291) * pkin(3) + t344, t64 * t312 + t70 * t165 - t63 * t165 - t69 * t312 + (t441 * t82 - t291 * t83 + (-t165 * t441 + t291 * t312) * qJD(4)) * pkin(3), t63 * t69 - t64 * t70 + (-t441 * t343 - t344 * t291 + t315 * t229 + (-t291 * t63 + t441 * t64) * qJD(4)) * pkin(3), t473, t466, t353, t276, t474, -t473, -t432 - t165 * t91 + t330 * t258 + (pkin(4) - t281) * t276 - t343, -t275 * t83 - t281 * t82 + (t330 + t59) * t312 + (-t419 + t58) * t165, -t258 * t419 + t275 * t276 + t312 * t91 + t14 - t477, t14 * t275 + t15 * t281 + t330 * t58 + t419 * t59 - t78 * t91, -t435, -t468, t460, t435, -t459, t276, -t199 * t276 + t248 * t422 - t465 * t57 - t467, -t103 * t57 + t200 * t276 - t248 * t423 - t448, t199 * t26 - t200 * t27 + (t12 - t423) * t465 + (-t422 - t13) * t103, t1 * t200 + t12 * t422 + t13 * t423 - t199 * t354 - t55 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t473, -t353, t466, -t473, -t474, t276, t314 + t457, t313 - t472, 0, 0, t473, t466, t353, t276, t474, -t473, -t108 * t165 + t314 + 0.2e1 * t337 - t432, pkin(4) * t82 - qJ(5) * t83 + (t59 - t64) * t312 + (t58 - t393) * t165, t108 * t312 - 0.2e1 * t241 + 0.2e1 * t266 - t313 - t477, -pkin(4) * t15 + qJ(5) * t14 - t108 * t78 + t393 * t59 - t58 * t64, -t435, -t468, t460, t435, -t459, t276, -t239 * t276 - t248 * t421 - t465 * t66 - t467, -t103 * t66 + t240 * t276 + t248 * t420 - t448, t239 * t26 - t240 * t27 + (t12 + t420) * t465 + (t421 - t13) * t103, t1 * t240 - t12 * t421 - t13 * t420 - t239 * t354 - t55 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t276 + t473, t466, -t258 ^ 2 - t444, t258 * t59 + t15 + t432, 0, 0, 0, 0, 0, 0, -t276 * t294 - t290 * t345 - t312 * t465, -t103 * t312 + t276 * t290 - t294 * t345, t290 * t459 + t294 * t460, -t55 * t312 + (-t354 + t433) * t294 + (t1 - t434) * t290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t435, t468, -t460, -t435, t459, -t276, t433 + t467, t434 + t448, 0, 0;];
tauc_reg  = t2;
