% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR8_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t81 = sin(qJ(4));
t82 = sin(qJ(3));
t85 = cos(qJ(4));
t86 = cos(qJ(3));
t56 = t81 * t86 + t82 * t85;
t83 = sin(qJ(2));
t48 = t56 * t83;
t137 = t48 ^ 2;
t54 = t81 * t82 - t85 * t86;
t136 = t54 ^ 2;
t130 = -pkin(4) - pkin(5);
t70 = -t86 * pkin(3) - pkin(2);
t94 = t56 * qJ(5) - t70;
t17 = t130 * t54 + t94;
t135 = 0.2e1 * t17;
t134 = 0.2e1 * t70;
t133 = -0.2e1 * t83;
t87 = cos(qJ(2));
t132 = -0.2e1 * t87;
t131 = 0.2e1 * t87;
t129 = -pkin(9) - pkin(8);
t114 = t86 * t83;
t127 = pkin(7) * t82;
t62 = -pkin(2) * t87 - pkin(8) * t83 - pkin(1);
t52 = t86 * t62;
t31 = -pkin(9) * t114 + t52 + (-pkin(3) - t127) * t87;
t113 = t86 * t87;
t104 = pkin(7) * t113;
t35 = t104 + (-pkin(9) * t83 + t62) * t82;
t110 = -t31 * t85 + t35 * t81;
t75 = t87 * pkin(4);
t12 = t75 + t110;
t117 = t82 * t83;
t50 = t114 * t85 - t117 * t81;
t4 = pkin(5) * t87 - pkin(10) * t50 + t12;
t108 = t87 * qJ(5);
t15 = t31 * t81 + t35 * t85;
t11 = -t108 + t15;
t7 = pkin(10) * t48 + t11;
t80 = sin(qJ(6));
t84 = cos(qJ(6));
t2 = t4 * t80 + t7 * t84;
t128 = pkin(2) * t86;
t77 = t83 ^ 2;
t126 = t77 * pkin(7);
t74 = t83 * pkin(7);
t125 = t85 * pkin(3);
t124 = t87 * pkin(3);
t101 = t129 * t82;
t102 = t129 * t86;
t37 = -t101 * t85 - t102 * t81;
t123 = t37 * t87;
t39 = t101 * t81 - t102 * t85;
t122 = t39 * t87;
t121 = t48 * t54;
t120 = t50 * t48;
t119 = t56 * t54;
t118 = t56 * t87;
t116 = t82 * t86;
t115 = t82 * t87;
t112 = t87 * t48;
t111 = t87 * t54;
t58 = pkin(3) * t117 + t74;
t76 = t82 ^ 2;
t78 = t86 ^ 2;
t109 = t76 + t78;
t72 = t81 * pkin(3);
t66 = t72 + qJ(5);
t107 = qJ(5) + t66;
t106 = t83 * t131;
t105 = t37 ^ 2 + t39 ^ 2;
t103 = t82 * t114;
t68 = pkin(4) + t125;
t1 = t4 * t84 - t7 * t80;
t100 = t37 * t50 - t39 * t48;
t99 = -pkin(5) - t68;
t98 = t50 * qJ(5) - t58;
t42 = -pkin(7) * t115 + t52;
t43 = t62 * t82 + t104;
t97 = -t42 * t82 + t43 * t86;
t96 = -t48 * t56 - t50 * t54;
t95 = 0.2e1 * t37 * t56 - 0.2e1 * t39 * t54;
t93 = -t56 * pkin(10) + t37;
t91 = pkin(7) ^ 2;
t89 = 0.2e1 * pkin(4);
t88 = 0.2e1 * qJ(5);
t79 = t87 ^ 2;
t73 = t77 * t91;
t71 = t84 * t130;
t63 = t84 * t99;
t61 = t84 * qJ(5) + t130 * t80;
t59 = qJ(5) * t80 - t71;
t53 = t56 ^ 2;
t47 = t50 ^ 2;
t46 = t84 * t66 + t80 * t99;
t44 = t66 * t80 - t63;
t40 = t50 * t132;
t32 = t50 * t56;
t30 = t54 * t80 + t56 * t84;
t28 = -t54 * t84 + t56 * t80;
t27 = pkin(4) * t54 - t94;
t23 = t54 * pkin(10) + t39;
t21 = t48 * t80 + t50 * t84;
t19 = -t48 * t84 + t50 * t80;
t16 = pkin(4) * t48 - t98;
t13 = t130 * t48 + t98;
t10 = t84 * t23 + t80 * t93;
t8 = t23 * t80 - t84 * t93;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t77, t106, 0, t79, 0, 0, pkin(1) * t131, pkin(1) * t133, 0.2e1 * (t77 + t79) * pkin(7), pkin(1) ^ 2 + t79 * t91 + t73, t78 * t77, -0.2e1 * t77 * t116, t113 * t133, t76 * t77, t82 * t106, t79, 0.2e1 * t126 * t82 - 0.2e1 * t42 * t87, 0.2e1 * t126 * t86 + 0.2e1 * t43 * t87, 0.2e1 * (-t42 * t86 - t43 * t82) * t83, t42 ^ 2 + t43 ^ 2 + t73, t47, -0.2e1 * t120, t40, t137, 0.2e1 * t112, t79, 0.2e1 * t110 * t87 + 0.2e1 * t48 * t58, 0.2e1 * t15 * t87 + 0.2e1 * t50 * t58, 0.2e1 * t110 * t50 - 0.2e1 * t15 * t48, t110 ^ 2 + t15 ^ 2 + t58 ^ 2, t47, t40, 0.2e1 * t120, t79, -0.2e1 * t112, t137, 0.2e1 * t12 * t87 + 0.2e1 * t16 * t48, -0.2e1 * t11 * t48 + 0.2e1 * t12 * t50, -0.2e1 * t11 * t87 - 0.2e1 * t16 * t50, t11 ^ 2 + t12 ^ 2 + t16 ^ 2, t21 ^ 2, -0.2e1 * t21 * t19, t21 * t131, t19 ^ 2, t19 * t132, t79, 0.2e1 * t1 * t87 + 0.2e1 * t13 * t19, 0.2e1 * t13 * t21 - 0.2e1 * t2 * t87, -0.2e1 * t1 * t21 - 0.2e1 * t19 * t2, t1 ^ 2 + t13 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, t87, 0, -t74, -t87 * pkin(7), 0, 0, t103 (-t76 + t78) * t83, -t115, -t103, -t113, 0, -pkin(7) * t114 + (-pkin(2) * t83 + pkin(8) * t87) * t82, pkin(8) * t113 + (t127 - t128) * t83, t97, -pkin(2) * t74 + pkin(8) * t97, t32, t96, -t118, t121, t111, 0, t48 * t70 + t54 * t58 + t123, t50 * t70 + t56 * t58 + t122, t110 * t56 - t15 * t54 + t100, t110 * t37 + t15 * t39 + t58 * t70, t32, -t118, -t96, 0, -t111, t121, t16 * t54 + t27 * t48 + t123, -t11 * t54 + t12 * t56 + t100, -t16 * t56 - t27 * t50 - t122, t11 * t39 + t12 * t37 + t16 * t27, t21 * t30, -t19 * t30 - t21 * t28, t30 * t87, t19 * t28, -t28 * t87, 0, t13 * t28 + t17 * t19 - t8 * t87, -t10 * t87 + t13 * t30 + t17 * t21, -t1 * t30 - t10 * t19 - t2 * t28 + t21 * t8, -t1 * t8 + t10 * t2 + t13 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t76, 0.2e1 * t116, 0, t78, 0, 0, 0.2e1 * t128, -0.2e1 * pkin(2) * t82, 0.2e1 * t109 * pkin(8), pkin(8) ^ 2 * t109 + pkin(2) ^ 2, t53, -0.2e1 * t119, 0, t136, 0, 0, t54 * t134, t56 * t134, t95, t70 ^ 2 + t105, t53, 0, 0.2e1 * t119, 0, 0, t136, 0.2e1 * t27 * t54, t95, -0.2e1 * t27 * t56, t27 ^ 2 + t105, t30 ^ 2, -0.2e1 * t30 * t28, 0, t28 ^ 2, 0, 0, t28 * t135, t30 * t135, -0.2e1 * t10 * t28 + 0.2e1 * t30 * t8, t10 ^ 2 + t17 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, 0, -t117, -t87, t42, -t43, 0, 0, 0, 0, t50, 0, -t48, -t87, -t124 * t85 - t110, t124 * t81 - t15 (-t48 * t81 - t50 * t85) * pkin(3) (-t110 * t85 + t15 * t81) * pkin(3), 0, t50, 0, -t87, t48, 0, -t68 * t87 - t12, -t48 * t66 - t50 * t68, -t107 * t87 + t15, t11 * t66 - t12 * t68, 0, 0, -t21, 0, t19, -t87, -t44 * t87 - t1, -t46 * t87 + t2, -t19 * t46 + t21 * t44, -t1 * t44 + t2 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, t86, 0, -t82 * pkin(8), -t86 * pkin(8), 0, 0, 0, 0, t56, 0, -t54, 0, -t37, -t39 (-t54 * t81 - t56 * t85) * pkin(3) (-t37 * t85 + t39 * t81) * pkin(3), 0, t56, 0, 0, t54, 0, -t37, -t54 * t66 - t56 * t68, t39, -t37 * t68 + t39 * t66, 0, 0, -t30, 0, t28, 0, t8, t10, -t28 * t46 + t30 * t44, t10 * t46 + t44 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t125, -0.2e1 * t72, 0 (t81 ^ 2 + t85 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t68, 0, 0.2e1 * t66, t66 ^ 2 + t68 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t44, 0.2e1 * t46, 0, t44 ^ 2 + t46 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, -t48, -t87, -t110, -t15, 0, 0, 0, t50, 0, -t87, t48, 0, -0.2e1 * t75 - t110, -pkin(4) * t50 - qJ(5) * t48, -0.2e1 * t108 + t15, -pkin(4) * t12 + qJ(5) * t11, 0, 0, -t21, 0, t19, -t87, -t59 * t87 - t1, -t61 * t87 + t2, -t19 * t61 + t21 * t59, -t1 * t59 + t2 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, -t54, 0, -t37, -t39, 0, 0, 0, t56, 0, 0, t54, 0, -t37, -pkin(4) * t56 - qJ(5) * t54, t39, -pkin(4) * t37 + qJ(5) * t39, 0, 0, -t30, 0, t28, 0, t8, t10, -t28 * t61 + t30 * t59, t10 * t61 + t59 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t125, -t72, 0, 0, 0, 0, 0, 1, 0, 0, t89 + t125, 0, t88 + t72, pkin(4) * t68 + qJ(5) * t66, 0, 0, 0, 0, 0, 1, t107 * t80 - t63 - t71 (-0.2e1 * pkin(4) - 0.2e1 * pkin(5) - t125) * t80 + t107 * t84, 0, t44 * t59 + t46 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t89, 0, t88, pkin(4) ^ 2 + qJ(5) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t59, 0.2e1 * t61, 0, t59 ^ 2 + t61 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, t50, 0, t12, 0, 0, 0, 0, 0, 0, t84 * t87, -t80 * t87, -t19 * t80 - t21 * t84, t1 * t84 + t2 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, -t28 * t80 - t30 * t84, t10 * t80 - t8 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t68, 0, 0, 0, 0, 0, 0, -t84, t80, 0, -t44 * t84 + t46 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(4), 0, 0, 0, 0, 0, 0, -t84, t80, 0, -t59 * t84 + t61 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80 ^ 2 + t84 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, -t19, t87, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t28, 0, -t8, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t44, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t59, -t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, -t80, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
