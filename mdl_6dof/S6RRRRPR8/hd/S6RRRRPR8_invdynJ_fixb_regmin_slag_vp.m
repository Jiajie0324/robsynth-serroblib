% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR8_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR8_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR8_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR8_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR8_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR8_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:44:53
% EndTime: 2019-03-09 22:45:17
% DurationCPUTime: 10.75s
% Computational Cost: add. (9831->657), mult. (21489->838), div. (0->0), fcn. (15503->12), ass. (0->313)
t278 = cos(qJ(2));
t270 = qJ(3) + qJ(4);
t264 = sin(t270);
t279 = cos(qJ(1));
t414 = t279 * t264;
t265 = cos(t270);
t275 = sin(qJ(1));
t418 = t275 * t265;
t172 = t278 * t414 - t418;
t415 = t278 * t279;
t173 = t264 * t275 + t265 * t415;
t271 = sin(qJ(6));
t276 = cos(qJ(6));
t112 = t172 * t276 - t173 * t271;
t326 = t264 * t276 - t265 * t271;
t401 = qJD(1) * t278;
t248 = -qJD(3) + t401;
t233 = -qJD(4) + t248;
t274 = sin(qJ(2));
t219 = -pkin(2) * t278 - pkin(8) * t274 - pkin(1);
t197 = t219 * qJD(1);
t261 = pkin(7) * t401;
t225 = qJD(2) * pkin(8) + t261;
t273 = sin(qJ(3));
t277 = cos(qJ(3));
t148 = t273 * t197 + t277 * t225;
t402 = qJD(1) * t274;
t370 = t273 * t402;
t397 = qJD(2) * t277;
t204 = -t370 + t397;
t107 = pkin(9) * t204 + t148;
t272 = sin(qJ(4));
t423 = t272 * t107;
t455 = cos(qJ(4));
t147 = t277 * t197 - t225 * t273;
t399 = qJD(2) * t273;
t205 = t277 * t402 + t399;
t106 = -pkin(9) * t205 + t147;
t95 = -pkin(3) * t248 + t106;
t50 = t455 * t95 - t423;
t412 = qJD(5) - t50;
t314 = t272 * t204 + t205 * t455;
t479 = pkin(10) * t314;
t413 = -t412 + t479;
t457 = pkin(4) + pkin(5);
t25 = t233 * t457 - t413;
t218 = t233 * qJ(5);
t135 = -t455 * t204 + t205 * t272;
t492 = pkin(10) * t135;
t102 = t455 * t107;
t51 = t272 * t95 + t102;
t32 = t51 + t492;
t28 = -t218 + t32;
t263 = t278 * qJDD(1);
t386 = qJD(1) * qJD(2);
t470 = -t274 * t386 + t263;
t201 = qJDD(3) - t470;
t196 = qJDD(4) + t201;
t357 = qJD(3) + t401;
t382 = t274 * qJDD(1);
t299 = qJD(2) * t357 + t382;
t385 = qJD(1) * qJD(3);
t364 = t274 * t385;
t332 = -qJDD(2) + t364;
t308 = t332 * t273;
t287 = t299 * t277 - t308;
t321 = qJD(2) * qJD(3) + t382;
t365 = t278 * t386;
t487 = t321 + t365;
t356 = t273 * t487 + t277 * t364;
t304 = t277 * qJDD(2) - t356;
t367 = t455 * qJD(4);
t392 = qJD(4) * t272;
t47 = -t204 * t367 + t205 * t392 - t272 * t304 - t455 * t287;
t348 = pkin(2) * t274 - pkin(8) * t278;
t213 = t348 * qJD(2);
t153 = qJD(1) * t213 + qJDD(1) * t219;
t141 = t277 * t153;
t179 = pkin(7) * t470 + qJDD(2) * pkin(8);
t383 = t273 * qJDD(2);
t33 = -t273 * t179 + t141 - (t383 + (t365 + t382) * t277) * pkin(9) + t201 * pkin(3) - t107 * qJD(3);
t393 = qJD(3) * t277;
t394 = qJD(3) * t273;
t306 = t273 * t153 + t277 * t179 + t197 * t393 - t225 * t394;
t39 = pkin(9) * t304 + t306;
t361 = t107 * t367 + t272 * t39 - t455 * t33 + t95 * t392;
t182 = t196 * pkin(4);
t465 = t182 - qJDD(5);
t9 = t361 - t465;
t3 = -pkin(5) * t196 + pkin(10) * t47 + t9;
t390 = qJD(6) * t276;
t391 = qJD(6) * t271;
t48 = qJD(4) * t314 + t272 * t287 - t455 * t304;
t362 = t107 * t392 - t272 * t33 - t95 * t367 - t455 * t39;
t178 = t196 * qJ(5);
t217 = t233 * qJD(5);
t472 = t178 - t217;
t8 = -t362 + t472;
t6 = pkin(10) * t48 + t8;
t369 = -t25 * t391 - t271 * t6 + t276 * t3 - t28 * t390;
t439 = qJD(2) * pkin(2);
t224 = pkin(7) * t402 - t439;
t320 = t204 * pkin(3) - t224;
t301 = qJ(5) * t314 + t320;
t38 = -t135 * t457 + t301;
t445 = g(3) * t274;
t417 = t275 * t278;
t424 = t265 * t279;
t170 = t264 * t417 + t424;
t171 = t265 * t417 - t414;
t468 = t170 * t276 - t171 * t271;
t74 = t135 * t271 + t276 * t314;
t497 = g(1) * t112 + g(2) * t468 + t326 * t445 + t38 * t74 - t369;
t108 = t170 * t271 + t171 * t276;
t325 = t264 * t271 + t265 * t276;
t330 = t172 * t271 + t173 * t276;
t482 = -t276 * t135 + t271 * t314;
t500 = -g(1) * t330 - g(2) * t108 - t325 * t445 - t38 * t482;
t416 = t277 * t278;
t323 = pkin(3) * t274 - pkin(9) * t416;
t456 = pkin(9) + pkin(8);
t376 = qJD(3) * t456;
t210 = t348 * qJD(1);
t405 = pkin(7) * t370 + t277 * t210;
t499 = qJD(1) * t323 + t277 * t376 + t405;
t191 = t273 * t210;
t419 = t274 * t277;
t420 = t273 * t278;
t498 = -t191 - (-pkin(7) * t419 - pkin(9) * t420) * qJD(1) - t273 * t376;
t381 = t25 * t390 + t271 * t3 + t276 * t6;
t496 = t381 + t500;
t484 = -t482 ^ 2 + t74 ^ 2;
t363 = -t271 * t47 - t276 * t48;
t14 = qJD(6) * t74 + t363;
t387 = -qJD(6) - t233;
t495 = t387 * t74 + t14;
t477 = t74 * t482;
t422 = t272 * t273;
t313 = t277 * t455 - t422;
t466 = qJD(3) + qJD(4);
t469 = t455 * qJD(3) + t367;
t409 = -t277 * t469 + t313 * t401 + t422 * t466;
t226 = t456 * t273;
t227 = t456 * t277;
t156 = -t272 * t226 + t455 * t227;
t345 = g(1) * t279 + g(2) * t275;
t316 = t345 * t274;
t444 = g(3) * t278;
t485 = t444 - t316;
t493 = t156 * t196 - t264 * t485;
t359 = -t135 * t390 - t271 * t48 + t276 * t47 + t314 * t391;
t462 = t387 * t482 + t359;
t59 = pkin(4) * t135 - t301;
t490 = t135 * t59;
t489 = -t226 * t367 - t227 * t392 - t272 * t499 + t455 * t498;
t432 = qJ(5) * t135;
t488 = t135 * t320;
t430 = t314 * t135;
t207 = t272 * t277 + t273 * t455;
t152 = t466 * t207;
t408 = -t207 * t401 + t152;
t454 = pkin(3) * t273;
t351 = pkin(3) * t394 - t401 * t454 - t261;
t396 = qJD(2) * t278;
t375 = t273 * t396;
t486 = t274 * t393 + t375;
t458 = t314 ^ 2;
t483 = -t135 ^ 2 + t458;
t26 = -t135 * t233 - t47;
t480 = pkin(4) * t314;
t441 = -qJ(5) * t402 + t489;
t57 = t455 * t106 - t423;
t435 = pkin(3) * t367 + qJD(5) - t57;
t56 = t272 * t106 + t102;
t353 = pkin(3) * t392 - t56;
t476 = qJD(4) * t156 + t272 * t498 + t455 * t499;
t473 = t314 * t457;
t471 = qJ(5) * t409 - t207 * qJD(5) + t351;
t186 = t273 * t417 + t277 * t279;
t188 = -t273 * t415 + t275 * t277;
t467 = -g(1) * t188 + g(2) * t186;
t426 = t264 * t274;
t298 = g(1) * t172 + g(2) * t170 + g(3) * t426 - t361;
t288 = t314 * t59 - t298 - t465;
t463 = t314 * t320 + t298;
t461 = -t233 * t314 - t48;
t453 = pkin(7) * t273;
t266 = t274 * pkin(7);
t443 = -t408 * t457 - t471;
t442 = pkin(4) * t408 + t471;
t440 = pkin(4) * t402 + t476;
t438 = t233 * t51;
t437 = t271 * t28;
t436 = -t435 + t479;
t328 = -t207 * t271 - t276 * t313;
t434 = qJD(6) * t328 + t271 * t408 - t276 * t409;
t143 = t207 * t276 - t271 * t313;
t433 = qJD(6) * t143 - t271 * t409 - t276 * t408;
t431 = qJDD(2) * pkin(2);
t427 = t205 * t248;
t425 = t265 * t274;
t421 = t273 * t274;
t203 = t277 * t219;
t146 = -pkin(9) * t419 + t203 + (-pkin(3) - t453) * t278;
t250 = pkin(7) * t416;
t404 = t273 * t219 + t250;
t154 = -pkin(9) * t421 + t404;
t410 = t272 * t146 + t455 * t154;
t407 = t273 * t213 + t219 * t393;
t398 = qJD(2) * t274;
t406 = t277 * t213 + t398 * t453;
t249 = pkin(3) * t421;
t214 = t266 + t249;
t268 = t274 ^ 2;
t403 = -t278 ^ 2 + t268;
t400 = qJD(2) * t204;
t395 = qJD(3) * t204;
t389 = t205 * qJD(2);
t388 = t224 * qJD(3);
t378 = t274 * t457;
t159 = pkin(3) * t486 + pkin(7) * t396;
t258 = t277 * pkin(3) + pkin(2);
t377 = pkin(7) + t454;
t374 = t248 * t394;
t373 = t274 * t394;
t371 = t248 * t393;
t360 = t387 ^ 2;
t358 = -qJD(3) * t197 - t179;
t257 = -pkin(3) * t455 - pkin(4);
t355 = t455 * t396;
t354 = -t353 + t492;
t352 = -pkin(4) * t426 + qJ(5) * t425;
t155 = t226 * t455 + t272 * t227;
t120 = -t207 * pkin(10) + t155;
t350 = -pkin(10) * t408 - qJD(6) * t120 - t441;
t121 = -pkin(10) * t313 + t156;
t349 = -pkin(10) * t409 - qJD(1) * t378 + qJD(6) * t121 - t476;
t347 = -g(1) * t170 + g(2) * t172;
t346 = g(1) * t171 - g(2) * t173;
t344 = g(1) * t275 - g(2) * t279;
t259 = pkin(7) * t382;
t343 = -pkin(7) * t365 - t259 + t431;
t76 = -qJ(5) * t278 + t410;
t176 = t313 * t274;
t341 = t176 * qJ(5) - t214;
t339 = t146 * t455 - t272 * t154;
t338 = t225 * t393 - t141;
t337 = -pkin(3) * t205 - t432;
t77 = t278 * pkin(4) - t339;
t58 = t278 * pkin(5) - t176 * pkin(10) + t77;
t175 = t207 * t274;
t60 = pkin(10) * t175 + t76;
t336 = -t271 * t60 + t276 * t58;
t335 = t271 * t58 + t276 * t60;
t334 = -pkin(8) * t201 + t388;
t333 = qJ(5) * t271 + t276 * t457;
t329 = t276 * t175 - t176 * t271;
t115 = t175 * t271 + t176 * t276;
t251 = -pkin(5) + t257;
t252 = pkin(3) * t272 + qJ(5);
t327 = t251 * t276 - t252 * t271;
t322 = t207 * qJ(5) + t258;
t319 = t258 * t278 + t274 * t456 + pkin(1);
t318 = pkin(4) * t265 + qJ(5) * t264 + t258;
t317 = t28 * t391 - t381;
t315 = -0.2e1 * pkin(1) * t386 - pkin(7) * qJDD(2);
t312 = t273 * t201 - t371;
t311 = t277 * t201 + t374;
t80 = t323 * qJD(2) + (-t250 + (pkin(9) * t274 - t219) * t273) * qJD(3) + t406;
t84 = -t486 * pkin(9) + (-t274 * t397 - t278 * t394) * pkin(7) + t407;
t310 = t146 * t392 + t154 * t367 + t272 * t84 - t455 * t80;
t309 = t146 * t367 - t154 * t392 + t272 * t80 + t455 * t84;
t307 = qJDD(1) * t277 - t273 * t385;
t283 = qJD(1) ^ 2;
t305 = pkin(1) * t283 + t345;
t303 = -t155 * t196 - t265 * t444 + (g(1) * t424 + g(2) * t418) * t274;
t85 = t152 * t274 + t272 * t375 - t277 * t355;
t302 = -qJ(5) * t85 + qJD(5) * t176 - t159;
t297 = g(1) * t173 + g(2) * t171 + g(3) * t425 + t362;
t295 = -qJD(3) * pkin(8) * t248 - t343 - t431 + t444;
t282 = qJD(2) ^ 2;
t294 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t282 + t344;
t18 = qJ(5) * t398 - qJD(5) * t278 + t309;
t291 = -g(1) * (-t172 * pkin(4) + t173 * qJ(5)) - g(2) * (-t170 * pkin(4) + t171 * qJ(5));
t289 = -t233 * t50 + t297;
t94 = -pkin(3) * t304 - t343;
t286 = -t47 * qJ(5) + qJD(5) * t314 - t94;
t189 = t273 * t275 + t277 * t415;
t187 = t273 * t279 - t275 * t416;
t181 = -qJDD(6) + t196;
t132 = -pkin(4) * t313 - t322;
t103 = t313 * t457 + t322;
t96 = pkin(4) * t175 - t341;
t86 = t273 * t355 - t272 * t373 - t392 * t421 + (t272 * t396 + t274 * t469) * t277;
t79 = t432 + t480;
t78 = -t175 * t457 + t341;
t64 = -t337 + t480;
t53 = -t432 - t473;
t45 = -t218 + t51;
t44 = pkin(4) * t233 + t412;
t43 = t337 - t473;
t24 = pkin(4) * t86 - t302;
t21 = qJD(6) * t115 - t271 * t85 - t276 * t86;
t20 = qJD(6) * t329 + t271 * t86 - t276 * t85;
t19 = -pkin(4) * t398 + t310;
t17 = -t457 * t86 + t302;
t16 = pkin(10) * t86 + t18;
t15 = t85 * pkin(10) - qJD(2) * t378 + t310;
t12 = t25 * t271 + t276 * t28;
t11 = t25 * t276 - t437;
t10 = t48 * pkin(4) - t286;
t7 = -t457 * t48 + t286;
t1 = [qJDD(1), t344, t345, qJDD(1) * t268 + 0.2e1 * t274 * t365, 0.2e1 * t263 * t274 - 0.2e1 * t386 * t403, qJDD(2) * t274 + t278 * t282, qJDD(2) * t278 - t274 * t282, 0, t274 * t315 + t278 * t294, -t274 * t294 + t278 * t315, -t205 * t373 + (-t274 * t308 + t278 * t389 + t419 * t487) * t277 (t277 * t204 - t205 * t273) * t396 + ((-t205 * qJD(3) + t304) * t277 + (-t395 - t287) * t273) * t274 (-t383 + (-t248 - t357) * t397) * t278 + (-t278 * t307 + t311 + t389) * t274 (t248 * t399 - t304) * t278 + (-t312 + t400) * t274, -t201 * t278 - t248 * t398 -(-t219 * t394 + t406) * t248 + t203 * t201 - g(1) * t187 - g(2) * t189 + ((t371 - t400) * pkin(7) + (-pkin(7) * t201 + qJD(2) * t224 - t358) * t273 + t338) * t278 + (-pkin(7) * t304 + t147 * qJD(2) - t273 * t343 + t277 * t388) * t274, t407 * t248 - t404 * t201 - g(1) * t186 - g(2) * t188 + (t224 * t397 + (-t374 + t389) * pkin(7) + t306) * t278 + (-t273 * t388 - t148 * qJD(2) - t343 * t277 + (t383 + t307 * t274 + (-t248 + t357) * t397) * pkin(7)) * t274, -t176 * t47 - t314 * t85, t135 * t85 + t175 * t47 - t176 * t48 - t314 * t86, t176 * t196 + t233 * t85 + t278 * t47 + t314 * t398, -t135 * t398 - t175 * t196 + t233 * t86 + t278 * t48, -t196 * t278 - t233 * t398, t159 * t135 + t94 * t175 + t196 * t339 + t214 * t48 + t233 * t310 + t278 * t361 - t320 * t86 + t398 * t50 + t346, t159 * t314 + t94 * t176 - t196 * t410 - t214 * t47 + t233 * t309 - t278 * t362 + t320 * t85 - t398 * t51 + t347, t10 * t175 + t135 * t24 + t19 * t233 - t196 * t77 + t278 * t9 - t398 * t44 + t48 * t96 + t59 * t86 + t346, -t135 * t18 - t175 * t8 + t176 * t9 + t19 * t314 + t274 * t344 - t44 * t85 - t45 * t86 - t47 * t77 - t48 * t76, -t10 * t176 - t18 * t233 + t196 * t76 - t24 * t314 - t278 * t8 + t398 * t45 + t47 * t96 + t59 * t85 - t347, t8 * t76 + t45 * t18 + t10 * t96 + t59 * t24 + t9 * t77 + t44 * t19 - g(1) * (-pkin(4) * t171 - qJ(5) * t170) - g(2) * (pkin(4) * t173 + qJ(5) * t172) + (-g(1) * t377 - g(2) * t319) * t279 + (g(1) * t319 - g(2) * t377) * t275, -t115 * t359 + t20 * t74, -t115 * t14 - t20 * t482 - t21 * t74 - t329 * t359, -t115 * t181 - t20 * t387 - t278 * t359 - t398 * t74, -t14 * t278 - t181 * t329 + t21 * t387 + t398 * t482, -t181 * t278 + t387 * t398 -(-qJD(6) * t335 + t276 * t15 - t271 * t16) * t387 - t336 * t181 + t369 * t278 - t11 * t398 + t17 * t482 + t78 * t14 - t7 * t329 + t38 * t21 + g(1) * t108 - g(2) * t330 (qJD(6) * t336 + t271 * t15 + t276 * t16) * t387 + t335 * t181 + t317 * t278 + t12 * t398 + t17 * t74 - t78 * t359 + t7 * t115 + t38 * t20 + g(1) * t468 - g(2) * t112; 0, 0, 0, -t274 * t283 * t278, t403 * t283, t382, t263, qJDD(2), t274 * t305 - t259 - t444, t445 + (-pkin(7) * qJDD(1) + t305) * t278, -t332 * t273 ^ 2 + (t273 * t299 - t427) * t277 (-t356 + t427) * t273 + (t395 + 0.2e1 * t383 + t321 * t277 + (-t373 + (-t204 + t397) * t278) * qJD(1)) * t277 (-t205 * t274 + t248 * t416) * qJD(1) + t312 (-t204 * t274 - t248 * t420) * qJD(1) + t311, t248 * t402, -pkin(2) * t356 + t405 * t248 + t334 * t273 + (-t147 * t274 + (pkin(7) * t204 - t224 * t273) * t278) * qJD(1) + (t316 - t295) * t277, -t191 * t248 + (-t278 * pkin(7) * t205 + t148 * t274) * qJD(1) + (-pkin(2) * t321 + (t248 * t266 + (-t224 - t439) * t278) * qJD(1) + t334) * t277 + ((pkin(2) * t385 - t345) * t274 + t295) * t273, -t207 * t47 - t314 * t409, t135 * t409 - t207 * t48 - t313 * t47 - t314 * t408, t207 * t196 + t233 * t409 - t314 * t402, t135 * t402 + t196 * t313 + t233 * t408, t233 * t402, t351 * t135 + t233 * t476 - t258 * t48 - t313 * t94 - t320 * t408 - t50 * t402 + t303, t94 * t207 + t233 * t489 + t258 * t47 + t351 * t314 + t409 * t320 + t51 * t402 - t493, -t10 * t313 + t132 * t48 + t135 * t442 + t233 * t440 + t402 * t44 + t408 * t59 + t303, -t135 * t441 - t155 * t47 - t156 * t48 + t207 * t9 - t278 * t345 + t313 * t8 + t314 * t440 - t408 * t45 - t409 * t44 - t445, -t10 * t207 + t132 * t47 - t441 * t233 - t442 * t314 - t45 * t402 + t409 * t59 + t493, t10 * t132 + t9 * t155 + t8 * t156 + t442 * t59 + t441 * t45 + t440 * t44 + (-g(3) * t318 - t345 * t456) * t278 + (-g(3) * t456 + t318 * t345) * t274, -t143 * t359 + t434 * t74, -t14 * t143 - t328 * t359 - t433 * t74 - t434 * t482, -t143 * t181 - t387 * t434 + t402 * t74, -t181 * t328 + t387 * t433 - t402 * t482, -t387 * t402 -(t120 * t276 - t121 * t271) * t181 + t103 * t14 - t7 * t328 + t443 * t482 + t433 * t38 - (t271 * t350 - t276 * t349) * t387 + t11 * t402 - t485 * t325 (t120 * t271 + t121 * t276) * t181 - t103 * t359 + t7 * t143 + t443 * t74 + t434 * t38 - (t271 * t349 + t276 * t350) * t387 - t12 * t402 - t485 * t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t205 * t204, -t204 ^ 2 + t205 ^ 2, t204 * t248 + t287, t304 - t427, t201, -t148 * t248 - t205 * t224 + (t358 + t445) * t273 - t338 + t467, g(1) * t189 - g(2) * t187 + g(3) * t419 - t147 * t248 - t204 * t224 - t306, t430, t483, t26, t461, t196, -t56 * t233 + (-t135 * t205 + t196 * t455 + t233 * t392) * pkin(3) + t463, -t488 - t57 * t233 + (-t196 * t272 - t205 * t314 + t233 * t367) * pkin(3) + t297, -t135 * t64 - t196 * t257 + t233 * t353 - t288, -t252 * t48 - t257 * t47 + (t353 + t45) * t314 + (-t435 + t44) * t135, t196 * t252 - t233 * t435 + t314 * t64 - t297 + t472 - t490, t8 * t252 + t9 * t257 - t59 * t64 - t44 * t56 - g(3) * (-t249 + t352) + t435 * t45 + (t392 * t44 + t467) * pkin(3) + t291, -t477, -t484, t462, t495, t181, -t327 * t181 - t43 * t482 - ((-qJD(6) * t252 - t354) * t276 + (-qJD(6) * t251 + t436) * t271) * t387 + t497 (t251 * t271 + t252 * t276) * t181 - t43 * t74 - (t271 * t354 + t276 * t436) * t387 + (t327 * t387 - t437) * qJD(6) + t496; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t430, t483, t26, t461, t196, -t438 + t463, t289 - t488, -t135 * t79 + t182 - t288 - t438, pkin(4) * t47 - qJ(5) * t48 + (t45 - t51) * t314 + (t44 - t412) * t135, t314 * t79 + 0.2e1 * t178 - 0.2e1 * t217 - t289 - t490, -t9 * pkin(4) - g(3) * t352 + t8 * qJ(5) + t412 * t45 - t44 * t51 - t59 * t79 + t291, -t477, -t484, t462, t495, t181, t333 * t181 - t53 * t482 - ((-qJ(5) * qJD(6) - t32) * t276 + (qJD(6) * t457 + t413) * t271) * t387 + t497 (qJ(5) * t276 - t271 * t457) * t181 - t53 * t74 - (t271 * t32 + t276 * t413) * t387 + (-t333 * t387 - t437) * qJD(6) + t496; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t196 + t430, t26, -t233 ^ 2 - t458, t233 * t45 + t288, 0, 0, 0, 0, 0, -t276 * t181 - t271 * t360 - t314 * t482, t271 * t181 - t276 * t360 - t314 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t477, t484, -t462, -t363 + (-qJD(6) - t387) * t74, -t181, -t12 * t387 - t497, -t11 * t387 + t317 - t500;];
tau_reg  = t1;
