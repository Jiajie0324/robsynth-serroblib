% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR8_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRPR8_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR8_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:45:07
% EndTime: 2019-03-09 22:45:27
% DurationCPUTime: 13.24s
% Computational Cost: add. (7969->620), mult. (19170->793), div. (0->0), fcn. (13448->8), ass. (0->254)
t641 = sin(qJ(3));
t642 = sin(qJ(2));
t741 = qJD(1) * t642;
t710 = t641 * t741;
t644 = cos(qJ(3));
t735 = qJD(2) * t644;
t581 = -t710 + t735;
t737 = qJD(2) * t641;
t582 = t644 * t741 + t737;
t640 = sin(qJ(4));
t783 = cos(qJ(4));
t530 = -t783 * t581 + t582 * t640;
t639 = sin(qJ(6));
t643 = cos(qJ(6));
t666 = t640 * t581 + t582 * t783;
t478 = t530 * t639 + t643 * t666;
t732 = qJD(3) * t642;
t713 = t641 * t732;
t645 = cos(qJ(2));
t734 = qJD(2) * t645;
t657 = t644 * t734 - t713;
t721 = qJD(2) * qJD(3);
t651 = qJD(1) * t657 + t644 * t721;
t708 = t783 * qJD(4);
t705 = qJD(1) * t732;
t722 = qJD(1) * qJD(2);
t706 = t645 * t722;
t716 = t644 * t705 + (t706 + t721) * t641;
t730 = qJD(4) * t640;
t461 = -t581 * t708 + t582 * t730 + t640 * t716 - t783 * t651;
t462 = qJD(4) * t666 + t640 * t651 + t783 * t716;
t728 = qJD(6) * t643;
t729 = qJD(6) * t639;
t690 = t643 * t461 - t639 * t462 - t530 * t728 + t666 * t729;
t703 = MDP(33) * t741;
t740 = qJD(1) * t645;
t621 = -qJD(3) + t740;
t606 = -qJD(4) + t621;
t723 = -qJD(6) - t606;
t807 = -t643 * t530 + t639 * t666;
t826 = -qJD(2) * t703 + (t478 ^ 2 - t807 ^ 2) * MDP(30) - (t723 * t807 + t690) * MDP(31) + t807 * MDP(29) * t478;
t700 = -t461 * t639 - t643 * t462;
t419 = qJD(6) * t478 + t700;
t436 = -t530 * t606 - t461;
t704 = MDP(22) * t741;
t786 = t666 ^ 2;
t818 = t530 * t666;
t825 = qJD(2) * t704 + (-t606 * t666 - t462) * MDP(21) + MDP(18) * t818 + (-t530 ^ 2 + t786) * MDP(19) + t436 * MDP(20) + (t478 * t723 + t419) * MDP(32) - t826;
t767 = t644 * t645;
t669 = pkin(3) * t642 - pkin(9) * t767;
t784 = -pkin(9) - pkin(8);
t715 = qJD(3) * t784;
t684 = pkin(2) * t642 - pkin(8) * t645;
t587 = t684 * qJD(1);
t747 = pkin(7) * t710 + t644 * t587;
t824 = qJD(1) * t669 - t644 * t715 + t747;
t569 = t641 * t587;
t769 = t642 * t644;
t823 = -t569 - (-pkin(9) * t641 * t645 - pkin(7) * t769) * qJD(1) + t641 * t715;
t592 = t606 * qJD(5);
t707 = t642 * t722;
t616 = qJ(5) * t707;
t633 = pkin(7) * t740;
t601 = qJD(2) * pkin(8) + t633;
t594 = -pkin(2) * t645 - pkin(8) * t642 - pkin(1);
t574 = t594 * qJD(1);
t771 = t641 * t574;
t541 = t644 * t601 + t771;
t510 = pkin(9) * t581 + t541;
t658 = t669 * qJD(2);
t590 = t684 * qJD(2);
t575 = qJD(1) * t590;
t694 = pkin(7) * t707;
t750 = t644 * t575 + t641 * t694;
t453 = qJD(1) * t658 - qJD(3) * t510 + t750;
t733 = qJD(3) * t641;
t731 = qJD(3) * t644;
t751 = t574 * t731 + t641 * t575;
t652 = -t601 * t733 - t644 * t694 + t751;
t466 = -pkin(9) * t716 + t652;
t540 = t644 * t574 - t601 * t641;
t509 = -pkin(9) * t582 + t540;
t498 = -pkin(3) * t621 + t509;
t692 = t640 * t453 + t783 * t466 + t498 * t708 - t510 * t730;
t414 = t616 - t592 + t692;
t407 = pkin(10) * t462 + t414;
t785 = pkin(4) + pkin(5);
t718 = t785 * t642;
t689 = qJD(2) * t718;
t691 = -t783 * t453 + t640 * t466 + t498 * t730 + t510 * t708;
t410 = pkin(10) * t461 - qJD(1) * t689 + t691;
t773 = t640 * t510;
t443 = t783 * t498 - t773;
t724 = qJD(5) - t443;
t801 = pkin(10) * t666;
t725 = -t724 + t801;
t429 = t606 * t785 - t725;
t717 = t643 * t407 + t639 * t410 + t429 * t728;
t779 = qJD(2) * pkin(2);
t600 = pkin(7) * t741 - t779;
t667 = pkin(3) * t581 - t600;
t656 = qJ(5) * t666 + t667;
t437 = -t530 * t785 + t656;
t798 = t437 * t807;
t822 = t717 - t798;
t505 = t783 * t510;
t444 = t640 * t498 + t505;
t815 = pkin(10) * t530;
t433 = t444 + t815;
t593 = t606 * qJ(5);
t431 = t433 - t593;
t693 = t639 * t407 - t643 * t410 + t429 * t729 + t431 * t728;
t808 = t437 * t478 + t693;
t772 = t640 * t641;
t665 = t644 * t783 - t772;
t789 = qJD(3) + qJD(4);
t790 = t783 * qJD(3) + t708;
t753 = -t644 * t790 + t665 * t740 + t772 * t789;
t778 = qJ(5) * t530;
t458 = pkin(4) * t530 - t656;
t814 = t458 * t530;
t813 = t530 * t667;
t602 = t784 * t641;
t603 = t784 * t644;
t812 = t602 * t708 + t603 * t730 - t640 * t824 + t823 * t783;
t584 = t640 * t644 + t641 * t783;
t545 = t789 * t584;
t752 = -t584 * t740 + t545;
t687 = -t633 + (-t641 * t740 + t733) * pkin(3);
t714 = t641 * t734;
t811 = t642 * t731 + t714;
t803 = -0.2e1 * t722;
t802 = pkin(4) * t666;
t800 = MDP(4) * t642;
t637 = t642 ^ 2;
t799 = MDP(5) * (-t645 ^ 2 + t637);
t777 = t458 * t666;
t797 = t667 * t666;
t794 = t666 * t785;
t449 = t640 * t509 + t505;
t685 = pkin(3) * t730 - t449;
t450 = t783 * t509 - t773;
t759 = -pkin(3) * t708 - qJD(5) + t450;
t757 = qJ(5) * t741 - t812;
t551 = t640 * t602 - t783 * t603;
t792 = qJD(4) * t551 + t823 * t640 + t783 * t824;
t791 = qJ(5) * t753 - qJD(5) * t584 + t687;
t727 = t637 * qJD(1);
t782 = pkin(7) * t641;
t781 = pkin(8) * t621;
t776 = t582 * t621;
t775 = t600 * t641;
t774 = t639 * t431;
t770 = t641 * t642;
t647 = qJD(2) ^ 2;
t768 = t642 * t647;
t766 = t645 * t621;
t765 = t645 * t647;
t648 = qJD(1) ^ 2;
t764 = t645 * t648;
t763 = t759 + t801;
t762 = -t752 * t785 - t791;
t671 = -t584 * t639 - t643 * t665;
t761 = qJD(6) * t671 + t639 * t752 - t643 * t753;
t536 = t584 * t643 - t639 * t665;
t760 = qJD(6) * t536 - t639 * t753 - t643 * t752;
t758 = pkin(4) * t752 + t791;
t756 = pkin(4) * t741 + t792;
t580 = t644 * t594;
t539 = -pkin(9) * t769 + t580 + (-pkin(3) - t782) * t645;
t623 = pkin(7) * t767;
t745 = t641 * t594 + t623;
t546 = -pkin(9) * t770 + t745;
t754 = t640 * t539 + t783 * t546;
t749 = t641 * t590 + t594 * t731;
t736 = qJD(2) * t642;
t748 = t644 * t590 + t736 * t782;
t591 = pkin(3) * t770 + t642 * pkin(7);
t550 = -t602 * t783 - t640 * t603;
t739 = qJD(2) * t550;
t738 = qJD(2) * t551;
t726 = t642 * MDP(15);
t554 = pkin(3) * t811 + pkin(7) * t734;
t631 = -pkin(3) * t644 - pkin(2);
t711 = t621 * t731;
t702 = qJD(2) * t726;
t701 = pkin(1) * t803;
t699 = t621 + t740;
t698 = -t581 + t735;
t697 = -t582 + t737;
t696 = qJD(3) + t740;
t695 = pkin(4) * t707;
t630 = -pkin(3) * t783 - pkin(4);
t688 = t783 * t734;
t686 = -t685 + t815;
t480 = -qJ(5) * t645 + t754;
t563 = t665 * t642;
t682 = qJ(5) * t563 - t591;
t680 = t539 * t783 - t640 * t546;
t515 = -pkin(10) * t665 + t551;
t679 = -pkin(10) * t753 - qJD(1) * t718 + qJD(6) * t515 - t792;
t514 = -t584 * pkin(10) + t550;
t678 = -pkin(10) * t752 - qJD(6) * t514 + t757;
t677 = -pkin(3) * t582 - t778;
t676 = qJ(5) * t639 + t643 * t785;
t481 = t645 * pkin(4) - t680;
t454 = t645 * pkin(5) - t563 * pkin(10) + t481;
t562 = t584 * t642;
t463 = pkin(10) * t562 + t480;
t675 = t454 * t643 - t463 * t639;
t674 = t454 * t639 + t463 * t643;
t672 = t643 * t562 - t563 * t639;
t512 = t562 * t639 + t563 * t643;
t624 = -pkin(5) + t630;
t625 = pkin(3) * t640 + qJ(5);
t670 = t624 * t643 - t625 * t639;
t668 = qJ(5) * t584 - t631;
t527 = pkin(3) * t716 + pkin(7) * t706;
t664 = t696 * t737;
t663 = -t443 * t606 - t692;
t662 = -t444 * t606 - t691;
t484 = t658 + (-t623 + (pkin(9) * t642 - t594) * t641) * qJD(3) + t748;
t488 = -t811 * pkin(9) + (-t642 * t735 - t645 * t733) * pkin(7) + t749;
t661 = -t484 * t783 + t640 * t488 + t539 * t730 + t546 * t708;
t660 = t640 * t484 + t783 * t488 + t539 * t708 - t546 * t730;
t659 = -t431 * t729 + t717;
t489 = t545 * t642 + t640 * t714 - t644 * t688;
t655 = -qJ(5) * t489 + qJD(5) * t563 - t554;
t415 = t691 - t695;
t422 = qJ(5) * t736 - qJD(5) * t645 + t660;
t653 = -t461 * qJ(5) + qJD(5) * t666 - t527;
t526 = -pkin(4) * t665 - t668;
t506 = t665 * t785 + t668;
t499 = pkin(4) * t562 - t682;
t490 = t641 * t688 - t640 * t713 - t730 * t770 + (t640 * t734 + t642 * t790) * t644;
t483 = t778 + t802;
t482 = -t562 * t785 + t682;
t468 = -t677 + t802;
t446 = -t778 - t794;
t440 = -t593 + t444;
t439 = pkin(4) * t606 + t724;
t438 = t677 - t794;
t428 = pkin(4) * t490 - t655;
t425 = qJD(6) * t512 - t489 * t639 - t643 * t490;
t424 = qJD(6) * t672 - t489 * t643 + t490 * t639;
t423 = -pkin(4) * t736 + t661;
t421 = -t490 * t785 + t655;
t420 = t462 * pkin(4) - t653;
t417 = pkin(10) * t490 + t422;
t416 = t489 * pkin(10) + t661 - t689;
t413 = t429 * t639 + t431 * t643;
t412 = t429 * t643 - t774;
t411 = -t462 * t785 + t653;
t1 = [(-(-qJD(6) * t674 + t416 * t643 - t417 * t639) * t723 - t693 * t645 + t421 * t807 + t482 * t419 - t411 * t672 + t437 * t425) * MDP(34) + ((-t606 - t740) * MDP(22) + (t723 - t740) * MDP(33) + (-qJD(1) * t754 - t444) * MDP(24) + (qJD(1) * t563 + t666) * MDP(20) + (-qJD(1) * t562 - t530) * MDP(21) + (-qJD(1) * t512 - t478) * MDP(31) + (-qJD(1) * t672 + t807) * MDP(32) + (qJD(1) * t680 + t443) * MDP(23) + (qJD(1) * t480 + t440) * MDP(27) + (-qJD(1) * t481 - t439) * MDP(25) + (qJD(1) * t674 + t413) * MDP(35) + (-qJD(1) * t675 - t412) * MDP(34)) * t736 + (-t419 * t512 - t424 * t807 - t425 * t478 - t672 * t690) * MDP(30) + (t749 * t621 + t751 * t645 + (-t600 * t642 - t601 * t645 + (-t766 - t727) * pkin(7)) * t733 + ((pkin(7) * t582 + t600 * t644) * t645 + (-t745 * qJD(1) - t541 + (-t621 + t696) * pkin(7) * t644) * t642) * qJD(2)) * MDP(17) + 0.2e1 * t706 * t800 + (-t419 * t645 + t425 * t723) * MDP(32) + ((qJD(6) * t675 + t416 * t639 + t417 * t643) * t723 - t659 * t645 + t421 * t478 - t482 * t690 + t411 * t512 + t437 * t424) * MDP(35) + (-t424 * t723 - t645 * t690) * MDP(31) + (t424 * t478 - t512 * t690) * MDP(29) + (t591 * t462 - t490 * t667 + t527 * t562 + t554 * t530 + t661 * t606 + t691 * t645) * MDP(23) + (-t591 * t461 + t489 * t667 + t527 * t563 + t554 * t666 + t660 * t606 + t692 * t645) * MDP(24) + (t462 * t645 + t490 * t606) * MDP(21) + (t461 * t645 + t489 * t606) * MDP(20) + (t415 * t645 + t420 * t562 + t423 * t606 + t428 * t530 + t458 * t490 + t462 * t499) * MDP(25) + (-t461 * t563 - t489 * t666) * MDP(18) + (-t414 * t562 + t415 * t563 - t422 * t530 + t423 * t666 - t439 * t489 - t440 * t490 - t461 * t481 - t462 * t480) * MDP(26) + (t461 * t562 - t462 * t563 + t489 * t530 - t490 * t666) * MDP(19) + (-t414 * t645 - t420 * t563 - t422 * t606 - t428 * t666 + t458 * t489 + t461 * t499) * MDP(27) + (t414 * t480 + t415 * t481 + t420 * t499 + t422 * t440 + t423 * t439 + t428 * t458) * MDP(28) + t799 * t803 + (-(-t594 * t733 + t748) * t621 + (pkin(7) * t716 + t600 * t731 + (qJD(1) * t580 + t540) * qJD(2)) * t642 + ((-pkin(7) * t581 + t775) * qJD(2) + (t771 + (pkin(7) * t621 + t601) * t644) * qJD(3) - t750) * t645) * MDP(16) - MDP(7) * t768 + (pkin(7) * t768 + t645 * t701) * MDP(10) + (t582 * t657 + t651 * t769) * MDP(11) + (-pkin(7) * t765 + t642 * t701) * MDP(9) + (t642 * t711 + t716 * t645 + (t581 * t642 + (-t727 + t766) * t641) * qJD(2)) * MDP(14) + ((t581 * t644 - t582 * t641) * t734 + ((-t581 + t710) * t733 + (-t582 * qJD(3) - t664 - t716) * t644) * t642) * MDP(12) + (t699 * t713 + (t582 * t642 + (t727 + (-t621 - t696) * t645) * t644) * qJD(2)) * MDP(13) + MDP(6) * t765 - t699 * t702; (t760 * t723 + (-qJD(2) * t671 - t807) * t741) * MDP(32) + (-t411 * t671 + t506 * t419 - (t639 * t678 - t643 * t679) * t723 + t762 * t807 + t760 * t437 + (-(t514 * t643 - t515 * t639) * qJD(2) + t412) * t741) * MDP(34) + (-t419 * t536 - t478 * t760 - t671 * t690 - t761 * t807) * MDP(30) - t764 * t800 + (-t631 * t461 + t527 * t584 + t812 * t606 + t753 * t667 + t687 * t666 + (t444 - t738) * t741) * MDP(24) + t606 * t704 + (t752 * t606 + (qJD(2) * t665 + t530) * t741) * MDP(21) - t723 * t703 + (-t761 * t723 + (-qJD(2) * t536 + t478) * t741) * MDP(31) + (t411 * t536 - t506 * t690 - (t639 * t679 + t643 * t678) * t723 + t762 * t478 + t761 * t437 + ((t514 * t639 + t515 * t643) * qJD(2) - t413) * t741) * MDP(35) + (t478 * t761 - t536 * t690) * MDP(29) + (t631 * t462 - t527 * t665 + t792 * t606 - t752 * t667 + t687 * t530 + (-t443 - t739) * t741) * MDP(23) + (-t461 * t665 - t462 * t584 + t530 * t753 - t666 * t752) * MDP(19) + (t414 * t665 + t415 * t584 - t439 * t753 - t440 * t752 - t461 * t550 - t462 * t551 + t530 * t757 + t666 * t756) * MDP(26) + (-t420 * t665 + t462 * t526 + t756 * t606 + t758 * t530 + t752 * t458 + (t439 - t739) * t741) * MDP(25) + (MDP(9) * t642 * t648 + MDP(10) * t764) * pkin(1) + (-t420 * t584 + t461 * t526 + t757 * t606 - t758 * t666 + t753 * t458 + (-t440 + t738) * t741) * MDP(27) + (t753 * t606 + (qJD(2) * t584 - t666) * t741) * MDP(20) + (-t461 * t584 - t666 * t753) * MDP(18) + t648 * t799 + (-t569 * t621 + (-t641 * t781 + (t600 - t779) * t644) * qJD(3) + ((-t600 - t779) * t767 + (pkin(2) * t733 - pkin(8) * t735 + t541) * t642 + (t621 * t769 + t645 * t697) * pkin(7)) * qJD(1)) * MDP(17) + (-pkin(2) * t716 + t747 * t621 + (t644 * t781 + t775) * qJD(3) + ((-pkin(8) * t737 - t540) * t642 + (-pkin(7) * t698 - t775) * t645) * qJD(1)) * MDP(16) + (-t641 ^ 2 * t705 + (t664 - t776) * t644) * MDP(11) + ((-t716 + t776) * t641 + ((t581 + t735) * qJD(3) + (t645 * t698 - t713) * qJD(1)) * t644) * MDP(12) + (t621 * t733 + (-t641 * t766 + t642 * t698) * qJD(1)) * MDP(14) + (-t711 + (t642 * t697 + t644 * t766) * qJD(1)) * MDP(13) + (t414 * t551 + t415 * t550 + t420 * t526 + t439 * t756 - t440 * t757 + t458 * t758) * MDP(28) + t621 * qJD(1) * t726; (-t777 - t468 * t530 + t685 * t606 + (pkin(4) - t630) * t707 - t691) * MDP(25) + (-t449 * t606 + t797 + (-t530 * t582 + t606 * t730 + t707 * t783) * pkin(3) - t691) * MDP(23) + qJD(1) * t702 + ((t624 * t639 + t625 * t643) * t707 - t438 * t478 - (t639 * t686 + t643 * t763) * t723 + (t670 * t723 - t774) * qJD(6) + t822) * MDP(35) + (-t670 * t707 - t438 * t807 - ((-qJD(6) * t625 - t686) * t643 + (-qJD(6) * t624 + t763) * t639) * t723 + t808) * MDP(34) + (t581 * t621 + t651) * MDP(13) + (-t540 * t621 - t581 * t600 - t652) * MDP(17) + (-t461 * t630 - t462 * t625 + (t440 + t685) * t666 + (t439 + t759) * t530) * MDP(26) + (t468 * t666 + t606 * t759 + t625 * t707 + t414 - t814) * MDP(27) + (-t450 * t606 - t813 + (-t582 * t666 + t606 * t708 - t640 * t707) * pkin(3) - t692) * MDP(24) + (-t582 * t600 + t750 + (-qJD(3) - t621) * t541) * MDP(16) + (-t581 ^ 2 + t582 ^ 2) * MDP(12) + (-t716 - t776) * MDP(14) + (t414 * t625 + t415 * t630 + t439 * t685 - t440 * t759 - t458 * t468) * MDP(28) - t582 * t581 * MDP(11) + t825; (t662 + t797) * MDP(23) + (t663 - t813) * MDP(24) + (-t483 * t530 + t662 + 0.2e1 * t695 - t777) * MDP(25) + (pkin(4) * t461 - qJ(5) * t462 + (t440 - t444) * t666 + (t439 - t724) * t530) * MDP(26) + (t483 * t666 - 0.2e1 * t592 + 0.2e1 * t616 - t663 - t814) * MDP(27) + (-pkin(4) * t415 + qJ(5) * t414 - t439 * t444 + t440 * t724 - t458 * t483) * MDP(28) + (t676 * t707 - t446 * t807 - ((-qJ(5) * qJD(6) - t433) * t643 + (qJD(6) * t785 + t725) * t639) * t723 + t808) * MDP(34) + ((qJ(5) * t643 - t639 * t785) * t707 - t446 * t478 - (t639 * t433 + t643 * t725) * t723 + (-t676 * t723 - t774) * qJD(6) + t822) * MDP(35) + t825; (-t707 + t818) * MDP(25) + t436 * MDP(26) + (-t606 ^ 2 - t786) * MDP(27) + (t440 * t606 + t415 + t777) * MDP(28) + (-t643 * t707 - t666 * t807) * MDP(34) + (-t478 * t666 + t639 * t707) * MDP(35) - (MDP(34) * t639 + MDP(35) * t643) * t723 ^ 2; (-t700 + (-qJD(6) - t723) * t478) * MDP(32) + (-t413 * t723 - t808) * MDP(34) + (-t412 * t723 - t659 + t798) * MDP(35) + t826;];
tauc  = t1;
