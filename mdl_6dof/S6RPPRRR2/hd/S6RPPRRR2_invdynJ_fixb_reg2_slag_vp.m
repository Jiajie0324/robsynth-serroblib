% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPPRRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPPRRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:21:29
% EndTime: 2019-03-09 02:21:41
% DurationCPUTime: 6.28s
% Computational Cost: add. (11660->536), mult. (25448->671), div. (0->0), fcn. (18994->18), ass. (0->274)
t227 = cos(pkin(11));
t374 = cos(qJ(4));
t293 = t374 * t227;
t194 = qJD(1) * t293;
t225 = sin(pkin(11));
t232 = sin(qJ(4));
t313 = t232 * t225;
t289 = qJD(1) * t313;
t165 = -t194 + t289;
t161 = qJD(5) + t165;
t222 = pkin(11) + qJ(4);
t211 = sin(t222);
t213 = cos(t222);
t223 = qJ(1) + pkin(10);
t212 = sin(t223);
t214 = cos(t223);
t273 = g(1) * t214 + g(2) * t212;
t247 = -g(3) * t213 + t211 * t273;
t226 = sin(pkin(10));
t198 = t226 * pkin(1) + qJ(3);
t173 = qJD(1) * qJD(3) + qJDD(1) * t198;
t208 = t227 * qJDD(2);
t128 = t208 + (-pkin(7) * qJDD(1) - t173) * t225;
t147 = t225 * qJDD(2) + t227 * t173;
t302 = t227 * qJDD(1);
t129 = pkin(7) * t302 + t147;
t187 = t198 * qJD(1);
t210 = t227 * qJD(2);
t353 = pkin(7) * qJD(1);
t141 = t210 + (-t187 - t353) * t225;
t157 = t225 * qJD(2) + t227 * t187;
t142 = t227 * t353 + t157;
t288 = qJD(4) * t374;
t310 = qJD(4) * t232;
t278 = -t374 * t128 + t232 * t129 + t141 * t310 + t142 * t288;
t340 = qJDD(4) * pkin(4);
t37 = t278 - t340;
t244 = -t37 + t247;
t398 = qJD(5) * pkin(8) * t161 - t244;
t228 = cos(pkin(10));
t364 = t228 * pkin(1);
t202 = -pkin(2) - t364;
t304 = qJDD(1) * t202;
t182 = qJDD(3) + t304;
t370 = g(1) * t212;
t284 = g(2) * t214 - t370;
t397 = -t182 - t284;
t176 = t225 * t374 + t232 * t227;
t167 = t176 * qJD(1);
t231 = sin(qJ(5));
t234 = cos(qJ(5));
t143 = -t234 * qJD(4) + t231 * t167;
t145 = t231 * qJD(4) + t234 * t167;
t230 = sin(qJ(6));
t373 = cos(qJ(6));
t254 = -t230 * t143 + t145 * t373;
t76 = t373 * t143 + t230 * t145;
t362 = t76 * t254;
t291 = t373 * t234;
t317 = t230 * t231;
t253 = t291 - t317;
t383 = qJD(5) + qJD(6);
t286 = t373 * qJD(6);
t385 = t373 * qJD(5) + t286;
t344 = -t253 * t165 - t234 * t385 + t317 * t383;
t292 = t373 * t231;
t178 = t230 * t234 + t292;
t124 = t383 * t178;
t343 = t178 * t165 + t124;
t375 = pkin(9) + pkin(8);
t294 = qJD(5) * t375;
t331 = t165 * t231;
t112 = pkin(4) * t167 + pkin(8) * t165;
t132 = t232 * t142;
t73 = t141 * t374 - t132;
t48 = t231 * t112 + t234 * t73;
t396 = pkin(9) * t331 + t231 * t294 + t48;
t47 = t234 * t112 - t231 * t73;
t395 = -t167 * pkin(5) - t47 + (-pkin(9) * t165 - t294) * t234;
t282 = qJDD(1) * t374;
t295 = qJD(4) * t194 + t225 * t282 + t232 * t302;
t114 = qJD(4) * t289 - t295;
t394 = -qJD(4) * qJD(5) + t114;
t309 = qJD(5) * t231;
t393 = t309 + t331;
t392 = t254 ^ 2 - t76 ^ 2;
t158 = qJD(6) + t161;
t308 = qJD(5) * t234;
t297 = t167 * t308 - t394 * t231;
t256 = t234 * qJDD(4) - t297;
t307 = qJD(6) * t230;
t66 = -t231 * qJDD(4) + t167 * t309 + t394 * t234;
t23 = t143 * t286 + t145 * t307 - t230 * t256 + t373 * t66;
t391 = t158 * t76 - t23;
t74 = t232 * t141 + t142 * t374;
t69 = qJD(4) * pkin(8) + t74;
t201 = t227 * pkin(3) + pkin(2);
t186 = -t201 - t364;
t163 = qJD(1) * t186 + qJD(3);
t85 = t165 * pkin(4) - t167 * pkin(8) + t163;
t43 = -t231 * t69 + t234 * t85;
t31 = -pkin(9) * t145 + t43;
t29 = pkin(5) * t161 + t31;
t44 = t231 * t85 + t234 * t69;
t32 = -pkin(9) * t143 + t44;
t170 = t176 * qJD(4);
t303 = t225 * qJDD(1);
t267 = -t227 * t282 + t232 * t303;
t115 = qJD(1) * t170 + t267;
t111 = qJDD(5) + t115;
t296 = -t232 * t128 - t374 * t129 - t141 * t288;
t40 = -t142 * t310 - t296;
t36 = qJDD(4) * pkin(8) + t40;
t160 = qJDD(1) * t186 + qJDD(3);
t52 = t115 * pkin(4) + t114 * pkin(8) + t160;
t51 = t234 * t52;
t9 = -qJD(5) * t44 - t231 * t36 + t51;
t6 = t111 * pkin(5) + t66 * pkin(9) + t9;
t8 = t231 * t52 + t234 * t36 + t85 * t308 - t309 * t69;
t7 = pkin(9) * t256 + t8;
t1 = t230 * t6 + t286 * t29 - t32 * t307 + t373 * t7;
t224 = qJ(5) + qJ(6);
t217 = sin(t224);
t321 = t214 * t217;
t218 = cos(t224);
t324 = t212 * t218;
t136 = -t213 * t324 + t321;
t320 = t214 * t218;
t325 = t212 * t217;
t138 = t213 * t320 + t325;
t366 = g(3) * t211;
t68 = -qJD(4) * pkin(4) - t73;
t54 = t143 * pkin(5) + t68;
t390 = g(1) * t138 - g(2) * t136 + t218 * t366 + t54 * t76 - t1;
t269 = -t161 * t43 + t8;
t347 = t44 * t161;
t388 = t9 + t347;
t341 = pkin(1) * qJDD(1);
t280 = t161 * t231;
t387 = t145 * t280;
t361 = pkin(7) + t198;
t171 = t361 * t225;
t172 = t361 * t227;
t386 = -t374 * t171 - t232 * t172;
t318 = t214 * t234;
t323 = t212 * t231;
t148 = t213 * t323 + t318;
t319 = t214 * t231;
t322 = t212 * t234;
t150 = -t213 * t319 + t322;
t384 = -g(1) * t150 + g(2) * t148;
t135 = t213 * t325 + t320;
t137 = -t213 * t321 + t324;
t300 = t373 * t32;
t11 = t230 * t29 + t300;
t2 = -qJD(6) * t11 - t230 * t7 + t373 * t6;
t382 = -g(1) * t137 + g(2) * t135 + t217 * t366 - t54 * t254 + t2;
t24 = qJD(6) * t254 - t230 * t66 - t373 * t256;
t381 = t158 * t254 - t24;
t109 = qJDD(6) + t111;
t380 = t109 * t178 - t158 * t344;
t290 = t176 * t309;
t169 = t225 * t310 - t227 * t288;
t330 = t169 * t234;
t251 = t290 + t330;
t98 = t234 * t111;
t379 = -t161 * t251 + t176 * t98;
t255 = t293 - t313;
t378 = -t170 * t143 - t255 * t256;
t245 = -t273 * t213 - t366;
t377 = -t23 * t253 - t254 * t343;
t376 = t167 ^ 2;
t372 = pkin(4) * t213;
t233 = sin(qJ(1));
t363 = t233 * pkin(1);
t104 = t253 * t176;
t315 = t231 * t169;
t38 = t124 * t176 + t169 * t291 - t230 * t315;
t360 = -t104 * t24 + t38 * t76;
t103 = t178 * t176;
t328 = t176 * t231;
t39 = -t169 * t292 - t230 * t290 - t307 * t328 + (-t169 * t230 + t176 * t385) * t234;
t359 = -t103 * t109 - t39 * t158;
t249 = t256 * t234;
t358 = t143 * t330 + t176 * t249;
t357 = t170 * t254 + t23 * t255;
t188 = t375 * t231;
t189 = t375 * t234;
t139 = -t188 * t373 - t230 * t189;
t356 = t139 * qJD(6) + t395 * t230 - t396 * t373;
t140 = -t230 * t188 + t189 * t373;
t355 = -t140 * qJD(6) + t396 * t230 + t395 * t373;
t354 = t145 * t170 + t255 * t66;
t106 = -t232 * t171 + t172 * t374;
t96 = t234 * t106;
t97 = -pkin(4) * t255 - t176 * pkin(8) + t186;
t57 = t231 * t97 + t96;
t351 = t167 * t76;
t350 = t167 * t254;
t348 = t230 * t32;
t346 = t66 * t231;
t345 = -t115 * t176 + t165 * t169;
t62 = t231 * t256;
t342 = -t143 * t308 + t62;
t338 = t143 * t165;
t337 = t143 * t167;
t336 = t143 * t231;
t335 = t145 * t143;
t334 = t145 * t167;
t333 = t145 * t234;
t332 = t165 * t167;
t327 = t176 * t234;
t326 = t211 * t214;
t316 = t231 * t111;
t235 = cos(qJ(1));
t219 = t235 * pkin(1);
t312 = t214 * t201 + t219;
t220 = t225 ^ 2;
t221 = t227 ^ 2;
t311 = t220 + t221;
t299 = t145 * t315;
t229 = -pkin(7) - qJ(3);
t285 = pkin(5) * t231 - t229;
t113 = pkin(4) * t170 + pkin(8) * t169;
t81 = t255 * qJD(3) + qJD(4) * t386;
t281 = t234 * t113 - t231 * t81;
t56 = -t231 * t106 + t234 * t97;
t279 = t161 * t234;
t277 = -t178 * t24 + t344 * t76;
t276 = t253 * t109 - t343 * t158;
t275 = t393 * pkin(5) - t74;
t274 = g(2) * t326 - t211 * t370;
t271 = g(1) * t233 - g(2) * t235;
t270 = -t103 * t23 + t254 * t39;
t268 = -t214 * t229 - t363;
t266 = -t170 * t76 + t24 * t255;
t265 = t231 * t44 + t234 * t43;
t264 = t231 * t43 - t234 * t44;
t263 = -t104 * t109 + t158 * t38;
t262 = t114 * t255 + t167 * t170;
t146 = -t225 * t173 + t208;
t261 = -t146 * t225 + t147 * t227;
t260 = (-t225 * t187 + t210) * t225 - t157 * t227;
t206 = t234 * pkin(5) + pkin(4);
t259 = t206 * t213 + t211 * t375;
t257 = -t393 * t161 + t98;
t45 = -pkin(5) * t255 - pkin(9) * t327 + t56;
t46 = -pkin(9) * t328 + t57;
t18 = -t230 * t46 + t373 * t45;
t19 = t230 * t45 + t373 * t46;
t252 = t176 * t308 - t315;
t250 = -pkin(8) * t111 + t161 * t68;
t26 = -t106 * t309 + t231 * t113 + t234 * t81 + t97 * t308;
t248 = -t304 + t397;
t243 = -qJD(5) * t265 - t9 * t231 + t8 * t234;
t241 = -t161 * t252 - t176 * t316;
t82 = qJD(3) * t176 + qJD(4) * t106;
t164 = t165 ^ 2;
t151 = t213 * t318 + t323;
t149 = -t213 * t322 + t319;
t117 = -qJD(4) * t169 + qJDD(4) * t176;
t116 = -qJD(4) * t170 + qJDD(4) * t255;
t83 = pkin(5) * t328 - t386;
t49 = pkin(5) * t252 + t82;
t27 = -qJD(5) * t57 + t281;
t25 = -pkin(5) * t256 + t37;
t20 = -pkin(9) * t252 + t26;
t17 = pkin(9) * t330 + t170 * pkin(5) + (-t96 + (pkin(9) * t176 - t97) * t231) * qJD(5) + t281;
t13 = t31 * t373 - t348;
t12 = -t230 * t31 - t300;
t10 = t29 * t373 - t348;
t4 = -qJD(6) * t19 + t17 * t373 - t230 * t20;
t3 = qJD(6) * t18 + t230 * t17 + t20 * t373;
t5 = [0, 0, 0, 0, 0, qJDD(1), t271, g(1) * t235 + g(2) * t233, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t228 * t341 - t284, -0.2e1 * t226 * t341 + t273, 0 (t271 + (t226 ^ 2 + t228 ^ 2) * t341) * pkin(1), t220 * qJDD(1), 0.2e1 * t225 * t302, 0, t221 * qJDD(1), 0, 0, t248 * t227, -t248 * t225, t173 * t311 + t261 - t273, t182 * t202 - g(1) * (-pkin(2) * t212 + qJ(3) * t214 - t363) - g(2) * (pkin(2) * t214 + qJ(3) * t212 + t219) + t261 * t198 - t260 * qJD(3), -t114 * t176 - t167 * t169, -t262 + t345, t117, -t115 * t255 + t165 * t170, t116, 0, -t82 * qJD(4) + qJDD(4) * t386 + t186 * t115 - t160 * t255 + t163 * t170 - t213 * t284, -qJD(4) * t81 - qJDD(4) * t106 - t114 * t186 + t160 * t176 - t163 * t169 + t274, -t106 * t115 + t114 * t386 - t165 * t81 + t167 * t82 + t169 * t73 - t170 * t74 + t176 * t278 + t255 * t40 - t273, t40 * t106 + t74 * t81 - t278 * t386 - t73 * t82 + t160 * t186 - g(1) * (-t212 * t201 + t268) - g(2) * (-t212 * t229 + t312) -t145 * t251 - t327 * t66, t299 + (t346 + (-t333 + t336) * qJD(5)) * t176 + t358, t354 + t379, t143 * t252 - t176 * t62, t241 + t378, -t111 * t255 + t161 * t170, t27 * t161 + t56 * t111 - t9 * t255 + t43 * t170 + t82 * t143 + t386 * t256 - t68 * t315 - g(1) * t149 - g(2) * t151 + (t37 * t231 + t308 * t68) * t176, -t68 * t330 - g(1) * t148 - g(2) * t150 + t386 * t66 - t57 * t111 + t82 * t145 - t26 * t161 - t44 * t170 + t8 * t255 + (t37 * t234 - t309 * t68) * t176, -t26 * t143 + t57 * t256 - t27 * t145 + t56 * t66 + t265 * t169 + (qJD(5) * t264 - t8 * t231 - t9 * t234) * t176 - t274, t8 * t57 + t44 * t26 + t9 * t56 + t43 * t27 - t37 * t386 + t68 * t82 - g(1) * t268 - g(2) * (pkin(8) * t326 + t214 * t372 + t312) + (-g(1) * (-pkin(8) * t211 - t201 - t372) + g(2) * t229) * t212, -t104 * t23 - t254 * t38, -t270 + t360, -t263 + t357, t103 * t24 + t39 * t76, t266 + t359, -t109 * t255 + t158 * t170, -g(1) * t136 - g(2) * t138 + t10 * t170 + t103 * t25 + t109 * t18 + t158 * t4 - t2 * t255 + t24 * t83 + t39 * t54 + t49 * t76, -g(1) * t135 - g(2) * t137 + t1 * t255 + t104 * t25 - t109 * t19 - t11 * t170 - t158 * t3 - t23 * t83 + t254 * t49 - t38 * t54, -t1 * t103 + t10 * t38 - t104 * t2 - t11 * t39 + t18 * t23 - t19 * t24 - t254 * t4 - t3 * t76 - t274, t1 * t19 + t11 * t3 + t2 * t18 + t10 * t4 + t25 * t83 + t54 * t49 + g(1) * t363 - g(2) * t312 + (-g(1) * t285 - g(2) * t259) * t214 + (-g(1) * (-t201 - t259) - g(2) * t285) * t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t146 * t227 + t147 * t225 - g(3), 0, 0, 0, 0, 0, 0, t116, -t117, t262 + t345, -t169 * t74 - t170 * t73 + t176 * t40 - t255 * t278 - g(3), 0, 0, 0, 0, 0, 0, t241 - t378, t354 - t379, -t299 + (-t346 + (t333 + t336) * qJD(5)) * t176 + t358, t169 * t264 + t68 * t170 + t176 * t243 - t255 * t37 - g(3), 0, 0, 0, 0, 0, 0, -t266 + t359, t263 + t357, t270 + t360, t1 * t104 - t10 * t39 - t103 * t2 - t11 * t38 + t170 * t54 - t25 * t255 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t303, -t311 * qJD(1) ^ 2, qJD(1) * t260 - t397, 0, 0, 0, 0, 0, 0, 0.2e1 * qJD(4) * t167 + t267 (-t165 - t289) * qJD(4) + t295, -t164 - t376, t74 * t165 + t73 * t167 + t160 + t284, 0, 0, 0, 0, 0, 0, t257 - t337, -t161 ^ 2 * t234 - t316 - t334 (t66 - t338) * t234 + t387 + t342, -t68 * t167 + t269 * t231 + t234 * t388 + t284, 0, 0, 0, 0, 0, 0, t276 - t351, -t350 - t380, t277 - t377, t1 * t178 - t10 * t343 - t11 * t344 - t167 * t54 + t2 * t253 + t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, -t164 + t376 (t165 - t289) * qJD(4) + t295, -t332, -t267, qJDD(4), t74 * qJD(4) - t163 * t167 + t247 - t278, t163 * t165 + (t73 + t132) * qJD(4) + t296 - t245, 0, 0, t145 * t279 - t346 (-t66 - t338) * t234 - t387 + t342, t161 * t279 + t316 - t334, t143 * t280 + t249, t257 + t337, -t161 * t167, -pkin(4) * t297 - t47 * t161 - t43 * t167 - t74 * t143 + t250 * t231 + (t340 - t398) * t234, pkin(4) * t66 - t74 * t145 + t48 * t161 + t44 * t167 + t231 * t398 + t250 * t234, t48 * t143 + t47 * t145 + ((qJD(5) * t145 + t256) * pkin(8) + t269) * t234 + ((qJD(5) * t143 - t66) * pkin(8) - t388) * t231 + t245, -t43 * t47 - t44 * t48 - t68 * t74 + t244 * pkin(4) + (t243 + t245) * pkin(8), -t178 * t23 - t254 * t344, t277 + t377, -t350 + t380, -t24 * t253 + t343 * t76, t276 + t351, -t158 * t167, -t10 * t167 + t139 * t109 + t158 * t355 - t206 * t24 + t218 * t247 - t25 * t253 + t275 * t76 + t343 * t54, -t140 * t109 + t11 * t167 - t158 * t356 + t25 * t178 + t206 * t23 - t217 * t247 + t254 * t275 - t344 * t54, t1 * t253 + t10 * t344 - t11 * t343 + t139 * t23 - t140 * t24 - t2 * t178 - t254 * t355 - t356 * t76 + t245, -g(3) * t259 + t1 * t140 + t355 * t10 + t356 * t11 + t2 * t139 - t25 * t206 + t275 * t54 + t273 * (t206 * t211 - t213 * t375); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, -t143 ^ 2 + t145 ^ 2, t143 * t161 - t66, -t335, t145 * t161 + t256, t111, -t69 * t308 - t68 * t145 + t347 + t51 + (-qJD(5) * t85 - t36 + t366) * t231 + t384, g(1) * t151 - g(2) * t149 + t143 * t68 + t234 * t366 - t269, 0, 0, t362, t392, t391, -t362, t381, t109, -t12 * t158 + (t109 * t373 - t145 * t76 - t158 * t307) * pkin(5) + t382, t13 * t158 + (-t109 * t230 - t145 * t254 - t158 * t286) * pkin(5) + t390, -t10 * t76 + t11 * t254 + t12 * t254 + t13 * t76 + (t373 * t23 - t230 * t24 + (t230 * t254 - t373 * t76) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t230 + t2 * t373 - t54 * t145 + t231 * t366 + (-t10 * t230 + t11 * t373) * qJD(6) + t384) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t362, t392, t391, -t362, t381, t109, t11 * t158 + t382, t10 * t158 + t390, 0, 0;];
tau_reg  = t5;
