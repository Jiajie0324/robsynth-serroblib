% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP7_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:21:07
% EndTime: 2019-03-09 06:21:26
% DurationCPUTime: 10.04s
% Computational Cost: add. (16327->649), mult. (38518->771), div. (0->0), fcn. (29702->14), ass. (0->303)
t260 = sin(pkin(10));
t261 = cos(pkin(10));
t265 = sin(qJ(3));
t428 = cos(qJ(3));
t210 = t260 * t428 + t261 * t265;
t200 = t210 * qJD(1);
t264 = sin(qJ(4));
t267 = cos(qJ(4));
t161 = qJD(3) * t267 - t200 * t264;
t162 = qJD(3) * t264 + t200 * t267;
t263 = sin(qJ(5));
t427 = cos(qJ(5));
t104 = -t161 * t427 + t162 * t263;
t404 = t104 * t200;
t203 = t210 * qJD(3);
t349 = t428 * t261;
t358 = t260 * qJDD(1);
t315 = -qJDD(1) * t349 + t265 * t358;
t146 = qJD(1) * t203 + t315;
t140 = qJDD(4) + t146;
t137 = qJDD(5) + t140;
t303 = -t260 * t265 + t349;
t461 = t303 * qJD(1);
t190 = qJD(4) - t461;
t185 = qJD(5) + t190;
t347 = t427 * t267;
t378 = t263 * t264;
t440 = t347 - t378;
t348 = t427 * t264;
t377 = t263 * t267;
t214 = t348 + t377;
t436 = qJD(4) + qJD(5);
t152 = t436 * t214;
t454 = -t214 * t461 + t152;
t432 = -t137 * t440 + t185 * t454;
t470 = -t404 - t432;
t469 = t404 - t432;
t302 = t161 * t263 + t162 * t427;
t362 = qJD(4) * t267;
t293 = t210 * qJDD(1);
t464 = qJD(3) * t461;
t272 = t293 + t464;
t450 = qJD(3) * qJD(4) + t272;
t352 = t200 * t362 + t264 * t450;
t306 = qJDD(3) * t267 - t352;
t363 = qJD(4) * t264;
t99 = -t264 * qJDD(3) + t200 * t363 - t267 * t450;
t43 = qJD(5) * t302 - t263 * t99 - t306 * t427;
t342 = t427 * qJD(4);
t329 = t267 * t342;
t341 = t427 * qJD(5);
t453 = t267 * t341 - t378 * t436 - t440 * t461 + t329;
t326 = -t104 * t453 - t214 * t43;
t361 = qJD(5) * t263;
t42 = -t161 * t341 + t162 * t361 - t263 * t306 + t427 * t99;
t463 = t302 * t454 + t42 * t440;
t468 = t463 - t326;
t467 = t463 + t326;
t317 = t214 * t137 + t185 * t453;
t400 = t302 * t200;
t466 = t317 + t400;
t258 = pkin(10) + qJ(3);
t250 = sin(t258);
t266 = sin(qJ(1));
t268 = cos(qJ(1));
t320 = g(1) * t268 + g(2) * t266;
t251 = cos(t258);
t422 = g(3) * t251;
t290 = t250 * t320 - t422;
t360 = qJD(1) * qJD(2);
t421 = pkin(7) + qJ(2);
t431 = qJDD(1) * t421 + t360;
t181 = t431 * t260;
t182 = t431 * t261;
t224 = t421 * t260;
t211 = qJD(1) * t224;
t225 = t421 * t261;
t212 = qJD(1) * t225;
t343 = qJD(3) * t428;
t364 = qJD(3) * t265;
t331 = t181 * t428 + t182 * t265 - t211 * t364 + t212 * t343;
t406 = qJDD(3) * pkin(3);
t85 = t331 - t406;
t283 = -t85 + t290;
t465 = qJD(4) * pkin(8) * t190 - t283;
t458 = -t185 * t302 + t43;
t390 = t461 * t264;
t462 = t363 - t390;
t269 = -pkin(9) - pkin(8);
t227 = t269 * t264;
t228 = t269 * t267;
t160 = t227 * t263 - t228 * t427;
t259 = qJ(4) + qJ(5);
t253 = sin(t259);
t460 = -t137 * t160 - t253 * t290;
t197 = t265 * t212;
t148 = -t211 * t428 - t197;
t141 = -qJD(3) * pkin(3) - t148;
t100 = -pkin(4) * t161 + t141;
t48 = pkin(5) * t104 - qJ(6) * t302 + t100;
t459 = t104 * t48;
t457 = t100 * t104;
t456 = t104 * t302;
t391 = t190 * t264;
t455 = t162 * t391;
t248 = pkin(4) * t267 + pkin(3);
t219 = t251 * t248;
t452 = -t250 * t269 + t219;
t407 = qJDD(1) * pkin(1);
t249 = qJDD(2) - t407;
t451 = -g(1) * t266 + g(2) * t268;
t309 = -t249 - t451;
t202 = t260 * t364 - t261 * t343;
t300 = -t202 * t264 + t210 * t362;
t430 = t302 ^ 2;
t344 = t104 ^ 2 - t430;
t448 = t104 * t185 - t42;
t63 = pkin(5) * t302 + qJ(6) * t104;
t350 = qJD(4) * t269;
t216 = t264 * t350;
t143 = pkin(3) * t200 - pkin(8) * t461;
t91 = t143 * t267 - t148 * t264;
t68 = -pkin(9) * t267 * t461 + pkin(4) * t200 + t91;
t92 = t143 * t264 + t148 * t267;
t73 = -pkin(9) * t390 + t92;
t410 = qJD(5) * t160 - t269 * t329 + t427 * t68 + (t216 - t73) * t263;
t243 = pkin(2) * t261 + pkin(1);
t220 = -qJD(1) * t243 + qJD(2);
t117 = -pkin(3) * t461 - pkin(8) * t200 + t220;
t149 = -t211 * t265 + t212 * t428;
t142 = qJD(3) * pkin(8) + t149;
t351 = t181 * t265 - t182 * t428 + t211 * t343;
t89 = -t212 * t364 - t351;
t84 = qJDD(3) * pkin(8) + t89;
t357 = t261 * qJDD(1);
t88 = -pkin(2) * t357 + t146 * pkin(3) - pkin(8) * t272 + t249;
t24 = t117 * t362 - t142 * t363 + t264 * t88 + t267 * t84;
t75 = t117 * t267 - t142 * t264;
t312 = -t190 * t75 + t24;
t76 = t117 * t264 + t142 * t267;
t83 = t267 * t88;
t25 = -qJD(4) * t76 - t264 * t84 + t83;
t416 = t190 * t76;
t446 = t25 + t416;
t324 = pkin(4) * t462 - t149;
t124 = t137 * qJ(6);
t175 = t185 * qJD(6);
t443 = t124 + t175;
t145 = -pkin(3) * t303 - pkin(8) * t210 - t243;
t158 = -t224 * t265 + t225 * t428;
t150 = t267 * t158;
t98 = t145 * t264 + t150;
t442 = -t224 * t428 - t225 * t265;
t438 = t200 * qJD(3);
t437 = qJ(2) * qJDD(1);
t130 = t137 * pkin(5);
t435 = t130 - qJDD(6);
t254 = cos(t259);
t380 = t254 * t268;
t381 = t253 * t266;
t171 = t251 * t381 + t380;
t369 = t268 * t253;
t372 = t266 * t254;
t173 = t251 * t369 - t372;
t16 = pkin(4) * t140 + pkin(9) * t99 + t25;
t19 = pkin(9) * t306 + t24;
t66 = -pkin(9) * t162 + t75;
t56 = pkin(4) * t190 + t66;
t67 = pkin(9) * t161 + t76;
t338 = -t16 * t427 + t19 * t263 + t341 * t67 + t361 * t56;
t384 = t250 * t253;
t286 = g(1) * t173 + g(2) * t171 + g(3) * t384 - t338;
t274 = t302 * t48 - t286 - t435;
t433 = -t100 * t302 + t286;
t423 = g(3) * t250;
t291 = t251 * t320 + t423;
t118 = qJD(2) * t303 + qJD(3) * t442;
t144 = pkin(3) * t203 + pkin(8) * t202;
t335 = -t118 * t264 + t144 * t267;
t387 = t202 * t267;
t37 = pkin(9) * t387 + pkin(4) * t203 + (-t150 + (pkin(9) * t210 - t145) * t264) * qJD(4) + t335;
t385 = t210 * t267;
t97 = t145 * t267 - t158 * t264;
t71 = -pkin(4) * t303 - pkin(9) * t385 + t97;
t386 = t210 * t264;
t78 = -pkin(9) * t386 + t98;
t420 = t263 * t71 + t427 * t78;
t49 = t118 * t267 + t144 * t264 + t145 * t362 - t158 * t363;
t45 = -pkin(9) * t300 + t49;
t9 = -qJD(5) * t420 - t263 * t45 + t37 * t427;
t429 = t200 ^ 2;
t39 = t263 * t68 + t427 * t73;
t419 = pkin(5) * t454 - qJ(6) * t453 - qJD(6) * t214 + t324;
t354 = t427 * t67;
t27 = t263 * t56 + t354;
t418 = t185 * t27;
t415 = t263 * t67;
t414 = t99 * t264;
t301 = t227 * t427 + t228 * t263;
t101 = qJD(5) * t301 + t216 * t427 + t350 * t377;
t31 = qJ(6) * t200 + t39;
t413 = t101 - t31;
t412 = t101 - t39;
t411 = pkin(5) * t200 + t410;
t94 = t264 * t306;
t409 = t161 * t362 + t94;
t29 = t427 * t66 - t415;
t408 = pkin(4) * t341 + qJD(6) - t29;
t398 = t140 * t264;
t397 = t161 * t461;
t396 = t161 * t200;
t395 = t162 * t161;
t394 = t162 * t200;
t392 = t185 * t200;
t389 = t200 * t461;
t383 = t250 * t254;
t379 = t421 * t268;
t376 = t264 * t266;
t375 = t264 * t268;
t371 = t266 * t267;
t125 = t267 * t140;
t370 = t267 * t268;
t26 = t427 * t56 - t415;
t368 = qJD(6) - t26;
t256 = t260 ^ 2;
t257 = t261 ^ 2;
t365 = t256 + t257;
t353 = t210 * t378;
t346 = t210 * t363;
t3 = t16 * t263 + t19 * t427 + t341 * t56 - t361 * t67;
t337 = t365 * qJD(1) ^ 2;
t174 = t251 * t380 + t381;
t336 = -pkin(5) * t173 + qJ(6) * t174;
t226 = t268 * t243;
t334 = t266 * t421 + t226;
t332 = t190 * t267;
t330 = 0.2e1 * t365;
t28 = t263 * t66 + t354;
t328 = pkin(4) * t361 - t28;
t327 = t451 * t250;
t323 = pkin(3) * t251 + pkin(8) * t250;
t322 = g(1) * t171 - g(2) * t173;
t172 = t251 * t372 - t369;
t321 = g(1) * t172 - g(2) * t174;
t120 = pkin(4) * t386 - t442;
t316 = pkin(5) * t254 + qJ(6) * t253;
t131 = t214 * t210;
t58 = -t202 * t348 - t263 * t346 - qJD(5) * t353 + (-t202 * t263 + (t342 + t341) * t210) * t267;
t314 = t104 * t58 + t131 * t43;
t313 = t264 * t76 + t267 * t75;
t308 = -t190 * t462 + t125;
t46 = -t263 * t78 + t427 * t71;
t8 = t263 * t37 + t341 * t71 - t361 * t78 + t427 * t45;
t299 = -t346 - t387;
t298 = -pkin(8) * t140 + t141 * t190;
t297 = t104 * t454 - t43 * t440;
t217 = -qJDD(1) * t243 + qJDD(2);
t296 = t306 * t267;
t295 = t137 * t301 - t254 * t422 + (g(1) * t380 + g(2) * t372) * t250;
t292 = t309 + t407;
t287 = g(1) * t174 + g(2) * t172 + g(3) * t383 - t3;
t285 = pkin(4) * t376 + t268 * t452 + t334;
t132 = t210 * t347 - t353;
t57 = t152 * t210 + t202 * t440;
t284 = t104 * t57 + t131 * t42 - t132 * t43 - t302 * t58;
t282 = t104 * t203 + t131 * t137 + t185 * t58 - t303 * t43;
t281 = pkin(4) * t375 + t379 + (-t243 - t452) * t266;
t279 = t185 * t26 + t287;
t278 = -g(2) * (-pkin(5) * t171 + qJ(6) * t172) - g(3) * (-pkin(5) * t384 + qJ(6) * t383);
t277 = t330 * t360 - t320;
t275 = -t101 * t104 - t160 * t43 + t301 * t42 - t291;
t51 = -pkin(4) * t306 + t85;
t273 = g(2) * t370 + t264 * t291;
t119 = qJD(2) * t210 + qJD(3) * t158;
t86 = pkin(4) * t300 + t119;
t247 = -pkin(4) * t427 - pkin(5);
t242 = pkin(4) * t263 + qJ(6);
t239 = pkin(4) * t371;
t196 = t461 ^ 2;
t194 = t251 * t370 + t376;
t193 = -t251 * t375 + t371;
t192 = -t251 * t371 + t375;
t191 = t251 * t376 + t370;
t147 = -pkin(5) * t440 - qJ(6) * t214 - t248;
t79 = -t137 * t303 + t185 * t203;
t59 = pkin(5) * t131 - qJ(6) * t132 + t120;
t53 = pkin(4) * t162 + t63;
t50 = -qJD(4) * t98 + t335;
t41 = pkin(5) * t303 - t46;
t40 = -qJ(6) * t303 + t420;
t30 = t317 - t400;
t23 = qJ(6) * t185 + t27;
t22 = -pkin(5) * t185 + t368;
t13 = t58 * pkin(5) + t57 * qJ(6) - t132 * qJD(6) + t86;
t12 = -t214 * t42 + t302 * t453;
t11 = -t132 * t42 - t302 * t57;
t10 = t132 * t137 - t185 * t57 + t203 * t302 + t303 * t42;
t7 = t43 * pkin(5) + t42 * qJ(6) - qJD(6) * t302 + t51;
t6 = -pkin(5) * t203 - t9;
t5 = qJ(6) * t203 - qJD(6) * t303 + t8;
t2 = t338 - t435;
t1 = t3 + t443;
t4 = [0, 0, 0, 0, 0, qJDD(1), -t451, t320, 0, 0, t256 * qJDD(1), 0.2e1 * t260 * t357, 0, t257 * qJDD(1), 0, 0, t292 * t261, -t292 * t260, t330 * t437 + t277, t309 * pkin(1) + (t365 * t437 + t277) * qJ(2), -t200 * t202 + t210 * t272, -t210 * t146 - t200 * t203 - t202 * t461 + t272 * t303, -qJD(3) * t202 + qJDD(3) * t210, -t146 * t303 - t203 * t461, -qJD(3) * t203 + qJDD(3) * t303, 0, -qJD(3) * t119 + qJDD(3) * t442 - t146 * t243 + t203 * t220 - t217 * t303 - t251 * t451, -t118 * qJD(3) - t158 * qJDD(3) - t220 * t202 + t217 * t210 - t243 * t272 + t327, t118 * t461 + t119 * t200 - t158 * t146 + t148 * t202 - t149 * t203 + t210 * t331 - t272 * t442 + t303 * t89 - t320, t89 * t158 + t149 * t118 - t331 * t442 - t148 * t119 - t217 * t243 - g(1) * (-t243 * t266 + t379) - g(2) * t334, t162 * t299 - t385 * t99 (-t161 * t267 + t162 * t264) * t202 + (t296 + t414 + (-t161 * t264 - t162 * t267) * qJD(4)) * t210, t125 * t210 + t162 * t203 + t190 * t299 + t303 * t99, -t161 * t300 - t210 * t94, -t140 * t386 + t161 * t203 - t190 * t300 - t303 * t306, -t140 * t303 + t190 * t203, -g(1) * t192 - g(2) * t194 - t119 * t161 + t97 * t140 + t141 * t300 + t50 * t190 + t75 * t203 - t25 * t303 + t306 * t442 + t386 * t85, -g(1) * t191 - g(2) * t193 + t119 * t162 - t140 * t98 + t141 * t299 - t190 * t49 - t203 * t76 + t24 * t303 + t385 * t85 + t442 * t99, t49 * t161 + t98 * t306 - t50 * t162 + t97 * t99 + t313 * t202 + (-t24 * t264 - t25 * t267 + (t264 * t75 - t267 * t76) * qJD(4)) * t210 - t327, -g(2) * t226 + t141 * t119 - t85 * t442 + t24 * t98 + t25 * t97 + t76 * t49 + t75 * t50 + (-g(1) * t421 - g(2) * t323) * t268 + (-g(1) * (-t243 - t323) - g(2) * t421) * t266, t11, t284, t10, t314, -t282, t79, t100 * t58 + t104 * t86 + t120 * t43 + t131 * t51 + t137 * t46 + t185 * t9 + t203 * t26 + t303 * t338 + t321, -t100 * t57 - t120 * t42 + t132 * t51 - t137 * t420 - t185 * t8 - t203 * t27 + t3 * t303 + t302 * t86 - t322, -t104 * t8 - t131 * t3 + t132 * t338 + t26 * t57 - t27 * t58 - t302 * t9 + t42 * t46 - t420 * t43 - t327, -g(1) * t281 - g(2) * t285 + t100 * t86 + t51 * t120 + t26 * t9 + t27 * t8 + t3 * t420 - t338 * t46, t11, t10, -t284, t79, t282, t314, t104 * t13 + t131 * t7 - t137 * t41 - t185 * t6 + t2 * t303 - t203 * t22 + t43 * t59 + t48 * t58 + t321, -t1 * t131 - t104 * t5 + t132 * t2 - t22 * t57 - t23 * t58 + t302 * t6 - t40 * t43 - t41 * t42 - t327, -t1 * t303 - t13 * t302 - t132 * t7 + t137 * t40 + t185 * t5 + t203 * t23 + t42 * t59 + t48 * t57 + t322, t1 * t40 + t23 * t5 + t7 * t59 + t48 * t13 + t2 * t41 + t22 * t6 - g(1) * (-pkin(5) * t172 - qJ(6) * t171 + t281) - g(2) * (pkin(5) * t174 + qJ(6) * t173 + t285); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t357, t358, -t337, -qJ(2) * t337 - t309, 0, 0, 0, 0, 0, 0, t315 + 0.2e1 * t438, t293 + 0.2e1 * t464, -t196 - t429, t148 * t200 - t149 * t461 + t217 + t451, 0, 0, 0, 0, 0, 0, t308 + t396, -t190 ^ 2 * t267 - t394 - t398 (t99 - t397) * t267 + t455 + t409, -t141 * t200 + t264 * t312 + t267 * t446 + t451, 0, 0, 0, 0, 0, 0, t470, -t466, t467, -t100 * t200 + t214 * t3 - t26 * t454 + t27 * t453 - t338 * t440 + t451, 0, 0, 0, 0, 0, 0, t470, t467, t466, t1 * t214 - t2 * t440 - t200 * t48 + t22 * t454 + t23 * t453 + t451; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t389, -t196 + t429, t293, t389, -t315, qJDD(3), qJD(3) * t149 - t200 * t220 + t290 - t331, -t461 * t220 + (t148 + t197) * qJD(3) + t291 + t351, 0, 0, t162 * t332 - t414 (-t99 - t397) * t267 - t455 + t409, t190 * t332 - t394 + t398, -t161 * t391 + t296, t308 - t396, -t190 * t200, -pkin(3) * t352 - t91 * t190 - t75 * t200 + t149 * t161 + t298 * t264 + (t406 - t465) * t267, pkin(3) * t99 - t149 * t162 + t190 * t92 + t200 * t76 + t264 * t465 + t267 * t298, -t92 * t161 + t91 * t162 + ((qJD(4) * t162 + t306) * pkin(8) + t312) * t267 + ((-qJD(4) * t161 - t99) * pkin(8) - t446) * t264 - t291, -t141 * t149 - t75 * t91 - t76 * t92 + t283 * pkin(3) + (-qJD(4) * t313 + t24 * t267 - t25 * t264 - t291) * pkin(8), t12, -t468, t30, t297, t469, -t392, t100 * t454 + t104 * t324 - t185 * t410 - t200 * t26 - t248 * t43 - t440 * t51 + t295, t100 * t453 - t185 * t412 + t200 * t27 + t214 * t51 + t248 * t42 + t302 * t324 + t460, t104 * t39 + t214 * t338 - t26 * t453 - t27 * t454 + t3 * t440 + t302 * t410 + t275, t3 * t160 - t338 * t301 - t51 * t248 - g(3) * t452 + t412 * t27 - t410 * t26 + t324 * t100 + t320 * (t248 * t250 + t251 * t269) t12, t30, t468, -t392, -t469, t297, t104 * t419 + t147 * t43 - t185 * t411 + t200 * t22 - t440 * t7 + t454 * t48 + t295, t1 * t440 + t104 * t31 + t2 * t214 + t22 * t453 - t23 * t454 + t302 * t411 + t275, t147 * t42 + t185 * t413 - t200 * t23 - t214 * t7 - t302 * t419 - t453 * t48 - t460, -g(3) * t219 + t1 * t160 + t7 * t147 - t2 * t301 + t419 * t48 + t413 * t23 + t411 * t22 + (-g(3) * t316 + t269 * t320) * t251 + (g(3) * t269 + t320 * (t248 + t316)) * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t395, -t161 ^ 2 + t162 ^ 2, -t161 * t190 - t99, t395, t162 * t190 + t306, t140, -t142 * t362 - g(1) * t193 + g(2) * t191 - t141 * t162 + t416 + t83 + (-qJD(4) * t117 + t423 - t84) * t264, g(1) * t194 - g(2) * t192 - t141 * t161 + t267 * t423 - t312, 0, 0, t456, -t344, t448, -t456, -t458, t137, t28 * t185 + (-t104 * t162 + t137 * t427 - t185 * t361) * pkin(4) + t433, t457 + t29 * t185 + (-t137 * t263 - t162 * t302 - t185 * t341) * pkin(4) + t287, t27 * t302 + t29 * t104 - t104 * t26 - t28 * t302 + (t427 * t42 - t263 * t43 + (-t104 * t427 + t263 * t302) * qJD(5)) * pkin(4), -g(1) * t239 + t26 * t28 - t27 * t29 + (-t338 * t427 - t100 * t162 + t3 * t263 + (-t26 * t263 + t27 * t427) * qJD(5) + t273) * pkin(4), t456, t448, t344, t137, t458, -t456, -t104 * t53 - t137 * t247 - t185 * t328 - t274, -t242 * t43 - t247 * t42 + (t23 + t328) * t302 + (-t408 + t22) * t104, t137 * t242 + t185 * t408 + t302 * t53 - t287 + t443 - t459, t1 * t242 + t2 * t247 - t48 * t53 - t22 * t28 - g(1) * (t239 + t336) + t408 * t23 + (t22 * t361 + t273) * pkin(4) + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, -t344, t448, -t456, -t458, t137, t418 + t433, t279 + t457, 0, 0, t456, t448, t344, t137, t458, -t456, -t104 * t63 + t130 - t274 + t418, pkin(5) * t42 - qJ(6) * t43 + (t23 - t27) * t302 + (t22 - t368) * t104, t302 * t63 + 0.2e1 * t124 + 0.2e1 * t175 - t279 - t459, -t2 * pkin(5) - g(1) * t336 + t1 * qJ(6) - t22 * t27 + t23 * t368 - t48 * t63 + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(4) - qJDD(5) - t315 + t456 - t438, t448, -t185 ^ 2 - t430, -t185 * t23 + t274;];
tau_reg  = t4;
