% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP7_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t110 = cos(qJ(3));
t71 = sin(pkin(10));
t72 = cos(pkin(10));
t75 = sin(qJ(3));
t48 = t110 * t71 + t75 * t72;
t73 = sin(qJ(5));
t74 = sin(qJ(4));
t76 = cos(qJ(5));
t77 = cos(qJ(4));
t54 = t73 * t77 + t74 * t76;
t20 = t54 * t48;
t104 = t54 * t20;
t102 = t74 * t48;
t99 = t77 * t48;
t22 = -t73 * t102 + t76 * t99;
t52 = t73 * t74 - t76 * t77;
t15 = t22 * t52;
t123 = t15 + t104;
t122 = -0.2e1 * t48;
t121 = t15 - t104;
t117 = t52 ^ 2;
t51 = t54 ^ 2;
t120 = t51 + t117;
t119 = t20 ^ 2;
t98 = pkin(7) + qJ(2);
t56 = t98 * t71;
t57 = t98 * t72;
t28 = t110 * t56 + t57 * t75;
t118 = t28 ^ 2;
t46 = -t110 * t72 + t75 * t71;
t43 = t46 ^ 2;
t116 = 0.2e1 * t46;
t61 = -pkin(2) * t72 - pkin(1);
t115 = 0.2e1 * t61;
t65 = -pkin(4) * t77 - pkin(3);
t114 = 0.2e1 * t65;
t113 = 0.2e1 * t72;
t112 = -pkin(9) - pkin(8);
t30 = t110 * t57 - t75 * t56;
t100 = t77 * t30;
t26 = pkin(3) * t46 - pkin(8) * t48 + t61;
t10 = t100 + (-pkin(9) * t48 + t26) * t74;
t11 = t77 * t26 - t30 * t74;
t8 = pkin(4) * t46 - pkin(9) * t99 + t11;
t4 = t76 * t10 + t73 * t8;
t42 = t46 * pkin(5);
t66 = t73 * pkin(4);
t111 = t76 * pkin(4);
t109 = t20 * t52;
t108 = t22 * t20;
t58 = t112 * t77;
t92 = t112 * t74;
t35 = -t73 * t58 - t76 * t92;
t107 = t35 * t46;
t37 = -t76 * t58 + t73 * t92;
t106 = t37 * t46;
t105 = t46 * t20;
t31 = t46 * t52;
t34 = t52 * t54;
t32 = t54 * t46;
t103 = t74 * t46;
t101 = t74 * t77;
t67 = t71 ^ 2;
t68 = t72 ^ 2;
t97 = t67 + t68;
t69 = t74 ^ 2;
t70 = t77 ^ 2;
t96 = t69 + t70;
t95 = t46 * t122;
t41 = t46 * qJ(6);
t1 = t41 + t4;
t94 = t35 ^ 2 + t37 ^ 2;
t93 = t74 * t99;
t91 = t10 * t73 - t76 * t8;
t90 = -t37 * t20 + t22 * t35;
t89 = t35 * t52 + t54 * t37;
t2 = -t42 + t91;
t18 = pkin(4) * t102 + t28;
t87 = -pkin(3) * t48 - pkin(8) * t46;
t86 = -pkin(5) * t52 + qJ(6) * t54;
t12 = t26 * t74 + t100;
t85 = t11 * t77 + t12 * t74;
t84 = -t11 * t74 + t12 * t77;
t83 = 0.2e1 * t35 * t54 - 0.2e1 * t37 * t52;
t80 = 0.2e1 * pkin(5);
t78 = 0.2e1 * qJ(6);
t63 = pkin(5) + t111;
t60 = t66 + qJ(6);
t44 = t48 ^ 2;
t40 = t77 * t46;
t27 = t65 - t86;
t19 = t22 ^ 2;
t16 = t22 * t54;
t14 = t22 * t116;
t5 = pkin(5) * t20 - qJ(6) * t22 + t18;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t67, t71 * t113, 0, t68, 0, 0, pkin(1) * t113, -0.2e1 * pkin(1) * t71, 0.2e1 * t97 * qJ(2), t97 * qJ(2) ^ 2 + pkin(1) ^ 2, t44, t95, 0, t43, 0, 0, t46 * t115, t48 * t115, 0.2e1 * t28 * t48 - 0.2e1 * t30 * t46, t30 ^ 2 + t61 ^ 2 + t118, t70 * t44, -0.2e1 * t44 * t101, t99 * t116, t69 * t44, t74 * t95, t43, 0.2e1 * t28 * t102 + 0.2e1 * t11 * t46, -0.2e1 * t12 * t46 + 0.2e1 * t28 * t99, t85 * t122, t11 ^ 2 + t12 ^ 2 + t118, t19, -0.2e1 * t108, t14, t119, -0.2e1 * t105, t43, 0.2e1 * t18 * t20 - 0.2e1 * t46 * t91, 0.2e1 * t18 * t22 - 0.2e1 * t4 * t46, -0.2e1 * t20 * t4 + 0.2e1 * t22 * t91, t18 ^ 2 + t4 ^ 2 + t91 ^ 2, t19, t14, 0.2e1 * t108, t43, 0.2e1 * t105, t119, -0.2e1 * t2 * t46 + 0.2e1 * t20 * t5, -0.2e1 * t1 * t20 + 0.2e1 * t2 * t22, 0.2e1 * t1 * t46 - 0.2e1 * t22 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t72, t71, 0, -pkin(1), 0, 0, 0, 0, 0, 0, t46, t48, 0, t61, 0, 0, 0, 0, 0, 0, t40, -t103, -t96 * t48, t85, 0, 0, 0, 0, 0, 0, -t31, -t32, t121, t4 * t54 + t52 * t91, 0, 0, 0, 0, 0, 0, -t31, t121, t32, t1 * t54 + t2 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, 0, -t28, -t30, 0, 0, t93 (-t69 + t70) * t48, t103, -t93, t40, 0, -t28 * t77 + t87 * t74, t28 * t74 + t87 * t77, t84, -t28 * pkin(3) + t84 * pkin(8), t16, -t123, t32, t109, -t31, 0, t18 * t52 + t20 * t65 - t107, t18 * t54 + t22 * t65 - t106, -t4 * t52 + t54 * t91 + t90, t18 * t65 + t35 * t91 + t37 * t4, t16, t32, t123, 0, t31, t109, t20 * t27 + t5 * t52 - t107, -t1 * t52 + t2 * t54 + t90, -t22 * t27 - t5 * t54 + t106, t1 * t37 + t2 * t35 + t27 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, 0.2e1 * t101, 0, t70, 0, 0, 0.2e1 * pkin(3) * t77, -0.2e1 * pkin(3) * t74, 0.2e1 * t96 * pkin(8), t96 * pkin(8) ^ 2 + pkin(3) ^ 2, t51, -0.2e1 * t34, 0, t117, 0, 0, t52 * t114, t54 * t114, t83, t65 ^ 2 + t94, t51, 0, 0.2e1 * t34, 0, 0, t117, 0.2e1 * t27 * t52, t83, -0.2e1 * t27 * t54, t27 ^ 2 + t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, -t102, t46, t11, -t12, 0, 0, 0, 0, t22, 0, -t20, t46, t46 * t111 - t91, -t46 * t66 - t4 (-t20 * t73 - t22 * t76) * pkin(4) (t4 * t73 - t76 * t91) * pkin(4), 0, t22, 0, t46, t20, 0, t46 * t63 - t2, -t20 * t60 - t22 * t63, t46 * t60 + t1, t1 * t60 - t2 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t74, 0, 0, 0, 0, 0, 0, 0, 0, -t52, -t54, 0 (-t52 * t76 + t54 * t73) * pkin(4), 0, 0, 0, 0, 0, 0, -t52, 0, t54, -t52 * t63 + t54 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t77, 0, -t74 * pkin(8), -t77 * pkin(8), 0, 0, 0, 0, t54, 0, -t52, 0, -t35, -t37 (-t52 * t73 - t54 * t76) * pkin(4) (-t35 * t76 + t37 * t73) * pkin(4), 0, t54, 0, 0, t52, 0, -t35, -t52 * t60 - t54 * t63, t37, -t35 * t63 + t37 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t111, -0.2e1 * t66, 0 (t73 ^ 2 + t76 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t63, 0, 0.2e1 * t60, t60 ^ 2 + t63 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, -t20, t46, -t91, -t4, 0, 0, 0, t22, 0, t46, t20, 0, -t2 + t42, -pkin(5) * t22 - qJ(6) * t20, 0.2e1 * t41 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t52, -t54, 0, 0, 0, 0, 0, 0, 0, 0, -t52, 0, t54, t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, 0, -t35, -t37, 0, 0, 0, t54, 0, 0, t52, 0, -t35, -pkin(5) * t54 - qJ(6) * t52, t37, -pkin(5) * t35 + qJ(6) * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t111, -t66, 0, 0, 0, 0, 0, 1, 0, 0, t80 + t111, 0, t78 + t66, pkin(5) * t63 + qJ(6) * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t80, 0, t78, pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t22, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
