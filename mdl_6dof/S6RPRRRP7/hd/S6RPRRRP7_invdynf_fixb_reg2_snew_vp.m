% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP7_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:44:54
% EndTime: 2019-05-06 01:45:04
% DurationCPUTime: 10.62s
% Computational Cost: add. (41512->311), mult. (98443->384), div. (0->0), fcn. (75878->10), ass. (0->217)
t2430 = sin(pkin(10));
t2431 = cos(pkin(10));
t2435 = sin(qJ(3));
t2439 = cos(qJ(3));
t2458 = t2430 * t2439 + t2431 * t2435;
t2411 = t2458 * qJD(1);
t2405 = t2411 * qJD(3);
t2424 = t2431 * qJDD(1);
t2465 = t2430 * qJDD(1);
t2459 = -t2439 * t2424 + t2435 * t2465;
t2455 = t2405 + t2459;
t2452 = qJDD(4) + t2455;
t2449 = qJDD(5) + t2452;
t2434 = sin(qJ(4));
t2438 = cos(qJ(4));
t2396 = -t2438 * qJD(3) + t2411 * t2434;
t2397 = qJD(3) * t2434 + t2411 * t2438;
t2433 = sin(qJ(5));
t2437 = cos(qJ(5));
t2372 = t2396 * t2437 + t2397 * t2433;
t2374 = -t2396 * t2433 + t2397 * t2437;
t2474 = t2372 * t2374;
t2330 = t2449 + t2474;
t2371 = t2374 ^ 2;
t2409 = (t2430 * t2435 - t2431 * t2439) * qJD(1);
t2406 = qJD(4) + t2409;
t2402 = qJD(5) + t2406;
t2482 = t2402 ^ 2;
t2492 = -t2371 - t2482;
t2290 = t2330 * t2433 - t2437 * t2492;
t2292 = t2330 * t2437 + t2433 * t2492;
t2277 = t2290 * t2434 - t2292 * t2438;
t2470 = t2409 * qJD(3);
t2490 = t2458 * qJDD(1);
t2392 = t2490 - t2470;
t2456 = -t2434 * qJDD(3) - t2438 * t2392;
t2363 = -qJD(4) * t2396 - t2456;
t2457 = t2438 * qJDD(3) - t2434 * t2392;
t2450 = -qJD(4) * t2397 + t2457;
t2447 = -t2372 * qJD(5) + t2437 * t2363 + t2433 * t2450;
t2473 = t2372 * t2402;
t2446 = t2447 - t2473;
t2253 = t2277 * t2435 - t2439 * t2446;
t2255 = t2277 * t2439 + t2435 * t2446;
t2228 = t2253 * t2430 - t2255 * t2431;
t2263 = t2290 * t2438 + t2292 * t2434;
t2436 = sin(qJ(1));
t2440 = cos(qJ(1));
t2516 = t2228 * t2436 - t2263 * t2440;
t2515 = t2228 * t2440 + t2263 * t2436;
t2230 = t2253 * t2431 + t2255 * t2430;
t2299 = t2447 + t2473;
t2462 = t2433 * t2363 - t2437 * t2450;
t2451 = (-qJD(5) + t2402) * t2374 - t2462;
t2487 = t2299 * t2433 + t2437 * t2451;
t2488 = -t2437 * t2299 + t2433 * t2451;
t2495 = t2434 * t2487 + t2438 * t2488;
t2340 = t2372 ^ 2;
t2317 = t2371 + t2340;
t2496 = -t2434 * t2488 + t2438 * t2487;
t2501 = -t2317 * t2435 + t2439 * t2496;
t2502 = t2317 * t2439 + t2435 * t2496;
t2506 = -t2430 * t2502 + t2431 * t2501;
t2512 = t2436 * t2506 - t2440 * t2495;
t2511 = t2436 * t2495 + t2440 * t2506;
t2331 = t2449 - t2474;
t2491 = -t2482 - t2340;
t2497 = -t2331 * t2433 + t2437 * t2491;
t2498 = t2437 * t2331 + t2433 * t2491;
t2500 = -t2434 * t2498 + t2438 * t2497;
t2510 = t2435 * t2500;
t2499 = t2434 * t2497 + t2438 * t2498;
t2509 = t2436 * t2499;
t2508 = t2439 * t2500;
t2507 = t2440 * t2499;
t2505 = t2430 * t2501 + t2431 * t2502;
t2441 = qJD(1) ^ 2;
t2418 = t2436 * g(1) - t2440 * g(2);
t2460 = -qJDD(2) + t2418;
t2463 = pkin(2) * t2431 + pkin(1);
t2427 = t2430 ^ 2;
t2428 = t2431 ^ 2;
t2466 = t2427 + t2428;
t2387 = t2463 * qJDD(1) + (pkin(7) * t2466 + qJ(2)) * t2441 + t2460;
t2415 = t2466 * t2441;
t2485 = qJD(3) ^ 2;
t2484 = t2396 ^ 2;
t2483 = t2397 ^ 2;
t2481 = t2406 ^ 2;
t2480 = t2409 ^ 2;
t2479 = t2411 ^ 2;
t2478 = t2431 * g(3);
t2477 = qJD(2) * qJD(1);
t2472 = t2396 * t2397;
t2471 = t2406 * t2396;
t2469 = t2409 * t2411;
t2468 = t2428 * t2441;
t2467 = qJD(4) - t2406;
t2461 = t2440 * g(1) + t2436 * g(2);
t2448 = -t2441 * pkin(1) + qJDD(1) * qJ(2) - t2461;
t2394 = -g(3) * t2430 + (t2448 + 0.2e1 * t2477) * t2431;
t2381 = -pkin(2) * t2468 + pkin(7) * t2424 + t2394;
t2464 = -0.2e1 * t2477;
t2445 = -t2478 + (t2464 + t2463 * t2441 + (-pkin(7) - qJ(2)) * qJDD(1) + t2461) * t2430;
t2348 = t2439 * t2381 + t2435 * t2445;
t2385 = pkin(3) * t2409 - pkin(8) * t2411;
t2329 = -pkin(3) * t2485 + qJDD(3) * pkin(8) - t2385 * t2409 + t2348;
t2334 = (-t2392 + t2470) * pkin(8) + (t2455 + t2405) * pkin(3) - t2387;
t2289 = t2438 * t2329 + t2434 * t2334;
t2380 = pkin(4) * t2406 - pkin(9) * t2397;
t2282 = -pkin(4) * t2484 + pkin(9) * t2450 - t2406 * t2380 + t2289;
t2288 = -t2434 * t2329 + t2438 * t2334;
t2349 = t2452 - t2472;
t2444 = (-t2363 - t2471) * pkin(9) + t2349 * pkin(4) + t2288;
t2247 = t2437 * t2282 + t2433 * t2444;
t2246 = -t2433 * t2282 + t2437 * t2444;
t2347 = -t2435 * t2381 + t2439 * t2445;
t2454 = -qJD(5) * t2374 - t2462;
t2328 = -qJDD(3) * pkin(3) - pkin(8) * t2485 + t2411 * t2385 - t2347;
t2285 = -t2450 * pkin(4) - t2484 * pkin(9) + t2397 * t2380 + t2328;
t2420 = t2430 * t2441 * t2431;
t2417 = -qJDD(1) * t2436 - t2440 * t2441;
t2416 = qJDD(1) * t2440 - t2436 * t2441;
t2414 = t2466 * qJDD(1);
t2413 = t2431 * t2415;
t2412 = t2430 * t2415;
t2407 = qJDD(1) * pkin(1) + t2441 * qJ(2) + t2460;
t2399 = -t2479 - t2485;
t2393 = -t2478 + (-t2448 + t2464) * t2430;
t2391 = t2490 - 0.2e1 * t2470;
t2390 = 0.2e1 * t2405 + t2459;
t2389 = -qJDD(3) - t2469;
t2388 = qJDD(3) - t2469;
t2386 = -t2480 - t2485;
t2376 = -t2479 - t2480;
t2375 = -t2455 + t2405;
t2369 = -t2481 - t2483;
t2368 = t2389 * t2439 - t2399 * t2435;
t2367 = t2389 * t2435 + t2399 * t2439;
t2366 = -t2481 - t2484;
t2365 = -t2393 * t2430 + t2394 * t2431;
t2364 = t2393 * t2431 + t2394 * t2430;
t2356 = -t2483 - t2484;
t2355 = t2375 * t2439 + t2435 * t2490;
t2354 = t2375 * t2435 - t2439 * t2490;
t2352 = t2386 * t2439 - t2388 * t2435;
t2351 = t2386 * t2435 + t2388 * t2439;
t2350 = -t2452 - t2472;
t2344 = t2396 * t2467 + t2456;
t2343 = t2363 - t2471;
t2342 = -t2397 * t2467 + t2457;
t2341 = (qJD(4) + t2406) * t2397 - t2457;
t2339 = pkin(5) * t2372 - qJ(6) * t2374;
t2338 = -t2367 * t2430 + t2368 * t2431;
t2337 = t2367 * t2431 + t2368 * t2430;
t2326 = t2350 * t2438 - t2369 * t2434;
t2325 = t2350 * t2434 + t2369 * t2438;
t2323 = -t2354 * t2430 + t2355 * t2431;
t2322 = t2354 * t2431 + t2355 * t2430;
t2321 = -t2349 * t2434 + t2366 * t2438;
t2320 = t2349 * t2438 + t2366 * t2434;
t2319 = -t2351 * t2430 + t2352 * t2431;
t2318 = t2351 * t2431 + t2352 * t2430;
t2315 = -t2347 * t2435 + t2348 * t2439;
t2314 = t2347 * t2439 + t2348 * t2435;
t2311 = t2342 * t2438 - t2344 * t2434;
t2310 = t2342 * t2434 + t2344 * t2438;
t2305 = t2326 * t2439 + t2343 * t2435;
t2304 = t2326 * t2435 - t2343 * t2439;
t2303 = t2321 * t2439 + t2341 * t2435;
t2302 = t2321 * t2435 - t2341 * t2439;
t2296 = t2402 * t2374 - t2454;
t2295 = (qJD(5) + t2402) * t2374 + t2462;
t2287 = t2311 * t2439 + t2356 * t2435;
t2286 = t2311 * t2435 - t2356 * t2439;
t2284 = -t2314 * t2430 + t2315 * t2431;
t2283 = t2314 * t2431 + t2315 * t2430;
t2274 = -t2304 * t2430 + t2305 * t2431;
t2273 = t2304 * t2431 + t2305 * t2430;
t2268 = -t2302 * t2430 + t2303 * t2431;
t2267 = t2302 * t2431 + t2303 * t2430;
t2262 = -t2288 * t2434 + t2289 * t2438;
t2261 = t2288 * t2438 + t2289 * t2434;
t2260 = -t2286 * t2430 + t2287 * t2431;
t2259 = t2286 * t2431 + t2287 * t2430;
t2258 = t2262 * t2439 + t2328 * t2435;
t2257 = t2262 * t2435 - t2328 * t2439;
t2256 = t2296 * t2435 + t2508;
t2254 = -t2296 * t2439 + t2510;
t2252 = t2295 * t2435 + t2508;
t2250 = -t2295 * t2439 + t2510;
t2248 = -t2454 * pkin(5) + (pkin(5) * t2402 - (2 * qJD(6))) * t2374 + t2285 - t2446 * qJ(6);
t2241 = -pkin(5) * t2449 - qJ(6) * t2482 + t2374 * t2339 + qJDD(6) - t2246;
t2240 = -pkin(5) * t2482 + qJ(6) * t2449 + 0.2e1 * qJD(6) * t2402 - t2372 * t2339 + t2247;
t2235 = -t2257 * t2430 + t2258 * t2431;
t2234 = t2257 * t2431 + t2258 * t2430;
t2233 = -t2254 * t2430 + t2256 * t2431;
t2231 = t2254 * t2431 + t2256 * t2430;
t2229 = -t2250 * t2430 + t2252 * t2431;
t2227 = t2250 * t2431 + t2252 * t2430;
t2225 = -t2246 * t2433 + t2247 * t2437;
t2224 = t2246 * t2437 + t2247 * t2433;
t2223 = t2240 * t2437 + t2241 * t2433;
t2222 = t2240 * t2433 - t2241 * t2437;
t2217 = -t2224 * t2434 + t2225 * t2438;
t2216 = t2224 * t2438 + t2225 * t2434;
t2215 = t2217 * t2439 + t2285 * t2435;
t2214 = t2217 * t2435 - t2285 * t2439;
t2213 = -t2222 * t2434 + t2223 * t2438;
t2212 = t2222 * t2438 + t2223 * t2434;
t2211 = t2213 * t2439 + t2248 * t2435;
t2210 = t2213 * t2435 - t2248 * t2439;
t2209 = -t2214 * t2430 + t2215 * t2431;
t2208 = t2214 * t2431 + t2215 * t2430;
t2207 = -t2210 * t2430 + t2211 * t2431;
t2206 = t2210 * t2431 + t2211 * t2430;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2417, -t2416, 0, -t2418 * t2436 - t2440 * t2461, 0, 0, 0, 0, 0, 0, -t2413 * t2440 - t2424 * t2436, t2412 * t2440 + t2436 * t2465, t2414 * t2440 - t2415 * t2436, t2365 * t2440 - t2407 * t2436, 0, 0, 0, 0, 0, 0, t2319 * t2440 + t2390 * t2436, t2338 * t2440 + t2391 * t2436, t2323 * t2440 + t2376 * t2436, t2284 * t2440 - t2387 * t2436, 0, 0, 0, 0, 0, 0, t2268 * t2440 + t2320 * t2436, t2274 * t2440 + t2325 * t2436, t2260 * t2440 + t2310 * t2436, t2235 * t2440 + t2261 * t2436, 0, 0, 0, 0, 0, 0, t2229 * t2440 + t2509, -t2515, t2511, t2209 * t2440 + t2216 * t2436, 0, 0, 0, 0, 0, 0, t2233 * t2440 + t2509, t2511, t2515, t2207 * t2440 + t2212 * t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2416, t2417, 0, t2418 * t2440 - t2436 * t2461, 0, 0, 0, 0, 0, 0, -t2413 * t2436 + t2424 * t2440, t2412 * t2436 - t2440 * t2465, t2414 * t2436 + t2415 * t2440, t2365 * t2436 + t2407 * t2440, 0, 0, 0, 0, 0, 0, t2319 * t2436 - t2390 * t2440, t2338 * t2436 - t2391 * t2440, t2323 * t2436 - t2376 * t2440, t2284 * t2436 + t2387 * t2440, 0, 0, 0, 0, 0, 0, t2268 * t2436 - t2320 * t2440, t2274 * t2436 - t2325 * t2440, t2260 * t2436 - t2310 * t2440, t2235 * t2436 - t2261 * t2440, 0, 0, 0, 0, 0, 0, t2229 * t2436 - t2507, -t2516, t2512, t2209 * t2436 - t2216 * t2440, 0, 0, 0, 0, 0, 0, t2233 * t2436 - t2507, t2512, t2516, t2207 * t2436 - t2212 * t2440; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2364, 0, 0, 0, 0, 0, 0, t2318, t2337, t2322, t2283, 0, 0, 0, 0, 0, 0, t2267, t2273, t2259, t2234, 0, 0, 0, 0, 0, 0, t2227, t2230, t2505, t2208, 0, 0, 0, 0, 0, 0, t2231, t2505, -t2230, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2441, -qJDD(1), 0, -t2461, 0, 0, 0, 0, 0, 0, -t2413, t2412, t2414, t2365, 0, 0, 0, 0, 0, 0, t2319, t2338, t2323, t2284, 0, 0, 0, 0, 0, 0, t2268, t2274, t2260, t2235, 0, 0, 0, 0, 0, 0, t2229, -t2228, t2506, t2209, 0, 0, 0, 0, 0, 0, t2233, t2506, t2228, t2207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2441, 0, t2418, 0, 0, 0, 0, 0, 0, t2424, -t2465, t2415, t2407, 0, 0, 0, 0, 0, 0, -t2390, -t2391, -t2376, t2387, 0, 0, 0, 0, 0, 0, -t2320, -t2325, -t2310, -t2261, 0, 0, 0, 0, 0, 0, -t2499, t2263, -t2495, -t2216, 0, 0, 0, 0, 0, 0, -t2499, -t2495, -t2263, -t2212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2364, 0, 0, 0, 0, 0, 0, t2318, t2337, t2322, t2283, 0, 0, 0, 0, 0, 0, t2267, t2273, t2259, t2234, 0, 0, 0, 0, 0, 0, t2227, t2230, t2505, t2208, 0, 0, 0, 0, 0, 0, t2231, t2505, -t2230, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2468, t2420, t2424, t2394, 0, 0, 0, 0, 0, 0, t2352, t2368, t2355, t2315, 0, 0, 0, 0, 0, 0, t2303, t2305, t2287, t2258, 0, 0, 0, 0, 0, 0, t2252, t2255, t2501, t2215, 0, 0, 0, 0, 0, 0, t2256, t2501, -t2255, t2211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2420, -t2427 * t2441, -t2465, t2393, 0, 0, 0, 0, 0, 0, t2351, t2367, t2354, t2314, 0, 0, 0, 0, 0, 0, t2302, t2304, t2286, t2257, 0, 0, 0, 0, 0, 0, t2250, t2253, t2502, t2214, 0, 0, 0, 0, 0, 0, t2254, t2502, -t2253, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2424, t2465, -t2415, -t2407, 0, 0, 0, 0, 0, 0, t2390, t2391, t2376, -t2387, 0, 0, 0, 0, 0, 0, t2320, t2325, t2310, t2261, 0, 0, 0, 0, 0, 0, t2499, -t2263, t2495, t2216, 0, 0, 0, 0, 0, 0, t2499, t2495, t2263, t2212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2386, t2389, t2375, t2348, 0, 0, 0, 0, 0, 0, t2321, t2326, t2311, t2262, 0, 0, 0, 0, 0, 0, t2500, t2277, t2496, t2217, 0, 0, 0, 0, 0, 0, t2500, t2496, -t2277, t2213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2388, t2399, -t2490, t2347, 0, 0, 0, 0, 0, 0, -t2341, -t2343, -t2356, -t2328, 0, 0, 0, 0, 0, 0, -t2295, -t2446, t2317, -t2285, 0, 0, 0, 0, 0, 0, -t2296, t2317, t2446, -t2248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2390, t2391, t2376, -t2387, 0, 0, 0, 0, 0, 0, t2320, t2325, t2310, t2261, 0, 0, 0, 0, 0, 0, t2499, -t2263, t2495, t2216, 0, 0, 0, 0, 0, 0, t2499, t2495, t2263, t2212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2366, t2350, t2342, t2289, 0, 0, 0, 0, 0, 0, t2497, -t2292, t2487, t2225, 0, 0, 0, 0, 0, 0, t2497, t2487, t2292, t2223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2349, t2369, t2344, t2288, 0, 0, 0, 0, 0, 0, t2498, -t2290, t2488, t2224, 0, 0, 0, 0, 0, 0, t2498, t2488, t2290, t2222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2341, t2343, t2356, t2328, 0, 0, 0, 0, 0, 0, t2295, t2446, -t2317, t2285, 0, 0, 0, 0, 0, 0, t2296, -t2317, -t2446, t2248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2491, -t2330, t2451, t2247, 0, 0, 0, 0, 0, 0, t2491, t2451, t2330, t2240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2331, t2492, -t2299, t2246, 0, 0, 0, 0, 0, 0, t2331, -t2299, -t2492, -t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2295, t2446, -t2317, t2285, 0, 0, 0, 0, 0, 0, t2296, -t2317, -t2446, t2248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2491, t2451, t2330, t2240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2296, -t2317, -t2446, t2248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2331, t2299, t2492, t2241;];
f_new_reg  = t1;
