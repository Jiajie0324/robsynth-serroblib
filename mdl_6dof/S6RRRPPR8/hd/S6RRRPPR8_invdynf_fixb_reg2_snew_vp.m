% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 06:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR8_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 06:19:25
% EndTime: 2019-05-07 06:19:35
% DurationCPUTime: 11.02s
% Computational Cost: add. (25201->337), mult. (55300->391), div. (0->0), fcn. (42575->10), ass. (0->229)
t2687 = sin(qJ(3));
t2691 = cos(qJ(3));
t2685 = cos(pkin(6));
t2742 = qJD(1) * t2685 + qJD(2);
t2684 = sin(pkin(6));
t2688 = sin(qJ(2));
t2754 = t2684 * t2688;
t2746 = qJD(1) * t2754;
t2644 = t2687 * t2746 - t2691 * t2742;
t2646 = t2687 * t2742 + t2691 * t2746;
t2612 = t2646 * t2644;
t2676 = qJD(2) * t2746;
t2692 = cos(qJ(2));
t2747 = qJDD(1) * t2692;
t2735 = t2684 * t2747 - t2676;
t2652 = -qJDD(3) + t2735;
t2595 = t2652 - t2612;
t2643 = t2646 ^ 2;
t2753 = t2684 * t2692;
t2745 = qJD(1) * t2753;
t2672 = -qJD(3) + t2745;
t2766 = t2672 ^ 2;
t2774 = -t2643 - t2766;
t2558 = t2595 * t2687 + t2691 * t2774;
t2561 = t2595 * t2691 - t2687 * t2774;
t2627 = t2672 * t2644;
t2748 = qJDD(1) * t2684;
t2657 = qJD(2) * t2745 + t2688 * t2748;
t2739 = qJDD(1) * t2685 + qJDD(2);
t2704 = -t2691 * t2657 - t2687 * t2739;
t2700 = -t2644 * qJD(3) - t2704;
t2777 = t2627 + t2700;
t2719 = t2561 * t2688 - t2692 * t2777;
t2515 = -t2684 * t2558 + t2685 * t2719;
t2531 = t2561 * t2692 + t2688 * t2777;
t2689 = sin(qJ(1));
t2693 = cos(qJ(1));
t2822 = t2515 * t2689 - t2531 * t2693;
t2821 = t2515 * t2693 + t2531 * t2689;
t2603 = t2646 * qJD(3) + t2687 * t2657 - t2691 * t2739;
t2630 = t2646 * t2672;
t2775 = -t2630 + t2603;
t2767 = t2644 ^ 2;
t2773 = -t2767 - t2766;
t2778 = t2612 + t2652;
t2791 = t2778 * t2687 + t2773 * t2691;
t2796 = t2688 * t2775 + t2692 * t2791;
t2560 = -t2773 * t2687 + t2691 * t2778;
t2798 = t2688 * t2791 - t2692 * t2775;
t2803 = t2684 * t2560 + t2685 * t2798;
t2823 = t2689 * t2803 - t2693 * t2796;
t2814 = t2689 * t2796 + t2693 * t2803;
t2512 = t2685 * t2558 + t2684 * t2719;
t2804 = -t2685 * t2560 + t2684 * t2798;
t2584 = (t2672 + qJD(3)) * t2644 + t2704;
t2776 = -t2630 - t2603;
t2780 = t2691 * t2776;
t2790 = -t2584 * t2687 + t2780;
t2592 = t2643 + t2767;
t2794 = t2592 * t2688;
t2795 = t2692 * t2790 - t2794;
t2782 = t2687 * t2776;
t2792 = t2691 * t2584 + t2782;
t2793 = t2592 * t2692;
t2797 = t2688 * t2790 + t2793;
t2805 = -t2684 * t2792 + t2685 * t2797;
t2815 = -t2689 * t2805 + t2693 * t2795;
t2813 = t2689 * t2795 + t2693 * t2805;
t2806 = t2684 * t2797 + t2685 * t2792;
t2694 = qJD(1) ^ 2;
t2789 = t2684 * t2694;
t2738 = t2742 ^ 2;
t2675 = -g(1) * t2693 - g(2) * t2689;
t2653 = -pkin(1) * t2694 + pkin(8) * t2748 + t2675;
t2674 = t2689 * g(1) - t2693 * g(2);
t2702 = qJDD(1) * pkin(1) + pkin(8) * t2789 + t2674;
t2699 = t2685 * t2702;
t2740 = t2688 * t2653 - t2692 * t2699;
t2761 = (-pkin(2) * t2692 - pkin(9) * t2688) * t2789;
t2570 = (g(3) * t2692 + t2688 * t2761) * t2684 - t2739 * pkin(2) - t2738 * pkin(9) + t2740;
t2784 = t2603 * pkin(3) - qJ(4) * t2777 + t2570;
t2783 = t2627 - t2700;
t2736 = pkin(4) * t2672 - qJ(5) * t2646;
t2771 = -t2767 * qJ(5) + t2646 * t2736 + qJDD(5);
t2686 = sin(qJ(6));
t2690 = cos(qJ(6));
t2617 = t2644 * t2686 - t2690 * t2672;
t2770 = t2617 ^ 2;
t2619 = t2644 * t2690 + t2672 * t2686;
t2769 = t2619 ^ 2;
t2640 = qJD(6) + t2646;
t2768 = t2640 ^ 2;
t2765 = -2 * qJD(4);
t2764 = t2685 * g(3);
t2762 = t2652 * qJ(4);
t2756 = t2619 * t2617;
t2755 = t2684 ^ 2 * t2694;
t2752 = qJD(6) - t2640;
t2751 = qJD(6) + t2640;
t2749 = t2692 * t2653 + t2688 * t2699;
t2571 = t2739 * pkin(9) - t2738 * pkin(2) + (-g(3) * t2688 + t2692 * t2761) * t2684 + t2749;
t2734 = qJD(1) * t2742;
t2706 = t2688 * t2734;
t2707 = t2692 * t2734;
t2695 = t2676 * pkin(2) - t2657 * pkin(9) - t2764 + (-pkin(9) * t2707 + (t2706 - t2747) * pkin(2) - t2702) * t2684;
t2535 = t2691 * t2571 + t2687 * t2695;
t2610 = pkin(3) * t2644 - qJ(4) * t2646;
t2750 = -t2610 + (2 * qJD(5));
t2744 = -pkin(3) * t2766 + t2535;
t2743 = -t2768 - t2769;
t2534 = -t2687 * t2571 + t2691 * t2695;
t2741 = -t2686 * t2603 + t2690 * t2652;
t2737 = pkin(4) * t2644 - t2750;
t2483 = 0.2e1 * qJD(4) * t2646 + t2700 * pkin(5) + (-pkin(4) - pkin(10)) * t2603 + (t2644 * pkin(5) + (pkin(3) + pkin(10)) * t2646) * t2672 + t2771 - t2784;
t2611 = pkin(5) * t2646 - pkin(10) * t2644;
t2705 = t2652 * pkin(3) - qJ(4) * t2766 + qJDD(4) - t2534;
t2701 = t2652 * pkin(4) + qJ(5) * t2783 + t2705;
t2484 = -t2766 * pkin(5) + t2652 * pkin(10) + (-t2611 + t2737) * t2646 + t2701;
t2468 = t2483 * t2686 + t2484 * t2690;
t2730 = t2483 * t2690 - t2484 * t2686;
t2459 = t2468 * t2690 - t2686 * t2730;
t2697 = t2603 * qJ(5) + (t2765 - t2736) * t2672 - t2767 * pkin(4) + t2744;
t2485 = -t2766 * pkin(10) + (-pkin(5) - qJ(4)) * t2652 + (t2611 + t2750) * t2644 + t2697;
t2457 = t2459 * t2687 + t2485 * t2691;
t2458 = t2686 * t2468 + t2690 * t2730;
t2733 = t2457 * t2688 + t2458 * t2692;
t2489 = t2646 * t2737 + t2701;
t2490 = t2644 * t2750 + t2697 - t2762;
t2474 = t2489 * t2687 + t2490 * t2691;
t2520 = (-pkin(3) * t2672 + t2765) * t2646 + t2784;
t2497 = t2603 * pkin(4) + t2520 - t2771;
t2732 = t2474 * t2688 - t2497 * t2692;
t2518 = -t2644 * t2610 + t2672 * t2765 + t2744 - t2762;
t2519 = t2610 * t2646 + t2705;
t2482 = t2518 * t2691 + t2519 * t2687;
t2731 = t2482 * t2688 - t2520 * t2692;
t2538 = -t2619 * t2752 + t2741;
t2716 = -t2690 * t2603 - t2686 * t2652;
t2703 = t2617 * t2752 + t2716;
t2505 = t2538 * t2690 - t2686 * t2703;
t2556 = -t2769 - t2770;
t2488 = t2505 * t2687 + t2556 * t2691;
t2504 = t2686 * t2538 + t2690 * t2703;
t2729 = t2488 * t2688 + t2504 * t2692;
t2564 = -t2768 - t2770;
t2698 = -qJDD(6) - t2700;
t2696 = -t2698 - t2756;
t2525 = t2564 * t2690 - t2686 * t2696;
t2537 = t2619 * t2751 - t2741;
t2499 = t2525 * t2687 + t2537 * t2691;
t2524 = t2686 * t2564 + t2690 * t2696;
t2728 = t2499 * t2688 + t2524 * t2692;
t2549 = t2698 - t2756;
t2527 = t2549 * t2690 - t2686 * t2743;
t2539 = -t2617 * t2751 - t2716;
t2501 = t2527 * t2687 + t2539 * t2691;
t2526 = t2686 * t2549 + t2690 * t2743;
t2727 = t2501 * t2688 + t2526 * t2692;
t2503 = -t2534 * t2687 + t2535 * t2691;
t2726 = t2503 * t2688 - t2570 * t2692;
t2544 = t2687 * t2783 - t2780;
t2724 = t2544 * t2688 - t2793;
t2607 = -g(3) * t2753 - t2740;
t2608 = -g(3) * t2754 + t2749;
t2715 = t2607 * t2692 + t2608 * t2688;
t2623 = t2684 * t2707 - t2657;
t2660 = t2684 * t2706;
t2624 = t2660 + t2735;
t2714 = t2623 * t2692 + t2624 * t2688;
t2682 = t2688 ^ 2;
t2638 = -t2682 * t2755 - t2738;
t2671 = t2692 * t2688 * t2755;
t2655 = t2671 - t2739;
t2713 = t2638 * t2692 + t2655 * t2688;
t2654 = t2671 + t2739;
t2683 = t2692 ^ 2;
t2658 = -t2683 * t2755 - t2738;
t2712 = t2654 * t2692 + t2658 * t2688;
t2670 = -qJDD(1) * t2689 - t2693 * t2694;
t2669 = qJDD(1) * t2693 - t2689 * t2694;
t2659 = (-t2682 - t2683) * t2755;
t2631 = -t2684 * t2702 - t2764;
t2625 = t2660 - t2735;
t2622 = t2742 * t2745 + t2657;
t2616 = -t2654 * t2688 + t2658 * t2692;
t2609 = -t2638 * t2688 + t2655 * t2692;
t2589 = -t2623 * t2688 + t2624 * t2692;
t2588 = -t2684 * t2625 + t2685 * t2712;
t2587 = t2685 * t2625 + t2684 * t2712;
t2574 = -t2684 * t2622 + t2685 * t2713;
t2573 = t2685 * t2622 + t2684 * t2713;
t2569 = -t2684 * t2659 + t2685 * t2714;
t2568 = t2685 * t2659 + t2684 * t2714;
t2557 = -t2607 * t2688 + t2608 * t2692;
t2547 = -t2684 * t2631 + t2685 * t2715;
t2546 = t2685 * t2631 + t2684 * t2715;
t2541 = -t2691 * t2783 - t2782;
t2522 = t2544 * t2692 + t2794;
t2502 = t2534 * t2691 + t2535 * t2687;
t2500 = -t2527 * t2691 + t2539 * t2687;
t2498 = -t2525 * t2691 + t2537 * t2687;
t2495 = -t2684 * t2541 + t2685 * t2724;
t2492 = t2685 * t2541 + t2684 * t2724;
t2487 = -t2505 * t2691 + t2556 * t2687;
t2486 = t2503 * t2692 + t2570 * t2688;
t2481 = t2518 * t2687 - t2519 * t2691;
t2480 = t2501 * t2692 - t2526 * t2688;
t2479 = t2499 * t2692 - t2524 * t2688;
t2478 = t2488 * t2692 - t2504 * t2688;
t2477 = -t2684 * t2502 + t2685 * t2726;
t2476 = t2685 * t2502 + t2684 * t2726;
t2475 = t2482 * t2692 + t2520 * t2688;
t2473 = -t2489 * t2691 + t2490 * t2687;
t2472 = -t2684 * t2500 + t2685 * t2727;
t2471 = t2685 * t2500 + t2684 * t2727;
t2470 = -t2684 * t2498 + t2685 * t2728;
t2469 = t2685 * t2498 + t2684 * t2728;
t2466 = -t2684 * t2487 + t2685 * t2729;
t2465 = t2685 * t2487 + t2684 * t2729;
t2464 = t2474 * t2692 + t2497 * t2688;
t2463 = -t2684 * t2481 + t2685 * t2731;
t2462 = t2685 * t2481 + t2684 * t2731;
t2461 = -t2684 * t2473 + t2685 * t2732;
t2460 = t2685 * t2473 + t2684 * t2732;
t2456 = -t2459 * t2691 + t2485 * t2687;
t2455 = t2457 * t2692 - t2458 * t2688;
t2454 = -t2684 * t2456 + t2685 * t2733;
t2453 = t2685 * t2456 + t2684 * t2733;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2670, -t2669, 0, -t2674 * t2689 + t2675 * t2693, 0, 0, 0, 0, 0, 0, -t2588 * t2689 + t2616 * t2693, -t2574 * t2689 + t2609 * t2693, -t2569 * t2689 + t2589 * t2693, -t2547 * t2689 + t2557 * t2693, 0, 0, 0, 0, 0, 0, -t2823, -t2822, t2815, -t2477 * t2689 + t2486 * t2693, 0, 0, 0, 0, 0, 0, -t2823, t2815, t2822, -t2463 * t2689 + t2475 * t2693, 0, 0, 0, 0, 0, 0, t2822, t2823, -t2495 * t2689 + t2522 * t2693, -t2461 * t2689 + t2464 * t2693, 0, 0, 0, 0, 0, 0, -t2470 * t2689 + t2479 * t2693, -t2472 * t2689 + t2480 * t2693, -t2466 * t2689 + t2478 * t2693, -t2454 * t2689 + t2455 * t2693; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2669, t2670, 0, t2674 * t2693 + t2675 * t2689, 0, 0, 0, 0, 0, 0, t2588 * t2693 + t2616 * t2689, t2574 * t2693 + t2609 * t2689, t2569 * t2693 + t2589 * t2689, t2547 * t2693 + t2557 * t2689, 0, 0, 0, 0, 0, 0, t2814, t2821, t2813, t2477 * t2693 + t2486 * t2689, 0, 0, 0, 0, 0, 0, t2814, t2813, -t2821, t2463 * t2693 + t2475 * t2689, 0, 0, 0, 0, 0, 0, -t2821, -t2814, t2495 * t2693 + t2522 * t2689, t2461 * t2693 + t2464 * t2689, 0, 0, 0, 0, 0, 0, t2470 * t2693 + t2479 * t2689, t2472 * t2693 + t2480 * t2689, t2466 * t2693 + t2478 * t2689, t2454 * t2693 + t2455 * t2689; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2587, t2573, t2568, t2546, 0, 0, 0, 0, 0, 0, t2804, t2512, t2806, t2476, 0, 0, 0, 0, 0, 0, t2804, t2806, -t2512, t2462, 0, 0, 0, 0, 0, 0, -t2512, -t2804, t2492, t2460, 0, 0, 0, 0, 0, 0, t2469, t2471, t2465, t2453; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2694, -qJDD(1), 0, t2675, 0, 0, 0, 0, 0, 0, t2616, t2609, t2589, t2557, 0, 0, 0, 0, 0, 0, t2796, t2531, t2795, t2486, 0, 0, 0, 0, 0, 0, t2796, t2795, -t2531, t2475, 0, 0, 0, 0, 0, 0, -t2531, -t2796, t2522, t2464, 0, 0, 0, 0, 0, 0, t2479, t2480, t2478, t2455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2694, 0, t2674, 0, 0, 0, 0, 0, 0, t2588, t2574, t2569, t2547, 0, 0, 0, 0, 0, 0, t2803, t2515, t2805, t2477, 0, 0, 0, 0, 0, 0, t2803, t2805, -t2515, t2463, 0, 0, 0, 0, 0, 0, -t2515, -t2803, t2495, t2461, 0, 0, 0, 0, 0, 0, t2470, t2472, t2466, t2454; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2587, t2573, t2568, t2546, 0, 0, 0, 0, 0, 0, t2804, t2512, t2806, t2476, 0, 0, 0, 0, 0, 0, t2804, t2806, -t2512, t2462, 0, 0, 0, 0, 0, 0, -t2512, -t2804, t2492, t2460, 0, 0, 0, 0, 0, 0, t2469, t2471, t2465, t2453; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2658, t2655, t2624, t2608, 0, 0, 0, 0, 0, 0, t2791, t2561, t2790, t2503, 0, 0, 0, 0, 0, 0, t2791, t2790, -t2561, t2482, 0, 0, 0, 0, 0, 0, -t2561, -t2791, t2544, t2474, 0, 0, 0, 0, 0, 0, t2499, t2501, t2488, t2457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2654, t2638, t2623, t2607, 0, 0, 0, 0, 0, 0, -t2775, -t2777, t2592, -t2570, 0, 0, 0, 0, 0, 0, -t2775, t2592, t2777, -t2520, 0, 0, 0, 0, 0, 0, t2777, t2775, -t2592, -t2497, 0, 0, 0, 0, 0, 0, t2524, t2526, t2504, t2458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2625, t2622, t2659, t2631, 0, 0, 0, 0, 0, 0, -t2560, t2558, t2792, t2502, 0, 0, 0, 0, 0, 0, -t2560, t2792, -t2558, t2481, 0, 0, 0, 0, 0, 0, -t2558, t2560, t2541, t2473, 0, 0, 0, 0, 0, 0, t2498, t2500, t2487, t2456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2773, t2595, t2776, t2535, 0, 0, 0, 0, 0, 0, t2773, t2776, -t2595, t2518, 0, 0, 0, 0, 0, 0, -t2595, -t2773, -t2776, t2490, 0, 0, 0, 0, 0, 0, t2537, t2539, t2556, t2485; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2778, t2774, t2584, t2534, 0, 0, 0, 0, 0, 0, -t2778, t2584, -t2774, -t2519, 0, 0, 0, 0, 0, 0, -t2774, t2778, -t2783, -t2489, 0, 0, 0, 0, 0, 0, -t2525, -t2527, -t2505, -t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2775, t2777, -t2592, t2570, 0, 0, 0, 0, 0, 0, t2775, -t2592, -t2777, t2520, 0, 0, 0, 0, 0, 0, -t2777, -t2775, t2592, t2497, 0, 0, 0, 0, 0, 0, -t2524, -t2526, -t2504, -t2458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2773, t2776, -t2595, t2518, 0, 0, 0, 0, 0, 0, -t2595, -t2773, -t2776, t2490, 0, 0, 0, 0, 0, 0, t2537, t2539, t2556, t2485; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2775, -t2592, -t2777, t2520, 0, 0, 0, 0, 0, 0, -t2777, -t2775, t2592, t2497, 0, 0, 0, 0, 0, 0, -t2524, -t2526, -t2504, -t2458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2778, -t2584, t2774, t2519, 0, 0, 0, 0, 0, 0, t2774, -t2778, t2783, t2489, 0, 0, 0, 0, 0, 0, t2525, t2527, t2505, t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2774, -t2778, t2783, t2489, 0, 0, 0, 0, 0, 0, t2525, t2527, t2505, t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2595, t2773, t2776, -t2490, 0, 0, 0, 0, 0, 0, -t2537, -t2539, -t2556, -t2485; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2777, t2775, -t2592, -t2497, 0, 0, 0, 0, 0, 0, t2524, t2526, t2504, t2458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2564, t2549, t2538, t2468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2696, t2743, t2703, t2730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2537, t2539, t2556, t2485;];
f_new_reg  = t1;
