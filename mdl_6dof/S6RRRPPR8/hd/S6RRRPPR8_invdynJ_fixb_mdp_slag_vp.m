% Calculate vector of inverse dynamics joint torques for
% S6RRRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPPR8_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPPR8_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR8_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR8_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR8_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR8_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR8_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRRPPR8_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:09:50
% EndTime: 2019-03-09 16:10:07
% DurationCPUTime: 11.99s
% Computational Cost: add. (6887->741), mult. (16811->924), div. (0->0), fcn. (13003->10), ass. (0->296)
t691 = sin(qJ(3));
t897 = -t691 * qJ(4) - pkin(2);
t688 = sin(pkin(6));
t695 = cos(qJ(2));
t812 = qJDD(1) * t695;
t662 = t688 * t812;
t692 = sin(qJ(2));
t814 = qJD(1) * qJD(2);
t790 = t692 * t814;
t896 = t688 * t790 - t662;
t599 = qJDD(3) + t896;
t878 = pkin(3) + pkin(4);
t810 = t878 * t599;
t813 = qJDD(1) * t692;
t788 = t688 * t813;
t789 = t695 * t814;
t895 = t688 * t789 + t788;
t825 = qJD(1) * t688;
t797 = t695 * t825;
t767 = t691 * t797;
t822 = qJD(3) * t691;
t894 = t767 - t822;
t640 = -qJD(3) + t797;
t869 = cos(pkin(6));
t786 = t869 * qJD(1);
t764 = pkin(1) * t786;
t604 = pkin(8) * t797 + t692 * t764;
t743 = t786 + qJD(2);
t557 = pkin(9) * t743 + t604;
t740 = -pkin(2) * t695 - pkin(9) * t692 - pkin(1);
t563 = t740 * t825;
t694 = cos(qJ(3));
t837 = t691 * t557 - t694 * t563;
t893 = qJD(4) + t837;
t876 = cos(qJ(1));
t760 = t869 * t876;
t875 = sin(qJ(1));
t619 = t692 * t760 + t695 * t875;
t800 = t688 * t876;
t546 = t619 * t691 + t694 * t800;
t618 = t692 * t875 - t695 * t760;
t690 = sin(qJ(6));
t693 = cos(qJ(6));
t892 = t546 * t690 + t618 * t693;
t891 = t546 * t693 - t618 * t690;
t726 = qJD(3) * t743;
t775 = t869 * qJDD(1);
t738 = t775 + qJDD(2);
t712 = t691 * t726 - t694 * t738;
t821 = qJD(3) * t694;
t823 = qJD(2) * t695;
t724 = t691 * t823 + t692 * t821;
t787 = t691 * t813;
t510 = (qJD(1) * t724 + t787) * t688 + t712;
t871 = pkin(9) - qJ(5);
t798 = t692 * t825;
t581 = t691 * t798 - t694 * t743;
t890 = -t510 * qJ(5) - t581 * qJD(5);
t601 = -pkin(8) * t798 + t695 * t764;
t757 = pkin(2) * t692 - pkin(9) * t695;
t602 = t757 * t825;
t834 = t694 * t601 + t691 * t602;
t514 = qJ(4) * t798 + t834;
t889 = -qJD(5) * t694 - t822 * t871 - t514;
t583 = t691 * t743 + t694 * t798;
t888 = -t583 * qJ(5) + t893;
t846 = t688 * t692;
t617 = t691 * t869 + t694 * t846;
t793 = t688 * t823;
t542 = qJD(3) * t617 + t691 * t793;
t795 = t692 * t822;
t766 = t688 * t795;
t543 = -t766 + (qJD(3) * t869 + t793) * t694;
t801 = pkin(1) * t869;
t845 = t688 * t695;
t719 = pkin(8) * t845 + t692 * t801;
t606 = t719 * qJD(2);
t481 = t542 * pkin(3) - t543 * qJ(4) - t617 * qJD(4) + t606;
t616 = t691 * t846 - t694 * t869;
t783 = -t616 * pkin(3) + t617 * qJ(4);
t585 = t691 * t601;
t779 = -t602 * t694 + t585;
t886 = -qJD(5) * t691 + t821 * t871 - t779;
t885 = (qJDD(2) + 0.2e1 * t775) * t688;
t884 = t691 * qJD(4) + t604 + (-t694 * t797 + t821) * qJ(4);
t556 = -t743 * pkin(2) - t601;
t493 = t581 * pkin(3) - t583 * qJ(4) + t556;
t872 = pkin(9) * t599;
t883 = t493 * t640 + t872;
t591 = t599 * qJ(4);
t626 = qJD(4) * t640;
t739 = qJD(2) * t764;
t761 = pkin(1) * t775;
t718 = pkin(8) * t896 - t692 * t761 - t695 * t739;
t523 = pkin(9) * t738 - t718;
t732 = t757 * qJD(2);
t526 = (qJD(1) * t732 + qJDD(1) * t740) * t688;
t772 = -t694 * t523 - t691 * t526 + t557 * t822 - t563 * t821;
t461 = t591 - t626 - t772;
t457 = -t461 + t890;
t455 = pkin(5) * t599 - t457;
t525 = t583 * pkin(3) + t581 * qJ(4);
t572 = qJD(6) + t583;
t547 = t619 * t694 - t691 * t800;
t759 = t869 * t875;
t621 = -t692 * t759 + t695 * t876;
t799 = t688 * t875;
t551 = t621 * t694 + t691 * t799;
t727 = g(1) * t551 + g(2) * t547 + g(3) * t617;
t877 = -pkin(4) - pkin(10);
t815 = pkin(3) - t877;
t882 = t572 * (-pkin(5) * t581 - qJD(6) * t815 + t583 * t877 - t525) - t455 + t727;
t580 = t583 ^ 2;
t879 = 0.2e1 * t591;
t697 = qJD(1) ^ 2;
t874 = pkin(3) * t599;
t873 = pkin(4) * t616;
t689 = qJ(4) + pkin(5);
t870 = pkin(9) * qJD(3);
t868 = qJ(4) * t510;
t770 = t691 * t738 + (t726 + t895) * t694;
t509 = qJD(1) * t766 - t770;
t867 = qJ(5) * t509;
t866 = qJ(5) * t616;
t818 = qJD(6) * t693;
t806 = t693 * t510 - t690 * t599 + t640 * t818;
t819 = qJD(6) * t690;
t471 = -t581 * t819 + t806;
t865 = t471 * t690;
t508 = t694 * t557 + t691 * t563;
t486 = qJ(5) * t581 + t508;
t628 = t640 * qJ(4);
t482 = -t486 + t628;
t864 = t482 * t640;
t500 = -t628 + t508;
t863 = t500 * t640;
t862 = t508 * t640;
t853 = t581 * t690;
t528 = -t693 * t640 + t853;
t861 = t528 * t572;
t860 = t528 * t581;
t859 = t528 * t640;
t530 = t581 * t693 + t640 * t690;
t858 = t530 * t572;
t857 = t530 * t581;
t856 = t530 * t640;
t855 = t581 * t583;
t854 = t581 * t640;
t852 = t583 * t640;
t849 = t618 * t694;
t620 = t692 * t876 + t695 * t759;
t848 = t620 * t694;
t684 = t688 ^ 2;
t847 = t684 * t697;
t505 = -qJDD(6) + t509;
t844 = t690 * t505;
t843 = t690 * t691;
t842 = t691 * t693;
t841 = t691 * t695;
t840 = t693 * t505;
t839 = t693 * t695;
t838 = t694 * t695;
t597 = pkin(9) * t869 + t719;
t828 = pkin(2) * t845 + pkin(9) * t846;
t598 = -pkin(1) * t688 - t828;
t836 = t694 * t597 + t691 * t598;
t835 = t878 * t894 + t884;
t833 = -(pkin(5) * t692 + qJ(5) * t841) * t825 + t889;
t832 = qJ(5) * t767 - t889;
t831 = -pkin(3) * t894 - t884;
t808 = qJ(5) * t838;
t830 = -(-t692 * t878 - t808) * t825 + t886;
t829 = -pkin(8) * t846 + t695 * t801;
t686 = t692 ^ 2;
t826 = -t695 ^ 2 + t686;
t824 = qJD(2) * t692;
t820 = qJD(4) * t695;
t667 = pkin(3) * t845;
t634 = -t694 * pkin(3) + t897;
t809 = qJ(4) * t845;
t807 = t695 * t847;
t804 = -pkin(3) * t849 + t618 * t897;
t803 = -pkin(3) * t848 + t620 * t897;
t596 = -t869 * pkin(2) - t829;
t796 = t688 * t824;
t794 = t688 * t820;
t791 = 0.2e1 * pkin(1) * t684;
t785 = -t546 * pkin(3) + qJ(4) * t547;
t550 = t621 * t691 - t694 * t799;
t784 = -t550 * pkin(3) + qJ(4) * t551;
t769 = pkin(8) * t895 + t692 * t739 - t695 * t761;
t524 = -t738 * pkin(2) + t769;
t463 = t510 * pkin(3) + t509 * qJ(4) - t583 * qJD(4) + t524;
t714 = qJDD(5) - t463;
t453 = -pkin(5) * t509 + t510 * t877 + t714;
t771 = t691 * t523 - t694 * t526 + t557 * t821 + t563 * t822;
t741 = qJDD(4) + t771;
t710 = -qJD(5) * t583 + t741 + t867;
t454 = -t599 * t815 + t710;
t782 = t693 * t453 - t690 * t454;
t781 = t510 * t690 + t693 * t599;
t780 = -t691 * t597 + t598 * t694;
t778 = t572 * t693;
t777 = t572 * t690;
t776 = t815 * t692;
t622 = t694 * pkin(4) - t634;
t773 = MDP(31) * t572;
t768 = t694 * t667 + t691 * t809 + t828;
t758 = t688 * t697 * t869;
t756 = g(1) * t546 - g(2) * t550;
t755 = -g(1) * t547 + g(2) * t551;
t754 = g(1) * t620 + g(2) * t618;
t753 = -g(1) * t618 + g(2) * t620;
t752 = -g(1) * t621 - g(2) * t619;
t513 = t667 - t780;
t733 = t690 * t841 + t692 * t693;
t561 = t733 * t825;
t751 = t690 * t822 - t561;
t723 = (-t690 * t692 + t691 * t839) * t688;
t562 = qJD(1) * t723;
t750 = t693 * t822 - t562;
t571 = pkin(5) * t691 + pkin(10) * t694 + t622;
t749 = -qJD(6) * t571 + (-t776 - t808) * t825 - t886;
t643 = t871 * t691;
t748 = qJD(6) * t643 - t884 + t640 * (pkin(5) * t694 - t691 * t815);
t511 = t596 - t783;
t747 = t690 * t453 + t693 * t454;
t735 = qJD(5) - t493;
t469 = pkin(5) * t583 + t581 * t877 + t735;
t473 = t640 * t815 + t888;
t458 = t469 * t693 - t473 * t690;
t459 = t469 * t690 + t473 * t693;
t476 = pkin(5) * t617 + t616 * t877 - t511;
t489 = pkin(4) * t845 - qJ(5) * t617 + t513;
t484 = pkin(10) * t845 + t489;
t746 = t476 * t693 - t484 * t690;
t745 = t476 * t690 + t484 * t693;
t742 = 0.2e1 * t786 + qJD(2);
t737 = g(3) * t846 - t752;
t512 = -t809 + t836;
t603 = t688 * t732;
t605 = t829 * qJD(2);
t736 = -t597 * t821 - t598 * t822 + t603 * t694 - t691 * t605;
t734 = -t616 * t690 + t688 * t839;
t545 = t616 * t693 + t690 * t845;
t731 = t640 * t694;
t729 = t876 * pkin(1) + t621 * pkin(2) + t551 * pkin(3) + pkin(8) * t799 + qJ(4) * t550;
t728 = -t597 * t822 + t598 * t821 + t691 * t603 + t694 * t605;
t725 = t738 * MDP(8);
t722 = qJ(4) * t796 + t728;
t721 = g(3) * t845 - t754;
t460 = -pkin(4) * t510 + t714;
t717 = -t460 + t721;
t716 = -pkin(1) * t875 - t619 * pkin(2) - pkin(3) * t547 + pkin(8) * t800 - qJ(4) * t546;
t715 = -t556 * t640 - t872;
t478 = -pkin(5) * t640 - t482;
t713 = -t815 * t505 + (-t478 + t486) * t572;
t709 = -qJ(5) * t543 - qJD(5) * t617 - t736;
t708 = g(1) * t550 + g(2) * t546 + g(3) * t616 - t771;
t707 = -t727 - t772;
t706 = t640 * t870 - t721;
t705 = qJDD(4) - t708;
t704 = -t463 + t706;
t703 = t509 + t854;
t702 = qJ(5) * t542 + qJD(5) * t616 + t722;
t700 = t640 * t837 - t707;
t699 = t493 * t583 + t705;
t480 = -pkin(4) * t581 + t735;
t698 = t867 + (-qJD(5) - t480) * t583 + t705;
t644 = t871 * t694;
t579 = t581 ^ 2;
t518 = t550 * t693 - t620 * t690;
t517 = -t550 * t690 - t620 * t693;
t516 = -pkin(3) * t798 + t779;
t499 = -pkin(4) * t583 - t525;
t498 = pkin(3) * t640 + t893;
t496 = -t512 - t866;
t494 = -t511 - t873;
t491 = qJD(6) * t734 + t542 * t693 - t690 * t796;
t490 = qJD(6) * t545 + t542 * t690 + t693 * t796;
t488 = -t689 * t845 + t836 + t866;
t479 = -pkin(3) * t796 - t736;
t477 = t640 * t878 + t888;
t475 = t722 - t794;
t472 = qJD(6) * t530 + t781;
t470 = -t542 * pkin(4) - t481;
t468 = -t702 + t794;
t467 = -t796 * t878 + t709;
t466 = (pkin(5) * t824 - t820) * t688 + t702;
t465 = -qJD(2) * t688 * t776 + t709;
t464 = t741 - t874;
t462 = t543 * pkin(5) + t542 * t877 - t481;
t456 = -t810 + t710;
t451 = -qJD(6) * t459 + t782;
t450 = qJD(6) * t458 + t747;
t1 = [(t728 * t640 - t836 * t599 + t606 * t583 - t596 * t509 + t524 * t617 + t556 * t543 + (-t508 * t824 - t695 * t772) * t688 - t756) * MDP(17) + (t692 * t885 + t742 * t793) * MDP(6) + (t695 * t885 - t742 * t796) * MDP(7) + ((-qJD(6) * t745 + t462 * t693 - t465 * t690) * t572 - t746 * t505 + t451 * t617 + t458 * t543 + t466 * t528 + t488 * t472 - t455 * t734 + t478 * t490 + g(1) * t891 - g(2) * t518) * MDP(31) + (-(qJD(6) * t746 + t462 * t690 + t465 * t693) * t572 + t745 * t505 - t450 * t617 - t459 * t543 + t466 * t530 + t488 * t471 + t455 * t545 + t478 * t491 - g(1) * t892 - g(2) * t517) * MDP(32) + (-t461 * t616 + t464 * t617 - t475 * t581 + t479 * t583 + t498 * t543 - t500 * t542 - t509 * t513 - t510 * t512 - t753) * MDP(19) + (-t456 * t617 - t457 * t616 - t467 * t583 - t468 * t581 - t477 * t543 - t482 * t542 + t489 * t509 - t496 * t510 + t753) * MDP(24) + (0.2e1 * (t692 * t812 - t814 * t826) * MDP(5) + (qJDD(1) * t686 + 0.2e1 * t692 * t789) * MDP(4)) * t684 + (-t599 * t695 - t640 * t824) * t688 * MDP(15) + t869 * t725 + (-t605 * t743 - t719 * t738 + t718 * t869 + (-t789 - t813) * t791 + t753) * MDP(10) + (-t606 * t743 + t829 * t738 - t769 * t869 + g(1) * t619 - g(2) * t621 + (-t790 + t812) * t791) * MDP(9) + (-t736 * t640 + t780 * t599 + t606 * t581 + t596 * t510 + t524 * t616 + t556 * t542 + (t695 * t771 - t824 * t837) * t688 - t755) * MDP(16) + (-t472 * t617 - t490 * t572 - t505 * t734 - t528 * t543) * MDP(29) + (t471 * t734 - t472 * t545 - t490 * t530 - t491 * t528) * MDP(27) + (t456 * t489 + t477 * t467 + t457 * t496 + t482 * t468 + t460 * t494 + t480 * t470 - g(1) * (-pkin(4) * t547 - t618 * t871 + t716) - g(2) * (pkin(4) * t551 + t620 * t871 + t729)) * MDP(25) + (t461 * t512 + t500 * t475 + t463 * t511 + t493 * t481 + t464 * t513 + t498 * t479 - g(1) * (-t618 * pkin(9) + t716) - g(2) * (pkin(9) * t620 + t729)) * MDP(21) + (t542 * t640 - t599 * t616 + (t510 * t695 - t581 * t824) * t688) * MDP(14) + (t463 * t616 + t479 * t640 + t481 * t581 + t493 * t542 + t510 * t511 - t513 * t599 + (t464 * t695 - t498 * t824) * t688 - t755) * MDP(18) + (t460 * t617 + t468 * t640 + t470 * t583 + t480 * t543 - t494 * t509 - t496 * t599 + (t457 * t695 - t482 * t824) * t688 + t756) * MDP(22) + (-t543 * t640 + t599 * t617 + (t509 * t695 + t583 * t824) * t688) * MDP(13) + (-t463 * t617 - t475 * t640 - t481 * t583 - t493 * t543 + t509 * t511 + t512 * t599 + (-t461 * t695 + t500 * t824) * t688 + t756) * MDP(20) + (t460 * t616 - t467 * t640 + t470 * t581 + t480 * t542 + t489 * t599 + t494 * t510 + (-t456 * t695 + t477 * t824) * t688 + t755) * MDP(23) + (g(1) * t875 - g(2) * t876) * MDP(2) + (g(1) * t876 + g(2) * t875) * MDP(3) + (t509 * t616 - t510 * t617 - t542 * t583 - t543 * t581) * MDP(12) + (-t509 * t617 + t543 * t583) * MDP(11) + (-t505 * t617 + t543 * t572) * MDP(30) + (t471 * t617 + t491 * t572 - t505 * t545 + t530 * t543) * MDP(28) + qJDD(1) * MDP(1) + (t471 * t545 + t491 * t530) * MDP(26); (pkin(2) * t509 - t834 * t640 + t508 * t798 - t604 * t583 + t715 * t694 + (t524 - t706) * t691) * MDP(17) + (t480 * t821 - t509 * t622 + t599 * t644 + t832 * t640 + t835 * t583 + (-t480 * t838 + t482 * t692) * t825 - t717 * t691) * MDP(22) + (-t640 * t821 + t599 * t691 + (-t583 * t692 + t640 * t838) * t825) * MDP(13) + (t528 * t562 + t530 * t561 + (-t528 * t693 - t530 * t690) * t822 + (t865 + t472 * t693 + (-t528 * t690 + t530 * t693) * qJD(6)) * t694) * MDP(27) + (pkin(1) * t692 * t847 + t604 * t743 - t721 - t769) * MDP(9) + (-t509 * t691 - t583 * t731) * MDP(11) + (-t505 * t691 - t572 * t731) * MDP(30) + (t692 * t758 + t662) * MDP(7) + t640 * MDP(15) * t798 + (pkin(1) * t807 + t601 * t743 + t718 + t737) * MDP(10) - t692 * MDP(4) * t807 + (-(t571 * t693 - t643 * t690) * t505 + t451 * t691 + t644 * t472 - g(1) * (-t620 * t842 - t621 * t690) - g(2) * (-t618 * t842 - t619 * t690) - g(3) * t723 + (t690 * t749 - t693 * t748) * t572 + t833 * t528 + t751 * t478 + (-t455 * t690 - t458 * t640 - t478 * t818) * t694) * MDP(31) + ((t571 * t690 + t643 * t693) * t505 - t450 * t691 + t644 * t471 - g(1) * (t620 * t843 - t621 * t693) - g(2) * (t618 * t843 - t619 * t693) + g(3) * t733 * t688 + (t690 * t748 + t693 * t749) * t572 + t833 * t530 + t750 * t478 + (-t455 * t693 + t459 * t640 + t478 * t819) * t694) * MDP(32) + (t640 * t822 + t599 * t694 + (t581 * t692 - t640 * t841) * t825) * MDP(14) + (t480 * t822 + t510 * t622 + t599 * t643 - t830 * t640 + t835 * t581 + (-t477 * t692 - t480 * t841) * t825 + t717 * t694) * MDP(23) + (-t500 * t798 + t509 * t634 + t514 * t640 - t831 * t583 + t704 * t691 + t694 * t883) * MDP(20) + (t498 * t798 + t510 * t634 - t516 * t640 + t831 * t581 - t691 * t883 + t704 * t694) * MDP(18) + ((-t509 + t854) * t694 + (-t510 + t852) * t691) * MDP(12) + (t514 * t581 - t516 * t583 + (t461 - t640 * t498 + (qJD(3) * t583 - t510) * pkin(9)) * t694 + (t464 + t863 + (qJD(3) * t581 - t509) * pkin(9)) * t691 - t737) * MDP(19) + (t509 * t643 + t510 * t644 - t830 * t583 - t832 * t581 + (t477 * t640 + t457) * t694 + (-t456 + t864) * t691 + t737) * MDP(24) + (t456 * t643 - t457 * t644 + t460 * t622 - g(1) * (-pkin(4) * t848 + t621 * t871 + t803) - g(2) * (-pkin(4) * t849 + t619 * t871 + t804) - g(3) * ((pkin(4) * t838 - qJ(5) * t692) * t688 + t768) + t832 * t482 + t835 * t480 + t830 * t477) * MDP(25) + (t837 * t798 - pkin(2) * t510 - t604 * t581 - t585 * t640 + t715 * t691 + (-t524 + (t602 + t870) * t640 - t721) * t694) * MDP(16) + (-t695 * t758 + t788) * MDP(6) + (t471 * t691 + t750 * t572 + (t572 * t819 + t840 - t856) * t694) * MDP(28) + (-t472 * t691 - t751 * t572 + (t572 * t818 - t844 + t859) * t694) * MDP(29) + (-t471 * t693 * t694 + (t694 * t819 + t750) * t530) * MDP(26) + (t463 * t634 - t500 * t514 - t498 * t516 - g(1) * t803 - g(2) * t804 - g(3) * t768 + t831 * t493 + (t461 * t694 + t464 * t691 + (t498 * t694 - t500 * t691) * qJD(3) + t752) * pkin(9)) * MDP(21) + t725 + t826 * MDP(5) * t847; MDP(11) * t855 + (-t579 + t580) * MDP(12) - t703 * MDP(13) + (-t510 - t852) * MDP(14) + t599 * MDP(15) + (-t556 * t583 + t708 - t862) * MDP(16) + (t556 * t581 + t700) * MDP(17) + (-t525 * t581 - t699 - t862 + 0.2e1 * t874) * MDP(18) + (pkin(3) * t509 - t868 + (t500 - t508) * t583 + (t498 - t893) * t581) * MDP(19) + (-t493 * t581 + t525 * t583 - 0.2e1 * t626 - t700 + t879) * MDP(20) + (-t464 * pkin(3) - g(1) * t784 - g(2) * t785 - g(3) * t783 + t461 * qJ(4) - t493 * t525 - t498 * t508 + t500 * t893) * MDP(21) + (t480 * t581 - t499 * t583 - t640 * t888 - t626 + t707 + t879 - t890) * MDP(22) + (t486 * t640 - t499 * t581 + t698 - 0.2e1 * t810) * MDP(23) + (t868 - t509 * t878 + (t482 + t486) * t583 + (-t477 + t888) * t581) * MDP(24) + (-t456 * t878 - t457 * qJ(4) - t477 * t486 - t480 * t499 - g(1) * (-pkin(4) * t550 + t784) - g(2) * (-pkin(4) * t546 + t785) - g(3) * (t783 - t873) - t888 * t482) * MDP(25) + (-t530 * t778 - t865) * MDP(26) + ((-t471 + t861) * t693 + (t472 + t858) * t690) * MDP(27) + (-t572 * t778 + t844 + t857) * MDP(28) + (t572 * t777 + t840 - t860) * MDP(29) + t572 * t581 * MDP(30) + (t458 * t581 + t689 * t472 + t528 * t888 + t713 * t690 - t693 * t882) * MDP(31) + (-t459 * t581 + t689 * t471 + t530 * t888 + t690 * t882 + t713 * t693) * MDP(32); (t699 + t863 - t874) * MDP(21) + (t698 - t810 - t864) * MDP(25) + (t844 + t859) * MDP(31) + (t840 + t856) * MDP(32) + (MDP(32) * t777 - t693 * t773) * t572 + (-MDP(18) + MDP(23)) * (t599 - t855) + (MDP(20) + MDP(22)) * (-t640 ^ 2 - t580) + (-MDP(19) + MDP(24)) * t703; (t770 + t854) * MDP(22) + (t712 - t852) * MDP(23) + (-t580 - t579) * MDP(24) + (t477 * t583 + t482 * t581 + t460 + t754) * MDP(25) + (-t840 - t860) * MDP(31) + (t844 - t857) * MDP(32) + (MDP(23) * t787 - g(3) * t695 * MDP(25) + (-MDP(22) * t795 + MDP(23) * t724) * qJD(1)) * t688 + (-MDP(32) * t778 - t690 * t773) * t572; t530 * t528 * MDP(26) + (-t528 ^ 2 + t530 ^ 2) * MDP(27) + (t806 + t861) * MDP(28) + (-t781 + t858) * MDP(29) - t505 * MDP(30) + (-g(1) * t517 + g(2) * t892 - g(3) * t734 + t459 * t572 - t478 * t530 + t782) * MDP(31) + (g(1) * t518 + g(2) * t891 + g(3) * t545 + t458 * t572 + t478 * t528 - t747) * MDP(32) + (-MDP(28) * t853 - MDP(29) * t530 - MDP(31) * t459 - MDP(32) * t458) * qJD(6);];
tau  = t1;
