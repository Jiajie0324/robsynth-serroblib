% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:09:37
% EndTime: 2019-03-09 16:10:02
% DurationCPUTime: 13.58s
% Computational Cost: add. (12425->801), mult. (30048->969), div. (0->0), fcn. (23315->10), ass. (0->356)
t278 = sin(qJ(3));
t281 = cos(qJ(3));
t466 = cos(pkin(6));
t393 = t466 * qJD(1);
t348 = t393 + qJD(2);
t275 = sin(pkin(6));
t279 = sin(qJ(2));
t435 = qJD(1) * t279;
t406 = t275 * t435;
t166 = t278 * t348 + t281 * t406;
t282 = cos(qJ(2));
t436 = qJD(1) * t275;
t405 = t282 * t436;
t228 = -qJD(3) + t405;
t455 = t166 * t228;
t324 = qJD(3) * t348;
t383 = t466 * qJDD(1);
t342 = t383 + qJDD(2);
t423 = qJDD(1) * t279;
t430 = qJD(3) * t281;
t433 = qJD(2) * t282;
t82 = t275 * (qJD(1) * (t278 * t433 + t279 * t430) + t278 * t423) + t278 * t324 - t281 * t342;
t509 = t82 - t455;
t164 = t278 * t406 - t281 * t348;
t457 = t164 * t228;
t449 = t275 * t279;
t415 = t278 * t449;
t376 = qJD(3) * t415;
t398 = t275 * t423;
t424 = qJD(1) * qJD(2);
t399 = t282 * t424;
t519 = t275 * t399 + t398;
t81 = qJD(1) * t376 - t278 * t342 + (-t324 - t519) * t281;
t522 = t81 - t457;
t528 = t278 * t509 + t281 * t522;
t375 = pkin(1) * t393;
t186 = -pkin(8) * t406 + t282 * t375;
t368 = pkin(2) * t279 - pkin(9) * t282;
t187 = t368 * t436;
t102 = -t278 * t186 + t187 * t281;
t485 = pkin(9) - qJ(5);
t526 = -qJD(5) * t278 + t430 * t485 + t102;
t507 = -t278 * qJD(4) + (t281 * t405 - t430) * qJ(4);
t490 = pkin(1) * t279;
t258 = t466 * t490;
t494 = -pkin(4) - pkin(10);
t425 = pkin(3) - t494;
t329 = pkin(5) * t281 - t278 * t425;
t448 = t275 * t282;
t525 = qJD(3) * t329 - (-t258 + (-pkin(8) + t329) * t448) * qJD(1) - t507;
t384 = t425 * t279;
t445 = t281 * t282;
t417 = qJ(5) * t445;
t524 = -(-t384 - t417) * t436 + t526;
t400 = t279 * t424;
t234 = t275 * t400;
t421 = t282 * qJDD(1);
t520 = -t275 * t421 + t234;
t184 = qJDD(3) + t520;
t277 = sin(qJ(6));
t280 = cos(qJ(6));
t427 = qJD(6) * t280;
t428 = qJD(6) * t277;
t35 = t164 * t428 + t277 * t184 - t228 * t427 - t280 * t82;
t107 = t164 * t277 - t280 * t228;
t154 = qJD(6) + t166;
t386 = t107 * t154;
t523 = t35 - t386;
t521 = t82 + t455;
t495 = pkin(3) + pkin(4);
t420 = t495 * t184;
t440 = pkin(8) * t448 + t258;
t182 = t466 * pkin(9) + t440;
t139 = qJD(2) * pkin(9) + qJD(1) * t182;
t346 = -pkin(2) * t282 - pkin(9) * t279 - pkin(1);
t145 = t346 * t436;
t389 = t139 * t278 - t281 * t145;
t518 = qJD(4) + t389;
t492 = cos(qJ(1));
t370 = t466 * t492;
t491 = sin(qJ(1));
t205 = t279 * t370 + t282 * t491;
t409 = t275 * t492;
t129 = t205 * t278 + t281 * t409;
t204 = t279 * t491 - t282 * t370;
t517 = t129 * t277 + t204 * t280;
t516 = t129 * t280 - t204 * t277;
t271 = t275 ^ 2;
t515 = 0.2e1 * t271;
t138 = -t348 * pkin(2) - t186;
t64 = t164 * pkin(3) - t166 * qJ(4) + t138;
t339 = qJD(5) - t64;
t31 = pkin(5) * t166 + t164 * t494 + t339;
t508 = -t166 * qJ(5) + t518;
t39 = t228 * t425 + t508;
t354 = t277 * t39 - t280 * t31;
t503 = t82 * pkin(3) + t81 * qJ(4) - t166 * qJD(4);
t235 = t342 * pkin(2);
t344 = qJD(2) * t375;
t372 = pkin(1) * t383;
t379 = pkin(8) * t519 + t279 * t344 - t282 * t372;
t96 = -t235 + t379;
t20 = t96 + t503;
t309 = qJDD(5) - t20;
t6 = -pkin(5) * t81 + t494 * t82 + t309;
t334 = t368 * qJD(2);
t100 = (qJD(1) * t334 + qJDD(1) * t346) * t275;
t432 = qJD(3) * t278;
t313 = pkin(8) * t520 - t279 * t372 - t282 * t344;
t95 = pkin(9) * t342 - t313;
t381 = -t281 * t100 + t139 * t430 + t145 * t432 + t278 * t95;
t353 = qJDD(4) + t381;
t481 = qJ(5) * t81;
t305 = -qJD(5) * t166 + t353 + t481;
t7 = -t184 * t425 + t305;
t1 = -t354 * qJD(6) + t277 * t6 + t280 * t7;
t356 = t154 * t354 + t1;
t12 = t277 * t31 + t280 * t39;
t2 = -qJD(6) * t12 - t277 * t7 + t280 * t6;
t514 = t12 * t154 + t2;
t513 = -t82 * qJ(5) - t164 * qJD(5);
t103 = t281 * t186 + t278 * t187;
t86 = qJ(4) * t406 + t103;
t512 = -qJD(5) * t281 - t432 * t485 - t86;
t109 = t164 * t280 + t228 * t277;
t36 = qJD(6) * t109 + t280 * t184 + t277 * t82;
t385 = t109 * t154;
t351 = -t36 + t385;
t203 = t278 * t466 + t281 * t449;
t402 = t275 * t433;
t125 = qJD(3) * t203 + t278 * t402;
t126 = -t376 + (qJD(3) * t466 + t402) * t281;
t191 = t440 * qJD(2);
t49 = t125 * pkin(3) - t126 * qJ(4) - t203 * qJD(4) + t191;
t202 = -t281 * t466 + t415;
t194 = t202 * pkin(3);
t390 = t203 * qJ(4) - t194;
t506 = (qJDD(2) + 0.2e1 * t383) * t275;
t161 = t164 ^ 2;
t498 = t166 ^ 2;
t505 = -t498 + t161;
t504 = -t228 ^ 2 - t498;
t395 = t282 * t466;
t208 = pkin(1) * t395 - pkin(8) * t449;
t190 = qJD(2) * t208;
t487 = pkin(9) * t184;
t502 = t228 * t64 + t487;
t77 = -qJDD(6) + t81;
t472 = t280 * t77;
t320 = t154 ^ 2 * t277 + t472;
t434 = qJD(2) * t279;
t501 = t275 * (t164 * t434 - t282 * t82) - t125 * t228 + t184 * t202;
t447 = t278 * t282;
t500 = -t184 * t281 - t228 * t432 + (-t164 * t279 + t228 * t447) * t436;
t174 = t184 * qJ(4);
t496 = 0.2e1 * t174;
t284 = qJD(1) ^ 2;
t493 = pkin(4) * t82;
t489 = pkin(3) * t184;
t488 = pkin(9) * t166;
t486 = g(3) * t275;
t193 = t202 * pkin(4);
t276 = qJ(4) + pkin(5);
t265 = t278 * qJ(4);
t222 = -t281 * pkin(3) - pkin(2) - t265;
t210 = t281 * pkin(4) - t222;
t367 = pkin(5) * t278 + pkin(10) * t281;
t153 = t367 + t210;
t232 = t485 * t278;
t105 = t153 * t280 - t232 * t277;
t484 = qJD(6) * t105 + t277 * t525 + t524 * t280;
t106 = t153 * t277 + t232 * t280;
t483 = -qJD(6) * t106 - t524 * t277 + t280 * t525;
t482 = qJ(4) * t82;
t216 = t228 * qJ(4);
t80 = t139 * t281 + t145 * t278;
t57 = qJ(5) * t164 + t80;
t50 = t216 - t57;
t478 = t228 * t50;
t71 = -t216 + t80;
t477 = t228 * t71;
t476 = t228 * t80;
t475 = t277 * t35;
t474 = t277 * t77;
t473 = t280 * t36;
t471 = t281 * t82;
t419 = t495 * t278;
t470 = -qJD(3) * t419 - (-t258 + (-pkin(8) - t419) * t448) * qJD(1) - t507;
t469 = -(pkin(5) * t279 + qJ(5) * t447) * t436 + t512;
t468 = qJ(5) * t278 * t405 - t512;
t467 = -(-t279 * t495 - t417) * t436 + t526;
t369 = t466 * t491;
t207 = -t279 * t369 + t282 * t492;
t408 = t275 * t491;
t133 = t207 * t278 - t281 * t408;
t465 = qJ(4) * t133;
t464 = qJ(5) * t202;
t463 = t107 * t164;
t462 = t107 * t228;
t461 = t109 * t107;
t460 = t109 * t164;
t459 = t109 * t228;
t458 = t129 * qJ(4);
t456 = t166 * t164;
t452 = t204 * t281;
t206 = t279 * t492 + t282 * t369;
t451 = t206 * t281;
t450 = t271 * t284;
t446 = t280 * t282;
t97 = t166 * pkin(3) + t164 * qJ(4);
t441 = pkin(2) * t448 + pkin(9) * t449;
t183 = -pkin(1) * t275 - t441;
t99 = t281 * t182 + t278 * t183;
t442 = pkin(3) * t432 - (t258 + (pkin(3) * t278 + pkin(8)) * t448) * qJD(1) + t507;
t438 = t492 * pkin(1) + pkin(8) * t408;
t273 = t279 ^ 2;
t274 = t282 ^ 2;
t437 = t273 - t274;
t431 = qJD(3) * t280;
t429 = qJD(4) * t282;
t426 = qJD(6) * t281;
t418 = qJ(4) * t448;
t416 = t282 * t450;
t414 = t275 * t445;
t195 = t204 * pkin(2);
t412 = -pkin(3) * t452 - t204 * t265 - t195;
t197 = t206 * pkin(2);
t411 = -pkin(3) * t451 - t206 * t265 - t197;
t410 = t207 * pkin(2) + t438;
t181 = -t466 * pkin(2) - t208;
t404 = t275 * t434;
t403 = t275 * t429;
t401 = pkin(1) * t515;
t118 = t129 * pkin(3);
t130 = t205 * t281 - t278 * t409;
t392 = qJ(4) * t130 - t118;
t122 = t133 * pkin(3);
t134 = t207 * t281 + t278 * t408;
t391 = qJ(4) * t134 - t122;
t98 = -t278 * t182 + t183 * t281;
t388 = t154 * t280;
t382 = -t278 * t100 + t139 * t432 - t145 * t430 - t281 * t95;
t380 = t279 * t416;
t378 = pkin(3) * t414 + t278 * t418 + t441;
t377 = t228 * t406;
t374 = t279 * t399;
t371 = -pkin(1) * t491 + pkin(8) * t409;
t366 = g(1) * t129 - g(2) * t133;
t365 = -g(1) * t130 + g(2) * t134;
t364 = g(1) * t206 + g(2) * t204;
t363 = g(1) * t204 - g(2) * t206;
t362 = g(1) * t207 + g(2) * t205;
t85 = pkin(3) * t448 - t98;
t335 = t277 * t447 + t279 * t280;
t143 = t335 * t436;
t360 = -t277 * t432 + t143;
t322 = t275 * (-t277 * t279 + t278 * t446);
t144 = qJD(1) * t322;
t359 = t278 * t431 - t144;
t357 = (qJD(3) * t164 - t81) * pkin(9);
t355 = -t12 * t277 + t280 * t354;
t83 = t181 - t390;
t42 = pkin(5) * t203 + t202 * t494 - t83;
t60 = pkin(4) * t448 - qJ(5) * t203 + t85;
t55 = pkin(10) * t448 + t60;
t16 = -t277 * t55 + t280 * t42;
t17 = t277 * t42 + t280 * t55;
t352 = pkin(4) * t414 + t378;
t34 = t125 * t164 + t202 * t82;
t33 = t126 * t166 - t203 * t81;
t347 = 0.2e1 * t393 + qJD(2);
t345 = pkin(9) * t206 + t410;
t343 = -t205 * pkin(2) + t371;
t341 = g(3) * t449 + t362;
t84 = -t418 + t99;
t188 = t275 * t334;
t52 = -t182 * t430 - t183 * t432 + t188 * t281 - t278 * t190;
t214 = qJD(4) * t228;
t18 = t174 - t214 - t382;
t336 = -t202 * t277 + t275 * t446;
t128 = t202 * t280 + t277 * t448;
t330 = -pkin(9) * t471 - t341;
t44 = -pkin(5) * t228 - t50;
t328 = -t154 * t44 - t425 * t77;
t51 = -t182 * t432 + t183 * t430 + t278 * t188 + t281 * t190;
t327 = g(1) * t492 + g(2) * t491;
t326 = g(1) * t133 + g(2) * t129 + g(3) * t202;
t325 = g(1) * t134 + g(2) * t130 + g(3) * t203;
t10 = -t18 + t513;
t321 = -t154 * t388 + t474;
t319 = -t204 * pkin(9) + t343;
t318 = qJ(4) * t404 + t51;
t101 = (-t184 * t282 - t228 * t434) * t275;
t317 = -pkin(4) * t452 + t205 * t485 + t412;
t316 = -pkin(4) * t451 + t207 * t485 + t411;
t315 = g(3) * t448 - t364;
t312 = -t184 + t456;
t13 = t309 - t493;
t311 = -t13 + t315;
t124 = t134 * pkin(3);
t310 = t134 * pkin(4) + t206 * t485 + t124 + t410;
t308 = -t138 * t228 - t487;
t306 = t125 * t166 + t126 * t164 - t202 * t81 + t203 * t82;
t37 = -t278 * t81 - t281 * t455;
t38 = -t278 * t457 - t471;
t304 = -t325 - t382;
t303 = t326 - t381;
t302 = -qJ(5) * t126 - qJD(5) * t203 - t52;
t120 = t130 * pkin(3);
t301 = -pkin(4) * t130 - t204 * t485 - t120 + t343;
t300 = pkin(9) * qJD(3) * t228 - t315;
t8 = pkin(5) * t184 - t10;
t299 = -qJD(6) * t154 * t425 + t325 - t8;
t298 = -t315 - t379;
t297 = qJDD(4) - t303;
t296 = -t20 + t300;
t295 = t300 - t96;
t294 = t81 + t457;
t293 = qJ(5) * t125 + qJD(5) * t202 + t318;
t292 = t228 * t389 - t304;
t22 = -t126 * t228 + t184 * t203 + (t166 * t434 + t282 * t81) * t275;
t289 = t166 * t64 + t297;
t54 = -t228 * t430 + t184 * t278 + (-t166 * t279 + t228 * t445) * t436;
t48 = -pkin(4) * t164 + t339;
t287 = t481 + (-qJD(5) - t48) * t166 + t297;
t233 = t485 * t281;
t189 = t440 * qJD(1);
t121 = t133 * pkin(4);
t117 = t129 * pkin(4);
t90 = t133 * t280 - t206 * t277;
t89 = -t133 * t277 - t206 * t280;
t88 = -pkin(3) * t406 - t102;
t70 = -pkin(4) * t166 - t97;
t69 = pkin(3) * t228 + t518;
t67 = -t84 - t464;
t65 = -t83 - t193;
t62 = qJD(6) * t336 + t125 * t280 - t277 * t404;
t61 = qJD(6) * t128 + t125 * t277 + t280 * t404;
t59 = -t276 * t448 + t464 + t99;
t45 = -pkin(3) * t404 - t52;
t43 = t228 * t495 + t508;
t41 = t318 - t403;
t40 = -pkin(5) * t164 + t166 * t494 - t97;
t32 = -t125 * pkin(4) - t49;
t30 = -t293 + t403;
t29 = -t404 * t495 + t302;
t24 = (pkin(5) * t434 - t429) * t275 + t293;
t23 = -qJD(2) * t275 * t384 + t302;
t21 = t353 - t489;
t19 = t126 * pkin(5) + t125 * t494 - t49;
t15 = t277 * t40 + t280 * t57;
t14 = -t277 * t57 + t280 * t40;
t9 = -t420 + t305;
t4 = -qJD(6) * t17 + t19 * t280 - t23 * t277;
t3 = qJD(6) * t16 + t19 * t277 + t23 * t280;
t5 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t491 - g(2) * t492, t327, 0, 0 (qJDD(1) * t273 + 0.2e1 * t374) * t271 (t279 * t421 - t424 * t437) * t515, t279 * t506 + t347 * t402 (qJDD(1) * t274 - 0.2e1 * t374) * t271, t282 * t506 - t347 * t404, t342 * t466, -t191 * t348 + t208 * t342 - t379 * t466 + g(1) * t205 - g(2) * t207 + (-t400 + t421) * t401, -t190 * t348 - t440 * t342 + t313 * t466 + (-t399 - t423) * t401 - t363 ((-t186 * qJD(2) + qJDD(1) * t440 - t313) * t282 + (-qJD(2) * t189 - qJDD(1) * t208 + t379) * t279 - t327) * t275, t271 * qJDD(1) * pkin(1) ^ 2 - g(1) * t371 - g(2) * t438 - t186 * t191 + t189 * t190 - t208 * t379 - t313 * t440, t33, -t306, t22, t34, -t501, t101, t125 * t138 + t164 * t191 + t181 * t82 + t184 * t98 + t202 * t96 - t228 * t52 + (t282 * t381 - t389 * t434) * t275 - t365, t126 * t138 + t166 * t191 - t181 * t81 - t184 * t99 + t203 * t96 + t228 * t51 + (-t282 * t382 - t434 * t80) * t275 - t366, -t125 * t80 + t126 * t389 - t164 * t51 - t166 * t52 + t202 * t382 + t203 * t381 + t81 * t98 - t82 * t99 + t363, -g(1) * t319 - g(2) * t345 + t138 * t191 + t96 * t181 - t381 * t98 - t382 * t99 - t389 * t52 + t80 * t51, t33, t22, t306, t101, t501, t34, t125 * t64 + t164 * t49 - t184 * t85 + t20 * t202 + t228 * t45 + t82 * t83 + (t21 * t282 - t434 * t69) * t275 - t365, -t125 * t71 + t126 * t69 - t164 * t41 + t166 * t45 - t18 * t202 + t203 * t21 - t81 * t85 - t82 * t84 + t363, -t126 * t64 - t166 * t49 + t184 * t84 - t20 * t203 - t228 * t41 + t81 * t83 + (-t18 * t282 + t434 * t71) * t275 + t366, t18 * t84 + t71 * t41 + t20 * t83 + t64 * t49 + t21 * t85 + t69 * t45 - g(1) * (-t120 + t319 - t458) - g(2) * (t124 + t345 + t465) t34, -t306, -t501, t33, t22, t101, t126 * t48 + t13 * t203 + t166 * t32 - t184 * t67 + t228 * t30 - t65 * t81 + (t10 * t282 - t434 * t50) * t275 + t366, t125 * t48 + t13 * t202 + t164 * t32 + t184 * t60 - t228 * t29 + t65 * t82 + (-t282 * t9 + t43 * t434) * t275 + t365, -t10 * t202 - t125 * t50 - t126 * t43 - t164 * t30 - t166 * t29 - t203 * t9 + t60 * t81 - t67 * t82 - t363, t9 * t60 + t43 * t29 + t10 * t67 + t50 * t30 + t13 * t65 + t48 * t32 - g(1) * (t301 - t458) - g(2) * (t310 + t465) t109 * t62 - t128 * t35, -t107 * t62 - t109 * t61 - t128 * t36 - t336 * t35, t109 * t126 - t128 * t77 + t154 * t62 - t203 * t35, t107 * t61 - t336 * t36, -t107 * t126 - t154 * t61 - t203 * t36 - t336 * t77, t126 * t154 - t203 * t77, g(1) * t516 - g(2) * t90 + t24 * t107 - t354 * t126 + t4 * t154 - t16 * t77 + t2 * t203 - t8 * t336 + t59 * t36 + t44 * t61, -g(1) * t517 - g(2) * t89 - t1 * t203 + t24 * t109 - t12 * t126 + t8 * t128 - t3 * t154 + t17 * t77 - t59 * t35 + t44 * t62, t1 * t336 - t107 * t3 - t109 * t4 - t12 * t61 - t128 * t2 + t16 * t35 - t17 * t36 + t354 * t62 - t365, t1 * t17 + t12 * t3 + t2 * t16 - t354 * t4 + t8 * t59 + t44 * t24 - g(1) * (-pkin(10) * t130 - t129 * t276 + t301) - g(2) * (pkin(10) * t134 + t133 * t276 + t310); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380, t437 * t450, -t275 * t284 * t395 + t398, t380, -t234 + (t348 * t435 + t421) * t275, t342, t189 * t348 + t450 * t490 + t298, pkin(1) * t416 + t186 * t348 + t313 + t341, 0, 0, t37, -t528, t54, t38, -t500, t377, -pkin(2) * t82 + t102 * t228 - t164 * t189 + t278 * t308 + t281 * t295 + t389 * t406, pkin(2) * t81 - t103 * t228 - t166 * t189 - t278 * t295 + t281 * t308 + t406 * t80, t102 * t166 + t103 * t164 + (-t389 * t405 - t382 + (t389 + t488) * qJD(3)) * t281 + (t381 + t357 + t476) * t278 + t330, -t96 * pkin(2) - t80 * t103 + t389 * t102 - t138 * t189 + g(1) * t197 + g(2) * t195 - g(3) * t441 + (-t382 * t281 + t278 * t381 + (-t278 * t80 + t281 * t389) * qJD(3) - t362) * pkin(9), t37, t54, t528, t377, t500, t38, t442 * t164 + t222 * t82 - t228 * t88 - t278 * t502 + t296 * t281 + t69 * t406, t164 * t86 - t166 * t88 + (-t69 * t405 + t18 + (t69 + t488) * qJD(3)) * t281 + (t21 + t357 + t477) * t278 + t330, -t442 * t166 + t222 * t81 + t228 * t86 + t296 * t278 + t281 * t502 - t71 * t406, t20 * t222 - t71 * t86 - t69 * t88 - g(1) * t411 - g(2) * t412 - g(3) * t378 + t442 * t64 + (t18 * t281 + t21 * t278 + (-t278 * t71 + t281 * t69) * qJD(3) - t362) * pkin(9), t38, -t528, -t500, t37, t54, t377, t48 * t430 + t184 * t233 - t210 * t81 + t468 * t228 + t470 * t166 + (t279 * t50 - t445 * t48) * t436 - t311 * t278, t48 * t432 + t184 * t232 + t210 * t82 - t467 * t228 + t470 * t164 + (-t279 * t43 - t447 * t48) * t436 + t311 * t281, t232 * t81 + t233 * t82 - t467 * t166 - t468 * t164 + (t228 * t43 + t10) * t281 + (-t9 + t478) * t278 + t341, t9 * t232 - t10 * t233 + t13 * t210 - g(1) * t316 - g(2) * t317 - g(3) * (-qJ(5) * t449 + t352) + t468 * t50 + t470 * t48 + t467 * t43, t280 * t281 * t35 + (t277 * t426 + t359) * t109, t107 * t144 + t109 * t143 + (-t107 * t280 - t109 * t277) * t432 + (-t475 + t473 + (-t107 * t277 + t109 * t280) * qJD(6)) * t281, -t278 * t35 + t359 * t154 + (t154 * t428 - t459 + t472) * t281, -t277 * t281 * t36 + (-t280 * t426 - t360) * t107, -t278 * t36 + t360 * t154 + (t154 * t427 + t462 - t474) * t281, -t154 * t228 * t281 - t278 * t77, -t105 * t77 - t44 * t143 + t233 * t36 + t362 * t277 + (t44 * t277 * qJD(3) + t280 * t364 + t2) * t278 - g(3) * t322 + t483 * t154 + t469 * t107 + (t228 * t354 - t8 * t277 - t427 * t44) * t281, t106 * t77 - t44 * t144 - t233 * t35 + t362 * t280 + (-t277 * t364 + t431 * t44 - t1) * t278 + t335 * t486 - t484 * t154 + t469 * t109 + (t12 * t228 - t8 * t280 + t428 * t44) * t281, t105 * t35 - t106 * t36 - t354 * t144 + t12 * t143 - t483 * t109 - t484 * t107 + t355 * t432 + (t1 * t277 + t2 * t280 + (t12 * t280 + t277 * t354) * qJD(6) - t315) * t281, t1 * t106 + t2 * t105 + t8 * t233 - g(1) * (-t206 * t367 + t316) - g(2) * (-t204 * t367 + t317) - g(3) * t352 + t469 * t44 - (-qJ(5) * t279 + t282 * t367) * t486 + t484 * t12 - t483 * t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, -t505, -t294, -t456, -t521, t184, -t138 * t166 + t303 - t476, t138 * t164 + t292, 0, 0, t456, -t294, t505, t184, t521, -t456, -t164 * t97 - t289 - t476 + 0.2e1 * t489, pkin(3) * t81 - t482 + (t71 - t80) * t166 + (t69 - t518) * t164, -t164 * t64 + t166 * t97 - 0.2e1 * t214 - t292 + t496, -t21 * pkin(3) - g(1) * t391 - g(2) * t392 - g(3) * t390 + t18 * qJ(4) + t518 * t71 - t64 * t97 - t69 * t80, -t456, -t505, -t521, t456, -t294, t184, t164 * t48 - t166 * t70 - t228 * t508 - t214 + t304 + t496 - t513, -t164 * t70 + t228 * t57 + t287 - 0.2e1 * t420, t482 - t495 * t81 + (t50 + t57) * t166 + (-t43 + t508) * t164, -t9 * t495 - t10 * qJ(4) - t43 * t57 - t48 * t70 - g(1) * (-t121 + t391) - g(2) * (-t117 + t392) - g(3) * (-t193 + t390) - t508 * t50, -t109 * t388 + t475 (t35 + t386) * t280 + (t36 + t385) * t277, t321 + t460, -t277 * t386 + t473, t320 - t463, t154 * t164, t107 * t508 - t14 * t154 - t164 * t354 + t276 * t36 + t277 * t328 - t280 * t299, t109 * t508 - t12 * t164 + t15 * t154 - t276 * t35 + t277 * t299 + t280 * t328, t107 * t15 + t109 * t14 + (-t354 * t166 + t425 * t36 - t1 + (-t109 * t425 - t354) * qJD(6)) * t280 + (t12 * t166 + t425 * t35 + t2 + (-t107 * t425 + t12) * qJD(6)) * t277 + t326, t8 * t276 - t12 * t15 + t354 * t14 - g(1) * (-pkin(10) * t133 + t134 * t276 - t121 - t122) - g(2) * (-pkin(10) * t129 + t130 * t276 - t117 - t118) - g(3) * (-pkin(10) * t202 + t203 * t276 - t193 - t194) + t508 * t44 - (qJD(6) * t355 + t1 * t280 - t2 * t277) * t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t312, -t294, t504, t289 + t477 - t489, 0, 0, 0, 0, 0, 0, t504, -t312, t294, t287 - t420 - t478, 0, 0, 0, 0, 0, 0, t321 + t462, t320 + t459, -t277 * t523 + t351 * t280, t228 * t44 - t277 * t514 + t356 * t280 - t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t522, t509, -t498 - t161, t164 * t50 + t166 * t43 + qJDD(5) + t235 + t298 - t493 - t503, 0, 0, 0, 0, 0, 0, -t320 - t463, t321 - t460, t351 * t277 + t280 * t523, -t164 * t44 + t356 * t277 + t280 * t514 - t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t461, -t107 ^ 2 + t109 ^ 2, -t523, -t461, t351, -t77, -g(1) * t89 + g(2) * t517 - g(3) * t336 - t44 * t109 + t514, g(1) * t90 + g(2) * t516 + g(3) * t128 + t44 * t107 - t356, 0, 0;];
tau_reg  = t5;
