% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPPR8
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPPR8_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:29
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPPR8_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR8_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR8_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPPR8_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR8_jacobiaD_rot_sym_varpar: pkin has to be [10x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:33
	% EndTime: 2019-10-10 11:29:33
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:33
	% EndTime: 2019-10-10 11:29:33
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:33
	% EndTime: 2019-10-10 11:29:33
	% DurationCPUTime: 0.40s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:33
	% EndTime: 2019-10-10 11:29:34
	% DurationCPUTime: 1.05s
	% Computational Cost: add. (1479->91), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->91)
	t171 = sin(qJ(2));
	t172 = sin(qJ(1));
	t225 = cos(pkin(6));
	t195 = t172 * t225;
	t193 = t171 * t195;
	t174 = cos(qJ(2));
	t175 = cos(qJ(1));
	t209 = t175 * t174;
	t157 = -t193 + t209;
	t170 = sin(qJ(3));
	t173 = cos(qJ(3));
	t169 = sin(pkin(6));
	t213 = t169 * t172;
	t185 = -t157 * t170 + t173 * t213;
	t227 = t185 * qJD(3);
	t194 = t175 * t225;
	t192 = t174 * t194;
	t210 = t172 * t171;
	t153 = -t192 + t210;
	t212 = t169 * t174;
	t147 = atan2(-t153, -t212);
	t145 = sin(t147);
	t146 = cos(t147);
	t151 = t153 ^ 2;
	t165 = 0.1e1 / t169 ^ 2;
	t167 = 0.1e1 / t174 ^ 2;
	t150 = t151 * t165 * t167 + 0.1e1;
	t148 = 0.1e1 / t150;
	t164 = 0.1e1 / t169;
	t166 = 0.1e1 / t174;
	t199 = t153 * t164 * t166;
	t226 = (t146 * t199 - t145) * t148 + t145;
	t129 = -t145 * t153 - t146 * t212;
	t126 = 0.1e1 / t129;
	t144 = t157 * t173 + t170 * t213;
	t138 = 0.1e1 / t144;
	t127 = 0.1e1 / t129 ^ 2;
	t139 = 0.1e1 / t144 ^ 2;
	t182 = -t171 * t194 - t172 * t174;
	t183 = -t175 * t171 - t174 * t195;
	t135 = -t183 * qJD(1) - t182 * qJD(2);
	t207 = qJD(2) * t171;
	t196 = t167 * t207;
	t184 = t135 * t166 + t153 * t196;
	t215 = t148 * t164;
	t118 = t184 * t215;
	t188 = t145 * t212 - t146 * t153;
	t200 = t146 * t169 * t171;
	t114 = qJD(2) * t200 + t188 * t118 - t145 * t135;
	t224 = t114 * t126 * t127;
	t214 = t167 * t171;
	t187 = t153 * t214 - t166 * t182;
	t119 = t187 * t215;
	t115 = t188 * t119 + t145 * t182 + t200;
	t223 = t115 * t183;
	t134 = t182 * qJD(1) + t183 * qJD(2);
	t208 = qJD(1) * t169;
	t197 = t175 * t208;
	t124 = t144 * qJD(3) + t134 * t170 - t173 * t197;
	t137 = t185 ^ 2;
	t132 = t137 * t139 + 0.1e1;
	t218 = t139 * t185;
	t125 = t134 * t173 + t170 * t197 + t227;
	t220 = t125 * t138 * t139;
	t222 = (-t124 * t218 - t137 * t220) / t132 ^ 2;
	t168 = t166 * t167;
	t221 = (t135 * t153 * t167 + t151 * t168 * t207) * t165 / t150 ^ 2;
	t191 = qJD(2) * t225 + qJD(1);
	t206 = qJD(2) * t174;
	t133 = -qJD(1) * t192 - t175 * t206 + t191 * t210;
	t219 = t133 * t127;
	t217 = t145 * t183;
	t216 = t146 * t183;
	t211 = t169 * t175;
	t152 = t183 ^ 2;
	t122 = t152 * t127 + 0.1e1;
	t205 = 0.2e1 * (-t152 * t224 + t183 * t219) / t122 ^ 2;
	t204 = 0.2e1 * t224;
	t203 = 0.2e1 * t222;
	t202 = -0.2e1 * t221;
	t201 = t185 * t220;
	t198 = t172 * t208;
	t189 = t170 * t138 + t173 * t218;
	t186 = -t170 * t182 + t173 * t211;
	t142 = t170 * t211 + t173 * t182;
	t136 = -qJD(1) * t193 - t172 * t207 + t191 * t209;
	t130 = 0.1e1 / t132;
	t120 = 0.1e1 / t122;
	t117 = t226 * t183;
	t113 = (t187 * t202 + (t135 * t214 + t136 * t166 + (-t182 * t214 + (0.2e1 * t168 * t171 ^ 2 + t166) * t153) * qJD(2)) * t148) * t164;
	t1 = [(-t183 * t166 * t202 + (-t133 * t166 - t183 * t196) * t148) * t164, t113, 0, 0, 0, 0; t153 * t126 * t205 + (-t135 * t126 + (t114 * t153 + t117 * t133) * t127) * t120 - ((t117 * t204 - t226 * t219) * t120 + (t117 * t205 + ((t118 * t148 * t199 + t202) * t217 + (0.2e1 * t199 * t221 - t118 + (-t184 * t164 + t118) * t148) * t216) * t120) * t127) * t183, (-t126 * t157 - t127 * t223) * t205 + (-t204 * t223 + t134 * t126 + (-t157 * t114 + t115 * t133 + (t169 * t206 - t113 * t153 - t119 * t135 + (t119 * t212 + t182) * t118) * t216 + (t118 * t119 * t153 - t136 + (t113 * t174 + (-qJD(2) * t119 - t118) * t171) * t169) * t217) * t127) * t120, 0, 0, 0, 0; (t138 * t186 - t142 * t218) * t203 + ((t142 * qJD(3) - t136 * t170 + t173 * t198) * t138 - 0.2e1 * t142 * t201 + (t186 * t125 + (t186 * qJD(3) - t136 * t173 - t170 * t198) * t185 - t142 * t124) * t139) * t130, -t189 * t183 * t203 + (t189 * t133 - ((-qJD(3) * t138 + 0.2e1 * t201) * t173 + (t124 * t173 + (t125 + t227) * t170) * t139) * t183) * t130, -0.2e1 * t222 - 0.2e1 * (t124 * t139 * t130 - (-t130 * t220 - t139 * t222) * t185) * t185, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:33
	% EndTime: 2019-10-10 11:29:35
	% DurationCPUTime: 1.67s
	% Computational Cost: add. (3667->120), mult. (11094->248), div. (691->12), fcn. (14128->11), ass. (0->107)
	t203 = sin(qJ(3));
	t205 = cos(qJ(3));
	t202 = cos(pkin(6));
	t204 = sin(qJ(2));
	t265 = sin(qJ(1));
	t232 = t265 * t204;
	t224 = t202 * t232;
	t206 = cos(qJ(2));
	t207 = cos(qJ(1));
	t244 = t207 * t206;
	t217 = t224 - t244;
	t201 = sin(pkin(6));
	t233 = t201 * t265;
	t218 = t203 * t217 + t205 * t233;
	t266 = -0.2e1 * t218;
	t246 = t201 * t207;
	t273 = -qJD(1) * t224 - qJD(2) * t232 + (qJD(2) * t202 + qJD(1)) * t244 - qJD(3) * t246;
	t272 = 0.2e1 * t205;
	t231 = t265 * t206;
	t245 = t207 * t204;
	t216 = t202 * t231 + t245;
	t180 = t203 * t233 - t205 * t217;
	t169 = 0.1e1 / t180;
	t188 = t202 * t245 + t231;
	t164 = t188 * qJD(1) + t216 * qJD(2);
	t230 = qJD(1) * t246;
	t151 = t218 * qJD(3) - t164 * t205 + t203 * t230;
	t170 = 0.1e1 / t180 ^ 2;
	t270 = t151 * t170;
	t258 = t169 * t270;
	t271 = -0.2e1 * t216 * t258;
	t174 = t188 * t203 + t205 * t246;
	t248 = t201 * t204;
	t185 = -t202 * t205 + t203 * t248;
	t161 = atan2(-t174, t185);
	t154 = sin(t161);
	t155 = cos(t161);
	t149 = -t154 * t174 + t155 * t185;
	t147 = 0.1e1 / t149 ^ 2;
	t168 = t218 ^ 2;
	t145 = t168 * t147 + 0.1e1;
	t150 = t180 * qJD(3) - t164 * t203 - t205 * t230;
	t259 = t150 * t147;
	t167 = t174 ^ 2;
	t182 = 0.1e1 / t185 ^ 2;
	t160 = t167 * t182 + 0.1e1;
	t156 = 0.1e1 / t160;
	t223 = qJD(1) * t233;
	t242 = qJD(3) * t205;
	t152 = t188 * t242 + t273 * t203 - t205 * t223;
	t186 = t202 * t203 + t205 * t248;
	t247 = t201 * t206;
	t229 = qJD(2) * t247;
	t172 = t186 * qJD(3) + t203 * t229;
	t181 = 0.1e1 / t185;
	t251 = t174 * t182;
	t221 = -t152 * t181 + t172 * t251;
	t138 = t221 * t156;
	t222 = -t154 * t185 - t155 * t174;
	t134 = t222 * t138 - t154 * t152 + t155 * t172;
	t146 = 0.1e1 / t149;
	t148 = t146 * t147;
	t263 = t134 * t148;
	t241 = 0.2e1 * (-t168 * t263 - t218 * t259) / t145 ^ 2;
	t269 = t172 * t182;
	t187 = -t202 * t244 + t232;
	t219 = t181 * t187 + t247 * t251;
	t268 = t203 * t219;
	t153 = (-qJD(3) * t188 + t223) * t203 + t273 * t205;
	t267 = -0.2e1 * t174;
	t184 = t216 ^ 2;
	t250 = t184 * t170;
	t162 = 0.1e1 + t250;
	t163 = t187 * qJD(1) + t217 * qJD(2);
	t234 = t184 * t258;
	t254 = t170 * t216;
	t262 = (-t163 * t254 - t234) / t162 ^ 2;
	t253 = t181 * t269;
	t261 = (t152 * t251 - t167 * t253) / t160 ^ 2;
	t260 = t147 * t218;
	t257 = t154 * t218;
	t256 = t155 * t218;
	t252 = t174 * t181;
	t249 = t216 * t203;
	t243 = qJD(2) * t204;
	t240 = -0.2e1 * t261;
	t239 = t148 * t266;
	t238 = t181 * t261;
	t237 = t147 * t257;
	t236 = t147 * t256;
	t227 = t253 * t267;
	t176 = t188 * t205 - t203 * t246;
	t225 = t254 * t262;
	t220 = -t176 * t181 + t186 * t251;
	t214 = -t154 + (t155 * t252 + t154) * t156;
	t173 = -t185 * qJD(3) + t205 * t229;
	t165 = t216 * qJD(1) + t188 * qJD(2);
	t158 = 0.1e1 / t162;
	t143 = 0.1e1 / t145;
	t142 = t156 * t268;
	t141 = t220 * t156;
	t137 = t214 * t218;
	t136 = (t154 * t187 + t155 * t247) * t203 + t222 * t142;
	t135 = t222 * t141 - t154 * t176 + t155 * t186;
	t133 = t220 * t240 + (t186 * t227 - t153 * t181 + (t152 * t186 + t172 * t176 + t173 * t174) * t182) * t156;
	t131 = t240 * t268 + (t219 * t242 + (t227 * t247 + t165 * t181 + (-t172 * t187 + (t152 * t206 - t174 * t243) * t201) * t182) * t203) * t156;
	t1 = [t238 * t266 + (-t150 * t181 - t218 * t269) * t156, t131, t133, 0, 0, 0; t174 * t146 * t241 + (-t152 * t146 + (t134 * t174 + t137 * t150) * t147) * t143 - (-t137 * t147 * t241 + (-0.2e1 * t137 * t263 + (-t138 * t156 * t252 + t240) * t237 + (t238 * t267 - t138 + (t138 - t221) * t156) * t236 - t214 * t259) * t143) * t218, (-t136 * t260 + t146 * t249) * t241 + (-t136 * t259 + (t163 * t203 - t216 * t242) * t146 + (t136 * t239 + t147 * t249) * t134 + (-t131 * t174 - t142 * t152 + (-t203 * t243 + t206 * t242) * t201 + (-t142 * t185 + t187 * t203) * t138) * t236 + (t187 * t242 - t131 * t185 - t142 * t172 + t165 * t203 + (t142 * t174 - t203 * t247) * t138) * t237) * t143, (-t135 * t260 - t146 * t180) * t241 + (t135 * t134 * t239 + t151 * t146 + (-t180 * t134 - t135 * t150 + (-t133 * t174 - t141 * t152 + t173 + (-t141 * t185 - t176) * t138) * t256 + (-t133 * t185 - t141 * t172 - t153 + (t141 * t174 - t186) * t138) * t257) * t147) * t143, 0, 0, 0; -0.2e1 * t187 * t169 * t262 + 0.2e1 * t176 * t225 + (-(-t163 * t170 + t271) * t176 - t153 * t254 + t165 * t169 - t187 * t270) * t158, 0.2e1 * (-t169 * t217 + t205 * t250) * t262 + (t234 * t272 + t164 * t169 + (qJD(3) * t184 * t203 + t163 * t216 * t272 - t151 * t217) * t170) * t158, t225 * t266 + (t218 * t271 + (-t150 * t216 - t163 * t218) * t170) * t158, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:33
	% EndTime: 2019-10-10 11:29:34
	% DurationCPUTime: 0.87s
	% Computational Cost: add. (1349->91), mult. (4347->200), div. (672->14), fcn. (5566->11), ass. (0->95)
	t183 = sin(qJ(2));
	t184 = sin(qJ(1));
	t186 = cos(qJ(2));
	t187 = cos(qJ(1));
	t237 = cos(pkin(6));
	t205 = t187 * t237;
	t165 = t183 * t205 + t184 * t186;
	t206 = t184 * t237;
	t166 = t187 * t183 + t186 * t206;
	t145 = t165 * qJD(1) + t166 * qJD(2);
	t182 = sin(qJ(3));
	t185 = cos(qJ(3));
	t181 = sin(pkin(6));
	t220 = qJD(1) * t181;
	t208 = t187 * t220;
	t203 = t183 * t206;
	t221 = t187 * t186;
	t168 = -t203 + t221;
	t225 = t181 * t184;
	t155 = t168 * t185 + t182 * t225;
	t217 = qJD(3) * t155;
	t135 = -t145 * t182 - t185 * t208 + t217;
	t195 = -t168 * t182 + t185 * t225;
	t148 = 0.1e1 / t195;
	t149 = 0.1e1 / t195 ^ 2;
	t150 = t148 * t149;
	t241 = 0.2e1 * t155 * t150 * t135;
	t146 = t166 * qJD(1) + t165 * qJD(2);
	t202 = t186 * t205;
	t222 = t184 * t183;
	t164 = -t202 + t222;
	t162 = t164 ^ 2;
	t177 = 0.1e1 / t181 ^ 2;
	t179 = 0.1e1 / t186 ^ 2;
	t161 = t162 * t177 * t179 + 0.1e1;
	t178 = 0.1e1 / t186;
	t180 = t178 * t179;
	t219 = qJD(2) * t183;
	t233 = (t146 * t164 * t179 + t162 * t180 * t219) * t177 / t161 ^ 2;
	t240 = -0.2e1 * t233;
	t176 = 0.1e1 / t181;
	t239 = t164 * t176;
	t224 = t181 * t186;
	t160 = atan2(t164, t224);
	t156 = sin(t160);
	t157 = cos(t160);
	t158 = 0.1e1 / t161;
	t210 = t178 * t239;
	t238 = (t157 * t210 - t156) * t158 + t156;
	t140 = t156 * t164 + t157 * t224;
	t137 = 0.1e1 / t140;
	t138 = 0.1e1 / t140 ^ 2;
	t163 = t166 ^ 2;
	t133 = t163 * t138 + 0.1e1;
	t201 = qJD(2) * t237 + qJD(1);
	t218 = qJD(2) * t186;
	t144 = -qJD(1) * t202 - t187 * t218 + t201 * t222;
	t232 = t144 * t138;
	t207 = t179 * t219;
	t194 = (t146 * t178 + t164 * t207) * t176;
	t129 = t158 * t194;
	t198 = -t156 * t224 + t157 * t164;
	t211 = t157 * t181 * t183;
	t125 = -qJD(2) * t211 + t198 * t129 + t156 * t146;
	t235 = t125 * t137 * t138;
	t236 = (-t163 * t235 - t166 * t232) / t133 ^ 2;
	t226 = t179 * t183;
	t197 = t164 * t226 + t165 * t178;
	t130 = t197 * t176 * t158;
	t126 = t198 * t130 + t156 * t165 - t211;
	t234 = t126 * t166;
	t231 = t149 * t155;
	t151 = t155 ^ 2;
	t230 = t150 * t151;
	t229 = t151 * t149;
	t228 = t156 * t166;
	t227 = t157 * t166;
	t223 = t181 * t187;
	t216 = -0.2e1 * t236;
	t215 = -0.2e1 * t235;
	t143 = 0.1e1 + t229;
	t136 = t195 * qJD(3) - t145 * t185 + t182 * t208;
	t213 = t136 * t231;
	t214 = 0.2e1 * (t135 * t230 + t213) / t143 ^ 2;
	t209 = t184 * t220;
	t204 = t178 * t240;
	t199 = -t185 * t148 - t182 * t231;
	t196 = t165 * t182 + t185 * t223;
	t153 = -t165 * t185 + t182 * t223;
	t147 = -qJD(1) * t203 - t184 * t219 + t201 * t221;
	t141 = 0.1e1 / t143;
	t131 = 0.1e1 / t133;
	t128 = t238 * t166;
	t124 = (t197 * t240 + (t146 * t226 + t147 * t178 + (t165 * t226 + (0.2e1 * t180 * t183 ^ 2 + t178) * t164) * qJD(2)) * t158) * t176;
	t1 = [(t166 * t204 + (-t144 * t178 + t166 * t207) * t158) * t176, t124, 0, 0, 0, 0; t164 * t137 * t216 + (t146 * t137 + (-t125 * t164 - t128 * t144) * t138) * t131 + ((t128 * t215 - t238 * t232) * t131 + (t128 * t216 + ((-t129 * t158 * t210 + 0.2e1 * t233) * t228 + (t204 * t239 + t129 + (-t129 + t194) * t158) * t227) * t131) * t138) * t166, 0.2e1 * (t137 * t168 - t138 * t234) * t236 + (t215 * t234 + t145 * t137 + (t168 * t125 - t126 * t144 + (-t181 * t218 + t124 * t164 + t130 * t146 + (-t130 * t224 + t165) * t129) * t227 + (-t129 * t130 * t164 + t147 + (-t124 * t186 + (qJD(2) * t130 + t129) * t183) * t181) * t228) * t138) * t131, 0, 0, 0, 0; (t148 * t153 - t196 * t231) * t214 + (-(t196 * qJD(3) - t147 * t185 - t182 * t209) * t148 + t196 * t241 + (-t153 * t135 - (t153 * qJD(3) - t147 * t182 + t185 * t209) * t155 + t196 * t136) * t149) * t141, t199 * t166 * t214 + (t199 * t144 + ((-qJD(3) * t148 + t241) * t182 + (t136 * t182 + (t135 + t217) * t185) * t149) * t166) * t141, (t148 * t195 + t229) * t214 + (-0.2e1 * t213 + (-t149 * t195 + t148 - 0.2e1 * t230) * t135) * t141, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:29:34
	% EndTime: 2019-10-10 11:29:35
	% DurationCPUTime: 1.97s
	% Computational Cost: add. (4522->149), mult. (13478->297), div. (726->12), fcn. (17045->13), ass. (0->124)
	t258 = cos(pkin(6));
	t262 = sin(qJ(1));
	t265 = cos(qJ(2));
	t328 = cos(qJ(1));
	t287 = t328 * qJD(1);
	t257 = sin(pkin(6));
	t292 = t257 * t328;
	t261 = sin(qJ(2));
	t307 = t262 * t261;
	t293 = t258 * t307;
	t304 = qJD(2) * t261;
	t333 = -qJD(1) * t293 - t262 * t304 + (t328 * qJD(2) * t258 + t287) * t265 - qJD(3) * t292;
	t291 = t328 * t261;
	t306 = t262 * t265;
	t245 = t258 * t291 + t306;
	t260 = sin(qJ(3));
	t264 = cos(qJ(3));
	t230 = t245 * t264 - t260 * t292;
	t310 = t257 * t264;
	t243 = t258 * t260 + t261 * t310;
	t218 = atan2(-t230, t243);
	t213 = sin(t218);
	t214 = cos(t218);
	t196 = -t213 * t230 + t214 * t243;
	t194 = 0.1e1 / t196 ^ 2;
	t290 = t328 * t265;
	t275 = -t290 + t293;
	t311 = t257 * t262;
	t235 = t260 * t311 - t264 * t275;
	t226 = t235 ^ 2;
	t192 = t226 * t194 + 0.1e1;
	t274 = t258 * t306 + t291;
	t222 = t245 * qJD(1) + t274 * qJD(2);
	t302 = qJD(3) * t264;
	t303 = qJD(3) * t260;
	t201 = -t222 * t264 + t275 * t303 + (t260 * t287 + t262 * t302) * t257;
	t321 = t201 * t194;
	t225 = t230 ^ 2;
	t240 = 0.1e1 / t243 ^ 2;
	t217 = t225 * t240 + 0.1e1;
	t215 = 0.1e1 / t217;
	t284 = t333 * t264;
	t289 = qJD(1) * t311;
	t203 = -t245 * t303 + t260 * t289 + t284;
	t242 = -t257 * t261 * t260 + t258 * t264;
	t309 = t257 * t265;
	t288 = qJD(2) * t309;
	t228 = t242 * qJD(3) + t264 * t288;
	t239 = 0.1e1 / t243;
	t315 = t230 * t240;
	t279 = -t203 * t239 + t228 * t315;
	t184 = t279 * t215;
	t280 = -t213 * t243 - t214 * t230;
	t179 = t280 * t184 - t213 * t203 + t214 * t228;
	t193 = 0.1e1 / t196;
	t195 = t193 * t194;
	t326 = t179 * t195;
	t300 = 0.2e1 * (-t226 * t326 + t235 * t321) / t192 ^ 2;
	t332 = t228 * t240;
	t244 = -t258 * t290 + t307;
	t276 = t239 * t244 + t309 * t315;
	t331 = t264 * t276;
	t234 = -t260 * t275 - t262 * t310;
	t259 = sin(qJ(6));
	t263 = cos(qJ(6));
	t212 = t234 * t263 - t259 * t274;
	t206 = 0.1e1 / t212;
	t207 = 0.1e1 / t212 ^ 2;
	t330 = -0.2e1 * t230;
	t329 = 0.2e1 * t235;
	t283 = t264 * t292;
	t200 = -qJD(1) * t283 + t235 * qJD(3) - t222 * t260;
	t221 = t244 * qJD(1) + t275 * qJD(2);
	t188 = t212 * qJD(6) + t200 * t259 - t221 * t263;
	t313 = t274 * t263;
	t211 = t234 * t259 + t313;
	t205 = t211 ^ 2;
	t199 = t205 * t207 + 0.1e1;
	t320 = t207 * t211;
	t301 = qJD(6) * t211;
	t189 = t200 * t263 + t221 * t259 - t301;
	t323 = t189 * t206 * t207;
	t325 = (t188 * t320 - t205 * t323) / t199 ^ 2;
	t317 = t239 * t332;
	t324 = (t203 * t315 - t225 * t317) / t217 ^ 2;
	t322 = t194 * t235;
	t319 = t213 * t235;
	t318 = t214 * t235;
	t316 = t230 * t239;
	t314 = t274 * t260;
	t312 = t274 * t264;
	t308 = t259 * t206;
	t305 = t263 * t211;
	t299 = 0.2e1 * t325;
	t298 = -0.2e1 * t324;
	t297 = t195 * t329;
	t296 = t239 * t324;
	t295 = t194 * t319;
	t294 = t194 * t318;
	t286 = 0.2e1 * t211 * t323;
	t285 = t317 * t330;
	t281 = -qJD(6) * t314 - t222;
	t229 = t245 * t260 + t283;
	t210 = -t229 * t263 + t244 * t259;
	t209 = -t229 * t259 - t244 * t263;
	t278 = t207 * t305 - t308;
	t277 = t229 * t239 + t242 * t315;
	t273 = -t213 + (t214 * t316 + t213) * t215;
	t202 = t245 * t302 + t333 * t260 - t264 * t289;
	t272 = qJD(6) * t275 + t221 * t260 - t274 * t302;
	t227 = -t243 * qJD(3) - t260 * t288;
	t223 = t274 * qJD(1) + t245 * qJD(2);
	t220 = t259 * t275 - t260 * t313;
	t219 = -t259 * t314 - t263 * t275;
	t197 = 0.1e1 / t199;
	t190 = 0.1e1 / t192;
	t187 = t215 * t331;
	t186 = t277 * t215;
	t183 = t273 * t235;
	t181 = (t213 * t244 + t214 * t309) * t264 + t280 * t187;
	t180 = t280 * t186 + t213 * t229 + t214 * t242;
	t178 = t277 * t298 + (t242 * t285 + t202 * t239 + (t203 * t242 + t227 * t230 - t228 * t229) * t240) * t215;
	t176 = t298 * t331 + (-t276 * t303 + (t285 * t309 + t223 * t239 + (-t228 * t244 + (t203 * t265 - t230 * t304) * t257) * t240) * t264) * t215;
	t1 = [t296 * t329 + (-t201 * t239 + t235 * t332) * t215, t176, t178, 0, 0, 0; t230 * t193 * t300 + (((qJD(3) * t245 - t289) * t260 - t284) * t193 + (t179 * t230 - t183 * t201) * t194) * t190 + (t183 * t194 * t300 + (0.2e1 * t183 * t326 - (-t184 * t215 * t316 + t298) * t295 - (t296 * t330 - t184 + (t184 - t279) * t215) * t294 - t273 * t321) * t190) * t235, (t181 * t322 + t193 * t312) * t300 + (-t181 * t321 + (t221 * t264 + t274 * t303) * t193 + (t181 * t297 + t194 * t312) * t179 - (-t176 * t230 - t187 * t203 + (-t264 * t304 - t265 * t303) * t257 + (-t187 * t243 + t244 * t264) * t184) * t294 - (-t244 * t303 - t176 * t243 - t187 * t228 + t223 * t264 + (t187 * t230 - t264 * t309) * t184) * t295) * t190, (t180 * t322 + t193 * t234) * t300 + (t180 * t179 * t297 - t200 * t193 + (t234 * t179 - t180 * t201 - (-t178 * t230 - t186 * t203 + t227 + (-t186 * t243 + t229) * t184) * t318 - (-t178 * t243 - t186 * t228 + t202 + (t186 * t230 - t242) * t184) * t319) * t194) * t190, 0, 0, 0; (-t206 * t209 + t210 * t320) * t299 + ((t210 * qJD(6) - t202 * t259 - t223 * t263) * t206 + t210 * t286 + (-t209 * t189 - (-t209 * qJD(6) - t202 * t263 + t223 * t259) * t211 - t210 * t188) * t207) * t197, (-t206 * t219 + t220 * t320) * t299 + (t220 * t286 + t281 * t206 * t263 + t272 * t308 + (t211 * t259 * t281 - t220 * t188 - t219 * t189 - t272 * t305) * t207) * t197, t278 * t235 * t299 + (-t278 * t201 + ((qJD(6) * t206 + t286) * t263 + (-t188 * t263 + (-t189 + t301) * t259) * t207) * t235) * t197, 0, 0, -0.2e1 * t325 + 0.2e1 * (t188 * t207 * t197 + (-t197 * t323 - t207 * t325) * t211) * t211;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end