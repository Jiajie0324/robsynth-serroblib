% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPPR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR8_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:09:40
% EndTime: 2019-03-09 16:09:46
% DurationCPUTime: 2.65s
% Computational Cost: add. (2313->313), mult. (6336->558), div. (0->0), fcn. (5664->8), ass. (0->152)
t199 = pkin(9) - qJ(5);
t115 = sin(qJ(3));
t111 = sin(pkin(6));
t119 = cos(qJ(2));
t170 = qJD(2) * t119;
t150 = t111 * t170;
t112 = cos(pkin(6));
t118 = cos(qJ(3));
t116 = sin(qJ(2));
t177 = t111 * t116;
t72 = t112 * t115 + t118 * t177;
t40 = qJD(3) * t72 + t115 * t150;
t156 = t115 * t177;
t71 = -t112 * t118 + t156;
t198 = t40 * qJ(5) + t71 * qJD(5);
t120 = -pkin(3) - pkin(4);
t171 = qJD(2) * t116;
t87 = t111 * t171;
t197 = t120 * t87;
t41 = -qJD(3) * t156 + (qJD(3) * t112 + t150) * t118;
t160 = t40 * pkin(3) - t41 * qJ(4) - t72 * qJD(4);
t176 = t111 * t119;
t158 = pkin(8) * t176;
t189 = pkin(1) * t116;
t159 = t112 * t189;
t65 = (t158 + t159) * qJD(2);
t17 = t65 + t160;
t99 = t115 * qJ(4);
t196 = -t118 * pkin(3) - t99;
t192 = -pkin(4) - pkin(10);
t106 = -pkin(3) + t192;
t179 = t106 * t115;
t98 = qJD(3) * t118;
t184 = qJ(4) * t98 + t115 * qJD(4);
t195 = (pkin(5) * t118 + t179) * qJD(3) + t184;
t117 = cos(qJ(6));
t109 = t117 ^ 2;
t114 = sin(qJ(6));
t174 = t114 ^ 2 - t109;
t144 = t174 * qJD(6);
t113 = qJ(4) + pkin(5);
t168 = qJD(3) * t115;
t157 = pkin(9) * t168;
t68 = -qJ(5) * t168 + qJD(5) * t118 + t157;
t194 = qJD(6) * (t113 * t118 + t179) + t68;
t193 = 0.2e1 * t111;
t121 = 0.2e1 * qJD(4);
t191 = pkin(4) * t40;
t190 = pkin(5) * t41;
t188 = pkin(9) * t111;
t59 = t158 + (pkin(9) + t189) * t112;
t60 = (-pkin(2) * t119 - pkin(9) * t116 - pkin(1)) * t111;
t172 = qJD(2) * t111;
t63 = (pkin(2) * t116 - pkin(9) * t119) * t172;
t91 = t112 * t119 * pkin(1);
t64 = pkin(8) * t87 - qJD(2) * t91;
t18 = -t115 * t63 + t118 * t64 + t59 * t168 - t60 * t98;
t82 = qJ(4) * t87;
t131 = -t18 + t82;
t164 = qJD(4) * t119;
t7 = (pkin(5) * t171 - t164) * t111 + t131 + t198;
t187 = t114 * t7;
t186 = t117 * t7;
t185 = t115 * t60 + t118 * t59;
t183 = qJ(5) * t71;
t175 = t117 * t119;
t133 = t111 * t175 - t114 * t71;
t24 = t133 * qJD(6) - t114 * t87 + t117 * t40;
t182 = t114 * t24;
t181 = t115 * t41;
t180 = t106 * t114;
t178 = t106 * t117;
t110 = t118 ^ 2;
t173 = t115 ^ 2 - t110;
t169 = qJD(3) * t114;
t167 = qJD(3) * t117;
t166 = qJD(3) * t119;
t165 = qJD(4) * t118;
t97 = qJD(6) * t114;
t163 = qJD(6) * t117;
t162 = qJD(6) * t118;
t161 = -0.2e1 * pkin(2) * qJD(3);
t77 = -pkin(2) + t196;
t58 = -t112 * pkin(2) + pkin(8) * t177 - t91;
t105 = t111 ^ 2;
t155 = t105 * t170;
t154 = t115 * t167;
t153 = t118 * t166;
t152 = t114 * t162;
t151 = t117 * t162;
t149 = t111 * t164;
t148 = t114 * t163;
t147 = t115 * t98;
t146 = -t115 * t59 + t118 * t60;
t145 = -t115 * t64 - t118 * t63 + t60 * t168 + t59 * t98;
t75 = t118 * pkin(4) - t77;
t143 = t173 * qJD(3);
t142 = t106 * t116;
t141 = pkin(3) * t87;
t140 = pkin(9) * t87;
t139 = t114 * t154;
t138 = t116 * t155;
t29 = pkin(3) * t176 - t146;
t27 = t71 * pkin(3) - t72 * qJ(4) + t58;
t13 = pkin(5) * t72 + t192 * t71 - t27;
t22 = pkin(4) * t176 - qJ(5) * t72 + t29;
t20 = pkin(10) * t176 + t22;
t4 = t114 * t13 + t117 * t20;
t43 = t114 * t176 + t117 * t71;
t137 = t114 * t43 - t117 * t133;
t48 = pkin(5) * t115 + pkin(10) * t118 + t75;
t80 = t199 * t115;
t35 = t114 * t48 + t117 * t80;
t136 = -qJ(4) * t40 - qJD(4) * t71;
t28 = -qJ(4) * t176 + t185;
t30 = -t114 * t41 - t72 * t163;
t134 = -t117 * t41 + t72 * t97;
t130 = t115 * t166 + t118 * t171;
t129 = -t18 + 0.2e1 * t82 - 0.2e1 * t149;
t127 = -qJ(5) * t41 - qJD(5) * t72 + t145;
t126 = t130 * t111;
t125 = t196 * qJD(3) + t165;
t12 = t131 - t149;
t14 = -t141 + t145;
t123 = t115 * t14 + t118 * t12 + (-t115 * t28 + t118 * t29) * qJD(3);
t81 = t199 * t118;
t122 = -t165 - qJD(6) * t81 + (-t106 * t118 + t113 * t115) * qJD(3);
t104 = qJ(4) * t121;
t95 = pkin(9) * t98;
t86 = 0.2e1 * t147;
t76 = t153 * t188;
t74 = -t114 * t98 - t115 * t163;
t73 = t115 * t97 - t117 * t98;
t70 = -qJ(5) * t98 - qJD(5) * t115 + t95;
t69 = pkin(3) * t168 - t184;
t52 = t120 * t168 + t184;
t34 = -t114 * t80 + t117 * t48;
t33 = 0.2e1 * t72 * t41;
t31 = t72 * t98 + t181;
t26 = -t28 - t183;
t25 = -pkin(4) * t71 - t27;
t23 = qJD(6) * t43 + t114 * t40 + t117 * t87;
t21 = -t113 * t176 + t183 + t185;
t16 = -t35 * qJD(6) - t114 * t70 + t195 * t117;
t15 = -t114 * t195 - t117 * t70 - t48 * t163 + t80 * t97;
t10 = -t17 - t191;
t9 = -t12 - t198;
t8 = t127 + t197;
t3 = -t114 * t20 + t117 * t13;
t2 = -t114 * t127 + t117 * (-pkin(10) * t40 - t160 + t190 - t191) - t4 * qJD(6) + (-t117 * t159 + (-pkin(8) * t175 - t114 * t142) * t111) * qJD(2);
t1 = t20 * t97 - t13 * t163 - t114 * (t192 * t40 - t17 + t190) - t117 * (t142 * t172 + t127);
t5 = [0, 0, 0, 0.2e1 * t138, 0.2e1 * (-t116 ^ 2 + t119 ^ 2) * t105 * qJD(2), 0.2e1 * t112 * t150, -0.2e1 * t112 * t87, 0, -0.2e1 * pkin(1) * t105 * t171 - 0.2e1 * t112 * t65, -0.2e1 * pkin(1) * t155 + 0.2e1 * t112 * t64, t33, -0.2e1 * t40 * t72 - 0.2e1 * t41 * t71 (-t119 * t41 + t72 * t171) * t193 (t119 * t40 - t71 * t171) * t193, -0.2e1 * t138, 0.2e1 * t58 * t40 + 0.2e1 * t65 * t71 + 0.2e1 * (t119 * t145 + t146 * t171) * t111, 0.2e1 * t58 * t41 + 0.2e1 * t65 * t72 + 0.2e1 * (-t18 * t119 - t185 * t171) * t111, 0.2e1 * t17 * t71 + 0.2e1 * t27 * t40 + 0.2e1 * (t119 * t14 - t29 * t171) * t111, -0.2e1 * t12 * t71 + 0.2e1 * t14 * t72 - 0.2e1 * t28 * t40 + 0.2e1 * t29 * t41, -0.2e1 * t17 * t72 - 0.2e1 * t27 * t41 + 0.2e1 * (-t119 * t12 + t28 * t171) * t111, 0.2e1 * t12 * t28 + 0.2e1 * t14 * t29 + 0.2e1 * t17 * t27, 0.2e1 * t10 * t72 + 0.2e1 * t25 * t41 + 0.2e1 * (t119 * t9 - t26 * t171) * t111, 0.2e1 * t10 * t71 + 0.2e1 * t25 * t40 + 0.2e1 * (-t119 * t8 + t22 * t171) * t111, -0.2e1 * t22 * t41 - 0.2e1 * t26 * t40 - 0.2e1 * t71 * t9 - 0.2e1 * t72 * t8, 0.2e1 * t10 * t25 + 0.2e1 * t22 * t8 + 0.2e1 * t26 * t9, 0.2e1 * t43 * t24, 0.2e1 * t133 * t24 - 0.2e1 * t23 * t43, 0.2e1 * t24 * t72 + 0.2e1 * t41 * t43, 0.2e1 * t133 * t41 - 0.2e1 * t23 * t72, t33, -0.2e1 * t133 * t7 + 0.2e1 * t2 * t72 + 0.2e1 * t21 * t23 + 0.2e1 * t3 * t41, 0.2e1 * t1 * t72 + 0.2e1 * t21 * t24 - 0.2e1 * t4 * t41 + 0.2e1 * t43 * t7; 0, 0, 0, 0, 0, t150, -t87, 0, -t65, t64, t31, -t115 * t40 + t118 * t41 + (-t115 * t72 - t118 * t71) * qJD(3) (t115 * t171 - t153) * t111, t126, 0, -pkin(2) * t40 - t118 * t65 + t76 + (qJD(3) * t58 - t140) * t115, -pkin(2) * t41 + t115 * t65 - t130 * t188 + t58 * t98, -t118 * t17 + t40 * t77 + t69 * t71 + t76 + (qJD(3) * t27 - t140) * t115 (t181 - t118 * t40 + (t115 * t71 + t118 * t72) * qJD(3)) * pkin(9) + t123, pkin(9) * t126 - t115 * t17 - t27 * t98 - t41 * t77 - t69 * t72, pkin(9) * t123 + t17 * t77 + t27 * t69, t25 * t98 + t10 * t115 + t41 * t75 + t52 * t72 + (t119 * t68 + t81 * t171) * t111, t25 * t168 - t10 * t118 + t40 * t75 + t52 * t71 + (-t119 * t70 + t80 * t171) * t111, -t115 * t8 + t118 * t9 + t40 * t81 - t41 * t80 - t68 * t71 - t70 * t72 + (-t115 * t26 - t118 * t22) * qJD(3), t10 * t75 + t22 * t70 + t25 * t52 + t26 * t68 + t8 * t80 - t81 * t9, t43 * t152 + (-t118 * t24 + t43 * t168) * t117, -t137 * t168 + (t182 + t117 * t23 + (t114 * t133 + t117 * t43) * qJD(6)) * t118 (t72 * t167 + t24) * t115 + (qJD(3) * t43 + t134) * t118 (-t72 * t169 - t23) * t115 + (qJD(3) * t133 - t30) * t118, t31, t16 * t72 + t23 * t81 + t34 * t41 + t133 * t68 + (t169 * t21 + t2) * t115 + (qJD(3) * t3 - t163 * t21 - t187) * t118, t15 * t72 + t24 * t81 - t35 * t41 - t43 * t68 + (t167 * t21 + t1) * t115 + (-qJD(3) * t4 + t21 * t97 - t186) * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, -0.2e1 * t143, 0, 0, 0, t115 * t161, t118 * t161, -0.2e1 * t118 * t69 + 0.2e1 * t77 * t168, 0, -0.2e1 * t115 * t69 - 0.2e1 * t77 * t98, 0.2e1 * t77 * t69, 0.2e1 * t115 * t52 + 0.2e1 * t75 * t98, -0.2e1 * t118 * t52 + 0.2e1 * t75 * t168, -0.2e1 * t115 * t70 + 0.2e1 * t118 * t68 + 0.2e1 * (t115 * t81 - t118 * t80) * qJD(3), 0.2e1 * t52 * t75 - 0.2e1 * t68 * t81 + 0.2e1 * t70 * t80, -0.2e1 * t109 * t147 - 0.2e1 * t110 * t148, 0.2e1 * t110 * t144 + 0.4e1 * t118 * t139, 0.2e1 * t115 * t152 + 0.2e1 * t173 * t167, -0.2e1 * t114 * t143 + 0.2e1 * t115 * t151, t86, 0.2e1 * (t169 * t81 + t16) * t115 + 0.2e1 * (qJD(3) * t34 + t114 * t68 - t163 * t81) * t118, 0.2e1 * (t167 * t81 + t15) * t115 + 0.2e1 * (-qJD(3) * t35 + t117 * t68 + t81 * t97) * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, -t40, t87, -t145, t18, 0.2e1 * t141 - t145, -pkin(3) * t41 + t136, t129, -pkin(3) * t14 + qJ(4) * t12 + qJD(4) * t28, t129 + t198, t127 + 0.2e1 * t197, -t120 * t41 - t136, -qJ(4) * t9 - qJD(4) * t26 + t120 * t8, -t43 * t163 - t182, qJD(6) * t137 + t114 * t23 - t117 * t24, t30, t134, 0, -t41 * t180 - qJD(4) * t133 + t113 * t23 + t186 + (-t114 * t21 - t178 * t72) * qJD(6), -t41 * t178 + qJD(4) * t43 + t113 * t24 - t187 + (-t117 * t21 + t72 * t180) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, -t168, 0, -t95, t157, -t95, t125, -t157, t125 * pkin(9), -t68, t70, -t165 + (-t118 * t120 + t99) * qJD(3), -qJ(4) * t68 + qJD(4) * t81 + t120 * t70, -t118 * t144 - t139, -0.4e1 * t118 * t148 + t174 * t168, t74, t73, 0, t122 * t114 - t194 * t117, t194 * t114 + t122 * t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t104, t121, 0, 0, t104, 0.2e1 * t148, -0.2e1 * t144, 0, 0, 0, 0.2e1 * qJD(4) * t117 - 0.2e1 * t113 * t97, -0.2e1 * qJD(4) * t114 - 0.2e1 * t113 * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, t41, 0, t14, 0, t87, -t41, t8, 0, 0, 0, 0, 0, t30, t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, t95, 0, 0, -t98, t70, 0, 0, 0, 0, 0, t74, t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t40, 0, t10, 0, 0, 0, 0, 0, -t134, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, t168, 0, t52, 0, 0, 0, 0, 0, -t73, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t23, t41, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152 + t154, -t114 * t168 + t151, t98, t16, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, t97, 0, -t106 * t163, t106 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, -t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
