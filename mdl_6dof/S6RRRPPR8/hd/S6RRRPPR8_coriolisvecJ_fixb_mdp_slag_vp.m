% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPPR8_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPPR8_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR8_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR8_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR8_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRRPPR8_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:09:43
% EndTime: 2019-03-09 16:09:57
% DurationCPUTime: 8.15s
% Computational Cost: add. (5253->593), mult. (13803->758), div. (0->0), fcn. (10153->8), ass. (0->229)
t536 = cos(qJ(3));
t668 = cos(pkin(6));
t598 = t668 * qJD(1);
t568 = t598 + qJD(2);
t555 = t536 * t568;
t537 = cos(qJ(2));
t530 = sin(pkin(6));
t617 = qJD(1) * qJD(2);
t599 = t530 * t617;
t581 = t537 * t599;
t533 = sin(qJ(3));
t534 = sin(qJ(2));
t649 = t530 * t534;
t611 = t533 * t649;
t585 = qJD(3) * t611;
t414 = qJD(1) * t585 - qJD(3) * t555 - t536 * t581;
t633 = qJD(1) * t530;
t606 = t534 * t633;
t460 = t533 * t568 + t536 * t606;
t628 = qJD(3) * t460;
t415 = t533 * t581 + t628;
t607 = pkin(1) * t668;
t648 = t530 * t537;
t549 = pkin(8) * t648 + t534 * t607;
t674 = t549 * qJD(2);
t470 = qJD(1) * t674;
t362 = t415 * pkin(3) + t414 * qJ(4) - t460 * qJD(4) + t470;
t632 = qJD(1) * t537;
t605 = t530 * t632;
t586 = t533 * t605;
t627 = qJD(3) * t533;
t687 = t586 - t627;
t487 = t533 * t668 + t536 * t649;
t631 = qJD(2) * t530;
t602 = t537 * t631;
t423 = qJD(3) * t487 + t533 * t602;
t424 = -t585 + (qJD(3) * t668 + t602) * t536;
t372 = t423 * pkin(3) - t424 * qJ(4) - t487 * qJD(4) + t674;
t501 = -qJD(3) + t605;
t583 = pkin(1) * t598;
t478 = pkin(8) * t605 + t534 * t583;
t432 = pkin(9) * t568 + t478;
t473 = (-pkin(2) * t537 - pkin(9) * t534 - pkin(1)) * t530;
t442 = qJD(1) * t473;
t639 = t533 * t432 - t536 * t442;
t686 = qJD(4) + t639;
t526 = t530 ^ 2;
t685 = -0.2e1 * t526 * t617;
t669 = pkin(9) - qJ(5);
t684 = MDP(5) * (t534 ^ 2 - t537 ^ 2);
t582 = t534 * t599;
t574 = pkin(3) * t582;
t564 = (pkin(2) * t534 - pkin(9) * t537) * t530;
t477 = qJD(2) * t564;
t468 = qJD(1) * t477;
t676 = -pkin(8) * t649 + t537 * t607;
t479 = t676 * qJD(2);
t469 = qJD(1) * t479;
t626 = qJD(3) * t536;
t587 = t432 * t626 + t442 * t627 - t536 * t468 + t533 * t469;
t363 = -t574 + t587;
t396 = t536 * t432 + t533 * t442;
t494 = t501 * qJ(4);
t392 = -t494 + t396;
t683 = t392 * t501 + t363;
t475 = -pkin(8) * t606 + t537 * t583;
t476 = qJD(1) * t564;
t637 = t536 * t475 + t533 * t476;
t401 = qJ(4) * t606 + t637;
t682 = -qJD(5) * t536 - t627 * t669 - t401;
t458 = t533 * t606 - t555;
t653 = t458 * t501;
t681 = -t414 + t653;
t652 = t460 * t501;
t680 = t415 - t652;
t679 = -t460 * qJ(5) + t686;
t596 = -t533 * t475 + t476 * t536;
t677 = qJD(5) * t533 - t626 * t669 - t596;
t675 = t533 * qJD(4) + t478 + (-t536 * t605 + t626) * qJ(4);
t499 = qJ(4) * t582;
t492 = qJD(4) * t501;
t588 = t432 * t627 - t442 * t626 - t533 * t468 - t536 * t469;
t573 = -t492 - t588;
t554 = -t415 * qJ(5) - t458 * qJD(5) - t573;
t351 = -t499 + t554;
t349 = pkin(5) * t582 - t351;
t404 = t460 * pkin(3) + t458 * qJ(4);
t451 = qJD(6) + t460;
t670 = -pkin(4) - pkin(10);
t618 = pkin(3) - t670;
t673 = t451 * (-pkin(5) * t458 - qJD(6) * t618 + t460 * t670 - t404) - t349;
t457 = t460 ^ 2;
t539 = qJD(1) ^ 2;
t671 = pkin(3) + pkin(4);
t531 = qJ(4) + pkin(5);
t667 = qJ(4) * t415;
t486 = -t536 * t668 + t611;
t666 = qJ(5) * t486;
t378 = qJ(5) * t458 + t396;
t373 = -t378 + t494;
t665 = t373 * t501;
t532 = sin(qJ(6));
t552 = -qJD(6) * t458 - t582;
t535 = cos(qJ(6));
t621 = qJD(6) * t535;
t640 = t535 * t415 + t501 * t621;
t374 = t532 * t552 + t640;
t664 = t374 * t532;
t431 = -t568 * pkin(2) - t475;
t385 = t458 * pkin(3) - t460 * qJ(4) + t431;
t663 = t385 * t460;
t408 = t458 * t532 - t535 * t501;
t661 = t408 * t451;
t660 = t408 * t458;
t659 = t408 * t501;
t410 = t458 * t535 + t501 * t532;
t658 = t410 * t458;
t657 = t410 * t501;
t656 = t414 * t532;
t655 = t414 * t535;
t654 = t458 * t460;
t651 = t501 * t536;
t650 = t526 * t539;
t647 = t533 * t537;
t646 = t535 * t537;
t645 = t536 * t537;
t612 = qJ(5) * t645;
t644 = (-t534 * t671 - t612) * t633 + t677;
t643 = -qJ(5) * t586 + t682;
t642 = t671 * t687 + t675;
t641 = pkin(3) * t687 + t675;
t472 = pkin(9) * t668 + t549;
t638 = t536 * t472 + t533 * t473;
t636 = -(pkin(5) * t534 + qJ(5) * t647) * t633 + t682;
t630 = qJD(2) * t534;
t629 = qJD(2) * t536;
t625 = qJD(4) * t537;
t624 = qJD(5) * t460;
t364 = t501 * t618 + t679;
t623 = qJD(6) * t364;
t622 = qJD(6) * t532;
t616 = pkin(9) * t501 * t533;
t615 = pkin(9) * t651;
t498 = -t536 * pkin(3) - t533 * qJ(4) - pkin(2);
t614 = pkin(9) * t630;
t613 = pkin(9) * t629;
t471 = -t668 * pkin(2) - t676;
t604 = t530 * t630;
t603 = t530 * t625;
t597 = -t533 * t472 + t473 * t536;
t595 = t451 * t532;
t563 = qJD(5) - t385;
t371 = -pkin(4) * t458 + t563;
t594 = (-qJD(5) - t371) * t460;
t593 = t451 * t535;
t592 = t618 * t534;
t488 = t536 * pkin(4) - t498;
t559 = qJ(5) * t414 + t587;
t565 = t592 * t631;
t350 = -qJD(1) * t565 + t559 - t624;
t359 = pkin(5) * t460 + t458 * t670 + t563;
t591 = -qJD(6) * t359 - t350;
t589 = t526 * t534 * t537 * MDP(4);
t579 = pkin(1) * t685;
t399 = pkin(3) * t648 - t597;
t436 = (t532 * t647 + t534 * t535) * t633;
t578 = t532 * t627 - t436;
t437 = (-t532 * t534 + t533 * t646) * t633;
t577 = t535 * t627 - t437;
t450 = pkin(5) * t533 + pkin(10) * t536 + t488;
t576 = -qJD(6) * t450 + (-t592 - t612) * t633 + t677;
t503 = t669 * t533;
t575 = qJD(6) * t503 - t675 + t501 * (pkin(5) * t536 - t533 * t618);
t397 = t486 * pkin(3) - t487 * qJ(4) + t471;
t572 = t671 * t604;
t345 = t359 * t535 - t364 * t532;
t346 = t359 * t532 + t364 * t535;
t367 = pkin(5) * t487 + t486 * t670 - t397;
t381 = pkin(4) * t648 - qJ(5) * t487 + t399;
t376 = pkin(10) * t648 + t381;
t571 = t367 * t535 - t376 * t532;
t570 = t367 * t532 + t376 * t535;
t398 = -qJ(4) * t648 + t638;
t566 = -t472 * t626 - t473 * t627 + t477 * t536 - t533 * t479;
t562 = -t486 * t532 + t530 * t646;
t426 = t486 * t535 + t532 * t648;
t558 = t501 * t639 + t588;
t557 = -t396 * t501 - t587;
t556 = -t472 * t627 + t473 * t626 + t533 * t477 + t536 * t479;
t551 = qJ(4) * t604 + t556;
t550 = -t451 * t593 + t656;
t548 = pkin(1) * (-qJD(2) * t598 + t650);
t369 = -pkin(5) * t501 - t373;
t547 = -t618 * t414 + (-t369 + t378) * t451;
t545 = t414 + t653;
t544 = -qJ(5) * t424 - qJD(5) * t487 - t566;
t543 = qJ(5) * t423 + qJD(5) * t486 + t551;
t541 = -qJD(1) * t572 + t559;
t357 = -t415 * pkin(4) - t362;
t504 = t669 * t536;
t496 = 0.2e1 * t499;
t456 = t458 ^ 2;
t407 = t414 * t533;
t403 = -pkin(3) * t606 - t596;
t400 = t414 * t487;
t391 = -pkin(4) * t460 - t404;
t390 = pkin(3) * t501 + t686;
t388 = -t398 - t666;
t386 = -pkin(4) * t486 - t397;
t383 = qJD(6) * t562 + t423 * t535 - t532 * t604;
t382 = qJD(6) * t426 + t423 * t532 + t535 * t604;
t380 = -t531 * t648 + t638 + t666;
t375 = qJD(6) * t410 + t415 * t532 + t535 * t582;
t370 = -pkin(3) * t604 - t566;
t368 = t501 * t671 + t679;
t366 = t551 - t603;
t361 = -t423 * pkin(4) - t372;
t360 = t499 + t573;
t358 = -t543 + t603;
t356 = -t572 + t544;
t355 = (pkin(5) * t630 - t625) * t530 + t543;
t354 = -t565 + t544;
t353 = t424 * pkin(5) + t423 * t670 - t372;
t352 = t541 - t624;
t348 = -t414 * pkin(5) + t415 * t670 - t362;
t347 = t535 * t348;
t344 = -qJD(6) * t346 - t350 * t532 + t347;
t343 = qJD(6) * t345 + t348 * t532 + t350 * t535;
t1 = [(-t375 * t487 - t382 * t451 - t408 * t424 - t414 * t562) * MDP(29) + (-t566 * t501 + t674 * t458 + t471 * t415 + t470 * t486 + t431 * t423 + (t587 * t537 + (qJD(1) * t597 - t639) * t630) * t530) * MDP(16) + (t556 * t501 + t674 * t460 - t471 * t414 + t470 * t487 + t431 * t424 + (-t588 * t537 + (-qJD(1) * t638 - t396) * t630) * t530) * MDP(17) + (-t470 * t668 + t534 * t579 - t568 * t674) * MDP(9) + (t424 * t451 - t400) * MDP(30) + (t424 * t460 - t400) * MDP(11) + (MDP(6) * t602 - MDP(7) * t604) * (0.2e1 * t598 + qJD(2)) + (t360 * t398 + t362 * t397 + t363 * t399 + t366 * t392 + t370 * t390 + t372 * t385) * MDP(21) + (t351 * t388 + t352 * t381 + t356 * t368 + t357 * t386 + t358 * t373 + t361 * t371) * MDP(25) + (-(qJD(6) * t571 + t353 * t532 + t354 * t535) * t451 + t570 * t414 - t343 * t487 - t346 * t424 + t355 * t410 + t380 * t374 + t349 * t426 + t369 * t383) * MDP(32) + ((-qJD(6) * t570 + t353 * t535 - t354 * t532) * t451 - t571 * t414 + t344 * t487 + t345 * t424 + t355 * t408 + t380 * t375 - t349 * t562 + t369 * t382) * MDP(31) + (t374 * t562 - t375 * t426 - t382 * t410 - t383 * t408) * MDP(27) + t684 * t685 + (t374 * t426 + t383 * t410) * MDP(26) + (-t501 * t530 - t526 * t632) * MDP(15) * t630 + (t374 * t487 + t383 * t451 + t410 * t424 - t414 * t426) * MDP(28) + (t414 * t486 - t415 * t487 - t423 * t460 - t424 * t458) * MDP(12) + (-t360 * t486 + t363 * t487 - t366 * t458 + t370 * t460 + t390 * t424 - t392 * t423 - t398 * t415 - t399 * t414) * MDP(19) + (-t351 * t486 - t352 * t487 - t356 * t460 - t358 * t458 - t368 * t424 - t373 * t423 + t381 * t414 - t388 * t415) * MDP(24) + 0.2e1 * t589 * t617 + (-t424 * t501 + (t414 * t537 + (qJD(1) * t487 + t460) * t630) * t530) * MDP(13) + (t423 * t501 + (t415 * t537 + (-qJD(1) * t486 - t458) * t630) * t530) * MDP(14) + (-t362 * t487 - t366 * t501 - t372 * t460 - t385 * t424 + t397 * t414 + (-t360 * t537 + (qJD(1) * t398 + t392) * t630) * t530) * MDP(20) + (t362 * t486 + t370 * t501 + t372 * t458 + t385 * t423 + t397 * t415 + (t363 * t537 + (-qJD(1) * t399 - t390) * t630) * t530) * MDP(18) + (t357 * t487 + t358 * t501 + t361 * t460 + t371 * t424 - t386 * t414 + (t351 * t537 + (-qJD(1) * t388 - t373) * t630) * t530) * MDP(22) + (-t356 * t501 + t357 * t486 + t361 * t458 + t371 * t423 + t386 * t415 + (-t352 * t537 + (qJD(1) * t381 + t368) * t630) * t530) * MDP(23) + (-t469 * t668 - t479 * t568 + t537 * t579) * MDP(10); (-t460 * t651 - t407) * MDP(11) + (-t451 * t651 - t407) * MDP(30) + (-pkin(8) * t581 + t478 * t568 + t534 * t548) * MDP(9) + (-t533 * t680 + t536 * t681) * MDP(12) + (t401 * t458 - t403 * t460 + (t360 - t501 * t390 + (-t415 + t628) * pkin(9)) * t536 + ((qJD(3) * t458 - t414) * pkin(9) + t683) * t533) * MDP(19) + (pkin(8) * t582 + t475 * t568 + t537 * t548) * MDP(10) + (-t589 + (-MDP(6) * t537 + MDP(7) * t534) * t530 * t668) * t539 + (-pkin(2) * t415 - t470 * t536 + t596 * t501 - t478 * t458 + (t431 * t533 + t615) * qJD(3) + (t639 * t534 + (-t431 * t537 - t614) * t533) * t633) * MDP(16) + t650 * t684 + t501 * MDP(15) * t606 + (-t374 * t535 * t536 + (t536 * t622 + t577) * t410) * MDP(26) + (-(t450 * t535 - t503 * t532) * t414 + t344 * t533 + t504 * t375 + (t532 * t576 - t535 * t575) * t451 + t636 * t408 + t578 * t369 + (-t345 * t501 - t349 * t532 - t369 * t621) * t536) * MDP(31) + ((t450 * t532 + t503 * t535) * t414 - t343 * t533 + t504 * t374 + (t532 * t575 + t535 * t576) * t451 + t636 * t410 + t577 * t369 + (t346 * t501 - t349 * t535 + t369 * t622) * t536) * MDP(32) + (t362 * t498 - t390 * t403 - t392 * t401 - t641 * t385 + (t360 * t536 + t363 * t533 + (t390 * t536 - t392 * t533) * qJD(3)) * pkin(9)) * MDP(21) + (-t362 * t536 - t403 * t501 + t415 * t498 - t641 * t458 + (t385 * t533 + t615) * qJD(3) + (t390 * t534 + (-t385 * t537 - t614) * t533) * t633) * MDP(18) + (-t351 * t504 + t352 * t503 + t357 * t488 - t368 * t644 + t371 * t642 - t373 * t643) * MDP(25) + (pkin(2) * t414 + t470 * t533 - t637 * t501 - t478 * t460 + (t431 * t536 - t616) * qJD(3) + (-t431 * t645 + (t396 - t613) * t534) * t633) * MDP(17) + (t371 * t626 + t357 * t533 - t414 * t488 - t643 * t501 + t642 * t460 + (-t371 * t645 + (qJD(2) * t504 + t373) * t534) * t633) * MDP(22) + (-t501 * t626 + (t501 * t645 + (qJD(2) * t533 - t460) * t534) * t633) * MDP(13) + (-t362 * t533 + t401 * t501 + t414 * t498 + t641 * t460 + (-t385 * t536 + t616) * qJD(3) + (t385 * t645 + (-t392 + t613) * t534) * t633) * MDP(20) + (t501 * t627 + (-t501 * t647 + (t458 + t629) * t534) * t633) * MDP(14) + (t371 * t627 - t357 * t536 + t415 * t488 + t644 * t501 + t642 * t458 + (-t371 * t647 + (qJD(2) * t503 - t368) * t534) * t633) * MDP(23) + (t374 * t533 + t577 * t451 + (t451 * t622 + t655 - t657) * t536) * MDP(28) + (-t375 * t533 - t578 * t451 + (t451 * t621 - t656 + t659) * t536) * MDP(29) + (t408 * t437 + t410 * t436 + (-t408 * t535 - t410 * t532) * t627 + (t664 + t375 * t535 + (-t408 * t532 + t410 * t535) * qJD(6)) * t536) * MDP(27) + (t503 * t414 + t415 * t504 + t644 * t460 + t643 * t458 + (t368 * t501 + t351) * t536 + (-t352 + t665) * t533) * MDP(24); MDP(11) * t654 + (-t456 + t457) * MDP(12) - t545 * MDP(13) + (-t652 - t415) * MDP(14) + MDP(15) * t582 + (-t431 * t460 + t557) * MDP(16) + (t431 * t458 + t558) * MDP(17) + (-t404 * t458 + t557 + 0.2e1 * t574 - t663) * MDP(18) + (pkin(3) * t414 - t667 + (t392 - t396) * t460 + (t390 - t686) * t458) * MDP(19) + (-t385 * t458 + t404 * t460 - 0.2e1 * t492 + t496 - t558) * MDP(20) + (-pkin(3) * t363 + qJ(4) * t360 - t385 * t404 - t390 * t396 + t392 * t686) * MDP(21) + (t371 * t458 - t391 * t460 - t501 * t679 + t496 - t554) * MDP(22) + (t378 * t501 - t391 * t458 - 0.2e1 * t671 * t582 + t559 + t594) * MDP(23) + (t667 - t414 * t671 + (t373 + t378) * t460 + (-t368 + t679) * t458) * MDP(24) + (-qJ(4) * t351 - t352 * t671 - t368 * t378 - t371 * t391 - t373 * t679) * MDP(25) + (-t410 * t593 - t664) * MDP(26) + ((-t374 + t661) * t535 + (t410 * t451 + t375) * t532) * MDP(27) + (t550 + t658) * MDP(28) + (t451 * t595 + t655 - t660) * MDP(29) + t451 * t458 * MDP(30) + (t345 * t458 + t531 * t375 + t408 * t679 + t547 * t532 - t535 * t673) * MDP(31) + (-t346 * t458 + t531 * t374 + t410 * t679 + t532 * t673 + t547 * t535) * MDP(32); (t663 + t683) * MDP(21) + (t541 + t594 - t665) * MDP(25) + (t656 + t659) * MDP(31) + (t655 + t657) * MDP(32) + (-MDP(31) * t593 + MDP(32) * t595) * t451 + (-MDP(18) + MDP(23)) * (t582 - t654) + (MDP(20) + MDP(22)) * (-t501 ^ 2 - t457) + (-MDP(19) + MDP(24)) * t545; t681 * MDP(22) + t680 * MDP(23) + (-t457 - t456) * MDP(24) + (t368 * t460 + t373 * t458 + t357) * MDP(25) + (-t451 ^ 2 * t532 - t655 - t660) * MDP(31) + (t550 - t658) * MDP(32); -t408 ^ 2 * MDP(27) + (t640 + t661) * MDP(28) - t414 * MDP(30) + (t346 * t451 + t347) * MDP(31) + (t345 * t451 + t369 * t408) * MDP(32) + (MDP(26) * t408 + MDP(27) * t410 + MDP(29) * t451 - MDP(31) * t369) * t410 + (MDP(29) * t552 - MDP(31) * t623 + MDP(32) * t591) * t535 + (t552 * MDP(28) + (-qJD(6) * t501 - t415) * MDP(29) + t591 * MDP(31) + (-t348 + t623) * MDP(32)) * t532;];
tauc  = t1;
