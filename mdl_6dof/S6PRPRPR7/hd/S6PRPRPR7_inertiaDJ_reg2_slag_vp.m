% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRPR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRPR7_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:53:47
% EndTime: 2019-03-08 19:53:52
% DurationCPUTime: 1.56s
% Computational Cost: add. (880->155), mult. (2081->273), div. (0->0), fcn. (1809->8), ass. (0->108)
t123 = pkin(4) + pkin(9);
t62 = cos(qJ(4));
t102 = t123 * t62;
t60 = sin(qJ(4));
t115 = qJ(5) * t60;
t129 = t102 + t115;
t114 = t62 * qJ(5);
t128 = -t60 * pkin(4) + t114;
t54 = t60 ^ 2;
t56 = t62 ^ 2;
t87 = (t54 - t56) * qJD(4);
t59 = sin(qJ(6));
t53 = t59 ^ 2;
t61 = cos(qJ(6));
t55 = t61 ^ 2;
t118 = t53 - t55;
t86 = t118 * qJD(6);
t110 = qJD(5) * t60;
t65 = -pkin(2) - pkin(8);
t122 = pkin(5) - t65;
t35 = t122 * t60;
t127 = qJD(4) * (-t123 * t60 + t114) + qJD(6) * t35 + t110;
t57 = sin(pkin(6));
t63 = cos(qJ(2));
t120 = t57 * t63;
t58 = cos(pkin(6));
t23 = t62 * t120 + t58 * t60;
t121 = sin(qJ(2));
t89 = qJD(2) * t121;
t45 = t57 * t89;
t12 = t23 * qJD(4) - t60 * t45;
t103 = t60 * t120;
t49 = t62 * qJD(4);
t13 = -qJD(4) * t103 - t62 * t45 + t58 * t49;
t24 = t58 * t62 - t103;
t4 = -t12 * t60 - t13 * t62 + (t23 * t60 + t24 * t62) * qJD(4);
t93 = t57 * t121;
t15 = t23 * t59 + t61 * t93;
t113 = qJD(2) * t63;
t98 = t57 * t113;
t7 = -t15 * qJD(6) + t13 * t61 - t59 * t98;
t14 = t23 * t61 - t59 * t93;
t74 = t14 * t59 - t15 * t61;
t8 = t14 * qJD(6) + t13 * t59 + t61 * t98;
t2 = -t74 * qJD(6) + t8 * t59 + t7 * t61;
t112 = qJD(4) * t59;
t101 = t35 * t112;
t109 = qJD(6) * t59;
t34 = qJ(3) - t128;
t31 = t60 * pkin(9) + t34;
t92 = t122 * t62;
t81 = t61 * t92;
t82 = -t62 * qJD(5) + qJD(3);
t5 = t31 * t109 - t61 * (t129 * qJD(4) + t82) + t101 - qJD(6) * t81;
t11 = t61 * t31 + t59 * t92;
t6 = -t59 * t82 - t11 * qJD(6) + (-t59 * t102 + (-t59 * qJ(5) - t61 * t122) * t60) * qJD(4);
t10 = -t59 * t31 + t81;
t77 = t10 * t59 - t11 * t61;
t1 = -t77 * qJD(6) - t5 * t59 + t6 * t61;
t9 = t24 * t12;
t126 = 0.2e1 * t57 ^ 2 * t63 * t89 + 0.2e1 * t23 * t13 - 0.2e1 * t9;
t125 = 0.2e1 * qJD(3);
t124 = 0.2e1 * qJD(5);
t119 = qJ(3) * t98 + qJD(3) * t93;
t117 = t53 + t55;
t111 = qJD(4) * t61;
t108 = qJD(6) * t61;
t107 = qJD(6) * t62;
t106 = qJD(6) * t123;
t48 = t60 * qJD(4);
t105 = qJ(3) * qJD(4);
t104 = qJ(5) * qJD(6);
t100 = t59 * t107;
t99 = t61 * t107;
t97 = t65 * t48;
t96 = t61 * t49;
t95 = t59 * t108;
t94 = t60 * t49;
t91 = t117 * t60;
t88 = qJD(4) * t121;
t85 = qJD(6) * (t54 + t56);
t42 = 0.2e1 * t94;
t84 = t59 * t96;
t83 = t54 * t95;
t78 = t10 * t61 + t11 * t59;
t75 = t14 * t61 + t15 * t59;
t71 = -t12 * qJ(5) + t24 * qJD(5);
t69 = t24 * t108 - t12 * t59;
t68 = -t24 * t109 - t12 * t61;
t47 = t65 * t49;
t32 = -pkin(5) * t49 + t47;
t67 = t129 * qJD(6) + t32;
t21 = t128 * qJD(4) + t110;
t66 = t4 * t65;
t52 = qJ(3) * t125;
t51 = qJ(5) * t124;
t43 = -0.2e1 * t94;
t33 = 0.2e1 * t87;
t29 = -t59 * t48 + t99;
t28 = t60 * t108 + t59 * t49;
t27 = t61 * t48 + t100;
t26 = -t60 * t109 + t96;
t25 = qJD(4) * t91;
t20 = (pkin(4) * t62 + t115) * qJD(4) + t82;
t19 = (t62 * t113 - t60 * t88) * t57;
t18 = (t60 * t113 + t62 * t88) * t57;
t17 = -t60 * t86 + t84;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t14 * t7 + 0.2e1 * t15 * t8 - 0.2e1 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, -t98, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t98, -pkin(2) * t45 + t119, 0, 0, 0, 0, 0, 0, t18, t19, -t4, t66 + t119, 0, 0, 0, 0, 0, 0, -t4, -t18, -t19 (t34 * t113 + t121 * t20) * t57 + t66, 0, 0, 0, 0, 0, 0 (-t111 * t24 + t7) * t62 + (-qJD(4) * t14 - t68) * t60 (t112 * t24 - t8) * t62 + (qJD(4) * t15 + t69) * t60, -t74 * t49 + (-qJD(6) * t75 - t59 * t7 + t61 * t8) * t60, t7 * t10 + t8 * t11 + t12 * t35 + t14 * t6 - t15 * t5 + t24 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, t52, t43, t33, 0, t42, 0, 0, 0.2e1 * qJD(3) * t60 + 0.2e1 * t62 * t105, 0.2e1 * qJD(3) * t62 - 0.2e1 * t60 * t105, 0, t52, 0, 0, 0, t43, t33, t42, 0, -0.2e1 * t20 * t60 - 0.2e1 * t34 * t49, -0.2e1 * t20 * t62 + 0.2e1 * t34 * t48, 0.2e1 * t34 * t20, 0.2e1 * t53 * t94 + 0.2e1 * t83, -0.2e1 * t54 * t86 + 0.4e1 * t60 * t84, -0.2e1 * t59 * t87 + 0.2e1 * t60 * t99, 0.2e1 * t55 * t94 - 0.2e1 * t83, -0.2e1 * t100 * t60 - 0.2e1 * t61 * t87, t43, 0.2e1 * (t111 * t35 + t6) * t62 + 0.2e1 * (-qJD(4) * t10 - t109 * t35 - t32 * t61) * t60, 0.2e1 * (t5 - t101) * t62 + 0.2e1 * (qJD(4) * t11 - t108 * t35 + t32 * t59) * t60, -0.2e1 * t77 * t49 + 0.2e1 * (-qJD(6) * t78 - t5 * t61 - t59 * t6) * t60, 0.2e1 * t10 * t6 - 0.2e1 * t11 * t5 - 0.2e1 * t35 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(4) * t75 - t12) * t60 + (qJD(4) * t24 - t2) * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 * t85, t61 * t85, 0 (qJD(4) * t78 + t32) * t60 + (-qJD(4) * t35 - t1) * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (0.1e1 - t117) * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, -t12, -t13 * pkin(4) + t71, 0, 0, 0, 0, 0, 0, t69, t68, -t2, -t123 * t2 + t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, -t49, 0, -t97, -t47, 0, 0, 0, t48, t49, 0, 0, 0, -t21, t97, t47, t21 * t65, t17, -t118 * t49 - 0.4e1 * t60 * t95, -t27, -t17, -t29, 0, -t127 * t61 + t67 * t59, t127 * t59 + t67 * t61, -t1, t32 * qJ(5) - t35 * qJD(5) - t1 * t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, -t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t49, t21, 0, 0, 0, 0, 0, 0, t28, t26, -t25, t110 + (-t123 * t91 + t114) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, t51, -0.2e1 * t95, 0.2e1 * t86, 0, 0.2e1 * t95, 0, 0, 0.2e1 * qJD(5) * t59 + 0.2e1 * t104 * t61, 0.2e1 * qJD(5) * t61 - 0.2e1 * t104 * t59, 0, t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, 0, t97, 0, 0, 0, 0, 0, 0, -t27, -t29, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, 0, 0, 0, 0, 0, 0, 0, 0, tt7, -t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, t26, -t48, t6, t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, 0, -t108, 0, t59 * t106, t61 * t106, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t108, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
