% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:21:47
% EndTime: 2019-05-04 23:22:09
% DurationCPUTime: 18.31s
% Computational Cost: add. (32316->638), mult. (63404->929), div. (0->0), fcn. (39650->10), ass. (0->469)
t604 = qJD(4) ^ 2;
t599 = sin(qJ(4));
t588 = t599 ^ 2;
t605 = qJD(2) ^ 2;
t703 = t588 * t605;
t565 = -t604 - t703;
t602 = cos(qJ(4));
t571 = t602 * t605 * t599;
t558 = qJDD(4) - t571;
t707 = t558 * t599;
t509 = -t565 * t602 + t707;
t592 = sin(pkin(6));
t594 = cos(pkin(6));
t706 = t558 * t602;
t499 = t565 * t599 + t706;
t684 = qJD(2) * qJD(4);
t667 = t602 * t684;
t680 = qJDD(2) * t599;
t546 = 0.2e1 * t667 + t680;
t600 = sin(qJ(2));
t603 = cos(qJ(2));
t638 = t499 * t603 - t546 * t600;
t404 = -t592 * t509 + t594 * t638;
t453 = t499 * t600 + t546 * t603;
t591 = sin(pkin(10));
t593 = cos(pkin(10));
t349 = t404 * t593 - t453 * t591;
t797 = qJ(1) * t349;
t589 = t602 ^ 2;
t702 = t589 * t605;
t567 = -t604 - t702;
t557 = qJDD(4) + t571;
t708 = t557 * t602;
t511 = t567 * t599 + t708;
t709 = t557 * t599;
t502 = -t567 * t602 + t709;
t579 = t599 * t684;
t678 = qJDD(2) * t602;
t549 = -0.2e1 * t579 + t678;
t636 = t502 * t603 + t549 * t600;
t405 = t592 * t511 + t594 * t636;
t456 = t502 * t600 - t549 * t603;
t350 = t405 * t593 - t456 * t591;
t796 = qJ(1) * t350;
t352 = t404 * t591 + t453 * t593;
t795 = qJ(1) * t352;
t355 = t405 * t591 + t456 * t593;
t794 = qJ(1) * t355;
t401 = -t594 * t511 + t592 * t636;
t793 = pkin(7) * (t401 * t592 + t405 * t594);
t400 = t594 * t509 + t592 * t638;
t792 = pkin(7) * (t400 * t592 + t404 * t594);
t791 = pkin(1) * t400;
t790 = pkin(1) * t401;
t789 = pkin(1) * t404;
t788 = pkin(1) * t405;
t564 = -t604 + t703;
t510 = -t564 * t602 + t709;
t501 = t564 * t599 + t708;
t679 = qJDD(2) * t600;
t626 = t501 * t603 + t599 * t679;
t410 = -t592 * t510 + t594 * t626;
t677 = qJDD(2) * t603;
t464 = t501 * t600 - t599 * t677;
t787 = t410 * t591 + t464 * t593;
t786 = t410 * t593 - t464 * t591;
t566 = t604 - t702;
t512 = -t566 * t599 + t706;
t504 = t566 * t602 + t707;
t624 = t504 * t603 - t600 * t678;
t413 = t592 * t512 + t594 * t624;
t465 = t504 * t600 + t602 * t677;
t785 = t413 * t591 + t465 * t593;
t784 = t413 * t593 - t465 * t591;
t781 = pkin(7) * t453;
t780 = pkin(7) * t456;
t771 = -t594 * t512 + t592 * t624;
t770 = t594 * t510 + t592 * t626;
t547 = t667 + t680;
t769 = t547 + t667;
t548 = -t579 + t678;
t768 = t548 - t579;
t696 = t600 * t605;
t551 = t677 - t696;
t527 = t551 * t592;
t581 = t594 * qJDD(2);
t529 = -t581 * t603 + t594 * t696;
t555 = g(1) * t591 - t593 * g(2);
t691 = g(3) - qJDD(1);
t522 = t555 * t592 + t594 * t691;
t697 = t600 * t522;
t426 = (-t527 * t592 + t529 * t594) * pkin(7) - t697;
t552 = t603 * t605 + t679;
t479 = t529 * t591 - t552 * t593;
t767 = -qJ(1) * t479 - t426 * t591;
t474 = t529 * t593 + t552 * t591;
t766 = -qJ(1) * t474 - t426 * t593;
t526 = t552 * t592;
t528 = t552 * t594;
t693 = t603 * t522;
t429 = (t526 * t592 + t528 * t594) * pkin(7) - t693;
t477 = t528 * t591 - t551 * t593;
t765 = -qJ(1) * t477 - t429 * t591;
t472 = t528 * t593 + t551 * t591;
t764 = -qJ(1) * t472 - t429 * t593;
t763 = pkin(8) + pkin(2);
t758 = t499 * t763;
t598 = sin(qJ(6));
t601 = cos(qJ(6));
t687 = qJD(2) * t599;
t540 = qJD(4) * t598 - t601 * t687;
t542 = qJD(4) * t601 + t598 * t687;
t494 = t542 * t540;
t536 = qJDD(6) + t548;
t739 = -t494 + t536;
t749 = t598 * t739;
t748 = t601 * t739;
t747 = t763 * t502;
t746 = t763 * t509;
t745 = t763 * t511;
t556 = g(1) * t593 + g(2) * t591;
t744 = -t594 * t555 + t592 * t691;
t462 = -t603 * t556 - t600 * t744;
t606 = 0.2e1 * qJD(3) * qJD(2) + t462;
t682 = qJDD(2) * qJ(3);
t446 = -t605 * pkin(2) + t606 + t682;
t444 = -t605 * pkin(8) + t446;
t686 = qJD(2) * t602;
t385 = pkin(4) * t769 - t768 * qJ(5) - 0.2e1 * qJD(5) * t686 + t444;
t743 = -pkin(3) * t499 - qJ(3) * t509;
t742 = pkin(3) * t502 - qJ(3) * t511;
t741 = t591 * t691;
t740 = t593 * t691;
t655 = pkin(7) * t552 - t693;
t737 = pkin(1) * t529 + t592 * t655;
t656 = pkin(7) * t551 + t697;
t736 = pkin(1) * t528 + t592 * t656;
t735 = pkin(1) * t527 + t594 * t655;
t734 = -pkin(1) * t526 + t594 * t656;
t534 = t540 ^ 2;
t535 = t542 ^ 2;
t573 = qJD(6) + t686;
t568 = t573 ^ 2;
t732 = 0.2e1 * qJD(5);
t731 = -pkin(4) - pkin(9);
t688 = t588 + t589;
t553 = t688 * t605;
t725 = pkin(3) * t553;
t724 = pkin(4) * t599;
t723 = pkin(4) * t602;
t722 = pkin(7) * t592;
t721 = pkin(7) * t594;
t550 = t688 * qJDD(2);
t710 = t550 * t603;
t633 = -t553 * t600 + t710;
t482 = t633 * t594;
t711 = t550 * t600;
t488 = -t553 * t603 - t711;
t418 = t482 * t593 + t488 * t591;
t720 = qJ(1) * t418;
t719 = qJ(5) * t599;
t718 = qJ(5) * t602;
t459 = t494 + t536;
t717 = t459 * t598;
t716 = t459 * t601;
t705 = t573 * t598;
t704 = t573 * t601;
t701 = t592 * t522;
t560 = pkin(5) * t686 - qJD(4) * pkin(9);
t657 = -t718 + t724;
t543 = t657 * qJD(2);
t590 = qJDD(2) * pkin(2);
t461 = -t556 * t600 + t603 * t744;
t629 = qJDD(3) + t461;
t448 = -t605 * qJ(3) - t590 + t629;
t445 = -qJDD(2) * pkin(8) + t448;
t689 = -t599 * t445 + t602 * t522;
t661 = -t604 * pkin(4) - t543 * t687 - t689;
t676 = qJDD(4) * qJ(5);
t337 = t676 - t547 * pkin(5) - pkin(9) * t703 + (t732 + t560) * qJD(4) + t661;
t699 = t598 * t337;
t698 = t599 * t444;
t695 = t601 * t337;
t694 = t602 * t444;
t690 = pkin(1) * t482 + t488 * t722;
t397 = -t602 * t445 - t599 * t522;
t685 = qJD(6) + t573;
t681 = qJDD(2) * t592;
t675 = t599 * t494;
t674 = t602 * t494;
t668 = t593 * t681;
t481 = t633 * t592;
t666 = -pkin(1) * t481 + t488 * t721;
t660 = t543 * t686 + qJDD(5) + t397;
t622 = -qJDD(4) * pkin(4) + t660;
t381 = t604 * qJ(5) - t622;
t338 = -t558 * pkin(9) + (t548 + t579) * pkin(5) - t381;
t341 = -pkin(5) * t703 + t547 * pkin(9) - t560 * t686 + t385;
t293 = -t601 * t338 + t341 * t598;
t492 = -t555 * t591 - t593 * t556;
t664 = t598 * qJDD(4) - t601 * t547;
t663 = t600 * t571;
t662 = t603 * t571;
t659 = -qJ(3) * t553 + t550 * t763;
t658 = -t719 - t723;
t294 = t338 * t598 + t341 * t601;
t257 = -t601 * t293 + t598 * t294;
t245 = -t257 * t602 + t337 * t599;
t258 = t598 * t293 + t601 * t294;
t654 = -t245 * t603 + t258 * t600;
t621 = qJD(4) * t732 + t661;
t378 = t621 + t676;
t365 = pkin(4) * t553 + t378;
t368 = (t553 - t604) * qJ(5) + t622;
t298 = -t365 * t602 - t368 * t599 - t725;
t495 = -pkin(3) * t550 + qJDD(2) * t658;
t653 = t298 * t603 + t495 * t600;
t306 = t378 * t599 + t381 * t602;
t652 = -t306 * t603 + t385 * t600;
t631 = t601 * qJDD(4) + t598 * t547;
t470 = -qJD(6) * t540 + t631;
t523 = t573 * t540;
t441 = t470 + t523;
t608 = (-qJD(6) + t573) * t542 - t664;
t362 = -t441 * t601 + t598 * t608;
t457 = -t534 - t535;
t322 = -t362 * t602 + t457 * t599;
t364 = t441 * t598 + t601 * t608;
t651 = -t322 * t603 + t364 * t600;
t324 = -t397 * t602 - t599 * t689;
t650 = -t324 * t603 + t444 * t600;
t436 = t542 * t685 + t664;
t440 = t470 - t523;
t361 = t436 * t598 - t440 * t601;
t493 = t535 - t534;
t328 = -t361 * t602 - t493 * t599;
t363 = -t436 * t601 - t440 * t598;
t649 = t328 * t603 + t363 * t600;
t480 = -t568 - t534;
t395 = t480 * t598 + t748;
t332 = -t395 * t602 + t436 * t599;
t396 = t480 * t601 - t749;
t648 = -t332 * t603 + t396 * t600;
t487 = -t535 - t568;
t407 = t487 * t601 - t717;
t439 = -t540 * t685 + t631;
t335 = -t407 * t602 + t439 * t599;
t408 = -t487 * t598 - t716;
t647 = -t335 * t603 + t408 * t600;
t520 = t534 - t568;
t421 = -t520 * t598 - t716;
t342 = -t421 * t602 - t599 * t608;
t423 = t520 * t601 - t717;
t646 = t342 * t603 + t423 * t600;
t521 = -t535 + t568;
t420 = -t521 * t601 - t749;
t343 = -t420 * t602 - t441 * t599;
t422 = -t521 * t598 + t748;
t645 = t343 * t603 + t422 * t600;
t432 = -t470 * t598 - t542 * t704;
t386 = -t432 * t602 - t675;
t433 = t470 * t601 - t542 * t705;
t644 = t386 * t603 + t433 * t600;
t469 = -qJD(6) * t542 - t664;
t430 = -t469 * t601 - t540 * t705;
t387 = -t430 * t602 + t675;
t431 = -t469 * t598 + t540 * t704;
t643 = t387 * t603 + t431 * t600;
t325 = t397 * t599 - t602 * t689;
t449 = (t540 * t598 + t542 * t601) * t573;
t424 = -t449 * t602 - t536 * t599;
t450 = (-t540 * t601 + t542 * t598) * t573;
t642 = t424 * t603 + t450 * t600;
t380 = t446 * t603 + t448 * t600;
t641 = t446 * t600 - t448 * t603;
t393 = t461 * t603 - t462 * t600;
t394 = t461 * t600 + t462 * t603;
t485 = t546 * t599 - t549 * t602;
t554 = (-t588 + t589) * t605;
t640 = t485 * t603 + t554 * t600;
t491 = t555 * t593 - t556 * t591;
t539 = t688 * t684;
t632 = qJDD(4) * t600 + t539 * t603;
t321 = -t325 - t725;
t630 = -pkin(3) * t711 + t321 * t603;
t628 = (-t481 * t592 - t482 * t594) * pkin(7);
t517 = t547 * t602 - t588 * t684;
t620 = t517 * t603 - t663;
t518 = -t548 * t599 - t589 * t684;
t619 = t518 * t603 + t663;
t229 = pkin(5) * t337 + t258 * t731;
t235 = pkin(5) * t257 - qJ(5) * t258;
t246 = t257 * t599 + t337 * t602;
t211 = pkin(3) * t258 - t602 * t229 - t599 * t235 - t246 * t763;
t218 = pkin(3) * t245 - qJ(3) * t246 + qJ(5) * t337 + t257 * t731;
t228 = t245 * t600 + t258 * t603;
t618 = pkin(7) * t228 + t211 * t603 + t218 * t600;
t238 = pkin(5) * t457 + t364 * t731 - t258;
t302 = pkin(5) * t362 - qJ(5) * t364;
t323 = t362 * t599 + t457 * t602;
t226 = pkin(3) * t364 - t602 * t238 - t599 * t302 - t323 * t763;
t232 = pkin(3) * t322 - qJ(3) * t323 + qJ(5) * t457 + t362 * t731 - t257;
t290 = t322 * t600 + t364 * t603;
t617 = pkin(7) * t290 + t226 * t603 + t232 * t600;
t269 = pkin(5) * t395 - qJ(5) * t396 - t293;
t282 = pkin(5) * t436 + t396 * t731 + t695;
t333 = t395 * t599 + t436 * t602;
t231 = pkin(3) * t396 - t599 * t269 - t602 * t282 - t333 * t763;
t247 = pkin(3) * t332 - qJ(3) * t333 + qJ(5) * t436 + t395 * t731 + t699;
t303 = t332 * t600 + t396 * t603;
t616 = pkin(7) * t303 + t231 * t603 + t247 * t600;
t270 = pkin(5) * t407 - qJ(5) * t408 - t294;
t284 = pkin(5) * t439 + t408 * t731 - t699;
t336 = t407 * t599 + t439 * t602;
t234 = pkin(3) * t408 - t599 * t270 - t602 * t284 - t336 * t763;
t250 = pkin(3) * t335 - qJ(3) * t336 + qJ(5) * t439 + t407 * t731 + t695;
t305 = t335 * t600 + t408 * t603;
t615 = pkin(7) * t305 + t234 * t603 + t250 * t600;
t307 = t378 * t602 - t381 * t599;
t242 = -t763 * t307 + (pkin(3) - t658) * t385;
t248 = pkin(3) * t306 + pkin(4) * t381 - qJ(3) * t307 + qJ(5) * t378;
t289 = t306 * t600 + t385 * t603;
t614 = pkin(7) * t289 + t242 * t603 + t248 * t600;
t277 = pkin(3) * t444 - t325 * t763;
t287 = pkin(3) * t324 - qJ(3) * t325;
t304 = t324 * t600 + t444 * t603;
t613 = pkin(7) * t304 + t277 * t603 + t287 * t600;
t374 = pkin(4) * t546 + t385;
t316 = -t602 * t374 + (-pkin(3) - t719) * t546 - t746;
t320 = (-t565 - t604) * qJ(5) + (-qJDD(4) - t558) * pkin(4) + t660 + t743;
t612 = t316 * t603 + t320 * t600 - t781;
t373 = qJ(5) * t549 - t385;
t317 = -t599 * t373 + (-pkin(3) - t723) * t549 - t745;
t319 = -pkin(4) * t567 + (qJDD(4) + t557) * qJ(5) + t621 + t742;
t611 = t317 * t603 + t319 * t600 + t780;
t346 = -t397 - t743;
t359 = pkin(3) * t546 + t694 + t746;
t610 = t346 * t600 + t359 * t603 + t781;
t347 = t689 - t742;
t358 = pkin(3) * t549 - t698 + t745;
t609 = t347 * t600 + t358 * t603 - t780;
t607 = pkin(7) * t380 + (pkin(2) * t603 + qJ(3) * t600) * t522;
t561 = t591 * t681;
t519 = qJDD(4) * t603 - t539 * t600;
t508 = t768 * t602;
t497 = t769 * t599;
t496 = t594 * t522;
t490 = t632 * t594;
t489 = t632 * t592;
t486 = -t546 * t602 - t549 * t599;
t468 = -t517 * t600 - t662;
t467 = -t518 * t600 + t662;
t452 = -0.2e1 * t590 + t629;
t451 = t606 + 0.2e1 * t682;
t447 = -t485 * t600 + t554 * t603;
t435 = -t490 * t591 + t519 * t593;
t434 = t490 * t593 + t519 * t591;
t425 = -t449 * t599 + t536 * t602;
t419 = -t482 * t591 + t488 * t593;
t417 = -t592 * t497 + t594 * t620;
t416 = -t592 * t508 + t594 * t619;
t415 = t594 * t497 + t592 * t620;
t414 = t594 * t508 + t592 * t619;
t409 = qJ(1) * t419;
t392 = -t592 * t486 + t594 * t640;
t391 = t594 * t486 + t592 * t640;
t390 = t394 * t594;
t389 = -t432 * t599 + t674;
t388 = -t430 * t599 - t674;
t384 = -pkin(2) * t448 + qJ(3) * t446;
t383 = t592 * t461 - t735;
t382 = t592 * t462 - t734;
t377 = -t592 * t452 + t735;
t376 = t380 * t594;
t375 = -t592 * t451 + t734;
t372 = -t417 * t591 + t468 * t593;
t371 = -t416 * t591 + t467 * t593;
t370 = t417 * t593 + t468 * t591;
t369 = t416 * t593 + t467 * t591;
t367 = -t393 * t594 + t701;
t366 = -t393 * t592 - t496;
t360 = -t424 * t600 + t450 * t603;
t357 = qJ(3) * t549 + t694 + t747;
t356 = qJ(3) * t546 + t698 - t758;
t345 = -t420 * t599 + t441 * t602;
t344 = -t421 * t599 + t602 * t608;
t340 = t594 * t641 + t701;
t339 = t592 * t641 - t496;
t331 = -t392 * t591 + t447 * t593;
t330 = t392 * t593 + t447 * t591;
t329 = -t361 * t599 + t493 * t602;
t327 = -t386 * t600 + t433 * t603;
t326 = -t387 * t600 + t431 * t603;
t318 = -t592 * t425 + t594 * t642;
t315 = t602 * t373 + (-qJ(3) - t724) * t549 - t747;
t314 = -t599 * t374 + (-qJ(3) + t718) * t546 + t758;
t313 = -t324 + t659;
t312 = -t342 * t600 + t423 * t603;
t311 = -t343 * t600 + t422 * t603;
t310 = -pkin(1) * t366 + t394 * t721;
t309 = -t367 * t591 + t394 * t593;
t308 = t367 * t593 + t394 * t591;
t301 = (-t366 * t592 - t367 * t594) * pkin(7);
t300 = -t340 * t591 + t380 * t593;
t299 = t340 * t593 + t380 * t591;
t297 = -t592 * t389 + t594 * t644;
t296 = -t592 * t388 + t594 * t643;
t295 = -pkin(3) * t710 - t600 * t321 + t628;
t292 = -t365 * t599 + t368 * t602 + t659;
t291 = -t328 * t600 + t363 * t603;
t288 = (-pkin(2) * t600 + qJ(3) * t603) * t522 + (-t339 * t592 - t340 * t594) * pkin(7);
t286 = -t592 * t344 + t594 * t646;
t285 = -t592 * t345 + t594 * t645;
t283 = -t600 * t298 + t603 * t495 + t628;
t281 = -t592 * t336 + t594 * t647;
t280 = t594 * t336 + t592 * t647;
t279 = -t592 * t333 + t594 * t648;
t278 = t594 * t333 + t592 * t648;
t276 = qJ(3) * t444 - t324 * t763;
t275 = -t592 * t325 + t594 * t650;
t274 = t594 * t325 + t592 * t650;
t273 = -pkin(1) * t339 - t592 * t384 + t594 * t607;
t272 = t603 * t347 - t600 * t358 - t793;
t271 = t603 * t346 - t600 * t359 + t792;
t268 = -t592 * t329 + t594 * t649;
t267 = -t592 * t323 + t594 * t651;
t266 = t594 * t323 + t592 * t651;
t265 = -t592 * t313 + t594 * t630 + t666;
t264 = -t592 * t357 + t594 * t609 - t790;
t263 = -t592 * t356 + t594 * t610 + t791;
t262 = -t600 * t316 + t603 * t320 - t792;
t261 = -t600 * t317 + t603 * t319 + t793;
t260 = -t592 * t307 + t594 * t652;
t259 = t594 * t307 + t592 * t652;
t256 = -t281 * t591 + t305 * t593;
t255 = t281 * t593 + t305 * t591;
t254 = -t279 * t591 + t303 * t593;
t253 = t279 * t593 + t303 * t591;
t252 = -t275 * t591 + t304 * t593;
t251 = t275 * t593 + t304 * t591;
t249 = -t592 * t292 + t594 * t653 + t666;
t244 = -t592 * t314 + t594 * t612 - t791;
t243 = -t592 * t315 + t594 * t611 + t790;
t241 = -t763 * t306 + (qJ(3) + t657) * t385;
t240 = -t267 * t591 + t290 * t593;
t239 = t267 * t593 + t290 * t591;
t237 = -t260 * t591 + t289 * t593;
t236 = t260 * t593 + t289 * t591;
t233 = qJ(3) * t408 + t602 * t270 - t599 * t284 - t335 * t763;
t230 = qJ(3) * t396 + t602 * t269 - t599 * t282 - t332 * t763;
t227 = -t600 * t277 + t603 * t287 + (-t274 * t592 - t275 * t594) * pkin(7);
t225 = qJ(3) * t364 - t599 * t238 + t602 * t302 - t322 * t763;
t224 = -pkin(1) * t274 - t592 * t276 + t594 * t613;
t223 = -t592 * t246 + t594 * t654;
t222 = t594 * t246 + t592 * t654;
t221 = -t600 * t242 + t603 * t248 + (-t259 * t592 - t260 * t594) * pkin(7);
t220 = -t600 * t234 + t603 * t250 + (-t280 * t592 - t281 * t594) * pkin(7);
t219 = -t600 * t231 + t603 * t247 + (-t278 * t592 - t279 * t594) * pkin(7);
t217 = -pkin(1) * t259 - t592 * t241 + t594 * t614;
t216 = -t223 * t591 + t228 * t593;
t215 = t223 * t593 + t228 * t591;
t214 = -pkin(1) * t280 - t592 * t233 + t594 * t615;
t213 = -pkin(1) * t278 - t592 * t230 + t594 * t616;
t212 = -t600 * t226 + t603 * t232 + (-t266 * t592 - t267 * t594) * pkin(7);
t210 = qJ(3) * t258 - t599 * t229 + t602 * t235 - t245 * t763;
t209 = -pkin(1) * t266 - t592 * t225 + t594 * t617;
t208 = -t600 * t211 + t603 * t218 + (-t222 * t592 - t223 * t594) * pkin(7);
t207 = -pkin(1) * t222 - t592 * t210 + t594 * t618;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t492, 0, 0, 0, 0, 0, 0, t479, t477, 0, t309, 0, 0, 0, 0, 0, 0, 0, -t479, -t477, t300, 0, 0, 0, 0, 0, 0, t352, -t355, t419, t252, 0, 0, 0, 0, 0, 0, t419, -t352, t355, t237, 0, 0, 0, 0, 0, 0, t254, t256, t240, t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t491, 0, 0, 0, 0, 0, 0, -t474, -t472, 0, t308, 0, 0, 0, 0, 0, 0, 0, t474, t472, t299, 0, 0, 0, 0, 0, 0, -t349, t350, t418, t251, 0, 0, 0, 0, 0, 0, t418, t349, -t350, t236, 0, 0, 0, 0, 0, 0, t253, t255, t239, t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t691, 0, 0, 0, 0, 0, 0, t527, -t526, 0, t366, 0, 0, 0, 0, 0, 0, 0, -t527, t526, t339, 0, 0, 0, 0, 0, 0, -t400, t401, t481, t274, 0, 0, 0, 0, 0, 0, t481, t400, -t401, t259, 0, 0, 0, 0, 0, 0, t278, t280, t266, t222; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t741, -t740, -t491, -qJ(1) * t491, 0, 0, -t477, 0, t479, t561, -t383 * t591 - t766, -t382 * t591 - t764, -t390 * t591 + t393 * t593, -qJ(1) * t308 + t301 * t593 - t310 * t591, t561, t477, -t479, 0, 0, 0, -t376 * t591 - t593 * t641, -t377 * t591 + t766, -t375 * t591 + t764, -qJ(1) * t299 - t273 * t591 + t288 * t593, t371, t331, t785, t372, t787, t435, -t263 * t591 + t271 * t593 + t797, -t264 * t591 + t272 * t593 - t796, -t265 * t591 + t295 * t593 - t720, -qJ(1) * t251 - t224 * t591 + t227 * t593, t435, -t785, -t787, t371, t331, t372, -t249 * t591 + t283 * t593 - t720, -t244 * t591 + t262 * t593 - t797, -t243 * t591 + t261 * t593 + t796, -qJ(1) * t236 - t217 * t591 + t221 * t593, -t297 * t591 + t327 * t593, -t268 * t591 + t291 * t593, -t285 * t591 + t311 * t593, -t296 * t591 + t326 * t593, -t286 * t591 + t312 * t593, -t318 * t591 + t360 * t593, -qJ(1) * t253 - t213 * t591 + t219 * t593, -qJ(1) * t255 - t214 * t591 + t220 * t593, -qJ(1) * t239 - t209 * t591 + t212 * t593, -qJ(1) * t215 - t207 * t591 + t208 * t593; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t740, -t741, t492, qJ(1) * t492, 0, 0, t472, 0, -t474, -t668, t383 * t593 - t767, t382 * t593 - t765, t390 * t593 + t393 * t591, qJ(1) * t309 + t301 * t591 + t310 * t593, -t668, -t472, t474, 0, 0, 0, t376 * t593 - t591 * t641, t377 * t593 + t767, t375 * t593 + t765, qJ(1) * t300 + t273 * t593 + t288 * t591, t369, t330, -t784, t370, -t786, t434, t263 * t593 + t271 * t591 + t795, t264 * t593 + t272 * t591 - t794, t265 * t593 + t295 * t591 + t409, qJ(1) * t252 + t224 * t593 + t227 * t591, t434, t784, t786, t369, t330, t370, t249 * t593 + t283 * t591 + t409, t244 * t593 + t262 * t591 - t795, t243 * t593 + t261 * t591 + t794, qJ(1) * t237 + t217 * t593 + t221 * t591, t297 * t593 + t327 * t591, t268 * t593 + t291 * t591, t285 * t593 + t311 * t591, t296 * t593 + t326 * t591, t286 * t593 + t312 * t591, t318 * t593 + t360 * t591, qJ(1) * t254 + t213 * t593 + t219 * t591, qJ(1) * t256 + t214 * t593 + t220 * t591, qJ(1) * t240 + t209 * t593 + t212 * t591, qJ(1) * t216 + t207 * t593 + t208 * t591; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t555, t556, 0, 0, 0, 0, t526, 0, t527, t581, -t594 * t461 - t737, -t594 * t462 - t736, t394 * t592, pkin(1) * t367 + t394 * t722, t581, -t526, -t527, 0, 0, 0, t380 * t592, t594 * t452 + t737, t594 * t451 + t736, pkin(1) * t340 + t594 * t384 + t592 * t607, t414, t391, -t771, t415, -t770, t489, t594 * t356 + t592 * t610 - t789, t594 * t357 + t592 * t609 + t788, t594 * t313 + t592 * t630 + t690, pkin(1) * t275 + t594 * t276 + t592 * t613, t489, t771, t770, t414, t391, t415, t594 * t292 + t592 * t653 + t690, t594 * t314 + t592 * t612 + t789, t594 * t315 + t592 * t611 - t788, pkin(1) * t260 + t594 * t241 + t592 * t614, t594 * t389 + t592 * t644, t594 * t329 + t592 * t649, t594 * t345 + t592 * t645, t594 * t388 + t592 * t643, t594 * t344 + t592 * t646, t594 * t425 + t592 * t642, pkin(1) * t279 + t594 * t230 + t592 * t616, pkin(1) * t281 + t594 * t233 + t592 * t615, pkin(1) * t267 + t594 * t225 + t592 * t617, pkin(1) * t223 + t594 * t210 + t592 * t618;];
tauB_reg  = t1;
