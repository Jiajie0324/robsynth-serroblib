% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRP6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRRP6_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:21:03
% EndTime: 2019-03-08 20:21:11
% DurationCPUTime: 4.43s
% Computational Cost: add. (4430->518), mult. (9190->651), div. (0->0), fcn. (6735->10), ass. (0->267)
t169 = sin(qJ(4));
t172 = cos(qJ(4));
t167 = cos(pkin(6));
t298 = qJD(1) * t167;
t256 = qJD(4) * t298;
t174 = -pkin(2) - pkin(8);
t173 = cos(qJ(2));
t165 = sin(pkin(6));
t299 = qJD(1) * t165;
t259 = t173 * t299;
t232 = qJD(3) - t259;
t115 = qJD(2) * t174 + t232;
t281 = qJDD(1) * t167;
t290 = qJD(4) * t172;
t170 = sin(qJ(2));
t260 = t170 * t299;
t139 = qJD(2) * t260;
t282 = qJDD(1) * t165;
t252 = t173 * t282;
t208 = qJDD(3) + t139 - t252;
t77 = qJDD(2) * t174 + t208;
t274 = -t115 * t290 - t169 * t77 - t172 * t281;
t18 = -t169 * t256 - t274;
t291 = qJD(4) * t169;
t246 = t115 * t291 + t169 * t281 + (t256 - t77) * t172;
t148 = t169 * t298;
t73 = t115 * t172 - t148;
t258 = t172 * t298;
t74 = t169 * t115 + t258;
t183 = -qJD(4) * (t169 * t73 - t172 * t74) + t18 * t169 - t246 * t172;
t164 = sin(pkin(10));
t166 = cos(pkin(10));
t314 = t167 * t173;
t109 = t164 * t170 - t166 * t314;
t111 = t164 * t314 + t166 * t170;
t316 = t165 * t173;
t216 = g(1) * t111 + g(2) * t109 - g(3) * t316;
t368 = t183 - t216;
t276 = t172 * qJDD(2);
t283 = qJD(2) * qJD(4);
t367 = -t169 * t283 + t276;
t315 = t167 * t170;
t110 = t164 * t173 + t166 * t315;
t112 = -t164 * t315 + t166 * t173;
t237 = g(1) * t112 + g(2) * t110;
t295 = qJD(2) * t169;
t154 = qJD(5) + t295;
t168 = sin(qJ(5));
t244 = qJD(5) * t169 + qJD(2);
t171 = cos(qJ(5));
t284 = t171 * qJD(4);
t264 = t172 * t284;
t292 = qJD(4) * t168;
t294 = qJD(2) * t172;
t124 = t171 * t294 + t292;
t293 = qJD(4) * t124;
t254 = t172 * t283;
t277 = t169 * qJDD(2);
t119 = qJDD(5) + t254 + t277;
t309 = t171 * t119;
t286 = qJD(5) * t172;
t199 = t168 * t286 + t169 * t284;
t51 = qJD(2) * t199 - qJD(5) * t284 - t168 * qJDD(4) - t171 * t276;
t330 = t172 * t51;
t366 = t154 * (t168 * t244 - t264) + (t293 - t309) * t169 + t330;
t122 = t168 * t294 - t284;
t321 = t124 * t171;
t52 = qJD(5) * t124 - t171 * qJDD(4) + t367 * t168;
t327 = t52 * t171;
t328 = t51 * t168;
t365 = t172 * (qJD(5) * (t122 * t168 - t321) - t327 + t328) + (t122 * t171 + t124 * t168) * t291;
t218 = t124 * t154;
t219 = t122 * t154;
t364 = t168 * (t52 + t218) + t171 * (t51 + t219);
t238 = pkin(4) * t172 + pkin(9) * t169;
t120 = qJD(4) * t238 + qJD(3);
t250 = -pkin(9) * t172 + qJ(3);
t347 = pkin(4) * t169;
t128 = t250 + t347;
t289 = qJD(4) * t174;
t263 = t172 * t289;
t287 = qJD(5) * t171;
t310 = t170 * t171;
t87 = (t168 * t173 + t169 * t310) * t165;
t363 = -qJD(1) * t87 + t168 * t120 + t128 * t287 + t171 * t263;
t361 = t52 - t218;
t311 = t169 * t174;
t358 = t168 * t128 + t171 * t311;
t234 = pkin(5) * t171 + qJ(6) * t168;
t57 = -qJD(4) * pkin(4) - t73;
t25 = pkin(5) * t122 - qJ(6) * t124 + t57;
t344 = pkin(9) * t119;
t357 = t154 * t25 - t344;
t304 = qJDD(1) - g(3);
t318 = t165 * t170;
t354 = -t304 * t318 + t237;
t288 = qJD(5) * t168;
t206 = t154 * t288 - t309;
t313 = t168 * t169;
t353 = qJD(2) * (-t122 * t172 + t154 * t313) + t206;
t297 = qJD(2) * qJ(3);
t127 = t260 + t297;
t352 = qJD(4) * (-t127 + t260 - t297) - qJDD(4) * t174;
t273 = t169 * t318;
t243 = t168 * t273;
t350 = qJD(1) * t243 - qJD(5) * t358 + (t120 - t259) * t171;
t207 = t168 * t119 + t154 * t287;
t349 = t169 * (t154 * t292 - t52) - t172 * (qJD(4) * t122 + t207);
t348 = t124 ^ 2;
t346 = pkin(5) * t119;
t343 = pkin(9) * t124;
t340 = t109 * pkin(8);
t339 = t111 * pkin(8);
t338 = t167 ^ 2 * qJDD(1) - g(3);
t262 = t174 * t288;
t337 = qJ(6) * t290 + (qJD(6) - t262) * t169 + t363;
t251 = t168 * t174 - pkin(5);
t336 = t251 * t290 - t350;
t335 = -t169 * t262 + t363;
t334 = -t168 * t263 + t350;
t58 = qJD(4) * pkin(9) + t74;
t82 = qJD(2) * t128 + t260;
t23 = t168 * t82 + t171 * t58;
t17 = qJ(6) * t154 + t23;
t333 = t154 * t17;
t332 = t154 * t23;
t253 = t170 * t282;
t280 = qJDD(2) * qJ(3);
t78 = t253 + t280 + (qJD(3) + t259) * qJD(2);
t331 = t170 * t78;
t329 = t172 * t52;
t233 = pkin(5) * t168 - qJ(6) * t171;
t326 = t233 * qJD(5) - t168 * qJD(6) - t258 - (-qJD(2) * t233 + t115) * t169;
t126 = t238 * qJD(2);
t42 = t168 * t126 + t171 * t73;
t324 = qJDD(2) * pkin(2);
t323 = t119 * qJ(6);
t322 = t124 * t122;
t320 = t127 * t173;
t319 = t165 * t169;
t317 = t165 * t172;
t312 = t169 * t171;
t307 = t171 * t128;
t176 = qJD(2) ^ 2;
t306 = t173 * t176;
t22 = -t168 * t58 + t171 * t82;
t305 = qJD(6) - t22;
t303 = pkin(2) * t316 + qJ(3) * t318;
t162 = t169 ^ 2;
t163 = t172 ^ 2;
t302 = t162 - t163;
t301 = t162 + t163;
t175 = qJD(4) ^ 2;
t300 = -t175 - t176;
t296 = qJD(2) * t165;
t285 = t127 * qJD(2);
t279 = qJDD(4) * t169;
t272 = t170 * t317;
t275 = g(3) * t272 + t237 * t172;
t271 = t169 * t316;
t270 = t172 * t176 * t169;
t267 = pkin(8) * t316 + t303;
t266 = t170 * t296;
t265 = t173 * t296;
t261 = t154 * t294;
t257 = t122 ^ 2 - t348;
t15 = qJDD(4) * pkin(9) + t18;
t39 = t253 + t128 * qJDD(2) + (t120 + t259) * qJD(2);
t249 = t168 * t15 - t171 * t39 + t58 * t287 + t82 * t288;
t101 = t109 * pkin(2);
t248 = qJ(3) * t110 - t101;
t102 = t111 * pkin(2);
t247 = qJ(3) * t112 - t102;
t245 = t301 * qJDD(2);
t242 = pkin(4) * t273 + t267;
t241 = t124 * t260;
t240 = t172 * t260;
t239 = t169 * t254;
t235 = (qJD(5) * t122 - t51) * pkin(9);
t14 = -pkin(5) * t154 + t305;
t231 = t14 * t171 - t168 * t17;
t230 = t14 * t168 + t17 * t171;
t229 = t168 * t23 + t171 * t22;
t228 = t168 * t22 - t171 * t23;
t41 = t126 * t171 - t168 * t73;
t224 = t78 * qJ(3) + t127 * qJD(3);
t223 = (-qJD(2) * pkin(2) + t232) * t170 + t320;
t217 = qJDD(2) * t170 + t306;
t215 = -t174 + t233;
t214 = t248 - t340;
t213 = t247 - t339;
t114 = t167 * t172 - t271;
t211 = -t114 * t168 + t165 * t310;
t68 = t114 * t171 + t168 * t318;
t113 = t167 * t169 + t172 * t316;
t3 = t171 * t15 + t168 * t39 + t82 * t287 - t288 * t58;
t64 = -qJD(4) * t113 + t169 * t266;
t10 = qJD(5) * t68 + t64 * t168 - t171 * t265;
t11 = qJD(5) * t211 + t168 * t265 + t64 * t171;
t205 = t10 * t124 - t11 * t122 + t211 * t51 - t68 * t52;
t16 = -qJDD(4) * pkin(4) + t246;
t45 = t109 * t171 + t110 * t313;
t47 = t111 * t171 + t112 * t313;
t86 = -t171 * t316 + t243;
t204 = g(1) * t47 + g(2) * t45 + g(3) * t86;
t60 = t111 * t172 - t164 * t319;
t62 = t109 * t172 + t166 * t319;
t203 = g(1) * t60 + g(2) * t62 - g(3) * t113;
t61 = t111 * t169 + t164 * t317;
t63 = -t109 * t169 + t166 * t317;
t202 = -g(1) * t61 + g(2) * t63 - g(3) * t114;
t65 = -qJD(4) * t271 + t167 * t290 - t172 * t266;
t201 = -t10 * t154 + t113 * t52 + t119 * t211 + t65 * t122;
t46 = -t109 * t168 + t110 * t312;
t48 = -t111 * t168 + t112 * t312;
t200 = -g(1) * t48 - g(2) * t46 - g(3) * t87 + t122 * t240;
t197 = -pkin(9) * t327 + t202;
t196 = g(3) * t318 + t237;
t195 = t154 * t57 - t344;
t193 = t168 * t219 - t327;
t192 = t216 + t252;
t191 = t11 * t154 + t113 * t51 + t119 * t68 - t124 * t65;
t31 = -t112 * t171 + t168 * t61;
t33 = -t110 * t171 - t168 * t63;
t190 = g(1) * t31 + g(2) * t33 - g(3) * t211 - t249;
t189 = pkin(9) * qJD(5) * t154 + t203;
t188 = qJDD(3) - t192;
t5 = pkin(5) * t52 + qJ(6) * t51 - qJD(6) * t124 + t16;
t187 = -t189 - t5;
t186 = t16 + t189;
t1 = qJD(6) * t154 + t3 + t323;
t2 = qJDD(6) + t249 - t346;
t185 = qJD(5) * t231 + t1 * t171 + t2 * t168;
t184 = -qJD(5) * t229 + t168 * t249 + t3 * t171;
t32 = t112 * t168 + t171 * t61;
t34 = t110 * t168 - t171 * t63;
t182 = -g(1) * t32 - g(2) * t34 - g(3) * t68 + t3;
t181 = t168 * t329 + (-t168 * t291 + t171 * t286) * t122;
t180 = qJD(2) * t232 - t174 * t175 + t280 + t78;
t179 = t124 * t25 + qJDD(6) - t190;
t178 = -t119 * t313 - t329 + t122 * t291 + (-t168 * t290 - t171 * t244) * t154;
t177 = -t52 * t312 - t122 * t264 + t244 * t321 + (t122 * t244 + t124 * t290 - t51 * t169) * t168;
t159 = qJDD(4) * t172;
t129 = -pkin(4) - t234;
t108 = t217 * t165;
t107 = (-qJDD(2) * t173 + t170 * t176) * t165;
t104 = t113 * pkin(4);
t90 = t112 * t347;
t89 = t110 * t347;
t88 = t215 * t172;
t85 = t208 - t324;
t83 = -t168 * t311 + t307;
t76 = t169 * t251 - t307;
t75 = qJ(6) * t169 + t358;
t66 = t119 * t169 + t154 * t290;
t59 = pkin(5) * t124 + qJ(6) * t122;
t55 = t62 * pkin(4);
t54 = t60 * pkin(4);
t40 = (qJD(5) * t234 - qJD(6) * t171) * t172 - t215 * t291;
t36 = -pkin(5) * t294 - t41;
t35 = qJ(6) * t294 + t42;
t27 = t219 - t51;
t24 = (-t124 * t172 + t154 * t312) * qJD(2) + t207;
t9 = t171 * t218 - t328;
t8 = -t124 * t199 - t171 * t330;
t6 = (-t154 * t284 - t51) * t169 + (-t206 + t293) * t172;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t304, 0, 0, 0, 0, 0, 0, -t107, -t108, 0 (t170 ^ 2 + t173 ^ 2) * t165 ^ 2 * qJDD(1) + t338, 0, 0, 0, 0, 0, 0, 0, t107, t108 (qJD(2) * t223 - t173 * t85 + t331) * t165 + t338, 0, 0, 0, 0, 0, 0, -t65 * qJD(4) - t113 * qJDD(4) + (t169 * t217 + t170 * t254) * t165, -t64 * qJD(4) - t114 * qJDD(4) + (t367 * t170 + t172 * t306) * t165 (t113 * t172 - t114 * t169) * qJDD(2) + (-t169 * t64 + t172 * t65 + (-t113 * t169 - t114 * t172) * qJD(4)) * qJD(2), t246 * t113 + t18 * t114 + t74 * t64 - t73 * t65 - g(3) + (t173 * t285 + t331) * t165, 0, 0, 0, 0, 0, 0, t201, -t191, t205, -t10 * t22 + t11 * t23 + t113 * t16 - t211 * t249 + t3 * t68 + t57 * t65 - g(3), 0, 0, 0, 0, 0, 0, t201, t205, t191, t1 * t68 + t10 * t14 + t11 * t17 + t113 * t5 - t2 * t211 + t25 * t65 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t192, t354, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t188 - 0.2e1 * t324, 0.2e1 * qJD(2) * qJD(3) + 0.2e1 * t280 - t354, -t85 * pkin(2) - g(1) * t247 - g(2) * t248 - g(3) * t303 - t223 * t299 + t224, qJDD(2) * t163 - 0.2e1 * t239, -0.2e1 * t169 * t276 + 0.2e1 * t283 * t302, -t169 * t175 + t159, qJDD(2) * t162 + 0.2e1 * t239, -t172 * t175 - t279, 0, -t352 * t172 + (t180 - t196) * t169, t169 * t352 + t180 * t172 - t275, t139 * t301 - t174 * t245 - t368, -g(1) * t213 - g(2) * t214 - g(3) * t267 + (-t320 + (-t169 * t74 - t172 * t73) * t170) * t299 + t183 * t174 + t224, t8, t365, t6, t181, t349, t66, t119 * t83 + t334 * t154 + (-t249 + (t122 * t174 - t168 * t57) * qJD(4)) * t169 + (qJD(4) * t22 + t16 * t168 - t174 * t52 + t287 * t57) * t172 + t200, -t119 * t358 - t335 * t154 + (-t3 + (t124 * t174 - t171 * t57) * qJD(4)) * t169 + (-qJD(4) * t23 + t16 * t171 + t174 * t51 - t288 * t57 + t241) * t172 + t204, t51 * t83 - t52 * t358 - t334 * t124 - t335 * t122 + t229 * t291 + (qJD(5) * t228 - t168 * t3 + t171 * t249) * t172 + t275, t3 * t358 - t249 * t83 + t57 * t169 * t289 - g(1) * (t213 + t90) - g(2) * (t214 + t89) - g(3) * t242 + t335 * t23 + t334 * t22 + (pkin(9) * t196 - t16 * t174 + t260 * t57) * t172, t8, t6, -t365, t66, -t349, t181, -t119 * t76 + t122 * t40 + t52 * t88 + (-t25 * t292 - t2) * t169 - t336 * t154 + (-qJD(4) * t14 + t5 * t168 + t25 * t287) * t172 + t200, -t51 * t76 - t52 * t75 + t336 * t124 - t337 * t122 - t231 * t291 + (-qJD(5) * t230 - t1 * t168 + t171 * t2) * t172 + t275, t119 * t75 - t124 * t40 + t51 * t88 + (t25 * t284 + t1) * t169 + t337 * t154 + (qJD(4) * t17 - t5 * t171 + t25 * t288 - t241) * t172 - t204, t1 * t75 + t5 * t88 + t2 * t76 - g(1) * (t48 * pkin(5) + t47 * qJ(6) + t112 * t250 - t102 - t339 + t90) - g(2) * (t46 * pkin(5) + t45 * qJ(6) + t110 * t250 - t101 - t340 + t89) - g(3) * (pkin(5) * t87 - pkin(9) * t272 + qJ(6) * t86 + t242) + (t40 + t240) * t25 + t337 * t17 + t336 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t176, t139 + t188 - t285 - t324, 0, 0, 0, 0, 0, 0, t169 * t300 + t159, t172 * t300 - t279, -t245, -t285 + t368, 0, 0, 0, 0, 0, 0, t178, t366, t177, -t229 * qJD(2) + (-qJD(4) * t228 - t16) * t172 + (qJD(4) * t57 + t184) * t169 - t216, 0, 0, 0, 0, 0, 0, t178, t177, -t366, t231 * qJD(2) + (qJD(4) * t230 - t5) * t172 + (qJD(4) * t25 + t185) * t169 - t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, -t302 * t176, t276, -t270, -t277, qJDD(4), qJD(4) * t74 - t172 * t285 - t203 - t246, t169 * t285 + (t73 + t148) * qJD(4) - t202 + t274, 0, 0, t9, -t364, t24, t193, -t353, -t261, -pkin(4) * t52 - t74 * t122 - t41 * t154 + t168 * t195 - t171 * t186 - t22 * t294, pkin(4) * t51 - t74 * t124 + t42 * t154 + t168 * t186 + t171 * t195 + t23 * t294, t122 * t42 + t124 * t41 + (-t22 * t295 + t3 + (-t22 + t343) * qJD(5)) * t171 + (t235 + t249 - t332) * t168 + t197, -t16 * pkin(4) - g(1) * t54 - g(2) * t55 + g(3) * t104 - t22 * t41 - t23 * t42 - t57 * t74 + (t184 + t202) * pkin(9), t9, t24, t364, -t261, t353, t193, t326 * t122 + t129 * t52 + t14 * t294 + t36 * t154 + t168 * t357 + t187 * t171, t122 * t35 - t124 * t36 + (t14 * t295 + t1 + (t14 + t343) * qJD(5)) * t171 + (t2 + t235 - t333) * t168 + t197, -t326 * t124 + t129 * t51 - t35 * t154 + t187 * t168 - t17 * t294 - t171 * t357, t5 * t129 - t17 * t35 - t14 * t36 - g(1) * (t234 * t60 + t54) - g(2) * (t234 * t62 + t55) - g(3) * (-t113 * t234 - t104) + t326 * t25 + (t185 + t202) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, -t257, t27, -t322, -t361, t119, -t124 * t57 + t190 + t332, t122 * t57 + t154 * t22 - t182, 0, 0, t322, t27, t257, t119, t361, -t322, -t122 * t59 - t179 + t332 + 0.2e1 * t346, pkin(5) * t51 - t52 * qJ(6) + (t17 - t23) * t124 + (t14 - t305) * t122, 0.2e1 * t323 - t25 * t122 + t59 * t124 + (0.2e1 * qJD(6) - t22) * t154 + t182, t1 * qJ(6) - t2 * pkin(5) - t25 * t59 - t14 * t23 - g(1) * (-pkin(5) * t31 + qJ(6) * t32) - g(2) * (-pkin(5) * t33 + qJ(6) * t34) - g(3) * (pkin(5) * t211 + qJ(6) * t68) + t305 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119 + t322, t27, -t154 ^ 2 - t348, t179 - t333 - t346;];
tau_reg  = t4;
