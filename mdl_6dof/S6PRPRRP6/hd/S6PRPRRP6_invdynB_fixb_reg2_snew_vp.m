% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 00:03
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:02:15
% EndTime: 2019-05-05 00:02:50
% DurationCPUTime: 29.34s
% Computational Cost: add. (44234->677), mult. (83665->995), div. (0->0), fcn. (57019->10), ass. (0->503)
t708 = sin(qJ(5));
t711 = cos(qJ(5));
t712 = cos(qJ(4));
t804 = qJD(2) * t712;
t662 = qJD(4) * t708 + t711 * t804;
t709 = sin(qJ(4));
t800 = qJD(2) * qJD(4);
t788 = t709 * t800;
t795 = qJDD(2) * t712;
t666 = -t788 + t795;
t782 = -t711 * qJDD(4) + t666 * t708;
t805 = qJD(2) * t709;
t687 = qJD(5) + t805;
t801 = qJD(5) + t687;
t554 = t662 * t801 + t782;
t660 = -t711 * qJD(4) + t708 * t804;
t742 = -qJDD(4) * t708 - t666 * t711;
t721 = qJD(5) * t660 + t742;
t826 = t660 * t687;
t874 = -t826 - t721;
t839 = t874 * t708;
t477 = -t554 * t711 - t839;
t657 = t662 ^ 2;
t860 = t660 ^ 2;
t617 = t657 - t860;
t440 = t477 * t712 + t617 * t709;
t702 = sin(pkin(6));
t704 = cos(pkin(6));
t437 = t477 * t709 - t617 * t712;
t473 = -t554 * t708 + t711 * t874;
t710 = sin(qJ(2));
t713 = cos(qJ(2));
t764 = t437 * t713 - t473 * t710;
t355 = t440 * t702 + t704 * t764;
t392 = t437 * t710 + t473 * t713;
t701 = sin(pkin(10));
t703 = cos(pkin(10));
t1003 = t355 * t701 + t392 * t703;
t1002 = t355 * t703 - t392 * t701;
t859 = t687 ^ 2;
t638 = t860 - t859;
t620 = t662 * t660;
t786 = t712 * t800;
t797 = qJDD(2) * t709;
t665 = -t786 - t797;
t658 = qJDD(5) - t665;
t876 = t620 + t658;
t834 = t876 * t708;
t536 = t638 * t711 - t834;
t555 = (qJD(5) - t687) * t662 + t782;
t457 = t536 * t712 - t555 * t709;
t454 = t536 * t709 + t555 * t712;
t833 = t876 * t711;
t532 = t638 * t708 + t833;
t755 = t454 * t713 - t532 * t710;
t381 = t457 * t702 + t704 * t755;
t416 = t454 * t710 + t532 * t713;
t1001 = t381 * t701 + t416 * t703;
t1000 = t381 * t703 - t416 * t701;
t995 = -t457 * t704 + t702 * t755;
t994 = -t440 * t704 + t702 * t764;
t873 = -t826 + t721;
t912 = -t555 * t708 + t873 * t711;
t875 = t657 + t860;
t911 = -t555 * t711 - t873 * t708;
t937 = t709 * t911 + t712 * t875;
t953 = t710 * t937 + t713 * t912;
t935 = -t709 * t875 + t712 * t911;
t951 = t710 * t912 - t713 * t937;
t973 = -t702 * t935 + t704 * t951;
t982 = t701 * t953 + t703 * t973;
t993 = qJ(1) * t982;
t984 = -t701 * t973 + t703 * t953;
t992 = qJ(1) * t984;
t991 = pkin(1) * t973;
t975 = t702 * t951 + t704 * t935;
t990 = pkin(1) * t975;
t639 = -t657 + t859;
t877 = -t620 + t658;
t832 = t877 * t708;
t918 = t711 * t639 + t832;
t831 = t877 * t711;
t917 = -t639 * t708 + t831;
t936 = -t709 * t917 - t712 * t873;
t954 = -t710 * t936 + t713 * t918;
t934 = -t709 * t873 + t712 * t917;
t952 = t710 * t918 + t713 * t936;
t972 = -t702 * t934 + t704 * t952;
t985 = -t701 * t972 + t703 * t954;
t983 = t701 * t954 + t703 * t972;
t981 = (-t702 * t975 - t704 * t973) * pkin(7);
t980 = pkin(7) * t953;
t974 = t702 * t952 + t704 * t934;
t605 = t859 + t657;
t508 = t605 * t711 + t834;
t971 = pkin(3) * t508;
t970 = pkin(4) * t508;
t969 = pkin(9) * t508;
t520 = t605 * t708 - t833;
t968 = pkin(9) * t520;
t967 = qJ(3) * t508;
t966 = t508 * t710;
t965 = t508 * t713;
t964 = t520 * t709;
t963 = t520 * t712;
t856 = -pkin(8) - pkin(2);
t956 = t856 * t935;
t955 = t856 * t937;
t950 = pkin(3) * t937 + pkin(4) * t875 + pkin(9) * t911 - qJ(3) * t935;
t949 = pkin(9) * t912;
t735 = (-t660 * t708 - t662 * t711) * t687;
t818 = t687 * t708;
t634 = t662 * t818;
t817 = t687 * t711;
t790 = t660 * t817;
t773 = t634 - t790;
t865 = t658 * t712 - t709 * t773;
t890 = -t710 * t865 + t713 * t735;
t863 = t658 * t709 + t712 * t773;
t887 = t710 * t735 + t713 * t865;
t907 = -t702 * t863 + t704 * t887;
t941 = -t701 * t907 + t703 * t890;
t595 = -qJD(5) * t662 - t782;
t774 = t711 * t595 + t660 * t818;
t739 = -t595 * t708 + t790;
t791 = t712 * t620;
t866 = -t709 * t739 - t791;
t889 = -t710 * t866 + t713 * t774;
t792 = t709 * t620;
t864 = t712 * t739 - t792;
t886 = t710 * t774 + t713 * t866;
t908 = -t702 * t864 + t704 * t886;
t940 = -t701 * t908 + t703 * t889;
t939 = t701 * t890 + t703 * t907;
t938 = t701 * t889 + t703 * t908;
t872 = -t859 - t860;
t891 = t708 * t872 + t831;
t933 = pkin(3) * t891;
t932 = pkin(4) * t891;
t888 = t711 * t872 - t832;
t931 = pkin(9) * t888;
t930 = pkin(9) * t891;
t929 = qJ(3) * t891;
t922 = t709 * t888;
t921 = t710 * t891;
t920 = t712 * t888;
t919 = t713 * t891;
t794 = qJDD(2) * t713;
t714 = qJD(2) ^ 2;
t811 = t710 * t714;
t669 = t794 - t811;
t647 = t669 * t702;
t690 = t704 * qJDD(2);
t649 = -t690 * t713 + t704 * t811;
t673 = g(1) * t701 - t703 * g(2);
t809 = g(3) - qJDD(1);
t642 = t673 * t702 + t704 * t809;
t812 = t710 * t642;
t542 = (-t647 * t702 + t649 * t704) * pkin(7) - t812;
t796 = qJDD(2) * t710;
t670 = t713 * t714 + t796;
t603 = t649 * t701 - t670 * t703;
t916 = -qJ(1) * t603 - t542 * t701;
t598 = t649 * t703 + t670 * t701;
t915 = -qJ(1) * t598 - t542 * t703;
t646 = t670 * t702;
t648 = t670 * t704;
t810 = t713 * t642;
t545 = (t646 * t702 + t648 * t704) * pkin(7) - t810;
t601 = t648 * t701 - t669 * t703;
t914 = -qJ(1) * t601 - t545 * t701;
t596 = t648 * t703 + t669 * t701;
t913 = -qJ(1) * t596 - t545 * t703;
t910 = t702 * t886 + t704 * t864;
t909 = t702 * t887 + t704 * t863;
t906 = 2 * qJD(6);
t900 = qJ(6) * t874;
t553 = -t711 * t721 - t634;
t740 = -t553 * t709 + t791;
t775 = t712 * t553 + t792;
t813 = t704 * t713;
t552 = t662 * t817 - t708 * t721;
t844 = t552 * t710;
t861 = -t702 * t775 + t704 * t844 + t740 * t813;
t871 = t713 * t552 - t710 * t740;
t885 = t701 * t871 + t703 * t861;
t884 = -t701 * t861 + t703 * t871;
t883 = t701 * t809;
t882 = t703 * t809;
t851 = pkin(4) * t709;
t776 = -pkin(9) * t712 + t851;
t663 = t776 * qJD(2);
t700 = qJDD(2) * pkin(2);
t674 = g(1) * t703 + g(2) * t701;
t784 = t702 * t809;
t586 = -t673 * t813 - t674 * t710 + t713 * t784;
t741 = qJDD(3) + t586;
t568 = -t714 * qJ(3) - t700 + t741;
t718 = -qJDD(2) * pkin(8) + t568;
t807 = t712 * t642 - t709 * t718;
t858 = qJD(4) ^ 2;
t491 = -pkin(4) * t858 + qJDD(4) * pkin(9) - t663 * t805 - t807;
t706 = t714 * pkin(8);
t587 = -t713 * t674 + (t704 * t673 - t784) * t710;
t799 = qJDD(2) * qJ(3);
t715 = -t714 * pkin(2) + t587 + t799;
t850 = pkin(4) * t712;
t777 = pkin(9) * t709 + t850;
t857 = 2 * qJD(3);
t503 = -t665 * pkin(4) - t666 * pkin(9) - t706 + (qJD(4) * t777 + t857) * qJD(2) + t715;
t420 = t711 * t491 + t708 * t503;
t610 = pkin(5) * t660 - qJ(6) * t662;
t770 = t658 * qJ(6) - t660 * t610 + t687 * t906 + t420;
t771 = pkin(7) * t670 - t810;
t870 = pkin(1) * t649 + t702 * t771;
t772 = pkin(7) * t669 + t812;
t869 = pkin(1) * t648 + t702 * t772;
t868 = pkin(1) * t647 + t704 * t771;
t867 = -pkin(1) * t646 + t704 * t772;
t862 = t704 * t775 + (t713 * t740 + t844) * t702;
t849 = pkin(5) * t711;
t507 = t586 * t710 + t587 * t713;
t848 = pkin(7) * t507;
t847 = qJ(6) * t711;
t783 = t642 * t709 + t712 * t718;
t490 = -qJDD(4) * pkin(4) - t858 * pkin(9) + t663 * t804 - t783;
t846 = t490 * t708;
t845 = t490 * t711;
t793 = qJD(2) * t857;
t566 = t715 + t793;
t565 = -t706 + t566;
t836 = t565 * t709;
t835 = t565 * t712;
t829 = t642 * t702;
t825 = t662 * t687;
t697 = t709 ^ 2;
t698 = t712 ^ 2;
t806 = t697 + t698;
t668 = t806 * qJDD(2);
t824 = t668 * t710;
t823 = t668 * t713;
t789 = t709 * t712 * t714;
t675 = qJDD(4) + t789;
t822 = t675 * t709;
t821 = t675 * t712;
t676 = qJDD(4) - t789;
t820 = t676 * t709;
t819 = t676 * t712;
t816 = t697 * t714;
t815 = t698 * t714;
t419 = t708 * t491 - t711 * t503;
t808 = t875 - t859;
t798 = qJDD(2) * t702;
t787 = t703 * t798;
t785 = -qJ(6) * t708 - pkin(4);
t364 = t419 * t708 + t711 * t420;
t616 = -t673 * t701 - t703 * t674;
t781 = t710 * t789;
t780 = t713 * t789;
t778 = t662 * t610 + qJDD(6) + t419;
t394 = -pkin(5) * t859 + t770;
t736 = -pkin(5) * t658 + t778;
t396 = qJ(6) * t859 - t736;
t342 = t394 * t711 - t396 * t708;
t717 = -t595 * pkin(5) + t490 - t900;
t405 = (pkin(5) * t687 - (2 * qJD(6))) * t662 + t717;
t322 = t342 * t709 - t405 * t712;
t341 = t394 * t708 + t396 * t711;
t769 = -t322 * t713 + t341 * t710;
t346 = t364 * t709 - t490 * t712;
t363 = -t419 * t711 + t420 * t708;
t768 = -t346 * t713 + t363 * t710;
t431 = -t709 * t807 + t712 * t783;
t765 = -t431 * t713 + t565 * t710;
t441 = t712 * t874 - t964;
t762 = -t441 * t713 + t966;
t442 = -t554 * t712 + t922;
t761 = -t442 * t713 + t921;
t561 = t660 * t801 + t742;
t445 = t561 * t712 + t964;
t760 = -t445 * t713 - t966;
t556 = -t595 + t825;
t446 = -t556 * t712 + t922;
t759 = -t446 * t713 + t921;
t432 = -t709 * t783 - t712 * t807;
t487 = t566 * t713 + t568 * t710;
t750 = t566 * t710 - t568 * t713;
t506 = t586 * t713 - t587 * t710;
t664 = 0.2e1 * t786 + t797;
t667 = -0.2e1 * t788 + t795;
t608 = t664 * t709 - t667 * t712;
t672 = (-t697 + t698) * t714;
t749 = t608 * t713 + t672 * t710;
t683 = -t816 - t858;
t625 = t683 * t709 + t819;
t748 = -t625 * t713 + t664 * t710;
t685 = -t815 - t858;
t627 = t685 * t712 - t822;
t747 = -t627 * t713 + t667 * t710;
t671 = t806 * t714;
t744 = -t671 * t710 + t823;
t615 = t673 * t703 - t674 * t701;
t659 = t806 * t800;
t743 = qJDD(4) * t710 + t659 * t713;
t682 = t816 - t858;
t624 = -t682 * t709 - t821;
t738 = t624 * t713 - t709 * t796;
t684 = -t815 + t858;
t626 = -t684 * t712 - t820;
t737 = t626 * t713 + t710 * t795;
t635 = -t665 * t712 - t697 * t800;
t734 = t635 * t713 - t781;
t636 = -t666 * t709 - t698 * t800;
t733 = t636 * t713 + t781;
t314 = -pkin(4) * t341 - pkin(5) * t396 - qJ(6) * t394;
t315 = -pkin(9) * t341 + (pkin(5) * t708 - t847) * t405;
t323 = t342 * t712 + t405 * t709;
t278 = pkin(3) * t341 - t314 * t712 - t315 * t709 + t323 * t856;
t287 = pkin(3) * t322 + pkin(9) * t342 - qJ(3) * t323 + (t785 - t849) * t405;
t306 = t322 * t710 + t341 * t713;
t732 = pkin(7) * t306 + t278 * t713 + t287 * t710;
t347 = t364 * t712 + t490 * t709;
t294 = t856 * t347 + (pkin(3) + t777) * t363;
t300 = pkin(3) * t346 - pkin(4) * t490 + pkin(9) * t364 - qJ(3) * t347;
t316 = t346 * t710 + t363 * t713;
t731 = pkin(7) * t316 + t294 * t713 + t300 * t710;
t384 = pkin(5) * t808 + t770;
t385 = qJ(6) * t808 + t736;
t330 = -t384 * t708 + t385 * t711 - t949;
t404 = -pkin(4) * t912 - pkin(5) * t873 + qJ(6) * t555;
t305 = pkin(3) * t912 - t330 * t709 - t404 * t712 + t956;
t311 = t384 * t711 + t385 * t708 + t950;
t730 = t305 * t713 + t311 * t710 + t980;
t716 = t662 * t906 - t717;
t388 = -pkin(5) * t825 + t716 + t900;
t357 = -pkin(5) * t839 + t388 * t711 - t969;
t358 = -t970 - qJ(6) * t876 + (-t605 + t859) * pkin(5) - t770;
t443 = -t709 * t874 - t963;
t308 = -t357 * t709 - t358 * t712 + t443 * t856 + t971;
t324 = pkin(3) * t441 - t968 - qJ(3) * t443 + t388 * t708 + (pkin(4) + t849) * t874;
t406 = t441 * t710 + t965;
t729 = pkin(7) * t406 + t308 * t713 + t324 * t710;
t389 = (-t556 - t825) * pkin(5) + t716;
t359 = -t389 * t708 - t556 * t847 - t930;
t362 = -t932 + (-t872 - t859) * qJ(6) + (-t877 - t658) * pkin(5) + t778;
t448 = t556 * t709 + t920;
t310 = -t359 * t709 - t362 * t712 + t448 * t856 + t933;
t325 = pkin(3) * t446 - qJ(3) * t448 + t389 * t711 + t556 * t785 + t931;
t410 = t446 * t710 + t919;
t728 = pkin(7) * t410 + t310 * t713 + t325 * t710;
t344 = -t363 - t949;
t313 = -t344 * t709 + (pkin(3) + t850) * t912 + t956;
t317 = t364 + t950;
t727 = t313 * t713 + t317 * t710 + t980;
t390 = t419 - t932;
t424 = t846 - t930;
t444 = t554 * t709 + t920;
t319 = -t390 * t712 - t424 * t709 + t444 * t856 + t933;
t343 = pkin(3) * t442 - pkin(4) * t554 - qJ(3) * t444 - t845 + t931;
t407 = t442 * t710 + t919;
t726 = pkin(7) * t407 + t319 * t713 + t343 * t710;
t393 = t420 + t970;
t425 = t845 + t969;
t447 = -t561 * t709 + t963;
t321 = -t393 * t712 - t425 * t709 + t447 * t856 - t971;
t345 = pkin(3) * t445 + pkin(4) * t561 - qJ(3) * t447 + t846 + t968;
t409 = t445 * t710 - t965;
t725 = pkin(7) * t409 + t321 * t713 + t345 * t710;
t369 = pkin(3) * t565 + t432 * t856;
t382 = pkin(3) * t431 - qJ(3) * t432;
t408 = t431 * t710 + t565 * t713;
t724 = pkin(7) * t408 + t369 * t713 + t382 * t710;
t629 = t683 * t712 - t820;
t459 = pkin(3) * t625 - qJ(3) * t629 + t783;
t468 = pkin(3) * t664 + t629 * t856 + t835;
t575 = t625 * t710 + t664 * t713;
t723 = pkin(7) * t575 + t459 * t710 + t468 * t713;
t632 = -t685 * t709 - t821;
t460 = pkin(3) * t627 - qJ(3) * t632 + t807;
t467 = pkin(3) * t667 + t632 * t856 - t836;
t576 = t627 * t710 + t667 * t713;
t722 = pkin(7) * t576 + t460 * t710 + t467 * t713;
t426 = -pkin(3) * t671 - t432;
t613 = -t671 * t713 - t824;
t720 = -pkin(3) * t824 + pkin(7) * t613 + t426 * t713;
t719 = pkin(7) * t487 + (pkin(2) * t713 + qJ(3) * t710) * t642;
t679 = t701 * t798;
t637 = qJDD(4) * t713 - t659 * t710;
t631 = -t684 * t709 + t819;
t630 = (t666 - t788) * t712;
t628 = t682 * t712 - t822;
t623 = (-t665 + t786) * t709;
t622 = t704 * t642;
t614 = t743 * t704;
t609 = -t664 * t712 - t667 * t709;
t607 = t744 * t704;
t606 = t744 * t702;
t594 = -t635 * t710 - t780;
t593 = -t636 * t710 + t780;
t592 = -t626 * t710 + t712 * t794;
t591 = -t624 * t710 - t709 * t794;
t574 = -0.2e1 * t700 + t741;
t573 = t587 + t793 + 0.2e1 * t799;
t567 = -t608 * t710 + t672 * t713;
t527 = -t607 * t701 + t613 * t703;
t526 = t607 * t703 + t613 * t701;
t525 = -t623 * t702 + t704 * t734;
t524 = -t630 * t702 + t704 * t733;
t523 = -t631 * t702 + t704 * t737;
t522 = -t628 * t702 + t704 * t738;
t517 = -t632 * t702 + t704 * t747;
t516 = -t629 * t702 + t704 * t748;
t515 = t632 * t704 + t702 * t747;
t514 = t629 * t704 + t702 * t748;
t505 = -t609 * t702 + t704 * t749;
t504 = t507 * t704;
t492 = -pkin(2) * t568 + qJ(3) * t566;
t489 = t586 * t702 - t868;
t488 = t587 * t702 - t867;
t483 = -t574 * t702 + t868;
t482 = t487 * t704;
t481 = -t573 * t702 + t867;
t480 = -t506 * t704 + t829;
t479 = -t506 * t702 - t622;
t466 = qJ(3) * t667 + t627 * t856 + t835;
t465 = qJ(3) * t664 + t625 * t856 + t836;
t464 = -t517 * t701 + t576 * t703;
t463 = -t516 * t701 + t575 * t703;
t462 = t517 * t703 + t576 * t701;
t461 = t516 * t703 + t575 * t701;
t450 = t704 * t750 + t829;
t449 = t702 * t750 - t622;
t421 = -qJ(3) * t671 - t668 * t856 - t431;
t413 = -pkin(1) * t479 + t704 * t848;
t412 = -t480 * t701 + t507 * t703;
t411 = t480 * t703 + t507 * t701;
t403 = (-t479 * t702 - t480 * t704) * pkin(7);
t402 = -t450 * t701 + t487 * t703;
t401 = t450 * t703 + t487 * t701;
t395 = -pkin(3) * t823 - t426 * t710 + (-t606 * t702 - t607 * t704) * pkin(7);
t383 = (-pkin(2) * t710 + qJ(3) * t713) * t642 + (-t449 * t702 - t450 * t704) * pkin(7);
t377 = -t448 * t702 + t704 * t759;
t376 = -t447 * t702 + t704 * t760;
t375 = t448 * t704 + t702 * t759;
t374 = t447 * t704 + t702 * t760;
t373 = -t444 * t702 + t704 * t761;
t372 = -t443 * t702 + t704 * t762;
t371 = t444 * t704 + t702 * t761;
t370 = t443 * t704 + t702 * t762;
t368 = qJ(3) * t565 + t431 * t856;
t367 = -t432 * t702 + t704 * t765;
t366 = t432 * t704 + t702 * t765;
t365 = -pkin(1) * t449 - t492 * t702 + t704 * t719;
t361 = t460 * t713 - t467 * t710 + (-t515 * t702 - t517 * t704) * pkin(7);
t360 = t459 * t713 - t468 * t710 + (-t514 * t702 - t516 * t704) * pkin(7);
t350 = -pkin(1) * t606 - t421 * t702 + t704 * t720;
t349 = -pkin(1) * t515 - t466 * t702 + t704 * t722;
t348 = -pkin(1) * t514 - t465 * t702 + t704 * t723;
t340 = -t377 * t701 + t410 * t703;
t339 = -t376 * t701 + t409 * t703;
t338 = t377 * t703 + t410 * t701;
t337 = t376 * t703 + t409 * t701;
t336 = -t373 * t701 + t407 * t703;
t335 = -t372 * t701 + t406 * t703;
t334 = t373 * t703 + t407 * t701;
t333 = t372 * t703 + t406 * t701;
t332 = -t367 * t701 + t408 * t703;
t331 = t367 * t703 + t408 * t701;
t320 = -t393 * t709 + t425 * t712 + t445 * t856 - t967;
t318 = -t390 * t709 + t424 * t712 + t442 * t856 + t929;
t312 = t344 * t712 + (qJ(3) + t851) * t912 + t955;
t309 = t359 * t712 - t362 * t709 + t446 * t856 + t929;
t307 = t357 * t712 - t358 * t709 + t441 * t856 + t967;
t304 = qJ(3) * t912 + t330 * t712 - t404 * t709 + t955;
t303 = -t347 * t702 + t704 * t768;
t302 = t347 * t704 + t702 * t768;
t301 = -t369 * t710 + t382 * t713 + (-t366 * t702 - t367 * t704) * pkin(7);
t299 = -pkin(1) * t366 - t368 * t702 + t704 * t724;
t298 = -t321 * t710 + t345 * t713 + (-t374 * t702 - t376 * t704) * pkin(7);
t297 = -t702 * t323 + t704 * t769;
t296 = t323 * t704 + t702 * t769;
t295 = -t319 * t710 + t343 * t713 + (-t371 * t702 - t373 * t704) * pkin(7);
t293 = t856 * t346 + (qJ(3) + t776) * t363;
t292 = -t303 * t701 + t316 * t703;
t291 = t303 * t703 + t316 * t701;
t290 = -t310 * t710 + t325 * t713 + (-t375 * t702 - t377 * t704) * pkin(7);
t289 = -pkin(1) * t374 - t320 * t702 + t704 * t725;
t288 = -t308 * t710 + t324 * t713 + (-t370 * t702 - t372 * t704) * pkin(7);
t286 = -pkin(1) * t371 - t318 * t702 + t704 * t726;
t285 = -t313 * t710 + t317 * t713 + t981;
t284 = -t297 * t701 + t306 * t703;
t283 = t297 * t703 + t306 * t701;
t282 = -t305 * t710 + t311 * t713 + t981;
t281 = -pkin(1) * t375 - t309 * t702 + t704 * t728;
t280 = -t312 * t702 + t704 * t727 - t990;
t279 = -pkin(1) * t370 - t307 * t702 + t704 * t729;
t277 = qJ(3) * t341 - t314 * t709 + t315 * t712 + t322 * t856;
t276 = -t304 * t702 + t704 * t730 - t990;
t275 = -t294 * t710 + t300 * t713 + (-t302 * t702 - t303 * t704) * pkin(7);
t274 = -pkin(1) * t302 - t293 * t702 + t704 * t731;
t273 = -t278 * t710 + t287 * t713 + (-t296 * t702 - t297 * t704) * pkin(7);
t272 = -pkin(1) * t296 - t277 * t702 + t704 * t732;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t616, 0, 0, 0, 0, 0, 0, t603, t601, 0, t412, 0, 0, 0, 0, 0, 0, 0, -t603, -t601, t402, 0, 0, 0, 0, 0, 0, t463, t464, t527, t332, 0, 0, 0, 0, 0, 0, t336, t339, t984, t292, 0, 0, 0, 0, 0, 0, t340, t984, t335, t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t615, 0, 0, 0, 0, 0, 0, -t598, -t596, 0, t411, 0, 0, 0, 0, 0, 0, 0, t598, t596, t401, 0, 0, 0, 0, 0, 0, t461, t462, t526, t331, 0, 0, 0, 0, 0, 0, t334, t337, t982, t291, 0, 0, 0, 0, 0, 0, t338, t982, t333, t283; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t809, 0, 0, 0, 0, 0, 0, t647, -t646, 0, t479, 0, 0, 0, 0, 0, 0, 0, -t647, t646, t449, 0, 0, 0, 0, 0, 0, t514, t515, t606, t366, 0, 0, 0, 0, 0, 0, t371, t374, t975, t302, 0, 0, 0, 0, 0, 0, t375, t975, t370, t296; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t883, -t882, -t615, -qJ(1) * t615, 0, 0, -t601, 0, t603, t679, -t489 * t701 - t915, -t488 * t701 - t913, -t504 * t701 + t506 * t703, -qJ(1) * t411 + t403 * t703 - t413 * t701, t679, t601, -t603, 0, 0, 0, -t482 * t701 - t703 * t750, -t483 * t701 + t915, -t481 * t701 + t913, -qJ(1) * t401 - t365 * t701 + t383 * t703, -t524 * t701 + t593 * t703, -t505 * t701 + t567 * t703, -t523 * t701 + t592 * t703, -t525 * t701 + t594 * t703, -t522 * t701 + t591 * t703, -t614 * t701 + t637 * t703, -qJ(1) * t461 - t348 * t701 + t360 * t703, -qJ(1) * t462 - t349 * t701 + t361 * t703, -qJ(1) * t526 - t350 * t701 + t395 * t703, -qJ(1) * t331 - t299 * t701 + t301 * t703, t884, t1003, t985, t940, t1001, t941, -qJ(1) * t334 - t286 * t701 + t295 * t703, -qJ(1) * t337 - t289 * t701 + t298 * t703, -t280 * t701 + t285 * t703 - t993, -qJ(1) * t291 - t274 * t701 + t275 * t703, t884, t985, -t1003, t941, -t1001, t940, -qJ(1) * t338 - t281 * t701 + t290 * t703, -t276 * t701 + t282 * t703 - t993, -qJ(1) * t333 - t279 * t701 + t288 * t703, -qJ(1) * t283 - t272 * t701 + t273 * t703; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t882, -t883, t616, qJ(1) * t616, 0, 0, t596, 0, -t598, -t787, t489 * t703 - t916, t488 * t703 - t914, t504 * t703 + t506 * t701, qJ(1) * t412 + t403 * t701 + t413 * t703, -t787, -t596, t598, 0, 0, 0, t482 * t703 - t701 * t750, t483 * t703 + t916, t481 * t703 + t914, qJ(1) * t402 + t365 * t703 + t383 * t701, t524 * t703 + t593 * t701, t505 * t703 + t567 * t701, t523 * t703 + t592 * t701, t525 * t703 + t594 * t701, t522 * t703 + t591 * t701, t614 * t703 + t637 * t701, qJ(1) * t463 + t348 * t703 + t360 * t701, qJ(1) * t464 + t349 * t703 + t361 * t701, qJ(1) * t527 + t350 * t703 + t395 * t701, qJ(1) * t332 + t299 * t703 + t301 * t701, t885, -t1002, t983, t938, -t1000, t939, qJ(1) * t336 + t286 * t703 + t295 * t701, qJ(1) * t339 + t289 * t703 + t298 * t701, t280 * t703 + t285 * t701 + t992, qJ(1) * t292 + t274 * t703 + t275 * t701, t885, t983, t1002, t939, t1000, t938, qJ(1) * t340 + t281 * t703 + t290 * t701, t276 * t703 + t282 * t701 + t992, qJ(1) * t335 + t279 * t703 + t288 * t701, qJ(1) * t284 + t272 * t703 + t273 * t701; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t673, t674, 0, 0, 0, 0, t646, 0, t647, t690, -t586 * t704 - t870, -t587 * t704 - t869, t507 * t702, pkin(1) * t480 + t702 * t848, t690, -t646, -t647, 0, 0, 0, t487 * t702, t574 * t704 + t870, t573 * t704 + t869, pkin(1) * t450 + t492 * t704 + t702 * t719, t630 * t704 + t702 * t733, t609 * t704 + t702 * t749, t631 * t704 + t702 * t737, t623 * t704 + t702 * t734, t628 * t704 + t702 * t738, t743 * t702, pkin(1) * t516 + t465 * t704 + t702 * t723, pkin(1) * t517 + t466 * t704 + t702 * t722, pkin(1) * t607 + t421 * t704 + t702 * t720, pkin(1) * t367 + t368 * t704 + t702 * t724, t862, -t994, t974, t910, -t995, t909, pkin(1) * t373 + t318 * t704 + t702 * t726, pkin(1) * t376 + t320 * t704 + t702 * t725, t312 * t704 + t702 * t727 + t991, pkin(1) * t303 + t293 * t704 + t702 * t731, t862, t974, t994, t909, t995, t910, pkin(1) * t377 + t309 * t704 + t702 * t728, t304 * t704 + t702 * t730 + t991, pkin(1) * t372 + t307 * t704 + t702 * t729, pkin(1) * t297 + t277 * t704 + t702 * t732;];
tauB_reg  = t1;
