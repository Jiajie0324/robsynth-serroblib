% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 11:33
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 11:29:34
% EndTime: 2019-05-05 11:31:10
% DurationCPUTime: 83.71s
% Computational Cost: add. (824648->1160), mult. (1712364->1953), div. (0->0), fcn. (1418093->16), ass. (0->851)
t1152 = cos(qJ(3));
t1147 = sin(qJ(3));
t1139 = sin(pkin(7));
t1337 = qJD(2) * t1139;
t1302 = t1147 * t1337;
t1307 = qJDD(2) * t1139;
t1100 = -qJD(3) * t1302 + t1152 * t1307;
t1142 = cos(pkin(7));
t1131 = qJD(2) * t1142 + qJD(3);
t1110 = t1131 * t1302;
t1077 = t1100 - t1110;
t1373 = t1077 * t1142;
t1144 = sin(qJ(6));
t1146 = sin(qJ(4));
t1151 = cos(qJ(4));
t1092 = t1131 * t1151 - t1146 * t1302;
t1093 = t1131 * t1146 + t1151 * t1302;
t1145 = sin(qJ(5));
t1150 = cos(qJ(5));
t1053 = t1092 * t1145 + t1093 * t1150;
t1305 = qJDD(2) * t1147;
t1336 = qJD(2) * t1152;
t1099 = (qJD(3) * t1336 + t1305) * t1139;
t1130 = qJDD(2) * t1142 + qJDD(3);
t1288 = t1099 * t1146 - t1151 * t1130;
t1039 = -qJD(4) * t1093 - t1288;
t1040 = t1092 * qJD(4) + t1151 * t1099 + t1146 * t1130;
t1289 = -t1150 * t1039 + t1040 * t1145;
t947 = -qJD(5) * t1053 - t1289;
t1170 = qJDD(6) - t947;
t1301 = t1139 * t1336;
t1125 = -qJD(4) + t1301;
t1116 = -qJD(5) + t1125;
t1149 = cos(qJ(6));
t1023 = t1053 * t1144 + t1149 * t1116;
t1025 = t1053 * t1149 - t1116 * t1144;
t957 = t1025 * t1023;
t1368 = t1170 - t957;
t1372 = t1144 * t1368;
t1371 = t1149 * t1368;
t1148 = sin(qJ(2));
t1153 = cos(qJ(2));
t1143 = cos(pkin(6));
t1140 = sin(pkin(6));
t1350 = g(3) - qJDD(1);
t1291 = t1140 * t1350;
t1141 = cos(pkin(13));
t1133 = t1141 * g(2);
t1138 = sin(pkin(13));
t1292 = g(1) * t1138 - t1133;
t1164 = t1143 * t1292 - t1291;
t1286 = g(1) * t1141 + g(2) * t1138;
t1062 = -t1148 * t1286 - t1153 * t1164;
t1154 = qJD(2) ^ 2;
t1351 = pkin(9) * t1139;
t1162 = qJDD(2) * pkin(2) + t1154 * t1351 - t1062;
t1113 = t1140 * t1292;
t1282 = t1143 * t1350 + t1113;
t1370 = -t1139 * t1282 + t1142 * t1162;
t1051 = -t1150 * t1092 + t1093 * t1145;
t1035 = t1051 * t1116;
t1167 = qJD(5) * t1051 - t1039 * t1145 - t1040 * t1150;
t1369 = t1167 - t1035;
t1205 = -qJDD(4) + t1100;
t1095 = -qJDD(5) + t1205;
t888 = -t1023 * qJD(6) - t1144 * t1095 - t1149 * t1167;
t1048 = qJD(6) + t1051;
t972 = t1048 * t1023;
t851 = -t972 + t888;
t1063 = t1148 * t1164 - t1153 * t1286;
t1007 = t1062 * t1148 + t1063 * t1153;
t1367 = t1007 * t1140;
t1366 = t1138 * t1350;
t1365 = t1141 * t1350;
t1331 = t1051 * t1053;
t1163 = -t1095 - t1331;
t1364 = t1145 * t1163;
t1329 = t1092 * t1093;
t1165 = -t1205 + t1329;
t1363 = t1146 * t1165;
t1199 = t1148 * t1282;
t1362 = t1150 * t1163;
t1361 = t1151 * t1165;
t1198 = t1153 * t1282;
t1078 = t1092 * t1125;
t1005 = -t1078 - t1040;
t1003 = -t1078 + t1040;
t1111 = t1131 * t1301;
t1074 = t1111 + t1099;
t1020 = (-t1092 * t1151 - t1093 * t1146) * t1125;
t1359 = t1147 * t1020 + t1152 * t1205;
t1290 = t1149 * t1095 - t1144 * t1167;
t848 = (qJD(6) - t1048) * t1025 + t1290;
t910 = (qJD(5) + t1116) * t1053 + t1289;
t1000 = (qJD(4) + t1125) * t1093 + t1288;
t1081 = -t1138 * t1292 - t1141 * t1286;
t1055 = -t1154 * pkin(2) + pkin(9) * t1307 + t1063;
t959 = t1152 * t1055 + t1147 * t1370;
t1021 = t1023 ^ 2;
t1022 = t1025 ^ 2;
t1047 = t1048 ^ 2;
t1049 = t1051 ^ 2;
t1050 = t1053 ^ 2;
t1358 = t1092 ^ 2;
t1091 = t1093 ^ 2;
t1357 = t1116 ^ 2;
t1120 = t1125 ^ 2;
t1356 = t1131 ^ 2;
t1355 = pkin(3) * t1147;
t1354 = pkin(3) * t1152;
t1353 = pkin(5) * t1145;
t1352 = pkin(8) * t1143;
t1287 = -pkin(10) * t1147 - t1354;
t1098 = t1287 * t1337;
t1158 = t1130 * pkin(10) + t1098 * t1301 + t959;
t1157 = -pkin(3) * t1356 + t1158;
t1014 = t1139 * t1162 + t1142 * t1282;
t1160 = -pkin(10) * t1074 - t1014;
t1159 = -pkin(3) * t1077 + t1160;
t866 = t1146 * t1157 - t1151 * t1159;
t1156 = pkin(4) * t1165 + pkin(11) * t1005 - t866;
t1066 = -pkin(4) * t1125 - pkin(11) * t1093;
t867 = t1146 * t1159 + t1151 * t1157;
t819 = -pkin(4) * t1358 + pkin(11) * t1039 + t1066 * t1125 + t867;
t736 = t1145 * t1156 + t1150 * t819;
t978 = pkin(5) * t1051 - pkin(12) * t1053;
t706 = -pkin(5) * t1357 - pkin(12) * t1095 - t1051 * t978 + t736;
t1309 = t1370 * t1152;
t939 = -t1130 * pkin(3) - t1356 * pkin(10) + (t1098 * t1337 + t1055) * t1147 - t1309;
t870 = -t1039 * pkin(4) - t1358 * pkin(11) + t1066 * t1093 + t939;
t767 = t1369 * pkin(12) + (-t1053 * t1116 - t947) * pkin(5) + t870;
t651 = t1144 * t767 + t1149 * t706;
t735 = t1145 * t819 - t1150 * t1156;
t705 = t1095 * pkin(5) - pkin(12) * t1357 + t1053 * t978 + t735;
t1349 = t1144 * t705;
t876 = t1170 + t957;
t1348 = t1144 * t876;
t1347 = t1145 * t870;
t969 = t1095 - t1331;
t1346 = t1145 * t969;
t652 = t1145 * t736 - t1150 * t735;
t1345 = t1146 * t652;
t1344 = t1146 * t939;
t1343 = t1149 * t705;
t1342 = t1149 * t876;
t1341 = t1150 * t870;
t1340 = t1150 * t969;
t1339 = t1151 * t652;
t1338 = t1151 * t939;
t1032 = t1205 + t1329;
t1335 = t1032 * t1146;
t1334 = t1032 * t1151;
t1333 = t1048 * t1144;
t1332 = t1048 * t1149;
t1303 = t1131 * t1337;
t1136 = t1147 ^ 2;
t1137 = t1152 ^ 2;
t1308 = t1136 + t1137;
t1079 = t1308 * t1303;
t1330 = t1079 * t1148;
t1313 = t1152 * t1154;
t1135 = t1139 ^ 2;
t1320 = t1135 * t1147;
t1124 = t1313 * t1320;
t1096 = -t1124 + t1130;
t1328 = t1096 * t1147;
t1327 = t1096 * t1152;
t1097 = t1124 + t1130;
t1326 = t1097 * t1147;
t1325 = t1097 * t1152;
t1324 = t1116 * t1145;
t1323 = t1116 * t1150;
t1322 = t1125 * t1146;
t1321 = t1125 * t1151;
t1319 = t1135 * t1154;
t1318 = t1139 * t1153;
t1317 = t1147 * t1014;
t1315 = t1152 * t1014;
t1306 = qJDD(2) * t1140;
t1304 = -pkin(5) * t1150 - pkin(4);
t1300 = t1145 * t957;
t1299 = t1150 * t957;
t1298 = t1147 * t1331;
t1297 = t1152 * t1331;
t1296 = t1147 * t1329;
t1295 = t1152 * t1329;
t1294 = t1136 * t1319;
t1293 = t1137 * t1319;
t650 = t1144 * t706 - t1149 * t767;
t653 = t1145 * t735 + t1150 * t736;
t774 = t1146 * t866 + t1151 * t867;
t1088 = -t1294 - t1356;
t1054 = -t1088 * t1147 - t1327;
t1285 = pkin(9) * t1054 - t1317;
t1103 = -t1293 - t1356;
t1061 = t1103 * t1152 - t1326;
t1284 = pkin(9) * t1061 + t1315;
t1283 = g(2) * t1138 ^ 2 + t1133 * t1141;
t599 = t1144 * t651 - t1149 * t650;
t600 = t1144 * t650 + t1149 * t651;
t773 = t1146 * t867 - t1151 * t866;
t573 = t1145 * t600 - t1150 * t705;
t574 = t1145 * t705 + t1150 * t600;
t529 = -t1146 * t573 + t1151 * t574;
t1281 = t1147 * t529 - t1152 * t599;
t606 = t1151 * t653 - t1345;
t1280 = t1147 * t606 - t1152 * t870;
t852 = -t972 - t888;
t765 = -t1144 * t852 - t1149 * t848;
t924 = t1021 + t1022;
t728 = t1145 * t765 + t1150 * t924;
t729 = -t1145 * t924 + t1150 * t765;
t644 = -t1146 * t728 + t1151 * t729;
t763 = -t1144 * t848 + t1149 * t852;
t1279 = t1147 * t644 - t1152 * t763;
t850 = (-qJD(6) - t1048) * t1025 - t1290;
t766 = -t1144 * t851 + t1149 * t850;
t956 = -t1022 + t1021;
t739 = t1145 * t766 + t1150 * t956;
t740 = -t1145 * t956 + t1150 * t766;
t657 = -t1146 * t739 + t1151 * t740;
t764 = -t1144 * t850 - t1149 * t851;
t1278 = t1147 * t657 + t1152 * t764;
t933 = -t1047 - t1021;
t798 = t1149 * t933 - t1372;
t742 = t1145 * t798 + t1150 * t850;
t743 = -t1145 * t850 + t1150 * t798;
t661 = -t1146 * t742 + t1151 * t743;
t797 = t1144 * t933 + t1371;
t1277 = t1147 * t661 - t1152 * t797;
t945 = -t1022 - t1047;
t802 = -t1144 * t945 - t1342;
t744 = t1145 * t802 - t1150 * t851;
t745 = t1145 * t851 + t1150 * t802;
t663 = -t1146 * t744 + t1151 * t745;
t801 = t1149 * t945 - t1348;
t1276 = t1147 * t663 - t1152 * t801;
t968 = -t1022 + t1047;
t827 = -t1144 * t968 + t1371;
t754 = t1145 * t827 + t1150 * t852;
t756 = -t1145 * t852 + t1150 * t827;
t675 = -t1146 * t754 + t1151 * t756;
t825 = -t1149 * t968 - t1372;
t1275 = t1147 * t675 + t1152 * t825;
t967 = t1021 - t1047;
t828 = t1149 * t967 - t1348;
t755 = t1145 * t828 + t1150 * t848;
t757 = -t1145 * t848 + t1150 * t828;
t676 = -t1146 * t755 + t1151 * t757;
t826 = -t1144 * t967 - t1342;
t1274 = t1147 * t676 + t1152 * t826;
t887 = -qJD(6) * t1025 - t1290;
t840 = t1023 * t1332 - t1144 * t887;
t790 = t1145 * t840 + t1299;
t792 = t1150 * t840 - t1300;
t716 = -t1146 * t790 + t1151 * t792;
t839 = -t1023 * t1333 - t1149 * t887;
t1273 = t1147 * t716 + t1152 * t839;
t842 = -t1025 * t1333 + t1149 * t888;
t791 = t1145 * t842 - t1299;
t793 = t1150 * t842 + t1300;
t717 = -t1146 * t791 + t1151 * t793;
t841 = -t1025 * t1332 - t1144 * t888;
t1272 = t1147 * t717 + t1152 * t841;
t914 = t1035 + t1167;
t810 = -t1145 * t910 + t1150 * t914;
t812 = -t1145 * t914 - t1150 * t910;
t732 = -t1146 * t810 + t1151 * t812;
t951 = -t1049 - t1050;
t1271 = t1147 * t732 - t1152 * t951;
t909 = (qJD(5) - t1116) * t1053 + t1289;
t811 = -t1145 * t909 - t1150 * t1369;
t813 = t1145 * t1369 - t1150 * t909;
t733 = -t1146 * t811 + t1151 * t813;
t985 = -t1050 + t1049;
t1270 = t1147 * t733 + t1152 * t985;
t898 = (-t1023 * t1149 + t1025 * t1144) * t1048;
t829 = t1145 * t898 - t1150 * t1170;
t830 = t1145 * t1170 + t1150 * t898;
t750 = -t1146 * t829 + t1151 * t830;
t897 = (t1023 * t1144 + t1025 * t1149) * t1048;
t1269 = t1147 * t750 + t1152 * t897;
t1268 = t1147 * t774 - t1152 * t939;
t975 = -t1357 - t1049;
t901 = t1145 * t975 + t1362;
t902 = t1150 * t975 - t1364;
t800 = -t1146 * t901 + t1151 * t902;
t1267 = t1147 * t800 - t1152 * t909;
t1015 = -t1050 - t1357;
t925 = t1015 * t1150 + t1346;
t926 = -t1015 * t1145 + t1340;
t834 = -t1146 * t925 + t1151 * t926;
t1266 = t1147 * t834 + t1152 * t1369;
t1031 = -t1050 + t1357;
t929 = t1031 * t1150 + t1364;
t931 = -t1031 * t1145 + t1362;
t846 = -t1146 * t929 + t1151 * t931;
t1265 = t1147 * t846 + t1152 * t914;
t1030 = t1049 - t1357;
t930 = t1030 * t1145 - t1340;
t932 = t1030 * t1150 + t1346;
t847 = -t1146 * t930 + t1151 * t932;
t1264 = t1147 * t847 + t1152 * t910;
t958 = t1055 * t1147 - t1309;
t1263 = t1147 * t959 - t1152 * t958;
t885 = t1147 * t958 + t1152 * t959;
t528 = t1146 * t574 + t1151 * t573;
t493 = -t1139 * t528 + t1142 * t1281;
t513 = t1147 * t599 + t1152 * t529;
t1262 = t1148 * t513 + t1153 * t493;
t605 = t1146 * t653 + t1339;
t537 = -t1139 * t605 + t1142 * t1280;
t592 = t1147 * t870 + t1152 * t606;
t1261 = t1148 * t592 + t1153 * t537;
t643 = t1146 * t729 + t1151 * t728;
t579 = -t1139 * t643 + t1142 * t1279;
t616 = t1147 * t763 + t1152 * t644;
t1260 = t1148 * t616 + t1153 * t579;
t656 = t1146 * t740 + t1151 * t739;
t588 = -t1139 * t656 + t1142 * t1278;
t623 = -t1147 * t764 + t1152 * t657;
t1259 = t1148 * t623 + t1153 * t588;
t660 = t1146 * t743 + t1151 * t742;
t591 = -t1139 * t660 + t1142 * t1277;
t633 = t1147 * t797 + t1152 * t661;
t1258 = t1148 * t633 + t1153 * t591;
t662 = t1146 * t745 + t1151 * t744;
t596 = -t1139 * t662 + t1142 * t1276;
t634 = t1147 * t801 + t1152 * t663;
t1257 = t1148 * t634 + t1153 * t596;
t673 = t1146 * t756 + t1151 * t754;
t603 = -t1139 * t673 + t1142 * t1275;
t636 = -t1147 * t825 + t1152 * t675;
t1256 = t1148 * t636 + t1153 * t603;
t674 = t1146 * t757 + t1151 * t755;
t604 = -t1139 * t674 + t1142 * t1274;
t637 = -t1147 * t826 + t1152 * t676;
t1255 = t1148 * t637 + t1153 * t604;
t714 = t1146 * t792 + t1151 * t790;
t626 = -t1139 * t714 + t1142 * t1273;
t689 = -t1147 * t839 + t1152 * t716;
t1254 = t1148 * t689 + t1153 * t626;
t715 = t1146 * t793 + t1151 * t791;
t627 = -t1139 * t715 + t1142 * t1272;
t690 = -t1147 * t841 + t1152 * t717;
t1253 = t1148 * t690 + t1153 * t627;
t730 = t1146 * t812 + t1151 * t810;
t640 = -t1139 * t730 + t1142 * t1271;
t708 = t1147 * t951 + t1152 * t732;
t1252 = t1148 * t708 + t1153 * t640;
t731 = t1146 * t813 + t1151 * t811;
t642 = -t1139 * t731 + t1142 * t1270;
t721 = -t1147 * t985 + t1152 * t733;
t1251 = t1148 * t721 + t1153 * t642;
t749 = t1146 * t830 + t1151 * t829;
t646 = -t1139 * t749 + t1142 * t1269;
t707 = -t1147 * t897 + t1152 * t750;
t1250 = t1148 * t707 + t1153 * t646;
t687 = -t1139 * t773 + t1142 * t1268;
t752 = t1147 * t939 + t1152 * t774;
t1249 = t1148 * t752 + t1153 * t687;
t799 = t1146 * t902 + t1151 * t901;
t700 = -t1139 * t799 + t1142 * t1267;
t770 = t1147 * t909 + t1152 * t800;
t1248 = t1148 * t770 + t1153 * t700;
t904 = -t1051 * t1324 + t1150 * t947;
t905 = -t1051 * t1323 - t1145 * t947;
t807 = -t1146 * t904 + t1151 * t905;
t1204 = t1147 * t807 + t1297;
t805 = t1146 * t905 + t1151 * t904;
t712 = -t1139 * t805 + t1142 * t1204;
t783 = t1152 * t807 - t1298;
t1247 = t1148 * t783 + t1153 * t712;
t906 = -t1053 * t1323 - t1145 * t1167;
t907 = t1053 * t1324 - t1150 * t1167;
t808 = -t1146 * t906 + t1151 * t907;
t1203 = t1147 * t808 - t1297;
t806 = t1146 * t907 + t1151 * t906;
t713 = -t1139 * t806 + t1142 * t1203;
t784 = t1152 * t808 + t1298;
t1246 = t1148 * t784 + t1153 * t713;
t833 = t1146 * t926 + t1151 * t925;
t719 = -t1139 * t833 + t1142 * t1266;
t777 = -t1147 * t1369 + t1152 * t834;
t1245 = t1148 * t777 + t1153 * t719;
t844 = t1146 * t931 + t1151 * t929;
t724 = -t1139 * t844 + t1142 * t1265;
t781 = -t1147 * t914 + t1152 * t846;
t1244 = t1148 * t781 + t1153 * t724;
t845 = t1146 * t932 + t1151 * t930;
t725 = -t1139 * t845 + t1142 * t1264;
t782 = -t1147 * t910 + t1152 * t847;
t1243 = t1148 * t782 + t1153 * t725;
t963 = (t1051 * t1145 + t1053 * t1150) * t1116;
t964 = (t1051 * t1150 - t1053 * t1145) * t1116;
t890 = -t1146 * t963 + t1151 * t964;
t1222 = t1095 * t1152 + t1147 * t890;
t889 = t1146 * t964 + t1151 * t963;
t787 = -t1139 * t889 + t1142 * t1222;
t880 = -t1095 * t1147 + t1152 * t890;
t1242 = t1148 * t880 + t1153 * t787;
t1029 = t1091 + t1358;
t937 = -t1000 * t1151 - t1005 * t1146;
t1225 = t1029 * t1152 + t1147 * t937;
t935 = -t1000 * t1146 + t1005 * t1151;
t823 = -t1139 * t935 + t1142 * t1225;
t892 = -t1029 * t1147 + t1152 * t937;
t1241 = t1148 * t892 + t1153 * t823;
t1057 = -t1091 + t1358;
t1001 = (-qJD(4) + t1125) * t1093 - t1288;
t936 = t1001 * t1151 - t1003 * t1146;
t1223 = t1057 * t1152 + t1147 * t936;
t934 = t1001 * t1146 + t1003 * t1151;
t832 = -t1139 * t934 + t1142 * t1223;
t908 = -t1057 * t1147 + t1152 * t936;
t1240 = t1148 * t908 + t1153 * t832;
t860 = t1014 * t1139 + t1142 * t1263;
t1239 = t1148 * t885 + t1153 * t860;
t1045 = -t1120 - t1358;
t966 = t1045 * t1151 - t1363;
t1230 = t1001 * t1152 + t1147 * t966;
t965 = t1045 * t1146 + t1361;
t862 = -t1139 * t965 + t1142 * t1230;
t919 = -t1001 * t1147 + t1152 * t966;
t1238 = t1148 * t919 + t1153 * t862;
t1058 = -t1091 - t1120;
t977 = -t1058 * t1146 + t1334;
t1229 = -t1003 * t1152 + t1147 * t977;
t976 = t1058 * t1151 + t1335;
t869 = -t1139 * t976 + t1142 * t1229;
t923 = t1003 * t1147 + t1152 * t977;
t1237 = t1148 * t923 + t1153 * t869;
t1072 = -t1091 + t1120;
t983 = -t1072 * t1146 + t1361;
t1228 = t1005 * t1152 + t1147 * t983;
t981 = t1072 * t1151 + t1363;
t873 = -t1139 * t981 + t1142 * t1228;
t927 = -t1005 * t1147 + t1152 * t983;
t1236 = t1148 * t927 + t1153 * t873;
t1071 = -t1120 + t1358;
t984 = t1071 * t1151 + t1335;
t1231 = t1000 * t1152 + t1147 * t984;
t982 = t1071 * t1146 - t1334;
t874 = -t1139 * t982 + t1142 * t1231;
t928 = -t1000 * t1147 + t1152 * t984;
t1235 = t1148 * t928 + t1153 * t874;
t994 = -t1039 * t1146 + t1092 * t1321;
t1202 = t1147 * t994 - t1295;
t993 = t1039 * t1151 + t1092 * t1322;
t895 = -t1139 * t993 + t1142 * t1202;
t954 = t1152 * t994 + t1296;
t1234 = t1148 * t954 + t1153 * t895;
t996 = t1040 * t1151 + t1093 * t1322;
t1201 = t1147 * t996 + t1295;
t995 = t1040 * t1146 - t1093 * t1321;
t896 = -t1139 * t995 + t1142 * t1201;
t955 = t1152 * t996 - t1296;
t1233 = t1148 * t955 + t1153 * t896;
t1019 = (-t1092 * t1146 + t1093 * t1151) * t1125;
t943 = -t1139 * t1019 + t1142 * t1359;
t992 = t1152 * t1020 - t1147 * t1205;
t1232 = t1148 * t992 + t1153 * t943;
t1075 = -t1111 + t1099;
t1076 = t1100 + t1110;
t1016 = t1075 * t1147 + t1076 * t1152;
t1109 = t1308 * t1319;
t1214 = -t1075 * t1152 + t1076 * t1147;
t990 = t1109 * t1139 + t1142 * t1214;
t1227 = t1016 * t1148 + t1153 * t990;
t1017 = -t1074 * t1147 + t1077 * t1152;
t1108 = (t1136 - t1137) * t1319;
t1215 = t1074 * t1152 + t1077 * t1147;
t991 = -t1108 * t1139 + t1142 * t1215;
t1226 = t1017 * t1148 + t1153 * t991;
t1073 = (t1305 + (qJD(3) + t1131) * t1336) * t1139;
t1213 = t1088 * t1152 - t1328;
t999 = -t1073 * t1139 + t1142 * t1213;
t1224 = t1054 * t1148 + t1153 * t999;
t1221 = qJD(2) * t1131 - t1142 * t1154;
t1101 = -t1294 + t1356;
t1211 = t1101 * t1152 + t1326;
t1011 = -t1075 * t1139 + t1142 * t1211;
t1059 = -t1101 * t1147 + t1325;
t1220 = t1011 * t1153 + t1059 * t1148;
t1102 = t1293 - t1356;
t1212 = t1102 * t1147 + t1327;
t1012 = -t1076 * t1139 + t1142 * t1212;
t1060 = t1102 * t1152 - t1328;
t1219 = t1012 * t1153 + t1060 * t1148;
t1210 = t1103 * t1147 + t1325;
t1013 = t1077 * t1139 + t1142 * t1210;
t1218 = t1013 * t1153 + t1061 * t1148;
t1134 = t1139 * t1135;
t1041 = (-t1134 * t1147 * t1154 + t1373) * t1152;
t1064 = -t1100 * t1147 - t1137 * t1303;
t1217 = t1041 * t1153 + t1064 * t1148;
t1044 = (t1074 * t1142 + t1134 * t1313) * t1147;
t1065 = t1099 * t1152 - t1136 * t1303;
t1216 = t1044 * t1153 + t1065 * t1148;
t1006 = t1153 * t1062 - t1148 * t1063;
t1208 = qJDD(2) * t1148 + t1153 * t1154;
t1106 = t1208 * t1143;
t1121 = qJDD(2) * t1153 - t1148 * t1154;
t1209 = t1106 * t1141 + t1121 * t1138;
t1069 = t1106 * t1138 - t1121 * t1141;
t508 = pkin(11) * t574 + (-pkin(12) * t1145 + t1304) * t599;
t515 = -pkin(11) * t573 + (-pkin(12) * t1150 + t1353) * t599;
t476 = -pkin(10) * t528 - t1146 * t508 + t1151 * t515;
t500 = -pkin(3) * t528 - pkin(4) * t573 + pkin(5) * t705 - pkin(12) * t600;
t1181 = pkin(9) * t513 + t1147 * t476 + t1152 * t500;
t475 = -pkin(3) * t599 + pkin(10) * t529 + t1146 * t515 + t1151 * t508;
t492 = t1139 * t1281 + t1142 * t528;
t459 = -pkin(2) * t492 - t1139 * t475 + t1142 * t1181;
t463 = -t1147 * t500 + t1152 * t476 + (-t1139 * t492 - t1142 * t493) * pkin(9);
t478 = -t1148 * t493 + t1153 * t513;
t1197 = pkin(8) * t478 + t1148 * t463 + t1153 * t459;
t582 = -pkin(12) * t763 - t599;
t543 = pkin(11) * t729 + t1145 * t582 + t1304 * t763;
t552 = -pkin(11) * t728 + t1150 * t582 + t1353 * t763;
t512 = -pkin(10) * t643 - t1146 * t543 + t1151 * t552;
t539 = -pkin(3) * t643 - pkin(4) * t728 - pkin(5) * t924 - pkin(12) * t765 - t600;
t1180 = pkin(9) * t616 + t1147 * t512 + t1152 * t539;
t511 = -pkin(3) * t763 + pkin(10) * t644 + t1146 * t552 + t1151 * t543;
t578 = t1139 * t1279 + t1142 * t643;
t474 = -pkin(2) * t578 - t1139 * t511 + t1142 * t1180;
t485 = -t1147 * t539 + t1152 * t512 + (-t1139 * t578 - t1142 * t579) * pkin(9);
t540 = -t1148 * t579 + t1153 * t616;
t1196 = pkin(8) * t540 + t1148 * t485 + t1153 * t474;
t629 = -pkin(5) * t797 + t650;
t681 = -pkin(12) * t797 + t1349;
t563 = -pkin(4) * t797 + pkin(11) * t743 + t1145 * t681 + t1150 * t629;
t575 = -pkin(11) * t742 - t1145 * t629 + t1150 * t681;
t519 = -pkin(10) * t660 - t1146 * t563 + t1151 * t575;
t580 = -pkin(3) * t660 - pkin(4) * t742 - pkin(5) * t850 - pkin(12) * t798 + t1343;
t1179 = pkin(9) * t633 + t1147 * t519 + t1152 * t580;
t514 = -pkin(3) * t797 + pkin(10) * t661 + t1146 * t575 + t1151 * t563;
t590 = t1139 * t1277 + t1142 * t660;
t480 = -pkin(2) * t590 - t1139 * t514 + t1142 * t1179;
t490 = -t1147 * t580 + t1152 * t519 + (-t1139 * t590 - t1142 * t591) * pkin(9);
t551 = -t1148 * t591 + t1153 * t633;
t1195 = pkin(8) * t551 + t1148 * t490 + t1153 * t480;
t630 = -pkin(5) * t801 + t651;
t682 = -pkin(12) * t801 + t1343;
t564 = -pkin(4) * t801 + pkin(11) * t745 + t1145 * t682 + t1150 * t630;
t576 = -pkin(11) * t744 - t1145 * t630 + t1150 * t682;
t520 = -pkin(10) * t662 - t1146 * t564 + t1151 * t576;
t581 = -pkin(3) * t662 - pkin(4) * t744 + pkin(5) * t851 - pkin(12) * t802 - t1349;
t1178 = pkin(9) * t634 + t1147 * t520 + t1152 * t581;
t516 = -pkin(3) * t801 + pkin(10) * t663 + t1146 * t576 + t1151 * t564;
t595 = t1139 * t1276 + t1142 * t662;
t482 = -pkin(2) * t595 - t1139 * t516 + t1142 * t1178;
t491 = -t1147 * t581 + t1152 * t520 + (-t1139 * t595 - t1142 * t596) * pkin(9);
t553 = -t1148 * t596 + t1153 * t634;
t1194 = pkin(8) * t553 + t1148 * t491 + t1153 * t482;
t635 = -pkin(4) * t870 + pkin(11) * t653;
t538 = -pkin(10) * t605 - pkin(11) * t1339 - t1146 * t635;
t562 = -pkin(3) * t605 - pkin(4) * t652;
t1177 = pkin(9) * t592 + t1147 * t538 + t1152 * t562;
t535 = -pkin(3) * t870 + pkin(10) * t606 - pkin(11) * t1345 + t1151 * t635;
t536 = t1139 * t1280 + t1142 * t605;
t484 = -pkin(2) * t536 - t1139 * t535 + t1142 * t1177;
t488 = -t1147 * t562 + t1152 * t538 + (-t1139 * t536 - t1142 * t537) * pkin(9);
t521 = -t1148 * t537 + t1153 * t592;
t1193 = pkin(8) * t521 + t1148 * t488 + t1153 * t484;
t628 = -pkin(4) * t951 + pkin(11) * t812 + t653;
t632 = -pkin(11) * t810 - t652;
t561 = -pkin(10) * t730 - t1146 * t628 + t1151 * t632;
t695 = -pkin(3) * t730 - pkin(4) * t810;
t1176 = pkin(9) * t708 + t1147 * t561 + t1152 * t695;
t557 = -pkin(3) * t951 + pkin(10) * t732 + t1146 * t632 + t1151 * t628;
t639 = t1139 * t1271 + t1142 * t730;
t510 = -pkin(2) * t639 - t1139 * t557 + t1142 * t1176;
t523 = -t1147 * t695 + t1152 * t561 + (-t1139 * t639 - t1142 * t640) * pkin(9);
t611 = -t1148 * t640 + t1153 * t708;
t1192 = pkin(8) * t611 + t1148 * t523 + t1153 * t510;
t760 = -pkin(4) * t909 + pkin(11) * t902 - t1341;
t788 = -pkin(11) * t901 + t1347;
t659 = -pkin(10) * t799 - t1146 * t760 + t1151 * t788;
t670 = -pkin(3) * t799 - pkin(4) * t901 + t735;
t1175 = pkin(9) * t770 + t1147 * t659 + t1152 * t670;
t638 = -pkin(3) * t909 + pkin(10) * t800 + t1146 * t788 + t1151 * t760;
t699 = t1139 * t1267 + t1142 * t799;
t542 = -pkin(2) * t699 - t1139 * t638 + t1142 * t1175;
t558 = -t1147 * t670 + t1152 * t659 + (-t1139 * t699 - t1142 * t700) * pkin(9);
t647 = -t1148 * t700 + t1153 * t770;
t1191 = pkin(8) * t647 + t1148 * t558 + t1153 * t542;
t768 = pkin(4) * t1369 + pkin(11) * t926 + t1347;
t794 = -pkin(11) * t925 + t1341;
t667 = -pkin(10) * t833 - t1146 * t768 + t1151 * t794;
t683 = -pkin(3) * t833 - pkin(4) * t925 + t736;
t1174 = pkin(9) * t777 + t1147 * t667 + t1152 * t683;
t649 = pkin(3) * t1369 + pkin(10) * t834 + t1146 * t794 + t1151 * t768;
t718 = t1139 * t1266 + t1142 * t833;
t547 = -pkin(2) * t718 - t1139 * t649 + t1142 * t1174;
t565 = -t1147 * t683 + t1152 * t667 + (-t1139 * t718 - t1142 * t719) * pkin(9);
t666 = -t1148 * t719 + t1153 * t777;
t1190 = pkin(8) * t666 + t1148 * t565 + t1153 * t547;
t1166 = pkin(9) * t752 + t1287 * t773;
t686 = t1139 * t1268 + t1142 * t773;
t753 = -pkin(3) * t939 + pkin(10) * t774;
t584 = -pkin(2) * t686 - t1139 * t753 + t1142 * t1166;
t589 = (-pkin(10) * t1152 + t1355) * t773 + (-t1139 * t686 - t1142 * t687) * pkin(9);
t631 = -t1148 * t687 + t1153 * t752;
t1189 = pkin(8) * t631 + t1148 * t589 + t1153 * t584;
t751 = -pkin(10) * t935 - t773;
t1168 = pkin(9) * t892 + t1147 * t751 - t1354 * t935;
t741 = pkin(3) * t1029 + pkin(10) * t937 + t774;
t822 = t1139 * t1225 + t1142 * t935;
t622 = -pkin(2) * t822 - t1139 * t741 + t1142 * t1168;
t648 = t935 * t1355 + t1152 * t751 + (-t1139 * t822 - t1142 * t823) * pkin(9);
t771 = -t1148 * t823 + t1153 * t892;
t1188 = pkin(8) * t771 + t1148 * t648 + t1153 * t622;
t818 = t1146 * t1158 - t1151 * t1160 + (t1077 * t1151 - t1146 * t1356 - t965) * pkin(3);
t878 = -pkin(10) * t965 + t1344;
t1173 = pkin(9) * t919 + t1147 * t878 + t1152 * t818;
t843 = pkin(3) * t1001 + pkin(10) * t966 - t1338;
t861 = t1139 * t1230 + t1142 * t965;
t665 = -pkin(2) * t861 - t1139 * t843 + t1142 * t1173;
t691 = -t1147 * t818 + t1152 * t878 + (-t1139 * t861 - t1142 * t862) * pkin(9);
t785 = -t1148 * t862 + t1153 * t919;
t1187 = pkin(8) * t785 + t1148 * t691 + t1153 * t665;
t824 = -pkin(3) * t976 + t867;
t879 = -pkin(10) * t976 + t1338;
t1172 = pkin(9) * t923 + t1147 * t879 + t1152 * t824;
t854 = -pkin(3) * t1003 + pkin(10) * t977 + t1344;
t868 = t1139 * t1229 + t1142 * t976;
t672 = -pkin(2) * t868 - t1139 * t854 + t1142 * t1172;
t697 = -t1147 * t824 + t1152 * t879 + (-t1139 * t868 - t1142 * t869) * pkin(9);
t789 = -t1148 * t869 + t1153 * t923;
t1186 = pkin(8) * t789 + t1148 * t697 + t1153 * t672;
t859 = -t1014 * t1142 + t1139 * t1263;
t769 = (-t1139 * t859 - t1142 * t860) * pkin(9);
t778 = -t1148 * t860 + t1153 * t885;
t779 = pkin(9) * t1142 * t885 - pkin(2) * t859;
t1185 = pkin(8) * t778 + t1148 * t769 + t1153 * t779;
t988 = -t1109 * t1142 + t1139 * t1214;
t809 = (-t1139 * t988 - t1142 * t990) * pkin(9) - t1263;
t1171 = pkin(9) * t1016 + t885;
t821 = -pkin(2) * t988 + t1142 * t1171;
t940 = t1016 * t1153 - t1148 * t990;
t1184 = pkin(8) * t940 + t1148 * t809 + t1153 * t821;
t998 = t1073 * t1142 + t1139 * t1213;
t856 = -pkin(2) * t998 + t1139 * t959 + t1142 * t1285;
t886 = -t1315 + (-t1139 * t998 - t1142 * t999) * pkin(9);
t953 = t1054 * t1153 - t1148 * t999;
t1183 = pkin(8) * t953 + t1148 * t886 + t1153 * t856;
t1010 = t1139 * t1210 - t1373;
t864 = -pkin(2) * t1010 + t1139 * t958 + t1142 * t1284;
t891 = -t1317 + (-t1010 * t1139 - t1013 * t1142) * pkin(9);
t962 = -t1013 * t1148 + t1061 * t1153;
t1182 = pkin(8) * t962 + t1148 * t891 + t1153 * t864;
t1107 = t1121 * t1143;
t1105 = t1121 * t1140;
t1104 = t1208 * t1140;
t1070 = -t1107 * t1138 - t1141 * t1208;
t1068 = t1107 * t1141 - t1138 * t1208;
t1056 = t1130 * t1139 * t1148 + t1079 * t1153;
t1043 = (t1135 * t1152 * t1221 + t1099 * t1139) * t1147;
t1042 = (t1100 * t1139 - t1221 * t1320) * t1152;
t1028 = -t1198 + (t1104 * t1140 + t1106 * t1143) * pkin(8);
t1027 = -t1199 + (-t1105 * t1140 - t1107 * t1143) * pkin(8);
t1026 = t1143 * t1330 + (-t1140 * t1142 - t1143 * t1318) * t1130;
t1009 = t1076 * t1142 + t1139 * t1212;
t1008 = t1075 * t1142 + t1139 * t1211;
t997 = t1007 * t1143;
t989 = t1108 * t1142 + t1139 * t1215;
t987 = -t1044 * t1148 + t1065 * t1153;
t986 = -t1041 * t1148 + t1064 * t1153;
t980 = -pkin(1) * t1105 + t1140 * t1062 + t1143 * t1198 - t1208 * t1352;
t979 = pkin(1) * t1104 + t1140 * t1063 - t1121 * t1352 - t1143 * t1199;
t974 = t1140 * t1113 + (t1291 - t1006) * t1143;
t973 = -t1006 * t1140 - t1143 * t1282;
t961 = -t1012 * t1148 + t1060 * t1153;
t960 = -t1011 * t1148 + t1059 * t1153;
t950 = -t1043 * t1140 + t1143 * t1216;
t949 = -t1042 * t1140 + t1143 * t1217;
t942 = t1142 * t1019 + t1139 * t1359;
t941 = t1017 * t1153 - t1148 * t991;
t922 = -pkin(1) * t973 + t1007 * t1352;
t921 = t1007 * t1141 - t1138 * t974;
t920 = t1007 * t1138 + t1141 * t974;
t918 = -t1140 * t1010 + t1143 * t1218;
t917 = -t1140 * t1009 + t1143 * t1219;
t916 = -t1140 * t1008 + t1143 * t1220;
t915 = t1010 * t1143 + t1140 * t1218;
t903 = (-t1140 * t973 - t1143 * t974) * pkin(8);
t900 = -t1140 * t998 + t1143 * t1224;
t899 = t1140 * t1224 + t1143 * t998;
t894 = t1139 * t1201 + t1142 * t995;
t893 = t1139 * t1202 + t1142 * t993;
t884 = -t1148 * t943 + t1153 * t992;
t883 = -t1140 * t989 + t1143 * t1226;
t882 = -t1140 * t988 + t1143 * t1227;
t881 = t1140 * t1227 + t1143 * t988;
t872 = t1139 * t1231 + t1142 * t982;
t871 = t1139 * t1228 + t1142 * t981;
t863 = pkin(2) * t1013 + t1139 * t1284 - t1142 * t958;
t858 = -t1138 * t918 + t1141 * t962;
t857 = t1138 * t962 + t1141 * t918;
t855 = pkin(2) * t999 + t1139 * t1285 - t1142 * t959;
t838 = -t1138 * t900 + t1141 * t953;
t837 = t1138 * t953 + t1141 * t900;
t836 = -t1148 * t896 + t1153 * t955;
t835 = -t1148 * t895 + t1153 * t954;
t831 = t1139 * t1223 + t1142 * t934;
t820 = pkin(2) * t990 + t1139 * t1171;
t816 = -t1140 * t942 + t1143 * t1232;
t815 = -t1138 * t882 + t1141 * t940;
t814 = t1138 * t940 + t1141 * t882;
t796 = -t1148 * t874 + t1153 * t928;
t795 = -t1148 * t873 + t1153 * t927;
t786 = t1139 * t1222 + t1142 * t889;
t780 = pkin(2) * t860 + t1351 * t885;
t776 = -t1140 * t894 + t1143 * t1233;
t775 = -t1140 * t893 + t1143 * t1234;
t772 = -t1148 * t832 + t1153 * t908;
t759 = -t1140 * t872 + t1143 * t1235;
t758 = -t1140 * t871 + t1143 * t1236;
t748 = -t1148 * t787 + t1153 * t880;
t747 = -t1140 * t868 + t1143 * t1237;
t746 = t1140 * t1237 + t1143 * t868;
t738 = -t1140 * t861 + t1143 * t1238;
t737 = t1140 * t1238 + t1143 * t861;
t727 = -t1140 * t859 + t1143 * t1239;
t726 = t1140 * t1239 + t1143 * t859;
t723 = t1139 * t1264 + t1142 * t845;
t722 = t1139 * t1265 + t1142 * t844;
t720 = -t1148 * t864 + t1153 * t891 + (-t1140 * t915 - t1143 * t918) * pkin(8);
t711 = t1139 * t1203 + t1142 * t806;
t710 = t1139 * t1204 + t1142 * t805;
t709 = -t1140 * t831 + t1143 * t1240;
t703 = -t1148 * t856 + t1153 * t886 + (-t1140 * t899 - t1143 * t900) * pkin(8);
t702 = -t1140 * t822 + t1143 * t1241;
t701 = t1140 * t1241 + t1143 * t822;
t698 = -pkin(1) * t915 - t1140 * t863 + t1143 * t1182;
t696 = -pkin(1) * t899 - t1140 * t855 + t1143 * t1183;
t694 = -t1138 * t747 + t1141 * t789;
t693 = t1138 * t789 + t1141 * t747;
t692 = -t1140 * t786 + t1143 * t1242;
t688 = -t1148 * t821 + t1153 * t809 + (-t1140 * t881 - t1143 * t882) * pkin(8);
t685 = -t1138 * t738 + t1141 * t785;
t684 = t1138 * t785 + t1141 * t738;
t680 = -t1138 * t727 + t1141 * t778;
t679 = t1138 * t778 + t1141 * t727;
t678 = -t1148 * t725 + t1153 * t782;
t677 = -t1148 * t724 + t1153 * t781;
t671 = pkin(2) * t869 + t1139 * t1172 + t1142 * t854;
t669 = -t1148 * t713 + t1153 * t784;
t668 = -t1148 * t712 + t1153 * t783;
t664 = pkin(2) * t862 + t1139 * t1173 + t1142 * t843;
t658 = -pkin(1) * t881 - t1140 * t820 + t1143 * t1184;
t655 = -t1138 * t702 + t1141 * t771;
t654 = t1138 * t771 + t1141 * t702;
t645 = t1139 * t1269 + t1142 * t749;
t641 = t1139 * t1270 + t1142 * t731;
t625 = t1139 * t1272 + t1142 * t715;
t624 = t1139 * t1273 + t1142 * t714;
t621 = pkin(2) * t823 + t1139 * t1168 + t1142 * t741;
t620 = -t1140 * t723 + t1143 * t1243;
t619 = -t1140 * t722 + t1143 * t1244;
t618 = -t1140 * t711 + t1143 * t1246;
t617 = -t1140 * t710 + t1143 * t1247;
t615 = -t1140 * t718 + t1143 * t1245;
t614 = t1140 * t1245 + t1143 * t718;
t613 = -t1148 * t642 + t1153 * t721;
t612 = -t1148 * t646 + t1153 * t707;
t610 = -t1140 * t699 + t1143 * t1248;
t609 = t1140 * t1248 + t1143 * t699;
t608 = -t1148 * t779 + t1153 * t769 + (-t1140 * t726 - t1143 * t727) * pkin(8);
t607 = -pkin(1) * t726 - t1140 * t780 + t1143 * t1185;
t602 = t1139 * t1274 + t1142 * t674;
t601 = t1139 * t1275 + t1142 * t673;
t598 = -t1140 * t686 + t1143 * t1249;
t597 = t1140 * t1249 + t1143 * t686;
t594 = -t1148 * t627 + t1153 * t690;
t593 = -t1148 * t626 + t1153 * t689;
t587 = t1139 * t1278 + t1142 * t656;
t586 = -t1138 * t615 + t1141 * t666;
t585 = t1138 * t666 + t1141 * t615;
t583 = pkin(2) * t687 + t1139 * t1166 + t1142 * t753;
t577 = -t1148 * t672 + t1153 * t697 + (-t1140 * t746 - t1143 * t747) * pkin(8);
t572 = -t1140 * t645 + t1143 * t1250;
t571 = -t1140 * t641 + t1143 * t1251;
t570 = -t1148 * t665 + t1153 * t691 + (-t1140 * t737 - t1143 * t738) * pkin(8);
t569 = -t1138 * t610 + t1141 * t647;
t568 = t1138 * t647 + t1141 * t610;
t567 = -t1140 * t639 + t1143 * t1252;
t566 = t1140 * t1252 + t1143 * t639;
t560 = -t1148 * t604 + t1153 * t637;
t559 = -t1148 * t603 + t1153 * t636;
t556 = -pkin(1) * t746 - t1140 * t671 + t1143 * t1186;
t555 = -t1138 * t598 + t1141 * t631;
t554 = t1138 * t631 + t1141 * t598;
t550 = -pkin(1) * t737 - t1140 * t664 + t1143 * t1187;
t549 = -t1140 * t625 + t1143 * t1253;
t548 = -t1140 * t624 + t1143 * t1254;
t546 = pkin(2) * t719 + t1139 * t1174 + t1142 * t649;
t545 = -t1148 * t622 + t1153 * t648 + (-t1140 * t701 - t1143 * t702) * pkin(8);
t544 = -t1148 * t588 + t1153 * t623;
t541 = pkin(2) * t700 + t1139 * t1175 + t1142 * t638;
t534 = -t1138 * t567 + t1141 * t611;
t533 = t1138 * t611 + t1141 * t567;
t532 = -pkin(1) * t701 - t1140 * t621 + t1143 * t1188;
t531 = -t1140 * t602 + t1143 * t1255;
t530 = -t1140 * t601 + t1143 * t1256;
t527 = -t1140 * t595 + t1143 * t1257;
t526 = t1140 * t1257 + t1143 * t595;
t525 = -t1140 * t590 + t1143 * t1258;
t524 = t1140 * t1258 + t1143 * t590;
t522 = -t1140 * t587 + t1143 * t1259;
t518 = -t1140 * t578 + t1143 * t1260;
t517 = t1140 * t1260 + t1143 * t578;
t509 = pkin(2) * t640 + t1139 * t1176 + t1142 * t557;
t507 = -t1138 * t527 + t1141 * t553;
t506 = t1138 * t553 + t1141 * t527;
t505 = -t1148 * t584 + t1153 * t589 + (-t1140 * t597 - t1143 * t598) * pkin(8);
t504 = -t1138 * t525 + t1141 * t551;
t503 = t1138 * t551 + t1141 * t525;
t502 = -t1148 * t547 + t1153 * t565 + (-t1140 * t614 - t1143 * t615) * pkin(8);
t501 = -pkin(1) * t597 - t1140 * t583 + t1143 * t1189;
t499 = -t1140 * t536 + t1143 * t1261;
t498 = t1140 * t1261 + t1143 * t536;
t497 = -t1148 * t542 + t1153 * t558 + (-t1140 * t609 - t1143 * t610) * pkin(8);
t496 = -t1138 * t518 + t1141 * t540;
t495 = t1138 * t540 + t1141 * t518;
t494 = -pkin(1) * t614 - t1140 * t546 + t1143 * t1190;
t489 = -pkin(1) * t609 - t1140 * t541 + t1143 * t1191;
t487 = -t1138 * t499 + t1141 * t521;
t486 = t1138 * t521 + t1141 * t499;
t483 = pkin(2) * t537 + t1139 * t1177 + t1142 * t535;
t481 = pkin(2) * t596 + t1139 * t1178 + t1142 * t516;
t479 = pkin(2) * t591 + t1139 * t1179 + t1142 * t514;
t477 = -t1148 * t510 + t1153 * t523 + (-t1140 * t566 - t1143 * t567) * pkin(8);
t473 = pkin(2) * t579 + t1139 * t1180 + t1142 * t511;
t472 = -pkin(1) * t566 - t1140 * t509 + t1143 * t1192;
t471 = -t1140 * t492 + t1143 * t1262;
t470 = t1140 * t1262 + t1143 * t492;
t469 = -t1148 * t482 + t1153 * t491 + (-t1140 * t526 - t1143 * t527) * pkin(8);
t468 = -t1148 * t480 + t1153 * t490 + (-t1140 * t524 - t1143 * t525) * pkin(8);
t467 = -t1138 * t471 + t1141 * t478;
t466 = t1138 * t478 + t1141 * t471;
t465 = -t1148 * t484 + t1153 * t488 + (-t1140 * t498 - t1143 * t499) * pkin(8);
t464 = -t1148 * t474 + t1153 * t485 + (-t1140 * t517 - t1143 * t518) * pkin(8);
t462 = -pkin(1) * t526 - t1140 * t481 + t1143 * t1194;
t461 = -pkin(1) * t524 - t1140 * t479 + t1143 * t1195;
t460 = -pkin(1) * t498 - t1140 * t483 + t1143 * t1193;
t458 = pkin(2) * t493 + t1139 * t1181 + t1142 * t475;
t457 = -pkin(1) * t517 - t1140 * t473 + t1143 * t1196;
t456 = -t1148 * t459 + t1153 * t463 + (-t1140 * t470 - t1143 * t471) * pkin(8);
t455 = -pkin(1) * t470 - t1140 * t458 + t1143 * t1197;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, 0, 0, 0, 0, 0, 0, t1070, t1069, 0, t921, 0, 0, 0, 0, 0, 0, t858, t838, t815, t680, 0, 0, 0, 0, 0, 0, t685, t694, t655, t555, 0, 0, 0, 0, 0, 0, t569, t586, t534, t487, 0, 0, 0, 0, 0, 0, t504, t507, t496, t467; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1283, 0, 0, 0, 0, 0, 0, t1068, -t1209, 0, t920, 0, 0, 0, 0, 0, 0, t857, t837, t814, t679, 0, 0, 0, 0, 0, 0, t684, t693, t654, t554, 0, 0, 0, 0, 0, 0, t568, t585, t533, t486, 0, 0, 0, 0, 0, 0, t503, t506, t495, t466; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1350, 0, 0, 0, 0, 0, 0, t1105, -t1104, 0, t973, 0, 0, 0, 0, 0, 0, t915, t899, t881, t726, 0, 0, 0, 0, 0, 0, t737, t746, t701, t597, 0, 0, 0, 0, 0, 0, t609, t614, t566, t498, 0, 0, 0, 0, 0, 0, t524, t526, t517, t470; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1366, -t1365, t1283, qJ(1) * t1283, 0, 0, -t1069, 0, t1070, t1138 * t1306, -qJ(1) * t1068 + t1027 * t1141 - t1138 * t980, qJ(1) * t1209 + t1028 * t1141 - t1138 * t979, t1006 * t1141 - t1138 * t997, -qJ(1) * t920 - t1138 * t922 + t1141 * t903, -t1138 * t950 + t1141 * t987, -t1138 * t883 + t1141 * t941, -t1138 * t916 + t1141 * t960, -t1138 * t949 + t1141 * t986, -t1138 * t917 + t1141 * t961, -t1026 * t1138 + t1056 * t1141, -qJ(1) * t857 - t1138 * t698 + t1141 * t720, -qJ(1) * t837 - t1138 * t696 + t1141 * t703, -qJ(1) * t814 - t1138 * t658 + t1141 * t688, -qJ(1) * t679 - t1138 * t607 + t1141 * t608, -t1138 * t776 + t1141 * t836, -t1138 * t709 + t1141 * t772, -t1138 * t758 + t1141 * t795, -t1138 * t775 + t1141 * t835, -t1138 * t759 + t1141 * t796, -t1138 * t816 + t1141 * t884, -qJ(1) * t684 - t1138 * t550 + t1141 * t570, -qJ(1) * t693 - t1138 * t556 + t1141 * t577, -qJ(1) * t654 - t1138 * t532 + t1141 * t545, -qJ(1) * t554 - t1138 * t501 + t1141 * t505, -t1138 * t618 + t1141 * t669, -t1138 * t571 + t1141 * t613, -t1138 * t619 + t1141 * t677, -t1138 * t617 + t1141 * t668, -t1138 * t620 + t1141 * t678, -t1138 * t692 + t1141 * t748, -qJ(1) * t568 - t1138 * t489 + t1141 * t497, -qJ(1) * t585 - t1138 * t494 + t1141 * t502, -qJ(1) * t533 - t1138 * t472 + t1141 * t477, -qJ(1) * t486 - t1138 * t460 + t1141 * t465, -t1138 * t549 + t1141 * t594, -t1138 * t522 + t1141 * t544, -t1138 * t530 + t1141 * t559, -t1138 * t548 + t1141 * t593, -t1138 * t531 + t1141 * t560, -t1138 * t572 + t1141 * t612, -qJ(1) * t503 - t1138 * t461 + t1141 * t468, -qJ(1) * t506 - t1138 * t462 + t1141 * t469, -qJ(1) * t495 - t1138 * t457 + t1141 * t464, -qJ(1) * t466 - t1138 * t455 + t1141 * t456; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1365, -t1366, t1081, qJ(1) * t1081, 0, 0, t1209, 0, t1068, -t1141 * t1306, qJ(1) * t1070 + t1027 * t1138 + t1141 * t980, qJ(1) * t1069 + t1028 * t1138 + t1141 * t979, t1006 * t1138 + t1141 * t997, qJ(1) * t921 + t1138 * t903 + t1141 * t922, t1138 * t987 + t1141 * t950, t1138 * t941 + t1141 * t883, t1138 * t960 + t1141 * t916, t1138 * t986 + t1141 * t949, t1138 * t961 + t1141 * t917, t1026 * t1141 + t1056 * t1138, qJ(1) * t858 + t1138 * t720 + t1141 * t698, qJ(1) * t838 + t1138 * t703 + t1141 * t696, qJ(1) * t815 + t1138 * t688 + t1141 * t658, qJ(1) * t680 + t1138 * t608 + t1141 * t607, t1138 * t836 + t1141 * t776, t1138 * t772 + t1141 * t709, t1138 * t795 + t1141 * t758, t1138 * t835 + t1141 * t775, t1138 * t796 + t1141 * t759, t1138 * t884 + t1141 * t816, qJ(1) * t685 + t1138 * t570 + t1141 * t550, qJ(1) * t694 + t1138 * t577 + t1141 * t556, qJ(1) * t655 + t1138 * t545 + t1141 * t532, qJ(1) * t555 + t1138 * t505 + t1141 * t501, t1138 * t669 + t1141 * t618, t1138 * t613 + t1141 * t571, t1138 * t677 + t1141 * t619, t1138 * t668 + t1141 * t617, t1138 * t678 + t1141 * t620, t1138 * t748 + t1141 * t692, qJ(1) * t569 + t1138 * t497 + t1141 * t489, qJ(1) * t586 + t1138 * t502 + t1141 * t494, qJ(1) * t534 + t1138 * t477 + t1141 * t472, qJ(1) * t487 + t1138 * t465 + t1141 * t460, t1138 * t594 + t1141 * t549, t1138 * t544 + t1141 * t522, t1138 * t559 + t1141 * t530, t1138 * t593 + t1141 * t548, t1138 * t560 + t1141 * t531, t1138 * t612 + t1141 * t572, qJ(1) * t504 + t1138 * t468 + t1141 * t461, qJ(1) * t507 + t1138 * t469 + t1141 * t462, qJ(1) * t496 + t1138 * t464 + t1141 * t457, qJ(1) * t467 + t1138 * t456 + t1141 * t455; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1292, t1286, 0, 0, 0, 0, t1104, 0, t1105, t1143 * qJDD(2), pkin(1) * t1107 - t1143 * t1062 + (-pkin(8) * t1208 + t1198) * t1140, -pkin(1) * t1106 - t1143 * t1063 + (-pkin(8) * t1121 - t1199) * t1140, t1367, pkin(1) * t974 + pkin(8) * t1367, t1043 * t1143 + t1140 * t1216, t1140 * t1226 + t1143 * t989, t1143 * t1008 + t1140 * t1220, t1042 * t1143 + t1140 * t1217, t1143 * t1009 + t1140 * t1219, t1140 * t1330 + (-t1140 * t1318 + t1142 * t1143) * t1130, pkin(1) * t918 + t1140 * t1182 + t1143 * t863, pkin(1) * t900 + t1140 * t1183 + t1143 * t855, pkin(1) * t882 + t1140 * t1184 + t1143 * t820, pkin(1) * t727 + t1140 * t1185 + t1143 * t780, t1140 * t1233 + t1143 * t894, t1140 * t1240 + t1143 * t831, t1140 * t1236 + t1143 * t871, t1140 * t1234 + t1143 * t893, t1140 * t1235 + t1143 * t872, t1140 * t1232 + t1143 * t942, pkin(1) * t738 + t1140 * t1187 + t1143 * t664, pkin(1) * t747 + t1140 * t1186 + t1143 * t671, pkin(1) * t702 + t1140 * t1188 + t1143 * t621, pkin(1) * t598 + t1140 * t1189 + t1143 * t583, t1140 * t1246 + t1143 * t711, t1140 * t1251 + t1143 * t641, t1140 * t1244 + t1143 * t722, t1140 * t1247 + t1143 * t710, t1140 * t1243 + t1143 * t723, t1140 * t1242 + t1143 * t786, pkin(1) * t610 + t1140 * t1191 + t1143 * t541, pkin(1) * t615 + t1140 * t1190 + t1143 * t546, pkin(1) * t567 + t1140 * t1192 + t1143 * t509, pkin(1) * t499 + t1140 * t1193 + t1143 * t483, t1140 * t1253 + t1143 * t625, t1140 * t1259 + t1143 * t587, t1140 * t1256 + t1143 * t601, t1140 * t1254 + t1143 * t624, t1140 * t1255 + t1143 * t602, t1140 * t1250 + t1143 * t645, pkin(1) * t525 + t1140 * t1195 + t1143 * t479, pkin(1) * t527 + t1140 * t1194 + t1143 * t481, pkin(1) * t518 + t1140 * t1196 + t1143 * t473, pkin(1) * t471 + t1140 * t1197 + t1143 * t458;];
tauB_reg  = t1;
