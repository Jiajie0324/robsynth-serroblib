% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 11:33
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 11:32:53
% EndTime: 2019-05-05 11:33:05
% DurationCPUTime: 12.95s
% Computational Cost: add. (148003->369), mult. (307602->597), div. (0->0), fcn. (255168->16), ass. (0->328)
t2592 = sin(pkin(7));
t2595 = cos(pkin(7));
t2591 = sin(pkin(13));
t2594 = cos(pkin(13));
t2578 = -g(1) * t2594 - g(2) * t2591;
t2601 = sin(qJ(2));
t2606 = cos(qJ(2));
t2590 = -g(3) + qJDD(1);
t2593 = sin(pkin(6));
t2670 = t2590 * t2593;
t2577 = g(1) * t2591 - g(2) * t2594;
t2596 = cos(pkin(6));
t2672 = t2577 * t2596;
t2690 = t2670 + t2672;
t2535 = -t2601 * t2578 + t2606 * t2690;
t2607 = qJD(2) ^ 2;
t2610 = t2607 * t2592 * pkin(9) + qJDD(2) * pkin(2) + t2535;
t2616 = -t2577 * t2593 + t2590 * t2596;
t2691 = t2592 * t2616 + t2595 * t2610;
t2586 = qJD(2) * t2595 + qJD(3);
t2599 = sin(qJ(4));
t2604 = cos(qJ(4));
t2600 = sin(qJ(3));
t2677 = qJD(2) * t2592;
t2661 = t2600 * t2677;
t2551 = -t2586 * t2604 + t2599 * t2661;
t2553 = t2586 * t2599 + t2604 * t2661;
t2598 = sin(qJ(5));
t2603 = cos(qJ(5));
t2528 = t2603 * t2551 + t2553 * t2598;
t2526 = qJD(6) + t2528;
t2689 = qJD(6) + t2526;
t2530 = -t2551 * t2598 + t2553 * t2603;
t2605 = cos(qJ(3));
t2660 = t2605 * t2677;
t2575 = -qJD(4) + t2660;
t2569 = -qJD(5) + t2575;
t2597 = sin(qJ(6));
t2602 = cos(qJ(6));
t2512 = t2530 * t2597 + t2602 * t2569;
t2688 = t2512 ^ 2;
t2514 = t2530 * t2602 - t2569 * t2597;
t2687 = t2514 ^ 2;
t2686 = t2526 ^ 2;
t2685 = t2528 ^ 2;
t2684 = t2530 ^ 2;
t2683 = t2551 ^ 2;
t2682 = t2553 ^ 2;
t2681 = t2569 ^ 2;
t2680 = t2575 ^ 2;
t2679 = t2586 ^ 2;
t2676 = t2512 * t2514;
t2675 = t2528 * t2530;
t2674 = t2551 * t2553;
t2673 = t2551 * t2575;
t2671 = t2592 ^ 2 * t2607;
t2668 = qJD(4) + t2575;
t2667 = qJD(5) + t2569;
t2666 = qJD(6) - t2526;
t2536 = t2606 * t2578 + t2601 * t2690;
t2663 = qJDD(2) * t2592;
t2532 = -pkin(2) * t2607 + pkin(9) * t2663 + t2536;
t2485 = t2605 * t2532 + t2600 * t2691;
t2556 = (-pkin(3) * t2605 - pkin(10) * t2600) * t2677;
t2654 = qJDD(2) * t2595 + qJDD(3);
t2476 = -pkin(3) * t2679 + pkin(10) * t2654 + t2556 * t2660 + t2485;
t2546 = t2595 * t2616;
t2557 = qJD(3) * t2660 + t2600 * t2663;
t2664 = -qJD(3) * t2661 + t2605 * t2663;
t2482 = t2546 - t2557 * pkin(10) - t2664 * pkin(3) + ((pkin(3) * t2600 - pkin(10) * t2605) * t2586 * qJD(2) - t2610) * t2592;
t2446 = t2604 * t2476 + t2599 * t2482;
t2655 = t2599 * t2557 - t2604 * t2654;
t2521 = -qJD(4) * t2553 - t2655;
t2537 = -pkin(4) * t2575 - pkin(11) * t2553;
t2432 = -pkin(4) * t2683 + pkin(11) * t2521 + t2537 * t2575 + t2446;
t2445 = -t2599 * t2476 + t2604 * t2482;
t2659 = -qJDD(4) + t2664;
t2517 = -t2659 - t2674;
t2612 = -t2604 * t2557 - t2599 * t2654;
t2522 = -t2551 * qJD(4) - t2612;
t2608 = (-t2522 + t2673) * pkin(11) + t2517 * pkin(4) + t2445;
t2400 = t2603 * t2432 + t2598 * t2608;
t2665 = t2691 * t2605;
t2399 = -t2598 * t2432 + t2603 * t2608;
t2622 = -t2598 * t2521 - t2603 * t2522;
t2479 = -qJD(5) * t2528 - t2622;
t2658 = -t2528 * t2569 - t2479;
t2652 = -qJDD(5) + t2659;
t2657 = -t2597 * t2479 - t2602 * t2652;
t2656 = -t2603 * t2521 + t2598 * t2522;
t2653 = t2586 * t2660;
t2497 = pkin(5) * t2528 - pkin(12) * t2530;
t2389 = -pkin(5) * t2681 - pkin(12) * t2652 - t2528 * t2497 + t2400;
t2475 = -t2654 * pkin(3) - t2679 * pkin(10) + (t2556 * t2677 + t2532) * t2600 - t2665;
t2449 = -t2521 * pkin(4) - t2683 * pkin(11) + t2553 * t2537 + t2475;
t2460 = (qJD(5) - t2569) * t2530 + t2656;
t2412 = pkin(5) * t2460 + pkin(12) * t2658 + t2449;
t2373 = -t2389 * t2597 + t2412 * t2602;
t2374 = t2389 * t2602 + t2412 * t2597;
t2356 = -t2373 * t2597 + t2374 * t2602;
t2388 = pkin(5) * t2652 - pkin(12) * t2681 + t2530 * t2497 - t2399;
t2344 = t2356 * t2598 - t2388 * t2603;
t2345 = t2356 * t2603 + t2388 * t2598;
t2335 = t2344 * t2604 + t2345 * t2599;
t2336 = -t2344 * t2599 + t2345 * t2604;
t2355 = t2373 * t2602 + t2374 * t2597;
t2650 = t2336 * t2600 - t2355 * t2605;
t2324 = -t2592 * t2335 + t2595 * t2650;
t2327 = t2336 * t2605 + t2355 * t2600;
t2651 = t2324 * t2606 + t2327 * t2601;
t2375 = t2399 * t2603 + t2400 * t2598;
t2376 = -t2399 * t2598 + t2400 * t2603;
t2357 = t2375 * t2604 + t2376 * t2599;
t2358 = -t2375 * t2599 + t2376 * t2604;
t2645 = t2358 * t2600 - t2449 * t2605;
t2338 = -t2592 * t2357 + t2595 * t2645;
t2350 = t2358 * t2605 + t2449 * t2600;
t2649 = t2338 * t2606 + t2350 * t2601;
t2438 = -t2514 * t2666 + t2657;
t2611 = -t2602 * t2479 + t2597 * t2652;
t2440 = t2512 * t2666 + t2611;
t2411 = t2438 * t2602 - t2440 * t2597;
t2468 = -t2687 - t2688;
t2395 = t2411 * t2598 - t2468 * t2603;
t2396 = t2411 * t2603 + t2468 * t2598;
t2370 = t2395 * t2604 + t2396 * t2599;
t2371 = -t2395 * t2599 + t2396 * t2604;
t2410 = t2438 * t2597 + t2440 * t2602;
t2643 = t2371 * t2600 - t2410 * t2605;
t2347 = -t2592 * t2370 + t2595 * t2643;
t2364 = t2371 * t2605 + t2410 * t2600;
t2648 = t2347 * t2606 + t2364 * t2601;
t2613 = -qJD(5) * t2530 - qJDD(6) - t2656;
t2450 = -t2613 - t2676;
t2471 = -t2686 - t2688;
t2422 = -t2450 * t2597 + t2471 * t2602;
t2437 = t2514 * t2689 - t2657;
t2403 = t2422 * t2598 - t2437 * t2603;
t2404 = t2422 * t2603 + t2437 * t2598;
t2377 = t2403 * t2604 + t2404 * t2599;
t2378 = -t2403 * t2599 + t2404 * t2604;
t2421 = t2450 * t2602 + t2471 * t2597;
t2642 = t2378 * t2600 - t2421 * t2605;
t2349 = -t2592 * t2377 + t2595 * t2642;
t2366 = t2378 * t2605 + t2421 * t2600;
t2647 = t2349 * t2606 + t2366 * t2601;
t2451 = t2613 - t2676;
t2478 = -t2686 - t2687;
t2426 = t2451 * t2602 - t2478 * t2597;
t2439 = -t2512 * t2689 - t2611;
t2405 = t2426 * t2598 - t2439 * t2603;
t2406 = t2426 * t2603 + t2439 * t2598;
t2379 = t2405 * t2604 + t2406 * t2599;
t2380 = -t2405 * t2599 + t2406 * t2604;
t2425 = t2451 * t2597 + t2478 * t2602;
t2641 = t2380 * t2600 - t2425 * t2605;
t2352 = -t2592 * t2379 + t2595 * t2641;
t2367 = t2380 * t2605 + t2425 * t2600;
t2646 = t2352 * t2606 + t2367 * t2601;
t2461 = -t2530 * t2667 - t2656;
t2463 = t2528 * t2667 + t2622;
t2429 = t2461 * t2598 + t2463 * t2603;
t2430 = t2461 * t2603 - t2463 * t2598;
t2397 = t2429 * t2604 + t2430 * t2599;
t2398 = -t2429 * t2599 + t2430 * t2604;
t2480 = -t2684 - t2685;
t2637 = t2398 * t2600 - t2480 * t2605;
t2369 = -t2592 * t2397 + t2595 * t2637;
t2390 = t2398 * t2605 + t2480 * t2600;
t2644 = t2369 * t2606 + t2390 * t2601;
t2415 = t2445 * t2604 + t2446 * t2599;
t2416 = -t2445 * t2599 + t2446 * t2604;
t2636 = t2416 * t2600 - t2475 * t2605;
t2383 = -t2592 * t2415 + t2595 * t2636;
t2409 = t2416 * t2605 + t2475 * t2600;
t2640 = t2383 * t2606 + t2409 * t2601;
t2490 = -t2652 - t2675;
t2494 = -t2681 - t2685;
t2458 = t2490 * t2603 + t2494 * t2598;
t2459 = -t2490 * t2598 + t2494 * t2603;
t2423 = t2458 * t2604 + t2459 * t2599;
t2424 = -t2458 * t2599 + t2459 * t2604;
t2635 = t2424 * t2600 - t2460 * t2605;
t2385 = -t2592 * t2423 + t2595 * t2635;
t2413 = t2424 * t2605 + t2460 * t2600;
t2639 = t2385 * t2606 + t2413 * t2601;
t2489 = t2652 - t2675;
t2510 = -t2681 - t2684;
t2469 = t2489 * t2598 + t2510 * t2603;
t2470 = t2489 * t2603 - t2510 * t2598;
t2435 = t2469 * t2604 + t2470 * t2599;
t2436 = -t2469 * t2599 + t2470 * t2604;
t2633 = t2436 * t2600 + t2605 * t2658;
t2392 = -t2592 * t2435 + t2595 * t2633;
t2417 = t2436 * t2605 - t2600 * t2658;
t2638 = t2392 * t2606 + t2417 * t2601;
t2503 = -t2553 * t2668 - t2655;
t2505 = t2551 * t2668 + t2612;
t2472 = t2503 * t2599 + t2505 * t2604;
t2473 = t2503 * t2604 - t2505 * t2599;
t2515 = -t2682 - t2683;
t2629 = t2473 * t2600 - t2515 * t2605;
t2434 = -t2592 * t2472 + t2595 * t2629;
t2455 = t2473 * t2605 + t2515 * t2600;
t2634 = t2434 * t2606 + t2455 * t2601;
t2509 = -t2592 * t2610 + t2546;
t2484 = -t2600 * t2532 + t2665;
t2628 = t2484 * t2605 + t2485 * t2600;
t2442 = -t2592 * t2509 + t2595 * t2628;
t2454 = -t2484 * t2600 + t2485 * t2605;
t2632 = t2442 * t2606 + t2454 * t2601;
t2523 = -t2680 - t2683;
t2487 = t2517 * t2604 + t2523 * t2599;
t2488 = -t2517 * t2599 + t2523 * t2604;
t2502 = (qJD(4) - t2575) * t2553 + t2655;
t2627 = t2488 * t2600 - t2502 * t2605;
t2444 = -t2592 * t2487 + t2595 * t2627;
t2466 = t2488 * t2605 + t2502 * t2600;
t2631 = t2444 * t2606 + t2466 * t2601;
t2516 = t2659 - t2674;
t2533 = -t2680 - t2682;
t2495 = t2516 * t2599 + t2533 * t2604;
t2496 = t2516 * t2604 - t2533 * t2599;
t2504 = t2522 + t2673;
t2626 = t2496 * t2600 - t2504 * t2605;
t2448 = -t2592 * t2495 + t2595 * t2626;
t2467 = t2496 * t2605 + t2504 * t2600;
t2630 = t2448 * t2606 + t2467 * t2601;
t2588 = t2600 ^ 2;
t2589 = t2605 ^ 2;
t2563 = (-t2588 - t2589) * t2671;
t2539 = t2653 - t2557;
t2565 = t2586 * t2661;
t2540 = t2565 + t2664;
t2620 = t2539 * t2605 + t2540 * t2600;
t2499 = -t2592 * t2563 + t2595 * t2620;
t2511 = -t2539 * t2600 + t2540 * t2605;
t2625 = t2499 * t2606 + t2511 * t2601;
t2538 = t2653 + t2557;
t2548 = -t2588 * t2671 - t2679;
t2574 = t2600 * t2605 * t2671;
t2555 = t2574 - t2654;
t2619 = t2548 * t2605 + t2555 * t2600;
t2501 = -t2592 * t2538 + t2595 * t2619;
t2531 = -t2548 * t2600 + t2555 * t2605;
t2624 = t2501 * t2606 + t2531 * t2601;
t2541 = t2565 - t2664;
t2554 = t2574 + t2654;
t2558 = -t2589 * t2671 - t2679;
t2618 = t2554 * t2605 + t2558 * t2600;
t2508 = -t2592 * t2541 + t2595 * t2618;
t2534 = -t2554 * t2600 + t2558 * t2605;
t2623 = t2508 * t2606 + t2534 * t2601;
t2621 = t2535 * t2606 + t2536 * t2601;
t2615 = qJDD(2) * t2606 - t2601 * t2607;
t2573 = -qJDD(2) * t2601 - t2606 * t2607;
t2562 = t2615 * t2596;
t2561 = t2573 * t2596;
t2560 = t2615 * t2593;
t2559 = t2573 * t2593;
t2507 = t2595 * t2541 + t2592 * t2618;
t2506 = -t2535 * t2601 + t2536 * t2606;
t2500 = t2595 * t2538 + t2592 * t2619;
t2498 = t2595 * t2563 + t2592 * t2620;
t2493 = t2593 ^ 2 * t2577 + (t2621 - t2670) * t2596;
t2492 = t2596 ^ 2 * t2590 + (t2621 - t2672) * t2593;
t2486 = -t2508 * t2601 + t2534 * t2606;
t2483 = -t2501 * t2601 + t2531 * t2606;
t2477 = -t2499 * t2601 + t2511 * t2606;
t2465 = -t2593 * t2507 + t2596 * t2623;
t2464 = t2596 * t2507 + t2593 * t2623;
t2457 = -t2593 * t2500 + t2596 * t2624;
t2456 = t2596 * t2500 + t2593 * t2624;
t2453 = -t2593 * t2498 + t2596 * t2625;
t2452 = t2596 * t2498 + t2593 * t2625;
t2447 = t2595 * t2495 + t2592 * t2626;
t2443 = t2595 * t2487 + t2592 * t2627;
t2441 = t2595 * t2509 + t2592 * t2628;
t2433 = t2595 * t2472 + t2592 * t2629;
t2420 = -t2448 * t2601 + t2467 * t2606;
t2419 = -t2444 * t2601 + t2466 * t2606;
t2418 = -t2442 * t2601 + t2454 * t2606;
t2414 = -t2434 * t2601 + t2455 * t2606;
t2408 = -t2593 * t2447 + t2596 * t2630;
t2407 = t2596 * t2447 + t2593 * t2630;
t2402 = -t2593 * t2443 + t2596 * t2631;
t2401 = t2596 * t2443 + t2593 * t2631;
t2394 = -t2593 * t2441 + t2596 * t2632;
t2393 = t2596 * t2441 + t2593 * t2632;
t2391 = t2595 * t2435 + t2592 * t2633;
t2387 = -t2593 * t2433 + t2596 * t2634;
t2386 = t2596 * t2433 + t2593 * t2634;
t2384 = t2595 * t2423 + t2592 * t2635;
t2382 = t2595 * t2415 + t2592 * t2636;
t2381 = -t2392 * t2601 + t2417 * t2606;
t2372 = -t2385 * t2601 + t2413 * t2606;
t2368 = t2595 * t2397 + t2592 * t2637;
t2365 = -t2383 * t2601 + t2409 * t2606;
t2363 = -t2593 * t2391 + t2596 * t2638;
t2362 = t2596 * t2391 + t2593 * t2638;
t2361 = -t2369 * t2601 + t2390 * t2606;
t2360 = -t2593 * t2384 + t2596 * t2639;
t2359 = t2596 * t2384 + t2593 * t2639;
t2354 = -t2593 * t2382 + t2596 * t2640;
t2353 = t2596 * t2382 + t2593 * t2640;
t2351 = t2595 * t2379 + t2592 * t2641;
t2348 = t2595 * t2377 + t2592 * t2642;
t2346 = t2595 * t2370 + t2592 * t2643;
t2343 = -t2593 * t2368 + t2596 * t2644;
t2342 = t2596 * t2368 + t2593 * t2644;
t2341 = -t2352 * t2601 + t2367 * t2606;
t2340 = -t2349 * t2601 + t2366 * t2606;
t2339 = -t2347 * t2601 + t2364 * t2606;
t2337 = t2595 * t2357 + t2592 * t2645;
t2334 = -t2593 * t2351 + t2596 * t2646;
t2333 = t2596 * t2351 + t2593 * t2646;
t2332 = -t2593 * t2348 + t2596 * t2647;
t2331 = t2596 * t2348 + t2593 * t2647;
t2330 = -t2338 * t2601 + t2350 * t2606;
t2329 = -t2593 * t2346 + t2596 * t2648;
t2328 = t2596 * t2346 + t2593 * t2648;
t2326 = -t2593 * t2337 + t2596 * t2649;
t2325 = t2596 * t2337 + t2593 * t2649;
t2323 = t2595 * t2335 + t2592 * t2650;
t2322 = -t2324 * t2601 + t2327 * t2606;
t2321 = -t2593 * t2323 + t2596 * t2651;
t2320 = t2596 * t2323 + t2593 * t2651;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2577 * t2591 + t2578 * t2594, 0, 0, 0, 0, 0, 0, -t2562 * t2591 + t2573 * t2594, -t2561 * t2591 - t2594 * t2615, 0, -t2493 * t2591 + t2506 * t2594, 0, 0, 0, 0, 0, 0, -t2465 * t2591 + t2486 * t2594, -t2457 * t2591 + t2483 * t2594, -t2453 * t2591 + t2477 * t2594, -t2394 * t2591 + t2418 * t2594, 0, 0, 0, 0, 0, 0, -t2402 * t2591 + t2419 * t2594, -t2408 * t2591 + t2420 * t2594, -t2387 * t2591 + t2414 * t2594, -t2354 * t2591 + t2365 * t2594, 0, 0, 0, 0, 0, 0, -t2360 * t2591 + t2372 * t2594, -t2363 * t2591 + t2381 * t2594, -t2343 * t2591 + t2361 * t2594, -t2326 * t2591 + t2330 * t2594, 0, 0, 0, 0, 0, 0, -t2332 * t2591 + t2340 * t2594, -t2334 * t2591 + t2341 * t2594, -t2329 * t2591 + t2339 * t2594, -t2321 * t2591 + t2322 * t2594; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2577 * t2594 + t2578 * t2591, 0, 0, 0, 0, 0, 0, t2562 * t2594 + t2573 * t2591, t2561 * t2594 - t2591 * t2615, 0, t2493 * t2594 + t2506 * t2591, 0, 0, 0, 0, 0, 0, t2465 * t2594 + t2486 * t2591, t2457 * t2594 + t2483 * t2591, t2453 * t2594 + t2477 * t2591, t2394 * t2594 + t2418 * t2591, 0, 0, 0, 0, 0, 0, t2402 * t2594 + t2419 * t2591, t2408 * t2594 + t2420 * t2591, t2387 * t2594 + t2414 * t2591, t2354 * t2594 + t2365 * t2591, 0, 0, 0, 0, 0, 0, t2360 * t2594 + t2372 * t2591, t2363 * t2594 + t2381 * t2591, t2343 * t2594 + t2361 * t2591, t2326 * t2594 + t2330 * t2591, 0, 0, 0, 0, 0, 0, t2332 * t2594 + t2340 * t2591, t2334 * t2594 + t2341 * t2591, t2329 * t2594 + t2339 * t2591, t2321 * t2594 + t2322 * t2591; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2590, 0, 0, 0, 0, 0, 0, t2560, t2559, 0, t2492, 0, 0, 0, 0, 0, 0, t2464, t2456, t2452, t2393, 0, 0, 0, 0, 0, 0, t2401, t2407, t2386, t2353, 0, 0, 0, 0, 0, 0, t2359, t2362, t2342, t2325, 0, 0, 0, 0, 0, 0, t2331, t2333, t2328, t2320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2578, 0, 0, 0, 0, 0, 0, t2573, -t2615, 0, t2506, 0, 0, 0, 0, 0, 0, t2486, t2483, t2477, t2418, 0, 0, 0, 0, 0, 0, t2419, t2420, t2414, t2365, 0, 0, 0, 0, 0, 0, t2372, t2381, t2361, t2330, 0, 0, 0, 0, 0, 0, t2340, t2341, t2339, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2577, 0, 0, 0, 0, 0, 0, t2562, t2561, 0, t2493, 0, 0, 0, 0, 0, 0, t2465, t2457, t2453, t2394, 0, 0, 0, 0, 0, 0, t2402, t2408, t2387, t2354, 0, 0, 0, 0, 0, 0, t2360, t2363, t2343, t2326, 0, 0, 0, 0, 0, 0, t2332, t2334, t2329, t2321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2590, 0, 0, 0, 0, 0, 0, t2560, t2559, 0, t2492, 0, 0, 0, 0, 0, 0, t2464, t2456, t2452, t2393, 0, 0, 0, 0, 0, 0, t2401, t2407, t2386, t2353, 0, 0, 0, 0, 0, 0, t2359, t2362, t2342, t2325, 0, 0, 0, 0, 0, 0, t2331, t2333, t2328, t2320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2607, -qJDD(2), 0, t2536, 0, 0, 0, 0, 0, 0, t2534, t2531, t2511, t2454, 0, 0, 0, 0, 0, 0, t2466, t2467, t2455, t2409, 0, 0, 0, 0, 0, 0, t2413, t2417, t2390, t2350, 0, 0, 0, 0, 0, 0, t2366, t2367, t2364, t2327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2607, 0, t2535, 0, 0, 0, 0, 0, 0, t2508, t2501, t2499, t2442, 0, 0, 0, 0, 0, 0, t2444, t2448, t2434, t2383, 0, 0, 0, 0, 0, 0, t2385, t2392, t2369, t2338, 0, 0, 0, 0, 0, 0, t2349, t2352, t2347, t2324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2616, 0, 0, 0, 0, 0, 0, t2507, t2500, t2498, t2441, 0, 0, 0, 0, 0, 0, t2443, t2447, t2433, t2382, 0, 0, 0, 0, 0, 0, t2384, t2391, t2368, t2337, 0, 0, 0, 0, 0, 0, t2348, t2351, t2346, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2558, t2555, t2540, t2485, 0, 0, 0, 0, 0, 0, t2488, t2496, t2473, t2416, 0, 0, 0, 0, 0, 0, t2424, t2436, t2398, t2358, 0, 0, 0, 0, 0, 0, t2378, t2380, t2371, t2336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2554, t2548, t2539, t2484, 0, 0, 0, 0, 0, 0, -t2502, -t2504, -t2515, -t2475, 0, 0, 0, 0, 0, 0, -t2460, t2658, -t2480, -t2449, 0, 0, 0, 0, 0, 0, -t2421, -t2425, -t2410, -t2355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2541, t2538, t2563, t2509, 0, 0, 0, 0, 0, 0, t2487, t2495, t2472, t2415, 0, 0, 0, 0, 0, 0, t2423, t2435, t2397, t2357, 0, 0, 0, 0, 0, 0, t2377, t2379, t2370, t2335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2523, t2516, t2503, t2446, 0, 0, 0, 0, 0, 0, t2459, t2470, t2430, t2376, 0, 0, 0, 0, 0, 0, t2404, t2406, t2396, t2345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, t2533, t2505, t2445, 0, 0, 0, 0, 0, 0, t2458, t2469, t2429, t2375, 0, 0, 0, 0, 0, 0, t2403, t2405, t2395, t2344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2502, t2504, t2515, t2475, 0, 0, 0, 0, 0, 0, t2460, -t2658, t2480, t2449, 0, 0, 0, 0, 0, 0, t2421, t2425, t2410, t2355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2494, t2489, t2461, t2400, 0, 0, 0, 0, 0, 0, t2422, t2426, t2411, t2356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2490, t2510, t2463, t2399, 0, 0, 0, 0, 0, 0, -t2437, -t2439, -t2468, -t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2460, -t2658, t2480, t2449, 0, 0, 0, 0, 0, 0, t2421, t2425, t2410, t2355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2471, t2451, t2438, t2374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2450, t2478, t2440, t2373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2437, t2439, t2468, t2388;];
f_new_reg  = t1;
