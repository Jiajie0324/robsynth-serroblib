% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6PRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6PRRRRR4_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-09 23:19
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6PRRRRR4_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR4_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR4_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6PRRRRR4_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRRR4_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:23
	% EndTime: 2019-10-09 23:19:23
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:23
	% EndTime: 2019-10-09 23:19:23
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:23
	% EndTime: 2019-10-09 23:19:23
	% DurationCPUTime: 0.09s
	% Computational Cost: add. (46->7), mult. (159->21), div. (18->4), fcn. (175->5), ass. (0->15)
	t39 = cos(pkin(13));
	t41 = sin(qJ(2));
	t42 = cos(qJ(2));
	t45 = sin(pkin(13)) * cos(pkin(6));
	t37 = t39 * t42 - t41 * t45;
	t34 = 0.1e1 / t37 ^ 2;
	t49 = qJD(2) * t34;
	t36 = t39 * t41 + t42 * t45;
	t33 = t36 ^ 2;
	t30 = t33 * t34 + 0.1e1;
	t46 = t37 * t49;
	t47 = t36 / t37 * t49;
	t48 = (t33 * t47 + t36 * t46) / t30 ^ 2;
	t28 = 0.1e1 / t30;
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, -0.2e1 * t48 + 0.2e1 * (t28 * t46 + (t28 * t47 - t34 * t48) * t36) * t36, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:23
	% EndTime: 2019-10-09 23:19:24
	% DurationCPUTime: 0.71s
	% Computational Cost: add. (1326->63), mult. (4214->161), div. (275->12), fcn. (5416->13), ass. (0->79)
	t164 = sin(pkin(7));
	t162 = t164 ^ 2;
	t206 = 0.2e1 * t162;
	t166 = cos(pkin(13));
	t163 = sin(pkin(13));
	t170 = sin(qJ(2));
	t168 = cos(pkin(6));
	t172 = cos(qJ(2));
	t190 = t168 * t172;
	t182 = -t163 * t170 + t166 * t190;
	t165 = sin(pkin(6));
	t167 = cos(pkin(7));
	t195 = t165 * t167;
	t146 = t182 * t164 + t166 * t195;
	t196 = t164 * t172;
	t156 = -t165 * t196 + t168 * t167;
	t141 = atan2(t146, t156);
	t136 = sin(t141);
	t137 = cos(t141);
	t123 = t136 * t146 + t137 * t156;
	t120 = 0.1e1 / t123;
	t169 = sin(qJ(3));
	t171 = cos(qJ(3));
	t191 = t168 * t170;
	t180 = t163 * t191 - t166 * t172;
	t181 = t163 * t190 + t166 * t170;
	t187 = t163 * t164 * t165;
	t183 = -t167 * t181 + t187;
	t135 = t183 * t169 - t171 * t180;
	t131 = 0.1e1 / t135;
	t153 = 0.1e1 / t156;
	t121 = 0.1e1 / t123 ^ 2;
	t132 = 0.1e1 / t135 ^ 2;
	t154 = 0.1e1 / t156 ^ 2;
	t147 = t163 * t195 + t164 * t181;
	t145 = t147 ^ 2;
	t119 = t121 * t145 + 0.1e1;
	t152 = t180 * qJD(2);
	t157 = -t163 * t172 - t166 * t191;
	t150 = t157 * qJD(2);
	t194 = t165 * t170;
	t198 = t146 * t154;
	t185 = t194 * t198;
	t144 = t146 ^ 2;
	t140 = t144 * t154 + 0.1e1;
	t138 = 0.1e1 / t140;
	t199 = t138 * t164;
	t115 = (-qJD(2) * t185 + t150 * t153) * t199;
	t184 = -t136 * t156 + t137 * t146;
	t189 = qJD(2) * t165;
	t186 = t170 * t189;
	t112 = (t136 * t150 + t137 * t186) * t164 + t184 * t115;
	t204 = t112 * t120 * t121;
	t205 = (-t121 * t147 * t152 * t164 - t145 * t204) / t119 ^ 2;
	t192 = t167 * t171;
	t197 = t180 * t169;
	t134 = -t171 * t187 + t181 * t192 - t197;
	t130 = t134 ^ 2;
	t127 = t130 * t132 + 0.1e1;
	t151 = t181 * qJD(2);
	t193 = t167 * t169;
	t129 = t152 * t193 - t151 * t171 + (t183 * t171 + t197) * qJD(3);
	t201 = t129 * t131 * t132;
	t128 = t135 * qJD(3) - t151 * t169 - t152 * t192;
	t202 = t128 * t132;
	t203 = (-t130 * t201 + t134 * t202) / t127 ^ 2;
	t143 = -t171 * t181 + t180 * t193;
	t200 = t134 * t143;
	t188 = t154 * t162 * t170;
	t142 = -t169 * t181 - t180 * t192;
	t179 = -t153 * t157 + t185;
	t155 = t153 * t154;
	t149 = t182 * qJD(2);
	t125 = 0.1e1 / t127;
	t117 = 0.1e1 / t119;
	t116 = t179 * t199;
	t113 = (t136 * t157 + t137 * t194) * t164 - t184 * t116;
	t111 = t179 / t140 ^ 2 * (-t144 * t155 * t186 + t150 * t198) * t206 + (-t149 * t153 * t164 + (-t150 * t188 + (-t157 * t188 + (t155 * t165 * t170 ^ 2 * t206 - t154 * t196) * t146) * qJD(2)) * t165) * t138;
	t1 = [0, t111, 0, 0, 0, 0; 0, (-(t123 * t116 * t115 + t184 * t111) * t121 * t117 + 0.2e1 * (t117 * t204 + t121 * t205) * t113) * t147 + (0.2e1 * t180 * t120 * t205 + (-t151 * t120 + (t180 * t112 + t113 * t152 + (-(t115 * t157 - t116 * t150 + t172 * t189) * t137 - (-t149 + (qJD(2) * t116 - t115) * t194) * t136) * t147) * t121) * t117) * t164, 0, 0, 0, 0; 0, 0.2e1 * (-t131 * t142 + t132 * t200) * t203 + ((t143 * qJD(3) - t151 * t192 + t152 * t169) * t131 + 0.2e1 * t200 * t201 + (-t142 * t129 - (-t142 * qJD(3) + t151 * t193 + t152 * t171) * t134 - t143 * t128) * t132) * t125, -0.2e1 * t203 + 0.2e1 * (t125 * t202 + (-t125 * t201 - t132 * t203) * t134) * t134, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:24
	% EndTime: 2019-10-09 23:19:25
	% DurationCPUTime: 1.73s
	% Computational Cost: add. (5341->130), mult. (16984->252), div. (538->12), fcn. (21480->15), ass. (0->122)
	t287 = sin(qJ(2));
	t290 = cos(qJ(2));
	t354 = cos(pkin(13));
	t355 = cos(pkin(6));
	t320 = t355 * t354;
	t353 = sin(pkin(13));
	t306 = -t353 * t287 + t290 * t320;
	t271 = t306 * qJD(2);
	t282 = sin(pkin(7));
	t283 = sin(pkin(6));
	t323 = t354 * t283 * t282;
	t358 = -qJD(3) * t323 + t271;
	t286 = sin(qJ(3));
	t305 = -t287 * t320 - t353 * t290;
	t300 = t305 * qJD(2);
	t289 = cos(qJ(3));
	t301 = t306 * t289;
	t357 = qJD(3) * t301 + t286 * t300;
	t284 = cos(pkin(7));
	t302 = t306 * t286;
	t297 = t284 * t302 - t289 * t305;
	t338 = t284 * t289;
	t225 = t297 * qJD(3) + t358 * t286 - t300 * t338;
	t343 = t305 * t286;
	t249 = -t284 * t301 + t289 * t323 - t343;
	t247 = t249 ^ 2;
	t334 = t289 * t290;
	t337 = t286 * t287;
	t311 = t284 * t334 - t337;
	t327 = t355 * t282;
	t262 = -t311 * t283 - t289 * t327;
	t260 = 0.1e1 / t262 ^ 2;
	t241 = t247 * t260 + 0.1e1;
	t344 = t249 * t260;
	t335 = t287 * t289;
	t336 = t286 * t290;
	t309 = t284 * t336 + t335;
	t310 = t284 * t335 + t336;
	t321 = qJD(3) * t327;
	t245 = t286 * t321 + (t310 * qJD(2) + t309 * qJD(3)) * t283;
	t259 = 0.1e1 / t262;
	t345 = t245 * t259 * t260;
	t356 = -0.2e1 * (t225 * t344 - t247 * t345) / t241 ^ 2;
	t242 = atan2(-t249, t262);
	t237 = sin(t242);
	t238 = cos(t242);
	t219 = -t237 * t249 + t238 * t262;
	t216 = 0.1e1 / t219;
	t319 = t355 * t353;
	t304 = t287 * t319 - t354 * t290;
	t303 = t354 * t287 + t290 * t319;
	t328 = t283 * t353;
	t322 = t282 * t328;
	t307 = -t284 * t303 + t322;
	t253 = t307 * t286 - t289 * t304;
	t264 = t282 * t303 + t284 * t328;
	t285 = sin(qJ(4));
	t288 = cos(qJ(4));
	t236 = t253 * t288 + t264 * t285;
	t232 = 0.1e1 / t236;
	t217 = 0.1e1 / t219 ^ 2;
	t233 = 0.1e1 / t236 ^ 2;
	t239 = 0.1e1 / t241;
	t209 = (-t225 * t259 + t245 * t344) * t239;
	t318 = -t237 * t262 - t238 * t249;
	t205 = t318 * t209 - t237 * t225 + t238 * t245;
	t352 = t205 * t216 * t217;
	t272 = t303 * qJD(2);
	t273 = t304 * qJD(2);
	t339 = t284 * t286;
	t342 = t304 * t286;
	t228 = t273 * t339 - t272 * t289 + (t307 * t289 + t342) * qJD(3);
	t340 = t282 * t288;
	t220 = t236 * qJD(4) + t228 * t285 + t273 * t340;
	t235 = t253 * t285 - t264 * t288;
	t231 = t235 ^ 2;
	t224 = t231 * t233 + 0.1e1;
	t348 = t233 * t235;
	t333 = qJD(4) * t235;
	t341 = t282 * t285;
	t221 = t228 * t288 - t273 * t341 - t333;
	t349 = t221 * t232 * t233;
	t351 = (t220 * t348 - t231 * t349) / t224 ^ 2;
	t252 = -t289 * t322 + t303 * t338 - t342;
	t350 = t217 * t252;
	t347 = t237 * t252;
	t346 = t238 * t252;
	t248 = t252 ^ 2;
	t215 = t248 * t217 + 0.1e1;
	t227 = t253 * qJD(3) - t272 * t286 - t273 * t338;
	t332 = 0.2e1 * (t227 * t350 - t248 * t352) / t215 ^ 2;
	t331 = -0.2e1 * t351;
	t330 = t235 * t349;
	t329 = qJD(3) * t343;
	t325 = -0.2e1 * t249 * t345;
	t324 = 0.2e1 * t252 * t352;
	t315 = -t285 * t232 + t288 * t348;
	t251 = -t286 * t323 + t297;
	t263 = t309 * t283 + t286 * t327;
	t314 = -t251 * t259 + t263 * t344;
	t255 = -t305 * t338 + t302;
	t270 = t310 * t283;
	t313 = -t255 * t259 + t270 * t344;
	t257 = -t289 * t303 + t304 * t339;
	t312 = -t257 * t285 - t304 * t340;
	t244 = t257 * t288 - t304 * t341;
	t256 = -t286 * t303 - t304 * t338;
	t308 = -t284 * t337 + t334;
	t254 = (t311 * qJD(2) + t308 * qJD(3)) * t283;
	t246 = t289 * t321 + (t308 * qJD(2) + t311 * qJD(3)) * t283;
	t230 = -t256 * qJD(3) + t272 * t339 + t273 * t289;
	t229 = t271 * t338 + t284 * t329 + t357;
	t226 = t357 * t284 + t358 * t289 + t329;
	t222 = 0.1e1 / t224;
	t213 = 0.1e1 / t215;
	t211 = t313 * t239;
	t210 = t314 * t239;
	t207 = t318 * t211 - t237 * t255 + t238 * t270;
	t206 = t318 * t210 - t237 * t251 + t238 * t263;
	t204 = t313 * t356 + (t270 * t325 - t229 * t259 + (t225 * t270 + t245 * t255 + t249 * t254) * t260) * t239;
	t203 = t314 * t356 + (t263 * t325 - t226 * t259 + (t225 * t263 + t245 * t251 + t246 * t249) * t260) * t239;
	t1 = [0, t204, t203, 0, 0, 0; 0, (t207 * t350 - t216 * t256) * t332 + ((t257 * qJD(3) - t272 * t338 + t273 * t286) * t216 + t207 * t324 + (-t256 * t205 - t207 * t227 - (-t204 * t249 - t211 * t225 + t254 + (-t211 * t262 - t255) * t209) * t346 - (-t204 * t262 - t211 * t245 - t229 + (t211 * t249 - t270) * t209) * t347) * t217) * t213, (t206 * t350 - t216 * t253) * t332 + (t206 * t324 + t228 * t216 + (-t253 * t205 - t206 * t227 - (-t203 * t249 - t210 * t225 + t246 + (-t210 * t262 - t251) * t209) * t346 - (-t203 * t262 - t210 * t245 - t226 + (t210 * t249 - t263) * t209) * t347) * t217) * t213, 0, 0, 0; 0, 0.2e1 * (t232 * t312 + t244 * t348) * t351 + ((t244 * qJD(4) + t230 * t285 + t272 * t340) * t232 + 0.2e1 * t244 * t330 + (t312 * t221 - (t312 * qJD(4) + t230 * t288 - t272 * t341) * t235 - t244 * t220) * t233) * t222, t315 * t252 * t331 + (t315 * t227 + ((-qJD(4) * t232 - 0.2e1 * t330) * t288 + (t220 * t288 + (t221 - t333) * t285) * t233) * t252) * t222, t331 + 0.2e1 * (t220 * t233 * t222 + (-t222 * t349 - t233 * t351) * t235) * t235, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:24
	% EndTime: 2019-10-09 23:19:26
	% DurationCPUTime: 1.84s
	% Computational Cost: add. (6129->132), mult. (17990->254), div. (556->12), fcn. (22726->15), ass. (0->126)
	t318 = sin(qJ(2));
	t320 = cos(qJ(2));
	t385 = cos(pkin(13));
	t386 = cos(pkin(6));
	t351 = t386 * t385;
	t384 = sin(pkin(13));
	t336 = -t384 * t318 + t320 * t351;
	t299 = t336 * qJD(2);
	t314 = sin(pkin(7));
	t315 = sin(pkin(6));
	t355 = t314 * t315 * t385;
	t389 = -qJD(3) * t355 + t299;
	t317 = sin(qJ(3));
	t335 = -t318 * t351 - t384 * t320;
	t330 = qJD(2) * t335;
	t319 = cos(qJ(3));
	t332 = t319 * t336;
	t388 = qJD(3) * t332 + t317 * t330;
	t316 = cos(pkin(7));
	t331 = t336 * t317;
	t327 = t316 * t331 - t319 * t335;
	t370 = t316 * t319;
	t253 = t327 * qJD(3) + t389 * t317 - t330 * t370;
	t374 = t335 * t317;
	t277 = -t316 * t332 + t319 * t355 - t374;
	t275 = t277 ^ 2;
	t366 = t319 * t320;
	t369 = t317 * t318;
	t341 = t316 * t366 - t369;
	t360 = t386 * t314;
	t290 = -t341 * t315 - t319 * t360;
	t288 = 0.1e1 / t290 ^ 2;
	t269 = t275 * t288 + 0.1e1;
	t375 = t277 * t288;
	t367 = t318 * t319;
	t368 = t317 * t320;
	t339 = t316 * t368 + t367;
	t340 = t316 * t367 + t368;
	t353 = qJD(3) * t360;
	t273 = t317 * t353 + (t340 * qJD(2) + t339 * qJD(3)) * t315;
	t287 = 0.1e1 / t290;
	t376 = t273 * t287 * t288;
	t387 = -0.2e1 * (t253 * t375 - t275 * t376) / t269 ^ 2;
	t270 = atan2(-t277, t290);
	t265 = sin(t270);
	t266 = cos(t270);
	t247 = -t265 * t277 + t266 * t290;
	t244 = 0.1e1 / t247;
	t350 = t386 * t384;
	t334 = t318 * t350 - t385 * t320;
	t333 = t385 * t318 + t320 * t350;
	t361 = t315 * t384;
	t354 = t314 * t361;
	t337 = -t316 * t333 + t354;
	t281 = t337 * t317 - t319 * t334;
	t292 = t314 * t333 + t316 * t361;
	t313 = qJ(4) + qJ(5);
	t310 = sin(t313);
	t311 = cos(t313);
	t262 = t281 * t311 + t292 * t310;
	t258 = 0.1e1 / t262;
	t245 = 0.1e1 / t247 ^ 2;
	t259 = 0.1e1 / t262 ^ 2;
	t267 = 0.1e1 / t269;
	t237 = (-t253 * t287 + t273 * t375) * t267;
	t349 = -t265 * t290 - t266 * t277;
	t233 = t349 * t237 - t265 * t253 + t266 * t273;
	t383 = t233 * t244 * t245;
	t372 = t334 * t317;
	t280 = -t319 * t354 + t333 * t370 - t372;
	t382 = t245 * t280;
	t301 = t334 * qJD(2);
	t312 = qJD(4) + qJD(5);
	t348 = t281 * t312 + t301 * t314;
	t300 = t333 * qJD(2);
	t371 = t316 * t317;
	t256 = t301 * t371 - t300 * t319 + (t337 * t319 + t372) * qJD(3);
	t356 = t292 * t312 + t256;
	t249 = -t348 * t310 + t356 * t311;
	t381 = t249 * t258 * t259;
	t248 = t356 * t310 + t348 * t311;
	t261 = t281 * t310 - t292 * t311;
	t257 = t261 ^ 2;
	t252 = t257 * t259 + 0.1e1;
	t379 = t259 * t261;
	t380 = 0.1e1 / t252 ^ 2 * (t248 * t379 - t257 * t381);
	t378 = t265 * t280;
	t377 = t266 * t280;
	t373 = t334 * t314;
	t276 = t280 ^ 2;
	t243 = t245 * t276 + 0.1e1;
	t255 = t281 * qJD(3) - t300 * t317 - t301 * t370;
	t365 = 0.2e1 * (t255 * t382 - t276 * t383) / t243 ^ 2;
	t364 = -0.2e1 * t380;
	t363 = t261 * t381;
	t362 = qJD(3) * t374;
	t358 = 0.2e1 * t280 * t383;
	t357 = -0.2e1 * t277 * t376;
	t284 = -t317 * t333 - t334 * t370;
	t352 = -t284 * qJD(3) + t300 * t371 + t301 * t319 - t312 * t373;
	t285 = -t319 * t333 + t334 * t371;
	t347 = t285 * t312 + t300 * t314;
	t344 = -t258 * t310 + t311 * t379;
	t279 = -t317 * t355 + t327;
	t291 = t339 * t315 + t317 * t360;
	t343 = -t279 * t287 + t291 * t375;
	t283 = -t335 * t370 + t331;
	t298 = t340 * t315;
	t342 = -t283 * t287 + t298 * t375;
	t338 = -t316 * t369 + t366;
	t282 = (t341 * qJD(2) + t338 * qJD(3)) * t315;
	t274 = t319 * t353 + (t338 * qJD(2) + t341 * qJD(3)) * t315;
	t272 = t285 * t311 - t310 * t373;
	t271 = t285 * t310 + t311 * t373;
	t263 = t299 * t370 + t316 * t362 + t388;
	t254 = t388 * t316 + t389 * t319 + t362;
	t250 = 0.1e1 / t252;
	t241 = 0.1e1 / t243;
	t239 = t342 * t267;
	t238 = t343 * t267;
	t235 = t349 * t239 - t265 * t283 + t266 * t298;
	t234 = t349 * t238 - t265 * t279 + t266 * t291;
	t232 = t342 * t387 + (t298 * t357 - t263 * t287 + (t253 * t298 + t273 * t283 + t277 * t282) * t288) * t267;
	t231 = t343 * t387 + (t291 * t357 - t254 * t287 + (t253 * t291 + t273 * t279 + t274 * t277) * t288) * t267;
	t229 = t364 + 0.2e1 * (t248 * t259 * t250 + (-t250 * t381 - t259 * t380) * t261) * t261;
	t1 = [0, t232, t231, 0, 0, 0; 0, (t235 * t382 - t244 * t284) * t365 + ((t285 * qJD(3) - t300 * t370 + t301 * t317) * t244 + t235 * t358 + (-t284 * t233 - t235 * t255 - (-t232 * t277 - t239 * t253 + t282 + (-t239 * t290 - t283) * t237) * t377 - (-t232 * t290 - t239 * t273 - t263 + (t239 * t277 - t298) * t237) * t378) * t245) * t241, (t234 * t382 - t244 * t281) * t365 + (t234 * t358 + t256 * t244 + (-t281 * t233 - t234 * t255 - (-t231 * t277 - t238 * t253 + t274 + (-t238 * t290 - t279) * t237) * t377 - (-t231 * t290 - t238 * t273 - t254 + (t238 * t277 - t291) * t237) * t378) * t245) * t241, 0, 0, 0; 0, 0.2e1 * (-t258 * t271 + t272 * t379) * t380 + ((t352 * t310 + t347 * t311) * t258 + 0.2e1 * t272 * t363 + (-t271 * t249 - (-t347 * t310 + t352 * t311) * t261 - t272 * t248) * t259) * t250, t344 * t280 * t364 + (t344 * t255 + ((-t258 * t312 - 0.2e1 * t363) * t311 + (t248 * t311 + (-t261 * t312 + t249) * t310) * t259) * t280) * t250, t229, t229, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:19:25
	% EndTime: 2019-10-09 23:19:30
	% DurationCPUTime: 5.30s
	% Computational Cost: add. (25849->204), mult. (58272->387), div. (1079->12), fcn. (74841->17), ass. (0->169)
	t432 = qJ(4) + qJ(5);
	t429 = sin(t432);
	t430 = cos(t432);
	t437 = sin(qJ(3));
	t440 = cos(qJ(3));
	t433 = sin(pkin(7));
	t435 = cos(pkin(7));
	t438 = sin(qJ(2));
	t441 = cos(qJ(2));
	t523 = cos(pkin(13));
	t524 = cos(pkin(6));
	t475 = t524 * t523;
	t522 = sin(pkin(13));
	t457 = t522 * t438 - t441 * t475;
	t434 = sin(pkin(6));
	t487 = t434 * t523;
	t450 = -t433 * t487 - t457 * t435;
	t458 = -t438 * t475 - t522 * t441;
	t404 = t437 * t458 + t450 * t440;
	t419 = t457 * qJD(2);
	t420 = t458 * qJD(2);
	t431 = qJD(4) + qJD(5);
	t451 = t457 * t433 - t435 * t487;
	t502 = t435 * t437;
	t449 = t404 * qJD(3) - t419 * t440 + t420 * t502 + t451 * t431;
	t405 = t450 * t437 - t440 * t458;
	t472 = t405 * t431 + t420 * t433;
	t355 = t449 * t429 + t472 * t430;
	t386 = t405 * t429 - t451 * t430;
	t384 = t386 ^ 2;
	t497 = t438 * t440;
	t498 = t437 * t441;
	t462 = t435 * t498 + t497;
	t485 = t524 * t433;
	t415 = t462 * t434 + t437 * t485;
	t503 = t433 * t441;
	t423 = -t434 * t503 + t524 * t435;
	t401 = t415 * t429 - t423 * t430;
	t397 = 0.1e1 / t401 ^ 2;
	t371 = t384 * t397 + 0.1e1;
	t369 = 0.1e1 / t371;
	t504 = t433 * t438;
	t488 = t434 * t504;
	t460 = qJD(2) * t488 - t415 * t431;
	t495 = t440 * t441;
	t499 = t437 * t438;
	t461 = -t435 * t499 + t495;
	t464 = t435 * t495 - t499;
	t478 = qJD(3) * t485;
	t480 = t423 * t431 + t440 * t478 + (t461 * qJD(2) + t464 * qJD(3)) * t434;
	t373 = t480 * t429 - t460 * t430;
	t396 = 0.1e1 / t401;
	t513 = t386 * t397;
	t338 = (-t355 * t396 + t373 * t513) * t369;
	t372 = atan2(-t386, t401);
	t367 = sin(t372);
	t368 = cos(t372);
	t473 = -t367 * t401 - t368 * t386;
	t333 = t473 * t338 - t367 * t355 + t368 * t373;
	t351 = -t367 * t386 + t368 * t401;
	t348 = 0.1e1 / t351;
	t349 = 0.1e1 / t351 ^ 2;
	t527 = t333 * t348 * t349;
	t474 = t524 * t522;
	t455 = t523 * t438 + t441 * t474;
	t486 = t434 * t522;
	t479 = t433 * t486;
	t452 = -t455 * t435 + t479;
	t456 = t438 * t474 - t523 * t441;
	t407 = t452 * t437 - t440 * t456;
	t453 = t455 * t433 + t435 * t486;
	t389 = t407 * t429 - t453 * t430;
	t481 = 0.2e1 * t389 * t527;
	t414 = t464 * t434 + t440 * t485;
	t465 = -t396 * t404 + t414 * t513;
	t526 = t429 * t465;
	t514 = t373 * t396 * t397;
	t525 = -0.2e1 * (t355 * t513 - t384 * t514) / t371 ^ 2;
	t390 = t407 * t430 + t453 * t429;
	t439 = cos(qJ(6));
	t454 = t455 * t440;
	t508 = t456 * t437;
	t406 = t435 * t454 - t440 * t479 - t508;
	t436 = sin(qJ(6));
	t511 = t406 * t436;
	t366 = t390 * t439 + t511;
	t362 = 0.1e1 / t366;
	t363 = 0.1e1 / t366 ^ 2;
	t421 = t455 * qJD(2);
	t422 = t456 * qJD(2);
	t383 = t422 * t502 - t421 * t440 + (t452 * t440 + t508) * qJD(3);
	t448 = t453 * t431 + t383;
	t471 = t407 * t431 + t422 * t433;
	t358 = -t471 * t429 + t448 * t430;
	t501 = t435 * t440;
	t382 = qJD(3) * t407 - t421 * t437 - t422 * t501;
	t346 = t366 * qJD(6) + t358 * t436 - t382 * t439;
	t510 = t406 * t439;
	t365 = t390 * t436 - t510;
	t361 = t365 ^ 2;
	t354 = t361 * t363 + 0.1e1;
	t517 = t363 * t365;
	t494 = qJD(6) * t365;
	t347 = t358 * t439 + t382 * t436 - t494;
	t520 = t347 * t362 * t363;
	t521 = (t346 * t517 - t361 * t520) / t354 ^ 2;
	t519 = t349 * t389;
	t357 = t448 * t429 + t471 * t430;
	t518 = t357 * t349;
	t516 = t367 * t389;
	t515 = t368 * t389;
	t512 = t406 * t429;
	t507 = t430 * t431;
	t506 = t433 * t430;
	t505 = t433 * t431;
	t500 = t436 * t362;
	t496 = t439 * t365;
	t385 = t389 ^ 2;
	t345 = t385 * t349 + 0.1e1;
	t493 = 0.2e1 * (-t385 * t527 + t389 * t518) / t345 ^ 2;
	t492 = -0.2e1 * t521;
	t491 = 0.2e1 * t521;
	t489 = t365 * t520;
	t483 = 0.2e1 * t489;
	t482 = -0.2e1 * t386 * t514;
	t409 = -t455 * t437 - t456 * t501;
	t477 = -t409 * qJD(3) + t421 * t502 + t422 * t440 - t456 * t505;
	t476 = qJD(6) * t406 * t430 + t383;
	t410 = t456 * t502 - t454;
	t395 = -t429 * t433 * t456 + t410 * t430;
	t376 = t395 * t439 + t409 * t436;
	t375 = t395 * t436 - t409 * t439;
	t470 = t410 * t431 + t421 * t433;
	t468 = t363 * t496 - t500;
	t388 = t405 * t430 + t451 * t429;
	t402 = t415 * t430 + t423 * t429;
	t467 = -t388 * t396 + t402 * t513;
	t408 = -t457 * t440 + t458 * t502;
	t393 = t408 * t429 + t458 * t506;
	t418 = t461 * t434;
	t411 = t418 * t429 - t430 * t488;
	t466 = -t393 * t396 + t411 * t513;
	t463 = -t435 * t497 - t498;
	t459 = qJD(6) * t407 - t382 * t430 + t431 * t512;
	t399 = -t437 * t478 + (t463 * qJD(2) - t462 * qJD(3)) * t434;
	t394 = t410 * t429 + t456 * t506;
	t391 = t410 * qJD(3) - t421 * t501 + t422 * t437;
	t380 = -t405 * qJD(3) + t419 * t437 + t420 * t501;
	t379 = t418 * t507 + ((t463 * qJD(3) + t431 * t504) * t429 + (-t462 * t429 - t430 * t503) * qJD(2)) * t434;
	t378 = t407 * t436 - t430 * t510;
	t377 = -t407 * t439 - t430 * t511;
	t374 = t460 * t429 + t480 * t430;
	t360 = -t470 * t429 + t477 * t430;
	t359 = t408 * t507 + t419 * t506 + (t419 * t502 + t420 * t440 + (t457 * t437 + t458 * t501) * qJD(3) - t458 * t505) * t429;
	t356 = -t472 * t429 + t449 * t430;
	t352 = 0.1e1 / t354;
	t343 = 0.1e1 / t345;
	t342 = t369 * t526;
	t341 = t466 * t369;
	t340 = t467 * t369;
	t336 = (-t367 * t404 + t368 * t414) * t429 + t473 * t342;
	t335 = t473 * t341 - t367 * t393 + t368 * t411;
	t334 = t473 * t340 - t367 * t388 + t368 * t402;
	t332 = t466 * t525 + (t411 * t482 - t359 * t396 + (t355 * t411 + t373 * t393 + t379 * t386) * t397) * t369;
	t330 = t467 * t525 + (t402 * t482 - t356 * t396 + (t355 * t402 + t373 * t388 + t374 * t386) * t397) * t369;
	t329 = t525 * t526 + (t465 * t507 + (t414 * t482 - t380 * t396 + (t355 * t414 + t373 * t404 + t386 * t399) * t397) * t429) * t369;
	t328 = t468 * t389 * t492 + (t468 * t357 + ((-qJD(6) * t362 - 0.2e1 * t489) * t439 + (t346 * t439 + (t347 - t494) * t436) * t363) * t389) * t352;
	t327 = (t334 * t519 - t348 * t390) * t493 + (t334 * t481 + t358 * t348 + (-t390 * t333 - t334 * t357 - (-t330 * t386 - t340 * t355 + t374 + (-t340 * t401 - t388) * t338) * t515 - (-t330 * t401 - t340 * t373 - t356 + (t340 * t386 - t402) * t338) * t516) * t349) * t343;
	t1 = [0, t332, t329, t330, t330, 0; 0, (t335 * t519 - t348 * t394) * t493 + ((t477 * t429 + t470 * t430) * t348 + t335 * t481 + (-t394 * t333 - t335 * t357 - (-t332 * t386 - t341 * t355 + t379 + (-t341 * t401 - t393) * t338) * t515 - (-t332 * t401 - t341 * t373 - t359 + (t341 * t386 - t411) * t338) * t516) * t349) * t343, (t336 * t519 + t348 * t512) * t493 + ((-t382 * t429 - t406 * t507) * t348 + (-t518 + t481) * t336 + (t512 * t333 - (t414 * t507 - t329 * t386 - t342 * t355 + t399 * t429 + (-t342 * t401 - t404 * t429) * t338) * t515 - (-t404 * t507 - t329 * t401 - t342 * t373 - t380 * t429 + (t342 * t386 - t414 * t429) * t338) * t516) * t349) * t343, t327, t327, 0; 0, (-t362 * t375 + t376 * t517) * t491 + ((t376 * qJD(6) + t360 * t436 - t391 * t439) * t362 + t376 * t483 + (-t375 * t347 - (-t375 * qJD(6) + t360 * t439 + t391 * t436) * t365 - t376 * t346) * t363) * t352, (-t362 * t377 + t378 * t517) * t491 + (t378 * t483 - t476 * t362 * t439 + t459 * t500 + (-t476 * t365 * t436 - t378 * t346 - t377 * t347 - t459 * t496) * t363) * t352, t328, t328, t492 + 0.2e1 * (t346 * t363 * t352 + (-t352 * t520 - t363 * t521) * t365) * t365;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end