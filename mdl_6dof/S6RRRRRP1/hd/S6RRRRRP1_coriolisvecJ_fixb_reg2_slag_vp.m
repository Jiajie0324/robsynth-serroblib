% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRP1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:58:14
% EndTime: 2019-03-10 00:58:35
% DurationCPUTime: 9.14s
% Computational Cost: add. (20972->595), mult. (52828->736), div. (0->0), fcn. (39290->8), ass. (0->301)
t265 = cos(qJ(5));
t354 = qJD(5) * t265;
t266 = cos(qJ(2));
t422 = cos(qJ(3));
t341 = t422 * t266;
t314 = qJD(1) * t341;
t264 = sin(qJ(2));
t420 = sin(qJ(3));
t339 = t420 * t264;
t211 = -qJD(1) * t339 + t314;
t225 = t264 * t422 + t266 * t420;
t212 = qJD(1) * t225;
t263 = sin(qJ(4));
t421 = cos(qJ(4));
t166 = -t421 * t211 + t212 * t263;
t448 = t166 * t265;
t456 = t354 + t448;
t262 = sin(qJ(5));
t296 = t263 * t211 + t212 * t421;
t259 = qJD(2) + qJD(3);
t329 = qJD(4) + t259;
t149 = t262 * t296 - t265 * t329;
t151 = t262 * t329 + t265 * t296;
t445 = qJD(5) + t166;
t453 = t445 * t262;
t355 = qJD(5) * t262;
t335 = t420 * qJD(3);
t358 = qJD(1) * t264;
t173 = (qJD(2) * t420 + t335) * t358 - t259 * t314;
t277 = t259 * t225;
t274 = t277 * qJD(1);
t336 = qJD(4) * t421;
t357 = qJD(4) * t263;
t271 = -t173 * t421 + t211 * t336 - t212 * t357 - t263 * t274;
t446 = -qJD(5) * t329 - t271;
t76 = t265 * t446 + t296 * t355;
t356 = qJD(5) * t151;
t77 = t262 * t271 + t356;
t455 = -t149 * t456 - t151 * t453 - t262 * t77 - t76 * t265;
t273 = t421 * t277;
t323 = -qJD(1) * t273 + t263 * t173;
t95 = qJD(4) * t296 - t323;
t92 = t265 * t95;
t454 = t149 * t296 - t445 * t453 + t92;
t449 = t166 * t262;
t432 = (t355 + t449) * pkin(5);
t424 = -pkin(8) - pkin(7);
t239 = t424 * t264;
t229 = qJD(1) * t239;
t410 = qJD(2) * pkin(2);
t219 = t229 + t410;
t342 = qJD(2) * t424;
t315 = qJD(1) * t342;
t220 = t264 * t315;
t221 = t266 * t315;
t240 = t424 * t266;
t231 = qJD(1) * t240;
t337 = qJD(3) * t422;
t131 = t219 * t337 + t422 * t220 + t420 * t221 + t231 * t335;
t102 = -pkin(9) * t274 + t131;
t367 = t263 * t102;
t217 = t422 * t231;
t175 = t219 * t420 - t217;
t309 = -t220 * t420 + t422 * t221;
t132 = -qJD(3) * t175 + t309;
t103 = t173 * pkin(9) + t132;
t99 = t421 * t103;
t327 = -t99 + t367;
t213 = t420 * t231;
t174 = t422 * t219 + t213;
t206 = t212 * pkin(9);
t146 = -t206 + t174;
t137 = t259 * pkin(3) + t146;
t417 = t211 * pkin(9);
t147 = t175 + t417;
t144 = t421 * t147;
t98 = t263 * t137 + t144;
t25 = qJD(4) * t98 + t327;
t17 = t77 * pkin(5) + t25;
t328 = t149 * pkin(5) + qJD(6);
t143 = t263 * t147;
t97 = t137 * t421 - t143;
t93 = -pkin(4) * t329 - t97;
t78 = t328 + t93;
t414 = t17 * t262 + t78 * t354;
t253 = -t266 * pkin(2) - pkin(1);
t238 = qJD(1) * t253;
t185 = -pkin(3) * t211 + t238;
t110 = pkin(4) * t166 - pkin(10) * t296 + t185;
t94 = pkin(10) * t329 + t98;
t60 = t110 * t262 + t265 * t94;
t42 = -qJ(6) * t149 + t60;
t290 = t296 * t42 + t448 * t78 + t414;
t59 = t265 * t110 - t262 * t94;
t41 = -qJ(6) * t151 + t59;
t31 = pkin(5) * t445 + t41;
t333 = -t17 * t265 + t78 * t355;
t286 = -t296 * t31 + t449 * t78 + t333;
t431 = -qJ(6) * t449 + t265 * qJD(6);
t73 = t76 * t262;
t451 = t151 * t456 - t73;
t395 = t262 * t95 + t354 * t445;
t450 = -t151 * t296 + t445 * t448 + t395;
t447 = t166 * t296;
t82 = -t166 ^ 2 + t296 ^ 2;
t130 = pkin(4) * t296 + pkin(10) * t166;
t281 = -t102 * t421 - t263 * t103 - t137 * t336 + t147 * t357;
t279 = t185 * t166 + t281;
t258 = t265 * qJ(6);
t310 = pkin(5) * t296 + t166 * t258;
t79 = t166 * t329 + t271;
t443 = 0.2e1 * t238;
t352 = qJD(1) * qJD(2);
t442 = -0.2e1 * t352;
t334 = t264 * t352;
t246 = pkin(2) * t334;
t155 = pkin(3) * t274 + t246;
t43 = t95 * pkin(4) - pkin(10) * t271 + t155;
t9 = -qJD(5) * t60 + t262 * t281 + t265 * t43;
t439 = -t445 * t60 - t9;
t318 = pkin(3) * t336;
t105 = t146 * t421 - t143;
t419 = pkin(3) * t212;
t118 = t130 + t419;
t63 = t265 * t105 + t262 * t118;
t438 = -t265 * t318 + t63;
t348 = t422 * pkin(2);
t251 = t348 + pkin(3);
t340 = t420 * t263;
t171 = t251 * t336 + (-qJD(4) * t340 + (t421 * t422 - t340) * qJD(3)) * pkin(2);
t182 = t422 * t229 + t213;
t154 = -t206 + t182;
t181 = -t229 * t420 + t217;
t292 = t181 - t417;
t112 = t154 * t421 + t263 * t292;
t254 = pkin(2) * t358;
t113 = t118 + t254;
t65 = t265 * t112 + t262 * t113;
t437 = -t171 * t265 + t65;
t332 = -t25 * t265 + t93 * t355;
t436 = t445 * t296;
t434 = t185 * t296;
t104 = t146 * t263 + t144;
t311 = pkin(3) * t357 - t104;
t188 = t422 * t239 + t240 * t420;
t160 = -t225 * pkin(9) + t188;
t189 = t420 * t239 - t422 * t240;
t291 = t339 - t341;
t161 = -pkin(9) * t291 + t189;
t127 = t263 * t160 + t161 * t421;
t124 = t265 * t127;
t284 = t421 * t291;
t179 = t225 * t263 + t284;
t288 = t263 * t291;
t180 = t225 * t421 - t288;
t193 = pkin(3) * t291 + t253;
t125 = t179 * pkin(4) - t180 * pkin(10) + t193;
t69 = t262 * t125 + t124;
t433 = -t171 + t112;
t316 = t420 * t421;
t361 = -t154 * t263 + t421 * t292 + t251 * t357 + (qJD(4) * t316 + (t263 * t422 + t316) * qJD(3)) * pkin(2);
t430 = -t262 * t59 + t265 * t60;
t298 = -t296 * t59 + t332;
t413 = t25 * t262 + t93 * t354;
t317 = t296 * t60 + t413;
t80 = t259 * t296 + t323;
t425 = t151 ^ 2;
t423 = pkin(5) * t95;
t418 = pkin(3) * t263;
t416 = t265 * pkin(5);
t324 = -t110 * t354 - t262 * t43 + t265 * t281 + t94 * t355;
t7 = t324 * t265;
t415 = -qJ(6) - pkin(10);
t412 = t31 - t41;
t411 = pkin(3) * qJD(4);
t126 = -t421 * t160 + t161 * t263;
t409 = t126 * t25;
t408 = t445 * t42;
t407 = t445 * t59;
t405 = t166 * t93;
t403 = t179 * t95;
t400 = t265 * t31;
t75 = t77 * t265;
t208 = pkin(2) * t316 + t263 * t251;
t202 = pkin(10) + t208;
t363 = -qJ(6) - t202;
t322 = qJD(5) * t363;
t398 = t262 * t322 + t431 - t437;
t64 = -t112 * t262 + t265 * t113;
t397 = (-qJD(6) - t171) * t262 + t265 * t322 - t310 - t64;
t394 = t432 + t361;
t249 = pkin(10) + t418;
t362 = -qJ(6) - t249;
t321 = qJD(5) * t362;
t393 = t262 * t321 + t431 - t438;
t62 = -t105 * t262 + t265 * t118;
t392 = (-t318 - qJD(6)) * t262 + t265 * t321 - t310 - t62;
t330 = qJD(5) * t415;
t67 = t262 * t130 + t265 * t97;
t391 = t262 * t330 + t431 - t67;
t66 = t265 * t130 - t262 * t97;
t390 = -t262 * qJD(6) + t265 * t330 - t310 - t66;
t389 = t432 + t311;
t275 = t259 * t291;
t114 = qJD(4) * t284 + t225 * t357 + t263 * t277 + t275 * t421;
t388 = t114 * t262;
t387 = t114 * t265;
t386 = t149 * t445;
t385 = t149 * t262;
t384 = t151 * t149;
t383 = t151 * t445;
t371 = t180 * t262;
t370 = t180 * t265;
t369 = t212 * t211;
t368 = t238 * t212;
t268 = qJD(1) ^ 2;
t366 = t266 * t268;
t267 = qJD(2) ^ 2;
t365 = t267 * t264;
t364 = t267 * t266;
t359 = t264 ^ 2 - t266 ^ 2;
t351 = -t448 * t59 - t449 * t60 - t7;
t230 = t264 * t342;
t232 = t266 * t342;
t135 = t422 * t230 + t420 * t232 + t239 * t337 + t240 * t335;
t123 = -pkin(9) * t277 + t135;
t308 = -t230 * t420 + t422 * t232;
t270 = pkin(9) * t275 - t239 * t335 + t240 * t337 + t308;
t46 = t123 * t421 + t160 * t336 - t161 * t357 + t263 * t270;
t115 = -qJD(4) * t288 + t225 * t336 - t263 * t275 + t273;
t256 = t264 * t410;
t170 = pkin(3) * t277 + t256;
t57 = t115 * pkin(4) + t114 * pkin(10) + t170;
t350 = t125 * t354 + t262 * t57 + t265 * t46;
t347 = t421 * pkin(3);
t346 = t420 * pkin(2);
t343 = t264 * t366;
t338 = t180 * t354;
t331 = -t262 * t46 + t265 * t57;
t326 = t99 - t434;
t325 = pkin(1) * t442;
t68 = t265 * t125 - t127 * t262;
t250 = -t347 - pkin(4);
t313 = t266 * t334;
t312 = t432 - t98;
t207 = -pkin(2) * t340 + t251 * t421;
t307 = -t166 * t97 + t296 * t98;
t306 = -t202 * t95 + t405;
t305 = -t249 * t95 + t405;
t304 = t262 * t42 + t400;
t303 = t262 * t60 + t265 * t59;
t299 = qJ(6) * t114 - qJD(6) * t180;
t201 = -pkin(4) - t207;
t297 = qJ(6) * t77 + t324;
t295 = t338 - t388;
t294 = -t180 * t355 - t387;
t293 = -t238 * t211 - t131;
t287 = t291 * qJD(2);
t283 = -qJD(5) * t303 - t9 * t262 - t7;
t280 = qJ(6) * t76 + t9;
t1 = -qJD(6) * t151 + t280 + t423;
t3 = -qJD(6) * t149 - t297;
t2 = t3 * t265;
t282 = -qJD(5) * t304 - t1 * t262 - t31 * t448 - t42 * t449 + t2;
t47 = qJD(4) * t127 + t263 * t123 - t421 * t270;
t269 = t262 * t446 - t296 * t354;
t252 = -pkin(4) - t416;
t237 = pkin(10) * t265 + t258;
t236 = t415 * t262;
t234 = t250 - t416;
t223 = t249 * t265 + t258;
t222 = t362 * t262;
t191 = t201 - t416;
t190 = t254 + t419;
t187 = t202 * t265 + t258;
t186 = t363 * t262;
t153 = -t211 ^ 2 + t212 ^ 2;
t148 = t149 ^ 2;
t140 = t212 * t259 - t274;
t139 = -t211 * t259 - t173;
t136 = -qJD(3) * t189 + t308;
t89 = pkin(5) * t371 + t126;
t83 = -t148 + t425;
t61 = -qJ(6) * t371 + t69;
t54 = pkin(5) * t179 - t180 * t258 + t68;
t51 = t269 + t383;
t50 = -t76 + t386;
t38 = t115 * t445 + t403;
t35 = t385 * t445 - t75;
t34 = t149 * t453 - t75;
t20 = pkin(5) * t295 + t47;
t19 = t149 * t295 + t371 * t77;
t18 = t151 * t294 - t370 * t76;
t13 = -qJD(5) * t69 + t331;
t12 = -t127 * t355 + t350;
t11 = -t115 * t149 - t179 * t77 - t295 * t445 - t371 * t95;
t10 = t115 * t151 - t179 * t76 + t294 * t445 + t370 * t95;
t6 = -qJ(6) * t338 + (-qJD(5) * t127 + t299) * t262 + t350;
t5 = (t149 * t265 + t151 * t262) * t114 + (t73 - t75 + (-t151 * t265 + t385) * qJD(5)) * t180;
t4 = pkin(5) * t115 + t299 * t265 + (-t124 + (qJ(6) * t180 - t125) * t262) * qJD(5) + t331;
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t313, t359 * t442, t364, -0.2e1 * t313, -t365, 0, -pkin(7) * t364 + t264 * t325, pkin(7) * t365 + t266 * t325, 0, 0, -t173 * t225 - t212 * t275, t173 * t291 - t225 * t274 + t259 * (-t211 * t291 - t212 * t225) -t275 * t259, -t211 * t277 + t274 * t291, -t277 * t259, 0, -t211 * t256 + t254 * t287 + (t225 * t443 + t136) * t259, -t135 * t259 - t253 * t173 + t212 * t256 + t225 * t246 - t238 * t275, t135 * t211 - t189 * t274 - t131 * t291 - t175 * t277 - t136 * t212 + t188 * t173 - t132 * t225 + t174 * (qJD(3) * t291 + t287) t131 * t189 + t132 * t188 + t135 * t175 + t136 * t174 + t256 * t443, -t296 * t114 + t180 * t271, t114 * t166 - t115 * t296 - t179 * t271 - t180 * t95, -t114 * t329, t115 * t166 + t403, -t115 * t329, 0, t185 * t115 + t155 * t179 + t170 * t166 + t193 * t95 - t329 * t47, -t185 * t114 + t155 * t180 + t170 * t296 + t193 * t271 - t329 * t46, t97 * t114 - t98 * t115 + t126 * t271 - t127 * t95 - t46 * t166 + t179 * t281 + t25 * t180 + t296 * t47, -t127 * t281 + t155 * t193 + t170 * t185 + t46 * t98 - t47 * t97 + t409, t18, t5, t10, t19, t11, t38, t115 * t59 + t126 * t77 + t13 * t445 + t149 * t47 + t179 * t9 + t180 * t413 - t388 * t93 + t68 * t95, -t115 * t60 - t12 * t445 - t126 * t76 + t151 * t47 + t179 * t324 - t180 * t332 - t93 * t387 - t69 * t95, -t12 * t149 - t13 * t151 + t68 * t76 - t69 * t77 + t303 * t114 + (-qJD(5) * t430 + t262 * t324 - t265 * t9) * t180, t12 * t60 + t13 * t59 - t324 * t69 + t47 * t93 + t68 * t9 + t409, t18, t5, t10, t19, t11, t38, t1 * t179 + t115 * t31 + t149 * t20 + t180 * t414 - t388 * t78 + t4 * t445 + t54 * t95 + t77 * t89, -t115 * t42 + t151 * t20 - t179 * t3 - t180 * t333 - t78 * t387 - t445 * t6 - t61 * t95 - t76 * t89, -t149 * t6 - t151 * t4 + t54 * t76 - t61 * t77 + t304 * t114 + (-t1 * t265 - t262 * t3 + (t262 * t31 - t265 * t42) * qJD(5)) * t180, t1 * t54 + t17 * t89 + t20 * t78 + t3 * t61 + t31 * t4 + t42 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t343, t359 * t268, 0, t343, 0, 0, t268 * pkin(1) * t264, pkin(1) * t366, 0, 0, -t369, t153, t139, t369, t140, 0, t211 * t254 - t181 * t259 - t368 + (-t259 * t346 - t175) * qJD(3) + t309, t182 * t259 + (-t212 * t358 - t259 * t337) * pkin(2) + t293, t173 * t348 - t274 * t346 + (pkin(2) * t335 + t175 + t181) * t212 + (pkin(2) * t337 + t174 - t182) * t211, -t174 * t181 - t175 * t182 + (-t238 * t358 + t422 * t132 + t420 * t131 + (-t174 * t420 + t175 * t422) * qJD(3)) * pkin(2), t447, t82, t79, -t447, t80, 0, -t367 - t190 * t166 + (-t98 - t361) * qJD(4) + t326 - t361 * t259, -t190 * t296 + t329 * t433 + t279, t166 * t433 - t207 * t271 - t208 * t95 + t296 * t361 + t307, -t185 * t190 - t207 * t25 - t208 * t281 - t361 * t97 - t433 * t98, t451, t455, t450, t35, t454, -t436, t201 * t77 + t306 * t262 + t361 * t149 + (-t171 * t262 - t202 * t354 - t64) * t445 + t298, -t201 * t76 + t306 * t265 + t361 * t151 + (t202 * t355 + t437) * t445 + t317, t149 * t65 + t151 * t64 + (-t149 * t171 - t202 * t77 + (t151 * t202 - t59) * qJD(5)) * t265 + (t151 * t171 - t202 * t76 - t9 + (t149 * t202 - t60) * qJD(5)) * t262 + t351, t171 * t430 + t201 * t25 + t202 * t283 + t361 * t93 - t59 * t64 - t60 * t65, t451, t455, t450, t35, t454, -t436, t149 * t394 + t186 * t95 + t191 * t77 + t397 * t445 + t286, t151 * t394 - t187 * t95 - t191 * t76 - t398 * t445 + t290, -t149 * t398 - t151 * t397 + t186 * t76 - t187 * t77 + t282, t1 * t186 + t17 * t191 + t187 * t3 + t31 * t397 + t394 * t78 + t398 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t369, t153, t139, t369, t140, 0, t175 * t259 + t132 - t368, t174 * t259 + t293, 0, 0, t447, t82, t79, -t447, t80, 0, -t147 * t336 - t166 * t419 + t104 * t329 + (-qJD(4) * t137 - t329 * t411 - t102) * t263 + t326, t105 * t329 + (-t212 * t296 - t329 * t336) * pkin(3) + t279, -t271 * t347 - t418 * t95 + t307 + t311 * t296 + (t105 - t318) * t166, t97 * t104 - t98 * t105 + (-t421 * t25 - t185 * t212 - t281 * t263 + (-t263 * t97 + t421 * t98) * qJD(4)) * pkin(3), t451, t455, t450, t35, t454, -t436, t250 * t77 + t305 * t262 + t311 * t149 + (-t249 * t354 - t262 * t318 - t62) * t445 + t298, -t250 * t76 + t305 * t265 + t311 * t151 + (t249 * t355 + t438) * t445 + t317, t63 * t149 + t62 * t151 + (-t149 * t318 - t249 * t77 + (t151 * t249 - t59) * qJD(5)) * t265 + (t151 * t318 - t249 * t76 - t9 + (t149 * t249 - t60) * qJD(5)) * t262 + t351, -t93 * t104 + t25 * t250 - t59 * t62 - t60 * t63 + (t263 * t93 + t421 * t430) * t411 + t283 * t249, t451, t455, t450, t35, t454, -t436, t149 * t389 + t222 * t95 + t234 * t77 + t392 * t445 + t286, t151 * t389 - t223 * t95 - t234 * t76 - t393 * t445 + t290, -t149 * t393 - t151 * t392 + t222 * t76 - t223 * t77 + t282, t1 * t222 + t17 * t234 + t223 * t3 + t31 * t392 + t389 * t78 + t393 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t447, t82, t79, -t447, t80, 0, t259 * t98 - t327 - t434, t329 * t97 + t279, 0, 0, t451, t455, t450, t34, t454, -t436, -pkin(4) * t77 - pkin(10) * t395 - t149 * t98 - t445 * t66 + t449 * t93 + t298, t93 * t448 + pkin(4) * t76 - t151 * t98 + t445 * t67 + (t355 * t445 - t92) * pkin(10) + t317, t149 * t67 + t151 * t66 - t7 + (-t407 + (-t77 + t356) * pkin(10)) * t265 + ((qJD(5) * t149 - t76) * pkin(10) + t439) * t262, -pkin(4) * t25 + pkin(10) * t283 - t59 * t66 - t60 * t67 - t93 * t98, t451, t455, t450, t34, t454, -t436, t149 * t312 + t236 * t95 + t252 * t77 + t390 * t445 + t286, t151 * t312 - t237 * t95 - t252 * t76 - t391 * t445 + t290, t236 * t76 - t237 * t77 + t2 - t445 * t400 - t390 * t151 - t391 * t149 + (-t1 - t408) * t262, t1 * t236 + t17 * t252 + t237 * t3 + t31 * t390 + t312 * t78 + t391 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, t83, t50, -t384, t51, t95, -t151 * t93 - t439, t149 * t93 + t324 + t407, 0, 0, t384, t83, t50, -t384, t51, t95, 0.2e1 * t423 + t408 + (-t328 - t78) * t151 + t280, -pkin(5) * t425 + t445 * t41 + (qJD(6) + t78) * t149 + t297, pkin(5) * t76 - t149 * t412, t412 * t42 + (-t151 * t78 + t1) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269 + t383, -t76 - t386, -t148 - t425, t42 * t149 + t31 * t151 + t17;];
tauc_reg  = t8;
