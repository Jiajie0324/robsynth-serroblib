% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:58:21
% EndTime: 2019-03-10 00:58:47
% DurationCPUTime: 13.77s
% Computational Cost: add. (24862->769), mult. (58337->918), div. (0->0), fcn. (43662->14), ass. (0->378)
t321 = cos(qJ(5));
t454 = qJD(5) * t321;
t319 = sin(qJ(2));
t322 = cos(qJ(2));
t537 = sin(qJ(3));
t539 = cos(qJ(3));
t362 = t319 * t537 - t322 * t539;
t227 = t362 * qJD(1);
t242 = t319 * t539 + t322 * t537;
t228 = t242 * qJD(1);
t318 = sin(qJ(4));
t538 = cos(qJ(4));
t176 = t227 * t538 + t228 * t318;
t572 = t176 * t321;
t582 = t454 + t572;
t428 = t539 * qJD(3);
t360 = qJD(2) * t539 + t428;
t317 = sin(qJ(5));
t371 = -t227 * t318 + t228 * t538;
t311 = qJD(2) + qJD(3);
t418 = qJD(4) + t311;
t161 = t317 * t371 - t321 * t418;
t163 = t317 * t418 + t321 * t371;
t567 = qJD(5) + t176;
t578 = t567 * t317;
t310 = qJDD(2) + qJDD(3);
t407 = qJDD(4) + t310;
t455 = qJD(5) * t317;
t354 = t362 * qJDD(1);
t426 = t537 * qJD(3);
t359 = qJD(2) * t537 + t426;
t420 = t539 * qJDD(1);
t458 = qJD(1) * t319;
t419 = t537 * qJDD(1);
t566 = -qJD(1) * t360 - t419;
t160 = -t319 * t420 + t322 * t566 + t359 * t458;
t570 = t311 * t242;
t333 = t570 * qJD(1);
t430 = qJD(4) * t538;
t457 = qJD(4) * t318;
t550 = -t160 * t538 - t227 * t430 - t228 * t457 - t318 * t333;
t328 = -t318 * t354 + t550;
t568 = qJD(5) * t418 + t328;
t68 = -t317 * t407 - t321 * t568 + t371 * t455;
t69 = t317 * t568 - t321 * t407 + t371 * t454;
t581 = -t161 * t582 - t163 * t578 - t317 * t69 - t68 * t321;
t330 = -t354 - t333;
t416 = t160 * t318 + t330 * t538;
t97 = qJD(4) * t371 - t416;
t96 = qJDD(5) + t97;
t580 = t161 * t371 + t321 * t96 - t567 * t578;
t573 = t176 * t317;
t579 = pkin(5) * t573;
t324 = -pkin(8) - pkin(7);
t272 = t324 * t322;
t252 = qJD(1) * t272;
t229 = t537 * t252;
t271 = t324 * t319;
t250 = qJD(1) * t271;
t519 = qJD(2) * pkin(2);
t236 = t250 + t519;
t183 = t236 * t539 + t229;
t221 = t228 * pkin(9);
t157 = -t221 + t183;
t148 = pkin(3) * t311 + t157;
t233 = t539 * t252;
t184 = t236 * t537 - t233;
t524 = t227 * pkin(9);
t158 = t184 - t524;
t154 = t538 * t158;
t107 = t148 * t318 + t154;
t104 = pkin(10) * t418 + t107;
t309 = t322 * pkin(2);
t300 = t309 + pkin(1);
t270 = t300 * qJD(1);
t199 = pkin(3) * t227 - t270;
t116 = pkin(4) * t176 - pkin(10) * t371 + t199;
t62 = t104 * t321 + t116 * t317;
t47 = -qJ(6) * t161 + t62;
t452 = qJD(1) * qJD(2);
t424 = t322 * t452;
t451 = t319 * qJDD(1);
t197 = qJDD(2) * pkin(2) - t324 * (-t424 - t451);
t425 = t319 * t452;
t450 = t322 * qJDD(1);
t198 = t324 * (-t425 + t450);
t125 = -qJD(3) * t184 + t197 * t539 + t198 * t537;
t85 = pkin(3) * t310 + pkin(9) * t160 + t125;
t124 = t197 * t537 - t198 * t539 + t236 * t428 + t252 * t426;
t95 = pkin(9) * t330 + t124;
t410 = t148 * t457 + t158 * t430 + t318 * t95 - t538 * t85;
t23 = -pkin(4) * t407 + t410;
t17 = pkin(5) * t69 + qJDD(6) + t23;
t153 = t318 * t158;
t106 = t148 * t538 - t153;
t103 = -pkin(4) * t418 - t106;
t417 = pkin(5) * t161 + qJD(6);
t82 = t103 + t417;
t562 = t17 * t317 + t454 * t82;
t577 = t371 * t47 + t572 * t82 + t562;
t61 = -t104 * t317 + t116 * t321;
t46 = -qJ(6) * t163 + t61;
t40 = pkin(5) * t567 + t46;
t315 = qJ(2) + qJ(3);
t308 = qJ(4) + t315;
t295 = cos(t308);
t528 = g(3) * t295;
t432 = -t17 - t528;
t294 = sin(t308);
t323 = cos(qJ(1));
t478 = t294 * t323;
t320 = sin(qJ(1));
t479 = t294 * t320;
t569 = g(1) * t478 + g(2) * t479;
t463 = t569 * t321;
t80 = t82 * t455;
t340 = t321 * t432 - t371 * t40 + t573 * t82 + t463 + t80;
t551 = -qJ(6) * t573 + qJD(6) * t321;
t65 = t68 * t317;
t575 = t163 * t582 - t65;
t574 = -t163 * t371 + t317 * t96 + t567 * t582;
t500 = t103 * t176;
t571 = t176 * t371;
t89 = -t176 ^ 2 + t371 ^ 2;
t138 = pkin(4) * t371 + pkin(10) * t176;
t24 = t148 * t430 - t158 * t457 + t318 * t85 + t538 * t95;
t288 = g(3) * t294;
t476 = t295 * t323;
t477 = t295 * t320;
t441 = g(1) * t476 + g(2) * t477 + t288;
t352 = t176 * t199 - t24 + t441;
t307 = t321 * qJ(6);
t390 = pkin(5) * t371 + t176 * t307;
t76 = t176 * t418 + t328;
t406 = pkin(3) * t430;
t111 = t157 * t538 - t153;
t536 = pkin(3) * t228;
t126 = t138 + t536;
t71 = t111 * t321 + t126 * t317;
t561 = -t321 * t406 + t71;
t299 = pkin(2) * t539 + pkin(3);
t435 = t537 * t318;
t181 = t299 * t430 + (-qJD(4) * t435 + (t538 * t539 - t435) * qJD(3)) * pkin(2);
t193 = t250 * t539 + t229;
t166 = -t221 + t193;
t192 = -t250 * t537 + t233;
t363 = t192 + t524;
t118 = t166 * t538 + t318 * t363;
t301 = pkin(2) * t458;
t119 = t126 + t301;
t73 = t118 * t321 + t119 * t317;
t560 = -t181 * t321 + t73;
t559 = t567 * t371;
t557 = t183 * t311;
t110 = t157 * t318 + t154;
t396 = pkin(3) * t457 - t110;
t202 = t271 * t539 + t272 * t537;
t171 = -pkin(9) * t242 + t202;
t203 = t271 * t537 - t272 * t539;
t172 = -pkin(9) * t362 + t203;
t135 = t171 * t318 + t172 * t538;
t132 = t321 * t135;
t346 = t538 * t362;
t190 = t242 * t318 + t346;
t355 = t318 * t362;
t191 = t242 * t538 - t355;
t207 = pkin(3) * t362 - t300;
t133 = pkin(4) * t190 - pkin(10) * t191 + t207;
t79 = t133 * t317 + t132;
t556 = t181 - t118;
t404 = t537 * t538;
t464 = -t166 * t318 + t538 * t363 + t299 * t457 + (qJD(4) * t404 + (t318 * t539 + t404) * qJD(3)) * pkin(2);
t523 = t321 * pkin(5);
t297 = pkin(4) + t523;
t316 = -qJ(6) - pkin(10);
t555 = -t294 * t316 + t295 * t297;
t553 = pkin(4) * t295 + pkin(10) * t294;
t302 = pkin(5) * t455;
t552 = t302 + t579;
t549 = -t317 * t61 + t321 * t62;
t392 = g(1) * t323 + g(2) * t320;
t467 = t321 * t323;
t471 = t317 * t320;
t211 = t295 * t471 + t467;
t469 = t320 * t321;
t470 = t317 * t323;
t213 = -t295 * t470 + t469;
t526 = g(3) * t317;
t548 = -g(1) * t213 + g(2) * t211 + t294 * t526;
t545 = t103 * t455 - t371 * t61 + t463;
t344 = -t199 * t371 - t410 - t528 + t569;
t77 = t311 * t371 + t416;
t542 = t103 * t454 + t23 * t317 + t371 * t62;
t541 = t163 ^ 2;
t540 = pkin(5) * t96;
t305 = sin(t315);
t535 = pkin(3) * t305;
t534 = pkin(3) * t318;
t306 = cos(t315);
t293 = pkin(3) * t306;
t461 = t293 + t309;
t249 = pkin(1) + t461;
t235 = t323 * t249;
t530 = g(2) * t235;
t527 = g(3) * t306;
t525 = g(3) * t322;
t22 = pkin(10) * t407 + t24;
t289 = pkin(2) * t425;
t501 = qJDD(1) * pkin(1);
t29 = -pkin(2) * t450 - pkin(3) * t330 + t97 * pkin(4) - pkin(10) * t328 + t289 - t501;
t5 = -t104 * t455 + t116 * t454 + t22 * t321 + t29 * t317;
t4 = t5 * t321;
t522 = -t46 + t40;
t521 = qJ(6) * t68;
t520 = qJ(6) * t69;
t518 = t567 * t47;
t517 = t567 * t61;
t516 = t567 * t62;
t514 = t321 * t40;
t67 = t69 * t321;
t224 = pkin(2) * t404 + t299 * t318;
t217 = pkin(10) + t224;
t466 = -qJ(6) - t217;
t414 = qJD(5) * t466;
t512 = t317 * t414 + t551 - t560;
t72 = -t118 * t317 + t119 * t321;
t511 = (-qJD(6) - t181) * t317 + t321 * t414 - t390 - t72;
t508 = t552 + t464;
t296 = pkin(10) + t534;
t465 = -qJ(6) - t296;
t413 = qJD(5) * t465;
t507 = t317 * t413 + t551 - t561;
t70 = -t111 * t317 + t126 * t321;
t506 = (-t406 - qJD(6)) * t317 + t321 * t413 - t390 - t70;
t421 = qJD(5) * t316;
t75 = t106 * t321 + t138 * t317;
t505 = t317 * t421 + t551 - t75;
t74 = -t106 * t317 + t138 * t321;
t504 = -t317 * qJD(6) + t321 * t421 - t390 - t74;
t503 = t552 + t396;
t502 = pkin(7) * qJDD(1);
t334 = t311 * t362;
t120 = qJD(4) * t346 + t242 * t457 + t318 * t570 + t334 * t538;
t499 = t120 * t317;
t498 = t120 * t321;
t497 = t161 * t567;
t496 = t161 * t317;
t495 = t163 * t161;
t494 = t163 * t567;
t483 = t191 * t317;
t482 = t191 * t321;
t481 = t228 * t227;
t475 = t305 * t320;
t474 = t305 * t323;
t473 = t306 * t320;
t472 = t306 * t323;
t313 = t319 ^ 2;
t314 = t322 ^ 2;
t460 = t313 - t314;
t459 = t313 + t314;
t456 = qJD(5) * t163;
t438 = qJD(2) * t324;
t251 = t319 * t438;
t253 = t322 * t438;
t146 = t251 * t539 + t253 * t537 + t271 * t428 + t272 * t426;
t131 = -pkin(9) * t570 + t146;
t388 = -t251 * t537 + t253 * t539;
t329 = pkin(9) * t334 - t271 * t426 + t272 * t428 + t388;
t50 = t131 * t538 + t171 * t430 - t172 * t457 + t318 * t329;
t121 = -qJD(4) * t355 + t242 * t430 - t318 * t334 + t538 * t570;
t303 = t319 * t519;
t180 = pkin(3) * t570 + t303;
t59 = pkin(4) * t121 + pkin(10) * t120 + t180;
t449 = t133 * t454 + t317 * t59 + t321 * t50;
t447 = t538 * pkin(3);
t446 = pkin(10) * qJD(5) * t567;
t326 = qJD(1) ^ 2;
t442 = t319 * t326 * t322;
t440 = t293 + t553;
t437 = t160 * t539;
t433 = t191 * t454;
t431 = -t23 - t528;
t312 = -pkin(9) + t324;
t423 = pkin(5) * t317 - t312;
t422 = -t317 * t50 + t321 * t59;
t78 = t133 * t321 - t135 * t317;
t134 = -t171 * t538 + t172 * t318;
t3 = -qJD(6) * t161 + t5 - t520;
t409 = t3 * t321 - t441;
t408 = t4 - t441;
t298 = -t447 - pkin(4);
t403 = t319 * t424;
t402 = -pkin(4) * t479 + pkin(10) * t477;
t401 = -pkin(4) * t478 + pkin(10) * t476;
t86 = t107 - t579;
t400 = -t86 + t302;
t399 = -g(1) * t479 + g(2) * t478;
t394 = -g(1) * t211 - g(2) * t213;
t212 = -t295 * t469 + t470;
t214 = t295 * t467 + t471;
t393 = -g(1) * t212 - g(2) * t214;
t391 = g(1) * t320 - g(2) * t323;
t389 = t293 + t555;
t223 = -pkin(2) * t435 + t299 * t538;
t387 = -pkin(10) * t96 + t500;
t386 = t317 * t47 + t514;
t385 = t317 * t62 + t321 * t61;
t382 = -t217 * t96 + t500;
t381 = -t296 * t96 + t500;
t379 = -t106 * t176 + t107 * t371;
t377 = t294 * t297 + t295 * t316;
t376 = qJ(6) * t120 - qJD(6) * t191;
t216 = -pkin(4) - t223;
t375 = -t572 * t61 - t573 * t62 + t408;
t374 = t392 * t294;
t373 = t392 * t305;
t372 = -0.2e1 * pkin(1) * t452 - pkin(7) * qJDD(2);
t370 = t433 - t499;
t369 = -t191 * t455 - t498;
t368 = t377 * t320;
t367 = t377 * t323;
t261 = t295 * t526;
t356 = -t317 * t374 + t261;
t353 = g(1) * t214 - g(2) * t212 + t288 * t321 - t5;
t325 = qJD(2) ^ 2;
t351 = -pkin(7) * t325 + t391 + 0.2e1 * t501;
t350 = pkin(1) * t326 + t392 - t502;
t348 = g(1) * t472 + g(2) * t473 + g(3) * t305 - t227 * t270 - t124;
t345 = t321 * t431 + t545;
t6 = -qJD(5) * t62 - t22 * t317 + t29 * t321;
t343 = -qJD(5) * t385 - t6 * t317 + t4;
t51 = qJD(4) * t135 + t131 * t318 - t329 * t538;
t342 = -g(1) * t401 - g(2) * t402;
t341 = t356 + t542;
t1 = -qJD(6) * t163 + t521 + t540 + t6;
t339 = -qJD(5) * t386 - t1 * t317 - t40 * t572 - t47 * t573 + t409;
t338 = t356 + t577;
t337 = t6 + t548;
t332 = g(1) * t474 + g(2) * t475 + t270 * t228 + t125 - t527;
t269 = pkin(10) * t321 + t307;
t268 = t316 * t317;
t256 = t298 - t523;
t255 = -pkin(2) * t319 - t535;
t240 = t323 * t255;
t239 = t320 * t255;
t238 = t296 * t321 + t307;
t237 = t465 * t317;
t222 = -qJDD(1) * t300 + t289;
t205 = t216 - t523;
t204 = t301 + t536;
t201 = t217 * t321 + t307;
t200 = t466 * t317;
t165 = -t227 ^ 2 + t228 ^ 2;
t159 = t161 ^ 2;
t147 = -qJD(3) * t203 + t388;
t143 = pkin(3) * t333 + qJDD(1) * t207 + t289;
t142 = t228 * t311 + t330;
t141 = t227 * t311 - t160;
t102 = pkin(5) * t483 + t134;
t92 = -t159 + t541;
t63 = -qJ(6) * t483 + t79;
t56 = pkin(5) * t190 - t191 * t307 + t78;
t43 = -t69 + t494;
t42 = -t68 + t497;
t41 = t121 * t567 + t190 * t96;
t38 = t496 * t567 - t67;
t37 = t161 * t578 - t67;
t26 = pkin(5) * t370 + t51;
t19 = t161 * t370 + t483 * t69;
t18 = t163 * t369 - t482 * t68;
t15 = -qJD(5) * t79 + t422;
t14 = -t135 * t455 + t449;
t11 = -t121 * t161 - t190 * t69 - t370 * t567 - t483 * t96;
t10 = t121 * t163 - t190 * t68 + t369 * t567 + t482 * t96;
t9 = -qJ(6) * t433 + (-qJD(5) * t135 + t376) * t317 + t449;
t8 = (t161 * t321 + t163 * t317) * t120 + (t65 - t67 + (-t163 * t321 + t496) * qJD(5)) * t191;
t7 = pkin(5) * t121 + t376 * t321 + (-t132 + (qJ(6) * t191 - t133) * t317) * qJD(5) + t422;
t2 = [0, 0, 0, 0, 0, qJDD(1), t391, t392, 0, 0, qJDD(1) * t313 + 0.2e1 * t403, 0.2e1 * t319 * t450 - 0.2e1 * t452 * t460, qJDD(2) * t319 + t322 * t325, qJDD(1) * t314 - 0.2e1 * t403, qJDD(2) * t322 - t319 * t325, 0, t319 * t372 + t322 * t351, -t319 * t351 + t322 * t372, 0.2e1 * t459 * t502 - t392, -g(1) * (-pkin(1) * t320 + pkin(7) * t323) - g(2) * (pkin(1) * t323 + pkin(7) * t320) + (pkin(7) ^ 2 * t459 + pkin(1) ^ 2) * qJDD(1), -t160 * t242 - t228 * t334 (-t360 * t227 + t242 * (-qJD(1) * t359 + t420) - t437 - t228 * t359) * t322 + (t160 * t537 + t227 * t359 - t228 * t360 + t242 * t566) * t319, t242 * t310 - t311 * t334, t227 * t570 - t330 * t362, -t310 * t362 - t311 * t570, 0, g(1) * t473 - g(2) * t472 + t147 * t311 + t202 * t310 + t222 * t362 + t227 * t303 - t270 * t570 + t300 * t330, -g(1) * t475 + g(2) * t474 - t146 * t311 + t160 * t300 - t203 * t310 + t222 * t242 + t228 * t303 + t270 * t334, -t125 * t242 - t146 * t227 - t147 * t228 + t202 * t160 - t184 * t570 + t203 * t330 - t392 + (-t124 + t557) * t362, t124 * t203 + t184 * t146 + t125 * t202 + t183 * t147 - t222 * t300 - t270 * t303 - g(1) * (-t300 * t320 - t323 * t324) - g(2) * (t300 * t323 - t320 * t324) -t371 * t120 + (t318 * (-t319 * t419 + t322 * t420) + t550) * t191, t120 * t176 - t121 * t371 - t190 * t328 - t191 * t97, -t120 * t418 + t191 * t407, t121 * t176 + t190 * t97, -t121 * t418 - t190 * t407, 0, t199 * t121 - t134 * t407 + t143 * t190 + t180 * t176 + t207 * t97 + t295 * t391 - t418 * t51, -t199 * t120 - t135 * t407 + t143 * t191 + t180 * t371 + t207 * t328 - t418 * t50 + t399, t106 * t120 - t107 * t121 + t134 * t328 - t135 * t97 - t50 * t176 - t24 * t190 + t191 * t410 + t371 * t51 - t392, t24 * t135 + t107 * t50 + t410 * t134 - t106 * t51 + t143 * t207 + t199 * t180 - g(1) * (-t249 * t320 - t312 * t323) - g(2) * (-t312 * t320 + t235) t18, t8, t10, t19, t11, t41, t103 * t370 + t121 * t61 + t134 * t69 + t15 * t567 + t161 * t51 + t190 * t6 + t23 * t483 + t78 * t96 + t393, t103 * t369 - t121 * t62 - t134 * t68 - t14 * t567 + t163 * t51 - t190 * t5 + t23 * t482 - t79 * t96 + t394, -t14 * t161 - t15 * t163 + t68 * t78 - t69 * t79 + t385 * t120 + (-qJD(5) * t549 - t317 * t5 - t321 * t6) * t191 - t399, -t530 + t103 * t51 + t23 * t134 + t62 * t14 + t61 * t15 + t5 * t79 + t6 * t78 + (g(1) * t312 - g(2) * t553) * t323 + (-g(1) * (-t249 - t553) + g(2) * t312) * t320, t18, t8, t10, t19, t11, t41, t1 * t190 + t102 * t69 + t121 * t40 + t161 * t26 + t191 * t562 - t499 * t82 + t56 * t96 + t567 * t7 + t393, -t82 * t498 - t102 * t68 - t121 * t47 + t163 * t26 - t567 * t9 - t190 * t3 - t63 * t96 + (t17 * t321 - t80) * t191 + t394, -t161 * t9 - t163 * t7 + t56 * t68 - t63 * t69 + t386 * t120 + (-t1 * t321 - t3 * t317 + (t317 * t40 - t321 * t47) * qJD(5)) * t191 - t399, -t530 + t1 * t56 + t17 * t102 + t82 * t26 + t3 * t63 + t40 * t7 + t47 * t9 + (-g(1) * t423 - g(2) * t555) * t323 + (-g(1) * (-t249 - t555) - g(2) * t423) * t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t442, t460 * t326, t451, t442, t450, qJDD(2), t319 * t350 - t525, g(3) * t319 + t322 * t350, 0, 0, t481, t165, t141, -t481, t142, t310, -t192 * t311 + (-t227 * t458 + t310 * t539 - t311 * t426) * pkin(2) + t332, t193 * t311 + (-t228 * t458 - t310 * t537 - t311 * t428) * pkin(2) + t348 (t184 + t192) * t228 - (t183 - t193) * t227 + (-t227 * t428 + t228 * t426 + t330 * t537 + t437) * pkin(2), -t183 * t192 - t184 * t193 + (t539 * t125 + t124 * t537 - t525 + (-t183 * t537 + t184 * t539) * qJD(3) + (qJD(1) * t270 + t392) * t319) * pkin(2), t571, t89, t76, -t571, t77, t407, -t204 * t176 + t223 * t407 - t418 * t464 + t344, -t204 * t371 - t224 * t407 - t418 * t556 + t352, -t176 * t556 - t223 * t328 - t224 * t97 + t371 * t464 + t379, -g(3) * t461 - t106 * t464 + t107 * t556 - t199 * t204 - t223 * t410 + t24 * t224 - t255 * t392, t575, t581, t574, t38, t580, -t559, t216 * t69 + t382 * t317 + t464 * t161 + (-t317 * t181 - t217 * t454 - t72) * t567 + t345, -t216 * t68 + t382 * t321 + t464 * t163 + (t217 * t455 + t560) * t567 + t341, t161 * t73 + t163 * t72 + (-t161 * t181 - t217 * t69 + (t163 * t217 - t61) * qJD(5)) * t321 + (t163 * t181 - t217 * t68 - t6 + (t161 * t217 - t62) * qJD(5)) * t317 + t375, t23 * t216 - t62 * t73 - t61 * t72 - g(1) * (t240 + t401) - g(2) * (t239 + t402) - g(3) * (t309 + t440) + t549 * t181 + t464 * t103 + t343 * t217, t575, t581, t574, t38, t580, -t559, t161 * t508 + t200 * t96 + t205 * t69 + t511 * t567 + t340, t163 * t508 - t201 * t96 - t205 * t68 - t512 * t567 + t338, -t161 * t512 - t163 * t511 + t200 * t68 - t201 * t69 + t339, t3 * t201 + t1 * t200 + t17 * t205 - g(1) * (t240 - t367) - g(2) * (t239 - t368) - g(3) * (t309 + t389) + t508 * t82 + t512 * t47 + t511 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, t165, t141, -t481, t142, t310, t184 * t311 + t332, t348 + t557, 0, 0, t571, t89, t76, -t571, t77, t407, t110 * t418 + (-t176 * t228 + t407 * t538 - t418 * t457) * pkin(3) + t344, t111 * t418 + (-t228 * t371 - t318 * t407 - t418 * t430) * pkin(3) + t352, -t328 * t447 - t97 * t534 + t379 + t396 * t371 + (t111 - t406) * t176, t106 * t110 - t107 * t111 + (-t538 * t410 - t527 - t199 * t228 + t24 * t318 + t373 + (-t106 * t318 + t107 * t538) * qJD(4)) * pkin(3), t575, t581, t574, t38, t580, -t559, t298 * t69 + t381 * t317 + t396 * t161 + (-t296 * t454 - t317 * t406 - t70) * t567 + t345, -t298 * t68 + t381 * t321 + t396 * t163 + (t296 * t455 + t561) * t567 + t341, t71 * t161 + t70 * t163 + (-t161 * t406 - t296 * t69 + (t163 * t296 - t61) * qJD(5)) * t321 + (t163 * t406 - t296 * t68 - t6 + (t161 * t296 - t62) * qJD(5)) * t317 + t375, t23 * t298 - t62 * t71 - t61 * t70 - t103 * t110 - g(3) * t440 + (t373 + (t103 * t318 + t538 * t549) * qJD(4)) * pkin(3) + t343 * t296 + t342, t575, t581, t574, t38, t580, -t559, t161 * t503 + t237 * t96 + t256 * t69 + t506 * t567 + t340, t163 * t503 - t238 * t96 - t256 * t68 - t507 * t567 + t338, -t161 * t507 - t163 * t506 + t237 * t68 - t238 * t69 + t339, -g(3) * t389 + t1 * t237 + t17 * t256 + t3 * t238 + t40 * t506 + t47 * t507 + t503 * t82 + t392 * (t377 + t535); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t571, t89, t76, -t571, t77, t407, t107 * t418 + t344, t106 * t418 + t352, 0, 0, t575, t581, t574, t37, t580, -t559, -pkin(4) * t69 - t107 * t161 - t567 * t74 + t387 * t317 + (t431 - t446) * t321 + t545, pkin(4) * t68 - t107 * t163 + t567 * t75 + t261 + t387 * t321 + (-t374 + t446) * t317 + t542, t161 * t75 + t163 * t74 + (-t517 + (-t69 + t456) * pkin(10)) * t321 + (-t6 - t516 + (qJD(5) * t161 - t68) * pkin(10)) * t317 + t408, -t23 * pkin(4) + pkin(10) * t343 - g(3) * t553 - t103 * t107 - t61 * t74 - t62 * t75 + t342, t575, t581, t574, t37, t580, -t559, t161 * t400 + t268 * t96 - t297 * t69 + t504 * t567 + t340, -t163 * t86 - t269 * t96 + t297 * t68 + t261 - t505 * t567 + (pkin(5) * t456 - t374) * t317 + t577, t268 * t68 - t269 * t69 - t567 * t514 - t504 * t163 - t505 * t161 + (-t1 - t518) * t317 + t409, g(1) * t367 + g(2) * t368 - g(3) * t555 + t1 * t268 - t17 * t297 + t3 * t269 + t40 * t504 + t400 * t82 + t47 * t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, t92, t42, -t495, t43, t96, -t103 * t163 + t337 + t516, t103 * t161 + t353 + t517, 0, 0, t495, t92, t42, -t495, t43, t96, 0.2e1 * t540 + t521 + t518 + (-t417 - t82) * t163 + t337, -pkin(5) * t541 + t520 + t567 * t46 + (qJD(6) + t82) * t161 + t353, pkin(5) * t68 - t161 * t522, t522 * t47 + (-t82 * t163 + t1 + t548) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69 + t494, -t68 - t497, -t159 - t541, t161 * t47 + t163 * t40 - t432 - t569;];
tau_reg  = t2;
