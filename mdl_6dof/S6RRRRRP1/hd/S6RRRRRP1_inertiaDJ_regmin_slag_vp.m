% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRP1_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP1_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP1_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP1_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:58:14
% EndTime: 2019-03-10 00:58:20
% DurationCPUTime: 2.35s
% Computational Cost: add. (5579->293), mult. (12108->450), div. (0->0), fcn. (11826->8), ass. (0->153)
t102 = sin(qJ(4));
t103 = sin(qJ(3));
t107 = cos(qJ(3));
t106 = cos(qJ(4));
t154 = qJD(4) * t106;
t156 = t103 * t106;
t178 = ((t102 * t107 + t156) * qJD(3) + t103 * t154) * pkin(2);
t104 = sin(qJ(2));
t174 = pkin(7) + pkin(8);
t139 = qJD(2) * t174;
t74 = t104 * t139;
t108 = cos(qJ(2));
t75 = t108 * t139;
t124 = -t103 * t75 - t107 * t74;
t83 = t174 * t104;
t84 = t174 * t108;
t123 = t103 * t84 + t107 * t83;
t73 = t103 * t108 + t107 * t104;
t43 = -pkin(9) * t73 - t123;
t177 = t43 * qJD(3) + t124;
t101 = sin(qJ(5));
t72 = t103 * t104 - t107 * t108;
t53 = -t102 * t72 + t106 * t73;
t105 = cos(qJ(5));
t97 = qJD(5) * t105;
t140 = t53 * t97;
t115 = t73 * qJD(2);
t110 = -t73 * qJD(3) - t115;
t52 = t102 * t73 + t106 * t72;
t56 = (-qJD(2) - qJD(3)) * t72;
t21 = -t52 * qJD(4) + t102 * t110 + t106 * t56;
t176 = t101 * t21 + t140;
t100 = t105 ^ 2;
t158 = -t101 ^ 2 + t100;
t130 = t158 * qJD(5);
t151 = t108 * qJD(2);
t152 = t104 * qJD(2);
t122 = t103 * t83 - t107 * t84;
t39 = t122 * qJD(3) + t103 * t74 - t107 * t75;
t111 = -t56 * pkin(9) + t39;
t25 = t106 * t111;
t44 = -pkin(9) * t72 - t122;
t34 = t102 * t43 + t106 * t44;
t10 = t34 * qJD(4) - t25 + ((-t103 * t151 - t107 * t152) * pkin(9) + t177) * t102;
t33 = t102 * t44 - t106 * t43;
t28 = t33 * t97;
t172 = t10 * t101 + t28;
t171 = pkin(3) * t106;
t170 = pkin(5) * t105;
t169 = t53 * t21;
t168 = -qJ(6) - pkin(10);
t31 = t105 * t34;
t93 = -pkin(2) * t108 - pkin(1);
t63 = t72 * pkin(3) + t93;
t32 = t52 * pkin(4) - t53 * pkin(10) + t63;
t167 = t101 * t32 + t31;
t155 = qJD(4) * t102;
t91 = pkin(2) * t107 + pkin(3);
t48 = t91 * t155 + t178;
t88 = t102 * t103 * pkin(2);
t64 = -t106 * t91 - pkin(4) + t88;
t166 = t48 * t101 + t64 * t97;
t144 = pkin(3) * t155;
t90 = -pkin(4) - t171;
t165 = t101 * t144 + t90 * t97;
t164 = pkin(2) * qJD(3);
t162 = t101 * t53;
t145 = t107 * t164;
t47 = -t91 * t154 - t106 * t145 + (qJD(3) + qJD(4)) * t88;
t161 = t105 * t47;
t65 = pkin(2) * t156 + t102 * t91 + pkin(10);
t160 = -qJ(6) - t65;
t89 = pkin(3) * t102 + pkin(10);
t159 = -qJ(6) - t89;
t157 = t101 * t105;
t98 = t105 * qJ(6);
t153 = qJD(5) * t101;
t150 = -0.2e1 * pkin(1) * qJD(2);
t22 = t53 * qJD(4) + t102 * t56 - t106 * t110;
t95 = pkin(2) * t152;
t46 = -t110 * pkin(3) + t95;
t15 = t22 * pkin(4) - t21 * pkin(10) + t46;
t109 = -pkin(9) * t115 + t177;
t9 = -t102 * t111 - t106 * t109 - t43 * t154 + t44 * t155;
t149 = t101 * t15 - t105 * t9 + t32 * t97;
t148 = pkin(4) * t153;
t147 = pkin(4) * t97;
t146 = t103 * t164;
t143 = pkin(3) * t154;
t94 = pkin(5) * t153;
t142 = pkin(5) * t97;
t141 = t53 * t153;
t27 = t33 * t153;
t92 = -pkin(4) - t170;
t137 = t101 * t97;
t136 = t101 * t9 + t105 * t15;
t59 = t64 * t153;
t135 = -t105 * t48 + t59;
t134 = qJD(5) * t168;
t133 = -0.4e1 * t53 * t157;
t132 = qJD(5) * t160;
t131 = qJD(5) * t159;
t129 = t105 * t143;
t128 = t10 * t53 + t21 * t33;
t127 = t21 * t52 + t22 * t53;
t126 = t52 * t65 - t53 * t64;
t125 = t52 * t89 - t53 * t90;
t121 = -qJ(6) * t21 - qJD(6) * t53;
t77 = t90 * t153;
t119 = -t105 * t144 + t77;
t118 = -t105 * t21 + t141;
t117 = -t105 * t22 + t52 * t153;
t116 = t93 * t73;
t114 = t21 * t64 - t22 * t65 + t47 * t52 + t48 * t53;
t113 = t21 * t90 - t22 * t89 + (t102 * t53 - t106 * t52) * qJD(4) * pkin(3);
t96 = t105 * qJD(6);
t87 = 0.2e1 * t137;
t82 = pkin(10) * t105 + t98;
t81 = t168 * t101;
t80 = t92 - t171;
t76 = t94 + t144;
t71 = 0.2e1 * t130;
t70 = t105 * t89 + t98;
t69 = t159 * t101;
t67 = -t101 * qJD(6) + t105 * t134;
t66 = t101 * t134 + t96;
t62 = t66 * t105;
t61 = t64 - t170;
t58 = t105 * t65 + t98;
t57 = t160 * t101;
t55 = (-qJD(6) - t143) * t101 + t105 * t131;
t54 = t101 * t131 + t129 + t96;
t51 = t53 ^ 2;
t50 = t54 * t105;
t42 = t94 + t48;
t38 = t123 * qJD(3) - t124;
t37 = (-qJD(6) + t47) * t101 + t105 * t132;
t36 = t101 * t132 - t161 + t96;
t35 = t36 * t105;
t30 = t105 * t32;
t20 = pkin(5) * t162 + t33;
t19 = t101 * t22 + t52 * t97;
t17 = t53 * t130 + t21 * t157;
t16 = -qJ(6) * t162 + t167;
t12 = qJD(5) * t133 + t158 * t21;
t11 = pkin(5) * t52 - t101 * t34 - t53 * t98 + t30;
t6 = t176 * pkin(5) + t102 * t109 + t44 * t154 + t43 * t155 - t25;
t5 = -t167 * qJD(5) + t136;
t4 = t34 * t153 - t149;
t3 = -qJ(6) * t140 + (-qJD(5) * t34 + t121) * t101 + t149;
t2 = t3 * t105;
t1 = pkin(5) * t22 + t121 * t105 + (-t31 + (qJ(6) * t53 - t32) * t101) * qJD(5) + t136;
t7 = [0, 0, 0, 0.2e1 * t104 * t151, 0.2e1 * (-t104 ^ 2 + t108 ^ 2) * qJD(2), 0, 0, 0, t104 * t150, t108 * t150, 0.2e1 * t73 * t56, 0.2e1 * t73 * t110 - 0.2e1 * t56 * t72, 0, 0, 0, 0.2e1 * qJD(3) * t116 + 0.2e1 * (t104 * pkin(2) * t72 + t116) * qJD(2), 0.2e1 * t56 * t93 + 0.2e1 * t73 * t95, 0.2e1 * t169, -0.2e1 * t127, 0, 0, 0, 0.2e1 * t22 * t63 + 0.2e1 * t46 * t52, 0.2e1 * t21 * t63 + 0.2e1 * t46 * t53, 0.2e1 * t100 * t169 - 0.2e1 * t51 * t137, -0.2e1 * t51 * t130 + t21 * t133, 0.2e1 * t127 * t105 - 0.2e1 * t52 * t141, -0.2e1 * t127 * t101 - 0.2e1 * t52 * t140, 0.2e1 * t52 * t22, 0.2e1 * t53 * t28 + 0.2e1 * t30 * t22 + 0.2e1 * t5 * t52 + 0.2e1 * (-t22 * t34 + t128) * t101, 0.2e1 * t105 * t128 - 0.2e1 * t167 * t22 - 0.2e1 * t27 * t53 + 0.2e1 * t4 * t52, 0.2e1 * (-t101 * t16 - t105 * t11) * t21 + 0.2e1 * (-t1 * t105 - t101 * t3 + (t101 * t11 - t105 * t16) * qJD(5)) * t53, 0.2e1 * t1 * t11 + 0.2e1 * t16 * t3 + 0.2e1 * t20 * t6; 0, 0, 0, 0, 0, t151, -t152, 0, -pkin(7) * t151, pkin(7) * t152, 0, 0, t56, t110, 0, t39, t38, 0, 0, t21, -t22, 0, -t10, t9, t17, t12, t19, -t117, 0, t27 + (-t126 * qJD(5) - t10) * t105 + t114 * t101, t105 * t114 + t126 * t153 + t172, t2 + (-t21 * t57 - t37 * t53 + (-t53 * t58 - t11) * qJD(5)) * t105 + (-t21 * t58 - t36 * t53 - t1 + (t53 * t57 - t16) * qJD(5)) * t101, t1 * t57 + t11 * t37 + t16 * t36 + t20 * t42 + t3 * t58 + t6 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t146, -0.2e1 * t145, 0, 0, 0, 0, 0, -0.2e1 * t48, 0.2e1 * t47, t87, t71, 0, 0, 0, 0.2e1 * t135, 0.2e1 * t166, -0.2e1 * t37 * t101 + 0.2e1 * t35 + 0.2e1 * (-t101 * t58 - t105 * t57) * qJD(5), 0.2e1 * t36 * t58 + 0.2e1 * t37 * t57 + 0.2e1 * t42 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t110, 0, t39, t38, 0, 0, t21, -t22, 0, -t10, t9, t17, t12, t19, -t117, 0, t27 + (-t125 * qJD(5) - t10) * t105 + t113 * t101, t105 * t113 + t125 * t153 + t172, t2 + (-t21 * t69 - t53 * t55 + (-t53 * t70 - t11) * qJD(5)) * t105 + (-t21 * t70 - t53 * t54 - t1 + (t53 * t69 - t16) * qJD(5)) * t101, t1 * t69 + t11 * t55 + t16 * t54 + t20 * t76 + t3 * t70 + t6 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t146, -t145, 0, 0, 0, 0, 0 (-pkin(3) - t91) * t155 - t178, t47 - t143, t87, t71, 0, 0, 0, t59 + t77 + (-t48 - t144) * t105, t165 + t166, t35 + t50 + (-t37 - t55) * t101 + ((-t57 - t69) * t105 + (-t58 - t70) * t101) * qJD(5), t36 * t70 + t37 * t69 + t42 * t80 + t54 * t58 + t55 * t57 + t61 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t144, -0.2e1 * t143, t87, t71, 0, 0, 0, 0.2e1 * t119, 0.2e1 * t165, -0.2e1 * t55 * t101 + 0.2e1 * t50 + 0.2e1 * (-t101 * t70 - t105 * t69) * qJD(5), 0.2e1 * t54 * t70 + 0.2e1 * t55 * t69 + 0.2e1 * t76 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, -t22, 0, -t10, t9, t17, t12, t19, -t117, 0, t27 + (-pkin(4) * t21 - pkin(10) * t22) * t101 + (-t10 + (-pkin(4) * t53 - pkin(10) * t52) * qJD(5)) * t105, t118 * pkin(4) + t117 * pkin(10) + t172, t2 + (-t21 * t81 - t53 * t67 + (-t53 * t82 - t11) * qJD(5)) * t105 + (-t21 * t82 - t53 * t66 - t1 + (t53 * t81 - t16) * qJD(5)) * t101, t1 * t81 + t11 * t67 + t16 * t66 + t20 * t94 + t3 * t82 + t6 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, t47, t87, t71, 0, 0, 0, t135 - t148, -t147 + t166, t35 + t62 + (-t37 - t67) * t101 + ((-t57 - t81) * t105 + (-t58 - t82) * t101) * qJD(5), t36 * t82 + t37 * t81 + t42 * t92 + t57 * t67 + t58 * t66 + t61 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144, -t143, t87, t71, 0, 0, 0, t119 - t148, -t147 + t165, t50 + t62 + (-t55 - t67) * t101 + ((-t69 - t81) * t105 + (-t70 - t82) * t101) * qJD(5), t54 * t82 + t55 * t81 + t66 * t70 + t67 * t69 + t76 * t92 + t80 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, t71, 0, 0, 0, -0.2e1 * t148, -0.2e1 * t147, -0.2e1 * t67 * t101 + 0.2e1 * t62 + 0.2e1 * (-t101 * t82 - t105 * t81) * qJD(5), 0.2e1 * t66 * t82 + 0.2e1 * t67 * t81 + 0.2e1 * t92 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t118, -t176, t22, t5, t4, t118 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t153, 0, t101 * t47 - t65 * t97, t153 * t65 + t161, -t142, t37 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t153, 0, -t101 * t143 - t89 * t97, t153 * t89 - t129, -t142, t55 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t153, 0, -pkin(10) * t97, pkin(10) * t153, -t142, t67 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
