% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t81 = sin(qJ(5));
t77 = t81 ^ 2;
t85 = cos(qJ(5));
t79 = t85 ^ 2;
t108 = t77 + t79;
t83 = sin(qJ(3));
t120 = t83 * pkin(2);
t86 = cos(qJ(4));
t102 = t86 * t120;
t87 = cos(qJ(3));
t75 = t87 * pkin(2);
t69 = t75 + pkin(3);
t82 = sin(qJ(4));
t48 = t82 * t69 + t102;
t46 = pkin(10) + t48;
t112 = t108 * t46;
t121 = t82 * pkin(3);
t67 = pkin(10) + t121;
t133 = t108 * t67;
t126 = -pkin(8) - pkin(7);
t84 = sin(qJ(2));
t100 = t126 * t84;
t88 = cos(qJ(2));
t101 = t126 * t88;
t36 = t100 * t83 - t101 * t87;
t54 = -t83 * t84 + t87 * t88;
t19 = t54 * pkin(9) + t36;
t35 = t100 * t87 + t101 * t83;
t55 = t83 * t88 + t87 * t84;
t93 = -t55 * pkin(9) + t35;
t12 = t82 * t19 - t86 * t93;
t132 = t12 ^ 2;
t29 = -t86 * t54 + t82 * t55;
t27 = t29 ^ 2;
t31 = t82 * t54 + t86 * t55;
t131 = 0.2e1 * t31;
t71 = -t88 * pkin(2) - pkin(1);
t42 = -t54 * pkin(3) + t71;
t130 = 0.2e1 * t42;
t129 = 0.2e1 * t55;
t128 = -0.2e1 * t85;
t127 = 0.2e1 * t88;
t125 = pkin(4) * t81;
t124 = t29 * pkin(5);
t116 = t81 * t31;
t8 = pkin(5) * t116 + t12;
t123 = t8 * t85;
t122 = t81 * pkin(5);
t119 = t12 * t85;
t110 = t82 * t120 - t86 * t69;
t45 = -pkin(4) + t110;
t118 = t45 * t85;
t74 = t86 * pkin(3);
t68 = -t74 - pkin(4);
t117 = t68 * t85;
t115 = t81 * t85;
t14 = t86 * t19 + t82 * t93;
t114 = t85 * t14;
t26 = t85 * t31;
t113 = -qJ(6) - pkin(10);
t109 = pkin(10) * t108;
t78 = t84 ^ 2;
t80 = t88 ^ 2;
t107 = t78 + t80;
t106 = qJ(6) * t31;
t105 = qJ(6) + t46;
t104 = qJ(6) + t67;
t103 = -0.2e1 * t31 * t29;
t70 = -t85 * pkin(5) - pkin(4);
t11 = t29 * pkin(4) - t31 * pkin(10) + t42;
t5 = t85 * t11 - t81 * t14;
t94 = -t106 * t85 + t5;
t2 = t94 + t124;
t4 = t114 + (t11 - t106) * t81;
t99 = -t2 * t81 + t4 * t85;
t97 = -pkin(4) * t31 - pkin(10) * t29;
t6 = t81 * t11 + t114;
t1 = -t5 * t81 + t6 * t85;
t96 = -t29 * t46 + t31 * t45;
t95 = -t29 * t67 + t31 * t68;
t76 = pkin(4) * t85;
t65 = 0.2e1 * t115;
t63 = t70 * t81;
t62 = t68 * t81;
t58 = t113 * t85;
t57 = t113 * t81;
t56 = t70 - t74;
t53 = t58 * t85;
t52 = t56 * t81;
t51 = t104 * t85;
t50 = t104 * t81;
t44 = t51 * t85;
t41 = t45 * t81;
t38 = t70 + t110;
t37 = t38 * t81;
t34 = t105 * t85;
t33 = t105 * t81;
t32 = t34 * t85;
t28 = t31 ^ 2;
t25 = t85 * t29;
t24 = t79 * t28;
t23 = t81 * t29;
t22 = t77 * t28;
t21 = t81 * t26;
t20 = -0.2e1 * t28 * t115;
t17 = 0.2e1 * t29 * t26;
t16 = t81 * t103;
t15 = (-t77 + t79) * t31;
t10 = t12 * t81;
t7 = t8 * t81;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t78, t84 * t127, 0, t80, 0, 0, pkin(1) * t127, -0.2e1 * pkin(1) * t84, 0.2e1 * t107 * pkin(7), pkin(7) ^ 2 * t107 + pkin(1) ^ 2, t55 ^ 2, t54 * t129, 0, t54 ^ 2, 0, 0, -0.2e1 * t71 * t54, t71 * t129, -0.2e1 * t35 * t55 + 0.2e1 * t36 * t54, t35 ^ 2 + t36 ^ 2 + t71 ^ 2, t28, t103, 0, t27, 0, 0, t29 * t130, t31 * t130, 0.2e1 * t12 * t31 - 0.2e1 * t14 * t29, t14 ^ 2 + t42 ^ 2 + t132, t24, t20, t17, t22, t16, t27, 0.2e1 * t12 * t116 + 0.2e1 * t5 * t29, 0.2e1 * t12 * t26 - 0.2e1 * t6 * t29 (-t5 * t85 - t6 * t81) * t131, t5 ^ 2 + t6 ^ 2 + t132, t24, t20, t17, t22, t16, t27, 0.2e1 * t8 * t116 + 0.2e1 * t2 * t29, 0.2e1 * t8 * t26 - 0.2e1 * t4 * t29 (-t2 * t85 - t4 * t81) * t131, t2 ^ 2 + t4 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, t88, 0, -t84 * pkin(7), -t88 * pkin(7), 0, 0, 0, 0, t55, 0, t54, 0, t35, -t36 (t54 * t83 - t55 * t87) * pkin(2) (t35 * t87 + t36 * t83) * pkin(2), 0, 0, t31, 0, -t29, 0, -t12, -t14, t110 * t31 - t48 * t29, t110 * t12 + t14 * t48, t21, t15, t23, -t21, t25, 0, t81 * t96 - t119, t85 * t96 + t10, t1, t1 * t46 + t12 * t45, t21, t15, t23, -t21, t25, 0, t38 * t116 - t33 * t29 - t123, t38 * t26 - t34 * t29 + t7 (t33 * t85 - t34 * t81) * t31 + t99, -t2 * t33 + t4 * t34 + t8 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t75, -0.2e1 * t120, 0 (t83 ^ 2 + t87 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t110, -0.2e1 * t48, 0, t110 ^ 2 + t48 ^ 2, t77, t65, 0, t79, 0, 0, -0.2e1 * t118, 0.2e1 * t41, 0.2e1 * t112, t108 * t46 ^ 2 + t45 ^ 2, t77, t65, 0, t79, 0, 0, t38 * t128, 0.2e1 * t37, 0.2e1 * t33 * t81 + 0.2e1 * t32, t33 ^ 2 + t34 ^ 2 + t38 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t54, 0, t35, -t36, 0, 0, 0, 0, t31, 0, -t29, 0, -t12, -t14 (-t29 * t82 - t31 * t86) * pkin(3) (-t12 * t86 + t14 * t82) * pkin(3), t21, t15, t23, -t21, t25, 0, t81 * t95 - t119, t85 * t95 + t10, t1, t1 * t67 + t12 * t68, t21, t15, t23, -t21, t25, 0, t56 * t116 - t50 * t29 - t123, t56 * t26 - t51 * t29 + t7 (t50 * t85 - t51 * t81) * t31 + t99, -t2 * t50 + t4 * t51 + t8 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t75, -t120, 0, 0, 0, 0, 0, 0, 0, 1, t74 - t110, -t102 + (-pkin(3) - t69) * t82, 0 (-t110 * t86 + t48 * t82) * pkin(3), t77, t65, 0, t79, 0, 0 (-t45 - t68) * t85, t62 + t41, t133 + t112, t133 * t46 + t45 * t68, t77, t65, 0, t79, 0, 0 (-t38 - t56) * t85, t52 + t37, t32 + t44 + (t33 + t50) * t81, t33 * t50 + t34 * t51 + t38 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t74, -0.2e1 * t121, 0 (t82 ^ 2 + t86 ^ 2) * pkin(3) ^ 2, t77, t65, 0, t79, 0, 0, -0.2e1 * t117, 0.2e1 * t62, 0.2e1 * t133, t108 * t67 ^ 2 + t68 ^ 2, t77, t65, 0, t79, 0, 0, t56 * t128, 0.2e1 * t52, 0.2e1 * t50 * t81 + 0.2e1 * t44, t50 ^ 2 + t51 ^ 2 + t56 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, 0, -t12, -t14, 0, 0, t21, t15, t23, -t21, t25, 0, t81 * t97 - t119, t85 * t97 + t10, t1, -t12 * pkin(4) + pkin(10) * t1, t21, t15, t23, -t21, t25, 0, t70 * t116 + t57 * t29 - t123, t70 * t26 + t58 * t29 + t7 (-t57 * t85 + t58 * t81) * t31 + t99, t2 * t57 - t4 * t58 + t8 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t110, -t48, 0, 0, t77, t65, 0, t79, 0, 0, t76 - t118, t41 - t125, t109 + t112, -t45 * pkin(4) + pkin(10) * t112, t77, t65, 0, t79, 0, 0 (-t38 - t70) * t85, t63 + t37, t32 - t53 + (t33 - t57) * t81, -t33 * t57 - t34 * t58 + t38 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t74, -t121, 0, 0, t77, t65, 0, t79, 0, 0, t76 - t117, t62 - t125, t109 + t133, -t68 * pkin(4) + pkin(10) * t133, t77, t65, 0, t79, 0, 0 (-t56 - t70) * t85, t63 + t52, t44 - t53 + (t50 - t57) * t81, -t50 * t57 - t51 * t58 + t56 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t77, t65, 0, t79, 0, 0, 0.2e1 * t76, -0.2e1 * t125, 0.2e1 * t109, pkin(10) ^ 2 * t108 + pkin(4) ^ 2, t77, t65, 0, t79, 0, 0, t70 * t128, 0.2e1 * t63, -0.2e1 * t57 * t81 - 0.2e1 * t53, t57 ^ 2 + t58 ^ 2 + t70 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t116, t29, t5, -t6, 0, 0, 0, 0, t26, 0, -t116, t29, t94 + 0.2e1 * t124, -t4, -pkin(5) * t26, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, t85, 0, -t81 * t46, -t85 * t46, 0, 0, 0, 0, t81, 0, t85, 0, -t33, -t34, -t122, -t33 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, t85, 0, -t81 * t67, -t85 * t67, 0, 0, 0, 0, t81, 0, t85, 0, -t50, -t51, -t122, -t50 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, t85, 0, -t81 * pkin(10), -t85 * pkin(10), 0, 0, 0, 0, t81, 0, t85, 0, t57, t58, -t122, t57 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, t26, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, t81, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, t81, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, t81, 0, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
