% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR7_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR7_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR7_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR7_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:39:26
% EndTime: 2019-03-09 18:39:37
% DurationCPUTime: 3.21s
% Computational Cost: add. (8614->339), mult. (22416->618), div. (0->0), fcn. (23184->12), ass. (0->179)
t158 = cos(pkin(6));
t162 = sin(qJ(2));
t156 = sin(pkin(6));
t165 = cos(qJ(2));
t225 = t156 * t165;
t116 = pkin(8) * t225 + (pkin(1) * t162 + pkin(9)) * t158;
t117 = (-pkin(2) * t165 - pkin(9) * t162 - pkin(1)) * t156;
t161 = sin(qJ(3));
t164 = cos(qJ(3));
t221 = t164 * t116 + t161 * t117;
t160 = sin(qJ(5));
t157 = cos(pkin(12));
t203 = pkin(3) * t157 + pkin(4);
t155 = sin(pkin(12));
t233 = t155 * pkin(3);
t235 = cos(qJ(5));
t172 = -t160 * t233 + t235 * t203;
t163 = cos(qJ(6));
t154 = t163 ^ 2;
t159 = sin(qJ(6));
t219 = t159 ^ 2 - t154;
t192 = t219 * qJD(6);
t226 = t156 * t162;
t127 = t158 * t161 + t164 * t226;
t193 = -t161 * t116 + t164 * t117;
t75 = -pkin(3) * t225 - t127 * qJ(4) + t193;
t126 = -t158 * t164 + t161 * t226;
t79 = -qJ(4) * t126 + t221;
t52 = -t155 * t79 + t157 * t75;
t90 = -t126 * t155 + t127 * t157;
t41 = -pkin(4) * t225 - t90 * pkin(10) + t52;
t183 = t126 * t157 + t127 * t155;
t53 = t155 * t75 + t157 * t79;
t45 = -t183 * pkin(10) + t53;
t179 = t160 * t41 + t235 * t45;
t218 = qJD(2) * t162;
t145 = t156 * t218;
t121 = (pkin(2) * t162 - pkin(9) * t165) * t156 * qJD(2);
t217 = qJD(2) * t165;
t122 = -t158 * pkin(1) * t217 + pkin(8) * t145;
t65 = -t221 * qJD(3) + t164 * t121 + t122 * t161;
t201 = t156 * t217;
t96 = -t126 * qJD(3) + t164 * t201;
t50 = pkin(3) * t145 - qJ(4) * t96 - qJD(4) * t127 + t65;
t215 = qJD(3) * t164;
t216 = qJD(3) * t161;
t64 = t116 * t216 - t117 * t215 - t161 * t121 + t164 * t122;
t95 = t127 * qJD(3) + t161 * t201;
t54 = -qJ(4) * t95 - qJD(4) * t126 - t64;
t28 = -t155 * t54 + t157 * t50;
t78 = -t155 * t95 + t157 * t96;
t21 = pkin(4) * t145 - pkin(10) * t78 + t28;
t185 = t155 * t96 + t157 * t95;
t29 = t155 * t50 + t157 * t54;
t23 = -t185 * pkin(10) + t29;
t7 = -t179 * qJD(5) - t160 * t23 + t235 * t21;
t237 = 0.2e1 * t156;
t151 = qJD(6) * t163;
t180 = -t160 * t45 + t235 * t41;
t17 = pkin(5) * t225 - t180;
t16 = t17 * t151;
t5 = -pkin(5) * t145 - t7;
t236 = t5 * t159 + t16;
t234 = pkin(9) * t156;
t125 = -t155 * t216 + t157 * t215;
t128 = t155 * t164 + t157 * t161;
t175 = t128 * qJD(3);
t224 = t157 * t164;
t182 = t155 * t161 - t224;
t93 = t160 * t128 + t235 * t182;
t71 = -t93 * qJD(5) + t235 * t125 - t160 * t175;
t94 = t235 * t128 - t160 * t182;
t232 = t94 * t71;
t231 = -qJ(4) - pkin(9);
t137 = t231 * t161;
t129 = t155 * t137;
t86 = -t128 * qJD(4) + (t231 * t224 - t129) * qJD(3);
t166 = t125 * pkin(10) - t86;
t196 = qJD(3) * t231;
t87 = t157 * (qJD(4) * t164 + t161 * t196) + t155 * (-qJD(4) * t161 + t164 * t196);
t170 = -pkin(10) * t175 + t87;
t198 = qJD(5) * t235;
t213 = qJD(5) * t160;
t138 = t231 * t164;
t97 = t157 * t137 + t138 * t155;
t88 = -pkin(10) * t128 + t97;
t98 = -t157 * t138 + t129;
t89 = -t182 * pkin(10) + t98;
t37 = t160 * t170 + t235 * t166 + t89 * t198 + t88 * t213;
t66 = t160 * t89 - t235 * t88;
t62 = t66 * t151;
t230 = t37 * t159 + t62;
t68 = t160 * t90 + t235 * t183;
t32 = -t68 * qJD(5) - t160 * t185 + t235 * t78;
t69 = -t160 * t183 + t235 * t90;
t58 = t159 * t69 + t163 * t225;
t24 = -t58 * qJD(6) + t159 * t145 + t163 * t32;
t229 = t159 * t24;
t113 = t172 * qJD(5);
t228 = t113 * t159;
t227 = t113 * t163;
t223 = t159 * t163;
t220 = t160 * t203 + t235 * t233;
t114 = t220 * qJD(5);
t119 = -pkin(5) - t172;
t222 = t114 * t159 + t119 * t151;
t209 = pkin(1) * t218;
t123 = pkin(8) * t201 + t158 * t209;
t214 = qJD(3) * t165;
t212 = qJD(6) * t159;
t211 = -0.2e1 * pkin(2) * qJD(3);
t208 = pkin(5) * t212;
t207 = pkin(5) * t151;
t150 = pkin(3) * t216;
t206 = t94 * t212;
t205 = t94 * t151;
t204 = t159 * t225;
t15 = t17 * t212;
t61 = t66 * t212;
t149 = -t164 * pkin(3) - pkin(2);
t152 = t156 ^ 2;
t202 = t152 * t217;
t200 = t159 * t151;
t199 = -t163 * t5 + t15;
t195 = -0.4e1 * t94 * t223;
t194 = -t114 * t163 + t119 * t212;
t191 = t162 * t202;
t83 = t95 * pkin(3) + t123;
t190 = t17 * t71 + t5 * t94;
t33 = t69 * qJD(5) + t160 * t78 + t235 * t185;
t189 = t33 * t94 + t68 * t71;
t188 = t37 * t94 + t66 * t71;
t72 = t94 * qJD(5) + t160 * t125 + t235 * t175;
t187 = t71 * t93 + t72 * t94;
t120 = pkin(11) + t220;
t186 = t119 * t94 - t120 * t93;
t18 = -pkin(11) * t225 + t179;
t115 = pkin(8) * t226 + (-t165 * pkin(1) - pkin(2)) * t158;
t91 = t126 * pkin(3) + t115;
t70 = t183 * pkin(4) + t91;
t31 = t68 * pkin(5) - t69 * pkin(11) + t70;
t10 = t159 * t31 + t163 * t18;
t59 = t163 * t69 - t204;
t184 = -t159 * t59 - t163 * t58;
t27 = t68 * t151 + t159 * t33;
t178 = -t163 * t33 + t68 * t212;
t177 = -t163 * t71 + t206;
t56 = t93 * t151 + t159 * t72;
t176 = -t163 * t72 + t93 * t212;
t6 = -t160 * t21 - t41 * t198 + t45 * t213 - t235 * t23;
t174 = t161 * t214 + t164 * t218;
t173 = t161 * t218 - t164 * t214;
t100 = pkin(4) * t175 + t150;
t171 = -t113 * t93 + t114 * t94 + t119 * t71 - t120 * t72;
t110 = t182 * pkin(4) + t149;
t169 = pkin(11) * t145 - t6;
t57 = t185 * pkin(4) + t83;
t168 = t72 * pkin(5) - t71 * pkin(11) + t100;
t167 = t33 * pkin(5) - t32 * pkin(11) + t57;
t143 = 0.2e1 * t200;
t133 = -0.2e1 * t191;
t132 = -0.2e1 * t192;
t92 = t94 ^ 2;
t67 = t160 * t88 + t235 * t89;
t63 = t93 * pkin(5) - t94 * pkin(11) + t110;
t47 = -t94 * t192 + t71 * t223;
t43 = t159 * t63 + t163 * t67;
t42 = -t159 * t67 + t163 * t63;
t38 = qJD(6) * t195 - t219 * t71;
t36 = t160 * t166 - t235 * t170 - t88 * t198 + t89 * t213;
t25 = -qJD(6) * t204 - t163 * t145 + t69 * t151 + t159 * t32;
t14 = t59 * t151 + t229;
t12 = -t67 * t151 + t159 * t36 + t163 * t168 - t63 * t212;
t11 = -t63 * t151 - t159 * t168 + t163 * t36 + t67 * t212;
t9 = -t159 * t18 + t163 * t31;
t8 = t184 * qJD(6) - t159 * t25 + t163 * t24;
t2 = -t10 * qJD(6) - t159 * t169 + t163 * t167;
t1 = -t31 * t151 - t159 * t167 - t163 * t169 + t18 * t212;
t3 = [0, 0, 0, 0.2e1 * t191, 0.2e1 * (-t162 ^ 2 + t165 ^ 2) * t152 * qJD(2), 0.2e1 * t158 * t201, -0.2e1 * t158 * t145, 0, -0.2e1 * t123 * t158 - 0.2e1 * t152 * t209, -0.2e1 * pkin(1) * t202 + 0.2e1 * t122 * t158, 0.2e1 * t127 * t96, -0.2e1 * t126 * t96 - 0.2e1 * t127 * t95 (t127 * t218 - t165 * t96) * t237 (-t126 * t218 + t165 * t95) * t237, t133, 0.2e1 * t115 * t95 + 0.2e1 * t123 * t126 + 0.2e1 * (-t65 * t165 + t193 * t218) * t156, 0.2e1 * t115 * t96 + 0.2e1 * t123 * t127 + 0.2e1 * (-t64 * t165 - t218 * t221) * t156, -0.2e1 * t183 * t29 - 0.2e1 * t185 * t53 - 0.2e1 * t28 * t90 - 0.2e1 * t52 * t78, 0.2e1 * t28 * t52 + 0.2e1 * t29 * t53 + 0.2e1 * t83 * t91, 0.2e1 * t69 * t32, -0.2e1 * t32 * t68 - 0.2e1 * t33 * t69 (-t165 * t32 + t218 * t69) * t237 (t165 * t33 - t218 * t68) * t237, t133, 0.2e1 * t70 * t33 + 0.2e1 * t57 * t68 + 0.2e1 * (-t7 * t165 + t180 * t218) * t156, 0.2e1 * t70 * t32 + 0.2e1 * t57 * t69 + 0.2e1 * (-t6 * t165 - t179 * t218) * t156, 0.2e1 * t59 * t24, -0.2e1 * t24 * t58 - 0.2e1 * t25 * t59, 0.2e1 * t24 * t68 + 0.2e1 * t33 * t59, -0.2e1 * t25 * t68 - 0.2e1 * t33 * t58, 0.2e1 * t68 * t33, 0.2e1 * t17 * t25 + 0.2e1 * t2 * t68 + 0.2e1 * t33 * t9 + 0.2e1 * t5 * t58, 0.2e1 * t1 * t68 - 0.2e1 * t10 * t33 + 0.2e1 * t17 * t24 + 0.2e1 * t5 * t59; 0, 0, 0, 0, 0, t201, -t145, 0, -t123, t122, t127 * t215 + t161 * t96, -t161 * t95 + t164 * t96 + (-t126 * t164 - t127 * t161) * qJD(3), t173 * t156, t174 * t156, 0, -pkin(2) * t95 + t115 * t216 - t123 * t164 - t173 * t234, -pkin(2) * t96 + t115 * t215 + t123 * t161 - t174 * t234, -t52 * t125 - t28 * t128 - t175 * t53 - t182 * t29 - t183 * t87 - t185 * t98 - t97 * t78 - t86 * t90, t149 * t83 + t150 * t91 + t28 * t97 + t29 * t98 + t52 * t86 + t53 * t87, t32 * t94 + t69 * t71, -t32 * t93 - t69 * t72 - t189 (-t165 * t71 + t218 * t94) * t156 (t165 * t72 - t218 * t93) * t156, 0, t100 * t68 + t110 * t33 + t57 * t93 + t70 * t72 + (t165 * t37 - t218 * t66) * t156, t100 * t69 + t110 * t32 + t57 * t94 + t70 * t71 + (-t165 * t36 - t218 * t67) * t156, -t59 * t206 + (t24 * t94 + t59 * t71) * t163, t184 * t71 + (-t229 - t163 * t25 + (t159 * t58 - t163 * t59) * qJD(6)) * t94, t163 * t189 - t206 * t68 + t24 * t93 + t59 * t72, -t159 * t189 - t205 * t68 - t25 * t93 - t58 * t72, t33 * t93 + t68 * t72, t12 * t68 + t159 * t190 + t16 * t94 + t2 * t93 + t25 * t66 + t33 * t42 + t37 * t58 + t72 * t9, t1 * t93 - t10 * t72 + t11 * t68 - t15 * t94 + t163 * t190 + t24 * t66 - t33 * t43 + t37 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t161 * t215, 0.2e1 * (-t161 ^ 2 + t164 ^ 2) * qJD(3), 0, 0, 0, t161 * t211, t164 * t211, -0.2e1 * t97 * t125 - 0.2e1 * t86 * t128 - 0.2e1 * t175 * t98 - 0.2e1 * t182 * t87, 0.2e1 * t149 * t150 + 0.2e1 * t86 * t97 + 0.2e1 * t87 * t98, 0.2e1 * t232, -0.2e1 * t187, 0, 0, 0, 0.2e1 * t100 * t93 + 0.2e1 * t110 * t72, 0.2e1 * t100 * t94 + 0.2e1 * t110 * t71, 0.2e1 * t154 * t232 - 0.2e1 * t200 * t92, 0.2e1 * t92 * t192 + t195 * t71, 0.2e1 * t163 * t187 - 0.2e1 * t206 * t93, -0.2e1 * t159 * t187 - 0.2e1 * t205 * t93, 0.2e1 * t93 * t72, 0.2e1 * t12 * t93 + 0.2e1 * t159 * t188 + 0.2e1 * t42 * t72 + 0.2e1 * t62 * t94, 0.2e1 * t11 * t93 + 0.2e1 * t163 * t188 - 0.2e1 * t43 * t72 - 0.2e1 * t61 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, -t95, t145, t65, t64 (-t155 * t185 - t157 * t78) * pkin(3) (t29 * t155 + t157 * t28) * pkin(3), 0, 0, t32, -t33, t145 (t114 * t165 + t172 * t218) * t156 + t7 (t113 * t165 - t218 * t220) * t156 + t6, t14, t8, t27, -t178, 0, t114 * t58 + t119 * t25 - t120 * t27 - t68 * t228 + t199, t114 * t59 + t119 * t24 + t120 * t178 - t68 * t227 + t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, -t216, 0, -pkin(9) * t215, pkin(9) * t216 (-t157 * t125 - t155 * t175) * pkin(3) (t155 * t87 + t157 * t86) * pkin(3), 0, 0, t71, -t72, 0, -t37, t36, t47, t38, t56, -t176, 0, t61 + (qJD(6) * t186 - t37) * t163 + t171 * t159, t163 * t171 - t186 * t212 + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t114, -0.2e1 * t113, t143, t132, 0, 0, 0, 0.2e1 * t194, 0.2e1 * t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, 0, 0, 0, t33, t32, 0, 0, 0, 0, 0, -t178, -t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, 0, 0, 0, 0, 0, t72, t71, 0, 0, 0, 0, 0, -t176, -t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t33, t145, t7, t6, t14, t8, t27, -t178, 0, -pkin(5) * t25 - pkin(11) * t27 + t199, -pkin(5) * t24 + pkin(11) * t178 + t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t72, 0, -t37, t36, t47, t38, t56, -t176, 0, t61 + (-pkin(5) * t71 - pkin(11) * t72) * t159 + (-t37 + (-pkin(5) * t94 - pkin(11) * t93) * qJD(6)) * t163, pkin(5) * t177 + pkin(11) * t176 + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t114, -t113, t143, t132, 0, 0, 0, t194 - t208, -t207 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, t132, 0, 0, 0, -0.2e1 * t208, -0.2e1 * t207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t25, t33, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, -t159 * t71 - t205, t72, t12, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, -t212, 0, -t120 * t151 - t228, t120 * t212 - t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t212, -t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, -t212, 0, -pkin(11) * t151, pkin(11) * t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
