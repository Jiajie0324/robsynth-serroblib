% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 11:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 11:45:11
% EndTime: 2019-05-07 11:45:28
% DurationCPUTime: 17.14s
% Computational Cost: add. (206036->380), mult. (458123->585), div. (0->0), fcn. (378385->14), ass. (0->324)
t2660 = sin(pkin(6));
t2673 = qJD(1) ^ 2;
t2747 = t2660 * t2673;
t2662 = cos(pkin(6));
t2713 = qJD(1) * t2662 + qJD(2);
t2706 = t2713 ^ 2;
t2665 = sin(qJ(3));
t2670 = cos(qJ(3));
t2666 = sin(qJ(2));
t2724 = t2660 * t2666;
t2716 = qJD(1) * t2724;
t2624 = t2665 * t2716 - t2670 * t2713;
t2625 = t2665 * t2713 + t2670 * t2716;
t2659 = sin(pkin(12));
t2661 = cos(pkin(12));
t2605 = -t2624 * t2661 - t2659 * t2625;
t2606 = -t2624 * t2659 + t2625 * t2661;
t2664 = sin(qJ(5));
t2669 = cos(qJ(5));
t2570 = -t2669 * t2605 + t2606 * t2664;
t2569 = qJD(6) + t2570;
t2746 = qJD(6) + t2569;
t2572 = t2605 * t2664 + t2606 * t2669;
t2671 = cos(qJ(2));
t2723 = t2660 * t2671;
t2715 = qJD(1) * t2723;
t2646 = -qJD(3) + t2715;
t2638 = -qJD(5) + t2646;
t2663 = sin(qJ(6));
t2668 = cos(qJ(6));
t2553 = t2572 * t2663 + t2668 * t2638;
t2745 = t2553 ^ 2;
t2555 = t2572 * t2668 - t2638 * t2663;
t2744 = t2555 ^ 2;
t2743 = t2569 ^ 2;
t2742 = t2570 ^ 2;
t2741 = t2572 ^ 2;
t2740 = t2605 ^ 2;
t2739 = t2606 ^ 2;
t2738 = t2624 ^ 2;
t2737 = t2625 ^ 2;
t2736 = t2638 ^ 2;
t2735 = t2646 ^ 2;
t2734 = t2662 * g(3);
t2733 = (-pkin(2) * t2671 - pkin(9) * t2666) * t2747;
t2732 = t2553 * t2555;
t2731 = t2570 * t2572;
t2730 = t2605 * t2606;
t2729 = t2605 * t2646;
t2728 = t2606 * t2646;
t2727 = t2624 * t2625;
t2726 = t2624 * t2646;
t2725 = t2660 ^ 2 * t2673;
t2722 = qJD(3) + t2646;
t2721 = qJD(5) + t2638;
t2720 = qJD(6) - t2569;
t2707 = qJDD(1) * t2662 + qJDD(2);
t2667 = sin(qJ(1));
t2672 = cos(qJ(1));
t2649 = -g(1) * t2672 - g(2) * t2667;
t2717 = qJDD(1) * t2660;
t2628 = -pkin(1) * t2673 + pkin(8) * t2717 + t2649;
t2648 = t2667 * g(1) - t2672 * g(2);
t2676 = qJDD(1) * pkin(1) + pkin(8) * t2747 + t2648;
t2675 = t2662 * t2676;
t2719 = t2671 * t2628 + t2666 * t2675;
t2579 = t2707 * pkin(9) - t2706 * pkin(2) + (-g(3) * t2666 + t2671 * t2733) * t2660 + t2719;
t2632 = qJD(2) * t2715 + t2666 * t2717;
t2704 = qJD(1) * t2713;
t2681 = t2671 * t2704;
t2682 = t2666 * t2704;
t2718 = -qJD(2) * t2716 + t2671 * t2717;
t2580 = -t2734 - t2632 * pkin(9) - t2718 * pkin(2) + (pkin(2) * t2682 - pkin(9) * t2681 - t2676) * t2660;
t2541 = -t2665 * t2579 + t2670 * t2580;
t2714 = -qJDD(3) + t2718;
t2594 = -t2714 - t2727;
t2678 = -t2670 * t2632 - t2665 * t2707;
t2598 = -t2624 * qJD(3) - t2678;
t2519 = (-t2598 + t2726) * qJ(4) + t2594 * pkin(3) + t2541;
t2542 = t2670 * t2579 + t2665 * t2580;
t2610 = -pkin(3) * t2646 - qJ(4) * t2625;
t2708 = t2665 * t2632 - t2670 * t2707;
t2680 = -qJD(3) * t2625 - t2708;
t2527 = -pkin(3) * t2738 + qJ(4) * t2680 + t2646 * t2610 + t2542;
t2490 = 0.2e1 * qJD(4) * t2605 + t2659 * t2519 + t2661 * t2527;
t2563 = -t2598 * t2659 + t2661 * t2680;
t2592 = -pkin(4) * t2646 - pkin(10) * t2606;
t2469 = -pkin(4) * t2740 + pkin(10) * t2563 + t2592 * t2646 + t2490;
t2489 = -0.2e1 * qJD(4) * t2606 + t2661 * t2519 - t2659 * t2527;
t2564 = t2661 * t2598 + t2659 * t2680;
t2548 = -t2564 - t2729;
t2560 = -t2714 + t2730;
t2674 = pkin(4) * t2560 + pkin(10) * t2548 + t2489;
t2441 = t2669 * t2469 + t2664 * t2674;
t2440 = -t2469 * t2664 + t2669 * t2674;
t2688 = -t2664 * t2563 - t2669 * t2564;
t2518 = -qJD(5) * t2570 - t2688;
t2712 = -t2570 * t2638 - t2518;
t2705 = -qJDD(5) + t2714;
t2711 = -t2663 * t2518 - t2668 * t2705;
t2710 = -t2669 * t2563 + t2664 * t2564;
t2709 = t2666 * t2628 - t2671 * t2675;
t2536 = pkin(5) * t2570 - pkin(11) * t2572;
t2439 = -pkin(5) * t2736 - pkin(11) * t2705 - t2570 * t2536 + t2441;
t2578 = -t2707 * pkin(2) - t2706 * pkin(9) + (g(3) * t2671 + t2666 * t2733) * t2660 + t2709;
t2534 = -t2680 * pkin(3) - t2738 * qJ(4) + t2625 * t2610 + qJDD(4) + t2578;
t2495 = -t2563 * pkin(4) - t2740 * pkin(10) + t2606 * t2592 + t2534;
t2499 = (qJD(5) - t2638) * t2572 + t2710;
t2461 = pkin(5) * t2499 + pkin(11) * t2712 + t2495;
t2422 = -t2439 * t2663 + t2461 * t2668;
t2423 = t2439 * t2668 + t2461 * t2663;
t2408 = -t2422 * t2663 + t2423 * t2668;
t2438 = pkin(5) * t2705 - pkin(11) * t2736 + t2536 * t2572 - t2440;
t2398 = t2408 * t2664 - t2438 * t2669;
t2399 = t2408 * t2669 + t2438 * t2664;
t2387 = t2398 * t2661 + t2399 * t2659;
t2388 = -t2398 * t2659 + t2399 * t2661;
t2384 = -t2387 * t2665 + t2388 * t2670;
t2407 = t2422 * t2668 + t2423 * t2663;
t2703 = t2384 * t2666 - t2407 * t2671;
t2420 = t2440 * t2669 + t2441 * t2664;
t2421 = -t2440 * t2664 + t2441 * t2669;
t2401 = t2420 * t2661 + t2421 * t2659;
t2402 = -t2420 * t2659 + t2421 * t2661;
t2393 = -t2401 * t2665 + t2402 * t2670;
t2702 = t2393 * t2666 - t2495 * t2671;
t2484 = -t2555 * t2720 + t2711;
t2677 = -t2668 * t2518 + t2663 * t2705;
t2486 = t2553 * t2720 + t2677;
t2458 = t2484 * t2668 - t2486 * t2663;
t2511 = -t2744 - t2745;
t2447 = t2458 * t2664 - t2511 * t2669;
t2448 = t2458 * t2669 + t2511 * t2664;
t2426 = t2447 * t2661 + t2448 * t2659;
t2427 = -t2447 * t2659 + t2448 * t2661;
t2410 = -t2426 * t2665 + t2427 * t2670;
t2457 = t2484 * t2663 + t2486 * t2668;
t2701 = t2410 * t2666 - t2457 * t2671;
t2679 = -qJD(5) * t2572 - qJDD(6) - t2710;
t2492 = -t2679 - t2732;
t2516 = -t2743 - t2745;
t2471 = -t2492 * t2663 + t2516 * t2668;
t2483 = t2555 * t2746 - t2711;
t2449 = t2471 * t2664 - t2483 * t2669;
t2450 = t2471 * t2669 + t2483 * t2664;
t2430 = t2449 * t2661 + t2450 * t2659;
t2431 = -t2449 * t2659 + t2450 * t2661;
t2412 = -t2430 * t2665 + t2431 * t2670;
t2470 = t2492 * t2668 + t2516 * t2663;
t2700 = t2412 * t2666 - t2470 * t2671;
t2493 = t2679 - t2732;
t2522 = -t2743 - t2744;
t2473 = t2493 * t2668 - t2522 * t2663;
t2485 = -t2553 * t2746 - t2677;
t2451 = t2473 * t2664 - t2485 * t2669;
t2452 = t2473 * t2669 + t2485 * t2664;
t2432 = t2451 * t2661 + t2452 * t2659;
t2433 = -t2451 * t2659 + t2452 * t2661;
t2414 = -t2432 * t2665 + t2433 * t2670;
t2472 = t2493 * t2663 + t2522 * t2668;
t2699 = t2414 * t2666 - t2472 * t2671;
t2500 = -t2572 * t2721 - t2710;
t2502 = t2570 * t2721 + t2688;
t2474 = t2500 * t2664 + t2502 * t2669;
t2475 = t2500 * t2669 - t2502 * t2664;
t2443 = t2474 * t2661 + t2475 * t2659;
t2444 = -t2474 * t2659 + t2475 * t2661;
t2425 = -t2443 * t2665 + t2444 * t2670;
t2526 = -t2741 - t2742;
t2698 = t2425 * t2666 - t2526 * t2671;
t2459 = t2489 * t2661 + t2490 * t2659;
t2460 = -t2489 * t2659 + t2490 * t2661;
t2436 = -t2459 * t2665 + t2460 * t2670;
t2697 = t2436 * t2666 - t2534 * t2671;
t2532 = -t2705 - t2731;
t2535 = -t2736 - t2742;
t2503 = t2532 * t2669 + t2535 * t2664;
t2504 = -t2532 * t2664 + t2535 * t2669;
t2476 = t2503 * t2661 + t2504 * t2659;
t2477 = -t2503 * t2659 + t2504 * t2661;
t2446 = -t2476 * t2665 + t2477 * t2670;
t2696 = t2446 * t2666 - t2499 * t2671;
t2531 = t2705 - t2731;
t2552 = -t2736 - t2741;
t2512 = t2531 * t2664 + t2552 * t2669;
t2513 = t2531 * t2669 - t2552 * t2664;
t2481 = t2512 * t2661 + t2513 * t2659;
t2482 = -t2512 * t2659 + t2513 * t2661;
t2456 = -t2481 * t2665 + t2482 * t2670;
t2695 = t2456 * t2666 + t2671 * t2712;
t2546 = t2563 - t2728;
t2514 = t2546 * t2659 + t2548 * t2661;
t2515 = t2546 * t2661 - t2548 * t2659;
t2488 = -t2514 * t2665 + t2515 * t2670;
t2549 = -t2739 - t2740;
t2694 = t2488 * t2666 - t2549 * t2671;
t2566 = -t2735 - t2740;
t2529 = t2560 * t2661 + t2566 * t2659;
t2530 = -t2560 * t2659 + t2566 * t2661;
t2498 = -t2529 * t2665 + t2530 * t2670;
t2545 = -t2563 - t2728;
t2693 = t2498 * t2666 - t2545 * t2671;
t2559 = t2714 + t2730;
t2589 = -t2735 - t2739;
t2539 = t2559 * t2659 + t2589 * t2661;
t2540 = t2559 * t2661 - t2589 * t2659;
t2508 = -t2539 * t2665 + t2540 * t2670;
t2547 = t2564 - t2729;
t2692 = t2508 * t2666 - t2547 * t2671;
t2510 = -t2541 * t2665 + t2542 * t2670;
t2691 = t2510 * t2666 - t2578 * t2671;
t2584 = -t2625 * t2722 - t2708;
t2586 = t2624 * t2722 + t2678;
t2544 = t2584 * t2670 - t2586 * t2665;
t2591 = -t2737 - t2738;
t2690 = t2544 * t2666 - t2591 * t2671;
t2599 = -t2735 - t2738;
t2557 = -t2594 * t2665 + t2599 * t2670;
t2583 = (qJD(3) - t2646) * t2625 + t2708;
t2689 = t2557 * t2666 - t2583 * t2671;
t2593 = t2714 - t2727;
t2608 = -t2735 - t2737;
t2568 = t2593 * t2670 - t2608 * t2665;
t2585 = t2598 + t2726;
t2687 = t2568 * t2666 - t2585 * t2671;
t2601 = -g(3) * t2723 - t2709;
t2602 = -g(3) * t2724 + t2719;
t2686 = t2601 * t2671 + t2602 * t2666;
t2612 = t2660 * t2681 - t2632;
t2635 = t2660 * t2682;
t2613 = t2635 + t2718;
t2685 = t2612 * t2671 + t2613 * t2666;
t2657 = t2666 ^ 2;
t2621 = -t2657 * t2725 - t2706;
t2645 = t2671 * t2666 * t2725;
t2630 = t2645 - t2707;
t2684 = t2621 * t2671 + t2630 * t2666;
t2629 = t2645 + t2707;
t2658 = t2671 ^ 2;
t2633 = -t2658 * t2725 - t2706;
t2683 = t2629 * t2671 + t2633 * t2666;
t2644 = -qJDD(1) * t2667 - t2672 * t2673;
t2643 = qJDD(1) * t2672 - t2667 * t2673;
t2634 = (-t2657 - t2658) * t2725;
t2616 = -t2660 * t2676 - t2734;
t2614 = t2635 - t2718;
t2611 = t2713 * t2715 + t2632;
t2609 = -t2629 * t2666 + t2633 * t2671;
t2607 = -t2621 * t2666 + t2630 * t2671;
t2590 = -t2612 * t2666 + t2613 * t2671;
t2588 = -t2660 * t2614 + t2662 * t2683;
t2587 = t2662 * t2614 + t2660 * t2683;
t2582 = -t2660 * t2611 + t2662 * t2684;
t2581 = t2662 * t2611 + t2660 * t2684;
t2577 = -t2660 * t2634 + t2662 * t2685;
t2576 = t2662 * t2634 + t2660 * t2685;
t2567 = t2593 * t2665 + t2608 * t2670;
t2565 = -t2601 * t2666 + t2602 * t2671;
t2556 = t2594 * t2670 + t2599 * t2665;
t2551 = -t2660 * t2616 + t2662 * t2686;
t2550 = t2662 * t2616 + t2660 * t2686;
t2543 = t2584 * t2665 + t2586 * t2670;
t2538 = t2568 * t2671 + t2585 * t2666;
t2537 = t2557 * t2671 + t2583 * t2666;
t2528 = t2544 * t2671 + t2591 * t2666;
t2525 = -t2660 * t2567 + t2662 * t2687;
t2524 = t2662 * t2567 + t2660 * t2687;
t2521 = -t2660 * t2556 + t2662 * t2689;
t2520 = t2662 * t2556 + t2660 * t2689;
t2509 = t2541 * t2670 + t2542 * t2665;
t2507 = t2539 * t2670 + t2540 * t2665;
t2506 = -t2660 * t2543 + t2662 * t2690;
t2505 = t2662 * t2543 + t2660 * t2690;
t2497 = t2529 * t2670 + t2530 * t2665;
t2496 = t2510 * t2671 + t2578 * t2666;
t2494 = t2508 * t2671 + t2547 * t2666;
t2491 = t2498 * t2671 + t2545 * t2666;
t2487 = t2514 * t2670 + t2515 * t2665;
t2480 = t2488 * t2671 + t2549 * t2666;
t2479 = -t2660 * t2509 + t2662 * t2691;
t2478 = t2662 * t2509 + t2660 * t2691;
t2467 = -t2660 * t2507 + t2662 * t2692;
t2466 = t2662 * t2507 + t2660 * t2692;
t2463 = -t2660 * t2497 + t2662 * t2693;
t2462 = t2662 * t2497 + t2660 * t2693;
t2455 = t2481 * t2670 + t2482 * t2665;
t2454 = -t2660 * t2487 + t2662 * t2694;
t2453 = t2662 * t2487 + t2660 * t2694;
t2445 = t2476 * t2670 + t2477 * t2665;
t2442 = t2456 * t2671 - t2666 * t2712;
t2437 = t2446 * t2671 + t2499 * t2666;
t2435 = t2459 * t2670 + t2460 * t2665;
t2434 = t2436 * t2671 + t2534 * t2666;
t2429 = -t2660 * t2455 + t2662 * t2695;
t2428 = t2662 * t2455 + t2660 * t2695;
t2424 = t2443 * t2670 + t2444 * t2665;
t2419 = t2425 * t2671 + t2526 * t2666;
t2418 = -t2660 * t2445 + t2662 * t2696;
t2417 = t2662 * t2445 + t2660 * t2696;
t2416 = -t2660 * t2435 + t2662 * t2697;
t2415 = t2662 * t2435 + t2660 * t2697;
t2413 = t2432 * t2670 + t2433 * t2665;
t2411 = t2430 * t2670 + t2431 * t2665;
t2409 = t2426 * t2670 + t2427 * t2665;
t2406 = t2414 * t2671 + t2472 * t2666;
t2405 = t2412 * t2671 + t2470 * t2666;
t2404 = -t2660 * t2424 + t2662 * t2698;
t2403 = t2662 * t2424 + t2660 * t2698;
t2400 = t2410 * t2671 + t2457 * t2666;
t2397 = -t2660 * t2413 + t2662 * t2699;
t2396 = t2662 * t2413 + t2660 * t2699;
t2395 = -t2660 * t2411 + t2662 * t2700;
t2394 = t2662 * t2411 + t2660 * t2700;
t2392 = t2401 * t2670 + t2402 * t2665;
t2391 = -t2660 * t2409 + t2662 * t2701;
t2390 = t2662 * t2409 + t2660 * t2701;
t2389 = t2393 * t2671 + t2495 * t2666;
t2386 = -t2660 * t2392 + t2662 * t2702;
t2385 = t2662 * t2392 + t2660 * t2702;
t2383 = t2387 * t2670 + t2388 * t2665;
t2382 = t2384 * t2671 + t2407 * t2666;
t2381 = -t2660 * t2383 + t2662 * t2703;
t2380 = t2662 * t2383 + t2660 * t2703;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2644, -t2643, 0, -t2648 * t2667 + t2649 * t2672, 0, 0, 0, 0, 0, 0, -t2588 * t2667 + t2609 * t2672, -t2582 * t2667 + t2607 * t2672, -t2577 * t2667 + t2590 * t2672, -t2551 * t2667 + t2565 * t2672, 0, 0, 0, 0, 0, 0, -t2521 * t2667 + t2537 * t2672, -t2525 * t2667 + t2538 * t2672, -t2506 * t2667 + t2528 * t2672, -t2479 * t2667 + t2496 * t2672, 0, 0, 0, 0, 0, 0, -t2463 * t2667 + t2491 * t2672, -t2467 * t2667 + t2494 * t2672, -t2454 * t2667 + t2480 * t2672, -t2416 * t2667 + t2434 * t2672, 0, 0, 0, 0, 0, 0, -t2418 * t2667 + t2437 * t2672, -t2429 * t2667 + t2442 * t2672, -t2404 * t2667 + t2419 * t2672, -t2386 * t2667 + t2389 * t2672, 0, 0, 0, 0, 0, 0, -t2395 * t2667 + t2405 * t2672, -t2397 * t2667 + t2406 * t2672, -t2391 * t2667 + t2400 * t2672, -t2381 * t2667 + t2382 * t2672; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2643, t2644, 0, t2648 * t2672 + t2649 * t2667, 0, 0, 0, 0, 0, 0, t2588 * t2672 + t2609 * t2667, t2582 * t2672 + t2607 * t2667, t2577 * t2672 + t2590 * t2667, t2551 * t2672 + t2565 * t2667, 0, 0, 0, 0, 0, 0, t2521 * t2672 + t2537 * t2667, t2525 * t2672 + t2538 * t2667, t2506 * t2672 + t2528 * t2667, t2479 * t2672 + t2496 * t2667, 0, 0, 0, 0, 0, 0, t2463 * t2672 + t2491 * t2667, t2467 * t2672 + t2494 * t2667, t2454 * t2672 + t2480 * t2667, t2416 * t2672 + t2434 * t2667, 0, 0, 0, 0, 0, 0, t2418 * t2672 + t2437 * t2667, t2429 * t2672 + t2442 * t2667, t2404 * t2672 + t2419 * t2667, t2386 * t2672 + t2389 * t2667, 0, 0, 0, 0, 0, 0, t2395 * t2672 + t2405 * t2667, t2397 * t2672 + t2406 * t2667, t2391 * t2672 + t2400 * t2667, t2381 * t2672 + t2382 * t2667; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2587, t2581, t2576, t2550, 0, 0, 0, 0, 0, 0, t2520, t2524, t2505, t2478, 0, 0, 0, 0, 0, 0, t2462, t2466, t2453, t2415, 0, 0, 0, 0, 0, 0, t2417, t2428, t2403, t2385, 0, 0, 0, 0, 0, 0, t2394, t2396, t2390, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2673, -qJDD(1), 0, t2649, 0, 0, 0, 0, 0, 0, t2609, t2607, t2590, t2565, 0, 0, 0, 0, 0, 0, t2537, t2538, t2528, t2496, 0, 0, 0, 0, 0, 0, t2491, t2494, t2480, t2434, 0, 0, 0, 0, 0, 0, t2437, t2442, t2419, t2389, 0, 0, 0, 0, 0, 0, t2405, t2406, t2400, t2382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2673, 0, t2648, 0, 0, 0, 0, 0, 0, t2588, t2582, t2577, t2551, 0, 0, 0, 0, 0, 0, t2521, t2525, t2506, t2479, 0, 0, 0, 0, 0, 0, t2463, t2467, t2454, t2416, 0, 0, 0, 0, 0, 0, t2418, t2429, t2404, t2386, 0, 0, 0, 0, 0, 0, t2395, t2397, t2391, t2381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2587, t2581, t2576, t2550, 0, 0, 0, 0, 0, 0, t2520, t2524, t2505, t2478, 0, 0, 0, 0, 0, 0, t2462, t2466, t2453, t2415, 0, 0, 0, 0, 0, 0, t2417, t2428, t2403, t2385, 0, 0, 0, 0, 0, 0, t2394, t2396, t2390, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2633, t2630, t2613, t2602, 0, 0, 0, 0, 0, 0, t2557, t2568, t2544, t2510, 0, 0, 0, 0, 0, 0, t2498, t2508, t2488, t2436, 0, 0, 0, 0, 0, 0, t2446, t2456, t2425, t2393, 0, 0, 0, 0, 0, 0, t2412, t2414, t2410, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2629, t2621, t2612, t2601, 0, 0, 0, 0, 0, 0, -t2583, -t2585, -t2591, -t2578, 0, 0, 0, 0, 0, 0, -t2545, -t2547, -t2549, -t2534, 0, 0, 0, 0, 0, 0, -t2499, t2712, -t2526, -t2495, 0, 0, 0, 0, 0, 0, -t2470, -t2472, -t2457, -t2407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2614, t2611, t2634, t2616, 0, 0, 0, 0, 0, 0, t2556, t2567, t2543, t2509, 0, 0, 0, 0, 0, 0, t2497, t2507, t2487, t2435, 0, 0, 0, 0, 0, 0, t2445, t2455, t2424, t2392, 0, 0, 0, 0, 0, 0, t2411, t2413, t2409, t2383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2599, t2593, t2584, t2542, 0, 0, 0, 0, 0, 0, t2530, t2540, t2515, t2460, 0, 0, 0, 0, 0, 0, t2477, t2482, t2444, t2402, 0, 0, 0, 0, 0, 0, t2431, t2433, t2427, t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2594, t2608, t2586, t2541, 0, 0, 0, 0, 0, 0, t2529, t2539, t2514, t2459, 0, 0, 0, 0, 0, 0, t2476, t2481, t2443, t2401, 0, 0, 0, 0, 0, 0, t2430, t2432, t2426, t2387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2583, t2585, t2591, t2578, 0, 0, 0, 0, 0, 0, t2545, t2547, t2549, t2534, 0, 0, 0, 0, 0, 0, t2499, -t2712, t2526, t2495, 0, 0, 0, 0, 0, 0, t2470, t2472, t2457, t2407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2566, t2559, t2546, t2490, 0, 0, 0, 0, 0, 0, t2504, t2513, t2475, t2421, 0, 0, 0, 0, 0, 0, t2450, t2452, t2448, t2399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2560, t2589, t2548, t2489, 0, 0, 0, 0, 0, 0, t2503, t2512, t2474, t2420, 0, 0, 0, 0, 0, 0, t2449, t2451, t2447, t2398; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2545, t2547, t2549, t2534, 0, 0, 0, 0, 0, 0, t2499, -t2712, t2526, t2495, 0, 0, 0, 0, 0, 0, t2470, t2472, t2457, t2407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2535, t2531, t2500, t2441, 0, 0, 0, 0, 0, 0, t2471, t2473, t2458, t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2532, t2552, t2502, t2440, 0, 0, 0, 0, 0, 0, -t2483, -t2485, -t2511, -t2438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2499, -t2712, t2526, t2495, 0, 0, 0, 0, 0, 0, t2470, t2472, t2457, t2407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2516, t2493, t2484, t2423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2492, t2522, t2486, t2422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2483, t2485, t2511, t2438;];
f_new_reg  = t1;
