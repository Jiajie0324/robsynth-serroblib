% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR7_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRPRR7_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:40:03
% EndTime: 2019-03-09 18:40:37
% DurationCPUTime: 24.77s
% Computational Cost: add. (19749->733), mult. (48439->993), div. (0->0), fcn. (40381->16), ass. (0->329)
t851 = cos(qJ(5));
t843 = cos(pkin(6));
t960 = qJD(1) * t843;
t825 = qJD(2) + t960;
t852 = cos(qJ(3));
t847 = sin(qJ(3));
t848 = sin(qJ(2));
t841 = sin(pkin(6));
t961 = qJD(1) * t841;
t931 = t848 * t961;
t905 = t847 * t931;
t745 = -t852 * t825 + t905;
t747 = t825 * t847 + t852 * t931;
t840 = sin(pkin(12));
t842 = cos(pkin(12));
t882 = t745 * t842 + t747 * t840;
t693 = t851 * t882;
t695 = t745 * t840 - t747 * t842;
t846 = sin(qJ(5));
t639 = -t695 * t846 + t693;
t850 = cos(qJ(6));
t1061 = t639 * t850;
t951 = qJD(6) * t850;
t1070 = t1061 + t951;
t853 = cos(qJ(2));
t959 = qJD(1) * t853;
t930 = t841 * t959;
t1069 = qJD(3) - t930;
t795 = -qJD(5) - t1069;
t1008 = t639 * t795;
t1036 = -t851 * t695 - t846 * t882;
t1010 = t1036 * t795;
t845 = sin(qJ(6));
t627 = t1036 * t850 - t795 * t845;
t1011 = t627 * t1036;
t1060 = -qJD(6) - t639;
t947 = qJD(1) * qJD(2);
t924 = t853 * t947;
t945 = qJDD(1) * t848;
t1056 = t924 + t945;
t1041 = t1056 * t841;
t946 = qJDD(1) * t843;
t824 = qJDD(2) + t946;
t955 = qJD(3) * t852;
t688 = -qJD(3) * t905 + t1041 * t852 + t847 * t824 + t825 * t955;
t957 = qJD(2) * t853;
t927 = t847 * t957;
t956 = qJD(3) * t847;
t689 = (qJD(1) * (t848 * t955 + t927) + t847 * t945) * t841 - t852 * t824 + t825 * t956;
t633 = -t688 * t840 - t689 * t842;
t634 = t688 * t842 - t689 * t840;
t954 = qJD(5) * t846;
t572 = -qJD(5) * t693 + t846 * t633 + t851 * t634 + t695 * t954;
t944 = qJDD(1) * t853;
t823 = t841 * t944;
t925 = t848 * t947;
t903 = t841 * t925;
t765 = qJDD(3) - t823 + t903;
t754 = qJDD(5) + t765;
t935 = t850 * t572 + t845 * t754 - t795 * t951;
t952 = qJD(6) * t845;
t550 = -t1036 * t952 + t935;
t548 = t550 * t845;
t918 = t572 * t845 - t850 * t754;
t551 = qJD(6) * t627 + t918;
t573 = qJD(5) * t1036 - t851 * t633 + t846 * t634;
t570 = qJDD(6) + t573;
t566 = t845 * t570;
t1006 = t1036 * t845;
t625 = t850 * t795 + t1006;
t912 = t1060 * t845;
t1068 = t754 * MDP(24) + (-t573 - t1010) * MDP(23) - t639 ^ 2 * MDP(21) + (MDP(20) * t639 + MDP(21) * t1036 + MDP(31) * t1060) * t1036 + (t572 - t1008) * MDP(22) + (-t1060 * t1070 - t1011 + t566) * MDP(29) + (t1070 * t627 + t548) * MDP(27) + (-t1070 * t625 + t550 * t850 - t845 * t551 + t627 * t912) * MDP(28);
t900 = pkin(2) * t848 - pkin(9) * t853;
t769 = t900 * t961;
t751 = t852 * t769;
t942 = pkin(1) * t960;
t768 = -pkin(8) * t931 + t853 * t942;
t844 = -qJ(4) - pkin(9);
t921 = qJD(3) * t844;
t982 = t852 * t853;
t1066 = -t751 - (pkin(3) * t848 - qJ(4) * t982) * t961 + t852 * t921 + (t768 - qJD(4)) * t847;
t904 = t847 * t930;
t969 = t852 * t768 + t847 * t769;
t1065 = -qJ(4) * t904 - qJD(4) * t852 - t847 * t921 + t969;
t1044 = pkin(10) * t695;
t771 = pkin(8) * t930 + t848 * t942;
t733 = pkin(9) * t825 + t771;
t880 = -pkin(2) * t853 - pkin(9) * t848 - pkin(1);
t763 = t880 * t841;
t738 = qJD(1) * t763;
t686 = -t733 * t847 + t852 * t738;
t659 = -qJ(4) * t747 + t686;
t649 = pkin(3) * t1069 + t659;
t687 = t733 * t852 + t738 * t847;
t660 = -qJ(4) * t745 + t687;
t655 = t840 * t660;
t607 = t842 * t649 - t655;
t587 = pkin(4) * t1069 + t1044 + t607;
t1043 = pkin(10) * t882;
t989 = t842 * t660;
t608 = t840 * t649 + t989;
t591 = t608 - t1043;
t558 = t587 * t851 - t591 * t846;
t556 = pkin(5) * t795 - t558;
t1062 = t556 * t639;
t788 = t840 * t852 + t842 * t847;
t1049 = t1069 * t788;
t787 = -t840 * t847 + t842 * t852;
t1057 = t1069 * t787;
t598 = pkin(5) * t1036 + pkin(11) * t639;
t732 = -t825 * pkin(2) - t768;
t694 = t745 * pkin(3) + qJD(4) + t732;
t644 = pkin(4) * t882 + t694;
t849 = sin(qJ(1));
t984 = t849 * t853;
t854 = cos(qJ(1));
t985 = t848 * t854;
t783 = t843 * t985 + t984;
t836 = qJ(3) + pkin(12) + qJ(5);
t831 = sin(t836);
t832 = cos(t836);
t990 = t841 * t854;
t714 = t783 * t832 - t831 * t990;
t980 = t853 * t854;
t986 = t848 * t849;
t785 = -t843 * t986 + t980;
t993 = t841 * t849;
t717 = t785 * t832 + t831 * t993;
t994 = t841 * t848;
t740 = t831 * t843 + t832 * t994;
t941 = pkin(1) * qJD(2) * t843;
t908 = qJD(1) * t941;
t940 = pkin(1) * t946;
t934 = -pkin(8) * t823 - t848 * t940 - t853 * t908;
t865 = -pkin(8) * t903 - t934;
t701 = pkin(9) * t824 + t865;
t877 = t900 * qJD(2);
t703 = (qJD(1) * t877 + qJDD(1) * t880) * t841;
t860 = -qJD(3) * t687 - t847 * t701 + t852 * t703;
t584 = pkin(3) * t765 - qJ(4) * t688 - qJD(4) * t747 + t860;
t876 = -t852 * t701 - t847 * t703 + t733 * t956 - t738 * t955;
t589 = -qJ(4) * t689 - qJD(4) * t745 - t876;
t552 = t842 * t584 - t589 * t840;
t543 = pkin(4) * t765 - pkin(10) * t634 + t552;
t553 = t840 * t584 + t842 * t589;
t545 = pkin(10) * t633 + t553;
t953 = qJD(5) * t851;
t907 = -t846 * t543 - t851 * t545 - t587 * t953 + t591 * t954;
t1059 = g(1) * t717 + g(2) * t714 + g(3) * t740 + t639 * t644 + t907;
t972 = t1065 * t840 + t1066 * t842;
t1032 = -t1065 * t842 + t1066 * t840;
t1051 = pkin(4) * t931 + pkin(10) * t1057 - t972;
t1050 = -pkin(10) * t1049 + t1032;
t1012 = t625 * t1036;
t1000 = t783 * t831;
t716 = -t785 * t831 + t832 * t993;
t1039 = g(3) * (-t831 * t994 + t832 * t843) + g(2) * (-t832 * t990 - t1000) + g(1) * t716;
t559 = t587 * t846 + t591 * t851;
t861 = -qJD(5) * t559 + t851 * t543 - t846 * t545;
t534 = -pkin(5) * t754 - t861;
t532 = t534 * t845;
t557 = -pkin(11) * t795 + t559;
t578 = t639 * pkin(5) - pkin(11) * t1036 + t644;
t540 = t557 * t850 + t578 * t845;
t1048 = t540 * t1036 + t1039 * t845 + t556 * t951 + t532;
t891 = t557 * t845 - t578 * t850;
t1047 = t891 * t1036 + t556 * t952;
t1046 = -t1036 * t644 - t1039 + t861;
t881 = t851 * t787 - t788 * t846;
t974 = qJD(5) * t881 - t1049 * t846 + t1057 * t851;
t719 = t787 * t846 + t788 * t851;
t973 = qJD(5) * t719 + t1049 * t851 + t1057 * t846;
t1040 = -t771 + (-t904 + t956) * pkin(3);
t782 = -t843 * t980 + t986;
t1038 = t714 * t845 - t782 * t850;
t1037 = t714 * t850 + t782 * t845;
t837 = t841 ^ 2;
t943 = 0.2e1 * t837;
t808 = t844 * t847;
t809 = t844 * t852;
t730 = t842 * t808 + t809 * t840;
t707 = -pkin(10) * t788 + t730;
t731 = t840 * t808 - t842 * t809;
t708 = pkin(10) * t787 + t731;
t884 = t707 * t851 - t708 * t846;
t1035 = qJD(5) * t884 + t1050 * t851 - t1051 * t846;
t652 = t707 * t846 + t708 * t851;
t1034 = qJD(5) * t652 + t1050 * t846 + t1051 * t851;
t992 = t841 * t852;
t780 = t843 * t847 + t848 * t992;
t1025 = pkin(1) * t848;
t991 = t841 * t853;
t965 = pkin(8) * t991 + t843 * t1025;
t762 = pkin(9) * t843 + t965;
t914 = -t762 * t847 + t852 * t763;
t669 = -pkin(3) * t991 - qJ(4) * t780 + t914;
t779 = -t843 * t852 + t847 * t994;
t970 = t852 * t762 + t847 * t763;
t676 = -qJ(4) * t779 + t970;
t620 = t842 * t669 - t676 * t840;
t710 = -t779 * t840 + t780 * t842;
t603 = -pkin(4) * t991 - pkin(10) * t710 + t620;
t621 = t840 * t669 + t842 * t676;
t709 = -t779 * t842 - t780 * t840;
t605 = pkin(10) * t709 + t621;
t1033 = t846 * t603 + t851 * t605;
t971 = t1049 * pkin(4) + t1040;
t1022 = pkin(3) * t840;
t833 = pkin(3) * t842 + pkin(4);
t966 = t851 * t1022 + t846 * t833;
t567 = t850 * t570;
t1031 = -t1060 * t952 - t567;
t1019 = g(1) * t854;
t1030 = g(2) * t849 + t1019;
t1029 = pkin(3) * t689 + qJDD(4);
t723 = -t785 * t847 + t849 * t992;
t981 = t852 * t854;
t999 = t783 * t847;
t1028 = g(3) * t779 - g(1) * t723 - g(2) * (-t841 * t981 - t999);
t928 = t841 * t957;
t722 = -qJD(3) * t779 + t852 * t928;
t770 = t841 * t877;
t826 = pkin(8) * t994;
t988 = t843 * t853;
t772 = (t988 * pkin(1) - t826) * qJD(2);
t862 = -qJD(3) * t970 + t852 * t770 - t772 * t847;
t958 = qJD(2) * t848;
t929 = t841 * t958;
t618 = pkin(3) * t929 - qJ(4) * t722 - qJD(4) * t780 + t862;
t721 = qJD(3) * t780 + t841 * t927;
t875 = -t762 * t956 + t763 * t955 + t847 * t770 + t852 * t772;
t622 = -qJ(4) * t721 - qJD(4) * t779 + t875;
t580 = t842 * t618 - t622 * t840;
t675 = -t721 * t840 + t722 * t842;
t565 = pkin(4) * t929 - pkin(10) * t675 + t580;
t581 = t840 * t618 + t842 * t622;
t674 = -t721 * t842 - t722 * t840;
t571 = pkin(10) * t674 + t581;
t1026 = -qJD(5) * t1033 + t565 * t851 - t571 * t846;
t1024 = pkin(2) * t824;
t1014 = g(3) * t841;
t1013 = MDP(6) * t841;
t1005 = t719 * t850;
t1004 = t745 * t1069;
t1003 = t747 * t1069;
t998 = t824 * MDP(8);
t997 = t832 * t845;
t996 = t832 * t850;
t995 = t837 * qJD(1) ^ 2;
t987 = t845 * t853;
t983 = t850 * t853;
t977 = pkin(5) * t931 + t1034;
t611 = t842 * t659 - t655;
t610 = -t659 * t840 - t989;
t596 = t610 + t1043;
t597 = t611 + t1044;
t878 = -t1022 * t846 + t833 * t851;
t968 = t878 * qJD(5) - t596 * t846 - t597 * t851;
t967 = qJD(5) * t966 + t596 * t851 - t597 * t846;
t773 = pkin(8) * t928 + t848 * t941;
t838 = t848 ^ 2;
t964 = -t853 ^ 2 + t838;
t950 = qJD(2) - t825;
t939 = t853 * t995;
t938 = t841 * t987;
t937 = t841 * t983;
t834 = pkin(3) * t852 + pkin(2);
t533 = pkin(11) * t754 - t907;
t906 = pkin(8) * t1041 + t848 * t908 - t853 * t940;
t702 = t906 - t1024;
t643 = t702 + t1029;
t592 = -pkin(4) * t633 + t643;
t538 = pkin(5) * t573 - pkin(11) * t572 + t592;
t920 = -t845 * t533 + t850 * t538;
t916 = -t845 * t974 - t850 * t931;
t915 = t845 * t931 - t850 * t974;
t913 = t783 * t852 - t847 * t990;
t911 = t825 + t960;
t662 = pkin(3) * t747 - pkin(4) * t695;
t767 = pkin(11) + t966;
t910 = qJD(6) * t767 + t598 + t662;
t909 = t824 + t946;
t901 = pkin(3) * t721 + t773;
t784 = t843 * t984 + t985;
t899 = -g(1) * t782 + g(2) * t784;
t898 = g(1) * t785 + g(2) * t783;
t755 = -pkin(4) * t787 - t834;
t650 = -pkin(5) * t881 - pkin(11) * t719 + t755;
t896 = pkin(11) * t931 - qJD(6) * t650 - t1035;
t895 = -pkin(5) * t973 + pkin(11) * t974 + qJD(6) * t652 - t971;
t893 = t850 * t533 + t845 * t538;
t892 = -t767 * t570 + t1062;
t563 = -pkin(11) * t991 + t1033;
t654 = t709 * t846 + t710 * t851;
t761 = t826 + (-pkin(1) * t853 - pkin(2)) * t843;
t866 = pkin(3) * t779 + t761;
t661 = -pkin(4) * t709 + t866;
t883 = t851 * t709 - t710 * t846;
t585 = -pkin(5) * t883 - pkin(11) * t654 + t661;
t890 = t563 * t850 + t585 * t845;
t889 = -t563 * t845 + t585 * t850;
t887 = t603 * t851 - t605 * t846;
t879 = t639 * t912 - t1031;
t645 = t654 * t845 + t937;
t635 = -pkin(4) * t674 + t901;
t874 = t846 * t565 + t851 * t571 + t603 * t953 - t605 * t954;
t872 = t719 * t951 - t916;
t871 = -t719 * t952 - t915;
t868 = -g(1) * t784 - g(2) * t782 + g(3) * t991;
t867 = -t534 - t1039;
t864 = -pkin(9) * t765 + t1069 * t732;
t859 = -t868 - t906;
t858 = -pkin(9) * qJD(3) * t1069 - t702 - t868;
t766 = -pkin(5) - t878;
t724 = t785 * t852 + t847 * t993;
t683 = t717 * t850 + t784 * t845;
t682 = -t717 * t845 + t784 * t850;
t646 = t654 * t850 - t938;
t594 = qJD(5) * t654 - t851 * t674 + t675 * t846;
t593 = qJD(5) * t883 + t674 * t846 + t675 * t851;
t575 = -qJD(6) * t938 + t593 * t845 + t654 * t951 - t850 * t929;
t574 = -qJD(6) * t645 + t593 * t850 + t845 * t929;
t562 = pkin(5) * t991 - t887;
t546 = pkin(5) * t594 - pkin(11) * t593 + t635;
t536 = -pkin(5) * t929 - t1026;
t535 = pkin(11) * t929 + t874;
t531 = -qJD(6) * t540 + t920;
t530 = -qJD(6) * t891 + t893;
t1 = [(-t1036 * t594 + t572 * t883 - t573 * t654 - t593 * t639) * MDP(21) + (-g(1) * t1000 - g(2) * t716 - t1033 * t754 + t1036 * t635 + t661 * t572 + t592 * t654 + t644 * t593 + t874 * t795) * MDP(26) + (t1036 * t593 + t572 * t654) * MDP(20) + (-pkin(1) * t1056 * t943 - t772 * t825 - t965 * t824 - t865 * t843 + t899) * MDP(10) + ((t689 * t853 - t745 * t958) * MDP(14) + (t686 * t958 - t853 * t860) * MDP(16) + (-t688 * t853 + t747 * t958) * MDP(13) + (t1036 * t958 - t572 * t853) * MDP(22) + (-g(1) * t981 - t687 * t958 - t853 * t876) * MDP(17) + (-t1019 * t832 - t559 * t958 - t853 * t907) * MDP(26) + (t573 * t853 - t639 * t958) * MDP(23) + (t558 * t958 - t853 * t861) * MDP(25) - t1030 * (pkin(3) * t847 + pkin(8)) * MDP(19) + (t853 * t909 - t911 * t958) * MDP(7) + (t1069 * t958 - t765 * t853) * MDP(15) + (-t754 * t853 - t795 * t958) * MDP(24)) * t841 + (t1069 * t722 + t765 * t780) * MDP(13) + (-t1069 * t721 - t765 * t779) * MDP(14) + (g(1) * t913 - g(2) * t724 + t1069 * t862 + t761 * t689 + t702 * t779 + t732 * t721 + t773 * t745 + t914 * t765) * MDP(16) + (-g(1) * t999 - g(2) * t723 - t1069 * t875 + t761 * t688 + t702 * t780 + t732 * t722 + t773 * t747 - t970 * t765) * MDP(17) + (-t593 * t795 + t654 * t754) * MDP(22) + (t594 * t795 + t754 * t883) * MDP(23) + (-t552 * t710 + t553 * t709 + t580 * t695 - t581 * t882 - t607 * t675 + t608 * t674 - t620 * t634 + t621 * t633 - t899) * MDP(18) + (g(1) * t714 - g(2) * t717 - t1026 * t795 + t661 * t573 - t592 * t883 + t644 * t594 + t635 * t639 + t887 * t754) * MDP(25) + (-t773 * t825 - t826 * t824 - t906 * t843 + g(1) * t783 - g(2) * t785 + (t824 * t988 + (-t925 + t944) * t943) * pkin(1)) * MDP(9) + (t553 * t621 + t608 * t581 + t552 * t620 + t607 * t580 + t643 * t866 + t694 * t901 - g(1) * (-pkin(1) * t849 + t782 * t844 - t783 * t834) - g(2) * (pkin(1) * t854 - t784 * t844 + t785 * t834)) * MDP(19) + (-(-qJD(6) * t890 - t535 * t845 + t546 * t850) * t1060 + t889 * t570 - t531 * t883 - t891 * t594 + t536 * t625 + t562 * t551 + t534 * t645 + t556 * t575 + g(1) * t1037 - g(2) * t683) * MDP(32) + ((qJD(6) * t889 + t535 * t850 + t546 * t845) * t1060 - t890 * t570 + t530 * t883 - t540 * t594 + t536 * t627 + t562 * t550 + t534 * t646 + t556 * t574 - g(1) * t1038 - g(2) * t682) * MDP(33) + (t1060 * t575 + t551 * t883 - t570 * t645 - t594 * t625) * MDP(30) + (-t1060 * t574 - t550 * t883 + t570 * t646 + t594 * t627) * MDP(29) + (-t1060 * t594 - t570 * t883) * MDP(31) + (qJDD(1) * t838 + 0.2e1 * t848 * t924) * t837 * MDP(4) + t1030 * MDP(3) + (t848 * t944 - t947 * t964) * MDP(5) * t943 + (g(1) * t849 - g(2) * t854) * MDP(2) + (-t688 * t779 - t689 * t780 - t721 * t747 - t722 * t745) * MDP(12) + (t688 * t780 + t722 * t747) * MDP(11) + (-t550 * t645 - t551 * t646 - t574 * t625 - t575 * t627) * MDP(28) + (t550 * t646 + t574 * t627) * MDP(27) + qJDD(1) * MDP(1) + t843 * t998 + (t848 * t909 + t911 * t957) * t1013; (t1035 * t795 + t1036 * t971 + t755 * t572 + t592 * t719 + t974 * t644 - t652 * t754 + t868 * t831) * MDP(26) + (t1036 * t974 + t572 * t719) * MDP(20) + (-t1036 * t973 + t572 * t881 - t573 * t719 - t639 * t974) * MDP(21) + (-t1069 * t956 + t765 * t852 + (t1069 * t847 * t853 + t745 * t848) * t961) * MDP(14) + (-pkin(2) * t688 + t1069 * t969 - t771 * t747 - t847 * t858 + t852 * t864) * MDP(17) + (-pkin(2) * t689 - t771 * t745 - t751 * t1069 + (t1069 * t768 + t864) * t847 + t858 * t852) * MDP(16) + (-MDP(15) * t1069 - t686 * MDP(16) + t687 * MDP(17) - MDP(22) * t1036 + t639 * MDP(23) + t795 * MDP(24) - t558 * MDP(25) + t559 * MDP(26) - MDP(7) * t950) * t931 + (t1069 * t955 + t847 * t765 + (-t1069 * t982 - t747 * t848) * t961) * MDP(13) + (t916 * t627 + t915 * t625 + (-t548 - t551 * t850 + (t625 * t845 - t627 * t850) * qJD(6)) * t719) * MDP(28) + (t553 * t731 + t552 * t730 - t643 * t834 - g(1) * (-t784 * t834 - t785 * t844) - g(2) * (-t782 * t834 - t783 * t844) - (t834 * t853 - t844 * t848) * t1014 + t1040 * t694 + t1032 * t608 + t972 * t607) * MDP(19) + t964 * MDP(5) * t995 + (pkin(1) * t939 + t768 * t825 + (pkin(8) * t947 + g(3)) * t994 + t898 + t934) * MDP(10) + (t1005 * t550 + t627 * t871) * MDP(27) + (t1025 * t995 + t771 * t825 + t859) * MDP(9) + (t754 * t881 + t795 * t973) * MDP(23) + (t1034 * t795 + t755 * t573 - t592 * t881 + t971 * t639 + t973 * t644 + t754 * t884 - t868 * t832) * MDP(25) + t998 + (-t1060 * t973 - t570 * t881) * MDP(31) + (t1060 * t872 + t551 * t881 - t566 * t719 - t625 * t973) * MDP(30) + (-t1060 * t871 - t550 * t881 + t567 * t719 + t627 * t973) * MDP(29) + (-(t650 * t845 + t652 * t850) * t570 + t530 * t881 - t884 * t550 + t534 * t1005 - g(1) * (t784 * t997 + t785 * t850) - g(2) * (t782 * t997 + t783 * t850) - (-t832 * t987 + t848 * t850) * t1014 - (t845 * t895 + t850 * t896) * t1060 + t977 * t627 - t973 * t540 + t871 * t556) * MDP(33) + ((t650 * t850 - t652 * t845) * t570 - t531 * t881 - t884 * t551 + t719 * t532 - g(1) * (-t784 * t996 + t785 * t845) - g(2) * (-t782 * t996 + t783 * t845) - (t832 * t983 + t845 * t848) * t1014 - (t845 * t896 - t850 * t895) * t1060 + t977 * t625 - t973 * t891 + t872 * t556) * MDP(32) + (t719 * t754 - t795 * t974) * MDP(22) - t848 * MDP(4) * t939 + t823 * MDP(7) + (-g(3) * t994 - t1032 * t882 - t1049 * t608 - t1057 * t607 - t552 * t788 + t553 * t787 + t731 * t633 - t730 * t634 + t972 * t695 - t898) * MDP(18) + (t1003 * t852 + t688 * t847) * MDP(11) + ((t688 - t1004) * t852 + (-t1003 - t689) * t847) * MDP(12) + (t950 * t959 + t945) * t1013; (t688 + t1004) * MDP(13) + (-t1036 * t662 - t754 * t966 + t795 * t968 + t1059) * MDP(26) + (-t689 + t1003) * MDP(14) + t747 * t745 * MDP(11) + (g(1) * t724 + g(2) * t913 + g(3) * t780 + t1069 * t686 + t732 * t745 + t876) * MDP(17) + (t766 * t551 + t967 * t625 + (t1060 * t968 + t892) * t845 + (t1060 * t910 + t867) * t850 + t1047) * MDP(32) + (t766 * t550 + t892 * t850 + t967 * t627 - (t845 * t910 - t850 * t968) * t1060 + t1048) * MDP(33) + (-t662 * t639 + t754 * t878 + t795 * t967 + t1046) * MDP(25) + (-t607 * t610 - t608 * t611 + (t552 * t842 + t553 * t840 - t694 * t747 + t1028) * pkin(3)) * MDP(19) + (t1069 * t687 - t732 * t747 + t1028 + t860) * MDP(16) + (t879 + t1012) * MDP(30) + t765 * MDP(15) + (-t745 ^ 2 + t747 ^ 2) * MDP(12) + ((t633 * t840 - t634 * t842) * pkin(3) + (t611 - t607) * t882 + (-t608 - t610) * t695) * MDP(18) + t1068; (-t695 ^ 2 - t882 ^ 2) * MDP(18) + (-t607 * t695 + t608 * t882 - t1024 + t1029 - t859) * MDP(19) + (t573 - t1010) * MDP(25) + (t572 + t1008) * MDP(26) + (t879 - t1012) * MDP(32) + (-t1060 ^ 2 * t850 - t1011 - t566) * MDP(33); (-t559 * t795 + t1046) * MDP(25) + (-t558 * t795 + t1059) * MDP(26) + (-t1060 * t912 + t1012 + t567) * MDP(30) + (-pkin(5) * t551 - t559 * t625 + (-pkin(11) * t570 - t1060 * t558 + t1062) * t845 + (-(-pkin(11) * qJD(6) - t598) * t1060 + t867) * t850 + t1047) * MDP(32) + (-pkin(5) * t550 - (t558 * t850 + t598 * t845) * t1060 - t559 * t627 + t556 * t1061 + t1031 * pkin(11) + t1048) * MDP(33) + t1068; t627 * t625 * MDP(27) + (-t625 ^ 2 + t627 ^ 2) * MDP(28) + (-t1060 * t625 + t935) * MDP(29) + (-t1060 * t627 - t918) * MDP(30) + t570 * MDP(31) + (-t540 * t1060 - t556 * t627 - g(1) * t682 + g(2) * t1038 - g(3) * (-t740 * t845 - t937) + t920) * MDP(32) + (t891 * t1060 + t556 * t625 + g(1) * t683 + g(2) * t1037 - g(3) * (-t740 * t850 + t938) - t893) * MDP(33) + (-MDP(29) * t1006 - MDP(30) * t627 - MDP(32) * t540 + MDP(33) * t891) * qJD(6);];
tau  = t1;
