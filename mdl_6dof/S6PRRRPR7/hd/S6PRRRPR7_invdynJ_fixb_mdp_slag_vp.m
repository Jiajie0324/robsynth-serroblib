% Calculate vector of inverse dynamics joint torques for
% S6PRRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1,theta5]';
% MDP [29x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6PRRRPR7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6PRRRPR7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(29,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRPR7_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [29 1]), ...
  'S6PRRRPR7_invdynJ_fixb_mdp_slag_vp: MDP has to be [29x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:45:08
% EndTime: 2019-03-08 23:45:39
% DurationCPUTime: 22.84s
% Computational Cost: add. (10714->766), mult. (27247->1087), div. (0->0), fcn. (23503->18), ass. (0->304)
t765 = sin(pkin(7));
t770 = sin(qJ(3));
t774 = cos(qJ(3));
t808 = (pkin(3) * t770 - pkin(10) * t774) * t765;
t766 = sin(pkin(6));
t771 = sin(qJ(2));
t907 = t766 * t771;
t868 = qJD(1) * t907;
t956 = qJD(3) * t808 - t765 * t868;
t926 = cos(pkin(7));
t853 = t770 * t926;
t936 = cos(qJ(2));
t789 = -t771 * t853 + t774 * t936;
t678 = t789 * t766;
t852 = t774 * t926;
t910 = t765 * t770;
t810 = pkin(2) * t852 - pkin(9) * t910;
t953 = qJD(1) * t678 - t810 * qJD(3);
t773 = cos(qJ(4));
t850 = t926 * qJD(2);
t816 = t850 + qJD(3);
t769 = sin(qJ(4));
t884 = qJD(2) * t765;
t867 = t770 * t884;
t840 = t769 * t867;
t674 = -t773 * t816 + t840;
t663 = qJD(6) + t674;
t676 = t769 * t816 + t773 * t867;
t866 = t774 * t884;
t741 = -qJD(4) + t866;
t764 = sin(pkin(13));
t767 = cos(pkin(13));
t628 = t676 * t764 + t767 * t741;
t772 = cos(qJ(6));
t630 = t676 * t767 - t741 * t764;
t768 = sin(qJ(6));
t922 = t630 * t768;
t949 = -t772 * t628 - t922;
t955 = t663 * t949;
t908 = t765 * t774;
t886 = pkin(2) * t853 + pkin(9) * t908;
t688 = pkin(10) * t926 + t886;
t830 = -pkin(3) * t774 - pkin(10) * t770;
t689 = (-pkin(2) + t830) * t765;
t880 = qJD(4) * t773;
t881 = qJD(4) * t769;
t954 = -t688 * t881 + t689 * t880 + t769 * t956 - t953 * t773;
t788 = t770 * t936 + t771 * t852;
t677 = t788 * t766;
t890 = -qJD(1) * t677 + t886 * qJD(3);
t861 = qJD(1) * t936;
t727 = qJD(2) * pkin(2) + t766 * t861;
t927 = cos(pkin(6));
t856 = t765 * t927;
t945 = qJD(1) * t856 + t926 * t727;
t883 = qJD(3) * t770;
t952 = (qJ(5) * t883 - qJD(5) * t774) * t765 + t954;
t709 = t769 * t910 - t773 * t926;
t882 = qJD(3) * t774;
t863 = t765 * t882;
t839 = t773 * t863;
t646 = -qJD(4) * t709 + t839;
t909 = t765 * t773;
t710 = t769 * t926 + t770 * t909;
t862 = t769 * t882;
t647 = qJD(4) * t710 + t765 * t862;
t951 = t647 * pkin(4) - t646 * qJ(5) - t710 * qJD(5) + t890;
t712 = pkin(9) * t884 + t868;
t610 = t774 * t712 + t770 * t945;
t950 = qJD(5) * t769 + t610 + t741 * (pkin(4) * t769 - qJ(5) * t773);
t817 = t628 * t768 - t630 * t772;
t948 = t663 * t817;
t946 = t688 * t880 + t689 * t881 - t953 * t769 - t773 * t956;
t933 = pkin(9) * t765;
t944 = -qJDD(2) * t933 - (qJD(2) * t861 + qJDD(1) * t771) * t766 - t945 * qJD(3);
t846 = t926 * qJDD(2);
t749 = t846 + qJDD(3);
t793 = qJD(4) * t816;
t875 = qJDD(2) * t770;
t587 = -t773 * t749 + t765 * (qJD(2) * (t770 * t880 + t862) + t769 * t875) + t769 * t793;
t900 = -t764 * t952 + t951 * t767;
t943 = t951 * t764 + t767 * t952;
t609 = -t770 * t712 + t774 * t945;
t696 = qJD(2) * t808;
t896 = t773 * t609 + t769 * t696;
t561 = qJ(5) * t867 + t896;
t942 = t767 * t561 + t764 * t950;
t864 = t765 * t883;
t897 = -pkin(4) * t864 + t946;
t873 = pkin(10) * t881;
t893 = -t950 * t767 + (t561 + t873) * t764;
t925 = cos(pkin(12));
t823 = t927 * t925;
t924 = sin(pkin(12));
t780 = t771 * t924 - t823 * t936;
t855 = t766 * t925;
t941 = t765 * t855 + t780 * t926;
t822 = t927 * t924;
t781 = t771 * t925 + t822 * t936;
t854 = t766 * t924;
t940 = -t765 * t854 + t781 * t926;
t835 = t926 * t936;
t939 = -t770 * t771 + t774 * t835;
t874 = qJDD(2) * t774;
t747 = t765 * t874;
t876 = qJD(2) * qJD(3);
t860 = t770 * t876;
t690 = t765 * t860 + qJDD(4) - t747;
t938 = -pkin(4) * t690 + qJDD(5);
t705 = t771 * t823 + t924 * t936;
t594 = t705 * t770 + t774 * t941;
t706 = -t771 * t822 + t925 * t936;
t596 = t706 * t770 + t774 * t940;
t640 = -t766 * t939 - t774 * t856;
t795 = g(1) * t596 + g(2) * t594 + g(3) * t640;
t775 = qJD(2) ^ 2;
t934 = pkin(5) * t769;
t929 = pkin(11) + qJ(5);
t928 = pkin(10) * qJD(4);
t923 = qJ(5) * t587;
t921 = t674 * t741;
t920 = t674 * t764;
t919 = t676 * t741;
t824 = t927 * t926;
t869 = t766 * t936;
t704 = -t765 * t869 + t824;
t918 = t704 * t765;
t806 = t741 * t769;
t917 = t749 * MDP(9);
t761 = pkin(13) + qJ(6);
t758 = sin(t761);
t916 = t758 * t773;
t759 = cos(t761);
t915 = t759 * t773;
t913 = t764 * t768;
t912 = t764 * t773;
t911 = t765 * t769;
t906 = t767 * t769;
t905 = t767 * t773;
t903 = t771 * t775;
t902 = t773 * t774;
t901 = qJDD(1) - g(3);
t748 = qJDD(1) * t869;
t865 = qJD(2) * t907;
t838 = qJD(1) * t865;
t683 = qJDD(2) * pkin(2) + t748 - t838;
t829 = qJDD(1) * t856;
t786 = -t683 * t853 + t712 * t883 - t770 * t829 + t774 * t944;
t525 = pkin(10) * t749 - t786;
t745 = qJDD(1) * t824;
t802 = t860 - t874;
t859 = t774 * t876;
t803 = t859 + t875;
t569 = t745 + (pkin(3) * t802 - pkin(10) * t803 - t683) * t765;
t593 = pkin(10) * t816 + t610;
t746 = qJD(1) * t824;
t627 = t746 + (qJD(2) * t830 - t727) * t765;
t801 = t773 * t525 + t769 * t569 - t593 * t881 + t627 * t880;
t489 = qJ(5) * t690 - qJD(5) * t741 + t801;
t809 = t683 * t852 - t712 * t882 + t770 * t944 + t774 * t829;
t526 = -pkin(3) * t749 - t809;
t858 = t765 * t875;
t586 = qJD(2) * t839 - qJD(4) * t840 + t769 * t749 + (t793 + t858) * t773;
t495 = pkin(4) * t587 - qJ(5) * t586 - qJD(5) * t676 + t526;
t484 = t767 * t489 + t764 * t495;
t615 = t646 * t764 - t767 * t864;
t898 = pkin(5) * t615 + t897;
t539 = t773 * t593 + t769 * t627;
t531 = -qJ(5) * t741 + t539;
t592 = -pkin(3) * t816 - t609;
t540 = t674 * pkin(4) - t676 * qJ(5) + t592;
t501 = t767 * t531 + t764 * t540;
t538 = -t769 * t593 + t627 * t773;
t608 = pkin(4) * t676 + qJ(5) * t674;
t514 = t767 * t538 + t764 * t608;
t687 = -pkin(3) * t926 - t810;
t598 = t709 * pkin(4) - t710 * qJ(5) + t687;
t891 = t773 * t688 + t769 * t689;
t601 = -qJ(5) * t908 + t891;
t529 = t764 * t598 + t767 * t601;
t654 = -t767 * t867 + t866 * t912;
t655 = (t764 * t770 + t767 * t902) * t884;
t716 = -t772 * t767 + t913;
t717 = t764 * t772 + t767 * t768;
t879 = qJD(6) * t769;
t895 = t654 * t768 - t655 * t772 - t716 * t880 - t717 * t879;
t878 = qJD(6) * t772;
t894 = -t772 * t654 - t655 * t768 + t717 * t880 + t878 * t906 - t879 * t913;
t892 = -t767 * t873 - t942;
t889 = t663 * t716;
t888 = t663 * t717;
t605 = t769 * t609;
t562 = -pkin(4) * t867 - t696 * t773 + t605;
t870 = pkin(5) * t764 + pkin(10);
t887 = -pkin(5) * t654 + t870 * t880 - t562;
t813 = pkin(4) * t773 + qJ(5) * t769 + pkin(3);
t673 = pkin(10) * t905 - t764 * t813;
t762 = t770 ^ 2;
t885 = -t774 ^ 2 + t762;
t530 = pkin(4) * t741 + qJD(5) - t538;
t877 = -qJD(5) + t530;
t872 = t765 * t907;
t558 = t586 * t764 - t767 * t690;
t559 = t586 * t767 + t690 * t764;
t871 = -t768 * t558 + t772 * t559 - t628 * t878;
t483 = -t489 * t764 + t767 * t495;
t481 = pkin(5) * t587 - pkin(11) * t559 + t483;
t482 = -pkin(11) * t558 + t484;
t849 = t772 * t481 - t768 * t482;
t500 = -t531 * t764 + t767 * t540;
t513 = -t538 * t764 + t767 * t608;
t848 = t772 * t558 + t768 * t559;
t528 = t767 * t598 - t601 * t764;
t847 = -t769 * t688 + t689 * t773;
t760 = t765 ^ 2;
t845 = t760 * t766 * t903;
t844 = t769 * t525 - t773 * t569 + t593 * t880 + t627 * t881;
t841 = t765 * t865;
t833 = qJD(3) * t856;
t832 = t765 * t775 * t926;
t602 = pkin(4) * t908 - t847;
t644 = t710 * t764 + t767 * t908;
t518 = -pkin(11) * t644 + t529;
t616 = t646 * t767 + t764 * t864;
t828 = -pkin(5) * t647 + pkin(11) * t616 + qJD(6) * t518 - t900;
t645 = t710 * t767 - t764 * t908;
t510 = pkin(5) * t709 - pkin(11) * t645 + t528;
t827 = pkin(11) * t615 - qJD(6) * t510 - t943;
t648 = -pkin(11) * t764 * t769 + t673;
t826 = -pkin(11) * t655 + qJD(6) * t648 + t866 * t934 - (-pkin(11) * t905 + t934) * qJD(4) - t893;
t714 = t767 * t813;
t638 = -pkin(11) * t906 - t714 + (-pkin(10) * t764 - pkin(5)) * t773;
t825 = -pkin(11) * t654 - qJD(6) * t638 - (-pkin(10) * t906 - pkin(11) * t912) * qJD(4) + t942;
t820 = t768 * t481 + t772 * t482;
t492 = pkin(5) * t674 - pkin(11) * t630 + t500;
t496 = -pkin(11) * t628 + t501;
t485 = t492 * t772 - t496 * t768;
t486 = t492 * t768 + t496 * t772;
t787 = t770 * t835 + t771 * t774;
t641 = t766 * t787 + t770 * t856;
t600 = t641 * t773 + t704 * t769;
t545 = -t600 * t764 + t640 * t767;
t546 = t600 * t767 + t640 * t764;
t819 = t545 * t772 - t546 * t768;
t818 = t545 * t768 + t546 * t772;
t599 = t641 * t769 - t704 * t773;
t575 = t772 * t644 + t645 * t768;
t576 = -t644 * t768 + t645 * t772;
t815 = 0.2e1 * t850 + qJD(3);
t740 = t929 * t767;
t805 = pkin(11) * t674 * t767 + pkin(5) * t676 + qJD(5) * t764 + qJD(6) * t740 + t513;
t739 = t929 * t764;
t804 = pkin(11) * t920 - qJD(5) * t767 + qJD(6) * t739 + t514;
t497 = -qJD(6) * t922 + t871;
t799 = t765 * (t846 + t749);
t595 = t705 * t774 - t770 * t941;
t597 = t706 * t774 - t770 * t940;
t776 = t765 * t780 - t855 * t926;
t777 = t765 * t781 + t854 * t926;
t798 = g(1) * (t597 * t769 - t773 * t777) + g(2) * (t595 * t769 - t773 * t776) + g(3) * t599;
t548 = t595 * t773 + t769 * t776;
t550 = t597 * t773 + t769 * t777;
t797 = -g(1) * t550 - g(2) * t548 - g(3) * t600;
t619 = -t705 * t853 - t774 * t780;
t571 = t619 * t769 - t705 * t909;
t621 = -t706 * t853 - t774 * t781;
t573 = t621 * t769 - t706 * t909;
t633 = t678 * t769 - t773 * t872;
t796 = g(1) * t573 + g(2) * t571 + g(3) * t633;
t794 = g(1) * t597 + g(2) * t595 + g(3) * t641;
t490 = t844 + t938;
t791 = -t490 + t798;
t790 = -t526 + t795;
t784 = -pkin(10) * t690 - t592 * t741;
t782 = t798 - t844;
t498 = -qJD(6) * t817 + t848;
t757 = -pkin(5) * t767 - pkin(4);
t720 = t870 * t769;
t695 = t716 * t769;
t694 = t717 * t769;
t672 = -pkin(10) * t912 - t714;
t662 = -t727 * t765 + t746;
t637 = -t683 * t765 + t745;
t634 = t678 * t773 + t769 * t872;
t620 = t706 * t852 - t770 * t781;
t618 = t705 * t852 - t770 * t780;
t582 = t774 * t833 + (t789 * qJD(2) + qJD(3) * t939) * t766;
t581 = t770 * t833 + (qJD(2) * t788 + qJD(3) * t787) * t766;
t578 = qJDD(6) + t587;
t574 = t621 * t773 + t706 * t911;
t572 = t619 * t773 + t705 * t911;
t557 = pkin(5) * t644 + t602;
t522 = -pkin(5) * t920 + t539;
t521 = -qJD(4) * t599 + t582 * t773 + t769 * t841;
t520 = qJD(4) * t600 + t582 * t769 - t773 * t841;
t517 = pkin(5) * t628 + t530;
t512 = qJD(6) * t576 + t772 * t615 + t616 * t768;
t511 = -qJD(6) * t575 - t615 * t768 + t616 * t772;
t506 = t521 * t767 + t581 * t764;
t505 = -t521 * t764 + t581 * t767;
t487 = pkin(5) * t558 + t490;
t479 = -qJD(6) * t486 + t849;
t478 = qJD(6) * t485 + t820;
t1 = [t901 * MDP(1) + (-t581 * t816 - t640 * t749 - t774 * t845 + t802 * t918) * MDP(10) + (-t582 * t816 - t641 * t749 + t770 * t845 + t803 * t918) * MDP(11) + (t520 * t741 + t581 * t674 + t587 * t640 - t599 * t690) * MDP(17) + (t521 * t741 + t581 * t676 + t586 * t640 - t600 * t690) * MDP(18) + (t505 * t674 + t520 * t628 + t545 * t587 + t558 * t599) * MDP(19) + (-t506 * t674 + t520 * t630 - t546 * t587 + t559 * t599) * MDP(20) + (-t505 * t630 - t506 * t628 - t545 * t559 - t546 * t558) * MDP(21) + (t483 * t545 + t484 * t546 + t490 * t599 + t500 * t505 + t501 * t506 + t520 * t530 - g(3)) * MDP(22) + ((-qJD(6) * t818 + t505 * t772 - t506 * t768) * t663 + t819 * t578 - t520 * t949 + t599 * t498) * MDP(28) + (-(qJD(6) * t819 + t505 * t768 + t506 * t772) * t663 - t818 * t578 - t520 * t817 + t599 * t497) * MDP(29) + ((qJDD(2) * t936 - t903) * MDP(3) + (-qJDD(2) * t771 - t775 * t936) * MDP(4)) * t766; (-(t510 * t768 + t518 * t772) * t578 - t478 * t709 - t486 * t647 + t557 * t497 + t487 * t576 + t517 * t511 - g(1) * (-t574 * t758 + t620 * t759) - g(2) * (-t572 * t758 + t618 * t759) - g(3) * (-t634 * t758 + t677 * t759) + (t768 * t828 + t772 * t827) * t663 - t898 * t817) * MDP(29) + (t497 * t709 + t511 * t663 + t576 * t578 - t647 * t817) * MDP(25) + (t497 * t576 - t511 * t817) * MDP(23) + ((-pkin(2) * t802 + t774 * t838) * MDP(10) + (-pkin(2) * t803 - t770 * t838) * MDP(11) + 0.2e1 * (t770 * t874 - t876 * t885) * MDP(6) + (qJDD(2) * t762 + 0.2e1 * t770 * t859) * MDP(5)) * t760 + (t484 * t529 + t483 * t528 + t490 * t602 - g(1) * (-pkin(2) * t781 + t621 * pkin(3) + t574 * pkin(4) + t620 * pkin(10) + t573 * qJ(5) + t706 * t933) - g(2) * (-pkin(2) * t780 + t619 * pkin(3) + t572 * pkin(4) + t618 * pkin(10) + t571 * qJ(5) + t705 * t933) - g(3) * (t678 * pkin(3) + t634 * pkin(4) + t677 * pkin(10) + t633 * qJ(5) + (pkin(2) * t936 + t771 * t933) * t766) + t897 * t530 + t943 * t501 + t900 * t500) * MDP(22) + (t810 * t749 + t809 * t926 - g(1) * t621 - g(2) * t619 - g(3) * t678 + (-t637 * t774 + t662 * t883) * t765 - t890 * t816) * MDP(10) + (-t483 * t645 - t484 * t644 - t500 * t616 - t501 * t615 - t528 * t559 - t529 * t558 - t628 * t943 - t630 * t900 - t796) * MDP(21) + (g(1) * t706 + g(2) * t705 - t901 * t907) * MDP(4) + (-t529 * t587 - t484 * t709 - t501 * t647 + t602 * t559 + t490 * t645 + t530 * t616 - g(1) * (-t574 * t764 + t620 * t767) - g(2) * (-t572 * t764 + t618 * t767) - g(3) * (-t634 * t764 + t677 * t767) - t943 * t674 + t897 * t630) * MDP(20) + qJDD(2) * MDP(2) + (-t646 * t741 + t690 * t710 + (-t586 * t774 + t676 * t883) * t765) * MDP(14) + (t647 * t741 - t690 * t709 + (t587 * t774 - t674 * t883) * t765) * MDP(15) + t926 * t917 + (t770 * t799 + t815 * t863) * MDP(7) + (t774 * t799 - t815 * t864) * MDP(8) + (t528 * t587 + t483 * t709 + t500 * t647 + t602 * t558 + t490 * t644 + t530 * t615 - g(1) * (t574 * t767 + t620 * t764) - g(2) * (t572 * t767 + t618 * t764) - g(3) * (t634 * t767 + t677 * t764) + t900 * t674 + t897 * t628) * MDP(19) + (-t497 * t575 - t498 * t576 + t511 * t949 + t512 * t817) * MDP(24) + ((t510 * t772 - t518 * t768) * t578 + t479 * t709 + t485 * t647 + t557 * t498 + t487 * t575 + t517 * t512 - g(1) * (t574 * t759 + t620 * t758) - g(2) * (t572 * t759 + t618 * t758) - g(3) * (t634 * t759 + t677 * t758) + (t768 * t827 - t772 * t828) * t663 - t898 * t949) * MDP(28) + (-t498 * t709 - t512 * t663 - t575 * t578 + t647 * t949) * MDP(26) + (-t690 * t774 - t741 * t883) * t765 * MDP(16) + (t847 * t690 + t687 * t587 + t526 * t709 + t592 * t647 - g(1) * t574 - g(2) * t572 - g(3) * t634 + (t538 * t883 + t774 * t844) * t765 + t946 * t741 + t890 * t674) * MDP(17) + (t578 * t709 + t647 * t663) * MDP(27) + (-t586 * t709 - t587 * t710 - t646 * t674 - t647 * t676) * MDP(13) + (t586 * t710 + t646 * t676) * MDP(12) + (-t886 * t749 + t786 * t926 + g(1) * t620 + g(2) * t618 + g(3) * t677 + (t637 * t770 + t662 * t882) * t765 + t953 * t816) * MDP(11) + (t687 * t586 + t526 * t710 + t592 * t646 - t891 * t690 + (-t539 * t883 + t774 * t801) * t765 + t954 * t741 + t890 * t676 + t796) * MDP(18) + (g(1) * t781 + g(2) * t780 - g(3) * t869 + t748) * MDP(3); t917 + t741 * MDP(16) * t867 + (-t497 * t773 - t578 * t695 + t663 * t895 + t806 * t817) * MDP(25) + (-t578 * t773 - t663 * t806) * MDP(27) + ((t638 * t772 - t648 * t768) * t578 - t479 * t773 + t720 * t498 + t487 * t694 - g(1) * (-t596 * t915 + t597 * t758) - g(2) * (-t594 * t915 + t595 * t758) - g(3) * (-t640 * t915 + t641 * t758) + (t768 * t825 - t772 * t826) * t663 - t887 * t949 + t894 * t517 - t485 * t806) * MDP(28) + (t741 * t881 + t690 * t773 + (t674 * t770 - t774 * t806) * t884) * MDP(15) + (-t530 * t655 - t562 * t630 - t673 * t587 - t892 * t674 - t794 * t767 + (t484 + (pkin(10) * t630 + t530 * t767) * qJD(4) - t795 * t764) * t773 + (pkin(10) * t559 + t490 * t767 + t501 * t741) * t769) * MDP(20) + (-t530 * t654 - t562 * t628 + t672 * t587 + t893 * t674 - t794 * t764 + (-t483 + (pkin(10) * t628 + t530 * t764) * qJD(4) + t795 * t767) * t773 + (pkin(10) * t558 + t490 * t764 - t500 * t741) * t769) * MDP(19) + (t500 * t655 + t501 * t654 - t558 * t673 - t559 * t672 - t893 * t630 - t892 * t628 + (-t500 * t767 - t501 * t764) * t880 + (-t483 * t767 - t484 * t764 + t795) * t769) * MDP(21) + (t498 * t773 - t578 * t694 - t663 * t894 - t806 * t949) * MDP(26) + (-pkin(3) * t586 - t610 * t676 - t896 * t741 + t539 * t867 + t784 * t773 + (-t741 * t928 - t790) * t769) * MDP(18) + (-t538 * t867 - pkin(3) * t587 - t605 * t741 - t610 * t674 + t784 * t769 + ((t696 + t928) * t741 + t790) * t773) * MDP(17) + (t483 * t672 + t484 * t673 - t530 * t562 + t892 * t501 + t893 * t500 + (t490 * t769 + t530 * t880 - t794) * pkin(10) + t795 * t813) * MDP(22) + (t586 * t769 - t773 * t919) * MDP(12) + ((t586 + t921) * t773 + (-t587 + t919) * t769) * MDP(13) + (-t741 * t880 + t690 * t769 + (-t676 * t770 + t741 * t902) * t884) * MDP(14) + (-t497 * t695 - t817 * t895) * MDP(23) + (-t497 * t694 + t498 * t695 + t817 * t894 + t895 * t949) * MDP(24) + (-(t638 * t768 + t648 * t772) * t578 + t478 * t773 + t720 * t497 - t487 * t695 - g(1) * (t596 * t916 + t597 * t759) - g(2) * (t594 * t916 + t595 * t759) - g(3) * (t640 * t916 + t641 * t759) + (t768 * t826 + t772 * t825) * t663 - t887 * t817 + t895 * t517 + t486 * t806) * MDP(29) + (t770 * t832 + t747) * MDP(8) + (-t774 * t832 + t858) * MDP(7) + (t609 * t816 - t662 * t866 + t786 + t794) * MDP(11) + (t610 * t816 - t662 * t867 + t795 + t809) * MDP(10) + (-MDP(5) * t770 * t774 + MDP(6) * t885) * t760 * t775; -t674 ^ 2 * MDP(13) + (t586 - t921) * MDP(14) + (-t587 - t919) * MDP(15) + t690 * MDP(16) + (-t539 * t741 + t782) * MDP(17) + (-t538 * t741 + t592 * t674 - t797 - t801) * MDP(18) + (-t764 * t923 - pkin(4) * t558 - t539 * t628 + (t764 * t877 - t513) * t674 + t791 * t767) * MDP(19) + (-t767 * t923 - pkin(4) * t559 - t539 * t630 + (t767 * t877 + t514) * t674 - t791 * t764) * MDP(20) + (t513 * t630 + t514 * t628 + (-qJ(5) * t558 - qJD(5) * t628 - t500 * t674 + t484) * t767 + (qJ(5) * t559 + qJD(5) * t630 - t501 * t674 - t483) * t764 + t797) * MDP(21) + (-t500 * t513 - t501 * t514 - t530 * t539 + (-t500 * t764 + t501 * t767) * qJD(5) + t791 * pkin(4) + (-t483 * t764 + t484 * t767 + t797) * qJ(5)) * MDP(22) + (t497 * t717 + t817 * t889) * MDP(23) + (-t497 * t716 - t498 * t717 + t817 * t888 - t889 * t949) * MDP(24) + (t578 * t717 - t663 * t889) * MDP(25) + (-t578 * t716 - t663 * t888) * MDP(26) + ((-t739 * t772 - t740 * t768) * t578 + t757 * t498 + t487 * t716 + t522 * t949 + (t768 * t804 - t772 * t805) * t663 + t888 * t517 + t798 * t759) * MDP(28) + (-(-t739 * t768 + t740 * t772) * t578 + t757 * t497 + t487 * t717 + t522 * t817 + (t768 * t805 + t772 * t804) * t663 - t889 * t517 - t798 * t758) * MDP(29) + (MDP(12) * t674 + MDP(13) * t676 - MDP(17) * t592 - MDP(19) * t500 + MDP(20) * t501 + MDP(25) * t817 - MDP(26) * t949 - MDP(27) * t663 - MDP(28) * t485 + MDP(29) * t486) * t676; (t630 * t674 + t558) * MDP(19) + (-t628 * t674 + t559) * MDP(20) + (-t628 ^ 2 - t630 ^ 2) * MDP(21) + (t500 * t630 + t501 * t628 - t782 + t938) * MDP(22) + (t498 - t948) * MDP(28) + (t497 + t955) * MDP(29); t817 * t949 * MDP(23) + (t817 ^ 2 - t949 ^ 2) * MDP(24) + (t871 - t955) * MDP(25) + (-t848 - t948) * MDP(26) + t578 * MDP(27) + (t486 * t663 + t517 * t817 - g(1) * (-t550 * t758 + t596 * t759) - g(2) * (-t548 * t758 + t594 * t759) - g(3) * (-t600 * t758 + t640 * t759) + t849) * MDP(28) + (t485 * t663 - t517 * t949 - g(1) * (-t550 * t759 - t596 * t758) - g(2) * (-t548 * t759 - t594 * t758) - g(3) * (-t600 * t759 - t640 * t758) - t820) * MDP(29) + (-MDP(25) * t922 + MDP(26) * t817 - MDP(28) * t486 - MDP(29) * t485) * qJD(6);];
tau  = t1;
