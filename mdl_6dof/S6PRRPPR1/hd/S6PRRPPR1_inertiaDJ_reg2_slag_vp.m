% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPPR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPPR1_inertiaDJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:02:13
% EndTime: 2019-03-08 21:02:20
% DurationCPUTime: 2.50s
% Computational Cost: add. (3391->245), mult. (8440->465), div. (0->0), fcn. (8521->12), ass. (0->140)
t148 = cos(pkin(11));
t80 = -t148 * pkin(3) - pkin(4);
t88 = cos(pkin(12));
t72 = -t88 * pkin(5) + t80;
t172 = 0.2e1 * t72;
t91 = sin(qJ(3));
t128 = t148 * t91;
t86 = sin(pkin(11));
t93 = cos(qJ(3));
t69 = t86 * t93 + t128;
t60 = t69 * qJD(3);
t127 = t148 * t93;
t144 = t91 * qJD(3);
t61 = qJD(3) * t127 - t86 * t144;
t159 = t86 * t91;
t67 = -t127 + t159;
t114 = t69 * t60 + t61 * t67;
t171 = -0.2e1 * t114;
t167 = cos(qJ(6));
t130 = qJD(6) * t167;
t90 = sin(qJ(6));
t145 = qJD(6) * t90;
t85 = sin(pkin(12));
t170 = t88 * t130 - t85 * t145;
t169 = t167 * t88 - t90 * t85;
t77 = t86 * pkin(3) + qJ(5);
t168 = pkin(9) + t77;
t94 = cos(qJ(2));
t146 = qJD(2) * t94;
t87 = sin(pkin(6));
t135 = t87 * t146;
t92 = sin(qJ(2));
t158 = t87 * t92;
t89 = cos(pkin(6));
t64 = -t91 * t158 + t89 * t93;
t49 = t64 * qJD(3) + t93 * t135;
t65 = t93 * t158 + t89 * t91;
t50 = -t65 * qJD(3) - t91 * t135;
t25 = -t148 * t50 + t86 * t49;
t39 = -t148 * t64 + t86 * t65;
t14 = t39 * t25;
t152 = -qJ(4) - pkin(8);
t126 = qJD(3) * t152;
t108 = t93 * qJD(4) + t91 * t126;
t109 = -t91 * qJD(4) + t93 * t126;
t36 = t86 * t108 - t148 * t109;
t73 = t152 * t93;
t51 = -t152 * t128 - t86 * t73;
t166 = t51 * t36;
t132 = t167 * t85;
t154 = t90 * t88;
t70 = t132 + t154;
t63 = t70 * qJD(6);
t165 = t169 * t63;
t164 = t70 * t170;
t52 = -t148 * t73 + t152 * t159;
t163 = t85 * t52;
t162 = t85 * t60;
t161 = t85 * t61;
t160 = t85 * t69;
t157 = t87 * t94;
t156 = t88 * t61;
t153 = -pkin(9) - qJ(5);
t18 = t170 * t69 + t70 * t61;
t37 = t70 * t69;
t151 = -t170 * t37 - t70 * t18;
t81 = -t93 * pkin(3) - pkin(2);
t112 = t67 * pkin(4) + t81;
t107 = -t69 * qJ(5) + t112;
t24 = t85 * t107 + t88 * t52;
t82 = t85 ^ 2;
t84 = t88 ^ 2;
t149 = t82 + t84;
t147 = qJD(2) * t92;
t143 = t93 * qJD(3);
t45 = 0.2e1 * t67 * t60;
t142 = 0.2e1 * t69 * t61;
t141 = -0.2e1 * pkin(2) * qJD(3);
t140 = t85 * t156;
t139 = pkin(3) * t144;
t138 = t94 * t144;
t136 = t87 * t147;
t134 = t91 * t143;
t133 = t90 * t168;
t129 = t167 * qJD(5);
t125 = t87 ^ 2 * t92 * t146;
t124 = 0.2e1 * t149 * qJD(5);
t106 = t60 * pkin(4) - t69 * qJD(5) + t139;
t105 = -t61 * qJ(5) + t106;
t99 = t148 * t108 + t86 * t109;
t98 = t85 * t99;
t12 = t88 * t105 - t98;
t97 = t88 * t99;
t13 = t85 * t105 + t97;
t122 = t12 * t88 + t13 * t85;
t121 = -t12 * t85 + t13 * t88;
t17 = -t169 * t61 + t69 * t63;
t38 = t169 * t69;
t120 = t169 * t17 + t38 * t63;
t26 = t148 * t49 + t86 * t50;
t21 = t88 * t136 - t85 * t26;
t22 = t85 * t136 + t88 * t26;
t119 = t21 * t88 + t22 * t85;
t118 = -t21 * t85 + t22 * t88;
t117 = t25 * t51 + t39 * t36;
t116 = t25 * t69 + t39 * t61;
t115 = t36 * t69 + t51 * t61;
t113 = t170 * t67 + t70 * t60;
t111 = t168 * t132;
t40 = t148 * t65 + t86 * t64;
t33 = -t88 * t157 - t85 * t40;
t34 = -t85 * t157 + t88 * t40;
t10 = t167 * t34 + t90 * t33;
t110 = -qJD(5) * t67 - t60 * t77 + t61 * t80;
t104 = t49 * t93 - t50 * t91 + (-t64 * t93 - t65 * t91) * qJD(3);
t103 = t153 * t61 + t106;
t102 = t67 * pkin(5) - t163 + (t153 * t69 + t112) * t88;
t101 = t90 * t102;
t100 = t167 * t102;
t96 = t103 * t85 + t97;
t95 = t60 * pkin(5) + t103 * t88 - t98;
t66 = t168 * t88;
t57 = t88 * t60;
t43 = -t85 * t133 + t167 * t66;
t42 = -t90 * t66 - t111;
t35 = pkin(5) * t160 + t51;
t32 = -t66 * t130 - qJD(5) * t154 + (qJD(6) * t133 - t129) * t85;
t31 = qJD(6) * t111 - t88 * t129 + (t85 * qJD(5) + qJD(6) * t66) * t90;
t28 = t169 * t60 - t63 * t67;
t27 = pkin(5) * t161 + t36;
t23 = t88 * t107 - t163;
t16 = -pkin(9) * t160 + t24;
t9 = t167 * t33 - t90 * t34;
t6 = t167 * t16 + t101;
t5 = -t90 * t16 + t100;
t4 = -t10 * qJD(6) + t167 * t21 - t90 * t22;
t3 = -t33 * t130 + t34 * t145 - t167 * t22 - t90 * t21;
t2 = -qJD(6) * t101 - t16 * t130 + t167 * t95 - t90 * t96;
t1 = -qJD(6) * t100 + t16 * t145 - t167 * t96 - t90 * t95;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t65 * t49 + 0.2e1 * t64 * t50 - 0.2e1 * t125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t40 * t26 - 0.2e1 * t125 + 0.2e1 * t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t33 * t21 + 0.2e1 * t34 * t22 + 0.2e1 * t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t10 * t3 + 0.2e1 * t9 * t4 + 0.2e1 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t136, -t135, 0, 0, 0, 0, 0, 0, 0, 0 (-t93 * t147 - t138) * t87 (-t94 * t143 + t91 * t147) * t87, t104, -pkin(2) * t136 + pkin(8) * t104, 0, 0, 0, 0, 0, 0 (t67 * t147 - t60 * t94) * t87 (t69 * t147 - t61 * t94) * t87, -t26 * t67 - t40 * t60 + t116, t26 * t52 + t40 * t99 + (-pkin(3) * t138 + t81 * t147) * t87 + t117, 0, 0, 0, 0, 0, 0, t116 * t85 + t21 * t67 + t33 * t60, t116 * t88 - t22 * t67 - t34 * t60, -t119 * t69 + (-t33 * t88 - t34 * t85) * t61, t33 * t12 + t34 * t13 + t21 * t23 + t22 * t24 + t117, 0, 0, 0, 0, 0, 0, t39 * t18 + t25 * t37 + t4 * t67 + t9 * t60, -t10 * t60 - t39 * t17 + t25 * t38 + t3 * t67, -t10 * t18 + t9 * t17 + t3 * t37 - t4 * t38, -t10 * t1 + t9 * t2 + t25 * t35 + t39 * t27 - t3 * t6 + t4 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t134, 0.2e1 * (-t91 ^ 2 + t93 ^ 2) * qJD(3), 0, -0.2e1 * t134, 0, 0, t91 * t141, t93 * t141, 0, 0, t142, t171, 0, t45, 0, 0, 0.2e1 * t139 * t67 + 0.2e1 * t81 * t60, 0.2e1 * t139 * t69 + 0.2e1 * t81 * t61, -0.2e1 * t52 * t60 - 0.2e1 * t67 * t99 + 0.2e1 * t115, 0.2e1 * t139 * t81 + 0.2e1 * t52 * t99 + 0.2e1 * t166, t84 * t142, -0.4e1 * t69 * t140, 0.2e1 * t114 * t88, t82 * t142, t85 * t171, t45, 0.2e1 * t115 * t85 + 0.2e1 * t12 * t67 + 0.2e1 * t23 * t60, 0.2e1 * t115 * t88 - 0.2e1 * t13 * t67 - 0.2e1 * t24 * t60, -0.2e1 * t122 * t69 + 0.2e1 * (-t23 * t88 - t24 * t85) * t61, 0.2e1 * t23 * t12 + 0.2e1 * t24 * t13 + 0.2e1 * t166, -0.2e1 * t38 * t17, 0.2e1 * t17 * t37 - 0.2e1 * t38 * t18, -0.2e1 * t17 * t67 + 0.2e1 * t38 * t60, 0.2e1 * t37 * t18, -0.2e1 * t18 * t67 - 0.2e1 * t37 * t60, t45, 0.2e1 * t35 * t18 + 0.2e1 * t2 * t67 + 0.2e1 * t27 * t37 + 0.2e1 * t5 * t60, 0.2e1 * t1 * t67 - 0.2e1 * t35 * t17 + 0.2e1 * t27 * t38 - 0.2e1 * t6 * t60, 0.2e1 * t1 * t37 + 0.2e1 * t5 * t17 - 0.2e1 * t6 * t18 - 0.2e1 * t2 * t38, -0.2e1 * t6 * t1 + 0.2e1 * t5 * t2 + 0.2e1 * t35 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t49, 0, 0, 0, 0, 0, 0, 0, 0, -t25, -t26, 0 (-t148 * t25 + t26 * t86) * pkin(3), 0, 0, 0, 0, 0, 0, -t25 * t88, t25 * t85, t118, t25 * t80 + t118 * t77 + (-t33 * t85 + t34 * t88) * qJD(5), 0, 0, 0, 0, 0, 0, -t169 * t25 + t39 * t63, t170 * t39 + t25 * t70, -t10 * t63 - t169 * t3 - t170 * t9 - t4 * t70, -t10 * t31 + t25 * t72 - t3 * t43 + t9 * t32 + t4 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, 0, -t144, 0, -pkin(8) * t143, pkin(8) * t144, 0, 0, 0, 0, t61, 0, -t60, 0, -t36, -t99 (-t148 * t61 - t60 * t86) * pkin(3) (-t36 * t148 + t99 * t86) * pkin(3), t140 (-t82 + t84) * t61, t162, -t140, t57, 0, t110 * t85 - t36 * t88, t110 * t88 + t36 * t85, t121, t36 * t80 + t121 * t77 + (-t23 * t85 + t24 * t88) * qJD(5), -t17 * t70 + t170 * t38, -t120 + t151, t113, -t169 * t18 + t37 * t63, t28, 0, -t169 * t27 + t72 * t18 + t32 * t67 + t35 * t63 + t42 * t60, -t72 * t17 + t170 * t35 + t27 * t70 + t31 * t67 - t43 * t60, -t1 * t169 + t42 * t17 - t170 * t5 - t43 * t18 - t2 * t70 + t31 * t37 - t32 * t38 - t6 * t63, -t1 * t43 + t2 * t42 + t27 * t72 - t6 * t31 + t5 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, t77 * t124, 0.2e1 * t164, 0.2e1 * t169 * t170 - 0.2e1 * t70 * t63, 0, -0.2e1 * t165, 0, 0, t63 * t172, t170 * t172, -0.2e1 * t169 * t31 - 0.2e1 * t170 * t42 - 0.2e1 * t32 * t70 - 0.2e1 * t43 * t63, -0.2e1 * t43 * t31 + 0.2e1 * t42 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t170 + t169 * t4 - t3 * t70 - t9 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t61, 0, t139, 0, 0, 0, 0, 0, 0, t57, -t162, -t149 * t61, t122, 0, 0, 0, 0, 0, 0, t28, -t113, t120 + t151, -t1 * t70 + t169 * t2 + t170 * t6 - t5 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169 * t32 + t170 * t43 - t31 * t70 - t42 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t164 - 0.2e1 * t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, t156, 0, t36, 0, 0, 0, 0, 0, 0, t18, -t17, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t170, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, 0, -t18, t60, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, 0, -t63, 0, t32, t31, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, -t170, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
