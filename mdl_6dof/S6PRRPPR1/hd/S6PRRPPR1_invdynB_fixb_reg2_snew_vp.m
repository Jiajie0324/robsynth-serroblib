% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 02:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 02:34:22
% EndTime: 2019-05-05 02:35:02
% DurationCPUTime: 38.44s
% Computational Cost: add. (306126->1009), mult. (689643->1647), div. (0->0), fcn. (512218->14), ass. (0->721)
t985 = cos(qJ(3));
t1081 = qJD(2) * t985;
t982 = sin(qJ(3));
t1082 = qJD(2) * t982;
t973 = sin(pkin(11));
t977 = cos(pkin(11));
t927 = -t977 * t1081 + t1082 * t973;
t929 = t1081 * t973 + t1082 * t977;
t881 = t929 * t927;
t1121 = qJDD(3) - t881;
t1133 = t1121 * t973;
t1132 = t1121 * t977;
t1076 = qJD(2) * qJD(3);
t1062 = t982 * t1076;
t1072 = qJDD(2) * t985;
t1008 = t1062 - t1072;
t1061 = t985 * t1076;
t1074 = qJDD(2) * t982;
t937 = t1061 + t1074;
t882 = t977 * t1008 + t937 * t973;
t1049 = qJDD(6) + t882;
t972 = sin(pkin(12));
t976 = cos(pkin(12));
t895 = -t976 * qJD(3) + t929 * t972;
t897 = qJD(3) * t972 + t929 * t976;
t981 = sin(qJ(6));
t984 = cos(qJ(6));
t829 = t984 * t895 + t897 * t981;
t831 = -t895 * t981 + t897 * t984;
t754 = t831 * t829;
t1122 = t1049 - t754;
t1131 = t1122 * t981;
t1130 = t1122 * t984;
t837 = t897 * t895;
t1125 = -t837 + t882;
t1129 = t1125 * t972;
t1128 = t1125 * t976;
t974 = sin(pkin(10));
t978 = cos(pkin(10));
t1060 = g(1) * t974 - t978 * g(2);
t1084 = g(3) - qJDD(1);
t975 = sin(pkin(6));
t979 = cos(pkin(6));
t1127 = t979 * t1060 - t975 * t1084;
t919 = qJD(6) + t927;
t805 = t919 * t829;
t883 = -t1008 * t973 + t977 * t937;
t857 = t976 * qJDD(3) - t883 * t972;
t858 = t972 * qJDD(3) + t976 * t883;
t991 = qJD(6) * t829 - t857 * t981 - t858 * t984;
t1126 = -t805 - t991;
t856 = t927 * t895;
t789 = -t856 - t858;
t790 = -t858 + t856;
t1124 = t974 * t1084;
t1123 = t978 * t1084;
t1079 = qJD(3) * t929;
t839 = t882 + t1079;
t1118 = qJD(2) ^ 2;
t956 = t982 * t1118 * t985;
t946 = qJDD(3) + t956;
t944 = g(1) * t978 + g(2) * t974;
t892 = -t1060 * t974 - t978 * t944;
t1057 = -t984 * t857 + t981 * t858;
t674 = (qJD(6) - t919) * t831 + t1057;
t891 = t1060 * t978 - t974 * t944;
t827 = t829 ^ 2;
t828 = t831 ^ 2;
t1120 = t895 ^ 2;
t894 = t897 ^ 2;
t918 = t919 ^ 2;
t1119 = t927 ^ 2;
t922 = t929 ^ 2;
t1117 = 2 * qJD(4);
t1116 = pkin(4) * t973;
t983 = sin(qJ(2));
t986 = cos(qJ(2));
t859 = -t1127 * t986 - t983 * t944;
t860 = t1127 * t983 - t986 * t944;
t784 = t859 * t983 + t860 * t986;
t1115 = pkin(7) * t784;
t912 = t1060 * t975 + t1084 * t979;
t989 = -pkin(2) * t1118 + qJDD(2) * pkin(8) + t860;
t810 = -t982 * t912 + t985 * t989;
t945 = qJD(3) * pkin(3) - qJ(4) * t1082;
t969 = t985 ^ 2;
t965 = t969 * t1118;
t764 = -pkin(3) * t965 - qJ(4) * t1008 - qJD(3) * t945 + t810;
t809 = t985 * t912 + t982 * t989;
t988 = -t809 + (t1061 - t937) * qJ(4) + t946 * pkin(3);
t661 = -0.2e1 * qJD(4) * t927 + t977 * t764 + t973 * t988;
t861 = pkin(4) * t927 - qJ(5) * t929;
t987 = qJD(3) ^ 2;
t641 = -pkin(4) * t987 + qJDD(3) * qJ(5) - t861 * t927 + t661;
t1078 = t927 * qJD(3);
t1056 = -t883 + t1078;
t846 = -qJDD(2) * pkin(2) - t1118 * pkin(8) + t859;
t794 = t1008 * pkin(3) - qJ(4) * t965 + t1082 * t945 + qJDD(4) + t846;
t701 = pkin(4) * t839 + t1056 * qJ(5) + t794;
t577 = 0.2e1 * qJD(5) * t897 + t972 * t641 - t976 * t701;
t546 = pkin(5) * t1125 + pkin(9) * t789 - t577;
t578 = -0.2e1 * qJD(5) * t895 + t976 * t641 + t972 * t701;
t847 = pkin(5) * t927 - pkin(9) * t897;
t553 = -pkin(5) * t1120 + pkin(9) * t857 - t847 * t927 + t578;
t491 = -t984 * t546 + t553 * t981;
t492 = t981 * t546 + t984 * t553;
t438 = -t491 * t984 + t492 * t981;
t1114 = t438 * t972;
t1113 = t438 * t976;
t1058 = t973 * t764 - t977 * t988;
t660 = t1117 * t929 + t1058;
t590 = -t660 * t977 + t661 * t973;
t1112 = t590 * t982;
t1111 = t590 * t985;
t640 = qJDD(5) - t987 * qJ(5) - qJDD(3) * pkin(4) + (t1117 + t861) * t929 + t1058;
t612 = -t857 * pkin(5) - pkin(9) * t1120 + t897 * t847 + t640;
t1110 = t612 * t981;
t1109 = t612 * t984;
t1108 = t640 * t972;
t1107 = t640 * t976;
t723 = t1049 + t754;
t1106 = t723 * t981;
t1105 = t723 * t984;
t792 = t837 + t882;
t1104 = t792 * t972;
t1103 = t792 * t976;
t1102 = t794 * t973;
t1101 = t794 * t977;
t1100 = t846 * t982;
t1099 = t846 * t985;
t868 = qJDD(3) + t881;
t1098 = t868 * t973;
t1097 = t868 * t977;
t1096 = t882 * t973;
t1095 = t897 * t927;
t1094 = t919 * t981;
t1093 = t919 * t984;
t1092 = t927 * t972;
t1091 = t927 * t976;
t938 = -0.2e1 * t1062 + t1072;
t898 = t938 * t985;
t1090 = t946 * t982;
t947 = qJDD(3) - t956;
t1089 = t947 * t982;
t1088 = t947 * t985;
t1086 = t983 * t912;
t1085 = t986 * t912;
t968 = t982 ^ 2;
t1083 = t968 + t969;
t1080 = t1118 * t968;
t1075 = qJDD(2) * t975;
t1073 = qJDD(2) * t983;
t1071 = qJDD(2) * t986;
t1070 = qJDD(3) * t986;
t1069 = t973 * t754;
t1068 = t977 * t754;
t1067 = t973 * t837;
t1066 = t977 * t837;
t1065 = t983 * t881;
t1064 = t986 * t881;
t1063 = -pkin(4) * t977 - pkin(3);
t439 = t491 * t981 + t984 * t492;
t591 = t660 * t973 + t977 * t661;
t719 = t809 * t982 + t985 * t810;
t1055 = t983 * t956;
t1054 = t986 * t956;
t718 = t809 * t985 - t810 * t982;
t939 = t1083 * qJDD(2);
t942 = t965 + t1080;
t889 = t939 * t986 - t942 * t983;
t1052 = pkin(7) * t889 + t718 * t983;
t940 = -t1118 * t983 + t1071;
t1051 = -pkin(7) * t940 - t1086;
t1013 = t1118 * t986 + t1073;
t1050 = -pkin(7) * t1013 + t1085;
t403 = t439 * t976 - t1114;
t395 = t403 * t973 - t612 * t977;
t396 = t403 * t977 + t612 * t973;
t370 = -t395 * t982 + t396 * t985;
t402 = t439 * t972 + t1113;
t1048 = t370 * t983 - t402 * t986;
t518 = t577 * t972 + t578 * t976;
t488 = t518 * t973 - t640 * t977;
t489 = t518 * t977 + t640 * t973;
t437 = -t488 * t982 + t489 * t985;
t517 = -t577 * t976 + t578 * t972;
t1047 = t437 * t983 - t517 * t986;
t678 = -t805 + t991;
t603 = -t674 * t981 + t678 * t984;
t605 = -t674 * t984 - t678 * t981;
t524 = -t603 * t972 + t605 * t976;
t703 = -t827 - t828;
t508 = t524 * t973 - t703 * t977;
t509 = t524 * t977 + t703 * t973;
t445 = -t508 * t982 + t509 * t985;
t522 = t603 * t976 + t605 * t972;
t1046 = t445 * t983 - t522 * t986;
t673 = (qJD(6) + t919) * t831 + t1057;
t604 = t1126 * t984 - t673 * t981;
t606 = -t1126 * t981 - t673 * t984;
t525 = -t604 * t972 + t606 * t976;
t753 = -t828 + t827;
t515 = t525 * t973 + t753 * t977;
t516 = t525 * t977 - t753 * t973;
t448 = -t515 * t982 + t516 * t985;
t523 = -t604 * t976 - t606 * t972;
t1045 = t448 * t983 + t523 * t986;
t732 = -t918 - t827;
t642 = t732 * t981 + t1130;
t643 = t732 * t984 - t1131;
t566 = -t642 * t972 + t643 * t976;
t527 = t566 * t973 - t673 * t977;
t528 = t566 * t977 + t673 * t973;
t471 = -t527 * t982 + t528 * t985;
t565 = t642 * t976 + t643 * t972;
t1044 = t471 * t983 - t565 * t986;
t770 = -t828 - t918;
t652 = t770 * t984 - t1106;
t653 = -t770 * t981 - t1105;
t580 = -t652 * t972 + t653 * t976;
t531 = -t1126 * t977 + t580 * t973;
t532 = t1126 * t973 + t580 * t977;
t478 = -t531 * t982 + t532 * t985;
t579 = t652 * t976 + t653 * t972;
t1043 = t478 * t983 - t579 * t986;
t799 = -t828 + t918;
t665 = t799 * t984 + t1131;
t667 = -t799 * t981 + t1130;
t594 = -t665 * t972 + t667 * t976;
t538 = t594 * t973 + t678 * t977;
t540 = t594 * t977 - t678 * t973;
t483 = -t538 * t982 + t540 * t985;
t592 = -t665 * t976 - t667 * t972;
t1042 = t483 * t983 + t592 * t986;
t798 = t827 - t918;
t666 = t798 * t981 + t1105;
t668 = t798 * t984 - t1106;
t595 = -t666 * t972 + t668 * t976;
t539 = t595 * t973 + t674 * t977;
t541 = t595 * t977 - t674 * t973;
t484 = -t539 * t982 + t541 * t985;
t593 = -t666 * t976 - t668 * t972;
t1041 = t484 * t983 + t593 * t986;
t725 = -qJD(6) * t831 - t1057;
t669 = t1094 * t829 + t725 * t984;
t670 = t1093 * t829 - t725 * t981;
t600 = -t669 * t972 + t670 * t976;
t561 = t600 * t973 + t1068;
t563 = t600 * t977 - t1069;
t500 = -t561 * t982 + t563 * t985;
t598 = -t669 * t976 - t670 * t972;
t1040 = t500 * t983 + t598 * t986;
t671 = t1093 * t831 - t981 * t991;
t672 = -t1094 * t831 - t984 * t991;
t601 = -t671 * t972 + t672 * t976;
t562 = t601 * t973 - t1068;
t564 = t601 * t977 + t1069;
t501 = -t562 * t982 + t564 * t985;
t599 = -t671 * t976 - t672 * t972;
t1039 = t501 * t983 + t599 * t986;
t520 = t591 * t985 - t1112;
t1038 = t520 * t983 - t794 * t986;
t715 = (-t829 * t981 - t831 * t984) * t919;
t716 = (-t829 * t984 + t831 * t981) * t919;
t634 = -t715 * t972 + t716 * t976;
t624 = -t1049 * t977 + t634 * t973;
t625 = t1049 * t973 + t634 * t977;
t534 = -t624 * t982 + t625 * t985;
t633 = -t715 * t976 - t716 * t972;
t1037 = t534 * t983 + t633 * t986;
t785 = -t857 - t1095;
t706 = -t785 * t976 - t789 * t972;
t797 = t894 + t1120;
t650 = t706 * t973 + t797 * t977;
t651 = t706 * t977 - t797 * t973;
t574 = -t650 * t982 + t651 * t985;
t704 = -t785 * t972 + t789 * t976;
t1036 = t574 * t983 - t704 * t986;
t817 = -t1119 - t1120;
t714 = t817 * t976 - t1129;
t787 = t857 - t1095;
t654 = t714 * t973 + t787 * t977;
t655 = t714 * t977 - t787 * t973;
t584 = -t654 * t982 + t655 * t985;
t713 = t817 * t972 + t1128;
t1035 = t584 * t983 - t713 * t986;
t826 = -t894 - t1119;
t721 = -t826 * t972 - t1103;
t657 = t721 * t973 + t790 * t977;
t658 = t721 * t977 - t790 * t973;
t588 = -t657 * t982 + t658 * t985;
t720 = t826 * t976 - t1104;
t1034 = t588 * t983 - t720 * t986;
t707 = t787 * t976 + t790 * t972;
t836 = -t894 + t1120;
t662 = t707 * t973 + t836 * t977;
t663 = t707 * t977 - t836 * t973;
t597 = -t662 * t982 + t663 * t985;
t705 = -t787 * t972 + t790 * t976;
t1033 = t597 * t983 + t705 * t986;
t850 = -t894 + t1119;
t735 = -t850 * t972 + t1128;
t679 = t735 * t973 + t789 * t977;
t681 = t735 * t977 - t789 * t973;
t609 = -t679 * t982 + t681 * t985;
t733 = -t850 * t976 - t1129;
t1032 = t609 * t983 + t733 * t986;
t849 = -t1119 + t1120;
t736 = t849 * t976 - t1104;
t680 = t736 * t973 + t785 * t977;
t682 = t736 * t977 - t785 * t973;
t610 = -t680 * t982 + t682 * t985;
t734 = -t849 * t972 - t1103;
t1031 = t610 * t983 + t734 * t986;
t777 = t1091 * t895 - t857 * t972;
t727 = t777 * t973 + t1066;
t729 = t777 * t977 - t1067;
t637 = -t727 * t982 + t729 * t985;
t776 = -t1092 * t895 - t857 * t976;
t1030 = t637 * t983 + t776 * t986;
t779 = -t1092 * t897 + t858 * t976;
t728 = t779 * t973 - t1066;
t730 = t779 * t977 + t1067;
t638 = -t728 * t982 + t730 * t985;
t778 = -t1091 * t897 - t858 * t972;
t1029 = t638 * t983 + t778 * t986;
t775 = (-t895 * t976 + t897 * t972) * t927;
t871 = t977 * t882;
t743 = t775 * t973 - t871;
t744 = t775 * t977 + t1096;
t648 = -t743 * t982 + t744 * t985;
t774 = (t895 * t972 + t897 * t976) * t927;
t1028 = t648 * t983 + t774 * t986;
t760 = -t1056 * t977 - t839 * t973;
t762 = t1056 * t973 - t839 * t977;
t685 = -t760 * t982 + t762 * t985;
t876 = -t922 + t1119;
t1027 = t685 * t983 + t876 * t986;
t841 = -t882 + t1079;
t843 = -t883 - t1078;
t761 = t841 * t973 + t843 * t977;
t763 = t841 * t977 - t843 * t973;
t686 = -t761 * t982 + t763 * t985;
t838 = -t1119 - t922;
t1026 = t686 * t983 - t838 * t986;
t866 = -t1119 - t987;
t795 = t866 * t973 + t1132;
t796 = t866 * t977 - t1133;
t710 = -t795 * t982 + t796 * t985;
t1025 = t710 * t983 - t839 * t986;
t1024 = t719 * t983 - t846 * t986;
t913 = t1119 - t987;
t820 = t913 * t973 + t1097;
t823 = t913 * t977 - t1098;
t740 = -t820 * t982 + t823 * t985;
t1023 = t740 * t983 - t841 * t986;
t914 = -t922 + t987;
t821 = t914 * t977 + t1133;
t824 = -t914 * t973 + t1132;
t741 = -t821 * t982 + t824 * t985;
t1022 = t741 * t983 + t843 * t986;
t915 = -t922 - t987;
t822 = t915 * t977 - t1098;
t825 = -t915 * t973 - t1097;
t742 = -t822 * t982 + t825 * t985;
t1021 = t1056 * t986 + t742 * t983;
t783 = t859 * t986 - t860 * t983;
t936 = 0.2e1 * t1061 + t1074;
t885 = -t936 * t982 + t898;
t943 = t965 - t1080;
t1020 = t885 * t983 + t943 * t986;
t955 = -t965 - t987;
t905 = t955 * t985 - t1090;
t1019 = t905 * t983 + t938 * t986;
t953 = -t987 - t1080;
t907 = -t953 * t982 - t1088;
t1018 = t907 * t983 - t936 * t986;
t925 = t1013 * t979;
t1017 = t925 * t978 + t940 * t974;
t874 = t925 * t974 - t940 * t978;
t1016 = t939 * t983 + t942 * t986;
t853 = (-t927 * t973 - t929 * t977) * qJD(3);
t854 = (-t927 * t977 + t929 * t973) * qJD(3);
t772 = -t853 * t982 + t854 * t985;
t1015 = t772 * t983 - t1070;
t934 = t1083 * t1076;
t1014 = t934 * t983 - t1070;
t832 = t1078 * t973 - t871;
t833 = t1078 * t977 + t1096;
t751 = -t832 * t982 + t833 * t985;
t1012 = t751 * t983 + t1064;
t834 = t1079 * t977 + t883 * t973;
t835 = -t1079 * t973 + t883 * t977;
t752 = -t834 * t982 + t835 * t985;
t1011 = t752 * t983 - t1064;
t954 = t965 - t987;
t904 = t954 * t985 - t1089;
t1010 = -t1071 * t985 + t904 * t983;
t935 = t985 * t946;
t952 = t987 - t1080;
t906 = -t952 * t982 + t935;
t1009 = -t1071 * t982 + t906 * t983;
t909 = t1008 * t982 - t1076 * t969;
t1007 = t909 * t983 - t1054;
t910 = -t1076 * t968 + t937 * t985;
t1006 = t910 * t983 + t1054;
t429 = -pkin(5) * t612 + pkin(9) * t439;
t372 = -pkin(9) * t1113 - qJ(5) * t402 - t429 * t972;
t385 = -pkin(4) * t402 - pkin(5) * t438;
t353 = -pkin(3) * t402 + qJ(4) * t396 + t372 * t973 + t385 * t977;
t359 = -qJ(4) * t395 + t372 * t977 - t385 * t973;
t369 = t395 * t985 + t396 * t982;
t345 = -pkin(8) * t369 - t353 * t982 + t359 * t985;
t354 = -pkin(2) * t369 - pkin(3) * t395 + pkin(4) * t612 + pkin(9) * t1114 - qJ(5) * t403 - t429 * t976;
t363 = t370 * t986 + t402 * t983;
t1005 = pkin(7) * t363 + t345 * t983 + t354 * t986;
t426 = -pkin(5) * t703 + pkin(9) * t605 + t439;
t428 = -pkin(9) * t603 - t438;
t387 = -qJ(5) * t522 - t426 * t972 + t428 * t976;
t486 = -pkin(4) * t522 - pkin(5) * t603;
t374 = -pkin(3) * t522 + qJ(4) * t509 + t387 * t973 + t486 * t977;
t380 = -qJ(4) * t508 + t387 * t977 - t486 * t973;
t444 = t508 * t985 + t509 * t982;
t362 = -pkin(8) * t444 - t374 * t982 + t380 * t985;
t373 = -pkin(2) * t444 - pkin(3) * t508 + pkin(4) * t703 - qJ(5) * t524 - t426 * t976 - t428 * t972;
t427 = t445 * t986 + t522 * t983;
t1004 = pkin(7) * t427 + t362 * t983 + t373 * t986;
t521 = -pkin(5) * t673 + pkin(9) * t643 - t1109;
t535 = -pkin(9) * t642 + t1110;
t440 = -qJ(5) * t565 - t521 * t972 + t535 * t976;
t443 = -pkin(4) * t565 - pkin(5) * t642 + t491;
t394 = -pkin(3) * t565 + qJ(4) * t528 + t440 * t973 + t443 * t977;
t405 = -qJ(4) * t527 + t440 * t977 - t443 * t973;
t470 = t527 * t985 + t528 * t982;
t365 = -pkin(8) * t470 - t394 * t982 + t405 * t985;
t407 = -pkin(2) * t470 - pkin(3) * t527 + pkin(4) * t673 - qJ(5) * t566 - t521 * t976 - t535 * t972;
t442 = t471 * t986 + t565 * t983;
t1003 = pkin(7) * t442 + t365 * t983 + t407 * t986;
t526 = -pkin(5) * t1126 + pkin(9) * t653 + t1110;
t543 = -pkin(9) * t652 + t1109;
t446 = -qJ(5) * t579 - t526 * t972 + t543 * t976;
t449 = -pkin(4) * t579 - pkin(5) * t652 + t492;
t399 = -pkin(3) * t579 + qJ(4) * t532 + t446 * t973 + t449 * t977;
t408 = -qJ(4) * t531 + t446 * t977 - t449 * t973;
t477 = t531 * t985 + t532 * t982;
t368 = -pkin(8) * t477 - t399 * t982 + t408 * t985;
t409 = -pkin(2) * t477 - pkin(3) * t531 + pkin(4) * t1126 - qJ(5) * t580 - t526 * t976 - t543 * t972;
t455 = t478 * t986 + t579 * t983;
t1002 = pkin(7) * t455 + t368 * t983 + t409 * t986;
t410 = qJ(4) * t489 + (-qJ(5) * t973 + t1063) * t517;
t422 = -qJ(4) * t488 + (-qJ(5) * t977 + t1116) * t517;
t436 = t488 * t985 + t489 * t982;
t375 = -pkin(8) * t436 - t410 * t982 + t422 * t985;
t404 = -pkin(2) * t436 - pkin(3) * t488 + pkin(4) * t640 - qJ(5) * t518;
t416 = t437 * t986 + t517 * t983;
t1001 = pkin(7) * t416 + t375 * t983 + t404 * t986;
t497 = -qJ(5) * t704 - t517;
t464 = qJ(4) * t651 + t1063 * t704 + t973 * t497;
t472 = -qJ(4) * t650 + t1116 * t704 + t497 * t977;
t573 = t650 * t985 + t651 * t982;
t413 = -pkin(8) * t573 - t464 * t982 + t472 * t985;
t451 = -pkin(2) * t573 - pkin(3) * t650 - pkin(4) * t797 - qJ(5) * t706 - t518;
t542 = t574 * t986 + t704 * t983;
t1000 = pkin(7) * t542 + t413 * t983 + t451 * t986;
t547 = -pkin(4) * t713 + t577;
t602 = -qJ(5) * t713 + t1108;
t474 = -pkin(3) * t713 + qJ(4) * t655 + t547 * t977 + t602 * t973;
t485 = -qJ(4) * t654 - t547 * t973 + t602 * t977;
t583 = t654 * t985 + t655 * t982;
t421 = -pkin(8) * t583 - t474 * t982 + t485 * t985;
t493 = -pkin(2) * t583 - pkin(3) * t654 - pkin(4) * t787 - qJ(5) * t714 + t1107;
t548 = t584 * t986 + t713 * t983;
t999 = pkin(7) * t548 + t421 * t983 + t493 * t986;
t549 = -pkin(4) * t720 + t578;
t611 = -qJ(5) * t720 + t1107;
t475 = -pkin(3) * t720 + qJ(4) * t658 + t549 * t977 + t611 * t973;
t487 = -qJ(4) * t657 - t549 * t973 + t611 * t977;
t587 = t657 * t985 + t658 * t982;
t423 = -pkin(8) * t587 - t475 * t982 + t487 * t985;
t494 = -pkin(2) * t587 - pkin(3) * t657 - pkin(4) * t790 - qJ(5) * t721 - t1108;
t552 = t588 * t986 + t720 * t983;
t998 = pkin(7) * t552 + t423 * t983 + t494 * t986;
t519 = t591 * t982 + t1111;
t570 = -pkin(3) * t794 + qJ(4) * t591;
t454 = -pkin(8) * t519 - qJ(4) * t1111 - t570 * t982;
t480 = -pkin(2) * t519 - pkin(3) * t590;
t514 = t520 * t986 + t794 * t983;
t997 = pkin(7) * t514 + t454 * t983 + t480 * t986;
t555 = -pkin(3) * t838 + qJ(4) * t763 + t591;
t567 = -qJ(4) * t761 - t590;
t684 = t761 * t985 + t763 * t982;
t479 = -pkin(8) * t684 - t555 * t982 + t567 * t985;
t628 = -pkin(2) * t684 - pkin(3) * t761;
t646 = t686 * t986 + t838 * t983;
t996 = pkin(7) * t646 + t479 * t983 + t628 * t986;
t688 = -pkin(3) * t839 + qJ(4) * t796 - t1101;
t708 = -qJ(4) * t795 + t1102;
t709 = t795 * t985 + t796 * t982;
t571 = -pkin(8) * t709 - t688 * t982 + t708 * t985;
t589 = -pkin(2) * t709 - pkin(3) * t795 + t660;
t687 = t710 * t986 + t839 * t983;
t995 = pkin(7) * t687 + t571 * t983 + t589 * t986;
t695 = pkin(3) * t1056 + qJ(4) * t825 + t1102;
t731 = -qJ(4) * t822 + t1101;
t739 = t822 * t985 + t825 * t982;
t586 = -pkin(8) * t739 - t695 * t982 + t731 * t985;
t613 = -pkin(2) * t739 - pkin(3) * t822 + t661;
t698 = -t1056 * t983 + t742 * t986;
t994 = pkin(7) * t698 + t586 * t983 + t613 * t986;
t901 = t955 * t982 + t935;
t768 = -pkin(2) * t901 + t809;
t807 = -pkin(8) * t901 + t1100;
t851 = t905 * t986 - t938 * t983;
t993 = pkin(7) * t851 + t768 * t986 + t807 * t983;
t903 = t953 * t985 - t1089;
t769 = -pkin(2) * t903 + t810;
t808 = -pkin(8) * t903 + t1099;
t852 = t907 * t986 + t936 * t983;
t992 = pkin(7) * t852 + t769 * t986 + t808 * t983;
t692 = t719 * t986 + t846 * t983;
t990 = pkin(7) * t692 - (-pkin(2) * t986 - pkin(8) * t983) * t718;
t963 = t983 * qJDD(3);
t926 = t940 * t979;
t924 = t940 * t975;
t923 = t1013 * t975;
t911 = t934 * t986 + t963;
t902 = t952 * t985 + t1090;
t900 = t954 * t982 + t1088;
t899 = (t937 + t1061) * t982;
t890 = t1014 * t979;
t884 = t936 * t985 + t938 * t982;
t878 = t1016 * t979;
t877 = t1016 * t975;
t875 = -t1013 * t978 - t926 * t974;
t873 = -t1013 * t974 + t926 * t978;
t865 = t910 * t986 - t1055;
t864 = t909 * t986 + t1055;
t863 = t1073 * t982 + t906 * t986;
t862 = t1072 * t983 + t904 * t986;
t845 = t885 * t986 - t943 * t983;
t819 = -t1085 + (t923 * t975 + t925 * t979) * pkin(7);
t818 = -t1086 + (-t924 * t975 - t926 * t979) * pkin(7);
t816 = -t878 * t974 + t889 * t978;
t815 = t878 * t978 + t889 * t974;
t814 = t1006 * t979 - t975 * t899;
t813 = t1007 * t979 - t975 * t898;
t812 = t1009 * t979 - t975 * t902;
t811 = t1010 * t979 - t975 * t900;
t803 = t1018 * t979 - t975 * t903;
t802 = t1019 * t979 - t975 * t901;
t801 = t1018 * t975 + t979 * t903;
t800 = t1019 * t975 + t979 * t901;
t782 = t1020 * t979 - t975 * t884;
t781 = pkin(2) * t938 + pkin(8) * t905 - t1099;
t780 = -pkin(2) * t936 + pkin(8) * t907 + t1100;
t773 = t784 * t979;
t771 = t853 * t985 + t854 * t982;
t767 = t772 * t986 + t963;
t766 = -pkin(1) * t924 + t1050 * t979 + t975 * t859;
t765 = pkin(1) * t923 + t1051 * t979 + t975 * t860;
t756 = -t783 * t979 + t975 * t912;
t755 = -t783 * t975 - t979 * t912;
t750 = t834 * t985 + t835 * t982;
t749 = t832 * t985 + t833 * t982;
t748 = -t803 * t974 + t852 * t978;
t747 = -t802 * t974 + t851 * t978;
t746 = t803 * t978 + t852 * t974;
t745 = t802 * t978 + t851 * t974;
t738 = t821 * t985 + t824 * t982;
t737 = t820 * t985 + t823 * t982;
t712 = t752 * t986 + t1065;
t711 = t751 * t986 - t1065;
t702 = pkin(2) * t942 + pkin(8) * t939 + t719;
t697 = t741 * t986 - t843 * t983;
t696 = t740 * t986 + t841 * t983;
t694 = -pkin(2) * t846 + pkin(8) * t719;
t693 = t1015 * t979 - t975 * t771;
t691 = -pkin(1) * t755 + t1115 * t979;
t690 = -t756 * t974 + t784 * t978;
t689 = t756 * t978 + t784 * t974;
t683 = t760 * t985 + t762 * t982;
t664 = t986 * t718 + (-t877 * t975 - t878 * t979) * pkin(7);
t656 = (-t755 * t975 - t756 * t979) * pkin(7);
t649 = t685 * t986 - t876 * t983;
t647 = t743 * t985 + t744 * t982;
t645 = t1011 * t979 - t975 * t750;
t644 = t1012 * t979 - t975 * t749;
t636 = t728 * t985 + t730 * t982;
t635 = t727 * t985 + t729 * t982;
t632 = t1021 * t979 - t975 * t739;
t631 = t1022 * t979 - t975 * t738;
t630 = t1023 * t979 - t975 * t737;
t629 = t1021 * t975 + t979 * t739;
t627 = -t983 * t769 + t986 * t808 + (-t801 * t975 - t803 * t979) * pkin(7);
t626 = -t983 * t768 + t986 * t807 + (-t800 * t975 - t802 * t979) * pkin(7);
t623 = t648 * t986 - t774 * t983;
t622 = t1024 * t979 + t718 * t975;
t621 = t1024 * t975 - t718 * t979;
t620 = t1025 * t979 - t975 * t709;
t619 = t1025 * t975 + t979 * t709;
t618 = t638 * t986 - t778 * t983;
t617 = t637 * t986 - t776 * t983;
t616 = -pkin(1) * t801 - t975 * t780 + t979 * t992;
t615 = -pkin(1) * t800 - t975 * t781 + t979 * t993;
t614 = -pkin(1) * t877 + t1052 * t979 - t975 * t702;
t608 = t680 * t985 + t682 * t982;
t607 = t679 * t985 + t681 * t982;
t596 = t662 * t985 + t663 * t982;
t585 = t1027 * t979 - t975 * t683;
t582 = t1026 * t979 - t975 * t684;
t581 = t1026 * t975 + t979 * t684;
t576 = -t632 * t974 + t698 * t978;
t575 = t632 * t978 + t698 * t974;
t572 = pkin(2) * t1056 + pkin(8) * t742 + t695 * t985 + t731 * t982;
t569 = -t622 * t974 + t692 * t978;
t568 = t622 * t978 + t692 * t974;
t560 = t610 * t986 - t734 * t983;
t559 = t609 * t986 - t733 * t983;
t558 = -pkin(2) * t839 + pkin(8) * t710 + t688 * t985 + t708 * t982;
t557 = -t620 * t974 + t687 * t978;
t556 = t620 * t978 + t687 * t974;
t554 = t1028 * t979 - t975 * t647;
t550 = t597 * t986 - t705 * t983;
t537 = t1029 * t979 - t975 * t636;
t536 = t1030 * t979 - t975 * t635;
t533 = t624 * t985 + t625 * t982;
t530 = -t582 * t974 + t646 * t978;
t529 = t582 * t978 + t646 * t974;
t513 = t1031 * t979 - t975 * t608;
t512 = t1032 * t979 - t975 * t607;
t511 = -(pkin(2) * t983 - pkin(8) * t986) * t718 + (-t621 * t975 - t622 * t979) * pkin(7);
t510 = t534 * t986 - t633 * t983;
t507 = -pkin(1) * t621 - t975 * t694 + t979 * t990;
t506 = t1033 * t979 - t975 * t596;
t505 = t1034 * t979 - t975 * t587;
t504 = t1034 * t975 + t979 * t587;
t503 = t1035 * t979 - t975 * t583;
t502 = t1035 * t975 + t979 * t583;
t499 = t562 * t985 + t564 * t982;
t498 = t561 * t985 + t563 * t982;
t496 = t1036 * t979 - t975 * t573;
t495 = t1036 * t975 + t979 * t573;
t482 = t539 * t985 + t541 * t982;
t481 = t538 * t985 + t540 * t982;
t476 = -pkin(2) * t838 + pkin(8) * t686 + t555 * t985 + t567 * t982;
t473 = t986 * t586 - t983 * t613 + (-t629 * t975 - t632 * t979) * pkin(7);
t469 = t501 * t986 - t599 * t983;
t468 = t500 * t986 - t598 * t983;
t467 = -t505 * t974 + t552 * t978;
t466 = t505 * t978 + t552 * t974;
t465 = t1037 * t979 - t975 * t533;
t463 = t986 * t571 - t983 * t589 + (-t619 * t975 - t620 * t979) * pkin(7);
t462 = -t503 * t974 + t548 * t978;
t461 = t503 * t978 + t548 * t974;
t460 = t484 * t986 - t593 * t983;
t459 = t483 * t986 - t592 * t983;
t458 = -t496 * t974 + t542 * t978;
t457 = t496 * t978 + t542 * t974;
t456 = -pkin(1) * t629 - t975 * t572 + t979 * t994;
t453 = t1038 * t979 - t975 * t519;
t452 = t1038 * t975 + t979 * t519;
t450 = -pkin(2) * t794 + pkin(8) * t520 - qJ(4) * t1112 + t570 * t985;
t447 = t515 * t985 + t516 * t982;
t441 = -pkin(1) * t619 - t975 * t558 + t979 * t995;
t435 = t986 * t479 - t983 * t628 + (-t581 * t975 - t582 * t979) * pkin(7);
t434 = t1039 * t979 - t975 * t499;
t433 = t1040 * t979 - t975 * t498;
t432 = t448 * t986 - t523 * t983;
t431 = -t453 * t974 + t514 * t978;
t430 = t453 * t978 + t514 * t974;
t425 = t1041 * t979 - t975 * t482;
t424 = t1042 * t979 - t975 * t481;
t420 = t1043 * t979 - t975 * t477;
t419 = t1043 * t975 + t979 * t477;
t418 = -pkin(2) * t720 + pkin(8) * t588 + t475 * t985 + t487 * t982;
t417 = -pkin(2) * t713 + pkin(8) * t584 + t474 * t985 + t485 * t982;
t415 = t1044 * t979 - t975 * t470;
t414 = t1044 * t975 + t979 * t470;
t412 = -pkin(1) * t581 - t975 * t476 + t979 * t996;
t411 = -pkin(2) * t704 + pkin(8) * t574 + t464 * t985 + t472 * t982;
t406 = t1045 * t979 - t975 * t447;
t401 = t1046 * t979 - t975 * t444;
t400 = t1046 * t975 + t979 * t444;
t398 = -t420 * t974 + t455 * t978;
t397 = t420 * t978 + t455 * t974;
t393 = -t415 * t974 + t442 * t978;
t392 = t415 * t978 + t442 * t974;
t391 = t1047 * t979 - t975 * t436;
t390 = t1047 * t975 + t979 * t436;
t389 = t986 * t423 - t983 * t494 + (-t504 * t975 - t505 * t979) * pkin(7);
t388 = t986 * t421 - t983 * t493 + (-t502 * t975 - t503 * t979) * pkin(7);
t386 = t986 * t454 - t983 * t480 + (-t452 * t975 - t453 * t979) * pkin(7);
t384 = -t401 * t974 + t427 * t978;
t383 = t401 * t978 + t427 * t974;
t382 = t986 * t413 - t983 * t451 + (-t495 * t975 - t496 * t979) * pkin(7);
t381 = -pkin(1) * t452 - t975 * t450 + t979 * t997;
t379 = -pkin(1) * t504 - t975 * t418 + t979 * t998;
t378 = -t391 * t974 + t416 * t978;
t377 = t391 * t978 + t416 * t974;
t376 = -pkin(1) * t502 - t975 * t417 + t979 * t999;
t371 = -pkin(2) * t517 + pkin(8) * t437 + t410 * t985 + t422 * t982;
t367 = -pkin(1) * t495 + t1000 * t979 - t975 * t411;
t366 = -pkin(2) * t579 + pkin(8) * t478 + t399 * t985 + t408 * t982;
t364 = -pkin(2) * t565 + pkin(8) * t471 + t394 * t985 + t405 * t982;
t361 = t986 * t368 - t983 * t409 + (-t419 * t975 - t420 * t979) * pkin(7);
t360 = -pkin(2) * t522 + pkin(8) * t445 + t374 * t985 + t380 * t982;
t358 = t986 * t365 - t983 * t407 + (-t414 * t975 - t415 * t979) * pkin(7);
t357 = t1048 * t979 - t975 * t369;
t356 = t1048 * t975 + t979 * t369;
t355 = t986 * t375 - t983 * t404 + (-t390 * t975 - t391 * t979) * pkin(7);
t352 = -pkin(1) * t419 + t1002 * t979 - t975 * t366;
t351 = -pkin(1) * t414 + t1003 * t979 - t975 * t364;
t350 = -pkin(1) * t390 + t1001 * t979 - t975 * t371;
t349 = t986 * t362 - t983 * t373 + (-t400 * t975 - t401 * t979) * pkin(7);
t348 = -t357 * t974 + t363 * t978;
t347 = t357 * t978 + t363 * t974;
t346 = -pkin(1) * t400 + t1004 * t979 - t975 * t360;
t344 = -pkin(2) * t402 + pkin(8) * t370 + t353 * t985 + t359 * t982;
t343 = t986 * t345 - t983 * t354 + (-t356 * t975 - t357 * t979) * pkin(7);
t342 = -pkin(1) * t356 + t1005 * t979 - t975 * t344;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t892, 0, 0, 0, 0, 0, 0, t875, t874, 0, t690, 0, 0, 0, 0, 0, 0, t747, t748, t816, t569, 0, 0, 0, 0, 0, 0, t557, t576, t530, t431, 0, 0, 0, 0, 0, 0, t462, t467, t458, t378, 0, 0, 0, 0, 0, 0, t393, t398, t384, t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t891, 0, 0, 0, 0, 0, 0, t873, -t1017, 0, t689, 0, 0, 0, 0, 0, 0, t745, t746, t815, t568, 0, 0, 0, 0, 0, 0, t556, t575, t529, t430, 0, 0, 0, 0, 0, 0, t461, t466, t457, t377, 0, 0, 0, 0, 0, 0, t392, t397, t383, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1084, 0, 0, 0, 0, 0, 0, t924, -t923, 0, t755, 0, 0, 0, 0, 0, 0, t800, t801, t877, t621, 0, 0, 0, 0, 0, 0, t619, t629, t581, t452, 0, 0, 0, 0, 0, 0, t502, t504, t495, t390, 0, 0, 0, 0, 0, 0, t414, t419, t400, t356; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1124, -t1123, -t891, -qJ(1) * t891, 0, 0, -t874, 0, t875, t974 * t1075, -qJ(1) * t873 - t766 * t974 + t818 * t978, qJ(1) * t1017 - t765 * t974 + t819 * t978, -t773 * t974 + t783 * t978, -qJ(1) * t689 + t656 * t978 - t691 * t974, -t814 * t974 + t865 * t978, -t782 * t974 + t845 * t978, -t812 * t974 + t863 * t978, -t813 * t974 + t864 * t978, -t811 * t974 + t862 * t978, -t890 * t974 + t911 * t978, -qJ(1) * t745 - t615 * t974 + t626 * t978, -qJ(1) * t746 - t616 * t974 + t627 * t978, -qJ(1) * t815 - t614 * t974 + t664 * t978, -qJ(1) * t568 - t507 * t974 + t511 * t978, -t645 * t974 + t712 * t978, -t585 * t974 + t649 * t978, -t631 * t974 + t697 * t978, -t644 * t974 + t711 * t978, -t630 * t974 + t696 * t978, -t693 * t974 + t767 * t978, -qJ(1) * t556 - t441 * t974 + t463 * t978, -qJ(1) * t575 - t456 * t974 + t473 * t978, -qJ(1) * t529 - t412 * t974 + t435 * t978, -qJ(1) * t430 - t381 * t974 + t386 * t978, -t537 * t974 + t618 * t978, -t506 * t974 + t550 * t978, -t512 * t974 + t559 * t978, -t536 * t974 + t617 * t978, -t513 * t974 + t560 * t978, -t554 * t974 + t623 * t978, -qJ(1) * t461 - t376 * t974 + t388 * t978, -qJ(1) * t466 - t379 * t974 + t389 * t978, -qJ(1) * t457 - t367 * t974 + t382 * t978, -qJ(1) * t377 - t350 * t974 + t355 * t978, -t434 * t974 + t469 * t978, -t406 * t974 + t432 * t978, -t424 * t974 + t459 * t978, -t433 * t974 + t468 * t978, -t425 * t974 + t460 * t978, -t465 * t974 + t510 * t978, -qJ(1) * t392 - t351 * t974 + t358 * t978, -qJ(1) * t397 - t352 * t974 + t361 * t978, -qJ(1) * t383 - t346 * t974 + t349 * t978, -qJ(1) * t347 - t342 * t974 + t343 * t978; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1123, -t1124, t892, qJ(1) * t892, 0, 0, t1017, 0, t873, -t978 * t1075, qJ(1) * t875 + t766 * t978 + t818 * t974, qJ(1) * t874 + t765 * t978 + t819 * t974, t773 * t978 + t783 * t974, qJ(1) * t690 + t656 * t974 + t691 * t978, t814 * t978 + t865 * t974, t782 * t978 + t845 * t974, t812 * t978 + t863 * t974, t813 * t978 + t864 * t974, t811 * t978 + t862 * t974, t890 * t978 + t911 * t974, qJ(1) * t747 + t615 * t978 + t626 * t974, qJ(1) * t748 + t616 * t978 + t627 * t974, qJ(1) * t816 + t614 * t978 + t664 * t974, qJ(1) * t569 + t507 * t978 + t511 * t974, t645 * t978 + t712 * t974, t585 * t978 + t649 * t974, t631 * t978 + t697 * t974, t644 * t978 + t711 * t974, t630 * t978 + t696 * t974, t693 * t978 + t767 * t974, qJ(1) * t557 + t441 * t978 + t463 * t974, qJ(1) * t576 + t456 * t978 + t473 * t974, qJ(1) * t530 + t412 * t978 + t435 * t974, qJ(1) * t431 + t381 * t978 + t386 * t974, t537 * t978 + t618 * t974, t506 * t978 + t550 * t974, t512 * t978 + t559 * t974, t536 * t978 + t617 * t974, t513 * t978 + t560 * t974, t554 * t978 + t623 * t974, qJ(1) * t462 + t376 * t978 + t388 * t974, qJ(1) * t467 + t379 * t978 + t389 * t974, qJ(1) * t458 + t367 * t978 + t382 * t974, qJ(1) * t378 + t350 * t978 + t355 * t974, t434 * t978 + t469 * t974, t406 * t978 + t432 * t974, t424 * t978 + t459 * t974, t433 * t978 + t468 * t974, t425 * t978 + t460 * t974, t465 * t978 + t510 * t974, qJ(1) * t393 + t351 * t978 + t358 * t974, qJ(1) * t398 + t352 * t978 + t361 * t974, qJ(1) * t384 + t346 * t978 + t349 * t974, qJ(1) * t348 + t342 * t978 + t343 * t974; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1060, t944, 0, 0, 0, 0, t923, 0, t924, t979 * qJDD(2), pkin(1) * t926 + t1050 * t975 - t979 * t859, -pkin(1) * t925 + t1051 * t975 - t979 * t860, t784 * t975, pkin(1) * t756 + t1115 * t975, t1006 * t975 + t979 * t899, t1020 * t975 + t979 * t884, t1009 * t975 + t979 * t902, t1007 * t975 + t979 * t898, t1010 * t975 + t979 * t900, t1014 * t975, pkin(1) * t802 + t979 * t781 + t975 * t993, pkin(1) * t803 + t979 * t780 + t975 * t992, pkin(1) * t878 + t1052 * t975 + t979 * t702, pkin(1) * t622 + t979 * t694 + t975 * t990, t1011 * t975 + t979 * t750, t1027 * t975 + t979 * t683, t1022 * t975 + t979 * t738, t1012 * t975 + t979 * t749, t1023 * t975 + t979 * t737, t1015 * t975 + t979 * t771, pkin(1) * t620 + t979 * t558 + t975 * t995, pkin(1) * t632 + t979 * t572 + t975 * t994, pkin(1) * t582 + t979 * t476 + t975 * t996, pkin(1) * t453 + t979 * t450 + t975 * t997, t1029 * t975 + t979 * t636, t1033 * t975 + t979 * t596, t1032 * t975 + t979 * t607, t1030 * t975 + t979 * t635, t1031 * t975 + t979 * t608, t1028 * t975 + t979 * t647, pkin(1) * t503 + t979 * t417 + t975 * t999, pkin(1) * t505 + t979 * t418 + t975 * t998, pkin(1) * t496 + t1000 * t975 + t979 * t411, pkin(1) * t391 + t1001 * t975 + t979 * t371, t1039 * t975 + t979 * t499, t1045 * t975 + t979 * t447, t1042 * t975 + t979 * t481, t1040 * t975 + t979 * t498, t1041 * t975 + t979 * t482, t1037 * t975 + t979 * t533, pkin(1) * t415 + t1003 * t975 + t979 * t364, pkin(1) * t420 + t1002 * t975 + t979 * t366, pkin(1) * t401 + t1004 * t975 + t979 * t360, pkin(1) * t357 + t1005 * t975 + t979 * t344;];
tauB_reg  = t1;
