% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPPR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPPR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:02:19
% EndTime: 2019-03-08 21:02:35
% DurationCPUTime: 11.21s
% Computational Cost: add. (9716->635), mult. (23239->852), div. (0->0), fcn. (18681->18), ass. (0->300)
t230 = sin(pkin(11));
t239 = cos(qJ(3));
t237 = sin(qJ(3));
t369 = cos(pkin(11));
t289 = t369 * t237;
t188 = t230 * t239 + t289;
t177 = t188 * qJD(2);
t229 = sin(pkin(12));
t232 = cos(pkin(12));
t148 = qJD(3) * t229 + t177 * t232;
t236 = sin(qJ(6));
t393 = cos(qJ(6));
t348 = t229 * t177;
t412 = qJD(3) * t232 - t348;
t259 = t393 * t412;
t80 = -t148 * t236 + t259;
t417 = t80 ^ 2;
t288 = t369 * t239;
t208 = qJD(2) * t288;
t327 = qJD(2) * t237;
t174 = t230 * t327 - t208;
t167 = qJD(6) + t174;
t416 = t167 * t80;
t79 = t148 * t393 + t236 * t412;
t415 = t79 ^ 2;
t238 = sin(qJ(2));
t231 = sin(pkin(6));
t330 = qJD(1) * t231;
t307 = t238 * t330;
t324 = qJD(3) * t237;
t414 = pkin(3) * t324 - t307;
t176 = t188 * qJD(3);
t347 = t230 * t237;
t258 = t288 - t347;
t179 = t258 * qJD(3);
t413 = pkin(4) * t176 - qJ(5) * t179 - qJD(5) * t188 + t414;
t234 = -qJ(4) - pkin(8);
t295 = qJD(3) * t234;
t168 = qJD(4) * t239 + t237 * t295;
t255 = -qJD(4) * t237 + t239 * t295;
t240 = cos(qJ(2));
t306 = t240 * t330;
t336 = t168 * t369 + t230 * t255 - t258 * t306;
t373 = -t336 * t229 + t413 * t232;
t372 = t413 * t229 + t336 * t232;
t387 = pkin(9) * t232;
t411 = pkin(5) * t176 - t179 * t387 + t373;
t355 = t179 * t229;
t410 = pkin(9) * t355 - t372;
t189 = t229 * t393 + t236 * t232;
t181 = t189 * qJD(6);
t374 = t189 * t174 + t181;
t309 = t393 * t232;
t260 = -t236 * t229 + t309;
t322 = qJD(6) * t236;
t401 = qJD(6) * t309 - t229 * t322;
t338 = -t260 * t174 - t401;
t321 = qJD(1) * qJD(2);
t300 = t240 * t321;
t366 = qJDD(2) * pkin(8);
t158 = t366 + (qJDD(1) * t238 + t300) * t231;
t233 = cos(pkin(6));
t329 = qJD(1) * t233;
t407 = qJD(3) * t329 + t158;
t346 = t231 * t238;
t182 = t233 * t239 - t237 * t346;
t392 = pkin(3) * t230;
t214 = qJ(5) + t392;
t382 = pkin(9) + t214;
t184 = t382 * t229;
t185 = t382 * t232;
t117 = -t184 * t393 - t236 * t185;
t356 = t174 * t232;
t314 = pkin(3) * t327;
t106 = pkin(4) * t177 + qJ(5) * t174 + t314;
t305 = t237 * t329;
t194 = qJD(2) * pkin(8) + t307;
t284 = qJ(4) * qJD(2) + t194;
t403 = t239 * t284;
t141 = t305 + t403;
t131 = t230 * t141;
t209 = t239 * t329;
t140 = -t237 * t284 + t209;
t72 = t140 * t369 - t131;
t38 = t232 * t106 - t229 * t72;
t29 = pkin(5) * t177 + pkin(9) * t356 + t38;
t357 = t174 * t229;
t39 = t229 * t106 + t232 * t72;
t31 = pkin(9) * t357 + t39;
t406 = qJD(5) * t260 + qJD(6) * t117 - t236 * t29 - t31 * t393;
t118 = -t236 * t184 + t185 * t393;
t380 = -qJD(5) * t189 - qJD(6) * t118 + t236 * t31 - t29 * t393;
t318 = qJDD(1) * t233;
t207 = t239 * t318;
t319 = qJD(2) * qJD(4);
t58 = qJDD(3) * pkin(3) + t207 - qJD(3) * t403 + (-qJ(4) * qJDD(2) - t319 - t407) * t237;
t320 = qJD(2) * qJD(3);
t298 = t237 * t320;
t316 = t239 * qJDD(2);
t310 = t237 * t318 + t239 * t407;
t81 = -t194 * t324 + t310;
t59 = t239 * t319 + (-t298 + t316) * qJ(4) + t81;
t24 = -t230 * t59 + t369 * t58;
t22 = -qJDD(3) * pkin(4) + qJDD(5) - t24;
t368 = sin(pkin(10));
t286 = t368 * t240;
t370 = cos(pkin(10));
t292 = t370 * t238;
t171 = t233 * t292 + t286;
t226 = qJ(3) + pkin(11);
t221 = sin(t226);
t223 = cos(t226);
t294 = t231 * t370;
t127 = t171 * t221 + t223 * t294;
t287 = t368 * t238;
t291 = t370 * t240;
t173 = -t233 * t287 + t291;
t293 = t231 * t368;
t129 = t173 * t221 - t223 * t293;
t160 = t221 * t346 - t233 * t223;
t257 = g(1) * t129 + g(2) * t127 + g(3) * t160;
t244 = t22 - t257;
t405 = qJD(5) * t232 - t39;
t404 = t177 * t412;
t170 = -t233 * t291 + t287;
t172 = t233 * t286 + t292;
t277 = g(1) * t172 + g(2) * t170;
t344 = t231 * t240;
t402 = g(3) * t344 - t277;
t251 = t402 * t221;
t337 = t168 * t230 - t188 * t306 - t369 * t255;
t247 = qJDD(2) * t188 - t230 * t298;
t125 = qJD(3) * t208 + t247;
t102 = -qJDD(3) * t232 + t229 * t125;
t103 = qJDD(3) * t229 + t125 * t232;
t27 = -qJD(6) * t259 + t236 * t102 - t393 * t103 + t148 * t322;
t400 = -t260 * t27 - t374 * t79;
t317 = t237 * qJDD(2);
t273 = -qJDD(2) * t288 + t230 * t317;
t124 = qJD(2) * t176 + t273;
t119 = qJDD(6) + t124;
t399 = t119 * t189 - t167 * t338;
t169 = t174 ^ 2;
t398 = -t124 * t229 - t169 * t232;
t241 = qJD(3) ^ 2;
t296 = qJDD(1) * t344;
t301 = t238 * t321;
t274 = t231 * t301 - t296;
t367 = qJDD(2) * pkin(2);
t157 = t274 - t367;
t265 = -t157 + t277;
t397 = -pkin(8) * t241 + t231 * (-g(3) * t240 + t301) + t265 + t367;
t135 = qJD(3) * pkin(3) + t140;
t290 = t369 * t141;
t68 = t230 * t135 + t290;
t63 = qJD(3) * qJ(5) + t68;
t390 = pkin(3) * t239;
t219 = pkin(2) + t390;
t166 = -qJD(2) * t219 + qJD(4) - t306;
t88 = pkin(4) * t174 - qJ(5) * t177 + t166;
t32 = -t229 * t63 + t232 * t88;
t19 = pkin(5) * t174 - pkin(9) * t148 + t32;
t33 = t229 * t88 + t232 * t63;
t26 = pkin(9) * t412 + t33;
t262 = -t19 * t393 + t236 * t26;
t25 = t230 * t58 + t369 * t59;
t21 = qJDD(3) * qJ(5) + qJD(3) * qJD(5) + t25;
t123 = pkin(3) * t298 - qJDD(2) * t219 + qJDD(4) + t274;
t37 = pkin(4) * t124 - qJ(5) * t125 - qJD(5) * t177 + t123;
t10 = -t21 * t229 + t232 * t37;
t6 = pkin(5) * t124 - pkin(9) * t103 + t10;
t11 = t232 * t21 + t229 * t37;
t7 = -pkin(9) * t102 + t11;
t1 = -t262 * qJD(6) + t236 * t6 + t393 * t7;
t396 = t177 ^ 2;
t120 = -pkin(4) * t258 - qJ(5) * t188 - t219;
t198 = t234 * t239;
t146 = -t198 * t369 + t234 * t347;
t64 = t232 * t120 - t146 * t229;
t44 = -pkin(5) * t258 - t188 * t387 + t64;
t354 = t188 * t229;
t65 = t229 * t120 + t232 * t146;
t48 = -pkin(9) * t354 + t65;
t17 = -t236 * t48 + t393 * t44;
t395 = qJD(6) * t17 + t236 * t411 - t410 * t393;
t18 = t236 * t44 + t393 * t48;
t394 = -qJD(6) * t18 + t410 * t236 + t393 * t411;
t391 = pkin(3) * t237;
t389 = pkin(5) * t102;
t388 = pkin(5) * t229;
t191 = t219 * t344;
t386 = g(3) * t191;
t385 = g(3) * t231;
t384 = t232 * pkin(5);
t383 = t79 * t80;
t379 = qJD(2) * pkin(2);
t378 = t177 * t80;
t377 = t177 * t79;
t375 = t229 * t32;
t371 = pkin(5) * t355 + t337;
t365 = t102 * t232;
t364 = t103 * t229;
t363 = t103 * t232;
t360 = t148 * t177;
t359 = t148 * t229;
t358 = t174 * t177;
t353 = t194 * t237;
t352 = t214 * t229;
t225 = pkin(12) + qJ(6);
t220 = sin(t225);
t351 = t220 * t223;
t222 = cos(t225);
t350 = t222 * t223;
t349 = t223 * t240;
t345 = t231 * t239;
t116 = t232 * t124;
t342 = t234 * t238;
t67 = t135 * t369 - t131;
t62 = -qJD(3) * pkin(4) + qJD(5) - t67;
t340 = -qJD(5) + t62;
t339 = qJDD(1) - g(3);
t335 = -t169 * t229 + t116;
t334 = -t170 * t219 - t171 * t234;
t333 = -t172 * t219 - t173 * t234;
t227 = t237 ^ 2;
t228 = t239 ^ 2;
t332 = t227 - t228;
t331 = t227 + t228;
t195 = -t306 - t379;
t328 = qJD(2) * t195;
t326 = qJD(2) * t238;
t315 = g(3) * t346;
t242 = qJD(2) ^ 2;
t311 = t237 * t242 * t239;
t308 = t369 * pkin(3);
t304 = t231 * t326;
t303 = qJD(2) * t344;
t297 = t240 * t320;
t285 = t393 * t102 + t236 * t103;
t70 = t140 * t230 + t290;
t145 = -t198 * t230 - t234 * t289;
t28 = qJD(6) * t79 + t285;
t282 = -t189 * t28 - t338 * t80;
t280 = t239 * t298;
t279 = -t173 * t391 + t293 * t390;
t278 = t260 * t119 - t167 * t374;
t218 = -t308 - pkin(4);
t276 = g(1) * t173 + g(2) * t171;
t275 = pkin(4) * t223 + qJ(5) * t221;
t272 = -t10 * t232 - t11 * t229;
t271 = -t124 * t258 + t174 * t176;
t270 = t124 * t188 + t174 * t179;
t217 = pkin(4) + t384;
t235 = -pkin(9) - qJ(5);
t269 = t217 * t223 - t221 * t235;
t268 = t232 * t412;
t267 = t182 * pkin(3);
t266 = qJDD(2) * t240 - t238 * t242;
t183 = t233 * t237 + t238 * t345;
t112 = t230 * t182 + t183 * t369;
t89 = -t112 * t229 - t232 * t344;
t90 = t112 * t232 - t229 * t344;
t40 = -t236 * t90 + t393 * t89;
t9 = t236 * t19 + t26 * t393;
t41 = t236 * t89 + t393 * t90;
t152 = t194 * t239 + t305;
t128 = t171 * t223 - t221 * t294;
t130 = t173 * t223 + t221 * t293;
t161 = t221 * t233 + t223 * t346;
t256 = g(1) * t130 + g(2) * t128 + g(3) * t161;
t253 = t268 - t359;
t252 = (-t171 * t237 - t239 * t294) * pkin(3);
t250 = t402 * t223;
t249 = t70 * qJD(3) + t257;
t248 = t179 * t62 + t188 * t22 - t276;
t2 = -qJD(6) * t9 - t236 * t7 + t393 * t6;
t245 = -pkin(8) * qJDD(3) + (t195 + t306 - t379) * qJD(3);
t151 = t209 - t353;
t82 = -t152 * qJD(3) - t237 * t158 + t207;
t243 = -t82 * t237 + t81 * t239 + (-t151 * t239 - t152 * t237) * qJD(3) - t276;
t196 = t218 - t384;
t139 = -qJD(3) * t183 - t237 * t303;
t138 = qJD(3) * t182 + t239 * t303;
t111 = -t182 * t369 + t183 * t230;
t110 = t260 * t188;
t109 = t189 * t188;
t101 = pkin(5) * t354 + t145;
t92 = t229 * t102;
t71 = t138 * t369 + t230 * t139;
t69 = t138 * t230 - t139 * t369;
t55 = t229 * t304 + t232 * t71;
t54 = -t229 * t71 + t232 * t304;
t51 = -pkin(5) * t357 + t70;
t50 = t179 * t189 + t401 * t188;
t49 = -t260 * t179 + t181 * t188;
t45 = -pkin(5) * t412 + t62;
t16 = t22 + t389;
t15 = -qJD(6) * t41 - t236 * t55 + t393 * t54;
t14 = qJD(6) * t40 + t236 * t54 + t393 * t55;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t339, 0, 0, 0, 0, 0, 0, t266 * t231 (-qJDD(2) * t238 - t240 * t242) * t231, 0, -g(3) + (t233 ^ 2 + (t238 ^ 2 + t240 ^ 2) * t231 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, qJD(3) * t139 + qJDD(3) * t182 + (-t237 * t297 + t239 * t266) * t231, -qJD(3) * t138 - qJDD(3) * t183 + (-t237 * t266 - t239 * t297) * t231 (-t182 * t237 + t183 * t239) * qJDD(2) + (t138 * t239 - t139 * t237 + (-t182 * t239 - t183 * t237) * qJD(3)) * qJD(2), t138 * t152 + t139 * t151 + t182 * t82 + t183 * t81 - g(3) + (-t157 * t240 + t195 * t326) * t231, 0, 0, 0, 0, 0, 0, -qJD(3) * t69 - qJDD(3) * t111 + (-t124 * t240 + t174 * t326) * t231, -qJD(3) * t71 - qJDD(3) * t112 + (-t125 * t240 + t177 * t326) * t231, t111 * t125 - t112 * t124 - t174 * t71 + t177 * t69, -t111 * t24 + t112 * t25 - t67 * t69 + t68 * t71 - g(3) + (-t123 * t240 + t166 * t326) * t231, 0, 0, 0, 0, 0, 0, t111 * t102 + t89 * t124 + t54 * t174 - t412 * t69, t103 * t111 - t124 * t90 + t148 * t69 - t174 * t55, -t90 * t102 - t89 * t103 - t54 * t148 + t412 * t55, t10 * t89 + t11 * t90 + t111 * t22 + t32 * t54 + t33 * t55 + t62 * t69 - g(3), 0, 0, 0, 0, 0, 0, t111 * t28 + t119 * t40 + t15 * t167 - t69 * t80, -t111 * t27 - t119 * t41 - t14 * t167 + t69 * t79, t14 * t80 - t15 * t79 + t27 * t40 - t28 * t41, t1 * t41 + t111 * t16 + t14 * t9 - t15 * t262 + t2 * t40 + t45 * t69 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t402 + t296, -t339 * t346 + t276, 0, 0, qJDD(2) * t227 + 0.2e1 * t280, 0.2e1 * t237 * t316 - 0.2e1 * t320 * t332, qJDD(3) * t237 + t239 * t241, qJDD(2) * t228 - 0.2e1 * t280, qJDD(3) * t239 - t237 * t241, 0, t245 * t237 + t397 * t239, -t397 * t237 + t245 * t239, t331 * t366 + (-g(3) * t238 - t300 * t331) * t231 + t243, t265 * pkin(2) + t243 * pkin(8) + (-g(3) * (pkin(2) * t240 + pkin(8) * t238) + (-t195 * t238 + (t151 * t237 - t152 * t239) * t240) * qJD(1)) * t231, t125 * t188 + t177 * t179, t125 * t258 - t176 * t177 - t270, qJD(3) * t179 + qJDD(3) * t188, t271, -qJD(3) * t176 + qJDD(3) * t258, 0, -t174 * t307 - qJDD(3) * t145 - t123 * t258 - t124 * t219 + t166 * t176 - t250 + (t174 * t391 - t337) * qJD(3), -t177 * t307 - qJDD(3) * t146 + t123 * t188 - t125 * t219 + t166 * t179 + t251 + (t177 * t391 - t336) * qJD(3), -t124 * t146 + t125 * t145 - t174 * t336 - t176 * t68 + t177 * t337 - t179 * t67 - t188 * t24 + t25 * t258 - t276 - t315, t25 * t146 - t24 * t145 - t123 * t219 - g(1) * t333 - g(2) * t334 - g(3) * (-t231 * t342 + t191) + t336 * t68 - t337 * t67 + t414 * t166 (t103 * t188 + t148 * t179) * t232 (-t364 - t365) * t188 + t253 * t179, -t103 * t258 + t148 * t176 + t232 * t270 (t102 * t188 - t179 * t412) * t229, t102 * t258 + t176 * t412 - t229 * t270, t271, t64 * t124 - t10 * t258 + t32 * t176 + t145 * t102 - t232 * t250 + (t248 - t315) * t229 + t373 * t174 - t337 * t412, t145 * t103 + t11 * t258 - t65 * t124 - t33 * t176 - t277 * t229 * t223 + t248 * t232 - (-t229 * t349 + t232 * t238) * t385 - t372 * t174 + t337 * t148, -t65 * t102 - t64 * t103 + t272 * t188 + (-t229 * t33 - t232 * t32) * t179 - t373 * t148 - t251 + t372 * t412, t11 * t65 + t10 * t64 + t22 * t145 - g(1) * (-t172 * t275 + t333) - g(2) * (-t170 * t275 + t334) - t386 + t337 * t62 + t372 * t33 + t373 * t32 - (t240 * t275 - t342) * t385, -t110 * t27 - t49 * t79, t109 * t27 - t110 * t28 - t49 * t80 - t50 * t79, t110 * t119 - t167 * t49 + t176 * t79 + t258 * t27, t109 * t28 - t50 * t80, -t109 * t119 - t167 * t50 + t176 * t80 + t258 * t28, -t119 * t258 + t167 * t176, t17 * t119 - t2 * t258 - t262 * t176 + t101 * t28 + t16 * t109 + t45 * t50 - g(1) * (-t172 * t350 + t173 * t220) - g(2) * (-t170 * t350 + t171 * t220) - t371 * t80 - (t220 * t238 + t222 * t349) * t385 + t394 * t167, -t18 * t119 + t1 * t258 - t9 * t176 - t101 * t27 + t16 * t110 - t45 * t49 - g(1) * (t172 * t351 + t173 * t222) - g(2) * (t170 * t351 + t171 * t222) + t371 * t79 - (-t220 * t349 + t222 * t238) * t385 - t395 * t167, -t1 * t109 - t110 * t2 + t17 * t27 - t18 * t28 - t262 * t49 - t394 * t79 + t395 * t80 - t50 * t9 - t251, t1 * t18 + t2 * t17 + t16 * t101 - g(1) * (-t172 * t269 + t173 * t388 + t333) - g(2) * (-t170 * t269 + t171 * t388 + t334) - t386 + t395 * t9 - t394 * t262 + t371 * t45 - (t269 * t240 + (-t234 + t388) * t238) * t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t311, t332 * t242, t317, t311, t316, qJDD(3), -g(3) * t182 + t207 + (-g(1) * t368 + g(2) * t370) * t345 + (-t158 + t276 - t328) * t237, -t239 * t328 - g(1) * (-t173 * t239 - t237 * t293) - g(2) * (-t171 * t239 + t237 * t294) + g(3) * t183 + (t151 + t353) * qJD(3) - t310, 0, 0, t358, -t169 + t396 (t208 + t174) * qJD(3) + t247, -t358, -t273, qJDD(3), -t166 * t177 + (qJDD(3) * t369 - t174 * t327) * pkin(3) + t249 + t24, qJD(3) * t72 + t166 * t174 + (-qJDD(3) * t230 - t177 * t327) * pkin(3) + t256 - t25 (t68 - t70) * t177 + (-t67 + t72) * t174 + (-t124 * t230 - t125 * t369) * pkin(3), -g(1) * t279 - g(2) * t252 - g(3) * t267 - t166 * t314 + t24 * t308 + t25 * t392 + t67 * t70 - t68 * t72, t148 * t356 + t364, t174 * t253 + t363 - t92, -t360 - t398, -t357 * t412 - t365, t335 - t404, -t358, -t124 * t352 + t218 * t102 - t70 * t348 - t32 * t177 + (t229 * t340 - t38) * t174 + (-t22 + t249) * t232, -t214 * t116 + t103 * t218 - t148 * t70 + t177 * t33 + (t232 * t340 + t39) * t174 + t244 * t229, t38 * t148 + t39 * t348 + (t405 * qJD(3) - qJD(5) * t348 - t214 * t102 - t32 * t174 + t11) * t232 + (qJD(5) * t148 + t103 * t214 - t174 * t33 - t10) * t229 - t256, t11 * t232 * t214 - t10 * t352 - qJD(5) * t375 + t22 * t218 - t32 * t38 - t62 * t70 - g(1) * (-pkin(4) * t129 + qJ(5) * t130 + t279) - g(2) * (-t127 * pkin(4) + t128 * qJ(5) + t252) - g(3) * (-pkin(4) * t160 + qJ(5) * t161 + t267) + t405 * t33, -t189 * t27 - t338 * t79, t282 + t400, -t377 + t399, -t260 * t28 - t374 * t80, t278 - t378, -t167 * t177, t117 * t119 - t16 * t260 + t167 * t380 + t177 * t262 + t196 * t28 + t222 * t257 + t374 * t45 + t51 * t80, -t118 * t119 + t16 * t189 - t167 * t406 + t177 * t9 - t196 * t27 - t220 * t257 - t338 * t45 - t51 * t79, t1 * t260 + t117 * t27 - t118 * t28 - t189 * t2 - t262 * t338 - t374 * t9 - t380 * t79 + t406 * t80 - t256, t1 * t118 + t2 * t117 + t16 * t196 - t45 * t51 - g(1) * (-t129 * t217 - t130 * t235 + t279) - g(2) * (-t127 * t217 - t128 * t235 + t252) - g(3) * (-t160 * t217 - t161 * t235 + t267) + t406 * t9 - t380 * t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t177 * qJD(3) + t273 (t208 - t174) * qJD(3) + t247, -t169 - t396, t174 * t68 + t177 * t67 + t123 + t402, 0, 0, 0, 0, 0, 0, t335 + t404, -t360 + t398, -t363 - t92 + (t268 + t359) * t174, -t177 * t62 + (t232 * t33 - t375) * t174 + t402 - t272, 0, 0, 0, 0, 0, 0, t278 + t378, -t377 - t399, t282 - t400, t1 * t189 - t177 * t45 + t2 * t260 + t262 * t374 - t338 * t9 + t402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148 * t174 + t102, t174 * t412 + t103, -t148 ^ 2 - t412 ^ 2, t148 * t32 - t33 * t412 + t244, 0, 0, 0, 0, 0, 0, t79 * t167 + t28, -t27 + t416, -t415 - t417, -t262 * t79 - t80 * t9 + t244 + t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t383, t415 - t417, -t27 - t416, t383, -t285 + (-qJD(6) + t167) * t79, t119, t9 * t167 - t45 * t79 - g(1) * (-t130 * t220 + t172 * t222) - g(2) * (-t128 * t220 + t170 * t222) - g(3) * (-t161 * t220 - t222 * t344) + t2, -t262 * t167 - t45 * t80 - g(1) * (-t130 * t222 - t172 * t220) - g(2) * (-t128 * t222 - t170 * t220) - g(3) * (-t161 * t222 + t220 * t344) - t1, 0, 0;];
tau_reg  = t3;
