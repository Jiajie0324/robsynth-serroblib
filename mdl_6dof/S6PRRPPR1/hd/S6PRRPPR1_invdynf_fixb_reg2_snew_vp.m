% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 02:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 02:35:52
% EndTime: 2019-05-05 02:36:01
% DurationCPUTime: 8.96s
% Computational Cost: add. (61169->326), mult. (137981->506), div. (0->0), fcn. (102839->14), ass. (0->279)
t2233 = sin(pkin(6));
t2237 = cos(pkin(6));
t2232 = sin(pkin(10));
t2236 = cos(pkin(10));
t2271 = g(1) * t2232 - g(2) * t2236;
t2292 = -g(3) + qJDD(1);
t2302 = t2233 * t2292 + t2237 * t2271;
t2231 = sin(pkin(11));
t2235 = cos(pkin(11));
t2243 = cos(qJ(3));
t2290 = qJD(2) * t2243;
t2240 = sin(qJ(3));
t2291 = qJD(2) * t2240;
t2195 = t2231 * t2291 - t2235 * t2290;
t2190 = qJD(6) + t2195;
t2301 = qJD(6) + t2190;
t2246 = qJD(2) ^ 2;
t2219 = t2240 * t2246 * t2243;
t2211 = qJDD(3) + t2219;
t2197 = t2231 * t2290 + t2235 * t2291;
t2230 = sin(pkin(12));
t2234 = cos(pkin(12));
t2178 = -qJD(3) * t2234 + t2197 * t2230;
t2180 = qJD(3) * t2230 + t2197 * t2234;
t2239 = sin(qJ(6));
t2242 = cos(qJ(6));
t2145 = t2178 * t2242 + t2180 * t2239;
t2300 = t2145 ^ 2;
t2147 = -t2178 * t2239 + t2180 * t2242;
t2299 = t2147 ^ 2;
t2298 = t2178 ^ 2;
t2297 = t2180 ^ 2;
t2296 = t2190 ^ 2;
t2170 = t2195 ^ 2;
t2295 = t2197 ^ 2;
t2294 = -2 * qJD(4);
t2293 = -2 * qJD(5);
t2289 = qJD(3) * t2195;
t2288 = qJD(3) * t2197;
t2287 = t2145 * t2147;
t2286 = t2178 * t2180;
t2285 = t2180 * t2195;
t2284 = t2195 * t2178;
t2283 = t2195 * t2197;
t2227 = t2243 ^ 2;
t2282 = t2227 * t2246;
t2281 = qJD(6) - t2190;
t2186 = -t2233 * t2271 + t2237 * t2292;
t2209 = -g(1) * t2236 - g(2) * t2232;
t2241 = sin(qJ(2));
t2244 = cos(qJ(2));
t2163 = t2244 * t2209 + t2241 * t2302;
t2248 = -t2246 * pkin(2) + qJDD(2) * pkin(8) + t2163;
t2140 = t2186 * t2240 + t2243 * t2248;
t2226 = t2240 ^ 2;
t2280 = t2226 + t2227;
t2279 = t2240 * qJDD(2);
t2278 = qJD(3) * t2291;
t2277 = qJD(3) * t2290;
t2224 = t2243 * qJDD(2);
t2203 = t2224 - t2278;
t2210 = qJD(3) * pkin(3) - qJ(4) * t2291;
t2121 = -pkin(3) * t2282 + qJ(4) * t2203 - qJD(3) * t2210 + t2140;
t2139 = t2243 * t2186 - t2240 * t2248;
t2202 = t2277 + t2279;
t2247 = t2139 + (-t2202 + t2277) * qJ(4) + t2211 * pkin(3);
t2085 = t2121 * t2235 + t2195 * t2294 + t2231 * t2247;
t2164 = pkin(4) * t2195 - qJ(5) * t2197;
t2245 = qJD(3) ^ 2;
t2072 = -pkin(4) * t2245 + qJDD(3) * qJ(5) - t2164 * t2195 + t2085;
t2270 = t2241 * t2209 - t2244 * t2302;
t2154 = -qJDD(2) * pkin(2) - pkin(8) * t2246 + t2270;
t2130 = -pkin(3) * t2203 - qJ(4) * t2282 + t2210 * t2291 + qJDD(4) + t2154;
t2171 = t2202 * t2231 - t2203 * t2235;
t2149 = t2171 + t2288;
t2172 = t2202 * t2235 + t2203 * t2231;
t2275 = -t2172 + t2289;
t2097 = pkin(4) * t2149 + qJ(5) * t2275 + t2130;
t2050 = t2072 * t2234 + t2097 * t2230 + t2178 * t2293;
t2274 = t2231 * t2121 - t2235 * t2247;
t2161 = qJDD(3) * t2230 + t2172 * t2234;
t2272 = -qJDD(3) * t2234 + t2172 * t2230;
t2273 = -t2239 * t2161 - t2242 * t2272;
t2127 = -t2161 - t2284;
t2128 = t2171 - t2286;
t2049 = -t2230 * t2072 + t2097 * t2234 + t2180 * t2293;
t2269 = -qJDD(6) - t2171;
t2041 = pkin(5) * t2128 + pkin(9) * t2127 + t2049;
t2155 = pkin(5) * t2195 - pkin(9) * t2180;
t2044 = -pkin(5) * t2298 - pkin(9) * t2272 - t2155 * t2195 + t2050;
t2019 = t2041 * t2242 - t2044 * t2239;
t2020 = t2041 * t2239 + t2044 * t2242;
t2005 = t2019 * t2242 + t2020 * t2239;
t2006 = -t2019 * t2239 + t2020 * t2242;
t1996 = -t2005 * t2230 + t2006 * t2234;
t2071 = qJDD(5) - t2245 * qJ(5) - qJDD(3) * pkin(4) + ((2 * qJD(4)) + t2164) * t2197 + t2274;
t2063 = pkin(5) * t2272 - pkin(9) * t2298 + t2180 * t2155 + t2071;
t1991 = t1996 * t2231 - t2063 * t2235;
t1992 = t1996 * t2235 + t2063 * t2231;
t1988 = -t1991 * t2240 + t1992 * t2243;
t1995 = t2005 * t2234 + t2006 * t2230;
t2268 = t1988 * t2241 - t1995 * t2244;
t2031 = -t2049 * t2230 + t2050 * t2234;
t2017 = t2031 * t2231 - t2071 * t2235;
t2018 = t2031 * t2235 + t2071 * t2231;
t2004 = -t2017 * t2240 + t2018 * t2243;
t2030 = t2049 * t2234 + t2050 * t2230;
t2267 = t2004 * t2241 - t2030 * t2244;
t2087 = -t2147 * t2281 + t2273;
t2249 = -t2242 * t2161 + t2239 * t2272;
t2089 = t2145 * t2281 + t2249;
t2061 = t2087 * t2239 + t2089 * t2242;
t2062 = t2087 * t2242 - t2089 * t2239;
t2035 = -t2061 * t2230 + t2062 * t2234;
t2098 = -t2299 - t2300;
t2027 = t2035 * t2231 - t2098 * t2235;
t2028 = t2035 * t2235 + t2098 * t2231;
t2009 = -t2027 * t2240 + t2028 * t2243;
t2034 = t2061 * t2234 + t2062 * t2230;
t2266 = t2009 * t2241 - t2034 * t2244;
t2109 = -t2269 - t2287;
t2111 = -t2296 - t2300;
t2073 = t2109 * t2242 + t2111 * t2239;
t2074 = -t2109 * t2239 + t2111 * t2242;
t2046 = -t2073 * t2230 + t2074 * t2234;
t2086 = t2147 * t2301 - t2273;
t2036 = t2046 * t2231 - t2086 * t2235;
t2037 = t2046 * t2235 + t2086 * t2231;
t2014 = -t2036 * t2240 + t2037 * t2243;
t2045 = t2073 * t2234 + t2074 * t2230;
t2265 = t2014 * t2241 - t2045 * t2244;
t2110 = t2269 - t2287;
t2122 = -t2296 - t2299;
t2078 = t2110 * t2239 + t2122 * t2242;
t2079 = t2110 * t2242 - t2122 * t2239;
t2052 = -t2078 * t2230 + t2079 * t2234;
t2088 = -t2145 * t2301 - t2249;
t2038 = t2052 * t2231 - t2088 * t2235;
t2039 = t2052 * t2235 + t2088 * t2231;
t2016 = -t2038 * t2240 + t2039 * t2243;
t2051 = t2078 * t2234 + t2079 * t2230;
t2264 = t2016 * t2241 - t2051 * t2244;
t2084 = t2197 * t2294 - t2274;
t2059 = t2084 * t2235 + t2085 * t2231;
t2060 = -t2084 * t2231 + t2085 * t2235;
t2033 = -t2059 * t2240 + t2060 * t2243;
t2263 = t2033 * t2241 - t2130 * t2244;
t2125 = -t2272 + t2285;
t2100 = t2125 * t2234 - t2127 * t2230;
t2133 = -t2297 - t2298;
t2076 = t2100 * t2231 - t2133 * t2235;
t2077 = t2100 * t2235 + t2133 * t2231;
t2048 = -t2076 * t2240 + t2077 * t2243;
t2099 = t2125 * t2230 + t2127 * t2234;
t2262 = t2048 * t2241 - t2099 * t2244;
t2141 = -t2170 - t2298;
t2104 = -t2128 * t2230 + t2141 * t2234;
t2124 = t2272 + t2285;
t2080 = t2104 * t2231 - t2124 * t2235;
t2081 = t2104 * t2235 + t2124 * t2231;
t2056 = -t2080 * t2240 + t2081 * t2243;
t2103 = t2128 * t2234 + t2141 * t2230;
t2261 = t2056 * t2241 - t2103 * t2244;
t2129 = -t2171 - t2286;
t2144 = -t2170 - t2297;
t2108 = t2129 * t2234 - t2144 * t2230;
t2126 = t2161 - t2284;
t2082 = t2108 * t2231 - t2126 * t2235;
t2083 = t2108 * t2235 + t2126 * t2231;
t2058 = -t2082 * t2240 + t2083 * t2243;
t2107 = t2129 * t2230 + t2144 * t2234;
t2260 = t2058 * t2241 - t2107 * t2244;
t2150 = -t2171 + t2288;
t2152 = -t2172 - t2289;
t2119 = t2150 * t2231 + t2152 * t2235;
t2120 = t2150 * t2235 - t2152 * t2231;
t2091 = -t2119 * t2240 + t2120 * t2243;
t2148 = -t2295 - t2170;
t2259 = t2091 * t2241 - t2148 * t2244;
t2165 = -t2170 - t2245;
t2166 = qJDD(3) - t2283;
t2131 = t2165 * t2231 + t2166 * t2235;
t2132 = t2165 * t2235 - t2166 * t2231;
t2102 = -t2131 * t2240 + t2132 * t2243;
t2258 = t2102 * t2241 - t2149 * t2244;
t2106 = -t2139 * t2240 + t2140 * t2243;
t2257 = t2106 * t2241 - t2154 * t2244;
t2167 = -qJDD(3) - t2283;
t2187 = -t2245 - t2295;
t2142 = t2167 * t2231 + t2187 * t2235;
t2143 = t2167 * t2235 - t2187 * t2231;
t2113 = -t2142 * t2240 + t2143 * t2243;
t2256 = t2113 * t2241 + t2244 * t2275;
t2255 = t2163 * t2241 - t2244 * t2270;
t2218 = -t2245 - t2282;
t2183 = -t2211 * t2240 + t2218 * t2243;
t2204 = t2224 - 0.2e1 * t2278;
t2254 = t2183 * t2241 + t2204 * t2244;
t2212 = -qJDD(3) + t2219;
t2217 = -t2226 * t2246 - t2245;
t2184 = t2212 * t2243 - t2217 * t2240;
t2201 = 0.2e1 * t2277 + t2279;
t2253 = t2184 * t2241 - t2201 * t2244;
t2205 = t2280 * qJDD(2);
t2208 = t2280 * t2246;
t2252 = t2205 * t2241 + t2208 * t2244;
t2251 = qJDD(2) * t2244 - t2241 * t2246;
t2207 = -qJDD(2) * t2241 - t2244 * t2246;
t2194 = t2251 * t2237;
t2193 = t2207 * t2237;
t2192 = t2251 * t2233;
t2191 = t2207 * t2233;
t2182 = t2212 * t2240 + t2217 * t2243;
t2181 = t2211 * t2243 + t2218 * t2240;
t2176 = t2205 * t2244 - t2208 * t2241;
t2169 = t2252 * t2237;
t2168 = t2252 * t2233;
t2158 = t2184 * t2244 + t2201 * t2241;
t2157 = t2183 * t2244 - t2204 * t2241;
t2137 = -t2233 * t2182 + t2237 * t2253;
t2136 = -t2233 * t2181 + t2237 * t2254;
t2135 = t2237 * t2182 + t2233 * t2253;
t2134 = t2237 * t2181 + t2233 * t2254;
t2123 = t2163 * t2244 + t2241 * t2270;
t2115 = -t2233 * t2186 + t2237 * t2255;
t2114 = t2237 * t2186 + t2233 * t2255;
t2112 = t2142 * t2243 + t2143 * t2240;
t2105 = t2139 * t2243 + t2140 * t2240;
t2101 = t2131 * t2243 + t2132 * t2240;
t2094 = t2113 * t2244 - t2241 * t2275;
t2093 = t2106 * t2244 + t2154 * t2241;
t2092 = t2102 * t2244 + t2149 * t2241;
t2090 = t2119 * t2243 + t2120 * t2240;
t2075 = t2091 * t2244 + t2148 * t2241;
t2069 = -t2233 * t2112 + t2237 * t2256;
t2068 = t2237 * t2112 + t2233 * t2256;
t2067 = -t2233 * t2105 + t2237 * t2257;
t2066 = t2237 * t2105 + t2233 * t2257;
t2065 = -t2233 * t2101 + t2237 * t2258;
t2064 = t2237 * t2101 + t2233 * t2258;
t2057 = t2082 * t2243 + t2083 * t2240;
t2055 = t2080 * t2243 + t2081 * t2240;
t2054 = -t2233 * t2090 + t2237 * t2259;
t2053 = t2237 * t2090 + t2233 * t2259;
t2047 = t2076 * t2243 + t2077 * t2240;
t2043 = t2058 * t2244 + t2107 * t2241;
t2042 = t2056 * t2244 + t2103 * t2241;
t2040 = t2048 * t2244 + t2099 * t2241;
t2032 = t2059 * t2243 + t2060 * t2240;
t2029 = t2033 * t2244 + t2130 * t2241;
t2026 = -t2233 * t2057 + t2237 * t2260;
t2025 = t2237 * t2057 + t2233 * t2260;
t2024 = -t2233 * t2055 + t2237 * t2261;
t2023 = t2237 * t2055 + t2233 * t2261;
t2022 = -t2233 * t2047 + t2237 * t2262;
t2021 = t2237 * t2047 + t2233 * t2262;
t2015 = t2038 * t2243 + t2039 * t2240;
t2013 = t2036 * t2243 + t2037 * t2240;
t2012 = t2016 * t2244 + t2051 * t2241;
t2011 = -t2233 * t2032 + t2237 * t2263;
t2010 = t2237 * t2032 + t2233 * t2263;
t2008 = t2027 * t2243 + t2028 * t2240;
t2007 = t2014 * t2244 + t2045 * t2241;
t2003 = t2017 * t2243 + t2018 * t2240;
t2002 = t2009 * t2244 + t2034 * t2241;
t2001 = -t2233 * t2015 + t2237 * t2264;
t2000 = t2237 * t2015 + t2233 * t2264;
t1999 = t2004 * t2244 + t2030 * t2241;
t1998 = -t2233 * t2013 + t2237 * t2265;
t1997 = t2237 * t2013 + t2233 * t2265;
t1994 = -t2233 * t2008 + t2237 * t2266;
t1993 = t2237 * t2008 + t2233 * t2266;
t1990 = -t2233 * t2003 + t2237 * t2267;
t1989 = t2237 * t2003 + t2233 * t2267;
t1987 = t1991 * t2243 + t1992 * t2240;
t1986 = t1988 * t2244 + t1995 * t2241;
t1985 = -t2233 * t1987 + t2237 * t2268;
t1984 = t2237 * t1987 + t2233 * t2268;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2236 * t2209 - t2232 * t2271, 0, 0, 0, 0, 0, 0, -t2194 * t2232 + t2207 * t2236, -t2193 * t2232 - t2236 * t2251, 0, -t2115 * t2232 + t2123 * t2236, 0, 0, 0, 0, 0, 0, -t2136 * t2232 + t2157 * t2236, -t2137 * t2232 + t2158 * t2236, -t2169 * t2232 + t2176 * t2236, -t2067 * t2232 + t2093 * t2236, 0, 0, 0, 0, 0, 0, -t2065 * t2232 + t2092 * t2236, -t2069 * t2232 + t2094 * t2236, -t2054 * t2232 + t2075 * t2236, -t2011 * t2232 + t2029 * t2236, 0, 0, 0, 0, 0, 0, -t2024 * t2232 + t2042 * t2236, -t2026 * t2232 + t2043 * t2236, -t2022 * t2232 + t2040 * t2236, -t1990 * t2232 + t1999 * t2236, 0, 0, 0, 0, 0, 0, -t1998 * t2232 + t2007 * t2236, -t2001 * t2232 + t2012 * t2236, -t1994 * t2232 + t2002 * t2236, -t1985 * t2232 + t1986 * t2236; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2232 * t2209 + t2236 * t2271, 0, 0, 0, 0, 0, 0, t2194 * t2236 + t2207 * t2232, t2193 * t2236 - t2232 * t2251, 0, t2115 * t2236 + t2123 * t2232, 0, 0, 0, 0, 0, 0, t2136 * t2236 + t2157 * t2232, t2137 * t2236 + t2158 * t2232, t2169 * t2236 + t2176 * t2232, t2067 * t2236 + t2093 * t2232, 0, 0, 0, 0, 0, 0, t2065 * t2236 + t2092 * t2232, t2069 * t2236 + t2094 * t2232, t2054 * t2236 + t2075 * t2232, t2011 * t2236 + t2029 * t2232, 0, 0, 0, 0, 0, 0, t2024 * t2236 + t2042 * t2232, t2026 * t2236 + t2043 * t2232, t2022 * t2236 + t2040 * t2232, t1990 * t2236 + t1999 * t2232, 0, 0, 0, 0, 0, 0, t1998 * t2236 + t2007 * t2232, t2001 * t2236 + t2012 * t2232, t1994 * t2236 + t2002 * t2232, t1985 * t2236 + t1986 * t2232; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2292, 0, 0, 0, 0, 0, 0, t2192, t2191, 0, t2114, 0, 0, 0, 0, 0, 0, t2134, t2135, t2168, t2066, 0, 0, 0, 0, 0, 0, t2064, t2068, t2053, t2010, 0, 0, 0, 0, 0, 0, t2023, t2025, t2021, t1989, 0, 0, 0, 0, 0, 0, t1997, t2000, t1993, t1984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, 0, 0, 0, 0, 0, 0, t2207, -t2251, 0, t2123, 0, 0, 0, 0, 0, 0, t2157, t2158, t2176, t2093, 0, 0, 0, 0, 0, 0, t2092, t2094, t2075, t2029, 0, 0, 0, 0, 0, 0, t2042, t2043, t2040, t1999, 0, 0, 0, 0, 0, 0, t2007, t2012, t2002, t1986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2271, 0, 0, 0, 0, 0, 0, t2194, t2193, 0, t2115, 0, 0, 0, 0, 0, 0, t2136, t2137, t2169, t2067, 0, 0, 0, 0, 0, 0, t2065, t2069, t2054, t2011, 0, 0, 0, 0, 0, 0, t2024, t2026, t2022, t1990, 0, 0, 0, 0, 0, 0, t1998, t2001, t1994, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2292, 0, 0, 0, 0, 0, 0, t2192, t2191, 0, t2114, 0, 0, 0, 0, 0, 0, t2134, t2135, t2168, t2066, 0, 0, 0, 0, 0, 0, t2064, t2068, t2053, t2010, 0, 0, 0, 0, 0, 0, t2023, t2025, t2021, t1989, 0, 0, 0, 0, 0, 0, t1997, t2000, t1993, t1984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2246, -qJDD(2), 0, t2163, 0, 0, 0, 0, 0, 0, t2183, t2184, t2205, t2106, 0, 0, 0, 0, 0, 0, t2102, t2113, t2091, t2033, 0, 0, 0, 0, 0, 0, t2056, t2058, t2048, t2004, 0, 0, 0, 0, 0, 0, t2014, t2016, t2009, t1988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2246, 0, -t2270, 0, 0, 0, 0, 0, 0, t2204, -t2201, t2208, -t2154, 0, 0, 0, 0, 0, 0, -t2149, t2275, -t2148, -t2130, 0, 0, 0, 0, 0, 0, -t2103, -t2107, -t2099, -t2030, 0, 0, 0, 0, 0, 0, -t2045, -t2051, -t2034, -t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2186, 0, 0, 0, 0, 0, 0, t2181, t2182, 0, t2105, 0, 0, 0, 0, 0, 0, t2101, t2112, t2090, t2032, 0, 0, 0, 0, 0, 0, t2055, t2057, t2047, t2003, 0, 0, 0, 0, 0, 0, t2013, t2015, t2008, t1987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2218, t2212, t2224, t2140, 0, 0, 0, 0, 0, 0, t2132, t2143, t2120, t2060, 0, 0, 0, 0, 0, 0, t2081, t2083, t2077, t2018, 0, 0, 0, 0, 0, 0, t2037, t2039, t2028, t1992; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2211, t2217, -t2279, t2139, 0, 0, 0, 0, 0, 0, t2131, t2142, t2119, t2059, 0, 0, 0, 0, 0, 0, t2080, t2082, t2076, t2017, 0, 0, 0, 0, 0, 0, t2036, t2038, t2027, t1991; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2204, t2201, -t2208, t2154, 0, 0, 0, 0, 0, 0, t2149, -t2275, t2148, t2130, 0, 0, 0, 0, 0, 0, t2103, t2107, t2099, t2030, 0, 0, 0, 0, 0, 0, t2045, t2051, t2034, t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2165, t2167, t2150, t2085, 0, 0, 0, 0, 0, 0, t2104, t2108, t2100, t2031, 0, 0, 0, 0, 0, 0, t2046, t2052, t2035, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2187, t2152, t2084, 0, 0, 0, 0, 0, 0, -t2124, -t2126, -t2133, -t2071, 0, 0, 0, 0, 0, 0, -t2086, -t2088, -t2098, -t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2149, -t2275, t2148, t2130, 0, 0, 0, 0, 0, 0, t2103, t2107, t2099, t2030, 0, 0, 0, 0, 0, 0, t2045, t2051, t2034, t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2141, t2129, t2125, t2050, 0, 0, 0, 0, 0, 0, t2074, t2079, t2062, t2006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2128, t2144, t2127, t2049, 0, 0, 0, 0, 0, 0, t2073, t2078, t2061, t2005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2124, t2126, t2133, t2071, 0, 0, 0, 0, 0, 0, t2086, t2088, t2098, t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2111, t2110, t2087, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2109, t2122, t2089, t2019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2086, t2088, t2098, t2063;];
f_new_reg  = t1;
