% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRR6_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR6_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR6_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR6_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:52:53
% EndTime: 2019-03-09 03:53:11
% DurationCPUTime: 7.55s
% Computational Cost: add. (17275->492), mult. (44521->655), div. (0->0), fcn. (35602->10), ass. (0->226)
t253 = sin(pkin(10));
t255 = cos(pkin(10));
t258 = sin(qJ(3));
t344 = cos(qJ(3));
t227 = t344 * t253 + t258 * t255;
t213 = t227 * qJD(1);
t252 = sin(pkin(11));
t254 = cos(pkin(11));
t184 = t252 * qJD(3) + t254 * t213;
t185 = t254 * qJD(3) - t252 * t213;
t257 = sin(qJ(5));
t259 = cos(qJ(5));
t124 = t257 * t184 - t259 * t185;
t127 = t259 * t184 + t257 * t185;
t256 = sin(qJ(6));
t343 = cos(qJ(6));
t64 = t343 * t124 + t256 * t127;
t374 = t64 ^ 2;
t66 = t256 * t124 - t343 * t127;
t373 = t66 ^ 2;
t285 = qJD(1) * t344;
t240 = t255 * t285;
t304 = t258 * t253;
t287 = qJD(1) * t304;
t211 = -t240 + t287;
t207 = qJD(5) + t211;
t199 = qJD(6) + t207;
t372 = t64 * t199;
t371 = t66 * t199;
t370 = t124 ^ 2;
t369 = t127 ^ 2;
t368 = t124 * t207;
t367 = t127 * t207;
t226 = t259 * t252 + t257 * t254;
t216 = t226 * qJD(5);
t363 = t226 * t211 + t216;
t302 = t259 * t254;
t353 = -t257 * t252 + t302;
t293 = qJD(5) * t259;
t294 = qJD(5) * t257;
t354 = -t252 * t294 + t254 * t293;
t366 = t353 * t211 + t354;
t339 = pkin(8) + qJ(4);
t231 = t339 * t252;
t233 = t339 * t254;
t163 = t213 * pkin(3) + t211 * qJ(4);
t340 = pkin(7) + qJ(2);
t234 = t340 * t255;
t229 = qJD(1) * t234;
t210 = t258 * t229;
t232 = t340 * t253;
t228 = qJD(1) * t232;
t169 = -t344 * t228 - t210;
t106 = t254 * t163 - t252 * t169;
t342 = pkin(8) * t254;
t73 = t213 * pkin(4) + t211 * t342 + t106;
t107 = t252 * t163 + t254 * t169;
t317 = t211 * t252;
t87 = pkin(8) * t317 + t107;
t329 = qJD(4) * t302 - t231 * t293 - t259 * t87 + (-qJD(4) * t252 - qJD(5) * t233 - t73) * t257;
t180 = -t257 * t231 + t259 * t233;
t328 = -t226 * qJD(4) - qJD(5) * t180 + t257 * t87 - t259 * t73;
t341 = t64 * t66;
t283 = qJD(6) * t343;
t292 = qJD(6) * t256;
t331 = t226 * t292 + t363 * t256 - t283 * t353 - t366 * t343;
t168 = t343 * t226 + t256 * t353;
t330 = t168 * qJD(6) + t366 * t256 + t363 * t343;
t365 = -t363 * pkin(9) + t329;
t364 = t213 * pkin(5) + t366 * pkin(9) - t328;
t362 = t373 - t374;
t238 = qJD(3) * t240;
t200 = qJD(3) * t287 - t238;
t310 = t252 * t200;
t77 = t257 * (qJD(5) * t184 - t310) - t185 * t293 + t200 * t302;
t78 = t184 * t293 + t185 * t294 - t200 * t226;
t23 = t124 * t283 + t127 * t292 + t256 * t78 + t343 * t77;
t361 = -t23 + t372;
t246 = -t255 * pkin(2) - pkin(1);
t230 = qJD(1) * t246 + qJD(2);
t141 = t211 * pkin(3) - t213 * qJ(4) + t230;
t170 = -t258 * t228 + t344 * t229;
t162 = qJD(3) * qJ(4) + t170;
t94 = t254 * t141 - t252 * t162;
t56 = t211 * pkin(4) - t184 * pkin(8) + t94;
t95 = t252 * t141 + t254 * t162;
t72 = pkin(8) * t185 + t95;
t33 = -t257 * t72 + t259 * t56;
t27 = -t127 * pkin(9) + t33;
t25 = t207 * pkin(5) + t27;
t34 = t257 * t56 + t259 * t72;
t28 = -t124 * pkin(9) + t34;
t218 = t227 * qJD(3);
t201 = qJD(1) * t218;
t308 = t254 * t200;
t123 = t201 * pkin(3) + t200 * qJ(4) - t213 * qJD(4);
t291 = qJD(1) * qJD(2);
t282 = t258 * t291;
t277 = qJD(2) * t285;
t284 = qJD(3) * t344;
t297 = -t228 * t284 + t255 * t277;
t267 = -t253 * t282 + t297;
t129 = (qJD(4) - t210) * qJD(3) + t267;
t59 = t254 * t123 - t252 * t129;
t47 = t201 * pkin(4) + pkin(8) * t308 + t59;
t60 = t252 * t123 + t254 * t129;
t50 = pkin(8) * t310 + t60;
t13 = -qJD(5) * t34 - t257 * t50 + t259 * t47;
t6 = t201 * pkin(5) + t77 * pkin(9) + t13;
t12 = t257 * t47 + t259 * t50 + t56 * t293 - t294 * t72;
t7 = -t78 * pkin(9) + t12;
t262 = -t25 * t283 - t256 * t6 + t28 * t292 - t343 * t7;
t160 = -qJD(3) * pkin(3) + qJD(4) - t169;
t114 = -pkin(4) * t185 + t160;
t62 = t124 * pkin(5) + t114;
t360 = t62 * t64 + t262;
t359 = t184 * t211 - t310;
t358 = t185 * t211 - t308;
t269 = t344 * t255 - t304;
t171 = t201 * t269;
t356 = t211 * t218 - t171;
t355 = -t344 * t232 - t258 * t234;
t290 = t343 * t28;
t9 = t256 * t25 + t290;
t2 = -qJD(6) * t9 - t256 * t7 + t343 * t6;
t352 = t62 * t66 + t2;
t351 = t127 * t363 + t353 * t77;
t24 = -qJD(6) * t66 - t256 * t77 + t343 * t78;
t350 = -t24 - t371;
t349 = t168 * t201 - t199 * t331;
t348 = t226 * t201 + t207 * t366;
t208 = t211 ^ 2;
t347 = -t252 * t201 - t254 * t208;
t167 = t256 * t226 - t343 * t353;
t346 = t167 * t23 + t330 * t66;
t345 = t213 ^ 2;
t178 = -t259 * t231 - t257 * t233;
t151 = -t226 * pkin(9) + t178;
t152 = pkin(9) * t353 + t180;
t93 = t256 * t151 + t343 * t152;
t338 = t93 * qJD(6) + t256 * t365 + t343 * t364;
t92 = t343 * t151 - t256 * t152;
t337 = -t92 * qJD(6) + t256 * t364 - t343 * t365;
t164 = -pkin(3) * t269 - t227 * qJ(4) + t246;
t181 = -t258 * t232 + t344 * t234;
t111 = t254 * t164 - t252 * t181;
t84 = -pkin(4) * t269 - t227 * t342 + t111;
t112 = t252 * t164 + t254 * t181;
t311 = t227 * t252;
t99 = -pkin(8) * t311 + t112;
t42 = t257 * t84 + t259 * t99;
t335 = t213 * t64;
t333 = t256 * t28;
t332 = t66 * t213;
t327 = t127 * t124;
t326 = t127 * t213;
t295 = qJD(3) * t258;
t133 = -t228 * t295 + t229 * t284 + t253 * t277 + t255 * t282;
t325 = t133 * t355;
t323 = t185 * t254;
t322 = t184 * t213;
t321 = t184 * t252;
t320 = t200 * t227;
t319 = t211 * t213;
t316 = t213 * t124;
t315 = t213 * t185;
t217 = t253 * t295 - t255 * t284;
t314 = t217 * t252;
t313 = t217 * t254;
t136 = t218 * pkin(3) + t217 * qJ(4) - t227 * qJD(4);
t144 = t269 * qJD(2) + qJD(3) * t355;
t83 = t252 * t136 + t254 * t144;
t298 = t254 * t201 - t252 * t208;
t296 = t253 ^ 2 + t255 ^ 2;
t245 = -t254 * pkin(4) - pkin(3);
t134 = -pkin(4) * t317 + t170;
t286 = pkin(5) * t363 - t134;
t41 = -t257 * t99 + t259 * t84;
t280 = t296 * qJD(1) ^ 2;
t82 = t254 * t136 - t252 * t144;
t279 = -t168 * t24 + t331 * t64;
t278 = -t167 * t201 - t330 * t199;
t276 = -t124 * t366 - t226 * t78;
t275 = t201 * t353 - t207 * t363;
t146 = pkin(4) * t311 - t355;
t274 = -t252 * t94 + t254 * t95;
t105 = -pkin(4) * t310 + t133;
t273 = t133 * t227 + t200 * t355;
t272 = t321 - t323;
t270 = 0.2e1 * t296 * t291;
t157 = t353 * t227;
t35 = -pkin(5) * t269 - t157 * pkin(9) + t41;
t156 = t226 * t227;
t36 = -t156 * pkin(9) + t42;
t18 = -t256 * t36 + t343 * t35;
t19 = t256 * t35 + t343 * t36;
t53 = t218 * pkin(4) + pkin(8) * t313 + t82;
t58 = pkin(8) * t314 + t83;
t20 = t257 * t53 + t259 * t58 + t84 * t293 - t294 * t99;
t103 = -t256 * t156 + t343 * t157;
t44 = t78 * pkin(5) + t105;
t266 = -t160 * t217 + t273;
t265 = -t200 * t269 - t227 * t201 + t217 * t211;
t264 = pkin(3) * t200 - qJ(4) * t201 + (-qJD(4) + t160) * t211;
t21 = -t42 * qJD(5) - t257 * t58 + t259 * t53;
t145 = qJD(2) * t227 + qJD(3) * t181;
t113 = -pkin(4) * t314 + t145;
t250 = t254 ^ 2;
t248 = t252 ^ 2;
t192 = -pkin(5) * t353 + t245;
t132 = (-qJD(3) * t229 - t253 * t291) * t258 + t297;
t104 = t156 * pkin(5) + t146;
t102 = t343 * t156 + t256 * t157;
t101 = -t217 * t226 + t227 * t354;
t100 = t216 * t227 + t217 * t353;
t48 = t101 * pkin(5) + t113;
t31 = t103 * qJD(6) - t256 * t100 + t343 * t101;
t30 = t343 * t100 + t256 * t101 + t156 * t283 + t157 * t292;
t15 = -t101 * pkin(9) + t20;
t14 = t218 * pkin(5) + t100 * pkin(9) + t21;
t11 = t343 * t27 - t333;
t10 = -t256 * t27 - t290;
t8 = t343 * t25 - t333;
t4 = -t19 * qJD(6) + t343 * t14 - t256 * t15;
t3 = t18 * qJD(6) + t256 * t14 + t343 * t15;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, qJ(2) * t270, -t213 * t217 - t320, -t213 * t218 + t265, -t217 * qJD(3), t356, -t218 * qJD(3), 0, -t145 * qJD(3) + t246 * t201 + t230 * t218, -t144 * qJD(3) - t246 * t200 - t230 * t217, t132 * t269 - t144 * t211 + t145 * t213 + t169 * t217 - t170 * t218 - t181 * t201 + t273, t132 * t181 + t170 * t144 - t169 * t145 - t325, -t184 * t313 - t250 * t320, t217 * t272 + 0.2e1 * t308 * t311, t184 * t218 - t254 * t265, t185 * t314 - t248 * t320, t185 * t218 + t252 * t265, t356, t111 * t201 - t145 * t185 + t82 * t211 + t94 * t218 + t252 * t266 - t269 * t59, -t112 * t201 + t145 * t184 - t83 * t211 - t95 * t218 + t254 * t266 + t269 * t60, t83 * t185 - t82 * t184 + (t111 * t200 + t217 * t94 - t227 * t59) * t254 + (t112 * t200 + t217 * t95 - t227 * t60) * t252, t59 * t111 + t60 * t112 + t160 * t145 + t94 * t82 + t95 * t83 - t325, -t127 * t100 - t77 * t157, t100 * t124 - t127 * t101 + t77 * t156 - t157 * t78, -t100 * t207 + t127 * t218 + t157 * t201 + t269 * t77, t124 * t101 + t78 * t156, -t101 * t207 - t124 * t218 - t156 * t201 + t269 * t78, t207 * t218 - t171, t114 * t101 + t105 * t156 + t113 * t124 - t13 * t269 + t146 * t78 + t41 * t201 + t21 * t207 + t33 * t218, -t114 * t100 + t105 * t157 + t113 * t127 + t12 * t269 - t146 * t77 - t20 * t207 - t42 * t201 - t34 * t218, t33 * t100 - t34 * t101 - t12 * t156 - t20 * t124 - t21 * t127 - t13 * t157 + t41 * t77 - t42 * t78, t105 * t146 + t114 * t113 + t12 * t42 + t13 * t41 + t34 * t20 + t33 * t21, -t23 * t103 + t30 * t66, t23 * t102 - t103 * t24 + t30 * t64 + t31 * t66, t103 * t201 - t30 * t199 - t218 * t66 + t23 * t269, t102 * t24 + t31 * t64, -t102 * t201 - t31 * t199 - t64 * t218 + t24 * t269, t199 * t218 - t171, t44 * t102 + t104 * t24 + t18 * t201 + t4 * t199 - t2 * t269 + t8 * t218 + t62 * t31 + t48 * t64, t44 * t103 - t104 * t23 - t19 * t201 - t3 * t199 - t9 * t218 - t262 * t269 - t62 * t30 - t48 * t66, t102 * t262 - t2 * t103 + t18 * t23 - t19 * t24 - t3 * t64 + t8 * t30 - t9 * t31 + t4 * t66, t44 * t104 + t2 * t18 - t19 * t262 + t9 * t3 + t8 * t4 + t62 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t280, -qJ(2) * t280, 0, 0, 0, 0, 0, 0, 0.2e1 * t213 * qJD(3), t238 + (-t211 - t287) * qJD(3), -t208 - t345, t169 * t213 + t170 * t211, 0, 0, 0, 0, 0, 0, t298 + t315, -t322 + t347 (t321 + t323) * t211 + (t248 + t250) * t200, -t160 * t213 + t211 * t274 + t60 * t252 + t59 * t254, 0, 0, 0, 0, 0, 0, t275 - t316, -t326 - t348, t276 + t351, -t114 * t213 + t12 * t226 + t13 * t353 - t33 * t363 + t34 * t366, 0, 0, 0, 0, 0, 0, t278 - t335, t332 - t349, t279 - t346, -t2 * t167 - t168 * t262 - t62 * t213 - t330 * t8 - t331 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t319, -t208 + t345, t238 + (t211 - t287) * qJD(3), -t319, 0, 0, t170 * qJD(3) - t230 * t213 - t133, t230 * t211 + (t169 + t210) * qJD(3) - t267, 0, 0, t359 * t254, -t272 * t211 + (t248 - t250) * t200, -t322 - t347, -t358 * t252, t298 - t315, -t319, -t106 * t211 - t133 * t254 + t170 * t185 - t94 * t213 + t252 * t264, t107 * t211 + t133 * t252 - t170 * t184 + t95 * t213 + t254 * t264, t106 * t184 - t107 * t185 + (qJD(4) * t185 - t211 * t94 + t60) * t254 + (qJD(4) * t184 - t211 * t95 - t59) * t252, -t133 * pkin(3) - t94 * t106 - t95 * t107 - t160 * t170 + t274 * qJD(4) + (-t59 * t252 + t60 * t254) * qJ(4), t127 * t366 - t77 * t226, t276 - t351, -t326 + t348, t124 * t363 - t353 * t78, t275 + t316, -t207 * t213, -t105 * t353 + t114 * t363 - t134 * t124 + t178 * t201 + t207 * t328 - t33 * t213 + t245 * t78, t105 * t226 + t114 * t366 - t134 * t127 - t180 * t201 - t207 * t329 + t34 * t213 - t245 * t77, t12 * t353 - t124 * t329 - t127 * t328 - t13 * t226 + t178 * t77 - t180 * t78 - t33 * t366 - t34 * t363, t105 * t245 - t114 * t134 + t12 * t180 + t13 * t178 + t328 * t33 + t329 * t34, -t23 * t168 + t331 * t66, t279 + t346, t332 + t349, t24 * t167 + t330 * t64, t278 + t335, -t199 * t213, t44 * t167 + t192 * t24 - t338 * t199 + t92 * t201 - t8 * t213 + t286 * t64 + t330 * t62, t44 * t168 - t192 * t23 + t337 * t199 - t93 * t201 + t9 * t213 - t286 * t66 - t331 * t62, t167 * t262 - t2 * t168 + t92 * t23 - t93 * t24 - t330 * t9 + t331 * t8 + t337 * t64 - t338 * t66, t44 * t192 + t2 * t92 - t262 * t93 + t286 * t62 - t337 * t9 - t338 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t359, t358, -t184 ^ 2 - t185 ^ 2, t184 * t94 - t95 * t185 + t133, 0, 0, 0, 0, 0, 0, t78 + t367, -t77 - t368, -t369 - t370, t124 * t34 + t127 * t33 + t105, 0, 0, 0, 0, 0, 0, t24 - t371, -t23 - t372, -t373 - t374, t64 * t9 - t8 * t66 + t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t327, t369 - t370, -t77 + t368, -t327, -t78 + t367, t201, -t114 * t127 + t34 * t207 + t13, t114 * t124 + t33 * t207 - t12, 0, 0, -t341, t362, t361, t341, t350, t201, -t10 * t199 + (-t127 * t64 - t199 * t292 + t343 * t201) * pkin(5) + t352, t11 * t199 + (t127 * t66 - t199 * t283 - t201 * t256) * pkin(5) + t360, -t10 * t66 + t11 * t64 - t9 * t66 - t8 * t64 + (t343 * t23 - t24 * t256 + (-t256 * t66 - t343 * t64) * qJD(6)) * pkin(5), -t8 * t10 - t9 * t11 + (t343 * t2 - t262 * t256 - t127 * t62 + (-t256 * t8 + t343 * t9) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, t362, t361, t341, t350, t201, t9 * t199 + t352, t8 * t199 + t360, 0, 0;];
tauc_reg  = t1;
