% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:53:05
% EndTime: 2019-03-09 03:53:22
% DurationCPUTime: 10.38s
% Computational Cost: add. (20710->629), mult. (49867->791), div. (0->0), fcn. (40008->18), ass. (0->283)
t290 = sin(pkin(10));
t292 = cos(pkin(10));
t297 = sin(qJ(3));
t420 = cos(qJ(3));
t245 = t290 * t420 + t297 * t292;
t231 = t245 * qJD(1);
t289 = sin(pkin(11));
t291 = cos(pkin(11));
t195 = qJD(3) * t289 + t231 * t291;
t196 = t291 * qJD(3) - t231 * t289;
t296 = sin(qJ(5));
t299 = cos(qJ(5));
t129 = t195 * t296 - t196 * t299;
t132 = t195 * t299 + t196 * t296;
t295 = sin(qJ(6));
t419 = cos(qJ(6));
t70 = t419 * t129 + t132 * t295;
t454 = t70 ^ 2;
t72 = t295 * t129 - t132 * t419;
t453 = t72 ^ 2;
t352 = t420 * t292;
t265 = qJD(1) * t352;
t371 = t297 * t290;
t351 = qJD(1) * t371;
t229 = -t265 + t351;
t225 = qJD(5) + t229;
t219 = qJD(6) + t225;
t452 = t219 * t70;
t451 = t72 * t219;
t450 = t129 ^ 2;
t449 = t132 ^ 2;
t448 = t129 * t225;
t447 = t132 * t225;
t359 = qJD(1) * qJD(2);
t407 = pkin(7) + qJ(2);
t423 = qJDD(1) * t407 + t359;
t214 = t423 * t290;
t215 = t423 * t292;
t255 = t407 * t290;
t246 = qJD(1) * t255;
t257 = t407 * t292;
t247 = qJD(1) * t257;
t346 = qJD(3) * t420;
t364 = qJD(3) * t297;
t113 = -t420 * t214 - t297 * t215 + t246 * t364 - t247 * t346;
t110 = -qJDD(3) * pkin(3) + qJDD(4) - t113;
t288 = pkin(10) + qJ(3);
t279 = sin(t288);
t281 = cos(t288);
t298 = sin(qJ(1));
t300 = cos(qJ(1));
t334 = g(1) * t300 + g(2) * t298;
t313 = -g(3) * t281 + t334 * t279;
t306 = t110 - t313;
t244 = t289 * t299 + t291 * t296;
t234 = t244 * qJD(5);
t443 = t244 * t229 + t234;
t370 = t299 * t291;
t433 = -t289 * t296 + t370;
t362 = qJD(5) * t299;
t363 = qJD(5) * t296;
t434 = -t289 * t363 + t291 * t362;
t446 = t433 * t229 + t434;
t406 = pkin(8) + qJ(4);
t254 = t406 * t289;
t256 = t406 * t291;
t173 = pkin(3) * t231 + qJ(4) * t229;
t228 = t297 * t247;
t182 = -t246 * t420 - t228;
t114 = t291 * t173 - t182 * t289;
t378 = t229 * t291;
t79 = pkin(4) * t231 + pkin(8) * t378 + t114;
t115 = t289 * t173 + t291 * t182;
t379 = t229 * t289;
t91 = pkin(8) * t379 + t115;
t396 = qJD(4) * t370 - t254 * t362 - t299 * t91 + (-qJD(4) * t289 - qJD(5) * t256 - t79) * t296;
t191 = -t296 * t254 + t299 * t256;
t395 = -t244 * qJD(4) - qJD(5) * t191 + t296 * t91 - t299 * t79;
t408 = t70 * t72;
t345 = qJD(6) * t419;
t361 = qJD(6) * t295;
t398 = t244 * t361 + t295 * t443 - t345 * t433 - t419 * t446;
t181 = t244 * t419 + t295 * t433;
t397 = qJD(6) * t181 + t295 * t446 + t419 * t443;
t445 = -pkin(9) * t443 + t396;
t444 = -pkin(5) * t231 - pkin(9) * t446 + t395;
t394 = qJDD(1) * pkin(1);
t442 = -g(1) * t298 + g(2) * t300;
t320 = -qJDD(2) + t394 - t442;
t441 = t453 - t454;
t350 = t290 * t364;
t341 = qJDD(1) * t420;
t357 = t292 * qJDD(1);
t353 = qJD(3) * t265 + t290 * t341 + t297 * t357;
t177 = qJD(1) * t350 - t353;
t156 = -t291 * qJDD(3) - t177 * t289;
t157 = qJDD(3) * t289 - t177 * t291;
t56 = t296 * t156 - t299 * t157 + t195 * t363 - t196 * t362;
t57 = t156 * t299 + t296 * t157 + t195 * t362 + t196 * t363;
t23 = t129 * t345 + t132 * t361 + t295 * t57 + t419 * t56;
t440 = -t23 + t452;
t274 = pkin(2) * t292 + pkin(1);
t253 = -qJD(1) * t274 + qJD(2);
t147 = pkin(3) * t229 - qJ(4) * t231 + t253;
t183 = -t297 * t246 + t247 * t420;
t172 = qJD(3) * qJ(4) + t183;
t99 = t291 * t147 - t172 * t289;
t64 = pkin(4) * t229 - pkin(8) * t195 + t99;
t100 = t289 * t147 + t291 * t172;
t78 = pkin(8) * t196 + t100;
t37 = -t296 * t78 + t299 * t64;
t27 = -pkin(9) * t132 + t37;
t25 = pkin(5) * t225 + t27;
t38 = t296 * t64 + t299 * t78;
t28 = -pkin(9) * t129 + t38;
t236 = t245 * qJD(3);
t358 = t290 * qJDD(1);
t330 = -t292 * t341 + t297 * t358;
t178 = qJD(1) * t236 + t330;
t174 = qJDD(5) + t178;
t354 = -t297 * t214 + t420 * t215 - t246 * t346;
t105 = qJDD(3) * qJ(4) + (qJD(4) - t228) * qJD(3) + t354;
t252 = -qJDD(1) * t274 + qJDD(2);
t88 = pkin(3) * t178 + qJ(4) * t177 - qJD(4) * t231 + t252;
t50 = -t105 * t289 + t291 * t88;
t33 = pkin(4) * t178 - pkin(8) * t157 + t50;
t51 = t291 * t105 + t289 * t88;
t41 = -pkin(8) * t156 + t51;
t9 = -qJD(5) * t38 - t296 * t41 + t299 * t33;
t6 = pkin(5) * t174 + pkin(9) * t56 + t9;
t8 = t296 * t33 + t299 * t41 + t64 * t362 - t363 * t78;
t7 = -pkin(9) * t57 + t8;
t1 = t25 * t345 - t28 * t361 + t295 * t6 + t419 * t7;
t287 = pkin(11) + qJ(5);
t282 = qJ(6) + t287;
t271 = sin(t282);
t272 = cos(t282);
t375 = t281 * t298;
t198 = t271 * t300 - t272 * t375;
t374 = t281 * t300;
t200 = t271 * t298 + t272 * t374;
t409 = g(3) * t279;
t170 = -qJD(3) * pkin(3) + qJD(4) - t182;
t123 = -pkin(4) * t196 + t170;
t68 = t129 * pkin(5) + t123;
t439 = g(1) * t200 - g(2) * t198 + t272 * t409 + t68 * t70 - t1;
t317 = t442 * t281;
t436 = -t420 * t255 - t297 * t257;
t344 = pkin(4) * t289 + t407;
t432 = qJ(2) * qJDD(1);
t278 = sin(t287);
t280 = cos(t287);
t206 = t278 * t375 + t280 * t300;
t208 = -t278 * t374 + t280 * t298;
t431 = -g(1) * t208 + g(2) * t206 + t278 * t409;
t197 = t271 * t375 + t272 * t300;
t199 = -t271 * t374 + t272 * t298;
t355 = t419 * t28;
t11 = t295 * t25 + t355;
t2 = -qJD(6) * t11 - t295 * t7 + t419 * t6;
t430 = -g(1) * t199 + g(2) * t197 + t271 * t409 + t68 * t72 + t2;
t429 = t132 * t443 + t433 * t56;
t24 = -qJD(6) * t72 - t295 * t56 + t419 * t57;
t428 = -t24 - t451;
t169 = qJDD(6) + t174;
t427 = t169 * t181 - t219 * t398;
t426 = t174 * t244 + t225 * t446;
t226 = t229 ^ 2;
t385 = t178 * t289;
t425 = -t226 * t291 - t385;
t311 = -t334 * t281 - t409;
t180 = t244 * t295 - t419 * t433;
t424 = t180 * t23 + t397 * t72;
t422 = t231 ^ 2;
t421 = pkin(5) * t57;
t418 = pkin(4) * t156;
t416 = pkin(8) * t291;
t258 = t300 * t274;
t411 = g(2) * t258;
t189 = -t299 * t254 - t256 * t296;
t159 = -pkin(9) * t244 + t189;
t160 = pkin(9) * t433 + t191;
t97 = t159 * t419 - t295 * t160;
t405 = qJD(6) * t97 + t295 * t444 + t419 * t445;
t98 = t295 * t159 + t160 * t419;
t404 = -qJD(6) * t98 - t295 * t445 + t419 * t444;
t316 = t352 - t371;
t175 = -pkin(3) * t316 - qJ(4) * t245 - t274;
t192 = -t297 * t255 + t257 * t420;
t121 = t289 * t175 + t291 * t192;
t376 = t245 * t289;
t104 = -pkin(8) * t376 + t121;
t120 = t291 * t175 - t192 * t289;
t87 = -pkin(4) * t316 - t245 * t416 + t120;
t48 = t299 * t104 + t296 * t87;
t402 = t231 * t70;
t401 = t231 * t72;
t399 = t295 * t28;
t393 = t129 * t231;
t392 = t132 * t129;
t391 = t132 * t231;
t390 = t156 * t291;
t389 = t157 * t289;
t388 = t157 * t291;
t384 = t196 * t231;
t383 = t196 * t291;
t382 = t195 * t231;
t381 = t195 * t289;
t380 = t229 * t231;
t235 = -t292 * t346 + t350;
t377 = t235 * t289;
t168 = t291 * t178;
t137 = pkin(3) * t236 + qJ(4) * t235 - qJD(4) * t245;
t150 = t316 * qJD(2) + qJD(3) * t436;
t86 = t289 * t137 + t291 * t150;
t367 = -t226 * t289 + t168;
t366 = pkin(5) * t278 + t344;
t285 = t290 ^ 2;
t286 = t292 ^ 2;
t365 = t285 + t286;
t360 = -qJD(4) + t170;
t273 = pkin(4) * t291 + pkin(3);
t136 = -pkin(4) * t379 + t183;
t347 = pkin(5) * t443 - t136;
t47 = -t104 * t296 + t299 * t87;
t340 = t365 * qJD(1) ^ 2;
t85 = t291 * t137 - t150 * t289;
t339 = -t181 * t24 + t398 * t70;
t338 = 0.2e1 * t365;
t337 = t442 * t279;
t336 = -t180 * t169 - t219 * t397;
t335 = -t129 * t446 - t244 * t57;
t332 = t174 * t433 - t225 * t443;
t152 = pkin(4) * t376 - t436;
t331 = pkin(3) * t281 + qJ(4) * t279;
t329 = -t289 * t51 - t291 * t50;
t328 = t100 * t291 - t289 * t99;
t327 = t178 * t245 - t229 * t235;
t326 = -t178 * t316 + t229 * t236;
t325 = t381 - t383;
t248 = pkin(5) * t280 + t273;
t284 = -pkin(9) - t406;
t324 = t248 * t281 - t279 * t284;
t322 = t273 * t281 + t279 * t406;
t165 = t433 * t245;
t39 = -pkin(5) * t316 - pkin(9) * t165 + t47;
t164 = t244 * t245;
t42 = -pkin(9) * t164 + t48;
t18 = -t295 * t42 + t39 * t419;
t19 = t295 * t39 + t419 * t42;
t109 = -t295 * t164 + t165 * t419;
t61 = pkin(4) * t236 + t235 * t416 + t85;
t67 = pkin(8) * t377 + t86;
t20 = -t104 * t363 + t296 * t61 + t299 * t67 + t87 * t362;
t314 = t320 + t394;
t310 = t110 * t245 - t170 * t235 - t334;
t65 = t110 + t418;
t21 = -qJD(5) * t48 - t296 * t67 + t299 * t61;
t308 = t338 * t359 - t334;
t151 = qJD(2) * t245 + qJD(3) * t192;
t303 = t306 + t418;
t122 = -pkin(4) * t377 + t151;
t210 = -pkin(5) * t433 - t273;
t209 = t278 * t298 + t280 * t374;
t207 = t278 * t300 - t280 * t375;
t143 = t289 * t156;
t112 = -t247 * t364 + t354;
t111 = pkin(5) * t164 + t152;
t108 = t164 * t419 + t165 * t295;
t107 = -t235 * t244 + t245 * t434;
t106 = t234 * t245 + t235 * t433;
t58 = t107 * pkin(5) + t122;
t35 = qJD(6) * t109 - t295 * t106 + t107 * t419;
t34 = t106 * t419 + t295 * t107 + t164 * t345 + t165 * t361;
t29 = t65 + t421;
t15 = -pkin(9) * t107 + t20;
t14 = pkin(5) * t236 + pkin(9) * t106 + t21;
t13 = t27 * t419 - t399;
t12 = -t295 * t27 - t355;
t10 = t25 * t419 - t399;
t4 = -qJD(6) * t19 + t14 * t419 - t295 * t15;
t3 = qJD(6) * t18 + t295 * t14 + t15 * t419;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t442, t334, 0, 0, t285 * qJDD(1), 0.2e1 * t290 * t357, 0, t286 * qJDD(1), 0, 0, t314 * t292, -t314 * t290, t338 * t432 + t308, t320 * pkin(1) + (t365 * t432 + t308) * qJ(2), -t177 * t245 - t231 * t235, -t177 * t316 - t231 * t236 - t327, -qJD(3) * t235 + qJDD(3) * t245, t326, -qJD(3) * t236 + qJDD(3) * t316, 0, -qJD(3) * t151 + qJDD(3) * t436 - t178 * t274 + t236 * t253 - t252 * t316 - t317, -qJD(3) * t150 - qJDD(3) * t192 + t177 * t274 - t235 * t253 + t245 * t252 + t337, t112 * t316 - t113 * t245 - t150 * t229 + t151 * t231 + t177 * t436 - t178 * t192 + t182 * t235 - t183 * t236 - t334, t112 * t192 + t183 * t150 + t113 * t436 - t182 * t151 - t252 * t274 - g(1) * (-t274 * t298 + t300 * t407) - g(2) * (t298 * t407 + t258) (t157 * t245 - t195 * t235) * t291 (-t389 - t390) * t245 + t325 * t235, -t157 * t316 + t195 * t236 + t291 * t327 (t156 * t245 + t196 * t235) * t289, t156 * t316 + t196 * t236 - t289 * t327, t326, t120 * t178 - t151 * t196 - t156 * t436 + t85 * t229 + t99 * t236 + t289 * t310 - t291 * t317 - t316 * t50, -t100 * t236 - t121 * t178 + t151 * t195 - t157 * t436 - t86 * t229 + t289 * t317 + t291 * t310 + t316 * t51, -t120 * t157 - t121 * t156 + t196 * t86 - t195 * t85 + t329 * t245 + (t100 * t289 + t291 * t99) * t235 - t337, -t411 + t100 * t86 - t110 * t436 + t50 * t120 + t51 * t121 + t170 * t151 + t99 * t85 + (-g(1) * t407 - g(2) * t331) * t300 + (-g(1) * (-t274 - t331) - g(2) * t407) * t298, -t106 * t132 - t165 * t56, t106 * t129 - t107 * t132 + t164 * t56 - t165 * t57, -t106 * t225 + t132 * t236 + t165 * t174 + t316 * t56, t107 * t129 + t164 * t57, -t107 * t225 - t129 * t236 - t164 * t174 + t316 * t57, -t174 * t316 + t225 * t236, -g(1) * t207 - g(2) * t209 + t107 * t123 + t122 * t129 + t152 * t57 + t164 * t65 + t174 * t47 + t21 * t225 + t236 * t37 - t316 * t9, -g(1) * t206 - g(2) * t208 - t106 * t123 + t122 * t132 - t152 * t56 + t165 * t65 - t174 * t48 - t20 * t225 - t236 * t38 + t316 * t8, t106 * t37 - t107 * t38 - t129 * t20 - t132 * t21 - t164 * t8 - t165 * t9 + t47 * t56 - t48 * t57 - t337, -t411 + t123 * t122 + t65 * t152 + t38 * t20 + t37 * t21 + t9 * t47 + t8 * t48 + (-g(1) * t344 - g(2) * t322) * t300 + (-g(1) * (-t274 - t322) - g(2) * t344) * t298, -t109 * t23 + t34 * t72, t108 * t23 - t109 * t24 + t34 * t70 + t35 * t72, t109 * t169 - t219 * t34 + t23 * t316 - t236 * t72, t108 * t24 + t35 * t70, -t108 * t169 - t219 * t35 - t236 * t70 + t24 * t316, -t169 * t316 + t219 * t236, -g(1) * t198 - g(2) * t200 + t10 * t236 + t108 * t29 + t111 * t24 + t169 * t18 - t2 * t316 + t219 * t4 + t35 * t68 + t58 * t70, -g(1) * t197 - g(2) * t199 + t1 * t316 + t109 * t29 - t11 * t236 - t111 * t23 - t169 * t19 - t219 * t3 - t34 * t68 - t58 * t72, -t1 * t108 + t10 * t34 - t109 * t2 - t11 * t35 + t18 * t23 - t19 * t24 - t3 * t70 + t4 * t72 - t337, -t411 + t1 * t19 + t10 * t4 + t11 * t3 + t29 * t111 + t2 * t18 + t68 * t58 + (-g(1) * t366 - g(2) * t324) * t300 + (-g(1) * (-t274 - t324) - g(2) * t366) * t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t357, t358, -t340, -qJ(2) * t340 - t320, 0, 0, 0, 0, 0, 0, 0.2e1 * t231 * qJD(3) + t330 (-t229 - t351) * qJD(3) + t353, -t226 - t422, t182 * t231 + t183 * t229 + t252 + t442, 0, 0, 0, 0, 0, 0, t367 + t384, -t382 + t425, -t388 - t143 + (t381 + t383) * t229, -t170 * t231 + t229 * t328 - t329 + t442, 0, 0, 0, 0, 0, 0, t332 - t393, -t391 - t426, t335 + t429, -t123 * t231 + t244 * t8 - t37 * t443 + t38 * t446 + t433 * t9 + t442, 0, 0, 0, 0, 0, 0, t336 - t402, t401 - t427, t339 - t424, t1 * t181 - t10 * t397 - t11 * t398 - t180 * t2 - t231 * t68 + t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, -t226 + t422 (t229 - t351) * qJD(3) + t353, -t380, -t330, qJDD(3), qJD(3) * t183 - t231 * t253 + t113 + t313, t229 * t253 + (t182 + t228) * qJD(3) - t354 - t311, 0, 0, t195 * t378 + t389, -t229 * t325 - t143 + t388, -t382 - t425, -t196 * t379 - t390, t367 - t384, -t380, -qJ(4) * t385 - pkin(3) * t156 + t183 * t196 - t231 * t99 + (t289 * t360 - t114) * t229 - t306 * t291, -qJ(4) * t168 - pkin(3) * t157 + t100 * t231 - t183 * t195 + (t291 * t360 + t115) * t229 + t306 * t289, t114 * t195 - t115 * t196 + (-qJ(4) * t156 + qJD(4) * t196 - t229 * t99 + t51) * t291 + (qJ(4) * t157 + qJD(4) * t195 - t100 * t229 - t50) * t289 + t311, -t100 * t115 - t99 * t114 - t170 * t183 + t328 * qJD(4) - t306 * pkin(3) + (-t289 * t50 + t291 * t51 + t311) * qJ(4), t132 * t446 - t244 * t56, t335 - t429, -t391 + t426, t129 * t443 - t433 * t57, t332 + t393, -t225 * t231, t123 * t443 - t129 * t136 + t174 * t189 + t225 * t395 - t231 * t37 - t273 * t57 + t280 * t313 - t433 * t65, t123 * t446 - t132 * t136 - t174 * t191 - t225 * t396 + t231 * t38 + t244 * t65 + t273 * t56 - t278 * t313, -t129 * t396 - t132 * t395 + t189 * t56 - t191 * t57 - t244 * t9 - t37 * t446 - t38 * t443 + t433 * t8 + t311, -g(3) * t322 - t123 * t136 + t9 * t189 + t8 * t191 - t65 * t273 + t37 * t395 + t38 * t396 + t334 * (t273 * t279 - t281 * t406) -t181 * t23 + t398 * t72, t339 + t424, t401 + t427, t180 * t24 + t397 * t70, t336 + t402, -t219 * t231, -t10 * t231 + t169 * t97 + t180 * t29 + t210 * t24 + t219 * t404 + t272 * t313 + t347 * t70 + t397 * t68, t11 * t231 - t169 * t98 + t181 * t29 - t210 * t23 - t219 * t405 - t271 * t313 - t347 * t72 - t398 * t68, -t1 * t180 + t10 * t398 - t11 * t397 - t181 * t2 + t23 * t97 - t24 * t98 + t404 * t72 - t405 * t70 + t311, -g(3) * t324 + t1 * t98 + t10 * t404 + t11 * t405 + t2 * t97 + t29 * t210 + t347 * t68 + t334 * (t248 * t279 + t281 * t284); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t195 * t229 + t156, t196 * t229 + t157, -t195 ^ 2 - t196 ^ 2, -t100 * t196 + t195 * t99 + t306, 0, 0, 0, 0, 0, 0, t57 + t447, -t56 - t448, -t449 - t450, t129 * t38 + t132 * t37 + t303, 0, 0, 0, 0, 0, 0, t24 - t451, -t23 - t452, -t453 - t454, -t10 * t72 + t11 * t70 + t303 + t421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t392, t449 - t450, -t56 + t448, -t392, -t57 + t447, t174, -t123 * t132 + t225 * t38 + t431 + t9, g(1) * t209 - g(2) * t207 + t123 * t129 + t225 * t37 + t280 * t409 - t8, 0, 0, -t408, t441, t440, t408, t428, t169, -t12 * t219 + (-t132 * t70 + t169 * t419 - t219 * t361) * pkin(5) + t430, t13 * t219 + (t132 * t72 - t169 * t295 - t219 * t345) * pkin(5) + t439, -t10 * t70 - t11 * t72 - t12 * t72 + t13 * t70 + (t419 * t23 - t24 * t295 + (-t295 * t72 - t419 * t70) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t295 + t2 * t419 - t68 * t132 + (-t10 * t295 + t11 * t419) * qJD(6) + t431) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t408, t441, t440, t408, t428, t169, t11 * t219 + t430, t10 * t219 + t439, 0, 0;];
tau_reg  = t5;
