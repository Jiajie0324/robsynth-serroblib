% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 19:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRPRR6_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR6_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:03:37
% EndTime: 2019-05-05 19:04:00
% DurationCPUTime: 12.67s
% Computational Cost: add. (108276->629), mult. (268524->935), div. (0->0), fcn. (209779->12), ass. (0->378)
t339 = sin(pkin(11));
t340 = sin(pkin(10));
t348 = cos(qJ(3));
t342 = cos(pkin(10));
t345 = sin(qJ(3));
t389 = t342 * t345;
t359 = t340 * t348 + t389;
t325 = t359 * qJD(1);
t341 = cos(pkin(11));
t307 = -t341 * qJD(3) + t325 * t339;
t308 = qJD(3) * t339 + t325 * t341;
t273 = t308 * t307;
t377 = t342 * qJDD(1);
t378 = t340 * qJDD(1);
t361 = t345 * t378 - t348 * t377;
t381 = t325 * qJD(3);
t295 = t361 + t381;
t434 = -t273 + t295;
t448 = t339 * t434;
t447 = t341 * t434;
t343 = sin(qJ(6));
t344 = sin(qJ(5));
t347 = cos(qJ(5));
t268 = t347 * t307 + t308 * t344;
t270 = -t307 * t344 + t308 * t347;
t346 = cos(qJ(6));
t230 = t346 * t268 + t270 * t343;
t232 = -t268 * t343 + t270 * t346;
t179 = t232 * t230;
t288 = qJDD(5) + t295;
t286 = qJDD(6) + t288;
t438 = -t179 + t286;
t446 = t343 * t438;
t234 = t270 * t268;
t436 = -t234 + t288;
t445 = t344 * t436;
t384 = qJD(1) * t342;
t390 = t340 * t345;
t323 = qJD(1) * t390 - t348 * t384;
t300 = t325 * t323;
t432 = -t300 + qJDD(3);
t444 = t345 * t432;
t443 = t346 * t438;
t442 = t347 * t436;
t441 = t348 * t432;
t420 = sin(qJ(1));
t421 = cos(qJ(1));
t362 = g(1) * t420 - t421 * g(2);
t357 = -qJDD(2) + t362;
t426 = qJD(1) ^ 2;
t383 = t426 * qJ(2);
t414 = qJDD(1) * pkin(1);
t318 = t357 + t383 + t414;
t335 = t340 ^ 2;
t336 = t342 ^ 2;
t385 = t335 + t336;
t440 = t383 * t385 - t318 - t414;
t370 = pkin(2) * t342 + pkin(1);
t290 = t370 * qJDD(1) + (pkin(7) * t385 + qJ(2)) * t426 + t357;
t439 = qJ(2) + pkin(7);
t322 = t359 * qJDD(1);
t382 = t323 * qJD(3);
t297 = t322 - t382;
t279 = qJDD(3) * t339 + t297 * t341;
t365 = -t341 * qJDD(3) + t297 * t339;
t211 = -t268 * qJD(5) + t347 * t279 - t344 * t365;
t366 = t344 * t279 + t347 * t365;
t356 = qJD(5) * t270 + t366;
t151 = -t230 * qJD(6) + t346 * t211 - t343 * t356;
t317 = qJD(5) + t323;
t314 = qJD(6) + t317;
t223 = t314 * t230;
t437 = -t223 + t151;
t259 = t317 * t268;
t435 = -t259 + t211;
t194 = t259 + t211;
t283 = t323 * t307;
t247 = -t279 - t283;
t433 = t279 - t283;
t367 = t343 * t211 + t346 * t356;
t123 = (qJD(6) - t314) * t232 + t367;
t191 = (qJD(5) - t317) * t270 + t366;
t228 = t230 ^ 2;
t229 = t232 ^ 2;
t429 = t268 ^ 2;
t267 = t270 ^ 2;
t428 = t307 ^ 2;
t306 = t308 ^ 2;
t312 = t314 ^ 2;
t316 = t317 ^ 2;
t427 = t323 ^ 2;
t321 = t325 ^ 2;
t425 = qJD(3) ^ 2;
t424 = 2 * qJD(2);
t287 = pkin(3) * t323 - qJ(4) * t325;
t355 = g(1) * t421 + g(2) * t420;
t352 = (-t439 * qJDD(1) + (qJD(1) * t370 - (2 * qJD(2))) * qJD(1) + t355) * t340;
t419 = t342 * g(3);
t351 = t352 - t419;
t353 = qJDD(1) * qJ(2) - t355;
t363 = -g(3) * t340 + t342 * (-pkin(1) * t426 + t353) + t384 * t424;
t282 = -pkin(2) * t336 * t426 + pkin(7) * t377 + t363;
t386 = t348 * t282;
t212 = -pkin(3) * t425 + qJDD(3) * qJ(4) - t323 * t287 + t345 * t351 + t386;
t220 = (-t297 + t382) * qJ(4) + (t295 + t381) * pkin(3) - t290;
t158 = 0.2e1 * qJD(4) * t308 + t339 * t212 - t341 * t220;
t135 = pkin(4) * t434 + pkin(8) * t247 - t158;
t159 = -0.2e1 * qJD(4) * t307 + t341 * t212 + t339 * t220;
t278 = pkin(4) * t323 - pkin(8) * t308;
t143 = -pkin(4) * t428 - pkin(8) * t365 - t323 * t278 + t159;
t90 = -t347 * t135 + t344 * t143;
t72 = pkin(5) * t436 - pkin(9) * t194 - t90;
t251 = pkin(5) * t317 - pkin(9) * t270;
t91 = t344 * t135 + t347 * t143;
t73 = -pkin(5) * t429 - pkin(9) * t356 - t317 * t251 + t91;
t43 = t343 * t73 - t346 * t72;
t44 = t343 * t72 + t346 * t73;
t25 = t343 * t44 - t346 * t43;
t423 = pkin(5) * t25;
t126 = t223 + t151;
t81 = -t123 * t343 - t126 * t346;
t422 = pkin(5) * t81;
t418 = t25 * t344;
t417 = t25 * t347;
t59 = t344 * t91 - t347 * t90;
t416 = t339 * t59;
t415 = t341 * t59;
t236 = t345 * t282 - t348 * t351;
t210 = -qJDD(3) * pkin(3) - t425 * qJ(4) + t325 * t287 + qJDD(4) + t236;
t163 = t365 * pkin(4) - t428 * pkin(8) + t308 * t278 + t210;
t112 = pkin(5) * t356 - pkin(9) * t429 + t270 * t251 + t163;
t413 = t112 * t343;
t412 = t112 * t346;
t411 = t163 * t344;
t410 = t163 * t347;
t169 = t179 + t286;
t409 = t169 * t343;
t408 = t169 * t346;
t237 = -g(3) * t389 + t345 * t352 + t386;
t196 = -t236 * t348 + t345 * t237;
t407 = t196 * t340;
t406 = t210 * t339;
t405 = t210 * t341;
t216 = t234 + t288;
t404 = t216 * t344;
t403 = t216 * t347;
t249 = t273 + t295;
t402 = t249 * t339;
t401 = t249 * t341;
t400 = t290 * t345;
t399 = t290 * t348;
t291 = qJDD(3) + t300;
t398 = t291 * t348;
t397 = t308 * t323;
t396 = t314 * t343;
t395 = t314 * t346;
t394 = t317 * t344;
t393 = t317 * t347;
t392 = t323 * t339;
t391 = t323 * t341;
t388 = t345 * t291;
t387 = t345 * t295;
t376 = t348 * t179;
t375 = t348 * t234;
t374 = t348 * t273;
t373 = t345 * t179;
t372 = t345 * t234;
t371 = t345 * t273;
t369 = -pkin(3) * t348 - pkin(2);
t26 = t343 * t43 + t346 * t44;
t60 = t344 * t90 + t347 * t91;
t111 = t158 * t339 + t341 * t159;
t197 = t236 * t345 + t348 * t237;
t364 = t340 * (t419 + ((-pkin(1) * qJD(1) + t424) * qJD(1) + t353) * t340) + t342 * t363;
t110 = -t158 * t341 + t159 * t339;
t171 = -t312 - t228;
t129 = t171 * t343 + t443;
t358 = pkin(5) * t129 - t43;
t243 = t365 - t397;
t202 = -t229 - t312;
t148 = t202 * t346 - t409;
t354 = pkin(5) * t148 - t44;
t332 = t336 * qJDD(1);
t330 = t335 * qJDD(1);
t326 = t385 * t426;
t311 = -t321 + t425;
t310 = -t321 - t425;
t309 = t427 - t425;
t296 = t322 - 0.2e1 * t382;
t294 = t361 + 0.2e1 * t381;
t289 = -t427 - t425;
t285 = t348 * t295;
t281 = -t306 + t427;
t280 = -t427 + t428;
t274 = -t427 - t321;
t271 = -t306 + t428;
t266 = -t306 - t427;
t263 = -t345 * t310 - t398;
t262 = t310 * t348 - t388;
t261 = -t427 - t428;
t258 = t345 * t322 - t348 * t361;
t257 = -t322 * t348 - t345 * t361;
t256 = -t267 + t316;
t255 = -t316 + t429;
t254 = t289 * t348 - t444;
t253 = t345 * t289 + t441;
t252 = -t306 - t428;
t242 = t365 + t397;
t241 = (-t307 * t341 + t308 * t339) * t323;
t240 = t279 * t341 - t308 * t392;
t239 = t307 * t391 + t339 * t365;
t238 = -t267 - t316;
t233 = t267 - t429;
t227 = -t316 - t429;
t226 = t280 * t341 - t402;
t225 = -t281 * t339 + t447;
t222 = -t229 + t312;
t221 = t228 - t312;
t214 = -t266 * t339 - t401;
t213 = t266 * t341 - t402;
t208 = (-t268 * t347 + t270 * t344) * t317;
t207 = (-t268 * t344 - t270 * t347) * t317;
t204 = t261 * t341 - t448;
t203 = t261 * t339 + t447;
t201 = -t267 - t429;
t200 = -t243 * t341 - t247 * t339;
t199 = -t242 * t341 - t339 * t433;
t198 = -t243 * t339 + t247 * t341;
t190 = (qJD(5) + t317) * t270 + t366;
t189 = t255 * t347 - t404;
t188 = -t256 * t344 + t442;
t187 = t255 * t344 + t403;
t186 = t256 * t347 + t445;
t185 = t211 * t347 - t270 * t394;
t184 = t211 * t344 + t270 * t393;
t183 = t268 * t393 + t344 * t356;
t182 = t268 * t394 - t347 * t356;
t181 = t214 * t348 + t345 * t433;
t180 = t345 * t214 - t348 * t433;
t178 = t229 - t228;
t177 = -t238 * t344 - t403;
t176 = t238 * t347 - t404;
t175 = t204 * t348 + t345 * t242;
t174 = t345 * t204 - t242 * t348;
t173 = t200 * t348 + t345 * t252;
t172 = t345 * t200 - t252 * t348;
t167 = (-t230 * t346 + t232 * t343) * t314;
t166 = (-t230 * t343 - t232 * t346) * t314;
t165 = t227 * t347 - t445;
t164 = t227 * t344 + t442;
t162 = -qJ(4) * t213 + t405;
t161 = -t207 * t339 + t208 * t341;
t160 = -qJ(4) * t203 + t406;
t156 = -t228 - t229;
t155 = t221 * t346 - t409;
t154 = -t222 * t343 + t443;
t153 = t221 * t343 + t408;
t152 = t222 * t346 + t446;
t150 = -qJD(6) * t232 - t367;
t149 = -t202 * t343 - t408;
t147 = -t191 * t347 + t194 * t344;
t146 = -t190 * t347 - t344 * t435;
t145 = -t191 * t344 - t194 * t347;
t144 = -t190 * t344 + t347 * t435;
t141 = -t187 * t339 + t189 * t341;
t140 = -t186 * t339 + t188 * t341;
t139 = -t184 * t339 + t185 * t341;
t138 = -t182 * t339 + t183 * t341;
t137 = -pkin(3) * t213 + t159;
t136 = -pkin(3) * t203 + t158;
t132 = -t176 * t339 + t177 * t341;
t131 = t176 * t341 + t177 * t339;
t130 = t171 * t346 - t446;
t128 = -pkin(8) * t176 + t410;
t122 = (qJD(6) + t314) * t232 + t367;
t121 = -t166 * t344 + t167 * t347;
t120 = t166 * t347 + t167 * t344;
t119 = t151 * t346 - t232 * t396;
t118 = t151 * t343 + t232 * t395;
t117 = -t150 * t343 + t230 * t395;
t116 = t150 * t346 + t230 * t396;
t115 = -t164 * t339 + t165 * t341;
t114 = t164 * t341 + t165 * t339;
t113 = -pkin(8) * t164 + t411;
t109 = t132 * t348 + t345 * t435;
t108 = t345 * t132 - t348 * t435;
t107 = -pkin(4) * t435 + pkin(8) * t177 + t411;
t106 = -pkin(4) * t190 + pkin(8) * t165 - t410;
t105 = t115 * t348 + t345 * t190;
t104 = t345 * t115 - t190 * t348;
t101 = -qJ(4) * t198 - t110;
t100 = -t153 * t344 + t155 * t347;
t99 = -t152 * t344 + t154 * t347;
t98 = t153 * t347 + t155 * t344;
t97 = t152 * t347 + t154 * t344;
t96 = -t148 * t344 + t149 * t347;
t95 = t148 * t347 + t149 * t344;
t94 = -t145 * t339 + t147 * t341;
t93 = -t144 * t339 + t146 * t341;
t92 = t145 * t341 + t147 * t339;
t88 = -pkin(9) * t148 + t412;
t87 = -t129 * t344 + t130 * t347;
t86 = t129 * t347 + t130 * t344;
t85 = t345 * t201 + t348 * t94;
t84 = -t201 * t348 + t345 * t94;
t83 = -t123 * t346 + t126 * t343;
t82 = -t122 * t346 - t343 * t437;
t80 = -t122 * t343 + t346 * t437;
t79 = -t120 * t339 + t121 * t341;
t78 = -t118 * t344 + t119 * t347;
t77 = -t116 * t344 + t117 * t347;
t76 = t118 * t347 + t119 * t344;
t75 = t116 * t347 + t117 * t344;
t74 = -pkin(9) * t129 + t413;
t70 = -pkin(3) * t92 - pkin(4) * t145;
t69 = -pkin(5) * t437 + pkin(9) * t149 + t413;
t68 = -pkin(3) * t131 - pkin(4) * t176 + t91;
t67 = t100 * t341 - t339 * t98;
t66 = -t339 * t97 + t341 * t99;
t65 = -pkin(5) * t122 + pkin(9) * t130 - t412;
t64 = -t339 * t95 + t341 * t96;
t63 = t339 * t96 + t341 * t95;
t62 = -qJ(4) * t131 - t107 * t339 + t128 * t341;
t61 = -pkin(3) * t114 - pkin(4) * t164 + t90;
t58 = -qJ(4) * t114 - t106 * t339 + t113 * t341;
t57 = -t339 * t86 + t341 * t87;
t56 = t339 * t87 + t341 * t86;
t55 = -pkin(4) * t163 + pkin(8) * t60;
t54 = -t344 * t81 + t347 * t83;
t53 = -t344 * t80 + t347 * t82;
t52 = t344 * t83 + t347 * t81;
t51 = t344 * t82 + t347 * t80;
t50 = -t339 * t76 + t341 * t78;
t49 = -t339 * t75 + t341 * t77;
t48 = t345 * t437 + t348 * t64;
t47 = t345 * t64 - t348 * t437;
t46 = -pkin(8) * t145 - t59;
t45 = -pkin(4) * t201 + pkin(8) * t147 + t60;
t41 = t345 * t122 + t348 * t57;
t40 = -t122 * t348 + t345 * t57;
t39 = -pkin(8) * t95 - t344 * t69 + t347 * t88;
t38 = t341 * t60 - t416;
t37 = t339 * t60 + t415;
t36 = -pkin(8) * t86 - t344 * t65 + t347 * t74;
t35 = t345 * t163 + t348 * t38;
t34 = -t163 * t348 + t345 * t38;
t33 = -pkin(4) * t437 + pkin(8) * t96 + t344 * t88 + t347 * t69;
t32 = -t339 * t52 + t341 * t54;
t31 = -t339 * t51 + t341 * t53;
t30 = t339 * t54 + t341 * t52;
t29 = -pkin(4) * t122 + pkin(8) * t87 + t344 * t74 + t347 * t65;
t28 = t345 * t156 + t32 * t348;
t27 = -t156 * t348 + t345 * t32;
t24 = -pkin(3) * t63 - pkin(4) * t95 - t354;
t23 = -pkin(3) * t37 - pkin(4) * t59;
t22 = -pkin(5) * t112 + pkin(9) * t26;
t21 = -qJ(4) * t92 - t339 * t45 + t341 * t46;
t20 = -pkin(9) * t81 - t25;
t19 = -pkin(3) * t56 - pkin(4) * t86 - t358;
t18 = -pkin(5) * t156 + pkin(9) * t83 + t26;
t17 = -pkin(8) * t415 - qJ(4) * t37 - t339 * t55;
t16 = -pkin(3) * t30 - pkin(4) * t52 - t422;
t15 = -qJ(4) * t63 - t33 * t339 + t341 * t39;
t14 = t26 * t347 - t418;
t13 = t26 * t344 + t417;
t12 = -qJ(4) * t56 - t29 * t339 + t341 * t36;
t11 = -pkin(8) * t52 - t18 * t344 + t20 * t347;
t10 = -pkin(4) * t156 + pkin(8) * t54 + t18 * t347 + t20 * t344;
t9 = -t13 * t339 + t14 * t341;
t8 = t13 * t341 + t14 * t339;
t7 = -pkin(8) * t13 - pkin(9) * t417 - t22 * t344;
t6 = t345 * t112 + t348 * t9;
t5 = -t112 * t348 + t345 * t9;
t4 = -pkin(4) * t112 + pkin(8) * t14 - pkin(9) * t418 + t22 * t347;
t3 = -qJ(4) * t30 - t10 * t339 + t11 * t341;
t2 = -pkin(3) * t8 - pkin(4) * t13 - t423;
t1 = -qJ(4) * t8 - t339 * t4 + t341 * t7;
t42 = [0, 0, 0, 0, 0, qJDD(1), t362, t355, 0, 0, t330, 0.2e1 * t340 * t377, 0, t332, 0, 0, -t440 * t342, t440 * t340, pkin(1) * t326 + qJ(2) * (t332 + t330) + t364, pkin(1) * t318 + qJ(2) * t364, t340 * (t297 * t348 - t345 * t381) + t342 * (t345 * t297 + t348 * t381), t340 * (-t294 * t348 - t345 * t296) + t342 * (-t345 * t294 + t296 * t348), t340 * (-t345 * t311 + t441) + t342 * (t311 * t348 + t444), t340 * (t348 * t382 + t387) + t342 * (t345 * t382 - t285), t340 * (t309 * t348 - t388) + t342 * (t345 * t309 + t398), (t340 * (-t323 * t348 + t325 * t345) + t342 * (-t323 * t345 - t325 * t348)) * qJD(3), t340 * (-pkin(7) * t253 - t400) + t342 * (-pkin(2) * t294 + pkin(7) * t254 + t399) - pkin(1) * t294 + qJ(2) * (-t253 * t340 + t254 * t342), t340 * (-pkin(7) * t262 - t399) + t342 * (-pkin(2) * t296 + pkin(7) * t263 - t400) - pkin(1) * t296 + qJ(2) * (-t262 * t340 + t263 * t342), t340 * (-pkin(7) * t257 - t196) + t342 * (-pkin(2) * t274 + pkin(7) * t258 + t197) - pkin(1) * t274 + qJ(2) * (-t257 * t340 + t258 * t342), -pkin(7) * t407 + t342 * (pkin(2) * t290 + pkin(7) * t197) + pkin(1) * t290 + qJ(2) * (t197 * t342 - t407), t340 * (t240 * t348 + t371) + t342 * (t345 * t240 - t374), t340 * (t199 * t348 - t345 * t271) + t342 * (t345 * t199 + t271 * t348), t340 * (t225 * t348 - t345 * t247) + t342 * (t345 * t225 + t247 * t348), t340 * (t239 * t348 - t371) + t342 * (t345 * t239 + t374), t340 * (t226 * t348 - t345 * t243) + t342 * (t345 * t226 + t243 * t348), t340 * (t241 * t348 + t387) + t342 * (t241 * t345 - t285), t340 * (-pkin(7) * t174 - t345 * t136 + t160 * t348) + t342 * (-pkin(2) * t203 + pkin(7) * t175 + t136 * t348 + t345 * t160) - pkin(1) * t203 + qJ(2) * (-t174 * t340 + t175 * t342), t340 * (-pkin(7) * t180 - t345 * t137 + t162 * t348) + t342 * (-pkin(2) * t213 + pkin(7) * t181 + t137 * t348 + t345 * t162) - pkin(1) * t213 + qJ(2) * (-t180 * t340 + t181 * t342), t340 * (-pkin(7) * t172 + t101 * t348) + t342 * (pkin(7) * t173 + t345 * t101) + qJ(2) * (-t172 * t340 + t173 * t342) + (pkin(3) * t390 + t342 * t369 - pkin(1)) * t198, (t340 * (pkin(3) * t345 - qJ(4) * t348) + t342 * (-qJ(4) * t345 + t369) - pkin(1)) * t110 + t439 * (-(t345 * t111 - t210 * t348) * t340 + (t111 * t348 + t345 * t210) * t342), t340 * (t139 * t348 + t372) + t342 * (t345 * t139 - t375), t340 * (t345 * t233 + t348 * t93) + t342 * (-t233 * t348 + t345 * t93), t340 * (t140 * t348 + t345 * t194) + t342 * (t345 * t140 - t194 * t348), t340 * (t138 * t348 - t372) + t342 * (t345 * t138 + t375), t340 * (t141 * t348 - t345 * t191) + t342 * (t345 * t141 + t191 * t348), t340 * (t161 * t348 + t345 * t288) + t342 * (t345 * t161 - t288 * t348), t340 * (-pkin(7) * t104 - t345 * t61 + t348 * t58) + t342 * (-pkin(2) * t114 + pkin(7) * t105 + t345 * t58 + t348 * t61) - pkin(1) * t114 + qJ(2) * (-t104 * t340 + t105 * t342), t340 * (-pkin(7) * t108 - t345 * t68 + t348 * t62) + t342 * (-pkin(2) * t131 + pkin(7) * t109 + t345 * t62 + t348 * t68) - pkin(1) * t131 + qJ(2) * (-t108 * t340 + t109 * t342), t340 * (-pkin(7) * t84 + t21 * t348 - t345 * t70) + t342 * (-pkin(2) * t92 + pkin(7) * t85 + t345 * t21 + t348 * t70) - pkin(1) * t92 + qJ(2) * (-t340 * t84 + t342 * t85), t340 * (-pkin(7) * t34 + t17 * t348 - t345 * t23) + t342 * (-pkin(2) * t37 + pkin(7) * t35 + t345 * t17 + t23 * t348) - pkin(1) * t37 + qJ(2) * (-t34 * t340 + t342 * t35), t340 * (t348 * t50 + t373) + t342 * (t345 * t50 - t376), t340 * (t345 * t178 + t31 * t348) + t342 * (-t178 * t348 + t345 * t31), t340 * (t345 * t126 + t348 * t66) + t342 * (-t126 * t348 + t345 * t66), t340 * (t348 * t49 - t373) + t342 * (t345 * t49 + t376), t340 * (-t345 * t123 + t348 * t67) + t342 * (t123 * t348 + t345 * t67), t340 * (t345 * t286 + t348 * t79) + t342 * (-t286 * t348 + t345 * t79), t340 * (-pkin(7) * t40 + t12 * t348 - t345 * t19) + t342 * (-pkin(2) * t56 + pkin(7) * t41 + t345 * t12 + t19 * t348) - pkin(1) * t56 + qJ(2) * (-t340 * t40 + t342 * t41), t340 * (-pkin(7) * t47 + t15 * t348 - t345 * t24) + t342 * (-pkin(2) * t63 + pkin(7) * t48 + t345 * t15 + t24 * t348) - pkin(1) * t63 + qJ(2) * (-t340 * t47 + t342 * t48), t340 * (-pkin(7) * t27 - t345 * t16 + t3 * t348) + t342 * (-pkin(2) * t30 + pkin(7) * t28 + t16 * t348 + t345 * t3) - pkin(1) * t30 + qJ(2) * (-t27 * t340 + t28 * t342), t340 * (-pkin(7) * t5 + t1 * t348 - t345 * t2) + t342 * (-pkin(2) * t8 + pkin(7) * t6 + t345 * t1 + t2 * t348) - pkin(1) * t8 + qJ(2) * (-t340 * t5 + t342 * t6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t377, t378, -t326, -t318, 0, 0, 0, 0, 0, 0, t294, t296, t274, -t290, 0, 0, 0, 0, 0, 0, t203, t213, t198, t110, 0, 0, 0, 0, 0, 0, t114, t131, t92, t37, 0, 0, 0, 0, 0, 0, t56, t63, t30, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t300, t321 - t427, t322, -t300, -t361, qJDD(3), -t236, -t237, 0, 0, t279 * t339 + t308 * t391, -t242 * t339 + t341 * t433, t281 * t341 + t448, t307 * t392 - t341 * t365, t280 * t339 + t401, (-t307 * t339 - t308 * t341) * t323, -pkin(3) * t242 + qJ(4) * t204 - t405, -pkin(3) * t433 + qJ(4) * t214 + t406, -pkin(3) * t252 + qJ(4) * t200 + t111, -pkin(3) * t210 + qJ(4) * t111, t184 * t341 + t185 * t339, t144 * t341 + t146 * t339, t186 * t341 + t188 * t339, t182 * t341 + t183 * t339, t187 * t341 + t189 * t339, t207 * t341 + t208 * t339, -pkin(3) * t190 + qJ(4) * t115 + t106 * t341 + t113 * t339, -pkin(3) * t435 + qJ(4) * t132 + t107 * t341 + t128 * t339, -pkin(3) * t201 + qJ(4) * t94 + t339 * t46 + t341 * t45, -pkin(3) * t163 - pkin(8) * t416 + qJ(4) * t38 + t341 * t55, t339 * t78 + t341 * t76, t339 * t53 + t341 * t51, t339 * t99 + t341 * t97, t339 * t77 + t341 * t75, t100 * t339 + t341 * t98, t120 * t341 + t121 * t339, -pkin(3) * t122 + qJ(4) * t57 + t29 * t341 + t339 * t36, -pkin(3) * t437 + qJ(4) * t64 + t33 * t341 + t339 * t39, -pkin(3) * t156 + qJ(4) * t32 + t10 * t341 + t11 * t339, -pkin(3) * t112 + qJ(4) * t9 + t339 * t7 + t341 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, t433, t252, t210, 0, 0, 0, 0, 0, 0, t190, t435, t201, t163, 0, 0, 0, 0, 0, 0, t122, t437, t156, t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234, t233, t194, -t234, -t191, t288, -t90, -t91, 0, 0, t179, t178, t126, -t179, -t123, t286, t358, t354, t422, t423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t179, t178, t126, -t179, -t123, t286, -t43, -t44, 0, 0;];
tauJ_reg  = t42;
