% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 19:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:04:00
% EndTime: 2019-05-05 19:04:39
% DurationCPUTime: 39.23s
% Computational Cost: add. (368050->910), mult. (912614->1418), div. (0->0), fcn. (712716->12), ass. (0->627)
t1040 = sin(pkin(11));
t1041 = sin(pkin(10));
t1043 = cos(pkin(10));
t1046 = sin(qJ(3));
t1050 = cos(qJ(3));
t1059 = t1041 * t1050 + t1043 * t1046;
t1014 = t1059 * qJD(1);
t1042 = cos(pkin(11));
t989 = -t1042 * qJD(3) + t1014 * t1040;
t991 = qJD(3) * t1040 + t1014 * t1042;
t943 = t991 * t989;
t1078 = qJDD(1) * t1043;
t1083 = t1041 * t1046;
t1010 = qJDD(1) * t1083 - t1050 * t1078;
t1087 = t1014 * qJD(3);
t969 = t1010 + t1087;
t1139 = -t943 + t969;
t1150 = t1040 * t1139;
t1149 = t1042 * t1139;
t1044 = sin(qJ(6));
t962 = qJDD(5) + t969;
t1055 = qJDD(6) + t962;
t1048 = cos(qJ(6));
t1045 = sin(qJ(5));
t1049 = cos(qJ(5));
t938 = t1045 * t991 + t1049 * t989;
t940 = -t1045 * t989 + t1049 * t991;
t879 = t1044 * t940 + t1048 * t938;
t881 = -t1044 * t938 + t1048 * t940;
t791 = t881 * t879;
t1138 = t1055 - t791;
t1148 = t1044 * t1138;
t884 = t940 * t938;
t1141 = -t884 + t962;
t1147 = t1045 * t1141;
t1099 = qJD(1) * t1043;
t1012 = qJD(1) * t1083 - t1050 * t1099;
t975 = t1014 * t1012;
t1137 = -t975 + qJDD(3);
t1146 = t1046 * t1137;
t1145 = t1048 * t1138;
t1144 = t1049 * t1141;
t1143 = t1050 * t1137;
t1047 = sin(qJ(1));
t1051 = cos(qJ(1));
t1024 = t1047 * g(1) - t1051 * g(2);
t1061 = -qJDD(2) + t1024;
t1069 = pkin(2) * t1043 + pkin(1);
t1036 = t1041 ^ 2;
t1037 = t1043 ^ 2;
t1079 = t1036 + t1037;
t1130 = qJD(1) ^ 2;
t964 = t1069 * qJDD(1) + (pkin(7) * t1079 + qJ(2)) * t1130 + t1061;
t1092 = t1012 * qJD(3);
t1136 = t1059 * qJDD(1);
t971 = t1136 - t1092;
t1060 = qJDD(3) * t1042 - t1040 * t971;
t951 = t1040 * qJDD(3) + t1042 * t971;
t1063 = t1045 * t951 - t1049 * t1060;
t843 = -qJD(5) * t940 - t1063;
t844 = -t938 * qJD(5) + t1045 * t1060 + t1049 * t951;
t751 = -qJD(6) * t879 + t1044 * t843 + t1048 * t844;
t1004 = qJD(5) + t1012;
t1000 = qJD(6) + t1004;
t861 = t1000 * t879;
t1142 = t751 - t861;
t918 = t1004 * t938;
t811 = -t918 - t844;
t1140 = -t918 + t844;
t957 = t1012 * t989;
t903 = -t957 - t951;
t902 = -t957 + t951;
t807 = (qJD(5) - t1004) * t940 + t1063;
t1064 = t1044 * t844 - t1048 * t843;
t707 = (qJD(6) - t1000) * t881 + t1064;
t1134 = t1130 * t1079;
t877 = t879 ^ 2;
t878 = t881 ^ 2;
t1132 = t938 ^ 2;
t937 = t940 ^ 2;
t1131 = t989 ^ 2;
t984 = t991 ^ 2;
t1129 = qJD(3) ^ 2;
t998 = t1000 ^ 2;
t1003 = t1004 ^ 2;
t1128 = t1012 ^ 2;
t1009 = t1014 ^ 2;
t1127 = 2 * qJD(2);
t1126 = pkin(3) * t1046;
t1125 = t1043 * g(3);
t1124 = qJDD(1) * pkin(1);
t1025 = t1051 * g(1) + t1047 * g(2);
t1054 = -t1125 + ((-pkin(7) - qJ(2)) * qJDD(1) + (qJD(1) * t1069 - (2 * qJD(2))) * qJD(1) + t1025) * t1041;
t1033 = t1037 * t1130;
t1056 = qJDD(1) * qJ(2) - t1025;
t977 = -g(3) * t1041 + t1099 * t1127 + t1043 * (-pkin(1) * t1130 + t1056);
t954 = -pkin(2) * t1033 + pkin(7) * t1078 + t977;
t888 = t1046 * t1054 + t1050 * t954;
t961 = pkin(3) * t1012 - qJ(4) * t1014;
t845 = -pkin(3) * t1129 + qJDD(3) * qJ(4) - t1012 * t961 + t888;
t858 = (-t971 + t1092) * qJ(4) + (t969 + t1087) * pkin(3) - t964;
t763 = 0.2e1 * qJD(4) * t991 + t1040 * t845 - t1042 * t858;
t723 = pkin(4) * t1139 + pkin(8) * t903 - t763;
t764 = -0.2e1 * qJD(4) * t989 + t1040 * t858 + t1042 * t845;
t950 = pkin(4) * t1012 - pkin(8) * t991;
t738 = -pkin(4) * t1131 + pkin(8) * t1060 - t1012 * t950 + t764;
t655 = t1045 * t738 - t1049 * t723;
t622 = pkin(5) * t1141 + pkin(9) * t811 - t655;
t656 = t1045 * t723 + t1049 * t738;
t908 = pkin(5) * t1004 - pkin(9) * t940;
t625 = -pkin(5) * t1132 + pkin(9) * t843 - t1004 * t908 + t656;
t560 = t1044 * t622 + t1048 * t625;
t1123 = t1012 * t991;
t596 = t1045 * t656 - t1049 * t655;
t1122 = t1040 * t596;
t887 = t1046 * t954 - t1050 * t1054;
t842 = -qJDD(3) * pkin(3) - t1129 * qJ(4) + t1014 * t961 + qJDD(4) + t887;
t1121 = t1040 * t842;
t906 = t943 + t969;
t1120 = t1040 * t906;
t820 = t1046 * t888 - t1050 * t887;
t1119 = t1041 * t820;
t1118 = t1042 * t596;
t1117 = t1042 * t842;
t1116 = t1042 * t906;
t1115 = t1043 * t820;
t772 = -t1060 * pkin(4) - t1131 * pkin(8) + t950 * t991 + t842;
t691 = -t843 * pkin(5) - pkin(9) * t1132 + t908 * t940 + t772;
t1114 = t1044 * t691;
t779 = t1055 + t791;
t1113 = t1044 * t779;
t559 = t1044 * t625 - t1048 * t622;
t519 = t1044 * t560 - t1048 * t559;
t1112 = t1045 * t519;
t1111 = t1045 * t772;
t850 = t884 + t962;
t1110 = t1045 * t850;
t1109 = t1046 * t964;
t965 = qJDD(3) + t975;
t1108 = t1046 * t965;
t1107 = t1046 * t969;
t1106 = t1048 * t691;
t1105 = t1048 * t779;
t1104 = t1049 * t519;
t1103 = t1049 * t772;
t1102 = t1049 * t850;
t1101 = t1050 * t964;
t1100 = t1050 * t965;
t1098 = t1130 * t1036;
t1097 = t1000 * t1044;
t1096 = t1000 * t1048;
t1095 = t1004 * t1045;
t1094 = t1004 * t1049;
t1005 = qJ(2) * t1130 + t1061 + t1124;
t1093 = t1005 * t1051;
t1091 = t1012 * t1040;
t1090 = t1012 * t1042;
t1089 = t1012 * t1046;
t1088 = t1012 * t1050;
t1086 = t1014 * t1046;
t1085 = t1014 * t1050;
t1084 = t1041 * t1043;
t1082 = t1047 * t1005;
t1077 = qJDD(1) * t1051;
t1076 = t1047 * qJDD(1);
t1075 = t1046 * t791;
t1074 = t1046 * t884;
t1073 = t1046 * t943;
t1072 = t1050 * t791;
t1071 = t1050 * t884;
t1070 = t1050 * t943;
t1068 = -pkin(3) * t1050 - pkin(2);
t1067 = t1051 * t975;
t1066 = t1047 * t975;
t1065 = t1005 + t1124;
t976 = t1125 + ((-pkin(1) * qJD(1) + t1127) * qJD(1) + t1056) * t1041;
t922 = t1041 * t976 + t1043 * t977;
t520 = t1044 * t559 + t1048 * t560;
t597 = t1045 * t655 + t1049 * t656;
t821 = t1046 * t887 + t1050 * t888;
t992 = -t1024 * t1047 - t1051 * t1025;
t1023 = -t1047 * t1130 + t1077;
t1062 = -pkin(6) * t1023 - g(3) * t1047;
t687 = t1040 * t764 - t1042 * t763;
t688 = t1040 * t763 + t1042 * t764;
t920 = t1041 * t977 - t1043 * t976;
t990 = t1024 * t1051 - t1047 * t1025;
t1022 = t1051 * t1130 + t1076;
t1016 = t1043 * t1134;
t986 = -t1047 * t1016 + t1043 * t1077;
t1058 = t1016 * t1051 + t1043 * t1076;
t901 = t1060 + t1123;
t1031 = t1037 * qJDD(1);
t1030 = t1036 * qJDD(1);
t1021 = t1033 - t1098;
t1020 = t1033 + t1098;
t1019 = t1031 - t1030;
t1018 = t1031 + t1030;
t1015 = t1041 * t1134;
t1006 = -pkin(6) * t1022 + g(3) * t1051;
t997 = -t1009 + t1129;
t996 = -t1009 - t1129;
t995 = t1128 - t1129;
t994 = t1023 * t1084;
t993 = t1022 * t1084;
t987 = t1015 * t1051 + t1041 * t1076;
t985 = t1047 * t1015 - t1041 * t1077;
t979 = t1018 * t1051 - t1047 * t1020;
t978 = t1047 * t1018 + t1020 * t1051;
t973 = -t1009 + t1128;
t970 = t1136 - 0.2e1 * t1092;
t968 = t1010 + 0.2e1 * t1087;
t963 = -t1128 - t1129;
t959 = t1050 * t969;
t956 = (t1086 - t1088) * qJD(3);
t955 = (-t1085 - t1089) * qJD(3);
t953 = -t984 + t1128;
t952 = -t1128 + t1131;
t944 = -t1128 - t1009;
t941 = -t984 + t1131;
t936 = -qJD(3) * t1086 + t1050 * t971;
t935 = qJD(3) * t1085 + t1046 * t971;
t934 = qJD(3) * t1088 + t1107;
t933 = qJD(3) * t1089 - t959;
t932 = -t984 - t1128;
t929 = -t1046 * t996 - t1100;
t928 = -t1046 * t997 + t1143;
t927 = t1050 * t995 - t1108;
t926 = t1050 * t996 - t1108;
t925 = t1050 * t997 + t1146;
t924 = t1046 * t995 + t1100;
t923 = -t1128 - t1131;
t917 = -t1046 * t970 - t1050 * t968;
t916 = -t1010 * t1050 + t1046 * t1136;
t915 = -t1046 * t968 + t1050 * t970;
t914 = -t1010 * t1046 - t1050 * t1136;
t913 = -t937 + t1003;
t912 = -t1003 + t1132;
t911 = t1050 * t963 - t1146;
t910 = t1046 * t963 + t1143;
t909 = t984 + t1131;
t900 = t1060 - t1123;
t898 = (t1040 * t991 - t1042 * t989) * t1012;
t897 = (t1040 * t989 + t1042 * t991) * t1012;
t896 = -t1041 * t955 + t1043 * t956;
t895 = t1042 * t951 - t1091 * t991;
t894 = -t1040 * t951 - t1090 * t991;
t893 = -t1040 * t1060 + t1090 * t989;
t892 = -t1042 * t1060 - t1091 * t989;
t891 = t1051 * t922 - t1082;
t890 = t1047 * t922 + t1093;
t889 = -t937 - t1003;
t885 = -pkin(7) * t926 - t1101;
t883 = -t937 + t1132;
t882 = -pkin(7) * t910 - t1109;
t876 = -t1041 * t935 + t1043 * t936;
t875 = -t1041 * t933 + t1043 * t934;
t874 = -t1041 * t926 + t1043 * t929;
t873 = -t1041 * t925 + t1043 * t928;
t872 = -t1041 * t924 + t1043 * t927;
t871 = t1041 * t929 + t1043 * t926;
t870 = t1050 * t898 + t1107;
t869 = t1046 * t898 - t959;
t868 = -t1003 - t1132;
t867 = t1042 * t952 - t1120;
t866 = -t1040 * t953 + t1149;
t865 = -t1040 * t952 - t1116;
t864 = -t1042 * t953 - t1150;
t863 = -pkin(2) * t970 + pkin(7) * t929 - t1109;
t860 = -t878 + t998;
t859 = t877 - t998;
t855 = t1050 * t895 + t1073;
t854 = t1050 * t893 - t1073;
t853 = t1046 * t895 - t1070;
t852 = t1046 * t893 + t1070;
t848 = -t1040 * t932 - t1116;
t847 = t1042 * t932 - t1120;
t846 = -pkin(2) * t968 + pkin(7) * t911 + t1101;
t840 = (t1045 * t940 - t1049 * t938) * t1004;
t839 = (-t1045 * t938 - t1049 * t940) * t1004;
t836 = -t1041 * t915 + t1043 * t917;
t835 = -t1041 * t914 + t1043 * t916;
t834 = t1041 * t916 + t1043 * t914;
t833 = t1042 * t923 - t1150;
t832 = t1040 * t923 + t1149;
t831 = -t878 - t998;
t830 = -t1041 * t910 + t1043 * t911;
t829 = t1041 * t911 + t1043 * t910;
t828 = t1047 * t970 + t1051 * t874;
t827 = t1047 * t874 - t1051 * t970;
t826 = -t937 - t1132;
t825 = -t1040 * t903 + t1042 * t901;
t824 = -t1040 * t902 + t1042 * t900;
t823 = t1040 * t901 + t1042 * t903;
t822 = -t1040 * t900 - t1042 * t902;
t819 = t1047 * t968 + t1051 * t830;
t818 = t1047 * t830 - t1051 * t968;
t817 = t1047 * t944 + t1051 * t835;
t816 = t1047 * t835 - t1051 * t944;
t815 = t1046 * t901 + t1050 * t867;
t814 = -t1046 * t903 + t1050 * t866;
t813 = t1046 * t867 - t1050 * t901;
t812 = t1046 * t866 + t1050 * t903;
t806 = (qJD(5) + t1004) * t940 + t1063;
t805 = pkin(2) * t964 + pkin(7) * t821;
t804 = t1049 * t912 - t1110;
t803 = -t1045 * t913 + t1144;
t802 = t1045 * t912 + t1102;
t801 = t1049 * t913 + t1147;
t800 = t1049 * t844 - t1095 * t940;
t799 = t1045 * t844 + t1094 * t940;
t798 = -t1045 * t843 + t1094 * t938;
t797 = t1049 * t843 + t1095 * t938;
t796 = -pkin(1) * t834 - pkin(2) * t914;
t795 = -t1046 * t941 + t1050 * t824;
t794 = t1046 * t824 + t1050 * t941;
t793 = t1046 * t902 + t1050 * t848;
t792 = t1046 * t848 - t1050 * t902;
t790 = -t878 + t877;
t789 = -t1045 * t889 - t1102;
t788 = t1049 * t889 - t1110;
t787 = -t1046 * t900 + t1050 * t833;
t786 = t1046 * t833 + t1050 * t900;
t785 = -t1046 * t909 + t1050 * t825;
t784 = t1046 * t825 + t1050 * t909;
t783 = -t998 - t877;
t782 = -t1041 * t869 + t1043 * t870;
t781 = -pkin(7) * t914 - t820;
t777 = (t1044 * t881 - t1048 * t879) * t1000;
t776 = (-t1044 * t879 - t1048 * t881) * t1000;
t775 = -pkin(1) * t871 - pkin(2) * t926 + t888;
t774 = t1049 * t868 - t1147;
t773 = t1045 * t868 + t1144;
t771 = -t1041 * t853 + t1043 * t855;
t770 = -t1041 * t852 + t1043 * t854;
t769 = -qJ(4) * t847 + t1117;
t768 = -t1040 * t839 + t1042 * t840;
t767 = -t1040 * t840 - t1042 * t839;
t766 = -qJ(4) * t832 + t1121;
t765 = -pkin(2) * t944 + pkin(7) * t916 + t821;
t762 = -pkin(1) * t829 - pkin(2) * t910 + t887;
t761 = t1046 * t962 + t1050 * t768;
t760 = t1046 * t768 - t1050 * t962;
t759 = -t877 - t878;
t758 = -qJ(2) * t871 - t1041 * t863 + t1043 * t885;
t757 = t1043 * t821 - t1119;
t756 = t1041 * t821 + t1115;
t755 = t1048 * t859 - t1113;
t754 = -t1044 * t860 + t1145;
t753 = t1044 * t859 + t1105;
t752 = t1048 * t860 + t1148;
t750 = -qJD(6) * t881 - t1064;
t749 = -qJ(2) * t829 - t1041 * t846 + t1043 * t882;
t748 = -t1047 * t964 + t1051 * t757;
t747 = t1047 * t757 + t1051 * t964;
t746 = -t1044 * t831 - t1105;
t745 = t1048 * t831 - t1113;
t744 = -t1041 * t813 + t1043 * t815;
t743 = -t1041 * t812 + t1043 * t814;
t742 = -t1045 * t811 - t1049 * t807;
t741 = -t1045 * t1140 - t1049 * t806;
t740 = -t1045 * t807 + t1049 * t811;
t739 = -t1045 * t806 + t1049 * t1140;
t736 = -t1040 * t802 + t1042 * t804;
t735 = -t1040 * t801 + t1042 * t803;
t734 = -t1040 * t804 - t1042 * t802;
t733 = -t1040 * t803 - t1042 * t801;
t732 = -t1040 * t799 + t1042 * t800;
t731 = -t1040 * t797 + t1042 * t798;
t730 = -t1040 * t800 - t1042 * t799;
t729 = -t1040 * t798 - t1042 * t797;
t728 = -t1041 * t794 + t1043 * t795;
t727 = -pkin(3) * t847 + t764;
t726 = -pkin(3) * t832 + t763;
t725 = -t1041 * t792 + t1043 * t793;
t724 = t1041 * t793 + t1043 * t792;
t720 = -t1040 * t788 + t1042 * t789;
t719 = t1040 * t789 + t1042 * t788;
t718 = -t1041 * t786 + t1043 * t787;
t717 = t1041 * t787 + t1043 * t786;
t716 = -t1041 * t784 + t1043 * t785;
t715 = t1041 * t785 + t1043 * t784;
t714 = t1048 * t783 - t1148;
t713 = t1044 * t783 + t1145;
t712 = -pkin(8) * t788 + t1103;
t711 = -t751 - t861;
t706 = (qJD(6) + t1000) * t881 + t1064;
t705 = -t1045 * t776 + t1049 * t777;
t704 = t1045 * t777 + t1049 * t776;
t703 = t1048 * t751 - t1097 * t881;
t702 = t1044 * t751 + t1096 * t881;
t701 = -t1044 * t750 + t1096 * t879;
t700 = t1048 * t750 + t1097 * t879;
t699 = -t1040 * t773 + t1042 * t774;
t698 = t1040 * t774 + t1042 * t773;
t697 = -pkin(8) * t773 + t1111;
t696 = t1050 * t732 + t1074;
t695 = t1050 * t731 - t1074;
t694 = t1046 * t732 - t1071;
t693 = t1046 * t731 + t1071;
t692 = -pkin(1) * t756 - pkin(2) * t820;
t690 = t1047 * t847 + t1051 * t725;
t689 = t1047 * t725 - t1051 * t847;
t686 = t1047 * t832 + t1051 * t718;
t685 = t1047 * t718 - t1051 * t832;
t684 = -t1046 * t807 + t1050 * t736;
t683 = -t1046 * t811 + t1050 * t735;
t682 = t1046 * t736 + t1050 * t807;
t681 = t1046 * t735 + t1050 * t811;
t680 = t1047 * t823 + t1051 * t716;
t679 = t1047 * t716 - t1051 * t823;
t678 = -t1041 * t760 + t1043 * t761;
t677 = t1046 * t1140 + t1050 * t720;
t676 = t1046 * t720 - t1050 * t1140;
t675 = -qJ(2) * t834 - t1041 * t765 + t1043 * t781;
t674 = -pkin(4) * t1140 + pkin(8) * t789 + t1111;
t673 = -pkin(4) * t806 + pkin(8) * t774 - t1103;
t672 = t1046 * t806 + t1050 * t699;
t671 = t1046 * t699 - t1050 * t806;
t670 = t1046 * t842 + t1050 * t688;
t669 = t1046 * t688 - t1050 * t842;
t668 = -pkin(7) * t1115 - qJ(2) * t756 - t1041 * t805;
t667 = -qJ(4) * t823 - t687;
t666 = -t1045 * t753 + t1049 * t755;
t665 = -t1045 * t752 + t1049 * t754;
t664 = t1045 * t755 + t1049 * t753;
t663 = t1045 * t754 + t1049 * t752;
t662 = -t1045 * t745 + t1049 * t746;
t661 = t1045 * t746 + t1049 * t745;
t660 = -t1040 * t740 + t1042 * t742;
t659 = -t1040 * t739 + t1042 * t741;
t658 = t1040 * t742 + t1042 * t740;
t657 = -t1040 * t741 - t1042 * t739;
t653 = -pkin(7) * t792 - t1046 * t727 + t1050 * t769;
t652 = -t1046 * t883 + t1050 * t659;
t651 = t1046 * t659 + t1050 * t883;
t650 = -pkin(7) * t786 - t1046 * t726 + t1050 * t766;
t649 = -pkin(9) * t745 + t1106;
t648 = -t1045 * t713 + t1049 * t714;
t647 = t1045 * t714 + t1049 * t713;
t646 = t1046 * t826 + t1050 * t660;
t645 = t1046 * t660 - t1050 * t826;
t644 = -pkin(1) * t724 - pkin(2) * t792 + pkin(3) * t902 - qJ(4) * t848 - t1121;
t643 = -t1044 * t711 - t1048 * t707;
t642 = -t1044 * t1142 - t1048 * t706;
t641 = -t1044 * t707 + t1048 * t711;
t640 = -t1044 * t706 + t1048 * t1142;
t639 = -t1040 * t704 + t1042 * t705;
t638 = -t1040 * t705 - t1042 * t704;
t637 = -pkin(1) * t717 - pkin(2) * t786 - pkin(3) * t900 - qJ(4) * t833 + t1117;
t636 = -t1045 * t702 + t1049 * t703;
t635 = -t1045 * t700 + t1049 * t701;
t634 = t1045 * t703 + t1049 * t702;
t633 = t1045 * t701 + t1049 * t700;
t632 = -pkin(2) * t847 + pkin(7) * t793 + t1046 * t769 + t1050 * t727;
t631 = -pkin(9) * t713 + t1114;
t630 = -t1041 * t694 + t1043 * t696;
t629 = -t1041 * t693 + t1043 * t695;
t628 = t1046 * t1055 + t1050 * t639;
t627 = t1046 * t639 - t1050 * t1055;
t626 = -pkin(2) * t832 + pkin(7) * t787 + t1046 * t766 + t1050 * t726;
t623 = -pkin(7) * t784 + t1050 * t667 + t1126 * t823;
t619 = -pkin(3) * t658 - pkin(4) * t740;
t618 = -t1041 * t682 + t1043 * t684;
t617 = -t1041 * t681 + t1043 * t683;
t616 = pkin(7) * t785 + t1046 * t667 + t1068 * t823;
t615 = -t1041 * t676 + t1043 * t677;
t614 = t1041 * t677 + t1043 * t676;
t613 = -t1041 * t671 + t1043 * t672;
t612 = t1041 * t672 + t1043 * t671;
t611 = -t1041 * t669 + t1043 * t670;
t610 = t1041 * t670 + t1043 * t669;
t609 = -pkin(5) * t1142 + pkin(9) * t746 + t1114;
t608 = -pkin(1) * t715 - pkin(2) * t784 - pkin(3) * t909 - qJ(4) * t825 - t688;
t607 = -pkin(3) * t719 - pkin(4) * t788 + t656;
t606 = -t1040 * t664 + t1042 * t666;
t605 = -t1040 * t663 + t1042 * t665;
t604 = -t1040 * t666 - t1042 * t664;
t603 = -t1040 * t665 - t1042 * t663;
t602 = -pkin(5) * t706 + pkin(9) * t714 - t1106;
t601 = -t1040 * t661 + t1042 * t662;
t600 = t1040 * t662 + t1042 * t661;
t599 = -qJ(4) * t719 - t1040 * t674 + t1042 * t712;
t598 = -pkin(3) * t698 - pkin(4) * t773 + t655;
t595 = -qJ(4) * t698 - t1040 * t673 + t1042 * t697;
t594 = t1047 * t719 + t1051 * t615;
t593 = t1047 * t615 - t1051 * t719;
t592 = -t1041 * t651 + t1043 * t652;
t591 = -pkin(7) * t669 + (-qJ(4) * t1050 + t1126) * t687;
t590 = -t1040 * t647 + t1042 * t648;
t589 = t1040 * t648 + t1042 * t647;
t588 = -t1041 * t645 + t1043 * t646;
t587 = t1041 * t646 + t1043 * t645;
t586 = t1047 * t698 + t1051 * t613;
t585 = t1047 * t613 - t1051 * t698;
t584 = -pkin(4) * t772 + pkin(8) * t597;
t583 = -t1046 * t707 + t1050 * t606;
t582 = -t1046 * t711 + t1050 * t605;
t581 = t1046 * t606 + t1050 * t707;
t580 = t1046 * t605 + t1050 * t711;
t579 = -t1045 * t641 + t1049 * t643;
t578 = -t1045 * t640 + t1049 * t642;
t577 = t1045 * t643 + t1049 * t641;
t576 = t1045 * t642 + t1049 * t640;
t575 = t1047 * t687 + t1051 * t611;
t574 = t1047 * t611 - t1051 * t687;
t573 = -t1040 * t634 + t1042 * t636;
t572 = -t1040 * t633 + t1042 * t635;
t571 = -t1040 * t636 - t1042 * t634;
t570 = -t1040 * t635 - t1042 * t633;
t569 = t1046 * t1142 + t1050 * t601;
t568 = t1046 * t601 - t1050 * t1142;
t567 = -pkin(8) * t740 - t596;
t566 = -t1041 * t627 + t1043 * t628;
t565 = -pkin(4) * t826 + pkin(8) * t742 + t597;
t564 = t1050 * t573 + t1075;
t563 = t1050 * t572 - t1075;
t562 = t1046 * t573 - t1072;
t561 = t1046 * t572 + t1072;
t557 = -qJ(2) * t724 - t1041 * t632 + t1043 * t653;
t556 = t1046 * t706 + t1050 * t590;
t555 = t1046 * t590 - t1050 * t706;
t554 = -qJ(2) * t717 - t1041 * t626 + t1043 * t650;
t553 = pkin(7) * t670 + (-qJ(4) * t1046 + t1068) * t687;
t552 = t1047 * t658 + t1051 * t588;
t551 = t1047 * t588 - t1051 * t658;
t550 = -qJ(2) * t715 - t1041 * t616 + t1043 * t623;
t549 = -pkin(1) * t610 - pkin(2) * t669 + pkin(3) * t842 - qJ(4) * t688;
t548 = -pkin(8) * t661 - t1045 * t609 + t1049 * t649;
t547 = t1042 * t597 - t1122;
t546 = t1040 * t597 + t1118;
t545 = -pkin(8) * t647 - t1045 * t602 + t1049 * t631;
t544 = t1046 * t772 + t1050 * t547;
t543 = t1046 * t547 - t1050 * t772;
t542 = -pkin(4) * t1142 + pkin(8) * t662 + t1045 * t649 + t1049 * t609;
t541 = -pkin(1) * t614 - pkin(2) * t676 + pkin(3) * t1140 - qJ(4) * t720 - t1040 * t712 - t1042 * t674;
t540 = -pkin(7) * t676 - t1046 * t607 + t1050 * t599;
t539 = -t1041 * t581 + t1043 * t583;
t538 = -t1041 * t580 + t1043 * t582;
t537 = -t1040 * t577 + t1042 * t579;
t536 = -t1040 * t576 + t1042 * t578;
t535 = t1040 * t579 + t1042 * t577;
t534 = -t1040 * t578 - t1042 * t576;
t533 = -pkin(4) * t706 + pkin(8) * t648 + t1045 * t631 + t1049 * t602;
t532 = -pkin(7) * t671 - t1046 * t598 + t1050 * t595;
t531 = -pkin(1) * t612 - pkin(2) * t671 + pkin(3) * t806 - qJ(4) * t699 - t1040 * t697 - t1042 * t673;
t530 = -t1041 * t568 + t1043 * t569;
t529 = t1041 * t569 + t1043 * t568;
t528 = -pkin(2) * t719 + pkin(7) * t677 + t1046 * t599 + t1050 * t607;
t527 = -t1046 * t790 + t1050 * t536;
t526 = t1046 * t536 + t1050 * t790;
t525 = t1046 * t759 + t1050 * t537;
t524 = t1046 * t537 - t1050 * t759;
t523 = -t1041 * t562 + t1043 * t564;
t522 = -t1041 * t561 + t1043 * t563;
t521 = -pkin(2) * t698 + pkin(7) * t672 + t1046 * t595 + t1050 * t598;
t518 = -t1041 * t555 + t1043 * t556;
t517 = t1041 * t556 + t1043 * t555;
t516 = -pkin(3) * t600 - pkin(4) * t661 - pkin(5) * t745 + t560;
t515 = -pkin(3) * t546 - pkin(4) * t596;
t514 = -pkin(5) * t691 + pkin(9) * t520;
t513 = -qJ(4) * t658 - t1040 * t565 + t1042 * t567;
t512 = -pkin(9) * t641 - t519;
t511 = -pkin(3) * t589 - pkin(4) * t647 - pkin(5) * t713 + t559;
t510 = t1047 * t600 + t1051 * t530;
t509 = t1047 * t530 - t1051 * t600;
t508 = -qJ(2) * t610 - t1041 * t553 + t1043 * t591;
t507 = -pkin(5) * t759 + pkin(9) * t643 + t520;
t506 = t1047 * t589 + t1051 * t518;
t505 = t1047 * t518 - t1051 * t589;
t504 = -pkin(8) * t1118 - qJ(4) * t546 - t1040 * t584;
t503 = -pkin(3) * t535 - pkin(4) * t577 - pkin(5) * t641;
t502 = -t1041 * t543 + t1043 * t544;
t501 = t1041 * t544 + t1043 * t543;
t500 = -pkin(7) * t645 - t1046 * t619 + t1050 * t513;
t499 = -pkin(2) * t658 + pkin(7) * t646 + t1046 * t513 + t1050 * t619;
t498 = -pkin(1) * t587 - pkin(2) * t645 + pkin(3) * t826 - qJ(4) * t660 - t1040 * t567 - t1042 * t565;
t497 = -qJ(4) * t600 - t1040 * t542 + t1042 * t548;
t496 = -t1041 * t526 + t1043 * t527;
t495 = -t1041 * t524 + t1043 * t525;
t494 = t1041 * t525 + t1043 * t524;
t493 = t1049 * t520 - t1112;
t492 = t1045 * t520 + t1104;
t491 = -qJ(2) * t614 - t1041 * t528 + t1043 * t540;
t490 = -qJ(4) * t589 - t1040 * t533 + t1042 * t545;
t489 = -qJ(2) * t612 - t1041 * t521 + t1043 * t532;
t488 = t1047 * t546 + t1051 * t502;
t487 = t1047 * t502 - t1051 * t546;
t486 = t1047 * t535 + t1051 * t495;
t485 = t1047 * t495 - t1051 * t535;
t484 = -pkin(8) * t577 - t1045 * t507 + t1049 * t512;
t483 = -pkin(4) * t759 + pkin(8) * t579 + t1045 * t512 + t1049 * t507;
t482 = -pkin(1) * t529 - pkin(2) * t568 + pkin(3) * t1142 - qJ(4) * t601 - t1040 * t548 - t1042 * t542;
t481 = -pkin(7) * t568 - t1046 * t516 + t1050 * t497;
t480 = -pkin(7) * t543 - t1046 * t515 + t1050 * t504;
t479 = -pkin(2) * t600 + pkin(7) * t569 + t1046 * t497 + t1050 * t516;
t478 = -pkin(1) * t517 - pkin(2) * t555 + pkin(3) * t706 - qJ(4) * t590 - t1040 * t545 - t1042 * t533;
t477 = -qJ(2) * t587 - t1041 * t499 + t1043 * t500;
t476 = -pkin(7) * t555 - t1046 * t511 + t1050 * t490;
t475 = -pkin(1) * t501 - pkin(2) * t543 + pkin(3) * t772 + pkin(8) * t1122 - qJ(4) * t547 - t1042 * t584;
t474 = -t1040 * t492 + t1042 * t493;
t473 = t1040 * t493 + t1042 * t492;
t472 = -pkin(8) * t492 - pkin(9) * t1104 - t1045 * t514;
t471 = t1046 * t691 + t1050 * t474;
t470 = t1046 * t474 - t1050 * t691;
t469 = -pkin(2) * t546 + pkin(7) * t544 + t1046 * t504 + t1050 * t515;
t468 = -pkin(4) * t691 + pkin(8) * t493 - pkin(9) * t1112 + t1049 * t514;
t467 = -pkin(2) * t589 + pkin(7) * t556 + t1046 * t490 + t1050 * t511;
t466 = -qJ(4) * t535 - t1040 * t483 + t1042 * t484;
t465 = -pkin(3) * t473 - pkin(4) * t492 - pkin(5) * t519;
t464 = -qJ(2) * t529 - t1041 * t479 + t1043 * t481;
t463 = -t1041 * t470 + t1043 * t471;
t462 = t1041 * t471 + t1043 * t470;
t461 = -qJ(2) * t517 - t1041 * t467 + t1043 * t476;
t460 = -qJ(2) * t501 - t1041 * t469 + t1043 * t480;
t459 = -pkin(7) * t524 - t1046 * t503 + t1050 * t466;
t458 = -pkin(1) * t494 - pkin(2) * t524 + pkin(3) * t759 - qJ(4) * t537 - t1040 * t484 - t1042 * t483;
t457 = -pkin(2) * t535 + pkin(7) * t525 + t1046 * t466 + t1050 * t503;
t456 = t1047 * t473 + t1051 * t463;
t455 = t1047 * t463 - t1051 * t473;
t454 = -qJ(4) * t473 - t1040 * t468 + t1042 * t472;
t453 = -qJ(2) * t494 - t1041 * t457 + t1043 * t459;
t452 = -pkin(7) * t470 - t1046 * t465 + t1050 * t454;
t451 = -pkin(1) * t462 - pkin(2) * t470 + pkin(3) * t691 - qJ(4) * t474 - t1040 * t472 - t1042 * t468;
t450 = -pkin(2) * t473 + pkin(7) * t471 + t1046 * t454 + t1050 * t465;
t449 = -qJ(2) * t462 - t1041 * t450 + t1043 * t452;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1022, -t1023, 0, t992, 0, 0, 0, 0, 0, 0, -t1058, t987, t979, t891, 0, 0, 0, 0, 0, 0, t819, t828, t817, t748, 0, 0, 0, 0, 0, 0, t686, t690, t680, t575, 0, 0, 0, 0, 0, 0, t586, t594, t552, t488, 0, 0, 0, 0, 0, 0, t506, t510, t486, t456; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1023, -t1022, 0, t990, 0, 0, 0, 0, 0, 0, t986, t985, t978, t890, 0, 0, 0, 0, 0, 0, t818, t827, t816, t747, 0, 0, 0, 0, 0, 0, t685, t689, t679, t574, 0, 0, 0, 0, 0, 0, t585, t593, t551, t487, 0, 0, 0, 0, 0, 0, t505, t509, t485, t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t920, 0, 0, 0, 0, 0, 0, t829, t871, t834, t756, 0, 0, 0, 0, 0, 0, t717, t724, t715, t610, 0, 0, 0, 0, 0, 0, t612, t614, t587, t501, 0, 0, 0, 0, 0, 0, t517, t529, t494, t462; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1023, 0, -t1022, 0, t1062, -t1006, -t990, -pkin(6) * t990, t994, t1019 * t1051 - t1047 * t1021, t987, -t994, t1058, 0, -pkin(6) * t986 - t1041 * t1093 - t1047 * t976, -pkin(6) * t985 - t1043 * t1093 - t1047 * t977, -pkin(6) * t978 - t1051 * t920, -pkin(6) * t890 + (pkin(1) * t1047 - qJ(2) * t1051) * t920, t1051 * t876 + t1066, -t1047 * t973 + t1051 * t836, t1047 * t1136 + t1051 * t873, t1051 * t875 - t1066, -t1047 * t1010 + t1051 * t872, t1047 * qJDD(3) + t1051 * t896, -pkin(6) * t818 - t1047 * t762 + t1051 * t749, -pkin(6) * t827 - t1047 * t775 + t1051 * t758, -pkin(6) * t816 - t1047 * t796 + t1051 * t675, -pkin(6) * t747 - t1047 * t692 + t1051 * t668, -t1047 * t894 + t1051 * t771, -t1047 * t822 + t1051 * t728, -t1047 * t864 + t1051 * t743, -t1047 * t892 + t1051 * t770, -t1047 * t865 + t1051 * t744, -t1047 * t897 + t1051 * t782, -pkin(6) * t685 - t1047 * t637 + t1051 * t554, -pkin(6) * t689 - t1047 * t644 + t1051 * t557, -pkin(6) * t679 - t1047 * t608 + t1051 * t550, -pkin(6) * t574 - t1047 * t549 + t1051 * t508, -t1047 * t730 + t1051 * t630, -t1047 * t657 + t1051 * t592, -t1047 * t733 + t1051 * t617, -t1047 * t729 + t1051 * t629, -t1047 * t734 + t1051 * t618, -t1047 * t767 + t1051 * t678, -pkin(6) * t585 - t1047 * t531 + t1051 * t489, -pkin(6) * t593 - t1047 * t541 + t1051 * t491, -pkin(6) * t551 - t1047 * t498 + t1051 * t477, -pkin(6) * t487 - t1047 * t475 + t1051 * t460, -t1047 * t571 + t1051 * t523, -t1047 * t534 + t1051 * t496, -t1047 * t603 + t1051 * t538, -t1047 * t570 + t1051 * t522, -t1047 * t604 + t1051 * t539, -t1047 * t638 + t1051 * t566, -pkin(6) * t505 - t1047 * t478 + t1051 * t461, -pkin(6) * t509 - t1047 * t482 + t1051 * t464, -pkin(6) * t485 - t1047 * t458 + t1051 * t453, -pkin(6) * t455 - t1047 * t451 + t1051 * t449; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1022, 0, t1023, 0, t1006, t1062, t992, pkin(6) * t992, t993, t1047 * t1019 + t1021 * t1051, t985, -t993, -t986, 0, -pkin(6) * t1058 - t1041 * t1082 + t1051 * t976, pkin(6) * t987 - t1043 * t1082 + t1051 * t977, pkin(6) * t979 - t1047 * t920, pkin(6) * t891 + (-pkin(1) * t1051 - qJ(2) * t1047) * t920, t1047 * t876 - t1067, t1047 * t836 + t1051 * t973, t1047 * t873 - t1051 * t1136, t1047 * t875 + t1067, t1010 * t1051 + t1047 * t872, -qJDD(3) * t1051 + t1047 * t896, pkin(6) * t819 + t1047 * t749 + t1051 * t762, pkin(6) * t828 + t1047 * t758 + t1051 * t775, pkin(6) * t817 + t1047 * t675 + t1051 * t796, pkin(6) * t748 + t1047 * t668 + t1051 * t692, t1047 * t771 + t1051 * t894, t1047 * t728 + t1051 * t822, t1047 * t743 + t1051 * t864, t1047 * t770 + t1051 * t892, t1047 * t744 + t1051 * t865, t1047 * t782 + t1051 * t897, pkin(6) * t686 + t1047 * t554 + t1051 * t637, pkin(6) * t690 + t1047 * t557 + t1051 * t644, pkin(6) * t680 + t1047 * t550 + t1051 * t608, pkin(6) * t575 + t1047 * t508 + t1051 * t549, t1047 * t630 + t1051 * t730, t1047 * t592 + t1051 * t657, t1047 * t617 + t1051 * t733, t1047 * t629 + t1051 * t729, t1047 * t618 + t1051 * t734, t1047 * t678 + t1051 * t767, pkin(6) * t586 + t1047 * t489 + t1051 * t531, pkin(6) * t594 + t1047 * t491 + t1051 * t541, pkin(6) * t552 + t1047 * t477 + t1051 * t498, pkin(6) * t488 + t1047 * t460 + t1051 * t475, t1047 * t523 + t1051 * t571, t1047 * t496 + t1051 * t534, t1047 * t538 + t1051 * t603, t1047 * t522 + t1051 * t570, t1047 * t539 + t1051 * t604, t1047 * t566 + t1051 * t638, pkin(6) * t506 + t1047 * t461 + t1051 * t478, pkin(6) * t510 + t1047 * t464 + t1051 * t482, pkin(6) * t486 + t1047 * t453 + t1051 * t458, pkin(6) * t456 + t1047 * t449 + t1051 * t451; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1024, t1025, 0, 0, t1030, 0.2e1 * t1041 * t1078, 0, t1031, 0, 0, -qJ(2) * t1016 + t1043 * t1065, qJ(2) * t1015 - t1041 * t1065, pkin(1) * t1020 + qJ(2) * t1018 + t922, pkin(1) * t1005 + qJ(2) * t922, t1041 * t936 + t1043 * t935, t1041 * t917 + t1043 * t915, t1041 * t928 + t1043 * t925, t1041 * t934 + t1043 * t933, t1041 * t927 + t1043 * t924, t1041 * t956 + t1043 * t955, -pkin(1) * t968 + qJ(2) * t830 + t1041 * t882 + t1043 * t846, -pkin(1) * t970 + qJ(2) * t874 + t1041 * t885 + t1043 * t863, -pkin(1) * t944 + qJ(2) * t835 + t1041 * t781 + t1043 * t765, pkin(1) * t964 - pkin(7) * t1119 + qJ(2) * t757 + t1043 * t805, t1041 * t855 + t1043 * t853, t1041 * t795 + t1043 * t794, t1041 * t814 + t1043 * t812, t1041 * t854 + t1043 * t852, t1041 * t815 + t1043 * t813, t1041 * t870 + t1043 * t869, -pkin(1) * t832 + qJ(2) * t718 + t1041 * t650 + t1043 * t626, -pkin(1) * t847 + qJ(2) * t725 + t1041 * t653 + t1043 * t632, -pkin(1) * t823 + qJ(2) * t716 + t1041 * t623 + t1043 * t616, -pkin(1) * t687 + qJ(2) * t611 + t1041 * t591 + t1043 * t553, t1041 * t696 + t1043 * t694, t1041 * t652 + t1043 * t651, t1041 * t683 + t1043 * t681, t1041 * t695 + t1043 * t693, t1041 * t684 + t1043 * t682, t1041 * t761 + t1043 * t760, -pkin(1) * t698 + qJ(2) * t613 + t1041 * t532 + t1043 * t521, -pkin(1) * t719 + qJ(2) * t615 + t1041 * t540 + t1043 * t528, -pkin(1) * t658 + qJ(2) * t588 + t1041 * t500 + t1043 * t499, -pkin(1) * t546 + qJ(2) * t502 + t1041 * t480 + t1043 * t469, t1041 * t564 + t1043 * t562, t1041 * t527 + t1043 * t526, t1041 * t582 + t1043 * t580, t1041 * t563 + t1043 * t561, t1041 * t583 + t1043 * t581, t1041 * t628 + t1043 * t627, -pkin(1) * t589 + qJ(2) * t518 + t1041 * t476 + t1043 * t467, -pkin(1) * t600 + qJ(2) * t530 + t1041 * t481 + t1043 * t479, -pkin(1) * t535 + qJ(2) * t495 + t1041 * t459 + t1043 * t457, -pkin(1) * t473 + qJ(2) * t463 + t1041 * t452 + t1043 * t450;];
tauB_reg  = t1;
