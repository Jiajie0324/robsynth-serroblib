% Calculate minimal parameter regressor of coriolis matrix for
% S6RPPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2,theta3]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x29]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPRRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPPRRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:18:42
% EndTime: 2019-03-09 02:18:54
% DurationCPUTime: 5.43s
% Computational Cost: add. (6556->318), mult. (12820->434), div. (0->0), fcn. (15318->10), ass. (0->264)
t316 = qJD(4) + qJD(5);
t238 = sin(qJ(6));
t235 = sin(pkin(11));
t236 = cos(pkin(11));
t240 = sin(qJ(4));
t242 = cos(qJ(4));
t213 = t242 * t235 + t240 * t236;
t401 = cos(qJ(5));
t207 = t401 * t213;
t212 = -t240 * t235 + t242 * t236;
t239 = sin(qJ(5));
t368 = t239 * t212;
t415 = t207 + t368;
t430 = t415 * t238;
t177 = t430 / 0.2e1;
t297 = -t430 / 0.2e1;
t441 = t297 + t177;
t447 = t441 * qJD(3);
t241 = cos(qJ(6));
t286 = -t401 * t212 + t239 * t213;
t377 = t286 ^ 2;
t434 = t415 ^ 2;
t435 = t434 - t377;
t442 = t435 * t241;
t446 = t442 * qJD(1);
t443 = t435 * t238;
t445 = t443 * qJD(1);
t444 = 0.2e1 * t238;
t424 = t415 * qJD(1);
t303 = t286 * t424;
t281 = t207 / 0.2e1;
t414 = t281 + t368 / 0.2e1;
t440 = qJD(6) * t414 + t303;
t439 = t435 * qJD(1);
t224 = sin(pkin(10)) * pkin(1) + qJ(3);
t394 = pkin(7) + t224;
t208 = t394 * t235;
t209 = t394 * t236;
t267 = t240 * t208 - t242 * t209;
t132 = t212 * pkin(8) - t267;
t287 = t242 * t208 + t240 * t209;
t260 = -t213 * pkin(8) - t287;
t429 = t401 * t132 + t239 * t260;
t438 = t316 * t429;
t431 = t241 * t286;
t294 = -t431 / 0.2e1;
t174 = t431 / 0.2e1;
t437 = t429 * t238;
t436 = t429 * t241;
t397 = t415 * pkin(5);
t398 = t286 * pkin(9);
t116 = t397 + t398;
t433 = -t286 / 0.2e1;
t406 = t415 / 0.2e1;
t416 = t401 * t260;
t410 = -t416 / 0.2e1;
t399 = pkin(9) * t415;
t395 = t239 * pkin(4);
t226 = pkin(9) + t395;
t432 = t226 * t415;
t369 = t239 * t132;
t48 = t416 - t369;
t372 = t238 * t241;
t417 = t316 * t372;
t234 = t241 ^ 2;
t233 = t238 ^ 2;
t422 = t233 / 0.2e1;
t290 = t422 - t234 / 0.2e1;
t85 = t290 * t415;
t57 = -t85 * qJD(1) + t417;
t428 = qJD(3) * t286;
t426 = t286 * qJD(1);
t425 = t414 * qJD(1);
t324 = t286 * qJD(5);
t264 = qJD(4) * t286 + t324;
t423 = -0.2e1 * t415;
t408 = t286 / 0.2e1;
t293 = t408 + t433;
t90 = t293 * t238;
t73 = t90 * qJD(6);
t292 = t406 - t415 / 0.2e1;
t103 = t292 * t241;
t83 = t103 * qJD(5);
t421 = -t83 + t73;
t291 = 0.2e1 * t406;
t102 = t291 * t241;
t325 = t415 * qJD(4);
t381 = t102 * qJD(5) + t241 * t325;
t404 = -t238 / 0.2e1;
t296 = t286 * t404;
t89 = t238 * t286;
t91 = t89 / 0.2e1 - t296;
t72 = t91 * qJD(6);
t420 = t72 - t381;
t222 = t234 - t233;
t419 = t222 * t316;
t306 = qJD(1) * t372;
t412 = t306 * t434 + t316 * t85;
t314 = t401 * pkin(4);
t227 = -t314 - pkin(5);
t405 = -t227 / 0.2e1;
t403 = -t241 / 0.2e1;
t402 = t241 / 0.2e1;
t400 = pkin(5) * t238;
t396 = t213 * pkin(4);
t393 = t91 * qJD(4) + t89 * qJD(5);
t392 = t90 * qJD(4);
t252 = t415 * t429;
t214 = -cos(pkin(10)) * pkin(1) - t236 * pkin(3) - pkin(2);
t194 = -t212 * pkin(4) + t214;
t279 = pkin(5) * t286 - t399;
t245 = t194 + t279;
t26 = -t241 * t245 + t437;
t63 = t396 + t116;
t1 = t238 * t252 - t26 * t415 + t431 * t63;
t391 = t1 * qJD(1);
t27 = t238 * t245 + t436;
t2 = t241 * t252 - t27 * t415 - t63 * t89;
t390 = t2 * qJD(1);
t3 = (-t26 + t437) * t415 + t116 * t431;
t387 = t3 * qJD(1);
t384 = t238 * t48;
t383 = t241 * t48;
t321 = t415 * qJD(5);
t92 = 0.2e1 * t177;
t382 = t92 * qJD(4) + t238 * t321;
t380 = t92 * qJD(5) + t238 * t325;
t14 = t26 * t286 + t430 * t48;
t379 = t14 * qJD(1);
t366 = t241 * t415;
t15 = -t27 * t286 - t366 * t48;
t378 = t15 * qJD(1);
t22 = t410 + t416 / 0.2e1;
t375 = t22 * qJD(1);
t374 = t227 * t238;
t270 = t434 + t377;
t32 = t270 * t238;
t362 = t32 * qJD(1);
t34 = t270 * t241;
t360 = t34 * qJD(1);
t50 = -t194 * t415 - t286 * t396;
t358 = t50 * qJD(1);
t51 = t194 * t286 - t396 * t415;
t357 = t51 * qJD(1);
t66 = t293 * t372;
t353 = t66 * qJD(1);
t351 = t430 * qJD(1);
t350 = t89 * qJD(1);
t349 = t89 * qJD(6);
t70 = t91 * qJD(1);
t93 = t292 * t238;
t348 = t93 * qJD(1);
t95 = t291 * t238;
t347 = t95 * qJD(1);
t346 = t431 * qJD(1);
t98 = t293 * t241;
t345 = t98 * qJD(4);
t99 = 0.2e1 * t174;
t344 = t99 * qJD(1);
t221 = t235 ^ 2 + t236 ^ 2;
t342 = qJD(1) * t194;
t341 = qJD(4) * t241;
t340 = qJD(5) * t241;
t339 = qJD(6) * t238;
t230 = qJD(6) * t241;
t100 = 0.2e1 * t433 * t241;
t338 = t100 * qJD(1);
t337 = t102 * qJD(1);
t336 = t103 * qJD(1);
t335 = t103 * qJD(4);
t107 = t222 * t434;
t334 = t107 * qJD(1);
t134 = 0.2e1 * t281 + t368;
t332 = t134 * qJD(1);
t147 = t212 ^ 2 - t213 ^ 2;
t331 = t147 * qJD(1);
t187 = t281 - t207 / 0.2e1;
t328 = t187 * qJD(1);
t183 = t187 * qJD(5);
t326 = t415 * qJD(3);
t199 = t221 * t224;
t320 = t199 * qJD(1);
t319 = t212 * qJD(1);
t210 = t212 * qJD(4);
t318 = t213 * qJD(1);
t211 = t213 * qJD(4);
t317 = t221 * qJD(1);
t313 = qJD(5) * t395;
t312 = qJD(4) * t395;
t307 = t234 * t424;
t305 = t415 * t339;
t304 = t415 * t230;
t302 = t415 * t426;
t301 = t286 * t342;
t300 = t415 * t342;
t299 = t212 * t318;
t223 = t238 * t230;
t298 = t241 * t424;
t289 = t401 * qJD(4);
t288 = t401 * qJD(5);
t285 = -qJD(1) * t214 - qJD(3);
t284 = -t314 / 0.2e1;
t282 = t415 * t306;
t280 = t316 * t395;
t277 = -0.2e1 * t282;
t276 = 0.2e1 * t282;
t4 = (-t27 + t436) * t415 - t116 * t89;
t273 = t4 * qJD(1);
t244 = -t432 / 0.2e1 + t286 * t405 + (t239 * t406 + t401 * t433) * pkin(4);
t243 = t399 / 0.2e1 + pkin(5) * t433 + t244;
t6 = t238 * t243;
t272 = t6 * qJD(1) - t103 * qJD(2);
t271 = t99 * qJD(4) + qJD(5) * t431;
t268 = -t227 * t286 - t432;
t266 = t187 * qJD(2);
t265 = t415 * (-qJD(6) - t426);
t263 = t134 * qJD(5) + t325;
t261 = t398 / 0.2e1 + t397 / 0.2e1;
t259 = t226 * t408 + t405 * t415;
t256 = t102 * qJD(4) + t241 * t321;
t255 = t284 + pkin(5) / 0.2e1 + t405;
t254 = t264 * t415;
t253 = t116 / 0.2e1 + t261;
t251 = t63 / 0.2e1 + t259;
t16 = t253 * t238;
t196 = t255 * t241;
t250 = pkin(5) * t340 - t16 * qJD(1) + t196 * qJD(4);
t18 = t253 * t241;
t195 = t255 * t238;
t249 = t18 * qJD(1) + t195 * qJD(4) + qJD(5) * t400;
t10 = t238 * t251;
t248 = -t10 * qJD(1) - t98 * qJD(2) - t227 * t341;
t12 = t241 * t251;
t247 = t12 * qJD(1) - t90 * qJD(2) - qJD(4) * t374;
t9 = t241 * t243;
t246 = -t9 * qJD(1) - t93 * qJD(2) - t238 * t312;
t220 = t238 * t313;
t217 = t222 * qJD(6);
t198 = pkin(5) * t403 + t227 * t402 + t241 * t284;
t197 = -t400 / 0.2e1 + t374 / 0.2e1 + t238 * t284;
t182 = t187 * qJD(4);
t148 = t223 * t423;
t118 = t277 + t419;
t117 = t276 - t419;
t106 = t316 * t414;
t101 = t294 + t174;
t84 = t93 * qJD(4);
t81 = t99 * qJD(6);
t80 = t98 * qJD(6);
t79 = t431 * qJD(6);
t77 = t93 * qJD(5);
t67 = t85 * qJD(6);
t65 = t294 * t444;
t64 = -t339 - t70;
t60 = -t134 * qJD(4) - t321;
t29 = t234 * t433 + (t290 + t422) * t286;
t23 = t369 + 0.2e1 * t410;
t19 = t116 * t402 - t241 * t261 - t384;
t17 = t116 * t404 + t238 * t261 - t383;
t13 = -t384 / 0.2e1 + t48 * t404 + t63 * t402 - t259 * t241;
t11 = -t383 / 0.2e1 + t48 * t403 + t63 * t404 + t259 * t238;
t8 = pkin(5) * t174 + t244 * t241 + t399 * t403 + t437;
t7 = -pkin(5) * t296 + pkin(9) * t297 + t244 * t238 - t436;
t5 = [0, 0, 0, 0, 0, 0, t221 * qJD(3), t199 * qJD(3), t212 * t211, t147 * qJD(4), 0, 0, 0, t214 * t211, t214 * t210, -t254, -t316 * t435, 0, 0, 0, -t50 * qJD(4) + t194 * t321, -t51 * qJD(4) - t194 * t324, -t223 * t434 - t234 * t254, t264 * t366 * t444 - t107 * qJD(6), -t286 * t305 + t316 * t442, -t286 * t304 - t316 * t443 (t321 + t325) * t286, t32 * qJD(3) + t1 * qJD(4) + t3 * qJD(5) + t15 * qJD(6), t34 * qJD(3) + t2 * qJD(4) + t4 * qJD(5) + t14 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, t317, t320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, 0, 0, 0, 0, 0, 0, t362 - t421, t101 * qJD(6) + t316 * t441 + t360; 0, 0, 0, 0, 0, 0, 0, 0, t299, t331, t210, -t211, 0, qJD(4) * t267 + t214 * t318, qJD(4) * t287 + t214 * t319, -t302, -t439, -t264, -t263, 0, -t358 - t438, -t48 * qJD(4) + t23 * qJD(5) - t357, t65 * qJD(5) - t67 - (t238 * t341 + t307) * t286, t29 * qJD(5) + t148 - (qJD(4) * t222 + t277) * t286, t80 + t446 + t380, -t73 - t445 + t381, t440, t391 + (t238 * t268 - t436) * qJD(4) + t7 * qJD(5) + t13 * qJD(6), t390 + t447 + (t241 * t268 + t437) * qJD(4) + t8 * qJD(5) + t11 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t303, -t439, -t264, t60, 0, t187 * qJD(3) + t300 - t438, t23 * qJD(4) - qJD(5) * t48 - t301, t65 * qJD(4) - t67 + (-t238 * t340 - t307) * t286, t29 * qJD(4) + t148 + (-qJD(5) * t222 + t276) * t286, t446 + t382, t256 - t445, t440, t387 + t103 * qJD(3) + t7 * qJD(4) + (t238 * t279 - t436) * qJD(5) + t19 * qJD(6), t447 + t8 * qJD(4) + (t241 * t279 + t437) * qJD(5) + t17 * qJD(6) + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, t417 * t423 - t334, t238 * t265 + t345, t241 * t265 - t392, t106, -t90 * qJD(3) + t13 * qJD(4) + t19 * qJD(5) - t27 * qJD(6) + t378, t101 * qJD(3) + t11 * qJD(4) + t17 * qJD(5) + t26 * qJD(6) + t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, -t210, 0, 0, 0, 0, 0, -t263, t264, 0, 0, 0, 0, 0, t420, t81 + t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t264, 0, 0, 0, 0, 0, -t256 + t349, t79 + t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304 + t393, t271 + t305; 0, 0, 0, 0, 0, 0, -t317, -t320, 0, 0, 0, 0, 0, t211, t210, 0, 0, 0, 0, 0, t263, -t264, 0, 0, 0, 0, 0, -t362 - t420, -qJD(4) * t430 - t95 * qJD(5) + t100 * qJD(6) - t360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, t319, 0, 0, 0, 0, 0, t424, -t426, 0, 0, 0, 0, 0, t298, -t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, -t426, 0, 0, 0, 0, 0, t337, -t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t230 + t338; 0, 0, 0, 0, 0, 0, 0, 0, -t299, -t331, 0, 0, 0, t285 * t213, t285 * t212, t302, t439, 0, -t183, 0, -t326 + t358, t22 * qJD(5) + t357 + t428, -t66 * qJD(5) + t234 * t302 - t67, -t276 * t286 + t148, t77 + t81 - t446, -t72 + t83 + t445, -t440, t6 * qJD(5) - t12 * qJD(6) - t241 * t326 - t391, qJD(3) * t430 + t9 * qJD(5) + t10 * qJD(6) - t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, 0, 0, 0, 0, 0, 0, t421, t77 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318, -t319, 0, 0, 0, 0, 0, -t424, t426, 0, 0, 0, 0, 0, -t298, t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, -pkin(4) * t288, t223, t217, 0, 0, 0, t227 * t339 - t241 * t313, t227 * t230 + t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t328, 0, -t280 - t266, t375 + (-t289 - t288) * pkin(4), t223 - t353, t217, t348, t336, 0, t197 * qJD(6) - t241 * t280 + t272, t198 * qJD(6) + t220 - t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t118, t230 + t344, t64, -t425, t197 * qJD(5) - t226 * t230 - t247, t198 * qJD(5) + t226 * t339 - t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t303, t439, 0, t182, 0, -t134 * qJD(3) - t300, -t22 * qJD(4) + t301 + t428, t66 * qJD(4) + t234 * t303 - t67, t277 * t286 + t148, t79 - t84 - t446, -t335 - t349 + t445, -t440, -t102 * qJD(3) - t6 * qJD(4) - t18 * qJD(6) - t387, t95 * qJD(3) - t9 * qJD(4) + t16 * qJD(6) - t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t182, 0, 0, 0, 0, 0, 0, t335, -t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t332, t426, 0, 0, 0, 0, 0, -t337, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t328, 0, t266 + t312, pkin(4) * t289 - t375, t223 + t353, t217, -t348, -t336, 0, -t195 * qJD(6) + t241 * t312 - t272, -t196 * qJD(6) + t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t223, t217, 0, 0, 0, -pkin(5) * t339, -pkin(5) * t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t118, t230 + t346, -t339 - t350, -t425, -pkin(9) * t230 - t249, pkin(9) * t339 - t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t412, 0.2e1 * t415 * t417 + t334, t238 * t303 - t271, t241 * t303 + t393, t106, t91 * qJD(3) + t12 * qJD(4) + t18 * qJD(5) - t378, -t100 * qJD(3) - t10 * qJD(4) - t16 * qJD(5) - t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t392, -t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, -t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57, t117, -t344, t70, t425, t195 * qJD(5) + t247, t196 * qJD(5) + t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57, t117, -t346, t350, t425, t249, t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t5;
