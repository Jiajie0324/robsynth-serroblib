% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPPRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:11:07
% EndTime: 2019-05-05 15:11:35
% DurationCPUTime: 29.00s
% Computational Cost: add. (192964->831), mult. (442447->1289), div. (0->0), fcn. (335802->12), ass. (0->562)
t901 = sin(qJ(1));
t905 = cos(qJ(1));
t868 = g(1) * t905 + g(2) * t901;
t977 = qJD(1) ^ 2;
t857 = -pkin(1) * t977 - t868;
t895 = sin(pkin(10));
t897 = cos(pkin(10));
t867 = g(1) * t901 - t905 * g(2);
t917 = qJDD(1) * pkin(1) + t867;
t811 = t897 * t857 + t895 * t917;
t995 = -pkin(2) * t977 + qJDD(1) * qJ(3) + (2 * qJD(1) * qJD(3)) + t811;
t810 = t895 * t857 - t897 * t917;
t924 = t810 * t895 + t897 * t811;
t749 = t810 * t897 - t811 * t895;
t963 = t749 * t901;
t689 = t905 * t924 + t963;
t962 = t749 * t905;
t1003 = -t901 * t924 + t962;
t939 = qJDD(1) * t895;
t860 = t897 * t977 + t939;
t937 = qJDD(1) * t897;
t861 = -t895 * t977 + t937;
t816 = -t860 * t901 + t905 * t861;
t892 = g(3) - qJDD(2);
t834 = qJ(2) * t860 - t892 * t897;
t921 = -qJ(2) * t861 - t892 * t895;
t1002 = -pkin(6) * t816 + t834 * t901 + t905 * t921;
t898 = sin(qJ(6));
t896 = cos(pkin(11));
t904 = cos(qJ(4));
t894 = sin(pkin(11));
t900 = sin(qJ(4));
t948 = t894 * t900;
t847 = (t896 * t904 - t948) * qJD(1);
t918 = t894 * t904 + t896 * t900;
t848 = t918 * qJD(1);
t899 = sin(qJ(5));
t903 = cos(qJ(5));
t795 = t847 * t899 + t848 * t903;
t890 = qJD(4) + qJD(5);
t902 = cos(qJ(6));
t776 = t795 * t898 - t902 * t890;
t778 = t795 * t902 + t890 * t898;
t725 = t778 * t776;
t938 = qJDD(1) * t896;
t845 = qJDD(1) * t948 - t904 * t938;
t944 = t848 * qJD(4);
t805 = -t845 - t944;
t945 = t847 * qJD(4);
t982 = t918 * qJDD(1);
t807 = t982 + t945;
t925 = -t903 * t805 + t899 * t807;
t720 = -qJD(5) * t795 - t925;
t915 = qJDD(6) - t720;
t987 = -t725 + t915;
t1001 = t898 * t987;
t793 = -t903 * t847 + t848 * t899;
t739 = t795 * t793;
t889 = qJDD(4) + qJDD(5);
t986 = -t739 + t889;
t1000 = t899 * t986;
t809 = t847 * t848;
t981 = qJDD(4) + t809;
t999 = t900 * t981;
t998 = t902 * t987;
t997 = t903 * t986;
t996 = t904 * t981;
t909 = t896 ^ 2;
t885 = t909 * t977;
t907 = t894 ^ 2;
t946 = t977 * t907;
t863 = t885 + t946;
t784 = t890 * t793;
t914 = qJD(5) * t793 - t805 * t899 - t807 * t903;
t994 = t914 + t784;
t984 = t905 * t860 + t861 * t901;
t992 = pkin(6) * t984 + t834 * t905 - t901 * t921;
t980 = t977 * (t907 + t909);
t855 = t896 * t980;
t822 = -t855 * t895 + t896 * t937;
t824 = t855 * t897 + t895 * t938;
t761 = t822 * t905 - t824 * t901;
t991 = t822 * t901 + t824 * t905;
t653 = -t776 * qJD(6) + t898 * t889 - t902 * t914;
t789 = qJD(6) + t793;
t731 = t789 * t776;
t631 = -t731 + t653;
t876 = t896 * t892;
t943 = t896 * t977;
t983 = -t876 + (pkin(3) * t943 - pkin(7) * qJDD(1) - t995) * t894;
t926 = -t902 * t889 - t898 * t914;
t628 = (qJD(6) - t789) * t778 + t926;
t677 = (qJD(5) - t890) * t795 + t925;
t774 = t776 ^ 2;
t775 = t778 ^ 2;
t788 = t789 ^ 2;
t791 = t793 ^ 2;
t792 = t795 ^ 2;
t843 = t847 ^ 2;
t844 = t848 ^ 2;
t978 = t890 ^ 2;
t976 = pkin(5) * t899;
t893 = qJDD(1) * pkin(2);
t771 = -t894 * t892 + t896 * t995;
t912 = -pkin(3) * t885 + pkin(7) * t938 + t771;
t693 = t900 * t983 + t904 * t912;
t830 = qJD(4) * pkin(4) - pkin(8) * t848;
t638 = -pkin(4) * t843 + pkin(8) * t805 - qJD(4) * t830 + t693;
t692 = t900 * t912 - t904 * t983;
t911 = (-t807 + t945) * pkin(8) + t981 * pkin(4) - t692;
t569 = t638 * t899 - t903 * t911;
t570 = t903 * t638 + t899 * t911;
t506 = -t569 * t903 + t570 * t899;
t975 = t506 * t900;
t974 = t506 * t904;
t736 = pkin(5) * t793 - pkin(9) * t795;
t548 = -t889 * pkin(5) - pkin(9) * t978 + t736 * t795 + t569;
t973 = t548 * t898;
t972 = t548 * t902;
t615 = -t692 * t904 + t693 * t900;
t971 = t615 * t894;
t970 = t615 * t896;
t640 = t725 + t915;
t969 = t640 * t898;
t968 = t640 * t902;
t790 = -t977 * qJ(3) + qJDD(3) + t810 - t893;
t769 = -pkin(3) * t938 - pkin(7) * t863 + t790;
t691 = -t805 * pkin(4) - t843 * pkin(8) + t848 * t830 + t769;
t967 = t691 * t899;
t966 = t691 * t903;
t734 = t739 + t889;
t965 = t734 * t899;
t964 = t734 * t903;
t961 = t769 * t900;
t960 = t769 * t904;
t959 = t789 * t898;
t958 = t789 * t902;
t957 = t790 * t895;
t956 = t790 * t897;
t802 = qJDD(4) - t809;
t955 = t802 * t900;
t954 = t802 * t904;
t951 = t890 * t899;
t950 = t890 * t903;
t949 = t894 * t895;
t549 = -pkin(5) * t978 + pkin(9) * t889 - t736 * t793 + t570;
t567 = (t795 * t890 - t720) * pkin(5) + t994 * pkin(9) + t691;
t500 = t902 * t549 + t898 * t567;
t935 = t899 * t725;
t934 = t903 * t725;
t933 = t895 * t739;
t932 = t897 * t739;
t931 = t895 * t809;
t930 = t897 * t809;
t929 = -pkin(5) * t903 - pkin(4);
t928 = t894 * t938;
t927 = -t790 + t893;
t499 = t549 * t898 - t902 * t567;
t507 = t569 * t899 + t903 * t570;
t616 = t692 * t900 + t904 * t693;
t770 = t894 * t995 + t876;
t717 = t770 * t894 + t896 * t771;
t827 = -t867 * t901 - t905 * t868;
t866 = qJDD(1) * t905 - t901 * t977;
t922 = -pkin(6) * t866 - g(3) * t901;
t445 = -t499 * t902 + t500 * t898;
t446 = t499 * t898 + t500 * t902;
t716 = t770 * t896 - t771 * t894;
t828 = t860 * t896 * t894;
t829 = t897 * t928 - t943 * t949;
t920 = t828 * t905 + t829 * t901;
t919 = t828 * t901 - t829 * t905;
t826 = t867 * t905 - t868 * t901;
t906 = qJD(4) ^ 2;
t883 = t909 * qJDD(1);
t882 = t907 * qJDD(1);
t865 = qJDD(1) * t901 + t905 * t977;
t864 = t885 - t946;
t859 = t883 - t882;
t858 = t883 + t882;
t854 = t894 * t980;
t842 = -pkin(6) * t865 + g(3) * t905;
t837 = -t844 - t906;
t836 = -t844 + t906;
t835 = t843 - t906;
t823 = t854 * t897 + t894 * t939;
t820 = t854 * t895 - t894 * t937;
t815 = t859 * t897 - t864 * t895;
t814 = t858 * t897 - t863 * t895;
t813 = t859 * t895 + t864 * t897;
t812 = t858 * t895 + t863 * t897;
t808 = -t844 + t843;
t806 = t982 + 0.2e1 * t945;
t804 = t845 + 0.2e1 * t944;
t800 = -t906 - t843;
t787 = (t847 * t904 + t848 * t900) * qJD(4);
t786 = (t847 * t900 - t848 * t904) * qJD(4);
t782 = -t792 + t978;
t781 = t791 - t978;
t780 = -t792 - t978;
t779 = -t843 - t844;
t768 = t807 * t904 - t900 * t944;
t767 = t807 * t900 + t904 * t944;
t766 = -t805 * t900 - t904 * t945;
t765 = t805 * t904 - t900 * t945;
t762 = -t820 * t901 + t823 * t905;
t760 = t820 * t905 + t823 * t901;
t759 = -t837 * t900 - t954;
t758 = -t836 * t900 + t996;
t757 = t835 * t904 - t955;
t756 = t837 * t904 - t955;
t755 = t836 * t904 + t999;
t754 = t835 * t900 + t954;
t753 = -t812 * t901 + t814 * t905;
t752 = t812 * t905 + t814 * t901;
t745 = -t804 * t904 - t806 * t900;
t744 = -t845 * t904 + t900 * t982;
t743 = -t804 * t900 + t806 * t904;
t742 = -t845 * t900 - t904 * t982;
t741 = t800 * t904 - t999;
t740 = t800 * t900 + t996;
t738 = pkin(1) * t892 + qJ(2) * t924;
t737 = -t792 + t791;
t732 = -t978 - t791;
t730 = -t786 * t894 + t787 * t896;
t729 = -t775 + t788;
t728 = t774 - t788;
t727 = (-t793 * t903 + t795 * t899) * t890;
t726 = (-t793 * t899 - t795 * t903) * t890;
t724 = qJDD(4) * t895 + t730 * t897;
t723 = -qJDD(4) * t897 + t730 * t895;
t722 = -t775 + t774;
t718 = -t791 - t792;
t713 = -pkin(7) * t756 + t960;
t712 = -t767 * t894 + t768 * t896;
t711 = -t765 * t894 + t766 * t896;
t710 = -t756 * t894 + t759 * t896;
t709 = -t755 * t894 + t758 * t896;
t708 = -t754 * t894 + t757 * t896;
t707 = t756 * t896 + t759 * t894;
t706 = -t775 - t788;
t705 = t781 * t903 - t965;
t704 = -t782 * t899 + t997;
t703 = t781 * t899 + t964;
t702 = t782 * t903 + t1000;
t701 = -qJ(2) * t820 - t771 * t895 + t896 * t956;
t700 = -qJ(2) * t822 - t770 * t895 + t894 * t956;
t699 = qJ(2) * t823 + t771 * t897 + t896 * t957;
t698 = -qJ(2) * t824 + t770 * t897 + t790 * t949;
t697 = -t780 * t899 - t964;
t696 = t780 * t903 - t965;
t695 = -pkin(7) * t740 + t961;
t694 = -t788 - t774;
t687 = t774 + t775;
t686 = t709 * t897 + t895 * t982;
t685 = t708 * t897 - t845 * t895;
t684 = t709 * t895 - t897 * t982;
t683 = t708 * t895 + t845 * t897;
t682 = -qJ(2) * t812 + t716 * t897;
t681 = qJ(2) * t814 + t716 * t895;
t680 = -t743 * t894 + t745 * t896;
t679 = -t742 * t894 + t744 * t896;
t678 = t742 * t896 + t744 * t894;
t676 = -t784 + t914;
t672 = (qJD(5) + t890) * t795 + t925;
t671 = -pkin(3) * t806 + pkin(7) * t759 + t961;
t670 = -t740 * t894 + t741 * t896;
t669 = t740 * t896 + t741 * t894;
t668 = t712 * t897 - t931;
t667 = t711 * t897 + t931;
t666 = t712 * t895 + t930;
t665 = t711 * t895 - t930;
t664 = -t795 * t951 - t903 * t914;
t663 = t795 * t950 - t899 * t914;
t662 = -t720 * t899 + t793 * t950;
t661 = t720 * t903 + t793 * t951;
t660 = t717 * t897 + t957;
t659 = t717 * t895 - t956;
t658 = t710 * t897 + t806 * t895;
t657 = t710 * t895 - t806 * t897;
t656 = t732 * t903 - t1000;
t655 = t732 * t899 + t997;
t654 = -pkin(3) * t804 + pkin(7) * t741 - t960;
t652 = -qJD(6) * t778 - t926;
t651 = (-t776 * t902 + t778 * t898) * t789;
t650 = (t776 * t898 + t778 * t902) * t789;
t649 = -t726 * t900 + t727 * t904;
t648 = t726 * t904 + t727 * t900;
t647 = t680 * t897 - t808 * t895;
t646 = t680 * t895 + t808 * t897;
t645 = t670 * t897 + t804 * t895;
t644 = t670 * t895 - t804 * t897;
t643 = t679 * t897 + t779 * t895;
t642 = t679 * t895 - t779 * t897;
t636 = -pkin(2) * t678 - pkin(3) * t742;
t632 = -t731 - t653;
t629 = (-qJD(6) - t789) * t778 - t926;
t627 = -t703 * t900 + t705 * t904;
t626 = -t702 * t900 + t704 * t904;
t625 = t703 * t904 + t705 * t900;
t624 = t702 * t904 + t704 * t900;
t623 = t653 * t902 - t778 * t959;
t622 = -t653 * t898 - t778 * t958;
t621 = -t652 * t898 + t776 * t958;
t620 = -t652 * t902 - t776 * t959;
t619 = -t696 * t900 + t697 * t904;
t618 = t696 * t904 + t697 * t900;
t617 = -pkin(8) * t696 + t966;
t614 = t651 * t903 + t899 * t915;
t613 = t651 * t899 - t903 * t915;
t612 = t728 * t902 - t969;
t611 = -t729 * t898 + t998;
t610 = -t728 * t898 - t968;
t609 = -t729 * t902 - t1001;
t608 = -t676 * t899 - t677 * t903;
t607 = -t672 * t903 + t899 * t994;
t606 = t676 * t903 - t677 * t899;
t605 = -t672 * t899 - t903 * t994;
t604 = -pkin(8) * t655 + t967;
t603 = -t663 * t900 + t664 * t904;
t602 = -t661 * t900 + t662 * t904;
t601 = t663 * t904 + t664 * t900;
t600 = t661 * t904 + t662 * t900;
t599 = -pkin(2) * t707 - pkin(3) * t756 + t693;
t598 = -t659 * t901 + t660 * t905;
t597 = t659 * t905 + t660 * t901;
t596 = -t657 * t901 + t658 * t905;
t595 = t657 * t905 + t658 * t901;
t594 = -t655 * t900 + t656 * t904;
t593 = t655 * t904 + t656 * t900;
t592 = -t706 * t898 - t968;
t591 = t706 * t902 - t969;
t590 = -pkin(3) * t769 + pkin(7) * t616;
t589 = t694 * t902 - t1001;
t588 = t694 * t898 + t998;
t587 = -pkin(7) * t742 - t615;
t586 = t623 * t903 + t935;
t585 = t621 * t903 - t935;
t584 = t623 * t899 - t934;
t583 = t621 * t899 + t934;
t582 = -pkin(2) * t669 - pkin(3) * t740 + t692;
t581 = -t648 * t894 + t649 * t896;
t580 = t581 * t897 + t889 * t895;
t579 = t581 * t895 - t889 * t897;
t578 = -t644 * t901 + t645 * t905;
t577 = t644 * t905 + t645 * t901;
t576 = -qJ(2) * t659 - (pkin(2) * t895 - qJ(3) * t897) * t716;
t575 = -qJ(3) * t707 - t671 * t894 + t713 * t896;
t574 = -pkin(3) * t779 + pkin(7) * t744 + t616;
t573 = -t642 * t901 + t643 * t905;
t572 = t642 * t905 + t643 * t901;
t571 = pkin(4) * t994 + pkin(8) * t697 + t967;
t564 = -qJ(3) * t669 - t654 * t894 + t695 * t896;
t563 = -pkin(4) * t672 + pkin(8) * t656 - t966;
t562 = qJ(2) * t660 - (-pkin(2) * t897 - qJ(3) * t895 - pkin(1)) * t716;
t561 = -t628 * t902 - t632 * t898;
t560 = t629 * t902 - t631 * t898;
t559 = -t628 * t898 + t632 * t902;
t558 = -t629 * t898 - t631 * t902;
t557 = -t625 * t894 + t627 * t896;
t556 = -t624 * t894 + t626 * t896;
t555 = -t618 * t894 + t619 * t896;
t554 = t618 * t896 + t619 * t894;
t553 = t612 * t903 - t628 * t899;
t552 = t611 * t903 - t632 * t899;
t551 = t612 * t899 + t628 * t903;
t550 = t611 * t899 + t632 * t903;
t546 = t616 * t896 - t971;
t545 = t616 * t894 + t970;
t544 = -t613 * t900 + t614 * t904;
t543 = t613 * t904 + t614 * t900;
t542 = t592 * t903 + t631 * t899;
t541 = t592 * t899 - t631 * t903;
t540 = t589 * t903 - t629 * t899;
t539 = t589 * t899 + t629 * t903;
t538 = t560 * t903 - t722 * t899;
t537 = t560 * t899 + t722 * t903;
t536 = -t606 * t900 + t608 * t904;
t535 = -t605 * t900 + t607 * t904;
t534 = t606 * t904 + t608 * t900;
t533 = t605 * t904 + t607 * t900;
t532 = t546 * t897 + t769 * t895;
t531 = t546 * t895 - t769 * t897;
t530 = -t601 * t894 + t603 * t896;
t529 = -t600 * t894 + t602 * t896;
t528 = t561 * t903 - t687 * t899;
t527 = t561 * t899 + t687 * t903;
t526 = -t593 * t894 + t594 * t896;
t525 = t593 * t896 + t594 * t894;
t524 = t557 * t897 - t677 * t895;
t523 = t556 * t897 - t676 * t895;
t522 = t557 * t895 + t677 * t897;
t521 = t556 * t895 + t676 * t897;
t520 = t555 * t897 - t895 * t994;
t519 = t555 * t895 + t897 * t994;
t518 = t530 * t897 + t933;
t517 = t529 * t897 - t933;
t516 = t530 * t895 - t932;
t515 = t529 * t895 + t932;
t514 = -t584 * t900 + t586 * t904;
t513 = -t583 * t900 + t585 * t904;
t512 = t584 * t904 + t586 * t900;
t511 = t583 * t904 + t585 * t900;
t510 = t526 * t897 + t672 * t895;
t509 = t526 * t895 - t672 * t897;
t508 = -pkin(2) * t545 - pkin(3) * t615;
t505 = -qJ(2) * t657 + t575 * t897 - t599 * t895;
t504 = -pkin(9) * t591 + t972;
t503 = -pkin(9) * t588 + t973;
t502 = -qJ(3) * t678 - t574 * t894 + t587 * t896;
t501 = -pkin(7) * t618 - t571 * t900 + t617 * t904;
t498 = -pkin(1) * t707 + qJ(2) * t658 + t575 * t895 + t599 * t897;
t497 = -pkin(4) * t691 + pkin(8) * t507;
t496 = -qJ(2) * t644 + t564 * t897 - t582 * t895;
t495 = -pkin(7) * t593 - t563 * t900 + t604 * t904;
t494 = pkin(3) * t994 + pkin(7) * t619 + t571 * t904 + t617 * t900;
t493 = -t551 * t900 + t553 * t904;
t492 = -t550 * t900 + t552 * t904;
t491 = t551 * t904 + t553 * t900;
t490 = t550 * t904 + t552 * t900;
t489 = -pkin(1) * t669 + qJ(2) * t645 + t564 * t895 + t582 * t897;
t488 = -pkin(8) * t606 - t506;
t487 = -pkin(7) * t970 - qJ(3) * t545 - t590 * t894;
t486 = -t543 * t894 + t544 * t896;
t485 = -t541 * t900 + t542 * t904;
t484 = t541 * t904 + t542 * t900;
t483 = -t539 * t900 + t540 * t904;
t482 = t539 * t904 + t540 * t900;
t481 = -t537 * t900 + t538 * t904;
t480 = t537 * t904 + t538 * t900;
t479 = -t534 * t894 + t536 * t896;
t478 = -t533 * t894 + t535 * t896;
t477 = t534 * t896 + t536 * t894;
t476 = -pkin(3) * t672 + pkin(7) * t594 + t563 * t904 + t604 * t900;
t475 = -t531 * t901 + t532 * t905;
t474 = t531 * t905 + t532 * t901;
t473 = -pkin(4) * t718 + pkin(8) * t608 + t507;
t472 = t478 * t897 - t737 * t895;
t471 = t478 * t895 + t737 * t897;
t470 = -t527 * t900 + t528 * t904;
t469 = t527 * t904 + t528 * t900;
t468 = -qJ(2) * t642 + t502 * t897 - t636 * t895;
t467 = -pkin(5) * t591 + t500;
t466 = -pkin(5) * t588 + t499;
t465 = t479 * t897 + t718 * t895;
t464 = t479 * t895 - t718 * t897;
t463 = -pkin(2) * t554 - pkin(3) * t618 - pkin(4) * t696 + t570;
t462 = t486 * t897 - t650 * t895;
t461 = t486 * t895 + t650 * t897;
t460 = -t519 * t901 + t520 * t905;
t459 = t519 * t905 + t520 * t901;
t458 = -t512 * t894 + t514 * t896;
t457 = -t511 * t894 + t513 * t896;
t456 = -pkin(1) * t678 + qJ(2) * t643 + t502 * t895 + t636 * t897;
t455 = -pkin(2) * t525 - pkin(3) * t593 - pkin(4) * t655 + t569;
t454 = -t509 * t901 + t510 * t905;
t453 = t509 * t905 + t510 * t901;
t452 = t458 * t897 - t622 * t895;
t451 = t457 * t897 - t620 * t895;
t450 = t458 * t895 + t622 * t897;
t449 = t457 * t895 + t620 * t897;
t448 = t507 * t904 - t975;
t447 = t507 * t900 + t974;
t444 = -pkin(2) * t477 - pkin(3) * t534 - pkin(4) * t606;
t443 = -t491 * t894 + t493 * t896;
t442 = -t490 * t894 + t492 * t896;
t441 = -t484 * t894 + t485 * t896;
t440 = t484 * t896 + t485 * t894;
t439 = -t482 * t894 + t483 * t896;
t438 = t482 * t896 + t483 * t894;
t437 = -t480 * t894 + t481 * t896;
t436 = -pkin(9) * t559 - t445;
t435 = t443 * t897 - t610 * t895;
t434 = t442 * t897 - t609 * t895;
t433 = t443 * t895 + t610 * t897;
t432 = t442 * t895 + t609 * t897;
t431 = t446 * t903 + t548 * t899;
t430 = t446 * t899 - t548 * t903;
t429 = -qJ(3) * t554 - t494 * t894 + t501 * t896;
t428 = -t469 * t894 + t470 * t896;
t427 = t469 * t896 + t470 * t894;
t426 = -qJ(2) * t531 + t487 * t897 - t508 * t895;
t425 = -t464 * t901 + t465 * t905;
t424 = t464 * t905 + t465 * t901;
t423 = t441 * t897 + t591 * t895;
t422 = t441 * t895 - t591 * t897;
t421 = t439 * t897 + t588 * t895;
t420 = t439 * t895 - t588 * t897;
t419 = -pkin(8) * t541 - t467 * t899 + t504 * t903;
t418 = -pkin(8) * t539 - t466 * t899 + t503 * t903;
t417 = t437 * t897 - t558 * t895;
t416 = t437 * t895 + t558 * t897;
t415 = -qJ(3) * t525 - t476 * t894 + t495 * t896;
t414 = -pkin(7) * t534 - t473 * t900 + t488 * t904;
t413 = -pkin(4) * t591 + pkin(8) * t542 + t467 * t903 + t504 * t899;
t412 = t428 * t897 + t559 * t895;
t411 = t428 * t895 - t559 * t897;
t410 = -pkin(4) * t588 + pkin(8) * t540 + t466 * t903 + t503 * t899;
t409 = -pkin(3) * t718 + pkin(7) * t536 + t473 * t904 + t488 * t900;
t408 = -pkin(1) * t545 + qJ(2) * t532 + t487 * t895 + t508 * t897;
t407 = -t447 * t894 + t448 * t896;
t406 = t447 * t896 + t448 * t894;
t405 = -pkin(7) * t447 - pkin(8) * t974 - t497 * t900;
t404 = t407 * t897 + t691 * t895;
t403 = t407 * t895 - t691 * t897;
t402 = -pkin(8) * t527 + t436 * t903 + t559 * t976;
t401 = -pkin(3) * t691 + pkin(7) * t448 - pkin(8) * t975 + t497 * t904;
t400 = pkin(8) * t528 + t899 * t436 + t559 * t929;
t399 = -qJ(2) * t519 + t429 * t897 - t463 * t895;
t398 = -t430 * t900 + t431 * t904;
t397 = t430 * t904 + t431 * t900;
t396 = -pkin(1) * t554 + qJ(2) * t520 + t429 * t895 + t463 * t897;
t395 = -pkin(2) * t440 - pkin(3) * t484 - pkin(4) * t541 + pkin(5) * t631 - pkin(9) * t592 - t973;
t394 = -pkin(2) * t438 - pkin(3) * t482 - pkin(4) * t539 - pkin(5) * t629 - pkin(9) * t589 + t972;
t393 = -qJ(2) * t509 + t415 * t897 - t455 * t895;
t392 = -t422 * t901 + t423 * t905;
t391 = t422 * t905 + t423 * t901;
t390 = -t420 * t901 + t421 * t905;
t389 = t420 * t905 + t421 * t901;
t388 = -pkin(1) * t525 + qJ(2) * t510 + t415 * t895 + t455 * t897;
t387 = -pkin(2) * t406 - pkin(3) * t447 - pkin(4) * t506;
t386 = -t411 * t901 + t412 * t905;
t385 = t411 * t905 + t412 * t901;
t384 = -pkin(8) * t430 + (-pkin(9) * t903 + t976) * t445;
t383 = -pkin(7) * t484 - t413 * t900 + t419 * t904;
t382 = -pkin(7) * t482 - t410 * t900 + t418 * t904;
t381 = -pkin(2) * t427 - pkin(3) * t469 - pkin(4) * t527 - pkin(5) * t687 - pkin(9) * t561 - t446;
t380 = -t403 * t901 + t404 * t905;
t379 = t403 * t905 + t404 * t901;
t378 = -pkin(3) * t591 + pkin(7) * t485 + t413 * t904 + t419 * t900;
t377 = -qJ(3) * t477 - t409 * t894 + t414 * t896;
t376 = -pkin(3) * t588 + pkin(7) * t483 + t410 * t904 + t418 * t900;
t375 = pkin(8) * t431 + (-pkin(9) * t899 + t929) * t445;
t374 = -pkin(7) * t469 - t400 * t900 + t402 * t904;
t373 = -pkin(3) * t559 + pkin(7) * t470 + t400 * t904 + t402 * t900;
t372 = -t397 * t894 + t398 * t896;
t371 = t397 * t896 + t398 * t894;
t370 = -qJ(3) * t406 - t401 * t894 + t405 * t896;
t369 = -qJ(2) * t464 + t377 * t897 - t444 * t895;
t368 = -pkin(1) * t477 + qJ(2) * t465 + t377 * t895 + t444 * t897;
t367 = t372 * t897 + t445 * t895;
t366 = t372 * t895 - t445 * t897;
t365 = -qJ(3) * t440 - t378 * t894 + t383 * t896;
t364 = -qJ(3) * t438 - t376 * t894 + t382 * t896;
t363 = -pkin(7) * t397 - t375 * t900 + t384 * t904;
t362 = -pkin(2) * t371 - pkin(3) * t397 - pkin(4) * t430 + pkin(5) * t548 - pkin(9) * t446;
t361 = -qJ(2) * t403 + t370 * t897 - t387 * t895;
t360 = -qJ(3) * t427 - t373 * t894 + t374 * t896;
t359 = -pkin(3) * t445 + pkin(7) * t398 + t375 * t904 + t384 * t900;
t358 = -pkin(1) * t406 + qJ(2) * t404 + t370 * t895 + t387 * t897;
t357 = -t366 * t901 + t367 * t905;
t356 = t366 * t905 + t367 * t901;
t355 = -qJ(2) * t422 + t365 * t897 - t395 * t895;
t354 = -qJ(2) * t420 + t364 * t897 - t394 * t895;
t353 = -pkin(1) * t440 + qJ(2) * t423 + t365 * t895 + t395 * t897;
t352 = -pkin(1) * t438 + qJ(2) * t421 + t364 * t895 + t394 * t897;
t351 = -qJ(2) * t411 + t360 * t897 - t381 * t895;
t350 = -pkin(1) * t427 + qJ(2) * t412 + t360 * t895 + t381 * t897;
t349 = -qJ(3) * t371 - t359 * t894 + t363 * t896;
t348 = -qJ(2) * t366 + t349 * t897 - t362 * t895;
t347 = -pkin(1) * t371 + qJ(2) * t367 + t349 * t895 + t362 * t897;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t865, -t866, 0, t827, 0, 0, 0, 0, 0, 0, -t984, -t816, 0, t689, 0, 0, 0, 0, 0, 0, -t991, t762, t753, t598, 0, 0, 0, 0, 0, 0, t578, t596, t573, t475, 0, 0, 0, 0, 0, 0, t454, t460, t425, t380, 0, 0, 0, 0, 0, 0, t390, t392, t386, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t866, -t865, 0, t826, 0, 0, 0, 0, 0, 0, t816, -t984, 0, -t1003, 0, 0, 0, 0, 0, 0, t761, t760, t752, t597, 0, 0, 0, 0, 0, 0, t577, t595, t572, t474, 0, 0, 0, 0, 0, 0, t453, t459, t424, t379, 0, 0, 0, 0, 0, 0, t389, t391, t385, t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t892, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t716, 0, 0, 0, 0, 0, 0, t669, t707, t678, t545, 0, 0, 0, 0, 0, 0, t525, t554, t477, t406, 0, 0, 0, 0, 0, 0, t438, t440, t427, t371; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t866, 0, -t865, 0, t922, -t842, -t826, -pkin(6) * t826, 0, 0, t816, 0, -t984, 0, t1002, t992, t1003, pkin(6) * t1003 + qJ(2) * t962 - t738 * t901, -t919, -t813 * t901 + t815 * t905, t762, t919, t991, 0, -pkin(6) * t761 - t698 * t901 + t700 * t905, -pkin(6) * t760 - t699 * t901 + t701 * t905, -pkin(6) * t752 - t681 * t901 + t682 * t905, -pkin(6) * t597 - t562 * t901 + t576 * t905, -t666 * t901 + t668 * t905, -t646 * t901 + t647 * t905, -t684 * t901 + t686 * t905, -t665 * t901 + t667 * t905, -t683 * t901 + t685 * t905, -t723 * t901 + t724 * t905, -pkin(6) * t577 - t489 * t901 + t496 * t905, -pkin(6) * t595 - t498 * t901 + t505 * t905, -pkin(6) * t572 - t456 * t901 + t468 * t905, -pkin(6) * t474 - t408 * t901 + t426 * t905, -t516 * t901 + t518 * t905, -t471 * t901 + t472 * t905, -t521 * t901 + t523 * t905, -t515 * t901 + t517 * t905, -t522 * t901 + t524 * t905, -t579 * t901 + t580 * t905, -pkin(6) * t453 - t388 * t901 + t393 * t905, -pkin(6) * t459 - t396 * t901 + t399 * t905, -pkin(6) * t424 - t368 * t901 + t369 * t905, -pkin(6) * t379 - t358 * t901 + t361 * t905, -t450 * t901 + t452 * t905, -t416 * t901 + t417 * t905, -t432 * t901 + t434 * t905, -t449 * t901 + t451 * t905, -t433 * t901 + t435 * t905, -t461 * t901 + t462 * t905, -pkin(6) * t389 - t352 * t901 + t354 * t905, -pkin(6) * t391 - t353 * t901 + t355 * t905, -pkin(6) * t385 - t350 * t901 + t351 * t905, -pkin(6) * t356 - t347 * t901 + t348 * t905; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t865, 0, t866, 0, t842, t922, t827, pkin(6) * t827, 0, 0, t984, 0, t816, 0, -t992, t1002, t689, pkin(6) * t689 + qJ(2) * t963 + t738 * t905, t920, t813 * t905 + t815 * t901, t760, -t920, -t761, 0, -pkin(6) * t991 + t698 * t905 + t700 * t901, pkin(6) * t762 + t699 * t905 + t701 * t901, pkin(6) * t753 + t681 * t905 + t682 * t901, pkin(6) * t598 + t562 * t905 + t576 * t901, t666 * t905 + t668 * t901, t646 * t905 + t647 * t901, t684 * t905 + t686 * t901, t665 * t905 + t667 * t901, t683 * t905 + t685 * t901, t723 * t905 + t724 * t901, pkin(6) * t578 + t489 * t905 + t496 * t901, pkin(6) * t596 + t498 * t905 + t505 * t901, pkin(6) * t573 + t456 * t905 + t468 * t901, pkin(6) * t475 + t408 * t905 + t426 * t901, t516 * t905 + t518 * t901, t471 * t905 + t472 * t901, t521 * t905 + t523 * t901, t515 * t905 + t517 * t901, t522 * t905 + t524 * t901, t579 * t905 + t580 * t901, pkin(6) * t454 + t388 * t905 + t393 * t901, pkin(6) * t460 + t396 * t905 + t399 * t901, pkin(6) * t425 + t368 * t905 + t369 * t901, pkin(6) * t380 + t358 * t905 + t361 * t901, t450 * t905 + t452 * t901, t416 * t905 + t417 * t901, t432 * t905 + t434 * t901, t449 * t905 + t451 * t901, t433 * t905 + t435 * t901, t461 * t905 + t462 * t901, pkin(6) * t390 + t352 * t905 + t354 * t901, pkin(6) * t392 + t353 * t905 + t355 * t901, pkin(6) * t386 + t350 * t905 + t351 * t901, pkin(6) * t357 + t347 * t905 + t348 * t901; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t867, t868, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t861 - t810, -pkin(1) * t860 - t811, 0, -pkin(1) * t749, t882, 0.2e1 * t928, 0, t883, 0, 0, pkin(1) * t822 - qJ(3) * t855 + t896 * t927, pkin(1) * t820 + qJ(3) * t854 - t894 * t927, pkin(1) * t812 + pkin(2) * t863 + qJ(3) * t858 + t717, pkin(1) * t659 - pkin(2) * t790 + qJ(3) * t717, t767 * t896 + t768 * t894, t743 * t896 + t745 * t894, t755 * t896 + t758 * t894, t765 * t896 + t766 * t894, t754 * t896 + t757 * t894, t786 * t896 + t787 * t894, pkin(1) * t644 - pkin(2) * t804 + qJ(3) * t670 + t654 * t896 + t695 * t894, pkin(1) * t657 - pkin(2) * t806 + qJ(3) * t710 + t671 * t896 + t713 * t894, pkin(1) * t642 - pkin(2) * t779 + qJ(3) * t679 + t574 * t896 + t587 * t894, pkin(1) * t531 - pkin(2) * t769 - pkin(7) * t971 + qJ(3) * t546 + t590 * t896, t601 * t896 + t603 * t894, t533 * t896 + t535 * t894, t624 * t896 + t626 * t894, t600 * t896 + t602 * t894, t625 * t896 + t627 * t894, t648 * t896 + t649 * t894, pkin(1) * t509 - pkin(2) * t672 + qJ(3) * t526 + t476 * t896 + t495 * t894, pkin(1) * t519 + pkin(2) * t994 + qJ(3) * t555 + t494 * t896 + t501 * t894, pkin(1) * t464 - pkin(2) * t718 + qJ(3) * t479 + t409 * t896 + t414 * t894, pkin(1) * t403 - pkin(2) * t691 + qJ(3) * t407 + t401 * t896 + t405 * t894, t512 * t896 + t514 * t894, t480 * t896 + t481 * t894, t490 * t896 + t492 * t894, t511 * t896 + t513 * t894, t491 * t896 + t493 * t894, t543 * t896 + t544 * t894, pkin(1) * t420 - pkin(2) * t588 + qJ(3) * t439 + t376 * t896 + t382 * t894, pkin(1) * t422 - pkin(2) * t591 + qJ(3) * t441 + t378 * t896 + t383 * t894, pkin(1) * t411 - pkin(2) * t559 + qJ(3) * t428 + t373 * t896 + t374 * t894, pkin(1) * t366 - pkin(2) * t445 + qJ(3) * t372 + t359 * t896 + t363 * t894;];
tauB_reg  = t1;
