% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPPRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:18:39
% EndTime: 2019-03-09 02:18:45
% DurationCPUTime: 2.04s
% Computational Cost: add. (4698->179), mult. (9507->312), div. (0->0), fcn. (9865->10), ass. (0->117)
t145 = sin(qJ(4));
t116 = qJD(4) * t145;
t147 = cos(qJ(4));
t117 = qJD(4) * t147;
t81 = sin(pkin(11));
t82 = cos(pkin(11));
t103 = t81 * t116 - t82 * t117;
t73 = sin(pkin(10)) * pkin(1) + qJ(3);
t149 = pkin(7) + t73;
t111 = t149 * t145;
t115 = t147 * qJD(3);
t118 = qJD(3) * t145;
t60 = t149 * t82;
t38 = (qJD(4) * t111 - t115) * t81 - t60 * t117 - t82 * t118;
t162 = t103 * pkin(8) + t38;
t83 = sin(qJ(6));
t79 = t83 ^ 2;
t85 = cos(qJ(6));
t80 = t85 ^ 2;
t157 = (t79 - t80) * qJD(6);
t84 = sin(qJ(5));
t132 = qJD(5) * t84;
t135 = t82 * t116 + t81 * t117;
t146 = cos(qJ(5));
t120 = t147 * t81;
t61 = t145 * t82 + t120;
t97 = t145 * t81 - t147 * t82;
t92 = t146 * t97;
t33 = qJD(5) * t92 + t146 * t103 + t61 * t132 + t84 * t135;
t46 = t146 * t61 - t84 * t97;
t34 = t46 * qJD(5) - t84 * t103 + t146 * t135;
t45 = t84 * t61 + t92;
t161 = t45 * t33 - t46 * t34;
t160 = t79 + t80;
t55 = t149 * t120;
t37 = qJD(4) * t55 - t82 * t115 + t60 * t116 + t81 * t118;
t35 = -t135 * pkin(8) - t37;
t43 = -t81 * t111 + t147 * t60;
t40 = -t97 * pkin(8) + t43;
t42 = -t145 * t60 - t55;
t101 = -t61 * pkin(8) + t42;
t94 = t146 * t101;
t86 = -qJD(5) * t94 + t40 * t132 - t146 * t35 - t162 * t84;
t63 = -cos(pkin(10)) * pkin(1) - pkin(2) - t82 * pkin(3);
t49 = t97 * pkin(4) + t63;
t88 = t45 * pkin(5) - t46 * pkin(9) + t49;
t159 = -qJD(6) * t88 + t86;
t20 = t84 * t101 + t146 * t40;
t7 = -t83 * t20 + t85 * t88;
t8 = t85 * t20 + t83 * t88;
t158 = -t7 * t83 + t8 * t85;
t130 = qJD(6) * t83;
t121 = t135 * pkin(4);
t154 = t34 * pkin(5);
t95 = t33 * pkin(9) + t121 + t154;
t2 = t20 * t130 + t159 * t85 - t83 * t95;
t76 = qJD(6) * t85;
t3 = t159 * t83 - t20 * t76 + t85 * t95;
t156 = -qJD(6) * t158 + t2 * t83 - t3 * t85;
t19 = t84 * t40 - t94;
t6 = t20 * qJD(5) - t146 * t162 + t84 * t35;
t155 = t19 * t6;
t153 = t6 * t46;
t5 = t6 * t83;
t150 = t84 * pkin(4);
t148 = t19 * t76 + t5;
t144 = t45 * t34;
t143 = t45 * t84;
t142 = t46 * t33;
t29 = t79 * t33;
t30 = t80 * t33;
t141 = t83 * t34;
t140 = t85 * t33;
t139 = t85 * t34;
t138 = t46 * t139 - t45 * t140;
t125 = pkin(4) * t132;
t124 = t146 * pkin(4);
t75 = -t124 - pkin(5);
t136 = t83 * t125 + t75 * t76;
t133 = pkin(4) * qJD(5);
t129 = 0.2e1 * t144;
t128 = t83 * t140;
t127 = pkin(5) * t130;
t126 = pkin(5) * t76;
t123 = t46 * t130;
t122 = t83 * t76;
t119 = t160 * t33;
t44 = t46 ^ 2;
t114 = t44 * t122;
t113 = qJD(5) * t124;
t112 = 0.2e1 * (t81 ^ 2 + t82 ^ 2) * qJD(3);
t109 = t7 * t85 + t8 * t83;
t107 = t19 * t34 + t6 * t45;
t74 = pkin(9) + t150;
t105 = t45 * t74 - t46 * t75;
t104 = -t85 * t125 + t75 * t130;
t102 = -t83 * t33 + t46 * t76;
t14 = t123 + t140;
t15 = t45 * t76 + t141;
t13 = t45 * t130 - t139;
t99 = t61 * t103;
t98 = t160 * t146;
t96 = (-t146 * t45 + t46 * t84) * qJD(5);
t91 = t97 * t135;
t1 = -t109 * qJD(6) - t2 * t85 - t3 * t83;
t89 = pkin(4) * t96 - t33 * t75 - t34 * t74;
t68 = -0.2e1 * t122;
t67 = 0.2e1 * t122;
t62 = -0.2e1 * t157;
t58 = t98 * t133;
t22 = t46 * t30;
t21 = t46 * t29;
t17 = t19 * t130;
t12 = t29 + t30;
t11 = t46 * t157 + t128;
t9 = -0.4e1 * t46 * t122 + t29 - t30;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, t73 * t112, -0.2e1 * t99, 0.2e1 * t97 * t103 - 0.2e1 * t61 * t135, 0, 0.2e1 * t91, 0, 0, 0.2e1 * t63 * t135, -0.2e1 * t63 * t103, 0.2e1 * t42 * t103 - 0.2e1 * t43 * t135 + 0.2e1 * t37 * t97 - 0.2e1 * t38 * t61, -0.2e1 * t43 * t37 + 0.2e1 * t42 * t38, -0.2e1 * t142, 0.2e1 * t161, 0, t129, 0, 0, 0.2e1 * t45 * t121 + 0.2e1 * t49 * t34, 0.2e1 * t46 * t121 - 0.2e1 * t49 * t33, -0.2e1 * t19 * t33 - 0.2e1 * t20 * t34 + 0.2e1 * t86 * t45 + 0.2e1 * t153, 0.2e1 * t49 * t121 - 0.2e1 * t20 * t86 + 0.2e1 * t155, -0.2e1 * t22 - 0.2e1 * t114, 0.4e1 * t46 * t128 + 0.2e1 * t44 * t157, -0.2e1 * t45 * t123 + 0.2e1 * t138, -0.2e1 * t21 + 0.2e1 * t114, -0.2e1 * t102 * t45 - 0.2e1 * t46 * t141, t129, 0.2e1 * t102 * t19 + 0.2e1 * t3 * t45 + 0.2e1 * t7 * t34 + 0.2e1 * t46 * t5, -0.2e1 * t14 * t19 + 0.2e1 * t85 * t153 + 0.2e1 * t2 * t45 - 0.2e1 * t8 * t34, 0.2e1 * t109 * t33 + 0.2e1 * t156 * t46, -0.2e1 * t8 * t2 + 0.2e1 * t7 * t3 + 0.2e1 * t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43 * t103 - t42 * t135 - t37 * t61 - t38 * t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20 * t33 - t86 * t46 + t107, 0, 0, 0, 0, 0, 0, 0, t161 * t85 + t138, 0, t1 * t46 - t158 * t33 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t99 + 0.2e1 * t91, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t142 + 0.2e1 * t144, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t21 - 0.2e1 * t22 + 0.2e1 * t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, -t103, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t33, 0, t121, 0, 0, 0, 0, 0, 0, -t13, -t15, t12, -t156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, 0, -t135, 0, t38, t37, 0, 0, 0, 0, -t33, 0, -t34, 0, -t6, t86 (t146 * t33 - t34 * t84 + t96) * pkin(4), t20 * t113 - t6 * t124 + t19 * t125 - t86 * t150, -t11, t9, t15, t11, -t13, 0, t17 + (-t105 * qJD(6) - t6) * t85 + t89 * t83, t105 * t130 + t89 * t85 + t148, t1, t6 * t75 + (t158 * t146 + t19 * t84) * t133 + t1 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, t103, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t33, 0 (-t146 * t34 - t33 * t84 + (t146 * t46 + t143) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, t13, t15, -t12, t34 * t75 - t74 * t119 + (t46 * t98 + t143) * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t125, -0.2e1 * t113, 0, 0, t67, t62, 0, t68, 0, 0, 0.2e1 * t104, 0.2e1 * t136, 0.2e1 * t58, 0.2e1 * (t74 * t98 + t75 * t84) * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, 0, -t34, 0, -t6, t86, 0, 0, -t11, t9, t15, t11, -t13, 0, t17 + (pkin(5) * t33 - pkin(9) * t34) * t83 + (-t6 + (-pkin(5) * t46 - pkin(9) * t45) * qJD(6)) * t85, t14 * pkin(5) + t13 * pkin(9) + t148, t1, -t6 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t33, 0, 0, 0, 0, 0, 0, 0, 0, t13, t15, -t12, -pkin(9) * t119 - t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t125, -t113, 0, 0, t67, t62, 0, t68, 0, 0, t104 - t127, -t126 + t136, t58 (-pkin(5) * t84 + pkin(9) * t98) * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t62, 0, t68, 0, 0, -0.2e1 * t127, -0.2e1 * t126, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, 0, -t102, t34, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130, -t76, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t130, 0, -t83 * t113 - t74 * t76, -t85 * t113 + t74 * t130, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t130, 0, -pkin(9) * t76, pkin(9) * t130, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
