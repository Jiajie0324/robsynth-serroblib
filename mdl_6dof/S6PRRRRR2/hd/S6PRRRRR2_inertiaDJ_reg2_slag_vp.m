% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRRRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR2_inertiaDJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:45:22
% EndTime: 2019-03-09 00:45:38
% DurationCPUTime: 5.73s
% Computational Cost: add. (7640->394), mult. (18340->674), div. (0->0), fcn. (18279->12), ass. (0->213)
t162 = sin(qJ(3));
t289 = cos(qJ(4));
t235 = t289 * t162;
t291 = -pkin(9) - pkin(8);
t133 = t291 * t235;
t161 = sin(qJ(4));
t165 = cos(qJ(3));
t262 = t161 * t165;
t303 = t291 * t262 + t133;
t132 = t235 + t262;
t296 = qJD(3) + qJD(4);
t100 = t296 * t132;
t234 = t289 * t165;
t201 = t291 * t234;
t240 = t161 * t291;
t180 = t162 * t240 - t201;
t252 = t162 * qJD(3);
t245 = pkin(3) * t252;
t222 = qJD(4) * t289;
t263 = t161 * t162;
t301 = -qJD(3) * t234 + t296 * t263;
t99 = -t165 * t222 + t301;
t302 = -t100 * pkin(4) - t99 * pkin(10) + qJD(5) * t180 - t245;
t130 = -t234 + t263;
t152 = -t165 * pkin(3) - pkin(2);
t189 = t130 * pkin(4) - t132 * pkin(10) + t152;
t294 = -(t165 * t240 + t133) * qJD(3) - t303 * qJD(4);
t300 = -qJD(5) * t189 + t294;
t160 = sin(qJ(5));
t156 = t160 ^ 2;
t164 = cos(qJ(5));
t157 = t164 ^ 2;
t259 = t156 - t157;
t297 = t259 * qJD(5);
t288 = cos(qJ(6));
t219 = t288 * qJD(6);
t299 = t288 * qJD(5) + t219;
t153 = qJD(5) * t164;
t277 = t160 * t99;
t194 = t132 * t153 - t277;
t254 = qJD(5) * t160;
t230 = t132 * t254;
t275 = t164 * t99;
t193 = t230 + t275;
t232 = t288 * t164;
t159 = sin(qJ(6));
t264 = t159 * t160;
t298 = t232 - t264;
t295 = qJD(5) + qJD(6);
t158 = sin(pkin(6));
t163 = sin(qJ(2));
t266 = t158 * t163;
t270 = cos(pkin(6));
t190 = t162 * t266 - t270 * t165;
t184 = t190 * qJD(3);
t166 = cos(qJ(2));
t257 = qJD(2) * t166;
t226 = t158 * t257;
t101 = t165 * t226 - t184;
t120 = t270 * t162 + t165 * t266;
t175 = t120 * qJD(3) + t162 * t226;
t292 = -t120 * t252 + t175 * t162 + (t101 + t184) * t165;
t290 = -pkin(11) - pkin(10);
t287 = pkin(3) * t161;
t286 = t100 * pkin(5);
t285 = t164 * pkin(5);
t81 = t289 * t120 - t161 * t190;
t42 = t81 * qJD(4) + t161 * t101 + t289 * t175;
t183 = t289 * t190;
t80 = t120 * t161 + t183;
t32 = t80 * t42;
t149 = pkin(10) + t287;
t284 = -pkin(11) - t149;
t66 = -qJD(4) * t201 + t301 * t291;
t37 = t194 * pkin(5) + t66;
t268 = t132 * t160;
t77 = pkin(5) * t268 - t303;
t233 = t288 * t160;
t131 = t159 * t164 + t233;
t98 = t295 * t131;
t283 = -t298 * t37 + t77 * t98;
t97 = -t164 * t299 + t264 * t295;
t282 = t37 * t131 - t77 * t97;
t281 = -t153 * t303 + t66 * t160;
t280 = pkin(3) * qJD(4);
t279 = t303 * t66;
t278 = t132 * t99;
t276 = t161 * t80;
t59 = t160 * t189 + t164 * t180;
t256 = qJD(4) * t161;
t244 = pkin(3) * t256;
t246 = pkin(5) * t254;
t134 = t244 + t246;
t249 = t289 * pkin(3);
t150 = -t249 - pkin(4);
t138 = t150 - t285;
t274 = -t134 * t298 + t138 * t98;
t273 = t134 * t131 - t138 * t97;
t151 = -pkin(4) - t285;
t272 = t151 * t98 - t246 * t298;
t271 = t131 * t246 - t151 * t97;
t267 = t132 * t164;
t265 = t158 * t166;
t261 = t164 * t100;
t260 = t150 * t153 + t160 * t244;
t258 = qJD(2) * t163;
t253 = qJD(6) * t159;
t251 = t165 * qJD(3);
t250 = -0.2e1 * pkin(2) * qJD(3);
t75 = 0.2e1 * t130 * t100;
t248 = pkin(4) * t254;
t247 = pkin(4) * t153;
t243 = pkin(5) * t253;
t242 = t160 * t275;
t241 = t159 * t290;
t239 = t80 * t254;
t238 = t132 * t264;
t237 = t160 * t289;
t236 = t164 * t289;
t231 = t166 * t252;
t227 = t158 * t258;
t225 = t160 * t153;
t224 = t162 * t251;
t58 = -t160 * t180 + t164 * t189;
t170 = t130 * pkin(5) - pkin(11) * t267 + t58;
t168 = t288 * t170;
t51 = -pkin(11) * t268 + t59;
t22 = -t159 * t51 + t168;
t169 = t159 * t170;
t23 = t288 * t51 + t169;
t19 = t300 * t160 - t302 * t164;
t167 = pkin(11) * t193 + t19 + t286;
t18 = t302 * t160 + t300 * t164;
t171 = -pkin(11) * t194 - t18;
t4 = -qJD(6) * t168 - t159 * t167 - t288 * t171 + t51 * t253;
t5 = -qJD(6) * t169 - t159 * t171 + t288 * t167 - t51 * t219;
t223 = -t5 * t131 + t22 * t97 - t23 * t98 - t298 * t4;
t221 = t160 * t284;
t218 = qJD(5) * t284;
t154 = t164 * pkin(11);
t124 = t149 * t164 + t154;
t215 = pkin(3) * t222;
t202 = t164 * t215;
t178 = t160 * t218 + t202;
t203 = t160 * t215;
t179 = t164 * t218 - t203;
t198 = t288 * t221;
t45 = -qJD(6) * t198 + t124 * t253 - t159 * t179 - t288 * t178;
t208 = t159 * t221;
t46 = -qJD(6) * t208 - t124 * t219 - t159 * t178 + t288 * t179;
t90 = -t159 * t124 + t198;
t91 = t288 * t124 + t208;
t217 = -t46 * t131 - t298 * t45 + t90 * t97 - t91 * t98;
t139 = t164 * pkin(10) + t154;
t211 = t290 * t288;
t200 = t160 * t211;
t105 = -t159 * t139 + t200;
t213 = t160 * t241;
t107 = t288 * t139 + t213;
t64 = t139 * t253 - t241 * t153 - t200 * t295;
t65 = -t107 * qJD(6) + (t164 * t211 - t213) * qJD(5);
t216 = t105 * t97 - t107 * t98 - t65 * t131 - t298 * t64;
t214 = pkin(5) * t219;
t127 = t132 ^ 2;
t210 = t127 * t225;
t209 = t158 ^ 2 * t163 * t257;
t206 = -t303 * t42 + t80 * t66;
t205 = t160 * t59 + t164 * t58;
t195 = t160 * t265 - t164 * t81;
t196 = t160 * t81 + t164 * t265;
t204 = -t160 * t195 - t164 * t196;
t199 = t130 * t149 - t132 * t150;
t197 = t150 * t254 - t164 * t244;
t36 = -t159 * t196 - t195 * t288;
t28 = t80 * t153 + t160 * t42;
t29 = -t164 * t42 + t239;
t192 = t130 * t254 - t261;
t191 = (t156 + t157) * t289;
t186 = (-t289 * t130 + t132 * t161) * qJD(4);
t6 = -t205 * qJD(5) - t160 * t19 - t164 * t18;
t41 = qJD(4) * t183 - t289 * t101 + t120 * t256 + t161 * t175;
t26 = t196 * qJD(5) - t160 * t227 + t164 * t41;
t27 = t195 * qJD(5) + t160 * t41 + t164 * t227;
t9 = -t204 * qJD(5) - t160 * t27 - t164 * t26;
t176 = pkin(3) * t186 - t100 * t149 - t150 * t99;
t142 = -0.2e1 * t225;
t141 = 0.2e1 * t225;
t128 = -0.2e1 * t297;
t119 = t191 * t280;
t95 = t303 * t254;
t84 = t132 * t232 - t238;
t83 = t131 * t132;
t76 = -0.2e1 * t131 * t97;
t74 = -0.2e1 * t298 * t98;
t73 = t100 * t160 + t130 * t153;
t57 = t132 * t297 + t242;
t50 = t100 * t298 - t130 * t98;
t49 = t100 * t131 - t130 * t97;
t48 = -0.4e1 * t132 * t225 + t259 * t99;
t47 = -0.2e1 * t131 * t98 - 0.2e1 * t298 * t97;
t43 = (t288 * t97 - t159 * t98 + (t131 * t159 + t288 * t298) * qJD(6)) * pkin(5);
t35 = t159 * t195 - t196 * t288;
t31 = -t99 * t233 - t159 * t230 - qJD(6) * t238 + (t132 * t299 - t159 * t99) * t164;
t30 = t98 * t132 + t298 * t99;
t21 = t131 * t42 - t80 * t97;
t20 = -t298 * t42 + t80 * t98;
t15 = -t298 * t31 + t83 * t98;
t14 = -t131 * t30 - t84 * t97;
t10 = -t131 * t31 - t298 * t30 + t83 * t97 - t84 * t98;
t8 = -t36 * qJD(6) + t159 * t26 + t288 * t27;
t7 = -t159 * t27 - t195 * t253 + t196 * t219 + t288 * t26;
t1 = -t131 * t8 - t298 * t7 + t35 * t97 - t36 * t98;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t120 * t101 + 0.2e1 * t175 * t190 - 0.2e1 * t209, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t81 * t41 - 0.2e1 * t209 + 0.2e1 * t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t195 * t26 - 0.2e1 * t196 * t27 + 0.2e1 * t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t35 * t8 - 0.2e1 * t36 * t7 + 0.2e1 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t227, -t226, 0, 0, 0, 0, 0, 0, 0, 0 (-t165 * t258 - t231) * t158 (t162 * t258 - t166 * t251) * t158, t292, -pkin(2) * t227 + pkin(8) * t292, 0, 0, 0, 0, 0, 0 (-t100 * t166 + t130 * t258) * t158 (t132 * t258 + t166 * t99) * t158, -t100 * t81 + t130 * t41 + t132 * t42 - t80 * t99, -pkin(3) * t158 * t231 + t152 * t227 - t180 * t41 - t294 * t81 + t206, 0, 0, 0, 0, 0, 0, -t100 * t196 + t130 * t27 + t132 * t28 - t80 * t277, t100 * t195 + t130 * t26 - t132 * t29 - t80 * t275, t204 * t99 + (t160 * t26 - t164 * t27 + (-t160 * t196 + t164 * t195) * qJD(5)) * t132, t18 * t195 - t19 * t196 - t26 * t59 + t27 * t58 + t206, 0, 0, 0, 0, 0, 0, t100 * t35 + t130 * t8 + t31 * t80 + t42 * t83, -t100 * t36 + t130 * t7 - t30 * t80 + t42 * t84, t30 * t35 - t31 * t36 + t7 * t83 - t8 * t84, t22 * t8 - t23 * t7 + t35 * t5 - t36 * t4 + t37 * t80 + t42 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t224, 0.2e1 * (-t162 ^ 2 + t165 ^ 2) * qJD(3), 0, -0.2e1 * t224, 0, 0, t162 * t250, t165 * t250, 0, 0, -0.2e1 * t278, -0.2e1 * t100 * t132 + 0.2e1 * t130 * t99, 0, t75, 0, 0, 0.2e1 * t100 * t152 + 0.2e1 * t130 * t245, 0.2e1 * t132 * t245 - 0.2e1 * t152 * t99, -0.2e1 * t100 * t180 + 0.2e1 * t130 * t294 + 0.2e1 * t66 * t132 + 0.2e1 * t303 * t99, 0.2e1 * t152 * t245 - 0.2e1 * t180 * t294 - 0.2e1 * t279, -0.2e1 * t157 * t278 - 0.2e1 * t210, 0.2e1 * t127 * t297 + 0.4e1 * t132 * t242, -0.2e1 * t130 * t193 + 0.2e1 * t132 * t261, -0.2e1 * t156 * t278 + 0.2e1 * t210, -0.2e1 * t100 * t268 - 0.2e1 * t130 * t194, t75, 0.2e1 * t100 * t58 + 0.2e1 * t130 * t19 - 0.2e1 * t194 * t303 + 0.2e1 * t268 * t66, -0.2e1 * t100 * t59 + 0.2e1 * t130 * t18 + 0.2e1 * t193 * t303 + 0.2e1 * t267 * t66, 0.2e1 * t205 * t99 + 0.2e1 * (t160 * t18 - t164 * t19 + (t160 * t58 - t164 * t59) * qJD(5)) * t132, -0.2e1 * t18 * t59 + 0.2e1 * t19 * t58 - 0.2e1 * t279, -0.2e1 * t84 * t30, 0.2e1 * t30 * t83 - 0.2e1 * t31 * t84, 0.2e1 * t100 * t84 - 0.2e1 * t130 * t30, 0.2e1 * t83 * t31, -0.2e1 * t100 * t83 - 0.2e1 * t130 * t31, t75, 0.2e1 * t100 * t22 + 0.2e1 * t130 * t5 + 0.2e1 * t31 * t77 + 0.2e1 * t37 * t83, -0.2e1 * t100 * t23 + 0.2e1 * t130 * t4 - 0.2e1 * t30 * t77 + 0.2e1 * t37 * t84, 0.2e1 * t22 * t30 - 0.2e1 * t23 * t31 + 0.2e1 * t4 * t83 - 0.2e1 * t5 * t84, 0.2e1 * t22 * t5 - 0.2e1 * t23 * t4 + 0.2e1 * t37 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t101, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t41, 0 (-t289 * t42 - t161 * t41 + (t289 * t81 + t276) * qJD(4)) * pkin(3), 0, 0, 0, 0, 0, 0, t29, t28, t9, t42 * t150 + (-t195 * t236 + t196 * t237 + t276) * t280 + t9 * t149, 0, 0, 0, 0, 0, 0, t20, t21, t1, t134 * t80 + t138 * t42 + t35 * t46 - t36 * t45 - t7 * t91 + t8 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, 0, -t252, 0, -pkin(8) * t251, pkin(8) * t252, 0, 0, 0, 0, -t99, 0, -t100, 0, -t66, t294 (-t161 * t100 + t289 * t99 + t186) * pkin(3), t180 * t215 - t244 * t303 - t249 * t66 - t287 * t294, -t57, t48, t73, t57, -t192, 0, -t95 + (-qJD(5) * t199 - t66) * t164 + t176 * t160, t164 * t176 + t199 * t254 + t281, t6, t66 * t150 + (-t161 * t303 + t236 * t59 - t237 * t58) * t280 + t6 * t149, t14, t10, t49, t15, t50, 0, t100 * t90 + t130 * t46 + t134 * t83 + t138 * t31 + t283, -t100 * t91 + t130 * t45 + t134 * t84 - t138 * t30 + t282, t30 * t90 - t31 * t91 + t45 * t83 - t46 * t84 + t223, t134 * t77 + t138 * t37 + t22 * t46 - t23 * t45 - t4 * t91 + t5 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t244, -0.2e1 * t215, 0, 0, t141, t128, 0, t142, 0, 0, 0.2e1 * t197, 0.2e1 * t260, 0.2e1 * t119, 0.2e1 * (t149 * t191 + t150 * t161) * t280, t76, t47, 0, t74, 0, 0, 0.2e1 * t274, 0.2e1 * t273, 0.2e1 * t217, 0.2e1 * t134 * t138 - 0.2e1 * t45 * t91 + 0.2e1 * t46 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t41, 0, 0, 0, 0, 0, 0, 0, 0, t29, t28, t9, -pkin(4) * t42 + pkin(10) * t9, 0, 0, 0, 0, 0, 0, t20, t21, t1, pkin(5) * t239 + t105 * t8 - t107 * t7 + t151 * t42 + t35 * t65 - t36 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, 0, -t100, 0, -t66, t294, 0, 0, -t57, t48, t73, t57, -t192, 0, -t95 + (pkin(4) * t99 - pkin(10) * t100) * t160 + (-t66 + (-pkin(4) * t132 - pkin(10) * t130) * qJD(5)) * t164, pkin(4) * t193 + pkin(10) * t192 + t281, t6, -pkin(4) * t66 + pkin(10) * t6, t14, t10, t49, t15, t50, 0, t100 * t105 + t130 * t65 + t151 * t31 + t246 * t83 + t283, -t100 * t107 + t130 * t64 - t151 * t30 + t246 * t84 + t282, t105 * t30 - t107 * t31 + t64 * t83 - t65 * t84 + t223, t105 * t5 - t107 * t4 + t151 * t37 + t22 * t65 - t23 * t64 + t246 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t244, -t215, 0, 0, t141, t128, 0, t142, 0, 0, t197 - t248, -t247 + t260, t119 (-pkin(4) * t161 + pkin(10) * t191) * t280, t76, t47, 0, t74, 0, 0, t272 + t274, t271 + t273, t216 + t217, t105 * t46 - t107 * t45 + t134 * t151 + t138 * t246 - t64 * t91 + t65 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t128, 0, t142, 0, 0, -0.2e1 * t248, -0.2e1 * t247, 0, 0, t76, t47, 0, t74, 0, 0, 0.2e1 * t272, 0.2e1 * t271, 0.2e1 * t216, 0.2e1 * t105 * t65 - 0.2e1 * t107 * t64 + 0.2e1 * t151 * t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, 0 (t288 * t8 - t159 * t7 + (-t159 * t35 + t288 * t36) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t193, 0, -t194, t100, t19, t18, 0, 0, 0, 0, -t30, 0, -t31, t100, -t130 * t243 + t288 * t286 + t5 (-t100 * t159 - t130 * t219) * pkin(5) + t4 (t288 * t30 - t159 * t31 + (t159 * t84 - t288 * t83) * qJD(6)) * pkin(5) (t288 * t5 - t159 * t4 + (-t159 * t22 + t288 * t23) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, 0, -t254, 0, -t149 * t153 - t203, t149 * t254 - t202, 0, 0, 0, 0, -t97, 0, -t98, 0, t46, t45, t43 (t288 * t46 - t159 * t45 + (-t159 * t90 + t288 * t91) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, 0, -t254, 0, -pkin(10) * t153, pkin(10) * t254, 0, 0, 0, 0, -t97, 0, -t98, 0, t65, t64, t43 (t288 * t65 - t159 * t64 + (-t105 * t159 + t288 * t107) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t243, -0.2e1 * t214, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, 0, -t31, t100, t5, t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, 0, -t98, 0, t46, t45, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, 0, -t98, 0, t65, t64, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t243, -t214, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t2;
