% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRRRR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:44:43
% EndTime: 2019-05-05 10:45:00
% DurationCPUTime: 7.62s
% Computational Cost: add. (47335->515), mult. (93076->754), div. (0->0), fcn. (70148->14), ass. (0->316)
t292 = sin(qJ(6));
t295 = sin(qJ(3));
t299 = cos(qJ(4));
t294 = sin(qJ(4));
t300 = cos(qJ(3));
t347 = t294 * t300;
t258 = (t295 * t299 + t347) * qJD(2);
t285 = qJD(3) + qJD(4);
t293 = sin(qJ(5));
t298 = cos(qJ(5));
t239 = t258 * t293 - t298 * t285;
t241 = t258 * t298 + t285 * t293;
t297 = cos(qJ(6));
t212 = t297 * t239 + t241 * t292;
t214 = -t239 * t292 + t241 * t297;
t176 = t214 * t212;
t337 = qJD(2) * qJD(3);
t326 = t300 * t337;
t336 = t295 * qJDD(2);
t262 = t326 + t336;
t282 = t300 * qJDD(2);
t327 = t295 * t337;
t263 = t282 - t327;
t318 = t294 * t262 - t299 * t263;
t219 = -qJD(4) * t258 - t318;
t218 = qJDD(5) - t219;
t217 = qJDD(6) + t218;
t382 = -t176 + t217;
t390 = t292 * t382;
t216 = t241 * t239;
t380 = -t216 + t218;
t389 = t293 * t380;
t341 = qJD(2) * t295;
t256 = -t299 * t300 * qJD(2) + t294 * t341;
t235 = t258 * t256;
t335 = qJDD(3) + qJDD(4);
t379 = -t235 + t335;
t388 = t294 * t379;
t387 = t297 * t382;
t386 = t298 * t380;
t385 = t299 * t379;
t289 = sin(pkin(6));
t290 = cos(pkin(6));
t364 = sin(pkin(12));
t365 = cos(pkin(12));
t310 = g(1) * t364 - g(2) * t365;
t308 = t290 * t310;
t342 = -g(3) + qJDD(1);
t384 = t289 * t342 + t308;
t267 = -g(1) * t365 - g(2) * t364;
t296 = sin(qJ(2));
t301 = cos(qJ(2));
t228 = t301 * t267 + t296 * t384;
t383 = qJDD(2) * pkin(8) + t228;
t376 = qJD(2) ^ 2;
t305 = -pkin(2) * t376 + t383;
t304 = t295 * t305;
t307 = -t289 * t310 + t290 * t342;
t271 = qJD(3) * pkin(3) - pkin(9) * t341;
t287 = t300 ^ 2;
t306 = t295 * t307;
t178 = t300 * t383 + t306 + t263 * pkin(9) - qJD(3) * t271 + (-pkin(2) * t300 - pkin(3) * t287) * t376;
t345 = t299 * t178;
t362 = qJDD(3) * pkin(3);
t372 = t262 * pkin(9);
t139 = t345 + t294 * (-t304 + t362 - t372) + ((pkin(3) * t341 + pkin(9) * qJD(3)) * qJD(2) + t307) * t347;
t233 = pkin(4) * t256 - pkin(10) * t258;
t377 = t285 ^ 2;
t120 = -pkin(4) * t377 + pkin(10) * t335 - t256 * t233 + t139;
t316 = t296 * t267 - t301 * t384;
t223 = -qJDD(2) * pkin(2) - t376 * pkin(8) + t316;
t284 = t287 * t376;
t196 = -t263 * pkin(3) - pkin(9) * t284 + t271 * t341 + t223;
t220 = -qJD(4) * t256 + t262 * t299 + t263 * t294;
t248 = t285 * t256;
t205 = t220 - t248;
t137 = -t205 * pkin(10) + (t258 * t285 - t219) * pkin(4) + t196;
t84 = t293 * t120 - t298 * t137;
t85 = t298 * t120 + t293 * t137;
t46 = t293 * t84 + t298 * t85;
t311 = -t298 * t220 - t293 * t335;
t187 = -t239 * qJD(5) - t311;
t319 = t293 * t220 - t298 * t335;
t313 = qJD(5) * t241 + t319;
t133 = -t212 * qJD(6) + t297 * t187 - t292 * t313;
t252 = qJD(5) + t256;
t250 = qJD(6) + t252;
t194 = t250 * t212;
t381 = -t194 + t133;
t226 = t252 * t239;
t173 = t226 + t187;
t321 = t292 * t187 + t297 * t313;
t103 = (qJD(6) - t250) * t214 + t321;
t169 = (qJD(5) - t252) * t241 + t319;
t210 = t212 ^ 2;
t211 = t214 ^ 2;
t378 = t239 ^ 2;
t238 = t241 ^ 2;
t249 = t250 ^ 2;
t251 = t252 ^ 2;
t254 = t256 ^ 2;
t255 = t258 ^ 2;
t57 = pkin(5) * t380 - t173 * pkin(11) - t84;
t222 = pkin(5) * t252 - pkin(11) * t241;
t60 = -pkin(5) * t378 - pkin(11) * t313 - t252 * t222 + t85;
t30 = t292 * t60 - t297 * t57;
t31 = t292 * t57 + t297 * t60;
t17 = t292 * t31 - t297 * t30;
t375 = pkin(5) * t17;
t106 = t194 + t133;
t66 = -t103 * t292 - t106 * t297;
t374 = pkin(5) * t66;
t373 = pkin(4) * t294;
t371 = t17 * t293;
t370 = t17 * t298;
t274 = t295 * t376 * t300;
t198 = -t300 * t307 + t304;
t303 = pkin(9) * t326 - t198 - t372;
t138 = t294 * t178 - t299 * (pkin(3) * t274 + t303 + t362);
t119 = -t335 * pkin(4) - t377 * pkin(10) + t258 * t233 + t138;
t87 = pkin(5) * t313 - pkin(11) * t378 + t241 * t222 + t119;
t369 = t292 * t87;
t90 = -t138 * t299 + t139 * t294;
t368 = t295 * t90;
t367 = t297 * t87;
t366 = -pkin(4) * t119 + pkin(10) * t46;
t149 = t176 + t217;
t361 = t149 * t292;
t360 = t149 * t297;
t180 = t216 + t218;
t359 = t180 * t293;
t358 = t180 * t298;
t357 = t196 * t294;
t356 = t196 * t299;
t231 = t235 + t335;
t355 = t231 * t294;
t354 = t231 * t299;
t353 = t250 * t292;
t352 = t250 * t297;
t351 = t252 * t293;
t350 = t252 * t298;
t349 = t285 * t294;
t348 = t285 * t299;
t115 = t293 * t119;
t268 = qJDD(3) + t274;
t346 = t295 * t268;
t116 = t298 * t119;
t269 = qJDD(3) - t274;
t344 = t300 * t269;
t339 = qJD(5) + t252;
t334 = t294 * t176;
t333 = t299 * t176;
t332 = t294 * t216;
t331 = t299 * t216;
t209 = -t238 - t251;
t147 = -t209 * t293 - t358;
t174 = t239 * t339 + t311;
t330 = pkin(4) * t174 + pkin(10) * t147 + t115;
t200 = -t251 - t378;
t143 = t200 * t298 - t389;
t171 = -t241 * t339 - t319;
t329 = pkin(4) * t171 + pkin(10) * t143 - t116;
t328 = -pkin(4) * t299 - pkin(3);
t18 = t292 * t30 + t297 * t31;
t144 = -t210 - t211;
t68 = -t103 * t297 + t106 * t292;
t11 = -pkin(5) * t144 + pkin(11) * t68 + t18;
t13 = -pkin(11) * t66 - t17;
t35 = -t293 * t66 + t298 * t68;
t324 = -pkin(4) * t144 + pkin(10) * t35 + t298 * t11 + t293 * t13;
t102 = (qJD(6) + t250) * t214 + t321;
t162 = -t249 - t210;
t111 = t162 * t297 - t390;
t41 = -pkin(5) * t102 + pkin(11) * t111 - t367;
t110 = t162 * t292 + t387;
t53 = -pkin(11) * t110 + t369;
t73 = -t110 * t293 + t111 * t298;
t323 = -pkin(4) * t102 + pkin(10) * t73 + t293 * t53 + t298 * t41;
t182 = -t211 - t249;
t122 = -t182 * t292 - t360;
t43 = -pkin(5) * t381 + pkin(11) * t122 + t369;
t121 = t182 * t297 - t361;
t55 = -pkin(11) * t121 + t367;
t77 = -t121 * t293 + t122 * t298;
t322 = -pkin(4) * t381 + pkin(10) * t77 + t293 * t55 + t298 * t43;
t91 = t138 * t294 + t299 * t139;
t199 = t300 * t305 + t306;
t158 = t198 * t295 + t300 * t199;
t126 = -t169 * t298 + t173 * t293;
t189 = t238 + t378;
t317 = pkin(4) * t189 + pkin(10) * t126 + t46;
t45 = t293 * t85 - t298 * t84;
t37 = -t119 * t299 + t294 * t46;
t38 = t119 * t294 + t299 * t46;
t19 = -t295 * t37 + t300 * t38;
t315 = pkin(5) * t110 - t30;
t15 = -pkin(5) * t87 + pkin(11) * t18;
t9 = t18 * t298 - t371;
t314 = -pkin(4) * t87 + pkin(10) * t9 - pkin(11) * t371 + t298 * t15;
t312 = pkin(5) * t121 - t31;
t309 = (-qJD(4) + t285) * t258 - t318;
t302 = qJD(3) ^ 2;
t286 = t295 ^ 2;
t283 = t286 * t376;
t273 = -t284 - t302;
t272 = -t283 - t302;
t266 = t283 + t284;
t265 = (t286 + t287) * qJDD(2);
t264 = t282 - 0.2e1 * t327;
t261 = 0.2e1 * t326 + t336;
t246 = -t255 + t377;
t245 = t254 - t377;
t244 = -t255 - t377;
t243 = -t272 * t295 - t344;
t242 = t273 * t300 - t346;
t234 = t255 - t254;
t229 = -t377 - t254;
t225 = -t238 + t251;
t224 = -t251 + t378;
t221 = -t254 - t255;
t215 = t238 - t378;
t208 = -t244 * t294 - t354;
t207 = t244 * t299 - t355;
t206 = t220 + t248;
t201 = (qJD(4) + t285) * t258 + t318;
t193 = t229 * t299 - t388;
t192 = t229 * t294 + t385;
t191 = -t211 + t249;
t190 = t210 - t249;
t184 = (-t239 * t298 + t241 * t293) * t252;
t183 = (-t239 * t293 - t241 * t298) * t252;
t175 = t211 - t210;
t172 = -t226 + t187;
t166 = t187 * t298 - t241 * t351;
t165 = t187 * t293 + t241 * t350;
t164 = t239 * t350 + t293 * t313;
t163 = t239 * t351 - t298 * t313;
t161 = -t207 * t295 + t208 * t300;
t160 = t206 * t294 + t299 * t309;
t159 = -t206 * t299 + t294 * t309;
t157 = t224 * t298 - t359;
t156 = -t225 * t293 + t386;
t155 = t224 * t293 + t358;
t154 = t225 * t298 + t389;
t153 = (-t212 * t297 + t214 * t292) * t250;
t152 = (-t212 * t292 - t214 * t297) * t250;
t151 = -t192 * t295 + t193 * t300;
t146 = t209 * t298 - t359;
t142 = t200 * t293 + t386;
t132 = -qJD(6) * t214 - t321;
t131 = t190 * t297 - t361;
t130 = -t191 * t292 + t387;
t129 = t190 * t292 + t360;
t128 = t191 * t297 + t390;
t127 = t171 * t298 - t172 * t293;
t125 = t171 * t293 + t172 * t298;
t124 = -t169 * t293 - t173 * t298;
t114 = -t159 * t295 + t160 * t300;
t113 = t147 * t299 - t174 * t294;
t112 = t147 * t294 + t174 * t299;
t109 = t143 * t299 - t171 * t294;
t108 = t143 * t294 + t171 * t299;
t99 = t133 * t297 - t214 * t353;
t98 = t133 * t292 + t214 * t352;
t97 = -t132 * t292 + t212 * t352;
t96 = t132 * t297 + t212 * t353;
t95 = -t152 * t293 + t153 * t298;
t94 = t152 * t298 + t153 * t293;
t93 = t126 * t299 - t189 * t294;
t92 = t126 * t294 + t189 * t299;
t89 = -pkin(10) * t146 + t116;
t88 = -pkin(10) * t142 + t115;
t81 = -t129 * t293 + t131 * t298;
t80 = -t128 * t293 + t130 * t298;
t79 = t129 * t298 + t131 * t293;
t78 = t128 * t298 + t130 * t293;
t76 = t121 * t298 + t122 * t293;
t74 = -t112 * t295 + t113 * t300;
t72 = t110 * t298 + t111 * t293;
t70 = -t108 * t295 + t109 * t300;
t69 = -t102 * t297 - t292 * t381;
t67 = -t102 * t292 + t297 * t381;
t65 = -t293 * t98 + t298 * t99;
t64 = -t293 * t96 + t298 * t97;
t63 = t293 * t99 + t298 * t98;
t62 = t293 * t97 + t298 * t96;
t61 = -pkin(4) * t146 + t85;
t59 = -pkin(4) * t142 + t84;
t58 = -t295 * t92 + t300 * t93;
t51 = t300 * t91 - t368;
t50 = t294 * t381 + t299 * t77;
t49 = t294 * t77 - t299 * t381;
t48 = t102 * t294 + t299 * t73;
t47 = -t102 * t299 + t294 * t73;
t39 = -pkin(10) * t124 - t45;
t36 = -t293 * t67 + t298 * t69;
t34 = t293 * t69 + t298 * t67;
t33 = t293 * t68 + t298 * t66;
t28 = t144 * t294 + t299 * t35;
t27 = -t144 * t299 + t294 * t35;
t26 = -t295 * t49 + t300 * t50;
t25 = -t295 * t47 + t300 * t48;
t24 = -pkin(4) * t33 - t374;
t23 = -pkin(4) * t76 - t312;
t22 = -pkin(10) * t76 - t293 * t43 + t298 * t55;
t21 = -pkin(4) * t72 - t315;
t20 = -pkin(10) * t72 - t293 * t41 + t298 * t53;
t16 = -t27 * t295 + t28 * t300;
t8 = t18 * t293 + t370;
t6 = t294 * t87 + t299 * t9;
t5 = t294 * t9 - t299 * t87;
t4 = -pkin(10) * t33 - t11 * t293 + t13 * t298;
t3 = -pkin(4) * t8 - t375;
t2 = -pkin(10) * t8 - pkin(11) * t370 - t15 * t293;
t1 = -t295 * t5 + t300 * t6;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t342, 0, 0, 0, 0, 0, 0, (qJDD(2) * t301 - t296 * t376) * t289, (-qJDD(2) * t296 - t301 * t376) * t289, 0, t290 ^ 2 * t342 + (t296 * t228 - t301 * t316 - t308) * t289, 0, 0, 0, 0, 0, 0, t290 * (t268 * t300 + t273 * t295) + (t242 * t296 + t264 * t301) * t289, t290 * (-t269 * t295 + t272 * t300) + (t243 * t296 - t261 * t301) * t289, (t265 * t296 + t266 * t301) * t289, t290 * (-t198 * t300 + t199 * t295) + (t158 * t296 - t223 * t301) * t289, 0, 0, 0, 0, 0, 0, t290 * (t192 * t300 + t193 * t295) + (t151 * t296 - t201 * t301) * t289, t290 * (t207 * t300 + t208 * t295) + (t161 * t296 - t205 * t301) * t289, t290 * (t159 * t300 + t160 * t295) + (t114 * t296 - t221 * t301) * t289, t290 * (t295 * t91 + t300 * t90) + (-t196 * t301 + t296 * t51) * t289, 0, 0, 0, 0, 0, 0, t290 * (t108 * t300 + t109 * t295) + (-t142 * t301 + t296 * t70) * t289, t290 * (t112 * t300 + t113 * t295) + (-t146 * t301 + t296 * t74) * t289, t290 * (t295 * t93 + t300 * t92) + (-t124 * t301 + t296 * t58) * t289, t290 * (t295 * t38 + t300 * t37) + (t19 * t296 - t301 * t45) * t289, 0, 0, 0, 0, 0, 0, t290 * (t295 * t48 + t300 * t47) + (t25 * t296 - t301 * t72) * t289, t290 * (t295 * t50 + t300 * t49) + (t26 * t296 - t301 * t76) * t289, t290 * (t27 * t300 + t28 * t295) + (t16 * t296 - t301 * t33) * t289, t290 * (t295 * t6 + t300 * t5) + (t1 * t296 - t301 * t8) * t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t316, -t228, 0, 0, (t262 + t326) * t295, t261 * t300 + t264 * t295, t346 + t300 * (-t283 + t302), (t263 - t327) * t300, t295 * (t284 - t302) + t344, 0, pkin(2) * t264 + pkin(8) * t242 - t223 * t300, -pkin(2) * t261 + pkin(8) * t243 + t223 * t295, pkin(2) * t266 + pkin(8) * t265 + t158, -pkin(2) * t223 + pkin(8) * t158, t295 * (t220 * t299 - t258 * t349) + t300 * (t220 * t294 + t258 * t348), t295 * (-t201 * t299 - t205 * t294) + t300 * (-t201 * t294 + t205 * t299), t295 * (-t246 * t294 + t385) + t300 * (t246 * t299 + t388), t295 * (-t219 * t294 + t256 * t348) + t300 * (t219 * t299 + t256 * t349), t295 * (t245 * t299 - t355) + t300 * (t245 * t294 + t354), (t295 * (-t256 * t299 + t258 * t294) + t300 * (-t256 * t294 - t258 * t299)) * t285, t295 * (-pkin(9) * t192 + t357) + t300 * (-pkin(3) * t201 + pkin(9) * t193 - t356) - pkin(2) * t201 + pkin(8) * t151, t295 * (-pkin(9) * t207 + t356) + t300 * (-pkin(3) * t205 + pkin(9) * t208 + t357) - pkin(2) * t205 + pkin(8) * t161, t295 * (-pkin(9) * t159 - t90) + t300 * (-pkin(3) * t221 + pkin(9) * t160 + t91) - pkin(2) * t221 + pkin(8) * t114, -pkin(9) * t368 + t300 * (-pkin(3) * t196 + pkin(9) * t91) - pkin(2) * t196 + pkin(8) * t51, t295 * (t166 * t299 + t332) + t300 * (t166 * t294 - t331), t295 * (t127 * t299 + t215 * t294) + t300 * (t127 * t294 - t215 * t299), t295 * (t156 * t299 + t173 * t294) + t300 * (t156 * t294 - t173 * t299), t295 * (t164 * t299 - t332) + t300 * (t164 * t294 + t331), t295 * (t157 * t299 - t169 * t294) + t300 * (t157 * t294 + t169 * t299), t295 * (t184 * t299 + t218 * t294) + t300 * (t184 * t294 - t218 * t299), t295 * (-pkin(9) * t108 - t294 * t59 + t299 * t88) + t300 * (-pkin(3) * t142 + pkin(9) * t109 + t294 * t88 + t299 * t59) - pkin(2) * t142 + pkin(8) * t70, t295 * (-pkin(9) * t112 - t294 * t61 + t299 * t89) + t300 * (-pkin(3) * t146 + pkin(9) * t113 + t294 * t89 + t299 * t61) - pkin(2) * t146 + pkin(8) * t74, t295 * (-pkin(9) * t92 + t299 * t39) + t300 * (pkin(9) * t93 + t294 * t39) + pkin(8) * t58 + (t295 * t373 + t300 * t328 - pkin(2)) * t124, (t295 * (-pkin(10) * t299 + t373) + t300 * (-pkin(10) * t294 + t328) - pkin(2)) * t45 + (pkin(8) + pkin(9)) * t19, t295 * (t299 * t65 + t334) + t300 * (t294 * t65 - t333), t295 * (t175 * t294 + t299 * t36) + t300 * (-t175 * t299 + t294 * t36), t295 * (t106 * t294 + t299 * t80) + t300 * (-t106 * t299 + t294 * t80), t295 * (t299 * t64 - t334) + t300 * (t294 * t64 + t333), t295 * (-t103 * t294 + t299 * t81) + t300 * (t103 * t299 + t294 * t81), t295 * (t217 * t294 + t299 * t95) + t300 * (-t217 * t299 + t294 * t95), t295 * (-pkin(9) * t47 + t20 * t299 - t21 * t294) + t300 * (-pkin(3) * t72 + pkin(9) * t48 + t20 * t294 + t21 * t299) - pkin(2) * t72 + pkin(8) * t25, t295 * (-pkin(9) * t49 + t22 * t299 - t23 * t294) + t300 * (-pkin(3) * t76 + pkin(9) * t50 + t22 * t294 + t23 * t299) - pkin(2) * t76 + pkin(8) * t26, t295 * (-pkin(9) * t27 - t24 * t294 + t299 * t4) + t300 * (-pkin(3) * t33 + pkin(9) * t28 + t24 * t299 + t294 * t4) - pkin(2) * t33 + pkin(8) * t16, t295 * (-pkin(9) * t5 + t2 * t299 - t294 * t3) + t300 * (-pkin(3) * t8 + pkin(9) * t6 + t2 * t294 + t299 * t3) - pkin(2) * t8 + pkin(8) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274, t283 - t284, t336, t274, t282, qJDD(3), -t198, -t199, 0, 0, t235, t234, t206, -t235, t309, t335, pkin(3) * t192 - t138, -t345 - t294 * t303 + (-t268 * t294 + t207) * pkin(3), pkin(3) * t159, pkin(3) * t90, t165, t125, t154, t163, t155, t183, pkin(3) * t108 + t329, pkin(3) * t112 + t330, pkin(3) * t92 + t317, pkin(3) * t37 + t366, t63, t34, t78, t62, t79, t94, pkin(3) * t47 + t323, pkin(3) * t49 + t322, pkin(3) * t27 + t324, pkin(3) * t5 + t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235, t234, t206, -t235, t309, t335, -t138, -t139, 0, 0, t165, t125, t154, t163, t155, t183, t329, t330, t317, t366, t63, t34, t78, t62, t79, t94, t323, t322, t324, t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t216, t215, t173, -t216, -t169, t218, -t84, -t85, 0, 0, t176, t175, t106, -t176, -t103, t217, t315, t312, t374, t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, t175, t106, -t176, -t103, t217, -t30, -t31, 0, 0;];
tauJ_reg  = t7;
