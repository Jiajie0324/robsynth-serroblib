% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:46:43
% EndTime: 2019-05-05 10:46:52
% DurationCPUTime: 9.46s
% Computational Cost: add. (76564->331), mult. (150797->511), div. (0->0), fcn. (114169->14), ass. (0->283)
t2265 = sin(pkin(6));
t2267 = cos(pkin(6));
t2264 = sin(pkin(12));
t2266 = cos(pkin(12));
t2309 = g(1) * t2264 - g(2) * t2266;
t2330 = -g(3) + qJDD(1);
t2341 = t2265 * t2330 + t2267 * t2309;
t2322 = qJD(3) + qJD(4);
t2316 = t2322 ^ 2;
t2271 = sin(qJ(4));
t2276 = cos(qJ(4));
t2277 = cos(qJ(3));
t2328 = qJD(2) * t2277;
t2272 = sin(qJ(3));
t2329 = qJD(2) * t2272;
t2232 = t2271 * t2329 - t2276 * t2328;
t2226 = qJD(5) + t2232;
t2225 = qJD(6) + t2226;
t2340 = qJD(6) + t2225;
t2280 = qJD(2) ^ 2;
t2252 = t2272 * t2280 * t2277;
t2246 = qJDD(3) + t2252;
t2314 = qJD(3) * t2328;
t2318 = t2272 * qJDD(2);
t2238 = t2314 + t2318;
t2260 = t2277 * qJDD(2);
t2315 = qJD(3) * t2329;
t2239 = t2260 - t2315;
t2291 = t2276 * t2238 + t2271 * t2239;
t2196 = -t2232 * qJD(4) + t2291;
t2339 = t2232 * t2322 - t2196;
t2234 = (t2271 * t2277 + t2272 * t2276) * qJD(2);
t2270 = sin(qJ(5));
t2275 = cos(qJ(5));
t2214 = t2270 * t2234 - t2275 * t2322;
t2216 = t2275 * t2234 + t2270 * t2322;
t2269 = sin(qJ(6));
t2274 = cos(qJ(6));
t2192 = t2274 * t2214 + t2216 * t2269;
t2338 = t2192 ^ 2;
t2194 = -t2214 * t2269 + t2216 * t2274;
t2337 = t2194 ^ 2;
t2336 = t2214 ^ 2;
t2335 = t2216 ^ 2;
t2334 = t2225 ^ 2;
t2333 = t2226 ^ 2;
t2332 = t2232 ^ 2;
t2331 = t2234 ^ 2;
t2327 = t2192 * t2194;
t2326 = t2214 * t2216;
t2325 = t2226 * t2214;
t2324 = t2232 * t2234;
t2262 = t2277 ^ 2;
t2323 = t2262 * t2280;
t2321 = qJD(5) - t2226;
t2320 = qJD(6) - t2225;
t2223 = -t2265 * t2309 + t2267 * t2330;
t2245 = -g(1) * t2266 - g(2) * t2264;
t2273 = sin(qJ(2));
t2278 = cos(qJ(2));
t2204 = t2278 * t2245 + t2273 * t2341;
t2282 = -t2280 * pkin(2) + qJDD(2) * pkin(8) + t2204;
t2183 = t2272 * t2223 + t2277 * t2282;
t2249 = qJD(3) * pkin(3) - pkin(9) * t2329;
t2165 = -pkin(3) * t2323 + pkin(9) * t2239 - qJD(3) * t2249 + t2183;
t2182 = t2277 * t2223 - t2272 * t2282;
t2281 = t2182 + (-t2238 + t2314) * pkin(9) + t2246 * pkin(3);
t2137 = t2276 * t2165 + t2271 * t2281;
t2208 = pkin(4) * t2232 - pkin(10) * t2234;
t2317 = qJDD(3) + qJDD(4);
t2127 = -pkin(4) * t2316 + pkin(10) * t2317 - t2232 * t2208 + t2137;
t2308 = t2273 * t2245 - t2278 * t2341;
t2199 = -qJDD(2) * pkin(2) - t2280 * pkin(8) + t2308;
t2177 = -t2239 * pkin(3) - pkin(9) * t2323 + t2249 * t2329 + t2199;
t2310 = t2271 * t2238 - t2276 * t2239;
t2185 = (0.2e1 * qJD(4) + qJD(3)) * t2234 + t2310;
t2135 = t2185 * pkin(4) + pkin(10) * t2339 + t2177;
t2100 = t2275 * t2127 + t2270 * t2135;
t2261 = t2272 ^ 2;
t2319 = t2261 + t2262;
t2099 = -t2270 * t2127 + t2275 * t2135;
t2136 = -t2271 * t2165 + t2276 * t2281;
t2286 = -t2275 * t2196 - t2270 * t2317;
t2171 = -t2214 * qJD(5) - t2286;
t2311 = t2270 * t2196 - t2275 * t2317;
t2287 = qJD(5) * t2216 + t2311;
t2312 = -t2269 * t2171 - t2274 * t2287;
t2285 = t2234 * qJD(4) + qJDD(5) + t2310;
t2166 = t2285 - t2326;
t2083 = (-t2171 - t2325) * pkin(11) + t2166 * pkin(5) + t2099;
t2198 = pkin(5) * t2226 - pkin(11) * t2216;
t2086 = -pkin(5) * t2336 - pkin(11) * t2287 - t2226 * t2198 + t2100;
t2065 = t2083 * t2274 - t2086 * t2269;
t2066 = t2083 * t2269 + t2086 * t2274;
t2045 = t2065 * t2274 + t2066 * t2269;
t2046 = -t2065 * t2269 + t2066 * t2274;
t2036 = -t2045 * t2270 + t2046 * t2275;
t2126 = -t2317 * pkin(4) - t2316 * pkin(10) + t2234 * t2208 - t2136;
t2101 = pkin(5) * t2287 - pkin(11) * t2336 + t2216 * t2198 + t2126;
t2033 = t2036 * t2271 - t2101 * t2276;
t2034 = t2036 * t2276 + t2101 * t2271;
t2028 = -t2033 * t2272 + t2034 * t2277;
t2035 = t2045 * t2275 + t2046 * t2270;
t2307 = t2028 * t2273 - t2035 * t2278;
t2114 = -t2194 * t2320 + t2312;
t2283 = -t2274 * t2171 + t2269 * t2287;
t2116 = t2192 * t2320 + t2283;
t2087 = t2114 * t2269 + t2116 * t2274;
t2088 = t2114 * t2274 - t2116 * t2269;
t2068 = -t2087 * t2270 + t2088 * t2275;
t2142 = -t2337 - t2338;
t2059 = t2068 * t2271 - t2142 * t2276;
t2060 = t2068 * t2276 + t2142 * t2271;
t2044 = -t2059 * t2272 + t2060 * t2277;
t2067 = t2087 * t2275 + t2088 * t2270;
t2306 = t2044 * t2273 - t2067 * t2278;
t2072 = -t2099 * t2270 + t2100 * t2275;
t2069 = t2072 * t2271 - t2126 * t2276;
t2070 = t2072 * t2276 + t2126 * t2271;
t2049 = -t2069 * t2272 + t2070 * t2277;
t2071 = t2099 * t2275 + t2100 * t2270;
t2305 = t2049 * t2273 - t2071 * t2278;
t2284 = -qJDD(6) - t2285;
t2145 = -t2284 - t2327;
t2155 = -t2334 - t2338;
t2119 = t2145 * t2274 + t2155 * t2269;
t2120 = -t2145 * t2269 + t2155 * t2274;
t2094 = -t2119 * t2270 + t2120 * t2275;
t2113 = t2194 * t2340 - t2312;
t2074 = t2094 * t2271 - t2113 * t2276;
t2075 = t2094 * t2276 + t2113 * t2271;
t2052 = -t2074 * t2272 + t2075 * t2277;
t2093 = t2119 * t2275 + t2120 * t2270;
t2304 = t2052 * t2273 - t2093 * t2278;
t2146 = t2284 - t2327;
t2168 = -t2334 - t2337;
t2128 = t2146 * t2269 + t2168 * t2274;
t2129 = t2146 * t2274 - t2168 * t2269;
t2098 = -t2128 * t2270 + t2129 * t2275;
t2115 = -t2192 * t2340 - t2283;
t2077 = t2098 * t2271 - t2115 * t2276;
t2078 = t2098 * t2276 + t2115 * t2271;
t2056 = -t2077 * t2272 + t2078 * t2277;
t2097 = t2128 * t2275 + t2129 * t2270;
t2303 = t2056 * t2273 - t2097 * t2278;
t2102 = t2136 * t2276 + t2137 * t2271;
t2103 = -t2136 * t2271 + t2137 * t2276;
t2080 = -t2102 * t2272 + t2103 * t2277;
t2302 = t2080 * t2273 - t2177 * t2278;
t2157 = -t2216 * t2321 - t2311;
t2159 = t2214 * t2321 + t2286;
t2131 = t2157 * t2275 - t2159 * t2270;
t2173 = -t2335 - t2336;
t2110 = t2131 * t2271 - t2173 * t2276;
t2111 = t2131 * t2276 + t2173 * t2271;
t2085 = -t2110 * t2272 + t2111 * t2277;
t2130 = t2157 * t2270 + t2159 * t2275;
t2301 = t2085 * t2273 - t2130 * t2278;
t2184 = -t2333 - t2336;
t2141 = -t2166 * t2270 + t2184 * t2275;
t2156 = (qJD(5) + t2226) * t2216 + t2311;
t2117 = t2141 * t2271 - t2156 * t2276;
t2118 = t2141 * t2276 + t2156 * t2271;
t2092 = -t2117 * t2272 + t2118 * t2277;
t2140 = t2166 * t2275 + t2184 * t2270;
t2300 = t2092 * t2273 - t2140 * t2278;
t2167 = -t2285 - t2326;
t2191 = -t2333 - t2335;
t2144 = t2167 * t2275 - t2191 * t2270;
t2158 = t2171 - t2325;
t2121 = t2144 * t2271 - t2158 * t2276;
t2122 = t2144 * t2276 + t2158 * t2271;
t2096 = -t2121 * t2272 + t2122 * t2277;
t2143 = t2167 * t2270 + t2191 * t2275;
t2299 = t2096 * t2273 - t2143 * t2278;
t2186 = qJD(3) * t2234 - t2310;
t2188 = -qJD(3) * t2232 - t2291;
t2151 = t2186 * t2271 + t2188 * t2276;
t2152 = t2186 * t2276 - t2188 * t2271;
t2124 = -t2151 * t2272 + t2152 * t2277;
t2197 = -t2331 - t2332;
t2298 = t2124 * t2273 - t2197 * t2278;
t2205 = -t2316 - t2332;
t2206 = t2317 - t2324;
t2174 = t2205 * t2271 + t2206 * t2276;
t2175 = t2205 * t2276 - t2206 * t2271;
t2148 = -t2174 * t2272 + t2175 * t2277;
t2297 = t2148 * t2273 - t2185 * t2278;
t2150 = -t2182 * t2272 + t2183 * t2277;
t2296 = t2150 * t2273 - t2199 * t2278;
t2207 = -t2317 - t2324;
t2221 = -t2331 - t2316;
t2189 = t2207 * t2271 + t2221 * t2276;
t2190 = t2207 * t2276 - t2221 * t2271;
t2154 = -t2189 * t2272 + t2190 * t2277;
t2295 = t2154 * t2273 + t2278 * t2339;
t2294 = t2204 * t2273 - t2278 * t2308;
t2279 = qJD(3) ^ 2;
t2251 = -t2279 - t2323;
t2219 = -t2246 * t2272 + t2251 * t2277;
t2240 = t2260 - 0.2e1 * t2315;
t2293 = t2219 * t2273 + t2240 * t2278;
t2247 = -qJDD(3) + t2252;
t2250 = -t2261 * t2280 - t2279;
t2220 = t2247 * t2277 - t2250 * t2272;
t2237 = 0.2e1 * t2314 + t2318;
t2292 = t2220 * t2273 - t2237 * t2278;
t2241 = t2319 * qJDD(2);
t2244 = t2319 * t2280;
t2290 = t2241 * t2273 + t2244 * t2278;
t2289 = qJDD(2) * t2278 - t2273 * t2280;
t2243 = -qJDD(2) * t2273 - t2278 * t2280;
t2230 = t2289 * t2267;
t2229 = t2243 * t2267;
t2228 = t2289 * t2265;
t2227 = t2243 * t2265;
t2218 = t2247 * t2272 + t2250 * t2277;
t2217 = t2246 * t2277 + t2251 * t2272;
t2212 = t2241 * t2278 - t2244 * t2273;
t2210 = t2290 * t2267;
t2209 = t2290 * t2265;
t2202 = t2220 * t2278 + t2237 * t2273;
t2201 = t2219 * t2278 - t2240 * t2273;
t2181 = -t2265 * t2218 + t2267 * t2292;
t2180 = -t2265 * t2217 + t2267 * t2293;
t2179 = t2267 * t2218 + t2265 * t2292;
t2178 = t2267 * t2217 + t2265 * t2293;
t2172 = t2204 * t2278 + t2273 * t2308;
t2161 = -t2265 * t2223 + t2267 * t2294;
t2160 = t2267 * t2223 + t2265 * t2294;
t2153 = t2189 * t2277 + t2190 * t2272;
t2149 = t2182 * t2277 + t2183 * t2272;
t2147 = t2174 * t2277 + t2175 * t2272;
t2139 = t2150 * t2278 + t2199 * t2273;
t2138 = t2154 * t2278 - t2273 * t2339;
t2132 = t2148 * t2278 + t2185 * t2273;
t2123 = t2151 * t2277 + t2152 * t2272;
t2112 = t2124 * t2278 + t2197 * t2273;
t2109 = -t2265 * t2153 + t2267 * t2295;
t2108 = t2267 * t2153 + t2265 * t2295;
t2107 = -t2265 * t2149 + t2267 * t2296;
t2106 = t2267 * t2149 + t2265 * t2296;
t2105 = -t2265 * t2147 + t2267 * t2297;
t2104 = t2267 * t2147 + t2265 * t2297;
t2095 = t2121 * t2277 + t2122 * t2272;
t2091 = t2117 * t2277 + t2118 * t2272;
t2090 = -t2265 * t2123 + t2267 * t2298;
t2089 = t2267 * t2123 + t2265 * t2298;
t2084 = t2110 * t2277 + t2111 * t2272;
t2082 = t2096 * t2278 + t2143 * t2273;
t2081 = t2092 * t2278 + t2140 * t2273;
t2079 = t2102 * t2277 + t2103 * t2272;
t2076 = t2080 * t2278 + t2177 * t2273;
t2073 = t2085 * t2278 + t2130 * t2273;
t2064 = -t2265 * t2095 + t2267 * t2299;
t2063 = t2267 * t2095 + t2265 * t2299;
t2062 = -t2265 * t2091 + t2267 * t2300;
t2061 = t2267 * t2091 + t2265 * t2300;
t2058 = -t2265 * t2084 + t2267 * t2301;
t2057 = t2267 * t2084 + t2265 * t2301;
t2055 = t2077 * t2277 + t2078 * t2272;
t2054 = -t2265 * t2079 + t2267 * t2302;
t2053 = t2267 * t2079 + t2265 * t2302;
t2051 = t2074 * t2277 + t2075 * t2272;
t2050 = t2056 * t2278 + t2097 * t2273;
t2048 = t2069 * t2277 + t2070 * t2272;
t2047 = t2052 * t2278 + t2093 * t2273;
t2043 = t2059 * t2277 + t2060 * t2272;
t2042 = t2049 * t2278 + t2071 * t2273;
t2041 = -t2265 * t2055 + t2267 * t2303;
t2040 = t2267 * t2055 + t2265 * t2303;
t2039 = t2044 * t2278 + t2067 * t2273;
t2038 = -t2265 * t2051 + t2267 * t2304;
t2037 = t2267 * t2051 + t2265 * t2304;
t2032 = -t2265 * t2048 + t2267 * t2305;
t2031 = t2267 * t2048 + t2265 * t2305;
t2030 = -t2265 * t2043 + t2267 * t2306;
t2029 = t2267 * t2043 + t2265 * t2306;
t2027 = t2033 * t2277 + t2034 * t2272;
t2026 = t2028 * t2278 + t2035 * t2273;
t2025 = -t2265 * t2027 + t2267 * t2307;
t2024 = t2267 * t2027 + t2265 * t2307;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2266 * t2245 - t2264 * t2309, 0, 0, 0, 0, 0, 0, -t2230 * t2264 + t2243 * t2266, -t2229 * t2264 - t2266 * t2289, 0, -t2161 * t2264 + t2172 * t2266, 0, 0, 0, 0, 0, 0, -t2180 * t2264 + t2201 * t2266, -t2181 * t2264 + t2202 * t2266, -t2210 * t2264 + t2212 * t2266, -t2107 * t2264 + t2139 * t2266, 0, 0, 0, 0, 0, 0, -t2105 * t2264 + t2132 * t2266, -t2109 * t2264 + t2138 * t2266, -t2090 * t2264 + t2112 * t2266, -t2054 * t2264 + t2076 * t2266, 0, 0, 0, 0, 0, 0, -t2062 * t2264 + t2081 * t2266, -t2064 * t2264 + t2082 * t2266, -t2058 * t2264 + t2073 * t2266, -t2032 * t2264 + t2042 * t2266, 0, 0, 0, 0, 0, 0, -t2038 * t2264 + t2047 * t2266, -t2041 * t2264 + t2050 * t2266, -t2030 * t2264 + t2039 * t2266, -t2025 * t2264 + t2026 * t2266; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2264 * t2245 + t2266 * t2309, 0, 0, 0, 0, 0, 0, t2230 * t2266 + t2243 * t2264, t2229 * t2266 - t2264 * t2289, 0, t2161 * t2266 + t2172 * t2264, 0, 0, 0, 0, 0, 0, t2180 * t2266 + t2201 * t2264, t2181 * t2266 + t2202 * t2264, t2210 * t2266 + t2212 * t2264, t2107 * t2266 + t2139 * t2264, 0, 0, 0, 0, 0, 0, t2105 * t2266 + t2132 * t2264, t2109 * t2266 + t2138 * t2264, t2090 * t2266 + t2112 * t2264, t2054 * t2266 + t2076 * t2264, 0, 0, 0, 0, 0, 0, t2062 * t2266 + t2081 * t2264, t2064 * t2266 + t2082 * t2264, t2058 * t2266 + t2073 * t2264, t2032 * t2266 + t2042 * t2264, 0, 0, 0, 0, 0, 0, t2038 * t2266 + t2047 * t2264, t2041 * t2266 + t2050 * t2264, t2030 * t2266 + t2039 * t2264, t2025 * t2266 + t2026 * t2264; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2330, 0, 0, 0, 0, 0, 0, t2228, t2227, 0, t2160, 0, 0, 0, 0, 0, 0, t2178, t2179, t2209, t2106, 0, 0, 0, 0, 0, 0, t2104, t2108, t2089, t2053, 0, 0, 0, 0, 0, 0, t2061, t2063, t2057, t2031, 0, 0, 0, 0, 0, 0, t2037, t2040, t2029, t2024; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2245, 0, 0, 0, 0, 0, 0, t2243, -t2289, 0, t2172, 0, 0, 0, 0, 0, 0, t2201, t2202, t2212, t2139, 0, 0, 0, 0, 0, 0, t2132, t2138, t2112, t2076, 0, 0, 0, 0, 0, 0, t2081, t2082, t2073, t2042, 0, 0, 0, 0, 0, 0, t2047, t2050, t2039, t2026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2309, 0, 0, 0, 0, 0, 0, t2230, t2229, 0, t2161, 0, 0, 0, 0, 0, 0, t2180, t2181, t2210, t2107, 0, 0, 0, 0, 0, 0, t2105, t2109, t2090, t2054, 0, 0, 0, 0, 0, 0, t2062, t2064, t2058, t2032, 0, 0, 0, 0, 0, 0, t2038, t2041, t2030, t2025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2330, 0, 0, 0, 0, 0, 0, t2228, t2227, 0, t2160, 0, 0, 0, 0, 0, 0, t2178, t2179, t2209, t2106, 0, 0, 0, 0, 0, 0, t2104, t2108, t2089, t2053, 0, 0, 0, 0, 0, 0, t2061, t2063, t2057, t2031, 0, 0, 0, 0, 0, 0, t2037, t2040, t2029, t2024; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2280, -qJDD(2), 0, t2204, 0, 0, 0, 0, 0, 0, t2219, t2220, t2241, t2150, 0, 0, 0, 0, 0, 0, t2148, t2154, t2124, t2080, 0, 0, 0, 0, 0, 0, t2092, t2096, t2085, t2049, 0, 0, 0, 0, 0, 0, t2052, t2056, t2044, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2280, 0, -t2308, 0, 0, 0, 0, 0, 0, t2240, -t2237, t2244, -t2199, 0, 0, 0, 0, 0, 0, -t2185, t2339, -t2197, -t2177, 0, 0, 0, 0, 0, 0, -t2140, -t2143, -t2130, -t2071, 0, 0, 0, 0, 0, 0, -t2093, -t2097, -t2067, -t2035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2223, 0, 0, 0, 0, 0, 0, t2217, t2218, 0, t2149, 0, 0, 0, 0, 0, 0, t2147, t2153, t2123, t2079, 0, 0, 0, 0, 0, 0, t2091, t2095, t2084, t2048, 0, 0, 0, 0, 0, 0, t2051, t2055, t2043, t2027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2251, t2247, t2260, t2183, 0, 0, 0, 0, 0, 0, t2175, t2190, t2152, t2103, 0, 0, 0, 0, 0, 0, t2118, t2122, t2111, t2070, 0, 0, 0, 0, 0, 0, t2075, t2078, t2060, t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2246, t2250, -t2318, t2182, 0, 0, 0, 0, 0, 0, t2174, t2189, t2151, t2102, 0, 0, 0, 0, 0, 0, t2117, t2121, t2110, t2069, 0, 0, 0, 0, 0, 0, t2074, t2077, t2059, t2033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2240, t2237, -t2244, t2199, 0, 0, 0, 0, 0, 0, t2185, -t2339, t2197, t2177, 0, 0, 0, 0, 0, 0, t2140, t2143, t2130, t2071, 0, 0, 0, 0, 0, 0, t2093, t2097, t2067, t2035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2205, t2207, t2186, t2137, 0, 0, 0, 0, 0, 0, t2141, t2144, t2131, t2072, 0, 0, 0, 0, 0, 0, t2094, t2098, t2068, t2036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2206, t2221, t2188, t2136, 0, 0, 0, 0, 0, 0, -t2156, -t2158, -t2173, -t2126, 0, 0, 0, 0, 0, 0, -t2113, -t2115, -t2142, -t2101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2185, -t2339, t2197, t2177, 0, 0, 0, 0, 0, 0, t2140, t2143, t2130, t2071, 0, 0, 0, 0, 0, 0, t2093, t2097, t2067, t2035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2184, t2167, t2157, t2100, 0, 0, 0, 0, 0, 0, t2120, t2129, t2088, t2046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2191, t2159, t2099, 0, 0, 0, 0, 0, 0, t2119, t2128, t2087, t2045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2156, t2158, t2173, t2126, 0, 0, 0, 0, 0, 0, t2113, t2115, t2142, t2101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2155, t2146, t2114, t2066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2145, t2168, t2116, t2065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2113, t2115, t2142, t2101;];
f_new_reg  = t1;
