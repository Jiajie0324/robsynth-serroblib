% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:45:00
% EndTime: 2019-05-05 10:45:49
% DurationCPUTime: 43.03s
% Computational Cost: add. (383302->1016), mult. (754135->1656), div. (0->0), fcn. (569224->14), ass. (0->723)
t1017 = qJDD(3) + qJDD(4);
t1028 = sin(qJ(5));
t1033 = cos(qJ(5));
t1029 = sin(qJ(4));
t1034 = cos(qJ(4));
t1035 = cos(qJ(3));
t1131 = qJD(2) * t1035;
t1030 = sin(qJ(3));
t1132 = qJD(2) * t1030;
t977 = t1029 * t1132 - t1034 * t1131;
t1112 = qJD(3) * t1131;
t1124 = qJDD(2) * t1030;
t986 = t1112 + t1124;
t1013 = t1035 * qJDD(2);
t1113 = qJD(3) * t1132;
t987 = t1013 - t1113;
t902 = -qJD(4) * t977 + t1029 * t987 + t1034 * t986;
t1018 = qJD(3) + qJD(4);
t979 = (t1029 * t1035 + t1030 * t1034) * qJD(2);
t943 = -t1033 * t1018 + t1028 * t979;
t1115 = t943 * qJD(5) - t1028 * t1017 - t1033 * t902;
t969 = qJD(5) + t977;
t911 = t969 * t943;
t810 = -t911 + t1115;
t1027 = sin(qJ(6));
t1107 = t1029 * t986 - t1034 * t987;
t901 = -qJD(4) * t979 - t1107;
t899 = qJDD(5) - t901;
t1041 = qJDD(6) + t899;
t1032 = cos(qJ(6));
t945 = t1018 * t1028 + t1033 * t979;
t892 = t1027 * t945 + t1032 * t943;
t894 = -t1027 * t943 + t1032 * t945;
t817 = t894 * t892;
t1174 = t1041 - t817;
t1182 = t1027 * t1174;
t896 = t945 * t943;
t1175 = -t896 + t899;
t1181 = t1028 * t1175;
t932 = t979 * t977;
t1172 = -t932 + t1017;
t1180 = t1029 * t1172;
t1179 = t1032 * t1174;
t1178 = t1033 * t1175;
t1177 = t1034 * t1172;
t1023 = sin(pkin(6));
t1025 = cos(pkin(6));
t1022 = sin(pkin(12));
t1024 = cos(pkin(12));
t1111 = g(1) * t1022 - t1024 * g(2);
t1164 = g(3) - qJDD(1);
t1176 = -t1023 * t1164 + t1025 * t1111;
t965 = t1018 * t977;
t878 = t902 - t965;
t1106 = -t1033 * t1017 + t1028 * t902;
t843 = -qJD(5) * t945 - t1106;
t1042 = qJD(6) * t892 - t1027 * t843 + t1032 * t1115;
t967 = qJD(6) + t969;
t852 = t967 * t892;
t1173 = -t1042 - t852;
t809 = -t911 - t1115;
t1171 = t1022 * t1164;
t1170 = t1024 * t1164;
t1168 = qJD(2) ^ 2;
t1003 = t1030 * t1168 * t1035;
t995 = qJDD(3) + t1003;
t994 = g(1) * t1024 + g(2) * t1022;
t941 = -t1022 * t1111 - t1024 * t994;
t806 = (qJD(5) - t969) * t945 + t1106;
t880 = (qJD(4) - t1018) * t979 + t1107;
t1108 = -t1027 * t1115 - t1032 * t843;
t701 = (qJD(6) - t967) * t894 + t1108;
t940 = -t1022 * t994 + t1024 * t1111;
t890 = t892 ^ 2;
t891 = t894 ^ 2;
t1169 = t943 ^ 2;
t942 = t945 ^ 2;
t966 = t967 ^ 2;
t968 = t969 ^ 2;
t975 = t977 ^ 2;
t976 = t979 ^ 2;
t1167 = t1018 ^ 2;
t1031 = sin(qJ(2));
t1036 = cos(qJ(2));
t914 = -t1031 * t994 - t1036 * t1176;
t915 = t1031 * t1176 - t1036 * t994;
t846 = t1031 * t914 + t1036 * t915;
t1166 = pkin(7) * t846;
t1165 = pkin(4) * t1029;
t1039 = -pkin(2) * t1168 + qJDD(2) * pkin(8) + t915;
t961 = t1023 * t1111 + t1025 * t1164;
t866 = t1030 * t1039 + t1035 * t961;
t1038 = -t866 + (t1112 - t986) * pkin(9) + t995 * pkin(3);
t1020 = t1035 ^ 2;
t1015 = t1020 * t1168;
t867 = -t1030 * t961 + t1035 * t1039;
t998 = qJD(3) * pkin(3) - pkin(9) * t1132;
t824 = -pkin(3) * t1015 + pkin(9) * t987 - qJD(3) * t998 + t867;
t747 = t1029 * t1038 + t1034 * t824;
t928 = pkin(4) * t977 - pkin(10) * t979;
t724 = -pkin(4) * t1167 + pkin(10) * t1017 - t928 * t977 + t747;
t906 = -qJDD(2) * pkin(2) - t1168 * pkin(8) + t914;
t854 = -t987 * pkin(3) - pkin(9) * t1015 + t1132 * t998 + t906;
t745 = -t878 * pkin(10) + (t1018 * t979 - t901) * pkin(4) + t854;
t656 = t1028 * t724 - t1033 * t745;
t604 = t1175 * pkin(5) + pkin(11) * t810 - t656;
t657 = t1028 * t745 + t1033 * t724;
t905 = pkin(5) * t969 - pkin(11) * t945;
t610 = -pkin(5) * t1169 + pkin(11) * t843 - t905 * t969 + t657;
t555 = t1027 * t604 + t1032 * t610;
t746 = t1029 * t824 - t1034 * t1038;
t723 = -t1017 * pkin(4) - t1167 * pkin(10) + t928 * t979 + t746;
t658 = -t843 * pkin(5) - pkin(11) * t1169 + t905 * t945 + t723;
t1162 = t1027 * t658;
t770 = t1041 + t817;
t1161 = t1027 * t770;
t1160 = t1027 * t967;
t554 = t1027 * t610 - t1032 * t604;
t487 = t1027 * t555 - t1032 * t554;
t1159 = t1028 * t487;
t1158 = t1028 * t723;
t828 = t896 + t899;
t1157 = t1028 * t828;
t1156 = t1028 * t969;
t1155 = t1029 * t854;
t922 = t932 + t1017;
t1154 = t1029 * t922;
t662 = t1029 * t747 - t1034 * t746;
t1153 = t1030 * t662;
t1152 = t1030 * t906;
t1151 = t1030 * t995;
t996 = qJDD(3) - t1003;
t1150 = t1030 * t996;
t1149 = t1031 * t961;
t1148 = t1032 * t658;
t1147 = t1032 * t770;
t1146 = t1032 * t967;
t1145 = t1033 * t487;
t1144 = t1033 * t723;
t1143 = t1033 * t828;
t1142 = t1033 * t969;
t1141 = t1034 * t854;
t1140 = t1034 * t922;
t1139 = t1035 * t662;
t1138 = t1035 * t906;
t1137 = t1035 * t996;
t1136 = t1036 * t961;
t1133 = qJD(2) * qJD(3);
t1019 = t1030 ^ 2;
t1130 = t1168 * t1019;
t1129 = t1018 * t1029;
t1128 = t1018 * t1034;
t1126 = t1019 + t1020;
t1125 = qJDD(2) * t1023;
t1123 = qJDD(2) * t1031;
t1122 = qJDD(2) * t1036;
t1121 = t1029 * t817;
t1120 = t1029 * t896;
t1119 = t1031 * t932;
t1118 = t1034 * t817;
t1117 = t1034 * t896;
t1116 = t1036 * t932;
t1114 = -pkin(4) * t1034 - pkin(3);
t488 = t1027 * t554 + t1032 * t555;
t663 = t1029 * t746 + t1034 * t747;
t787 = t1030 * t866 + t1035 * t867;
t1105 = t1031 * t1003;
t1104 = t1036 * t1003;
t785 = t1030 * t867 - t1035 * t866;
t989 = t1126 * qJDD(2);
t992 = t1015 + t1130;
t937 = -t1031 * t992 + t1036 * t989;
t1103 = pkin(7) * t937 - t1031 * t785;
t990 = -t1031 * t1168 + t1122;
t1102 = -pkin(7) * t990 - t1149;
t1063 = t1036 * t1168 + t1123;
t1101 = -pkin(7) * t1063 + t1136;
t972 = t1063 * t1025;
t1099 = t1022 * t990 + t1024 * t972;
t926 = t1022 * t972 - t1024 * t990;
t571 = t1028 * t657 - t1033 * t656;
t572 = t1028 * t656 + t1033 * t657;
t455 = t1033 * t488 - t1159;
t449 = t1029 * t455 - t1034 * t658;
t450 = t1029 * t658 + t1034 * t455;
t421 = -t1030 * t449 + t1035 * t450;
t454 = t1028 * t488 + t1145;
t1098 = t1031 * t421 - t1036 * t454;
t705 = t1042 - t852;
t620 = -t1027 * t701 + t1032 * t705;
t622 = -t1027 * t705 - t1032 * t701;
t561 = -t1028 * t620 + t1033 * t622;
t765 = -t890 - t891;
t543 = t1029 * t561 - t1034 * t765;
t544 = t1029 * t765 + t1034 * t561;
t484 = -t1030 * t543 + t1035 * t544;
t559 = t1028 * t622 + t1033 * t620;
t1097 = t1031 * t484 - t1036 * t559;
t700 = (qJD(6) + t967) * t894 + t1108;
t621 = -t1027 * t700 + t1032 * t1173;
t623 = -t1027 * t1173 - t1032 * t700;
t562 = -t1028 * t621 + t1033 * t623;
t816 = -t891 + t890;
t551 = t1029 * t562 + t1034 * t816;
t552 = -t1029 * t816 + t1034 * t562;
t486 = -t1030 * t551 + t1035 * t552;
t560 = -t1028 * t623 - t1033 * t621;
t1096 = t1031 * t486 + t1036 * t560;
t563 = t1029 * t572 - t1034 * t723;
t564 = t1029 * t723 + t1034 * t572;
t495 = -t1030 * t563 + t1035 * t564;
t1095 = t1031 * t495 - t1036 * t571;
t797 = -t966 - t890;
t708 = t1027 * t797 + t1179;
t709 = t1032 * t797 - t1182;
t629 = -t1028 * t708 + t1033 * t709;
t576 = t1029 * t629 - t1034 * t700;
t577 = t1029 * t700 + t1034 * t629;
t515 = -t1030 * t576 + t1035 * t577;
t628 = t1028 * t709 + t1033 * t708;
t1094 = t1031 * t515 - t1036 * t628;
t832 = -t891 - t966;
t725 = t1032 * t832 - t1161;
t726 = -t1027 * t832 - t1147;
t647 = -t1028 * t725 + t1033 * t726;
t582 = t1029 * t647 - t1034 * t1173;
t583 = t1029 * t1173 + t1034 * t647;
t524 = -t1030 * t582 + t1035 * t583;
t646 = t1028 * t726 + t1033 * t725;
t1093 = t1031 * t524 - t1036 * t646;
t849 = -t891 + t966;
t731 = t1032 * t849 + t1182;
t733 = -t1027 * t849 + t1179;
t652 = -t1028 * t731 + t1033 * t733;
t586 = t1029 * t652 + t1034 * t705;
t588 = -t1029 * t705 + t1034 * t652;
t529 = -t1030 * t586 + t1035 * t588;
t650 = -t1028 * t733 - t1033 * t731;
t1092 = t1031 * t529 + t1036 * t650;
t848 = t890 - t966;
t732 = t1027 * t848 + t1147;
t734 = t1032 * t848 - t1161;
t653 = -t1028 * t732 + t1033 * t734;
t587 = t1029 * t653 + t1034 * t701;
t589 = -t1029 * t701 + t1034 * t653;
t530 = -t1030 * t587 + t1035 * t589;
t651 = -t1028 * t734 - t1033 * t732;
t1091 = t1031 * t530 + t1036 * t651;
t735 = -qJD(6) * t894 - t1108;
t696 = t1032 * t735 + t1160 * t892;
t697 = -t1027 * t735 + t1146 * t892;
t616 = -t1028 * t696 + t1033 * t697;
t592 = t1029 * t616 + t1118;
t594 = t1034 * t616 - t1121;
t537 = -t1030 * t592 + t1035 * t594;
t614 = -t1028 * t697 - t1033 * t696;
t1090 = t1031 * t537 + t1036 * t614;
t698 = -t1027 * t1042 + t1146 * t894;
t699 = -t1032 * t1042 - t1160 * t894;
t617 = -t1028 * t698 + t1033 * t699;
t593 = t1029 * t617 - t1118;
t595 = t1034 * t617 + t1121;
t538 = -t1030 * t593 + t1035 * t595;
t615 = -t1028 * t699 - t1033 * t698;
t1089 = t1031 * t538 + t1036 * t615;
t585 = t1035 * t663 - t1153;
t1088 = t1031 * t585 - t1036 * t854;
t774 = (-t1027 * t892 - t1032 * t894) * t967;
t775 = (t1027 * t894 - t1032 * t892) * t967;
t692 = -t1028 * t774 + t1033 * t775;
t676 = t1029 * t692 - t1034 * t1041;
t677 = t1029 * t1041 + t1034 * t692;
t598 = -t1030 * t676 + t1035 * t677;
t691 = -t1028 * t775 - t1033 * t774;
t1087 = t1031 * t598 + t1036 * t691;
t729 = -t1028 * t810 - t1033 * t806;
t847 = t942 + t1169;
t684 = t1029 * t729 + t1034 * t847;
t685 = -t1029 * t847 + t1034 * t729;
t607 = -t1030 * t684 + t1035 * t685;
t727 = -t1028 * t806 + t1033 * t810;
t1086 = t1031 * t607 - t1036 * t727;
t808 = (-qJD(5) - t969) * t945 - t1106;
t730 = -t1028 * t809 + t1033 * t808;
t895 = -t942 + t1169;
t694 = t1029 * t730 + t1034 * t895;
t695 = -t1029 * t895 + t1034 * t730;
t613 = -t1030 * t694 + t1035 * t695;
t728 = -t1028 * t808 - t1033 * t809;
t1085 = t1031 * t613 + t1036 * t728;
t868 = -t968 - t1169;
t764 = t1033 * t868 - t1181;
t706 = t1029 * t764 + t1034 * t808;
t707 = -t1029 * t808 + t1034 * t764;
t627 = -t1030 * t706 + t1035 * t707;
t763 = t1028 * t868 + t1178;
t1084 = t1031 * t627 - t1036 * t763;
t889 = -t942 - t968;
t768 = -t1028 * t889 - t1143;
t710 = t1029 * t768 - t1034 * t809;
t711 = t1029 * t809 + t1034 * t768;
t634 = -t1030 * t710 + t1035 * t711;
t767 = t1033 * t889 - t1157;
t1083 = t1031 * t634 - t1036 * t767;
t910 = -t942 + t968;
t783 = -t1028 * t910 + t1178;
t714 = t1029 * t783 + t1034 * t810;
t716 = -t1029 * t810 + t1034 * t783;
t637 = -t1030 * t714 + t1035 * t716;
t781 = -t1033 * t910 - t1181;
t1082 = t1031 * t637 + t1036 * t781;
t909 = -t968 + t1169;
t784 = t1033 * t909 - t1157;
t715 = t1029 * t784 + t1034 * t806;
t717 = -t1029 * t806 + t1034 * t784;
t638 = -t1030 * t715 + t1035 * t717;
t782 = -t1028 * t909 - t1143;
t1081 = t1031 * t638 + t1036 * t782;
t799 = -t1028 * t843 + t1142 * t943;
t757 = t1029 * t799 + t1117;
t759 = t1034 * t799 - t1120;
t674 = -t1030 * t757 + t1035 * t759;
t798 = -t1033 * t843 - t1156 * t943;
t1080 = t1031 * t674 + t1036 * t798;
t801 = -t1033 * t1115 - t1156 * t945;
t758 = t1029 * t801 - t1117;
t760 = t1034 * t801 + t1120;
t675 = -t1030 * t758 + t1035 * t760;
t800 = t1028 * t1115 - t1142 * t945;
t1079 = t1031 * t675 + t1036 * t800;
t836 = (t1028 * t945 - t1033 * t943) * t969;
t789 = t1029 * t836 - t1034 * t899;
t790 = t1029 * t899 + t1034 * t836;
t713 = -t1030 * t789 + t1035 * t790;
t835 = (t1028 * t943 + t1033 * t945) * t969;
t1078 = t1031 * t713 + t1036 * t835;
t875 = (qJD(4) + t1018) * t979 + t1107;
t791 = -t1029 * t875 + t1034 * t878;
t793 = -t1029 * t878 - t1034 * t875;
t720 = -t1030 * t791 + t1035 * t793;
t931 = -t976 + t975;
t1077 = t1031 * t720 + t1036 * t931;
t879 = -t902 - t965;
t792 = -t1029 * t880 + t1034 * t879;
t794 = -t1029 * t879 - t1034 * t880;
t721 = -t1030 * t792 + t1035 * t794;
t904 = -t975 - t976;
t1076 = t1031 * t721 - t1036 * t904;
t916 = -t1167 - t975;
t850 = t1029 * t916 + t1177;
t851 = t1034 * t916 - t1180;
t773 = -t1030 * t850 + t1035 * t851;
t1075 = t1031 * t773 - t1036 * t875;
t1074 = t1031 * t787 - t1036 * t906;
t956 = -t976 - t1167;
t881 = t1034 * t956 - t1154;
t882 = -t1029 * t956 - t1140;
t796 = -t1030 * t881 + t1035 * t882;
t1073 = t1031 * t796 - t1036 * t878;
t963 = -t976 + t1167;
t885 = t1034 * t963 + t1180;
t887 = -t1029 * t963 + t1177;
t804 = -t1030 * t885 + t1035 * t887;
t1072 = t1031 * t804 + t1036 * t879;
t962 = t975 - t1167;
t886 = t1029 * t962 + t1140;
t888 = t1034 * t962 - t1154;
t805 = -t1030 * t886 + t1035 * t888;
t1071 = t1031 * t805 + t1036 * t880;
t1070 = t1031 * t915 - t1036 * t914;
t985 = 0.2e1 * t1112 + t1124;
t988 = t1013 - 0.2e1 * t1113;
t934 = -t1030 * t985 + t1035 * t988;
t993 = t1015 - t1130;
t1069 = t1031 * t934 + t1036 * t993;
t1037 = qJD(3) ^ 2;
t1002 = -t1015 - t1037;
t953 = t1002 * t1035 - t1151;
t1068 = t1031 * t953 + t1036 * t988;
t1000 = -t1037 - t1130;
t955 = -t1000 * t1030 - t1137;
t1067 = t1031 * t955 - t1036 * t985;
t1066 = t1031 * t989 + t1036 * t992;
t907 = (-t1029 * t977 - t1034 * t979) * t1018;
t908 = (t1029 * t979 - t1034 * t977) * t1018;
t834 = -t1030 * t907 + t1035 * t908;
t1065 = -t1017 * t1036 + t1031 * t834;
t983 = t1126 * t1133;
t1064 = -qJDD(3) * t1036 + t1031 * t983;
t862 = t1034 * t901 + t1129 * t977;
t863 = -t1029 * t901 + t1128 * t977;
t779 = -t1030 * t862 + t1035 * t863;
t1062 = t1031 * t779 + t1116;
t864 = t1029 * t902 + t1128 * t979;
t865 = t1034 * t902 - t1129 * t979;
t780 = -t1030 * t864 + t1035 * t865;
t1061 = t1031 * t780 - t1116;
t984 = t1035 * t995;
t999 = t1037 - t1130;
t954 = -t1030 * t999 + t984;
t1060 = -t1030 * t1122 + t1031 * t954;
t1001 = t1015 - t1037;
t952 = t1001 * t1035 - t1150;
t1059 = -t1013 * t1036 + t1031 * t952;
t480 = -pkin(5) * t658 + pkin(11) * t488;
t423 = -pkin(10) * t454 - pkin(11) * t1145 - t1028 * t480;
t433 = -pkin(4) * t454 - pkin(5) * t487;
t402 = -pkin(3) * t454 + pkin(9) * t450 + t1029 * t423 + t1034 * t433;
t411 = -pkin(9) * t449 - t1029 * t433 + t1034 * t423;
t420 = t1030 * t450 + t1035 * t449;
t395 = -pkin(8) * t420 - t1030 * t402 + t1035 * t411;
t403 = -pkin(2) * t420 - pkin(3) * t449 + pkin(4) * t658 - pkin(10) * t455 + pkin(11) * t1159 - t1033 * t480;
t412 = t1031 * t454 + t1036 * t421;
t1058 = pkin(7) * t412 + t1031 * t395 + t1036 * t403;
t477 = -pkin(5) * t765 + pkin(11) * t622 + t488;
t479 = -pkin(11) * t620 - t487;
t434 = -pkin(10) * t559 - t1028 * t477 + t1033 * t479;
t513 = -pkin(4) * t559 - pkin(5) * t620;
t418 = -pkin(3) * t559 + pkin(9) * t544 + t1029 * t434 + t1034 * t513;
t422 = -pkin(9) * t543 - t1029 * t513 + t1034 * t434;
t483 = t1030 * t544 + t1035 * t543;
t408 = -pkin(8) * t483 - t1030 * t418 + t1035 * t422;
t419 = -pkin(2) * t483 - pkin(3) * t543 + pkin(4) * t765 - pkin(10) * t561 - t1028 * t479 - t1033 * t477;
t465 = t1031 * t559 + t1036 * t484;
t1057 = pkin(7) * t465 + t1031 * t408 + t1036 * t419;
t568 = -pkin(5) * t700 + pkin(11) * t709 - t1148;
t596 = -pkin(11) * t708 + t1162;
t496 = -pkin(10) * t628 - t1028 * t568 + t1033 * t596;
t498 = -pkin(4) * t628 - pkin(5) * t708 + t554;
t444 = -pkin(3) * t628 + pkin(9) * t577 + t1029 * t496 + t1034 * t498;
t452 = -pkin(9) * t576 - t1029 * t498 + t1034 * t496;
t514 = t1030 * t577 + t1035 * t576;
t415 = -pkin(8) * t514 - t1030 * t444 + t1035 * t452;
t453 = -pkin(2) * t514 - pkin(3) * t576 + pkin(4) * t700 - pkin(10) * t629 - t1028 * t596 - t1033 * t568;
t493 = t1031 * t628 + t1036 * t515;
t1056 = pkin(7) * t493 + t1031 * t415 + t1036 * t453;
t569 = -pkin(5) * t1173 + pkin(11) * t726 + t1162;
t601 = -pkin(11) * t725 + t1148;
t499 = -pkin(10) * t646 - t1028 * t569 + t1033 * t601;
t504 = -pkin(4) * t646 - pkin(5) * t725 + t555;
t451 = -pkin(3) * t646 + pkin(9) * t583 + t1029 * t499 + t1034 * t504;
t456 = -pkin(9) * t582 - t1029 * t504 + t1034 * t499;
t523 = t1030 * t583 + t1035 * t582;
t417 = -pkin(8) * t523 - t1030 * t451 + t1035 * t456;
t457 = -pkin(2) * t523 - pkin(3) * t582 + pkin(4) * t1173 - pkin(10) * t647 - t1028 * t601 - t1033 * t569;
t500 = t1031 * t646 + t1036 * t524;
t1055 = pkin(7) * t500 + t1031 * t417 + t1036 * t457;
t464 = pkin(9) * t564 + (-pkin(10) * t1029 + t1114) * t571;
t481 = -pkin(9) * t563 + (-pkin(10) * t1034 + t1165) * t571;
t494 = t1030 * t564 + t1035 * t563;
t430 = -pkin(8) * t494 - t1030 * t464 + t1035 * t481;
t458 = -pkin(2) * t494 - pkin(3) * t563 + pkin(4) * t723 - pkin(10) * t572;
t478 = t1031 * t571 + t1036 * t495;
t1054 = pkin(7) * t478 + t1031 * t430 + t1036 * t458;
t565 = -pkin(10) * t727 - t571;
t511 = pkin(9) * t685 + t1029 * t565 + t1114 * t727;
t518 = -pkin(9) * t684 + t1034 * t565 + t1165 * t727;
t606 = t1030 * t685 + t1035 * t684;
t460 = -pkin(8) * t606 - t1030 * t511 + t1035 * t518;
t497 = -pkin(2) * t606 - pkin(3) * t684 - pkin(4) * t847 - pkin(10) * t729 - t572;
t575 = t1031 * t727 + t1036 * t607;
t1053 = pkin(7) * t575 + t1031 * t460 + t1036 * t497;
t609 = -pkin(4) * t763 + t656;
t659 = -pkin(10) * t763 + t1158;
t532 = -pkin(3) * t763 + pkin(9) * t707 + t1029 * t659 + t1034 * t609;
t547 = -pkin(9) * t706 - t1029 * t609 + t1034 * t659;
t626 = t1030 * t707 + t1035 * t706;
t475 = -pkin(8) * t626 - t1030 * t532 + t1035 * t547;
t540 = -pkin(2) * t626 - pkin(3) * t706 - pkin(4) * t808 - pkin(10) * t764 + t1144;
t590 = t1031 * t763 + t1036 * t627;
t1052 = pkin(7) * t590 + t1031 * t475 + t1036 * t540;
t611 = -pkin(4) * t767 + t657;
t661 = -pkin(10) * t767 + t1144;
t534 = -pkin(3) * t767 + pkin(9) * t711 + t1029 * t661 + t1034 * t611;
t548 = -pkin(9) * t710 - t1029 * t611 + t1034 * t661;
t633 = t1030 * t711 + t1035 * t710;
t476 = -pkin(8) * t633 - t1030 * t534 + t1035 * t548;
t541 = -pkin(2) * t633 - pkin(3) * t710 + pkin(4) * t809 - pkin(10) * t768 - t1158;
t591 = t1031 * t767 + t1036 * t634;
t1051 = pkin(7) * t591 + t1031 * t476 + t1036 * t541;
t584 = t1030 * t663 + t1139;
t654 = -pkin(3) * t854 + pkin(9) * t663;
t522 = -pkin(8) * t584 - pkin(9) * t1139 - t1030 * t654;
t558 = -pkin(2) * t584 - pkin(3) * t662;
t578 = t1031 * t854 + t1036 * t585;
t1050 = pkin(7) * t578 + t1031 * t522 + t1036 * t558;
t632 = -pkin(3) * t904 + pkin(9) * t794 + t663;
t644 = -pkin(9) * t792 - t662;
t719 = t1030 * t794 + t1035 * t792;
t542 = -pkin(8) * t719 - t1030 * t632 + t1035 * t644;
t664 = -pkin(2) * t719 - pkin(3) * t792;
t688 = t1031 * t904 + t1036 * t721;
t1049 = pkin(7) * t688 + t1031 * t542 + t1036 * t664;
t740 = -pkin(3) * t875 + pkin(9) * t851 - t1141;
t772 = t1030 * t851 + t1035 * t850;
t776 = -pkin(9) * t850 + t1155;
t645 = -pkin(8) * t772 - t1030 * t740 + t1035 * t776;
t660 = -pkin(2) * t772 - pkin(3) * t850 + t746;
t738 = t1031 * t875 + t1036 * t773;
t1048 = pkin(7) * t738 + t1031 * t645 + t1036 * t660;
t743 = -pkin(3) * t878 + pkin(9) * t882 + t1155;
t788 = -pkin(9) * t881 + t1141;
t795 = t1030 * t882 + t1035 * t881;
t655 = -pkin(8) * t795 - t1030 * t743 + t1035 * t788;
t665 = -pkin(2) * t795 - pkin(3) * t881 + t747;
t748 = t1031 * t878 + t1036 * t796;
t1047 = pkin(7) * t748 + t1031 * t655 + t1036 * t665;
t949 = t1002 * t1030 + t984;
t830 = -pkin(2) * t949 + t866;
t860 = -pkin(8) * t949 + t1152;
t912 = -t1031 * t988 + t1036 * t953;
t1046 = pkin(7) * t912 + t1031 * t860 + t1036 * t830;
t951 = t1000 * t1035 - t1150;
t831 = -pkin(2) * t951 + t867;
t861 = -pkin(8) * t951 + t1138;
t913 = t1031 * t985 + t1036 * t955;
t1045 = pkin(7) * t913 + t1031 * t861 + t1036 * t831;
t958 = -t1020 * t1133 - t1030 * t987;
t1044 = t1031 * t958 - t1104;
t959 = -t1019 * t1133 + t1035 * t986;
t1043 = t1031 * t959 + t1104;
t755 = t1031 * t906 + t1036 * t787;
t1040 = pkin(7) * t755 + (-pkin(2) * t1036 - pkin(8) * t1031) * t785;
t973 = t990 * t1025;
t971 = t990 * t1023;
t970 = t1063 * t1023;
t960 = qJDD(3) * t1031 + t1036 * t983;
t950 = t1035 * t999 + t1151;
t948 = t1001 * t1030 + t1137;
t947 = (t986 + t1112) * t1030;
t946 = (t987 - t1113) * t1035;
t938 = t1064 * t1025;
t933 = t1030 * t988 + t1035 * t985;
t930 = t1066 * t1025;
t929 = t1066 * t1023;
t927 = -t1022 * t973 - t1024 * t1063;
t925 = -t1022 * t1063 + t1024 * t973;
t920 = t1036 * t959 - t1105;
t919 = t1036 * t958 + t1105;
t918 = t1030 * t1123 + t1036 * t954;
t917 = t1013 * t1031 + t1036 * t952;
t903 = -t1031 * t993 + t1036 * t934;
t884 = -t1136 + (t1023 * t970 + t1025 * t972) * pkin(7);
t883 = -t1149 + (-t1023 * t971 - t1025 * t973) * pkin(7);
t874 = -t1022 * t930 + t1024 * t937;
t873 = t1022 * t937 + t1024 * t930;
t872 = -t1023 * t947 + t1025 * t1043;
t871 = -t1023 * t946 + t1025 * t1044;
t870 = -t1023 * t950 + t1025 * t1060;
t869 = -t1023 * t948 + t1025 * t1059;
t858 = -t1023 * t951 + t1025 * t1067;
t857 = -t1023 * t949 + t1025 * t1068;
t856 = t1023 * t1067 + t1025 * t951;
t855 = t1023 * t1068 + t1025 * t949;
t842 = -t1023 * t933 + t1025 * t1069;
t841 = pkin(2) * t988 + pkin(8) * t953 - t1138;
t840 = -pkin(2) * t985 + pkin(8) * t955 + t1152;
t837 = t846 * t1025;
t833 = t1030 * t908 + t1035 * t907;
t826 = -pkin(1) * t971 + t1023 * t914 + t1025 * t1101;
t825 = pkin(1) * t970 + t1023 * t915 + t1025 * t1102;
t820 = t1017 * t1031 + t1036 * t834;
t819 = t1023 * t961 + t1025 * t1070;
t818 = t1023 * t1070 - t1025 * t961;
t815 = -t1022 * t858 + t1024 * t913;
t814 = -t1022 * t857 + t1024 * t912;
t813 = t1022 * t913 + t1024 * t858;
t812 = t1022 * t912 + t1024 * t857;
t803 = t1030 * t888 + t1035 * t886;
t802 = t1030 * t887 + t1035 * t885;
t778 = t1030 * t865 + t1035 * t864;
t777 = t1030 * t863 + t1035 * t862;
t766 = pkin(2) * t992 + pkin(8) * t989 + t787;
t762 = t1036 * t780 + t1119;
t761 = t1036 * t779 - t1119;
t756 = -pkin(2) * t906 + pkin(8) * t787;
t754 = -pkin(1) * t818 + t1025 * t1166;
t753 = -t1031 * t880 + t1036 * t805;
t752 = -t1031 * t879 + t1036 * t804;
t751 = -t1022 * t819 + t1024 * t846;
t750 = t1022 * t846 + t1024 * t819;
t749 = -t1023 * t833 + t1025 * t1065;
t739 = -t1036 * t785 + (-t1023 * t929 - t1025 * t930) * pkin(7);
t737 = (-t1023 * t818 - t1025 * t819) * pkin(7);
t718 = t1030 * t793 + t1035 * t791;
t712 = t1030 * t790 + t1035 * t789;
t693 = -t1031 * t931 + t1036 * t720;
t690 = -t1031 * t831 + t1036 * t861 + (-t1023 * t856 - t1025 * t858) * pkin(7);
t689 = -t1031 * t830 + t1036 * t860 + (-t1023 * t855 - t1025 * t857) * pkin(7);
t687 = -t1023 * t803 + t1025 * t1071;
t686 = -t1023 * t802 + t1025 * t1072;
t683 = -t1023 * t778 + t1025 * t1061;
t682 = -t1023 * t777 + t1025 * t1062;
t681 = -t1023 * t795 + t1025 * t1073;
t680 = t1023 * t1073 + t1025 * t795;
t679 = -t1023 * t785 + t1025 * t1074;
t678 = t1023 * t1074 + t1025 * t785;
t673 = t1030 * t760 + t1035 * t758;
t672 = t1030 * t759 + t1035 * t757;
t671 = -pkin(1) * t856 - t1023 * t840 + t1025 * t1045;
t670 = -pkin(1) * t855 - t1023 * t841 + t1025 * t1046;
t669 = -t1031 * t835 + t1036 * t713;
t668 = -pkin(1) * t929 - t1023 * t766 + t1025 * t1103;
t667 = -t1023 * t772 + t1025 * t1075;
t666 = t1023 * t1075 + t1025 * t772;
t649 = -t1031 * t800 + t1036 * t675;
t648 = -t1031 * t798 + t1036 * t674;
t643 = -t1022 * t679 + t1024 * t755;
t642 = t1022 * t755 + t1024 * t679;
t641 = -pkin(2) * t878 + pkin(8) * t796 + t1030 * t788 + t1035 * t743;
t640 = -t1022 * t681 + t1024 * t748;
t639 = t1022 * t748 + t1024 * t681;
t636 = t1030 * t717 + t1035 * t715;
t635 = t1030 * t716 + t1035 * t714;
t631 = -t1023 * t718 + t1025 * t1077;
t630 = -pkin(2) * t875 + pkin(8) * t773 + t1030 * t776 + t1035 * t740;
t625 = -t1023 * t719 + t1025 * t1076;
t624 = t1023 * t1076 + t1025 * t719;
t619 = -t1022 * t667 + t1024 * t738;
t618 = t1022 * t738 + t1024 * t667;
t612 = t1030 * t695 + t1035 * t694;
t605 = -t1023 * t712 + t1025 * t1078;
t600 = -t1031 * t782 + t1036 * t638;
t599 = -t1031 * t781 + t1036 * t637;
t597 = t1030 * t677 + t1035 * t676;
t581 = -t1031 * t728 + t1036 * t613;
t580 = -t1023 * t673 + t1025 * t1079;
t579 = -t1023 * t672 + t1025 * t1080;
t574 = -t1022 * t625 + t1024 * t688;
t573 = t1022 * t688 + t1024 * t625;
t570 = (pkin(2) * t1031 - pkin(8) * t1036) * t785 + (-t1023 * t678 - t1025 * t679) * pkin(7);
t567 = -pkin(1) * t678 - t1023 * t756 + t1025 * t1040;
t566 = -t1031 * t691 + t1036 * t598;
t557 = -t1023 * t636 + t1025 * t1081;
t556 = -t1023 * t635 + t1025 * t1082;
t550 = -t1023 * t633 + t1025 * t1083;
t549 = t1023 * t1083 + t1025 * t633;
t546 = -t1023 * t626 + t1025 * t1084;
t545 = t1023 * t1084 + t1025 * t626;
t539 = -pkin(2) * t904 + pkin(8) * t721 + t1030 * t644 + t1035 * t632;
t536 = t1030 * t595 + t1035 * t593;
t535 = t1030 * t594 + t1035 * t592;
t533 = -t1023 * t612 + t1025 * t1085;
t531 = -t1031 * t665 + t1036 * t655 + (-t1023 * t680 - t1025 * t681) * pkin(7);
t528 = t1030 * t589 + t1035 * t587;
t527 = t1030 * t588 + t1035 * t586;
t526 = -t1023 * t606 + t1025 * t1086;
t525 = t1023 * t1086 + t1025 * t606;
t521 = -t1023 * t584 + t1025 * t1088;
t520 = t1023 * t1088 + t1025 * t584;
t519 = -t1031 * t660 + t1036 * t645 + (-t1023 * t666 - t1025 * t667) * pkin(7);
t517 = -t1023 * t597 + t1025 * t1087;
t516 = -pkin(2) * t854 + pkin(8) * t585 - pkin(9) * t1153 + t1035 * t654;
t512 = -pkin(1) * t680 - t1023 * t641 + t1025 * t1047;
t510 = -t1031 * t651 + t1036 * t530;
t509 = -t1031 * t650 + t1036 * t529;
t508 = -t1022 * t550 + t1024 * t591;
t507 = t1022 * t591 + t1024 * t550;
t506 = -t1031 * t615 + t1036 * t538;
t505 = -t1031 * t614 + t1036 * t537;
t503 = -t1022 * t546 + t1024 * t590;
t502 = t1022 * t590 + t1024 * t546;
t501 = -pkin(1) * t666 - t1023 * t630 + t1025 * t1048;
t492 = -t1022 * t526 + t1024 * t575;
t491 = t1022 * t575 + t1024 * t526;
t490 = -t1022 * t521 + t1024 * t578;
t489 = t1022 * t578 + t1024 * t521;
t485 = t1030 * t552 + t1035 * t551;
t482 = -t1031 * t664 + t1036 * t542 + (-t1023 * t624 - t1025 * t625) * pkin(7);
t474 = -t1023 * t536 + t1025 * t1089;
t473 = -t1023 * t535 + t1025 * t1090;
t472 = -pkin(2) * t767 + pkin(8) * t634 + t1030 * t548 + t1035 * t534;
t471 = -t1023 * t528 + t1025 * t1091;
t470 = -t1023 * t527 + t1025 * t1092;
t469 = -pkin(2) * t763 + pkin(8) * t627 + t1030 * t547 + t1035 * t532;
t468 = -t1023 * t523 + t1025 * t1093;
t467 = t1023 * t1093 + t1025 * t523;
t466 = -t1031 * t560 + t1036 * t486;
t463 = -pkin(1) * t624 - t1023 * t539 + t1025 * t1049;
t462 = -t1023 * t514 + t1025 * t1094;
t461 = t1023 * t1094 + t1025 * t514;
t459 = -pkin(2) * t727 + pkin(8) * t607 + t1030 * t518 + t1035 * t511;
t448 = -t1023 * t494 + t1025 * t1095;
t447 = t1023 * t1095 + t1025 * t494;
t446 = -t1022 * t468 + t1024 * t500;
t445 = t1022 * t500 + t1024 * t468;
t443 = -t1031 * t558 + t1036 * t522 + (-t1023 * t520 - t1025 * t521) * pkin(7);
t442 = -t1023 * t485 + t1025 * t1096;
t441 = -t1022 * t462 + t1024 * t493;
t440 = t1022 * t493 + t1024 * t462;
t439 = -t1023 * t483 + t1025 * t1097;
t438 = t1023 * t1097 + t1025 * t483;
t437 = -pkin(1) * t520 - t1023 * t516 + t1025 * t1050;
t436 = -t1031 * t541 + t1036 * t476 + (-t1023 * t549 - t1025 * t550) * pkin(7);
t435 = -t1031 * t540 + t1036 * t475 + (-t1023 * t545 - t1025 * t546) * pkin(7);
t432 = -t1022 * t448 + t1024 * t478;
t431 = t1022 * t478 + t1024 * t448;
t429 = -t1031 * t497 + t1036 * t460 + (-t1023 * t525 - t1025 * t526) * pkin(7);
t428 = -pkin(2) * t571 + pkin(8) * t495 + t1030 * t481 + t1035 * t464;
t427 = -pkin(1) * t549 - t1023 * t472 + t1025 * t1051;
t426 = -t1022 * t439 + t1024 * t465;
t425 = t1022 * t465 + t1024 * t439;
t424 = -pkin(1) * t545 - t1023 * t469 + t1025 * t1052;
t416 = -pkin(2) * t646 + pkin(8) * t524 + t1030 * t456 + t1035 * t451;
t414 = -pkin(2) * t628 + pkin(8) * t515 + t1030 * t452 + t1035 * t444;
t413 = -pkin(1) * t525 - t1023 * t459 + t1025 * t1053;
t410 = -t1031 * t457 + t1036 * t417 + (-t1023 * t467 - t1025 * t468) * pkin(7);
t409 = -t1031 * t458 + t1036 * t430 + (-t1023 * t447 - t1025 * t448) * pkin(7);
t407 = -t1031 * t453 + t1036 * t415 + (-t1023 * t461 - t1025 * t462) * pkin(7);
t406 = -pkin(2) * t559 + pkin(8) * t484 + t1030 * t422 + t1035 * t418;
t405 = -t1023 * t420 + t1025 * t1098;
t404 = t1023 * t1098 + t1025 * t420;
t401 = -pkin(1) * t447 - t1023 * t428 + t1025 * t1054;
t400 = -pkin(1) * t467 - t1023 * t416 + t1025 * t1055;
t399 = -pkin(1) * t461 - t1023 * t414 + t1025 * t1056;
t398 = -t1022 * t405 + t1024 * t412;
t397 = t1022 * t412 + t1024 * t405;
t396 = -t1031 * t419 + t1036 * t408 + (-t1023 * t438 - t1025 * t439) * pkin(7);
t394 = -pkin(2) * t454 + pkin(8) * t421 + t1030 * t411 + t1035 * t402;
t393 = -pkin(1) * t438 - t1023 * t406 + t1025 * t1057;
t392 = -t1031 * t403 + t1036 * t395 + (-t1023 * t404 - t1025 * t405) * pkin(7);
t391 = -pkin(1) * t404 - t1023 * t394 + t1025 * t1058;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t941, 0, 0, 0, 0, 0, 0, t927, t926, 0, t751, 0, 0, 0, 0, 0, 0, t814, t815, t874, t643, 0, 0, 0, 0, 0, 0, t619, t640, t574, t490, 0, 0, 0, 0, 0, 0, t503, t508, t492, t432, 0, 0, 0, 0, 0, 0, t441, t446, t426, t398; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t940, 0, 0, 0, 0, 0, 0, t925, -t1099, 0, t750, 0, 0, 0, 0, 0, 0, t812, t813, t873, t642, 0, 0, 0, 0, 0, 0, t618, t639, t573, t489, 0, 0, 0, 0, 0, 0, t502, t507, t491, t431, 0, 0, 0, 0, 0, 0, t440, t445, t425, t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1164, 0, 0, 0, 0, 0, 0, t971, -t970, 0, t818, 0, 0, 0, 0, 0, 0, t855, t856, t929, t678, 0, 0, 0, 0, 0, 0, t666, t680, t624, t520, 0, 0, 0, 0, 0, 0, t545, t549, t525, t447, 0, 0, 0, 0, 0, 0, t461, t467, t438, t404; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1171, -t1170, -t940, -qJ(1) * t940, 0, 0, -t926, 0, t927, t1022 * t1125, -qJ(1) * t925 - t1022 * t826 + t1024 * t883, qJ(1) * t1099 - t1022 * t825 + t1024 * t884, -t1022 * t837 - t1024 * t1070, -qJ(1) * t750 - t1022 * t754 + t1024 * t737, -t1022 * t872 + t1024 * t920, -t1022 * t842 + t1024 * t903, -t1022 * t870 + t1024 * t918, -t1022 * t871 + t1024 * t919, -t1022 * t869 + t1024 * t917, -t1022 * t938 + t1024 * t960, -qJ(1) * t812 - t1022 * t670 + t1024 * t689, -qJ(1) * t813 - t1022 * t671 + t1024 * t690, -qJ(1) * t873 - t1022 * t668 + t1024 * t739, -qJ(1) * t642 - t1022 * t567 + t1024 * t570, -t1022 * t683 + t1024 * t762, -t1022 * t631 + t1024 * t693, -t1022 * t686 + t1024 * t752, -t1022 * t682 + t1024 * t761, -t1022 * t687 + t1024 * t753, -t1022 * t749 + t1024 * t820, -qJ(1) * t618 - t1022 * t501 + t1024 * t519, -qJ(1) * t639 - t1022 * t512 + t1024 * t531, -qJ(1) * t573 - t1022 * t463 + t1024 * t482, -qJ(1) * t489 - t1022 * t437 + t1024 * t443, -t1022 * t580 + t1024 * t649, -t1022 * t533 + t1024 * t581, -t1022 * t556 + t1024 * t599, -t1022 * t579 + t1024 * t648, -t1022 * t557 + t1024 * t600, -t1022 * t605 + t1024 * t669, -qJ(1) * t502 - t1022 * t424 + t1024 * t435, -qJ(1) * t507 - t1022 * t427 + t1024 * t436, -qJ(1) * t491 - t1022 * t413 + t1024 * t429, -qJ(1) * t431 - t1022 * t401 + t1024 * t409, -t1022 * t474 + t1024 * t506, -t1022 * t442 + t1024 * t466, -t1022 * t470 + t1024 * t509, -t1022 * t473 + t1024 * t505, -t1022 * t471 + t1024 * t510, -t1022 * t517 + t1024 * t566, -qJ(1) * t440 - t1022 * t399 + t1024 * t407, -qJ(1) * t445 - t1022 * t400 + t1024 * t410, -qJ(1) * t425 - t1022 * t393 + t1024 * t396, -qJ(1) * t397 - t1022 * t391 + t1024 * t392; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1170, -t1171, t941, qJ(1) * t941, 0, 0, t1099, 0, t925, -t1024 * t1125, qJ(1) * t927 + t1022 * t883 + t1024 * t826, qJ(1) * t926 + t1022 * t884 + t1024 * t825, -t1022 * t1070 + t1024 * t837, qJ(1) * t751 + t1022 * t737 + t1024 * t754, t1022 * t920 + t1024 * t872, t1022 * t903 + t1024 * t842, t1022 * t918 + t1024 * t870, t1022 * t919 + t1024 * t871, t1022 * t917 + t1024 * t869, t1022 * t960 + t1024 * t938, qJ(1) * t814 + t1022 * t689 + t1024 * t670, qJ(1) * t815 + t1022 * t690 + t1024 * t671, qJ(1) * t874 + t1022 * t739 + t1024 * t668, qJ(1) * t643 + t1022 * t570 + t1024 * t567, t1022 * t762 + t1024 * t683, t1022 * t693 + t1024 * t631, t1022 * t752 + t1024 * t686, t1022 * t761 + t1024 * t682, t1022 * t753 + t1024 * t687, t1022 * t820 + t1024 * t749, qJ(1) * t619 + t1022 * t519 + t1024 * t501, qJ(1) * t640 + t1022 * t531 + t1024 * t512, qJ(1) * t574 + t1022 * t482 + t1024 * t463, qJ(1) * t490 + t1022 * t443 + t1024 * t437, t1022 * t649 + t1024 * t580, t1022 * t581 + t1024 * t533, t1022 * t599 + t1024 * t556, t1022 * t648 + t1024 * t579, t1022 * t600 + t1024 * t557, t1022 * t669 + t1024 * t605, qJ(1) * t503 + t1022 * t435 + t1024 * t424, qJ(1) * t508 + t1022 * t436 + t1024 * t427, qJ(1) * t492 + t1022 * t429 + t1024 * t413, qJ(1) * t432 + t1022 * t409 + t1024 * t401, t1022 * t506 + t1024 * t474, t1022 * t466 + t1024 * t442, t1022 * t509 + t1024 * t470, t1022 * t505 + t1024 * t473, t1022 * t510 + t1024 * t471, t1022 * t566 + t1024 * t517, qJ(1) * t441 + t1022 * t407 + t1024 * t399, qJ(1) * t446 + t1022 * t410 + t1024 * t400, qJ(1) * t426 + t1022 * t396 + t1024 * t393, qJ(1) * t398 + t1022 * t392 + t1024 * t391; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1111, t994, 0, 0, 0, 0, t970, 0, t971, t1025 * qJDD(2), pkin(1) * t973 + t1023 * t1101 - t1025 * t914, -pkin(1) * t972 + t1023 * t1102 - t1025 * t915, t846 * t1023, pkin(1) * t819 + t1023 * t1166, t1023 * t1043 + t1025 * t947, t1023 * t1069 + t1025 * t933, t1023 * t1060 + t1025 * t950, t1023 * t1044 + t1025 * t946, t1023 * t1059 + t1025 * t948, t1064 * t1023, pkin(1) * t857 + t1023 * t1046 + t1025 * t841, pkin(1) * t858 + t1023 * t1045 + t1025 * t840, pkin(1) * t930 + t1023 * t1103 + t1025 * t766, pkin(1) * t679 + t1023 * t1040 + t1025 * t756, t1023 * t1061 + t1025 * t778, t1023 * t1077 + t1025 * t718, t1023 * t1072 + t1025 * t802, t1023 * t1062 + t1025 * t777, t1023 * t1071 + t1025 * t803, t1023 * t1065 + t1025 * t833, pkin(1) * t667 + t1023 * t1048 + t1025 * t630, pkin(1) * t681 + t1023 * t1047 + t1025 * t641, pkin(1) * t625 + t1023 * t1049 + t1025 * t539, pkin(1) * t521 + t1023 * t1050 + t1025 * t516, t1023 * t1079 + t1025 * t673, t1023 * t1085 + t1025 * t612, t1023 * t1082 + t1025 * t635, t1023 * t1080 + t1025 * t672, t1023 * t1081 + t1025 * t636, t1023 * t1078 + t1025 * t712, pkin(1) * t546 + t1023 * t1052 + t1025 * t469, pkin(1) * t550 + t1023 * t1051 + t1025 * t472, pkin(1) * t526 + t1023 * t1053 + t1025 * t459, pkin(1) * t448 + t1023 * t1054 + t1025 * t428, t1023 * t1089 + t1025 * t536, t1023 * t1096 + t1025 * t485, t1023 * t1092 + t1025 * t527, t1023 * t1090 + t1025 * t535, t1023 * t1091 + t1025 * t528, t1023 * t1087 + t1025 * t597, pkin(1) * t462 + t1023 * t1056 + t1025 * t414, pkin(1) * t468 + t1023 * t1055 + t1025 * t416, pkin(1) * t439 + t1023 * t1057 + t1025 * t406, pkin(1) * t405 + t1023 * t1058 + t1025 * t394;];
tauB_reg  = t1;
