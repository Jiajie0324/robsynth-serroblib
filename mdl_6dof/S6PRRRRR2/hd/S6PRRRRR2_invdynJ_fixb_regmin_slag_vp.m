% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6PRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRRR2_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR2_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR2_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR2_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR2_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRR2_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:45:27
% EndTime: 2019-03-09 00:45:44
% DurationCPUTime: 7.62s
% Computational Cost: add. (7073->513), mult. (15798->734), div. (0->0), fcn. (12880->18), ass. (0->286)
t227 = qJD(3) + qJD(4);
t237 = sin(qJ(4));
t242 = cos(qJ(3));
t395 = cos(qJ(4));
t312 = qJD(2) * t395;
t238 = sin(qJ(3));
t341 = qJD(2) * t238;
t414 = -t237 * t341 + t242 * t312;
t419 = t227 * t414;
t226 = qJDD(3) + qJDD(4);
t239 = sin(qJ(2));
t233 = sin(pkin(6));
t343 = qJD(1) * t233;
t319 = t239 * t343;
t397 = pkin(8) + pkin(9);
t299 = qJD(2) * t397 + t319;
t234 = cos(pkin(6));
t342 = qJD(1) * t234;
t146 = -t299 * t238 + t242 * t342;
t385 = qJD(3) * pkin(3);
t135 = t146 + t385;
t147 = t238 * t342 + t242 * t299;
t311 = qJD(4) * t395;
t339 = qJD(4) * t237;
t331 = t234 * qJDD(1);
t203 = t242 * t331;
t243 = cos(qJ(2));
t333 = qJD(1) * qJD(2);
t160 = qJDD(2) * pkin(8) + (qJDD(1) * t239 + t243 * t333) * t233;
t297 = pkin(9) * qJDD(2) + t160;
t61 = qJDD(3) * pkin(3) - qJD(3) * t147 - t297 * t238 + t203;
t67 = qJD(3) * t146 + t238 * t331 + t297 * t242;
t295 = -t135 * t339 - t147 * t311 - t237 * t67 + t395 * t61;
t21 = -pkin(4) * t226 - t295;
t374 = cos(pkin(12));
t301 = t374 * t239;
t232 = sin(pkin(12));
t356 = t232 * t243;
t171 = t234 * t301 + t356;
t300 = t374 * t243;
t357 = t232 * t239;
t173 = -t234 * t357 + t300;
t231 = qJ(3) + qJ(4);
t222 = sin(t231);
t224 = cos(t231);
t302 = t233 * t374;
t355 = t233 * t239;
t358 = t232 * t233;
t410 = g(3) * (-t222 * t355 + t224 * t234) + g(2) * (-t171 * t222 - t224 * t302) + g(1) * (-t173 * t222 + t224 * t358);
t418 = t21 + t410;
t400 = qJD(5) + qJD(6);
t417 = -t414 + t400;
t262 = t238 * t385 - t319;
t267 = -t237 * t238 + t242 * t395;
t318 = t243 * t343;
t149 = t267 * t318;
t321 = qJD(3) * t397;
t185 = t238 * t321;
t186 = t242 * t321;
t196 = t397 * t238;
t198 = t397 * t242;
t268 = -t196 * t395 - t237 * t198;
t86 = qJD(4) * t268 - t185 * t395 - t237 * t186;
t416 = t149 - t86;
t133 = t237 * t147;
t75 = t146 * t395 - t133;
t412 = pkin(3) * t311 - t75;
t139 = t227 * t267;
t349 = t237 * t242;
t184 = t238 * t395 + t349;
t140 = t227 * t184;
t415 = -pkin(4) * t140 + pkin(10) * t139 - t262;
t178 = -qJD(2) * t349 - t238 * t312;
t236 = sin(qJ(5));
t241 = cos(qJ(5));
t150 = -t178 * t236 - t241 * t227;
t235 = sin(qJ(6));
t240 = cos(qJ(6));
t275 = t178 * t241 - t227 * t236;
t276 = t150 * t235 + t240 * t275;
t82 = t240 * t150 - t235 * t275;
t413 = t276 * t82;
t352 = t235 * t241;
t183 = t236 * t240 + t352;
t411 = t417 * t183;
t181 = t235 * t236 - t240 * t241;
t346 = t417 * t181;
t409 = t276 ^ 2 - t82 ^ 2;
t334 = qJD(6) * t240;
t335 = qJD(6) * t235;
t336 = qJD(5) * t241;
t337 = qJD(5) * t236;
t303 = qJDD(2) * t395;
t329 = t242 * qJDD(2);
t96 = t237 * t329 + t238 * t303 + t419;
t52 = t178 * t337 + t236 * t226 + t227 * t336 + t241 * t96;
t53 = -qJD(5) * t275 - t241 * t226 + t236 * t96;
t16 = -t150 * t334 - t235 * t53 + t240 * t52 + t275 * t335;
t169 = qJD(5) - t414;
t166 = qJD(6) + t169;
t408 = t166 * t82 + t16;
t128 = t171 * t224 - t222 * t302;
t130 = t173 * t224 + t222 * t358;
t164 = t222 * t234 + t224 * t355;
t170 = -t234 * t300 + t357;
t172 = t234 * t356 + t301;
t230 = qJ(5) + qJ(6);
t221 = sin(t230);
t223 = cos(t230);
t134 = t395 * t147;
t73 = t237 * t135 + t134;
t65 = pkin(10) * t227 + t73;
t220 = -pkin(3) * t242 - pkin(2);
t167 = qJD(2) * t220 - t318;
t95 = -pkin(4) * t414 + pkin(10) * t178 + t167;
t42 = t236 * t95 + t241 * t65;
t28 = -pkin(11) * t150 + t42;
t26 = t28 * t335;
t353 = t233 * t243;
t72 = t135 * t395 - t133;
t64 = -t227 * pkin(4) - t72;
t47 = t150 * pkin(5) + t64;
t407 = t47 * t82 - g(1) * (-t130 * t223 - t172 * t221) - g(2) * (-t128 * t223 - t170 * t221) - g(3) * (-t164 * t223 + t221 * t353) + t26;
t251 = t135 * t311 - t147 * t339 + t237 * t61 + t395 * t67;
t20 = t226 * pkin(10) + t251;
t310 = t239 * t333;
t284 = -qJDD(1) * t353 + t233 * t310;
t332 = qJD(2) * qJD(3);
t309 = t238 * t332;
t126 = pkin(3) * t309 + qJDD(2) * t220 + t284;
t330 = t238 * qJDD(2);
t283 = t237 * t330 - t242 * t303;
t97 = qJD(2) * t140 + t283;
t37 = pkin(4) * t97 - pkin(10) * t96 + t126;
t36 = t241 * t37;
t254 = -qJD(5) * t42 - t236 * t20 + t36;
t92 = qJDD(5) + t97;
t3 = pkin(5) * t92 - pkin(11) * t52 + t254;
t270 = -t241 * t20 - t236 * t37 - t95 * t336 + t337 * t65;
t4 = -pkin(11) * t53 - t270;
t322 = -t235 * t4 + t240 * t3;
t41 = -t236 * t65 + t241 * t95;
t27 = pkin(11) * t275 + t41;
t22 = pkin(5) * t169 + t27;
t383 = t240 * t28;
t7 = t22 * t235 + t383;
t406 = t47 * t276 - g(1) * (-t130 * t221 + t172 * t223) - g(2) * (-t128 * t221 + t170 * t223) - g(3) * (-t164 * t221 - t223 * t353) - t7 * qJD(6) + t322;
t252 = qJD(6) * t276 - t235 * t52 - t240 * t53;
t405 = -t166 * t276 + t252;
t404 = t149 * t236 - t241 * t415;
t74 = t237 * t146 + t134;
t293 = pkin(3) * t339 - t74;
t155 = -t237 * t196 + t198 * t395;
t375 = qJD(4) * t155 - t184 * t318 - t237 * t185 + t186 * t395;
t114 = t183 * t184;
t125 = -pkin(4) * t267 - pkin(10) * t184 + t220;
t403 = -t125 * t336 + t155 * t337 + t415 * t236 + t241 * t416;
t367 = t414 * t236;
t402 = (t337 - t367) * pkin(5);
t124 = -pkin(4) * t178 - pkin(10) * t414;
t106 = pkin(3) * t341 + t124;
t401 = t236 * t106 - t241 * t412;
t244 = qJD(3) ^ 2;
t290 = g(1) * t172 + g(2) * t170;
t399 = 0.2e1 * qJDD(2) * pkin(2) - pkin(8) * t244 + t233 * (-g(3) * t243 + t310) - t284 + t290;
t307 = qJD(6) * t22 + t4;
t398 = t235 * t3 + t240 * t307;
t396 = -pkin(10) - pkin(11);
t391 = g(3) * t233;
t389 = t241 * pkin(5);
t217 = pkin(3) * t237 + pkin(10);
t388 = -pkin(11) - t217;
t386 = qJD(2) * pkin(2);
t384 = t236 * t52;
t382 = t241 * t92;
t381 = t64 * t414;
t145 = t241 * t155;
t372 = t139 * t241;
t380 = -pkin(11) * t372 + pkin(5) * t140 - t236 * t86 + (-t145 + (pkin(11) * t184 - t125) * t236) * qJD(5) + t404;
t351 = t236 * t139;
t266 = t184 * t336 + t351;
t379 = pkin(11) * t266 + t403;
t378 = t402 + t293;
t377 = pkin(5) * t266 + t375;
t376 = t236 * t124 + t241 * t72;
t371 = t150 * t169;
t370 = t275 * t169;
t369 = t166 * t178;
t368 = t169 * t178;
t366 = t414 * t241;
t365 = t178 * t414;
t364 = t184 * t236;
t363 = t184 * t241;
t362 = t221 * t224;
t361 = t223 * t224;
t360 = t224 * t236;
t359 = t224 * t243;
t354 = t233 * t242;
t350 = t236 * t243;
t348 = qJDD(1) - g(3);
t345 = t236 * t125 + t145;
t228 = t238 ^ 2;
t344 = -t242 ^ 2 + t228;
t340 = qJD(2) * t239;
t338 = qJD(5) * t169;
t328 = pkin(11) * t367;
t324 = t233 * t350;
t323 = t241 * t353;
t57 = t64 * t337;
t320 = qJD(5) * t396;
t316 = t233 * t340;
t315 = qJD(2) * t353;
t313 = t184 * t337;
t308 = t243 * t332;
t306 = t41 * t178 + t57;
t304 = qJD(5) * t388;
t296 = t169 * t241;
t218 = -pkin(3) * t395 - pkin(4);
t292 = -t73 + t402;
t291 = -t178 * pkin(5) - pkin(11) * t366;
t289 = g(1) * t173 + g(2) * t171;
t179 = t388 * t236;
t288 = -qJD(6) * t179 - t236 * t304 - t328 + t401;
t100 = t241 * t106;
t225 = t241 * pkin(11);
t180 = t217 * t241 + t225;
t287 = qJD(6) * t180 + t236 * t412 - t241 * t304 + t100 + t291;
t195 = t396 * t236;
t286 = -qJD(6) * t195 - t236 * t320 - t328 + t376;
t113 = t241 * t124;
t197 = pkin(10) * t241 + t225;
t285 = qJD(6) * t197 - t236 * t72 - t241 * t320 + t113 + t291;
t282 = -t217 * t92 - t381;
t119 = t241 * t125;
t48 = -pkin(5) * t267 - pkin(11) * t363 - t155 * t236 + t119;
t56 = -pkin(11) * t364 + t345;
t281 = t235 * t48 + t240 * t56;
t174 = t234 * t242 - t238 * t355;
t175 = t234 * t238 + t239 * t354;
t110 = t237 * t174 + t175 * t395;
t271 = -t110 * t241 + t324;
t93 = -t110 * t236 - t323;
t280 = t235 * t271 + t240 * t93;
t279 = t235 * t93 - t240 * t271;
t245 = qJD(2) ^ 2;
t274 = qJDD(2) * t243 - t239 * t245;
t273 = -g(1) * t232 + g(2) * t374;
t269 = t174 * t395 - t237 * t175;
t265 = -t313 + t372;
t261 = -t42 * t178 + t236 * t418 + t64 * t336;
t258 = g(3) * t353 - t290;
t191 = -t318 - t386;
t257 = -qJD(2) * t191 - t160 + t289;
t256 = t258 * t224;
t11 = pkin(5) * t53 + t21;
t255 = t11 * t183 - t7 * t178 + t221 * t410 - t346 * t47;
t250 = -pkin(8) * qJDD(3) + (t191 + t318 - t386) * qJD(3);
t249 = t167 * t178 + t295 - t410;
t6 = t22 * t240 - t235 * t28;
t248 = t11 * t181 + t6 * t178 - t223 * t410 + t411 * t47;
t246 = g(1) * t130 + g(2) * t128 + g(3) * t164 - t167 * t414 - t251;
t219 = -pkin(4) - t389;
t193 = t218 - t389;
t144 = -qJD(3) * t175 - t238 * t315;
t143 = qJD(3) * t174 + t242 * t315;
t115 = t181 * t184;
t103 = pkin(5) * t364 - t268;
t98 = t178 ^ 2 - t414 ^ 2;
t91 = qJDD(6) + t92;
t69 = -t283 + (-qJD(2) * t184 - t178) * t227;
t68 = t96 - t419;
t46 = qJD(4) * t110 + t237 * t143 - t144 * t395;
t45 = qJD(4) * t269 + t143 * t395 + t237 * t144;
t32 = t139 * t352 - t235 * t313 - t335 * t364 + (t363 * t400 + t351) * t240;
t31 = -t114 * t400 - t181 * t139;
t30 = t169 * t296 - t178 * t275 + t236 * t92;
t29 = -t169 ^ 2 * t236 - t150 * t178 + t382;
t25 = -t275 * t296 + t384;
t24 = qJD(5) * t271 - t236 * t45 + t241 * t316;
t23 = qJD(5) * t93 + t236 * t316 + t241 * t45;
t15 = -t166 * t411 - t178 * t82 - t181 * t91;
t14 = -t166 * t346 - t178 * t276 + t183 * t91;
t8 = (t52 - t371) * t241 + (-t53 + t370) * t236;
t5 = t16 * t183 + t276 * t346;
t1 = -t16 * t181 + t183 * t252 + t276 * t411 + t346 * t82;
t2 = [t348, 0, t274 * t233 (-qJDD(2) * t239 - t243 * t245) * t233, 0, 0, 0, 0, 0, qJD(3) * t144 + qJDD(3) * t174 + (-t238 * t308 + t242 * t274) * t233, -qJD(3) * t143 - qJDD(3) * t175 + (-t238 * t274 - t242 * t308) * t233, 0, 0, 0, 0, 0, t269 * t226 - t227 * t46 + (-t243 * t97 - t340 * t414) * t233, -t110 * t226 - t227 * t45 + (-t178 * t340 - t243 * t96) * t233, 0, 0, 0, 0, 0, t150 * t46 + t169 * t24 - t269 * t53 + t92 * t93, -t169 * t23 - t269 * t52 + t271 * t92 - t275 * t46, 0, 0, 0, 0, 0 (-qJD(6) * t279 - t23 * t235 + t24 * t240) * t166 + t280 * t91 + t46 * t82 + t269 * t252 -(qJD(6) * t280 + t23 * t240 + t235 * t24) * t166 - t279 * t91 - t46 * t276 - t269 * t16; 0, qJDD(2), t348 * t353 + t290, -t348 * t355 + t289, qJDD(2) * t228 + 0.2e1 * t242 * t309, 0.2e1 * t238 * t329 - 0.2e1 * t332 * t344, qJDD(3) * t238 + t242 * t244, qJDD(3) * t242 - t238 * t244, 0, t250 * t238 + t242 * t399, -t238 * t399 + t250 * t242, -t139 * t178 + t184 * t96, t139 * t414 + t140 * t178 - t184 * t97 + t267 * t96, t139 * t227 + t184 * t226, -t140 * t227 + t226 * t267, 0, -t126 * t267 + t140 * t167 + t220 * t97 + t226 * t268 - t227 * t375 - t262 * t414 - t256, t126 * t184 + t139 * t167 - t155 * t226 - t262 * t178 + t220 * t96 + t258 * t222 + t227 * t416, -t265 * t275 + t363 * t52 (-t150 * t241 + t236 * t275) * t139 + (-t384 - t241 * t53 + (t150 * t236 + t241 * t275) * qJD(5)) * t184, -t140 * t275 + t169 * t265 - t267 * t52 + t363 * t92, -t140 * t150 - t169 * t266 + t267 * t53 - t364 * t92, t140 * t169 - t267 * t92, t119 * t92 + t41 * t140 - t268 * t53 - t36 * t267 + t404 * t169 + t375 * t150 + (-t256 + (-t155 * t169 + t184 * t64 + t267 * t65) * qJD(5)) * t241 + ((-qJD(5) * t125 - t86) * t169 - t155 * t92 - (-qJD(5) * t95 - t20) * t267 + t21 * t184 + t64 * t139 - g(3) * t355 - t289) * t236, -t345 * t92 - t270 * t267 - t42 * t140 - t268 * t52 + t64 * t372 - g(1) * (t172 * t360 + t173 * t241) - g(2) * (t170 * t360 + t171 * t241) - (-t224 * t350 + t239 * t241) * t391 + (t21 * t241 - t57) * t184 + t403 * t169 - t375 * t275, -t115 * t16 - t276 * t31, -t114 * t16 - t115 * t252 + t276 * t32 - t31 * t82, -t115 * t91 - t140 * t276 - t16 * t267 + t166 * t31, -t114 * t91 - t140 * t82 - t166 * t32 - t252 * t267, t140 * t166 - t267 * t91 (-t235 * t56 + t240 * t48) * t91 - t322 * t267 + t6 * t140 - t103 * t252 + t11 * t114 + t47 * t32 - g(1) * (-t172 * t361 + t173 * t221) - g(2) * (-t170 * t361 + t171 * t221) + t377 * t82 - (t221 * t239 + t223 * t359) * t391 + (t235 * t379 + t240 * t380) * t166 + (-t166 * t281 + t267 * t7) * qJD(6), -t281 * t91 + (-t26 + t398) * t267 - t7 * t140 + t103 * t16 - t11 * t115 + t47 * t31 - g(1) * (t172 * t362 + t173 * t223) - g(2) * (t170 * t362 + t171 * t223) - t377 * t276 - (-t221 * t359 + t223 * t239) * t391 + ((-qJD(6) * t48 + t379) * t240 + (qJD(6) * t56 - t380) * t235) * t166; 0, 0, 0, 0, -t238 * t245 * t242, t344 * t245, t330, t329, qJDD(3), -g(3) * t174 + t238 * t257 + t273 * t354 + t203, g(3) * t175 + (-t233 * t273 - t331) * t238 + t257 * t242, t365, t98, t68, t69, t226, t74 * t227 + (t226 * t395 - t227 * t339 + t341 * t414) * pkin(3) + t249, t75 * t227 + (t178 * t341 - t226 * t237 - t227 * t311) * pkin(3) + t246, t25, t8, t30, t29, t368, -t100 * t169 + t218 * t53 + t293 * t150 + (-t169 * t412 + t282) * t236 + (-t217 * t338 - t418) * t241 + t306, t218 * t52 + t282 * t241 - t293 * t275 + (t217 * t337 + t401) * t169 + t261, t5, t1, t14, t15, t369 (t179 * t240 - t180 * t235) * t91 - t193 * t252 + t378 * t82 + (t235 * t288 - t240 * t287) * t166 + t248 -(t179 * t235 + t180 * t240) * t91 + t193 * t16 - t378 * t276 + (t235 * t287 + t240 * t288) * t166 + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t365, t98, t68, t69, t226, t227 * t73 + t249, t72 * t227 + t246, t25, t8, t30, t29, t368, -pkin(4) * t53 - t113 * t169 - t73 * t150 + (-pkin(10) * t92 + t169 * t72 - t381) * t236 + (-pkin(10) * t338 - t418) * t241 + t306, -pkin(4) * t52 + t376 * t169 + t73 * t275 - t64 * t366 + (t169 * t337 - t382) * pkin(10) + t261, t5, t1, t14, t15, t369 (t195 * t240 - t197 * t235) * t91 - t219 * t252 + t292 * t82 + (t235 * t286 - t240 * t285) * t166 + t248 -(t195 * t235 + t197 * t240) * t91 + t219 * t16 - t292 * t276 + (t235 * t285 + t240 * t286) * t166 + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t275 * t150, -t150 ^ 2 + t275 ^ 2, t52 + t371, -t53 - t370, t92, t42 * t169 + t64 * t275 - g(1) * (-t130 * t236 + t172 * t241) - g(2) * (-t128 * t236 + t170 * t241) - g(3) * (-t164 * t236 - t323) + t254, t41 * t169 + t64 * t150 - g(1) * (-t130 * t241 - t172 * t236) - g(2) * (-t128 * t241 - t170 * t236) - g(3) * (-t164 * t241 + t324) + t270, -t413, t409, t408, t405, t91 -(-t235 * t27 - t383) * t166 + (-t166 * t335 + t240 * t91 + t275 * t82) * pkin(5) + t406 (-t166 * t28 - t3) * t235 + (t166 * t27 - t307) * t240 + (-t166 * t334 - t235 * t91 - t275 * t276) * pkin(5) + t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t413, t409, t408, t405, t91, t166 * t7 + t406, t166 * t6 - t398 + t407;];
tau_reg  = t2;
