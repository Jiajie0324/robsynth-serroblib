% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRPR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRPR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:33:01
% EndTime: 2019-03-08 19:33:12
% DurationCPUTime: 7.25s
% Computational Cost: add. (6528->546), mult. (15422->758), div. (0->0), fcn. (12731->16), ass. (0->262)
t213 = sin(pkin(6));
t211 = sin(pkin(11));
t215 = cos(pkin(11));
t221 = sin(qJ(2));
t223 = cos(qJ(2));
t256 = t211 * t223 + t215 * t221;
t133 = t256 * t213;
t120 = qJD(1) * t133;
t220 = sin(qJ(4));
t222 = cos(qJ(4));
t262 = pkin(4) * t220 - qJ(5) * t222;
t141 = qJD(4) * t262 - qJD(5) * t220;
t368 = t120 - t141;
t308 = qJD(1) * t213;
t289 = t221 * t308;
t170 = t211 * t289;
t288 = t223 * t308;
t123 = t215 * t288 - t170;
t210 = sin(pkin(12));
t214 = cos(pkin(12));
t199 = pkin(2) * t211 + pkin(8);
t300 = qJD(4) * t220;
t284 = t199 * t300;
t331 = t210 * t222;
t342 = t123 * t331 + t210 * t284 - t214 * t368;
t323 = t214 * t222;
t367 = t123 * t323 + t210 * t368;
t205 = t222 * qJDD(2);
t297 = qJD(2) * qJD(4);
t208 = t220 ^ 2;
t209 = t222 ^ 2;
t310 = t208 - t209;
t355 = -t220 * t205 + t297 * t310;
t366 = t355 * t214;
t301 = qJD(4) * t214;
t304 = qJD(2) * t220;
t151 = -t210 * t304 + t301;
t302 = qJD(4) * t210;
t152 = t214 * t304 + t302;
t219 = sin(qJ(6));
t354 = cos(qJ(6));
t93 = -t354 * t151 + t152 * t219;
t365 = t93 ^ 2;
t96 = t219 * t151 + t354 * t152;
t364 = t96 ^ 2;
t253 = pkin(5) * t220 - pkin(9) * t323;
t363 = t253 * qJD(4) + t342;
t324 = t214 * t220;
t362 = -(-pkin(9) * t331 - t199 * t324) * qJD(4) + t367;
t303 = qJD(2) * t222;
t195 = -qJD(6) + t303;
t361 = t195 * t93;
t305 = qJD(2) * t213;
t280 = qJD(1) * t305;
t296 = qJDD(1) * t213;
t360 = t221 * t296 + t223 * t280;
t278 = t222 * t297;
t294 = t220 * qJDD(2);
t295 = qJDD(4) * t210;
t117 = t295 + (t278 + t294) * t214;
t299 = qJD(4) * t222;
t246 = t117 * t220 + t152 * t299;
t359 = t210 * t246;
t281 = qJD(6) * t354;
t298 = qJD(6) * t219;
t358 = -t210 * t298 + t214 * t281;
t357 = t220 * t297 - t205;
t356 = -qJDD(4) * pkin(4) + qJDD(5);
t318 = t223 * t215;
t156 = t211 * t221 - t318;
t212 = sin(pkin(10));
t216 = cos(pkin(10));
t217 = cos(pkin(6));
t320 = t217 * t223;
t321 = t217 * t221;
t312 = -t211 * t320 - t215 * t321;
t87 = -t216 * t156 + t212 * t312;
t82 = t212 * t156 + t216 * t312;
t165 = qJD(2) * pkin(2) + t288;
t110 = t211 * t165 + t215 * t289;
t105 = qJD(2) * pkin(8) + t110;
t193 = qJD(1) * t217 + qJD(3);
t335 = t193 * t220;
t74 = t105 * t222 + t335;
t68 = qJD(4) * qJ(5) + t74;
t109 = t165 * t215 - t170;
t263 = pkin(4) * t222 + qJ(5) * t220;
t252 = -pkin(3) - t263;
t81 = qJD(2) * t252 - t109;
t29 = -t210 * t68 + t214 * t81;
t22 = -pkin(5) * t303 - pkin(9) * t152 + t29;
t30 = t210 * t81 + t214 * t68;
t27 = pkin(9) * t151 + t30;
t250 = t219 * t27 - t354 * t22;
t190 = t217 * qJDD(1) + qJDD(3);
t187 = t223 * t296;
t340 = qJDD(2) * pkin(2);
t127 = -t221 * t280 + t187 + t340;
t66 = t211 * t127 + t360 * t215;
t60 = qJDD(2) * pkin(8) + t66;
t293 = t220 * t190 + t193 * t299 + t222 * t60;
t98 = t220 * t105;
t20 = qJDD(4) * qJ(5) + (qJD(5) - t98) * qJD(4) + t293;
t291 = -t215 * t127 + t360 * t211;
t39 = qJD(2) * t141 + qJDD(2) * t252 + t291;
t10 = -t20 * t210 + t214 * t39;
t6 = t357 * pkin(5) - pkin(9) * t117 + t10;
t11 = t214 * t20 + t210 * t39;
t186 = t210 * t294;
t116 = -qJDD(4) * t214 + t210 * t278 + t186;
t9 = -pkin(9) * t116 + t11;
t1 = -t250 * qJD(6) + t219 * t6 + t354 * t9;
t353 = pkin(2) * t215;
t352 = pkin(5) * t116;
t351 = pkin(5) * t210;
t350 = t96 * t93;
t349 = pkin(9) + qJ(5);
t148 = t252 - t353;
t137 = t214 * t148;
t76 = -pkin(9) * t324 + t137 + (-t199 * t210 - pkin(5)) * t222;
t101 = t210 * t148 + t199 * t323;
t89 = -pkin(9) * t210 * t220 + t101;
t33 = -t219 * t89 + t354 * t76;
t348 = t33 * qJD(6) + t363 * t219 - t362 * t354;
t34 = t219 * t76 + t354 * t89;
t347 = -t34 * qJD(6) + t362 * t219 + t363 * t354;
t319 = t219 * t210;
t247 = t354 * t214 - t319;
t135 = t247 * t220;
t271 = t354 * t116 + t219 * t117;
t32 = qJD(6) * t96 + t271;
t157 = t354 * t210 + t219 * t214;
t144 = t157 * qJD(6);
t283 = t214 * t299;
t79 = t220 * t144 - t354 * t283 + t299 * t319;
t346 = -t135 * t32 + t79 * t93;
t134 = t157 * t220;
t154 = qJDD(6) + t357;
t237 = t222 * t157;
t80 = qJD(4) * t237 + t358 * t220;
t345 = -t134 * t154 + t80 * t195;
t176 = t349 * t210;
t177 = t349 * t214;
t107 = -t354 * t176 - t219 * t177;
t160 = t262 * qJD(2);
t73 = t193 * t222 - t98;
t43 = t214 * t160 - t210 * t73;
t40 = qJD(2) * t253 + t43;
t285 = t210 * t303;
t44 = t210 * t160 + t214 * t73;
t42 = -pkin(9) * t285 + t44;
t344 = qJD(5) * t247 + qJD(6) * t107 - t219 * t40 - t354 * t42;
t108 = -t219 * t176 + t354 * t177;
t343 = -qJD(5) * t157 - qJD(6) * t108 + t219 * t42 - t354 * t40;
t341 = -t214 * t284 - t367;
t338 = t116 * t222;
t337 = t123 * t220;
t336 = t151 * t220;
t207 = pkin(12) + qJ(6);
t203 = sin(t207);
t334 = t203 * t222;
t204 = cos(t207);
t333 = t204 * t222;
t225 = qJD(2) ^ 2;
t332 = t209 * t225;
t329 = t212 * t221;
t328 = t213 * t220;
t327 = t213 * t221;
t326 = t213 * t222;
t325 = t213 * t223;
t317 = qJDD(1) - g(3);
t316 = qJD(2) * t237 - t144;
t315 = t247 * t303 - t358;
t314 = -t116 * t324 + t151 * t283;
t313 = t209 * t210 * t297 + t222 * t186;
t132 = t211 * t327 - t213 * t318;
t311 = pkin(2) * t325 - t132 * pkin(3);
t307 = qJD(2) * t123;
t306 = qJD(2) * t210;
t292 = t216 * t320;
t290 = pkin(8) + t351;
t287 = t152 * t303;
t286 = t208 * t306;
t277 = t210 * t205;
t276 = t214 * t205;
t273 = t199 + t351;
t31 = t219 * t116 - t354 * t117 - t151 * t281 + t152 * t298;
t272 = t222 * t31 + t96 * t300;
t270 = -t117 * t222 + t152 * t300;
t269 = t105 * t299 - t222 * t190 + t193 * t300 + t220 * t60;
t266 = t220 * t278;
t265 = pkin(8) * t133 + t311;
t264 = -t134 * t31 + t80 * t96;
t261 = -t10 * t210 + t11 * t214;
t260 = -t210 * t29 + t214 * t30;
t259 = t220 * t73 - t222 * t74;
t258 = -t135 * t154 - t195 * t79;
t103 = t133 * t222 + t217 * t220;
t102 = t133 * t220 - t217 * t222;
t200 = pkin(5) * t214 + pkin(4);
t257 = t200 * t222 + t220 * t349;
t178 = pkin(2) * t292;
t240 = t156 * t217;
t83 = -t212 * t256 - t216 * t240;
t255 = -pkin(2) * t329 + t83 * pkin(3) + t178;
t254 = qJD(2) * (-t151 + t301);
t48 = -t103 * t210 + t132 * t214;
t49 = t103 * t214 + t132 * t210;
t18 = -t219 * t49 + t354 * t48;
t8 = t219 * t22 + t354 * t27;
t19 = t219 * t48 + t354 * t49;
t249 = t222 * t32 - t300 * t93;
t248 = -t212 * t320 - t216 * t221;
t54 = t216 * t326 - t220 * t82;
t56 = -t212 * t326 + t220 * t87;
t245 = g(1) * t56 + g(2) * t54 + g(3) * t102;
t55 = -t216 * t328 - t222 * t82;
t57 = t212 * t328 + t222 * t87;
t244 = g(1) * t57 + g(2) * t55 + g(3) * t103;
t86 = t212 * t240 - t216 * t256;
t243 = g(1) * t86 + g(2) * t83 - g(3) * t132;
t242 = -g(1) * t87 + g(2) * t82 - g(3) * t133;
t241 = -g(3) * t217 + (-g(1) * t212 + g(2) * t216) * t213;
t64 = -qJD(4) * pkin(4) + qJD(5) - t73;
t239 = -pkin(8) * t82 + t255;
t21 = t269 + t356;
t238 = -t21 + t245;
t236 = -qJ(5) * t300 + (qJD(5) - t64) * t222;
t235 = pkin(2) * t248 + t86 * pkin(3);
t233 = -qJD(2) * t120 + t243;
t104 = -qJD(2) * pkin(3) - t109;
t201 = -pkin(3) - t353;
t232 = -qJDD(4) * t199 + (qJD(2) * t201 + t104 + t123) * qJD(4);
t231 = t245 - t269;
t230 = pkin(8) * t87 + t235;
t229 = -g(1) * t248 - g(3) * t325;
t2 = -qJD(6) * t8 - t219 * t9 + t354 * t6;
t25 = -t105 * t300 + t293;
t228 = t269 * t220 + t25 * t222 + (-t220 * t74 - t222 * t73) * qJD(4);
t227 = -t231 + t356;
t224 = qJD(4) ^ 2;
t59 = -qJDD(2) * pkin(3) + t291;
t226 = qJDD(2) * t201 + t199 * t224 + t233 + t59;
t192 = t220 * t225 * t222;
t173 = qJDD(4) * t222 - t220 * t224;
t172 = qJDD(4) * t220 + t222 * t224;
t149 = qJDD(2) * t209 - 0.2e1 * t266;
t140 = t273 * t220;
t131 = t273 * t299;
t122 = t156 * t305;
t121 = qJD(2) * t133;
t100 = -t199 * t331 + t137;
t58 = t335 + (pkin(5) * t306 + t105) * t222;
t47 = -qJD(4) * t102 - t122 * t222;
t46 = qJD(4) * t103 - t122 * t220;
t45 = -pkin(5) * t151 + t64;
t36 = t121 * t210 + t214 * t47;
t35 = t121 * t214 - t210 * t47;
t16 = t21 + t352;
t4 = -t19 * qJD(6) - t219 * t36 + t354 * t35;
t3 = t18 * qJD(6) + t219 * t35 + t354 * t36;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t317, 0, 0, 0, 0, 0, 0 (qJDD(2) * t223 - t221 * t225) * t213 (-qJDD(2) * t221 - t223 * t225) * t213, 0, -g(3) + (t217 ^ 2 + (t221 ^ 2 + t223 ^ 2) * t213 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(2) * t121 - qJDD(2) * t132, qJD(2) * t122 - qJDD(2) * t133, 0, -t109 * t121 - t110 * t122 + t132 * t291 + t133 * t66 + t190 * t217 - g(3), 0, 0, 0, 0, 0, 0, -t132 * t205 - qJD(4) * t46 - qJDD(4) * t102 + (-t121 * t222 + t132 * t300) * qJD(2), t132 * t294 - qJD(4) * t47 - qJDD(4) * t103 + (t121 * t220 + t132 * t299) * qJD(2) (t102 * t220 + t103 * t222) * qJDD(2) + (t220 * t46 + t222 * t47 + (t102 * t222 - t103 * t220) * qJD(4)) * qJD(2), t102 * t269 + t103 * t25 + t104 * t121 + t132 * t59 - t46 * t73 + t47 * t74 - g(3), 0, 0, 0, 0, 0, 0, -t48 * t205 + t102 * t116 - t151 * t46 + (-t222 * t35 + t300 * t48) * qJD(2), t49 * t205 + t102 * t117 + t152 * t46 + (t222 * t36 - t300 * t49) * qJD(2), -t116 * t49 - t117 * t48 + t151 * t36 - t152 * t35, t10 * t48 + t102 * t21 + t11 * t49 + t29 * t35 + t30 * t36 + t46 * t64 - g(3), 0, 0, 0, 0, 0, 0, t102 * t32 + t154 * t18 - t195 * t4 + t46 * t93, -t102 * t31 - t154 * t19 + t195 * t3 + t46 * t96, t18 * t31 - t19 * t32 - t3 * t93 - t4 * t96, t1 * t19 + t102 * t16 + t18 * t2 - t250 * t4 + t3 * t8 + t45 * t46 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t187 - g(2) * (t292 - t329) + t229, -g(1) * (t212 * t321 - t216 * t223) - g(2) * (-t212 * t223 - t216 * t321) - t317 * t327, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t215 * t340 - t233 - t291, -t211 * t340 - t242 + t307 - t66, 0, -g(2) * t178 + t109 * t120 - t110 * t123 + (g(2) * t329 + t66 * t211 - t215 * t291 + t229) * pkin(2), qJDD(2) * t208 + 0.2e1 * t266, -0.2e1 * t355, t172, t149, t173, 0, t220 * t232 - t222 * t226, t220 * t226 + t222 * t232, t228 + t242 + (qJDD(2) * t199 - t307) * (t208 + t209) -g(1) * t230 - g(2) * t239 - g(3) * t265 - t104 * t120 + t123 * t259 + t199 * t228 + t59 * t201, t246 * t214, t314 - t359, t270 + t366 (t116 * t220 - t151 * t299) * t210, t338 + (-t286 + t336) * qJD(4) + t313, t149, t242 * t210 + (t199 * t116 + t123 * t151 + t21 * t210 + (qJD(2) * t100 + t29) * qJD(4)) * t220 + (-t100 * qJDD(2) - t10 + (-t151 * t199 + t210 * t64) * qJD(4) - t342 * qJD(2) - t243 * t214) * t222, t242 * t214 + (t199 * t117 - t123 * t152 + t21 * t214 + (-qJD(2) * t101 - t30) * qJD(4)) * t220 + (t101 * qJDD(2) + t11 + (t152 * t199 + t214 * t64) * qJD(4) + t341 * qJD(2) + t243 * t210) * t222, -t100 * t117 - t101 * t116 - t342 * t152 + t341 * t151 + (-t210 * t30 - t214 * t29) * t299 + (-t10 * t214 - t11 * t210 - t243) * t220, t11 * t101 + t10 * t100 - t64 * t337 - g(1) * (t263 * t86 + t230) - g(2) * (t263 * t83 + t239) - g(3) * (-t132 * t263 + t265) + t341 * t30 + t342 * t29 + (t21 * t220 + t299 * t64) * t199, -t135 * t31 - t79 * t96, -t264 + t346, -t258 + t272, t134 * t32 + t80 * t93, t249 + t345, -t154 * t222 - t195 * t300, t33 * t154 - t2 * t222 + t131 * t93 + t140 * t32 + t16 * t134 + t45 * t80 - g(1) * (t203 * t87 + t333 * t86) - g(2) * (-t203 * t82 + t333 * t83) - g(3) * (-t132 * t333 + t133 * t203) + (-qJD(4) * t250 - t123 * t93) * t220 - t347 * t195, -t34 * t154 + t1 * t222 + t131 * t96 - t140 * t31 + t16 * t135 - t45 * t79 - g(1) * (t204 * t87 - t334 * t86) - g(2) * (-t204 * t82 - t334 * t83) - g(3) * (t132 * t334 + t133 * t204) + (-qJD(4) * t8 - t123 * t96) * t220 + t348 * t195, -t1 * t134 - t135 * t2 - t243 * t220 - t250 * t79 + t31 * t33 - t32 * t34 - t347 * t96 - t348 * t93 - t8 * t80, t1 * t34 + t2 * t33 + t16 * t140 - g(1) * (t257 * t86 + t290 * t87 + t235) - g(2) * (t257 * t83 - t290 * t82 + t255) - g(3) * (-t132 * t257 + t133 * t290 + t311) + t348 * t8 - t347 * t250 + (t131 - t337) * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t241 + t190, 0, 0, 0, 0, 0, 0, t173, -t172, 0, -qJD(4) * t259 + t220 * t25 - t222 * t269 + t241, 0, 0, 0, 0, 0, 0, -t338 + (-t286 - t336) * qJD(4) + t313, t270 - t366, t314 + t359, -t21 * t222 + t261 * t220 + (t220 * t64 + t222 * t260) * qJD(4) + t241, 0, 0, 0, 0, 0, 0, -t249 + t345, t258 + t272, t264 + t346, t1 * t135 - t134 * t2 - t16 * t222 + t250 * t80 + t300 * t45 - t79 * t8 + t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t192, t310 * t225, t294, t192, t205, qJDD(4), qJD(4) * t74 - t104 * t304 + t231, -t104 * t303 + (t73 + t98) * qJD(4) + t244 - t293, 0, 0, t117 * t210 - t214 * t287, -t116 * t210 + t117 * t214 + (-t151 * t214 + t152 * t210) * t303, -t277 + t214 * t332 + (-t152 + t302) * t304, -t116 * t214 + t151 * t285, -t210 * t332 + t220 * t254 - t276, t192, qJ(5) * t277 - pkin(4) * t116 + t151 * t74 + t238 * t214 + (t210 * t236 - t29 * t220 + t222 * t43) * qJD(2), qJ(5) * t276 - pkin(4) * t117 - t152 * t74 - t238 * t210 + (t214 * t236 + t30 * t220 - t222 * t44) * qJD(2), -t151 * t44 + t152 * t43 + (-qJ(5) * t116 + qJD(5) * t151 + t29 * t303 + t11) * t214 + (qJ(5) * t117 + qJD(5) * t152 + t30 * t303 - t10) * t210 - t244, -t29 * t43 - t30 * t44 - t64 * t74 + t260 * qJD(5) + t238 * pkin(4) + (-t244 + t261) * qJ(5), -t157 * t31 - t315 * t96, -t157 * t32 - t247 * t31 + t315 * t93 + t316 * t96, t154 * t157 + t195 * t315 - t304 * t96, -t247 * t32 - t316 * t93, t154 * t247 - t195 * t316 + t304 * t93, t195 * t304, t107 * t154 - t16 * t247 - t195 * t343 - t200 * t32 + t204 * t245 + t250 * t304 - t316 * t45 - t58 * t93, -t108 * t154 + t157 * t16 + t195 * t344 + t200 * t31 - t203 * t245 + t304 * t8 - t315 * t45 - t58 * t96, t1 * t247 + t107 * t31 - t108 * t32 - t157 * t2 - t250 * t315 + t316 * t8 - t343 * t96 - t344 * t93 - t244, t1 * t108 + t2 * t107 - t16 * t200 - t45 * t58 - g(1) * (-t200 * t56 + t349 * t57) - g(2) * (-t200 * t54 + t349 * t55) - g(3) * (-t102 * t200 + t103 * t349) + t344 * t8 - t343 * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116 - t287, t214 * t294 + t222 * t254 + t295, -t151 ^ 2 - t152 ^ 2, -t151 * t30 + t152 * t29 + t227, 0, 0, 0, 0, 0, 0, -t96 * t195 + t32, -t31 + t361, -t364 - t365, -t250 * t96 + t8 * t93 + t227 + t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t350, t364 - t365, -t31 - t361, -t350, -t271 + (-qJD(6) - t195) * t96, t154, -t8 * t195 - t45 * t96 - g(1) * (-t203 * t57 - t204 * t86) - g(2) * (-t203 * t55 - t204 * t83) - g(3) * (-t103 * t203 + t132 * t204) + t2, t250 * t195 + t45 * t93 - g(1) * (t203 * t86 - t204 * t57) - g(2) * (t203 * t83 - t204 * t55) - g(3) * (-t103 * t204 - t132 * t203) - t1, 0, 0;];
tau_reg  = t5;
