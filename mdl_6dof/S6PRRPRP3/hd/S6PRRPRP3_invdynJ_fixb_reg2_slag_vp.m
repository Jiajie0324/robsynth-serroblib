% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:38:28
% EndTime: 2019-03-08 21:38:43
% DurationCPUTime: 8.04s
% Computational Cost: add. (7983->624), mult. (18712->823), div. (0->0), fcn. (14710->14), ass. (0->298)
t255 = sin(qJ(3));
t257 = cos(qJ(3));
t314 = pkin(3) * t255 - qJ(4) * t257;
t173 = qJD(3) * t314 - qJD(4) * t255;
t249 = sin(pkin(11));
t251 = cos(pkin(11));
t256 = sin(qJ(2));
t361 = qJD(3) * t255;
t353 = pkin(8) * t361;
t250 = sin(pkin(6));
t369 = qJD(1) * t250;
t258 = cos(qJ(2));
t382 = t257 * t258;
t378 = t251 * t173 + t249 * t353 - (-t249 * t382 + t251 * t256) * t369;
t440 = (t249 * t256 + t251 * t382) * t369 - t249 * t173;
t385 = t251 * t257;
t304 = pkin(4) * t255 - pkin(9) * t385;
t439 = qJD(3) * t304 + t378;
t386 = t251 * t255;
t389 = t249 * t257;
t438 = -(-pkin(8) * t386 - pkin(9) * t389) * qJD(3) + t440;
t362 = qJD(3) * t251;
t366 = qJD(2) * t255;
t193 = -t249 * t366 + t362;
t363 = qJD(3) * t249;
t194 = t251 * t366 + t363;
t254 = sin(qJ(5));
t423 = cos(qJ(5));
t103 = -t423 * t193 + t194 * t254;
t437 = t103 ^ 2;
t421 = pkin(4) * t249;
t436 = pkin(8) + t421;
t364 = qJD(2) * t257;
t235 = -qJD(5) + t364;
t435 = t103 * t235;
t199 = t249 * t423 + t254 * t251;
t181 = t199 * qJD(5);
t283 = t257 * t199;
t375 = qJD(2) * t283 - t181;
t350 = t423 * t251;
t321 = t257 * t350;
t347 = t249 * t364;
t339 = qJD(5) * t423;
t359 = qJD(5) * t254;
t431 = -t249 * t359 + t251 * t339;
t374 = qJD(2) * t321 - t254 * t347 - t431;
t358 = qJD(1) * qJD(2);
t337 = t258 * t358;
t252 = cos(pkin(6));
t368 = qJD(1) * t252;
t400 = qJDD(2) * pkin(8);
t434 = t400 + (qJDD(1) * t256 + t337) * t250 + qJD(3) * t368;
t239 = t251 * pkin(4) + pkin(3);
t419 = pkin(9) + qJ(4);
t384 = t419 * t255;
t433 = -t239 * t257 - t384;
t296 = t254 * t193 + t194 * t423;
t424 = t296 ^ 2;
t315 = pkin(3) * t257 + qJ(4) * t255;
t206 = -pkin(2) - t315;
t192 = t251 * t206;
t110 = -pkin(9) * t386 + t192 + (-pkin(8) * t249 - pkin(4)) * t257;
t154 = pkin(8) * t385 + t249 * t206;
t390 = t249 * t255;
t127 = -pkin(9) * t390 + t154;
t416 = t110 * t339 - t127 * t359 + t254 * t439 - t438 * t423;
t210 = t419 * t249;
t211 = t419 * t251;
t131 = -t254 * t210 + t211 * t423;
t202 = qJD(2) * pkin(8) + t256 * t369;
t189 = t255 * t202;
t148 = t257 * t368 - t189;
t200 = t314 * qJD(2);
t90 = -t148 * t249 + t251 * t200;
t67 = qJD(2) * t304 + t90;
t91 = t251 * t148 + t249 * t200;
t77 = -pkin(9) * t347 + t91;
t411 = -qJD(4) * t199 - qJD(5) * t131 + t254 * t77 - t423 * t67;
t397 = t296 * t235;
t357 = qJD(2) * qJD(3);
t334 = t257 * t357;
t354 = t255 * qJDD(2);
t355 = qJDD(3) * t249;
t151 = t355 + (t334 + t354) * t251;
t225 = t249 * t354;
t373 = t249 * t334 + t225;
t309 = qJDD(3) * t251 - t373;
t40 = qJD(5) * t296 + t254 * t151 - t423 * t309;
t432 = t40 + t397;
t360 = qJD(3) * t257;
t344 = t249 * t360;
t349 = t258 * t369;
t302 = pkin(4) * t344 + pkin(8) * t360 - t255 * t349;
t243 = t257 * qJDD(2);
t430 = t255 * t357 - t243;
t294 = -t254 * t249 + t350;
t247 = t255 ^ 2;
t248 = t257 ^ 2;
t371 = t247 - t248;
t322 = qJD(2) * t371;
t399 = qJDD(3) * pkin(3);
t429 = qJDD(4) - t399;
t197 = qJDD(5) + t430;
t428 = -t103 * t366 - t197 * t294 + t235 * t375;
t246 = pkin(11) + qJ(5);
t241 = sin(t246);
t404 = sin(pkin(10));
t324 = t404 * t258;
t405 = cos(pkin(10));
t327 = t405 * t256;
t177 = t252 * t327 + t324;
t329 = t250 * t405;
t121 = t177 * t255 + t257 * t329;
t325 = t404 * t256;
t326 = t405 * t258;
t179 = -t252 * t325 + t326;
t328 = t250 * t404;
t123 = t179 * t255 - t257 * t328;
t388 = t250 * t256;
t183 = -t252 * t257 + t255 * t388;
t286 = g(1) * t123 + g(2) * t121 + g(3) * t183;
t427 = t131 * t197 + t241 * t286;
t338 = t256 * t358;
t387 = t250 * t258;
t312 = -qJDD(1) * t387 + t250 * t338;
t401 = qJDD(2) * pkin(2);
t161 = t312 - t401;
t259 = qJD(3) ^ 2;
t176 = -t252 * t326 + t325;
t178 = t252 * t324 + t327;
t317 = g(1) * t178 + g(2) * t176;
t426 = -pkin(8) * t259 + t250 * (-g(3) * t258 + t338) - t161 + t317 + t401;
t407 = t254 * t110 + t423 * t127;
t415 = -qJD(5) * t407 + t438 * t254 + t423 * t439;
t39 = -t423 * t151 - t193 * t339 + t194 * t359 - t254 * t309;
t425 = t103 * t374 - t199 * t40 - t294 * t39 + t296 * t375;
t420 = pkin(5) * t197;
t418 = qJ(6) * t361 - qJD(6) * t257 + t416;
t417 = -pkin(5) * t361 - t415;
t356 = qJDD(1) * t252;
t351 = t255 * t356 + t257 * t434;
t57 = qJDD(3) * qJ(4) + (qJD(4) - t189) * qJD(3) + t351;
t75 = qJD(2) * t173 + qJDD(2) * t206 + t312;
t29 = t249 * t75 + t251 * t57;
t36 = t254 * t67 + t423 * t77;
t367 = qJD(1) * t255;
t149 = t202 * t257 + t252 * t367;
t115 = pkin(4) * t347 + t149;
t414 = -pkin(5) * t375 + qJ(6) * t374 - qJD(6) * t199 - t115;
t31 = qJ(6) * t366 + t36;
t295 = -t210 * t423 - t254 * t211;
t85 = qJD(4) * t294 + qJD(5) * t295;
t413 = t85 - t31;
t412 = t85 - t36;
t410 = pkin(5) * t366 - t411;
t409 = qJD(2) * pkin(2);
t136 = qJD(3) * qJ(4) + t149;
t150 = qJD(2) * t206 - t349;
t68 = -t136 * t249 + t251 * t150;
t45 = -pkin(4) * t364 - pkin(9) * t194 + t68;
t69 = t251 * t136 + t249 * t150;
t51 = pkin(9) * t193 + t69;
t22 = t254 * t45 + t423 * t51;
t408 = t22 * t235;
t122 = t177 * t257 - t255 * t329;
t406 = -t121 * t239 + t122 * t419;
t402 = qJ(6) * t197;
t398 = t296 * t103;
t395 = t151 * t249;
t393 = t241 * t257;
t242 = cos(t246);
t392 = t242 * t257;
t260 = qJD(2) ^ 2;
t391 = t248 * t260;
t21 = -t254 * t51 + t423 * t45;
t381 = qJD(6) - t21;
t380 = qJDD(1) - g(3);
t124 = t179 * t257 + t255 * t328;
t379 = -t123 * t239 + t124 * t419;
t377 = -t251 * t353 - t440;
t184 = t252 * t255 + t257 * t388;
t376 = -t183 * t239 + t184 * t419;
t372 = pkin(2) * t387 + pkin(8) * t388;
t201 = pkin(4) * t390 + t255 * pkin(8);
t370 = t247 + t248;
t365 = qJD(2) * t256;
t352 = t241 * t387;
t348 = t194 * t364;
t346 = t250 * t365;
t345 = qJD(2) * t387;
t342 = t235 * t366;
t341 = -t424 + t437;
t340 = g(3) * t372;
t333 = t258 * t357;
t332 = t249 * t243;
t331 = t251 * t354;
t330 = t251 * t243;
t28 = -t249 * t57 + t251 * t75;
t18 = pkin(4) * t430 - pkin(9) * t151 + t28;
t26 = pkin(9) * t309 + t29;
t4 = t423 * t18 - t254 * t26 - t51 * t339 - t45 * t359;
t62 = -t202 * t360 - t255 * t434 + t257 * t356;
t318 = t255 * t334;
t316 = g(1) * t179 + g(2) * t177;
t313 = -pkin(5) * t242 - qJ(6) * t241;
t168 = t199 * t255;
t94 = qJD(3) * t283 + t255 * t431;
t311 = t103 * t94 + t168 * t40;
t308 = -t424 - t437;
t307 = t193 * t251 - t194 * t249;
t306 = qJD(2) * (-t193 + t362);
t305 = qJDD(2) * t258 - t256 * t260;
t169 = t294 * t255;
t93 = -qJD(3) * t321 + t181 * t255 + t254 * t344;
t303 = -pkin(5) * t94 - qJ(6) * t93 + qJD(6) * t169 - t302;
t300 = t309 * pkin(4);
t3 = t254 * t18 + t423 * t26 + t45 * t339 - t359 * t51;
t52 = t110 * t423 - t254 * t127;
t119 = -t184 * t249 - t251 * t387;
t120 = t184 * t251 - t249 * t387;
t298 = t119 * t423 - t254 * t120;
t56 = t254 * t119 + t120 * t423;
t125 = -qJD(3) * t183 + t257 * t345;
t88 = -t125 * t249 + t251 * t346;
t89 = t125 * t251 + t249 * t346;
t16 = qJD(5) * t298 + t254 * t88 + t423 * t89;
t17 = qJD(5) * t56 + t254 * t89 - t423 * t88;
t292 = -t16 * t103 + t17 * t296 + t298 * t39 - t56 * t40;
t291 = t309 * t251;
t290 = -t103 * t375 - t294 * t40;
t140 = -t242 * t388 + t257 * t352;
t81 = -t176 * t393 - t177 * t242;
t83 = -t178 * t393 - t179 * t242;
t289 = -g(1) * t83 - g(2) * t81 - g(3) * t140;
t141 = (t241 * t256 + t242 * t382) * t250;
t82 = -t176 * t392 + t177 * t241;
t84 = -t178 * t392 + t179 * t241;
t288 = -g(1) * t84 - g(2) * t82 - g(3) * t141;
t126 = qJD(3) * t184 + t255 * t345;
t287 = t126 * t103 + t17 * t235 + t183 * t40 + t197 * t298;
t285 = g(1) * t124 + g(2) * t122 + g(3) * t184;
t59 = -t62 + t429;
t284 = t286 - t59;
t282 = g(3) * t387 - t317;
t281 = -g(3) * t388 - t316;
t132 = -qJD(3) * pkin(3) + qJD(4) - t148;
t280 = -qJ(4) * t361 + (qJD(4) - t132) * t257;
t279 = t250 * t239 * t382 + t384 * t387 + t388 * t421 + t372;
t171 = t176 * pkin(2);
t278 = t176 * t433 + t177 * t436 - t171;
t172 = t178 * pkin(2);
t277 = t178 * t433 + t179 * t436 - t172;
t276 = t39 - t435;
t275 = t282 * t255;
t274 = t103 * t93 + t168 * t39 - t169 * t40 - t296 * t94;
t273 = t126 * t296 + t16 * t235 - t183 * t39 - t197 * t56;
t108 = t184 * t241 + t242 * t387;
t63 = t122 * t241 - t176 * t242;
t65 = t124 * t241 - t178 * t242;
t272 = g(1) * t65 + g(2) * t63 + g(3) * t108 + t4;
t92 = -pkin(4) * t193 + t132;
t270 = t286 + t62;
t269 = -t85 * t103 - t131 * t40 + t295 * t39 - t285;
t268 = t103 * t361 + t168 * t197 - t235 * t94 - t257 * t40;
t267 = t197 * t295 + t242 * t286;
t203 = -t349 - t409;
t266 = -pkin(8) * qJDD(3) + (t203 + t349 - t409) * qJD(3);
t109 = t184 * t242 - t352;
t64 = t122 * t242 + t176 * t241;
t66 = t124 * t242 + t178 * t241;
t265 = -g(1) * t66 - g(2) * t64 - g(3) * t109 + t3;
t37 = pkin(5) * t103 - qJ(6) * t296 + t92;
t264 = t296 * t37 + qJDD(6) - t272;
t41 = -t300 + t59;
t263 = t40 - t397;
t262 = -t270 + t429;
t61 = -t202 * t361 + t351;
t261 = -t62 * t255 + t61 * t257 + (-t148 * t257 - t149 * t255) * qJD(3) - t316;
t5 = t40 * pkin(5) + t39 * qJ(6) - qJD(6) * t296 + t41;
t230 = t255 * t260 * t257;
t190 = qJDD(2) * t248 - 0.2e1 * t318;
t153 = -pkin(8) * t389 + t192;
t128 = -t197 * t257 - t235 * t361;
t101 = -pkin(5) * t294 - qJ(6) * t199 - t239;
t76 = pkin(5) * t168 - qJ(6) * t169 + t201;
t50 = pkin(5) * t296 + qJ(6) * t103;
t49 = t257 * pkin(5) - t52;
t48 = -qJ(6) * t257 + t407;
t33 = t197 * t199 + t235 * t374 - t296 * t366;
t27 = -t39 - t435;
t15 = -t235 * qJ(6) + t22;
t11 = t235 * pkin(5) + t381;
t9 = -t169 * t39 - t296 * t93;
t7 = -t199 * t39 - t296 * t374;
t6 = t169 * t197 + t235 * t93 + t257 * t39 + t296 * t361;
t2 = qJDD(6) - t4 - t420;
t1 = -qJD(6) * t235 + t3 + t402;
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t380, 0, 0, 0, 0, 0, 0, t305 * t250 (-qJDD(2) * t256 - t258 * t260) * t250, 0, -g(3) + (t252 ^ 2 + (t256 ^ 2 + t258 ^ 2) * t250 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t126 - qJDD(3) * t183 + (-t255 * t333 + t257 * t305) * t250, -qJD(3) * t125 - qJDD(3) * t184 + (-t255 * t305 - t257 * t333) * t250 (t183 * t255 + t184 * t257) * qJDD(2) + (t125 * t257 + t126 * t255 + (t183 * t257 - t184 * t255) * qJD(3)) * qJD(2), t125 * t149 - t126 * t148 - t183 * t62 + t184 * t61 - g(3) + (-t161 * t258 + t203 * t365) * t250, 0, 0, 0, 0, 0, 0, -t119 * t243 - t126 * t193 - t183 * t309 + (t119 * t361 - t257 * t88) * qJD(2), t120 * t243 + t126 * t194 + t151 * t183 + (-t120 * t361 + t257 * t89) * qJD(2), -t119 * t151 + t120 * t309 + t89 * t193 - t88 * t194, t119 * t28 + t120 * t29 + t126 * t132 + t183 * t59 + t68 * t88 + t69 * t89 - g(3), 0, 0, 0, 0, 0, 0, t287, t273, t292, t126 * t92 + t16 * t22 - t17 * t21 + t183 * t41 + t298 * t4 + t3 * t56 - g(3), 0, 0, 0, 0, 0, 0, t287, t292, -t273, t1 * t56 + t11 * t17 + t126 * t37 + t15 * t16 + t183 * t5 - t2 * t298 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t380 * t387 + t317, -t380 * t388 + t316, 0, 0, qJDD(2) * t247 + 0.2e1 * t318, -0.2e1 * qJD(3) * t322 + 0.2e1 * t243 * t255, qJDD(3) * t255 + t257 * t259, t190, qJDD(3) * t257 - t255 * t259, 0, t266 * t255 + t257 * t426, -t255 * t426 + t266 * t257, t370 * t400 + (-g(3) * t256 - t337 * t370) * t250 + t261, -t161 * pkin(2) + g(1) * t172 + g(2) * t171 - t340 + (-t203 * t256 + (t148 * t255 - t149 * t257) * t258) * t369 + t261 * pkin(8) (t151 * t255 + t194 * t360) * t251 (t291 - t395) * t255 + t307 * t360 (-t151 - t331) * t257 + (t194 * t255 + t251 * t322) * qJD(3) (-t193 * t360 - t255 * t309) * t249 (-t309 + t225) * t257 + (t193 * t255 - t249 * t322) * qJD(3), t190, t281 * t249 + (-pkin(8) * t309 + t59 * t249 + t193 * t349 + (qJD(2) * t153 + t68) * qJD(3)) * t255 + (-t153 * qJDD(2) - t28 + (-pkin(8) * t193 + t132 * t249) * qJD(3) - t378 * qJD(2) - t282 * t251) * t257, t281 * t251 + (-t194 * t349 + pkin(8) * t151 + t59 * t251 + (-qJD(2) * t154 - t69) * qJD(3)) * t255 + (t154 * qJDD(2) + t29 + (pkin(8) * t194 + t132 * t251) * qJD(3) + t377 * qJD(2) + t282 * t249) * t257, t154 * t309 - t153 * t151 - t378 * t194 + t377 * t193 + (-t249 * t69 - t251 * t68) * t360 + (-t249 * t29 - t251 * t28 - t282) * t255, t29 * t154 + t28 * t153 - g(1) * (-t178 * t315 - t172) - g(2) * (-t176 * t315 - t171) - t340 + t377 * t69 + t378 * t68 + (-g(3) * t315 - t132 * t367) * t387 + (t132 * t360 + t59 * t255 - t316) * pkin(8), t9, t274, t6, t311, -t268, t128, t103 * t302 + t168 * t41 + t197 * t52 + t201 * t40 + t21 * t361 - t235 * t415 - t257 * t4 + t92 * t94 + t288, t169 * t41 - t197 * t407 - t201 * t39 - t22 * t361 + t235 * t416 + t257 * t3 + t296 * t302 - t92 * t93 - t289, -t103 * t416 - t168 * t3 - t169 * t4 + t21 * t93 - t22 * t94 - t296 * t415 + t39 * t52 - t40 * t407 - t275, -g(1) * t277 - g(2) * t278 - g(3) * t279 + t41 * t201 + t21 * t415 + t22 * t416 + t3 * t407 + t302 * t92 + t4 * t52, t9, t6, -t274, t128, t268, t311, -t103 * t303 - t11 * t361 + t168 * t5 - t197 * t49 + t2 * t257 + t235 * t417 + t37 * t94 + t40 * t76 + t288, -t1 * t168 - t103 * t418 - t11 * t93 - t15 * t94 + t169 * t2 + t296 * t417 - t39 * t49 - t40 * t48 - t275, -t1 * t257 + t15 * t361 - t169 * t5 + t197 * t48 - t235 * t418 + t296 * t303 + t37 * t93 + t39 * t76 + t289, t1 * t48 + t5 * t76 + t2 * t49 - g(1) * (pkin(5) * t84 + qJ(6) * t83 + t277) - g(2) * (pkin(5) * t82 + qJ(6) * t81 + t278) - g(3) * (pkin(5) * t141 + qJ(6) * t140 + t279) - t303 * t37 + t418 * t15 + t417 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t230, t371 * t260, t354, t230, t243, qJDD(3), qJD(3) * t149 - t203 * t366 + t270, -t203 * t364 + (t148 + t189) * qJD(3) + t285 - t351, 0, 0, -t251 * t348 + t395, t151 * t251 + t249 * t309 - t307 * t364, -t332 + t251 * t391 + (-t194 + t363) * t366, t193 * t347 + t291, -t249 * t391 + t255 * t306 - t330, t230, qJ(4) * t332 - pkin(3) * t373 + t149 * t193 + (t284 + t399) * t251 + (t249 * t280 - t68 * t255 + t90 * t257) * qJD(2), qJ(4) * t330 - pkin(3) * t151 - t149 * t194 - t284 * t249 + (t251 * t280 + t255 * t69 - t257 * t91) * qJD(2), -t91 * t193 + t90 * t194 + (qJ(4) * t309 + qJD(4) * t193 + t364 * t68 + t29) * t251 + (qJ(4) * t151 + qJD(4) * t194 + t364 * t69 - t28) * t249 - t285, -t132 * t149 - t68 * t90 - t69 * t91 + (-t249 * t68 + t251 * t69) * qJD(4) + t284 * pkin(3) + (-t28 * t249 + t29 * t251 - t285) * qJ(4), t7, t425, t33, t290, -t428, t342, -t103 * t115 - t21 * t366 - t235 * t411 - t239 * t40 - t294 * t41 - t375 * t92 + t267, -t115 * t296 + t199 * t41 + t22 * t366 + t235 * t412 + t239 * t39 - t374 * t92 - t427, t103 * t36 - t199 * t4 + t21 * t374 + t22 * t375 + t294 * t3 - t296 * t411 + t269, -g(1) * t379 - g(2) * t406 - g(3) * t376 - t92 * t115 + t3 * t131 + t21 * t411 + t22 * t412 - t41 * t239 + t295 * t4, t7, t33, -t425, t342, t428, t290, t101 * t40 + t103 * t414 + t11 * t366 + t235 * t410 - t294 * t5 - t37 * t375 + t267, t1 * t294 + t103 * t31 - t11 * t374 + t15 * t375 + t199 * t2 + t296 * t410 + t269, t101 * t39 - t15 * t366 - t199 * t5 - t235 * t413 - t296 * t414 + t37 * t374 + t427, t1 * t131 + t5 * t101 - t2 * t295 - g(1) * (t123 * t313 + t379) - g(2) * (t121 * t313 + t406) - g(3) * (t183 * t313 + t376) + t414 * t37 + t413 * t15 + t410 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t309 - t348, t257 * t306 + t331 + t355, -t193 ^ 2 - t194 ^ 2, -t193 * t69 + t194 * t68 + t262, 0, 0, 0, 0, 0, 0, t263, -t276, t308, t103 * t22 + t21 * t296 + t262 - t300, 0, 0, 0, 0, 0, 0, t263, t308, t276, t103 * t15 - t11 * t296 - t286 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398, -t341, t27, -t398, -t432, t197, -t296 * t92 + t272 - t408, t103 * t92 - t21 * t235 - t265, 0, 0, t398, t27, t341, t197, t432, -t398, -t103 * t50 - t264 - t408 + 0.2e1 * t420, pkin(5) * t39 - qJ(6) * t40 + (t15 - t22) * t296 + (t11 - t381) * t103, 0.2e1 * t402 - t103 * t37 + t296 * t50 + (-0.2e1 * qJD(6) + t21) * t235 + t265, t1 * qJ(6) - t2 * pkin(5) - t37 * t50 - t11 * t22 - g(1) * (-pkin(5) * t65 + qJ(6) * t66) - g(2) * (-pkin(5) * t63 + qJ(6) * t64) - g(3) * (-pkin(5) * t108 + qJ(6) * t109) + t381 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197 + t398, t27, -t235 ^ 2 - t424, t15 * t235 + t264 - t420;];
tau_reg  = t8;
