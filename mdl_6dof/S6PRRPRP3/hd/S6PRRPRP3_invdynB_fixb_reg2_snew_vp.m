% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 03:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:56:25
% EndTime: 2019-05-05 03:57:37
% DurationCPUTime: 70.73s
% Computational Cost: add. (158449->878), mult. (331178->1342), div. (0->0), fcn. (242243->12), ass. (0->650)
t1001 = sin(qJ(2));
t1004 = cos(qJ(2));
t1000 = sin(qJ(3));
t1003 = cos(qJ(3));
t1002 = cos(qJ(5));
t1107 = qJD(2) * t1003;
t1096 = qJD(3) * t1107;
t1105 = qJDD(2) * t1000;
t960 = t1096 + t1105;
t992 = sin(pkin(11));
t995 = cos(pkin(11));
t1072 = qJDD(3) * t995 - t960 * t992;
t1108 = qJD(2) * t1000;
t1092 = qJD(3) * t995 - t992 * t1108;
t952 = qJD(3) * t992 + t1108 * t995;
t999 = sin(qJ(5));
t901 = -t1002 * t1092 + t952 * t999;
t931 = qJDD(3) * t992 + t995 * t960;
t1007 = -t901 * qJD(5) + t1002 * t931 + t1072 * t999;
t980 = -qJD(5) + t1107;
t1138 = t901 * t980;
t1172 = t1007 + t1138;
t903 = t1002 * t952 + t1092 * t999;
t1139 = t901 * t903;
t1102 = t1003 * qJDD(2);
t983 = qJD(3) * t1108;
t961 = -t983 + t1102;
t955 = -qJDD(5) + t961;
t1009 = t955 - t1139;
t1117 = t1002 * t1009;
t1159 = t980 ^ 2;
t896 = t903 ^ 2;
t855 = -t896 - t1159;
t725 = t855 * t999 - t1117;
t1144 = t1009 * t999;
t730 = t1002 * t855 + t1144;
t647 = t725 * t995 + t730 * t992;
t602 = -t1000 * t1172 + t1003 * t647;
t645 = t725 * t992 - t730 * t995;
t1064 = t1001 * t602 - t1004 * t645;
t600 = t1000 * t647 + t1003 * t1172;
t994 = sin(pkin(6));
t997 = cos(pkin(6));
t508 = t1064 * t997 - t994 * t600;
t543 = t1001 * t645 + t1004 * t602;
t993 = sin(pkin(10));
t996 = cos(pkin(10));
t475 = t508 * t996 + t543 * t993;
t1336 = qJ(1) * t475;
t484 = t508 * t993 - t543 * t996;
t1335 = qJ(1) * t484;
t506 = t1064 * t994 + t997 * t600;
t1334 = pkin(7) * (t506 * t994 + t508 * t997);
t1333 = pkin(1) * t506;
t1332 = pkin(1) * t508;
t1160 = t901 ^ 2;
t868 = t1160 - t1159;
t746 = t868 * t999 - t1117;
t750 = t1002 * t868 + t1144;
t683 = t746 * t992 - t750 * t995;
t1094 = -t1002 * t1072 + t999 * t931;
t759 = (qJD(5) + t980) * t903 + t1094;
t621 = t1000 * t759 + t1003 * t683;
t679 = t746 * t995 + t750 * t992;
t1057 = t1001 * t621 + t1004 * t679;
t617 = t1000 * t683 - t1003 * t759;
t526 = t1057 * t997 - t994 * t617;
t558 = -t1001 * t679 + t1004 * t621;
t1331 = t526 * t993 - t558 * t996;
t1330 = t526 * t996 + t558 * t993;
t758 = (qJD(5) - t980) * t903 + t1094;
t687 = t1002 * t1172 - t758 * t999;
t1148 = t1172 * t999;
t689 = t1002 * t758 + t1148;
t591 = t687 * t992 + t689 * t995;
t835 = t896 - t1160;
t574 = -t1000 * t835 + t1003 * t591;
t589 = -t687 * t995 + t689 * t992;
t1067 = t1001 * t574 - t1004 * t589;
t572 = t1000 * t591 + t1003 * t835;
t492 = t1067 * t997 - t994 * t572;
t514 = t1001 * t589 + t1004 * t574;
t1329 = t492 * t993 - t514 * t996;
t1328 = t492 * t996 + t514 * t993;
t1326 = pkin(7) * t543;
t1319 = t1057 * t994 + t997 * t617;
t1318 = t1067 * t994 + t997 * t572;
t1317 = pkin(8) * t600;
t1171 = t1138 - t1007;
t1209 = -t1002 * t759 - t1171 * t999;
t1210 = t1002 * t1171 - t759 * t999;
t1229 = t1209 * t992 + t1210 * t995;
t1230 = t1209 * t995 - t1210 * t992;
t782 = t896 + t1160;
t1257 = -t1000 * t782 + t1003 * t1230;
t1274 = t1001 * t1229 + t1004 * t1257;
t1259 = t1000 * t1230 + t1003 * t782;
t1275 = t1001 * t1257 - t1004 * t1229;
t1287 = -t1259 * t994 + t1275 * t997;
t1303 = t1274 * t993 + t1287 * t996;
t1310 = qJ(1) * t1303;
t1304 = t1274 * t996 - t1287 * t993;
t1309 = qJ(1) * t1304;
t1308 = -pkin(2) * t600 - pkin(3) * t1172 - qJ(4) * t647;
t1307 = -pkin(2) * t645 + pkin(8) * t602;
t1306 = pkin(1) * t1287;
t1288 = t1259 * t997 + t1275 * t994;
t1305 = pkin(1) * t1288;
t1302 = (-t1287 * t997 - t1288 * t994) * pkin(7);
t1300 = pkin(7) * t1274;
t1299 = qJ(4) * t645;
t1290 = -pkin(3) * t645 + pkin(4) * t730;
t1010 = -t955 - t1139;
t811 = t1002 * t1010;
t869 = -t896 + t1159;
t1173 = -t869 * t999 + t811;
t1143 = t1010 * t999;
t1196 = t1002 * t869 + t1143;
t1207 = -t1173 * t992 - t1196 * t995;
t1208 = t1173 * t995 - t1196 * t992;
t1231 = -t1000 * t1171 + t1003 * t1208;
t1256 = -t1001 * t1207 + t1004 * t1231;
t1232 = t1000 * t1208 + t1003 * t1171;
t1258 = t1001 * t1231 + t1004 * t1207;
t1276 = -t1232 * t994 + t1258 * t997;
t1286 = t1256 * t996 - t1276 * t993;
t1285 = t1256 * t993 + t1276 * t996;
t1284 = pkin(8) * t1259;
t1279 = -pkin(2) * t1259 - pkin(3) * t782 - qJ(4) * t1230;
t1278 = -pkin(2) * t1229 + pkin(8) * t1257;
t1277 = t1232 * t997 + t1258 * t994;
t1272 = pkin(9) * t725;
t1271 = pkin(9) * t730;
t1269 = qJ(4) * t1229;
t547 = -pkin(3) * t1229 - pkin(4) * t1210;
t1029 = (t1002 * t903 + t901 * t999) * t980;
t1116 = t1002 * t980;
t1100 = t901 * t1116;
t1135 = t980 * t999;
t865 = t903 * t1135;
t1083 = -t865 + t1100;
t1166 = -t1029 * t995 - t1083 * t992;
t1165 = -t1029 * t992 + t1083 * t995;
t1179 = -t1000 * t955 + t1003 * t1165;
t1204 = -t1001 * t1166 + t1004 * t1179;
t1183 = t1000 * t1165 + t1003 * t955;
t1206 = t1001 * t1179 + t1004 * t1166;
t1233 = -t1183 * t994 + t1206 * t997;
t1263 = t1204 * t996 - t1233 * t993;
t1262 = t1204 * t993 + t1233 * t996;
t808 = -qJD(5) * t903 - t1094;
t1035 = -t808 * t999 - t1100;
t1085 = t1002 * t808 - t1135 * t901;
t1163 = -t1035 * t992 - t1085 * t995;
t1101 = t1000 * t1139;
t1164 = t1035 * t995 - t1085 * t992;
t1180 = t1003 * t1164 - t1101;
t1203 = -t1001 * t1163 + t1004 * t1180;
t1099 = t1003 * t1139;
t1182 = t1000 * t1164 + t1099;
t1205 = t1001 * t1180 + t1004 * t1163;
t1235 = -t1182 * t994 + t1205 * t997;
t1261 = t1203 * t996 - t1235 * t993;
t1260 = t1203 * t993 + t1235 * t996;
t1170 = -t1159 - t1160;
t1181 = t1002 * t1170 - t1143;
t1184 = t1170 * t999 + t811;
t1201 = t1181 * t992 + t1184 * t995;
t1255 = pkin(2) * t1201;
t1253 = pkin(9) * t1210;
t1250 = qJ(4) * t1201;
t1202 = t1181 * t995 - t1184 * t992;
t1249 = qJ(4) * t1202;
t1244 = t1000 * t1202;
t1243 = t1001 * t1201;
t1241 = t1003 * t1202;
t1240 = t1004 * t1201;
t1238 = -pkin(3) * t1201 - pkin(4) * t1184;
t1237 = pkin(4) * t782 + pkin(9) * t1209;
t1236 = t1182 * t997 + t1205 * t994;
t1234 = t1183 * t997 + t1206 * t994;
t1225 = pkin(9) * t1181;
t1224 = pkin(9) * t1184;
t1223 = qJ(6) * t1172;
t1074 = t1092 * t952;
t1195 = -t961 + t1074;
t1214 = t1195 * t992;
t1213 = t1195 * t995;
t1090 = t1092 ^ 2;
t1158 = qJD(3) ^ 2;
t1005 = qJD(2) ^ 2;
t1133 = g(3) - qJDD(1);
t1095 = t994 * t1133;
t1097 = g(1) * t993 - t996 * g(2);
t1185 = t997 * t1097 - t1095;
t968 = g(1) * t996 + g(2) * t993;
t888 = t1001 * t1185 - t1004 * t968;
t864 = -t1005 * pkin(2) + qJDD(2) * pkin(8) + t888;
t953 = t994 * t1097;
t1077 = t1133 * t997 + t953;
t926 = t1003 * t1077;
t1154 = pkin(3) * t1003;
t1076 = -qJ(4) * t1000 - t1154;
t958 = t1076 * qJD(2);
t788 = -qJDD(3) * pkin(3) - t1158 * qJ(4) + (qJD(2) * t958 + t864) * t1000 + qJDD(4) + t926;
t932 = -pkin(4) * t1107 - pkin(9) * t952;
t721 = -t1072 * pkin(4) - t1090 * pkin(9) + t952 * t932 + t788;
t1212 = -t808 * pkin(5) - t1223 + t721;
t742 = t1007 * t999 - t1116 * t903;
t743 = t1002 * t1007 + t865;
t672 = -t742 * t992 + t743 * t995;
t1084 = t1003 * t672 + t1101;
t669 = -t742 * t995 - t743 * t992;
t1211 = t1001 * t1084 + t1004 * t669;
t1200 = -2 * qJD(6);
t1082 = t1000 * t672 - t1099;
t1162 = -t1082 * t994 + t1211 * t997;
t1167 = -t1001 * t669 + t1004 * t1084;
t1178 = t1162 * t996 + t1167 * t993;
t1177 = -t1162 * t993 + t1167 * t996;
t884 = -t1001 * t968 - t1004 * t1185;
t810 = t1001 * t884 + t1004 * t888;
t1176 = t810 * t994;
t1073 = t1003 * t1092;
t936 = qJD(2) * t1073;
t883 = -t931 - t936;
t1175 = t993 * t1133;
t1174 = t996 * t1133;
t937 = t952 * t1107;
t880 = t1072 - t937;
t1031 = t1001 * t1077;
t1030 = t1004 * t1077;
t1157 = 2 * qJD(4);
t833 = -t1000 * t1077 + t1003 * t864;
t789 = -pkin(3) * t1158 + qJDD(3) * qJ(4) + t1107 * t958 + t833;
t1078 = t960 + t1096;
t863 = -qJDD(2) * pkin(2) - t1005 * pkin(8) + t884;
t807 = -t1078 * qJ(4) + (-t961 + t983) * pkin(3) + t863;
t708 = t1157 * t952 + t992 * t789 - t995 * t807;
t657 = pkin(4) * t1195 + pkin(9) * t883 - t708;
t709 = t1092 * t1157 + t995 * t789 + t992 * t807;
t684 = -pkin(4) * t1090 + pkin(9) * t1072 + t1107 * t932 + t709;
t586 = t1002 * t684 + t999 * t657;
t834 = pkin(5) * t901 - qJ(6) * t903;
t1080 = -t955 * qJ(6) + t1200 * t980 - t901 * t834 + t586;
t913 = -t1097 * t993 - t996 * t968;
t912 = t1097 * t996 - t993 * t968;
t1161 = t1082 * t997 + t1211 * t994;
t951 = t952 ^ 2;
t1156 = pkin(7) * t997;
t1155 = pkin(3) * t1000;
t1153 = pkin(5) * t1002;
t585 = -t1002 * t657 + t999 * t684;
t520 = -t1002 * t585 + t586 * t999;
t1152 = t520 * t992;
t1151 = t520 * t995;
t1150 = t721 * t999;
t1146 = t788 * t992;
t1145 = t788 * t995;
t885 = t1074 + t961;
t1141 = t885 * t992;
t1140 = t885 * t995;
t1137 = t903 * t980;
t1132 = t782 - t1159;
t988 = t1000 ^ 2;
t989 = t1003 ^ 2;
t1131 = t988 + t989;
t1130 = qJ(6) * t1002;
t1127 = t1000 * t863;
t1125 = t1000 * t961;
t979 = t1000 * t1005 * t1003;
t969 = -t979 + qJDD(3);
t1124 = t1000 * t969;
t970 = qJDD(3) + t979;
t1123 = t1000 * t970;
t1119 = t1002 * t721;
t1114 = t1003 * t863;
t1113 = t1003 * t969;
t1111 = t1005 * t988;
t1109 = qJD(2) * qJD(3);
t1106 = qJDD(2) * t994;
t1104 = qJDD(2) * t1001;
t1103 = qJDD(2) * t1004;
t1098 = -qJ(6) * t999 - pkin(4);
t521 = t1002 * t586 + t585 * t999;
t832 = t1000 * t864 + t926;
t729 = t1000 * t832 + t1003 * t833;
t1088 = t903 * t834 + qJDD(6) + t585;
t1087 = t1001 * t979;
t1086 = t1004 * t979;
t727 = t1000 * t833 - t1003 * t832;
t963 = t1131 * qJDD(2);
t985 = t989 * t1005;
t966 = t985 + t1111;
t910 = -t1001 * t966 + t1004 * t963;
t1079 = pkin(7) * t910 - t1001 * t727;
t611 = -t708 * t995 + t709 * t992;
t612 = t708 * t992 + t709 * t995;
t1036 = t1004 * t1005 + t1104;
t942 = t1036 * t997;
t964 = -t1001 * t1005 + t1103;
t1075 = t942 * t996 + t964 * t993;
t899 = t942 * t993 - t964 * t996;
t551 = -pkin(5) * t1159 + t1080;
t1032 = t955 * pkin(5) + t1088;
t552 = qJ(6) * t1159 - t1032;
t500 = t1002 * t552 + t551 * t999;
t501 = t1002 * t551 - t552 * t999;
t458 = -t500 * t992 + t501 * t995;
t605 = (-pkin(5) * t980 + t1200) * t903 + t1212;
t449 = t1000 * t605 + t1003 * t458;
t457 = t500 * t995 + t501 * t992;
t1071 = t1001 * t449 - t1004 * t457;
t470 = t521 * t995 - t1152;
t465 = t1000 * t721 + t1003 * t470;
t469 = t521 * t992 + t1151;
t1070 = t1001 * t465 - t1004 * t469;
t596 = t1000 * t788 + t1003 * t612;
t1065 = t1001 * t596 - t1004 * t611;
t603 = t1000 * t758 + t1241;
t1063 = t1001 * t603 - t1240;
t757 = -t808 - t1137;
t610 = t1000 * t757 + t1241;
t1061 = t1001 * t610 - t1240;
t1052 = t1001 * t729 - t1004 * t863;
t805 = t880 * t995 - t883 * t992;
t874 = t1090 + t951;
t735 = -t1000 * t874 + t1003 * t805;
t803 = t880 * t992 + t883 * t995;
t1051 = t1001 * t735 - t1004 * t803;
t906 = -t985 - t1090;
t822 = t906 * t995 - t1214;
t881 = t1072 + t937;
t767 = -t1000 * t881 + t1003 * t822;
t821 = t906 * t992 + t1213;
t1050 = t1001 * t767 - t1004 * t821;
t882 = t931 - t936;
t806 = t881 * t995 - t882 * t992;
t909 = -t951 + t1090;
t769 = -t1000 * t909 + t1003 * t806;
t804 = -t881 * t992 - t882 * t995;
t1049 = t1001 * t769 + t1004 * t804;
t935 = -t951 - t985;
t847 = -t935 * t992 + t1140;
t775 = t1000 * t882 + t1003 * t847;
t844 = t935 * t995 + t1141;
t1048 = t1001 * t775 - t1004 * t844;
t934 = -t951 + t985;
t848 = -t934 * t992 + t1213;
t776 = -t1000 * t883 + t1003 * t848;
t845 = -t934 * t995 - t1214;
t1047 = t1001 * t776 + t1004 * t845;
t933 = t1090 - t985;
t849 = t933 * t995 + t1141;
t777 = t1000 * t880 + t1003 * t849;
t846 = -t933 * t992 + t1140;
t1046 = t1001 * t777 + t1004 * t846;
t1034 = t1000 * t1074;
t859 = -t1072 * t992 + t936 * t995;
t819 = t1003 * t859 + t1034;
t858 = -t1072 * t995 - t936 * t992;
t1045 = t1001 * t819 + t1004 * t858;
t861 = t931 * t995 + t937 * t992;
t820 = t1003 * t861 - t1034;
t860 = -t931 * t992 + t937 * t995;
t1044 = t1001 * t820 + t1004 * t860;
t872 = (-t1092 * t995 - t992 * t952) * t1107;
t853 = t1003 * t872 - t1125;
t871 = (t1092 * t992 - t995 * t952) * t1107;
t1043 = t1001 * t853 + t1004 * t871;
t1042 = t1001 * t888 - t1004 * t884;
t959 = 0.2e1 * t1096 + t1105;
t962 = -0.2e1 * t983 + t1102;
t908 = -t1000 * t959 + t1003 * t962;
t967 = t985 - t1111;
t1041 = t1001 * t908 + t1004 * t967;
t977 = -t985 - t1158;
t922 = t1003 * t977 - t1123;
t1040 = t1001 * t922 + t1004 * t962;
t975 = -t1111 - t1158;
t924 = -t1000 * t975 - t1113;
t1039 = t1001 * t924 - t1004 * t959;
t1038 = t1001 * t963 + t1004 * t966;
t956 = t1131 * t1109;
t1037 = -qJDD(3) * t1004 + t1001 * t956;
t1033 = t952 * t1073;
t957 = t1003 * t970;
t974 = -t1111 + t1158;
t923 = -t1000 * t974 + t957;
t1028 = -t1000 * t1103 + t1001 * t923;
t976 = t985 - t1158;
t921 = t1003 * t976 - t1124;
t1027 = t1001 * t921 - t1004 * t1102;
t459 = pkin(9) * t501 + (t1098 - t1153) * t605;
t468 = -pkin(9) * t500 + (pkin(5) * t999 - t1130) * t605;
t423 = -qJ(4) * t457 - t459 * t992 + t468 * t995;
t433 = -pkin(3) * t457 - pkin(4) * t500 - pkin(5) * t552 - qJ(6) * t551;
t448 = t1000 * t458 - t1003 * t605;
t405 = -pkin(8) * t448 - t1000 * t433 + t1003 * t423;
t415 = -pkin(2) * t448 + pkin(3) * t605 - qJ(4) * t458 - t459 * t995 - t468 * t992;
t431 = t1001 * t457 + t1004 * t449;
t1026 = pkin(7) * t431 + t1001 * t405 + t1004 * t415;
t505 = -pkin(4) * t721 + pkin(9) * t521;
t439 = -pkin(9) * t1151 - qJ(4) * t469 - t505 * t992;
t447 = -pkin(3) * t469 - pkin(4) * t520;
t464 = t1000 * t470 - t1003 * t721;
t416 = -pkin(8) * t464 - t1000 * t447 + t1003 * t439;
t424 = -pkin(2) * t464 + pkin(3) * t721 + pkin(9) * t1152 - qJ(4) * t470 - t505 * t995;
t438 = t1001 * t469 + t1004 * t465;
t1025 = pkin(7) * t438 + t1001 * t416 + t1004 * t424;
t545 = pkin(5) * t1132 + t1080;
t546 = qJ(6) * t1132 + t1032;
t480 = t1002 * t545 + t546 * t999 + t1237;
t481 = t1002 * t546 - t545 * t999 - t1253;
t441 = -t480 * t992 + t481 * t995 - t1269;
t530 = -pkin(5) * t1171 + qJ(6) * t759 + t547;
t432 = -t1000 * t530 + t1003 * t441 - t1284;
t436 = -t480 * t995 - t481 * t992 + t1279;
t1024 = t1001 * t432 + t1004 * t436 + t1300;
t497 = t1237 + t521;
t502 = -t520 - t1253;
t446 = -t497 * t992 + t502 * t995 - t1269;
t437 = -t1000 * t547 + t1003 * t446 - t1284;
t442 = -t497 * t995 - t502 * t992 + t1279;
t1023 = t1001 * t437 + t1004 * t442 + t1300;
t1006 = 0.2e1 * qJD(6) * t903 - t1212;
t577 = pkin(5) * t1137 + t1006 + t1223;
t532 = t1272 + t999 * t577 + (pkin(4) + t1153) * t1172;
t540 = -pkin(5) * t1148 + t1002 * t577 + t1271;
t471 = -t532 * t992 + t540 * t995 - t1299;
t503 = qJ(6) * t1009 + (t855 + t1159) * pkin(5) - t1080 + t1290;
t444 = -t1000 * t503 + t1003 * t471 - t1317;
t456 = -t532 * t995 - t540 * t992 + t1308;
t1022 = t1001 * t444 + t1004 * t456 + t1326;
t578 = t1006 + (-t757 + t1137) * pkin(5);
t533 = t1002 * t578 + t1098 * t757 + t1225;
t541 = -t1130 * t757 - t578 * t999 - t1224;
t474 = -t533 * t992 + t541 * t995 - t1250;
t510 = (-t1170 - t1159) * qJ(6) + (-t1010 + t955) * pkin(5) + t1088 + t1238;
t608 = -t1003 * t757 + t1244;
t445 = -pkin(8) * t608 - t1000 * t510 + t1003 * t474;
t462 = -pkin(2) * t608 + pkin(3) * t757 - t533 * t995 - t541 * t992 - t1249;
t550 = t1004 * t610 + t1243;
t1021 = pkin(7) * t550 + t1001 * t445 + t1004 * t462;
t604 = -pkin(4) * t758 - t1119 + t1225;
t644 = t1150 - t1224;
t513 = -t604 * t992 + t644 * t995 - t1250;
t527 = t1238 + t585;
t601 = -t1003 * t758 + t1244;
t461 = -pkin(8) * t601 - t1000 * t527 + t1003 * t513;
t491 = -pkin(2) * t601 + pkin(3) * t758 - t604 * t995 - t644 * t992 - t1249;
t544 = t1004 * t603 + t1243;
t1020 = pkin(7) * t544 + t1001 * t461 + t1004 * t491;
t606 = -pkin(4) * t1172 + t1150 - t1272;
t650 = t1119 - t1271;
t529 = -t606 * t992 + t650 * t995 + t1299;
t538 = -t1290 + t586;
t463 = -t1000 * t538 + t1003 * t529 + t1317;
t495 = -t606 * t995 - t650 * t992 - t1308;
t1019 = t1001 * t463 + t1004 * t495 - t1326;
t595 = t1000 * t612 - t1003 * t788;
t504 = -pkin(8) * t595 + (-qJ(4) * t1003 + t1155) * t611;
t531 = -pkin(2) * t595 + pkin(3) * t788 - qJ(4) * t612;
t539 = t1001 * t611 + t1004 * t596;
t1018 = pkin(7) * t539 + t1001 * t504 + t1004 * t531;
t597 = -qJ(4) * t803 - t611;
t734 = t1000 * t805 + t1003 * t874;
t548 = -pkin(8) * t734 + t1003 * t597 + t1155 * t803;
t553 = -pkin(2) * t734 - pkin(3) * t874 - qJ(4) * t805 - t612;
t695 = t1001 * t803 + t1004 * t735;
t1017 = pkin(7) * t695 + t1001 * t548 + t1004 * t553;
t658 = -pkin(3) * t821 + t708;
t718 = -qJ(4) * t821 + t1146;
t766 = t1000 * t822 + t1003 * t881;
t576 = -pkin(8) * t766 - t1000 * t658 + t1003 * t718;
t630 = -pkin(2) * t766 - pkin(3) * t881 - qJ(4) * t822 + t1145;
t699 = t1001 * t821 + t1004 * t767;
t1016 = pkin(7) * t699 + t1001 * t576 + t1004 * t630;
t673 = -pkin(3) * t844 + t709;
t722 = -qJ(4) * t844 + t1145;
t772 = t1000 * t847 - t1003 * t882;
t584 = -pkin(8) * t772 - t1000 * t673 + t1003 * t722;
t649 = -pkin(2) * t772 + pkin(3) * t882 - qJ(4) * t847 - t1146;
t711 = t1001 * t844 + t1004 * t775;
t1015 = pkin(7) * t711 + t1001 * t584 + t1004 * t649;
t918 = t1000 * t977 + t957;
t786 = -pkin(2) * t918 + t832;
t830 = -pkin(8) * t918 + t1127;
t866 = -t1001 * t962 + t1004 * t922;
t1014 = pkin(7) * t866 + t1001 * t830 + t1004 * t786;
t920 = t1003 * t975 - t1124;
t787 = -pkin(2) * t920 + t833;
t831 = -pkin(8) * t920 + t1114;
t867 = t1001 * t959 + t1004 * t924;
t1013 = pkin(7) * t867 + t1001 * t831 + t1004 * t787;
t928 = -t1109 * t989 - t1125;
t1012 = t1001 * t928 - t1086;
t929 = t1003 * t960 - t1109 * t988;
t1011 = t1001 * t929 + t1086;
t707 = t1001 * t863 + t1004 * t729;
t1008 = pkin(7) * t707 + (-pkin(2) * t1004 - pkin(8) * t1001) * t727;
t948 = t1003 * t961;
t943 = t964 * t997;
t941 = t964 * t994;
t940 = t1036 * t994;
t930 = qJDD(3) * t1001 + t1004 * t956;
t919 = t1003 * t974 + t1123;
t917 = t1000 * t976 + t1113;
t916 = t1078 * t1000;
t915 = -t1000 * t1096 + t948;
t911 = t1037 * t997;
t907 = t1000 * t962 + t1003 * t959;
t905 = t1038 * t997;
t904 = t1038 * t994;
t900 = -t1036 * t996 - t943 * t993;
t898 = -t1036 * t993 + t943 * t996;
t893 = t1004 * t929 - t1087;
t892 = t1004 * t928 + t1087;
t891 = t1000 * t1104 + t1004 * t923;
t890 = t1001 * t1102 + t1004 * t921;
t857 = -t1001 * t967 + t1004 * t908;
t852 = t1000 * t872 + t948;
t851 = -t1030 + (t940 * t994 + t942 * t997) * pkin(7);
t850 = -t1031 + (-t941 * t994 - t943 * t997) * pkin(7);
t842 = -t905 * t993 + t910 * t996;
t841 = t905 * t996 + t910 * t993;
t840 = t1011 * t997 - t994 * t916;
t839 = t1012 * t997 - t994 * t915;
t838 = t1028 * t997 - t994 * t919;
t837 = t1027 * t997 - t994 * t917;
t826 = t1039 * t997 - t994 * t920;
t825 = t1040 * t997 - t994 * t918;
t824 = t1039 * t994 + t997 * t920;
t823 = t1040 * t994 + t997 * t918;
t818 = t1000 * t861 + t1033;
t817 = t1000 * t859 - t1033;
t800 = t1041 * t997 - t994 * t907;
t799 = pkin(2) * t962 + pkin(8) * t922 - t1114;
t798 = -pkin(2) * t959 + pkin(8) * t924 + t1127;
t790 = t810 * t997;
t784 = -pkin(1) * t941 + t1030 * t997 - t1036 * t1156 + t994 * t884;
t783 = pkin(1) * t940 - t1031 * t997 - t1156 * t964 + t994 * t888;
t778 = -t1001 * t871 + t1004 * t853;
t774 = t1000 * t849 - t1003 * t880;
t773 = t1000 * t848 + t1003 * t883;
t771 = t994 * t953 + (t1095 + t1042) * t997;
t770 = t1042 * t994 - t1077 * t997;
t768 = t1000 * t806 + t1003 * t909;
t756 = -t826 * t993 + t867 * t996;
t755 = -t825 * t993 + t866 * t996;
t754 = t826 * t996 + t867 * t993;
t753 = t825 * t996 + t866 * t993;
t737 = -t1001 * t860 + t1004 * t820;
t736 = -t1001 * t858 + t1004 * t819;
t720 = pkin(2) * t966 + pkin(8) * t963 + t729;
t719 = t1043 * t997 - t994 * t852;
t713 = -t1001 * t846 + t1004 * t777;
t712 = -t1001 * t845 + t1004 * t776;
t710 = -pkin(2) * t863 + pkin(8) * t729;
t702 = -pkin(1) * t770 + t1156 * t810;
t701 = -t771 * t993 + t810 * t996;
t700 = t771 * t996 + t810 * t993;
t698 = -t1001 * t804 + t1004 * t769;
t697 = t1044 * t997 - t994 * t818;
t696 = t1045 * t997 - t994 * t817;
t694 = -t1004 * t727 + (-t904 * t994 - t905 * t997) * pkin(7);
t693 = (-t770 * t994 - t771 * t997) * pkin(7);
t654 = t1046 * t997 - t994 * t774;
t653 = t1047 * t997 - t994 * t773;
t652 = t1048 * t997 - t994 * t772;
t651 = t1048 * t994 + t997 * t772;
t643 = -t1001 * t787 + t1004 * t831 + (-t824 * t994 - t826 * t997) * pkin(7);
t642 = -t1001 * t786 + t1004 * t830 + (-t823 * t994 - t825 * t997) * pkin(7);
t641 = t1049 * t997 - t994 * t768;
t640 = t1050 * t997 - t994 * t766;
t639 = t1050 * t994 + t997 * t766;
t629 = t1052 * t997 - t994 * t727;
t628 = t1052 * t994 + t997 * t727;
t627 = t1051 * t997 - t994 * t734;
t626 = t1051 * t994 + t997 * t734;
t623 = -pkin(1) * t824 + t1013 * t997 - t994 * t798;
t622 = -pkin(1) * t823 + t1014 * t997 - t994 * t799;
t613 = -pkin(1) * t904 + t1079 * t997 - t994 * t720;
t599 = -t652 * t993 + t711 * t996;
t598 = t652 * t996 + t711 * t993;
t582 = -t640 * t993 + t699 * t996;
t581 = t640 * t996 + t699 * t993;
t580 = -t629 * t993 + t707 * t996;
t579 = t629 * t996 + t707 * t993;
t571 = -t627 * t993 + t695 * t996;
t570 = t627 * t996 + t695 * t993;
t563 = -pkin(2) * t844 + pkin(8) * t775 + t1000 * t722 + t1003 * t673;
t554 = -pkin(2) * t821 + pkin(8) * t767 + t1000 * t718 + t1003 * t658;
t542 = pkin(8) * t735 + t1000 * t597 + (-pkin(2) - t1154) * t803;
t528 = (pkin(2) * t1001 - pkin(8) * t1004) * t727 + (-t628 * t994 - t629 * t997) * pkin(7);
t522 = -pkin(1) * t628 + t1008 * t997 - t994 * t710;
t519 = t1061 * t997 - t994 * t608;
t517 = t1061 * t994 + t997 * t608;
t509 = t1063 * t997 - t994 * t601;
t507 = t1063 * t994 + t997 * t601;
t499 = t1065 * t997 - t994 * t595;
t498 = t1065 * t994 + t997 * t595;
t496 = -t1001 * t649 + t1004 * t584 + (-t651 * t994 - t652 * t997) * pkin(7);
t494 = -t1001 * t630 + t1004 * t576 + (-t639 * t994 - t640 * t997) * pkin(7);
t490 = pkin(8) * t596 + (-pkin(2) + t1076) * t611;
t485 = -t519 * t993 + t550 * t996;
t483 = t519 * t996 + t550 * t993;
t479 = -pkin(1) * t651 + t1015 * t997 - t994 * t563;
t478 = -t509 * t993 + t544 * t996;
t476 = t509 * t996 + t544 * t993;
t473 = -t1001 * t553 + t1004 * t548 + (-t626 * t994 - t627 * t997) * pkin(7);
t472 = -pkin(1) * t639 + t1016 * t997 - t994 * t554;
t467 = -t499 * t993 + t539 * t996;
t466 = t499 * t996 + t539 * t993;
t460 = t1000 * t529 + t1003 * t538 - t1307;
t455 = -pkin(1) * t626 + t1017 * t997 - t994 * t542;
t450 = pkin(8) * t603 + t1000 * t513 + t1003 * t527 - t1255;
t443 = pkin(8) * t610 + t1000 * t474 + t1003 * t510 - t1255;
t440 = t1000 * t471 + t1003 * t503 + t1307;
t435 = -t1001 * t531 + t1004 * t504 + (-t498 * t994 - t499 * t997) * pkin(7);
t434 = t1000 * t446 + t1003 * t547 + t1278;
t430 = -t1001 * t495 + t1004 * t463 + t1334;
t429 = t1000 * t441 + t1003 * t530 + t1278;
t428 = -pkin(1) * t498 + t1018 * t997 - t994 * t490;
t427 = -t1001 * t491 + t1004 * t461 + (-t507 * t994 - t509 * t997) * pkin(7);
t426 = t1070 * t997 - t994 * t464;
t425 = t1070 * t994 + t997 * t464;
t422 = t1019 * t997 - t994 * t460 + t1333;
t421 = -t1001 * t462 + t1004 * t445 + (-t517 * t994 - t519 * t997) * pkin(7);
t420 = t1071 * t997 - t994 * t448;
t419 = t1071 * t994 + t997 * t448;
t418 = -t1001 * t456 + t1004 * t444 - t1334;
t417 = -pkin(1) * t507 + t1020 * t997 - t994 * t450;
t414 = -t426 * t993 + t438 * t996;
t413 = t426 * t996 + t438 * t993;
t412 = -pkin(1) * t517 + t1021 * t997 - t994 * t443;
t411 = -t1001 * t442 + t1004 * t437 + t1302;
t410 = -pkin(2) * t469 + pkin(8) * t465 + t1000 * t439 + t1003 * t447;
t409 = t1022 * t997 - t994 * t440 - t1333;
t408 = -t1001 * t436 + t1004 * t432 + t1302;
t407 = -t420 * t993 + t431 * t996;
t406 = t420 * t996 + t431 * t993;
t404 = t1023 * t997 - t994 * t434 - t1305;
t403 = -pkin(2) * t457 + pkin(8) * t449 + t1000 * t423 + t1003 * t433;
t402 = t1024 * t997 - t994 * t429 - t1305;
t401 = -t1001 * t424 + t1004 * t416 + (-t425 * t994 - t426 * t997) * pkin(7);
t400 = -pkin(1) * t425 + t1025 * t997 - t994 * t410;
t399 = -t1001 * t415 + t1004 * t405 + (-t419 * t994 - t420 * t997) * pkin(7);
t398 = -pkin(1) * t419 + t1026 * t997 - t994 * t403;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t913, 0, 0, 0, 0, 0, 0, t900, t899, 0, t701, 0, 0, 0, 0, 0, 0, t755, t756, t842, t580, 0, 0, 0, 0, 0, 0, t582, t599, t571, t467, 0, 0, 0, 0, 0, 0, t478, t484, t1304, t414, 0, 0, 0, 0, 0, 0, t485, t1304, -t484, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, 0, 0, 0, 0, 0, 0, t898, -t1075, 0, t700, 0, 0, 0, 0, 0, 0, t753, t754, t841, t579, 0, 0, 0, 0, 0, 0, t581, t598, t570, t466, 0, 0, 0, 0, 0, 0, t476, -t475, t1303, t413, 0, 0, 0, 0, 0, 0, t483, t1303, t475, t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1133, 0, 0, 0, 0, 0, 0, t941, -t940, 0, t770, 0, 0, 0, 0, 0, 0, t823, t824, t904, t628, 0, 0, 0, 0, 0, 0, t639, t651, t626, t498, 0, 0, 0, 0, 0, 0, t507, -t506, t1288, t425, 0, 0, 0, 0, 0, 0, t517, t1288, t506, t419; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1175, -t1174, -t912, -qJ(1) * t912, 0, 0, -t899, 0, t900, t993 * t1106, -qJ(1) * t898 - t784 * t993 + t850 * t996, qJ(1) * t1075 - t783 * t993 + t851 * t996, -t1042 * t996 - t790 * t993, -qJ(1) * t700 + t693 * t996 - t702 * t993, -t840 * t993 + t893 * t996, -t800 * t993 + t857 * t996, -t838 * t993 + t891 * t996, -t839 * t993 + t892 * t996, -t837 * t993 + t890 * t996, -t911 * t993 + t930 * t996, -qJ(1) * t753 - t622 * t993 + t642 * t996, -qJ(1) * t754 - t623 * t993 + t643 * t996, -qJ(1) * t841 - t613 * t993 + t694 * t996, -qJ(1) * t579 - t522 * t993 + t528 * t996, -t697 * t993 + t737 * t996, -t641 * t993 + t698 * t996, -t653 * t993 + t712 * t996, -t696 * t993 + t736 * t996, -t654 * t993 + t713 * t996, -t719 * t993 + t778 * t996, -qJ(1) * t581 - t472 * t993 + t494 * t996, -qJ(1) * t598 - t479 * t993 + t496 * t996, -qJ(1) * t570 - t455 * t993 + t473 * t996, -qJ(1) * t466 - t428 * t993 + t435 * t996, t1177, t1329, t1286, t1261, t1331, t1263, -qJ(1) * t476 - t417 * t993 + t427 * t996, -t422 * t993 + t430 * t996 + t1336, -t404 * t993 + t411 * t996 - t1310, -qJ(1) * t413 - t400 * t993 + t401 * t996, t1177, t1286, -t1329, t1263, -t1331, t1261, -qJ(1) * t483 - t412 * t993 + t421 * t996, -t402 * t993 + t408 * t996 - t1310, -t409 * t993 + t418 * t996 - t1336, -qJ(1) * t406 - t398 * t993 + t399 * t996; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1174, -t1175, t913, qJ(1) * t913, 0, 0, t1075, 0, t898, -t996 * t1106, qJ(1) * t900 + t784 * t996 + t850 * t993, qJ(1) * t899 + t783 * t996 + t851 * t993, -t1042 * t993 + t790 * t996, qJ(1) * t701 + t693 * t993 + t702 * t996, t840 * t996 + t893 * t993, t800 * t996 + t857 * t993, t838 * t996 + t891 * t993, t839 * t996 + t892 * t993, t837 * t996 + t890 * t993, t911 * t996 + t930 * t993, qJ(1) * t755 + t622 * t996 + t642 * t993, qJ(1) * t756 + t623 * t996 + t643 * t993, qJ(1) * t842 + t613 * t996 + t694 * t993, qJ(1) * t580 + t522 * t996 + t528 * t993, t697 * t996 + t737 * t993, t641 * t996 + t698 * t993, t653 * t996 + t712 * t993, t696 * t996 + t736 * t993, t654 * t996 + t713 * t993, t719 * t996 + t778 * t993, qJ(1) * t582 + t472 * t996 + t494 * t993, qJ(1) * t599 + t479 * t996 + t496 * t993, qJ(1) * t571 + t455 * t996 + t473 * t993, qJ(1) * t467 + t428 * t996 + t435 * t993, t1178, -t1328, t1285, t1260, -t1330, t1262, qJ(1) * t478 + t417 * t996 + t427 * t993, t422 * t996 + t430 * t993 + t1335, t404 * t996 + t411 * t993 + t1309, qJ(1) * t414 + t400 * t996 + t401 * t993, t1178, t1285, t1328, t1262, t1330, t1260, qJ(1) * t485 + t412 * t996 + t421 * t993, t402 * t996 + t408 * t993 + t1309, t409 * t996 + t418 * t993 - t1335, qJ(1) * t407 + t398 * t996 + t399 * t993; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1097, t968, 0, 0, 0, 0, t940, 0, t941, t997 * qJDD(2), pkin(1) * t943 - t997 * t884 + (-pkin(7) * t1036 + t1030) * t994, -pkin(1) * t942 - t997 * t888 + (-pkin(7) * t964 - t1031) * t994, t1176, pkin(1) * t771 + pkin(7) * t1176, t1011 * t994 + t997 * t916, t1041 * t994 + t997 * t907, t1028 * t994 + t997 * t919, t1012 * t994 + t997 * t915, t1027 * t994 + t997 * t917, t1037 * t994, pkin(1) * t825 + t1014 * t994 + t997 * t799, pkin(1) * t826 + t1013 * t994 + t997 * t798, pkin(1) * t905 + t1079 * t994 + t997 * t720, pkin(1) * t629 + t1008 * t994 + t997 * t710, t1044 * t994 + t997 * t818, t1049 * t994 + t997 * t768, t1047 * t994 + t997 * t773, t1045 * t994 + t997 * t817, t1046 * t994 + t997 * t774, t1043 * t994 + t997 * t852, pkin(1) * t640 + t1016 * t994 + t997 * t554, pkin(1) * t652 + t1015 * t994 + t997 * t563, pkin(1) * t627 + t1017 * t994 + t997 * t542, pkin(1) * t499 + t1018 * t994 + t997 * t490, t1161, -t1318, t1277, t1236, -t1319, t1234, pkin(1) * t509 + t1020 * t994 + t997 * t450, t1019 * t994 + t997 * t460 - t1332, t1023 * t994 + t997 * t434 + t1306, pkin(1) * t426 + t1025 * t994 + t997 * t410, t1161, t1277, t1318, t1234, t1319, t1236, pkin(1) * t519 + t1021 * t994 + t997 * t443, t1024 * t994 + t997 * t429 + t1306, t1022 * t994 + t997 * t440 + t1332, pkin(1) * t420 + t1026 * t994 + t997 * t403;];
tauB_reg  = t1;
