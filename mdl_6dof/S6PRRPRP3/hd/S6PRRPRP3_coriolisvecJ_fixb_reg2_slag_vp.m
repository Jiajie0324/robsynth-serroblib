% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6PRRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6PRRPRP3_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP3_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP3_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP3_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:38:21
% EndTime: 2019-03-08 21:38:35
% DurationCPUTime: 4.90s
% Computational Cost: add. (5979->451), mult. (15404->616), div. (0->0), fcn. (11620->10), ass. (0->230)
t195 = sin(qJ(3));
t197 = cos(qJ(3));
t230 = pkin(3) * t195 - qJ(4) * t197;
t132 = qJD(3) * t230 - t195 * qJD(4);
t190 = sin(pkin(11));
t273 = qJD(3) * t195;
t266 = pkin(8) * t273;
t171 = t190 * t266;
t192 = cos(pkin(11));
t196 = sin(qJ(2));
t191 = sin(pkin(6));
t279 = qJD(1) * t191;
t198 = cos(qJ(2));
t291 = t197 * t198;
t287 = t192 * t132 - (-t190 * t291 + t192 * t196) * t279 + t171;
t335 = (t190 * t196 + t192 * t291) * t279 - t190 * t132;
t293 = t192 * t197;
t224 = pkin(4) * t195 - pkin(9) * t293;
t212 = t224 * qJD(3);
t334 = t212 + t287;
t294 = t192 * t195;
t298 = t190 * t197;
t333 = -(-pkin(8) * t294 - pkin(9) * t298) * qJD(3) + t335;
t268 = t197 * qJD(2);
t178 = -qJD(5) + t268;
t269 = t192 * qJD(3);
t276 = qJD(2) * t195;
t146 = -t190 * t276 + t269;
t254 = t192 * t276;
t270 = t190 * qJD(3);
t147 = t254 + t270;
t194 = sin(qJ(5));
t321 = cos(qJ(5));
t89 = -t146 * t321 + t147 * t194;
t303 = t89 * t178;
t263 = t321 * t192;
t242 = t197 * t263;
t227 = qJD(2) * t242;
t267 = qJD(2) * qJD(3);
t251 = t197 * t267;
t234 = t190 * t251;
t253 = qJD(5) * t321;
t55 = t194 * (qJD(5) * t147 + t234) - qJD(3) * t227 - t146 * t253;
t332 = t55 - t303;
t331 = t89 ^ 2;
t151 = t190 * t321 + t192 * t194;
t136 = t151 * qJD(5);
t210 = t197 * t151;
t285 = qJD(2) * t210 - t136;
t262 = t190 * t268;
t271 = qJD(5) * t194;
t329 = -t190 * t271 + t192 * t253;
t284 = -t194 * t262 + t227 - t329;
t255 = t198 * t279;
t236 = qJD(2) * t255;
t193 = cos(pkin(6));
t278 = qJD(1) * t193;
t330 = qJD(3) * t278 + t236;
t217 = t146 * t194 + t147 * t321;
t323 = t217 ^ 2;
t159 = -pkin(3) * t197 - qJ(4) * t195 - pkin(2);
t123 = pkin(8) * t293 + t159 * t190;
t299 = t190 * t195;
t108 = -pkin(9) * t299 + t123;
t145 = t192 * t159;
t96 = -pkin(9) * t294 + t145 + (-pkin(8) * t190 - pkin(4)) * t197;
t316 = -t108 * t271 + t194 * t334 + t96 * t253 - t321 * t333;
t318 = pkin(9) + qJ(4);
t163 = t318 * t190;
t164 = t318 * t192;
t111 = -t163 * t194 + t164 * t321;
t256 = t196 * t279;
t157 = qJD(2) * pkin(8) + t256;
t143 = t195 * t157;
t119 = t197 * t278 - t143;
t152 = t230 * qJD(2);
t75 = -t190 * t119 + t152 * t192;
t57 = qJD(2) * t224 + t75;
t76 = t119 * t192 + t152 * t190;
t64 = -pkin(9) * t262 + t76;
t312 = qJD(4) * t151 + qJD(5) * t111 - t194 * t64 + t321 * t57;
t302 = t217 * t178;
t215 = -t190 * t194 + t263;
t188 = t195 ^ 2;
t189 = t197 ^ 2;
t328 = qJD(2) * (t188 - 0.2e1 * t189);
t327 = qJD(5) * t217;
t129 = t151 * t195;
t207 = qJD(3) * t210;
t56 = qJD(2) * t207 + t327;
t79 = t195 * t329 + t207;
t326 = -t178 * t79 - t197 * t56 + (qJD(2) * t129 + t89) * t273;
t309 = t108 * t321 + t194 * t96;
t315 = -qJD(5) * t309 + t194 * t333 + t321 * t334;
t325 = t178 * t285 + (-qJD(3) * t215 - t89) * t276;
t324 = -t151 * t56 - t215 * t55 + t217 * t285 + t284 * t89;
t322 = -qJ(6) * t273 + qJD(6) * t197 - t316;
t250 = -qJD(3) * pkin(3) + qJD(4);
t112 = -t119 + t250;
t77 = -pkin(4) * t146 + t112;
t26 = pkin(5) * t89 - qJ(6) * t217 + t77;
t320 = t26 * t217;
t319 = t217 * t89;
t317 = -pkin(5) * t273 - t315;
t25 = t194 * t57 + t321 * t64;
t22 = qJ(6) * t276 + t25;
t216 = -t163 * t321 - t164 * t194;
t69 = qJD(4) * t215 + qJD(5) * t216;
t314 = t22 - t69;
t313 = pkin(5) * t276 + t312;
t311 = -t25 + t69;
t120 = t157 * t197 + t195 * t278;
t99 = pkin(4) * t262 + t120;
t310 = pkin(5) * t285 - qJ(6) * t284 + qJD(6) * t151 + t99;
t100 = (t132 + t256) * qJD(2);
t282 = t330 * t197;
t81 = (qJD(4) - t143) * qJD(3) + t282;
t40 = t100 * t190 + t192 * t81;
t308 = qJD(2) * pkin(2);
t297 = t191 * t196;
t138 = -t193 * t197 + t195 * t297;
t272 = qJD(3) * t197;
t85 = t157 * t272 + t195 * t330;
t307 = t85 * t138;
t306 = t85 * t190;
t305 = t85 * t192;
t304 = t85 * t195;
t301 = t146 * t192;
t200 = qJD(2) ^ 2;
t300 = t189 * t200;
t296 = t191 * t198;
t295 = t191 * t200;
t199 = qJD(3) ^ 2;
t290 = t199 * t195;
t289 = t199 * t197;
t116 = qJD(3) * qJ(4) + t120;
t121 = qJD(2) * t159 - t255;
t58 = -t116 * t190 + t121 * t192;
t41 = -pkin(4) * t268 - pkin(9) * t147 + t58;
t59 = t116 * t192 + t121 * t190;
t48 = pkin(9) * t146 + t59;
t17 = -t194 * t48 + t321 * t41;
t288 = qJD(6) - t17;
t246 = t192 * t266;
t286 = -t246 - t335;
t259 = t197 * t270;
t142 = pkin(4) * t259 + pkin(8) * t272;
t153 = pkin(4) * t299 + pkin(8) * t195;
t280 = t188 - t189;
t277 = qJD(2) * t191;
t275 = qJD(3) * t216;
t274 = qJD(3) * t111;
t265 = -t323 + t331;
t264 = t196 * t295;
t182 = -pkin(4) * t192 - pkin(3);
t261 = t196 * t277;
t260 = t198 * t277;
t257 = t178 * t276;
t183 = t195 * t267;
t39 = t100 * t192 - t190 * t81;
t31 = qJD(2) * t212 + t39;
t34 = -pkin(9) * t234 + t40;
t4 = -t194 * t34 - t253 * t48 - t271 * t41 + t31 * t321;
t247 = -t146 + t269;
t245 = t89 * t255;
t244 = t217 * t255;
t243 = pkin(5) * t183;
t66 = pkin(4) * t234 + t85;
t241 = t195 * t255;
t240 = t195 * t260;
t239 = t197 * t260;
t238 = -t111 * t56 + t216 * t55 - t69 * t89;
t235 = qJ(6) * t183;
t233 = t197 * t183;
t232 = -t323 - t331;
t231 = t129 * t56 + t79 * t89;
t226 = qJD(2) * t247;
t225 = qJD(2) * (-t147 + t270);
t18 = t194 * t41 + t321 * t48;
t223 = -t178 * t18 + t4;
t49 = -t108 * t194 + t321 * t96;
t139 = t193 * t195 + t197 * t297;
t220 = -t194 * t31 - t253 * t41 + t271 * t48 - t321 * t34;
t104 = -t139 * t190 - t192 * t296;
t105 = t139 * t192 - t190 * t296;
t218 = t104 * t321 - t105 * t194;
t106 = -qJD(3) * t138 + t239;
t73 = -t106 * t190 + t192 * t261;
t74 = t106 * t192 + t190 * t261;
t13 = qJD(5) * t218 + t194 * t73 + t321 * t74;
t52 = t104 * t194 + t105 * t321;
t14 = qJD(5) * t52 + t194 * t74 - t321 * t73;
t219 = -t13 * t89 + t14 * t217 + t218 * t55 - t52 * t56;
t214 = t197 * t225;
t213 = -t215 * t56 - t285 * t89;
t2 = -t243 - t4;
t158 = -t255 - t308;
t209 = qJD(3) * (t158 + t255 - t308);
t107 = qJD(3) * t139 + t240;
t208 = t107 * t89 + t138 * t56 + t14 * t178 + t183 * t218;
t130 = t215 * t195;
t78 = -qJD(3) * t242 + t136 * t195 + t194 * t259;
t206 = t129 * t55 - t130 * t56 - t217 * t79 + t78 * t89;
t205 = -qJ(4) * t273 + (-t112 + t250) * t197;
t5 = pkin(5) * t56 + qJ(6) * t55 - qJD(6) * t217 + t66;
t203 = -t107 * t217 - t13 * t178 + t138 * t55 + t183 * t52;
t84 = -t157 * t273 + t282;
t202 = t304 + t84 * t197 + (-t119 * t197 - t120 * t195) * qJD(3);
t201 = t56 - t302;
t187 = t192 ^ 2;
t186 = t190 ^ 2;
t175 = t195 * t200 * t197;
t166 = -0.2e1 * t233;
t126 = (-t178 - t268) * t273;
t122 = -pkin(8) * t298 + t145;
t87 = -pkin(5) * t215 - qJ(6) * t151 + t182;
t63 = pkin(5) * t129 - qJ(6) * t130 + t153;
t47 = pkin(5) * t217 + qJ(6) * t89;
t46 = pkin(5) * t197 - t49;
t45 = -qJ(6) * t197 + t309;
t28 = -t55 - t303;
t27 = t284 * t178 + (qJD(3) * t151 - t217) * t276;
t21 = pkin(5) * t79 + qJ(6) * t78 - qJD(6) * t130 + t142;
t19 = -t130 * t55 - t217 * t78;
t12 = -qJ(6) * t178 + t18;
t10 = pkin(5) * t178 + t288;
t8 = t78 * t178 + t55 * t197 + (qJD(2) * t130 + t217) * t273;
t7 = -t151 * t55 - t217 * t284;
t1 = -qJD(6) * t178 - t220 + t235;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t264, -t198 * t295, 0, 0, 0, 0, 0, 0, 0, 0, -t197 * t264 + (-t107 - t240) * qJD(3), t195 * t264 + (-t106 - t239) * qJD(3) (t106 * t197 + t107 * t195 + (t138 * t197 - t139 * t195) * qJD(3)) * qJD(2), t120 * t106 - t119 * t107 + t307 + t84 * t139 + (t158 - t255) * t261, 0, 0, 0, 0, 0, 0, -t107 * t146 + (-t197 * t73 + (t104 * t195 + t138 * t298) * qJD(3)) * qJD(2), t107 * t147 + (t197 * t74 + (-t105 * t195 + t138 * t293) * qJD(3)) * qJD(2), t74 * t146 - t73 * t147 + (-t104 * t192 - t105 * t190) * t251, t104 * t39 + t105 * t40 + t107 * t112 + t58 * t73 + t59 * t74 + t307, 0, 0, 0, 0, 0, 0, t208, -t203, t219, t107 * t77 + t13 * t18 + t138 * t66 - t14 * t17 + t218 * t4 - t220 * t52, 0, 0, 0, 0, 0, 0, t208, t219, t203, t1 * t52 + t10 * t14 + t107 * t26 + t12 * t13 + t138 * t5 - t2 * t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t233, -0.2e1 * t280 * t267, t289, t166, -t290, 0, -pkin(8) * t289 + t195 * t209, pkin(8) * t290 + t197 * t209 (-t188 - t189) * t236 + t202 ((t119 * t195 - t120 * t197) * t198 + (-t158 - t308) * t196) * t279 + t202 * pkin(8) (t147 * t192 + t187 * t276) * t272 (t301 + (-t147 - 0.2e1 * t254) * t190) * t272 (t147 * t195 + t192 * t328) * qJD(3) (-t146 * t190 + t186 * t276) * t272 (t146 * t195 - t190 * t328) * qJD(3), t166 (t146 * t255 + t306 + (qJD(2) * t122 + t58) * qJD(3)) * t195 + (-t39 + (-pkin(8) * t146 + t112 * t190) * qJD(3) + (t171 - t287) * qJD(2)) * t197 (-t147 * t255 + t305 + (-qJD(2) * t123 - t59) * qJD(3)) * t195 + (t40 + (pkin(8) * t147 + t112 * t192) * qJD(3) + (t246 + t286) * qJD(2)) * t197 (-t190 * t40 - t192 * t39) * t195 - t287 * t147 + t286 * t146 + (-t190 * t59 - t192 * t58 + (-t122 * t192 - t123 * t190) * qJD(2)) * t272, -t112 * t241 + t39 * t122 + t40 * t123 + t286 * t59 + t287 * t58 + (t112 * t272 + t304) * pkin(8), t19, t206, t8, t231, -t326, t126, t66 * t129 + t142 * t89 + t153 * t56 - t4 * t197 + t77 * t79 - t315 * t178 + (-t245 + (qJD(2) * t49 + t17) * qJD(3)) * t195, t66 * t130 + t142 * t217 - t153 * t55 - t220 * t197 - t77 * t78 + t316 * t178 + (-t244 + (-qJD(2) * t309 - t18) * qJD(3)) * t195, t129 * t220 - t130 * t4 + t17 * t78 - t18 * t79 - t217 * t315 - t309 * t56 - t316 * t89 + t49 * t55, t66 * t153 - t220 * t309 + t4 * t49 + (t142 - t241) * t77 + t316 * t18 + t315 * t17, t19, t8, -t206, t126, t326, t231, t5 * t129 + t2 * t197 + t21 * t89 + t26 * t79 + t63 * t56 + t317 * t178 + (-t245 + (-qJD(2) * t46 - t10) * qJD(3)) * t195, -t1 * t129 - t10 * t78 - t12 * t79 + t130 * t2 + t217 * t317 + t322 * t89 - t45 * t56 - t46 * t55, -t1 * t197 - t5 * t130 - t21 * t217 + t26 * t78 + t63 * t55 + t322 * t178 + (t244 + (qJD(2) * t45 + t12) * qJD(3)) * t195, t1 * t45 + t2 * t46 + t5 * t63 + (t21 - t241) * t26 - t322 * t12 + t317 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, t280 * t200, 0, t175, 0, 0, qJD(3) * t120 - t158 * t276 - t85, -t158 * t268 + (t119 + t143) * qJD(3) - t282, 0, 0, t192 * t214 (-t301 + t147 * t190 + (-t186 + t187) * qJD(3)) * t268, t192 * t300 + t195 * t225, -t247 * t262, -t190 * t300 + t195 * t226, t175, t120 * t146 - t305 + (t190 * t205 - t195 * t58 + t197 * t75) * qJD(2), -t120 * t147 + t306 + (t192 * t205 + t195 * t59 - t197 * t76) * qJD(2), -t76 * t146 + t75 * t147 + (qJD(4) * t146 + t268 * t58 + t40) * t192 + (qJD(4) * t147 + t268 * t59 - t39) * t190, -t85 * pkin(3) - t112 * t120 - t58 * t75 - t59 * t76 + (-t190 * t58 + t192 * t59) * qJD(4) + (-t39 * t190 + t40 * t192) * qJ(4), t7, t324, t27, t213, -t325, t257, -t66 * t215 + t182 * t56 - t99 * t89 - t285 * t77 + t312 * t178 + (-t17 + t275) * t276, t66 * t151 - t182 * t55 - t99 * t217 - t284 * t77 + t311 * t178 + (t18 - t274) * t276, -t151 * t4 + t17 * t284 + t18 * t285 - t215 * t220 + t217 * t312 + t25 * t89 + t238, -t111 * t220 - t17 * t312 + t18 * t311 + t66 * t182 + t216 * t4 - t77 * t99, t7, t27, -t324, t257, t325, t213, -t5 * t215 + t87 * t56 - t310 * t89 - t285 * t26 + t313 * t178 + (t10 + t275) * t276, t1 * t215 - t10 * t284 + t12 * t285 + t151 * t2 + t217 * t313 + t22 * t89 + t238, -t5 * t151 + t87 * t55 + t310 * t217 + t284 * t26 + t314 * t178 + (-t12 + t274) * t276, t1 * t111 + t10 * t313 - t12 * t314 - t2 * t216 - t26 * t310 + t5 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214, t197 * t226, -t146 ^ 2 - t147 ^ 2, -t146 * t59 + t147 * t58 + t85, 0, 0, 0, 0, 0, 0, t201, -t332, t232, t17 * t217 + t18 * t89 + t66, 0, 0, 0, 0, 0, 0, t201, t232, t332, -t10 * t217 + t12 * t89 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t319, -t265, t28, -t319, -t151 * t251 - t302 - t327, t183, -t217 * t77 + t223, -t17 * t178 + t77 * t89 + t220, 0, 0, t319, t28, t265, t183, t56 + t302, -t319, -t47 * t89 + t223 + 0.2e1 * t243 - t320, pkin(5) * t55 - qJ(6) * t56 + (t12 - t18) * t217 + (t10 - t288) * t89, 0.2e1 * t235 - t26 * t89 + t47 * t217 + (-0.2e1 * qJD(6) + t17) * t178 - t220, -pkin(5) * t2 + qJ(6) * t1 - t10 * t18 + t12 * t288 - t26 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183 + t319, t28, -t178 ^ 2 - t323, t12 * t178 + t2 + t320;];
tauc_reg  = t3;
