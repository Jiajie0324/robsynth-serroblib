% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 13:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPPRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPPRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPPRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPPRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPPRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:36:24
% EndTime: 2019-05-05 13:36:40
% DurationCPUTime: 15.28s
% Computational Cost: add. (47496->611), mult. (101065->913), div. (0->0), fcn. (68433->10), ass. (0->398)
t614 = cos(pkin(9));
t657 = t614 * qJDD(1);
t612 = sin(pkin(9));
t624 = qJD(1) ^ 2;
t672 = t612 * t624;
t582 = -t657 + t672;
t608 = g(3) - qJDD(2);
t549 = qJ(2) * t582 - t608 * t612;
t619 = sin(qJ(1));
t622 = cos(qJ(1));
t659 = qJDD(1) * t612;
t581 = t614 * t624 + t659;
t643 = t622 * t581 - t582 * t619;
t648 = -qJ(2) * t581 + t614 * t608;
t729 = -pkin(6) * t643 + t549 * t619 + t622 * t648;
t618 = sin(qJ(5));
t611 = sin(pkin(10));
t613 = cos(pkin(10));
t621 = cos(qJ(5));
t634 = t611 * t621 + t613 * t618;
t565 = t634 * qJD(1);
t567 = (-t611 * t618 + t613 * t621) * qJD(1);
t680 = t567 * t565;
t724 = qJDD(5) - t680;
t731 = t618 * t724;
t730 = t621 * t724;
t587 = g(1) * t619 - t622 * g(2);
t576 = qJDD(1) * pkin(1) + t587;
t588 = g(1) * t622 + g(2) * t619;
t577 = -pkin(1) * t624 - t588;
t518 = -t614 * t576 + t577 * t612;
t610 = qJDD(1) * pkin(2);
t503 = -t624 * qJ(3) + qJDD(3) + t518 - t610;
t726 = -qJDD(1) * qJ(4) - 0.2e1 * qJD(4) * qJD(1) + t503;
t519 = t576 * t612 + t577 * t614;
t645 = t518 * t612 + t614 * t519;
t462 = t518 * t614 - t519 * t612;
t691 = t462 * t622;
t725 = -t619 * t645 + t691;
t692 = t462 * t619;
t404 = t622 * t645 + t692;
t664 = t567 * qJD(5);
t710 = t634 * qJDD(1);
t513 = -t710 - t664;
t628 = qJDD(6) - t513;
t641 = t581 * t619 + t622 * t582;
t704 = pkin(6) * t641 + t549 * t622 - t619 * t648;
t617 = sin(qJ(6));
t620 = cos(qJ(6));
t543 = -t620 * qJD(5) + t567 * t617;
t545 = qJD(5) * t617 + t567 * t620;
t492 = t545 * t543;
t711 = -t492 + t628;
t721 = t617 * t711;
t720 = t620 * t711;
t630 = 0.2e1 * qJD(3) * qJD(1) + t519;
t629 = -t624 * pkin(2) + t630;
t661 = qJDD(1) * qJ(3);
t500 = t629 + t661;
t440 = t500 * t612 - t503 * t614;
t646 = t614 * t500 + t503 * t612;
t365 = -t440 * t619 + t622 * t646;
t364 = t440 * t622 + t619 * t646;
t604 = t611 ^ 2;
t605 = t613 ^ 2;
t666 = t604 + t605;
t712 = t666 * t624;
t574 = t611 * t712;
t533 = t574 * t614 + t611 * t659;
t536 = -t574 * t612 + t611 * t657;
t479 = t533 * t622 + t536 * t619;
t719 = t533 * t619 - t536 * t622;
t478 = -t613 * t608 + t611 * t726;
t559 = qJD(6) + t565;
t499 = t559 * t543;
t658 = qJDD(1) * t613;
t660 = qJDD(1) * t611;
t564 = -t618 * t660 + t621 * t658;
t665 = qJD(5) * t565;
t515 = t564 - t665;
t652 = t543 * qJD(6) - t617 * qJDD(5) - t620 * t515;
t432 = t652 + t499;
t709 = -t624 * qJ(4) + qJDD(4);
t644 = -t620 * qJDD(5) + t617 * t515;
t427 = (qJD(6) - t559) * t545 + t644;
t674 = t611 * t608;
t477 = -t613 * t726 - t674;
t541 = t543 ^ 2;
t542 = t545 ^ 2;
t558 = t559 ^ 2;
t561 = t565 ^ 2;
t562 = t567 ^ 2;
t703 = pkin(1) * t581;
t702 = pkin(4) * t611;
t701 = pkin(5) * t618;
t700 = pkin(2) + qJ(4);
t675 = t604 * t624;
t459 = -pkin(4) * t675 - pkin(7) * t660 + t478;
t627 = t674 + (-pkin(7) * qJDD(1) - t624 * t702 + t726) * t613;
t395 = t459 * t618 - t621 * t627;
t396 = t621 * t459 + t618 * t627;
t332 = -t395 * t621 + t396 * t618;
t698 = t332 * t611;
t697 = t332 * t613;
t506 = pkin(5) * t565 - pkin(8) * t567;
t623 = qJD(5) ^ 2;
t356 = -qJDD(5) * pkin(5) - t623 * pkin(8) + t506 * t567 + t395;
t696 = t356 * t617;
t695 = t356 * t620;
t444 = t492 + t628;
t694 = t444 * t617;
t693 = t444 * t620;
t469 = (qJ(3) + t702) * qJDD(1) + t629 + t709 + (-t605 * t624 - t675) * pkin(7);
t690 = t469 * t618;
t689 = t469 * t621;
t510 = qJDD(5) + t680;
t688 = t510 * t618;
t687 = t510 * t621;
t682 = t559 * t617;
t681 = t559 * t620;
t578 = t666 * qJDD(1);
t679 = t578 * t612;
t678 = t578 * t614;
t673 = t611 * t613;
t357 = -pkin(5) * t623 + qJDD(5) * pkin(8) - t506 * t565 + t396;
t375 = (-t515 + t665) * pkin(8) + (-t513 + t664) * pkin(5) + t469;
t320 = t620 * t357 + t617 * t375;
t667 = t604 - t605;
t656 = t618 * t492;
t655 = t621 * t492;
t654 = t612 * t680;
t653 = t614 * t680;
t651 = -pkin(5) * t621 - pkin(4);
t649 = t611 * t658;
t319 = t357 * t617 - t620 * t375;
t278 = t319 * t617 + t620 * t320;
t333 = t395 * t618 + t621 * t396;
t540 = -t587 * t619 - t622 * t588;
t494 = t500 + t709;
t639 = t494 + t661;
t586 = qJDD(1) * t622 - t619 * t624;
t637 = -pkin(6) * t586 - g(3) * t619;
t277 = -t319 * t620 + t320 * t617;
t418 = -t477 * t613 + t478 * t611;
t419 = t477 * t611 + t478 * t613;
t546 = -t614 * t649 + t672 * t673;
t547 = t581 * t673;
t636 = t546 * t622 + t547 * t619;
t635 = t546 * t619 - t547 * t622;
t539 = t587 * t622 - t588 * t619;
t633 = -pkin(1) * t582 - t518;
t585 = qJDD(1) * t619 + t622 * t624;
t584 = t667 * t624;
t579 = t667 * qJDD(1);
t573 = t613 * t712;
t560 = -pkin(6) * t585 + g(3) * t622;
t556 = -t562 - t623;
t555 = -t562 + t623;
t554 = t561 - t623;
t538 = -t573 * t612 + t613 * t657;
t535 = t573 * t614 + t612 * t658;
t523 = -t614 * t712 - t679;
t522 = -t579 * t612 - t584 * t614;
t521 = -t612 * t712 + t678;
t520 = t579 * t614 - t584 * t612;
t516 = t562 - t561;
t514 = t564 - 0.2e1 * t665;
t512 = t710 + 0.2e1 * t664;
t508 = -t623 - t561;
t502 = (-t565 * t621 + t567 * t618) * qJD(5);
t501 = (-t565 * t618 - t567 * t621) * qJD(5);
t497 = -t542 + t558;
t496 = t541 - t558;
t491 = -t561 - t562;
t490 = -t542 + t541;
t488 = pkin(3) * t660 + t613 * t494;
t487 = pkin(3) * t658 - t611 * t494;
t486 = t515 * t621 - t618 * t664;
t485 = t515 * t618 + t621 * t664;
t484 = -t513 * t618 + t621 * t665;
t483 = t513 * t621 + t618 * t665;
t482 = -t535 * t619 + t538 * t622;
t480 = t535 * t622 + t538 * t619;
t476 = -t542 - t558;
t475 = -t556 * t618 - t687;
t474 = -t555 * t618 + t730;
t473 = t554 * t621 - t688;
t472 = t556 * t621 - t688;
t471 = t555 * t621 + t731;
t470 = t554 * t618 + t687;
t468 = -t521 * t619 + t523 * t622;
t467 = t521 * t622 + t523 * t619;
t466 = -t558 - t541;
t464 = -qJD(6) * t545 - t644;
t458 = t541 + t542;
t457 = -t512 * t621 - t514 * t618;
t456 = t564 * t618 - t621 * t710;
t455 = -t512 * t618 + t514 * t621;
t454 = -t564 * t621 - t618 * t710;
t452 = -pkin(3) * t574 - t477;
t451 = -pkin(3) * t573 - t478;
t450 = t508 * t621 - t731;
t449 = t508 * t618 + t730;
t446 = pkin(1) * t608 + qJ(2) * t645;
t438 = (-t543 * t620 + t545 * t617) * t559;
t437 = (-t543 * t617 - t545 * t620) * t559;
t436 = -t501 * t613 - t502 * t611;
t435 = qJDD(5) * t614 - t436 * t612;
t434 = qJDD(5) * t612 + t436 * t614;
t433 = -qJ(2) * t440 + (-pkin(2) * t612 + qJ(3) * t614) * t608;
t431 = -t499 + t652;
t428 = (-qJD(6) - t559) * t545 - t644;
t426 = qJ(2) * t646 + (pkin(2) * t614 + qJ(3) * t612 + pkin(1)) * t608;
t425 = -t545 * t682 - t620 * t652;
t424 = t545 * t681 - t617 * t652;
t423 = -t464 * t617 + t543 * t681;
t422 = t464 * t620 + t543 * t682;
t421 = -t485 * t613 - t486 * t611;
t420 = -t483 * t613 - t484 * t611;
t417 = -t472 * t611 + t475 * t613;
t416 = t472 * t613 + t475 * t611;
t415 = -t471 * t613 - t474 * t611;
t414 = -t470 * t613 - t473 * t611;
t413 = -pkin(7) * t472 + t689;
t412 = t438 * t621 + t618 * t628;
t411 = t438 * t618 - t621 * t628;
t410 = t496 * t620 - t694;
t409 = -t497 * t617 + t720;
t408 = t496 * t617 + t693;
t407 = t497 * t620 + t721;
t406 = -pkin(3) * t712 - t419;
t405 = -pkin(7) * t449 + t690;
t402 = -t476 * t617 - t693;
t401 = t476 * t620 - t694;
t400 = -t415 * t612 + t564 * t614;
t399 = -t414 * t612 - t614 * t710;
t398 = t415 * t614 + t564 * t612;
t397 = t414 * t614 - t612 * t710;
t393 = -t454 * t611 + t456 * t613;
t392 = -t455 * t613 - t457 * t611;
t391 = t454 * t613 + t456 * t611;
t390 = t466 * t620 - t721;
t389 = t466 * t617 + t720;
t388 = -t449 * t611 + t450 * t613;
t387 = t449 * t613 + t450 * t611;
t386 = -t421 * t612 + t653;
t385 = -t420 * t612 - t653;
t384 = t421 * t614 + t654;
t383 = t420 * t614 - t654;
t382 = -pkin(4) * t514 + pkin(7) * t475 + t690;
t381 = -qJ(2) * t533 + t452 * t614 - t488 * t612;
t380 = -qJ(2) * t535 + t451 * t614 - t487 * t612;
t379 = qJ(2) * t536 + t452 * t612 + t488 * t614;
t378 = qJ(2) * t538 + t451 * t612 + t487 * t614;
t377 = t416 * t612 + t514 * t614;
t376 = -t416 * t614 + t514 * t612;
t374 = t425 * t621 + t656;
t373 = t423 * t621 - t656;
t372 = t425 * t618 - t655;
t371 = t423 * t618 + t655;
t368 = -pkin(4) * t512 + pkin(7) * t450 - t689;
t367 = t418 * t612 + t494 * t614;
t366 = -t418 * t614 + t494 * t612;
t363 = -pkin(3) * t678 - qJ(2) * t521 - t406 * t612;
t362 = -pkin(3) * t679 + qJ(2) * t523 + t406 * t614;
t361 = -t392 * t612 + t516 * t614;
t360 = t392 * t614 + t516 * t612;
t359 = t387 * t612 + t512 * t614;
t358 = -t387 * t614 + t512 * t612;
t355 = t391 * t612 + t491 * t614;
t354 = -t391 * t614 + t491 * t612;
t352 = -t427 * t620 - t431 * t617;
t351 = t428 * t620 + t432 * t617;
t350 = -t427 * t617 + t431 * t620;
t349 = t428 * t617 - t432 * t620;
t348 = t410 * t621 - t427 * t618;
t347 = t409 * t621 - t431 * t618;
t346 = t410 * t618 + t427 * t621;
t345 = t409 * t618 + t431 * t621;
t344 = pkin(3) * t418 - qJ(3) * t419;
t343 = t402 * t621 - t432 * t618;
t342 = t402 * t618 + t432 * t621;
t341 = -t411 * t613 - t412 * t611;
t340 = t390 * t621 - t428 * t618;
t339 = t390 * t618 + t428 * t621;
t338 = t351 * t621 - t490 * t618;
t337 = t351 * t618 + t490 * t621;
t336 = pkin(3) * t494 - t419 * t700;
t335 = t352 * t621 - t458 * t618;
t334 = t352 * t618 + t458 * t621;
t331 = -t376 * t619 + t377 * t622;
t330 = t376 * t622 + t377 * t619;
t329 = -t372 * t613 - t374 * t611;
t328 = -t371 * t613 - t373 * t611;
t327 = -pkin(8) * t401 + t695;
t326 = -t341 * t612 + t437 * t614;
t325 = t341 * t614 + t437 * t612;
t324 = -t366 * t619 + t367 * t622;
t323 = t366 * t622 + t367 * t619;
t322 = -pkin(8) * t389 + t696;
t321 = -pkin(4) * t469 + pkin(7) * t333;
t318 = -pkin(7) * t454 - t332;
t316 = pkin(3) * t391 + pkin(4) * t454 - qJ(3) * t393;
t315 = -t358 * t619 + t359 * t622;
t314 = t358 * t622 + t359 * t619;
t313 = -t354 * t619 + t355 * t622;
t312 = t354 * t622 + t355 * t619;
t311 = -pkin(4) * t491 + pkin(7) * t456 + t333;
t310 = pkin(3) * t416 + pkin(4) * t472 - qJ(3) * t417 - t396;
t309 = -t329 * t612 + t424 * t614;
t308 = -t328 * t612 + t422 * t614;
t307 = t329 * t614 + t424 * t612;
t306 = t328 * t614 + t422 * t612;
t305 = -t346 * t613 - t348 * t611;
t304 = -t345 * t613 - t347 * t611;
t303 = -pkin(5) * t401 + t320;
t302 = -t342 * t611 + t343 * t613;
t301 = t342 * t613 + t343 * t611;
t300 = -pkin(5) * t389 + t319;
t299 = pkin(3) * t387 + pkin(4) * t449 - qJ(3) * t388 - t395;
t298 = -t339 * t611 + t340 * t613;
t297 = t339 * t613 + t340 * t611;
t296 = -t337 * t613 - t338 * t611;
t295 = pkin(3) * t514 - t613 * t382 - t611 * t413 - t417 * t700;
t294 = -t334 * t611 + t335 * t613;
t293 = t334 * t613 + t335 * t611;
t292 = t333 * t613 - t698;
t291 = t333 * t611 + t697;
t290 = -t305 * t612 + t408 * t614;
t289 = -t304 * t612 + t407 * t614;
t288 = t305 * t614 + t408 * t612;
t287 = t304 * t614 + t407 * t612;
t286 = pkin(3) * t512 - t613 * t368 - t388 * t700 - t611 * t405;
t285 = t301 * t612 + t401 * t614;
t284 = -t301 * t614 + t401 * t612;
t283 = t291 * t612 + t469 * t614;
t282 = -t291 * t614 + t469 * t612;
t281 = t297 * t612 + t389 * t614;
t280 = -t297 * t614 + t389 * t612;
t279 = -qJ(2) * t366 - t336 * t612 + t344 * t614;
t276 = -t296 * t612 + t349 * t614;
t275 = t296 * t614 + t349 * t612;
t274 = t293 * t612 + t350 * t614;
t273 = -t293 * t614 + t350 * t612;
t272 = -pkin(1) * t419 + qJ(2) * t367 + t336 * t614 + t344 * t612;
t271 = t278 * t621 + t356 * t618;
t270 = t278 * t618 - t356 * t621;
t269 = -pkin(8) * t350 - t277;
t268 = -pkin(7) * t342 - t303 * t618 + t327 * t621;
t267 = pkin(3) * t491 - t613 * t311 - t611 * t318 - t393 * t700;
t266 = -pkin(7) * t339 - t300 * t618 + t322 * t621;
t265 = -qJ(2) * t376 - t295 * t612 + t310 * t614;
t264 = -pkin(4) * t401 + pkin(7) * t343 + t303 * t621 + t327 * t618;
t263 = -pkin(4) * t389 + pkin(7) * t340 + t300 * t621 + t322 * t618;
t262 = -pkin(1) * t417 + qJ(2) * t377 + t295 * t614 + t310 * t612;
t261 = -t284 * t619 + t285 * t622;
t260 = t284 * t622 + t285 * t619;
t259 = -t282 * t619 + t283 * t622;
t258 = t282 * t622 + t283 * t619;
t257 = -qJ(2) * t358 - t286 * t612 + t299 * t614;
t256 = -t280 * t619 + t281 * t622;
t255 = t280 * t622 + t281 * t619;
t254 = -pkin(7) * t334 + t269 * t621 + t350 * t701;
t253 = pkin(3) * t291 + pkin(4) * t332 - qJ(3) * t292;
t252 = -pkin(1) * t388 + qJ(2) * t359 + t286 * t614 + t299 * t612;
t251 = -t273 * t619 + t274 * t622;
t250 = t273 * t622 + t274 * t619;
t249 = pkin(7) * t335 + t618 * t269 + t350 * t651;
t248 = -qJ(2) * t354 - t267 * t612 + t316 * t614;
t247 = pkin(3) * t301 + pkin(4) * t342 + pkin(5) * t432 + pkin(8) * t402 - qJ(3) * t302 + t696;
t246 = pkin(3) * t297 + pkin(4) * t339 + pkin(5) * t428 + pkin(8) * t390 - qJ(3) * t298 - t695;
t245 = -pkin(1) * t393 + qJ(2) * t355 + t267 * t614 + t316 * t612;
t244 = -t270 * t611 + t271 * t613;
t243 = t270 * t613 + t271 * t611;
t242 = pkin(3) * t469 + pkin(7) * t698 - t292 * t700 - t613 * t321;
t241 = -pkin(7) * t270 + (-pkin(8) * t621 + t701) * t277;
t240 = pkin(3) * t293 + pkin(4) * t334 + pkin(5) * t458 + pkin(8) * t352 - qJ(3) * t294 + t278;
t239 = t243 * t612 + t277 * t614;
t238 = -t243 * t614 + t277 * t612;
t237 = pkin(7) * t271 + (-pkin(8) * t618 + t651) * t277;
t236 = pkin(3) * t401 - t613 * t264 - t611 * t268 - t302 * t700;
t235 = pkin(3) * t389 - t613 * t263 - t611 * t266 - t298 * t700;
t234 = -qJ(2) * t282 - t242 * t612 + t253 * t614;
t233 = pkin(3) * t350 - t613 * t249 - t611 * t254 - t294 * t700;
t232 = -pkin(1) * t292 + qJ(2) * t283 + t242 * t614 + t253 * t612;
t231 = -t238 * t619 + t239 * t622;
t230 = t238 * t622 + t239 * t619;
t229 = pkin(3) * t243 + pkin(4) * t270 - pkin(5) * t356 + pkin(8) * t278 - qJ(3) * t244;
t228 = -qJ(2) * t284 - t236 * t612 + t247 * t614;
t227 = -qJ(2) * t280 - t235 * t612 + t246 * t614;
t226 = -pkin(1) * t302 + qJ(2) * t285 + t236 * t614 + t247 * t612;
t225 = -pkin(1) * t298 + qJ(2) * t281 + t235 * t614 + t246 * t612;
t224 = -qJ(2) * t273 - t233 * t612 + t240 * t614;
t223 = -pkin(1) * t294 + qJ(2) * t274 + t233 * t614 + t240 * t612;
t222 = pkin(3) * t277 - t613 * t237 - t611 * t241 - t244 * t700;
t221 = -qJ(2) * t238 - t222 * t612 + t229 * t614;
t220 = -pkin(1) * t244 + qJ(2) * t239 + t222 * t614 + t229 * t612;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t585, -t586, 0, t540, 0, 0, 0, 0, 0, 0, -t643, t641, 0, t404, 0, 0, 0, 0, 0, 0, 0, t643, -t641, t365, 0, 0, 0, 0, 0, 0, -t719, t482, t468, t324, 0, 0, 0, 0, 0, 0, t315, t331, t313, t259, 0, 0, 0, 0, 0, 0, t256, t261, t251, t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t586, -t585, 0, t539, 0, 0, 0, 0, 0, 0, -t641, -t643, 0, -t725, 0, 0, 0, 0, 0, 0, 0, t641, t643, t364, 0, 0, 0, 0, 0, 0, t479, t480, t467, t323, 0, 0, 0, 0, 0, 0, t314, t330, t312, t258, 0, 0, 0, 0, 0, 0, t255, t260, t250, t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t608, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t608, 0, 0, 0, 0, 0, 0, 0, 0, 0, t419, 0, 0, 0, 0, 0, 0, t388, t417, t393, t292, 0, 0, 0, 0, 0, 0, t298, t302, t294, t244; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t586, 0, -t585, 0, t637, -t560, -t539, -pkin(6) * t539, 0, 0, -t641, 0, -t643, 0, t704, -t729, t725, pkin(6) * t725 + qJ(2) * t691 - t446 * t619, 0, t641, t643, 0, 0, 0, -t364, -t704, t729, -pkin(6) * t364 - t426 * t619 + t433 * t622, -t635, -t520 * t619 + t522 * t622, t482, t635, t719, 0, -pkin(6) * t479 - t379 * t619 + t381 * t622, -pkin(6) * t480 - t378 * t619 + t380 * t622, -pkin(6) * t467 - t362 * t619 + t363 * t622, -pkin(6) * t323 - t272 * t619 + t279 * t622, -t384 * t619 + t386 * t622, -t360 * t619 + t361 * t622, -t398 * t619 + t400 * t622, -t383 * t619 + t385 * t622, -t397 * t619 + t399 * t622, -t434 * t619 + t435 * t622, -pkin(6) * t314 - t252 * t619 + t257 * t622, -pkin(6) * t330 - t262 * t619 + t265 * t622, -pkin(6) * t312 - t245 * t619 + t248 * t622, -pkin(6) * t258 - t232 * t619 + t234 * t622, -t307 * t619 + t309 * t622, -t275 * t619 + t276 * t622, -t287 * t619 + t289 * t622, -t306 * t619 + t308 * t622, -t288 * t619 + t290 * t622, -t325 * t619 + t326 * t622, -pkin(6) * t255 - t225 * t619 + t227 * t622, -pkin(6) * t260 - t226 * t619 + t228 * t622, -pkin(6) * t250 - t223 * t619 + t224 * t622, -pkin(6) * t230 - t220 * t619 + t221 * t622; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t585, 0, t586, 0, t560, t637, t540, pkin(6) * t540, 0, 0, t643, 0, -t641, 0, t729, t704, t404, pkin(6) * t404 + qJ(2) * t692 + t446 * t622, 0, -t643, t641, 0, 0, 0, t365, -t729, -t704, pkin(6) * t365 + t426 * t622 + t433 * t619, t636, t520 * t622 + t522 * t619, t480, -t636, -t479, 0, -pkin(6) * t719 + t379 * t622 + t381 * t619, pkin(6) * t482 + t378 * t622 + t380 * t619, pkin(6) * t468 + t362 * t622 + t363 * t619, pkin(6) * t324 + t272 * t622 + t279 * t619, t384 * t622 + t386 * t619, t360 * t622 + t361 * t619, t398 * t622 + t400 * t619, t383 * t622 + t385 * t619, t397 * t622 + t399 * t619, t434 * t622 + t435 * t619, pkin(6) * t315 + t252 * t622 + t257 * t619, pkin(6) * t331 + t262 * t622 + t265 * t619, pkin(6) * t313 + t245 * t622 + t248 * t619, pkin(6) * t259 + t232 * t622 + t234 * t619, t307 * t622 + t309 * t619, t275 * t622 + t276 * t619, t287 * t622 + t289 * t619, t306 * t622 + t308 * t619, t288 * t622 + t290 * t619, t325 * t622 + t326 * t619, pkin(6) * t256 + t225 * t622 + t227 * t619, pkin(6) * t261 + t226 * t622 + t228 * t619, pkin(6) * t251 + t223 * t622 + t224 * t619, pkin(6) * t231 + t220 * t622 + t221 * t619; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t587, t588, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t633, -t519 - t703, 0, -pkin(1) * t462, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) - 0.2e1 * t610 - t633, t630 + 0.2e1 * t661 + t703, pkin(1) * t440 - pkin(2) * t503 + qJ(3) * t500, t605 * qJDD(1), -0.2e1 * t649, 0, t604 * qJDD(1), 0, 0, pkin(1) * t533 + t574 * t700 + t611 * t639, pkin(1) * t535 + t573 * t700 + t613 * t639, pkin(1) * t521 - qJ(3) * t712 + t578 * t700 - t418, pkin(1) * t366 + qJ(3) * t494 - t418 * t700, -t485 * t611 + t486 * t613, -t455 * t611 + t457 * t613, -t471 * t611 + t474 * t613, -t483 * t611 + t484 * t613, -t470 * t611 + t473 * t613, -t501 * t611 + t502 * t613, pkin(1) * t358 + qJ(3) * t512 - t368 * t611 - t387 * t700 + t405 * t613, pkin(1) * t376 + qJ(3) * t514 - t382 * t611 + t413 * t613 - t416 * t700, pkin(1) * t354 + qJ(3) * t491 - t311 * t611 + t318 * t613 - t391 * t700, pkin(1) * t282 - pkin(7) * t697 + qJ(3) * t469 - t291 * t700 - t321 * t611, -t372 * t611 + t374 * t613, -t337 * t611 + t338 * t613, -t345 * t611 + t347 * t613, -t371 * t611 + t373 * t613, -t346 * t611 + t348 * t613, -t411 * t611 + t412 * t613, pkin(1) * t280 + qJ(3) * t389 - t263 * t611 + t266 * t613 - t297 * t700, pkin(1) * t284 + qJ(3) * t401 - t264 * t611 + t268 * t613 - t301 * t700, pkin(1) * t273 + qJ(3) * t350 - t249 * t611 + t254 * t613 - t293 * t700, pkin(1) * t238 + qJ(3) * t277 - t237 * t611 + t241 * t613 - t243 * t700;];
tauB_reg  = t1;
