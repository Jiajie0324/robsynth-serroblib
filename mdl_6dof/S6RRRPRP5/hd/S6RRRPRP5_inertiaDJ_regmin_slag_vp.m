% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:52
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP5_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP5_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP5_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP5_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:51:33
% EndTime: 2019-03-09 16:51:40
% DurationCPUTime: 2.35s
% Computational Cost: add. (5199->291), mult. (12509->502), div. (0->0), fcn. (11316->8), ass. (0->146)
t116 = sin(qJ(3));
t118 = cos(qJ(3));
t189 = sin(pkin(10));
t190 = cos(pkin(10));
t137 = t189 * t116 - t190 * t118;
t117 = sin(qJ(2));
t179 = qJD(3) * t118;
t119 = cos(qJ(2));
t182 = qJD(2) * t119;
t198 = t116 * t182 + t117 * t179;
t186 = t118 * t119;
t103 = pkin(7) * t186;
t151 = -pkin(2) * t119 - pkin(8) * t117;
t93 = -pkin(1) + t151;
t191 = t116 * t93 + t103;
t138 = t190 * t116 + t189 * t118;
t197 = cos(qJ(5));
t130 = t197 * t138;
t115 = sin(qJ(5));
t55 = t115 * t138 + t197 * t137;
t113 = t118 ^ 2;
t185 = t116 ^ 2 - t113;
t155 = t185 * qJD(3);
t109 = qJD(2) * t117;
t156 = qJD(3) * t189;
t157 = qJD(3) * t190;
t187 = t117 * t118;
t188 = t116 * t117;
t135 = t137 * t182 + t156 * t187 + t157 * t188;
t177 = qJD(4) * t118;
t170 = t116 * t109;
t150 = pkin(2) * t117 - pkin(8) * t119;
t87 = t150 * qJD(2);
t193 = pkin(7) * t170 + t118 * t87;
t31 = -t117 * t177 + (pkin(3) * t117 - qJ(4) * t186) * qJD(2) + (-t103 + (qJ(4) * t117 - t93) * t116) * qJD(3) + t193;
t194 = -t116 * t87 - t93 * t179;
t35 = (-pkin(7) * qJD(2) - qJ(4) * qJD(3)) * t187 + (-qJD(4) * t117 + (-pkin(7) * qJD(3) - qJ(4) * qJD(2)) * t119) * t116 - t194;
t16 = -t189 * t35 + t190 * t31;
t11 = pkin(4) * t109 + t135 * pkin(9) + t16;
t180 = qJD(3) * t117;
t125 = t137 * t180 - t138 * t182;
t17 = t189 * t31 + t190 * t35;
t13 = t125 * pkin(9) + t17;
t196 = pkin(7) * t116;
t84 = t118 * t93;
t57 = -qJ(4) * t187 + t84 + (-pkin(3) - t196) * t119;
t60 = -qJ(4) * t188 + t191;
t36 = -t189 * t60 + t190 * t57;
t76 = t137 * t117;
t23 = -t119 * pkin(4) + t76 * pkin(9) + t36;
t133 = t117 * t138;
t37 = t189 * t57 + t190 * t60;
t28 = -pkin(9) * t133 + t37;
t144 = t115 * t23 + t197 * t28;
t4 = -t144 * qJD(5) + t197 * t11 - t115 * t13;
t120 = 2 * qJD(6);
t195 = -qJ(4) - pkin(8);
t62 = t137 * t195;
t104 = t190 * pkin(3) + pkin(4);
t171 = pkin(3) * t189;
t192 = t115 * t104 + t197 * t171;
t88 = pkin(3) * t188 + t117 * pkin(7);
t112 = t117 ^ 2;
t184 = -t119 ^ 2 + t112;
t183 = qJD(2) * t118;
t181 = qJD(3) * t116;
t178 = qJD(3) * t119;
t176 = qJD(5) * t115;
t175 = qJD(6) * t119;
t174 = -0.2e1 * pkin(1) * qJD(2);
t173 = -0.2e1 * pkin(2) * qJD(3);
t107 = pkin(7) * t182;
t65 = t198 * pkin(3) + t107;
t172 = pkin(5) * t109;
t108 = pkin(3) * t181;
t106 = -t118 * pkin(3) - pkin(2);
t168 = t118 * t182;
t167 = t116 * t178;
t165 = t118 * t178;
t164 = t116 * t179;
t163 = t117 * t182;
t162 = qJD(5) * t197;
t160 = qJD(3) * t195;
t154 = t184 * qJD(2);
t153 = t115 * t171;
t152 = t118 * t163;
t149 = t190 * t195;
t148 = t189 * t195;
t126 = (-t189 * pkin(9) + t148) * t118 + (-t190 * pkin(9) + t149) * t116;
t123 = t197 * t126;
t52 = -t137 * pkin(9) + t62;
t26 = t115 * t52 - t123;
t132 = qJD(3) * t138;
t139 = t116 * t160 + t177;
t140 = -qJD(4) * t116 + t118 * t160;
t51 = t190 * t139 + t189 * t140;
t121 = -pkin(9) * t132 + t51;
t100 = t116 * t156;
t143 = t118 * t157 - t100;
t50 = -t189 * t139 + t190 * t140;
t122 = t143 * pkin(9) - t50;
t124 = t115 * t126;
t7 = qJD(5) * t124 + t115 * t121 + t197 * t122 + t52 * t162;
t147 = -t26 * t109 + t119 * t7;
t27 = t197 * t52 + t124;
t6 = -qJD(5) * t123 + t115 * t122 - t197 * t121 + t52 * t176;
t146 = t27 * t109 + t119 * t6;
t145 = -t115 * t28 + t197 * t23;
t3 = -t115 * t11 - t197 * t13 - t23 * t162 + t28 * t176;
t70 = qJD(5) * t153 - t104 * t162;
t105 = qJ(6) * t109;
t142 = t105 - t3;
t141 = t117 * t183 + t167;
t136 = t197 * t104 - t153;
t131 = t115 * t133;
t128 = t117 * t130;
t63 = pkin(4) * t132 + t108;
t69 = t137 * pkin(4) + t106;
t58 = pkin(4) * t133 + t88;
t71 = t192 * qJD(5);
t127 = t71 * t119 + t4;
t56 = -t115 * t137 + t130;
t38 = -t125 * pkin(4) + t65;
t99 = -0.2e1 * t163;
t77 = -pkin(5) - t136;
t75 = qJ(6) + t192;
t68 = qJD(6) - t70;
t66 = 0.2e1 * t71;
t61 = t116 * t149 + t118 * t148;
t49 = -t197 * t76 - t131;
t48 = -t115 * t76 + t128;
t43 = -t191 * qJD(3) + t193;
t42 = t141 * pkin(7) + t194;
t33 = qJD(3) * t130 + t56 * qJD(5) + t115 * t143;
t32 = t55 * qJD(5) + t115 * t132 - t197 * t143;
t24 = t55 * pkin(5) - t56 * qJ(6) + t69;
t20 = t48 * pkin(5) - t49 * qJ(6) + t58;
t19 = -qJD(5) * t131 - t115 * t135 - t197 * t125 - t76 * t162;
t18 = qJD(5) * t128 - t115 * t125 + t197 * t135 - t76 * t176;
t15 = t119 * pkin(5) - t145;
t14 = -qJ(6) * t119 + t144;
t8 = t33 * pkin(5) + t32 * qJ(6) - t56 * qJD(6) + t63;
t5 = t19 * pkin(5) + t18 * qJ(6) - t49 * qJD(6) + t38;
t2 = -t172 - t4;
t1 = t142 - t175;
t9 = [0, 0, 0, 0.2e1 * t163, -0.2e1 * t154, 0, 0, 0, t117 * t174, t119 * t174, -0.2e1 * t112 * t164 + 0.2e1 * t113 * t163, 0.2e1 * t112 * t155 - 0.4e1 * t116 * t152, 0.2e1 * t117 * t167 + 0.2e1 * t184 * t183, -0.2e1 * t116 * t154 + 0.2e1 * t117 * t165, t99, 0.2e1 * t84 * t109 - 0.2e1 * t43 * t119 + 0.2e1 * (t112 * t179 + t116 * t163) * pkin(7), -0.2e1 * t42 * t119 - 0.2e1 * t191 * t109 + 0.2e1 * (-t112 * t181 + 0.2e1 * t152) * pkin(7), 0.2e1 * t125 * t37 - 0.2e1 * t133 * t17 + 0.2e1 * t135 * t36 + 0.2e1 * t16 * t76, 0.2e1 * t16 * t36 + 0.2e1 * t17 * t37 + 0.2e1 * t65 * t88, -0.2e1 * t49 * t18, 0.2e1 * t18 * t48 - 0.2e1 * t19 * t49, 0.2e1 * t49 * t109 + 0.2e1 * t119 * t18, -0.2e1 * t48 * t109 + 0.2e1 * t119 * t19, t99, 0.2e1 * t145 * t109 - 0.2e1 * t4 * t119 + 0.2e1 * t58 * t19 + 0.2e1 * t38 * t48, -0.2e1 * t144 * t109 - 0.2e1 * t3 * t119 - 0.2e1 * t58 * t18 + 0.2e1 * t38 * t49, -0.2e1 * t15 * t109 + 0.2e1 * t119 * t2 + 0.2e1 * t19 * t20 + 0.2e1 * t48 * t5, -0.2e1 * t1 * t48 - 0.2e1 * t14 * t19 - 0.2e1 * t15 * t18 + 0.2e1 * t2 * t49, -0.2e1 * t1 * t119 + 0.2e1 * t14 * t109 + 0.2e1 * t18 * t20 - 0.2e1 * t49 * t5, 0.2e1 * t1 * t14 + 0.2e1 * t15 * t2 + 0.2e1 * t20 * t5; 0, 0, 0, 0, 0, t182, -t109, 0, -t107, pkin(7) * t109, t116 * t168 - t117 * t155, -0.4e1 * t117 * t164 - t185 * t182, -t165 + t170, t141, 0 (pkin(8) * t186 + (-pkin(2) * t118 + t196) * t117) * qJD(3) + (t151 * t116 - t103) * qJD(2) (pkin(7) * t187 + t150 * t116) * qJD(3) + (t151 * t118 + t119 * t196) * qJD(2), t125 * t62 - t132 * t37 - t133 * t51 + t135 * t61 - t137 * t17 - t138 * t16 - t143 * t36 + t50 * t76, t106 * t65 + t88 * t108 + t16 * t61 + t17 * t62 + t36 * t50 + t37 * t51, -t18 * t56 - t32 * t49, t18 * t55 - t19 * t56 + t32 * t48 - t33 * t49, t56 * t109 + t119 * t32, -t55 * t109 + t119 * t33, 0, t19 * t69 + t33 * t58 + t38 * t55 + t48 * t63 + t147, -t18 * t69 - t32 * t58 + t38 * t56 + t49 * t63 - t146, t19 * t24 + t20 * t33 + t48 * t8 + t5 * t55 + t147, -t1 * t55 - t14 * t33 - t15 * t32 - t18 * t26 - t19 * t27 + t2 * t56 + t48 * t6 + t49 * t7, t18 * t24 + t20 * t32 - t49 * t8 - t5 * t56 + t146, t1 * t27 - t14 * t6 + t15 * t7 + t2 * t26 + t20 * t8 + t24 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t164, -0.2e1 * t155, 0, 0, 0, t116 * t173, t118 * t173, -0.2e1 * t132 * t62 - 0.2e1 * t137 * t51 - 0.2e1 * t138 * t50 - 0.2e1 * t143 * t61, 0.2e1 * t106 * t108 + 0.2e1 * t50 * t61 + 0.2e1 * t51 * t62, -0.2e1 * t56 * t32, 0.2e1 * t32 * t55 - 0.2e1 * t33 * t56, 0, 0, 0, 0.2e1 * t33 * t69 + 0.2e1 * t55 * t63, -0.2e1 * t32 * t69 + 0.2e1 * t56 * t63, 0.2e1 * t24 * t33 + 0.2e1 * t55 * t8, -0.2e1 * t26 * t32 - 0.2e1 * t27 * t33 + 0.2e1 * t55 * t6 + 0.2e1 * t56 * t7, 0.2e1 * t24 * t32 - 0.2e1 * t56 * t8, 0.2e1 * t24 * t8 + 0.2e1 * t26 * t7 - 0.2e1 * t27 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t116 * t180 + t168, -t198, t109, t43, t42 (t189 * t125 + t190 * t135) * pkin(3) (t190 * t16 + t189 * t17) * pkin(3), 0, 0, -t18, -t19, t109, t136 * t109 + t127, -t192 * t109 - t70 * t119 + t3 (pkin(5) - t77) * t109 + t127, -t18 * t77 - t19 * t75 - t48 * t68 + t49 * t71, t75 * t109 + (-qJD(6) - t68) * t119 + t142, t1 * t75 + t14 * t68 + t15 * t71 + t2 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t179, -t181, 0, -pkin(8) * t179, pkin(8) * t181 (t190 * t100 + (-t190 ^ 2 * t118 - t189 * t138) * qJD(3)) * pkin(3) (t189 * t51 + t190 * t50) * pkin(3), 0, 0, -t32, -t33, 0, -t7, t6, -t7, -t32 * t77 - t33 * t75 - t55 * t68 + t56 * t71, -t6, t26 * t71 + t27 * t68 - t6 * t75 + t7 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, 0.2e1 * t70, -t66, 0, 0.2e1 * t68, 0.2e1 * t68 * t75 + 0.2e1 * t71 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, 0, 0, 0, 0, t19, -t18, t19, 0, t18, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, 0, 0, 0, 0, t33, -t32, t33, 0, t32, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t19, t109, t4, t3, t4 + 0.2e1 * t172, pkin(5) * t18 - qJ(6) * t19 - qJD(6) * t48, 0.2e1 * t105 - t3 - 0.2e1 * t175, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t33, 0, -t7, t6, -t7, pkin(5) * t32 - qJ(6) * t33 - qJD(6) * t55, -t6, -pkin(5) * t7 - qJ(6) * t6 + qJD(6) * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t70, -t71, 0, t120 - t70, -pkin(5) * t71 + qJ(6) * t68 + qJD(6) * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, qJ(6) * t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t18, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t9;
