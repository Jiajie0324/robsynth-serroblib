% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR4_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR4_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR4_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR4_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:51:25
% EndTime: 2019-03-10 03:51:39
% DurationCPUTime: 4.20s
% Computational Cost: add. (8799->340), mult. (21308->576), div. (0->0), fcn. (20260->10), ass. (0->196)
t157 = sin(qJ(2));
t156 = sin(qJ(3));
t162 = cos(qJ(2));
t217 = t162 * qJD(2);
t201 = t156 * t217;
t161 = cos(qJ(3));
t225 = qJD(3) * t161;
t257 = t157 * t225 + t201;
t256 = -0.4e1 * t157;
t159 = cos(qJ(5));
t220 = qJD(5) * t159;
t207 = pkin(4) * t220;
t160 = cos(qJ(4));
t250 = pkin(3) * t160;
t204 = pkin(4) + t250;
t132 = t159 * t204;
t222 = qJD(4) * t160;
t209 = pkin(3) * t222;
t154 = sin(qJ(5));
t155 = sin(qJ(4));
t214 = pkin(3) * t154 * t155;
t252 = qJD(4) + qJD(5);
t85 = -qJD(5) * t132 - t159 * t209 + t214 * t252;
t255 = t85 - t207;
t118 = t155 * t161 + t156 * t160;
t103 = t118 * t157;
t251 = pkin(8) + pkin(9);
t130 = t251 * t156;
t131 = t251 * t161;
t231 = -t130 * t155 + t131 * t160;
t175 = -pkin(2) * t162 - pkin(8) * t157;
t127 = -pkin(1) + t175;
t235 = t161 * t162;
t141 = pkin(7) * t235;
t229 = t127 * t156 + t141;
t200 = t161 * t217;
t226 = qJD(3) * t156;
t254 = -t157 * t226 + t200;
t150 = t157 ^ 2;
t179 = (-t162 ^ 2 + t150) * qJD(2);
t151 = t161 ^ 2;
t228 = t156 ^ 2 - t151;
t180 = t228 * qJD(3);
t253 = qJD(3) + qJD(4);
t174 = pkin(2) * t157 - pkin(8) * t162;
t124 = t174 * qJD(2);
t147 = t157 * qJD(2);
t224 = qJD(3) * t162;
t198 = t156 * t224;
t167 = t147 * t161 + t198;
t69 = pkin(7) * t167 - t124 * t156 - t127 * t225;
t249 = pkin(4) * t162;
t248 = pkin(5) * t162;
t247 = pkin(7) * t156;
t246 = t154 * pkin(4);
t176 = t132 - t214;
t105 = pkin(5) + t176;
t245 = -pkin(5) - t105;
t117 = t155 * t156 - t160 * t161;
t104 = t117 * t157;
t116 = t161 * t127;
t236 = t157 * t161;
t93 = -pkin(9) * t236 + t116 + (-pkin(3) - t247) * t162;
t237 = t156 * t157;
t98 = -pkin(9) * t237 + t229;
t185 = -t155 * t98 + t160 * t93;
t51 = pkin(10) * t104 + t185 - t249;
t95 = t160 * t98;
t242 = t155 * t93 + t95;
t53 = -pkin(10) * t103 + t242;
t52 = t159 * t53;
t244 = t154 * t51 + t52;
t181 = -t130 * t160 - t131 * t155;
t78 = -pkin(10) * t118 + t181;
t79 = -pkin(10) * t117 + t231;
t243 = t154 * t78 + t159 * t79;
t158 = cos(qJ(6));
t73 = t103 * t159 - t104 * t154;
t26 = -pkin(11) * t73 + t244;
t241 = t158 * t26;
t238 = t155 * t159;
t106 = pkin(3) * t238 + t154 * t204;
t240 = t106 * t158;
t239 = t154 * t158;
t143 = pkin(4) * t159 + pkin(5);
t234 = -t105 - t143;
t195 = t156 * t147;
t232 = pkin(7) * t195 + t124 * t161;
t153 = sin(qJ(6));
t221 = qJD(5) * t154;
t208 = pkin(4) * t221;
t213 = t153 * t246;
t230 = qJD(6) * t213 + t153 * t208;
t125 = pkin(3) * t237 + pkin(7) * t157;
t223 = qJD(4) * t155;
t219 = qJD(6) * t153;
t218 = qJD(6) * t158;
t216 = -0.2e1 * pkin(1) * qJD(2);
t215 = -0.2e1 * pkin(2) * qJD(3);
t212 = pkin(4) * t147;
t211 = pkin(5) * t147;
t146 = pkin(3) * t226;
t210 = pkin(3) * t223;
t206 = pkin(5) * t219;
t205 = pkin(5) * t218;
t145 = pkin(7) * t217;
t99 = pkin(3) * t257 + t145;
t144 = -pkin(3) * t161 - pkin(2);
t64 = -t103 * t253 - t117 * t217;
t65 = -t223 * t237 + (t236 * t253 + t201) * t160 + t254 * t155;
t30 = -qJD(5) * t73 - t154 * t65 + t159 * t64;
t60 = (pkin(3) * t157 - pkin(9) * t235) * qJD(2) + (-t141 + (pkin(9) * t157 - t127) * t156) * qJD(3) + t232;
t63 = -pkin(9) * t257 - t69;
t186 = -t155 * t63 + t160 * t60;
t28 = -qJD(4) * t242 + t186;
t20 = -pkin(10) * t64 + t212 + t28;
t27 = -t155 * t60 - t160 * t63 - t222 * t93 + t223 * t98;
t22 = -pkin(10) * t65 - t27;
t189 = -t154 * t22 + t159 * t20;
t9 = -qJD(5) * t244 + t189;
t6 = -pkin(11) * t30 + t211 + t9;
t74 = -t103 * t154 - t104 * t159;
t31 = qJD(5) * t74 + t154 * t64 + t159 * t65;
t8 = -t154 * t20 - t159 * t22 - t220 * t51 + t221 * t53;
t7 = -pkin(11) * t31 - t8;
t203 = -t153 * t7 + t158 * t6;
t202 = qJD(3) * t251;
t196 = t161 * t224;
t194 = t156 * t225;
t193 = t157 * t217;
t97 = t253 * t118;
t81 = pkin(4) * t97 + t146;
t188 = -t154 * t53 + t159 * t51;
t25 = -pkin(11) * t74 + t188 - t248;
t192 = -t25 + t248;
t24 = t26 * t219;
t191 = -t153 * t6 + t24;
t163 = t252 * (-t154 * t160 - t238) * pkin(3);
t86 = t163 - t208;
t190 = t153 * t85 + t158 * t86;
t187 = -t154 * t79 + t159 * t78;
t184 = (-pkin(5) - t143) * qJD(6);
t183 = -0.2e1 * t208;
t182 = t106 * t219 - t153 * t86;
t178 = 0.2e1 * t193;
t177 = t156 * t200;
t94 = pkin(4) * t103 + t125;
t173 = t153 * t25 + t241;
t92 = -t117 * t154 + t118 * t159;
t35 = -pkin(11) * t92 + t187;
t91 = t117 * t159 + t118 * t154;
t36 = -pkin(11) * t91 + t243;
t172 = t153 * t36 - t158 * t35;
t171 = t153 * t35 + t158 * t36;
t46 = t153 * t74 + t158 * t73;
t47 = -t153 * t73 + t158 * t74;
t56 = t153 * t92 + t158 * t91;
t57 = -t153 * t91 + t158 * t92;
t170 = t105 * t153 + t240;
t54 = pkin(4) * t65 + t99;
t102 = pkin(4) * t117 + t144;
t122 = t156 * t202;
t123 = t161 * t202;
t66 = t122 * t160 + t123 * t155 + t130 * t222 + t131 * t223;
t49 = -pkin(10) * t97 - t66;
t67 = -qJD(4) * t231 + t155 * t122 - t123 * t160;
t96 = t253 * t117;
t50 = pkin(10) * t96 + t67;
t18 = -t154 * t50 - t159 * t49 - t220 * t78 + t221 * t79;
t168 = (-t153 * t159 - t239) * qJD(5);
t165 = -t158 * t7 - t218 * t25 + t191;
t2 = -qJD(6) * t173 + t203;
t19 = -qJD(5) * t243 - t154 * t49 + t159 * t50;
t164 = (-t154 * t218 + t168) * pkin(4);
t139 = -0.2e1 * t193;
t84 = -t143 * t219 + t164;
t83 = (-qJD(6) * t143 - t207) * t158 + t230;
t70 = -qJD(3) * t229 + t232;
t68 = pkin(5) * t91 + t102;
t55 = pkin(5) * t73 + t94;
t39 = qJD(5) * t92 - t154 * t96 + t159 * t97;
t38 = -qJD(5) * t91 - t154 * t97 - t159 * t96;
t34 = -qJD(6) * t170 + t190;
t33 = (-qJD(6) * t105 + t85) * t158 + t182;
t32 = pkin(5) * t39 + t81;
t23 = pkin(5) * t31 + t54;
t15 = qJD(6) * t57 + t153 * t38 + t158 * t39;
t14 = -qJD(6) * t56 - t153 * t39 + t158 * t38;
t13 = -pkin(11) * t38 + t19;
t12 = -pkin(11) * t39 - t18;
t11 = qJD(6) * t47 + t153 * t30 + t158 * t31;
t10 = -qJD(6) * t46 - t153 * t31 + t158 * t30;
t4 = -qJD(6) * t171 - t153 * t12 + t158 * t13;
t3 = qJD(6) * t172 - t158 * t12 - t153 * t13;
t1 = (-qJD(6) * t25 - t7) * t158 + t191;
t5 = [0, 0, 0, t178, -0.2e1 * t179, 0, 0, 0, t157 * t216, t162 * t216, -0.2e1 * t150 * t194 + 0.2e1 * t151 * t193, 0.2e1 * t150 * t180 + t177 * t256, 0.2e1 * t157 * t198 + 0.2e1 * t161 * t179, -0.2e1 * t156 * t179 + 0.2e1 * t157 * t196, t139, 0.2e1 * t116 * t147 - 0.2e1 * t70 * t162 + 0.2e1 * (t150 * t225 + t156 * t193) * pkin(7), -0.2e1 * t69 * t162 - 0.2e1 * t229 * t147 + 0.2e1 * (-t150 * t226 + t161 * t178) * pkin(7), -0.2e1 * t104 * t64, -0.2e1 * t103 * t64 + 0.2e1 * t104 * t65, -0.2e1 * t104 * t147 - 0.2e1 * t162 * t64, -0.2e1 * t103 * t147 + 0.2e1 * t162 * t65, t139, 0.2e1 * t103 * t99 + 0.2e1 * t125 * t65 + 0.2e1 * t147 * t185 - 0.2e1 * t162 * t28, -0.2e1 * t104 * t99 + 0.2e1 * t125 * t64 - 0.2e1 * t147 * t242 - 0.2e1 * t162 * t27, 0.2e1 * t74 * t30, -0.2e1 * t30 * t73 - 0.2e1 * t31 * t74, 0.2e1 * t147 * t74 - 0.2e1 * t162 * t30, -0.2e1 * t147 * t73 + 0.2e1 * t162 * t31, t139, 0.2e1 * t147 * t188 - 0.2e1 * t162 * t9 + 0.2e1 * t31 * t94 + 0.2e1 * t54 * t73, -0.2e1 * t147 * t244 - 0.2e1 * t162 * t8 + 0.2e1 * t30 * t94 + 0.2e1 * t54 * t74, 0.2e1 * t47 * t10, -0.2e1 * t10 * t46 - 0.2e1 * t11 * t47, -0.2e1 * t10 * t162 + 0.2e1 * t147 * t47, 0.2e1 * t11 * t162 - 0.2e1 * t147 * t46, t139, -0.2e1 * t2 * t162 + 0.2e1 * (-t153 * t26 + t158 * t25) * t147 + 0.2e1 * t23 * t46 + 0.2e1 * t55 * t11, -0.2e1 * t1 * t162 + 0.2e1 * t10 * t55 - 0.2e1 * t147 * t173 + 0.2e1 * t23 * t47; 0, 0, 0, 0, 0, t217, -t147, 0, -t145, pkin(7) * t147, -t157 * t180 + t177, t194 * t256 - t217 * t228, t195 - t196, t167, 0 (pkin(8) * t235 + (-pkin(2) * t161 + t247) * t157) * qJD(3) + (t156 * t175 - t141) * qJD(2) (pkin(7) * t236 + t156 * t174) * qJD(3) + (t161 * t175 + t162 * t247) * qJD(2), t104 * t96 + t118 * t64, t103 * t96 + t104 * t97 - t117 * t64 - t118 * t65, t118 * t147 + t162 * t96, -t117 * t147 + t162 * t97, 0, t103 * t146 + t117 * t99 + t125 * t97 + t144 * t65 + t147 * t181 - t162 * t67, -t104 * t146 + t118 * t99 - t125 * t96 + t144 * t64 - t147 * t231 - t162 * t66, t30 * t92 + t38 * t74, -t30 * t91 - t31 * t92 - t38 * t73 - t39 * t74, t147 * t92 - t162 * t38, -t147 * t91 + t162 * t39, 0, t102 * t31 + t147 * t187 - t162 * t19 + t39 * t94 + t54 * t91 + t73 * t81, t102 * t30 - t147 * t243 - t162 * t18 + t38 * t94 + t54 * t92 + t74 * t81, t10 * t57 + t14 * t47, -t10 * t56 - t11 * t57 - t14 * t46 - t15 * t47, -t14 * t162 + t147 * t57, -t147 * t56 + t15 * t162, 0, t11 * t68 - t147 * t172 + t15 * t55 - t162 * t4 + t23 * t56 + t32 * t46, t10 * t68 + t14 * t55 - t147 * t171 - t162 * t3 + t23 * t57 + t32 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t194, -0.2e1 * t180, 0, 0, 0, t156 * t215, t161 * t215, -0.2e1 * t118 * t96, 0.2e1 * t117 * t96 - 0.2e1 * t118 * t97, 0, 0, 0, 0.2e1 * t117 * t146 + 0.2e1 * t144 * t97, 0.2e1 * t118 * t146 - 0.2e1 * t144 * t96, 0.2e1 * t92 * t38, -0.2e1 * t38 * t91 - 0.2e1 * t39 * t92, 0, 0, 0, 0.2e1 * t102 * t39 + 0.2e1 * t81 * t91, 0.2e1 * t102 * t38 + 0.2e1 * t81 * t92, 0.2e1 * t57 * t14, -0.2e1 * t14 * t56 - 0.2e1 * t15 * t57, 0, 0, 0, 0.2e1 * t15 * t68 + 0.2e1 * t32 * t56, 0.2e1 * t14 * t68 + 0.2e1 * t32 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, -t257, t147, t70, t69, 0, 0, t64, -t65, t147, t147 * t250 + (-t95 + (pkin(3) * t162 - t93) * t155) * qJD(4) + t186 (-t147 * t155 + t162 * t222) * pkin(3) + t27, 0, 0, t30, -t31, t147, t147 * t176 - t86 * t162 + t9, -t106 * t147 - t162 * t85 + t8, 0, 0, t10, -t11, t147, -t34 * t162 + (t105 * t158 - t106 * t153) * t147 + t2, -t147 * t170 - t33 * t162 + t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t225, -t226, 0, -pkin(8) * t225, pkin(8) * t226, 0, 0, -t96, -t97, 0, t67, t66, 0, 0, t38, -t39, 0, t19, t18, 0, 0, t14, -t15, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t210, -0.2e1 * t209, 0, 0, 0, 0, 0, 0.2e1 * t86, 0.2e1 * t85, 0, 0, 0, 0, 0, 0.2e1 * t34, 0.2e1 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t65, t147, t28, t27, 0, 0, t30, -t31, t147, t159 * t212 + (-t52 + (-t51 + t249) * t154) * qJD(5) + t189 (-t147 * t154 + t162 * t220) * pkin(4) + t8, 0, 0, t10, -t11, t147, -t84 * t162 + (t143 * t158 - t213) * t147 + t2, -t83 * t162 - (pkin(4) * t239 + t143 * t153) * t147 + t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t97, 0, t67, t66, 0, 0, t38, -t39, 0, t19, t18, 0, 0, t14, -t15, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t210, -t209, 0, 0, 0, 0, 0, t163 + t183, t255, 0, 0, 0, 0, 0, pkin(4) * t168 + ((-t106 - t246) * t158 + t234 * t153) * qJD(6) + t190 (qJD(6) * t234 + t255) * t158 + t182 + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, -0.2e1 * t207, 0, 0, 0, 0, 0, 0.2e1 * t84, 0.2e1 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t31, t147, t9, t8, 0, 0, t10, -t11, t147, t158 * t211 + (t153 * t192 - t241) * qJD(6) + t203, t24 + (-t6 - t211) * t153 + (qJD(6) * t192 - t7) * t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, -t39, 0, t19, t18, 0, 0, t14, -t15, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t85, 0, 0, 0, 0, 0 (t153 * t245 - t240) * qJD(6) + t190 (qJD(6) * t245 + t85) * t158 + t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, -t207, 0, 0, 0, 0, 0, t153 * t184 + t164 (t184 - t207) * t158 + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t206, -0.2e1 * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, t147, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t15, 0, t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206, -t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
