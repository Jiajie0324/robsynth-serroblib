% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tauc_reg [6x38]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRR4_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR4_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR4_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR4_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:51:26
% EndTime: 2019-03-10 03:51:57
% DurationCPUTime: 13.30s
% Computational Cost: add. (15291->564), mult. (37661->784), div. (0->0), fcn. (28587->10), ass. (0->283)
t286 = sin(qJ(5));
t294 = cos(qJ(2));
t377 = qJD(1) * t294;
t268 = -qJD(3) + t377;
t261 = -qJD(4) + t268;
t288 = sin(qJ(3));
t289 = sin(qJ(2));
t378 = qJD(1) * t289;
t359 = t288 * t378;
t293 = cos(qJ(3));
t365 = t293 * qJD(2);
t236 = t359 - t365;
t376 = qJD(2) * t288;
t238 = t293 * t378 + t376;
t287 = sin(qJ(4));
t292 = cos(qJ(4));
t317 = t236 * t287 - t292 * t238;
t454 = pkin(10) * t317;
t250 = -pkin(2) * t294 - pkin(8) * t289 - pkin(1);
t229 = t250 * qJD(1);
t278 = pkin(7) * t377;
t256 = qJD(2) * pkin(8) + t278;
t191 = t293 * t229 - t256 * t288;
t154 = -pkin(9) * t238 + t191;
t143 = -pkin(3) * t268 + t154;
t401 = t288 * t229;
t192 = t256 * t293 + t401;
t155 = -pkin(9) * t236 + t192;
t148 = t287 * t155;
t82 = t292 * t143 - t148;
t66 = t82 + t454;
t61 = -pkin(4) * t261 + t66;
t291 = cos(qJ(5));
t183 = t292 * t236 + t238 * t287;
t455 = pkin(10) * t183;
t150 = t292 * t155;
t83 = t143 * t287 + t150;
t67 = t83 - t455;
t65 = t291 * t67;
t29 = t286 * t61 + t65;
t125 = t291 * t183 - t286 * t317;
t453 = pkin(11) * t125;
t23 = t29 - t453;
t285 = sin(qJ(6));
t367 = qJD(6) * t285;
t21 = t23 * t367;
t290 = cos(qJ(6));
t321 = t183 * t286 + t291 * t317;
t55 = t290 * t125 - t285 * t321;
t255 = -qJD(2) * pkin(2) + pkin(7) * t378;
t204 = pkin(3) * t236 + t255;
t141 = pkin(4) * t183 + t204;
t74 = pkin(5) * t125 + t141;
t467 = t55 * t74 + t21;
t364 = qJD(1) * qJD(2);
t271 = t289 * t364;
t352 = t294 * t364;
t373 = qJD(3) * t288;
t356 = t289 * t373;
t363 = qJD(2) * qJD(3);
t201 = -qJD(1) * t356 + (t352 + t363) * t293;
t372 = qJD(3) * t293;
t354 = t289 * t372;
t374 = qJD(2) * t294;
t358 = t288 * t374;
t305 = t354 + t358;
t202 = qJD(1) * t305 + t288 * t363;
t370 = qJD(4) * t292;
t371 = qJD(4) * t287;
t107 = t292 * t201 - t287 * t202 - t236 * t370 - t238 * t371;
t325 = pkin(2) * t289 - pkin(8) * t294;
t247 = t325 * qJD(2);
t230 = qJD(1) * t247;
t313 = t229 * t372 + t288 * t230 - t256 * t373;
t330 = pkin(7) * t271;
t297 = -t293 * t330 + t313;
t113 = -pkin(9) * t202 + t297;
t385 = -t293 * t230 - t288 * t330;
t304 = -qJD(3) * t192 - t385;
t95 = pkin(3) * t271 - pkin(9) * t201 + t304;
t342 = -t287 * t113 + t292 * t95;
t300 = -qJD(4) * t83 + t342;
t14 = pkin(4) * t271 - pkin(10) * t107 + t300;
t298 = qJD(4) * t317 - t201 * t287 - t292 * t202;
t331 = -t292 * t113 - t143 * t370 + t155 * t371 - t287 * t95;
t17 = pkin(10) * t298 - t331;
t349 = t291 * t14 - t286 * t17;
t302 = -qJD(5) * t29 + t349;
t368 = qJD(5) * t291;
t369 = qJD(5) * t286;
t41 = t291 * t107 - t183 * t368 + t286 * t298 + t317 * t369;
t2 = pkin(5) * t271 - pkin(11) * t41 + t302;
t466 = -t285 * t2 + t467;
t299 = qJD(5) * t321 - t107 * t286 + t291 * t298;
t344 = -t286 * t14 - t291 * t17 - t61 * t368 + t67 * t369;
t3 = pkin(11) * t299 - t344;
t465 = -t290 * t3 + t466;
t322 = t125 * t285 + t290 * t321;
t450 = t322 * t55;
t397 = t293 * t294;
t314 = pkin(3) * t289 - pkin(9) * t397;
t425 = pkin(8) + pkin(9);
t360 = qJD(3) * t425;
t244 = t325 * qJD(1);
t381 = pkin(7) * t359 + t293 * t244;
t464 = qJD(1) * t314 + t293 * t360 + t381;
t223 = t288 * t244;
t398 = t289 * t293;
t399 = t288 * t294;
t463 = t223 + (-pkin(7) * t398 - pkin(9) * t399) * qJD(1) + t288 * t360;
t446 = t322 ^ 2 - t55 ^ 2;
t253 = -qJD(5) + t261;
t249 = -qJD(6) + t253;
t366 = qJD(6) * t290;
t8 = -t125 * t366 + t285 * t299 + t290 * t41 + t321 * t367;
t443 = -t249 * t55 + t8;
t361 = t290 * t2 - t285 * t3;
t458 = t74 * t322 + t361;
t301 = qJD(6) * t322 - t285 * t41 + t290 * t299;
t435 = t249 * t322 + t301;
t239 = t287 * t288 - t292 * t293;
t308 = t239 * t294;
t426 = qJD(3) + qJD(4);
t462 = -qJD(1) * t308 + t426 * t239;
t240 = t287 * t293 + t288 * t292;
t386 = (-t377 + t426) * t240;
t461 = pkin(5) * t321;
t452 = pkin(11) * t321;
t447 = t321 * t125;
t460 = t464 * t292;
t257 = t425 * t288;
t258 = t425 * t293;
t459 = -t257 * t370 - t258 * t371 - t287 * t464 - t292 * t463;
t445 = -t125 ^ 2 + t321 ^ 2;
t442 = -t125 * t253 + t41;
t439 = t125 * t141 + t344;
t438 = t141 * t321 + t302;
t434 = t253 * t321 + t299;
t449 = -pkin(10) * t386 + t459;
t382 = -t287 * t257 + t292 * t258;
t457 = -pkin(4) * t378 + t462 * pkin(10) - qJD(4) * t382 + t287 * t463 - t460;
t456 = pkin(4) * t317;
t187 = t291 * t239 + t240 * t286;
t413 = -qJD(5) * t187 - t286 * t386 - t291 * t462;
t188 = -t239 * t286 + t240 * t291;
t412 = qJD(5) * t188 - t286 * t462 + t291 * t386;
t448 = t317 * t183;
t326 = -t278 + (-t288 * t377 + t373) * pkin(3);
t444 = -t183 ^ 2 + t317 ^ 2;
t63 = t286 * t67;
t28 = t291 * t61 - t63;
t22 = t28 + t452;
t18 = -pkin(5) * t253 + t22;
t417 = t290 * t23;
t7 = t285 * t18 + t417;
t441 = -qJD(6) * t7 + t458;
t440 = -t183 * t261 + t107;
t437 = t183 * t204 + t331;
t436 = t204 * t317 + t300;
t433 = t261 * t317 + t298;
t432 = -0.2e1 * t364;
t431 = t457 * t291;
t214 = t240 * t289;
t215 = t239 * t289;
t235 = t293 * t250;
t424 = pkin(7) * t288;
t190 = -pkin(9) * t398 + t235 + (-pkin(3) - t424) * t294;
t270 = pkin(7) * t397;
t380 = t288 * t250 + t270;
t400 = t288 * t289;
t197 = -pkin(9) * t400 + t380;
t336 = t292 * t190 - t197 * t287;
t111 = -pkin(4) * t294 + pkin(10) * t215 + t336;
t388 = t287 * t190 + t292 * t197;
t115 = -pkin(10) * t214 + t388;
t393 = t286 * t111 + t291 * t115;
t334 = -t292 * t257 - t258 * t287;
t164 = -pkin(10) * t240 + t334;
t165 = -pkin(10) * t239 + t382;
t391 = t286 * t164 + t291 * t165;
t390 = pkin(4) * t386 + t326;
t275 = pkin(3) * t292 + pkin(4);
t404 = t286 * t287;
t338 = -t154 * t287 - t150;
t72 = t338 + t455;
t392 = t292 * t154 - t148;
t73 = t392 + t454;
t430 = t275 * t368 + (-t287 * t369 + (t291 * t292 - t404) * qJD(4)) * pkin(3) - t286 * t72 - t291 * t73;
t402 = t287 * t291;
t429 = t275 * t369 - (-t287 * t368 + (-t286 * t292 - t402) * qJD(4)) * pkin(3) - t286 * t73 + t291 * t72;
t428 = t164 * t368 - t165 * t369 + t457 * t286 + t291 * t449;
t427 = t294 * t365 - t356;
t130 = t290 * t187 + t188 * t285;
t423 = -qJD(6) * t130 - t285 * t412 + t290 * t413;
t131 = -t187 * t285 + t188 * t290;
t422 = qJD(6) * t131 + t285 * t413 + t290 * t412;
t421 = t291 * t66 - t63;
t418 = t290 * t18;
t416 = t430 - t452;
t415 = -t429 - t453;
t414 = pkin(5) * t412 + t390;
t411 = t201 * t288;
t410 = t236 * t268;
t409 = t238 * t268;
t408 = t255 * t288;
t407 = t255 * t293;
t406 = t268 * t293;
t405 = t285 * t286;
t403 = t286 * t290;
t296 = qJD(1) ^ 2;
t396 = t294 * t296;
t295 = qJD(2) ^ 2;
t395 = t295 * t289;
t394 = t295 * t294;
t384 = t288 * t247 + t250 * t372;
t375 = qJD(2) * t289;
t383 = t293 * t247 + t375 * t424;
t248 = pkin(3) * t400 + t289 * pkin(7);
t283 = t289 ^ 2;
t379 = -t294 ^ 2 + t283;
t362 = pkin(4) * qJD(5) * t249;
t205 = pkin(3) * t305 + pkin(7) * t374;
t276 = -pkin(3) * t293 - pkin(2);
t355 = t294 * t373;
t180 = pkin(3) * t202 + pkin(7) * t352;
t350 = qJD(6) * t18 + t3;
t138 = -qJD(2) * t308 - t214 * t426;
t134 = t314 * qJD(2) + (-t270 + (pkin(9) * t289 - t250) * t288) * qJD(3) + t383;
t137 = -t305 * pkin(9) + (-t289 * t365 - t355) * pkin(7) + t384;
t339 = t292 * t134 - t137 * t287;
t34 = pkin(4) * t375 - pkin(10) * t138 - qJD(4) * t388 + t339;
t139 = -t371 * t400 + (t398 * t426 + t358) * t292 + t427 * t287;
t307 = t287 * t134 + t292 * t137 + t190 * t370 - t197 * t371;
t36 = -pkin(10) * t139 + t307;
t347 = -t286 * t36 + t291 * t34;
t346 = -t286 * t66 - t65;
t341 = pkin(1) * t432;
t340 = t291 * t111 - t115 * t286;
t337 = t291 * t164 - t165 * t286;
t333 = t236 + t365;
t332 = -t238 + t376;
t329 = -pkin(3) * t404 + t291 * t275;
t193 = pkin(4) * t214 + t248;
t77 = -pkin(11) * t188 + t337;
t328 = -pkin(11) * t412 + qJD(6) * t77 + t428;
t78 = -pkin(11) * t187 + t391;
t327 = pkin(5) * t378 + pkin(11) * t413 + qJD(5) * t391 + qJD(6) * t78 + t286 * t449 - t431;
t147 = pkin(3) * t238 - t456;
t158 = -t214 * t286 - t215 * t291;
t45 = -pkin(5) * t294 - pkin(11) * t158 + t340;
t157 = t291 * t214 - t215 * t286;
t46 = -pkin(11) * t157 + t393;
t324 = t285 * t45 + t290 * t46;
t104 = t290 * t157 + t158 * t285;
t105 = -t157 * t285 + t158 * t290;
t216 = pkin(5) + t329;
t218 = pkin(3) * t402 + t275 * t286;
t319 = t216 * t290 - t218 * t285;
t318 = t216 * t285 + t218 * t290;
t316 = qJD(1) * t283 - t268 * t294;
t209 = pkin(4) * t239 + t276;
t116 = pkin(4) * t139 + t205;
t75 = -pkin(4) * t298 + t180;
t274 = pkin(4) * t291 + pkin(5);
t312 = pkin(4) * t403 + t274 * t285;
t311 = -pkin(4) * t405 + t274 * t290;
t310 = t111 * t368 - t115 * t369 + t286 * t34 + t291 * t36;
t144 = pkin(5) * t187 + t209;
t122 = pkin(5) * t157 + t193;
t79 = -t456 - t461;
t76 = t147 - t461;
t49 = qJD(5) * t158 + t138 * t286 + t291 * t139;
t48 = -qJD(5) * t157 + t138 * t291 - t139 * t286;
t44 = pkin(5) * t49 + t116;
t25 = t421 + t452;
t24 = t346 + t453;
t16 = -pkin(5) * t299 + t75;
t11 = qJD(6) * t105 + t285 * t48 + t290 * t49;
t10 = -qJD(6) * t104 - t285 * t49 + t290 * t48;
t6 = -t23 * t285 + t418;
t5 = -pkin(11) * t49 + t310;
t4 = pkin(5) * t375 - pkin(11) * t48 - qJD(5) * t393 + t347;
t1 = [0, 0, 0, 0.2e1 * t294 * t271, t379 * t432, t394, -t395, 0, -pkin(7) * t394 + t289 * t341, pkin(7) * t395 + t294 * t341, t201 * t398 + t238 * t427 (-t236 * t293 - t238 * t288) * t374 + (-t411 - t202 * t293 + (t236 * t288 - t238 * t293) * qJD(3)) * t289, t268 * t356 - t201 * t294 + (t238 * t289 + t293 * t316) * qJD(2), t268 * t354 + t202 * t294 + (-t236 * t289 - t288 * t316) * qJD(2) (-t268 - t377) * t375 -(-t250 * t373 + t383) * t268 + (t255 * t372 + pkin(7) * t202 + (qJD(1) * t235 + t191) * qJD(2)) * t289 + ((pkin(7) * t236 + t408) * qJD(2) + (t401 + (pkin(7) * t268 + t256) * t293) * qJD(3) + t385) * t294 (-pkin(7) * t355 + t384) * t268 + t313 * t294 + (pkin(7) * t201 - t255 * t373) * t289 + ((pkin(7) * t238 + t407) * t294 + (-pkin(7) * t406 - qJD(1) * t380 - t192) * t289) * qJD(2), -t107 * t215 - t138 * t317, -t107 * t214 - t138 * t183 + t139 * t317 - t215 * t298, -t107 * t294 - t138 * t261 + (-qJD(1) * t215 - t317) * t375, -t298 * t294 + t139 * t261 + (-qJD(1) * t214 - t183) * t375 (-t261 - t377) * t375, -t339 * t261 - t342 * t294 + t205 * t183 - t248 * t298 + t180 * t214 + t204 * t139 + (t261 * t388 + t294 * t83) * qJD(4) + (qJD(1) * t336 + t82) * t375, t307 * t261 - t331 * t294 - t205 * t317 + t248 * t107 - t180 * t215 + t204 * t138 + (-qJD(1) * t388 - t83) * t375, t158 * t41 - t321 * t48, -t125 * t48 - t157 * t41 + t158 * t299 + t321 * t49, -t253 * t48 - t294 * t41 + (qJD(1) * t158 - t321) * t375, t253 * t49 - t294 * t299 + (-qJD(1) * t157 - t125) * t375 (-t253 - t377) * t375, -t347 * t253 - t349 * t294 + t116 * t125 - t193 * t299 + t75 * t157 + t141 * t49 + (t253 * t393 + t29 * t294) * qJD(5) + (qJD(1) * t340 + t28) * t375, t310 * t253 - t344 * t294 - t116 * t321 + t193 * t41 + t75 * t158 + t141 * t48 + (-qJD(1) * t393 - t29) * t375, -t10 * t322 + t105 * t8, -t10 * t55 - t104 * t8 + t105 * t301 + t11 * t322, -t10 * t249 - t294 * t8 + (qJD(1) * t105 - t322) * t375, t11 * t249 - t294 * t301 + (-qJD(1) * t104 - t55) * t375 (-t249 - t377) * t375 -(-t285 * t5 + t290 * t4) * t249 - t361 * t294 + t44 * t55 - t122 * t301 + t16 * t104 + t74 * t11 + (t249 * t324 + t294 * t7) * qJD(6) + ((-t285 * t46 + t290 * t45) * qJD(1) + t6) * t375, t74 * t10 + t16 * t105 + t122 * t8 - t21 * t294 - t44 * t322 + ((-qJD(6) * t46 + t4) * t249 + t2 * t294) * t285 + ((qJD(6) * t45 + t5) * t249 + t350 * t294) * t290 + (-qJD(1) * t324 - t7) * t375; 0, 0, 0, -t289 * t396, t379 * t296, 0, 0, 0, t296 * pkin(1) * t289, pkin(1) * t396, -t238 * t406 + t411 (t201 + t410) * t293 + (-t202 + t409) * t288, -t268 * t372 + (t268 * t397 + t289 * t332) * qJD(1), t268 * t373 + (-t268 * t399 + t289 * t333) * qJD(1), t268 * t378, -pkin(2) * t202 + t381 * t268 + (pkin(8) * t406 + t408) * qJD(3) + ((-pkin(8) * t376 - t191) * t289 + (-pkin(7) * t333 - t408) * t294) * qJD(1), -pkin(2) * t201 - t223 * t268 + (-pkin(8) * t268 * t288 + t407) * qJD(3) + (-t255 * t397 + (-pkin(8) * t365 + t192) * t289 + (t268 * t398 + t294 * t332) * pkin(7)) * qJD(1), t107 * t240 + t317 * t462, -t107 * t239 + t183 * t462 + t240 * t298 + t317 * t386, t462 * t261 + (qJD(2) * t240 + t317) * t378, t386 * t261 + (-qJD(2) * t239 + t183) * t378, t261 * t378, -t276 * t298 + t180 * t239 + (t258 * t370 + (-qJD(4) * t257 - t463) * t287 + t460) * t261 + t386 * t204 + t326 * t183 + (qJD(2) * t334 - t82) * t378, t276 * t107 + t180 * t240 + t459 * t261 - t462 * t204 - t326 * t317 + (-qJD(2) * t382 + t83) * t378, t188 * t41 - t321 * t413, -t125 * t413 - t187 * t41 + t188 * t299 + t321 * t412, -t413 * t253 + (qJD(2) * t188 + t321) * t378, t412 * t253 + (-qJD(2) * t187 + t125) * t378, t253 * t378, t75 * t187 - t209 * t299 + (t165 * t368 + (qJD(5) * t164 + t449) * t286 - t431) * t253 + t412 * t141 + t390 * t125 + (qJD(2) * t337 - t28) * t378, t75 * t188 + t209 * t41 + t428 * t253 + t413 * t141 - t390 * t321 + (-qJD(2) * t391 + t29) * t378, t131 * t8 - t322 * t423, -t130 * t8 + t131 * t301 + t322 * t422 - t423 * t55, -t423 * t249 + (qJD(2) * t131 + t322) * t378, t422 * t249 + (-qJD(2) * t130 + t55) * t378, t249 * t378, t16 * t130 - t144 * t301 + t422 * t74 + t414 * t55 + (t285 * t328 + t290 * t327) * t249 + ((-t285 * t78 + t290 * t77) * qJD(2) - t6) * t378, t16 * t131 + t144 * t8 + t423 * t74 - t414 * t322 + (-t285 * t327 + t290 * t328) * t249 + (-(t285 * t77 + t290 * t78) * qJD(2) + t7) * t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238 * t236, -t236 ^ 2 + t238 ^ 2, t201 - t410, -t202 - t409, t271, -t192 * t268 - t238 * t255 + t304, -t191 * t268 + t236 * t255 - t297, -t448, t444, t440, t433, t271, t338 * t261 + (-t183 * t238 + t261 * t371 + t271 * t292) * pkin(3) + t436, -t392 * t261 + (t238 * t317 + t261 * t370 - t271 * t287) * pkin(3) + t437, -t447, t445, t442, t434, t271, -t147 * t125 + t253 * t429 + t329 * t271 + t438, t147 * t321 - t218 * t271 + t253 * t430 + t439, -t450, t446, t443, t435, t271, t319 * t271 - t76 * t55 + (t285 * t416 - t290 * t415) * t249 + (t249 * t318 - t7) * qJD(6) + t458, -t318 * t271 + t76 * t322 + (t285 * t415 + t290 * t416) * t249 + (t249 * t319 - t418) * qJD(6) + t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t448, t444, t440, t433, t271, -t261 * t83 + t436, -t261 * t82 + t437, -t447, t445, t442, t434, t271, t346 * t253 + (t125 * t317 + t253 * t369 + t271 * t291) * pkin(4) + t438, -t421 * t253 + (t253 * t368 - t271 * t286 - t317 * t321) * pkin(4) + t439, -t450, t446, t443, t435, t271, t311 * t271 + (t24 * t290 - t25 * t285) * t249 - t79 * t55 - (-t285 * t291 - t403) * t362 + (t249 * t312 - t7) * qJD(6) + t458, -t312 * t271 - (t24 * t285 + t25 * t290) * t249 + t79 * t322 + (t290 * t291 - t405) * t362 + (t249 * t311 - t418) * qJD(6) + t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t447, t445, t442, t434, t271, -t253 * t29 + t438, -t253 * t28 + t439, -t450, t446, t443, t435, t271 (-t22 * t285 - t417) * t249 + (t249 * t367 + t271 * t290 + t321 * t55) * pkin(5) + t441 (t23 * t249 - t2) * t285 + (-t22 * t249 - t350) * t290 + (t249 * t366 - t271 * t285 - t321 * t322) * pkin(5) + t467; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t450, t446, t443, t435, t271, -t249 * t7 + t441, -t249 * t6 - t290 * t350 + t466;];
tauc_reg  = t1;
