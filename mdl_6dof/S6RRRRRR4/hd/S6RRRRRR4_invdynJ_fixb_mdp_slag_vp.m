% Calculate vector of inverse dynamics joint torques for
% S6RRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% MDP [38x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRR4_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRR4_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(38,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR4_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR4_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR4_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR4_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR4_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [38 1]), ...
  'S6RRRRRR4_invdynJ_fixb_mdp_slag_vp: MDP has to be [38x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:52:01
% EndTime: 2019-03-10 03:52:37
% DurationCPUTime: 27.59s
% Computational Cost: add. (18287->774), mult. (41320->1009), div. (0->0), fcn. (31480->18), ass. (0->313)
t849 = sin(qJ(6));
t852 = sin(qJ(3));
t853 = sin(qJ(2));
t956 = qJD(1) * t853;
t933 = t852 * t956;
t858 = cos(qJ(3));
t940 = t858 * qJD(2);
t782 = t933 - t940;
t952 = qJD(2) * t852;
t784 = t858 * t956 + t952;
t851 = sin(qJ(4));
t857 = cos(qJ(4));
t708 = t857 * t782 + t784 * t851;
t850 = sin(qJ(5));
t856 = cos(qJ(5));
t889 = t782 * t851 - t857 * t784;
t891 = t708 * t850 + t856 * t889;
t1001 = t891 * t849;
t645 = t856 * t708 - t850 * t889;
t855 = cos(qJ(6));
t1045 = -t855 * t645 + t1001;
t859 = cos(qJ(2));
t840 = t859 * qJDD(1);
t939 = qJD(1) * qJD(2);
t1011 = -t853 * t939 + t840;
t779 = qJDD(3) - t1011;
t774 = qJDD(4) + t779;
t759 = qJDD(5) + t774;
t750 = qJDD(6) + t759;
t892 = t645 * t849 + t855 * t891;
t1051 = t750 * MDP(36) + (-t1045 ^ 2 + t892 ^ 2) * MDP(33) + t1045 * MDP(32) * t892;
t955 = qJD(1) * t859;
t822 = -qJD(3) + t955;
t812 = -qJD(4) + t822;
t803 = -qJD(5) + t812;
t797 = -qJD(6) + t803;
t1030 = t797 * t892;
t1031 = t1045 * t797;
t948 = qJD(3) * t853;
t1026 = -qJD(1) * t948 + qJDD(2);
t924 = t859 * t939;
t938 = qJDD(1) * t853;
t693 = qJD(3) * t940 + (t924 + t938) * t858 + t1026 * t852;
t694 = (qJD(2) * (qJD(3) + t955) + t938) * t852 - t1026 * t858;
t945 = qJD(4) * t857;
t946 = qJD(4) * t851;
t607 = t857 * t693 - t851 * t694 - t782 * t945 - t784 * t946;
t865 = qJD(4) * t889 - t693 * t851 - t857 * t694;
t943 = qJD(5) * t856;
t944 = qJD(5) * t850;
t551 = t856 * t607 - t708 * t943 + t850 * t865 + t889 * t944;
t866 = qJD(5) * t891 - t607 * t850 + t856 * t865;
t941 = qJD(6) * t855;
t936 = t855 * t551 - t645 * t941 + t849 * t866;
t942 = qJD(6) * t849;
t526 = t891 * t942 + t936;
t920 = t551 * t849 - t855 * t866;
t867 = qJD(6) * t892 - t920;
t1050 = t759 * MDP(29) + (-t645 ^ 2 + t891 ^ 2) * MDP(26) + (-t645 * t803 + t551) * MDP(27) + (t803 * t891 + t866) * MDP(28) - t645 * MDP(25) * t891 + (t867 + t1030) * MDP(35) + (t526 + t1031) * MDP(34) + t1051;
t1049 = t774 * MDP(22) + (-t708 ^ 2 + t889 ^ 2) * MDP(19) + (-t708 * t812 + t607) * MDP(20) + (t812 * t889 + t865) * MDP(21) - t708 * MDP(18) * t889 + t1050;
t986 = t858 * t859;
t888 = pkin(3) * t853 - pkin(9) * t986;
t1007 = pkin(8) + pkin(9);
t934 = qJD(3) * t1007;
t900 = pkin(2) * t853 - pkin(8) * t859;
t790 = t900 * qJD(1);
t962 = pkin(7) * t933 + t858 * t790;
t1048 = qJD(1) * t888 + t858 * t934 + t962;
t768 = t852 * t790;
t990 = t853 * t858;
t991 = t852 * t859;
t1046 = -t768 - (-pkin(7) * t990 - pkin(9) * t991) * qJD(1) - t852 * t934;
t1004 = g(3) * t853;
t804 = -qJD(2) * pkin(2) + pkin(7) * t956;
t731 = pkin(3) * t782 + t804;
t661 = pkin(4) * t708 + t731;
t598 = pkin(5) * t645 + t661;
t848 = qJ(3) + qJ(4);
t844 = qJ(5) + t848;
t833 = qJ(6) + t844;
t819 = sin(t833);
t820 = cos(t833);
t860 = cos(qJ(1));
t854 = sin(qJ(1));
t989 = t854 * t859;
t726 = t819 * t989 + t820 * t860;
t985 = t859 * t860;
t728 = -t819 * t985 + t820 * t854;
t1034 = pkin(10) * t889;
t798 = -pkin(2) * t859 - pkin(8) * t853 - pkin(1);
t775 = t798 * qJD(1);
t835 = pkin(7) * t955;
t805 = qJD(2) * pkin(8) + t835;
t718 = t858 * t775 - t805 * t852;
t675 = -pkin(9) * t784 + t718;
t664 = -pkin(3) * t822 + t675;
t719 = t775 * t852 + t805 * t858;
t676 = -pkin(9) * t782 + t719;
t669 = t851 * t676;
t612 = t857 * t664 - t669;
t589 = t612 + t1034;
t582 = -pkin(4) * t812 + t589;
t1035 = pkin(10) * t708;
t671 = t857 * t676;
t613 = t664 * t851 + t671;
t590 = t613 - t1035;
t586 = t856 * t590;
t554 = t582 * t850 + t586;
t793 = t900 * qJD(2);
t724 = qJD(1) * t793 + qJDD(1) * t798;
t713 = t858 * t724;
t756 = pkin(7) * t1011 + qJDD(2) * pkin(8);
t592 = pkin(3) * t779 - pkin(9) * t693 - qJD(3) * t719 - t756 * t852 + t713;
t947 = qJD(3) * t858;
t949 = qJD(3) * t852;
t881 = t852 * t724 + t858 * t756 + t775 * t947 - t805 * t949;
t600 = -pkin(9) * t694 + t881;
t917 = t857 * t592 - t851 * t600;
t868 = -qJD(4) * t613 + t917;
t532 = pkin(4) * t774 - pkin(10) * t607 + t868;
t903 = -t851 * t592 - t857 * t600 - t664 * t945 + t676 * t946;
t534 = pkin(10) * t865 - t903;
t921 = t856 * t532 - t850 * t534;
t869 = -qJD(5) * t554 + t921;
t522 = pkin(5) * t759 - pkin(11) * t551 + t869;
t904 = -t850 * t532 - t856 * t534 - t582 * t943 + t590 * t944;
t523 = pkin(11) * t866 - t904;
t922 = t855 * t522 - t849 * t523;
t1024 = -g(1) * t728 + g(2) * t726 + t819 * t1004 + t598 * t892 + t922;
t1033 = pkin(11) * t645;
t543 = t554 - t1033;
t541 = t543 * t942;
t727 = t819 * t860 - t820 * t989;
t729 = t819 * t854 + t820 * t985;
t1025 = g(1) * t729 - g(2) * t727 + t820 * t1004 - t598 * t1045 + t541;
t1009 = qJD(3) + qJD(4);
t785 = t851 * t852 - t857 * t858;
t882 = t859 * t785;
t968 = qJD(1) * t882 - t1009 * t785;
t786 = t851 * t858 + t852 * t857;
t967 = (t1009 - t955) * t786;
t1042 = pkin(5) * t891;
t1032 = pkin(11) * t891;
t1040 = t1048 * t857;
t806 = t1007 * t852;
t807 = t1007 * t858;
t1039 = t1046 * t857 - t1048 * t851 - t806 * t945 - t807 * t946;
t827 = sin(t844);
t828 = cos(t844);
t734 = t827 * t860 - t828 * t989;
t736 = t827 * t854 + t828 * t985;
t1023 = g(1) * t736 - g(2) * t734 + t828 * t1004 + t645 * t661 + t904;
t733 = t827 * t989 + t828 * t860;
t735 = -t827 * t985 + t828 * t854;
t1022 = -g(1) * t735 + g(2) * t733 + t827 * t1004 + t661 * t891 + t869;
t963 = -t851 * t806 + t857 * t807;
t1038 = pkin(4) * t956 + pkin(10) * t968 + qJD(4) * t963 + t1046 * t851 + t1040;
t1028 = -pkin(10) * t967 + t1039;
t832 = pkin(7) * t938;
t757 = -qJDD(2) * pkin(2) + pkin(7) * t924 + t832;
t1003 = g(3) * t859;
t899 = g(1) * t860 + g(2) * t854;
t875 = t853 * t899 - t1003;
t1037 = qJD(3) * pkin(8) * t822 - t757 + t875;
t1036 = pkin(4) * t889;
t714 = t856 * t785 + t786 * t850;
t976 = -qJD(5) * t714 - t850 * t967 + t856 * t968;
t715 = -t785 * t850 + t786 * t856;
t975 = qJD(5) * t715 + t850 * t968 + t856 * t967;
t901 = -t835 + (-t852 * t955 + t949) * pkin(3);
t950 = qJD(2) * t859;
t931 = t852 * t950;
t1027 = t853 * t947 + t931;
t842 = sin(t848);
t843 = cos(t848);
t745 = t842 * t860 - t843 * t989;
t747 = t842 * t854 + t843 * t985;
t1021 = g(1) * t747 - g(2) * t745 + t843 * t1004 + t708 * t731 + t903;
t744 = t842 * t989 + t843 * t860;
t746 = -t842 * t985 + t843 * t854;
t1020 = -g(1) * t746 + g(2) * t744 + t842 * t1004 + t731 * t889 + t868;
t751 = t786 * t853;
t1016 = t1038 * t856;
t752 = t785 * t853;
t1005 = pkin(7) * t852;
t781 = t858 * t798;
t717 = -pkin(9) * t990 + t781 + (-pkin(3) - t1005) * t859;
t824 = pkin(7) * t986;
t961 = t852 * t798 + t824;
t992 = t852 * t853;
t725 = -pkin(9) * t992 + t961;
t909 = t857 * t717 - t725 * t851;
t632 = -pkin(4) * t859 + pkin(10) * t752 + t909;
t969 = t851 * t717 + t857 * t725;
t635 = -pkin(10) * t751 + t969;
t974 = t850 * t632 + t856 * t635;
t908 = -t857 * t806 - t807 * t851;
t688 = -pkin(10) * t786 + t908;
t689 = -pkin(10) * t785 + t963;
t972 = t850 * t688 + t856 * t689;
t971 = pkin(4) * t967 + t901;
t912 = -t675 * t851 - t671;
t596 = t912 + t1035;
t973 = t857 * t675 - t669;
t597 = t973 + t1034;
t830 = pkin(3) * t857 + pkin(4);
t995 = t850 * t851;
t1015 = t830 * t943 + (-t851 * t944 + (t856 * t857 - t995) * qJD(4)) * pkin(3) - t850 * t596 - t856 * t597;
t993 = t851 * t856;
t1014 = t830 * t944 - (-t851 * t943 + (-t850 * t857 - t993) * qJD(4)) * pkin(3) + t856 * t596 - t597 * t850;
t1012 = t1028 * t856 - t1038 * t850 + t688 * t943 - t689 * t944;
t1010 = -t852 * t948 + t859 * t940;
t1006 = pkin(4) * t850;
t584 = t850 * t590;
t553 = t856 * t582 - t584;
t542 = t553 + t1032;
t538 = -pkin(5) * t803 + t542;
t1002 = t538 * t855;
t1000 = t693 * t852;
t999 = t782 * t822;
t998 = t784 * t822;
t997 = t784 * t858;
t996 = t849 * t750;
t994 = t850 * t855;
t988 = t855 * t543;
t987 = t855 * t750;
t984 = t1014 + t1033;
t983 = t1015 - t1032;
t650 = t855 * t714 + t715 * t849;
t982 = -qJD(6) * t650 - t849 * t975 + t855 * t976;
t651 = -t714 * t849 + t715 * t855;
t981 = qJD(6) * t651 + t849 * t976 + t855 * t975;
t980 = t856 * t589 - t584;
t979 = pkin(5) * t975 + t971;
t965 = t852 * t793 + t798 * t947;
t951 = qJD(2) * t853;
t964 = t951 * t1005 + t858 * t793;
t794 = pkin(3) * t992 + t853 * pkin(7);
t846 = t853 ^ 2;
t960 = -t859 ^ 2 + t846;
t954 = qJD(2) * t782;
t953 = qJD(2) * t784;
t732 = pkin(3) * t1027 + pkin(7) * t950;
t831 = -pkin(3) * t858 - pkin(2);
t932 = t822 * t940;
t929 = t822 * t949;
t928 = t822 * t947;
t658 = -qJD(2) * t882 - t1009 * t751;
t654 = t888 * qJD(2) + (-t824 + (pkin(9) * t853 - t798) * t852) * qJD(3) + t964;
t657 = -t1027 * pkin(9) + (-t853 * t940 - t859 * t949) * pkin(7) + t965;
t913 = t857 * t654 - t657 * t851;
t559 = pkin(4) * t951 - pkin(10) * t658 - qJD(4) * t969 + t913;
t659 = -t946 * t992 + (t1009 * t990 + t931) * t857 + t1010 * t851;
t880 = t851 * t654 + t857 * t657 + t717 * t945 - t725 * t946;
t561 = -pkin(10) * t659 + t880;
t919 = t856 * t559 - t561 * t850;
t918 = -t589 * t850 - t586;
t914 = t856 * t632 - t635 * t850;
t911 = t856 * t688 - t689 * t850;
t907 = -qJD(3) * t775 - t756;
t906 = qJD(6) * t538 + t523;
t902 = -pkin(3) * t995 + t856 * t830;
t720 = pkin(4) * t751 + t794;
t668 = pkin(3) * t784 - t1036;
t898 = g(1) * t854 - g(2) * t860;
t897 = t805 * t947 - t713;
t602 = -pkin(11) * t715 + t911;
t896 = -pkin(11) * t975 + qJD(6) * t602 + t1012;
t603 = -pkin(11) * t714 + t972;
t895 = pkin(5) * t956 + pkin(11) * t976 + qJD(5) * t972 + qJD(6) * t603 + t1028 * t850 + t1016;
t894 = -pkin(8) * t779 + qJD(3) * t804;
t529 = t849 * t538 + t988;
t678 = t856 * t751 - t752 * t850;
t679 = -t751 * t850 - t752 * t856;
t628 = t855 * t678 + t679 * t849;
t629 = -t678 * t849 + t679 * t855;
t741 = pkin(4) * t785 + t831;
t636 = pkin(4) * t659 + t732;
t886 = -0.2e1 * pkin(1) * t939 - pkin(7) * qJDD(2);
t885 = t779 * t852 - t928;
t884 = t779 * t858 + t929;
t878 = t850 * t559 + t856 * t561 + t632 * t943 - t635 * t944;
t862 = qJD(1) ^ 2;
t876 = pkin(1) * t862 + t899;
t663 = pkin(3) * t694 + t757;
t570 = -pkin(4) * t865 + t663;
t861 = qJD(2) ^ 2;
t872 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t861 + t898;
t829 = pkin(4) * t856 + pkin(5);
t766 = t852 * t854 + t858 * t985;
t765 = -t852 * t985 + t854 * t858;
t764 = t852 * t860 - t854 * t986;
t763 = t852 * t989 + t858 * t860;
t758 = pkin(3) * t993 + t830 * t850;
t753 = pkin(5) + t902;
t665 = pkin(5) * t714 + t741;
t642 = pkin(5) * t678 + t720;
t609 = -t1036 - t1042;
t601 = t668 - t1042;
t569 = qJD(5) * t679 + t658 * t850 + t856 * t659;
t568 = -qJD(5) * t678 + t658 * t856 - t659 * t850;
t566 = -pkin(11) * t678 + t974;
t565 = -pkin(5) * t859 - pkin(11) * t679 + t914;
t564 = pkin(5) * t569 + t636;
t545 = t980 + t1032;
t544 = t918 + t1033;
t537 = qJD(6) * t629 + t568 * t849 + t855 * t569;
t536 = -qJD(6) * t628 + t568 * t855 - t569 * t849;
t535 = -pkin(5) * t866 + t570;
t528 = -t543 * t849 + t1002;
t525 = -pkin(11) * t569 + t878;
t524 = pkin(5) * t951 - pkin(11) * t568 - qJD(5) * t974 + t919;
t1 = [(t526 * t629 - t536 * t892) * MDP(32) + (-t529 * t951 - g(1) * t726 - g(2) * t728 + t642 * t526 + t535 * t629 + t598 * t536 - t541 * t859 - t564 * t892 + ((-qJD(6) * t566 + t524) * t797 - t565 * t750 + t522 * t859) * t849 + ((qJD(6) * t565 + t525) * t797 - t566 * t750 + t906 * t859) * t855) * MDP(38) + (-t526 * t859 - t536 * t797 + t629 * t750 - t892 * t951) * MDP(34) + (t1045 * t536 - t526 * t628 + t537 * t892 + t629 * t867) * MDP(33) + (t1045 * t951 + t537 * t797 - t628 * t750 - t859 * t867) * MDP(35) + (-(t524 * t855 - t525 * t849) * t797 + (t565 * t855 - t566 * t849) * t750 - t922 * t859 + t528 * t951 - t564 * t1045 - t642 * t867 + t535 * t628 + t598 * t537 - g(1) * t727 - g(2) * t729 + (-(-t565 * t849 - t566 * t855) * t797 + t529 * t859) * qJD(6)) * MDP(37) + (-t551 * t678 - t568 * t645 + t569 * t891 + t679 * t866) * MDP(26) + (t569 * t803 - t645 * t951 - t678 * t759 - t859 * t866) * MDP(28) + (-t607 * t751 - t658 * t708 + t659 * t889 - t752 * t865) * MDP(19) + (t659 * t812 - t708 * t951 - t751 * t774 - t859 * t865) * MDP(21) + (-t913 * t812 + t909 * t774 - t917 * t859 + t612 * t951 + t732 * t708 - t794 * t865 + t663 * t751 + t731 * t659 - g(1) * t745 - g(2) * t747 + (t613 * t859 + t812 * t969) * qJD(4)) * MDP(23) + (-t919 * t803 + t914 * t759 - t921 * t859 + t553 * t951 + t636 * t645 - t720 * t866 + t570 * t678 + t661 * t569 - g(1) * t734 - g(2) * t736 + (t554 * t859 + t803 * t974) * qJD(5)) * MDP(30) + (-g(1) * t733 - g(2) * t735 + t720 * t551 - t554 * t951 + t661 * t568 + t570 * t679 - t636 * t891 - t759 * t974 + t803 * t878 - t859 * t904) * MDP(31) + (-t551 * t859 - t568 * t803 + t679 * t759 - t891 * t951) * MDP(27) + (t551 * t679 - t568 * t891) * MDP(25) + (-t607 * t752 - t658 * t889) * MDP(18) + (-g(1) * t744 - g(2) * t746 + t794 * t607 - t613 * t951 + t731 * t658 - t663 * t752 - t732 * t889 - t774 * t969 + t812 * t880 - t859 * t903) * MDP(24) + (-t607 * t859 - t658 * t812 - t752 * t774 - t889 * t951) * MDP(20) + (t1010 * t784 + t693 * t990) * MDP(11) + (qJDD(2) * t853 + t859 * t861) * MDP(6) + (qJDD(2) * t859 - t853 * t861) * MDP(7) + ((-t782 * t858 - t784 * t852) * t950 + (-t1000 - t694 * t858 + (t782 * t852 - t997) * qJD(3)) * t853) * MDP(12) + (-(-t798 * t949 + t964) * t822 + t781 * t779 - g(1) * t764 - g(2) * t766 + ((t928 + t954) * pkin(7) + (-pkin(7) * t779 + qJD(2) * t804 - t907) * t852 + t897) * t859 + (pkin(7) * t694 + qJD(2) * t718 + t757 * t852 + t804 * t947) * t853) * MDP(16) + (t965 * t822 - t961 * t779 - g(1) * t763 - g(2) * t765 + (t804 * t940 + (-t929 + t953) * pkin(7) + t881) * t859 + (-t804 * t949 - t719 * qJD(2) + t757 * t858 + (t693 - t932) * pkin(7)) * t853) * MDP(17) + 0.2e1 * (t840 * t853 - t939 * t960) * MDP(5) + ((-t693 - t932) * t859 + (t884 + t953) * t853) * MDP(13) + ((t822 * t952 + t694) * t859 + (-t885 - t954) * t853) * MDP(14) + (-t779 * t859 - t822 * t951) * MDP(15) + (-t774 * t859 - t812 * t951) * MDP(22) + (-t759 * t859 - t803 * t951) * MDP(29) + (-t750 * t859 - t797 * t951) * MDP(36) + (qJDD(1) * t846 + 0.2e1 * t853 * t924) * MDP(4) + qJDD(1) * MDP(1) + (t853 * t886 + t859 * t872) * MDP(9) + (-t853 * t872 + t859 * t886) * MDP(10) + t898 * MDP(2) + t899 * MDP(3); (t526 * t651 - t892 * t982) * MDP(32) + (t822 * MDP(15) + t812 * MDP(22) + t803 * MDP(29) + t797 * MDP(36) + t891 * MDP(27) + t554 * MDP(31) - t528 * MDP(37) - t1045 * MDP(35) + t529 * MDP(38) + t892 * MDP(34) + t889 * MDP(20) + t613 * MDP(24) - t553 * MDP(30) + t645 * MDP(28) - t612 * MDP(23) + t708 * MDP(21)) * t956 + (t1045 * t982 - t526 * t650 + t651 * t867 + t892 * t981) * MDP(33) + ((t602 * t855 - t603 * t849) * t750 - t665 * t867 + t535 * t650 + (t849 * t896 + t855 * t895) * t797 + t981 * t598 - t979 * t1045 + t875 * t820) * MDP(37) + (t911 * t759 - t741 * t866 + t570 * t714 + (t689 * t943 + (qJD(5) * t688 + t1028) * t850 + t1016) * t803 + t975 * t661 + t971 * t645 + t875 * t828) * MDP(30) + (-t551 * t714 - t645 * t976 + t715 * t866 + t891 * t975) * MDP(26) + (-t607 * t785 - t708 * t968 + t786 * t865 + t889 * t967) * MDP(19) + (-(t602 * t849 + t603 * t855) * t750 + t665 * t526 + t535 * t651 + (-t849 * t895 + t855 * t896) * t797 + t982 * t598 - t979 * t892 - t875 * t819) * MDP(38) + (t1012 * t803 + t741 * t551 + t570 * t715 + t976 * t661 - t972 * t759 - t827 * t875 - t891 * t971) * MDP(31) + (t1039 * t812 + t831 * t607 + t663 * t786 + t968 * t731 - t963 * t774 - t875 * t842 - t901 * t889) * MDP(24) + (-MDP(4) * t853 * t859 + MDP(5) * t960) * t862 + (-t774 * t785 + t812 * t967) * MDP(21) + (-t650 * t750 + t797 * t981) * MDP(35) + (t651 * t750 - t797 * t982) * MDP(34) + (-t714 * t759 + t803 * t975) * MDP(28) + (t908 * t774 - t831 * t865 + t663 * t785 + (t807 * t945 + (-qJD(4) * t806 + t1046) * t851 + t1040) * t812 + t967 * t731 + t901 * t708 + t875 * t843) * MDP(23) + (t774 * t786 - t812 * t968) * MDP(20) + (t551 * t715 - t891 * t976) * MDP(25) + (t607 * t786 - t889 * t968) * MDP(18) + MDP(7) * t840 + MDP(6) * t938 + (t853 * t876 - t1003 - t832) * MDP(9) + (t1004 + (-pkin(7) * qJDD(1) + t876) * t859) * MDP(10) + (-t822 * t997 + t1000) * MDP(11) + ((t693 + t999) * t858 + (-t694 + t998) * t852) * MDP(12) + ((t782 * t853 - t822 * t991) * qJD(1) + t884) * MDP(14) + ((-t784 * t853 + t822 * t986) * qJD(1) + t885) * MDP(13) + (t715 * t759 - t803 * t976) * MDP(27) + qJDD(2) * MDP(8) + (-pkin(2) * t694 + t962 * t822 + t894 * t852 + (-t718 * t853 + (-pkin(7) * t782 - t804 * t852) * t859) * qJD(1) + t1037 * t858) * MDP(16) + (-pkin(2) * t693 - t768 * t822 + t894 * t858 + (-t804 * t986 + t719 * t853 + (-t784 * t859 + t822 * t990) * pkin(7)) * qJD(1) - t1037 * t852) * MDP(17); (t601 * t892 + (-t753 * t750 - t522 + (-qJD(6) * t758 - t984) * t797) * t849 + (-t758 * t750 + (qJD(6) * t753 + t983) * t797 - t906) * t855 + t1025) * MDP(38) + (t1014 * t803 - t668 * t645 + t902 * t759 + t1022) * MDP(30) + (t1015 * t803 + t668 * t891 - t758 * t759 + t1023) * MDP(31) + ((t753 * t855 - t758 * t849) * t750 + t601 * t1045 + (t983 * t849 + t984 * t855) * t797 + (-(-t753 * t849 - t758 * t855) * t797 - t529) * qJD(6) + t1024) * MDP(37) + t784 * t782 * MDP(11) + (-t782 ^ 2 + t784 ^ 2) * MDP(12) + t779 * MDP(15) + (-t973 * t812 + (-t774 * t851 + t784 * t889 + t812 * t945) * pkin(3) + t1021) * MDP(24) + (t912 * t812 + (-t708 * t784 + t774 * t857 + t812 * t946) * pkin(3) + t1020) * MDP(23) + (-t694 - t998) * MDP(14) + (-g(1) * t765 + g(2) * t763 - t719 * t822 - t784 * t804 + (t907 + t1004) * t852 - t897) * MDP(16) + (t693 - t999) * MDP(13) + (g(1) * t766 - g(2) * t764 + g(3) * t990 - t718 * t822 + t782 * t804 - t881) * MDP(17) + t1049; (t609 * t892 + (-t829 * t750 - t522 + (-t544 + (-qJD(5) - qJD(6)) * t1006) * t797) * t849 + (-t750 * t1006 + (pkin(4) * t943 + qJD(6) * t829 - t545) * t797 - t906) * t855 + t1025) * MDP(38) + (-t612 * t812 + t1021) * MDP(24) + (-t613 * t812 + t1020) * MDP(23) + (-t980 * t803 + (-t759 * t850 + t803 * t943 - t889 * t891) * pkin(4) + t1023) * MDP(31) + (t918 * t803 + (t645 * t889 + t759 * t856 + t803 * t944) * pkin(4) + t1022) * MDP(30) + (t829 * t987 + (t544 * t855 - t545 * t849) * t797 + t609 * t1045 + (-t850 * t996 - (-t849 * t856 - t994) * t797 * qJD(5)) * pkin(4) + (-(-pkin(4) * t994 - t829 * t849) * t797 - t529) * qJD(6) + t1024) * MDP(37) + t1049; (-t554 * t803 + t1022) * MDP(30) + (-t553 * t803 + t1023) * MDP(31) + ((-t542 * t849 - t988) * t797 - t529 * qJD(6) + (-t1045 * t891 + t797 * t942 + t987) * pkin(5) + t1024) * MDP(37) + ((t543 * t797 - t522) * t849 + (-t542 * t797 - t906) * t855 + (t797 * t941 - t891 * t892 - t996) * pkin(5) + t1025) * MDP(38) + t1050; (t936 + t1031) * MDP(34) + (-t920 + t1030) * MDP(35) + (-t529 * t797 + t1024) * MDP(37) + (-t849 * t522 - t855 * t523 - t528 * t797 + t1025) * MDP(38) + (MDP(34) * t1001 + MDP(35) * t892 - MDP(37) * t529 - MDP(38) * t1002) * qJD(6) + t1051;];
tau  = t1;
