% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 09:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 09:34:33
% EndTime: 2019-05-08 09:34:46
% DurationCPUTime: 13.18s
% Computational Cost: add. (164897->347), mult. (342057->481), div. (0->0), fcn. (258026->12), ass. (0->275)
t2291 = cos(qJ(2));
t2323 = qJD(1) * t2291;
t2269 = -qJD(3) + t2323;
t2264 = -qJD(4) + t2269;
t2258 = -qJD(5) + t2264;
t2252 = -qJD(6) + t2258;
t2339 = qJD(6) - t2252;
t2338 = qJD(2) ^ 2;
t2284 = sin(qJ(3));
t2290 = cos(qJ(3));
t2285 = sin(qJ(2));
t2324 = qJD(1) * t2285;
t2246 = -t2290 * qJD(2) + t2284 * t2324;
t2247 = qJD(2) * t2284 + t2290 * t2324;
t2283 = sin(qJ(4));
t2289 = cos(qJ(4));
t2230 = t2289 * t2246 + t2247 * t2283;
t2231 = -t2246 * t2283 + t2247 * t2289;
t2282 = sin(qJ(5));
t2288 = cos(qJ(5));
t2203 = t2288 * t2230 + t2231 * t2282;
t2205 = -t2230 * t2282 + t2231 * t2288;
t2281 = sin(qJ(6));
t2287 = cos(qJ(6));
t2173 = t2287 * t2203 + t2205 * t2281;
t2337 = t2173 ^ 2;
t2175 = -t2203 * t2281 + t2205 * t2287;
t2336 = t2175 ^ 2;
t2335 = t2203 ^ 2;
t2334 = t2205 ^ 2;
t2333 = t2230 ^ 2;
t2332 = t2231 ^ 2;
t2331 = t2246 ^ 2;
t2330 = t2247 ^ 2;
t2329 = t2252 ^ 2;
t2328 = t2258 ^ 2;
t2327 = t2264 ^ 2;
t2326 = t2269 ^ 2;
t2325 = t2291 * g(3);
t2322 = t2173 * t2175;
t2321 = t2203 * t2205;
t2320 = t2203 * t2258;
t2319 = t2230 * t2231;
t2318 = t2230 * t2264;
t2317 = t2246 * t2247;
t2316 = t2246 * t2269;
t2315 = qJD(3) + t2269;
t2286 = sin(qJ(1));
t2292 = cos(qJ(1));
t2262 = t2286 * g(1) - t2292 * g(2);
t2293 = qJD(1) ^ 2;
t2243 = qJDD(1) * pkin(1) + t2293 * pkin(7) + t2262;
t2309 = qJD(2) * t2323;
t2310 = t2285 * qJDD(1);
t2250 = t2309 + t2310;
t2272 = qJD(2) * t2324;
t2274 = t2291 * qJDD(1);
t2251 = t2274 - 0.2e1 * t2272;
t2208 = (-t2250 - t2309) * pkin(8) - t2251 * pkin(2) - t2243;
t2263 = -g(1) * t2292 - g(2) * t2286;
t2244 = -pkin(1) * t2293 + qJDD(1) * pkin(7) + t2263;
t2238 = -g(3) * t2285 + t2291 * t2244;
t2248 = (-pkin(2) * t2291 - pkin(8) * t2285) * qJD(1);
t2218 = -pkin(2) * t2338 + qJDD(2) * pkin(8) + t2248 * t2323 + t2238;
t2188 = t2290 * t2208 - t2284 * t2218;
t2308 = t2274 - qJDD(3) - t2272;
t2223 = -t2308 - t2317;
t2302 = -t2284 * qJDD(2) - t2290 * t2250;
t2227 = -qJD(3) * t2246 - t2302;
t2157 = (-t2227 + t2316) * pkin(9) + t2223 * pkin(3) + t2188;
t2189 = t2284 * t2208 + t2290 * t2218;
t2239 = -pkin(3) * t2269 - pkin(9) * t2247;
t2304 = -t2290 * qJDD(2) + t2284 * t2250;
t2300 = -qJD(3) * t2247 - t2304;
t2159 = -pkin(3) * t2331 + t2300 * pkin(9) + t2269 * t2239 + t2189;
t2127 = t2289 * t2157 - t2283 * t2159;
t2294 = -t2289 * t2227 - t2283 * t2300;
t2187 = -t2230 * qJD(4) - t2294;
t2303 = -qJDD(4) + t2308;
t2195 = -t2303 - t2319;
t2113 = (-t2187 + t2318) * pkin(10) + t2195 * pkin(4) + t2127;
t2128 = t2283 * t2157 + t2289 * t2159;
t2219 = -pkin(4) * t2264 - pkin(10) * t2231;
t2305 = t2283 * t2227 - t2289 * t2300;
t2299 = -qJD(4) * t2231 - t2305;
t2117 = -pkin(4) * t2333 + t2299 * pkin(10) + t2264 * t2219 + t2128;
t2091 = t2282 * t2113 + t2288 * t2117;
t2314 = t2252 + qJD(6);
t2313 = t2258 + qJD(5);
t2312 = t2264 + qJD(4);
t2277 = t2285 ^ 2;
t2278 = t2291 ^ 2;
t2311 = t2277 + t2278;
t2090 = t2288 * t2113 - t2282 * t2117;
t2295 = -t2288 * t2187 - t2282 * t2299;
t2145 = -t2203 * qJD(5) - t2295;
t2306 = t2282 * t2187 - t2288 * t2299;
t2298 = qJD(5) * t2205 + t2306;
t2307 = -t2281 * t2145 - t2287 * t2298;
t2301 = -qJDD(5) + t2303;
t2297 = -qJDD(6) + t2301;
t2167 = -t2301 - t2321;
t2217 = t2325 - qJDD(2) * pkin(2) - t2338 * pkin(8) + (qJD(1) * t2248 + t2244) * t2285;
t2296 = -t2287 * t2145 + t2281 * t2298;
t2182 = -t2300 * pkin(3) - t2331 * pkin(9) + t2247 * t2239 + t2217;
t2133 = -t2299 * pkin(4) - t2333 * pkin(10) + t2231 * t2219 + t2182;
t2268 = t2291 * t2293 * t2285;
t2267 = -t2278 * t2293 - t2338;
t2266 = -t2277 * t2293 - t2338;
t2261 = -qJDD(2) + t2268;
t2260 = qJDD(2) + t2268;
t2257 = t2311 * t2293;
t2256 = -qJDD(1) * t2286 - t2292 * t2293;
t2255 = qJDD(1) * t2292 - t2286 * t2293;
t2254 = t2311 * qJDD(1);
t2249 = 0.2e1 * t2309 + t2310;
t2237 = -t2244 * t2285 - t2325;
t2236 = t2261 * t2291 - t2266 * t2285;
t2235 = -t2260 * t2285 + t2267 * t2291;
t2234 = t2261 * t2285 + t2266 * t2291;
t2233 = t2260 * t2291 + t2267 * t2285;
t2232 = -t2326 - t2330;
t2228 = -t2326 - t2331;
t2222 = t2308 - t2317;
t2221 = -t2330 - t2331;
t2215 = -t2327 - t2332;
t2214 = -t2237 * t2285 + t2238 * t2291;
t2213 = t2237 * t2291 + t2238 * t2285;
t2212 = t2315 * t2246 + t2302;
t2211 = t2227 + t2316;
t2210 = -t2315 * t2247 - t2304;
t2209 = (qJD(3) - t2269) * t2247 + t2304;
t2201 = t2222 * t2290 - t2232 * t2284;
t2200 = t2222 * t2284 + t2232 * t2290;
t2199 = -t2327 - t2333;
t2197 = -t2223 * t2284 + t2228 * t2290;
t2196 = t2223 * t2290 + t2228 * t2284;
t2194 = t2303 - t2319;
t2192 = -pkin(5) * t2258 - pkin(11) * t2205;
t2191 = -t2328 - t2334;
t2190 = -t2332 - t2333;
t2184 = t2210 * t2290 - t2212 * t2284;
t2183 = t2210 * t2284 + t2212 * t2290;
t2181 = t2201 * t2291 + t2211 * t2285;
t2180 = t2201 * t2285 - t2211 * t2291;
t2179 = t2194 * t2289 - t2215 * t2283;
t2178 = t2194 * t2283 + t2215 * t2289;
t2177 = t2197 * t2291 + t2209 * t2285;
t2176 = t2197 * t2285 - t2209 * t2291;
t2172 = t2312 * t2230 + t2294;
t2171 = t2187 + t2318;
t2170 = -t2312 * t2231 - t2305;
t2169 = (qJD(4) - t2264) * t2231 + t2305;
t2168 = -t2328 - t2335;
t2166 = t2301 - t2321;
t2165 = -t2195 * t2283 + t2199 * t2289;
t2164 = t2195 * t2289 + t2199 * t2283;
t2162 = t2184 * t2291 + t2221 * t2285;
t2161 = t2184 * t2285 - t2221 * t2291;
t2160 = -t2329 - t2336;
t2154 = -t2334 - t2335;
t2153 = -t2188 * t2284 + t2189 * t2290;
t2152 = t2188 * t2290 + t2189 * t2284;
t2151 = t2166 * t2288 - t2191 * t2282;
t2150 = t2166 * t2282 + t2191 * t2288;
t2149 = t2153 * t2291 + t2217 * t2285;
t2148 = t2153 * t2285 - t2217 * t2291;
t2147 = -t2178 * t2284 + t2179 * t2290;
t2146 = t2178 * t2290 + t2179 * t2284;
t2142 = t2170 * t2289 - t2172 * t2283;
t2141 = t2170 * t2283 + t2172 * t2289;
t2140 = -t2329 - t2337;
t2139 = -t2297 - t2322;
t2138 = t2297 - t2322;
t2137 = -t2167 * t2282 + t2168 * t2288;
t2136 = t2167 * t2288 + t2168 * t2282;
t2135 = -t2164 * t2284 + t2165 * t2290;
t2134 = t2164 * t2290 + t2165 * t2284;
t2132 = t2313 * t2203 + t2295;
t2131 = t2145 + t2320;
t2130 = -t2313 * t2205 - t2306;
t2129 = (qJD(5) - t2258) * t2205 + t2306;
t2126 = t2147 * t2291 + t2171 * t2285;
t2125 = t2147 * t2285 - t2171 * t2291;
t2124 = -t2336 - t2337;
t2123 = t2135 * t2291 + t2169 * t2285;
t2122 = t2135 * t2285 - t2169 * t2291;
t2121 = t2138 * t2287 - t2160 * t2281;
t2120 = t2138 * t2281 + t2160 * t2287;
t2119 = -t2150 * t2283 + t2151 * t2289;
t2118 = t2150 * t2289 + t2151 * t2283;
t2115 = -t2141 * t2284 + t2142 * t2290;
t2114 = t2141 * t2290 + t2142 * t2284;
t2110 = -t2139 * t2281 + t2140 * t2287;
t2109 = t2139 * t2287 + t2140 * t2281;
t2108 = -t2136 * t2283 + t2137 * t2289;
t2107 = t2136 * t2289 + t2137 * t2283;
t2106 = t2115 * t2291 + t2190 * t2285;
t2105 = t2115 * t2285 - t2190 * t2291;
t2104 = t2130 * t2288 - t2132 * t2282;
t2103 = t2130 * t2282 + t2132 * t2288;
t2102 = -t2127 * t2283 + t2128 * t2289;
t2101 = t2127 * t2289 + t2128 * t2283;
t2100 = t2298 * pkin(5) - pkin(11) * t2335 + t2205 * t2192 + t2133;
t2099 = t2314 * t2173 + t2296;
t2098 = -t2173 * t2339 - t2296;
t2097 = -t2314 * t2175 + t2307;
t2096 = t2175 * t2339 - t2307;
t2095 = -t2120 * t2282 + t2121 * t2288;
t2094 = t2120 * t2288 + t2121 * t2282;
t2093 = -t2118 * t2284 + t2119 * t2290;
t2092 = t2118 * t2290 + t2119 * t2284;
t2089 = -t2109 * t2282 + t2110 * t2288;
t2088 = t2109 * t2288 + t2110 * t2282;
t2087 = -t2107 * t2284 + t2108 * t2290;
t2086 = t2107 * t2290 + t2108 * t2284;
t2085 = t2093 * t2291 + t2131 * t2285;
t2084 = t2093 * t2285 - t2131 * t2291;
t2083 = -t2103 * t2283 + t2104 * t2289;
t2082 = t2103 * t2289 + t2104 * t2283;
t2081 = -t2101 * t2284 + t2102 * t2290;
t2080 = t2101 * t2290 + t2102 * t2284;
t2079 = t2087 * t2291 + t2129 * t2285;
t2078 = t2087 * t2285 - t2129 * t2291;
t2077 = -pkin(5) * t2335 - t2298 * pkin(11) + t2258 * t2192 + t2091;
t2076 = t2081 * t2291 + t2182 * t2285;
t2075 = t2081 * t2285 - t2182 * t2291;
t2074 = (-t2145 + t2320) * pkin(11) + t2167 * pkin(5) + t2090;
t2073 = t2097 * t2287 - t2099 * t2281;
t2072 = t2097 * t2281 + t2099 * t2287;
t2071 = -t2094 * t2283 + t2095 * t2289;
t2070 = t2094 * t2289 + t2095 * t2283;
t2069 = -t2090 * t2282 + t2091 * t2288;
t2068 = t2090 * t2288 + t2091 * t2282;
t2067 = -t2088 * t2283 + t2089 * t2289;
t2066 = t2088 * t2289 + t2089 * t2283;
t2065 = -t2082 * t2284 + t2083 * t2290;
t2064 = t2082 * t2290 + t2083 * t2284;
t2063 = t2065 * t2291 + t2154 * t2285;
t2062 = t2065 * t2285 - t2154 * t2291;
t2061 = t2074 * t2281 + t2077 * t2287;
t2060 = t2074 * t2287 - t2077 * t2281;
t2059 = -t2072 * t2282 + t2073 * t2288;
t2058 = t2072 * t2288 + t2073 * t2282;
t2057 = -t2070 * t2284 + t2071 * t2290;
t2056 = t2070 * t2290 + t2071 * t2284;
t2055 = t2057 * t2291 + t2098 * t2285;
t2054 = t2057 * t2285 - t2098 * t2291;
t2053 = -t2068 * t2283 + t2069 * t2289;
t2052 = t2068 * t2289 + t2069 * t2283;
t2051 = -t2066 * t2284 + t2067 * t2290;
t2050 = t2066 * t2290 + t2067 * t2284;
t2049 = t2051 * t2291 + t2096 * t2285;
t2048 = t2051 * t2285 - t2096 * t2291;
t2047 = -t2060 * t2281 + t2061 * t2287;
t2046 = t2060 * t2287 + t2061 * t2281;
t2045 = -t2058 * t2283 + t2059 * t2289;
t2044 = t2058 * t2289 + t2059 * t2283;
t2043 = -t2052 * t2284 + t2053 * t2290;
t2042 = t2052 * t2290 + t2053 * t2284;
t2041 = t2043 * t2291 + t2133 * t2285;
t2040 = t2043 * t2285 - t2133 * t2291;
t2039 = -t2046 * t2282 + t2047 * t2288;
t2038 = t2046 * t2288 + t2047 * t2282;
t2037 = -t2044 * t2284 + t2045 * t2290;
t2036 = t2044 * t2290 + t2045 * t2284;
t2035 = t2037 * t2291 + t2124 * t2285;
t2034 = t2037 * t2285 - t2124 * t2291;
t2033 = -t2038 * t2283 + t2039 * t2289;
t2032 = t2038 * t2289 + t2039 * t2283;
t2031 = -t2032 * t2284 + t2033 * t2290;
t2030 = t2032 * t2290 + t2033 * t2284;
t2029 = t2031 * t2291 + t2100 * t2285;
t2028 = t2031 * t2285 - t2100 * t2291;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2256, -t2255, 0, -t2262 * t2286 + t2263 * t2292, 0, 0, 0, 0, 0, 0, t2235 * t2292 - t2251 * t2286, t2236 * t2292 + t2249 * t2286, t2254 * t2292 - t2257 * t2286, t2214 * t2292 - t2243 * t2286, 0, 0, 0, 0, 0, 0, t2177 * t2292 + t2196 * t2286, t2181 * t2292 + t2200 * t2286, t2162 * t2292 + t2183 * t2286, t2149 * t2292 + t2152 * t2286, 0, 0, 0, 0, 0, 0, t2123 * t2292 + t2134 * t2286, t2126 * t2292 + t2146 * t2286, t2106 * t2292 + t2114 * t2286, t2076 * t2292 + t2080 * t2286, 0, 0, 0, 0, 0, 0, t2079 * t2292 + t2086 * t2286, t2085 * t2292 + t2092 * t2286, t2063 * t2292 + t2064 * t2286, t2041 * t2292 + t2042 * t2286, 0, 0, 0, 0, 0, 0, t2049 * t2292 + t2050 * t2286, t2055 * t2292 + t2056 * t2286, t2035 * t2292 + t2036 * t2286, t2029 * t2292 + t2030 * t2286; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2255, t2256, 0, t2262 * t2292 + t2263 * t2286, 0, 0, 0, 0, 0, 0, t2235 * t2286 + t2251 * t2292, t2236 * t2286 - t2249 * t2292, t2254 * t2286 + t2257 * t2292, t2214 * t2286 + t2243 * t2292, 0, 0, 0, 0, 0, 0, t2177 * t2286 - t2196 * t2292, t2181 * t2286 - t2200 * t2292, t2162 * t2286 - t2183 * t2292, t2149 * t2286 - t2152 * t2292, 0, 0, 0, 0, 0, 0, t2123 * t2286 - t2134 * t2292, t2126 * t2286 - t2146 * t2292, t2106 * t2286 - t2114 * t2292, t2076 * t2286 - t2080 * t2292, 0, 0, 0, 0, 0, 0, t2079 * t2286 - t2086 * t2292, t2085 * t2286 - t2092 * t2292, t2063 * t2286 - t2064 * t2292, t2041 * t2286 - t2042 * t2292, 0, 0, 0, 0, 0, 0, t2049 * t2286 - t2050 * t2292, t2055 * t2286 - t2056 * t2292, t2035 * t2286 - t2036 * t2292, t2029 * t2286 - t2030 * t2292; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2233, t2234, 0, t2213, 0, 0, 0, 0, 0, 0, t2176, t2180, t2161, t2148, 0, 0, 0, 0, 0, 0, t2122, t2125, t2105, t2075, 0, 0, 0, 0, 0, 0, t2078, t2084, t2062, t2040, 0, 0, 0, 0, 0, 0, t2048, t2054, t2034, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2293, -qJDD(1), 0, t2263, 0, 0, 0, 0, 0, 0, t2235, t2236, t2254, t2214, 0, 0, 0, 0, 0, 0, t2177, t2181, t2162, t2149, 0, 0, 0, 0, 0, 0, t2123, t2126, t2106, t2076, 0, 0, 0, 0, 0, 0, t2079, t2085, t2063, t2041, 0, 0, 0, 0, 0, 0, t2049, t2055, t2035, t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2293, 0, t2262, 0, 0, 0, 0, 0, 0, t2251, -t2249, t2257, t2243, 0, 0, 0, 0, 0, 0, -t2196, -t2200, -t2183, -t2152, 0, 0, 0, 0, 0, 0, -t2134, -t2146, -t2114, -t2080, 0, 0, 0, 0, 0, 0, -t2086, -t2092, -t2064, -t2042, 0, 0, 0, 0, 0, 0, -t2050, -t2056, -t2036, -t2030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2233, t2234, 0, t2213, 0, 0, 0, 0, 0, 0, t2176, t2180, t2161, t2148, 0, 0, 0, 0, 0, 0, t2122, t2125, t2105, t2075, 0, 0, 0, 0, 0, 0, t2078, t2084, t2062, t2040, 0, 0, 0, 0, 0, 0, t2048, t2054, t2034, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, t2261, t2274, t2238, 0, 0, 0, 0, 0, 0, t2197, t2201, t2184, t2153, 0, 0, 0, 0, 0, 0, t2135, t2147, t2115, t2081, 0, 0, 0, 0, 0, 0, t2087, t2093, t2065, t2043, 0, 0, 0, 0, 0, 0, t2051, t2057, t2037, t2031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2260, t2266, -t2310, t2237, 0, 0, 0, 0, 0, 0, -t2209, -t2211, -t2221, -t2217, 0, 0, 0, 0, 0, 0, -t2169, -t2171, -t2190, -t2182, 0, 0, 0, 0, 0, 0, -t2129, -t2131, -t2154, -t2133, 0, 0, 0, 0, 0, 0, -t2096, -t2098, -t2124, -t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2251, t2249, -t2257, -t2243, 0, 0, 0, 0, 0, 0, t2196, t2200, t2183, t2152, 0, 0, 0, 0, 0, 0, t2134, t2146, t2114, t2080, 0, 0, 0, 0, 0, 0, t2086, t2092, t2064, t2042, 0, 0, 0, 0, 0, 0, t2050, t2056, t2036, t2030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2228, t2222, t2210, t2189, 0, 0, 0, 0, 0, 0, t2165, t2179, t2142, t2102, 0, 0, 0, 0, 0, 0, t2108, t2119, t2083, t2053, 0, 0, 0, 0, 0, 0, t2067, t2071, t2045, t2033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2223, t2232, t2212, t2188, 0, 0, 0, 0, 0, 0, t2164, t2178, t2141, t2101, 0, 0, 0, 0, 0, 0, t2107, t2118, t2082, t2052, 0, 0, 0, 0, 0, 0, t2066, t2070, t2044, t2032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, t2211, t2221, t2217, 0, 0, 0, 0, 0, 0, t2169, t2171, t2190, t2182, 0, 0, 0, 0, 0, 0, t2129, t2131, t2154, t2133, 0, 0, 0, 0, 0, 0, t2096, t2098, t2124, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2199, t2194, t2170, t2128, 0, 0, 0, 0, 0, 0, t2137, t2151, t2104, t2069, 0, 0, 0, 0, 0, 0, t2089, t2095, t2059, t2039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2195, t2215, t2172, t2127, 0, 0, 0, 0, 0, 0, t2136, t2150, t2103, t2068, 0, 0, 0, 0, 0, 0, t2088, t2094, t2058, t2038; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2169, t2171, t2190, t2182, 0, 0, 0, 0, 0, 0, t2129, t2131, t2154, t2133, 0, 0, 0, 0, 0, 0, t2096, t2098, t2124, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2168, t2166, t2130, t2091, 0, 0, 0, 0, 0, 0, t2110, t2121, t2073, t2047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2167, t2191, t2132, t2090, 0, 0, 0, 0, 0, 0, t2109, t2120, t2072, t2046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2129, t2131, t2154, t2133, 0, 0, 0, 0, 0, 0, t2096, t2098, t2124, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2140, t2138, t2097, t2061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2139, t2160, t2099, t2060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2096, t2098, t2124, t2100;];
f_new_reg  = t1;
