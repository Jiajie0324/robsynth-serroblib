% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tau_reg [6x38]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRR4_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR4_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR4_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR4_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR4_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR4_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:51:31
% EndTime: 2019-03-10 03:52:01
% DurationCPUTime: 14.10s
% Computational Cost: add. (18166->667), mult. (41178->896), div. (0->0), fcn. (31480->18), ass. (0->316)
t329 = sin(qJ(3));
t330 = sin(qJ(2));
t432 = qJD(1) * t330;
t410 = t329 * t432;
t335 = cos(qJ(3));
t416 = t335 * qJD(2);
t259 = t410 - t416;
t428 = qJD(2) * t329;
t261 = t335 * t432 + t428;
t328 = sin(qJ(4));
t334 = cos(qJ(4));
t188 = t334 * t259 + t261 * t328;
t327 = sin(qJ(5));
t333 = cos(qJ(5));
t367 = t259 * t328 - t334 * t261;
t125 = t333 * t188 - t327 * t367;
t326 = sin(qJ(6));
t332 = cos(qJ(6));
t369 = t188 * t327 + t333 * t367;
t370 = t125 * t326 + t332 * t369;
t56 = t332 * t125 - t326 * t369;
t506 = t370 * t56;
t336 = cos(qJ(2));
t449 = t335 * t336;
t366 = pkin(3) * t330 - pkin(9) * t449;
t476 = pkin(8) + pkin(9);
t411 = qJD(3) * t476;
t376 = pkin(2) * t330 - pkin(8) * t336;
t267 = t376 * qJD(1);
t435 = pkin(7) * t410 + t335 * t267;
t520 = qJD(1) * t366 + t335 * t411 + t435;
t245 = t329 * t267;
t451 = t330 * t335;
t452 = t329 * t336;
t519 = t245 + (-pkin(7) * t451 - pkin(9) * t452) * qJD(1) + t329 * t411;
t500 = t370 ^ 2 - t56 ^ 2;
t431 = qJD(1) * t336;
t299 = -qJD(3) + t431;
t289 = -qJD(4) + t299;
t280 = -qJD(5) + t289;
t274 = -qJD(6) + t280;
t415 = qJD(1) * qJD(2);
t401 = t336 * t415;
t414 = t330 * qJDD(1);
t424 = qJD(3) * t330;
t501 = -qJD(1) * t424 + qJDD(2);
t173 = qJD(3) * t416 + (t401 + t414) * t335 + t501 * t329;
t174 = t329 * (qJD(2) * (qJD(3) + t431) + t414) - t501 * t335;
t343 = qJD(4) * t367 - t173 * t328 - t334 * t174;
t419 = qJD(5) * t333;
t420 = qJD(5) * t327;
t421 = qJD(4) * t334;
t422 = qJD(4) * t328;
t87 = t334 * t173 - t328 * t174 - t259 * t421 - t261 * t422;
t31 = -t188 * t419 + t327 * t343 + t333 * t87 + t367 * t420;
t344 = qJD(5) * t369 - t327 * t87 + t333 * t343;
t417 = qJD(6) * t332;
t418 = qJD(6) * t326;
t6 = -t125 * t417 + t332 * t31 + t326 * t344 + t369 * t418;
t497 = -t274 * t56 + t6;
t325 = qJ(3) + qJ(4);
t321 = qJ(5) + t325;
t310 = qJ(6) + t321;
t296 = sin(t310);
t297 = cos(t310);
t337 = cos(qJ(1));
t331 = sin(qJ(1));
t450 = t331 * t336;
t207 = t296 * t337 - t297 * t450;
t448 = t336 * t337;
t209 = t296 * t331 + t297 * t448;
t509 = pkin(10) * t367;
t275 = -pkin(2) * t336 - pkin(8) * t330 - pkin(1);
t252 = t275 * qJD(1);
t312 = pkin(7) * t431;
t282 = qJD(2) * pkin(8) + t312;
t198 = t335 * t252 - t282 * t329;
t155 = -pkin(9) * t261 + t198;
t144 = -pkin(3) * t299 + t155;
t199 = t252 * t329 + t282 * t335;
t156 = -pkin(9) * t259 + t199;
t149 = t328 * t156;
t92 = t334 * t144 - t149;
t69 = t92 + t509;
t62 = -pkin(4) * t289 + t69;
t510 = pkin(10) * t188;
t151 = t334 * t156;
t93 = t144 * t328 + t151;
t70 = t93 - t510;
t66 = t333 * t70;
t34 = t327 * t62 + t66;
t508 = pkin(11) * t125;
t23 = t34 - t508;
t21 = t23 * t418;
t474 = g(3) * t330;
t281 = -qJD(2) * pkin(2) + pkin(7) * t432;
t211 = pkin(3) * t259 + t281;
t141 = pkin(4) * t188 + t211;
t78 = pkin(5) * t125 + t141;
t496 = g(1) * t209 - g(2) * t207 + t297 * t474 + t56 * t78 + t21;
t206 = t296 * t450 + t297 * t337;
t208 = -t296 * t448 + t297 * t331;
t317 = t336 * qJDD(1);
t481 = -t330 * t415 + t317;
t256 = qJDD(3) - t481;
t251 = qJDD(4) + t256;
t236 = qJDD(5) + t251;
t270 = t376 * qJD(2);
t204 = qJD(1) * t270 + qJDD(1) * t275;
t193 = t335 * t204;
t233 = pkin(7) * t481 + qJDD(2) * pkin(8);
t72 = pkin(3) * t256 - pkin(9) * t173 - qJD(3) * t199 - t329 * t233 + t193;
t423 = qJD(3) * t335;
t425 = qJD(3) * t329;
t358 = t329 * t204 + t335 * t233 + t252 * t423 - t282 * t425;
t80 = -pkin(9) * t174 + t358;
t392 = -t328 * t80 + t334 * t72;
t346 = -qJD(4) * t93 + t392;
t12 = pkin(4) * t251 - pkin(10) * t87 + t346;
t383 = -t144 * t421 + t156 * t422 - t328 * t72 - t334 * t80;
t14 = pkin(10) * t343 - t383;
t398 = t333 * t12 - t327 * t14;
t347 = -qJD(5) * t34 + t398;
t2 = pkin(5) * t236 - pkin(11) * t31 + t347;
t391 = -t327 * t12 - t333 * t14 - t62 * t419 + t70 * t420;
t3 = pkin(11) * t344 - t391;
t412 = t332 * t2 - t326 * t3;
t514 = -g(1) * t208 + g(2) * t206 + t296 * t474 + t78 * t370 + t412;
t345 = qJD(6) * t370 - t31 * t326 + t332 * t344;
t488 = t274 * t370 + t345;
t262 = t328 * t329 - t334 * t335;
t359 = t262 * t336;
t478 = qJD(3) + qJD(4);
t518 = -qJD(1) * t359 + t478 * t262;
t263 = t328 * t335 + t329 * t334;
t439 = (-t431 + t478) * t263;
t517 = pkin(5) * t369;
t507 = pkin(11) * t369;
t504 = t369 * t125;
t516 = t520 * t334;
t283 = t476 * t329;
t284 = t476 * t335;
t515 = -t283 * t421 - t284 * t422 - t328 * t520 - t334 * t519;
t499 = -t125 ^ 2 + t369 ^ 2;
t495 = -t125 * t280 + t31;
t304 = sin(t321);
t305 = cos(t321);
t214 = t304 * t337 - t305 * t450;
t216 = t304 * t331 + t305 * t448;
t492 = g(1) * t216 - g(2) * t214 + t125 * t141 + t305 * t474 + t391;
t213 = t304 * t450 + t305 * t337;
t215 = -t304 * t448 + t305 * t331;
t491 = -g(1) * t215 + g(2) * t213 + t141 * t369 + t304 * t474 + t347;
t487 = t280 * t369 + t344;
t436 = -t328 * t283 + t334 * t284;
t513 = -pkin(4) * t432 + t518 * pkin(10) - qJD(4) * t436 + t328 * t519 - t516;
t503 = -pkin(10) * t439 + t515;
t309 = pkin(7) * t414;
t234 = -qJDD(2) * pkin(2) + pkin(7) * t401 + t309;
t375 = g(1) * t337 + g(2) * t331;
t473 = g(3) * t336;
t352 = t330 * t375 - t473;
t512 = pkin(8) * qJD(3) * t299 - t234 + t352;
t511 = pkin(4) * t367;
t194 = t333 * t262 + t263 * t327;
t463 = -qJD(5) * t194 - t327 * t439 - t333 * t518;
t505 = t367 * t188;
t195 = -t262 * t327 + t263 * t333;
t447 = qJD(5) * t195 - t327 * t518 + t333 * t439;
t377 = -t312 + (-t329 * t431 + t425) * pkin(3);
t426 = qJD(2) * t336;
t408 = t329 * t426;
t502 = t330 * t423 + t408;
t498 = -t188 ^ 2 + t367 ^ 2;
t494 = -t188 * t289 + t87;
t64 = t327 * t70;
t33 = t333 * t62 - t64;
t22 = t33 + t507;
t18 = -pkin(5) * t280 + t22;
t467 = t332 * t23;
t9 = t326 * t18 + t467;
t493 = -qJD(6) * t9 + t514;
t319 = sin(t325);
t320 = cos(t325);
t224 = t319 * t337 - t320 * t450;
t226 = t319 * t331 + t320 * t448;
t490 = g(1) * t226 - g(2) * t224 + t188 * t211 + t320 * t474 + t383;
t223 = t319 * t450 + t320 * t337;
t225 = -t319 * t448 + t320 * t331;
t489 = -g(1) * t225 + g(2) * t223 + t211 * t367 + t319 * t474 + t346;
t486 = t289 * t367 + t343;
t485 = t513 * t333;
t229 = t263 * t330;
t230 = t262 * t330;
t258 = t335 * t275;
t475 = pkin(7) * t329;
t197 = -pkin(9) * t451 + t258 + (-pkin(3) - t475) * t336;
t301 = pkin(7) * t449;
t434 = t329 * t275 + t301;
t453 = t329 * t330;
t205 = -pkin(9) * t453 + t434;
t385 = t334 * t197 - t205 * t328;
t112 = -pkin(4) * t336 + pkin(10) * t230 + t385;
t441 = t328 * t197 + t334 * t205;
t115 = -pkin(10) * t229 + t441;
t446 = t327 * t112 + t333 * t115;
t384 = -t334 * t283 - t284 * t328;
t168 = -pkin(10) * t263 + t384;
t169 = -pkin(10) * t262 + t436;
t444 = t327 * t168 + t333 * t169;
t443 = pkin(4) * t439 + t377;
t307 = pkin(3) * t334 + pkin(4);
t456 = t327 * t328;
t388 = -t155 * t328 - t151;
t76 = t388 + t510;
t445 = t334 * t155 - t149;
t77 = t445 + t509;
t484 = t307 * t419 + (-t328 * t420 + (t333 * t334 - t456) * qJD(4)) * pkin(3) - t327 * t76 - t333 * t77;
t454 = t328 * t333;
t483 = t307 * t420 - (-t328 * t419 + (-t327 * t334 - t454) * qJD(4)) * pkin(3) - t327 * t77 + t333 * t76;
t482 = t168 * t419 - t169 * t420 + t327 * t513 + t503 * t333;
t480 = -t329 * t424 + t336 * t416;
t130 = t332 * t194 + t195 * t326;
t472 = -qJD(6) * t130 - t326 * t447 + t332 * t463;
t131 = -t194 * t326 + t195 * t332;
t471 = qJD(6) * t131 + t326 * t463 + t332 * t447;
t470 = t333 * t69 - t64;
t466 = t484 - t507;
t465 = t483 + t508;
t464 = pkin(5) * t447 + t443;
t462 = t173 * t329;
t228 = qJDD(6) + t236;
t461 = t228 * t327;
t460 = t259 * t299;
t459 = t261 * t299;
t458 = t261 * t335;
t306 = pkin(4) * t333 + pkin(5);
t457 = t306 * t228;
t455 = t327 * t332;
t438 = t329 * t270 + t275 * t423;
t427 = qJD(2) * t330;
t437 = t335 * t270 + t427 * t475;
t271 = pkin(3) * t453 + t330 * pkin(7);
t323 = t330 ^ 2;
t433 = -t336 ^ 2 + t323;
t430 = qJD(2) * t259;
t429 = qJD(2) * t261;
t212 = pkin(3) * t502 + pkin(7) * t426;
t308 = -pkin(3) * t335 - pkin(2);
t409 = t299 * t416;
t406 = t299 * t425;
t403 = t299 * t423;
t399 = qJD(6) * t18 + t3;
t138 = -qJD(2) * t359 - t229 * t478;
t134 = t366 * qJD(2) + (-t301 + (pkin(9) * t330 - t275) * t329) * qJD(3) + t437;
t137 = -t502 * pkin(9) + (-t330 * t416 - t336 * t425) * pkin(7) + t438;
t389 = t334 * t134 - t137 * t328;
t39 = pkin(4) * t427 - pkin(10) * t138 - qJD(4) * t441 + t389;
t139 = -t422 * t453 + (t451 * t478 + t408) * t334 + t480 * t328;
t357 = t328 * t134 + t334 * t137 + t197 * t421 - t205 * t422;
t41 = -pkin(10) * t139 + t357;
t396 = -t327 * t41 + t333 * t39;
t395 = -t327 * t69 - t66;
t390 = t333 * t112 - t115 * t327;
t387 = t333 * t168 - t169 * t327;
t382 = -qJD(3) * t252 - t233;
t380 = -pkin(3) * t456 + t333 * t307;
t200 = pkin(4) * t229 + t271;
t82 = -pkin(11) * t195 + t387;
t379 = -pkin(11) * t447 + qJD(6) * t82 + t482;
t83 = -pkin(11) * t194 + t444;
t378 = pkin(5) * t432 + pkin(11) * t463 + t444 * qJD(5) + qJD(6) * t83 + t327 * t503 - t485;
t148 = pkin(3) * t261 - t511;
t374 = g(1) * t331 - g(2) * t337;
t373 = t282 * t423 - t193;
t372 = -pkin(8) * t256 + qJD(3) * t281;
t158 = t333 * t229 - t230 * t327;
t159 = -t229 * t327 - t230 * t333;
t108 = t332 * t158 + t159 * t326;
t109 = -t158 * t326 + t159 * t332;
t220 = pkin(4) * t262 + t308;
t116 = pkin(4) * t139 + t212;
t364 = -0.2e1 * pkin(1) * t415 - pkin(7) * qJDD(2);
t363 = t329 * t256 - t403;
t362 = t256 * t335 + t406;
t360 = t112 * t419 - t115 * t420 + t327 * t39 + t333 * t41;
t339 = qJD(1) ^ 2;
t354 = pkin(1) * t339 + t375;
t143 = pkin(3) * t174 + t234;
t50 = -pkin(4) * t343 + t143;
t338 = qJD(2) ^ 2;
t348 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t338 + t374;
t243 = t329 * t331 + t335 * t448;
t242 = -t329 * t448 + t331 * t335;
t241 = t329 * t337 - t331 * t449;
t240 = t329 * t450 + t335 * t337;
t235 = pkin(3) * t454 + t307 * t327;
t231 = pkin(5) + t380;
t145 = pkin(5) * t194 + t220;
t122 = pkin(5) * t158 + t200;
t89 = -t511 - t517;
t81 = t148 - t517;
t49 = qJD(5) * t159 + t138 * t327 + t333 * t139;
t48 = -qJD(5) * t158 + t138 * t333 - t139 * t327;
t46 = -pkin(11) * t158 + t446;
t45 = -pkin(5) * t336 - pkin(11) * t159 + t390;
t44 = pkin(5) * t49 + t116;
t25 = t470 + t507;
t24 = t395 + t508;
t17 = qJD(6) * t109 + t326 * t48 + t332 * t49;
t16 = -qJD(6) * t108 - t326 * t49 + t332 * t48;
t15 = -pkin(5) * t344 + t50;
t8 = t332 * t18 - t23 * t326;
t5 = -pkin(11) * t49 + t360;
t4 = pkin(5) * t427 - pkin(11) * t48 - qJD(5) * t446 + t396;
t1 = [qJDD(1), t374, t375, qJDD(1) * t323 + 0.2e1 * t330 * t401, 0.2e1 * t317 * t330 - 0.2e1 * t415 * t433, qJDD(2) * t330 + t336 * t338, qJDD(2) * t336 - t330 * t338, 0, t330 * t364 + t336 * t348, -t330 * t348 + t336 * t364, t173 * t451 + t261 * t480 (-t259 * t335 - t261 * t329) * t426 + (-t462 - t174 * t335 + (t259 * t329 - t458) * qJD(3)) * t330 (-t173 - t409) * t336 + (t362 + t429) * t330 (t299 * t428 + t174) * t336 + (-t363 - t430) * t330, -t256 * t336 - t299 * t427 -(-t275 * t425 + t437) * t299 + t258 * t256 - g(1) * t241 - g(2) * t243 + ((t403 + t430) * pkin(7) + (-pkin(7) * t256 + qJD(2) * t281 - t382) * t329 + t373) * t336 + (pkin(7) * t174 + qJD(2) * t198 + t234 * t329 + t281 * t423) * t330, t438 * t299 - t434 * t256 - g(1) * t240 - g(2) * t242 + (t281 * t416 + (-t406 + t429) * pkin(7) + t358) * t336 + (-t281 * t425 - t199 * qJD(2) + t234 * t335 + (t173 - t409) * pkin(7)) * t330, -t138 * t367 - t230 * t87, -t138 * t188 + t139 * t367 - t229 * t87 - t230 * t343, -t138 * t289 - t230 * t251 - t336 * t87 - t367 * t427, t139 * t289 - t188 * t427 - t229 * t251 - t336 * t343, -t251 * t336 - t289 * t427, -t389 * t289 + t385 * t251 - t392 * t336 + t92 * t427 + t212 * t188 - t271 * t343 + t143 * t229 + t211 * t139 - g(1) * t224 - g(2) * t226 + (t289 * t441 + t336 * t93) * qJD(4), -g(1) * t223 - g(2) * t225 + t211 * t138 - t143 * t230 - t212 * t367 - t251 * t441 + t271 * t87 + t289 * t357 - t336 * t383 - t427 * t93, t159 * t31 - t369 * t48, -t125 * t48 - t158 * t31 + t159 * t344 + t369 * t49, t159 * t236 - t280 * t48 - t31 * t336 - t369 * t427, -t125 * t427 - t158 * t236 + t280 * t49 - t336 * t344, -t236 * t336 - t280 * t427, -t396 * t280 + t390 * t236 - t398 * t336 + t33 * t427 + t116 * t125 - t200 * t344 + t50 * t158 + t141 * t49 - g(1) * t214 - g(2) * t216 + (t280 * t446 + t336 * t34) * qJD(5), -g(1) * t213 - g(2) * t215 - t116 * t369 + t141 * t48 + t50 * t159 + t200 * t31 - t236 * t446 + t280 * t360 - t336 * t391 - t34 * t427, t109 * t6 - t16 * t370, -t108 * t6 + t109 * t345 - t16 * t56 + t17 * t370, t109 * t228 - t16 * t274 - t336 * t6 - t370 * t427, -t108 * t228 + t17 * t274 - t336 * t345 - t427 * t56, -t228 * t336 - t274 * t427 -(-t326 * t5 + t332 * t4) * t274 + (-t326 * t46 + t332 * t45) * t228 - t412 * t336 + t8 * t427 + t44 * t56 - t122 * t345 + t15 * t108 + t78 * t17 - g(1) * t207 - g(2) * t209 + (-(-t326 * t45 - t332 * t46) * t274 + t9 * t336) * qJD(6), -t9 * t427 - g(1) * t206 - g(2) * t208 + t15 * t109 + t122 * t6 + t78 * t16 - t21 * t336 - t44 * t370 + ((-qJD(6) * t46 + t4) * t274 - t45 * t228 + t2 * t336) * t326 + ((qJD(6) * t45 + t5) * t274 - t46 * t228 + t399 * t336) * t332; 0, 0, 0, -t330 * t339 * t336, t433 * t339, t414, t317, qJDD(2), t330 * t354 - t309 - t473, t474 + (-pkin(7) * qJDD(1) + t354) * t336, -t299 * t458 + t462 (t173 + t460) * t335 + (-t174 + t459) * t329 (-t261 * t330 + t299 * t449) * qJD(1) + t363 (t259 * t330 - t299 * t452) * qJD(1) + t362, t299 * t432, -pkin(2) * t174 + t435 * t299 + t372 * t329 + (-t198 * t330 + (-pkin(7) * t259 - t281 * t329) * t336) * qJD(1) + t512 * t335, -pkin(2) * t173 - t245 * t299 + t372 * t335 + (-t281 * t449 + t199 * t330 + (-t261 * t336 + t299 * t451) * pkin(7)) * qJD(1) - t512 * t329, t263 * t87 + t367 * t518, t188 * t518 - t262 * t87 + t263 * t343 + t367 * t439, t251 * t263 + t289 * t518 + t367 * t432, t188 * t432 - t251 * t262 + t289 * t439, t289 * t432, t384 * t251 - t308 * t343 + t143 * t262 - t92 * t432 + (t284 * t421 + (-qJD(4) * t283 - t519) * t328 + t516) * t289 + t439 * t211 + t377 * t188 + t352 * t320, t143 * t263 - t211 * t518 - t436 * t251 + t289 * t515 + t308 * t87 - t352 * t319 - t377 * t367 + t93 * t432, t195 * t31 - t369 * t463, -t125 * t463 - t194 * t31 + t195 * t344 + t369 * t447, t195 * t236 - t280 * t463 + t369 * t432, t125 * t432 - t194 * t236 + t280 * t447, t280 * t432, t387 * t236 - t220 * t344 + t50 * t194 - t33 * t432 + (t169 * t419 + (qJD(5) * t168 + t503) * t327 - t485) * t280 + t447 * t141 + t443 * t125 + t352 * t305, t463 * t141 + t50 * t195 + t220 * t31 - t444 * t236 + t280 * t482 - t304 * t352 + t34 * t432 - t369 * t443, t131 * t6 - t370 * t472, -t130 * t6 + t131 * t345 + t370 * t471 - t472 * t56, t131 * t228 - t274 * t472 + t370 * t432, -t130 * t228 + t274 * t471 + t432 * t56, t274 * t432 (-t326 * t83 + t332 * t82) * t228 - t145 * t345 + t15 * t130 - t8 * t432 + t471 * t78 + t464 * t56 + (t326 * t379 + t332 * t378) * t274 + t352 * t297 -(t326 * t82 + t332 * t83) * t228 + t145 * t6 + t15 * t131 + t9 * t432 + t472 * t78 - t464 * t370 + (-t326 * t378 + t332 * t379) * t274 - t352 * t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t261 * t259, -t259 ^ 2 + t261 ^ 2, t173 - t460, -t174 - t459, t256, -g(1) * t242 + g(2) * t240 - t199 * t299 - t261 * t281 + (t382 + t474) * t329 - t373, g(1) * t243 - g(2) * t241 + g(3) * t451 - t198 * t299 + t259 * t281 - t358, -t505, t498, t494, t486, t251, t388 * t289 + (-t188 * t261 + t251 * t334 + t289 * t422) * pkin(3) + t489, -t445 * t289 + (-t251 * t328 + t261 * t367 + t289 * t421) * pkin(3) + t490, -t504, t499, t495, t487, t236, -t148 * t125 + t380 * t236 + t280 * t483 + t491, t148 * t369 - t235 * t236 + t280 * t484 + t492, -t506, t500, t497, t488, t228 (t231 * t332 - t235 * t326) * t228 - t81 * t56 + (t326 * t466 + t332 * t465) * t274 + (-(-t231 * t326 - t235 * t332) * t274 - t9) * qJD(6) + t514, t81 * t370 + (-t231 * t228 - t2 + (-qJD(6) * t235 - t465) * t274) * t326 + (-t235 * t228 + (qJD(6) * t231 + t466) * t274 - t399) * t332 + t496; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t505, t498, t494, t486, t251, -t289 * t93 + t489, -t289 * t92 + t490, -t504, t499, t495, t487, t236, t395 * t280 + (t125 * t367 + t236 * t333 + t280 * t420) * pkin(4) + t491, -t470 * t280 + (-t236 * t327 + t280 * t419 - t367 * t369) * pkin(4) + t492, -t506, t500, t497, t488, t228, t332 * t457 + (t24 * t332 - t25 * t326) * t274 - t89 * t56 + (-t326 * t461 - (-t326 * t333 - t455) * t274 * qJD(5)) * pkin(4) + (-(-pkin(4) * t455 - t306 * t326) * t274 - t9) * qJD(6) + t514, t89 * t370 + (-t457 - t2 + (-t24 + (-qJD(5) - qJD(6)) * t327 * pkin(4)) * t274) * t326 + (-pkin(4) * t461 + (pkin(4) * t419 + qJD(6) * t306 - t25) * t274 - t399) * t332 + t496; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t504, t499, t495, t487, t236, -t280 * t34 + t491, -t280 * t33 + t492, -t506, t500, t497, t488, t228 (-t22 * t326 - t467) * t274 + (t228 * t332 + t274 * t418 + t369 * t56) * pkin(5) + t493 (t23 * t274 - t2) * t326 + (-t22 * t274 - t399) * t332 + (-t228 * t326 + t274 * t417 - t369 * t370) * pkin(5) + t496; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t506, t500, t497, t488, t228, -t274 * t9 + t493, -t326 * t2 - t274 * t8 - t332 * t399 + t496;];
tau_reg  = t1;
