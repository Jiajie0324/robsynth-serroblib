% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR4_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t88 = sin(qJ(4));
t89 = sin(qJ(3));
t93 = cos(qJ(4));
t94 = cos(qJ(3));
t61 = t88 * t89 - t93 * t94;
t63 = t88 * t94 + t93 * t89;
t87 = sin(qJ(5));
t92 = cos(qJ(5));
t38 = t92 * t61 + t87 * t63;
t76 = -t94 * pkin(3) - pkin(2);
t50 = t61 * pkin(4) + t76;
t26 = t38 * pkin(5) + t50;
t133 = 0.2e1 * t26;
t132 = 0.2e1 * t50;
t131 = 0.2e1 * t76;
t90 = sin(qJ(2));
t130 = -0.2e1 * t90;
t95 = cos(qJ(2));
t129 = -0.2e1 * t95;
t128 = 0.2e1 * t95;
t127 = -pkin(9) - pkin(8);
t126 = pkin(2) * t94;
t125 = pkin(7) * t89;
t83 = t90 ^ 2;
t124 = t83 * pkin(7);
t86 = sin(qJ(6));
t123 = t86 * pkin(5);
t122 = t87 * pkin(4);
t121 = t88 * pkin(3);
t78 = t90 * pkin(7);
t51 = t63 * t90;
t110 = t94 * t90;
t116 = t89 * t90;
t53 = t93 * t110 - t88 * t116;
t28 = t92 * t51 + t87 * t53;
t109 = t94 * t95;
t104 = pkin(7) * t109;
t66 = -t95 * pkin(2) - t90 * pkin(8) - pkin(1);
t43 = t104 + (-pkin(9) * t90 + t66) * t89;
t111 = t93 * t43;
t60 = t94 * t66;
t41 = -pkin(9) * t110 + t60 + (-pkin(3) - t125) * t95;
t25 = t88 * t41 + t111;
t19 = -t51 * pkin(10) + t25;
t112 = t92 * t19;
t118 = t95 * pkin(4);
t24 = t93 * t41 - t88 * t43;
t16 = -t53 * pkin(10) - t118 + t24;
t9 = t87 * t16 + t112;
t7 = -t28 * pkin(11) + t9;
t91 = cos(qJ(6));
t120 = t91 * t7;
t119 = t95 * pkin(3);
t117 = t95 * pkin(5);
t115 = t89 * t94;
t114 = t89 * t95;
t105 = t92 * t121;
t81 = t93 * pkin(3);
t75 = t81 + pkin(4);
t58 = t87 * t75 + t105;
t113 = t91 * t58;
t65 = pkin(3) * t116 + t78;
t82 = t89 ^ 2;
t84 = t94 ^ 2;
t108 = t82 + t84;
t107 = t90 * t128;
t106 = t91 * t122;
t103 = t89 * t110;
t30 = -t87 * t51 + t92 * t53;
t8 = t92 * t16 - t87 * t19;
t6 = -t30 * pkin(11) - t117 + t8;
t1 = t91 * t6 - t86 * t7;
t102 = -t58 - t122;
t67 = t127 * t89;
t68 = t127 * t94;
t44 = t93 * t67 + t88 * t68;
t34 = -t63 * pkin(10) + t44;
t45 = t88 * t67 - t93 * t68;
t35 = -t61 * pkin(10) + t45;
t17 = t92 * t34 - t87 * t35;
t56 = -t87 * t121 + t92 * t75;
t54 = pkin(5) + t56;
t49 = t91 * t54;
t32 = -t86 * t58 + t49;
t80 = t92 * pkin(4);
t74 = t80 + pkin(5);
t69 = t91 * t74;
t55 = -t86 * t122 + t69;
t42 = t51 * pkin(4) + t65;
t2 = t86 * t6 + t120;
t18 = t87 * t34 + t92 * t35;
t47 = -pkin(7) * t114 + t60;
t48 = t89 * t66 + t104;
t101 = -t47 * t89 + t48 * t94;
t97 = pkin(7) ^ 2;
t85 = t95 ^ 2;
t79 = t91 * pkin(5);
t77 = t83 * t97;
t57 = t86 * t74 + t106;
t40 = -t87 * t61 + t92 * t63;
t33 = t86 * t54 + t113;
t23 = -t86 * t38 + t91 * t40;
t21 = t91 * t38 + t86 * t40;
t20 = t28 * pkin(5) + t42;
t15 = -t86 * t28 + t91 * t30;
t13 = t91 * t28 + t86 * t30;
t11 = -t38 * pkin(11) + t18;
t10 = -t40 * pkin(11) + t17;
t4 = t86 * t10 + t91 * t11;
t3 = t91 * t10 - t86 * t11;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, t107, 0, t85, 0, 0, pkin(1) * t128, pkin(1) * t130, 0.2e1 * (t83 + t85) * pkin(7), pkin(1) ^ 2 + t85 * t97 + t77, t84 * t83, -0.2e1 * t83 * t115, t109 * t130, t82 * t83, t89 * t107, t85, 0.2e1 * t89 * t124 - 0.2e1 * t47 * t95, 0.2e1 * t94 * t124 + 0.2e1 * t48 * t95, 0.2e1 * (-t47 * t94 - t48 * t89) * t90, t47 ^ 2 + t48 ^ 2 + t77, t53 ^ 2, -0.2e1 * t53 * t51, t53 * t129, t51 ^ 2, -t51 * t129, t85, -0.2e1 * t24 * t95 + 0.2e1 * t65 * t51, 0.2e1 * t25 * t95 + 0.2e1 * t65 * t53, -0.2e1 * t24 * t53 - 0.2e1 * t25 * t51, t24 ^ 2 + t25 ^ 2 + t65 ^ 2, t30 ^ 2, -0.2e1 * t30 * t28, t30 * t129, t28 ^ 2, t28 * t128, t85, 0.2e1 * t42 * t28 - 0.2e1 * t8 * t95, 0.2e1 * t42 * t30 + 0.2e1 * t9 * t95, -0.2e1 * t9 * t28 - 0.2e1 * t8 * t30, t42 ^ 2 + t8 ^ 2 + t9 ^ 2, t15 ^ 2, -0.2e1 * t15 * t13, t15 * t129, t13 ^ 2, t13 * t128, t85, -0.2e1 * t1 * t95 + 0.2e1 * t20 * t13, 0.2e1 * t20 * t15 + 0.2e1 * t2 * t95, -0.2e1 * t1 * t15 - 0.2e1 * t2 * t13, t1 ^ 2 + t2 ^ 2 + t20 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, 0, t95, 0, -t78, -t95 * pkin(7), 0, 0, t103 (-t82 + t84) * t90, -t114, -t103, -t109, 0, -pkin(7) * t110 + (-pkin(2) * t90 + pkin(8) * t95) * t89, pkin(8) * t109 + (t125 - t126) * t90, t101, -pkin(2) * t78 + pkin(8) * t101, t53 * t63, -t63 * t51 - t53 * t61, -t63 * t95, t51 * t61, t61 * t95, 0, -t44 * t95 + t76 * t51 + t65 * t61, t45 * t95 + t76 * t53 + t65 * t63, -t24 * t63 - t25 * t61 - t44 * t53 - t45 * t51, t24 * t44 + t25 * t45 + t65 * t76, t30 * t40, -t40 * t28 - t30 * t38, -t40 * t95, t28 * t38, t38 * t95, 0, -t17 * t95 + t50 * t28 + t42 * t38, t18 * t95 + t50 * t30 + t42 * t40, -t17 * t30 - t18 * t28 - t9 * t38 - t8 * t40, t8 * t17 + t9 * t18 + t42 * t50, t15 * t23, -t23 * t13 - t15 * t21, -t23 * t95, t13 * t21, t21 * t95, 0, t26 * t13 + t20 * t21 - t3 * t95, t26 * t15 + t20 * t23 + t4 * t95, -t1 * t23 - t4 * t13 - t3 * t15 - t2 * t21, t1 * t3 + t2 * t4 + t20 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t82, 0.2e1 * t115, 0, t84, 0, 0, 0.2e1 * t126, -0.2e1 * pkin(2) * t89, 0.2e1 * t108 * pkin(8), pkin(8) ^ 2 * t108 + pkin(2) ^ 2, t63 ^ 2, -0.2e1 * t63 * t61, 0, t61 ^ 2, 0, 0, t61 * t131, t63 * t131, -0.2e1 * t44 * t63 - 0.2e1 * t45 * t61, t44 ^ 2 + t45 ^ 2 + t76 ^ 2, t40 ^ 2, -0.2e1 * t40 * t38, 0, t38 ^ 2, 0, 0, t38 * t132, t40 * t132, -0.2e1 * t17 * t40 - 0.2e1 * t18 * t38, t17 ^ 2 + t18 ^ 2 + t50 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0, t21 ^ 2, 0, 0, t21 * t133, t23 * t133, -0.2e1 * t4 * t21 - 0.2e1 * t3 * t23, t26 ^ 2 + t3 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, 0, -t116, -t95, t47, -t48, 0, 0, 0, 0, t53, 0, -t51, -t95, -t93 * t119 + t24, -t111 + (-t41 + t119) * t88 (-t51 * t88 - t53 * t93) * pkin(3) (t24 * t93 + t25 * t88) * pkin(3), 0, 0, t30, 0, -t28, -t95, -t56 * t95 + t8, t58 * t95 - t9, -t58 * t28 - t56 * t30, t8 * t56 + t9 * t58, 0, 0, t15, 0, -t13, -t95, -t32 * t95 + t1, t33 * t95 - t2, -t33 * t13 - t32 * t15, t1 * t32 + t2 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t94, 0, -t89 * pkin(8), -t94 * pkin(8), 0, 0, 0, 0, t63, 0, -t61, 0, t44, -t45 (-t61 * t88 - t63 * t93) * pkin(3) (t44 * t93 + t45 * t88) * pkin(3), 0, 0, t40, 0, -t38, 0, t17, -t18, -t58 * t38 - t56 * t40, t17 * t56 + t18 * t58, 0, 0, t23, 0, -t21, 0, t3, -t4, -t33 * t21 - t32 * t23, t3 * t32 + t4 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t81, -0.2e1 * t121, 0 (t88 ^ 2 + t93 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t56, -0.2e1 * t58, 0, t56 ^ 2 + t58 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t32, -0.2e1 * t33, 0, t32 ^ 2 + t33 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, -t51, -t95, t24, -t25, 0, 0, 0, 0, t30, 0, -t28, -t95, -t92 * t118 + t8, -t112 + (-t16 + t118) * t87 (-t28 * t87 - t30 * t92) * pkin(4) (t8 * t92 + t87 * t9) * pkin(4), 0, 0, t15, 0, -t13, -t95, -t55 * t95 + t1, t57 * t95 - t2, -t57 * t13 - t55 * t15, t1 * t55 + t2 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t61, 0, t44, -t45, 0, 0, 0, 0, t40, 0, -t38, 0, t17, -t18 (-t38 * t87 - t40 * t92) * pkin(4) (t17 * t92 + t18 * t87) * pkin(4), 0, 0, t23, 0, -t21, 0, t3, -t4, -t57 * t21 - t55 * t23, t3 * t55 + t4 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t81, -t121, 0, 0, 0, 0, 0, 0, 0, 1, t56 + t80, -t105 + (-pkin(4) - t75) * t87, 0 (t56 * t92 + t58 * t87) * pkin(4), 0, 0, 0, 0, 0, 1, t102 * t86 + t49 + t69, t102 * t91 + (-t54 - t74) * t86, 0, t32 * t55 + t33 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t80, -0.2e1 * t122, 0 (t87 ^ 2 + t92 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t55, -0.2e1 * t57, 0, t55 ^ 2 + t57 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t28, -t95, t8, -t9, 0, 0, 0, 0, t15, 0, -t13, -t95, -t91 * t117 + t1, -t120 + (-t6 + t117) * t86 (-t13 * t86 - t15 * t91) * pkin(5) (t1 * t91 + t2 * t86) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, 0, t17, -t18, 0, 0, 0, 0, t23, 0, -t21, 0, t3, -t4 (-t21 * t86 - t23 * t91) * pkin(5) (t3 * t91 + t4 * t86) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t56, -t58, 0, 0, 0, 0, 0, 0, 0, 1, t32 + t79, -t113 + (-pkin(5) - t54) * t86, 0 (t32 * t91 + t33 * t86) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t80, -t122, 0, 0, 0, 0, 0, 0, 0, 1, t55 + t79, -t106 + (-pkin(5) - t74) * t86, 0 (t55 * t91 + t57 * t86) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t79, -0.2e1 * t123, 0 (t86 ^ 2 + t91 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, -t13, -t95, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t32, -t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t55, -t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t79, -t123, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
