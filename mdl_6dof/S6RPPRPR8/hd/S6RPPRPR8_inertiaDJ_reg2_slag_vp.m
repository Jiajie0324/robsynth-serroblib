% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRPR8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRPR8_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:56:10
% EndTime: 2019-03-09 01:56:14
% DurationCPUTime: 1.25s
% Computational Cost: add. (1638->126), mult. (3162->220), div. (0->0), fcn. (3033->6), ass. (0->84)
t102 = sin(qJ(4));
t103 = cos(qJ(4));
t97 = pkin(1) + qJ(3);
t89 = -pkin(7) - t97;
t72 = t89 * t103;
t114 = -qJD(3) * t102 + qJD(4) * t72;
t49 = sin(pkin(9));
t50 = cos(pkin(9));
t35 = t102 * t50 + t103 * t49;
t31 = t35 * qJD(4);
t36 = -t102 * t49 + t103 * t50;
t100 = t36 * t31;
t32 = t36 * qJD(4);
t28 = t35 * t32;
t110 = t28 - t100;
t113 = -0.2e1 * t110;
t105 = pkin(4) + pkin(8);
t71 = t89 * t102;
t25 = t49 * t71 - t50 * t72;
t60 = t36 * pkin(5) + t25;
t68 = t31 * qJ(5) - t36 * qJD(5) + qJD(2);
t112 = -qJD(6) * t60 - t105 * t32 - t68;
t111 = qJD(3) * t103 + qJD(4) * t71;
t51 = sin(qJ(6));
t47 = t51 ^ 2;
t52 = cos(qJ(6));
t48 = t52 ^ 2;
t82 = (t47 - t48) * qJD(6);
t38 = (t49 ^ 2 + t50 ^ 2) * qJD(3);
t41 = t49 * pkin(3) + qJ(2);
t76 = -t36 * qJ(5) + t41;
t12 = t105 * t35 + t76;
t15 = t111 * t50 + t114 * t49;
t54 = -t31 * pkin(5) + t15;
t94 = qJD(6) * t51;
t2 = t112 * t52 + t12 * t94 - t51 * t54;
t93 = qJD(6) * t52;
t3 = t112 * t51 - t12 * t93 + t52 * t54;
t5 = -t51 * t12 + t52 * t60;
t6 = t52 * t12 + t51 * t60;
t77 = t5 * t51 - t52 * t6;
t109 = t77 * qJD(6) + t2 * t51 - t3 * t52;
t108 = 0.2e1 * t28;
t107 = 0.2e1 * qJD(2);
t106 = 0.2e1 * qJD(5);
t14 = t111 * t49 - t114 * t50;
t9 = -t32 * pkin(5) - t14;
t104 = t9 * t35;
t101 = t32 * t47;
t29 = t48 * t32;
t99 = t51 * t32;
t98 = t52 * t32;
t95 = t47 + t48;
t92 = qJD(6) * t105;
t91 = qJ(2) * qJD(2);
t90 = qJ(5) * qJD(6);
t27 = -0.2e1 * t100;
t88 = t51 * t98;
t87 = t51 * t93;
t17 = t95 * t31;
t34 = t35 ^ 2;
t81 = t34 * t87;
t80 = qJD(6) * (t36 ^ 2 + t34);
t78 = t5 * t52 + t51 * t6;
t26 = t49 * t72 + t50 * t71;
t75 = -t26 * t14 + t25 * t15;
t73 = qJ(5) * t32 + qJD(5) * t35;
t70 = -t51 * t31 + t36 * t93;
t20 = t52 * t31 + t36 * t94;
t21 = t35 * t93 + t99;
t69 = t35 * t94 - t98;
t64 = 0.2e1 * t31 * t35 - 0.2e1 * t36 * t32;
t63 = pkin(4) * t31 - t73;
t62 = t9 + (qJ(5) * t35 + t105 * t36) * qJD(6);
t61 = t14 * t35 + t15 * t36 - t25 * t31 - t26 * t32;
t16 = -t35 * pkin(5) + t26;
t58 = -qJD(6) * t16 - t105 * t31 + t73;
t57 = -t78 * qJD(6) - t2 * t52 - t3 * t51;
t55 = 0.2e1 * t61;
t44 = qJ(5) * t106;
t24 = t35 * pkin(4) + t76;
t11 = t32 * pkin(4) + t68;
t10 = -t35 * t82 + t88;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0.2e1 * t91, 0, 0, 0, 0, 0, 0, t49 * t107, t50 * t107, 0.2e1 * t38, 0.2e1 * t38 * t97 + 0.2e1 * t91, t27, t64, 0, t108, 0, 0, 0.2e1 * qJD(2) * t35 + 0.2e1 * t41 * t32, 0.2e1 * qJD(2) * t36 - 0.2e1 * t41 * t31, t55, 0.2e1 * t41 * qJD(2) + 0.2e1 * t75, 0, 0, 0, t27, t64, t108, t55, -0.2e1 * t11 * t35 - 0.2e1 * t24 * t32, -0.2e1 * t11 * t36 + 0.2e1 * t24 * t31, 0.2e1 * t24 * t11 + 0.2e1 * t75, 0.2e1 * t47 * t28 + 0.2e1 * t81, -0.2e1 * t34 * t82 + 0.4e1 * t35 * t88, 0.2e1 * t70 * t35 + 0.2e1 * t36 * t99, 0.2e1 * t35 * t29 - 0.2e1 * t81, -0.2e1 * t20 * t35 + 0.2e1 * t36 * t98, t27, -0.2e1 * t52 * t104 + 0.2e1 * t69 * t16 + 0.2e1 * t3 * t36 - 0.2e1 * t5 * t31, 0.2e1 * t51 * t104 + 0.2e1 * t21 * t16 + 0.2e1 * t2 * t36 + 0.2e1 * t6 * t31, -0.2e1 * t77 * t32 + 0.2e1 * t57 * t35, 0.2e1 * t16 * t9 - 0.2e1 * t2 * t6 + 0.2e1 * t3 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, 0, 0, 0, 0, 0, 0, 0, 0, t113, -t61, 0, 0, 0, 0, 0, 0, t113, 0, 0, -t61, 0, 0, 0, 0, 0, 0, t113 * t52 + t51 * t80, -t113 * t51 + t52 * t80, 0, t109 * t36 + t16 * t32 + t78 * t31 + t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t110, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t95 * t100 + 0.2e1 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, t32, -t31, 0, qJD(2), 0, 0, 0, 0, 0, 0, 0, -t32, t31, t11, 0, 0, 0, 0, 0, 0, -t70, t20, t29 + t101, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, -t32, 0, -t15, t14, 0, 0, 0, t31, t32, 0, 0, 0, t63, t15, -t14, -pkin(4) * t15 - qJ(5) * t14 + qJD(5) * t26, t10, -0.4e1 * t35 * t87 - t101 + t29, -t20, -t10, -t70, 0, t62 * t51 - t58 * t52, t58 * t51 + t62 * t52, t109, t9 * qJ(5) + t16 * qJD(5) + t105 * t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t32, -t63, 0, 0, 0, 0, 0, 0, t21, -t69, -t17, -t105 * t17 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, t44, -0.2e1 * t87, 0.2e1 * t82, 0, 0.2e1 * t87, 0, 0, 0.2e1 * qJD(5) * t51 + 0.2e1 * t52 * t90, 0.2e1 * qJD(5) * t52 - 0.2e1 * t51 * t90, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, 0, t15, 0, 0, 0, 0, 0, 0, -t20, -t70, 0, -t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, -t69, -t31, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, t70, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, t94, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, 0, -t93, 0, t51 * t92, t52 * t92, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, -t93, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
