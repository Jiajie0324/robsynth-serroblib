% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR11_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR11_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR11_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR11_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:32:50
% EndTime: 2019-03-09 14:33:11
% DurationCPUTime: 9.21s
% Computational Cost: add. (16021->571), mult. (35031->775), div. (0->0), fcn. (22930->8), ass. (0->274)
t275 = sin(qJ(2));
t345 = qJD(1) * t275;
t264 = pkin(2) * t345;
t278 = cos(qJ(2));
t307 = pkin(8) * t275 - qJ(3) * t278;
t182 = qJD(1) * t307 + t264;
t344 = qJD(1) * t278;
t260 = pkin(7) * t344;
t226 = pkin(3) * t344 + t260;
t274 = sin(qJ(4));
t277 = cos(qJ(4));
t127 = -t274 * t182 + t277 * t226;
t357 = t274 * t275;
t299 = pkin(4) * t278 - pkin(9) * t357;
t339 = qJD(4) * t274;
t279 = -pkin(2) - pkin(8);
t384 = pkin(9) - t279;
t429 = qJD(1) * t299 - t384 * t339 + t127;
t128 = t277 * t182 + t274 * t226;
t231 = t384 * t277;
t325 = t277 * t345;
t428 = pkin(9) * t325 + qJD(4) * t231 + t128;
t343 = qJD(2) * t274;
t216 = t277 * t344 + t343;
t321 = t274 * t344;
t341 = qJD(2) * t277;
t218 = -t321 + t341;
t273 = sin(qJ(5));
t276 = cos(qJ(5));
t139 = t276 * t216 + t218 * t273;
t272 = sin(qJ(6));
t305 = -t216 * t273 + t276 * t218;
t386 = cos(qJ(6));
t411 = -t272 * t139 + t305 * t386;
t80 = t386 * t139 + t272 * t305;
t385 = t80 * t411;
t219 = t273 * t277 + t274 * t276;
t396 = qJD(4) + qJD(5);
t150 = t396 * t219;
t289 = t219 * t275;
t349 = qJD(1) * t289 + t150;
t336 = qJD(5) * t273;
t356 = t276 * t277;
t358 = t273 * t274;
t348 = -t273 * t339 - t274 * t336 + t276 * t325 - t345 * t358 + t356 * t396;
t419 = t411 ^ 2 - t80 ^ 2;
t254 = qJD(4) + t345;
t246 = qJD(5) + t254;
t318 = -t275 * qJ(3) - pkin(1);
t209 = t278 * t279 + t318;
t171 = t209 * qJD(1);
t259 = pkin(7) * t345;
t420 = qJD(3) + t259;
t331 = pkin(3) * t345 + t420;
t177 = qJD(2) * t279 + t331;
t109 = -t171 * t274 + t277 * t177;
t96 = -pkin(9) * t218 + t109;
t85 = pkin(4) * t254 + t96;
t110 = t171 * t277 + t177 * t274;
t97 = -pkin(9) * t216 + t110;
t89 = t273 * t97;
t36 = t276 * t85 - t89;
t407 = pkin(10) * t305;
t30 = t36 - t407;
t28 = pkin(5) * t246 + t30;
t91 = t276 * t97;
t37 = t273 * t85 + t91;
t424 = pkin(10) * t139;
t31 = t37 - t424;
t377 = t272 * t31;
t10 = t28 * t386 - t377;
t329 = t386 * t31;
t11 = t272 * t28 + t329;
t427 = -t10 * t80 + t11 * t411;
t330 = qJD(1) * qJD(2);
t319 = t275 * t330;
t161 = qJD(4) * t216 - t274 * t319;
t338 = qJD(4) * t277;
t162 = qJD(2) * t338 - qJD(4) * t321 - t277 * t319;
t335 = qJD(5) * t276;
t298 = -t273 * t161 + t162 * t276 - t216 * t336 + t218 * t335;
t320 = qJD(6) * t386;
t334 = qJD(6) * t272;
t70 = t276 * t161 + t273 * t162 + t216 * t335 + t218 * t336;
t22 = t139 * t320 + t272 * t298 + t305 * t334 + t386 * t70;
t235 = qJD(6) + t246;
t417 = t235 * t80 - t22;
t257 = t278 * t330;
t253 = pkin(2) * t319;
t332 = t275 * qJD(3);
t286 = qJD(2) * t307 - t332;
t156 = qJD(1) * t286 + t253;
t252 = pkin(7) * t257;
t208 = pkin(3) * t257 + t252;
t59 = -qJD(4) * t110 - t274 * t156 + t277 * t208;
t41 = pkin(4) * t257 + t161 * pkin(9) + t59;
t58 = t277 * t156 - t171 * t339 + t177 * t338 + t274 * t208;
t47 = -pkin(9) * t162 + t58;
t9 = -qJD(5) * t37 - t273 * t47 + t276 * t41;
t6 = pkin(5) * t257 + t70 * pkin(10) + t9;
t315 = -t273 * t41 - t276 * t47 - t85 * t335 + t97 * t336;
t7 = -pkin(10) * t298 - t315;
t285 = -t272 * t6 - t28 * t320 + t31 * t334 - t386 * t7;
t269 = qJD(2) * qJ(3);
t202 = t269 + t226;
t152 = pkin(4) * t216 + t202;
t92 = pkin(5) * t139 + t152;
t416 = t92 * t80 + t285;
t230 = t384 * t274;
t381 = -t230 * t336 + t231 * t335 + t273 * t429 + t428 * t276;
t154 = -t276 * t230 - t273 * t231;
t380 = -qJD(5) * t154 + t428 * t273 - t276 * t429;
t2 = -qJD(6) * t11 - t272 * t7 + t386 * t6;
t395 = -t411 * t92 + t2;
t23 = qJD(6) * t411 - t272 * t70 + t386 * t298;
t392 = t235 * t411 - t23;
t387 = pkin(3) + pkin(7);
t423 = -pkin(5) * t344 + pkin(10) * t349 + t380;
t422 = pkin(10) * t348 + t381;
t368 = t139 * t305;
t304 = -t356 + t358;
t295 = -t272 * t219 - t304 * t386;
t398 = -qJD(6) * t295 + t272 * t349 - t348 * t386;
t421 = t398 * t235;
t418 = -t139 ^ 2 + t305 ^ 2;
t292 = t219 * t386 - t272 * t304;
t415 = -t11 * t398 + t2 * t295 - t285 * t292;
t414 = t139 * t246 - t70;
t413 = t23 * t292 - t398 * t80;
t412 = t139 * t152 + t315;
t408 = -0.2e1 * t330;
t406 = t22 * t295;
t404 = -t109 * t254 + t58;
t403 = t110 * t254 + t59;
t183 = t304 * t278;
t239 = t387 * t275;
t222 = t277 * t239;
t317 = pkin(9) * t278 - t209;
t121 = t275 * pkin(4) + t274 * t317 + t222;
t221 = t274 * t239;
t149 = t277 * t209 + t221;
t354 = t277 * t278;
t125 = -pkin(9) * t354 + t149;
t73 = t273 * t121 + t276 * t125;
t300 = t216 * t254;
t400 = t161 - t300;
t363 = t218 * t254;
t399 = -t162 + t363;
t327 = -pkin(4) * t277 - pkin(3);
t347 = pkin(4) * t338 - t327 * t345 + t420;
t397 = t272 * t348 + t349 * t386;
t394 = -t152 * t305 + t9;
t393 = t139 * t348 + t219 * t298;
t391 = t246 * t305 - t298;
t390 = t304 * t70 - t305 * t349;
t388 = -t219 * t315 - t304 * t9 + t348 * t37 - t349 * t36;
t153 = t230 * t273 - t276 * t231;
t118 = pkin(10) * t304 + t153;
t119 = -pkin(10) * t219 + t154;
t67 = t118 * t386 - t272 * t119;
t383 = qJD(6) * t67 + t272 * t423 - t386 * t422;
t68 = t272 * t118 + t119 * t386;
t382 = -qJD(6) * t68 + t272 * t422 + t386 * t423;
t44 = t276 * t96 - t89;
t379 = qJD(2) * pkin(2);
t376 = qJD(6) * t292 + t397;
t373 = t219 * t320 - t304 * t334 + t397;
t258 = pkin(4) * t276 + pkin(5);
t43 = -t273 * t96 - t91;
t34 = t43 + t424;
t35 = t44 - t407;
t359 = t272 * t273;
t372 = -t272 * t34 - t386 * t35 + t258 * t320 + (-t273 * t334 + (t276 * t386 - t359) * qJD(5)) * pkin(4);
t326 = t386 * t273;
t371 = t272 * t35 - t386 * t34 - t258 * t334 + (-t273 * t320 + (-t272 * t276 - t326) * qJD(5)) * pkin(4);
t367 = t162 * t274;
t342 = qJD(2) * t275;
t225 = t387 * t342;
t268 = qJD(2) * qJD(3);
t179 = -qJD(1) * t225 + t268;
t366 = t179 * t274;
t365 = t179 * t277;
t364 = t218 * t216;
t362 = t218 * t278;
t361 = t254 * t275;
t360 = t254 * t279;
t355 = t277 * t161;
t281 = qJD(1) ^ 2;
t353 = t278 * t281;
t280 = qJD(2) ^ 2;
t352 = t280 * t275;
t351 = t280 * t278;
t256 = t274 * pkin(4) + qJ(3);
t350 = pkin(5) * t348 + t347;
t240 = t387 * t278;
t270 = t275 ^ 2;
t271 = t278 ^ 2;
t346 = t270 - t271;
t232 = -pkin(2) * t278 + t318;
t203 = qJD(1) * t232;
t340 = qJD(2) * t278;
t337 = qJD(4) * t278;
t333 = t202 * qJD(2);
t328 = t277 * t361;
t198 = pkin(4) * t354 + t240;
t324 = t274 * t337;
t323 = t254 * t338;
t322 = t277 * t337;
t314 = t348 * t246;
t313 = pkin(1) * t408;
t312 = qJD(3) - t379;
t72 = t276 * t121 - t125 * t273;
t263 = pkin(2) * t342;
t165 = t263 + t286;
t227 = t387 * t340;
t310 = -t274 * t165 + t277 * t227;
t308 = -t246 * t349 - t304 * t257;
t306 = -t109 * t274 + t110 * t277;
t303 = -qJD(1) * t271 + t361;
t302 = -0.2e1 * qJD(2) * t203;
t301 = t254 * t274;
t184 = t219 * t278;
t48 = pkin(5) * t275 + pkin(10) * t184 + t72;
t49 = pkin(10) * t183 + t73;
t26 = -t272 * t49 + t386 * t48;
t27 = t272 * t48 + t386 * t49;
t290 = -qJ(3) * t340 - t332;
t168 = qJD(1) * t290 + t253;
t190 = t263 + t290;
t297 = pkin(7) * t280 + qJD(1) * t190 + t168;
t117 = t272 * t183 - t184 * t386;
t291 = t202 * t275 + t279 * t340;
t60 = t299 * qJD(2) + (t277 * t317 - t221) * qJD(4) + t310;
t287 = t275 * t341 + t324;
t74 = t277 * t165 - t209 * t339 + t274 * t227 + t239 * t338;
t69 = pkin(9) * t287 + t74;
t20 = t121 * t335 - t125 * t336 + t273 * t60 + t276 * t69;
t115 = t162 * pkin(4) + t179;
t21 = -qJD(5) * t73 - t273 * t69 + t276 * t60;
t155 = -pkin(4) * t324 + (-pkin(7) + t327) * t342;
t228 = pkin(7) * t319 - t268;
t229 = t259 + t312;
t236 = -t260 - t269;
t283 = -t228 * t278 + (t229 * t278 + (t236 + t260) * t275) * qJD(2);
t250 = t275 * t353;
t244 = t277 * t257;
t242 = t275 * t257;
t238 = -0.2e1 * t242;
t237 = 0.2e1 * t242;
t233 = t346 * t281;
t223 = -qJ(3) * t344 + t264;
t200 = t346 * t408;
t195 = pkin(4) * t326 + t272 * t258;
t194 = -pkin(4) * t359 + t258 * t386;
t176 = t203 * t345;
t174 = pkin(5) * t219 + t256;
t148 = -t209 * t274 + t222;
t134 = -pkin(5) * t183 + t198;
t116 = -t183 * t386 - t272 * t184;
t103 = pkin(4) * t218 + pkin(5) * t305;
t99 = t150 * t278 - t304 * t342;
t98 = qJD(2) * t289 + t183 * t396;
t75 = -qJD(4) * t149 + t310;
t71 = -t99 * pkin(5) + t155;
t38 = pkin(5) * t298 + t115;
t33 = qJD(6) * t117 + t272 * t98 - t386 * t99;
t32 = -t183 * t320 - t184 * t334 - t272 * t99 - t386 * t98;
t15 = pkin(10) * t99 + t20;
t14 = pkin(5) * t340 - t98 * pkin(10) + t21;
t13 = t30 * t386 - t377;
t12 = -t272 * t30 - t329;
t4 = -qJD(6) * t27 + t14 * t386 - t272 * t15;
t3 = qJD(6) * t26 + t272 * t14 + t15 * t386;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t200, t351, t238, -t352, 0, -pkin(7) * t351 + t275 * t313, pkin(7) * t352 + t278 * t313, 0, 0, 0, -t351, t352, t237, t200, t238, t283, t275 * t302 + t278 * t297, -t275 * t297 + t278 * t302, pkin(7) * t283 + t168 * t232 + t203 * t190, t161 * t274 * t278 + (t274 * t342 - t322) * t218 (-t216 * t274 + t218 * t277) * t342 + (t355 + t367 + (t216 * t277 + t218 * t274) * qJD(4)) * t278, -t254 * t322 - t161 * t275 + (t274 * t303 + t362) * qJD(2), t162 * t354 - t216 * t287, t254 * t324 - t162 * t275 + (-t216 * t278 + t277 * t303) * qJD(2), t254 * t340 + t242, t240 * t162 - t225 * t216 + t75 * t254 + (-t277 * t333 + t59) * t275 + (-t202 * t339 + t365 + (qJD(1) * t148 + t109) * qJD(2)) * t278, -t240 * t161 - t225 * t218 - t74 * t254 + (t274 * t333 - t58) * t275 + (-t202 * t338 - t366 + (-qJD(1) * t149 - t110) * qJD(2)) * t278, t148 * t161 - t149 * t162 - t74 * t216 - t75 * t218 + t306 * t342 + (t274 * t59 - t277 * t58 + (t109 * t277 + t110 * t274) * qJD(4)) * t278, t109 * t75 + t110 * t74 + t148 * t59 + t149 * t58 + t179 * t240 - t202 * t225, t184 * t70 + t305 * t98, -t98 * t139 - t70 * t183 + t184 * t298 + t305 * t99, t98 * t246 - t70 * t275 + (-qJD(1) * t184 + t305) * t340, -t139 * t99 - t183 * t298, t99 * t246 - t298 * t275 + (qJD(1) * t183 - t139) * t340, t246 * t340 + t242, t21 * t246 + t9 * t275 + t155 * t139 + t198 * t298 - t115 * t183 - t152 * t99 + (qJD(1) * t72 + t36) * t340, -t115 * t184 + t155 * t305 + t152 * t98 - t198 * t70 - t20 * t246 + t315 * t275 + (-qJD(1) * t73 - t37) * t340, -t20 * t139 - t183 * t315 + t9 * t184 - t21 * t305 - t298 * t73 - t36 * t98 + t37 * t99 + t72 * t70, t115 * t198 + t152 * t155 + t20 * t37 + t21 * t36 - t315 * t73 + t72 * t9, -t117 * t22 - t32 * t411, t116 * t22 - t117 * t23 + t32 * t80 - t33 * t411, -t22 * t275 - t32 * t235 + (qJD(1) * t117 + t411) * t340, t116 * t23 + t33 * t80, -t23 * t275 - t33 * t235 + (-qJD(1) * t116 - t80) * t340, t235 * t340 + t242, t38 * t116 + t134 * t23 + t2 * t275 + t4 * t235 + t92 * t33 + t71 * t80 + (qJD(1) * t26 + t10) * t340, t285 * t275 + t38 * t117 - t134 * t22 - t3 * t235 - t92 * t32 + t71 * t411 + (-qJD(1) * t27 - t11) * t340, t10 * t32 - t11 * t33 + t116 * t285 - t117 * t2 + t22 * t26 - t23 * t27 - t3 * t80 - t4 * t411, t10 * t4 + t11 * t3 + t134 * t38 + t2 * t26 - t27 * t285 + t71 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t250, t233, 0, t250, 0, 0, t281 * pkin(1) * t275, pkin(1) * t353, 0, 0, 0, 0, 0, -t250, t233, t250 ((-t236 - t269) * t275 + (-t229 + t312) * t278) * qJD(1), -t223 * t344 + t176, 0.2e1 * t268 + (t203 * t278 + t223 * t275) * qJD(1), -t228 * qJ(3) - t236 * qJD(3) - t203 * t223 + (-t236 * t275 + (-t229 - t379) * t278) * qJD(1) * pkin(7), -t218 * t301 - t355 (-t162 - t363) * t277 + (t161 + t300) * t274, -t254 * t339 + t244 + (-t254 * t357 - t362) * qJD(1), t277 * t300 + t367, -t323 + (-t328 + (t216 - t343) * t278) * qJD(1), -t254 * t344, qJ(3) * t162 - t127 * t254 + t366 + t331 * t216 + (t202 * t277 - t274 * t360) * qJD(4) + (-t109 * t278 + t277 * t291) * qJD(1), -qJ(3) * t161 + t128 * t254 + t365 + t331 * t218 + (-t202 * t274 - t277 * t360) * qJD(4) + (t110 * t278 - t274 * t291) * qJD(1), t127 * t218 + t128 * t216 + (-t110 * t345 + t161 * t279 - t59 + (-t216 * t279 - t110) * qJD(4)) * t277 + (t109 * t345 - t162 * t279 - t58 + (t218 * t279 + t109) * qJD(4)) * t274, t179 * qJ(3) - t109 * t127 - t110 * t128 + t331 * t202 + (qJD(4) * t306 + t58 * t274 + t59 * t277) * t279, t390, t139 * t349 + t70 * t219 + t298 * t304 - t305 * t348, -t305 * t344 + t308, t393, -t314 + (-qJD(2) * t219 + t139) * t344, -t246 * t344, t256 * t298 + t115 * t219 + t380 * t246 + t348 * t152 + t347 * t139 + (qJD(2) * t153 - t36) * t344, -t115 * t304 - t256 * t70 + t381 * t246 - t349 * t152 + t347 * t305 + (-qJD(2) * t154 + t37) * t344, t139 * t381 + t153 * t70 - t154 * t298 - t305 * t380 - t388, t115 * t256 + t152 * t347 + t9 * t153 - t154 * t315 + t36 * t380 - t37 * t381, -t373 * t411 - t406, t22 * t292 - t23 * t295 + t373 * t80 + t398 * t411, -t373 * t235 + (qJD(2) * t295 - t411) * t344, t413, t421 + (-qJD(2) * t292 + t80) * t344, -t235 * t344, t38 * t292 + t174 * t23 - t398 * t92 + t350 * t80 + t382 * t235 + (qJD(2) * t67 - t10) * t344, t38 * t295 - t174 * t22 - t373 * t92 + t350 * t411 - t383 * t235 + (-qJD(2) * t68 + t11) * t344, t10 * t373 + t67 * t22 - t68 * t23 - t382 * t411 - t383 * t80 - t415, t10 * t382 + t11 * t383 + t38 * t174 + t2 * t67 - t285 * t68 + t350 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t250, -t270 * t281 - t280, qJD(2) * t236 + t176 + t252, 0, 0, 0, 0, 0, 0, -qJD(2) * t216 - t254 * t301 + t244, -t323 - qJD(2) * t218 + (-t274 * t340 - t328) * qJD(1), t274 * t399 + t277 * t400, t274 * t404 + t277 * t403 - t333, 0, 0, 0, 0, 0, 0, -qJD(2) * t139 + t308, -t314 + (-t219 * t344 - t305) * qJD(2), -t390 - t393, -t152 * qJD(2) + t388, 0, 0, 0, 0, 0, 0, -t376 * t235 + (t295 * t344 - t80) * qJD(2), t421 + (-t292 * t344 - t411) * qJD(2), t376 * t411 + t406 - t413, -t92 * qJD(2) - t10 * t376 + t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, -t216 ^ 2 + t218 ^ 2, -t400, -t364, t399, t257, -t202 * t218 + t403, t202 * t216 - t404, 0, 0, t368, t418, t414, -t368, t391, t257, -t43 * t246 + (-t139 * t218 - t246 * t336 + t257 * t276) * pkin(4) + t394, t44 * t246 + (-t218 * t305 - t246 * t335 - t257 * t273) * pkin(4) + t412, t37 * t305 + t44 * t139 - t36 * t139 + t43 * t305 + (-t273 * t298 + t276 * t70 + (-t139 * t276 + t273 * t305) * qJD(5)) * pkin(4), -t36 * t43 - t37 * t44 + (-t152 * t218 - t273 * t315 + t276 * t9 + (-t273 * t36 + t276 * t37) * qJD(5)) * pkin(4), t385, t419, t417, -t385, t392, t257, -t103 * t80 + t194 * t257 + t235 * t371 + t395, -t103 * t411 - t195 * t257 - t235 * t372 + t416, t194 * t22 - t195 * t23 - t371 * t411 - t372 * t80 + t427, t10 * t371 - t92 * t103 + t11 * t372 + t2 * t194 - t195 * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t368, t418, t414, -t368, t391, t257, t37 * t246 + t394, t246 * t36 + t412, 0, 0, t385, t419, t417, -t385, t392, t257, -t12 * t235 + (-t235 * t334 + t257 * t386 - t305 * t80) * pkin(5) + t395, t13 * t235 + (-t235 * t320 - t257 * t272 - t305 * t411) * pkin(5) + t416, t12 * t411 + t13 * t80 + (t386 * t22 - t23 * t272 + (t272 * t411 - t386 * t80) * qJD(6)) * pkin(5) + t427, -t10 * t12 - t11 * t13 + (t386 * t2 - t285 * t272 - t305 * t92 + (-t10 * t272 + t11 * t386) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t385, t419, t417, -t385, t392, t257, t11 * t235 + t395, t10 * t235 + t416, 0, 0;];
tauc_reg  = t1;
