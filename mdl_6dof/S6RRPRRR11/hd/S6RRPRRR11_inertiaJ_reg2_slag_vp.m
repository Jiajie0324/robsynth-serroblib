% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR11_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR11_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR11_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t76 = sin(qJ(6));
t80 = cos(qJ(6));
t77 = sin(qJ(5));
t78 = sin(qJ(4));
t81 = cos(qJ(5));
t82 = cos(qJ(4));
t42 = t77 * t82 + t78 * t81;
t44 = -t77 * t78 + t81 * t82;
t91 = -t42 * t76 + t44 * t80;
t92 = t42 * t80 + t44 * t76;
t139 = (t76 * t92 + t80 * t91) * pkin(5);
t79 = sin(qJ(2));
t72 = t79 ^ 2;
t83 = cos(qJ(2));
t74 = t83 ^ 2;
t138 = t72 + t74;
t137 = t91 ^ 2;
t136 = t92 ^ 2;
t135 = (t42 * t77 + t44 * t81) * pkin(4);
t103 = t82 * t83;
t107 = t78 * t83;
t31 = -t103 * t81 + t107 * t77;
t32 = t42 * t83;
t12 = -t31 * t80 - t32 * t76;
t134 = t12 * t92;
t14 = t31 * t76 - t32 * t80;
t133 = t14 * t91;
t132 = t91 * t79;
t131 = t92 * t79;
t124 = t42 ^ 2;
t41 = t44 ^ 2;
t130 = t41 + t124;
t129 = t136 + t137;
t116 = pkin(5) * t79;
t117 = pkin(4) * t79;
t65 = t79 * pkin(7);
t51 = pkin(3) * t79 + t65;
t45 = t82 * t51;
t84 = -pkin(2) - pkin(8);
t96 = -qJ(3) * t79 - pkin(1);
t39 = t83 * t84 + t96;
t97 = pkin(9) * t83 - t39;
t17 = t78 * t97 + t117 + t45;
t109 = t78 * t51;
t18 = -t82 * t97 + t109;
t8 = t17 * t81 - t18 * t77;
t4 = pkin(10) * t32 + t116 + t8;
t105 = t81 * t18;
t9 = t17 * t77 + t105;
t5 = pkin(10) * t31 + t9;
t1 = t4 * t80 - t5 * t76;
t113 = t80 * t5;
t2 = t4 * t76 + t113;
t128 = t1 * t91 + t2 * t92;
t48 = (-pkin(9) + t84) * t78;
t62 = t82 * t84;
t49 = -pkin(9) * t82 + t62;
t27 = -t48 * t77 + t49 * t81;
t15 = -pkin(10) * t44 + t27;
t28 = t48 * t81 + t49 * t77;
t16 = -pkin(10) * t42 + t28;
t6 = t15 * t80 - t16 * t76;
t7 = t15 * t76 + t16 * t80;
t127 = t6 * t91 + t7 * t92;
t114 = t77 * pkin(4);
t67 = t81 * pkin(4);
t61 = t67 + pkin(5);
t34 = -t114 * t76 + t61 * t80;
t99 = t80 * t114;
t35 = t61 * t76 + t99;
t126 = t34 * t91 + t35 * t92;
t58 = pkin(4) * t78 + qJ(3);
t30 = pkin(5) * t42 + t58;
t123 = 0.2e1 * t30;
t122 = 0.2e1 * t58;
t121 = -0.2e1 * t79;
t120 = 0.2e1 * t79;
t119 = 0.2e1 * t83;
t118 = 0.2e1 * qJ(3);
t115 = t76 * pkin(5);
t66 = t80 * pkin(5);
t112 = t42 * t31;
t111 = t42 * t79;
t110 = t44 * t32;
t108 = t78 * t79;
t106 = t79 * t83;
t104 = t82 * t78;
t102 = t138 * pkin(7) ^ 2;
t69 = t83 * pkin(7);
t52 = pkin(3) * t83 + t69;
t71 = t78 ^ 2;
t73 = t82 ^ 2;
t55 = t71 + t73;
t101 = qJ(3) * t83;
t100 = -0.2e1 * t106;
t98 = t78 * t103;
t36 = pkin(4) * t103 + t52;
t95 = t42 * t9 + t44 * t8;
t94 = -pkin(2) * t79 + t101;
t25 = -t39 * t78 + t45;
t26 = t39 * t82 + t109;
t10 = t25 * t82 + t26 * t78;
t93 = t27 * t44 + t28 * t42;
t89 = t79 * t84 + t101;
t85 = qJ(3) ^ 2;
t60 = t82 * t79;
t57 = 0.2e1 * t106;
t50 = -pkin(2) * t83 + t96;
t47 = 0.2e1 * t138 * pkin(7);
t46 = t55 * t84;
t38 = t44 * t79;
t19 = -pkin(5) * t31 + t36;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t72, t57, 0, t74, 0, 0, pkin(1) * t119, pkin(1) * t121, t47, pkin(1) ^ 2 + t102, 0, 0, 0, t72, t57, t74, t47, t50 * t119, t50 * t121, t50 ^ 2 + t102, t71 * t74, 0.2e1 * t74 * t104, t78 * t100, t73 * t74, t82 * t100, t72, 0.2e1 * t103 * t52 + 0.2e1 * t25 * t79, -0.2e1 * t107 * t52 - 0.2e1 * t26 * t79 (t25 * t78 - t26 * t82) * t119, t25 ^ 2 + t26 ^ 2 + t52 ^ 2, t32 ^ 2, -0.2e1 * t32 * t31, -t32 * t120, t31 ^ 2, t31 * t120, t72, -0.2e1 * t31 * t36 + 0.2e1 * t79 * t8, -0.2e1 * t32 * t36 - 0.2e1 * t79 * t9, 0.2e1 * t31 * t9 + 0.2e1 * t32 * t8, t36 ^ 2 + t8 ^ 2 + t9 ^ 2, t14 ^ 2, -0.2e1 * t14 * t12, t14 * t120, t12 ^ 2, t12 * t121, t72, 0.2e1 * t1 * t79 + 0.2e1 * t12 * t19, 0.2e1 * t14 * t19 - 0.2e1 * t2 * t79, -0.2e1 * t1 * t14 - 0.2e1 * t12 * t2, t1 ^ 2 + t19 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, t83, 0, -t65, -t69, 0, 0, 0, -t79, -t83, 0, 0, 0, t94, t65, t69, t94 * pkin(7), -t98 (t71 - t73) * t83, t60, t98, -t108, 0, t52 * t78 + t82 * t89, t52 * t82 - t78 * t89, -t10, qJ(3) * t52 + t10 * t84, -t110, t31 * t44 + t32 * t42, t38, -t112, -t111, 0, t27 * t79 - t31 * t58 + t36 * t42, -t28 * t79 - t32 * t58 + t36 * t44, t27 * t32 + t28 * t31 - t95, t27 * t8 + t28 * t9 + t36 * t58, t133, -t12 * t91 - t14 * t92, t132, t134, -t131, 0, t12 * t30 + t19 * t92 + t6 * t79, t14 * t30 + t19 * t91 - t7 * t79, -t12 * t7 - t14 * t6 - t128, t1 * t6 + t19 * t30 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t118, pkin(2) ^ 2 + t85, t73, -0.2e1 * t104, 0, t71, 0, 0, t78 * t118, t82 * t118, -0.2e1 * t46, t55 * t84 ^ 2 + t85, t41, -0.2e1 * t44 * t42, 0, t124, 0, 0, t42 * t122, t44 * t122, -0.2e1 * t93, t27 ^ 2 + t28 ^ 2 + t58 ^ 2, t137, -0.2e1 * t91 * t92, 0, t136, 0, 0, t92 * t123, t91 * t123, -0.2e1 * t127, t30 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, t65, 0, 0, 0, 0, 0, 0, t60, -t108, 0, t10, 0, 0, 0, 0, 0, 0, t38, -t111, t110 + t112, t95, 0, 0, 0, 0, 0, 0, t132, -t131, -t133 - t134, t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t55, t46, 0, 0, 0, 0, 0, 0, 0, 0, -t130, t93, 0, 0, 0, 0, 0, 0, 0, 0, -t129, t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, 0, -t103, t79, t25, -t26, 0, 0, 0, 0, -t32, 0, t31, t79, t67 * t79 + t8, -t105 + (-t17 - t117) * t77 (t31 * t77 + t32 * t81) * pkin(4) (t77 * t9 + t8 * t81) * pkin(4), 0, 0, t14, 0, -t12, t79, t34 * t79 + t1, -t35 * t79 - t2, -t12 * t35 - t14 * t34, t1 * t34 + t2 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t78, 0, t62, -t78 * t84, 0, 0, 0, 0, t44, 0, -t42, 0, t27, -t28, -t135 (t27 * t81 + t28 * t77) * pkin(4), 0, 0, t91, 0, -t92, 0, t6, -t7, -t126, t34 * t6 + t35 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, -t78, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t42, 0, t135, 0, 0, 0, 0, 0, 0, t91, -t92, 0, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t67, -0.2e1 * t114, 0 (t77 ^ 2 + t81 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t34, -0.2e1 * t35, 0, t34 ^ 2 + t35 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, t31, t79, t8, -t9, 0, 0, 0, 0, t14, 0, -t12, t79, t66 * t79 + t1, -t113 + (-t4 - t116) * t76 (-t12 * t76 - t14 * t80) * pkin(5) (t1 * t80 + t2 * t76) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t42, 0, t27, -t28, 0, 0, 0, 0, t91, 0, -t92, 0, t6, -t7, -t139 (t6 * t80 + t7 * t76) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t42, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t92, 0, t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t67, -t114, 0, 0, 0, 0, 0, 0, 0, 1, t34 + t66, -t99 + (-pkin(5) - t61) * t76, 0 (t34 * t80 + t35 * t76) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t66, -0.2e1 * t115, 0 (t76 ^ 2 + t80 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t12, t79, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, -t92, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t92, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t34, -t35, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t66, -t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
