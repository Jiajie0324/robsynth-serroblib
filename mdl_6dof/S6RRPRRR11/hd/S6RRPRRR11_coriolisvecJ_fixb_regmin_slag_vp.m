% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR11_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR11_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR11_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR11_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:32:49
% EndTime: 2019-03-09 14:33:06
% DurationCPUTime: 6.48s
% Computational Cost: add. (5990->454), mult. (13739->634), div. (0->0), fcn. (9493->8), ass. (0->247)
t216 = sin(qJ(5));
t218 = sin(qJ(2));
t303 = qJD(1) * t218;
t197 = qJD(4) + t303;
t217 = sin(qJ(4));
t222 = cos(qJ(2));
t302 = qJD(1) * t222;
t277 = t217 * t302;
t221 = cos(qJ(4));
t299 = qJD(2) * t221;
t165 = -t277 + t299;
t223 = -pkin(2) - pkin(8);
t274 = -qJ(3) * t218 - pkin(1);
t156 = t223 * t222 + t274;
t123 = t156 * qJD(1);
t202 = pkin(7) * t303;
t357 = qJD(3) + t202;
t289 = pkin(3) * t303 + t357;
t129 = t223 * qJD(2) + t289;
t72 = -t123 * t217 + t221 * t129;
t61 = -pkin(9) * t165 + t72;
t54 = pkin(4) * t197 + t61;
t220 = cos(qJ(5));
t301 = qJD(2) * t217;
t163 = t221 * t302 + t301;
t73 = t123 * t221 + t129 * t217;
t62 = -pkin(9) * t163 + t73;
t58 = t220 * t62;
t19 = t216 * t54 + t58;
t97 = t220 * t163 + t165 * t216;
t363 = pkin(10) * t97;
t13 = t19 - t363;
t215 = sin(qJ(6));
t291 = qJD(6) * t215;
t11 = t13 * t291;
t219 = cos(qJ(6));
t248 = t163 * t216 - t220 * t165;
t52 = t215 * t248 - t219 * t97;
t203 = pkin(7) * t302;
t173 = pkin(3) * t302 + t203;
t212 = qJD(2) * qJ(3);
t149 = t212 + t173;
t106 = pkin(4) * t163 + t149;
t59 = pkin(5) * t97 + t106;
t369 = -t59 * t52 + t11;
t288 = qJD(1) * qJD(2);
t200 = t222 * t288;
t275 = t218 * t288;
t113 = -qJD(4) * t163 + t217 * t275;
t196 = pkin(2) * t275;
t253 = pkin(8) * t218 - qJ(3) * t222;
t297 = qJD(3) * t218;
t232 = qJD(2) * t253 - t297;
t108 = qJD(1) * t232 + t196;
t195 = pkin(7) * t200;
t155 = pkin(3) * t200 + t195;
t262 = -t108 * t217 + t221 * t155;
t228 = -qJD(4) * t73 + t262;
t23 = pkin(4) * t200 - pkin(9) * t113 + t228;
t295 = qJD(4) * t221;
t114 = qJD(2) * t295 - qJD(4) * t277 - t221 * t275;
t284 = -t221 * t108 - t129 * t295 - t217 * t155;
t296 = qJD(4) * t217;
t235 = -t123 * t296 - t284;
t27 = -pkin(9) * t114 + t235;
t270 = -t216 * t27 + t220 * t23;
t230 = -qJD(5) * t19 + t270;
t292 = qJD(5) * t220;
t293 = qJD(5) * t216;
t42 = t220 * t113 - t216 * t114 - t163 * t292 - t165 * t293;
t2 = pkin(5) * t200 - pkin(10) * t42 + t230;
t368 = -t215 * t2 + t369;
t349 = -t215 * t97 - t219 * t248;
t359 = t349 * t52;
t356 = t349 ^ 2 - t52 ^ 2;
t190 = qJD(5) + t197;
t181 = qJD(6) + t190;
t227 = qJD(5) * t248 - t113 * t216 - t220 * t114;
t290 = qJD(6) * t219;
t8 = t215 * t227 + t219 * t42 + t248 * t291 - t97 * t290;
t354 = -t181 * t52 + t8;
t316 = t217 * t218;
t243 = pkin(4) * t222 - pkin(9) * t316;
t207 = pkin(2) * t303;
t134 = qJD(1) * t253 + t207;
t259 = -t134 * t217 + t221 * t173;
t338 = pkin(9) - t223;
t366 = -qJD(1) * t243 + t338 * t296 - t259;
t178 = t338 * t221;
t281 = t221 * t303;
t308 = t221 * t134 + t217 * t173;
t365 = pkin(9) * t281 + qJD(4) * t178 + t308;
t166 = t216 * t221 + t217 * t220;
t236 = t166 * t218;
t343 = qJD(4) + qJD(5);
t310 = -qJD(1) * t236 - t343 * t166;
t9 = qJD(6) * t349 + t215 * t42 - t219 * t227;
t341 = t181 * t349 - t9;
t266 = -t216 * t23 - t220 * t27 - t54 * t292 + t62 * t293;
t3 = pkin(10) * t227 - t266;
t282 = t219 * t2 - t215 * t3;
t364 = -t59 * t349 + t282;
t339 = pkin(3) + pkin(7);
t362 = pkin(10) * t248;
t360 = t248 * t97;
t315 = t220 * t221;
t318 = t216 * t217;
t309 = -t216 * t296 - t217 * t293 + t220 * t281 - t303 * t318 + t315 * t343;
t355 = t248 ^ 2 - t97 ^ 2;
t353 = t190 * t97 + t42;
t352 = t106 * t97 + t266;
t351 = t106 * t248 + t230;
t350 = -t190 * t248 + t227;
t347 = -0.2e1 * t288;
t346 = t366 * t220;
t345 = t310 * t219;
t183 = t339 * t218;
t168 = t217 * t183;
t307 = t221 * t156 + t168;
t247 = -t315 + t318;
t102 = -t166 * t215 - t219 * t247;
t177 = t338 * t217;
t306 = -t220 * t177 - t216 * t178;
t283 = -pkin(4) * t221 - pkin(3);
t305 = pkin(4) * t295 - t283 * t303 + t357;
t344 = -t177 * t293 + t178 * t292 - t366 * t216 + t365 * t220;
t56 = t216 * t62;
t18 = t220 * t54 - t56;
t12 = t18 + t362;
t10 = pkin(5) * t190 + t12;
t329 = t219 * t13;
t5 = t215 * t10 + t329;
t342 = -qJD(6) * t5 + t364;
t340 = t222 * t343;
t101 = t219 * t166 - t215 * t247;
t337 = -qJD(6) * t101 - t309 * t215 + t345;
t336 = t102 * qJD(6) + t310 * t215 + t309 * t219;
t335 = t220 * t61 - t56;
t169 = t221 * t183;
t273 = pkin(9) * t222 - t156;
t84 = pkin(4) * t218 + t217 * t273 + t169;
t314 = t221 * t222;
t88 = -pkin(9) * t314 + t307;
t333 = t216 * t84 + t220 * t88;
t332 = t309 * pkin(5) + t305;
t331 = qJD(2) * pkin(2);
t330 = t219 * t10;
t328 = t113 * t221;
t300 = qJD(2) * t218;
t172 = t339 * t300;
t211 = qJD(2) * qJD(3);
t131 = -qJD(1) * t172 + t211;
t327 = t131 * t217;
t326 = t131 * t221;
t325 = t163 * t197;
t324 = t165 * t197;
t323 = t165 * t222;
t321 = t197 * t218;
t320 = t197 * t223;
t319 = t215 * t216;
t317 = t216 * t219;
t225 = qJD(1) ^ 2;
t313 = t222 * t225;
t224 = qJD(2) ^ 2;
t312 = t224 * t218;
t311 = t224 * t222;
t199 = t217 * pkin(4) + qJ(3);
t184 = t339 * t222;
t213 = t218 ^ 2;
t214 = t222 ^ 2;
t304 = t213 - t214;
t179 = -pkin(2) * t222 + t274;
t150 = qJD(1) * t179;
t298 = qJD(2) * t222;
t294 = qJD(4) * t222;
t287 = pkin(4) * qJD(5) * t181;
t286 = t221 * t321;
t285 = t218 * t313;
t145 = pkin(4) * t314 + t184;
t280 = t217 * t294;
t279 = t197 * t295;
t278 = t221 * t294;
t272 = qJD(6) * t10 + t3;
t206 = pkin(2) * t300;
t118 = t206 + t232;
t174 = t339 * t298;
t260 = -t118 * t217 + t221 * t174;
t34 = t243 * qJD(2) + (t221 * t273 - t168) * qJD(4) + t260;
t234 = t221 * t118 - t156 * t296 + t217 * t174 + t183 * t295;
t41 = (t218 * t299 + t280) * pkin(9) + t234;
t269 = -t216 * t41 + t220 * t34;
t268 = -t216 * t61 - t58;
t267 = -t216 * t88 + t220 * t84;
t265 = t309 * t190;
t264 = pkin(1) * t347;
t263 = qJD(3) - t331;
t258 = t177 * t216 - t220 * t178;
t82 = -pkin(10) * t166 + t306;
t257 = pkin(5) * t302 + t310 * pkin(10) + t306 * qJD(5) + qJD(6) * t82 - t216 * t365 - t346;
t81 = pkin(10) * t247 + t258;
t256 = t309 * pkin(10) - qJD(6) * t81 + t344;
t255 = t310 * t190 - t247 * t200;
t254 = qJD(6) * t247 - t309;
t136 = t166 * t222;
t28 = pkin(5) * t218 + pkin(10) * t136 + t267;
t135 = t247 * t222;
t29 = pkin(10) * t135 + t333;
t252 = t215 * t28 + t219 * t29;
t249 = t219 * t135 + t136 * t215;
t80 = t135 * t215 - t136 * t219;
t246 = -qJD(1) * t214 + t321;
t245 = -0.2e1 * qJD(2) * t150;
t244 = t197 * t217;
t201 = pkin(4) * t220 + pkin(5);
t242 = pkin(4) * t317 + t201 * t215;
t241 = -pkin(4) * t319 + t201 * t219;
t237 = -qJ(3) * t298 - t297;
t120 = qJD(1) * t237 + t196;
t139 = t206 + t237;
t240 = pkin(7) * t224 + qJD(1) * t139 + t120;
t239 = t216 * t34 + t220 * t41 + t84 * t292 - t293 * t88;
t238 = t149 * t218 + t223 * t298;
t78 = pkin(4) * t114 + t131;
t107 = -pkin(4) * t280 + (-pkin(7) + t283) * t300;
t175 = pkin(7) * t275 - t211;
t176 = t202 + t263;
t182 = -t203 - t212;
t226 = -t175 * t222 + (t176 * t222 + (t182 + t203) * t218) * qJD(2);
t188 = t221 * t200;
t186 = t218 * t200;
t170 = -qJ(3) * t302 + t207;
t128 = t150 * t303;
t126 = pkin(5) * t166 + t199;
t93 = -pkin(5) * t135 + t145;
t68 = pkin(4) * t165 - pkin(5) * t248;
t64 = t166 * t340 - t247 * t300;
t63 = qJD(2) * t236 + t247 * t340;
t44 = -pkin(5) * t64 + t107;
t20 = -pkin(5) * t227 + t78;
t17 = t335 + t362;
t16 = t268 + t363;
t15 = qJD(6) * t80 + t215 * t63 - t219 * t64;
t14 = qJD(6) * t249 + t215 * t64 + t219 * t63;
t7 = pkin(10) * t64 + t239;
t6 = pkin(5) * t298 - pkin(10) * t63 - qJD(5) * t333 + t269;
t4 = -t13 * t215 + t330;
t1 = [0, 0, 0, 0.2e1 * t186, t304 * t347, t311, -t312, 0, -pkin(7) * t311 + t218 * t264, pkin(7) * t312 + t222 * t264, t226, t218 * t245 + t222 * t240, -t218 * t240 + t222 * t245, pkin(7) * t226 + t120 * t179 + t139 * t150, -t113 * t217 * t222 + (t217 * t300 - t278) * t165 (-t163 * t217 + t165 * t221) * t300 + (-t328 + t114 * t217 + (t163 * t221 + t165 * t217) * qJD(4)) * t222, -t197 * t278 + t113 * t218 + (t217 * t246 + t323) * qJD(2), t197 * t280 - t114 * t218 + (-t163 * t222 + t221 * t246) * qJD(2), t197 * t298 + t186, t260 * t197 - t172 * t163 + t184 * t114 + (-t149 * t299 + t262) * t218 + (-t197 * t307 - t73 * t218) * qJD(4) + (-t149 * t296 + t326 + ((-t156 * t217 + t169) * qJD(1) + t72) * qJD(2)) * t222, -t234 * t197 - t172 * t165 + t184 * t113 + ((qJD(2) * t149 + qJD(4) * t123) * t217 + t284) * t218 + (-t149 * t295 - t327 + (-qJD(1) * t307 - t73) * qJD(2)) * t222, -t136 * t42 - t248 * t63, t135 * t42 - t136 * t227 - t248 * t64 - t63 * t97, t190 * t63 + t218 * t42 + (-qJD(1) * t136 - t248) * t298, t190 * t64 + t218 * t227 + (qJD(1) * t135 - t97) * t298, t190 * t298 + t186, t269 * t190 + t270 * t218 + t107 * t97 - t145 * t227 - t78 * t135 - t106 * t64 + (-t19 * t218 - t190 * t333) * qJD(5) + (qJD(1) * t267 + t18) * t298, -t239 * t190 + t266 * t218 - t107 * t248 + t145 * t42 - t78 * t136 + t106 * t63 + (-t333 * qJD(1) - t19) * t298, t14 * t349 + t8 * t80, t14 * t52 - t15 * t349 + t249 * t8 - t80 * t9, t14 * t181 + t218 * t8 + (qJD(1) * t80 + t349) * t298, -t15 * t181 - t218 * t9 + (qJD(1) * t249 + t52) * t298, t181 * t298 + t186 (-t215 * t7 + t219 * t6) * t181 + t282 * t218 - t44 * t52 + t93 * t9 - t20 * t249 + t59 * t15 + (-t181 * t252 - t218 * t5) * qJD(6) + ((-t215 * t29 + t219 * t28) * qJD(1) + t4) * t298, t11 * t218 + t59 * t14 + t20 * t80 + t44 * t349 + t93 * t8 + (-(-qJD(6) * t29 + t6) * t181 - t2 * t218) * t215 + (-(qJD(6) * t28 + t7) * t181 - t272 * t218) * t219 + (-qJD(1) * t252 - t5) * t298; 0, 0, 0, -t285, t304 * t225, 0, 0, 0, t225 * pkin(1) * t218, pkin(1) * t313 ((-t182 - t212) * t218 + (-t176 + t263) * t222) * qJD(1), -t170 * t302 + t128, 0.2e1 * t211 + (t150 * t222 + t170 * t218) * qJD(1), -qJ(3) * t175 - qJD(3) * t182 - t150 * t170 + (-t182 * t218 + (-t176 - t331) * t222) * qJD(1) * pkin(7), -t165 * t244 + t328 (-t114 - t324) * t221 + (-t113 + t325) * t217, -t197 * t296 + t188 + (-t197 * t316 - t323) * qJD(1), -t279 + (-t286 + (t163 - t301) * t222) * qJD(1), -t197 * t302, qJ(3) * t114 + t327 - t259 * t197 + t289 * t163 + (t149 * t221 - t217 * t320) * qJD(4) + (t221 * t238 - t72 * t222) * qJD(1), qJ(3) * t113 + t326 + t308 * t197 + t289 * t165 + (-t149 * t217 - t221 * t320) * qJD(4) + (-t217 * t238 + t73 * t222) * qJD(1), -t247 * t42 - t248 * t310, -t166 * t42 - t227 * t247 + t248 * t309 - t310 * t97, t248 * t302 + t255, -t265 + (-qJD(2) * t166 + t97) * t302, -t190 * t302, t78 * t166 - t199 * t227 + t305 * t97 + (t177 * t292 + (qJD(5) * t178 + t365) * t216 + t346) * t190 + t309 * t106 + (qJD(2) * t258 - t18) * t302, -t78 * t247 + t199 * t42 + t344 * t190 + t310 * t106 - t305 * t248 + (-qJD(2) * t306 + t19) * t302, t102 * t8 + t337 * t349, -t101 * t8 - t102 * t9 - t336 * t349 + t337 * t52, t337 * t181 + (qJD(2) * t102 - t349) * t302, -t336 * t181 + (-qJD(2) * t101 - t52) * t302, -t181 * t302, t20 * t101 + t126 * t9 + t336 * t59 - t332 * t52 + (t215 * t256 - t219 * t257) * t181 + ((-t215 * t82 + t219 * t81) * qJD(2) - t4) * t302, t20 * t102 + t126 * t8 + t337 * t59 + t332 * t349 + (t215 * t257 + t219 * t256) * t181 + (-(t215 * t81 + t219 * t82) * qJD(2) + t5) * t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t285, -t213 * t225 - t224, qJD(2) * t182 + t128 + t195, 0, 0, 0, 0, 0, -qJD(2) * t163 - t197 * t244 + t188, -t279 - qJD(2) * t165 + (-t217 * t298 - t286) * qJD(1), 0, 0, 0, 0, 0, -qJD(2) * t97 + t255, -t265 + (-t166 * t302 + t248) * qJD(2), 0, 0, 0, 0, 0 (-t166 * t290 + t215 * t254 + t345) * t181 + (t102 * t302 + t52) * qJD(2) (t254 * t219 + (qJD(6) * t166 - t310) * t215) * t181 + (-t101 * t302 - t349) * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165 * t163, -t163 ^ 2 + t165 ^ 2, t113 + t325, -t114 + t324, t200, -t149 * t165 + t197 * t73 + t228, t149 * t163 + t197 * t72 - t235, -t360, t355, t353, t350, t200, -t268 * t190 + (-t165 * t97 - t190 * t293 + t200 * t220) * pkin(4) + t351, t335 * t190 + (t165 * t248 - t190 * t292 - t200 * t216) * pkin(4) + t352, -t359, t356, t354, t341, t200, t241 * t200 - (t16 * t219 - t17 * t215) * t181 + t68 * t52 + (-t215 * t220 - t317) * t287 + (-t181 * t242 - t5) * qJD(6) + t364, -t242 * t200 - t219 * t3 + (t16 * t215 + t17 * t219) * t181 - t68 * t349 - (t219 * t220 - t319) * t287 + (-t181 * t241 - t330) * qJD(6) + t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t360, t355, t353, t350, t200, t19 * t190 + t351, t18 * t190 + t352, -t359, t356, t354, t341, t200 -(-t12 * t215 - t329) * t181 + (-t181 * t291 + t200 * t219 - t248 * t52) * pkin(5) + t342 (-t13 * t181 - t2) * t215 + (t12 * t181 - t272) * t219 + (-t181 * t290 - t200 * t215 + t248 * t349) * pkin(5) + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t359, t356, t354, t341, t200, t181 * t5 + t342, t181 * t4 - t219 * t272 + t368;];
tauc_reg  = t1;
