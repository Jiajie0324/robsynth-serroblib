% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR11_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR11_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR11_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR11_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR11_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR11_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:32:57
% EndTime: 2019-03-09 14:33:21
% DurationCPUTime: 13.87s
% Computational Cost: add. (19003->757), mult. (38998->952), div. (0->0), fcn. (25679->14), ass. (0->353)
t323 = sin(qJ(2));
t426 = qJD(1) * t323;
t299 = pkin(2) * t426;
t327 = cos(qJ(2));
t460 = qJ(3) * t327;
t375 = pkin(8) * t323 - t460;
t194 = qJD(1) * t375 + t299;
t425 = qJD(1) * t327;
t295 = pkin(7) * t425;
t247 = pkin(3) * t425 + t295;
t322 = sin(qJ(4));
t326 = cos(qJ(4));
t134 = -t194 * t322 + t326 * t247;
t446 = t322 * t323;
t367 = pkin(4) * t327 - pkin(9) * t446;
t417 = qJD(4) * t322;
t491 = pkin(2) + pkin(8);
t474 = pkin(9) + t491;
t538 = -qJD(1) * t367 + t474 * t417 - t134;
t135 = t326 * t194 + t322 * t247;
t253 = t474 * t326;
t398 = t326 * t426;
t537 = pkin(9) * t398 + qJD(4) * t253 + t135;
t422 = qJD(2) * t322;
t236 = t326 * t425 + t422;
t395 = t322 * t425;
t420 = qJD(2) * t326;
t238 = -t395 + t420;
t321 = sin(qJ(5));
t325 = cos(qJ(5));
t151 = t325 * t236 + t238 * t321;
t320 = sin(qJ(6));
t372 = -t236 * t321 + t325 * t238;
t489 = cos(qJ(6));
t520 = -t320 * t151 + t372 * t489;
t80 = t489 * t151 + t320 * t372;
t477 = t80 * t520;
t239 = t321 * t326 + t322 * t325;
t503 = qJD(4) + qJD(5);
t161 = t503 * t239;
t353 = t239 * t323;
t433 = qJD(1) * t353 + t161;
t414 = qJD(5) * t321;
t439 = t325 * t326;
t447 = t321 * t322;
t432 = -t321 * t417 - t322 * t414 + t325 * t398 - t426 * t447 + t439 * t503;
t528 = t520 ^ 2 - t80 ^ 2;
t279 = qJD(4) + t426;
t268 = qJD(5) + t279;
t303 = t323 * qJ(3);
t390 = -pkin(1) - t303;
t350 = -t327 * t491 + t390;
t181 = t350 * qJD(1);
t294 = pkin(7) * t426;
t529 = qJD(3) + t294;
t411 = pkin(3) * t426 + t529;
t188 = -qJD(2) * t491 + t411;
t112 = -t181 * t322 + t326 * t188;
t97 = -pkin(9) * t238 + t112;
t86 = pkin(4) * t279 + t97;
t113 = t181 * t326 + t188 * t322;
t98 = -pkin(9) * t236 + t113;
t90 = t321 * t98;
t44 = t325 * t86 - t90;
t516 = pkin(10) * t372;
t36 = t44 - t516;
t32 = pkin(5) * t268 + t36;
t92 = t325 * t98;
t45 = t321 * t86 + t92;
t532 = pkin(10) * t151;
t37 = t45 - t532;
t468 = t320 * t37;
t10 = t32 * t489 - t468;
t405 = t489 * t37;
t11 = t320 * t32 + t405;
t536 = -t10 * t80 + t11 * t520;
t410 = qJD(1) * qJD(2);
t393 = t323 * t410;
t408 = t327 * qJDD(1);
t533 = -t393 + t408;
t136 = qJD(4) * t236 - t326 * qJDD(2) + t322 * t533;
t137 = -qJD(4) * t395 + qJDD(2) * t322 + (qJD(2) * qJD(4) + t533) * t326;
t413 = qJD(5) * t325;
t365 = -t321 * t136 + t137 * t325 - t236 * t414 + t238 * t413;
t394 = qJD(6) * t489;
t412 = qJD(6) * t320;
t53 = t325 * t136 + t321 * t137 + t236 * t413 + t238 * t414;
t18 = t151 * t394 + t320 * t365 + t372 * t412 + t489 * t53;
t260 = qJD(6) + t268;
t526 = t260 * t80 - t18;
t392 = t327 * t410;
t409 = t323 * qJDD(1);
t351 = t392 + t409;
t235 = qJDD(4) + t351;
t225 = qJDD(5) + t235;
t278 = pkin(2) * t393;
t418 = qJD(3) * t323;
t343 = qJD(2) * t375 - t418;
t106 = qJD(1) * t343 + qJDD(1) * t350 + t278;
t277 = pkin(7) * t392;
t291 = pkin(7) * t409;
t391 = qJDD(3) + t277 + t291;
t145 = t351 * pkin(3) - qJDD(2) * t491 + t391;
t43 = -qJD(4) * t113 - t106 * t322 + t326 * t145;
t30 = pkin(4) * t235 + pkin(9) * t136 + t43;
t416 = qJD(4) * t326;
t403 = -t326 * t106 - t322 * t145 - t188 * t416;
t42 = -t181 * t417 - t403;
t35 = -pkin(9) * t137 + t42;
t9 = -qJD(5) * t45 + t325 * t30 - t321 * t35;
t6 = pkin(5) * t225 + pkin(10) * t53 + t9;
t8 = t321 * t30 + t325 * t35 + t86 * t413 - t98 * t414;
t7 = -pkin(10) * t365 + t8;
t1 = t32 * t394 + t320 * t6 - t37 * t412 + t489 * t7;
t319 = qJ(4) + qJ(5);
t304 = qJ(6) + t319;
t287 = sin(t304);
t288 = cos(t304);
t324 = sin(qJ(1));
t328 = cos(qJ(1));
t443 = t323 * t328;
t176 = t287 * t443 + t288 * t324;
t444 = t323 * t324;
t178 = -t287 * t444 + t288 * t328;
t312 = g(3) * t327;
t316 = qJD(2) * qJ(3);
t215 = t316 + t247;
t163 = pkin(4) * t236 + t215;
t93 = pkin(5) * t151 + t163;
t525 = g(1) * t176 - g(2) * t178 - t287 * t312 + t93 * t80 - t1;
t252 = t474 * t322;
t471 = t252 * t414 - t253 * t413 + t321 * t538 - t537 * t325;
t165 = -t325 * t252 - t321 * t253;
t470 = -qJD(5) * t165 + t537 * t321 + t325 * t538;
t19 = qJD(6) * t520 - t320 * t53 + t489 * t365;
t496 = t260 * t520 - t19;
t175 = -t287 * t324 + t288 * t443;
t177 = t287 * t328 + t288 * t444;
t2 = -qJD(6) * t11 - t320 * t7 + t489 * t6;
t500 = -g(1) * t175 - g(2) * t177 + t288 * t312 - t520 * t93 + t2;
t490 = pkin(3) + pkin(7);
t531 = -pkin(5) * t425 + pkin(10) * t433 + t470;
t530 = pkin(10) * t432 - t471;
t454 = t151 * t372;
t527 = -t151 ^ 2 + t372 ^ 2;
t370 = -t439 + t447;
t357 = t239 * t489 - t320 * t370;
t360 = -t320 * t239 - t370 * t489;
t401 = -g(1) * t443 - g(2) * t444 + t312;
t505 = -qJD(6) * t360 + t320 * t433 - t432 * t489;
t524 = t1 * t357 - t11 * t505 + t2 * t360 + t401;
t523 = t151 * t268 - t53;
t522 = t19 * t357 - t505 * t80;
t301 = sin(t319);
t302 = cos(t319);
t190 = t301 * t443 + t302 * t324;
t192 = -t301 * t444 + t302 * t328;
t521 = g(1) * t190 - g(2) * t192 + t151 * t163 - t301 * t312 - t8;
t209 = qJDD(6) + t225;
t519 = -t209 * t357 + t260 * t505;
t306 = t326 * pkin(4);
t290 = t306 + pkin(3);
t515 = t18 * t360;
t513 = t113 * t279 + t43;
t511 = t209 * t360;
t195 = t370 * t327;
t262 = t490 * t323;
t242 = t326 * t262;
t309 = t327 * pkin(2);
t430 = t309 + t303;
t487 = pkin(8) * t327;
t380 = t430 + t487;
t226 = -pkin(1) - t380;
t389 = pkin(9) * t327 - t226;
t123 = pkin(4) * t323 + t322 * t389 + t242;
t241 = t322 * t262;
t160 = t326 * t226 + t241;
t438 = t326 * t327;
t130 = -pkin(9) * t438 + t160;
t73 = t321 * t123 + t325 * t130;
t368 = t236 * t279;
t508 = t136 - t368;
t450 = t238 * t279;
t507 = -t137 + t450;
t208 = t326 * t235;
t506 = -t279 * t417 + t208;
t431 = pkin(4) * t416 + t290 * t426 + t529;
t504 = t320 * t432 + t433 * t489;
t377 = g(1) * t328 + g(2) * t324;
t189 = -t301 * t324 + t302 * t443;
t191 = t301 * t328 + t302 * t444;
t502 = -g(1) * t189 - g(2) * t191 + t302 * t312;
t437 = t326 * t328;
t217 = -t322 * t324 + t323 * t437;
t441 = t324 * t326;
t219 = t322 * t328 + t323 * t441;
t501 = -g(1) * t217 - g(2) * t219 + g(3) * t438;
t499 = t151 * t432 + t239 * t365;
t498 = -t372 * t163 + t502 + t9;
t497 = t215 * t279 - t235 * t491;
t495 = t268 * t372 - t365;
t494 = t370 * t53 - t372 * t433;
t492 = t8 * t239 - t370 * t9 + t432 * t45 - t433 * t44 + t401;
t329 = -pkin(9) - pkin(8);
t488 = pkin(4) * t322;
t484 = g(1) * t324;
t479 = g(2) * t328;
t478 = g(3) * t323;
t164 = t252 * t321 - t325 * t253;
t120 = pkin(10) * t370 + t164;
t121 = -pkin(10) * t239 + t165;
t68 = t120 * t489 - t320 * t121;
t473 = qJD(6) * t68 + t320 * t531 - t489 * t530;
t69 = t320 * t120 + t121 * t489;
t472 = -qJD(6) * t69 + t320 * t530 + t489 * t531;
t48 = t325 * t97 - t90;
t467 = qJD(6) * t357 + t504;
t464 = t239 * t394 - t370 * t412 + t504;
t289 = pkin(4) * t325 + pkin(5);
t47 = -t321 * t97 - t92;
t40 = t47 + t532;
t41 = t48 - t516;
t448 = t320 * t321;
t463 = -t320 * t40 - t489 * t41 + t289 * t394 + (-t321 * t412 + (t325 * t489 - t448) * qJD(5)) * pkin(4);
t399 = t489 * t321;
t462 = t320 * t41 - t489 * t40 - t289 * t412 + (-t321 * t394 + (-t320 * t325 - t399) * qJD(5)) * pkin(4);
t461 = pkin(7) * qJDD(2);
t459 = qJDD(2) * pkin(2);
t458 = t112 * t279;
t456 = t136 * t326;
t455 = t137 * t322;
t453 = t235 * t322;
t451 = t238 * t236;
t315 = -pkin(10) + t329;
t449 = t315 * t327;
t445 = t322 * t327;
t332 = qJD(1) ^ 2;
t442 = t323 * t332;
t440 = t324 * t327;
t436 = t327 * t328;
t435 = t327 * t329;
t434 = pkin(5) * t432 + t431;
t250 = pkin(5) * t302 + t306;
t263 = t490 * t327;
t429 = t328 * pkin(1) + t324 * pkin(7);
t317 = t323 ^ 2;
t318 = t327 ^ 2;
t428 = t317 - t318;
t427 = t317 + t318;
t424 = qJD(2) * t236;
t423 = qJD(2) * t238;
t421 = qJD(2) * t323;
t419 = qJD(2) * t327;
t415 = qJD(4) * t327;
t407 = pkin(4) * t445;
t404 = t322 * t443;
t292 = pkin(7) * t408;
t313 = qJDD(2) * qJ(3);
t314 = qJD(2) * qJD(3);
t402 = t292 + t313 + t314;
t212 = pkin(4) * t438 + t263;
t396 = t322 * t415;
t285 = qJ(3) + t488;
t387 = -qJD(2) * pkin(2) + qJD(3);
t72 = t325 * t123 - t130 * t321;
t298 = pkin(2) * t421;
t172 = t298 + t343;
t248 = t490 * t419;
t385 = -t172 * t322 + t326 * t248;
t384 = pkin(2) * t436 + qJ(3) * t443 + t429;
t383 = -t291 - t401;
t246 = t490 * t421;
t382 = t323 * t392;
t283 = g(1) * t440;
t381 = -g(2) * t436 + t283;
t379 = t427 * qJDD(1) * pkin(7);
t331 = qJD(2) ^ 2;
t378 = pkin(7) * t331 + t479;
t376 = -t370 * t225 - t268 * t433;
t373 = -t112 * t322 + t113 * t326;
t251 = t294 + t387;
t261 = -t295 - t316;
t371 = t251 * t327 + t261 * t323;
t369 = t279 * t322;
t366 = t390 - t309;
t196 = t239 * t327;
t54 = pkin(5) * t323 + pkin(10) * t196 + t72;
t55 = pkin(10) * t195 + t73;
t26 = -t320 * t55 + t489 * t54;
t27 = t320 * t54 + t489 * t55;
t362 = -0.2e1 * pkin(1) * t410 - t461;
t119 = t320 * t195 - t196 * t489;
t216 = t366 * qJD(1);
t356 = t216 * t426 + qJDD(3) - t383;
t355 = -t279 * t416 - t453;
t354 = -qJ(3) * t419 - t418;
t64 = t367 * qJD(2) + (t326 * t389 - t241) * qJD(4) + t385;
t347 = t323 * t420 + t396;
t74 = t326 * t172 - t226 * t417 + t322 * t248 + t262 * t416;
t70 = pkin(9) * t347 + t74;
t22 = t123 * t413 - t130 * t414 + t321 * t64 + t325 * t70;
t352 = -t225 * t239 - t268 * t432;
t348 = 0.2e1 * qJDD(1) * pkin(1) - t378;
t254 = -pkin(1) - t430;
t345 = t461 + (-qJD(1) * t254 - t216) * qJD(2);
t344 = -t327 * t377 - t478;
t149 = pkin(3) * t408 - qJD(1) * t246 + t402;
t23 = -qJD(5) * t73 - t321 * t70 + t325 * t64;
t138 = qJD(1) * t354 + qJDD(1) * t366 + t278;
t202 = t298 + t354;
t342 = qJD(1) * t202 + qJDD(1) * t254 + t138 + t378;
t166 = -pkin(4) * t396 + (-pkin(7) - t290) * t421;
t85 = t137 * pkin(4) + t149;
t184 = pkin(7) * t393 - t402;
t193 = t391 - t459;
t339 = qJD(2) * t371 - t184 * t327 + t193 * t323;
t338 = qJD(4) * t279 * t491 + t149 + t344;
t310 = t328 * pkin(7);
t276 = qJ(3) * t436;
t274 = qJ(3) * t440;
t272 = t327 * t442;
t257 = t428 * t332;
t256 = qJDD(2) * t327 - t323 * t331;
t255 = qJDD(2) * t323 + t327 * t331;
t249 = pkin(5) * t301 + t488;
t244 = pkin(3) + t250;
t243 = -qJ(3) * t425 + t299;
t228 = qJDD(1) * t318 - 0.2e1 * t382;
t227 = qJDD(1) * t317 + 0.2e1 * t382;
t220 = -t322 * t444 + t437;
t218 = t404 + t441;
t207 = pkin(4) * t399 + t320 * t289;
t206 = -pkin(4) * t448 + t289 * t489;
t185 = pkin(5) * t239 + t285;
t171 = 0.2e1 * t323 * t408 - 0.2e1 * t410 * t428;
t159 = -t226 * t322 + t242;
t144 = -pkin(5) * t195 + t212;
t118 = -t195 * t489 - t196 * t320;
t105 = pkin(4) * t238 + pkin(5) * t372;
t100 = t161 * t327 - t370 * t421;
t99 = qJD(2) * t353 + t195 * t503;
t75 = -qJD(4) * t160 + t385;
t71 = -pkin(5) * t100 + t166;
t39 = qJD(6) * t119 - t100 * t489 + t320 * t99;
t38 = -t320 * t100 - t195 * t394 - t196 * t412 - t489 * t99;
t31 = pkin(5) * t365 + t85;
t15 = pkin(10) * t100 + t22;
t14 = pkin(5) * t419 - pkin(10) * t99 + t23;
t13 = t36 * t489 - t468;
t12 = -t320 * t36 - t405;
t4 = -qJD(6) * t27 + t14 * t489 - t320 * t15;
t3 = qJD(6) * t26 + t320 * t14 + t15 * t489;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t479 + t484, t377, 0, 0, t227, t171, t255, t228, t256, 0, t323 * t362 + t327 * t348 + t283, t362 * t327 + (-t348 - t484) * t323, -t377 + 0.2e1 * t379, -g(1) * (-pkin(1) * t324 + t310) - g(2) * t429 + (pkin(7) ^ 2 * t427 + pkin(1) ^ 2) * qJDD(1), 0, -t255, -t256, t227, t171, t228, t379 + t339 - t377, t323 * t345 + t327 * t342 - t283, t345 * t327 + (-t342 + t484) * t323, pkin(7) * t339 - g(1) * t310 - g(2) * t384 + t138 * t254 + t216 * t202 - t366 * t484, t136 * t445 + (t322 * t421 - t326 * t415) * t238 (-t236 * t322 + t238 * t326) * t421 + (t456 + t455 + (t236 * t326 + t238 * t322) * qJD(4)) * t327 (t279 * t422 - t136) * t323 + (t355 + t423) * t327, t137 * t438 - t236 * t347 (t279 * t420 - t137) * t323 + (-t424 - t506) * t327, t235 * t323 + t279 * t419, -g(1) * t220 - g(2) * t218 + t137 * t263 + t159 * t235 - t236 * t246 + t279 * t75 + (-t215 * t420 + t43) * t323 + (qJD(2) * t112 + t149 * t326 - t215 * t417) * t327, g(1) * t219 - g(2) * t217 - t136 * t263 - t160 * t235 - t238 * t246 - t279 * t74 + (t215 * t422 - t42) * t323 + (-qJD(2) * t113 - t149 * t322 - t215 * t416) * t327, t136 * t159 - t137 * t160 - t236 * t74 - t238 * t75 + t283 + t373 * t421 + (-t479 + t322 * t43 - t326 * t42 + (t112 * t326 + t113 * t322) * qJD(4)) * t327, t42 * t160 + t113 * t74 + t43 * t159 + t112 * t75 + t149 * t263 - t215 * t246 - g(1) * (pkin(3) * t328 + t310) - g(2) * (pkin(8) * t436 + t384) + (-g(1) * (t366 - t487) - g(2) * pkin(3)) * t324, t196 * t53 + t372 * t99, t100 * t372 - t99 * t151 - t53 * t195 + t196 * t365, -t196 * t225 + t268 * t99 - t323 * t53 + t372 * t419, -t151 * t100 - t195 * t365, t100 * t268 - t151 * t419 + t195 * t225 - t323 * t365, t225 * t323 + t268 * t419, -g(1) * t192 - g(2) * t190 - t163 * t100 + t166 * t151 - t85 * t195 + t212 * t365 + t72 * t225 + t23 * t268 + t9 * t323 + t419 * t44, g(1) * t191 - g(2) * t189 + t163 * t99 + t166 * t372 - t196 * t85 - t212 * t53 - t22 * t268 - t225 * t73 - t323 * t8 - t419 * t45, t45 * t100 - t22 * t151 + t8 * t195 + t9 * t196 - t23 * t372 - t365 * t73 - t44 * t99 + t72 * t53 + t381, t8 * t73 + t45 * t22 + t9 * t72 + t44 * t23 + t85 * t212 + t163 * t166 - g(1) * (t290 * t328 + t310) - g(2) * (pkin(4) * t404 - t328 * t435 + t384) + (-g(1) * (-pkin(4) * t446 + t366 + t435) - g(2) * t290) * t324, -t119 * t18 - t38 * t520, t118 * t18 - t119 * t19 + t38 * t80 - t39 * t520, t119 * t209 - t18 * t323 - t260 * t38 + t419 * t520, t118 * t19 + t39 * t80, -t118 * t209 - t19 * t323 - t260 * t39 - t419 * t80, t209 * t323 + t260 * t419, -g(1) * t178 - g(2) * t176 + t10 * t419 + t118 * t31 + t144 * t19 + t2 * t323 + t209 * t26 + t260 * t4 + t39 * t93 + t71 * t80, g(1) * t177 - g(2) * t175 - t1 * t323 - t11 * t419 + t119 * t31 - t144 * t18 - t209 * t27 - t260 * t3 - t38 * t93 + t520 * t71, -t1 * t118 + t10 * t38 - t11 * t39 - t119 * t2 + t18 * t26 - t19 * t27 - t3 * t80 - t4 * t520 + t381, t1 * t27 + t11 * t3 + t2 * t26 + t10 * t4 + t31 * t144 + t93 * t71 - g(1) * (t244 * t328 + t310) - g(2) * (t249 * t443 - t315 * t436 + t384) + (-g(1) * (-t249 * t323 + t366 + t449) - g(2) * t244) * t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t257, t409, t272, t408, qJDD(2), pkin(1) * t442 + t383, t478 - t292 + (pkin(1) * t332 + t377) * t327, 0, 0, qJDD(2), -t409, -t408, -t272, t257, t272 (-pkin(2) * t323 + t460) * qJDD(1) + ((-t261 - t316) * t323 + (-t251 + t387) * t327) * qJD(1), -t243 * t425 + t356 - 0.2e1 * t459, t292 + 0.2e1 * t313 + 0.2e1 * t314 + (qJD(1) * t243 - g(3)) * t323 + (qJD(1) * t216 - t377) * t327, -t184 * qJ(3) - t261 * qJD(3) - t193 * pkin(2) - t216 * t243 - g(1) * (-pkin(2) * t443 + t276) - g(2) * (-pkin(2) * t444 + t274) - g(3) * t430 - t371 * qJD(1) * pkin(7), -t238 * t369 - t456 (-t137 - t450) * t326 + (t136 + t368) * t322 (-t238 * t327 - t279 * t446) * qJD(1) + t506, t326 * t368 + t455 (-t279 * t323 * t326 + t236 * t327) * qJD(1) + t355, -t279 * t425, qJ(3) * t137 - t112 * t425 - t134 * t279 + t411 * t236 + t338 * t322 + t326 * t497, -qJ(3) * t136 + t113 * t425 + t135 * t279 + t411 * t238 - t322 * t497 + t338 * t326, t134 * t238 + t135 * t236 + (-t113 * t426 - t136 * t491 - t43 + (t236 * t491 - t113) * qJD(4)) * t326 + (t112 * t426 + t137 * t491 - t42 + (-t238 * t491 + t112) * qJD(4)) * t322 - t401, -g(1) * t276 - g(2) * t274 - g(3) * t380 + t149 * qJ(3) - t112 * t134 - t113 * t135 + t411 * t215 + (-qJD(4) * t373 - t42 * t322 + t323 * t377 - t43 * t326) * t491, t494, t151 * t433 + t53 * t239 + t365 * t370 - t372 * t432, -t372 * t425 + t376, t499, t151 * t425 + t352, -t268 * t425, t151 * t431 + t163 * t432 + t164 * t225 + t85 * t239 + t268 * t470 + t285 * t365 + t301 * t344 - t425 * t44, -t163 * t433 - t165 * t225 - t268 * t471 - t285 * t53 + t302 * t344 - t370 * t85 + t372 * t431 + t425 * t45, -t151 * t471 + t164 * t53 - t165 * t365 - t372 * t470 - t492, t8 * t165 + t9 * t164 + t85 * t285 - g(1) * (t328 * t407 + t276) - g(2) * (t324 * t407 + t274) - g(3) * (t430 - t435) + t471 * t45 + t470 * t44 + (-g(3) * t488 + t377 * (pkin(2) - t329)) * t323 + t431 * t163, -t464 * t520 - t515, t18 * t357 - t19 * t360 + t464 * t80 + t505 * t520, -t260 * t464 - t425 * t520 + t511, t522, t425 * t80 + t519, -t260 * t425, -t10 * t425 + t185 * t19 + t209 * t68 + t260 * t472 + t287 * t344 + t31 * t357 + t434 * t80 - t505 * t93, t11 * t425 - t18 * t185 - t209 * t69 - t260 * t473 + t288 * t344 + t31 * t360 + t434 * t520 - t464 * t93, t10 * t464 + t18 * t68 - t19 * t69 - t472 * t520 - t473 * t80 - t524, t1 * t69 + t2 * t68 + t31 * t185 - g(1) * (t249 * t436 + t276) - g(2) * (t249 * t440 + t274) - g(3) * (t430 - t449) + t434 * t93 + (-g(3) * t249 + t377 * (pkin(2) - t315)) * t323 + t473 * t11 + t472 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t409, qJDD(2) + t272, -t317 * t332 - t331, qJD(2) * t261 + t277 + t356 - t459, 0, 0, 0, 0, 0, 0, -t279 * t369 + t208 - t424, -t279 ^ 2 * t326 - t423 - t453, t322 * t507 + t326 * t508, -qJD(2) * t215 + t513 * t326 + (t42 - t458) * t322 + t401, 0, 0, 0, 0, 0, 0, -qJD(2) * t151 + t376, -qJD(2) * t372 + t352, -t494 - t499, -qJD(2) * t163 + t492, 0, 0, 0, 0, 0, 0, -qJD(2) * t80 - t260 * t467 + t511, -qJD(2) * t520 + t519, t467 * t520 + t515 - t522, -qJD(2) * t93 - t10 * t467 + t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t451, -t236 ^ 2 + t238 ^ 2, -t508, -t451, t507, t235, -t215 * t238 + t501 + t513, g(1) * t218 - g(2) * t220 + t458 + t215 * t236 + (qJD(4) * t181 - t312) * t322 + t403, 0, 0, t454, t527, t523, -t454, t495, t225, -t268 * t47 + (-t151 * t238 + t225 * t325 - t268 * t414) * pkin(4) + t498, t268 * t48 + (-t225 * t321 - t238 * t372 - t268 * t413) * pkin(4) + t521, t45 * t372 + t48 * t151 - t44 * t151 + t47 * t372 + (-t321 * t365 + t325 * t53 + (-t151 * t325 + t321 * t372) * qJD(5)) * pkin(4), -t44 * t47 - t45 * t48 + (t8 * t321 + t9 * t325 - t163 * t238 + (-t321 * t44 + t325 * t45) * qJD(5) + t501) * pkin(4), t477, t528, t526, -t477, t496, t209, -t105 * t80 + t206 * t209 + t260 * t462 + t500, -t105 * t520 - t207 * t209 - t260 * t463 + t525, t18 * t206 - t19 * t207 - t462 * t520 - t463 * t80 + t536, t1 * t207 + t2 * t206 - t93 * t105 - g(1) * (-t249 * t324 + t250 * t443) - g(2) * (t249 * t328 + t250 * t444) + t250 * t312 + t463 * t11 + t462 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t454, t527, t523, -t454, t495, t225, t268 * t45 + t498, t268 * t44 + t521, 0, 0, t477, t528, t526, -t477, t496, t209, -t12 * t260 + (t209 * t489 - t260 * t412 - t372 * t80) * pkin(5) + t500, t13 * t260 + (-t209 * t320 - t260 * t394 - t372 * t520) * pkin(5) + t525, t12 * t520 + t13 * t80 + (t489 * t18 - t19 * t320 + (t320 * t520 - t489 * t80) * qJD(6)) * pkin(5) + t536, -t10 * t12 - t11 * t13 + (t1 * t320 + t2 * t489 - t93 * t372 + (-t10 * t320 + t11 * t489) * qJD(6) + t502) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t477, t528, t526, -t477, t496, t209, t11 * t260 + t500, t10 * t260 + t525, 0, 0;];
tau_reg  = t5;
