% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:58
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRRP11_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:56:59
% EndTime: 2019-05-06 18:57:26
% DurationCPUTime: 17.68s
% Computational Cost: add. (67701->651), mult. (140420->879), div. (0->0), fcn. (89967->8), ass. (0->473)
t809 = sin(qJ(2));
t803 = t809 ^ 2;
t816 = qJD(1) ^ 2;
t796 = t803 * t816;
t815 = qJD(2) ^ 2;
t783 = -t796 - t815;
t813 = cos(qJ(2));
t854 = t809 * t813 * t816;
t776 = -qJDD(2) + t854;
t877 = t813 * t776;
t721 = -t783 * t809 + t877;
t866 = qJD(1) * qJD(2);
t793 = t813 * t866;
t864 = qJDD(1) * t809;
t766 = 0.2e1 * t793 + t864;
t810 = sin(qJ(1));
t814 = cos(qJ(1));
t669 = t721 * t810 - t766 * t814;
t962 = pkin(6) * t669;
t673 = t721 * t814 + t766 * t810;
t961 = pkin(6) * t673;
t808 = sin(qJ(4));
t812 = cos(qJ(4));
t869 = qJD(1) * t813;
t758 = qJD(2) * t808 + t812 * t869;
t760 = qJD(2) * t812 - t808 * t869;
t807 = sin(qJ(5));
t811 = cos(qJ(5));
t700 = t811 * t758 + t760 * t807;
t702 = -t758 * t807 + t760 * t811;
t639 = t702 * t700;
t767 = t793 + t864;
t751 = qJDD(4) + t767;
t746 = qJDD(5) + t751;
t946 = t639 - t746;
t960 = pkin(5) * t946;
t804 = t813 ^ 2;
t883 = t804 * t816;
t784 = t815 + t883;
t775 = qJDD(2) + t854;
t894 = t775 * t809;
t723 = t784 * t813 + t894;
t848 = t809 * t866;
t862 = qJDD(1) * t813;
t765 = -0.2e1 * t848 + t862;
t670 = t723 * t810 - t765 * t814;
t959 = pkin(6) * t670;
t674 = t723 * t814 + t765 * t810;
t958 = pkin(6) * t674;
t878 = t813 * t775;
t718 = -t784 * t809 + t878;
t957 = pkin(1) * t718;
t956 = pkin(7) * t718;
t955 = pkin(7) * t721;
t782 = -t796 + t815;
t720 = -t782 * t809 + t878;
t861 = qJDD(1) * t814;
t954 = t720 * t810 - t809 * t861;
t863 = qJDD(1) * t810;
t953 = t720 * t814 + t809 * t863;
t952 = 2 * qJD(3);
t930 = pkin(2) + pkin(8);
t893 = t776 * t809;
t715 = t783 * t813 + t893;
t951 = pkin(1) * t715;
t950 = pkin(7) * t715;
t949 = pkin(7) * t723;
t711 = t760 * t758;
t940 = -t711 + t751;
t948 = t808 * t940;
t947 = t812 * t940;
t908 = t946 * t807;
t907 = t946 * t811;
t785 = -t815 + t883;
t724 = t785 * t813 + t893;
t945 = t724 * t810 - t813 * t861;
t944 = t724 * t814 + t810 * t862;
t836 = t767 + t793;
t943 = qJ(3) * t836;
t768 = -t848 + t862;
t842 = t808 * qJDD(2) + t812 * t768;
t694 = -qJD(4) * t760 - t842;
t695 = -t758 * qJD(4) + t812 * qJDD(2) - t808 * t768;
t604 = -qJD(5) * t700 + t694 * t807 + t695 * t811;
t870 = qJD(1) * t809;
t789 = qJD(4) + t870;
t781 = qJD(5) + t789;
t681 = t781 * t700;
t942 = t604 - t681;
t902 = t758 * t789;
t653 = t695 + t902;
t939 = t768 * pkin(3) - pkin(8) * t883;
t938 = -pkin(2) * t848 + t870 * t952;
t777 = pkin(3) * t870 - qJD(2) * pkin(8);
t778 = t810 * g(1) - t814 * g(2);
t830 = -qJDD(1) * pkin(1) - t778;
t818 = t830 - t938 - t943;
t610 = -t777 * t870 + (-pkin(3) * t804 - pkin(7)) * t816 - t930 * t768 + t818;
t779 = g(1) * t814 + g(2) * t810;
t743 = -pkin(1) * t816 + qJDD(1) * pkin(7) - t779;
t728 = t813 * g(3) + t809 * t743;
t916 = qJ(3) * t809;
t929 = pkin(2) * t813;
t838 = -t916 - t929;
t763 = t838 * qJD(1);
t829 = -qJDD(2) * pkin(2) - t815 * qJ(3) + t763 * t870 + qJDD(3) + t728;
t624 = -t775 * pkin(8) + (t767 - t793) * pkin(3) + t829;
t556 = t808 * t610 - t812 * t624;
t536 = pkin(4) * t940 - pkin(9) * t653 - t556;
t557 = t812 * t610 + t808 * t624;
t730 = pkin(4) * t789 - pkin(9) * t760;
t749 = t758 ^ 2;
t542 = -pkin(4) * t749 + pkin(9) * t694 - t730 * t789 + t557;
t477 = -t811 * t536 + t807 * t542;
t937 = qJ(6) * t681 + 0.2e1 * qJD(6) * t702 + t477 + t960;
t936 = -t785 * t809 + t877;
t698 = t700 ^ 2;
t780 = t781 ^ 2;
t628 = -t780 - t698;
t566 = t628 * t807 - t907;
t567 = t628 * t811 + t908;
t511 = t566 * t812 + t567 * t808;
t512 = -t808 * t566 + t567 * t812;
t935 = pkin(3) * t511 + pkin(4) * t566 - qJ(3) * t512;
t844 = -t811 * t694 + t807 * t695;
t603 = -qJD(5) * t702 - t844;
t668 = pkin(5) * t781 - qJ(6) * t702;
t934 = t603 * qJ(6) - 0.2e1 * qJD(6) * t700 - t781 * t668;
t933 = -t694 * pkin(4) - t749 * pkin(9) + t760 * t730;
t799 = t809 * g(3);
t932 = (qJD(1) * t763 + t743) * t813 - t815 * pkin(2) - t799;
t931 = -t603 * pkin(5) - t698 * qJ(6) + t702 * t668 + qJDD(6);
t699 = t702 ^ 2;
t750 = t760 ^ 2;
t786 = t789 ^ 2;
t576 = t604 + t681;
t825 = (-qJD(5) + t781) * t702 - t844;
t521 = -t576 * t811 + t807 * t825;
t523 = t576 * t807 + t811 * t825;
t472 = t521 * t812 + t523 * t808;
t607 = -t698 - t699;
t452 = t472 * t809 + t607 * t813;
t474 = -t808 * t521 + t523 * t812;
t420 = t452 * t810 - t474 * t814;
t928 = pkin(6) * t420;
t572 = (qJD(5) + t781) * t702 + t844;
t481 = t511 * t809 + t572 * t813;
t439 = t481 * t810 - t512 * t814;
t927 = pkin(6) * t439;
t657 = -t699 - t780;
t619 = t639 + t746;
t910 = t619 * t807;
t584 = t657 * t811 - t910;
t909 = t619 * t811;
t585 = -t657 * t807 - t909;
t532 = t584 * t812 + t585 * t808;
t490 = t532 * t809 + t813 * t942;
t533 = -t808 * t584 + t585 * t812;
t455 = t490 * t810 - t533 * t814;
t926 = pkin(6) * t455;
t871 = t803 + t804;
t770 = t871 * qJDD(1);
t773 = t796 + t883;
t707 = t770 * t810 + t773 * t814;
t925 = pkin(6) * t707;
t451 = -t472 * t813 + t607 * t809;
t924 = pkin(7) * t451;
t480 = -t511 * t813 + t572 * t809;
t923 = pkin(7) * t480;
t489 = -t532 * t813 + t809 * t942;
t922 = pkin(7) * t489;
t921 = pkin(9) * t521;
t920 = pkin(9) * t566;
t919 = pkin(9) * t584;
t918 = t816 * pkin(7);
t478 = t807 * t536 + t811 * t542;
t430 = -t477 * t811 + t478 * t807;
t915 = t430 * t812;
t444 = -qJ(6) * t604 - t937;
t914 = t444 * t807;
t913 = t444 * t811;
t860 = qJDD(2) * qJ(3);
t819 = t860 + t932;
t623 = (t952 + t777) * qJD(2) + t819 + t939;
t560 = t623 + t933;
t912 = t560 * t807;
t911 = t560 * t811;
t685 = t711 + t751;
t906 = t685 * t812;
t742 = -t830 + t918;
t904 = t742 * t809;
t903 = t742 * t813;
t899 = t765 * t813;
t897 = t766 * t809;
t891 = t781 * t807;
t890 = t781 * t811;
t885 = t789 * t808;
t884 = t789 * t812;
t882 = t808 * t430;
t881 = t808 * t623;
t880 = t808 * t685;
t879 = t812 * t623;
t876 = -pkin(1) * t474 + pkin(7) * t452;
t875 = -pkin(1) * t512 + pkin(7) * t481;
t874 = -pkin(1) * t533 + pkin(7) * t490;
t873 = pkin(1) * t773 + pkin(7) * t770;
t865 = qJD(3) * qJD(2);
t859 = -t750 - t786;
t858 = t809 * t639;
t857 = t813 * t639;
t856 = t809 * t711;
t855 = t813 * t711;
t847 = -pkin(4) * t607 + pkin(9) * t523;
t846 = -pkin(4) * t572 + pkin(9) * t567;
t845 = -pkin(4) * t942 + pkin(9) * t585;
t431 = t477 * t807 + t811 * t478;
t729 = t813 * t743 - t799;
t656 = t728 * t809 + t813 * t729;
t713 = -t778 * t810 - t814 * t779;
t841 = t810 * t854;
t840 = t814 * t854;
t772 = -t810 * t816 + t861;
t839 = -pkin(6) * t772 - g(3) * t810;
t414 = pkin(3) * t472 + pkin(4) * t521 - qJ(3) * t474;
t837 = pkin(2) * t809 - qJ(3) * t813;
t503 = -t812 * t556 + t808 * t557;
t504 = t808 * t556 + t812 * t557;
t655 = t728 * t813 - t729 * t809;
t835 = t782 * t813 + t894;
t712 = t778 * t814 - t779 * t810;
t834 = t695 - t902;
t833 = pkin(3) * t572 - t512 * t930;
t832 = pkin(3) * t942 - t533 * t930;
t831 = pkin(3) * t607 - t474 * t930;
t427 = pkin(3) * t532 + pkin(4) * t584 - qJ(3) * t533 - t478;
t828 = t478 + t934;
t824 = (-qJD(4) + t789) * t760 - t842;
t823 = -pkin(1) * t451 - qJ(3) * t607 + t472 * t930;
t822 = -pkin(1) * t480 - qJ(3) * t572 + t511 * t930;
t821 = -pkin(1) * t489 - qJ(3) * t942 + t532 * t930;
t820 = -0.2e1 * t865 - t932;
t658 = t819 + 0.2e1 * t865;
t817 = t768 * pkin(2) + t742 + t938;
t502 = t560 + t931;
t774 = -t796 + t883;
t771 = t814 * t816 + t863;
t761 = t837 * qJDD(1);
t753 = t871 * t866;
t739 = -pkin(6) * t771 + g(3) * t814;
t736 = -t750 + t786;
t735 = t749 - t786;
t734 = qJDD(2) * t810 + t753 * t814;
t733 = t767 * t813 - t803 * t866;
t732 = -qJDD(2) * t814 + t753 * t810;
t731 = -t768 * t809 - t804 * t866;
t716 = t836 * t809;
t714 = (t768 - t848) * t813;
t709 = t750 - t749;
t708 = t770 * t814 - t773 * t810;
t706 = pkin(6) * t708;
t705 = -t897 + t899;
t704 = t765 * t809 + t766 * t813;
t697 = -t786 - t749;
t691 = t733 * t814 - t841;
t690 = t731 * t814 + t841;
t689 = t733 * t810 + t840;
t688 = t731 * t810 - t840;
t683 = -t749 - t750;
t678 = -t699 + t780;
t677 = t698 - t780;
t667 = -t903 - t950;
t666 = -t904 - t956;
t665 = (t758 * t812 - t760 * t808) * t789;
t664 = (t758 * t808 + t760 * t812) * t789;
t663 = t705 * t814 - t774 * t810;
t662 = t705 * t810 + t774 * t814;
t660 = t728 - t957;
t659 = t729 - t951;
t648 = (qJD(4) + t789) * t760 + t842;
t646 = qJ(3) * t773 + t829;
t645 = pkin(2) * t773 + t658;
t644 = -t695 * t812 + t760 * t885;
t643 = -t695 * t808 - t760 * t884;
t642 = t694 * t808 - t758 * t884;
t641 = -t694 * t812 - t758 * t885;
t640 = t817 + t943;
t638 = -t664 * t809 + t751 * t813;
t636 = t699 - t698;
t635 = -t735 * t812 + t880;
t634 = t736 * t808 - t947;
t633 = -t735 * t808 - t906;
t632 = -t736 * t812 - t948;
t631 = -t808 * t859 - t906;
t630 = t812 * t859 - t880;
t629 = -t918 + (-t765 - t768) * pkin(2) + t818;
t627 = (t766 + t836) * qJ(3) + t817;
t626 = t656 * t814 - t742 * t810;
t625 = t656 * t810 + t742 * t814;
t622 = t697 * t812 - t948;
t621 = t808 * t697 + t947;
t615 = (-t700 * t811 + t702 * t807) * t781;
t614 = (-t700 * t807 - t702 * t811) * t781;
t613 = pkin(2) * t775 - qJ(3) * t784 - t829 + t957;
t612 = -t643 * t809 + t855;
t611 = -t641 * t809 - t855;
t609 = t951 + pkin(2) * t783 + (-qJDD(2) + t776) * qJ(3) + t820;
t606 = t658 * t813 + t809 * t829;
t605 = t658 * t809 - t813 * t829;
t600 = t808 * t653 + t812 * t824;
t599 = t648 * t812 + t808 * t834;
t598 = -t653 * t812 + t808 * t824;
t597 = t648 * t808 - t812 * t834;
t596 = -pkin(2) * t897 + t627 * t813 + t950;
t595 = -qJ(3) * t899 - t629 * t809 + t956;
t594 = -t645 * t809 + t646 * t813;
t593 = -t632 * t809 + t653 * t813;
t592 = -t633 * t809 + t813 * t824;
t591 = t677 * t811 - t910;
t590 = -t678 * t807 - t907;
t589 = t677 * t807 + t909;
t588 = t678 * t811 - t908;
t587 = t630 * t809 + t813 * t834;
t586 = -t630 * t813 + t809 * t834;
t580 = t621 * t809 + t648 * t813;
t579 = -t621 * t813 + t648 * t809;
t578 = -t597 * t809 + t709 * t813;
t571 = t604 * t811 - t702 * t891;
t570 = t604 * t807 + t702 * t890;
t569 = -t603 * t807 + t700 * t890;
t568 = t603 * t811 + t700 * t891;
t563 = t598 * t809 + t683 * t813;
t562 = -t598 * t813 + t683 * t809;
t559 = t606 * t814 - t640 * t810;
t558 = t606 * t810 + t640 * t814;
t554 = t614 * t808 - t615 * t812;
t553 = -t614 * t812 - t615 * t808;
t552 = -t553 * t809 + t746 * t813;
t551 = t553 * t813 + t746 * t809;
t550 = -pkin(1) * t605 + pkin(2) * t829 - qJ(3) * t658;
t549 = t587 * t814 + t631 * t810;
t548 = t587 * t810 - t631 * t814;
t547 = t580 * t814 + t622 * t810;
t546 = t580 * t810 - t622 * t814;
t545 = -pkin(5) * t942 - qJ(6) * t619;
t544 = pkin(3) * t598 - qJ(3) * t600;
t543 = -pkin(7) * t605 - t640 * t837;
t540 = t589 * t808 - t591 * t812;
t539 = t588 * t808 - t590 * t812;
t538 = -t589 * t812 - t591 * t808;
t537 = -t588 * t812 - t590 * t808;
t528 = t563 * t814 + t600 * t810;
t527 = t563 * t810 - t600 * t814;
t526 = pkin(3) * t834 - t631 * t930 - t881;
t525 = pkin(3) * t648 - t622 * t930 + t879;
t524 = t911 - t919;
t522 = -t572 * t811 - t807 * t942;
t520 = -t572 * t807 + t811 * t942;
t516 = t570 * t808 - t571 * t812;
t515 = t568 * t808 - t569 * t812;
t514 = -t570 * t812 - t571 * t808;
t513 = -t568 * t812 - t569 * t808;
t510 = pkin(3) * t630 - qJ(3) * t631 - t557;
t506 = t912 - t920;
t505 = pkin(3) * t621 - qJ(3) * t622 - t556;
t501 = t552 * t814 - t554 * t810;
t500 = t552 * t810 + t554 * t814;
t499 = -t514 * t809 + t857;
t498 = -t513 * t809 - t857;
t497 = t514 * t813 + t858;
t496 = t513 * t813 - t858;
t495 = -t537 * t809 + t576 * t813;
t494 = -t538 * t809 + t813 * t825;
t493 = t537 * t813 + t576 * t809;
t492 = t538 * t813 + t809 * t825;
t491 = -pkin(1) * t586 - qJ(3) * t834 + t630 * t930 - t879;
t487 = -qJ(6) * t657 + t502;
t486 = -pkin(1) * t579 - qJ(3) * t648 + t621 * t930 - t881;
t485 = t503 * t809 + t623 * t813;
t484 = -t503 * t813 + t623 * t809;
t483 = t845 + t912;
t482 = t846 - t911;
t475 = -pkin(5) * t572 + qJ(6) * t628 - qJD(2) * t777 + t820 - t860 - t931 - t933 - t939;
t473 = t520 * t808 - t522 * t812;
t471 = -t520 * t812 - t522 * t808;
t467 = pkin(3) * t683 - t600 * t930 - t504;
t466 = t495 * t814 - t539 * t810;
t465 = t494 * t814 - t540 * t810;
t464 = t495 * t810 + t539 * t814;
t463 = t494 * t810 + t540 * t814;
t462 = -t471 * t809 + t636 * t813;
t461 = t471 * t813 + t636 * t809;
t460 = t499 * t814 - t516 * t810;
t459 = t498 * t814 - t515 * t810;
t458 = t499 * t810 + t516 * t814;
t457 = t498 * t810 + t515 * t814;
t456 = t490 * t814 + t533 * t810;
t454 = pkin(6) * t456;
t453 = pkin(3) * t503 - qJ(3) * t504;
t449 = -pkin(7) * t586 + t510 * t813 - t526 * t809;
t448 = -pkin(5) * t698 + t828;
t447 = -pkin(7) * t579 + t505 * t813 - t525 * t809;
t446 = -pkin(1) * t562 - qJ(3) * t683 + t598 * t930 + t503;
t445 = pkin(3) * t623 - t504 * t930;
t443 = t485 * t814 + t504 * t810;
t442 = t485 * t810 - t504 * t814;
t441 = t487 * t811 - t545 * t807 - t919;
t440 = t481 * t814 + t512 * t810;
t438 = pkin(6) * t440;
t437 = qJ(6) * t907 - t475 * t807 - t920;
t436 = (t576 + t604) * qJ(6) + t937;
t435 = t487 * t807 + t545 * t811 + t845;
t434 = qJ(6) * t908 + t475 * t811 + t846;
t433 = qJ(6) * t825 + (-t607 - t698) * pkin(5) + t828;
t432 = -pkin(7) * t562 - t467 * t809 + t544 * t813;
t428 = -pkin(5) * t502 + qJ(6) * t448;
t426 = -pkin(4) * t560 + pkin(9) * t431;
t425 = -pkin(1) * t484 - qJ(3) * t623 + t503 * t930;
t424 = t462 * t814 - t473 * t810;
t423 = t462 * t810 + t473 * t814;
t422 = -t477 + t935;
t421 = t452 * t814 + t474 * t810;
t419 = pkin(6) * t421;
t418 = -t430 - t921;
t417 = -t812 * t483 - t808 * t524 + t832;
t416 = t431 + t847;
t415 = (t657 + t698) * pkin(5) + t427 - t934;
t413 = t448 * t811 - t914;
t412 = t448 * t807 + t913;
t410 = -t812 * t482 - t808 * t506 + t833;
t409 = t444 + t935 - t960;
t408 = -pkin(5) * t576 + t414;
t407 = t483 * t808 - t524 * t812 + t821;
t406 = -pkin(7) * t484 - t445 * t809 + t453 * t813;
t405 = t482 * t808 - t506 * t812 + t822;
t404 = t431 * t812 - t882;
t403 = t431 * t808 + t915;
t402 = -t433 * t807 + t436 * t811 - t921;
t401 = t403 * t809 + t560 * t813;
t400 = -t403 * t813 + t560 * t809;
t399 = t433 * t811 + t436 * t807 + t847;
t398 = -t812 * t435 - t808 * t441 + t832;
t397 = -t812 * t434 - t808 * t437 + t833;
t396 = t435 * t808 - t441 * t812 + t821;
t395 = -t417 * t809 + t427 * t813 - t922;
t394 = -t808 * t412 + t413 * t812;
t393 = t412 * t812 + t413 * t808;
t392 = t434 * t808 - t437 * t812 + t822;
t391 = -t410 * t809 + t422 * t813 - t923;
t390 = -pkin(9) * t412 - qJ(6) * t913 - t428 * t807;
t389 = t393 * t809 + t502 * t813;
t388 = -t393 * t813 + t502 * t809;
t387 = -pkin(4) * t502 + pkin(9) * t413 - qJ(6) * t914 + t428 * t811;
t386 = -t812 * t416 - t808 * t418 + t831;
t385 = -t398 * t809 + t415 * t813 - t922;
t384 = t401 * t814 + t404 * t810;
t383 = t401 * t810 - t404 * t814;
t382 = -t397 * t809 + t409 * t813 - t923;
t381 = t416 * t808 - t418 * t812 + t823;
t380 = pkin(3) * t403 + pkin(4) * t430 - qJ(3) * t404;
t379 = -t812 * t399 - t808 * t402 + t831;
t378 = -t386 * t809 + t414 * t813 - t924;
t377 = t389 * t814 + t394 * t810;
t376 = t389 * t810 - t394 * t814;
t375 = t399 * t808 - t402 * t812 + t823;
t374 = pkin(3) * t560 + pkin(9) * t882 - t404 * t930 - t812 * t426;
t373 = -t379 * t809 + t408 * t813 - t924;
t372 = pkin(3) * t393 + pkin(4) * t412 + pkin(5) * t444 - qJ(3) * t394;
t371 = -pkin(1) * t400 + pkin(9) * t915 - qJ(3) * t560 + t403 * t930 + t808 * t426;
t370 = pkin(3) * t502 - t812 * t387 - t808 * t390 - t394 * t930;
t369 = -pkin(7) * t400 - t374 * t809 + t380 * t813;
t368 = -pkin(1) * t388 - qJ(3) * t502 + t808 * t387 - t812 * t390 + t393 * t930;
t367 = -pkin(7) * t388 - t370 * t809 + t372 * t813;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t771, -t772, 0, t713, 0, 0, 0, 0, 0, 0, -t674, t673, t708, t626, 0, 0, 0, 0, 0, 0, t708, t674, -t673, t559, 0, 0, 0, 0, 0, 0, t547, t549, t528, t443, 0, 0, 0, 0, 0, 0, t440, t456, t421, t384, 0, 0, 0, 0, 0, 0, t440, t456, t421, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t772, -t771, 0, t712, 0, 0, 0, 0, 0, 0, -t670, t669, t707, t625, 0, 0, 0, 0, 0, 0, t707, t670, -t669, t558, 0, 0, 0, 0, 0, 0, t546, t548, t527, t442, 0, 0, 0, 0, 0, 0, t439, t455, t420, t383, 0, 0, 0, 0, 0, 0, t439, t455, t420, t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t718, t715, 0, -t655, 0, 0, 0, 0, 0, 0, 0, -t718, -t715, t605, 0, 0, 0, 0, 0, 0, t579, t586, t562, t484, 0, 0, 0, 0, 0, 0, t480, t489, t451, t400, 0, 0, 0, 0, 0, 0, t480, t489, t451, t388; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t772, 0, -t771, 0, t839, -t739, -t712, -pkin(6) * t712, t691, t663, t953, t690, t944, t734, -t660 * t810 + t666 * t814 + t959, -t659 * t810 + t667 * t814 - t962, t655 * t814 - t925, -pkin(6) * t625 - (pkin(1) * t810 - pkin(7) * t814) * t655, t734, -t953, -t944, t691, t663, t690, t594 * t814 - t761 * t810 - t925, t595 * t814 - t613 * t810 - t959, t596 * t814 - t609 * t810 + t962, -pkin(6) * t558 + t543 * t814 - t550 * t810, t612 * t814 - t644 * t810, t578 * t814 - t599 * t810, t593 * t814 - t634 * t810, t611 * t814 - t642 * t810, t592 * t814 - t635 * t810, t638 * t814 - t665 * t810, -pkin(6) * t546 + t447 * t814 - t486 * t810, -pkin(6) * t548 + t449 * t814 - t491 * t810, -pkin(6) * t527 + t432 * t814 - t446 * t810, -pkin(6) * t442 + t406 * t814 - t425 * t810, t460, t424, t466, t459, t465, t501, t391 * t814 - t405 * t810 - t927, t395 * t814 - t407 * t810 - t926, t378 * t814 - t381 * t810 - t928, -pkin(6) * t383 + t369 * t814 - t371 * t810, t460, t424, t466, t459, t465, t501, t382 * t814 - t392 * t810 - t927, t385 * t814 - t396 * t810 - t926, t373 * t814 - t375 * t810 - t928, -pkin(6) * t376 + t367 * t814 - t368 * t810; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t771, 0, t772, 0, t739, t839, t713, pkin(6) * t713, t689, t662, t954, t688, t945, t732, t660 * t814 + t666 * t810 - t958, t659 * t814 + t667 * t810 + t961, t655 * t810 + t706, pkin(6) * t626 - (-pkin(1) * t814 - pkin(7) * t810) * t655, t732, -t954, -t945, t689, t662, t688, t594 * t810 + t761 * t814 + t706, t595 * t810 + t613 * t814 + t958, t596 * t810 + t609 * t814 - t961, pkin(6) * t559 + t543 * t810 + t550 * t814, t612 * t810 + t644 * t814, t578 * t810 + t599 * t814, t593 * t810 + t634 * t814, t611 * t810 + t642 * t814, t592 * t810 + t635 * t814, t638 * t810 + t665 * t814, pkin(6) * t547 + t447 * t810 + t486 * t814, pkin(6) * t549 + t449 * t810 + t491 * t814, pkin(6) * t528 + t432 * t810 + t446 * t814, pkin(6) * t443 + t406 * t810 + t425 * t814, t458, t423, t464, t457, t463, t500, t391 * t810 + t405 * t814 + t438, t395 * t810 + t407 * t814 + t454, t378 * t810 + t381 * t814 + t419, pkin(6) * t384 + t369 * t810 + t371 * t814, t458, t423, t464, t457, t463, t500, t382 * t810 + t392 * t814 + t438, t385 * t810 + t396 * t814 + t454, t373 * t810 + t375 * t814 + t419, pkin(6) * t377 + t367 * t810 + t368 * t814; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t778, t779, 0, 0, t716, t704, t835, t714, -t936, 0, pkin(1) * t765 + t903 - t949, -pkin(1) * t766 - t904 + t955, t656 + t873, pkin(1) * t742 + pkin(7) * t656, 0, -t835, t936, t716, t704, t714, t645 * t813 + t646 * t809 + t873, t949 + t813 * t629 + (-pkin(1) - t916) * t765, -t955 + t809 * t627 + (pkin(1) + t929) * t766, pkin(7) * t606 + (pkin(1) - t838) * t640, t643 * t813 + t856, t597 * t813 + t709 * t809, t632 * t813 + t653 * t809, t641 * t813 - t856, t633 * t813 + t809 * t824, t664 * t813 + t751 * t809, -pkin(1) * t622 + pkin(7) * t580 + t505 * t809 + t525 * t813, -pkin(1) * t631 + pkin(7) * t587 + t510 * t809 + t526 * t813, -pkin(1) * t600 + pkin(7) * t563 + t467 * t813 + t544 * t809, -pkin(1) * t504 + pkin(7) * t485 + t445 * t813 + t453 * t809, t497, t461, t493, t496, t492, t551, t410 * t813 + t422 * t809 + t875, t417 * t813 + t427 * t809 + t874, t386 * t813 + t414 * t809 + t876, -pkin(1) * t404 + pkin(7) * t401 + t374 * t813 + t380 * t809, t497, t461, t493, t496, t492, t551, t397 * t813 + t409 * t809 + t875, t398 * t813 + t415 * t809 + t874, t379 * t813 + t408 * t809 + t876, -pkin(1) * t394 + pkin(7) * t389 + t370 * t813 + t372 * t809;];
tauB_reg  = t1;
