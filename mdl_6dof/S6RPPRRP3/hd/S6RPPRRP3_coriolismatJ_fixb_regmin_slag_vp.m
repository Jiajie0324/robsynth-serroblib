% Calculate minimal parameter regressor of coriolis matrix for
% S6RPPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPRRP3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:03:51
% EndTime: 2019-03-09 02:03:59
% DurationCPUTime: 3.33s
% Computational Cost: add. (3064->370), mult. (5388->455), div. (0->0), fcn. (4442->6), ass. (0->277)
t210 = sin(qJ(5));
t207 = t210 ^ 2;
t212 = cos(qJ(5));
t208 = t212 ^ 2;
t309 = t207 + t208;
t260 = qJD(4) * t309;
t295 = t210 * qJD(6);
t369 = pkin(8) * t260 + t295;
t213 = cos(qJ(4));
t209 = t213 ^ 2;
t211 = sin(qJ(4));
t365 = t211 ^ 2;
t165 = -t209 + t365;
t289 = t213 * qJD(4);
t180 = t210 * t289;
t292 = t211 * qJD(5);
t186 = t212 * t292;
t124 = t186 + t180;
t287 = t365 / 0.2e1;
t195 = t209 * t212;
t360 = t195 / 0.2e1;
t115 = t360 + (t287 + 0.1e1 / 0.2e1) * t212;
t299 = t115 * qJD(1);
t367 = t299 + t124;
t184 = t212 * t289;
t185 = t210 * t292;
t122 = t185 - t184;
t259 = t287 + t209 / 0.2e1;
t113 = (0.1e1 / 0.2e1 + t259) * t210;
t300 = t113 * qJD(1);
t366 = t300 + t122;
t166 = t208 - t207;
t290 = t213 * qJD(1);
t275 = t210 * t290;
t252 = t212 * t275;
t224 = -t166 * qJD(4) + 0.2e1 * t252;
t322 = t210 * qJ(6);
t351 = t212 * pkin(5);
t246 = t322 + t351;
t126 = t246 * t213;
t364 = -t126 / 0.2e1;
t318 = t212 * qJ(6);
t354 = pkin(5) * t210;
t151 = -t318 + t354;
t363 = t151 / 0.2e1;
t350 = t213 * pkin(4);
t352 = t211 * pkin(8);
t152 = t350 + t352;
t362 = -t152 / 0.2e1;
t320 = t210 * t213;
t189 = pkin(5) * t320;
t361 = -t189 / 0.2e1;
t359 = t210 / 0.2e1;
t358 = t211 / 0.2e1;
t357 = -t212 / 0.2e1;
t356 = -t213 / 0.2e1;
t355 = pkin(4) * t212;
t353 = t211 * pkin(4);
t349 = t213 * pkin(8);
t187 = -cos(pkin(9)) * pkin(1) - pkin(2) - pkin(7);
t190 = sin(pkin(9)) * pkin(1) + qJ(3);
t230 = t190 - t349;
t62 = t210 * t230 + (pkin(4) * t210 + t187 * t212 + qJ(6)) * t211;
t348 = t62 * t210;
t347 = t62 * t212;
t221 = t230 + t353;
t105 = t212 * t221;
t323 = t187 * t210;
t64 = -t105 + (-pkin(5) + t323) * t211;
t346 = t64 * t212;
t321 = t210 * t211;
t70 = t187 * t321 - t105;
t345 = t70 * t211;
t319 = t211 * t212;
t278 = t187 * t319;
t71 = t210 * t221 + t278;
t344 = t71 * t211;
t316 = t212 * t213;
t139 = t187 * t316;
t145 = t210 * t152;
t202 = t213 * qJ(6);
t72 = t139 + t145 + t202;
t343 = t72 * t212;
t203 = t213 * pkin(5);
t277 = t187 * t320;
t317 = t212 * t152;
t73 = -t203 + t277 - t317;
t342 = t73 * t210;
t280 = -t70 / 0.2e1 + t64 / 0.2e1;
t250 = t280 * t212;
t276 = t71 * t359;
t40 = t62 * t321;
t215 = (t276 + t250) * t211 - t40 / 0.2e1 + t126 * t356;
t236 = t322 / 0.2e1 + t351 / 0.2e1;
t8 = t215 - t236;
t341 = t8 * qJD(1);
t92 = (-t151 + t187) * t211;
t340 = t92 * t212;
t93 = t189 + (-t187 - t318) * t213;
t339 = t93 * t210;
t338 = t93 * t212;
t116 = t212 * t287 + t357 + t360;
t103 = t116 * qJD(3);
t337 = -t71 * qJD(5) - t103;
t22 = -t344 + (t126 * t210 + t338) * t213;
t336 = qJD(1) * t22;
t328 = t126 * t212;
t23 = -t345 + (-t328 + t339) * t213;
t335 = qJD(1) * t23;
t28 = -t346 + t348;
t334 = qJD(1) * t28;
t29 = t62 * t211 - t93 * t316;
t333 = qJD(1) * t29;
t30 = -t209 * t323 - t345;
t332 = qJD(1) * t30;
t31 = -t187 * t195 - t344;
t331 = qJD(1) * t31;
t281 = -t62 / 0.2e1 + t71 / 0.2e1;
t219 = t210 * t281 + t250;
t10 = t126 * t358 + t219 * t213;
t330 = t10 * qJD(1);
t12 = (pkin(5) * t358 - t280) * t212 + (qJ(6) * t358 - t281) * t210;
t329 = t12 * qJD(1);
t14 = -t71 * t316 + (t347 + (t64 - t70) * t210) * t213;
t327 = t14 * qJD(1);
t15 = -t73 * t316 + t64 * t319 + t72 * t320 - t40;
t326 = t15 * qJD(1);
t16 = (t62 - t340) * t213 + (t72 + t338) * t211;
t325 = t16 * qJD(1);
t17 = -t73 * t211 - t64 * t213 + (-t93 * t211 + t92 * t213) * t210;
t324 = t17 * qJD(1);
t146 = -pkin(4) - t246;
t315 = t213 * t146;
t26 = -t70 * t213 + (t277 + t317) * t211;
t313 = t26 * qJD(1);
t27 = t71 * t213 + (-t139 + t145) * t211;
t312 = t27 * qJD(1);
t94 = (t309 - 0.1e1) * t213 * t211;
t311 = t94 * qJD(4);
t135 = t317 / 0.2e1;
t310 = -t277 / 0.2e1 + t135;
t143 = t165 * t210;
t308 = qJD(1) * t143;
t144 = t212 * t365 - t195;
t307 = qJD(1) * t144;
t306 = qJD(3) * t113;
t305 = qJD(3) * t211;
t304 = qJD(4) * t210;
t303 = qJD(4) * t212;
t302 = qJD(5) * t210;
t301 = qJD(5) * t212;
t101 = t115 * qJD(3);
t193 = t207 * t213;
t194 = t208 * t213;
t142 = -t193 - t194;
t298 = t142 * qJD(1);
t297 = t165 * qJD(1);
t296 = t190 * qJD(1);
t294 = t211 * qJD(1);
t293 = t211 * qJD(4);
t201 = t211 * qJD(6);
t291 = t212 * qJD(6);
t288 = t213 * qJD(5);
t286 = -t139 / 0.2e1 - t202;
t285 = pkin(8) * t302;
t284 = pkin(8) * t301;
t283 = -t352 / 0.2e1;
t282 = t352 / 0.2e1;
t279 = t315 * t357 + t212 * t282 - t339 / 0.2e1;
t274 = t210 * t305;
t273 = t210 * t288;
t272 = t212 * t288;
t271 = t210 * t291;
t270 = t190 * t294;
t269 = t190 * t290;
t268 = t210 * t301;
t178 = t210 * t303;
t267 = t211 * t289;
t266 = t213 * t295;
t265 = t211 * t290;
t264 = t320 / 0.2e1;
t263 = t318 / 0.2e1;
t262 = t315 / 0.2e1;
t261 = t151 * t356;
t132 = t193 / 0.2e1 - t194 / 0.2e1;
t111 = t356 + t132;
t258 = qJD(1) * t111 - t178;
t257 = qJD(1) * t132 - t178;
t149 = t210 * qJD(1) * t195;
t256 = qJD(4) * t132 + t149;
t177 = t210 * t294;
t255 = qJD(5) * t113 + t177;
t114 = (-0.1e1 / 0.2e1 + t259) * t210;
t254 = qJD(5) * t114 - t177;
t188 = qJD(5) + t294;
t253 = t210 * t184;
t249 = 0.2e1 * t253;
t247 = pkin(4) * t264 + t210 * t282;
t245 = t211 * t146 + t349;
t244 = t342 + t343;
t11 = t126 * t93 - t62 * t70 + t64 * t71;
t243 = t11 * qJD(1) + t10 * qJD(2);
t134 = -t145 / 0.2e1;
t216 = (t261 - t93 / 0.2e1) * t212 + (t283 + t262 + t364) * t210;
t19 = t134 + t216 + t286;
t89 = t146 * t212 + t151 * t210;
t242 = -qJD(1) * t19 + qJD(4) * t89;
t127 = t187 * t264;
t162 = t212 * t283;
t229 = t151 * t264 + t212 * t262 + t162 + t339 / 0.2e1;
t21 = -t203 + t127 + (t364 + t362) * t212 + t229;
t90 = -t146 * t210 + t151 * t212;
t241 = -qJD(1) * t21 + qJD(4) * t90;
t240 = qJD(3) * t114 + qJD(5) * t70;
t239 = t188 * t213;
t238 = -t72 * qJ(6) / 0.2e1 + t73 * pkin(5) / 0.2e1;
t237 = t354 / 0.2e1 - t318 / 0.2e1;
t86 = t162 + (-t350 / 0.2e1 + t362) * t212;
t235 = pkin(4) * t304 - qJD(1) * t86;
t133 = t145 / 0.2e1;
t85 = t133 + t247;
t234 = pkin(4) * t303 - qJD(1) * t85;
t25 = t203 / 0.2e1 + t279 + t310;
t233 = -qJD(1) * t25 + t146 * t304;
t232 = t212 * t239;
t231 = t246 * qJD(5);
t226 = t343 / 0.2e1 + t93 / 0.2e1 + t342 / 0.2e1;
t227 = t347 / 0.2e1 - t92 / 0.2e1 + t64 * t359;
t5 = t211 * t226 + t213 * t227;
t6 = -t211 * t227 + t213 * t226;
t9 = t62 * t72 + t64 * t73 + t92 * t93;
t228 = t9 * qJD(1) + t6 * qJD(2) + t5 * qJD(3);
t141 = t166 * t209;
t225 = t141 * qJD(1) + t249;
t65 = t165 * (t208 / 0.2e1 - 0.1e1 / 0.2e1 + t207 / 0.2e1);
t223 = t5 * qJD(1) - t65 * qJD(2) + t94 * qJD(3);
t222 = t6 * qJD(1) - t94 * qJD(2) - t65 * qJD(3);
t220 = -t231 + t291;
t148 = t208 * t209 + t365;
t218 = t148 * qJD(1) + t253 + t292;
t214 = t219 * pkin(8) + t126 * t146 / 0.2e1 + t93 * t363;
t3 = t214 + t238;
t81 = (-t151 / 0.2e1 + t237) * t211;
t82 = t361 + (t263 + t363) * t213;
t217 = t146 * t151 * qJD(4) + t3 * qJD(1) - t81 * qJD(2) - t82 * qJD(3);
t191 = t289 / 0.2e1;
t183 = t212 * t294;
t182 = t212 * t305;
t181 = t211 * t291;
t179 = t210 * t293;
t150 = t212 * t266;
t147 = t188 * qJ(6);
t140 = t183 + t301;
t137 = (t294 + qJD(5) / 0.2e1) * t213;
t125 = -t179 + t272;
t123 = t212 * t293 + t273;
t121 = t207 * qJD(4) + t252;
t120 = t132 * qJD(5);
t112 = t356 - t132;
t107 = t210 * t239;
t106 = (t275 - t303) * t211;
t88 = -qJD(5) * t115 - t183;
t87 = -qJD(5) * t116 + t183;
t84 = t213 * t263 + t261 + t361;
t83 = t151 * t358 + t237 * t211;
t58 = t65 * qJD(4);
t43 = t162 + t135 + (-t355 / 0.2e1 - t323) * t213;
t42 = -t139 + t134 + t247;
t24 = t127 - t317 / 0.2e1 - t203 / 0.2e1 + t279;
t20 = -t328 / 0.2e1 + t203 + t229 + t310;
t18 = t133 + t216 - t286;
t13 = t70 * t357 - t348 / 0.2e1 + t276 + t346 / 0.2e1 + t236 * t211;
t7 = t215 + t236;
t4 = t5 * qJD(4);
t2 = t214 - t238;
t1 = qJD(4) * t6 + qJD(5) * t10;
t32 = [0, 0, 0, 0, 0, qJD(3), t190 * qJD(3), -t267, t165 * qJD(4), 0, 0, 0, t190 * t289 + t305, qJD(3) * t213 - t190 * t293, -t208 * t267 - t209 * t268, -t141 * qJD(5) + t211 * t249, -t144 * qJD(4) - t211 * t273, t143 * qJD(4) - t211 * t272, t267, qJD(4) * t26 + qJD(5) * t31 + t182, -qJD(4) * t27 - qJD(5) * t30 - t274, qJD(4) * t17 + qJD(5) * t22 - t209 * t271 + t182, t142 * qJD(3) - t15 * qJD(4) - t14 * qJD(5) - t211 * t266, qJD(4) * t16 + qJD(5) * t23 + qJD(6) * t148 + t274, qJD(3) * t28 + qJD(4) * t9 + qJD(5) * t11 + qJD(6) * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, qJD(1), t296, 0, 0, 0, 0, 0, t294, t290, 0, 0, 0, 0, 0, t87, t254, t87, t298, -t254, qJD(5) * t7 + qJD(6) * t116 + t334 + t4; 0, 0, 0, 0, 0, 0, 0, -t265, t297, -t293, -t289, 0, -t187 * t293 + t269, -t187 * t289 - t270, -t120 + (-t208 * t290 - t178) * t211, t211 * t224 - 0.2e1 * t213 * t268, t180 - t307, t184 + t308, t137, t313 + (-t278 + (-t349 + t353) * t210) * qJD(4) + t43 * qJD(5), -t312 + (-pkin(8) * t316 + (t323 + t355) * t211) * qJD(4) + t42 * qJD(5), t324 + (-t210 * t245 - t340) * qJD(4) + t20 * qJD(5) + t112 * qJD(6), qJD(4) * t244 + t13 * qJD(5) - t326, t325 + (-t92 * t210 + t212 * t245) * qJD(4) + t18 * qJD(5) + t150 (pkin(8) * t244 + t92 * t146) * qJD(4) + t2 * qJD(5) + t24 * qJD(6) + t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, -t225, -t107, -t232, t191, qJD(4) * t43 + t331 + t337, qJD(4) * t42 + t240 - t332, qJD(4) * t20 + t336 + t337, -t327 + t13 * qJD(4) + (-t202 * t212 + t189) * qJD(5) - t266, qJD(4) * t18 + t201 - t240 + t335, t7 * qJD(3) + t2 * qJD(4) + (-pkin(5) * t71 - qJ(6) * t70) * qJD(5) + t62 * qJD(6) + t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t112 - t149, -t107, t218, qJD(4) * t24 + qJD(5) * t62 + t103 + t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t289, t293, 0, 0, 0, 0, 0, t122, t124, t122, -t211 * t260, -t124, t83 * qJD(5) + t146 * t289 - t369 * t211 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t125, t123, -t125, 0, -t123, t83 * qJD(4) - t126 * qJD(5) + t213 * t291 + t330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125; 0, 0, 0, 0, 0, -qJD(1), -t296, 0, 0, 0, 0, 0, -t294, -t290, 0, 0, 0, 0, 0, t88, t255, t88, -t298, -t255, qJD(5) * t8 + qJD(6) * t115 - t334 + t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, -t289, 0, 0, 0, 0, 0, -t123, -t125, -t123, -t142 * qJD(4), t125, t84 * qJD(5) + t146 * t293 + t369 * t213 + t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, t366, -t367, 0, -t366, t84 * qJD(4) - t211 * t231 + t181 + t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t367; 0, 0, 0, 0, 0, 0, 0, t265, -t297, 0, 0, 0, -t269, t270, t208 * t265 - t120, -0.2e1 * t210 * t232, t186 + t307, -t185 - t308, -t137, qJD(5) * t86 - t313, qJD(5) * t85 + t312, qJD(5) * t21 - qJD(6) * t111 - t324, -qJD(5) * t12 + t181 + t326, qJD(5) * t19 + t150 - t325, qJD(5) * t3 + qJD(6) * t25 - t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t81 - t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t82 - t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t268, t166 * qJD(5), 0, 0, 0, -pkin(4) * t302, -pkin(4) * t301, -qJD(5) * t90 + t271, 0, -qJD(5) * t89 + qJD(6) * t207 (qJD(5) * t151 - t295) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, -t224, t140, -t177 - t302, -t290 / 0.2e1, -t235 - t284, -t234 + t285, -t241 - t284, t220 - t329, -t242 - t285, pkin(8) * t220 + t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t258, t140, t121, -t233 + t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256, t225, t106, t212 * t265 + t179, t191, -qJD(4) * t86 + t101 - t331, -qJD(4) * t85 - t306 + t332, -qJD(4) * t21 + t101 - t336, qJD(4) * t12 + t327, -qJD(4) * t19 + t201 + t306 - t335, qJ(6) * t201 - qJD(3) * t8 - qJD(4) * t3 - t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t81 - t330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t299, -t300, t299, 0, t300, qJD(4) * t82 - t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, t224, -t183, t177, t290 / 0.2e1, t235, t234, t241, t329, t242, -t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(6), qJ(6) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t188, t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t111 + t149, t106, -t218, -qJ(6) * t292 - qJD(4) * t25 - t101 - t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t258, -t183, -t121, t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t188, -t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t32;
