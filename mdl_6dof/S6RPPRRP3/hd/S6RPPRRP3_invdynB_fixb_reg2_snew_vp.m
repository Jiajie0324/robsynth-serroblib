% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:52
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:52:02
% EndTime: 2019-05-05 14:52:22
% DurationCPUTime: 16.01s
% Computational Cost: add. (26925->567), mult. (50475->764), div. (0->0), fcn. (30527->8), ass. (0->394)
t648 = sin(qJ(5));
t651 = cos(qJ(5));
t652 = cos(qJ(4));
t705 = qJD(1) * t652;
t601 = qJD(4) * t648 + t651 * t705;
t649 = sin(qJ(4));
t701 = qJD(1) * qJD(4);
t691 = t649 * t701;
t698 = qJDD(1) * t652;
t607 = -t691 + t698;
t679 = -t651 * qJDD(4) + t648 * t607;
t706 = qJD(1) * t649;
t626 = qJD(5) + t706;
t702 = qJD(5) + t626;
t486 = t601 * t702 + t679;
t599 = -t651 * qJD(4) + t648 * t705;
t666 = -t648 * qJDD(4) - t651 * t607;
t658 = qJD(5) * t599 + t666;
t728 = t599 * t626;
t773 = -t728 - t658;
t742 = t773 * t648;
t422 = -t486 * t651 - t742;
t596 = t601 ^ 2;
t760 = t599 ^ 2;
t552 = t596 - t760;
t395 = t422 * t649 - t552 * t652;
t418 = -t486 * t648 + t651 * t773;
t643 = sin(pkin(9));
t644 = cos(pkin(9));
t340 = t395 * t644 - t418 * t643;
t343 = t395 * t643 + t418 * t644;
t650 = sin(qJ(1));
t653 = cos(qJ(1));
t872 = t340 * t653 - t343 * t650;
t871 = t340 * t650 + t343 * t653;
t759 = t626 ^ 2;
t570 = t760 - t759;
t555 = t601 * t599;
t690 = t652 * t701;
t699 = qJDD(1) * t649;
t606 = -t690 - t699;
t597 = qJDD(5) - t606;
t775 = t555 + t597;
t739 = t775 * t648;
t470 = t570 * t651 - t739;
t487 = (qJD(5) - t626) * t601 + t679;
t410 = t470 * t649 + t487 * t652;
t738 = t775 * t651;
t466 = t570 * t648 + t738;
t367 = t410 * t644 - t466 * t643;
t370 = t410 * t643 + t466 * t644;
t870 = t367 * t653 - t370 * t650;
t869 = t367 * t650 + t370 * t653;
t772 = -t728 + t658;
t809 = -t487 * t648 + t772 * t651;
t774 = t596 + t760;
t808 = -t487 * t651 - t772 * t648;
t828 = t649 * t808 + t652 * t774;
t840 = t643 * t809 - t644 * t828;
t842 = t643 * t828 + t644 * t809;
t862 = -t650 * t840 + t653 * t842;
t868 = pkin(6) * t862;
t863 = t650 * t842 + t653 * t840;
t867 = pkin(6) * t863;
t866 = qJ(2) * t840;
t756 = pkin(2) + pkin(7);
t865 = pkin(1) * t840 - t756 * t828;
t826 = -t649 * t774 + t652 * t808;
t864 = -pkin(1) * t826 + qJ(2) * t842;
t571 = -t596 + t759;
t776 = -t555 + t597;
t737 = t776 * t648;
t812 = t651 * t571 + t737;
t736 = t776 * t651;
t811 = -t571 * t648 + t736;
t827 = -t649 * t811 - t652 * t772;
t841 = t643 * t812 + t644 * t827;
t843 = -t643 * t827 + t644 * t812;
t861 = t650 * t843 + t653 * t841;
t860 = -t650 * t841 + t653 * t843;
t535 = t759 + t596;
t447 = t535 * t651 + t739;
t858 = pkin(3) * t447;
t857 = pkin(4) * t447;
t856 = pkin(8) * t447;
t458 = t535 * t648 - t738;
t855 = pkin(8) * t458;
t854 = qJ(3) * t447;
t853 = t447 * t643;
t852 = t447 * t644;
t851 = t458 * t649;
t850 = t458 * t652;
t847 = t756 * t826;
t654 = qJD(1) ^ 2;
t697 = t644 * qJDD(1);
t610 = t643 * t654 - t697;
t640 = g(3) - qJDD(2);
t575 = qJ(2) * t610 - t640 * t643;
t609 = qJDD(1) * t643 + t644 * t654;
t683 = t653 * t609 - t610 * t650;
t688 = -qJ(2) * t609 + t644 * t640;
t831 = -pkin(6) * t683 + t575 * t650 + t653 * t688;
t845 = t422 * t652 + t552 * t649;
t844 = t470 * t652 - t487 * t649;
t839 = pkin(3) * t828 + pkin(4) * t774 + pkin(8) * t808 - qJ(3) * t826;
t838 = pkin(8) * t809;
t825 = -t649 * t772 + t652 * t811;
t771 = -t759 - t760;
t790 = t648 * t771 + t736;
t824 = pkin(3) * t790;
t823 = pkin(4) * t790;
t789 = t651 * t771 - t737;
t821 = pkin(8) * t789;
t820 = pkin(8) * t790;
t819 = qJ(3) * t790;
t816 = t643 * t790;
t815 = t644 * t790;
t814 = t649 * t789;
t813 = t652 * t789;
t620 = g(1) * t653 + g(2) * t650;
t603 = -pkin(1) * t654 - t620;
t619 = g(1) * t650 - t653 * g(2);
t665 = qJDD(1) * pkin(1) + t619;
t536 = t603 * t643 - t644 * t665;
t537 = t644 * t603 + t643 * t665;
t684 = t536 * t643 + t644 * t537;
t462 = t536 * t644 - t537 * t643;
t748 = t462 * t650;
t398 = t653 * t684 + t748;
t747 = t462 * t653;
t810 = -t650 * t684 + t747;
t533 = -qJD(5) * t601 - t679;
t718 = t626 * t648;
t669 = t651 * t533 + t599 * t718;
t717 = t626 * t651;
t693 = t599 * t717;
t661 = -t533 * t648 + t693;
t694 = t652 * t555;
t768 = -t649 * t661 - t694;
t791 = t643 * t669 + t644 * t768;
t793 = -t643 * t768 + t644 * t669;
t807 = t650 * t793 + t653 * t791;
t806 = -t650 * t791 + t653 * t793;
t659 = (-t599 * t648 - t601 * t651) * t626;
t565 = t601 * t718;
t668 = t565 - t693;
t767 = t597 * t652 - t649 * t668;
t792 = t643 * t659 + t644 * t767;
t794 = -t643 * t767 + t644 * t659;
t805 = t650 * t794 + t653 * t792;
t804 = -t650 * t792 + t653 * t794;
t681 = t609 * t650 + t653 * t610;
t761 = pkin(6) * t681 + t575 * t653 - t650 * t688;
t803 = 2 * qJD(6);
t801 = qJ(6) * t773;
t700 = qJDD(1) * qJ(3);
t663 = -t654 * pkin(2) + t537 + t700;
t757 = 2 * qJD(3);
t696 = qJD(1) * t757;
t512 = t663 + t696;
t642 = qJDD(1) * pkin(2);
t513 = -t654 * qJ(3) + qJDD(3) + t536 - t642;
t441 = t512 * t643 - t513 * t644;
t685 = t644 * t512 + t513 * t643;
t373 = -t441 * t650 + t653 * t685;
t372 = t441 * t653 + t650 * t685;
t483 = t601 * t717 - t648 * t658;
t484 = -t651 * t658 - t565;
t662 = -t484 * t649 + t694;
t769 = t644 * t483 - t643 * t662;
t770 = t643 * t483 + t644 * t662;
t788 = -t650 * t770 + t653 * t769;
t787 = t650 * t769 + t653 * t770;
t646 = t654 * pkin(7);
t754 = pkin(4) * t652;
t673 = pkin(8) * t649 + t754;
t446 = -t606 * pkin(4) - t607 * pkin(8) - t646 + (qJD(4) * t673 + t757) * qJD(1) + t663;
t755 = pkin(4) * t649;
t672 = -pkin(8) * t652 + t755;
t604 = t672 * qJD(1);
t657 = -qJDD(1) * pkin(7) + t513;
t708 = t652 * t640 - t649 * t657;
t758 = qJD(4) ^ 2;
t455 = -pkin(4) * t758 + qJDD(4) * pkin(8) - t604 * t706 - t708;
t378 = t648 * t446 + t651 * t455;
t539 = pkin(5) * t599 - qJ(6) * t601;
t667 = t597 * qJ(6) - t599 * t539 + t626 * t803 + t378;
t695 = t649 * t555;
t766 = t652 * t661 - t695;
t765 = t597 * t649 + t652 * t668;
t753 = pkin(5) * t651;
t751 = qJ(6) * t651;
t686 = t649 * t640 + t652 * t657;
t454 = -qJDD(4) * pkin(4) - t758 * pkin(8) + t604 * t705 - t686;
t750 = t454 * t648;
t749 = t454 * t651;
t638 = t649 ^ 2;
t639 = t652 ^ 2;
t707 = t638 + t639;
t611 = t707 * qJDD(1);
t725 = t611 * t643;
t724 = t611 * t644;
t692 = t649 * t652 * t654;
t616 = qJDD(4) + t692;
t723 = t616 * t649;
t722 = t616 * t652;
t617 = qJDD(4) - t692;
t721 = t617 * t649;
t720 = t617 * t652;
t719 = t626 * t601;
t716 = t638 * t654;
t715 = t639 * t654;
t505 = t512 - t646;
t713 = t649 * t505;
t712 = t652 * t505;
t377 = -t651 * t446 + t648 * t455;
t709 = t774 - t759;
t689 = -qJ(6) * t648 - pkin(4);
t329 = t377 * t648 + t651 * t378;
t557 = -t619 * t650 - t653 * t620;
t678 = t643 * t692;
t677 = t644 * t692;
t675 = t601 * t539 + qJDD(6) + t377;
t674 = -pkin(1) * t609 - t537;
t613 = qJDD(1) * t653 - t650 * t654;
t671 = -pkin(6) * t613 - g(3) * t650;
t670 = t652 * t484 + t695;
t328 = -t377 * t651 + t378 * t648;
t424 = -t649 * t708 + t652 * t686;
t425 = -t649 * t686 - t652 * t708;
t556 = t619 * t653 - t620 * t650;
t664 = -pkin(1) * t610 - t536;
t660 = -t597 * pkin(5) + t675;
t656 = -t533 * pkin(5) + t454 - t801;
t655 = t601 * t803 - t656;
t624 = -t715 - t758;
t623 = -t715 + t758;
t622 = -t716 - t758;
t621 = t716 - t758;
t615 = (-t638 + t639) * t654;
t614 = t707 * t654;
t612 = qJDD(1) * t650 + t653 * t654;
t608 = -0.2e1 * t691 + t698;
t605 = 0.2e1 * t690 + t699;
t598 = t707 * t701;
t583 = -pkin(6) * t612 + g(3) * t653;
t569 = -t607 * t649 - t639 * t701;
t568 = -t606 * t652 - t638 * t701;
t567 = qJDD(4) * t644 - t598 * t643;
t566 = qJDD(4) * t643 + t598 * t644;
t564 = -t624 * t649 - t722;
t563 = t622 * t652 - t721;
t562 = t624 * t652 - t723;
t561 = -t623 * t652 - t721;
t560 = t622 * t649 + t720;
t559 = -t621 * t649 - t722;
t549 = -t614 * t644 - t725;
t548 = -t614 * t643 + t724;
t538 = t605 * t649 - t608 * t652;
t531 = -t568 * t643 - t677;
t530 = -t569 * t643 + t677;
t529 = t568 * t644 - t678;
t528 = t569 * t644 + t678;
t527 = -t561 * t643 + t652 * t697;
t526 = -t559 * t643 - t649 * t697;
t525 = t561 * t644 + t643 * t698;
t524 = t559 * t644 - t643 * t699;
t509 = t562 * t643 + t608 * t644;
t508 = t560 * t643 + t605 * t644;
t507 = -t562 * t644 + t608 * t643;
t506 = -t560 * t644 + t605 * t643;
t497 = -t538 * t643 + t615 * t644;
t496 = t538 * t644 + t615 * t643;
t492 = t599 * t702 + t666;
t485 = -t533 + t719;
t478 = -t548 * t650 + t549 * t653;
t477 = t548 * t653 + t549 * t650;
t451 = pkin(1) * t640 + qJ(2) * t684;
t435 = -t507 * t650 + t509 * t653;
t434 = -t506 * t650 + t508 * t653;
t433 = t507 * t653 + t509 * t650;
t432 = t506 * t653 + t508 * t650;
t431 = pkin(3) * t562 - qJ(3) * t564 + t708;
t430 = pkin(3) * t560 - qJ(3) * t563 + t686;
t429 = -qJ(2) * t441 + (-pkin(2) * t643 + qJ(3) * t644) * t640;
t428 = qJ(2) * t685 + (pkin(2) * t644 + qJ(3) * t643 + pkin(1)) * t640;
t427 = pkin(3) * t605 - t563 * t756 + t712;
t426 = pkin(3) * t608 - t564 * t756 - t713;
t411 = -pkin(3) * t614 - t425;
t406 = t485 * t649 + t813;
t405 = -t492 * t649 + t850;
t404 = -t485 * t652 + t814;
t403 = t492 * t652 + t851;
t402 = t486 * t649 + t813;
t401 = -t649 * t773 - t850;
t400 = -t486 * t652 + t814;
t399 = t652 * t773 - t851;
t394 = t749 + t856;
t393 = t750 - t820;
t380 = t424 * t643 + t505 * t644;
t379 = -t424 * t644 + t505 * t643;
t375 = -pkin(3) * t724 - qJ(2) * t548 - t411 * t643;
t374 = -pkin(3) * t725 + qJ(2) * t549 + t411 * t644;
t363 = (pkin(5) * t626 - (2 * qJD(6))) * t601 + t656;
t362 = t404 * t643 + t815;
t361 = t403 * t643 - t852;
t360 = -t404 * t644 + t816;
t359 = -t403 * t644 - t853;
t358 = t400 * t643 + t815;
t357 = t399 * t643 + t852;
t356 = -t400 * t644 + t816;
t355 = -t399 * t644 + t853;
t354 = pkin(3) * t424 - qJ(3) * t425;
t353 = -pkin(4) * t809 - pkin(5) * t772 + qJ(6) * t487;
t352 = qJ(6) * t759 - t660;
t351 = -pkin(5) * t759 + t667;
t350 = t378 + t857;
t349 = t377 - t823;
t348 = (-t485 - t719) * pkin(5) + t655;
t347 = -pkin(5) * t719 + t655 + t801;
t346 = -qJ(2) * t507 - t426 * t643 + t431 * t644;
t345 = -qJ(2) * t506 - t427 * t643 + t430 * t644;
t344 = qJ(6) * t709 + t660;
t339 = pkin(3) * t505 - t425 * t756;
t338 = pkin(5) * t709 + t667;
t333 = -pkin(1) * t564 + qJ(2) * t509 + t426 * t644 + t431 * t643;
t332 = -pkin(1) * t563 + qJ(2) * t508 + t427 * t644 + t430 * t643;
t331 = -t379 * t650 + t380 * t653;
t330 = t379 * t653 + t380 * t650;
t327 = -t823 + (-t771 - t759) * qJ(6) + (-t776 - t597) * pkin(5) + t675;
t326 = -t857 - qJ(6) * t775 + (-t535 + t759) * pkin(5) - t667;
t325 = -t348 * t648 - t485 * t751 - t820;
t324 = -pkin(5) * t742 + t347 * t651 - t856;
t323 = t329 * t652 + t454 * t649;
t322 = t329 * t649 - t454 * t652;
t321 = -t360 * t650 + t362 * t653;
t320 = -t359 * t650 + t361 * t653;
t319 = t360 * t653 + t362 * t650;
t318 = t359 * t653 + t361 * t650;
t317 = -t328 - t838;
t316 = -t356 * t650 + t358 * t653;
t315 = -t355 * t650 + t357 * t653;
t314 = t356 * t653 + t358 * t650;
t313 = t355 * t653 + t357 * t650;
t312 = t351 * t651 - t352 * t648;
t311 = t351 * t648 + t352 * t651;
t310 = pkin(3) * t403 + pkin(4) * t492 - qJ(3) * t405 + t750 + t855;
t309 = pkin(3) * t400 - pkin(4) * t486 - qJ(3) * t402 - t749 + t821;
t304 = -qJ(2) * t379 - t339 * t643 + t354 * t644;
t303 = -t338 * t648 + t344 * t651 - t838;
t302 = t312 * t652 + t363 * t649;
t301 = t312 * t649 - t363 * t652;
t300 = pkin(3) * t404 - qJ(3) * t406 + t651 * t348 + t485 * t689 + t821;
t299 = pkin(3) * t399 - t855 - qJ(3) * t401 + t648 * t347 + (pkin(4) + t753) * t773;
t298 = -t652 * t350 - t649 * t394 - t405 * t756 - t858;
t297 = t322 * t643 + t328 * t644;
t296 = -t322 * t644 + t328 * t643;
t295 = -t652 * t349 - t649 * t393 - t402 * t756 + t824;
t294 = -pkin(1) * t425 + qJ(2) * t380 + t339 * t644 + t354 * t643;
t293 = t329 + t839;
t292 = -pkin(8) * t311 + (pkin(5) * t648 - t751) * t363;
t291 = -pkin(4) * t311 - pkin(5) * t352 - qJ(6) * t351;
t290 = -t649 * t317 + (pkin(3) + t754) * t809 - t847;
t289 = t338 * t651 + t344 * t648 + t839;
t288 = -t649 * t325 - t652 * t327 - t406 * t756 + t824;
t287 = -t649 * t324 - t652 * t326 - t401 * t756 + t858;
t286 = t301 * t643 + t311 * t644;
t285 = -t301 * t644 + t311 * t643;
t284 = pkin(3) * t322 - pkin(4) * t454 + pkin(8) * t329 - qJ(3) * t323;
t283 = pkin(3) * t809 - t649 * t303 - t652 * t353 - t847;
t282 = -qJ(2) * t359 - t298 * t643 + t310 * t644;
t281 = -qJ(2) * t356 - t295 * t643 + t309 * t644;
t280 = -t296 * t650 + t297 * t653;
t279 = t296 * t653 + t297 * t650;
t278 = -pkin(1) * t405 + qJ(2) * t361 + t298 * t644 + t310 * t643;
t277 = -pkin(1) * t402 + qJ(2) * t358 + t295 * t644 + t309 * t643;
t276 = -t756 * t323 + (pkin(3) + t673) * t328;
t275 = -qJ(2) * t360 - t288 * t643 + t300 * t644;
t274 = -t290 * t643 + t293 * t644 - t866;
t273 = -qJ(2) * t355 - t287 * t643 + t299 * t644;
t272 = -pkin(1) * t406 + qJ(2) * t362 + t288 * t644 + t300 * t643;
t271 = -pkin(1) * t401 + qJ(2) * t357 + t287 * t644 + t299 * t643;
t270 = t290 * t644 + t293 * t643 + t864;
t269 = -t285 * t650 + t286 * t653;
t268 = t285 * t653 + t286 * t650;
t267 = pkin(3) * t301 + pkin(8) * t312 - qJ(3) * t302 + (t689 - t753) * t363;
t266 = -t283 * t643 + t289 * t644 - t866;
t265 = t283 * t644 + t289 * t643 + t864;
t264 = pkin(3) * t311 - t652 * t291 - t649 * t292 - t302 * t756;
t263 = -qJ(2) * t296 - t276 * t643 + t284 * t644;
t262 = -pkin(1) * t323 + qJ(2) * t297 + t276 * t644 + t284 * t643;
t261 = -qJ(2) * t285 - t264 * t643 + t267 * t644;
t260 = -pkin(1) * t302 + qJ(2) * t286 + t264 * t644 + t267 * t643;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t612, -t613, 0, t557, 0, 0, 0, 0, 0, 0, -t683, t681, 0, t398, 0, 0, 0, 0, 0, 0, 0, t683, -t681, t373, 0, 0, 0, 0, 0, 0, t434, t435, t478, t331, 0, 0, 0, 0, 0, 0, t316, t320, t862, t280, 0, 0, 0, 0, 0, 0, t321, t862, t315, t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t613, -t612, 0, t556, 0, 0, 0, 0, 0, 0, -t681, -t683, 0, -t810, 0, 0, 0, 0, 0, 0, 0, t681, t683, t372, 0, 0, 0, 0, 0, 0, t432, t433, t477, t330, 0, 0, 0, 0, 0, 0, t314, t318, t863, t279, 0, 0, 0, 0, 0, 0, t319, t863, t313, t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t640, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t640, 0, 0, 0, 0, 0, 0, t563, t564, 0, t425, 0, 0, 0, 0, 0, 0, t402, t405, t826, t323, 0, 0, 0, 0, 0, 0, t406, t826, t401, t302; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t613, 0, -t612, 0, t671, -t583, -t556, -pkin(6) * t556, 0, 0, -t681, 0, -t683, 0, t761, -t831, t810, pkin(6) * t810 + qJ(2) * t747 - t451 * t650, 0, t681, t683, 0, 0, 0, -t372, -t761, t831, -pkin(6) * t372 - t428 * t650 + t429 * t653, -t528 * t650 + t530 * t653, -t496 * t650 + t497 * t653, -t525 * t650 + t527 * t653, -t529 * t650 + t531 * t653, -t524 * t650 + t526 * t653, -t566 * t650 + t567 * t653, -pkin(6) * t432 - t332 * t650 + t345 * t653, -pkin(6) * t433 - t333 * t650 + t346 * t653, -pkin(6) * t477 - t374 * t650 + t375 * t653, -pkin(6) * t330 - t294 * t650 + t304 * t653, t788, t871, t860, t806, t869, t804, -pkin(6) * t314 - t277 * t650 + t281 * t653, -pkin(6) * t318 - t278 * t650 + t282 * t653, -t270 * t650 + t274 * t653 - t867, -pkin(6) * t279 - t262 * t650 + t263 * t653, t788, t860, -t871, t804, -t869, t806, -pkin(6) * t319 - t272 * t650 + t275 * t653, -t265 * t650 + t266 * t653 - t867, -pkin(6) * t313 - t271 * t650 + t273 * t653, -pkin(6) * t268 - t260 * t650 + t261 * t653; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t612, 0, t613, 0, t583, t671, t557, pkin(6) * t557, 0, 0, t683, 0, -t681, 0, t831, t761, t398, pkin(6) * t398 + qJ(2) * t748 + t451 * t653, 0, -t683, t681, 0, 0, 0, t373, -t831, -t761, pkin(6) * t373 + t428 * t653 + t429 * t650, t528 * t653 + t530 * t650, t496 * t653 + t497 * t650, t525 * t653 + t527 * t650, t529 * t653 + t531 * t650, t524 * t653 + t526 * t650, t566 * t653 + t567 * t650, pkin(6) * t434 + t332 * t653 + t345 * t650, pkin(6) * t435 + t333 * t653 + t346 * t650, pkin(6) * t478 + t374 * t653 + t375 * t650, pkin(6) * t331 + t294 * t653 + t304 * t650, t787, -t872, t861, t807, -t870, t805, pkin(6) * t316 + t277 * t653 + t281 * t650, pkin(6) * t320 + t278 * t653 + t282 * t650, t270 * t653 + t274 * t650 + t868, pkin(6) * t280 + t262 * t653 + t263 * t650, t787, t861, t872, t805, t870, t807, pkin(6) * t321 + t272 * t653 + t275 * t650, t265 * t653 + t266 * t650 + t868, pkin(6) * t315 + t271 * t653 + t273 * t650, pkin(6) * t269 + t260 * t653 + t261 * t650; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t619, t620, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t664, t674, 0, -pkin(1) * t462, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) - 0.2e1 * t642 - t664, -t674 + t696 + 0.2e1 * t700, pkin(1) * t441 - pkin(2) * t513 + qJ(3) * t512, (t607 - t691) * t652, -t605 * t652 - t608 * t649, -t623 * t649 + t720, (-t606 + t690) * t649, t621 * t652 - t723, 0, pkin(1) * t506 + qJ(3) * t605 - t560 * t756 + t713, pkin(1) * t507 + qJ(3) * t608 - t562 * t756 + t712, pkin(1) * t548 - qJ(3) * t614 + t611 * t756 - t424, pkin(1) * t379 + qJ(3) * t505 - t424 * t756, t670, t845, t825, t766, t844, t765, pkin(1) * t356 - t649 * t349 + t652 * t393 - t400 * t756 + t819, pkin(1) * t359 - t649 * t350 + t652 * t394 - t403 * t756 - t854, t652 * t317 + (qJ(3) + t755) * t809 + t865, pkin(1) * t296 - t756 * t322 + (qJ(3) + t672) * t328, t670, t825, -t845, t765, -t844, t766, pkin(1) * t360 + t652 * t325 - t649 * t327 - t404 * t756 + t819, qJ(3) * t809 + t652 * t303 - t649 * t353 + t865, pkin(1) * t355 + t652 * t324 - t649 * t326 - t399 * t756 + t854, pkin(1) * t285 + qJ(3) * t311 - t649 * t291 + t652 * t292 - t301 * t756;];
tauB_reg  = t1;
