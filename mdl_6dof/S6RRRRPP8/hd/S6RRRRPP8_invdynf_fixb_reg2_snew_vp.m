% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:10
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP8_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:09:49
% EndTime: 2019-05-07 19:10:01
% DurationCPUTime: 13.49s
% Computational Cost: add. (37861->337), mult. (81320->406), div. (0->0), fcn. (64578->10), ass. (0->227)
t2933 = sin(qJ(3));
t2937 = cos(qJ(3));
t2931 = cos(pkin(6));
t3022 = qJD(1) * t2931;
t2997 = qJD(2) + t3022;
t2930 = sin(pkin(6));
t2934 = sin(qJ(2));
t3005 = t2930 * t2934;
t2999 = qJD(1) * t3005;
t2909 = t2933 * t2997 + t2937 * t2999;
t2932 = sin(qJ(4));
t2936 = cos(qJ(4));
t2938 = cos(qJ(2));
t3004 = t2930 * t2938;
t2992 = qJD(1) * t3004 - qJD(3);
t2891 = t2936 * t2909 - t2932 * t2992;
t2907 = t2933 * t2999 - t2937 * t2997;
t2995 = qJDD(1) * t2931 + qJDD(2);
t2969 = t2933 * t2995;
t2957 = -t2907 * qJD(3) + t2969;
t3002 = qJDD(1) * t2934;
t3020 = qJD(2) * qJD(1);
t2967 = t2938 * t3020 + t3002;
t2960 = t2967 * t2930;
t2949 = t2937 * t2960 + t2957;
t3001 = qJDD(1) * t2938;
t2966 = t2934 * t3020 - t3001;
t3033 = t2966 * t2930;
t2956 = qJDD(3) + t3033;
t2948 = t2891 * qJD(4) + t2932 * t2949 - t2936 * t2956;
t2904 = qJD(4) + t2907;
t3009 = t2904 * t2891;
t2810 = t2948 - t3009;
t2889 = t2932 * t2909 + t2936 * t2992;
t3011 = t2889 * qJD(4);
t2946 = t2932 * t2956 + t2936 * t2949 - t3011;
t3010 = t2889 * t2904;
t2942 = t2946 + t3010;
t2778 = t2810 * t2936 - t2942 * t2932;
t2888 = t2891 ^ 2;
t3028 = t2889 ^ 2;
t2835 = t2888 + t3028;
t2753 = t2778 * t2933 - t2835 * t2937;
t2756 = t2778 * t2937 + t2835 * t2933;
t2775 = t2810 * t2932 + t2942 * t2936;
t2986 = t2756 * t2934 - t2775 * t2938;
t2716 = -t2930 * t2753 + t2931 * t2986;
t2738 = t2756 * t2938 + t2775 * t2934;
t2935 = sin(qJ(1));
t2939 = cos(qJ(1));
t3082 = t2716 * t2935 - t2738 * t2939;
t3081 = t2716 * t2939 + t2738 * t2935;
t2882 = t2904 ^ 2;
t2857 = t2888 + t2882;
t2862 = t2891 * t2889;
t2918 = t2937 * t2995;
t3008 = t2909 * qJD(3);
t2951 = -t2933 * t2960 + t2918 - t3008;
t2950 = qJDD(4) - t2951;
t3031 = t2862 + t2950;
t3038 = t2857 * t2936 + t2932 * t3031;
t2943 = t2946 - t3010;
t3039 = -t2857 * t2932 + t2936 * t3031;
t3045 = -t2943 * t2933 + t2937 * t3039;
t3054 = t2934 * t3038 + t2938 * t3045;
t3046 = t2933 * t3039 + t2937 * t2943;
t3056 = t2934 * t3045 - t2938 * t3038;
t3063 = -t2930 * t3046 + t2931 * t3056;
t3080 = t2935 * t3063 - t2939 * t3054;
t3072 = t2935 * t3054 + t2939 * t3063;
t2713 = t2931 * t2753 + t2930 * t2986;
t3065 = t2930 * t3056 + t2931 * t3046;
t3029 = -t3028 - t2882;
t3032 = -t2862 + t2950;
t3041 = t2932 * t3029 + t3032 * t2936;
t2947 = t2948 + t3009;
t3040 = -t3032 * t2932 + t2936 * t3029;
t3044 = t2947 * t2933 + t2937 * t3040;
t3055 = t2934 * t3041 + t2938 * t3044;
t3047 = t2933 * t3040 - t2937 * t2947;
t3057 = t2934 * t3044 - t2938 * t3041;
t3062 = -t2930 * t3047 + t2931 * t3057;
t3075 = -t2935 * t3062 + t2939 * t3055;
t3073 = t2935 * t3055 + t2939 * t3062;
t3064 = t2930 * t3057 + t2931 * t3047;
t2991 = t2992 ^ 2;
t2994 = t2997 ^ 2;
t3030 = -t2995 * pkin(2) - t2994 * pkin(9);
t2854 = t2907 * t2992 + t2949;
t2940 = qJD(1) ^ 2;
t3027 = t2907 ^ 2;
t3026 = t2909 ^ 2;
t2927 = t2930 ^ 2;
t3025 = -2 * qJD(5);
t3024 = pkin(8) * t2930;
t3023 = t2931 * g(3);
t3021 = qJD(1) * t2938;
t3007 = t2909 * t2907;
t3006 = t2927 * t2940;
t2968 = t2940 * (-pkin(2) * t2938 - pkin(9) * t2934);
t2923 = t2935 * g(1) - t2939 * g(2);
t2955 = qJDD(1) * pkin(1) + t2940 * t3024 + t2923;
t2952 = t2931 * t2955;
t2924 = -g(1) * t2939 - g(2) * t2935;
t2965 = -pkin(1) * t2940 + t2924;
t2954 = qJDD(1) * t3024 + t2965;
t3003 = t2934 * t2952 + t2938 * t2954;
t2849 = t2995 * pkin(9) - t2994 * pkin(2) + (-t2934 * g(3) + t2968 * t3004) * t2930 + t3003;
t2996 = 0.2e1 * qJD(2) + t3022;
t2990 = t2996 * qJD(1);
t2944 = -t3023 + ((-t2996 * t3021 - t3002) * pkin(9) + (t2934 * t2990 - t3001) * pkin(2) - t2955) * t2930;
t2806 = t2937 * t2849 + t2933 * t2944;
t2881 = pkin(3) * t2907 - pkin(10) * t2909;
t2787 = -pkin(3) * t2991 + pkin(10) * t2956 - t2907 * t2881 + t2806;
t2902 = t2938 * t2952;
t2878 = -g(3) * t3004 - t2934 * t2954 + t2902;
t2963 = t2934 * t2968;
t2941 = t2927 * t2963 - t2878 - t2854 * pkin(10) + (-t2909 * t2992 - t2951) * pkin(3) + t3030;
t2751 = t2936 * t2787 + t2932 * t2941;
t2998 = t2909 * t3021;
t2750 = -t2932 * t2787 + t2936 * t2941;
t2805 = -t2933 * t2849 + t2937 * t2944;
t2993 = -pkin(5) * t2904 - t2891 * qJ(6);
t2860 = pkin(4) * t2889 - qJ(5) * t2891;
t2961 = t2937 * t2967;
t2945 = t2936 * t2957 + t2932 * qJDD(3) - t3011 + (t2932 * t2966 + t2936 * t2961) * t2930;
t2964 = -t2950 * pkin(4) - t2882 * qJ(5) + qJDD(5) - t2750;
t2721 = -t2950 * pkin(5) + (pkin(5) * t2889 - (2 * qJD(6)) + t2860) * t2891 + t2964 + (-t2945 - t3010) * qJ(6);
t2741 = -pkin(4) * t2882 + t2950 * qJ(5) + 0.2e1 * qJD(5) * t2904 - t2889 * t2860 + t2751;
t2728 = -pkin(5) * t3028 + qJ(6) * t2948 + 0.2e1 * qJD(6) * t2889 + t2904 * t2993 + t2741;
t2708 = t2721 * t2932 + t2728 * t2936;
t2786 = -t2956 * pkin(3) - t2991 * pkin(10) + t2909 * t2881 - t2805;
t2953 = t2948 * pkin(4) + t2786 + (-t2945 + t3010) * qJ(5);
t2735 = pkin(4) * t3009 + t2948 * pkin(5) + t3028 * qJ(6) - qJDD(6) + t2953 + (-t2993 + t3025) * t2891;
t2703 = t2708 * t2937 + t2735 * t2933;
t2707 = -t2721 * t2936 + t2728 * t2932;
t2989 = t2703 * t2934 - t2707 * t2938;
t2742 = t2860 * t2891 + t2964;
t2710 = t2741 * t2936 + t2742 * t2932;
t2743 = (pkin(4) * t2904 + t3025) * t2891 + t2953;
t2706 = t2710 * t2937 + t2743 * t2933;
t2709 = t2741 * t2932 - t2742 * t2936;
t2988 = t2706 * t2934 - t2709 * t2938;
t2720 = -t2750 * t2932 + t2751 * t2936;
t2712 = t2720 * t2937 + t2786 * t2933;
t2719 = t2750 * t2936 + t2751 * t2932;
t2987 = t2712 * t2934 - t2719 * t2938;
t2774 = -t2805 * t2933 + t2806 * t2937;
t2848 = t2934 * t2965 - t2902 + (pkin(8) * t3002 + t2938 * g(3) + t2930 * t2963) * t2930 + t3030;
t2977 = t2774 * t2934 - t2848 * t2938;
t2962 = t2933 * t2967;
t2853 = t2918 + (-t2962 - t2998) * t2930;
t2855 = -t2969 + (t2907 * t3021 - t2961) * t2930;
t2819 = t2853 * t2937 - t2855 * t2933;
t2864 = -t3026 - t3027;
t2976 = t2819 * t2934 - t2864 * t2938;
t2868 = t2956 - t3007;
t2877 = -t2991 - t3027;
t2830 = -t2868 * t2933 + t2877 * t2937;
t2852 = 0.2e1 * t3008 - t2918 + (t2962 - t2998) * t2930;
t2975 = t2830 * t2934 - t2852 * t2938;
t2867 = -t3007 - t2956;
t2883 = -t3026 - t2991;
t2838 = t2867 * t2937 - t2883 * t2933;
t2974 = t2838 * t2934 - t2854 * t2938;
t2879 = -g(3) * t3005 + t3003;
t2973 = t2878 * t2938 + t2879 * t2934;
t2893 = t2931 * t2940 * t3004 - t2930 * t3002;
t2916 = t2997 * t2999;
t2894 = t2916 - t3033;
t2972 = t2893 * t2938 + t2894 * t2934;
t2928 = t2934 ^ 2;
t2903 = -t2928 * t3006 - t2994;
t2922 = t2938 * t2934 * t3006;
t2913 = t2922 - t2995;
t2971 = t2903 * t2938 + t2913 * t2934;
t2912 = t2922 + t2995;
t2929 = t2938 ^ 2;
t2914 = -t2929 * t3006 - t2994;
t2970 = t2912 * t2938 + t2914 * t2934;
t2920 = -qJDD(1) * t2935 - t2939 * t2940;
t2919 = qJDD(1) * t2939 - t2935 * t2940;
t2915 = (-t2928 - t2929) * t3006;
t2897 = -t2930 * t2955 - t3023;
t2895 = t2916 + t3033;
t2892 = (t2938 * t2990 + t3002) * t2930;
t2884 = -t2912 * t2934 + t2914 * t2938;
t2880 = -t2903 * t2934 + t2913 * t2938;
t2863 = -t2893 * t2934 + t2894 * t2938;
t2859 = -t2930 * t2895 + t2931 * t2970;
t2858 = t2931 * t2895 + t2930 * t2970;
t2851 = -t2930 * t2892 + t2931 * t2971;
t2850 = t2931 * t2892 + t2930 * t2971;
t2847 = -t2930 * t2915 + t2931 * t2972;
t2846 = t2931 * t2915 + t2930 * t2972;
t2837 = t2867 * t2933 + t2883 * t2937;
t2836 = -t2878 * t2934 + t2879 * t2938;
t2829 = t2868 * t2937 + t2877 * t2933;
t2821 = -t2930 * t2897 + t2931 * t2973;
t2820 = t2931 * t2897 + t2930 * t2973;
t2818 = t2853 * t2933 + t2855 * t2937;
t2804 = t2838 * t2938 + t2854 * t2934;
t2803 = t2830 * t2938 + t2852 * t2934;
t2790 = t2819 * t2938 + t2864 * t2934;
t2784 = -t2930 * t2837 + t2931 * t2974;
t2783 = t2931 * t2837 + t2930 * t2974;
t2782 = -t2930 * t2829 + t2931 * t2975;
t2781 = t2931 * t2829 + t2930 * t2975;
t2773 = t2805 * t2937 + t2806 * t2933;
t2760 = -t2930 * t2818 + t2931 * t2976;
t2759 = t2931 * t2818 + t2930 * t2976;
t2752 = t2774 * t2938 + t2848 * t2934;
t2737 = -t2930 * t2773 + t2931 * t2977;
t2736 = t2931 * t2773 + t2930 * t2977;
t2711 = t2720 * t2933 - t2786 * t2937;
t2705 = t2710 * t2933 - t2743 * t2937;
t2704 = t2712 * t2938 + t2719 * t2934;
t2702 = t2708 * t2933 - t2735 * t2937;
t2701 = t2706 * t2938 + t2709 * t2934;
t2700 = -t2930 * t2711 + t2931 * t2987;
t2699 = t2931 * t2711 + t2930 * t2987;
t2698 = t2703 * t2938 + t2707 * t2934;
t2697 = -t2930 * t2705 + t2931 * t2988;
t2696 = t2931 * t2705 + t2930 * t2988;
t2695 = -t2930 * t2702 + t2931 * t2989;
t2694 = t2931 * t2702 + t2930 * t2989;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2920, -t2919, 0, -t2923 * t2935 + t2924 * t2939, 0, 0, 0, 0, 0, 0, -t2859 * t2935 + t2884 * t2939, -t2851 * t2935 + t2880 * t2939, -t2847 * t2935 + t2863 * t2939, -t2821 * t2935 + t2836 * t2939, 0, 0, 0, 0, 0, 0, -t2782 * t2935 + t2803 * t2939, -t2784 * t2935 + t2804 * t2939, -t2760 * t2935 + t2790 * t2939, -t2737 * t2935 + t2752 * t2939, 0, 0, 0, 0, 0, 0, t3075, t3080, t3082, -t2700 * t2935 + t2704 * t2939, 0, 0, 0, 0, 0, 0, t3075, t3082, -t3080, -t2697 * t2935 + t2701 * t2939, 0, 0, 0, 0, 0, 0, t3075, -t3080, -t3082, -t2695 * t2935 + t2698 * t2939; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2919, t2920, 0, t2923 * t2939 + t2924 * t2935, 0, 0, 0, 0, 0, 0, t2859 * t2939 + t2884 * t2935, t2851 * t2939 + t2880 * t2935, t2847 * t2939 + t2863 * t2935, t2821 * t2939 + t2836 * t2935, 0, 0, 0, 0, 0, 0, t2782 * t2939 + t2803 * t2935, t2784 * t2939 + t2804 * t2935, t2760 * t2939 + t2790 * t2935, t2737 * t2939 + t2752 * t2935, 0, 0, 0, 0, 0, 0, t3073, -t3072, -t3081, t2700 * t2939 + t2704 * t2935, 0, 0, 0, 0, 0, 0, t3073, -t3081, t3072, t2697 * t2939 + t2701 * t2935, 0, 0, 0, 0, 0, 0, t3073, t3072, t3081, t2695 * t2939 + t2698 * t2935; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2858, t2850, t2846, t2820, 0, 0, 0, 0, 0, 0, t2781, t2783, t2759, t2736, 0, 0, 0, 0, 0, 0, t3064, -t3065, -t2713, t2699, 0, 0, 0, 0, 0, 0, t3064, -t2713, t3065, t2696, 0, 0, 0, 0, 0, 0, t3064, t3065, t2713, t2694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2940, -qJDD(1), 0, t2924, 0, 0, 0, 0, 0, 0, t2884, t2880, t2863, t2836, 0, 0, 0, 0, 0, 0, t2803, t2804, t2790, t2752, 0, 0, 0, 0, 0, 0, t3055, -t3054, -t2738, t2704, 0, 0, 0, 0, 0, 0, t3055, -t2738, t3054, t2701, 0, 0, 0, 0, 0, 0, t3055, t3054, t2738, t2698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2940, 0, t2923, 0, 0, 0, 0, 0, 0, t2859, t2851, t2847, t2821, 0, 0, 0, 0, 0, 0, t2782, t2784, t2760, t2737, 0, 0, 0, 0, 0, 0, t3062, -t3063, -t2716, t2700, 0, 0, 0, 0, 0, 0, t3062, -t2716, t3063, t2697, 0, 0, 0, 0, 0, 0, t3062, t3063, t2716, t2695; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2858, t2850, t2846, t2820, 0, 0, 0, 0, 0, 0, t2781, t2783, t2759, t2736, 0, 0, 0, 0, 0, 0, t3064, -t3065, -t2713, t2699, 0, 0, 0, 0, 0, 0, t3064, -t2713, t3065, t2696, 0, 0, 0, 0, 0, 0, t3064, t3065, t2713, t2694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2914, t2913, t2894, t2879, 0, 0, 0, 0, 0, 0, t2830, t2838, t2819, t2774, 0, 0, 0, 0, 0, 0, t3044, -t3045, -t2756, t2712, 0, 0, 0, 0, 0, 0, t3044, -t2756, t3045, t2706, 0, 0, 0, 0, 0, 0, t3044, t3045, t2756, t2703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2912, t2903, t2893, t2878, 0, 0, 0, 0, 0, 0, -t2852, -t2854, -t2864, -t2848, 0, 0, 0, 0, 0, 0, -t3041, t3038, t2775, -t2719, 0, 0, 0, 0, 0, 0, -t3041, t2775, -t3038, -t2709, 0, 0, 0, 0, 0, 0, -t3041, -t3038, -t2775, -t2707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2895, t2892, t2915, t2897, 0, 0, 0, 0, 0, 0, t2829, t2837, t2818, t2773, 0, 0, 0, 0, 0, 0, t3047, -t3046, -t2753, t2711, 0, 0, 0, 0, 0, 0, t3047, -t2753, t3046, t2705, 0, 0, 0, 0, 0, 0, t3047, t3046, t2753, t2702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2877, t2867, t2853, t2806, 0, 0, 0, 0, 0, 0, t3040, -t3039, -t2778, t2720, 0, 0, 0, 0, 0, 0, t3040, -t2778, t3039, t2710, 0, 0, 0, 0, 0, 0, t3040, t3039, t2778, t2708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2868, t2883, t2855, t2805, 0, 0, 0, 0, 0, 0, -t2947, -t2943, t2835, -t2786, 0, 0, 0, 0, 0, 0, -t2947, t2835, t2943, -t2743, 0, 0, 0, 0, 0, 0, -t2947, t2943, -t2835, -t2735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2852, t2854, t2864, t2848, 0, 0, 0, 0, 0, 0, t3041, -t3038, -t2775, t2719, 0, 0, 0, 0, 0, 0, t3041, -t2775, t3038, t2709, 0, 0, 0, 0, 0, 0, t3041, t3038, t2775, t2707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3029, -t3031, -t2810, t2751, 0, 0, 0, 0, 0, 0, t3029, -t2810, t3031, t2741, 0, 0, 0, 0, 0, 0, t3029, t3031, t2810, t2728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3032, -t2857, -t2942, t2750, 0, 0, 0, 0, 0, 0, t3032, -t2942, t2857, -t2742, 0, 0, 0, 0, 0, 0, t3032, t2857, t2942, -t2721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2947, t2943, -t2835, t2786, 0, 0, 0, 0, 0, 0, t2947, -t2835, -t2943, t2743, 0, 0, 0, 0, 0, 0, t2947, -t2943, t2835, t2735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3029, -t2810, t3031, t2741, 0, 0, 0, 0, 0, 0, t3029, t3031, t2810, t2728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2947, -t2835, -t2943, t2743, 0, 0, 0, 0, 0, 0, t2947, -t2943, t2835, t2735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3032, t2942, -t2857, t2742, 0, 0, 0, 0, 0, 0, -t3032, -t2857, -t2942, t2721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3029, t3031, t2810, t2728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3032, -t2857, -t2942, t2721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2947, t2943, -t2835, -t2735;];
f_new_reg  = t1;
