% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:10
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:07:03
% EndTime: 2019-05-07 19:08:30
% DurationCPUTime: 75.24s
% Computational Cost: add. (167970->886), mult. (359729->1286), div. (0->0), fcn. (284900->10), ass. (0->670)
t1217 = sin(qJ(1));
t1221 = cos(qJ(1));
t1212 = sin(pkin(6));
t1213 = cos(pkin(6));
t1216 = sin(qJ(2));
t1220 = cos(qJ(2));
t1204 = qJD(1) * t1213 + qJD(2);
t1215 = sin(qJ(3));
t1219 = cos(qJ(3));
t1356 = t1212 * t1216;
t1337 = qJD(1) * t1356;
t1174 = t1204 * t1215 + t1219 * t1337;
t1214 = sin(qJ(4));
t1218 = cos(qJ(4));
t1355 = t1212 * t1220;
t1203 = qJD(1) * t1355;
t1344 = t1203 - qJD(3);
t1143 = t1218 * t1174 - t1214 * t1344;
t1140 = t1143 ^ 2;
t1141 = t1174 * t1214 + t1218 * t1344;
t1417 = t1141 ^ 2;
t1044 = -t1417 - t1140;
t1172 = -t1219 * t1204 + t1215 * t1337;
t1342 = qJDD(1) * t1216;
t1393 = qJD(1) * t1220;
t1181 = (qJD(2) * t1393 + t1342) * t1212;
t1322 = qJDD(1) * t1213 + qJDD(2);
t1120 = -t1172 * qJD(3) + t1219 * t1181 + t1215 * t1322;
t1341 = qJDD(1) * t1220;
t1394 = qJD(1) * t1216;
t1262 = qJD(2) * t1394 - t1341;
t1243 = t1262 * t1212;
t1237 = qJDD(3) + t1243;
t1227 = -t1218 * t1120 - t1214 * t1237;
t1226 = -t1141 * qJD(4) - t1227;
t1167 = qJD(4) + t1172;
t1365 = t1141 * t1167;
t1004 = t1365 + t1226;
t1325 = t1214 * t1120 - t1218 * t1237;
t1245 = (qJD(4) - t1167) * t1143 + t1325;
t891 = -t1004 * t1214 + t1218 * t1245;
t840 = -t1044 * t1215 + t1219 * t891;
t885 = t1004 * t1218 + t1214 * t1245;
t1307 = t1216 * t840 - t1220 * t885;
t837 = t1044 * t1219 + t1215 * t891;
t743 = -t1212 * t837 + t1213 * t1307;
t789 = t1216 * t885 + t1220 * t840;
t694 = t1217 * t789 + t1221 * t743;
t1617 = pkin(7) * t694;
t1611 = t1217 * t743 - t1221 * t789;
t1616 = pkin(7) * t1611;
t740 = t1212 * t1307 + t1213 * t837;
t1607 = (t1212 * t740 + t1213 * t743) * pkin(8);
t1615 = pkin(1) * t740;
t1614 = pkin(1) * t743;
t1416 = t1167 ^ 2;
t1430 = t1417 - t1416;
t1323 = t1215 * t1181 - t1219 * t1322;
t1119 = -t1174 * qJD(3) - t1323;
t1118 = qJDD(4) - t1119;
t1366 = t1141 * t1143;
t1234 = t1118 + t1366;
t1436 = t1234 * t1218;
t961 = t1214 * t1430 + t1436;
t1486 = t1220 * t961;
t1437 = t1234 * t1214;
t1455 = t1218 * t1430 - t1437;
t1488 = t1219 * t1455;
t881 = t1215 * t1245 - t1488;
t1292 = t1216 * t881 + t1486;
t1496 = t1215 * t1455;
t877 = t1219 * t1245 + t1496;
t778 = t1212 * t877 + t1213 * t1292;
t1494 = t1216 * t961;
t819 = t1220 * t881 - t1494;
t1613 = t1217 * t778 - t1221 * t819;
t1089 = t1140 - t1417;
t1372 = t1089 * t1215;
t1007 = t1365 - t1226;
t1388 = t1007 * t1214;
t1346 = qJD(4) + t1167;
t997 = t1143 * t1346 + t1325;
t894 = -t1218 * t997 + t1388;
t854 = t1219 * t894 + t1372;
t1500 = t1007 * t1218;
t888 = t1214 * t997 + t1500;
t1302 = t1216 * t854 + t1220 * t888;
t1085 = t1219 * t1089;
t851 = t1215 * t894 - t1085;
t751 = -t1212 * t851 + t1213 * t1302;
t794 = -t1216 * t888 + t1220 * t854;
t1612 = t1217 * t751 - t1221 * t794;
t1610 = t1217 * t819 + t1221 * t778;
t1609 = t1217 * t794 + t1221 * t751;
t1103 = t1140 - t1416;
t1235 = t1118 - t1366;
t1435 = t1235 * t1214;
t1461 = t1103 * t1218 - t1435;
t1434 = t1235 * t1218;
t1460 = t1103 * t1214 + t1434;
t1472 = t1004 * t1215 + t1219 * t1460;
t1513 = -t1216 * t1461 + t1220 * t1472;
t1473 = -t1004 * t1219 + t1215 * t1460;
t1517 = t1216 * t1472 + t1220 * t1461;
t1534 = -t1212 * t1473 + t1213 * t1517;
t1606 = t1217 * t1534 - t1221 * t1513;
t1549 = t1217 * t1513 + t1221 * t1534;
t1605 = pkin(8) * t789;
t1433 = t1140 + t1416;
t1481 = t1433 * t1218 + t1437;
t1522 = t1216 * t1481;
t949 = t1433 * t1214 - t1436;
t1527 = t1219 * t949;
t1554 = t1007 * t1215 - t1527;
t1562 = t1220 * t1554 + t1522;
t1528 = t1215 * t949;
t1555 = -t1219 * t1007 - t1528;
t1521 = t1220 * t1481;
t1563 = t1216 * t1554 - t1521;
t1573 = -t1212 * t1555 + t1213 * t1563;
t1589 = t1217 * t1562 + t1221 * t1573;
t1604 = pkin(7) * t1589;
t1590 = -t1217 * t1573 + t1221 * t1562;
t1603 = pkin(7) * t1590;
t1596 = t1212 * t1292 - t1213 * t877;
t1595 = t1212 * t1302 + t1213 * t851;
t1594 = pkin(1) * t1573;
t1574 = t1212 * t1563 + t1213 * t1555;
t1593 = pkin(1) * t1574;
t1536 = t1212 * t1517 + t1213 * t1473;
t1588 = (-t1212 * t1574 - t1213 * t1573) * pkin(8);
t1587 = pkin(9) * t837;
t1586 = pkin(9) * t840;
t1585 = pkin(8) * t1562;
t1576 = pkin(2) * t837 + pkin(3) * t1044 + pkin(10) * t891;
t1575 = -pkin(2) * t885 + t1586;
t1042 = qJD(4) * t1143 + t1325;
t1113 = t1167 * t1143;
t1001 = t1042 + t1113;
t1431 = -t1416 - t1417;
t1454 = t1218 * t1431 - t1435;
t1489 = t1219 * t1454;
t1474 = t1001 * t1215 + t1489;
t1458 = t1214 * t1431 + t1434;
t1495 = t1216 * t1458;
t1512 = t1220 * t1474 + t1495;
t1497 = t1215 * t1454;
t1479 = -t1219 * t1001 + t1497;
t1487 = t1220 * t1458;
t1516 = t1216 * t1474 - t1487;
t1535 = -t1212 * t1479 + t1213 * t1516;
t1548 = t1217 * t1512 + t1221 * t1535;
t1572 = pkin(7) * t1548;
t1550 = -t1217 * t1535 + t1221 * t1512;
t1571 = pkin(7) * t1550;
t1570 = pkin(9) * t1555;
t1533 = pkin(10) * t949;
t1565 = -pkin(2) * t1555 + t1533;
t1532 = pkin(2) * t1481;
t1564 = pkin(9) * t1554 - t1532;
t1560 = pkin(10) * t885;
t1559 = pkin(1) * t1535;
t1537 = t1212 * t1516 + t1213 * t1479;
t1558 = pkin(1) * t1537;
t1553 = pkin(3) * t885 + qJ(5) * t1245;
t1547 = (-t1212 * t1537 - t1213 * t1535) * pkin(8);
t1546 = pkin(8) * t1512;
t1531 = pkin(3) * t1481;
t1530 = pkin(9) * t1479;
t1529 = pkin(10) * t1481;
t1506 = pkin(10) * t1454;
t1520 = -pkin(2) * t1479 - t1506;
t1392 = qJD(5) * t1167;
t1157 = -0.2e1 * t1392;
t1519 = -qJ(5) * t1234 + t1157 - t1531;
t1509 = pkin(2) * t1458;
t1518 = pkin(9) * t1474 - t1509;
t1363 = t1167 * t1218;
t1099 = t1143 * t1363;
t1364 = t1167 * t1214;
t1336 = t1141 * t1364;
t1314 = t1099 + t1336;
t1098 = t1143 * t1364;
t1335 = t1141 * t1363;
t1315 = t1098 - t1335;
t1367 = t1118 * t1215;
t1421 = t1219 * t1315 + t1367;
t1453 = -t1216 * t1314 + t1220 * t1421;
t1114 = t1219 * t1118;
t1422 = t1215 * t1315 - t1114;
t1457 = t1216 * t1421 + t1220 * t1314;
t1475 = -t1212 * t1422 + t1213 * t1457;
t1515 = -t1217 * t1475 + t1221 * t1453;
t1265 = t1042 * t1218 - t1336;
t1087 = t1215 * t1366;
t1266 = t1042 * t1214 + t1335;
t1426 = t1219 * t1266 - t1087;
t1452 = -t1216 * t1265 + t1220 * t1426;
t1088 = t1219 * t1366;
t1424 = t1215 * t1266 + t1088;
t1456 = t1216 * t1426 + t1220 * t1265;
t1476 = -t1212 * t1424 + t1213 * t1456;
t1514 = -t1217 * t1476 + t1221 * t1452;
t1511 = t1217 * t1453 + t1221 * t1475;
t1510 = t1217 * t1452 + t1221 * t1476;
t1507 = pkin(3) * t1458;
t1505 = pkin(10) * t1458;
t1504 = qJ(5) * t1007;
t1503 = qJ(5) * t1044;
t1345 = t1218 * t1226 - t1098;
t1425 = t1219 * t1345 + t1087;
t1432 = -t1214 * t1226 - t1099;
t1451 = -t1216 * t1432 + t1220 * t1425;
t1492 = t1217 * t1451;
t1484 = t1221 * t1451;
t1480 = -qJ(5) * t1431 - t1507;
t1478 = t1212 * t1456 + t1213 * t1424;
t1477 = t1212 * t1457 + t1213 * t1422;
t1470 = qJ(6) * t1004;
t1423 = t1215 * t1345 - t1088;
t1468 = t1212 * t1423;
t1465 = t1213 * t1423;
t1463 = t1216 * t1425;
t1153 = t1172 * t1344;
t1076 = t1153 + t1120;
t1317 = t1219 * t1153;
t1326 = t1344 * t1174;
t1318 = t1215 * t1326;
t1095 = t1317 - t1318;
t1462 = t1216 * t1095 - t1220 * t1237;
t1353 = t1213 * t1220;
t1419 = t1213 * t1463 + t1353 * t1432 - t1468;
t1450 = t1221 * t1419 + t1492;
t1449 = -t1217 * t1419 + t1484;
t1340 = t1344 ^ 2;
t1209 = t1212 ^ 2;
t1447 = t1209 * t1220;
t1362 = t1174 * t1172;
t1230 = t1237 - t1362;
t1445 = t1215 * t1230;
t1441 = t1219 * t1230;
t1189 = t1204 * t1203;
t1149 = t1189 + t1181;
t1097 = -pkin(5) * t1167 - qJ(6) * t1143;
t1429 = t1143 * t1097 + qJDD(6);
t1428 = -t1042 * pkin(5) + t1429;
t1418 = t1355 * t1432 + t1356 * t1425 + t1465;
t1170 = t1172 ^ 2;
t1171 = t1174 ^ 2;
t1415 = t1204 ^ 2;
t1414 = 0.2e1 * t1143;
t1413 = pkin(4) + pkin(5);
t1412 = pkin(2) * t1216;
t1411 = pkin(2) * t1220;
t1410 = pkin(3) * t1215;
t1409 = pkin(4) * t1218;
t1408 = pkin(8) * t1212;
t1406 = t1213 * g(3);
t1127 = pkin(3) * t1172 - pkin(10) * t1174;
t1200 = g(1) * t1221 + g(2) * t1217;
t1222 = qJD(1) ^ 2;
t1177 = -pkin(1) * t1222 + qJDD(1) * t1408 - t1200;
t1321 = -pkin(9) * t1216 - t1411;
t1395 = qJD(1) * t1212;
t1180 = t1321 * t1395;
t1199 = t1217 * g(1) - t1221 * g(2);
t1240 = qJDD(1) * pkin(1) + t1222 * t1408 + t1199;
t1233 = t1213 * t1240;
t1228 = -g(3) * t1356 + t1216 * t1233;
t1065 = t1322 * pkin(9) - t1415 * pkin(2) + (t1180 * t1395 + t1177) * t1220 + t1228;
t1348 = qJD(2) + t1204;
t1327 = qJD(1) * t1348;
t1224 = -t1181 * pkin(9) - t1406 + (-t1204 * pkin(9) * t1393 + (t1216 * t1327 - t1341) * pkin(2) - t1240) * t1212;
t972 = t1219 * t1065 + t1215 * t1224;
t914 = -pkin(3) * t1340 + pkin(10) * t1237 - t1172 * t1127 + t972;
t1324 = t1216 * t1177 - t1220 * t1233;
t1064 = -t1322 * pkin(2) - t1415 * pkin(9) + (g(3) * t1220 + t1180 * t1394) * t1212 + t1324;
t918 = -t1076 * pkin(10) + (-t1119 - t1326) * pkin(3) + t1064;
t824 = t1214 * t918 + t1218 * t914;
t971 = t1215 * t1065 - t1219 * t1224;
t913 = -t1237 * pkin(3) - t1340 * pkin(10) + t1174 * t1127 + t971;
t1405 = t1214 * t913;
t1401 = t1218 * t913;
t1396 = qJD(1) * t1204;
t1391 = qJD(6) * t1141;
t1389 = t1001 * t1218;
t1376 = t1064 * t1215;
t1375 = t1064 * t1219;
t1107 = -t1237 - t1362;
t1369 = t1107 * t1215;
t1368 = t1107 * t1219;
t1349 = t1220 * t1222;
t1330 = t1216 * t1349;
t1198 = t1209 * t1330;
t1178 = t1198 + t1322;
t1361 = t1178 * t1216;
t1360 = t1178 * t1220;
t1179 = -t1198 + t1322;
t1359 = t1179 * t1216;
t1358 = t1179 * t1220;
t1357 = t1209 * t1222;
t1155 = t1212 * t1240 + t1406;
t1351 = t1216 * t1155;
t1350 = t1220 * t1155;
t1210 = t1216 ^ 2;
t1211 = t1220 ^ 2;
t1343 = t1210 + t1211;
t1339 = -pkin(3) * t1219 - pkin(2);
t1338 = t1204 * t1395;
t1334 = t1216 * t1362;
t1333 = t1220 * t1362;
t1332 = t1210 * t1357;
t1331 = t1211 * t1357;
t1329 = qJ(5) * t1214 + pkin(3);
t1086 = pkin(4) * t1141 - qJ(5) * t1143;
t1328 = -pkin(5) * t1141 - t1086;
t823 = t1214 * t914 - t1218 * t918;
t871 = t1215 * t971 + t1219 * t972;
t1159 = -t1199 * t1217 - t1221 * t1200;
t1197 = qJDD(1) * t1221 - t1217 * t1222;
t1320 = -pkin(7) * t1197 - g(3) * t1217;
t1319 = t1215 * t1153;
t1316 = t1219 * t1326;
t1166 = -t1332 - t1415;
t1126 = -t1166 * t1216 - t1358;
t1313 = pkin(8) * t1126 - t1351;
t1185 = -t1331 - t1415;
t1133 = t1185 * t1220 - t1361;
t1312 = pkin(8) * t1133 + t1350;
t1311 = -pkin(4) * t1416 + t1118 * qJ(5) - t1141 * t1086 + t824;
t757 = t1214 * t824 - t1218 * t823;
t758 = t1214 * t823 + t1218 * t824;
t870 = t1215 * t972 - t1219 * t971;
t1261 = -t1118 * pkin(4) - qJ(5) * t1416 + qJDD(5) + t823;
t1236 = -t1118 * pkin(5) + t1261 - t1470;
t760 = (-0.2e1 * qJD(6) - t1328) * t1143 + t1236;
t1156 = 0.2e1 * t1392;
t1241 = pkin(5) * t1417 - t1167 * t1097 - t1311;
t1232 = -t1042 * qJ(6) + t1241;
t768 = t1156 - t1232 + 0.2e1 * t1391;
t701 = t1214 * t760 + t1218 * t768;
t1231 = t1042 * pkin(4) + t1504 + t913;
t806 = (pkin(4) * t1167 - 0.2e1 * qJD(5)) * t1143 + t1231;
t781 = qJ(6) * t1417 - t1428 + t806;
t676 = t1215 * t781 + t1219 * t701;
t700 = t1214 * t768 - t1218 * t760;
t1310 = t1216 * t676 - t1220 * t700;
t1239 = t1143 * t1086 + t1261;
t797 = t1156 + t1311;
t730 = t1214 * t1239 + t1218 * t797;
t693 = t1215 * t806 + t1219 * t730;
t729 = t1214 * t797 - t1218 * t1239;
t1309 = t1216 * t693 - t1220 * t729;
t734 = t1215 * t913 + t1219 * t758;
t1308 = t1216 * t734 - t1220 * t757;
t892 = t1389 - t1388;
t853 = t1219 * t892 - t1372;
t886 = -t1001 * t1214 - t1500;
t1303 = t1216 * t853 + t1220 * t886;
t861 = t1215 * t997 + t1489;
t1300 = t1216 * t861 - t1487;
t1009 = t1141 * t1346 + t1227;
t868 = -t1009 * t1215 + t1527;
t1297 = t1216 * t868 + t1521;
t1000 = t1042 - t1113;
t882 = -t1000 * t1215 + t1488;
t1291 = t1216 * t882 - t1486;
t1286 = t1220 * t1432 + t1463;
t1031 = (t1141 * t1214 + t1143 * t1218) * t1167;
t1034 = (-t1141 * t1218 + t1143 * t1214) * t1167;
t983 = t1034 * t1219 + t1367;
t1284 = t1031 * t1220 + t1216 * t983;
t1282 = -t1064 * t1220 + t1216 * t871;
t1281 = -t1213 * t1222 + t1396;
t1074 = (-0.2e1 * qJD(3) + t1203) * t1174 - t1323;
t1012 = t1074 * t1219 - t1076 * t1215;
t1129 = -t1171 + t1170;
t1280 = t1012 * t1216 + t1129 * t1220;
t1073 = t1174 * t1203 + t1323;
t1078 = -t1120 + t1153;
t1013 = -t1073 * t1219 - t1078 * t1215;
t1096 = t1170 + t1171;
t1279 = t1013 * t1216 + t1096 * t1220;
t1123 = -t1340 - t1170;
t1040 = t1123 * t1219 - t1445;
t1278 = t1040 * t1216 + t1074 * t1220;
t1130 = -t1171 - t1340;
t1049 = -t1130 * t1215 + t1368;
t1277 = t1049 * t1216 - t1076 * t1220;
t1147 = t1340 - t1171;
t1053 = -t1147 * t1215 + t1441;
t1276 = t1053 * t1216 + t1078 * t1220;
t1146 = t1170 - t1340;
t1054 = t1146 * t1219 + t1369;
t1275 = t1054 * t1216 + t1073 * t1220;
t1124 = g(3) * t1355 + t1324;
t1125 = t1220 * t1177 + t1228;
t1274 = -t1220 * t1124 + t1216 * t1125;
t1047 = t1124 * t1216 + t1125 * t1220;
t1188 = t1204 * t1337;
t1152 = -t1188 - t1243;
t1273 = t1149 * t1220 + t1152 * t1216;
t1150 = -t1189 + t1181;
t1151 = t1188 - t1243;
t1272 = -t1150 * t1220 + t1151 * t1216;
t1271 = t1166 * t1220 - t1359;
t1183 = -t1332 + t1415;
t1270 = t1183 * t1220 + t1361;
t1269 = t1185 * t1216 + t1360;
t1184 = t1331 - t1415;
t1268 = t1184 * t1216 + t1358;
t1158 = t1199 * t1221 - t1200 * t1217;
t1267 = t1212 * t1322;
t1068 = -t1215 * t1119 - t1317;
t1264 = t1068 * t1216 + t1333;
t1070 = t1219 * t1120 + t1318;
t1263 = t1070 * t1216 - t1333;
t679 = -qJ(6) * t768 - t1413 * t781;
t705 = -qJ(5) * t781 - qJ(6) * t760;
t644 = -pkin(10) * t700 - t1214 * t679 + t1218 * t705;
t655 = -pkin(3) * t700 - qJ(5) * t768 + t1413 * t760;
t675 = t1215 * t701 - t1219 * t781;
t622 = -pkin(9) * t675 - t1215 * t655 + t1219 * t644;
t630 = -pkin(2) * t675 + pkin(3) * t781 - pkin(10) * t701 - t1214 * t705 - t1218 * t679;
t656 = t1216 * t700 + t1220 * t676;
t1260 = pkin(8) * t656 + t1216 * t622 + t1220 * t630;
t678 = -pkin(3) * t729 + pkin(4) * t1239 - qJ(5) * t797;
t681 = -pkin(10) * t729 + (pkin(4) * t1214 - qJ(5) * t1218) * t806;
t692 = t1215 * t730 - t1219 * t806;
t643 = -pkin(9) * t692 - t1215 * t678 + t1219 * t681;
t654 = -pkin(2) * t692 - pkin(10) * t730 + (t1329 + t1409) * t806;
t669 = t1216 * t729 + t1220 * t693;
t1259 = pkin(8) * t669 + t1216 * t643 + t1220 * t654;
t1134 = -0.2e1 * t1391;
t732 = t1134 + t1157 + t1413 * t1044 + (-t1042 - t1245) * qJ(6) + t1241;
t737 = qJD(6) * t1414 + t1143 * t1328 - t1236 + t1470 + t1503;
t673 = -t1214 * t732 + t1218 * t737 - t1560;
t782 = -t1004 * t1413 - t1553;
t661 = -t1215 * t782 + t1219 * t673 - t1587;
t668 = -t1214 * t737 - t1218 * t732 - t1576;
t1258 = t1216 * t661 + t1220 * t668 + t1605;
t1229 = qJD(5) * t1414 - t1231;
t788 = (-t1001 - t1113) * pkin(4) + t1229;
t736 = t788 + (-t1431 - t1417) * qJ(6) + (-t1001 - t1042) * pkin(5) + t1429;
t904 = -qJ(5) * t1001 + qJ(6) * t1235;
t707 = -t1214 * t736 + t1218 * t904 - t1505;
t720 = -t1235 * t1413 + t1480 + t760;
t664 = -t1215 * t720 + t1219 * t707 - t1530;
t689 = pkin(3) * t1001 - t1214 * t904 - t1218 * t736 + t1520;
t1257 = t1216 * t664 + t1220 * t689 + t1546;
t787 = -pkin(4) * t1113 + t1229 - t1504;
t754 = (t1433 - t1417) * qJ(6) + t787 + t1428;
t835 = -qJ(6) * t1234 - t1007 * t1413;
t709 = -t1214 * t835 + t1218 * t754 - t1529;
t728 = -t1413 * t1433 + t1134 + t1232 + t1519;
t667 = -t1215 * t728 + t1219 * t709 - t1570;
t690 = pkin(3) * t1007 - t1214 * t754 - t1218 * t835 + t1565;
t1256 = t1216 * t667 + t1220 * t690 + t1585;
t733 = t1215 * t758 - t1219 * t913;
t671 = -pkin(9) * t733 + (-pkin(10) * t1219 + t1410) * t757;
t683 = -pkin(2) * t733 + pkin(3) * t913 - pkin(10) * t758;
t688 = t1216 * t757 + t1220 * t734;
t1255 = pkin(8) * t688 + t1216 * t671 + t1220 * t683;
t783 = -pkin(4) * t1044 + t797;
t786 = t1239 - t1503;
t702 = -t1214 * t783 + t1218 * t786 + t1560;
t805 = pkin(4) * t1004 + t1553;
t672 = -t1215 * t805 + t1219 * t702 + t1587;
t684 = -t1214 * t786 - t1218 * t783 + t1576;
t1254 = t1216 * t672 + t1220 * t684 - t1605;
t747 = pkin(4) * t1388 + t1218 * t787 - t1529;
t752 = -pkin(4) * t1433 - t1311 + t1519;
t680 = -t1215 * t752 + t1219 * t747 - t1570;
t710 = -t1214 * t787 - (-pkin(3) - t1409) * t1007 + t1565;
t1253 = t1216 * t680 + t1220 * t710 + t1585;
t748 = -qJ(5) * t1389 - t1214 * t788 - t1505;
t755 = -pkin(4) * t1235 + t1239 + t1480;
t682 = -t1215 * t755 + t1219 * t748 - t1530;
t711 = t1001 * t1329 - t1218 * t788 + t1520;
t1252 = t1216 * t682 + t1220 * t711 + t1546;
t731 = -t757 + t1560;
t691 = t1219 * t731 - t1410 * t885 + t1587;
t703 = t1576 - t758;
t1251 = t1216 * t691 + t1220 * t703 - t1605;
t795 = t823 - t1507;
t827 = t1405 - t1505;
t858 = -t1219 * t997 + t1497;
t718 = -pkin(9) * t858 - t1215 * t795 + t1219 * t827;
t759 = -pkin(2) * t858 + pkin(3) * t997 + t1401 - t1506;
t810 = t1220 * t861 + t1495;
t1250 = pkin(8) * t810 + t1216 * t718 + t1220 * t759;
t796 = t824 + t1531;
t833 = t1401 + t1529;
t865 = t1009 * t1219 + t1528;
t719 = -pkin(9) * t865 - t1215 * t796 + t1219 * t833;
t761 = -pkin(2) * t865 - pkin(3) * t1009 - t1405 - t1533;
t814 = t1220 * t868 - t1522;
t1249 = pkin(8) * t814 + t1216 * t719 + t1220 * t761;
t1039 = t1123 * t1215 + t1441;
t903 = -pkin(2) * t1039 + t971;
t951 = -pkin(9) * t1039 + t1376;
t954 = t1040 * t1220 - t1074 * t1216;
t1248 = pkin(8) * t954 + t1216 * t951 + t1220 * t903;
t1048 = t1130 * t1219 + t1369;
t907 = -pkin(2) * t1048 + t972;
t955 = -pkin(9) * t1048 + t1375;
t956 = t1049 * t1220 + t1076 * t1216;
t1247 = pkin(8) * t956 + t1216 * t955 + t1220 * t907;
t1092 = t1150 * t1216 + t1151 * t1220;
t1246 = pkin(8) * t1092 + t1047;
t1011 = -t1073 * t1215 + t1078 * t1219;
t822 = -pkin(9) * t1011 - t870;
t934 = t1013 * t1220 - t1096 * t1216;
t1244 = pkin(8) * t934 - t1011 * t1411 + t1216 * t822;
t834 = t1064 * t1216 + t1220 * t871;
t1242 = pkin(8) * t834 + t1321 * t870;
t1208 = t1212 * t1209;
t1196 = qJDD(1) * t1217 + t1221 * t1222;
t1187 = t1343 * t1357;
t1186 = (t1210 - t1211) * t1357;
t1182 = -pkin(7) * t1196 + g(3) * t1221;
t1154 = t1343 * t1338;
t1148 = (t1220 * t1327 + t1342) * t1212;
t1145 = t1181 * t1220 - t1210 * t1338;
t1144 = (-t1211 * t1396 + t1216 * t1262) * t1212;
t1132 = t1184 * t1220 - t1359;
t1131 = -t1183 * t1216 + t1360;
t1122 = (t1149 * t1213 + t1208 * t1349) * t1216;
t1121 = -t1208 * t1330 + (-t1348 * t1394 + t1341) * t1212 * t1353;
t1094 = t1319 + t1316;
t1093 = -t1149 * t1216 + t1152 * t1220;
t1084 = t1212 * t1152 + t1213 * t1269;
t1083 = -t1212 * t1151 + t1213 * t1268;
t1082 = -t1212 * t1150 + t1213 * t1270;
t1081 = -t1213 * t1152 + t1212 * t1269;
t1072 = -t1212 * t1148 + t1213 * t1271;
t1071 = t1213 * t1148 + t1212 * t1271;
t1069 = t1215 * t1120 - t1316;
t1067 = t1219 * t1119 - t1319;
t1066 = t1220 * t1095 + t1216 * t1237;
t1063 = -t1212 * t1186 + t1213 * t1273;
t1062 = t1212 * t1187 + t1213 * t1272;
t1061 = -t1213 * t1187 + t1212 * t1272;
t1052 = t1146 * t1215 - t1368;
t1051 = t1147 * t1219 + t1445;
t1029 = -t1084 * t1217 + t1133 * t1221;
t1028 = t1084 * t1221 + t1133 * t1217;
t1022 = t1070 * t1220 + t1334;
t1021 = t1068 * t1220 - t1334;
t1020 = -t1072 * t1217 + t1126 * t1221;
t1019 = t1072 * t1221 + t1126 * t1217;
t1018 = t1212 * t1155 + t1213 * t1274;
t1017 = -t1213 * t1155 + t1212 * t1274;
t1016 = -t1212 * t1094 + t1213 * t1462;
t1015 = -t1062 * t1217 + t1092 * t1221;
t1014 = t1062 * t1221 + t1092 * t1217;
t1010 = t1074 * t1215 + t1076 * t1219;
t980 = t1034 * t1215 - t1114;
t974 = t1054 * t1220 - t1073 * t1216;
t973 = t1053 * t1220 - t1078 * t1216;
t957 = -t1351 + (-t1081 * t1212 - t1084 * t1213) * pkin(8);
t953 = -t1350 + (-t1071 * t1212 - t1072 * t1213) * pkin(8);
t952 = -pkin(1) * t1081 + t1212 * t1124 + t1213 * t1312;
t944 = t1012 * t1220 - t1129 * t1216;
t943 = -pkin(1) * t1071 + t1212 * t1125 + t1213 * t1313;
t936 = -t1212 * t1069 + t1213 * t1263;
t935 = -t1212 * t1067 + t1213 * t1264;
t933 = pkin(8) * t1047 * t1213 - pkin(1) * t1017;
t932 = -t1018 * t1217 + t1047 * t1221;
t931 = t1018 * t1221 + t1047 * t1217;
t915 = -pkin(1) * t1061 + t1213 * t1246;
t912 = -pkin(2) * t1076 + pkin(9) * t1049 + t1376;
t910 = -t1212 * t1052 + t1213 * t1275;
t909 = -t1212 * t1051 + t1213 * t1276;
t908 = (-t1017 * t1212 - t1018 * t1213) * pkin(8);
t906 = pkin(2) * t1074 + pkin(9) * t1040 - t1375;
t905 = (-t1061 * t1212 - t1062 * t1213) * pkin(8) - t1274;
t902 = -t1212 * t1048 + t1213 * t1277;
t901 = t1213 * t1048 + t1212 * t1277;
t899 = -t1031 * t1216 + t1220 * t983;
t897 = -t1212 * t1039 + t1213 * t1278;
t896 = t1213 * t1039 + t1212 * t1278;
t876 = t1000 * t1219 + t1496;
t863 = -t1212 * t1010 + t1213 * t1280;
t856 = -t1212 * t1011 + t1213 * t1279;
t855 = t1213 * t1011 + t1212 * t1279;
t850 = t1215 * t892 + t1085;
t836 = -pkin(2) * t1064 + pkin(9) * t871;
t831 = -t1212 * t980 + t1213 * t1284;
t829 = -t1217 * t902 + t1221 * t956;
t828 = t1217 * t956 + t1221 * t902;
t826 = -t1217 * t897 + t1221 * t954;
t825 = t1217 * t954 + t1221 * t897;
t820 = t1220 * t882 + t1494;
t812 = pkin(2) * t1096 + pkin(9) * t1013 + t871;
t808 = -t1217 * t856 + t1221 * t934;
t807 = t1217 * t934 + t1221 * t856;
t804 = t1213 * t1286 - t1468;
t793 = -t1216 * t886 + t1220 * t853;
t785 = -t1212 * t870 + t1213 * t1282;
t784 = t1212 * t1282 + t1213 * t870;
t779 = -t1212 * t876 + t1213 * t1291;
t773 = -t1212 * t865 + t1213 * t1297;
t770 = t1212 * t1297 + t1213 * t865;
t766 = -t1212 * t858 + t1213 * t1300;
t763 = t1212 * t1300 + t1213 * t858;
t756 = -t1216 * t907 + t1220 * t955 + (-t1212 * t901 - t1213 * t902) * pkin(8);
t753 = -t1216 * t903 + t1220 * t951 + (-t1212 * t896 - t1213 * t897) * pkin(8);
t750 = -t1212 * t850 + t1213 * t1303;
t746 = -pkin(1) * t901 - t1212 * t912 + t1213 * t1247;
t739 = -t1217 * t785 + t1221 * t834;
t738 = t1217 * t834 + t1221 * t785;
t735 = -pkin(1) * t896 - t1212 * t906 + t1213 * t1248;
t727 = t1011 * t1412 + t1220 * t822 + (-t1212 * t855 - t1213 * t856) * pkin(8);
t725 = -t1217 * t773 + t1221 * t814;
t722 = t1217 * t814 + t1221 * t773;
t716 = -t1217 * t766 + t1221 * t810;
t713 = t1217 * t810 + t1221 * t766;
t708 = pkin(9) * t868 + t1215 * t833 + t1219 * t796 + t1532;
t706 = pkin(9) * t861 + t1215 * t827 + t1219 * t795 - t1509;
t704 = -pkin(1) * t855 - t1212 * t812 + t1213 * t1244;
t687 = (-pkin(9) * t1220 + t1412) * t870 + (-t1212 * t784 - t1213 * t785) * pkin(8);
t686 = -pkin(1) * t784 - t1212 * t836 + t1213 * t1242;
t685 = t1215 * t731 - t1339 * t885 - t1586;
t677 = t1215 * t748 + t1219 * t755 + t1518;
t674 = t1215 * t747 + t1219 * t752 + t1564;
t670 = t1215 * t702 + t1219 * t805 - t1575;
t666 = -t1212 * t733 + t1213 * t1308;
t665 = t1212 * t1308 + t1213 * t733;
t663 = t1215 * t709 + t1219 * t728 + t1564;
t662 = t1215 * t707 + t1219 * t720 + t1518;
t660 = pkin(9) * t734 + (-pkin(10) * t1215 + t1339) * t757;
t659 = -t1216 * t761 + t1220 * t719 + (-t1212 * t770 - t1213 * t773) * pkin(8);
t658 = t1215 * t673 + t1219 * t782 + t1575;
t657 = -t1216 * t759 + t1220 * t718 + (-t1212 * t763 - t1213 * t766) * pkin(8);
t653 = -t1212 * t692 + t1213 * t1309;
t652 = t1212 * t1309 + t1213 * t692;
t651 = -pkin(1) * t770 - t1212 * t708 + t1213 * t1249;
t650 = -t1217 * t666 + t1221 * t688;
t649 = t1217 * t688 + t1221 * t666;
t648 = -pkin(1) * t763 - t1212 * t706 + t1213 * t1250;
t647 = -t1216 * t711 + t1220 * t682 + t1547;
t646 = -t1216 * t710 + t1220 * t680 + t1588;
t645 = -t1216 * t703 + t1220 * t691 + t1607;
t642 = -t1212 * t675 + t1213 * t1310;
t641 = t1212 * t1310 + t1213 * t675;
t640 = -t1216 * t690 + t1220 * t667 + t1588;
t639 = -t1216 * t684 + t1220 * t672 + t1607;
t638 = -t1216 * t689 + t1220 * t664 + t1547;
t637 = -t1212 * t685 + t1213 * t1251 + t1615;
t636 = -t1212 * t677 + t1213 * t1252 - t1558;
t635 = -t1212 * t674 + t1213 * t1253 - t1593;
t634 = -pkin(2) * t729 + pkin(9) * t693 + t1215 * t681 + t1219 * t678;
t633 = -t1217 * t653 + t1221 * t669;
t632 = t1217 * t669 + t1221 * t653;
t631 = -t1216 * t668 + t1220 * t661 - t1607;
t629 = -t1212 * t670 + t1213 * t1254 + t1615;
t628 = -t1212 * t663 + t1213 * t1256 - t1593;
t627 = -t1212 * t662 + t1213 * t1257 - t1558;
t626 = -t1217 * t642 + t1221 * t656;
t625 = t1217 * t656 + t1221 * t642;
t624 = -t1216 * t683 + t1220 * t671 + (-t1212 * t665 - t1213 * t666) * pkin(8);
t623 = -t1212 * t658 + t1213 * t1258 - t1615;
t621 = -pkin(1) * t665 - t1212 * t660 + t1213 * t1255;
t620 = -pkin(2) * t700 + pkin(9) * t676 + t1215 * t644 + t1219 * t655;
t619 = -t1216 * t654 + t1220 * t643 + (-t1212 * t652 - t1213 * t653) * pkin(8);
t618 = -pkin(1) * t652 - t1212 * t634 + t1213 * t1259;
t617 = -t1216 * t630 + t1220 * t622 + (-t1212 * t641 - t1213 * t642) * pkin(8);
t616 = -pkin(1) * t641 - t1212 * t620 + t1213 * t1260;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1196, -t1197, 0, t1159, 0, 0, 0, 0, 0, 0, t1029, t1020, t1015, t932, 0, 0, 0, 0, 0, 0, t826, t829, t808, t739, 0, 0, 0, 0, 0, 0, t716, t725, t1611, t650, 0, 0, 0, 0, 0, 0, t1550, t1611, t1590, t633, 0, 0, 0, 0, 0, 0, t1550, t1590, -t1611, t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1197, -t1196, 0, t1158, 0, 0, 0, 0, 0, 0, t1028, t1019, t1014, t931, 0, 0, 0, 0, 0, 0, t825, t828, t807, t738, 0, 0, 0, 0, 0, 0, t713, t722, -t694, t649, 0, 0, 0, 0, 0, 0, t1548, -t694, t1589, t632, 0, 0, 0, 0, 0, 0, t1548, t1589, t694, t625; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1081, t1071, t1061, t1017, 0, 0, 0, 0, 0, 0, t896, t901, t855, t784, 0, 0, 0, 0, 0, 0, t763, t770, -t740, t665, 0, 0, 0, 0, 0, 0, t1537, -t740, t1574, t652, 0, 0, 0, 0, 0, 0, t1537, t1574, t740, t641; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1197, 0, -t1196, 0, t1320, -t1182, -t1158, -pkin(7) * t1158, -t1122 * t1217 + t1145 * t1221, -t1063 * t1217 + t1093 * t1221, -t1082 * t1217 + t1131 * t1221, -t1121 * t1217 + t1144 * t1221, -t1083 * t1217 + t1132 * t1221, t1221 * t1154 + t1217 * t1267, -pkin(7) * t1028 - t1217 * t952 + t1221 * t957, -pkin(7) * t1019 - t1217 * t943 + t1221 * t953, -pkin(7) * t1014 - t1217 * t915 + t1221 * t905, -pkin(7) * t931 - t1217 * t933 + t1221 * t908, t1022 * t1221 - t1217 * t936, -t1217 * t863 + t1221 * t944, -t1217 * t909 + t1221 * t973, t1021 * t1221 - t1217 * t935, -t1217 * t910 + t1221 * t974, -t1016 * t1217 + t1066 * t1221, -pkin(7) * t825 - t1217 * t735 + t1221 * t753, -pkin(7) * t828 - t1217 * t746 + t1221 * t756, -pkin(7) * t807 - t1217 * t704 + t1221 * t727, -pkin(7) * t738 - t1217 * t686 + t1221 * t687, t1449, -t1612, -t1606, t1514, t1613, t1515, -pkin(7) * t713 - t1217 * t648 + t1221 * t657, -pkin(7) * t722 - t1217 * t651 + t1221 * t659, -t1217 * t637 + t1221 * t645 + t1617, -pkin(7) * t649 - t1217 * t621 + t1221 * t624, t1449, -t1606, t1612, t1515, -t1613, t1514, -t1217 * t636 + t1221 * t647 - t1572, -t1217 * t629 + t1221 * t639 + t1617, -t1217 * t635 + t1221 * t646 - t1604, -pkin(7) * t632 - t1217 * t618 + t1221 * t619, -t1217 * t804 + t1484, -t1217 * t750 + t1221 * t793, t1606, t1514, -t1217 * t779 + t1221 * t820, -t1217 * t831 + t1221 * t899, -t1217 * t627 + t1221 * t638 - t1572, -t1217 * t628 + t1221 * t640 - t1604, -t1217 * t623 + t1221 * t631 - t1617, -pkin(7) * t625 - t1217 * t616 + t1221 * t617; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1196, 0, t1197, 0, t1182, t1320, t1159, pkin(7) * t1159, t1122 * t1221 + t1145 * t1217, t1063 * t1221 + t1093 * t1217, t1082 * t1221 + t1131 * t1217, t1121 * t1221 + t1144 * t1217, t1083 * t1221 + t1132 * t1217, t1217 * t1154 - t1221 * t1267, pkin(7) * t1029 + t1217 * t957 + t1221 * t952, pkin(7) * t1020 + t1217 * t953 + t1221 * t943, pkin(7) * t1015 + t1217 * t905 + t1221 * t915, pkin(7) * t932 + t1217 * t908 + t1221 * t933, t1022 * t1217 + t1221 * t936, t1217 * t944 + t1221 * t863, t1217 * t973 + t1221 * t909, t1021 * t1217 + t1221 * t935, t1217 * t974 + t1221 * t910, t1016 * t1221 + t1066 * t1217, pkin(7) * t826 + t1217 * t753 + t1221 * t735, pkin(7) * t829 + t1217 * t756 + t1221 * t746, pkin(7) * t808 + t1217 * t727 + t1221 * t704, pkin(7) * t739 + t1217 * t687 + t1221 * t686, t1450, t1609, t1549, t1510, -t1610, t1511, pkin(7) * t716 + t1217 * t657 + t1221 * t648, pkin(7) * t725 + t1217 * t659 + t1221 * t651, t1217 * t645 + t1221 * t637 + t1616, pkin(7) * t650 + t1217 * t624 + t1221 * t621, t1450, t1549, -t1609, t1511, t1610, t1510, t1217 * t647 + t1221 * t636 + t1571, t1217 * t639 + t1221 * t629 + t1616, t1217 * t646 + t1221 * t635 + t1603, pkin(7) * t633 + t1217 * t619 + t1221 * t618, t1221 * t804 + t1492, t1217 * t793 + t1221 * t750, -t1549, t1510, t1217 * t820 + t1221 * t779, t1217 * t899 + t1221 * t831, t1217 * t638 + t1221 * t627 + t1571, t1217 * t640 + t1221 * t628 + t1603, t1217 * t631 + t1221 * t623 - t1616, pkin(7) * t626 + t1217 * t617 + t1221 * t616; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1199, t1200, 0, 0, (t1181 * t1212 + t1281 * t1447) * t1216, t1213 * t1186 + t1212 * t1273, t1213 * t1150 + t1212 * t1270, (-t1216 * t1281 - t1262) * t1447, t1213 * t1151 + t1212 * t1268, t1213 * t1322, pkin(1) * t1084 - t1213 * t1124 + t1212 * t1312, pkin(1) * t1072 - t1213 * t1125 + t1212 * t1313, pkin(1) * t1062 + t1212 * t1246, pkin(1) * t1018 + t1047 * t1408, t1213 * t1069 + t1212 * t1263, t1213 * t1010 + t1212 * t1280, t1213 * t1051 + t1212 * t1276, t1213 * t1067 + t1212 * t1264, t1213 * t1052 + t1212 * t1275, t1213 * t1094 + t1212 * t1462, pkin(1) * t897 + t1212 * t1248 + t1213 * t906, pkin(1) * t902 + t1212 * t1247 + t1213 * t912, pkin(1) * t856 + t1212 * t1244 + t1213 * t812, pkin(1) * t785 + t1212 * t1242 + t1213 * t836, t1418, t1595, t1536, t1478, -t1596, t1477, pkin(1) * t766 + t1212 * t1250 + t1213 * t706, pkin(1) * t773 + t1212 * t1249 + t1213 * t708, t1212 * t1251 + t1213 * t685 - t1614, pkin(1) * t666 + t1212 * t1255 + t1213 * t660, t1418, t1536, -t1595, t1477, t1596, t1478, t1212 * t1252 + t1213 * t677 + t1559, t1212 * t1254 + t1213 * t670 - t1614, t1212 * t1253 + t1213 * t674 + t1594, pkin(1) * t653 + t1212 * t1259 + t1213 * t634, t1212 * t1286 + t1465, t1212 * t1303 + t1213 * t850, -t1536, t1478, t1212 * t1291 + t1213 * t876, t1212 * t1284 + t1213 * t980, t1212 * t1257 + t1213 * t662 + t1559, t1212 * t1256 + t1213 * t663 + t1594, t1212 * t1258 + t1213 * t658 + t1614, pkin(1) * t642 + t1212 * t1260 + t1213 * t620;];
tauB_reg  = t1;
