% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 08:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 08:23:40
% EndTime: 2019-05-07 08:25:34
% DurationCPUTime: 102.47s
% Computational Cost: add. (413291->1008), mult. (915594->1556), div. (0->0), fcn. (742642->12), ass. (0->749)
t1302 = sin(qJ(1));
t1306 = cos(qJ(1));
t1296 = sin(pkin(6));
t1298 = cos(pkin(6));
t1301 = sin(qJ(2));
t1305 = cos(qJ(2));
t1300 = sin(qJ(3));
t1304 = cos(qJ(3));
t1485 = qJD(1) * t1298;
t1287 = qJD(2) + t1485;
t1439 = t1296 * t1301;
t1424 = qJD(1) * t1439;
t1251 = t1287 * t1304 - t1300 * t1424;
t1252 = t1287 * t1300 + t1304 * t1424;
t1295 = sin(pkin(11));
t1297 = cos(pkin(11));
t1218 = t1295 * t1251 + t1297 * t1252;
t1438 = t1296 * t1305;
t1423 = qJD(1) * t1438;
t1280 = -qJD(3) + t1423;
t1299 = sin(qJ(5));
t1303 = cos(qJ(5));
t1192 = t1218 * t1303 - t1280 * t1299;
t1216 = -t1297 * t1251 + t1252 * t1295;
t1213 = qJD(5) + t1216;
t1427 = qJDD(1) * t1301;
t1483 = qJD(1) * t1305;
t1260 = (qJD(2) * t1483 + t1427) * t1296;
t1403 = qJDD(1) * t1298 + qJDD(2);
t1203 = t1251 * qJD(3) + t1304 * t1260 + t1300 * t1403;
t1405 = t1300 * t1260 - t1304 * t1403;
t1341 = qJD(3) * t1252 + t1405;
t1146 = t1297 * t1203 - t1295 * t1341;
t1428 = qJDD(1) * t1296;
t1350 = qJD(2) * t1424 - t1305 * t1428;
t1339 = qJDD(3) + t1350;
t1408 = t1299 * t1146 - t1303 * t1339;
t1022 = (qJD(5) - t1213) * t1192 + t1408;
t1502 = t1213 ^ 2;
t1190 = t1218 * t1299 + t1303 * t1280;
t1503 = t1190 ^ 2;
t1135 = t1503 - t1502;
t1123 = t1192 * t1190;
t1407 = t1203 * t1295 + t1297 * t1341;
t1141 = qJDD(5) + t1407;
t1516 = t1123 + t1141;
t1472 = t1516 * t1299;
t994 = t1135 * t1303 - t1472;
t921 = t1022 * t1297 + t1295 * t994;
t925 = -t1022 * t1295 + t1297 * t994;
t848 = t1300 * t921 - t1304 * t925;
t1471 = t1516 * t1303;
t989 = t1135 * t1299 + t1471;
t1379 = t1301 * t848 + t1305 * t989;
t845 = t1300 * t925 + t1304 * t921;
t763 = t1296 * t845 + t1298 * t1379;
t805 = -t1301 * t989 + t1305 * t848;
t1653 = t1302 * t763 - t1306 * t805;
t1189 = t1192 ^ 2;
t1120 = t1189 - t1503;
t1431 = qJD(5) + t1213;
t1021 = t1192 * t1431 + t1408;
t1315 = -t1303 * t1146 - t1299 * t1339;
t1312 = -t1190 * qJD(5) - t1315;
t1459 = t1190 * t1213;
t1513 = -t1459 + t1312;
t1475 = t1513 * t1299;
t935 = -t1021 * t1303 - t1475;
t896 = -t1120 * t1297 + t1295 * t935;
t898 = t1120 * t1295 + t1297 * t935;
t822 = t1300 * t896 - t1304 * t898;
t929 = -t1021 * t1299 + t1303 * t1513;
t1387 = t1301 * t822 + t1305 * t929;
t821 = t1300 * t898 + t1304 * t896;
t748 = t1296 * t821 + t1298 * t1387;
t780 = -t1301 * t929 + t1305 * t822;
t1652 = t1302 * t748 - t1306 * t780;
t1651 = t1302 * t805 + t1306 * t763;
t1650 = t1302 * t780 + t1306 * t748;
t1645 = t1296 * t1379 - t1298 * t845;
t1644 = t1296 * t1387 - t1298 * t821;
t1514 = -t1459 - t1312;
t1549 = -t1022 * t1299 + t1514 * t1303;
t1515 = t1189 + t1503;
t1548 = -t1022 * t1303 - t1514 * t1299;
t1571 = -t1295 * t1515 + t1297 * t1548;
t1575 = t1295 * t1548 + t1297 * t1515;
t1590 = -t1300 * t1575 + t1304 * t1571;
t1611 = t1301 * t1549 + t1305 * t1590;
t1589 = t1300 * t1571 + t1304 * t1575;
t1613 = t1301 * t1590 - t1305 * t1549;
t1623 = -t1296 * t1589 + t1298 * t1613;
t1632 = t1302 * t1611 + t1306 * t1623;
t1643 = pkin(7) * t1632;
t1634 = -t1302 * t1623 + t1306 * t1611;
t1642 = pkin(7) * t1634;
t1637 = pkin(1) * t1623;
t1625 = t1296 * t1613 + t1298 * t1589;
t1636 = pkin(1) * t1625;
t1136 = -t1189 + t1502;
t1517 = -t1123 + t1141;
t1470 = t1517 * t1299;
t1551 = -t1136 * t1303 - t1470;
t1469 = t1517 * t1303;
t1550 = -t1136 * t1299 + t1469;
t1570 = -t1295 * t1514 + t1297 * t1550;
t1574 = t1295 * t1550 + t1297 * t1514;
t1592 = -t1300 * t1574 + t1304 * t1570;
t1612 = -t1301 * t1551 + t1305 * t1592;
t1591 = t1300 * t1570 + t1304 * t1574;
t1614 = t1301 * t1592 + t1305 * t1551;
t1622 = -t1296 * t1591 + t1298 * t1614;
t1635 = -t1302 * t1622 + t1306 * t1612;
t1633 = t1302 * t1612 + t1306 * t1622;
t1631 = (-t1296 * t1625 - t1298 * t1623) * pkin(8);
t1630 = pkin(8) * t1611;
t1624 = t1296 * t1614 + t1298 * t1591;
t1621 = pkin(9) * t1589;
t1616 = -pkin(2) * t1589 - pkin(3) * t1575 - pkin(4) * t1515 - pkin(10) * t1548;
t1615 = -pkin(2) * t1549 + pkin(9) * t1590;
t1092 = t1502 + t1189;
t967 = t1092 * t1303 + t1472;
t1610 = pkin(2) * t967;
t1609 = pkin(3) * t967;
t1608 = pkin(4) * t967;
t1607 = pkin(10) * t967;
t976 = t1092 * t1299 - t1471;
t1606 = pkin(10) * t976;
t1605 = qJ(4) * t1571;
t1604 = qJ(4) * t1575;
t1603 = t1295 * t976;
t1602 = t1297 * t976;
t1601 = t1301 * t967;
t1599 = t1305 * t967;
t1454 = t1213 * t1303;
t1132 = t1192 * t1454;
t1455 = t1213 * t1299;
t1418 = t1190 * t1455;
t1395 = t1132 + t1418;
t1131 = t1192 * t1455;
t1417 = t1190 * t1454;
t1396 = t1131 - t1417;
t1507 = t1141 * t1295 + t1297 * t1396;
t1510 = -t1297 * t1141 + t1295 * t1396;
t1531 = -t1300 * t1510 + t1304 * t1507;
t1545 = -t1301 * t1395 + t1305 * t1531;
t1530 = t1300 * t1507 + t1304 * t1510;
t1547 = t1301 * t1531 + t1305 * t1395;
t1568 = -t1296 * t1530 + t1298 * t1547;
t1596 = -t1302 * t1568 + t1306 * t1545;
t1072 = -qJD(5) * t1192 - t1408;
t1344 = -t1072 * t1303 - t1418;
t1345 = -t1072 * t1299 + t1417;
t1420 = t1295 * t1123;
t1508 = t1297 * t1345 - t1420;
t1419 = t1297 * t1123;
t1509 = t1295 * t1345 + t1419;
t1529 = -t1300 * t1509 + t1304 * t1508;
t1544 = -t1301 * t1344 + t1305 * t1529;
t1528 = t1300 * t1508 + t1304 * t1509;
t1546 = t1301 * t1529 + t1305 * t1344;
t1569 = -t1296 * t1528 + t1298 * t1546;
t1595 = -t1302 * t1569 + t1306 * t1544;
t1594 = t1302 * t1545 + t1306 * t1568;
t1593 = t1302 * t1544 + t1306 * t1569;
t1587 = pkin(10) * t1549;
t1573 = t1296 * t1546 + t1298 * t1528;
t1572 = t1296 * t1547 + t1298 * t1530;
t1512 = -t1502 - t1503;
t1534 = t1299 * t1512 + t1469;
t1567 = pkin(2) * t1534;
t1566 = pkin(3) * t1534;
t1565 = pkin(4) * t1534;
t1533 = t1303 * t1512 - t1470;
t1564 = pkin(10) * t1533;
t1563 = pkin(10) * t1534;
t1562 = qJ(6) * t1513;
t1559 = t1295 * t1533;
t1556 = t1297 * t1533;
t1553 = t1301 * t1534;
t1552 = t1305 * t1534;
t1019 = -t1299 * t1312 - t1132;
t1437 = t1298 * t1301;
t1020 = t1303 * t1312 - t1131;
t1397 = t1297 * t1020 + t1420;
t1398 = t1295 * t1020 - t1419;
t1505 = t1300 * t1397 + t1304 * t1398;
t1506 = -t1300 * t1398 + t1304 * t1397;
t1526 = t1298 * t1305 * t1019 - t1296 * t1505 + t1437 * t1506;
t1532 = -t1019 * t1301 + t1305 * t1506;
t1543 = t1302 * t1532 + t1306 * t1526;
t1542 = -t1302 * t1526 + t1306 * t1532;
t1541 = 2 * qJD(6);
t1268 = t1287 * t1424;
t1535 = t1350 + t1268;
t1452 = t1218 * t1280;
t1101 = t1407 - t1452;
t1527 = t1019 * t1438 + t1298 * t1505 + t1439 * t1506;
t1486 = qJD(1) * t1296;
t1453 = t1216 * t1218;
t1318 = t1339 - t1453;
t1525 = t1295 * t1318;
t1524 = t1297 * t1318;
t1451 = t1251 * t1252;
t1317 = t1339 + t1451;
t1523 = t1300 * t1317;
t1520 = t1304 * t1317;
t1199 = t1216 * t1280;
t1103 = t1199 + t1146;
t1235 = t1251 * t1280;
t1175 = -t1235 - t1203;
t1173 = -t1235 + t1203;
t1119 = pkin(5) * t1190 - qJ(6) * t1192;
t1151 = pkin(4) * t1216 - pkin(10) * t1218;
t1500 = t1280 ^ 2;
t1283 = g(1) * t1306 + t1302 * g(2);
t1504 = qJD(1) ^ 2;
t1256 = -pkin(1) * t1504 + pkin(8) * t1428 - t1283;
t1497 = pkin(2) * t1305;
t1401 = -pkin(9) * t1301 - t1497;
t1259 = t1401 * t1486;
t1282 = t1302 * g(1) - t1306 * g(2);
t1351 = -qJDD(1) * pkin(1) - t1282;
t1494 = pkin(8) * t1296;
t1319 = t1494 * t1504 - t1351;
t1316 = t1298 * t1319;
t1314 = -g(3) * t1439 + t1301 * t1316;
t1311 = pkin(9) * t1403 + t1314;
t1499 = t1287 ^ 2;
t1309 = -t1499 * pkin(2) + (t1259 * t1486 + t1256) * t1305 + t1311;
t1498 = pkin(2) * t1301;
t1400 = -pkin(9) * t1305 + t1498;
t1492 = t1298 * g(3);
t1493 = t1260 * pkin(9);
t1310 = t1350 * pkin(2) - t1493 - t1492 + ((-pkin(8) * t1486 + t1287 * t1400) * qJD(1) + t1351) * t1296;
t1084 = t1300 * t1310 + t1304 * t1309;
t1227 = -pkin(3) * t1280 - qJ(4) * t1252;
t1501 = t1251 ^ 2;
t1033 = -pkin(3) * t1501 - qJ(4) * t1341 + t1280 * t1227 + t1084;
t1083 = t1300 * t1309 - t1304 * t1310;
t1308 = pkin(3) * t1317 + qJ(4) * t1175 - t1083;
t917 = -0.2e1 * qJD(4) * t1216 + t1297 * t1033 + t1295 * t1308;
t884 = -pkin(4) * t1500 + pkin(10) * t1339 - t1216 * t1151 + t917;
t1406 = t1301 * t1256 - t1305 * t1316;
t1484 = qJD(1) * t1301;
t1163 = -t1403 * pkin(2) - t1499 * pkin(9) + (g(3) * t1305 + t1259 * t1484) * t1296 + t1406;
t1063 = t1341 * pkin(3) - t1501 * qJ(4) + t1252 * t1227 + qJDD(4) + t1163;
t942 = pkin(4) * t1101 - pkin(10) * t1103 + t1063;
t837 = t1299 * t942 + t1303 * t884;
t1392 = t1141 * qJ(6) - t1190 * t1119 + t1213 * t1541 + t837;
t1511 = -t1072 * pkin(5) - t1562;
t1176 = (qJD(3) + t1280) * t1252 + t1405;
t1214 = t1216 ^ 2;
t1215 = t1218 ^ 2;
t1250 = t1252 ^ 2;
t1496 = pkin(4) * t1295;
t1495 = pkin(5) * t1303;
t836 = t1299 * t884 - t1303 * t942;
t1491 = qJ(6) * t1303;
t1410 = t1295 * t1033 - t1297 * t1308;
t1349 = -t1339 * pkin(4) - pkin(10) * t1500 + t1410;
t883 = (0.2e1 * qJD(4) + t1151) * t1218 + t1349;
t1490 = t1299 * t883;
t1482 = qJD(4) * t1218;
t916 = t1410 + 0.2e1 * t1482;
t838 = t1295 * t917 - t1297 * t916;
t1489 = t1300 * t838;
t1488 = t1303 * t883;
t1487 = t1304 * t838;
t1468 = t1063 * t1295;
t1467 = t1063 * t1297;
t1138 = -t1339 - t1453;
t1464 = t1138 * t1295;
t1463 = t1138 * t1297;
t1461 = t1163 * t1300;
t1460 = t1163 * t1304;
t1194 = -t1339 + t1451;
t1458 = t1194 * t1300;
t1457 = t1194 * t1304;
t1456 = t1213 * t1192;
t1292 = t1296 ^ 2;
t1440 = t1292 * t1305;
t1279 = t1504 * t1301 * t1440;
t1257 = -t1279 + t1403;
t1450 = t1257 * t1301;
t1449 = t1257 * t1305;
t1258 = t1279 + t1403;
t1448 = t1258 * t1301;
t1447 = t1258 * t1305;
t1446 = t1280 * t1295;
t1445 = t1280 * t1297;
t1444 = t1280 * t1300;
t1443 = t1280 * t1304;
t1442 = t1287 * t1296;
t1441 = t1292 * t1504;
t1237 = t1296 * t1319 + t1492;
t1436 = t1301 * t1237;
t1435 = t1305 * t1237;
t1434 = t1305 * t1256;
t1430 = t1515 - t1502;
t1293 = t1301 ^ 2;
t1294 = t1305 ^ 2;
t1429 = t1293 + t1294;
t1426 = -pkin(4) * t1297 - pkin(3);
t1425 = qJD(1) * t1442;
t1422 = t1293 * t1441;
t1421 = t1294 * t1441;
t1416 = t1301 * t1453;
t1415 = t1305 * t1453;
t1414 = t1301 * t1451;
t1413 = t1305 * t1451;
t1412 = qJ(6) * t1299 + pkin(4);
t839 = t1295 * t916 + t1297 * t917;
t1411 = -t1287 + t1485;
t982 = t1083 * t1300 + t1304 * t1084;
t1239 = -t1282 * t1302 - t1306 * t1283;
t1402 = t1192 * t1119 + qJDD(6) + t836;
t1269 = t1287 * t1423;
t1277 = qJDD(1) * t1306 - t1302 * t1504;
t1399 = -pkin(7) * t1277 - g(3) * t1302;
t1247 = -t1422 - t1499;
t1219 = -t1247 * t1301 - t1449;
t1394 = pkin(8) * t1219 - t1436;
t1265 = -t1421 - t1499;
t1224 = t1265 * t1305 - t1448;
t1393 = pkin(8) * t1224 + t1435;
t766 = t1299 * t837 - t1303 * t836;
t767 = t1299 * t836 + t1303 * t837;
t798 = -pkin(5) * t1502 + t1392;
t1340 = -t1141 * pkin(5) + t1402;
t799 = qJ(6) * t1502 - t1340;
t751 = -t1299 * t799 + t1303 * t798;
t816 = (pkin(5) * t1213 - (2 * qJD(6))) * t1192 + t883 + t1511;
t725 = t1295 * t751 - t1297 * t816;
t726 = t1295 * t816 + t1297 * t751;
t684 = -t1300 * t725 + t1304 * t726;
t750 = t1299 * t798 + t1303 * t799;
t1391 = t1301 * t684 - t1305 * t750;
t746 = t1295 * t767 - t1297 * t883;
t747 = t1295 * t883 + t1297 * t767;
t695 = -t1300 * t746 + t1304 * t747;
t1390 = t1301 * t695 - t1305 * t766;
t899 = t1297 * t1513 - t1603;
t901 = -t1295 * t1513 - t1602;
t830 = -t1300 * t899 + t1304 * t901;
t1385 = t1301 * t830 - t1599;
t900 = -t1021 * t1297 + t1559;
t902 = t1021 * t1295 + t1556;
t831 = -t1300 * t900 + t1304 * t902;
t1384 = t1301 * t831 - t1552;
t1029 = t1190 * t1431 + t1315;
t903 = t1029 * t1297 + t1603;
t905 = -t1029 * t1295 + t1602;
t834 = -t1300 * t903 + t1304 * t905;
t1383 = t1301 * t834 + t1599;
t1023 = -t1072 + t1456;
t904 = -t1023 * t1297 + t1559;
t906 = t1023 * t1295 + t1556;
t835 = -t1300 * t904 + t1304 * t906;
t1382 = t1301 * t835 - t1552;
t769 = t1304 * t839 - t1489;
t1373 = -t1063 * t1305 + t1301 * t769;
t1148 = -t1500 - t1214;
t1061 = t1148 * t1295 + t1524;
t1062 = t1148 * t1297 - t1525;
t955 = -t1061 * t1300 + t1062 * t1304;
t1372 = -t1101 * t1305 + t1301 * t955;
t1181 = -t1215 - t1500;
t1081 = t1181 * t1297 + t1464;
t1082 = -t1181 * t1295 + t1463;
t980 = -t1081 * t1300 + t1082 * t1304;
t1371 = -t1103 * t1305 + t1301 * t980;
t1105 = t1199 - t1146;
t1198 = -t1215 + t1500;
t1087 = t1198 * t1297 + t1525;
t1089 = -t1198 * t1295 + t1524;
t985 = -t1087 * t1300 + t1089 * t1304;
t1370 = t1105 * t1305 + t1301 * t985;
t1106 = t1407 + t1452;
t1197 = t1214 - t1500;
t1088 = t1197 * t1295 - t1463;
t1090 = t1197 * t1297 + t1464;
t986 = -t1088 * t1300 + t1090 * t1304;
t1369 = t1106 * t1305 + t1301 * t986;
t1112 = -t1214 - t1215;
t1004 = t1105 * t1297 - t1106 * t1295;
t1006 = -t1105 * t1295 - t1106 * t1297;
t915 = -t1004 * t1300 + t1006 * t1304;
t1368 = -t1112 * t1305 + t1301 * t915;
t1153 = -t1215 + t1214;
t1003 = -t1101 * t1295 + t1103 * t1297;
t1005 = -t1101 * t1297 - t1103 * t1295;
t914 = -t1003 * t1300 + t1005 * t1304;
t1367 = t1153 * t1305 + t1301 * t914;
t1366 = -t1163 * t1305 + t1301 * t982;
t981 = -t1083 * t1304 + t1084 * t1300;
t1171 = (-qJD(3) + t1280) * t1252 - t1405;
t1099 = t1171 * t1304 - t1173 * t1300;
t1220 = -t1250 + t1501;
t1365 = t1099 * t1301 + t1220 * t1305;
t1100 = -t1175 * t1300 - t1176 * t1304;
t1193 = t1250 + t1501;
t1364 = t1100 * t1301 + t1193 * t1305;
t1207 = -t1500 - t1501;
t1130 = t1207 * t1304 - t1523;
t1363 = t1130 * t1301 + t1171 * t1305;
t1221 = -t1250 - t1500;
t1150 = -t1221 * t1300 + t1457;
t1362 = t1150 * t1301 - t1173 * t1305;
t1229 = -t1250 + t1500;
t1156 = -t1229 * t1300 + t1520;
t1361 = t1156 * t1301 + t1175 * t1305;
t1228 = -t1500 + t1501;
t1157 = t1228 * t1304 + t1458;
t1360 = t1157 * t1301 + t1176 * t1305;
t1208 = g(3) * t1438 + t1406;
t1209 = t1314 + t1434;
t1359 = -t1305 * t1208 + t1301 * t1209;
t1147 = t1208 * t1301 + t1209 * t1305;
t1230 = t1269 + t1260;
t1358 = t1230 * t1305 - t1301 * t1535;
t1232 = -t1269 + t1260;
t1233 = t1268 - t1350;
t1357 = -t1232 * t1305 + t1233 * t1301;
t1356 = t1247 * t1305 - t1450;
t1264 = t1421 - t1499;
t1355 = t1264 * t1301 + t1449;
t1263 = -t1422 + t1499;
t1354 = t1263 * t1305 + t1448;
t1353 = t1265 * t1301 + t1447;
t1238 = t1282 * t1306 - t1302 * t1283;
t1352 = t1296 * t1403;
t1093 = -t1216 * t1446 - t1297 * t1407;
t1094 = -t1216 * t1445 + t1295 * t1407;
t997 = -t1093 * t1300 + t1094 * t1304;
t1348 = t1301 * t997 + t1415;
t1095 = t1146 * t1295 - t1218 * t1445;
t1096 = t1146 * t1297 + t1218 * t1446;
t998 = -t1095 * t1300 + t1096 * t1304;
t1347 = t1301 * t998 - t1415;
t1346 = t1292 * t1486 + t1298 * t1442;
t1166 = t1251 * t1443 + t1300 * t1341;
t1343 = t1166 * t1301 - t1413;
t1168 = t1203 * t1304 + t1252 * t1444;
t1342 = t1168 * t1301 + t1413;
t698 = -pkin(4) * t750 - pkin(5) * t799 - qJ(6) * t798;
t699 = -pkin(10) * t750 + (pkin(5) * t1299 - t1491) * t816;
t664 = -pkin(3) * t750 + qJ(4) * t726 + t1295 * t699 + t1297 * t698;
t668 = -qJ(4) * t725 - t1295 * t698 + t1297 * t699;
t683 = t1300 * t726 + t1304 * t725;
t643 = -pkin(9) * t683 - t1300 * t664 + t1304 * t668;
t663 = -pkin(2) * t683 - pkin(3) * t725 - pkin(10) * t751 + (t1412 + t1495) * t816;
t676 = t1301 * t750 + t1305 * t684;
t1338 = pkin(8) * t676 + t1301 * t643 + t1305 * t663;
t680 = qJ(4) * t747 + (-pkin(10) * t1295 + t1426) * t766;
t690 = -qJ(4) * t746 + (-pkin(10) * t1297 + t1496) * t766;
t694 = t1300 * t747 + t1304 * t746;
t652 = -pkin(9) * t694 - t1300 * t680 + t1304 * t690;
t673 = -pkin(2) * t694 - pkin(3) * t746 + pkin(4) * t883 - pkin(10) * t767;
t685 = t1301 * t766 + t1305 * t695;
t1337 = pkin(8) * t685 + t1301 * t652 + t1305 * t673;
t786 = pkin(5) * t1430 + t1392;
t788 = qJ(6) * t1430 + t1340;
t731 = -t1299 * t786 + t1303 * t788 - t1587;
t857 = -pkin(4) * t1549 - pkin(5) * t1514 + qJ(6) * t1022;
t696 = -pkin(3) * t1549 + t1295 * t731 + t1297 * t857 + t1605;
t700 = -t1295 * t857 + t1297 * t731 - t1604;
t672 = -t1300 * t696 + t1304 * t700 - t1621;
t697 = -t1299 * t788 - t1303 * t786 + t1616;
t1336 = t1301 * t672 + t1305 * t697 + t1630;
t770 = -t1608 - qJ(6) * t1516 + (-t1092 + t1502) * pkin(5) - t1392;
t1313 = -t1218 * t1151 + t1192 * t1541 - t1349 - 0.2e1 * t1482 - t1511;
t794 = -pkin(5) * t1456 + t1313 + t1562;
t771 = -pkin(5) * t1475 + t1303 * t794 - t1607;
t701 = qJ(4) * t901 + t1295 * t771 + t1297 * t770 - t1609;
t709 = -qJ(4) * t899 - t1295 * t770 + t1297 * t771;
t828 = t1300 * t901 + t1304 * t899;
t677 = -pkin(9) * t828 - t1300 * t701 + t1304 * t709;
t727 = -pkin(2) * t828 - pkin(3) * t899 + t1606 - t1299 * t794 + (-pkin(4) - t1495) * t1513;
t789 = t1305 * t830 + t1601;
t1335 = pkin(8) * t789 + t1301 * t677 + t1305 * t727;
t772 = -t1565 + (-t1512 - t1502) * qJ(6) + (-t1517 - t1141) * pkin(5) + t1402;
t795 = (-t1023 - t1456) * pkin(5) + t1313;
t773 = -t1023 * t1491 - t1299 * t795 - t1563;
t703 = qJ(4) * t906 + t1295 * t773 + t1297 * t772 - t1566;
t711 = -qJ(4) * t904 - t1295 * t772 + t1297 * t773;
t833 = t1300 * t906 + t1304 * t904;
t678 = -pkin(9) * t833 - t1300 * t703 + t1304 * t711;
t729 = -pkin(2) * t833 - pkin(3) * t904 + t1023 * t1412 - t1303 * t795 - t1564;
t793 = t1305 * t835 + t1553;
t1334 = pkin(8) * t793 + t1301 * t678 + t1305 * t729;
t752 = -t766 - t1587;
t716 = t1295 * t752 + t1426 * t1549 + t1605;
t730 = t1297 * t752 + t1496 * t1549 - t1604;
t681 = -t1300 * t716 + t1304 * t730 - t1621;
t708 = t1616 - t767;
t1333 = t1301 * t681 + t1305 * t708 + t1630;
t796 = t836 - t1565;
t854 = t1490 - t1563;
t734 = qJ(4) * t902 + t1295 * t854 + t1297 * t796 - t1566;
t742 = -qJ(4) * t900 - t1295 * t796 + t1297 * t854;
t829 = t1300 * t902 + t1304 * t900;
t688 = -pkin(9) * t829 - t1300 * t734 + t1304 * t742;
t744 = -pkin(2) * t829 - pkin(3) * t900 + pkin(4) * t1021 + t1488 - t1564;
t790 = t1305 * t831 + t1553;
t1332 = pkin(8) * t790 + t1301 * t688 + t1305 * t744;
t797 = t837 + t1608;
t855 = t1488 + t1607;
t736 = qJ(4) * t905 + t1295 * t855 + t1297 * t797 + t1609;
t743 = -qJ(4) * t903 - t1295 * t797 + t1297 * t855;
t832 = t1300 * t905 + t1304 * t903;
t689 = -pkin(9) * t832 - t1300 * t736 + t1304 * t743;
t745 = -pkin(2) * t832 - pkin(3) * t903 - pkin(4) * t1029 - t1490 - t1606;
t792 = t1305 * t834 - t1601;
t1331 = pkin(8) * t792 + t1301 * t689 + t1305 * t745;
t768 = t1300 * t839 + t1487;
t814 = -pkin(3) * t1063 + qJ(4) * t839;
t714 = -pkin(9) * t768 - qJ(4) * t1487 - t1300 * t814;
t737 = -pkin(2) * t768 - pkin(3) * t838;
t765 = t1063 * t1301 + t1305 * t769;
t1330 = pkin(8) * t765 + t1301 * t714 + t1305 * t737;
t791 = -pkin(3) * t1112 + qJ(4) * t1006 + t839;
t802 = -qJ(4) * t1004 - t838;
t913 = t1004 * t1304 + t1006 * t1300;
t735 = -pkin(9) * t913 - t1300 * t791 + t1304 * t802;
t866 = -pkin(2) * t913 - pkin(3) * t1004;
t887 = t1112 * t1301 + t1305 * t915;
t1329 = pkin(8) * t887 + t1301 * t735 + t1305 * t866;
t937 = -pkin(3) * t1101 + qJ(4) * t1062 - t1467;
t954 = t1061 * t1304 + t1062 * t1300;
t966 = -qJ(4) * t1061 + t1468;
t824 = -pkin(9) * t954 - t1300 * t937 + t1304 * t966;
t841 = -pkin(2) * t954 - pkin(3) * t1061 + t916;
t928 = t1101 * t1301 + t1305 * t955;
t1328 = pkin(8) * t928 + t1301 * t824 + t1305 * t841;
t939 = -pkin(3) * t1103 + qJ(4) * t1082 + t1468;
t973 = -qJ(4) * t1081 + t1467;
t979 = t1081 * t1304 + t1082 * t1300;
t840 = -pkin(9) * t979 - t1300 * t939 + t1304 * t973;
t856 = -pkin(2) * t979 - pkin(3) * t1081 + t917;
t943 = t1103 * t1301 + t1305 * t980;
t1327 = pkin(8) * t943 + t1301 * t840 + t1305 * t856;
t1129 = t1207 * t1300 + t1520;
t1034 = t1300 * (t1259 * t1423 + t1311 + t1434) - t1304 * (-pkin(9) * t1269 - t1237 - t1493) + (-t1300 * t1499 - t1304 * t1535 - t1129) * pkin(2);
t1066 = -pkin(9) * t1129 + t1461;
t1069 = t1130 * t1305 - t1171 * t1301;
t1326 = pkin(8) * t1069 + t1034 * t1305 + t1066 * t1301;
t1149 = t1221 * t1304 + t1458;
t1037 = -pkin(2) * t1149 + t1084;
t1073 = -pkin(9) * t1149 + t1460;
t1076 = t1150 * t1305 + t1173 * t1301;
t1325 = pkin(8) * t1076 + t1037 * t1305 + t1073 * t1301;
t1182 = t1232 * t1301 + t1233 * t1305;
t1324 = pkin(8) * t1182 + t1147;
t1054 = t1100 * t1305 - t1193 * t1301;
t1098 = t1175 * t1304 - t1176 * t1300;
t944 = -pkin(9) * t1098 - t981;
t1323 = pkin(8) * t1054 - t1098 * t1497 + t1301 * t944;
t1322 = t1301 * t1339;
t1321 = t1305 * t1339;
t952 = t1163 * t1301 + t1305 * t982;
t1320 = pkin(8) * t952 + t1401 * t981;
t1276 = t1302 * qJDD(1) + t1306 * t1504;
t1267 = t1429 * t1441;
t1266 = (t1293 - t1294) * t1441;
t1262 = -pkin(7) * t1276 + g(3) * t1306;
t1241 = t1298 * t1321;
t1240 = t1296 * t1321;
t1236 = t1429 * t1425;
t1231 = (t1427 + (qJD(2) + t1287) * t1483) * t1296;
t1226 = t1260 * t1305 - t1293 * t1425;
t1225 = -t1294 * t1425 + t1301 * t1350;
t1223 = t1264 * t1305 - t1450;
t1222 = -t1263 * t1301 + t1447;
t1205 = (t1260 * t1298 + t1346 * t1483) * t1301;
t1204 = (-t1298 * t1350 - t1346 * t1484) * t1305;
t1186 = (-t1251 * t1304 - t1252 * t1300) * t1280;
t1185 = (-t1251 * t1300 + t1252 * t1304) * t1280;
t1183 = -t1230 * t1301 - t1305 * t1535;
t1180 = -t1296 * t1535 + t1298 * t1353;
t1179 = -t1296 * t1233 + t1298 * t1355;
t1178 = -t1296 * t1232 + t1298 * t1354;
t1177 = t1296 * t1353 + t1298 * t1535;
t1170 = -t1296 * t1231 + t1298 * t1356;
t1169 = t1298 * t1231 + t1296 * t1356;
t1167 = t1203 * t1300 - t1252 * t1443;
t1165 = t1251 * t1444 - t1304 * t1341;
t1164 = t1305 * t1186 + t1322;
t1162 = -t1296 * t1266 + t1298 * t1358;
t1161 = t1296 * t1267 + t1298 * t1357;
t1160 = -t1298 * t1267 + t1296 * t1357;
t1155 = t1228 * t1300 - t1457;
t1154 = t1229 * t1304 + t1523;
t1127 = (t1216 * t1297 - t1218 * t1295) * t1280;
t1126 = (t1216 * t1295 + t1218 * t1297) * t1280;
t1125 = -t1302 * t1180 + t1224 * t1306;
t1124 = t1180 * t1306 + t1302 * t1224;
t1118 = t1168 * t1305 - t1414;
t1117 = t1166 * t1305 + t1414;
t1116 = -t1302 * t1170 + t1219 * t1306;
t1115 = t1170 * t1306 + t1302 * t1219;
t1114 = t1296 * t1237 + t1298 * t1359;
t1113 = -t1298 * t1237 + t1296 * t1359;
t1109 = -t1185 * t1296 + t1186 * t1437 - t1241;
t1108 = -t1302 * t1161 + t1182 * t1306;
t1107 = t1161 * t1306 + t1302 * t1182;
t1097 = t1171 * t1300 + t1173 * t1304;
t1086 = t1157 * t1305 - t1176 * t1301;
t1085 = t1156 * t1305 - t1175 * t1301;
t1077 = -t1436 + (-t1177 * t1296 - t1180 * t1298) * pkin(8);
t1068 = -t1435 + (-t1169 * t1296 - t1170 * t1298) * pkin(8);
t1067 = -pkin(1) * t1177 + t1296 * t1208 + t1298 * t1393;
t1065 = t1099 * t1305 - t1220 * t1301;
t1064 = -pkin(1) * t1169 + t1296 * t1209 + t1298 * t1394;
t1056 = -t1296 * t1167 + t1298 * t1342;
t1055 = -t1296 * t1165 + t1298 * t1343;
t1048 = -t1126 * t1300 + t1127 * t1304;
t1047 = t1126 * t1304 + t1127 * t1300;
t1046 = pkin(8) * t1147 * t1298 - pkin(1) * t1113;
t1045 = -t1302 * t1114 + t1147 * t1306;
t1044 = t1114 * t1306 + t1302 * t1147;
t1043 = t1305 * t1048 + t1322;
t1042 = -pkin(1) * t1160 + t1298 * t1324;
t1041 = -pkin(2) * t1173 + pkin(9) * t1150 + t1461;
t1040 = -t1296 * t1155 + t1298 * t1360;
t1039 = -t1296 * t1154 + t1298 * t1361;
t1038 = (-t1113 * t1296 - t1114 * t1298) * pkin(8);
t1036 = pkin(2) * t1171 + pkin(9) * t1130 - t1460;
t1035 = (-t1160 * t1296 - t1161 * t1298) * pkin(8) - t1359;
t1032 = -t1296 * t1149 + t1298 * t1362;
t1031 = t1298 * t1149 + t1296 * t1362;
t1010 = -t1296 * t1129 + t1298 * t1363;
t1009 = t1298 * t1129 + t1296 * t1363;
t996 = t1095 * t1304 + t1096 * t1300;
t995 = t1093 * t1304 + t1094 * t1300;
t984 = t1088 * t1304 + t1090 * t1300;
t983 = t1087 * t1304 + t1089 * t1300;
t978 = -t1296 * t1097 + t1298 * t1365;
t972 = -t1296 * t1098 + t1298 * t1364;
t971 = t1298 * t1098 + t1296 * t1364;
t957 = t1305 * t998 + t1416;
t956 = t1305 * t997 - t1416;
t953 = -pkin(2) * t1163 + pkin(9) * t982;
t951 = -t1302 * t1032 + t1076 * t1306;
t950 = t1032 * t1306 + t1302 * t1076;
t949 = -t1047 * t1296 + t1048 * t1437 - t1241;
t948 = -t1106 * t1301 + t1305 * t986;
t947 = -t1105 * t1301 + t1305 * t985;
t946 = -t1302 * t1010 + t1069 * t1306;
t945 = t1010 * t1306 + t1302 * t1069;
t938 = pkin(2) * t1193 + pkin(9) * t1100 + t982;
t927 = t1054 * t1306 - t1302 * t972;
t926 = t1302 * t1054 + t1306 * t972;
t912 = t1003 * t1304 + t1005 * t1300;
t894 = -t1153 * t1301 + t1305 * t914;
t893 = -t1296 * t996 + t1298 * t1347;
t892 = -t1296 * t995 + t1298 * t1348;
t886 = -t1296 * t981 + t1298 * t1366;
t885 = t1296 * t1366 + t1298 * t981;
t880 = -t1296 * t984 + t1298 * t1369;
t879 = -t1296 * t983 + t1298 * t1370;
t868 = -t1296 * t979 + t1298 * t1371;
t867 = t1296 * t1371 + t1298 * t979;
t865 = -t1296 * t954 + t1298 * t1372;
t864 = t1296 * t1372 + t1298 * t954;
t863 = -t1301 * t1037 + t1305 * t1073 + (-t1031 * t1296 - t1032 * t1298) * pkin(8);
t862 = -t1301 * t1034 + t1305 * t1066 + (-t1009 * t1296 - t1010 * t1298) * pkin(8);
t853 = -pkin(1) * t1031 - t1296 * t1041 + t1298 * t1325;
t852 = -t1302 * t886 + t1306 * t952;
t851 = t1302 * t952 + t1306 * t886;
t850 = -pkin(1) * t1009 - t1296 * t1036 + t1298 * t1326;
t827 = -t1296 * t912 + t1298 * t1367;
t826 = -t1302 * t868 + t1306 * t943;
t825 = t1302 * t943 + t1306 * t868;
t819 = -t1296 * t913 + t1298 * t1368;
t818 = t1296 * t1368 + t1298 * t913;
t817 = -pkin(2) * t1103 + pkin(9) * t980 + t1300 * t973 + t1304 * t939;
t815 = t1098 * t1498 + t1305 * t944 + (-t1296 * t971 - t1298 * t972) * pkin(8);
t807 = -pkin(2) * t1101 + pkin(9) * t955 + t1300 * t966 + t1304 * t937;
t801 = -t1302 * t865 + t1306 * t928;
t800 = t1302 * t928 + t1306 * t865;
t787 = -pkin(1) * t971 - t1296 * t938 + t1298 * t1323;
t777 = -t1302 * t819 + t1306 * t887;
t776 = t1302 * t887 + t1306 * t819;
t775 = t1400 * t981 + (-t1296 * t885 - t1298 * t886) * pkin(8);
t774 = -pkin(1) * t885 - t1296 * t953 + t1298 * t1320;
t760 = -t1296 * t833 + t1298 * t1382;
t759 = -t1296 * t832 + t1298 * t1383;
t758 = t1296 * t1382 + t1298 * t833;
t757 = t1296 * t1383 + t1298 * t832;
t756 = -t1296 * t829 + t1298 * t1384;
t755 = -t1296 * t828 + t1298 * t1385;
t754 = t1296 * t1384 + t1298 * t829;
t753 = t1296 * t1385 + t1298 * t828;
t733 = -pkin(2) * t1112 + pkin(9) * t915 + t1300 * t802 + t1304 * t791;
t732 = -t1301 * t856 + t1305 * t840 + (-t1296 * t867 - t1298 * t868) * pkin(8);
t728 = -t1301 * t841 + t1305 * t824 + (-t1296 * t864 - t1298 * t865) * pkin(8);
t724 = -t1302 * t760 + t1306 * t793;
t723 = -t1302 * t759 + t1306 * t792;
t722 = t1302 * t793 + t1306 * t760;
t721 = t1302 * t792 + t1306 * t759;
t720 = -t1302 * t756 + t1306 * t790;
t719 = -t1302 * t755 + t1306 * t789;
t718 = t1302 * t790 + t1306 * t756;
t717 = t1302 * t789 + t1306 * t755;
t715 = -pkin(1) * t867 - t1296 * t817 + t1298 * t1327;
t713 = -t1296 * t768 + t1298 * t1373;
t712 = t1296 * t1373 + t1298 * t768;
t710 = -pkin(2) * t1063 + pkin(9) * t769 - qJ(4) * t1489 + t1304 * t814;
t702 = -pkin(1) * t864 - t1296 * t807 + t1298 * t1328;
t693 = -t1301 * t866 + t1305 * t735 + (-t1296 * t818 - t1298 * t819) * pkin(8);
t692 = -t1302 * t713 + t1306 * t765;
t691 = t1302 * t765 + t1306 * t713;
t687 = pkin(9) * t834 + t1300 * t743 + t1304 * t736 + t1610;
t686 = pkin(9) * t831 + t1300 * t742 + t1304 * t734 - t1567;
t682 = -pkin(1) * t818 - t1296 * t733 + t1298 * t1329;
t679 = t1300 * t730 + t1304 * t716 + t1615;
t675 = pkin(9) * t835 + t1300 * t711 + t1304 * t703 - t1567;
t674 = pkin(9) * t830 + t1300 * t709 + t1304 * t701 - t1610;
t671 = t1300 * t700 + t1304 * t696 + t1615;
t670 = -t1296 * t694 + t1298 * t1390;
t669 = t1296 * t1390 + t1298 * t694;
t667 = -t1301 * t745 + t1305 * t689 + (-t1296 * t757 - t1298 * t759) * pkin(8);
t666 = -t1301 * t744 + t1305 * t688 + (-t1296 * t754 - t1298 * t756) * pkin(8);
t665 = -t1301 * t737 + t1305 * t714 + (-t1296 * t712 - t1298 * t713) * pkin(8);
t662 = -t1296 * t683 + t1298 * t1391;
t661 = t1296 * t1391 + t1298 * t683;
t660 = -pkin(1) * t712 - t1296 * t710 + t1298 * t1330;
t659 = -t1301 * t729 + t1305 * t678 + (-t1296 * t758 - t1298 * t760) * pkin(8);
t658 = -t1301 * t727 + t1305 * t677 + (-t1296 * t753 - t1298 * t755) * pkin(8);
t657 = -t1301 * t708 + t1305 * t681 + t1631;
t656 = -t1302 * t670 + t1306 * t685;
t655 = t1302 * t685 + t1306 * t670;
t654 = -pkin(1) * t757 - t1296 * t687 + t1298 * t1331;
t653 = -pkin(1) * t754 - t1296 * t686 + t1298 * t1332;
t651 = -t1301 * t697 + t1305 * t672 + t1631;
t650 = -pkin(2) * t766 + pkin(9) * t695 + t1300 * t690 + t1304 * t680;
t649 = -t1296 * t679 + t1298 * t1333 - t1636;
t648 = -pkin(1) * t758 - t1296 * t675 + t1298 * t1334;
t647 = -t1302 * t662 + t1306 * t676;
t646 = t1302 * t676 + t1306 * t662;
t645 = -pkin(1) * t753 - t1296 * t674 + t1298 * t1335;
t644 = -t1296 * t671 + t1298 * t1336 - t1636;
t642 = -pkin(2) * t750 + pkin(9) * t684 + t1300 * t668 + t1304 * t664;
t641 = -t1301 * t673 + t1305 * t652 + (-t1296 * t669 - t1298 * t670) * pkin(8);
t640 = -pkin(1) * t669 - t1296 * t650 + t1298 * t1337;
t639 = -t1301 * t663 + t1305 * t643 + (-t1296 * t661 - t1298 * t662) * pkin(8);
t638 = -pkin(1) * t661 - t1296 * t642 + t1298 * t1338;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1276, -t1277, 0, t1239, 0, 0, 0, 0, 0, 0, t1125, t1116, t1108, t1045, 0, 0, 0, 0, 0, 0, t946, t951, t927, t852, 0, 0, 0, 0, 0, 0, t801, t826, t777, t692, 0, 0, 0, 0, 0, 0, t720, t723, t1634, t656, 0, 0, 0, 0, 0, 0, t724, t1634, t719, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1277, -t1276, 0, t1238, 0, 0, 0, 0, 0, 0, t1124, t1115, t1107, t1044, 0, 0, 0, 0, 0, 0, t945, t950, t926, t851, 0, 0, 0, 0, 0, 0, t800, t825, t776, t691, 0, 0, 0, 0, 0, 0, t718, t721, t1632, t655, 0, 0, 0, 0, 0, 0, t722, t1632, t717, t646; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1177, t1169, t1160, t1113, 0, 0, 0, 0, 0, 0, t1009, t1031, t971, t885, 0, 0, 0, 0, 0, 0, t864, t867, t818, t712, 0, 0, 0, 0, 0, 0, t754, t757, t1625, t669, 0, 0, 0, 0, 0, 0, t758, t1625, t753, t661; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1277, 0, -t1276, 0, t1399, -t1262, -t1238, -pkin(7) * t1238, -t1302 * t1205 + t1226 * t1306, -t1302 * t1162 + t1183 * t1306, -t1302 * t1178 + t1222 * t1306, -t1302 * t1204 + t1225 * t1306, -t1302 * t1179 + t1223 * t1306, t1306 * t1236 + t1302 * t1352, -pkin(7) * t1124 - t1302 * t1067 + t1077 * t1306, -pkin(7) * t1115 - t1302 * t1064 + t1068 * t1306, -pkin(7) * t1107 + t1035 * t1306 - t1302 * t1042, -pkin(7) * t1044 + t1038 * t1306 - t1302 * t1046, -t1302 * t1056 + t1118 * t1306, t1065 * t1306 - t1302 * t978, -t1302 * t1039 + t1085 * t1306, -t1302 * t1055 + t1117 * t1306, -t1302 * t1040 + t1086 * t1306, -t1302 * t1109 + t1164 * t1306, -pkin(7) * t945 - t1302 * t850 + t1306 * t862, -pkin(7) * t950 - t1302 * t853 + t1306 * t863, -pkin(7) * t926 - t1302 * t787 + t1306 * t815, -pkin(7) * t851 - t1302 * t774 + t1306 * t775, -t1302 * t893 + t1306 * t957, -t1302 * t827 + t1306 * t894, -t1302 * t879 + t1306 * t947, -t1302 * t892 + t1306 * t956, -t1302 * t880 + t1306 * t948, t1043 * t1306 - t1302 * t949, -pkin(7) * t800 - t1302 * t702 + t1306 * t728, -pkin(7) * t825 - t1302 * t715 + t1306 * t732, -pkin(7) * t776 - t1302 * t682 + t1306 * t693, -pkin(7) * t691 - t1302 * t660 + t1306 * t665, t1542, t1652, t1635, t1595, t1653, t1596, -pkin(7) * t718 - t1302 * t653 + t1306 * t666, -pkin(7) * t721 - t1302 * t654 + t1306 * t667, -t1302 * t649 + t1306 * t657 - t1643, -pkin(7) * t655 - t1302 * t640 + t1306 * t641, t1542, t1635, -t1652, t1596, -t1653, t1595, -pkin(7) * t722 - t1302 * t648 + t1306 * t659, -t1302 * t644 + t1306 * t651 - t1643, -pkin(7) * t717 - t1302 * t645 + t1306 * t658, -pkin(7) * t646 - t1302 * t638 + t1306 * t639; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1276, 0, t1277, 0, t1262, t1399, t1239, pkin(7) * t1239, t1205 * t1306 + t1302 * t1226, t1162 * t1306 + t1302 * t1183, t1178 * t1306 + t1302 * t1222, t1204 * t1306 + t1302 * t1225, t1179 * t1306 + t1302 * t1223, t1302 * t1236 - t1306 * t1352, pkin(7) * t1125 + t1067 * t1306 + t1302 * t1077, pkin(7) * t1116 + t1064 * t1306 + t1302 * t1068, pkin(7) * t1108 + t1302 * t1035 + t1042 * t1306, pkin(7) * t1045 + t1302 * t1038 + t1046 * t1306, t1056 * t1306 + t1302 * t1118, t1302 * t1065 + t1306 * t978, t1039 * t1306 + t1302 * t1085, t1055 * t1306 + t1302 * t1117, t1040 * t1306 + t1302 * t1086, t1109 * t1306 + t1302 * t1164, pkin(7) * t946 + t1302 * t862 + t1306 * t850, pkin(7) * t951 + t1302 * t863 + t1306 * t853, pkin(7) * t927 + t1302 * t815 + t1306 * t787, pkin(7) * t852 + t1302 * t775 + t1306 * t774, t1302 * t957 + t1306 * t893, t1302 * t894 + t1306 * t827, t1302 * t947 + t1306 * t879, t1302 * t956 + t1306 * t892, t1302 * t948 + t1306 * t880, t1302 * t1043 + t1306 * t949, pkin(7) * t801 + t1302 * t728 + t1306 * t702, pkin(7) * t826 + t1302 * t732 + t1306 * t715, pkin(7) * t777 + t1302 * t693 + t1306 * t682, pkin(7) * t692 + t1302 * t665 + t1306 * t660, t1543, -t1650, t1633, t1593, -t1651, t1594, pkin(7) * t720 + t1302 * t666 + t1306 * t653, pkin(7) * t723 + t1302 * t667 + t1306 * t654, t1302 * t657 + t1306 * t649 + t1642, pkin(7) * t656 + t1302 * t641 + t1306 * t640, t1543, t1633, t1650, t1594, t1651, t1593, pkin(7) * t724 + t1302 * t659 + t1306 * t648, t1302 * t651 + t1306 * t644 + t1642, pkin(7) * t719 + t1302 * t658 + t1306 * t645, pkin(7) * t647 + t1302 * t639 + t1306 * t638; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1282, t1283, 0, 0, (-qJD(1) * t1411 * t1440 + t1260 * t1296) * t1301, t1298 * t1266 + t1296 * t1358, t1298 * t1232 + t1296 * t1354, (t1292 * t1411 * t1484 - t1296 * t1350) * t1305, t1298 * t1233 + t1296 * t1355, t1298 * t1403, pkin(1) * t1180 - t1298 * t1208 + t1296 * t1393, pkin(1) * t1170 - t1298 * t1209 + t1296 * t1394, pkin(1) * t1161 + t1296 * t1324, pkin(1) * t1114 + t1147 * t1494, t1298 * t1167 + t1296 * t1342, t1298 * t1097 + t1296 * t1365, t1298 * t1154 + t1296 * t1361, t1298 * t1165 + t1296 * t1343, t1298 * t1155 + t1296 * t1360, t1185 * t1298 + t1186 * t1439 - t1240, pkin(1) * t1010 + t1298 * t1036 + t1296 * t1326, pkin(1) * t1032 + t1298 * t1041 + t1296 * t1325, pkin(1) * t972 + t1296 * t1323 + t1298 * t938, pkin(1) * t886 + t1296 * t1320 + t1298 * t953, t1296 * t1347 + t1298 * t996, t1296 * t1367 + t1298 * t912, t1296 * t1370 + t1298 * t983, t1296 * t1348 + t1298 * t995, t1296 * t1369 + t1298 * t984, t1047 * t1298 + t1048 * t1439 - t1240, pkin(1) * t865 + t1296 * t1328 + t1298 * t807, pkin(1) * t868 + t1296 * t1327 + t1298 * t817, pkin(1) * t819 + t1296 * t1329 + t1298 * t733, pkin(1) * t713 + t1296 * t1330 + t1298 * t710, t1527, -t1644, t1624, t1573, -t1645, t1572, pkin(1) * t756 + t1296 * t1332 + t1298 * t686, pkin(1) * t759 + t1296 * t1331 + t1298 * t687, t1296 * t1333 + t1298 * t679 + t1637, pkin(1) * t670 + t1296 * t1337 + t1298 * t650, t1527, t1624, t1644, t1572, t1645, t1573, pkin(1) * t760 + t1296 * t1334 + t1298 * t675, t1296 * t1336 + t1298 * t671 + t1637, pkin(1) * t755 + t1296 * t1335 + t1298 * t674, pkin(1) * t662 + t1296 * t1338 + t1298 * t642;];
tauB_reg  = t1;
