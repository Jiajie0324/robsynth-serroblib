% Calculate vector of inverse dynamics joint torques for
% S6RRRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRP7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:13
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRP7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP7_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRPRP7_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:11:44
% EndTime: 2019-03-09 17:12:12
% DurationCPUTime: 22.42s
% Computational Cost: add. (18157->796), mult. (44446->1031), div. (0->0), fcn. (35718->14), ass. (0->335)
t825 = sin(pkin(6));
t834 = cos(qJ(2));
t948 = qJD(1) * t834;
t801 = t825 * t948;
t878 = t801 - qJD(3);
t830 = sin(qJ(2));
t887 = pkin(2) * t830 - pkin(9) * t834;
t950 = qJD(1) * t825;
t739 = t887 * t950;
t833 = cos(qJ(3));
t719 = t833 * t739;
t918 = t830 * t950;
t826 = cos(pkin(6));
t949 = qJD(1) * t826;
t931 = pkin(1) * t949;
t738 = -pkin(8) * t918 + t834 * t931;
t829 = sin(qJ(3));
t827 = -qJ(4) - pkin(9);
t912 = qJD(3) * t827;
t1032 = t719 + (-qJ(4) * t833 * t834 + pkin(3) * t830) * t950 - t833 * t912 + (-t738 + qJD(4)) * t829;
t892 = t829 * t801;
t955 = t833 * t738 + t829 * t739;
t1031 = qJ(4) * t892 + qJD(4) * t833 + t829 * t912 - t955;
t1004 = cos(pkin(11));
t824 = sin(pkin(11));
t758 = t1004 * t829 + t824 * t833;
t953 = t878 * t758;
t863 = t1004 * t833 - t824 * t829;
t692 = t863 * t801;
t748 = t863 * qJD(3);
t1030 = t748 - t692;
t960 = t1031 * t1004 - t1032 * t824;
t937 = qJD(1) * qJD(2);
t914 = t834 * t937;
t935 = qJDD(1) * t830;
t1029 = t914 + t935;
t741 = pkin(8) * t801 + t830 * t931;
t945 = qJD(3) * t829;
t1028 = -t741 + (-t892 + t945) * pkin(3);
t1027 = pkin(10) * t918 - t960;
t1025 = pkin(4) * t953 + t1030 * pkin(10) - t1028;
t961 = t1004 * t1032 + t1031 * t824;
t1024 = t1029 * t825;
t803 = qJD(2) + t949;
t713 = -t833 * t803 + t829 * t918;
t715 = t803 * t829 + t833 * t918;
t905 = -t1004 * t713 - t715 * t824;
t1015 = qJD(5) - t905;
t835 = cos(qJ(1));
t972 = t834 * t835;
t831 = sin(qJ(1));
t977 = t830 * t831;
t751 = -t826 * t972 + t977;
t975 = t831 * t834;
t976 = t830 * t835;
t753 = t826 * t975 + t976;
t982 = t825 * t834;
t1018 = -g(1) * t753 - g(2) * t751 + g(3) * t982;
t936 = qJDD(1) * t826;
t802 = qJDD(2) + t936;
t1005 = t802 * pkin(2);
t930 = pkin(1) * qJD(2) * t826;
t896 = qJD(1) * t930;
t928 = pkin(1) * t936;
t893 = pkin(8) * t1024 + t830 * t896 - t834 * t928;
t658 = t893 - t1005;
t898 = qJD(3) * t878;
t1023 = -pkin(9) * t898 + t1018 + t658;
t752 = t826 * t976 + t975;
t821 = qJ(3) + pkin(11);
t817 = sin(t821);
t818 = cos(t821);
t981 = t825 * t835;
t679 = t752 * t818 - t817 * t981;
t828 = sin(qJ(5));
t832 = cos(qJ(5));
t639 = t679 * t828 - t751 * t832;
t640 = t679 * t832 + t751 * t828;
t864 = t1004 * t715 - t824 * t713;
t623 = -t828 * t878 + t832 * t864;
t902 = t623 * t1015;
t1021 = t713 * t878;
t1020 = t715 * t878;
t983 = t825 * t833;
t750 = t826 * t829 + t830 * t983;
t1010 = pkin(1) * t830;
t952 = pkin(8) * t982 + t826 * t1010;
t726 = pkin(9) * t826 + t952;
t872 = -pkin(2) * t834 - pkin(9) * t830 - pkin(1);
t727 = t872 * t825;
t904 = -t726 * t829 + t833 * t727;
t619 = -pkin(3) * t982 - qJ(4) * t750 + t904;
t985 = t825 * t830;
t926 = t829 * t985;
t980 = t826 * t833;
t749 = t926 - t980;
t958 = t833 * t726 + t829 * t727;
t629 = -qJ(4) * t749 + t958;
t583 = t1004 * t629 + t824 * t619;
t578 = -pkin(10) * t982 + t583;
t672 = t1004 * t749 + t750 * t824;
t673 = t1004 * t750 - t824 * t749;
t804 = pkin(8) * t985;
t725 = t804 + (-pkin(1) * t834 - pkin(2)) * t826;
t848 = pkin(3) * t749 + t725;
t603 = pkin(4) * t672 - pkin(10) * t673 + t848;
t1019 = t832 * t578 + t828 * t603;
t962 = pkin(4) * t918 + t961;
t816 = pkin(3) * t833 + pkin(2);
t675 = -pkin(4) * t863 - pkin(10) * t758 - t816;
t784 = t827 * t829;
t785 = t827 * t833;
t695 = -t1004 * t785 + t824 * t784;
t959 = t828 * t675 + t832 * t695;
t941 = qJD(5) * t832;
t942 = qJD(5) * t828;
t1017 = t1025 * t828 + t1027 * t832 - t675 * t941 + t695 * t942;
t973 = t833 * t835;
t922 = t825 * t973;
t994 = t752 * t829;
t1016 = -t922 - t994;
t696 = -pkin(2) * t803 - t738;
t915 = t830 * t937;
t891 = t825 * t915;
t934 = qJDD(1) * t834;
t800 = t825 * t934;
t933 = qJDD(3) - t800;
t853 = t891 + t933;
t1014 = -pkin(9) * t853 - t878 * t696;
t754 = -t826 * t977 + t972;
t984 = t825 * t831;
t682 = t754 * t817 - t818 * t984;
t869 = -t752 * t817 - t818 * t981;
t854 = -g(3) * (-t817 * t985 + t818 * t826) - g(2) * t869 + g(1) * t682;
t697 = pkin(9) * t803 + t741;
t701 = qJD(1) * t727;
t635 = -t829 * t697 + t833 * t701;
t615 = -t715 * qJ(4) + t635;
t607 = -pkin(3) * t878 + t615;
t636 = t697 * t833 + t701 * t829;
t616 = -qJ(4) * t713 + t636;
t611 = t824 * t616;
t566 = t1004 * t607 - t611;
t562 = pkin(4) * t878 - t566;
t901 = t832 * t878;
t621 = t828 * t864 + t901;
t539 = t621 * pkin(5) - t623 * qJ(6) + t562;
t889 = qJD(3) * t918;
t944 = qJD(3) * t833;
t637 = t803 * t944 + t1024 * t833 + (t802 - t889) * t829;
t894 = t1024 * t829 + t803 * t945 + t833 * t889;
t862 = t833 * t802 - t894;
t602 = t1004 * t862 - t637 * t824;
t600 = qJDD(5) - t602;
t814 = pkin(3) * t824 + pkin(10);
t989 = t814 * t600;
t1013 = t1015 * t539 - t989;
t946 = qJD(2) * t834;
t916 = t825 * t946;
t687 = -qJD(3) * t749 + t833 * t916;
t868 = t887 * qJD(2);
t740 = t825 * t868;
t979 = t826 * t834;
t742 = (pkin(1) * t979 - t804) * qJD(2);
t843 = -qJD(3) * t958 + t833 * t740 - t742 * t829;
t947 = qJD(2) * t830;
t917 = t825 * t947;
t579 = pkin(3) * t917 - qJ(4) * t687 - qJD(4) * t750 + t843;
t686 = qJD(3) * t750 + t829 * t916;
t860 = -t726 * t945 + t727 * t944 + t829 * t740 + t833 * t742;
t584 = -qJ(4) * t686 - qJD(4) * t749 + t860;
t546 = t1004 * t584 + t824 * t579;
t544 = pkin(10) * t917 + t546;
t628 = t1004 * t686 + t687 * t824;
t865 = t1004 * t687 - t824 * t686;
t743 = pkin(8) * t916 + t830 * t930;
t888 = t686 * pkin(3) + t743;
t565 = t628 * pkin(4) - pkin(10) * t865 + t888;
t1012 = -qJD(5) * t1019 - t544 * t828 + t565 * t832;
t1011 = t623 ^ 2;
t1009 = pkin(5) * t600;
t1003 = MDP(6) * t825;
t1002 = qJ(6) * t600;
t911 = t1004 * t616;
t567 = t824 * t607 + t911;
t563 = -pkin(10) * t878 + t567;
t649 = pkin(3) * t713 + qJD(4) + t696;
t574 = -pkin(4) * t905 - pkin(10) * t864 + t649;
t536 = t563 * t832 + t574 * t828;
t1001 = t536 * t1015;
t840 = t1004 * t637 + t824 * t862;
t558 = qJD(5) * t901 - t828 * t853 - t832 * t840 + t864 * t942;
t1000 = t558 * t828;
t999 = t621 * t623;
t998 = t621 * t905;
t997 = t1015 * t905;
t993 = t754 * t829;
t992 = t758 * t828;
t991 = t758 * t832;
t990 = t802 * MDP(8);
t988 = t818 * t828;
t987 = t818 * t832;
t820 = t825 ^ 2;
t986 = t820 * qJD(1) ^ 2;
t978 = t827 * t830;
t594 = t828 * t600;
t595 = t832 * t600;
t974 = t832 * t834;
t920 = -pkin(8) * t800 - t830 * t928 - t834 * t896;
t847 = -pkin(8) * t891 - t920;
t657 = pkin(9) * t802 + t847;
t661 = (qJD(1) * t868 + qJDD(1) * t872) * t825;
t908 = -t829 * t657 + t833 * t661;
t842 = -qJD(3) * t636 + t908;
t549 = pkin(3) * t853 - t637 * qJ(4) - t715 * qJD(4) + t842;
t861 = -t833 * t657 - t829 * t661 + t697 * t945 - t701 * t944;
t555 = qJ(4) * t862 - t713 * qJD(4) - t861;
t528 = t1004 * t555 + t824 * t549;
t837 = t828 * t840 - t832 * t853;
t559 = qJD(5) * t623 + t837;
t971 = -t828 * t559 - t621 * t941;
t970 = -qJ(6) * t953 - qJD(6) * t863 - t1017;
t969 = t953 * pkin(5) + qJD(5) * t959 + t1025 * t832 - t1027 * t828;
t571 = t1004 * t615 - t611;
t593 = pkin(3) * t715 + pkin(4) * t864 - pkin(10) * t905;
t968 = t832 * t571 + t828 * t593;
t669 = t692 * t828 - t832 * t918;
t670 = t692 * t832 + t828 * t918;
t879 = pkin(5) * t828 - qJ(6) * t832;
t880 = t832 * pkin(5) + t828 * qJ(6);
t966 = -t669 * pkin(5) + t670 * qJ(6) + t879 * t748 + (qJD(5) * t880 - qJD(6) * t832) * t758 + t962;
t964 = t1015 * t941 + t594;
t963 = t828 * t997 + t595;
t957 = -t751 * t816 - t752 * t827;
t956 = -t753 * t816 - t754 * t827;
t570 = t615 * t824 + t911;
t954 = -qJD(6) * t828 + t1015 * t879 - t570;
t822 = t830 ^ 2;
t951 = -t834 ^ 2 + t822;
t943 = qJD(5) * t814;
t940 = qJD(2) - t803;
t535 = -t563 * t828 + t574 * t832;
t938 = qJD(6) - t535;
t932 = 0.2e1 * t820;
t927 = t834 * t986;
t925 = t829 * t984;
t924 = t831 * t983;
t923 = t825 * t974;
t788 = t828 * t982;
t789 = t829 * t981;
t919 = t1004 * pkin(3);
t526 = pkin(10) * t853 + t528;
t604 = -pkin(3) * t862 + qJDD(4) + t658;
t537 = -t602 * pkin(4) - pkin(10) * t840 + t604;
t517 = t832 * t526 + t828 * t537 - t563 * t942 + t574 * t941;
t515 = qJD(6) * t1015 + t1002 + t517;
t529 = -pkin(5) * t1015 + t938;
t910 = -t529 * t905 + t515;
t895 = t828 * t526 - t832 * t537 + t563 * t941 + t574 * t942;
t516 = qJDD(6) + t895 - t1009;
t530 = qJ(6) * t1015 + t536;
t909 = t530 * t905 + t516;
t907 = -t748 * t828 + t669;
t906 = t748 * t832 - t670;
t903 = t752 * t833 - t789;
t694 = -t1004 * t784 - t785 * t824;
t900 = t834 * t878;
t899 = t803 + t949;
t897 = t802 + t936;
t886 = pkin(4) * t818 + pkin(10) * t817;
t683 = t754 * t818 + t817 * t984;
t643 = t683 * t828 - t753 * t832;
t885 = -g(1) * t639 + g(2) * t643;
t644 = t683 * t832 + t753 * t828;
t884 = g(1) * t640 - g(2) * t644;
t882 = -g(1) * t751 + g(2) * t753;
t881 = g(1) * t754 + g(2) * t752;
t527 = t1004 * t549 - t824 * t555;
t545 = t1004 * t579 - t824 * t584;
t582 = t1004 * t619 - t824 * t629;
t877 = t835 * pkin(1) + pkin(3) * t925 + pkin(8) * t984 - t753 * t827 + t754 * t816;
t874 = -t578 * t828 + t603 * t832;
t873 = t675 * t832 - t695 * t828;
t871 = pkin(4) + t880;
t577 = pkin(4) * t982 - t582;
t646 = t673 * t828 + t923;
t867 = -pkin(1) * t831 + pkin(3) * t789 + pkin(8) * t981 + t751 * t827 - t752 * t816;
t859 = t832 * t544 + t828 * t565 - t578 * t942 + t603 * t941;
t857 = t1015 * t562 - t989;
t662 = -t751 * t988 - t752 * t832;
t664 = -t753 * t988 - t754 * t832;
t702 = t788 * t818 - t832 * t985;
t856 = g(1) * t664 + g(2) * t662 + g(3) * t702;
t663 = -t751 * t987 + t752 * t828;
t665 = -t753 * t987 + t754 * t828;
t703 = (t818 * t974 + t828 * t830) * t825;
t855 = -g(1) * t665 - g(2) * t663 - g(3) * t703;
t852 = t758 * t941 - t907;
t851 = t758 * t942 - t906;
t849 = g(3) * t985 + t881;
t543 = -pkin(4) * t917 - t545;
t845 = -t1015 * t943 + t854;
t724 = t817 * t826 + t818 * t985;
t676 = t724 * t828 + t923;
t844 = g(1) * t643 + g(2) * t639 + g(3) * t676 - t895;
t525 = -pkin(4) * t853 - t527;
t519 = t559 * pkin(5) + t558 * qJ(6) - t623 * qJD(6) + t525;
t841 = -t519 + t845;
t677 = t724 * t832 - t788;
t839 = -g(1) * t644 - g(2) * t640 - g(3) * t677 + t517;
t838 = t539 * t623 + qJDD(6) - t844;
t815 = -t919 - pkin(4);
t810 = pkin(3) * t980;
t782 = pkin(3) * t924;
t761 = t816 * t982;
t755 = -t919 - t871;
t689 = t754 * t833 + t925;
t688 = t924 - t993;
t647 = t673 * t832 - t788;
t631 = t758 * t879 + t694;
t614 = pkin(5) * t863 - t873;
t610 = -qJ(6) * t863 + t959;
t589 = -qJD(5) * t788 + t673 * t941 + t828 * t865 - t832 * t917;
t588 = qJD(5) * t646 - t828 * t917 - t832 * t865;
t585 = pkin(5) * t623 + qJ(6) * t621;
t550 = t646 * pkin(5) - t647 * qJ(6) + t577;
t541 = -pkin(5) * t672 - t874;
t540 = qJ(6) * t672 + t1019;
t538 = t1015 * t621 - t558;
t534 = -pkin(5) * t864 + t571 * t828 - t593 * t832;
t531 = qJ(6) * t864 + t968;
t522 = t589 * pkin(5) + t588 * qJ(6) - t647 * qJD(6) + t543;
t521 = -pkin(5) * t628 - t1012;
t520 = qJ(6) * t628 + qJD(6) * t672 + t859;
t1 = [(-pkin(1) * t1029 * t932 - t742 * t803 - t952 * t802 - t847 * t826 + t882) * MDP(10) + (0.2e1 * (t830 * t934 - t937 * t951) * MDP(5) + (qJDD(1) * t822 + 0.2e1 * t830 * t914) * MDP(4)) * t820 + (-t687 * t878 + t750 * t933) * MDP(13) + (t686 * t878 - t749 * t933) * MDP(14) + (-g(1) * t994 - g(2) * t688 + t725 * t637 + t658 * t750 + t696 * t687 + t743 * t715 + t860 * t878 - t958 * t933) * MDP(17) + ((-t637 * t834 + (qJD(1) * t750 + t715) * t947) * MDP(13) + (-t862 * t834 + (-qJD(1) * t749 - t713) * t947) * MDP(14) + (-t861 * t834 - g(1) * t973 + (-qJD(1) * t958 - t636) * t947) * MDP(17) + (-t933 * t834 + (-t801 - t878) * t947) * MDP(15) + (t834 * t897 - t899 * t947) * MDP(7)) * t825 + (t1012 * t1015 + t525 * t646 + t535 * t628 + t543 * t621 + t577 * t559 + t562 * t589 + t874 * t600 - t672 * t895 + t884) * MDP(25) + (-t1015 * t521 - t516 * t672 + t519 * t646 + t522 * t621 - t529 * t628 + t539 * t589 - t541 * t600 + t550 * t559 + t884) * MDP(27) + (t1015 * t520 + t515 * t672 - t519 * t647 - t522 * t623 + t530 * t628 + t539 * t588 + t540 * t600 + t550 * t558 - t885) * MDP(29) + (-t1015 * t589 - t559 * t672 - t600 * t646 - t621 * t628) * MDP(23) + (-t1015 * t588 - t558 * t672 + t600 * t647 + t623 * t628) * MDP(22) + (t1015 * t628 + t600 * t672) * MDP(24) + (t515 * t540 + t530 * t520 + t519 * t550 + t539 * t522 + t516 * t541 + t529 * t521 - g(1) * (-pkin(4) * t679 - pkin(5) * t640 + pkin(10) * t869 - qJ(6) * t639 + t867) - g(2) * (pkin(4) * t683 + pkin(5) * t644 + pkin(10) * t682 + qJ(6) * t643 + t877)) * MDP(30) + (g(1) * t903 - g(2) * t689 + t635 * t917 + t658 * t749 + t696 * t686 + t743 * t713 - t725 * t862 - t842 * t982 - t843 * t878 + t853 * t904) * MDP(16) + (-g(1) * t867 - g(2) * t877 + t527 * t582 + t528 * t583 + t566 * t545 + t567 * t546 + t604 * t848 + t649 * t888) * MDP(19) + qJDD(1) * MDP(1) + (-t637 * t749 - t715 * t686 - t687 * t713 + t750 * t862) * MDP(12) + (-t1015 * t859 - t1019 * t600 - t517 * t672 + t525 * t647 - t536 * t628 + t543 * t623 - t577 * t558 - t562 * t588 + t885) * MDP(26) + (g(1) * t831 - g(2) * t835) * MDP(2) + (g(1) * t835 + g(2) * t831) * MDP(3) + (t637 * t750 + t687 * t715) * MDP(11) + (-t527 * t673 - t528 * t672 - t545 * t864 + t546 * t905 - t566 * t865 - t567 * t628 - t582 * t840 + t583 * t602 - t882) * MDP(18) + (-g(1) * t869 - g(2) * t682 - t515 * t646 + t516 * t647 - t520 * t621 + t521 * t623 - t529 * t588 - t530 * t589 - t540 * t559 - t541 * t558) * MDP(28) + (t558 * t646 - t559 * t647 + t588 * t621 - t589 * t623) * MDP(21) + (-t558 * t647 - t588 * t623) * MDP(20) + (-t743 * t803 - t804 * t802 - t893 * t826 + g(1) * t752 - g(2) * t754 + (t802 * t979 + (-t915 + t934) * t932) * pkin(1)) * MDP(9) + t826 * t990 + (t830 * t897 + t899 * t946) * t1003; (t528 * t695 - t527 * t694 - t604 * t816 - g(1) * t956 - g(2) * t957 - g(3) * (-t825 * t978 + t761) + t1028 * t649 + t960 * t567 - t961 * t566) * MDP(19) + (-t1020 * t833 + t637 * t829) * MDP(11) + ((t637 + t1021) * t833 + (t862 + t1020) * t829) * MDP(12) + (t907 * t623 - t906 * t621 + (t1000 - t559 * t832 + (t621 * t828 - t623 * t832) * qJD(5)) * t758) * MDP(21) + (-t833 * t898 + t829 * t933 + (t833 * t900 + (qJD(2) * t829 - t715) * t830) * t950) * MDP(13) + (t829 * t898 + t833 * t933 + (-t829 * t900 + (qJD(2) * t833 + t713) * t830) * t950) * MDP(14) + (pkin(1) * t927 + t738 * t803 + (pkin(8) * t937 + g(3)) * t985 + t881 + t920) * MDP(10) + t990 + (-t918 * t940 + t800) * MDP(7) + (-pkin(2) * t894 + t719 * t878 - t635 * t918 - t741 * t713 + (-t738 * t878 + t1014) * t829 + (t1005 - t1023) * t833) * MDP(16) + (-pkin(2) * t637 + t1014 * t833 + t1023 * t829 + t636 * t918 - t741 * t715 - t955 * t878) * MDP(17) + (t515 * t610 + t519 * t631 + t516 * t614 - g(1) * (pkin(5) * t665 + qJ(6) * t664 - t753 * t886 + t956) - g(2) * (pkin(5) * t663 + qJ(6) * t662 - t751 * t886 + t957) + t966 * t539 + t970 * t530 + t969 * t529 + (-pkin(5) * t703 - qJ(6) * t702 - t761 - (t834 * t886 - t978) * t825) * g(3)) * MDP(30) + (-t558 * t614 - t559 * t610 + t969 * t623 - t970 * t621 + t907 * t530 + t906 * t529 - t1018 * t817 + (-t515 * t828 + t516 * t832 + (-t529 * t828 - t530 * t832) * qJD(5)) * t758) * MDP(28) + (t1010 * t986 + t741 * t803 - t1018 - t893) * MDP(9) + t951 * MDP(5) * t986 + t878 * MDP(15) * t918 - t830 * MDP(4) * t927 + (t873 * t600 + t895 * t863 + t694 * t559 + t525 * t992 + ((-qJD(5) * t695 - t1025) * t832 + (-qJD(5) * t675 + t1027) * t828) * t1015 + t962 * t621 - t953 * t535 + t852 * t562 + t855) * MDP(25) + (t1015 * t970 - t515 * t863 - t519 * t991 - t530 * t953 + t539 * t851 + t558 * t631 + t600 * t610 - t623 * t966 - t856) * MDP(29) + (-t1015 * t969 + t516 * t863 + t519 * t992 + t529 * t953 + t539 * t852 + t559 * t631 - t600 * t614 + t621 * t966 + t855) * MDP(27) + (-t1015 * t953 - t600 * t863) * MDP(24) + (-t1015 * t851 + t558 * t863 + t595 * t758 - t623 * t953) * MDP(22) + (-t1015 * t852 + t559 * t863 - t594 * t758 + t621 * t953) * MDP(23) + (-t1030 * t566 - t527 * t758 + t528 * t863 + t953 * t567 + t695 * t602 + t694 * t840 + t961 * t864 + t960 * t905 - t849) * MDP(18) + (t1015 * t1017 + t517 * t863 + t525 * t991 + t953 * t536 - t694 * t558 - t851 * t562 - t959 * t600 + t962 * t623 + t856) * MDP(26) + (t940 * t948 + t935) * t1003 + (-t558 * t991 - t623 * t851) * MDP(20); t715 * t713 * MDP(11) + (-t713 ^ 2 + t715 ^ 2) * MDP(12) + (t637 - t1021) * MDP(13) + (t862 - t1020) * MDP(14) + t853 * MDP(15) + (-g(1) * t688 - g(2) * t1016 + g(3) * t749 - t636 * t801 - t696 * t715 + t908) * MDP(16) + (g(1) * t689 + g(2) * t903 + g(3) * t750 - t635 * t878 + t696 * t713 + t861) * MDP(17) + ((-t1004 * t840 + t824 * t602) * pkin(3) + (t566 - t571) * t905 + (t567 - t570) * t864) * MDP(18) + (-g(1) * t782 - g(3) * t810 + t566 * t570 - t567 * t571 + (g(2) * t922 + t1004 * t527 + t528 * t824 - t649 * t715 + t829 * t849) * pkin(3)) * MDP(19) + (t832 * t902 - t1000) * MDP(20) + ((-t558 + t998) * t832 - t828 * t902 + t971) * MDP(21) + (-t623 * t864 - t832 * t997 + t964) * MDP(22) + (-t1015 * t942 + t621 * t864 + t963) * MDP(23) - t1015 * t864 * MDP(24) + (-t535 * t864 + t815 * t559 - t570 * t621 + (t1015 * t571 + t857) * t828 + (-t525 + (-t593 - t943) * t1015 + t854) * t832) * MDP(25) + (-t815 * t558 + t968 * t1015 + t536 * t864 - t570 * t623 + t857 * t832 + (t525 - t845) * t828) * MDP(26) + (t1013 * t828 + t1015 * t534 + t529 * t864 + t559 * t755 + t954 * t621 + t841 * t832) * MDP(27) + (-g(1) * t683 - g(2) * t679 - g(3) * t724 + t531 * t621 - t534 * t623 + (-t559 * t814 + (t623 * t814 + t529) * qJD(5) + t910) * t832 + (-t558 * t814 + (t621 * t814 - t530) * qJD(5) + t909) * t828) * MDP(28) + (-t1013 * t832 - t1015 * t531 - t530 * t864 + t558 * t755 - t954 * t623 + t841 * t828) * MDP(29) + (t519 * t755 - t530 * t531 - t529 * t534 - g(1) * (-pkin(3) * t993 + pkin(10) * t683 + t782) - g(2) * (pkin(3) * t1016 + pkin(10) * t679) - g(3) * (-pkin(3) * t926 + pkin(10) * t724 + t810) + t954 * t539 + (t515 * t832 + t516 * t828 + (t529 * t832 - t530 * t828) * qJD(5)) * t814 + t854 * t871) * MDP(30); -t905 ^ 2 * MDP(18) + (-t567 * t905 + t1018 + t604) * MDP(19) + t963 * MDP(25) + t971 * MDP(28) + t964 * MDP(29) + t1018 * MDP(30) + (-t864 * MDP(18) + t566 * MDP(19) - t539 * MDP(30) + (-MDP(26) + MDP(29)) * t623 + (-MDP(25) - MDP(27)) * t621) * t864 + (t600 * MDP(27) + (t558 + t998) * MDP(28) + (qJD(5) * t530 - t909) * MDP(30) + (-MDP(26) * t1015 - MDP(29) * t905) * t1015) * t832 + (-t600 * MDP(26) + (qJD(5) * t529 + t910) * MDP(30) + MDP(28) * t902 + (-qJD(5) * MDP(25) - MDP(27) * t1015) * t1015) * t828; MDP(20) * t999 + (-t621 ^ 2 + t1011) * MDP(21) + t538 * MDP(22) + (-t837 + (-qJD(5) + t1015) * t623) * MDP(23) + t600 * MDP(24) + (-t562 * t623 + t1001 + t844) * MDP(25) + (t1015 * t535 + t562 * t621 - t839) * MDP(26) + (-t585 * t621 + t1001 + 0.2e1 * t1009 - t838) * MDP(27) + (pkin(5) * t558 - qJ(6) * t559 + (t530 - t536) * t623 + (t529 - t938) * t621) * MDP(28) + (0.2e1 * t1002 - t539 * t621 + t585 * t623 + (0.2e1 * qJD(6) - t535) * t1015 + t839) * MDP(29) + (t515 * qJ(6) - t516 * pkin(5) - t539 * t585 - t529 * t536 - g(1) * (-pkin(5) * t643 + qJ(6) * t644) - g(2) * (-pkin(5) * t639 + qJ(6) * t640) - g(3) * (-pkin(5) * t676 + qJ(6) * t677) + t938 * t530) * MDP(30); (-t600 + t999) * MDP(27) + t538 * MDP(28) + (-t1015 ^ 2 - t1011) * MDP(29) + (-t1015 * t530 - t1009 + t838) * MDP(30);];
tau  = t1;
