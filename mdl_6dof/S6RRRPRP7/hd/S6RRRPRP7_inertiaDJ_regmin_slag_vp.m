% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:13
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP7_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP7_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP7_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP7_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:11:08
% EndTime: 2019-03-09 17:11:19
% DurationCPUTime: 3.84s
% Computational Cost: add. (7624->370), mult. (19854->665), div. (0->0), fcn. (19456->10), ass. (0->189)
t128 = sin(qJ(5));
t131 = cos(qJ(5));
t132 = cos(qJ(3));
t212 = cos(pkin(11));
t169 = t212 * t132;
t126 = sin(pkin(11));
t129 = sin(qJ(3));
t207 = t126 * t129;
t101 = -t169 + t207;
t196 = qJD(6) * t101;
t122 = qJD(5) * t131;
t197 = qJD(5) * t128;
t232 = -qJ(4) - pkin(9);
t172 = qJD(3) * t232;
t142 = -t129 * qJD(4) + t132 * t172;
t95 = t132 * qJD(4) + t129 * t172;
t64 = t126 * t142 + t212 * t95;
t200 = qJD(3) * t129;
t121 = pkin(3) * t200;
t170 = t212 * t129;
t102 = t126 * t132 + t170;
t96 = t102 * qJD(3);
t97 = qJD(3) * t169 - t126 * t200;
t65 = pkin(4) * t96 - pkin(10) * t97 + t121;
t119 = -pkin(3) * t132 - pkin(2);
t74 = pkin(4) * t101 - pkin(10) * t102 + t119;
t109 = t232 * t132;
t78 = -t212 * t109 + t232 * t207;
t21 = -t74 * t122 - t128 * t65 - t131 * t64 + t78 * t197;
t226 = qJ(6) * t96;
t16 = t196 - t21 + t226;
t229 = t128 * t74 + t131 * t78;
t22 = -qJD(5) * t229 - t128 * t64 + t131 * t65;
t238 = t96 * pkin(5);
t20 = -t22 - t238;
t44 = qJ(6) * t101 + t229;
t48 = -t128 * t78 + t131 * t74;
t45 = -pkin(5) * t101 - t48;
t245 = t16 * t128 - t20 * t131 + (t128 * t45 + t131 * t44) * qJD(5);
t155 = t131 * pkin(5) + t128 * qJ(6);
t244 = t155 * qJD(5) - t131 * qJD(6);
t213 = cos(pkin(6));
t171 = t213 * t132;
t127 = sin(pkin(6));
t130 = sin(qJ(2));
t206 = t127 * t130;
t143 = t129 * t206 - t171;
t186 = t132 * t206;
t98 = t213 * t129 + t186;
t67 = t126 * t98 + t212 * t143;
t211 = qJD(6) * t67;
t139 = t143 * qJD(3);
t133 = cos(qJ(2));
t201 = qJD(2) * t133;
t178 = t127 * t201;
t163 = t132 * t178;
t135 = -t139 + t163;
t167 = qJD(3) * t213;
t185 = qJD(3) * t186 + (t167 + t178) * t129;
t53 = t126 * t135 + t212 * t185;
t227 = qJ(6) * t53;
t91 = (pkin(2) * t130 - pkin(9) * t133) * t127 * qJD(2);
t168 = qJD(2) * t213;
t160 = t133 * t168;
t202 = qJD(2) * t130;
t179 = t127 * t202;
t92 = -pkin(1) * t160 + pkin(8) * t179;
t173 = t129 * t92 + t132 * t91;
t199 = qJD(3) * t132;
t184 = pkin(1) * t213;
t205 = t127 * t133;
t141 = pkin(8) * t205 + t130 * t184;
t88 = t213 * pkin(9) + t141;
t89 = (-pkin(2) * t133 - pkin(9) * t130 - pkin(1)) * t127;
t27 = pkin(3) * t179 - qJ(4) * t135 - t98 * qJD(4) - t88 * t199 - t89 * t200 + t173;
t42 = -t129 * t91 + t132 * t92 - t89 * t199 + t88 * t200;
t32 = -t185 * qJ(4) - t143 * qJD(4) - t42;
t12 = t126 * t27 + t212 * t32;
t10 = pkin(10) * t179 + t12;
t134 = -t126 * t185 + t212 * t135;
t161 = t130 * t168;
t162 = t185 * pkin(3);
t19 = pkin(1) * t161 + t53 * pkin(4) + pkin(8) * t178 - t134 * pkin(10) + t162;
t174 = -t129 * t88 + t132 * t89;
t47 = -pkin(3) * t205 - t98 * qJ(4) + t174;
t228 = t129 * t89 + t132 * t88;
t54 = -qJ(4) * t143 + t228;
t31 = t126 * t47 + t212 * t54;
t26 = -pkin(10) * t205 + t31;
t68 = -t126 * t143 + t212 * t98;
t87 = -t213 * pkin(2) + pkin(8) * t206 - t133 * t184;
t73 = pkin(3) * t143 + t87;
t39 = t67 * pkin(4) - t68 * pkin(10) + t73;
t3 = -t131 * t10 - t39 * t122 - t128 * t19 + t26 * t197;
t1 = t211 - t3 + t227;
t239 = t53 * pkin(5);
t231 = t128 * t39 + t131 * t26;
t4 = -qJD(5) * t231 - t128 * t10 + t131 * t19;
t2 = -t239 - t4;
t6 = qJ(6) * t67 + t231;
t13 = -t128 * t26 + t131 * t39;
t7 = -pkin(5) * t67 - t13;
t243 = t1 * t128 - t2 * t131 + (t128 * t7 + t131 * t6) * qJD(5);
t242 = 0.2e1 * t127;
t241 = 0.2e1 * qJD(5);
t240 = 0.2e1 * qJD(6);
t237 = pkin(9) * t127;
t57 = t128 * t68 + t131 * t205;
t35 = t57 * qJD(5) - t128 * t179 - t131 * t134;
t187 = t128 * t205;
t36 = -qJD(5) * t187 + t68 * t122 + t128 * t134 - t131 * t179;
t58 = t131 * t68 - t187;
t11 = -t126 * t32 + t212 * t27;
t9 = -pkin(4) * t179 - t11;
t5 = t36 * pkin(5) + t35 * qJ(6) - t58 * qJD(6) + t9;
t236 = t5 * t128;
t235 = t5 * t131;
t234 = t9 * t128;
t233 = t9 * t131;
t230 = -t57 * t122 - t128 * t36;
t117 = pkin(3) * t126 + pkin(10);
t225 = t117 * t96;
t224 = t128 * t57;
t223 = t128 * t96;
t222 = t128 * t97;
t221 = t131 * t36;
t220 = t131 * t58;
t219 = t131 * t96;
t218 = t131 * t97;
t217 = t35 * t128;
t63 = t126 * t95 - t212 * t142;
t216 = t63 * t128;
t215 = t63 * t131;
t93 = t141 * qJD(2);
t214 = t93 * t129;
t210 = t101 * t117;
t209 = t117 * t128;
t208 = t117 * t131;
t204 = t128 * t131;
t124 = t128 ^ 2;
t125 = t131 ^ 2;
t203 = t124 - t125;
t198 = qJD(3) * t133;
t195 = t128 * qJD(6);
t193 = -0.2e1 * pkin(2) * qJD(3);
t118 = -t212 * pkin(3) - pkin(4);
t192 = t118 * t241;
t191 = t67 * t209;
t190 = t67 * t208;
t189 = t53 * t209;
t188 = t53 * t208;
t123 = t127 ^ 2;
t183 = t123 * t201;
t182 = t129 * t198;
t181 = t117 * t197;
t180 = t117 * t122;
t177 = t128 * t122;
t166 = -0.4e1 * t102 * t204;
t77 = -t126 * t109 - t232 * t170;
t165 = t203 * qJD(5);
t164 = t130 * t183;
t159 = t1 * t131 + t2 * t128;
t156 = -t128 * t6 + t131 * t7;
t30 = -t126 * t54 + t212 * t47;
t154 = pkin(5) * t128 - qJ(6) * t131;
t153 = t118 * t97 - t225;
t149 = -t128 * t44 + t131 * t45;
t147 = -t102 * t118 + t210;
t25 = pkin(4) * t205 - t30;
t146 = -t131 * t35 - t58 * t197;
t41 = t67 * t122 + t128 * t53;
t40 = t131 * t53 - t67 * t197;
t72 = t101 * t122 + t223;
t70 = -t101 * t197 + t219;
t145 = -t102 * t122 - t222;
t71 = -t102 * t197 + t218;
t144 = t129 * t202 - t132 * t198;
t33 = t244 * t102 + t154 * t97 + t63;
t99 = -t155 + t118;
t140 = -t33 + (t102 * t99 - t210) * qJD(5);
t55 = t154 * t102 + t77;
t94 = -pkin(5) * t197 + qJ(6) * t122 + t195;
t138 = qJD(5) * t55 - t102 * t94 + t97 * t99 - t225;
t136 = t149 * qJD(5) + t20 * t128 + t16 * t131;
t100 = t102 ^ 2;
t59 = t162 + t93;
t43 = -t228 * qJD(3) + t173;
t15 = t57 * pkin(5) - t58 * qJ(6) + t25;
t8 = [0, 0, 0, 0.2e1 * t164, 0.2e1 * (-t130 ^ 2 + t133 ^ 2) * t123 * qJD(2), t160 * t242, -0.2e1 * t127 * t161, 0, -0.2e1 * t123 * pkin(1) * t202 - 0.2e1 * t93 * t213, -0.2e1 * pkin(1) * t183 + 0.2e1 * t92 * t213, 0.2e1 * t98 * t135, -0.2e1 * t135 * t143 - 0.2e1 * t98 * t185 (-t132 * t133 * t167 + t98 * t202 - (-t130 * t200 + t132 * t201) * t205) * t242, -0.2e1 * t143 * t179 + 0.2e1 * t185 * t205, -0.2e1 * t164, -0.2e1 * t93 * t171 + 0.2e1 * t87 * t185 + 0.2e1 * (-t43 * t133 + (t174 * qJD(2) + t214) * t130) * t127, 0.2e1 * t87 * t135 - 0.2e1 * t228 * t179 - 0.2e1 * t42 * t205 + 0.2e1 * t93 * t98, -0.2e1 * t11 * t68 - 0.2e1 * t12 * t67 - 0.2e1 * t134 * t30 - 0.2e1 * t31 * t53, 0.2e1 * t11 * t30 + 0.2e1 * t12 * t31 + 0.2e1 * t59 * t73, -0.2e1 * t58 * t35, 0.2e1 * t35 * t57 - 0.2e1 * t36 * t58, -0.2e1 * t35 * t67 + 0.2e1 * t53 * t58, -0.2e1 * t36 * t67 - 0.2e1 * t53 * t57, 0.2e1 * t67 * t53, 0.2e1 * t13 * t53 + 0.2e1 * t25 * t36 + 0.2e1 * t4 * t67 + 0.2e1 * t57 * t9, -0.2e1 * t231 * t53 - 0.2e1 * t25 * t35 + 0.2e1 * t3 * t67 + 0.2e1 * t58 * t9, 0.2e1 * t15 * t36 - 0.2e1 * t2 * t67 + 0.2e1 * t5 * t57 - 0.2e1 * t53 * t7, -0.2e1 * t1 * t57 + 0.2e1 * t2 * t58 - 0.2e1 * t35 * t7 - 0.2e1 * t36 * t6, 0.2e1 * t1 * t67 + 0.2e1 * t15 * t35 - 0.2e1 * t5 * t58 + 0.2e1 * t53 * t6, 0.2e1 * t1 * t6 + 0.2e1 * t15 * t5 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, t178, -t179, 0, -t93, t92, t129 * t163 + (-t129 * t143 + t98 * t132) * qJD(3), -t129 * t185 - t98 * t200 + (t135 - t139) * t132, t144 * t127 (t132 * t202 + t182) * t127, 0, -pkin(2) * t185 - t93 * t132 - t144 * t237 + t87 * t200, -pkin(9) * t132 * t179 - pkin(2) * t135 - t182 * t237 + t87 * t199 + t214, -t12 * t101 - t11 * t102 + t134 * t77 - t30 * t97 - t31 * t96 - t78 * t53 + t63 * t68 - t64 * t67, -t11 * t77 + t119 * t59 + t12 * t78 + t73 * t121 - t30 * t63 + t31 * t64, t102 * t146 + t58 * t218 (-t128 * t58 - t131 * t57) * t97 + (t217 - t221 + (-t220 + t224) * qJD(5)) * t102, -t35 * t101 + t102 * t40 + t67 * t218 + t58 * t96, -t36 * t101 - t102 * t41 - t67 * t222 - t57 * t96, t101 * t53 + t67 * t96, t25 * t222 + t4 * t101 + t13 * t96 + t22 * t67 + t77 * t36 + t48 * t53 + t63 * t57 + (t25 * t122 + t234) * t102, t25 * t218 + t3 * t101 - t231 * t96 + t21 * t67 - t77 * t35 - t229 * t53 + t63 * t58 + (-t197 * t25 + t233) * t102, t15 * t222 - t2 * t101 - t20 * t67 + t33 * t57 + t55 * t36 - t45 * t53 - t7 * t96 + (t122 * t15 + t236) * t102, -t243 * t102 + t156 * t97 - t16 * t57 + t20 * t58 - t45 * t35 - t44 * t36, -t15 * t218 + t1 * t101 + t16 * t67 - t33 * t58 + t55 * t35 + t44 * t53 + t6 * t96 + (t15 * t197 - t235) * t102, t1 * t44 + t15 * t33 + t16 * t6 + t2 * t45 + t20 * t7 + t5 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t129 * t199, 0.2e1 * (-t129 ^ 2 + t132 ^ 2) * qJD(3), 0, 0, 0, t129 * t193, t132 * t193, -0.2e1 * t101 * t64 + 0.2e1 * t102 * t63 + 0.2e1 * t77 * t97 - 0.2e1 * t78 * t96, 0.2e1 * t119 * t121 + 0.2e1 * t63 * t77 + 0.2e1 * t64 * t78, 0.2e1 * t102 * t125 * t97 - 0.2e1 * t100 * t177, t203 * t100 * t241 + t97 * t166, 0.2e1 * t101 * t71 + 0.2e1 * t102 * t219, 0.2e1 * t101 * t145 - 0.2e1 * t102 * t223, 0.2e1 * t101 * t96, 0.2e1 * t77 * t222 + 0.2e1 * t22 * t101 + 0.2e1 * t48 * t96 + 0.2e1 * (t122 * t77 + t216) * t102, 0.2e1 * t77 * t218 + 0.2e1 * t21 * t101 - 0.2e1 * t229 * t96 + 0.2e1 * (-t197 * t77 + t215) * t102, 0.2e1 * t55 * t222 - 0.2e1 * t20 * t101 - 0.2e1 * t45 * t96 + 0.2e1 * (t122 * t55 + t33 * t128) * t102, -0.2e1 * t245 * t102 + 0.2e1 * t149 * t97, -0.2e1 * t55 * t218 + 0.2e1 * t16 * t101 + 0.2e1 * t44 * t96 + 0.2e1 * (-t33 * t131 + t197 * t55) * t102, 0.2e1 * t16 * t44 + 0.2e1 * t20 * t45 + 0.2e1 * t33 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, -t185, t179, t43, t42 (-t126 * t53 - t212 * t134) * pkin(3) (t212 * t11 + t12 * t126) * pkin(3), t58 * t122 - t217, t146 + t230, t41, t40, 0, -t189 + t118 * t36 - t233 + (t128 * t25 - t190) * qJD(5), -t188 - t118 * t35 + t234 + (t131 * t25 + t191) * qJD(5), -t189 - t235 + t99 * t36 - t94 * t57 + (t128 * t15 - t190) * qJD(5) (-t217 - t221) * t117 + ((t220 + t224) * t117 + t156) * qJD(5) + t159, t188 - t236 + t99 * t35 + t94 * t58 + (-t131 * t15 - t191) * qJD(5), -t15 * t94 + t5 * t99 + (qJD(5) * t156 + t159) * t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, -t200, 0, -pkin(9) * t199, pkin(9) * t200 (-t126 * t96 - t212 * t97) * pkin(3) (t126 * t64 - t212 * t63) * pkin(3), -t102 * t165 + t97 * t204, qJD(5) * t166 - t203 * t97, t72, t70, 0, -t215 + t153 * t128 + (t128 * t77 - t131 * t147) * qJD(5), t216 + t153 * t131 + (t128 * t147 + t131 * t77) * qJD(5), t128 * t138 + t131 * t140, t136, t128 * t140 - t131 * t138, t117 * t136 + t33 * t99 - t55 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t177, -0.2e1 * t165, 0, 0, 0, t128 * t192, t131 * t192, 0.2e1 * t131 * t94 + 0.2e1 * t197 * t99, 0, -0.2e1 * t122 * t99 + 0.2e1 * t128 * t94, -0.2e1 * t99 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, 0, 0, 0, 0, t40, -t41, t40, -t146 + t230, t41, t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, 0, 0, 0, 0, 0, t70, -t72, t70 (-t124 - t125) * t97, t72, t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t36, t53, t4, t3, t4 + 0.2e1 * t239, pkin(5) * t35 - qJ(6) * t36 - qJD(6) * t57, 0.2e1 * t211 - t3 + 0.2e1 * t227, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t145, t96, t22, t21, t22 + 0.2e1 * t238, -t155 * t97 + (qJD(5) * t154 - t195) * t102, 0.2e1 * t196 - t21 + 0.2e1 * t226, -pkin(5) * t20 + qJ(6) * t16 + qJD(6) * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, -t197, 0, -t180, t181, -t180, -t244, -t181, -t244 * t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, -t122, -t197, 0, t122, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, qJ(6) * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t35, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, t71, 0, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
