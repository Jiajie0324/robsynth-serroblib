% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRP7_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:13
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPRP7_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP7_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP7_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP7_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRPRP7_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:11:29
% EndTime: 2019-03-09 17:11:51
% DurationCPUTime: 13.70s
% Computational Cost: add. (14656->621), mult. (38376->825), div. (0->0), fcn. (30190->10), ass. (0->241)
t609 = sin(pkin(6));
t616 = cos(qJ(2));
t689 = qJD(1) * t616;
t597 = t609 * t689;
t639 = t597 - qJD(3);
t612 = sin(qJ(3));
t613 = sin(qJ(2));
t615 = cos(qJ(3));
t690 = qJD(1) * t613;
t671 = t609 * t690;
t610 = cos(pkin(6));
t691 = qJD(1) * t610;
t677 = pkin(1) * t691;
t556 = -pkin(8) * t671 + t616 * t677;
t634 = t609 * (pkin(2) * t613 - pkin(9) * t616);
t557 = qJD(1) * t634;
t656 = -t556 * t612 + t615 * t557;
t727 = -qJ(4) - pkin(9);
t665 = qJD(3) * t727;
t692 = qJD(1) * t609;
t712 = t615 * t616;
t749 = (pkin(3) * t613 - qJ(4) * t712) * t692 + t656 + qJD(4) * t612 - t615 * t665;
t647 = t612 * t597;
t696 = t615 * t556 + t612 * t557;
t748 = qJ(4) * t647 + qJD(4) * t615 + t612 * t665 - t696;
t608 = sin(pkin(11));
t726 = cos(pkin(11));
t572 = t608 * t615 + t612 * t726;
t695 = t639 * t572;
t631 = -t608 * t612 + t615 * t726;
t523 = t631 * t597;
t566 = t631 * qJD(3);
t747 = t566 - t523;
t699 = -t749 * t608 + t748 * t726;
t594 = t613 * t677;
t559 = pkin(8) * t597 + t594;
t686 = qJD(3) * t612;
t746 = -t559 + (-t647 + t686) * pkin(3);
t744 = pkin(10) * t671 - t699;
t745 = pkin(4) * t695 + t747 * pkin(10) - t746;
t700 = t748 * t608 + t749 * t726;
t678 = qJD(1) * qJD(2);
t666 = t609 * t678;
t645 = t616 * t666;
t550 = pkin(8) * t645 + qJD(2) * t594;
t650 = qJD(3) * t639;
t742 = -pkin(9) * t650 + t550;
t598 = qJD(2) + t691;
t539 = -t615 * t598 + t612 * t671;
t541 = t598 * t612 + t615 * t671;
t659 = -t726 * t539 - t541 * t608;
t734 = qJD(5) - t659;
t605 = t609 ^ 2;
t741 = -0.2e1 * t605 * t678;
t739 = MDP(5) * (t613 ^ 2 - t616 ^ 2);
t611 = sin(qJ(5));
t614 = cos(qJ(5));
t632 = -t608 * t539 + t541 * t726;
t480 = -t611 * t639 + t614 * t632;
t655 = t480 * t734;
t738 = t539 * t639;
t737 = t541 * t639;
t715 = t609 * t613;
t568 = t610 * t612 + t615 * t715;
t714 = t609 * t616;
t730 = pkin(1) * t613;
t553 = pkin(8) * t714 + (pkin(9) + t730) * t610;
t554 = (-pkin(2) * t616 - pkin(9) * t613 - pkin(1)) * t609;
t657 = -t553 * t612 + t615 * t554;
t476 = -pkin(3) * t714 - qJ(4) * t568 + t657;
t567 = -t610 * t615 + t612 * t715;
t697 = t615 * t553 + t612 * t554;
t486 = -qJ(4) * t567 + t697;
t442 = t608 * t476 + t726 * t486;
t437 = -pkin(10) * t714 + t442;
t512 = t567 * t726 + t568 * t608;
t513 = -t608 * t567 + t568 * t726;
t599 = pkin(8) * t715;
t729 = pkin(1) * t616;
t552 = t599 + (-pkin(2) - t729) * t610;
t621 = pkin(3) * t567 + t552;
t457 = pkin(4) * t512 - pkin(10) * t513 + t621;
t736 = t614 * t437 + t611 * t457;
t701 = pkin(4) * t671 + t700;
t672 = -pkin(3) * t615 - pkin(2);
t516 = -pkin(4) * t631 - pkin(10) * t572 + t672;
t590 = t727 * t612;
t591 = t727 * t615;
t526 = t608 * t590 - t591 * t726;
t698 = t611 * t516 + t614 * t526;
t683 = qJD(5) * t614;
t684 = qJD(5) * t611;
t735 = -t516 * t683 + t526 * t684 + t745 * t611 + t744 * t614;
t528 = pkin(9) * t598 + t559;
t535 = qJD(1) * t554;
t492 = -t612 * t528 + t615 * t535;
t471 = -t541 * qJ(4) + t492;
t460 = -pkin(3) * t639 + t471;
t713 = t615 * t528;
t493 = t535 * t612 + t713;
t472 = -qJ(4) * t539 + t493;
t464 = t608 * t472;
t418 = t460 * t726 - t464;
t413 = pkin(4) * t639 - t418;
t654 = t614 * t639;
t478 = t611 * t632 + t654;
t394 = t478 * pkin(5) - t480 * qJ(6) + t413;
t644 = qJD(3) * t671;
t685 = qJD(3) * t615;
t694 = t598 * t685 + t615 * t645;
t622 = t612 * t644 - t694;
t674 = t598 * t686 + t612 * t645 + t615 * t644;
t473 = -t608 * t622 + t726 * t674;
t603 = pkin(3) * t608 + pkin(10);
t717 = t603 * t473;
t733 = t394 * t734 - t717;
t669 = qJD(2) * t714;
t520 = -qJD(3) * t567 + t615 * t669;
t558 = qJD(2) * t634;
t560 = (t610 * t729 - t599) * qJD(2);
t620 = -qJD(3) * t697 + t615 * t558 - t560 * t612;
t688 = qJD(2) * t613;
t670 = t609 * t688;
t438 = pkin(3) * t670 - qJ(4) * t520 - qJD(4) * t568 + t620;
t519 = qJD(3) * t568 + t612 * t669;
t628 = -t553 * t686 + t554 * t685 + t612 * t558 + t615 * t560;
t443 = -qJ(4) * t519 - qJD(4) * t567 + t628;
t401 = t608 * t438 + t726 * t443;
t399 = pkin(10) * t670 + t401;
t485 = t519 * t726 + t520 * t608;
t633 = -t608 * t519 + t520 * t726;
t561 = t610 * pkin(1) * t688 + pkin(8) * t669;
t643 = t519 * pkin(3) + t561;
t416 = t485 * pkin(4) - pkin(10) * t633 + t643;
t732 = -qJD(5) * t736 - t399 * t611 + t416 * t614;
t731 = t480 ^ 2;
t728 = pkin(5) * t473;
t725 = qJ(6) * t473;
t664 = t726 * t472;
t419 = t608 * t460 + t664;
t414 = -pkin(10) * t639 + t419;
t527 = -pkin(2) * t598 - t556;
t499 = pkin(3) * t539 + qJD(4) + t527;
t433 = -pkin(4) * t659 - pkin(10) * t632 + t499;
t393 = t414 * t614 + t433 * t611;
t724 = t393 * t734;
t619 = -t608 * t674 - t622 * t726;
t646 = t613 * t666;
t429 = qJD(5) * t654 - t611 * t646 - t614 * t619 + t632 * t684;
t723 = t429 * t611;
t722 = t478 * t659;
t721 = t480 * t478;
t720 = t734 * t659;
t719 = t572 * t611;
t718 = t572 * t614;
t617 = qJD(1) ^ 2;
t716 = t605 * t617;
t468 = t611 * t473;
t469 = t614 * t473;
t425 = t471 * t608 + t664;
t640 = pkin(5) * t611 - qJ(6) * t614;
t711 = qJD(6) * t611 - t640 * t734 + t425;
t710 = qJ(6) * t695 + qJD(6) * t631 + t735;
t709 = -t695 * pkin(5) - t698 * qJD(5) + t611 * t744 - t614 * t745;
t509 = t523 * t611 - t614 * t671;
t510 = t523 * t614 + t611 * t671;
t641 = t614 * pkin(5) + t611 * qJ(6);
t708 = t509 * pkin(5) - t510 * qJ(6) - t640 * t566 - (qJD(5) * t641 - qJD(6) * t614) * t572 - t701;
t548 = qJD(1) * t558;
t549 = qJD(1) * t560;
t658 = t615 * t548 - t612 * t549;
t421 = -t694 * qJ(4) - t541 * qJD(4) + pkin(3) * t646 + (-t713 + (qJ(4) * t671 - t535) * t612) * qJD(3) + t658;
t629 = t528 * t686 - t535 * t685 - t612 * t548 - t615 * t549;
t427 = -qJ(4) * t674 - t539 * qJD(4) - t629;
t391 = t608 * t421 + t726 * t427;
t426 = t471 * t726 - t464;
t452 = pkin(3) * t541 + pkin(4) * t632 - pkin(10) * t659;
t707 = t614 * t426 + t611 * t452;
t618 = t611 * t619 - t614 * t646;
t430 = qJD(5) * t480 + t618;
t706 = -t611 * t430 - t478 * t683;
t703 = t611 * t720 + t469;
t702 = t683 * t734 + t468;
t687 = qJD(2) * t615;
t682 = t527 * qJD(3);
t392 = -t414 * t611 + t433 * t614;
t679 = qJD(6) - t392;
t675 = t611 * t714;
t668 = t603 * t684;
t387 = pkin(10) * t646 + t391;
t489 = pkin(3) * t674 + t550;
t409 = t473 * pkin(4) - pkin(10) * t619 + t489;
t376 = t614 * t387 + t611 * t409 - t414 * t684 + t433 * t683;
t374 = qJD(6) * t734 + t376 + t725;
t382 = -pkin(5) * t734 + t679;
t663 = -t382 * t659 + t374;
t648 = t611 * t387 - t614 * t409 + t414 * t683 + t433 * t684;
t375 = t648 - t728;
t383 = qJ(6) * t734 + t393;
t662 = t383 * t659 + t375;
t661 = -t566 * t611 + t509;
t660 = t566 * t614 - t510;
t525 = -t726 * t590 - t591 * t608;
t653 = t616 * t639;
t652 = t639 * t609;
t649 = t605 * t613 * t616 * MDP(4);
t604 = -pkin(3) * t726 - pkin(4);
t642 = pkin(1) * t741;
t390 = t421 * t726 - t608 * t427;
t400 = t438 * t726 - t608 * t443;
t441 = t476 * t726 - t608 * t486;
t636 = -t437 * t611 + t457 * t614;
t635 = t516 * t614 - t526 * t611;
t436 = pkin(4) * t714 - t441;
t496 = t513 * t611 + t614 * t714;
t630 = t394 * t480 + t648;
t627 = t614 * t399 + t611 * t416 - t437 * t684 + t457 * t683;
t625 = t413 * t734 - t717;
t624 = t572 * t683 - t661;
t623 = t572 * t684 - t660;
t398 = -pkin(4) * t670 - t400;
t386 = -pkin(4) * t646 - t390;
t569 = -t641 + t604;
t497 = t513 * t614 - t675;
t488 = t572 * t640 + t525;
t467 = pkin(5) * t631 - t635;
t463 = -qJ(6) * t631 + t698;
t448 = -qJD(5) * t675 + t513 * t683 + t611 * t633 - t614 * t670;
t447 = qJD(5) * t496 - t611 * t670 - t614 * t633;
t444 = pkin(5) * t480 + qJ(6) * t478;
t404 = t496 * pkin(5) - t497 * qJ(6) + t436;
t402 = t478 * t734 - t429;
t396 = -pkin(5) * t512 - t636;
t395 = qJ(6) * t512 + t736;
t389 = -pkin(5) * t632 + t426 * t611 - t452 * t614;
t388 = qJ(6) * t632 + t707;
t381 = t448 * pkin(5) + t447 * qJ(6) - t497 * qJD(6) + t398;
t380 = t430 * pkin(5) + t429 * qJ(6) - t480 * qJD(6) + t386;
t379 = -pkin(5) * t485 - t732;
t378 = qJ(6) * t485 + qJD(6) * t512 + t627;
t1 = [(-t605 * t689 - t652) * MDP(15) * t688 + (t390 * t441 + t391 * t442 + t418 * t400 + t419 * t401 + t489 * t621 + t499 * t643) * MDP(19) + (-t549 * t610 - t560 * t598 + t616 * t642) * MDP(10) + (-t550 * t610 - t561 * t598 + t613 * t642) * MDP(9) + (t386 * t496 + t392 * t485 + t398 * t478 + t413 * t448 + t436 * t430 + t636 * t473 - t512 * t648 + t732 * t734) * MDP(25) + (t374 * t512 + t378 * t734 - t380 * t497 - t381 * t480 + t383 * t485 + t394 * t447 + t395 * t473 + t404 * t429) * MDP(29) + (t473 * t512 + t485 * t734) * MDP(24) + (-t430 * t512 - t448 * t734 - t473 * t496 - t478 * t485) * MDP(23) + (-t429 * t512 - t447 * t734 + t473 * t497 + t480 * t485) * MDP(22) + (-t375 * t512 - t379 * t734 + t380 * t496 + t381 * t478 - t382 * t485 + t394 * t448 - t396 * t473 + t404 * t430) * MDP(27) + (-t376 * t512 + t386 * t497 - t393 * t485 + t398 * t480 - t413 * t447 - t436 * t429 - t473 * t736 - t627 * t734) * MDP(26) + (t541 * t520 - t568 * t622) * MDP(11) + (t628 * t639 + t561 * t541 + t552 * t694 + t550 * t568 + t527 * t520 + (-t629 * t616 + (-t493 * qJD(2) + (-qJD(2) * t697 - t552 * t686) * qJD(1)) * t613) * t609) * MDP(17) + (t519 * t639 + (t674 * t616 + (-qJD(1) * t567 - t539) * t688) * t609) * MDP(14) + (-t620 * t639 + t561 * t539 + t552 * t674 + t550 * t567 + t527 * t519 + (-(-qJD(3) * t493 + t658) * t616 + (qJD(1) * t657 + t492) * t688) * t609) * MDP(16) + (-t520 * t639 + t622 * t714 + (qJD(1) * t568 + t541) * t670) * MDP(13) + t739 * t741 + (-t390 * t513 - t391 * t512 - t400 * t632 + t401 * t659 - t418 * t633 - t419 * t485 - t441 * t619 - t442 * t473) * MDP(18) + 0.2e1 * t649 * t678 + (t429 * t496 - t430 * t497 + t447 * t478 - t448 * t480) * MDP(21) + (-t374 * t496 + t375 * t497 - t378 * t478 + t379 * t480 - t382 * t447 - t383 * t448 - t395 * t430 - t396 * t429) * MDP(28) + (-t429 * t497 - t447 * t480) * MDP(20) + (t374 * t395 + t375 * t396 + t378 * t383 + t379 * t382 + t380 * t404 + t381 * t394) * MDP(30) + (-t541 * t519 - t520 * t539 + t567 * t622 - t568 * t674) * MDP(12) + (MDP(6) * t669 - MDP(7) * t670) * (t598 + t691); ((t694 + t738) * t615 + (-t541 * qJD(3) + (t541 * t616 - t613 * t685) * t692 - t674) * t612) * MDP(12) + (t612 * t650 + (-t612 * t653 + (t539 + t687) * t613) * t692) * MDP(14) + (-t615 * t650 + (t615 * t653 + (qJD(2) * t612 - t541) * t613) * t692) * MDP(13) + (-t612 * t622 - t615 * t737) * MDP(11) + (-t429 * t467 - t430 * t463 - t709 * t480 + t710 * t478 + t661 * t383 + t660 * t382 + (-t374 * t611 + t375 * t614 + (-t382 * t611 - t383 * t614) * qJD(5)) * t572) * MDP(28) + (t374 * t463 + t375 * t467 + t380 * t488 - t382 * t709 - t383 * t710 - t394 * t708) * MDP(30) + (-t429 * t718 - t480 * t623) * MDP(20) + (t635 * t473 + t648 * t631 + t525 * t430 + t386 * t719 + ((-qJD(5) * t526 - t745) * t614 + (-qJD(5) * t516 + t744) * t611) * t734 + t701 * t478 - t695 * t392 + t624 * t413) * MDP(25) + (t376 * t631 + t386 * t718 + t695 * t393 - t623 * t413 - t525 * t429 - t698 * t473 + t701 * t480 + t734 * t735) * MDP(26) + (-t473 * t631 - t695 * t734) * MDP(24) + (-t374 * t631 - t380 * t718 - t383 * t695 + t394 * t623 + t429 * t488 + t463 * t473 + t480 * t708 - t710 * t734) * MDP(29) + (t375 * t631 + t380 * t719 + t382 * t695 + t394 * t624 + t430 * t488 - t467 * t473 - t478 * t708 + t709 * t734) * MDP(27) + (t429 * t631 + t469 * t572 - t480 * t695 - t623 * t734) * MDP(22) + (t430 * t631 - t468 * t572 + t478 * t695 - t624 * t734) * MDP(23) + (-t390 * t572 + t391 * t631 - t418 * t747 + t695 * t419 - t526 * t473 + t525 * t619 + t700 * t632 + t699 * t659) * MDP(18) + (t661 * t480 - t660 * t478 + (t723 - t430 * t614 + (t478 * t611 - t480 * t614) * qJD(5)) * t572) * MDP(21) + MDP(15) * t652 * t690 - t617 * t649 + (pkin(8) * t646 + t556 * t598 + (-t610 * t678 + t716) * t729) * MDP(10) + (t559 * t598 + t716 * t730 - t550) * MDP(9) + t716 * t739 + (-pkin(2) * t694 + t615 * t682 - t696 * t639 - t559 * t541 + t742 * t612 + (-t527 * t712 + (pkin(2) * t686 - pkin(9) * t687 + t493) * t613) * t692) * MDP(17) + (-pkin(2) * t674 + t612 * t682 + t656 * t639 - t559 * t539 - t742 * t615 + (-t492 * t613 + (-pkin(9) * t688 - t527 * t616) * t612) * t692) * MDP(16) + (-t390 * t525 + t391 * t526 - t700 * t418 + t699 * t419 + t489 * t672 + t499 * t746) * MDP(19) + (MDP(6) * t597 - MDP(7) * t671) * (qJD(2) - t598); t541 * t539 * MDP(11) + (-t539 ^ 2 + t541 ^ 2) * MDP(12) + (-t622 - t738) * MDP(13) + (-t674 - t737) * MDP(14) + MDP(15) * t646 + (-t493 * t597 - t527 * t541 + t658) * MDP(16) + (-t492 * t639 + t527 * t539 + t629) * MDP(17) + ((-t608 * t473 - t619 * t726) * pkin(3) + (t418 - t426) * t659 + (t419 - t425) * t632) * MDP(18) + (t418 * t425 - t419 * t426 + (t390 * t726 + t391 * t608 - t499 * t541) * pkin(3)) * MDP(19) + (t614 * t655 - t723) * MDP(20) + ((-t429 + t722) * t614 - t655 * t611 + t706) * MDP(21) + (-t480 * t632 - t614 * t720 + t702) * MDP(22) + (t478 * t632 - t684 * t734 + t703) * MDP(23) - t734 * t632 * MDP(24) + (-t392 * t632 - t425 * t478 + t604 * t430 + (-t386 + (-qJD(5) * t603 - t452) * t734) * t614 + (t426 * t734 + t625) * t611) * MDP(25) + (t386 * t611 + t393 * t632 - t425 * t480 - t604 * t429 + (t668 + t707) * t734 + t625 * t614) * MDP(26) + (-t380 * t614 + t382 * t632 + t430 * t569 + (-t603 * t683 + t389) * t734 - t711 * t478 + t733 * t611) * MDP(27) + (t388 * t478 - t389 * t480 + (-t430 * t603 + (t480 * t603 + t382) * qJD(5) + t663) * t614 + (-t429 * t603 + (t478 * t603 - t383) * qJD(5) + t662) * t611) * MDP(28) + (-t380 * t611 - t383 * t632 + t429 * t569 + (-t388 - t668) * t734 + t711 * t480 - t733 * t614) * MDP(29) + (t380 * t569 - t382 * t389 - t383 * t388 - t711 * t394 + (t374 * t614 + t375 * t611 + (t382 * t614 - t383 * t611) * qJD(5)) * t603) * MDP(30); -t659 ^ 2 * MDP(18) + (-t419 * t659 + t489) * MDP(19) + t703 * MDP(25) + t706 * MDP(28) + t702 * MDP(29) + (-t632 * MDP(18) + t418 * MDP(19) - t394 * MDP(30) + (-MDP(26) + MDP(29)) * t480 + (-MDP(25) - MDP(27)) * t478) * t632 + (t473 * MDP(27) + (t429 + t722) * MDP(28) + (qJD(5) * t383 - t662) * MDP(30) + (-MDP(26) * t734 - MDP(29) * t659) * t734) * t614 + (-t473 * MDP(26) + (qJD(5) * t382 + t663) * MDP(30) + MDP(28) * t655 + (-qJD(5) * MDP(25) - MDP(27) * t734) * t734) * t611; MDP(20) * t721 + (-t478 ^ 2 + t731) * MDP(21) + t402 * MDP(22) + (-t618 + (-qJD(5) + t734) * t480) * MDP(23) + t473 * MDP(24) + (-t413 * t480 - t648 + t724) * MDP(25) + (t392 * t734 + t413 * t478 - t376) * MDP(26) + (-t444 * t478 - t630 + t724 + 0.2e1 * t728) * MDP(27) + (pkin(5) * t429 - qJ(6) * t430 + (t383 - t393) * t480 + (t382 - t679) * t478) * MDP(28) + (0.2e1 * t725 - t394 * t478 + t444 * t480 + (0.2e1 * qJD(6) - t392) * t734 + t376) * MDP(29) + (-pkin(5) * t375 + qJ(6) * t374 - t382 * t393 + t383 * t679 - t394 * t444) * MDP(30); (-t473 + t721) * MDP(27) + t402 * MDP(28) + (-t734 ^ 2 - t731) * MDP(29) + (-t383 * t734 + t630 - t728) * MDP(30);];
tauc  = t1;
