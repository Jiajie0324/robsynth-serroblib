% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 08:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP7_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 08:27:30
% EndTime: 2019-05-07 08:27:47
% DurationCPUTime: 17.76s
% Computational Cost: add. (87250->356), mult. (193578->496), div. (0->0), fcn. (157222->12), ass. (0->277)
t2986 = sin(qJ(2));
t2981 = sin(pkin(6));
t2990 = cos(qJ(2));
t3043 = t2981 * t2990;
t3040 = qJD(1) * t3043;
t3042 = qJDD(1) * t2981;
t2958 = qJD(2) * t3040 + t2986 * t3042;
t2985 = sin(qJ(3));
t2989 = cos(qJ(3));
t2983 = cos(pkin(6));
t3032 = qJDD(1) * t2983 + qJDD(2);
t2976 = qJD(1) * t2983 + qJD(2);
t3054 = qJD(1) * t2986;
t3041 = t2981 * t3054;
t3033 = t2976 * t2989 - t2985 * t3041;
t2922 = qJD(3) * t3033 + t2989 * t2958 + t2985 * t3032;
t2980 = sin(pkin(11));
t2982 = cos(pkin(11));
t2951 = t2976 * t2985 + t2989 * t3041;
t3034 = t2985 * t2958 - t2989 * t3032;
t3005 = -qJD(3) * t2951 - t3034;
t3036 = t2922 * t2980 - t2982 * t3005;
t3029 = qJDD(5) + t3036;
t2933 = t2982 * t2951 + t2980 * t3033;
t2968 = -qJD(3) + t3040;
t2984 = sin(qJ(5));
t2988 = cos(qJ(5));
t2913 = t2933 * t2984 + t2968 * t2988;
t2915 = t2933 * t2988 - t2968 * t2984;
t3049 = t2913 * t2915;
t2847 = t3029 + t3049;
t2912 = t2915 ^ 2;
t2931 = t2951 * t2980 - t2982 * t3033;
t2930 = qJD(5) + t2931;
t3062 = t2930 ^ 2;
t3066 = -t2912 - t3062;
t2818 = t2847 * t2988 + t2984 * t3066;
t2889 = t2982 * t2922 + t2980 * t3005;
t2975 = t2990 * t3042;
t3006 = qJD(2) * t3041 - t2975;
t3003 = qJDD(3) + t3006;
t2999 = -t2913 * qJD(5) + t2988 * t2889 + t2984 * t3003;
t3048 = t2913 * t2930;
t2997 = t2999 - t3048;
t2793 = t2818 * t2980 + t2982 * t2997;
t2795 = t2818 * t2982 - t2980 * t2997;
t2767 = t2793 * t2989 + t2795 * t2985;
t2773 = t2793 * t2985 - t2795 * t2989;
t2816 = t2847 * t2984 - t2988 * t3066;
t3019 = t2773 * t2986 + t2816 * t2990;
t2745 = t2981 * t2767 + t2983 * t3019;
t2756 = t2773 * t2990 - t2816 * t2986;
t2987 = sin(qJ(1));
t2991 = cos(qJ(1));
t3100 = t2745 * t2987 - t2756 * t2991;
t3099 = t2745 * t2991 + t2756 * t2987;
t2743 = -t2983 * t2767 + t2981 * t3019;
t2840 = t2999 + t3048;
t3037 = t2984 * t2889 - t2988 * t3003;
t3002 = (-qJD(5) + t2930) * t2915 - t3037;
t3064 = -t2840 * t2988 + t2984 * t3002;
t2878 = t2913 ^ 2;
t2859 = t2912 + t2878;
t3063 = t2840 * t2984 + t2988 * t3002;
t3075 = t2859 * t2982 + t2980 * t3063;
t3076 = -t2859 * t2980 + t2982 * t3063;
t3081 = -t2985 * t3075 + t2989 * t3076;
t3085 = t2986 * t3064 + t2990 * t3081;
t3082 = t2985 * t3076 + t2989 * t3075;
t3086 = t2986 * t3081 - t2990 * t3064;
t3089 = -t2981 * t3082 + t2983 * t3086;
t3094 = -t2987 * t3089 + t2991 * t3085;
t3093 = t2987 * t3085 + t2991 * t3089;
t3090 = t2981 * t3086 + t2983 * t3082;
t2848 = t3029 - t3049;
t3065 = -t3062 - t2878;
t3069 = -t2848 * t2984 + t2988 * t3065;
t3080 = t2980 * t3069;
t3079 = t2982 * t3069;
t3070 = t2848 * t2988 + t2984 * t3065;
t3078 = t2986 * t3070;
t3077 = t2990 * t3070;
t3028 = t3033 * t2951;
t2918 = t3003 + t3028;
t3031 = t3033 ^ 2;
t3027 = t3033 * t2968;
t2906 = -t3027 - t2922;
t3061 = t2931 ^ 2;
t3060 = t2933 ^ 2;
t3059 = t2951 ^ 2;
t2953 = t2968 ^ 2;
t3058 = t2976 ^ 2;
t3057 = -2 * qJD(4);
t3056 = t2983 * g(3);
t3055 = qJD(1) * t2981;
t3047 = t2931 * t2933;
t3046 = t2931 * t2968;
t3045 = t2933 * t2968;
t2992 = qJD(1) ^ 2;
t3044 = t2981 ^ 2 * t2992;
t2970 = -g(1) * t2991 - g(2) * t2987;
t2954 = -pkin(1) * t2992 + pkin(8) * t3042 + t2970;
t2957 = (-pkin(2) * t2990 - pkin(9) * t2986) * t3055;
t2969 = t2987 * g(1) - t2991 * g(2);
t3001 = t2992 * t2981 * pkin(8) + qJDD(1) * pkin(1) + t2969;
t3000 = t2983 * t3001;
t2998 = (-t2981 * g(3) + t3000) * t2986;
t2995 = t3032 * pkin(9) - t3058 * pkin(2) + (t2957 * t3055 + t2954) * t2990 + t2998;
t2996 = -t2975 * pkin(2) - t2958 * pkin(9) - t3056 + ((-pkin(9) * t2976 * t2990 + (qJD(2) + t2976) * t2986 * pkin(2)) * qJD(1) - t3001) * t2981;
t2863 = t2985 * t2996 + t2989 * t2995;
t2937 = -pkin(3) * t2968 - qJ(4) * t2951;
t2846 = -pkin(3) * t3031 + qJ(4) * t3005 + t2968 * t2937 + t2863;
t2862 = -t2985 * t2995 + t2989 * t2996;
t2993 = pkin(3) * t2918 + t2906 * qJ(4) + t2862;
t2804 = t2982 * t2846 + t2931 * t3057 + t2980 * t2993;
t2894 = pkin(4) * t2931 - pkin(10) * t2933;
t2785 = -pkin(4) * t2953 + pkin(10) * t3003 - t2931 * t2894 + t2804;
t3035 = t2986 * t2954 - t2990 * t3000;
t2900 = -t3032 * pkin(2) - t3058 * pkin(9) + (g(3) * t2990 + t2957 * t3054) * t2981 + t3035;
t2853 = -t3005 * pkin(3) - t3031 * qJ(4) + t2951 * t2937 + qJDD(4) + t2900;
t2868 = t3036 - t3045;
t3038 = -t2889 - t3046;
t2994 = pkin(4) * t2868 + pkin(10) * t3038 + t2853;
t2776 = t2988 * t2785 + t2984 * t2994;
t2775 = -t2984 * t2785 + t2988 * t2994;
t3039 = t2980 * t2846 - t2982 * t2993;
t3030 = t2976 * t3040;
t2877 = pkin(5) * t2913 - qJ(6) * t2915;
t2758 = -pkin(5) * t3062 + qJ(6) * t3029 + 0.2e1 * qJD(6) * t2930 - t2913 * t2877 + t2776;
t2759 = -pkin(5) * t3029 - qJ(6) * t3062 + t2915 * t2877 + qJDD(6) - t2775;
t2738 = t2758 * t2988 + t2759 * t2984;
t2784 = -t3003 * pkin(4) - t2953 * pkin(10) + ((2 * qJD(4)) + t2894) * t2933 + t3039;
t3004 = -qJD(5) * t2915 - t3037;
t2764 = -t3004 * pkin(5) + (pkin(5) * t2930 - 0.2e1 * qJD(6)) * t2915 + t2784 - t2997 * qJ(6);
t2729 = t2738 * t2980 - t2764 * t2982;
t2730 = t2738 * t2982 + t2764 * t2980;
t2723 = -t2729 * t2985 + t2730 * t2989;
t2737 = t2758 * t2984 - t2759 * t2988;
t3026 = t2723 * t2986 - t2737 * t2990;
t2749 = -t2775 * t2984 + t2776 * t2988;
t2735 = t2749 * t2980 - t2784 * t2982;
t2736 = t2749 * t2982 + t2784 * t2980;
t2726 = -t2735 * t2985 + t2736 * t2989;
t2748 = t2775 * t2988 + t2776 * t2984;
t3025 = t2726 * t2986 - t2748 * t2990;
t2803 = t2933 * t3057 - t3039;
t2777 = t2803 * t2982 + t2804 * t2980;
t2778 = -t2803 * t2980 + t2804 * t2982;
t2751 = -t2777 * t2985 + t2778 * t2989;
t3024 = t2751 * t2986 - t2853 * t2990;
t2836 = (qJD(5) + t2930) * t2915 + t3037;
t2794 = -t2836 * t2982 + t3080;
t2796 = t2836 * t2980 + t3079;
t2770 = -t2794 * t2985 + t2796 * t2989;
t3020 = t2770 * t2986 - t3077;
t2837 = t2930 * t2915 - t3004;
t2798 = -t2837 * t2982 + t3080;
t2800 = t2837 * t2980 + t3079;
t2774 = -t2798 * t2985 + t2800 * t2989;
t3018 = t2774 * t2986 - t3077;
t2869 = -t3036 - t3045;
t2871 = -t2889 + t3046;
t2830 = t2869 * t2980 + t2871 * t2982;
t2831 = t2869 * t2982 - t2871 * t2980;
t2802 = -t2830 * t2985 + t2831 * t2989;
t2874 = -t3060 - t3061;
t3017 = t2802 * t2986 - t2874 * t2990;
t2884 = t3003 - t3047;
t2891 = -t2953 - t3061;
t2851 = t2884 * t2982 + t2891 * t2980;
t2852 = -t2884 * t2980 + t2891 * t2982;
t2815 = -t2851 * t2985 + t2852 * t2989;
t3016 = t2815 * t2986 - t2868 * t2990;
t2883 = -t3003 - t3047;
t2909 = -t2953 - t3060;
t2860 = t2883 * t2980 + t2909 * t2982;
t2861 = t2883 * t2982 - t2909 * t2980;
t2827 = -t2860 * t2985 + t2861 * t2989;
t3015 = t2827 * t2986 + t2990 * t3038;
t2829 = -t2862 * t2985 + t2863 * t2989;
t3014 = t2829 * t2986 - t2900 * t2990;
t2904 = (-qJD(3) - t2968) * t2951 - t3034;
t2867 = t2904 * t2989 - t2906 * t2985;
t2916 = -t3031 - t3059;
t3013 = t2867 * t2986 - t2916 * t2990;
t2923 = -t2953 - t3031;
t2880 = -t2918 * t2985 + t2923 * t2989;
t2903 = (qJD(3) - t2968) * t2951 + t3034;
t3012 = t2880 * t2986 - t2903 * t2990;
t2917 = t3028 - t3003;
t2935 = -t2953 - t3059;
t2893 = t2917 * t2989 - t2935 * t2985;
t2905 = -t3027 + t2922;
t3011 = t2893 * t2986 - t2905 * t2990;
t2925 = -g(3) * t3043 - t3035;
t2926 = t2990 * t2954 + t2998;
t3010 = t2925 * t2990 + t2926 * t2986;
t2939 = t3030 - t2958;
t2961 = t2976 * t3041;
t2940 = t2961 - t3006;
t3009 = t2939 * t2990 + t2940 * t2986;
t2978 = t2986 ^ 2;
t2948 = -t2978 * t3044 - t3058;
t2967 = t2990 * t2986 * t3044;
t2956 = t2967 - t3032;
t3008 = t2948 * t2990 + t2956 * t2986;
t2955 = t2967 + t3032;
t2979 = t2990 ^ 2;
t2959 = -t2979 * t3044 - t3058;
t3007 = t2955 * t2990 + t2959 * t2986;
t2965 = -qJDD(1) * t2987 - t2991 * t2992;
t2964 = qJDD(1) * t2991 - t2987 * t2992;
t2960 = (-t2978 - t2979) * t3044;
t2943 = -t2981 * t3001 - t3056;
t2941 = t2961 + t3006;
t2938 = t3030 + t2958;
t2936 = -t2955 * t2986 + t2959 * t2990;
t2934 = -t2948 * t2986 + t2956 * t2990;
t2910 = -t2939 * t2986 + t2940 * t2990;
t2908 = -t2981 * t2941 + t2983 * t3007;
t2907 = t2983 * t2941 + t2981 * t3007;
t2902 = -t2981 * t2938 + t2983 * t3008;
t2901 = t2983 * t2938 + t2981 * t3008;
t2899 = -t2981 * t2960 + t2983 * t3009;
t2898 = t2983 * t2960 + t2981 * t3009;
t2892 = t2917 * t2985 + t2935 * t2989;
t2890 = -t2925 * t2986 + t2926 * t2990;
t2879 = t2918 * t2989 + t2923 * t2985;
t2876 = -t2981 * t2943 + t2983 * t3010;
t2875 = t2983 * t2943 + t2981 * t3010;
t2866 = t2904 * t2985 + t2906 * t2989;
t2857 = t2893 * t2990 + t2905 * t2986;
t2854 = t2880 * t2990 + t2903 * t2986;
t2850 = t2867 * t2990 + t2916 * t2986;
t2845 = -t2981 * t2892 + t2983 * t3011;
t2844 = t2983 * t2892 + t2981 * t3011;
t2835 = -t2981 * t2879 + t2983 * t3012;
t2834 = t2983 * t2879 + t2981 * t3012;
t2828 = t2862 * t2989 + t2863 * t2985;
t2826 = t2860 * t2989 + t2861 * t2985;
t2821 = -t2981 * t2866 + t2983 * t3013;
t2820 = t2983 * t2866 + t2981 * t3013;
t2814 = t2851 * t2989 + t2852 * t2985;
t2813 = t2829 * t2990 + t2900 * t2986;
t2812 = t2827 * t2990 - t2986 * t3038;
t2805 = t2815 * t2990 + t2868 * t2986;
t2801 = t2830 * t2989 + t2831 * t2985;
t2788 = t2802 * t2990 + t2874 * t2986;
t2787 = -t2981 * t2828 + t2983 * t3014;
t2786 = t2983 * t2828 + t2981 * t3014;
t2782 = -t2981 * t2826 + t2983 * t3015;
t2781 = t2983 * t2826 + t2981 * t3015;
t2780 = -t2981 * t2814 + t2983 * t3016;
t2779 = t2983 * t2814 + t2981 * t3016;
t2772 = t2798 * t2989 + t2800 * t2985;
t2768 = t2794 * t2989 + t2796 * t2985;
t2766 = -t2981 * t2801 + t2983 * t3017;
t2765 = t2983 * t2801 + t2981 * t3017;
t2757 = t2774 * t2990 + t3078;
t2755 = t2770 * t2990 + t3078;
t2750 = t2777 * t2989 + t2778 * t2985;
t2747 = t2751 * t2990 + t2853 * t2986;
t2746 = -t2981 * t2772 + t2983 * t3018;
t2744 = t2983 * t2772 + t2981 * t3018;
t2742 = -t2981 * t2768 + t2983 * t3020;
t2740 = t2983 * t2768 + t2981 * t3020;
t2728 = -t2981 * t2750 + t2983 * t3024;
t2727 = t2983 * t2750 + t2981 * t3024;
t2725 = t2735 * t2989 + t2736 * t2985;
t2724 = t2726 * t2990 + t2748 * t2986;
t2722 = t2729 * t2989 + t2730 * t2985;
t2721 = t2723 * t2990 + t2737 * t2986;
t2720 = -t2981 * t2725 + t2983 * t3025;
t2719 = t2983 * t2725 + t2981 * t3025;
t2718 = -t2981 * t2722 + t2983 * t3026;
t2717 = t2983 * t2722 + t2981 * t3026;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2965, -t2964, 0, -t2969 * t2987 + t2970 * t2991, 0, 0, 0, 0, 0, 0, -t2908 * t2987 + t2936 * t2991, -t2902 * t2987 + t2934 * t2991, -t2899 * t2987 + t2910 * t2991, -t2876 * t2987 + t2890 * t2991, 0, 0, 0, 0, 0, 0, -t2835 * t2987 + t2854 * t2991, -t2845 * t2987 + t2857 * t2991, -t2821 * t2987 + t2850 * t2991, -t2787 * t2987 + t2813 * t2991, 0, 0, 0, 0, 0, 0, -t2780 * t2987 + t2805 * t2991, -t2782 * t2987 + t2812 * t2991, -t2766 * t2987 + t2788 * t2991, -t2728 * t2987 + t2747 * t2991, 0, 0, 0, 0, 0, 0, -t2742 * t2987 + t2755 * t2991, -t3100, t3094, -t2720 * t2987 + t2724 * t2991, 0, 0, 0, 0, 0, 0, -t2746 * t2987 + t2757 * t2991, t3094, t3100, -t2718 * t2987 + t2721 * t2991; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2964, t2965, 0, t2969 * t2991 + t2970 * t2987, 0, 0, 0, 0, 0, 0, t2908 * t2991 + t2936 * t2987, t2902 * t2991 + t2934 * t2987, t2899 * t2991 + t2910 * t2987, t2876 * t2991 + t2890 * t2987, 0, 0, 0, 0, 0, 0, t2835 * t2991 + t2854 * t2987, t2845 * t2991 + t2857 * t2987, t2821 * t2991 + t2850 * t2987, t2787 * t2991 + t2813 * t2987, 0, 0, 0, 0, 0, 0, t2780 * t2991 + t2805 * t2987, t2782 * t2991 + t2812 * t2987, t2766 * t2991 + t2788 * t2987, t2728 * t2991 + t2747 * t2987, 0, 0, 0, 0, 0, 0, t2742 * t2991 + t2755 * t2987, t3099, t3093, t2720 * t2991 + t2724 * t2987, 0, 0, 0, 0, 0, 0, t2746 * t2991 + t2757 * t2987, t3093, -t3099, t2718 * t2991 + t2721 * t2987; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2907, t2901, t2898, t2875, 0, 0, 0, 0, 0, 0, t2834, t2844, t2820, t2786, 0, 0, 0, 0, 0, 0, t2779, t2781, t2765, t2727, 0, 0, 0, 0, 0, 0, t2740, t2743, t3090, t2719, 0, 0, 0, 0, 0, 0, t2744, t3090, -t2743, t2717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2992, -qJDD(1), 0, t2970, 0, 0, 0, 0, 0, 0, t2936, t2934, t2910, t2890, 0, 0, 0, 0, 0, 0, t2854, t2857, t2850, t2813, 0, 0, 0, 0, 0, 0, t2805, t2812, t2788, t2747, 0, 0, 0, 0, 0, 0, t2755, t2756, t3085, t2724, 0, 0, 0, 0, 0, 0, t2757, t3085, -t2756, t2721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2992, 0, t2969, 0, 0, 0, 0, 0, 0, t2908, t2902, t2899, t2876, 0, 0, 0, 0, 0, 0, t2835, t2845, t2821, t2787, 0, 0, 0, 0, 0, 0, t2780, t2782, t2766, t2728, 0, 0, 0, 0, 0, 0, t2742, t2745, t3089, t2720, 0, 0, 0, 0, 0, 0, t2746, t3089, -t2745, t2718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2907, t2901, t2898, t2875, 0, 0, 0, 0, 0, 0, t2834, t2844, t2820, t2786, 0, 0, 0, 0, 0, 0, t2779, t2781, t2765, t2727, 0, 0, 0, 0, 0, 0, t2740, t2743, t3090, t2719, 0, 0, 0, 0, 0, 0, t2744, t3090, -t2743, t2717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2959, t2956, t2940, t2926, 0, 0, 0, 0, 0, 0, t2880, t2893, t2867, t2829, 0, 0, 0, 0, 0, 0, t2815, t2827, t2802, t2751, 0, 0, 0, 0, 0, 0, t2770, t2773, t3081, t2726, 0, 0, 0, 0, 0, 0, t2774, t3081, -t2773, t2723; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2955, t2948, t2939, t2925, 0, 0, 0, 0, 0, 0, -t2903, -t2905, -t2916, -t2900, 0, 0, 0, 0, 0, 0, -t2868, t3038, -t2874, -t2853, 0, 0, 0, 0, 0, 0, -t3070, t2816, -t3064, -t2748, 0, 0, 0, 0, 0, 0, -t3070, -t3064, -t2816, -t2737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2941, t2938, t2960, t2943, 0, 0, 0, 0, 0, 0, t2879, t2892, t2866, t2828, 0, 0, 0, 0, 0, 0, t2814, t2826, t2801, t2750, 0, 0, 0, 0, 0, 0, t2768, -t2767, t3082, t2725, 0, 0, 0, 0, 0, 0, t2772, t3082, t2767, t2722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2923, t2917, t2904, t2863, 0, 0, 0, 0, 0, 0, t2852, t2861, t2831, t2778, 0, 0, 0, 0, 0, 0, t2796, -t2795, t3076, t2736, 0, 0, 0, 0, 0, 0, t2800, t3076, t2795, t2730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2918, t2935, t2906, t2862, 0, 0, 0, 0, 0, 0, t2851, t2860, t2830, t2777, 0, 0, 0, 0, 0, 0, t2794, -t2793, t3075, t2735, 0, 0, 0, 0, 0, 0, t2798, t3075, t2793, t2729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2903, t2905, t2916, t2900, 0, 0, 0, 0, 0, 0, t2868, -t3038, t2874, t2853, 0, 0, 0, 0, 0, 0, t3070, -t2816, t3064, t2748, 0, 0, 0, 0, 0, 0, t3070, t3064, t2816, t2737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2891, t2883, t2869, t2804, 0, 0, 0, 0, 0, 0, t3069, -t2818, t3063, t2749, 0, 0, 0, 0, 0, 0, t3069, t3063, t2818, t2738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2884, t2909, t2871, t2803, 0, 0, 0, 0, 0, 0, -t2836, -t2997, t2859, -t2784, 0, 0, 0, 0, 0, 0, -t2837, t2859, t2997, -t2764; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2868, -t3038, t2874, t2853, 0, 0, 0, 0, 0, 0, t3070, -t2816, t3064, t2748, 0, 0, 0, 0, 0, 0, t3070, t3064, t2816, t2737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3065, -t2847, t3002, t2776, 0, 0, 0, 0, 0, 0, t3065, t3002, t2847, t2758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2848, t3066, -t2840, t2775, 0, 0, 0, 0, 0, 0, t2848, -t2840, -t3066, -t2759; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2836, t2997, -t2859, t2784, 0, 0, 0, 0, 0, 0, t2837, -t2859, -t2997, t2764; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3065, t3002, t2847, t2758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2837, -t2859, -t2997, t2764; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2848, t2840, t3066, t2759;];
f_new_reg  = t1;
