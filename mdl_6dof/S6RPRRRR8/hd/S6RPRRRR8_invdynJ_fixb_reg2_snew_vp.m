% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 04:17
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRRR8_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 04:16:00
% EndTime: 2019-05-06 04:16:20
% DurationCPUTime: 8.15s
% Computational Cost: add. (41759->467), mult. (82190->649), div. (0->0), fcn. (58082->10), ass. (0->312)
t281 = sin(qJ(4));
t330 = qJDD(3) + qJDD(4);
t282 = sin(qJ(3));
t286 = cos(qJ(4));
t287 = cos(qJ(3));
t340 = t287 * t281;
t254 = (t282 * t286 + t340) * qJD(1);
t337 = qJD(1) * t287;
t256 = -t281 * t282 * qJD(1) + t286 * t337;
t350 = t256 * t254;
t385 = t330 - t350;
t388 = t281 * t385;
t387 = t286 * t385;
t333 = qJD(1) * qJD(3);
t320 = t287 * t333;
t331 = t282 * qJDD(1);
t262 = -t320 - t331;
t273 = t287 * qJDD(1);
t319 = t282 * t333;
t263 = t273 - t319;
t217 = -t254 * qJD(4) + t281 * t262 + t286 * t263;
t275 = qJD(3) + qJD(4);
t349 = t275 * t254;
t386 = t217 - t349;
t279 = sin(qJ(6));
t280 = sin(qJ(5));
t285 = cos(qJ(5));
t235 = t256 * t280 - t285 * t275;
t237 = t256 * t285 + t275 * t280;
t284 = cos(qJ(6));
t207 = t284 * t235 + t237 * t279;
t209 = -t235 * t279 + t237 * t284;
t175 = t209 * t207;
t313 = -t286 * t262 + t263 * t281;
t216 = -qJD(4) * t256 - t313;
t215 = qJDD(5) - t216;
t214 = qJDD(6) + t215;
t380 = -t175 + t214;
t384 = t279 * t380;
t213 = t237 * t235;
t378 = -t213 + t215;
t383 = t280 * t378;
t382 = t284 * t380;
t381 = t285 * t378;
t332 = qJD(2) * qJD(1);
t274 = 0.2e1 * t332;
t277 = t282 ^ 2;
t290 = qJD(1) ^ 2;
t303 = qJD(3) * pkin(3) - pkin(8) * t337;
t276 = qJDD(1) * qJ(2);
t283 = sin(qJ(1));
t288 = cos(qJ(1));
t310 = g(1) * t288 + g(2) * t283;
t305 = -t276 + t310;
t373 = pkin(7) + pkin(1);
t376 = -pkin(3) * t262 - (pkin(8) * t277 + t373) * t290 + t303 * t337 - t305;
t130 = t274 - t386 * pkin(9) + (t256 * t275 - t216) * pkin(4) + t376;
t309 = g(1) * t283 - g(2) * t288;
t302 = qJDD(2) - t309;
t364 = qJ(2) * t290;
t297 = t302 - t364;
t294 = -qJDD(1) * t373 + t297;
t232 = t287 * g(3) - t282 * t294;
t346 = t277 * t290;
t210 = -pkin(3) * t346 + t262 * pkin(8) - qJD(3) * t303 - t232;
t343 = t286 * t210;
t293 = t287 * t294;
t292 = -t263 * pkin(8) + t293;
t339 = t287 * t290;
t377 = qJDD(3) * pkin(3) + t292 + (-pkin(3) * t339 - pkin(8) * t333 + g(3)) * t282;
t173 = t281 * t377 + t343;
t227 = pkin(4) * t254 - pkin(9) * t256;
t374 = t275 ^ 2;
t136 = -pkin(4) * t374 + pkin(9) * t330 - t254 * t227 + t173;
t84 = -t285 * t130 + t136 * t280;
t85 = t280 * t130 + t285 * t136;
t50 = t280 * t84 + t285 * t85;
t299 = -t285 * t217 - t280 * t330;
t184 = -t235 * qJD(5) - t299;
t314 = t217 * t280 - t285 * t330;
t301 = qJD(5) * t237 + t314;
t127 = -t207 * qJD(6) + t284 * t184 - t279 * t301;
t251 = qJD(5) + t254;
t247 = qJD(6) + t251;
t191 = t247 * t207;
t379 = -t191 + t127;
t222 = t251 * t235;
t169 = t222 + t184;
t315 = t184 * t279 + t284 * t301;
t101 = (qJD(6) - t247) * t209 + t315;
t165 = (qJD(5) - t251) * t237 + t314;
t205 = t207 ^ 2;
t206 = t209 ^ 2;
t375 = t235 ^ 2;
t234 = t237 ^ 2;
t246 = t247 ^ 2;
t249 = t251 ^ 2;
t252 = t254 ^ 2;
t253 = t256 ^ 2;
t69 = pkin(5) * t378 - pkin(10) * t169 - t84;
t219 = pkin(5) * t251 - pkin(10) * t237;
t72 = -pkin(5) * t375 - pkin(10) * t301 - t251 * t219 + t85;
t35 = t279 * t72 - t284 * t69;
t36 = t279 * t69 + t284 * t72;
t17 = t279 * t36 - t284 * t35;
t372 = pkin(5) * t17;
t104 = t191 + t127;
t61 = -t101 * t279 - t104 * t284;
t371 = pkin(5) * t61;
t370 = t282 * g(3);
t369 = t17 * t280;
t368 = t17 * t285;
t172 = t210 * t281 - t286 * t377;
t135 = -t330 * pkin(4) - t374 * pkin(9) + t227 * t256 + t172;
t87 = pkin(5) * t301 - pkin(10) * t375 + t219 * t237 + t135;
t367 = t279 * t87;
t366 = t284 * t87;
t365 = -pkin(4) * t135 + pkin(9) * t50;
t363 = qJDD(1) * pkin(1);
t146 = t175 + t214;
t362 = t146 * t279;
t361 = t146 * t284;
t177 = t213 + t215;
t360 = t177 * t280;
t359 = t177 * t285;
t329 = -0.2e1 * t332;
t211 = t329 - t376;
t358 = t211 * t281;
t357 = t211 * t286;
t225 = t350 + t330;
t356 = t225 * t281;
t355 = t225 * t286;
t354 = t247 * t279;
t353 = t247 * t284;
t352 = t251 * t280;
t351 = t251 * t285;
t348 = t275 * t281;
t347 = t275 * t286;
t278 = t287 ^ 2;
t345 = t278 * t290;
t131 = t280 * t135;
t324 = t282 * t339;
t344 = t282 * (qJDD(3) + t324);
t132 = t285 * t135;
t120 = -t172 * t286 + t173 * t281;
t342 = t287 * t120;
t267 = qJDD(3) - t324;
t341 = t287 * t267;
t338 = t277 + t278;
t335 = qJD(5) + t251;
t328 = t281 * t175;
t327 = t286 * t175;
t326 = t281 * t213;
t325 = t286 * t213;
t204 = -t234 - t249;
t144 = -t204 * t280 - t359;
t170 = t235 * t335 + t299;
t323 = pkin(4) * t170 + pkin(9) * t144 + t131;
t193 = -t249 - t375;
t140 = t193 * t285 - t383;
t166 = -t237 * t335 - t314;
t322 = pkin(4) * t166 + pkin(9) * t140 - t132;
t321 = -pkin(4) * t286 - pkin(3);
t18 = t279 * t35 + t284 * t36;
t100 = (qJD(6) + t247) * t209 + t315;
t158 = -t246 - t205;
t109 = t158 * t284 - t384;
t39 = -pkin(5) * t100 + pkin(10) * t109 - t366;
t108 = t158 * t279 + t382;
t53 = -pkin(10) * t108 + t367;
t67 = -t108 * t280 + t109 * t285;
t318 = -pkin(4) * t100 + pkin(9) * t67 + t280 * t53 + t285 * t39;
t179 = -t206 - t246;
t114 = -t179 * t279 - t361;
t41 = -pkin(5) * t379 + pkin(10) * t114 + t367;
t113 = t179 * t284 - t362;
t59 = -pkin(10) * t113 + t366;
t76 = -t113 * t280 + t114 * t285;
t317 = -pkin(4) * t379 + pkin(9) * t76 + t280 * t59 + t285 * t41;
t141 = -t205 - t206;
t63 = -t101 * t284 + t104 * t279;
t11 = -pkin(5) * t141 + pkin(10) * t63 + t18;
t13 = -pkin(10) * t61 - t17;
t33 = -t280 * t61 + t285 * t63;
t316 = -pkin(4) * t141 + pkin(9) * t33 + t285 * t11 + t280 * t13;
t121 = t172 * t281 + t286 * t173;
t119 = -t165 * t285 + t169 * t280;
t186 = t234 + t375;
t312 = pkin(4) * t186 + pkin(9) * t119 + t50;
t308 = t280 * t85 - t285 * t84;
t42 = -t135 * t286 + t281 * t50;
t24 = t282 * (t135 * t281 + t286 * t50) + t287 * t42;
t231 = t293 + t370;
t202 = t287 * t231 - t282 * t232;
t306 = pkin(5) * t108 - t35;
t16 = -pkin(5) * t87 + pkin(10) * t18;
t9 = t18 * t285 - t369;
t304 = -pkin(4) * t87 + pkin(9) * t9 - pkin(10) * t369 + t285 * t16;
t300 = pkin(5) * t113 - t36;
t298 = (-qJD(4) + t275) * t256 - t313;
t289 = qJD(3) ^ 2;
t265 = t338 * qJDD(1);
t264 = t273 - 0.2e1 * t319;
t261 = 0.2e1 * t320 + t331;
t250 = -t297 + t363;
t244 = -t253 + t374;
t243 = t252 - t374;
t242 = t290 * t373 + t305 + t329;
t240 = -t253 - t374;
t239 = -t344 + t287 * (-t289 - t345);
t238 = t282 * (-t289 - t346) + t341;
t228 = t253 - t252;
t223 = -t374 - t252;
t221 = -t234 + t249;
t220 = -t249 + t375;
t218 = -t252 - t253;
t212 = t234 - t375;
t201 = -t240 * t281 - t355;
t200 = t240 * t286 - t356;
t199 = t349 + t217;
t194 = (qJD(4) + t275) * t256 + t313;
t190 = t223 * t286 - t388;
t189 = t223 * t281 + t387;
t188 = -t206 + t246;
t187 = t205 - t246;
t181 = (-t235 * t285 + t237 * t280) * t251;
t180 = (-t235 * t280 - t237 * t285) * t251;
t174 = t206 - t205;
t168 = -t222 + t184;
t162 = t184 * t285 - t237 * t352;
t161 = t184 * t280 + t237 * t351;
t160 = t235 * t351 + t280 * t301;
t159 = t235 * t352 - t285 * t301;
t157 = t287 * t200 + t282 * t201;
t156 = t199 * t281 + t286 * t298;
t155 = -t199 * t286 + t281 * t298;
t154 = t220 * t285 - t360;
t153 = -t221 * t280 + t381;
t152 = t220 * t280 + t359;
t151 = t221 * t285 + t383;
t150 = (-t207 * t284 + t209 * t279) * t247;
t149 = (-t207 * t279 - t209 * t284) * t247;
t148 = t287 * t189 + t282 * t190;
t143 = t204 * t285 - t360;
t139 = t193 * t280 + t381;
t126 = -qJD(6) * t209 - t315;
t125 = t187 * t284 - t362;
t124 = -t188 * t279 + t382;
t123 = t187 * t279 + t361;
t122 = t188 * t284 + t384;
t118 = t166 * t285 - t168 * t280;
t117 = -t165 * t280 - t169 * t285;
t116 = t166 * t280 + t168 * t285;
t112 = t287 * t155 + t282 * t156;
t111 = t144 * t286 - t170 * t281;
t110 = t144 * t281 + t170 * t286;
t107 = t140 * t286 - t166 * t281;
t106 = t140 * t281 + t166 * t286;
t97 = t127 * t284 - t209 * t354;
t96 = t127 * t279 + t209 * t353;
t95 = -t126 * t279 + t207 * t353;
t94 = t126 * t284 + t207 * t354;
t93 = -t149 * t280 + t150 * t285;
t92 = t149 * t285 + t150 * t280;
t91 = t119 * t286 - t186 * t281;
t90 = t119 * t281 + t186 * t286;
t89 = -pkin(9) * t143 + t132;
t88 = -pkin(9) * t139 + t131;
t81 = -t123 * t280 + t125 * t285;
t80 = -t122 * t280 + t124 * t285;
t79 = t123 * t285 + t125 * t280;
t78 = t122 * t285 + t124 * t280;
t77 = t282 * t121 + t342;
t75 = t113 * t285 + t114 * t280;
t73 = -pkin(4) * t143 + t85;
t71 = -pkin(4) * t139 + t84;
t70 = t287 * t110 + t282 * t111;
t66 = t108 * t285 + t109 * t280;
t64 = t287 * t106 + t282 * t107;
t62 = -t100 * t284 - t279 * t379;
t60 = -t100 * t279 + t284 * t379;
t57 = -t280 * t96 + t285 * t97;
t56 = -t280 * t94 + t285 * t95;
t55 = t280 * t97 + t285 * t96;
t54 = t280 * t95 + t285 * t94;
t51 = t282 * t91 + t287 * t90;
t47 = t281 * t379 + t286 * t76;
t46 = t281 * t76 - t286 * t379;
t45 = t100 * t281 + t286 * t67;
t44 = -t100 * t286 + t281 * t67;
t37 = -pkin(9) * t117 - t308;
t32 = -t280 * t60 + t285 * t62;
t31 = t280 * t63 + t285 * t61;
t30 = t280 * t62 + t285 * t60;
t28 = t141 * t281 + t286 * t33;
t27 = -t141 * t286 + t281 * t33;
t26 = t282 * t47 + t287 * t46;
t25 = t282 * t45 + t287 * t44;
t23 = -pkin(4) * t31 - t371;
t22 = -pkin(4) * t75 - t300;
t21 = -pkin(4) * t66 - t306;
t20 = -pkin(9) * t75 - t280 * t41 + t285 * t59;
t19 = -pkin(9) * t66 - t280 * t39 + t285 * t53;
t14 = t287 * t27 + t282 * t28;
t8 = t18 * t280 + t368;
t6 = t281 * t87 + t286 * t9;
t5 = t281 * t9 - t286 * t87;
t4 = -pkin(4) * t8 - t372;
t3 = -pkin(9) * t31 - t11 * t280 + t13 * t285;
t2 = -pkin(9) * t8 - pkin(10) * t368 - t16 * t280;
t1 = t282 * t6 + t287 * t5;
t7 = [0, 0, 0, 0, 0, qJDD(1), t309, t310, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t302 - 0.2e1 * t363, t274 + 0.2e1 * t276 - t310, pkin(1) * t250 + qJ(2) * (-pkin(1) * t290 + t274 - t305), (t263 - t319) * t287, -t261 * t287 - t264 * t282, t341 - t282 * (t289 - t345), (-t262 + t320) * t282, t287 * (-t289 + t346) - t344, 0, qJ(2) * t261 - t238 * t373 - t242 * t282, qJ(2) * t264 - t239 * t373 - t242 * t287, t265 * t373 - t338 * t364 - t202, -qJ(2) * t242 - t202 * t373, t287 * (t217 * t286 - t256 * t348) - t282 * (t217 * t281 + t256 * t347), t287 * (-t194 * t286 - t281 * t386) - t282 * (-t194 * t281 + t286 * t386), t287 * (-t244 * t281 + t387) - t282 * (t244 * t286 + t388), t287 * (-t216 * t281 + t254 * t347) - t282 * (t216 * t286 + t254 * t348), t287 * (t243 * t286 - t356) - t282 * (t243 * t281 + t355), (t287 * (-t254 * t286 + t256 * t281) - t282 * (-t254 * t281 - t256 * t286)) * t275, t287 * (-pkin(8) * t189 - t358) - t282 * (-pkin(3) * t194 + pkin(8) * t190 + t357) + qJ(2) * t194 - t373 * t148, t287 * (-pkin(8) * t200 - t357) - t282 * (-pkin(3) * t386 + pkin(8) * t201 - t358) + qJ(2) * t386 - t373 * t157, t287 * (-pkin(8) * t155 - t120) - t282 * (-pkin(3) * t218 + pkin(8) * t156 + t121) + qJ(2) * t218 - t373 * t112, -pkin(8) * t342 - t282 * (pkin(3) * t211 + pkin(8) * t121) - qJ(2) * t211 - t373 * t77, t287 * (t162 * t286 + t326) - t282 * (t162 * t281 - t325), t287 * (t118 * t286 + t212 * t281) - t282 * (t118 * t281 - t212 * t286), t287 * (t153 * t286 + t169 * t281) - t282 * (t153 * t281 - t169 * t286), t287 * (t160 * t286 - t326) - t282 * (t160 * t281 + t325), t287 * (t154 * t286 - t165 * t281) - t282 * (t154 * t281 + t165 * t286), t287 * (t181 * t286 + t215 * t281) - t282 * (t181 * t281 - t215 * t286), t287 * (-pkin(8) * t106 - t281 * t71 + t286 * t88) - t282 * (-pkin(3) * t139 + pkin(8) * t107 + t281 * t88 + t286 * t71) + qJ(2) * t139 - t373 * t64, t287 * (-pkin(8) * t110 - t281 * t73 + t286 * t89) - t282 * (-pkin(3) * t143 + pkin(8) * t111 + t281 * t89 + t286 * t73) + qJ(2) * t143 - t373 * t70, t287 * (-pkin(8) * t90 + t286 * t37) - t282 * (pkin(8) * t91 + t281 * t37) - t373 * t51 + (pkin(4) * t340 - t282 * t321 + qJ(2)) * t117, (t287 * (pkin(4) * t281 - pkin(9) * t286) - t282 * (-pkin(9) * t281 + t321) + qJ(2)) * t308 + (-t373 - pkin(8)) * t24, t287 * (t286 * t57 + t328) - t282 * (t281 * t57 - t327), t287 * (t174 * t281 + t286 * t32) - t282 * (-t174 * t286 + t281 * t32), t287 * (t104 * t281 + t286 * t80) - t282 * (-t104 * t286 + t281 * t80), t287 * (t286 * t56 - t328) - t282 * (t281 * t56 + t327), t287 * (-t101 * t281 + t286 * t81) - t282 * (t101 * t286 + t281 * t81), t287 * (t214 * t281 + t286 * t93) - t282 * (-t214 * t286 + t281 * t93), t287 * (-pkin(8) * t44 + t19 * t286 - t21 * t281) - t282 * (-pkin(3) * t66 + pkin(8) * t45 + t19 * t281 + t21 * t286) + qJ(2) * t66 - t373 * t25, t287 * (-pkin(8) * t46 + t20 * t286 - t22 * t281) - t282 * (-pkin(3) * t75 + pkin(8) * t47 + t20 * t281 + t22 * t286) + qJ(2) * t75 - t373 * t26, t287 * (-pkin(8) * t27 - t23 * t281 + t286 * t3) - t282 * (-pkin(3) * t31 + pkin(8) * t28 + t23 * t286 + t281 * t3) + qJ(2) * t31 - t373 * t14, t287 * (-pkin(8) * t5 + t2 * t286 - t281 * t4) - t282 * (-pkin(3) * t8 + pkin(8) * t6 + t2 * t281 + t286 * t4) + qJ(2) * t8 - t373 * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t290, -t250, 0, 0, 0, 0, 0, 0, t238, t239, -t265, t202, 0, 0, 0, 0, 0, 0, t148, t157, t112, t77, 0, 0, 0, 0, 0, 0, t64, t70, t51, t24, 0, 0, 0, 0, 0, 0, t25, t26, t14, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t324, (-t277 + t278) * t290, t273, -t324, -t331, qJDD(3), t231, t232, 0, 0, t350, t228, t199, -t350, t298, t330, pkin(3) * t189 - t172, -t343 - t281 * (-pkin(8) * t319 + t292 + t370) + (-t267 * t281 + t200) * pkin(3), pkin(3) * t155, pkin(3) * t120, t161, t116, t151, t159, t152, t180, pkin(3) * t106 + t322, pkin(3) * t110 + t323, pkin(3) * t90 + t312, pkin(3) * t42 + t365, t55, t30, t78, t54, t79, t92, pkin(3) * t44 + t318, pkin(3) * t46 + t317, pkin(3) * t27 + t316, pkin(3) * t5 + t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t350, t228, t199, -t350, t298, t330, -t172, -t173, 0, 0, t161, t116, t151, t159, t152, t180, t322, t323, t312, t365, t55, t30, t78, t54, t79, t92, t318, t317, t316, t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, t212, t169, -t213, -t165, t215, -t84, -t85, 0, 0, t175, t174, t104, -t175, -t101, t214, t306, t300, t371, t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t174, t104, -t175, -t101, t214, -t35, -t36, 0, 0;];
tauJ_reg  = t7;
