% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:22
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR8_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:21:13
% EndTime: 2019-03-09 07:21:23
% DurationCPUTime: 4.62s
% Computational Cost: add. (7203->351), mult. (14491->570), div. (0->0), fcn. (13722->8), ass. (0->187)
t145 = cos(qJ(4));
t143 = sin(qJ(3));
t146 = cos(qJ(3));
t248 = sin(qJ(4));
t114 = t145 * t143 + t248 * t146;
t203 = t248 * t143;
t226 = t145 * t146;
t116 = -t203 + t226;
t204 = t248 * t116;
t161 = (-t114 * t145 + t204) * qJD(4);
t256 = qJD(3) + qJD(4);
t87 = t256 * t114;
t196 = qJD(4) * t248;
t88 = -qJD(3) * t203 - t143 * t196 + t256 * t226;
t263 = (t145 * t87 - t248 * t88 + t161) * pkin(3);
t253 = -pkin(1) - pkin(7);
t217 = pkin(8) - t253;
t188 = t145 * t217;
t109 = t146 * t188;
t179 = t217 * t248;
t169 = qJD(4) * t179;
t177 = qJD(4) * t188;
t219 = t143 * qJD(3);
t178 = t217 * t219;
t153 = qJD(3) * t109 - t143 * t169 + t146 * t177 - t248 * t178;
t130 = t143 * pkin(3) + qJ(2);
t162 = t114 * pkin(4) - pkin(9) * t116 + t130;
t262 = -qJD(5) * t162 + t153;
t218 = t146 * qJD(3);
t125 = pkin(3) * t218 + qJD(2);
t170 = t146 * t179;
t156 = -t143 * t188 - t170;
t261 = -t88 * pkin(4) - t87 * pkin(9) + qJD(5) * t156 - t125;
t142 = sin(qJ(5));
t139 = t142 ^ 2;
t144 = cos(qJ(5));
t140 = t144 ^ 2;
t224 = t139 - t140;
t257 = t224 * qJD(5);
t249 = cos(qJ(6));
t205 = t249 * t144;
t141 = sin(qJ(6));
t227 = t141 * t142;
t166 = t205 - t227;
t206 = t249 * t142;
t115 = t141 * t144 + t206;
t255 = qJD(5) + qJD(6);
t86 = t255 * t115;
t20 = t116 * t86 + t166 * t87;
t35 = -t114 * t86 + t166 * t88;
t237 = t114 * t88;
t65 = t116 * t87;
t163 = -0.2e1 * t65 + 0.2e1 * t237;
t71 = t166 * t114;
t193 = t249 * qJD(6);
t259 = t249 * qJD(5) + t193;
t221 = qJD(5) * t142;
t201 = t116 * t221;
t233 = t144 * t87;
t167 = t201 + t233;
t136 = qJD(5) * t144;
t234 = t142 * t87;
t258 = t116 * t136 - t234;
t111 = t116 ^ 2;
t254 = 0.2e1 * qJD(2);
t252 = -pkin(10) - pkin(9);
t251 = pkin(4) * t87;
t250 = t88 * pkin(5);
t247 = pkin(3) * t145;
t52 = -qJD(3) * t170 - t143 * t177 - t145 * t178 - t146 * t169;
t89 = -t143 * t179 + t109;
t246 = t89 * t52;
t216 = t248 * pkin(3);
t133 = t216 + pkin(9);
t245 = -pkin(10) - t133;
t25 = t258 * pkin(5) + t52;
t229 = t116 * t142;
t61 = pkin(5) * t229 + t89;
t244 = -t166 * t25 + t61 * t86;
t85 = -t259 * t144 + t255 * t227;
t243 = t25 * t115 - t61 * t85;
t242 = t89 * t136 + t52 * t142;
t46 = t142 * t162 + t144 * t156;
t185 = pkin(3) * t196;
t212 = pkin(5) * t221;
t117 = t185 + t212;
t135 = -pkin(5) * t144 - pkin(4);
t120 = t135 - t247;
t241 = -t117 * t166 + t120 * t86;
t240 = t117 * t115 - t120 * t85;
t239 = pkin(3) * qJD(4);
t236 = t115 * t88;
t134 = -pkin(4) - t247;
t232 = t87 * t134;
t231 = t135 * t86 - t166 * t212;
t230 = t115 * t212 - t135 * t85;
t228 = t116 * t144;
t225 = t134 * t136 + t142 * t185;
t223 = t139 + t140;
t220 = qJD(6) * t141;
t63 = 0.2e1 * t237;
t215 = pkin(4) * t221;
t214 = pkin(4) * t136;
t213 = t145 * t239;
t211 = pkin(5) * t220;
t210 = t142 * t233;
t209 = t141 * t252;
t208 = t116 * t227;
t81 = t89 * t221;
t207 = t253 * qJD(3);
t200 = t142 * t136;
t199 = t143 * t218;
t45 = -t142 * t156 + t144 * t162;
t151 = t114 * pkin(5) - pkin(10) * t228 + t45;
t149 = t249 * t151;
t38 = -pkin(10) * t229 + t46;
t17 = -t141 * t38 + t149;
t150 = t141 * t151;
t18 = t249 * t38 + t150;
t16 = t142 * t262 - t144 * t261;
t147 = t167 * pkin(10) + t16 + t250;
t15 = t142 * t261 + t144 * t262;
t152 = -t258 * pkin(10) - t15;
t3 = -qJD(6) * t149 - t141 * t147 - t249 * t152 + t38 * t220;
t4 = -qJD(6) * t150 - t141 * t152 + t249 * t147 - t38 * t193;
t198 = -t4 * t115 - t166 * t3 + t17 * t85 - t18 * t86;
t197 = t114 ^ 2 + t111;
t195 = t245 * t142;
t192 = qJD(5) * t245;
t49 = t223 * t88;
t137 = t144 * pkin(10);
t108 = t133 * t144 + t137;
t186 = t144 * t213;
t158 = t142 * t192 + t186;
t187 = t142 * t213;
t159 = t144 * t192 - t187;
t171 = t249 * t195;
t30 = -qJD(6) * t171 + t108 * t220 - t141 * t159 - t249 * t158;
t80 = t249 * t108 + t141 * t195;
t31 = -t80 * qJD(6) - t141 * t158 + t249 * t159;
t79 = -t141 * t108 + t171;
t191 = -t31 * t115 - t166 * t30 + t79 * t85 - t80 * t86;
t121 = t144 * pkin(9) + t137;
t182 = t252 * t249;
t173 = t142 * t182;
t53 = t121 * t220 - t209 * t136 - t255 * t173;
t183 = t142 * t209;
t93 = t249 * t121 + t183;
t54 = -t93 * qJD(6) + (t144 * t182 - t183) * qJD(5);
t92 = -t141 * t121 + t173;
t190 = -t54 * t115 - t166 * t53 + t92 * t85 - t93 * t86;
t189 = t223 * t145;
t184 = pkin(5) * t193;
t181 = t111 * t200;
t180 = -t52 * t116 + t89 * t87;
t175 = t142 * t46 + t144 * t45;
t174 = t142 * t45 - t144 * t46;
t172 = t114 * t133 - t116 * t134;
t57 = t114 * t221 - t144 * t88;
t164 = t134 * t221 - t144 * t185;
t5 = -qJD(5) * t175 - t142 * t16 - t144 * t15;
t154 = pkin(3) * t161 - t133 * t88 - t232;
t148 = -t114 * t153 + t156 * t88 + t180;
t138 = qJ(2) * t254;
t124 = -0.2e1 * t200;
t123 = 0.2e1 * t200;
t112 = -0.2e1 * t257;
t103 = t189 * t239;
t72 = t116 * t205 - t208;
t70 = t115 * t116;
t69 = t115 * t114;
t64 = -0.2e1 * t115 * t85;
t62 = -0.2e1 * t166 * t86;
t58 = t114 * t136 + t142 * t88;
t44 = t116 * t257 + t210;
t37 = t115 * t87 + t116 * t85;
t34 = -t114 * t85 + t236;
t33 = -0.4e1 * t116 * t200 + t224 * t87;
t32 = -0.2e1 * t115 * t86 - 0.2e1 * t166 * t85;
t29 = (t249 * t85 - t141 * t86 + (t115 * t141 + t166 * t249) * qJD(6)) * pkin(5);
t22 = -t87 * t206 - t141 * t201 - qJD(6) * t208 + (t259 * t116 - t141 * t87) * t144;
t21 = -t255 * t71 - t236;
t12 = -t166 * t22 + t70 * t86;
t11 = -t115 * t20 - t72 * t85;
t7 = -t115 * t22 - t166 * t20 + t70 * t85 - t72 * t86;
t6 = -t115 * t21 + t166 * t35 - t69 * t85 - t71 * t86;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, t138, -0.2e1 * t199, 0.2e1 * (t143 ^ 2 - t146 ^ 2) * qJD(3), 0, 0.2e1 * t199, 0, 0, 0.2e1 * qJ(2) * t218 + 0.2e1 * qJD(2) * t143, -0.2e1 * qJ(2) * t219 + 0.2e1 * qJD(2) * t146, 0, t138, -0.2e1 * t65, 0.2e1 * t114 * t87 - 0.2e1 * t116 * t88, 0, t63, 0, 0, 0.2e1 * t114 * t125 + 0.2e1 * t130 * t88, 0.2e1 * t116 * t125 - 0.2e1 * t130 * t87, -0.2e1 * t148, 0.2e1 * t130 * t125 - 0.2e1 * t153 * t156 + 0.2e1 * t246, -0.2e1 * t140 * t65 - 0.2e1 * t181, 0.2e1 * t111 * t257 + 0.4e1 * t116 * t210, -0.2e1 * t114 * t167 + 0.2e1 * t228 * t88, -0.2e1 * t139 * t65 + 0.2e1 * t181, -0.2e1 * t114 * t258 - 0.2e1 * t229 * t88, t63, 0.2e1 * t114 * t16 + 0.2e1 * t116 * t242 - 0.2e1 * t234 * t89 + 0.2e1 * t45 * t88, -0.2e1 * t89 * t233 + 0.2e1 * t114 * t15 - 0.2e1 * t46 * t88 + 0.2e1 * (t52 * t144 - t81) * t116, 0.2e1 * t175 * t87 + 0.2e1 * (qJD(5) * t174 + t142 * t15 - t144 * t16) * t116, -0.2e1 * t15 * t46 + 0.2e1 * t16 * t45 + 0.2e1 * t246, -0.2e1 * t72 * t20, 0.2e1 * t20 * t70 - 0.2e1 * t22 * t72, -0.2e1 * t114 * t20 + 0.2e1 * t72 * t88, 0.2e1 * t70 * t22, -0.2e1 * t114 * t22 - 0.2e1 * t70 * t88, t63, 0.2e1 * t114 * t4 + 0.2e1 * t17 * t88 + 0.2e1 * t22 * t61 + 0.2e1 * t25 * t70, 0.2e1 * t114 * t3 - 0.2e1 * t18 * t88 - 0.2e1 * t20 * t61 + 0.2e1 * t25 * t72, 0.2e1 * t17 * t20 - 0.2e1 * t18 * t22 + 0.2e1 * t3 * t70 - 0.2e1 * t4 * t72, 0.2e1 * t17 * t4 - 0.2e1 * t18 * t3 + 0.2e1 * t25 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, t148, 0, 0, 0, 0, 0, 0, -t136 * t197 - t142 * t163, -t144 * t163 + t197 * t221, 0, t114 * t5 - t174 * t88 + t180, 0, 0, 0, 0, 0, 0, t114 * t21 - t116 * t22 - t69 * t88 + t70 * t87, -t114 * t35 + t116 * t20 - t71 * t88 + t72 * t87, -t20 * t69 - t21 * t72 - t22 * t71 - t35 * t70, -t116 * t25 + t17 * t21 + t18 * t35 - t3 * t71 - t4 * t69 + t61 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t114 * t49 - 0.2e1 * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t21 * t69 + 0.2e1 * t35 * t71 - 0.2e1 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, 0, -t218, 0, -t143 * t207, -t146 * t207, 0, 0, 0, 0, -t87, 0, -t88, 0, -t52, t153, t263, -t153 * t216 + t156 * t213 + t185 * t89 - t52 * t247, -t44, t33, t58, t44, -t57, 0, t81 + (-qJD(5) * t172 - t52) * t144 + t154 * t142, t144 * t154 + t172 * t221 + t242, t5, t52 * t134 + (-t174 * t145 + t89 * t248) * t239 + t5 * t133, t11, t7, t34, t12, t35, 0, t114 * t31 + t117 * t70 + t120 * t22 + t79 * t88 + t244, t114 * t30 + t117 * t72 - t120 * t20 - t80 * t88 + t243, t20 * t79 - t22 * t80 + t30 * t70 - t31 * t72 + t198, t117 * t61 + t120 * t25 + t17 * t31 - t18 * t30 - t3 * t80 + t4 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, -t218, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t88, 0, -t263, 0, 0, 0, 0, 0, 0, -t167, -t258, t49, t232 + t133 * t49 + (t114 * t189 - t204) * t239, 0, 0, 0, 0, 0, 0, -t20, t37, t6, -t116 * t117 + t120 * t87 + t21 * t79 - t30 * t71 - t31 * t69 + t35 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t185, -0.2e1 * t213, 0, 0, t123, t112, 0, t124, 0, 0, 0.2e1 * t164, 0.2e1 * t225, 0.2e1 * t103, 0.2e1 * (t133 * t189 + t248 * t134) * t239, t64, t32, 0, t62, 0, 0, 0.2e1 * t241, 0.2e1 * t240, 0.2e1 * t191, 0.2e1 * t117 * t120 - 0.2e1 * t30 * t80 + 0.2e1 * t31 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, 0, -t88, 0, -t52, t153, 0, 0, -t44, t33, t58, t44, -t57, 0, t81 + (-pkin(9) * t88 + t251) * t142 + (-t52 + (-pkin(4) * t116 - pkin(9) * t114) * qJD(5)) * t144, pkin(4) * t167 + pkin(9) * t57 + t242, t5, -pkin(4) * t52 + pkin(9) * t5, t11, t7, t34, t12, t35, 0, t114 * t54 + t135 * t22 + t212 * t70 + t88 * t92 + t244, t114 * t53 - t135 * t20 + t212 * t72 - t88 * t93 + t243, t20 * t92 - t22 * t93 + t53 * t70 - t54 * t72 + t198, t135 * t25 + t17 * t54 - t18 * t53 + t212 * t61 - t3 * t93 + t4 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t88, 0, 0, 0, 0, 0, 0, 0, 0, -t167, -t258, t49, pkin(9) * t49 - t251, 0, 0, 0, 0, 0, 0, -t20, t37, t6, -pkin(5) * t201 + t135 * t87 + t21 * t92 + t35 * t93 - t53 * t71 - t54 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t185, -t213, 0, 0, t123, t112, 0, t124, 0, 0, t164 - t215, -t214 + t225, t103 (-t248 * pkin(4) + pkin(9) * t189) * t239, t64, t32, 0, t62, 0, 0, t231 + t241, t230 + t240, t190 + t191, t117 * t135 + t120 * t212 - t30 * t93 + t31 * t92 - t53 * t80 + t54 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, t112, 0, t124, 0, 0, -0.2e1 * t215, -0.2e1 * t214, 0, 0, t64, t32, 0, t62, 0, 0, 0.2e1 * t231, 0.2e1 * t230, 0.2e1 * t190, 0.2e1 * t135 * t212 - 0.2e1 * t53 * t93 + 0.2e1 * t54 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t167, 0, -t258, t88, t16, t15, 0, 0, 0, 0, -t20, 0, -t22, t88, -t114 * t211 + t249 * t250 + t4 (-t114 * t193 - t141 * t88) * pkin(5) + t3 (t249 * t20 - t141 * t22 + (t141 * t72 - t249 * t70) * qJD(6)) * pkin(5) (t249 * t4 - t141 * t3 + (-t141 * t17 + t249 * t18) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, t57, 0, 0, 0, 0, 0, 0, 0, 0, t21, -t35, 0 (t249 * t21 + t141 * t35 + (t141 * t69 + t249 * t71) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t221, 0, -t133 * t136 - t187, t133 * t221 - t186, 0, 0, 0, 0, -t85, 0, -t86, 0, t31, t30, t29 (t249 * t31 - t141 * t30 + (-t141 * t79 + t249 * t80) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t221, 0, -pkin(9) * t136, pkin(9) * t221, 0, 0, 0, 0, -t85, 0, -t86, 0, t54, t53, t29 (t249 * t54 - t141 * t53 + (-t141 * t92 + t249 * t93) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t211, -0.2e1 * t184, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, 0, -t22, t88, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, -t35, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, 0, -t86, 0, t31, t30, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, 0, -t86, 0, t54, t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, -t184, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
