% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:22
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:21:20
% EndTime: 2019-03-09 07:21:40
% DurationCPUTime: 9.59s
% Computational Cost: add. (16743->676), mult. (32364->849), div. (0->0), fcn. (22368->14), ass. (0->339)
t477 = sin(qJ(4));
t377 = qJD(4) * t477;
t508 = -qJD(3) * t477 - t377;
t296 = sin(qJ(5));
t301 = cos(qJ(4));
t404 = qJD(4) * t301;
t391 = pkin(3) * t404;
t306 = -pkin(1) - pkin(7);
t245 = qJD(1) * t306 + qJD(2);
t297 = sin(qJ(3));
t185 = (-pkin(8) * qJD(1) + t245) * t297;
t176 = t477 * t185;
t302 = cos(qJ(3));
t407 = qJD(1) * t302;
t186 = -pkin(8) * t407 + t302 * t245;
t129 = t301 * t186 - t176;
t208 = t301 * t297 + t302 * t477;
t196 = t208 * qJD(1);
t381 = t477 * t297;
t199 = -qJD(1) * t381 + t301 * t407;
t147 = pkin(4) * t199 + pkin(9) * t196;
t133 = pkin(3) * t407 + t147;
t300 = cos(qJ(5));
t79 = -t129 * t296 + t300 * t133;
t507 = -t296 * t391 - t79;
t80 = t300 * t129 + t296 * t133;
t506 = -t300 * t391 + t80;
t286 = qJD(3) + qJD(4);
t160 = t199 * t296 - t300 * t286;
t491 = qJD(5) + t196;
t505 = t160 * t491;
t162 = t199 * t300 + t286 * t296;
t504 = t162 * t491;
t294 = qJ(3) + qJ(4);
t277 = cos(t294);
t303 = cos(qJ(1));
t432 = t277 * t303;
t239 = g(2) * t432;
t275 = sin(t294);
t331 = g(3) * t275 + t239;
t298 = sin(qJ(1));
t433 = t277 * t298;
t392 = g(1) * t433;
t503 = t331 - t392;
t308 = qJD(1) ^ 2;
t283 = g(2) * t303;
t413 = g(1) * t298 - t283;
t502 = -t308 * qJ(2) - t413;
t295 = sin(qJ(6));
t299 = cos(qJ(6));
t339 = t160 * t295 - t299 * t162;
t98 = t299 * t160 + t162 * t295;
t463 = t98 * t339;
t265 = pkin(3) * t477 + pkin(9);
t466 = -pkin(10) - t265;
t371 = qJD(5) * t466;
t444 = t196 * t296;
t393 = pkin(10) * t444;
t501 = t296 * t371 - t393 - t506;
t443 = t196 * t300;
t354 = t199 * pkin(5) + pkin(10) * t443;
t500 = t300 * t371 - t354 + t507;
t304 = -pkin(10) - pkin(9);
t383 = qJD(5) * t304;
t178 = qJD(3) * pkin(3) + t186;
t118 = t178 * t301 - t176;
t82 = t300 * t118 + t296 * t147;
t499 = t296 * t383 - t393 - t82;
t81 = -t118 * t296 + t300 * t147;
t498 = t300 * t383 - t354 - t81;
t242 = qJDD(1) * t306 + qJDD(2);
t214 = t302 * t242;
t406 = qJD(3) * t297;
t395 = t302 * qJDD(1);
t398 = qJD(1) * qJD(3);
t492 = t297 * t398 - t395;
t132 = qJDD(3) * pkin(3) + pkin(8) * t492 - t245 * t406 + t214;
t405 = qJD(3) * t302;
t375 = t302 * t398;
t396 = t297 * qJDD(1);
t493 = t375 + t396;
t135 = -pkin(8) * t493 + t297 * t242 + t245 * t405;
t358 = -t301 * t132 + t477 * t135 + t178 * t377 + t185 * t404;
t285 = qJDD(3) + qJDD(4);
t468 = t285 * pkin(4);
t52 = t358 - t468;
t357 = -t52 - t392;
t430 = t295 * t300;
t209 = t296 * t299 + t430;
t394 = qJD(5) + qJD(6);
t153 = t394 * t209;
t497 = t209 * t196 + t153;
t400 = qJD(6) * t299;
t402 = qJD(5) * t300;
t431 = t295 * t296;
t424 = t299 * t300;
t482 = t424 - t431;
t496 = t482 * t196 + t299 * t402 + t300 * t400 - t394 * t431;
t494 = t508 * qJD(1);
t288 = qJDD(1) * qJ(2);
t490 = t339 ^ 2 - t98 ^ 2;
t184 = qJD(6) + t491;
t370 = qJDD(1) * t477;
t408 = qJD(1) * t297;
t322 = -t297 * t370 - t301 * t492 + t302 * t494 - t404 * t408;
t403 = qJD(5) * t296;
t386 = t199 * t402 + t286 * t403 + t296 * t322;
t330 = t300 * t285 - t386;
t401 = qJD(6) * t295;
t78 = t199 * t403 - t296 * t285 - t286 * t402 - t300 * t322;
t27 = t160 * t400 + t162 * t401 - t295 * t330 + t299 * t78;
t489 = t184 * t98 - t27;
t293 = qJ(5) + qJ(6);
t274 = sin(t293);
t276 = cos(t293);
t435 = t276 * t298;
t173 = t274 * t303 + t275 * t435;
t434 = t276 * t303;
t175 = -t274 * t298 + t275 * t434;
t262 = g(3) * t277;
t177 = t301 * t185;
t119 = t178 * t477 + t177;
t112 = t286 * pkin(9) + t119;
t225 = pkin(3) * t408 + qJD(1) * qJ(2);
t123 = pkin(4) * t196 - pkin(9) * t199 + t225;
t359 = -t477 * t132 - t301 * t135 - t178 * t404 + t185 * t377;
t51 = pkin(9) * t285 - t359;
t325 = t297 * t494 + t302 * t370;
t366 = t302 * t286;
t110 = (qJD(1) * t366 + t396) * t301 + t325;
t289 = qJD(1) * qJD(2);
t179 = pkin(3) * t493 + t288 + t289;
t61 = t110 * pkin(4) - pkin(9) * t322 + t179;
t14 = -t112 * t403 + t123 * t402 + t296 * t61 + t300 * t51;
t10 = pkin(10) * t330 + t14;
t70 = -t112 * t296 + t300 * t123;
t56 = -pkin(10) * t162 + t70;
t48 = pkin(5) * t491 + t56;
t71 = t112 * t300 + t123 * t296;
t57 = -pkin(10) * t160 + t71;
t109 = qJDD(5) + t110;
t59 = t300 * t61;
t15 = -qJD(5) * t71 - t296 * t51 + t59;
t9 = t109 * pkin(5) + t78 * pkin(10) + t15;
t3 = (qJD(6) * t48 + t10) * t299 + t295 * t9 - t57 * t401;
t111 = -pkin(4) * t286 - t118;
t84 = pkin(5) * t160 + t111;
t488 = g(1) * t173 - g(2) * t175 + t276 * t262 + t84 * t98 - t3;
t438 = t275 * t298;
t172 = -t274 * t438 + t434;
t437 = t275 * t303;
t174 = t274 * t437 + t435;
t461 = t299 * t57;
t21 = t295 * t48 + t461;
t4 = -qJD(6) * t21 - t295 * t10 + t299 * t9;
t487 = -g(1) * t172 - g(2) * t174 + t274 * t262 + t84 * t339 + t4;
t319 = qJD(6) * t339 + t295 * t78 + t299 * t330;
t486 = -t184 * t339 + t319;
t140 = t482 * t208;
t138 = t209 * t208;
t291 = t297 ^ 2;
t292 = t302 ^ 2;
t411 = t291 + t292;
t368 = t411 * t242;
t210 = t301 * t302 - t381;
t280 = t297 * pkin(3);
t259 = qJ(2) + t280;
t148 = pkin(4) * t208 - pkin(9) * t210 + t259;
t467 = pkin(8) - t306;
t218 = t467 * t297;
t219 = t467 * t302;
t159 = -t301 * t218 - t219 * t477;
t150 = t300 * t159;
t89 = t296 * t148 + t150;
t305 = -pkin(8) - pkin(7);
t485 = t303 * t280 + t298 * t305;
t260 = t277 * pkin(9);
t350 = pkin(4) * t275 - t260;
t128 = t186 * t477 + t177;
t333 = pkin(3) * t377 - t128;
t484 = t477 * t218 - t301 * t219;
t483 = (t403 + t444) * pkin(5);
t422 = t300 * t303;
t427 = t296 * t298;
t187 = -t275 * t427 + t422;
t425 = t298 * t300;
t426 = t296 * t303;
t189 = t275 * t426 + t425;
t481 = -g(1) * t187 - g(2) * t189;
t349 = g(1) * t303 + g(2) * t298;
t388 = 0.2e1 * t289;
t480 = 0.2e1 * t288 + t388 - t349;
t154 = t286 * t208;
t479 = -t199 * t154 + t210 * t322;
t476 = pkin(3) * t301;
t475 = pkin(3) * t302;
t473 = pkin(5) * t296;
t470 = g(3) * t297;
t469 = g(3) * t300;
t200 = t466 * t296;
t281 = t300 * pkin(10);
t201 = t265 * t300 + t281;
t145 = t200 * t299 - t201 * t295;
t465 = qJD(6) * t145 + t295 * t500 + t299 * t501;
t146 = t200 * t295 + t201 * t299;
t464 = -qJD(6) * t146 - t295 * t501 + t299 * t500;
t13 = t14 * t300;
t462 = t295 * t57;
t460 = t78 * t296;
t226 = t304 * t296;
t227 = pkin(9) * t300 + t281;
t163 = t226 * t299 - t227 * t295;
t459 = qJD(6) * t163 + t295 * t498 + t299 * t499;
t164 = t226 * t295 + t227 * t299;
t458 = -qJD(6) * t164 - t295 * t499 + t299 * t498;
t155 = t297 * t508 + t301 * t366;
t457 = qJD(1) * t482 + t140 * t394 + t209 * t155;
t456 = t209 * qJD(1) + t138 * t394 - t155 * t482;
t455 = t483 + t333;
t454 = pkin(1) * qJDD(1);
t453 = t111 * t196;
t452 = t154 * t300;
t451 = t160 * t296;
t450 = t160 * t300;
t449 = t162 * t160;
t448 = t162 * t296;
t447 = t162 * t300;
t446 = t184 * t199;
t445 = t491 * t199;
t441 = t199 * t196;
t440 = t210 * t296;
t439 = t210 * t300;
t436 = t275 * t304;
t429 = t296 * t109;
t428 = t296 * t154;
t423 = t300 * t109;
t418 = -t154 * t286 + t210 * t285;
t417 = pkin(4) * t433 + pkin(9) * t438;
t416 = g(1) * t432 + g(2) * t433;
t415 = (t388 + t288) * qJ(2);
t414 = t303 * pkin(1) + t298 * qJ(2);
t412 = t291 - t292;
t307 = qJD(3) ^ 2;
t410 = -t307 - t308;
t409 = qJD(1) * t225;
t246 = pkin(3) * t405 + qJD(2);
t397 = qJDD(3) * t297;
t238 = g(2) * t437;
t390 = pkin(9) * qJD(5) * t491;
t387 = t302 * t308 * t297;
t385 = g(1) * t438 - t238 + t262;
t384 = t298 * t280 + t414;
t266 = pkin(5) * t300 + pkin(4);
t380 = t210 * t403;
t279 = t303 * qJ(2);
t374 = -t298 * pkin(1) + t279;
t87 = pkin(4) * t155 + pkin(9) * t154 + t246;
t204 = qJD(3) * t219;
t351 = t467 * t406;
t94 = qJD(4) * t484 - t301 * t204 + t477 * t351;
t372 = -t296 * t94 + t300 * t87;
t88 = t300 * t148 - t159 * t296;
t367 = t300 * t491;
t365 = t411 * qJDD(1);
t362 = qJDD(2) - t454;
t361 = qJD(5) * t208 + qJD(1);
t356 = t297 * t375;
t355 = -t119 + t483;
t347 = t266 * t433 - t298 * t436;
t345 = -pkin(9) * t109 + t453;
t72 = pkin(5) * t208 - pkin(10) * t439 + t88;
t83 = -pkin(10) * t440 + t89;
t38 = -t295 * t83 + t299 * t72;
t39 = t295 * t72 + t299 * t83;
t344 = t296 * t71 + t300 * t70;
t343 = t296 * t70 - t300 * t71;
t342 = -t109 * t265 + t453;
t341 = t208 * t110 + t155 * t196;
t340 = -t155 * t286 - t208 * t285;
t338 = t447 + t451;
t337 = t266 * t275 + t277 * t304;
t336 = t374 + t485;
t335 = t111 * t402 + t71 * t199 - t296 * t357;
t334 = t111 * t403 - t70 * t199 + t300 * t239 + t275 * t469;
t332 = -t70 * t443 - t71 * t444 + t13 - t385;
t329 = -t303 * t305 + t384;
t328 = t210 * t402 - t428;
t327 = -t380 - t452;
t36 = t148 * t402 - t159 * t403 + t296 * t87 + t300 * t94;
t326 = 0.2e1 * qJ(2) * t398 + qJDD(3) * t306;
t324 = t330 * t300;
t321 = -qJD(5) * t344 - t15 * t296;
t320 = t225 * t196 + t359 + t385;
t20 = t299 * t48 - t462;
t318 = -t20 * t496 - t4 * t209 - t21 * t497 + t3 * t482 - t385;
t317 = -t225 * t199 - t358 + t503;
t316 = t321 + t13;
t315 = t118 * t154 - t119 * t155 + t208 * t359 + t210 * t358 + t413;
t314 = -t306 * t307 + t480;
t35 = -pkin(5) * t330 + t52;
t313 = -t199 * t20 + t276 * t503 - t35 * t482 + t497 * t84;
t95 = qJD(4) * t159 - t204 * t477 - t301 * t351;
t311 = t199 * t21 + t35 * t209 - t274 * t503 + t496 * t84;
t309 = qJD(5) * t338 + t324 - t460;
t273 = qJDD(3) * t302;
t267 = -pkin(4) - t476;
t256 = t298 * t475;
t224 = -t266 - t476;
t223 = t303 * t436;
t190 = t275 * t422 - t427;
t188 = t275 * t425 + t426;
t141 = t482 * t210;
t139 = t209 * t210;
t120 = pkin(5) * t440 - t484;
t114 = -t196 ^ 2 + t199 ^ 2;
t108 = qJDD(6) + t109;
t91 = t199 * t286 + (-t286 * t407 - t396) * t301 - t325;
t90 = t196 * t286 + t322;
t65 = pkin(5) * t328 + t95;
t47 = -t154 * t430 - t295 * t380 - t401 * t440 + (t394 * t439 - t428) * t299;
t45 = t153 * t210 + t154 * t424 - t295 * t428;
t43 = -t162 * t199 + t367 * t491 + t429;
t42 = -t296 * t491 ^ 2 + t160 * t199 + t423;
t41 = t451 * t491 + t324;
t40 = t162 * t367 - t460;
t37 = -qJD(5) * t89 + t372;
t26 = t108 * t482 - t184 * t497 + t98 * t199;
t25 = t209 * t108 + t184 * t496 + t199 * t339;
t24 = t299 * t56 - t462;
t23 = -t295 * t56 - t461;
t22 = -pkin(10) * t328 + t36;
t19 = pkin(10) * t452 + t155 * pkin(5) + (-t150 + (pkin(10) * t210 - t148) * t296) * qJD(5) + t372;
t16 = (-t78 - t505) * t300 + (t330 - t504) * t296;
t12 = t319 * t482 + t497 * t98;
t11 = -t27 * t209 - t339 * t496;
t7 = -qJD(6) * t39 + t299 * t19 - t295 * t22;
t6 = qJD(6) * t38 + t295 * t19 + t299 * t22;
t5 = t209 * t319 - t27 * t482 + t339 * t497 - t496 * t98;
t1 = [0, 0, 0, 0, 0, qJDD(1), t413, t349, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t413 - 0.2e1 * t454, t480, -pkin(1) * t362 - g(1) * t374 - g(2) * t414 + t415, qJDD(1) * t292 - 0.2e1 * t356, -0.2e1 * t297 * t395 + 0.2e1 * t398 * t412, -t297 * t307 + t273, qJDD(1) * t291 + 0.2e1 * t356, -t302 * t307 - t397, 0, t297 * t314 + t302 * t326, -t297 * t326 + t302 * t314, -t306 * t365 - t368 + t413, -g(1) * (t298 * t306 + t279) - g(2) * (pkin(7) * t303 + t414) + t306 * t368 + t415, t479, -t210 * t110 + t154 * t196 - t199 * t155 - t208 * t322, t418, t341, t340, 0, t259 * t110 + t225 * t155 + t179 * t208 + t246 * t196 - t275 * t349 + t285 * t484 - t95 * t286, -t225 * t154 - t159 * t285 + t179 * t210 + t246 * t199 + t259 * t322 - t94 * t286 - t416, -t159 * t110 - t94 * t196 + t95 * t199 - t322 * t484 + t315, -g(1) * t336 - g(2) * t329 - t118 * t95 + t119 * t94 - t159 * t359 + t179 * t259 + t225 * t246 - t358 * t484, t162 * t327 - t439 * t78 (t448 + t450) * t154 + (t324 + t460 + (-t447 + t451) * qJD(5)) * t210, t162 * t155 - t78 * t208 + t210 * t423 + t327 * t491, t160 * t328 - t330 * t440, -t160 * t155 + t208 * t330 - t210 * t429 - t328 * t491, t109 * t208 + t155 * t491, -g(1) * t190 - g(2) * t188 + t88 * t109 + t111 * t328 + t15 * t208 + t70 * t155 + t95 * t160 + t330 * t484 + t37 * t491 + t440 * t52, g(1) * t189 - g(2) * t187 - t89 * t109 + t111 * t327 - t14 * t208 - t71 * t155 + t95 * t162 - t36 * t491 + t439 * t52 + t484 * t78, -t36 * t160 + t89 * t330 - t37 * t162 + t88 * t78 + t344 * t154 + (qJD(5) * t343 - t14 * t296 - t15 * t300) * t210 + t416, t14 * t89 + t71 * t36 + t15 * t88 + t70 * t37 - t52 * t484 + t111 * t95 - g(1) * (t303 * t350 + t336) - g(2) * (t298 * t350 + t329) -t141 * t27 + t339 * t45, t139 * t27 + t141 * t319 + t339 * t47 + t45 * t98, t108 * t141 - t155 * t339 - t184 * t45 - t208 * t27, -t139 * t319 + t47 * t98, -t108 * t139 - t155 * t98 - t184 * t47 + t208 * t319, t108 * t208 + t155 * t184, -g(1) * t175 - g(2) * t173 + t108 * t38 - t120 * t319 + t139 * t35 + t155 * t20 + t184 * t7 + t208 * t4 + t47 * t84 + t65 * t98, g(1) * t174 - g(2) * t172 - t108 * t39 - t120 * t27 + t141 * t35 - t155 * t21 - t184 * t6 - t208 * t3 - t339 * t65 - t45 * t84, -t139 * t3 - t141 * t4 + t20 * t45 - t21 * t47 + t27 * t38 + t319 * t39 + t339 * t7 - t6 * t98 + t416, t3 * t39 + t21 * t6 + t4 * t38 + t20 * t7 + t35 * t120 + t84 * t65 - g(1) * (t279 + t485) - g(2) * t384 + (-g(1) * t337 - g(2) * (-t305 + t473)) * t303 + (-g(1) * (-pkin(1) - t473) - g(2) * t337) * t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t308, t502 + t362, 0, 0, 0, 0, 0, 0, t297 * t410 + t273, t302 * t410 - t397, -t365, t368 + t502, 0, 0, 0, 0, 0, 0, -qJD(1) * t196 + t418, -qJD(1) * t199 + t340, -t341 - t479, -t315 - t409, 0, 0, 0, 0, 0, 0, -t208 * t429 + t154 * t160 + t210 * t330 + (-t296 * t155 - t300 * t361) * t491, -t208 * t423 + t154 * t162 + t210 * t78 + (-t300 * t155 + t296 * t361) * t491 (t448 - t450) * t155 + t338 * qJD(1) + t309 * t208, -qJD(1) * t344 + t111 * t154 - t155 * t343 + t208 * t316 - t52 * t210 - t413, 0, 0, 0, 0, 0, 0, -t138 * t108 + t154 * t98 - t184 * t457 + t210 * t319, -t140 * t108 - t154 * t339 + t184 * t456 + t210 * t27, -t138 * t27 + t140 * t319 - t339 * t457 + t456 * t98, -t4 * t138 + t3 * t140 + t84 * t154 - t20 * t457 - t21 * t456 - t35 * t210 - t413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387, -t412 * t308, t395, -t387, -t396, qJDD(3), t302 * t502 + t214 + t470, g(3) * t302 + (-t242 - t502) * t297, 0, 0, t441, t114, t90, -t441, t91, t285, t128 * t286 + (-t196 * t407 + t285 * t301 - t286 * t377) * pkin(3) + t317, t129 * t286 + (-t199 * t407 - t285 * t477 - t286 * t404) * pkin(3) + t320 (t119 - t128) * t199 + (-t118 + t129) * t196 + (-t477 * t110 - t301 * t322 + (-t301 * t196 + t199 * t477) * qJD(4)) * pkin(3), t118 * t128 - t119 * t129 + (-t477 * t359 + t470 - t301 * t358 + (-t118 * t477 + t119 * t301) * qJD(4) + (-t413 - t409) * t302) * pkin(3), t40, t16, t43, t41, t42, -t445, t267 * t386 + (-t267 * t285 + t357) * t300 + t342 * t296 + t333 * t160 + (-t265 * t402 + t507) * t491 + t334, -t267 * t78 + t342 * t300 - t331 * t296 + t333 * t162 + (t265 * t403 + t506) * t491 + t335, t80 * t160 + t79 * t162 + (-t160 * t391 - qJD(5) * t70 + (qJD(5) * t162 + t330) * t265) * t300 + (t162 * t391 - t265 * t78 - t15 + (t160 * t265 - t71) * qJD(5)) * t296 + t332, t52 * t267 - t71 * t80 - t70 * t79 - t111 * t128 - g(1) * (t256 + t417) - g(3) * (-t280 - t350) - (-pkin(4) * t277 - pkin(9) * t275) * t283 + (t302 * t283 + (t111 * t477 - t301 * t343) * qJD(4)) * pkin(3) + t316 * t265, t11, t5, t25, t12, t26, -t446, t108 * t145 + t184 * t464 - t224 * t319 + t455 * t98 + t313, -t108 * t146 - t184 * t465 - t224 * t27 - t339 * t455 + t311, t145 * t27 + t146 * t319 + t339 * t464 - t465 * t98 + t318, t3 * t146 + t4 * t145 + t35 * t224 - g(1) * (t256 + t347) - g(2) * (t223 + (-t266 * t277 - t475) * t303) - g(3) * (-t280 - t337) + t455 * t84 + t465 * t21 + t464 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t441, t114, t90, -t441, t91, t285, t119 * t286 + t317, t118 * t286 + t320, 0, 0, t40, t16, t43, t41, t42, -t445, -pkin(4) * t386 - t81 * t491 - t119 * t160 + t345 * t296 + (t357 - t390 + t468) * t300 + t334, pkin(4) * t78 - t119 * t162 + t82 * t491 + t345 * t300 + (-t331 + t390) * t296 + t335, pkin(9) * t309 + t82 * t160 + t81 * t162 + t321 + t332, -t71 * t82 - t70 * t81 - t111 * t119 - g(1) * t417 - g(3) * t260 + (t331 - t52) * pkin(4) + (t316 + t238) * pkin(9), t11, t5, t25, t12, t26, -t446, t108 * t163 + t184 * t458 + t266 * t319 + t355 * t98 + t313, -t108 * t164 - t184 * t459 + t266 * t27 - t339 * t355 + t311, t163 * t27 + t164 * t319 + t339 * t458 - t459 * t98 + t318, t3 * t164 + t4 * t163 - t35 * t266 - g(1) * t347 - g(2) * (-t266 * t432 + t223) + g(3) * t337 + t355 * t84 + t459 * t21 + t458 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, -t160 ^ 2 + t162 ^ 2, -t78 + t505, -t449, t330 + t504, t109, -t112 * t402 - t111 * t162 + t71 * t491 + t59 + (-qJD(5) * t123 + t262 - t51) * t296 + t481, g(1) * t188 - g(2) * t190 + t111 * t160 + t277 * t469 + t491 * t70 - t14, 0, 0, -t463, t490, t489, t463, t486, t108, -t23 * t184 + (t108 * t299 - t162 * t98 - t184 * t401) * pkin(5) + t487, t24 * t184 + (-t108 * t295 + t162 * t339 - t184 * t400) * pkin(5) + t488, -t20 * t98 - t23 * t339 - t21 * t339 + t24 * t98 + (t27 * t299 + t319 * t295 + (-t295 * t339 - t299 * t98) * qJD(6)) * pkin(5), -t20 * t23 - t21 * t24 + (t3 * t295 + t4 * t299 - t84 * t162 + t296 * t262 + (-t20 * t295 + t21 * t299) * qJD(6) + t481) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t463, t490, t489, t463, t486, t108, t21 * t184 + t487, t20 * t184 + t488, 0, 0;];
tau_reg  = t1;
