% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x34]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:22
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR8_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:21:23
% EndTime: 2019-03-09 07:21:28
% DurationCPUTime: 2.12s
% Computational Cost: add. (2533->219), mult. (5521->358), div. (0->0), fcn. (5306->8), ass. (0->158)
t121 = sin(qJ(3));
t124 = cos(qJ(3));
t198 = sin(qJ(4));
t152 = qJD(4) * t198;
t205 = -qJD(3) * t198 - t152;
t199 = cos(qJ(4));
t150 = t199 * qJD(4);
t206 = t199 * qJD(3) + t150;
t63 = t205 * t121 + t124 * t206;
t120 = sin(qJ(5));
t122 = cos(qJ(6));
t119 = sin(qJ(6));
t123 = cos(qJ(5));
t173 = t119 * t123;
t86 = t120 * t122 + t173;
t193 = t63 * t86;
t204 = qJD(5) + qJD(6);
t83 = t119 * t120 - t122 * t123;
t60 = t204 * t83;
t85 = t199 * t121 + t198 * t124;
t22 = -t60 * t85 + t193;
t118 = t123 ^ 2;
t171 = t120 ^ 2 - t118;
t146 = qJD(5) * t171;
t84 = t198 * t121 - t199 * t124;
t81 = t84 ^ 2;
t203 = 2 * qJD(2);
t202 = -pkin(9) - pkin(10);
t201 = pkin(5) * t63;
t200 = pkin(5) * t85;
t197 = pkin(5) * t122;
t114 = qJD(5) * t123;
t62 = -t121 * t206 + t205 * t124;
t178 = t120 * t62;
t41 = t84 * t114 - t178;
t170 = qJD(5) * t120;
t167 = t124 * qJD(3);
t100 = pkin(3) * t167 + qJD(2);
t32 = pkin(4) * t63 - pkin(9) * t62 + t100;
t168 = t121 * qJD(3);
t125 = -pkin(1) - pkin(7);
t190 = pkin(8) - t125;
t142 = t190 * t168;
t92 = t190 * t124;
t143 = qJD(3) * t92;
t91 = t190 * t121;
t35 = -t198 * t142 + t199 * t143 + t92 * t150 - t91 * t152;
t107 = t121 * pkin(3) + qJ(2);
t55 = pkin(4) * t85 + pkin(9) * t84 + t107;
t65 = -t198 * t92 - t199 * t91;
t8 = -t55 * t114 - t120 * t32 + t123 * t35 + t65 * t170;
t6 = t41 * pkin(10) - t8;
t196 = t122 * t6;
t195 = t123 * pkin(5);
t194 = t63 * t83;
t192 = t84 * t62;
t191 = t85 * t63;
t110 = t198 * pkin(3) + pkin(9);
t189 = -pkin(10) - t110;
t36 = t65 * qJD(4) - t199 * t142 - t198 * t143;
t16 = -t41 * pkin(5) + t36;
t177 = t120 * t84;
t64 = -t198 * t91 + t199 * t92;
t43 = -pkin(5) * t177 + t64;
t61 = t204 * t86;
t188 = t16 * t83 + t43 * t61;
t187 = t16 * t86 - t43 * t60;
t57 = t64 * t114;
t186 = t36 * t120 + t57;
t59 = t123 * t65;
t185 = t120 * t55 + t59;
t144 = pkin(3) * t152;
t164 = pkin(5) * t170;
t90 = t144 + t164;
t111 = -t199 * pkin(3) - pkin(4);
t95 = t111 - t195;
t184 = t95 * t61 + t90 * t83;
t183 = -t95 * t60 + t90 * t86;
t112 = -pkin(4) - t195;
t182 = t112 * t61 + t83 * t164;
t181 = -t112 * t60 + t86 * t164;
t180 = t111 * t114 + t120 * t144;
t26 = pkin(10) * t177 + t185;
t179 = t119 * t26;
t176 = t122 * t26;
t175 = t123 * t62;
t174 = t123 * t84;
t172 = t120 * t123;
t169 = qJD(6) * t119;
t166 = pkin(4) * t170;
t165 = pkin(4) * t114;
t163 = pkin(5) * t169;
t162 = qJD(6) * t197;
t161 = t85 ^ 2 + t81;
t160 = t84 * t170;
t159 = t85 * t170;
t158 = t85 * t114;
t56 = t64 * t170;
t52 = t123 * t55;
t17 = pkin(10) * t174 - t120 * t65 + t200 + t52;
t157 = -t17 - t200;
t149 = t120 * t35 + t123 * t32;
t5 = -pkin(10) * t175 + t201 + (-t59 + (-pkin(10) * t84 - t55) * t120) * qJD(5) + t149;
t156 = -t119 * t6 + t122 * t5;
t155 = qJD(5) * t202;
t154 = t120 * t114;
t148 = qJD(5) * t189;
t147 = 0.4e1 * t84 * t172;
t145 = pkin(3) * t150;
t141 = -t36 * t84 + t64 * t62;
t140 = t61 * t84 - t62 * t83;
t23 = -t61 * t85 - t194;
t139 = t62 * t85 - t63 * t84;
t138 = t110 * t85 + t111 * t84;
t137 = -t122 * t17 + t179;
t136 = t119 * t17 + t176;
t78 = t189 * t120;
t116 = t123 * pkin(10);
t79 = t110 * t123 + t116;
t135 = t119 * t79 - t122 * t78;
t134 = t119 * t78 + t122 * t79;
t96 = t202 * t120;
t97 = pkin(9) * t123 + t116;
t133 = t119 * t97 - t122 * t96;
t132 = t119 * t96 + t122 * t97;
t131 = t120 * t145;
t130 = t123 * t145;
t42 = t160 + t175;
t39 = -t123 * t63 + t159;
t129 = t111 * t170 - t123 * t144;
t127 = -0.2e1 * t191 + 0.2e1 * t192;
t126 = -t110 * t63 + t111 * t62 + (-t198 * t84 - t199 * t85) * qJD(4) * pkin(3);
t99 = 0.2e1 * t154;
t89 = t123 * t155;
t88 = t120 * t155;
t82 = -0.2e1 * t146;
t69 = t123 * t148 - t131;
t68 = t120 * t148 + t130;
t50 = t83 * t84;
t49 = t86 * t84;
t45 = -0.2e1 * t86 * t60;
t44 = 0.2e1 * t191;
t40 = t120 * t63 + t158;
t38 = -t132 * qJD(6) - t119 * t88 + t122 * t89;
t37 = t133 * qJD(6) - t119 * t89 - t122 * t88;
t31 = t84 * t146 + t62 * t172;
t25 = -t60 * t84 - t62 * t86;
t21 = qJD(5) * t147 - t171 * t62;
t20 = 0.2e1 * t60 * t83 - 0.2e1 * t61 * t86;
t19 = -t134 * qJD(6) - t119 * t68 + t122 * t69;
t18 = t135 * qJD(6) - t119 * t69 - t122 * t68;
t13 = t62 * t173 + t119 * t160 + t169 * t177 + (-t174 * t204 + t178) * t122;
t9 = -t185 * qJD(5) + t149;
t7 = t140 * t86 - t50 * t60;
t3 = -t13 * t86 - t140 * t83 - t49 * t60 - t50 * t61;
t2 = -t136 * qJD(6) + t156;
t1 = t137 * qJD(6) - t119 * t5 - t196;
t4 = [0, 0, 0, 0, t203, qJ(2) * t203, -0.2e1 * t121 * t167, 0.2e1 * (t121 ^ 2 - t124 ^ 2) * qJD(3), 0, 0, 0, 0.2e1 * qJ(2) * t167 + 0.2e1 * qJD(2) * t121, -0.2e1 * qJ(2) * t168 + 0.2e1 * qJD(2) * t124, -0.2e1 * t192, -0.2e1 * t139, 0, 0, 0, 0.2e1 * t100 * t85 + 0.2e1 * t107 * t63, -0.2e1 * t100 * t84 + 0.2e1 * t107 * t62, -0.2e1 * t118 * t192 - 0.2e1 * t81 * t154, 0.2e1 * t81 * t146 + t62 * t147, 0.2e1 * t139 * t123 + 0.2e1 * t84 * t159, -0.2e1 * t139 * t120 + 0.2e1 * t84 * t158, t44, -0.2e1 * t84 * t57 + 0.2e1 * t52 * t63 + 0.2e1 * t9 * t85 + 0.2e1 * (-t65 * t63 + t141) * t120, 0.2e1 * t141 * t123 - 0.2e1 * t185 * t63 + 0.2e1 * t84 * t56 + 0.2e1 * t8 * t85, 0.2e1 * t50 * t140, -0.2e1 * t13 * t50 + 0.2e1 * t140 * t49, 0.2e1 * t140 * t85 + 0.2e1 * t50 * t63, -0.2e1 * t13 * t85 + 0.2e1 * t49 * t63, t44, 0.2e1 * t43 * t13 - 0.2e1 * t137 * t63 - 0.2e1 * t16 * t49 + 0.2e1 * t2 * t85, 0.2e1 * t1 * t85 - 0.2e1 * t136 * t63 + 0.2e1 * t140 * t43 + 0.2e1 * t16 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t161 * t114 + t120 * t127, t123 * t127 + t161 * t170, 0, 0, 0, 0, 0, t84 * t13 + t62 * t49 + (-t22 - t193) * t85, t84 * t140 - t62 * t50 + (-t23 + t194) * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t167, 0, -t125 * t168, -t125 * t167, 0, 0, t62, -t63, 0, -t36, t35, t31, t21, t40, -t39, 0, t56 + (-t138 * qJD(5) - t36) * t123 + t126 * t120, t126 * t123 + t138 * t170 + t186, t7, t3, t22, t23, 0, t95 * t13 - t135 * t63 + t19 * t85 - t90 * t49 + t188, -t134 * t63 + t140 * t95 + t18 * t85 + t90 * t50 + t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t167, 0, 0, 0, 0, 0, t62, -t63, 0, 0, 0, 0, 0, t42, t41, 0, 0, 0, 0, 0, t140, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t144, -0.2e1 * t145, t99, t82, 0, 0, 0, 0.2e1 * t129, 0.2e1 * t180, t45, t20, 0, 0, 0, 0.2e1 * t184, 0.2e1 * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t63, 0, -t36, t35, t31, t21, t40, -t39, 0, t56 + (-pkin(4) * t62 - pkin(9) * t63) * t120 + (-t36 + (pkin(4) * t84 - pkin(9) * t85) * qJD(5)) * t123, -t42 * pkin(4) + t39 * pkin(9) + t186, t7, t3, t22, t23, 0, t112 * t13 - t133 * t63 - t49 * t164 + t38 * t85 + t188, t112 * t140 - t132 * t63 + t50 * t164 + t37 * t85 + t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t63, 0, 0, 0, 0, 0, t42, t41, 0, 0, 0, 0, 0, t140, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144, -t145, t99, t82, 0, 0, 0, t129 - t166, -t165 + t180, t45, t20, 0, 0, 0, t182 + t184, t181 + t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t82, 0, 0, 0, -0.2e1 * t166, -0.2e1 * t165, t45, t20, 0, 0, 0, 0.2e1 * t182, 0.2e1 * t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t41, t63, t9, t8, 0, 0, t140, -t13, t63, t63 * t197 + (t157 * t119 - t176) * qJD(6) + t156, -t196 + (-t5 - t201) * t119 + (t157 * t122 + t179) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, t39, 0, 0, 0, 0, 0, -t22, -t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, -t170, 0, -t110 * t114 - t131, t110 * t170 - t130, 0, 0, -t60, -t61, 0, t19, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, -t170, 0, -pkin(9) * t114, pkin(9) * t170, 0, 0, -t60, -t61, 0, t38, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t163, -0.2e1 * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, -t13, t63, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t61, 0, t19, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t61, 0, t38, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
