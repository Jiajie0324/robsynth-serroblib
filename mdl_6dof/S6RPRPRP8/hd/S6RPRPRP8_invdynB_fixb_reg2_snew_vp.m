% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 18:03
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:02:32
% EndTime: 2019-05-05 18:02:56
% DurationCPUTime: 23.08s
% Computational Cost: add. (45394->639), mult. (100059->875), div. (0->0), fcn. (67464->8), ass. (0->447)
t784 = sin(pkin(9));
t785 = cos(pkin(9));
t788 = sin(qJ(3));
t791 = cos(qJ(3));
t853 = qJD(1) * t791;
t749 = -qJD(1) * t784 * t788 + t785 * t853;
t787 = sin(qJ(5));
t790 = cos(qJ(5));
t718 = qJD(3) * t787 + t749 * t790;
t843 = qJD(1) * qJD(3);
t828 = t791 * t843;
t841 = qJDD(1) * t788;
t755 = -t828 - t841;
t829 = t788 * t843;
t839 = qJDD(1) * t791;
t756 = -t829 + t839;
t704 = t755 * t784 + t756 * t785;
t825 = -t790 * qJDD(3) + t787 * t704;
t747 = (t784 * t791 + t785 * t788) * qJD(1);
t739 = qJD(5) + t747;
t844 = qJD(5) + t739;
t603 = t718 * t844 + t825;
t716 = -t790 * qJD(3) + t749 * t787;
t809 = -t787 * qJDD(3) - t790 * t704;
t800 = qJD(5) * t716 + t809;
t872 = t716 * t739;
t911 = -t872 - t800;
t885 = t911 * t787;
t532 = -t603 * t790 - t885;
t715 = t718 ^ 2;
t900 = t716 ^ 2;
t665 = t715 - t900;
t503 = t532 * t784 - t665 * t785;
t505 = t532 * t785 + t665 * t784;
t459 = t503 * t791 + t505 * t788;
t528 = -t603 * t787 + t790 * t911;
t789 = sin(qJ(1));
t792 = cos(qJ(1));
t1004 = t459 * t789 + t528 * t792;
t1003 = t459 * t792 - t528 * t789;
t899 = t739 ^ 2;
t678 = t900 - t899;
t669 = t718 * t716;
t824 = -t785 * t755 + t756 * t784;
t701 = qJDD(5) + t824;
t913 = t669 + t701;
t882 = t913 * t787;
t580 = t678 * t790 - t882;
t604 = (qJD(5) - t739) * t718 + t825;
t521 = t580 * t784 + t604 * t785;
t525 = t580 * t785 - t604 * t784;
t478 = t521 * t791 + t525 * t788;
t881 = t913 * t790;
t576 = t678 * t787 + t881;
t1002 = t478 * t789 + t576 * t792;
t1001 = t478 * t792 - t576 * t789;
t910 = -t872 + t800;
t938 = -t604 * t787 + t910 * t790;
t912 = t715 + t900;
t937 = -t604 * t790 - t910 * t787;
t956 = -t784 * t912 + t785 * t937;
t958 = t784 * t937 + t785 * t912;
t971 = t788 * t956 + t791 * t958;
t993 = t789 * t938 - t792 * t971;
t1000 = pkin(6) * t993;
t995 = t789 * t971 + t792 * t938;
t999 = pkin(6) * t995;
t998 = t503 * t788 - t505 * t791;
t997 = t521 * t788 - t525 * t791;
t679 = -t715 + t899;
t914 = -t669 + t701;
t880 = t914 * t787;
t941 = t790 * t679 + t880;
t879 = t914 * t790;
t940 = -t679 * t787 + t879;
t955 = -t784 * t910 + t785 * t940;
t957 = t784 * t940 + t785 * t910;
t973 = -t788 * t955 - t791 * t957;
t996 = -t789 * t973 + t792 * t941;
t994 = t789 * t941 + t792 * t973;
t898 = pkin(7) + pkin(1);
t992 = qJ(2) * t938 - t898 * t971;
t972 = -t788 * t958 + t791 * t956;
t991 = pkin(2) * t938 - t898 * t972;
t990 = pkin(2) * t971 + pkin(3) * t958 + pkin(4) * t912 + pkin(8) * t937 - qJ(2) * t972;
t641 = t899 + t715;
t560 = t641 * t790 + t882;
t989 = pkin(2) * t560;
t988 = pkin(3) * t560;
t987 = pkin(4) * t560;
t986 = pkin(8) * t560;
t567 = t641 * t787 - t881;
t985 = pkin(8) * t567;
t984 = qJ(2) * t560;
t983 = qJ(4) * t956;
t982 = qJ(4) * t958;
t981 = t560 * t789;
t980 = t560 * t792;
t979 = t567 * t784;
t978 = t567 * t785;
t974 = -t788 * t957 + t791 * t955;
t969 = pkin(8) * t938;
t868 = t749 * t747;
t939 = qJDD(3) - t868;
t965 = t784 * t939;
t964 = t785 * t939;
t909 = -t899 - t900;
t924 = t787 * t909 + t879;
t954 = pkin(2) * t924;
t953 = pkin(3) * t924;
t952 = pkin(4) * t924;
t923 = t790 * t909 - t880;
t951 = pkin(8) * t923;
t950 = pkin(8) * t924;
t949 = qJ(2) * t924;
t948 = qJ(6) * t911;
t945 = t784 * t923;
t944 = t785 * t923;
t943 = t789 * t924;
t942 = t792 * t924;
t852 = qJD(3) * t747;
t673 = t704 - t852;
t644 = -qJD(5) * t718 - t825;
t870 = t739 * t787;
t814 = t790 * t644 + t716 * t870;
t869 = t739 * t790;
t834 = t716 * t869;
t805 = -t644 * t787 + t834;
t836 = t784 * t669;
t905 = t785 * t805 - t836;
t835 = t785 * t669;
t906 = t784 * t805 + t835;
t919 = -t788 * t905 - t791 * t906;
t936 = -t789 * t919 + t792 * t814;
t802 = (-t716 * t787 - t718 * t790) * t739;
t676 = t718 * t870;
t813 = t676 - t834;
t904 = t701 * t784 + t785 * t813;
t907 = -t785 * t701 + t784 * t813;
t921 = -t788 * t904 - t791 * t907;
t935 = -t789 * t921 + t792 * t802;
t934 = t789 * t814 + t792 * t919;
t933 = t789 * t802 + t792 * t921;
t932 = 2 * qJD(6);
t851 = qJD(3) * t749;
t670 = t824 + t851;
t601 = t718 * t869 - t787 * t800;
t602 = -t790 * t800 - t676;
t815 = t785 * t602 + t836;
t816 = t784 * t602 - t835;
t901 = -t788 * t815 - t791 * t816;
t926 = t789 * t601 + t792 * t901;
t925 = t792 * t601 - t789 * t901;
t922 = -t788 * t907 + t791 * t904;
t920 = -t788 * t906 + t791 * t905;
t794 = qJD(1) ^ 2;
t765 = t789 * g(1) - t792 * g(2);
t812 = qJDD(2) - t765;
t801 = -t794 * qJ(2) + t812;
t798 = -qJDD(1) * t898 + t801;
t707 = -t791 * g(3) + t788 * t798;
t806 = qJD(3) * pkin(3) - qJ(4) * t853;
t781 = t788 ^ 2;
t861 = t781 * t794;
t658 = -pkin(3) * t861 + t755 * qJ(4) - qJD(3) * t806 + t707;
t797 = t791 * t798;
t857 = t791 * t794;
t795 = t797 - t756 * qJ(4) + qJDD(3) * pkin(3) + (-pkin(3) * t857 - qJ(4) * t843 + g(3)) * t788;
t571 = -0.2e1 * qJD(4) * t747 + t785 * t658 + t784 * t795;
t693 = pkin(4) * t747 - pkin(8) * t749;
t793 = qJD(3) ^ 2;
t542 = -pkin(4) * t793 + qJDD(3) * pkin(8) - t693 * t747 + t571;
t842 = qJD(2) * qJD(1);
t778 = 0.2e1 * t842;
t766 = t792 * g(1) + t789 * g(2);
t780 = qJDD(1) * qJ(2);
t808 = t766 - t780;
t903 = -t755 * pkin(3) - (qJ(4) * t781 + t898) * t794 + t806 * t853 + qJDD(4) - t808;
t559 = t670 * pkin(4) - pkin(8) * t673 + t778 + t903;
t488 = t790 * t542 + t787 * t559;
t664 = pkin(5) * t716 - qJ(6) * t718;
t811 = t701 * qJ(6) - t716 * t664 + t739 * t932 + t488;
t908 = -t644 * pkin(5) - t948;
t902 = -t788 * t816 + t791 * t815;
t745 = t747 ^ 2;
t746 = t749 ^ 2;
t897 = pkin(4) * t784;
t896 = pkin(5) * t790;
t895 = qJ(6) * t790;
t894 = qJDD(1) * pkin(1);
t826 = t784 * t658 - t785 * t795;
t847 = qJD(4) * t749;
t570 = t826 + 0.2e1 * t847;
t500 = -t570 * t785 + t571 * t784;
t893 = t500 * t788;
t892 = t500 * t791;
t807 = -qJDD(3) * pkin(4) - t793 * pkin(8) + t826;
t541 = (0.2e1 * qJD(4) + t693) * t749 + t807;
t891 = t541 * t787;
t890 = t541 * t790;
t837 = -0.2e1 * t842;
t659 = t837 - t903;
t878 = t659 * t784;
t877 = t659 * t785;
t697 = qJDD(3) + t868;
t875 = t697 * t784;
t874 = t697 * t785;
t871 = t739 * t718;
t782 = t791 ^ 2;
t854 = t781 + t782;
t758 = t854 * qJDD(1);
t867 = t758 * t789;
t866 = t758 * t792;
t831 = t788 * t857;
t763 = qJDD(3) + t831;
t865 = t763 * t788;
t864 = t763 * t791;
t764 = qJDD(3) - t831;
t863 = t764 * t788;
t862 = t764 * t791;
t860 = t782 * t794;
t727 = t794 * t898 + t808 + t837;
t859 = t788 * t727;
t858 = t791 * t727;
t487 = t787 * t542 - t790 * t559;
t856 = t912 - t899;
t850 = qJD(3) * t784;
t849 = qJD(3) * t785;
t840 = qJDD(1) * t789;
t838 = qJDD(1) * t792;
t833 = t789 * t868;
t832 = t792 * t868;
t830 = -pkin(4) * t785 - pkin(3);
t827 = -qJ(6) * t787 - pkin(4);
t438 = t487 * t787 + t790 * t488;
t501 = t570 * t784 + t785 * t571;
t734 = -t794 * pkin(1) + t778 - t808;
t740 = -t801 + t894;
t684 = t792 * t734 - t740 * t789;
t712 = -t765 * t789 - t792 * t766;
t823 = t789 * t831;
t822 = t792 * t831;
t819 = t718 * t664 + qJDD(6) + t487;
t759 = -t789 * t794 + t838;
t818 = pkin(6) * t759 + g(3) * t789;
t760 = t792 * t794 + t840;
t817 = -pkin(6) * t760 + g(3) * t792;
t437 = -t487 * t790 + t488 * t787;
t706 = t788 * g(3) + t797;
t647 = t791 * t706 + t788 * t707;
t648 = -t706 * t788 + t707 * t791;
t681 = t734 * t789 + t740 * t792;
t711 = t765 * t792 - t766 * t789;
t804 = -t824 + t851;
t803 = -t701 * pkin(5) + t819;
t736 = -0.2e1 * t847;
t796 = -t749 * t693 + t718 * t932 + t736 - t807 - t908;
t775 = t792 * qJDD(3);
t773 = t789 * qJDD(3);
t771 = -t793 - t860;
t770 = t793 - t860;
t769 = -t793 - t861;
t768 = -t793 + t861;
t762 = (-t781 + t782) * t794;
t761 = t854 * t794;
t757 = -0.2e1 * t829 + t839;
t754 = 0.2e1 * t828 + t841;
t752 = t854 * t843;
t733 = -t746 - t793;
t732 = -t746 + t793;
t731 = t745 - t793;
t729 = -t756 * t788 - t782 * t843;
t728 = -t755 * t791 - t781 * t843;
t724 = -t771 * t788 - t864;
t723 = t769 * t791 - t863;
t722 = t771 * t791 - t865;
t721 = -t770 * t791 - t863;
t720 = t769 * t788 + t862;
t719 = -t768 * t788 - t864;
t709 = -t761 * t792 - t867;
t708 = -t761 * t789 + t866;
t705 = t754 * t788 - t757 * t791;
t700 = t746 - t745;
t694 = -t793 - t745;
t688 = (-t747 * t785 + t749 * t784) * qJD(3);
t687 = (-t747 * t784 - t749 * t785) * qJD(3);
t686 = t722 * t789 + t757 * t792;
t685 = t720 * t789 + t754 * t792;
t683 = -t722 * t792 + t757 * t789;
t682 = -t720 * t792 + t754 * t789;
t674 = t704 + t852;
t667 = -t745 - t746;
t663 = t704 * t785 - t749 * t850;
t662 = t704 * t784 + t749 * t849;
t661 = t747 * t849 + t784 * t824;
t660 = t747 * t850 - t785 * t824;
t655 = -t733 * t784 - t874;
t654 = -t732 * t784 + t964;
t653 = t731 * t785 - t875;
t652 = t733 * t785 - t875;
t651 = t732 * t785 + t965;
t650 = t731 * t784 + t874;
t638 = -pkin(2) * t761 - t648;
t635 = t694 * t785 - t965;
t634 = t694 * t784 + t964;
t631 = pkin(2) * t722 - qJ(2) * t724 - t707;
t630 = pkin(2) * t720 - qJ(2) * t723 + t706;
t624 = pkin(2) * t754 - t723 * t898 - t858;
t623 = pkin(2) * t757 - t724 * t898 + t859;
t618 = -t687 * t791 - t688 * t788;
t617 = t647 * t789 - t727 * t792;
t616 = -t647 * t792 - t727 * t789;
t615 = t674 * t784 + t785 * t804;
t614 = -t670 * t785 - t673 * t784;
t613 = -t674 * t785 + t784 * t804;
t612 = -t670 * t784 + t673 * t785;
t611 = t716 * t844 + t809;
t605 = -t644 + t871;
t592 = -t662 * t791 - t663 * t788;
t591 = -t660 * t791 - t661 * t788;
t590 = -qJ(4) * t652 - t877;
t589 = pkin(2) * t647 - qJ(2) * t648;
t588 = -t652 * t788 + t655 * t791;
t587 = t652 * t791 + t655 * t788;
t586 = -t651 * t791 - t654 * t788;
t585 = -t650 * t791 - t653 * t788;
t572 = -qJ(4) * t634 - t878;
t564 = -pkin(2) * t727 - t648 * t898;
t556 = -t634 * t788 + t635 * t791;
t555 = t634 * t791 + t635 * t788;
t546 = -pkin(3) * t673 + qJ(4) * t655 - t878;
t545 = t587 * t789 + t673 * t792;
t544 = -t587 * t792 + t673 * t789;
t543 = -pkin(3) * t670 + qJ(4) * t635 + t877;
t538 = t555 * t789 + t670 * t792;
t537 = -t613 * t788 + t615 * t791;
t536 = -t555 * t792 + t670 * t789;
t535 = t613 * t791 + t615 * t788;
t534 = -t612 * t791 - t614 * t788;
t517 = t605 * t784 + t944;
t516 = -t611 * t784 + t978;
t515 = -t605 * t785 + t945;
t514 = t611 * t785 + t979;
t511 = t603 * t784 + t944;
t510 = -t784 * t911 - t978;
t509 = -t603 * t785 + t945;
t508 = t785 * t911 - t979;
t507 = t535 * t789 + t667 * t792;
t506 = -t535 * t792 + t667 * t789;
t491 = pkin(3) * t659 + qJ(4) * t501;
t490 = t890 + t986;
t489 = t891 - t950;
t485 = -qJ(4) * t613 - t500;
t484 = -pkin(4) * t938 - pkin(5) * t910 + qJ(6) * t604;
t483 = (pkin(5) * t739 - (2 * qJD(6))) * t718 + t541 + t908;
t482 = -pkin(3) * t667 + qJ(4) * t615 + t501;
t481 = pkin(2) * t587 + pkin(3) * t652 - qJ(2) * t588 - t571;
t480 = qJ(6) * t899 - t803;
t475 = -pkin(5) * t899 + t811;
t474 = t488 + t987;
t473 = t487 - t952;
t472 = -t515 * t788 + t517 * t791;
t471 = -t514 * t788 + t516 * t791;
t470 = t515 * t791 + t517 * t788;
t469 = t514 * t791 + t516 * t788;
t468 = pkin(2) * t535 + pkin(3) * t613 - qJ(2) * t537;
t467 = pkin(2) * t555 + pkin(3) * t634 - qJ(2) * t556 + t736 - t826;
t466 = -t509 * t788 + t511 * t791;
t465 = -t508 * t788 + t510 * t791;
t464 = t509 * t791 + t511 * t788;
t463 = t508 * t791 + t510 * t788;
t462 = (-t605 - t871) * pkin(5) + t796;
t461 = -pkin(5) * t871 + t796 + t948;
t458 = qJ(6) * t856 + t803;
t457 = pkin(5) * t856 + t811;
t456 = t501 * t791 - t893;
t455 = t501 * t788 + t892;
t454 = pkin(2) * t673 - t791 * t546 - t588 * t898 - t788 * t590;
t449 = t455 * t789 - t659 * t792;
t448 = -t455 * t792 - t659 * t789;
t447 = t470 * t789 + t942;
t446 = t469 * t789 - t980;
t445 = -t470 * t792 + t943;
t444 = -t469 * t792 - t981;
t443 = pkin(2) * t670 - t791 * t543 - t556 * t898 - t788 * t572;
t442 = t464 * t789 + t942;
t441 = t463 * t789 + t980;
t440 = -t464 * t792 + t943;
t439 = -t463 * t792 + t981;
t436 = -t952 + (-t909 - t899) * qJ(6) + (-t914 - t701) * pkin(5) + t819;
t435 = -t462 * t787 - t605 * t895 - t950;
t434 = -t987 - qJ(6) * t913 + (-t641 + t899) * pkin(5) - t811;
t433 = -pkin(5) * t885 + t461 * t790 - t986;
t428 = t438 * t785 + t541 * t784;
t427 = t438 * t784 - t541 * t785;
t426 = -t437 - t969;
t425 = t475 * t790 - t480 * t787;
t424 = t475 * t787 + t480 * t790;
t423 = -qJ(4) * t514 - t474 * t784 + t490 * t785;
t422 = -qJ(4) * t509 - t473 * t784 + t489 * t785;
t421 = qJ(4) * t516 + t474 * t785 + t490 * t784 + t988;
t420 = qJ(4) * t511 + t473 * t785 + t489 * t784 - t953;
t419 = pkin(2) * t667 - t791 * t482 - t788 * t485 - t537 * t898;
t418 = -t457 * t787 + t458 * t790 - t969;
t417 = t425 * t785 + t483 * t784;
t416 = t425 * t784 - t483 * t785;
t415 = pkin(2) * t455 + pkin(3) * t500 - qJ(2) * t456;
t414 = t426 * t785 + t897 * t938 - t982;
t413 = t784 * t426 + t830 * t938 + t983;
t412 = pkin(2) * t469 + pkin(3) * t514 + pkin(4) * t611 - qJ(2) * t471 + t891 + t985;
t411 = pkin(2) * t464 + pkin(3) * t509 - pkin(4) * t603 - qJ(2) * t466 - t890 + t951;
t410 = -qJ(4) * t515 + t435 * t785 - t436 * t784;
t409 = -t427 * t788 + t428 * t791;
t408 = t427 * t791 + t428 * t788;
t407 = -pkin(2) * t659 + qJ(4) * t893 - t456 * t898 - t791 * t491;
t406 = -pkin(8) * t424 + (pkin(5) * t787 - t895) * t483;
t405 = -qJ(4) * t508 + t433 * t785 - t434 * t784;
t404 = -pkin(4) * t424 - pkin(5) * t480 - qJ(6) * t475;
t403 = qJ(4) * t517 + t435 * t784 + t436 * t785 - t953;
t402 = qJ(4) * t510 + t433 * t784 + t434 * t785 - t988;
t401 = t418 * t785 - t484 * t784 - t982;
t400 = pkin(2) * t470 + pkin(3) * t515 - qJ(2) * t472 + t790 * t462 + t605 * t827 + t951;
t399 = pkin(2) * t463 + pkin(3) * t508 - t985 - qJ(2) * t465 + t787 * t461 + (pkin(4) + t896) * t911;
t398 = -pkin(3) * t938 + t418 * t784 + t484 * t785 + t983;
t397 = -qJ(4) * t427 + (-pkin(8) * t785 + t897) * t437;
t396 = t438 + t990;
t395 = t408 * t789 + t437 * t792;
t394 = -t408 * t792 + t437 * t789;
t393 = -t416 * t788 + t417 * t791;
t392 = t416 * t791 + t417 * t788;
t391 = t457 * t790 + t458 * t787 + t990;
t390 = qJ(4) * t428 + (-pkin(8) * t784 + t830) * t437;
t389 = -t791 * t421 - t788 * t423 - t471 * t898 - t989;
t388 = -t791 * t420 - t788 * t422 - t466 * t898 + t954;
t387 = t392 * t789 + t424 * t792;
t386 = -t392 * t792 + t424 * t789;
t385 = -t791 * t413 - t788 * t414 + t991;
t384 = -t791 * t403 - t788 * t410 - t472 * t898 + t954;
t383 = -t791 * t402 - t788 * t405 - t465 * t898 + t989;
t382 = -qJ(4) * t416 - t404 * t784 + t406 * t785;
t381 = pkin(2) * t408 + pkin(3) * t427 - pkin(4) * t541 + pkin(8) * t438 - qJ(2) * t409;
t380 = -t791 * t398 - t788 * t401 + t991;
t379 = -pkin(3) * t424 + qJ(4) * t417 + t404 * t785 + t406 * t784;
t378 = pkin(2) * t392 + pkin(3) * t416 + pkin(8) * t425 - qJ(2) * t393 + (t827 - t896) * t483;
t377 = pkin(2) * t437 - t791 * t390 - t788 * t397 - t409 * t898;
t376 = pkin(2) * t424 - t791 * t379 - t788 * t382 - t393 * t898;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t760, -t759, 0, t712, 0, 0, 0, 0, 0, 0, 0, t760, t759, t684, 0, 0, 0, 0, 0, 0, t685, t686, t709, t617, 0, 0, 0, 0, 0, 0, t538, t545, t507, t449, 0, 0, 0, 0, 0, 0, t442, t446, t995, t395, 0, 0, 0, 0, 0, 0, t447, t995, t441, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t759, -t760, 0, t711, 0, 0, 0, 0, 0, 0, 0, -t759, t760, t681, 0, 0, 0, 0, 0, 0, t682, t683, t708, t616, 0, 0, 0, 0, 0, 0, t536, t544, t506, t448, 0, 0, 0, 0, 0, 0, t440, t444, t993, t394, 0, 0, 0, 0, 0, 0, t445, t993, t439, t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t723, t724, 0, t648, 0, 0, 0, 0, 0, 0, t556, t588, t537, t456, 0, 0, 0, 0, 0, 0, t466, t471, t972, t409, 0, 0, 0, 0, 0, 0, t472, t972, t465, t393; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t759, 0, -t760, 0, -t818, -t817, -t711, -pkin(6) * t711, 0, -t759, t760, 0, 0, 0, -t681, t818, t817, -pkin(6) * t681 + (-pkin(1) * t789 + qJ(2) * t792) * g(3), -t729 * t789 + t822, -t705 * t789 + t762 * t792, -t721 * t789 + t791 * t838, -t728 * t789 - t822, -t719 * t789 - t788 * t838, -t752 * t789 + t775, -pkin(6) * t682 - t624 * t789 + t630 * t792, -pkin(6) * t683 - t623 * t789 + t631 * t792, -pkin(2) * t866 - pkin(6) * t708 - t638 * t789, -pkin(6) * t616 - t564 * t789 + t589 * t792, -t592 * t789 + t832, -t534 * t789 + t700 * t792, -t586 * t789 + t674 * t792, -t591 * t789 - t832, -t585 * t789 + t792 * t804, -t618 * t789 + t775, -pkin(6) * t536 - t443 * t789 + t467 * t792, -pkin(6) * t544 - t454 * t789 + t481 * t792, -pkin(6) * t506 - t419 * t789 + t468 * t792, -pkin(6) * t448 - t407 * t789 + t415 * t792, t925, t1004, t996, t936, t1002, t935, -pkin(6) * t440 - t388 * t789 + t411 * t792, -pkin(6) * t444 - t389 * t789 + t412 * t792, -t385 * t789 + t396 * t792 - t1000, -pkin(6) * t394 - t377 * t789 + t381 * t792, t925, t996, -t1004, t935, -t1002, t936, -pkin(6) * t445 - t384 * t789 + t400 * t792, -t380 * t789 + t391 * t792 - t1000, -pkin(6) * t439 - t383 * t789 + t399 * t792, -pkin(6) * t386 - t376 * t789 + t378 * t792; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t760, 0, t759, 0, t817, -t818, t712, pkin(6) * t712, 0, -t760, -t759, 0, 0, 0, t684, -t817, t818, pkin(6) * t684 + (pkin(1) * t792 + qJ(2) * t789) * g(3), t729 * t792 + t823, t705 * t792 + t762 * t789, t721 * t792 + t789 * t839, t728 * t792 - t823, t719 * t792 - t788 * t840, t752 * t792 + t773, pkin(6) * t685 + t624 * t792 + t630 * t789, pkin(6) * t686 + t623 * t792 + t631 * t789, -pkin(2) * t867 + pkin(6) * t709 + t638 * t792, pkin(6) * t617 + t564 * t792 + t589 * t789, t592 * t792 + t833, t534 * t792 + t700 * t789, t586 * t792 + t674 * t789, t591 * t792 - t833, t585 * t792 + t789 * t804, t618 * t792 + t773, pkin(6) * t538 + t443 * t792 + t467 * t789, pkin(6) * t545 + t454 * t792 + t481 * t789, pkin(6) * t507 + t419 * t792 + t468 * t789, pkin(6) * t449 + t407 * t792 + t415 * t789, t926, -t1003, t994, t934, -t1001, t933, pkin(6) * t442 + t388 * t792 + t411 * t789, pkin(6) * t446 + t389 * t792 + t412 * t789, t385 * t792 + t396 * t789 + t999, pkin(6) * t395 + t377 * t792 + t381 * t789, t926, t994, t1003, t933, t1001, t934, pkin(6) * t447 + t384 * t792 + t400 * t789, t380 * t792 + t391 * t789 + t999, pkin(6) * t441 + t383 * t792 + t399 * t789, pkin(6) * t387 + t376 * t792 + t378 * t789; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t765, t766, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t812 - 0.2e1 * t894, -t766 + t778 + 0.2e1 * t780, pkin(1) * t740 + qJ(2) * t734, (t756 - t829) * t791, -t754 * t791 - t757 * t788, -t770 * t788 + t862, (-t755 + t828) * t788, t768 * t791 - t865, 0, qJ(2) * t754 - t720 * t898 - t859, qJ(2) * t757 - t722 * t898 - t858, -qJ(2) * t761 + t758 * t898 - t647, -qJ(2) * t727 - t647 * t898, -t662 * t788 + t663 * t791, -t612 * t788 + t614 * t791, -t651 * t788 + t654 * t791, -t660 * t788 + t661 * t791, -t650 * t788 + t653 * t791, -t687 * t788 + t688 * t791, qJ(2) * t670 - t788 * t543 - t555 * t898 + t791 * t572, qJ(2) * t673 - t788 * t546 - t587 * t898 + t791 * t590, qJ(2) * t667 - t788 * t482 + t791 * t485 - t535 * t898, -qJ(2) * t659 - qJ(4) * t892 - t455 * t898 - t788 * t491, t902, -t998, t974, t920, -t997, t922, -t788 * t420 + t791 * t422 - t464 * t898 + t949, -t788 * t421 + t791 * t423 - t469 * t898 - t984, -t788 * t413 + t791 * t414 + t992, qJ(2) * t437 - t788 * t390 + t791 * t397 - t408 * t898, t902, t974, t998, t922, t997, t920, -t788 * t403 + t791 * t410 - t470 * t898 + t949, -t788 * t398 + t791 * t401 + t992, -t788 * t402 + t791 * t405 - t463 * t898 + t984, qJ(2) * t424 - t788 * t379 + t791 * t382 - t392 * t898;];
tauB_reg  = t1;
