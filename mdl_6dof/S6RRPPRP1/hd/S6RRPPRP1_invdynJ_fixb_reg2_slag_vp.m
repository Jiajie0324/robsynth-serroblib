% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:27:59
% EndTime: 2019-03-09 08:28:13
% DurationCPUTime: 9.11s
% Computational Cost: add. (12436->606), mult. (29326->733), div. (0->0), fcn. (22306->14), ass. (0->285)
t238 = sin(pkin(9));
t243 = sin(qJ(2));
t245 = cos(qJ(2));
t366 = cos(pkin(9));
t198 = t238 * t245 + t243 * t366;
t182 = t198 * qJD(1);
t237 = sin(pkin(10));
t239 = cos(pkin(10));
t157 = qJD(2) * t237 + t182 * t239;
t242 = sin(qJ(5));
t393 = cos(qJ(5));
t346 = t237 * t182;
t413 = qJD(2) * t239 - t346;
t276 = t393 * t413;
t95 = -t157 * t242 + t276;
t424 = t95 ^ 2;
t315 = t366 * t245;
t216 = qJD(1) * t315;
t333 = qJD(1) * t243;
t179 = t238 * t333 - t216;
t175 = qJD(5) + t179;
t423 = t175 * t95;
t371 = t182 * t95;
t181 = t198 * qJD(2);
t327 = t243 * qJDD(1);
t293 = -qJDD(1) * t315 + t238 * t327;
t143 = qJD(1) * t181 + t293;
t137 = qJDD(5) + t143;
t277 = -t242 * t237 + t393 * t239;
t199 = t237 * t393 + t242 * t239;
t186 = t199 * qJD(5);
t410 = t199 * t179 + t186;
t398 = -t137 * t277 + t175 * t410;
t422 = t371 + t398;
t421 = -t398 + t371;
t414 = t157 * t393 + t242 * t413;
t396 = t414 ^ 2;
t420 = t175 * t414;
t320 = qJD(5) * t393;
t331 = qJD(5) * t242;
t402 = -t237 * t331 + t239 * t320;
t409 = t277 * t179 + t402;
t329 = qJD(1) * qJD(2);
t319 = t243 * t329;
t258 = qJDD(1) * t198 - t238 * t319;
t144 = qJD(2) * t216 + t258;
t116 = qJDD(2) * t237 + t144 * t239;
t130 = t237 * t144;
t310 = qJDD(2) * t239 - t130;
t41 = qJD(5) * t414 + t242 * t116 - t393 * t310;
t308 = -t199 * t41 + t409 * t95;
t40 = -qJD(5) * t276 - t393 * t116 + t157 * t331 - t242 * t310;
t416 = t40 * t277 + t410 * t414;
t419 = t308 - t416;
t418 = t308 + t416;
t298 = t199 * t137 + t175 * t409;
t368 = t414 * t182;
t417 = t298 + t368;
t221 = pkin(2) * t238 + qJ(4);
t380 = pkin(8) + t221;
t190 = t380 * t237;
t191 = t380 * t239;
t133 = -t242 * t190 + t191 * t393;
t233 = pkin(10) + qJ(5);
t228 = sin(t233);
t234 = qJ(2) + pkin(9);
t231 = cos(t234);
t222 = g(3) * t231;
t229 = sin(t234);
t244 = sin(qJ(1));
t246 = cos(qJ(1));
t302 = g(1) * t246 + g(2) * t244;
t408 = t302 * t229 - t222;
t415 = t133 * t137 + t228 * t408;
t354 = t179 * t239;
t118 = pkin(2) * t333 + pkin(3) * t182 + qJ(4) * t179;
t379 = qJ(3) + pkin(7);
t209 = t379 * t245;
t202 = qJD(1) * t209;
t187 = t238 * t202;
t208 = t379 * t243;
t201 = qJD(1) * t208;
t149 = -t201 * t366 - t187;
t77 = t239 * t118 - t149 * t237;
t55 = pkin(4) * t182 + pkin(8) * t354 + t77;
t355 = t179 * t237;
t78 = t237 * t118 + t239 * t149;
t67 = pkin(8) * t355 + t78;
t375 = -qJD(4) * t199 - qJD(5) * t133 + t242 * t67 - t393 * t55;
t407 = t41 - t420;
t317 = qJD(2) * t379;
t177 = -t243 * qJD(3) - t245 * t317;
t136 = qJDD(2) * pkin(2) + qJD(1) * t177 - qJDD(1) * t208;
t176 = t245 * qJD(3) - t243 * t317;
t147 = qJD(1) * t176 + qJDD(1) * t209;
t336 = -t366 * t136 + t238 * t147;
t79 = -qJDD(2) * pkin(3) + qJDD(4) + t336;
t253 = t79 - t408;
t406 = t182 * t413;
t404 = g(1) * t244 - g(2) * t246;
t280 = t404 * t231;
t316 = t366 * t202;
t148 = -t201 * t238 + t316;
t403 = t148 * qJD(2) + t408;
t401 = t182 * qJD(2);
t400 = t41 * pkin(5) + t40 * qJ(6) - qJD(6) * t414;
t178 = t179 ^ 2;
t360 = t143 * t237;
t397 = -t178 * t239 - t360;
t385 = g(3) * t229;
t268 = -t302 * t231 - t385;
t274 = -t238 * t243 + t315;
t389 = pkin(8) * t239;
t382 = t245 * pkin(2);
t227 = pkin(1) + t382;
t139 = -pkin(3) * t274 - qJ(4) * t198 - t227;
t155 = -t238 * t208 + t209 * t366;
t84 = t239 * t139 - t155 * t237;
t66 = -pkin(4) * t274 - t198 * t389 + t84;
t352 = t198 * t237;
t85 = t237 * t139 + t239 * t155;
t71 = -pkin(8) * t352 + t85;
t378 = t242 * t66 + t393 * t71;
t184 = t274 * qJD(2);
t120 = t176 * t366 + t238 * t177;
t373 = qJD(2) * pkin(2);
t325 = t243 * t373;
t96 = pkin(3) * t181 - qJ(4) * t184 - qJD(4) * t198 + t325;
t62 = -t120 * t237 + t239 * t96;
t44 = pkin(4) * t181 - t184 * t389 + t62;
t353 = t184 * t237;
t63 = t239 * t120 + t237 * t96;
t50 = -pkin(8) * t353 + t63;
t9 = -qJD(5) * t378 - t242 * t50 + t393 * t44;
t395 = t182 ^ 2;
t392 = pkin(2) * t243;
t391 = pkin(4) * t237;
t390 = pkin(5) * t137;
t384 = g(3) * t245;
t383 = t239 * pkin(4);
t381 = t414 * t95;
t28 = t242 * t55 + t393 * t67;
t173 = pkin(2) * t319 - qJDD(1) * t227 + qJDD(3);
t60 = t143 * pkin(3) - t144 * qJ(4) - t182 * qJD(4) + t173;
t328 = qJD(2) * qJD(4);
t81 = t238 * t136 + t366 * t147;
t76 = qJDD(2) * qJ(4) + t328 + t81;
t33 = t237 * t60 + t239 * t76;
t23 = qJ(6) * t182 + t28;
t278 = -t190 * t393 - t242 * t191;
t97 = qJD(4) * t277 + qJD(5) * t278;
t377 = t97 - t23;
t376 = t97 - t28;
t374 = t182 * pkin(5) - t375;
t207 = -qJD(1) * t227 + qJD(3);
t109 = t179 * pkin(3) - t182 * qJ(4) + t207;
t192 = -t201 + t373;
t142 = t238 * t192 + t316;
t129 = qJD(2) * qJ(4) + t142;
t68 = t239 * t109 - t129 * t237;
t47 = pkin(4) * t179 - pkin(8) * t157 + t68;
t69 = t237 * t109 + t239 * t129;
t56 = pkin(8) * t413 + t69;
t20 = t242 * t47 + t393 * t56;
t372 = t175 * t20;
t99 = -pkin(4) * t355 + t148;
t367 = pkin(5) * t410 - qJ(6) * t409 - qJD(6) * t199 - t99;
t365 = pkin(7) * qJDD(1);
t364 = qJ(6) * t137;
t363 = t116 * t237;
t362 = t116 * t239;
t359 = t157 * t182;
t358 = t157 * t237;
t357 = t175 * t182;
t356 = t179 * t182;
t351 = t228 * t244;
t350 = t229 * t244;
t349 = t229 * t246;
t230 = cos(t233);
t348 = t230 * t246;
t225 = pkin(3) + t383;
t203 = t231 * t225;
t347 = t231 * t246;
t131 = t239 * t143;
t344 = t244 * t230;
t343 = t246 * t228;
t342 = t246 * t379;
t19 = -t242 * t56 + t393 * t47;
t340 = qJD(6) - t19;
t337 = -t237 * t178 + t131;
t235 = t243 ^ 2;
t236 = t245 ^ 2;
t335 = t235 - t236;
t334 = t235 + t236;
t141 = t192 * t366 - t187;
t122 = -qJD(2) * pkin(3) + qJD(4) - t141;
t330 = -qJD(4) + t122;
t326 = t245 * qJDD(1);
t324 = -t396 + t424;
t248 = qJD(1) ^ 2;
t323 = t243 * t248 * t245;
t32 = -t237 * t76 + t239 * t60;
t17 = pkin(4) * t143 - pkin(8) * t116 + t32;
t25 = pkin(8) * t310 + t33;
t314 = -t393 * t17 + t242 * t25 + t56 * t320 + t47 * t331;
t119 = t176 * t238 - t366 * t177;
t154 = t366 * t208 + t209 * t238;
t212 = t246 * t227;
t312 = t244 * t379 + t212;
t306 = t245 * t319;
t305 = -g(1) * t350 + g(2) * t349;
t226 = -pkin(2) * t366 - pkin(3);
t161 = t231 * t351 + t348;
t163 = t231 * t343 - t344;
t304 = g(1) * t161 - g(2) * t163;
t162 = t231 * t344 - t343;
t164 = t230 * t347 + t351;
t303 = g(1) * t162 - g(2) * t164;
t300 = -t396 - t424;
t87 = pkin(4) * t353 + t119;
t115 = pkin(4) * t352 + t154;
t123 = t199 * t198;
t74 = t184 * t199 + t198 * t402;
t297 = t123 * t41 - t74 * t95;
t241 = -pkin(8) - qJ(4);
t296 = -t231 * t241 - t392;
t295 = pkin(3) * t231 + qJ(4) * t229;
t294 = pkin(5) * t230 + qJ(6) * t228;
t292 = -t33 * t237 - t32 * t239;
t291 = -t237 * t68 + t239 * t69;
t290 = t310 * pkin(4);
t289 = -t143 * t274 + t179 * t181;
t288 = t143 * t198 + t179 * t184;
t287 = t239 * t413;
t286 = t310 * t239;
t285 = -t229 * t241 + t203 + t382;
t34 = -t242 * t71 + t393 * t66;
t279 = -0.2e1 * pkin(1) * t329 - pkin(7) * qJDD(2);
t3 = t242 * t17 + t393 * t25 + t47 * t320 - t331 * t56;
t8 = t242 * t44 + t66 * t320 - t331 * t71 + t393 * t50;
t275 = -t277 * t41 - t410 * t95;
t206 = t226 - t383;
t271 = t278 * t137 - t222 * t230 + (g(1) * t348 + g(2) * t344) * t229;
t270 = t287 - t358;
t267 = g(1) * t163 + g(2) * t161 + t228 * t385 - t314;
t266 = t40 - t423;
t265 = t225 * t347 - t241 * t349 + t244 * t391 + t312;
t247 = qJD(2) ^ 2;
t263 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t247 + t404;
t262 = pkin(1) * t248 + t302 - t365;
t124 = t277 * t198;
t73 = -t184 * t277 + t198 * t186;
t261 = t123 * t40 - t124 * t41 - t414 * t74 - t73 * t95;
t260 = t122 * t184 + t198 * t79 - t302;
t259 = t123 * t137 + t175 * t74 - t181 * t95 - t274 * t41;
t257 = t342 + t241 * t350 + t246 * t391 + (-t227 - t203) * t244;
t51 = -t290 + t79;
t86 = -pkin(4) * t413 + t122;
t37 = -pkin(5) * t95 - qJ(6) * t414 + t86;
t256 = t37 * t414 + qJDD(6) - t267;
t254 = -t133 * t41 + t278 * t40 + t95 * t97 + t268;
t252 = -g(1) * t164 - g(2) * t162 - t230 * t385 + t3;
t251 = t41 + t420;
t250 = -t290 + t253;
t121 = -pkin(5) * t277 - t199 * qJ(6) + t206;
t105 = t237 * t310;
t75 = -t137 * t274 + t175 * t181;
t54 = pkin(5) * t414 - qJ(6) * t95;
t49 = pkin(5) * t123 - qJ(6) * t124 + t115;
t31 = pkin(5) * t274 - t34;
t30 = -qJ(6) * t274 + t378;
t29 = t298 - t368;
t26 = -t40 - t423;
t18 = pkin(5) * t74 + qJ(6) * t73 - qJD(6) * t124 + t87;
t16 = t175 * qJ(6) + t20;
t15 = -t175 * pkin(5) + t340;
t12 = -t124 * t40 - t414 * t73;
t11 = -t40 * t199 + t409 * t414;
t10 = t124 * t137 - t175 * t73 + t181 * t414 + t274 * t40;
t7 = -t181 * pkin(5) - t9;
t6 = t51 + t400;
t5 = qJ(6) * t181 - qJD(6) * t274 + t8;
t2 = qJDD(6) + t314 - t390;
t1 = qJD(6) * t175 + t3 + t364;
t4 = [0, 0, 0, 0, 0, qJDD(1), t404, t302, 0, 0, qJDD(1) * t235 + 0.2e1 * t306, 0.2e1 * t243 * t326 - 0.2e1 * t329 * t335, qJDD(2) * t243 + t245 * t247, qJDD(1) * t236 - 0.2e1 * t306, qJDD(2) * t245 - t243 * t247, 0, t243 * t279 + t245 * t263, -t243 * t263 + t245 * t279, 0.2e1 * t334 * t365 - t302, -g(1) * (-pkin(1) * t244 + pkin(7) * t246) - g(2) * (pkin(1) * t246 + pkin(7) * t244) + (pkin(7) ^ 2 * t334 + pkin(1) ^ 2) * qJDD(1), t144 * t198 + t182 * t184, t144 * t274 - t181 * t182 - t288, qJD(2) * t184 + qJDD(2) * t198, t289, -qJD(2) * t181 + qJDD(2) * t274, 0, -t154 * qJDD(2) - t227 * t143 - t173 * t274 + t207 * t181 + t280 + (t179 * t392 - t119) * qJD(2), -t155 * qJDD(2) - t227 * t144 + t173 * t198 + t207 * t184 + (t182 * t392 - t120) * qJD(2) + t305, t119 * t182 - t120 * t179 - t141 * t184 - t142 * t181 - t143 * t155 + t144 * t154 + t198 * t336 + t274 * t81 - t302, t81 * t155 + t142 * t120 + t336 * t154 - t141 * t119 - t173 * t227 + t207 * t325 - g(1) * (-t227 * t244 + t342) - g(2) * t312 (t116 * t198 + t157 * t184) * t239 (t286 - t363) * t198 + t270 * t184, -t116 * t274 + t157 * t181 + t239 * t288 (-t184 * t413 - t198 * t310) * t237, t181 * t413 - t237 * t288 - t274 * t310, t289, -t119 * t413 + t84 * t143 - t154 * t310 + t62 * t179 + t68 * t181 + t237 * t260 + t239 * t280 - t274 * t32, t154 * t116 + t119 * t157 - t85 * t143 - t63 * t179 - t69 * t181 - t237 * t280 + t239 * t260 + t274 * t33, t63 * t413 + t85 * t310 - t62 * t157 - t84 * t116 + t292 * t198 + (-t237 * t69 - t239 * t68) * t184 - t305, -g(2) * t212 + t122 * t119 + t79 * t154 + t32 * t84 + t33 * t85 + t68 * t62 + t69 * t63 + (-g(1) * t379 - g(2) * t295) * t246 + (-g(1) * (-t227 - t295) - g(2) * t379) * t244, t12, t261, t10, t297, -t259, t75, t115 * t41 + t123 * t51 + t137 * t34 + t175 * t9 + t181 * t19 + t274 * t314 + t74 * t86 - t87 * t95 + t303, -t115 * t40 + t124 * t51 - t137 * t378 - t175 * t8 - t181 * t20 + t274 * t3 + t414 * t87 - t73 * t86 - t304, -t123 * t3 + t124 * t314 + t19 * t73 - t20 * t74 + t34 * t40 - t378 * t41 - t414 * t9 + t8 * t95 - t305, -g(1) * t257 - g(2) * t265 + t51 * t115 + t19 * t9 + t20 * t8 + t3 * t378 - t314 * t34 + t86 * t87, t12, t10, -t261, t75, t259, t297, t123 * t6 - t137 * t31 - t15 * t181 - t175 * t7 - t18 * t95 + t2 * t274 + t37 * t74 + t41 * t49 + t303, -t1 * t123 + t124 * t2 - t15 * t73 - t16 * t74 - t30 * t41 - t31 * t40 + t414 * t7 + t5 * t95 - t305, -t1 * t274 - t124 * t6 + t137 * t30 + t16 * t181 + t175 * t5 - t18 * t414 + t37 * t73 + t40 * t49 + t304, t1 * t30 + t16 * t5 + t6 * t49 + t37 * t18 + t2 * t31 + t15 * t7 - g(1) * (-t162 * pkin(5) - t161 * qJ(6) + t257) - g(2) * (pkin(5) * t164 + qJ(6) * t163 + t265); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, t335 * t248, t327, t323, t326, qJDD(2), t243 * t262 - t384, g(3) * t243 + t245 * t262, 0, 0, t356, -t178 + t395 (t216 + t179) * qJD(2) + t258, -t356, -t293, qJDD(2), -t207 * t182 + (qJDD(2) * t366 - t179 * t333) * pkin(2) - t336 + t403, t149 * qJD(2) + t207 * t179 + (-qJDD(2) * t238 - t182 * t333) * pkin(2) - t81 - t268 (t142 - t148) * t182 + (-t141 + t149) * t179 + (-t143 * t238 - t144 * t366) * pkin(2), t141 * t148 - t142 * t149 + (-t366 * t336 - t384 + t238 * t81 + (-qJD(1) * t207 + t302) * t243) * pkin(2), t157 * t354 + t363, t179 * t270 + t105 + t362, -t359 - t397, -t355 * t413 + t286, t337 - t406, -t356, -t221 * t360 + t226 * t130 - t148 * t346 - t68 * t182 + (t237 * t330 - t77) * t179 + (-t226 * qJDD(2) + t403 - t79) * t239, -t221 * t131 + t226 * t116 - t148 * t157 + t69 * t182 + (t239 * t330 + t78) * t179 + t253 * t237, t77 * t157 + t78 * t346 + (-t78 * qJD(2) - qJD(4) * t346 - t221 * t130 - t68 * t179 + t33 + (qJDD(2) * t221 + t328) * t239) * t239 + (qJD(4) * t157 + t116 * t221 - t179 * t69 - t32) * t237 + t268, t79 * t226 - t69 * t78 - t68 * t77 - t122 * t148 - g(3) * (t295 + t382) + (-t32 * t237 + t33 * t239) * t221 + t291 * qJD(4) + t302 * (pkin(3) * t229 - qJ(4) * t231 + t392) t11, t419, t29, t275, -t422, -t357, t175 * t375 - t182 * t19 + t206 * t41 - t277 * t51 + t410 * t86 + t95 * t99 + t271, -t175 * t376 + t182 * t20 + t199 * t51 - t206 * t40 + t409 * t86 - t414 * t99 - t415, -t19 * t409 + t199 * t314 - t20 * t410 + t277 * t3 - t28 * t95 - t375 * t414 + t254, -g(3) * t285 - t314 * t278 + t3 * t133 + t19 * t375 + t20 * t376 + t51 * t206 - t86 * t99 + t302 * (t225 * t229 - t296) t11, t29, -t419, -t357, t422, t275, t121 * t41 + t15 * t182 - t175 * t374 - t277 * t6 - t367 * t95 + t37 * t410 + t271, t1 * t277 + t15 * t409 - t16 * t410 + t199 * t2 - t23 * t95 + t374 * t414 + t254, t121 * t40 - t16 * t182 + t377 * t175 - t199 * t6 - t367 * t414 - t37 * t409 + t415, t1 * t133 + t6 * t121 - t2 * t278 - g(3) * (t231 * t294 + t285) + t367 * t37 + t377 * t16 + t374 * t15 + t302 * (-(-t225 - t294) * t229 - t296); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293 + 0.2e1 * t401 (t216 - t179) * qJD(2) + t258, -t178 - t395, t141 * t182 + t142 * t179 + t173 - t404, 0, 0, 0, 0, 0, 0, t337 + t406, -t359 + t397, -t362 + t105 + (t287 + t358) * t179, -t122 * t182 + t179 * t291 - t292 - t404, 0, 0, 0, 0, 0, 0, t421, -t417, t418, -t86 * t182 - t19 * t410 + t3 * t199 + t20 * t409 - t277 * t314 - t404, 0, 0, 0, 0, 0, 0, t421, t418, t417, t1 * t199 + t15 * t410 + t16 * t409 - t37 * t182 - t2 * t277 - t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157 * t179 - t310, t179 * t413 + t116, -t157 ^ 2 - t413 ^ 2, t157 * t68 - t413 * t69 + t253, 0, 0, 0, 0, 0, 0, t251, -t266, t300, t19 * t414 - t20 * t95 + t250, 0, 0, 0, 0, 0, 0, t251, t300, t266, -t15 * t414 - t16 * t95 + t250 + t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t381, -t324, t26, t381, -t407, t137, -t414 * t86 + t267 + t372, t175 * t19 - t86 * t95 - t252, 0, 0, -t381, t26, t324, t137, t407, t381, t54 * t95 - t256 + t372 + 0.2e1 * t390, pkin(5) * t40 - t41 * qJ(6) + (t16 - t20) * t414 - (t15 - t340) * t95, 0.2e1 * t364 + t37 * t95 + t54 * t414 + (0.2e1 * qJD(6) - t19) * t175 + t252, t1 * qJ(6) - t2 * pkin(5) - t37 * t54 - t15 * t20 - g(1) * (-pkin(5) * t163 + qJ(6) * t164) - g(2) * (-pkin(5) * t161 + qJ(6) * t162) - (-pkin(5) * t228 + qJ(6) * t230) * t385 + t340 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(5) - t293 - t381 - t401, t26, -t175 ^ 2 - t396, -t16 * t175 + t256 - t390;];
tau_reg  = t4;
