% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPPRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:07:28
% EndTime: 2019-05-06 09:07:39
% DurationCPUTime: 11.33s
% Computational Cost: add. (41553->316), mult. (99140->399), div. (0->0), fcn. (71750->10), ass. (0->226)
t2545 = cos(qJ(2));
t2580 = qJD(1) * t2545;
t2565 = qJD(2) * t2580;
t2542 = sin(qJ(2));
t2567 = t2542 * qJDD(1);
t2512 = t2565 + t2567;
t2531 = t2545 * qJDD(1);
t2581 = qJD(1) * t2542;
t2566 = qJD(2) * t2581;
t2513 = t2531 - t2566;
t2538 = sin(pkin(9));
t2540 = cos(pkin(9));
t2561 = t2512 * t2538 - t2540 * t2513;
t2560 = qJDD(5) + t2561;
t2505 = t2538 * t2580 + t2540 * t2581;
t2537 = sin(pkin(10));
t2539 = cos(pkin(10));
t2487 = -t2539 * qJD(2) + t2505 * t2537;
t2488 = qJD(2) * t2537 + t2505 * t2539;
t2541 = sin(qJ(5));
t2544 = cos(qJ(5));
t2459 = t2487 * t2544 + t2488 * t2541;
t2461 = -t2487 * t2541 + t2488 * t2544;
t2576 = t2459 * t2461;
t2422 = t2560 + t2576;
t2458 = t2461 ^ 2;
t2503 = t2538 * t2581 - t2540 * t2580;
t2502 = qJD(5) + t2503;
t2585 = t2502 ^ 2;
t2592 = -t2458 - t2585;
t2378 = t2422 * t2541 - t2544 * t2592;
t2380 = t2422 * t2544 + t2541 * t2592;
t2365 = t2378 * t2537 - t2380 * t2539;
t2484 = t2540 * t2512 + t2538 * t2513;
t2476 = qJDD(2) * t2537 + t2484 * t2539;
t2559 = qJDD(2) * t2539 - t2484 * t2537;
t2551 = -t2459 * qJD(5) + t2544 * t2476 + t2541 * t2559;
t2575 = t2459 * t2502;
t2550 = t2551 - t2575;
t2347 = t2365 * t2538 - t2540 * t2550;
t2349 = t2365 * t2540 + t2538 * t2550;
t2320 = t2347 * t2542 - t2349 * t2545;
t2351 = t2378 * t2539 + t2380 * t2537;
t2543 = sin(qJ(1));
t2546 = cos(qJ(1));
t2616 = t2320 * t2543 - t2351 * t2546;
t2615 = t2320 * t2546 + t2351 * t2543;
t2322 = t2347 * t2545 + t2349 * t2542;
t2398 = t2551 + t2575;
t2562 = t2541 * t2476 - t2544 * t2559;
t2555 = (-qJD(5) + t2502) * t2461 - t2562;
t2589 = t2398 * t2541 + t2544 * t2555;
t2590 = -t2544 * t2398 + t2541 * t2555;
t2595 = t2537 * t2589 + t2539 * t2590;
t2432 = t2459 ^ 2;
t2408 = t2458 + t2432;
t2596 = -t2537 * t2590 + t2539 * t2589;
t2601 = -t2408 * t2538 + t2540 * t2596;
t2602 = t2408 * t2540 + t2538 * t2596;
t2606 = -t2542 * t2602 + t2545 * t2601;
t2612 = t2543 * t2606 - t2546 * t2595;
t2611 = t2543 * t2595 + t2546 * t2606;
t2423 = t2560 - t2576;
t2591 = -t2585 - t2432;
t2597 = -t2423 * t2541 + t2544 * t2591;
t2598 = t2544 * t2423 + t2541 * t2591;
t2600 = -t2537 * t2598 + t2539 * t2597;
t2610 = t2538 * t2600;
t2609 = t2540 * t2600;
t2599 = t2537 * t2597 + t2539 * t2598;
t2608 = t2543 * t2599;
t2607 = t2546 * t2599;
t2605 = t2542 * t2601 + t2545 * t2602;
t2500 = qJD(2) * t2503;
t2471 = t2500 - t2484;
t2535 = t2545 ^ 2;
t2547 = qJD(1) ^ 2;
t2557 = qJD(2) * pkin(2) - qJ(3) * t2581;
t2521 = t2543 * g(1) - t2546 * g(2);
t2558 = qJDD(1) * pkin(1) + t2521;
t2466 = t2513 * pkin(2) + (qJ(3) * t2535 + pkin(7)) * t2547 - t2557 * t2581 - qJDD(3) + t2558;
t2588 = qJD(2) ^ 2;
t2587 = t2487 ^ 2;
t2586 = t2488 ^ 2;
t2483 = t2503 ^ 2;
t2584 = t2505 ^ 2;
t2583 = -2 * qJD(3);
t2582 = -2 * qJD(4);
t2579 = qJD(2) * t2505;
t2574 = t2487 * t2488;
t2573 = t2488 * t2503;
t2572 = t2503 * t2487;
t2571 = t2503 * t2505;
t2570 = t2535 * t2547;
t2569 = t2542 * t2547;
t2522 = -g(1) * t2546 - g(2) * t2543;
t2554 = -pkin(1) * t2547 + qJDD(1) * pkin(7) + t2522;
t2494 = -t2542 * g(3) + t2545 * t2554;
t2463 = -pkin(2) * t2570 + t2513 * qJ(3) - qJD(2) * t2557 + t2494;
t2552 = t2542 * t2554;
t2548 = -t2552 - t2512 * qJ(3) + qJDD(2) * pkin(2) + (qJ(3) * qJD(1) * qJD(2) + pkin(2) * t2569 - g(3)) * t2545;
t2426 = t2540 * t2463 + t2503 * t2583 + t2538 * t2548;
t2477 = pkin(3) * t2503 - qJ(4) * t2505;
t2406 = -pkin(3) * t2588 + qJDD(2) * qJ(4) - t2477 * t2503 + t2426;
t2468 = t2561 + t2579;
t2416 = t2468 * pkin(3) + qJ(4) * t2471 - t2466;
t2376 = t2539 * t2406 + t2537 * t2416 + t2487 * t2582;
t2472 = pkin(4) * t2503 - pkin(8) * t2488;
t2362 = -pkin(4) * t2587 + pkin(8) * t2559 - t2503 * t2472 + t2376;
t2375 = -t2537 * t2406 + t2539 * t2416 + t2488 * t2582;
t2440 = -t2476 - t2572;
t2441 = t2561 - t2574;
t2549 = pkin(4) * t2441 + pkin(8) * t2440 + t2375;
t2333 = t2544 * t2362 + t2541 * t2549;
t2534 = t2542 ^ 2;
t2568 = t2534 + t2535;
t2332 = -t2362 * t2541 + t2544 * t2549;
t2563 = t2538 * t2463 - t2540 * t2548;
t2556 = -qJD(5) * t2461 - t2562;
t2405 = qJDD(4) - t2588 * qJ(4) - qJDD(2) * pkin(3) + ((2 * qJD(3)) + t2477) * t2505 + t2563;
t2377 = -t2559 * pkin(4) - t2587 * pkin(8) + t2488 * t2472 + t2405;
t2528 = t2545 * t2569;
t2527 = -t2570 - t2588;
t2526 = -t2534 * t2547 - t2588;
t2520 = -qJDD(2) + t2528;
t2519 = qJDD(2) + t2528;
t2518 = t2568 * t2547;
t2517 = -qJDD(1) * t2543 - t2546 * t2547;
t2516 = qJDD(1) * t2546 - t2543 * t2547;
t2515 = t2568 * qJDD(1);
t2514 = t2531 - 0.2e1 * t2566;
t2511 = 0.2e1 * t2565 + t2567;
t2509 = t2547 * pkin(7) + t2558;
t2495 = -t2584 - t2588;
t2493 = -t2545 * g(3) - t2552;
t2492 = t2520 * t2545 - t2526 * t2542;
t2491 = -t2519 * t2542 + t2527 * t2545;
t2490 = t2520 * t2542 + t2526 * t2545;
t2489 = t2519 * t2545 + t2527 * t2542;
t2481 = -qJDD(2) - t2571;
t2480 = qJDD(2) - t2571;
t2478 = -t2483 - t2588;
t2470 = -t2500 - t2484;
t2469 = -t2561 + t2579;
t2467 = -t2584 - t2483;
t2465 = -t2493 * t2542 + t2494 * t2545;
t2464 = t2493 * t2545 + t2494 * t2542;
t2455 = -t2483 - t2586;
t2453 = t2481 * t2540 - t2495 * t2538;
t2452 = t2481 * t2538 + t2495 * t2540;
t2451 = -t2483 - t2587;
t2445 = -t2586 - t2587;
t2444 = t2478 * t2540 - t2480 * t2538;
t2443 = t2478 * t2538 + t2480 * t2540;
t2442 = -t2561 - t2574;
t2439 = t2476 - t2572;
t2438 = t2559 + t2573;
t2437 = -t2559 + t2573;
t2434 = t2469 * t2540 - t2470 * t2538;
t2433 = t2469 * t2538 + t2470 * t2540;
t2431 = pkin(5) * t2459 - qJ(6) * t2461;
t2430 = -t2452 * t2542 + t2453 * t2545;
t2429 = t2452 * t2545 + t2453 * t2542;
t2425 = t2505 * t2583 - t2563;
t2421 = t2442 * t2539 - t2455 * t2537;
t2420 = t2442 * t2537 + t2455 * t2539;
t2414 = -t2441 * t2537 + t2451 * t2539;
t2413 = t2441 * t2539 + t2451 * t2537;
t2412 = -t2443 * t2542 + t2444 * t2545;
t2411 = t2443 * t2545 + t2444 * t2542;
t2410 = t2438 * t2539 - t2440 * t2537;
t2409 = t2438 * t2537 + t2440 * t2539;
t2403 = -t2433 * t2542 + t2434 * t2545;
t2402 = t2433 * t2545 + t2434 * t2542;
t2396 = t2502 * t2461 - t2556;
t2395 = (qJD(5) + t2502) * t2461 + t2562;
t2393 = t2421 * t2540 + t2439 * t2538;
t2392 = t2421 * t2538 - t2439 * t2540;
t2391 = t2414 * t2540 + t2437 * t2538;
t2390 = t2414 * t2538 - t2437 * t2540;
t2385 = t2410 * t2540 + t2445 * t2538;
t2384 = t2410 * t2538 - t2445 * t2540;
t2383 = -t2425 * t2538 + t2426 * t2540;
t2382 = t2425 * t2540 + t2426 * t2538;
t2370 = -t2392 * t2542 + t2393 * t2545;
t2369 = t2392 * t2545 + t2393 * t2542;
t2368 = -t2390 * t2542 + t2391 * t2545;
t2367 = t2390 * t2545 + t2391 * t2542;
t2360 = -t2384 * t2542 + t2385 * t2545;
t2359 = t2384 * t2545 + t2385 * t2542;
t2356 = -t2382 * t2542 + t2383 * t2545;
t2355 = t2382 * t2545 + t2383 * t2542;
t2350 = t2396 * t2538 + t2609;
t2348 = -t2396 * t2540 + t2610;
t2346 = -t2375 * t2537 + t2376 * t2539;
t2345 = t2375 * t2539 + t2376 * t2537;
t2344 = t2395 * t2538 + t2609;
t2342 = -t2395 * t2540 + t2610;
t2340 = -t2556 * pkin(5) + (pkin(5) * t2502 - (2 * qJD(6))) * t2461 + t2377 - t2550 * qJ(6);
t2335 = t2346 * t2540 + t2405 * t2538;
t2334 = t2346 * t2538 - t2405 * t2540;
t2327 = -pkin(5) * t2560 - qJ(6) * t2585 + t2431 * t2461 + qJDD(6) - t2332;
t2326 = -pkin(5) * t2585 + qJ(6) * t2560 + 0.2e1 * qJD(6) * t2502 - t2459 * t2431 + t2333;
t2325 = -t2348 * t2542 + t2350 * t2545;
t2323 = t2348 * t2545 + t2350 * t2542;
t2321 = -t2342 * t2542 + t2344 * t2545;
t2319 = t2342 * t2545 + t2344 * t2542;
t2317 = -t2334 * t2542 + t2335 * t2545;
t2316 = t2334 * t2545 + t2335 * t2542;
t2315 = -t2332 * t2541 + t2333 * t2544;
t2314 = t2332 * t2544 + t2333 * t2541;
t2309 = t2326 * t2544 + t2327 * t2541;
t2308 = t2326 * t2541 - t2327 * t2544;
t2307 = -t2314 * t2537 + t2315 * t2539;
t2306 = t2314 * t2539 + t2315 * t2537;
t2305 = t2307 * t2540 + t2377 * t2538;
t2304 = t2307 * t2538 - t2377 * t2540;
t2303 = -t2308 * t2537 + t2309 * t2539;
t2302 = t2308 * t2539 + t2309 * t2537;
t2301 = t2303 * t2540 + t2340 * t2538;
t2300 = t2303 * t2538 - t2340 * t2540;
t2299 = -t2304 * t2542 + t2305 * t2545;
t2298 = t2304 * t2545 + t2305 * t2542;
t2297 = -t2300 * t2542 + t2301 * t2545;
t2296 = t2300 * t2545 + t2301 * t2542;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2517, -t2516, 0, -t2521 * t2543 + t2522 * t2546, 0, 0, 0, 0, 0, 0, t2491 * t2546 - t2514 * t2543, t2492 * t2546 + t2511 * t2543, t2515 * t2546 - t2518 * t2543, t2465 * t2546 - t2509 * t2543, 0, 0, 0, 0, 0, 0, t2412 * t2546 + t2468 * t2543, t2430 * t2546 - t2471 * t2543, t2403 * t2546 + t2467 * t2543, t2356 * t2546 - t2466 * t2543, 0, 0, 0, 0, 0, 0, t2368 * t2546 + t2413 * t2543, t2370 * t2546 + t2420 * t2543, t2360 * t2546 + t2409 * t2543, t2317 * t2546 + t2345 * t2543, 0, 0, 0, 0, 0, 0, t2321 * t2546 + t2608, -t2615, t2611, t2299 * t2546 + t2306 * t2543, 0, 0, 0, 0, 0, 0, t2325 * t2546 + t2608, t2611, t2615, t2297 * t2546 + t2302 * t2543; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2516, t2517, 0, t2521 * t2546 + t2522 * t2543, 0, 0, 0, 0, 0, 0, t2491 * t2543 + t2514 * t2546, t2492 * t2543 - t2511 * t2546, t2515 * t2543 + t2518 * t2546, t2465 * t2543 + t2509 * t2546, 0, 0, 0, 0, 0, 0, t2412 * t2543 - t2468 * t2546, t2430 * t2543 + t2471 * t2546, t2403 * t2543 - t2467 * t2546, t2356 * t2543 + t2466 * t2546, 0, 0, 0, 0, 0, 0, t2368 * t2543 - t2413 * t2546, t2370 * t2543 - t2420 * t2546, t2360 * t2543 - t2409 * t2546, t2317 * t2543 - t2345 * t2546, 0, 0, 0, 0, 0, 0, t2321 * t2543 - t2607, -t2616, t2612, t2299 * t2543 - t2306 * t2546, 0, 0, 0, 0, 0, 0, t2325 * t2543 - t2607, t2612, t2616, t2297 * t2543 - t2302 * t2546; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2489, t2490, 0, t2464, 0, 0, 0, 0, 0, 0, t2411, t2429, t2402, t2355, 0, 0, 0, 0, 0, 0, t2367, t2369, t2359, t2316, 0, 0, 0, 0, 0, 0, t2319, t2322, t2605, t2298, 0, 0, 0, 0, 0, 0, t2323, t2605, -t2322, t2296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2547, -qJDD(1), 0, t2522, 0, 0, 0, 0, 0, 0, t2491, t2492, t2515, t2465, 0, 0, 0, 0, 0, 0, t2412, t2430, t2403, t2356, 0, 0, 0, 0, 0, 0, t2368, t2370, t2360, t2317, 0, 0, 0, 0, 0, 0, t2321, -t2320, t2606, t2299, 0, 0, 0, 0, 0, 0, t2325, t2606, t2320, t2297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2547, 0, t2521, 0, 0, 0, 0, 0, 0, t2514, -t2511, t2518, t2509, 0, 0, 0, 0, 0, 0, -t2468, t2471, -t2467, t2466, 0, 0, 0, 0, 0, 0, -t2413, -t2420, -t2409, -t2345, 0, 0, 0, 0, 0, 0, -t2599, t2351, -t2595, -t2306, 0, 0, 0, 0, 0, 0, -t2599, -t2595, -t2351, -t2302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2489, t2490, 0, t2464, 0, 0, 0, 0, 0, 0, t2411, t2429, t2402, t2355, 0, 0, 0, 0, 0, 0, t2367, t2369, t2359, t2316, 0, 0, 0, 0, 0, 0, t2319, t2322, t2605, t2298, 0, 0, 0, 0, 0, 0, t2323, t2605, -t2322, t2296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2527, t2520, t2531, t2494, 0, 0, 0, 0, 0, 0, t2444, t2453, t2434, t2383, 0, 0, 0, 0, 0, 0, t2391, t2393, t2385, t2335, 0, 0, 0, 0, 0, 0, t2344, t2349, t2601, t2305, 0, 0, 0, 0, 0, 0, t2350, t2601, -t2349, t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2519, t2526, -t2567, t2493, 0, 0, 0, 0, 0, 0, t2443, t2452, t2433, t2382, 0, 0, 0, 0, 0, 0, t2390, t2392, t2384, t2334, 0, 0, 0, 0, 0, 0, t2342, t2347, t2602, t2304, 0, 0, 0, 0, 0, 0, t2348, t2602, -t2347, t2300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2514, t2511, -t2518, -t2509, 0, 0, 0, 0, 0, 0, t2468, -t2471, t2467, -t2466, 0, 0, 0, 0, 0, 0, t2413, t2420, t2409, t2345, 0, 0, 0, 0, 0, 0, t2599, -t2351, t2595, t2306, 0, 0, 0, 0, 0, 0, t2599, t2595, t2351, t2302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2478, t2481, t2469, t2426, 0, 0, 0, 0, 0, 0, t2414, t2421, t2410, t2346, 0, 0, 0, 0, 0, 0, t2600, t2365, t2596, t2307, 0, 0, 0, 0, 0, 0, t2600, t2596, -t2365, t2303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2480, t2495, t2470, t2425, 0, 0, 0, 0, 0, 0, -t2437, -t2439, -t2445, -t2405, 0, 0, 0, 0, 0, 0, -t2395, -t2550, t2408, -t2377, 0, 0, 0, 0, 0, 0, -t2396, t2408, t2550, -t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2468, -t2471, t2467, -t2466, 0, 0, 0, 0, 0, 0, t2413, t2420, t2409, t2345, 0, 0, 0, 0, 0, 0, t2599, -t2351, t2595, t2306, 0, 0, 0, 0, 0, 0, t2599, t2595, t2351, t2302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2451, t2442, t2438, t2376, 0, 0, 0, 0, 0, 0, t2597, -t2380, t2589, t2315, 0, 0, 0, 0, 0, 0, t2597, t2589, t2380, t2309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2441, t2455, t2440, t2375, 0, 0, 0, 0, 0, 0, t2598, -t2378, t2590, t2314, 0, 0, 0, 0, 0, 0, t2598, t2590, t2378, t2308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2437, t2439, t2445, t2405, 0, 0, 0, 0, 0, 0, t2395, t2550, -t2408, t2377, 0, 0, 0, 0, 0, 0, t2396, -t2408, -t2550, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2591, -t2422, t2555, t2333, 0, 0, 0, 0, 0, 0, t2591, t2555, t2422, t2326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2423, t2592, -t2398, t2332, 0, 0, 0, 0, 0, 0, t2423, -t2398, -t2592, -t2327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2395, t2550, -t2408, t2377, 0, 0, 0, 0, 0, 0, t2396, -t2408, -t2550, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2591, t2555, t2422, t2326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2396, -t2408, -t2550, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2423, t2398, t2592, t2327;];
f_new_reg  = t1;
