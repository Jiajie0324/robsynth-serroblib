% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:05:31
% EndTime: 2019-05-06 09:06:23
% DurationCPUTime: 54.55s
% Computational Cost: add. (158688->823), mult. (377921->1188), div. (0->0), fcn. (273912->10), ass. (0->594)
t1121 = sin(qJ(1));
t1124 = cos(qJ(1));
t1120 = sin(qJ(2));
t1123 = cos(qJ(2));
t1116 = sin(pkin(9));
t1118 = cos(pkin(9));
t1195 = qJD(1) * t1123;
t1156 = qJD(2) * t1195;
t1169 = qJDD(1) * t1120;
t1084 = t1156 + t1169;
t1107 = t1123 * qJDD(1);
t1196 = qJD(1) * t1120;
t1161 = qJD(2) * t1196;
t1140 = -t1107 + t1161;
t1034 = t1118 * t1084 - t1116 * t1140;
t1115 = sin(pkin(10));
t1117 = cos(pkin(10));
t1018 = t1115 * qJDD(2) + t1117 * t1034;
t1119 = sin(qJ(5));
t1122 = cos(qJ(5));
t1150 = -t1117 * qJDD(2) + t1034 * t1115;
t1074 = t1116 * t1195 + t1118 * t1196;
t1044 = -qJD(2) * t1117 + t1074 * t1115;
t1046 = qJD(2) * t1115 + t1074 * t1117;
t981 = t1122 * t1044 + t1046 * t1119;
t1130 = -t981 * qJD(5) + t1122 * t1018 - t1119 * t1150;
t1072 = t1116 * t1196 - t1118 * t1195;
t1067 = qJD(5) + t1072;
t1199 = t981 * t1067;
t1244 = t1130 - t1199;
t1033 = t1084 * t1116 + t1118 * t1140;
t1030 = qJDD(5) + t1033;
t983 = -t1044 * t1119 + t1046 * t1122;
t929 = t983 * t981;
t1246 = t1030 + t929;
t1201 = t1122 * t1246;
t1228 = t1067 ^ 2;
t980 = t983 ^ 2;
t935 = -t980 - t1228;
t812 = t1119 * t935 + t1201;
t1208 = t1119 * t1246;
t821 = t1122 * t935 - t1208;
t737 = t1115 * t821 + t1117 * t812;
t696 = t1116 * t737 + t1118 * t1244;
t698 = -t1116 * t1244 + t1118 * t737;
t646 = t1120 * t696 - t1123 * t698;
t735 = t1115 * t812 - t1117 * t821;
t623 = t1121 * t646 + t1124 * t735;
t1362 = pkin(6) * t623;
t625 = -t1121 * t735 + t1124 * t646;
t1361 = pkin(6) * t625;
t636 = t1120 * t698 + t1123 * t696;
t1360 = pkin(7) * t636;
t1359 = -pkin(1) * t636 - pkin(2) * t696 - pkin(3) * t1244 - qJ(4) * t737;
t1358 = -pkin(1) * t735 - pkin(7) * t646;
t1151 = t1119 * t1018 + t1122 * t1150;
t1133 = (-qJD(5) + t1067) * t983 - t1151;
t1231 = t981 ^ 2;
t958 = t1231 - t1228;
t834 = t1119 * t958 + t1201;
t838 = t1122 * t958 - t1208;
t766 = t1115 * t834 - t1117 * t838;
t711 = t1116 * t766 + t1118 * t1133;
t715 = -t1116 * t1133 + t1118 * t766;
t652 = t1120 * t711 - t1123 * t715;
t762 = t1115 * t838 + t1117 * t834;
t1357 = t1121 * t652 - t1124 * t762;
t846 = (qJD(5) + t1067) * t983 + t1151;
t779 = -t1119 * t846 + t1122 * t1244;
t1210 = t1119 * t1244;
t782 = t1122 * t846 + t1210;
t689 = t1115 * t779 + t1117 * t782;
t926 = t980 - t1231;
t678 = t1116 * t689 + t1118 * t926;
t680 = -t1116 * t926 + t1118 * t689;
t621 = t1120 * t678 - t1123 * t680;
t686 = t1115 * t782 - t1117 * t779;
t1356 = t1121 * t621 + t1124 * t686;
t1355 = t1121 * t762 + t1124 * t652;
t1354 = -t1121 * t686 + t1124 * t621;
t1353 = qJ(3) * t696;
t1351 = -pkin(2) * t735 + qJ(3) * t698;
t1350 = t1120 * t680 + t1123 * t678;
t1349 = t1120 * t715 + t1123 * t711;
t1346 = qJ(4) * t735;
t1339 = -pkin(3) * t735 + pkin(4) * t821;
t1243 = -t1199 - t1130;
t1238 = -t1119 * t1243 + t1122 * t1133;
t1239 = t1119 * t1133 + t1122 * t1243;
t1248 = t1115 * t1238 + t1117 * t1239;
t1249 = -t1115 * t1239 + t1117 * t1238;
t873 = t980 + t1231;
t1285 = t1116 * t1249 + t1118 * t873;
t1286 = -t1116 * t873 + t1118 * t1249;
t1300 = -t1120 * t1285 + t1123 * t1286;
t1326 = t1121 * t1248 + t1124 * t1300;
t1337 = pkin(6) * t1326;
t1327 = t1121 * t1300 - t1124 * t1248;
t1336 = pkin(6) * t1327;
t1247 = t1030 - t929;
t1207 = t1119 * t1247;
t959 = -t980 + t1228;
t1270 = t1122 * t959 + t1207;
t890 = t1122 * t1247;
t1271 = -t1119 * t959 + t890;
t1282 = -t1115 * t1271 - t1117 * t1270;
t1281 = -t1115 * t1270 + t1117 * t1271;
t1306 = -t1116 * t1243 + t1118 * t1281;
t1307 = t1116 * t1281 + t1118 * t1243;
t1325 = -t1120 * t1307 + t1123 * t1306;
t1335 = t1121 * t1325 + t1124 * t1282;
t1334 = -t1121 * t1282 + t1124 * t1325;
t1332 = pkin(8) * t812;
t1331 = pkin(8) * t821;
t1301 = t1120 * t1286 + t1123 * t1285;
t1330 = pkin(7) * t1301;
t1329 = -pkin(1) * t1301 - pkin(2) * t1285 - pkin(3) * t873 - qJ(4) * t1249;
t1328 = -pkin(1) * t1248 + pkin(7) * t1300;
t1324 = t1120 * t1306 + t1123 * t1307;
t1242 = -t1228 - t1231;
t1251 = t1122 * t1242 - t1207;
t1257 = t1119 * t1242 + t890;
t1283 = t1115 * t1251 + t1117 * t1257;
t1323 = pkin(1) * t1283;
t1322 = pkin(2) * t1283;
t1321 = qJ(3) * t1285;
t1320 = qJ(4) * t1283;
t1284 = -t1115 * t1257 + t1117 * t1251;
t1319 = qJ(4) * t1284;
t1316 = t1116 * t1284;
t1315 = t1118 * t1284;
t1313 = t1121 * t1283;
t1311 = t1124 * t1283;
t1309 = -pkin(3) * t1283 - pkin(4) * t1257;
t1308 = -pkin(2) * t1248 + qJ(3) * t1286;
t1135 = (-t1119 * t981 - t1122 * t983) * t1067;
t1185 = t1067 * t1122;
t1162 = t981 * t1185;
t1186 = t1067 * t1119;
t953 = t983 * t1186;
t1141 = t953 - t1162;
t1237 = -t1115 * t1141 - t1117 * t1135;
t1236 = -t1115 * t1135 + t1117 * t1141;
t1252 = t1030 * t1116 + t1118 * t1236;
t1255 = -t1118 * t1030 + t1116 * t1236;
t1280 = -t1120 * t1255 + t1123 * t1252;
t1305 = t1121 * t1280 + t1124 * t1237;
t901 = -qJD(5) * t983 - t1151;
t1137 = -t1119 * t901 + t1162;
t1142 = t1122 * t901 + t1186 * t981;
t1234 = -t1115 * t1137 - t1117 * t1142;
t1165 = t1116 * t929;
t1235 = -t1115 * t1142 + t1117 * t1137;
t1253 = t1118 * t1235 - t1165;
t1164 = t1118 * t929;
t1254 = t1116 * t1235 + t1164;
t1278 = -t1120 * t1254 + t1123 * t1253;
t1304 = t1121 * t1278 + t1124 * t1234;
t1303 = -t1121 * t1237 + t1124 * t1280;
t1302 = -t1121 * t1234 + t1124 * t1278;
t1296 = pkin(8) * t1251;
t1295 = pkin(8) * t1257;
t1294 = qJ(4) * t1248;
t1293 = qJ(6) * t1244;
t1288 = pkin(4) * t873 + pkin(8) * t1238;
t654 = -pkin(3) * t1248 - pkin(4) * t1239;
t1279 = t1120 * t1252 + t1123 * t1255;
t1277 = t1120 * t1253 + t1123 * t1254;
t1276 = 2 * qJD(6);
t1272 = pkin(8) * t1239;
t994 = t1046 * t1044;
t1245 = t1033 - t994;
t1269 = t1115 * t1245;
t1032 = t1074 * t1072;
t1241 = -t1032 + qJDD(2);
t1268 = t1116 * t1241;
t1265 = t1117 * t1245;
t1264 = t1118 * t1241;
t843 = t1119 * t1130 + t1185 * t983;
t844 = t1122 * t1130 - t953;
t777 = -t1115 * t843 + t1117 * t844;
t1144 = t1116 * t777 - t1164;
t1145 = t1118 * t777 + t1165;
t1232 = -t1120 * t1144 + t1123 * t1145;
t774 = -t1115 * t844 - t1117 * t843;
t1256 = t1121 * t1232 + t1124 * t774;
t1250 = -t1121 * t774 + t1124 * t1232;
t1017 = t1072 * t1044;
t947 = -t1017 - t1018;
t946 = -t1018 + t1017;
t1065 = qJD(2) * t1072;
t1001 = t1065 - t1034;
t1113 = t1123 ^ 2;
t1125 = qJD(1) ^ 2;
t1109 = t1113 * t1125;
t1230 = qJD(2) ^ 2;
t1101 = -t1109 - t1230;
t1020 = pkin(3) * t1072 - qJ(4) * t1074;
t1094 = g(1) * t1124 + g(2) * t1121;
t1132 = -pkin(1) * t1125 + qJDD(1) * pkin(7) - t1094;
t1131 = t1120 * t1132;
t1171 = t1120 * t1125;
t1197 = qJD(1) * qJD(2);
t1126 = -t1131 - t1084 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t1171 + qJ(3) * t1197 - g(3)) * t1123;
t1055 = -t1120 * g(3) + t1123 * t1132;
t989 = pkin(2) * t1101 + t1107 * qJ(3) + t1055;
t908 = -0.2e1 * qJD(3) * t1072 + t1116 * t1126 + t1118 * t989;
t866 = -pkin(3) * t1230 + qJDD(2) * qJ(4) - t1020 * t1072 + t908;
t1093 = t1121 * g(1) - t1124 * g(2);
t1138 = qJDD(1) * pkin(1) + t1093;
t995 = (qJ(3) * t1113 + pkin(7)) * t1125 - pkin(2) * t1140 - qJDD(3) - (qJD(2) * pkin(2) - qJ(3) * t1196) * t1196 + t1138;
t1194 = qJD(2) * t1074;
t997 = t1033 + t1194;
t889 = t997 * pkin(3) + qJ(4) * t1001 - t995;
t791 = 0.2e1 * qJD(4) * t1046 + t1115 * t866 - t1117 * t889;
t743 = pkin(4) * t1245 + pkin(8) * t947 - t791;
t1004 = pkin(4) * t1072 - pkin(8) * t1046;
t1229 = t1044 ^ 2;
t792 = -0.2e1 * qJD(4) * t1044 + t1115 * t889 + t1117 * t866;
t750 = -pkin(4) * t1229 - pkin(8) * t1150 - t1072 * t1004 + t792;
t676 = t1119 * t743 + t1122 * t750;
t924 = pkin(5) * t981 - qJ(6) * t983;
t1139 = t1030 * qJ(6) + t1067 * t1276 - t981 * t924 + t676;
t1240 = -t901 * pkin(5) - t1293;
t1233 = t1120 * t1145 + t1123 * t1144;
t1043 = t1046 ^ 2;
t1227 = t1072 ^ 2;
t1071 = t1074 ^ 2;
t1226 = pkin(3) * t1116;
t1225 = pkin(5) * t1122;
t675 = t1119 * t750 - t1122 * t743;
t1224 = qJ(6) * t1122;
t1223 = t1067 * t983;
t618 = t1119 * t676 - t1122 * t675;
t1222 = t1115 * t618;
t1153 = t1116 * t989 - t1118 * t1126;
t1134 = -qJDD(2) * pkin(3) - t1230 * qJ(4) + qJDD(4) + t1153;
t1152 = (0.2e1 * qJD(3) + t1020) * t1074;
t865 = t1152 + t1134;
t1221 = t1115 * t865;
t950 = t1033 + t994;
t1220 = t1115 * t950;
t1218 = t1116 * t995;
t1217 = t1117 * t618;
t1216 = t1117 * t865;
t1215 = t1117 * t950;
t1213 = t1118 * t995;
t1129 = t1150 * pkin(4) - t1229 * pkin(8) + t1046 * t1004 + t1134;
t800 = t1152 + t1129;
t1212 = t1119 * t800;
t1193 = qJD(3) * t1074;
t907 = t1153 + 0.2e1 * t1193;
t814 = t1116 * t908 - t1118 * t907;
t1205 = t1120 * t814;
t1203 = t1122 * t800;
t1200 = t1123 * t814;
t1198 = -t1228 + t873;
t1023 = qJDD(2) + t1032;
t1191 = t1023 * t1116;
t1190 = t1023 * t1118;
t1188 = t1033 * t1116;
t1187 = t1046 * t1072;
t1184 = t1072 * t1115;
t1183 = t1072 * t1116;
t1182 = t1072 * t1117;
t1181 = t1072 * t1118;
t1180 = t1074 * t1116;
t1179 = t1074 * t1118;
t1078 = t1125 * pkin(7) + t1138;
t1178 = t1078 * t1120;
t1177 = t1078 * t1123;
t1085 = t1107 - 0.2e1 * t1161;
t1176 = t1085 * t1123;
t1102 = t1123 * t1171;
t1091 = qJDD(2) + t1102;
t1175 = t1091 * t1120;
t1092 = qJDD(2) - t1102;
t1174 = t1092 * t1120;
t1173 = t1092 * t1123;
t1112 = t1120 ^ 2;
t1172 = t1112 * t1125;
t1170 = t1112 + t1113;
t1168 = qJDD(1) * t1121;
t1167 = qJDD(1) * t1124;
t1166 = qJDD(2) * t1124;
t1163 = -pkin(3) * t1118 - pkin(2);
t1160 = t1116 * t994;
t1159 = t1118 * t994;
t1158 = t1121 * t1032;
t1157 = t1124 * t1032;
t1155 = -qJ(6) * t1119 - pkin(4);
t815 = t1116 * t907 + t1118 * t908;
t619 = t1119 * t675 + t1122 * t676;
t1054 = t1123 * g(3) + t1131;
t992 = t1054 * t1120 + t1123 * t1055;
t1047 = -t1093 * t1121 - t1124 * t1094;
t1148 = t983 * t924 + qJDD(6) + t675;
t1147 = t1121 * t1102;
t1146 = t1124 * t1102;
t1088 = -t1121 * t1125 + t1167;
t1143 = -pkin(6) * t1088 - g(3) * t1121;
t701 = t1115 * t792 - t1117 * t791;
t702 = t1115 * t791 + t1117 * t792;
t991 = t1054 * t1123 - t1055 * t1120;
t1045 = t1093 * t1124 - t1094 * t1121;
t1136 = -t1030 * pkin(5) + t1148;
t999 = -t1033 + t1194;
t948 = t1150 - t1187;
t1127 = -t1074 * t1020 + t1276 * t983 - t1129 - 0.2e1 * t1193 - t1240;
t1106 = t1121 * qJDD(2);
t1100 = t1109 - t1230;
t1099 = -t1172 - t1230;
t1098 = -t1172 + t1230;
t1090 = t1109 - t1172;
t1089 = t1109 + t1172;
t1087 = t1124 * t1125 + t1168;
t1086 = t1170 * qJDD(1);
t1083 = 0.2e1 * t1156 + t1169;
t1081 = t1123 * t1091;
t1080 = t1170 * t1197;
t1068 = -pkin(6) * t1087 + g(3) * t1124;
t1061 = -t1071 + t1230;
t1060 = -t1071 - t1230;
t1059 = t1227 - t1230;
t1057 = t1084 * t1123 - t1112 * t1197;
t1056 = -t1113 * t1197 + t1120 * t1140;
t1053 = -t1099 * t1120 - t1173;
t1052 = -t1098 * t1120 + t1081;
t1051 = t1101 * t1123 - t1175;
t1050 = t1100 * t1123 - t1174;
t1049 = t1099 * t1123 - t1174;
t1048 = t1101 * t1120 + t1081;
t1040 = t1086 * t1124 - t1089 * t1121;
t1039 = t1086 * t1121 + t1089 * t1124;
t1035 = -t1083 * t1120 + t1176;
t1029 = -t1071 + t1227;
t1027 = t1118 * t1033;
t1021 = -t1227 - t1230;
t1015 = (t1180 - t1181) * qJD(2);
t1014 = (-t1179 - t1183) * qJD(2);
t1013 = t1053 * t1124 + t1083 * t1121;
t1012 = t1051 * t1124 - t1085 * t1121;
t1011 = t1053 * t1121 - t1083 * t1124;
t1010 = t1051 * t1121 + t1085 * t1124;
t1009 = -t1043 + t1227;
t1008 = -t1227 + t1229;
t1006 = -pkin(7) * t1049 - t1177;
t1005 = -pkin(7) * t1048 - t1178;
t1003 = -pkin(1) * t1049 + t1055;
t1002 = -pkin(1) * t1048 + t1054;
t1000 = -t1065 - t1034;
t996 = -t1227 - t1071;
t993 = -t1043 + t1229;
t988 = -qJD(2) * t1180 + t1034 * t1118;
t987 = qJD(2) * t1179 + t1034 * t1116;
t986 = qJD(2) * t1181 + t1188;
t985 = qJD(2) * t1183 - t1027;
t975 = -t1043 - t1227;
t973 = -t1060 * t1116 - t1190;
t972 = -t1061 * t1116 + t1264;
t971 = t1059 * t1118 - t1191;
t970 = t1060 * t1118 - t1191;
t969 = t1061 * t1118 + t1268;
t968 = t1059 * t1116 + t1190;
t967 = -t1227 - t1229;
t962 = -t1078 * t1121 + t1124 * t992;
t961 = t1078 * t1124 + t1121 * t992;
t956 = t1043 + t1229;
t955 = t1021 * t1118 - t1268;
t954 = t1021 * t1116 + t1264;
t943 = -t1150 - t1187;
t942 = t1018 * t1117 - t1046 * t1184;
t941 = -t1018 * t1115 - t1046 * t1182;
t940 = t1044 * t1182 + t1115 * t1150;
t939 = -t1044 * t1184 + t1117 * t1150;
t938 = (-t1044 * t1117 + t1046 * t1115) * t1072;
t937 = (t1044 * t1115 + t1046 * t1117) * t1072;
t936 = -t1014 * t1120 + t1015 * t1123;
t933 = -t1000 * t1116 + t1118 * t999;
t932 = t1001 * t1116 - t1118 * t997;
t931 = t1000 * t1118 + t1116 * t999;
t930 = -t1001 * t1118 - t1116 * t997;
t925 = -qJ(3) * t970 - t1213;
t923 = -t1120 * t987 + t1123 * t988;
t922 = -t1120 * t985 + t1123 * t986;
t921 = t1118 * t938 + t1188;
t920 = t1116 * t938 - t1027;
t919 = -t1120 * t970 + t1123 * t973;
t918 = -t1120 * t969 + t1123 * t972;
t917 = -t1120 * t968 + t1123 * t971;
t916 = t1120 * t973 + t1123 * t970;
t915 = t1008 * t1117 - t1220;
t914 = -t1009 * t1115 + t1265;
t913 = -t1008 * t1115 - t1215;
t912 = -t1009 * t1117 - t1269;
t911 = -qJ(3) * t954 - t1218;
t905 = t1118 * t942 + t1160;
t904 = t1118 * t940 - t1160;
t903 = t1116 * t942 - t1159;
t902 = t1116 * t940 + t1159;
t895 = -t1115 * t975 - t1215;
t894 = t1117 * t975 - t1220;
t882 = t1117 * t967 - t1269;
t881 = t1115 * t967 + t1265;
t880 = -t1120 * t954 + t1123 * t955;
t879 = t1120 * t955 + t1123 * t954;
t878 = pkin(2) * t1001 + qJ(3) * t973 - t1218;
t877 = -t1115 * t947 - t1117 * t948;
t876 = t1115 * t946 + t1117 * t943;
t875 = -t1115 * t948 + t1117 * t947;
t874 = -t1115 * t943 + t1117 * t946;
t869 = -pkin(2) * t997 + qJ(3) * t955 + t1213;
t868 = -t1001 * t1121 + t1124 * t919;
t867 = t1001 * t1124 + t1121 * t919;
t863 = t1121 * t997 + t1124 * t880;
t862 = -t1120 * t931 + t1123 * t933;
t861 = -t1120 * t930 + t1123 * t932;
t860 = t1121 * t880 - t1124 * t997;
t859 = t1120 * t933 + t1123 * t931;
t858 = -t1116 * t948 + t1118 * t915;
t857 = -t1116 * t947 + t1118 * t914;
t856 = t1116 * t915 + t1118 * t948;
t855 = t1116 * t914 + t1118 * t947;
t847 = -t901 + t1223;
t830 = -t1116 * t993 + t1118 * t876;
t829 = t1116 * t876 + t1118 * t993;
t828 = -t1116 * t946 + t1118 * t895;
t827 = t1116 * t895 + t1118 * t946;
t826 = -t1116 * t943 + t1118 * t882;
t825 = t1116 * t882 + t1118 * t943;
t820 = -t1116 * t956 + t1118 * t877;
t819 = t1116 * t877 + t1118 * t956;
t818 = -t1120 * t920 + t1123 * t921;
t817 = t1121 * t996 + t1124 * t862;
t816 = t1121 * t862 - t1124 * t996;
t809 = -t1120 * t903 + t1123 * t905;
t808 = -t1120 * t902 + t1123 * t904;
t803 = -pkin(1) * t859 - pkin(2) * t931;
t802 = -pkin(1) * t916 - pkin(2) * t970 + t908;
t801 = pkin(2) * t995 + qJ(3) * t815;
t799 = -qJ(4) * t894 + t1216;
t798 = -qJ(4) * t881 + t1221;
t793 = -pkin(1) * t879 - pkin(2) * t954 + t907;
t790 = -qJ(3) * t931 - t814;
t789 = -pkin(7) * t916 - t1120 * t878 + t1123 * t925;
t788 = -pkin(2) * t996 + qJ(3) * t933 + t815;
t787 = -t1120 * t856 + t1123 * t858;
t786 = -t1120 * t855 + t1123 * t857;
t768 = -t1120 * t829 + t1123 * t830;
t759 = -t1120 * t827 + t1123 * t828;
t758 = t1120 * t828 + t1123 * t827;
t757 = -pkin(7) * t879 - t1120 * t869 + t1123 * t911;
t756 = -t1120 * t825 + t1123 * t826;
t755 = t1120 * t826 + t1123 * t825;
t747 = -t1120 * t819 + t1123 * t820;
t746 = t1120 * t820 + t1123 * t819;
t745 = -pkin(3) * t894 + t792;
t744 = -pkin(3) * t881 + t791;
t740 = t1123 * t815 - t1205;
t739 = t1120 * t815 + t1200;
t734 = t1203 - t1331;
t725 = -t1121 * t995 + t1124 * t740;
t724 = t1121 * t740 + t1124 * t995;
t723 = t1212 - t1295;
t722 = t1121 * t894 + t1124 * t759;
t721 = t1121 * t759 - t1124 * t894;
t720 = t1121 * t881 + t1124 * t756;
t719 = t1121 * t756 - t1124 * t881;
t718 = t1121 * t875 + t1124 * t747;
t717 = t1121 * t747 - t1124 * t875;
t706 = t1116 * t847 + t1315;
t704 = -t1118 * t847 + t1316;
t700 = -pkin(4) * t1244 + t1212 - t1332;
t699 = t1116 * t846 + t1315;
t697 = -t1118 * t846 + t1316;
t695 = -pkin(1) * t739 - pkin(2) * t814;
t694 = (pkin(5) * t1067 - (2 * qJD(6))) * t983 + t800 + t1240;
t693 = -pkin(4) * t846 - t1203 + t1296;
t684 = -qJ(4) * t875 - t701;
t683 = t1116 * t865 + t1118 * t702;
t682 = t1116 * t702 - t1118 * t865;
t677 = -pkin(7) * t859 - t1120 * t788 + t1123 * t790;
t674 = t1127 + (-t847 - t1223) * pkin(5);
t673 = -pkin(5) * t1223 + t1127 + t1293;
t667 = -qJ(3) * t827 - t1116 * t745 + t1118 * t799;
t666 = -qJ(3) * t825 - t1116 * t744 + t1118 * t798;
t665 = -pkin(1) * t758 - pkin(2) * t827 - pkin(3) * t946 - qJ(4) * t895 - t1221;
t664 = -pkin(7) * t739 - qJ(3) * t1200 - t1120 * t801;
t659 = -pkin(1) * t755 - pkin(2) * t825 - pkin(3) * t943 - qJ(4) * t882 + t1216;
t658 = -pkin(2) * t894 + qJ(3) * t828 + t1116 * t799 + t1118 * t745;
t657 = qJ(6) * t1228 - t1136;
t656 = -pkin(2) * t881 + qJ(3) * t826 + t1116 * t798 + t1118 * t744;
t655 = -pkin(5) * t1228 + t1139;
t653 = -qJ(3) * t819 + t1118 * t684 + t1226 * t875;
t648 = qJ(6) * t1198 + t1136;
t647 = -t1120 * t704 + t1123 * t706;
t645 = t1120 * t706 + t1123 * t704;
t643 = pkin(5) * t1198 + t1139;
t642 = -t1119 * t674 - t1224 * t847 - t1295;
t641 = qJ(3) * t820 + t1116 * t684 + t1163 * t875;
t640 = -pkin(5) * t1210 + t1122 * t673 + t1331;
t639 = -t1120 * t697 + t1123 * t699;
t637 = t1120 * t699 + t1123 * t697;
t635 = t1122 * t674 + t1155 * t847 + t1296;
t634 = -pkin(1) * t746 - pkin(2) * t819 - pkin(3) * t956 - qJ(4) * t877 - t702;
t633 = t1332 + t1119 * t673 + (pkin(4) + t1225) * t1244;
t632 = -pkin(5) * t1243 - qJ(6) * t1133 + t654;
t631 = -t1339 + t676;
t630 = -t1115 * t700 + t1117 * t734 + t1346;
t629 = t1309 + t675;
t628 = -t1120 * t682 + t1123 * t683;
t627 = t1120 * t683 + t1123 * t682;
t626 = t1124 * t647 + t1313;
t624 = t1121 * t647 - t1311;
t622 = -t1115 * t693 + t1117 * t723 - t1320;
t613 = t1124 * t639 + t1313;
t611 = t1121 * t639 - t1311;
t609 = (-t1228 - t1242) * qJ(6) + (-t1030 - t1247) * pkin(5) + t1148 + t1309;
t608 = -pkin(4) * t800 + pkin(8) * t619;
t607 = -qJ(6) * t1246 + (t1228 + t935) * pkin(5) - t1139 + t1339;
t606 = -qJ(3) * t682 + (-qJ(4) * t1118 + t1226) * t701;
t605 = -t618 - t1272;
t604 = -t1119 * t657 + t1122 * t655;
t603 = t1119 * t655 + t1122 * t657;
t602 = t1121 * t701 + t1124 * t628;
t601 = t1121 * t628 - t1124 * t701;
t600 = t1288 + t619;
t599 = -pkin(7) * t758 - t1120 * t658 + t1123 * t667;
t598 = -pkin(7) * t755 - t1120 * t656 + t1123 * t666;
t593 = qJ(3) * t683 + (-qJ(4) * t1116 + t1163) * t701;
t592 = -t1119 * t643 + t1122 * t648 - t1272;
t591 = -pkin(7) * t746 - t1120 * t641 + t1123 * t653;
t590 = t1119 * t648 + t1122 * t643 + t1288;
t589 = -t1115 * t635 + t1117 * t642 - t1320;
t588 = -pkin(1) * t627 - pkin(2) * t682 + pkin(3) * t865 - qJ(4) * t702;
t587 = -t1115 * t633 + t1117 * t640 - t1346;
t586 = t1117 * t619 - t1222;
t585 = t1115 * t619 + t1217;
t584 = -pkin(8) * t603 + (pkin(5) * t1119 - t1224) * t694;
t583 = -t1115 * t734 - t1117 * t700 - t1359;
t582 = -t1116 * t631 + t1118 * t630 + t1353;
t581 = t1116 * t800 + t1118 * t586;
t580 = t1116 * t586 - t1118 * t800;
t579 = -pkin(1) * t637 - pkin(2) * t697 + pkin(3) * t846 - t1115 * t723 - t1117 * t693 - t1319;
t578 = -qJ(3) * t697 - t1116 * t629 + t1118 * t622;
t577 = t1116 * t630 + t1118 * t631 - t1351;
t576 = pkin(8) * t604 + (t1155 - t1225) * t694;
t575 = -t1115 * t603 + t1117 * t604;
t574 = t1115 * t604 + t1117 * t603;
t573 = qJ(3) * t699 + t1116 * t622 + t1118 * t629 - t1322;
t572 = t1116 * t694 + t1118 * t575;
t571 = t1116 * t575 - t1118 * t694;
t570 = -pkin(1) * t645 - pkin(2) * t704 + pkin(3) * t847 - t1115 * t642 - t1117 * t635 - t1319;
t569 = -t1115 * t600 + t1117 * t605 - t1294;
t568 = -pkin(3) * t585 - pkin(4) * t618;
t567 = -t1115 * t640 - t1117 * t633 + t1359;
t566 = -qJ(3) * t704 - t1116 * t609 + t1118 * t589;
t565 = -t1116 * t607 + t1118 * t587 - t1353;
t564 = qJ(3) * t706 + t1116 * t589 + t1118 * t609 - t1322;
t563 = -pkin(7) * t627 - t1120 * t593 + t1123 * t606;
t562 = t1116 * t587 + t1118 * t607 + t1351;
t561 = -t1115 * t590 + t1117 * t592 - t1294;
t560 = -t1116 * t654 + t1118 * t569 - t1321;
t559 = -pkin(8) * t1217 - qJ(4) * t585 - t1115 * t608;
t558 = -t1120 * t580 + t1123 * t581;
t557 = t1120 * t581 + t1123 * t580;
t556 = t1116 * t569 + t1118 * t654 + t1308;
t555 = -t1115 * t605 - t1117 * t600 + t1329;
t554 = -pkin(3) * t574 - pkin(4) * t603 - pkin(5) * t657 - qJ(6) * t655;
t553 = -t1116 * t632 + t1118 * t561 - t1321;
t552 = -t1120 * t577 + t1123 * t582 + t1360;
t551 = -t1115 * t592 - t1117 * t590 + t1329;
t550 = t1116 * t561 + t1118 * t632 + t1308;
t549 = -pkin(7) * t637 - t1120 * t573 + t1123 * t578;
t548 = -t1120 * t571 + t1123 * t572;
t547 = t1120 * t572 + t1123 * t571;
t546 = t1121 * t585 + t1124 * t558;
t545 = t1121 * t558 - t1124 * t585;
t544 = -qJ(4) * t574 - t1115 * t576 + t1117 * t584;
t543 = -pkin(7) * t645 - t1120 * t564 + t1123 * t566;
t542 = -t1120 * t562 + t1123 * t565 - t1360;
t541 = t1121 * t574 + t1124 * t548;
t540 = t1121 * t548 - t1124 * t574;
t539 = -qJ(3) * t580 - t1116 * t568 + t1118 * t559;
t538 = -t1120 * t556 + t1123 * t560 - t1330;
t537 = -pkin(1) * t557 - pkin(2) * t580 + pkin(3) * t800 + pkin(8) * t1222 - qJ(4) * t586 - t1117 * t608;
t536 = -pkin(2) * t585 + qJ(3) * t581 + t1116 * t559 + t1118 * t568;
t535 = -t1120 * t550 + t1123 * t553 - t1330;
t534 = -qJ(3) * t571 - t1116 * t554 + t1118 * t544;
t533 = -pkin(1) * t547 - pkin(2) * t571 + pkin(3) * t694 - qJ(4) * t575 - t1115 * t584 - t1117 * t576;
t532 = -pkin(2) * t574 + qJ(3) * t572 + t1116 * t544 + t1118 * t554;
t531 = -pkin(7) * t557 - t1120 * t536 + t1123 * t539;
t530 = -pkin(7) * t547 - t1120 * t532 + t1123 * t534;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1087, -t1088, 0, t1047, 0, 0, 0, 0, 0, 0, t1012, t1013, t1040, t962, 0, 0, 0, 0, 0, 0, t863, t868, t817, t725, 0, 0, 0, 0, 0, 0, t720, t722, t718, t602, 0, 0, 0, 0, 0, 0, t613, t625, t1326, t546, 0, 0, 0, 0, 0, 0, t626, t1326, -t625, t541; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1088, -t1087, 0, t1045, 0, 0, 0, 0, 0, 0, t1010, t1011, t1039, t961, 0, 0, 0, 0, 0, 0, t860, t867, t816, t724, 0, 0, 0, 0, 0, 0, t719, t721, t717, t601, 0, 0, 0, 0, 0, 0, t611, t623, t1327, t545, 0, 0, 0, 0, 0, 0, t624, t1327, -t623, t540; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1048, t1049, 0, -t991, 0, 0, 0, 0, 0, 0, t879, t916, t859, t739, 0, 0, 0, 0, 0, 0, t755, t758, t746, t627, 0, 0, 0, 0, 0, 0, t637, -t636, t1301, t557, 0, 0, 0, 0, 0, 0, t645, t1301, t636, t547; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1088, 0, -t1087, 0, t1143, -t1068, -t1045, -pkin(6) * t1045, t1057 * t1124 - t1147, t1035 * t1124 - t1090 * t1121, t1052 * t1124 + t1120 * t1168, t1056 * t1124 + t1147, t1050 * t1124 + t1107 * t1121, t1080 * t1124 + t1106, -pkin(6) * t1010 - t1002 * t1121 + t1005 * t1124, -pkin(6) * t1011 - t1003 * t1121 + t1006 * t1124, -pkin(6) * t1039 + t1124 * t991, -pkin(6) * t961 - (pkin(1) * t1121 - pkin(7) * t1124) * t991, t1124 * t923 + t1158, -t1029 * t1121 + t1124 * t861, -t1000 * t1121 + t1124 * t918, t1124 * t922 - t1158, t1121 * t999 + t1124 * t917, t1124 * t936 + t1106, -pkin(6) * t860 - t1121 * t793 + t1124 * t757, -pkin(6) * t867 - t1121 * t802 + t1124 * t789, -pkin(6) * t816 - t1121 * t803 + t1124 * t677, -pkin(6) * t724 - t1121 * t695 + t1124 * t664, -t1121 * t941 + t1124 * t809, -t1121 * t874 + t1124 * t768, -t1121 * t912 + t1124 * t786, -t1121 * t939 + t1124 * t808, -t1121 * t913 + t1124 * t787, -t1121 * t937 + t1124 * t818, -pkin(6) * t719 - t1121 * t659 + t1124 * t598, -pkin(6) * t721 - t1121 * t665 + t1124 * t599, -pkin(6) * t717 - t1121 * t634 + t1124 * t591, -pkin(6) * t601 - t1121 * t588 + t1124 * t563, t1250, t1354, t1334, t1302, t1355, t1303, -pkin(6) * t611 - t1121 * t579 + t1124 * t549, -t1121 * t583 + t1124 * t552 - t1362, -t1121 * t555 + t1124 * t538 - t1336, -pkin(6) * t545 - t1121 * t537 + t1124 * t531, t1250, t1334, -t1354, t1303, -t1355, t1302, -pkin(6) * t624 - t1121 * t570 + t1124 * t543, -t1121 * t551 + t1124 * t535 - t1336, -t1121 * t567 + t1124 * t542 + t1362, -pkin(6) * t540 - t1121 * t533 + t1124 * t530; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1087, 0, t1088, 0, t1068, t1143, t1047, pkin(6) * t1047, t1057 * t1121 + t1146, t1035 * t1121 + t1090 * t1124, t1052 * t1121 - t1120 * t1167, t1056 * t1121 - t1146, t1050 * t1121 - t1107 * t1124, t1080 * t1121 - t1166, pkin(6) * t1012 + t1002 * t1124 + t1005 * t1121, pkin(6) * t1013 + t1003 * t1124 + t1006 * t1121, pkin(6) * t1040 + t1121 * t991, pkin(6) * t962 - (-pkin(1) * t1124 - pkin(7) * t1121) * t991, t1121 * t923 - t1157, t1029 * t1124 + t1121 * t861, t1000 * t1124 + t1121 * t918, t1121 * t922 + t1157, t1121 * t917 - t1124 * t999, t1121 * t936 - t1166, pkin(6) * t863 + t1121 * t757 + t1124 * t793, pkin(6) * t868 + t1121 * t789 + t1124 * t802, pkin(6) * t817 + t1121 * t677 + t1124 * t803, pkin(6) * t725 + t1121 * t664 + t1124 * t695, t1121 * t809 + t1124 * t941, t1121 * t768 + t1124 * t874, t1121 * t786 + t1124 * t912, t1121 * t808 + t1124 * t939, t1121 * t787 + t1124 * t913, t1121 * t818 + t1124 * t937, pkin(6) * t720 + t1121 * t598 + t1124 * t659, pkin(6) * t722 + t1121 * t599 + t1124 * t665, pkin(6) * t718 + t1121 * t591 + t1124 * t634, pkin(6) * t602 + t1121 * t563 + t1124 * t588, t1256, t1356, t1335, t1304, t1357, t1305, pkin(6) * t613 + t1121 * t549 + t1124 * t579, t1121 * t552 + t1124 * t583 + t1361, t1121 * t538 + t1124 * t555 + t1337, pkin(6) * t546 + t1121 * t531 + t1124 * t537, t1256, t1335, -t1356, t1305, -t1357, t1304, pkin(6) * t626 + t1121 * t543 + t1124 * t570, t1121 * t535 + t1124 * t551 + t1337, t1121 * t542 + t1124 * t567 - t1361, pkin(6) * t541 + t1121 * t530 + t1124 * t533; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1093, t1094, 0, 0, (t1084 + t1156) * t1120, t1083 * t1123 + t1085 * t1120, t1098 * t1123 + t1175, t1176, t1100 * t1120 + t1173, 0, pkin(1) * t1085 + pkin(7) * t1051 + t1177, -pkin(1) * t1083 + pkin(7) * t1053 - t1178, pkin(1) * t1089 + pkin(7) * t1086 + t992, pkin(1) * t1078 + pkin(7) * t992, t1120 * t988 + t1123 * t987, t1120 * t932 + t1123 * t930, t1120 * t972 + t1123 * t969, t1120 * t986 + t1123 * t985, t1120 * t971 + t1123 * t968, t1014 * t1123 + t1015 * t1120, -pkin(1) * t997 + pkin(7) * t880 + t1120 * t911 + t1123 * t869, pkin(1) * t1001 + pkin(7) * t919 + t1120 * t925 + t1123 * t878, -pkin(1) * t996 + pkin(7) * t862 + t1120 * t790 + t1123 * t788, pkin(1) * t995 + pkin(7) * t740 - qJ(3) * t1205 + t1123 * t801, t1120 * t905 + t1123 * t903, t1120 * t830 + t1123 * t829, t1120 * t857 + t1123 * t855, t1120 * t904 + t1123 * t902, t1120 * t858 + t1123 * t856, t1120 * t921 + t1123 * t920, -pkin(1) * t881 + pkin(7) * t756 + t1120 * t666 + t1123 * t656, -pkin(1) * t894 + pkin(7) * t759 + t1120 * t667 + t1123 * t658, -pkin(1) * t875 + pkin(7) * t747 + t1120 * t653 + t1123 * t641, -pkin(1) * t701 + pkin(7) * t628 + t1120 * t606 + t1123 * t593, t1233, -t1350, t1324, t1277, -t1349, t1279, pkin(7) * t639 + t1120 * t578 + t1123 * t573 - t1323, t1120 * t582 + t1123 * t577 - t1358, t1120 * t560 + t1123 * t556 + t1328, -pkin(1) * t585 + pkin(7) * t558 + t1120 * t539 + t1123 * t536, t1233, t1324, t1350, t1279, t1349, t1277, pkin(7) * t647 + t1120 * t566 + t1123 * t564 - t1323, t1120 * t553 + t1123 * t550 + t1328, t1120 * t565 + t1123 * t562 + t1358, -pkin(1) * t574 + pkin(7) * t548 + t1120 * t534 + t1123 * t532;];
tauB_reg  = t1;
