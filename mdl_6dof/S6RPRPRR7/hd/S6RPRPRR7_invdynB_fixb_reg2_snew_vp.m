% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 19:14
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:13:50
% EndTime: 2019-05-05 19:14:09
% DurationCPUTime: 17.97s
% Computational Cost: add. (113474->730), mult. (254935->1085), div. (0->0), fcn. (183396->10), ass. (0->486)
t908 = 2 * qJD(4);
t801 = sin(pkin(10));
t802 = cos(pkin(10));
t809 = cos(qJ(3));
t854 = qJD(1) * t809;
t805 = sin(qJ(3));
t855 = qJD(1) * t805;
t757 = -t801 * t854 - t802 * t855;
t758 = -t801 * t855 + t802 * t854;
t722 = t757 * t758;
t899 = qJDD(3) + t722;
t907 = t801 * t899;
t906 = t802 * t899;
t803 = sin(qJ(6));
t804 = sin(qJ(5));
t808 = cos(qJ(5));
t712 = t757 * t804 + t758 * t808;
t797 = qJD(3) + qJD(5);
t807 = cos(qJ(6));
t685 = t712 * t803 - t797 * t807;
t687 = t712 * t807 + t797 * t803;
t642 = t687 * t685;
t847 = qJD(1) * qJD(3);
t831 = t809 * t847;
t845 = qJDD(1) * t805;
t766 = -t831 - t845;
t832 = t805 * t847;
t843 = qJDD(1) * t809;
t767 = -t832 + t843;
t723 = t766 * t802 - t767 * t801;
t724 = t766 * t801 + t767 * t802;
t829 = -t723 * t808 + t804 * t724;
t635 = -qJD(5) * t712 - t829;
t816 = qJDD(6) - t635;
t901 = -t642 + t816;
t905 = t803 * t901;
t710 = -t757 * t808 + t758 * t804;
t661 = t712 * t710;
t796 = qJDD(3) + qJDD(5);
t900 = -t661 + t796;
t904 = t804 * t900;
t903 = t807 * t901;
t902 = t808 * t900;
t636 = -qJD(5) * t710 + t723 * t804 + t724 * t808;
t874 = t710 * t797;
t820 = t636 - t874;
t594 = -qJD(6) * t685 + t636 * t807 + t796 * t803;
t707 = qJD(6) + t710;
t650 = t707 * t685;
t570 = -t650 + t594;
t853 = qJD(3) * t757;
t692 = -t724 + t853;
t812 = qJD(1) ^ 2;
t858 = t809 * t812;
t806 = sin(qJ(1));
t810 = cos(qJ(1));
t776 = t806 * g(1) - g(2) * t810;
t823 = qJDD(2) - t776;
t817 = -t812 * qJ(2) + t823;
t895 = pkin(7) + pkin(1);
t743 = -qJDD(1) * t895 + t817;
t859 = t809 * t743;
t675 = qJDD(3) * pkin(3) - t767 * qJ(4) + t859 + (-pkin(3) * t858 - qJ(4) * t847 + g(3)) * t805;
t727 = -t809 * g(3) + t743 * t805;
t819 = qJD(3) * pkin(3) - qJ(4) * t854;
t799 = t805 ^ 2;
t863 = t799 * t812;
t676 = -pkin(3) * t863 + t766 * qJ(4) - qJD(3) * t819 + t727;
t613 = t675 * t801 + t676 * t802 + t757 * t908;
t755 = t757 ^ 2;
t822 = qJD(3) * pkin(4) - pkin(8) * t758;
t898 = t723 * pkin(4) + t755 * pkin(8) - t758 * t822;
t830 = t803 * t636 - t796 * t807;
t567 = (qJD(6) - t707) * t687 + t830;
t777 = t810 * g(1) + t806 * g(2);
t798 = qJDD(1) * qJ(2);
t821 = t777 - t798;
t897 = -t766 * pkin(3) - (qJ(4) * t799 + t895) * t812 + t819 * t854 + qJDD(4) - t821;
t683 = t685 ^ 2;
t684 = t687 ^ 2;
t706 = t707 ^ 2;
t708 = t710 ^ 2;
t709 = t712 ^ 2;
t756 = t758 ^ 2;
t896 = t797 ^ 2;
t894 = pkin(5) * t804;
t891 = qJDD(1) * pkin(1);
t581 = -t755 * pkin(4) + t723 * pkin(8) - qJD(3) * t822 + t613;
t612 = -t802 * t675 + t801 * t676 + t758 * t908;
t813 = pkin(4) * t899 + pkin(8) * t692 - t612;
t519 = t581 * t804 - t808 * t813;
t520 = t581 * t808 + t804 * t813;
t463 = -t519 * t808 + t520 * t804;
t890 = t463 * t801;
t889 = t463 * t802;
t657 = pkin(5) * t710 - pkin(9) * t712;
t498 = -pkin(5) * t796 - pkin(9) * t896 + t657 * t712 + t519;
t888 = t498 * t803;
t887 = t498 * t807;
t552 = -t612 * t802 + t613 * t801;
t886 = t552 * t805;
t885 = t552 * t809;
t583 = t642 + t816;
t884 = t583 * t803;
t883 = t583 * t807;
t846 = qJD(2) * qJD(1);
t841 = -0.2e1 * t846;
t677 = t841 - t897;
t614 = t677 + t898;
t882 = t614 * t804;
t881 = t614 * t808;
t655 = t661 + t796;
t880 = t655 * t804;
t879 = t655 * t808;
t878 = t677 * t801;
t877 = t677 * t802;
t876 = t707 * t803;
t875 = t707 * t807;
t716 = qJDD(3) - t722;
t873 = t716 * t801;
t872 = t716 * t802;
t800 = t809 ^ 2;
t856 = t799 + t800;
t769 = t856 * qJDD(1);
t871 = t769 * t806;
t870 = t769 * t810;
t834 = t805 * t858;
t774 = qJDD(3) + t834;
t869 = t774 * t805;
t868 = t774 * t809;
t775 = qJDD(3) - t834;
t867 = t775 * t805;
t866 = t775 * t809;
t865 = t797 * t804;
t864 = t797 * t808;
t862 = t800 * t812;
t740 = t812 * t895 + t821 + t841;
t861 = t805 * t740;
t860 = t809 * t740;
t499 = -pkin(5) * t896 + pkin(9) * t796 - t657 * t710 + t520;
t794 = 0.2e1 * t846;
t522 = t794 - t820 * pkin(9) + (t712 * t797 - t635) * pkin(5) + t897 - t898;
t459 = t499 * t807 + t522 * t803;
t852 = qJD(3) * t758;
t851 = qJD(3) * t801;
t850 = qJD(3) * t802;
t844 = qJDD(1) * t806;
t842 = qJDD(1) * t810;
t840 = t804 * t642;
t839 = t808 * t642;
t838 = t806 * t661;
t837 = t810 * t661;
t836 = t806 * t722;
t835 = t810 * t722;
t833 = -pkin(5) * t808 - pkin(4);
t458 = t499 * t803 - t522 * t807;
t422 = t458 * t803 + t459 * t807;
t464 = t519 * t804 + t520 * t808;
t553 = t612 * t801 + t613 * t802;
t748 = -t812 * pkin(1) + t794 - t821;
t750 = -t817 + t891;
t700 = t748 * t810 - t750 * t806;
t731 = -t776 * t806 - t777 * t810;
t828 = t806 * t834;
t827 = t810 * t834;
t770 = -t806 * t812 + t842;
t825 = pkin(6) * t770 + g(3) * t806;
t771 = t810 * t812 + t844;
t824 = -pkin(6) * t771 + g(3) * t810;
t726 = t805 * g(3) + t859;
t421 = -t458 * t807 + t459 * t803;
t666 = t809 * t726 + t805 * t727;
t667 = -t726 * t805 + t727 * t809;
t697 = t748 * t806 + t750 * t810;
t730 = t776 * t810 - t777 * t806;
t818 = t723 + t852;
t815 = (-qJD(5) + t797) * t712 - t829;
t811 = qJD(3) ^ 2;
t792 = t810 * qJDD(3);
t791 = t806 * qJDD(3);
t784 = -t811 - t862;
t783 = t811 - t862;
t782 = -t811 - t863;
t781 = -t811 + t863;
t773 = t856 * t812;
t772 = (-t799 + t800) * t812;
t768 = -0.2e1 * t832 + t843;
t765 = 0.2e1 * t831 + t845;
t763 = t856 * t847;
t746 = -t756 - t811;
t745 = -t756 + t811;
t744 = t755 - t811;
t742 = -t767 * t805 - t800 * t847;
t741 = -t766 * t809 - t799 * t847;
t737 = -t784 * t805 - t868;
t736 = t782 * t809 - t867;
t735 = t784 * t809 - t869;
t734 = -t783 * t809 - t867;
t733 = t782 * t805 + t866;
t732 = -t781 * t805 - t868;
t729 = -t773 * t810 - t871;
t728 = -t773 * t806 + t870;
t725 = t765 * t805 - t768 * t809;
t721 = t756 - t755;
t714 = -t811 - t755;
t704 = (t757 * t802 + t758 * t801) * qJD(3);
t703 = (t757 * t801 - t758 * t802) * qJD(3);
t702 = t735 * t806 + t768 * t810;
t701 = t733 * t806 + t765 * t810;
t699 = -t735 * t810 + t768 * t806;
t698 = -t733 * t810 + t765 * t806;
t696 = -t709 + t896;
t695 = t708 - t896;
t694 = -t709 - t896;
t691 = t853 + t724;
t689 = -t723 + t852;
t688 = -t755 - t756;
t681 = t724 * t802 - t758 * t851;
t680 = t724 * t801 + t758 * t850;
t679 = -t723 * t801 - t757 * t850;
t678 = t723 * t802 - t757 * t851;
t674 = -t746 * t801 - t872;
t673 = -t745 * t801 + t906;
t672 = t744 * t802 - t873;
t671 = t746 * t802 - t873;
t670 = t745 * t802 + t907;
t669 = t744 * t801 + t872;
t664 = -pkin(2) * t773 - t667;
t663 = t714 * t802 - t907;
t662 = t714 * t801 + t906;
t660 = pkin(2) * t735 - qJ(2) * t737 - t727;
t659 = pkin(2) * t733 - qJ(2) * t736 + t726;
t658 = t709 - t708;
t653 = -t896 - t708;
t652 = pkin(2) * t765 - t736 * t895 - t860;
t651 = pkin(2) * t768 - t737 * t895 + t861;
t649 = -t684 + t706;
t648 = t683 - t706;
t647 = -t703 * t809 - t704 * t805;
t646 = (-t710 * t808 + t712 * t804) * t797;
t645 = (-t710 * t804 - t712 * t808) * t797;
t644 = t666 * t806 - t740 * t810;
t643 = -t666 * t810 - t740 * t806;
t641 = -t684 + t683;
t640 = -t692 * t801 + t802 * t818;
t639 = -t689 * t802 - t691 * t801;
t638 = t692 * t802 + t801 * t818;
t637 = -t689 * t801 + t691 * t802;
t632 = -t708 - t709;
t631 = -t680 * t809 - t681 * t805;
t630 = -t678 * t809 - t679 * t805;
t629 = -qJ(4) * t671 - t877;
t628 = pkin(2) * t666 - qJ(2) * t667;
t627 = -t671 * t805 + t674 * t809;
t626 = t671 * t809 + t674 * t805;
t625 = -t670 * t809 - t673 * t805;
t624 = -t669 * t809 - t672 * t805;
t623 = -t684 - t706;
t622 = t695 * t808 - t880;
t621 = -t696 * t804 + t902;
t620 = t695 * t804 + t879;
t619 = t696 * t808 + t904;
t618 = -t694 * t804 - t879;
t617 = t694 * t808 - t880;
t616 = -qJ(4) * t662 - t878;
t615 = -t706 - t683;
t610 = t683 + t684;
t608 = -t636 - t874;
t604 = (qJD(5) + t797) * t712 + t829;
t603 = -pkin(2) * t740 - t667 * t895;
t602 = t636 * t808 - t712 * t865;
t601 = t636 * t804 + t712 * t864;
t600 = -t635 * t804 + t710 * t864;
t599 = t635 * t808 + t710 * t865;
t598 = -t662 * t805 + t663 * t809;
t597 = t662 * t809 + t663 * t805;
t596 = t653 * t808 - t904;
t595 = t653 * t804 + t902;
t593 = -qJD(6) * t687 - t830;
t592 = -pkin(3) * t691 + qJ(4) * t674 - t878;
t591 = t626 * t806 + t691 * t810;
t590 = -t626 * t810 + t691 * t806;
t589 = (-t685 * t807 + t687 * t803) * t707;
t588 = (-t685 * t803 - t687 * t807) * t707;
t587 = -pkin(3) * t689 + qJ(4) * t663 + t877;
t586 = -t645 * t801 + t646 * t802;
t585 = t645 * t802 + t646 * t801;
t580 = t597 * t806 + t689 * t810;
t579 = -t638 * t805 + t640 * t809;
t578 = -t597 * t810 + t689 * t806;
t577 = t638 * t809 + t640 * t805;
t576 = -t637 * t809 - t639 * t805;
t571 = -t650 - t594;
t568 = (-qJD(6) - t707) * t687 - t830;
t566 = t594 * t807 - t687 * t876;
t565 = t594 * t803 + t687 * t875;
t564 = -t593 * t803 + t685 * t875;
t563 = t593 * t807 + t685 * t876;
t562 = t577 * t806 + t688 * t810;
t561 = -t577 * t810 + t688 * t806;
t560 = -t620 * t801 + t622 * t802;
t559 = -t619 * t801 + t621 * t802;
t558 = t620 * t802 + t622 * t801;
t557 = t619 * t802 + t621 * t801;
t556 = -t617 * t801 + t618 * t802;
t555 = t617 * t802 + t618 * t801;
t554 = -pkin(8) * t617 - t881;
t551 = t589 * t808 + t804 * t816;
t550 = t589 * t804 - t808 * t816;
t549 = t648 * t807 - t884;
t548 = -t649 * t803 + t903;
t547 = t648 * t803 + t883;
t546 = t649 * t807 + t905;
t545 = -t608 * t804 + t808 * t815;
t544 = -t604 * t808 - t804 * t820;
t543 = t608 * t808 + t804 * t815;
t542 = -t604 * t804 + t808 * t820;
t541 = -pkin(8) * t595 - t882;
t540 = -t601 * t801 + t602 * t802;
t539 = -t599 * t801 + t600 * t802;
t538 = t601 * t802 + t602 * t801;
t537 = t599 * t802 + t600 * t801;
t536 = -t623 * t803 - t883;
t535 = t623 * t807 - t884;
t534 = -t595 * t801 + t596 * t802;
t533 = t595 * t802 + t596 * t801;
t532 = pkin(3) * t677 + qJ(4) * t553;
t531 = t615 * t807 - t905;
t530 = t615 * t803 + t903;
t529 = t566 * t808 + t840;
t528 = t564 * t808 - t840;
t527 = t566 * t804 - t839;
t526 = t564 * t804 + t839;
t525 = -t585 * t809 - t586 * t805;
t524 = -qJ(4) * t638 - t552;
t523 = -pkin(4) * t820 + pkin(8) * t618 - t882;
t521 = -pkin(3) * t688 + qJ(4) * t640 + t553;
t515 = pkin(2) * t626 + pkin(3) * t671 - qJ(2) * t627 - t613;
t514 = -pkin(4) * t604 + pkin(8) * t596 + t881;
t513 = -t567 * t807 - t571 * t803;
t512 = t568 * t807 - t570 * t803;
t511 = -t567 * t803 + t571 * t807;
t510 = t568 * t803 + t570 * t807;
t509 = pkin(2) * t577 + pkin(3) * t638 - qJ(2) * t579;
t508 = pkin(2) * t597 + pkin(3) * t662 - qJ(2) * t598 - t612;
t507 = -t558 * t809 - t560 * t805;
t506 = -t557 * t809 - t559 * t805;
t505 = -t555 * t805 + t556 * t809;
t504 = t555 * t809 + t556 * t805;
t503 = t549 * t808 - t567 * t804;
t502 = t548 * t808 - t571 * t804;
t501 = t549 * t804 + t567 * t808;
t500 = t548 * t804 + t571 * t808;
t496 = t553 * t809 - t886;
t495 = t553 * t805 + t885;
t494 = -t550 * t801 + t551 * t802;
t493 = t550 * t802 + t551 * t801;
t492 = pkin(2) * t691 - t809 * t592 - t627 * t895 - t805 * t629;
t491 = t536 * t808 + t570 * t804;
t490 = t536 * t804 - t570 * t808;
t489 = t531 * t808 - t568 * t804;
t488 = t531 * t804 + t568 * t808;
t487 = -t543 * t801 + t545 * t802;
t486 = -t542 * t801 + t544 * t802;
t485 = t543 * t802 + t545 * t801;
t484 = t542 * t802 + t544 * t801;
t483 = t512 * t808 - t641 * t804;
t482 = t512 * t804 + t641 * t808;
t481 = -t538 * t809 - t540 * t805;
t480 = -t537 * t809 - t539 * t805;
t479 = t495 * t806 - t677 * t810;
t478 = -t495 * t810 - t677 * t806;
t477 = t513 * t808 - t610 * t804;
t476 = t513 * t804 + t610 * t808;
t475 = -t533 * t805 + t534 * t809;
t474 = t533 * t809 + t534 * t805;
t473 = pkin(2) * t689 - t809 * t587 - t598 * t895 - t805 * t616;
t472 = t504 * t806 + t810 * t820;
t471 = -t504 * t810 + t806 * t820;
t470 = -t527 * t801 + t529 * t802;
t469 = -t526 * t801 + t528 * t802;
t468 = t527 * t802 + t529 * t801;
t467 = t526 * t802 + t528 * t801;
t466 = t474 * t806 + t604 * t810;
t465 = -t474 * t810 + t604 * t806;
t462 = -pkin(9) * t535 + t887;
t461 = -pkin(9) * t530 + t888;
t460 = -qJ(4) * t555 - t523 * t801 + t554 * t802;
t456 = pkin(4) * t614 + pkin(8) * t464;
t455 = -qJ(4) * t533 - t514 * t801 + t541 * t802;
t454 = -t501 * t801 + t503 * t802;
t453 = -t500 * t801 + t502 * t802;
t452 = t501 * t802 + t503 * t801;
t451 = t500 * t802 + t502 * t801;
t450 = -pkin(3) * t820 + qJ(4) * t556 + t523 * t802 + t554 * t801;
t449 = -pkin(8) * t543 - t463;
t448 = -t493 * t809 - t494 * t805;
t447 = -t490 * t801 + t491 * t802;
t446 = t490 * t802 + t491 * t801;
t445 = -t488 * t801 + t489 * t802;
t444 = t488 * t802 + t489 * t801;
t443 = -t485 * t805 + t487 * t809;
t442 = t485 * t809 + t487 * t805;
t441 = -t484 * t809 - t486 * t805;
t440 = -t482 * t801 + t483 * t802;
t439 = t482 * t802 + t483 * t801;
t438 = -pkin(3) * t604 + qJ(4) * t534 + t514 * t802 + t541 * t801;
t437 = -pkin(4) * t632 + pkin(8) * t545 + t464;
t436 = pkin(2) * t688 - t809 * t521 - t805 * t524 - t579 * t895;
t435 = -t476 * t801 + t477 * t802;
t434 = t476 * t802 + t477 * t801;
t433 = -pkin(5) * t535 + t459;
t432 = t442 * t806 + t632 * t810;
t431 = -t442 * t810 + t632 * t806;
t430 = -pkin(5) * t530 + t458;
t429 = pkin(2) * t495 + pkin(3) * t552 - qJ(2) * t496;
t428 = -t468 * t809 - t470 * t805;
t427 = -t467 * t809 - t469 * t805;
t426 = t464 * t802 - t890;
t425 = t464 * t801 + t889;
t424 = -pkin(2) * t677 + qJ(4) * t886 - t496 * t895 - t809 * t532;
t423 = pkin(2) * t504 + pkin(3) * t555 + pkin(4) * t617 - qJ(2) * t505 - t520;
t420 = -t452 * t809 - t454 * t805;
t419 = -t451 * t809 - t453 * t805;
t418 = pkin(2) * t474 + pkin(3) * t533 + pkin(4) * t595 - qJ(2) * t475 - t519;
t417 = -t446 * t805 + t447 * t809;
t416 = t446 * t809 + t447 * t805;
t415 = -t444 * t805 + t445 * t809;
t414 = t444 * t809 + t445 * t805;
t413 = -t439 * t809 - t440 * t805;
t412 = -pkin(9) * t511 - t421;
t411 = t422 * t808 + t498 * t804;
t410 = t422 * t804 - t498 * t808;
t409 = -t434 * t805 + t435 * t809;
t408 = t434 * t809 + t435 * t805;
t407 = t416 * t806 + t535 * t810;
t406 = -t416 * t810 + t535 * t806;
t405 = t414 * t806 + t530 * t810;
t404 = -t414 * t810 + t530 * t806;
t403 = -pkin(8) * t490 - t433 * t804 + t462 * t808;
t402 = -pkin(8) * t488 - t430 * t804 + t461 * t808;
t401 = -qJ(4) * t485 - t437 * t801 + t449 * t802;
t400 = -pkin(4) * t535 + pkin(8) * t491 + t433 * t808 + t462 * t804;
t399 = t408 * t806 + t511 * t810;
t398 = -t408 * t810 + t511 * t806;
t397 = -pkin(3) * t632 + qJ(4) * t487 + t437 * t802 + t449 * t801;
t396 = -pkin(4) * t530 + pkin(8) * t489 + t430 * t808 + t461 * t804;
t395 = pkin(2) * t820 - t809 * t450 - t805 * t460 - t505 * t895;
t394 = pkin(2) * t442 + pkin(3) * t485 + pkin(4) * t543 - qJ(2) * t443;
t393 = -t425 * t805 + t426 * t809;
t392 = t425 * t809 + t426 * t805;
t391 = -pkin(8) * t889 - qJ(4) * t425 - t456 * t801;
t390 = t392 * t806 - t614 * t810;
t389 = -t392 * t810 - t614 * t806;
t388 = -pkin(8) * t476 + t412 * t808 + t511 * t894;
t387 = pkin(3) * t614 - pkin(8) * t890 + qJ(4) * t426 + t456 * t802;
t386 = pkin(2) * t604 - t809 * t438 - t805 * t455 - t475 * t895;
t385 = pkin(8) * t477 + t804 * t412 + t511 * t833;
t384 = -t410 * t801 + t411 * t802;
t383 = t410 * t802 + t411 * t801;
t382 = -pkin(8) * t410 + (-pkin(9) * t808 + t894) * t421;
t381 = -qJ(4) * t446 - t400 * t801 + t403 * t802;
t380 = -qJ(4) * t444 - t396 * t801 + t402 * t802;
t379 = -pkin(3) * t535 + qJ(4) * t447 + t400 * t802 + t403 * t801;
t378 = -pkin(3) * t530 + qJ(4) * t445 + t396 * t802 + t402 * t801;
t377 = pkin(2) * t416 + pkin(3) * t446 + pkin(4) * t490 - pkin(5) * t570 + pkin(9) * t536 - qJ(2) * t417 + t888;
t376 = pkin(2) * t414 + pkin(3) * t444 + pkin(4) * t488 + pkin(5) * t568 + pkin(9) * t531 - qJ(2) * t415 - t887;
t375 = pkin(8) * t411 + (-pkin(9) * t804 + t833) * t421;
t374 = pkin(2) * t632 - t809 * t397 - t805 * t401 - t443 * t895;
t373 = -qJ(4) * t434 - t385 * t801 + t388 * t802;
t372 = pkin(2) * t392 + pkin(3) * t425 + pkin(4) * t463 - qJ(2) * t393;
t371 = -pkin(3) * t511 + qJ(4) * t435 + t385 * t802 + t388 * t801;
t370 = pkin(2) * t408 + pkin(3) * t434 + pkin(4) * t476 + pkin(5) * t610 + pkin(9) * t513 - qJ(2) * t409 + t422;
t369 = -t383 * t805 + t384 * t809;
t368 = t383 * t809 + t384 * t805;
t367 = t368 * t806 + t421 * t810;
t366 = -t368 * t810 + t421 * t806;
t365 = -pkin(2) * t614 - t809 * t387 - t805 * t391 - t393 * t895;
t364 = pkin(2) * t535 - t809 * t379 - t805 * t381 - t417 * t895;
t363 = pkin(2) * t530 - t809 * t378 - t805 * t380 - t415 * t895;
t362 = -qJ(4) * t383 - t375 * t801 + t382 * t802;
t361 = -pkin(3) * t421 + qJ(4) * t384 + t375 * t802 + t382 * t801;
t360 = pkin(2) * t511 - t809 * t371 - t805 * t373 - t409 * t895;
t359 = pkin(2) * t368 + pkin(3) * t383 + pkin(4) * t410 - pkin(5) * t498 + pkin(9) * t422 - qJ(2) * t369;
t358 = pkin(2) * t421 - t809 * t361 - t805 * t362 - t369 * t895;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t771, -t770, 0, t731, 0, 0, 0, 0, 0, 0, 0, t771, t770, t700, 0, 0, 0, 0, 0, 0, t701, t702, t729, t644, 0, 0, 0, 0, 0, 0, t580, t591, t562, t479, 0, 0, 0, 0, 0, 0, t466, t472, t432, t390, 0, 0, 0, 0, 0, 0, t405, t407, t399, t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t770, -t771, 0, t730, 0, 0, 0, 0, 0, 0, 0, -t770, t771, t697, 0, 0, 0, 0, 0, 0, t698, t699, t728, t643, 0, 0, 0, 0, 0, 0, t578, t590, t561, t478, 0, 0, 0, 0, 0, 0, t465, t471, t431, t389, 0, 0, 0, 0, 0, 0, t404, t406, t398, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t736, t737, 0, t667, 0, 0, 0, 0, 0, 0, t598, t627, t579, t496, 0, 0, 0, 0, 0, 0, t475, t505, t443, t393, 0, 0, 0, 0, 0, 0, t415, t417, t409, t369; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t770, 0, -t771, 0, -t825, -t824, -t730, -pkin(6) * t730, 0, -t770, t771, 0, 0, 0, -t697, t825, t824, -pkin(6) * t697 + (-pkin(1) * t806 + qJ(2) * t810) * g(3), -t742 * t806 + t827, -t725 * t806 + t772 * t810, -t734 * t806 + t809 * t842, -t741 * t806 - t827, -t732 * t806 - t805 * t842, -t763 * t806 + t792, -pkin(6) * t698 - t652 * t806 + t659 * t810, -pkin(6) * t699 - t651 * t806 + t660 * t810, -pkin(2) * t870 - pkin(6) * t728 - t664 * t806, -pkin(6) * t643 - t603 * t806 + t628 * t810, -t631 * t806 - t835, -t576 * t806 + t721 * t810, -t625 * t806 - t692 * t810, -t630 * t806 + t835, -t624 * t806 + t810 * t818, -t647 * t806 + t792, -pkin(6) * t578 - t473 * t806 + t508 * t810, -pkin(6) * t590 - t492 * t806 + t515 * t810, -pkin(6) * t561 - t436 * t806 + t509 * t810, -pkin(6) * t478 - t424 * t806 + t429 * t810, -t481 * t806 + t837, -t441 * t806 + t658 * t810, -t506 * t806 - t608 * t810, -t480 * t806 - t837, -t507 * t806 + t810 * t815, -t525 * t806 + t796 * t810, -pkin(6) * t465 - t386 * t806 + t418 * t810, -pkin(6) * t471 - t395 * t806 + t423 * t810, -pkin(6) * t431 - t374 * t806 + t394 * t810, -pkin(6) * t389 - t365 * t806 + t372 * t810, -t428 * t806 + t565 * t810, -t413 * t806 + t510 * t810, -t419 * t806 + t546 * t810, -t427 * t806 + t563 * t810, -t420 * t806 + t547 * t810, -t448 * t806 + t588 * t810, -pkin(6) * t404 - t363 * t806 + t376 * t810, -pkin(6) * t406 - t364 * t806 + t377 * t810, -pkin(6) * t398 - t360 * t806 + t370 * t810, -pkin(6) * t366 - t358 * t806 + t359 * t810; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t771, 0, t770, 0, t824, -t825, t731, pkin(6) * t731, 0, -t771, -t770, 0, 0, 0, t700, -t824, t825, pkin(6) * t700 + (pkin(1) * t810 + qJ(2) * t806) * g(3), t742 * t810 + t828, t725 * t810 + t772 * t806, t734 * t810 + t806 * t843, t741 * t810 - t828, t732 * t810 - t805 * t844, t763 * t810 + t791, pkin(6) * t701 + t652 * t810 + t659 * t806, pkin(6) * t702 + t651 * t810 + t660 * t806, -pkin(2) * t871 + pkin(6) * t729 + t664 * t810, pkin(6) * t644 + t603 * t810 + t628 * t806, t631 * t810 - t836, t576 * t810 + t721 * t806, t625 * t810 - t692 * t806, t630 * t810 + t836, t624 * t810 + t806 * t818, t647 * t810 + t791, pkin(6) * t580 + t473 * t810 + t508 * t806, pkin(6) * t591 + t492 * t810 + t515 * t806, pkin(6) * t562 + t436 * t810 + t509 * t806, pkin(6) * t479 + t424 * t810 + t429 * t806, t481 * t810 + t838, t441 * t810 + t658 * t806, t506 * t810 - t608 * t806, t480 * t810 - t838, t507 * t810 + t806 * t815, t525 * t810 + t796 * t806, pkin(6) * t466 + t386 * t810 + t418 * t806, pkin(6) * t472 + t395 * t810 + t423 * t806, pkin(6) * t432 + t374 * t810 + t394 * t806, pkin(6) * t390 + t365 * t810 + t372 * t806, t428 * t810 + t565 * t806, t413 * t810 + t510 * t806, t419 * t810 + t546 * t806, t427 * t810 + t563 * t806, t420 * t810 + t547 * t806, t448 * t810 + t588 * t806, pkin(6) * t405 + t363 * t810 + t376 * t806, pkin(6) * t407 + t364 * t810 + t377 * t806, pkin(6) * t399 + t360 * t810 + t370 * t806, pkin(6) * t367 + t358 * t810 + t359 * t806; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t776, t777, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t823 - 0.2e1 * t891, -t777 + t794 + 0.2e1 * t798, pkin(1) * t750 + qJ(2) * t748, (t767 - t832) * t809, -t765 * t809 - t768 * t805, -t783 * t805 + t866, (-t766 + t831) * t805, t781 * t809 - t869, 0, qJ(2) * t765 - t733 * t895 - t861, qJ(2) * t768 - t735 * t895 - t860, -qJ(2) * t773 + t769 * t895 - t666, -qJ(2) * t740 - t666 * t895, -t680 * t805 + t681 * t809, -t637 * t805 + t639 * t809, -t670 * t805 + t673 * t809, -t678 * t805 + t679 * t809, -t669 * t805 + t672 * t809, -t703 * t805 + t704 * t809, qJ(2) * t689 - t805 * t587 - t597 * t895 + t809 * t616, qJ(2) * t691 - t805 * t592 - t626 * t895 + t809 * t629, qJ(2) * t688 - t805 * t521 + t809 * t524 - t577 * t895, -qJ(2) * t677 - qJ(4) * t885 - t495 * t895 - t805 * t532, -t538 * t805 + t540 * t809, -t484 * t805 + t486 * t809, -t557 * t805 + t559 * t809, -t537 * t805 + t539 * t809, -t558 * t805 + t560 * t809, -t585 * t805 + t586 * t809, qJ(2) * t604 - t805 * t438 + t809 * t455 - t474 * t895, qJ(2) * t820 - t805 * t450 + t809 * t460 - t504 * t895, qJ(2) * t632 - t805 * t397 + t809 * t401 - t442 * t895, -qJ(2) * t614 - t805 * t387 + t809 * t391 - t392 * t895, -t468 * t805 + t470 * t809, -t439 * t805 + t440 * t809, -t451 * t805 + t453 * t809, -t467 * t805 + t469 * t809, -t452 * t805 + t454 * t809, -t493 * t805 + t494 * t809, qJ(2) * t530 - t805 * t378 + t809 * t380 - t414 * t895, qJ(2) * t535 - t805 * t379 + t809 * t381 - t416 * t895, qJ(2) * t511 - t805 * t371 + t809 * t373 - t408 * t895, qJ(2) * t421 - t805 * t361 + t809 * t362 - t368 * t895;];
tauB_reg  = t1;
