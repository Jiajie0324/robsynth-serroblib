% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR7_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:56:12
% EndTime: 2019-03-09 03:56:23
% DurationCPUTime: 6.76s
% Computational Cost: add. (12795->563), mult. (25881->669), div. (0->0), fcn. (18653->14), ass. (0->291)
t224 = sin(pkin(10));
t228 = sin(qJ(3));
t311 = qJD(1) * qJD(3);
t291 = t228 * t311;
t231 = cos(qJ(3));
t344 = cos(pkin(10));
t284 = qJD(1) * t344;
t268 = t231 * t284;
t278 = qJDD(1) * t344;
t307 = t231 * qJDD(1);
t294 = qJD(3) * t268 + t224 * t307 + t228 * t278;
t100 = t224 * t291 - t294;
t308 = t228 * qJDD(1);
t261 = -t224 * t308 + t231 * t278;
t391 = t224 * t231 + t344 * t228;
t388 = qJD(3) * t391;
t101 = qJD(1) * t388 - t261;
t318 = qJD(1) * t231;
t147 = -t224 * t318 - t228 * t284;
t319 = qJD(1) * t228;
t293 = t224 * t319;
t148 = t268 - t293;
t227 = sin(qJ(5));
t375 = cos(qJ(5));
t292 = qJD(5) * t375;
t315 = qJD(5) * t227;
t47 = -t227 * t100 + t375 * t101 - t147 * t292 + t148 * t315;
t286 = t375 * t100 + t227 * t101;
t252 = t227 * t147 + t148 * t375;
t387 = t252 * qJD(5);
t48 = -t286 + t387;
t219 = qJDD(1) * qJ(2);
t220 = qJD(1) * qJD(2);
t290 = t231 * t311;
t115 = qJDD(4) + t219 + t220 + (t290 + t308) * pkin(3);
t373 = pkin(4) * t100;
t70 = t115 - t373;
t12 = pkin(5) * t48 + pkin(9) * t47 + t70;
t230 = cos(qJ(6));
t11 = t230 * t12;
t226 = sin(qJ(6));
t306 = qJD(3) + qJD(5);
t371 = pkin(8) * t148;
t233 = -pkin(1) - pkin(7);
t176 = qJD(1) * t233 + qJD(2);
t139 = -qJ(4) * t319 + t176 * t228;
t116 = t224 * t139;
t140 = -qJ(4) * t318 + t231 * t176;
t119 = qJD(3) * pkin(3) + t140;
t81 = t344 * t119 - t116;
t64 = qJD(3) * pkin(4) - t371 + t81;
t365 = t147 * pkin(8);
t117 = t344 * t139;
t82 = t224 * t119 + t117;
t67 = t82 + t365;
t39 = t227 * t64 + t375 * t67;
t33 = pkin(9) * t306 + t39;
t163 = pkin(3) * t319 + qJD(1) * qJ(2) + qJD(4);
t108 = -pkin(4) * t147 + t163;
t93 = -t375 * t147 + t148 * t227;
t49 = pkin(5) * t93 - pkin(9) * t252 + t108;
t14 = t226 * t49 + t230 * t33;
t305 = qJDD(3) + qJDD(5);
t174 = qJDD(1) * t233 + qJDD(2);
t159 = t231 * t174;
t310 = qJD(1) * qJD(4);
t317 = qJD(3) * t228;
t80 = -t231 * t310 - t176 * t317 + qJDD(3) * pkin(3) + t159 + (t291 - t307) * qJ(4);
t316 = qJD(3) * t231;
t86 = (-qJ(4) * qJD(1) + t176) * t316 + (-qJ(4) * qJDD(1) + t174 - t310) * t228;
t51 = -t224 * t86 + t344 * t80;
t37 = qJDD(3) * pkin(4) + pkin(8) * t101 + t51;
t52 = t224 * t80 + t344 * t86;
t40 = pkin(8) * t100 + t52;
t9 = t227 * t37 + t64 * t292 - t67 * t315 + t375 * t40;
t7 = pkin(9) * t305 + t9;
t3 = -qJD(6) * t14 - t226 * t7 + t11;
t405 = qJD(6) + t93;
t366 = t14 * t405;
t423 = t3 + t366;
t287 = t344 * t231;
t156 = -t224 * t228 + t287;
t393 = t227 * t391;
t102 = -t375 * t156 + t393;
t422 = t102 * t47;
t416 = t226 * t405;
t77 = t226 * t306 + t230 * t252;
t421 = t77 * t416;
t420 = t102 * t305;
t342 = qJD(6) * t77;
t28 = -t226 * t47 - t230 * t305 + t342;
t26 = t28 * t230;
t276 = t230 * t306;
t75 = t226 * t252 - t276;
t419 = t416 * t75 - t26;
t288 = t227 * t40 - t375 * t37;
t10 = -t39 * qJD(5) - t288;
t232 = cos(qJ(1));
t214 = g(2) * t232;
t229 = sin(qJ(1));
t390 = g(1) * t229 - t214;
t262 = -qJD(3) * t287 + t224 * t317;
t399 = -qJD(5) * t393 + t156 * t292 - t227 * t388 - t262 * t375;
t263 = t375 * t391;
t404 = t227 * t156 + t263;
t418 = -t10 * t102 + t39 * t399 + t404 * t9 - t390;
t13 = -t226 * t33 + t230 * t49;
t367 = t13 * t405;
t396 = t306 * t93;
t417 = -t47 + t396;
t359 = t93 ^ 2;
t360 = t252 ^ 2;
t415 = -t359 + t360;
t314 = qJD(6) * t226;
t27 = -qJD(6) * t276 - t226 * t305 + t230 * t47 + t252 * t314;
t25 = t230 * t27;
t313 = qJD(6) * t230;
t357 = -t226 * t28 - t75 * t313;
t407 = t230 * t93;
t414 = -t407 * t75 - t25 + t357;
t24 = t27 * t226;
t413 = -t24 + (t313 + t407) * t77;
t46 = qJDD(6) + t48;
t43 = t226 * t46;
t356 = t313 * t405 + t43;
t361 = t77 * t252;
t412 = t405 * t407 + t356 - t361;
t411 = t399 * t93 + t404 * t48;
t410 = -t305 * t404 - t306 * t399;
t38 = -t227 * t67 + t375 * t64;
t32 = -pkin(5) * t306 - t38;
t408 = t32 * t93;
t358 = t93 * t252;
t198 = pkin(3) * t344 + pkin(4);
t374 = pkin(3) * t224;
t143 = t227 * t198 + t375 * t374;
t89 = -t224 * t140 - t117;
t242 = t89 - t365;
t90 = t344 * t140 - t116;
t69 = t90 - t371;
t345 = qJD(5) * t143 - t227 * t69 + t242 * t375;
t406 = -t39 - t345;
t217 = qJ(3) + pkin(10);
t209 = qJ(5) + t217;
t196 = sin(t209);
t197 = cos(t209);
t255 = g(3) * t196 + t197 * t214;
t235 = qJD(1) ^ 2;
t402 = -t235 * qJ(2) - t390;
t57 = pkin(5) * t252 + pkin(9) * t93;
t169 = t196 * t214;
t187 = g(3) * t197;
t339 = t196 * t229;
t295 = -g(1) * t339 + t169 - t187;
t401 = t108 * t93 - t295 - t9;
t400 = t51 * t156 - t262 * t82 - t388 * t81 + t391 * t52 - t390;
t8 = -pkin(5) * t305 - t10;
t398 = t8 * t226 + t32 * t313;
t363 = t75 * t252;
t395 = t405 * t252;
t142 = t198 * t375 - t227 * t374;
t123 = t142 * qJD(5);
t42 = t227 * t242 + t375 * t69;
t346 = t123 - t42;
t44 = t230 * t46;
t394 = -t314 * t405 + t44;
t266 = g(1) * t232 + g(2) * t229;
t392 = t266 * t197;
t222 = t228 ^ 2;
t223 = t231 ^ 2;
t321 = t222 + t223;
t279 = t321 * t174;
t185 = t197 * pkin(9);
t267 = pkin(5) * t196 - t185;
t331 = t252 * qJD(3);
t389 = t331 + t286;
t300 = 0.2e1 * t220;
t386 = 0.2e1 * t219 + t300 - t266;
t30 = t32 * t314;
t385 = -t13 * t252 + t230 * t255 + t30;
t338 = t197 * t229;
t301 = g(1) * t338;
t384 = t14 * t252 + t226 * t301 + t398;
t383 = -t108 * t252 + t255 - t288 - t301;
t382 = -t227 * t262 + t375 * t388;
t380 = -t100 * t391 + t147 * t262;
t379 = qJD(3) * t262 - qJDD(3) * t391;
t377 = t148 ^ 2;
t234 = qJD(3) ^ 2;
t368 = g(3) * t228;
t2 = qJD(6) * t13 + t226 * t12 + t230 * t7;
t1 = t2 * t230;
t212 = t228 * pkin(3);
t59 = qJD(5) * t263 + t156 * t315 + t382;
t364 = t32 * t59;
t362 = t77 * t75;
t225 = -qJ(4) - pkin(7);
t354 = t226 * t75;
t353 = t226 * t77;
t351 = t230 * t75;
t350 = t230 * t77;
t349 = t230 * t405;
t343 = pkin(1) * qJDD(1);
t341 = qJD(6) * t405;
t340 = t148 * t147;
t337 = t226 * t229;
t336 = t226 * t232;
t334 = t229 * t230;
t333 = t230 * t232;
t199 = qJ(2) + t212;
t330 = qJ(4) - t233;
t134 = -t231 * qJD(4) + t317 * t330;
t165 = t330 * t231;
t135 = -qJD(3) * t165 - t228 * qJD(4);
t85 = t224 * t134 + t344 * t135;
t328 = t156 * qJDD(3) - t234 * t391;
t164 = t330 * t228;
t107 = -t344 * t164 - t224 * t165;
t327 = pkin(5) * t338 + pkin(9) * t339;
t325 = (t300 + t219) * qJ(2);
t324 = t232 * pkin(1) + t229 * qJ(2);
t322 = t222 - t223;
t320 = -t234 - t235;
t312 = t163 * qJD(1);
t180 = pkin(3) * t316 + qJD(2);
t309 = qJDD(3) * t228;
t302 = pkin(9) * t341;
t137 = pkin(9) + t143;
t298 = t137 * t341;
t296 = t231 * t235 * t228;
t211 = t232 * qJ(2);
t289 = -t229 * pkin(1) + t211;
t112 = pkin(3) * t318 + pkin(4) * t148;
t206 = sin(t217);
t160 = pkin(4) * t206 + t212;
t106 = t164 * t224 - t344 * t165;
t277 = t1 + t295;
t275 = t321 * qJDD(1);
t274 = qJDD(2) - t343;
t273 = qJD(6) * t404 + qJD(1);
t272 = -t8 - t301;
t271 = t228 * t290;
t270 = -pkin(9) * t46 + t408;
t260 = t13 * t230 + t14 * t226;
t259 = t13 * t226 - t14 * t230;
t87 = -pkin(8) * t156 + t106;
t88 = -pkin(8) * t391 + t107;
t54 = t227 * t87 + t375 * t88;
t120 = pkin(4) * t391 + t199;
t55 = pkin(5) * t404 + pkin(9) * t102 + t120;
t22 = t226 * t55 + t230 * t54;
t21 = -t226 * t54 + t230 * t55;
t258 = t350 + t354;
t257 = -t416 * t93 + t394;
t216 = -pkin(8) + t225;
t256 = t232 * t160 + t229 * t216 + t289;
t254 = -qJD(6) * t49 + t187 - t7;
t253 = t229 * t160 - t232 * t216 + t324;
t84 = t134 * t344 - t224 * t135;
t249 = 0.2e1 * qJ(2) * t311 + qJDD(3) * t233;
t247 = -t123 * t405 - t137 * t46 + t408;
t244 = t391 * qJD(1);
t109 = -pkin(4) * t262 + t180;
t241 = t115 - t266;
t240 = -qJD(6) * t260 - t3 * t226 + t1;
t239 = -t156 * t101 - t148 * t388;
t238 = -t233 * t234 + t386;
t236 = pkin(8) * t388 + t84;
t208 = qJDD(3) * t231;
t207 = cos(t217);
t161 = pkin(3) * t231 + pkin(4) * t207;
t144 = t147 ^ 2;
t136 = -pkin(5) - t142;
t133 = t196 * t333 - t337;
t132 = t196 * t336 + t334;
t131 = t196 * t334 + t336;
t130 = -t196 * t337 + t333;
t68 = pkin(8) * t262 + t85;
t60 = qJD(5) * t404 + t382;
t53 = t227 * t88 - t375 * t87;
t50 = t112 + t57;
t29 = pkin(5) * t399 + t59 * pkin(9) + t109;
t20 = t226 * t57 + t230 * t38;
t19 = -t226 * t38 + t230 * t57;
t18 = qJD(5) * t54 + t227 * t68 - t236 * t375;
t17 = t227 * t236 + t292 * t87 - t315 * t88 + t375 * t68;
t16 = t226 * t50 + t230 * t42;
t15 = -t226 * t42 + t230 * t50;
t5 = -qJD(6) * t22 - t226 * t17 + t230 * t29;
t4 = qJD(6) * t21 + t230 * t17 + t226 * t29;
t6 = [0, 0, 0, 0, 0, qJDD(1), t390, t266, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t390 - 0.2e1 * t343, t386, -pkin(1) * t274 - g(1) * t289 - g(2) * t324 + t325, qJDD(1) * t223 - 0.2e1 * t271, -0.2e1 * t228 * t307 + 0.2e1 * t311 * t322, -t228 * t234 + t208, qJDD(1) * t222 + 0.2e1 * t271, -t231 * t234 - t309, 0, t228 * t238 + t231 * t249, -t228 * t249 + t231 * t238, -t233 * t275 - t279 + t390, -g(1) * (t229 * t233 + t211) - g(2) * (pkin(7) * t232 + t324) + t233 * t279 + t325, t239, t156 * t100 + t101 * t391 - t147 * t388 + t148 * t262, t328, t380, t379, 0, t84 * qJD(3) + t106 * qJDD(3) - t199 * t100 + t115 * t391 - t180 * t147 - t163 * t262 - t206 * t266, -t85 * qJD(3) - t107 * qJDD(3) - t199 * t101 + t115 * t156 + t180 * t148 - t163 * t388 - t207 * t266, t107 * t100 + t106 * t101 + t85 * t147 - t84 * t148 - t400, t52 * t107 + t82 * t85 + t51 * t106 + t81 * t84 + t115 * t199 + t163 * t180 - g(1) * (t232 * t212 + t211 + (-pkin(1) + t225) * t229) - g(2) * (t212 * t229 - t225 * t232 + t324) -t252 * t59 + t422, t102 * t48 - t252 * t399 + t404 * t47 + t59 * t93, -t306 * t59 - t420, t411, t410, 0, t108 * t399 + t109 * t93 + t120 * t48 - t18 * t306 - t196 * t266 - t305 * t53 + t404 * t70, -t102 * t70 - t108 * t59 + t109 * t252 - t120 * t47 - t17 * t306 - t305 * t54 - t392, -t17 * t93 + t18 * t252 + t38 * t59 - t47 * t53 - t48 * t54 - t418, -g(1) * t256 - g(2) * t253 - t10 * t53 + t108 * t109 + t70 * t120 + t39 * t17 - t38 * t18 + t9 * t54, -t59 * t350 - (-t314 * t77 - t25) * t102 (t351 + t353) * t59 - (t24 - t26 + (-t350 + t354) * qJD(6)) * t102, -t102 * t394 - t27 * t404 - t59 * t349 + t399 * t77, t102 * t357 - t354 * t59, t102 * t356 - t28 * t404 - t399 * t75 + t416 * t59, t399 * t405 + t404 * t46, -g(1) * t133 - g(2) * t131 - t102 * t398 + t13 * t399 + t18 * t75 + t21 * t46 - t226 * t364 + t53 * t28 + t3 * t404 + t405 * t5, -t230 * t364 + g(1) * t132 - g(2) * t130 - t2 * t404 - t14 * t399 + t18 * t77 - t22 * t46 - t53 * t27 - t4 * t405 - (t8 * t230 - t30) * t102, t21 * t27 - t22 * t28 - t4 * t75 - t5 * t77 + t260 * t59 + t392 - (qJD(6) * t259 - t2 * t226 - t3 * t230) * t102, t2 * t22 + t14 * t4 + t3 * t21 + t13 * t5 + t8 * t53 + t32 * t18 - g(1) * (t232 * t267 + t256) - g(2) * (t229 * t267 + t253); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t235, t402 + t274, 0, 0, 0, 0, 0, 0, t228 * t320 + t208, t231 * t320 - t309, -t275, t279 + t402, 0, 0, 0, 0, 0, 0, qJD(1) * t147 + t328, -qJD(1) * t148 + t379, -t239 - t380, -t312 + t400, 0, 0, 0, 0, 0, 0, -qJD(1) * t93 - t306 * t60 - t420, -qJD(1) * t252 + t410, t252 * t60 - t411 - t422, -qJD(1) * t108 - t38 * t60 + t418, 0, 0, 0, 0, 0, 0, -t404 * t43 + t102 * t28 + t60 * t75 + (-t226 * t399 - t230 * t273) * t405, -t404 * t44 - t102 * t27 + t60 * t77 + (t226 * t273 - t230 * t399) * t405 (-t351 + t353) * t399 + t258 * qJD(1) + (qJD(6) * t258 - t24 - t26) * t404, -qJD(1) * t260 + t8 * t102 + t240 * t404 - t259 * t399 + t32 * t60 - t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t296, -t322 * t235, t307, -t296, -t308, qJDD(3), t231 * t402 + t159 + t368, g(3) * t231 + (-t174 - t402) * t228, 0, 0, -t340, -t144 + t377 (-t147 - t244) * qJD(3) + t261, t340 (t148 + t293) * qJD(3) - t294, qJDD(3), g(3) * t206 - t89 * qJD(3) - t163 * t148 - t390 * t207 + (qJDD(3) * t344 + t147 * t318) * pkin(3) + t51, g(3) * t207 + t90 * qJD(3) - t163 * t147 + t390 * t206 + (-qJDD(3) * t224 - t148 * t318) * pkin(3) - t52 (t82 + t89) * t148 + (t81 - t90) * t147 + (t100 * t224 + t101 * t344) * pkin(3), -t81 * t89 - t82 * t90 + (t344 * t51 + t368 + t224 * t52 + (-t390 - t312) * t231) * pkin(3), t358, t415, t417, -t358, t389, t305, -t345 * qJD(3) + qJD(5) * t406 - t112 * t93 + t142 * t305 + t383, -t112 * t252 - t143 * t305 - t306 * t346 + t401, t142 * t47 - t143 * t48 - t406 * t252 + (-t346 - t38) * t93, g(3) * t160 + t10 * t142 - t108 * t112 + t9 * t143 - t161 * t390 - t345 * t38 + t346 * t39, t413, -t353 * t405 + t414, t412, t419, t257 + t363, -t395, t136 * t28 - t15 * t405 + t345 * t75 + (t272 - t298) * t230 + t247 * t226 + t385, -t136 * t27 + t16 * t405 + t345 * t77 + t247 * t230 + (-t255 + t298) * t226 + t384, t15 * t77 + t16 * t75 + (-t123 * t75 - t13 * t93 - t137 * t28 + (t137 * t77 - t13) * qJD(6)) * t230 + (t123 * t77 - t137 * t27 - t14 * t93 - t3 + (t137 * t75 - t14) * qJD(6)) * t226 + t277, t8 * t136 - t14 * t16 - t13 * t15 - g(1) * (t161 * t229 + t327) - g(3) * (-t160 - t267) + t345 * t32 - t259 * t123 - (-pkin(5) * t197 - pkin(9) * t196 - t161) * t214 + t240 * t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t148 - t293) * qJD(3) + t294 (t147 - t244) * qJD(3) + t261, -t144 - t377, -t147 * t82 + t148 * t81 + t241, 0, 0, 0, 0, 0, 0, -t286 + t331 + 0.2e1 * t387, -t47 - t396, -t359 - t360, t252 * t38 + t39 * t93 + t241 - t373, 0, 0, 0, 0, 0, 0, t257 - t363, -t349 * t405 - t361 - t43 (-t75 * t93 + t27) * t230 + t421 + t357, -t32 * t252 + t423 * t230 + (t2 - t367) * t226 - t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, t415, t417, -t358, t389, t305, t39 * qJD(3) + t383, t306 * t38 + t401, 0, 0, t413, t414 - t421, t412, t419, -t405 * t416 + t363 + t44, -t395, -pkin(5) * t28 - t19 * t405 - t39 * t75 + t270 * t226 + (t272 - t302) * t230 + t385, pkin(5) * t27 + t20 * t405 - t39 * t77 + t270 * t230 + (-t255 + t302) * t226 + t384, t19 * t77 + t20 * t75 + (-t367 + (-t28 + t342) * pkin(9)) * t230 + ((qJD(6) * t75 - t27) * pkin(9) - t423) * t226 + t277, -t14 * t20 - t13 * t19 - t32 * t39 - g(1) * t327 - g(3) * t185 + (t255 - t8) * pkin(5) + (t240 + t169) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t362, -t75 ^ 2 + t77 ^ 2, t405 * t75 - t27, -t362, t405 * t77 - t28, t46, -g(1) * t130 - g(2) * t132 + t226 * t254 - t313 * t33 - t32 * t77 + t11 + t366, g(1) * t131 - g(2) * t133 + t367 + t32 * t75 + (qJD(6) * t33 - t12) * t226 + t254 * t230, 0, 0;];
tau_reg  = t6;
