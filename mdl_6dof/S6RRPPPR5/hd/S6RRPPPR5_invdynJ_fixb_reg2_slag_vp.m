% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPPPR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:23:56
% EndTime: 2019-03-09 08:24:07
% DurationCPUTime: 7.56s
% Computational Cost: add. (5598->662), mult. (12584->788), div. (0->0), fcn. (8485->8), ass. (0->328)
t231 = cos(qJ(2));
t222 = g(3) * t231;
t228 = sin(qJ(2));
t229 = sin(qJ(1));
t232 = cos(qJ(1));
t306 = g(1) * t232 + g(2) * t229;
t435 = t306 * t228;
t430 = t222 - t435;
t348 = t228 * qJDD(1);
t198 = pkin(7) * t348;
t351 = qJD(1) * qJD(2);
t326 = t231 * t351;
t111 = -qJDD(2) * pkin(2) + pkin(7) * t326 + qJDD(3) + t198;
t226 = cos(pkin(9));
t363 = qJD(1) * t228;
t335 = t226 * t363;
t225 = sin(pkin(9));
t361 = qJD(2) * t225;
t136 = t335 + t361;
t356 = qJD(4) * t136;
t204 = t226 * qJDD(2);
t260 = t326 + t348;
t98 = t225 * t260 - t204;
t422 = pkin(3) * t98;
t242 = t111 - t356 + t422;
t410 = pkin(5) + qJ(4);
t337 = t225 * t363;
t353 = t226 * qJD(2);
t134 = t337 - t353;
t442 = t98 * qJ(5) + t134 * qJD(5);
t349 = qJDD(2) * t225;
t99 = t226 * t260 + t349;
t8 = -t410 * t99 + t242 + t442;
t453 = t430 + t8;
t227 = sin(qJ(6));
t230 = cos(qJ(6));
t72 = t134 * t227 - t230 * t136;
t452 = t72 ^ 2;
t75 = t134 * t230 + t136 * t227;
t451 = t75 ^ 2;
t450 = pkin(4) + qJ(3);
t362 = qJD(1) * t231;
t181 = -qJD(6) + t362;
t449 = t181 * t72;
t448 = t181 * t75;
t383 = t228 * t232;
t384 = t228 * t229;
t447 = g(1) * t383 + g(2) * t384;
t208 = t231 * qJDD(1);
t327 = t228 * t351;
t429 = -t327 + t208;
t138 = qJDD(6) - t429;
t281 = t181 ^ 2;
t446 = t138 * t230 - t227 * t281;
t436 = (t134 * t226 + t136 * t225) * t231;
t241 = qJD(1) * t436 - t225 * t98 + t226 * t99;
t403 = t226 * t98;
t404 = t225 * t99;
t445 = qJD(2) * t436 + t228 * (t403 + t404);
t444 = -2 * pkin(1);
t106 = pkin(7) * t429 + qJDD(2) * qJ(3) + qJD(2) * qJD(3);
t298 = pkin(2) * t228 - qJ(3) * t231;
t115 = qJD(2) * t298 - qJD(3) * t228;
t211 = t228 * qJ(3);
t218 = t231 * pkin(2);
t340 = -pkin(1) - t218;
t277 = t340 - t211;
t69 = qJD(1) * t115 + qJDD(1) * t277;
t29 = t226 * t106 + t225 * t69;
t345 = -qJ(4) * t327 - t29;
t317 = qJDD(5) - t345;
t350 = qJD(1) * qJD(4);
t423 = pkin(4) + pkin(8);
t10 = pkin(5) * t327 - t423 * t98 + (-qJDD(1) * t410 - t350) * t231 + t317;
t126 = t277 * qJD(1);
t201 = pkin(7) * t362;
t158 = qJD(2) * qJ(3) + t201;
t78 = t126 * t226 - t225 * t158;
t60 = pkin(3) * t362 + qJD(4) - t78;
t258 = qJ(5) * t362 + t60;
t23 = t136 * t423 + t258;
t329 = t410 * t231;
t79 = t225 * t126 + t226 * t158;
t24 = -qJD(1) * t329 - t134 * t423 + qJD(5) + t79;
t292 = t227 * t23 - t230 * t24;
t28 = -t225 * t106 + t226 * t69;
t275 = pkin(3) * t208 + qJDD(4) - t28;
t360 = qJD(2) * t228;
t412 = pkin(3) + qJ(5);
t313 = t412 * t360;
t209 = t231 * qJD(5);
t432 = qJ(5) * t208 + qJD(1) * t209;
t238 = -qJD(1) * t313 + t275 + t432;
t9 = t423 * t99 + t238;
t1 = -qJD(6) * t292 + t227 * t10 + t230 * t9;
t268 = -t181 * t292 + t1;
t6 = t227 * t24 + t23 * t230;
t2 = -qJD(6) * t6 + t230 * t10 - t227 * t9;
t443 = -t6 * t181 + t2;
t18 = t72 * qJD(6) - t227 * t99 - t230 * t98;
t441 = t18 + t449;
t19 = qJD(6) * t75 + t227 * t98 - t230 * t99;
t261 = -t19 - t448;
t440 = t134 * t412;
t439 = t226 * t412;
t352 = qJ(4) * qJDD(1);
t437 = t231 * (t350 + t352);
t355 = qJD(4) * t225;
t336 = t225 * t362;
t374 = pkin(3) * t336 + t201;
t434 = -qJD(5) * t226 - t355 - t374;
t213 = t231 * qJ(5);
t388 = t226 * t228;
t433 = pkin(4) * t388 + t213;
t431 = qJ(4) * t360 - qJD(4) * t231;
t284 = t227 * t225 - t226 * t230;
t224 = t231 ^ 2;
t234 = qJD(1) ^ 2;
t392 = t224 * t234;
t424 = t136 ^ 2;
t428 = -t424 - t392;
t130 = t134 ^ 2;
t427 = t424 + t130;
t359 = qJD(2) * t231;
t333 = t225 * t359;
t373 = pkin(3) * t333 + pkin(7) * t359;
t425 = -(qJD(4) * t226 - qJD(5) * t225) * t228 + t373;
t324 = t228 * t208;
t328 = t224 * t351;
t223 = t228 ^ 2;
t364 = qJD(1) * t223;
t26 = qJD(2) * (t136 * t228 + t226 * t364) - t231 * t99 + (-t324 - t328) * t226;
t167 = t225 * t208;
t25 = qJD(2) * (t134 * t228 + t225 * t364) - t228 * t167 - t225 * t328 - t231 * t98;
t421 = pkin(4) * t99;
t420 = pkin(1) * t234;
t419 = pkin(7) * t136;
t418 = g(1) * t229;
t413 = t75 * t72;
t139 = t225 * t230 + t226 * t227;
t339 = -pkin(7) * t225 - pkin(3);
t278 = (-qJ(5) + t339) * t228;
t386 = t226 * t231;
t245 = pkin(8) * t386 + t278;
t334 = t226 * t362;
t143 = t298 * qJD(1);
t393 = t143 * t226;
t320 = pkin(4) * t334 - t393;
t39 = qJD(1) * t245 + t320;
t343 = t225 * t423;
t243 = (-pkin(7) * t226 + pkin(5)) * t228 - t231 * t343;
t124 = t225 * t143;
t195 = qJ(4) * t363;
t376 = t124 + t195;
t40 = qJD(1) * t243 + t376;
t152 = t450 * t225;
t127 = pkin(8) * t225 + t152;
t153 = t450 * t226;
t128 = pkin(8) * t226 + t153;
t67 = -t127 * t227 + t128 * t230;
t409 = qJD(3) * t139 + qJD(6) * t67 - t227 * t40 - t230 * t39;
t68 = t127 * t230 + t128 * t227;
t408 = -qJD(3) * t284 - qJD(6) * t68 + t227 * t39 - t230 * t40;
t407 = qJ(4) * t99;
t398 = qJ(5) * t225;
t267 = -t226 * t410 + t398;
t248 = t231 * t267;
t402 = -qJD(1) * t248 + t434;
t288 = qJ(4) * t226 - t398;
t265 = t231 * t288;
t401 = -qJD(1) * t265 - t434;
t400 = pkin(7) * qJDD(1);
t380 = t232 * t225;
t122 = -t229 * t226 + t231 * t380;
t399 = qJ(4) * t122;
t397 = t115 * t226;
t396 = t134 * t136;
t391 = t225 * qJ(4);
t390 = t225 * t228;
t389 = t225 * t231;
t382 = t229 * t231;
t381 = t231 * t232;
t32 = pkin(4) * t136 + t258;
t379 = -qJD(4) - t32;
t117 = t139 * qJD(6);
t262 = t139 * t231;
t378 = -qJD(1) * t262 + t117;
t118 = t284 * qJD(6);
t377 = -t227 * t336 + t230 * t334 + t118;
t375 = t447 * t225;
t372 = pkin(3) * t390 + t228 * pkin(7);
t174 = qJ(3) * t382;
t371 = pkin(4) * t382 + t174;
t368 = t218 + t211;
t149 = -pkin(1) - t368;
t101 = pkin(7) * t386 + t225 * t149;
t179 = qJ(3) * t381;
t370 = pkin(4) * t381 + t179;
t369 = g(1) * t384 - g(2) * t383;
t367 = t232 * pkin(1) + t229 * pkin(7);
t366 = t223 - t224;
t365 = t223 + t224;
t358 = qJD(3) * t134;
t357 = qJD(3) * t136;
t344 = pkin(7) * t360;
t342 = qJD(3) * t336 + t447 * t226;
t341 = g(1) * t381 + g(2) * t382 + g(3) * t228;
t338 = qJ(3) * t360;
t332 = t231 * t353;
t21 = t242 - t407;
t11 = -t21 - t442;
t331 = t11 - t222;
t330 = t21 + t222;
t325 = t226 * t208;
t323 = pkin(2) + t391;
t322 = t111 + t222;
t173 = pkin(7) * t389;
t100 = t149 * t226 - t173;
t319 = t134 + t353;
t318 = -t136 + t361;
t316 = pkin(3) * t386 + qJ(4) * t389 + t368;
t315 = pkin(2) * t381 + qJ(3) * t383 + t367;
t314 = t228 * t326;
t310 = t339 * t228;
t309 = -pkin(2) - t439;
t120 = t225 * t382 + t226 * t232;
t308 = g(1) * t120 - g(2) * t122;
t121 = t226 * t382 - t380;
t123 = t225 * t229 + t226 * t381;
t307 = g(1) * t121 - g(2) * t123;
t305 = -g(2) * t232 + t418;
t304 = -t226 * t392 + t167;
t303 = qJD(2) * pkin(2) - pkin(7) * t363 - qJD(3);
t219 = t232 * pkin(7);
t302 = -t121 * pkin(3) - qJ(4) * t120 + t219;
t87 = qJ(4) * t231 - t101;
t301 = pkin(4) * t332 + t209 - t397;
t217 = t231 * pkin(3);
t91 = -t100 + t217;
t104 = t225 * t115;
t299 = t104 + t431;
t297 = pkin(7) * t134 - t225 * t303;
t295 = t225 * t348 - t204;
t48 = t173 + t217 + (pkin(8) * t228 - t149) * t226 + t433;
t49 = -t228 * t343 + t101 - t329;
t17 = t227 * t49 + t230 * t48;
t16 = -t227 * t48 + t230 * t49;
t291 = t123 * pkin(3) + t315;
t290 = -qJ(3) * t98 - t358;
t289 = qJ(3) * t99 + t357;
t287 = t120 * t230 + t121 * t227;
t286 = t120 * t227 - t121 * t230;
t283 = qJD(1) * t319;
t282 = qJD(1) * t318;
t233 = qJD(2) ^ 2;
t279 = qJDD(2) * t231 - t228 * t233;
t93 = -pkin(7) * t335 + t124;
t85 = -t226 * t344 + t104;
t276 = pkin(3) * t226 + t323;
t65 = qJ(4) * t362 - t79;
t273 = t228 * pkin(4) + t226 * t213 + t316;
t271 = -pkin(4) * t98 + t317;
t266 = -pkin(4) * t389 - pkin(7) * t388;
t259 = t226 * t348 + t349;
t257 = qJ(3) * t325 - t375;
t44 = -t134 * t336 - t403;
t45 = -t136 * t334 + t404;
t255 = qJ(4) * t136 + t303;
t254 = -qJ(5) * t121 + t302;
t253 = -t429 - t396;
t41 = (t134 * t359 + t228 * t98) * t225;
t42 = (t136 * t359 + t228 * t99) * t226;
t252 = t277 * t418;
t251 = -g(1) * t122 - g(2) * t120 - g(3) * t390;
t250 = -g(1) * t123 - g(2) * t121 - g(3) * t388;
t249 = qJ(3) * t167 + t342;
t247 = t225 * t410 - t309;
t246 = pkin(4) * t383 + qJ(5) * t123 + t291;
t244 = -t138 * t227 - t230 * t281;
t56 = t231 * t282 + t295;
t240 = t251 + t275;
t239 = t111 + t430;
t51 = -t225 * t392 + t228 * t283 - t325;
t236 = t239 - t407 + t422;
t171 = t228 * t234 * t231;
t129 = qJDD(1) * t224 - 0.2e1 * t314;
t119 = t323 + t439;
t110 = t139 * t228;
t109 = t284 * t228;
t107 = -qJ(4) * t388 + t372;
t97 = -qJ(4) * t334 + t374;
t92 = pkin(7) * t337 + t393;
t86 = t228 * t288 - t372;
t84 = t225 * t344 + t397;
t83 = qJD(1) * t310 - t393;
t82 = -t195 - t93;
t81 = (-qJ(4) * t359 - qJD(4) * t228) * t226 + t373;
t77 = -pkin(4) * t390 - t87;
t71 = t228 * t267 + t372;
t70 = qJD(2) * t310 - t397;
t66 = t91 + t433;
t64 = t122 * t230 + t123 * t227;
t63 = -t122 * t227 + t123 * t230;
t62 = qJD(1) * t266 + t376;
t59 = -t85 - t431;
t58 = t231 * t283 + t259;
t57 = (-t134 + t353) * t362 + t259;
t55 = pkin(3) * t134 - t255;
t53 = qJD(2) * t262 - t118 * t228;
t52 = t117 * t228 + t227 * t333 - t230 * t332;
t50 = t228 * t282 - t304;
t47 = qJD(1) * t278 + t320;
t46 = qJD(2) * t265 - t425;
t43 = qJD(2) * t266 + t299;
t38 = qJD(2) * t278 + t301;
t35 = -pkin(4) * t134 + qJD(5) - t65;
t34 = t255 - t440;
t33 = qJD(2) * t248 + t425;
t31 = qJD(2) * t243 + t299;
t30 = qJD(2) * t245 + t301;
t27 = -t136 * t410 - t303 + t440;
t22 = -pkin(3) * t327 + t275;
t20 = t345 + t437;
t15 = t271 - t437;
t12 = t238 + t421;
t4 = -qJD(6) * t17 - t227 * t30 + t230 * t31;
t3 = qJD(6) * t16 + t227 * t31 + t230 * t30;
t5 = [0, 0, 0, 0, 0, qJDD(1), t305, t306, 0, 0, qJDD(1) * t223 + 0.2e1 * t314, -0.2e1 * t351 * t366 + 0.2e1 * t324, qJDD(2) * t228 + t231 * t233, t129, t279, 0 (-pkin(7) * qJDD(2) + t351 * t444) * t228 + (0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t233 + t305) * t231, -pkin(7) * t279 + t260 * t444 - t369, 0.2e1 * t365 * t400 - t306, -g(1) * (-pkin(1) * t229 + t219) - g(2) * t367 + (pkin(7) ^ 2 * t365 + (pkin(1) ^ 2)) * qJDD(1), t42, -t445, t26, t41, -t25, t129 (pkin(7) * t98 + t111 * t225 + (qJD(1) * t100 + t78) * qJD(2)) * t228 + (-qJD(1) * t84 + qJD(2) * t297 - qJDD(1) * t100 - t28) * t231 + t307 (pkin(7) * t99 + t111 * t226 + (-qJD(1) * t101 - t79) * qJD(2)) * t228 + (qJD(1) * t85 + qJDD(1) * t101 + t29 + (-t226 * t303 + t419) * qJD(2)) * t231 - t308, -t100 * t99 - t101 * t98 - t134 * t85 - t136 * t84 + (-t225 * t29 - t226 * t28) * t228 + (-t225 * t79 - t226 * t78) * t359 + t369, t29 * t101 + t79 * t85 + t28 * t100 + t78 * t84 - g(1) * t219 - g(2) * t315 - t252 + (t111 * t228 - t303 * t359) * pkin(7), t129, -t26, t25, t42, -t445, t41, t134 * t59 + t136 * t70 + t87 * t98 + t91 * t99 + (t20 * t225 + t22 * t226) * t228 + (t225 * t65 + t226 * t60) * t359 + t369, -t107 * t98 - t134 * t81 + (-t21 * t225 + (qJD(1) * t91 + t60) * qJD(2)) * t228 + (-qJD(1) * t70 - qJDD(1) * t91 - t361 * t55 - t22) * t231 - t307, -t107 * t99 - t136 * t81 + (-t21 * t226 + (-qJD(1) * t87 - t65) * qJD(2)) * t228 + (qJD(1) * t59 + qJDD(1) * t87 - t353 * t55 + t20) * t231 + t308, t21 * t107 + t55 * t81 + t20 * t87 + t65 * t59 + t22 * t91 + t60 * t70 - g(1) * t302 - g(2) * (t291 + t399) - t252, t41, -t25, t445, t129, -t26, t42, t136 * t46 + t86 * t99 + (t11 * t226 + (qJD(1) * t77 + t35) * qJD(2)) * t228 + (-qJD(1) * t43 - qJDD(1) * t77 + t34 * t353 - t15) * t231 + t308, t134 * t43 - t136 * t38 - t66 * t99 + t77 * t98 + (-t12 * t226 + t15 * t225) * t228 + (t225 * t35 - t226 * t32) * t359 - t369, -t134 * t46 - t86 * t98 + (-t11 * t225 + (-qJD(1) * t66 - t32) * qJD(2)) * t228 + (qJD(1) * t38 + qJDD(1) * t66 - t34 * t361 + t12) * t231 + t307, t12 * t66 + t32 * t38 + t11 * t86 + t34 * t46 + t15 * t77 + t35 * t43 - g(1) * t254 - g(2) * (t246 + t399) - (-t228 * t450 + t340) * t418, -t110 * t18 + t53 * t75, t109 * t18 - t110 * t19 - t52 * t75 - t53 * t72, t110 * t138 + t18 * t231 - t181 * t53 + t360 * t75, t109 * t19 + t52 * t72, -t109 * t138 + t181 * t52 + t19 * t231 - t360 * t72, -t138 * t231 - t181 * t360, g(1) * t287 - g(2) * t64 + t8 * t109 + t16 * t138 - t4 * t181 + t71 * t19 - t2 * t231 + t27 * t52 - t292 * t360 + t33 * t72, -g(1) * t286 - g(2) * t63 + t1 * t231 + t8 * t110 - t17 * t138 - t71 * t18 + t3 * t181 + t27 * t53 + t33 * t75 - t360 * t6, -t1 * t109 - t110 * t2 + t16 * t18 - t17 * t19 + t292 * t53 - t3 * t72 - t4 * t75 - t52 * t6 + t369, t1 * t17 + t6 * t3 + t2 * t16 - t292 * t4 + t8 * t71 + t27 * t33 - g(1) * (-pkin(5) * t120 + t254) - g(2) * (pkin(8) * t383 + t122 * t410 + t246) - ((-pkin(8) - t450) * t228 + t340) * t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t171, t366 * t234, t348, t171, t208, qJDD(2), -t198 - t222 + (t306 + t420) * t228 (-t400 + t420) * t231 + t341, 0, 0, t45, t241, t50, t44, t51, t171, -pkin(2) * t98 - t322 * t226 + ((-qJ(3) * t361 - t78) * t228 + (-t297 + t92) * t231) * qJD(1) + t249, -pkin(2) * t99 + t322 * t225 + ((-qJ(3) * t353 + t79) * t228 + (-t419 - t93 + (qJD(3) + t303) * t226) * t231) * qJD(1) + t257, t134 * t93 + t136 * t92 + (t362 * t78 + t29 + t290) * t226 + (t362 * t79 - t28 + t289) * t225 - t341, -t111 * pkin(2) - t79 * t93 - t78 * t92 + t303 * t201 - g(1) * (-pkin(2) * t383 + t179) - g(2) * (-pkin(2) * t384 + t174) - g(3) * t368 + (-t225 * t78 + t226 * t79) * qJD(3) + (-t225 * t28 + t226 * t29) * qJ(3), t171, -t318 * t363 + t304, -t51, t45, t241, t44, -t134 * t82 - t136 * t83 + (-t362 * t60 - t20 + t290) * t226 + (-t362 * t65 + t22 + t289) * t225 - t341, t276 * t98 + t330 * t226 + (t97 + t355) * t134 + (-t228 * t60 + t231 * t83 + (t231 * t55 + t338) * t225) * qJD(1) - t249, t136 * t97 + t276 * t99 + (-t330 + t356) * t225 + (t228 * t65 - t231 * t82 + (t338 + (-qJD(3) + t55) * t231) * t226) * qJD(1) - t257, -t55 * t97 - t65 * t82 - t60 * t83 - g(1) * t179 - g(2) * t174 - g(3) * t316 + (-qJ(3) * t20 - qJD(3) * t65) * t226 + (qJ(3) * t22 + qJD(3) * t60 - qJD(4) * t55) * t225 + (-t21 + t435) * t276, t44, t51, -t241, t171, -t50, t45, -t153 * t208 + t119 * t99 + t331 * t225 + t401 * t136 + ((qJD(2) * t153 - t35) * t228 + (t62 + (-qJD(3) - t34) * t226) * t231) * qJD(1) + t375, -t134 * t62 + t136 * t47 - t152 * t99 + t153 * t98 + (t32 * t362 - t15 + t358) * t226 + (-t35 * t362 - t12 - t357) * t225 + t341, t152 * t208 - t119 * t98 + t331 * t226 - t401 * t134 + ((t225 * t34 - t47) * t231 + (-qJD(2) * t152 + t32) * t228) * qJD(1) + t342, t12 * t152 + t11 * t119 + t15 * t153 - t32 * t47 - t35 * t62 - g(1) * t370 - g(2) * t371 - g(3) * t273 + t401 * t34 + (t225 * t32 + t226 * t35) * qJD(3) + (-t309 + t391) * t435, -t18 * t284 + t378 * t75, -t139 * t18 - t19 * t284 - t377 * t75 - t378 * t72, t138 * t284 - t181 * t378 - t363 * t75, -t139 * t19 + t377 * t72, t138 * t139 + t181 * t377 + t363 * t72, t181 * t363, t292 * t363 - g(3) * t262 - t247 * t19 + t67 * t138 - t408 * t181 + t377 * t27 + t402 * t72 + (-t8 + t435) * t139, -t68 * t138 + t247 * t18 + t409 * t181 + t378 * t27 + t284 * t453 + t6 * t363 + t402 * t75, t1 * t139 + t18 * t67 - t19 * t68 - t2 * t284 + t292 * t378 - t377 * t6 - t408 * t75 - t409 * t72 - t341, t1 * t68 + t2 * t67 - t8 * t247 - g(1) * (pkin(8) * t381 + t370) - g(2) * (pkin(8) * t382 + t371) - g(3) * (pkin(5) * t389 + t273) + t409 * t6 - t408 * t292 + t402 * t27 + (-g(3) * pkin(8) + t247 * t306) * t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58, -t427, t134 * t79 + t136 * t78 + t239, 0, 0, 0, 0, 0, 0, -t427, -t56, -t319 * t362 - t259, -t134 * t65 + (-qJD(4) - t60) * t136 + t236, 0, 0, 0, 0, 0, 0, -t58, t427, t56, t134 * t35 + t136 * t379 + t236 + t442, 0, 0, 0, 0, 0, 0, t19 - t448, -t18 + t449, -t451 - t452, -t292 * t75 + t6 * t72 + t453; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t253, t428, t136 * t55 + (-pkin(3) * t360 - t231 * t65) * qJD(1) + t240, 0, 0, 0, 0, 0, 0, t428, -t57, -t253, t421 - t136 * t34 + (t231 * t35 - t313) * qJD(1) + t240 + t432, 0, 0, 0, 0, 0, 0, t136 * t72 + t244, t136 * t75 - t446, -t227 * t441 + t261 * t230, t136 * t27 - t227 * t443 + t268 * t230 + t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t429 + t396 (t136 + t361) * t362 + t295, -t130 - t392, t134 * t34 + (qJD(1) * t379 - t352) * t231 + t250 + t271, 0, 0, 0, 0, 0, 0, -t134 * t72 + t446, -t134 * t75 + t244, t261 * t227 + t230 * t441, -t27 * t134 + t268 * t227 + t230 * t443 + t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t413, t451 - t452, -t441, -t413, t261, t138, -g(1) * t63 + g(2) * t286 + g(3) * t109 - t27 * t75 + t443, g(1) * t64 + g(2) * t287 + g(3) * t110 + t27 * t72 - t268, 0, 0;];
tau_reg  = t5;
