% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 08:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:54:37
% EndTime: 2019-05-06 08:55:04
% DurationCPUTime: 25.82s
% Computational Cost: add. (40529->679), mult. (90974->887), div. (0->0), fcn. (58709->8), ass. (0->461)
t883 = sin(pkin(9));
t884 = cos(pkin(9));
t886 = sin(qJ(2));
t949 = qJD(1) * t886;
t840 = qJD(2) * t883 + t884 * t949;
t835 = t840 ^ 2;
t889 = cos(qJ(2));
t881 = t889 ^ 2;
t891 = qJD(1) ^ 2;
t957 = t881 * t891;
t1036 = t835 + t957;
t940 = qJD(1) * qJD(2);
t873 = t886 * t940;
t937 = qJDD(1) * t889;
t850 = -t873 + t937;
t838 = -t884 * qJD(2) + t883 * t949;
t965 = t840 * t838;
t1034 = -t965 + t850;
t1062 = t1034 * t883;
t1071 = t1036 * t884 - t1062;
t948 = qJD(1) * t889;
t818 = t838 * t948;
t929 = t889 * t940;
t939 = qJDD(1) * t886;
t849 = t929 + t939;
t908 = qJDD(2) * t883 + t849 * t884;
t1042 = t818 + t908;
t1061 = t1034 * t884;
t691 = t1036 * t883 + t1061;
t636 = t1042 * t886 + t691 * t889;
t887 = sin(qJ(1));
t890 = cos(qJ(1));
t583 = t1071 * t890 + t636 * t887;
t1128 = pkin(6) * t583;
t586 = -t1071 * t887 + t636 * t890;
t1127 = pkin(6) * t586;
t819 = t840 * t948;
t920 = qJDD(2) * t884 - t883 * t849;
t1040 = t819 + t920;
t1035 = t850 + t965;
t1053 = t1035 * t883;
t834 = t838 ^ 2;
t772 = t957 + t834;
t674 = t884 * t772 - t1053;
t622 = t1040 * t886 + t674 * t889;
t1052 = t1035 * t884;
t671 = t772 * t883 + t1052;
t569 = t622 * t887 - t671 * t890;
t1130 = pkin(6) * t569;
t572 = t622 * t890 + t671 * t887;
t1129 = pkin(6) * t572;
t632 = -t889 * t1042 + t691 * t886;
t1120 = pkin(7) * t632;
t1057 = t920 - t819;
t757 = t908 - t818;
t658 = t1057 * t884 + t757 * t883;
t747 = -t835 - t834;
t1079 = t658 * t889 + t747 * t886;
t650 = -t1057 * t883 + t757 * t884;
t1104 = t1079 * t890 - t650 * t887;
t1119 = pkin(6) * t1104;
t1105 = t1079 * t887 + t650 * t890;
t1118 = pkin(6) * t1105;
t619 = -t889 * t1040 + t674 * t886;
t1126 = pkin(1) * t619 + qJ(3) * t674;
t1125 = pkin(1) * t632 + qJ(3) * t691;
t1115 = -pkin(1) * t1071 - pkin(7) * t636;
t809 = t957 - t834;
t1068 = t809 * t883 + t1061;
t696 = t809 * t884 - t1062;
t641 = -t1057 * t886 + t696 * t889;
t1124 = -t1068 * t890 + t641 * t887;
t1123 = t1068 * t887 + t641 * t890;
t1121 = pkin(7) * t619;
t1117 = pkin(2) * t1042 - t1125;
t1116 = -pkin(2) * t1040 + t1126;
t1114 = -pkin(1) * t671 + pkin(7) * t622;
t1051 = t1040 * t884;
t997 = t1042 * t883;
t654 = t997 - t1051;
t775 = t835 - t834;
t629 = t654 * t889 - t775 * t886;
t648 = t1040 * t883 + t1042 * t884;
t1113 = t629 * t887 + t648 * t890;
t1112 = t629 * t890 - t648 * t887;
t811 = t957 - t835;
t1070 = t811 * t884 - t1053;
t1069 = t811 * t883 + t1052;
t1076 = t1069 * t889 - t757 * t886;
t1103 = t1070 * t890 + t1076 * t887;
t1102 = -t1070 * t887 + t1076 * t890;
t1111 = pkin(7) * t1079;
t1080 = t658 * t886 - t747 * t889;
t1110 = pkin(7) * t1080;
t1108 = pkin(1) * t1080 - pkin(2) * t747 + qJ(3) * t658;
t1107 = -pkin(1) * t650 - t1111;
t1106 = t889 * t1057 + t696 * t886;
t1100 = pkin(2) * t671;
t1098 = pkin(2) * t1071;
t1074 = qJ(3) * t650;
t1097 = qJ(3) * t671;
t1091 = qJ(3) * t1071;
t1084 = -qJ(4) * t772 - t1100;
t1083 = qJ(4) * t1034 - t1098;
t1078 = t654 * t886 + t775 * t889;
t1077 = t1069 * t886 + t889 * t757;
t1067 = pkin(2) * t650 - qJ(4) * t1057;
t1058 = pkin(3) * t1040;
t1060 = pkin(4) * t757;
t808 = t884 * t818;
t925 = -t883 * t920 - t808;
t932 = t886 * t965;
t1025 = t889 * t925 - t932;
t901 = t818 * t883 - t884 * t920;
t1030 = t1025 * t887 + t890 * t901;
t917 = t883 * t819;
t906 = t884 * t908 + t917;
t1026 = t889 * t906 + t932;
t894 = t819 * t884 - t883 * t908;
t1029 = t1026 * t887 + t890 * t894;
t1024 = t1026 * t890 - t894 * t887;
t1023 = t1025 * t890 - t901 * t887;
t905 = t808 - t917;
t964 = t850 * t886;
t1027 = t889 * t905 - t964;
t900 = (-t838 * t883 - t840 * t884) * t948;
t1045 = t890 * t900;
t1050 = t1027 * t887 + t1045;
t1046 = t887 * t900;
t1049 = t1027 * t890 - t1046;
t860 = g(1) * t890 + g(2) * t887;
t830 = -pkin(1) * t891 + qJDD(1) * pkin(7) - t860;
t1016 = pkin(2) * t889;
t911 = -qJ(3) * t886 - t1016;
t847 = t911 * qJD(1);
t1044 = (qJD(1) * t847 + t830) * t886;
t885 = sin(qJ(6));
t888 = cos(qJ(6));
t769 = t838 * t885 - t888 * t840;
t660 = -t769 * qJD(6) + t885 * t908 - t888 * t920;
t867 = -qJD(6) + t948;
t750 = t769 * t867;
t1043 = t750 + t660;
t947 = qJD(3) * t838;
t824 = -0.2e1 * t947;
t930 = qJD(4) * t948;
t1039 = t824 - 0.2e1 * t930;
t1038 = 0.2e1 * t947 + 0.2e1 * t930;
t773 = pkin(3) * t838 - qJ(4) * t840;
t946 = qJD(3) * t840;
t1037 = -t840 * t773 - 0.2e1 * t946;
t1033 = -t908 * qJ(4) - t1058;
t805 = pkin(4) * t840 + qJ(5) * t948;
t832 = t834 * pkin(4);
t944 = qJD(5) * t838;
t1032 = t840 * t805 + t832 - 0.2e1 * t944;
t976 = t920 * qJ(5);
t1031 = (-0.2e1 * qJD(4) - t805) * t840 - t832 - t976;
t771 = t838 * t888 + t840 * t885;
t926 = -t885 * t920 - t888 * t908;
t614 = (qJD(6) + t867) * t771 + t926;
t831 = t889 * t850;
t1028 = t886 * t905 + t831;
t931 = t889 * t965;
t914 = t886 * t906 - t931;
t915 = t886 * t925 + t931;
t1014 = t889 * g(3);
t1022 = qJD(2) ^ 2;
t907 = -qJDD(2) * pkin(2) - t1022 * qJ(3) + qJDD(3) + t1014;
t899 = t907 + t1033;
t954 = t886 * t830;
t892 = -(qJ(4) * t838 * t889 - t847 * t886) * qJD(1) + t899 + t954;
t767 = t769 ^ 2;
t768 = t771 ^ 2;
t865 = t867 ^ 2;
t1021 = 0.2e1 * qJD(5);
t1020 = pkin(4) + pkin(8);
t1017 = pkin(2) * t886;
t1015 = pkin(3) * t884;
t1013 = pkin(3) + qJ(5);
t1012 = -pkin(5) - qJ(4);
t1011 = qJ(4) * t747;
t842 = -qJDD(6) + t850;
t978 = t769 * t771;
t664 = -t842 - t978;
t1009 = t664 * t885;
t1008 = t664 * t888;
t718 = t907 + t1044;
t1007 = t718 * t883;
t1006 = t718 * t884;
t859 = t887 * g(1) - t890 * g(2);
t829 = qJDD(1) * pkin(1) + t891 * pkin(7) + t859;
t969 = t829 * t886;
t968 = t829 * t889;
t866 = t889 * t891 * t886;
t857 = -t866 + qJDD(2);
t963 = t857 * t886;
t962 = t857 * t889;
t858 = qJDD(2) + t866;
t961 = t858 * t886;
t960 = t867 * t885;
t959 = t867 * t888;
t880 = t886 ^ 2;
t958 = t880 * t891;
t942 = -pkin(5) * t948 - pkin(8) * t838 + t1021;
t537 = -t908 * pkin(5) - t835 * pkin(8) + (-qJ(4) * t948 + t942) * t838 + t718 + t1031 + t1033;
t956 = t885 * t537;
t663 = t842 - t978;
t955 = t885 * t663;
t953 = t888 * t537;
t952 = t888 * t663;
t910 = t849 + t929;
t704 = -t910 * qJ(3) + (-t850 + t873) * pkin(2) - t829;
t797 = -g(3) * t886 + t889 * t830;
t719 = -pkin(2) * t1022 + qJDD(2) * qJ(3) + t847 * t948 + t797;
t927 = -t884 * t704 + t883 * t719;
t902 = t850 * pkin(3) - qJ(4) * t957 + qJDD(4) + t927;
t897 = qJ(5) * t1035 + t1060 + t902;
t943 = 0.2e1 * qJD(3) + t773;
t529 = t908 * pkin(8) + t942 * t948 + (-pkin(5) * t840 + t943) * t840 + t897;
t951 = t883 * t704 + t884 * t719;
t909 = pkin(3) * t957 + t850 * qJ(4) + t838 * t773 - t951;
t898 = pkin(4) * t920 - t834 * qJ(5) - t805 * t948 + qJDD(5) - t909;
t553 = t898 + t1039;
t530 = -pkin(5) * t1034 + pkin(8) * t1057 + t553;
t482 = t888 * t529 + t885 * t530;
t950 = t880 + t881;
t945 = qJD(4) * t840;
t938 = qJDD(1) * t887;
t936 = qJDD(1) * t890;
t935 = -t768 - t865;
t934 = t886 * t978;
t933 = t889 * t978;
t626 = t824 + t951;
t928 = qJ(4) * t883 + pkin(2);
t481 = t885 * t529 - t888 * t530;
t796 = t954 + t1014;
t707 = t796 * t886 + t889 * t797;
t787 = -t859 * t887 - t890 * t860;
t923 = t943 * t840;
t919 = t887 * t866;
t918 = t890 * t866;
t854 = -t887 * t891 + t936;
t916 = -pkin(6) * t854 - g(3) * t887;
t448 = -t888 * t481 + t885 * t482;
t449 = t885 * t481 + t888 * t482;
t625 = t927 + 0.2e1 * t946;
t558 = -t625 * t884 + t626 * t883;
t559 = t625 * t883 + t626 * t884;
t706 = t796 * t889 - t797 * t886;
t786 = t859 * t890 - t860 * t887;
t578 = -t909 + t1039;
t580 = -t902 + t1037;
t895 = -t898 + t1038;
t893 = t1021 * t948 + t897;
t543 = t923 + t893;
t823 = 0.2e1 * t945;
t581 = t823 - t1044 + (t1042 + t818) * qJ(4) - t899;
t594 = t892 - 0.2e1 * t945;
t864 = -t957 - t1022;
t863 = t957 - t1022;
t862 = -t958 - t1022;
t861 = -t958 + t1022;
t856 = (-t880 + t881) * t891;
t855 = t950 * t891;
t853 = t890 * t891 + t938;
t852 = t950 * qJDD(1);
t851 = -0.2e1 * t873 + t937;
t848 = 0.2e1 * t929 + t939;
t845 = t889 * t858;
t844 = t950 * t940;
t820 = -pkin(6) * t853 + g(3) * t890;
t804 = t849 * t889 - t880 * t940;
t803 = -t881 * t940 - t964;
t795 = -t862 * t886 - t962;
t794 = -t861 * t886 + t845;
t793 = t864 * t889 - t961;
t792 = t863 * t889 - t963;
t791 = t862 * t889 - t963;
t790 = t864 * t886 + t845;
t780 = t852 * t890 - t855 * t887;
t779 = t852 * t887 + t855 * t890;
t774 = -t848 * t886 + t851 * t889;
t740 = (t838 * t884 - t840 * t883) * t948;
t736 = -t768 + t865;
t735 = t767 - t865;
t734 = t795 * t890 + t848 * t887;
t733 = t793 * t890 - t851 * t887;
t732 = t795 * t887 - t848 * t890;
t731 = t793 * t887 + t851 * t890;
t729 = -pkin(7) * t791 - t968;
t728 = -pkin(7) * t790 - t969;
t717 = -pkin(1) * t791 + t797;
t716 = -pkin(1) * t790 + t796;
t699 = t740 * t889 - t964;
t680 = -t768 + t767;
t679 = t707 * t890 - t829 * t887;
t678 = t707 * t887 + t829 * t890;
t677 = -t865 - t767;
t662 = pkin(4) * t1035 + qJ(4) * t1040;
t659 = -qJD(6) * t771 - t926;
t646 = (-t769 * t888 + t771 * t885) * t867;
t645 = (t769 * t885 + t771 * t888) * t867;
t644 = -t767 - t768;
t631 = t1006 + t1091;
t627 = -pkin(4) * t1034 + t1013 * t1042;
t618 = t750 - t660;
t613 = (qJD(6) - t867) * t771 + t926;
t611 = -t735 * t888 - t955;
t610 = t736 * t885 - t1008;
t609 = t735 * t885 - t952;
t608 = t736 * t888 + t1009;
t607 = -t660 * t888 - t771 * t960;
t606 = t660 * t885 - t771 * t959;
t605 = t659 * t885 + t769 * t959;
t604 = t659 * t888 - t769 * t960;
t603 = t1007 + t1097;
t596 = -t885 * t935 + t952;
t595 = t888 * t935 + t955;
t593 = t888 * t677 - t1009;
t592 = t885 * t677 + t1008;
t591 = pkin(3) * t757 + t1067;
t590 = t645 * t884 - t646 * t883;
t589 = -t645 * t883 - t646 * t884;
t582 = t594 - t1058;
t579 = t626 + t1098;
t577 = t590 * t889 - t842 * t886;
t576 = t625 + t1100;
t575 = -t1013 * t757 - t1067;
t562 = t902 + t923 - t1011;
t561 = t892 + 0.2e1 * t944 + t1031;
t560 = -pkin(3) * t747 + t578;
t557 = -t614 * t888 - t885 * t618;
t556 = t1043 * t885 + t613 * t888;
t555 = -t614 * t885 + t618 * t888;
t554 = t1043 * t888 - t613 * t885;
t552 = t609 * t884 - t611 * t883;
t551 = t608 * t884 - t610 * t883;
t550 = -t609 * t883 - t611 * t884;
t549 = -t608 * t883 - t610 * t884;
t548 = t606 * t884 - t607 * t883;
t547 = t604 * t884 - t605 * t883;
t546 = -t606 * t883 - t607 * t884;
t545 = -t604 * t883 - t605 * t884;
t544 = -t1007 + t1117;
t542 = t595 * t884 + t596 * t883;
t541 = t595 * t883 - t596 * t884;
t540 = -pkin(4) * t1036 + t1032 + t581 + t976;
t539 = t1006 + t1116;
t538 = -pkin(3) * t997 + t581 * t884 - t1091;
t536 = t559 * t889 + t718 * t886;
t535 = t559 * t886 - t718 * t889;
t534 = -qJ(4) * t1051 - t582 * t883 - t1097;
t533 = -pkin(3) * t1036 + t1038 + t1083 + t909;
t532 = t592 * t884 + t593 * t883;
t531 = t592 * t883 - t593 * t884;
t525 = -t558 + t1074;
t524 = -pkin(3) * t1035 + t1084 + t580;
t523 = t548 * t889 + t934;
t522 = t547 * t889 - t934;
t521 = (t1040 + t920) * qJ(5) - pkin(4) * t772 + t1058 + t823 - t892 + t1032;
t520 = t1011 + t1037 - t893 - t1060;
t519 = -pkin(4) * t1057 + t1013 * t747 + t895;
t518 = t578 * t884 - t580 * t883;
t517 = t578 * t883 + t580 * t884;
t516 = t552 * t889 - t614 * t886;
t515 = t551 * t889 - t618 * t886;
t514 = -t1013 * t1036 + t1083 + t895;
t513 = t1043 * t886 + t542 * t889;
t512 = -t1043 * t889 + t542 * t886;
t511 = -t579 * t886 + t631 * t889 - t1120;
t510 = -t883 * t581 + (-pkin(2) - t1015) * t1042 + t1125;
t509 = t532 * t889 + t613 * t886;
t508 = t532 * t886 - t613 * t889;
t507 = -t576 * t886 + t603 * t889 + t1121;
t506 = t1013 * t1035 - t1084 + t543;
t505 = t1040 * t928 - t884 * t582 - t1126;
t504 = t540 * t884 - t627 * t883 - t1091;
t503 = pkin(4) * t543 - qJ(4) * t561;
t502 = -t521 * t883 + t662 * t884 + t1097;
t501 = -t1108 - t559;
t500 = t555 * t884 + t557 * t883;
t499 = t554 * t884 - t556 * t883;
t498 = t555 * t883 - t557 * t884;
t497 = -t554 * t883 - t556 * t884;
t496 = t518 * t889 + t594 * t886;
t495 = t518 * t886 - t594 * t889;
t494 = t543 * t883 + t553 * t884;
t493 = -t543 * t884 + t553 * t883;
t492 = -t560 * t883 + t562 * t884 + t1074;
t491 = -t1017 * t650 + t525 * t889 - t1110;
t490 = t536 * t890 + t558 * t887;
t489 = t536 * t887 - t558 * t890;
t488 = t499 * t889 - t680 * t886;
t487 = -pkin(1) * t535 + pkin(2) * t718 - qJ(3) * t559;
t486 = t500 * t889 + t644 * t886;
t485 = t500 * t886 - t644 * t889;
t484 = -t540 * t883 - t627 * t884 - t1117;
t483 = -t521 * t884 - t662 * t883 + t1116;
t479 = -qJ(3) * t517 + (pkin(3) * t883 - qJ(4) * t884) * t594;
t478 = t513 * t890 + t541 * t887;
t477 = t513 * t887 - t541 * t890;
t476 = pkin(4) * t553 - t1013 * t561;
t475 = -t533 * t886 + t538 * t889 + t1120;
t474 = -t560 * t884 - t562 * t883 - t1108;
t473 = -pkin(2) * t517 - pkin(3) * t580 - qJ(4) * t578;
t472 = t494 * t889 + t561 * t886;
t471 = t494 * t886 - t561 * t889;
t470 = -t524 * t886 + t534 * t889 - t1121;
t469 = t509 * t890 + t531 * t887;
t468 = t509 * t887 - t531 * t890;
t467 = -pkin(7) * t535 + (-qJ(3) * t889 + t1017) * t558;
t466 = -t1013 * t1043 + t1020 * t595 - t953;
t465 = t1012 * t1043 + t1020 * t596 + t956;
t464 = -t519 * t883 + t520 * t884 - t1074;
t463 = t492 * t889 - t591 * t886 - t1110;
t462 = -t1013 * t613 + t1020 * t592 - t956;
t461 = t1012 * t613 + t1020 * t593 - t953;
t460 = t496 * t890 + t517 * t887;
t459 = t496 * t887 - t517 * t890;
t458 = t504 * t889 - t514 * t886 + t1120;
t457 = -t519 * t884 - t520 * t883 + t1108;
t456 = t502 * t889 - t506 * t886 + t1121;
t455 = t486 * t890 + t498 * t887;
t454 = t486 * t887 - t498 * t890;
t453 = t464 * t889 - t575 * t886 + t1110;
t452 = t472 * t890 + t493 * t887;
t451 = t472 * t887 - t493 * t890;
t450 = -pkin(2) * t493 - qJ(4) * t553 + t1013 * t543;
t447 = -pkin(1) * t495 - qJ(3) * t518 + (t928 + t1015) * t594;
t446 = -pkin(2) * t541 + t1012 * t595 + t1013 * t596 + t482;
t445 = -pkin(2) * t498 + t1012 * t555 + t1013 * t557;
t444 = -pkin(2) * t531 + t1012 * t592 + t1013 * t593 + t481;
t443 = -qJ(3) * t493 - t476 * t883 + t503 * t884;
t442 = -qJ(3) * t541 + t465 * t884 - t466 * t883;
t441 = -pkin(7) * t495 - t473 * t886 + t479 * t889;
t440 = -t1013 * t644 + t1020 * t555 + t448;
t439 = t1012 * t644 + t1020 * t557 + t449;
t438 = -qJ(3) * t531 + t461 * t884 - t462 * t883;
t437 = -pkin(1) * t512 + pkin(2) * t1043 - qJ(3) * t542 - t465 * t883 - t466 * t884;
t436 = -pkin(1) * t508 + pkin(2) * t613 - qJ(3) * t532 - t461 * t883 - t462 * t884;
t435 = t448 * t884 + t449 * t883;
t434 = t448 * t883 - t449 * t884;
t433 = -pkin(1) * t471 + pkin(2) * t561 - qJ(3) * t494 - t476 * t884 - t503 * t883;
t432 = t435 * t889 + t537 * t886;
t431 = t435 * t886 - t537 * t889;
t430 = -t1013 * t537 + t1020 * t448;
t429 = t1012 * t537 + t1020 * t449;
t428 = -pkin(7) * t512 + t442 * t889 - t446 * t886;
t427 = -pkin(7) * t471 + t443 * t889 - t450 * t886;
t426 = -pkin(7) * t508 + t438 * t889 - t444 * t886;
t425 = -qJ(3) * t498 + t439 * t884 - t440 * t883;
t424 = -pkin(1) * t485 + pkin(2) * t644 - qJ(3) * t500 - t439 * t883 - t440 * t884;
t423 = t432 * t890 + t434 * t887;
t422 = t432 * t887 - t434 * t890;
t421 = -pkin(7) * t485 + t425 * t889 - t445 * t886;
t420 = -pkin(2) * t434 + t1012 * t448 + t1013 * t449;
t419 = -qJ(3) * t434 + t429 * t884 - t430 * t883;
t418 = -pkin(1) * t431 + pkin(2) * t537 - qJ(3) * t435 - t429 * t883 - t430 * t884;
t417 = -pkin(7) * t431 + t419 * t889 - t420 * t886;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t853, -t854, 0, t787, 0, 0, 0, 0, 0, 0, t733, t734, t780, t679, 0, 0, 0, 0, 0, 0, -t572, t586, t1104, t490, 0, 0, 0, 0, 0, 0, t1104, t572, -t586, t460, 0, 0, 0, 0, 0, 0, -t586, -t1104, -t572, t452, 0, 0, 0, 0, 0, 0, t469, t478, t455, t423; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t854, -t853, 0, t786, 0, 0, 0, 0, 0, 0, t731, t732, t779, t678, 0, 0, 0, 0, 0, 0, -t569, t583, t1105, t489, 0, 0, 0, 0, 0, 0, t1105, t569, -t583, t459, 0, 0, 0, 0, 0, 0, -t583, -t1105, -t569, t451, 0, 0, 0, 0, 0, 0, t468, t477, t454, t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t790, t791, 0, -t706, 0, 0, 0, 0, 0, 0, -t619, t632, t1080, t535, 0, 0, 0, 0, 0, 0, t1080, t619, -t632, t495, 0, 0, 0, 0, 0, 0, -t632, -t1080, -t619, t471, 0, 0, 0, 0, 0, 0, t508, t512, t485, t431; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t854, 0, -t853, 0, t916, -t820, -t786, -pkin(6) * t786, t804 * t890 - t919, t774 * t890 - t856 * t887, t794 * t890 + t886 * t938, t803 * t890 + t919, t792 * t890 + t887 * t937, qJDD(2) * t887 + t844 * t890, -pkin(6) * t731 - t716 * t887 + t728 * t890, -pkin(6) * t732 - t717 * t887 + t729 * t890, -pkin(6) * t779 + t706 * t890, -pkin(6) * t678 - (pkin(1) * t887 - pkin(7) * t890) * t706, t1024, -t1112, -t1102, t1023, -t1123, t699 * t890 - t1046, t507 * t890 - t539 * t887 + t1130, t511 * t890 - t544 * t887 - t1128, t491 * t890 - t501 * t887 - t1118, -pkin(6) * t489 + t467 * t890 - t487 * t887, t1049, t1102, t1123, t1024, -t1112, t1023, t463 * t890 - t474 * t887 - t1118, t470 * t890 - t505 * t887 - t1130, t475 * t890 - t510 * t887 + t1128, -pkin(6) * t459 + t441 * t890 - t447 * t887, t1023, -t1123, t1112, t1049, t1102, t1024, t458 * t890 - t484 * t887 + t1128, t453 * t890 - t457 * t887 + t1118, t456 * t890 - t483 * t887 + t1130, -pkin(6) * t451 + t427 * t890 - t433 * t887, t523 * t890 - t546 * t887, t488 * t890 - t497 * t887, t515 * t890 - t549 * t887, t522 * t890 - t545 * t887, t516 * t890 - t550 * t887, t577 * t890 - t589 * t887, -pkin(6) * t468 + t426 * t890 - t436 * t887, -pkin(6) * t477 + t428 * t890 - t437 * t887, -pkin(6) * t454 + t421 * t890 - t424 * t887, -pkin(6) * t422 + t417 * t890 - t418 * t887; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t853, 0, t854, 0, t820, t916, t787, pkin(6) * t787, t804 * t887 + t918, t774 * t887 + t856 * t890, t794 * t887 - t886 * t936, t803 * t887 - t918, t792 * t887 - t889 * t936, -qJDD(2) * t890 + t844 * t887, pkin(6) * t733 + t716 * t890 + t728 * t887, pkin(6) * t734 + t717 * t890 + t729 * t887, pkin(6) * t780 + t706 * t887, pkin(6) * t679 - (-pkin(1) * t890 - pkin(7) * t887) * t706, t1029, -t1113, -t1103, t1030, -t1124, t699 * t887 + t1045, t507 * t887 + t539 * t890 - t1129, t511 * t887 + t544 * t890 + t1127, t491 * t887 + t501 * t890 + t1119, pkin(6) * t490 + t467 * t887 + t487 * t890, t1050, t1103, t1124, t1029, -t1113, t1030, t463 * t887 + t474 * t890 + t1119, t470 * t887 + t505 * t890 + t1129, t475 * t887 + t510 * t890 - t1127, pkin(6) * t460 + t441 * t887 + t447 * t890, t1030, -t1124, t1113, t1050, t1103, t1029, t458 * t887 + t484 * t890 - t1127, t453 * t887 + t457 * t890 - t1119, t456 * t887 + t483 * t890 - t1129, pkin(6) * t452 + t427 * t887 + t433 * t890, t523 * t887 + t546 * t890, t488 * t887 + t497 * t890, t515 * t887 + t549 * t890, t522 * t887 + t545 * t890, t516 * t887 + t550 * t890, t577 * t887 + t589 * t890, pkin(6) * t469 + t426 * t887 + t436 * t890, pkin(6) * t478 + t428 * t887 + t437 * t890, pkin(6) * t455 + t421 * t887 + t424 * t890, pkin(6) * t423 + t417 * t887 + t418 * t890; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t859, t860, 0, 0, t910 * t886, t848 * t889 + t851 * t886, t861 * t889 + t961, -t886 * t929 + t831, t863 * t886 + t962, 0, pkin(1) * t851 + pkin(7) * t793 + t968, -pkin(1) * t848 + pkin(7) * t795 - t969, pkin(1) * t855 + pkin(7) * t852 + t707, pkin(1) * t829 + pkin(7) * t707, t914, -t1078, -t1077, t915, -t1106, t740 * t886 + t831, t576 * t889 + t603 * t886 - t1114, t579 * t889 + t631 * t886 - t1115, t1111 + t886 * t525 - (-pkin(1) - t1016) * t650, pkin(7) * t536 + (-pkin(1) + t911) * t558, t1028, t1077, t1106, t914, -t1078, t915, t492 * t886 + t591 * t889 - t1107, t524 * t889 + t534 * t886 + t1114, t533 * t889 + t538 * t886 + t1115, -pkin(1) * t517 + pkin(7) * t496 + t473 * t889 + t479 * t886, t915, -t1106, t1078, t1028, t1077, t914, t504 * t886 + t514 * t889 + t1115, t464 * t886 + t575 * t889 + t1107, t502 * t886 + t506 * t889 - t1114, -pkin(1) * t493 + pkin(7) * t472 + t443 * t886 + t450 * t889, t548 * t886 - t933, t499 * t886 + t680 * t889, t551 * t886 + t618 * t889, t547 * t886 + t933, t552 * t886 + t614 * t889, t590 * t886 + t842 * t889, -pkin(1) * t531 + pkin(7) * t509 + t438 * t886 + t444 * t889, -pkin(1) * t541 + pkin(7) * t513 + t442 * t886 + t446 * t889, -pkin(1) * t498 + pkin(7) * t486 + t425 * t886 + t445 * t889, -pkin(1) * t434 + pkin(7) * t432 + t419 * t886 + t420 * t889;];
tauB_reg  = t1;
