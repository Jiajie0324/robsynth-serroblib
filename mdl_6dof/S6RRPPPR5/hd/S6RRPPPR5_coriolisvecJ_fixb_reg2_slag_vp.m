% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPPR5_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR5_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPPR5_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR5_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:23:44
% EndTime: 2019-03-09 08:23:57
% DurationCPUTime: 4.58s
% Computational Cost: add. (4126->482), mult. (10176->634), div. (0->0), fcn. (6539->6), ass. (0->265)
t188 = sin(pkin(9));
t191 = sin(qJ(2));
t278 = qJD(1) * t191;
t256 = t188 * t278;
t189 = cos(pkin(9));
t267 = t189 * qJD(2);
t118 = t256 - t267;
t254 = t189 * t278;
t276 = qJD(2) * t188;
t120 = t254 + t276;
t190 = sin(qJ(6));
t192 = cos(qJ(6));
t61 = t118 * t190 - t192 * t120;
t342 = t61 ^ 2;
t64 = t118 * t192 + t120 * t190;
t341 = t64 ^ 2;
t340 = pkin(4) + qJ(3);
t193 = cos(qJ(2));
t277 = qJD(1) * t193;
t164 = -qJD(6) + t277;
t339 = t164 * t61;
t338 = t64 * t164;
t178 = t193 * qJD(5);
t265 = qJD(1) * qJD(2);
t246 = t193 * t265;
t232 = t189 * t246;
t171 = pkin(7) * t278;
t133 = (qJD(3) - t171) * qJD(2);
t223 = pkin(2) * t191 - qJ(3) * t193;
t101 = qJD(2) * t223 - t191 * qJD(3);
t93 = t101 * qJD(1);
t47 = -t188 * t133 + t189 * t93;
t215 = pkin(4) * t232 + qJD(1) * t178 - t47;
t316 = pkin(3) + qJ(5);
t248 = t316 * t191;
t290 = t189 * t193;
t264 = pkin(8) * t290;
t12 = (-t248 + t264) * t265 + t215;
t322 = pkin(4) + pkin(8);
t260 = t188 * t322;
t233 = t193 * t260;
t166 = t191 * t265;
t48 = t189 * t133 + t188 * t93;
t261 = qJ(4) * t166 + t48;
t266 = t193 * qJD(4);
t13 = (-t266 + (pkin(5) * t191 - t233) * qJD(2)) * qJD(1) + t261;
t305 = qJ(3) * t191;
t137 = -pkin(2) * t193 - pkin(1) - t305;
t109 = t137 * qJD(1);
t172 = pkin(7) * t277;
t147 = qJD(2) * qJ(3) + t172;
t71 = t189 * t109 - t188 * t147;
t49 = pkin(3) * t277 + qJD(4) - t71;
t207 = qJ(5) * t277 + t49;
t15 = t322 * t120 + t207;
t315 = -pkin(5) - qJ(4);
t247 = t315 * t193;
t229 = qJD(1) * t247;
t72 = t188 * t109 + t189 * t147;
t16 = -t322 * t118 + qJD(5) + t229 + t72;
t221 = t15 * t190 - t16 * t192;
t1 = -qJD(6) * t221 + t192 * t12 + t190 * t13;
t213 = -t164 * t221 + t1;
t6 = t15 * t192 + t16 * t190;
t2 = -qJD(6) * t6 - t190 * t12 + t192 * t13;
t337 = -t6 * t164 + t2;
t150 = t188 * t246;
t269 = qJD(6) * t192;
t270 = qJD(6) * t190;
t24 = t118 * t270 - t120 * t269 - t192 * t150 - t190 * t232;
t336 = t24 + t339;
t25 = qJD(6) * t64 + t150 * t190 - t192 * t232;
t208 = -t25 - t338;
t335 = t316 * t118;
t334 = t316 * t189;
t333 = qJ(5) * t150 + t118 * qJD(5);
t271 = qJD(4) * t188;
t255 = t188 * t277;
t283 = pkin(3) * t255 + t172;
t332 = -qJD(5) * t189 - t271 - t283;
t292 = t189 * t191;
t331 = pkin(4) * t292 + t193 * qJ(5);
t275 = qJD(2) * t191;
t330 = -qJ(4) * t275 + t266;
t329 = t190 * t188 - t189 * t192;
t187 = t193 ^ 2;
t195 = qJD(1) ^ 2;
t297 = t187 * t195;
t323 = t120 ^ 2;
t328 = -t323 - t297;
t114 = t118 ^ 2;
t327 = t323 + t114;
t184 = t188 ^ 2;
t185 = t189 ^ 2;
t300 = t120 * t188;
t302 = t118 * t189;
t218 = -t300 - t302;
t326 = -t185 * t246 + (qJD(2) * t184 + t218) * t277;
t274 = qJD(2) * t193;
t174 = pkin(7) * t274;
t252 = t188 * t274;
t282 = pkin(3) * t252 + t174;
t325 = -(qJD(4) * t189 - qJD(5) * t188) * t191 + t282;
t235 = -t120 + t276;
t57 = t189 * t297 + t235 * t278;
t298 = t164 * t193;
t324 = qJD(1) * (-t190 * t298 + t192 * t275) + t164 * t270;
t122 = t188 * t192 + t189 * t190;
t258 = -pkin(7) * t188 - pkin(3);
t214 = (-qJ(5) + t258) * t191;
t199 = t214 + t264;
t253 = t189 * t277;
t126 = t223 * qJD(1);
t293 = t189 * t126;
t238 = pkin(4) * t253 - t293;
t32 = qJD(1) * t199 + t238;
t198 = (-pkin(7) * t189 + pkin(5)) * t191 - t233;
t106 = t188 * t126;
t168 = qJ(4) * t278;
t285 = t106 + t168;
t33 = qJD(1) * t198 + t285;
t141 = t340 * t188;
t112 = pkin(8) * t188 + t141;
t142 = t340 * t189;
t113 = pkin(8) * t189 + t142;
t55 = -t112 * t190 + t113 * t192;
t321 = qJD(3) * t122 + qJD(6) * t55 - t190 * t33 - t192 * t32;
t56 = t112 * t192 + t113 * t190;
t320 = -qJD(3) * t329 - qJD(6) * t56 + t190 * t32 - t192 * t33;
t317 = t64 * t61;
t314 = qJD(2) * pkin(2);
t312 = t191 * t49;
t249 = qJ(4) * t277;
t51 = t249 - t72;
t311 = t191 * t51;
t103 = t122 * qJD(6);
t209 = t193 * t122;
t309 = -qJD(1) * t209 + t103;
t104 = t329 * qJD(6);
t308 = t190 * t255 - t192 * t253 - t104;
t304 = qJ(5) * t188;
t212 = t315 * t189 + t304;
t201 = t193 * t212;
t307 = -qJD(1) * t201 + t332;
t219 = qJ(4) * t189 - t304;
t210 = t193 * t219;
t306 = -qJD(1) * t210 - t332;
t303 = t118 * t120;
t301 = t118 * t191;
t299 = t120 * t191;
t296 = t188 * t191;
t295 = t188 * t193;
t294 = t189 * t101;
t288 = t193 * t195;
t194 = qJD(2) ^ 2;
t287 = t194 * t191;
t286 = t194 * t193;
t163 = pkin(7) * t246;
t284 = pkin(3) * t150 + t163;
t281 = pkin(3) * t296 + t191 * pkin(7);
t162 = pkin(7) * t290;
t90 = t188 * t137 + t162;
t186 = t191 ^ 2;
t280 = t186 - t187;
t279 = qJD(1) * t186;
t273 = qJD(3) * t118;
t272 = qJD(3) * t120;
t268 = t120 * qJD(4);
t160 = pkin(7) * t295;
t263 = pkin(7) * t275;
t262 = 0.2e1 * t265;
t257 = t120 * t277;
t251 = t193 * t267;
t245 = t188 * qJ(4) + pkin(2);
t242 = -qJD(3) + t314;
t226 = -t171 + t242;
t244 = t226 - t314;
t243 = -0.2e1 * pkin(1) * t265;
t105 = t245 + t334;
t205 = t120 * qJ(4) + t226;
t27 = t205 - t335;
t241 = -qJD(2) * t105 + t27;
t88 = -t189 * t249 + t283;
t240 = t88 + t271;
t239 = -t166 + t303;
t89 = t137 * t189 - t160;
t237 = qJD(1) * (t186 - 0.2e1 * t187);
t236 = t118 + t267;
t234 = t187 * t262;
t231 = t193 * t166;
t230 = qJD(2) * t248;
t228 = t258 * t191;
t227 = -pkin(4) * t276 - qJD(4);
t83 = t193 * qJ(4) - t90;
t94 = t188 * t101;
t225 = t94 - t330;
t224 = pkin(4) * t251 + t178 - t294;
t183 = t193 * pkin(3);
t84 = t183 - t89;
t79 = t150 - t257;
t23 = pkin(4) * t120 + t207;
t28 = -t118 * pkin(4) + qJD(5) - t51;
t220 = -t188 * t28 + t189 * t23;
t39 = t160 + t183 + (pkin(8) * t191 - t137) * t189 + t331;
t40 = -t191 * t260 + t247 + t90;
t10 = t190 * t40 + t192 * t39;
t9 = -t190 * t39 + t192 * t40;
t127 = t189 * t150;
t78 = -t189 * t263 + t94;
t217 = qJD(1) * t236;
t86 = -pkin(7) * t254 + t106;
t67 = -t118 * t255 - t127;
t66 = -t120 * t253 + t127;
t69 = t118 * t252 + t184 * t231;
t70 = t120 * t251 + t185 * t231;
t211 = -pkin(4) * t295 - pkin(7) * t292;
t202 = -qJ(4) * t232 + t284;
t200 = -0.2e1 * t191 * t127 + t218 * t274;
t58 = -t188 * t297 + t191 * t217;
t41 = t202 - t268;
t196 = (-t190 * t275 - t192 * t298) * qJD(1) + t164 * t269;
t14 = t229 * t267 - t268 + t284 + t333;
t158 = t191 * t288;
t149 = qJD(3) * t255;
t148 = -0.2e1 * t231;
t134 = -t189 * pkin(3) - t245;
t99 = t122 * t191;
t98 = t329 * t191;
t96 = -qJ(4) * t292 + t281;
t95 = t315 * t188 - pkin(2) - t334;
t85 = pkin(7) * t256 + t293;
t82 = t191 * t219 - t281;
t81 = t193 * t217;
t80 = (-t118 + t267) * t277;
t77 = t188 * t263 + t294;
t76 = qJD(1) * t228 - t293;
t75 = -t168 - t86;
t74 = (-qJ(4) * t274 - qJD(4) * t191) * t189 + t282;
t68 = -pkin(4) * t296 - t83;
t60 = t191 * t212 + t281;
t59 = qJD(2) * t228 - t294;
t54 = (t189 * t237 + t299) * qJD(2);
t53 = (t188 * t237 + t301) * qJD(2);
t52 = t84 + t331;
t50 = qJD(1) * t211 + t285;
t46 = -t78 + t330;
t45 = t118 * pkin(3) - t205;
t43 = qJD(2) * t209 - t104 * t191;
t42 = t103 * t191 + t190 * t252 - t192 * t251;
t38 = qJD(1) * t214 + t238;
t37 = -pkin(3) * t166 - t47;
t36 = qJD(2) * t210 - t325;
t35 = qJD(2) * t211 + t225;
t34 = qJD(1) * t266 - t261;
t31 = qJD(2) * t214 + t224;
t26 = qJD(2) * t201 + t325;
t22 = qJD(2) * t198 + t225;
t21 = qJD(2) * t199 + t224;
t20 = t227 * t277 + t261;
t19 = -t41 - t333;
t18 = -qJD(1) * t230 + t215;
t17 = t315 * t120 - t226 + t335;
t4 = -qJD(6) * t10 - t190 * t21 + t192 * t22;
t3 = qJD(6) * t9 + t190 * t22 + t192 * t21;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t231, -t280 * t262, t286, t148, -t287, 0, -pkin(7) * t286 + t191 * t243, pkin(7) * t287 + t193 * t243, 0, 0, t70, t200, t54, t69, t188 * t234 + (-t188 * t279 - t301) * qJD(2), t148 (-qJD(1) * t77 - t47) * t193 + ((pkin(7) * t118 - t188 * t226) * t193 + (t71 + (t89 + 0.2e1 * t160) * qJD(1)) * t191) * qJD(2) (qJD(1) * t78 + t48) * t193 + ((pkin(7) * t120 - t189 * t226) * t193 + (-t72 + (-t90 + 0.2e1 * t162) * qJD(1)) * t191) * qJD(2), -t78 * t118 - t77 * t120 + (-t188 * t48 - t189 * t47) * t191 + (-t188 * t72 - t189 * t71 + (-t188 * t90 - t189 * t89) * qJD(1)) * t274, t47 * t89 + t48 * t90 + t71 * t77 + t72 * t78 + (-t226 + t171) * t174, t148, t189 * t234 + (-t189 * t279 - t299) * qJD(2), t53, t70, t200, t69, t46 * t118 + t59 * t120 + (t188 * t34 + t189 * t37) * t191 + (t188 * t51 + t189 * t49 + (t188 * t83 + t189 * t84) * qJD(1)) * t274, -t41 * t296 - t74 * t118 + (-qJD(1) * t59 - t37) * t193 + (-t45 * t295 + t312 + (t191 * t84 - t96 * t295) * qJD(1)) * qJD(2), -t41 * t292 - t74 * t120 + (qJD(1) * t46 + t34) * t193 + (-t45 * t290 - t311 + (-t191 * t83 - t96 * t290) * qJD(1)) * qJD(2), t34 * t83 + t37 * t84 + t41 * t96 + t45 * t74 + t46 * t51 + t49 * t59, t69, -t53 (t302 + (t120 + 0.2e1 * t254) * t188) * t274, t148, -t54, t70, t19 * t292 + t36 * t120 + (-qJD(1) * t35 - t20) * t193 + (t27 * t290 + t191 * t28 + (t191 * t68 + t82 * t290) * qJD(1)) * qJD(2), t35 * t118 - t31 * t120 + (-t18 * t189 + t188 * t20) * t191 + ((t188 * t68 - t189 * t52) * qJD(1) - t220) * t274, -t19 * t296 - t36 * t118 + (qJD(1) * t31 + t18) * t193 + (-t27 * t295 - t191 * t23 + (-t191 * t52 - t295 * t82) * qJD(1)) * qJD(2), t18 * t52 + t19 * t82 + t20 * t68 + t23 * t31 + t27 * t36 + t28 * t35, -t24 * t99 + t43 * t64, t24 * t98 - t25 * t99 - t42 * t64 - t43 * t61, -t43 * t164 + t24 * t193 + (qJD(1) * t99 + t64) * t275, t25 * t98 + t42 * t61, t42 * t164 + t25 * t193 + (-qJD(1) * t98 - t61) * t275 (-t164 - t277) * t275, t14 * t98 - t4 * t164 + t17 * t42 - t2 * t193 + t60 * t25 + t26 * t61 + (qJD(1) * t9 - t221) * t275, t1 * t193 + t14 * t99 + t3 * t164 + t17 * t43 - t60 * t24 + t26 * t64 + (-qJD(1) * t10 - t6) * t275, -t1 * t98 - t10 * t25 - t2 * t99 + t221 * t43 + t24 * t9 - t3 * t61 - t4 * t64 - t42 * t6, t1 * t10 + t14 * t60 + t17 * t26 + t2 * t9 - t221 * t4 + t3 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158, t280 * t195, 0, t158, 0, 0, t195 * pkin(1) * t191, pkin(1) * t288, 0, 0, t66, -t326, t57, t67, t58, t158, t149 + ((-qJ(3) * t276 - t71) * t191 + (-pkin(7) * t236 + t188 * t244 + t85) * t193) * qJD(1) ((-qJ(3) * t267 + t72) * t191 + (-t86 + t235 * pkin(7) + (t226 - t242) * t189) * t193) * qJD(1), t86 * t118 + t85 * t120 + (t277 * t71 - t273 + t48) * t189 + (t277 * t72 + t272 - t47) * t188, -t71 * t85 - t72 * t86 + (-t188 * t71 + t189 * t72) * qJD(3) + (-t47 * t188 + t48 * t189) * qJ(3) + t244 * t172, t158, -t57, -t58, t66, -t326, t67, -t75 * t118 - t76 * t120 + (-t277 * t49 - t273 - t34) * t189 + (-t277 * t51 + t272 + t37) * t188, t41 * t189 - t149 + t240 * t118 + (-t312 + t193 * t76 + (t193 * t45 + (-t134 * t193 + t305) * qJD(2)) * t188) * qJD(1), -t41 * t188 + t240 * t120 + (t311 - t193 * t75 + (qJ(3) * t275 + (-qJD(2) * t134 - qJD(3) + t45) * t193) * t189) * qJD(1), t41 * t134 - t45 * t88 - t49 * t76 - t51 * t75 + (-qJ(3) * t34 - qJD(3) * t51) * t189 + (qJ(3) * t37 + qJD(3) * t49 - qJD(4) * t45) * t188, t67, t58, t326, t158, -t57, t66, t188 * t19 + t306 * t120 + ((qJD(2) * t142 - t28) * t191 + (t50 + (-qJD(3) - t241) * t189) * t193) * qJD(1), -t118 * t50 + t120 * t38 - t18 * t188 - t189 * t20 + (-t300 + t302) * qJD(3) + ((-t141 * t189 + t142 * t188) * qJD(2) + t220) * t277, t189 * t19 + t149 - t306 * t118 + ((-qJD(2) * t141 + t23) * t191 + (t188 * t241 - t38) * t193) * qJD(1), t105 * t19 + t141 * t18 + t142 * t20 - t23 * t38 - t28 * t50 + t306 * t27 + (t188 * t23 + t189 * t28) * qJD(3), -t24 * t329 + t309 * t64, -t24 * t122 - t25 * t329 + t308 * t64 - t309 * t61, -t309 * t164 + (qJD(2) * t329 - t64) * t278, -t25 * t122 - t308 * t61, -t308 * t164 + (qJD(2) * t122 + t61) * t278, t164 * t278, -t122 * t14 + t25 * t95 + t307 * t61 - t308 * t17 - t320 * t164 + (qJD(2) * t55 + t221) * t278, t329 * t14 - t24 * t95 + t307 * t64 + t309 * t17 + t321 * t164 + (-qJD(2) * t56 + t6) * t278, t1 * t122 - t2 * t329 + t221 * t309 + t24 * t55 - t25 * t56 + t308 * t6 - t320 * t64 - t321 * t61, t1 * t56 + t14 * t95 + t307 * t17 + t2 * t55 - t221 * t320 + t321 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t81, -t327, t118 * t72 + t120 * t71 + t163, 0, 0, 0, 0, 0, 0, -t327, -t79, -t236 * t277, -t51 * t118 + (-qJD(4) - t49) * t120 + t202, 0, 0, 0, 0, 0, 0, -t81, t327, t79, t28 * t118 + (-qJD(4) - t23) * t120 + t202 + t333, 0, 0, 0, 0, 0, 0, t25 - t338, -t24 + t339, -t341 - t342, -t221 * t64 + t6 * t61 + t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t239, t328, t45 * t120 + (-pkin(3) * t275 - t193 * t51) * qJD(1) - t47, 0, 0, 0, 0, 0, 0, t328, -t80, t239, -t27 * t120 + (t193 * t28 - t230) * qJD(1) + t215, 0, 0, 0, 0, 0, 0, t120 * t61 + t196, t120 * t64 - t324, -t190 * t336 + t208 * t192, t17 * t120 - t190 * t337 + t213 * t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166 + t303, t150 + t257, -t114 - t297, t27 * t118 + (t227 - t23) * t277 + t261, 0, 0, 0, 0, 0, 0, -t118 * t61 + t324, -t118 * t64 + t196, t208 * t190 + t192 * t336, -t17 * t118 + t213 * t190 + t192 * t337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t317, t341 - t342, -t336, -t317, t208, t166, -t17 * t64 + t337, t17 * t61 - t213, 0, 0;];
tauc_reg  = t5;
