% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:53:34
% EndTime: 2019-03-09 13:53:54
% DurationCPUTime: 11.53s
% Computational Cost: add. (17019->748), mult. (36378->887), div. (0->0), fcn. (25414->12), ass. (0->356)
t285 = sin(qJ(4));
t289 = cos(qJ(2));
t464 = cos(qJ(4));
t375 = qJD(1) * t464;
t286 = sin(qJ(2));
t397 = qJD(1) * t286;
t168 = -t285 * t397 - t289 * t375;
t396 = qJD(1) * t289;
t378 = t285 * t396;
t170 = t286 * t375 - t378;
t284 = sin(qJ(5));
t463 = cos(qJ(5));
t327 = t284 * t168 + t170 * t463;
t151 = t463 * t168;
t487 = t284 * t170 - t151;
t66 = pkin(5) * t327 + pkin(10) * t487;
t518 = -t327 ^ 2 + t487 ^ 2;
t288 = cos(qJ(6));
t283 = sin(qJ(6));
t392 = qJD(5) * t284;
t372 = t464 * qJD(2);
t349 = qJD(1) * t372;
t380 = t286 * t464;
t244 = t286 * t285;
t247 = t289 * t464;
t486 = t244 + t247;
t479 = t486 * qJD(4);
t387 = qJD(1) * qJD(2);
t371 = t286 * t387;
t386 = t289 * qJDD(1);
t505 = t371 - t386;
t84 = qJD(1) * t479 - qJDD(1) * t380 - t285 * t505 - t289 * t349;
t374 = qJD(4) * t464;
t394 = qJD(2) * t289;
t85 = qJD(1) * (t285 * t394 + t286 * t374) + qJDD(1) * t486 - qJD(4) * t378 - t286 * t349;
t323 = t170 * t392 + t284 * t85 + t463 * t84;
t373 = qJD(5) * t463;
t303 = -t168 * t373 + t323;
t274 = qJDD(2) - qJDD(4);
t358 = -qJDD(5) + t274;
t275 = qJD(2) - qJD(4);
t365 = -qJD(5) + t275;
t88 = -t283 * t365 + t288 * t327;
t431 = qJD(6) * t88;
t29 = -t283 * t303 + t288 * t358 + t431;
t25 = t29 * t288;
t336 = t288 * t365;
t86 = t283 * t327 + t336;
t439 = t283 * t86;
t503 = qJD(6) + t487;
t517 = t439 * t503 - t25;
t391 = qJD(6) * t283;
t28 = qJD(6) * t336 + t283 * t358 + t288 * t303 + t327 * t391;
t23 = t28 * t283;
t390 = qJD(6) * t288;
t507 = t487 * t288;
t516 = -t23 + (t390 + t507) * t88;
t437 = t283 * t503;
t366 = t284 * t84 - t463 * t85;
t42 = qJD(5) * t327 - t366;
t41 = qJDD(6) + t42;
t39 = t288 * t41;
t476 = t327 * t86 + t39;
t515 = t437 * t503 - t476;
t38 = t283 * t41;
t446 = t390 * t503 + t38;
t514 = -t327 * t88 + t503 * t507 + t446;
t450 = t168 * pkin(9);
t258 = pkin(7) * t397;
t191 = pkin(8) * t397 - t258;
t467 = pkin(2) + pkin(3);
t379 = t467 * qJD(2);
t150 = qJD(3) - t379 - t191;
t259 = pkin(7) * t396;
t193 = -pkin(8) * t396 + t259;
t278 = qJD(2) * qJ(3);
t171 = t193 + t278;
t94 = t285 * t150 + t171 * t464;
t78 = t94 + t450;
t436 = t284 * t78;
t460 = pkin(9) * t170;
t93 = t464 * t150 - t171 * t285;
t77 = t93 - t460;
t71 = -pkin(4) * t275 + t77;
t47 = t463 * t71 - t436;
t45 = pkin(5) * t365 - t47;
t511 = t45 * t487;
t385 = t463 * t78;
t48 = t284 * t71 + t385;
t46 = -pkin(10) * t365 + t48;
t172 = -qJD(1) * pkin(1) - pkin(2) * t396 - qJ(3) * t397;
t145 = pkin(3) * t396 - t172;
t105 = -pkin(4) * t168 + t145;
t53 = pkin(5) * t487 - pkin(10) * t327 + t105;
t16 = -t283 * t46 + t288 * t53;
t510 = t487 * t16;
t490 = t503 * t327;
t413 = t289 * t285;
t184 = t380 - t413;
t287 = sin(qJ(1));
t158 = t184 * t287;
t290 = cos(qJ(1));
t353 = t290 * t380;
t412 = t289 * t290;
t383 = t285 * t412;
t160 = -t353 + t383;
t262 = t286 * qJDD(1);
t251 = pkin(7) * t262;
t370 = t289 * t387;
t369 = pkin(7) * t370 + qJDD(3) + t251;
t506 = -t370 - t262;
t111 = pkin(8) * t506 - t467 * qJDD(2) + t369;
t252 = pkin(7) * t386;
t276 = qJDD(2) * qJ(3);
t277 = qJD(2) * qJD(3);
t147 = -pkin(7) * t371 + t252 + t276 + t277;
t115 = pkin(8) * t505 + t147;
t52 = -qJD(4) * t94 + t464 * t111 - t285 * t115;
t509 = g(1) * t160 - g(2) * t158 + g(3) * t486 - t145 * t170 + t52;
t508 = -t168 * t275 + t84;
t425 = t487 * t327;
t504 = -qJD(2) * t486 + t479;
t411 = qJ(4) + qJ(5);
t264 = sin(t411);
t376 = cos(t411);
t342 = t286 * t376;
t165 = -t289 * t264 + t342;
t141 = t165 * t287;
t143 = t264 * t412 - t290 * t342;
t164 = t286 * t264 + t289 * t376;
t326 = g(1) * t143 - g(2) * t141 + g(3) * t164;
t17 = t283 * t53 + t288 * t46;
t263 = t286 * qJD(3);
t281 = qJDD(1) * pkin(1);
t335 = pkin(2) * t386 - qJ(3) * t506 + qJD(1) * t263 + t281;
t352 = t286 * t379;
t89 = pkin(3) * t386 - qJD(1) * t352 + t335;
t59 = t85 * pkin(4) + t89;
t12 = t42 * pkin(5) + pkin(10) * t303 + t59;
t11 = t288 * t12;
t34 = -t274 * pkin(4) + t84 * pkin(9) + t52;
t393 = qJD(4) * t285;
t51 = t285 * t111 + t464 * t115 + t150 * t374 - t171 * t393;
t37 = -pkin(9) * t85 + t51;
t9 = t284 * t34 + t463 * t37 + t71 * t373 - t78 * t392;
t7 = -pkin(10) * t358 + t9;
t3 = -qJD(6) * t17 - t283 * t7 + t11;
t501 = t487 * t17 + t3;
t43 = t45 * t391;
t477 = -t16 * t327 + t43;
t364 = t284 * t37 - t463 * t34 + t78 * t373 + t71 * t392;
t8 = pkin(5) * t358 + t364;
t465 = -t8 * t283 - t45 * t390;
t500 = t17 * t327 - t465;
t144 = t164 * t290;
t142 = t164 * t287;
t343 = g(2) * t142 + g(3) * t165;
t325 = g(1) * t144 + t343;
t499 = t105 * t487 + t325 - t9;
t472 = -t105 * t327 + t326 - t364;
t498 = t275 * t327 - t366;
t497 = t365 * t487 + t303;
t434 = t288 * t86;
t438 = t283 * t88;
t337 = t434 + t438;
t489 = -t28 * t288 - t88 * t391;
t491 = t283 * t29 + t86 * t390;
t496 = t337 * t487 - t489 + t491;
t495 = t48 * t327 - t47 * t487;
t402 = t289 * pkin(2) + t286 * qJ(3);
t492 = -pkin(1) - t402;
t122 = -t285 * t191 + t193 * t464;
t311 = t122 + t450;
t123 = t464 * t191 + t285 * t193;
t90 = t123 + t460;
t56 = t284 * t311 + t463 * t90;
t196 = -t285 * qJ(3) - t464 * t467;
t190 = -pkin(4) + t196;
t197 = qJ(3) * t464 - t285 * t467;
t124 = t190 * t463 - t284 * t197;
t153 = t464 * qJD(3) + qJD(4) * t196;
t154 = -t285 * qJD(3) - qJD(4) * t197;
t67 = qJD(5) * t124 + t153 * t463 + t284 * t154;
t445 = t67 - t56;
t125 = t284 * t190 + t463 * t197;
t444 = qJD(5) * t125 + (-t154 + t311) * t463 + (t153 - t90) * t284;
t488 = t170 * t275 + t85;
t319 = -t284 * t285 + t463 * t464;
t478 = qJD(4) + qJD(5);
t126 = t478 * t319;
t169 = t319 * qJD(2);
t410 = t126 - t169;
t185 = t284 * t464 + t285 * t463;
t409 = (-qJD(2) + t478) * t185;
t466 = pkin(7) - pkin(8);
t212 = t466 * t286;
t213 = t466 * t289;
t134 = t285 * t212 + t464 * t213;
t485 = g(1) * t290 + g(2) * t287;
t137 = t143 * pkin(5);
t211 = pkin(4) * t383;
t484 = t144 * pkin(10) - t137 - t211;
t136 = t141 * pkin(5);
t461 = pkin(4) * t287;
t208 = t413 * t461;
t483 = pkin(10) * t142 + t136 - t208;
t482 = -t16 * t283 + t17 * t288;
t156 = t164 * pkin(5);
t481 = t165 * pkin(10) - t156;
t475 = -t283 * t326 + t500;
t473 = t286 * t485;
t432 = pkin(7) * qJDD(2);
t470 = (qJD(1) * t492 + t172) * qJD(2) - t432;
t462 = pkin(4) * t170;
t457 = g(1) * t287;
t454 = g(2) * t290;
t452 = t16 * t503;
t449 = t17 * t503;
t2 = qJD(6) * t16 + t283 * t12 + t288 * t7;
t1 = t2 * t288;
t267 = t289 * pkin(3);
t448 = t88 * t86;
t250 = pkin(4) * t464 + pkin(3);
t447 = pkin(2) + t250;
t440 = t275 * t93;
t298 = t275 * t184;
t341 = t463 * t486;
t57 = qJD(5) * t341 + t184 * t392 - t284 * t298 + t463 * t504;
t435 = t288 * t57;
t433 = t288 * t88;
t430 = qJD(6) * t503;
t429 = qJDD(2) * pkin(2);
t422 = t170 * t168;
t418 = t286 * t287;
t417 = t286 * t290;
t294 = qJD(1) ^ 2;
t416 = t286 * t294;
t415 = t287 * t289;
t408 = t153 - t123;
t407 = t154 - t122;
t405 = qJ(3) * t394 + t263;
t269 = t290 * pkin(7);
t291 = -pkin(9) - pkin(8);
t403 = t290 * t291 + t269;
t401 = t290 * pkin(1) + t287 * pkin(7);
t279 = t286 ^ 2;
t280 = t289 ^ 2;
t399 = -t279 + t280;
t398 = t279 + t280;
t395 = qJD(2) * t286;
t234 = pkin(4) * t244;
t382 = t267 + t402;
t381 = -g(1) * t417 - g(2) * t418 + g(3) * t289;
t377 = t168 ^ 2 - t170 ^ 2;
t363 = t284 * t486;
t362 = -qJD(2) * pkin(2) + qJD(3);
t133 = t464 * t212 - t285 * t213;
t178 = pkin(1) + t382;
t359 = g(3) * t247;
t357 = pkin(4) * t373;
t356 = t289 * t250 + t234 + t402;
t355 = pkin(2) * t412 + qJ(3) * t417 + t401;
t354 = -t251 - t381;
t351 = t286 * t370;
t49 = t284 * t77 + t385;
t350 = pkin(4) * t392 - t49;
t348 = t398 * qJDD(1) * pkin(7);
t293 = qJD(2) ^ 2;
t346 = pkin(7) * t293 + t454;
t345 = -g(1) * t141 - g(2) * t143;
t340 = -qJD(6) * t46 - t454;
t339 = t16 * t288 + t17 * t283;
t116 = t184 * t284 + t341;
t117 = t184 * t463 - t363;
t128 = pkin(4) * t486 + t178;
t61 = t116 * pkin(5) - t117 * pkin(10) + t128;
t95 = -pkin(9) * t184 + t133;
t96 = -pkin(9) * t486 + t134;
t65 = t284 * t95 + t463 * t96;
t30 = -t283 * t65 + t288 * t61;
t31 = t283 * t61 + t288 * t65;
t198 = t258 + t362;
t205 = t259 + t278;
t334 = t198 * t289 - t205 * t286;
t163 = pkin(2) * t395 - t405;
t242 = qJ(3) * t396;
t157 = -t397 * t467 + t242;
t155 = t369 - t429;
t332 = t391 * t503 - t39;
t331 = -0.2e1 * pkin(1) * t387 - t432;
t192 = t466 * t395;
t194 = qJD(2) * t213;
t328 = t285 * t192 + t194 * t464;
t75 = -t464 * t192 + t285 * t194 + t212 * t374 - t213 * t393;
t322 = t290 * t234 + t250 * t412 + t287 * t291 + t355;
t321 = -t346 + 0.2e1 * t281;
t121 = -pkin(10) + t125;
t320 = -t121 * t41 - t503 * t67 - t511;
t318 = t1 - t325;
t317 = t326 - t8;
t316 = -t372 + t374;
t315 = -qJD(6) * t53 + t343 - t7;
t110 = t157 - t462;
t248 = pkin(4) * t284 + pkin(10);
t310 = -t248 * t41 - t357 * t503 + t511;
t307 = t121 * t430 + t326;
t306 = t447 * t473;
t109 = pkin(2) * t371 - t335;
t305 = -qJD(1) * t163 - qJDD(1) * t492 - t109 - t346;
t304 = -qJD(6) * t339 - t3 * t283 + t1;
t302 = (-pkin(1) - t447 * t289 + (-pkin(4) * t285 - qJ(3)) * t286) * t457;
t301 = qJD(2) * t334 + t147 * t289 + t155 * t286;
t159 = t486 * t287;
t161 = t486 * t290;
t299 = -g(1) * t161 - g(2) * t159 - g(3) * t184 + t145 * t168 + t51;
t81 = -pkin(3) * t395 - pkin(4) * t298 - t163;
t296 = pkin(9) * t504 - t212 * t393 - t213 * t374 + t328;
t249 = -pkin(4) * t463 - pkin(5);
t237 = g(1) * t415;
t232 = qJ(3) * t412;
t230 = qJ(3) * t415;
t228 = t289 * t416;
t210 = pkin(4) * t353;
t207 = t380 * t461;
t204 = t399 * t294;
t203 = qJDD(2) * t289 - t286 * t293;
t202 = qJDD(2) * t286 + t289 * t293;
t189 = pkin(2) * t397 - t242;
t180 = qJDD(1) * t280 - 0.2e1 * t351;
t179 = qJDD(1) * t279 + 0.2e1 * t351;
t148 = t286 * t386 + t387 * t399;
t138 = -t352 + t405;
t130 = t169 * t288 + t283 * t397;
t129 = -t169 * t283 + t288 * t397;
t120 = pkin(5) - t124;
t119 = t144 * t288 - t283 * t287;
t118 = -t144 * t283 - t287 * t288;
t76 = -qJD(4) * t134 + t328;
t64 = t284 * t96 - t463 * t95;
t63 = pkin(9) * t298 + t75;
t60 = t462 + t66;
t58 = -qJD(5) * t363 + t184 * t373 - t284 * t504 - t298 * t463;
t54 = t110 - t66;
t50 = t463 * t77 - t436;
t27 = t283 * t66 + t288 * t47;
t26 = -t283 * t47 + t288 * t66;
t21 = t283 * t54 + t288 * t56;
t20 = -t283 * t56 + t288 * t54;
t19 = t283 * t60 + t288 * t50;
t18 = -t283 * t50 + t288 * t60;
t15 = t58 * pkin(5) + t57 * pkin(10) + t81;
t14 = qJD(5) * t65 + t284 * t63 - t296 * t463;
t13 = t284 * t296 + t373 * t95 - t392 * t96 + t463 * t63;
t5 = -qJD(6) * t31 - t13 * t283 + t15 * t288;
t4 = qJD(6) * t30 + t13 * t288 + t15 * t283;
t6 = [0, 0, 0, 0, 0, qJDD(1), -t454 + t457, t485, 0, 0, t179, 0.2e1 * t148, t202, t180, t203, 0, t286 * t331 + t289 * t321 + t237, t331 * t289 + (-t321 - t457) * t286, 0.2e1 * t348 - t485, -g(1) * (-pkin(1) * t287 + t269) - g(2) * t401 + (pkin(7) ^ 2 * t398 + pkin(1) ^ 2) * qJDD(1), t179, t202, -0.2e1 * t148, 0, -t203, t180, t286 * t470 + t305 * t289 + t237, t348 + t301 - t485, -t470 * t289 + (t305 + t457) * t286, pkin(7) * t301 - g(1) * t269 - g(2) * t355 + t172 * t163 + (t109 - t457) * t492, -t170 * t504 - t84 * t184, -t184 * t85 + t84 * t486 + t275 * (t168 * t486 + t170 * t184) -t184 * t274 + t275 * t504, t168 * t298 + t486 * t85, t274 * t486 - t275 * t298, 0, g(1) * t159 - g(2) * t161 - t133 * t274 - t138 * t168 + t178 * t85 + t89 * t486 + (-t145 * t184 - t76) * t275, g(1) * t158 + g(2) * t160 + t134 * t274 + t138 * t170 - t145 * t504 - t178 * t84 + t89 * t184 + t75 * t275, t133 * t84 - t134 * t85 + t75 * t168 - t76 * t170 - t52 * t184 + t94 * t298 - t51 * t486 + t504 * t93 + t485, t51 * t134 + t94 * t75 + t52 * t133 + t93 * t76 + t89 * t178 + t145 * t138 - g(1) * (-pkin(8) * t290 + t269) - g(2) * (pkin(3) * t412 + t355) + (-g(1) * (t492 - t267) + g(2) * pkin(8)) * t287, -t117 * t303 - t327 * t57, t116 * t303 - t117 * t42 - t327 * t58 + t487 * t57, -t117 * t358 + t365 * t57, t116 * t42 + t487 * t58, t116 * t358 + t365 * t58, 0, g(1) * t142 - g(2) * t144 + t105 * t58 + t59 * t116 + t128 * t42 + t14 * t365 + t358 * t64 + t487 * t81, -t105 * t57 + t59 * t117 - t128 * t303 + t13 * t365 + t327 * t81 + t358 * t65 - t345, -t9 * t116 + t117 * t364 - t13 * t487 + t14 * t327 - t303 * t64 - t65 * t42 + t47 * t57 - t48 * t58 + t485, -g(1) * t403 - g(2) * t322 + t105 * t81 + t59 * t128 + t48 * t13 - t47 * t14 + t364 * t64 + t9 * t65 - t302, t117 * t489 - t57 * t433, t337 * t57 + (t23 - t25 + (-t433 + t439) * qJD(6)) * t117, -t116 * t28 - t117 * t332 - t435 * t503 + t58 * t88, t117 * t491 - t57 * t439, -t116 * t29 - t117 * t446 + t437 * t57 - t58 * t86, t116 * t41 + t503 * t58, t5 * t503 + t30 * t41 + t3 * t116 + t16 * t58 + t14 * t86 + t64 * t29 - t45 * t283 * t57 - g(1) * (-t142 * t288 - t283 * t290) - g(2) * t119 - t465 * t117, -t4 * t503 - t31 * t41 - t2 * t116 - t17 * t58 + t14 * t88 - t64 * t28 - t45 * t435 - g(1) * (t142 * t283 - t288 * t290) - g(2) * t118 + (t8 * t288 - t43) * t117, t28 * t30 - t29 * t31 - t4 * t86 - t5 * t88 + t339 * t57 + (-qJD(6) * t482 - t2 * t283 - t288 * t3) * t117 + t345, t2 * t31 + t17 * t4 + t3 * t30 + t16 * t5 + t8 * t64 + t45 * t14 - g(1) * (-pkin(5) * t142 + pkin(10) * t141 + t403) - g(2) * (pkin(5) * t144 + pkin(10) * t143 + t322) - t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t228, -t204, t262, t228, t386, qJDD(2), pkin(1) * t416 + t354, g(3) * t286 - t252 + (pkin(1) * t294 + t485) * t289, 0, 0, -t228, t262, t204, qJDD(2), -t386, t228, 0.2e1 * t429 - qJDD(3) + (-t172 * t286 + t189 * t289) * qJD(1) + t354 (-t286 * pkin(2) + qJ(3) * t289) * qJDD(1) + ((t205 - t278) * t286 + (-t198 + t362) * t289) * qJD(1), t252 + 0.2e1 * t276 + 0.2e1 * t277 + (qJD(1) * t189 - g(3)) * t286 + (qJD(1) * t172 - t485) * t289, t147 * qJ(3) + t205 * qJD(3) - t155 * pkin(2) - t172 * t189 - g(1) * (-pkin(2) * t417 + t232) - g(2) * (-pkin(2) * t418 + t230) - g(3) * t402 - t334 * qJD(1) * pkin(7), t422, t377, t508, -t422, t488, t274, t157 * t168 - t196 * t274 - t275 * t407 - t509, -t157 * t170 + t197 * t274 + t275 * t408 + t299, t196 * t84 - t197 * t85 + (-t94 - t407) * t170 + (-t93 + t408) * t168, -g(1) * t232 - g(2) * t230 - g(3) * t382 - t145 * t157 + t52 * t196 + t51 * t197 + t407 * t93 + t408 * t94 + t467 * t473, -t425, t518, t497, t425, t498, t358, -t110 * t487 - t124 * t358 + t365 * t444 - t472, -t110 * t327 + t125 * t358 + t365 * t445 - t499, t124 * t303 - t125 * t42 + t327 * t444 - t445 * t487 - t495, t9 * t125 - t364 * t124 - t105 * t110 - g(1) * (t211 + t232) - g(2) * (t208 + t230) - g(3) * t356 + t445 * t48 - t444 * t47 + t306, -t516, t496, -t514, -t517, t515, t490, t120 * t29 - t20 * t503 + t444 * t86 + t320 * t283 + (-t307 + t8) * t288 - t477, -t120 * t28 + t21 * t503 + t283 * t307 + t288 * t320 + t444 * t88 - t500, t20 * t88 + t21 * t86 + (t510 - t121 * t29 - t67 * t86 + (t121 * t88 + t16) * qJD(6)) * t288 + (-t121 * t28 + t67 * t88 + (t121 * t86 + t17) * qJD(6) + t501) * t283 - t318, t8 * t120 - g(1) * (t232 - t484) - g(2) * (t230 - t483) - g(3) * (t356 - t481) + t444 * t45 + t306 + (t288 * t67 - t21) * t17 + (-t283 * t67 - t20) * t16 + t304 * t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2) - t228, t262, -t279 * t294 - t293, -qJD(2) * t205 + t172 * t397 + t155 + t381, 0, 0, 0, 0, 0, 0, -t275 ^ 2 * t285 + t168 * t397 - t274 * t464, -t170 * t397 + t285 * t274 + t275 * t316, t316 * t168 - t285 * t488 + t464 * t84, -t145 * t397 + t52 * t464 + t316 * t94 + (t51 + t440) * t285 + t381, 0, 0, 0, 0, 0, 0, -t319 * t358 + t365 * t409 - t397 * t487, t185 * t358 - t327 * t397 + t365 * t410, -t185 * t42 + t303 * t319 + t327 * t409 - t410 * t487, -t105 * t397 + t185 * t9 - t319 * t364 - t409 * t47 + t410 * t48 + t381, 0, 0, 0, 0, 0, 0, -t185 * t38 - t319 * t29 + t409 * t86 + (-t126 * t283 - t185 * t390 - t129) * t503, -t185 * t39 + t319 * t28 + t409 * t88 + (-t126 * t288 + t185 * t391 + t130) * t503, t129 * t88 + t130 * t86 + (-t434 + t438) * t126 + (-t23 - t25 + (t433 + t439) * qJD(6)) * t185, t126 * t482 - t129 * t16 - t130 * t17 + t185 * t304 - t319 * t8 + t409 * t45 + t381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t422, -t377, -t508, t422, -t488, -t274, -t94 * t275 + t509, -t299 - t440, 0, 0, t425, -t518, -t497, -t425, -t498, -t358, -t49 * t365 + (-t170 * t487 - t358 * t463 + t365 * t392) * pkin(4) + t472, -t50 * t365 + (-t170 * t327 + t284 * t358 + t365 * t373) * pkin(4) + t499, t50 * t487 - t49 * t327 + (-t284 * t42 + t463 * t323 + (t284 * t327 + (-t487 - t151) * t463) * qJD(5)) * pkin(4) + t495, -t48 * t50 + t47 * t49 - g(1) * (-t211 + t210) - g(2) * (-t208 + t207) + g(3) * t234 + (t359 - t364 * t463 - t105 * t170 + t9 * t284 + (-t284 * t47 + t463 * t48) * qJD(5)) * pkin(4), t516, -t496, t514, t517, -t515, -t490, -t18 * t503 + t249 * t29 + t350 * t86 + t310 * t283 + (-t248 * t430 + t317) * t288 + t477, -t249 * t28 + (t248 * t391 + t19) * t503 + t350 * t88 + t310 * t288 + t475, t18 * t88 + t19 * t86 + (-t86 * t357 - t510 - t248 * t29 + (t248 * t88 - t16) * qJD(6)) * t288 + (t88 * t357 - t248 * t28 + (t248 * t86 - t17) * qJD(6) - t501) * t283 + t318, t8 * t249 - t17 * t19 - t16 * t18 - t45 * t49 - g(1) * (t210 + t484) - g(2) * (t207 + t483) - g(3) * (-t234 + t481) + (t359 + (t284 * t45 + t463 * t482) * qJD(5)) * pkin(4) + t304 * t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t425, -t518, -t497, -t425, -t498, -t358, -t365 * t48 + t472, -t365 * t47 + t499, 0, 0, t516, -t496, t514, t437 * t86 - t25, -t283 * t503 ^ 2 + t476, -t490, -pkin(5) * t29 - t26 * t503 - t48 * t86 + (-pkin(10) * t41 + t511) * t283 + (-pkin(10) * t430 + t317) * t288 + t477, pkin(5) * t28 + pkin(10) * t332 + t27 * t503 + t45 * t507 - t48 * t88 + t475, t26 * t88 + t27 * t86 + (-t452 + (-t29 + t431) * pkin(10)) * t288 + (-t3 - t449 + (qJD(6) * t86 - t28) * pkin(10)) * t283 + t318, -t8 * pkin(5) + g(1) * t137 - g(2) * t136 + g(3) * t156 - t16 * t26 - t17 * t27 - t45 * t48 + (t304 - t325) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t448, -t86 ^ 2 + t88 ^ 2, t503 * t86 - t28, -t448, t503 * t88 - t29, t41, -g(1) * t118 + t283 * t315 + t288 * t340 - t45 * t88 + t11 + t449, g(1) * t119 + t452 + t45 * t86 + (-t12 - t340) * t283 + t315 * t288, 0, 0;];
tau_reg  = t6;
