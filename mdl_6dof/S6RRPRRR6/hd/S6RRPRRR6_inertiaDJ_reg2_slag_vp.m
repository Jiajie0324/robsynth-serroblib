% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR6_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:53:26
% EndTime: 2019-03-09 13:53:36
% DurationCPUTime: 3.61s
% Computational Cost: add. (6825->303), mult. (13950->496), div. (0->0), fcn. (13216->8), ass. (0->175)
t108 = sin(qJ(5));
t111 = cos(qJ(2));
t214 = sin(qJ(4));
t169 = qJD(4) * t214;
t109 = sin(qJ(2));
t216 = cos(qJ(4));
t170 = qJD(4) * t216;
t173 = t111 * t214;
t206 = -qJD(2) * t173 - t109 * t170;
t137 = t111 * t169 + t206;
t175 = t109 * t216;
t157 = qJD(2) * t175;
t122 = -t157 - t137;
t174 = t109 * t214;
t136 = t111 * t216 + t174;
t215 = cos(qJ(5));
t127 = t215 * t136;
t191 = qJD(5) * t108;
t226 = -qJD(2) * t136 + t109 * t169 + t111 * t170;
t77 = -t173 + t175;
t19 = qJD(5) * t127 + t108 * t122 + t77 * t191 + t215 * t226;
t132 = t108 * t136;
t168 = qJD(5) * t215;
t20 = -qJD(5) * t132 - t108 * t226 + t215 * t122 + t77 * t168;
t222 = pkin(2) + pkin(3);
t148 = t216 * pkin(4) + t222;
t188 = t109 * qJD(3);
t194 = t111 * qJ(3);
t34 = (-t148 * t109 + t194) * qJD(2) - pkin(4) * t137 + t188;
t234 = t20 * pkin(5) + t19 * pkin(10) + t34;
t107 = sin(qJ(6));
t105 = t107 ^ 2;
t110 = cos(qJ(6));
t106 = t110 ^ 2;
t230 = (t105 - t106) * qJD(6);
t233 = t105 + t106;
t135 = t233 * t215;
t205 = qJD(5) * pkin(4);
t64 = t135 * t205;
t47 = t108 * t77 + t127;
t48 = t215 * t77 - t132;
t55 = pkin(1) + (t214 * pkin(4) + qJ(3)) * t109 + t148 * t111;
t114 = t47 * pkin(5) - t48 * pkin(10) + t55;
t113 = t110 * t114;
t221 = pkin(7) - pkin(8);
t159 = t214 * t221;
t142 = t111 * t159;
t160 = t221 * t216;
t56 = t109 * t160 - t142;
t120 = -t77 * pkin(9) + t56;
t116 = t108 * t120;
t80 = t111 * t160;
t57 = t109 * t159 + t80;
t39 = -pkin(9) * t136 + t57;
t27 = t215 * t39 + t116;
t10 = -t107 * t27 + t113;
t11 = t107 * t114 + t110 * t27;
t232 = -t10 * t107 + t11 * t110;
t166 = t214 * qJD(3);
t167 = t216 * qJD(3);
t229 = qJD(4) + qJD(5);
t228 = (-t221 * t174 - t80) * qJD(2);
t82 = t216 * qJ(3) - t214 * t222;
t227 = t82 * qJD(4) + t166;
t133 = t214 * qJ(3) + t216 * t222;
t225 = t133 * qJD(4) - t167;
t224 = -0.2e1 * t230;
t223 = 0.2e1 * qJD(3);
t115 = t215 * t120;
t26 = t108 * t39 - t115;
t140 = qJD(4) * t159;
t141 = qJD(4) * t160;
t112 = -pkin(9) * t226 + t109 * t140 + t111 * t141 + t228;
t184 = -qJD(2) * t142 - t109 * t141 + t221 * t157;
t25 = (t157 + t206) * pkin(9) + (t214 * pkin(9) - t159) * qJD(4) * t111 - t184;
t7 = qJD(5) * t116 + t108 * t25 + t215 * t112 + t39 * t168;
t218 = t26 * t7;
t104 = qJD(6) * t110;
t24 = t26 * t104;
t217 = t7 * t107 + t24;
t131 = pkin(4) + t133;
t68 = t108 * t131;
t30 = -qJD(5) * t68 - t108 * t225 + t82 * t168 + t215 * t227;
t213 = t26 * t30;
t121 = t215 * t131;
t185 = qJD(5) * t121 + t108 * t227 + t215 * t225;
t29 = t82 * t191 + t185;
t78 = t108 * t216 + t215 * t214;
t212 = t29 * t78;
t158 = t215 * t216;
t76 = t108 * t214 - t158;
t211 = t30 * t76;
t54 = t229 * t78;
t210 = t76 * t54;
t199 = t108 * t82;
t51 = -t121 - t199;
t49 = pkin(5) - t51;
t209 = t49 * t104 + t30 * t107;
t52 = t215 * t82 - t68;
t183 = t215 * pkin(4);
t102 = -t183 - pkin(5);
t180 = pkin(4) * t191;
t208 = t102 * t104 + t107 * t180;
t203 = t105 * t19;
t202 = t106 * t19;
t201 = t108 * t26;
t200 = t108 * t76;
t196 = t107 * t110;
t195 = t109 * qJ(3);
t190 = qJD(6) * t107;
t189 = t109 * qJD(2);
t103 = t111 * qJD(2);
t187 = 0.2e1 * t47 * t20;
t186 = -0.2e1 * pkin(1) * qJD(2);
t182 = pkin(5) * t190;
t181 = pkin(5) * t104;
t179 = pkin(7) * t189;
t178 = pkin(7) * t103;
t177 = t48 * t190;
t176 = t48 * t104;
t23 = t26 * t190;
t172 = t107 * t104;
t171 = t109 * t103;
t41 = t49 * t190;
t165 = t30 * t110 - t41;
t13 = t233 * t29;
t53 = (t214 * qJD(5) + t169) * t108 - t229 * t158;
t31 = t233 * t53;
t164 = 0.4e1 * t48 * t196;
t101 = t108 * pkin(4) + pkin(10);
t163 = t101 * t233;
t162 = pkin(4) * t168;
t46 = t48 ^ 2;
t161 = t46 * t172;
t156 = -t30 + t180;
t155 = -t26 * t19 + t7 * t48;
t154 = t26 * t54 + t7 * t76;
t153 = t19 * t47 - t48 * t20;
t152 = t29 * t47 + t30 * t48;
t50 = -pkin(10) + t52;
t150 = t47 * t50 - t48 * t49;
t149 = t47 * t78 - t48 * t76;
t147 = -t111 * pkin(2) - t195;
t146 = t10 * t110 + t107 * t11;
t144 = t101 * t47 - t102 * t48;
t83 = t102 * t190;
t139 = -t110 * t180 + t83;
t138 = t110 * t19 + t177;
t14 = -t110 * t20 + t47 * t190;
t134 = (t108 * t48 - t215 * t47) * qJD(5);
t130 = -t19 * t49 - t20 * t50 + t152;
t129 = -t76 * t19 - t78 * t20 + t53 * t47 + t54 * t48;
t128 = t147 * qJD(2) + t111 * qJD(3);
t6 = -qJD(5) * t115 + t108 * t112 + t39 * t191 - t215 * t25;
t2 = -qJD(6) * t113 - t107 * t234 + t110 * t6 + t27 * t190;
t3 = -t11 * qJD(6) + t107 * t6 + t234 * t110;
t1 = -t146 * qJD(6) - t3 * t107 - t2 * t110;
t119 = pkin(4) * t134 - t101 * t20 - t102 * t19;
t92 = -0.2e1 * t171;
t91 = 0.2e1 * t171;
t90 = -0.2e1 * t172;
t89 = 0.2e1 * t172;
t87 = (-t109 ^ 2 + t111 ^ 2) * qJD(2);
t85 = -pkin(1) + t147;
t71 = t222 * t111 + pkin(1) + t195;
t65 = -t188 + (t109 * pkin(2) - t194) * qJD(2);
t58 = t188 + (-t222 * t109 + t194) * qJD(2);
t36 = t54 * t110 - t76 * t190;
t35 = t76 * t104 + t54 * t107;
t33 = t57 * qJD(4) + t228;
t32 = t111 * t140 + t184;
t15 = t47 * t104 + t107 * t20;
t12 = t19 * t196 + t48 * t230;
t9 = qJD(6) * t164 + t202 - t203;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0.2e1 * t87, 0, t92, 0, 0, t109 * t186, t111 * t186, 0, 0, t91, 0, -0.2e1 * t87, 0, 0, t92, -0.2e1 * t65 * t111 + 0.2e1 * t85 * t189, 0, -0.2e1 * t85 * t103 - 0.2e1 * t65 * t109, 0.2e1 * t85 * t65, -0.2e1 * t77 * t226, -0.2e1 * t122 * t77 + 0.2e1 * t136 * t226, 0, 0.2e1 * t136 * t122, 0, 0, 0.2e1 * t122 * t71 + 0.2e1 * t136 * t58, -0.2e1 * t226 * t71 + 0.2e1 * t58 * t77, -0.2e1 * t122 * t57 + 0.2e1 * t136 * t32 + 0.2e1 * t226 * t56 + 0.2e1 * t33 * t77, -0.2e1 * t57 * t32 - 0.2e1 * t56 * t33 + 0.2e1 * t71 * t58, -0.2e1 * t48 * t19, 0.2e1 * t153, 0, t187, 0, 0, 0.2e1 * t55 * t20 + 0.2e1 * t34 * t47, -0.2e1 * t55 * t19 + 0.2e1 * t34 * t48, -0.2e1 * t27 * t20 + 0.2e1 * t6 * t47 + 0.2e1 * t155, -0.2e1 * t27 * t6 + 0.2e1 * t55 * t34 + 0.2e1 * t218, -0.2e1 * t202 * t48 - 0.2e1 * t161, t164 * t19 + 0.2e1 * t46 * t230, -0.2e1 * t110 * t153 - 0.2e1 * t177 * t47, -0.2e1 * t203 * t48 + 0.2e1 * t161, 0.2e1 * t107 * t153 - 0.2e1 * t176 * t47, t187, 0.2e1 * t10 * t20 + 0.2e1 * t107 * t155 + 0.2e1 * t24 * t48 + 0.2e1 * t3 * t47, -0.2e1 * t11 * t20 + 0.2e1 * t110 * t155 + 0.2e1 * t2 * t47 - 0.2e1 * t23 * t48, 0.2e1 * t146 * t19 + 0.2e1 * (-qJD(6) * t232 + t107 * t2 - t110 * t3) * t48, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, -t189, 0, -t178, t179, 0, 0, 0, t103, 0, 0, t189, 0, -t178, t128, -t179, t128 * pkin(7), 0, 0, t226, 0, t122, 0, t33, -t32, -t122 * t82 - t133 * t226 + t136 * t225 + t227 * t77, t133 * t33 - t225 * t57 - t227 * t56 - t32 * t82, 0, 0, t19, 0, t20, 0, t7, -t6, t51 * t19 - t52 * t20 + t152, -t27 * t29 - t7 * t51 - t6 * t52 + t213, t12, t9, -t15, -t12, t14, 0, -t23 + (-qJD(6) * t150 + t7) * t110 + t130 * t107, t110 * t130 + t150 * t190 - t217, -t1, t1 * t50 - t232 * t29 + t7 * t49 + t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t223, qJ(3) * t223, 0, 0, 0, 0, 0, 0, 0.2e1 * t227, -0.2e1 * t225, 0, 0.2e1 * t133 * t166 + 0.2e1 * t167 * t82, 0, 0, 0, 0, 0, 0, 0.2e1 * t30, -0.2e1 * t29, 0, -0.2e1 * t52 * t29 - 0.2e1 * t51 * t30, t89, t224, 0, t90, 0, 0, 0.2e1 * t165, -0.2e1 * t209, 0.2e1 * t13, -0.2e1 * t13 * t50 + 0.2e1 * t49 * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, t178, 0, 0, 0, 0, 0, 0, 0, 0, -t214 * t122 - t136 * t170 + t77 * t169 + t216 * t226, -t32 * t214 - t33 * t216 + (-t56 * t214 + t57 * t216) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t129, -t27 * t53 - t6 * t78 + t154, 0, 0, 0, 0, 0, 0, -t104 * t149 + t107 * t129, t110 * t129 + t149 * t190, 0, t1 * t78 - t232 * t53 + t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, t170, 0, t133 * t169 + t82 * t170 - t214 * t225 - t216 * t227, 0, 0, 0, 0, 0, 0, t54, -t53, 0, -t51 * t54 - t52 * t53 + t211 - t212, 0, 0, 0, 0, 0, 0, t36, -t35, t31, t49 * t54 + t211 + t233 * (-t50 * t53 - t212); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t78 * t53 + 0.2e1 * t210, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t31 * t78 + 0.2e1 * t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t226, 0, -t122, 0, -t33, t32, 0, 0, 0, 0, -t19, 0, -t20, 0, -t7, t6 (-t108 * t20 + t215 * t19 + t134) * pkin(4) (-t215 * t7 - t108 * t6 + (t215 * t27 + t201) * qJD(5)) * pkin(4), -t12, -t9, t15, t12, -t14, 0, t23 + (-qJD(6) * t144 - t7) * t110 + t119 * t107, t110 * t119 + t144 * t190 + t217, t1, t7 * t102 + (t232 * t215 + t201) * t205 + t1 * t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t227, t225, 0, 0, 0, 0, 0, 0, 0, 0, t156 (t183 + t199) * qJD(5) + t185, 0 (-t215 * t30 - t108 * t29 + (-t108 * t51 + t215 * t52) * qJD(5)) * pkin(4), t90, -t224, 0, t89, 0, 0, t110 * t156 + t41 - t83, -t208 + t209, -t13 - t64, t30 * t102 - t29 * t163 + (t108 * t49 + t135 * t50) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t169, -t170, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t53, 0 (-t215 * t54 - t108 * t53 + (t215 * t78 + t200) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, -t36, t35, -t31, t54 * t102 - t53 * t163 + (t135 * t78 + t200) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t180, -0.2e1 * t162, 0, 0, t89, t224, 0, t90, 0, 0, 0.2e1 * t139, 0.2e1 * t208, 0.2e1 * t64, 0.2e1 * (t101 * t135 + t102 * t108) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t20, 0, -t7, t6, 0, 0, -t12, -t9, t15, t12, -t14, 0, t23 + (pkin(5) * t19 - pkin(10) * t20) * t107 + (-t7 + (-pkin(5) * t48 - pkin(10) * t47) * qJD(6)) * t110, pkin(5) * t138 + pkin(10) * t14 + t217, t1, -t7 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, t29, 0, 0, t90, -t224, 0, t89, 0, 0, -t165 + t182, t181 + t209, -t13, -t30 * pkin(5) - pkin(10) * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t53, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t35, -t31, -t54 * pkin(5) - pkin(10) * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t180, -t162, 0, 0, t89, t224, 0, t90, 0, 0, t139 - t182, -t181 + t208, t64 (-pkin(5) * t108 + pkin(10) * t135) * t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t224, 0, t90, 0, 0, -0.2e1 * t182, -0.2e1 * t181, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138, 0, t107 * t19 - t176, t20, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, 0, t190, 0, -t104 * t50 + t107 * t29, t110 * t29 + t190 * t50, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104 * t78 + t107 * t53, t110 * t53 + t190 * t78, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t190, 0, -t101 * t104 - t107 * t162, t101 * t190 - t110 * t162, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t190, 0, -pkin(10) * t104, pkin(10) * t190, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
