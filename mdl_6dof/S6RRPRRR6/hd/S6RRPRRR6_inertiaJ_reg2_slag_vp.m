% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRR6_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t114 = -pkin(2) - pkin(3);
t75 = sin(qJ(4));
t79 = cos(qJ(4));
t47 = t79 * qJ(3) + t75 * t114;
t74 = sin(qJ(5));
t78 = cos(qJ(5));
t45 = t75 * qJ(3) - t79 * t114;
t90 = -pkin(4) - t45;
t29 = t78 * t47 + t74 * t90;
t26 = -pkin(10) + t29;
t73 = sin(qJ(6));
t69 = t73 ^ 2;
t77 = cos(qJ(6));
t71 = t77 ^ 2;
t95 = t69 + t71;
t99 = t95 * t26;
t63 = t74 * pkin(4);
t58 = t63 + pkin(10);
t123 = t95 * t58;
t76 = sin(qJ(2));
t70 = t76 ^ 2;
t80 = cos(qJ(2));
t72 = t80 ^ 2;
t122 = t70 + t72;
t113 = pkin(7) - pkin(8);
t92 = t113 * t80;
t93 = t113 * t76;
t33 = t75 * t93 + t79 * t92;
t41 = -t76 * t75 - t80 * t79;
t11 = t41 * pkin(9) + t33;
t31 = t75 * t92 - t79 * t93;
t42 = -t80 * t75 + t76 * t79;
t84 = -t42 * pkin(9) - t31;
t6 = t74 * t11 - t78 * t84;
t121 = t6 ^ 2;
t20 = -t78 * t41 + t42 * t74;
t120 = t20 ^ 2;
t39 = t74 * t75 - t78 * t79;
t119 = t39 ^ 2;
t48 = -t80 * pkin(2) - t76 * qJ(3) - pkin(1);
t37 = t80 * pkin(3) - t48;
t30 = -pkin(4) * t41 + t37;
t118 = 0.2e1 * t30;
t117 = 0.2e1 * t42;
t116 = -0.2e1 * t76;
t115 = 0.2e1 * t77;
t112 = pkin(5) * t73;
t111 = t6 * t39;
t110 = t6 * t77;
t109 = t76 * pkin(7);
t108 = t78 * pkin(4);
t107 = t80 * pkin(7);
t59 = -pkin(5) - t108;
t106 = pkin(5) - t59;
t105 = t39 * t77;
t104 = t59 * t73;
t23 = t41 * t74 + t42 * t78;
t103 = t73 * t23;
t102 = t73 * t77;
t101 = t76 * t80;
t100 = t77 * t23;
t97 = t122 * pkin(7) ^ 2;
t96 = pkin(10) * t95;
t94 = -0.2e1 * t23 * t20;
t52 = -0.2e1 * t102;
t43 = t74 * t79 + t78 * t75;
t22 = t95 * t43;
t27 = t47 * t74 - t78 * t90;
t89 = -pkin(5) * t23 - pkin(10) * t20;
t4 = pkin(5) * t20 - pkin(10) * t23 + t30;
t8 = t78 * t11 + t74 * t84;
t2 = t4 * t77 - t73 * t8;
t3 = t4 * t73 + t77 * t8;
t1 = -t2 * t73 + t3 * t77;
t88 = -pkin(2) * t76 + qJ(3) * t80;
t25 = pkin(5) + t27;
t87 = -t20 * t26 + t23 * t25;
t86 = -t20 * t43 + t23 * t39;
t85 = -t20 * t58 + t23 * t59;
t51 = 0.2e1 * t102;
t44 = 0.2e1 * t122 * pkin(7);
t38 = t43 ^ 2;
t35 = t39 * t73;
t19 = t23 ^ 2;
t18 = t25 * t73;
t15 = t77 * t20;
t13 = t73 * t20;
t12 = t73 * t100;
t9 = (t69 - t71) * t23;
t5 = t6 * t73;
t7 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t70, 0.2e1 * t101, 0, t72, 0, 0, 0.2e1 * pkin(1) * t80, pkin(1) * t116, t44, pkin(1) ^ 2 + t97, t70, 0, -0.2e1 * t101, 0, 0, t72, -0.2e1 * t48 * t80, t44, t48 * t116, t48 ^ 2 + t97, t42 ^ 2, t41 * t117, 0, t41 ^ 2, 0, 0, -0.2e1 * t37 * t41, t37 * t117, 0.2e1 * t31 * t42 + 0.2e1 * t33 * t41, t31 ^ 2 + t33 ^ 2 + t37 ^ 2, t19, t94, 0, t120, 0, 0, t20 * t118, t23 * t118, -0.2e1 * t20 * t8 + 0.2e1 * t23 * t6, t30 ^ 2 + t8 ^ 2 + t121, t71 * t19, t19 * t52, 0.2e1 * t20 * t100, t69 * t19, t73 * t94, t120, 0.2e1 * t6 * t103 + 0.2e1 * t2 * t20, 0.2e1 * t6 * t100 - 0.2e1 * t20 * t3, 0.2e1 * (-t2 * t77 - t3 * t73) * t23, t2 ^ 2 + t3 ^ 2 + t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t80, 0, -t109, -t107, 0, 0, 0, t76, 0, 0, -t80, 0, -t109, t88, t107, t88 * pkin(7), 0, 0, -t42, 0, -t41, 0, t31, t33, t41 * t47 + t42 * t45, t31 * t45 + t33 * t47, 0, 0, -t23, 0, t20, 0, t6, t8, -t20 * t29 + t23 * t27, t27 * t6 + t29 * t8, -t12, t9, -t13, t12, -t15, 0, t87 * t73 + t110, t87 * t77 - t5, -t1, t1 * t26 + t6 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(2), 0, 0.2e1 * qJ(3), pkin(2) ^ 2 + qJ(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t45, 0.2e1 * t47, 0, t45 ^ 2 + t47 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t27, 0.2e1 * t29, 0, t27 ^ 2 + t29 ^ 2, t69, t51, 0, t71, 0, 0, t25 * t115, -0.2e1 * t18, -0.2e1 * t99, t95 * t26 ^ 2 + t25 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t109, 0, 0, 0, 0, 0, 0, 0, 0, t41 * t75 - t42 * t79, -t31 * t79 + t33 * t75, 0, 0, 0, 0, 0, 0, 0, 0, t86, t43 * t8 + t111, 0, 0, 0, 0, 0, 0, t86 * t73, t86 * t77, 0, t1 * t43 + t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t79, t75, 0, -t45 * t79 + t47 * t75, 0, 0, 0, 0, 0, 0, t39, t43, 0, t27 * t39 + t29 * t43, 0, 0, 0, 0, 0, 0, t105, -t35, -t22, t26 * t22 + t25 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75 ^ 2 + t79 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 + t119, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95 * t38 + t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, t41, 0, -t31, -t33, 0, 0, 0, 0, t23, 0, -t20, 0, -t6, -t8 (-t20 * t74 - t23 * t78) * pkin(4) (-t6 * t78 + t74 * t8) * pkin(4), t12, -t9, t13, -t12, t15, 0, t85 * t73 - t110, t85 * t77 + t5, t1, t1 * t58 + t6 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t45, -t47, 0, 0, 0, 0, 0, 0, 0, -1, -t27 - t108, t63 - t29, 0 (-t27 * t78 + t29 * t74) * pkin(4), -t69, t52, 0, -t71, 0, 0 (-t25 + t59) * t77, t18 - t104, -t123 + t99, t123 * t26 + t25 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t75, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t43, 0 (-t39 * t78 + t43 * t74) * pkin(4), 0, 0, 0, 0, 0, 0, -t105, t35, t22, t123 * t43 + t39 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t63, 0 (t74 ^ 2 + t78 ^ 2) * pkin(4) ^ 2, t69, t51, 0, t71, 0, 0, -0.2e1 * t59 * t77, 0.2e1 * t104, 0.2e1 * t123, t95 * t58 ^ 2 + t59 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t20, 0, -t6, -t8, 0, 0, t12, -t9, t13, -t12, t15, 0, t89 * t73 - t110, t89 * t77 + t5, t1, -t6 * pkin(5) + t1 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t27, -t29, 0, 0, -t69, t52, 0, -t71, 0, 0 (-pkin(5) - t25) * t77, t18 + t112, -t96 + t99, -t25 * pkin(5) + pkin(10) * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t43, 0, 0, 0, 0, 0, 0, 0, 0, -t105, t35, t22, -t39 * pkin(5) + pkin(10) * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t108, -t63, 0, 0, t69, t51, 0, t71, 0, 0, t106 * t77, -t106 * t73, t96 + t123, -t59 * pkin(5) + pkin(10) * t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, t51, 0, t71, 0, 0, pkin(5) * t115, -0.2e1 * t112, 0.2e1 * t96, t95 * pkin(10) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, -t103, t20, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, 0, -t77, 0, -t73 * t26, -t77 * t26, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73 * t43, -t77 * t43, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t77, 0, -t73 * t58, -t77 * t58, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t77, 0, -t73 * pkin(10), -t77 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
