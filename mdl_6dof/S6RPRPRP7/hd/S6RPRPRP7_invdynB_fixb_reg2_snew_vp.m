% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:58:41
% EndTime: 2019-05-05 17:58:56
% DurationCPUTime: 13.10s
% Computational Cost: add. (46166->605), mult. (102147->843), div. (0->0), fcn. (69036->8), ass. (0->426)
t688 = sin(pkin(9));
t689 = cos(pkin(9));
t692 = sin(qJ(3));
t695 = cos(qJ(3));
t651 = (t688 * t695 + t689 * t692) * qJD(1);
t759 = qJD(1) * t695;
t653 = -qJD(1) * t688 * t692 + t689 * t759;
t774 = t653 * t651;
t808 = qJDD(3) - t774;
t810 = t688 * t808;
t809 = t689 * t808;
t691 = sin(qJ(5));
t694 = cos(qJ(5));
t621 = -t694 * qJD(3) + t653 * t691;
t623 = qJD(3) * t691 + t653 * t694;
t580 = t623 * t621;
t750 = qJD(1) * qJD(3);
t735 = t695 * t750;
t748 = qJDD(1) * t692;
t659 = -t735 - t748;
t736 = t692 * t750;
t746 = qJDD(1) * t695;
t660 = -t736 + t746;
t729 = -t689 * t659 + t660 * t688;
t605 = qJDD(5) + t729;
t731 = -t605 + t580;
t782 = t731 * t691;
t781 = t731 * t694;
t608 = t659 * t688 + t660 * t689;
t758 = qJD(3) * t651;
t584 = t608 - t758;
t804 = pkin(7) + pkin(1);
t807 = t731 * pkin(5);
t757 = qJD(3) * t653;
t581 = t729 + t757;
t643 = qJD(5) + t651;
t597 = t643 * t621;
t704 = qJD(5) * t621 - qJDD(3) * t691 - t608 * t694;
t806 = -t597 - t704;
t698 = qJD(1) ^ 2;
t693 = sin(qJ(1));
t696 = cos(qJ(1));
t669 = t693 * g(1) - t696 * g(2);
t719 = qJDD(2) - t669;
t705 = -t698 * qJ(2) + t719;
t702 = -qJDD(1) * t804 + t705;
t611 = -t695 * g(3) + t692 * t702;
t712 = qJD(3) * pkin(3) - qJ(4) * t759;
t685 = t692 ^ 2;
t767 = t685 * t698;
t572 = -pkin(3) * t767 + t659 * qJ(4) - qJD(3) * t712 + t611;
t700 = t695 * t702;
t763 = t695 * t698;
t699 = t700 - t660 * qJ(4) + qJDD(3) * pkin(3) + (-pkin(3) * t763 - qJ(4) * t750 + g(3)) * t692;
t505 = -0.2e1 * qJD(4) * t651 + t689 * t572 + t688 * t699;
t730 = -t694 * qJDD(3) + t691 * t608;
t528 = (qJD(5) - t643) * t623 + t730;
t670 = t696 * g(1) + t693 * g(2);
t684 = qJDD(1) * qJ(2);
t717 = t670 - t684;
t805 = -t659 * pkin(3) - (qJ(4) * t685 + t804) * t698 + t712 * t759 + qJDD(4) - t717;
t619 = t621 ^ 2;
t620 = t623 ^ 2;
t642 = t643 ^ 2;
t649 = t651 ^ 2;
t650 = t653 ^ 2;
t554 = -t642 - t619;
t496 = t554 * t691 - t781;
t803 = pkin(4) * t496;
t571 = -t620 - t642;
t545 = t580 + t605;
t784 = t545 * t691;
t501 = t571 * t694 - t784;
t802 = pkin(4) * t501;
t801 = pkin(4) * t688;
t532 = -t597 + t704;
t470 = -t528 * t694 - t532 * t691;
t552 = -t619 - t620;
t443 = t470 * t688 - t552 * t689;
t444 = t470 * t689 + t552 * t688;
t393 = t443 * t695 + t444 * t692;
t468 = -t528 * t691 + t532 * t694;
t366 = -t393 * t696 + t468 * t693;
t800 = pkin(6) * t366;
t497 = t554 * t694 + t782;
t527 = (qJD(5) + t643) * t623 + t730;
t453 = t497 * t688 - t527 * t689;
t454 = t497 * t689 + t527 * t688;
t403 = t453 * t695 + t454 * t692;
t378 = -t403 * t696 + t496 * t693;
t799 = pkin(6) * t378;
t783 = t545 * t694;
t502 = -t571 * t691 - t783;
t459 = t502 * t688 - t689 * t806;
t460 = t502 * t689 + t688 * t806;
t411 = t459 * t695 + t460 * t692;
t383 = -t411 * t696 + t501 * t693;
t798 = pkin(6) * t383;
t797 = pkin(8) * t468;
t796 = pkin(8) * t496;
t795 = pkin(8) * t501;
t794 = qJ(4) * t443;
t793 = qJ(4) * t453;
t792 = qJ(4) * t459;
t791 = qJDD(1) * pkin(1);
t599 = pkin(4) * t651 - pkin(8) * t653;
t697 = qJD(3) ^ 2;
t479 = -pkin(4) * t697 + qJDD(3) * pkin(8) - t599 * t651 + t505;
t749 = qJD(2) * qJD(1);
t682 = 0.2e1 * t749;
t495 = t581 * pkin(4) - pkin(8) * t584 + t682 + t805;
t762 = -t691 * t479 + t694 * t495;
t738 = -qJ(6) * t704 - t762;
t710 = -qJ(6) * t597 - t738;
t752 = qJD(6) * t623;
t398 = t710 - 0.2e1 * t752 - t807;
t790 = t398 * t691;
t789 = t398 * t694;
t732 = t688 * t572 - t689 * t699;
t753 = qJD(4) * t653;
t504 = t732 + 0.2e1 * t753;
t445 = -t504 * t689 + t505 * t688;
t788 = t445 * t692;
t787 = t445 * t695;
t716 = -qJDD(3) * pkin(4) - t697 * pkin(8) + t732;
t728 = (0.2e1 * qJD(4) + t599) * t653;
t478 = t728 + t716;
t786 = t478 * t691;
t785 = t478 * t694;
t744 = -0.2e1 * t749;
t573 = t744 - t805;
t780 = t573 * t688;
t779 = t573 * t689;
t602 = qJDD(3) + t774;
t778 = t602 * t688;
t777 = t602 * t689;
t776 = t643 * t691;
t775 = t643 * t694;
t686 = t695 ^ 2;
t760 = t685 + t686;
t662 = t760 * qJDD(1);
t773 = t662 * t693;
t772 = t662 * t696;
t739 = t692 * t763;
t667 = qJDD(3) + t739;
t771 = t667 * t692;
t770 = t667 * t695;
t668 = qJDD(3) - t739;
t769 = t668 * t692;
t768 = t668 * t695;
t766 = t686 * t698;
t632 = t698 * t804 + t717 + t744;
t765 = t692 * t632;
t764 = t695 * t632;
t430 = t694 * t479 + t691 * t495;
t756 = qJD(3) * t688;
t755 = qJD(3) * t689;
t747 = qJDD(1) * t693;
t745 = qJDD(1) * t696;
t743 = t688 * t580;
t742 = t689 * t580;
t741 = t693 * t774;
t740 = t696 * t774;
t737 = -pkin(4) * t689 - pkin(3);
t734 = -pkin(3) * t496 + qJ(4) * t454;
t733 = -pkin(3) * t501 + qJ(4) * t460;
t375 = t694 * t430 - t691 * t762;
t446 = t504 * t688 + t689 * t505;
t638 = -t698 * pkin(1) + t682 - t717;
t644 = -t705 + t791;
t592 = t696 * t638 - t644 * t693;
t618 = -t669 * t693 - t696 * t670;
t727 = t693 * t739;
t726 = t696 * t739;
t724 = qJ(2) * t468 - t393 * t804;
t723 = qJ(2) * t496 - t403 * t804;
t722 = qJ(2) * t501 - t411 * t804;
t663 = -t693 * t698 + t745;
t721 = pkin(6) * t663 + g(3) * t693;
t664 = t696 * t698 + t747;
t720 = -pkin(6) * t664 + g(3) * t696;
t374 = t430 * t691 + t694 * t762;
t610 = t692 * g(3) + t700;
t562 = t695 * t610 + t692 * t611;
t563 = -t610 * t692 + t611 * t695;
t589 = t638 * t693 + t644 * t696;
t617 = t669 * t696 - t670 * t693;
t394 = -t443 * t692 + t444 * t695;
t715 = pkin(2) * t468 - t394 * t804;
t404 = -t453 * t692 + t454 * t695;
t714 = pkin(2) * t496 - t404 * t804;
t412 = -t459 * t692 + t460 * t695;
t713 = pkin(2) * t501 - t412 * t804;
t711 = -t729 + t757;
t709 = pkin(2) * t393 + pkin(3) * t443 - pkin(4) * t552 + pkin(8) * t470 - qJ(2) * t394;
t708 = pkin(2) * t403 + pkin(3) * t453 - pkin(4) * t527 + pkin(8) * t497 - qJ(2) * t404;
t707 = pkin(2) * t411 + pkin(3) * t459 - pkin(4) * t806 + pkin(8) * t502 - qJ(2) * t412;
t558 = -qJD(5) * t623 - t730;
t586 = pkin(5) * t643 - qJ(6) * t623;
t706 = t558 * qJ(6) - 0.2e1 * qJD(6) * t621 - t643 * t586 + t430;
t701 = -t558 * pkin(5) - t619 * qJ(6) + t623 * t586 + qJDD(6) + t716;
t428 = t728 + t701;
t679 = t696 * qJDD(3);
t677 = t693 * qJDD(3);
t675 = -t697 - t766;
t674 = t697 - t766;
t673 = -t697 - t767;
t672 = -t697 + t767;
t666 = (-t685 + t686) * t698;
t665 = t760 * t698;
t661 = -0.2e1 * t736 + t746;
t658 = 0.2e1 * t735 + t748;
t656 = t760 * t750;
t640 = -0.2e1 * t753;
t637 = -t650 - t697;
t636 = -t650 + t697;
t635 = t649 - t697;
t634 = -t660 * t692 - t686 * t750;
t633 = -t659 * t695 - t685 * t750;
t629 = -t675 * t692 - t770;
t628 = t673 * t695 - t769;
t627 = t675 * t695 - t771;
t626 = -t674 * t695 - t769;
t625 = t673 * t692 + t768;
t624 = -t672 * t692 - t770;
t615 = 0.2e1 * t752;
t613 = -t665 * t696 - t773;
t612 = -t665 * t693 + t772;
t609 = t658 * t692 - t661 * t695;
t604 = t650 - t649;
t600 = -t697 - t649;
t596 = (-t651 * t689 + t653 * t688) * qJD(3);
t595 = (-t651 * t688 - t653 * t689) * qJD(3);
t594 = t627 * t693 + t661 * t696;
t593 = t625 * t693 + t658 * t696;
t591 = -t627 * t696 + t661 * t693;
t590 = -t625 * t696 + t658 * t693;
t588 = -t620 + t642;
t587 = t619 - t642;
t585 = t608 + t758;
t579 = -t649 - t650;
t578 = -t620 + t619;
t577 = t608 * t689 - t653 * t756;
t576 = t608 * t688 + t653 * t755;
t575 = t651 * t755 + t688 * t729;
t574 = t651 * t756 - t689 * t729;
t570 = -t637 * t688 - t777;
t569 = -t636 * t688 + t809;
t568 = t635 * t689 - t778;
t567 = t637 * t689 - t778;
t566 = t636 * t689 + t810;
t565 = t635 * t688 + t777;
t553 = -pkin(2) * t665 - t563;
t550 = t600 * t689 - t810;
t549 = t600 * t688 + t809;
t548 = pkin(2) * t627 - qJ(2) * t629 - t611;
t547 = pkin(2) * t625 - qJ(2) * t628 + t610;
t543 = pkin(2) * t658 - t628 * t804 - t764;
t542 = pkin(2) * t661 - t629 * t804 + t765;
t541 = (-t621 * t694 + t623 * t691) * t643;
t540 = (-t621 * t691 - t623 * t694) * t643;
t539 = -t595 * t695 - t596 * t692;
t538 = t562 * t693 - t632 * t696;
t537 = -t562 * t696 - t632 * t693;
t536 = t585 * t688 + t689 * t711;
t535 = -t581 * t689 - t584 * t688;
t534 = -t585 * t689 + t688 * t711;
t533 = -t581 * t688 + t584 * t689;
t524 = -t623 * t776 - t694 * t704;
t523 = t623 * t775 - t691 * t704;
t522 = -t558 * t691 + t621 * t775;
t521 = t558 * t694 + t621 * t776;
t520 = -t576 * t695 - t577 * t692;
t519 = -t574 * t695 - t575 * t692;
t518 = -qJ(4) * t567 - t779;
t517 = pkin(2) * t562 - qJ(2) * t563;
t516 = -t567 * t692 + t570 * t695;
t515 = t567 * t695 + t570 * t692;
t514 = -t566 * t695 - t569 * t692;
t513 = -t565 * t695 - t568 * t692;
t512 = t541 * t689 + t605 * t688;
t511 = t541 * t688 - t605 * t689;
t510 = t587 * t694 - t784;
t509 = -t588 * t691 - t781;
t508 = t587 * t691 + t783;
t507 = t588 * t694 - t782;
t506 = -qJ(4) * t549 - t780;
t498 = -pkin(2) * t632 - t563 * t804;
t490 = -t549 * t692 + t550 * t695;
t489 = t549 * t695 + t550 * t692;
t488 = t524 * t689 + t743;
t487 = t522 * t689 - t743;
t486 = t524 * t688 - t742;
t485 = t522 * t688 + t742;
t484 = -pkin(3) * t584 + qJ(4) * t570 - t780;
t483 = t515 * t693 + t584 * t696;
t482 = -t515 * t696 + t584 * t693;
t481 = -pkin(3) * t581 + qJ(4) * t550 + t779;
t480 = -pkin(5) * t806 - qJ(6) * t545;
t475 = t489 * t693 + t581 * t696;
t474 = -t534 * t692 + t536 * t695;
t473 = -t489 * t696 + t581 * t693;
t472 = t534 * t695 + t536 * t692;
t471 = -t533 * t695 - t535 * t692;
t469 = -t527 * t694 - t691 * t806;
t467 = -t527 * t691 + t694 * t806;
t464 = t510 * t689 - t528 * t688;
t463 = t509 * t689 - t532 * t688;
t462 = t510 * t688 + t528 * t689;
t461 = t509 * t688 + t532 * t689;
t456 = -t511 * t692 + t512 * t695;
t455 = -t511 * t695 - t512 * t692;
t452 = t472 * t693 + t579 * t696;
t451 = -t472 * t696 + t579 * t693;
t448 = t469 * t689 - t578 * t688;
t447 = t469 * t688 + t578 * t689;
t441 = qJ(4) * t444;
t440 = -pkin(4) * t468 - pkin(5) * t532;
t439 = -t486 * t692 + t488 * t695;
t438 = -t485 * t692 + t487 * t695;
t437 = -t486 * t695 - t488 * t692;
t436 = -t485 * t695 - t487 * t692;
t435 = pkin(3) * t573 + qJ(4) * t446;
t434 = t785 - t795;
t433 = t786 - t796;
t432 = -t455 * t693 + t540 * t696;
t431 = t455 * t696 + t540 * t693;
t426 = -qJ(4) * t534 - t445;
t425 = -qJ(6) * t571 + t428;
t424 = -pkin(3) * t579 + qJ(4) * t536 + t446;
t423 = pkin(2) * t515 + pkin(3) * t567 - qJ(2) * t516 - t505;
t422 = -t437 * t693 + t523 * t696;
t421 = -t436 * t693 + t521 * t696;
t420 = t437 * t696 + t523 * t693;
t419 = t436 * t696 + t521 * t693;
t418 = -t462 * t692 + t464 * t695;
t417 = -t461 * t692 + t463 * t695;
t416 = -t462 * t695 - t464 * t692;
t415 = -t461 * t695 - t463 * t692;
t414 = t430 - t802;
t413 = -t762 - t803;
t408 = pkin(2) * t472 + pkin(3) * t534 - qJ(2) * t474;
t407 = -pkin(5) * t527 + qJ(6) * t554 - t599 * t653 + t640 - t701;
t406 = pkin(2) * t489 + pkin(3) * t549 - qJ(2) * t490 + t640 - t732;
t405 = -pkin(5) * t619 + t706;
t400 = -t447 * t692 + t448 * t695;
t399 = -t447 * t695 - t448 * t692;
t397 = t446 * t695 - t788;
t396 = t446 * t692 + t787;
t395 = pkin(2) * t584 - t695 * t484 - t516 * t804 - t692 * t518;
t390 = -t416 * t693 + t508 * t696;
t389 = -t415 * t693 + t507 * t696;
t388 = t416 * t696 + t508 * t693;
t387 = t415 * t696 + t507 * t693;
t386 = t396 * t693 - t573 * t696;
t385 = -t396 * t696 - t573 * t693;
t384 = t411 * t693 + t501 * t696;
t382 = pkin(6) * t384;
t381 = t615 + (-t532 + t597) * qJ(6) + t807 + t738;
t380 = pkin(2) * t581 - t695 * t481 - t490 * t804 - t692 * t506;
t379 = t403 * t693 + t496 * t696;
t377 = pkin(6) * t379;
t376 = -qJ(6) * t528 + (-t552 - t619) * pkin(5) + t706;
t373 = -t802 + (-t571 - t619) * pkin(5) + t706;
t372 = t425 * t694 - t480 * t691 - t795;
t371 = qJ(6) * t781 - t407 * t691 - t796;
t370 = -t399 * t693 + t467 * t696;
t369 = t399 * t696 + t467 * t693;
t368 = t615 - t710 - t803 + 0.2e1 * t807;
t367 = t393 * t693 + t468 * t696;
t365 = pkin(6) * t367;
t364 = -pkin(5) * t428 + qJ(6) * t405;
t363 = t375 * t689 + t478 * t688;
t362 = t375 * t688 - t478 * t689;
t361 = -t374 - t797;
t360 = t405 * t694 - t790;
t359 = t405 * t691 + t789;
t358 = -t414 * t688 + t434 * t689 - t792;
t357 = -t413 * t688 + t433 * t689 - t793;
t356 = t414 * t689 + t434 * t688 + t733;
t355 = t413 * t689 + t433 * t688 + t734;
t354 = pkin(2) * t579 - t695 * t424 - t692 * t426 - t474 * t804;
t353 = pkin(2) * t396 + pkin(3) * t445 - qJ(2) * t397;
t352 = t361 * t689 + t468 * t801 - t794;
t351 = t360 * t689 + t428 * t688;
t350 = t360 * t688 - t428 * t689;
t349 = -t376 * t691 + t381 * t694 - t797;
t348 = t688 * t361 + t468 * t737 + t441;
t347 = -pkin(4) * t359 - pkin(5) * t398;
t346 = t707 + t786;
t345 = t372 * t689 - t373 * t688 - t792;
t344 = t708 - t785;
t343 = -t362 * t692 + t363 * t695;
t342 = t362 * t695 + t363 * t692;
t341 = -t368 * t688 + t371 * t689 - t793;
t340 = -pkin(2) * t573 + qJ(4) * t788 - t397 * t804 - t695 * t435;
t339 = t372 * t688 + t373 * t689 + t733;
t338 = t368 * t689 + t371 * t688 + t734;
t337 = t425 * t691 + t480 * t694 + t707;
t336 = qJ(6) * t782 + t407 * t694 + t708;
t335 = t349 * t689 - t440 * t688 - t794;
t334 = -qJ(4) * t362 + (-pkin(8) * t689 + t801) * t374;
t333 = -pkin(3) * t468 + t349 * t688 + t440 * t689 + t441;
t332 = t375 + t709;
t331 = t342 * t693 + t374 * t696;
t330 = -t342 * t696 + t374 * t693;
t329 = -pkin(8) * t359 - qJ(6) * t789 - t364 * t691;
t328 = -t350 * t692 + t351 * t695;
t327 = t350 * t695 + t351 * t692;
t326 = qJ(4) * t363 + (-pkin(8) * t688 + t737) * t374;
t325 = t376 * t694 + t381 * t691 + t709;
t324 = -t695 * t356 - t692 * t358 + t713;
t323 = -t695 * t355 - t692 * t357 + t714;
t322 = t327 * t693 + t359 * t696;
t321 = -t327 * t696 + t359 * t693;
t320 = -t695 * t348 - t692 * t352 + t715;
t319 = -t695 * t339 - t692 * t345 + t713;
t318 = -t695 * t338 - t692 * t341 + t714;
t317 = pkin(2) * t342 + pkin(3) * t362 - pkin(4) * t478 + pkin(8) * t375 - qJ(2) * t343;
t316 = -qJ(4) * t350 + t329 * t689 - t347 * t688;
t315 = -t695 * t333 - t692 * t335 + t715;
t314 = -pkin(3) * t359 + qJ(4) * t351 + t329 * t688 + t347 * t689;
t313 = pkin(2) * t374 - t695 * t326 - t692 * t334 - t343 * t804;
t312 = pkin(2) * t327 + pkin(3) * t350 - pkin(4) * t428 + pkin(8) * t360 - qJ(2) * t328 - qJ(6) * t790 + t364 * t694;
t311 = pkin(2) * t359 - t695 * t314 - t692 * t316 - t328 * t804;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t664, -t663, 0, t618, 0, 0, 0, 0, 0, 0, 0, t664, t663, t592, 0, 0, 0, 0, 0, 0, t593, t594, t613, t538, 0, 0, 0, 0, 0, 0, t475, t483, t452, t386, 0, 0, 0, 0, 0, 0, t379, t384, t367, t331, 0, 0, 0, 0, 0, 0, t379, t384, t367, t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t663, -t664, 0, t617, 0, 0, 0, 0, 0, 0, 0, -t663, t664, t589, 0, 0, 0, 0, 0, 0, t590, t591, t612, t537, 0, 0, 0, 0, 0, 0, t473, t482, t451, t385, 0, 0, 0, 0, 0, 0, t378, t383, t366, t330, 0, 0, 0, 0, 0, 0, t378, t383, t366, t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t628, t629, 0, t563, 0, 0, 0, 0, 0, 0, t490, t516, t474, t397, 0, 0, 0, 0, 0, 0, t404, t412, t394, t343, 0, 0, 0, 0, 0, 0, t404, t412, t394, t328; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t663, 0, -t664, 0, -t721, -t720, -t617, -pkin(6) * t617, 0, -t663, t664, 0, 0, 0, -t589, t721, t720, -pkin(6) * t589 + (-pkin(1) * t693 + qJ(2) * t696) * g(3), -t634 * t693 + t726, -t609 * t693 + t666 * t696, -t626 * t693 + t695 * t745, -t633 * t693 - t726, -t624 * t693 - t692 * t745, -t656 * t693 + t679, -pkin(6) * t590 - t543 * t693 + t547 * t696, -pkin(6) * t591 - t542 * t693 + t548 * t696, -pkin(2) * t772 - pkin(6) * t612 - t553 * t693, -pkin(6) * t537 - t498 * t693 + t517 * t696, -t520 * t693 + t740, -t471 * t693 + t604 * t696, -t514 * t693 + t585 * t696, -t519 * t693 - t740, -t513 * t693 + t696 * t711, -t539 * t693 + t679, -pkin(6) * t473 - t380 * t693 + t406 * t696, -pkin(6) * t482 - t395 * t693 + t423 * t696, -pkin(6) * t451 - t354 * t693 + t408 * t696, -pkin(6) * t385 - t340 * t693 + t353 * t696, t422, t370, t389, t421, t390, t432, -t323 * t693 + t344 * t696 - t799, -t324 * t693 + t346 * t696 - t798, -t320 * t693 + t332 * t696 - t800, -pkin(6) * t330 - t313 * t693 + t317 * t696, t422, t370, t389, t421, t390, t432, -t318 * t693 + t336 * t696 - t799, -t319 * t693 + t337 * t696 - t798, -t315 * t693 + t325 * t696 - t800, -pkin(6) * t321 - t311 * t693 + t312 * t696; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t664, 0, t663, 0, t720, -t721, t618, pkin(6) * t618, 0, -t664, -t663, 0, 0, 0, t592, -t720, t721, pkin(6) * t592 + (pkin(1) * t696 + qJ(2) * t693) * g(3), t634 * t696 + t727, t609 * t696 + t666 * t693, t626 * t696 + t693 * t746, t633 * t696 - t727, t624 * t696 - t692 * t747, t656 * t696 + t677, pkin(6) * t593 + t543 * t696 + t547 * t693, pkin(6) * t594 + t542 * t696 + t548 * t693, -pkin(2) * t773 + pkin(6) * t613 + t553 * t696, pkin(6) * t538 + t498 * t696 + t517 * t693, t520 * t696 + t741, t471 * t696 + t604 * t693, t514 * t696 + t585 * t693, t519 * t696 - t741, t513 * t696 + t693 * t711, t539 * t696 + t677, pkin(6) * t475 + t380 * t696 + t406 * t693, pkin(6) * t483 + t395 * t696 + t423 * t693, pkin(6) * t452 + t354 * t696 + t408 * t693, pkin(6) * t386 + t340 * t696 + t353 * t693, t420, t369, t387, t419, t388, t431, t323 * t696 + t344 * t693 + t377, t324 * t696 + t346 * t693 + t382, t320 * t696 + t332 * t693 + t365, pkin(6) * t331 + t313 * t696 + t317 * t693, t420, t369, t387, t419, t388, t431, t318 * t696 + t336 * t693 + t377, t319 * t696 + t337 * t693 + t382, t315 * t696 + t325 * t693 + t365, pkin(6) * t322 + t311 * t696 + t312 * t693; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t669, t670, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t719 - 0.2e1 * t791, -t670 + t682 + 0.2e1 * t684, pkin(1) * t644 + qJ(2) * t638, (t660 - t736) * t695, -t658 * t695 - t661 * t692, -t674 * t692 + t768, (-t659 + t735) * t692, t672 * t695 - t771, 0, qJ(2) * t658 - t625 * t804 - t765, qJ(2) * t661 - t627 * t804 - t764, -qJ(2) * t665 + t662 * t804 - t562, -qJ(2) * t632 - t562 * t804, -t576 * t692 + t577 * t695, -t533 * t692 + t535 * t695, -t566 * t692 + t569 * t695, -t574 * t692 + t575 * t695, -t565 * t692 + t568 * t695, -t595 * t692 + t596 * t695, qJ(2) * t581 - t692 * t481 - t489 * t804 + t695 * t506, qJ(2) * t584 - t692 * t484 - t515 * t804 + t695 * t518, qJ(2) * t579 - t692 * t424 + t695 * t426 - t472 * t804, -qJ(2) * t573 - qJ(4) * t787 - t396 * t804 - t692 * t435, t439, t400, t417, t438, t418, t456, -t355 * t692 + t357 * t695 + t723, -t356 * t692 + t358 * t695 + t722, -t348 * t692 + t352 * t695 + t724, qJ(2) * t374 - t692 * t326 + t695 * t334 - t342 * t804, t439, t400, t417, t438, t418, t456, -t338 * t692 + t341 * t695 + t723, -t339 * t692 + t345 * t695 + t722, -t333 * t692 + t335 * t695 + t724, qJ(2) * t359 - t692 * t314 + t695 * t316 - t327 * t804;];
tauB_reg  = t1;
