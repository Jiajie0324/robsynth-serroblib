% Calculate minimal parameter regressor of coriolis matrix for
% S6RPRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPRPRP7_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP7_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP7_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP7_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:22:49
% EndTime: 2019-03-09 03:22:58
% DurationCPUTime: 3.87s
% Computational Cost: add. (6058->318), mult. (10497->451), div. (0->0), fcn. (11276->6), ass. (0->262)
t242 = sin(qJ(3));
t245 = -pkin(1) - pkin(7);
t338 = -qJ(4) + t245;
t217 = t338 * t242;
t244 = cos(qJ(3));
t218 = t338 * t244;
t372 = sin(pkin(9));
t373 = cos(pkin(9));
t159 = t372 * t217 - t373 * t218;
t243 = cos(qJ(5));
t402 = t159 * t243;
t403 = t402 / 0.2e1;
t241 = sin(qJ(5));
t210 = t373 * t217;
t280 = t372 * t218;
t398 = t280 + t210;
t366 = t398 * t241;
t365 = t398 * t243;
t227 = t372 * t242;
t281 = t373 * t244;
t214 = t281 - t227;
t212 = t214 ^ 2;
t228 = t372 * t244;
t229 = t373 * t242;
t215 = -t228 - t229;
t213 = t215 ^ 2;
t276 = t212 / 0.2e1 + t213 / 0.2e1;
t82 = 0.1e1 / 0.2e1 - t276;
t401 = 0.2e1 * t241;
t384 = qJD(3) * pkin(3);
t400 = (t372 * t214 + t373 * t215) * t384;
t230 = t372 * pkin(3) + pkin(8);
t337 = qJ(6) + t230;
t209 = t337 * t243;
t389 = t215 * pkin(5);
t127 = t243 * t214;
t232 = t242 * pkin(3) + qJ(2);
t118 = -t215 * pkin(4) - t214 * pkin(8) + t232;
t74 = -t243 * t118 + t366;
t68 = -qJ(6) * t127 - t74;
t55 = t68 - t389;
t299 = t68 / 0.2e1 - t55 / 0.2e1;
t399 = t299 * t209;
t164 = t212 + t213;
t207 = t227 / 0.2e1 - t281 / 0.2e1;
t387 = t244 * pkin(3);
t132 = t214 * pkin(4) - t215 * pkin(8) + t387;
t110 = t243 * t132;
t125 = t243 * t215;
t352 = t159 * t241;
t56 = t214 * pkin(5) - qJ(6) * t125 + t110 + t352;
t396 = t56 / 0.2e1;
t394 = t214 / 0.2e1;
t393 = t215 / 0.2e1;
t239 = t241 ^ 2;
t392 = t239 / 0.2e1;
t391 = t241 / 0.2e1;
t390 = pkin(5) * t241;
t388 = t243 * pkin(5);
t382 = t55 * t241;
t121 = t241 * t214;
t75 = t241 * t118 + t365;
t69 = -qJ(6) * t121 + t75;
t379 = t69 * t243;
t64 = t379 / 0.2e1;
t386 = -t382 / 0.2e1 + t64;
t385 = pkin(5) * qJD(5);
t122 = t241 * t215;
t109 = t241 * t132;
t336 = -t402 + t109;
t70 = -qJ(6) * t122 + t336;
t58 = pkin(5) * t121;
t92 = t159 + t58;
t93 = pkin(5) * t122 + t398;
t5 = t55 * t56 + t69 * t70 + t92 * t93;
t383 = t5 * qJD(1);
t381 = t56 * t241;
t380 = t56 * t243;
t275 = t299 * t215;
t307 = -t212 / 0.2e1;
t7 = (-t275 + (t307 - 0.1e1 / 0.2e1) * pkin(5)) * t243;
t378 = t7 * qJD(1);
t377 = t70 * t241;
t376 = t70 * t243;
t300 = -t389 / 0.2e1;
t268 = t300 - t299;
t8 = t268 * t243;
t375 = t8 * qJD(1);
t374 = t92 * t241;
t23 = t69 * t241 + t55 * t243;
t10 = t23 * t215 + (t377 + t380) * t214;
t371 = t10 * qJD(1);
t40 = t55 * t121;
t11 = t68 * t121 - t40;
t370 = t11 * qJD(1);
t303 = pkin(5) * t127;
t12 = t92 * t303 + (-t55 + t68) * t69;
t369 = t12 * qJD(1);
t13 = t268 * t241;
t368 = t13 * qJD(1);
t17 = t92 * t214 + (t379 - t382) * t215;
t364 = t17 * qJD(1);
t231 = -t373 * pkin(3) - pkin(4);
t219 = t231 - t388;
t286 = t219 * t394;
t358 = t209 * t243;
t208 = t337 * t241;
t361 = t208 * t241;
t248 = (t358 / 0.2e1 + t361 / 0.2e1) * t215 + t286;
t267 = -t380 / 0.2e1 - t377 / 0.2e1;
t19 = t248 + t267;
t363 = t19 * qJD(1);
t20 = -t110 * t215 + (-t74 + t366) * t214;
t362 = t20 * qJD(1);
t360 = t208 * t243;
t359 = t209 * t241;
t21 = (t336 + t402) * t215 + (-t75 + t365) * t214;
t357 = t21 * qJD(1);
t356 = t214 * t215;
t22 = t23 * t214;
t355 = t22 * qJD(1);
t354 = t23 * qJD(1);
t203 = t239 * t215;
t240 = t243 ^ 2;
t353 = t240 * t214;
t204 = t240 * t215;
t31 = -t159 * t121 - t74 * t215;
t349 = t31 * qJD(1);
t32 = t159 * t127 + t75 * t215;
t348 = t32 * qJD(1);
t282 = t240 / 0.2e1 + t392;
t258 = -t282 * t213 + t307;
t60 = t258 - t282;
t347 = t60 * qJD(1);
t71 = t159 * t214 + t215 * t398;
t346 = t71 * qJD(1);
t83 = -0.1e1 / 0.2e1 - t276;
t76 = t83 * t241;
t345 = t76 * qJD(1);
t344 = t83 * qJD(1);
t86 = t83 * t243;
t343 = t86 * qJD(1);
t264 = t214 * t392 + t353 / 0.2e1;
t88 = t264 - t207;
t342 = t88 * qJD(1);
t304 = t212 - t213;
t94 = t304 * t241;
t341 = t94 * qJD(1);
t95 = t164 * t241;
t340 = t95 * qJD(1);
t96 = t304 * t243;
t339 = t96 * qJD(1);
t224 = t239 + t240;
t226 = t240 - t239;
t333 = qJD(1) * qJ(2);
t332 = qJD(1) * t215;
t331 = qJD(1) * t243;
t330 = qJD(2) * t215;
t329 = qJD(3) * t241;
t328 = qJD(3) * t243;
t327 = qJD(4) * t243;
t326 = qJD(5) * t241;
t325 = qJD(5) * t243;
t251 = t372 * t393 - t373 * t214 / 0.2e1;
t103 = (-t244 / 0.2e1 + t251) * pkin(3);
t324 = t103 * qJD(1);
t323 = t121 * qJD(1);
t322 = t122 * qJD(1);
t321 = t125 * qJD(1);
t133 = t224 * t212;
t320 = t133 * qJD(1);
t135 = t224 * t214;
t319 = t135 * qJD(1);
t136 = -t203 - t204;
t318 = t136 * qJD(1);
t137 = t164 * t243;
t317 = t137 * qJD(1);
t316 = t164 * qJD(1);
t315 = t207 * qJD(1);
t314 = t224 * qJD(3);
t225 = t242 ^ 2 - t244 ^ 2;
t313 = t225 * qJD(1);
t312 = t232 * qJD(1);
t311 = t242 * qJD(1);
t310 = t242 * qJD(3);
t309 = t244 * qJD(1);
t308 = t244 * qJD(3);
t302 = pkin(5) * t326;
t301 = pkin(5) * t325;
t298 = qJ(2) * t311;
t297 = qJ(2) * t309;
t296 = t215 * t326;
t295 = t215 * t325;
t294 = t214 * t332;
t293 = qJD(3) * t356;
t292 = t241 * t325;
t291 = t241 * t332;
t290 = t241 * t328;
t289 = t214 * t331;
t200 = t214 * t328;
t288 = t215 * t331;
t287 = t242 * t309;
t285 = -t109 / 0.2e1 + t403;
t283 = t229 / 0.2e1 + t228 / 0.2e1;
t279 = t241 * t300;
t278 = -qJD(5) + t332;
t277 = t241 * t200;
t274 = -t121 * qJD(3) + t295;
t246 = (t64 - t93 / 0.2e1) * t214 + (-t376 / 0.2e1 + t381 / 0.2e1 - t92 / 0.2e1) * t215 - t40 / 0.2e1;
t266 = -t359 / 0.2e1 + t360 / 0.2e1;
t4 = t246 + t266;
t72 = (0.1e1 - t224) * t356;
t273 = t4 * qJD(1) + t72 * qJD(2);
t1 = -t399 + (t396 - t219 * t127 / 0.2e1 - t374 / 0.2e1) * pkin(5);
t73 = t219 * t390;
t272 = -t1 * qJD(1) + t73 * qJD(3);
t33 = t232 * t387;
t271 = t33 * qJD(1);
t117 = t358 + t361;
t270 = -t214 * t230 + t215 * t231;
t269 = t278 * t243;
t265 = t230 * t393 + t231 * t394;
t254 = t265 * t243;
t29 = -t110 / 0.2e1 + t254;
t263 = -t29 * qJD(1) - t231 * t329;
t247 = -t265 * t241 + t403;
t27 = t247 - t285;
t262 = -t27 * qJD(1) - t231 * t328;
t261 = t214 * t269;
t119 = (t392 - t240 / 0.2e1) * t214;
t260 = -t119 * qJD(1) + t290;
t259 = t207 * qJD(5) + t294;
t257 = t212 * t241 * t331 + t119 * qJD(3);
t134 = t226 * t212;
t256 = t134 * qJD(1) + 0.2e1 * t277;
t255 = -t226 * qJD(3) + t289 * t401;
t249 = t266 * t214 + t386;
t250 = -t210 / 0.2e1 - t280 / 0.2e1 + t279;
t16 = t249 + t250;
t90 = t282 * t215 + t283;
t253 = t16 * qJD(1) - t90 * qJD(2) + t117 * qJD(3);
t202 = t207 * qJD(3);
t172 = (t289 + t329) * pkin(5);
t113 = t122 * qJD(5);
t111 = t119 * qJD(5);
t102 = t387 / 0.2e1 + t251 * pkin(3);
t101 = t322 - t326;
t91 = -t204 / 0.2e1 - t203 / 0.2e1 + t283;
t89 = -t264 - t207;
t87 = (-t213 / 0.2e1 + t307 + 0.1e1 / 0.2e1) * t243;
t77 = t82 * t241;
t59 = t258 + t282;
t30 = t159 * t391 + t352 / 0.2e1 + t110 / 0.2e1 + t254;
t28 = t247 + t285;
t18 = t248 - t267;
t15 = t249 - t250;
t14 = t68 * t391 - t379 / 0.2e1 + t279 + t386;
t9 = (t299 + t300) * t243;
t6 = t388 / 0.2e1 + (pkin(5) * t307 - t275) * t243;
t3 = t246 - t266;
t2 = t286 * t388 + t399 + (t374 / 0.2e1 + t396) * pkin(5);
t24 = [0, 0, 0, 0, qJD(2), qJ(2) * qJD(2), -t242 * t308, t225 * qJD(3), 0, 0, 0, qJ(2) * t308 + qJD(2) * t242, -qJ(2) * t310 + qJD(2) * t244, t164 * qJD(4), t232 * qJD(2) + t33 * qJD(3) + t71 * qJD(4), -t212 * t292 + t240 * t293, -t134 * qJD(5) - 0.2e1 * t215 * t277, t96 * qJD(3) + t214 * t296, -t94 * qJD(3) + t214 * t295, -t293, t20 * qJD(3) + t95 * qJD(4) + t32 * qJD(5) - t243 * t330, t21 * qJD(3) + t137 * qJD(4) + t31 * qJD(5) + t241 * t330, -t135 * qJD(2) - t10 * qJD(3) - t11 * qJD(5) + t133 * qJD(6), t23 * qJD(2) + t5 * qJD(3) + t17 * qJD(4) + t12 * qJD(5) - t22 * qJD(6); 0, 0, 0, 0, qJD(1), t333, 0, 0, 0, 0, 0, t311, t309, 0, t82 * qJD(4) + t312, 0, 0, 0, 0, 0, t87 * qJD(5) - t288, -t77 * qJD(5) + t291, -t319, t3 * qJD(3) + t59 * qJD(4) + t6 * qJD(5) + t354; 0, 0, 0, 0, 0, 0, -t287, t313, -t310, -t308, 0, -t245 * t310 + t297, -t245 * t308 - t298, -t400 (-t159 * t372 - t373 * t398) * t384 + t102 * qJD(4) + t271, -t111 + (qJD(1) * t353 + t290) * t215 (-t203 + t204) * qJD(3) + (-qJD(5) - t332) * t127 * t401, t214 * t329 + t339, t200 - t341, -t259, t362 + (t241 * t270 - t365) * qJD(3) + t30 * qJD(5), t357 + (t243 * t270 + t366) * qJD(3) + t28 * qJD(5), -t371 + (-t381 + t376 + (-t359 + t360) * t215) * qJD(3) + t9 * qJD(5), t383 + t3 * qJD(2) + (-t56 * t208 + t70 * t209 + t93 * t219) * qJD(3) + t18 * qJD(4) + t2 * qJD(5) + t15 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t316, t82 * qJD(2) + t102 * qJD(3) + t346, 0, 0, 0, 0, 0, t340, t317, 0, t59 * qJD(2) + t18 * qJD(3) + t14 * qJD(5) + t89 * qJD(6) + t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, -t256, t278 * t121, t261, -t202, t87 * qJD(2) + t30 * qJD(3) - t75 * qJD(5) + t348, -t77 * qJD(2) + t28 * qJD(3) + t74 * qJD(5) + t349, t9 * qJD(3) + t214 * t302 - t370, t6 * qJD(2) + t2 * qJD(3) + t14 * qJD(4) - t69 * t385 + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t320, t15 * qJD(3) + t89 * qJD(4) - t355; 0, 0, 0, 0, -qJD(1), -t333, 0, 0, 0, 0, 0, -t311, -t309, 0, t83 * qJD(4) - t312, 0, 0, 0, 0, 0, t86 * qJD(5) + t288, -t76 * qJD(5) - t291, t319, t4 * qJD(3) + t60 * qJD(4) + t7 * qJD(5) - t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t310, -t308, 0, t400, 0, 0, 0, 0, 0, -t121 * qJD(5) + t215 * t328, -t127 * qJD(5) - t215 * t329, t135 * qJD(3) (t117 * t214 - t215 * t219) * qJD(3) - t58 * qJD(5) + t91 * qJD(6) + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t344, 0, 0, 0, 0, 0, 0, 0, 0, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t274 + t343, -t127 * qJD(3) - t296 - t345, 0, pkin(5) * t295 - t58 * qJD(3) + t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91 * qJD(3); 0, 0, 0, 0, 0, 0, t287, -t313, 0, 0, 0, -t297, t298, 0, t103 * qJD(4) - t271, -t240 * t294 - t111, t261 * t401, -t125 * qJD(5) - t339, t113 + t341, t259, t29 * qJD(5) - t214 * t327 - t362, t121 * qJD(4) + t27 * qJD(5) - t357, -t136 * qJD(4) - t8 * qJD(5) + t371, -t4 * qJD(2) + t19 * qJD(4) - t1 * qJD(5) + t16 * qJD(6) - t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90 * qJD(6) - t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t292, t226 * qJD(5), 0, 0, 0, t231 * t326, t231 * t325, t224 * qJD(6), t73 * qJD(5) + t117 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t324, 0, 0, 0, 0, 0, -t289, t323, -t318, t363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t260, -t255, -t321 + t325, t101, t315, -t230 * t325 - t263, t230 * t326 - t262, -t301 - t375, -t209 * t385 + t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316, -t83 * qJD(2) - t103 * qJD(3) - t346, 0, 0, 0, 0, 0, t113 + t200 - t340, t274 - t317, t136 * qJD(3), -t60 * qJD(2) - t19 * qJD(3) - t13 * qJD(5) - t88 * qJD(6) - t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t344, 0, 0, 0, 0, 0, 0, 0, 0, -t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t324, 0, 0, 0, 0, 0, t289, -t323, t318, -t363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, t269, 0, -t302 - t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, t256, t125 * qJD(3) - t214 * t291, -t122 * qJD(3) - t214 * t288, -t202, -t86 * qJD(2) - t29 * qJD(3) - t122 * qJD(4) - t348, t76 * qJD(2) - t27 * qJD(3) - t215 * t327 - t349, t8 * qJD(3) + t370, -t7 * qJD(2) + t1 * qJD(3) + t13 * qJD(4) - qJD(6) * t303 - t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t343, t345, 0, -t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t260, t255, t321, -t322, -t315, t263, t262, t375, -qJD(6) * t390 - t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322, -t288, 0, t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t320, -t16 * qJD(3) + t88 * qJD(4) + t214 * t301 + t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314, -t253 + t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t24;
