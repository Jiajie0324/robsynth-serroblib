% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRP7_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP7_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP7_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP7_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:22:46
% EndTime: 2019-03-09 03:22:54
% DurationCPUTime: 3.15s
% Computational Cost: add. (5581->382), mult. (12143->488), div. (0->0), fcn. (8200->6), ass. (0->208)
t150 = sin(qJ(5));
t152 = cos(qJ(5));
t154 = -pkin(1) - pkin(7);
t130 = qJD(1) * t154 + qJD(2);
t153 = cos(qJ(3));
t207 = qJD(1) * t153;
t107 = -qJ(4) * t207 + t130 * t153;
t102 = qJD(3) * pkin(3) + t107;
t149 = sin(pkin(9));
t151 = sin(qJ(3));
t106 = (-qJ(4) * qJD(1) + t130) * t151;
t228 = cos(pkin(9));
t186 = t228 * t106;
t64 = t102 * t149 + t186;
t56 = qJD(3) * pkin(8) + t64;
t162 = -t149 * t153 - t151 * t228;
t110 = t162 * qJD(1);
t185 = t228 * t153;
t208 = qJD(1) * t151;
t190 = t149 * t208;
t113 = qJD(1) * t185 - t190;
t123 = pkin(3) * t208 + qJD(1) * qJ(2) + qJD(4);
t65 = -pkin(4) * t110 - pkin(8) * t113 + t123;
t33 = t150 * t65 + t152 * t56;
t199 = t152 * qJD(3);
t89 = t113 * t150 - t199;
t22 = -qJ(6) * t89 + t33;
t258 = qJD(5) - t110;
t262 = t22 * t258;
t198 = t153 * qJD(4);
t205 = qJD(3) * t151;
t86 = -t130 * t205 + (qJ(4) * t205 - t198) * qJD(1);
t200 = t151 * qJD(4);
t204 = qJD(3) * t153;
t87 = t130 * t204 + (-qJ(4) * t204 - t200) * qJD(1);
t48 = t149 * t86 + t228 * t87;
t183 = qJD(3) * t228;
t177 = qJD(1) * t183;
t129 = t153 * t177;
t103 = qJD(3) * t190 - t129;
t145 = qJD(1) * qJD(2);
t196 = qJD(1) * qJD(3);
t189 = t153 * t196;
t122 = pkin(3) * t189 + t145;
t211 = t149 * t189 + t151 * t177;
t53 = -pkin(4) * t103 + pkin(8) * t211 + t122;
t12 = -qJD(5) * t33 - t150 * t48 + t152 * t53;
t261 = t258 * t33 + t12;
t202 = qJD(5) * t152;
t203 = qJD(5) * t150;
t184 = -t150 * t53 - t152 * t48 - t202 * t65 + t203 * t56;
t32 = -t150 * t56 + t152 * t65;
t260 = -t258 * t32 - t184;
t180 = t152 * t258;
t217 = t150 * t103;
t259 = t180 * t258 - t217;
t57 = -qJD(5) * t199 + t113 * t203 + t152 * t211;
t157 = t57 * qJ(6) + t12;
t250 = t103 * pkin(5);
t91 = qJD(3) * t150 + t113 * t152;
t2 = -t91 * qJD(6) + t157 - t250;
t256 = t2 + t262;
t58 = qJD(5) * t91 - t150 * t211;
t115 = t162 * qJD(3);
t120 = -t149 * t151 + t185;
t255 = t113 * t115 - t120 * t211;
t254 = t91 ^ 2;
t253 = t113 ^ 2;
t252 = 0.2e1 * t145;
t251 = t89 * pkin(5);
t47 = t149 * t87 - t228 * t86;
t213 = qJ(4) - t154;
t124 = t213 * t151;
t125 = t213 * t153;
t83 = -t124 * t149 + t125 * t228;
t249 = t47 * t83;
t248 = t91 * t89;
t21 = -qJ(6) * t91 + t32;
t19 = pkin(5) * t258 + t21;
t247 = t19 - t21;
t136 = pkin(3) * t149 + pkin(8);
t212 = qJ(6) + t136;
t181 = qJD(5) * t212;
t224 = t110 * t152;
t99 = t149 * t106;
t73 = t107 * t228 - t99;
t193 = pkin(3) * t207;
t75 = pkin(4) * t113 - pkin(8) * t110 + t193;
t34 = -t150 * t73 + t152 * t75;
t246 = pkin(5) * t113 - qJ(6) * t224 + t150 * qJD(6) + t152 * t181 + t34;
t225 = t110 * t150;
t35 = t150 * t75 + t152 * t73;
t245 = -qJ(6) * t225 - qJD(6) * t152 + t150 * t181 + t35;
t244 = -t150 * t58 - t202 * t89;
t138 = pkin(3) * t151 + qJ(2);
t80 = -pkin(4) * t162 - pkin(8) * t120 + t138;
t84 = -t124 * t228 - t125 * t149;
t81 = t152 * t84;
t43 = t150 * t80 + t81;
t243 = t258 * t89;
t242 = t113 * t89;
t30 = pkin(5) * t58 + t47;
t241 = t150 * t30;
t240 = t150 * t89;
t239 = t150 * t91;
t238 = t152 * t89;
t237 = t152 * t91;
t236 = t30 * t152;
t235 = t47 * t120;
t234 = t47 * t150;
t233 = t47 * t152;
t232 = t57 * t150;
t231 = t58 * t152;
t230 = t91 * t258;
t229 = t91 * t113;
t227 = qJ(6) * t120;
t226 = t258 * t113;
t223 = t113 * t110;
t221 = t115 * t150;
t220 = t115 * t152;
t219 = t162 * t103;
t218 = t120 * t150;
t97 = t152 * t103;
t155 = qJD(3) ^ 2;
t216 = t155 * t151;
t215 = t155 * t153;
t156 = qJD(1) ^ 2;
t214 = t156 * qJ(2);
t210 = t151 ^ 2 - t153 ^ 2;
t209 = -t155 - t156;
t206 = qJD(3) * t110;
t112 = t149 * t205 - t153 * t183;
t201 = t112 * qJD(3);
t131 = pkin(3) * t204 + qJD(2);
t104 = -qJD(3) * t125 - t200;
t160 = t205 * t213 - t198;
t69 = t104 * t228 + t149 * t160;
t74 = -pkin(4) * t112 - pkin(8) * t115 + t131;
t195 = t150 * t74 + t152 * t69 + t202 * t80;
t194 = 0.2e1 * qJD(1);
t192 = t153 * t156 * t151;
t191 = t120 * t202;
t188 = qJD(6) + t251;
t187 = -t150 * t69 + t152 * t74;
t42 = -t150 * t84 + t152 * t80;
t68 = t149 * t104 - t160 * t228;
t72 = t107 * t149 + t186;
t179 = -qJD(5) * t162 + qJD(1);
t178 = t151 * t189;
t137 = -pkin(3) * t228 - pkin(4);
t165 = t58 * qJ(6) + t184;
t4 = -qJD(6) * t89 - t165;
t176 = -t19 * t258 + t4;
t63 = t102 * t228 - t99;
t175 = t150 * t22 + t152 * t19;
t174 = t150 * t19 - t152 * t22;
t173 = t150 * t33 + t152 * t32;
t172 = t150 * t32 - t152 * t33;
t171 = -t238 + t239;
t170 = t238 + t239;
t169 = t237 + t240;
t168 = t110 * t112 + t219;
t167 = -qJ(6) * t115 - qJD(6) * t120;
t166 = -t97 + (-t203 + t225) * t258;
t164 = -t152 * t57 - t203 * t91;
t163 = t191 + t221;
t55 = -qJD(3) * pkin(4) - t63;
t161 = t103 * t136 + t258 * t55;
t159 = t112 * t64 - t115 * t63 + t162 * t48 + t235;
t158 = -qJD(5) * t173 - t12 * t150 - t152 * t184;
t142 = qJ(2) * t252;
t126 = -pkin(5) * t152 + t137;
t117 = t212 * t152;
t116 = t212 * t150;
t109 = t110 ^ 2;
t105 = t115 * qJD(3);
t88 = t89 ^ 2;
t61 = pkin(5) * t218 + t83;
t46 = pkin(5) * t225 + t72;
t44 = -t112 * t258 + t219;
t41 = -t88 + t254;
t40 = t188 + t55;
t39 = pkin(5) * t163 + t68;
t38 = -qJ(6) * t218 + t43;
t37 = t230 - t58;
t36 = -t57 + t243;
t31 = -pkin(5) * t162 - t152 * t227 + t42;
t28 = -t229 - t259;
t27 = -t229 + t259;
t26 = t166 + t242;
t25 = t166 - t242;
t24 = t240 * t258 - t231;
t23 = t180 * t91 - t232;
t18 = -t120 * t244 + t221 * t89;
t17 = t120 * t164 + t220 * t91;
t16 = -qJD(5) * t43 + t187;
t15 = -t203 * t84 + t195;
t14 = t89 * t112 + t120 * t217 + t162 * t58 - t163 * t258;
t13 = -t120 * t97 - t91 * t112 + t57 * t162 + (-t120 * t203 + t220) * t258;
t10 = -qJ(6) * t191 + (-qJD(5) * t84 + t167) * t150 + t195;
t9 = -t162 * t217 - t115 * t89 - t120 * t58 + (t112 * t150 - t152 * t179) * t258;
t8 = -t162 * t97 - t115 * t91 + t120 * t57 + (t112 * t152 + t150 * t179) * t258;
t7 = -t112 * pkin(5) + t167 * t152 + (-t81 + (-t80 + t227) * t150) * qJD(5) + t187;
t6 = t110 * t170 + t164 + t244;
t5 = -t110 * t171 - t164 + t244;
t3 = -t170 * t115 + (t232 - t231 + (-t237 + t240) * qJD(5)) * t120;
t1 = -t171 * t112 + t169 * qJD(1) - (qJD(5) * t169 - t231 - t232) * t162;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t252, t142, -0.2e1 * t178, 0.2e1 * t210 * t196, -t216, 0.2e1 * t178, -t215, 0, -t154 * t216 + (qJ(2) * t204 + qJD(2) * t151) * t194, -t154 * t215 + (-qJ(2) * t205 + qJD(2) * t153) * t194, 0, t142, t255, t103 * t120 + t110 * t115 + t112 * t113 - t162 * t211, t105, t168, t201, 0, -qJD(3) * t68 - t103 * t138 - t110 * t131 - t112 * t123 - t122 * t162, -qJD(3) * t69 + t113 * t131 + t115 * t123 + t120 * t122 - t138 * t211, t103 * t84 + t110 * t69 + t113 * t68 - t211 * t83 + t159, t122 * t138 + t123 * t131 + t48 * t84 - t63 * t68 + t64 * t69 + t249, t17, t3, t13, t18, t14, t44, t55 * t221 - t42 * t103 + t16 * t258 - t32 * t112 - t12 * t162 + t83 * t58 + t68 * t89 + (t202 * t55 + t234) * t120, t55 * t220 + t43 * t103 - t15 * t258 - t184 * t162 + t33 * t112 - t83 * t57 + t68 * t91 + (-t203 * t55 + t233) * t120, -t15 * t89 - t16 * t91 + t42 * t57 - t43 * t58 - t173 * t115 + (qJD(5) * t172 - t12 * t152 + t150 * t184) * t120, t12 * t42 + t15 * t33 + t16 * t32 - t184 * t43 + t55 * t68 + t249, t17, t3, t13, t18, t14, t44, t40 * t221 - t31 * t103 + t7 * t258 - t19 * t112 - t2 * t162 + t39 * t89 + t61 * t58 + (t202 * t40 + t241) * t120, t40 * t220 - t10 * t258 + t38 * t103 + t22 * t112 + t4 * t162 + t39 * t91 - t61 * t57 + (-t203 * t40 + t236) * t120, -t10 * t89 + t31 * t57 - t38 * t58 - t7 * t91 - t175 * t115 + (qJD(5) * t174 - t4 * t150 - t2 * t152) * t120, t10 * t22 + t19 * t7 + t2 * t31 + t30 * t61 + t38 * t4 + t39 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t156, -t214, 0, 0, 0, 0, 0, 0, t209 * t151, t209 * t153, 0, -t214, 0, 0, 0, 0, 0, 0, qJD(1) * t110 + t105, -qJD(1) * t113 + t201, -t168 - t255, -qJD(1) * t123 - t159, 0, 0, 0, 0, 0, 0, t9, t8, t1, -qJD(1) * t173 + t112 * t172 - t55 * t115 - t158 * t162 - t235, 0, 0, 0, 0, 0, 0, t9, t8, t1, -t40 * t115 - t30 * t120 + t174 * t112 - t175 * qJD(1) - (-qJD(5) * t175 - t2 * t150 + t4 * t152) * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, -t210 * t156, 0, -t192, 0, 0, -t153 * t214, t151 * t214, 0, 0, -t223, -t109 + t253, -t206 - t211, t223, -t129 + (t113 + t190) * qJD(3), 0, qJD(3) * t72 + t110 * t193 - t113 * t123 - t47, qJD(3) * t73 - t110 * t123 - t113 * t193 - t48 (t64 - t72) * t113 - (t73 - t63) * t110 + (t103 * t149 + t211 * t228) * pkin(3), t63 * t72 - t64 * t73 + (-t123 * t207 + t149 * t48 - t228 * t47) * pkin(3), t23, t6, t27, t24, t26, -t226, -t32 * t113 + t137 * t58 - t233 - t72 * t89 + (-t136 * t202 - t34) * t258 + t161 * t150, t33 * t113 - t137 * t57 + t234 - t72 * t91 + (t136 * t203 + t35) * t258 + t161 * t152, t34 * t91 + t35 * t89 + (t110 * t32 - t136 * t58 - t184 + (t136 * t91 - t32) * qJD(5)) * t152 + (t110 * t33 - t136 * t57 - t12 + (t136 * t89 - t33) * qJD(5)) * t150, t136 * t158 + t47 * t137 - t32 * t34 - t33 * t35 - t55 * t72, t23, t6, t27, t24, t26, -t226, t116 * t103 - t19 * t113 + t126 * t58 - t236 - t46 * t89 - t246 * t258 + (-t110 * t40 + (t40 + t251) * qJD(5)) * t150, -t40 * t224 + t103 * t117 + t113 * t22 - t126 * t57 + t241 - t46 * t91 + t245 * t258 + (pkin(5) * t239 + t152 * t40) * qJD(5), -t116 * t57 - t117 * t58 - t150 * t256 + t152 * t176 + t245 * t89 + t246 * t91, -t2 * t116 + t4 * t117 + t30 * t126 + (pkin(5) * t203 - t46) * t40 - t245 * t22 - t246 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129 + (t113 - t190) * qJD(3), t206 - t211, -t109 - t253, -t110 * t64 + t113 * t63 + t122, 0, 0, 0, 0, 0, 0, t25, t28, t5, -t55 * t113 + t150 * t260 + t152 * t261, 0, 0, 0, 0, 0, 0, t25, t28, t5, -t40 * t113 + t150 * t176 + t152 * t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, t41, t36, -t248, t37, -t103, -t55 * t91 + t261, t55 * t89 - t260, 0, 0, t248, t41, t36, -t248, t37, -t103, -0.2e1 * t250 + t262 + (-t188 - t40) * t91 + t157, -t254 * pkin(5) + t21 * t258 + (qJD(6) + t40) * t89 + t165, t57 * pkin(5) - t247 * t89, t247 * t22 + (-t40 * t91 + t2) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 + t230, -t57 - t243, -t88 - t254, t19 * t91 + t22 * t89 + t30;];
tauc_reg  = t11;
