% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRPRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:40
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRPRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:40:06
% EndTime: 2019-05-04 23:40:14
% DurationCPUTime: 9.04s
% Computational Cost: add. (19465->265), mult. (36565->370), div. (0->0), fcn. (26863->12), ass. (0->204)
t2275 = sin(qJ(4));
t2319 = qJD(2) * t2275;
t2258 = qJD(4) * t2319;
t2278 = cos(qJ(4));
t2307 = t2278 * qJDD(2);
t2304 = t2258 - t2307;
t2303 = -qJDD(5) - t2304;
t2274 = sin(qJ(5));
t2277 = cos(qJ(5));
t2232 = -qJD(4) * t2277 + t2274 * t2319;
t2234 = qJD(4) * t2274 + t2277 * t2319;
t2313 = t2232 * t2234;
t2188 = t2303 - t2313;
t2230 = t2234 ^ 2;
t2318 = qJD(2) * t2278;
t2255 = qJD(5) - t2318;
t2320 = t2255 ^ 2;
t2325 = -t2230 - t2320;
t2166 = t2188 * t2277 - t2274 * t2325;
t2306 = qJD(4) * t2318;
t2308 = t2275 * qJDD(2);
t2237 = t2306 + t2308;
t2284 = -qJD(5) * t2232 + qJDD(4) * t2274 + t2237 * t2277;
t2312 = t2232 * t2255;
t2283 = t2284 - t2312;
t2136 = t2166 * t2275 - t2278 * t2283;
t2268 = sin(pkin(6));
t2271 = cos(pkin(6));
t2138 = t2166 * t2278 + t2275 * t2283;
t2164 = t2188 * t2274 + t2277 * t2325;
t2266 = sin(pkin(11));
t2269 = cos(pkin(11));
t2117 = t2138 * t2266 - t2164 * t2269;
t2119 = t2138 * t2269 + t2164 * t2266;
t2276 = sin(qJ(2));
t2279 = cos(qJ(2));
t2295 = t2117 * t2279 + t2119 * t2276;
t2089 = -t2268 * t2136 + t2271 * t2295;
t2093 = t2117 * t2276 - t2119 * t2279;
t2267 = sin(pkin(10));
t2270 = cos(pkin(10));
t2360 = t2089 * t2267 + t2093 * t2270;
t2359 = t2089 * t2270 - t2093 * t2267;
t2087 = t2271 * t2136 + t2268 * t2295;
t2177 = t2284 + t2312;
t2305 = -t2277 * qJDD(4) + t2274 * t2237;
t2285 = (-qJD(5) + t2255) * t2234 - t2305;
t2323 = -t2177 * t2277 + t2274 * t2285;
t2208 = t2232 ^ 2;
t2187 = t2230 + t2208;
t2322 = t2177 * t2274 + t2277 * t2285;
t2336 = -t2187 * t2275 + t2278 * t2322;
t2341 = t2266 * t2323 + t2269 * t2336;
t2342 = t2266 * t2336 - t2269 * t2323;
t2348 = -t2276 * t2342 + t2279 * t2341;
t2335 = t2187 * t2278 + t2275 * t2322;
t2347 = t2276 * t2341 + t2279 * t2342;
t2349 = -t2268 * t2335 + t2271 * t2347;
t2356 = -t2267 * t2349 + t2270 * t2348;
t2355 = t2267 * t2348 + t2270 * t2349;
t2350 = t2268 * t2347 + t2271 * t2335;
t2189 = t2303 + t2313;
t2324 = -t2320 - t2208;
t2329 = -t2189 * t2277 + t2274 * t2324;
t2340 = t2266 * t2329;
t2339 = t2269 * t2329;
t2328 = t2189 * t2274 + t2277 * t2324;
t2338 = t2275 * t2328;
t2337 = t2278 * t2328;
t2245 = g(1) * t2267 - g(2) * t2270;
t2263 = -g(3) + qJDD(1);
t2330 = t2245 * t2271 + t2263 * t2268;
t2321 = qJD(4) ^ 2;
t2246 = -g(1) * t2270 - g(2) * t2267;
t2192 = t2279 * t2246 + t2276 * t2330;
t2280 = qJD(2) ^ 2;
t2185 = -pkin(2) * t2280 + t2192;
t2191 = -t2276 * t2246 + t2279 * t2330;
t2282 = qJDD(2) * pkin(2) + t2191;
t2158 = t2269 * t2185 + t2266 * t2282;
t2154 = -pkin(3) * t2280 + qJDD(2) * pkin(8) + t2158;
t2217 = -t2245 * t2268 + t2271 * t2263;
t2215 = qJDD(3) + t2217;
t2145 = t2278 * t2154 + t2275 * t2215;
t2235 = (-pkin(4) * t2278 - pkin(9) * t2275) * qJD(2);
t2129 = -pkin(4) * t2321 + qJDD(4) * pkin(9) + t2235 * t2318 + t2145;
t2157 = -t2266 * t2185 + t2269 * t2282;
t2153 = -qJDD(2) * pkin(3) - t2280 * pkin(8) - t2157;
t2281 = (-t2237 - t2306) * pkin(9) + (t2304 + t2258) * pkin(4) + t2153;
t2105 = t2277 * t2129 + t2274 * t2281;
t2261 = t2275 ^ 2;
t2262 = t2278 ^ 2;
t2309 = t2261 + t2262;
t2104 = -t2274 * t2129 + t2277 * t2281;
t2201 = pkin(5) * t2232 - qJ(6) * t2234;
t2100 = -pkin(5) * t2320 - qJ(6) * t2303 + 0.2e1 * qJD(6) * t2255 - t2232 * t2201 + t2105;
t2103 = pkin(5) * t2303 - qJ(6) * t2320 + t2234 * t2201 + qJDD(6) - t2104;
t2080 = t2100 * t2277 + t2103 * t2274;
t2210 = t2278 * t2215;
t2128 = -t2210 - qJDD(4) * pkin(4) - t2321 * pkin(9) + (qJD(2) * t2235 + t2154) * t2275;
t2286 = -qJD(5) * t2234 - t2305;
t2110 = -t2286 * pkin(5) + (pkin(5) * t2255 - 0.2e1 * qJD(6)) * t2234 + t2128 - t2283 * qJ(6);
t2069 = t2080 * t2278 + t2110 * t2275;
t2079 = t2100 * t2274 - t2103 * t2277;
t2064 = t2069 * t2266 - t2079 * t2269;
t2065 = t2069 * t2269 + t2079 * t2266;
t2302 = t2064 * t2279 + t2065 * t2276;
t2086 = -t2104 * t2274 + t2105 * t2277;
t2077 = t2086 * t2278 + t2128 * t2275;
t2085 = t2104 * t2277 + t2105 * t2274;
t2066 = t2077 * t2266 - t2085 * t2269;
t2067 = t2077 * t2269 + t2085 * t2266;
t2301 = t2066 * t2279 + t2067 * t2276;
t2144 = -t2275 * t2154 + t2210;
t2112 = -t2144 * t2275 + t2145 * t2278;
t2101 = t2112 * t2266 - t2153 * t2269;
t2102 = t2112 * t2269 + t2153 * t2266;
t2300 = t2101 * t2279 + t2102 * t2276;
t2172 = (qJD(5) + t2255) * t2234 + t2305;
t2133 = t2172 * t2275 + t2337;
t2114 = t2133 * t2266 - t2339;
t2116 = t2133 * t2269 + t2340;
t2296 = t2114 * t2279 + t2116 * t2276;
t2171 = t2234 * t2255 - t2286;
t2139 = t2171 * t2275 + t2337;
t2118 = t2139 * t2266 - t2339;
t2120 = t2139 * t2269 + t2340;
t2294 = t2118 * t2279 + t2120 * t2276;
t2121 = t2157 * t2269 + t2158 * t2266;
t2122 = -t2157 * t2266 + t2158 * t2269;
t2293 = t2121 * t2279 + t2122 * t2276;
t2254 = t2275 * t2280 * t2278;
t2247 = qJDD(4) + t2254;
t2252 = -t2262 * t2280 - t2321;
t2213 = -t2247 * t2275 + t2252 * t2278;
t2238 = -0.2e1 * t2258 + t2307;
t2181 = t2213 * t2266 + t2238 * t2269;
t2183 = t2213 * t2269 - t2238 * t2266;
t2292 = t2181 * t2279 + t2183 * t2276;
t2248 = -qJDD(4) + t2254;
t2251 = -t2261 * t2280 - t2321;
t2214 = t2248 * t2278 - t2251 * t2275;
t2236 = 0.2e1 * t2306 + t2308;
t2182 = t2214 * t2266 - t2236 * t2269;
t2184 = t2214 * t2269 + t2236 * t2266;
t2291 = t2182 * t2279 + t2184 * t2276;
t2290 = t2191 * t2279 + t2192 * t2276;
t2241 = t2309 * qJDD(2);
t2244 = t2309 * t2280;
t2204 = t2241 * t2266 + t2244 * t2269;
t2205 = t2241 * t2269 - t2244 * t2266;
t2289 = t2204 * t2279 + t2205 * t2276;
t2239 = qJDD(2) * t2269 - t2266 * t2280;
t2240 = -qJDD(2) * t2266 - t2269 * t2280;
t2288 = t2239 * t2279 + t2240 * t2276;
t2203 = -t2239 * t2276 + t2240 * t2279;
t2287 = qJDD(2) * t2279 - t2276 * t2280;
t2243 = -qJDD(2) * t2276 - t2279 * t2280;
t2225 = t2287 * t2271;
t2224 = t2243 * t2271;
t2223 = t2287 * t2268;
t2222 = t2243 * t2268;
t2212 = t2248 * t2275 + t2251 * t2278;
t2211 = t2247 * t2278 + t2252 * t2275;
t2198 = t2288 * t2271;
t2197 = t2203 * t2271;
t2196 = t2288 * t2268;
t2195 = t2203 * t2268;
t2170 = -t2204 * t2276 + t2205 * t2279;
t2169 = t2289 * t2271;
t2168 = t2289 * t2268;
t2159 = -t2191 * t2276 + t2192 * t2279;
t2156 = -t2182 * t2276 + t2184 * t2279;
t2155 = -t2181 * t2276 + t2183 * t2279;
t2151 = -t2268 * t2217 + t2271 * t2290;
t2150 = t2271 * t2217 + t2268 * t2290;
t2143 = -t2268 * t2212 + t2271 * t2291;
t2142 = -t2268 * t2211 + t2271 * t2292;
t2141 = t2271 * t2212 + t2268 * t2291;
t2140 = t2271 * t2211 + t2268 * t2292;
t2137 = -t2171 * t2278 + t2338;
t2131 = -t2172 * t2278 + t2338;
t2111 = t2144 * t2278 + t2145 * t2275;
t2099 = -t2121 * t2276 + t2122 * t2279;
t2098 = -t2268 * t2215 + t2271 * t2293;
t2097 = t2271 * t2215 + t2268 * t2293;
t2096 = -t2118 * t2276 + t2120 * t2279;
t2094 = -t2114 * t2276 + t2116 * t2279;
t2090 = -t2268 * t2137 + t2271 * t2294;
t2088 = t2271 * t2137 + t2268 * t2294;
t2084 = -t2268 * t2131 + t2271 * t2296;
t2082 = t2271 * t2131 + t2268 * t2296;
t2078 = -t2101 * t2276 + t2102 * t2279;
t2076 = t2086 * t2275 - t2128 * t2278;
t2071 = -t2268 * t2111 + t2271 * t2300;
t2070 = t2271 * t2111 + t2268 * t2300;
t2068 = t2080 * t2275 - t2110 * t2278;
t2063 = -t2066 * t2276 + t2067 * t2279;
t2062 = -t2268 * t2076 + t2271 * t2301;
t2061 = t2271 * t2076 + t2268 * t2301;
t2060 = -t2064 * t2276 + t2065 * t2279;
t2059 = -t2268 * t2068 + t2271 * t2302;
t2058 = t2271 * t2068 + t2268 * t2302;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2245 * t2267 + t2246 * t2270, 0, 0, 0, 0, 0, 0, -t2225 * t2267 + t2243 * t2270, -t2224 * t2267 - t2270 * t2287, 0, -t2151 * t2267 + t2159 * t2270, 0, 0, 0, 0, 0, 0, -t2198 * t2267 + t2203 * t2270, -t2197 * t2267 - t2270 * t2288, 0, -t2098 * t2267 + t2099 * t2270, 0, 0, 0, 0, 0, 0, -t2142 * t2267 + t2155 * t2270, -t2143 * t2267 + t2156 * t2270, -t2169 * t2267 + t2170 * t2270, -t2071 * t2267 + t2078 * t2270, 0, 0, 0, 0, 0, 0, -t2084 * t2267 + t2094 * t2270, -t2360, t2356, -t2062 * t2267 + t2063 * t2270, 0, 0, 0, 0, 0, 0, -t2090 * t2267 + t2096 * t2270, t2356, t2360, -t2059 * t2267 + t2060 * t2270; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2245 * t2270 + t2246 * t2267, 0, 0, 0, 0, 0, 0, t2225 * t2270 + t2243 * t2267, t2224 * t2270 - t2267 * t2287, 0, t2151 * t2270 + t2159 * t2267, 0, 0, 0, 0, 0, 0, t2198 * t2270 + t2203 * t2267, t2197 * t2270 - t2267 * t2288, 0, t2098 * t2270 + t2099 * t2267, 0, 0, 0, 0, 0, 0, t2142 * t2270 + t2155 * t2267, t2143 * t2270 + t2156 * t2267, t2169 * t2270 + t2170 * t2267, t2071 * t2270 + t2078 * t2267, 0, 0, 0, 0, 0, 0, t2084 * t2270 + t2094 * t2267, t2359, t2355, t2062 * t2270 + t2063 * t2267, 0, 0, 0, 0, 0, 0, t2090 * t2270 + t2096 * t2267, t2355, -t2359, t2059 * t2270 + t2060 * t2267; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, 0, 0, 0, 0, 0, 0, t2223, t2222, 0, t2150, 0, 0, 0, 0, 0, 0, t2196, t2195, 0, t2097, 0, 0, 0, 0, 0, 0, t2140, t2141, t2168, t2070, 0, 0, 0, 0, 0, 0, t2082, t2087, t2350, t2061, 0, 0, 0, 0, 0, 0, t2088, t2350, -t2087, t2058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2246, 0, 0, 0, 0, 0, 0, t2243, -t2287, 0, t2159, 0, 0, 0, 0, 0, 0, t2203, -t2288, 0, t2099, 0, 0, 0, 0, 0, 0, t2155, t2156, t2170, t2078, 0, 0, 0, 0, 0, 0, t2094, -t2093, t2348, t2063, 0, 0, 0, 0, 0, 0, t2096, t2348, t2093, t2060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2245, 0, 0, 0, 0, 0, 0, t2225, t2224, 0, t2151, 0, 0, 0, 0, 0, 0, t2198, t2197, 0, t2098, 0, 0, 0, 0, 0, 0, t2142, t2143, t2169, t2071, 0, 0, 0, 0, 0, 0, t2084, t2089, t2349, t2062, 0, 0, 0, 0, 0, 0, t2090, t2349, -t2089, t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, 0, 0, 0, 0, 0, 0, t2223, t2222, 0, t2150, 0, 0, 0, 0, 0, 0, t2196, t2195, 0, t2097, 0, 0, 0, 0, 0, 0, t2140, t2141, t2168, t2070, 0, 0, 0, 0, 0, 0, t2082, t2087, t2350, t2061, 0, 0, 0, 0, 0, 0, t2088, t2350, -t2087, t2058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2280, -qJDD(2), 0, t2192, 0, 0, 0, 0, 0, 0, t2240, -t2239, 0, t2122, 0, 0, 0, 0, 0, 0, t2183, t2184, t2205, t2102, 0, 0, 0, 0, 0, 0, t2116, t2119, t2341, t2067, 0, 0, 0, 0, 0, 0, t2120, t2341, -t2119, t2065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2280, 0, t2191, 0, 0, 0, 0, 0, 0, t2239, t2240, 0, t2121, 0, 0, 0, 0, 0, 0, t2181, t2182, t2204, t2101, 0, 0, 0, 0, 0, 0, t2114, t2117, t2342, t2066, 0, 0, 0, 0, 0, 0, t2118, t2342, -t2117, t2064; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2217, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215, 0, 0, 0, 0, 0, 0, t2211, t2212, 0, t2111, 0, 0, 0, 0, 0, 0, t2131, t2136, t2335, t2076, 0, 0, 0, 0, 0, 0, t2137, t2335, -t2136, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2280, -qJDD(2), 0, t2158, 0, 0, 0, 0, 0, 0, t2213, t2214, t2241, t2112, 0, 0, 0, 0, 0, 0, t2133, t2138, t2336, t2077, 0, 0, 0, 0, 0, 0, t2139, t2336, -t2138, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2280, 0, t2157, 0, 0, 0, 0, 0, 0, t2238, -t2236, t2244, -t2153, 0, 0, 0, 0, 0, 0, -t2329, -t2164, -t2323, -t2085, 0, 0, 0, 0, 0, 0, -t2329, -t2323, t2164, -t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215, 0, 0, 0, 0, 0, 0, t2211, t2212, 0, t2111, 0, 0, 0, 0, 0, 0, t2131, t2136, t2335, t2076, 0, 0, 0, 0, 0, 0, t2137, t2335, -t2136, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2252, t2248, t2307, t2145, 0, 0, 0, 0, 0, 0, t2328, t2166, t2322, t2086, 0, 0, 0, 0, 0, 0, t2328, t2322, -t2166, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2247, t2251, -t2308, t2144, 0, 0, 0, 0, 0, 0, -t2172, -t2283, t2187, -t2128, 0, 0, 0, 0, 0, 0, -t2171, t2187, t2283, -t2110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2238, t2236, -t2244, t2153, 0, 0, 0, 0, 0, 0, t2329, t2164, t2323, t2085, 0, 0, 0, 0, 0, 0, t2329, t2323, -t2164, t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2324, t2188, t2285, t2105, 0, 0, 0, 0, 0, 0, t2324, t2285, -t2188, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2189, t2325, -t2177, t2104, 0, 0, 0, 0, 0, 0, -t2189, -t2177, -t2325, -t2103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2172, t2283, -t2187, t2128, 0, 0, 0, 0, 0, 0, t2171, -t2187, -t2283, t2110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2324, t2285, -t2188, t2100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2171, -t2187, -t2283, t2110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2189, t2177, t2325, t2103;];
f_new_reg  = t1;
