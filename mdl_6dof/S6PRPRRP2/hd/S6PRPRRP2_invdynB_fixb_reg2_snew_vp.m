% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:40
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:38:24
% EndTime: 2019-05-04 23:39:13
% DurationCPUTime: 44.92s
% Computational Cost: add. (92298->787), mult. (172900->1206), div. (0->0), fcn. (125629->12), ass. (0->580)
t850 = cos(qJ(4));
t946 = qJD(2) * t850;
t822 = -qJD(5) + t946;
t991 = t822 ^ 2;
t846 = sin(qJ(5));
t849 = cos(qJ(5));
t847 = sin(qJ(4));
t947 = qJD(2) * t847;
t794 = -t849 * qJD(4) + t846 * t947;
t992 = t794 ^ 2;
t770 = t992 - t991;
t942 = qJD(2) * qJD(4);
t826 = t847 * t942;
t939 = qJDD(2) * t850;
t800 = -t826 + t939;
t791 = -qJDD(5) + t800;
t796 = qJD(4) * t846 + t849 * t947;
t962 = t794 * t796;
t856 = t791 - t962;
t969 = t856 * t846;
t656 = t770 * t849 + t969;
t932 = t850 * t942;
t940 = qJDD(2) * t847;
t799 = t932 + t940;
t928 = -t849 * qJDD(4) + t846 * t799;
t677 = (qJD(5) + t822) * t796 + t928;
t576 = t656 * t847 + t677 * t850;
t840 = sin(pkin(6));
t843 = cos(pkin(6));
t580 = t656 * t850 - t677 * t847;
t968 = t856 * t849;
t653 = t770 * t846 - t968;
t838 = sin(pkin(11));
t841 = cos(pkin(11));
t523 = t580 * t838 - t653 * t841;
t527 = t580 * t841 + t653 * t838;
t848 = sin(qJ(2));
t851 = cos(qJ(2));
t898 = t523 * t851 + t527 * t848;
t435 = -t840 * t576 + t843 * t898;
t456 = t523 * t848 - t527 * t851;
t839 = sin(pkin(10));
t842 = cos(pkin(10));
t1150 = t435 * t839 + t456 * t842;
t1149 = t435 * t842 - t456 * t839;
t944 = qJD(5) - t822;
t676 = t796 * t944 + t928;
t876 = -t846 * qJDD(4) - t849 * t799;
t855 = qJD(5) * t794 + t876;
t961 = t794 * t822;
t1002 = t961 - t855;
t972 = t1002 * t846;
t598 = t676 * t849 + t972;
t790 = t796 ^ 2;
t748 = t790 - t992;
t553 = t598 * t847 + t748 * t850;
t555 = t598 * t850 - t748 * t847;
t594 = t1002 * t849 - t676 * t846;
t490 = t555 * t838 + t594 * t841;
t492 = t555 * t841 - t594 * t838;
t906 = t490 * t851 + t492 * t848;
t414 = -t840 * t553 + t843 * t906;
t432 = t490 * t848 - t492 * t851;
t1148 = t414 * t839 + t432 * t842;
t1147 = t414 * t842 - t432 * t839;
t1144 = t843 * t576 + t840 * t898;
t1141 = t843 * t553 + t840 * t906;
t1001 = t961 + t855;
t1051 = t1001 * t849 - t677 * t846;
t1003 = t790 + t992;
t1050 = -t1001 * t846 - t677 * t849;
t1075 = -t1003 * t847 + t1050 * t850;
t1092 = t1051 * t838 + t1075 * t841;
t1093 = -t1051 * t841 + t1075 * t838;
t1115 = t1092 * t851 - t1093 * t848;
t1076 = t1003 * t850 + t1050 * t847;
t1114 = t1092 * t848 + t1093 * t851;
t1127 = -t1076 * t840 + t1114 * t843;
t1135 = t1115 * t839 + t1127 * t842;
t1140 = qJ(1) * t1135;
t1136 = t1115 * t842 - t1127 * t839;
t1139 = qJ(1) * t1136;
t1138 = pkin(1) * t1127;
t1128 = t1076 * t843 + t1114 * t840;
t1137 = pkin(1) * t1128;
t1134 = (-t1127 * t843 - t1128 * t840) * pkin(7);
t1133 = pkin(7) * t1115;
t771 = -t790 + t991;
t857 = -t791 - t962;
t967 = t857 * t846;
t1033 = -t771 * t849 - t967;
t966 = t857 * t849;
t1032 = -t771 * t846 + t966;
t1046 = -t1001 * t847 + t1032 * t850;
t1069 = -t1033 * t838 + t1046 * t841;
t1070 = t1033 * t841 + t1046 * t838;
t1091 = t1069 * t851 - t1070 * t848;
t1047 = t1001 * t850 + t1032 * t847;
t1090 = t1069 * t848 + t1070 * t851;
t1116 = -t1047 * t840 + t1090 * t843;
t1126 = t1091 * t842 - t1116 * t839;
t1125 = t1091 * t839 + t1116 * t842;
t1122 = qJ(3) * t1093;
t1119 = pkin(2) * t1093 + pkin(8) * t1075;
t1118 = -pkin(2) * t1076 + qJ(3) * t1092;
t1117 = t1047 * t843 + t1090 * t840;
t735 = t991 + t790;
t632 = t735 * t849 - t969;
t1113 = pkin(3) * t632;
t1112 = pkin(4) * t632;
t1111 = pkin(9) * t632;
t642 = t735 * t846 + t968;
t1110 = pkin(9) * t642;
t1107 = pkin(8) * t1076;
t1106 = t632 * t838;
t1105 = t632 * t841;
t1104 = t642 * t847;
t1103 = t642 * t850;
t1098 = -pkin(3) * t1076 - pkin(4) * t1003 - pkin(9) * t1050;
t724 = -qJD(5) * t796 - t928;
t956 = t822 * t846;
t936 = t794 * t956;
t874 = -t724 * t849 + t936;
t955 = t822 * t849;
t935 = t794 * t955;
t875 = -t724 * t846 - t935;
t938 = t847 * t962;
t994 = t850 * t875 - t938;
t1020 = -t838 * t874 + t841 * t994;
t1022 = t838 * t994 + t841 * t874;
t1045 = t1020 * t851 - t1022 * t848;
t1044 = t1020 * t848 + t1022 * t851;
t937 = t850 * t962;
t995 = t847 * t875 + t937;
t1071 = t1044 * t843 - t840 * t995;
t1097 = t1045 * t842 - t1071 * t839;
t1096 = t1045 * t839 + t1071 * t842;
t764 = t796 * t955;
t918 = -t764 - t936;
t763 = t796 * t956;
t919 = -t763 + t935;
t993 = -t791 * t847 + t850 * t919;
t1021 = -t838 * t918 + t841 * t993;
t1023 = t838 * t993 + t841 * t918;
t1043 = t1021 * t851 - t1023 * t848;
t1042 = t1021 * t848 + t1023 * t851;
t997 = t850 * t791 + t847 * t919;
t1072 = t1042 * t843 - t840 * t997;
t1095 = t1043 * t842 - t1072 * t839;
t1094 = t1043 * t839 + t1072 * t842;
t1089 = pkin(9) * t1051;
t1086 = qJ(6) * t1002;
t1074 = t1042 * t840 + t843 * t997;
t1073 = t1044 * t840 + t843 * t995;
t672 = t846 * t855 + t764;
t673 = -t849 * t855 + t763;
t920 = t850 * t673 + t938;
t996 = -t672 * t838 + t841 * t920;
t998 = t841 * t672 + t838 * t920;
t1019 = -t848 * t998 + t851 * t996;
t1018 = t848 * t996 + t851 * t998;
t921 = t847 * t673 - t937;
t1048 = t1018 * t843 - t840 * t921;
t1068 = t1019 * t842 - t1048 * t839;
t1067 = t1019 * t839 + t1048 * t842;
t1000 = -t991 - t992;
t1027 = t1000 * t846 + t966;
t1066 = pkin(3) * t1027;
t1065 = pkin(4) * t1027;
t1026 = t1000 * t849 - t967;
t1064 = pkin(9) * t1026;
t1063 = pkin(9) * t1027;
t1058 = t1026 * t847;
t1057 = t1026 * t850;
t1056 = t1027 * t838;
t1055 = t1027 * t841;
t809 = g(1) * t839 - t842 * g(2);
t950 = g(3) - qJDD(1);
t1034 = -t843 * t809 + t840 * t950;
t810 = g(1) * t842 + g(2) * t839;
t713 = -t1034 * t848 - t851 * t810;
t852 = qJD(2) ^ 2;
t700 = -t852 * pkin(2) + t713;
t712 = t1034 * t851 - t810 * t848;
t872 = qJDD(2) * pkin(2) - t712;
t627 = t838 * t700 - t841 * t872;
t628 = t841 * t700 + t838 * t872;
t929 = t627 * t838 + t841 * t628;
t531 = t627 * t841 - t628 * t838;
t982 = t531 * t851;
t895 = t848 * t929 - t982;
t983 = t531 * t848;
t1052 = t851 * t929 + t983;
t1049 = t1018 * t840 + t843 * t921;
t1041 = -2 * qJD(6);
t615 = -pkin(3) * t852 + qJDD(2) * pkin(8) + t628;
t774 = t809 * t840 + t843 * t950;
t765 = -qJDD(3) + t774;
t752 = t850 * t765;
t987 = pkin(4) * t850;
t922 = -pkin(9) * t847 - t987;
t797 = t922 * qJD(2);
t990 = qJD(4) ^ 2;
t557 = (qJD(2) * t797 + t615) * t847 - qJDD(4) * pkin(4) - t990 * pkin(9) + t752;
t1035 = -t724 * pkin(5) - t1086 + t557;
t802 = qJDD(2) * t838 + t841 * t852;
t706 = qJ(3) * t802 - t765 * t841;
t803 = qJDD(2) * t841 - t838 * t852;
t912 = -qJ(3) * t803 - t765 * t838;
t1025 = t706 * t848 + t851 * t912;
t1024 = t851 * t706 - t848 * t912;
t878 = t802 * t851 + t803 * t848;
t1004 = t878 * t843;
t740 = t802 * t848 - t803 * t851;
t1017 = t1004 * t842 - t740 * t839;
t646 = t1004 * t839 + t740 * t842;
t1014 = t839 * t950;
t1010 = t842 * t950;
t725 = t878 * t840;
t589 = t850 * t615 - t847 * t765;
t558 = -pkin(4) * t990 + qJDD(4) * pkin(9) + t797 * t946 + t589;
t614 = -qJDD(2) * pkin(3) - t852 * pkin(8) + t627;
t914 = -t800 + t826;
t915 = t799 + t932;
t568 = pkin(4) * t914 - pkin(9) * t915 + t614;
t484 = t849 * t558 + t846 * t568;
t738 = pkin(5) * t794 - qJ(6) * t796;
t913 = -t791 * qJ(6) + t1041 * t822 - t794 * t738 + t484;
t989 = pkin(2) * t531;
t988 = pkin(4) * t847;
t986 = pkin(5) * t849;
t631 = t712 * t848 + t713 * t851;
t985 = pkin(7) * t631;
t984 = qJ(6) * t849;
t981 = t557 * t846;
t980 = t557 * t849;
t979 = t614 * t847;
t978 = t614 * t850;
t960 = t796 * t822;
t821 = t847 * t852 * t850;
t811 = qJDD(4) + t821;
t959 = t811 * t847;
t812 = qJDD(4) - t821;
t958 = t812 * t847;
t957 = t812 * t850;
t834 = t847 ^ 2;
t954 = t834 * t852;
t952 = t848 * t774;
t951 = t851 * t774;
t483 = t846 * t558 - t849 * t568;
t949 = t1003 - t991;
t835 = t850 ^ 2;
t948 = t834 + t835;
t941 = qJDD(2) * t840;
t933 = t842 * t941;
t931 = qJ(6) * t846 + pkin(4);
t588 = t847 * t615 + t752;
t498 = t588 * t847 + t850 * t589;
t747 = -t809 * t839 - t842 * t810;
t926 = t838 * t821;
t925 = t841 * t821;
t923 = t796 * t738 + qJDD(6) + t483;
t805 = qJDD(2) * t851 - t848 * t852;
t917 = -pkin(7) * t805 - t952;
t877 = qJDD(2) * t848 + t851 * t852;
t916 = -pkin(7) * t877 + t951;
t464 = -pkin(5) * t991 + t913;
t873 = t791 * pkin(5) + t923;
t467 = qJ(6) * t991 - t873;
t412 = t464 * t849 - t467 * t846;
t489 = (-pkin(5) * t822 + t1041) * t796 + t1035;
t390 = t412 * t850 + t489 * t847;
t411 = t464 * t846 + t467 * t849;
t348 = t390 * t838 - t411 * t841;
t349 = t390 * t841 + t411 * t838;
t911 = t348 * t851 + t349 * t848;
t424 = t483 * t846 + t484 * t849;
t407 = t424 * t850 + t557 * t847;
t423 = -t483 * t849 + t484 * t846;
t363 = t407 * t838 - t423 * t841;
t364 = t407 * t841 + t423 * t838;
t910 = t363 * t851 + t364 * t848;
t465 = t498 * t838 - t614 * t841;
t466 = t498 * t841 + t614 * t838;
t909 = t465 * t851 + t466 * t848;
t562 = -t1002 * t847 - t1103;
t504 = t562 * t838 - t1105;
t508 = t562 * t841 + t1106;
t904 = t504 * t851 + t508 * t848;
t563 = t676 * t847 + t1057;
t505 = t563 * t838 - t1055;
t509 = t563 * t841 + t1056;
t903 = t505 * t851 + t509 * t848;
t682 = t794 * t944 + t876;
t571 = -t682 * t847 + t1103;
t513 = t571 * t838 + t1105;
t515 = t571 * t841 - t1106;
t902 = t513 * t851 + t515 * t848;
t675 = -t724 - t960;
t572 = t675 * t847 + t1057;
t514 = t572 * t838 - t1055;
t516 = t572 * t841 + t1056;
t901 = t514 * t851 + t516 * t848;
t497 = t588 * t850 - t589 * t847;
t798 = 0.2e1 * t932 + t940;
t801 = -0.2e1 * t826 + t939;
t737 = -t798 * t847 + t801 * t850;
t832 = t835 * t852;
t808 = t832 - t954;
t685 = t737 * t838 + t808 * t841;
t686 = t737 * t841 - t808 * t838;
t888 = t685 * t851 + t686 * t848;
t819 = -t832 - t990;
t760 = t819 * t850 - t959;
t694 = t760 * t838 + t801 * t841;
t696 = t760 * t841 - t801 * t838;
t887 = t694 * t851 + t696 * t848;
t817 = -t954 - t990;
t762 = -t817 * t847 - t957;
t695 = t762 * t838 - t798 * t841;
t697 = t762 * t841 + t798 * t838;
t886 = t695 * t851 + t697 * t848;
t630 = t712 * t851 - t713 * t848;
t818 = t832 - t990;
t759 = t818 * t850 - t958;
t716 = t759 * t838 - t841 * t939;
t718 = t759 * t841 + t838 * t939;
t885 = t716 * t851 + t718 * t848;
t793 = t850 * t811;
t816 = -t954 + t990;
t761 = -t816 * t847 + t793;
t717 = t761 * t838 - t841 * t940;
t719 = t761 * t841 + t838 * t940;
t884 = t717 * t851 + t719 * t848;
t768 = -t800 * t847 - t835 * t942;
t720 = t768 * t838 - t925;
t722 = t768 * t841 + t926;
t883 = t720 * t851 + t722 * t848;
t769 = t799 * t850 - t834 * t942;
t721 = t769 * t838 + t925;
t723 = t769 * t841 - t926;
t882 = t721 * t851 + t723 * t848;
t804 = t948 * qJDD(2);
t807 = t832 + t954;
t742 = t804 * t838 + t807 * t841;
t743 = t804 * t841 - t807 * t838;
t881 = t742 * t851 + t743 * t848;
t792 = t948 * t942;
t766 = -qJDD(4) * t841 + t792 * t838;
t767 = qJDD(4) * t838 + t792 * t841;
t880 = t766 * t851 + t767 * t848;
t781 = t877 * t843;
t879 = t781 * t842 + t805 * t839;
t732 = t781 * t839 - t805 * t842;
t746 = t809 * t842 - t810 * t839;
t356 = -pkin(4) * t411 - pkin(5) * t467 - qJ(6) * t464;
t370 = -pkin(9) * t411 + (pkin(5) * t846 - t984) * t489;
t389 = t412 * t847 - t489 * t850;
t333 = -pkin(8) * t389 - t356 * t847 + t370 * t850;
t340 = -pkin(3) * t389 - pkin(9) * t412 + (t931 + t986) * t489;
t307 = -pkin(2) * t389 + qJ(3) * t349 + t333 * t838 + t340 * t841;
t309 = -qJ(3) * t348 + t333 * t841 - t340 * t838;
t334 = -t348 * t848 + t349 * t851;
t871 = pkin(7) * t334 + t307 * t851 + t309 * t848;
t406 = t424 * t847 - t557 * t850;
t347 = -pkin(8) * t406 + (-pkin(9) * t850 + t988) * t423;
t355 = -pkin(3) * t406 + pkin(4) * t557 - pkin(9) * t424;
t320 = -pkin(2) * t406 + qJ(3) * t364 + t347 * t838 + t355 * t841;
t325 = -qJ(3) * t363 + t347 * t841 - t355 * t838;
t339 = -t363 * t848 + t364 * t851;
t870 = pkin(7) * t339 + t320 * t851 + t325 * t848;
t457 = pkin(5) * t949 + t913;
t458 = qJ(6) * t949 + t873;
t396 = -t457 * t846 + t458 * t849 - t1089;
t503 = -pkin(4) * t1051 - pkin(5) * t1001 + qJ(6) * t677;
t369 = t396 * t850 - t503 * t847 - t1107;
t374 = -t457 * t849 - t458 * t846 + t1098;
t337 = t369 * t838 + t374 * t841 + t1118;
t338 = t369 * t841 - t374 * t838 - t1122;
t869 = t337 * t851 + t338 * t848 + t1133;
t416 = -t423 - t1089;
t393 = t1051 * t988 + t416 * t850 - t1107;
t397 = t1098 - t424;
t341 = t393 * t838 + t397 * t841 + t1118;
t342 = t393 * t841 - t397 * t838 - t1122;
t868 = t341 * t851 + t342 * t848 + t1133;
t437 = -t1112 + qJ(6) * t856 + (-t735 + t991) * pkin(5) - t913;
t853 = 0.2e1 * qJD(6) * t796 - t1035;
t470 = pkin(5) * t960 + t1086 + t853;
t439 = -pkin(5) * t972 + t470 * t849 - t1111;
t560 = t1002 * t850 - t1104;
t373 = -pkin(8) * t560 - t437 * t847 + t439 * t850;
t417 = -pkin(3) * t560 + t1110 - t846 * t470 + (-pkin(4) - t986) * t1002;
t343 = -pkin(2) * t560 + qJ(3) * t508 + t373 * t838 + t417 * t841;
t345 = -qJ(3) * t504 + t373 * t841 - t417 * t838;
t441 = -t504 * t848 + t508 * t851;
t867 = pkin(7) * t441 + t343 * t851 + t345 * t848;
t438 = -t1065 + (-t1000 - t991) * qJ(6) + (-t857 + t791) * pkin(5) + t923;
t471 = (-t675 + t960) * pkin(5) + t853;
t440 = -t471 * t846 - t675 * t984 - t1063;
t570 = -t675 * t850 + t1058;
t375 = -pkin(8) * t570 - t438 * t847 + t440 * t850;
t418 = -pkin(3) * t570 - t849 * t471 + t675 * t931 - t1064;
t344 = -pkin(2) * t570 + qJ(3) * t516 + t375 * t838 + t418 * t841;
t346 = -qJ(3) * t514 + t375 * t841 - t418 * t838;
t444 = -t514 * t848 + t516 * t851;
t866 = pkin(7) * t444 + t344 * t851 + t346 * t848;
t462 = t483 - t1065;
t502 = t981 - t1063;
t561 = -t676 * t850 + t1058;
t401 = -pkin(8) * t561 - t462 * t847 + t502 * t850;
t449 = -pkin(3) * t561 + pkin(4) * t676 - t1064 + t980;
t353 = -pkin(2) * t561 + qJ(3) * t509 + t401 * t838 + t449 * t841;
t358 = -qJ(3) * t505 + t401 * t841 - t449 * t838;
t442 = -t505 * t848 + t509 * t851;
t865 = pkin(7) * t442 + t353 * t851 + t358 * t848;
t463 = t484 + t1112;
t512 = t980 + t1111;
t569 = t682 * t850 + t1104;
t409 = -pkin(8) * t569 - t463 * t847 + t512 * t850;
t450 = -pkin(3) * t569 - pkin(4) * t682 - t1110 - t981;
t354 = -pkin(2) * t569 + qJ(3) * t515 + t409 * t838 + t450 * t841;
t362 = -qJ(3) * t513 + t409 * t841 - t450 * t838;
t443 = -t513 * t848 + t515 * t851;
t864 = pkin(7) * t443 + t354 * t851 + t362 * t848;
t372 = qJ(3) * t466 - (-pkin(3) * t841 - pkin(8) * t838 - pkin(2)) * t497;
t398 = -qJ(3) * t465 - (pkin(3) * t838 - pkin(8) * t841) * t497;
t410 = -t465 * t848 + t466 * t851;
t863 = pkin(7) * t410 + t372 * t851 + t398 * t848;
t756 = t819 * t847 + t793;
t549 = -pkin(3) * t756 + t588;
t586 = -pkin(8) * t756 + t979;
t468 = -pkin(2) * t756 + qJ(3) * t696 + t549 * t841 + t586 * t838;
t476 = -qJ(3) * t694 - t549 * t838 + t586 * t841;
t617 = -t694 * t848 + t696 * t851;
t862 = pkin(7) * t617 + t468 * t851 + t476 * t848;
t758 = t817 * t850 - t958;
t550 = -pkin(3) * t758 + t589;
t587 = -pkin(8) * t758 + t978;
t469 = -pkin(2) * t758 + qJ(3) * t697 + t550 * t841 + t587 * t838;
t477 = -qJ(3) * t695 - t550 * t838 + t587 * t841;
t618 = -t695 * t848 + t697 * t851;
t861 = pkin(7) * t618 + t469 * t851 + t477 * t848;
t481 = qJ(3) * t743 + t497 * t838;
t482 = -qJ(3) * t742 + t497 * t841;
t667 = -t742 * t848 + t743 * t851;
t860 = pkin(7) * t667 + t481 * t851 + t482 * t848;
t859 = -pkin(7) * t878 - t1024;
t858 = pkin(7) * t740 + t1025;
t517 = pkin(2) * t765 + qJ(3) * t929;
t854 = pkin(7) * t1052 + qJ(3) * t983 + t517 * t851;
t827 = t843 * qJDD(2);
t815 = t839 * t941;
t782 = t805 * t843;
t780 = t805 * t840;
t779 = t877 * t840;
t757 = t816 * t850 + t959;
t755 = t818 * t847 + t957;
t754 = t915 * t847;
t753 = t914 * t850;
t736 = t798 * t850 + t801 * t847;
t733 = -t782 * t839 - t842 * t877;
t731 = t782 * t842 - t839 * t877;
t729 = t740 * t843;
t726 = t740 * t840;
t684 = -t766 * t848 + t767 * t851;
t674 = t880 * t843;
t663 = -t951 + (t779 * t840 + t781 * t843) * pkin(7);
t662 = -t952 + (-t780 * t840 - t782 * t843) * pkin(7);
t649 = t881 * t843;
t648 = t881 * t840;
t647 = t729 * t839 - t842 * t878;
t645 = -t729 * t842 - t839 * t878;
t639 = -t721 * t848 + t723 * t851;
t638 = -t720 * t848 + t722 * t851;
t637 = -t717 * t848 + t719 * t851;
t636 = -t716 * t848 + t718 * t851;
t629 = t631 * t843;
t612 = -pkin(1) * t780 + t840 * t712 + t843 * t916;
t611 = pkin(1) * t779 + t840 * t713 + t843 * t917;
t610 = -t685 * t848 + t686 * t851;
t609 = -pkin(2) * t802 - t628;
t608 = pkin(2) * t803 - t627;
t607 = -t840 * t754 + t843 * t882;
t606 = t840 * t753 + t843 * t883;
t605 = -t840 * t757 + t843 * t884;
t604 = -t840 * t755 + t843 * t885;
t603 = -t630 * t843 + t840 * t774;
t602 = -t630 * t840 - t843 * t774;
t585 = -t840 * t758 + t843 * t886;
t584 = -t840 * t756 + t843 * t887;
t583 = t843 * t758 + t840 * t886;
t582 = t843 * t756 + t840 * t887;
t565 = -t649 * t839 + t667 * t842;
t564 = t649 * t842 + t667 * t839;
t559 = -t840 * t736 + t843 * t888;
t536 = (t1004 * t843 + t725 * t840) * pkin(7) + t1024;
t535 = (t726 * t840 + t729 * t843) * pkin(7) + t1025;
t534 = pkin(2) * t694 + pkin(3) * t801 + pkin(8) * t760 - t978;
t533 = pkin(2) * t695 - pkin(3) * t798 + pkin(8) * t762 + t979;
t520 = -pkin(1) * t602 + t843 * t985;
t519 = -t603 * t839 + t631 * t842;
t518 = t603 * t842 + t631 * t839;
t511 = -t585 * t839 + t618 * t842;
t510 = -t584 * t839 + t617 * t842;
t507 = t585 * t842 + t618 * t839;
t506 = t584 * t842 + t617 * t839;
t501 = (-t602 * t840 - t603 * t843) * pkin(7);
t495 = pkin(1) * t725 - t840 * t609 + t843 * t858;
t494 = pkin(1) * t726 - t840 * t608 + t843 * t859;
t480 = pkin(2) * t742 + pkin(3) * t807 + pkin(8) * t804 + t498;
t459 = t1052 * t843;
t452 = t840 * t765 + t843 * t895;
t451 = -t843 * t765 + t840 * t895;
t428 = -t840 * t570 + t843 * t901;
t427 = -t840 * t569 + t843 * t902;
t426 = t843 * t570 + t840 * t901;
t425 = t843 * t569 + t840 * t902;
t422 = -t840 * t561 + t843 * t903;
t421 = -t840 * t560 + t843 * t904;
t420 = t843 * t561 + t840 * t903;
t419 = t843 * t560 + t840 * t904;
t413 = pkin(2) * t465 - pkin(3) * t614 + pkin(8) * t498;
t408 = -t848 * t481 + t851 * t482 + (-t648 * t840 - t649 * t843) * pkin(7);
t400 = t1052 * t842 - t452 * t839;
t399 = t1052 * t839 + t452 * t842;
t395 = -t848 * t469 + t851 * t477 + (-t583 * t840 - t585 * t843) * pkin(7);
t394 = -t848 * t468 + t851 * t476 + (-t582 * t840 - t584 * t843) * pkin(7);
t392 = t497 * t840 + t843 * t909;
t391 = -t497 * t843 + t840 * t909;
t388 = pkin(2) * t513 + pkin(8) * t571 + t463 * t850 + t512 * t847 + t1113;
t387 = -t428 * t839 + t444 * t842;
t386 = -t427 * t839 + t443 * t842;
t385 = t428 * t842 + t444 * t839;
t384 = t427 * t842 + t443 * t839;
t383 = -pkin(1) * t648 - t840 * t480 + t843 * t860;
t382 = pkin(2) * t505 + pkin(8) * t563 + t462 * t850 + t502 * t847 - t1066;
t381 = -t422 * t839 + t442 * t842;
t380 = -t421 * t839 + t441 * t842;
t379 = t422 * t842 + t442 * t839;
t378 = t421 * t842 + t441 * t839;
t377 = -pkin(1) * t583 - t840 * t533 + t843 * t861;
t376 = -pkin(1) * t582 - t840 * t534 + t843 * t862;
t371 = qJ(3) * t982 - t848 * t517 + (-t451 * t840 - t452 * t843) * pkin(7);
t361 = t847 * t416 + (-pkin(3) - t987) * t1051 + t1119;
t360 = pkin(2) * t514 + pkin(8) * t572 + t438 * t850 + t440 * t847 - t1066;
t359 = -pkin(1) * t451 + t840 * t989 + t843 * t854;
t357 = pkin(2) * t504 + pkin(8) * t562 + t437 * t850 + t439 * t847 - t1113;
t352 = -pkin(3) * t1051 + t396 * t847 + t503 * t850 + t1119;
t351 = -t392 * t839 + t410 * t842;
t350 = t392 * t842 + t410 * t839;
t336 = -t840 * t406 + t843 * t910;
t335 = t843 * t406 + t840 * t910;
t332 = pkin(2) * t363 + pkin(8) * t407 + (-pkin(3) + t922) * t423;
t331 = -t848 * t372 + t851 * t398 + (-t391 * t840 - t392 * t843) * pkin(7);
t330 = -t848 * t354 + t851 * t362 + (-t425 * t840 - t427 * t843) * pkin(7);
t329 = -t848 * t353 + t851 * t358 + (-t420 * t840 - t422 * t843) * pkin(7);
t328 = -pkin(1) * t391 - t840 * t413 + t843 * t863;
t327 = -t840 * t389 + t843 * t911;
t326 = t843 * t389 + t840 * t911;
t324 = -pkin(1) * t425 - t840 * t388 + t843 * t864;
t323 = -pkin(1) * t420 - t840 * t382 + t843 * t865;
t322 = -t848 * t344 + t851 * t346 + (-t426 * t840 - t428 * t843) * pkin(7);
t321 = -t848 * t343 + t851 * t345 + (-t419 * t840 - t421 * t843) * pkin(7);
t319 = -t848 * t341 + t851 * t342 + t1134;
t318 = -t336 * t839 + t339 * t842;
t317 = t336 * t842 + t339 * t839;
t316 = pkin(2) * t348 - pkin(3) * t411 + pkin(8) * t390 + t356 * t850 + t370 * t847;
t315 = -pkin(1) * t426 - t840 * t360 + t843 * t866;
t314 = -pkin(1) * t419 - t840 * t357 + t843 * t867;
t313 = -t848 * t337 + t851 * t338 + t1134;
t312 = -t840 * t361 + t843 * t868 - t1137;
t311 = -t327 * t839 + t334 * t842;
t310 = t327 * t842 + t334 * t839;
t308 = -t840 * t352 + t843 * t869 - t1137;
t306 = -t848 * t320 + t851 * t325 + (-t335 * t840 - t336 * t843) * pkin(7);
t305 = -pkin(1) * t335 - t840 * t332 + t843 * t870;
t304 = -t848 * t307 + t851 * t309 + (-t326 * t840 - t327 * t843) * pkin(7);
t303 = -pkin(1) * t326 - t840 * t316 + t843 * t871;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t747, 0, 0, 0, 0, 0, 0, t733, t732, 0, t519, 0, 0, 0, 0, 0, 0, t647, t646, 0, t400, 0, 0, 0, 0, 0, 0, t510, t511, t565, t351, 0, 0, 0, 0, 0, 0, t381, t386, t1136, t318, 0, 0, 0, 0, 0, 0, t387, t1136, t380, t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t746, 0, 0, 0, 0, 0, 0, t731, -t879, 0, t518, 0, 0, 0, 0, 0, 0, t645, -t1017, 0, t399, 0, 0, 0, 0, 0, 0, t506, t507, t564, t350, 0, 0, 0, 0, 0, 0, t379, t384, t1135, t317, 0, 0, 0, 0, 0, 0, t385, t1135, t378, t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t950, 0, 0, 0, 0, 0, 0, t780, -t779, 0, t602, 0, 0, 0, 0, 0, 0, -t726, -t725, 0, t451, 0, 0, 0, 0, 0, 0, t582, t583, t648, t391, 0, 0, 0, 0, 0, 0, t420, t425, t1128, t335, 0, 0, 0, 0, 0, 0, t426, t1128, t419, t326; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1014, -t1010, -t746, -qJ(1) * t746, 0, 0, -t732, 0, t733, t815, -qJ(1) * t731 - t612 * t839 + t662 * t842, qJ(1) * t879 - t611 * t839 + t663 * t842, -t629 * t839 + t630 * t842, -qJ(1) * t518 + t501 * t842 - t520 * t839, 0, 0, -t646, 0, t647, t815, -qJ(1) * t645 - t494 * t839 + t535 * t842, qJ(1) * t1017 - t495 * t839 + t536 * t842, -t459 * t839 - t842 * t895, -qJ(1) * t399 - t359 * t839 + t371 * t842, -t607 * t839 + t639 * t842, -t559 * t839 + t610 * t842, -t605 * t839 + t637 * t842, -t606 * t839 + t638 * t842, -t604 * t839 + t636 * t842, -t674 * t839 + t684 * t842, -qJ(1) * t506 - t376 * t839 + t394 * t842, -qJ(1) * t507 - t377 * t839 + t395 * t842, -qJ(1) * t564 - t383 * t839 + t408 * t842, -qJ(1) * t350 - t328 * t839 + t331 * t842, t1068, t1148, t1126, t1097, -t1150, t1095, -qJ(1) * t379 - t323 * t839 + t329 * t842, -qJ(1) * t384 - t324 * t839 + t330 * t842, -t312 * t839 + t319 * t842 - t1140, -qJ(1) * t317 - t305 * t839 + t306 * t842, t1068, t1126, -t1148, t1095, t1150, t1097, -qJ(1) * t385 - t315 * t839 + t322 * t842, -t308 * t839 + t313 * t842 - t1140, -qJ(1) * t378 - t314 * t839 + t321 * t842, -qJ(1) * t310 - t303 * t839 + t304 * t842; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1010, -t1014, t747, qJ(1) * t747, 0, 0, t879, 0, t731, -t933, qJ(1) * t733 + t612 * t842 + t662 * t839, qJ(1) * t732 + t611 * t842 + t663 * t839, t629 * t842 + t630 * t839, qJ(1) * t519 + t501 * t839 + t520 * t842, 0, 0, t1017, 0, t645, -t933, qJ(1) * t647 + t494 * t842 + t535 * t839, qJ(1) * t646 + t495 * t842 + t536 * t839, t459 * t842 - t839 * t895, qJ(1) * t400 + t359 * t842 + t371 * t839, t607 * t842 + t639 * t839, t559 * t842 + t610 * t839, t605 * t842 + t637 * t839, t606 * t842 + t638 * t839, t604 * t842 + t636 * t839, t674 * t842 + t684 * t839, qJ(1) * t510 + t376 * t842 + t394 * t839, qJ(1) * t511 + t377 * t842 + t395 * t839, qJ(1) * t565 + t383 * t842 + t408 * t839, qJ(1) * t351 + t328 * t842 + t331 * t839, t1067, -t1147, t1125, t1096, t1149, t1094, qJ(1) * t381 + t323 * t842 + t329 * t839, qJ(1) * t386 + t324 * t842 + t330 * t839, t312 * t842 + t319 * t839 + t1139, qJ(1) * t318 + t305 * t842 + t306 * t839, t1067, t1125, t1147, t1094, -t1149, t1096, qJ(1) * t387 + t315 * t842 + t322 * t839, t308 * t842 + t313 * t839 + t1139, qJ(1) * t380 + t314 * t842 + t321 * t839, qJ(1) * t311 + t303 * t842 + t304 * t839; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t809, t810, 0, 0, 0, 0, t779, 0, t780, t827, pkin(1) * t782 - t843 * t712 + t840 * t916, -pkin(1) * t781 - t843 * t713 + t840 * t917, t631 * t840, pkin(1) * t603 + t840 * t985, 0, 0, t725, 0, -t726, t827, -pkin(1) * t729 + t843 * t608 + t840 * t859, -pkin(1) * t1004 + t843 * t609 + t840 * t858, t1052 * t840, pkin(1) * t452 + t840 * t854 - t843 * t989, t843 * t754 + t840 * t882, t843 * t736 + t840 * t888, t843 * t757 + t840 * t884, -t843 * t753 + t840 * t883, t843 * t755 + t840 * t885, t880 * t840, pkin(1) * t584 + t843 * t534 + t840 * t862, pkin(1) * t585 + t843 * t533 + t840 * t861, pkin(1) * t649 + t843 * t480 + t840 * t860, pkin(1) * t392 + t843 * t413 + t840 * t863, t1049, -t1141, t1117, t1073, t1144, t1074, pkin(1) * t422 + t843 * t382 + t840 * t865, pkin(1) * t427 + t843 * t388 + t840 * t864, t843 * t361 + t840 * t868 + t1138, pkin(1) * t336 + t843 * t332 + t840 * t870, t1049, t1117, t1141, t1074, -t1144, t1073, pkin(1) * t428 + t843 * t360 + t840 * t866, t843 * t352 + t840 * t869 + t1138, pkin(1) * t421 + t843 * t357 + t840 * t867, pkin(1) * t327 + t843 * t316 + t840 * t871;];
tauB_reg  = t1;
