% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:03:12
% EndTime: 2019-03-08 20:03:22
% DurationCPUTime: 5.37s
% Computational Cost: add. (5506->522), mult. (12886->675), div. (0->0), fcn. (10628->12), ass. (0->265)
t198 = sin(pkin(6));
t196 = sin(pkin(11));
t199 = cos(pkin(11));
t204 = sin(qJ(2));
t207 = cos(qJ(2));
t256 = t196 * t207 + t199 * t204;
t134 = t256 * t198;
t124 = qJD(1) * t134;
t203 = sin(qJ(4));
t206 = cos(qJ(4));
t265 = pkin(4) * t203 - pkin(9) * t206;
t159 = t265 * qJD(4);
t372 = t124 - t159;
t202 = sin(qJ(5));
t205 = cos(qJ(5));
t303 = qJD(4) * t202;
t305 = qJD(2) * t203;
t153 = t205 * t305 + t303;
t304 = qJD(2) * t206;
t181 = -qJD(5) + t304;
t330 = t153 * t181;
t297 = t205 * qJD(4);
t151 = t202 * t305 - t297;
t332 = t151 * t181;
t296 = qJD(2) * qJD(4);
t278 = t206 * t296;
t294 = t203 * qJDD(2);
t299 = qJD(5) * t203;
t365 = qJD(2) * t299 - qJDD(4);
t97 = -qJD(5) * t297 + (-t278 - t294) * t205 + t365 * t202;
t98 = (qJD(4) * (qJD(5) + t304) + t294) * t202 + t365 * t205;
t371 = (t98 - t330) * t202 + (t97 - t332) * t205;
t368 = t98 + t330;
t306 = qJD(2) * t198;
t279 = qJD(1) * t306;
t295 = qJDD(1) * t198;
t367 = t204 * t295 + t207 * t279;
t366 = pkin(4) * t206 + pkin(9) * t203;
t308 = qJD(1) * t198;
t288 = t204 * t308;
t167 = t196 * t288;
t287 = t207 * t308;
t127 = t199 * t287 - t167;
t255 = -pkin(3) - t366;
t356 = pkin(2) * t199;
t146 = t255 - t356;
t298 = qJD(5) * t205;
t316 = t205 * t206;
t364 = -t127 * t316 + t146 * t298 - t372 * t202;
t185 = pkin(2) * t196 + pkin(8);
t363 = t202 * t146 + t185 * t316;
t263 = pkin(5) * t205 + qJ(6) * t202;
t162 = qJD(2) * pkin(2) + t287;
t113 = t196 * t162 + t199 * t288;
t110 = qJD(2) * pkin(8) + t113;
t102 = t203 * t110;
t201 = cos(pkin(6));
t179 = qJD(1) * t201 + qJD(3);
t79 = t179 * t206 - t102;
t71 = -qJD(4) * pkin(4) - t79;
t34 = pkin(5) * t151 - qJ(6) * t153 + t71;
t191 = t206 * qJDD(2);
t148 = t203 * t296 + qJDD(5) - t191;
t352 = pkin(9) * t148;
t362 = t181 * t34 + t352;
t282 = t203 * t298;
t301 = qJD(4) * t206;
t286 = t202 * t301;
t232 = t282 + t286;
t319 = t202 * t203;
t361 = t148 * t319 - t181 * t232;
t300 = qJD(5) * t202;
t284 = t181 * t300;
t318 = t202 * t206;
t360 = qJD(2) * (-t151 * t203 + t181 * t318) - t148 * t205 - t284;
t358 = qJD(5) * t363 - t127 * t318 + t372 * t205;
t357 = t153 ^ 2;
t354 = pkin(5) * t148;
t351 = pkin(9) * t153;
t302 = qJD(4) * t203;
t349 = (-t185 * t300 - qJD(6)) * t206 + (-t185 * t205 + qJ(6)) * t302 + t364;
t327 = t185 * t202;
t274 = pkin(5) + t327;
t348 = -t274 * t302 + t358;
t347 = (-t203 * t297 - t206 * t300) * t185 + t364;
t346 = t302 * t327 - t358;
t328 = t179 * t203;
t80 = t110 * t206 + t328;
t72 = qJD(4) * pkin(9) + t80;
t112 = t162 * t199 - t167;
t90 = qJD(2) * t255 - t112;
t23 = t202 * t90 + t205 * t72;
t17 = -qJ(6) * t181 + t23;
t345 = t17 * t181;
t344 = t181 * t23;
t343 = t205 * t98;
t342 = t206 * t97;
t285 = t206 * t297;
t317 = t203 * t205;
t85 = t98 * t317;
t341 = -t151 * t285 - t85;
t262 = pkin(5) * t202 - qJ(6) * t205;
t340 = t262 * qJD(5) - qJD(6) * t202 - t328 - (qJD(2) * t262 + t110) * t206;
t158 = t265 * qJD(2);
t42 = t202 * t158 + t205 * t79;
t339 = qJ(6) * t148;
t337 = qJDD(2) * pkin(2);
t336 = t127 * t151;
t335 = t127 * t153;
t334 = t127 * t203;
t333 = t146 * t205;
t331 = t153 * t151;
t197 = sin(pkin(10));
t326 = t197 * t204;
t325 = t198 * t203;
t324 = t198 * t204;
t323 = t198 * t206;
t322 = t198 * t207;
t321 = t201 * t204;
t320 = t201 * t207;
t315 = t207 * t199;
t22 = -t202 * t72 + t205 * t90;
t314 = qJD(6) - t22;
t313 = qJDD(1) - g(3);
t137 = t148 * t317;
t312 = -t181 * t285 + t137;
t194 = t203 ^ 2;
t195 = t206 ^ 2;
t310 = t194 - t195;
t307 = qJD(2) * t127;
t176 = t201 * qJDD(1) + qJDD(3);
t175 = t207 * t295;
t128 = -t204 * t279 + t175 + t337;
t69 = t196 * t128 + t199 * t367;
t65 = qJDD(2) * pkin(8) + t69;
t293 = -t203 * t176 - t179 * t301 - t206 * t65;
t132 = t153 * t282;
t292 = -t153 * t286 + t97 * t319 - t132;
t200 = cos(pkin(10));
t290 = t200 * t320;
t209 = qJD(2) ^ 2;
t289 = t203 * t209 * t206;
t68 = t199 * t128 - t196 * t367;
t283 = t202 * t299;
t281 = t181 * t305;
t280 = t151 ^ 2 - t357;
t13 = -t110 * t302 - t293;
t11 = qJDD(4) * pkin(9) + t13;
t33 = qJD(2) * t159 + qJDD(2) * t255 - t68;
t275 = t202 * t11 - t205 * t33 + t72 * t298 + t90 * t300;
t273 = t153 * t302 + t342;
t272 = t151 * t302 - t206 * t98;
t271 = qJD(5) * t151 - t97;
t270 = t110 * t301 - t206 * t176 + t179 * t302 + t203 * t65;
t267 = t203 * t278;
t133 = t196 * t324 - t198 * t315;
t266 = pkin(2) * t322 - t133 * pkin(3) + pkin(8) * t134;
t264 = t271 * pkin(9);
t16 = pkin(5) * t181 + t314;
t261 = t16 * t205 - t17 * t202;
t260 = t16 * t202 + t17 * t205;
t259 = -t202 * t23 - t205 * t22;
t258 = t202 * t22 - t205 * t23;
t257 = t203 * t79 - t206 * t80;
t41 = t158 * t205 - t202 * t79;
t108 = t134 * t206 + t201 * t203;
t51 = t108 * t205 + t133 * t202;
t50 = t108 * t202 - t133 * t205;
t107 = t134 * t203 - t201 * t206;
t136 = t256 * t201;
t149 = t196 * t204 - t315;
t93 = t136 * t200 - t149 * t197;
t94 = t197 * t136 + t149 * t200;
t251 = t185 + t262;
t248 = -t197 * t320 - t200 * t204;
t3 = t205 * t11 + t202 * t33 + t90 * t298 - t300 * t72;
t125 = qJD(2) * t134;
t126 = t149 * t306;
t48 = -qJD(4) * t107 - t126 * t206;
t7 = qJD(5) * t51 - t125 * t205 + t202 * t48;
t8 = -qJD(5) * t50 + t125 * t202 + t205 * t48;
t247 = -t8 * t151 + t153 * t7 - t50 * t97 - t51 * t98;
t246 = t148 * t202 - t181 * t298;
t244 = -t133 * t366 + t266;
t135 = t149 * t201;
t92 = -t135 * t200 - t197 * t256;
t25 = -t205 * t93 + t318 * t92;
t95 = t135 * t197 - t200 * t256;
t27 = t94 * t205 + t318 * t95;
t66 = -t133 * t318 - t134 * t205;
t243 = g(1) * t27 + g(2) * t25 + g(3) * t66;
t26 = t202 * t93 + t316 * t92;
t28 = -t202 * t94 + t316 * t95;
t67 = -t133 * t316 + t134 * t202;
t242 = -g(1) * t28 - g(2) * t26 - g(3) * t67;
t47 = qJD(4) * t108 - t126 * t203;
t241 = t107 * t98 - t148 * t50 + t47 * t151 + t181 * t7;
t12 = -qJDD(4) * pkin(4) + t270;
t58 = -t200 * t323 - t203 * t93;
t60 = t197 * t323 + t203 * t94;
t240 = g(1) * t60 + g(2) * t58 - g(3) * t107;
t59 = -t200 * t325 + t206 * t93;
t61 = t197 * t325 - t206 * t94;
t239 = -g(1) * t61 - g(2) * t59 - g(3) * t108;
t238 = -g(1) * t95 - g(2) * t92 + g(3) * t133;
t237 = g(1) * t94 - g(2) * t93 - g(3) * t134;
t236 = -g(3) * t201 + (-g(1) * t197 + g(2) * t200) * t198;
t235 = t151 * t283 + t341;
t171 = pkin(2) * t290;
t234 = -pkin(2) * t326 + t92 * pkin(3) + pkin(8) * t93 + t171;
t233 = -t283 + t285;
t231 = -pkin(9) * t343 + t239;
t230 = -t181 * t71 - t352;
t229 = t366 * t92 + t234;
t228 = -qJD(2) * t124 - t238;
t227 = -t202 * t332 - t343;
t226 = t107 * t97 + t148 * t51 - t153 * t47 - t181 * t8;
t18 = t202 * t59 + t92 * t205;
t20 = t202 * t61 + t95 * t205;
t225 = g(1) * t20 + g(2) * t18 + g(3) * t50 - t275;
t109 = -qJD(2) * pkin(3) - t112;
t186 = -pkin(3) - t356;
t224 = -qJDD(4) * t185 + (qJD(2) * t186 + t109 + t127) * qJD(4);
t223 = pkin(9) * qJD(5) * t181 - t240;
t5 = pkin(5) * t98 + qJ(6) * t97 - qJD(6) * t153 + t12;
t222 = t223 - t5;
t221 = -t12 + t223;
t220 = pkin(2) * t248 + t95 * pkin(3) - pkin(8) * t94;
t219 = -g(1) * t248 - g(3) * t322;
t1 = -qJD(6) * t181 + t3 + t339;
t2 = qJDD(6) + t275 - t354;
t218 = qJD(5) * t261 + t1 * t205 + t2 * t202;
t217 = qJD(5) * t259 + t202 * t275 + t3 * t205;
t216 = t13 * t206 + t270 * t203 + (-t203 * t80 - t206 * t79) * qJD(4);
t19 = -t202 * t92 + t205 * t59;
t21 = -t202 * t95 + t205 * t61;
t215 = -g(1) * t21 - g(2) * t19 - g(3) * t51 + t3;
t214 = t366 * t95 + t220;
t213 = t151 * t232 + t319 * t98;
t212 = t153 * t34 + qJDD(6) - t225;
t208 = qJD(4) ^ 2;
t64 = -qJDD(2) * pkin(3) - t68;
t211 = qJDD(2) * t186 + t185 * t208 + t228 + t64;
t210 = t272 - t361;
t170 = qJDD(4) * t206 - t203 * t208;
t169 = qJDD(4) * t203 + t206 * t208;
t168 = -pkin(4) - t263;
t118 = t251 * t203;
t111 = -t148 * t206 - t181 * t302;
t106 = pkin(5) * t153 + qJ(6) * t151;
t104 = -t185 * t318 + t333;
t103 = t107 * pkin(4);
t100 = t206 * t274 - t333;
t99 = -qJ(6) * t206 + t363;
t62 = (qJD(5) * t263 - qJD(6) * t205) * t203 + t251 * t301;
t53 = t60 * pkin(4);
t52 = t58 * pkin(4);
t49 = -t97 - t332;
t46 = (-t153 * t203 + t181 * t316) * qJD(2) + t246;
t38 = -pkin(5) * t305 - t41;
t37 = qJ(6) * t305 + t42;
t32 = -t202 * t97 - t205 * t330;
t29 = t153 * t233 - t317 * t97;
t15 = t181 * t283 + t273 + t312;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t313, 0, 0, 0, 0, 0, 0 (qJDD(2) * t207 - t204 * t209) * t198 (-qJDD(2) * t204 - t207 * t209) * t198, 0, -g(3) + (t201 ^ 2 + (t204 ^ 2 + t207 ^ 2) * t198 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(2) * t125 - qJDD(2) * t133, qJD(2) * t126 - qJDD(2) * t134, 0, -t112 * t125 - t113 * t126 - t133 * t68 + t134 * t69 + t176 * t201 - g(3), 0, 0, 0, 0, 0, 0, -t133 * t191 - qJD(4) * t47 - qJDD(4) * t107 + (-t125 * t206 + t133 * t302) * qJD(2), t133 * t294 - qJD(4) * t48 - qJDD(4) * t108 + (t125 * t203 + t133 * t301) * qJD(2) (t107 * t203 + t108 * t206) * qJDD(2) + (t203 * t47 + t206 * t48 + (t107 * t206 - t108 * t203) * qJD(4)) * qJD(2), t107 * t270 + t108 * t13 + t109 * t125 + t133 * t64 - t47 * t79 + t48 * t80 - g(3), 0, 0, 0, 0, 0, 0, t241, -t226, t247, t107 * t12 - t22 * t7 + t23 * t8 + t275 * t50 + t3 * t51 + t47 * t71 - g(3), 0, 0, 0, 0, 0, 0, t241, t247, t226, t1 * t51 + t107 * t5 + t16 * t7 + t17 * t8 + t2 * t50 + t34 * t47 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t175 - g(2) * (t290 - t326) + t219, -g(1) * (t197 * t321 - t200 * t207) - g(2) * (-t197 * t207 - t200 * t321) - t313 * t324, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t199 * t337 - t228 + t68, -t196 * t337 - t237 + t307 - t69, 0, -g(2) * t171 + t112 * t124 - t113 * t127 + (g(2) * t326 + t69 * t196 + t68 * t199 + t219) * pkin(2), qJDD(2) * t194 + 0.2e1 * t267, 0.2e1 * t191 * t203 - 0.2e1 * t296 * t310, t169, qJDD(2) * t195 - 0.2e1 * t267, t170, 0, t203 * t224 - t206 * t211, t203 * t211 + t206 * t224, t216 + t237 + (qJDD(2) * t185 - t307) * (t194 + t195) -g(1) * t220 - g(2) * t234 - g(3) * t266 - t109 * t124 + t127 * t257 + t185 * t216 + t64 * t186, t29, t235 + t292, t15, t213 (t181 * t303 + t98) * t206 + (-qJD(4) * t151 - t246) * t203, t111, t104 * t148 - t346 * t181 + (t275 + (t151 * t185 + t202 * t71) * qJD(4)) * t206 + (qJD(4) * t22 + t12 * t202 + t185 * t98 + t298 * t71 - t336) * t203 + t242, -t363 * t148 + t347 * t181 + (t3 + (t153 * t185 + t205 * t71) * qJD(4)) * t206 + (-qJD(4) * t23 + t12 * t205 - t185 * t97 - t300 * t71 - t335) * t203 + t243, t104 * t97 - t363 * t98 - t346 * t153 - t347 * t151 + t259 * t301 + (qJD(5) * t258 - t202 * t3 + t205 * t275 + t238) * t203, t3 * t363 - t275 * t104 - t71 * t334 - g(1) * t214 - g(2) * t229 - g(3) * t244 + t347 * t23 + t346 * t22 + (t12 * t203 + t301 * t71) * t185, t29, t15, t151 * t233 - t292 + t85, t111, t272 + t361, t213, -t100 * t148 + t118 * t98 + t151 * t62 + (t303 * t34 + t2) * t206 + t348 * t181 + (-qJD(4) * t16 + t202 * t5 + t298 * t34 - t336) * t203 + t242, -t100 * t97 - t98 * t99 + t348 * t153 - t349 * t151 + t261 * t301 + (-qJD(5) * t260 - t1 * t202 + t2 * t205 + t238) * t203, t118 * t97 + t148 * t99 - t153 * t62 + (-t297 * t34 - t1) * t206 - t349 * t181 + (qJD(4) * t17 - t205 * t5 + t300 * t34 + t335) * t203 - t243, t1 * t99 + t5 * t118 + t2 * t100 - g(1) * (pkin(5) * t28 + qJ(6) * t27 + t214) - g(2) * (pkin(5) * t26 + qJ(6) * t25 + t229) - g(3) * (pkin(5) * t67 + qJ(6) * t66 + t244) + (t62 - t334) * t34 + t349 * t17 + t348 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236 + t176, 0, 0, 0, 0, 0, 0, t170, -t169, 0, -qJD(4) * t257 + t13 * t203 - t206 * t270 + t236, 0, 0, 0, 0, 0, 0, t210, t181 * t233 - t137 + t273, t132 + (t153 * t301 + t203 * t271) * t202 + t341 (-qJD(4) * t258 - t12) * t206 + (qJD(4) * t71 + t217) * t203 + t236, 0, 0, 0, 0, 0, 0, t210, t235 - t292, -t342 + (-qJD(4) * t153 + t284) * t203 + t312 (qJD(4) * t260 - t5) * t206 + (qJD(4) * t34 + t218) * t203 + t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t289, t310 * t209, t294, t289, t191, qJDD(4), qJD(4) * t80 - t109 * t305 - t240 - t270, -t109 * t304 + (t79 + t102) * qJD(4) - t239 + t293, 0, 0, t32, -t371, t46, t227, -t360, t281, -pkin(4) * t98 - t151 * t80 + t181 * t41 + t202 * t230 + t205 * t221 - t22 * t305, pkin(4) * t97 - t153 * t80 - t181 * t42 - t202 * t221 + t205 * t230 + t23 * t305, t151 * t42 + t153 * t41 + (t22 * t304 + t3 + (-t22 + t351) * qJD(5)) * t205 + (t264 + t275 + t344) * t202 + t231, -t12 * pkin(4) - g(1) * t53 - g(2) * t52 + g(3) * t103 - t22 * t41 - t23 * t42 - t71 * t80 + (t217 + t239) * pkin(9), t32, t46, t371, t281, t360, t227, t340 * t151 + t16 * t305 + t168 * t98 - t181 * t38 - t362 * t202 + t222 * t205, t151 * t37 - t153 * t38 + (-t16 * t304 + t1 + (t16 + t351) * qJD(5)) * t205 + (t2 + t264 + t345) * t202 + t231, -t340 * t153 + t168 * t97 - t17 * t305 + t181 * t37 + t222 * t202 + t362 * t205, t5 * t168 - t17 * t37 - t16 * t38 - g(1) * (t263 * t60 + t53) - g(2) * (t263 * t58 + t52) - g(3) * (-t263 * t107 - t103) + t340 * t34 + (t218 + t239) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t331, -t280, t49, -t331, -t368, t148, -t153 * t71 + t225 - t344, t151 * t71 - t181 * t22 - t215, 0, 0, t331, t49, t280, t148, t368, -t331, -t106 * t151 - t212 - t344 + 0.2e1 * t354, pkin(5) * t97 - qJ(6) * t98 + (t17 - t23) * t153 + (t16 - t314) * t151, 0.2e1 * t339 + t106 * t153 - t151 * t34 + (-0.2e1 * qJD(6) + t22) * t181 + t215, t1 * qJ(6) - t2 * pkin(5) - t34 * t106 - t16 * t23 - g(1) * (-pkin(5) * t20 + qJ(6) * t21) - g(2) * (-pkin(5) * t18 + qJ(6) * t19) - g(3) * (-pkin(5) * t50 + qJ(6) * t51) + t314 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148 + t331, t49, -t181 ^ 2 - t357, t212 + t345 - t354;];
tau_reg  = t4;
