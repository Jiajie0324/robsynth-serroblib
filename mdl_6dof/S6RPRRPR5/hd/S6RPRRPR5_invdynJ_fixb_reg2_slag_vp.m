% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:13:44
% EndTime: 2019-03-09 05:13:56
% DurationCPUTime: 8.35s
% Computational Cost: add. (13440->578), mult. (32792->670), div. (0->0), fcn. (26010->14), ass. (0->296)
t197 = sin(qJ(6));
t201 = cos(qJ(6));
t187 = qJDD(3) + qJDD(4);
t194 = sin(pkin(10));
t199 = sin(qJ(3));
t195 = cos(pkin(10));
t365 = cos(qJ(3));
t295 = t365 * t195;
t251 = t199 * t194 - t295;
t137 = t251 * qJD(1);
t145 = t194 * t365 + t199 * t195;
t138 = t145 * qJD(1);
t198 = sin(qJ(4));
t364 = cos(qJ(4));
t103 = -t364 * t137 - t138 * t198;
t192 = qJD(3) + qJD(4);
t89 = -t103 * t197 + t192 * t201;
t339 = qJD(6) * t89;
t236 = t145 * qJDD(1);
t308 = t137 * qJD(3);
t215 = t236 - t308;
t291 = qJD(3) * t365;
t303 = t194 * qJDD(1);
t312 = qJD(3) * t199;
t298 = -t199 * t303 + (-t194 * t291 - t195 * t312) * qJD(1);
t237 = -qJDD(1) * t295 - t298;
t213 = t198 * t215 + t364 * t237;
t250 = t198 * t137 - t138 * t364;
t372 = -qJD(4) * t250 + t213;
t34 = t187 * t197 - t201 * t372 + t339;
t31 = t201 * t34;
t309 = qJD(6) * t201;
t310 = qJD(6) * t197;
t33 = t103 * t309 - t201 * t187 + t192 * t310 - t197 * t372;
t387 = qJD(6) - t250;
t401 = t201 * t387;
t391 = t89 * t401;
t87 = t103 * t201 + t192 * t197;
t403 = t387 * t87;
t412 = -t391 + (t33 + t403) * t197 - t31;
t353 = t103 * t87;
t290 = qJD(4) * t364;
t311 = qJD(4) * t198;
t246 = -t137 * t290 - t138 * t311 - t198 * t237 + t364 * t215;
t56 = -qJDD(6) - t246;
t349 = t197 * t56;
t407 = -t387 * t401 + t349;
t411 = t407 + t353;
t410 = t33 - t403;
t402 = t197 * t387;
t50 = t201 * t56;
t253 = -t387 * t402 - t50;
t352 = t103 * t89;
t409 = t253 - t352;
t32 = t201 * t33;
t408 = -t402 * t89 - t32;
t355 = pkin(7) + qJ(2);
t160 = t355 * t194;
t146 = qJD(1) * t160;
t161 = t355 * t195;
t147 = qJD(1) * t161;
t112 = -t199 * t146 + t147 * t365;
t86 = -t137 * pkin(8) + t112;
t346 = t198 * t86;
t329 = t147 * t199;
t111 = -t365 * t146 - t329;
t85 = -pkin(8) * t138 + t111;
t84 = qJD(3) * pkin(3) + t85;
t61 = -t364 * t84 + t346;
t317 = qJD(5) + t61;
t393 = pkin(5) * t250;
t318 = t317 - t393;
t367 = pkin(4) + pkin(9);
t35 = -t192 * t367 + t318;
t178 = t195 * pkin(2) + pkin(1);
t150 = -qJD(1) * t178 + qJD(2);
t113 = pkin(3) * t137 + t150;
t223 = qJ(5) * t250 + t113;
t40 = -t103 * t367 + t223;
t17 = -t197 * t40 + t201 * t35;
t405 = t17 * t387;
t358 = pkin(5) * t103;
t83 = t364 * t86;
t62 = t198 * t84 + t83;
t60 = -t192 * qJ(5) - t62;
t37 = -t60 + t358;
t404 = t37 * t387;
t337 = qJDD(1) * pkin(1);
t182 = qJDD(2) - t337;
t200 = sin(qJ(1));
t202 = cos(qJ(1));
t375 = -g(1) * t200 + g(2) * t202;
t255 = -t182 - t375;
t209 = -t137 * t311 + t138 * t290 + t213;
t323 = t192 * t250;
t400 = -t209 - t323;
t332 = t103 * t192;
t399 = t246 - t332;
t334 = t103 ^ 2;
t395 = t250 ^ 2;
t398 = -t334 + t395;
t18 = t197 * t35 + t201 * t40;
t302 = t195 * qJDD(1);
t15 = -pkin(2) * t302 + pkin(3) * t237 + pkin(4) * t372 - qJ(5) * t246 + qJD(5) * t250 + t182;
t10 = pkin(9) * t372 + t15;
t304 = qJD(1) * qJD(2);
t371 = qJDD(1) * t355 + t304;
t121 = t371 * t194;
t122 = t371 * t195;
t281 = -t365 * t121 - t199 * t122;
t53 = qJDD(3) * pkin(3) - pkin(8) * t215 + t146 * t312 - t147 * t291 + t281;
t299 = -t199 * t121 + t365 * t122 - t146 * t291;
t71 = -t147 * t312 + t299;
t58 = -pkin(8) * t237 + t71;
t287 = t198 * t58 + t86 * t290 + t84 * t311 - t364 * t53;
t266 = qJDD(5) + t287;
t8 = pkin(5) * t246 - t187 * t367 + t266;
t2 = -qJD(6) * t18 - t10 * t197 + t201 * t8;
t397 = t18 * t387 + t2;
t396 = t387 * t89 - t34;
t394 = pkin(4) * t250;
t392 = t250 * t37;
t390 = t387 * t103;
t340 = qJ(5) * t103;
t389 = t103 * t250;
t388 = t250 * t367;
t1 = qJD(6) * t17 + t10 * t201 + t197 * t8;
t293 = t17 * t250 + t1;
t288 = -t198 * t53 - t84 * t290 + t86 * t311 - t364 * t58;
t180 = t187 * qJ(5);
t376 = -t192 * qJD(5) - t180;
t11 = t288 + t376;
t9 = -pkin(5) * t372 - t11;
t7 = t9 * t201;
t386 = t103 * t18 + t7;
t385 = t250 * t18 - t2;
t366 = t9 * t197 + t37 * t309;
t384 = -t103 * t17 + t366;
t191 = pkin(10) + qJ(3);
t185 = qJ(4) + t191;
t175 = sin(t185);
t170 = g(3) * t175;
t176 = cos(t185);
t325 = t176 * t202;
t326 = t176 * t200;
t248 = -g(1) * t325 - g(2) * t326 - t170 - t288;
t63 = -pkin(4) * t103 + t223;
t383 = t103 * t63 + t248 - t376;
t268 = g(1) * t202 + g(2) * t200;
t292 = qJD(2) * t365;
t313 = qJD(2) * t199;
t374 = qJD(3) * t251;
t212 = pkin(8) * t374 + t160 * t312 - t161 * t291 - t194 * t292 - t195 * t313;
t238 = qJD(3) * t145;
t316 = -t160 * t291 + t195 * t292;
t214 = -pkin(8) * t238 - t161 * t312 - t194 * t313 + t316;
t114 = -t365 * t160 - t199 * t161;
t97 = -pkin(8) * t145 + t114;
t115 = -t199 * t160 + t365 * t161;
t98 = -pkin(8) * t251 + t115;
t28 = -t198 * t212 - t364 * t214 - t97 * t290 + t311 * t98;
t29 = t198 * t214 - t364 * t212 + t290 * t98 + t311 * t97;
t68 = t198 * t98 - t364 * t97;
t69 = t198 * t97 + t364 * t98;
t382 = -t103 * t28 + t246 * t68 - t250 * t29 - t372 * t69 - t268;
t171 = g(3) * t176;
t327 = t175 * t202;
t328 = t175 * t200;
t296 = -g(1) * t327 - g(2) * t328 + t171;
t249 = t287 + t296;
t224 = -t250 * t63 + qJDD(5) + t249;
t381 = -t113 * t103 - t248;
t232 = t364 * t251;
t109 = t145 * t198 + t232;
t241 = t198 * t251;
t74 = -qJD(4) * t241 + t145 * t290 - t198 * t374 + t238 * t364;
t380 = -t103 * t74 + t109 * t372;
t110 = t145 * t364 - t241;
t73 = t145 * t311 + t192 * t232 + t198 * t238;
t379 = -t103 * t73 - t109 * t246 - t110 * t372 + t250 * t74;
t378 = t113 * t250 - t249;
t274 = pkin(3) * t290;
t166 = t274 + qJD(5);
t65 = t364 * t85 - t346;
t341 = t166 - t65;
t300 = pkin(3) * t311;
t64 = t198 * t85 + t83;
t271 = -t64 + t300;
t315 = t176 * pkin(4) + t175 * qJ(5);
t373 = qJ(2) * qJDD(1);
t369 = t138 ^ 2;
t368 = qJD(3) ^ 2;
t363 = pkin(3) * t198;
t362 = pkin(4) * t187;
t168 = t176 * pkin(9);
t357 = t89 * t87;
t188 = -pkin(8) - t355;
t356 = pkin(5) - t188;
t351 = t192 * t62;
t350 = t197 * t34;
t348 = t197 * t89;
t345 = t201 * t74;
t344 = t201 * t87;
t343 = t367 * t56;
t342 = t341 - t393;
t338 = qJD(6) * t387;
t330 = t138 * t137;
t324 = t188 * t202;
t322 = t197 * t200;
t321 = t197 * t202;
t320 = t200 * t201;
t319 = t201 * t202;
t189 = t194 ^ 2;
t190 = t195 ^ 2;
t314 = t189 + t190;
t307 = t138 * qJD(3);
t301 = t364 * pkin(3);
t184 = cos(t191);
t174 = pkin(3) * t184;
t297 = t174 + t315;
t286 = -t34 + t339;
t282 = t314 * qJD(1) ^ 2;
t275 = -t17 * t310 + t296;
t273 = 0.2e1 * t314;
t179 = -t301 - pkin(4);
t148 = t174 + t178;
t140 = t202 * t148;
t272 = g(2) * (pkin(4) * t325 + qJ(5) * t327 + t140);
t270 = -g(1) * t326 + g(2) * t325;
t183 = sin(t191);
t269 = -pkin(3) * t183 - pkin(4) * t175;
t265 = pkin(3) * t138 - t340;
t264 = t110 * t246 + t250 * t73;
t263 = t17 * t201 + t18 * t197;
t262 = -t17 * t197 + t18 * t201;
t261 = t69 * t187 - t28 * t192;
t119 = pkin(3) * t251 - t178;
t217 = -t110 * qJ(5) + t119;
t44 = t109 * t367 + t217;
t45 = pkin(5) * t110 + t68;
t27 = t197 * t45 + t201 * t44;
t26 = -t197 * t44 + t201 * t45;
t260 = t109 * t187 + t192 * t74;
t259 = t110 * t187 - t192 * t73;
t258 = -t334 - t395;
t254 = -t148 - t315;
t252 = t268 * t183;
t149 = -qJDD(1) * t178 + qJDD(2);
t173 = -pkin(9) + t179;
t247 = t173 * t56 - t300 * t387;
t235 = t255 + t337;
t233 = pkin(3) * t238;
t231 = -t176 * t268 - t170;
t230 = -g(3) * t184 + t252;
t229 = t68 * t187 + t29 * t192 + t270;
t228 = -t103 * t65 - t250 * t271;
t225 = t246 + t332;
t222 = t273 * t304 - t268;
t221 = qJD(6) * t262 + t1 * t197 + t2 * t201;
t219 = -t173 * t338 + t231;
t218 = t338 * t367 + t231;
t151 = qJ(5) * t326;
t153 = qJ(5) * t325;
t216 = t175 * t268 * t367 - g(1) * t153 - g(2) * t151;
t90 = qJDD(2) - t298 * pkin(3) + (-pkin(1) + (-pkin(3) * t365 - pkin(2)) * t195) * qJDD(1);
t30 = t74 * pkin(4) + t73 * qJ(5) - t110 * qJD(5) + t233;
t207 = -t209 + t323;
t177 = qJ(5) + t363;
t134 = t137 ^ 2;
t131 = -t175 * t322 + t319;
t130 = t175 * t320 + t321;
t129 = t175 * t321 + t320;
t128 = t175 * t319 - t322;
t93 = -t145 * qJD(2) - qJD(3) * t115;
t92 = (-qJD(2) * t194 - qJD(3) * t161) * t199 + t316;
t72 = -t112 * qJD(3) + t281;
t70 = -t340 - t394;
t67 = t109 * pkin(4) + t217;
t66 = t265 - t394;
t57 = -pkin(4) * t192 + t317;
t49 = -t340 - t388;
t46 = -t109 * pkin(5) + t69;
t43 = t265 - t388;
t41 = t64 + t358;
t39 = t62 + t358;
t25 = t197 * t39 + t201 * t49;
t24 = -t197 * t49 + t201 * t39;
t23 = t74 * pkin(9) + t30;
t22 = t197 * t41 + t201 * t43;
t21 = -t197 * t43 + t201 * t41;
t20 = -t73 * pkin(5) + t29;
t19 = -pkin(5) * t74 - t28;
t12 = t266 - t362;
t4 = -qJD(6) * t27 - t197 * t23 + t20 * t201;
t3 = qJD(6) * t26 + t197 * t20 + t201 * t23;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t375, t268, 0, 0, t189 * qJDD(1), 0.2e1 * t194 * t302, 0, t190 * qJDD(1), 0, 0, t235 * t195, -t235 * t194, t273 * t373 + t222, pkin(1) * t255 + (t314 * t373 + t222) * qJ(2), t145 * t236 + (-t137 * t145 - t138 * t251) * qJD(3), t137 * t374 - t138 * t238 - t145 * t237 - t215 * t251, t145 * qJDD(3) - t251 * t368, t137 * t238 + t237 * t251, -qJDD(3) * t251 - t145 * t368, 0, t114 * qJDD(3) + t149 * t251 - t178 * t237 - t375 * t184 + (t145 * t150 + t93) * qJD(3), -t92 * qJD(3) - t115 * qJDD(3) + t149 * t145 - t150 * t374 - t178 * t215 + t183 * t375, -t92 * t137 - t115 * t237 - t71 * t251 - t112 * t238 - t93 * t138 + t114 * (qJD(1) * t374 - t236) - t72 * t145 + t111 * t374 - t268, t71 * t115 + t112 * t92 + t72 * t114 + t111 * t93 - t149 * t178 - g(1) * (-t178 * t200 + t202 * t355) - g(2) * (t178 * t202 + t200 * t355) t264, t379, t259, t380, -t260, 0, -t103 * t233 + t90 * t109 + t113 * t74 + t119 * t372 - t229, -g(1) * t328 + g(2) * t327 + t90 * t110 - t113 * t73 + t119 * t246 - t233 * t250 - t261, t109 * t288 + t110 * t287 - t61 * t73 - t62 * t74 + t382, -t288 * t69 - t62 * t28 + t287 * t68 + t61 * t29 + t90 * t119 + t113 * t233 - g(1) * (-t148 * t200 - t324) - g(2) * (-t188 * t200 + t140) 0, -t259, t260, t264, t379, t380, t11 * t109 + t12 * t110 - t57 * t73 + t60 * t74 + t382, t103 * t30 - t15 * t109 - t372 * t67 - t63 * t74 + t229, -t110 * t15 - t175 * t375 - t246 * t67 + t250 * t30 + t63 * t73 + t261, t15 * t67 + t63 * t30 - t11 * t69 + t60 * t28 + t12 * t68 + t57 * t29 + g(1) * t324 - t272 + (-g(1) * t254 + g(2) * t188) * t200, t74 * t348 + (-t197 * t33 + t309 * t89) * t109 (-t197 * t87 + t201 * t89) * t74 + (-t350 - t32 + (-t344 - t348) * qJD(6)) * t109, t74 * t402 - t110 * t33 - t73 * t89 + (t309 * t387 - t349) * t109, -t74 * t344 + (t310 * t87 - t31) * t109, t387 * t345 - t110 * t34 + t73 * t87 + (-t310 * t387 - t50) * t109, -t110 * t56 - t387 * t73, -t37 * t345 - g(1) * t131 - g(2) * t129 + t110 * t2 - t17 * t73 + t19 * t87 - t26 * t56 + t34 * t46 + t4 * t387 + (t310 * t37 - t7) * t109, t197 * t37 * t74 + g(1) * t130 - g(2) * t128 - t1 * t110 + t109 * t366 + t18 * t73 + t19 * t89 + t27 * t56 - t3 * t387 - t33 * t46, t26 * t33 - t27 * t34 - t3 * t87 - t4 * t89 + t262 * t74 + (-qJD(6) * t263 + t1 * t201 - t197 * t2) * t109 - t270, t1 * t27 + t18 * t3 + t2 * t26 + t17 * t4 + t9 * t46 + t37 * t19 - t272 + (-g(1) * t356 - g(2) * t168) * t202 + (-g(1) * (t254 - t168) - g(2) * t356) * t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t303, -t282, -qJ(2) * t282 - t255, 0, 0, 0, 0, 0, 0, t237 + t307, t236 - 0.2e1 * t308, -t134 - t369, t111 * t138 + t112 * t137 + t149 + t375, 0, 0, 0, 0, 0, 0, -t207, t225, t258, -t62 * t103 + t250 * t61 + t375 + t90, 0, 0, 0, 0, 0, 0, t258, t207, -t225, t60 * t103 + t250 * t57 + t15 + t375, 0, 0, 0, 0, 0, 0, t407 - t353, -t253 - t352, -t197 * t410 - t31 + t391, -t103 * t37 + (t1 - t405) * t201 - t397 * t197 + t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, -t134 + t369, t236, -t330, -t237 + t307, qJDD(3), -t150 * t138 + t230 + t281, g(3) * t183 + t137 * t150 + t268 * t184 + (t111 + t329) * qJD(3) - t299, 0, 0, t389, t398, t399, -t389, t400, t187, t64 * t192 + (t103 * t138 + t187 * t364 - t192 * t311) * pkin(3) + t378, t65 * t192 + (t138 * t250 - t187 * t198 - t192 * t290) * pkin(3) + t381, -t246 * t301 - t250 * t62 - t363 * t372 + t228 + (t274 - t61) * t103, -t61 * t64 - t62 * t65 + (-t364 * t287 - t113 * t138 - t288 * t198 + (t198 * t61 + t364 * t62) * qJD(4) + t230) * pkin(3), t187, -t399, -t400, t389, t398, -t389, -t177 * t372 + t179 * t246 + t250 * t60 + t228 + (t166 - t57) * t103, -t103 * t66 + t271 * t192 + (-pkin(4) + t179) * t187 + t224, t177 * t187 + t192 * t341 - t250 * t66 + t383, -t11 * t177 + t12 * t179 - t63 * t66 - g(1) * (t202 * t269 + t153) - g(2) * (t200 * t269 + t151) - g(3) * t297 - t341 * t60 + t271 * t57, t408, t412, t409, t401 * t87 + t350, t411, -t390, t177 * t34 - t21 * t387 + t342 * t87 + (-t247 - t392) * t201 + t219 * t197 + t384, -t177 * t33 + t22 * t387 + t342 * t89 + t219 * t201 + (t247 - t404) * t197 + t386, t21 * t89 + t22 * t87 + (t173 * t286 - t300 * t87 - t293) * t197 + (-t89 * t300 + t173 * t33 + (-t173 * t87 - t18) * qJD(6) + t385) * t201 - t275, t9 * t177 - t18 * t22 - t17 * t21 - g(3) * (t168 + t297) + t342 * t37 + (t263 * t311 + t252) * pkin(3) + t221 * t173 + t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t389, t398, t399, -t389, t400, t187, t351 + t378, -t192 * t61 + t381, 0, 0, t187, -t399, -t400, t389, t398, -t389, -pkin(4) * t246 - qJ(5) * t372 - (-t60 - t62) * t250 - (t57 - t317) * t103, -t103 * t70 + t224 - t351 - 0.2e1 * t362, t192 * t317 - t250 * t70 + t180 + t383, -t11 * qJ(5) - t12 * pkin(4) - t63 * t70 - t57 * t62 - g(1) * (-pkin(4) * t327 + t153) - g(2) * (-pkin(4) * t328 + t151) - g(3) * t315 - t317 * t60, t408, t412, t409, t201 * t403 + t350, t411, -t390, qJ(5) * t34 - t24 * t387 + t318 * t87 + (t343 - t392) * t201 + t218 * t197 + t384, -qJ(5) * t33 + t25 * t387 + t318 * t89 + (-t343 - t404) * t197 + t218 * t201 + t386, t24 * t89 + t25 * t87 + (-t286 * t367 - t293) * t197 + (-t367 * t33 + (t367 * t87 - t18) * qJD(6) + t385) * t201 - t275, t9 * qJ(5) - t18 * t25 - t17 * t24 - g(3) * (t168 + t315) + t318 * t37 - t221 * t367 + t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, t187 - t389, -t192 ^ 2 - t395, t192 * t60 + t224 - t362, 0, 0, 0, 0, 0, 0, -t192 * t87 + t253, -t192 * t89 + t407, t396 * t197 + t201 * t410, -t192 * t37 + t293 * t197 + t201 * t397 + t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357, -t87 ^ 2 + t89 ^ 2, -t410, -t357, t396, -t56, -g(1) * t128 - g(2) * t130 + t171 * t201 - t37 * t89 + t397, g(1) * t129 - g(2) * t131 + t405 + t37 * t87 + (-qJD(6) * t35 - t10) * t201 + (qJD(6) * t40 - t171 - t8) * t197, 0, 0;];
tau_reg  = t5;
