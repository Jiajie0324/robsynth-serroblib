% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 22:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:40:28
% EndTime: 2019-05-05 22:41:05
% DurationCPUTime: 38.99s
% Computational Cost: add. (137794->792), mult. (338382->1170), div. (0->0), fcn. (266766->10), ass. (0->558)
t1016 = sin(pkin(10));
t1017 = cos(pkin(10));
t1020 = sin(qJ(3));
t1024 = cos(qJ(3));
t1023 = cos(qJ(4));
t1019 = sin(qJ(4));
t1012 = qJDD(3) + qJDD(4);
t1074 = t1016 * t1020;
t982 = (t1017 * t1024 - t1074) * qJD(1);
t1045 = t1016 * t1024 + t1017 * t1020;
t983 = t1045 * qJD(1);
t939 = t1019 * t983 - t1023 * t982;
t941 = t1019 * t982 + t1023 * t983;
t1112 = t941 * t939;
t1137 = t1112 + t1012;
t1157 = t1019 * t1137;
t1015 = qJD(3) + qJD(4);
t1011 = t1015 ^ 2;
t1122 = t941 ^ 2;
t914 = t1122 + t1011;
t824 = t1023 * t914 + t1157;
t1152 = t1023 * t1137;
t827 = t1019 * t914 - t1152;
t743 = t1020 * t827 - t1024 * t824;
t745 = t1020 * t824 + t1024 * t827;
t677 = t1016 * t745 + t1017 * t743;
t1200 = qJ(2) * t677;
t678 = t1016 * t743 - t1017 * t745;
t1199 = qJ(2) * t678;
t1021 = sin(qJ(1));
t1198 = t1021 * t678;
t875 = -t1112 + t1012;
t1172 = t1019 * t875;
t920 = -t1122 + t1011;
t830 = t1023 * t920 + t1172;
t1171 = t1023 * t875;
t835 = t1019 * t920 - t1171;
t751 = t1020 * t835 - t1024 * t830;
t755 = t1020 * t830 + t1024 * t835;
t680 = t1016 * t751 - t1017 * t755;
t1197 = t1021 * t680;
t1123 = t939 ^ 2;
t919 = t1123 - t1011;
t832 = t1019 * t919 + t1152;
t836 = t1023 * t919 - t1157;
t752 = t1020 * t836 + t1024 * t832;
t757 = t1020 * t832 - t1024 * t836;
t683 = t1016 * t752 + t1017 * t757;
t1196 = t1021 * t683;
t1025 = cos(qJ(1));
t1195 = t1025 * t678;
t1194 = t1025 * t680;
t1193 = t1025 * t683;
t1192 = pkin(1) * t677 + pkin(2) * t743 - pkin(3) * t824;
t873 = -t1011 - t1123;
t791 = t1019 * t873 + t1171;
t794 = -t1023 * t873 + t1172;
t713 = t1020 * t794 - t1024 * t791;
t715 = t1020 * t791 + t1024 * t794;
t641 = t1016 * t715 + t1017 * t713;
t1191 = qJ(2) * t641;
t642 = t1016 * t713 - t1017 * t715;
t1190 = qJ(2) * t642;
t1189 = t1021 * t642;
t1188 = t1025 * t642;
t1187 = pkin(1) * t641 + pkin(2) * t713 - pkin(3) * t791;
t1186 = pkin(7) * t743;
t1185 = pkin(7) * t745;
t1183 = t1016 * t755 + t1017 * t751;
t1182 = t1016 * t757 - t1017 * t752;
t1181 = pkin(7) * t713;
t1180 = pkin(7) * t715;
t1177 = pkin(8) * t824;
t1176 = pkin(8) * t827;
t1174 = pkin(8) * t791;
t1173 = pkin(8) * t794;
t1163 = -2 * qJD(5);
t1053 = qJD(3) * pkin(3) - pkin(8) * t983;
t1027 = qJD(1) ^ 2;
t994 = t1021 * g(1) - t1025 * g(2);
t1048 = -qJDD(2) + t994;
t1013 = t1016 ^ 2;
t1014 = t1017 ^ 2;
t1071 = t1013 + t1014;
t1118 = pkin(2) * t1017;
t946 = t1027 * (pkin(7) * t1071 + qJ(2)) + (pkin(1) + t1118) * qJDD(1) + t1048;
t1083 = t983 * qJD(3);
t1070 = qJDD(1) * t1017;
t980 = qJDD(1) * t1074 - t1024 * t1070;
t951 = -t980 - t1083;
t978 = t982 ^ 2;
t842 = t951 * pkin(3) + t978 * pkin(8) - t983 * t1053 + t946;
t926 = t1015 * t941;
t1170 = pkin(4) * t926 + t1163 * t941 - t842;
t995 = g(1) * t1025 + g(2) * t1021;
t1159 = -pkin(1) * t1027 + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t995;
t1038 = (-t1019 * t939 - t1023 * t941) * t1015;
t1039 = (t1019 * t941 - t1023 * t939) * t1015;
t1128 = -t1020 * t1038 + t1024 * t1039;
t1129 = t1020 * t1039 + t1024 * t1038;
t1144 = -t1016 * t1129 + t1017 * t1128;
t1169 = -t1025 * t1012 + t1021 * t1144;
t1061 = t1025 * t1112;
t1076 = t1015 * t1023;
t1084 = t982 * qJD(3);
t1134 = t1045 * qJDD(1);
t953 = t1134 + t1084;
t1055 = t1019 * t953 - t1023 * t951;
t856 = qJD(4) * t941 + t1055;
t1041 = t1019 * t856 + t1076 * t939;
t1077 = t1015 * t1019;
t1051 = -t1023 * t856 + t1077 * t939;
t1126 = t1020 * t1041 + t1024 * t1051;
t1127 = -t1020 * t1051 + t1024 * t1041;
t1145 = -t1016 * t1126 + t1017 * t1127;
t1168 = t1021 * t1145 + t1061;
t1047 = t1019 * t951 + t1023 * t953;
t1035 = qJD(4) * t939 - t1047;
t1049 = -t1019 * t1035 + t1076 * t941;
t1050 = -t1023 * t1035 - t1077 * t941;
t1124 = -t1020 * t1049 + t1024 * t1050;
t1125 = t1020 * t1050 + t1024 * t1049;
t1148 = -t1016 * t1125 + t1017 * t1124;
t1167 = t1021 * t1148 - t1061;
t1064 = t1021 * t1112;
t1166 = t1025 * t1145 - t1064;
t1165 = t1025 * t1148 + t1064;
t1164 = t1012 * t1021 + t1025 * t1144;
t1135 = -t1123 - t1122;
t1162 = pkin(1) * t1135;
t1161 = pkin(2) * t1135;
t1160 = pkin(3) * t1135;
t925 = t939 * t1015;
t817 = t1035 - t925;
t1056 = t1035 + t925;
t1018 = sin(qJ(6));
t853 = qJDD(6) - t1035;
t1022 = cos(qJ(6));
t908 = t1015 * t1018 - t1022 * t939;
t910 = t1015 * t1022 + t1018 * t939;
t860 = t910 * t908;
t1142 = t853 - t860;
t1158 = t1018 * t1142;
t956 = t982 * t983;
t1138 = qJDD(3) + t956;
t1156 = t1020 * t1138;
t1155 = t1021 * t1135;
t1136 = -t1122 + t1123;
t1154 = t1021 * t1136;
t1153 = t1022 * t1142;
t1151 = t1024 * t1138;
t1150 = t1025 * t1135;
t1149 = t1025 * t1136;
t1147 = t1016 * t1124 + t1017 * t1125;
t1146 = t1016 * t1127 + t1017 * t1126;
t1143 = t1016 * t1128 + t1017 * t1129;
t1141 = t1056 * qJ(5);
t1131 = t1027 * t1071;
t906 = t908 ^ 2;
t907 = t910 ^ 2;
t934 = qJD(6) + t941;
t932 = t934 ^ 2;
t979 = t983 ^ 2;
t1121 = pkin(4) + pkin(9);
t1117 = pkin(4) * t1019;
t1116 = pkin(4) * t1023;
t1115 = t1017 * g(3);
t1114 = qJDD(1) * pkin(1);
t1113 = t908 * t934;
t918 = -t1115 + (-pkin(7) * qJDD(1) + t1027 * t1118 - t1159) * t1016;
t1007 = t1014 * t1027;
t958 = -g(3) * t1016 + t1017 * t1159;
t927 = -pkin(2) * t1007 + pkin(7) * t1070 + t958;
t862 = t1020 * t927 - t1024 * t918;
t786 = (-t953 + t1084) * pkin(8) + t1138 * pkin(3) - t862;
t863 = t1020 * t918 + t1024 * t927;
t797 = -t978 * pkin(3) + t951 * pkin(8) - qJD(3) * t1053 + t863;
t708 = t1019 * t797 - t1023 * t786;
t709 = t1019 * t786 + t1023 * t797;
t1110 = t1012 * qJ(5);
t776 = t1020 * t863 - t1024 * t862;
t1109 = t1016 * t776;
t1108 = t1017 * t776;
t880 = pkin(4) * t939 - qJ(5) * t941;
t1043 = -t1011 * pkin(4) - t939 * t880 + t709;
t916 = pkin(5) * t941 - pkin(9) * t1015;
t644 = t1110 - t856 * pkin(5) - t1123 * pkin(9) + ((2 * qJD(5)) + t916) * t1015 + t1043;
t1107 = t1018 * t644;
t771 = t853 + t860;
t1106 = t1018 * t771;
t1105 = t1018 * t934;
t1104 = t1019 * t842;
t637 = t1019 * t709 - t1023 * t708;
t1100 = t1020 * t637;
t1099 = t1020 * t946;
t948 = qJDD(3) - t956;
t1098 = t1020 * t948;
t976 = t1027 * qJ(2) + t1048 + t1114;
t1097 = t1021 * t976;
t1096 = t1022 * t644;
t1095 = t1022 * t771;
t1094 = t1022 * t934;
t809 = t856 + t926;
t1093 = t1023 * t809;
t1092 = t1023 * t842;
t1088 = t1024 * t637;
t1087 = t1024 * t946;
t1086 = t1024 * t948;
t1085 = t1025 * t976;
t1081 = qJD(3) * t1020;
t1080 = qJD(3) * t1024;
t1078 = t1013 * t1027;
t1075 = t1016 * t1017;
t1073 = -qJD(4) + t1015;
t1072 = qJD(4) + t1015;
t1069 = qJDD(1) * t1021;
t1068 = qJDD(1) * t1025;
t1067 = -t907 - t932;
t1065 = t1019 * t860;
t1063 = t1021 * t956;
t1062 = t1023 * t860;
t1060 = t1025 * t956;
t788 = -t908 * qJD(6) + t1022 * t1012 + t1018 * t856;
t1058 = qJ(5) * t1019 + pkin(3);
t1057 = t976 + t1114;
t957 = t1016 * t1159 + t1115;
t893 = t1016 * t957 + t1017 * t958;
t638 = t1019 * t708 + t1023 * t709;
t777 = t1020 * t862 + t1024 * t863;
t966 = -t1021 * t994 - t1025 * t995;
t1054 = t1018 * t1012 - t1022 * t856;
t993 = -t1021 * t1027 + t1068;
t1052 = -pkin(6) * t993 - g(3) * t1021;
t891 = t1016 * t958 - t1017 * t957;
t1042 = -t1012 * pkin(4) - t1011 * qJ(5) + t941 * t880 + qJDD(5) + t708;
t632 = -pkin(5) * t817 - t875 * pkin(9) + t1042;
t1030 = t1141 + t1170;
t639 = -pkin(5) * t1123 + t1121 * t856 - t941 * t916 + t1030;
t580 = t1018 * t639 - t1022 * t632;
t581 = t1018 * t632 + t1022 * t639;
t539 = t1018 * t581 - t1022 * t580;
t540 = t1018 * t580 + t1022 * t581;
t1046 = t1021 * t995 - t1025 * t994;
t1044 = t788 - t1113;
t992 = t1025 * t1027 + t1069;
t986 = t1017 * t1131;
t962 = t1017 * t1068 - t1021 * t986;
t1040 = t1017 * t1069 + t1025 * t986;
t1036 = (-qJD(6) + t934) * t910 - t1054;
t1034 = t1015 * t1163 - t1043;
t1033 = -t1072 * t939 + t1047;
t688 = -t1034 + t1110;
t1031 = -t856 * pkin(4) - t1170;
t1026 = qJD(3) ^ 2;
t1006 = t1014 * qJDD(1);
t1005 = t1013 * qJDD(1);
t991 = t1007 - t1078;
t990 = t1007 + t1078;
t989 = t1006 - t1005;
t988 = t1006 + t1005;
t985 = t1016 * t1131;
t977 = -pkin(6) * t992 + g(3) * t1025;
t971 = -t979 - t1026;
t970 = -t979 + t1026;
t969 = t978 - t1026;
t968 = t993 * t1075;
t967 = t992 * t1075;
t963 = t1016 * t1069 + t1025 * t985;
t961 = -t1016 * t1068 + t1021 * t985;
t960 = -t1021 * t990 + t1025 * t988;
t959 = t1021 * t988 + t1025 * t990;
t955 = -t979 + t978;
t952 = t1134 + 0.2e1 * t1084;
t950 = t980 + 0.2e1 * t1083;
t945 = -t1026 - t978;
t930 = (t1020 * t983 + t1024 * t982) * qJD(3);
t929 = (t1020 * t982 - t1024 * t983) * qJD(3);
t911 = -t978 - t979;
t903 = t1024 * t953 - t1081 * t983;
t902 = t1020 * t953 + t1080 * t983;
t901 = -t1020 * t951 - t1080 * t982;
t900 = t1024 * t951 - t1081 * t982;
t899 = -t1020 * t971 - t1086;
t898 = -t1020 * t970 + t1151;
t897 = t1024 * t969 - t1098;
t896 = t1024 * t971 - t1098;
t895 = t1024 * t970 + t1156;
t894 = t1020 * t969 + t1086;
t890 = -t1020 * t952 - t1024 * t950;
t889 = t1020 * t1134 - t1024 * t980;
t888 = -t1020 * t950 + t1024 * t952;
t887 = -t1020 * t980 - t1024 * t1134;
t886 = t1024 * t945 - t1156;
t885 = t1020 * t945 + t1151;
t872 = -t1016 * t929 + t1017 * t930;
t871 = -t907 + t932;
t870 = t906 - t932;
t865 = t1025 * t893 - t1097;
t864 = t1021 * t893 + t1085;
t859 = t907 - t906;
t858 = -pkin(7) * t896 - t1087;
t855 = -pkin(7) * t885 - t1099;
t844 = -t1016 * t902 + t1017 * t903;
t843 = -t1016 * t900 + t1017 * t901;
t841 = -t1016 * t896 + t1017 * t899;
t840 = -t1016 * t895 + t1017 * t898;
t839 = -t1016 * t894 + t1017 * t897;
t838 = t1016 * t899 + t1017 * t896;
t828 = -pkin(2) * t952 + pkin(7) * t899 - t1099;
t823 = -t932 - t906;
t822 = -t906 - t907;
t821 = -pkin(2) * t950 + pkin(7) * t886 + t1087;
t820 = -t1016 * t888 + t1017 * t890;
t819 = -t1016 * t887 + t1017 * t889;
t818 = t1016 * t889 + t1017 * t887;
t812 = t1073 * t939 + t1047;
t811 = -t856 + t926;
t810 = t1073 * t941 - t1055;
t808 = t1072 * t941 + t1055;
t807 = -t1016 * t885 + t1017 * t886;
t806 = t1016 * t886 + t1017 * t885;
t796 = t1021 * t952 + t1025 * t841;
t795 = t1021 * t841 - t1025 * t952;
t787 = -qJD(6) * t910 - t1054;
t785 = (-t1018 * t910 + t1022 * t908) * t934;
t784 = (t1018 * t908 + t1022 * t910) * t934;
t775 = t1021 * t950 + t1025 * t807;
t774 = t1021 * t807 - t1025 * t950;
t773 = t1021 * t911 + t1025 * t819;
t772 = t1021 * t819 - t1025 * t911;
t768 = pkin(2) * t946 + pkin(7) * t777;
t767 = -pkin(1) * t818 - pkin(2) * t887;
t766 = -t1092 + t1177;
t764 = t788 + t1113;
t760 = (qJD(6) + t934) * t910 + t1054;
t758 = -pkin(7) * t887 - t776;
t749 = -t1022 * t788 + t1105 * t910;
t748 = -t1018 * t788 - t1094 * t910;
t747 = t1018 * t787 - t1094 * t908;
t746 = -t1022 * t787 - t1105 * t908;
t741 = -pkin(1) * t838 - pkin(2) * t896 + t863;
t740 = -t1104 - t1174;
t739 = -t1019 * t784 + t1023 * t853;
t738 = t1019 * t853 + t1023 * t784;
t737 = -t1022 * t870 + t1106;
t736 = t1018 * t871 - t1153;
t735 = -t1018 * t870 - t1095;
t734 = -t1022 * t871 - t1158;
t733 = -pkin(2) * t911 + pkin(7) * t889 + t777;
t732 = -t1019 * t817 + t1023 * t811;
t731 = -t1019 * t1033 - t1093;
t730 = t1019 * t1056 - t1023 * t808;
t729 = t1019 * t812 + t1023 * t810;
t728 = t1019 * t811 + t1023 * t817;
t727 = -t1019 * t809 + t1023 * t1033;
t726 = -t1019 * t808 - t1023 * t1056;
t725 = t1019 * t810 - t1023 * t812;
t724 = -pkin(1) * t806 - pkin(2) * t885 + t862;
t711 = -t1018 * t1067 - t1095;
t710 = t1022 * t1067 - t1106;
t707 = t1022 * t823 - t1158;
t706 = t1018 * t823 + t1153;
t704 = -qJ(2) * t838 - t1016 * t828 + t1017 * t858;
t703 = -t1019 * t748 + t1062;
t702 = -t1019 * t746 - t1062;
t701 = t1023 * t748 + t1065;
t700 = t1023 * t746 - t1065;
t697 = t1017 * t777 - t1109;
t696 = t1016 * t777 + t1108;
t695 = pkin(3) * t1056 - t1104 + t1176;
t694 = -qJ(2) * t806 - t1016 * t821 + t1017 * t855;
t693 = -t1021 * t946 + t1025 * t697;
t692 = t1021 * t697 + t1025 * t946;
t691 = -pkin(3) * t808 + t1092 - t1173;
t690 = t1031 - t1141;
t687 = t1018 * t764 + t1022 * t1036;
t686 = t1018 * t1044 + t1022 * t760;
t685 = t1018 * t1036 - t1022 * t764;
t684 = t1018 * t760 - t1022 * t1044;
t675 = -t1019 * t734 + t1023 * t764;
t674 = -t1019 * t735 + t1023 * t1036;
t673 = t1019 * t764 + t1023 * t734;
t672 = t1019 * t1036 + t1023 * t735;
t671 = -pkin(1) * t696 - pkin(2) * t776;
t670 = -qJ(5) * t1135 + t1042;
t669 = -pkin(4) * t1135 + t688;
t668 = -t1020 * t738 + t1024 * t739;
t667 = t1020 * t739 + t1024 * t738;
t666 = t1019 * t710 + t1023 * t1044;
t665 = t1019 * t1044 - t1023 * t710;
t664 = t1019 * t706 + t1023 * t760;
t663 = t1019 * t760 - t1023 * t706;
t662 = (t809 + t856) * pkin(4) + t1030;
t661 = (-t1056 + t1033) * qJ(5) + t1031;
t660 = -t1019 * t684 + t1023 * t859;
t659 = t1019 * t859 + t1023 * t684;
t658 = -t1020 * t728 + t1024 * t732;
t657 = -t1020 * t727 + t1024 * t731;
t656 = -t1020 * t726 + t1024 * t730;
t655 = -t1020 * t725 + t1024 * t729;
t654 = t1020 * t732 + t1024 * t728;
t653 = t1020 * t731 + t1024 * t727;
t652 = t1020 * t730 + t1024 * t726;
t651 = t1020 * t729 + t1024 * t725;
t646 = t1019 * t685 + t1023 * t822;
t645 = t1019 * t822 - t1023 * t685;
t636 = -t1021 * t1056 - t1195;
t635 = -t1021 * t1033 + t1195;
t634 = t1025 * t1056 - t1198;
t633 = t1025 * t1033 + t1198;
t631 = -qJ(2) * t818 - t1016 * t733 + t1017 * t758;
t630 = -t1020 * t701 + t1024 * t703;
t629 = -t1020 * t700 + t1024 * t702;
t628 = t1020 * t703 + t1024 * t701;
t627 = t1020 * t702 + t1024 * t700;
t626 = -pkin(7) * t1108 - qJ(2) * t696 - t1016 * t768;
t625 = pkin(3) * t842 + pkin(8) * t638;
t624 = -t1021 * t809 - t1188;
t623 = t1021 * t808 + t1188;
t622 = t1025 * t809 - t1189;
t621 = -t1025 * t808 + t1189;
t620 = t1023 * t661 - t1033 * t1117 - t1177;
t619 = -t1020 * t695 + t1024 * t766 - t1186;
t618 = qJ(5) * t1093 - t1019 * t662 + t1174;
t617 = t1019 * t1042 + t1023 * t688;
t616 = t1019 * t688 - t1023 * t1042;
t615 = -pkin(8) * t728 - t637;
t614 = pkin(5) * t685 - qJ(5) * t687;
t613 = -t1176 + t1019 * t661 + (pkin(3) + t1116) * t1033;
t612 = -t1020 * t691 + t1024 * t740 + t1181;
t611 = pkin(2) * t1056 + t1020 * t766 + t1024 * t695 + t1185;
t610 = t1023 * t662 + t1058 * t809 + t1173;
t609 = pkin(8) * t732 - t1160 + t638;
t608 = -t1020 * t673 + t1024 * t675;
t607 = -t1020 * t672 + t1024 * t674;
t606 = t1020 * t675 + t1024 * t673;
t605 = t1020 * t674 + t1024 * t672;
t604 = -t1016 * t667 + t1017 * t668;
t603 = -t1020 * t665 + t1024 * t666;
t602 = t1020 * t666 + t1024 * t665;
t601 = -pkin(2) * t808 + t1020 * t740 + t1024 * t691 - t1180;
t600 = -t1020 * t663 + t1024 * t664;
t599 = t1020 * t664 + t1024 * t663;
t598 = -t1020 * t659 + t1024 * t660;
t597 = t1020 * t660 + t1024 * t659;
t596 = -t1016 * t654 + t1017 * t658;
t595 = -t1016 * t653 + t1017 * t657;
t594 = -t1016 * t652 + t1017 * t656;
t593 = -t1016 * t651 + t1017 * t655;
t592 = t1016 * t658 + t1017 * t654;
t591 = t1016 * t655 + t1017 * t651;
t590 = -t1192 + t709;
t589 = -t1020 * t645 + t1024 * t646;
t588 = t1020 * t646 + t1024 * t645;
t587 = t1025 * t596 + t1155;
t586 = t1025 * t593 + t1155;
t585 = t1021 * t596 - t1150;
t584 = t1021 * t593 - t1150;
t583 = t1024 * t638 - t1100;
t582 = t1020 * t638 + t1088;
t578 = -t1016 * t628 + t1017 * t630;
t577 = -t1016 * t627 + t1017 * t629;
t576 = -pkin(8) * t725 - t1019 * t669 + t1023 * t670;
t575 = t1187 + t708;
t574 = -pkin(4) * t914 + (-t1012 - t1137) * qJ(5) + t1034 + t1192;
t573 = pkin(8) * t729 + t1019 * t670 + t1023 * t669 - t1160;
t572 = pkin(5) * t1044 - t1121 * t711 - t1107;
t571 = pkin(5) * t760 - t1121 * t707 + t1096;
t570 = pkin(4) * t875 + qJ(5) * t873 - t1042 - t1187;
t569 = -pkin(8) * t616 + (qJ(5) * t1023 - t1117) * t690;
t568 = -t1020 * t616 + t1024 * t617;
t567 = t1020 * t617 + t1024 * t616;
t566 = pkin(5) * t710 - qJ(5) * t711 - t581;
t565 = pkin(5) * t706 - qJ(5) * t707 - t580;
t564 = -pkin(1) * t592 - pkin(2) * t654 - pkin(3) * t728;
t563 = -t1020 * t613 + t1024 * t620 + t1186;
t562 = -t1016 * t606 + t1017 * t608;
t561 = -t1016 * t605 + t1017 * t607;
t560 = pkin(8) * t617 + (t1058 + t1116) * t690;
t559 = -t1020 * t610 + t1024 * t618 - t1181;
t558 = pkin(2) * t1033 + t1020 * t620 + t1024 * t613 - t1185;
t557 = -t1016 * t602 + t1017 * t603;
t556 = t1016 * t603 + t1017 * t602;
t555 = -t1016 * t599 + t1017 * t600;
t554 = t1016 * t600 + t1017 * t599;
t553 = -pkin(1) * t591 - pkin(2) * t651 - pkin(3) * t725 + pkin(4) * t812 - qJ(5) * t810;
t552 = -t1016 * t597 + t1017 * t598;
t551 = pkin(2) * t809 + t1020 * t618 + t1024 * t610 + t1180;
t550 = -t1016 * t611 + t1017 * t619 - t1200;
t549 = -t1016 * t588 + t1017 * t589;
t548 = t1016 * t589 + t1017 * t588;
t547 = -pkin(7) * t654 - t1020 * t609 + t1024 * t615;
t546 = t1021 * t711 + t1025 * t557;
t545 = t1021 * t557 - t1025 * t711;
t544 = -t1016 * t582 + t1017 * t583;
t543 = t1016 * t583 + t1017 * t582;
t542 = t1021 * t707 + t1025 * t555;
t541 = t1021 * t555 - t1025 * t707;
t538 = pkin(7) * t658 + t1020 * t615 + t1024 * t609 - t1161;
t537 = -pkin(7) * t582 - pkin(8) * t1088 - t1020 * t625;
t536 = -t1021 * t842 + t1025 * t544;
t535 = t1021 * t544 + t1025 * t842;
t534 = -t1016 * t601 + t1017 * t612 + t1191;
t533 = pkin(2) * t842 + pkin(7) * t583 - pkin(8) * t1100 + t1024 * t625;
t532 = t1021 * t687 + t1025 * t549;
t531 = t1021 * t549 - t1025 * t687;
t530 = t1019 * t539 + t1023 * t644;
t529 = t1019 * t644 - t1023 * t539;
t528 = -pkin(7) * t651 - t1020 * t573 + t1024 * t576;
t527 = -t1016 * t567 + t1017 * t568;
t526 = t1016 * t568 + t1017 * t567;
t525 = pkin(7) * t655 + t1020 * t576 + t1024 * t573 - t1161;
t524 = pkin(5) * t822 - t1121 * t687 - t540;
t523 = -t1021 * t690 + t1025 * t527;
t522 = t1021 * t527 + t1025 * t690;
t521 = -pkin(8) * t665 - t1019 * t572 + t1023 * t566;
t520 = -pkin(8) * t663 - t1019 * t571 + t1023 * t565;
t519 = -pkin(3) * t711 + pkin(8) * t666 + t1019 * t566 + t1023 * t572;
t518 = -pkin(3) * t707 + pkin(8) * t664 + t1019 * t565 + t1023 * t571;
t517 = -pkin(1) * t543 - pkin(2) * t582 - pkin(3) * t637;
t516 = -t1016 * t558 + t1017 * t563 + t1200;
t515 = -t1016 * t551 + t1017 * t559 - t1191;
t514 = pkin(5) * t539 - qJ(5) * t540;
t513 = -pkin(8) * t645 - t1019 * t524 + t1023 * t614;
t512 = -pkin(1) * t556 - pkin(2) * t602 - pkin(3) * t665 - qJ(5) * t1044 + t1121 * t710 - t1096;
t511 = -pkin(1) * t554 - pkin(2) * t599 - pkin(3) * t663 - qJ(5) * t760 + t1121 * t706 - t1107;
t510 = -pkin(7) * t567 - t1020 * t560 + t1024 * t569;
t509 = -pkin(3) * t687 + pkin(8) * t646 + t1019 * t614 + t1023 * t524;
t508 = pkin(5) * t644 - t1121 * t540;
t507 = pkin(2) * t690 + pkin(7) * t568 + t1020 * t569 + t1024 * t560;
t506 = -qJ(2) * t592 - t1016 * t538 + t1017 * t547;
t505 = -t1020 * t529 + t1024 * t530;
t504 = t1020 * t530 + t1024 * t529;
t503 = -pkin(1) * t526 - pkin(2) * t567 - pkin(3) * t616 + pkin(4) * t1042 - qJ(5) * t688;
t502 = -pkin(1) * t548 - pkin(2) * t588 - pkin(3) * t645 - qJ(5) * t822 + t1121 * t685 + t539;
t501 = -qJ(2) * t543 - t1016 * t533 + t1017 * t537;
t500 = -qJ(2) * t591 - t1016 * t525 + t1017 * t528;
t499 = -pkin(7) * t602 - t1020 * t519 + t1024 * t521;
t498 = -pkin(7) * t599 - t1020 * t518 + t1024 * t520;
t497 = -pkin(2) * t711 + pkin(7) * t603 + t1020 * t521 + t1024 * t519;
t496 = -pkin(2) * t707 + pkin(7) * t600 + t1020 * t520 + t1024 * t518;
t495 = -pkin(7) * t588 - t1020 * t509 + t1024 * t513;
t494 = -pkin(2) * t687 + pkin(7) * t589 + t1020 * t513 + t1024 * t509;
t493 = -t1016 * t504 + t1017 * t505;
t492 = t1016 * t505 + t1017 * t504;
t491 = -pkin(8) * t529 - t1019 * t508 + t1023 * t514;
t490 = -qJ(2) * t526 - t1016 * t507 + t1017 * t510;
t489 = t1021 * t540 + t1025 * t493;
t488 = t1021 * t493 - t1025 * t540;
t487 = -pkin(3) * t540 + pkin(8) * t530 + t1019 * t514 + t1023 * t508;
t486 = -qJ(2) * t556 - t1016 * t497 + t1017 * t499;
t485 = -qJ(2) * t554 - t1016 * t496 + t1017 * t498;
t484 = -qJ(2) * t548 - t1016 * t494 + t1017 * t495;
t483 = -pkin(1) * t492 - pkin(2) * t504 - pkin(3) * t529 - qJ(5) * t644 + t1121 * t539;
t482 = -pkin(7) * t504 - t1020 * t487 + t1024 * t491;
t481 = -pkin(2) * t540 + pkin(7) * t505 + t1020 * t491 + t1024 * t487;
t480 = -qJ(2) * t492 - t1016 * t481 + t1017 * t482;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t992, -t993, 0, t966, 0, 0, 0, 0, 0, 0, -t1040, t963, t960, t865, 0, 0, 0, 0, 0, 0, t775, t796, t773, t693, 0, 0, 0, 0, 0, 0, t623, t636, t587, t536, 0, 0, 0, 0, 0, 0, t586, t624, t635, t523, 0, 0, 0, 0, 0, 0, t542, t546, t532, t489; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t993, -t992, 0, -t1046, 0, 0, 0, 0, 0, 0, t962, t961, t959, t864, 0, 0, 0, 0, 0, 0, t774, t795, t772, t692, 0, 0, 0, 0, 0, 0, t621, t634, t585, t535, 0, 0, 0, 0, 0, 0, t584, t622, t633, t522, 0, 0, 0, 0, 0, 0, t541, t545, t531, t488; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t891, 0, 0, 0, 0, 0, 0, t806, t838, t818, t696, 0, 0, 0, 0, 0, 0, -t641, t677, t592, t543, 0, 0, 0, 0, 0, 0, t591, t641, -t677, t526, 0, 0, 0, 0, 0, 0, t554, t556, t548, t492; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t993, 0, -t992, 0, t1052, -t977, t1046, pkin(6) * t1046, t968, -t1021 * t991 + t1025 * t989, t963, -t968, t1040, 0, -pkin(6) * t962 - t1016 * t1085 - t1021 * t957, -pkin(6) * t961 - t1017 * t1085 - t1021 * t958, -pkin(6) * t959 - t1025 * t891, -pkin(6) * t864 + (pkin(1) * t1021 - qJ(2) * t1025) * t891, t1025 * t844 - t1063, -t1021 * t955 + t1025 * t820, t1021 * t1134 + t1025 * t840, t1025 * t843 + t1063, -t1021 * t980 + t1025 * t839, qJDD(3) * t1021 + t1025 * t872, -pkin(6) * t774 - t1021 * t724 + t1025 * t694, -pkin(6) * t795 - t1021 * t741 + t1025 * t704, -pkin(6) * t772 - t1021 * t767 + t1025 * t631, -pkin(6) * t692 - t1021 * t671 + t1025 * t626, t1165, t1025 * t594 - t1154, -t1021 * t817 + t1194, t1166, t1021 * t810 - t1193, t1164, -pkin(6) * t621 - t1021 * t575 + t1025 * t534, -pkin(6) * t634 - t1021 * t590 + t1025 * t550, -pkin(6) * t585 - t1021 * t564 + t1025 * t506, -pkin(6) * t535 - t1021 * t517 + t1025 * t501, t1164, -t1021 * t812 - t1194, -t1021 * t811 + t1193, t1165, t1025 * t595 - t1154, t1166, -pkin(6) * t584 - t1021 * t553 + t1025 * t500, -pkin(6) * t622 - t1021 * t570 + t1025 * t515, -pkin(6) * t633 - t1021 * t574 + t1025 * t516, -pkin(6) * t522 - t1021 * t503 + t1025 * t490, -t1021 * t749 + t1025 * t578, -t1021 * t686 + t1025 * t552, -t1021 * t736 + t1025 * t562, -t1021 * t747 + t1025 * t577, -t1021 * t737 + t1025 * t561, -t1021 * t785 + t1025 * t604, -pkin(6) * t541 - t1021 * t511 + t1025 * t485, -pkin(6) * t545 - t1021 * t512 + t1025 * t486, -pkin(6) * t531 - t1021 * t502 + t1025 * t484, -pkin(6) * t488 - t1021 * t483 + t1025 * t480; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t992, 0, t993, 0, t977, t1052, t966, pkin(6) * t966, t967, t1021 * t989 + t1025 * t991, t961, -t967, -t962, 0, -pkin(6) * t1040 - t1016 * t1097 + t1025 * t957, pkin(6) * t963 - t1017 * t1097 + t1025 * t958, pkin(6) * t960 - t1021 * t891, pkin(6) * t865 + (-pkin(1) * t1025 - qJ(2) * t1021) * t891, t1021 * t844 + t1060, t1021 * t820 + t1025 * t955, t1021 * t840 - t1025 * t1134, t1021 * t843 - t1060, t1021 * t839 + t1025 * t980, -qJDD(3) * t1025 + t1021 * t872, pkin(6) * t775 + t1021 * t694 + t1025 * t724, pkin(6) * t796 + t1021 * t704 + t1025 * t741, pkin(6) * t773 + t1021 * t631 + t1025 * t767, pkin(6) * t693 + t1021 * t626 + t1025 * t671, t1167, t1021 * t594 + t1149, t1025 * t817 + t1197, t1168, -t1025 * t810 - t1196, t1169, pkin(6) * t623 + t1021 * t534 + t1025 * t575, pkin(6) * t636 + t1021 * t550 + t1025 * t590, pkin(6) * t587 + t1021 * t506 + t1025 * t564, pkin(6) * t536 + t1021 * t501 + t1025 * t517, t1169, t1025 * t812 - t1197, t1025 * t811 + t1196, t1167, t1021 * t595 + t1149, t1168, pkin(6) * t586 + t1021 * t500 + t1025 * t553, pkin(6) * t624 + t1021 * t515 + t1025 * t570, pkin(6) * t635 + t1021 * t516 + t1025 * t574, pkin(6) * t523 + t1021 * t490 + t1025 * t503, t1021 * t578 + t1025 * t749, t1021 * t552 + t1025 * t686, t1021 * t562 + t1025 * t736, t1021 * t577 + t1025 * t747, t1021 * t561 + t1025 * t737, t1021 * t604 + t1025 * t785, pkin(6) * t542 + t1021 * t485 + t1025 * t511, pkin(6) * t546 + t1021 * t486 + t1025 * t512, pkin(6) * t532 + t1021 * t484 + t1025 * t502, pkin(6) * t489 + t1021 * t480 + t1025 * t483; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t994, t995, 0, 0, t1005, 0.2e1 * t1016 * t1070, 0, t1006, 0, 0, -qJ(2) * t986 + t1017 * t1057, qJ(2) * t985 - t1016 * t1057, pkin(1) * t990 + qJ(2) * t988 + t893, pkin(1) * t976 + qJ(2) * t893, t1016 * t903 + t1017 * t902, t1016 * t890 + t1017 * t888, t1016 * t898 + t1017 * t895, t1016 * t901 + t1017 * t900, t1016 * t897 + t1017 * t894, t1016 * t930 + t1017 * t929, -pkin(1) * t950 + qJ(2) * t807 + t1016 * t855 + t1017 * t821, -pkin(1) * t952 + qJ(2) * t841 + t1016 * t858 + t1017 * t828, -pkin(1) * t911 + qJ(2) * t819 + t1016 * t758 + t1017 * t733, pkin(1) * t946 - pkin(7) * t1109 + qJ(2) * t697 + t1017 * t768, t1147, t1016 * t656 + t1017 * t652, -t1183, t1146, -t1182, t1143, -pkin(1) * t808 + t1016 * t612 + t1017 * t601 + t1190, pkin(1) * t1056 + t1016 * t619 + t1017 * t611 - t1199, qJ(2) * t596 + t1016 * t547 + t1017 * t538 - t1162, pkin(1) * t842 + qJ(2) * t544 + t1016 * t537 + t1017 * t533, t1143, t1183, t1182, t1147, t1016 * t657 + t1017 * t653, t1146, qJ(2) * t593 + t1016 * t528 + t1017 * t525 - t1162, pkin(1) * t809 + t1016 * t559 + t1017 * t551 - t1190, pkin(1) * t1033 + t1016 * t563 + t1017 * t558 + t1199, pkin(1) * t690 + qJ(2) * t527 + t1016 * t510 + t1017 * t507, t1016 * t630 + t1017 * t628, t1016 * t598 + t1017 * t597, t1016 * t608 + t1017 * t606, t1016 * t629 + t1017 * t627, t1016 * t607 + t1017 * t605, t1016 * t668 + t1017 * t667, -pkin(1) * t707 + qJ(2) * t555 + t1016 * t498 + t1017 * t496, -pkin(1) * t711 + qJ(2) * t557 + t1016 * t499 + t1017 * t497, -pkin(1) * t687 + qJ(2) * t549 + t1016 * t495 + t1017 * t494, -pkin(1) * t540 + qJ(2) * t493 + t1016 * t482 + t1017 * t481;];
tauB_reg  = t1;
