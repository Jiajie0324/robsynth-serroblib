% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR5_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:13:44
% EndTime: 2019-03-09 05:13:48
% DurationCPUTime: 2.10s
% Computational Cost: add. (5089->189), mult. (10874->321), div. (0->0), fcn. (11462->8), ass. (0->120)
t157 = cos(qJ(4));
t75 = sin(qJ(4));
t156 = sin(qJ(3));
t150 = pkin(7) + qJ(2);
t165 = t156 * t150;
t169 = -t156 * pkin(8) - t165;
t158 = cos(qJ(3));
t164 = t158 * t150;
t170 = t158 * pkin(8) + t164;
t72 = sin(pkin(10));
t73 = cos(pkin(10));
t87 = t169 * t73 - t170 * t72;
t88 = t169 * t72 + t170 * t73;
t25 = -t157 * t87 + t75 * t88;
t107 = t156 * t73 + t158 * t72;
t74 = sin(qJ(6));
t70 = t74 ^ 2;
t76 = cos(qJ(6));
t71 = t76 ^ 2;
t163 = (t70 - t71) * qJD(6);
t168 = -t156 * qJD(2) - qJD(3) * t164;
t167 = -t158 * qJD(2) + qJD(3) * t165;
t148 = t107 * qJD(3);
t133 = t148 * pkin(3);
t106 = -t156 * t72 + t158 * t73;
t97 = t157 * t106;
t39 = t75 * t107 - t97;
t28 = -qJD(3) * t97 + t39 * qJD(4) + t75 * t148;
t40 = t75 * t106 + t157 * t107;
t102 = t28 * qJ(5) - t40 * qJD(5) + t133;
t162 = pkin(4) + pkin(9);
t100 = t106 * qJD(3);
t29 = t40 * qJD(4) + t75 * t100 + t157 * t148;
t83 = t40 * pkin(5) + t25;
t166 = -qJD(6) * t83 - t162 * t29 - t102;
t26 = t157 * t88 + t75 * t87;
t34 = t167 * t73 - t168 * t72;
t35 = t167 * t72 + t168 * t73;
t78 = 0.2e1 * qJD(5);
t161 = pkin(3) * t75;
t143 = qJD(6) * t74;
t61 = -t73 * pkin(2) - pkin(1);
t43 = -t106 * pkin(3) + t61;
t89 = -t40 * qJ(5) + t43;
t19 = t162 * t39 + t89;
t80 = -pkin(8) * t100 + t35;
t81 = -t148 * pkin(8) - t34;
t13 = t26 * qJD(4) - t157 * t80 + t75 * t81;
t79 = -t28 * pkin(5) + t13;
t2 = t19 * t143 + t166 * t76 - t74 * t79;
t160 = t2 * t74;
t12 = t25 * qJD(4) - t157 * t81 - t75 * t80;
t7 = -t29 * pkin(5) - t12;
t5 = t7 * t74;
t6 = t7 * t76;
t142 = qJD(6) * t76;
t20 = -t39 * pkin(5) + t26;
t159 = t20 * t142 + t5;
t155 = t29 * t70;
t154 = t29 * t74;
t153 = t29 * t76;
t152 = t39 * t29;
t136 = t157 * pkin(3);
t127 = qJD(4) * t136;
t56 = t127 + qJD(5);
t60 = qJ(5) + t161;
t151 = t56 * t60;
t27 = t71 * t29;
t149 = t60 * t142 + t56 * t74;
t140 = qJ(5) * qJD(6);
t147 = qJD(5) * t74 + t76 * t140;
t145 = qJD(6) * t20;
t141 = qJD(6) * t162;
t139 = 0.2e1 * t152;
t23 = -0.2e1 * t40 * t28;
t138 = t74 * t153;
t64 = qJD(4) * t161;
t134 = t74 * t142;
t38 = t39 ^ 2;
t128 = t38 * t134;
t126 = 0.2e1 * (t72 ^ 2 + t73 ^ 2) * qJD(2);
t63 = -t136 - pkin(4);
t10 = -t74 * t19 + t76 * t83;
t11 = t76 * t19 + t74 * t83;
t121 = t10 * t76 + t11 * t74;
t120 = -t10 * t74 + t11 * t76;
t119 = -t26 * t12 + t25 * t13;
t48 = (t70 + t71) * t64;
t118 = -qJ(5) * t29 - qJD(5) * t39;
t117 = qJ(5) * t56 + qJD(5) * t60;
t114 = t40 * t142 - t28 * t74;
t113 = t40 * t143 + t28 * t76;
t112 = t39 * t142 + t154;
t111 = t39 * t143 - t153;
t59 = -pkin(9) + t63;
t110 = qJD(6) * (t39 * t60 - t40 * t59);
t109 = qJD(6) * (qJ(5) * t39 + t162 * t40);
t108 = 0.2e1 * t28 * t39 - 0.2e1 * t29 * t40;
t105 = t162 * t28 + t118;
t101 = -t29 * t60 - t39 * t56 + t40 * t64;
t99 = 0.2e1 * t100;
t94 = -t28 * t59 + t101;
t3 = -t19 * t142 + t166 * t74 + t76 * t79;
t93 = t120 * qJD(6) + t3 * t76 - t160;
t92 = -t121 * qJD(6) - t2 * t76 - t3 * t74;
t91 = 0.2e1 * t12 * t39 + 0.2e1 * t13 * t40 - 0.2e1 * t25 * t28 - 0.2e1 * t26 * t29;
t67 = qJ(5) * t78;
t66 = qJD(5) * t76;
t55 = -0.2e1 * t134;
t54 = 0.2e1 * t134;
t52 = t56 * t76;
t50 = 0.2e1 * t163;
t42 = t164 * t73 - t165 * t72;
t41 = -t164 * t72 - t165 * t73;
t24 = t39 * pkin(4) + t89;
t16 = -t39 * t163 + t138;
t15 = -0.4e1 * t39 * t134 - t155 + t27;
t14 = t29 * pkin(4) + t102;
t1 = -t10 * t143 - t160 + (qJD(6) * t11 + t3) * t76;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, qJ(2) * t126, t107 * t99, 0.2e1 * t106 ^ 2 * qJD(3) - 0.2e1 * t107 * t148, 0, -0.2e1 * t106 * t148, 0, 0, 0.2e1 * t61 * t148, t61 * t99, -0.2e1 * t35 * t107 - 0.2e1 * t42 * t148 + 0.2e1 * (-qJD(3) * t41 - t34) * t106, -0.2e1 * t34 * t42 + 0.2e1 * t35 * t41, t23, t108, 0, t139, 0, 0, 0.2e1 * t39 * t133 + 0.2e1 * t43 * t29, 0.2e1 * t40 * t133 - 0.2e1 * t43 * t28, t91, 0.2e1 * t43 * t133 + 0.2e1 * t119, 0, 0, 0, t23, t108, t139, t91, -0.2e1 * t14 * t39 - 0.2e1 * t24 * t29, -0.2e1 * t14 * t40 + 0.2e1 * t24 * t28, 0.2e1 * t14 * t24 + 0.2e1 * t119, 0.2e1 * t70 * t152 + 0.2e1 * t128, 0.4e1 * t39 * t138 - 0.2e1 * t38 * t163, 0.2e1 * t114 * t39 + 0.2e1 * t40 * t154, 0.2e1 * t39 * t27 - 0.2e1 * t128, -0.2e1 * t113 * t39 + 0.2e1 * t40 * t153, t23, -0.2e1 * t10 * t28 + 0.2e1 * t111 * t20 + 0.2e1 * t3 * t40 - 0.2e1 * t39 * t6, 0.2e1 * t11 * t28 + 0.2e1 * t112 * t20 + 0.2e1 * t2 * t40 + 0.2e1 * t39 * t5, 0.2e1 * t120 * t29 + 0.2e1 * t92 * t39, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t20 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, t100, 0, 0, 0, 0, 0, 0, 0, 0, t29, -t28, 0, t133, 0, 0, 0, 0, 0, 0, 0, -t29, t28, t14, 0, 0, 0, 0, 0, 0, -t114, t113, t27 + t155, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, -t148, 0, t35, t34, 0, 0, 0, 0, -t28, 0, -t29, 0, -t13, t12 (t157 * t28 - t29 * t75 + (-t157 * t39 + t40 * t75) * qJD(4)) * pkin(3) (-t157 * t13 - t12 * t75 + (t157 * t26 + t25 * t75) * qJD(4)) * pkin(3), 0, t28, t29, 0, 0, 0, -t28 * t63 + t101, t13, -t12, -t12 * t60 + t13 * t63 + t25 * t64 + t26 * t56, t16, t15, -t113, -t16, -t114, 0, t74 * t110 + t94 * t76 + t159, t6 + t76 * t110 + (-t94 - t145) * t74, -t1, t121 * t64 + t20 * t56 + t93 * t59 + t60 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t64, -0.2e1 * t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t64, 0.2e1 * t56, 0.2e1 * t63 * t64 + 0.2e1 * t151, t55, t50, 0, t54, 0, 0, 0.2e1 * t149, -0.2e1 * t60 * t143 + 0.2e1 * t52, -0.2e1 * t48, 0.2e1 * t59 * t48 + 0.2e1 * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, -t29, 0, -t13, t12, 0, 0, 0, t28, t29, 0, 0, 0, pkin(4) * t28 + t118, t13, -t12, -pkin(4) * t13 - qJ(5) * t12 + qJD(5) * t26, t16, t15, -t113, -t16, -t114, 0, t105 * t76 + t74 * t109 + t159, t6 + t76 * t109 + (-t105 - t145) * t74, -t1, qJ(5) * t7 + qJD(5) * t20 - t162 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, -t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, t78 + t127, -pkin(4) * t64 + t117, t55, t50, 0, t54, 0, 0, t147 + t149, t52 + t66 + (-qJ(5) - t60) * t143, -t48, -t162 * t48 + t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, t67, t55, t50, 0, t54, 0, 0, 0.2e1 * t147, -0.2e1 * t74 * t140 + 0.2e1 * t66, 0, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, 0, t13, 0, 0, 0, 0, 0, 0, -t113, -t114, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0, -t111, -t28, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, t143, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, 0, -t142, 0, -t59 * t143 + t76 * t64, -t59 * t142 - t74 * t64, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, 0, -t142, 0, t74 * t141, t76 * t141, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t142, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
