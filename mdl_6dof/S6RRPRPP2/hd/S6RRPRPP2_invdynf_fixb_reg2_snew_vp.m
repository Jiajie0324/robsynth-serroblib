% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:27:37
% EndTime: 2019-05-06 12:27:45
% DurationCPUTime: 7.99s
% Computational Cost: add. (17315->308), mult. (39918->324), div. (0->0), fcn. (28274->8), ass. (0->185)
t2402 = cos(pkin(9));
t2405 = sin(qJ(2));
t2401 = sin(pkin(9));
t2408 = cos(qJ(2));
t2441 = t2401 * t2408;
t2467 = t2402 * t2405 + t2441;
t2377 = t2467 * qJD(1);
t2404 = sin(qJ(4));
t2407 = cos(qJ(4));
t2359 = qJD(2) * t2404 + t2377 * t2407;
t2442 = t2401 * t2405;
t2475 = t2402 * t2408 - t2442;
t2375 = t2475 * qJD(1);
t2373 = qJD(4) - t2375;
t2453 = qJD(2) * t2405;
t2432 = qJD(1) * t2453;
t2435 = t2408 * qJDD(1);
t2424 = -t2432 + t2435;
t2431 = t2408 * qJD(1) * qJD(2);
t2436 = t2405 * qJDD(1);
t2425 = t2431 + t2436;
t2418 = t2401 * t2424 + t2402 * t2425;
t2416 = -t2407 * qJDD(2) + t2404 * t2418;
t2291 = (qJD(4) - t2373) * t2359 + t2416;
t2357 = -qJD(2) * t2407 + t2404 * t2377;
t2413 = -t2357 * qJD(4) + t2404 * qJDD(2) + t2407 * t2418;
t2444 = t2357 * t2373;
t2411 = t2413 + t2444;
t2257 = t2291 * t2404 + t2411 * t2407;
t2406 = sin(qJ(1));
t2409 = cos(qJ(1));
t2260 = t2291 * t2407 - t2411 * t2404;
t2356 = t2359 ^ 2;
t2461 = t2357 ^ 2;
t2311 = t2356 + t2461;
t2237 = t2260 * t2401 - t2311 * t2402;
t2240 = t2260 * t2402 + t2311 * t2401;
t2491 = t2237 * t2405 - t2240 * t2408;
t2508 = t2257 * t2409 + t2406 * t2491;
t2507 = -t2406 * t2257 + t2409 * t2491;
t2412 = t2413 - t2444;
t2347 = t2373 ^ 2;
t2322 = t2356 + t2347;
t2333 = t2359 * t2357;
t2378 = t2402 * t2424;
t2421 = t2401 * t2425 - t2378;
t2420 = qJDD(4) + t2421;
t2469 = t2333 + t2420;
t2483 = -t2322 * t2404 + t2407 * t2469;
t2494 = -t2412 * t2401 + t2402 * t2483;
t2495 = t2401 * t2483 + t2402 * t2412;
t2230 = t2405 * t2495 - t2408 * t2494;
t2482 = t2322 * t2407 + t2404 * t2469;
t2514 = t2406 * t2230 + t2409 * t2482;
t2513 = t2230 * t2409 - t2406 * t2482;
t2211 = t2237 * t2408 + t2240 * t2405;
t2466 = -t2461 - t2347;
t2470 = -t2333 + t2420;
t2487 = t2404 * t2466 + t2470 * t2407;
t2497 = t2409 * t2487;
t2415 = t2359 * qJD(4) + t2416;
t2292 = t2373 * t2359 + t2415;
t2486 = -t2470 * t2404 + t2407 * t2466;
t2501 = t2402 * t2486;
t2493 = t2292 * t2401 + t2501;
t2502 = t2401 * t2486;
t2496 = -t2402 * t2292 + t2502;
t2506 = -t2405 * t2496 + t2408 * t2493;
t2512 = t2406 * t2506 - t2497;
t2499 = t2406 * t2487;
t2510 = t2409 * t2506 + t2499;
t2503 = t2405 * t2494 + t2408 * t2495;
t2505 = t2405 * t2493 + t2408 * t2496;
t2398 = t2405 ^ 2;
t2399 = t2408 ^ 2;
t2468 = -t2399 - t2398;
t2488 = (qJ(3) * t2468 - pkin(7)) * qJD(1);
t2471 = qJD(4) + t2373;
t2463 = qJD(1) ^ 2;
t2462 = qJD(2) ^ 2;
t2460 = t2375 ^ 2;
t2459 = t2377 ^ 2;
t2458 = -2 * qJD(3);
t2457 = t2408 * g(3);
t2456 = t2359 * qJ(6);
t2455 = qJD(2) * t2375;
t2454 = qJD(2) * t2377;
t2443 = t2375 * t2377;
t2428 = t2409 * g(1) + t2406 * g(2);
t2422 = -pkin(1) * t2463 + qJDD(1) * pkin(7) - t2428;
t2365 = -t2405 * g(3) + t2408 * t2422;
t2394 = -t2399 * t2463 - t2462;
t2326 = pkin(2) * t2394 + qJ(3) * t2435 + t2365;
t2433 = pkin(2) * t2408 + pkin(1);
t2417 = qJDD(2) * pkin(2) - t2457 + ((-pkin(7) - qJ(3)) * qJDD(1) + t2433 * t2463 + t2428) * t2405;
t2285 = t2402 * t2326 - t2375 * t2458 + t2401 * t2417;
t2345 = -pkin(3) * t2375 - pkin(8) * t2377;
t2267 = -pkin(3) * t2462 + qJDD(2) * pkin(8) + t2345 * t2375 + t2285;
t2388 = t2406 * g(1) - t2409 * g(2);
t2426 = -qJDD(3) + t2388;
t2410 = -pkin(8) * t2455 + (-t2378 + t2454) * pkin(3) + (pkin(3) * t2442 - pkin(8) * t2467 - t2433) * qJDD(1) + (t2488 + (0.2e1 * t2405 * pkin(2) + pkin(3) * t2441 - pkin(8) * t2475) * qJD(2)) * qJD(1) - t2426;
t2236 = t2407 * t2267 + t2404 * t2410;
t2430 = pkin(4) * t2373 - (2 * qJD(5));
t2235 = -t2404 * t2267 + t2407 * t2410;
t2429 = t2401 * t2326 - t2402 * t2417;
t2329 = pkin(4) * t2357 - qJ(5) * t2359;
t2427 = t2420 * qJ(5) + 0.2e1 * qJD(5) * t2373 - t2357 * t2329 + t2236;
t2423 = -t2420 * pkin(4) - t2347 * qJ(5) + qJDD(5) - t2235;
t2266 = -qJDD(2) * pkin(3) - t2462 * pkin(8) + ((2 * qJD(3)) + t2345) * t2377 + t2429;
t2419 = t2415 * pkin(4) - qJ(5) * t2412 + t2266;
t2395 = t2408 * t2463 * t2405;
t2393 = -t2398 * t2463 - t2462;
t2387 = -qJDD(2) + t2395;
t2386 = qJDD(2) + t2395;
t2385 = t2468 * t2463;
t2384 = -t2406 * qJDD(1) - t2409 * t2463;
t2383 = qJDD(1) * t2409 - t2406 * t2463;
t2382 = t2468 * qJDD(1);
t2381 = -0.2e1 * t2432 + t2435;
t2380 = 0.2e1 * t2431 + t2436;
t2379 = qJDD(1) * pkin(1) + pkin(7) * t2463 + t2388;
t2367 = -t2459 - t2462;
t2364 = -t2405 * t2422 - t2457;
t2363 = t2387 * t2408 - t2393 * t2405;
t2362 = -t2386 * t2405 + t2394 * t2408;
t2361 = t2387 * t2405 + t2393 * t2408;
t2360 = t2386 * t2408 + t2394 * t2405;
t2349 = -qJDD(2) + t2443;
t2348 = qJDD(2) + t2443;
t2346 = -t2460 - t2462;
t2337 = -t2418 + t2455;
t2336 = t2418 + t2455;
t2335 = -t2421 + t2454;
t2334 = t2421 + t2454;
t2331 = -t2459 - t2460;
t2330 = t2433 * qJDD(1) + (-0.2e1 * pkin(2) * t2453 - t2488) * qJD(1) + t2426;
t2328 = -t2364 * t2405 + t2365 * t2408;
t2327 = t2364 * t2408 + t2365 * t2405;
t2320 = t2349 * t2402 - t2367 * t2401;
t2319 = t2349 * t2401 + t2367 * t2402;
t2308 = t2346 * t2402 - t2348 * t2401;
t2307 = t2346 * t2401 + t2348 * t2402;
t2300 = t2335 * t2402 - t2337 * t2401;
t2299 = t2335 * t2401 + t2337 * t2402;
t2290 = t2359 * t2471 + t2416;
t2287 = -t2319 * t2405 + t2320 * t2408;
t2286 = t2319 * t2408 + t2320 * t2405;
t2284 = t2377 * t2458 - t2429;
t2269 = -t2307 * t2405 + t2308 * t2408;
t2268 = t2307 * t2408 + t2308 * t2405;
t2264 = -t2299 * t2405 + t2300 * t2408;
t2263 = t2299 * t2408 + t2300 * t2405;
t2249 = t2290 * t2401 + t2501;
t2246 = -t2290 * t2402 + t2502;
t2244 = -t2284 * t2401 + t2285 * t2402;
t2243 = t2284 * t2402 + t2285 * t2401;
t2234 = t2359 * t2430 + t2419;
t2233 = t2329 * t2359 + t2423;
t2232 = -pkin(4) * t2347 + t2427;
t2224 = -t2246 * t2405 + t2249 * t2408;
t2221 = t2246 * t2408 + t2249 * t2405;
t2219 = -t2243 * t2405 + t2244 * t2408;
t2218 = t2243 * t2408 + t2244 * t2405;
t2217 = t2416 * pkin(5) + t2461 * qJ(6) - qJDD(6) + t2419 + (pkin(5) * t2471 + t2430 + t2456) * t2359;
t2210 = -t2461 * pkin(5) + t2415 * qJ(6) + 0.2e1 * qJD(6) * t2357 + (-t2456 + (-pkin(4) - pkin(5)) * t2373) * t2373 + t2427;
t2209 = -t2420 * pkin(5) + (pkin(5) * t2357 - 0.2e1 * qJD(6) + t2329) * t2359 + t2423 - t2411 * qJ(6);
t2208 = -t2235 * t2404 + t2236 * t2407;
t2207 = t2235 * t2407 + t2236 * t2404;
t2206 = t2208 * t2402 + t2266 * t2401;
t2205 = t2208 * t2401 - t2266 * t2402;
t2204 = t2232 * t2407 + t2233 * t2404;
t2203 = t2232 * t2404 - t2233 * t2407;
t2202 = t2209 * t2404 + t2210 * t2407;
t2201 = -t2209 * t2407 + t2210 * t2404;
t2200 = t2204 * t2402 + t2234 * t2401;
t2199 = t2204 * t2401 - t2234 * t2402;
t2198 = -t2205 * t2405 + t2206 * t2408;
t2197 = t2205 * t2408 + t2206 * t2405;
t2196 = t2202 * t2402 + t2217 * t2401;
t2195 = t2202 * t2401 - t2217 * t2402;
t2194 = -t2199 * t2405 + t2200 * t2408;
t2193 = t2199 * t2408 + t2200 * t2405;
t2192 = -t2195 * t2405 + t2196 * t2408;
t2191 = t2195 * t2408 + t2196 * t2405;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2384, -t2383, 0, -t2406 * t2388 - t2409 * t2428, 0, 0, 0, 0, 0, 0, t2362 * t2409 - t2406 * t2381, t2363 * t2409 + t2406 * t2380, -t2382 * t2409 + t2406 * t2385, t2328 * t2409 - t2406 * t2379, 0, 0, 0, 0, 0, 0, t2269 * t2409 + t2406 * t2334, t2287 * t2409 + t2406 * t2336, t2264 * t2409 + t2406 * t2331, t2219 * t2409 - t2406 * t2330, 0, 0, 0, 0, 0, 0, t2224 * t2409 + t2499, t2513, t2507, t2198 * t2409 + t2406 * t2207, 0, 0, 0, 0, 0, 0, t2510, t2507, -t2513, t2194 * t2409 + t2406 * t2203, 0, 0, 0, 0, 0, 0, t2510, -t2513, -t2507, t2192 * t2409 + t2406 * t2201; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2383, t2384, 0, t2388 * t2409 - t2406 * t2428, 0, 0, 0, 0, 0, 0, t2406 * t2362 + t2381 * t2409, t2406 * t2363 - t2380 * t2409, -t2406 * t2382 - t2385 * t2409, t2406 * t2328 + t2379 * t2409, 0, 0, 0, 0, 0, 0, t2406 * t2269 - t2334 * t2409, t2406 * t2287 - t2336 * t2409, t2406 * t2264 - t2331 * t2409, t2406 * t2219 + t2330 * t2409, 0, 0, 0, 0, 0, 0, t2406 * t2224 - t2497, t2514, t2508, t2406 * t2198 - t2207 * t2409, 0, 0, 0, 0, 0, 0, t2512, t2508, -t2514, t2406 * t2194 - t2203 * t2409, 0, 0, 0, 0, 0, 0, t2512, -t2514, -t2508, t2406 * t2192 - t2201 * t2409; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2360, t2361, 0, t2327, 0, 0, 0, 0, 0, 0, t2268, t2286, t2263, t2218, 0, 0, 0, 0, 0, 0, t2221, -t2503, -t2211, t2197, 0, 0, 0, 0, 0, 0, t2505, -t2211, t2503, t2193, 0, 0, 0, 0, 0, 0, t2505, t2503, t2211, t2191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2463, -qJDD(1), 0, -t2428, 0, 0, 0, 0, 0, 0, t2362, t2363, -t2382, t2328, 0, 0, 0, 0, 0, 0, t2269, t2287, t2264, t2219, 0, 0, 0, 0, 0, 0, t2224, t2230, t2491, t2198, 0, 0, 0, 0, 0, 0, t2506, t2491, -t2230, t2194, 0, 0, 0, 0, 0, 0, t2506, -t2230, -t2491, t2192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2463, 0, t2388, 0, 0, 0, 0, 0, 0, t2381, -t2380, -t2385, t2379, 0, 0, 0, 0, 0, 0, -t2334, -t2336, -t2331, t2330, 0, 0, 0, 0, 0, 0, -t2487, t2482, t2257, -t2207, 0, 0, 0, 0, 0, 0, -t2487, t2257, -t2482, -t2203, 0, 0, 0, 0, 0, 0, -t2487, -t2482, -t2257, -t2201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2360, t2361, 0, t2327, 0, 0, 0, 0, 0, 0, t2268, t2286, t2263, t2218, 0, 0, 0, 0, 0, 0, t2221, -t2503, -t2211, t2197, 0, 0, 0, 0, 0, 0, t2505, -t2211, t2503, t2193, 0, 0, 0, 0, 0, 0, t2505, t2503, t2211, t2191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2394, t2387, t2435, t2365, 0, 0, 0, 0, 0, 0, t2308, t2320, t2300, t2244, 0, 0, 0, 0, 0, 0, t2249, -t2494, -t2240, t2206, 0, 0, 0, 0, 0, 0, t2493, -t2240, t2494, t2200, 0, 0, 0, 0, 0, 0, t2493, t2494, t2240, t2196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2386, t2393, -t2436, t2364, 0, 0, 0, 0, 0, 0, t2307, t2319, t2299, t2243, 0, 0, 0, 0, 0, 0, t2246, -t2495, -t2237, t2205, 0, 0, 0, 0, 0, 0, t2496, -t2237, t2495, t2199, 0, 0, 0, 0, 0, 0, t2496, t2495, t2237, t2195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2381, t2380, t2385, -t2379, 0, 0, 0, 0, 0, 0, t2334, t2336, t2331, -t2330, 0, 0, 0, 0, 0, 0, t2487, -t2482, -t2257, t2207, 0, 0, 0, 0, 0, 0, t2487, -t2257, t2482, t2203, 0, 0, 0, 0, 0, 0, t2487, t2482, t2257, t2201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2346, t2349, t2335, t2285, 0, 0, 0, 0, 0, 0, t2486, -t2483, -t2260, t2208, 0, 0, 0, 0, 0, 0, t2486, -t2260, t2483, t2204, 0, 0, 0, 0, 0, 0, t2486, t2483, t2260, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2348, t2367, t2337, t2284, 0, 0, 0, 0, 0, 0, -t2290, -t2412, t2311, -t2266, 0, 0, 0, 0, 0, 0, -t2292, t2311, t2412, -t2234, 0, 0, 0, 0, 0, 0, -t2292, t2412, -t2311, -t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2334, t2336, t2331, -t2330, 0, 0, 0, 0, 0, 0, t2487, -t2482, -t2257, t2207, 0, 0, 0, 0, 0, 0, t2487, -t2257, t2482, t2203, 0, 0, 0, 0, 0, 0, t2487, t2482, t2257, t2201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2466, -t2469, -t2291, t2236, 0, 0, 0, 0, 0, 0, t2466, -t2291, t2469, t2232, 0, 0, 0, 0, 0, 0, t2466, t2469, t2291, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2470, -t2322, -t2411, t2235, 0, 0, 0, 0, 0, 0, t2470, -t2411, t2322, -t2233, 0, 0, 0, 0, 0, 0, t2470, t2322, t2411, -t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2290, t2412, -t2311, t2266, 0, 0, 0, 0, 0, 0, t2292, -t2311, -t2412, t2234, 0, 0, 0, 0, 0, 0, t2292, -t2412, t2311, t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2466, -t2291, t2469, t2232, 0, 0, 0, 0, 0, 0, t2466, t2469, t2291, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2292, -t2311, -t2412, t2234, 0, 0, 0, 0, 0, 0, t2292, -t2412, t2311, t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2470, t2411, -t2322, t2233, 0, 0, 0, 0, 0, 0, -t2470, -t2322, -t2411, t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2466, t2469, t2291, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2470, -t2322, -t2411, t2209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2292, t2412, -t2311, -t2217;];
f_new_reg  = t1;
