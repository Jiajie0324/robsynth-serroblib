% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:52:36
% EndTime: 2019-03-09 09:52:51
% DurationCPUTime: 8.09s
% Computational Cost: add. (8593->641), mult. (19888->727), div. (0->0), fcn. (14413->10), ass. (0->302)
t231 = cos(qJ(2));
t386 = cos(pkin(9));
t312 = t386 * t231;
t203 = qJD(1) * t312;
t225 = sin(pkin(9));
t228 = sin(qJ(2));
t342 = qJD(1) * t228;
t160 = t225 * t342 - t203;
t152 = qJD(4) + t160;
t313 = t386 * t228;
t176 = t225 * t231 + t313;
t163 = t176 * qJD(1);
t227 = sin(qJ(4));
t230 = cos(qJ(4));
t129 = qJD(2) * t227 + t163 * t230;
t372 = t129 * t227;
t127 = -t230 * qJD(2) + t163 * t227;
t377 = t127 * t230;
t286 = t372 + t377;
t341 = qJD(4) * t227;
t337 = qJD(1) * qJD(2);
t317 = t228 * t337;
t250 = qJDD(1) * t176 - t225 * t317;
t243 = qJD(2) * t203 + t250;
t336 = qJD(2) * qJD(4);
t268 = t227 * qJDD(2) - t163 * t341 + (t243 + t336) * t230;
t396 = t230 * t268;
t311 = t129 * t341 - t396;
t340 = qJD(4) * t230;
t239 = -t230 * qJDD(2) + t227 * t243;
t68 = qJD(4) * t129 + t239;
t392 = t127 * t340 + t227 * t68;
t7 = t160 * t286 + t311 + t392;
t306 = t152 * t227;
t451 = t392 - t129 * t306 + t230 * (t127 * t160 + t268);
t162 = t176 * qJD(2);
t335 = t228 * qJDD(1);
t290 = -qJDD(1) * t312 + t225 * t335;
t111 = qJD(1) * t162 + t290;
t105 = qJDD(4) + t111;
t450 = t105 * qJ(5) + t152 * qJD(5);
t221 = qJ(2) + pkin(9);
t215 = sin(t221);
t232 = cos(qJ(1));
t362 = t215 * t232;
t229 = sin(qJ(1));
t364 = t215 * t229;
t436 = g(1) * t362 + g(2) * t364;
t305 = t152 * t230;
t357 = t227 * t105;
t449 = t152 * t340 + t160 * t305 + t357;
t418 = pkin(4) + pkin(5);
t329 = t418 * t227;
t384 = qJ(5) * t230;
t448 = t329 - t384;
t379 = t127 * t163;
t370 = t160 * t227;
t93 = t230 * t105;
t429 = t93 + (-t341 - t370) * t152;
t251 = t429 - t379;
t447 = t429 + t379;
t269 = -t225 * t228 + t312;
t165 = t269 * qJD(2);
t394 = t68 * t230;
t395 = t268 * t227;
t445 = ((t127 * t227 - t129 * t230) * qJD(4) - t394 - t395) * t176 - t286 * t165;
t444 = t68 * qJ(6) + t127 * qJD(6);
t443 = 0.2e1 * t450;
t440 = t418 * t230;
t407 = t231 * pkin(2);
t214 = pkin(1) + t407;
t184 = -t214 * qJD(1) + qJD(3);
t76 = t160 * pkin(3) - t163 * pkin(8) + t184;
t406 = qJ(3) + pkin(7);
t318 = t406 * t228;
t178 = qJD(1) * t318;
t403 = qJD(2) * pkin(2);
t170 = -t178 + t403;
t185 = t406 * t231;
t179 = qJD(1) * t185;
t314 = t386 * t179;
t110 = t225 * t170 + t314;
t97 = qJD(2) * pkin(8) + t110;
t42 = -t227 * t97 + t230 * t76;
t349 = qJD(5) - t42;
t113 = -t225 * t178 + t314;
t439 = t227 * qJD(5) + t113;
t420 = t129 ^ 2;
t438 = -t152 ^ 2 - t420;
t437 = t162 * qJ(5) - qJD(5) * t269;
t216 = cos(t221);
t435 = t216 * pkin(3) + t215 * pkin(8);
t434 = g(1) * t229 - g(2) * t232;
t295 = g(1) * t232 + g(2) * t229;
t421 = t127 ^ 2;
t432 = t420 - t421;
t431 = t163 * qJD(2);
t100 = t105 * pkin(4);
t430 = t100 - qJDD(5);
t374 = t129 * t163;
t24 = -t374 + t449;
t258 = t374 + t449;
t333 = pkin(2) * t317 + qJDD(3);
t334 = t231 * qJDD(1);
t383 = qJDD(1) * pkin(1);
t45 = -pkin(2) * t334 + t111 * pkin(3) - pkin(8) * t243 + t333 - t383;
t315 = qJD(2) * t406;
t259 = -t228 * qJD(3) - t231 * t315;
t104 = qJDD(2) * pkin(2) + t259 * qJD(1) - qJDD(1) * t318;
t157 = t231 * qJD(3) - t228 * t315;
t112 = t157 * qJD(1) + qJDD(1) * t185;
t59 = t225 * t104 + t386 * t112;
t54 = qJDD(2) * pkin(8) + t59;
t8 = t227 * t45 + t230 * t54 + t76 * t340 - t97 * t341;
t4 = t8 + t450;
t2 = t4 + t444;
t30 = t129 * qJ(6) + t42;
t350 = qJD(5) - t30;
t21 = -t418 * t152 + t350;
t428 = t152 * t21 + t2;
t417 = pkin(2) * t225;
t209 = pkin(8) + t417;
t382 = t105 * t209;
t166 = t225 * t179;
t109 = t386 * t170 - t166;
t299 = qJD(2) * pkin(3) + t109;
t261 = qJ(5) * t129 + t299;
t44 = pkin(4) * t127 - t261;
t427 = t152 * t44 - t382;
t354 = t230 * t232;
t356 = t227 * t229;
t153 = t216 * t356 + t354;
t352 = t232 * t227;
t355 = t229 * t230;
t155 = t216 * t352 - t355;
t365 = t215 * t227;
t9 = -t227 * t54 + t230 * t45 - t97 * t340 - t76 * t341;
t254 = g(1) * t155 + g(2) * t153 + g(3) * t365 + t9;
t248 = t254 + t430;
t29 = -t418 * t127 + qJD(6) + t261;
t404 = qJ(6) * t268;
t426 = (qJD(6) + t29) * t129 + t248 + t404;
t322 = t176 * t341;
t367 = t165 * t230;
t271 = t322 - t367;
t425 = -t129 * t162 + t152 * t271 - t176 * t93 + t268 * t269;
t321 = t176 * t340;
t368 = t165 * t227;
t272 = t321 + t368;
t424 = t162 * t127 + t152 * t272 + t176 * t357 - t269 * t68;
t419 = t163 ^ 2;
t416 = pkin(2) * t228;
t415 = pkin(5) * t105;
t412 = g(2) * t406;
t410 = g(3) * t216;
t409 = g(3) * t231;
t408 = t230 * pkin(4);
t405 = qJ(5) * t68;
t140 = t152 * qJ(5);
t43 = t227 * t76 + t230 * t97;
t31 = qJ(6) * t127 + t43;
t26 = t140 + t31;
t402 = t152 * t26;
t35 = t140 + t43;
t401 = t152 * t35;
t400 = t152 * t42;
t399 = t152 * t43;
t398 = t209 * t268;
t393 = -t386 * t104 + t225 * t112;
t114 = -t386 * t178 - t166;
t85 = pkin(2) * t342 + pkin(3) * t163 + pkin(8) * t160;
t52 = t230 * t114 + t227 * t85;
t108 = -pkin(3) * t269 - pkin(8) * t176 - t214;
t122 = t386 * t185 - t225 * t318;
t70 = t227 * t108 + t230 * t122;
t390 = -t152 * t448 + t439;
t351 = qJ(6) - t209;
t37 = t163 * qJ(5) + t52;
t389 = qJ(6) * t370 - t230 * qJD(6) + t351 * t341 - t37;
t106 = t227 * t114;
t174 = t351 * t230;
t388 = -qJD(4) * t174 - t227 * qJD(6) - t106 - (qJ(6) * t160 - t85) * t230 + t418 * t163;
t291 = pkin(4) * t227 - t384;
t387 = t152 * t291 - t439;
t385 = pkin(7) * qJDD(1);
t381 = t127 * qJ(5);
t380 = t127 * t152;
t378 = t127 * t209;
t376 = t129 * t127;
t375 = t129 * t152;
t373 = t129 * t209;
t371 = t152 * t163;
t369 = t163 * t160;
t366 = t176 * t227;
t363 = t215 * t230;
t361 = t216 * t229;
t360 = t216 * t230;
t359 = t216 * t232;
t358 = t227 * qJ(5);
t353 = t232 * t406;
t347 = t436 * t227;
t346 = t436 * t230;
t345 = g(1) * t364 - g(2) * t362;
t222 = t228 ^ 2;
t223 = t231 ^ 2;
t344 = t222 - t223;
t343 = t222 + t223;
t339 = qJD(5) * t230;
t83 = t386 * t157 + t225 * t259;
t330 = t228 * t403;
t86 = pkin(3) * t162 - pkin(8) * t165 + t330;
t332 = t108 * t340 + t227 * t86 + t230 * t83;
t331 = t108 * t341 + t122 * t340 + t227 * t83;
t53 = -qJDD(2) * pkin(3) + t393;
t47 = -qJ(5) * t269 + t70;
t235 = qJD(1) ^ 2;
t327 = t228 * t235 * t231;
t201 = t232 * t214;
t326 = pkin(3) * t359 + pkin(8) * t362 + t201;
t325 = g(1) * t359 + g(2) * t361 + g(3) * t215;
t13 = t68 * pkin(4) - qJ(5) * t268 - t129 * qJD(5) + t53;
t5 = -pkin(5) * t68 + qJDD(6) - t13;
t324 = t5 - t410;
t323 = t386 * pkin(2);
t51 = t230 * t85 - t106;
t154 = t216 * t355 - t352;
t309 = -t153 * pkin(4) + qJ(5) * t154;
t156 = t216 * t354 + t356;
t308 = -t155 * pkin(4) + qJ(5) * t156;
t116 = t227 * t122;
t69 = t230 * t108 - t116;
t82 = t157 * t225 - t386 * t259;
t121 = t225 * t185 + t406 * t313;
t304 = -t209 * t394 - t325;
t303 = t231 * t317;
t189 = pkin(8) * t361;
t302 = -t229 * t416 + t189;
t192 = pkin(8) * t359;
t301 = -t232 * t416 + t192;
t300 = t407 + t435;
t210 = -t323 - pkin(3);
t298 = -pkin(3) * t215 - t416;
t297 = g(1) * t153 - g(2) * t155;
t296 = g(1) * t154 - g(2) * t156;
t6 = -t9 - t430;
t1 = -qJD(6) * t129 - t404 - t415 + t6;
t293 = -t1 + t402;
t292 = t358 + t408;
t34 = -pkin(4) * t152 + t349;
t289 = -t227 * t35 + t230 * t34;
t288 = -t227 * t43 - t230 * t42;
t46 = -t105 * t269 + t152 * t162;
t20 = t230 * t86 - t331;
t284 = -qJ(6) * t165 - qJD(6) * t176;
t282 = -t214 - t435;
t279 = -qJD(4) * t152 * t209 - t410;
t277 = -t358 - t440;
t276 = -0.2e1 * pkin(1) * t337 - pkin(7) * qJDD(2);
t273 = -t154 * pkin(4) - qJ(5) * t153 + t353;
t19 = -t122 * t341 + t332;
t270 = pkin(4) * t360 + t216 * t358 + t300;
t267 = t156 * pkin(4) + qJ(5) * t155 + t326;
t266 = -t152 * t299 - t382;
t264 = -t13 + t279;
t263 = -t279 + t53;
t262 = t210 - t358;
t23 = t127 * t306 - t394;
t148 = -qJDD(1) * t214 + t333;
t33 = t268 + t380;
t234 = qJD(2) ^ 2;
t253 = -pkin(7) * t234 + 0.2e1 * t383 + t434;
t252 = pkin(1) * t235 + t295 - t385;
t249 = (-g(1) * t282 - t412) * t229;
t18 = t127 * t272 + t68 * t366;
t246 = t129 * t44 - t248;
t245 = g(1) * t156 + g(2) * t154 + g(3) * t363 - t8;
t242 = t245 + t400;
t240 = -qJDD(4) - t290 + t376 - t431;
t238 = t163 * t340 + t227 * t336 + t239;
t237 = -t238 + t375;
t186 = qJ(5) * t363;
t173 = t351 * t227;
t172 = t262 - t408;
t159 = t160 ^ 2;
t141 = -t262 + t440;
t72 = pkin(4) * t129 + t381;
t71 = t176 * t291 + t121;
t57 = -t176 * t448 - t121;
t55 = -t418 * t129 - t381;
t48 = pkin(4) * t269 - t69;
t38 = -t163 * pkin(4) - t51;
t36 = qJ(6) * t366 + t47;
t32 = t116 + (-qJ(6) * t176 - t108) * t230 + t418 * t269;
t25 = t291 * t165 + (qJD(4) * t292 - t339) * t176 + t82;
t22 = t129 * t305 + t395;
t17 = -t129 * t271 + t176 * t396;
t16 = -t448 * t165 + (qJD(4) * t277 + t339) * t176 - t82;
t15 = -pkin(4) * t162 - t20;
t14 = t19 + t437;
t11 = qJ(6) * t321 + (-qJD(4) * t122 - t284) * t227 + t332 + t437;
t10 = qJ(6) * t322 - t418 * t162 + (t284 - t86) * t230 + t331;
t3 = [0, 0, 0, 0, 0, qJDD(1), t434, t295, 0, 0, qJDD(1) * t222 + 0.2e1 * t303, 0.2e1 * t228 * t334 - 0.2e1 * t344 * t337, qJDD(2) * t228 + t231 * t234, qJDD(1) * t223 - 0.2e1 * t303, qJDD(2) * t231 - t228 * t234, 0, t228 * t276 + t231 * t253, -t228 * t253 + t231 * t276, 0.2e1 * t343 * t385 - t295, -g(1) * (-pkin(1) * t229 + pkin(7) * t232) - g(2) * (pkin(1) * t232 + pkin(7) * t229) + (t343 * pkin(7) ^ 2 + pkin(1) ^ 2) * qJDD(1), t163 * t165 + t176 * t243, -t176 * t111 - t165 * t160 - t163 * t162 + t243 * t269, qJD(2) * t165 + qJDD(2) * t176, -t111 * t269 + t160 * t162, -qJD(2) * t162 + qJDD(2) * t269, 0, -qJDD(2) * t121 - t111 * t214 - t148 * t269 + t162 * t184 + t434 * t216 + (t160 * t416 - t82) * qJD(2), -t83 * qJD(2) - t122 * qJDD(2) + t148 * t176 + t163 * t330 + t184 * t165 - t214 * t243 - t345, -t109 * t165 - t110 * t162 - t122 * t111 + t121 * t243 - t83 * t160 + t82 * t163 + t176 * t393 + t269 * t59 - t295, t59 * t122 + t110 * t83 + t393 * t121 - t109 * t82 - t148 * t214 + t184 * t330 - g(1) * (-t214 * t229 + t353) - g(2) * (t229 * t406 + t201) t17, t445, -t425, t18, -t424, t46, -t299 * t368 + t105 * t69 + t121 * t68 + t127 * t82 + t152 * t20 + t162 * t42 - t269 * t9 + (t227 * t53 - t299 * t340) * t176 + t296, -t299 * t367 - t105 * t70 + t121 * t268 + t129 * t82 - t152 * t19 - t162 * t43 + t269 * t8 + (t230 * t53 + t299 * t341) * t176 - t297, -t127 * t19 - t129 * t20 - t268 * t69 - t68 * t70 + t288 * t165 + (-t227 * t8 - t230 * t9 + (t227 * t42 - t230 * t43) * qJD(4)) * t176 + t345, -g(1) * t353 - g(2) * t326 + t53 * t121 + t43 * t19 + t42 * t20 - t299 * t82 + t9 * t69 + t8 * t70 + t249, t17, -t425, -t445, t46, t424, t18, t44 * t368 - t105 * t48 + t127 * t25 - t15 * t152 - t162 * t34 + t269 * t6 + t68 * t71 + (t13 * t227 + t340 * t44) * t176 + t296, -t127 * t14 + t129 * t15 - t47 * t68 + t48 * t268 + t289 * t165 + (-t227 * t4 + t230 * t6 + (-t227 * t34 - t230 * t35) * qJD(4)) * t176 + t345, -t44 * t367 + t105 * t47 - t129 * t25 + t14 * t152 + t162 * t35 - t269 * t4 - t268 * t71 + (-t13 * t230 + t341 * t44) * t176 + t297, -g(1) * t273 - g(2) * t267 + t13 * t71 + t35 * t14 + t34 * t15 + t44 * t25 + t4 * t47 + t6 * t48 + t249, t17, -t445, t425, t18, -t424, t46, -t29 * t368 + t1 * t269 - t10 * t152 - t105 * t32 - t127 * t16 - t162 * t21 - t57 * t68 + (-t227 * t5 - t29 * t340) * t176 + t296, t29 * t367 + t105 * t36 + t11 * t152 + t129 * t16 + t162 * t26 - t269 * t2 + t57 * t268 + (t230 * t5 - t29 * t341) * t176 + t297, -t10 * t129 + t11 * t127 - t32 * t268 + t36 * t68 + (-t21 * t230 + t227 * t26) * t165 + (-t1 * t230 + t2 * t227 + (t21 * t227 + t230 * t26) * qJD(4)) * t176 - t345, t2 * t36 + t26 * t11 + t1 * t32 + t21 * t10 + t5 * t57 + t29 * t16 - g(1) * (-pkin(5) * t154 + t273) - g(2) * (pkin(5) * t156 - qJ(6) * t362 + t267) + (-g(1) * (qJ(6) * t215 + t282) - t412) * t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327, t344 * t235, t335, t327, t334, qJDD(2), t228 * t252 - t409, g(3) * t228 + t231 * t252, 0, 0, t369, -t159 + t419 (t203 + t160) * qJD(2) + t250, -t369, -t290, qJDD(2), -t410 + t113 * qJD(2) - t184 * t163 + (qJDD(2) * t386 - t160 * t342) * pkin(2) - t393 + t436, qJD(2) * t114 + t160 * t184 + (-qJDD(2) * t225 - t163 * t342) * pkin(2) + t325 - t59, -t111 * t417 - t243 * t323 - (-t110 + t113) * t163 + (t114 - t109) * t160, t109 * t113 - t110 * t114 + (-t386 * t393 - t409 + t225 * t59 + (-qJD(1) * t184 + t295) * t228) * pkin(2), t22, -t7, t24, t23, t447, -t371, -t113 * t127 - t152 * t51 - t163 * t42 + t210 * t68 + t227 * t266 - t230 * t263 + t346, -t113 * t129 + t152 * t52 + t163 * t43 + t210 * t268 + t227 * t263 + t230 * t266 - t347, t127 * t52 + t129 * t51 + (-t160 * t42 + t8 + (-t42 + t373) * qJD(4)) * t230 + (-t160 * t43 + t398 - t9 + (-t43 + t378) * qJD(4)) * t227 + t304, t53 * t210 - t43 * t52 - t42 * t51 + t299 * t113 - g(1) * (t232 * t298 + t192) - g(2) * (t229 * t298 + t189) - g(3) * t300 + (qJD(4) * t288 - t9 * t227 + t8 * t230) * t209, t22, t24, t7, -t371, -t447, t23, t387 * t127 + t152 * t38 + t163 * t34 + t172 * t68 + t427 * t227 + t264 * t230 + t346, t127 * t37 - t129 * t38 + (t160 * t34 + t4 + (t34 + t373) * qJD(4)) * t230 + (-t160 * t35 + t398 + t6 + (-t35 + t378) * qJD(4)) * t227 + t304, -t387 * t129 - t152 * t37 - t163 * t35 - t172 * t268 + t264 * t227 - t230 * t427 + t347, t13 * t172 - t35 * t37 - t34 * t38 - g(1) * t301 - g(2) * t302 - g(3) * t270 + t387 * t44 + (qJD(4) * t289 + t6 * t227 + t4 * t230) * t209 + t295 * t215 * (pkin(3) + t292) t22, t7, -t24, t23, t447, -t371, t105 * t173 - t127 * t390 - t141 * t68 - t152 * t388 + t163 * t21 + t230 * t324 - t29 * t306 + t346, -t105 * t174 + t129 * t390 + t141 * t268 + t152 * t389 - t163 * t26 + t227 * t324 + t29 * t305 + t347, t389 * t127 - t388 * t129 + t173 * t268 - t174 * t68 + t293 * t227 - t230 * t428 + t325, -t2 * t174 - t1 * t173 + t5 * t141 - g(1) * (-qJ(6) * t359 + t301) - g(2) * (-qJ(6) * t361 + t302) - g(3) * (pkin(5) * t360 + t270) + t390 * t29 + t389 * t26 + t388 * t21 + (g(3) * qJ(6) + t295 * (pkin(3) - t277)) * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t290 + 0.2e1 * t431 (t203 - t160) * qJD(2) + t250, -t159 - t419, t109 * t163 + t110 * t160 + t148 - t434, 0, 0, 0, 0, 0, 0, t251, -t258, -t451, t163 * t299 + (t9 + t399) * t230 + (t8 - t400) * t227 - t434, 0, 0, 0, 0, 0, 0, t251 (t372 - t377) * t160 + t311 - t392, t258, -t163 * t44 + (-t6 + t401) * t230 + (t152 * t34 + t4) * t227 - t434, 0, 0, 0, 0, 0, 0, t251, t258, t451, t163 * t29 + t227 * t428 + t293 * t230 - t434; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t376, t432, t33, -t376, t237, t105, t129 * t299 + t254 + t399, -t127 * t299 + t242, 0, 0, t376, t33, -t432, t105, -t237, -t376, -t127 * t72 + t100 - t246 + t399, -pkin(4) * t268 - t405 + (t35 - t43) * t129 + (t34 - t349) * t127, -t127 * t44 + t129 * t72 - t242 + t443, t4 * qJ(5) - t6 * pkin(4) - t44 * t72 - t34 * t43 - g(1) * t308 - g(2) * t309 - g(3) * (-pkin(4) * t365 + t186) + t349 * t35, t376, -t432, -t33, -t376, t237, t105, t127 * t55 + t152 * t31 + (pkin(5) + t418) * t105 + t426, t127 * t29 - t129 * t55 - t152 * t30 - t245 + t443 + t444, t405 + t418 * t268 + (-t26 + t31) * t129 + (-t21 + t350) * t127, t2 * qJ(5) - t1 * t418 - t21 * t31 - t29 * t55 - g(1) * (-pkin(5) * t155 + t308) - g(2) * (-pkin(5) * t153 + t309) - g(3) * (-t215 * t329 + t186) + t350 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t33, t438, t246 - t401, 0, 0, 0, 0, 0, 0, t240, t438, -t33, -t402 - t415 - t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t238 - t375, t268 - t380, -t420 - t421, -t127 * t26 + t129 * t21 + t324 + t436;];
tau_reg  = t3;
