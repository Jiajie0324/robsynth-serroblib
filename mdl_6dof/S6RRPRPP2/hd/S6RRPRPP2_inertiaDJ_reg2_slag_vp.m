% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPP2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRPP2_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:52:39
% EndTime: 2019-03-09 09:52:43
% DurationCPUTime: 2.75s
% Computational Cost: add. (2865->248), mult. (6462->401), div. (0->0), fcn. (5840->6), ass. (0->139)
t96 = sin(qJ(4));
t154 = t96 * qJ(5);
t168 = pkin(4) + pkin(5);
t98 = cos(qJ(4));
t175 = t168 * t98;
t116 = t154 + t175;
t146 = t98 * qJD(5);
t180 = qJD(4) * t116 - t146;
t151 = cos(pkin(9));
t99 = cos(qJ(2));
t131 = t151 * t99;
t95 = sin(pkin(9));
t97 = sin(qJ(2));
t75 = t95 * t97 - t131;
t179 = 0.2e1 * t75;
t76 = t151 * t97 + t95 * t99;
t66 = t76 * qJD(2);
t160 = t96 * t66;
t91 = qJD(4) * t98;
t135 = t76 * t91;
t147 = t97 * qJD(2);
t67 = qJD(2) * t131 - t147 * t95;
t40 = t67 * t96 + t135;
t12 = t160 * t76 + t40 * t75;
t178 = -0.2e1 * t12;
t159 = t98 * t66;
t158 = t98 * t67;
t90 = qJD(4) * t96;
t37 = t76 * t90 - t158;
t11 = -0.2e1 * t159 * t76 + t179 * t37;
t176 = qJ(5) * t66 + qJD(5) * t75;
t155 = qJ(5) * t98;
t115 = -t168 * t96 + t155;
t177 = 0.2e1 * t176;
t93 = t96 ^ 2;
t94 = t98 ^ 2;
t156 = t93 - t94;
t174 = t156 * qJD(4);
t145 = t98 * qJD(6);
t63 = t66 * pkin(4);
t137 = pkin(2) * t147;
t110 = pkin(3) * t66 - pkin(8) * t67 + t137;
t157 = -qJ(3) - pkin(7);
t130 = qJD(2) * t157;
t112 = -t97 * qJD(3) + t130 * t99;
t64 = t99 * qJD(3) + t130 * t97;
t30 = t112 * t95 + t151 * t64;
t88 = -pkin(2) * t99 - pkin(1);
t41 = pkin(3) * t75 - pkin(8) * t76 + t88;
t80 = t157 * t97;
t81 = t157 * t99;
t48 = -t151 * t81 + t80 * t95;
t7 = t110 * t98 - t30 * t96 - t41 * t90 - t48 * t91;
t4 = -t63 - t7;
t172 = -qJ(6) * t37 + t145 * t76 - t4;
t45 = t96 * t48;
t18 = t41 * t98 - t45;
t19 = t41 * t96 + t48 * t98;
t6 = -t110 * t96 - t30 * t98 - t41 * t91 + t48 * t90;
t171 = t6 * t96 - t7 * t98 + (t18 * t96 - t19 * t98) * qJD(4);
t13 = qJ(5) * t75 + t19;
t14 = -t75 * pkin(4) - t18;
t3 = -t6 + t176;
t170 = t3 * t96 - t4 * t98 + (t13 * t98 + t14 * t96) * qJD(4);
t167 = t98 * pkin(4);
t124 = t154 + t167;
t169 = qJD(4) * t124 - t146;
t140 = t96 * t158;
t74 = t76 ^ 2;
t16 = -0.4e1 * t140 * t76 + 0.2e1 * t174 * t74;
t78 = -0.2e1 * t174;
t101 = 0.2e1 * qJD(5);
t29 = -t112 * t151 + t95 * t64;
t47 = -t151 * t80 - t95 * t81;
t166 = t47 * t29;
t86 = pkin(2) * t95 + pkin(8);
t165 = t66 * t86;
t164 = t75 * t86;
t163 = t76 * t67;
t162 = t76 * t96;
t161 = t76 * t98;
t153 = t96 * qJ(6);
t152 = qJ(6) - t86;
t150 = qJD(4) * t76;
t149 = t96 * qJD(5);
t148 = t96 * qJD(6);
t144 = t99 * qJD(2);
t143 = t66 * t179;
t142 = -0.2e1 * pkin(1) * qJD(2);
t87 = -pkin(2) * t151 - pkin(3);
t138 = 0.2e1 * qJD(4) * t87;
t136 = t86 * t90;
t134 = t86 * t91;
t133 = t96 * t91;
t132 = t97 * t144;
t73 = t152 * t98;
t129 = -pkin(4) * t90 + t149;
t128 = t74 * t133;
t5 = t115 * t67 - t180 * t76 - t29;
t114 = t87 - t154;
t58 = -t114 + t175;
t127 = -t150 * t58 + t5;
t123 = pkin(4) * t96 - t155;
t121 = -t13 * t96 + t14 * t98;
t120 = -t18 * t98 - t19 * t96;
t118 = t67 * t87 - t165;
t117 = -t76 * t87 + t164;
t38 = t75 * t91 + t160;
t35 = t75 * t90 - t159;
t15 = t115 * t76 - t47;
t49 = (-pkin(5) * t96 + t155) * qJD(4) + t129;
t113 = qJD(4) * t15 + t49 * t76 + t58 * t67;
t71 = t114 - t167;
t8 = t123 * t67 + t169 * t76 + t29;
t111 = -t8 + (t71 * t76 - t164) * qJD(4);
t108 = qJ(6) * t135 + t148 * t76 + t153 * t67 - t6;
t20 = t123 * t76 + t47;
t65 = qJ(5) * t91 + t129;
t106 = qJD(4) * t20 - t65 * t76 + t67 * t71 - t165;
t105 = qJD(4) * t115 + t149;
t1 = -t66 * pkin(5) - t172;
t10 = t153 * t76 + t13;
t2 = t108 + t176;
t9 = t45 + (-qJ(6) * t76 - t41) * t98 - t168 * t75;
t104 = -t1 * t98 + t2 * t96 + (t10 * t98 + t9 * t96) * qJD(4);
t103 = qJD(4) * t121 + t3 * t98 + t4 * t96;
t102 = qJD(4) * t120 - t6 * t98 - t7 * t96;
t92 = qJ(5) * t101;
t83 = -0.2e1 * t133;
t82 = 0.2e1 * t133;
t72 = t152 * t96;
t51 = -qJD(4) * t73 - t148;
t50 = t152 * t90 - t145;
t33 = (t93 + t94) * t67;
t24 = 0.2e1 * t163 * t94 - 0.2e1 * t128;
t23 = 0.2e1 * t163 * t93 + 0.2e1 * t128;
t22 = t150 * t156 - t140;
t21 = 0.4e1 * t133 * t76 + t156 * t67;
t17 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t132, 0.2e1 * (-t97 ^ 2 + t99 ^ 2) * qJD(2), 0, -0.2e1 * t132, 0, 0, t97 * t142, t99 * t142, 0, 0, 0.2e1 * t163, -0.2e1 * t66 * t76 - 0.2e1 * t67 * t75, 0, t143, 0, 0, 0.2e1 * t137 * t75 + 0.2e1 * t66 * t88, 0.2e1 * t137 * t76 + 0.2e1 * t67 * t88, 0.2e1 * t29 * t76 - 0.2e1 * t30 * t75 + 0.2e1 * t47 * t67 - 0.2e1 * t48 * t66, 0.2e1 * t137 * t88 + 0.2e1 * t30 * t48 + 0.2e1 * t166, t24, t16, -t11, t23, t178, t143, 0.2e1 * t162 * t29 + 0.2e1 * t18 * t66 + 0.2e1 * t40 * t47 + 0.2e1 * t7 * t75, 0.2e1 * t161 * t29 - 0.2e1 * t19 * t66 - 0.2e1 * t37 * t47 + 0.2e1 * t6 * t75, 0.2e1 * t120 * t67 + 0.2e1 * t171 * t76, 0.2e1 * t18 * t7 - 0.2e1 * t19 * t6 + 0.2e1 * t166, t24, -t11, -t16, t143, 0.2e1 * t12, t23, -0.2e1 * t14 * t66 + 0.2e1 * t162 * t8 + 0.2e1 * t20 * t40 - 0.2e1 * t4 * t75, 0.2e1 * t121 * t67 - 0.2e1 * t170 * t76, 0.2e1 * t13 * t66 - 0.2e1 * t161 * t8 + 0.2e1 * t20 * t37 + 0.2e1 * t3 * t75, 0.2e1 * t13 * t3 + 0.2e1 * t14 * t4 + 0.2e1 * t20 * t8, t24, -t16, t11, t23, t178, t143, -0.2e1 * t1 * t75 - 0.2e1 * t15 * t40 - 0.2e1 * t162 * t5 - 0.2e1 * t9 * t66, 0.2e1 * t10 * t66 - 0.2e1 * t15 * t37 + 0.2e1 * t161 * t5 + 0.2e1 * t2 * t75, 0.2e1 * (t10 * t96 - t9 * t98) * t67 + 0.2e1 * t104 * t76, 0.2e1 * t1 * t9 + 0.2e1 * t10 * t2 + 0.2e1 * t15 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0, -t147, 0, -pkin(7) * t144, pkin(7) * t147, 0, 0, 0, 0, t67, 0, -t66, 0, -t29, -t30 (-t151 * t67 - t66 * t95) * pkin(2) (-t151 * t29 + t30 * t95) * pkin(2), -t22, -t21, t38, t22, -t35, 0, -t29 * t98 + t118 * t96 + (-t117 * t98 + t47 * t96) * qJD(4), t29 * t96 + t118 * t98 + (t117 * t96 + t47 * t98) * qJD(4), t102, t102 * t86 + t29 * t87, -t22, t38, t21, 0, t35, t22, t106 * t96 + t111 * t98, t103, -t106 * t98 + t111 * t96, t103 * t86 - t20 * t65 + t8 * t71, -t22, t21, -t38, t22, -t35, 0, -t113 * t96 + t127 * t98 - t51 * t75 + t72 * t66, t113 * t98 + t127 * t96 + t50 * t75 - t73 * t66 (-t51 * t76 + t67 * t72 - t2 + (-t73 * t76 - t9) * qJD(4)) * t98 + (t50 * t76 - t67 * t73 - t1 + (-t72 * t76 + t10) * qJD(4)) * t96, -t1 * t72 + t10 * t50 + t15 * t49 - t2 * t73 + t5 * t58 + t51 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, t78, 0, t83, 0, 0, t96 * t138, t98 * t138, 0, 0, t82, 0, -t78, 0, 0, t83, 0.2e1 * t65 * t98 + 0.2e1 * t71 * t90, 0, 0.2e1 * t65 * t96 - 0.2e1 * t71 * t91, -0.2e1 * t71 * t65, t82, -t78, 0, t83, 0, 0, 0.2e1 * t49 * t98 - 0.2e1 * t58 * t90, 0.2e1 * t49 * t96 + 0.2e1 * t58 * t91, -0.2e1 * t50 * t98 - 0.2e1 * t51 * t96 + 0.2e1 * (t72 * t98 - t73 * t96) * qJD(4), 0.2e1 * t49 * t58 - 0.2e1 * t50 * t73 - 0.2e1 * t51 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t67, 0, t137, 0, 0, 0, 0, 0, 0, -t35, -t38, -t33, -t171, 0, 0, 0, 0, 0, 0, -t35, -t33, t38, t170, 0, 0, 0, 0, 0, 0, -t35, t38, t33, t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 * t96 - t51 * t98 + (-t72 * t96 - t73 * t98) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, 0, -t40, t66, t7, t6, 0, 0, 0, -t37, 0, t66, t40, 0, -t4 + t63, -t124 * t67 + (qJD(4) * t123 - t149) * t76, -t6 + t177, -pkin(4) * t4 + qJ(5) * t3 + qJD(5) * t13, 0, 0, t37, 0, -t40, t66 (pkin(5) + t168) * t66 + t172, t108 + t177, t105 * t76 + t116 * t67, qJ(5) * t2 + qJD(5) * t10 - t1 * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, -t90, 0, -t134, t136, 0, 0, 0, t91, 0, 0, t90, 0, -t134, -t169, -t136, -t169 * t86, 0, 0, -t91, 0, -t90, 0, -t51, t50, t180, qJ(5) * t50 - qJD(5) * t73 - t168 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, -t91, 0, 0, 0, 0, 0, 0, 0, 0, -t90, 0, t91, t65, 0, 0, 0, 0, 0, 0, -t90, t91, 0, t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, t92, 0, 0, 0, 0, 0, 0, 0, t101, 0, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, -t37, 0, t4, 0, 0, 0, 0, 0, 0, -t66, 0, t37, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, t134, 0, 0, 0, 0, 0, 0, 0, 0, -t91, t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, -t37, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, t91, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t17;
