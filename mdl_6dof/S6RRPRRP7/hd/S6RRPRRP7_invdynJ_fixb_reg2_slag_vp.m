% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRRP7_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:20:14
% EndTime: 2019-03-09 12:20:29
% DurationCPUTime: 7.78s
% Computational Cost: add. (10418->675), mult. (21881->769), div. (0->0), fcn. (14586->8), ass. (0->317)
t236 = sin(qJ(5));
t240 = cos(qJ(5));
t242 = cos(qJ(2));
t377 = qJD(1) * t242;
t238 = sin(qJ(2));
t378 = qJD(1) * t238;
t146 = -qJD(1) * pkin(1) - pkin(2) * t377 - qJ(3) * t378;
t115 = pkin(3) * t377 - t146;
t241 = cos(qJ(4));
t390 = t241 * t242;
t237 = sin(qJ(4));
t396 = t237 * t238;
t154 = t390 + t396;
t141 = t154 * qJD(1);
t144 = -t237 * t377 + t241 * t378;
t64 = pkin(4) * t141 - pkin(9) * t144 + t115;
t363 = qJD(2) - qJD(4);
t442 = pkin(2) + pkin(3);
t359 = t442 * qJD(2);
t212 = pkin(7) * t378;
t160 = pkin(8) * t378 - t212;
t469 = qJD(3) - t160;
t126 = -t359 + t469;
t231 = qJD(2) * qJ(3);
t213 = pkin(7) * t377;
t328 = -pkin(8) * t377 + t213;
t145 = t231 + t328;
t79 = t237 * t126 + t241 * t145;
t74 = -pkin(9) * t363 + t79;
t31 = t236 * t64 + t240 * t74;
t464 = qJD(5) + t141;
t22 = qJ(6) * t464 + t31;
t470 = t22 * t464;
t425 = t464 * t31;
t372 = qJD(4) * t241;
t374 = qJD(2) * t242;
t283 = t237 * t374 + t238 * t372;
t365 = qJD(1) * qJD(4);
t351 = t242 * t365;
t366 = qJD(1) * qJD(2);
t353 = t238 * t366;
t69 = qJD(1) * t283 + qJDD(1) * t154 - t237 * t351 - t241 * t353;
t302 = -t144 * t363 - t69;
t66 = qJDD(5) + t69;
t375 = qJD(2) * t241;
t143 = t236 * t378 + t240 * t375;
t468 = t240 * t372 - t143;
t216 = t238 * qJDD(1);
t352 = t242 * t366;
t467 = -t352 - t216;
t162 = -t237 * qJ(3) - t241 * t442;
t127 = qJD(3) * t241 + qJD(4) * t162;
t163 = t241 * qJ(3) - t237 * t442;
t159 = -pkin(9) + t163;
t306 = -t127 * t464 - t159 * t66;
t336 = t240 * t363;
t105 = t144 * t236 + t336;
t107 = t240 * t144 - t236 * t363;
t78 = t241 * t126 - t237 * t145;
t73 = pkin(4) * t363 - t78;
t35 = t105 * pkin(5) - t107 * qJ(6) + t73;
t459 = t464 * t35;
t466 = t459 - t306;
t439 = pkin(9) * t66;
t465 = t459 - t439;
t370 = qJD(5) * t236;
t364 = t242 * qJDD(1);
t285 = -t237 * t364 - t365 * t396 + (t216 - t351) * t241;
t290 = t154 * qJD(2);
t253 = qJD(1) * t290 + t285;
t362 = qJDD(2) - qJDD(4);
t41 = qJD(5) * t336 + t144 * t370 + t236 * t362 - t240 * t253;
t42 = qJD(5) * t107 + t236 * t253 + t240 * t362;
t455 = t240 * t464;
t259 = t105 * t455 - (-t107 * t141 - t42) * t236 + t107 * t370 + t41 * t240;
t420 = t236 * t41;
t13 = t107 * t455 - t420;
t419 = t236 * t66;
t17 = -t107 * t144 + t455 * t464 + t419;
t405 = t105 * t240;
t406 = t105 * t236;
t417 = t240 * t42;
t452 = t242 * t237 - t238 * t241;
t97 = -qJD(4) * t154 + t290;
t463 = t452 * (qJD(5) * (-t107 * t240 + t406) - t417 + t420) + (t107 * t236 + t405) * t97;
t297 = t240 * t66 - t370 * t464;
t462 = t468 * t464 + t237 * (t107 * t363 + t297) - t241 * t41;
t383 = t242 * pkin(2) + t238 * qJ(3);
t461 = -pkin(1) - t383;
t458 = t464 * t73;
t93 = t241 * t160 + t237 * t328;
t414 = t127 - t93;
t413 = qJD(4) * t163 + t237 * t469 + t241 * t328;
t457 = -t107 * t464 + t42;
t319 = pkin(5) * t240 + qJ(6) * t236;
t456 = t154 * t319;
t441 = pkin(7) - pkin(8);
t171 = t441 * t238;
t172 = t441 * t242;
t454 = t241 * t171 - t172 * t237;
t239 = sin(qJ(1));
t243 = cos(qJ(1));
t453 = g(1) * t243 + g(2) * t239;
t222 = t242 * pkin(3);
t361 = t222 + t383;
t430 = t154 * pkin(4);
t293 = pkin(9) * t452 + t361 + t430;
t369 = qJD(5) * t240;
t418 = t236 * t97;
t296 = -t369 * t452 + t418;
t399 = t452 * t236;
t373 = qJD(4) * t237;
t96 = -t238 * t375 - t242 * t373 + t283;
t450 = t105 * t96 + t154 * t42 + t296 * t464 - t399 * t66;
t282 = t406 * t464 - t417;
t411 = pkin(7) * qJDD(2);
t447 = (qJD(1) * t461 + t146) * qJD(2) - t411;
t110 = t171 * t237 + t172 * t241;
t77 = pkin(1) + t293;
t427 = t240 * t110 + t236 * t77;
t332 = t238 * t359;
t217 = t238 * qJD(3);
t384 = qJ(3) * t374 + t217;
t113 = -t332 + t384;
t48 = pkin(4) * t96 - pkin(9) * t97 + t113;
t376 = qJD(2) * t238;
t161 = t441 * t376;
t333 = qJD(2) * t172;
t59 = qJD(4) * t454 - t241 * t161 + t237 * t333;
t10 = -qJD(5) * t427 - t236 * t59 + t240 * t48;
t445 = t363 ^ 2;
t318 = pkin(5) * t236 - qJ(6) * t240;
t444 = -qJD(6) * t236 + t318 * t464;
t443 = t107 ^ 2;
t440 = pkin(5) * t66;
t438 = pkin(5) * t144;
t436 = pkin(9) * t107;
t435 = g(1) * t239;
t434 = g(2) * t243;
t433 = g(3) * t452;
t132 = t452 * t239;
t432 = t132 * pkin(4);
t387 = t242 * t243;
t393 = t238 * t243;
t134 = t237 * t387 - t241 * t393;
t431 = t134 * pkin(4);
t87 = pkin(4) * t144 + pkin(9) * t141;
t50 = t236 * t87 + t240 * t78;
t428 = -t444 + t413;
t202 = qJ(3) * t377;
t131 = -t378 * t442 + t202;
t67 = t131 - t87;
t45 = t236 * t67 + t240 * t93;
t426 = qJ(6) * t66;
t30 = -t236 * t74 + t240 * t64;
t386 = qJD(6) - t30;
t21 = -pkin(5) * t464 + t386;
t424 = t144 * t21;
t423 = t144 * t22;
t422 = t144 * t30;
t421 = t144 * t31;
t416 = t240 * t97;
t412 = t444 - t79;
t410 = qJ(6) * t144;
t234 = qJDD(1) * pkin(1);
t408 = qJDD(2) * pkin(2);
t407 = t105 * t159;
t404 = t107 * t105;
t402 = t107 * t159;
t401 = t464 * t144;
t400 = t144 * t141;
t398 = t452 * t240;
t395 = t238 * t239;
t246 = qJD(1) ^ 2;
t392 = t238 * t246;
t391 = t239 * t242;
t382 = t243 * pkin(1) + t239 * pkin(7);
t232 = t238 ^ 2;
t233 = t242 ^ 2;
t380 = -t232 + t233;
t379 = t232 + t233;
t371 = qJD(5) * t464;
t360 = -g(1) * t393 - g(2) * t395 + g(3) * t242;
t357 = t105 ^ 2 - t443;
t356 = t141 ^ 2 - t144 ^ 2;
t311 = pkin(2) * t364 - qJ(3) * t467 + qJD(1) * t217 + t234;
t299 = pkin(3) * t364 + t311;
t19 = -t285 * pkin(9) + t69 * pkin(4) + (-pkin(9) * t390 + (-pkin(9) * t237 - t442) * t238) * t366 + t299;
t207 = pkin(7) * t216;
t350 = pkin(7) * t352 + qJDD(3) + t207;
t89 = pkin(8) * t467 - t442 * qJDD(2) + t350;
t208 = pkin(7) * t364;
t229 = qJDD(2) * qJ(3);
t230 = qJD(2) * qJD(3);
t117 = -pkin(7) * t353 + t208 + t229 + t230;
t91 = (t353 - t364) * pkin(8) + t117;
t292 = -t126 * t372 + t145 * t373 - t237 * t89 - t241 * t91;
t25 = -pkin(9) * t362 - t292;
t3 = t236 * t19 + t240 * t25 + t64 * t369 - t370 * t74;
t1 = qJD(6) * t464 + t3 + t426;
t355 = t141 * t21 + t1;
t354 = t141 * t30 - t3;
t224 = t243 * pkin(7);
t349 = -pkin(8) * t243 + t224;
t4 = t240 * t19 - t236 * t25 - t74 * t369 - t64 * t370;
t345 = -qJD(2) * pkin(2) + qJD(3);
t133 = t154 * t239;
t99 = t133 * t236 - t243 * t240;
t342 = t78 * t363;
t341 = t79 * t363;
t340 = t126 * t373 + t145 * t372 + t237 * t91 - t241 * t89;
t338 = t141 * t363;
t335 = pkin(2) * t387 + qJ(3) * t393 + t382;
t334 = -t207 - t360;
t331 = t238 * t352;
t187 = qJ(3) * t391;
t330 = -pkin(9) * t133 + t187 + t432;
t135 = t154 * t243;
t189 = qJ(3) * t387;
t329 = -pkin(9) * t135 + t189 + t431;
t327 = t379 * qJDD(1) * pkin(7);
t245 = qJD(2) ^ 2;
t326 = pkin(7) * t245 + t434;
t103 = t135 * t236 + t239 * t240;
t325 = g(1) * t99 - g(2) * t103;
t100 = t133 * t240 + t236 * t243;
t104 = t135 * t240 - t239 * t236;
t324 = g(1) * t100 - g(2) * t104;
t323 = g(1) * t132 - g(2) * t134;
t320 = (qJD(5) * t105 - t41) * pkin(9);
t317 = t21 * t240 - t22 * t236;
t316 = t21 * t236 + t22 * t240;
t315 = -t236 * t31 - t240 * t30;
t314 = t236 * t30 - t240 * t31;
t44 = -t236 * t93 + t240 * t67;
t49 = -t236 * t78 + t240 * t87;
t310 = pkin(3) * t387 + t335;
t309 = t107 * t127 - t159 * t41;
t52 = -t110 * t236 + t240 * t77;
t164 = t212 + t345;
t170 = t213 + t231;
t303 = t164 * t242 - t170 * t238;
t165 = -pkin(4) - t319;
t130 = t350 - t408;
t298 = -0.2e1 * pkin(1) * t366 - t411;
t295 = t370 * t452 + t416;
t294 = -t439 + t458;
t9 = -t110 * t370 + t236 * t48 + t240 * t59 + t77 * t369;
t291 = -t133 * pkin(4) - pkin(9) * t132 + t349;
t289 = t319 * t132;
t288 = t319 * t134;
t287 = g(1) * t134 + g(2) * t132 + g(3) * t154;
t286 = g(1) * t135 + g(2) * t133 - t433;
t284 = -t326 + 0.2e1 * t234;
t280 = -pkin(9) * t417 - t286;
t279 = -t141 * t236 * t464 + t105 * t144 + t297;
t26 = pkin(4) * t362 + t340;
t277 = t135 * pkin(4) + pkin(9) * t134 + t310;
t140 = t236 * t375 - t240 * t378;
t276 = t236 * t372 + t237 * t369 - t140;
t275 = -t127 * t405 - t159 * t417 + t286;
t274 = g(1) * t103 + g(2) * t99 - g(3) * t399 + t4;
t273 = t306 - t458;
t272 = t453 * t442 * t238;
t271 = pkin(9) * t371 - t287;
t270 = t159 * t371 + t287;
t60 = qJD(4) * t110 - t161 * t237 - t241 * t333;
t137 = pkin(2) * t376 - t384;
t85 = pkin(2) * t353 - t311;
t269 = -qJD(1) * t137 - qJDD(1) * t461 - t326 - t85;
t5 = t42 * pkin(5) + t41 * qJ(6) - t107 * qJD(6) + t26;
t268 = -t271 - t5;
t267 = t26 + t271;
t266 = -t270 + t5;
t265 = -t26 + t270;
t264 = t105 * t296 - t399 * t42;
t2 = qJDD(6) - t4 - t440;
t263 = qJD(5) * t317 + t1 * t240 + t2 * t236;
t262 = qJD(5) * t315 - t4 * t236 + t3 * t240;
t261 = qJD(2) * t303 + t117 * t242 + t130 * t238;
t258 = t107 * t35 + qJDD(6) - t274;
t257 = -t115 * t144 + t287 - t340;
t256 = (-g(1) * (t461 - t222) + g(2) * pkin(8)) * t239;
t255 = -g(1) * t104 - g(2) * t100 + g(3) * t398 + t3;
t254 = -qJD(2) * t141 - t285;
t252 = t115 * t141 + t286 + t292;
t249 = -t241 * t42 + t105 * t373 + (-qJD(2) * t105 - t419) * t237 - t276 * t464;
t248 = t276 * t107 + (-t417 - t420) * t237 + (t237 * t370 - t468) * t105;
t196 = g(1) * t391;
t183 = t242 * t392;
t169 = t380 * t246;
t168 = qJDD(2) * t242 - t238 * t245;
t167 = qJDD(2) * t238 + t242 * t245;
t158 = pkin(4) - t162;
t157 = pkin(2) * t378 - t202;
t151 = qJDD(1) * t233 - 0.2e1 * t331;
t150 = qJDD(1) * t232 + 0.2e1 * t331;
t149 = pkin(1) + t361;
t118 = t238 * t364 + t366 * t380;
t116 = -t162 - t165;
t70 = -qJD(1) * t332 + t299;
t61 = pkin(5) * t107 + qJ(6) * t105;
t56 = -t318 * t452 - t454;
t46 = -pkin(5) * t154 - t52;
t43 = qJ(6) * t154 + t427;
t37 = -t49 - t438;
t36 = t410 + t50;
t33 = -t44 + t438;
t32 = -t410 + t45;
t29 = t154 * t66 + t464 * t96;
t20 = t105 * t464 - t41;
t12 = t318 * t97 - (qJD(5) * t319 - qJD(6) * t240) * t452 + t60;
t11 = t107 * t295 + t398 * t41;
t8 = -pkin(5) * t96 - t10;
t7 = qJ(6) * t96 + qJD(6) * t154 + t9;
t6 = t107 * t96 - t154 * t41 + t295 * t464 - t398 * t66;
t14 = [0, 0, 0, 0, 0, qJDD(1), -t434 + t435, t453, 0, 0, t150, 0.2e1 * t118, t167, t151, t168, 0, t238 * t298 + t242 * t284 + t196, t298 * t242 + (-t284 - t435) * t238, 0.2e1 * t327 - t453, -g(1) * (-pkin(1) * t239 + t224) - g(2) * t382 + (pkin(7) ^ 2 * t379 + pkin(1) ^ 2) * qJDD(1), t150, t167, -0.2e1 * t118, 0, -t168, t151, t238 * t447 + t269 * t242 + t196, t327 + t261 - t453, -t447 * t242 + (t269 + t435) * t238, pkin(7) * t261 - g(1) * t224 - g(2) * t335 + t146 * t137 + (-t435 + t85) * t461, t144 * t97 - t253 * t452, -t97 * t141 - t144 * t96 - t154 * t253 + t452 * t69, t362 * t452 - t363 * t97, t141 * t96 + t154 * t69, t154 * t362 + t363 * t96, 0, g(1) * t133 - g(2) * t135 + t113 * t141 + t115 * t96 + t149 * t69 + t70 * t154 - t362 * t454 + t363 * t60, t110 * t362 + t113 * t144 + t115 * t97 + t149 * t253 + t363 * t59 - t452 * t70 - t323, -t110 * t69 - t59 * t141 + t60 * t144 + t154 * t292 + t254 * t454 - t340 * t452 - t78 * t97 - t79 * t96 + t453, -g(1) * t349 - g(2) * t310 - t110 * t292 + t115 * t113 + t70 * t149 - t340 * t454 + t79 * t59 - t78 * t60 + t256, t11, -t463, t6, t264, -t450, t29, t73 * t418 + t10 * t464 + t105 * t60 - t454 * t42 + t154 * t4 + t30 * t96 + t52 * t66 - (t236 * t26 + t369 * t73) * t452 + t324, t73 * t416 + t107 * t60 + t454 * t41 - t464 * t9 - t154 * t3 - t31 * t96 - t427 * t66 - (t240 * t26 - t370 * t73) * t452 - t325, -t10 * t107 - t105 * t9 + t41 * t52 - t42 * t427 + t315 * t97 - (qJD(5) * t314 - t236 * t3 - t240 * t4) * t452 + t323, -g(1) * t291 - g(2) * t277 + t30 * t10 - t26 * t454 + t3 * t427 + t31 * t9 + t4 * t52 + t73 * t60 + t256, t11, t6, t463, t29, t450, t264, t35 * t418 + t105 * t12 - t464 * t8 - t154 * t2 - t21 * t96 + t42 * t56 - t46 * t66 - (t236 * t5 + t35 * t369) * t452 + t324, -t105 * t7 + t107 * t8 - t41 * t46 - t42 * t43 + t317 * t97 - (-qJD(5) * t316 - t1 * t236 + t2 * t240) * t452 + t323, -t35 * t416 + t1 * t154 - t107 * t12 + t464 * t7 + t22 * t96 + t41 * t56 + t43 * t66 - (-t240 * t5 + t35 * t370) * t452 + t325, t1 * t43 + t22 * t7 + t5 * t56 + t35 * t12 + t2 * t46 + t21 * t8 - g(1) * (-pkin(5) * t100 - qJ(6) * t99 + t291) - g(2) * (pkin(5) * t104 + qJ(6) * t103 + t277) + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -t169, t216, t183, t364, qJDD(2), pkin(1) * t392 + t334, g(3) * t238 - t208 + (pkin(1) * t246 + t453) * t242, 0, 0, -t183, t216, t169, qJDD(2), -t364, t183, 0.2e1 * t408 - qJDD(3) + (-t146 * t238 + t157 * t242) * qJD(1) + t334 (-pkin(2) * t238 + qJ(3) * t242) * qJDD(1) + ((t170 - t231) * t238 + (-t164 + t345) * t242) * qJD(1), t208 + 0.2e1 * t229 + 0.2e1 * t230 + (qJD(1) * t157 - g(3)) * t238 + (qJD(1) * t146 - t453) * t242, t117 * qJ(3) + t170 * qJD(3) - t130 * pkin(2) - t146 * t157 - g(1) * (-pkin(2) * t393 + t189) - g(2) * (-pkin(2) * t395 + t187) - g(3) * t383 - t303 * qJD(1) * pkin(7), -t400, t356, t338 + t254, t400, -t302, t362, -t131 * t141 - t162 * t362 + t363 * t413 - t257, -t131 * t144 + t163 * t362 + t363 * t414 - t252, -t163 * t69 + t162 * t254 + (-t79 + t413) * t144 + (t78 - t414) * t141, -g(1) * t189 - g(2) * t187 - g(3) * t361 - t115 * t131 - t162 * t340 - t163 * t292 - t413 * t78 + t414 * t79 + t272, -t13, t259, -t17, -t282, -t279, t401, t105 * t413 + t158 * t42 + t236 * t273 - t240 * t265 - t44 * t464 + t422, t107 * t413 - t158 * t41 + t236 * t265 + t240 * t273 + t45 * t464 - t421, t105 * t45 + t107 * t44 + ((t30 + t402) * qJD(5) + t354) * t240 + (t141 * t31 + t4 + (t31 + t407) * qJD(5) + t309) * t236 + t275, -g(1) * t329 - g(2) * t330 - g(3) * t293 - t127 * t314 + t26 * t158 + t159 * t262 - t30 * t44 - t31 * t45 + t413 * t73 + t272, -t13, -t17, -t259, t401, t279, -t282, t428 * t105 + t116 * t42 - t236 * t466 + t266 * t240 + t33 * t464 - t424, t105 * t32 - t107 * t33 + ((-t21 + t402) * qJD(5) - t355) * t240 + (t141 * t22 - t2 + (t22 + t407) * qJD(5) + t309) * t236 + t275, -t428 * t107 + t116 * t41 + t266 * t236 + t240 * t466 - t32 * t464 + t423, t5 * t116 - t22 * t32 - t21 * t33 - g(1) * (t288 + t329) - g(2) * (t289 + t330) - g(3) * (t293 + t456) + t428 * t35 + t272 + t316 * t127 + t263 * t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2) - t183, t216, -t232 * t246 - t245, -qJD(2) * t170 + t146 * t378 + t130 + t360, 0, 0, 0, 0, 0, 0, -t141 * t378 - t237 * t445 - t241 * t362, -t144 * t378 + t237 * t362 - t241 * t445, t302 * t237 + (-qJD(4) * t141 - t285) * t241, -t115 * t378 + (-t340 - t341) * t241 + (-t292 + t342) * t237 + t360, 0, 0, 0, 0, 0, 0, t249, -t462, t248, t140 * t30 - t143 * t31 + (-qJD(4) * t314 - t26) * t241 + (-t363 * t73 + t262) * t237 + t360, 0, 0, 0, 0, 0, 0, t249, t248, t462, -t140 * t21 - t143 * t22 + (qJD(4) * t316 - t5) * t241 + (-t35 * t363 + t263) * t237 + t360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t400, -t356, -t338 + t253, -t400, t302, -t362, -t341 + t257, -t342 + t252, 0, 0, t13, -t259, t17, t282, t279, -t401, -pkin(4) * t42 - t105 * t79 + t236 * t294 - t240 * t267 - t464 * t49 - t422, pkin(4) * t41 - t107 * t79 + t236 * t267 + t240 * t294 + t464 * t50 + t421, t105 * t50 + t107 * t49 + ((-t30 + t436) * qJD(5) - t354) * t240 + (t320 - t4 - t425) * t236 + t280, -t26 * pkin(4) + g(1) * t431 + g(2) * t432 + g(3) * t430 - t30 * t49 - t31 * t50 - t73 * t79 + (t262 - t286) * pkin(9), t13, t17, t259, -t401, -t279, t282, t412 * t105 + t165 * t42 + t236 * t465 + t268 * t240 + t37 * t464 + t424, t105 * t36 - t107 * t37 + ((t21 + t436) * qJD(5) + t355) * t240 + (t2 + t320 - t470) * t236 + t280, -t412 * t107 + t165 * t41 + t268 * t236 - t240 * t465 - t36 * t464 - t423, t5 * t165 - t22 * t36 - t21 * t37 - g(1) * (-t431 - t288) - g(2) * (-t432 - t289) - g(3) * (-t430 - t456) + t412 * t35 + (t263 - t286) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t404, -t357, t20, -t404, -t457, t66, -t107 * t73 + t274 + t425, t105 * t73 + t30 * t464 - t255, 0, 0, t404, t20, t357, t66, t457, -t404, -t105 * t61 - t258 + t425 + 0.2e1 * t440, pkin(5) * t41 - qJ(6) * t42 + (t22 - t31) * t107 + (t21 - t386) * t105, 0.2e1 * t426 - t105 * t35 + t107 * t61 + (0.2e1 * qJD(6) - t30) * t464 + t255, t1 * qJ(6) - t2 * pkin(5) - t35 * t61 - t21 * t31 - g(1) * (-pkin(5) * t103 + qJ(6) * t104) - g(2) * (-pkin(5) * t99 + qJ(6) * t100) + t386 * t22 - t318 * t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t404 - t66, t20, -t464 ^ 2 - t443, t258 - t440 - t470;];
tau_reg  = t14;
