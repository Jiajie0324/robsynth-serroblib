% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 04:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:11:04
% EndTime: 2019-05-05 04:11:45
% DurationCPUTime: 35.36s
% Computational Cost: add. (51622->767), mult. (103952->1112), div. (0->0), fcn. (66804->10), ass. (0->579)
t825 = sin(qJ(3));
t944 = qJD(2) * t825;
t801 = qJD(5) + t944;
t798 = t801 ^ 2;
t824 = sin(qJ(5));
t827 = cos(qJ(5));
t828 = cos(qJ(3));
t943 = qJD(2) * t828;
t772 = qJD(3) * t824 + t827 * t943;
t997 = t772 ^ 2;
t741 = t997 - t798;
t774 = qJD(3) * t827 - t824 * t943;
t715 = t774 * t772;
t940 = qJD(2) * qJD(3);
t806 = t828 * t940;
t937 = qJDD(2) * t825;
t779 = t806 + t937;
t764 = qJDD(5) + t779;
t1007 = t715 + t764;
t954 = t827 * t1007;
t628 = t741 * t824 + t954;
t747 = t774 * t801;
t923 = t825 * t940;
t935 = qJDD(2) * t828;
t780 = -t923 + t935;
t915 = t824 * qJDD(3) + t827 * t780;
t864 = qJD(5) * t774 + t915;
t650 = -t747 + t864;
t528 = t628 * t828 + t650 * t825;
t819 = sin(pkin(6));
t821 = cos(pkin(6));
t533 = t628 * t825 - t650 * t828;
t958 = t824 * t1007;
t632 = t741 * t827 - t958;
t826 = sin(qJ(2));
t829 = cos(qJ(2));
t889 = t533 * t826 - t632 * t829;
t450 = t819 * t528 + t821 * t889;
t487 = t533 * t829 + t632 * t826;
t818 = sin(pkin(10));
t820 = cos(pkin(10));
t1120 = t450 * t818 - t487 * t820;
t1119 = t450 * t820 + t487 * t818;
t814 = t825 ^ 2;
t831 = qJD(2) ^ 2;
t808 = t814 * t831;
t830 = qJD(3) ^ 2;
t795 = -t808 - t830;
t928 = t825 * t828 * t831;
t790 = qJDD(3) - t928;
t970 = t790 * t825;
t724 = -t795 * t828 + t970;
t952 = t828 * t790;
t732 = t795 * t825 + t952;
t778 = 0.2e1 * t806 + t937;
t879 = t732 * t826 + t778 * t829;
t601 = -t819 * t724 + t821 * t879;
t668 = t732 * t829 - t778 * t826;
t540 = t601 * t820 + t668 * t818;
t1118 = qJ(1) * t540;
t545 = t601 * t818 - t668 * t820;
t1117 = qJ(1) * t545;
t1114 = -t821 * t528 + t819 * t889;
t597 = t821 * t724 + t819 * t879;
t1113 = pkin(7) * (t597 * t819 + t601 * t821);
t815 = t828 ^ 2;
t810 = t815 * t831;
t797 = -t810 - t830;
t789 = qJDD(3) + t928;
t953 = t828 * t789;
t721 = t797 * t825 + t953;
t971 = t789 * t825;
t730 = -t797 * t828 + t971;
t781 = -0.2e1 * t923 + t935;
t880 = t730 * t826 - t781 * t829;
t600 = t819 * t721 + t821 * t880;
t667 = t730 * t829 + t781 * t826;
t539 = t600 * t820 + t667 * t818;
t1112 = qJ(1) * t539;
t542 = t600 * t818 - t667 * t820;
t1111 = qJ(1) * t542;
t1110 = pkin(1) * t597;
t1109 = pkin(1) * t601;
t596 = -t821 * t721 + t819 * t880;
t1108 = pkin(7) * (t596 * t819 + t600 * t821);
t794 = -t808 + t830;
t723 = t794 * t828 + t971;
t731 = -t794 * t825 + t953;
t934 = qJDD(2) * t829;
t866 = t731 * t826 - t825 * t934;
t615 = -t819 * t723 + t821 * t866;
t936 = qJDD(2) * t826;
t686 = t731 * t829 + t825 * t936;
t1105 = t615 * t818 - t686 * t820;
t1104 = t615 * t820 + t686 * t818;
t1102 = pkin(1) * t596;
t1101 = pkin(1) * t600;
t796 = t810 - t830;
t719 = t796 * t825 + t952;
t728 = -t796 * t828 + t970;
t867 = t728 * t826 + t828 * t934;
t614 = t819 * t719 + t821 * t867;
t685 = t728 * t829 - t826 * t935;
t1100 = t614 * t818 - t685 * t820;
t1099 = t614 * t820 + t685 * t818;
t763 = t774 ^ 2;
t932 = t798 + t763;
t608 = t824 * t932 - t954;
t1097 = pkin(2) * t608;
t1096 = pkin(7) * t668;
t591 = t827 * t932 + t958;
t1095 = t591 * t825;
t1094 = t591 * t828;
t1093 = t608 * t826;
t1092 = t608 * t829;
t994 = pkin(3) + pkin(9);
t1091 = t608 * t994;
t1084 = t994 * t591;
t1083 = t821 * t723 + t819 * t866;
t1082 = -pkin(4) * t591 - qJ(4) * t608;
t1081 = pkin(7) * t667;
t1076 = -t821 * t719 + t819 * t867;
t965 = t801 * t824;
t929 = t772 * t965;
t871 = t827 * t864 - t929;
t930 = t828 * t715;
t1002 = -t825 * t871 - t930;
t964 = t801 * t827;
t911 = -t772 * t964 - t824 * t864;
t1019 = t1002 * t829 - t826 * t911;
t931 = t825 * t715;
t1001 = t828 * t871 - t931;
t1020 = t1002 * t826 + t829 * t911;
t1039 = -t1001 * t819 + t1020 * t821;
t1075 = t1019 * t820 - t1039 * t818;
t1074 = t1019 * t818 + t1039 * t820;
t737 = t774 * t964;
t910 = t737 + t929;
t1003 = t828 * t764 - t825 * t910;
t863 = (t772 * t827 - t774 * t824) * t801;
t1017 = t1003 * t829 - t826 * t863;
t1004 = t825 * t764 + t828 * t910;
t1018 = t1003 * t826 + t829 * t863;
t1041 = -t1004 * t819 + t1018 * t821;
t1073 = t1017 * t820 - t1041 * t818;
t1072 = t1017 * t818 + t1041 * t820;
t1071 = pkin(2) * t721;
t672 = -t997 - t763;
t1070 = pkin(4) * t672;
t1069 = pkin(8) * t721;
t1068 = pkin(8) * t732;
t1006 = -t997 - t798;
t1008 = -t715 + t764;
t671 = t824 * t1008;
t1022 = t1006 * t827 - t671;
t1067 = pkin(2) * t1022;
t1066 = qJ(4) * t672;
t873 = t827 * qJDD(3) - t824 * t780;
t691 = -qJD(5) * t772 + t873;
t746 = t772 * t801;
t654 = t691 - t746;
t1065 = qJ(6) * t654;
t1064 = t672 * t825;
t1063 = t672 * t828;
t712 = t763 - t997;
t1062 = t712 * t825;
t1061 = t712 * t828;
t843 = t827 * t1008;
t1021 = t1006 * t824 + t843;
t1052 = t1021 * t825;
t1051 = t1021 * t828;
t1050 = t1021 * t994;
t1049 = t1022 * t826;
t1048 = t1022 * t829;
t1047 = t1022 * t994;
t743 = -t763 + t798;
t1028 = t824 * t743 - t843;
t1046 = t1028 * t826;
t1045 = t1028 * t829;
t1030 = -t743 * t827 - t671;
t1044 = t1030 * t825;
t1043 = t1030 * t828;
t1042 = t1004 * t821 + t1018 * t819;
t1040 = t1001 * t821 + t1020 * t819;
t1038 = pkin(4) * t1021 - qJ(4) * t1022;
t1037 = pkin(2) * t724;
t1036 = pkin(8) * t724;
t1035 = pkin(8) * t730;
t1029 = t779 + t806;
t920 = g(1) * t818 - t820 * g(2);
t950 = g(3) - qJDD(1);
t1027 = -t819 * t950 + t821 * t920;
t645 = -t691 * t827 + t774 * t965;
t644 = -t691 * t824 - t737;
t872 = -t644 * t825 + t930;
t1000 = -t645 * t826 + t829 * t872;
t912 = t828 * t644 + t931;
t961 = t821 * t826;
t985 = t645 * t829;
t998 = -t819 * t912 + t821 * t985 + t872 * t961;
t1016 = t1000 * t820 - t818 * t998;
t1015 = t1000 * t818 + t820 * t998;
t1014 = t818 * t950;
t1013 = t820 * t950;
t1005 = pkin(5) * t864 - t1065;
t788 = g(1) * t820 + g(2) * t818;
t711 = -t820 * t788 - t818 * t920;
t942 = qJD(5) - t801;
t840 = t772 * t942 - t873;
t710 = -t818 * t788 + t820 * t920;
t679 = t1027 * t826 - t829 * t788;
t665 = -t831 * pkin(2) + qJDD(2) * pkin(8) + t679;
t745 = t819 * t920 + t821 * t950;
t610 = t825 * t665 + t828 * t745;
t987 = qJ(4) * t825;
t993 = pkin(3) * t828;
t908 = -t987 - t993;
t776 = t908 * qJD(2);
t870 = -qJDD(3) * pkin(3) - t830 * qJ(4) + t776 * t944 + qJDD(4) + t610;
t537 = -t789 * pkin(9) + (t779 - t806) * pkin(4) + t870;
t793 = pkin(4) * t944 - qJD(3) * pkin(9);
t678 = -t1027 * t829 - t826 * t788;
t664 = -qJDD(2) * pkin(2) - t831 * pkin(8) + t678;
t841 = -t780 * pkin(3) - qJ(4) * t1029 + t664;
t996 = -2 * qJD(4);
t918 = pkin(3) * qJD(3) + t996;
t548 = -pkin(4) * t810 - t780 * pkin(9) + (-t793 + t918) * t944 + t841;
t471 = t824 * t537 + t827 * t548;
t916 = t827 * t537 - t824 * t548;
t414 = t827 * t471 - t824 * t916;
t413 = t824 * t471 + t827 * t916;
t962 = t819 * t826;
t999 = t819 * t985 + t821 * t912 + t872 * t962;
t995 = 2 * qJD(6);
t992 = pkin(5) * t824;
t991 = pkin(5) * t827;
t990 = pkin(7) * t819;
t989 = pkin(7) * t821;
t945 = t814 + t815;
t783 = t945 * qJDD(2);
t786 = t808 + t810;
t876 = t783 * t826 + t786 * t829;
t699 = t876 * t821;
t707 = t783 * t829 - t786 * t826;
t621 = t699 * t820 + t707 * t818;
t988 = qJ(1) * t621;
t649 = t747 + t864;
t984 = t649 * t824;
t983 = t649 * t827;
t980 = t664 * t825;
t979 = t664 * t828;
t977 = t778 * t825;
t973 = t781 * t828;
t947 = -t828 * t665 + t825 * t745;
t862 = t830 * pkin(3) - t776 * t943 + t947;
t842 = qJDD(3) * qJ(4) - t862;
t835 = t780 * pkin(4) - pkin(9) * t810 + t842;
t536 = ((2 * qJD(4)) + t793) * qJD(3) + t835;
t959 = t824 * t536;
t957 = t826 * t745;
t955 = t827 * t536;
t951 = t829 * t745;
t949 = -t672 - t798;
t948 = pkin(1) * t699 + t707 * t990;
t946 = pkin(2) * t786 + pkin(8) * t783;
t941 = qJD(5) + t801;
t939 = qJD(4) * qJD(3);
t938 = qJDD(2) * t819;
t698 = t876 * t819;
t922 = -pkin(1) * t698 + t707 * t989;
t921 = qJ(6) * t824 + pkin(4);
t917 = qJ(6) * t827 - qJ(4);
t508 = t610 * t825 - t828 * t947;
t914 = t826 * t928;
t913 = t829 * t928;
t907 = pkin(3) * t825 - qJ(4) * t828;
t784 = -t826 * t831 + t934;
t906 = -pkin(7) * t784 - t957;
t875 = t829 * t831 + t936;
t905 = -pkin(7) * t875 + t951;
t705 = pkin(5) * t772 - qJ(6) * t774;
t904 = t764 * qJ(6) - t772 * t705 + t801 * t995 + t471;
t456 = -t798 * pkin(5) + t904;
t846 = -t774 * t705 - qJDD(6) + t916;
t837 = -t764 * pkin(5) - t846;
t834 = t798 * qJ(6) - t837;
t392 = t824 * t456 + t827 * t834;
t472 = (pkin(5) * t801 - (2 * qJD(6))) * t774 + t536 + t1005;
t380 = t392 * t825 + t472 * t828;
t393 = t827 * t456 - t824 * t834;
t903 = t380 * t826 - t393 * t829;
t395 = t413 * t825 + t536 * t828;
t902 = t395 * t826 - t414 * t829;
t571 = t842 + 0.2e1 * t939;
t565 = pkin(3) * t786 + t571;
t566 = qJ(4) * t786 + t870;
t479 = -t565 * t825 + t566 * t828;
t775 = t907 * qJDD(2);
t901 = t479 * t826 + t775 * t829;
t491 = t571 * t828 + t825 * t870;
t583 = t918 * t944 + t841;
t900 = t491 * t826 - t583 * t829;
t652 = -t774 * t942 - t915;
t836 = t827 * t840;
t552 = t824 * t652 + t836;
t498 = t552 * t825 + t1063;
t646 = t824 * t840;
t556 = t652 * t827 - t646;
t899 = t498 * t826 - t556 * t829;
t553 = -t824 * t650 + t836;
t499 = t553 * t825 + t1063;
t557 = -t650 * t827 - t646;
t898 = t499 * t826 - t557 * t829;
t897 = t508 * t826 - t664 * t829;
t839 = -t772 * t941 + t873;
t554 = -t827 * t839 + t984;
t511 = -t554 * t825 + t1061;
t558 = t824 * t839 + t983;
t896 = t511 * t826 + t558 * t829;
t551 = t654 * t827 - t984;
t512 = -t551 * t825 - t1061;
t555 = -t654 * t824 - t983;
t895 = t512 * t826 + t555 * t829;
t521 = t649 * t828 + t1052;
t894 = t521 * t826 - t1048;
t522 = -t654 * t828 + t1095;
t893 = t522 * t826 + t1092;
t651 = t774 * t941 + t915;
t525 = t651 * t828 + t1052;
t892 = t525 * t826 - t1048;
t526 = t828 * t839 - t1095;
t891 = t526 * t826 - t1092;
t653 = t691 + t746;
t534 = t653 * t828 - t1044;
t888 = t534 * t826 + t1045;
t535 = -t828 * t840 - t1044;
t887 = t535 * t826 + t1045;
t507 = t610 * t828 + t825 * t947;
t589 = t678 * t829 - t679 * t826;
t590 = t678 * t826 + t679 * t829;
t704 = t973 - t977;
t787 = -t808 + t810;
t882 = t704 * t826 + t787 * t829;
t753 = t875 * t821;
t877 = t753 * t820 + t784 * t818;
t695 = t753 * t818 - t784 * t820;
t767 = t945 * t940;
t874 = -qJDD(3) * t829 + t767 * t826;
t869 = (-t698 * t819 - t699 * t821) * pkin(7);
t738 = -t780 * t825 - t815 * t940;
t861 = t738 * t826 - t913;
t739 = t779 * t828 - t814 * t940;
t860 = t739 * t826 + t913;
t353 = -t994 * t393 + (t921 + t991) * t472;
t355 = pkin(4) * t392 + pkin(5) * t834 - qJ(4) * t393 + qJ(6) * t456;
t379 = -t392 * t828 + t472 * t825;
t332 = -pkin(8) * t379 - t353 * t825 + t355 * t828;
t344 = -pkin(2) * t379 + t994 * t392 + (t917 - t992) * t472;
t361 = t380 * t829 + t393 * t826;
t859 = pkin(7) * t361 + t332 * t826 + t344 * t829;
t371 = pkin(4) * t536 - t414 * t994;
t373 = pkin(4) * t413 - qJ(4) * t414;
t394 = -t413 * t828 + t536 * t825;
t346 = -pkin(8) * t394 - t371 * t825 + t373 * t828;
t358 = -pkin(2) * t394 - qJ(4) * t536 + t413 * t994;
t369 = t395 * t829 + t414 * t826;
t858 = pkin(7) * t369 + t346 * t826 + t358 * t829;
t439 = pkin(5) * t949 + t904;
t440 = qJ(6) * t949 + t837;
t375 = -t827 * t439 - t824 * t440 - t557 * t994 + t1070;
t448 = pkin(4) * t553 + pkin(5) * t840 - qJ(4) * t557 - qJ(6) * t650;
t497 = -t553 * t828 + t1064;
t362 = -pkin(8) * t497 - t375 * t825 + t448 * t828;
t370 = -pkin(2) * t497 + t824 * t439 - t827 * t440 + t553 * t994 - t1066;
t463 = t499 * t829 + t557 * t826;
t857 = pkin(7) * t463 + t362 * t826 + t370 * t829;
t812 = -0.2e1 * t939;
t832 = -qJD(3) * t793 + t774 * t995 - t1005 + t812 - t835;
t459 = -pkin(5) * t747 + t1065 + t832;
t402 = -t824 * t459 + (-pkin(4) - t991) * t654 + t1091;
t410 = pkin(5) * t763 + qJ(6) * t1007 - t1082 + t904;
t520 = -t654 * t825 - t1094;
t366 = -pkin(8) * t520 - t402 * t825 + t410 * t828;
t390 = -pkin(2) * t520 - t827 * t459 + (qJ(4) + t992) * t654 + t1084;
t478 = t522 * t829 - t1093;
t856 = pkin(7) * t478 + t366 * t826 + t390 * t829;
t460 = (-t651 - t747) * pkin(5) + t832;
t407 = -t827 * t460 + t651 * t921 - t1047;
t412 = (t1006 + t798) * qJ(6) + (t764 + t1008) * pkin(5) + t846 + t1038;
t523 = t651 * t825 - t1051;
t367 = -pkin(8) * t523 - t407 * t825 + t412 * t828;
t391 = -pkin(2) * t523 + t824 * t460 + t651 * t917 + t1050;
t480 = t525 * t829 + t1049;
t855 = pkin(7) * t480 + t367 * t826 + t391 * t829;
t385 = -t556 * t994 + t1070 - t414;
t475 = pkin(4) * t552 - qJ(4) * t556;
t496 = -t552 * t828 + t1064;
t368 = -pkin(8) * t496 - t385 * t825 + t475 * t828;
t378 = -pkin(2) * t496 + t552 * t994 - t1066 + t413;
t462 = t498 * t829 + t556 * t826;
t854 = pkin(7) * t462 + t368 * t826 + t378 * t829;
t428 = t1038 + t916;
t447 = pkin(4) * t649 - t1047 + t955;
t519 = t649 * t825 - t1051;
t381 = -pkin(8) * t519 + t428 * t828 - t447 * t825;
t417 = -pkin(2) * t519 - qJ(4) * t649 + t1050 - t959;
t477 = t521 * t829 + t1049;
t853 = pkin(7) * t477 + t381 * t826 + t417 * t829;
t429 = t1082 - t471;
t455 = pkin(4) * t839 - t1091 - t959;
t524 = t825 * t839 + t1094;
t382 = -pkin(8) * t524 + t429 * t828 - t455 * t825;
t419 = -pkin(2) * t524 - qJ(4) * t839 - t1084 - t955;
t481 = t526 * t829 + t1093;
t852 = pkin(7) * t481 + t382 * t826 + t419 * t829;
t490 = t571 * t825 - t828 * t870;
t431 = -pkin(2) * t490 + pkin(3) * t870 - qJ(4) * t571;
t434 = -pkin(8) * t490 + t583 * t907;
t461 = t491 * t829 + t583 * t826;
t851 = pkin(7) * t461 + t431 * t829 + t434 * t826;
t833 = t944 * t996 + t841;
t568 = (-t781 + t923) * pkin(3) + t833;
t513 = -qJ(4) * t973 - t568 * t825 + t1069;
t516 = pkin(3) * t789 + qJ(4) * t797 + t1071 - t870;
t850 = t513 * t826 + t516 * t829 + t1081;
t567 = -pkin(3) * t923 + qJ(4) * t778 - t833;
t514 = -pkin(3) * t977 + t567 * t828 - t1036;
t515 = -t1037 + pkin(3) * t795 + t812 + (-qJDD(3) - t790) * qJ(4) + t862;
t849 = t514 * t826 + t515 * t829 + t1096;
t572 = t610 - t1071;
t604 = t980 - t1069;
t848 = t572 * t829 + t604 * t826 - t1081;
t573 = -t947 + t1037;
t605 = t979 + t1036;
t847 = t573 * t829 + t605 * t826 - t1096;
t485 = t508 * t829 + t664 * t826;
t844 = pkin(7) * t485 - (-pkin(2) * t829 - pkin(8) * t826) * t507;
t754 = t784 * t821;
t752 = t784 * t819;
t751 = t875 * t819;
t740 = qJDD(3) * t826 + t767 * t829;
t718 = t1029 * t825;
t717 = (t780 - t923) * t828;
t709 = t874 * t821;
t708 = t874 * t819;
t703 = t778 * t828 + t781 * t825;
t696 = -t754 * t818 - t820 * t875;
t694 = t754 * t820 - t818 * t875;
t689 = t739 * t829 - t914;
t688 = t738 * t829 + t914;
t659 = t704 * t829 - t787 * t826;
t648 = -t709 * t818 + t740 * t820;
t647 = t709 * t820 + t740 * t818;
t638 = -t951 + (t751 * t819 + t753 * t821) * pkin(7);
t637 = -t957 + (-t752 * t819 - t754 * t821) * pkin(7);
t622 = -t699 * t818 + t707 * t820;
t620 = -t819 * t718 + t821 * t860;
t619 = -t819 * t717 + t821 * t861;
t618 = t821 * t718 + t819 * t860;
t617 = t821 * t717 + t819 * t861;
t612 = qJ(1) * t622;
t588 = -t819 * t703 + t821 * t882;
t587 = t821 * t703 + t819 * t882;
t586 = pkin(2) * t781 - t1035 - t979;
t585 = -pkin(2) * t778 - t1068 + t980;
t584 = t590 * t821;
t570 = -pkin(1) * t752 + t819 * t678 + t821 * t905;
t569 = pkin(1) * t751 + t819 * t679 + t821 * t906;
t564 = -t620 * t818 + t689 * t820;
t563 = -t619 * t818 + t688 * t820;
t562 = t620 * t820 + t689 * t818;
t561 = t619 * t820 + t688 * t818;
t560 = -t589 * t821 + t819 * t745;
t559 = -t589 * t819 - t821 * t745;
t531 = -t825 * t840 + t1043;
t530 = t653 * t825 + t1043;
t518 = -t588 * t818 + t659 * t820;
t517 = t588 * t820 + t659 * t818;
t510 = t551 * t828 - t1062;
t509 = t554 * t828 + t1062;
t501 = t1068 + t825 * t567 + (pkin(2) + t993) * t778;
t500 = t1035 + t828 * t568 + (-pkin(2) - t987) * t781;
t495 = t508 + t946;
t492 = -pkin(2) * t664 + pkin(8) * t508;
t489 = t535 * t829 - t1046;
t488 = t534 * t829 - t1046;
t484 = -pkin(1) * t559 + t590 * t989;
t483 = -t560 * t818 + t590 * t820;
t482 = t560 * t820 + t590 * t818;
t476 = t829 * t507 + t869;
t474 = (-t559 * t819 - t560 * t821) * pkin(7);
t473 = t565 * t828 + t566 * t825 + t946;
t465 = t512 * t829 - t555 * t826;
t464 = t511 * t829 - t558 * t826;
t458 = t829 * t479 - t826 * t775 + t869;
t454 = -t826 * t573 + t829 * t605 + t1113;
t453 = -t826 * t572 + t829 * t604 + t1108;
t452 = -t819 * t531 + t821 * t887;
t451 = -t819 * t530 + t821 * t888;
t446 = -t819 * t524 + t821 * t891;
t445 = -t819 * t523 + t821 * t892;
t444 = t821 * t524 + t819 * t891;
t443 = t821 * t523 + t819 * t892;
t442 = t507 * t819 + t821 * t897;
t441 = -t507 * t821 + t819 * t897;
t438 = -t819 * t520 + t821 * t893;
t437 = -t819 * t519 + t821 * t894;
t436 = t821 * t520 + t819 * t893;
t435 = t821 * t519 + t819 * t894;
t433 = -t819 * t585 + t821 * t847 + t1110;
t432 = -t819 * t586 + t821 * t848 + t1102;
t430 = -t495 * t819 + t507 * t961 + t922;
t427 = -t819 * t510 + t821 * t895;
t426 = -t819 * t509 + t821 * t896;
t425 = -t819 * t497 + t821 * t898;
t424 = -t819 * t496 + t821 * t899;
t423 = t821 * t497 + t819 * t898;
t422 = t821 * t496 + t819 * t899;
t421 = t829 * t513 - t826 * t516 - t1108;
t420 = t829 * t514 - t826 * t515 - t1113;
t418 = pkin(8) * t491 + (-pkin(2) + t908) * t583;
t416 = -t819 * t490 + t821 * t900;
t415 = t821 * t490 + t819 * t900;
t411 = -t819 * t473 + t821 * t901 + t922;
t409 = -t442 * t818 + t485 * t820;
t408 = t442 * t820 + t485 * t818;
t406 = -t446 * t818 + t481 * t820;
t405 = -t445 * t818 + t480 * t820;
t404 = t446 * t820 + t481 * t818;
t403 = t445 * t820 + t480 * t818;
t401 = -t819 * t500 + t821 * t850 - t1102;
t400 = -t819 * t501 + t821 * t849 - t1110;
t399 = -t438 * t818 + t478 * t820;
t398 = -t437 * t818 + t477 * t820;
t397 = t438 * t820 + t478 * t818;
t396 = t437 * t820 + t477 * t818;
t389 = -t425 * t818 + t463 * t820;
t388 = -t424 * t818 + t462 * t820;
t387 = t425 * t820 + t463 * t818;
t386 = t424 * t820 + t462 * t818;
t384 = -t416 * t818 + t461 * t820;
t383 = t416 * t820 + t461 * t818;
t377 = pkin(8) * t526 + t429 * t825 + t455 * t828 - t1097;
t376 = pkin(8) * t521 + t428 * t825 + t447 * t828 - t1067;
t374 = -(pkin(2) * t826 - pkin(8) * t829) * t507 + (-t441 * t819 - t442 * t821) * pkin(7);
t372 = -pkin(1) * t441 - t819 * t492 + t821 * t844;
t365 = -pkin(2) * t556 + pkin(8) * t498 + t385 * t828 + t475 * t825;
t364 = pkin(8) * t525 + t407 * t828 + t412 * t825 - t1067;
t363 = pkin(8) * t522 + t402 * t828 + t410 * t825 + t1097;
t360 = -pkin(2) * t557 + pkin(8) * t499 + t375 * t828 + t448 * t825;
t359 = -t826 * t431 + t829 * t434 + (-t415 * t819 - t416 * t821) * pkin(7);
t357 = -t819 * t394 + t821 * t902;
t356 = t821 * t394 + t819 * t902;
t354 = t829 * t382 - t826 * t419 + (-t444 * t819 - t446 * t821) * pkin(7);
t352 = -pkin(1) * t415 - t819 * t418 + t821 * t851;
t351 = t829 * t381 - t826 * t417 + (-t435 * t819 - t437 * t821) * pkin(7);
t350 = -t819 * t379 + t821 * t903;
t349 = t821 * t379 + t819 * t903;
t348 = t829 * t367 - t826 * t391 + (-t443 * t819 - t445 * t821) * pkin(7);
t347 = t829 * t366 - t826 * t390 + (-t436 * t819 - t438 * t821) * pkin(7);
t345 = -pkin(1) * t444 - t819 * t377 + t821 * t852;
t343 = -pkin(1) * t435 - t819 * t376 + t821 * t853;
t342 = -t357 * t818 + t369 * t820;
t341 = t357 * t820 + t369 * t818;
t340 = t829 * t368 - t826 * t378 + (-t422 * t819 - t424 * t821) * pkin(7);
t339 = -pkin(2) * t414 + pkin(8) * t395 + t371 * t828 + t373 * t825;
t338 = t829 * t362 - t826 * t370 + (-t423 * t819 - t425 * t821) * pkin(7);
t337 = -pkin(1) * t443 - t819 * t364 + t821 * t855;
t336 = -pkin(1) * t436 - t819 * t363 + t821 * t856;
t335 = -t350 * t818 + t361 * t820;
t334 = t350 * t820 + t361 * t818;
t333 = -pkin(1) * t422 - t819 * t365 + t821 * t854;
t331 = -pkin(1) * t423 - t819 * t360 + t821 * t857;
t330 = -pkin(2) * t393 + pkin(8) * t380 + t353 * t828 + t355 * t825;
t329 = t829 * t346 - t826 * t358 + (-t356 * t819 - t357 * t821) * pkin(7);
t328 = -pkin(1) * t356 - t819 * t339 + t821 * t858;
t327 = t829 * t332 - t826 * t344 + (-t349 * t819 - t350 * t821) * pkin(7);
t326 = -pkin(1) * t349 - t819 * t330 + t821 * t859;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, 0, 0, 0, 0, 0, 0, t696, t695, 0, t483, 0, 0, 0, 0, 0, 0, t542, t545, t622, t409, 0, 0, 0, 0, 0, 0, t622, -t542, -t545, t384, 0, 0, 0, 0, 0, 0, t398, t406, t388, t342, 0, 0, 0, 0, 0, 0, t405, t389, t399, t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, t694, -t877, 0, t482, 0, 0, 0, 0, 0, 0, -t539, -t540, t621, t408, 0, 0, 0, 0, 0, 0, t621, t539, t540, t383, 0, 0, 0, 0, 0, 0, t396, t404, t386, t341, 0, 0, 0, 0, 0, 0, t403, t387, t397, t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t950, 0, 0, 0, 0, 0, 0, t752, -t751, 0, t559, 0, 0, 0, 0, 0, 0, -t596, -t597, t698, t441, 0, 0, 0, 0, 0, 0, t698, t596, t597, t415, 0, 0, 0, 0, 0, 0, t435, t444, t422, t356, 0, 0, 0, 0, 0, 0, t443, t423, t436, t349; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1014, -t1013, -t710, -qJ(1) * t710, 0, 0, -t695, 0, t696, t818 * t938, -qJ(1) * t694 - t570 * t818 + t637 * t820, qJ(1) * t877 - t569 * t818 + t638 * t820, -t584 * t818 + t589 * t820, -qJ(1) * t482 + t474 * t820 - t484 * t818, t564, t518, -t1105, t563, t1100, t648, -t432 * t818 + t453 * t820 + t1112, -t433 * t818 + t454 * t820 + t1118, -t430 * t818 + t476 * t820 - t988, -qJ(1) * t408 - t372 * t818 + t374 * t820, t648, t1105, -t1100, t564, t518, t563, -t411 * t818 + t458 * t820 - t988, -t401 * t818 + t421 * t820 - t1112, -t400 * t818 + t420 * t820 - t1118, -qJ(1) * t383 - t352 * t818 + t359 * t820, t1016, -t426 * t818 + t464 * t820, -t452 * t818 + t489 * t820, t1075, -t1120, t1073, -qJ(1) * t396 - t343 * t818 + t351 * t820, -qJ(1) * t404 - t345 * t818 + t354 * t820, -qJ(1) * t386 - t333 * t818 + t340 * t820, -qJ(1) * t341 - t328 * t818 + t329 * t820, t1016, -t451 * t818 + t488 * t820, -t427 * t818 + t465 * t820, t1073, t1120, t1075, -qJ(1) * t403 - t337 * t818 + t348 * t820, -qJ(1) * t387 - t331 * t818 + t338 * t820, -qJ(1) * t397 - t336 * t818 + t347 * t820, -qJ(1) * t334 - t326 * t818 + t327 * t820; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1013, -t1014, t711, qJ(1) * t711, 0, 0, t877, 0, t694, -t820 * t938, qJ(1) * t696 + t570 * t820 + t637 * t818, qJ(1) * t695 + t569 * t820 + t638 * t818, t584 * t820 + t589 * t818, qJ(1) * t483 + t474 * t818 + t484 * t820, t562, t517, t1104, t561, -t1099, t647, t432 * t820 + t453 * t818 + t1111, t433 * t820 + t454 * t818 + t1117, t430 * t820 + t476 * t818 + t612, qJ(1) * t409 + t372 * t820 + t374 * t818, t647, -t1104, t1099, t562, t517, t561, t411 * t820 + t458 * t818 + t612, t401 * t820 + t421 * t818 - t1111, t400 * t820 + t420 * t818 - t1117, qJ(1) * t384 + t352 * t820 + t359 * t818, t1015, t426 * t820 + t464 * t818, t452 * t820 + t489 * t818, t1074, t1119, t1072, qJ(1) * t398 + t343 * t820 + t351 * t818, qJ(1) * t406 + t345 * t820 + t354 * t818, qJ(1) * t388 + t333 * t820 + t340 * t818, qJ(1) * t342 + t328 * t820 + t329 * t818, t1015, t451 * t820 + t488 * t818, t427 * t820 + t465 * t818, t1072, -t1119, t1074, qJ(1) * t405 + t337 * t820 + t348 * t818, qJ(1) * t389 + t331 * t820 + t338 * t818, qJ(1) * t399 + t336 * t820 + t347 * t818, qJ(1) * t335 + t326 * t820 + t327 * t818; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t920, t788, 0, 0, 0, 0, t751, 0, t752, t821 * qJDD(2), pkin(1) * t754 - t821 * t678 + t819 * t905, -pkin(1) * t753 - t821 * t679 + t819 * t906, t590 * t819, pkin(1) * t560 + t590 * t990, t618, t587, t1083, t617, -t1076, t708, t821 * t586 + t819 * t848 - t1101, t821 * t585 + t819 * t847 - t1109, t495 * t821 + t507 * t962 + t948, pkin(1) * t442 + t821 * t492 + t819 * t844, t708, -t1083, t1076, t618, t587, t617, t821 * t473 + t819 * t901 + t948, t821 * t500 + t819 * t850 + t1101, t821 * t501 + t819 * t849 + t1109, pkin(1) * t416 + t821 * t418 + t819 * t851, t999, t821 * t509 + t819 * t896, t821 * t531 + t819 * t887, t1040, t1114, t1042, pkin(1) * t437 + t821 * t376 + t819 * t853, pkin(1) * t446 + t821 * t377 + t819 * t852, pkin(1) * t424 + t821 * t365 + t819 * t854, pkin(1) * t357 + t821 * t339 + t819 * t858, t999, t821 * t530 + t819 * t888, t821 * t510 + t819 * t895, t1042, -t1114, t1040, pkin(1) * t445 + t821 * t364 + t819 * t855, pkin(1) * t425 + t821 * t360 + t819 * t857, pkin(1) * t438 + t821 * t363 + t819 * t856, pkin(1) * t350 + t821 * t330 + t819 * t859;];
tauB_reg  = t1;
