% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 04:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:12:33
% EndTime: 2019-05-05 04:12:40
% DurationCPUTime: 7.43s
% Computational Cost: add. (11360->265), mult. (22997->306), div. (0->0), fcn. (15003->10), ass. (0->178)
t2225 = cos(qJ(3));
t2283 = qJD(2) * t2225;
t2267 = qJD(3) * t2283;
t2222 = sin(qJ(3));
t2270 = t2222 * qJDD(2);
t2238 = t2267 + t2270;
t2177 = qJDD(5) + t2238;
t2224 = cos(qJ(5));
t2285 = sin(qJ(5));
t2181 = qJD(3) * t2285 + t2224 * t2283;
t2183 = t2224 * qJD(3) - t2283 * t2285;
t2282 = t2183 * t2181;
t2145 = t2177 + t2282;
t2278 = t2222 * qJD(2);
t2204 = qJD(5) + t2278;
t2200 = t2204 ^ 2;
t2287 = t2183 ^ 2;
t2268 = t2200 + t2287;
t2109 = t2145 * t2285 + t2224 * t2268;
t2208 = qJD(3) * t2278;
t2269 = t2225 * qJDD(2);
t2186 = -t2208 + t2269;
t2239 = -t2224 * qJDD(3) + t2186 * t2285;
t2272 = qJD(5) + t2204;
t2289 = t2181 * t2272 + t2239;
t2091 = t2225 * t2109 - t2222 * t2289;
t2217 = sin(pkin(6));
t2219 = cos(pkin(6));
t2089 = t2222 * t2109 + t2225 * t2289;
t2123 = -t2224 * t2145 + t2268 * t2285;
t2223 = sin(qJ(2));
t2226 = cos(qJ(2));
t2251 = t2089 * t2223 + t2123 * t2226;
t2058 = t2217 * t2091 + t2219 * t2251;
t2074 = t2226 * t2089 - t2223 * t2123;
t2216 = sin(pkin(10));
t2218 = cos(pkin(10));
t2351 = t2216 * t2058 - t2218 * t2074;
t2350 = t2218 * t2058 + t2216 * t2074;
t2056 = -t2219 * t2091 + t2217 * t2251;
t2228 = qJD(2) ^ 2;
t2274 = t2225 * t2228;
t2203 = t2222 * t2274;
t2193 = qJDD(3) + t2203;
t2227 = qJD(3) ^ 2;
t2213 = t2225 ^ 2;
t2279 = t2213 * t2228;
t2199 = -t2227 - t2279;
t2158 = t2225 * t2193 + t2222 * t2199;
t2163 = t2222 * t2193 - t2225 * t2199;
t2187 = -0.2e1 * t2208 + t2269;
t2246 = t2163 * t2223 - t2187 * t2226;
t2118 = t2217 * t2158 + t2219 * t2246;
t2139 = t2226 * t2163 + t2223 * t2187;
t2345 = t2216 * t2118 - t2218 * t2139;
t2344 = t2218 * t2118 + t2216 * t2139;
t2194 = qJDD(3) - t2203;
t2212 = t2222 ^ 2;
t2198 = -t2212 * t2228 - t2227;
t2160 = t2222 * t2194 - t2225 * t2198;
t2164 = t2225 * t2194 + t2222 * t2198;
t2185 = 0.2e1 * t2267 + t2270;
t2245 = t2164 * t2223 + t2185 * t2226;
t2119 = -t2217 * t2160 + t2219 * t2245;
t2140 = t2226 * t2164 - t2223 * t2185;
t2343 = t2216 * t2119 - t2218 * t2140;
t2342 = t2218 * t2119 + t2216 * t2140;
t2273 = qJD(5) - t2204;
t2233 = t2181 * t2273 + t2239;
t2260 = -qJDD(3) * t2285 - t2224 * t2186;
t2237 = -t2183 * t2273 + t2260;
t2290 = t2224 * t2237 - t2285 * t2233;
t2157 = t2181 ^ 2;
t2143 = -t2287 - t2157;
t2288 = t2224 * t2233 + t2237 * t2285;
t2310 = t2225 * t2143 + t2222 * t2288;
t2315 = t2223 * t2290 + t2226 * t2310;
t2311 = t2222 * t2143 - t2225 * t2288;
t2317 = t2223 * t2310 - t2226 * t2290;
t2328 = -t2217 * t2311 + t2219 * t2317;
t2341 = -t2216 * t2328 + t2218 * t2315;
t2234 = t2177 - t2282;
t2291 = -t2157 - t2200;
t2296 = t2224 * t2291 - t2285 * t2234;
t2236 = t2183 * t2272 - t2260;
t2295 = t2224 * t2234 + t2285 * t2291;
t2309 = t2222 * t2295 + t2225 * t2236;
t2314 = t2223 * t2296 + t2226 * t2309;
t2308 = t2222 * t2236 - t2225 * t2295;
t2316 = t2223 * t2309 - t2226 * t2296;
t2329 = -t2217 * t2308 + t2219 * t2316;
t2340 = -t2216 * t2329 + t2218 * t2314;
t2339 = t2216 * t2315 + t2218 * t2328;
t2338 = t2216 * t2314 + t2218 * t2329;
t2331 = t2217 * t2316 + t2219 * t2308;
t2330 = t2217 * t2317 + t2219 * t2311;
t2115 = t2219 * t2160 + t2217 * t2245;
t2114 = -t2219 * t2158 + t2217 * t2246;
t2261 = t2216 * g(1) - t2218 * g(2);
t2284 = -g(3) + qJDD(1);
t2297 = t2217 * t2284 + t2219 * t2261;
t2286 = 2 * qJD(4);
t2167 = -t2217 * t2261 + t2219 * t2284;
t2277 = t2222 * t2167;
t2166 = t2225 * t2167;
t2262 = -qJDD(3) * pkin(3) - t2227 * qJ(4) + qJDD(4) - t2166;
t2192 = -t2218 * g(1) - t2216 * g(2);
t2148 = t2226 * t2192 + t2223 * t2297;
t2137 = -t2228 * pkin(2) + qJDD(2) * pkin(8) + t2148;
t2263 = t2228 * (-pkin(3) * t2225 - qJ(4) * t2222) + t2137;
t2096 = -qJDD(3) * pkin(9) + (qJDD(2) * pkin(4) - pkin(9) * t2274 + t2263) * t2222 + t2262;
t2197 = pkin(4) * t2278 - qJD(3) * pkin(9);
t2259 = t2223 * t2192 - t2226 * t2297;
t2136 = -qJDD(2) * pkin(2) - t2228 * pkin(8) + t2259;
t2235 = -t2186 * pkin(3) + t2136 + (-t2238 - t2267) * qJ(4);
t2265 = pkin(3) * qJD(3) - (2 * qJD(4));
t2098 = -pkin(4) * t2279 - t2186 * pkin(9) + (-t2197 + t2265) * t2278 + t2235;
t2071 = t2285 * t2096 + t2224 * t2098;
t2271 = t2212 + t2213;
t2154 = t2181 * pkin(5) - t2183 * qJ(6);
t2065 = -t2200 * pkin(5) + t2177 * qJ(6) + 0.2e1 * qJD(6) * t2204 - t2181 * t2154 + t2071;
t2240 = t2224 * t2096 - t2098 * t2285;
t2229 = -t2177 * pkin(5) - t2200 * qJ(6) + t2183 * t2154 + qJDD(6) - t2240;
t2043 = t2065 * t2285 - t2224 * t2229;
t2230 = -t2227 * pkin(3) + qJDD(3) * qJ(4) + t2225 * t2263 + t2277;
t2095 = t2186 * pkin(4) - pkin(9) * t2279 + (t2286 + t2197) * qJD(3) + t2230;
t2072 = t2236 * pkin(5) + qJ(6) * t2289 - 0.2e1 * qJD(6) * t2183 + t2095;
t2042 = t2222 * t2043 + t2225 * t2072;
t2044 = t2224 * t2065 + t2229 * t2285;
t2258 = t2042 * t2223 - t2044 * t2226;
t2047 = t2071 * t2285 + t2224 * t2240;
t2046 = t2222 * t2047 + t2225 * t2095;
t2048 = t2224 * t2071 - t2240 * t2285;
t2257 = t2046 * t2223 - t2048 * t2226;
t2105 = qJD(3) * t2286 + t2230;
t2106 = t2222 * t2263 + t2262;
t2079 = t2225 * t2105 + t2222 * t2106;
t2107 = t2265 * t2278 + t2235;
t2256 = t2079 * t2223 - t2107 * t2226;
t2125 = -t2222 * t2137 + t2166;
t2126 = t2225 * t2137 + t2277;
t2085 = -t2222 * t2125 + t2225 * t2126;
t2253 = t2085 * t2223 - t2136 * t2226;
t2248 = t2148 * t2223 - t2226 * t2259;
t2188 = t2271 * qJDD(2);
t2191 = t2271 * t2228;
t2243 = t2188 * t2223 + t2191 * t2226;
t2242 = t2226 * qJDD(2) - t2223 * t2228;
t2190 = -t2223 * qJDD(2) - t2226 * t2228;
t2172 = t2242 * t2219;
t2171 = t2190 * t2219;
t2170 = t2242 * t2217;
t2169 = t2190 * t2217;
t2156 = t2226 * t2188 - t2223 * t2191;
t2152 = t2243 * t2219;
t2151 = t2243 * t2217;
t2128 = -t2216 * t2152 + t2218 * t2156;
t2127 = t2218 * t2152 + t2216 * t2156;
t2108 = t2226 * t2148 + t2223 * t2259;
t2104 = -t2217 * t2167 + t2219 * t2248;
t2103 = t2219 * t2167 + t2217 * t2248;
t2084 = t2225 * t2125 + t2222 * t2126;
t2078 = t2222 * t2105 - t2225 * t2106;
t2077 = t2226 * t2085 + t2223 * t2136;
t2067 = t2226 * t2079 + t2223 * t2107;
t2060 = -t2217 * t2084 + t2219 * t2253;
t2059 = t2219 * t2084 + t2217 * t2253;
t2050 = -t2217 * t2078 + t2219 * t2256;
t2049 = t2219 * t2078 + t2217 * t2256;
t2045 = -t2225 * t2047 + t2222 * t2095;
t2041 = -t2225 * t2043 + t2222 * t2072;
t2040 = t2226 * t2046 + t2223 * t2048;
t2039 = t2226 * t2042 + t2223 * t2044;
t2038 = -t2217 * t2045 + t2219 * t2257;
t2037 = t2219 * t2045 + t2217 * t2257;
t2036 = -t2217 * t2041 + t2219 * t2258;
t2035 = t2219 * t2041 + t2217 * t2258;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2218 * t2192 - t2216 * t2261, 0, 0, 0, 0, 0, 0, -t2216 * t2172 + t2218 * t2190, -t2216 * t2171 - t2218 * t2242, 0, -t2216 * t2104 + t2218 * t2108, 0, 0, 0, 0, 0, 0, t2345, t2343, t2128, -t2216 * t2060 + t2218 * t2077, 0, 0, 0, 0, 0, 0, t2128, -t2345, -t2343, -t2216 * t2050 + t2218 * t2067, 0, 0, 0, 0, 0, 0, t2340, t2351, t2341, -t2216 * t2038 + t2218 * t2040, 0, 0, 0, 0, 0, 0, t2340, t2341, -t2351, -t2216 * t2036 + t2218 * t2039; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2216 * t2192 + t2218 * t2261, 0, 0, 0, 0, 0, 0, t2218 * t2172 + t2216 * t2190, t2218 * t2171 - t2216 * t2242, 0, t2218 * t2104 + t2216 * t2108, 0, 0, 0, 0, 0, 0, -t2344, -t2342, t2127, t2218 * t2060 + t2216 * t2077, 0, 0, 0, 0, 0, 0, t2127, t2344, t2342, t2218 * t2050 + t2216 * t2067, 0, 0, 0, 0, 0, 0, t2338, -t2350, t2339, t2218 * t2038 + t2216 * t2040, 0, 0, 0, 0, 0, 0, t2338, t2339, t2350, t2218 * t2036 + t2216 * t2039; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2284, 0, 0, 0, 0, 0, 0, t2170, t2169, 0, t2103, 0, 0, 0, 0, 0, 0, -t2114, -t2115, t2151, t2059, 0, 0, 0, 0, 0, 0, t2151, t2114, t2115, t2049, 0, 0, 0, 0, 0, 0, t2331, -t2056, t2330, t2037, 0, 0, 0, 0, 0, 0, t2331, t2330, t2056, t2035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2192, 0, 0, 0, 0, 0, 0, t2190, -t2242, 0, t2108, 0, 0, 0, 0, 0, 0, -t2139, -t2140, t2156, t2077, 0, 0, 0, 0, 0, 0, t2156, t2139, t2140, t2067, 0, 0, 0, 0, 0, 0, t2314, -t2074, t2315, t2040, 0, 0, 0, 0, 0, 0, t2314, t2315, t2074, t2039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2261, 0, 0, 0, 0, 0, 0, t2172, t2171, 0, t2104, 0, 0, 0, 0, 0, 0, -t2118, -t2119, t2152, t2060, 0, 0, 0, 0, 0, 0, t2152, t2118, t2119, t2050, 0, 0, 0, 0, 0, 0, t2329, -t2058, t2328, t2038, 0, 0, 0, 0, 0, 0, t2329, t2328, t2058, t2036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2284, 0, 0, 0, 0, 0, 0, t2170, t2169, 0, t2103, 0, 0, 0, 0, 0, 0, -t2114, -t2115, t2151, t2059, 0, 0, 0, 0, 0, 0, t2151, t2114, t2115, t2049, 0, 0, 0, 0, 0, 0, t2331, -t2056, t2330, t2037, 0, 0, 0, 0, 0, 0, t2331, t2330, t2056, t2035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2228, -qJDD(2), 0, t2148, 0, 0, 0, 0, 0, 0, -t2163, -t2164, t2188, t2085, 0, 0, 0, 0, 0, 0, t2188, t2163, t2164, t2079, 0, 0, 0, 0, 0, 0, t2309, -t2089, t2310, t2046, 0, 0, 0, 0, 0, 0, t2309, t2310, t2089, t2042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2228, 0, -t2259, 0, 0, 0, 0, 0, 0, t2187, -t2185, t2191, -t2136, 0, 0, 0, 0, 0, 0, t2191, -t2187, t2185, -t2107, 0, 0, 0, 0, 0, 0, -t2296, -t2123, -t2290, -t2048, 0, 0, 0, 0, 0, 0, -t2296, -t2290, t2123, -t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2167, 0, 0, 0, 0, 0, 0, t2158, -t2160, 0, t2084, 0, 0, 0, 0, 0, 0, 0, -t2158, t2160, t2078, 0, 0, 0, 0, 0, 0, t2308, t2091, t2311, t2045, 0, 0, 0, 0, 0, 0, t2308, t2311, -t2091, t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2199, -t2194, t2269, t2126, 0, 0, 0, 0, 0, 0, t2269, -t2199, t2194, t2105, 0, 0, 0, 0, 0, 0, t2236, -t2289, t2143, t2095, 0, 0, 0, 0, 0, 0, t2236, t2143, t2289, t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2193, t2198, -t2270, t2125, 0, 0, 0, 0, 0, 0, -t2270, -t2193, -t2198, -t2106, 0, 0, 0, 0, 0, 0, -t2295, t2109, -t2288, -t2047, 0, 0, 0, 0, 0, 0, -t2295, -t2288, -t2109, -t2043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2187, t2185, -t2191, t2136, 0, 0, 0, 0, 0, 0, -t2191, t2187, -t2185, t2107, 0, 0, 0, 0, 0, 0, t2296, t2123, t2290, t2048, 0, 0, 0, 0, 0, 0, t2296, t2290, -t2123, t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2191, t2187, -t2185, t2107, 0, 0, 0, 0, 0, 0, t2296, t2123, t2290, t2048, 0, 0, 0, 0, 0, 0, t2296, t2290, -t2123, t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2269, t2199, -t2194, -t2105, 0, 0, 0, 0, 0, 0, -t2236, t2289, -t2143, -t2095, 0, 0, 0, 0, 0, 0, -t2236, -t2143, -t2289, -t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2270, t2193, t2198, t2106, 0, 0, 0, 0, 0, 0, t2295, -t2109, t2288, t2047, 0, 0, 0, 0, 0, 0, t2295, t2288, t2109, t2043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2291, -t2145, t2237, t2071, 0, 0, 0, 0, 0, 0, t2291, t2237, t2145, t2065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2234, -t2268, t2233, t2240, 0, 0, 0, 0, 0, 0, t2234, t2233, t2268, -t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2236, -t2289, t2143, t2095, 0, 0, 0, 0, 0, 0, t2236, t2143, t2289, t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2291, t2237, t2145, t2065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2236, t2143, t2289, t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2234, -t2233, -t2268, t2229;];
f_new_reg  = t1;
