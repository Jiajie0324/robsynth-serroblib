% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 08:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 08:36:15
% EndTime: 2019-05-07 08:36:51
% DurationCPUTime: 24.40s
% Computational Cost: add. (66313->677), mult. (132335->912), div. (0->0), fcn. (90926->8), ass. (0->510)
t892 = cos(qJ(2));
t958 = qJD(1) * t892;
t872 = -qJD(3) + t958;
t1024 = t872 ^ 2;
t887 = sin(qJ(3));
t891 = cos(qJ(3));
t888 = sin(qJ(2));
t959 = qJD(1) * t888;
t844 = -t891 * qJD(2) + t887 * t959;
t1025 = t844 ^ 2;
t820 = t1025 - t1024;
t952 = qJD(1) * qJD(2);
t875 = t888 * t952;
t949 = qJDD(1) * t892;
t851 = -t875 + t949;
t841 = -qJDD(3) + t851;
t846 = t887 * qJD(2) + t891 * t959;
t976 = t844 * t846;
t904 = t841 - t976;
t985 = t904 * t887;
t719 = t820 * t891 + t985;
t941 = t892 * t952;
t951 = qJDD(1) * t888;
t850 = t941 + t951;
t936 = -t891 * qJDD(2) + t850 * t887;
t740 = (qJD(3) + t872) * t846 + t936;
t675 = t719 * t892 - t740 * t888;
t984 = t904 * t891;
t716 = t820 * t887 - t984;
t889 = sin(qJ(1));
t893 = cos(qJ(1));
t1113 = t675 * t889 - t716 * t893;
t1112 = t675 * t893 + t716 * t889;
t916 = -qJDD(2) * t887 - t850 * t891;
t902 = qJD(3) * t844 + t916;
t975 = t844 * t872;
t1040 = t975 + t902;
t1065 = t1040 * t891 - t740 * t887;
t840 = t846 ^ 2;
t1037 = t840 + t1025;
t1064 = -t1040 * t887 - t740 * t891;
t1081 = -t1037 * t888 + t1064 * t892;
t1091 = t1065 * t889 + t1081 * t893;
t1111 = pkin(6) * t1091;
t1092 = -t1065 * t893 + t1081 * t889;
t1110 = pkin(6) * t1092;
t954 = qJD(3) - t872;
t739 = t846 * t954 + t936;
t1041 = t975 - t902;
t991 = t1041 * t887;
t682 = t739 * t891 + t991;
t802 = t840 - t1025;
t655 = t682 * t892 - t802 * t888;
t678 = t1041 * t891 - t739 * t887;
t1109 = t655 * t889 + t678 * t893;
t1108 = t655 * t893 - t678 * t889;
t799 = -t840 - t1024;
t709 = t799 * t891 + t985;
t1107 = pkin(1) * t709;
t1106 = pkin(2) * t709;
t703 = t799 * t887 - t984;
t1105 = pkin(8) * t703;
t1104 = pkin(8) * t709;
t886 = sin(qJ(5));
t890 = cos(qJ(5));
t793 = -t890 * t844 + t846 * t886;
t795 = t844 * t886 + t846 * t890;
t725 = t795 * t793;
t836 = qJDD(5) + t841;
t1072 = t725 - t836;
t1103 = pkin(5) * t1072;
t1102 = pkin(7) * t1081;
t1082 = t1037 * t892 + t1064 * t888;
t1101 = pkin(7) * t1082;
t1100 = t703 * t888;
t1099 = t703 * t892;
t1098 = t709 * t889;
t1097 = t709 * t893;
t1094 = -pkin(1) * t1082 - pkin(2) * t1037 - pkin(8) * t1064;
t1093 = t719 * t888 + t740 * t892;
t1090 = pkin(8) * t1065;
t1087 = qJ(4) * t1041;
t1083 = t682 * t888 + t802 * t892;
t821 = -t840 + t1024;
t937 = t841 + t976;
t983 = t937 * t887;
t1059 = -t821 * t891 + t983;
t982 = t937 * t891;
t1058 = -t821 * t887 - t982;
t1062 = -t1040 * t888 + t1058 * t892;
t1080 = t1059 * t893 + t1062 * t889;
t1079 = -t1059 * t889 + t1062 * t893;
t1035 = -t1024 - t1025;
t1053 = t1035 * t887 - t982;
t1078 = pkin(1) * t1053;
t1077 = pkin(2) * t1053;
t1052 = t1035 * t891 + t983;
t1076 = pkin(8) * t1052;
t1075 = pkin(8) * t1053;
t1071 = t1052 * t888;
t1070 = t1052 * t892;
t1069 = t1053 * t889;
t1068 = t1053 * t893;
t1063 = t1040 * t892 + t1058 * t888;
t1061 = -2 * qJD(4);
t1022 = pkin(3) + pkin(4);
t998 = t1072 * t886;
t997 = t1072 * t890;
t1007 = t892 * g(3);
t1023 = qJD(2) ^ 2;
t862 = g(1) * t893 + g(2) * t889;
t894 = qJD(1) ^ 2;
t834 = -pkin(1) * t894 + qJDD(1) * pkin(7) - t862;
t1020 = pkin(2) * t892;
t929 = -pkin(8) * t888 - t1020;
t848 = t929 * qJD(1);
t759 = -qJDD(2) * pkin(2) - t1023 * pkin(8) + (qJD(1) * t848 + t834) * t888 + t1007;
t912 = qJD(3) * t846 + t936;
t898 = t912 * pkin(3) - t1087 + t759;
t968 = t872 * t887;
t816 = t846 * t968;
t967 = t872 * t891;
t942 = t844 * t967;
t924 = -t816 + t942;
t1027 = -t841 * t888 + t892 * t924;
t817 = t846 * t967;
t943 = t844 * t968;
t923 = -t817 - t943;
t1051 = t1027 * t889 + t893 * t923;
t1050 = t1027 * t893 - t889 * t923;
t899 = t887 * t912 - t942;
t945 = t888 * t976;
t1028 = t892 * t899 - t945;
t900 = t891 * t912 + t943;
t1049 = t1028 * t889 + t893 * t900;
t1048 = t1028 * t893 - t889 * t900;
t688 = -t793 * qJD(5) + t886 * t912 - t890 * t902;
t864 = qJD(5) + t872;
t773 = t864 * t793;
t1042 = -t773 + t688;
t861 = g(1) * t889 - t893 * g(2);
t833 = qJDD(1) * pkin(1) + pkin(7) * t894 + t861;
t918 = -t851 + t875;
t919 = t850 + t941;
t737 = pkin(2) * t918 - pkin(8) * t919 - t833;
t815 = -g(3) * t888 + t892 * t834;
t760 = -pkin(2) * t1023 + qJDD(2) * pkin(8) + t848 * t958 + t815;
t690 = t887 * t737 + t891 * t760;
t797 = pkin(3) * t844 - qJ(4) * t846;
t917 = -t841 * qJ(4) + t1061 * t872 - t844 * t797 + t690;
t928 = pkin(4) * t872 - pkin(9) * t846;
t1039 = t1025 * pkin(9) - t846 * t928;
t955 = qJD(6) * t795;
t1038 = -qJ(6) * t688 - 0.2e1 * t955;
t763 = pkin(5) * t864 - qJ(6) * t795;
t1036 = -t795 * t763 - qJDD(6);
t938 = -t886 * t902 - t890 * t912;
t687 = -qJD(5) * t795 - t938;
t1034 = t687 * qJ(6) - 0.2e1 * qJD(6) * t793 - t763 * t864;
t1033 = qJ(6) * t773 + t1103;
t733 = t887 * t902 + t817;
t734 = -t891 * t902 + t816;
t925 = t892 * t734 + t945;
t1031 = t893 * t733 + t889 * t925;
t1030 = t892 * t841 + t888 * t924;
t944 = t892 * t976;
t1029 = t888 * t899 + t944;
t1026 = -t733 * t889 + t893 * t925;
t791 = t793 ^ 2;
t792 = t795 ^ 2;
t863 = t864 ^ 2;
t1021 = pkin(2) * t888;
t1019 = pkin(3) * t891;
t653 = t773 + t688;
t903 = (-qJD(5) + t864) * t795 - t938;
t591 = -t653 * t890 + t886 * t903;
t593 = t653 * t886 + t890 * t903;
t538 = t591 * t887 + t593 * t891;
t691 = -t791 - t792;
t514 = t538 * t892 - t691 * t888;
t536 = -t591 * t891 + t593 * t887;
t485 = t514 * t889 - t536 * t893;
t1018 = pkin(6) * t485;
t708 = -t863 - t791;
t643 = t708 * t886 - t997;
t644 = t708 * t890 + t998;
t581 = t643 * t887 + t644 * t891;
t649 = (qJD(5) + t864) * t795 + t938;
t556 = t581 * t892 - t649 * t888;
t580 = -t643 * t891 + t644 * t887;
t507 = t556 * t889 - t580 * t893;
t1017 = pkin(6) * t507;
t699 = t725 + t836;
t1000 = t699 * t886;
t750 = -t792 - t863;
t662 = t750 * t890 - t1000;
t999 = t699 * t890;
t663 = -t750 * t886 - t999;
t600 = t662 * t887 + t663 * t891;
t562 = -t1042 * t888 + t600 * t892;
t599 = -t662 * t891 + t663 * t887;
t517 = t562 * t889 - t599 * t893;
t1016 = pkin(6) * t517;
t513 = t538 * t888 + t691 * t892;
t1015 = pkin(7) * t513;
t555 = t581 * t888 + t649 * t892;
t1014 = pkin(7) * t555;
t561 = t1042 * t892 + t600 * t888;
t1013 = pkin(7) * t561;
t1012 = pkin(8) * t536;
t1011 = pkin(8) * t580;
t1010 = pkin(8) * t599;
t1009 = t687 * pkin(5);
t1006 = qJ(4) * t891;
t689 = -t891 * t737 + t887 * t760;
t931 = t846 * t797 + qJDD(4) + t689;
t911 = pkin(3) * t841 + t931;
t901 = -qJ(4) * t1024 + t911;
t605 = t937 * pkin(4) + pkin(9) * t1040 + t901;
t635 = -pkin(3) * t1024 + t917;
t611 = -pkin(4) * t1025 + pkin(9) * t912 - t872 * t928 + t635;
t549 = -t890 * t605 + t611 * t886;
t909 = t549 + t1033;
t509 = -t909 + t1038;
t1004 = t509 * t886;
t1003 = t509 * t890;
t939 = -pkin(3) * t872 + t1061;
t612 = t936 * pkin(4) + (pkin(4) * qJD(3) + t939) * t846 + t898 + t1039;
t1002 = t612 * t886;
t1001 = t612 * t890;
t988 = t759 * t887;
t987 = t759 * t891;
t979 = t833 * t888;
t978 = t833 * t892;
t974 = t846 * t872;
t871 = t892 * t894 * t888;
t858 = -t871 + qJDD(2);
t973 = t858 * t888;
t972 = t858 * t892;
t859 = qJDD(2) + t871;
t971 = t859 * t888;
t970 = t864 * t886;
t969 = t864 * t890;
t882 = t888 ^ 2;
t966 = t882 * t894;
t965 = -pkin(1) * t536 + pkin(7) * t514;
t964 = -pkin(1) * t580 + pkin(7) * t556;
t963 = -pkin(1) * t599 + pkin(7) * t562;
t550 = t886 * t605 + t890 * t611;
t962 = t1037 - t1024;
t961 = -t791 - t750;
t883 = t892 ^ 2;
t960 = t882 + t883;
t950 = qJDD(1) * t889;
t948 = qJDD(1) * t893;
t947 = t888 * t725;
t946 = t892 * t725;
t940 = qJ(4) * t887 + pkin(2);
t814 = t888 * t834 + t1007;
t749 = t814 * t888 + t892 * t815;
t807 = -t861 * t889 - t893 * t862;
t934 = t889 * t871;
t933 = t893 * t871;
t855 = -t889 * t894 + t948;
t927 = -pkin(6) * t855 - g(3) * t889;
t926 = t888 * t734 - t944;
t922 = -pkin(9) * t591 + qJ(4) * t691;
t921 = -pkin(9) * t643 + qJ(4) * t649;
t920 = -pkin(9) * t662 + qJ(4) * t1042;
t496 = -t549 * t890 + t550 * t886;
t497 = t549 * t886 + t550 * t890;
t622 = -t689 * t891 + t690 * t887;
t623 = t689 * t887 + t690 * t891;
t748 = t814 * t892 - t815 * t888;
t806 = t861 * t893 - t862 * t889;
t915 = -pkin(9) * t644 + t1022 * t649;
t914 = -pkin(9) * t663 + t1022 * t1042;
t913 = -pkin(9) * t593 + t1022 * t691;
t910 = t550 + t1034;
t908 = -pkin(1) * t513 - pkin(2) * t691 - pkin(8) * t538;
t907 = -pkin(1) * t555 - pkin(2) * t649 - pkin(8) * t581;
t906 = -pkin(1) * t561 - pkin(2) * t1042 - pkin(8) * t600;
t479 = -pkin(2) * t536 - qJ(4) * t593 + t1022 * t591;
t493 = -pkin(2) * t599 - qJ(4) * t663 + t1022 * t662 - t550;
t487 = -pkin(2) * t580 - qJ(4) * t644 + t1022 * t643 - t549;
t897 = 0.2e1 * qJD(4) * t846 - t898;
t896 = pkin(3) * t974 + t897;
t895 = t612 + t1036;
t880 = t883 * t894;
t868 = -t880 - t1023;
t867 = t880 - t1023;
t866 = -t966 - t1023;
t865 = -t966 + t1023;
t857 = t880 - t966;
t856 = t880 + t966;
t854 = t893 * t894 + t950;
t853 = t960 * qJDD(1);
t852 = -0.2e1 * t875 + t949;
t849 = 0.2e1 * t941 + t951;
t843 = t892 * t859;
t842 = t960 * t952;
t828 = -pkin(6) * t854 + g(3) * t893;
t819 = t850 * t892 - t882 * t952;
t818 = -t851 * t888 - t883 * t952;
t813 = -t866 * t888 - t972;
t812 = -t865 * t888 + t843;
t811 = t868 * t892 - t971;
t810 = t867 * t892 - t973;
t809 = t866 * t892 - t973;
t808 = t868 * t888 + t843;
t801 = t853 * t893 - t856 * t889;
t800 = t853 * t889 + t856 * t893;
t796 = -t849 * t888 + t852 * t892;
t769 = -t792 + t863;
t768 = t791 - t863;
t767 = t813 * t893 + t849 * t889;
t766 = t811 * t893 - t852 * t889;
t765 = t813 * t889 - t849 * t893;
t764 = t811 * t889 + t852 * t893;
t762 = -pkin(7) * t809 - t978;
t761 = -pkin(7) * t808 - t979;
t752 = -pkin(1) * t809 + t815;
t751 = -pkin(1) * t808 + t814;
t745 = t844 * t954 + t916;
t738 = t912 - t974;
t721 = t792 - t791;
t707 = t749 * t893 - t833 * t889;
t706 = t749 * t889 + t833 * t893;
t697 = (-t793 * t890 + t795 * t886) * t864;
t696 = (t793 * t886 + t795 * t890) * t864;
t677 = t987 - t1104;
t672 = t768 * t890 - t1000;
t671 = -t769 * t886 - t997;
t670 = -t768 * t886 - t999;
t669 = -t769 * t890 + t998;
t668 = t988 - t1075;
t667 = t738 * t888 + t1070;
t666 = -t745 * t888 - t1099;
t665 = -t738 * t892 + t1071;
t664 = t745 * t892 - t1100;
t660 = t739 * t888 + t1070;
t659 = -t1041 * t888 + t1099;
t658 = -t739 * t892 + t1071;
t657 = t1041 * t892 + t1100;
t648 = t688 * t890 - t795 * t970;
t647 = -t688 * t886 - t795 * t969;
t646 = -t687 * t886 + t793 * t969;
t645 = -t687 * t890 - t793 * t970;
t636 = t846 * t939 + t898;
t634 = t690 - t1106;
t633 = -t696 * t887 + t697 * t891;
t632 = -t696 * t891 - t697 * t887;
t631 = t689 - t1077;
t630 = t633 * t892 - t836 * t888;
t629 = t633 * t888 + t836 * t892;
t628 = qJ(4) * t962 + t911;
t627 = t667 * t893 + t1069;
t626 = t666 * t893 + t1098;
t625 = t667 * t889 - t1068;
t624 = t666 * t889 - t1097;
t621 = pkin(3) * t962 + t917;
t620 = t660 * t893 + t1069;
t619 = t659 * t893 - t1098;
t618 = t660 * t889 - t1068;
t617 = t659 * t889 + t1097;
t616 = (-t738 + t974) * pkin(3) + t897;
t615 = t896 + t1087;
t614 = -pkin(2) * t1065 - pkin(3) * t1040 + qJ(4) * t740;
t613 = -pkin(5) * t1042 - qJ(6) * t699;
t609 = -t670 * t887 + t672 * t891;
t608 = -t669 * t887 + t671 * t891;
t607 = -t670 * t891 - t672 * t887;
t606 = -t669 * t891 - t671 * t887;
t604 = t623 * t892 + t759 * t888;
t603 = t623 * t888 - t759 * t892;
t592 = -t1042 * t886 - t649 * t890;
t590 = -t1042 * t890 + t649 * t886;
t588 = -pkin(1) * t664 - pkin(2) * t745 + t1105 - t988;
t587 = -t1077 + (-t1035 - t1024) * qJ(4) + (t937 + t841) * pkin(3) + t931;
t586 = -t647 * t887 + t648 * t891;
t585 = -t645 * t887 + t646 * t891;
t584 = -t647 * t891 - t648 * t887;
t583 = -t645 * t891 - t646 * t887;
t582 = -pkin(1) * t658 + pkin(2) * t739 - t1076 + t987;
t578 = t1106 + qJ(4) * t904 + (t799 + t1024) * pkin(3) - t917;
t577 = -t622 - t1090;
t576 = t635 * t891 + t887 * t901;
t575 = t635 * t887 - t891 * t901;
t574 = -t1006 * t738 - t616 * t887 - t1075;
t573 = -pkin(3) * t991 + t615 * t891 + t1104;
t572 = t630 * t893 - t632 * t889;
t571 = t630 * t889 + t632 * t893;
t570 = t586 * t892 - t947;
t569 = t585 * t892 + t947;
t568 = t586 * t888 + t946;
t567 = t585 * t888 - t946;
t566 = t609 * t892 - t888 * t903;
t565 = t608 * t892 - t653 * t888;
t564 = t609 * t888 + t892 * t903;
t563 = t608 * t888 + t653 * t892;
t559 = -pkin(7) * t664 - t634 * t888 + t677 * t892;
t558 = -pkin(7) * t658 - t631 * t888 + t668 * t892;
t557 = t791 * qJ(6) + t1009 + t895;
t553 = t604 * t893 + t622 * t889;
t552 = t604 * t889 - t622 * t893;
t551 = -pkin(4) * t912 + qJ(6) * t961 - t1009 - t1036 - t1039 + t896;
t548 = t576 * t892 + t636 * t888;
t547 = t576 * t888 - t636 * t892;
t546 = t1094 - t623;
t545 = -pkin(1) * t603 + pkin(2) * t759 - pkin(8) * t623;
t544 = t920 - t1001;
t543 = -pkin(1) * t665 - t616 * t891 + t738 * t940 - t1076;
t542 = -t621 * t887 + t628 * t891 - t1090;
t541 = -pkin(1) * t657 - t1105 - t615 * t887 + (-pkin(2) - t1019) * t1041;
t540 = t921 - t1002;
t539 = t1021 * t1065 + t577 * t892 - t1101;
t537 = -t590 * t887 + t592 * t891;
t535 = -t590 * t891 - t592 * t887;
t533 = t566 * t893 - t607 * t889;
t532 = t565 * t893 - t606 * t889;
t531 = t566 * t889 + t607 * t893;
t530 = t565 * t889 + t606 * t893;
t529 = t537 * t892 - t721 * t888;
t528 = t537 * t888 + t721 * t892;
t527 = t914 + t1002;
t526 = (t687 - t649) * pkin(5) + (t791 + t708) * qJ(6) + t895;
t525 = -pkin(8) * t575 + (pkin(3) * t887 - t1006) * t636;
t524 = -pkin(2) * t575 + pkin(3) * t901 - qJ(4) * t635;
t523 = -pkin(7) * t603 + (-pkin(8) * t892 + t1021) * t622;
t522 = t570 * t893 - t584 * t889;
t521 = t569 * t893 - t583 * t889;
t520 = t570 * t889 + t584 * t893;
t519 = t569 * t889 + t583 * t893;
t518 = t562 * t893 + t599 * t889;
t516 = pkin(6) * t518;
t515 = t915 - t1001;
t511 = -t621 * t891 - t628 * t887 + t1094;
t510 = -pkin(5) * t791 + t910;
t508 = t556 * t893 + t580 * t889;
t506 = pkin(6) * t508;
t505 = -pkin(7) * t665 + t574 * t892 - t587 * t888;
t504 = -pkin(7) * t657 + t573 * t892 - t578 * t888;
t503 = t548 * t893 + t575 * t889;
t502 = t548 * t889 - t575 * t893;
t501 = t542 * t892 - t614 * t888 - t1101;
t500 = 0.2e1 * t955 + (t653 + t688) * qJ(6) + t909;
t499 = qJ(6) * t903 + (-t691 - t791) * pkin(5) + t910;
t498 = t551 * t890 - t613 * t886 + t920;
t495 = qJ(6) * t997 - t526 * t886 + t921;
t494 = -t551 * t886 - t613 * t890 + t914;
t492 = pkin(5) * t557 + qJ(6) * t510;
t491 = -qJ(6) * t998 - t526 * t890 + t915;
t490 = t529 * t893 - t535 * t889;
t489 = t529 * t889 + t535 * t893;
t488 = -pkin(9) * t496 - qJ(4) * t612;
t486 = t514 * t893 + t536 * t889;
t484 = pkin(6) * t486;
t483 = -pkin(1) * t547 - pkin(8) * t576 + (t940 + t1019) * t636;
t482 = -t496 + t922;
t481 = -pkin(5) * t961 - t1034 + t493;
t480 = -t527 * t887 + t544 * t891 - t1010;
t478 = t510 * t890 - t1004;
t477 = t510 * t886 + t1003;
t476 = -t497 + t913;
t475 = -pkin(9) * t497 - t1022 * t612;
t474 = -t515 * t887 + t540 * t891 - t1011;
t473 = -t1033 + t1038 + t487 - t1103;
t472 = -pkin(5) * t653 + t479;
t471 = -pkin(7) * t547 - t524 * t888 + t525 * t892;
t470 = -t527 * t891 - t544 * t887 + t906;
t469 = t496 * t887 + t497 * t891;
t468 = -t496 * t891 + t497 * t887;
t467 = -t515 * t891 - t540 * t887 + t907;
t466 = -t499 * t886 + t500 * t890 + t922;
t465 = t469 * t892 + t612 * t888;
t464 = t469 * t888 - t612 * t892;
t463 = -t499 * t890 - t500 * t886 + t913;
t462 = -t494 * t887 + t498 * t891 - t1010;
t461 = -t491 * t887 + t495 * t891 - t1011;
t460 = -t494 * t891 - t498 * t887 + t906;
t459 = t477 * t887 + t478 * t891;
t458 = -t477 * t891 + t478 * t887;
t457 = t480 * t892 - t493 * t888 - t1013;
t456 = -t491 * t891 - t495 * t887 + t907;
t455 = t474 * t892 - t487 * t888 - t1014;
t454 = t459 * t892 + t557 * t888;
t453 = t459 * t888 - t557 * t892;
t452 = -t476 * t887 + t482 * t891 - t1012;
t451 = -pkin(9) * t477 - qJ(4) * t557 - qJ(6) * t1003 - t492 * t886;
t450 = t462 * t892 - t481 * t888 - t1013;
t449 = -t476 * t891 - t482 * t887 + t908;
t448 = t465 * t893 + t468 * t889;
t447 = t465 * t889 - t468 * t893;
t446 = -pkin(9) * t478 + qJ(6) * t1004 - t1022 * t557 - t492 * t890;
t445 = t461 * t892 - t473 * t888 - t1014;
t444 = -pkin(8) * t468 - t475 * t887 + t488 * t891;
t443 = -pkin(2) * t468 - qJ(4) * t497 + t1022 * t496;
t442 = -t463 * t887 + t466 * t891 - t1012;
t441 = t452 * t892 - t479 * t888 - t1015;
t440 = -t463 * t891 - t466 * t887 + t908;
t439 = t454 * t893 + t458 * t889;
t438 = t454 * t889 - t458 * t893;
t437 = -pkin(1) * t464 + pkin(2) * t612 - pkin(8) * t469 - t475 * t891 - t488 * t887;
t436 = t442 * t892 - t472 * t888 - t1015;
t435 = -pkin(2) * t458 + pkin(5) * t509 - qJ(4) * t478 + t1022 * t477;
t434 = -pkin(8) * t458 - t446 * t887 + t451 * t891;
t433 = -pkin(7) * t464 - t443 * t888 + t444 * t892;
t432 = -pkin(1) * t453 + pkin(2) * t557 - pkin(8) * t459 - t446 * t891 - t451 * t887;
t431 = -pkin(7) * t453 + t434 * t892 - t435 * t888;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t854, -t855, 0, t807, 0, 0, 0, 0, 0, 0, t766, t767, t801, t707, 0, 0, 0, 0, 0, 0, t620, t626, t1091, t553, 0, 0, 0, 0, 0, 0, t627, t1091, t619, t503, 0, 0, 0, 0, 0, 0, t508, t518, t486, t448, 0, 0, 0, 0, 0, 0, t508, t518, t486, t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t855, -t854, 0, t806, 0, 0, 0, 0, 0, 0, t764, t765, t800, t706, 0, 0, 0, 0, 0, 0, t618, t624, t1092, t552, 0, 0, 0, 0, 0, 0, t625, t1092, t617, t502, 0, 0, 0, 0, 0, 0, t507, t517, t485, t447, 0, 0, 0, 0, 0, 0, t507, t517, t485, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t808, t809, 0, -t748, 0, 0, 0, 0, 0, 0, t658, t664, t1082, t603, 0, 0, 0, 0, 0, 0, t665, t1082, t657, t547, 0, 0, 0, 0, 0, 0, t555, t561, t513, t464, 0, 0, 0, 0, 0, 0, t555, t561, t513, t453; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t855, 0, -t854, 0, t927, -t828, -t806, -pkin(6) * t806, t819 * t893 - t934, t796 * t893 - t857 * t889, t812 * t893 + t888 * t950, t818 * t893 + t934, t810 * t893 + t889 * t949, qJDD(2) * t889 + t842 * t893, -pkin(6) * t764 - t751 * t889 + t761 * t893, -pkin(6) * t765 - t752 * t889 + t762 * t893, -pkin(6) * t800 + t748 * t893, -pkin(6) * t706 - (pkin(1) * t889 - pkin(7) * t893) * t748, t1026, -t1108, t1079, t1048, t1112, t1050, -pkin(6) * t618 + t558 * t893 - t582 * t889, -pkin(6) * t624 + t559 * t893 - t588 * t889, t539 * t893 - t546 * t889 - t1110, -pkin(6) * t552 + t523 * t893 - t545 * t889, t1026, t1079, t1108, t1050, -t1112, t1048, -pkin(6) * t625 + t505 * t893 - t543 * t889, t501 * t893 - t511 * t889 - t1110, -pkin(6) * t617 + t504 * t893 - t541 * t889, -pkin(6) * t502 + t471 * t893 - t483 * t889, t522, t490, t532, t521, t533, t572, t455 * t893 - t467 * t889 - t1017, t457 * t893 - t470 * t889 - t1016, t441 * t893 - t449 * t889 - t1018, -pkin(6) * t447 + t433 * t893 - t437 * t889, t522, t490, t532, t521, t533, t572, t445 * t893 - t456 * t889 - t1017, t450 * t893 - t460 * t889 - t1016, t436 * t893 - t440 * t889 - t1018, -pkin(6) * t438 + t431 * t893 - t432 * t889; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t854, 0, t855, 0, t828, t927, t807, pkin(6) * t807, t819 * t889 + t933, t796 * t889 + t857 * t893, t812 * t889 - t888 * t948, t818 * t889 - t933, t810 * t889 - t892 * t948, -qJDD(2) * t893 + t842 * t889, pkin(6) * t766 + t751 * t893 + t761 * t889, pkin(6) * t767 + t752 * t893 + t762 * t889, pkin(6) * t801 + t748 * t889, pkin(6) * t707 - (-pkin(1) * t893 - pkin(7) * t889) * t748, t1031, -t1109, t1080, t1049, t1113, t1051, pkin(6) * t620 + t558 * t889 + t582 * t893, pkin(6) * t626 + t559 * t889 + t588 * t893, t539 * t889 + t546 * t893 + t1111, pkin(6) * t553 + t523 * t889 + t545 * t893, t1031, t1080, t1109, t1051, -t1113, t1049, pkin(6) * t627 + t505 * t889 + t543 * t893, t501 * t889 + t511 * t893 + t1111, pkin(6) * t619 + t504 * t889 + t541 * t893, pkin(6) * t503 + t471 * t889 + t483 * t893, t520, t489, t530, t519, t531, t571, t455 * t889 + t467 * t893 + t506, t457 * t889 + t470 * t893 + t516, t441 * t889 + t449 * t893 + t484, pkin(6) * t448 + t433 * t889 + t437 * t893, t520, t489, t530, t519, t531, t571, t445 * t889 + t456 * t893 + t506, t450 * t889 + t460 * t893 + t516, t436 * t889 + t440 * t893 + t484, pkin(6) * t439 + t431 * t889 + t432 * t893; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t861, t862, 0, 0, t919 * t888, t849 * t892 + t852 * t888, t865 * t892 + t971, -t918 * t892, t867 * t888 + t972, 0, pkin(1) * t852 + pkin(7) * t811 + t978, -pkin(1) * t849 + pkin(7) * t813 - t979, pkin(1) * t856 + pkin(7) * t853 + t749, pkin(1) * t833 + pkin(7) * t749, t926, -t1083, t1063, t1029, t1093, t1030, pkin(7) * t660 + t631 * t892 + t668 * t888 - t1078, pkin(7) * t666 + t634 * t892 + t677 * t888 - t1107, t1102 + t577 * t888 + (-pkin(1) - t1020) * t1065, pkin(7) * t604 + (-pkin(1) + t929) * t622, t926, t1063, t1083, t1030, -t1093, t1029, pkin(7) * t667 + t574 * t888 + t587 * t892 - t1078, -pkin(1) * t1065 + t542 * t888 + t614 * t892 + t1102, pkin(7) * t659 + t573 * t888 + t578 * t892 + t1107, -pkin(1) * t575 + pkin(7) * t548 + t524 * t892 + t525 * t888, t568, t528, t563, t567, t564, t629, t474 * t888 + t487 * t892 + t964, t480 * t888 + t493 * t892 + t963, t452 * t888 + t479 * t892 + t965, -pkin(1) * t468 + pkin(7) * t465 + t443 * t892 + t444 * t888, t568, t528, t563, t567, t564, t629, t461 * t888 + t473 * t892 + t964, t462 * t888 + t481 * t892 + t963, t442 * t888 + t472 * t892 + t965, -pkin(1) * t458 + pkin(7) * t454 + t434 * t888 + t435 * t892;];
tauB_reg  = t1;
