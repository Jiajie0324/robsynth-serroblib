% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP8_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:19:47
% EndTime: 2019-03-09 17:20:07
% DurationCPUTime: 11.21s
% Computational Cost: add. (10628->767), mult. (22975->889), div. (0->0), fcn. (15667->8), ass. (0->346)
t329 = cos(qJ(3));
t516 = pkin(8) - pkin(9);
t259 = t516 * t329;
t327 = sin(qJ(2));
t326 = sin(qJ(3));
t511 = pkin(7) * t326;
t433 = -pkin(3) - t511;
t330 = cos(qJ(2));
t469 = t329 * t330;
t346 = -pkin(9) * t469 + (-pkin(4) + t433) * t327;
t399 = pkin(2) * t327 - pkin(8) * t330;
t240 = t399 * qJD(1);
t470 = t329 * t240;
t555 = -qJD(1) * t346 + qJD(3) * t259 + t470;
t209 = t326 * t240;
t452 = qJD(1) * t327;
t294 = qJ(4) * t452;
t447 = qJD(3) * t326;
t474 = t327 * t329;
t476 = t326 * t330;
t554 = t209 + t294 + (-pkin(7) * t474 + pkin(9) * t476) * qJD(1) + t516 * t447;
t431 = t326 * t452;
t442 = t329 * qJD(2);
t229 = t431 - t442;
t429 = t329 * t452;
t450 = qJD(2) * t326;
t231 = t429 + t450;
t325 = sin(qJ(5));
t515 = cos(qJ(5));
t364 = -t229 * t515 + t325 * t231;
t140 = t364 ^ 2;
t145 = t325 * t229 + t231 * t515;
t519 = t145 ^ 2;
t37 = t140 - t519;
t432 = t515 * t326;
t191 = t325 * t474 - t327 * t432;
t328 = sin(qJ(1));
t331 = cos(qJ(1));
t467 = t331 * t326;
t206 = -t328 * t329 + t330 * t467;
t468 = t330 * t331;
t207 = t326 * t328 + t329 * t468;
t133 = t206 * t515 - t207 * t325;
t471 = t328 * t330;
t204 = t326 * t471 + t329 * t331;
t205 = t328 * t469 - t467;
t531 = t204 * t515 - t205 * t325;
t528 = -g(1) * t133 - g(2) * t531;
t446 = qJD(3) * t327;
t542 = qJD(1) * t446 - qJDD(2);
t440 = qJD(1) * qJD(2);
t418 = t330 * t440;
t439 = t327 * qJDD(1);
t544 = -t418 - t439;
t135 = -qJD(3) * t442 + t326 * t542 + t329 * t544;
t307 = t330 * qJDD(1);
t530 = -t327 * t440 + t307;
t226 = qJDD(3) - t530;
t243 = t399 * qJD(2);
t311 = t327 * pkin(8);
t316 = t330 * pkin(2);
t434 = -pkin(1) - t316;
t378 = t434 - t311;
t159 = qJD(1) * t243 + qJDD(1) * t378;
t201 = pkin(7) * t530 + qJDD(2) * pkin(8);
t215 = t378 * qJD(1);
t451 = qJD(1) * t330;
t304 = pkin(7) * t451;
t257 = qJD(2) * pkin(8) + t304;
t445 = qJD(3) * t329;
t408 = -t329 * t159 + t326 * t201 + t215 * t447 + t257 * t445;
t379 = qJDD(4) + t408;
t517 = pkin(3) + pkin(4);
t28 = t135 * pkin(9) - t226 * t517 + t379;
t136 = t326 * (qJD(2) * (qJD(3) + t451) + t439) + t542 * t329;
t213 = t226 * qJ(4);
t277 = -qJD(3) + t451;
t260 = t277 * qJD(4);
t63 = t326 * t159 + t329 * t201 + t215 * t445 - t257 * t447;
t47 = t213 - t260 + t63;
t31 = pkin(9) * t136 + t47;
t421 = qJD(5) * t515;
t444 = qJD(5) * t325;
t151 = t329 * t215 - t326 * t257;
t104 = t231 * pkin(9) + t151;
t78 = t277 * t517 + qJD(4) - t104;
t152 = t215 * t326 + t257 * t329;
t105 = pkin(9) * t229 + t152;
t262 = t277 * qJ(4);
t89 = t105 - t262;
t6 = t515 * t28 - t325 * t31 - t89 * t421 - t78 * t444;
t342 = g(3) * t191 + t528 + t6;
t481 = t231 * t277;
t483 = t229 * t277;
t553 = t326 * (t136 - t481) + t329 * (t135 - t483);
t256 = -qJD(2) * pkin(2) + pkin(7) * t452;
t123 = t229 * pkin(3) - t231 * qJ(4) + t256;
t93 = -pkin(4) * t229 - t123;
t552 = t145 * t93;
t415 = -pkin(5) * t364 - qJD(6);
t62 = -t415 + t93;
t551 = t62 * t145;
t45 = qJD(5) * t145 - t325 * t135 - t515 * t136;
t266 = qJD(5) + t277;
t480 = t266 * t145;
t27 = -t45 + t480;
t550 = qJ(6) * t145;
t549 = t145 * t364;
t394 = g(1) * t331 + g(2) * t328;
t533 = t327 * t394;
t546 = t136 + t481;
t363 = -t325 * t326 - t329 * t515;
t420 = t515 * qJD(3);
t154 = -t363 * qJD(5) - t325 * t447 - t329 * t420;
t194 = t363 * t330;
t466 = -qJD(1) * t194 + t154;
t155 = t325 * t445 - t329 * t444 + (-t420 + t421) * t326;
t405 = t330 * t432;
t428 = t329 * t451;
t465 = qJD(1) * t405 - t325 * t428 + t155;
t473 = t327 * t331;
t475 = t327 * t328;
t545 = g(1) * t473 + g(2) * t475;
t543 = -t326 * qJD(4) - t304 + (t428 - t445) * qJ(4);
t448 = qJD(2) * t330;
t491 = t136 * t329;
t492 = t135 * t326;
t541 = t327 * ((t229 * t326 - t231 * t329) * qJD(3) - t491 + t492) - (t229 * t329 + t231 * t326) * t448;
t540 = 0.2e1 * pkin(1);
t503 = g(3) * t330;
t39 = -t325 * t89 + t515 * t78;
t20 = t39 - t550;
t19 = pkin(5) * t266 + t20;
t539 = t19 - t20;
t258 = t516 * t326;
t499 = t258 * t421 - t259 * t444 + t555 * t325 - t554 * t515;
t167 = t325 * t258 + t515 * t259;
t498 = -qJD(5) * t167 + t554 * t325 + t555 * t515;
t538 = t364 * t93;
t537 = -t45 * qJ(6) - t364 * qJD(6);
t44 = t515 * t135 - t325 * t136 - t229 * t421 + t231 * t444;
t489 = t364 * t266;
t25 = -t44 + t489;
t536 = qJ(6) * t364;
t534 = t327 * t363;
t456 = t316 + t311;
t247 = -pkin(1) - t456;
t279 = pkin(7) * t476;
t315 = t330 * pkin(3);
t137 = t330 * pkin(4) + t279 + t315 + (-pkin(9) * t327 - t247) * t329;
t281 = pkin(7) * t469;
t179 = t326 * t247 + t281;
t168 = -qJ(4) * t330 + t179;
t477 = t326 * t327;
t149 = pkin(9) * t477 + t168;
t72 = t325 * t137 + t515 * t149;
t430 = t326 * t451;
t437 = t517 * t326;
t464 = -qJD(3) * t437 + t430 * t517 - t543;
t244 = -t325 * qJ(4) - t515 * t517;
t496 = qJ(6) * t44;
t529 = -qJD(6) * t145 + t496;
t441 = qJD(4) - t151;
t310 = t326 * qJ(4);
t527 = t329 * pkin(3) + pkin(2) + t310;
t526 = -t503 + t545;
t510 = pkin(8) * t226;
t525 = t123 * t277 + t510;
t361 = t329 * t226 + t277 * t447;
t524 = qJD(1) * (-t229 * t327 + t277 * t476) - t361;
t521 = t364 * t62 - t537;
t362 = t326 * t226 - t277 * t445;
t520 = t327 * (-qJD(2) * t229 - t362) + t330 * (t277 * t450 + t136);
t365 = t206 * t325 + t207 * t515;
t485 = t204 * t325;
t366 = -t205 * t515 - t485;
t5 = t325 * t28 + t515 * t31 + t78 * t421 - t89 * t444;
t341 = g(1) * t365 - g(2) * t366 - g(3) * t534 - t5;
t518 = t231 ^ 2;
t514 = pkin(3) * t226;
t214 = -qJDD(5) + t226;
t513 = pkin(5) * t214;
t512 = pkin(5) * t325;
t509 = pkin(8) * t231;
t507 = g(1) * t328;
t319 = g(3) * t327;
t300 = pkin(5) * t515 + pkin(4);
t502 = -pkin(3) - t300;
t501 = -qJ(6) * t465 + qJD(6) * t363 + t499;
t478 = t325 * t329;
t234 = t432 - t478;
t500 = pkin(5) * t452 + qJ(6) * t466 - t234 * qJD(6) + t498;
t497 = pkin(5) * t465 + t464;
t56 = t515 * t104 + t325 * t105;
t495 = t266 * t39;
t494 = pkin(7) * qJDD(1);
t113 = t152 - t262;
t493 = t113 * t277;
t486 = t152 * t277;
t482 = t231 * t229;
t334 = qJD(1) ^ 2;
t472 = t327 * t334;
t463 = (-t430 + t447) * pkin(3) + t543;
t462 = t326 * t243 + t247 * t445;
t158 = t231 * pkin(3) + t229 * qJ(4);
t461 = t545 * t329;
t427 = t330 * t442;
t459 = qJ(4) * t427 + qJD(4) * t474;
t458 = g(1) * t475 - g(2) * t473;
t455 = t331 * pkin(1) + t328 * pkin(7);
t320 = t327 ^ 2;
t321 = t330 ^ 2;
t454 = t320 - t321;
t453 = t320 + t321;
t449 = qJD(2) * t327;
t187 = t515 * qJD(4) + qJD(5) * t244;
t245 = qJ(4) * t515 - t325 * t517;
t188 = -t325 * qJD(4) - qJD(5) * t245;
t438 = -t188 * t145 - t187 * t364 - t245 * t45;
t436 = t330 * t472;
t301 = pkin(7) * t439;
t202 = -qJDD(2) * pkin(2) + pkin(7) * t418 + t301;
t435 = g(1) * t468 + g(2) * t471 + t319;
t426 = t326 * t446;
t424 = t277 * t452;
t422 = t229 ^ 2 - t518;
t416 = qJ(4) + t512;
t55 = -t104 * t325 + t515 * t105;
t197 = t204 * pkin(3);
t414 = qJ(4) * t205 - t197;
t199 = t206 * pkin(3);
t413 = qJ(4) * t207 - t199;
t71 = t515 * t137 - t149 * t325;
t166 = t515 * t258 - t259 * t325;
t178 = t247 * t329 - t279;
t221 = t329 * pkin(4) + t527;
t409 = -pkin(8) * t491 - t435;
t407 = pkin(3) * t469 + qJ(4) * t476 + t456;
t406 = pkin(2) * t468 + pkin(8) * t473 + t455;
t402 = t327 * t418;
t401 = -pkin(7) - t437;
t107 = -pkin(4) * t231 - t158;
t400 = t433 * t327;
t398 = g(1) * t531 - g(2) * t133;
t397 = -g(1) * t366 - g(2) * t365;
t396 = -g(1) * t204 + g(2) * t206;
t395 = g(1) * t205 - g(2) * t207;
t393 = -g(2) * t331 + t507;
t317 = t331 * pkin(7);
t392 = -t205 * pkin(3) - t204 * qJ(4) + t317;
t391 = qJD(3) * t281 - t329 * t243 + t247 * t447;
t389 = pkin(7) * t229 + t256 * t326;
t388 = pkin(7) * t231 + t256 * t329;
t387 = (qJD(3) * t229 - t135) * pkin(8);
t386 = t207 * pkin(3) + t406;
t385 = qJD(3) * t256 - t510;
t110 = pkin(3) * t277 + t441;
t384 = t110 * t329 - t113 * t326;
t382 = -t151 * t329 - t152 * t326;
t333 = qJD(2) ^ 2;
t375 = qJDD(2) * t330 - t327 * t333;
t171 = -pkin(7) * t429 + t209;
t373 = -g(1) * t206 - g(2) * t204 - g(3) * t477;
t372 = pkin(8) * qJD(3) * t277 - t503;
t40 = t325 * t78 + t515 * t89;
t48 = t136 * pkin(3) + t135 * qJ(4) - t231 * qJD(4) + t202;
t368 = -t329 * t517 - t310;
t73 = pkin(9) * t426 + qJD(2) * t346 + t391;
t296 = qJ(4) * t449;
t74 = t296 + (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t474 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t326) * t330 + t462;
t15 = t137 * t421 - t149 * t444 + t325 * t73 + t515 * t74;
t360 = t372 - t48;
t359 = -t202 + t372;
t357 = (-t503 + t533) * t234;
t356 = g(3) * t194 - t394 * t534;
t274 = qJ(4) * t474;
t165 = t327 * t401 + t274;
t355 = t326 * t448 + t327 * t445;
t354 = t378 * t507;
t353 = t277 * t515 + t421;
t352 = qJ(4) * t206 + t386;
t32 = -pkin(4) * t136 - t48;
t345 = -t326 * t483 - t491;
t344 = -t373 - t408;
t100 = (-t327 * t442 - t330 * t447) * pkin(7) + t462;
t340 = t188 * t266 - t342;
t10 = pkin(5) * t45 + qJDD(6) + t32;
t16 = -qJD(5) * t72 - t325 * t74 + t515 * t73;
t339 = -t187 * t266 + t245 * t214 - t341;
t338 = t136 * t477 + t229 * t355;
t337 = t123 * t231 + qJDD(4) - t344;
t336 = g(1) * t207 + g(2) * t205 + g(3) * t474 - t151 * t277 - t63;
t79 = t368 * t446 + t401 * t448 + t459;
t324 = -qJ(6) - pkin(9);
t284 = pkin(8) * t468;
t280 = pkin(8) * t471;
t239 = -pkin(5) + t244;
t228 = t266 * t452;
t186 = -t274 + (pkin(3) * t326 + pkin(7)) * t327;
t170 = pkin(7) * t431 + t470;
t169 = -t178 + t315;
t161 = -pkin(5) * t363 + t221;
t160 = -t226 * t330 - t277 * t449;
t157 = qJD(1) * t400 - t470;
t156 = t171 + t294;
t150 = -t214 * t330 - t266 * t449;
t115 = qJ(6) * t363 + t167;
t114 = -qJ(6) * t234 + t166;
t106 = t191 * pkin(5) + t165;
t101 = t449 * t511 - t391;
t99 = pkin(3) * t355 + pkin(7) * t448 + qJ(4) * t426 - t459;
t92 = qJD(2) * t400 + t391;
t88 = -t135 - t483;
t87 = -t330 * qJD(4) + t100 + t296;
t82 = (-t231 * t327 + t277 * t469) * qJD(1) + t362;
t81 = -qJD(2) * t194 + t155 * t327;
t80 = -qJD(2) * t405 + t154 * t327 + t325 * t427;
t67 = -t329 * t481 - t492;
t66 = -pkin(5) * t145 + t107;
t65 = -t135 * t474 + (-t426 + t427) * t231;
t59 = -qJ(6) * t191 + t72;
t58 = -t231 * t145 + t325 * t214 - t266 * t353;
t57 = -t266 ^ 2 * t325 - t214 * t515 - t231 * t364;
t54 = pkin(5) * t330 + qJ(6) * t534 + t71;
t52 = t379 - t514;
t49 = (-t277 * t442 + t135) * t330 + (qJD(2) * t231 + t361) * t327;
t41 = t80 * pkin(5) + t79;
t36 = t56 + t550;
t35 = t55 - t536;
t34 = t145 * t452 - t214 * t234 - t266 * t466;
t33 = -t214 * t363 - t266 * t465 - t364 * t452;
t21 = t40 - t536;
t18 = t191 * t45 + t364 * t80;
t17 = t145 * t81 + t44 * t534;
t14 = -t363 * t45 + t364 * t465;
t13 = -t145 * t466 - t44 * t234;
t12 = -t145 * t449 + t214 * t534 + t266 * t81 - t330 * t44;
t11 = t191 * t214 - t266 * t80 - t330 * t45 + t364 * t449;
t9 = -qJ(6) * t80 - qJD(6) * t191 + t15;
t8 = -pkin(5) * t449 - t81 * qJ(6) + qJD(6) * t534 + t16;
t7 = t27 * t325 - t353 * t364 + t515 * t44;
t4 = -t145 * t80 + t191 * t44 - t364 * t81 + t45 * t534;
t3 = -t145 * t465 - t234 * t45 - t363 * t44 + t364 * t466;
t2 = t5 + t537;
t1 = t6 - t513 + t529;
t22 = [0, 0, 0, 0, 0, qJDD(1), t393, t394, 0, 0, qJDD(1) * t320 + 0.2e1 * t402, 0.2e1 * t307 * t327 - 0.2e1 * t440 * t454, qJDD(2) * t327 + t330 * t333, qJDD(1) * t321 - 0.2e1 * t402, t375, 0 (-0.2e1 * pkin(1) * t440 - pkin(7) * qJDD(2)) * t327 + (-pkin(7) * t333 + qJDD(1) * t540 + t393) * t330, -t375 * pkin(7) + t540 * t544 - t458, 0.2e1 * t453 * t494 - t394, -g(1) * (-t328 * pkin(1) + t317) - g(2) * t455 + (pkin(7) ^ 2 * t453 + pkin(1) ^ 2) * qJDD(1), t65, t541, t49, t338, t520, t160, -t101 * t277 + t178 * t226 + (qJD(2) * t389 + t408) * t330 + (pkin(7) * t136 + qJD(2) * t151 + t202 * t326 + t256 * t445) * t327 + t395, t100 * t277 - t179 * t226 + (qJD(2) * t388 + t63) * t330 + (-pkin(7) * t135 - qJD(2) * t152 + t202 * t329 - t256 * t447) * t327 + t396, -t100 * t229 - t101 * t231 + t135 * t178 - t136 * t179 + t382 * t448 + (-t326 * t63 + t329 * t408 + (t151 * t326 - t152 * t329) * qJD(3)) * t327 + t458, t63 * t179 + t152 * t100 - t408 * t178 + t151 * t101 - g(1) * t317 - g(2) * t406 - t354 + (t202 * t327 + t256 * t448) * pkin(7), t65, t49, -t541, t160, -t520, t338, t186 * t136 - t169 * t226 + t99 * t229 + t92 * t277 + (t123 * t450 + t52) * t330 + (-qJD(2) * t110 + t123 * t445 + t326 * t48) * t327 + t395, -t135 * t169 - t136 * t168 - t229 * t87 + t231 * t92 + t384 * t448 + (-t326 * t47 + t329 * t52 + (-t110 * t326 - t113 * t329) * qJD(3)) * t327 + t458, t186 * t135 + t168 * t226 - t99 * t231 - t87 * t277 + (-t123 * t442 - t47) * t330 + (qJD(2) * t113 + t123 * t447 - t329 * t48) * t327 - t396, -g(1) * t392 - g(2) * t352 + t110 * t92 + t113 * t87 + t123 * t99 + t47 * t168 + t52 * t169 + t48 * t186 - t354, t17, t4, t12, t18, t11, t150, t16 * t266 + t165 * t45 + t191 * t32 - t214 * t71 + t330 * t6 + t364 * t79 - t39 * t449 + t80 * t93 + t397, t145 * t79 - t15 * t266 - t165 * t44 + t214 * t72 - t32 * t534 - t330 * t5 + t40 * t449 + t81 * t93 + t398, -t145 * t16 - t15 * t364 - t191 * t5 - t39 * t81 - t40 * t80 + t44 * t71 - t45 * t72 + t534 * t6 - t458, t5 * t72 + t40 * t15 + t6 * t71 + t39 * t16 + t32 * t165 + t93 * t79 - g(1) * (-t205 * pkin(4) + t392) - g(2) * (pkin(4) * t207 - pkin(9) * t473 + t352) - (-t327 * t516 + t434) * t507, t17, t4, t12, t18, t11, t150, t1 * t330 + t10 * t191 + t106 * t45 - t19 * t449 - t214 * t54 + t266 * t8 + t364 * t41 + t62 * t80 + t397, -t10 * t534 - t106 * t44 + t145 * t41 - t2 * t330 + t21 * t449 + t214 * t59 - t266 * t9 + t62 * t81 + t398, t1 * t534 - t145 * t8 - t19 * t81 - t191 * t2 - t21 * t80 - t364 * t9 + t44 * t54 - t45 * t59 - t458, t2 * t59 + t21 * t9 + t1 * t54 + t19 * t8 + t10 * t106 + t62 * t41 - g(1) * (-pkin(5) * t485 - t205 * t300 + t392) - g(2) * (t206 * t416 + t207 * t300 + t324 * t473 + t386) - ((-pkin(8) - t324) * t327 + t434) * t507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t436, t454 * t334, t439, t436, t307, qJDD(2), pkin(1) * t472 - t301 + t526 (pkin(1) * t334 - t494) * t330 + t435, 0, 0, t67, -t553, t82, t345, -t524, t424, -pkin(2) * t136 + t170 * t277 + t385 * t326 + t359 * t329 + (-t151 * t327 - t330 * t389) * qJD(1) + t461, pkin(2) * t135 - t171 * t277 + t385 * t329 + (t152 * t327 - t330 * t388) * qJD(1) + (-t359 - t533) * t326, t170 * t231 + t171 * t229 + (t151 * t451 + t63 + (-t151 + t509) * qJD(3)) * t329 + (t387 + t408 + t486) * t326 + t409, -t202 * pkin(2) - t152 * t171 - t151 * t170 - t256 * t304 - g(1) * (-pkin(2) * t473 + t284) - g(2) * (-pkin(2) * t475 + t280) - g(3) * t456 + (qJD(3) * t382 + t326 * t408 + t63 * t329) * pkin(8), t67, t82, t553, t424, t524, t345, t110 * t452 - t136 * t527 - t157 * t277 + t463 * t229 - t326 * t525 + t360 * t329 + t461, t156 * t229 - t157 * t231 + (-t110 * t451 + t47 + (t110 + t509) * qJD(3)) * t329 + (t387 + t52 + t493) * t326 + t409, -t113 * t452 - t135 * t527 + t156 * t277 - t463 * t231 + t525 * t329 + (t360 + t533) * t326, -t113 * t156 - t110 * t157 - g(1) * t284 - g(2) * t280 - g(3) * t407 + t463 * t123 + (qJD(3) * t384 + t52 * t326 + t47 * t329) * pkin(8) + (-t48 + t533) * t527, t13, t3, t34, t14, t33, t228, -t166 * t214 + t221 * t45 + t266 * t498 - t32 * t363 + t364 * t464 + t39 * t452 + t465 * t93 + t356, t145 * t464 + t167 * t214 - t221 * t44 + t234 * t32 - t266 * t499 - t40 * t452 - t466 * t93 + t357, -t145 * t498 + t166 * t44 - t167 * t45 - t234 * t6 + t363 * t5 - t364 * t499 + t39 * t466 - t40 * t465 + t435, t5 * t167 + t6 * t166 + t32 * t221 - g(1) * (-pkin(9) * t468 + t284) - g(2) * (-pkin(9) * t471 + t280) - g(3) * (pkin(4) * t469 + t407) + t464 * t93 + t499 * t40 + t498 * t39 + (g(3) * pkin(9) + t394 * (pkin(2) - t368)) * t327, t13, t3, t34, t14, t33, t228, -t10 * t363 - t114 * t214 + t161 * t45 + t19 * t452 + t266 * t500 + t364 * t497 + t465 * t62 + t356, t10 * t234 + t115 * t214 + t145 * t497 - t161 * t44 - t21 * t452 - t266 * t501 - t466 * t62 + t357, -t1 * t234 + t114 * t44 - t115 * t45 - t145 * t500 + t19 * t466 + t2 * t363 - t21 * t465 - t364 * t501 + t435, t2 * t115 + t1 * t114 + t10 * t161 - g(1) * (t324 * t468 + t284) - g(2) * (t324 * t471 + t280) - g(3) * (t300 * t469 + t476 * t512 + t407) + t497 * t62 + t501 * t21 + t500 * t19 + (-g(3) * t324 + t394 * (t326 * t416 - t329 * t502 + pkin(2))) * t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t482, -t422, t88, -t482, -t546, t226, -t231 * t256 + t344 - t486, t229 * t256 + t336, 0, 0, t482, t88, t422, t226, t546, -t482, -t158 * t229 - t337 - t486 + 0.2e1 * t514, pkin(3) * t135 - t136 * qJ(4) + (t113 - t152) * t231 + (t110 - t441) * t229, -t123 * t229 + t158 * t231 + 0.2e1 * t213 - 0.2e1 * t260 - t336, t47 * qJ(4) - t52 * pkin(3) - t123 * t158 - t110 * t152 - g(1) * t413 - g(2) * t414 - g(3) * (-pkin(3) * t477 + t274) + t441 * t113, -t549, t37, -t25, t549, -t27, t214, -t107 * t364 - t214 * t244 - t266 * t55 + t340 + t552, -t107 * t145 + t266 * t56 + t339 - t538, t244 * t44 + t438 + (t39 + t56) * t364 + (-t40 + t55) * t145, t5 * t245 + t6 * t244 - t93 * t107 - g(1) * (-pkin(4) * t206 + t413) - g(2) * (-pkin(4) * t204 + t414) - g(3) * (-t327 * t437 + t274) + (t187 - t56) * t40 + (t188 - t55) * t39, -t549, t37, -t25, t549, -t27, t214, t551 - t364 * t66 - t266 * t35 + (pkin(5) - t239) * t214 + t340 - t529, -t145 * t66 + t266 * t36 + t339 - t521, t239 * t44 + t438 + (t19 + t36) * t364 + (-t21 + t35) * t145, t2 * t245 + t1 * t239 - t62 * t66 - g(1) * (-t206 * t300 + t207 * t416 - t199) - g(2) * (-t204 * t300 + t205 * t416 - t197) - g(3) * t274 - (pkin(5) * t478 + t326 * t502) * t319 + (t187 - t36) * t21 + (t188 - t35) * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t226 + t482, t88, -t277 ^ 2 - t518, t337 + t493 - t514, 0, 0, 0, 0, 0, 0, t57, t58, t7, t6 * t515 - t93 * t231 + t353 * t40 + (t5 - t495) * t325 + t373, 0, 0, 0, 0, 0, 0, t57, t58, t7, t1 * t515 - t62 * t231 + t353 * t21 + (-t19 * t266 + t2) * t325 + t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t549, -t37, t25, -t549, t27, -t214, t266 * t40 + t342 - t552, t341 + t495 + t538, 0, 0, t549, -t37, t25, -t549, t27, -t214, -0.2e1 * t513 + t496 + t21 * t266 + (t415 - t62) * t145 + t342, -pkin(5) * t519 + t20 * t266 + t341 + t521, pkin(5) * t44 - t364 * t539, t539 * t21 + (-t234 * t319 + t1 + t528 - t551) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 + t480, -t44 - t489, -t140 - t519, t145 * t19 + t21 * t364 + t10 + t526;];
tau_reg  = t22;
