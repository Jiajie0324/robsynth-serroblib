% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für Segment Nr. 6 (0=Basis) von
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
%
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
%
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
%
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox (ehem. IRT-Maple-Toolbox)
% Datum: 2018-11-23 11:27
% Revision: 76f9d5e39f14dc242b53c0d9d3d9db48bd8f37c0
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRRRR10_jacobiaD_rot_6_floatb_twist_sym_varpar(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_rot_6_floatb_twist_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_rot_6_floatb_twist_sym_varpar: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiaD_rot_6_floatb_twist_sym_varpar: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From jacobiaD_rot_6_floatb_twist_matlab.m
% OptimizationMode: 2
% StartTime: 2018-11-23 11:27:22
% EndTime: 2018-11-23 11:27:40
% DurationCPUTime: 18.42s
% Computational Cost: add. (279013->441), mult. (294101->728), div. (1240->12), fcn. (277561->33), ass. (0->295)
t887 = sin(qJ(4));
t1015 = qJD(4) * t887;
t1037 = sin(pkin(7));
t1045 = cos(qJ(1));
t1042 = sin(qJ(2));
t1043 = sin(qJ(1));
t883 = t1043 * t1042;
t1010 = pkin(6) + qJ(2);
t973 = cos(t1010) / 0.2e1;
t1011 = pkin(6) - qJ(2);
t991 = cos(t1011);
t940 = t991 / 0.2e1 + t973;
t928 = -t1045 * t940 + t883;
t1038 = sin(pkin(6));
t1040 = cos(pkin(7));
t959 = t1040 * t1038;
t947 = t1045 * t959;
t1046 = -t928 * t1037 + t947;
t1041 = sin(qJ(3));
t987 = sin(t1010);
t967 = t987 / 0.2e1;
t988 = sin(t1011);
t968 = -t988 / 0.2e1;
t938 = t967 + t968;
t1044 = cos(qJ(2));
t977 = t1043 * t1044;
t921 = t1045 * t938 + t977;
t1051 = t921 * t1041;
t1008 = pkin(7) + qJ(3);
t985 = sin(t1008);
t965 = t985 / 0.2e1;
t1009 = pkin(7) - qJ(3);
t986 = sin(t1009);
t966 = t986 / 0.2e1;
t937 = t965 + t966;
t931 = t937 * t1038;
t927 = t1045 * t931;
t971 = cos(t1008) / 0.2e1;
t990 = cos(t1009);
t939 = t990 / 0.2e1 + t971;
t1057 = t928 * t939 + t1051 + t927;
t891 = cos(qJ(3));
t1052 = t921 * t891;
t978 = t1045 * t1042;
t922 = t1043 * t940 + t978;
t877 = -t987 / 0.2e1;
t878 = t988 / 0.2e1;
t1017 = t878 + t877;
t945 = t1017 * qJD(2);
t832 = t922 * qJD(1) + qJD(2) * t977 - t1045 * t945;
t979 = t1045 * t1044;
t923 = -t1043 * t938 + t979;
t853 = t940 * qJD(2);
t961 = qJD(2) * t883 - t1045 * t853;
t833 = qJD(1) * t923 - t961;
t849 = (t966 - t985 / 0.2e1) * qJD(3);
t860 = t971 - t990 / 0.2e1;
t851 = t860 * qJD(3);
t926 = t1043 * t931;
t976 = t1045 * t1038;
t773 = -qJD(1) * t926 + qJD(3) * t1052 + t833 * t1041 + t832 * t939 + t928 * t849 + t851 * t976;
t848 = t937 * qJD(3);
t850 = t939 * qJD(3);
t856 = t965 - t986 / 0.2e1;
t975 = t1043 * t1038;
t955 = t860 * t975;
t774 = qJD(1) * t955 + qJD(3) * t1051 + t832 * t856 - t833 * t891 + t848 * t976 + t928 * t850;
t956 = t860 * t976;
t813 = -t928 * t856 + t1052 + t956;
t1006 = pkin(8) + qJ(4);
t983 = sin(t1006);
t963 = -t983 / 0.2e1;
t1007 = pkin(8) - qJ(4);
t984 = sin(t1007);
t964 = -t984 / 0.2e1;
t844 = (t963 + t964) * qJD(4);
t969 = cos(t1006) / 0.2e1;
t989 = cos(t1007);
t859 = t989 / 0.2e1 + t969;
t846 = t859 * qJD(4);
t962 = t983 / 0.2e1;
t855 = t962 + t964;
t858 = t969 - t989 / 0.2e1;
t890 = cos(qJ(4));
t946 = t1043 * t959;
t929 = qJD(1) * t946 + t832 * t1037;
t714 = t813 * t1015 - t1046 * t844 + t1057 * t846 + t773 * t855 + t774 * t890 + t929 * t858;
t777 = t1046 * t858 - t1057 * t855 + t813 * t890;
t886 = sin(qJ(5));
t889 = cos(qJ(5));
t1036 = sin(pkin(8));
t1039 = cos(pkin(8));
t903 = t1036 * t1057 - t1039 * t1046;
t747 = t777 * t889 + t903 * t886;
t902 = t773 * t1036 + t929 * t1039;
t696 = t747 * qJD(5) - t714 * t886 - t902 * t889;
t745 = t777 * t886 - t903 * t889;
t698 = t745 * qJD(5) + t714 * t889 - t902 * t886;
t875 = t984 / 0.2e1;
t954 = t962 + t875;
t1067 = -t1046 * t954 - t1057 * t859 - t813 * t887;
t1014 = qJD(4) * t890;
t845 = (t875 + t963) * qJD(4);
t847 = t858 * qJD(4);
t1066 = -t813 * t1014 - t1046 * t847 - t1057 * t845 - t773 * t859 + t774 * t887 + t929 * t954;
t1016 = qJD(3) * t891;
t852 = (t877 + t968) * qJD(2);
t861 = t973 - t991 / 0.2e1;
t854 = t861 * qJD(2);
t857 = t967 + t878;
t884 = cos(pkin(6));
t802 = t861 * t1016 + t852 * t1041 + t857 * t849 + t884 * t851 + t854 * t939;
t998 = qJD(3) * t1041;
t804 = -t884 * t848 - t857 * t850 + t852 * t891 - t854 * t856 - t861 * t998;
t825 = t861 * t1041 + t857 * t939 + t884 * t937;
t826 = t857 * t856 - t884 * t860 - t861 * t891;
t839 = -t857 * t1037 + t884 * t1040;
t996 = t858 * t1037;
t740 = -t826 * t1015 + t802 * t855 - t804 * t890 + t825 * t846 - t839 * t844 + t854 * t996;
t795 = t825 * t855 + t826 * t890 - t839 * t858;
t810 = -t825 * t1036 + t839 * t1039;
t765 = t795 * t889 + t810 * t886;
t958 = t1039 * t1037;
t796 = -t802 * t1036 - t854 * t958;
t706 = t765 * qJD(5) + t740 * t886 - t796 * t889;
t764 = t795 * t886 - t810 * t889;
t762 = 0.1e1 / t764 ^ 2;
t1054 = t706 * t762;
t1022 = t745 * t762;
t761 = 0.1e1 / t764;
t794 = t825 * t859 - t826 * t887 + t839 * t954;
t948 = t794 * t1022 - t1067 * t761;
t1053 = t886 * t948;
t726 = atan2(-t745, t764);
t721 = sin(t726);
t722 = cos(t726);
t693 = -t721 * t745 + t722 * t764;
t690 = 0.1e1 / t693;
t915 = t923 * t1041;
t907 = t922 * t939 + t915 - t926;
t910 = -t922 * t1037 - t946;
t899 = t907 * t1036 - t910 * t1039;
t919 = t923 * t891;
t817 = -t922 * t856 + t919 - t955;
t900 = t817 * t890 - t907 * t855 + t910 * t858;
t751 = t899 * t886 + t889 * t900;
t780 = t817 * t887 + t907 * t859 + t910 * t954;
t885 = sin(qJ(6));
t888 = cos(qJ(6));
t734 = t751 * t888 + t780 * t885;
t728 = 0.1e1 / t734;
t691 = 0.1e1 / t693 ^ 2;
t729 = 0.1e1 / t734 ^ 2;
t750 = t886 * t900 - t899 * t889;
t1028 = t691 * t750;
t743 = t745 ^ 2;
t725 = t743 * t762 + 0.1e1;
t723 = 0.1e1 / t725;
t953 = t706 * t1022 - t696 * t761;
t679 = t953 * t723;
t957 = -t721 * t764 - t722 * t745;
t672 = t957 * t679 - t696 * t721 + t706 * t722;
t692 = t690 * t691;
t1034 = t672 * t692;
t744 = t750 ^ 2;
t689 = t691 * t744 + 0.1e1;
t829 = qJD(1) * t928 - qJD(2) * t979 - t1043 * t945;
t936 = -qJD(2) * t978 - t1043 * t853;
t831 = -t921 * qJD(1) + t936;
t769 = -qJD(1) * t956 - qJD(3) * t915 + t829 * t856 + t831 * t891 + t848 * t975 - t922 * t850;
t904 = -qJD(1) * t927 + qJD(3) * t919 + t831 * t1041 - t829 * t939 + t922 * t849 - t851 * t975;
t930 = -qJD(1) * t947 + t829 * t1037;
t898 = -t817 * t1015 + t769 * t890 + t910 * t844 - t907 * t846 - t904 * t855 + t930 * t858;
t901 = t904 * t1036 - t930 * t1039;
t694 = t751 * qJD(5) + t886 * t898 - t901 * t889;
t1035 = 0.2e1 * (t694 * t1028 - t744 * t1034) / t689 ^ 2;
t733 = t751 * t885 - t780 * t888;
t1024 = t729 * t733;
t1012 = qJD(6) * t733;
t695 = -t750 * qJD(5) + t901 * t886 + t889 * t898;
t708 = t817 * t1014 + t769 * t887 + t907 * t845 + t910 * t847 + t904 * t859 + t930 * t954;
t682 = t695 * t888 + t708 * t885 - t1012;
t1030 = t682 * t728 * t729;
t681 = t734 * qJD(6) + t695 * t885 - t708 * t888;
t727 = t733 ^ 2;
t703 = t727 * t729 + 0.1e1;
t1032 = 0.2e1 * (t681 * t1024 - t727 * t1030) / t703 ^ 2;
t1027 = t761 * t1054;
t1031 = 0.2e1 * (t696 * t1022 - t743 * t1027) / t725 ^ 2;
t1029 = t691 * t694;
t1026 = t721 * t750;
t1025 = t722 * t750;
t1023 = t745 * t761;
t1021 = t780 * t886;
t1020 = t780 * t889;
t1019 = t885 * t728;
t1018 = t888 * t733;
t1013 = qJD(5) * t889;
t1005 = 0.2e1 * t692 * t750;
t1004 = t690 * t1035;
t1003 = t691 * t1035;
t1002 = t761 * t1031;
t1001 = t691 * t1026;
t1000 = t691 * t1025;
t999 = t733 * t1030;
t997 = t844 * t1037;
t995 = t861 * t1037;
t994 = t886 * t1036;
t993 = t889 * t1036;
t992 = t1036 * t769;
t982 = t672 * t1005;
t981 = -0.2e1 * t745 * t1027;
t980 = 0.2e1 * t999;
t960 = qJD(6) * t1020 + t898;
t732 = t1067 * t885 - t747 * t888;
t731 = -t1067 * t888 - t747 * t885;
t841 = -t1043 * t1017 - t979;
t914 = t922 * t1041;
t823 = t841 * t939 + t914;
t918 = t922 * t891;
t824 = t841 * t856 - t918;
t790 = t823 * t855 + t824 * t890 + t841 * t996;
t808 = -t823 * t1036 - t841 * t958;
t757 = t790 * t889 + t808 * t886;
t942 = t954 * t1037;
t789 = -t823 * t859 + t824 * t887 + t841 * t942;
t736 = t757 * t888 + t789 * t885;
t735 = t757 * t885 - t789 * t888;
t793 = -t817 * t855 - t907 * t890;
t760 = t793 * t889 + t817 * t994;
t792 = t817 * t859 - t907 * t887;
t742 = t760 * t888 + t792 * t885;
t741 = t760 * t885 - t792 * t888;
t756 = t790 * t886 - t808 * t889;
t952 = t729 * t1018 - t1019;
t951 = t765 * t1022 - t747 * t761;
t924 = t928 * t1041;
t935 = -t1045 * t1017 + t977;
t821 = -t935 * t939 + t924;
t925 = t928 * t891;
t822 = -t856 * t935 - t925;
t788 = t821 * t855 + t822 * t890 - t935 * t996;
t934 = -t821 * t1036 + t935 * t958;
t755 = t788 * t886 - t934 * t889;
t836 = -t857 * t1041 + t861 * t939;
t837 = t861 * t856 + t857 * t891;
t800 = t836 * t855 + t837 * t890 + t858 * t995;
t820 = -t836 * t1036 - t861 * t958;
t783 = t800 * t886 - t820 * t889;
t950 = t783 * t1022 - t755 * t761;
t791 = -t1057 * t890 - t813 * t855;
t758 = t791 * t886 - t813 * t993;
t797 = t825 * t890 - t826 * t855;
t784 = t797 * t886 - t826 * t993;
t949 = t784 * t1022 - t758 * t761;
t944 = -t793 * t886 + t817 * t993;
t943 = -t721 + (t722 * t1023 + t721) * t723;
t941 = qJD(5) * t1021 + qJD(6) * t900 - t708 * t889;
t906 = qJD(4) * t907;
t834 = t841 * qJD(1) + t961;
t830 = t935 * qJD(1) - t936;
t807 = -t857 * t1016 - t854 * t1041 + t861 * t849 + t852 * t939;
t787 = qJD(3) * t925 + t832 * t1041 + t834 * t939 - t849 * t935;
t786 = qJD(3) * t914 + t829 * t891 + t830 * t856 + t841 * t850;
t785 = qJD(3) * t918 - t829 * t1041 + t830 * t939 + t841 * t849;
t766 = -t785 * t1036 - t830 * t958;
t739 = -t826 * t1014 + t802 * t859 + t804 * t887 + t825 * t845 + t839 * t847 - t854 * t942;
t738 = -t888 * t1020 + t885 * t900;
t737 = -t885 * t1020 - t888 * t900;
t720 = -t824 * t1015 + t785 * t855 + t786 * t890 + t823 * t846 + t830 * t996 + t841 * t997;
t719 = t841 * t1037 * t847 + t824 * t1014 - t785 * t859 + t786 * t887 - t823 * t845 + t830 * t942;
t718 = -t769 * t855 - t817 * t846 + t887 * t906 - t904 * t890;
t717 = t769 * t859 + t817 * t845 - t904 * t887 - t890 * t906;
t716 = ((t861 * t850 + t852 * t856 + t854 * t891 - t857 * t998) * t890 - t837 * t1015 + t807 * t855 + t836 * t846 + t852 * t996 + t844 * t995) * t886 - (-t807 * t1036 - t852 * t958) * t889 + (t800 * t889 + t820 * t886) * qJD(5);
t715 = (-t825 * t1015 + t802 * t890 + t804 * t855 - t826 * t846) * t886 + t804 * t993 + (t797 * t889 + t826 * t994) * qJD(5);
t707 = -t764 * qJD(5) + t740 * t889 + t796 * t886;
t705 = (t1015 * t1057 - t773 * t890 + t774 * t855 - t813 * t846) * t886 + t774 * t993 + (t791 * t889 + t813 * t994) * qJD(5);
t704 = t944 * qJD(5) + t718 * t889 + t886 * t992;
t701 = 0.1e1 / t703;
t700 = ((qJD(3) * t924 - t832 * t891 + t834 * t856 - t850 * t935) * t890 - t822 * t1015 + t787 * t855 + t821 * t846 + t834 * t996 - t935 * t997) * t886 - (-t787 * t1036 - t834 * t958) * t889 + (t788 * t889 + t934 * t886) * qJD(5);
t699 = -t756 * qJD(5) + t720 * t889 + t766 * t886;
t687 = 0.1e1 / t689;
t686 = t723 * t1053;
t685 = t949 * t723;
t684 = t950 * t723;
t683 = t951 * t723;
t678 = t943 * t750;
t676 = (-t1067 * t721 + t722 * t794) * t886 + t957 * t686;
t674 = t957 * t684 - t721 * t755 + t722 * t783;
t673 = t957 * t683 - t721 * t747 + t722 * t765;
t670 = -t949 * t1031 + (t784 * t981 - t705 * t761 + (t696 * t784 + t706 * t758 + t715 * t745) * t762) * t723;
t669 = -t950 * t1031 + (t783 * t981 - t700 * t761 + (t696 * t783 + t706 * t755 + t716 * t745) * t762) * t723;
t668 = -t951 * t1031 + (t765 * t981 + t698 * t761 + (t696 * t765 + t706 * t747 + t707 * t745) * t762) * t723;
t667 = -t1031 * t1053 + (t948 * t1013 + (t794 * t981 - t1066 * t761 + (t1067 * t706 + t696 * t794 + t739 * t745) * t762) * t886) * t723;
t1 = [t750 * t1002 + (t1054 * t750 - t694 * t761) * t723, t669, t670, t667, t668, 0; t745 * t1004 + (-t696 * t690 + (t672 * t745 - t678 * t694) * t691) * t687 + (t678 * t1003 + (0.2e1 * t678 * t1034 - (-t679 * t723 * t1023 - t1031) * t1001 - (-t745 * t1002 - t679 + (t679 - t953) * t723) * t1000 - t943 * t1029) * t687) * t750 (t674 * t1028 - t690 * t756) * t1035 + ((t757 * qJD(5) + t720 * t886 - t766 * t889) * t690 + t674 * t982 + (-t756 * t672 - t674 * t694 - (-t669 * t745 - t684 * t696 + t716 + (-t684 * t764 - t755) * t679) * t1025 - (-t669 * t764 - t684 * t706 - t700 + (t684 * t745 - t783) * t679) * t1026) * t691) * t687, t944 * t1004 + ((t760 * qJD(5) + t718 * t886 - t889 * t992) * t690 + t944 * t691 * t672 - ((-t670 * t745 - t685 * t696 + t715 + (-t685 * t764 - t758) * t679) * t722 + (-t670 * t764 - t685 * t706 - t705 + (t685 * t745 - t784) * t679) * t721) * t1028) * t687 + (t750 * t1003 + (-t1029 + t982) * t687) * (t957 * t685 - t721 * t758 + t722 * t784) (t690 * t1021 + t676 * t1028) * t1035 + (-t676 * t1029 + (-t780 * t1013 - t708 * t886) * t690 + (t676 * t1005 + t691 * t1021) * t672 - (t794 * t1013 - t667 * t745 - t686 * t696 + t739 * t886 + (-t1067 * t886 - t686 * t764) * t679) * t1000 - (-t1067 * t1013 - t667 * t764 - t686 * t706 - t1066 * t886 + (t686 * t745 - t794 * t886) * t679) * t1001) * t687 (t673 * t1028 - t690 * t751) * t1035 + (t673 * t982 + t695 * t690 + (-t751 * t672 - t673 * t694 - (-t668 * t745 - t683 * t696 + t707 + (-t683 * t764 - t747) * t679) * t1025 - (-t668 * t764 - t683 * t706 + t698 + (t683 * t745 - t765) * t679) * t1026) * t691) * t687, 0; (t732 * t1024 - t728 * t731) * t1032 + ((t732 * qJD(6) - t1066 * t888 + t698 * t885) * t728 + t732 * t980 + (-t731 * t682 - (-t731 * qJD(6) + t1066 * t885 + t698 * t888) * t733 - t732 * t681) * t729) * t701 (t736 * t1024 - t728 * t735) * t1032 + ((t736 * qJD(6) + t699 * t885 - t719 * t888) * t728 + t736 * t980 + (-t735 * t682 - (-t735 * qJD(6) + t699 * t888 + t719 * t885) * t733 - t736 * t681) * t729) * t701 (t742 * t1024 - t728 * t741) * t1032 + ((t742 * qJD(6) + t704 * t885 - t717 * t888) * t728 + t742 * t980 + (-t741 * t682 - (-t741 * qJD(6) + t704 * t888 + t717 * t885) * t733 - t742 * t681) * t729) * t701 (t738 * t1024 - t728 * t737) * t1032 + (t738 * t980 - t960 * t728 * t888 + t941 * t1019 + (-t733 * t885 * t960 - t941 * t1018 - t738 * t681 - t737 * t682) * t729) * t701, -t952 * t750 * t1032 + (t952 * t694 + ((-qJD(6) * t728 - 0.2e1 * t999) * t888 + (t681 * t888 + (t682 - t1012) * t885) * t729) * t750) * t701, -t1032 + (0.2e1 * t681 * t729 * t701 + (-0.2e1 * t701 * t1030 - t729 * t1032) * t733) * t733;];
JaD_rot  = t1;
