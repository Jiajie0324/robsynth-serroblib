% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% JRD_rot [9x6]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 13:35
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = S6RRRRRR10_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiRD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiRD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRRRR10_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiRD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.05s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0, 0, 0; -t31, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; t31, 0, 0, 0, 0, 0; -t30, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (27->13), mult. (88->22), div. (0->0), fcn. (88->6), ass. (0->21)
	t158 = sin(qJ(2));
	t159 = sin(qJ(1));
	t171 = t158 * t159;
	t161 = cos(qJ(1));
	t170 = t158 * t161;
	t160 = cos(qJ(2));
	t169 = t159 * t160;
	t168 = t160 * t161;
	t156 = sin(pkin(6));
	t167 = qJD(1) * t156;
	t166 = qJD(2) * t156;
	t157 = cos(pkin(6));
	t165 = -t157 * t168 + t171;
	t164 = t157 * t169 + t170;
	t163 = t157 * t170 + t169;
	t162 = t157 * t171 - t168;
	t155 = t162 * qJD(1) + t165 * qJD(2);
	t154 = t164 * qJD(1) + t163 * qJD(2);
	t153 = t163 * qJD(1) + t164 * qJD(2);
	t152 = t165 * qJD(1) + t162 * qJD(2);
	t1 = [t155, t152, 0, 0, 0, 0; -t153, -t154, 0, 0, 0, 0; 0, -t158 * t166, 0, 0, 0, 0; t154, t153, 0, 0, 0, 0; t152, t155, 0, 0, 0, 0; 0, -t160 * t166, 0, 0, 0, 0; -t159 * t167, 0, 0, 0, 0, 0; t161 * t167, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:55
	% EndTime: 2019-10-10 13:34:55
	% DurationCPUTime: 0.31s
	% Computational Cost: add. (178->54), mult. (587->106), div. (0->0), fcn. (611->10), ass. (0->49)
	t364 = cos(pkin(6));
	t366 = sin(qJ(2));
	t367 = sin(qJ(1));
	t392 = t367 * t366;
	t385 = t364 * t392;
	t369 = cos(qJ(2));
	t370 = cos(qJ(1));
	t388 = t370 * t369;
	t351 = -qJD(1) * t385 - qJD(2) * t392 + (qJD(2) * t364 + qJD(1)) * t388;
	t389 = t370 * t366;
	t391 = t367 * t369;
	t353 = t364 * t389 + t391;
	t361 = sin(pkin(7));
	t365 = sin(qJ(3));
	t368 = cos(qJ(3));
	t375 = t364 * t391 + t389;
	t350 = t375 * qJD(1) + t353 * qJD(2);
	t363 = cos(pkin(7));
	t362 = sin(pkin(6));
	t387 = qJD(1) * t362;
	t384 = t367 * t387;
	t372 = -t350 * t363 + t361 * t384;
	t398 = t362 * t370;
	t352 = -t364 * t388 + t392;
	t401 = t352 * t363;
	t405 = ((t361 * t398 + t401) * t365 - t353 * t368) * qJD(3) - t351 * t365 + t372 * t368;
	t399 = t361 * t362;
	t397 = t363 * t365;
	t396 = t363 * t368;
	t395 = t365 * t366;
	t394 = t365 * t369;
	t393 = t366 * t368;
	t390 = t368 * t369;
	t386 = qJD(3) * t361;
	t383 = t370 * t387;
	t382 = t368 * t386;
	t380 = -t363 * t375 + t367 * t399;
	t379 = -t363 * t390 + t395;
	t378 = -t363 * t393 - t394;
	t377 = -t363 * t394 - t393;
	t376 = t363 * t395 - t390;
	t374 = t385 - t388;
	t348 = t352 * qJD(1) + t374 * qJD(2);
	t373 = t348 * t363 + t361 * t383;
	t371 = t382 * t398 + (qJD(3) * t401 - t351) * t368 + (qJD(3) * t353 - t372) * t365;
	t349 = t353 * qJD(1) + t375 * qJD(2);
	t347 = -t349 * t368 + t373 * t365 + (t365 * t374 + t380 * t368) * qJD(3);
	t346 = t349 * t365 + t373 * t368 + (-t380 * t365 + t368 * t374) * qJD(3);
	t1 = [t371, t349 * t397 + t348 * t368 + (t365 * t375 + t374 * t396) * qJD(3), t346, 0, 0, 0; t347, -t351 * t397 - t350 * t368 + (t352 * t365 - t353 * t396) * qJD(3), t405, 0, 0, 0; 0, (t377 * qJD(2) + t378 * qJD(3)) * t362, -t364 * t365 * t386 + (t378 * qJD(2) + t377 * qJD(3)) * t362, 0, 0, 0; -t405, t349 * t396 - t348 * t365 + (t368 * t375 - t374 * t397) * qJD(3), -t347, 0, 0, 0; t346, -t351 * t396 + t350 * t365 + (t352 * t368 + t353 * t397) * qJD(3), t371, 0, 0, 0; 0, (t379 * qJD(2) + t376 * qJD(3)) * t362, -t364 * t382 + (t376 * qJD(2) + t379 * qJD(3)) * t362, 0, 0, 0; -t350 * t361 - t363 * t384, -t349 * t361, 0, 0, 0, 0; -t348 * t361 + t363 * t383, t351 * t361, 0, 0, 0, 0; 0, qJD(2) * t369 * t399, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:35:01
	% EndTime: 2019-10-10 13:35:03
	% DurationCPUTime: 1.94s
	% Computational Cost: add. (851->141), mult. (2739->265), div. (0->0), fcn. (2977->14), ass. (0->110)
	t729 = cos(qJ(2));
	t730 = cos(qJ(1));
	t796 = cos(pkin(6));
	t763 = t730 * t796;
	t725 = sin(qJ(2));
	t726 = sin(qJ(1));
	t776 = t726 * t725;
	t706 = -t729 * t763 + t776;
	t724 = sin(qJ(3));
	t719 = sin(pkin(7));
	t720 = sin(pkin(6));
	t784 = t720 * t730;
	t769 = t719 * t784;
	t722 = cos(pkin(7));
	t781 = t722 * t724;
	t707 = t725 * t763 + t726 * t729;
	t728 = cos(qJ(3));
	t791 = t707 * t728;
	t680 = t706 * t781 + t724 * t769 - t791;
	t723 = sin(qJ(4));
	t727 = cos(qJ(4));
	t764 = t726 * t796;
	t758 = t725 * t764;
	t774 = t730 * t729;
	t695 = -qJD(1) * t758 - qJD(2) * t776 + (qJD(2) * t796 + qJD(1)) * t774;
	t733 = t730 * t725 + t729 * t764;
	t694 = t733 * qJD(1) + t707 * qJD(2);
	t773 = qJD(1) * t720;
	t767 = t726 * t773;
	t760 = t719 * t767;
	t735 = -t694 * t722 + t760;
	t793 = t706 * t722;
	t744 = t769 + t793;
	t667 = -t695 * t724 + t735 * t728 + (t744 * t724 - t791) * qJD(3);
	t685 = t694 * t719 + t722 * t767;
	t718 = sin(pkin(8));
	t721 = cos(pkin(8));
	t755 = t667 * t721 + t685 * t718;
	t797 = t707 * t724 + t744 * t728;
	t804 = t797 * t721 + (-t706 * t719 + t722 * t784) * t718;
	t809 = -t755 * t723 + (-t680 * t723 + t727 * t804) * qJD(4);
	t808 = t755 * t727 + (t680 * t727 + t723 * t804) * qJD(4);
	t734 = t758 - t774;
	t786 = t720 * t726;
	t742 = t719 * t786 - t722 * t733;
	t682 = t742 * t724 - t728 * t734;
	t795 = t694 * t724;
	t789 = t718 * t719;
	t788 = t719 * t721;
	t787 = t720 * t725;
	t785 = t720 * t729;
	t783 = t721 * t723;
	t782 = t721 * t727;
	t780 = t722 * t728;
	t779 = t724 * t725;
	t778 = t724 * t729;
	t777 = t725 * t728;
	t775 = t728 * t729;
	t772 = qJD(2) * t720;
	t771 = qJD(3) * t724;
	t770 = qJD(3) * t728;
	t768 = t722 * t779;
	t766 = t730 * t773;
	t765 = t729 * t772;
	t762 = t796 * t719;
	t761 = t787 * t789;
	t759 = t719 * t765;
	t757 = t724 * t762;
	t693 = t707 * qJD(1) + t733 * qJD(2);
	t692 = t706 * qJD(1) + t734 * qJD(2);
	t736 = t692 * t722 + t719 * t766;
	t665 = -t682 * qJD(3) + t693 * t724 + t736 * t728;
	t683 = -t692 * t719 + t722 * t766;
	t756 = t665 * t721 + t683 * t718;
	t681 = t724 * t734 + t742 * t728;
	t751 = t681 * t721 + (t719 * t733 + t722 * t786) * t718;
	t741 = t722 * t775 - t779;
	t696 = t741 * t720 + t728 * t762;
	t750 = -t696 * t721 - (-t719 * t785 + t796 * t722) * t718;
	t743 = t728 * t733 - t734 * t781;
	t671 = t743 * qJD(3) - t692 * t724 + t693 * t780;
	t749 = t671 * t721 - t693 * t789;
	t745 = t706 * t728 + t707 * t781;
	t673 = t745 * qJD(3) - t695 * t780 + t795;
	t748 = t673 * t721 + t695 * t789;
	t688 = t706 * t724 - t707 * t780;
	t747 = t688 * t721 + t707 * t789;
	t690 = t724 * t733 + t734 * t780;
	t746 = t690 * t721 - t734 * t789;
	t740 = -t722 * t777 - t778;
	t739 = t722 * t778 + t777;
	t738 = t768 - t775;
	t737 = t720 * t721 * t740 + t761;
	t675 = -qJD(3) * t757 + (t740 * qJD(2) - t739 * qJD(3)) * t720;
	t732 = qJD(2) * t761 + t675 * t721;
	t686 = (-t741 * qJD(2) + t738 * qJD(3)) * t720;
	t731 = t686 * t721 + t718 * t759;
	t711 = t769 * t770;
	t702 = t738 * t720;
	t697 = t739 * t720 + t757;
	t687 = (-t739 * qJD(2) + t740 * qJD(3)) * t720;
	t676 = -t768 * t772 - t771 * t787 + (t765 + (t722 * t785 + t762) * qJD(3)) * t728;
	t674 = t688 * qJD(3) - t694 * t728 - t695 * t781;
	t672 = t690 * qJD(3) + t692 * t728 + t693 * t781;
	t670 = t711 + (qJD(3) * t793 - t695) * t728 + (qJD(3) * t707 - t735) * t724;
	t668 = t724 * t760 + t695 * t728 - t707 * t771 - t711 + (-t706 * t770 - t795) * t722;
	t666 = t734 * t771 + t736 * t724 + (t742 * qJD(3) - t693) * t728;
	t664 = t666 * t727 + t756 * t723 + (-t682 * t723 + t751 * t727) * qJD(4);
	t663 = -t666 * t723 + t756 * t727 + (-t682 * t727 - t751 * t723) * qJD(4);
	t1 = [t670 * t727 + t809, t672 * t727 + t749 * t723 + (t723 * t743 + t746 * t727) * qJD(4), -t666 * t783 + t665 * t727 + (-t681 * t723 - t682 * t782) * qJD(4), t663, 0, 0; t664, t674 * t727 + t748 * t723 + (t723 * t745 + t747 * t727) * qJD(4), -t668 * t783 + t667 * t727 + (t680 * t782 + t723 * t797) * qJD(4), -t668 * t723 + t808, 0, 0; 0, t687 * t727 + t731 * t723 + (t702 * t723 + t737 * t727) * qJD(4), -t676 * t783 + t675 * t727 + (-t696 * t723 - t697 * t782) * qJD(4), -t676 * t723 + t732 * t727 + (-t697 * t727 + t750 * t723) * qJD(4), 0, 0; -t670 * t723 - t808, -t672 * t723 + t749 * t727 + (-t746 * t723 + t727 * t743) * qJD(4), -t666 * t782 - t665 * t723 + (-t681 * t727 + t682 * t783) * qJD(4), -t664, 0, 0; t663, -t674 * t723 + t748 * t727 + (-t747 * t723 + t727 * t745) * qJD(4), -t668 * t782 - t667 * t723 + (-t680 * t783 + t727 * t797) * qJD(4), -t668 * t727 + t809, 0, 0; 0, -t687 * t723 + t731 * t727 + (t702 * t727 - t737 * t723) * qJD(4), -t676 * t782 - t675 * t723 + (-t696 * t727 + t697 * t783) * qJD(4), -t676 * t727 - t732 * t723 + (t697 * t723 + t750 * t727) * qJD(4), 0, 0; t667 * t718 - t685 * t721, -t671 * t718 - t693 * t788, t666 * t718, 0, 0, 0; -t665 * t718 + t683 * t721, -t673 * t718 + t695 * t788, t668 * t718, 0, 0, 0; 0, -t686 * t718 + t721 * t759, t676 * t718, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:35:13
	% EndTime: 2019-10-10 13:35:17
	% DurationCPUTime: 4.48s
	% Computational Cost: add. (2062->211), mult. (6521->380), div. (0->0), fcn. (7328->16), ass. (0->160)
	t1044 = sin(qJ(5));
	t1049 = cos(qJ(5));
	t1047 = sin(qJ(2));
	t1048 = sin(qJ(1));
	t1052 = cos(qJ(2));
	t1053 = cos(qJ(1));
	t1125 = cos(pkin(6));
	t1086 = t1053 * t1125;
	t1028 = t1047 * t1086 + t1048 * t1052;
	t1087 = t1048 * t1125;
	t1056 = t1053 * t1047 + t1052 * t1087;
	t1015 = qJD(1) * t1056 + qJD(2) * t1028;
	t1040 = sin(pkin(7));
	t1043 = cos(pkin(7));
	t1041 = sin(pkin(6));
	t1107 = t1041 * t1048;
	t1091 = t1043 * t1107;
	t1005 = qJD(1) * t1091 + t1015 * t1040;
	t1039 = sin(pkin(8));
	t1042 = cos(pkin(8));
	t1080 = t1047 * t1087;
	t1095 = t1053 * t1052;
	t1097 = t1048 * t1047;
	t1016 = -qJD(1) * t1080 - qJD(2) * t1097 + (qJD(2) * t1125 + qJD(1)) * t1095;
	t1046 = sin(qJ(3));
	t1051 = cos(qJ(3));
	t1093 = t1040 * t1107;
	t1084 = qJD(1) * t1093;
	t1059 = -t1015 * t1043 + t1084;
	t1105 = t1041 * t1053;
	t1092 = t1040 * t1105;
	t1027 = -t1052 * t1086 + t1097;
	t1117 = t1027 * t1043;
	t1067 = t1092 + t1117;
	t1114 = t1028 * t1051;
	t965 = (t1067 * t1046 - t1114) * qJD(3) - t1016 * t1046 + t1059 * t1051;
	t957 = -t1005 * t1042 + t1039 * t965;
	t1102 = t1043 * t1046;
	t1000 = t1027 * t1102 + t1046 * t1092 - t1114;
	t1045 = sin(qJ(4));
	t1050 = cos(qJ(4));
	t1090 = t1043 * t1105;
	t1019 = -t1027 * t1040 + t1090;
	t1115 = t1028 * t1046;
	t999 = t1067 * t1051 + t1115;
	t1076 = t1019 * t1039 + t1042 * t999;
	t971 = t1000 * t1050 + t1076 * t1045;
	t984 = -t1019 * t1042 + t1039 * t999;
	t1145 = (-t1044 * t984 + t1049 * t971) * qJD(5) - t957 * t1049;
	t1077 = t1005 * t1039 + t1042 * t965;
	t1144 = t971 * qJD(4) + t1077 * t1050;
	t1134 = -t1000 * t1045 + t1076 * t1050;
	t1142 = -t1134 * qJD(4) + t1077 * t1045;
	t1141 = t957 * t1044 + (-t1044 * t971 - t1049 * t984) * qJD(5);
	t1098 = t1047 * t1051;
	t1099 = t1046 * t1052;
	t1062 = t1043 * t1099 + t1098;
	t1085 = t1125 * t1040;
	t1079 = t1046 * t1085;
	t1018 = t1062 * t1041 + t1079;
	t1096 = t1051 * t1052;
	t1100 = t1046 * t1047;
	t1064 = t1043 * t1096 - t1100;
	t1017 = t1064 * t1041 + t1051 * t1085;
	t1106 = t1041 * t1052;
	t1089 = t1040 * t1106;
	t1026 = t1125 * t1043 - t1089;
	t1073 = t1017 * t1042 + t1026 * t1039;
	t983 = t1018 * t1050 + t1073 * t1045;
	t1057 = t1080 - t1095;
	t1065 = -t1043 * t1056 + t1093;
	t1002 = t1065 * t1046 - t1051 * t1057;
	t1123 = qJD(5) * t1044;
	t1122 = qJD(5) * t1049;
	t1013 = qJD(1) * t1027 + qJD(2) * t1057;
	t1003 = qJD(1) * t1090 - t1013 * t1040;
	t1121 = t1003 * t1039;
	t1120 = t1015 * t1046;
	t1116 = t1027 * t1051;
	t1113 = t1057 * t1046;
	t1111 = t1039 * t1040;
	t1110 = t1039 * t1044;
	t1109 = t1039 * t1049;
	t1108 = t1040 * t1042;
	t1104 = t1042 * t1045;
	t1103 = t1042 * t1050;
	t1101 = t1043 * t1051;
	t1094 = t1040 * t1041 * t1047;
	t1088 = t1043 * t1100;
	t1083 = qJD(2) * t1089;
	t1082 = t1039 * t1094;
	t1081 = t1042 * t1094;
	t1001 = t1065 * t1051 + t1113;
	t1021 = t1040 * t1056 + t1091;
	t1074 = t1001 * t1042 + t1021 * t1039;
	t980 = t1000 * t1104 - t1050 * t999;
	t1014 = qJD(1) * t1028 + qJD(2) * t1056;
	t1066 = t1051 * t1056 - t1057 * t1102;
	t974 = t1066 * qJD(3) - t1013 * t1046 + t1014 * t1101;
	t1072 = t1014 * t1111 - t1042 * t974;
	t1068 = t1028 * t1102 + t1116;
	t976 = t1068 * qJD(3) - t1016 * t1101 + t1120;
	t1071 = t1016 * t1111 + t1042 * t976;
	t981 = t1001 * t1050 - t1002 * t1104;
	t1008 = t1027 * t1046 - t1028 * t1101;
	t1070 = t1008 * t1042 + t1028 * t1111;
	t1010 = t1046 * t1056 + t1057 * t1101;
	t1069 = t1010 * t1042 - t1057 * t1111;
	t988 = t1017 * t1050 - t1018 * t1104;
	t1063 = -t1043 * t1098 - t1099;
	t1061 = t1088 - t1096;
	t1060 = qJD(1) * t1092 + t1013 * t1043;
	t1022 = t1063 * t1041;
	t1058 = t1022 * t1042 + t1082;
	t993 = -qJD(3) * t1079 + (t1063 * qJD(2) - t1062 * qJD(3)) * t1041;
	t1055 = qJD(2) * t1082 + t1042 * t993;
	t1006 = (-t1064 * qJD(2) + t1061 * qJD(3)) * t1041;
	t1054 = t1006 * t1042 + t1039 * t1083;
	t972 = -t1002 * t1045 + t1074 * t1050;
	t973 = t1002 * t1050 + t1074 * t1045;
	t982 = -t1018 * t1045 + t1073 * t1050;
	t978 = t1070 * t1045 - t1050 * t1068;
	t979 = t1069 * t1045 - t1050 * t1066;
	t1023 = t1061 * t1041;
	t989 = -t1023 * t1050 + t1045 * t1058;
	t1032 = qJD(3) * t1051 * t1092;
	t1012 = -t1022 * t1039 + t1081;
	t1007 = (-t1062 * qJD(2) + t1063 * qJD(3)) * t1041;
	t996 = -t1017 * t1039 + t1026 * t1042;
	t994 = (qJD(2) * t1106 + (t1043 * t1106 + t1085) * qJD(3)) * t1051 + (-qJD(2) * t1088 - qJD(3) * t1100) * t1041;
	t992 = -t1006 * t1039 + t1042 * t1083;
	t991 = -t1010 * t1039 - t1057 * t1108;
	t990 = -t1008 * t1039 + t1028 * t1108;
	t987 = qJD(2) * t1081 - t1039 * t993;
	t986 = -t1001 * t1039 + t1021 * t1042;
	t977 = t1008 * qJD(3) - t1015 * t1051 - t1016 * t1102;
	t975 = t1010 * qJD(3) + t1013 * t1051 + t1014 * t1102;
	t968 = t1032 + (qJD(3) * t1117 - t1016) * t1051 + (qJD(3) * t1028 - t1059) * t1046;
	t966 = t1046 * t1084 + t1016 * t1051 - qJD(3) * t1115 - t1032 + (-qJD(3) * t1116 - t1120) * t1043;
	t964 = qJD(3) * t1113 + t1060 * t1046 + (t1065 * qJD(3) - t1014) * t1051;
	t963 = -t1002 * qJD(3) + t1014 * t1046 + t1060 * t1051;
	t961 = t1016 * t1108 - t1039 * t976;
	t960 = -t1014 * t1108 - t1039 * t974;
	t959 = t1007 * t1050 + t1054 * t1045 + (t1023 * t1045 + t1050 * t1058) * qJD(4);
	t958 = -t994 * t1104 + t993 * t1050 + (-t1017 * t1045 - t1018 * t1103) * qJD(4);
	t955 = t1003 * t1042 - t1039 * t963;
	t954 = qJD(4) * t982 + t1045 * t1055 + t1050 * t994;
	t953 = -t983 * qJD(4) - t1045 * t994 + t1055 * t1050;
	t952 = t977 * t1050 + t1071 * t1045 + (t1045 * t1068 + t1070 * t1050) * qJD(4);
	t951 = t975 * t1050 - t1072 * t1045 + (t1045 * t1066 + t1069 * t1050) * qJD(4);
	t950 = -t966 * t1104 + t965 * t1050 + (t1000 * t1103 + t1045 * t999) * qJD(4);
	t949 = -t964 * t1104 + t963 * t1050 + (-t1001 * t1045 - t1002 * t1103) * qJD(4);
	t948 = t968 * t1050 - t1142;
	t947 = t966 * t1050 + t1142;
	t946 = -t966 * t1045 + t1144;
	t945 = t964 * t1050 + (t1042 * t963 + t1121) * t1045 + t972 * qJD(4);
	t944 = qJD(4) * t973 + t964 * t1045 - t1050 * t1121 - t963 * t1103;
	t943 = t955 * t1044 + t945 * t1049 + (-t1044 * t973 + t1049 * t986) * qJD(5);
	t942 = -t945 * t1044 + t955 * t1049 + (-t1044 * t986 - t1049 * t973) * qJD(5);
	t1 = [t948 * t1049 + t1141, t960 * t1044 + t951 * t1049 + (-t1044 * t979 + t1049 * t991) * qJD(5), t964 * t1110 + t949 * t1049 + (t1002 * t1109 - t1044 * t981) * qJD(5), -t1049 * t944 - t972 * t1123, t942, 0; t943, t961 * t1044 + t952 * t1049 + (-t1044 * t978 + t1049 * t990) * qJD(5), t966 * t1110 + t950 * t1049 + (-t1000 * t1109 - t1044 * t980) * qJD(5), t1049 * t946 + t1123 * t1134, -t947 * t1044 + t1145, 0; 0, t992 * t1044 + t959 * t1049 + (t1012 * t1049 - t1044 * t989) * qJD(5), t994 * t1110 + t958 * t1049 + (t1018 * t1109 - t1044 * t988) * qJD(5), t1049 * t953 - t982 * t1123, -t954 * t1044 + t987 * t1049 + (-t1044 * t996 - t1049 * t983) * qJD(5), 0; -t948 * t1044 - t1145, -t951 * t1044 + t960 * t1049 + (-t1044 * t991 - t1049 * t979) * qJD(5), t964 * t1109 - t949 * t1044 + (-t1002 * t1110 - t1049 * t981) * qJD(5), t1044 * t944 - t972 * t1122, -t943, 0; t942, -t952 * t1044 + t961 * t1049 + (-t1044 * t990 - t1049 * t978) * qJD(5), t966 * t1109 - t950 * t1044 + (t1000 * t1110 - t1049 * t980) * qJD(5), -t1044 * t946 + t1122 * t1134, -t947 * t1049 + t1141, 0; 0, -t959 * t1044 + t992 * t1049 + (-t1012 * t1044 - t1049 * t989) * qJD(5), t994 * t1109 - t958 * t1044 + (-t1018 * t1110 - t1049 * t988) * qJD(5), -t1044 * t953 - t982 * t1122, -t987 * t1044 - t954 * t1049 + (t1044 * t983 - t1049 * t996) * qJD(5), 0; t968 * t1045 + t1144, t979 * qJD(4) + t975 * t1045 + t1072 * t1050, t981 * qJD(4) + t963 * t1045 + t964 * t1103, t945, 0, 0; t944, t978 * qJD(4) + t977 * t1045 - t1071 * t1050, t980 * qJD(4) + t965 * t1045 + t966 * t1103, t947, 0, 0; 0, qJD(4) * t989 + t1007 * t1045 - t1050 * t1054, t988 * qJD(4) + t993 * t1045 + t994 * t1103, t954, 0, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:35:31
	% EndTime: 2019-10-10 13:35:39
	% DurationCPUTime: 8.50s
	% Computational Cost: add. (4758->298), mult. (14835->521), div. (0->0), fcn. (17098->18), ass. (0->220)
	t1398 = cos(qJ(2));
	t1399 = cos(qJ(1));
	t1496 = cos(pkin(6));
	t1447 = t1399 * t1496;
	t1392 = sin(qJ(2));
	t1393 = sin(qJ(1));
	t1458 = t1393 * t1392;
	t1371 = -t1398 * t1447 + t1458;
	t1391 = sin(qJ(3));
	t1384 = sin(pkin(7));
	t1385 = sin(pkin(6));
	t1466 = t1385 * t1399;
	t1453 = t1384 * t1466;
	t1387 = cos(pkin(7));
	t1463 = t1387 * t1391;
	t1372 = t1392 * t1447 + t1393 * t1398;
	t1397 = cos(qJ(3));
	t1475 = t1372 * t1397;
	t1344 = t1371 * t1463 + t1391 * t1453 - t1475;
	t1390 = sin(qJ(4));
	t1396 = cos(qJ(4));
	t1478 = t1371 * t1387;
	t1428 = t1453 + t1478;
	t1476 = t1372 * t1391;
	t1343 = t1397 * t1428 + t1476;
	t1386 = cos(pkin(8));
	t1449 = t1387 * t1466;
	t1364 = -t1371 * t1384 + t1449;
	t1383 = sin(pkin(8));
	t1481 = t1364 * t1383;
	t1434 = t1343 * t1386 + t1481;
	t1303 = t1344 * t1396 + t1390 * t1434;
	t1322 = t1343 * t1383 - t1364 * t1386;
	t1389 = sin(qJ(5));
	t1395 = cos(qJ(5));
	t1272 = t1303 * t1395 - t1322 * t1389;
	t1388 = sin(qJ(6));
	t1517 = t1272 * t1388;
	t1394 = cos(qJ(6));
	t1516 = t1272 * t1394;
	t1448 = t1393 * t1496;
	t1441 = t1392 * t1448;
	t1456 = t1399 * t1398;
	t1359 = -qJD(1) * t1441 - qJD(2) * t1458 + (qJD(2) * t1496 + qJD(1)) * t1456;
	t1413 = t1399 * t1392 + t1398 * t1448;
	t1358 = qJD(1) * t1413 + qJD(2) * t1372;
	t1468 = t1385 * t1393;
	t1454 = t1384 * t1468;
	t1445 = qJD(1) * t1454;
	t1417 = -t1358 * t1387 + t1445;
	t1296 = (t1391 * t1428 - t1475) * qJD(3) - t1359 * t1391 + t1417 * t1397;
	t1450 = t1387 * t1468;
	t1418 = qJD(1) * t1450 + t1358 * t1384;
	t1279 = t1296 * t1383 - t1386 * t1418;
	t1515 = t1272 * qJD(5) - t1279 * t1395;
	t1270 = t1303 * t1389 + t1322 * t1395;
	t1514 = t1270 * qJD(5) - t1279 * t1389;
	t1512 = t1303 * qJD(4);
	t1489 = t1344 * t1390;
	t1498 = t1396 * t1434 - t1489;
	t1408 = t1418 * t1383;
	t1505 = t1296 * t1386 + t1408;
	t1509 = -t1498 * qJD(4) + t1505 * t1390;
	t1414 = t1441 - t1456;
	t1425 = -t1387 * t1413 + t1454;
	t1346 = t1391 * t1425 - t1397 * t1414;
	t1461 = t1391 * t1392;
	t1451 = t1387 * t1461;
	t1457 = t1397 * t1398;
	t1421 = t1451 - t1457;
	t1367 = t1421 * t1385;
	t1459 = t1392 * t1397;
	t1460 = t1391 * t1398;
	t1423 = -t1387 * t1459 - t1460;
	t1366 = t1423 * t1385;
	t1455 = t1384 * t1385 * t1392;
	t1443 = t1383 * t1455;
	t1416 = t1366 * t1386 + t1443;
	t1501 = t1367 * t1390 + t1396 * t1416;
	t1427 = t1397 * t1413 - t1414 * t1463;
	t1462 = t1387 * t1397;
	t1352 = t1391 * t1413 + t1414 * t1462;
	t1472 = t1383 * t1384;
	t1430 = t1352 * t1386 - t1414 * t1472;
	t1500 = t1390 * t1427 + t1396 * t1430;
	t1477 = t1371 * t1397;
	t1429 = t1372 * t1463 + t1477;
	t1350 = t1371 * t1391 - t1372 * t1462;
	t1431 = t1350 * t1386 + t1372 * t1472;
	t1499 = t1390 * t1429 + t1396 * t1431;
	t1495 = qJD(5) * t1389;
	t1494 = qJD(6) * t1388;
	t1493 = qJD(6) * t1394;
	t1464 = t1386 * t1396;
	t1300 = t1343 * t1464 + t1396 * t1481 - t1489;
	t1492 = t1300 * t1395;
	t1474 = t1414 * t1391;
	t1345 = t1397 * t1425 + t1474;
	t1426 = t1384 * t1413 + t1450;
	t1411 = t1426 * t1383;
	t1487 = t1346 * t1390;
	t1304 = -t1345 * t1464 - t1396 * t1411 + t1487;
	t1491 = t1304 * t1395;
	t1424 = t1387 * t1457 - t1461;
	t1446 = t1496 * t1384;
	t1362 = t1424 * t1385 + t1397 * t1446;
	t1467 = t1385 * t1398;
	t1452 = t1384 * t1467;
	t1415 = t1496 * t1387 - t1452;
	t1404 = t1415 * t1383;
	t1422 = t1387 * t1460 + t1459;
	t1440 = t1391 * t1446;
	t1363 = t1422 * t1385 + t1440;
	t1482 = t1363 * t1390;
	t1320 = -t1362 * t1464 - t1396 * t1404 + t1482;
	t1490 = t1320 * t1395;
	t1484 = t1358 * t1391;
	t1471 = t1383 * t1389;
	t1470 = t1383 * t1395;
	t1469 = t1384 * t1386;
	t1465 = t1386 * t1390;
	t1444 = qJD(2) * t1452;
	t1442 = t1386 * t1455;
	t1357 = qJD(1) * t1372 + qJD(2) * t1413;
	t1356 = qJD(1) * t1371 + qJD(2) * t1414;
	t1419 = qJD(1) * t1453 + t1356 * t1387;
	t1294 = -t1346 * qJD(3) + t1357 * t1391 + t1419 * t1397;
	t1295 = qJD(3) * t1474 + t1419 * t1391 + (qJD(3) * t1425 - t1357) * t1397;
	t1402 = t1345 * t1386 + t1411;
	t1420 = qJD(1) * t1449 - t1356 * t1384;
	t1409 = t1420 * t1383;
	t1253 = t1295 * t1396 + (t1294 * t1386 + t1409) * t1390 + (t1396 * t1402 - t1487) * qJD(4);
	t1439 = qJD(6) * t1491 + t1253;
	t1376 = qJD(3) * t1397 * t1453;
	t1297 = t1391 * t1445 + t1359 * t1397 - qJD(3) * t1476 - t1376 + (-qJD(3) * t1477 - t1484) * t1387;
	t1255 = t1297 * t1396 + t1509;
	t1438 = qJD(6) * t1492 + t1255;
	t1336 = -qJD(3) * t1440 + (qJD(2) * t1423 - qJD(3) * t1422) * t1385;
	t1337 = (qJD(2) * t1467 + (t1387 * t1467 + t1446) * qJD(3)) * t1397 + (-qJD(2) * t1451 - qJD(3) * t1461) * t1385;
	t1400 = t1362 * t1386 + t1404;
	t1436 = qJD(2) * t1443;
	t1276 = t1337 * t1396 + (t1336 * t1386 + t1436) * t1390 + (t1396 * t1400 - t1482) * qJD(4);
	t1437 = qJD(6) * t1490 + t1276;
	t1305 = t1346 * t1396 + t1390 * t1402;
	t1324 = -t1345 * t1383 + t1386 * t1426;
	t1274 = t1305 * t1395 + t1324 * t1389;
	t1273 = -t1305 * t1389 + t1324 * t1395;
	t1311 = t1390 * t1431 - t1396 * t1429;
	t1330 = -t1350 * t1383 + t1372 * t1469;
	t1284 = t1311 * t1395 + t1330 * t1389;
	t1313 = t1390 * t1430 - t1396 * t1427;
	t1331 = -t1352 * t1383 - t1414 * t1469;
	t1285 = t1313 * t1395 + t1331 * t1389;
	t1321 = t1363 * t1396 + t1390 * t1400;
	t1340 = -t1362 * t1383 + t1386 * t1415;
	t1293 = t1321 * t1395 + t1340 * t1389;
	t1292 = -t1321 * t1389 + t1340 * t1395;
	t1329 = -t1367 * t1396 + t1390 * t1416;
	t1354 = -t1366 * t1383 + t1442;
	t1318 = t1329 * t1395 + t1354 * t1389;
	t1306 = qJD(3) * t1427 - t1356 * t1391 + t1357 * t1462;
	t1433 = -t1306 * t1386 + t1357 * t1472;
	t1308 = qJD(3) * t1429 - t1359 * t1462 + t1484;
	t1432 = t1308 * t1386 + t1359 * t1472;
	t1315 = -t1343 * t1396 + t1344 * t1465;
	t1286 = t1315 * t1395 - t1344 * t1471;
	t1317 = t1345 * t1396 - t1346 * t1465;
	t1287 = t1317 * t1395 + t1346 * t1471;
	t1327 = t1362 * t1396 - t1363 * t1465;
	t1319 = t1327 * t1395 + t1363 * t1471;
	t1314 = -t1343 * t1390 - t1344 * t1464;
	t1316 = t1345 * t1390 + t1346 * t1464;
	t1326 = t1362 * t1390 + t1363 * t1464;
	t1348 = (-qJD(2) * t1424 + qJD(3) * t1421) * t1385;
	t1410 = t1348 * t1386 + t1383 * t1444;
	t1252 = qJD(4) * t1305 - t1294 * t1464 + t1295 * t1390 - t1396 * t1409;
	t1407 = qJD(6) * t1305 - t1252 * t1395 + t1304 * t1495;
	t1254 = -t1296 * t1464 + t1297 * t1390 - t1396 * t1408 - t1512;
	t1406 = -qJD(6) * t1303 - t1254 * t1395 + t1300 * t1495;
	t1275 = qJD(4) * t1321 - t1336 * t1464 + t1337 * t1390 - t1396 * t1436;
	t1405 = qJD(6) * t1321 - t1275 * t1395 + t1320 * t1495;
	t1401 = -t1294 * t1383 + t1386 * t1420;
	t1349 = (-qJD(2) * t1422 + qJD(3) * t1423) * t1385;
	t1332 = -t1348 * t1383 + t1386 * t1444;
	t1325 = qJD(2) * t1442 - t1336 * t1383;
	t1309 = qJD(3) * t1350 - t1358 * t1397 - t1359 * t1463;
	t1307 = qJD(3) * t1352 + t1356 * t1397 + t1357 * t1463;
	t1299 = t1376 + (qJD(3) * t1478 - t1359) * t1397 + (qJD(3) * t1372 - t1417) * t1391;
	t1289 = -t1308 * t1383 + t1359 * t1469;
	t1288 = -t1306 * t1383 - t1357 * t1469;
	t1283 = t1501 * qJD(4) + t1349 * t1396 + t1410 * t1390;
	t1282 = qJD(4) * t1329 + t1349 * t1390 - t1396 * t1410;
	t1281 = -qJD(4) * t1326 + t1336 * t1396 - t1337 * t1465;
	t1280 = qJD(4) * t1327 + t1336 * t1390 + t1337 * t1464;
	t1269 = t1283 * t1395 + t1332 * t1389 + (-t1329 * t1389 + t1354 * t1395) * qJD(5);
	t1268 = t1337 * t1471 + t1281 * t1395 + (-t1327 * t1389 + t1363 * t1470) * qJD(5);
	t1267 = t1499 * qJD(4) + t1309 * t1396 + t1432 * t1390;
	t1266 = qJD(4) * t1311 + t1309 * t1390 - t1396 * t1432;
	t1265 = t1500 * qJD(4) + t1307 * t1396 - t1433 * t1390;
	t1264 = qJD(4) * t1313 + t1307 * t1390 + t1396 * t1433;
	t1263 = -qJD(4) * t1314 + t1296 * t1396 - t1297 * t1465;
	t1262 = qJD(4) * t1315 + t1296 * t1390 + t1297 * t1464;
	t1261 = -qJD(4) * t1316 + t1294 * t1396 - t1295 * t1465;
	t1260 = qJD(4) * t1317 + t1294 * t1390 + t1295 * t1464;
	t1259 = qJD(5) * t1292 + t1276 * t1395 + t1325 * t1389;
	t1258 = -qJD(5) * t1293 - t1276 * t1389 + t1325 * t1395;
	t1257 = t1299 * t1396 - t1509;
	t1256 = t1299 * t1390 + t1396 * t1505 + t1512;
	t1251 = t1297 * t1471 + t1263 * t1395 + (-t1315 * t1389 - t1344 * t1470) * qJD(5);
	t1250 = t1295 * t1471 + t1261 * t1395 + (-t1317 * t1389 + t1346 * t1470) * qJD(5);
	t1249 = t1267 * t1395 + t1289 * t1389 + (-t1311 * t1389 + t1330 * t1395) * qJD(5);
	t1248 = t1265 * t1395 + t1288 * t1389 + (-t1313 * t1389 + t1331 * t1395) * qJD(5);
	t1247 = t1257 * t1395 - t1514;
	t1246 = t1255 * t1395 + t1514;
	t1245 = -t1255 * t1389 + t1515;
	t1244 = t1273 * qJD(5) + t1253 * t1395 + t1401 * t1389;
	t1243 = t1274 * qJD(5) + t1253 * t1389 - t1401 * t1395;
	t1242 = t1244 * t1394 + t1252 * t1388 + (-t1274 * t1388 + t1304 * t1394) * qJD(6);
	t1241 = -t1244 * t1388 + t1252 * t1394 + (-t1274 * t1394 - t1304 * t1388) * qJD(6);
	t1 = [t1247 * t1394 + t1256 * t1388 + (-t1394 * t1498 - t1517) * qJD(6), t1248 * t1394 + t1264 * t1388 + (-t1285 * t1388 - t1394 * t1500) * qJD(6), t1250 * t1394 + t1260 * t1388 + (-t1287 * t1388 + t1316 * t1394) * qJD(6), t1439 * t1388 + t1407 * t1394, -t1243 * t1394 - t1273 * t1494, t1241; t1242, t1249 * t1394 + t1266 * t1388 + (-t1284 * t1388 - t1394 * t1499) * qJD(6), t1251 * t1394 + t1262 * t1388 + (-t1286 * t1388 + t1314 * t1394) * qJD(6), t1438 * t1388 + t1406 * t1394, t1245 * t1394 - t1270 * t1494, -t1246 * t1388 + t1254 * t1394 + (-t1300 * t1388 + t1516) * qJD(6); 0, t1269 * t1394 + t1282 * t1388 + (-t1318 * t1388 - t1394 * t1501) * qJD(6), t1268 * t1394 + t1280 * t1388 + (-t1319 * t1388 + t1326 * t1394) * qJD(6), t1437 * t1388 + t1405 * t1394, t1258 * t1394 - t1292 * t1494, -t1259 * t1388 + t1275 * t1394 + (-t1293 * t1394 - t1320 * t1388) * qJD(6); -t1247 * t1388 + t1256 * t1394 + (t1388 * t1498 - t1516) * qJD(6), -t1248 * t1388 + t1264 * t1394 + (-t1285 * t1394 + t1388 * t1500) * qJD(6), -t1250 * t1388 + t1260 * t1394 + (-t1287 * t1394 - t1316 * t1388) * qJD(6), -t1407 * t1388 + t1439 * t1394, t1243 * t1388 - t1273 * t1493, -t1242; t1241, -t1249 * t1388 + t1266 * t1394 + (-t1284 * t1394 + t1388 * t1499) * qJD(6), -t1251 * t1388 + t1262 * t1394 + (-t1286 * t1394 - t1314 * t1388) * qJD(6), -t1406 * t1388 + t1438 * t1394, -t1245 * t1388 - t1270 * t1493, -t1246 * t1394 - t1254 * t1388 + (-t1300 * t1394 - t1517) * qJD(6); 0, -t1269 * t1388 + t1282 * t1394 + (-t1318 * t1394 + t1388 * t1501) * qJD(6), -t1268 * t1388 + t1280 * t1394 + (-t1319 * t1394 - t1326 * t1388) * qJD(6), -t1405 * t1388 + t1437 * t1394, -t1258 * t1388 - t1292 * t1493, -t1259 * t1394 - t1275 * t1388 + (t1293 * t1388 - t1320 * t1394) * qJD(6); t1257 * t1389 + t1515, qJD(5) * t1285 + t1265 * t1389 - t1288 * t1395, qJD(5) * t1287 + t1261 * t1389 - t1295 * t1470, -qJD(5) * t1491 - t1252 * t1389, t1244, 0; t1243, qJD(5) * t1284 + t1267 * t1389 - t1289 * t1395, qJD(5) * t1286 + t1263 * t1389 - t1297 * t1470, -qJD(5) * t1492 - t1254 * t1389, t1246, 0; 0, qJD(5) * t1318 + t1283 * t1389 - t1332 * t1395, qJD(5) * t1319 + t1281 * t1389 - t1337 * t1470, -qJD(5) * t1490 - t1275 * t1389, t1259, 0;];
	JRD_rot = t1;
else
	JRD_rot=NaN(9,6);
end