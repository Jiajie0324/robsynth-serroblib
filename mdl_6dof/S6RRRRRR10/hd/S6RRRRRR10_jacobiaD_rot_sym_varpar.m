% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRRRR10_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 13:35
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRRRR10_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRRRR10_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiaD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.41s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:54
	% DurationCPUTime: 1.24s
	% Computational Cost: add. (2555->103), mult. (7918->233), div. (442->12), fcn. (10062->13), ass. (0->106)
	t218 = sin(pkin(6));
	t219 = cos(pkin(7));
	t220 = cos(pkin(6));
	t217 = sin(pkin(7));
	t225 = cos(qJ(2));
	t268 = t217 * t225;
	t206 = -t218 * t268 + t220 * t219;
	t203 = 0.1e1 / t206;
	t222 = sin(qJ(2));
	t226 = cos(qJ(1));
	t260 = t226 * t222;
	t223 = sin(qJ(1));
	t261 = t223 * t225;
	t238 = t220 * t260 + t261;
	t267 = t218 * t222;
	t204 = 0.1e1 / t206 ^ 2;
	t259 = t226 * t225;
	t262 = t223 * t222;
	t207 = -t220 * t259 + t262;
	t265 = t218 * t226;
	t242 = -t207 * t217 + t219 * t265;
	t272 = t242 * t204;
	t284 = t217 * (t203 * t238 + t267 * t272);
	t189 = atan2(t242, t206);
	t184 = sin(t189);
	t185 = cos(t189);
	t170 = t184 * t242 + t185 * t206;
	t167 = 0.1e1 / t170;
	t221 = sin(qJ(3));
	t224 = cos(qJ(3));
	t237 = t220 * t262 - t259;
	t239 = t220 * t261 + t260;
	t266 = t218 * t223;
	t252 = t217 * t266;
	t240 = -t219 * t239 + t252;
	t181 = t221 * t240 - t224 * t237;
	t175 = 0.1e1 / t181;
	t168 = 0.1e1 / t170 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t200 = -t217 * t239 - t219 * t266;
	t197 = t200 ^ 2;
	t163 = t197 * t168 + 0.1e1;
	t192 = qJD(1) * t207 + qJD(2) * t237;
	t258 = qJD(1) * t218;
	t249 = t226 * t258;
	t182 = t192 * t217 - t219 * t249;
	t276 = t182 * t168;
	t196 = t242 ^ 2;
	t188 = t196 * t204 + 0.1e1;
	t186 = 0.1e1 / t188;
	t194 = qJD(1) * t239 + qJD(2) * t238;
	t250 = t223 * t258;
	t183 = -t194 * t217 - t219 * t250;
	t257 = qJD(2) * t218;
	t269 = t217 * t222;
	t245 = t257 * t269;
	t244 = t204 * t245;
	t233 = t183 * t203 - t242 * t244;
	t159 = t233 * t186;
	t243 = -t184 * t206 + t185 * t242;
	t155 = t159 * t243 + t184 * t183 + t185 * t245;
	t282 = t155 * t167 * t168;
	t283 = (-t197 * t282 + t200 * t276) / t163 ^ 2;
	t193 = qJD(1) * t238 + qJD(2) * t239;
	t235 = t192 * t219 + t217 * t249;
	t165 = qJD(3) * t181 - t193 * t221 - t224 * t235;
	t263 = t219 * t224;
	t270 = t237 * t221;
	t180 = -t224 * t252 + t239 * t263 - t270;
	t174 = t180 ^ 2;
	t173 = t174 * t176 + 0.1e1;
	t277 = t176 * t180;
	t166 = -t193 * t224 + t235 * t221 + (t224 * t240 + t270) * qJD(3);
	t279 = t166 * t175 * t176;
	t281 = (t165 * t277 - t174 * t279) / t173 ^ 2;
	t205 = t203 * t204;
	t280 = (-t196 * t205 * t245 + t183 * t272) / t188 ^ 2;
	t278 = t168 * t200;
	t275 = t184 * t200;
	t274 = t185 * t200;
	t273 = t242 * t203;
	t271 = t238 * t221;
	t264 = t219 * t221;
	t256 = -0.2e1 * t283;
	t255 = -0.2e1 * t282;
	t254 = 0.2e1 * t281;
	t253 = 0.2e1 * t280;
	t251 = t217 * t265;
	t248 = -0.2e1 * t203 * t280;
	t247 = 0.2e1 * t180 * t279;
	t246 = t217 * t250;
	t241 = t207 * t219 + t251;
	t190 = -t221 * t239 - t237 * t263;
	t191 = -t224 * t239 + t237 * t264;
	t234 = t184 + (t185 * t273 - t184) * t186;
	t179 = t221 * t241 - t224 * t238;
	t216 = t217 ^ 2;
	t195 = qJD(1) * t237 + qJD(2) * t207;
	t178 = -t224 * t241 - t271;
	t171 = 0.1e1 / t173;
	t161 = 0.1e1 / t163;
	t160 = t186 * t284;
	t158 = t234 * t200;
	t156 = (-t184 * t238 + t185 * t267) * t217 - t243 * t160;
	t154 = t253 * t284 + (t195 * t203 * t217 + (-t183 * t204 * t269 + (t204 * t238 * t216 * t222 + (0.2e1 * t205 * t216 * t218 * t222 ^ 2 - t204 * t268) * t242) * qJD(2)) * t218) * t186;
	t1 = [t200 * t248 + (t182 * t203 - t200 * t244) * t186, t154, 0, 0, 0, 0; t242 * t167 * t256 + (t183 * t167 + (-t155 * t242 + t158 * t182) * t168) * t161 + ((t158 * t255 + t234 * t276) * t161 + (t158 * t256 + ((-t159 * t186 * t273 + t253) * t275 + (t242 * t248 + t159 + (-t159 + t233) * t186) * t274) * t161) * t168) * t200, 0.2e1 * (t167 * t217 * t237 - t156 * t278) * t283 + ((t243 * t154 - (-t159 * t170 + t183 * t185) * t160) * t278 + (t200 * t255 + t276) * t156 + (-t193 * t167 + (t237 * t155 + (-t159 * t238 + t225 * t257) * t274 + (t195 + (qJD(2) * t160 - t159) * t267) * t275) * t168) * t217) * t161, 0, 0, 0, 0; (-t175 * t178 + t179 * t277) * t254 + ((-t194 * t263 + t195 * t221 + t224 * t246) * t175 + t179 * t247 + (-t178 * t166 - (t194 * t264 + t195 * t224 - t221 * t246) * t180 - t179 * t165) * t176 + (t179 * t175 - (t207 * t263 + t224 * t251 + t271) * t277) * qJD(3)) * t171, (-t175 * t190 + t191 * t277) * t254 + ((qJD(3) * t191 + t192 * t221 - t193 * t263) * t175 + t191 * t247 + (-t190 * t166 - (-qJD(3) * t190 + t192 * t224 + t193 * t264) * t180 - t191 * t165) * t176) * t171, -0.2e1 * t281 + 0.2e1 * (t165 * t176 * t171 + (-t171 * t279 - t176 * t281) * t180) * t180, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:55
	% EndTime: 2019-10-10 13:34:59
	% DurationCPUTime: 4.66s
	% Computational Cost: add. (13117->203), mult. (39618->394), div. (699->12), fcn. (49954->17), ass. (0->172)
	t400 = cos(pkin(6));
	t406 = cos(qJ(2));
	t504 = sin(qJ(1));
	t452 = t504 * t406;
	t403 = sin(qJ(2));
	t407 = cos(qJ(1));
	t467 = t407 * t403;
	t387 = t400 * t467 + t452;
	t402 = sin(qJ(3));
	t405 = cos(qJ(3));
	t396 = sin(pkin(7));
	t397 = sin(pkin(6));
	t476 = t397 * t407;
	t456 = t396 * t476;
	t399 = cos(pkin(7));
	t394 = t504 * t403;
	t466 = t407 * t406;
	t505 = -t400 * t466 + t394;
	t506 = t505 * t399;
	t422 = t506 + t456;
	t369 = t387 * t402 + t405 * t422;
	t385 = -t396 * t505 + t399 * t476;
	t395 = sin(pkin(8));
	t398 = cos(pkin(8));
	t512 = -t369 * t395 + t385 * t398;
	t484 = t387 * t405;
	t511 = t402 * t422 - t484;
	t428 = t400 * t452 + t467;
	t379 = qJD(1) * t428 + qJD(2) * t387;
	t453 = t397 * t504;
	t444 = qJD(1) * t453;
	t424 = t379 * t396 + t399 * t444;
	t510 = t424 * t398;
	t445 = t400 * t394;
	t380 = -qJD(1) * t445 - qJD(2) * t394 + (qJD(2) * t400 + qJD(1)) * t466;
	t440 = t396 * t444;
	t423 = t379 * t399 - t440;
	t478 = t396 * t405;
	t450 = qJD(3) * t478;
	t509 = (qJD(3) * t506 - t380) * t405 + t450 * t476 + (t387 * qJD(3) + t423) * t402;
	t465 = qJD(3) * t395;
	t472 = t399 * t405;
	t486 = t380 * t402;
	t323 = (-t379 * t472 + t405 * t440 - t486) * t395 - t510 + t511 * t465;
	t350 = t512 ^ 2;
	t468 = t405 * t406;
	t471 = t402 * t403;
	t432 = t399 * t468 - t471;
	t477 = t396 * t406;
	t365 = -(t397 * t432 + t400 * t478) * t395 + (-t397 * t477 + t400 * t399) * t398;
	t363 = 0.1e1 / t365 ^ 2;
	t342 = t350 * t363 + 0.1e1;
	t362 = 0.1e1 / t365;
	t469 = t403 * t405;
	t470 = t402 * t406;
	t479 = t396 * t398;
	t420 = -(-t399 * t469 - t470) * t395 + t403 * t479;
	t431 = -t399 * t470 - t469;
	t457 = t400 * t396 * t402;
	t356 = t457 * t465 + (qJD(2) * t420 - t431 * t465) * t397;
	t491 = t356 * t363;
	t490 = t362 * t491;
	t492 = t512 * t363;
	t500 = (t323 * t492 - t350 * t490) / t342 ^ 2;
	t508 = -0.2e1 * t500;
	t417 = t396 * t453 - t399 * t428;
	t429 = t445 - t466;
	t372 = t402 * t417 - t405 * t429;
	t343 = atan2(t512, t365);
	t338 = sin(t343);
	t339 = cos(t343);
	t318 = t338 * t512 + t339 * t365;
	t315 = 0.1e1 / t318;
	t401 = sin(qJ(4));
	t404 = cos(qJ(4));
	t483 = t429 * t402;
	t371 = t405 * t417 + t483;
	t418 = -t396 * t428 - t399 * t453;
	t415 = t418 * t395;
	t414 = t371 * t398 - t415;
	t337 = t372 * t404 + t401 * t414;
	t326 = 0.1e1 / t337;
	t316 = 0.1e1 / t318 ^ 2;
	t327 = 0.1e1 / t337 ^ 2;
	t354 = t371 * t395 + t398 * t418;
	t351 = t354 ^ 2;
	t312 = t316 * t351 + 0.1e1;
	t378 = qJD(1) * t387 + qJD(2) * t428;
	t377 = t505 * qJD(1) + t429 * qJD(2);
	t451 = qJD(1) * t476;
	t426 = t377 * t399 + t396 * t451;
	t329 = -t372 * qJD(3) + t378 * t402 + t426 * t405;
	t427 = -t377 * t396 + t399 * t451;
	t322 = t329 * t395 - t398 * t427;
	t497 = t322 * t316;
	t340 = 0.1e1 / t342;
	t436 = t323 * t362 - t491 * t512;
	t306 = t436 * t340;
	t442 = -t338 * t365 + t339 * t512;
	t301 = t306 * t442 + t338 * t323 + t339 * t356;
	t502 = t301 * t315 * t316;
	t503 = (-t351 * t502 + t354 * t497) / t312 ^ 2;
	t330 = qJD(3) * t483 + t426 * t402 + (qJD(3) * t417 - t378) * t405;
	t419 = t329 * t398 + t395 * t427;
	t313 = qJD(4) * t337 + t330 * t401 - t404 * t419;
	t474 = t398 * t404;
	t488 = t372 * t401;
	t336 = -t371 * t474 + t404 * t415 + t488;
	t325 = t336 ^ 2;
	t321 = t325 * t327 + 0.1e1;
	t496 = t327 * t336;
	t314 = t330 * t404 + t419 * t401 + (t404 * t414 - t488) * qJD(4);
	t499 = t314 * t326 * t327;
	t501 = (t313 * t496 - t325 * t499) / t321 ^ 2;
	t498 = t316 * t354;
	t495 = t338 * t354;
	t494 = t339 * t354;
	t493 = t512 * t362;
	t446 = t402 * t456 - t484;
	t370 = t402 * t506 + t446;
	t489 = t370 * t401;
	t473 = t399 * t402;
	t375 = -t405 * t428 + t429 * t473;
	t487 = t375 * t401;
	t481 = t395 * t401;
	t480 = t395 * t404;
	t475 = t398 * t401;
	t464 = -0.2e1 * t503;
	t463 = 0.2e1 * t503;
	t462 = -0.2e1 * t502;
	t461 = 0.2e1 * t501;
	t460 = 0.2e1 * t500;
	t459 = t512 * t490;
	t458 = t396 * t480;
	t449 = t362 * t508;
	t448 = 0.2e1 * t336 * t499;
	t447 = t354 * t462;
	t441 = t369 * t398 + t385 * t395;
	t437 = t505 * t402;
	t357 = (-t387 * t472 + t437) * t395 - t387 * t479;
	t376 = t420 * t397;
	t435 = -t357 * t362 + t376 * t492;
	t368 = t399 * t437 + t446;
	t384 = t397 * t431 - t457;
	t434 = t362 * t368 + t384 * t492;
	t348 = t371 * t401 + t372 * t474;
	t349 = t371 * t404 - t372 * t475;
	t374 = t402 * t428 + t429 * t472;
	t433 = -t395 * t396 * t429 + t374 * t398;
	t430 = t399 * t471 - t468;
	t425 = t338 + (t339 * t493 - t338) * t340;
	t335 = t370 * t404 + t401 * t441;
	t347 = t375 * t404 + t401 * t433;
	t361 = -t400 * t450 + (qJD(2) * t430 - qJD(3) * t432) * t397;
	t359 = (-t430 * t465 + (t395 * t432 + t398 * t477) * qJD(2)) * t397;
	t358 = -t374 * t395 - t429 * t479;
	t346 = -t404 * t433 + t487;
	t345 = qJD(3) * t374 + t377 * t405 + t378 * t473;
	t344 = -qJD(3) * t375 - t377 * t402 + t378 * t472;
	t334 = -t404 * t441 + t489;
	t332 = -t511 * qJD(3) + t423 * t405 + t486;
	t324 = (-t380 * t472 + t379 * t402 + (t387 * t473 + t405 * t505) * qJD(3)) * t395 - t380 * t479;
	t319 = 0.1e1 / t321;
	t310 = 0.1e1 / t312;
	t308 = t434 * t395 * t340;
	t307 = t435 * t340;
	t305 = t425 * t354;
	t303 = (t338 * t368 - t339 * t384) * t395 + t442 * t308;
	t302 = -t307 * t442 + t338 * t357 + t339 * t376;
	t300 = (t434 * t508 + (-0.2e1 * t384 * t459 + t509 * t362 + (t323 * t384 - t356 * t368 + t361 * t512) * t363) * t340) * t395;
	t299 = t435 * t460 + (0.2e1 * t376 * t459 + t324 * t362 + (-t323 * t376 - t356 * t357 - t359 * t512) * t363) * t340;
	t1 = [t354 * t449 + (t322 * t362 - t354 * t491) * t340, t299, t300, 0, 0, 0; t512 * t315 * t464 + ((-t332 * t395 - t510) * t315 + (-t301 * t512 + t305 * t322) * t316) * t310 + ((t305 * t462 + t425 * t497) * t310 + (t305 * t464 + ((-t306 * t340 * t493 + t460) * t495 + (t512 * t449 + t306 + (-t306 + t436) * t340) * t494) * t310) * t316) * t354, (-t302 * t498 - t315 * t358) * t463 + ((-t344 * t395 - t378 * t479) * t315 + t302 * t447 + (-t358 * t301 + t302 * t322 + (t299 * t512 - t307 * t323 + t359 + (t307 * t365 + t357) * t306) * t494 + (-t299 * t365 + t307 * t356 + t324 + (t307 * t512 - t376) * t306) * t495) * t316) * t310, (-t315 * t372 * t395 - t303 * t498) * t463 + ((t442 * t300 + (-t306 * t318 + t323 * t339 - t338 * t356) * t308) * t498 + (t447 + t497) * t303 + (t330 * t315 + (-t372 * t301 + (t509 * t338 - t339 * t361 + (t338 * t384 + t339 * t368) * t306) * t354) * t316) * t395) * t310, 0, 0, 0; (-t326 * t334 + t335 * t496) * t461 + ((-t332 * t474 + t401 * t509 + t424 * t480) * t326 + t335 * t448 + (-t334 * t314 - (t332 * t475 + t404 * t509 - t424 * t481) * t336 - t335 * t313) * t327 + (t335 * t326 - (t369 * t474 + t385 * t480 - t489) * t496) * qJD(4)) * t319, (-t326 * t346 + t347 * t496) * t461 + ((-t344 * t474 + t345 * t401 + t378 * t458) * t326 + t347 * t448 + (-t346 * t314 - (-t378 * t396 * t481 + t344 * t475 + t345 * t404) * t336 - t347 * t313) * t327 + (t347 * t326 - (t374 * t474 - t429 * t458 - t487) * t496) * qJD(4)) * t319, (-t326 * t348 + t349 * t496) * t461 + ((qJD(4) * t349 + t329 * t401 + t330 * t474) * t326 + t349 * t448 + (-t348 * t314 - (-qJD(4) * t348 + t329 * t404 - t330 * t475) * t336 - t349 * t313) * t327) * t319, -0.2e1 * t501 + 0.2e1 * (t313 * t327 * t319 + (-t319 * t499 - t327 * t501) * t336) * t336, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:57
	% EndTime: 2019-10-10 13:35:08
	% DurationCPUTime: 11.34s
	% Computational Cost: add. (33277->290), mult. (101676->518), div. (962->12), fcn. (127596->19), ass. (0->218)
	t695 = sin(qJ(2));
	t696 = sin(qJ(1));
	t554 = t696 * t695;
	t563 = cos(qJ(2));
	t694 = cos(pkin(6));
	t641 = t694 * t695;
	t621 = t696 * t641;
	t698 = cos(qJ(1));
	t642 = t694 * t698;
	t539 = -qJD(1) * t621 - qJD(2) * t554 + (t698 * qJD(1) + qJD(2) * t642) * t563;
	t560 = sin(qJ(3));
	t562 = cos(qJ(3));
	t619 = -t563 * t642 + t554;
	t556 = sin(pkin(6));
	t692 = sin(pkin(7));
	t652 = t556 * t692;
	t633 = t698 * t652;
	t693 = cos(pkin(7));
	t593 = t619 * t693 + t633;
	t658 = t696 * t563;
	t609 = t694 * t658 + t698 * t695;
	t610 = t698 * t641 + t658;
	t538 = t609 * qJD(1) + t610 * qJD(2);
	t630 = t696 * t652;
	t604 = qJD(1) * t630 - t538 * t693;
	t493 = (t610 * qJD(3) - t604) * t560 + (qJD(3) * t593 - t539) * t562;
	t559 = sin(qJ(4));
	t529 = t593 * t560 - t610 * t562;
	t571 = qJD(3) * t529 - t539 * t560 + t604 * t562;
	t557 = cos(pkin(8));
	t697 = cos(qJ(4));
	t660 = t557 * t697;
	t723 = t493 * t559 + t571 * t660;
	t528 = t610 * t560 + t593 * t562;
	t555 = sin(pkin(8));
	t653 = t556 * t693;
	t634 = t698 * t653;
	t702 = t619 * t692 - t634;
	t592 = t702 * t555;
	t498 = t529 * t697 + (t528 * t557 - t592) * t559;
	t722 = t529 * t559;
	t718 = t493 * t697;
	t576 = t528 * t697;
	t591 = t697 * t592;
	t494 = t557 * t576 - t591 - t722;
	t648 = t563 * t693;
	t616 = t560 * t648 + t695 * t562;
	t637 = t694 * t692;
	t543 = t616 * t556 + t560 * t637;
	t548 = -t563 * t652 + t694 * t693;
	t615 = -t695 * t560 + t562 * t648;
	t542 = t615 * t556 + t562 * t637;
	t659 = t697 * t542;
	t661 = t555 * t697;
	t602 = -t543 * t559 + t548 * t661 + t557 * t659;
	t474 = atan2(-t494, -t602);
	t465 = sin(t474);
	t466 = cos(t474);
	t448 = -t465 * t494 - t466 * t602;
	t446 = 0.1e1 / t448 ^ 2;
	t590 = -t609 * t693 + t630;
	t608 = -t698 * t563 + t621;
	t530 = t590 * t560 - t562 * t608;
	t677 = t608 * t560;
	t585 = -t590 * t562 - t677;
	t581 = t585 * t697;
	t631 = t696 * t653;
	t589 = t609 * t692 + t631;
	t588 = t589 * t555;
	t587 = t697 * t588;
	t499 = t530 * t559 + t557 * t581 - t587;
	t489 = t499 ^ 2;
	t444 = t446 * t489 + 0.1e1;
	t537 = t610 * qJD(1) + t609 * qJD(2);
	t536 = qJD(1) * t619 + t608 * qJD(2);
	t620 = qJD(1) * t633;
	t605 = t536 * t693 + t620;
	t490 = qJD(3) * t677 + t605 * t560 + (t590 * qJD(3) - t537) * t562;
	t607 = qJD(1) * t634 - t536 * t692;
	t599 = t555 * t607;
	t655 = qJD(4) * t697;
	t643 = t530 * t655;
	t672 = qJD(4) * t559;
	t707 = -t530 * qJD(3) + t537 * t560;
	t574 = t605 * t562 + t707;
	t583 = t585 * t559;
	t709 = -qJD(4) * t583 - t574 * t697;
	t449 = t490 * t559 + t557 * t709 + t588 * t672 - t697 * t599 + t643;
	t684 = t449 * t446;
	t445 = 0.1e1 / t448;
	t488 = t494 ^ 2;
	t510 = 0.1e1 / t602 ^ 2;
	t473 = t488 * t510 + 0.1e1;
	t471 = 0.1e1 / t473;
	t577 = t528 * t559;
	t606 = qJD(1) * t631 + t538 * t692;
	t598 = t555 * t606;
	t451 = -t557 * qJD(4) * t577 - t529 * t655 + t592 * t672 - t697 * t598 - t723;
	t513 = t543 * t697 + (t542 * t557 + t548 * t555) * t559;
	t640 = t693 * t695;
	t613 = -t560 * t563 - t562 * t640;
	t629 = qJD(3) * t637;
	t523 = -t560 * t629 + (t613 * qJD(2) - t616 * qJD(3)) * t556;
	t614 = t560 * t640 - t562 * t563;
	t524 = t562 * t629 + (-t614 * qJD(2) + t615 * qJD(3)) * t556;
	t622 = t555 * t695 * t652;
	t617 = t697 * t622;
	t475 = -qJD(2) * t617 + t513 * qJD(4) - t523 * t660 + t524 * t559;
	t509 = 0.1e1 / t602;
	t680 = t494 * t510;
	t628 = t451 * t509 + t475 * t680;
	t435 = t628 * t471;
	t636 = t465 * t602 - t466 * t494;
	t429 = t636 * t435 - t451 * t465 + t466 * t475;
	t715 = t429 * t446;
	t690 = t445 * t715;
	t670 = 0.2e1 * (-t489 * t690 + t499 * t684) / t444 ^ 2;
	t714 = t475 * t510;
	t710 = -qJD(4) * t576 + t571 * t559;
	t708 = -qJD(4) * t581 + t574 * t559;
	t597 = t610 * t693;
	t586 = t619 * t560 - t562 * t597;
	t654 = t555 * t692;
	t706 = t557 * t586 + t610 * t654;
	t442 = 0.1e1 / t444;
	t705 = t442 * t715 + t445 * t670;
	t699 = 0.2e1 * t499;
	t646 = t690 * t699;
	t685 = t446 * t499;
	t704 = t670 * t685 + (t646 - t684) * t442;
	t500 = t530 * t697 + (-t585 * t557 + t588) * t559;
	t516 = t585 * t555 + t589 * t557;
	t558 = sin(qJ(5));
	t561 = cos(qJ(5));
	t470 = t500 * t561 + t516 * t558;
	t462 = 0.1e1 / t470;
	t463 = 0.1e1 / t470 ^ 2;
	t700 = -0.2e1 * t494;
	t656 = t530 * t672;
	t450 = qJD(4) * t587 + t490 * t697 + t557 * t708 + t559 * t599 - t656;
	t649 = t562 * t693;
	t477 = t607 * t557 + (-t536 * t649 - t562 * t620 - t707) * t555;
	t440 = t470 * qJD(5) + t450 * t558 - t477 * t561;
	t469 = t500 * t558 - t516 * t561;
	t461 = t469 ^ 2;
	t456 = t461 * t463 + 0.1e1;
	t683 = t463 * t469;
	t671 = qJD(5) * t469;
	t441 = t450 * t561 + t477 * t558 - t671;
	t687 = t441 * t462 * t463;
	t689 = (t440 * t683 - t461 * t687) / t456 ^ 2;
	t682 = t509 * t714;
	t688 = (t451 * t680 + t488 * t682) / t473 ^ 2;
	t686 = t442 * t445;
	t681 = t494 * t509;
	t675 = t555 * t558;
	t674 = t555 * t561;
	t673 = t557 * t559;
	t669 = -0.2e1 * t689;
	t668 = 0.2e1 * t689;
	t667 = -0.2e1 * t688;
	t665 = t509 * t688;
	t663 = t442 * t685;
	t662 = t469 * t687;
	t657 = t529 * t672;
	t651 = t557 * t692;
	t650 = t560 * t693;
	t645 = 0.2e1 * t662;
	t644 = t682 * t700;
	t515 = -t528 * t555 - t557 * t702;
	t468 = t498 * t561 + t515 * t558;
	t467 = t498 * t558 - t515 * t561;
	t534 = t609 * t560 + t608 * t649;
	t535 = -t609 * t562 + t608 * t650;
	t505 = t535 * t697 + (t534 * t557 - t608 * t654) * t559;
	t519 = -t534 * t555 - t608 * t651;
	t482 = t505 * t561 + t519 * t558;
	t481 = t505 * t558 - t519 * t561;
	t635 = t697 * t654;
	t627 = -t558 * t462 + t561 * t683;
	t626 = -t498 * t509 + t513 * t680;
	t533 = -t560 * t597 - t619 * t562;
	t503 = t533 * t559 - t697 * t706;
	t545 = t613 * t556;
	t546 = t614 * t556;
	t518 = -t545 * t660 - t546 * t559 - t617;
	t625 = t503 * t509 + t518 * t680;
	t506 = -t529 * t660 - t577;
	t517 = t542 * t559 + t543 * t660;
	t624 = t506 * t509 + t517 * t680;
	t508 = -t530 * t673 - t581;
	t623 = -t508 * t558 + t530 * t674;
	t484 = t508 * t561 + t530 * t675;
	t618 = -t465 + (-t466 * t681 + t465) * t471;
	t603 = t528 * t660 - t661 * t702 - t722;
	t596 = t534 * t660 - t535 * t559 - t608 * t635;
	t502 = t534 * qJD(3) + t536 * t562 + t537 * t650;
	t501 = -t535 * qJD(3) - t536 * t560 + t537 * t649;
	t485 = -t501 * t555 - t537 * t651;
	t480 = -t546 * t655 + (t545 * t557 + t622) * t672 + ((-t616 * qJD(2) + t613 * qJD(3)) * t559 - (-t615 * qJD(2) + t614 * qJD(3)) * t660 - qJD(2) * t563 * t635) * t556;
	t479 = t524 * t660 + t523 * t559 + (-t543 * t673 + t659) * qJD(4);
	t478 = t555 * t571 - t557 * t606;
	t476 = t524 * t697 + (qJD(2) * t622 + t523 * t557) * t559 + t602 * qJD(4);
	t460 = (t586 * qJD(3) - t538 * t562 - t539 * t650) * t559 + t533 * t655 - (-t533 * qJD(3) + t538 * t560 - t539 * t649) * t660 - t539 * t635 + t706 * t672;
	t459 = t502 * t697 + (t501 * t557 - t537 * t654) * t559 + t596 * qJD(4);
	t458 = -t493 * t660 + t557 * t657 + t710;
	t457 = -t490 * t673 - t557 * t643 - t709;
	t454 = 0.1e1 / t456;
	t453 = t718 + (-t557 * t571 - t598) * t559 + t603 * qJD(4);
	t452 = qJD(4) * t591 + t557 * t710 + t559 * t598 + t657 - t718;
	t439 = t625 * t471;
	t438 = t624 * t471;
	t437 = t626 * t471;
	t430 = t636 * t437 + t465 * t498 + t466 * t513;
	t428 = t625 * t667 + (-t518 * t644 + t460 * t509 + (t451 * t518 + t475 * t503 + t480 * t494) * t510) * t471;
	t427 = t624 * t667 + (-t517 * t644 + t458 * t509 + (t451 * t517 + t475 * t506 + t479 * t494) * t510) * t471;
	t425 = t626 * t667 + (-t513 * t644 + t452 * t509 + (t451 * t513 - t475 * t498 + t476 * t494) * t510) * t471;
	t1 = [-t665 * t699 + (t449 * t509 + t499 * t714) * t471, t428, t427, t425, 0, 0; (t498 * qJD(4) + t606 * t661 + t723) * t686 - (t618 * t449 + ((t435 * t471 * t681 + t667) * t465 + (-t665 * t700 - t435 + (t435 - t628) * t471) * t466) * t499) * t663 + t705 * t603 + t704 * t618 * t499, (t505 * qJD(4) - t501 * t660 + t502 * t559 + t537 * t635) * t686 - ((-t428 * t494 - t439 * t451 + t480 + (t439 * t602 - t503) * t435) * t466 + (t428 * t602 - t439 * t475 - t460 + (t439 * t494 - t518) * t435) * t465) * t663 + t705 * t596 + t704 * (t636 * t439 - t465 * t503 + t466 * t518), (t490 * t660 - t557 * t656 + t708) * t686 - ((-t427 * t494 - t438 * t451 + t479 + (t438 * t602 - t506) * t435) * t466 + (t427 * t602 - t438 * t475 - t458 + (t438 * t494 - t517) * t435) * t465) * t663 - t705 * (t530 * t660 - t583) + t704 * (t636 * t438 - t465 * t506 + t466 * t517), (t430 * t685 - t445 * t500) * t670 + (t430 * t646 + t450 * t445 + (-t500 * t429 - t430 * t449 + (-(-t425 * t494 - t437 * t451 + t476 + (t437 * t602 + t498) * t435) * t466 - (t425 * t602 - t437 * t475 - t452 + (t437 * t494 - t513) * t435) * t465) * t499) * t446) * t442, 0, 0; (-t462 * t467 + t468 * t683) * t668 + ((t468 * qJD(5) + t453 * t558 - t478 * t561) * t462 + t468 * t645 + (-t467 * t441 - (-t467 * qJD(5) + t453 * t561 + t478 * t558) * t469 - t468 * t440) * t463) * t454, (-t462 * t481 + t482 * t683) * t668 + ((t482 * qJD(5) + t459 * t558 - t485 * t561) * t462 + t482 * t645 + (-t481 * t441 - (-t481 * qJD(5) + t459 * t561 + t485 * t558) * t469 - t482 * t440) * t463) * t454, (t462 * t623 + t484 * t683) * t668 + ((qJD(5) * t484 + t457 * t558 - t490 * t674) * t462 + t484 * t645 + (t623 * t441 - (qJD(5) * t623 + t457 * t561 + t490 * t675) * t469 - t484 * t440) * t463) * t454, t627 * t499 * t669 + (t627 * t449 + ((-qJD(5) * t462 - 0.2e1 * t662) * t561 + (t440 * t561 + (t441 - t671) * t558) * t463) * t499) * t454, t669 + 0.2e1 * (t440 * t463 * t454 + (-t454 * t687 - t463 * t689) * t469) * t469, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:35:00
	% EndTime: 2019-10-10 13:35:20
	% DurationCPUTime: 21.44s
	% Computational Cost: add. (73363->375), mult. (219258->677), div. (1240->12), fcn. (277561->21), ass. (0->266)
	t722 = sin(qJ(3));
	t873 = sin(pkin(7));
	t874 = sin(pkin(6));
	t819 = t874 * t873;
	t881 = cos(qJ(1));
	t800 = t881 * t819;
	t711 = t722 * t800;
	t876 = cos(pkin(6));
	t880 = cos(qJ(2));
	t828 = t876 * t880;
	t877 = sin(qJ(2));
	t878 = sin(qJ(1));
	t788 = -t881 * t828 + t878 * t877;
	t875 = cos(pkin(7));
	t891 = t788 * t875;
	t827 = t876 * t877;
	t777 = t881 * t827 + t878 * t880;
	t879 = cos(qJ(3));
	t892 = t777 * t879;
	t688 = t722 * t891 + t711 - t892;
	t721 = sin(qJ(4));
	t725 = cos(qJ(4));
	t717 = sin(pkin(8));
	t718 = cos(pkin(8));
	t820 = t875 * t874;
	t801 = t881 * t820;
	t757 = t788 * t873 - t801;
	t783 = t879 * t800;
	t769 = t879 * t891;
	t884 = -t777 * t722 - t769;
	t903 = t783 - t884;
	t816 = -t757 * t717 + t718 * t903;
	t657 = t688 * t725 + t816 * t721;
	t720 = sin(qJ(5));
	t724 = cos(qJ(5));
	t740 = t717 * t903 + t757 * t718;
	t628 = t657 * t724 - t740 * t720;
	t776 = t878 * t828 + t881 * t877;
	t698 = t776 * qJD(1) + t777 * qJD(2);
	t796 = t878 * t820;
	t774 = qJD(1) * t796 + t698 * t873;
	t813 = -t878 * t827 + t881 * t880;
	t699 = t813 * qJD(1) - t788 * qJD(2);
	t795 = t878 * t819;
	t781 = t879 * t795;
	t826 = t875 * t879;
	t887 = qJD(1) * t781 + qJD(3) * (-t892 + (t891 + t800) * t722) - t698 * t826 - t699 * t722;
	t635 = t887 * t717 - t774 * t718;
	t913 = -t628 * qJD(5) + t635 * t724;
	t737 = t740 * t724;
	t627 = t657 * t720 + t737;
	t734 = t774 * t717 + t887 * t718;
	t912 = t657 * qJD(4) + t734 * t725;
	t882 = -t688 * t721 + t816 * t725;
	t911 = -qJD(4) * t882 + t734 * t721;
	t910 = t635 * t720;
	t697 = t777 * qJD(1) + t776 * qJD(2);
	t751 = t788 * qJD(1) - t813 * qJD(2);
	t750 = t751 * t875;
	t765 = t776 * t875;
	t895 = t722 * (t765 - t795) - t813 * t879;
	t889 = qJD(1) * t783 + t895 * qJD(3) + t697 * t722 + t879 * t750;
	t799 = t880 * t820;
	t824 = t874 * t877;
	t897 = t722 * t824 - t879 * t799;
	t803 = t879 * t824;
	t821 = t876 * t873;
	t702 = (t799 + t821) * t722 + t803;
	t701 = t879 * t821 - t897;
	t798 = t880 * t819;
	t708 = t876 * t875 - t798;
	t815 = t701 * t718 + t708 * t717;
	t671 = -t702 * t721 + t815 * t725;
	t802 = t877 * t820;
	t825 = t880 * t874;
	t762 = t722 * t802 - t879 * t825;
	t683 = -t762 * qJD(2) + t701 * qJD(3);
	t704 = -t722 * t825 - t879 * t802;
	t682 = t704 * qJD(2) - t702 * qJD(3);
	t797 = t877 * t819;
	t789 = qJD(2) * t797;
	t775 = t682 * t718 + t717 * t789;
	t632 = t671 * qJD(4) + t683 * t725 + t775 * t721;
	t672 = t702 * t725 + t815 * t721;
	t685 = -t701 * t717 + t708 * t718;
	t648 = t672 * t724 + t685 * t720;
	t676 = -t682 * t717 + t718 * t789;
	t594 = t648 * qJD(5) + t632 * t720 - t676 * t724;
	t647 = t672 * t720 - t685 * t724;
	t645 = 0.1e1 / t647 ^ 2;
	t894 = t594 * t645;
	t644 = 0.1e1 / t647;
	t859 = t627 * t645;
	t807 = t644 * t882 - t671 * t859;
	t893 = t720 * t807;
	t743 = qJD(1) * t801 - t751 * t873;
	t890 = t717 * t743 + t718 * t889;
	t749 = t813 * t722 + t879 * t765 - t781;
	t747 = t749 * t725;
	t754 = t776 * t873 + t796;
	t753 = t754 * t717;
	t888 = -t718 * t747 + t725 * t753;
	t764 = t777 * t875;
	t692 = t788 * t722 - t879 * t764;
	t763 = t777 * t873;
	t886 = t692 * t718 + t717 * t763;
	t786 = t813 * t875;
	t695 = -t722 * t786 - t776 * t879;
	t694 = t776 * t722 - t879 * t786;
	t785 = t813 * t873;
	t772 = t694 * t718 + t717 * t785;
	t883 = -t695 * t721 + t772 * t725;
	t613 = atan2(t627, t647);
	t600 = sin(t613);
	t601 = cos(t613);
	t575 = t600 * t627 + t601 * t647;
	t572 = 0.1e1 / t575;
	t659 = -t895 * t725 + (-t749 * t718 + t753) * t721;
	t738 = t749 * t717 + t754 * t718;
	t630 = t659 * t724 + t738 * t720;
	t658 = -t721 * t895 - t888;
	t719 = sin(qJ(6));
	t723 = cos(qJ(6));
	t611 = t630 * t723 + t658 * t719;
	t603 = 0.1e1 / t611;
	t573 = 0.1e1 / t575 ^ 2;
	t604 = 0.1e1 / t611 ^ 2;
	t736 = t738 * t724;
	t629 = t659 * t720 - t736;
	t623 = t629 ^ 2;
	t571 = t573 * t623 + 0.1e1;
	t650 = qJD(1) * t711 - t749 * qJD(3) - t697 * t879 + t722 * t750;
	t845 = qJD(4) * t721;
	t589 = t888 * qJD(4) + t650 * t725 + t890 * t721 + t845 * t895;
	t732 = -t889 * t717 + t743 * t718;
	t576 = t630 * qJD(5) + t589 * t720 - t732 * t724;
	t866 = t573 * t629;
	t622 = t627 ^ 2;
	t612 = t622 * t645 + 0.1e1;
	t606 = 0.1e1 / t612;
	t773 = qJD(1) * t795 - t698 * t875;
	t823 = qJD(3) * t783 - t699 * t879;
	t651 = t884 * qJD(3) + t773 * t722 - t823;
	t591 = t651 * t725 + t911;
	t578 = t591 * t720 + t913;
	t812 = -t578 * t644 - t594 * t859;
	t561 = t812 * t606;
	t818 = -t600 * t647 + t601 * t627;
	t554 = t818 * t561 - t578 * t600 + t594 * t601;
	t574 = t572 * t573;
	t871 = t554 * t574;
	t872 = 0.2e1 * (t576 * t866 - t623 * t871) / t571 ^ 2;
	t843 = qJD(5) * t720;
	t577 = qJD(5) * t736 + t589 * t724 - t659 * t843 + t732 * t720;
	t588 = t659 * qJD(4) + t650 * t721 - t890 * t725;
	t563 = t611 * qJD(6) + t577 * t719 - t588 * t723;
	t610 = t630 * t719 - t658 * t723;
	t602 = t610 ^ 2;
	t583 = t602 * t604 + 0.1e1;
	t862 = t604 * t610;
	t841 = qJD(6) * t610;
	t564 = t577 * t723 + t588 * t719 - t841;
	t868 = t564 * t603 * t604;
	t870 = 0.2e1 * (t563 * t862 - t602 * t868) / t583 ^ 2;
	t865 = t644 * t894;
	t869 = 0.2e1 * (-t578 * t859 - t622 * t865) / t612 ^ 2;
	t867 = t573 * t576;
	t864 = t600 * t629;
	t863 = t601 * t629;
	t861 = t610 * t723;
	t860 = t627 * t644;
	t858 = t658 * t720;
	t857 = t658 * t724;
	t851 = t717 * t720;
	t850 = t717 * t724;
	t849 = t718 * t721;
	t848 = t718 * t725;
	t847 = t719 * t603;
	t842 = qJD(5) * t724;
	t840 = 0.2e1 * t574 * t629;
	t839 = t644 * t869;
	t838 = t573 * t864;
	t837 = t573 * t863;
	t836 = t610 * t868;
	t835 = t717 * t873;
	t834 = t718 * t873;
	t833 = t722 * t875;
	t832 = t554 * t840;
	t831 = 0.2e1 * t627 * t865;
	t830 = 0.2e1 * t836;
	t822 = qJD(6) * t857 + t589;
	t609 = t628 * t723 - t719 * t882;
	t608 = t628 * t719 + t723 * t882;
	t665 = t695 * t725 + t772 * t721;
	t680 = -t694 * t717 + t718 * t785;
	t638 = t665 * t724 + t680 * t720;
	t617 = t638 * t723 - t719 * t883;
	t616 = t638 * t719 + t723 * t883;
	t668 = t849 * t895 - t747;
	t641 = t668 * t724 - t851 * t895;
	t667 = -t749 * t721 - t848 * t895;
	t621 = t641 * t723 + t667 * t719;
	t620 = t641 * t719 - t667 * t723;
	t637 = t665 * t720 - t680 * t724;
	t811 = t604 * t861 - t847;
	t810 = t628 * t644 - t648 * t859;
	t693 = -t722 * t764 - t788 * t879;
	t663 = t693 * t725 + t886 * t721;
	t758 = -t692 * t717 + t718 * t763;
	t636 = t663 * t720 - t758 * t724;
	t780 = t704 * t718 + t717 * t797;
	t679 = t780 * t721 - t725 * t762;
	t696 = -t704 * t717 + t718 * t797;
	t669 = t679 * t720 - t696 * t724;
	t809 = -t636 * t644 - t669 * t859;
	t666 = t688 * t849 - t725 * t903;
	t639 = t666 * t720 + t688 * t850;
	t677 = t701 * t725 - t702 * t849;
	t670 = t677 * t720 - t702 * t850;
	t808 = -t639 * t644 - t670 * t859;
	t806 = -t668 * t720 - t850 * t895;
	t660 = -t695 * qJD(3) + t697 * t826 - t751 * t722;
	t793 = -t660 * t718 + t697 * t835;
	t792 = -t600 + (-t601 * t860 + t600) * t606;
	t790 = qJD(2) * t798;
	t784 = qJD(6) * t659 - t588 * t724 + t658 * t843;
	t691 = t897 * qJD(2) + t762 * qJD(3);
	t662 = -t693 * qJD(3) + t698 * t722 - t699 * t826;
	t661 = t694 * qJD(3) + t697 * t833 + t751 * t879;
	t653 = qJD(3) * t769 + (t777 * qJD(3) - t773) * t722 + t823;
	t642 = -t660 * t717 - t697 * t834;
	t631 = -t672 * qJD(4) - t683 * t721 + t775 * t725;
	t619 = t659 * t719 - t723 * t857;
	t618 = -t659 * t723 - t719 * t857;
	t615 = (t679 * qJD(5) + t691 * t717 - t718 * t790) * t724 + ((t704 * qJD(3) + (-t722 * t799 - t803) * qJD(2)) * t725 + t691 * t849 + t717 * t721 * t790 + t696 * qJD(5) + (t721 * t762 + t780 * t725) * qJD(4)) * t720;
	t614 = (-t683 * t849 + t682 * t725 + (-t701 * t721 - t702 * t848) * qJD(4)) * t720 - t683 * t850 + (t677 * t724 + t702 * t851) * qJD(5);
	t599 = qJD(4) * t883 + t661 * t725 - t793 * t721;
	t598 = t665 * qJD(4) + t661 * t721 + t793 * t725;
	t597 = -t667 * qJD(4) - t650 * t849 + t889 * t725;
	t596 = t668 * qJD(4) + t650 * t848 + t889 * t721;
	t595 = -t647 * qJD(5) + t632 * t724 + t676 * t720;
	t593 = t653 * t725 - t911;
	t592 = t653 * t721 + t912;
	t590 = -t651 * t721 + t912;
	t587 = (-t651 * t849 + (t688 * t848 + t721 * t903) * qJD(4) + t887 * t725) * t720 - t651 * t850 + (t666 * t724 - t688 * t851) * qJD(5);
	t586 = t806 * qJD(5) + t597 * t724 + t650 * t851;
	t585 = (t699 * t721 * t835 + t662 * t849 - t693 * t845 + (t692 * qJD(3) + t886 * qJD(4) - t698 * t879 - t699 * t833) * t725) * t720 + t663 * t842 - (-t662 * t717 + t699 * t834) * t724 + t758 * t843;
	t584 = -t637 * qJD(5) + t599 * t724 + t642 * t720;
	t581 = 0.1e1 / t583;
	t580 = -t627 * qJD(5) + t593 * t724 + t910;
	t579 = qJD(5) * t737 + t591 * t724 + t657 * t843 - t910;
	t569 = 0.1e1 / t571;
	t568 = t606 * t893;
	t567 = t808 * t606;
	t566 = t809 * t606;
	t565 = t810 * t606;
	t560 = t792 * t629;
	t558 = (t600 * t882 + t601 * t671) * t720 + t818 * t568;
	t557 = t818 * t567 - t600 * t639 + t601 * t670;
	t556 = t818 * t566 - t600 * t636 + t601 * t669;
	t555 = t818 * t565 + t600 * t628 + t601 * t648;
	t553 = -t808 * t869 + (t670 * t831 - t587 * t644 + (t578 * t670 + t594 * t639 - t614 * t627) * t645) * t606;
	t552 = -t809 * t869 + (t669 * t831 - t585 * t644 + (t578 * t669 + t594 * t636 - t615 * t627) * t645) * t606;
	t550 = -t810 * t869 + (t648 * t831 - t579 * t644 + (t578 * t648 - t594 * t628 - t595 * t627) * t645) * t606;
	t549 = -t869 * t893 + (t807 * t842 + (t671 * t831 - t590 * t644 + (t578 * t671 - t594 * t882 - t627 * t631) * t645) * t720) * t606;
	t1 = [t629 * t839 + (-t576 * t644 + t629 * t894) * t606, t552, t553, t549, t550, 0; -t627 * t572 * t872 + ((t593 * t720 - t913) * t572 + (-t627 * t554 - t560 * t576) * t573) * t569 + (t560 * t573 * t872 + (0.2e1 * t560 * t871 - (t561 * t606 * t860 - t869) * t838 - (t627 * t839 - t561 + (t561 - t812) * t606) * t837 - t792 * t867) * t569) * t629, (t556 * t866 - t572 * t637) * t872 + ((t638 * qJD(5) + t599 * t720 - t642 * t724) * t572 + t556 * t832 + (-t637 * t554 - t556 * t576 - (t552 * t627 - t566 * t578 + t615 + (-t566 * t647 - t636) * t561) * t863 - (-t552 * t647 - t566 * t594 - t585 + (-t566 * t627 - t669) * t561) * t864) * t573) * t569, (t557 * t866 + t572 * t806) * t872 + ((t641 * qJD(5) + t597 * t720 - t650 * t850) * t572 + t557 * t832 + (t806 * t554 - t557 * t576 - (t553 * t627 - t567 * t578 + t614 + (-t567 * t647 - t639) * t561) * t863 - (-t553 * t647 - t567 * t594 - t587 + (-t567 * t627 - t670) * t561) * t864) * t573) * t569, (t558 * t866 + t572 * t858) * t872 + (-t558 * t867 + (-t588 * t720 - t658 * t842) * t572 + (t558 * t840 + t573 * t858) * t554 - (t671 * t842 + t549 * t627 - t568 * t578 + t631 * t720 + (-t568 * t647 + t720 * t882) * t561) * t837 - (t882 * t842 - t549 * t647 - t568 * t594 - t590 * t720 + (-t568 * t627 - t671 * t720) * t561) * t838) * t569, (t555 * t866 - t572 * t630) * t872 + (t555 * t832 + t577 * t572 + (-t630 * t554 - t555 * t576 - (t550 * t627 - t565 * t578 + t595 + (-t565 * t647 + t628) * t561) * t863 - (-t550 * t647 - t565 * t594 - t579 + (-t565 * t627 - t648) * t561) * t864) * t573) * t569, 0; (-t603 * t608 + t609 * t862) * t870 + ((t609 * qJD(6) + t580 * t719 - t592 * t723) * t603 + t609 * t830 + (-t608 * t564 - (-t608 * qJD(6) + t580 * t723 + t592 * t719) * t610 - t609 * t563) * t604) * t581, (-t603 * t616 + t617 * t862) * t870 + ((t617 * qJD(6) + t584 * t719 - t598 * t723) * t603 + t617 * t830 + (-t616 * t564 - (-t616 * qJD(6) + t584 * t723 + t598 * t719) * t610 - t617 * t563) * t604) * t581, (-t603 * t620 + t621 * t862) * t870 + ((t621 * qJD(6) + t586 * t719 - t596 * t723) * t603 + t621 * t830 + (-t620 * t564 - (-t620 * qJD(6) + t586 * t723 + t596 * t719) * t610 - t621 * t563) * t604) * t581, (-t603 * t618 + t619 * t862) * t870 + (t619 * t830 - t822 * t603 * t723 + t784 * t847 + (-t610 * t719 * t822 - t619 * t563 - t618 * t564 - t784 * t861) * t604) * t581, -t811 * t629 * t870 + (t811 * t576 + ((-qJD(6) * t603 - 0.2e1 * t836) * t723 + (t563 * t723 + (t564 - t841) * t719) * t604) * t629) * t581, -t870 + (0.2e1 * t563 * t604 * t581 + (-0.2e1 * t581 * t868 - t604 * t870) * t610) * t610;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end