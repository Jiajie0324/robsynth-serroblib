% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox (ehem. IRT-Maple-Toolbox)
% Datum: 2018-11-23 11:28
% Revision: 76f9d5e39f14dc242b53c0d9d3d9db48bd8f37c0
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2018-11-23 11:16:39
% EndTime: 2018-11-23 11:19:02
% DurationCPUTime: 101.59s
% Computational Cost: add. (151571->1441), mult. (423488->1985), div. (0->0), fcn. (362042->30), ass. (0->611)
t652 = cos(qJ(2));
t973 = cos(pkin(6));
t906 = pkin(1) * t973;
t631 = t652 * t906;
t618 = qJD(1) * t631;
t649 = sin(qJ(2));
t645 = sin(pkin(6));
t972 = cos(pkin(7));
t783 = t645 * (-pkin(11) * t972 - pkin(10));
t763 = t649 * t783;
t498 = qJD(1) * t763 + t618;
t630 = t649 * t906;
t710 = t652 * t783 - t630;
t499 = t710 * qJD(1);
t970 = sin(pkin(7));
t877 = t652 * t970;
t758 = pkin(2) * t649 - pkin(11) * t877;
t928 = qJD(1) * t645;
t543 = t758 * t928;
t997 = cos(qJ(3));
t844 = t972 * t997;
t795 = qJD(3) * t844;
t994 = sin(qJ(3));
t840 = t970 * t994;
t843 = t972 * t994;
t1058 = pkin(2) * t795 - t997 * t498 - t499 * t843 - t543 * t840;
t523 = (-t649 * t843 + t652 * t997) * t928;
t841 = t970 * t997;
t794 = qJD(3) * t841;
t756 = t794 - t523;
t971 = cos(pkin(8));
t819 = t971 * t970;
t762 = t994 * t819;
t809 = pkin(11) * t840;
t707 = -pkin(12) * t762 - t809;
t729 = t649 * t844 + t652 * t994;
t522 = t729 * t928;
t644 = sin(pkin(8));
t839 = t970 * t928;
t800 = t649 * t839;
t719 = -t522 * t971 + t644 * t800;
t1057 = -pkin(12) * t719 + qJD(3) * t707 + t1058;
t328 = -t498 * t994 + t499 * t844 + t543 * t841;
t572 = pkin(2) * t843 + pkin(11) * t841;
t761 = t997 * t819;
t905 = pkin(12) * t971;
t1056 = pkin(3) * t800 - t523 * t905 + t328 - (-pkin(12) * t761 - t572) * qJD(3);
t407 = -t499 * t970 + t972 * t543;
t993 = pkin(12) * t644;
t313 = t522 * pkin(3) - t523 * t993 + t407;
t802 = t644 * t841;
t542 = (pkin(3) * t840 - pkin(12) * t802) * qJD(3);
t1055 = -t313 + t542;
t648 = sin(qJ(4));
t714 = t972 * t644 + t761;
t996 = cos(qJ(4));
t486 = t648 * t840 - t714 * t996;
t938 = qJD(4) * t486 - t756 * t996 + (qJD(3) * t762 + t719) * t648;
t488 = t648 * t714 + t840 * t996;
t879 = t649 * t970;
t904 = t644 * t996;
t753 = t645 * t879 * t904;
t842 = t971 * t996;
t937 = qJD(1) * t753 - t522 * t842 - t523 * t648 + (t648 * t841 + t762 * t996) * qJD(3) + t488 * qJD(4);
t949 = t645 * t649;
t773 = t819 * t949;
t440 = -qJD(1) * t773 - t522 * t644;
t793 = qJD(3) * t840;
t743 = t644 * t793 + t440;
t478 = pkin(12) * t714 + t572;
t629 = pkin(2) * t844;
t496 = pkin(3) * t972 + t629 + t707;
t899 = t970 * pkin(2);
t533 = -pkin(3) * t841 - t840 * t993 - t899;
t796 = qJD(4) * t842;
t894 = qJD(4) * t996;
t856 = t644 * t894;
t880 = t648 * t971;
t926 = qJD(4) * t648;
t951 = t644 * t648;
t1013 = t1055 * t951 - t1056 * t880 + t1057 * t996 - t478 * t926 + t496 * t796 + t533 * t856;
t936 = t1055 * t971 + t1056 * t644;
t653 = cos(qJ(1));
t913 = pkin(6) + qJ(2);
t835 = cos(t913) / 0.2e1;
t914 = pkin(6) - qJ(2);
t872 = cos(t914);
t736 = t872 / 0.2e1 + t835;
t995 = sin(qJ(1));
t535 = t649 * t995 - t653 * t736;
t832 = sin(t913) / 0.2e1;
t869 = sin(t914);
t586 = t832 - t869 / 0.2e1;
t536 = t653 * t586 + t652 * t995;
t911 = pkin(7) + qJ(3);
t831 = sin(t911) / 0.2e1;
t912 = pkin(7) - qJ(3);
t868 = sin(t912);
t732 = t831 + t868 / 0.2e1;
t722 = t645 * t732;
t834 = cos(t911) / 0.2e1;
t871 = cos(t912);
t735 = t871 / 0.2e1 + t834;
t361 = t535 * t735 + t536 * t994 + t653 * t722;
t881 = t645 * t972;
t738 = t535 * t970 - t653 * t881;
t299 = t361 * t644 + t738 * t971;
t647 = sin(qJ(5));
t651 = cos(qJ(5));
t585 = t831 - t868 / 0.2e1;
t588 = t834 - t871 / 0.2e1;
t947 = t645 * t653;
t359 = -t535 * t585 + t536 * t997 + t588 * t947;
t909 = pkin(8) + qJ(4);
t830 = sin(t909) / 0.2e1;
t910 = pkin(8) - qJ(4);
t867 = sin(t910);
t584 = t830 - t867 / 0.2e1;
t833 = cos(t909) / 0.2e1;
t870 = cos(t910);
t587 = t833 - t870 / 0.2e1;
t668 = t359 * t996 - t361 * t584 - t587 * t738;
t138 = t299 * t647 + t651 * t668;
t731 = t830 + t867 / 0.2e1;
t734 = t870 / 0.2e1 + t833;
t193 = t359 * t648 + t361 * t734 - t731 * t738;
t646 = sin(qJ(6));
t650 = cos(qJ(6));
t1054 = t138 * t646 - t193 * t650;
t1053 = t138 * t650 + t193 * t646;
t1052 = -pkin(13) * t743 - t1013;
t1051 = t937 * pkin(4) + pkin(13) * t938 + t936;
t948 = t645 * t652;
t931 = pkin(10) * t948 + t630;
t554 = t931 * qJD(1);
t866 = t973 * qJD(1);
t806 = t866 + qJD(2);
t744 = t806 * t970;
t848 = t652 * t881;
t444 = t554 + (qJD(1) * t848 + t744) * pkin(11);
t717 = pkin(2) * t973 + t763;
t452 = qJD(2) * pkin(2) + qJD(1) * t717 + t618;
t748 = -pkin(2) * t652 - pkin(11) * t879 - pkin(1);
t534 = t748 * t645;
t516 = qJD(1) * t534;
t297 = -t444 * t994 + t452 * t844 + t516 * t841;
t902 = t997 * t649;
t728 = t652 * t843 + t902;
t716 = t728 * t645;
t724 = t994 * t744;
t454 = qJD(1) * t716 + t724;
t245 = -t454 * t905 + t297;
t702 = -t444 * t997 - t452 * t843 - t516 * t840;
t857 = t994 * t949;
t1029 = qJD(1) * t857 - t997 * t744;
t779 = t844 * t948;
t453 = qJD(1) * t779 - t1029;
t874 = t971 * t453;
t246 = -pkin(12) * t874 + t702;
t443 = t644 * t453;
t351 = pkin(3) * t454 - pkin(12) * t443;
t568 = pkin(3) * t842 - pkin(12) * t951;
t933 = t568 * qJD(4) - t996 * t245 - t246 * t880 - t351 * t951;
t350 = t453 * t996 - t454 * t880;
t1050 = t856 - t350;
t598 = t652 * t839;
t730 = t806 * t972 - t598;
t721 = -qJD(3) - t730;
t709 = t644 * t721;
t699 = t874 - t709;
t310 = t996 * t454 + t648 * t699;
t893 = t997 * qJD(2);
t727 = t795 + t893;
t1024 = qJD(1) * t727 + qJDD(1) * t843;
t861 = t973 * qJDD(1);
t798 = t861 + qJDD(2);
t742 = t798 * t970;
t918 = qJD(1) * qJD(2);
t826 = t972 * t918;
t792 = t649 * t826;
t1028 = -t645 * t792 + t742;
t678 = qJD(3) * t1029 - t1028 * t994;
t847 = qJDD(1) * t902;
t1004 = (t1024 * t652 + t847) * t645 - t678;
t797 = qJD(3) * t843;
t890 = t652 * t918;
t854 = t645 * t890;
t895 = qJD(3) * t997;
t898 = t649 * t928;
t698 = -t652 * t797 * t928 - qJD(3) * t724 - qJDD(1) * t857 + t1028 * t997 - t994 * t854 - t895 * t898;
t677 = -qJDD(1) * t779 - t698;
t846 = t645 * t877;
t715 = -qJDD(1) * t846 + t798 * t972 + qJDD(3);
t838 = qJD(2) * t879;
t799 = t645 * t838;
t690 = qJD(1) * t799 + t715;
t1031 = -t690 * t644 + t677 * t971;
t662 = t1004 * t648 + t1031 * t996;
t132 = t310 * qJD(4) + t662;
t1049 = qJDD(5) + t132;
t954 = t454 * t644;
t1048 = pkin(13) * t954 - t933;
t174 = -t246 * t644 + t971 * t351;
t349 = t453 * t648 + t454 * t842;
t1047 = -pkin(4) * t349 + pkin(13) * t350 - t174 + (pkin(4) * t648 - pkin(13) * t996) * t644 * qJD(4);
t837 = qJD(4) * t880;
t896 = t644 * t926;
t1046 = t1056 * t842 + t1057 * t648 + t313 * t904 + t478 * t894 + t496 * t837 + t533 * t896;
t561 = -t971 * t972 + t802;
t923 = qJD(5) * t651;
t924 = qJD(5) * t647;
t942 = t488 * t924 + t561 * t923 - t647 * t743 + t651 * t938;
t416 = t488 * t651 - t561 * t647;
t941 = qJD(5) * t416 - t647 * t938 - t651 * t743;
t139 = t299 * t651 - t647 * t668;
t394 = -t496 * t644 + t971 * t533;
t291 = pkin(4) * t486 - pkin(13) * t488 + t394;
t320 = t996 * t478 + t496 * t880 + t533 * t951;
t304 = -pkin(13) * t561 + t320;
t1020 = t1051 * t647 - t1052 * t651 + t291 * t923 - t304 * t924;
t900 = t996 * t542;
t1014 = -t440 * pkin(4) + (-pkin(4) * t793 - t900) * t644 + t1046;
t1010 = t349 - t896;
t566 = t647 * t951 - t651 * t971;
t952 = t644 * t647;
t935 = -qJD(5) * t566 + t1050 * t651 - t454 * t952;
t950 = t644 * t651;
t567 = t647 * t971 + t648 * t950;
t934 = qJD(5) * t567 + t1050 * t647 + t454 * t950;
t571 = pkin(3) * t880 + pkin(12) * t904;
t932 = t571 * qJD(4) - t648 * t245 + t246 * t842 + t351 * t904;
t495 = t996 * t709;
t308 = -t453 * t842 + t454 * t648 + t495;
t786 = qJD(5) + t308;
t992 = pkin(13) * t651;
t1041 = -pkin(14) * t937 - t1020;
t1040 = pkin(5) * t941 + pkin(14) * t942 + t1014;
t550 = pkin(13) * t971 + t571;
t551 = (-pkin(4) * t996 - pkin(13) * t648 - pkin(3)) * t644;
t977 = t1047 * t647 - t1048 * t651 - t550 * t924 + t551 * t923;
t1008 = pkin(4) * t954 + t932;
t185 = pkin(4) * t310 + pkin(13) * t308;
t222 = pkin(12) * t699 - t702;
t223 = -pkin(3) * t721 + t245;
t377 = -t452 * t970 + t972 * t516;
t265 = -t453 * pkin(3) - pkin(12) * t954 + t377;
t90 = -t648 * t222 + t223 * t842 + t265 * t904;
t71 = t647 * t185 + t651 * t90;
t1039 = pkin(13) * t924 + t71;
t641 = t645 ^ 2;
t1037 = 0.2e1 * t641;
t825 = qJD(2) * t866;
t804 = pkin(1) * t825;
t850 = pkin(1) * t861;
t860 = pkin(10) * t898;
t916 = qJDD(1) * t652;
t889 = t645 * t916;
t741 = -pkin(10) * t889 + qJD(2) * t860 - t649 * t850 - t652 * t804;
t864 = qJDD(1) * t972;
t373 = (t742 + (t652 * t864 - t792) * t645) * pkin(11) - t741;
t616 = t652 * t850;
t746 = -t649 * t804 + t616;
t917 = qJDD(1) * t649;
t774 = -t890 - t917;
t747 = t774 * pkin(10);
t380 = t798 * pkin(2) + ((-t649 * t864 - t652 * t826) * pkin(11) + t747) * t645 + t746;
t739 = qJD(2) * t758;
t422 = (qJD(1) * t739 + qJDD(1) * t748) * t645;
t892 = t994 * qJD(3);
t144 = t997 * t373 + t380 * t843 + t422 * t840 - t444 * t892 + t452 * t795 + t516 * t794;
t101 = -pkin(12) * t1031 + t144;
t787 = -t373 * t994 + t380 * t844 + t422 * t841;
t104 = pkin(3) * t690 - t1004 * t905 - t444 * t895 - t452 * t797 - t516 * t793 + t787;
t281 = -t380 * t970 + t972 * t422;
t785 = qJDD(1) * t844;
t143 = t678 * t993 - t698 * pkin(3) + (-t847 * t993 + (-pkin(3) * t785 - t1024 * t993) * t652) * t645 + t281;
t24 = -t648 * t101 + t104 * t842 + t143 * t904 - t222 * t894 - t223 * t837 - t265 * t896;
t266 = -t644 * t677 - t690 * t971 - qJDD(4);
t20 = pkin(4) * t266 - t24;
t131 = qJD(4) * t495 - t1004 * t996 + t1031 * t648 - t453 * t796 + t454 * t926;
t704 = -t721 * t971 - t443;
t700 = -qJD(4) - t704;
t376 = t651 * t700;
t76 = qJD(5) * t376 + t651 * t131 + t647 * t266 + t310 * t924;
t865 = -t647 * t131 + t651 * t266;
t221 = t651 * t310 - t647 * t700;
t925 = qJD(5) * t221;
t77 = t865 + t925;
t10 = pkin(5) * t77 + pkin(14) * t76 + t20;
t740 = -t996 * t101 - t104 * t880 - t143 * t951 + t222 * t926 - t223 * t796 - t265 * t856;
t19 = -pkin(13) * t266 - t740;
t68 = -t104 * t644 + t971 * t143;
t37 = pkin(4) * t132 + pkin(13) * t131 + t68;
t91 = t996 * t222 + (t223 * t971 + t265 * t644) * t648;
t84 = -pkin(13) * t700 + t91;
t135 = -t223 * t644 + t971 * t265;
t86 = pkin(4) * t308 - pkin(13) * t310 + t135;
t782 = -t651 * t19 - t647 * t37 + t84 * t924 - t86 * t923;
t5 = pkin(14) * t1049 - t782;
t46 = t647 * t86 + t651 * t84;
t41 = pkin(14) * t786 + t46;
t219 = t310 * t647 + t376;
t83 = pkin(4) * t700 - t90;
t51 = t219 * pkin(5) - t221 * pkin(14) + t83;
t817 = t41 * t646 - t51 * t650;
t1 = -t817 * qJD(6) + t646 * t10 + t650 * t5;
t216 = qJD(6) + t219;
t1035 = t817 * t216 + t1;
t1011 = t647 * t291 + t651 * t304;
t1019 = -qJD(5) * t1011 + t1051 * t651 + t1052 * t647;
t1034 = -pkin(14) * t1010 + t977;
t1033 = pkin(5) * t934 - pkin(14) * t935 + t1008;
t712 = t995 * t736;
t706 = t653 * t649 + t712;
t1030 = t706 * t970 + t995 * t881;
t780 = -t586 * t995 + t653 * t652;
t667 = t706 * t735 - t722 * t995 + t780 * t994;
t1032 = t1030 * t971 + t667 * t644;
t45 = -t647 * t84 + t651 * t86;
t1027 = -t45 * t786 - t782;
t1026 = pkin(14) * t310 + t1039;
t1023 = -qJD(6) * t992 - t91 + t786 * (pkin(5) * t647 - pkin(14) * t651);
t16 = t41 * t650 + t51 * t646;
t2 = -qJD(6) * t16 + t650 * t10 - t646 * t5;
t1022 = -t16 * t216 - t2;
t155 = pkin(14) * t486 + t1011;
t318 = -t648 * t478 + t496 * t842 + t533 * t904;
t303 = t561 * pkin(4) - t318;
t415 = t488 * t647 + t651 * t561;
t186 = t415 * pkin(5) - t416 * pkin(14) + t303;
t92 = -t155 * t646 + t186 * t650;
t1021 = qJD(6) * t92 + t1040 * t646 - t1041 * t650;
t93 = t155 * t650 + t186 * t646;
t989 = -qJD(6) * t93 + t1040 * t650 + t1041 * t646;
t988 = -pkin(5) * t937 - t1019;
t1009 = t651 * t550 + t647 * t551;
t976 = -qJD(5) * t1009 + t1047 * t651 + t1048 * t647;
t820 = t973 * t970;
t479 = (t848 + t820) * pkin(11) + t931;
t497 = t631 + t717;
t319 = -t479 * t994 + t497 * t844 + t534 * t841;
t759 = t994 * t820;
t489 = t759 + t716;
t821 = t973 * t972;
t562 = t846 - t821;
t264 = -t562 * pkin(3) - t489 * t905 + t319;
t395 = -t497 * t970 + t972 * t534;
t1002 = -t997 * t820 - t779;
t487 = t857 + t1002;
t287 = t487 * pkin(3) - t489 * t993 + t395;
t153 = -t264 * t644 + t971 * t287;
t330 = t487 * t842 + t489 * t648 + t562 * t904;
t777 = -t487 * t971 - t562 * t644;
t331 = t489 * t996 + t648 * t777;
t108 = pkin(4) * t330 - pkin(13) * t331 + t153;
t321 = t997 * t479 + t497 * t843 + t534 * t840;
t259 = pkin(12) * t777 + t321;
t115 = t996 * t259 + t264 * t880 + t287 * t951;
t414 = -t487 * t644 + t562 * t971;
t96 = -pkin(13) * t414 + t115;
t1017 = t647 * t108 + t651 * t96;
t1016 = t219 * t786;
t1015 = t221 * t786;
t1012 = t644 * t900 - t1046;
t1007 = -pkin(11) * t793 + t1058;
t1006 = -qJD(3) * t572 - t328;
t405 = qJD(3) * t759 + (qJD(2) * t729 + qJD(3) * t728) * t645;
t1003 = -t971 * t405 + t644 * t799;
t755 = t793 - t522;
t1001 = (qJDD(2) + 0.2e1 * t861) * t645;
t148 = t650 * t221 + t646 * t786;
t922 = qJD(6) * t148;
t39 = -t1049 * t650 - t646 * t76 + t922;
t560 = t931 * qJD(2);
t888 = t647 * t19 - t651 * t37;
t8 = -qJD(5) * t46 - t888;
t369 = -qJD(2) * t773 - t644 * t405;
t619 = qJD(2) * t631;
t502 = qJD(2) * t763 + t619;
t503 = t710 * qJD(2);
t544 = t645 * t739;
t208 = -t479 * t892 + t497 * t795 + t997 * t502 + t503 * t843 + t534 * t794 + t544 * t840;
t159 = pkin(12) * t1003 + t208;
t209 = -qJD(3) * t321 - t502 * t994 + t503 * t844 + t544 * t841;
t404 = -t893 * t948 + (qJD(2) * t843 + t892) * t949 + t1002 * qJD(3);
t160 = pkin(3) * t799 + t404 * t905 + t209;
t408 = -t503 * t970 + t972 * t544;
t227 = t405 * pkin(3) + t404 * t993 + t408;
t47 = t996 * t159 + t160 * t880 + t227 * t951 - t259 * t926 + t264 * t796 + t287 * t856;
t43 = -pkin(13) * t369 + t47;
t113 = -t160 * t644 + t971 * t227;
t180 = -t1003 * t648 + t996 * t404 + t487 * t796 + t489 * t926 + t562 * t856;
t181 = -qJD(2) * t753 + qJD(4) * t331 - t648 * t404 + t405 * t842;
t59 = pkin(4) * t181 + pkin(13) * t180 + t113;
t14 = -qJD(5) * t1017 - t43 * t647 + t59 * t651;
t654 = qJD(1) ^ 2;
t991 = g(1) * t653;
t757 = t650 * t786;
t921 = qJD(6) * t646;
t38 = -qJD(6) * t757 - t1049 * t646 + t221 * t921 + t650 * t76;
t985 = t38 * t646;
t984 = t39 * t650;
t75 = qJDD(6) + t77;
t983 = t646 * t75;
t982 = t650 * t75;
t981 = t83 * t308;
t549 = -pkin(4) * t971 - t568;
t417 = t566 * pkin(5) - t567 * pkin(14) + t549;
t420 = -pkin(14) * t904 + t1009;
t311 = t417 * t650 - t420 * t646;
t980 = qJD(6) * t311 + t1033 * t646 + t1034 * t650;
t312 = t417 * t646 + t420 * t650;
t979 = -qJD(6) * t312 + t1033 * t650 - t1034 * t646;
t978 = pkin(5) * t1010 - t976;
t610 = -pkin(5) * t651 - pkin(14) * t647 - pkin(4);
t920 = qJD(6) * t650;
t975 = t1023 * t646 - t1026 * t650 + t610 * t920;
t974 = t1023 * t650 + t1026 * t646 - t610 * t921;
t146 = t221 * t646 - t757;
t969 = t146 * t216;
t968 = t146 * t646;
t967 = t148 * t146;
t966 = t148 * t216;
t965 = t193 * t647;
t964 = t193 * t651;
t903 = t645 * t995;
t363 = -t585 * t706 - t588 * t903 + t780 * t997;
t198 = -t1030 * t731 + t363 * t648 + t667 * t734;
t963 = t198 * t647;
t962 = t198 * t651;
t961 = t221 * t219;
t589 = t835 - t872 / 0.2e1;
t733 = t832 + t869 / 0.2e1;
t413 = -t585 * t733 + t588 * t973 + t589 * t997;
t669 = t589 * t994 + t732 * t973 + t733 * t735;
t693 = t733 * t970 - t821;
t247 = -t413 * t648 - t669 * t734 + t693 * t731;
t960 = t247 * t647;
t959 = t247 * t651;
t958 = t308 * t310;
t955 = t453 * t454;
t953 = t641 * t654;
t946 = t646 * t651;
t945 = t650 * t651;
t944 = t416 * t921 - t486 * t920 - t646 * t937 + t650 * t942;
t335 = t416 * t650 + t486 * t646;
t943 = qJD(6) * t335 - t646 * t942 - t650 * t937;
t506 = t646 * t567 + t650 * t904;
t940 = -qJD(6) * t506 - t1010 * t646 + t650 * t935;
t858 = t646 * t904;
t939 = -qJD(6) * t858 + t1010 * t650 + t567 * t920 + t646 * t935;
t930 = t653 * pkin(1) + pkin(10) * t903;
t642 = t649 ^ 2;
t643 = t652 ^ 2;
t929 = t642 - t643;
t927 = qJD(2) * t645;
t908 = t652 * t953;
t897 = t649 * t927;
t891 = pkin(1) * t1037;
t885 = t536 * t970;
t884 = t780 * t970;
t883 = t587 * t970;
t882 = t589 * t970;
t863 = t216 * t650;
t862 = t786 * t647;
t859 = t649 * t908;
t855 = t649 * t890;
t853 = -t361 * pkin(3) + t359 * t993;
t852 = -t667 * pkin(3) + t363 * t993;
t851 = t669 * pkin(3) - t413 * t993;
t845 = -pkin(1) * t995 + pkin(10) * t947;
t836 = t645 * t654 * t973;
t657 = -t1030 * t587 + t363 * t996 - t584 * t667;
t141 = -t1032 * t651 + t647 * t657;
t828 = g(1) * t139 + g(2) * t141;
t827 = -g(1) * t193 + g(2) * t198;
t182 = -t308 * t946 - t650 * t310;
t824 = -t646 * t923 + t182;
t183 = -t308 * t945 + t310 * t646;
t823 = t650 * t923 - t183;
t818 = -t16 * t646 + t650 * t817;
t50 = pkin(14) * t330 + t1017;
t260 = t331 * t647 + t651 * t414;
t261 = t331 * t651 - t414 * t647;
t114 = -t648 * t259 + t264 * t842 + t287 * t904;
t95 = t414 * pkin(4) - t114;
t69 = t260 * pkin(5) - t261 * pkin(14) + t95;
t22 = t50 * t650 + t646 * t69;
t21 = -t50 * t646 + t650 * t69;
t52 = t108 * t651 - t647 * t96;
t70 = t185 * t651 - t647 * t90;
t170 = t261 * t650 + t330 * t646;
t175 = t291 * t651 - t304 * t647;
t430 = -t647 * t550 + t651 * t551;
t805 = 0.2e1 * t866 + qJD(2);
t791 = -t535 * pkin(2) + pkin(11) * t885;
t790 = -t706 * pkin(2) + pkin(11) * t884;
t789 = t733 * pkin(2) - pkin(11) * t882;
t788 = g(2) * t995 + t991;
t40 = -pkin(5) * t786 - t45;
t781 = -pkin(14) * t75 + t216 * t40;
t13 = t108 * t923 + t651 * t43 + t647 * t59 - t924 * t96;
t347 = -t644 * t669 - t693 * t971;
t661 = -t413 * t996 + t584 * t669 + t587 * t693;
t772 = g(1) * t141 - g(2) * t139 - g(3) * (t347 * t651 - t647 * t661);
t142 = t1032 * t647 + t651 * t657;
t172 = t347 * t647 + t651 * t661;
t771 = -g(1) * t142 - g(2) * t138 - g(3) * t172;
t396 = t535 * t994 - t536 * t735;
t397 = -t535 * t997 - t536 * t585;
t234 = t396 * t584 + t397 * t996 - t536 * t883;
t332 = -t396 * t644 + t536 * t819;
t161 = t234 * t647 - t332 * t651;
t398 = t706 * t994 - t735 * t780;
t399 = -t585 * t780 - t706 * t997;
t236 = t398 * t584 + t399 * t996 - t780 * t883;
t333 = -t398 * t644 + t780 * t819;
t163 = t236 * t647 - t333 * t651;
t445 = t589 * t735 - t733 * t994;
t446 = t589 * t585 + t733 * t997;
t293 = t445 * t584 + t446 * t996 + t587 * t882;
t387 = -t445 * t644 - t589 * t819;
t214 = t293 * t647 - t387 * t651;
t770 = -g(1) * t163 - g(2) * t161 - g(3) * t214;
t238 = -t359 * t584 - t361 * t996;
t165 = t238 * t647 - t359 * t950;
t240 = -t363 * t584 - t667 * t996;
t167 = t240 * t647 - t363 * t950;
t285 = t413 * t584 + t669 * t996;
t217 = t285 * t647 + t413 * t950;
t769 = -g(1) * t167 - g(2) * t165 - g(3) * t217;
t768 = g(1) * t198 + g(2) * t193 + g(3) * t247;
t767 = g(1) * t657 + g(2) * t668 + g(3) * t661;
t711 = t731 * t970;
t233 = -t396 * t734 + t397 * t648 - t536 * t711;
t235 = -t398 * t734 + t399 * t648 - t711 * t780;
t292 = -t445 * t734 + t446 * t648 + t589 * t711;
t766 = -g(1) * t235 - g(2) * t233 - g(3) * t292;
t237 = t359 * t734 - t361 * t648;
t239 = t363 * t734 - t648 * t667;
t284 = -t413 * t734 + t648 * t669;
t765 = g(1) * t239 + g(2) * t237 + g(3) * t284;
t764 = -g(1) * t363 - g(2) * t359 + g(3) * t413;
t754 = qJD(5) * t786;
t752 = t238 * pkin(4) + pkin(13) * t237 + t853;
t751 = t240 * pkin(4) + pkin(13) * t239 + t852;
t750 = t285 * pkin(4) + pkin(13) * t284 + t851;
t6 = -pkin(5) * t1049 - t8;
t749 = -t6 + t772;
t720 = pkin(14) * qJD(6) * t216 - t749;
t718 = -t536 * pkin(2) - pkin(11) * t738 + t845;
t708 = t721 * t970;
t48 = -t648 * t159 + t160 * t842 + t227 * t904 - t259 * t894 - t264 * t837 - t287 * t896;
t705 = qJD(3) * t708;
t703 = t308 * t786 + t754;
t701 = -t359 * pkin(3) - pkin(12) * t299 + t718;
t44 = t369 * pkin(4) - t48;
t697 = t397 * pkin(3) + pkin(12) * t332 + t791;
t696 = t399 * pkin(3) + pkin(12) * t333 + t790;
t695 = t446 * pkin(3) + pkin(12) * t387 + t789;
t692 = t644 * t700;
t691 = qJD(4) * t700;
t688 = -pkin(4) * t668 - pkin(13) * t193 + t701;
t686 = t234 * pkin(4) + t233 * pkin(13) + t697;
t685 = t236 * pkin(4) + t235 * pkin(13) + t696;
t684 = t293 * pkin(4) + t292 * pkin(13) + t695;
t683 = t690 * t970;
t681 = t780 * pkin(2) + pkin(11) * t1030 + t930;
t672 = t677 * t970;
t663 = t1004 * t970;
t660 = t363 * pkin(3) + pkin(12) * t1032 + t681;
t658 = pkin(4) * t657 + t198 * pkin(13) + t660;
t570 = -pkin(10) * t949 + t631;
t569 = -t809 + t629;
t559 = -pkin(10) * t897 + t619;
t552 = t618 - t860;
t546 = pkin(13) * t945 + t610 * t646;
t545 = -pkin(13) * t946 + t610 * t650;
t507 = t650 * t567 - t858;
t451 = t645 * t747 + t746;
t419 = pkin(5) * t904 - t430;
t334 = t416 * t646 - t650 * t486;
t244 = t247 * pkin(4);
t218 = t285 * t651 - t413 * t952;
t215 = t293 * t651 + t387 * t647;
t191 = t198 * pkin(4);
t189 = t193 * pkin(4);
t169 = t261 * t646 - t650 * t330;
t168 = t240 * t651 + t363 * t952;
t166 = t238 * t651 + t359 * t952;
t164 = t236 * t651 + t333 * t647;
t162 = t234 * t651 + t332 * t647;
t154 = -pkin(5) * t486 - t175;
t145 = qJD(3) * t702 + t787;
t127 = pkin(5) * t221 + pkin(14) * t219;
t107 = qJD(5) * t261 - t180 * t647 + t651 * t369;
t106 = t651 * t180 + t331 * t924 + t647 * t369 + t414 * t923;
t88 = t142 * t650 + t198 * t646;
t87 = -t142 * t646 + t198 * t650;
t62 = -pkin(5) * t310 - t70;
t55 = qJD(6) * t170 - t106 * t646 - t650 * t181;
t54 = t650 * t106 - t646 * t181 + t261 * t921 - t330 * t920;
t49 = -pkin(5) * t330 - t52;
t34 = t127 * t646 + t45 * t650;
t33 = t127 * t650 - t45 * t646;
t17 = t107 * pkin(5) + t106 * pkin(14) + t44;
t12 = -pkin(5) * t181 - t14;
t11 = pkin(14) * t181 + t13;
t4 = -qJD(6) * t22 - t11 * t646 + t17 * t650;
t3 = qJD(6) * t21 + t11 * t650 + t17 * t646;
t7 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t995 - g(2) * t653, t788, 0, 0 (qJDD(1) * t642 + 0.2e1 * t855) * t641 (t649 * t916 - t918 * t929) * t1037, t652 * t805 * t927 + t1001 * t649 (qJDD(1) * t643 - 0.2e1 * t855) * t641, t1001 * t652 - t805 * t897, t798 * t973, -t560 * t806 + t570 * t798 + t451 * t973 + g(1) * t536 - g(2) * t780 + (-t649 * t918 + t916) * t891, -g(1) * t535 + g(2) * t706 - t559 * t806 + t741 * t973 + t774 * t891 - t798 * t931 ((-qJD(2) * t552 + qJDD(1) * t931 - t741 + (-qJD(2) * t570 + t559) * qJD(1)) * t652 + (-t554 * qJD(2) - qJDD(1) * t570 - t451) * t649 - t788) * t645, t641 * qJDD(1) * pkin(1) ^ 2 - g(1) * t845 - g(2) * t930 + t451 * t570 - t552 * t560 + t554 * t559 - t741 * t931, t1004 * t489 - t454 * t404, -t405 * t454 + t487 * t678 + t698 * t489 - t453 * t404 + (-t487 * t847 + (-t1024 * t487 + t489 * t785) * t652) * t645, t562 * t678 + t715 * t489 + t721 * t404 + (t454 * t838 - t562 * t728 * qJDD(1) + (-t562 * t652 * t727 + t489 * t838) * qJD(1)) * t645, -t453 * t405 + t487 * t677, t405 * t721 + t453 * t799 - t487 * t690 + t562 * t677, -t562 * t690 - t708 * t897, g(1) * t359 - g(2) * t363 - t145 * t562 - t209 * t721 + t281 * t487 + t297 * t799 + t319 * t690 + t377 * t405 + t395 * t677 - t408 * t453, -g(1) * t361 + g(2) * t667 + t1004 * t395 + t144 * t562 + t208 * t721 + t281 * t489 - t321 * t690 - t377 * t404 + t408 * t454 + t702 * t799, g(1) * t738 - g(2) * t1030 - t1004 * t319 - t144 * t487 - t145 * t489 + t208 * t453 - t209 * t454 + t297 * t404 - t321 * t677 + t405 * t702, -g(1) * t718 - g(2) * t681 + t144 * t321 + t145 * t319 - t208 * t702 + t297 * t209 + t281 * t395 + t377 * t408, -t131 * t331 - t180 * t310, t131 * t330 - t132 * t331 + t180 * t308 - t181 * t310, t414 * t131 + t180 * t700 - t266 * t331 - t369 * t310, t132 * t330 + t181 * t308, t414 * t132 + t181 * t700 + t266 * t330 + t369 * t308, t266 * t414 + t369 * t700, g(1) * t668 - g(2) * t657 + t113 * t308 - t114 * t266 + t153 * t132 + t135 * t181 - t24 * t414 + t68 * t330 - t90 * t369 - t48 * t700, t113 * t310 + t115 * t266 - t153 * t131 - t135 * t180 + t68 * t331 + t91 * t369 - t414 * t740 + t47 * t700 + t827, g(1) * t299 - g(2) * t1032 + t114 * t131 - t115 * t132 + t90 * t180 - t91 * t181 - t24 * t331 - t47 * t308 - t48 * t310 + t330 * t740, -g(1) * t701 - g(2) * t660 + t135 * t113 + t24 * t114 - t115 * t740 + t68 * t153 + t91 * t47 + t90 * t48, -t106 * t221 - t261 * t76, t106 * t219 - t107 * t221 + t260 * t76 - t261 * t77, t1049 * t261 - t106 * t786 + t221 * t181 - t76 * t330, t107 * t219 + t260 * t77, -t1049 * t260 - t107 * t786 - t219 * t181 - t77 * t330, t1049 * t330 + t181 * t786, g(1) * t138 - g(2) * t142 + t1049 * t52 + t83 * t107 + t14 * t786 + t45 * t181 + t20 * t260 + t44 * t219 + t8 * t330 + t95 * t77, -t1017 * t1049 - t83 * t106 - t13 * t786 - t46 * t181 + t20 * t261 + t44 * t221 + t330 * t782 - t95 * t76 + t828, -t1017 * t77 + t106 * t45 - t107 * t46 - t13 * t219 - t14 * t221 + t260 * t782 - t261 * t8 + t52 * t76 - t827, -g(1) * t688 - g(2) * t658 - t1017 * t782 + t46 * t13 + t45 * t14 + t20 * t95 + t83 * t44 + t8 * t52, -t148 * t54 - t170 * t38, t146 * t54 - t148 * t55 + t169 * t38 - t170 * t39, t107 * t148 + t170 * t75 - t216 * t54 - t260 * t38, t146 * t55 + t169 * t39, -t107 * t146 - t169 * t75 - t216 * t55 - t260 * t39, t107 * t216 + t260 * t75, g(1) * t1053 - g(2) * t88 - t817 * t107 + t12 * t146 + t6 * t169 + t2 * t260 + t21 * t75 + t4 * t216 + t49 * t39 + t40 * t55, -g(1) * t1054 - g(2) * t87 - t1 * t260 - t16 * t107 + t12 * t148 + t6 * t170 - t3 * t216 - t22 * t75 - t49 * t38 - t40 * t54, -t1 * t169 - t146 * t3 - t148 * t4 - t16 * t55 - t170 * t2 + t21 * t38 - t22 * t39 - t54 * t817 - t828, t1 * t22 + t16 * t3 + t2 * t21 - t817 * t4 + t6 * t49 + t40 * t12 - g(1) * (-pkin(5) * t138 + t139 * pkin(14) + t688) - g(2) * (t142 * pkin(5) + t141 * pkin(14) + t658); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t859, t929 * t953, t645 * t917 - t652 * t836, t859, t649 * t836 + t889, t798, -pkin(10) * t854 + t616 + t554 * t806 + g(1) * t712 + g(2) * t535 - g(3) * t733 + (-qJDD(1) * t645 * pkin(10) + t991 + (-t825 + t953) * pkin(1)) * t649, pkin(1) * t908 + g(1) * t780 + g(2) * t536 - g(3) * t589 + t552 * t806 + t741, 0, 0, t454 * t756 + t663 * t994, t453 * t756 - t454 * t755 + t663 * t997 - t672 * t994, t1004 * t972 - t454 * t800 + t523 * t721 + t683 * t994 - t705 * t997, -t453 * t755 - t672 * t997, -t453 * t800 - t522 * t721 - t677 * t972 + t683 * t997 + t705 * t994, t715 * t972 - (qJD(1) * t821 + qJD(3) - t598) * t800, -g(1) * t399 - g(2) * t397 - g(3) * t446 - t1006 * t721 + t145 * t972 - t281 * t841 - t297 * t800 + t377 * t755 + t407 * t453 + t569 * t690 - t677 * t899, -pkin(2) * t663 - g(1) * t398 - g(2) * t396 - g(3) * t445 + t1007 * t721 - t144 * t972 + t281 * t840 + t377 * t756 - t407 * t454 - t572 * t690 - t702 * t800, -g(1) * t884 - g(2) * t885 + g(3) * t882 - t1004 * t569 - t1006 * t454 + t1007 * t453 + t144 * t841 - t145 * t840 - t297 * t756 - t572 * t677 + t702 * t755, -g(1) * t790 - g(2) * t791 - g(3) * t789 + t1006 * t297 - t1007 * t702 + t144 * t572 + t145 * t569 - t281 * t899 - t377 * t407, -t131 * t488 - t310 * t938, t131 * t486 - t132 * t488 + t308 * t938 - t310 * t937, t561 * t131 - t266 * t488 + t310 * t743 + t700 * t938, t132 * t486 + t308 * t937, t561 * t132 + t266 * t486 - t308 * t743 + t700 * t937, t266 * t561 - t440 * t700 - t692 * t793, -g(1) * t236 - g(2) * t234 - g(3) * t293 - t1012 * t700 + t394 * t132 + t135 * t937 - t24 * t561 - t318 * t266 + t308 * t936 + t68 * t486 + t743 * t90, t1013 * t700 - t394 * t131 - t135 * t938 + t320 * t266 + t310 * t936 + t68 * t488 - t561 * t740 - t743 * t91 - t766, -g(1) * t333 - g(2) * t332 - g(3) * t387 - t1012 * t310 - t1013 * t308 + t131 * t318 - t132 * t320 - t24 * t488 + t486 * t740 + t938 * t90 - t937 * t91, -g(1) * t696 - g(2) * t697 - g(3) * t695 + t1012 * t90 + t1013 * t91 + t135 * t936 + t24 * t318 - t320 * t740 + t68 * t394, -t221 * t942 - t416 * t76, t219 * t942 - t221 * t941 + t415 * t76 - t416 * t77, t1049 * t416 + t221 * t937 - t76 * t486 - t786 * t942, t219 * t941 + t415 * t77, -t1049 * t415 - t219 * t937 - t77 * t486 - t786 * t941, t1049 * t486 + t786 * t937, -g(1) * t164 - g(2) * t162 - g(3) * t215 + t1014 * t219 + t1019 * t786 + t1049 * t175 + t20 * t415 + t303 * t77 + t45 * t937 + t8 * t486 + t83 * t941, -t1011 * t1049 + t1014 * t221 - t1020 * t786 + t20 * t416 - t303 * t76 - t46 * t937 + t486 * t782 - t83 * t942 - t770, -t1011 * t77 - t1019 * t221 - t1020 * t219 + t175 * t76 + t415 * t782 - t416 * t8 + t942 * t45 - t941 * t46 + t766, -g(1) * t685 - g(2) * t686 - g(3) * t684 - t1011 * t782 + t1014 * t83 + t1019 * t45 + t1020 * t46 + t8 * t175 + t20 * t303, -t148 * t944 - t335 * t38, t146 * t944 - t148 * t943 + t334 * t38 - t335 * t39, t148 * t941 - t216 * t944 + t335 * t75 - t38 * t415, t146 * t943 + t334 * t39, -t146 * t941 - t216 * t943 - t334 * t75 - t39 * t415, t216 * t941 + t415 * t75, t92 * t75 + t2 * t415 + t154 * t39 + t6 * t334 - g(1) * (t164 * t650 + t235 * t646) - g(2) * (t162 * t650 + t233 * t646) - g(3) * (t215 * t650 + t292 * t646) + t943 * t40 + t989 * t216 - t941 * t817 + t988 * t146, -t93 * t75 - t1 * t415 - t154 * t38 + t6 * t335 - g(1) * (-t164 * t646 + t235 * t650) - g(2) * (-t162 * t646 + t233 * t650) - g(3) * (-t215 * t646 + t292 * t650) - t944 * t40 - t1021 * t216 - t941 * t16 + t988 * t148, -t1 * t334 - t1021 * t146 - t148 * t989 - t16 * t943 - t2 * t335 + t38 * t92 - t39 * t93 - t817 * t944 + t770, t1 * t93 + t2 * t92 + t6 * t154 - g(1) * (t164 * pkin(5) + t163 * pkin(14) + t685) - g(2) * (t162 * pkin(5) + t161 * pkin(14) + t686) - g(3) * (t215 * pkin(5) + t214 * pkin(14) + t684) + t988 * t40 + t1021 * t16 - t989 * t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t955, -t453 ^ 2 + t454 ^ 2, t453 * t721 + t1004, t955, -t454 * t721 - t677, t690, g(1) * t667 + g(2) * t361 - g(3) * t669 - t377 * t454 - t702 * t730 + t787, -t297 * t721 - t377 * t453 - t144 - t764, 0, 0, t1050 * t310 - t131 * t951, t308 * t350 + t349 * t310 + (-t996 * t131 - t132 * t648 + (-t308 * t996 - t310 * t648) * qJD(4)) * t644, -t971 * t131 + t700 * t350 + (-t266 * t648 - t454 * t310 - t691 * t996) * t644, -t1010 * t308 - t132 * t904, -t971 * t132 - t700 * t349 + (-t266 * t996 + t308 * t454 + t648 * t691) * t644, -t266 * t971 + t454 * t692, -t568 * t266 + t24 * t971 - t174 * t308 - t135 * t349 - g(1) * t240 - g(2) * t238 - g(3) * t285 + (-pkin(3) * t132 + t135 * t926 - t90 * t454 - t68 * t996) * t644 + t932 * t700, t571 * t266 + t740 * t971 - t174 * t310 - t135 * t350 + (pkin(3) * t131 + t135 * t894 + t91 * t454 + t68 * t648) * t644 + t765 + t933 * t700, t568 * t131 - t571 * t132 + t91 * t349 + t90 * t350 + t932 * t310 - t933 * t308 + (-t996 * t740 - t24 * t648 + (-t648 * t91 - t90 * t996) * qJD(4) + t764) * t644, -t68 * t644 * pkin(3) - g(1) * t852 - g(2) * t853 - g(3) * t851 - t135 * t174 + t24 * t568 - t571 * t740 - t90 * t932 + t91 * t933, t221 * t935 - t567 * t76, -t219 * t935 - t221 * t934 + t566 * t76 - t567 * t77, -t1010 * t221 + t1049 * t567 + t76 * t904 + t935 * t786, t219 * t934 + t566 * t77, t1010 * t219 - t1049 * t566 + t77 * t904 - t934 * t786, -t1010 * t786 - t1049 * t904, -g(1) * t168 - g(2) * t166 - g(3) * t218 + t1008 * t219 - t1010 * t45 + t1049 * t430 + t20 * t566 + t549 * t77 + t786 * t976 - t8 * t904 + t83 * t934, t1008 * t221 - t1009 * t1049 + t1010 * t46 + t20 * t567 - t549 * t76 - t782 * t904 - t786 * t977 + t83 * t935 - t769, -t1009 * t77 - t219 * t977 - t221 * t976 + t430 * t76 - t45 * t935 - t46 * t934 + t566 * t782 - t567 * t8 - t765, -g(1) * t751 - g(2) * t752 - g(3) * t750 + t1008 * t83 - t1009 * t782 + t20 * t549 + t8 * t430 + t976 * t45 + t977 * t46, t148 * t940 - t38 * t507, -t146 * t940 - t148 * t939 + t38 * t506 - t39 * t507, t148 * t934 + t216 * t940 - t38 * t566 + t507 * t75, t146 * t939 + t39 * t506, -t146 * t934 - t216 * t939 - t39 * t566 - t506 * t75, t216 * t934 + t566 * t75, t311 * t75 + t2 * t566 + t419 * t39 + t6 * t506 - g(1) * (t168 * t650 + t239 * t646) - g(2) * (t166 * t650 + t237 * t646) - g(3) * (t218 * t650 + t284 * t646) + t939 * t40 + t979 * t216 - t934 * t817 + t978 * t146, -t312 * t75 - t1 * t566 - t419 * t38 + t6 * t507 - g(1) * (-t168 * t646 + t239 * t650) - g(2) * (-t166 * t646 + t237 * t650) - g(3) * (-t218 * t646 + t284 * t650) + t940 * t40 - t980 * t216 - t934 * t16 + t978 * t148, -t1 * t506 - t146 * t980 - t148 * t979 - t16 * t939 - t2 * t507 + t311 * t38 - t312 * t39 + t817 * t940 + t769, t1 * t312 + t2 * t311 + t6 * t419 - g(1) * (pkin(5) * t168 + pkin(14) * t167 + t751) - g(2) * (pkin(5) * t166 + pkin(14) * t165 + t752) - g(3) * (pkin(5) * t218 + pkin(14) * t217 + t750) + t978 * t40 + t980 * t16 - t979 * t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, -t308 ^ 2 + t310 ^ 2, -t308 * t700 - t131, -t958, t704 * t310 - t662, -t266, -t135 * t310 - t700 * t91 + t24 + t768, t135 * t308 - t700 * t90 + t740 + t767, 0, 0, t1015 * t651 - t647 * t76 (-t76 - t1016) * t651 + (-t77 - t1015) * t647, t1049 * t647 - t221 * t310 + t651 * t703, t219 * t862 - t651 * t77, t1049 * t651 + t219 * t310 - t647 * t703, -t786 * t310, -pkin(4) * t77 + g(1) * t962 + g(2) * t964 + g(3) * t959 - t20 * t651 - t91 * t219 - t45 * t310 - t70 * t786 - t754 * t992 + t83 * t924 + (-pkin(13) * t1049 + t981) * t647, pkin(4) * t76 - g(1) * t963 - g(2) * t965 - g(3) * t960 + t1039 * t786 - t1049 * t992 + t20 * t647 - t91 * t221 + t46 * t310 + t651 * t981 + t83 * t923, t219 * t71 + t221 * t70 + ((-t77 + t925) * pkin(13) + t1027) * t651 + (-t8 - t786 * t46 + (qJD(5) * t219 - t76) * pkin(13)) * t647 - t767, -t20 * pkin(4) + g(1) * t191 + g(2) * t189 + g(3) * t244 - t45 * t70 - t46 * t71 - t83 * t91 + (-t8 * t647 - t782 * t651 + (-t45 * t651 - t46 * t647) * qJD(5) - t767) * pkin(13), -t38 * t647 * t650 + (-t647 * t921 + t823) * t148, t146 * t183 + t148 * t182 + (-t146 * t650 - t148 * t646) * t923 + (t985 - t984 + (-t148 * t650 + t968) * qJD(6)) * t647, t38 * t651 + t823 * t216 + (t148 * t786 - t216 * t921 + t982) * t647, t39 * t646 * t647 + (t647 * t920 - t824) * t146, t39 * t651 + t824 * t216 + (-t146 * t786 - t216 * t920 - t983) * t647, t216 * t862 - t651 * t75, -t62 * t146 - t40 * t182 + t545 * t75 + t974 * t216 - t767 * t646 + (-t2 + (pkin(13) * t146 + t40 * t646) * qJD(5) + t768 * t650) * t651 + (pkin(13) * t39 + t40 * t920 + t6 * t646 - t786 * t817) * t647, -t62 * t148 - t40 * t183 - t546 * t75 - t975 * t216 - t767 * t650 + (t1 + (pkin(13) * t148 + t40 * t650) * qJD(5) - t768 * t646) * t651 + (-pkin(13) * t38 - t16 * t786 - t40 * t921 + t6 * t650) * t647, -t817 * t183 + t16 * t182 + t38 * t545 - t39 * t546 - t974 * t148 - t975 * t146 + t818 * t923 + (-t1 * t646 - t2 * t650 + (-t16 * t650 - t646 * t817) * qJD(6) + t768) * t647, t1 * t546 + t2 * t545 - t40 * t62 - g(1) * (-pkin(5) * t962 - pkin(14) * t963 - t191) - g(2) * (-pkin(5) * t964 - pkin(14) * t965 - t189) - g(3) * (-pkin(5) * t959 - pkin(14) * t960 - t244) + t975 * t16 - t974 * t817 + (t40 * t923 + t6 * t647 - t767) * pkin(13); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t961, -t219 ^ 2 + t221 ^ 2, -t76 + t1016, -t961, t221 * t308 - t865, t1049, -t83 * t221 + t308 * t46 + t772 - t888, t83 * t219 - t1027 - t771, 0, 0, t148 * t863 - t985 (-t38 - t969) * t650 + (-t39 - t966) * t646, -t148 * t221 + t216 * t863 + t983, t216 * t968 - t984, -t216 ^ 2 * t646 + t146 * t221 + t982, -t216 * t221, -pkin(5) * t39 - t146 * t46 - t216 * t33 + t221 * t817 + t646 * t781 - t650 * t720, pkin(5) * t38 - t148 * t46 + t16 * t221 + t216 * t34 + t646 * t720 + t650 * t781, t146 * t34 + t148 * t33 + ((-t39 + t922) * pkin(14) + t1035) * t650 + ((qJD(6) * t146 - t38) * pkin(14) + t1022) * t646 + t771, t817 * t33 - t16 * t34 - t40 * t46 + t749 * pkin(5) + (qJD(6) * t818 + t1 * t650 - t2 * t646 + t771) * pkin(14); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, -t146 ^ 2 + t148 ^ 2, -t38 + t969, -t967, t966 - t39, t75, -t40 * t148 - g(1) * t87 + g(2) * t1054 - g(3) * (-t172 * t646 + t247 * t650) - t1022, t40 * t146 + g(1) * t88 + g(2) * t1053 - g(3) * (-t172 * t650 - t247 * t646) - t1035, 0, 0;];
tau_reg  = t7;
