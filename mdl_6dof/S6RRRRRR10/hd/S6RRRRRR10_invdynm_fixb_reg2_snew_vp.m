% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 19:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RRRRRR10_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR10_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR10_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_invdynm_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 19:03:09
% EndTime: 2019-05-08 19:14:07
% DurationCPUTime: 673.86s
% Computational Cost: add. (10154366->1491), mult. (26038284->2433), div. (0->0), fcn. (22675026->18), ass. (0->1080)
t2729 = cos(pkin(6));
t3066 = qJD(1) * t2729;
t2717 = qJD(2) + t3066;
t2716 = t2717 ^ 2;
t2740 = cos(qJ(2));
t2723 = t2740 ^ 2;
t2726 = sin(pkin(6));
t2721 = t2726 ^ 2;
t3081 = qJD(1) ^ 2;
t3028 = t2721 * t3081;
t3001 = t2723 * t3028;
t2700 = -t2716 - t3001;
t2730 = sin(qJ(6));
t2733 = sin(qJ(3));
t2734 = sin(qJ(2));
t2739 = cos(qJ(3));
t2728 = cos(pkin(7));
t3019 = t2728 * t2740;
t2725 = sin(pkin(7));
t3027 = t2725 * t2733;
t3067 = qJD(1) * t2726;
t2680 = t2717 * t3027 + (t2733 * t3019 + t2734 * t2739) * t3067;
t2732 = sin(qJ(4));
t2738 = cos(qJ(4));
t3022 = t2726 * t2740;
t3003 = qJD(1) * t3022;
t2989 = t2725 * t3003;
t3030 = t2717 * t2728;
t2693 = qJD(3) - t2989 + t3030;
t2724 = sin(pkin(8));
t2990 = t2728 * t3003;
t2832 = t2717 * t2725 + t2990;
t3023 = t2726 * t2734;
t3004 = qJD(1) * t3023;
t2679 = -t2733 * t3004 + t2739 * t2832;
t2727 = cos(pkin(8));
t3042 = t2679 * t2727;
t2870 = t2693 * t2724 + t3042;
t2634 = t2680 * t2738 + t2732 * t2870;
t2731 = sin(qJ(5));
t2737 = cos(qJ(5));
t3036 = t2693 * t2727;
t2985 = -t2724 * t2679 + qJD(4) + t3036;
t2606 = t2737 * t2634 + t2731 * t2985;
t3041 = t2680 * t2732;
t2632 = -t2738 * t2870 + t3041;
t2715 = qJD(2) * t3004;
t3010 = qJDD(1) * t2740;
t2978 = t2726 * t3010 - t2715;
t2991 = qJDD(1) * t2729 + qJDD(2);
t2779 = t2991 * t2725 + t2978 * t2728;
t2775 = t2733 * t2779;
t3011 = qJDD(1) * t2734;
t3065 = qJD(1) * t2740;
t2845 = qJD(2) * t3065 + t3011;
t2792 = t2845 * t2726;
t2783 = t2739 * t2792;
t2766 = t2775 + t2783;
t3044 = t2679 * qJD(3);
t2764 = t2766 + t3044;
t2774 = t2739 * t2779;
t2780 = t2733 * t2792 - t2774;
t2776 = t2680 * qJD(3) + t2780;
t2777 = -t2725 * t2978 + t2728 * t2991 + qJDD(3);
t3097 = -t2724 * t2777 + t2727 * t2776;
t2559 = -t2632 * qJD(4) - t2732 * t3097 + t2738 * t2764;
t2626 = t2724 * t2776 + t2727 * t2777 + qJDD(4);
t2993 = -t2731 * t2559 + t2737 * t2626;
t2847 = t2606 * qJD(5) - t2993;
t2497 = qJDD(6) + t2847;
t2736 = cos(qJ(6));
t2855 = qJD(5) + t2632;
t2570 = t2606 * t2730 - t2736 * t2855;
t2572 = t2736 * t2606 + t2730 * t2855;
t2509 = t2572 * t2570;
t3090 = t2497 - t2509;
t3103 = t2730 * t3090;
t2604 = t2634 * t2731 - t2737 * t2985;
t2549 = t2606 * t2604;
t2760 = t2634 * qJD(4) + t2732 * t2764 + t2738 * t3097;
t2558 = qJDD(5) + t2760;
t3089 = -t2549 + t2558;
t3102 = t2731 * t3089;
t3101 = t2736 * t3090;
t3100 = t2737 * t3089;
t2609 = t2985 * t2632;
t3099 = -t2609 + t2559;
t2718 = g(3) * t3023;
t2735 = sin(qJ(1));
t2741 = cos(qJ(1));
t2714 = g(1) * t2741 + t2735 * g(2);
t3012 = qJDD(1) * t2726;
t2793 = pkin(10) * t3012 - t2714;
t2713 = t2735 * g(1) - t2741 * g(2);
t2856 = qJDD(1) * pkin(1) + t2713;
t2838 = t2729 * t2856;
t3026 = t2725 * t2734;
t3080 = pkin(2) * t2740;
t2859 = -pkin(11) * t3026 - t3080;
t2841 = t2859 * t2726;
t3018 = t2729 * t2734;
t3029 = t2717 * t2734;
t3073 = pkin(11) * t2728;
t2751 = t2740 * t2793 + t2734 * t2838 - t2718 - t2716 * pkin(2) + t2779 * pkin(11) + (-pkin(1) * t3065 + (t3029 * t3073 + (pkin(10) * t3018 + t2740 * t2841) * qJD(1)) * t2726) * qJD(1);
t2977 = t2991 * pkin(2);
t3070 = t3081 * pkin(1);
t3074 = pkin(11) * t2725;
t2765 = -t2734 * (-t2714 - t3070) + t2740 * t2838 + t2977 + t2716 * t3074;
t3006 = -pkin(10) - t3073;
t3075 = pkin(10) * t2729;
t3008 = t2740 * t3075;
t3068 = t2740 * g(3);
t2753 = (-t3068 + t3006 * t3011 + ((-t2734 * t2841 + t3008) * qJD(1) + (-qJD(2) + t2717) * pkin(11) * t3019) * qJD(1)) * t2726 + t2765;
t3069 = t2729 * g(3);
t2988 = t2715 * pkin(2) - t3069;
t2722 = t2734 ^ 2;
t3013 = t2722 + t2723;
t3015 = qJD(2) + t2717;
t3024 = t2725 * t2740;
t2756 = ((-pkin(1) + t2859) * qJDD(1) + (pkin(2) * t3029 - pkin(10) * t3067 + (-t2728 * t3013 * t3067 - t3015 * t3024) * pkin(11)) * qJD(1) - t2713) * t2726 + t2988;
t3087 = t2725 * t2756 + t2728 * t2753;
t2747 = -t2733 * t2751 + t2739 * t3087;
t2746 = pkin(3) * t2777 + t2747;
t3072 = pkin(12) * t2724;
t2858 = -pkin(3) * t2679 - t2680 * t3072;
t3086 = t2693 * t2870 - t2764 * t2727;
t2745 = pkin(12) * t3086 - t2680 * t2858 + t2746;
t2750 = -t2725 * t2753 + t2728 * t2756;
t3071 = pkin(12) * t2727;
t2857 = pkin(3) * t2693 - t2680 * t3071;
t3085 = -t2679 * t2870 - t2764 * t2724;
t2749 = pkin(3) * t2776 + pkin(12) * t3085 + t2680 * t2857 + t2750;
t3098 = t2724 * t2749 + t2727 * t2745;
t2578 = t2855 * t2606;
t3096 = t2847 + t2578;
t2853 = t2855 ^ 2;
t2976 = t2985 ^ 2;
t3095 = t2721 * t2734;
t3047 = t2634 * t2632;
t2767 = t2626 - t3047;
t3094 = t2732 * t2767;
t3043 = t2679 * t2680;
t2769 = t2777 + t3043;
t3093 = t2733 * t2769;
t3092 = t2738 * t2767;
t3091 = t2739 * t2769;
t2883 = -t2737 * t2559 - t2731 * t2626;
t2499 = -t2604 * qJD(5) - t2883;
t2577 = t2855 * t2604;
t2470 = t2499 - t2577;
t2677 = t2679 ^ 2;
t2678 = t2680 ^ 2;
t2635 = -t2677 - t2678;
t2691 = t2693 ^ 2;
t3088 = t2691 + t2678;
t2850 = t2985 * t2634;
t3083 = -t2732 * t2609 - t2738 * t2850;
t2519 = t2850 + t2760;
t3082 = (-t2725 ^ 2 * pkin(11) + t2728 * t3006) * t3012 + t2728 * t2714;
t2568 = t2570 ^ 2;
t2569 = t2572 ^ 2;
t2601 = qJD(6) + t2604;
t2600 = t2601 ^ 2;
t2602 = t2604 ^ 2;
t2603 = t2606 ^ 2;
t2630 = t2632 ^ 2;
t2631 = t2634 ^ 2;
t3079 = pkin(4) * t2732;
t3078 = pkin(4) * t2738;
t3077 = pkin(5) * t2731;
t3076 = pkin(10) * t2726;
t2592 = pkin(4) * t2632 - pkin(13) * t2634;
t2491 = -pkin(12) * t3097 + t2679 * t2858 - t2693 * t2857 + t2733 * t3087 + t2739 * t2751;
t3016 = t2738 * t2491;
t2346 = -pkin(4) * t2976 + t2626 * pkin(13) - t2632 * t2592 + t2732 * t3098 + t3016;
t2743 = pkin(4) * t2519 - pkin(13) * t3099 - t2724 * t2745 + t2727 * t2749;
t2271 = t2346 * t2731 - t2737 * t2743;
t2545 = pkin(5) * t2604 - pkin(14) * t2606;
t2246 = -t2558 * pkin(5) - pkin(14) * t2853 + t2545 * t2606 + t2271;
t3064 = t2246 * t2730;
t3063 = t2246 * t2736;
t2370 = t2732 * t2491 - t2738 * t3098;
t2345 = -t2626 * pkin(4) - t2976 * pkin(13) + t2634 * t2592 + t2370;
t3062 = t2345 * t2731;
t3061 = t2345 * t2737;
t3014 = qJD(3) + t2693;
t2616 = t2680 * t3014 + t2780;
t2415 = t2724 * t2747 - t2727 * t2750 + (-t2616 * t2727 + t2724 * t2769) * pkin(3) + (-t2727 ^ 2 * t2635 + (0.2e1 * t2679 * t3036 + t2724 * t3088) * t2724) * pkin(12);
t3060 = t2415 * t2732;
t3059 = t2415 * t2738;
t2429 = t2497 + t2509;
t3058 = t2429 * t2730;
t3057 = t2429 * t2736;
t2494 = t2549 + t2558;
t3056 = t2494 * t2731;
t3055 = t2494 * t2737;
t2553 = -t2626 - t3047;
t3054 = t2553 * t2732;
t3053 = t2553 * t2738;
t3052 = t2559 * t2732;
t3009 = pkin(11) * t3024;
t2582 = t2725 * t2765 - t2728 * t2988 + (t2725 * (-pkin(10) * t3011 - t3068) - t2728 * (-pkin(2) * t3010 - t2856) + ((t2725 * t3008 + (-t2859 * t3026 - t2728 * (-t3013 * t3073 - pkin(10))) * t2726) * qJD(1) + (-pkin(2) * t2734 + 0.2e1 * t3009) * t3030) * qJD(1)) * t2726;
t3051 = t2582 * t2733;
t3050 = t2582 * t2739;
t3049 = t2601 * t2730;
t3048 = t2601 * t2736;
t2637 = -t2777 + t3043;
t3046 = t2637 * t2733;
t3045 = t2637 * t2739;
t2784 = t3076 * t3081 + t2856;
t2690 = t2726 * t2784 + t3069;
t3040 = t2690 * t2734;
t3039 = t2690 * t2740;
t2662 = t2693 * t2679;
t3038 = t2693 * t2680;
t3017 = t2734 * t3081;
t2996 = t2740 * t3017;
t2712 = t2721 * t2996;
t2695 = t2712 + t2991;
t3035 = t2695 * t2734;
t3034 = t2695 * t2740;
t2696 = -t2712 + t2991;
t3033 = t2696 * t2734;
t3032 = t2696 * t2740;
t3031 = t2717 * t2726;
t3025 = t2725 * t2739;
t3021 = t2728 * t2733;
t3020 = t2728 * t2739;
t2272 = t2737 * t2346 + t2731 * t2743;
t3007 = -pkin(5) * t2737 - pkin(4);
t3005 = qJD(1) * t3031;
t3002 = t2722 * t3028;
t3000 = t2731 * t2509;
t2999 = t2737 * t2509;
t2998 = t2732 * t2549;
t2997 = t2738 * t2549;
t2995 = -t2717 + t3066;
t2247 = -pkin(5) * t2853 + t2558 * pkin(14) - t2604 * t2545 + t2272;
t2284 = pkin(5) * t3096 - t2470 * pkin(14) + t2345;
t2186 = t2247 * t2730 - t2736 * t2284;
t2187 = t2247 * t2736 + t2284 * t2730;
t2121 = t2186 * t2730 + t2736 * t2187;
t2191 = t2271 * t2731 + t2737 * t2272;
t2994 = -t2499 * t2730 + t2736 * t2558;
t2992 = -t2713 * t2735 - t2741 * t2714;
t2987 = -pkin(5) * t2246 + pkin(14) * t2121;
t2710 = qJDD(1) * t2741 - t2735 * t3081;
t2986 = -pkin(9) * t2710 - g(3) * t2735;
t2694 = -t3002 - t2716;
t2669 = -t2694 * t2734 - t3032;
t2984 = pkin(10) * t2669 - t3040;
t2673 = t2700 * t2740 - t3035;
t2983 = pkin(10) * t2673 + t3039;
t2641 = -t2691 - t2677;
t2597 = t2641 * t2739 - t3093;
t2982 = pkin(11) * t2597 + t3050;
t2599 = t2733 * t3088 + t3045;
t2981 = pkin(11) * t2599 - t3051;
t2579 = -t2976 - t2630;
t2506 = t2579 * t2738 - t3094;
t2980 = pkin(12) * t2506 + t3059;
t2585 = -t2631 - t2976;
t2507 = -t2585 * t2732 + t3053;
t2979 = pkin(12) * t2507 - t3060;
t2095 = t2121 * t2731 - t2246 * t2737;
t2096 = t2121 * t2737 + t2246 * t2731;
t2120 = -t2186 * t2736 + t2187 * t2730;
t2970 = t2096 * t2732 - t2120 * t2738;
t2029 = t2095 * t2727 + t2724 * t2970;
t2030 = -t2095 * t2724 + t2727 * t2970;
t2065 = t2096 * t2738 + t2120 * t2732;
t2974 = t2030 * t2739 + t2065 * t2733;
t2002 = -t2029 * t2725 + t2728 * t2974;
t2010 = -t2030 * t2733 + t2065 * t2739;
t2975 = t2002 * t2740 + t2010 * t2734;
t2190 = -t2271 * t2737 + t2272 * t2731;
t2956 = t2191 * t2732 - t2345 * t2738;
t2111 = t2190 * t2727 + t2724 * t2956;
t2112 = -t2190 * t2724 + t2727 * t2956;
t2162 = t2191 * t2738 + t2345 * t2732;
t2967 = t2112 * t2739 + t2162 * t2733;
t2053 = -t2111 * t2725 + t2728 * t2967;
t2078 = -t2112 * t2733 + t2162 * t2739;
t2973 = t2053 * t2740 + t2078 * t2734;
t2397 = (-qJD(6) + t2601) * t2572 + t2994;
t2897 = -t2499 * t2736 - t2558 * t2730;
t2423 = -qJD(6) * t2570 - t2897;
t2531 = t2601 * t2570;
t2399 = t2423 + t2531;
t2321 = t2397 * t2736 + t2399 * t2730;
t2478 = t2568 + t2569;
t2285 = t2321 * t2731 + t2478 * t2737;
t2286 = t2321 * t2737 - t2478 * t2731;
t2319 = t2397 * t2730 - t2399 * t2736;
t2942 = t2286 * t2732 - t2319 * t2738;
t2169 = t2285 * t2727 + t2724 * t2942;
t2170 = -t2285 * t2724 + t2727 * t2942;
t2215 = t2286 * t2738 + t2319 * t2732;
t2961 = t2170 * t2739 + t2215 * t2733;
t2082 = -t2169 * t2725 + t2728 * t2961;
t2127 = -t2170 * t2733 + t2215 * t2739;
t2972 = t2082 * t2740 + t2127 * t2734;
t2422 = -qJD(6) * t2572 + t2994;
t2532 = t2601 * t2572;
t2396 = t2422 - t2532;
t2398 = t2423 - t2531;
t2320 = t2396 * t2736 - t2398 * t2730;
t2508 = t2569 - t2568;
t2298 = t2320 * t2731 - t2508 * t2737;
t2299 = t2320 * t2737 + t2508 * t2731;
t2318 = t2396 * t2730 + t2398 * t2736;
t2938 = t2299 * t2732 - t2318 * t2738;
t2172 = t2298 * t2727 + t2724 * t2938;
t2173 = -t2298 * t2724 + t2727 * t2938;
t2223 = t2299 * t2738 + t2318 * t2732;
t2960 = t2173 * t2739 + t2223 * t2733;
t2085 = -t2172 * t2725 + t2728 * t2960;
t2132 = -t2173 * t2733 + t2223 * t2739;
t2971 = t2085 * t2740 + t2132 * t2734;
t2485 = -t2600 - t2568;
t2374 = t2485 * t2736 - t3103;
t2305 = t2374 * t2731 + t2396 * t2737;
t2306 = t2374 * t2737 - t2396 * t2731;
t2373 = t2485 * t2730 + t3101;
t2936 = t2306 * t2732 - t2373 * t2738;
t2198 = t2305 * t2727 + t2724 * t2936;
t2199 = -t2305 * t2724 + t2727 * t2936;
t2253 = t2306 * t2738 + t2373 * t2732;
t2955 = t2199 * t2739 + t2253 * t2733;
t2103 = -t2198 * t2725 + t2728 * t2955;
t2148 = -t2199 * t2733 + t2253 * t2739;
t2969 = t2103 * t2740 + t2148 * t2734;
t2500 = -t2569 - t2600;
t2382 = -t2500 * t2730 - t3057;
t2400 = (qJD(6) + t2601) * t2570 + t2897;
t2311 = t2382 * t2731 + t2400 * t2737;
t2312 = t2382 * t2737 - t2400 * t2731;
t2381 = t2500 * t2736 - t3058;
t2934 = t2312 * t2732 - t2381 * t2738;
t2204 = t2311 * t2727 + t2724 * t2934;
t2205 = -t2311 * t2724 + t2727 * t2934;
t2256 = t2312 * t2738 + t2381 * t2732;
t2954 = t2205 * t2739 + t2256 * t2733;
t2107 = -t2204 * t2725 + t2728 * t2954;
t2154 = -t2205 * t2733 + t2256 * t2739;
t2968 = t2107 * t2740 + t2154 * t2734;
t2530 = -t2569 + t2600;
t2403 = -t2530 * t2730 + t3101;
t2324 = -t2399 * t2737 + t2403 * t2731;
t2326 = t2399 * t2731 + t2403 * t2737;
t2401 = t2530 * t2736 + t3103;
t2932 = t2326 * t2732 - t2401 * t2738;
t2206 = t2324 * t2727 + t2724 * t2932;
t2208 = -t2324 * t2724 + t2727 * t2932;
t2265 = t2326 * t2738 + t2401 * t2732;
t2953 = t2208 * t2739 + t2265 * t2733;
t2115 = -t2206 * t2725 + t2728 * t2953;
t2157 = -t2208 * t2733 + t2265 * t2739;
t2966 = t2115 * t2740 + t2157 * t2734;
t2395 = -t2422 - t2532;
t2529 = t2568 - t2600;
t2404 = t2529 * t2736 - t3058;
t2325 = t2395 * t2737 + t2404 * t2731;
t2327 = -t2395 * t2731 + t2404 * t2737;
t2402 = t2529 * t2730 + t3057;
t2931 = t2327 * t2732 - t2402 * t2738;
t2207 = t2325 * t2727 + t2724 * t2931;
t2209 = -t2325 * t2724 + t2727 * t2931;
t2266 = t2327 * t2738 + t2402 * t2732;
t2952 = t2209 * t2739 + t2266 * t2733;
t2116 = -t2207 * t2725 + t2728 * t2952;
t2158 = -t2209 * t2733 + t2266 * t2739;
t2965 = t2116 * t2740 + t2158 * t2734;
t2392 = -t2422 * t2730 + t2570 * t3048;
t2357 = t2392 * t2731 + t2999;
t2359 = t2392 * t2737 - t3000;
t2391 = -t2422 * t2736 - t2570 * t3049;
t2922 = t2359 * t2732 + t2391 * t2738;
t2237 = t2357 * t2727 + t2724 * t2922;
t2239 = -t2357 * t2724 + t2727 * t2922;
t2296 = t2359 * t2738 - t2391 * t2732;
t2947 = t2239 * t2739 + t2296 * t2733;
t2141 = -t2237 * t2725 + t2728 * t2947;
t2181 = -t2239 * t2733 + t2296 * t2739;
t2964 = t2141 * t2740 + t2181 * t2734;
t2394 = t2423 * t2736 - t2572 * t3049;
t2358 = t2394 * t2731 - t2999;
t2360 = t2394 * t2737 + t3000;
t2393 = t2423 * t2730 + t2572 * t3048;
t2921 = t2360 * t2732 - t2393 * t2738;
t2238 = t2358 * t2727 + t2724 * t2921;
t2240 = -t2358 * t2724 + t2727 * t2921;
t2297 = t2360 * t2738 + t2393 * t2732;
t2946 = t2240 * t2739 + t2297 * t2733;
t2142 = -t2238 * t2725 + t2728 * t2946;
t2182 = -t2240 * t2733 + t2297 * t2739;
t2963 = t2142 * t2740 + t2182 * t2734;
t2371 = t3016 + (t2724 * t3014 + t3042) * pkin(3) * t3041 + (t2727 * t2746 + t2724 * (pkin(3) * t2780 + t2750) + (t2724 * t3085 + t2727 * t3086) * pkin(12)) * t2732;
t2918 = -t2370 * t2738 + t2371 * t2732;
t2254 = -t2415 * t2727 + t2724 * t2918;
t2255 = t2415 * t2724 + t2727 * t2918;
t2289 = t2370 * t2732 + t2371 * t2738;
t2943 = t2255 * t2739 + t2289 * t2733;
t2147 = -t2254 * t2725 + t2728 * t2943;
t2195 = -t2255 * t2733 + t2289 * t2739;
t2962 = t2147 * t2740 + t2195 * t2734;
t2469 = t2606 * t2632 + t2993;
t2471 = t2499 + t2577;
t2384 = t2469 * t2731 - t2471 * t2737;
t2386 = t2469 * t2737 + t2471 * t2731;
t2514 = t2602 + t2603;
t2914 = t2386 * t2732 + t2514 * t2738;
t2287 = t2384 * t2727 + t2724 * t2914;
t2288 = -t2384 * t2724 + t2727 * t2914;
t2353 = t2386 * t2738 - t2514 * t2732;
t2941 = t2288 * t2739 + t2353 * t2733;
t2176 = -t2287 * t2725 + t2728 * t2941;
t2231 = -t2288 * t2733 + t2353 * t2739;
t2959 = t2176 * t2740 + t2231 * t2734;
t2462 = (-t2570 * t2736 + t2572 * t2730) * t2601;
t2407 = t2462 * t2731 - t2497 * t2737;
t2408 = t2462 * t2737 + t2497 * t2731;
t2461 = (-t2570 * t2730 - t2572 * t2736) * t2601;
t2913 = t2408 * t2732 - t2461 * t2738;
t2292 = t2407 * t2727 + t2724 * t2913;
t2293 = -t2407 * t2724 + t2727 * t2913;
t2351 = t2408 * t2738 + t2461 * t2732;
t2940 = t2293 * t2739 + t2351 * t2733;
t2178 = -t2292 * t2725 + t2728 * t2940;
t2232 = -t2293 * t2733 + t2351 * t2739;
t2958 = t2178 * t2740 + t2232 * t2734;
t2383 = t2470 * t2737 - t2731 * t3096;
t2385 = -t2470 * t2731 - t2737 * t3096;
t2548 = t2603 - t2602;
t2915 = t2385 * t2732 - t2548 * t2738;
t2294 = t2383 * t2727 + t2724 * t2915;
t2295 = -t2383 * t2724 + t2727 * t2915;
t2366 = t2385 * t2738 + t2548 * t2732;
t2939 = t2295 * t2739 + t2366 * t2733;
t2184 = -t2294 * t2725 + t2728 * t2939;
t2241 = -t2295 * t2733 + t2366 * t2739;
t2957 = t2184 * t2740 + t2241 * t2734;
t2533 = -t2853 - t2602;
t2435 = t2533 * t2731 + t3100;
t2436 = t2533 * t2737 - t3102;
t2908 = t2436 * t2732 - t2738 * t3096;
t2328 = t2435 * t2727 + t2724 * t2908;
t2329 = -t2435 * t2724 + t2727 * t2908;
t2369 = t2436 * t2738 + t2732 * t3096;
t2930 = t2329 * t2739 + t2369 * t2733;
t2211 = -t2328 * t2725 + t2728 * t2930;
t2258 = -t2329 * t2733 + t2369 * t2739;
t2951 = t2211 * t2740 + t2258 * t2734;
t2540 = -t2603 - t2853;
t2443 = t2540 * t2737 - t3056;
t2444 = -t2540 * t2731 - t3055;
t2472 = (0.2e1 * qJD(5) + t2632) * t2604 + t2883;
t2905 = t2444 * t2732 + t2472 * t2738;
t2332 = t2443 * t2727 + t2724 * t2905;
t2333 = -t2443 * t2724 + t2727 * t2905;
t2372 = t2444 * t2738 - t2472 * t2732;
t2929 = t2333 * t2739 + t2372 * t2733;
t2213 = -t2332 * t2725 + t2728 * t2929;
t2269 = -t2333 * t2733 + t2372 * t2739;
t2950 = t2213 * t2740 + t2269 * t2734;
t2575 = -t2603 + t2853;
t2455 = t2575 * t2737 + t3102;
t2457 = -t2575 * t2731 + t3100;
t2901 = t2457 * t2732 - t2471 * t2738;
t2338 = t2455 * t2727 + t2724 * t2901;
t2340 = -t2455 * t2724 + t2727 * t2901;
t2379 = t2457 * t2738 + t2471 * t2732;
t2927 = t2340 * t2739 + t2379 * t2733;
t2219 = -t2338 * t2725 + t2728 * t2927;
t2275 = -t2340 * t2733 + t2379 * t2739;
t2949 = t2219 * t2740 + t2275 * t2734;
t2574 = t2602 - t2853;
t2456 = t2574 * t2731 + t3055;
t2458 = t2574 * t2737 - t3056;
t2467 = -t2578 + t2847;
t2900 = t2458 * t2732 + t2467 * t2738;
t2339 = t2456 * t2727 + t2724 * t2900;
t2341 = -t2456 * t2724 + t2727 * t2900;
t2380 = t2458 * t2738 - t2467 * t2732;
t2926 = t2341 * t2739 + t2380 * t2733;
t2220 = -t2339 * t2725 + t2728 * t2926;
t2276 = -t2341 * t2733 + t2380 * t2739;
t2948 = t2220 * t2740 + t2276 * t2734;
t2789 = t2731 * t2577;
t2463 = -t2737 * t2847 + t2789;
t2787 = t2737 * t2577;
t2464 = t2731 * t2847 + t2787;
t2849 = t2464 * t2732 + t2997;
t2362 = t2463 * t2727 + t2724 * t2849;
t2364 = -t2463 * t2724 + t2727 * t2849;
t2420 = t2464 * t2738 - t2998;
t2920 = t2364 * t2739 + t2420 * t2733;
t2250 = -t2362 * t2725 + t2728 * t2920;
t2314 = -t2364 * t2733 + t2420 * t2739;
t2945 = t2250 * t2740 + t2314 * t2734;
t2786 = t2737 * t2578;
t2465 = t2731 * t2499 + t2786;
t2788 = t2731 * t2578;
t2466 = t2737 * t2499 - t2788;
t2848 = t2466 * t2732 - t2997;
t2363 = t2465 * t2727 + t2724 * t2848;
t2365 = -t2465 * t2724 + t2727 * t2848;
t2421 = t2466 * t2738 + t2998;
t2919 = t2365 * t2739 + t2421 * t2733;
t2251 = -t2363 * t2725 + t2728 * t2919;
t2315 = -t2365 * t2733 + t2421 * t2739;
t2944 = t2251 * t2740 + t2315 * t2734;
t2510 = -t2789 - t2786;
t2511 = -t2787 + t2788;
t2896 = t2511 * t2732 - t2558 * t2738;
t2413 = t2510 * t2727 + t2724 * t2896;
t2414 = -t2510 * t2724 + t2727 * t2896;
t2475 = t2511 * t2738 + t2558 * t2732;
t2912 = t2414 * t2739 + t2475 * t2733;
t2303 = -t2413 * t2725 + t2728 * t2912;
t2352 = -t2414 * t2733 + t2475 * t2739;
t2937 = t2303 * t2740 + t2352 * t2734;
t2564 = -t2630 - t2631;
t2524 = t2609 + t2559;
t2757 = t2850 - t2760;
t2894 = -t2524 * t2738 + t2732 * t2757;
t2416 = t2564 * t2727 + t2724 * t2894;
t2417 = -t2564 * t2724 + t2727 * t2894;
t2454 = t2524 * t2732 + t2738 * t2757;
t2911 = t2417 * t2739 + t2454 * t2733;
t2308 = -t2416 * t2725 + t2728 * t2911;
t2356 = -t2417 * t2733 + t2454 * t2739;
t2935 = t2308 * t2740 + t2356 * t2734;
t2593 = t2631 - t2630;
t2895 = -t2519 * t2732 + t2738 * t3099;
t2426 = t2593 * t2727 + t2724 * t2895;
t2427 = -t2593 * t2724 + t2727 * t2895;
t2453 = -t2519 * t2738 - t2732 * t3099;
t2909 = t2427 * t2739 + t2453 * t2733;
t2323 = -t2426 * t2725 + t2728 * t2909;
t2361 = -t2427 * t2733 + t2453 * t2739;
t2933 = t2323 * t2740 + t2361 * t2734;
t2884 = t2579 * t2732 + t3092;
t2439 = t2519 * t2727 + t2724 * t2884;
t2440 = -t2519 * t2724 + t2727 * t2884;
t2907 = t2440 * t2739 + t2506 * t2733;
t2337 = -t2439 * t2725 + t2728 * t2907;
t2390 = -t2440 * t2733 + t2506 * t2739;
t2928 = t2337 * t2740 + t2390 * t2734;
t2887 = t2585 * t2738 + t3054;
t2441 = t2724 * t2887 + t2727 * t3099;
t2442 = -t2724 * t3099 + t2727 * t2887;
t2906 = t2442 * t2739 + t2507 * t2733;
t2343 = -t2441 * t2725 + t2728 * t2906;
t2405 = -t2442 * t2733 + t2507 * t2739;
t2925 = t2343 * t2740 + t2405 * t2734;
t2608 = -t2631 + t2976;
t2885 = t2608 * t2738 + t3094;
t2449 = t2524 * t2727 + t2724 * t2885;
t2451 = -t2524 * t2724 + t2727 * t2885;
t2515 = -t2608 * t2732 + t3092;
t2903 = t2451 * t2739 + t2515 * t2733;
t2349 = -t2449 * t2725 + t2728 * t2903;
t2409 = -t2451 * t2733 + t2515 * t2739;
t2924 = t2349 * t2740 + t2409 * t2734;
t2607 = t2630 - t2976;
t2886 = t2607 * t2732 - t3053;
t2450 = t2724 * t2886 + t2727 * t2757;
t2452 = -t2724 * t2757 + t2727 * t2886;
t2516 = t2607 * t2738 + t3054;
t2902 = t2452 * t2739 + t2516 * t2733;
t2350 = -t2450 * t2725 + t2728 * t2902;
t2410 = -t2452 * t2733 + t2516 * t2739;
t2923 = t2350 * t2740 + t2410 * t2734;
t2759 = t2738 * t2760;
t2852 = t2732 * t2985;
t2486 = -t2724 * t2759 + (-t2727 * t2634 + t2724 * t2852) * t2632;
t2487 = -t2727 * t2759 + (t2724 * t2634 + t2727 * t2852) * t2632;
t2834 = t2738 * t2609;
t2517 = t2732 * t2760 + t2834;
t2899 = t2487 * t2739 + t2517 * t2733;
t2377 = -t2486 * t2725 + t2728 * t2899;
t2424 = -t2487 * t2733 + t2517 * t2739;
t2917 = t2377 * t2740 + t2424 * t2734;
t2851 = t2738 * t2985;
t2488 = t2724 * t3052 + (t2727 * t2632 + t2724 * t2851) * t2634;
t2489 = t2727 * t3052 + (-t2724 * t2632 + t2727 * t2851) * t2634;
t2835 = t2732 * t2850;
t2518 = t2738 * t2559 - t2835;
t2898 = t2489 * t2739 + t2518 * t2733;
t2378 = -t2488 * t2725 + t2728 * t2898;
t2425 = -t2489 * t2733 + t2518 * t2739;
t2916 = t2378 * t2740 + t2425 * t2734;
t2527 = t2727 * t2626 + t2724 * t3083;
t2528 = -t2724 * t2626 + t2727 * t3083;
t2550 = -t2834 + t2835;
t2893 = t2528 * t2739 + t2550 * t2733;
t2419 = -t2527 * t2725 + t2728 * t2893;
t2479 = -t2528 * t2733 + t2550 * t2739;
t2910 = t2419 * t2740 + t2479 * t2734;
t2781 = t2729 * t2784;
t2754 = t2728 * (-g(3) * t3022 + t2740 * t2781 + t2977) + t2725 * (-pkin(2) * t2978 - t2690);
t2758 = t2728 * (-qJD(2) * t2990 + t2717 * t2832) + t2725 * (-qJD(2) * t2989 - t2832 * t3003);
t2782 = t2793 - t3070;
t2778 = t2740 * t2782 - t2718;
t2768 = pkin(2) * t2700 + t2778;
t2794 = -t2721 * t3009 + t2726 * t3075;
t2861 = t2728 * (t2721 * t3080 + pkin(1));
t2538 = t2733 * t2768 - t2754 * t2739 + (-t2739 * t2758 + t2775) * pkin(11) + (t2733 * t2838 - t3082 * t2739 + ((t2733 * t2794 - t2739 * t2861) * qJD(1) + (-pkin(2) * t3025 + pkin(11) * t3021) * t3031) * qJD(1)) * t2734;
t2539 = t2739 * t2768 + t2754 * t2733 + (t2733 * t2758 + t2774) * pkin(11) + (t2739 * t2838 + t3082 * t2733 + ((t2733 * t2861 + t2739 * t2794) * qJD(1) + (pkin(2) * t3027 + pkin(11) * t3020) * t3031) * qJD(1)) * t2734;
t2891 = -t2538 * t2739 + t2539 * t2733;
t2448 = t2582 * t2725 + t2728 * t2891;
t2484 = t2538 * t2733 + t2539 * t2739;
t2904 = t2448 * t2740 + t2484 * t2734;
t2621 = -t2662 + t2764;
t2770 = (-qJD(3) + t2693) * t2680 - t2780;
t2876 = -t2621 * t2739 + t2733 * t2770;
t2537 = -t2635 * t2725 + t2728 * t2876;
t2566 = t2621 * t2733 + t2739 * t2770;
t2892 = t2537 * t2740 + t2566 * t2734;
t2655 = t2678 - t2677;
t2620 = t2662 + t2764;
t2877 = -t2616 * t2733 + t2620 * t2739;
t2544 = -t2655 * t2725 + t2728 * t2877;
t2565 = -t2616 * t2739 - t2620 * t2733;
t2890 = t2544 * t2740 + t2565 * t2734;
t2872 = t2641 * t2733 + t3091;
t2547 = -t2616 * t2725 + t2728 * t2872;
t2889 = t2547 * t2740 + t2597 * t2734;
t2619 = t2679 * t3014 + t2766;
t2875 = -t2739 * t3088 + t3046;
t2552 = -t2619 * t2725 + t2728 * t2875;
t2888 = t2552 * t2740 + t2599 * t2734;
t2661 = -t2678 + t2691;
t2873 = t2661 * t2739 + t3093;
t2562 = -t2621 * t2725 + t2728 * t2873;
t2610 = -t2661 * t2733 + t3091;
t2882 = t2562 * t2740 + t2610 * t2734;
t2660 = t2677 - t2691;
t2874 = t2660 * t2733 - t3045;
t2563 = -t2725 * t2770 + t2728 * t2874;
t2611 = t2660 * t2739 + t3046;
t2881 = t2563 * t2740 + t2611 * t2734;
t2771 = t2739 * t2776;
t2587 = -t2728 * t2771 + (-t2680 * t2725 - t2693 * t3021) * t2679;
t2614 = -t2662 * t2739 + t2733 * t2776;
t2880 = t2587 * t2740 + t2614 * t2734;
t2763 = t2733 * t2764;
t2589 = t2728 * t2763 + (t2679 * t2725 + t2693 * t3020) * t2680;
t2615 = t2739 * (t2783 + t3044) + (t2774 - t3038) * t2733;
t2879 = t2589 * t2740 + t2615 * t2734;
t2843 = t2693 * (t2679 * t2733 - t2680 * t2739);
t2613 = -t2725 * t2777 + t2728 * t2843;
t2627 = (t2679 * t2739 + t2680 * t2733) * t2693;
t2878 = t2613 * t2740 + t2627 * t2734;
t2667 = t2734 * t2782 + (t2726 * g(3) - t2781) * t2740;
t2668 = t2734 * t2781 + t2778;
t2871 = -t2667 * t2740 + t2668 * t2734;
t2636 = t2667 * t2734 + t2668 * t2740;
t2704 = t2717 * t3003;
t2684 = t2704 + t2792;
t2703 = t2717 * t3004;
t2687 = -t2703 + t2978;
t2869 = t2684 * t2740 + t2687 * t2734;
t2685 = -t2704 + t2792;
t2686 = t2703 + t2978;
t2868 = -t2685 * t2740 + t2686 * t2734;
t2867 = t2694 * t2740 - t3033;
t2698 = t2716 - t3002;
t2866 = t2698 * t2740 + t3035;
t2865 = t2700 * t2734 + t3034;
t2699 = -t2716 + t3001;
t2864 = t2699 * t2734 + t3032;
t2863 = t2713 * t2741 - t2735 * t2714;
t2862 = t2726 * t2991;
t2840 = pkin(5) * t2396 + pkin(14) * t2374 - t3063;
t2839 = pkin(5) * t2400 + pkin(14) * t2382 + t3064;
t2016 = pkin(13) * t2096 + (-pkin(14) * t2731 + t3007) * t2120;
t2033 = -pkin(13) * t2095 + (-pkin(14) * t2737 + t3077) * t2120;
t2058 = -pkin(4) * t2095 - t2987;
t2801 = pkin(12) * t2065 + t2033 * t2732 + t2058 * t2738;
t1982 = pkin(3) * t2030 + t2016 * t2727 + t2724 * t2801;
t2001 = t2029 * t2728 + t2725 * t2974;
t1983 = -pkin(3) * t2029 - t2016 * t2724 + t2727 * t2801;
t1987 = t2033 * t2738 - t2058 * t2732 + (-t2029 * t2724 - t2030 * t2727) * pkin(12);
t2814 = pkin(11) * t2010 + t1983 * t2739 + t1987 * t2733;
t1962 = -pkin(2) * t2001 - t1982 * t2725 + t2728 * t2814;
t1967 = -t1983 * t2733 + t1987 * t2739 + (-t2001 * t2725 - t2002 * t2728) * pkin(11);
t1984 = -t2002 * t2734 + t2010 * t2740;
t2831 = pkin(10) * t1984 + t1962 * t2740 + t1967 * t2734;
t2104 = -pkin(14) * t2319 - t2120;
t2077 = pkin(13) * t2286 + t2104 * t2731 + t2319 * t3007;
t2083 = -pkin(13) * t2285 + t2104 * t2737 + t2319 * t3077;
t2790 = pkin(5) * t2478 + pkin(14) * t2321 + t2121;
t2086 = -pkin(4) * t2285 - t2790;
t2800 = pkin(12) * t2215 + t2083 * t2732 + t2086 * t2738;
t2011 = pkin(3) * t2170 + t2077 * t2727 + t2724 * t2800;
t2081 = t2169 * t2728 + t2725 * t2961;
t2012 = -pkin(3) * t2169 - t2077 * t2724 + t2727 * t2800;
t2019 = t2083 * t2738 - t2086 * t2732 + (-t2169 * t2724 - t2170 * t2727) * pkin(12);
t2813 = pkin(11) * t2127 + t2012 * t2739 + t2019 * t2733;
t1979 = -pkin(2) * t2081 - t2011 * t2725 + t2728 * t2813;
t1988 = -t2012 * t2733 + t2019 * t2739 + (-t2081 * t2725 - t2082 * t2728) * pkin(11);
t2060 = -t2082 * t2734 + t2127 * t2740;
t2830 = pkin(10) * t2060 + t1979 * t2740 + t1988 * t2734;
t2163 = -pkin(4) * t2345 + pkin(13) * t2191;
t2785 = pkin(12) * t2162 + (-pkin(13) * t2732 - t3078) * t2190;
t2036 = pkin(3) * t2112 + t2163 * t2727 + t2724 * t2785;
t2052 = t2111 * t2728 + t2725 * t2967;
t2037 = -pkin(3) * t2111 - t2163 * t2724 + t2727 * t2785;
t2039 = (-pkin(13) * t2738 + t3079) * t2190 + (-t2111 * t2724 - t2112 * t2727) * pkin(12);
t2810 = pkin(11) * t2078 + t2037 * t2739 + t2039 * t2733;
t1986 = -pkin(2) * t2052 - t2036 * t2725 + t2728 * t2810;
t1993 = -t2037 * t2733 + t2039 * t2739 + (-t2052 * t2725 - t2053 * t2728) * pkin(11);
t2015 = -t2053 * t2734 + t2078 * t2740;
t2829 = pkin(10) * t2015 + t1986 * t2740 + t1993 * t2734;
t2166 = -pkin(5) * t2373 + t2186;
t2214 = -pkin(14) * t2373 + t3064;
t2097 = -pkin(4) * t2373 + pkin(13) * t2306 + t2166 * t2737 + t2214 * t2731;
t2105 = -pkin(13) * t2305 - t2166 * t2731 + t2214 * t2737;
t2159 = -pkin(4) * t2305 - t2840;
t2799 = pkin(12) * t2253 + t2105 * t2732 + t2159 * t2738;
t2024 = pkin(3) * t2199 + t2097 * t2727 + t2724 * t2799;
t2102 = t2198 * t2728 + t2725 * t2955;
t2025 = -pkin(3) * t2198 - t2097 * t2724 + t2727 * t2799;
t2054 = t2105 * t2738 - t2159 * t2732 + (-t2198 * t2724 - t2199 * t2727) * pkin(12);
t2812 = pkin(11) * t2148 + t2025 * t2739 + t2054 * t2733;
t1990 = -pkin(2) * t2102 - t2024 * t2725 + t2728 * t2812;
t2004 = -t2025 * t2733 + t2054 * t2739 + (-t2102 * t2725 - t2103 * t2728) * pkin(11);
t2073 = -t2103 * t2734 + t2148 * t2740;
t2828 = pkin(10) * t2073 + t1990 * t2740 + t2004 * t2734;
t2168 = -pkin(5) * t2381 + t2187;
t2216 = -pkin(14) * t2381 + t3063;
t2100 = -pkin(4) * t2381 + pkin(13) * t2312 + t2168 * t2737 + t2216 * t2731;
t2108 = -pkin(13) * t2311 - t2168 * t2731 + t2216 * t2737;
t2161 = -pkin(4) * t2311 - t2839;
t2798 = pkin(12) * t2256 + t2108 * t2732 + t2161 * t2738;
t2026 = pkin(3) * t2205 + t2100 * t2727 + t2724 * t2798;
t2106 = t2204 * t2728 + t2725 * t2954;
t2027 = -pkin(3) * t2204 - t2100 * t2724 + t2727 * t2798;
t2057 = t2108 * t2738 - t2161 * t2732 + (-t2204 * t2724 - t2205 * t2727) * pkin(12);
t2811 = pkin(11) * t2154 + t2027 * t2739 + t2057 * t2733;
t1992 = -pkin(2) * t2106 - t2026 * t2725 + t2728 * t2811;
t2005 = -t2027 * t2733 + t2057 * t2739 + (-t2106 * t2725 - t2107 * t2728) * pkin(11);
t2074 = -t2107 * t2734 + t2154 * t2740;
t2827 = pkin(10) * t2074 + t1992 * t2740 + t2005 * t2734;
t2167 = pkin(4) * t2514 + pkin(13) * t2386 + t2191;
t2171 = -pkin(13) * t2384 - t2190;
t2791 = pkin(12) * t2353 + t2171 * t2732 - t2384 * t3078;
t2079 = pkin(3) * t2288 + t2167 * t2727 + t2724 * t2791;
t2175 = t2287 * t2728 + t2725 * t2941;
t2080 = -pkin(3) * t2287 - t2167 * t2724 + t2727 * t2791;
t2117 = t2384 * t3079 + t2171 * t2738 + (-t2287 * t2724 - t2288 * t2727) * pkin(12);
t2809 = pkin(11) * t2231 + t2080 * t2739 + t2117 * t2733;
t2014 = -pkin(2) * t2175 - t2079 * t2725 + t2728 * t2809;
t2028 = -t2080 * t2733 + t2117 * t2739 + (-t2175 * t2725 - t2176 * t2728) * pkin(11);
t2137 = -t2176 * t2734 + t2231 * t2740;
t2826 = pkin(10) * t2137 + t2014 * t2740 + t2028 * t2734;
t2279 = -pkin(4) * t3096 + pkin(13) * t2436 - t3061;
t2243 = -pkin(4) * t2435 + t2271;
t2304 = -pkin(13) * t2435 + t3062;
t2797 = pkin(12) * t2369 + t2243 * t2738 + t2304 * t2732;
t2128 = pkin(3) * t2329 + t2279 * t2727 + t2724 * t2797;
t2210 = t2328 * t2728 + t2725 * t2930;
t2129 = -pkin(3) * t2328 - t2279 * t2724 + t2727 * t2797;
t2144 = -t2243 * t2732 + t2304 * t2738 + (-t2328 * t2724 - t2329 * t2727) * pkin(12);
t2808 = pkin(11) * t2258 + t2129 * t2739 + t2144 * t2733;
t2032 = -pkin(2) * t2210 - t2128 * t2725 + t2728 * t2808;
t2059 = -t2129 * t2733 + t2144 * t2739 + (-t2210 * t2725 - t2211 * t2728) * pkin(11);
t2156 = -t2211 * t2734 + t2258 * t2740;
t2825 = pkin(10) * t2156 + t2032 * t2740 + t2059 * t2734;
t2281 = pkin(4) * t2472 + pkin(13) * t2444 + t3062;
t2244 = -pkin(4) * t2443 + t2272;
t2309 = -pkin(13) * t2443 + t3061;
t2796 = pkin(12) * t2372 + t2244 * t2738 + t2309 * t2732;
t2130 = pkin(3) * t2333 + t2281 * t2727 + t2724 * t2796;
t2212 = t2332 * t2728 + t2725 * t2929;
t2131 = -pkin(3) * t2332 - t2281 * t2724 + t2727 * t2796;
t2145 = -t2244 * t2732 + t2309 * t2738 + (-t2332 * t2724 - t2333 * t2727) * pkin(12);
t2807 = pkin(11) * t2269 + t2131 * t2739 + t2145 * t2733;
t2035 = -pkin(2) * t2212 - t2130 * t2725 + t2728 * t2807;
t2061 = -t2131 * t2733 + t2145 * t2739 + (-t2212 * t2725 - t2213 * t2728) * pkin(11);
t2160 = -t2213 * t2734 + t2269 * t2740;
t2824 = pkin(10) * t2160 + t2035 * t2740 + t2061 * t2734;
t2146 = t2254 * t2728 + t2725 * t2943;
t2197 = pkin(3) * t2255 + t2289 * t3072;
t2174 = (-t2254 * t2724 - t2255 * t2727) * pkin(12);
t2196 = -pkin(3) * t2254 + t2289 * t3071;
t2806 = pkin(11) * t2195 + t2174 * t2733 + t2196 * t2739;
t2056 = -pkin(2) * t2146 - t2197 * t2725 + t2728 * t2806;
t2062 = t2174 * t2739 - t2196 * t2733 + (-t2146 * t2725 - t2147 * t2728) * pkin(11);
t2101 = -t2147 * t2734 + t2195 * t2740;
t2823 = pkin(10) * t2101 + t2056 * t2740 + t2062 * t2734;
t2795 = pkin(12) * t2454 + t2289;
t2235 = pkin(3) * t2417 + t2724 * t2795;
t2307 = t2416 * t2728 + t2725 * t2911;
t2226 = (-t2416 * t2724 - t2417 * t2727) * pkin(12) - t2918;
t2236 = -pkin(3) * t2416 + t2727 * t2795;
t2805 = pkin(11) * t2356 + t2226 * t2733 + t2236 * t2739;
t2099 = -pkin(2) * t2307 - t2235 * t2725 + t2728 * t2805;
t2122 = t2226 * t2739 - t2236 * t2733 + (-t2307 * t2725 - t2308 * t2728) * pkin(11);
t2245 = -t2308 * t2734 + t2356 * t2740;
t2822 = pkin(10) * t2245 + t2099 * t2740 + t2122 * t2734;
t2259 = pkin(3) * t2440 - t2370 * t2727 + t2724 * t2980;
t2336 = t2439 * t2728 + t2725 * t2907;
t2260 = -pkin(3) * t2439 + t2370 * t2724 + t2727 * t2980;
t2310 = -t3060 + (-t2439 * t2724 - t2440 * t2727) * pkin(12);
t2804 = pkin(11) * t2390 + t2260 * t2739 + t2310 * t2733;
t2134 = -pkin(2) * t2336 - t2259 * t2725 + t2728 * t2804;
t2153 = -t2260 * t2733 + t2310 * t2739 + (-t2336 * t2725 - t2337 * t2728) * pkin(11);
t2280 = -t2337 * t2734 + t2390 * t2740;
t2821 = pkin(10) * t2280 + t2134 * t2740 + t2153 * t2734;
t2267 = pkin(3) * t2442 - t2371 * t2727 + t2724 * t2979;
t2342 = t2441 * t2728 + t2725 * t2906;
t2268 = -pkin(3) * t2441 + t2371 * t2724 + t2727 * t2979;
t2313 = -t3059 + (-t2441 * t2724 - t2442 * t2727) * pkin(12);
t2803 = pkin(11) * t2405 + t2268 * t2739 + t2313 * t2733;
t2136 = -pkin(2) * t2342 - t2267 * t2725 + t2728 * t2803;
t2155 = -t2268 * t2733 + t2313 * t2739 + (-t2342 * t2725 - t2343 * t2728) * pkin(11);
t2282 = -t2343 * t2734 + t2405 * t2740;
t2820 = pkin(10) * t2282 + t2136 * t2740 + t2155 * t2734;
t2447 = -t2582 * t2728 + t2725 * t2891;
t2368 = (-t2447 * t2725 - t2448 * t2728) * pkin(11);
t2387 = -t2448 * t2734 + t2484 * t2740;
t2388 = -pkin(2) * t2447 + t2484 * t3073;
t2819 = pkin(10) * t2387 + t2368 * t2734 + t2388 * t2740;
t2536 = t2635 * t2728 + t2725 * t2876;
t2406 = (-t2536 * t2725 - t2537 * t2728) * pkin(11) - t2891;
t2802 = pkin(11) * t2566 + t2484;
t2412 = -pkin(2) * t2536 + t2728 * t2802;
t2492 = -t2537 * t2734 + t2566 * t2740;
t2818 = pkin(10) * t2492 + t2406 * t2734 + t2412 * t2740;
t2546 = t2616 * t2728 + t2725 * t2872;
t2432 = -pkin(2) * t2546 + t2538 * t2725 + t2728 * t2982;
t2459 = -t3051 + (-t2546 * t2725 - t2547 * t2728) * pkin(11);
t2512 = -t2547 * t2734 + t2597 * t2740;
t2817 = pkin(10) * t2512 + t2432 * t2740 + t2459 * t2734;
t2551 = t2619 * t2728 + t2725 * t2875;
t2434 = -pkin(2) * t2551 + t2539 * t2725 + t2728 * t2981;
t2460 = -t3050 + (-t2551 * t2725 - t2552 * t2728) * pkin(11);
t2513 = -t2552 * t2734 + t2599 * t2740;
t2816 = pkin(10) * t2513 + t2434 * t2740 + t2460 * t2734;
t2657 = t2685 * t2734 + t2686 * t2740;
t2815 = pkin(10) * t2657 + t2636;
t2683 = (t3015 * t3065 + t3011) * t2726;
t2720 = t2726 * t2721;
t2709 = t2735 * qJDD(1) + t2741 * t3081;
t2707 = t2729 * t2991;
t2702 = t3013 * t3028;
t2701 = (t2722 - t2723) * t3028;
t2697 = -pkin(9) * t2709 + g(3) * t2741;
t2688 = t3013 * t3005;
t2682 = (-t2722 * t2717 * qJD(1) + t2740 * t2845) * t2726;
t2681 = -t2723 * t3005 - t2734 * t2978;
t2672 = t2699 * t2740 - t3033;
t2671 = -t2698 * t2734 + t3034;
t2666 = t2683 * t3018 + t2720 * t2996;
t2665 = (t3011 + (qJD(2) - t2995) * t3065) * t3095;
t2664 = (qJD(1) * t2995 * t3095 + t2726 * t2978) * t2740;
t2663 = (-t2720 * t3017 + (-t2715 + (-qJD(1) * t3029 + t3010) * t2726) * t2729) * t2740;
t2658 = -t2684 * t2734 + t2687 * t2740;
t2654 = t2687 * t2726 + t2729 * t2865;
t2653 = -t2686 * t2726 + t2729 * t2864;
t2652 = -t2685 * t2726 + t2729 * t2866;
t2651 = -t2687 * t2729 + t2726 * t2865;
t2650 = t2686 * t2729 + t2726 * t2864;
t2649 = t2685 * t2729 + t2726 * t2866;
t2647 = -t2683 * t2726 + t2729 * t2867;
t2646 = t2683 * t2729 + t2726 * t2867;
t2645 = -t2701 * t2726 + t2729 * t2869;
t2644 = t2702 * t2726 + t2729 * t2868;
t2643 = t2701 * t2729 + t2726 * t2869;
t2642 = -t2702 * t2729 + t2726 * t2868;
t2623 = t2690 * t2726 + t2729 * t2871;
t2622 = -t2690 * t2729 + t2726 * t2871;
t2612 = t2725 * t2843 + t2728 * t2777;
t2598 = -t3040 + (-t2651 * t2726 - t2654 * t2729) * pkin(10);
t2596 = -t3039 + (-t2646 * t2726 - t2647 * t2729) * pkin(10);
t2595 = -pkin(1) * t2651 + t2667 * t2726 + t2729 * t2983;
t2594 = pkin(1) * t2654 - t2667 * t2729 + t2726 * t2983;
t2591 = -pkin(1) * t2646 + t2668 * t2726 + t2729 * t2984;
t2590 = pkin(1) * t2647 - t2668 * t2729 + t2726 * t2984;
t2588 = t2725 * t2763 + (-t2679 * t2728 + t2693 * t3025) * t2680;
t2586 = -t2725 * t2771 + (t2680 * t2728 - t2693 * t3027) * t2679;
t2584 = pkin(1) * t2623 + t2636 * t3076;
t2583 = -pkin(1) * t2622 + t2636 * t3075;
t2581 = -pkin(1) * t2642 + t2729 * t2815;
t2580 = pkin(1) * t2644 + t2726 * t2815;
t2576 = -t2613 * t2734 + t2627 * t2740;
t2573 = (-t2622 * t2726 - t2623 * t2729) * pkin(10);
t2567 = (-t2642 * t2726 - t2644 * t2729) * pkin(10) - t2871;
t2561 = t2725 * t2874 + t2728 * t2770;
t2560 = t2621 * t2728 + t2725 * t2873;
t2543 = t2655 * t2728 + t2725 * t2877;
t2542 = -t2589 * t2734 + t2615 * t2740;
t2541 = -t2587 * t2734 + t2614 * t2740;
t2535 = -t2612 * t2726 + t2729 * t2878;
t2534 = t2612 * t2729 + t2726 * t2878;
t2526 = -t2563 * t2734 + t2611 * t2740;
t2525 = -t2562 * t2734 + t2610 * t2740;
t2505 = -t2588 * t2726 + t2729 * t2879;
t2504 = -t2586 * t2726 + t2729 * t2880;
t2503 = t2588 * t2729 + t2726 * t2879;
t2502 = t2586 * t2729 + t2726 * t2880;
t2496 = -t2544 * t2734 + t2565 * t2740;
t2483 = -t2561 * t2726 + t2729 * t2881;
t2482 = -t2560 * t2726 + t2729 * t2882;
t2481 = t2561 * t2729 + t2726 * t2881;
t2480 = t2560 * t2729 + t2726 * t2882;
t2477 = -t2551 * t2726 + t2729 * t2888;
t2476 = t2551 * t2729 + t2726 * t2888;
t2474 = -t2546 * t2726 + t2729 * t2889;
t2473 = t2546 * t2729 + t2726 * t2889;
t2446 = -t2543 * t2726 + t2729 * t2890;
t2445 = t2543 * t2729 + t2726 * t2890;
t2438 = -t2536 * t2726 + t2729 * t2892;
t2437 = t2536 * t2729 + t2726 * t2892;
t2433 = pkin(2) * t2552 - t2539 * t2728 + t2725 * t2981;
t2431 = pkin(2) * t2547 - t2538 * t2728 + t2725 * t2982;
t2418 = t2527 * t2728 + t2725 * t2893;
t2411 = pkin(2) * t2537 + t2725 * t2802;
t2389 = pkin(2) * t2448 + t2484 * t3074;
t2376 = t2488 * t2728 + t2725 * t2898;
t2375 = t2486 * t2728 + t2725 * t2899;
t2367 = -t2419 * t2734 + t2479 * t2740;
t2348 = t2450 * t2728 + t2725 * t2902;
t2347 = t2449 * t2728 + t2725 * t2903;
t2335 = -t2447 * t2726 + t2729 * t2904;
t2334 = t2447 * t2729 + t2726 * t2904;
t2331 = -t2378 * t2734 + t2425 * t2740;
t2330 = -t2377 * t2734 + t2424 * t2740;
t2322 = t2426 * t2728 + t2725 * t2909;
t2317 = -t2418 * t2726 + t2729 * t2910;
t2316 = t2418 * t2729 + t2726 * t2910;
t2302 = t2413 * t2728 + t2725 * t2912;
t2301 = -t2434 * t2734 + t2460 * t2740 + (-t2476 * t2726 - t2477 * t2729) * pkin(10);
t2300 = -t2432 * t2734 + t2459 * t2740 + (-t2473 * t2726 - t2474 * t2729) * pkin(10);
t2291 = -t2350 * t2734 + t2410 * t2740;
t2290 = -t2349 * t2734 + t2409 * t2740;
t2278 = -pkin(1) * t2476 - t2433 * t2726 + t2729 * t2816;
t2277 = pkin(1) * t2477 + t2433 * t2729 + t2726 * t2816;
t2274 = -pkin(1) * t2473 - t2431 * t2726 + t2729 * t2817;
t2273 = pkin(1) * t2474 + t2431 * t2729 + t2726 * t2817;
t2264 = -t2376 * t2726 + t2729 * t2916;
t2263 = -t2375 * t2726 + t2729 * t2917;
t2262 = t2376 * t2729 + t2726 * t2916;
t2261 = t2375 * t2729 + t2726 * t2917;
t2257 = t2406 * t2740 - t2412 * t2734 + (-t2437 * t2726 - t2438 * t2729) * pkin(10);
t2252 = -t2323 * t2734 + t2361 * t2740;
t2249 = t2363 * t2728 + t2725 * t2919;
t2248 = t2362 * t2728 + t2725 * t2920;
t2242 = -t2303 * t2734 + t2352 * t2740;
t2234 = -pkin(1) * t2437 - t2411 * t2726 + t2729 * t2818;
t2233 = pkin(1) * t2438 + t2411 * t2729 + t2726 * t2818;
t2230 = -t2348 * t2726 + t2729 * t2923;
t2229 = -t2347 * t2726 + t2729 * t2924;
t2228 = t2348 * t2729 + t2726 * t2923;
t2227 = t2347 * t2729 + t2726 * t2924;
t2225 = -t2342 * t2726 + t2729 * t2925;
t2224 = t2342 * t2729 + t2726 * t2925;
t2222 = -t2336 * t2726 + t2729 * t2928;
t2221 = t2336 * t2729 + t2726 * t2928;
t2218 = t2339 * t2728 + t2725 * t2926;
t2217 = t2338 * t2728 + t2725 * t2927;
t2203 = -t2322 * t2726 + t2729 * t2933;
t2202 = t2322 * t2729 + t2726 * t2933;
t2201 = -t2251 * t2734 + t2315 * t2740;
t2200 = -t2250 * t2734 + t2314 * t2740;
t2194 = -t2307 * t2726 + t2729 * t2935;
t2193 = t2307 * t2729 + t2726 * t2935;
t2192 = t2368 * t2740 - t2388 * t2734 + (-t2334 * t2726 - t2335 * t2729) * pkin(10);
t2189 = -t2302 * t2726 + t2729 * t2937;
t2188 = t2302 * t2729 + t2726 * t2937;
t2183 = t2294 * t2728 + t2725 * t2939;
t2180 = -pkin(1) * t2334 - t2389 * t2726 + t2729 * t2819;
t2179 = pkin(1) * t2335 + t2389 * t2729 + t2726 * t2819;
t2177 = t2292 * t2728 + t2725 * t2940;
t2165 = -t2220 * t2734 + t2276 * t2740;
t2164 = -t2219 * t2734 + t2275 * t2740;
t2152 = -t2249 * t2726 + t2729 * t2944;
t2151 = -t2248 * t2726 + t2729 * t2945;
t2150 = t2249 * t2729 + t2726 * t2944;
t2149 = t2248 * t2729 + t2726 * t2945;
t2143 = -t2184 * t2734 + t2241 * t2740;
t2140 = t2238 * t2728 + t2725 * t2946;
t2139 = t2237 * t2728 + t2725 * t2947;
t2138 = -t2178 * t2734 + t2232 * t2740;
t2135 = pkin(2) * t2343 + t2267 * t2728 + t2725 * t2803;
t2133 = pkin(2) * t2337 + t2259 * t2728 + t2725 * t2804;
t2126 = -t2218 * t2726 + t2729 * t2948;
t2125 = -t2217 * t2726 + t2729 * t2949;
t2124 = t2218 * t2729 + t2726 * t2948;
t2123 = t2217 * t2729 + t2726 * t2949;
t2119 = -t2212 * t2726 + t2729 * t2950;
t2118 = t2212 * t2729 + t2726 * t2950;
t2114 = t2207 * t2728 + t2725 * t2952;
t2113 = t2206 * t2728 + t2725 * t2953;
t2110 = -t2210 * t2726 + t2729 * t2951;
t2109 = t2210 * t2729 + t2726 * t2951;
t2098 = pkin(2) * t2308 + t2235 * t2728 + t2725 * t2805;
t2094 = -t2183 * t2726 + t2729 * t2957;
t2093 = t2183 * t2729 + t2726 * t2957;
t2092 = -t2142 * t2734 + t2182 * t2740;
t2091 = -t2141 * t2734 + t2181 * t2740;
t2090 = -t2177 * t2726 + t2729 * t2958;
t2089 = t2177 * t2729 + t2726 * t2958;
t2088 = -t2175 * t2726 + t2729 * t2959;
t2087 = t2175 * t2729 + t2726 * t2959;
t2084 = t2172 * t2728 + t2725 * t2960;
t2076 = -t2116 * t2734 + t2158 * t2740;
t2075 = -t2115 * t2734 + t2157 * t2740;
t2072 = -t2146 * t2726 + t2729 * t2962;
t2071 = t2146 * t2729 + t2726 * t2962;
t2070 = -t2140 * t2726 + t2729 * t2963;
t2069 = -t2139 * t2726 + t2729 * t2964;
t2068 = t2140 * t2729 + t2726 * t2963;
t2067 = t2139 * t2729 + t2726 * t2964;
t2066 = -t2136 * t2734 + t2155 * t2740 + (-t2224 * t2726 - t2225 * t2729) * pkin(10);
t2064 = -t2134 * t2734 + t2153 * t2740 + (-t2221 * t2726 - t2222 * t2729) * pkin(10);
t2063 = -t2085 * t2734 + t2132 * t2740;
t2055 = pkin(2) * t2147 + t2197 * t2728 + t2725 * t2806;
t2051 = -t2114 * t2726 + t2729 * t2965;
t2050 = -t2113 * t2726 + t2729 * t2966;
t2049 = t2114 * t2729 + t2726 * t2965;
t2048 = t2113 * t2729 + t2726 * t2966;
t2047 = -t2106 * t2726 + t2729 * t2968;
t2046 = t2106 * t2729 + t2726 * t2968;
t2045 = -pkin(1) * t2224 - t2135 * t2726 + t2729 * t2820;
t2044 = pkin(1) * t2225 + t2135 * t2729 + t2726 * t2820;
t2043 = -pkin(1) * t2221 - t2133 * t2726 + t2729 * t2821;
t2042 = pkin(1) * t2222 + t2133 * t2729 + t2726 * t2821;
t2041 = -t2102 * t2726 + t2729 * t2969;
t2040 = t2102 * t2729 + t2726 * t2969;
t2038 = -t2099 * t2734 + t2122 * t2740 + (-t2193 * t2726 - t2194 * t2729) * pkin(10);
t2034 = pkin(2) * t2213 + t2130 * t2728 + t2725 * t2807;
t2031 = pkin(2) * t2211 + t2128 * t2728 + t2725 * t2808;
t2023 = -t2084 * t2726 + t2729 * t2971;
t2022 = t2084 * t2729 + t2726 * t2971;
t2021 = -t2081 * t2726 + t2729 * t2972;
t2020 = t2081 * t2729 + t2726 * t2972;
t2018 = -pkin(1) * t2193 - t2098 * t2726 + t2729 * t2822;
t2017 = pkin(1) * t2194 + t2098 * t2729 + t2726 * t2822;
t2013 = pkin(2) * t2176 + t2079 * t2728 + t2725 * t2809;
t2009 = -t2052 * t2726 + t2729 * t2973;
t2008 = t2052 * t2729 + t2726 * t2973;
t2007 = -t2035 * t2734 + t2061 * t2740 + (-t2118 * t2726 - t2119 * t2729) * pkin(10);
t2006 = -t2032 * t2734 + t2059 * t2740 + (-t2109 * t2726 - t2110 * t2729) * pkin(10);
t2003 = -t2056 * t2734 + t2062 * t2740 + (-t2071 * t2726 - t2072 * t2729) * pkin(10);
t2000 = -pkin(1) * t2118 - t2034 * t2726 + t2729 * t2824;
t1999 = pkin(1) * t2119 + t2034 * t2729 + t2726 * t2824;
t1998 = -pkin(1) * t2071 - t2055 * t2726 + t2729 * t2823;
t1997 = pkin(1) * t2072 + t2055 * t2729 + t2726 * t2823;
t1996 = -pkin(1) * t2109 - t2031 * t2726 + t2729 * t2825;
t1995 = pkin(1) * t2110 + t2031 * t2729 + t2726 * t2825;
t1994 = -t2014 * t2734 + t2028 * t2740 + (-t2087 * t2726 - t2088 * t2729) * pkin(10);
t1991 = pkin(2) * t2107 + t2026 * t2728 + t2725 * t2811;
t1989 = pkin(2) * t2103 + t2024 * t2728 + t2725 * t2812;
t1985 = pkin(2) * t2053 + t2036 * t2728 + t2725 * t2810;
t1981 = -pkin(1) * t2087 - t2013 * t2726 + t2729 * t2826;
t1980 = pkin(1) * t2088 + t2013 * t2729 + t2726 * t2826;
t1978 = pkin(2) * t2082 + t2011 * t2728 + t2725 * t2813;
t1977 = -t2001 * t2726 + t2729 * t2975;
t1976 = t2001 * t2729 + t2726 * t2975;
t1975 = -t1992 * t2734 + t2005 * t2740 + (-t2046 * t2726 - t2047 * t2729) * pkin(10);
t1974 = -t1990 * t2734 + t2004 * t2740 + (-t2040 * t2726 - t2041 * t2729) * pkin(10);
t1973 = -pkin(1) * t2046 - t1991 * t2726 + t2729 * t2827;
t1972 = pkin(1) * t2047 + t1991 * t2729 + t2726 * t2827;
t1971 = -pkin(1) * t2040 - t1989 * t2726 + t2729 * t2828;
t1970 = pkin(1) * t2041 + t1989 * t2729 + t2726 * t2828;
t1969 = -t1979 * t2734 + t1988 * t2740 + (-t2020 * t2726 - t2021 * t2729) * pkin(10);
t1968 = -t1986 * t2734 + t1993 * t2740 + (-t2008 * t2726 - t2009 * t2729) * pkin(10);
t1966 = -pkin(1) * t2008 - t1985 * t2726 + t2729 * t2829;
t1965 = pkin(1) * t2009 + t1985 * t2729 + t2726 * t2829;
t1964 = -pkin(1) * t2020 - t1978 * t2726 + t2729 * t2830;
t1963 = pkin(1) * t2021 + t1978 * t2729 + t2726 * t2830;
t1961 = pkin(2) * t2002 + t1982 * t2728 + t2725 * t2814;
t1960 = -t1962 * t2734 + t1967 * t2740 + (-t1976 * t2726 - t1977 * t2729) * pkin(10);
t1959 = -pkin(1) * t1976 - t1961 * t2726 + t2729 * t2831;
t1958 = pkin(1) * t1977 + t1961 * t2729 + t2726 * t2831;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t2710, 0, -t2709, 0, t2986, -t2697, -t2863, -pkin(9) * t2863, -t2735 * t2666 + t2682 * t2741, -t2735 * t2645 + t2658 * t2741, -t2735 * t2652 + t2671 * t2741, -t2735 * t2663 + t2681 * t2741, -t2735 * t2653 + t2672 * t2741, t2741 * t2688 + t2735 * t2862, t2741 * t2598 - t2735 * t2595 - pkin(9) * (t2654 * t2741 + t2735 * t2673), t2741 * t2596 - t2735 * t2591 - pkin(9) * (t2647 * t2741 + t2735 * t2669), t2741 * t2567 - t2735 * t2581 - pkin(9) * (t2644 * t2741 + t2735 * t2657), t2741 * t2573 - t2735 * t2583 - pkin(9) * (t2623 * t2741 + t2735 * t2636), -t2735 * t2505 + t2542 * t2741, -t2735 * t2446 + t2496 * t2741, -t2735 * t2482 + t2525 * t2741, -t2735 * t2504 + t2541 * t2741, -t2735 * t2483 + t2526 * t2741, -t2735 * t2535 + t2576 * t2741, t2741 * t2300 - t2735 * t2274 - pkin(9) * (t2474 * t2741 + t2735 * t2512), t2741 * t2301 - t2735 * t2278 - pkin(9) * (t2477 * t2741 + t2735 * t2513), t2741 * t2257 - t2735 * t2234 - pkin(9) * (t2438 * t2741 + t2735 * t2492), t2741 * t2192 - t2735 * t2180 - pkin(9) * (t2335 * t2741 + t2735 * t2387), -t2735 * t2264 + t2331 * t2741, -t2735 * t2203 + t2252 * t2741, -t2735 * t2229 + t2290 * t2741, -t2735 * t2263 + t2330 * t2741, -t2735 * t2230 + t2291 * t2741, -t2735 * t2317 + t2367 * t2741, t2741 * t2064 - t2735 * t2043 - pkin(9) * (t2222 * t2741 + t2735 * t2280), t2741 * t2066 - t2735 * t2045 - pkin(9) * (t2225 * t2741 + t2735 * t2282), t2741 * t2038 - t2735 * t2018 - pkin(9) * (t2194 * t2741 + t2735 * t2245), t2741 * t2003 - t2735 * t1998 - pkin(9) * (t2072 * t2741 + t2735 * t2101), -t2735 * t2152 + t2201 * t2741, -t2735 * t2094 + t2143 * t2741, -t2735 * t2125 + t2164 * t2741, -t2735 * t2151 + t2200 * t2741, -t2735 * t2126 + t2165 * t2741, -t2735 * t2189 + t2242 * t2741, t2741 * t2006 - t2735 * t1996 - pkin(9) * (t2110 * t2741 + t2735 * t2156), t2741 * t2007 - t2735 * t2000 - pkin(9) * (t2119 * t2741 + t2735 * t2160), t2741 * t1994 - t2735 * t1981 - pkin(9) * (t2088 * t2741 + t2735 * t2137), t2741 * t1968 - t2735 * t1966 - pkin(9) * (t2009 * t2741 + t2735 * t2015), -t2735 * t2070 + t2092 * t2741, -t2735 * t2023 + t2063 * t2741, -t2735 * t2050 + t2075 * t2741, -t2735 * t2069 + t2091 * t2741, -t2735 * t2051 + t2076 * t2741, -t2735 * t2090 + t2138 * t2741, t2741 * t1974 - t2735 * t1971 - pkin(9) * (t2041 * t2741 + t2735 * t2073), t2741 * t1975 - t2735 * t1973 - pkin(9) * (t2047 * t2741 + t2735 * t2074), t2741 * t1969 - t2735 * t1964 - pkin(9) * (t2021 * t2741 + t2735 * t2060), t2741 * t1960 - t2735 * t1959 - pkin(9) * (t1977 * t2741 + t2735 * t1984); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t2709, 0, t2710, 0, t2697, t2986, t2992, pkin(9) * t2992, t2666 * t2741 + t2735 * t2682, t2645 * t2741 + t2735 * t2658, t2652 * t2741 + t2735 * t2671, t2663 * t2741 + t2735 * t2681, t2653 * t2741 + t2735 * t2672, t2735 * t2688 - t2741 * t2862, t2735 * t2598 + t2741 * t2595 + pkin(9) * (-t2735 * t2654 + t2673 * t2741), t2735 * t2596 + t2741 * t2591 + pkin(9) * (-t2735 * t2647 + t2669 * t2741), t2735 * t2567 + t2741 * t2581 + pkin(9) * (-t2735 * t2644 + t2657 * t2741), t2735 * t2573 + t2741 * t2583 + pkin(9) * (-t2735 * t2623 + t2636 * t2741), t2505 * t2741 + t2735 * t2542, t2446 * t2741 + t2735 * t2496, t2482 * t2741 + t2735 * t2525, t2504 * t2741 + t2735 * t2541, t2483 * t2741 + t2735 * t2526, t2535 * t2741 + t2735 * t2576, t2735 * t2300 + t2741 * t2274 + pkin(9) * (-t2735 * t2474 + t2512 * t2741), t2735 * t2301 + t2741 * t2278 + pkin(9) * (-t2735 * t2477 + t2513 * t2741), t2735 * t2257 + t2741 * t2234 + pkin(9) * (-t2735 * t2438 + t2492 * t2741), t2735 * t2192 + t2741 * t2180 + pkin(9) * (-t2735 * t2335 + t2387 * t2741), t2264 * t2741 + t2735 * t2331, t2203 * t2741 + t2735 * t2252, t2229 * t2741 + t2735 * t2290, t2263 * t2741 + t2735 * t2330, t2230 * t2741 + t2735 * t2291, t2317 * t2741 + t2735 * t2367, t2735 * t2064 + t2741 * t2043 + pkin(9) * (-t2735 * t2222 + t2280 * t2741), t2735 * t2066 + t2741 * t2045 + pkin(9) * (-t2735 * t2225 + t2282 * t2741), t2735 * t2038 + t2741 * t2018 + pkin(9) * (-t2735 * t2194 + t2245 * t2741), t2735 * t2003 + t2741 * t1998 + pkin(9) * (-t2735 * t2072 + t2101 * t2741), t2152 * t2741 + t2735 * t2201, t2094 * t2741 + t2735 * t2143, t2125 * t2741 + t2735 * t2164, t2151 * t2741 + t2735 * t2200, t2126 * t2741 + t2735 * t2165, t2189 * t2741 + t2735 * t2242, t2735 * t2006 + t2741 * t1996 + pkin(9) * (-t2735 * t2110 + t2156 * t2741), t2735 * t2007 + t2741 * t2000 + pkin(9) * (-t2735 * t2119 + t2160 * t2741), t2735 * t1994 + t2741 * t1981 + pkin(9) * (-t2735 * t2088 + t2137 * t2741), t2735 * t1968 + t2741 * t1966 + pkin(9) * (-t2735 * t2009 + t2015 * t2741), t2070 * t2741 + t2735 * t2092, t2023 * t2741 + t2735 * t2063, t2050 * t2741 + t2735 * t2075, t2069 * t2741 + t2735 * t2091, t2051 * t2741 + t2735 * t2076, t2090 * t2741 + t2735 * t2138, t2735 * t1974 + t2741 * t1971 + pkin(9) * (-t2735 * t2041 + t2073 * t2741), t2735 * t1975 + t2741 * t1973 + pkin(9) * (-t2735 * t2047 + t2074 * t2741), t2735 * t1969 + t2741 * t1964 + pkin(9) * (-t2735 * t2021 + t2060 * t2741), t2735 * t1960 + t2741 * t1959 + pkin(9) * (-t2735 * t1977 + t1984 * t2741); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2713, t2714, 0, 0, t2665, t2643, t2649, t2664, t2650, t2707, t2594, t2590, t2580, t2584, t2503, t2445, t2480, t2502, t2481, t2534, t2273, t2277, t2233, t2179, t2262, t2202, t2227, t2261, t2228, t2316, t2042, t2044, t2017, t1997, t2150, t2093, t2123, t2149, t2124, t2188, t1995, t1999, t1980, t1965, t2068, t2022, t2048, t2067, t2049, t2089, t1970, t1972, t1963, t1958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t3081, 0, 0, -g(3), -t2713, 0, t2682, t2658, t2671, t2681, t2672, t2688, t2598, t2596, t2567, t2573, t2542, t2496, t2525, t2541, t2526, t2576, t2300, t2301, t2257, t2192, t2331, t2252, t2290, t2330, t2291, t2367, t2064, t2066, t2038, t2003, t2201, t2143, t2164, t2200, t2165, t2242, t2006, t2007, t1994, t1968, t2092, t2063, t2075, t2091, t2076, t2138, t1974, t1975, t1969, t1960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3081, 0, qJDD(1), 0, g(3), 0, -t2714, 0, t2666, t2645, t2652, t2663, t2653, -t2862, t2595, t2591, t2581, t2583, t2505, t2446, t2482, t2504, t2483, t2535, t2274, t2278, t2234, t2180, t2264, t2203, t2229, t2263, t2230, t2317, t2043, t2045, t2018, t1998, t2152, t2094, t2125, t2151, t2126, t2189, t1996, t2000, t1981, t1966, t2070, t2023, t2050, t2069, t2051, t2090, t1971, t1973, t1964, t1959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2713, t2714, 0, 0, t2665, t2643, t2649, t2664, t2650, t2707, t2594, t2590, t2580, t2584, t2503, t2445, t2480, t2502, t2481, t2534, t2273, t2277, t2233, t2179, t2262, t2202, t2227, t2261, t2228, t2316, t2042, t2044, t2017, t1997, t2150, t2093, t2123, t2149, t2124, t2188, t1995, t1999, t1980, t1965, t2068, t2022, t2048, t2067, t2049, t2089, t1970, t1972, t1963, t1958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2792, t2687, t2695, -t2704, t2699, t2704, 0, -t2690, t2667, 0, t2615, t2565, t2610, t2614, t2611, t2627, t2459, t2460, t2406, t2368, t2425, t2361, t2409, t2424, t2410, t2479, t2153, t2155, t2122, t2062, t2315, t2241, t2275, t2314, t2276, t2352, t2059, t2061, t2028, t1993, t2182, t2132, t2157, t2181, t2158, t2232, t2004, t2005, t1988, t1967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, t2684, t2698, t2978, t2696, -t2703, t2690, 0, t2668, 0, t2589, t2544, t2562, t2587, t2563, t2613, t2432, t2434, t2412, t2388, t2378, t2323, t2349, t2377, t2350, t2419, t2134, t2136, t2099, t2056, t2251, t2184, t2219, t2250, t2220, t2303, t2032, t2035, t2014, t1986, t2142, t2085, t2115, t2141, t2116, t2178, t1990, t1992, t1979, t1962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2712, t2701, t2685, t2712, t2686, t2991, -t2667, -t2668, 0, 0, t2588, t2543, t2560, t2586, t2561, t2612, t2431, t2433, t2411, t2389, t2376, t2322, t2347, t2375, t2348, t2418, t2133, t2135, t2098, t2055, t2249, t2183, t2217, t2248, t2218, t2302, t2031, t2034, t2013, t1985, t2140, t2084, t2113, t2139, t2114, t2177, t1989, t1991, t1978, t1961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2764, -t2616, t2769, -t2662, t2660, t2662, 0, -t2582, t2538, 0, t2518, t2453, t2515, t2517, t2516, t2550, t2310, t2313, t2226, t2174, t2421, t2366, t2379, t2420, t2380, t2475, t2144, t2145, t2117, t2039, t2297, t2223, t2265, t2296, t2266, t2351, t2054, t2057, t2019, t1987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3038, t2620, t2661, -t2776, -t2637, -t3038, t2582, 0, t2539, 0, t2489, t2427, t2451, t2487, t2452, t2528, t2260, t2268, t2236, t2196, t2365, t2295, t2340, t2364, t2341, t2414, t2129, t2131, t2080, t2037, t2240, t2173, t2208, t2239, t2209, t2293, t2025, t2027, t2012, t1983; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3043, t2655, t2621, t3043, t2770, t2777, -t2538, -t2539, 0, 0, t2488, t2426, t2449, t2486, t2450, t2527, t2259, t2267, t2235, t2197, t2363, t2294, t2338, t2362, t2339, t2413, t2128, t2130, t2079, t2036, t2238, t2172, t2206, t2237, t2207, t2292, t2024, t2026, t2011, t1982; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2559, -t2519, t2767, t2609, t2607, -t2609, 0, -t2415, t2370, 0, t2466, t2385, t2457, t2464, t2458, t2511, t2304, t2309, t2171, -pkin(13) * t2190, t2360, t2299, t2326, t2359, t2327, t2408, t2105, t2108, t2083, t2033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2850, t3099, t2608, -t2760, -t2553, -t2850, t2415, 0, t2371, 0, -t2549, -t2548, -t2471, t2549, t2467, -t2558, t2243, t2244, -pkin(4) * t2384, -pkin(4) * t2190, -t2393, -t2318, -t2401, t2391, -t2402, -t2461, t2159, t2161, t2086, t2058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3047, t2593, t2524, -t3047, t2757, t2626, -t2370, -t2371, 0, 0, t2465, t2383, t2455, t2463, t2456, t2510, t2279, t2281, t2167, t2163, t2358, t2298, t2324, t2357, t2325, t2407, t2097, t2100, t2077, t2016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2499, -t3096, t3089, t2577, t2574, -t2577, 0, t2345, t2271, 0, t2394, t2320, t2403, t2392, t2404, t2462, t2214, t2216, t2104, -pkin(14) * t2120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2578, t2470, t2575, -t2847, t2494, -t2578, -t2345, 0, t2272, 0, -t2509, -t2508, -t2399, t2509, t2395, -t2497, t2166, t2168, -pkin(5) * t2319, -pkin(5) * t2120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, t2548, t2471, -t2549, -t2467, t2558, -t2271, -t2272, 0, 0, t2393, t2318, t2401, -t2391, t2402, t2461, t2840, t2839, t2790, t2987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2423, t2396, t3090, t2531, t2529, -t2531, 0, t2246, t2186, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2532, t2398, t2530, t2422, t2429, -t2532, -t2246, 0, t2187, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2509, t2508, t2399, -t2509, -t2395, t2497, -t2186, -t2187, 0, 0;];
m_new_reg  = t1;
