% Zeitableitung der translatorischen Teilmatrix der analytischen Jacobi-Matrix für Segment Nr. 6 (0=Basis) von
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
%
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
%
% Output:
% JaD_transl [3x6]
%   Zeitableitung der translatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox (ehem. IRT-Maple-Toolbox)
% Datum: 2018-11-23 11:27
% Revision: 76f9d5e39f14dc242b53c0d9d3d9db48bd8f37c0
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für mechatronische Systeme, Universität Hannover

function JaD_transl = S6RRRRRR10_jacobiaD_transl_6_floatb_twist_sym_varpar(qJ, qJD, r_i_i_C, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_transl_6_floatb_twist_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_transl_6_floatb_twist_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'S6RRRRRR10_jacobiaD_transl_6_floatb_twist_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiaD_transl_6_floatb_twist_sym_varpar: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From jacobiaD_transl_6_floatb_twist_matlab.m
% OptimizationMode: 2
% StartTime: 2018-11-23 11:27:40
% EndTime: 2018-11-23 11:27:48
% DurationCPUTime: 8.76s
% Computational Cost: add. (26952->439), mult. (31516->667), div. (0->0), fcn. (26467->30), ass. (0->237)
t1287 = cos(qJ(1));
t1281 = sin(qJ(1));
t1358 = pkin(6) + qJ(2);
t1344 = cos(t1358) / 0.2e1;
t1359 = pkin(6) - qJ(2);
t1353 = cos(t1359);
t1332 = t1353 / 0.2e1 + t1344;
t1280 = sin(qJ(2));
t1360 = t1287 * t1280;
t1309 = t1281 * t1332 + t1360;
t1340 = sin(t1358) / 0.2e1;
t1350 = sin(t1359);
t1247 = t1340 - t1350 / 0.2e1;
t1313 = qJD(2) * t1247;
t1286 = cos(qJ(2));
t1362 = t1281 * t1286;
t1215 = qJD(1) * t1309 + qJD(2) * t1362 + t1287 * t1313;
t1240 = t1332 * qJD(2);
t1363 = t1281 * t1280;
t1261 = qJD(2) * t1363;
t1364 = t1281 * t1247;
t1216 = -qJD(1) * t1364 - t1261 + (qJD(1) * t1286 + t1240) * t1287;
t1225 = -t1287 * t1332 + t1363;
t1357 = pkin(7) - qJ(3);
t1349 = sin(t1357);
t1339 = t1349 / 0.2e1;
t1356 = pkin(7) + qJ(3);
t1348 = sin(t1356);
t1236 = (t1339 - t1348 / 0.2e1) * qJD(3);
t1342 = cos(t1356) / 0.2e1;
t1352 = cos(t1357);
t1249 = t1342 - t1352 / 0.2e1;
t1238 = t1249 * qJD(3);
t1338 = t1348 / 0.2e1;
t1244 = t1338 + t1339;
t1250 = t1352 / 0.2e1 + t1342;
t1274 = sin(pkin(6));
t1279 = sin(qJ(3));
t1226 = t1247 * t1287 + t1362;
t1285 = cos(qJ(3));
t1379 = t1226 * t1285;
t1401 = qJD(1) * t1281;
t1137 = -qJD(3) * t1379 - t1215 * t1250 - t1216 * t1279 - t1225 * t1236 + t1274 * (-t1238 * t1287 + t1244 * t1401);
t1365 = t1274 * t1287;
t1380 = t1226 * t1279;
t1195 = t1225 * t1250 + t1244 * t1365 + t1380;
t1354 = pkin(8) + qJ(4);
t1337 = sin(t1354) / 0.2e1;
t1355 = pkin(8) - qJ(4);
t1347 = sin(t1355);
t1318 = t1337 + t1347 / 0.2e1;
t1233 = t1318 * qJD(4);
t1341 = cos(t1354) / 0.2e1;
t1351 = cos(t1355);
t1319 = t1351 / 0.2e1 + t1341;
t1234 = t1319 * qJD(4);
t1243 = t1337 - t1347 / 0.2e1;
t1248 = t1341 - t1351 / 0.2e1;
t1284 = cos(qJ(4));
t1235 = t1244 * qJD(3);
t1237 = t1250 * qJD(3);
t1245 = t1338 - t1349 / 0.2e1;
t1297 = qJD(3) * t1380 + t1215 * t1245 - t1216 * t1285 + t1225 * t1237 + t1274 * (t1235 * t1287 + t1249 * t1401);
t1402 = cos(pkin(7));
t1346 = t1274 * t1402;
t1336 = t1281 * t1346;
t1273 = sin(pkin(7));
t1385 = t1215 * t1273;
t1316 = qJD(1) * t1336 + t1385;
t1335 = t1287 * t1346;
t1322 = t1225 * t1273 - t1335;
t1193 = -t1225 * t1245 + t1249 * t1365 + t1379;
t1278 = sin(qJ(4));
t1415 = t1193 * t1278;
t1097 = qJD(4) * t1415 - t1137 * t1243 + t1195 * t1234 - t1233 * t1322 + t1248 * t1316 + t1284 * t1297;
t1272 = sin(pkin(8));
t1275 = cos(pkin(8));
t1124 = t1137 * t1272 - t1275 * t1316;
t1277 = sin(qJ(5));
t1283 = cos(qJ(5));
t1173 = t1195 * t1272 + t1275 * t1322;
t1414 = t1193 * t1284;
t1294 = -t1195 * t1243 - t1248 * t1322 + t1414;
t1420 = -t1173 * t1283 + t1277 * t1294;
t1079 = qJD(5) * t1420 + t1097 * t1283 + t1124 * t1277;
t1311 = qJD(4) * t1243;
t1312 = qJD(4) * t1248;
t1093 = qJD(4) * t1414 - t1137 * t1319 - t1195 * t1311 - t1278 * t1297 - t1312 * t1322 - t1316 * t1318;
t1276 = sin(qJ(6));
t1282 = cos(qJ(6));
t1429 = t1079 * t1276 + t1093 * t1282;
t1428 = t1079 * t1282 - t1093 * t1276;
t1118 = t1173 * t1277 + t1283 * t1294;
t1427 = -qJD(5) * t1118 + t1097 * t1277 - t1124 * t1283;
t1142 = t1195 * t1319 - t1318 * t1322 + t1415;
t1426 = t1118 * t1276 - t1142 * t1282;
t1425 = t1118 * t1282 + t1142 * t1276;
t1328 = qJD(6) * (r_i_i_C(1) * t1276 + r_i_i_C(2) * t1282);
t1251 = t1344 - t1353 / 0.2e1;
t1213 = qJD(1) * t1226 + qJD(2) * t1360 + t1281 * t1240;
t1361 = t1286 * t1287;
t1212 = qJD(1) * t1225 - qJD(2) * t1361 + t1281 * t1313;
t1230 = -t1361 + t1364;
t1376 = t1230 * t1279;
t1400 = qJD(1) * t1287;
t1136 = -qJD(3) * t1376 - t1212 * t1245 + t1213 * t1285 + t1309 * t1237 + t1274 * (-t1235 * t1281 + t1249 * t1400);
t1406 = r_i_i_C(3) + pkin(14);
t1405 = pkin(11) * t1273;
t1404 = pkin(12) * t1272;
t1403 = cos(pkin(6));
t1399 = qJD(6) * t1276;
t1398 = qJD(6) * t1282;
t1366 = t1274 * t1281;
t1375 = t1230 * t1285;
t1198 = t1245 * t1309 + t1249 * t1366 + t1375;
t1391 = t1198 * t1278;
t1190 = t1198 * t1284;
t1381 = t1225 * t1285;
t1204 = -t1226 * t1245 - t1381;
t1390 = t1204 * t1278;
t1389 = t1204 * t1284;
t1377 = t1309 * t1285;
t1206 = t1230 * t1245 - t1377;
t1388 = t1206 * t1278;
t1387 = t1206 * t1284;
t1246 = t1340 + t1350 / 0.2e1;
t1370 = t1251 * t1285;
t1209 = -t1246 * t1245 + t1249 * t1403 + t1370;
t1386 = t1209 * t1278;
t1207 = t1209 * t1284;
t1373 = t1246 * t1285;
t1221 = t1245 * t1251 + t1373;
t1384 = t1221 * t1278;
t1383 = t1221 * t1284;
t1382 = t1225 * t1279;
t1378 = t1309 * t1279;
t1374 = t1246 * t1279;
t1372 = t1248 * t1273;
t1371 = t1251 * t1279;
t1369 = t1272 * t1277;
t1368 = t1272 * t1283;
t1367 = t1273 * t1275;
t1333 = r_i_i_C(1) * t1282 - r_i_i_C(2) * t1276 + pkin(5);
t1315 = t1244 * t1366 - t1250 * t1309 + t1376;
t1321 = -t1273 * t1309 - t1336;
t1175 = -t1272 * t1315 - t1275 * t1321;
t1293 = t1243 * t1315 + t1248 * t1321 - t1190;
t1121 = t1175 * t1277 + t1283 * t1293;
t1330 = t1175 * t1283 - t1277 * t1293;
t1203 = -t1226 * t1250 + t1382;
t1157 = t1203 * t1243 - t1226 * t1372 + t1389;
t1184 = -t1203 * t1272 + t1226 * t1367;
t1125 = t1157 * t1283 + t1184 * t1277;
t1205 = t1230 * t1250 + t1378;
t1159 = t1205 * t1243 + t1230 * t1372 + t1387;
t1185 = -t1205 * t1272 - t1230 * t1367;
t1126 = t1159 * t1283 + t1185 * t1277;
t1314 = t1244 * t1403 + t1246 * t1250 + t1371;
t1320 = t1246 * t1273 - t1402 * t1403;
t1188 = -t1272 * t1314 - t1275 * t1320;
t1292 = t1243 * t1314 + t1248 * t1320 - t1207;
t1130 = t1188 * t1277 + t1283 * t1292;
t1329 = t1188 * t1283 - t1277 * t1292;
t1220 = t1250 * t1251 - t1374;
t1172 = t1220 * t1243 + t1251 * t1372 + t1383;
t1202 = -t1220 * t1272 - t1251 * t1367;
t1150 = t1172 * t1283 + t1202 * t1277;
t1152 = qJD(3) * t1377 - t1212 * t1279 + t1213 * t1250 + t1230 * t1236;
t1131 = -t1152 * t1272 - t1213 * t1367;
t1217 = qJD(1) * t1230 - t1287 * t1240 + t1261;
t1154 = qJD(3) * t1381 + t1215 * t1279 + t1217 * t1250 - t1226 * t1236;
t1132 = -t1154 * t1272 - t1217 * t1367;
t1307 = t1195 * t1284;
t1161 = -t1193 * t1243 - t1307;
t1127 = t1161 * t1283 + t1193 * t1369;
t1305 = t1315 * t1284;
t1163 = t1198 * t1243 + t1305;
t1128 = t1163 * t1283 - t1198 * t1369;
t1303 = t1314 * t1284;
t1169 = t1209 * t1243 + t1303;
t1151 = t1169 * t1283 - t1209 * t1369;
t1239 = t1246 * qJD(2);
t1241 = t1251 * qJD(2);
t1182 = -qJD(3) * t1373 + t1236 * t1251 - t1239 * t1250 - t1241 * t1279;
t1176 = -t1182 * t1272 + t1239 * t1367;
t1317 = -qJD(1) * t1335 + t1212 * t1273;
t1310 = t1273 * t1318;
t1308 = t1195 * t1278;
t1306 = t1315 * t1278;
t1304 = t1314 * t1278;
t1302 = t1273 * t1312;
t1301 = -t1277 * t1406 - t1333 * t1283 - pkin(4);
t1179 = -qJD(3) * t1371 - t1235 * t1403 - t1246 * t1237 - t1239 * t1285 - t1241 * t1245;
t1296 = -qJD(3) * t1375 - t1212 * t1250 - t1213 * t1279 + t1309 * t1236 - (t1238 * t1281 + t1244 * t1400) * t1274;
t1295 = t1283 * t1328 + (t1333 * t1277 - t1283 * t1406) * qJD(5);
t1291 = t1272 * t1296 - t1275 * t1317;
t1177 = qJD(3) * t1370 + t1246 * t1236 + t1238 * t1403 - t1239 * t1279 + t1241 * t1250;
t1290 = qJD(4) * t1386 + t1177 * t1243 - t1179 * t1284 - t1233 * t1320 + t1234 * t1314 + t1241 * t1372;
t1288 = qJD(4) * t1391 - t1136 * t1284 - t1233 * t1321 + t1234 * t1315 - t1243 * t1296 + t1248 * t1317;
t1183 = -qJD(3) * t1374 + t1237 * t1251 - t1239 * t1245 + t1241 * t1285;
t1171 = -t1220 * t1319 + t1251 * t1310 + t1384;
t1168 = -t1209 * t1319 + t1304;
t1167 = -t1177 * t1272 - t1241 * t1367;
t1164 = -t1314 * t1319 + t1318 * t1320 - t1386;
t1162 = -t1198 * t1319 + t1306;
t1160 = t1193 * t1319 - t1308;
t1158 = -t1205 * t1319 + t1230 * t1310 + t1388;
t1156 = -t1203 * t1319 - t1226 * t1310 + t1390;
t1155 = qJD(3) * t1382 - t1215 * t1285 + t1217 * t1245 - t1226 * t1237;
t1153 = qJD(3) * t1378 + t1212 * t1285 + t1213 * t1245 + t1230 * t1237;
t1147 = -t1315 * t1319 + t1318 * t1321 - t1391;
t1116 = -qJD(4) * t1384 + t1182 * t1243 + t1183 * t1284 + t1220 * t1234 + (-t1233 * t1251 - t1239 * t1248) * t1273;
t1115 = qJD(4) * t1383 - t1182 * t1319 + t1183 * t1278 + t1220 * t1311 - t1239 * t1310 + t1251 * t1302;
t1114 = -qJD(4) * t1304 + t1177 * t1284 + t1179 * t1243 + t1209 * t1234;
t1113 = qJD(4) * t1303 + t1177 * t1278 - t1179 * t1319 + t1209 * t1311;
t1110 = -qJD(4) * t1207 - t1177 * t1319 - t1179 * t1278 + t1241 * t1310 + t1311 * t1314 + t1312 * t1320;
t1109 = -qJD(4) * t1390 + t1154 * t1243 + t1155 * t1284 + t1203 * t1234 + (t1217 * t1248 + t1226 * t1233) * t1273;
t1108 = qJD(4) * t1389 - t1154 * t1319 + t1155 * t1278 + t1203 * t1311 + t1217 * t1310 - t1226 * t1302;
t1107 = -qJD(4) * t1388 + t1152 * t1243 + t1153 * t1284 + t1205 * t1234 + (t1213 * t1248 - t1230 * t1233) * t1273;
t1106 = qJD(4) * t1387 - t1152 * t1319 + t1153 * t1278 + t1205 * t1311 + t1213 * t1310 + t1230 * t1302;
t1105 = qJD(4) * t1308 + t1137 * t1284 - t1193 * t1234 + t1243 * t1297;
t1104 = -qJD(4) * t1307 + t1137 * t1278 - t1193 * t1311 - t1297 * t1319;
t1103 = -qJD(4) * t1306 + t1136 * t1243 + t1198 * t1234 - t1284 * t1296;
t1102 = qJD(4) * t1305 - t1136 * t1319 + t1198 * t1311 - t1278 * t1296;
t1101 = t1116 * t1283 + t1176 * t1277 + (-t1172 * t1277 + t1202 * t1283) * qJD(5);
t1099 = -t1179 * t1369 + t1114 * t1283 + (-t1169 * t1277 - t1209 * t1368) * qJD(5);
t1090 = -qJD(4) * t1190 - t1136 * t1278 + t1296 * t1319 + t1311 * t1315 + t1312 * t1321 + t1317 * t1318;
t1089 = qJD(5) * t1329 + t1167 * t1277 + t1283 * t1290;
t1087 = -t1297 * t1369 + t1105 * t1283 + (-t1161 * t1277 + t1193 * t1368) * qJD(5);
t1085 = -t1136 * t1369 + t1103 * t1283 + (-t1163 * t1277 - t1198 * t1368) * qJD(5);
t1083 = t1109 * t1283 + t1132 * t1277 + (-t1157 * t1277 + t1184 * t1283) * qJD(5);
t1081 = t1107 * t1283 + t1131 * t1277 + (-t1159 * t1277 + t1185 * t1283) * qJD(5);
t1075 = qJD(5) * t1330 + t1277 * t1291 + t1283 * t1288;
t1074 = qJD(5) * t1121 + t1277 * t1288 - t1283 * t1291;
t1073 = t1075 * t1282 + t1090 * t1276 + (-t1121 * t1276 + t1147 * t1282) * qJD(6);
t1072 = -t1075 * t1276 + t1090 * t1282 + (-t1121 * t1282 - t1147 * t1276) * qJD(6);
t1 = [t1428 * r_i_i_C(1) - t1429 * r_i_i_C(2) + t1079 * pkin(5) + t1097 * pkin(4) - t1093 * pkin(13) + t1297 * pkin(3) - t1216 * pkin(2) - pkin(11) * t1385 + t1406 * t1427 + (r_i_i_C(1) * t1426 + r_i_i_C(2) * t1425) * qJD(6) + t1124 * pkin(12) + (-t1287 * pkin(1) + (-pkin(11) * t1402 - pkin(10)) * t1366) * qJD(1) (t1081 * t1282 + t1106 * t1276) * r_i_i_C(1) + (-t1081 * t1276 + t1106 * t1282) * r_i_i_C(2) + t1081 * pkin(5) + t1107 * pkin(4) + t1106 * pkin(13) + t1153 * pkin(3) + t1212 * pkin(2) - t1213 * t1405 + t1406 * (qJD(5) * t1126 + t1107 * t1277 - t1131 * t1283) + ((-t1126 * t1276 + t1158 * t1282) * r_i_i_C(1) + (-t1126 * t1282 - t1158 * t1276) * r_i_i_C(2)) * qJD(6) + t1131 * pkin(12) (t1085 * t1282 + t1102 * t1276) * r_i_i_C(1) + (-t1085 * t1276 + t1102 * t1282) * r_i_i_C(2) + t1085 * pkin(5) + t1103 * pkin(4) + t1102 * pkin(13) - t1296 * pkin(3) - t1136 * t1404 + t1406 * (qJD(5) * t1128 + t1103 * t1277 + t1136 * t1368) + ((-t1128 * t1276 + t1162 * t1282) * r_i_i_C(1) + (-t1128 * t1282 - t1162 * t1276) * r_i_i_C(2)) * qJD(6) (t1276 * t1288 + t1293 * t1398) * r_i_i_C(1) + (t1282 * t1288 - t1293 * t1399) * r_i_i_C(2) + t1288 * pkin(13) + t1301 * t1090 + t1295 * t1147, -t1333 * t1074 + t1075 * t1406 - t1330 * t1328, r_i_i_C(1) * t1072 - r_i_i_C(2) * t1073; -t1213 * pkin(2) - t1136 * pkin(3) + t1288 * pkin(4) + t1075 * pkin(5) + t1090 * pkin(13) + t1073 * r_i_i_C(1) + t1072 * r_i_i_C(2) + t1406 * t1074 + (-pkin(1) * t1281 + pkin(10) * t1365) * qJD(1) + t1291 * pkin(12) - t1317 * pkin(11) (t1083 * t1282 + t1108 * t1276) * r_i_i_C(1) + (-t1083 * t1276 + t1108 * t1282) * r_i_i_C(2) + t1083 * pkin(5) + t1109 * pkin(4) + t1108 * pkin(13) + t1155 * pkin(3) - t1215 * pkin(2) - t1217 * t1405 + t1406 * (qJD(5) * t1125 + t1109 * t1277 - t1132 * t1283) + ((-t1125 * t1276 + t1156 * t1282) * r_i_i_C(1) + (-t1125 * t1282 - t1156 * t1276) * r_i_i_C(2)) * qJD(6) + t1132 * pkin(12) (t1087 * t1282 + t1104 * t1276) * r_i_i_C(1) + (-t1087 * t1276 + t1104 * t1282) * r_i_i_C(2) + t1087 * pkin(5) + t1105 * pkin(4) + t1104 * pkin(13) + t1137 * pkin(3) - t1297 * t1404 + t1406 * (qJD(5) * t1127 + t1105 * t1277 + t1297 * t1368) + ((-t1127 * t1276 + t1160 * t1282) * r_i_i_C(1) + (-t1127 * t1282 - t1160 * t1276) * r_i_i_C(2)) * qJD(6) (-t1097 * t1276 + t1294 * t1398) * r_i_i_C(1) + (-t1097 * t1282 - t1294 * t1399) * r_i_i_C(2) - t1097 * pkin(13) + t1301 * t1093 + t1295 * t1142, -t1079 * t1406 + t1420 * t1328 + t1333 * t1427, t1429 * r_i_i_C(1) + t1428 * r_i_i_C(2) + (-r_i_i_C(1) * t1425 + r_i_i_C(2) * t1426) * qJD(6); 0 (t1101 * t1282 + t1115 * t1276) * r_i_i_C(1) + (-t1101 * t1276 + t1115 * t1282) * r_i_i_C(2) + t1101 * pkin(5) + t1116 * pkin(4) + t1115 * pkin(13) + t1183 * pkin(3) + t1241 * pkin(2) + t1239 * t1405 + t1406 * (qJD(5) * t1150 + t1116 * t1277 - t1176 * t1283) + ((-t1150 * t1276 + t1171 * t1282) * r_i_i_C(1) + (-t1150 * t1282 - t1171 * t1276) * r_i_i_C(2)) * qJD(6) + t1176 * pkin(12) (t1099 * t1282 + t1113 * t1276) * r_i_i_C(1) + (-t1099 * t1276 + t1113 * t1282) * r_i_i_C(2) + t1099 * pkin(5) + t1114 * pkin(4) + t1113 * pkin(13) + t1177 * pkin(3) - t1179 * t1404 + t1406 * (qJD(5) * t1151 + t1114 * t1277 + t1179 * t1368) + ((-t1151 * t1276 + t1168 * t1282) * r_i_i_C(1) + (-t1151 * t1282 - t1168 * t1276) * r_i_i_C(2)) * qJD(6) (t1276 * t1290 + t1292 * t1398) * r_i_i_C(1) + (t1282 * t1290 - t1292 * t1399) * r_i_i_C(2) + t1290 * pkin(13) + t1301 * t1110 + t1295 * t1164, t1406 * t1089 - t1329 * t1328 + t1333 * (-qJD(5) * t1130 + t1167 * t1283 - t1277 * t1290) (-t1089 * t1276 + t1110 * t1282) * r_i_i_C(1) + (-t1089 * t1282 - t1110 * t1276) * r_i_i_C(2) + ((-t1130 * t1282 - t1164 * t1276) * r_i_i_C(1) + (t1130 * t1276 - t1164 * t1282) * r_i_i_C(2)) * qJD(6);];
JaD_transl  = t1;
