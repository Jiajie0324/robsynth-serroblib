% Zeitableitung der translatorischen Teilmatrix der analytischen Jacobi-Matrix für Segment Nr. 6 (0=Basis) von
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
%
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
%
% Output:
% JaD_transl [3x6]
%   Zeitableitung der translatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-02-26 22:53
% Revision: d75aae1ac561373cd3be920984c3df29a1c2ecc8 (2019-02-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = S6RRRRRR10_jacobiaD_transl_6_sym_varpar(qJ, qJD, r_i_i_C, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_transl_6_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_transl_6_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'S6RRRRRR10_jacobiaD_transl_6_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiaD_transl_6_sym_varpar: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From jacobiaD_transl_6_floatb_twist_matlab.m
% OptimizationMode: 2
% StartTime: 2019-02-26 22:53:14
% EndTime: 2019-02-26 22:53:21
% DurationCPUTime: 7.64s
% Computational Cost: add. (7512->405), mult. (23410->656), div. (0->0), fcn. (26467->18), ass. (0->236)
t1071 = cos(qJ(3));
t1060 = sin(pkin(7));
t1061 = sin(pkin(6));
t1208 = cos(qJ(1));
t1159 = t1061 * t1208;
t1145 = t1060 * t1159;
t1072 = cos(qJ(2));
t1203 = cos(pkin(6));
t1139 = t1203 * t1208;
t1206 = sin(qJ(2));
t1207 = sin(qJ(1));
t1146 = t1207 * t1206;
t1047 = -t1072 * t1139 + t1146;
t1063 = cos(pkin(7));
t1179 = t1047 * t1063;
t1111 = t1145 + t1179;
t1138 = t1203 * t1206;
t1156 = t1207 * t1072;
t1048 = t1138 * t1208 + t1156;
t1067 = sin(qJ(3));
t1177 = t1048 * t1067;
t1020 = t1071 * t1111 + t1177;
t1059 = sin(pkin(8));
t1062 = cos(pkin(8));
t1144 = t1063 * t1159;
t1115 = t1047 * t1060 - t1144;
t1000 = t1020 * t1059 + t1062 * t1115;
t1065 = sin(qJ(5));
t1069 = cos(qJ(5));
t1053 = t1067 * t1145;
t1165 = t1063 * t1067;
t1176 = t1048 * t1071;
t1021 = t1047 * t1165 + t1053 - t1176;
t1066 = sin(qJ(4));
t1070 = cos(qJ(4));
t1102 = t1115 * t1059;
t1127 = t1020 * t1062 - t1102;
t981 = t1021 * t1070 + t1066 * t1127;
t952 = -t1000 * t1065 + t1069 * t981;
t1240 = qJD(5) * t952;
t1064 = sin(qJ(6));
t1239 = t1064 * t952;
t1068 = cos(qJ(6));
t1238 = t1068 * t952;
t1094 = t1156 * t1203 + t1206 * t1208;
t1034 = qJD(1) * t1094 + qJD(2) * t1048;
t1143 = t1207 * t1060 * t1061;
t1105 = qJD(1) * t1143 - t1034 * t1063;
t1124 = t1207 * t1138;
t1157 = t1208 * qJD(1);
t1035 = -qJD(1) * t1124 - qJD(2) * t1146 + (qJD(2) * t1139 + t1157) * t1072;
t1231 = (t1067 * t1111 - t1176) * qJD(3) - t1035 * t1067;
t1083 = t1105 * t1071 + t1231;
t1158 = t1063 * t1207;
t1142 = t1061 * t1158;
t1184 = t1034 * t1060;
t1106 = qJD(1) * t1142 + t1184;
t1222 = t1059 * t1106 + t1062 * t1083;
t1237 = t1066 * t1222;
t1236 = -qJD(4) * t981 - t1070 * t1222;
t1131 = t1000 * t1069 + t1065 * t981;
t1234 = qJD(5) * t1131;
t1229 = t1021 * t1066;
t1225 = t1106 * t1062;
t1209 = r_i_i_C(3) + pkin(14);
t1033 = qJD(1) * t1048 + qJD(2) * t1094;
t1093 = -t1072 * t1208 + t1124;
t1092 = t1093 * qJD(2);
t1087 = qJD(1) * t1047 + t1092;
t1085 = t1087 * t1071;
t1135 = t1071 * t1145;
t1077 = qJD(1) * t1135 + t1033 * t1067 + t1063 * t1085;
t1134 = t1067 * t1143;
t1175 = t1094 * t1063;
t1153 = qJD(3) * t1175;
t1173 = t1093 * t1071;
t1076 = t1067 * t1153 + t1077 + (-t1134 + t1173) * qJD(3);
t1080 = -qJD(1) * t1115 - t1060 * t1092;
t1073 = -t1076 * t1059 + t1080 * t1062;
t1224 = t1059 * t1080 + t1062 * t1076;
t1110 = t1143 - t1175;
t1023 = t1067 * t1110 - t1173;
t1223 = -qJD(3) * t1023 + t1077;
t1154 = t1206 * t1071;
t1163 = t1067 * t1072;
t1113 = t1063 * t1163 + t1154;
t1100 = t1113 * qJD(3);
t1108 = -t1063 * t1154 - t1163;
t1147 = t1203 * t1060;
t1136 = t1067 * t1147;
t1126 = qJD(3) * t1136;
t1084 = -t1126 + (qJD(2) * t1108 - t1100) * t1061;
t1160 = t1060 * t1206;
t1132 = t1059 * t1061 * t1160;
t1221 = qJD(2) * t1132 + t1062 * t1084;
t1133 = t1071 * t1143;
t1164 = t1063 * t1071;
t1220 = qJD(1) * t1133 - t1034 * t1164 + t1231;
t1169 = t1060 * t1062;
t1086 = t1087 * t1067;
t1117 = t1071 * t1094 - t1093 * t1165;
t984 = qJD(3) * t1117 + t1033 * t1164 - t1086;
t968 = -t1033 * t1169 - t1059 * t984;
t1174 = t1093 * t1067;
t1022 = t1071 * t1110 + t1174;
t1114 = t1060 * t1094 + t1142;
t1002 = -t1022 * t1059 + t1062 * t1114;
t1101 = t1114 * t1059;
t983 = t1023 * t1070 + (t1022 * t1062 + t1101) * t1066;
t1219 = t1002 * t1069 - t1065 * t983;
t1155 = t1206 * t1067;
t1162 = t1071 * t1072;
t1112 = t1063 * t1162 - t1155;
t1038 = t1061 * t1112 + t1071 * t1147;
t1039 = t1061 * t1113 + t1136;
t1168 = t1061 * t1072;
t1148 = t1060 * t1168;
t1107 = t1063 * t1203 - t1148;
t1099 = t1107 * t1059;
t1166 = t1062 * t1070;
t1218 = t1038 * t1166 - t1039 * t1066 + t1070 * t1099;
t1217 = t1022 * t1166 - t1023 * t1066 + t1070 * t1101;
t1216 = -t1020 * t1166 + t1070 * t1102 + t1229;
t1140 = t1063 * t1155;
t1109 = t1140 - t1162;
t1043 = t1109 * t1061;
t1042 = t1108 * t1061;
t1104 = t1042 * t1062 + t1132;
t1214 = t1043 * t1066 + t1070 * t1104;
t1029 = t1067 * t1094 + t1093 * t1164;
t1172 = t1059 * t1060;
t1119 = t1029 * t1062 - t1093 * t1172;
t1213 = t1066 * t1117 + t1070 * t1119;
t1178 = t1047 * t1071;
t1118 = t1048 * t1165 + t1178;
t1027 = t1047 * t1067 - t1048 * t1164;
t1120 = t1027 * t1062 + t1048 * t1172;
t1212 = t1066 * t1118 + t1070 * t1120;
t1211 = t1070 * t1127 - t1229;
t1205 = pkin(11) * t1060;
t1204 = pkin(12) * t1059;
t974 = qJD(1) * t1053 + t1063 * t1086 + (-t1033 - t1153) * t1071 + (t1133 + t1174) * qJD(3);
t930 = t983 * qJD(4) + t974 * t1066 - t1070 * t1224;
t1201 = t1064 * t930;
t1052 = qJD(3) * t1135;
t1183 = t1034 * t1067;
t975 = qJD(1) * t1134 + t1035 * t1071 - qJD(3) * t1177 - t1052 + (-qJD(3) * t1178 - t1183) * t1063;
t932 = t975 * t1066 + t1236;
t1200 = t1064 * t932;
t1194 = qJD(2) * t1061;
t1014 = -t1140 * t1194 - t1061 * qJD(3) * t1155 + (qJD(2) * t1168 + (t1063 * t1168 + t1147) * qJD(3)) * t1071;
t999 = t1039 * t1070 + (t1038 * t1062 + t1099) * t1066;
t955 = t999 * qJD(4) + t1014 * t1066 - t1070 * t1221;
t1199 = t1064 * t955;
t1197 = t1068 * t930;
t1196 = t1068 * t932;
t1195 = t1068 * t955;
t1193 = qJD(6) * t1064;
t1192 = qJD(6) * t1068;
t1025 = (-qJD(2) * t1112 + qJD(3) * t1109) * t1061;
t1187 = t1025 * t1059;
t1171 = t1059 * t1065;
t1170 = t1059 * t1069;
t1167 = t1062 * t1066;
t1161 = qJD(5) * t1209;
t1141 = t1062 * t1160;
t1137 = qJD(2) * t1148;
t954 = t1002 * t1065 + t1069 * t983;
t1008 = -t1027 * t1059 + t1048 * t1169;
t989 = t1066 * t1120 - t1070 * t1118;
t964 = t1008 * t1065 + t1069 * t989;
t1009 = -t1029 * t1059 - t1093 * t1169;
t991 = t1066 * t1119 - t1070 * t1117;
t965 = t1009 * t1065 + t1069 * t991;
t1017 = -t1038 * t1059 + t1062 * t1107;
t1130 = t1017 * t1069 - t1065 * t999;
t973 = t1017 * t1065 + t1069 * t999;
t959 = t1059 * t1083 - t1225;
t1128 = r_i_i_C(1) * t1068 - r_i_i_C(2) * t1064 + pkin(5);
t1007 = -t1043 * t1070 + t1066 * t1104;
t1031 = -t1042 * t1059 + t1061 * t1141;
t996 = t1007 * t1069 + t1031 * t1065;
t1125 = qJD(6) * (-r_i_i_C(1) * t1064 - r_i_i_C(2) * t1068);
t993 = -t1020 * t1070 + t1021 * t1167;
t966 = -t1021 * t1171 + t1069 * t993;
t995 = t1022 * t1070 - t1023 * t1167;
t967 = t1023 * t1171 + t1069 * t995;
t1122 = t1033 * t1172 - t1062 * t984;
t986 = qJD(3) * t1118 - t1035 * t1164 + t1183;
t969 = t1035 * t1169 - t1059 * t986;
t1121 = t1035 * t1172 + t1062 * t986;
t1005 = t1038 * t1070 - t1039 * t1167;
t997 = t1005 * t1069 + t1039 * t1171;
t992 = -t1020 * t1066 - t1021 * t1166;
t994 = t1022 * t1066 + t1023 * t1166;
t1004 = t1038 * t1066 + t1039 * t1166;
t1116 = qJD(5) * t1128;
t1103 = t1025 * t1062 + t1059 * t1137;
t1026 = (-qJD(2) * t1113 + qJD(3) * t1108) * t1061;
t1010 = t1062 * t1137 - t1187;
t1003 = t1059 * t1126 + (t1059 * t1100 + (-t1059 * t1108 + t1141) * qJD(2)) * t1061;
t987 = qJD(3) * t1027 - t1034 * t1071 - t1035 * t1165;
t985 = qJD(3) * t1029 + t1033 * t1165 + t1085;
t977 = t1052 + (qJD(3) * t1179 - t1035) * t1071 + (qJD(3) * t1048 - t1105) * t1067;
t963 = qJD(4) * t1214 + t1026 * t1070 + t1103 * t1066;
t962 = qJD(4) * t1007 + t1026 * t1066 - t1070 * t1103;
t961 = -t1004 * qJD(4) - t1014 * t1167 + t1070 * t1084;
t960 = t1005 * qJD(4) + t1014 * t1166 + t1066 * t1084;
t958 = -t1059 * t1220 + t1225;
t956 = qJD(4) * t1218 + t1014 * t1070 + t1066 * t1221;
t949 = t1010 * t1065 + t1069 * t963 + (-t1007 * t1065 + t1031 * t1069) * qJD(5);
t947 = t1014 * t1171 + t1069 * t961 + (-t1005 * t1065 + t1039 * t1170) * qJD(5);
t945 = qJD(4) * t1212 + t1121 * t1066 + t1070 * t987;
t944 = qJD(4) * t989 + t1066 * t987 - t1070 * t1121;
t943 = qJD(4) * t1213 - t1122 * t1066 + t1070 * t985;
t942 = qJD(4) * t991 + t1066 * t985 + t1070 * t1122;
t941 = -t992 * qJD(4) + t1070 * t1220 - t975 * t1167;
t940 = t993 * qJD(4) + t1066 * t1220 + t975 * t1166;
t939 = -t994 * qJD(4) + t1070 * t1223 - t974 * t1167;
t938 = t995 * qJD(4) + t1066 * t1223 + t974 * t1166;
t937 = qJD(5) * t1130 + t1003 * t1065 + t1069 * t956;
t935 = qJD(4) * t1211 + t1070 * t977 - t1237;
t934 = t1066 * t977 - t1236;
t933 = qJD(4) * t1216 + t975 * t1070 + t1237;
t931 = qJD(4) * t1217 + t1066 * t1224 + t974 * t1070;
t929 = t975 * t1171 + t1069 * t941 + (-t1021 * t1170 - t1065 * t993) * qJD(5);
t927 = t974 * t1171 + t1069 * t939 + (t1023 * t1170 - t1065 * t995) * qJD(5);
t925 = t1065 * t969 + t1069 * t945 + (t1008 * t1069 - t1065 * t989) * qJD(5);
t923 = t1065 * t968 + t1069 * t943 + (t1009 * t1069 - t1065 * t991) * qJD(5);
t921 = t1065 * t959 + t1069 * t935 - t1234;
t919 = t1065 * t958 + t1069 * t933 + t1234;
t917 = qJD(5) * t1219 + t1073 * t1065 + t931 * t1069;
t916 = qJD(5) * t954 + t1065 * t931 - t1069 * t1073;
t915 = t1201 + t1068 * t917 + (-t1064 * t954 - t1068 * t1217) * qJD(6);
t914 = -t1064 * t917 + t1197 + (t1064 * t1217 - t1068 * t954) * qJD(6);
t1 = [(t1064 * t934 + t1068 * t921) * r_i_i_C(1) + (-t1064 * t921 + t1068 * t934) * r_i_i_C(2) + t921 * pkin(5) + t935 * pkin(4) + t934 * pkin(13) + t977 * pkin(3) - t1035 * pkin(2) - pkin(11) * t1184 + t1209 * (t1065 * t935 - t1069 * t959 + t1240) + ((-t1068 * t1211 - t1239) * r_i_i_C(1) + (t1064 * t1211 - t1238) * r_i_i_C(2)) * qJD(6) + t959 * pkin(12) + (-t1208 * pkin(1) + (-pkin(10) * t1207 - pkin(11) * t1158) * t1061) * qJD(1) (t1064 * t942 + t1068 * t923 + (-t1064 * t965 - t1068 * t1213) * qJD(6)) * r_i_i_C(1) + (-t1064 * t923 + t1068 * t942 + (t1064 * t1213 - t1068 * t965) * qJD(6)) * r_i_i_C(2) + t923 * pkin(5) + t943 * pkin(4) + t942 * pkin(13) + t985 * pkin(3) + t1087 * pkin(2) - t1033 * t1205 + t1209 * (qJD(5) * t965 + t1065 * t943 - t1069 * t968) + t968 * pkin(12) (t1064 * t938 + t1068 * t927 + (-t1064 * t967 + t1068 * t994) * qJD(6)) * r_i_i_C(1) + (-t1064 * t927 + t1068 * t938 + (-t1064 * t994 - t1068 * t967) * qJD(6)) * r_i_i_C(2) + t927 * pkin(5) + t939 * pkin(4) + t938 * pkin(13) + t1076 * pkin(3) + t974 * t1204 + t1209 * (qJD(5) * t967 + t1065 * t939 - t1170 * t974) (t1064 * t931 + t983 * t1192) * r_i_i_C(1) + (t1068 * t931 - t983 * t1193) * r_i_i_C(2) - t930 * pkin(4) + t931 * pkin(13) + (-t1116 * t1217 - t1209 * t930) * t1065 + ((-t1193 * t1217 - t1197) * r_i_i_C(1) + (-t1192 * t1217 + t1201) * r_i_i_C(2) - t930 * pkin(5) + t1217 * t1161) * t1069, t1125 * t1219 - t1128 * t916 + t1209 * t917, r_i_i_C(1) * t914 - r_i_i_C(2) * t915; t1061 * pkin(10) * t1157 - t1033 * pkin(2) + t974 * pkin(3) + t931 * pkin(4) + t917 * pkin(5) + t930 * pkin(13) + t915 * r_i_i_C(1) + t914 * r_i_i_C(2) - t1087 * t1205 + t1209 * t916 + (-pkin(1) * t1207 + pkin(11) * t1144) * qJD(1) + t1073 * pkin(12) (t1064 * t944 + t1068 * t925) * r_i_i_C(1) + (-t1064 * t925 + t1068 * t944) * r_i_i_C(2) + t925 * pkin(5) + t945 * pkin(4) + t944 * pkin(13) + t987 * pkin(3) - t1034 * pkin(2) + t1035 * t1205 + t1209 * (qJD(5) * t964 + t1065 * t945 - t1069 * t969) + ((-t1064 * t964 - t1068 * t1212) * r_i_i_C(1) + (t1064 * t1212 - t1068 * t964) * r_i_i_C(2)) * qJD(6) + t969 * pkin(12) (t1064 * t940 + t1068 * t929 + (-t1064 * t966 + t1068 * t992) * qJD(6)) * r_i_i_C(1) + (-t1064 * t929 + t1068 * t940 + (-t1064 * t992 - t1068 * t966) * qJD(6)) * r_i_i_C(2) + t929 * pkin(5) + t941 * pkin(4) + t940 * pkin(13) + t1083 * pkin(3) + t975 * t1204 + t1209 * (qJD(5) * t966 + t1065 * t941 - t1170 * t975) (t1064 * t933 - t1192 * t981) * r_i_i_C(1) + (t1068 * t933 + t1193 * t981) * r_i_i_C(2) - t932 * pkin(4) + t933 * pkin(13) + (-t1116 * t1216 - t1209 * t932) * t1065 + ((-t1193 * t1216 - t1196) * r_i_i_C(1) + (-t1192 * t1216 + t1200) * r_i_i_C(2) - t932 * pkin(5) + t1216 * t1161) * t1069, t1209 * t919 + t1131 * t1125 + t1128 * (-t1065 * t933 + t1069 * t958 + t1240) (-t1064 * t919 + t1196) * r_i_i_C(1) + (-t1068 * t919 - t1200) * r_i_i_C(2) + ((t1064 * t1216 + t1238) * r_i_i_C(1) + (t1068 * t1216 - t1239) * r_i_i_C(2)) * qJD(6); 0 (t1064 * t962 + t1068 * t949) * r_i_i_C(1) + (-t1064 * t949 + t1068 * t962) * r_i_i_C(2) + t949 * pkin(5) + t963 * pkin(4) + t962 * pkin(13) + t1026 * pkin(3) - pkin(12) * t1187 + t1209 * (qJD(5) * t996 - t1010 * t1069 + t1065 * t963) + ((-t1064 * t996 - t1068 * t1214) * r_i_i_C(1) + (t1064 * t1214 - t1068 * t996) * r_i_i_C(2)) * qJD(6) + (-t1206 * pkin(2) + (pkin(12) * t1062 + pkin(11)) * t1072 * t1060) * t1194 (t1064 * t960 + t1068 * t947 + (t1004 * t1068 - t1064 * t997) * qJD(6)) * r_i_i_C(1) + (-t1064 * t947 + t1068 * t960 + (-t1004 * t1064 - t1068 * t997) * qJD(6)) * r_i_i_C(2) + t947 * pkin(5) + t961 * pkin(4) + t960 * pkin(13) + t1084 * pkin(3) + t1014 * t1204 + t1209 * (qJD(5) * t997 - t1014 * t1170 + t1065 * t961) (t1064 * t956 + t999 * t1192) * r_i_i_C(1) + (t1068 * t956 - t999 * t1193) * r_i_i_C(2) - t955 * pkin(4) + t956 * pkin(13) + (-t1116 * t1218 - t1209 * t955) * t1065 + ((-t1193 * t1218 - t1195) * r_i_i_C(1) + (-t1192 * t1218 + t1199) * r_i_i_C(2) - t955 * pkin(5) + t1218 * t1161) * t1069, t1209 * t937 + t1130 * t1125 + t1128 * (-qJD(5) * t973 + t1003 * t1069 - t1065 * t956) (-t1064 * t937 + t1195) * r_i_i_C(1) + (-t1068 * t937 - t1199) * r_i_i_C(2) + ((t1064 * t1218 - t1068 * t973) * r_i_i_C(1) + (t1064 * t973 + t1068 * t1218) * r_i_i_C(2)) * qJD(6);];
JaD_transl  = t1;
