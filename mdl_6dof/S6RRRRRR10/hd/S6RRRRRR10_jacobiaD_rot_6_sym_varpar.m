% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für Segment Nr. 6 (0=Basis) von
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
%
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
%
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
%
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-02-26 22:53
% Revision: d75aae1ac561373cd3be920984c3df29a1c2ecc8 (2019-02-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRRRR10_jacobiaD_rot_6_sym_varpar(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_rot_6_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_rot_6_sym_varpar: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiaD_rot_6_sym_varpar: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From jacobiaD_rot_6_floatb_twist_matlab.m
% OptimizationMode: 2
% StartTime: 2019-02-26 22:53:01
% EndTime: 2019-02-26 22:53:14
% DurationCPUTime: 14.02s
% Computational Cost: add. (73363->375), mult. (219258->677), div. (1240->12), fcn. (277561->21), ass. (0->266)
t722 = sin(qJ(3));
t873 = sin(pkin(7));
t874 = sin(pkin(6));
t820 = t874 * t873;
t881 = cos(qJ(1));
t800 = t881 * t820;
t711 = t722 * t800;
t876 = cos(pkin(6));
t880 = cos(qJ(2));
t828 = t876 * t880;
t877 = sin(qJ(2));
t878 = sin(qJ(1));
t788 = -t881 * t828 + t878 * t877;
t875 = cos(pkin(7));
t891 = t788 * t875;
t827 = t876 * t877;
t776 = t827 * t881 + t878 * t880;
t879 = cos(qJ(3));
t892 = t776 * t879;
t688 = t722 * t891 + t711 - t892;
t721 = sin(qJ(4));
t725 = cos(qJ(4));
t717 = sin(pkin(8));
t718 = cos(pkin(8));
t821 = t875 * t874;
t801 = t881 * t821;
t757 = t788 * t873 - t801;
t783 = t879 * t800;
t769 = t879 * t891;
t884 = -t776 * t722 - t769;
t903 = t783 - t884;
t816 = -t717 * t757 + t718 * t903;
t657 = t688 * t725 + t721 * t816;
t720 = sin(qJ(5));
t724 = cos(qJ(5));
t740 = t717 * t903 + t718 * t757;
t628 = t657 * t724 - t720 * t740;
t777 = t828 * t878 + t877 * t881;
t698 = qJD(1) * t777 + qJD(2) * t776;
t796 = t878 * t821;
t774 = qJD(1) * t796 + t698 * t873;
t813 = -t878 * t827 + t881 * t880;
t699 = qJD(1) * t813 - qJD(2) * t788;
t795 = t878 * t820;
t781 = t879 * t795;
t826 = t875 * t879;
t887 = qJD(1) * t781 + qJD(3) * (t722 * (t891 + t800) - t892) - t698 * t826 - t699 * t722;
t635 = t717 * t887 - t774 * t718;
t913 = -qJD(5) * t628 + t635 * t724;
t737 = t740 * t724;
t627 = t657 * t720 + t737;
t734 = t774 * t717 + t718 * t887;
t912 = qJD(4) * t657 + t734 * t725;
t882 = -t688 * t721 + t725 * t816;
t911 = -qJD(4) * t882 + t721 * t734;
t910 = t635 * t720;
t697 = qJD(1) * t776 + qJD(2) * t777;
t751 = qJD(1) * t788 - t813 * qJD(2);
t750 = t751 * t875;
t765 = t777 * t875;
t895 = t722 * (t765 - t795) - t813 * t879;
t889 = qJD(1) * t783 + qJD(3) * t895 + t697 * t722 + t750 * t879;
t799 = t880 * t821;
t824 = t874 * t877;
t897 = t722 * t824 - t879 * t799;
t803 = t879 * t824;
t819 = t873 * t876;
t702 = t722 * (t799 + t819) + t803;
t701 = t819 * t879 - t897;
t798 = t880 * t820;
t708 = t875 * t876 - t798;
t815 = t701 * t718 + t708 * t717;
t671 = -t702 * t721 + t725 * t815;
t802 = t877 * t821;
t825 = t880 * t874;
t762 = t722 * t802 - t879 * t825;
t683 = -qJD(2) * t762 + qJD(3) * t701;
t704 = -t722 * t825 - t802 * t879;
t682 = t704 * qJD(2) - qJD(3) * t702;
t797 = t877 * t820;
t789 = qJD(2) * t797;
t775 = t682 * t718 + t717 * t789;
t632 = qJD(4) * t671 + t683 * t725 + t721 * t775;
t672 = t702 * t725 + t721 * t815;
t685 = -t701 * t717 + t708 * t718;
t648 = t672 * t724 + t685 * t720;
t676 = -t682 * t717 + t718 * t789;
t594 = qJD(5) * t648 + t632 * t720 - t676 * t724;
t647 = t672 * t720 - t685 * t724;
t645 = 0.1e1 / t647 ^ 2;
t894 = t594 * t645;
t644 = 0.1e1 / t647;
t859 = t627 * t645;
t807 = t644 * t882 - t671 * t859;
t893 = t720 * t807;
t743 = qJD(1) * t801 - t751 * t873;
t890 = t717 * t743 + t718 * t889;
t749 = t813 * t722 + t879 * t765 - t781;
t747 = t749 * t725;
t754 = t777 * t873 + t796;
t753 = t754 * t717;
t888 = -t718 * t747 + t725 * t753;
t764 = t776 * t875;
t692 = t722 * t788 - t764 * t879;
t763 = t776 * t873;
t886 = t692 * t718 + t717 * t763;
t786 = t813 * t875;
t695 = -t722 * t786 - t777 * t879;
t694 = t722 * t777 - t786 * t879;
t785 = t813 * t873;
t772 = t694 * t718 + t717 * t785;
t883 = -t695 * t721 + t725 * t772;
t613 = atan2(t627, t647);
t600 = sin(t613);
t601 = cos(t613);
t575 = t600 * t627 + t601 * t647;
t572 = 0.1e1 / t575;
t659 = -t895 * t725 + (-t718 * t749 + t753) * t721;
t738 = t717 * t749 + t718 * t754;
t630 = t659 * t724 + t720 * t738;
t658 = -t721 * t895 - t888;
t719 = sin(qJ(6));
t723 = cos(qJ(6));
t611 = t630 * t723 + t658 * t719;
t603 = 0.1e1 / t611;
t573 = 0.1e1 / t575 ^ 2;
t604 = 0.1e1 / t611 ^ 2;
t736 = t738 * t724;
t629 = t659 * t720 - t736;
t623 = t629 ^ 2;
t571 = t573 * t623 + 0.1e1;
t650 = qJD(1) * t711 - qJD(3) * t749 - t697 * t879 + t722 * t750;
t845 = qJD(4) * t721;
t589 = qJD(4) * t888 + t650 * t725 + t721 * t890 + t845 * t895;
t732 = -t717 * t889 + t743 * t718;
t576 = qJD(5) * t630 + t589 * t720 - t724 * t732;
t866 = t573 * t629;
t622 = t627 ^ 2;
t612 = t622 * t645 + 0.1e1;
t606 = 0.1e1 / t612;
t773 = qJD(1) * t795 - t698 * t875;
t823 = qJD(3) * t783 - t699 * t879;
t651 = qJD(3) * t884 + t773 * t722 - t823;
t591 = t651 * t725 + t911;
t578 = t591 * t720 + t913;
t812 = -t578 * t644 - t594 * t859;
t561 = t812 * t606;
t818 = -t600 * t647 + t601 * t627;
t554 = t561 * t818 - t578 * t600 + t594 * t601;
t574 = t572 * t573;
t871 = t554 * t574;
t872 = 0.2e1 * (t576 * t866 - t623 * t871) / t571 ^ 2;
t843 = qJD(5) * t720;
t577 = qJD(5) * t736 + t589 * t724 - t659 * t843 + t720 * t732;
t588 = t659 * qJD(4) + t650 * t721 - t725 * t890;
t563 = qJD(6) * t611 + t577 * t719 - t588 * t723;
t610 = t630 * t719 - t658 * t723;
t602 = t610 ^ 2;
t583 = t602 * t604 + 0.1e1;
t862 = t604 * t610;
t841 = qJD(6) * t610;
t564 = t577 * t723 + t588 * t719 - t841;
t868 = t564 * t603 * t604;
t870 = 0.2e1 * (t563 * t862 - t602 * t868) / t583 ^ 2;
t865 = t644 * t894;
t869 = 0.2e1 * (-t578 * t859 - t622 * t865) / t612 ^ 2;
t867 = t573 * t576;
t864 = t600 * t629;
t863 = t601 * t629;
t861 = t610 * t723;
t860 = t627 * t644;
t858 = t658 * t720;
t857 = t658 * t724;
t851 = t717 * t720;
t850 = t717 * t724;
t849 = t718 * t721;
t848 = t718 * t725;
t847 = t719 * t603;
t842 = qJD(5) * t724;
t840 = 0.2e1 * t574 * t629;
t839 = t644 * t869;
t838 = t573 * t864;
t837 = t573 * t863;
t836 = t610 * t868;
t835 = t717 * t873;
t834 = t718 * t873;
t833 = t722 * t875;
t832 = t554 * t840;
t831 = 0.2e1 * t627 * t865;
t830 = 0.2e1 * t836;
t822 = qJD(6) * t857 + t589;
t609 = t628 * t723 - t719 * t882;
t608 = t628 * t719 + t723 * t882;
t665 = t695 * t725 + t721 * t772;
t680 = -t694 * t717 + t718 * t785;
t638 = t665 * t724 + t680 * t720;
t617 = t638 * t723 - t719 * t883;
t616 = t638 * t719 + t723 * t883;
t668 = t849 * t895 - t747;
t641 = t668 * t724 - t851 * t895;
t667 = -t721 * t749 - t848 * t895;
t621 = t641 * t723 + t667 * t719;
t620 = t641 * t719 - t667 * t723;
t637 = t665 * t720 - t680 * t724;
t811 = t604 * t861 - t847;
t810 = t628 * t644 - t648 * t859;
t693 = -t722 * t764 - t788 * t879;
t663 = t693 * t725 + t721 * t886;
t758 = -t692 * t717 + t718 * t763;
t636 = t663 * t720 - t724 * t758;
t780 = t704 * t718 + t717 * t797;
t679 = t721 * t780 - t725 * t762;
t696 = -t704 * t717 + t718 * t797;
t669 = t679 * t720 - t696 * t724;
t809 = -t636 * t644 - t669 * t859;
t666 = t688 * t849 - t725 * t903;
t639 = t666 * t720 + t688 * t850;
t677 = t701 * t725 - t702 * t849;
t670 = t677 * t720 - t702 * t850;
t808 = -t639 * t644 - t670 * t859;
t806 = -t668 * t720 - t850 * t895;
t660 = -qJD(3) * t695 + t697 * t826 - t722 * t751;
t793 = -t660 * t718 + t697 * t835;
t792 = -t600 + (-t601 * t860 + t600) * t606;
t790 = qJD(2) * t798;
t784 = qJD(6) * t659 - t588 * t724 + t658 * t843;
t691 = qJD(2) * t897 + t762 * qJD(3);
t662 = -qJD(3) * t693 + t698 * t722 - t699 * t826;
t661 = qJD(3) * t694 + t697 * t833 + t751 * t879;
t653 = qJD(3) * t769 + (qJD(3) * t776 - t773) * t722 + t823;
t642 = -t660 * t717 - t697 * t834;
t631 = -qJD(4) * t672 - t683 * t721 + t775 * t725;
t619 = t659 * t719 - t723 * t857;
t618 = -t659 * t723 - t719 * t857;
t615 = (qJD(5) * t679 + t691 * t717 - t718 * t790) * t724 + ((t704 * qJD(3) + (-t722 * t799 - t803) * qJD(2)) * t725 + t691 * t849 + t717 * t721 * t790 + t696 * qJD(5) + (t721 * t762 + t725 * t780) * qJD(4)) * t720;
t614 = (-t683 * t849 + t682 * t725 + (-t701 * t721 - t702 * t848) * qJD(4)) * t720 - t683 * t850 + (t677 * t724 + t702 * t851) * qJD(5);
t599 = qJD(4) * t883 + t661 * t725 - t793 * t721;
t598 = qJD(4) * t665 + t661 * t721 + t725 * t793;
t597 = -t667 * qJD(4) - t650 * t849 + t725 * t889;
t596 = t668 * qJD(4) + t650 * t848 + t721 * t889;
t595 = -qJD(5) * t647 + t632 * t724 + t676 * t720;
t593 = t653 * t725 - t911;
t592 = t653 * t721 + t912;
t590 = -t651 * t721 + t912;
t587 = (-t651 * t849 + (t688 * t848 + t721 * t903) * qJD(4) + t887 * t725) * t720 - t651 * t850 + (t666 * t724 - t688 * t851) * qJD(5);
t586 = qJD(5) * t806 + t597 * t724 + t650 * t851;
t585 = (t699 * t721 * t835 + t662 * t849 - t693 * t845 + (qJD(3) * t692 + qJD(4) * t886 - t698 * t879 - t699 * t833) * t725) * t720 + t663 * t842 - (-t662 * t717 + t699 * t834) * t724 + t758 * t843;
t584 = -qJD(5) * t637 + t599 * t724 + t642 * t720;
t581 = 0.1e1 / t583;
t580 = -qJD(5) * t627 + t593 * t724 + t910;
t579 = qJD(5) * t737 + t591 * t724 + t657 * t843 - t910;
t569 = 0.1e1 / t571;
t568 = t606 * t893;
t567 = t808 * t606;
t566 = t809 * t606;
t565 = t810 * t606;
t560 = t792 * t629;
t558 = (t600 * t882 + t601 * t671) * t720 + t818 * t568;
t557 = t567 * t818 - t600 * t639 + t601 * t670;
t556 = t566 * t818 - t600 * t636 + t601 * t669;
t555 = t565 * t818 + t600 * t628 + t601 * t648;
t553 = -t808 * t869 + (t670 * t831 - t587 * t644 + (t578 * t670 + t594 * t639 - t614 * t627) * t645) * t606;
t552 = -t809 * t869 + (t669 * t831 - t585 * t644 + (t578 * t669 + t594 * t636 - t615 * t627) * t645) * t606;
t550 = -t810 * t869 + (t648 * t831 - t579 * t644 + (t578 * t648 - t594 * t628 - t595 * t627) * t645) * t606;
t549 = -t869 * t893 + (t807 * t842 + (t671 * t831 - t590 * t644 + (t578 * t671 - t594 * t882 - t627 * t631) * t645) * t720) * t606;
t1 = [t629 * t839 + (-t576 * t644 + t629 * t894) * t606, t552, t553, t549, t550, 0; -t627 * t572 * t872 + ((t593 * t720 - t913) * t572 + (-t627 * t554 - t560 * t576) * t573) * t569 + (t560 * t573 * t872 + (0.2e1 * t560 * t871 - (t561 * t606 * t860 - t869) * t838 - (t627 * t839 - t561 + (t561 - t812) * t606) * t837 - t792 * t867) * t569) * t629 (t556 * t866 - t572 * t637) * t872 + ((qJD(5) * t638 + t599 * t720 - t642 * t724) * t572 + t556 * t832 + (-t637 * t554 - t556 * t576 - (t552 * t627 - t566 * t578 + t615 + (-t566 * t647 - t636) * t561) * t863 - (-t552 * t647 - t566 * t594 - t585 + (-t566 * t627 - t669) * t561) * t864) * t573) * t569 (t557 * t866 + t572 * t806) * t872 + ((qJD(5) * t641 + t597 * t720 - t650 * t850) * t572 + t557 * t832 + (t806 * t554 - t557 * t576 - (t553 * t627 - t567 * t578 + t614 + (-t567 * t647 - t639) * t561) * t863 - (-t553 * t647 - t567 * t594 - t587 + (-t567 * t627 - t670) * t561) * t864) * t573) * t569 (t558 * t866 + t572 * t858) * t872 + (-t558 * t867 + (-t588 * t720 - t658 * t842) * t572 + (t558 * t840 + t573 * t858) * t554 - (t671 * t842 + t549 * t627 - t568 * t578 + t631 * t720 + (-t568 * t647 + t720 * t882) * t561) * t837 - (t882 * t842 - t549 * t647 - t568 * t594 - t590 * t720 + (-t568 * t627 - t671 * t720) * t561) * t838) * t569 (t555 * t866 - t572 * t630) * t872 + (t555 * t832 + t577 * t572 + (-t630 * t554 - t555 * t576 - (t550 * t627 - t565 * t578 + t595 + (-t565 * t647 + t628) * t561) * t863 - (-t550 * t647 - t565 * t594 - t579 + (-t565 * t627 - t648) * t561) * t864) * t573) * t569, 0; (-t603 * t608 + t609 * t862) * t870 + ((qJD(6) * t609 + t580 * t719 - t592 * t723) * t603 + t609 * t830 + (-t608 * t564 - (-qJD(6) * t608 + t580 * t723 + t592 * t719) * t610 - t609 * t563) * t604) * t581 (-t603 * t616 + t617 * t862) * t870 + ((qJD(6) * t617 + t584 * t719 - t598 * t723) * t603 + t617 * t830 + (-t616 * t564 - (-qJD(6) * t616 + t584 * t723 + t598 * t719) * t610 - t617 * t563) * t604) * t581 (-t603 * t620 + t621 * t862) * t870 + ((qJD(6) * t621 + t586 * t719 - t596 * t723) * t603 + t621 * t830 + (-t620 * t564 - (-qJD(6) * t620 + t586 * t723 + t596 * t719) * t610 - t621 * t563) * t604) * t581 (-t603 * t618 + t619 * t862) * t870 + (t619 * t830 - t822 * t603 * t723 + t784 * t847 + (-t610 * t719 * t822 - t619 * t563 - t618 * t564 - t784 * t861) * t604) * t581, -t811 * t629 * t870 + (t811 * t576 + ((-qJD(6) * t603 - 0.2e1 * t836) * t723 + (t563 * t723 + (t564 - t841) * t719) * t604) * t629) * t581, -t870 + (0.2e1 * t563 * t604 * t581 + (-0.2e1 * t581 * t868 - t604 * t870) * t610) * t610;];
JaD_rot  = t1;
