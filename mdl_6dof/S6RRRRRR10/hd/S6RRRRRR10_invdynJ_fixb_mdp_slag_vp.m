% Calculate vector of inverse dynamics joint torques for
% S6RRRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
% MDP [38x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRR10_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 06:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRR10_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1),zeros(38,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR10_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR10_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_invdynJ_fixb_mdp_slag_vp: pkin has to be [14x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [38 1]), ...
  'S6RRRRRR10_invdynJ_fixb_mdp_slag_vp: MDP has to be [38x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 06:18:27
% EndTime: 2019-03-10 06:19:59
% DurationCPUTime: 63.42s
% Computational Cost: add. (66409->1195), mult. (194228->1675), div. (0->0), fcn. (169667->18), ass. (0->487)
t1249 = sin(qJ(6));
t1248 = cos(pkin(6));
t1253 = sin(qJ(2));
t1520 = sin(qJ(1));
t1403 = t1520 * t1253;
t1258 = cos(qJ(2));
t1259 = cos(qJ(1));
t1426 = t1258 * t1259;
t1193 = -t1248 * t1426 + t1403;
t1402 = t1520 * t1258;
t1425 = t1259 * t1253;
t1194 = t1248 * t1425 + t1402;
t1247 = cos(pkin(7));
t1252 = sin(qJ(3));
t1257 = cos(qJ(3));
t1244 = sin(pkin(7));
t1245 = sin(pkin(6));
t1445 = t1245 * t1259;
t1384 = t1244 * t1445;
t1074 = t1257 * (t1193 * t1247 + t1384) + t1194 * t1252;
t1146 = -t1193 * t1244 + t1247 * t1445;
t1243 = sin(pkin(8));
t1246 = cos(pkin(8));
t1017 = t1074 * t1243 - t1146 * t1246;
t1250 = sin(qJ(5));
t1255 = cos(qJ(5));
t1441 = t1247 * t1252;
t1075 = t1193 * t1441 - t1194 * t1257 + t1252 * t1384;
t1251 = sin(qJ(4));
t1256 = cos(qJ(4));
t1464 = t1146 * t1243;
t1322 = t1074 * t1246 + t1464;
t956 = t1075 * t1256 + t1251 * t1322;
t892 = -t1017 * t1250 + t1255 * t956;
t1556 = t1249 * t892;
t1254 = cos(qJ(6));
t1555 = t1254 * t892;
t1519 = pkin(1) * t1248;
t1237 = t1258 * t1519;
t1225 = qJD(1) * t1237;
t1405 = pkin(11) * t1247 + pkin(10);
t1346 = t1245 * t1405;
t1318 = t1253 * t1346;
t1140 = -qJD(1) * t1318 + t1225;
t1518 = pkin(1) * t1253;
t1236 = t1248 * t1518;
t1270 = -t1258 * t1346 - t1236;
t1141 = t1270 * qJD(1);
t1516 = pkin(11) * t1244;
t1315 = pkin(2) * t1253 - t1258 * t1516;
t1290 = t1315 * t1245;
t1178 = qJD(1) * t1290;
t1440 = t1247 * t1257;
t1235 = pkin(2) * t1440;
t1449 = t1244 * t1252;
t1554 = -qJD(3) * t1235 + t1257 * t1140 + t1141 * t1441 + t1178 * t1449;
t1432 = t1253 * t1257;
t1433 = t1252 * t1258;
t1302 = t1247 * t1432 + t1433;
t1173 = t1302 * t1245;
t1165 = qJD(1) * t1173;
t1447 = t1245 * t1253;
t1386 = t1244 * t1447;
t1354 = t1243 * t1386;
t1277 = qJD(1) * t1354 - t1165 * t1246;
t1513 = pkin(12) * t1246;
t1347 = t1244 * (-pkin(11) - t1513);
t1317 = t1252 * t1347;
t1553 = -pkin(12) * t1277 + qJD(3) * t1317 - t1554;
t1234 = pkin(2) * t1441;
t1143 = (t1257 * t1347 - t1234) * qJD(3);
t1427 = t1257 * t1258;
t1435 = t1252 * t1253;
t1300 = -t1247 * t1435 + t1427;
t1174 = t1300 * t1245;
t1166 = qJD(1) * t1174;
t1448 = t1244 * t1257;
t1337 = -t1140 * t1252 + t1141 * t1440 + t1178 * t1448;
t1357 = qJD(1) * t1386;
t964 = pkin(3) * t1357 - t1166 * t1513 + t1337;
t1552 = t1143 - t964;
t1061 = -t1141 * t1244 + t1247 * t1178;
t1514 = pkin(12) * t1243;
t1003 = pkin(3) * t1165 - t1166 * t1514 + t1061;
t1177 = (pkin(3) * t1252 - t1257 * t1514) * t1244 * qJD(3);
t1551 = t1003 - t1177;
t1550 = t1017 * t1255 + t1250 * t956;
t1451 = t1243 * t1256;
t1387 = t1247 * t1451;
t1429 = t1256 * t1257;
t1439 = t1251 * t1252;
t1526 = t1246 * t1429 - t1439;
t1423 = -t1166 * t1256 - t1251 * t1277 + qJD(4) * t1387 + (t1526 * qJD(4) + (-t1246 * t1439 + t1429) * qJD(3)) * t1244;
t1434 = t1252 * t1256;
t1438 = t1251 * t1257;
t1304 = t1246 * t1438 + t1434;
t1323 = t1256 * t1354;
t1453 = t1243 * t1251;
t1389 = t1247 * t1453;
t1442 = t1246 * t1256;
t1422 = qJD(1) * t1323 - t1165 * t1442 - t1166 * t1251 + qJD(4) * t1389 + (t1304 * qJD(4) + (t1246 * t1434 + t1438) * qJD(3)) * t1244;
t1353 = t1246 * t1386;
t1087 = -qJD(1) * t1353 - t1165 * t1243;
t1396 = qJD(3) * t1449;
t1314 = t1243 * t1396 + t1087;
t1486 = -t1243 * t1552 - t1246 * t1551;
t1381 = t1245 * t1435;
t1351 = qJD(1) * t1381;
t1446 = t1245 * t1258;
t1382 = t1247 * t1446;
t1480 = qJD(1) * t1248;
t1228 = qJD(2) + t1480;
t1458 = t1228 * t1244;
t1098 = -t1351 + (qJD(1) * t1382 + t1458) * t1257;
t1301 = t1247 * t1433 + t1432;
t1282 = t1301 * t1245;
t1099 = qJD(1) * t1282 + t1228 * t1449;
t1443 = t1246 * t1251;
t1024 = t1098 * t1256 - t1099 * t1443;
t1393 = qJD(4) * t1451;
t1547 = -t1024 + t1393;
t1456 = t1243 * t1098;
t1025 = pkin(3) * t1099 - pkin(12) * t1456;
t1229 = pkin(12) * t1453;
t1529 = pkin(3) * t1442 - t1229;
t1094 = pkin(11) * t1458 + (t1405 * t1446 + t1236) * qJD(1);
t1096 = pkin(2) * t1228 + t1140;
t1312 = -pkin(2) * t1258 - t1253 * t1516 - pkin(1);
t1172 = t1312 * t1245;
t1159 = qJD(1) * t1172;
t981 = -t1252 * t1094 + t1096 * t1440 + t1159 * t1448;
t934 = -t1099 * t1513 + t981;
t1444 = t1246 * t1098;
t982 = t1252 * (t1096 * t1247 + t1159 * t1244) + t1257 * t1094;
t935 = -pkin(12) * t1444 - t982;
t1546 = t1529 * qJD(4) - t1025 * t1453 - t1256 * t934 - t935 * t1443;
t1419 = pkin(11) * t1448 + t1234;
t1121 = (t1243 * t1247 + t1246 * t1448) * pkin(12) + t1419;
t1108 = t1251 * t1121;
t1138 = pkin(3) * t1247 + t1235 + t1317;
t1171 = (-pkin(3) * t1257 - t1252 * t1514 - pkin(2)) * t1244;
t1391 = qJD(4) * t1442;
t1545 = -qJD(4) * t1108 + t1138 * t1391 + t1171 * t1393 + t1256 * t1553 + t1552 * t1443 - t1551 * t1453;
t1544 = -pkin(13) * t1314 - t1545;
t1541 = -pkin(4) * t1422 + pkin(13) * t1423 - t1486;
t1430 = t1256 * t1099;
t1023 = t1098 * t1251 + t1246 * t1430;
t889 = t1246 * t1025 - t1243 * t935;
t1540 = pkin(4) * t1023 - pkin(13) * t1024 - (pkin(4) * t1251 - pkin(13) * t1256) * t1243 * qJD(4) + t889;
t1467 = t1099 * t1243;
t1539 = -pkin(13) * t1467 + t1546;
t1416 = qJDD(1) * t1248;
t1227 = qJDD(2) + t1416;
t1262 = qJD(2) * t1302 + qJD(3) * t1301;
t1379 = t1247 * t1427;
t1303 = t1379 - t1435;
t1009 = -t1245 * (-qJD(1) * t1262 + t1303 * qJDD(1)) + (qJD(3) * t1228 * t1252 - t1227 * t1257) * t1244;
t1131 = t1244 * t1304 + t1389;
t1188 = t1243 * t1448 - t1246 * t1247;
t1066 = t1131 * t1250 + t1255 * t1188;
t1500 = -qJD(5) * t1066 + t1250 * t1314 + t1255 * t1423;
t1067 = t1131 * t1255 - t1188 * t1250;
t1499 = qJD(5) * t1067 + t1250 * t1423 - t1255 * t1314;
t1385 = t1244 * t1446;
t1360 = -qJD(1) * t1385 + t1228 * t1247;
t1341 = qJD(3) + t1360;
t1310 = t1243 * t1341;
t1532 = t1098 * t1442 - t1099 * t1251 + t1256 * t1310;
t993 = qJD(5) - t1532;
t1269 = t1310 + t1444;
t1001 = t1251 * t1269 + t1430;
t1044 = -t1246 * t1341 - qJD(4) + t1456;
t917 = t1001 * t1250 + t1255 * t1044;
t916 = qJD(6) + t917;
t1191 = -t1255 * t1246 + t1250 * t1453;
t1454 = t1243 * t1250;
t1485 = -qJD(5) * t1191 - t1099 * t1454 + t1255 * t1547;
t1452 = t1243 * t1255;
t1192 = t1246 * t1250 + t1251 * t1452;
t1484 = qJD(5) * t1192 + t1099 * t1452 + t1250 * t1547;
t1420 = pkin(3) * t1443 + pkin(12) * t1451;
t1538 = t1420 * qJD(4) - t1251 * t934;
t1377 = t1256 * t1121 + t1138 * t1443 + t1171 * t1453;
t1537 = qJD(4) * t1377 + t1251 * t1553;
t1536 = t1075 * t1251;
t1394 = qJD(4) * t1453;
t1534 = t1023 - t1394;
t1418 = pkin(10) * t1446 + t1236;
t1122 = (t1244 * t1248 + t1382) * pkin(11) + t1418;
t1139 = pkin(2) * t1248 + t1237 - t1318;
t1338 = -t1252 * t1122 + t1139 * t1440 + t1172 * t1448;
t1240 = t1245 ^ 2;
t1521 = 0.2e1 * t1240;
t1501 = -t1143 * t1442 + (-pkin(4) * t1396 - t1177 * t1256) * t1243 - pkin(4) * t1087 - (-t1003 * t1243 - t1246 * t964) * t1256 + t1537;
t1483 = pkin(4) * t1467 - (-t1025 * t1243 - t1246 * t935) * t1256 + t1538;
t1363 = qJD(1) * (qJD(2) - t1228);
t1183 = pkin(13) * t1246 + t1420;
t1184 = (-pkin(4) * t1256 - pkin(13) * t1251 - pkin(3)) * t1243;
t1421 = t1255 * t1183 + t1250 * t1184;
t1471 = qJD(5) * t1255;
t1473 = qJD(5) * t1250;
t1051 = -t1138 * t1243 + t1246 * t1171;
t1128 = -t1244 * t1526 - t1387;
t977 = pkin(4) * t1128 - pkin(13) * t1131 + t1051;
t986 = -pkin(13) * t1188 + t1377;
t1528 = t1541 * t1250 + t1255 * t1544 - t977 * t1471 + t1473 * t986;
t1461 = t1184 * t1255;
t1527 = -qJD(5) * t1461 + t1250 * t1540 - t1255 * t1539;
t1150 = t1192 * t1254 - t1249 * t1451;
t1477 = qJD(4) * t1251;
t1414 = qJDD(1) * t1258;
t1370 = t1245 * t1414;
t1336 = t1227 * t1247 - t1244 * t1370 + qJDD(3);
t1356 = qJD(2) * t1386;
t1266 = qJD(1) * t1356 + t1336;
t1263 = t1266 * t1243;
t1412 = pkin(10) * t1447;
t1359 = qJD(2) * t1412;
t1373 = pkin(10) * t1370 + qJD(2) * t1225 + qJDD(1) * t1236;
t1275 = -qJD(1) * t1359 + t1373;
t1479 = qJD(2) * t1253;
t1399 = qJD(1) * t1479;
t1036 = (t1227 * t1244 + (-t1399 + t1414) * t1247 * t1245) * pkin(11) + t1275;
t1407 = pkin(1) * t1414;
t1223 = t1248 * t1407;
t1478 = qJD(2) * t1258;
t1398 = qJD(1) * t1478;
t1415 = qJDD(1) * t1253;
t1296 = -t1398 - t1415;
t1041 = pkin(2) * t1227 + t1296 * t1346 - t1399 * t1519 + t1223;
t1481 = qJD(1) * qJD(2);
t1078 = (qJDD(1) * t1312 + t1315 * t1481) * t1245;
t1273 = -qJD(3) * t981 - t1257 * t1036 - t1041 * t1441 - t1078 * t1449;
t838 = (-t1009 * t1246 + t1263) * pkin(12) - t1273;
t1352 = t1245 * t1379;
t1371 = t1245 * t1415;
t1395 = qJD(3) * t1448;
t1008 = t1228 * t1395 + qJD(3) * qJD(1) * t1352 + t1227 * t1449 + t1370 * t1441 + (-qJD(2) * t1247 - qJD(3)) * t1351 + (t1245 * t1398 + t1371) * t1257;
t1339 = -t1252 * t1036 + t1041 * t1440 + t1078 * t1448;
t872 = -qJD(3) * t982 + t1339;
t840 = pkin(3) * t1266 - t1008 * t1513 + t872;
t973 = -t1041 * t1244 + t1247 * t1078;
t870 = pkin(3) * t1009 - t1008 * t1514 + t973;
t922 = pkin(12) * t1269 + t982;
t923 = pkin(3) * t1341 + t934;
t1040 = -t1096 * t1244 + t1247 * t1159;
t952 = -pkin(3) * t1098 - pkin(12) * t1467 + t1040;
t786 = t1256 * t838 + t923 * t1391 + t952 * t1393 + t840 * t1443 + t870 * t1453 - t1477 * t922;
t959 = -t1009 * t1243 - t1246 * t1266 - qJDD(4);
t784 = -pkin(13) * t959 + t786;
t813 = -t1243 * t840 + t1246 * t870;
t864 = qJD(4) * t1532 + t1256 * t1008 - t1009 * t1443 + t1251 * t1263;
t865 = qJD(4) * t1001 + t1251 * t1008 + t1009 * t1442 - t1256 * t1263;
t790 = pkin(4) * t865 - pkin(13) * t864 + t813;
t830 = t1256 * t922 + t923 * t1443 + t952 * t1453;
t825 = -pkin(13) * t1044 + t830;
t868 = -t1243 * t923 + t1246 * t952;
t827 = -pkin(4) * t1532 - pkin(13) * t1001 + t868;
t799 = t1250 * t827 + t1255 * t825;
t775 = -qJD(5) * t799 - t1250 * t784 + t1255 * t790;
t829 = -t1251 * t922 + t1256 * (t1243 * t952 + t1246 * t923);
t1196 = -t1248 * t1403 + t1426;
t1195 = -t1248 * t1402 - t1425;
t1404 = t1245 * t1520;
t1288 = t1195 * t1247 + t1244 * t1404;
t1076 = -t1196 * t1252 + t1257 * t1288;
t1289 = -t1195 * t1244 + t1247 * t1404;
t1019 = -t1076 * t1243 + t1246 * t1289;
t1077 = t1196 * t1257 + t1252 * t1288;
t1274 = t1289 * t1243;
t958 = t1077 * t1256 + (t1076 * t1246 + t1274) * t1251;
t893 = t1019 * t1255 - t1250 * t958;
t1383 = t1248 * t1449;
t1130 = t1282 + t1383;
t1378 = t1248 * t1448;
t1129 = -t1352 - t1378 + t1381;
t1305 = -t1247 * t1248 + t1385;
t1283 = t1305 * t1243;
t1265 = -t1129 * t1246 - t1283;
t1014 = t1130 * t1256 + t1251 * t1265;
t1065 = -t1129 * t1243 + t1246 * t1305;
t947 = t1014 * t1250 + t1065 * t1255;
t1299 = g(1) * t893 + g(2) * t1550 - g(3) * t947;
t863 = qJDD(5) + t865;
t773 = -pkin(5) * t863 - t775;
t919 = t1001 * t1255 - t1044 * t1250;
t1524 = (pkin(5) * t919 + pkin(14) * t916) * t916 + t1299 + t773;
t1215 = -pkin(5) * t1255 - pkin(14) * t1250 - pkin(4);
t1366 = t1250 * t864 + t1255 * t959;
t820 = qJD(5) * t919 + t1366;
t818 = qJDD(6) + t820;
t1523 = (-t830 + t993 * (pkin(5) * t1250 - pkin(14) * t1255)) * t916 + t1215 * t818;
t1110 = t1257 * t1122;
t1376 = t1139 * t1441 + t1172 * t1449 + t1110;
t946 = pkin(12) * t1265 + t1376;
t951 = -pkin(3) * t1305 - t1130 * t1513 + t1338;
t1052 = -t1139 * t1244 + t1247 * t1172;
t976 = pkin(3) * t1129 - t1130 * t1514 + t1052;
t1409 = t1256 * t946 + t951 * t1443 + t976 * t1453;
t833 = -pkin(13) * t1065 + t1409;
t1465 = t1130 * t1251;
t1013 = t1129 * t1442 + t1256 * t1283 + t1465;
t878 = -t1243 * t951 + t1246 * t976;
t844 = pkin(4) * t1013 - pkin(13) * t1014 + t878;
t1327 = t1250 * t844 + t1255 * t833;
t1056 = qJD(3) * t1383 + t1245 * t1262;
t1032 = -qJD(2) * t1353 - t1056 * t1243;
t1226 = qJD(2) * t1237;
t1144 = -qJD(2) * t1318 + t1226;
t1145 = t1270 * qJD(2);
t1179 = qJD(2) * t1290;
t1272 = qJD(3) * t1338 + t1257 * t1144 + t1145 * t1441 + t1179 * t1449;
t1276 = qJD(2) * t1354 - t1056 * t1246;
t884 = pkin(12) * t1276 + t1272;
t1057 = qJD(3) * t1378 + (qJD(2) * t1300 + qJD(3) * t1303) * t1245;
t1261 = -t1144 * t1252 + t1145 * t1440 + t1179 * t1448 + (-t1110 + (-t1139 * t1247 - t1172 * t1244) * t1252) * qJD(3);
t885 = pkin(3) * t1356 - t1057 * t1513 + t1261;
t1062 = -t1145 * t1244 + t1247 * t1179;
t927 = pkin(3) * t1056 - t1057 * t1514 + t1062;
t1280 = t1256 * t884 + t951 * t1391 + t976 * t1393 + t885 * t1443 + t927 * t1453 - t1477 * t946;
t796 = -pkin(13) * t1032 + t1280;
t849 = -t1243 * t885 + t1246 * t927;
t896 = -qJD(2) * t1323 + qJD(4) * t1014 + t1056 * t1442 + t1057 * t1251;
t897 = t1057 * t1256 + t1276 * t1251 + (t1256 * t1265 - t1465) * qJD(4);
t808 = pkin(4) * t896 - pkin(13) * t897 + t849;
t1522 = -qJD(5) * t1327 - t1250 * t796 + t1255 * t808;
t1517 = pkin(2) * t1244;
t1512 = pkin(13) * qJD(5);
t1491 = t1249 * t919;
t873 = -t1254 * t993 + t1491;
t1511 = t873 * t916;
t875 = t1249 * t993 + t1254 * t919;
t1510 = t875 * t916;
t1509 = t917 * t993;
t1508 = t919 * t993;
t1498 = t1250 * t977 + t1255 * t986;
t1507 = -t1422 * pkin(5) + qJD(5) * t1498 - t1250 * t1544 + t1541 * t1255;
t901 = pkin(4) * t1001 - pkin(13) * t1532;
t1506 = t1250 * t901 + t1255 * t829;
t1015 = t1067 * t1249 - t1254 * t1128;
t1503 = -qJD(6) * t1015 + t1249 * t1422 + t1254 * t1500;
t1016 = t1067 * t1254 + t1128 * t1249;
t1502 = qJD(6) * t1016 + t1249 * t1500 - t1254 * t1422;
t1497 = MDP(6) * t1245;
t1496 = MDP(7) * t1245;
t1494 = t1227 * MDP(8);
t1469 = qJD(6) * t1254;
t819 = -qJD(5) * t917 - t1250 * t959 + t1255 * t864;
t1410 = t1249 * t863 + t1254 * t819 + t993 * t1469;
t1470 = qJD(6) * t1249;
t791 = -t1470 * t919 + t1410;
t1493 = t1249 * t791;
t1492 = t1249 * t818;
t1490 = t1254 * t818;
t1489 = pkin(5) * t1534 + qJD(5) * t1421 + t1250 * t1539 + t1540 * t1255;
t1149 = t1192 * t1249 + t1254 * t1451;
t1488 = -qJD(6) * t1149 - t1249 * t1534 + t1254 * t1485;
t1487 = qJD(6) * t1150 + t1249 * t1485 + t1254 * t1534;
t1476 = qJD(4) * t1256;
t1475 = qJD(5) * t1183;
t1474 = qJD(5) * t1249;
t1472 = qJD(5) * t1254;
t1462 = t1183 * t1250;
t1260 = qJD(1) ^ 2;
t1457 = t1240 * t1260;
t1455 = t1243 * t1244;
t1450 = t1244 * t1246;
t1431 = t1254 * t1255;
t1241 = t1253 ^ 2;
t1417 = -t1258 ^ 2 + t1241;
t1411 = t1240 * t1518;
t1401 = t916 * t1474;
t1400 = t916 * t1472;
t1397 = qJD(1) * t1447;
t1392 = qJD(4) * t1443;
t1390 = t1258 * t1457;
t774 = t1250 * t790 + t1255 * t784 + t827 * t1471 - t1473 * t825;
t772 = pkin(14) * t863 + t774;
t1316 = t1251 * t838 + t923 * t1392 + t952 * t1394 - t840 * t1442 - t870 * t1451 + t922 * t1476;
t785 = pkin(4) * t959 + t1316;
t777 = pkin(5) * t820 - pkin(14) * t819 + t785;
t1369 = -t1249 * t772 + t1254 * t777;
t1368 = t1249 * t819 - t1254 * t863;
t1365 = t1254 * t916;
t1364 = t1255 * t993;
t1362 = -t1251 * t884 - t951 * t1392 - t976 * t1394 - t946 * t1476;
t1361 = t1228 + t1480;
t1358 = t1227 + t1416;
t1320 = t1138 * t1246 + t1171 * t1243;
t985 = pkin(4) * t1188 - t1256 * t1320 + t1108;
t902 = pkin(5) * t1066 - pkin(14) * t1067 + t985;
t1349 = -pkin(14) * t1422 - qJD(6) * t902 + t1528;
t880 = pkin(14) * t1128 + t1498;
t1348 = -pkin(5) * t1499 + pkin(14) * t1500 + qJD(6) * t880 - t1501;
t1182 = t1229 + (-pkin(3) * t1256 - pkin(4)) * t1246;
t1068 = pkin(5) * t1191 - pkin(14) * t1192 + t1182;
t1344 = pkin(14) * t1534 + qJD(5) * t1462 - qJD(6) * t1068 + t1527;
t1071 = -pkin(14) * t1451 + t1421;
t1343 = -pkin(5) * t1484 + pkin(14) * t1485 + qJD(6) * t1071 - t1483;
t1342 = -t1166 + t1395;
t1335 = t1243 * t927 + t1246 * t885;
t1333 = t1243 * t976 + t1246 * t951;
t1332 = t1249 * t777 + t1254 * t772;
t794 = pkin(14) * t993 + t799;
t824 = pkin(4) * t1044 - t829;
t802 = pkin(5) * t917 - pkin(14) * t919 + t824;
t781 = t1249 * t802 + t1254 * t794;
t1331 = t1249 * t794 - t1254 * t802;
t801 = pkin(14) * t1013 + t1327;
t942 = t1251 * t946;
t832 = pkin(4) * t1065 - t1256 * t1333 + t942;
t948 = t1014 * t1255 - t1065 * t1250;
t814 = pkin(5) * t947 - pkin(14) * t948 + t832;
t1330 = t1249 * t814 + t1254 * t801;
t1329 = -t1249 * t801 + t1254 * t814;
t798 = -t1250 * t825 + t1255 * t827;
t1326 = -t1250 * t833 + t1255 * t844;
t1325 = -t1250 * t986 + t1255 * t977;
t1324 = t1013 * t1254 - t1249 * t948;
t887 = t1013 * t1249 + t1254 * t948;
t1319 = t1461 - t1462;
t1313 = -pkin(13) * t863 + t824 * t993;
t1311 = qJD(3) * t1341;
t1089 = t1193 * t1252 - t1194 * t1440;
t1308 = t1089 * t1246 + t1194 * t1455;
t1091 = -t1195 * t1252 - t1196 * t1440;
t1307 = t1091 * t1246 + t1196 * t1455;
t1298 = t1250 * t808 + t1255 * t796 + t844 * t1471 - t1473 * t833;
t953 = t1074 * t1442 + t1256 * t1464 - t1536;
t957 = -t1076 * t1442 + t1077 * t1251 - t1256 * t1274;
t1295 = g(1) * t957 + g(2) * t953 + g(3) * t1013;
t1294 = -g(1) * t958 + g(2) * t956 - g(3) * t1014;
t1043 = -t1129 * t1256 - t1130 * t1443;
t995 = -t1074 * t1256 + t1075 * t1443;
t997 = t1076 * t1256 - t1077 * t1443;
t1293 = -g(1) * t997 - g(2) * t995 - g(3) * t1043;
t1291 = g(1) * t1077 - g(2) * t1075 + g(3) * t1130;
t1286 = -t1173 * t1246 + t1354;
t1285 = t1295 - t785;
t1281 = t1418 * t1228;
t1279 = t1341 * t1386;
t793 = -pkin(5) * t993 - t798;
t1278 = -pkin(14) * t818 + (t793 + t798) * t916;
t1268 = pkin(13) * qJD(6) * t916 - t1295;
t1264 = (pkin(14) * t1001 - qJD(6) * t1215 + t1506) * t916 + t1294;
t797 = pkin(4) * t1032 - t1256 * t1335 - t1362;
t1097 = t1173 * t1243 + t1353;
t1092 = t1195 * t1257 - t1196 * t1441;
t1090 = -t1193 * t1257 - t1194 * t1441;
t1070 = pkin(5) * t1451 - t1319;
t1048 = -t1091 * t1243 + t1196 * t1450;
t1047 = -t1089 * t1243 + t1194 * t1450;
t1046 = t1174 * t1256 + t1251 * t1286;
t1045 = t1174 * t1251 - t1256 * t1286;
t1042 = -t1129 * t1251 + t1130 * t1442;
t1004 = t1043 * t1255 + t1130 * t1454;
t1002 = t1046 * t1255 + t1097 * t1250;
t996 = t1076 * t1251 + t1077 * t1442;
t994 = -t1074 * t1251 - t1075 * t1442;
t992 = t1092 * t1256 + t1251 * t1307;
t991 = t1092 * t1251 - t1256 * t1307;
t990 = t1090 * t1256 + t1251 * t1308;
t989 = t1090 * t1251 - t1256 * t1308;
t955 = -t1256 * t1322 + t1536;
t929 = t1077 * t1454 + t1255 * t997;
t928 = -t1075 * t1454 + t1255 * t995;
t921 = t1048 * t1250 + t1255 * t992;
t920 = t1047 * t1250 + t1255 * t990;
t899 = t1001 * t1249 + t1431 * t1532;
t898 = t1249 * t1255 * t1532 - t1254 * t1001;
t894 = t1019 * t1250 + t1255 * t958;
t879 = -pkin(5) * t1128 - t1325;
t858 = t1249 * t957 + t1254 * t894;
t857 = -t1249 * t894 + t1254 * t957;
t843 = -qJD(5) * t947 - t1032 * t1250 + t1255 * t897;
t842 = qJD(5) * t948 + t1032 * t1255 + t1250 * t897;
t811 = -pkin(5) * t1001 + t1250 * t829 - t1255 * t901;
t804 = qJD(6) * t1324 + t1249 * t896 + t1254 * t843;
t803 = qJD(6) * t887 + t1249 * t843 - t896 * t1254;
t800 = -pkin(5) * t1013 - t1326;
t792 = qJD(6) * t875 + t1368;
t782 = pkin(5) * t842 - pkin(14) * t843 + t797;
t779 = -pkin(5) * t896 - t1522;
t778 = pkin(14) * t896 + t1298;
t771 = -qJD(6) * t781 + t1369;
t770 = -t1331 * qJD(6) + t1332;
t1 = [(t1258 * t1358 - t1361 * t1479) * t1496 + (t1253 * t1358 + t1361 * t1478) * t1497 + (-g(1) * t892 - g(2) * t894 + t775 * t1013 + t1326 * t863 + t1522 * t993 + t785 * t947 + t797 * t917 + t798 * t896 + t832 * t820 + t824 * t842) * MDP(30) + (-g(1) * t1074 - g(2) * t1076 + t1052 * t1008 + t1040 * t1057 + t1062 * t1099 + t973 * t1130 - t1266 * t1376 - t1272 * t1341 - t1273 * t1305 - t1356 * t982) * MDP(17) + (t1324 * t818 - t792 * t947 - t803 * t916 - t842 * t873) * MDP(35) + (t1324 * t791 - t792 * t887 - t803 * t875 - t804 * t873) * MDP(33) + ((t1237 - t1412) * t1227 + (-pkin(10) * t1371 + t1223) * t1248 + t1407 * t1521 + g(1) * t1194 - g(2) * t1196 + (-t1281 + (-t1248 * t1418 - 0.2e1 * t1411) * qJD(1)) * qJD(2)) * MDP(9) + (-t1008 * t1305 + t1057 * t1341 + t1099 * t1356 + t1130 * t1266) * MDP(13) + (t1009 * t1305 - t1056 * t1341 + t1098 * t1356 - t1129 * t1266) * MDP(14) + (-g(1) * t1075 - g(2) * t1077 + t1052 * t1009 + t1040 * t1056 - t1062 * t1098 + t973 * t1129 + t1261 * t1341 + t1266 * t1338 - t1305 * t872 + t1356 * t981) * MDP(16) + (g(1) * t955 + g(2) * t957 + t849 * t1001 + t813 * t1014 + t830 * t1032 + t1044 * t1280 + t786 * t1065 + t1409 * t959 + t878 * t864 + t868 * t897) * MDP(24) + t1248 * t1494 + (-(t1226 - t1359) * t1228 - t1418 * t1227 - t1275 * t1248 - g(1) * t1193 - g(2) * t1195 + t1296 * pkin(1) * t1521) * MDP(10) + (qJD(2) * t1279 - t1266 * t1305) * MDP(15) + (t1253 * t1414 - t1417 * t1481) * MDP(5) * t1521 + (-t849 * t1532 + t878 * t865 + t813 * t1013 + t868 * t896 - t1362 * t1044 + t942 * t959 + t1316 * t1065 - t829 * t1032 - g(1) * t956 - g(2) * t958 + (-t1044 * t1335 - t1333 * t959) * t1256) * MDP(23) + (t1013 * t959 - t1032 * t1532 + t1044 * t896 + t1065 * t865) * MDP(21) + (-t1001 * t896 - t1013 * t864 - t1014 * t865 + t1532 * t897) * MDP(19) + (t791 * t947 + t804 * t916 + t818 * t887 + t842 * t875) * MDP(34) + (t818 * t947 + t842 * t916) * MDP(36) + (-t819 * t947 - t820 * t948 - t842 * t919 - t843 * t917) * MDP(26) + (t819 * t948 + t843 * t919) * MDP(25) + (-t1008 * t1129 - t1009 * t1130 - t1056 * t1099 + t1057 * t1098) * MDP(12) + (t1008 * t1130 + t1057 * t1099) * MDP(11) + (t791 * t887 + t804 * t875) * MDP(32) + (-(qJD(6) * t1329 + t1249 * t782 + t1254 * t778) * t916 - t1330 * t818 - t770 * t947 - t781 * t842 + t779 * t875 + t800 * t791 + t773 * t887 + t793 * t804 - g(1) * (t1254 * t955 - t1556) - g(2) * t857) * MDP(38) + (t1032 * t1044 + t1065 * t959) * MDP(22) + (-t1001 * t1032 - t1014 * t959 - t1044 * t897 - t1065 * t864) * MDP(20) + (g(1) * t1520 - g(2) * t1259) * MDP(2) + (g(1) * t1259 + g(2) * t1520) * MDP(3) + (-t1013 * t820 - t842 * t993 - t863 * t947 - t896 * t917) * MDP(28) + (t1013 * t819 + t843 * t993 + t863 * t948 + t896 * t919) * MDP(27) + (t1013 * t863 + t896 * t993) * MDP(29) + (t1001 * t897 + t1014 * t864) * MDP(18) + ((-qJD(6) * t1330 - t1249 * t778 + t1254 * t782) * t916 + t1329 * t818 + t771 * t947 - t1331 * t842 + t779 * t873 + t800 * t792 - t773 * t1324 + t793 * t803 - g(1) * (t1249 * t955 + t1555) - g(2) * t858) * MDP(37) + qJDD(1) * MDP(1) + (qJDD(1) * t1241 + 0.2e1 * t1253 * t1398) * t1240 * MDP(4) + (g(1) * t1550 - g(2) * t893 - t774 * t1013 - t1298 * t993 - t1327 * t863 + t785 * t948 + t797 * t919 - t799 * t896 + t832 * t819 + t824 * t843) * MDP(31); (t1258 * t1363 + t1415) * t1497 + (-t1044 * t1314 + t1188 * t959) * MDP(22) + (pkin(1) * t1390 + g(1) * t1196 + g(2) * t1194 + t1225 * t1228 + (pkin(10) * t1363 + g(3)) * t1447 - t1373) * MDP(10) + ((-t1249 * t880 + t1254 * t902) * t818 + t771 * t1066 + t879 * t792 + t773 * t1015 - g(1) * (t1249 * t991 + t1254 * t921) - g(2) * (t1249 * t989 + t1254 * t920) - g(3) * (t1002 * t1254 + t1045 * t1249) + (t1249 * t1349 - t1254 * t1348) * t916 + t1507 * t873 + t1502 * t793 - t1499 * t1331) * MDP(37) + (t1260 * t1411 - g(1) * t1195 + g(2) * t1193 + t1223 + (-pkin(10) * t1415 - g(3) * t1258) * t1245 + (-qJD(2) * t1418 + t1281) * qJD(1)) * MDP(9) + t1494 + (t1325 * t863 + t775 * t1128 + t985 * t820 + t785 * t1066 - g(1) * t921 - g(2) * t920 - g(3) * t1002 + ((-qJD(5) * t986 - t1541) * t1255 + (-qJD(5) * t977 + t1544) * t1250) * t993 + t1501 * t917 + t1499 * t824 + t1422 * t798) * MDP(30) + (-t1253 * t1363 + t1414) * t1496 + (-qJD(1) * t1279 + t1247 * t1266) * MDP(15) + (t1066 * t818 + t1499 * t916) * MDP(36) + (-t1066 * t863 - t1128 * t820 - t1422 * t917 - t1499 * t993) * MDP(28) + (t1067 * t819 + t1500 * t919) * MDP(25) + (t1067 * t863 + t1128 * t819 + t1422 * t919 + t1500 * t993) * MDP(27) + (-t1066 * t819 - t1067 * t820 - t1499 * t919 - t1500 * t917) * MDP(26) + (-t1015 * t818 - t1066 * t792 - t1499 * t873 - t1502 * t916) * MDP(35) + (t1016 * t791 + t1503 * t875) * MDP(32) + (t1016 * t818 + t1066 * t791 + t1499 * t875 + t1503 * t916) * MDP(34) + (-t1015 * t791 - t1016 * t792 - t1502 * t875 - t1503 * t873) * MDP(33) + (t1128 * t863 + t1422 * t993) * MDP(29) + (t1001 * t1423 + t1131 * t864) * MDP(18) + (t1001 * t1314 - t1044 * t1423 - t1131 * t959 - t1188 * t864) * MDP(20) + (-t1419 * t1311 + (-pkin(11) * t1449 + t1235) * t1266 + t872 * t1247 - t1009 * t1517 - t973 * t1448 - t1337 * t1341 - t981 * t1357 + t1061 * t1098 - g(1) * t1092 - g(2) * t1090 - g(3) * t1174 + (-t1165 + t1396) * t1040) * MDP(16) + (-(t1249 * t902 + t1254 * t880) * t818 - t770 * t1066 + t879 * t791 + t773 * t1016 - g(1) * (-t1249 * t921 + t1254 * t991) - g(2) * (-t1249 * t920 + t1254 * t989) - g(3) * (-t1002 * t1249 + t1045 * t1254) + (t1249 * t1348 + t1254 * t1349) * t916 + t1507 * t875 + t1503 * t793 - t1499 * t781) * MDP(38) + (-t1247 * t1009 + t1341 * t1165 + (t1336 * t1257 - t1252 * t1311 + (qJD(2) * t1448 - t1098) * t1397) * t1244) * MDP(14) + (t1008 * t1449 + t1099 * t1342) * MDP(11) + (t1247 * t1008 - t1341 * t1166 + (t1336 * t1252 + t1257 * t1311 + (qJD(2) * t1449 - t1099) * t1397) * t1244) * MDP(13) + (-t1098 * t1166 + t1099 * t1165 + (t1008 * t1257 - t1009 * t1252 + (t1098 * t1257 - t1099 * t1252) * qJD(3)) * t1244) * MDP(12) + (t1044 * t1422 + t1128 * t959 + t1188 * t865 + t1314 * t1532) * MDP(21) + (-t1001 * t1422 - t1128 * t864 - t1131 * t865 + t1423 * t1532) * MDP(19) + t1417 * MDP(5) * t1457 + (-g(1) * t1091 - g(2) * t1089 + g(3) * t1173 - t1008 * t1517 + t1342 * t1040 - t1061 * t1099 + t1273 * t1247 - t1419 * t1266 + t982 * t1357 + t973 * t1449 + (pkin(11) * t1396 + t1554) * t1341) * MDP(17) + (g(1) * t991 + g(2) * t989 + g(3) * t1045 + t1486 * t1001 + t1044 * t1545 + t1051 * t864 + t813 * t1131 + t786 * t1188 - t1314 * t830 + t1377 * t959 + t1423 * t868) * MDP(24) + (-t1498 * t863 - t774 * t1128 + t985 * t819 + t785 * t1067 - g(1) * (t1048 * t1255 - t1250 * t992) - g(2) * (t1047 * t1255 - t1250 * t990) - g(3) * (-t1046 * t1250 + t1097 * t1255) + t1528 * t993 + t1501 * t919 + t1500 * t824 - t1422 * t799) * MDP(31) - t1253 * MDP(4) * t1390 + (-g(1) * t992 - g(2) * t990 - g(3) * t1046 + t1051 * t865 + t1108 * t959 + t813 * t1128 + t1316 * t1188 - t1486 * t1532 + t1422 * t868 + t1314 * t829 + t1537 * t1044 + (-t1320 * t959 + (t1243 * t1551 - t1246 * t1552) * t1044) * t1256) * MDP(23); (t1023 * t917 - t1191 * t863 - t1484 * t993 + (t1256 * t820 - t1477 * t917) * t1243) * MDP(28) + (t1192 * t819 + t1485 * t919) * MDP(25) + (-t1023 * t919 + t1192 * t863 + t1485 * t993 + (-t1256 * t819 + t1477 * t919) * t1243) * MDP(27) + (-t1191 * t819 - t1192 * t820 - t1484 * t919 - t1485 * t917) * MDP(26) + (-t1149 * t818 - t1191 * t792 - t1484 * t873 - t1487 * t916) * MDP(35) + (t1150 * t818 + t1191 * t791 + t1484 * t875 + t1488 * t916) * MDP(34) + (t1150 * t791 + t1488 * t875) * MDP(32) + (-t1149 * t791 - t1150 * t792 - t1487 * t875 - t1488 * t873) * MDP(33) + (-(t1068 * t1249 + t1071 * t1254) * t818 - t770 * t1191 + t1070 * t791 + t773 * t1150 - g(1) * (-t1249 * t929 + t1254 * t996) - g(2) * (-t1249 * t928 + t1254 * t994) - g(3) * (-t1004 * t1249 + t1042 * t1254) + (t1249 * t1343 + t1254 * t1344) * t916 + t1489 * t875 + t1488 * t793 - t1484 * t781) * MDP(38) + ((t1068 * t1254 - t1071 * t1249) * t818 + t771 * t1191 + t1070 * t792 + t773 * t1149 - g(1) * (t1249 * t996 + t1254 * t929) - g(2) * (t1249 * t994 + t1254 * t928) - g(3) * (t1004 * t1254 + t1042 * t1249) + (t1249 * t1344 - t1254 * t1343) * t916 + t1489 * t873 + t1487 * t793 - t1484 * t1331) * MDP(37) + (t1191 * t818 + t1484 * t916) * MDP(36) + t1266 * MDP(15) + (t1044 * t1467 - t1246 * t959) * MDP(22) + (t1024 * t1044 + t1246 * t864 + (-t1001 * t1099 - t1044 * t1476 - t1251 * t959) * t1243) * MDP(20) + (-t1098 * t1341 + t1008) * MDP(13) + (-t1040 * t1098 + t1341 * t981 + t1273 + t1291) * MDP(17) + (-g(1) * t1076 + g(2) * t1074 + g(3) * t1129 - t1040 * t1099 + t982 * t1360 + t1339) * MDP(16) + (-t1023 * t993 + (-t1256 * t863 + t1477 * t993) * t1243) * MDP(29) - t1098 * t1099 * MDP(11) + (t1001 * t1547 + t864 * t1453) * MDP(18) + (t1001 * t1023 - t1024 * t1532 + (-t1251 * t865 + t1256 * t864 + (-t1001 * t1251 + t1256 * t1532) * qJD(4)) * t1243) * MDP(19) + (-t1023 * t1044 - t1246 * t865 + (t1044 * t1477 - t1099 * t1532 - t1256 * t959) * t1243) * MDP(21) + (-t1529 * t959 - t1316 * t1246 + t889 * t1532 - t868 * t1023 + (t1442 * t935 + t1538) * t1044 + (t868 * t1477 - pkin(3) * t865 - t829 * t1099 + (t1025 * t1044 - t813) * t1256) * t1243 + t1293) * MDP(23) + (t1319 * t863 + t1182 * t820 + t785 * t1191 - t798 * t1023 - g(1) * t929 - g(2) * t928 - g(3) * t1004 + ((-t1475 - t1540) * t1255 + (-qJD(5) * t1184 - t1539) * t1250) * t993 + t1483 * t917 + t1484 * t824 + (-t1256 * t775 + t1477 * t798) * t1243) * MDP(30) + (-t1098 ^ 2 + t1099 ^ 2) * MDP(12) + (t1341 * t1099 - t1009) * MDP(14) + (t1420 * t959 - t786 * t1246 - t889 * t1001 - t868 * t1024 + g(1) * t996 + g(2) * t994 + g(3) * t1042 + t1546 * t1044 + (-pkin(3) * t864 + t1099 * t830 + t1251 * t813 + t1476 * t868) * t1243) * MDP(24) + (-t1421 * t863 + t1182 * t819 + t785 * t1192 + t799 * t1023 + t1527 * t993 + t1483 * t919 + t1485 * t824 + (t1475 * t993 - t1293) * t1250 + (-t1255 * t1291 + t774 * t1256 - t1477 * t799) * t1243) * MDP(31); -t1532 ^ 2 * MDP(19) + (t1044 * t1532 + t864) * MDP(20) - t865 * MDP(21) - t959 * MDP(22) + (-t1044 * t830 + t1295 - t1316) * MDP(23) + (-t1044 * t829 - t1532 * t868 - t1294 - t786) * MDP(24) + (t1250 * t819 + t1364 * t919) * MDP(25) + ((t819 - t1509) * t1255 + (-t820 - t1508) * t1250) * MDP(26) + (t1250 * t863 + t1364 * t993) * MDP(27) + (-t1250 * t993 ^ 2 + t1255 * t863) * MDP(28) + (-pkin(4) * t820 - t830 * t917 + (t829 * t993 + t1313) * t1250 + ((-t901 - t1512) * t993 + t1285) * t1255) * MDP(30) + (-pkin(4) * t819 + t1506 * t993 - t830 * t919 + t1313 * t1255 + (t1512 * t993 - t1285) * t1250) * MDP(31) + (t1250 * t1254 * t791 + (qJD(5) * t1431 - t1250 * t1470 - t899) * t875) * MDP(32) + (t873 * t899 + t875 * t898 + (-t1249 * t875 - t1254 * t873) * t1471 + (-t1493 - t1254 * t792 + (t1249 * t873 - t1254 * t875) * qJD(6)) * t1250) * MDP(33) + (-t899 * t916 + (-t791 + t1400) * t1255 + (-t1470 * t916 + t875 * t993 + t1490) * t1250) * MDP(34) + (t898 * t916 + (t792 - t1401) * t1255 + (-t1469 * t916 - t873 * t993 - t1492) * t1250) * MDP(35) + (t1250 * t916 * t993 - t1255 * t818) * MDP(36) + (-t793 * t898 - t811 * t873 + t1523 * t1254 + t1264 * t1249 + (t793 * t1474 - t771 + (qJD(5) * t873 - t1492) * pkin(13) - t1268 * t1254) * t1255 + (t793 * t1469 + t773 * t1249 - t993 * t1331 + (t792 + t1401) * pkin(13)) * t1250) * MDP(37) + (-t793 * t899 - t811 * t875 - t1523 * t1249 + t1264 * t1254 + (t793 * t1472 + t770 + (qJD(5) * t875 - t1490) * pkin(13) + t1268 * t1249) * t1255 + (-t793 * t1470 + t773 * t1254 - t993 * t781 + (t791 + t1400) * pkin(13)) * t1250) * MDP(38) + (-MDP(18) * t1532 + MDP(19) * t1001 - MDP(21) * t1044 - MDP(23) * t868 - MDP(27) * t919 + MDP(28) * t917 - MDP(29) * t993 - MDP(30) * t798 + MDP(31) * t799) * t1001; -t917 ^ 2 * MDP(26) + (t819 + t1509) * MDP(27) + (-t1366 + t1508) * MDP(28) + t863 * MDP(29) + (t799 * t993 - t1299 + t775) * MDP(30) + (g(1) * t894 - g(2) * t892 + g(3) * t948 + t798 * t993 + t824 * t917 - t774) * MDP(31) + (t1365 * t875 + t1493) * MDP(32) + ((t791 - t1511) * t1254 + (-t792 - t1510) * t1249) * MDP(33) + (t1365 * t916 + t1492) * MDP(34) + (-t1249 * t916 ^ 2 + t1490) * MDP(35) + (-pkin(5) * t792 + t1278 * t1249 - t1254 * t1524 - t799 * t873) * MDP(37) + (-pkin(5) * t791 + t1249 * t1524 + t1278 * t1254 - t799 * t875) * MDP(38) + (MDP(25) * t917 + MDP(26) * t919 - MDP(28) * qJD(5) - MDP(30) * t824 - MDP(34) * t875 + MDP(35) * t873 - MDP(36) * t916 + MDP(37) * t1331 + MDP(38) * t781) * t919; t875 * t873 * MDP(32) + (-t873 ^ 2 + t875 ^ 2) * MDP(33) + (t1410 + t1511) * MDP(34) + (-t1368 + t1510) * MDP(35) + t818 * MDP(36) + (t781 * t916 - t793 * t875 - g(1) * t857 - g(2) * (t1254 * t953 + t1556) - g(3) * t1324 + t1369) * MDP(37) + (-t1331 * t916 + t793 * t873 + g(1) * t858 - g(2) * (-t1249 * t953 + t1555) + g(3) * t887 - t1332) * MDP(38) + (-MDP(34) * t1491 - MDP(35) * t875 - MDP(37) * t781 + MDP(38) * t1331) * qJD(6);];
tau  = t1;
