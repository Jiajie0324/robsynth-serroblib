% Zeitableitung der analytischen Jacobi-Matrix (Translatorisch) für beliebiges Segment von
% S6RRRRRR10
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% (Ist für translatorischen Teil egal, kennzeichnet nur den Rechenweg der Herleitung)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt (0=Basis).
% r_i_i_C [3x1]
%   Ortsvektor vom KörperKS-Ursprung zum gesuchten Punkt
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% JaD_transl [3x6]
%   Translatorischer Teil der analytischen Jacobi-Matrix (Zeitableitung)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 13:35
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_transl = S6RRRRRR10_jacobiaD_transl_sym_varpar(qJ, qJD, link_index, r_i_i_C, ...
  pkin)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_transl_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10_jacobiaD_transl_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(r_i_i_C,'double') && isreal(r_i_i_C) && all(size(r_i_i_C) == [3 1]), ...
	'S6RRRRRR10_jacobiaD_transl_sym_varpar: Position vector r_i_i_C has to be [3x1] double');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRRRR10_jacobiaD_transl_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6RRRRRR10_jacobiaD_transl_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_transl_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_transl_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (2->2), mult. (8->6), div. (0->0), fcn. (4->2), ass. (0->3)
	t27 = cos(qJ(1));
	t26 = sin(qJ(1));
	t1 = [(-r_i_i_C(1) * t27 + r_i_i_C(2) * t26) * qJD(1), 0, 0, 0, 0, 0; (-r_i_i_C(1) * t26 - r_i_i_C(2) * t27) * qJD(1), 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_transl_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:53
	% EndTime: 2019-10-10 13:34:53
	% DurationCPUTime: 0.07s
	% Computational Cost: add. (35->18), mult. (110->35), div. (0->0), fcn. (94->6), ass. (0->20)
	t136 = sin(pkin(6));
	t151 = t136 * (pkin(10) + r_i_i_C(3));
	t138 = sin(qJ(2));
	t139 = sin(qJ(1));
	t149 = t138 * t139;
	t141 = cos(qJ(1));
	t148 = t138 * t141;
	t140 = cos(qJ(2));
	t147 = t139 * t140;
	t146 = t140 * t141;
	t137 = cos(pkin(6));
	t145 = -t137 * t146 + t149;
	t144 = t137 * t147 + t148;
	t143 = t137 * t148 + t147;
	t142 = t137 * t149 - t146;
	t135 = t142 * qJD(1) + t145 * qJD(2);
	t134 = t144 * qJD(1) + t143 * qJD(2);
	t133 = t143 * qJD(1) + t144 * qJD(2);
	t132 = t145 * qJD(1) + t142 * qJD(2);
	t1 = [t135 * r_i_i_C(1) + t134 * r_i_i_C(2) + (-pkin(1) * t141 - t139 * t151) * qJD(1), t132 * r_i_i_C(1) + t133 * r_i_i_C(2), 0, 0, 0, 0; -t133 * r_i_i_C(1) + t132 * r_i_i_C(2) + (-pkin(1) * t139 + t141 * t151) * qJD(1), -t134 * r_i_i_C(1) + t135 * r_i_i_C(2), 0, 0, 0, 0; 0, (-r_i_i_C(1) * t138 - r_i_i_C(2) * t140) * t136 * qJD(2), 0, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_transl_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:54
	% EndTime: 2019-10-10 13:34:55
	% DurationCPUTime: 0.66s
	% Computational Cost: add. (229->67), mult. (725->118), div. (0->0), fcn. (712->10), ass. (0->53)
	t302 = cos(pkin(7));
	t304 = sin(qJ(3));
	t307 = cos(qJ(3));
	t321 = r_i_i_C(1) * t304 + r_i_i_C(2) * t307;
	t300 = sin(pkin(7));
	t340 = pkin(11) + r_i_i_C(3);
	t342 = t340 * t300;
	t345 = -t321 * t302 + t342;
	t303 = cos(pkin(6));
	t305 = sin(qJ(2));
	t309 = cos(qJ(1));
	t329 = t309 * t305;
	t306 = sin(qJ(1));
	t308 = cos(qJ(2));
	t331 = t306 * t308;
	t292 = t303 * t329 + t331;
	t317 = t303 * t331 + t329;
	t289 = t317 * qJD(1) + t292 * qJD(2);
	t301 = sin(pkin(6));
	t323 = qJD(1) * t300 * t301;
	t313 = -qJD(3) * t292 - t289 * t302 + t306 * t323;
	t344 = t313 * r_i_i_C(1);
	t341 = t340 * t302 + pkin(10);
	t339 = t301 * t306;
	t338 = t301 * t309;
	t337 = t302 * t304;
	t336 = t302 * t307;
	t335 = t304 * t305;
	t334 = t304 * t308;
	t333 = t305 * t307;
	t332 = t306 * t305;
	t330 = t307 * t308;
	t328 = t309 * t308;
	t327 = qJD(3) * t300;
	t324 = t303 * t332;
	t322 = t327 * t338;
	t290 = -qJD(1) * t324 - qJD(2) * t332 + (qJD(2) * t303 + qJD(1)) * t328;
	t291 = -t303 * t328 + t332;
	t320 = qJD(3) * t291 * t302 - t290;
	t319 = t307 * r_i_i_C(1) - t304 * r_i_i_C(2) + pkin(2);
	t318 = t300 * t339 - t302 * t317;
	t316 = t324 - t328;
	t287 = t291 * qJD(1) + t316 * qJD(2);
	t315 = t287 * t302 + t309 * t323;
	t314 = t320 + t322;
	t312 = t313 * r_i_i_C(2);
	t311 = (-t302 * t333 - t334) * r_i_i_C(1) + (t302 * t335 - t330) * r_i_i_C(2);
	t310 = (-t302 * t334 - t333) * r_i_i_C(1) + (-t302 * t330 + t335) * r_i_i_C(2);
	t295 = t307 * t322;
	t288 = t292 * qJD(1) + t317 * qJD(2);
	t286 = -t288 * t307 + t315 * t304 + (t304 * t316 + t318 * t307) * qJD(3);
	t285 = t288 * t304 + t315 * t307 + (-t318 * t304 + t307 * t316) * qJD(3);
	t1 = [-t290 * pkin(2) + t295 * r_i_i_C(1) - t289 * t342 + (-t309 * pkin(1) - t341 * t339) * qJD(1) + (t320 * r_i_i_C(1) - t312) * t307 + (-t314 * r_i_i_C(2) - t344) * t304, t319 * t287 - t345 * t288 + ((t304 * t317 + t316 * t336) * r_i_i_C(1) + (t307 * t317 - t316 * t337) * r_i_i_C(2)) * qJD(3), t285 * r_i_i_C(1) - t286 * r_i_i_C(2), 0, 0, 0; -t288 * pkin(2) + t286 * r_i_i_C(1) + t285 * r_i_i_C(2) - t287 * t342 + (-t306 * pkin(1) + t341 * t338) * qJD(1), -t319 * t289 + t345 * t290 + ((t291 * t304 - t292 * t336) * r_i_i_C(1) + (t291 * t307 + t292 * t337) * r_i_i_C(2)) * qJD(3), t295 * r_i_i_C(2) + (t320 * r_i_i_C(2) + t344) * t307 + (t314 * r_i_i_C(1) - t312) * t304, 0, 0, 0; 0, (t311 * qJD(3) + (-t305 * pkin(2) + t308 * t342 + t310) * qJD(2)) * t301, -t321 * t303 * t327 + (t311 * qJD(2) + t310 * qJD(3)) * t301, 0, 0, 0;];
	JaD_transl = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_transl_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:34:59
	% EndTime: 2019-10-10 13:35:01
	% DurationCPUTime: 2.26s
	% Computational Cost: add. (1104->185), mult. (3507->321), div. (0->0), fcn. (3702->14), ass. (0->115)
	t575 = sin(qJ(1));
	t648 = cos(pkin(6));
	t650 = sin(qJ(2));
	t606 = t648 * t650;
	t598 = t575 * t606;
	t613 = qJD(2) * t650;
	t578 = cos(qJ(2));
	t579 = cos(qJ(1));
	t626 = t579 * t578;
	t545 = -qJD(1) * t598 - t575 * t613 + (qJD(2) * t648 + qJD(1)) * t626;
	t574 = sin(qJ(3));
	t577 = cos(qJ(3));
	t557 = t575 * t578 + t579 * t606;
	t612 = t578 * t648;
	t582 = t575 * t612 + t579 * t650;
	t544 = t582 * qJD(1) + t557 * qJD(2);
	t572 = cos(pkin(7));
	t569 = sin(pkin(7));
	t570 = sin(pkin(6));
	t625 = qJD(1) * t570;
	t616 = t575 * t625;
	t610 = t569 * t616;
	t585 = -t544 * t572 + t610;
	t633 = t570 * t579;
	t620 = t569 * t633;
	t556 = t575 * t650 - t579 * t612;
	t642 = t556 * t572;
	t594 = t620 + t642;
	t640 = t557 * t577;
	t517 = -t545 * t574 + t585 * t577 + (t594 * t574 - t640) * qJD(3);
	t645 = t544 * t569;
	t535 = t572 * t616 + t645;
	t571 = cos(pkin(8));
	t576 = cos(qJ(4));
	t631 = t571 * t576;
	t568 = sin(pkin(8));
	t637 = t568 * t576;
	t662 = t517 * t631 + t535 * t637;
	t573 = sin(qJ(4));
	t632 = t571 * t573;
	t638 = t568 * t573;
	t661 = -t517 * t632 - t535 * t638;
	t529 = t557 * t574 + t594 * t577;
	t630 = t572 * t574;
	t530 = t556 * t630 + t574 * t620 - t640;
	t548 = -t556 * t569 + t572 * t633;
	t660 = t529 * t631 - t530 * t573 + t548 * t637;
	t659 = t529 * t632 + t530 * t576 + t548 * t638;
	t654 = pkin(12) + r_i_i_C(3);
	t581 = t598 - t626;
	t635 = t570 * t575;
	t592 = t569 * t635 - t572 * t582;
	t532 = t592 * t574 - t577 * t581;
	t649 = pkin(11) * t569;
	t542 = t556 * qJD(1) + t581 * qJD(2);
	t646 = t542 * t569;
	t644 = t544 * t574;
	t636 = t569 * t571;
	t634 = t570 * t578;
	t629 = t572 * t577;
	t628 = t574 * t578;
	t627 = t577 * t578;
	t624 = qJD(3) * t574;
	t623 = qJD(3) * t577;
	t622 = t569 * t638;
	t621 = t569 * t637;
	t619 = pkin(11) * t572 + pkin(10);
	t618 = t650 * t574;
	t617 = t650 * t577;
	t615 = t579 * t625;
	t614 = qJD(2) * t634;
	t611 = t648 * t569;
	t609 = t569 * t614;
	t608 = t570 * t613;
	t607 = t574 * t611;
	t605 = t650 * t568 * t569 * t570;
	t543 = t557 * qJD(1) + t582 * qJD(2);
	t586 = t542 * t572 + t569 * t615;
	t515 = -t532 * qJD(3) + t543 * t574 + t586 * t577;
	t533 = t572 * t615 - t646;
	t603 = t515 * t571 + t533 * t568;
	t531 = t574 * t581 + t592 * t577;
	t600 = t531 * t571 + (t569 * t582 + t572 * t635) * t568;
	t599 = t576 * r_i_i_C(1) - t573 * r_i_i_C(2) + pkin(3);
	t538 = t556 * t574 - t557 * t629;
	t595 = t556 * t577 + t557 * t630;
	t540 = t574 * t582 + t581 * t629;
	t593 = t577 * t582 - t581 * t630;
	t591 = qJD(2) * t605;
	t590 = t572 * t628 + t617;
	t589 = t572 * t627 - t618;
	t588 = t572 * t618 - t627;
	t587 = -t572 * t617 - t628;
	t584 = t570 * t571 * t587 + t605;
	t536 = (-t589 * qJD(2) + t588 * qJD(3)) * t570;
	t583 = t536 * t571 + t568 * t609;
	t580 = (-t573 * r_i_i_C(1) - t576 * r_i_i_C(2)) * t571 + t654 * t568;
	t561 = t620 * t623;
	t555 = -t569 * t634 + t648 * t572;
	t552 = t588 * t570;
	t547 = t590 * t570 + t607;
	t546 = t589 * t570 + t577 * t611;
	t537 = (-t590 * qJD(2) + t587 * qJD(3)) * t570;
	t526 = -t608 * t630 - t570 * qJD(3) * t618 + (t614 + (t572 * t634 + t611) * qJD(3)) * t577;
	t525 = -qJD(3) * t607 + (t587 * qJD(2) - t590 * qJD(3)) * t570;
	t524 = t538 * qJD(3) - t544 * t577 - t545 * t630;
	t523 = t595 * qJD(3) - t545 * t629 + t644;
	t522 = t540 * qJD(3) + t542 * t577 + t543 * t630;
	t521 = t593 * qJD(3) - t542 * t574 + t543 * t629;
	t520 = t561 + (qJD(3) * t642 - t545) * t577 + (qJD(3) * t557 - t585) * t574;
	t518 = t574 * t610 + t545 * t577 - t557 * t624 - t561 + (-t556 * t623 - t644) * t572;
	t516 = t581 * t624 + t586 * t574 + (t592 * qJD(3) - t543) * t577;
	t514 = t516 * t576 + t603 * t573 + (-t532 * t573 + t600 * t576) * qJD(4);
	t513 = -t516 * t573 + t603 * t576 + (-t532 * t576 - t600 * t573) * qJD(4);
	t1 = [(t520 * t576 + t661) * r_i_i_C(1) + (-t520 * t573 - t662) * r_i_i_C(2) + t520 * pkin(3) - t545 * pkin(2) - pkin(11) * t645 + (-t579 * pkin(1) - t619 * t635) * qJD(1) + (t660 * r_i_i_C(1) - t659 * r_i_i_C(2)) * qJD(4) + t654 * (t517 * t568 - t535 * t571), (t521 * t632 + t522 * t576 - t543 * t622) * r_i_i_C(1) + (t521 * t631 - t522 * t573 - t543 * t621) * r_i_i_C(2) + t522 * pkin(3) + t542 * pkin(2) - t543 * t649 + ((t540 * t631 + t573 * t593 - t581 * t621) * r_i_i_C(1) + (-t540 * t632 + t576 * t593 + t581 * t622) * r_i_i_C(2)) * qJD(4) + t654 * (-t521 * t568 - t543 * t636), t599 * t515 + t580 * t516 + ((-t531 * t573 - t532 * t631) * r_i_i_C(1) + (-t531 * t576 + t532 * t632) * r_i_i_C(2)) * qJD(4), t513 * r_i_i_C(1) - t514 * r_i_i_C(2), 0, 0; t514 * r_i_i_C(1) + t513 * r_i_i_C(2) + t516 * pkin(3) - t543 * pkin(2) - pkin(11) * t646 + (-t575 * pkin(1) + t619 * t633) * qJD(1) + t654 * (-t515 * t568 + t533 * t571), (t523 * t632 + t524 * t576 + t545 * t622) * r_i_i_C(1) + (t523 * t631 - t524 * t573 + t545 * t621) * r_i_i_C(2) + t524 * pkin(3) - t544 * pkin(2) + t545 * t649 + ((t538 * t631 + t557 * t621 + t573 * t595) * r_i_i_C(1) + (-t538 * t632 - t557 * t622 + t576 * t595) * r_i_i_C(2)) * qJD(4) + t654 * (-t523 * t568 + t545 * t636), t599 * t517 + t580 * t518 + ((t529 * t573 + t530 * t631) * r_i_i_C(1) + (t529 * t576 - t530 * t632) * r_i_i_C(2)) * qJD(4), (-t518 * t573 + t662) * r_i_i_C(1) + (-t518 * t576 + t661) * r_i_i_C(2) + (t659 * r_i_i_C(1) + t660 * r_i_i_C(2)) * qJD(4), 0, 0; 0, (t537 * t576 + t583 * t573 + (t552 * t573 + t584 * t576) * qJD(4)) * r_i_i_C(1) + (-t537 * t573 + t583 * t576 + (t552 * t576 - t584 * t573) * qJD(4)) * r_i_i_C(2) + t537 * pkin(3) - pkin(2) * t608 + pkin(11) * t609 + t654 * (-t536 * t568 + t571 * t609), t599 * t525 + t580 * t526 + ((-t546 * t573 - t547 * t631) * r_i_i_C(1) + (-t546 * t576 + t547 * t632) * r_i_i_C(2)) * qJD(4), (t525 * t631 - t526 * t573 + t576 * t591) * r_i_i_C(1) + (-t525 * t632 - t526 * t576 - t573 * t591) * r_i_i_C(2) + ((-t546 * t632 - t547 * t576 - t555 * t638) * r_i_i_C(1) + (-t546 * t631 + t547 * t573 - t555 * t637) * r_i_i_C(2)) * qJD(4), 0, 0;];
	JaD_transl = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_transl_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:35:08
	% EndTime: 2019-10-10 13:35:13
	% DurationCPUTime: 5.01s
	% Computational Cost: add. (3094->275), mult. (9732->476), div. (0->0), fcn. (10685->16), ass. (0->164)
	t839 = cos(qJ(1));
	t920 = sin(qJ(2));
	t921 = sin(qJ(1));
	t879 = t921 * t920;
	t838 = cos(qJ(2));
	t918 = cos(pkin(6));
	t883 = t838 * t918;
	t815 = -t839 * t883 + t879;
	t834 = sin(qJ(3));
	t828 = sin(pkin(7));
	t829 = sin(pkin(6));
	t904 = t829 * t839;
	t891 = t828 * t904;
	t831 = cos(pkin(7));
	t901 = t831 * t834;
	t875 = t918 * t920;
	t816 = t921 * t838 + t839 * t875;
	t837 = cos(qJ(3));
	t909 = t816 * t837;
	t789 = t815 * t901 + t834 * t891 - t909;
	t833 = sin(qJ(4));
	t836 = cos(qJ(4));
	t911 = t815 * t831;
	t860 = t891 + t911;
	t788 = t816 * t834 + t860 * t837;
	t807 = -t815 * t828 + t831 * t904;
	t827 = sin(pkin(8));
	t830 = cos(pkin(8));
	t871 = t788 * t830 + t807 * t827;
	t760 = t789 * t836 + t871 * t833;
	t773 = t788 * t827 - t807 * t830;
	t832 = sin(qJ(5));
	t835 = cos(qJ(5));
	t941 = -t760 * t832 - t773 * t835;
	t940 = t760 * t835 - t773 * t832;
	t857 = t921 * t875;
	t897 = t839 * t838;
	t804 = -qJD(1) * t857 - qJD(2) * t879 + (qJD(2) * t918 + qJD(1)) * t897;
	t841 = t839 * t920 + t921 * t883;
	t803 = t841 * qJD(1) + t816 * qJD(2);
	t890 = t829 * t921;
	t878 = qJD(1) * t890;
	t867 = t828 * t878;
	t847 = -t803 * t831 + t867;
	t754 = (t860 * t834 - t909) * qJD(3) - t804 * t834 + t847 * t837;
	t915 = t803 * t828;
	t793 = t831 * t878 + t915;
	t874 = t754 * t830 + t793 * t827;
	t939 = t760 * qJD(4) + t874 * t836;
	t931 = -t789 * t833 + t871 * t836;
	t938 = -t931 * qJD(4) + t874 * t833;
	t744 = t754 * t827 - t793 * t830;
	t937 = t744 * t832;
	t936 = t744 * t835;
	t886 = t920 * t837;
	t899 = t834 * t838;
	t856 = t831 * t899 + t886;
	t882 = t918 * t828;
	t876 = t834 * t882;
	t806 = t856 * t829 + t876;
	t887 = t920 * t834;
	t898 = t837 * t838;
	t855 = t831 * t898 - t887;
	t805 = t855 * t829 + t837 * t882;
	t905 = t829 * t838;
	t814 = -t828 * t905 + t918 * t831;
	t869 = t805 * t830 + t814 * t827;
	t772 = t806 * t836 + t869 * t833;
	t840 = t857 - t897;
	t854 = t828 * t890 - t831 * t841;
	t791 = t854 * t834 - t837 * t840;
	t922 = r_i_i_C(3) + pkin(13);
	t919 = t828 * pkin(11);
	t853 = t831 * t887 - t898;
	t794 = (-t855 * qJD(2) + t853 * qJD(3)) * t829;
	t916 = t794 * t827;
	t914 = t803 * t834;
	t907 = t827 * t828;
	t906 = t828 * t830;
	t903 = t830 * t833;
	t902 = t830 * t836;
	t900 = t831 * t837;
	t896 = qJD(2) * t829;
	t895 = qJD(3) * t834;
	t894 = qJD(3) * t837;
	t893 = qJD(5) * t832;
	t892 = qJD(5) * t835;
	t889 = t829 * t920;
	t888 = t831 * t921;
	t885 = qJD(1) * t904;
	t884 = t838 * t896;
	t881 = t828 * t889;
	t880 = t828 * t884;
	t877 = qJD(2) * t889;
	t790 = t834 * t840 + t854 * t837;
	t809 = t828 * t841 + t829 * t888;
	t870 = t790 * t830 + t809 * t827;
	t868 = t828 * t877;
	t866 = t835 * r_i_i_C(1) - t832 * r_i_i_C(2) + pkin(4);
	t801 = t815 * qJD(1) + t840 * qJD(2);
	t802 = t816 * qJD(1) + t841 * qJD(2);
	t859 = t837 * t841 - t840 * t901;
	t763 = t859 * qJD(3) - t801 * t834 + t802 * t900;
	t749 = -t763 * t827 - t802 * t906;
	t865 = -t763 * t830 + t802 * t907;
	t861 = t815 * t837 + t816 * t901;
	t765 = t861 * qJD(3) - t804 * t900 + t914;
	t750 = -t765 * t827 + t804 * t906;
	t864 = t765 * t830 + t804 * t907;
	t769 = -t788 * t836 + t789 * t903;
	t770 = t790 * t836 - t791 * t903;
	t796 = t815 * t834 - t816 * t900;
	t863 = t796 * t830 + t816 * t907;
	t798 = t834 * t841 + t840 * t900;
	t862 = t798 * t830 - t840 * t907;
	t777 = t805 * t836 - t806 * t903;
	t858 = qJD(5) * (-t832 * r_i_i_C(1) - t835 * r_i_i_C(2));
	t852 = -t831 * t886 - t899;
	t851 = -t801 * t828 + t831 * t885;
	t850 = t801 * t831 + t828 * t885;
	t810 = t852 * t829;
	t849 = t810 * t830 + t827 * t881;
	t848 = t794 * t830 + t827 * t880;
	t846 = t851 * t827;
	t782 = -qJD(3) * t876 + (t852 * qJD(2) - t856 * qJD(3)) * t829;
	t845 = t782 * t830 + t827 * t868;
	t843 = -t791 * t833 + t870 * t836;
	t762 = t791 * t836 + t870 * t833;
	t842 = -t806 * t833 + t869 * t836;
	t767 = t863 * t833 - t836 * t861;
	t768 = t862 * t833 - t836 * t859;
	t752 = -t791 * qJD(3) + t802 * t834 + t850 * t837;
	t742 = -t752 * t827 + t851 * t830;
	t811 = t853 * t829;
	t778 = -t811 * t836 + t849 * t833;
	t820 = t891 * t894;
	t800 = -t810 * t827 + t830 * t881;
	t795 = (-t856 * qJD(2) + t852 * qJD(3)) * t829;
	t785 = -t805 * t827 + t814 * t830;
	t783 = -t877 * t901 - t829 * qJD(3) * t887 + (t884 + (t831 * t905 + t882) * qJD(3)) * t837;
	t781 = t830 * t880 - t916;
	t780 = -t798 * t827 - t840 * t906;
	t779 = -t796 * t827 + t816 * t906;
	t776 = -t782 * t827 + t830 * t868;
	t775 = -t790 * t827 + t809 * t830;
	t766 = t796 * qJD(3) - t803 * t837 - t804 * t901;
	t764 = t798 * qJD(3) + t801 * t837 + t802 * t901;
	t757 = t820 + (qJD(3) * t911 - t804) * t837 + (qJD(3) * t816 - t847) * t834;
	t755 = t834 * t867 + t804 * t837 - t816 * t895 - t820 + (-t815 * t894 - t914) * t831;
	t753 = t840 * t895 + t850 * t834 + (t854 * qJD(3) - t802) * t837;
	t748 = t795 * t836 + t848 * t833 + (t811 * t833 + t849 * t836) * qJD(4);
	t746 = -t783 * t903 + t782 * t836 + (-t805 * t833 - t806 * t902) * qJD(4);
	t741 = t842 * qJD(4) + t783 * t836 + t845 * t833;
	t739 = t766 * t836 + t864 * t833 + (t833 * t861 + t863 * t836) * qJD(4);
	t737 = t764 * t836 - t865 * t833 + (t833 * t859 + t862 * t836) * qJD(4);
	t735 = -t755 * t903 + t754 * t836 + (t788 * t833 + t789 * t902) * qJD(4);
	t733 = -t753 * t903 + t752 * t836 + (-t790 * t833 - t791 * t902) * qJD(4);
	t731 = t757 * t836 - t938;
	t729 = t755 * t836 + t938;
	t727 = t753 * t836 + (t752 * t830 + t846) * t833 + t843 * qJD(4);
	t726 = t762 * qJD(4) - t752 * t902 + t753 * t833 - t836 * t846;
	t725 = t727 * t835 + t742 * t832 + (-t762 * t832 + t775 * t835) * qJD(5);
	t724 = -t727 * t832 + t742 * t835 + (-t762 * t835 - t775 * t832) * qJD(5);
	t1 = [(t731 * t835 + t937) * r_i_i_C(1) + (-t731 * t832 + t936) * r_i_i_C(2) + t731 * pkin(4) + t757 * pkin(3) - t804 * pkin(2) - pkin(11) * t915 + t922 * (t757 * t833 + t939) + (t941 * r_i_i_C(1) - t940 * r_i_i_C(2)) * qJD(5) + t744 * pkin(12) + (-t839 * pkin(1) + (-t921 * pkin(10) - pkin(11) * t888) * t829) * qJD(1), (t737 * t835 + t749 * t832) * r_i_i_C(1) + (-t737 * t832 + t749 * t835) * r_i_i_C(2) + t737 * pkin(4) + t764 * pkin(3) + t801 * pkin(2) - t802 * t919 + t922 * (t768 * qJD(4) + t764 * t833 + t865 * t836) + ((-t768 * t832 + t780 * t835) * r_i_i_C(1) + (-t768 * t835 - t780 * t832) * r_i_i_C(2)) * qJD(5) + t749 * pkin(12), (t733 * t835 - t770 * t893) * r_i_i_C(1) + (-t733 * t832 - t770 * t892) * r_i_i_C(2) + t733 * pkin(4) + t752 * pkin(3) + t922 * (t770 * qJD(4) + t752 * t833 + t753 * t902) + ((t753 * t832 + t791 * t892) * r_i_i_C(1) + (t753 * t835 - t791 * t893) * r_i_i_C(2) + t753 * pkin(12)) * t827, -t866 * t726 + t922 * t727 + t843 * t858, t724 * r_i_i_C(1) - t725 * r_i_i_C(2), 0; -t802 * pkin(2) + t753 * pkin(3) + t727 * pkin(4) + t725 * r_i_i_C(1) + t724 * r_i_i_C(2) + t922 * t726 + (-t921 * pkin(1) + pkin(10) * t904) * qJD(1) + t742 * pkin(12) + t851 * pkin(11), (t739 * t835 + t750 * t832) * r_i_i_C(1) + (-t739 * t832 + t750 * t835) * r_i_i_C(2) + t739 * pkin(4) + t766 * pkin(3) - t803 * pkin(2) + t804 * t919 + t922 * (t767 * qJD(4) + t766 * t833 - t864 * t836) + ((-t767 * t832 + t779 * t835) * r_i_i_C(1) + (-t767 * t835 - t779 * t832) * r_i_i_C(2)) * qJD(5) + t750 * pkin(12), (t735 * t835 - t769 * t893) * r_i_i_C(1) + (-t735 * t832 - t769 * t892) * r_i_i_C(2) + t735 * pkin(4) + t754 * pkin(3) + t922 * (t769 * qJD(4) + t754 * t833 + t755 * t902) + ((t755 * t832 - t789 * t892) * r_i_i_C(1) + (t755 * t835 + t789 * t893) * r_i_i_C(2) + t755 * pkin(12)) * t827, t922 * t729 - t931 * t858 + t866 * (-t755 * t833 + t939), (-t729 * t832 - t936) * r_i_i_C(1) + (-t729 * t835 + t937) * r_i_i_C(2) + (t940 * r_i_i_C(1) + t941 * r_i_i_C(2)) * qJD(5), 0; 0, (t748 * t835 + t781 * t832) * r_i_i_C(1) + (-t748 * t832 + t781 * t835) * r_i_i_C(2) + t748 * pkin(4) + t795 * pkin(3) - pkin(12) * t916 + t922 * (t778 * qJD(4) + t795 * t833 - t848 * t836) + ((-t778 * t832 + t800 * t835) * r_i_i_C(1) + (-t778 * t835 - t800 * t832) * r_i_i_C(2)) * qJD(5) + (-t920 * pkin(2) + (pkin(12) * t830 + pkin(11)) * t838 * t828) * t896, (t746 * t835 - t777 * t893) * r_i_i_C(1) + (-t746 * t832 - t777 * t892) * r_i_i_C(2) + t746 * pkin(4) + t782 * pkin(3) + t922 * (t777 * qJD(4) + t782 * t833 + t783 * t902) + ((t783 * t832 + t806 * t892) * r_i_i_C(1) + (t783 * t835 - t806 * t893) * r_i_i_C(2) + t783 * pkin(12)) * t827, t922 * t741 + t842 * t858 + t866 * (-t772 * qJD(4) - t783 * t833 + t845 * t836), (-t741 * t832 + t776 * t835) * r_i_i_C(1) + (-t741 * t835 - t776 * t832) * r_i_i_C(2) + ((-t772 * t835 - t785 * t832) * r_i_i_C(1) + (t772 * t832 - t785 * t835) * r_i_i_C(2)) * qJD(5), 0;];
	JaD_transl = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_transl_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:35:20
	% EndTime: 2019-10-10 13:35:31
	% DurationCPUTime: 11.18s
	% Computational Cost: add. (7512->405), mult. (23410->656), div. (0->0), fcn. (26467->18), ass. (0->236)
	t1064 = sin(qJ(6));
	t1071 = cos(qJ(3));
	t1060 = sin(pkin(7));
	t1061 = sin(pkin(6));
	t1208 = cos(qJ(1));
	t1159 = t1061 * t1208;
	t1145 = t1060 * t1159;
	t1072 = cos(qJ(2));
	t1203 = cos(pkin(6));
	t1139 = t1203 * t1208;
	t1206 = sin(qJ(2));
	t1207 = sin(qJ(1));
	t1146 = t1207 * t1206;
	t1047 = -t1072 * t1139 + t1146;
	t1063 = cos(pkin(7));
	t1179 = t1047 * t1063;
	t1111 = t1145 + t1179;
	t1138 = t1203 * t1206;
	t1156 = t1207 * t1072;
	t1048 = t1208 * t1138 + t1156;
	t1067 = sin(qJ(3));
	t1177 = t1048 * t1067;
	t1020 = t1111 * t1071 + t1177;
	t1059 = sin(pkin(8));
	t1062 = cos(pkin(8));
	t1144 = t1063 * t1159;
	t1115 = t1047 * t1060 - t1144;
	t1000 = t1020 * t1059 + t1115 * t1062;
	t1065 = sin(qJ(5));
	t1069 = cos(qJ(5));
	t1053 = t1067 * t1145;
	t1165 = t1063 * t1067;
	t1176 = t1048 * t1071;
	t1021 = t1047 * t1165 + t1053 - t1176;
	t1066 = sin(qJ(4));
	t1070 = cos(qJ(4));
	t1102 = t1115 * t1059;
	t1127 = t1020 * t1062 - t1102;
	t981 = t1021 * t1070 + t1127 * t1066;
	t952 = -t1000 * t1065 + t1069 * t981;
	t1240 = t1064 * t952;
	t1068 = cos(qJ(6));
	t1239 = t1068 * t952;
	t1238 = t952 * qJD(5);
	t1094 = t1203 * t1156 + t1208 * t1206;
	t1034 = t1094 * qJD(1) + t1048 * qJD(2);
	t1143 = t1207 * t1060 * t1061;
	t1105 = qJD(1) * t1143 - t1034 * t1063;
	t1124 = t1207 * t1138;
	t1157 = t1208 * qJD(1);
	t1035 = -qJD(1) * t1124 - qJD(2) * t1146 + (qJD(2) * t1139 + t1157) * t1072;
	t1231 = (t1111 * t1067 - t1176) * qJD(3) - t1035 * t1067;
	t1083 = t1105 * t1071 + t1231;
	t1158 = t1063 * t1207;
	t1142 = t1061 * t1158;
	t1184 = t1034 * t1060;
	t1106 = qJD(1) * t1142 + t1184;
	t1222 = t1106 * t1059 + t1062 * t1083;
	t1237 = t1222 * t1066;
	t1236 = -t981 * qJD(4) - t1222 * t1070;
	t1131 = t1000 * t1069 + t1065 * t981;
	t1234 = t1131 * qJD(5);
	t1229 = t1021 * t1066;
	t1226 = t1106 * t1062;
	t1209 = r_i_i_C(3) + pkin(14);
	t1033 = t1048 * qJD(1) + t1094 * qJD(2);
	t1093 = -t1208 * t1072 + t1124;
	t1092 = t1093 * qJD(2);
	t1087 = t1047 * qJD(1) + t1092;
	t1085 = t1087 * t1071;
	t1135 = t1071 * t1145;
	t1077 = qJD(1) * t1135 + t1033 * t1067 + t1063 * t1085;
	t1134 = t1067 * t1143;
	t1175 = t1094 * t1063;
	t1149 = qJD(3) * t1175;
	t1173 = t1093 * t1071;
	t1076 = t1067 * t1149 + t1077 + (-t1134 + t1173) * qJD(3);
	t1080 = -t1115 * qJD(1) - t1060 * t1092;
	t1073 = -t1076 * t1059 + t1080 * t1062;
	t1224 = t1059 * t1080 + t1062 * t1076;
	t1110 = t1143 - t1175;
	t1023 = t1110 * t1067 - t1173;
	t1223 = -qJD(3) * t1023 + t1077;
	t1154 = t1206 * t1071;
	t1163 = t1067 * t1072;
	t1113 = t1063 * t1163 + t1154;
	t1100 = t1113 * qJD(3);
	t1108 = -t1063 * t1154 - t1163;
	t1147 = t1203 * t1060;
	t1136 = t1067 * t1147;
	t1126 = qJD(3) * t1136;
	t1084 = -t1126 + (t1108 * qJD(2) - t1100) * t1061;
	t1160 = t1060 * t1206;
	t1132 = t1059 * t1061 * t1160;
	t1221 = qJD(2) * t1132 + t1062 * t1084;
	t1133 = t1071 * t1143;
	t1164 = t1063 * t1071;
	t1220 = qJD(1) * t1133 - t1034 * t1164 + t1231;
	t1169 = t1060 * t1062;
	t1086 = t1087 * t1067;
	t1117 = t1071 * t1094 - t1093 * t1165;
	t984 = t1117 * qJD(3) + t1033 * t1164 - t1086;
	t968 = -t1033 * t1169 - t984 * t1059;
	t1174 = t1093 * t1067;
	t1022 = t1110 * t1071 + t1174;
	t1114 = t1060 * t1094 + t1142;
	t1002 = -t1022 * t1059 + t1114 * t1062;
	t1101 = t1114 * t1059;
	t983 = t1023 * t1070 + (t1022 * t1062 + t1101) * t1066;
	t1219 = t1002 * t1069 - t1065 * t983;
	t1155 = t1206 * t1067;
	t1162 = t1071 * t1072;
	t1112 = t1063 * t1162 - t1155;
	t1038 = t1112 * t1061 + t1071 * t1147;
	t1039 = t1113 * t1061 + t1136;
	t1168 = t1061 * t1072;
	t1148 = t1060 * t1168;
	t1107 = t1203 * t1063 - t1148;
	t1099 = t1107 * t1059;
	t1166 = t1062 * t1070;
	t1218 = t1038 * t1166 - t1039 * t1066 + t1070 * t1099;
	t1217 = t1022 * t1166 - t1023 * t1066 + t1070 * t1101;
	t1216 = -t1020 * t1166 + t1070 * t1102 + t1229;
	t1140 = t1063 * t1155;
	t1109 = t1140 - t1162;
	t1043 = t1109 * t1061;
	t1042 = t1108 * t1061;
	t1104 = t1042 * t1062 + t1132;
	t1214 = t1043 * t1066 + t1104 * t1070;
	t1029 = t1067 * t1094 + t1093 * t1164;
	t1170 = t1060 * t1059;
	t1119 = t1029 * t1062 - t1093 * t1170;
	t1213 = t1066 * t1117 + t1119 * t1070;
	t1178 = t1047 * t1071;
	t1118 = t1048 * t1165 + t1178;
	t1027 = t1047 * t1067 - t1048 * t1164;
	t1120 = t1027 * t1062 + t1048 * t1170;
	t1212 = t1066 * t1118 + t1120 * t1070;
	t1211 = t1127 * t1070 - t1229;
	t1205 = pkin(11) * t1060;
	t1204 = pkin(12) * t1059;
	t974 = qJD(1) * t1053 + t1063 * t1086 + (-t1033 - t1149) * t1071 + (t1133 + t1174) * qJD(3);
	t930 = t983 * qJD(4) + t974 * t1066 - t1224 * t1070;
	t1202 = t1064 * t930;
	t1052 = qJD(3) * t1135;
	t1183 = t1034 * t1067;
	t975 = qJD(1) * t1134 + t1035 * t1071 - qJD(3) * t1177 - t1052 + (-qJD(3) * t1178 - t1183) * t1063;
	t932 = t975 * t1066 + t1236;
	t1201 = t1064 * t932;
	t1194 = qJD(2) * t1061;
	t1014 = -t1140 * t1194 - t1061 * qJD(3) * t1155 + (qJD(2) * t1168 + (t1063 * t1168 + t1147) * qJD(3)) * t1071;
	t999 = t1039 * t1070 + (t1038 * t1062 + t1099) * t1066;
	t955 = t999 * qJD(4) + t1014 * t1066 - t1221 * t1070;
	t1200 = t1064 * t955;
	t1198 = t1068 * t930;
	t1197 = t1068 * t932;
	t1196 = t1068 * t955;
	t1193 = qJD(6) * t1064;
	t1192 = qJD(6) * t1068;
	t1025 = (-t1112 * qJD(2) + t1109 * qJD(3)) * t1061;
	t1187 = t1025 * t1059;
	t1172 = t1059 * t1065;
	t1171 = t1059 * t1069;
	t1167 = t1062 * t1066;
	t1161 = qJD(5) * t1209;
	t1141 = t1062 * t1160;
	t1137 = qJD(2) * t1148;
	t954 = t1002 * t1065 + t1069 * t983;
	t1008 = -t1027 * t1059 + t1048 * t1169;
	t989 = t1120 * t1066 - t1070 * t1118;
	t964 = t1008 * t1065 + t1069 * t989;
	t1009 = -t1029 * t1059 - t1093 * t1169;
	t991 = t1119 * t1066 - t1070 * t1117;
	t965 = t1009 * t1065 + t1069 * t991;
	t1017 = -t1038 * t1059 + t1107 * t1062;
	t1130 = t1017 * t1069 - t1065 * t999;
	t973 = t1017 * t1065 + t1069 * t999;
	t959 = t1059 * t1083 - t1226;
	t1128 = t1068 * r_i_i_C(1) - t1064 * r_i_i_C(2) + pkin(5);
	t1007 = -t1043 * t1070 + t1104 * t1066;
	t1031 = -t1042 * t1059 + t1061 * t1141;
	t996 = t1007 * t1069 + t1031 * t1065;
	t1125 = qJD(6) * (-t1064 * r_i_i_C(1) - t1068 * r_i_i_C(2));
	t993 = -t1020 * t1070 + t1021 * t1167;
	t966 = -t1021 * t1172 + t1069 * t993;
	t995 = t1022 * t1070 - t1023 * t1167;
	t967 = t1023 * t1172 + t1069 * t995;
	t1122 = t1033 * t1170 - t1062 * t984;
	t986 = t1118 * qJD(3) - t1035 * t1164 + t1183;
	t969 = t1035 * t1169 - t986 * t1059;
	t1121 = t1035 * t1170 + t1062 * t986;
	t1005 = t1038 * t1070 - t1039 * t1167;
	t997 = t1005 * t1069 + t1039 * t1172;
	t992 = -t1020 * t1066 - t1021 * t1166;
	t994 = t1022 * t1066 + t1023 * t1166;
	t1004 = t1038 * t1066 + t1039 * t1166;
	t1116 = qJD(5) * t1128;
	t1103 = t1025 * t1062 + t1059 * t1137;
	t1026 = (-t1113 * qJD(2) + t1108 * qJD(3)) * t1061;
	t1010 = t1062 * t1137 - t1187;
	t1003 = t1059 * t1126 + (t1059 * t1100 + (-t1108 * t1059 + t1141) * qJD(2)) * t1061;
	t987 = t1027 * qJD(3) - t1034 * t1071 - t1035 * t1165;
	t985 = t1029 * qJD(3) + t1033 * t1165 + t1085;
	t977 = t1052 + (qJD(3) * t1179 - t1035) * t1071 + (qJD(3) * t1048 - t1105) * t1067;
	t963 = qJD(4) * t1214 + t1026 * t1070 + t1103 * t1066;
	t962 = t1007 * qJD(4) + t1026 * t1066 - t1103 * t1070;
	t961 = -t1004 * qJD(4) - t1014 * t1167 + t1084 * t1070;
	t960 = t1005 * qJD(4) + t1014 * t1166 + t1084 * t1066;
	t958 = -t1220 * t1059 + t1226;
	t956 = t1218 * qJD(4) + t1014 * t1070 + t1221 * t1066;
	t949 = t1010 * t1065 + t1069 * t963 + (-t1007 * t1065 + t1031 * t1069) * qJD(5);
	t947 = t1014 * t1172 + t1069 * t961 + (-t1005 * t1065 + t1039 * t1171) * qJD(5);
	t945 = qJD(4) * t1212 + t1121 * t1066 + t1070 * t987;
	t944 = t989 * qJD(4) + t1066 * t987 - t1121 * t1070;
	t943 = qJD(4) * t1213 - t1122 * t1066 + t1070 * t985;
	t942 = t991 * qJD(4) + t1066 * t985 + t1122 * t1070;
	t941 = -t992 * qJD(4) + t1220 * t1070 - t975 * t1167;
	t940 = t993 * qJD(4) + t1220 * t1066 + t975 * t1166;
	t939 = -t994 * qJD(4) + t1223 * t1070 - t974 * t1167;
	t938 = t995 * qJD(4) + t1223 * t1066 + t974 * t1166;
	t937 = t1130 * qJD(5) + t1003 * t1065 + t1069 * t956;
	t935 = qJD(4) * t1211 + t1070 * t977 - t1237;
	t934 = t1066 * t977 - t1236;
	t933 = t1216 * qJD(4) + t975 * t1070 + t1237;
	t931 = t1217 * qJD(4) + t1224 * t1066 + t974 * t1070;
	t929 = t975 * t1172 + t1069 * t941 + (-t1021 * t1171 - t1065 * t993) * qJD(5);
	t927 = t974 * t1172 + t1069 * t939 + (t1023 * t1171 - t1065 * t995) * qJD(5);
	t925 = t1065 * t969 + t1069 * t945 + (t1008 * t1069 - t1065 * t989) * qJD(5);
	t923 = t1065 * t968 + t1069 * t943 + (t1009 * t1069 - t1065 * t991) * qJD(5);
	t921 = t1065 * t959 + t1069 * t935 - t1234;
	t919 = t1065 * t958 + t1069 * t933 + t1234;
	t917 = t1219 * qJD(5) + t1073 * t1065 + t931 * t1069;
	t916 = t954 * qJD(5) + t1065 * t931 - t1073 * t1069;
	t915 = t1202 + t1068 * t917 + (-t1064 * t954 - t1068 * t1217) * qJD(6);
	t914 = -t1064 * t917 + t1198 + (t1064 * t1217 - t1068 * t954) * qJD(6);
	t1 = [(t1064 * t934 + t1068 * t921) * r_i_i_C(1) + (-t1064 * t921 + t1068 * t934) * r_i_i_C(2) + t921 * pkin(5) + t935 * pkin(4) + t934 * pkin(13) + t977 * pkin(3) - t1035 * pkin(2) - pkin(11) * t1184 + t1209 * (t1065 * t935 - t1069 * t959 + t1238) + ((-t1068 * t1211 - t1240) * r_i_i_C(1) + (t1064 * t1211 - t1239) * r_i_i_C(2)) * qJD(6) + t959 * pkin(12) + (-t1208 * pkin(1) + (-t1207 * pkin(10) - pkin(11) * t1158) * t1061) * qJD(1), (t1064 * t942 + t1068 * t923 + (-t1064 * t965 - t1068 * t1213) * qJD(6)) * r_i_i_C(1) + (-t1064 * t923 + t1068 * t942 + (t1064 * t1213 - t1068 * t965) * qJD(6)) * r_i_i_C(2) + t923 * pkin(5) + t943 * pkin(4) + t942 * pkin(13) + t985 * pkin(3) + t1087 * pkin(2) - t1033 * t1205 + t1209 * (t965 * qJD(5) + t1065 * t943 - t1069 * t968) + t968 * pkin(12), (t1064 * t938 + t1068 * t927 + (-t1064 * t967 + t1068 * t994) * qJD(6)) * r_i_i_C(1) + (-t1064 * t927 + t1068 * t938 + (-t1064 * t994 - t1068 * t967) * qJD(6)) * r_i_i_C(2) + t927 * pkin(5) + t939 * pkin(4) + t938 * pkin(13) + t1076 * pkin(3) + t974 * t1204 + t1209 * (t967 * qJD(5) + t1065 * t939 - t974 * t1171), (t1064 * t931 + t983 * t1192) * r_i_i_C(1) + (t1068 * t931 - t983 * t1193) * r_i_i_C(2) - t930 * pkin(4) + t931 * pkin(13) + (-t1116 * t1217 - t1209 * t930) * t1065 + ((-t1193 * t1217 - t1198) * r_i_i_C(1) + (-t1192 * t1217 + t1202) * r_i_i_C(2) - t930 * pkin(5) + t1217 * t1161) * t1069, t1219 * t1125 - t1128 * t916 + t1209 * t917, r_i_i_C(1) * t914 - r_i_i_C(2) * t915; t1061 * pkin(10) * t1157 - t1033 * pkin(2) + t974 * pkin(3) + t931 * pkin(4) + t917 * pkin(5) + t930 * pkin(13) + t915 * r_i_i_C(1) + t914 * r_i_i_C(2) - t1087 * t1205 + t1209 * t916 + (-pkin(1) * t1207 + pkin(11) * t1144) * qJD(1) + t1073 * pkin(12), (t1064 * t944 + t1068 * t925) * r_i_i_C(1) + (-t1064 * t925 + t1068 * t944) * r_i_i_C(2) + t925 * pkin(5) + t945 * pkin(4) + t944 * pkin(13) + t987 * pkin(3) - t1034 * pkin(2) + t1035 * t1205 + t1209 * (t964 * qJD(5) + t1065 * t945 - t1069 * t969) + ((-t1064 * t964 - t1068 * t1212) * r_i_i_C(1) + (t1064 * t1212 - t1068 * t964) * r_i_i_C(2)) * qJD(6) + t969 * pkin(12), (t1064 * t940 + t1068 * t929 + (-t1064 * t966 + t1068 * t992) * qJD(6)) * r_i_i_C(1) + (-t1064 * t929 + t1068 * t940 + (-t1064 * t992 - t1068 * t966) * qJD(6)) * r_i_i_C(2) + t929 * pkin(5) + t941 * pkin(4) + t940 * pkin(13) + t1083 * pkin(3) + t975 * t1204 + t1209 * (t966 * qJD(5) + t1065 * t941 - t975 * t1171), (t1064 * t933 - t1192 * t981) * r_i_i_C(1) + (t1068 * t933 + t1193 * t981) * r_i_i_C(2) - t932 * pkin(4) + t933 * pkin(13) + (-t1116 * t1216 - t1209 * t932) * t1065 + ((-t1193 * t1216 - t1197) * r_i_i_C(1) + (-t1192 * t1216 + t1201) * r_i_i_C(2) - t932 * pkin(5) + t1216 * t1161) * t1069, t1209 * t919 + t1131 * t1125 + t1128 * (-t1065 * t933 + t1069 * t958 + t1238), (-t1064 * t919 + t1197) * r_i_i_C(1) + (-t1068 * t919 - t1201) * r_i_i_C(2) + ((t1064 * t1216 + t1239) * r_i_i_C(1) + (t1068 * t1216 - t1240) * r_i_i_C(2)) * qJD(6); 0, (t1064 * t962 + t1068 * t949) * r_i_i_C(1) + (-t1064 * t949 + t1068 * t962) * r_i_i_C(2) + t949 * pkin(5) + t963 * pkin(4) + t962 * pkin(13) + t1026 * pkin(3) - pkin(12) * t1187 + t1209 * (t996 * qJD(5) - t1010 * t1069 + t1065 * t963) + ((-t1064 * t996 - t1068 * t1214) * r_i_i_C(1) + (t1064 * t1214 - t1068 * t996) * r_i_i_C(2)) * qJD(6) + (-t1206 * pkin(2) + (pkin(12) * t1062 + pkin(11)) * t1072 * t1060) * t1194, (t1064 * t960 + t1068 * t947 + (t1004 * t1068 - t1064 * t997) * qJD(6)) * r_i_i_C(1) + (-t1064 * t947 + t1068 * t960 + (-t1004 * t1064 - t1068 * t997) * qJD(6)) * r_i_i_C(2) + t947 * pkin(5) + t961 * pkin(4) + t960 * pkin(13) + t1084 * pkin(3) + t1014 * t1204 + t1209 * (t997 * qJD(5) - t1014 * t1171 + t1065 * t961), (t1064 * t956 + t999 * t1192) * r_i_i_C(1) + (t1068 * t956 - t999 * t1193) * r_i_i_C(2) - t955 * pkin(4) + t956 * pkin(13) + (-t1116 * t1218 - t1209 * t955) * t1065 + ((-t1193 * t1218 - t1196) * r_i_i_C(1) + (-t1192 * t1218 + t1200) * r_i_i_C(2) - t955 * pkin(5) + t1218 * t1161) * t1069, t1209 * t937 + t1130 * t1125 + t1128 * (-qJD(5) * t973 + t1003 * t1069 - t1065 * t956), (-t1064 * t937 + t1196) * r_i_i_C(1) + (-t937 * t1068 - t1200) * r_i_i_C(2) + ((t1064 * t1218 - t1068 * t973) * r_i_i_C(1) + (t1064 * t973 + t1068 * t1218) * r_i_i_C(2)) * qJD(6);];
	JaD_transl = t1;
else
	JaD_transl=NaN(3,6);
end