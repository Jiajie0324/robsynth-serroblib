% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRRR10V2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,d6]';
% 
% Output:
% tau_reg [6x38]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-04-11 14:56
% Revision: b693519ea345eb34ae9622239e7f1167217e9d53 (2019-04-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRR10V2_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_regmin_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-04-11 14:51:57
% EndTime: 2019-04-11 14:52:35
% DurationCPUTime: 10.82s
% Computational Cost: add. (11969->618), mult. (25987->886), div. (0->0), fcn. (21060->14), ass. (0->298)
t342 = qJD(2) + qJD(3);
t240 = sin(qJ(3));
t246 = cos(qJ(2));
t414 = cos(qJ(3));
t322 = qJD(1) * t414;
t241 = sin(qJ(2));
t359 = qJD(1) * t241;
t426 = -t240 * t359 + t246 * t322;
t428 = t342 * t426;
t239 = sin(qJ(4));
t244 = cos(qJ(5));
t370 = t239 * t244;
t369 = t240 * t246;
t180 = -qJD(1) * t369 - t241 * t322;
t238 = sin(qJ(5));
t245 = cos(qJ(4));
t365 = t244 * t245;
t115 = -t180 * t238 + t365 * t426;
t354 = qJD(4) * t245;
t292 = t244 * t354 - t115;
t352 = qJD(5) * t238;
t325 = t239 * t352;
t427 = t292 - t325;
t237 = sin(qJ(6));
t243 = cos(qJ(6));
t351 = qJD(5) * t243;
t355 = qJD(4) * t244;
t366 = t243 * t245;
t375 = t237 * t239;
t395 = -t115 * t243 - t426 * t375 + (-qJD(6) + t355) * t366 + (-t238 * t351 + (-qJD(6) * t244 + qJD(4)) * t237) * t239;
t347 = qJD(6) * t243;
t348 = qJD(6) * t237;
t356 = qJD(4) * t239;
t371 = t239 * t243;
t425 = t237 * t427 - t243 * t356 - t245 * t348 + t347 * t370 + t371 * t426;
t373 = t238 * t245;
t114 = t244 * t180 + t373 * t426;
t327 = t238 * t354;
t424 = t114 - t327;
t236 = qJ(2) + qJ(3);
t231 = sin(t236);
t247 = cos(qJ(1));
t376 = t231 * t247;
t242 = sin(qJ(1));
t378 = t231 * t242;
t423 = g(1) * t376 + g(2) * t378;
t422 = -g(1) * t247 - g(2) * t242;
t350 = qJD(5) * t244;
t323 = t239 * t350;
t421 = -t323 + t424;
t341 = t414 * pkin(2);
t229 = qJDD(2) * t341;
t233 = qJDD(2) + qJDD(3);
t403 = pkin(2) * qJD(2);
t336 = t240 * t403;
t162 = -pkin(3) * t233 + qJD(3) * t336 - t229;
t320 = t414 * qJD(3);
t345 = qJDD(2) * t240;
t163 = t233 * pkin(5) + (qJD(2) * t320 + t345) * pkin(2);
t228 = -pkin(2) * t246 - pkin(1);
t346 = qJD(1) * qJD(2);
t319 = t241 * t346;
t171 = pkin(2) * t319 + qJDD(1) * t228;
t313 = qJDD(1) * t414;
t343 = t246 * qJDD(1);
t98 = t240 * t343 + t241 * t313 + t428;
t185 = t241 * t414 + t369;
t134 = t342 * t185;
t344 = t241 * qJDD(1);
t289 = t240 * t344 - t246 * t313;
t99 = qJD(1) * t134 + t289;
t50 = t99 * pkin(3) - t98 * pkin(5) + t171;
t189 = pkin(5) * t342 + t336;
t196 = t228 * qJD(1);
t258 = -pkin(3) * t426 + t180 * pkin(5) + t196;
t84 = t239 * t189 - t245 * t258;
t35 = -qJD(4) * t84 + t245 * t163 + t239 * t50;
t312 = -t244 * t162 + t238 * t35;
t321 = t414 * qJD(2);
t303 = pkin(2) * t321;
t190 = -pkin(3) * t342 - t303;
t85 = t245 * t189 + t239 * t258;
t69 = t190 * t238 + t244 * t85;
t23 = qJD(5) * t69 + t312;
t232 = cos(t236);
t363 = t247 * t239;
t368 = t242 * t245;
t167 = t232 * t368 - t363;
t377 = t231 * t244;
t127 = -t167 * t238 + t242 * t377;
t364 = t245 * t247;
t372 = t239 * t242;
t169 = t232 * t364 + t372;
t130 = -t169 * t238 + t244 * t376;
t275 = t231 * t373 + t232 * t244;
t270 = g(1) * t130 + g(2) * t127 - g(3) * t275;
t170 = qJD(4) - t426;
t269 = t245 * t180 - t239 * t342;
t100 = -t244 * t170 - t238 * t269;
t97 = qJD(6) + t100;
t310 = t97 ^ 2;
t420 = pkin(6) * t310 + t23 + t270;
t128 = t167 * t244 + t238 * t378;
t166 = t232 * t372 + t364;
t419 = t128 * t237 - t166 * t243;
t418 = t128 * t243 + t166 * t237;
t121 = -pkin(3) * t180 - pkin(5) * t426;
t116 = pkin(2) * t359 + t121;
t413 = pkin(2) * t240;
t226 = pkin(5) + t413;
t305 = qJD(4) * t226 + t116;
t417 = t170 * t305;
t382 = t426 * t239;
t416 = (-t356 + t382) * pkin(6);
t415 = (-t115 - t325) * pkin(6);
t221 = t245 * t342;
t60 = qJD(4) * t221 + t180 * t356 + t239 * t233 + t245 * t98;
t96 = qJDD(4) + t99;
t39 = t170 * t350 + t238 * t96 + t244 * t60 + t269 * t352;
t61 = -qJD(4) * t269 - t245 * t233 + t239 * t98;
t59 = qJDD(5) + t61;
t102 = t170 * t238 - t244 * t269;
t138 = -t180 * t239 - t221;
t137 = qJD(5) + t138;
t66 = t102 * t243 + t137 * t237;
t17 = qJD(6) * t66 + t237 * t39 - t243 * t59;
t40 = qJD(5) * t102 + t238 * t60 - t244 * t96;
t49 = t245 * t50;
t36 = qJD(4) * t85 + t239 * t163 - t49;
t14 = -t39 * pkin(6) + t36;
t22 = t238 * t162 + t190 * t350 + t244 * t35 - t352 * t85;
t15 = pkin(6) * t59 + t22;
t51 = -pkin(6) * t102 + t84;
t52 = pkin(6) * t137 + t69;
t287 = t237 * t52 - t243 * t51;
t5 = -t287 * qJD(6) + t237 * t14 + t243 * t15;
t248 = qJD(2) ^ 2;
t412 = pkin(6) * t244;
t411 = pkin(6) * t245;
t222 = g(3) * t231;
t408 = g(3) * t232;
t407 = g(3) * t239;
t64 = t102 * t237 - t243 * t137;
t405 = t64 * t97;
t404 = t66 * t97;
t16 = -t102 * t348 + t137 * t347 + t237 * t59 + t243 * t39;
t402 = t16 * t237;
t38 = qJDD(6) + t40;
t401 = t237 * t38;
t400 = t238 * t59;
t399 = t243 * t38;
t308 = t243 * t97;
t398 = t244 * t59;
t397 = t39 * t238;
t396 = t60 * t239;
t106 = t239 * t121 + t245 * t303;
t328 = t238 * t356;
t349 = qJD(5) * t245;
t393 = -t106 * t238 + t244 * t336 - pkin(3) * t352 + (t244 * t349 - t328) * pkin(5);
t392 = t100 * t137;
t391 = t102 * t137;
t390 = t137 * t238;
t306 = t137 * t244;
t389 = t138 * t170;
t388 = t138 * t244;
t387 = t269 * t170;
t384 = t170 * t180;
t383 = t426 * t190;
t381 = t180 * t426;
t380 = t185 * t239;
t379 = t185 * t245;
t374 = t238 * t239;
t367 = t243 * t244;
t362 = t244 * t106 + t238 * t336;
t227 = -t341 - pkin(3);
t361 = t226 * t365 + t238 * t227;
t234 = t241 ^ 2;
t360 = -t246 ^ 2 + t234;
t358 = qJD(3) * t240;
t357 = qJD(4) * t170;
t353 = qJD(5) * t237;
t340 = t241 * t403;
t339 = pkin(2) * t358;
t338 = pkin(5) * t357;
t274 = -t240 * t241 + t246 * t414;
t133 = t342 * t274;
t74 = pkin(3) * t134 - pkin(5) * t133 + t340;
t337 = t74 * t374;
t335 = t231 * t375;
t334 = t231 * t371;
t333 = t231 * t363;
t304 = pkin(2) * t320;
t284 = t245 * t304;
t332 = t227 * t350 + t238 * t339 + t244 * t284;
t331 = pkin(5) - t412;
t329 = t185 * t354;
t324 = t238 * t349;
t318 = -pkin(3) * t238 + pkin(5) * t365;
t317 = t226 - t412;
t316 = -t162 - t408;
t309 = -0.2e1 * pkin(1) * t346;
t307 = t170 * t245;
t172 = t317 * t239;
t266 = -t239 * t355 - t324;
t302 = -qJD(6) * t172 + t116 * t370 - t226 * t266 - t332 + t416;
t168 = t232 * t363 - t368;
t300 = g(1) * t168 + g(2) * t166;
t299 = g(1) * t169 + g(2) * t167;
t297 = g(1) * t242 - g(2) * t247;
t141 = t361 - t411;
t296 = qJD(6) * t141 - t116 * t245 - t239 * t304 - t317 * t354 + t415;
t187 = t331 * t239;
t295 = pkin(3) * t350 - pkin(5) * t266 - qJD(6) * t187 + t362 + t416;
t105 = -t245 * t121 + t239 * t303;
t176 = t318 - t411;
t294 = qJD(6) * t176 - t331 * t354 + t105 + t415;
t293 = -pkin(5) * t96 - t383;
t291 = t114 - t323;
t122 = -pkin(3) * t274 - pkin(5) * t185 + t228;
t290 = pkin(6) * t185 + t122 * t244;
t30 = t237 * t51 + t243 * t52;
t120 = t185 * t365 - t238 * t274;
t71 = -pkin(6) * t120 - t122 * t245;
t89 = t290 * t239;
t286 = -t237 * t89 + t243 * t71;
t285 = t237 * t71 + t243 * t89;
t283 = t162 * t239 - t85 * t180 + t190 * t354 + t232 * t407;
t282 = -t84 * t180 + t190 * t356 + t245 * t423;
t281 = -t196 * t426 - t232 * t422 + t222;
t280 = t347 * t97 + t401;
t279 = t348 * t97 - t399;
t278 = t422 * t231;
t277 = -t137 * t350 - t400;
t276 = -t137 * t352 + t398;
t88 = t120 * t243 + t185 * t375;
t159 = t231 * t365 - t232 * t238;
t273 = t133 * t239 + t329;
t272 = t133 * t245 - t185 * t356;
t249 = qJD(1) ^ 2;
t271 = pkin(1) * t249 - t422;
t268 = pkin(6) * t38;
t267 = 0.2e1 * qJDD(1) * pkin(1) + t297;
t264 = t231 * t407 + t300;
t263 = t196 * t180 + t229 - t408 + t423;
t262 = -t291 + t327;
t261 = qJD(4) * t185 * t190 + t122 * t96 + t170 * t74;
t260 = t264 - t36;
t259 = -t122 * t357 + t133 * t190 + t162 * t185;
t257 = -t245 * t222 + (-pkin(6) * t269 - t244 * t84) * t97 - t299;
t6 = -qJD(6) * t30 + t243 * t14 - t237 * t15;
t256 = -t170 * t304 - t226 * t96 - t383;
t143 = t159 * t242;
t145 = t159 * t247;
t161 = t231 * t238 + t232 * t365;
t182 = -t237 * t245 + t239 * t367;
t68 = -t244 * t190 + t238 * t85;
t255 = -g(1) * (t145 * t237 - t243 * t333) - g(2) * (t143 * t237 - t242 * t334) - g(3) * (-t161 * t237 + t232 * t371) + t23 * t182 + t395 * t68;
t254 = pkin(6) * qJD(5) * t97 - t264;
t253 = g(1) * t145 + g(2) * t143 - g(3) * t161 - t68 * t356 + t36 * t374 - t421 * t84;
t252 = -g(3) * (-t232 * t373 + t377) + t22 * t245 + t36 * t370 + t69 * t382 + t292 * t84 + t422 * t275;
t251 = -qJD(4) * t258 - t163 + t222;
t181 = t237 * t370 + t366;
t250 = -g(1) * (-t145 * t243 - t237 * t333) - g(2) * (-t143 * t243 - t242 * t335) - g(3) * (t161 * t243 + t232 * t375) + t23 * t181 + t6 * t374 + t425 * t68 + t421 * t287;
t186 = pkin(3) * t244 + pkin(5) * t373;
t151 = t226 * t373 - t227 * t244;
t131 = t169 * t244 + t238 * t376;
t119 = t185 * t373 + t244 * t274;
t104 = t180 ^ 2 - t426 ^ 2;
t92 = t131 * t243 + t168 * t237;
t91 = -t131 * t237 + t168 * t243;
t90 = (t226 * t349 - t339) * t244 + (qJD(5) * t227 - t226 * t356 + t284) * t238;
t87 = t120 * t237 - t185 * t371;
t82 = -t138 * t367 - t237 * t269;
t81 = -t237 * t388 + t243 * t269;
t73 = -t289 + (-qJD(1) * t185 - t180) * t342;
t72 = t98 - t428;
t58 = pkin(6) * t388 + t85;
t46 = qJD(5) * t120 + t133 * t373 - t244 * t134 - t185 * t328;
t45 = (-t185 * t349 + t134) * t238 + (-qJD(5) * t274 + t272) * t244;
t44 = t170 * t307 - t180 * t269 + t239 * t96;
t43 = -t170 ^ 2 * t239 - t138 * t180 + t245 * t96;
t42 = -t269 * t307 + t396;
t41 = t137 * t170 * t239 - t59 * t245;
t34 = t290 * t354 + (pkin(6) * t133 - t122 * t352 + t244 * t74) * t239;
t26 = -pkin(6) * t45 + t122 * t356 - t245 * t74;
t25 = qJD(6) * t88 - t133 * t371 + t237 * t45 - t243 * t329;
t24 = (qJD(6) * t380 + t45) * t243 + (-qJD(6) * t120 + t273) * t237;
t18 = (t60 - t389) * t245 + (-t61 + t387) * t239;
t13 = t102 * t427 + t39 * t370;
t11 = t262 * t97 + t374 * t38;
t10 = t40 * t245 + t424 * t137 + (-t100 * t170 + t277) * t239;
t9 = -t39 * t245 + t292 * t137 + (t102 * t170 + t276) * t239;
t8 = t16 * t182 + t395 * t66;
t7 = t100 * t115 + t102 * t114 + (-t100 * t244 - t102 * t238) * t354 + (-t397 - t244 * t40 + (t100 * t238 - t102 * t244) * qJD(5)) * t239;
t3 = -t17 * t374 - t181 * t38 - t262 * t64 - t425 * t97;
t2 = t16 * t374 + t182 * t38 + t262 * t66 + t395 * t97;
t1 = -t16 * t181 - t182 * t17 - t395 * t64 - t425 * t66;
t4 = [qJDD(1), t297, -t422, qJDD(1) * t234 + 0.2e1 * t246 * t319, 0.2e1 * t241 * t343 - 0.2e1 * t346 * t360, qJDD(2) * t241 + t246 * t248, qJDD(2) * t246 - t241 * t248, 0, t241 * t309 + t246 * t267, -t241 * t267 + t246 * t309, -t133 * t180 + t185 * t98, t133 * t426 + t134 * t180 - t185 * t99 + t274 * t98, t133 * t342 + t185 * t233, -t134 * t342 + t233 * t274, 0, t196 * t134 - t171 * t274 + t228 * t99 + t232 * t297 - t340 * t426, t196 * t133 + t171 * t185 - t180 * t340 + t228 * t98 - t231 * t297, -t269 * t272 + t379 * t60 (-t138 * t245 + t239 * t269) * t133 + (-t396 - t245 * t61 + (t138 * t239 + t245 * t269) * qJD(4)) * t185, -t134 * t269 + t170 * t272 - t274 * t60 + t379 * t96, -t138 * t134 - t170 * t273 + t274 * t61 - t380 * t96, t134 * t170 - t274 * t96, g(1) * t167 - g(2) * t169 - t134 * t84 + t239 * t259 + t245 * t261 + t274 * t36, -g(1) * t166 + g(2) * t168 - t134 * t85 - t239 * t261 + t245 * t259 + t274 * t35, t102 * t45 + t120 * t39, -t100 * t45 - t102 * t46 - t119 * t39 - t120 * t40, t102 * t273 + t120 * t59 + t45 * t137 + t380 * t39, -t100 * t273 - t119 * t59 - t46 * t137 - t380 * t40, t137 * t273 + t380 * t59, g(1) * t128 - g(2) * t131 + t119 * t36 + t46 * t84 + (-t100 * t74 - t122 * t40 + (-t122 * t390 - t185 * t68) * qJD(4)) * t245 + (-t74 * t390 - t133 * t68 - t185 * t23 + (qJD(4) * t100 + t277) * t122) * t239, t36 * t120 + t84 * t45 + g(1) * t127 - g(2) * t130 + (-t74 * t102 - t122 * t39 + (-t122 * t306 - t185 * t69) * qJD(4)) * t245 + (-t74 * t306 - t69 * t133 - t22 * t185 + (qJD(4) * t102 - t276) * t122) * t239, t16 * t88 + t24 * t66, -t16 * t87 - t17 * t88 - t24 * t64 - t25 * t66, t119 * t16 + t24 * t97 + t38 * t88 + t46 * t66, -t119 * t17 - t25 * t97 - t38 * t87 - t46 * t64, t119 * t38 + t46 * t97 (-qJD(6) * t285 - t237 * t34 + t243 * t26) * t97 + t286 * t38 + t6 * t119 - t287 * t46 + t64 * t337 + t23 * t87 + t68 * t25 + g(1) * t418 - g(2) * t92 + (t64 * t323 + (t17 * t239 + t354 * t64) * t238) * t122 -(qJD(6) * t286 + t237 * t26 + t243 * t34) * t97 - t285 * t38 - t5 * t119 - t30 * t46 + t66 * t337 + t23 * t88 + t68 * t24 - g(1) * t419 - g(2) * t91 + (t66 * t323 + (t16 * t239 + t354 * t66) * t238) * t122; 0, 0, 0, -t241 * t249 * t246, t360 * t249, t344, t343, qJDD(2), -g(3) * t246 + t241 * t271, g(3) * t241 + t246 * t271, t381, t104, t72, t73, t233 (t426 * t359 + t414 * t233 + (-0.2e1 * qJD(2) - qJD(3)) * t358) * pkin(2) + t263 (t180 * t359 + (-0.2e1 * t321 - t320) * qJD(3) + (-t233 - qJDD(2)) * t240) * pkin(2) + t281, t42, t18, t44, t43, t384, t138 * t339 + t227 * t61 + t256 * t239 + (t316 - t417) * t245 + t282, -t269 * t339 + t227 * t60 + t256 * t245 + (t278 + t417) * t239 + t283, t13, t7, t9, t10, t41, -t90 * t137 - t151 * t59 + (t100 * t305 + t23) * t245 + (t100 * t304 + t116 * t390 + t226 * t40 + t426 * t68) * t239 + t253 -(-t226 * t324 + t332) * t137 - t361 * t59 + t305 * t245 * t102 + (t102 * t304 - t84 * t352 + t116 * t306 + t226 * t39 + (t226 * t306 - t69) * qJD(4)) * t239 + t252, t8, t1, t2, t3, t11 (-t116 * t374 + t90) * t64 + (t237 * t302 - t243 * t296) * t97 + (-t141 * t237 + t172 * t243) * t38 + t151 * t17 + t250 -(t141 * t243 + t172 * t237) * t38 + t90 * t66 + t151 * t16 + (t237 * t296 + t243 * t302) * t97 + t291 * t30 + (-t30 * t354 + (-t116 * t66 - t5) * t239) * t238 + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t381, t104, t72, t73, t233, t248 * t413 + t263, -pkin(2) * t345 + t248 * t341 + t281, t42, t18, t44, t43, t384, -t138 * t336 - pkin(3) * t61 + t105 * t170 + t293 * t239 + (t316 - t338) * t245 + t282, t269 * t336 - pkin(3) * t60 + t106 * t170 + t293 * t245 + (t278 + t338) * t239 + t283, t13, t7, t9, t10, t41, t68 * t382 - t100 * t105 - t186 * t59 + t23 * t245 - t393 * t137 + (t100 * t354 + t239 * t40) * pkin(5) + t253, -t318 * t59 - t69 * t356 + t362 * t137 - t105 * t102 + (pkin(3) * t306 - t374 * t84) * qJD(5) + (t102 * t354 - t137 * t266 + t239 * t39) * pkin(5) + t252, t8, t1, t2, t3, t11, t393 * t64 + (t237 * t295 - t243 * t294) * t97 + (-t176 * t237 + t187 * t243) * t38 + t186 * t17 + t250 -(t176 * t243 + t187 * t237) * t38 - t5 * t374 + t186 * t16 + (t237 * t294 + t243 * t295) * t97 + t393 * t66 - t262 * t30 + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269 * t138, -t138 ^ 2 + t269 ^ 2, t60 + t389, -t61 - t387, t96, t85 * t170 - t189 * t354 + t190 * t269 + t239 * t251 + t300 + t49, t190 * t138 - t84 * t170 + (qJD(4) * t189 - t50) * t239 + t251 * t245 + t299, t102 * t306 + t397 (t39 - t392) * t244 + (-t40 - t391) * t238, t102 * t269 + t137 * t306 + t400, -t137 ^ 2 * t238 - t100 * t269 + t398, t137 * t269, -t100 * t85 + t244 * t260 - t269 * t68, -t102 * t85 - t238 * t260 - t269 * t69, t16 * t243 * t238 + (-t238 * t348 + t243 * t350 - t82) * t66, t64 * t82 + t66 * t81 + (-t237 * t66 - t243 * t64) * t350 + (-t402 - t17 * t243 + (t237 * t64 - t243 * t66) * qJD(6)) * t238, -t82 * t97 + (t351 * t97 - t16) * t244 + (t137 * t66 - t279) * t238, t81 * t97 + (-t353 * t97 + t17) * t244 + (-t137 * t64 - t280) * t238, -t38 * t244 + t390 * t97, -t58 * t308 - t68 * t81 + t257 * t237 + (-t243 * t254 + t353 * t68 - t6) * t244 + (pkin(6) * t279 - t137 * t287 + t23 * t237 + t347 * t68 + t84 * t64) * t238, t237 * t58 * t97 - t68 * t82 + t257 * t243 + (t237 * t254 + t351 * t68 + t5) * t244 + (pkin(6) * t280 - t137 * t30 + t23 * t243 - t348 * t68 + t84 * t66) * t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102 * t100, -t100 ^ 2 + t102 ^ 2, t39 + t392, t391 - t40, t59, -t102 * t84 - t270 - t312 + (-qJD(5) + t137) * t69, g(1) * t131 + g(2) * t128 + g(3) * t159 + t100 * t84 - t137 * t68 - t22, t308 * t66 + t402 (t16 - t405) * t243 + (-t17 - t404) * t237, -t66 * t102 + t308 * t97 + t401, t64 * t102 - t237 * t310 + t399, -t97 * t102, t287 * t102 - t268 * t237 - t243 * t420 - t69 * t64, t30 * t102 + t237 * t420 - t268 * t243 - t69 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 * t64, -t64 ^ 2 + t66 ^ 2, t16 + t405, -t17 + t404, t38, t30 * t97 - t68 * t66 - g(1) * t91 + g(2) * t419 - g(3) * (-t159 * t237 + t334) + t6, -t287 * t97 + t68 * t64 + g(1) * t92 + g(2) * t418 - g(3) * (-t159 * t243 - t335) - t5;];
tau_reg  = t4;
