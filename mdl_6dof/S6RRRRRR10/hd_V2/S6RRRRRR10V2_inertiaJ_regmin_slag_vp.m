% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRR10V2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-04-11 14:56
% Revision: b693519ea345eb34ae9622239e7f1167217e9d53 (2019-04-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR10V2_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10V2_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S6RRRRRR10V2_inertiaJ_regmin_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
t150 = cos(qJ(3));
t151 = cos(qJ(2));
t94 = sin(qJ(3));
t95 = sin(qJ(2));
t60 = t150 * t95 + t151 * t94;
t98 = cos(qJ(4));
t124 = t98 * t60;
t59 = -t150 * t151 + t94 * t95;
t92 = sin(qJ(5));
t97 = cos(qJ(5));
t27 = t124 * t92 - t59 * t97;
t160 = -0.2e1 * t27;
t84 = -pkin(2) * t151 - pkin(1);
t31 = pkin(3) * t59 - pkin(5) * t60 + t84;
t159 = 0.2e1 * t31;
t93 = sin(qJ(4));
t80 = t97 * t93;
t91 = sin(qJ(6));
t96 = cos(qJ(6));
t54 = t80 * t91 + t96 * t98;
t158 = -0.2e1 * t54;
t157 = 0.2e1 * t84;
t156 = pkin(6) * t97;
t155 = t92 * pkin(3);
t154 = t94 * pkin(2);
t105 = t150 * pkin(2);
t83 = -t105 - pkin(3);
t153 = pkin(3) - t83;
t134 = t93 * t31;
t110 = t92 * t134;
t14 = (pkin(6) * t60 + t31 * t97) * t93;
t125 = t98 * t31;
t28 = t124 * t97 + t59 * t92;
t8 = -pkin(6) * t28 - t125;
t3 = -t14 * t91 + t8 * t96;
t78 = t92 * t93;
t152 = t110 * t54 + t3 * t78;
t133 = t93 * t60;
t13 = t133 * t91 + t28 * t96;
t149 = t13 * t91;
t148 = t27 * t97;
t147 = t27 * t98;
t146 = t28 * t92;
t145 = t28 * t98;
t55 = t80 * t96 - t91 * t98;
t47 = t55 * t91;
t87 = t93 ^ 2;
t144 = t87 * t92;
t143 = t87 * t97;
t142 = t91 * t27;
t141 = t91 * t92;
t140 = t91 * t96;
t139 = t91 * t97;
t138 = t92 * t27;
t137 = t92 * t83;
t136 = t92 * t97;
t135 = t92 * t98;
t50 = t93 * t59;
t82 = pkin(5) + t154;
t132 = t93 * t82;
t131 = t93 * t96;
t130 = t93 * t98;
t129 = t96 * t27;
t128 = t96 * t92;
t127 = t96 * t97;
t126 = t97 * t98;
t52 = t98 * t59;
t123 = t98 * t82;
t38 = t137 + (t82 * t97 - pkin(6)) * t98;
t48 = (t82 - t156) * t93;
t18 = -t38 * t91 + t48 * t96;
t42 = t123 * t92 - t83 * t97;
t122 = t18 * t78 + t42 * t54;
t49 = -t155 + (pkin(5) * t97 - pkin(6)) * t98;
t63 = (pkin(5) - t156) * t93;
t29 = -t49 * t91 + t63 * t96;
t61 = pkin(3) * t97 + pkin(5) * t135;
t121 = t29 * t78 + t54 * t61;
t43 = t123 * t97 + t137;
t120 = t143 * t82 + t43 * t98;
t62 = pkin(5) * t126 - t155;
t119 = pkin(5) * t143 + t62 * t98;
t118 = 0.2e1 * t151;
t117 = -0.2e1 * t133;
t116 = -0.2e1 * t130;
t76 = 0.2e1 * t130;
t115 = 0.2e1 * t52;
t86 = t92 ^ 2;
t114 = t91 * t86 * t93;
t113 = t91 * t138;
t71 = t91 * t78;
t112 = t91 * t136;
t111 = t60 * t144;
t109 = t86 * t131;
t108 = t27 * t128;
t72 = t93 * t128;
t107 = t92 * t127;
t106 = t60 * t143;
t104 = pkin(6) * t71;
t103 = pkin(6) * t72;
t102 = pkin(6) * t109;
t4 = t14 * t96 + t8 * t91;
t101 = t110 * t55 - t4 * t78;
t100 = -pkin(3) * t60 - pkin(5) * t59;
t99 = -t59 * t82 + t60 * t83;
t90 = t98 ^ 2;
t89 = t97 ^ 2;
t88 = t96 ^ 2;
t85 = t91 ^ 2;
t79 = t89 * t87;
t77 = t86 * t87;
t74 = pkin(5) * t144;
t73 = t92 * t80;
t69 = t97 * t116;
t68 = -0.2e1 * t87 * t136;
t67 = t92 * t76;
t66 = pkin(6) * t114;
t64 = t82 * t144;
t58 = (-t86 + t89) * t93;
t57 = t60 ^ 2;
t53 = t55 ^ 2;
t46 = t93 * t124;
t44 = t55 * t128;
t41 = 0.2e1 * t55 * t78;
t40 = t78 * t158;
t37 = t61 * t55;
t35 = -t55 * t97 + t109;
t34 = t54 * t97 - t114;
t33 = t55 * t158;
t32 = (-t87 + t90) * t60;
t30 = t49 * t96 + t63 * t91;
t26 = t42 * t55;
t24 = -t54 * t91 + t55 * t96;
t22 = t28 * t80;
t21 = t27 * t78;
t20 = (-t54 * t96 - t47) * t92;
t19 = t38 * t96 + t48 * t91;
t12 = -t131 * t60 + t28 * t91;
t11 = t106 - t145;
t10 = -t111 + t147;
t9 = t13 * t55;
t7 = (-t146 - t148) * t93;
t6 = t13 * t78 + t27 * t55;
t5 = -t12 * t78 - t27 * t54;
t1 = -t12 * t55 - t13 * t54;
t2 = [1, 0, 0, t95 ^ 2, t95 * t118, 0, 0, 0, pkin(1) * t118, -0.2e1 * pkin(1) * t95, t57, -0.2e1 * t60 * t59, 0, 0, 0, t59 * t157, t60 * t157, t90 * t57, t57 * t116, t60 * t115, t59 * t117, t59 ^ 2, t31 * t115, -0.2e1 * t31 * t50, t28 ^ 2, t28 * t160, 0.2e1 * t28 * t133, t27 * t117, t87 * t57 (-t111 - t147) * t159 (-t106 - t145) * t159, t13 ^ 2, -0.2e1 * t13 * t12, 0.2e1 * t13 * t27, t12 * t160, t27 ^ 2, 0.2e1 * t110 * t12 + 0.2e1 * t27 * t3, 0.2e1 * t110 * t13 - 0.2e1 * t27 * t4; 0, 0, 0, 0, 0, t95, t151, 0, 0, 0, 0, 0, t60, -t59, 0, 0, 0, t46, t32, t50, t52, 0, t99 * t93, t99 * t98, t22, t7, t11, t10, -t46 (t27 * t82 - t42 * t60) * t93 (t28 * t82 - t43 * t60) * t93, t9, t1, t6, t5, t21, t12 * t42 + t18 * t27 + t152, t13 * t42 - t19 * t27 + t101; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t105, -0.2e1 * t154, t87, t76, 0, 0, 0, -0.2e1 * t83 * t98, 0.2e1 * t83 * t93, t79, t68, t69, t67, t90, 0.2e1 * t42 * t98 + 0.2e1 * t64, 0.2e1 * t120, t53, t33, t41, t40, t77, 0.2e1 * t122, -0.2e1 * t19 * t78 + 0.2e1 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, 0, 0, 0, t46, t32, t50, t52, 0, t100 * t93, t100 * t98, t22, t7, t11, t10, -t46 (pkin(5) * t27 - t60 * t61) * t93 (pkin(5) * t28 - t60 * t62) * t93, t9, t1, t6, t5, t21, t12 * t61 + t27 * t29 + t152, t13 * t61 - t27 * t30 + t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t105, -t154, t87, t76, 0, 0, 0, t153 * t98, -t153 * t93, t79, t68, t69, t67, t90, t64 + t74 + (t42 + t61) * t98, t119 + t120, t53, t33, t41, t40, t77, t121 + t122, t26 + t37 + (-t19 - t30) * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t87, t76, 0, 0, 0, 0.2e1 * pkin(3) * t98, -0.2e1 * pkin(3) * t93, t79, t68, t69, t67, t90, 0.2e1 * t61 * t98 + 0.2e1 * t74, 0.2e1 * t119, t53, t33, t41, t40, t77, 0.2e1 * t121, -0.2e1 * t30 * t78 + 0.2e1 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, -t133, t59, t125, -t134, t146, t28 * t97 - t138, t92 * t133, t60 * t80, 0, t97 * t125, -t92 * t125, t13 * t128 (-t12 * t96 - t149) * t92, -t13 * t97 + t108, t12 * t97 - t113, -t148, -pkin(6) * t108 + t114 * t31 - t3 * t97, pkin(6) * t113 + t109 * t31 + t4 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, t98, 0, -t132, -t123, t73, t58, -t135, -t126, 0, -t82 * t80, t92 * t132, t44, t20, t35, t34, -t73, t141 * t42 - t18 * t97 - t102, t128 * t42 + t19 * t97 + t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, t98, 0, -t93 * pkin(5), -t98 * pkin(5), t73, t58, -t135, -t126, 0, -pkin(5) * t80, pkin(5) * t78, t44, t20, t35, t34, -t73, t141 * t61 - t29 * t97 - t102, t128 * t61 + t30 * t97 + t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t86, 0.2e1 * t136, 0, 0, 0, 0, 0, t88 * t86, -0.2e1 * t86 * t140, -0.2e1 * t107, 0.2e1 * t112, t89, 0.2e1 * pkin(6) * t107, -0.2e1 * pkin(6) * t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t27, t133, -t110, -t31 * t80, t149, -t12 * t91 + t13 * t96, t142, t129, 0, -pkin(6) * t142 - t31 * t72, -pkin(6) * t129 + t110 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t78, -t98, -t42, -t43, t47, t24, t71, t72, 0, -t42 * t96 - t104, t42 * t91 - t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t78, -t98, -t61, -t62, t47, t24, t71, t72, 0, -t61 * t96 - t104, t61 * t91 - t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, t97, 0, 0, 0, t91 * t128 (-t85 + t88) * t92, -t139, -t127, 0, pkin(6) * t139, pkin(6) * t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t85, 0.2e1 * t140, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, -t12, t27, t3, -t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t54, t78, t18, -t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t54, t78, t29, -t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, -t141, -t97, -pkin(6) * t128, pkin(6) * t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t96, 0, -t91 * pkin(6), -t96 * pkin(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t2;
