% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 13:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR9_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 13:23:31
% EndTime: 2019-05-07 13:24:00
% DurationCPUTime: 29.95s
% Computational Cost: add. (390301->415), mult. (1025825->674), div. (0->0), fcn. (877634->16), ass. (0->366)
t3095 = cos(qJ(2));
t3083 = sin(pkin(6));
t3090 = sin(qJ(2));
t3159 = t3083 * t3090;
t3150 = qJD(1) * t3159;
t3151 = qJDD(1) * t3083;
t3056 = -qJD(2) * t3150 + t3095 * t3151;
t3086 = cos(pkin(6));
t3074 = t3086 * qJDD(1) + qJDD(2);
t3082 = sin(pkin(7));
t3085 = cos(pkin(7));
t3147 = t3082 * t3056 - t3085 * t3074 - qJDD(3);
t3075 = qJD(1) * t3086 + qJD(2);
t3089 = sin(qJ(3));
t3094 = cos(qJ(3));
t3158 = t3083 * t3095;
t3149 = qJD(1) * t3158;
t3140 = t3085 * t3149;
t3160 = t3082 * t3094;
t3025 = -t3075 * t3160 + t3089 * t3150 - t3094 * t3140;
t3157 = t3085 * t3089;
t3161 = t3082 * t3089;
t3171 = qJD(1) * t3083;
t3027 = t3075 * t3161 + (t3090 * t3094 + t3095 * t3157) * t3171;
t3165 = t3025 * t3027;
t2991 = -t3147 - t3165;
t3081 = sin(pkin(13));
t3084 = cos(pkin(13));
t3013 = -t3025 * t3081 + t3027 * t3084;
t3043 = -t3085 * t3075 + t3082 * t3149 - qJD(3);
t3088 = sin(qJ(5));
t3093 = cos(qJ(5));
t2987 = t3013 * t3088 + t3093 * t3043;
t2984 = qJD(6) + t2987;
t3188 = qJD(6) + t2984;
t3055 = qJD(2) * t3149 + t3090 * t3151;
t3156 = t3085 * t3094;
t3139 = t3089 * t3055 - t3056 * t3156 - t3074 * t3160;
t2997 = -qJD(3) * t3027 - t3139;
t2998 = -t3025 * qJD(3) + t3094 * t3055 + t3056 * t3157 + t3074 * t3161;
t2961 = t3081 * t2997 + t3084 * t2998;
t3011 = t3084 * t3025 + t3027 * t3081;
t3167 = t3011 * t3043;
t2949 = t2961 + t3167;
t2989 = t3013 * t3093 - t3043 * t3088;
t3008 = qJD(5) + t3011;
t3087 = sin(qJ(6));
t3092 = cos(qJ(6));
t2958 = t2989 * t3087 - t3092 * t3008;
t3187 = t2958 ^ 2;
t2960 = t2989 * t3092 + t3008 * t3087;
t3186 = t2960 ^ 2;
t3185 = t2984 ^ 2;
t3184 = t2987 ^ 2;
t3183 = t2989 ^ 2;
t3182 = t3008 ^ 2;
t3181 = t3011 ^ 2;
t3180 = t3013 ^ 2;
t3023 = t3025 ^ 2;
t3179 = t3027 ^ 2;
t3178 = t3043 ^ 2;
t3177 = t3075 ^ 2;
t3176 = -2 * qJD(4);
t3175 = pkin(10) * t3082;
t3174 = pkin(10) * t3085;
t3173 = t3086 * g(3);
t3172 = qJD(1) * (-pkin(2) * t3095 - t3090 * t3175) * t3171;
t3170 = t2958 * t2960;
t3169 = t2987 * t2989;
t3168 = t3011 * t3013;
t3166 = t3013 * t3043;
t3164 = t3025 * t3043;
t3091 = sin(qJ(1));
t3096 = cos(qJ(1));
t3069 = t3091 * g(1) - g(2) * t3096;
t3097 = qJD(1) ^ 2;
t3051 = pkin(9) * t3083 * t3097 + qJDD(1) * pkin(1) + t3069;
t3163 = t3051 * t3086;
t3162 = t3083 ^ 2 * t3097;
t3155 = qJD(5) - t3008;
t3154 = qJD(6) - t2984;
t3040 = (t3075 * t3082 + t3140) * pkin(10);
t3070 = -g(1) * t3096 - g(2) * t3091;
t3052 = -pkin(1) * t3097 + pkin(9) * t3151 + t3070;
t3142 = -t3090 * t3052 + t3095 * t3163;
t2977 = -t3055 * t3174 + t3074 * pkin(2) + t3075 * t3040 + (-g(3) * t3095 - t3090 * t3172) * t3083 + t3142;
t3048 = pkin(2) * t3075 - t3150 * t3174;
t3152 = t3095 * t3052 + t3090 * t3163;
t2978 = -t3075 * t3048 + (-g(3) * t3090 + t3095 * t3172) * t3083 + (t3056 * t3085 + t3074 * t3082) * pkin(10) + t3152;
t2983 = -t3055 * t3175 - t3056 * pkin(2) - t3173 + (-t3051 + (-t3040 * t3095 + t3048 * t3090) * qJD(1)) * t3083;
t2933 = t2977 * t3157 + t3094 * t2978 + t2983 * t3161;
t3015 = -pkin(3) * t3043 - qJ(4) * t3027;
t2915 = -pkin(3) * t3023 + qJ(4) * t2997 + t3015 * t3043 + t2933;
t2932 = t2977 * t3156 - t3089 * t2978 + t2983 * t3160;
t2971 = -t2998 + t3164;
t3099 = pkin(3) * t2991 + t2971 * qJ(4) + t2932;
t2872 = t3084 * t2915 + t3011 * t3176 + t3081 * t3099;
t2967 = pkin(4) * t3011 - pkin(11) * t3013;
t2865 = -pkin(4) * t3178 - pkin(11) * t3147 - t2967 * t3011 + t2872;
t2952 = -t3082 * t2977 + t3085 * t2983;
t2926 = -t2997 * pkin(3) - t3023 * qJ(4) + t3027 * t3015 + qJDD(4) + t2952;
t3153 = -t3084 * t2997 + t3081 * t2998;
t2947 = t3153 - t3166;
t3098 = t2947 * pkin(4) - pkin(11) * t2949 + t2926;
t2844 = t3093 * t2865 + t3088 * t3098;
t3148 = qJDD(5) + t3153;
t2843 = -t2865 * t3088 + t3093 * t3098;
t3146 = t3081 * t2915 - t3084 * t3099;
t3109 = -t3093 * t2961 + t3088 * t3147;
t2940 = -qJD(5) * t2987 - t3109;
t3145 = -t3087 * t2940 + t3092 * t3148;
t3144 = t3008 * t2987 - t2940;
t3143 = t3088 * t2961 + t3093 * t3147;
t3141 = t3075 * t3149;
t2954 = pkin(5) * t2987 - pkin(12) * t2989;
t2831 = -pkin(5) * t3182 + pkin(12) * t3148 - t2987 * t2954 + t2844;
t2864 = t3147 * pkin(4) - t3178 * pkin(11) + ((2 * qJD(4)) + t2967) * t3013 + t3146;
t2921 = (qJD(5) + t3008) * t2989 + t3143;
t2847 = pkin(5) * t2921 + pkin(12) * t3144 + t2864;
t2813 = -t2831 * t3087 + t2847 * t3092;
t2814 = t2831 * t3092 + t2847 * t3087;
t2795 = -t2813 * t3087 + t2814 * t3092;
t2830 = -pkin(5) * t3148 - pkin(12) * t3182 + t2954 * t2989 - t2843;
t2789 = t2795 * t3088 - t2830 * t3093;
t2790 = t2795 * t3093 + t2830 * t3088;
t2794 = t2813 * t3092 + t2814 * t3087;
t2776 = t2790 * t3081 - t2794 * t3084;
t2777 = t2790 * t3084 + t2794 * t3081;
t3137 = t2776 * t3094 + t2777 * t3089;
t2769 = -t3082 * t2789 + t3085 * t3137;
t2770 = -t2776 * t3089 + t2777 * t3094;
t3138 = t2769 * t3095 + t2770 * t3090;
t2819 = t2843 * t3093 + t2844 * t3088;
t2820 = -t2843 * t3088 + t2844 * t3093;
t2808 = t2820 * t3081 - t2864 * t3084;
t2809 = t2820 * t3084 + t2864 * t3081;
t3132 = t2808 * t3094 + t2809 * t3089;
t2784 = -t3082 * t2819 + t3085 * t3132;
t2791 = -t2808 * t3089 + t2809 * t3094;
t3136 = t2784 * t3095 + t2791 * t3090;
t2893 = -t2960 * t3154 + t3145;
t3100 = -t3092 * t2940 - t3087 * t3148;
t2895 = t2958 * t3154 + t3100;
t2860 = t2893 * t3092 - t2895 * t3087;
t2918 = -t3186 - t3187;
t2848 = t2860 * t3088 - t2918 * t3093;
t2849 = t2860 * t3093 + t2918 * t3088;
t2859 = t2893 * t3087 + t2895 * t3092;
t2822 = t2849 * t3081 - t2859 * t3084;
t2823 = t2849 * t3084 + t2859 * t3081;
t3130 = t2822 * t3094 + t2823 * t3089;
t2793 = -t3082 * t2848 + t3085 * t3130;
t2799 = -t2822 * t3089 + t2823 * t3094;
t3135 = t2793 * t3095 + t2799 * t3090;
t3101 = -qJD(5) * t2989 - qJDD(6) - t3143;
t2905 = -t3101 - t3170;
t2925 = -t3185 - t3187;
t2876 = -t2905 * t3087 + t2925 * t3092;
t2892 = t2960 * t3188 - t3145;
t2855 = t2876 * t3088 - t2892 * t3093;
t2856 = t2876 * t3093 + t2892 * t3088;
t2875 = t2905 * t3092 + t2925 * t3087;
t2828 = t2856 * t3081 - t2875 * t3084;
t2829 = t2856 * t3084 + t2875 * t3081;
t3128 = t2828 * t3094 + t2829 * t3089;
t2801 = -t3082 * t2855 + t3085 * t3128;
t2810 = -t2828 * t3089 + t2829 * t3094;
t3134 = t2801 * t3095 + t2810 * t3090;
t2906 = t3101 - t3170;
t2929 = -t3185 - t3186;
t2883 = t2906 * t3092 - t2929 * t3087;
t2894 = -t2958 * t3188 - t3100;
t2857 = t2883 * t3088 - t2894 * t3093;
t2858 = t2883 * t3093 + t2894 * t3088;
t2882 = t2906 * t3087 + t2929 * t3092;
t2832 = t2858 * t3081 - t2882 * t3084;
t2833 = t2858 * t3084 + t2882 * t3081;
t3127 = t2832 * t3094 + t2833 * t3089;
t2805 = -t3082 * t2857 + t3085 * t3127;
t2811 = -t2832 * t3089 + t2833 * t3094;
t3133 = t2805 * t3095 + t2811 * t3090;
t2871 = t3013 * t3176 - t3146;
t2845 = t2871 * t3084 + t2872 * t3081;
t2846 = -t2871 * t3081 + t2872 * t3084;
t3124 = t2845 * t3094 + t2846 * t3089;
t2816 = -t3082 * t2926 + t3085 * t3124;
t2821 = -t2845 * t3089 + t2846 * t3094;
t3131 = t2816 * t3095 + t2821 * t3090;
t2922 = -t2989 * t3155 - t3143;
t2924 = t2987 * t3155 + t3109;
t2890 = t2922 * t3088 + t2924 * t3093;
t2891 = t2922 * t3093 - t2924 * t3088;
t2941 = -t3183 - t3184;
t2869 = t2891 * t3081 - t2941 * t3084;
t2870 = t2891 * t3084 + t2941 * t3081;
t3122 = t2869 * t3094 + t2870 * t3089;
t2827 = -t3082 * t2890 + t3085 * t3122;
t2842 = -t2869 * t3089 + t2870 * t3094;
t3129 = t2827 * t3095 + t2842 * t3090;
t2930 = t3148 - t3169;
t2946 = -t3182 - t3184;
t2907 = t2930 * t3093 + t2946 * t3088;
t2908 = -t2930 * t3088 + t2946 * t3093;
t2873 = t2908 * t3081 - t2921 * t3084;
t2874 = t2908 * t3084 + t2921 * t3081;
t3121 = t2873 * t3094 + t2874 * t3089;
t2835 = -t3082 * t2907 + t3085 * t3121;
t2853 = -t2873 * t3089 + t2874 * t3094;
t3126 = t2835 * t3095 + t2853 * t3090;
t2931 = -t3148 - t3169;
t2951 = -t3182 - t3183;
t2909 = t2931 * t3088 + t2951 * t3093;
t2910 = t2931 * t3093 - t2951 * t3088;
t2877 = t2910 * t3081 + t3084 * t3144;
t2878 = t2910 * t3084 - t3081 * t3144;
t3120 = t2877 * t3094 + t2878 * t3089;
t2837 = -t3082 * t2909 + t3085 * t3120;
t2854 = -t2877 * t3089 + t2878 * t3094;
t3125 = t2837 * t3095 + t2854 * t3090;
t2953 = -t3180 - t3181;
t2948 = -t3153 - t3166;
t2950 = -t2961 + t3167;
t2916 = t2948 * t3081 + t2950 * t3084;
t2917 = t2948 * t3084 - t2950 * t3081;
t3116 = t2916 * t3094 + t2917 * t3089;
t2868 = -t3082 * t2953 + t3085 * t3116;
t2879 = -t2916 * t3089 + t2917 * t3094;
t3123 = t2868 * t3095 + t2879 * t3090;
t3114 = t2932 * t3094 + t2933 * t3089;
t2885 = -t3082 * t2952 + t3085 * t3114;
t2902 = -t2932 * t3089 + t2933 * t3094;
t3119 = t2885 * t3095 + t2902 * t3090;
t2964 = -t3147 - t3168;
t2966 = -t3178 - t3181;
t2934 = t2964 * t3084 + t2966 * t3081;
t2935 = -t2964 * t3081 + t2966 * t3084;
t3113 = t2934 * t3094 + t2935 * t3089;
t2889 = -t3082 * t2947 + t3085 * t3113;
t2903 = -t2934 * t3089 + t2935 * t3094;
t3118 = t2889 * t3095 + t2903 * t3090;
t2963 = t3147 - t3168;
t2981 = -t3178 - t3180;
t2942 = t2963 * t3081 + t2981 * t3084;
t2943 = t2963 * t3084 - t2981 * t3081;
t3110 = t2942 * t3094 + t2943 * t3089;
t2897 = -t3082 * t2949 + t3085 * t3110;
t2913 = -t2942 * t3089 + t2943 * t3094;
t3117 = t2897 * t3095 + t2913 * t3090;
t2985 = -t3023 - t3179;
t2969 = (-qJD(3) - t3043) * t3027 - t3139;
t3108 = t2969 * t3089 + t2971 * t3094;
t2928 = -t3082 * t2985 + t3085 * t3108;
t2944 = t2969 * t3094 - t2971 * t3089;
t3115 = t2928 * t3095 + t2944 * t3090;
t2968 = (qJD(3) - t3043) * t3027 + t3139;
t2996 = -t3178 - t3023;
t3106 = t2991 * t3094 + t2996 * t3089;
t2937 = -t3082 * t2968 + t3085 * t3106;
t2955 = -t2991 * t3089 + t2996 * t3094;
t3112 = t2937 * t3095 + t2955 * t3090;
t2970 = t2998 + t3164;
t2990 = t3147 - t3165;
t3004 = -t3178 - t3179;
t3107 = t2990 * t3089 + t3004 * t3094;
t2939 = -t3082 * t2970 + t3085 * t3107;
t2962 = t2990 * t3094 - t3004 * t3089;
t3111 = t2939 * t3095 + t2962 * t3090;
t3016 = -g(3) * t3158 + t3142;
t3017 = -g(3) * t3159 + t3152;
t3105 = t3016 * t3095 + t3017 * t3090;
t3031 = t3141 - t3055;
t3059 = t3075 * t3150;
t3032 = t3056 + t3059;
t3104 = t3031 * t3095 + t3032 * t3090;
t3079 = t3090 ^ 2;
t3045 = -t3079 * t3162 - t3177;
t3068 = t3095 * t3090 * t3162;
t3054 = t3068 - t3074;
t3103 = t3045 * t3095 + t3054 * t3090;
t3053 = t3068 + t3074;
t3080 = t3095 ^ 2;
t3057 = -t3080 * t3162 - t3177;
t3102 = t3053 * t3095 + t3057 * t3090;
t3067 = -qJDD(1) * t3091 - t3096 * t3097;
t3066 = qJDD(1) * t3096 - t3091 * t3097;
t3058 = (-t3079 - t3080) * t3162;
t3034 = -t3083 * t3051 - t3173;
t3033 = -t3056 + t3059;
t3030 = t3141 + t3055;
t3020 = -t3053 * t3090 + t3057 * t3095;
t3018 = -t3045 * t3090 + t3054 * t3095;
t3014 = -t3031 * t3090 + t3032 * t3095;
t3010 = -t3083 * t3033 + t3086 * t3102;
t3009 = t3086 * t3033 + t3083 * t3102;
t3002 = -t3083 * t3030 + t3086 * t3103;
t3001 = t3086 * t3030 + t3083 * t3103;
t3000 = -t3083 * t3058 + t3086 * t3104;
t2999 = t3086 * t3058 + t3083 * t3104;
t2986 = -t3016 * t3090 + t3017 * t3095;
t2973 = -t3083 * t3034 + t3086 * t3105;
t2972 = t3086 * t3034 + t3083 * t3105;
t2938 = t3085 * t2970 + t3082 * t3107;
t2936 = t3085 * t2968 + t3082 * t3106;
t2927 = t3085 * t2985 + t3082 * t3108;
t2920 = -t2939 * t3090 + t2962 * t3095;
t2919 = -t2937 * t3090 + t2955 * t3095;
t2904 = -t2928 * t3090 + t2944 * t3095;
t2901 = -t3083 * t2938 + t3086 * t3111;
t2900 = t3086 * t2938 + t3083 * t3111;
t2899 = -t3083 * t2936 + t3086 * t3112;
t2898 = t3086 * t2936 + t3083 * t3112;
t2896 = t3085 * t2949 + t3082 * t3110;
t2888 = t3085 * t2947 + t3082 * t3113;
t2884 = t3085 * t2952 + t3082 * t3114;
t2881 = -t3083 * t2927 + t3086 * t3115;
t2880 = t3086 * t2927 + t3083 * t3115;
t2867 = t3085 * t2953 + t3082 * t3116;
t2866 = -t2897 * t3090 + t2913 * t3095;
t2862 = -t2889 * t3090 + t2903 * t3095;
t2861 = -t2885 * t3090 + t2902 * t3095;
t2852 = -t3083 * t2896 + t3086 * t3117;
t2851 = t3086 * t2896 + t3083 * t3117;
t2850 = -t2868 * t3090 + t2879 * t3095;
t2841 = -t3083 * t2888 + t3086 * t3118;
t2840 = t3086 * t2888 + t3083 * t3118;
t2839 = -t3083 * t2884 + t3086 * t3119;
t2838 = t3086 * t2884 + t3083 * t3119;
t2836 = t3085 * t2909 + t3082 * t3120;
t2834 = t3085 * t2907 + t3082 * t3121;
t2826 = t3085 * t2890 + t3082 * t3122;
t2825 = -t3083 * t2867 + t3086 * t3123;
t2824 = t3086 * t2867 + t3083 * t3123;
t2818 = -t2837 * t3090 + t2854 * t3095;
t2817 = -t2835 * t3090 + t2853 * t3095;
t2815 = t3085 * t2926 + t3082 * t3124;
t2812 = -t2827 * t3090 + t2842 * t3095;
t2807 = -t3083 * t2836 + t3086 * t3125;
t2806 = t3086 * t2836 + t3083 * t3125;
t2804 = t3085 * t2857 + t3082 * t3127;
t2803 = -t3083 * t2834 + t3086 * t3126;
t2802 = t3086 * t2834 + t3083 * t3126;
t2800 = t3085 * t2855 + t3082 * t3128;
t2798 = -t3083 * t2826 + t3086 * t3129;
t2797 = t3086 * t2826 + t3083 * t3129;
t2796 = -t2816 * t3090 + t2821 * t3095;
t2792 = t3085 * t2848 + t3082 * t3130;
t2788 = -t2805 * t3090 + t2811 * t3095;
t2787 = -t2801 * t3090 + t2810 * t3095;
t2786 = -t3083 * t2815 + t3086 * t3131;
t2785 = t3086 * t2815 + t3083 * t3131;
t2783 = t3085 * t2819 + t3082 * t3132;
t2782 = -t2793 * t3090 + t2799 * t3095;
t2781 = -t3083 * t2804 + t3086 * t3133;
t2780 = t3086 * t2804 + t3083 * t3133;
t2779 = -t3083 * t2800 + t3086 * t3134;
t2778 = t3086 * t2800 + t3083 * t3134;
t2775 = -t3083 * t2792 + t3086 * t3135;
t2774 = t3086 * t2792 + t3083 * t3135;
t2773 = -t2784 * t3090 + t2791 * t3095;
t2772 = -t3083 * t2783 + t3086 * t3136;
t2771 = t3086 * t2783 + t3083 * t3136;
t2768 = t3085 * t2789 + t3082 * t3137;
t2767 = -t2769 * t3090 + t2770 * t3095;
t2766 = -t3083 * t2768 + t3086 * t3138;
t2765 = t3086 * t2768 + t3083 * t3138;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3067, -t3066, 0, -t3069 * t3091 + t3070 * t3096, 0, 0, 0, 0, 0, 0, -t3010 * t3091 + t3020 * t3096, -t3002 * t3091 + t3018 * t3096, -t3000 * t3091 + t3014 * t3096, -t2973 * t3091 + t2986 * t3096, 0, 0, 0, 0, 0, 0, -t2899 * t3091 + t2919 * t3096, -t2901 * t3091 + t2920 * t3096, -t2881 * t3091 + t2904 * t3096, -t2839 * t3091 + t2861 * t3096, 0, 0, 0, 0, 0, 0, -t2841 * t3091 + t2862 * t3096, -t2852 * t3091 + t2866 * t3096, -t2825 * t3091 + t2850 * t3096, -t2786 * t3091 + t2796 * t3096, 0, 0, 0, 0, 0, 0, -t2803 * t3091 + t2817 * t3096, -t2807 * t3091 + t2818 * t3096, -t2798 * t3091 + t2812 * t3096, -t2772 * t3091 + t2773 * t3096, 0, 0, 0, 0, 0, 0, -t2779 * t3091 + t2787 * t3096, -t2781 * t3091 + t2788 * t3096, -t2775 * t3091 + t2782 * t3096, -t2766 * t3091 + t2767 * t3096; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3066, t3067, 0, t3069 * t3096 + t3070 * t3091, 0, 0, 0, 0, 0, 0, t3010 * t3096 + t3020 * t3091, t3002 * t3096 + t3018 * t3091, t3000 * t3096 + t3014 * t3091, t2973 * t3096 + t2986 * t3091, 0, 0, 0, 0, 0, 0, t2899 * t3096 + t2919 * t3091, t2901 * t3096 + t2920 * t3091, t2881 * t3096 + t2904 * t3091, t2839 * t3096 + t2861 * t3091, 0, 0, 0, 0, 0, 0, t2841 * t3096 + t2862 * t3091, t2852 * t3096 + t2866 * t3091, t2825 * t3096 + t2850 * t3091, t2786 * t3096 + t2796 * t3091, 0, 0, 0, 0, 0, 0, t2803 * t3096 + t2817 * t3091, t2807 * t3096 + t2818 * t3091, t2798 * t3096 + t2812 * t3091, t2772 * t3096 + t2773 * t3091, 0, 0, 0, 0, 0, 0, t2779 * t3096 + t2787 * t3091, t2781 * t3096 + t2788 * t3091, t2775 * t3096 + t2782 * t3091, t2766 * t3096 + t2767 * t3091; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3009, t3001, t2999, t2972, 0, 0, 0, 0, 0, 0, t2898, t2900, t2880, t2838, 0, 0, 0, 0, 0, 0, t2840, t2851, t2824, t2785, 0, 0, 0, 0, 0, 0, t2802, t2806, t2797, t2771, 0, 0, 0, 0, 0, 0, t2778, t2780, t2774, t2765; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3097, -qJDD(1), 0, t3070, 0, 0, 0, 0, 0, 0, t3020, t3018, t3014, t2986, 0, 0, 0, 0, 0, 0, t2919, t2920, t2904, t2861, 0, 0, 0, 0, 0, 0, t2862, t2866, t2850, t2796, 0, 0, 0, 0, 0, 0, t2817, t2818, t2812, t2773, 0, 0, 0, 0, 0, 0, t2787, t2788, t2782, t2767; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3097, 0, t3069, 0, 0, 0, 0, 0, 0, t3010, t3002, t3000, t2973, 0, 0, 0, 0, 0, 0, t2899, t2901, t2881, t2839, 0, 0, 0, 0, 0, 0, t2841, t2852, t2825, t2786, 0, 0, 0, 0, 0, 0, t2803, t2807, t2798, t2772, 0, 0, 0, 0, 0, 0, t2779, t2781, t2775, t2766; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3009, t3001, t2999, t2972, 0, 0, 0, 0, 0, 0, t2898, t2900, t2880, t2838, 0, 0, 0, 0, 0, 0, t2840, t2851, t2824, t2785, 0, 0, 0, 0, 0, 0, t2802, t2806, t2797, t2771, 0, 0, 0, 0, 0, 0, t2778, t2780, t2774, t2765; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3057, t3054, t3032, t3017, 0, 0, 0, 0, 0, 0, t2955, t2962, t2944, t2902, 0, 0, 0, 0, 0, 0, t2903, t2913, t2879, t2821, 0, 0, 0, 0, 0, 0, t2853, t2854, t2842, t2791, 0, 0, 0, 0, 0, 0, t2810, t2811, t2799, t2770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3053, t3045, t3031, t3016, 0, 0, 0, 0, 0, 0, t2937, t2939, t2928, t2885, 0, 0, 0, 0, 0, 0, t2889, t2897, t2868, t2816, 0, 0, 0, 0, 0, 0, t2835, t2837, t2827, t2784, 0, 0, 0, 0, 0, 0, t2801, t2805, t2793, t2769; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3033, t3030, t3058, t3034, 0, 0, 0, 0, 0, 0, t2936, t2938, t2927, t2884, 0, 0, 0, 0, 0, 0, t2888, t2896, t2867, t2815, 0, 0, 0, 0, 0, 0, t2834, t2836, t2826, t2783, 0, 0, 0, 0, 0, 0, t2800, t2804, t2792, t2768; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2996, t2990, t2969, t2933, 0, 0, 0, 0, 0, 0, t2935, t2943, t2917, t2846, 0, 0, 0, 0, 0, 0, t2874, t2878, t2870, t2809, 0, 0, 0, 0, 0, 0, t2829, t2833, t2823, t2777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2991, t3004, t2971, t2932, 0, 0, 0, 0, 0, 0, t2934, t2942, t2916, t2845, 0, 0, 0, 0, 0, 0, t2873, t2877, t2869, t2808, 0, 0, 0, 0, 0, 0, t2828, t2832, t2822, t2776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2968, t2970, t2985, t2952, 0, 0, 0, 0, 0, 0, t2947, t2949, t2953, t2926, 0, 0, 0, 0, 0, 0, t2907, t2909, t2890, t2819, 0, 0, 0, 0, 0, 0, t2855, t2857, t2848, t2789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2966, t2963, t2948, t2872, 0, 0, 0, 0, 0, 0, t2908, t2910, t2891, t2820, 0, 0, 0, 0, 0, 0, t2856, t2858, t2849, t2790; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2964, t2981, t2950, t2871, 0, 0, 0, 0, 0, 0, -t2921, t3144, -t2941, -t2864, 0, 0, 0, 0, 0, 0, -t2875, -t2882, -t2859, -t2794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2947, t2949, t2953, t2926, 0, 0, 0, 0, 0, 0, t2907, t2909, t2890, t2819, 0, 0, 0, 0, 0, 0, t2855, t2857, t2848, t2789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2946, t2931, t2922, t2844, 0, 0, 0, 0, 0, 0, t2876, t2883, t2860, t2795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2930, t2951, t2924, t2843, 0, 0, 0, 0, 0, 0, -t2892, -t2894, -t2918, -t2830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2921, -t3144, t2941, t2864, 0, 0, 0, 0, 0, 0, t2875, t2882, t2859, t2794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2925, t2906, t2893, t2814; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2905, t2929, t2895, t2813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2892, t2894, t2918, t2830;];
f_new_reg  = t1;
