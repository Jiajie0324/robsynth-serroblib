% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPRR9
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPRR9_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 12:08
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPRR9_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR9_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR9_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPRR9_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR9_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:07
	% EndTime: 2019-10-10 12:08:07
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:07
	% EndTime: 2019-10-10 12:08:07
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:07
	% EndTime: 2019-10-10 12:08:08
	% DurationCPUTime: 0.40s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:08
	% EndTime: 2019-10-10 12:08:09
	% DurationCPUTime: 1.24s
	% Computational Cost: add. (2555->103), mult. (7918->233), div. (442->12), fcn. (10062->13), ass. (0->106)
	t218 = sin(pkin(6));
	t219 = cos(pkin(7));
	t220 = cos(pkin(6));
	t217 = sin(pkin(7));
	t225 = cos(qJ(2));
	t268 = t217 * t225;
	t206 = -t218 * t268 + t220 * t219;
	t203 = 0.1e1 / t206;
	t222 = sin(qJ(2));
	t226 = cos(qJ(1));
	t260 = t226 * t222;
	t223 = sin(qJ(1));
	t261 = t223 * t225;
	t238 = t220 * t260 + t261;
	t267 = t218 * t222;
	t204 = 0.1e1 / t206 ^ 2;
	t259 = t226 * t225;
	t262 = t223 * t222;
	t207 = -t220 * t259 + t262;
	t265 = t218 * t226;
	t242 = -t207 * t217 + t219 * t265;
	t272 = t242 * t204;
	t284 = t217 * (t203 * t238 + t267 * t272);
	t189 = atan2(t242, t206);
	t184 = sin(t189);
	t185 = cos(t189);
	t170 = t184 * t242 + t185 * t206;
	t167 = 0.1e1 / t170;
	t221 = sin(qJ(3));
	t224 = cos(qJ(3));
	t237 = t220 * t262 - t259;
	t239 = t220 * t261 + t260;
	t266 = t218 * t223;
	t252 = t217 * t266;
	t240 = -t219 * t239 + t252;
	t181 = t221 * t240 - t224 * t237;
	t175 = 0.1e1 / t181;
	t168 = 0.1e1 / t170 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t200 = -t217 * t239 - t219 * t266;
	t197 = t200 ^ 2;
	t163 = t197 * t168 + 0.1e1;
	t192 = qJD(1) * t207 + qJD(2) * t237;
	t258 = qJD(1) * t218;
	t249 = t226 * t258;
	t182 = t192 * t217 - t219 * t249;
	t276 = t182 * t168;
	t196 = t242 ^ 2;
	t188 = t196 * t204 + 0.1e1;
	t186 = 0.1e1 / t188;
	t194 = qJD(1) * t239 + qJD(2) * t238;
	t250 = t223 * t258;
	t183 = -t194 * t217 - t219 * t250;
	t257 = qJD(2) * t218;
	t269 = t217 * t222;
	t245 = t257 * t269;
	t244 = t204 * t245;
	t233 = t183 * t203 - t242 * t244;
	t159 = t233 * t186;
	t243 = -t184 * t206 + t185 * t242;
	t155 = t159 * t243 + t184 * t183 + t185 * t245;
	t282 = t155 * t167 * t168;
	t283 = (-t197 * t282 + t200 * t276) / t163 ^ 2;
	t193 = qJD(1) * t238 + qJD(2) * t239;
	t235 = t192 * t219 + t217 * t249;
	t165 = qJD(3) * t181 - t193 * t221 - t224 * t235;
	t263 = t219 * t224;
	t270 = t237 * t221;
	t180 = -t224 * t252 + t239 * t263 - t270;
	t174 = t180 ^ 2;
	t173 = t174 * t176 + 0.1e1;
	t277 = t176 * t180;
	t166 = -t193 * t224 + t235 * t221 + (t224 * t240 + t270) * qJD(3);
	t279 = t166 * t175 * t176;
	t281 = (t165 * t277 - t174 * t279) / t173 ^ 2;
	t205 = t203 * t204;
	t280 = (-t196 * t205 * t245 + t183 * t272) / t188 ^ 2;
	t278 = t168 * t200;
	t275 = t184 * t200;
	t274 = t185 * t200;
	t273 = t242 * t203;
	t271 = t238 * t221;
	t264 = t219 * t221;
	t256 = -0.2e1 * t283;
	t255 = -0.2e1 * t282;
	t254 = 0.2e1 * t281;
	t253 = 0.2e1 * t280;
	t251 = t217 * t265;
	t248 = -0.2e1 * t203 * t280;
	t247 = 0.2e1 * t180 * t279;
	t246 = t217 * t250;
	t241 = t207 * t219 + t251;
	t190 = -t221 * t239 - t237 * t263;
	t191 = -t224 * t239 + t237 * t264;
	t234 = t184 + (t185 * t273 - t184) * t186;
	t179 = t221 * t241 - t224 * t238;
	t216 = t217 ^ 2;
	t195 = qJD(1) * t237 + qJD(2) * t207;
	t178 = -t224 * t241 - t271;
	t171 = 0.1e1 / t173;
	t161 = 0.1e1 / t163;
	t160 = t186 * t284;
	t158 = t234 * t200;
	t156 = (-t184 * t238 + t185 * t267) * t217 - t243 * t160;
	t154 = t253 * t284 + (t195 * t203 * t217 + (-t183 * t204 * t269 + (t204 * t238 * t216 * t222 + (0.2e1 * t205 * t216 * t218 * t222 ^ 2 - t204 * t268) * t242) * qJD(2)) * t218) * t186;
	t1 = [t200 * t248 + (t182 * t203 - t200 * t244) * t186, t154, 0, 0, 0, 0; t242 * t167 * t256 + (t183 * t167 + (-t155 * t242 + t158 * t182) * t168) * t161 + ((t158 * t255 + t234 * t276) * t161 + (t158 * t256 + ((-t159 * t186 * t273 + t253) * t275 + (t242 * t248 + t159 + (-t159 + t233) * t186) * t274) * t161) * t168) * t200, 0.2e1 * (t167 * t217 * t237 - t156 * t278) * t283 + ((t243 * t154 - (-t159 * t170 + t183 * t185) * t160) * t278 + (t200 * t255 + t276) * t156 + (-t193 * t167 + (t237 * t155 + (-t159 * t238 + t225 * t257) * t274 + (t195 + (qJD(2) * t160 - t159) * t267) * t275) * t168) * t217) * t161, 0, 0, 0, 0; (-t175 * t178 + t179 * t277) * t254 + ((-t194 * t263 + t195 * t221 + t224 * t246) * t175 + t179 * t247 + (-t178 * t166 - (t194 * t264 + t195 * t224 - t221 * t246) * t180 - t179 * t165) * t176 + (t179 * t175 - (t207 * t263 + t224 * t251 + t271) * t277) * qJD(3)) * t171, (-t175 * t190 + t191 * t277) * t254 + ((qJD(3) * t191 + t192 * t221 - t193 * t263) * t175 + t191 * t247 + (-t190 * t166 - (-qJD(3) * t190 + t192 * t224 + t193 * t264) * t180 - t191 * t165) * t176) * t171, -0.2e1 * t281 + 0.2e1 * (t165 * t176 * t171 + (-t171 * t279 - t176 * t281) * t180) * t180, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:08
	% EndTime: 2019-10-10 12:08:09
	% DurationCPUTime: 1.50s
	% Computational Cost: add. (3107->118), mult. (9489->259), div. (449->12), fcn. (12082->15), ass. (0->115)
	t241 = sin(pkin(13));
	t244 = cos(pkin(13));
	t246 = sin(qJ(3));
	t249 = cos(qJ(3));
	t231 = t241 * t246 - t249 * t244;
	t242 = sin(pkin(7));
	t217 = t231 * t242;
	t310 = cos(pkin(7));
	t276 = t249 * t310;
	t277 = t246 * t310;
	t219 = -t241 * t277 + t244 * t276;
	t245 = cos(pkin(6));
	t250 = cos(qJ(2));
	t251 = cos(qJ(1));
	t288 = t250 * t251;
	t247 = sin(qJ(2));
	t248 = sin(qJ(1));
	t291 = t248 * t247;
	t264 = t245 * t291 - t288;
	t290 = t248 * t250;
	t292 = t247 * t251;
	t266 = t245 * t290 + t292;
	t267 = t241 * t249 + t244 * t246;
	t243 = sin(pkin(6));
	t294 = t243 * t248;
	t190 = -t217 * t294 - t219 * t266 + t264 * t267;
	t183 = t190 ^ 2;
	t218 = t267 * t242;
	t258 = -t241 * t276 - t244 * t277;
	t260 = t218 * t294 + t231 * t264 + t258 * t266;
	t185 = 0.1e1 / t260 ^ 2;
	t312 = t183 * t185;
	t296 = t242 * t250;
	t224 = -t243 * t296 + t245 * t310;
	t221 = 0.1e1 / t224;
	t265 = t245 * t292 + t290;
	t295 = t243 * t247;
	t222 = 0.1e1 / t224 ^ 2;
	t227 = -t245 * t288 + t291;
	t278 = t243 * t310;
	t262 = -t227 * t242 + t251 * t278;
	t299 = t262 * t222;
	t311 = t242 * (t221 * t265 + t295 * t299);
	t202 = atan2(t262, t224);
	t197 = sin(t202);
	t198 = cos(t202);
	t182 = t197 * t262 + t198 * t224;
	t179 = 0.1e1 / t182;
	t184 = 0.1e1 / t260;
	t180 = 0.1e1 / t182 ^ 2;
	t211 = -t242 * t266 - t248 * t278;
	t208 = t211 ^ 2;
	t177 = t180 * t208 + 0.1e1;
	t203 = qJD(1) * t227 + qJD(2) * t264;
	t270 = qJD(1) * t278;
	t195 = t203 * t242 - t251 * t270;
	t303 = t195 * t180;
	t207 = t262 ^ 2;
	t201 = t207 * t222 + 0.1e1;
	t199 = 0.1e1 / t201;
	t205 = qJD(1) * t266 + qJD(2) * t265;
	t196 = -t205 * t242 - t248 * t270;
	t285 = qJD(2) * t243;
	t297 = t242 * t247;
	t273 = t285 * t297;
	t269 = t222 * t273;
	t259 = t196 * t221 - t262 * t269;
	t170 = t259 * t199;
	t268 = -t197 * t224 + t198 * t262;
	t165 = t170 * t268 + t197 * t196 + t198 * t273;
	t308 = t165 * t179 * t180;
	t309 = (-t208 * t308 + t211 * t303) / t177 ^ 2;
	t204 = qJD(1) * t265 + qJD(2) * t266;
	t213 = qJD(3) * t217;
	t215 = t219 * qJD(3);
	t226 = t267 * qJD(3);
	t286 = qJD(1) * t251;
	t169 = -t203 * t258 + t204 * t231 - t266 * t215 + t264 * t226 + (-t213 * t248 + t218 * t286) * t243;
	t186 = t184 * t185;
	t307 = t169 * t186;
	t223 = t221 * t222;
	t306 = (-t207 * t223 * t273 + t196 * t299) / t201 ^ 2;
	t305 = t180 * t211;
	t304 = t185 * t190;
	t302 = t197 * t211;
	t301 = t198 * t211;
	t300 = t262 * t221;
	t293 = t243 * t251;
	t287 = qJD(1) * t248;
	t283 = -0.2e1 * t309;
	t174 = 0.1e1 + t312;
	t214 = t242 * t226;
	t216 = t258 * qJD(3);
	t225 = t231 * qJD(3);
	t168 = t203 * t219 + t204 * t267 - t266 * t216 - t264 * t225 + (-t214 * t248 - t217 * t286) * t243;
	t279 = t168 * t304;
	t282 = 0.2e1 * (-t183 * t307 + t279) / t174 ^ 2;
	t281 = -0.2e1 * t308;
	t280 = 0.2e1 * t306;
	t275 = -0.2e1 * t190 * t307;
	t274 = -0.2e1 * t221 * t306;
	t261 = t197 + (t198 * t300 - t197) * t199;
	t240 = t242 ^ 2;
	t206 = qJD(1) * t264 + qJD(2) * t227;
	t194 = t231 * t266 - t258 * t264;
	t193 = -t219 * t264 - t266 * t267;
	t188 = t218 * t293 - t227 * t258 + t231 * t265;
	t187 = t217 * t293 - t227 * t219 - t265 * t267;
	t175 = 0.1e1 / t177;
	t172 = 0.1e1 / t174;
	t171 = t199 * t311;
	t167 = t261 * t211;
	t166 = (-t197 * t265 + t198 * t295) * t242 - t268 * t171;
	t163 = t280 * t311 + (t206 * t221 * t242 + (-t196 * t222 * t297 + (t222 * t265 * t240 * t247 + (0.2e1 * t223 * t240 * t243 * t247 ^ 2 - t222 * t296) * t262) * qJD(2)) * t243) * t199;
	t1 = [t211 * t274 + (t195 * t221 - t211 * t269) * t199, t163, 0, 0, 0, 0; t262 * t179 * t283 + (t196 * t179 + (-t165 * t262 + t167 * t195) * t180) * t175 + ((t167 * t281 + t261 * t303) * t175 + (t167 * t283 + ((-t170 * t199 * t300 + t280) * t302 + (t262 * t274 + t170 + (-t170 + t259) * t199) * t301) * t175) * t180) * t211, 0.2e1 * (t179 * t242 * t264 - t166 * t305) * t309 + ((t268 * t163 - (-t170 * t182 + t196 * t198) * t171) * t305 + (t211 * t281 + t303) * t166 + (-t204 * t179 + (t264 * t165 + (-t170 * t265 + t250 * t285) * t301 + (t206 + (qJD(2) * t171 - t170) * t295) * t302) * t180) * t242) * t175, 0, 0, 0, 0; (-t184 * t187 - t188 * t304) * t282 + ((-t205 * t219 + t206 * t267 - t227 * t216 + t265 * t225 + (t214 * t251 - t217 * t287) * t243) * t184 + t188 * t275 + (-t187 * t169 + (-t205 * t258 - t206 * t231 + t227 * t215 + t265 * t226 + (-t213 * t251 - t218 * t287) * t243) * t190 + t188 * t168) * t185) * t172, (-t184 * t193 - t194 * t304) * t282 + ((t203 * t267 - t204 * t219 - t216 * t264 + t225 * t266) * t184 + t194 * t275 + (-t193 * t169 + (-t203 * t231 - t204 * t258 + t215 * t264 + t226 * t266) * t190 + t194 * t168) * t185) * t172, (-t184 * t260 - t312) * t282 + (0.2e1 * t279 + (-0.2e1 * t183 * t186 - t185 * t260 + t184) * t169) * t172, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:08
	% EndTime: 2019-10-10 12:08:13
	% DurationCPUTime: 4.22s
	% Computational Cost: add. (13845->184), mult. (41275->341), div. (705->12), fcn. (52669->17), ass. (0->139)
	t364 = sin(pkin(13));
	t370 = sin(qJ(3));
	t447 = cos(pkin(13));
	t448 = cos(qJ(3));
	t391 = -t370 * t364 + t448 * t447;
	t454 = t391 * qJD(3);
	t392 = t448 * t364 + t370 * t447;
	t453 = qJD(3) * t392;
	t367 = cos(pkin(7));
	t345 = t391 * t367;
	t368 = cos(pkin(6));
	t374 = cos(qJ(2));
	t375 = cos(qJ(1));
	t421 = t375 * t374;
	t371 = sin(qJ(2));
	t372 = sin(qJ(1));
	t425 = t372 * t371;
	t349 = -t368 * t421 + t425;
	t422 = t375 * t371;
	t424 = t372 * t374;
	t350 = t368 * t422 + t424;
	t366 = sin(pkin(6));
	t365 = sin(pkin(7));
	t388 = t391 * t365;
	t386 = t366 * t388;
	t394 = -t349 * t345 - t350 * t392 - t375 * t386;
	t308 = t394 ^ 2;
	t449 = t374 * t345 - t371 * t392;
	t324 = -t449 * t366 - t368 * t388;
	t321 = 0.1e1 / t324 ^ 2;
	t295 = t308 * t321 + 0.1e1;
	t293 = 0.1e1 / t295;
	t396 = t368 * t424 + t422;
	t333 = t396 * qJD(1) + t350 * qJD(2);
	t413 = t368 * t425;
	t419 = qJD(2) * t371;
	t334 = -qJD(1) * t413 - t372 * t419 + (qJD(2) * t368 + qJD(1)) * t421;
	t343 = t367 * t453;
	t385 = t365 * t453;
	t383 = t366 * t385;
	t384 = qJD(1) * t386;
	t287 = -t333 * t345 - t334 * t392 + t349 * t343 - t350 * t454 + t372 * t384 + t375 * t383;
	t306 = t368 * t385 + ((qJD(2) * t392 + t343) * t374 + t345 * t419 + t371 * t454) * t366;
	t320 = 0.1e1 / t324;
	t433 = t394 * t321;
	t401 = t287 * t320 - t306 * t433;
	t268 = t401 * t293;
	t296 = atan2(t394, t324);
	t291 = sin(t296);
	t292 = cos(t296);
	t403 = -t291 * t324 + t292 * t394;
	t263 = t403 * t268 + t291 * t287 + t292 * t306;
	t278 = t291 * t394 + t292 * t324;
	t276 = 0.1e1 / t278 ^ 2;
	t452 = t263 * t276;
	t451 = t306 * t321;
	t275 = 0.1e1 / t278;
	t426 = t372 * t366;
	t337 = t365 * t396 + t367 * t426;
	t369 = sin(qJ(5));
	t373 = cos(qJ(5));
	t344 = t392 * t365;
	t346 = t392 * t367;
	t395 = t413 - t421;
	t389 = t344 * t426 - t346 * t396 - t391 * t395;
	t304 = t337 * t369 + t373 * t389;
	t298 = 0.1e1 / t304;
	t299 = 0.1e1 / t304 ^ 2;
	t317 = -t345 * t396 + t372 * t386 + t392 * t395;
	t309 = t317 ^ 2;
	t274 = t309 * t276 + 0.1e1;
	t331 = t349 * qJD(1) + t395 * qJD(2);
	t332 = t350 * qJD(1) + t396 * qJD(2);
	t284 = t331 * t345 + t332 * t392 + t343 * t396 - t372 * t383 + t375 * t384 + t395 * t454;
	t439 = t284 * t276;
	t445 = t275 * t452;
	t446 = (-t309 * t445 + t317 * t439) / t274 ^ 2;
	t341 = t454 * t365;
	t342 = t454 * t367;
	t420 = qJD(1) * t344;
	t285 = t331 * t346 - t332 * t391 - t396 * t342 + t395 * t453 + (t341 * t372 + t375 * t420) * t366;
	t411 = qJD(1) * t366 * t367;
	t328 = -t331 * t365 + t375 * t411;
	t279 = t304 * qJD(5) + t285 * t369 - t328 * t373;
	t303 = -t337 * t373 + t369 * t389;
	t297 = t303 ^ 2;
	t283 = t297 * t299 + 0.1e1;
	t436 = t299 * t303;
	t418 = qJD(5) * t303;
	t280 = t285 * t373 + t328 * t369 - t418;
	t440 = t280 * t298 * t299;
	t444 = (t279 * t436 - t297 * t440) / t283 ^ 2;
	t435 = t320 * t451;
	t442 = (t287 * t433 - t308 * t435) / t295 ^ 2;
	t441 = t276 * t317;
	t438 = t291 * t317;
	t437 = t292 * t317;
	t434 = t394 * t320;
	t432 = t365 * t369;
	t431 = t365 * t373;
	t429 = t366 * t375;
	t416 = 0.2e1 * t446;
	t415 = 0.2e1 * t444;
	t414 = 0.2e1 * t442;
	t408 = -0.2e1 * t320 * t442;
	t407 = 0.2e1 * t303 * t440;
	t406 = 0.2e1 * t394 * t435;
	t405 = -0.2e1 * t317 * t445;
	t336 = -t349 * t365 + t367 * t429;
	t390 = t344 * t429 + t349 * t346 - t350 * t391;
	t302 = t336 * t369 + t373 * t390;
	t301 = -t336 * t373 + t369 * t390;
	t400 = -t369 * t298 + t373 * t436;
	t323 = t368 * t344 + (t346 * t374 + t371 * t391) * t366;
	t399 = -t320 * t390 + t323 * t433;
	t325 = -t350 * t345 + t349 * t392;
	t330 = (t345 * t371 + t374 * t392) * t366;
	t398 = -t320 * t325 + t330 * t433;
	t327 = t346 * t395 - t391 * t396;
	t397 = -t327 * t369 - t395 * t431;
	t311 = t327 * t373 - t395 * t432;
	t393 = t291 + (t292 * t434 - t291) * t293;
	t382 = t333 * t346 - t334 * t391 + t349 * t342 + t350 * t453 + (t341 * t375 - t372 * t420) * t366;
	t329 = -t333 * t365 - t372 * t411;
	t326 = -t345 * t395 - t392 * t396;
	t307 = (t449 * qJD(2) - t343 * t371 + t374 * t454) * t366;
	t305 = t368 * t341 + (t342 * t374 - t453 * t371 + (-t346 * t371 + t374 * t391) * qJD(2)) * t366;
	t290 = t333 * t392 - t334 * t345 + t350 * t343 + t349 * t454;
	t289 = t331 * t391 + t332 * t346 + t342 * t395 + t396 * t453;
	t281 = 0.1e1 / t283;
	t272 = 0.1e1 / t274;
	t271 = t398 * t293;
	t269 = t399 * t293;
	t267 = t393 * t317;
	t265 = -t403 * t271 + t291 * t325 + t292 * t330;
	t264 = -t403 * t269 + t291 * t390 + t292 * t323;
	t262 = t398 * t414 + (t330 * t406 + t290 * t320 + (-t287 * t330 - t306 * t325 - t307 * t394) * t321) * t293;
	t260 = t399 * t414 + (t323 * t406 + t382 * t320 + (-t287 * t323 - t305 * t394 - t306 * t390) * t321) * t293;
	t1 = [t317 * t408 + (t284 * t320 - t317 * t451) * t293, t262, t260, 0, 0, 0; -0.2e1 * (t267 * t441 + t275 * t394) * t446 + ((t439 + t405) * t267 + t287 * t275 - t394 * t452 + (t393 * t284 + ((-t268 * t293 * t434 + t414) * t291 + (t394 * t408 + t268 + (-t268 + t401) * t293) * t292) * t317) * t441) * t272, (-t265 * t441 - t275 * t326) * t416 + ((t331 * t392 - t332 * t345 + t343 * t395 - t396 * t454) * t275 + t265 * t405 + (-t326 * t263 + t265 * t284 + (t262 * t394 - t271 * t287 + t307 + (t271 * t324 + t325) * t268) * t437 + (-t262 * t324 + t271 * t306 + t290 + (t271 * t394 - t330) * t268) * t438) * t276) * t272, (-t264 * t441 - t275 * t389) * t416 + (t285 * t275 + t264 * t405 + (-t389 * t263 + t264 * t284 + (t260 * t394 - t269 * t287 + t305 + (t269 * t324 + t390) * t268) * t437 + (-t260 * t324 + t269 * t306 + t382 + (t269 * t394 - t323) * t268) * t438) * t276) * t272, 0, 0, 0; (-t298 * t301 + t302 * t436) * t415 + ((t302 * qJD(5) - t329 * t373 + t369 * t382) * t298 + t302 * t407 + (-t301 * t280 - (-t301 * qJD(5) + t329 * t369 + t373 * t382) * t303 - t302 * t279) * t299) * t281, (t298 * t397 + t311 * t436) * t415 + ((t311 * qJD(5) + t289 * t369 + t332 * t431) * t298 + t311 * t407 + (t397 * t280 - (t397 * qJD(5) + t289 * t373 - t332 * t432) * t303 - t311 * t279) * t299) * t281, t400 * t317 * t415 + (-t400 * t284 + ((qJD(5) * t298 + t407) * t373 + (-t279 * t373 + (-t280 + t418) * t369) * t299) * t317) * t281, 0, -0.2e1 * t444 + 0.2e1 * (t279 * t299 * t281 + (-t281 * t440 - t299 * t444) * t303) * t303, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:08:10
	% EndTime: 2019-10-10 12:08:18
	% DurationCPUTime: 8.79s
	% Computational Cost: add. (29654->261), mult. (86169->486), div. (983->12), fcn. (110623->19), ass. (0->189)
	t490 = cos(pkin(6));
	t497 = cos(qJ(2));
	t593 = sin(qJ(1));
	t554 = t593 * t497;
	t494 = sin(qJ(2));
	t498 = cos(qJ(1));
	t570 = t498 * t494;
	t477 = t490 * t570 + t554;
	t517 = t490 * t554 + t570;
	t460 = t517 * qJD(1) + t477 * qJD(2);
	t487 = t593 * t494;
	t541 = t490 * t487;
	t569 = t498 * t497;
	t461 = -qJD(1) * t541 - qJD(2) * t487 + (qJD(2) * t490 + qJD(1)) * t569;
	t493 = sin(qJ(3));
	t590 = sin(pkin(7));
	t591 = cos(pkin(13));
	t533 = t591 * t590;
	t488 = sin(pkin(13));
	t552 = t488 * t590;
	t594 = cos(qJ(3));
	t470 = -t493 * t552 + t594 * t533;
	t466 = t470 * qJD(3);
	t592 = cos(pkin(7));
	t534 = t592 * t591;
	t553 = t488 * t592;
	t472 = -t493 * t553 + t594 * t534;
	t468 = t472 * qJD(3);
	t471 = t493 * t533 + t594 * t552;
	t473 = t493 * t534 + t594 * t553;
	t480 = -t594 * t488 - t493 * t591;
	t476 = t480 * qJD(3);
	t479 = t493 * t488 - t594 * t591;
	t489 = sin(pkin(6));
	t599 = -t490 * t569 + t487;
	t399 = t460 * t473 + t461 * t479 + t599 * t468 - t477 * t476 - (qJD(1) * t593 * t471 - t498 * t466) * t489;
	t572 = t489 * t498;
	t442 = -t471 * t572 - t473 * t599 - t477 * t479;
	t551 = t489 * t592;
	t539 = t498 * t551;
	t464 = -t590 * t599 + t539;
	t492 = sin(qJ(5));
	t496 = cos(qJ(5));
	t423 = t442 * t492 + t464 * t496;
	t529 = t593 * t551;
	t510 = qJD(1) * t529 + t460 * t590;
	t388 = t423 * qJD(5) + t399 * t496 - t510 * t492;
	t425 = t442 * t496 - t464 * t492;
	t386 = t425 * qJD(5) - t399 * t492 - t510 * t496;
	t530 = -t473 * t494 - t479 * t497;
	t431 = t490 * t466 + (t530 * qJD(2) + t468 * t497 + t476 * t494) * t489;
	t531 = t473 * t497 - t479 * t494;
	t449 = t490 * t471 + t531 * t489;
	t548 = t497 * t590;
	t474 = -t489 * t548 + t490 * t592;
	t437 = t449 * t496 + t474 * t492;
	t540 = t489 * t494 * t590;
	t528 = qJD(2) * t540;
	t391 = t437 * qJD(5) + t431 * t492 - t496 * t528;
	t436 = t449 * t492 - t474 * t496;
	t434 = 0.1e1 / t436 ^ 2;
	t601 = t391 * t434;
	t433 = 0.1e1 / t436;
	t448 = t490 * t470 + (t472 * t497 + t480 * t494) * t489;
	t575 = t423 * t434;
	t597 = -t470 * t572 - t472 * t599 + t477 * t480;
	t523 = -t433 * t597 + t448 * t575;
	t600 = t492 * t523;
	t467 = t471 * qJD(3);
	t469 = t473 * qJD(3);
	t475 = t479 * qJD(3);
	t555 = t489 * t593;
	t542 = t470 * t555;
	t598 = qJD(1) * t542 - t460 * t472 + t461 * t480 + t467 * t572 + t469 * t599 + t477 * t475;
	t413 = atan2(-t423, t436);
	t408 = sin(t413);
	t409 = cos(t413);
	t380 = -t408 * t423 + t409 * t436;
	t377 = 0.1e1 / t380;
	t506 = t517 * t590 + t529;
	t518 = t541 - t569;
	t507 = t471 * t555 - t517 * t473 + t479 * t518;
	t429 = t506 * t492 + t496 * t507;
	t446 = -t517 * t472 - t480 * t518 + t542;
	t491 = sin(qJ(6));
	t495 = cos(qJ(6));
	t407 = t429 * t495 - t446 * t491;
	t401 = 0.1e1 / t407;
	t378 = 0.1e1 / t380 ^ 2;
	t402 = 0.1e1 / t407 ^ 2;
	t596 = -0.2e1 * t423;
	t428 = t492 * t507 - t506 * t496;
	t595 = 0.2e1 * t428;
	t422 = t428 ^ 2;
	t376 = t422 * t378 + 0.1e1;
	t458 = t599 * qJD(1) + t518 * qJD(2);
	t459 = t477 * qJD(1) + t517 * qJD(2);
	t568 = qJD(1) * t498;
	t505 = t459 * t479 - t518 * t476 + t458 * t473 - t517 * t468 + (t593 * t466 + t471 * t568) * t489;
	t511 = qJD(1) * t539 - t458 * t590;
	t384 = t429 * qJD(5) + t492 * t505 - t511 * t496;
	t582 = t384 * t378;
	t421 = t423 ^ 2;
	t412 = t421 * t434 + 0.1e1;
	t410 = 0.1e1 / t412;
	t527 = -t386 * t433 + t391 * t575;
	t367 = t527 * t410;
	t532 = -t408 * t436 - t409 * t423;
	t361 = t532 * t367 - t408 * t386 + t409 * t391;
	t379 = t377 * t378;
	t588 = t361 * t379;
	t589 = (-t422 * t588 + t428 * t582) / t376 ^ 2;
	t385 = -t428 * qJD(5) + t511 * t492 + t496 * t505;
	t394 = -t459 * t480 - t518 * t475 + t458 * t472 + t517 * t469 + (-t593 * t467 + t470 * t568) * t489;
	t372 = t407 * qJD(6) + t385 * t491 + t394 * t495;
	t406 = t429 * t491 + t446 * t495;
	t400 = t406 ^ 2;
	t383 = t400 * t402 + 0.1e1;
	t580 = t402 * t406;
	t566 = qJD(6) * t406;
	t373 = t385 * t495 - t394 * t491 - t566;
	t584 = t373 * t401 * t402;
	t586 = (t372 * t580 - t400 * t584) / t383 ^ 2;
	t581 = t433 * t601;
	t585 = (t386 * t575 - t421 * t581) / t412 ^ 2;
	t583 = t378 * t428;
	t579 = t406 * t495;
	t578 = t408 * t428;
	t577 = t409 * t428;
	t576 = t423 * t433;
	t574 = t446 * t492;
	t573 = t446 * t496;
	t571 = t491 * t401;
	t567 = qJD(5) * t496;
	t565 = 0.2e1 * t589;
	t564 = -0.2e1 * t586;
	t563 = 0.2e1 * t586;
	t562 = -0.2e1 * t585;
	t561 = t379 * t595;
	t560 = t433 * t585;
	t559 = t378 * t578;
	t558 = t378 * t577;
	t557 = t406 * t584;
	t550 = t492 * t590;
	t549 = t496 * t590;
	t547 = -0.2e1 * t377 * t589;
	t546 = t378 * t565;
	t545 = t361 * t561;
	t544 = t581 * t596;
	t543 = 0.2e1 * t557;
	t535 = qJD(6) * t573 - t505;
	t405 = -t425 * t495 + t491 * t597;
	t404 = -t425 * t491 - t495 * t597;
	t452 = t473 * t518 + t517 * t479;
	t440 = t452 * t496 - t518 * t550;
	t451 = -t472 * t518 + t517 * t480;
	t420 = t440 * t495 + t451 * t491;
	t419 = t440 * t491 - t451 * t495;
	t526 = t402 * t579 - t571;
	t525 = -t425 * t433 + t437 * t575;
	t450 = -t477 * t473 + t479 * t599;
	t438 = t450 * t492 - t477 * t549;
	t457 = t530 * t489;
	t453 = t457 * t492 - t496 * t540;
	t524 = -t433 * t438 + t453 * t575;
	t515 = -t452 * t492 - t518 * t549;
	t514 = -t408 + (t409 * t576 + t408) * t410;
	t512 = -qJD(5) * t574 + qJD(6) * t507 + t394 * t496;
	t430 = -t490 * t467 + (-t469 * t497 + t475 * t494 + (-t472 * t494 + t480 * t497) * qJD(2)) * t489;
	t418 = -t458 * t479 + t459 * t473 + t468 * t518 - t517 * t476;
	t417 = -t458 * t480 - t459 * t472 + t469 * t518 + t517 * t475;
	t416 = t457 * t567 + ((t476 * t497 + (t590 * qJD(5) - t468) * t494) * t492 + (-t531 * t492 - t496 * t548) * qJD(2)) * t489;
	t415 = t491 * t507 + t495 * t573;
	t414 = t491 * t573 - t495 * t507;
	t392 = -t436 * qJD(5) + t431 * t496 + t492 * t528;
	t390 = (t460 * t479 - t461 * t473 - t477 * t468 - t476 * t599) * t492 - t461 * t549 + (t450 * t496 + t477 * t550) * qJD(5);
	t389 = t515 * qJD(5) + t418 * t496 - t459 * t550;
	t381 = 0.1e1 / t383;
	t374 = 0.1e1 / t376;
	t371 = t524 * t410;
	t370 = t410 * t600;
	t369 = t525 * t410;
	t366 = t514 * t428;
	t363 = (-t408 * t597 + t409 * t448) * t492 + t532 * t370;
	t362 = t532 * t369 - t408 * t425 + t409 * t437;
	t360 = t524 * t562 + (t453 * t544 - t390 * t433 + (t386 * t453 + t391 * t438 + t416 * t423) * t434) * t410;
	t358 = t525 * t562 + (t437 * t544 + t388 * t433 + (t386 * t437 + t391 * t425 + t392 * t423) * t434) * t410;
	t357 = t562 * t600 + (t523 * t567 + (t448 * t544 - t598 * t433 + (t386 * t448 + t391 * t597 + t423 * t430) * t434) * t492) * t410;
	t1 = [t560 * t595 + (-t384 * t433 + t428 * t601) * t410, t360, t357, 0, t358, 0; -t423 * t547 + (-t386 * t377 + (t361 * t423 - t366 * t384) * t378) * t374 + (t366 * t546 + (0.2e1 * t366 * t588 - (-t367 * t410 * t576 + t562) * t559 - (t560 * t596 - t367 + (t367 - t527) * t410) * t558 - t514 * t582) * t374) * t428, -t515 * t547 + ((t440 * qJD(5) + t418 * t492 + t459 * t549) * t377 + t515 * t378 * t361 - ((-t360 * t423 - t371 * t386 + t416 + (-t371 * t436 - t438) * t367) * t409 + (-t360 * t436 - t371 * t391 - t390 + (t371 * t423 - t453) * t367) * t408) * t583) * t374 + (t428 * t546 + (-t582 + t545) * t374) * (t532 * t371 - t408 * t438 + t409 * t453), (t363 * t583 - t377 * t574) * t565 + (-t363 * t582 + (t394 * t492 + t446 * t567) * t377 + (t363 * t561 - t378 * t574) * t361 - (t448 * t567 - t357 * t423 - t370 * t386 + t430 * t492 + (-t370 * t436 - t492 * t597) * t367) * t558 - (-t597 * t567 - t357 * t436 - t370 * t391 - t598 * t492 + (t370 * t423 - t448 * t492) * t367) * t559) * t374, 0, (t362 * t583 - t377 * t429) * t565 + (t362 * t545 + t385 * t377 + (-t429 * t361 - t362 * t384 - (-t358 * t423 - t369 * t386 + t392 + (-t369 * t436 - t425) * t367) * t577 - (-t358 * t436 - t369 * t391 + t388 + (t369 * t423 - t437) * t367) * t578) * t378) * t374, 0; (-t401 * t404 + t405 * t580) * t563 + ((t405 * qJD(6) + t388 * t491 - t495 * t598) * t401 + t405 * t543 + (-t404 * t373 - (-t404 * qJD(6) + t388 * t495 + t491 * t598) * t406 - t405 * t372) * t402) * t381, (-t401 * t419 + t420 * t580) * t563 + ((t420 * qJD(6) + t389 * t491 - t417 * t495) * t401 + t420 * t543 + (-t419 * t373 - (-t419 * qJD(6) + t389 * t495 + t417 * t491) * t406 - t420 * t372) * t402) * t381, (-t401 * t414 + t415 * t580) * t563 + (t415 * t543 + t535 * t401 * t495 + t512 * t571 + (t535 * t406 * t491 - t415 * t372 - t414 * t373 - t512 * t579) * t402) * t381, 0, t526 * t428 * t564 + (t526 * t384 + ((-qJD(6) * t401 - 0.2e1 * t557) * t495 + (t372 * t495 + (t373 - t566) * t491) * t402) * t428) * t381, t564 + 0.2e1 * (t372 * t402 * t381 + (-t381 * t584 - t402 * t586) * t406) * t406;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end