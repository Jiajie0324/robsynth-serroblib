% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR9_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRPRR9_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:11:11
% EndTime: 2019-03-09 19:11:54
% DurationCPUTime: 33.36s
% Computational Cost: add. (30055->927), mult. (89675->1299), div. (0->0), fcn. (77094->16), ass. (0->393)
t973 = cos(qJ(3));
t1099 = qJD(3) * t973;
t964 = cos(pkin(7));
t1068 = t964 * t1099;
t968 = sin(qJ(3));
t1136 = t964 * t968;
t961 = sin(pkin(7));
t1144 = t961 * t968;
t1075 = pkin(10) * t964 + pkin(9);
t962 = sin(pkin(6));
t1041 = t962 * t1075;
t969 = sin(qJ(2));
t1019 = t969 * t1041;
t965 = cos(pkin(6));
t1172 = pkin(1) * t965;
t974 = cos(qJ(2));
t950 = t974 * t1172;
t941 = qJD(1) * t950;
t866 = -qJD(1) * t1019 + t941;
t1171 = pkin(1) * t969;
t949 = t965 * t1171;
t983 = -t1041 * t974 - t949;
t867 = t983 * qJD(1);
t1168 = pkin(10) * t961;
t1018 = pkin(2) * t969 - t1168 * t974;
t1104 = qJD(1) * t962;
t898 = t1018 * t1104;
t1199 = -pkin(2) * t1068 + t867 * t1136 + t898 * t1144 + t973 * t866;
t1135 = t964 * t973;
t1142 = t961 * t973;
t1036 = t867 * t1135 + t898 * t1142 - t866 * t968;
t1102 = qJD(1) * t969;
t1073 = t962 * t1102;
t1047 = t961 * t1073;
t1163 = pkin(10) + qJ(4);
t1067 = t1163 * t961;
t1124 = t973 * t974;
t1133 = t968 * t969;
t1010 = -t1133 * t964 + t1124;
t892 = t1010 * t1104;
t947 = pkin(2) * t1136;
t1198 = -pkin(3) * t1047 + qJ(4) * t892 - t1036 - qJD(4) * t1144 + (-t1067 * t973 - t947) * qJD(3);
t1066 = t1163 * t968;
t1130 = t969 * t973;
t1132 = t968 * t974;
t1012 = t1130 * t964 + t1132;
t891 = t1012 * t1104;
t1197 = -qJ(4) * t891 - (-qJD(3) * t1066 + qJD(4) * t973) * t961 + t1199;
t963 = cos(pkin(13));
t1125 = t973 * t963;
t960 = sin(pkin(13));
t920 = t960 * t968 - t1125;
t1196 = t920 * t961 * qJD(3) - t891 * t960 + t892 * t963;
t1020 = t960 * t973 + t963 * t968;
t902 = t1020 * t961;
t1108 = qJD(3) * t902 - t963 * t891 - t892 * t960;
t1112 = -t1197 * t963 + t1198 * t960;
t975 = cos(qJ(1));
t1138 = t962 * t975;
t901 = -t1125 * t961 + t1144 * t960;
t903 = t920 * t964;
t1123 = t974 * t975;
t970 = sin(qJ(1));
t1131 = t969 * t970;
t908 = -t1123 * t965 + t1131;
t1128 = t970 * t974;
t1129 = t969 * t975;
t909 = t1129 * t965 + t1128;
t1009 = -t1020 * t909 + t901 * t1138 + t903 * t908;
t904 = t1020 * t964;
t764 = t1138 * t902 + t904 * t908 + t909 * t920;
t870 = t1138 * t964 - t908 * t961;
t967 = sin(qJ(5));
t972 = cos(qJ(5));
t735 = t764 * t972 + t870 * t967;
t966 = sin(qJ(6));
t971 = cos(qJ(6));
t1195 = -t1009 * t971 + t735 * t966;
t1194 = t1009 * t966 + t735 * t971;
t1193 = pkin(11) * t1047 - t1112;
t1100 = qJD(3) * t968;
t1070 = t961 * t1100;
t1169 = pkin(3) * t891;
t889 = t964 * t898;
t808 = -t867 * t961 + t889;
t1191 = -pkin(3) * t1070 - t1108 * pkin(4) - pkin(11) * t1196 + t1169 + t808;
t1114 = t1197 * t960 + t1198 * t963;
t864 = t902 * t967 - t972 * t964;
t1110 = -qJD(5) * t864 - t1047 * t967 - t1196 * t972;
t865 = t902 * t972 + t964 * t967;
t1109 = qJD(5) * t865 + t1047 * t972 - t1196 * t967;
t1072 = t974 * t1104;
t1045 = t973 * t1072;
t1031 = t964 * t1045;
t1046 = t968 * t1073;
t1103 = qJD(1) * t965;
t944 = qJD(2) + t1103;
t838 = -t1142 * t944 - t1031 + t1046;
t1011 = t1132 * t964 + t1130;
t995 = t1011 * t962;
t840 = qJD(1) * t995 + t1144 * t944;
t1055 = -t963 * t838 - t840 * t960;
t1187 = t1055 - qJD(5);
t1021 = -t838 * t960 + t963 * t840;
t1054 = -t961 * t1072 + t944 * t964;
t1034 = qJD(3) + t1054;
t749 = t1021 * t972 + t1034 * t967;
t1153 = t749 * t966;
t700 = t1187 * t971 + t1153;
t1190 = t1187 * t700;
t882 = t972 * t1034;
t747 = t1021 * t967 - t882;
t1189 = t1187 * t747;
t1188 = t1187 * t967;
t746 = qJD(6) + t747;
t1087 = qJDD(1) * t974;
t1062 = t962 * t1087;
t1042 = t964 * t1062;
t1088 = qJDD(1) * t969;
t1089 = qJDD(1) * t965;
t943 = qJDD(2) + t1089;
t977 = qJD(2) * t1012 + qJD(3) * t1011;
t753 = -t973 * t1042 + t1070 * t944 - t943 * t1142 + (qJD(1) * t977 + t968 * t1088) * t962;
t1186 = t764 * t967 - t870 * t972;
t957 = t962 ^ 2;
t1173 = 0.2e1 * t957;
t1139 = t962 * t974;
t1013 = t1139 * t964 + t961 * t965;
t1106 = pkin(9) * t1139 + t949;
t855 = pkin(10) * t1013 + t1106;
t863 = pkin(2) * t965 - t1019 + t950;
t1007 = -pkin(2) * t974 - t1168 * t969 - pkin(1);
t894 = t1007 * t962;
t1037 = t863 * t1135 + t894 * t1142 - t855 * t968;
t859 = t1144 * t965 + t995;
t907 = t1139 * t961 - t965 * t964;
t719 = -pkin(3) * t907 - qJ(4) * t859 + t1037;
t845 = t973 * t855;
t1078 = t863 * t1136 + t894 * t1144 + t845;
t1180 = t964 * t1124 - t1133;
t858 = -t1142 * t965 - t1180 * t962;
t729 = -qJ(4) * t858 + t1078;
t670 = t960 * t719 + t963 * t729;
t664 = -pkin(11) * t907 + t670;
t802 = -t863 * t961 + t964 * t894;
t1016 = pkin(3) * t858 + t802;
t788 = t963 * t858 + t859 * t960;
t789 = -t858 * t960 + t859 * t963;
t686 = pkin(4) * t788 - pkin(11) * t789 + t1016;
t1185 = t972 * t664 + t967 * t686;
t1113 = pkin(4) * t1047 - t1114;
t948 = pkin(2) * t1135;
t877 = pkin(3) * t964 - t1066 * t961 + t948;
t1107 = pkin(10) * t1142 + t947;
t893 = qJ(4) * t1142 + t1107;
t813 = t960 * t877 + t963 * t893;
t799 = pkin(11) * t964 + t813;
t956 = pkin(3) * t973 + pkin(2);
t822 = pkin(4) * t901 - pkin(11) * t902 - t956 * t961;
t1111 = t972 * t799 + t967 * t822;
t900 = t907 * t972;
t754 = t789 * t967 + t900;
t1095 = qJD(5) * t972;
t1096 = qJD(5) * t967;
t1181 = -t822 * t1095 + t1096 * t799 + t1191 * t967 + t1193 * t972;
t1179 = g(1) * t975 + g(2) * t970;
t1090 = qJD(1) * qJD(2);
t1065 = t969 * t1090;
t1043 = t962 * t1065;
t1085 = qJD(2) * t1172;
t1048 = qJD(1) * t1085;
t1076 = pkin(9) * t1062 + qJDD(1) * t949 + t974 * t1048;
t988 = -pkin(9) * t1043 + t1076;
t782 = (t943 * t961 + (-t1065 + t1087) * t964 * t962) * pkin(10) + t988;
t1064 = t974 * t1090;
t1004 = -t1064 - t1088;
t1084 = pkin(1) * t1087;
t939 = t965 * t1084;
t787 = pkin(2) * t943 + t1004 * t1041 - t969 * t1048 + t939;
t996 = qJD(2) * t1018;
t826 = (qJD(1) * t996 + qJDD(1) * t1007) * t962;
t1038 = t787 * t1135 + t826 * t1142 - t968 * t782;
t833 = t944 * t1168 + (t1075 * t1139 + t949) * qJD(1);
t836 = pkin(2) * t944 + t866;
t883 = qJD(1) * t894;
t744 = (t836 * t964 + t883 * t961) * t968 + t973 * t833;
t658 = -qJD(3) * t744 + t1038;
t1063 = t962 * t1088;
t1069 = t961 * t1099;
t752 = t944 * t1069 + qJD(3) * t1031 + t943 * t1144 + t968 * t1042 + qJD(2) * t1045 + t973 * t1063 + (-qJD(2) * t964 - qJD(3)) * t1046;
t842 = t943 * t964 + qJDD(3) + (t1043 - t1062) * t961;
t640 = pkin(3) * t842 - qJ(4) * t752 - qJD(4) * t840 + t658;
t986 = -t836 * t1068 - t883 * t1069 + t1100 * t833 - t787 * t1136 - t826 * t1144 - t973 * t782;
t645 = -qJ(4) * t753 - qJD(4) * t838 - t986;
t615 = t960 * t640 + t963 * t645;
t613 = pkin(11) * t842 + t615;
t731 = -t787 * t961 + t964 * t826;
t682 = pkin(3) * t753 + qJDD(4) + t731;
t695 = -t752 * t960 - t963 * t753;
t696 = t752 * t963 - t753 * t960;
t622 = -pkin(4) * t695 - pkin(11) * t696 + t682;
t717 = -qJ(4) * t838 + t744;
t1137 = t963 * t717;
t743 = t836 * t1135 + t883 * t1142 - t968 * t833;
t716 = -t840 * qJ(4) + t743;
t707 = pkin(3) * t1034 + t716;
t656 = t960 * t707 + t1137;
t649 = pkin(11) * t1034 + t656;
t785 = -t836 * t961 + t964 * t883;
t750 = pkin(3) * t838 + qJD(4) + t785;
t675 = -pkin(4) * t1055 - pkin(11) * t1021 + t750;
t624 = t649 * t972 + t675 * t967;
t603 = -qJD(5) * t624 - t613 * t967 + t972 * t622;
t694 = qJDD(5) - t695;
t601 = -pkin(5) * t694 - t603;
t1140 = t962 * t970;
t910 = -t1128 * t965 - t1129;
t872 = t1140 * t964 - t910 * t961;
t911 = -t1131 * t965 + t1123;
t987 = t1140 * t902 + t904 * t910 - t911 * t920;
t736 = t872 * t972 - t967 * t987;
t982 = t902 * t965 + (t904 * t974 - t920 * t969) * t962;
t999 = g(1) * t736 + g(2) * t1186 + g(3) * (-t967 * t982 - t900);
t1178 = (pkin(5) * t749 + pkin(12) * t746) * t746 + t601 + t999;
t1081 = t961 * t1138;
t1015 = t908 * t964 + t1081;
t1176 = t1015 * t973 + t909 * t968;
t1056 = t967 * t696 - t972 * t842;
t652 = qJD(5) * t749 + t1056;
t650 = qJDD(6) + t652;
t660 = t716 * t960 + t1137;
t955 = -pkin(3) * t963 - pkin(4);
t914 = -pkin(5) * t972 - pkin(12) * t967 + t955;
t1175 = (t660 + t1187 * (pkin(5) * t967 - pkin(12) * t972)) * t746 - t914 * t650;
t1101 = qJD(2) * t969;
t1071 = t962 * t1101;
t1044 = t961 * t1071;
t807 = t965 * t1069 + (t1010 * qJD(2) + qJD(3) * t1180) * t962;
t942 = t974 * t1085;
t868 = -qJD(2) * t1019 + t942;
t869 = t983 * qJD(2);
t899 = t962 * t996;
t978 = -t868 * t968 + t869 * t1135 + t899 * t1142 + (-t845 + (-t863 * t964 - t894 * t961) * t968) * qJD(3);
t666 = pkin(3) * t1044 - qJ(4) * t807 - qJD(4) * t859 + t978;
t806 = t1070 * t965 + t962 * t977;
t985 = t863 * t1068 + t894 * t1069 - t1100 * t855 + t869 * t1136 + t899 * t1144 + t973 * t868;
t671 = -qJ(4) * t806 - qJD(4) * t858 + t985;
t634 = t960 * t666 + t963 * t671;
t631 = pkin(11) * t1044 + t634;
t809 = -t869 * t961 + t964 * t899;
t1017 = pkin(3) * t806 + t809;
t740 = t963 * t806 + t807 * t960;
t741 = -t806 * t960 + t807 * t963;
t654 = pkin(4) * t740 - pkin(11) * t741 + t1017;
t1174 = -qJD(5) * t1185 - t631 * t967 + t654 * t972;
t1170 = pkin(2) * t961;
t1162 = MDP(6) * t962;
t1161 = MDP(7) * t962;
t1093 = qJD(6) * t971;
t651 = qJD(5) * t882 - t1021 * t1096 + t972 * t696 + t967 * t842;
t1079 = -t1093 * t1187 + t971 * t651 + t966 * t694;
t1094 = qJD(6) * t966;
t616 = -t1094 * t749 + t1079;
t1160 = t616 * t966;
t1159 = t700 * t746;
t702 = -t1187 * t966 + t749 * t971;
t1158 = t702 * t746;
t1157 = t702 * t1055;
t954 = pkin(3) * t960 + pkin(11);
t1156 = t746 * t954;
t1052 = t746 * t971;
t1155 = t747 * t1021;
t1154 = t749 * t1021;
t1152 = t1055 * t972;
t1150 = t907 * t967;
t1147 = t943 * MDP(8);
t976 = qJD(1) ^ 2;
t1146 = t957 * t976;
t713 = t960 * t717;
t1145 = t961 * t967;
t1143 = t961 * t972;
t1141 = t962 * t969;
t1134 = t966 * t650;
t1127 = t971 * t650;
t661 = t716 * t963 - t713;
t699 = pkin(3) * t840 + pkin(4) * t1021 - pkin(11) * t1055;
t1121 = t972 * t661 + t967 * t699;
t1119 = -t1108 * pkin(5) + qJD(5) * t1111 + t1191 * t972 - t1193 * t967;
t1117 = -t1055 * t1188 + t972 * t694;
t820 = t865 * t966 - t971 * t901;
t1116 = -qJD(6) * t820 + t1108 * t966 + t1110 * t971;
t821 = t865 * t971 + t901 * t966;
t1115 = qJD(6) * t821 - t1108 * t971 + t1110 * t966;
t958 = t969 ^ 2;
t1105 = -t974 ^ 2 + t958;
t1098 = qJD(5) * t746;
t1097 = qJD(5) * t954;
t1092 = qJD(2) - t944;
t1086 = t957 * t1171;
t1083 = t974 * t1146;
t1082 = t961 * t1141;
t1074 = t961 * t1102;
t602 = t675 * t1095 - t1096 * t649 + t972 * t613 + t967 * t622;
t600 = pkin(12) * t694 + t602;
t614 = t640 * t963 - t960 * t645;
t612 = -pkin(4) * t842 - t614;
t605 = pkin(5) * t652 - pkin(12) * t651 + t612;
t1059 = -t966 * t600 + t971 * t605;
t1057 = t651 * t966 - t971 * t694;
t633 = t666 * t963 - t960 * t671;
t655 = t963 * t707 - t713;
t669 = t719 * t963 - t960 * t729;
t812 = t877 * t963 - t960 * t893;
t1053 = t1187 * t972;
t1051 = t944 + t1103;
t1050 = qJD(1) * t1092;
t1049 = t943 + t1089;
t1039 = g(1) * t911 + g(2) * t909;
t1035 = -t892 + t1069;
t798 = -pkin(4) * t964 - t812;
t742 = pkin(5) * t864 - pkin(12) * t865 + t798;
t1033 = -pkin(12) * t1108 - qJD(6) * t742 + t1181;
t723 = pkin(12) * t901 + t1111;
t1032 = -pkin(5) * t1109 + pkin(12) * t1110 + qJD(6) * t723 - t1113;
t1030 = t971 * t600 + t966 * t605;
t619 = -pkin(12) * t1187 + t624;
t648 = -pkin(4) * t1034 - t655;
t632 = t747 * pkin(5) - t749 * pkin(12) + t648;
t609 = t619 * t971 + t632 * t966;
t1029 = t619 * t966 - t632 * t971;
t628 = pkin(12) * t788 + t1185;
t663 = pkin(4) * t907 - t669;
t755 = t789 * t972 - t1150;
t642 = pkin(5) * t754 - pkin(12) * t755 + t663;
t1028 = t628 * t971 + t642 * t966;
t1027 = -t628 * t966 + t642 * t971;
t623 = -t649 * t967 + t675 * t972;
t1024 = -t664 * t967 + t686 * t972;
t712 = t755 * t971 + t788 * t966;
t711 = t755 * t966 - t971 * t788;
t1023 = -t799 * t967 + t822 * t972;
t1014 = t1140 * t961 + t910 * t964;
t1008 = -t1093 * t746 - t1134;
t1006 = qJD(3) * t1034;
t1002 = t686 * t1095 - t1096 * t664 + t972 * t631 + t967 * t654;
t1000 = -t1187 * t648 - t954 * t694;
t766 = -t1020 * t911 - t1140 * t901 - t903 * t910;
t791 = -t901 * t965 + (-t1020 * t969 - t903 * t974) * t962;
t998 = g(1) * t766 + g(2) * t1009 + g(3) * t791;
t997 = t968 * t1081 + t1136 * t908 - t909 * t973;
t994 = g(3) * t1141 + t1039;
t992 = -t612 - t998;
t991 = t1106 * t944;
t990 = t1034 * t1082;
t709 = t1021 * t966 + t1152 * t971;
t989 = -t1094 * t967 + t1095 * t971 - t709;
t630 = -pkin(4) * t1044 - t633;
t618 = pkin(5) * t1187 - t623;
t984 = -pkin(12) * t650 + (t618 + t623) * t746;
t980 = qJD(6) * t1156 + t998;
t979 = -g(1) * t987 + g(2) * t764 - g(3) * t982 + (pkin(12) * t1021 - qJD(6) * t914 + t1121) * t746;
t906 = pkin(3) * t1136 - t1067;
t828 = (-t904 * t969 - t920 * t974) * t962;
t827 = (t1020 * t974 - t903 * t969) * t962;
t825 = t1014 * t968 + t911 * t973;
t824 = t1014 * t973 - t911 * t968;
t801 = t1082 * t967 + t828 * t972;
t796 = -t904 * t911 - t910 * t920;
t795 = t1020 * t910 - t903 * t911;
t794 = -t904 * t909 + t908 * t920;
t793 = -t1020 * t908 - t903 * t909;
t759 = t1145 * t911 + t796 * t972;
t758 = t1145 * t909 + t794 * t972;
t757 = t972 * t982 - t1150;
t737 = t872 * t967 + t972 * t987;
t722 = -pkin(5) * t901 - t1023;
t708 = -t1021 * t971 + t1152 * t966;
t698 = t702 * t1096;
t689 = t737 * t971 - t766 * t966;
t688 = -t737 * t966 - t766 * t971;
t685 = qJD(5) * t755 - t1044 * t972 + t741 * t967;
t684 = -qJD(5) * t754 + t967 * t1044 + t741 * t972;
t636 = qJD(6) * t712 + t684 * t966 - t971 * t740;
t635 = -qJD(6) * t711 + t684 * t971 + t740 * t966;
t627 = -pkin(5) * t788 - t1024;
t625 = -pkin(5) * t1021 + t661 * t967 - t699 * t972;
t617 = qJD(6) * t702 + t1057;
t610 = pkin(5) * t685 - pkin(12) * t684 + t630;
t607 = -pkin(5) * t740 - t1174;
t606 = pkin(12) * t740 + t1002;
t599 = -t609 * qJD(6) + t1059;
t598 = -t1029 * qJD(6) + t1030;
t1 = [(-g(1) * t735 - g(2) * t737 + t1024 * t694 - t1174 * t1187 + t603 * t788 + t612 * t754 + t623 * t740 + t630 * t747 + t648 * t685 + t663 * t652) * MDP(25) + (-t1187 * t740 + t694 * t788) * MDP(24) + (-t1187 * t684 + t651 * t788 + t694 * t755 + t740 * t749) * MDP(22) + (t1187 * t685 - t652 * t788 - t694 * t754 - t740 * t747) * MDP(23) + (g(1) * t1186 - g(2) * t736 + t1002 * t1187 - t1185 * t694 - t602 * t788 + t612 * t755 - t624 * t740 + t630 * t749 + t648 * t684 + t663 * t651) * MDP(26) + t1179 * MDP(3) + (t615 * t670 + t656 * t634 + t614 * t669 + t655 * t633 + t682 * t1016 + t750 * t1017 - g(1) * (-pkin(1) * t970 + t906 * t908 - t909 * t956) - g(2) * (pkin(1) * t975 + t906 * t910 + t911 * t956) - t1179 * t962 * (pkin(3) * t1144 + t1163 * t964 + pkin(9))) * MDP(19) + (t1084 * t1173 + (-pkin(9) * t1141 + t950) * t943 + (-pkin(9) * t1063 + t939) * t965 + g(1) * t909 - g(2) * t911 + (-t991 + (-t1106 * t965 - 0.2e1 * t1086) * qJD(1)) * qJD(2)) * MDP(9) + (qJDD(1) * t958 + 0.2e1 * t1064 * t969) * t957 * MDP(4) + (-g(1) * t1176 - g(2) * t824 - t985 * t1034 - t744 * t1044 - t1078 * t842 + t731 * t859 + t802 * t752 + t785 * t807 + t809 * t840 - t907 * t986) * MDP(17) + (-t1034 * t806 - t1044 * t838 + t753 * t907 - t858 * t842) * MDP(14) + (t1034 * t807 + t1044 * t840 - t752 * t907 + t859 * t842) * MDP(13) + (-g(1) * t997 - g(2) * t825 + t1034 * t978 + t1037 * t842 + t1044 * t743 - t658 * t907 + t731 * t858 + t802 * t753 + t785 * t806 + t809 * t838) * MDP(16) + (t1087 * t969 - t1090 * t1105) * MDP(5) * t1173 + (t752 * t859 + t807 * t840) * MDP(11) + (-t752 * t858 - t753 * t859 - t806 * t840 - t807 * t838) * MDP(12) + (qJD(2) * t990 - t842 * t907) * MDP(15) + (-t616 * t711 - t617 * t712 - t635 * t700 - t636 * t702) * MDP(28) + (t616 * t712 + t635 * t702) * MDP(27) + (g(1) * t970 - g(2) * t975) * MDP(2) + (t651 * t755 + t684 * t749) * MDP(20) + (-t651 * t754 - t652 * t755 - t684 * t747 - t685 * t749) * MDP(21) + (-t617 * t754 - t636 * t746 - t650 * t711 - t685 * t700) * MDP(30) + (t616 * t754 + t635 * t746 + t650 * t712 + t685 * t702) * MDP(29) + (t650 * t754 + t685 * t746) * MDP(31) + (-g(1) * t870 - g(2) * t872 - t1021 * t633 + t1055 * t634 - t614 * t789 - t615 * t788 - t655 * t741 - t656 * t740 - t669 * t696 + t670 * t695) * MDP(18) + ((-qJD(6) * t1028 - t606 * t966 + t610 * t971) * t746 + t1027 * t650 + t599 * t754 - t1029 * t685 + t607 * t700 + t627 * t617 + t601 * t711 + t618 * t636 - g(1) * t1194 - g(2) * t689) * MDP(32) + (-(qJD(6) * t1027 + t606 * t971 + t610 * t966) * t746 - t1028 * t650 - t598 * t754 - t609 * t685 + t607 * t702 + t627 * t616 + t601 * t712 + t618 * t635 + g(1) * t1195 - g(2) * t688) * MDP(33) + qJDD(1) * MDP(1) + (-(-pkin(9) * t1071 + t942) * t944 - t1106 * t943 - t988 * t965 - g(1) * t908 - g(2) * t910 + t1004 * pkin(1) * t1173) * MDP(10) + t965 * t1147 + (t1049 * t974 - t1051 * t1101) * t1161 + (qJD(2) * t1051 * t974 + t1049 * t969) * t1162; (-t1111 * t694 - t602 * t901 + t798 * t651 + t612 * t865 - g(1) * (t1143 * t911 - t796 * t967) - g(2) * (t1143 * t909 - t794 * t967) - g(3) * (t1082 * t972 - t828 * t967) - t1181 * t1187 + t1113 * t749 + t1110 * t648 - t1108 * t624) * MDP(26) + (-t1108 * t1187 + t694 * t901) * MDP(24) + (-t1108 * t747 + t1109 * t1187 - t652 * t901 - t694 * t864) * MDP(23) + (t1108 * t749 - t1110 * t1187 + t651 * t901 + t694 * t865) * MDP(22) + (t976 * t1086 - g(1) * t910 + g(2) * t908 + t939 + (-pkin(9) * t1088 - g(3) * t974) * t962 + (-qJD(2) * t1106 + t991) * qJD(1)) * MDP(9) + ((-t723 * t966 + t742 * t971) * t650 + t599 * t864 + t722 * t617 + t601 * t820 - g(1) * (t759 * t971 + t795 * t966) - g(2) * (t758 * t971 + t793 * t966) - g(3) * (t801 * t971 + t827 * t966) + (-t1032 * t971 + t1033 * t966) * t746 + t1119 * t700 + t1115 * t618 - t1109 * t1029) * MDP(32) + (t615 * t813 + t614 * t812 - t750 * (t889 + t1169) - g(1) * (-t906 * t911 + t910 * t956) - g(2) * (-t906 * t909 - t908 * t956) - g(3) * (-t906 * t969 + t956 * t974) * t962 + t1112 * t656 + t1114 * t655 + (-t682 * t956 + (pkin(3) * t1100 + t867) * t750) * t961) * MDP(19) + (-t1107 * t1006 + (-pkin(10) * t1144 + t948) * t842 + t658 * t964 - t753 * t1170 - t731 * t1142 - t1036 * t1034 - t808 * t838 - g(1) * (-t1136 * t911 + t910 * t973) - g(2) * (-t1136 * t909 - t908 * t973) + (-t891 + t1070) * t785 + (-g(3) * t1010 - t1074 * t743) * t962) * MDP(16) + (-t1109 * t700 - t1115 * t746 - t617 * t864 - t650 * t820) * MDP(30) + (t1116 * t702 + t616 * t821) * MDP(27) + (t1109 * t702 + t1116 * t746 + t616 * t864 + t650 * t821) * MDP(29) + (-t1115 * t702 - t1116 * t700 - t616 * t820 - t617 * t821) * MDP(28) + (t1023 * t694 + t603 * t901 + t798 * t652 + t612 * t864 - g(1) * t759 - g(2) * t758 - g(3) * t801 - ((-qJD(5) * t799 - t1191) * t972 + (-qJD(5) * t822 + t1193) * t967) * t1187 + t1113 * t747 + t1109 * t648 + t1108 * t623) * MDP(25) + (t1035 * t840 + t1144 * t752) * MDP(11) + (pkin(1) * t1083 + t941 * t944 + (pkin(9) * t1050 + g(3)) * t1141 + t1039 - t1076) * MDP(10) + (t752 * t964 - t892 * t1034 + (t1006 * t973 - t1073 * t840 + t968 * t842) * t961) * MDP(13) + (-t753 * t964 + t891 * t1034 + (-t1006 * t968 + t1073 * t838 + t973 * t842) * t961) * MDP(14) + (-t1107 * t842 + t986 * t964 - t752 * t1170 + t731 * t1144 - t808 * t840 - g(1) * (-t1135 * t911 - t910 * t968) - g(2) * (-t1135 * t909 + t908 * t968) + t1035 * t785 + (g(3) * t1012 + t1074 * t744) * t962 + (pkin(10) * t1070 + t1199) * t1034) * MDP(17) + t1147 + (t1109 * t746 + t650 * t864) * MDP(31) + (t1110 * t749 + t651 * t865) * MDP(20) + (-t1109 * t749 - t1110 * t747 - t651 * t864 - t652 * t865) * MDP(21) - t969 * MDP(4) * t1083 + (-(t723 * t971 + t742 * t966) * t650 - t598 * t864 + t722 * t616 + t601 * t821 - g(1) * (-t759 * t966 + t795 * t971) - g(2) * (-t758 * t966 + t793 * t971) - g(3) * (-t801 * t966 + t827 * t971) + (t1032 * t966 + t1033 * t971) * t746 + t1119 * t702 + t1116 * t618 - t1109 * t609) * MDP(33) + (-qJD(1) * t990 + t842 * t964) * MDP(15) + (-t1114 * t1021 + t1112 * t1055 - t1108 * t656 + t1196 * t655 - t614 * t902 - t615 * t901 + t695 * t813 - t696 * t812 - t994 * t961) * MDP(18) + t1105 * MDP(5) * t1146 + (t838 * t892 + t840 * t891 + (t752 * t973 - t753 * t968 + (-t838 * t973 - t840 * t968) * qJD(3)) * t961) * MDP(12) + (-t1092 * t1102 + t1087) * t1161 + (t1050 * t974 + t1088) * t1162; t840 * t838 * MDP(11) + (-t838 ^ 2 + t840 ^ 2) * MDP(12) + (t1034 * t838 + t752) * MDP(13) + (t840 * t1034 - t753) * MDP(14) + t842 * MDP(15) + (-g(1) * t824 + g(2) * t1176 + g(3) * t858 + t744 * t1054 - t785 * t840 + t1038) * MDP(16) + (g(1) * t825 - g(2) * t997 + g(3) * t859 + t1034 * t743 + t785 * t838 + t986) * MDP(17) + ((t695 * t960 - t696 * t963) * pkin(3) + (t655 - t661) * t1055 + (t656 - t660) * t1021) * MDP(18) + (t655 * t660 - t656 * t661 + (t614 * t963 + t615 * t960 - t750 * t840 + t994 * t968 + (-g(1) * t1014 + g(2) * t1015 - g(3) * t1013) * t973) * pkin(3)) * MDP(19) + (-t1053 * t749 + t651 * t967) * MDP(20) + ((t651 + t1189) * t972 + (t1187 * t749 - t652) * t967) * MDP(21) + (t1053 * t1187 + t967 * t694 - t1154) * MDP(22) + (t1096 * t1187 + t1117 + t1155) * MDP(23) + t1187 * t1021 * MDP(24) + (-t623 * t1021 + t955 * t652 - t660 * t747 + (-t1187 * t661 + t1000) * t967 + (-(-t699 - t1097) * t1187 + t992) * t972) * MDP(25) + (t955 * t651 - t1121 * t1187 + t624 * t1021 - t660 * t749 + t1000 * t972 + (-t1097 * t1187 - t992) * t967) * MDP(26) + (t616 * t967 * t971 + t702 * t989) * MDP(27) + (t700 * t709 + t702 * t708 + (-t700 * t971 - t702 * t966) * t1095 + (-t1160 - t617 * t971 + (t700 * t966 - t702 * t971) * qJD(6)) * t967) * MDP(28) + (-t616 * t972 + t698 + (t1127 - t1157) * t967 + t989 * t746) * MDP(29) + (t617 * t972 + (-t1095 * t966 + t708) * t746 + (t1008 + t1190) * t967) * MDP(30) + (-t1188 * t746 - t650 * t972) * MDP(31) + (-t618 * t708 - t625 * t700 - t1175 * t971 + t979 * t966 + (-t954 * t1134 - t599 + (t618 * t966 + t700 * t954) * qJD(5) - t980 * t971) * t972 + (t618 * t1093 + t601 * t966 + t1029 * t1055 + t954 * t617 + (t1156 * t966 - t1029) * qJD(5)) * t967) * MDP(32) + (-t618 * t709 - t625 * t702 + t1175 * t966 + t979 * t971 + (-t954 * t1127 + t598 + (t618 * t971 + t702 * t954) * qJD(5) + t980 * t966) * t972 + (-t618 * t1094 + t601 * t971 + t609 * t1055 + t954 * t616 + (t1052 * t954 - t609) * qJD(5)) * t967) * MDP(33); (-t1021 ^ 2 - t1055 ^ 2) * MDP(18) + (-g(1) * t872 + g(2) * t870 + g(3) * t907 + t1021 * t655 - t1055 * t656 + t682) * MDP(19) + (t1117 - t1155) * MDP(25) - MDP(26) * t1154 + t708 * t746 * MDP(32) + (t709 * t746 + t698) * MDP(33) + ((-t1098 * t966 - t617) * MDP(32) + (-t1098 * t971 - t616) * MDP(33) - t1187 ^ 2 * MDP(26)) * t972 + (qJD(5) * t1187 * MDP(25) - t694 * MDP(26) + (t1008 - t1190) * MDP(32) + (t1094 * t746 - t1127 - t1157) * MDP(33)) * t967; -t747 ^ 2 * MDP(21) + (t651 - t1189) * MDP(22) - t1056 * MDP(23) + t694 * MDP(24) + (-t1187 * t624 + t603 - t999) * MDP(25) + (g(1) * t737 - g(2) * t735 + g(3) * t757 - t1187 * t623 + t648 * t747 - t602) * MDP(26) + (t1052 * t702 + t1160) * MDP(27) + ((t616 - t1159) * t971 + (-t617 - t1158) * t966) * MDP(28) + (t1052 * t746 + t1134) * MDP(29) + (-t746 ^ 2 * t966 + t1127) * MDP(30) + (-pkin(5) * t617 - t1178 * t971 - t624 * t700 + t984 * t966) * MDP(32) + (-pkin(5) * t616 + t1178 * t966 - t624 * t702 + t984 * t971) * MDP(33) + (t747 * MDP(20) + (-qJD(5) - t1187) * MDP(23) - t648 * MDP(25) - t702 * MDP(29) + t700 * MDP(30) - t746 * MDP(31) + t1029 * MDP(32) + t609 * MDP(33) + t749 * MDP(21)) * t749; t702 * t700 * MDP(27) + (-t700 ^ 2 + t702 ^ 2) * MDP(28) + (t1079 + t1159) * MDP(29) + (-t1057 + t1158) * MDP(30) + t650 * MDP(31) + (t609 * t746 - t618 * t702 - g(1) * t688 - g(2) * t1195 - g(3) * (-t757 * t966 - t791 * t971) + t1059) * MDP(32) + (-t1029 * t746 + t618 * t700 + g(1) * t689 - g(2) * t1194 - g(3) * (-t757 * t971 + t791 * t966) - t1030) * MDP(33) + (-MDP(29) * t1153 - MDP(30) * t702 - MDP(32) * t609 + MDP(33) * t1029) * qJD(6);];
tau  = t1;
