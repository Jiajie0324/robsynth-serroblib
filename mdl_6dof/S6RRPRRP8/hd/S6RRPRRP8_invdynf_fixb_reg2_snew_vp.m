% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:25
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRP8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP8_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:25:42
% EndTime: 2019-05-06 18:25:52
% DurationCPUTime: 11.14s
% Computational Cost: add. (57477->319), mult. (125677->396), div. (0->0), fcn. (91389->10), ass. (0->233)
t2485 = sin(qJ(2));
t2521 = qJD(1) * t2485;
t2473 = qJD(2) * t2521;
t2489 = cos(qJ(2));
t2507 = t2489 * qJDD(1);
t2453 = -t2473 + t2507;
t2501 = -qJDD(4) + t2453;
t2500 = -qJDD(5) + t2501;
t2481 = sin(pkin(10));
t2482 = cos(pkin(10));
t2448 = -qJD(2) * t2482 + t2481 * t2521;
t2449 = qJD(2) * t2481 + t2482 * t2521;
t2484 = sin(qJ(4));
t2488 = cos(qJ(4));
t2424 = t2488 * t2448 + t2449 * t2484;
t2425 = -t2448 * t2484 + t2449 * t2488;
t2483 = sin(qJ(5));
t2487 = cos(qJ(5));
t2399 = t2424 * t2487 + t2483 * t2425;
t2401 = -t2424 * t2483 + t2425 * t2487;
t2517 = t2399 * t2401;
t2356 = t2500 - t2517;
t2398 = t2401 ^ 2;
t2520 = qJD(1) * t2489;
t2470 = -qJD(4) + t2520;
t2465 = -qJD(5) + t2470;
t2526 = t2465 ^ 2;
t2535 = -t2398 - t2526;
t2339 = t2356 * t2483 + t2487 * t2535;
t2341 = t2356 * t2487 - t2483 * t2535;
t2300 = t2339 * t2484 - t2341 * t2488;
t2308 = t2339 * t2488 + t2341 * t2484;
t2281 = t2300 * t2481 - t2308 * t2482;
t2486 = sin(qJ(1));
t2561 = t2281 * t2486;
t2490 = cos(qJ(1));
t2560 = t2281 * t2490;
t2283 = t2300 * t2482 + t2308 * t2481;
t2559 = t2283 * t2485;
t2558 = t2283 * t2489;
t2357 = t2500 + t2517;
t2364 = t2399 ^ 2;
t2534 = -t2526 - t2364;
t2538 = t2357 * t2483 + t2487 * t2534;
t2539 = -t2487 * t2357 + t2483 * t2534;
t2540 = t2484 * t2538 + t2488 * t2539;
t2541 = -t2484 * t2539 + t2488 * t2538;
t2546 = -t2481 * t2540 + t2482 * t2541;
t2557 = t2485 * t2546;
t2547 = t2481 * t2541 + t2482 * t2540;
t2556 = t2486 * t2547;
t2555 = t2489 * t2546;
t2554 = t2490 * t2547;
t2505 = qJD(2) * t2520;
t2508 = t2485 * qJDD(1);
t2452 = t2505 + t2508;
t2434 = t2481 * qJDD(2) + t2482 * t2452;
t2502 = -t2482 * qJDD(2) + t2452 * t2481;
t2497 = -t2488 * t2434 + t2484 * t2502;
t2387 = -t2424 * qJD(4) - t2497;
t2496 = -t2484 * t2434 - t2488 * t2502;
t2495 = -t2425 * qJD(4) + t2496;
t2494 = -t2487 * t2387 - t2483 * t2495;
t2493 = -t2399 * qJD(5) - t2494;
t2516 = t2399 * t2465;
t2324 = t2493 - t2516;
t2503 = t2483 * t2387 - t2487 * t2495;
t2498 = (-qJD(5) - t2465) * t2401 - t2503;
t2532 = t2324 * t2483 + t2487 * t2498;
t2533 = -t2487 * t2324 + t2483 * t2498;
t2536 = t2484 * t2532 + t2488 * t2533;
t2537 = -t2484 * t2533 + t2488 * t2532;
t2543 = t2481 * t2537 + t2482 * t2536;
t2350 = t2398 + t2364;
t2542 = -t2481 * t2536 + t2482 * t2537;
t2548 = -t2350 * t2485 + t2489 * t2542;
t2553 = t2486 * t2548 - t2490 * t2543;
t2552 = t2486 * t2543 + t2490 * t2548;
t2549 = t2350 * t2489 + t2485 * t2542;
t2506 = t2448 * t2520;
t2417 = -t2434 + t2506;
t2325 = t2493 + t2516;
t2531 = qJD(2) ^ 2;
t2530 = t2424 ^ 2;
t2529 = t2425 ^ 2;
t2528 = t2448 ^ 2;
t2527 = t2449 ^ 2;
t2525 = t2470 ^ 2;
t2524 = -2 * qJD(3);
t2523 = -2 * qJD(6);
t2522 = t2489 * g(3);
t2515 = t2424 * t2425;
t2514 = t2424 * t2470;
t2513 = t2448 * t2449;
t2479 = t2489 ^ 2;
t2491 = qJD(1) ^ 2;
t2512 = t2479 * t2491;
t2511 = qJD(5) - t2465;
t2462 = t2486 * g(1) - t2490 * g(2);
t2445 = qJDD(1) * pkin(1) + t2491 * pkin(7) + t2462;
t2406 = (-t2452 - t2505) * qJ(3) + (-t2453 + t2473) * pkin(2) - t2445;
t2463 = -g(1) * t2490 - g(2) * t2486;
t2446 = -pkin(1) * t2491 + qJDD(1) * pkin(7) + t2463;
t2432 = -g(3) * t2485 + t2489 * t2446;
t2450 = (-pkin(2) * t2489 - qJ(3) * t2485) * qJD(1);
t2412 = -pkin(2) * t2531 + qJDD(2) * qJ(3) + t2450 * t2520 + t2432;
t2375 = t2482 * t2406 - t2481 * t2412 + t2449 * t2524;
t2421 = -t2453 - t2513;
t2352 = t2421 * pkin(3) + pkin(8) * t2417 + t2375;
t2376 = t2481 * t2406 + t2482 * t2412 + t2448 * t2524;
t2435 = -pkin(3) * t2520 - pkin(8) * t2449;
t2354 = -pkin(3) * t2528 - pkin(8) * t2502 + t2435 * t2520 + t2376;
t2319 = t2484 * t2352 + t2488 * t2354;
t2413 = -pkin(4) * t2470 - pkin(9) * t2425;
t2307 = -pkin(4) * t2530 + pkin(9) * t2495 + t2470 * t2413 + t2319;
t2318 = t2488 * t2352 - t2484 * t2354;
t2393 = -t2501 - t2515;
t2492 = (-t2387 + t2514) * pkin(9) + t2393 * pkin(4) + t2318;
t2286 = t2487 * t2307 + t2483 * t2492;
t2510 = t2470 + qJD(4);
t2478 = t2485 ^ 2;
t2509 = t2478 + t2479;
t2504 = t2449 * t2520;
t2285 = -t2483 * t2307 + t2487 * t2492;
t2499 = -qJD(5) * t2401 - t2503;
t2411 = t2522 + qJDD(3) - t2531 * qJ(3) - qJDD(2) * pkin(2) + (qJD(1) * t2450 + t2446) * t2485;
t2377 = t2502 * pkin(3) - t2528 * pkin(8) + t2449 * t2435 + t2411;
t2334 = -t2495 * pkin(4) - t2530 * pkin(9) + t2425 * t2413 + t2377;
t2469 = t2489 * t2491 * t2485;
t2468 = -t2512 - t2531;
t2467 = -t2478 * t2491 - t2531;
t2461 = -qJDD(2) + t2469;
t2460 = qJDD(2) + t2469;
t2458 = t2509 * t2491;
t2457 = -qJDD(1) * t2486 - t2490 * t2491;
t2456 = qJDD(1) * t2490 - t2486 * t2491;
t2455 = t2509 * qJDD(1);
t2454 = -0.2e1 * t2473 + t2507;
t2451 = 0.2e1 * t2505 + t2508;
t2436 = -t2512 - t2527;
t2431 = -t2485 * t2446 - t2522;
t2430 = t2461 * t2489 - t2467 * t2485;
t2429 = -t2460 * t2485 + t2468 * t2489;
t2428 = t2461 * t2485 + t2467 * t2489;
t2427 = t2460 * t2489 + t2468 * t2485;
t2426 = -t2512 - t2528;
t2420 = t2453 - t2513;
t2419 = -t2502 - t2504;
t2418 = t2502 - t2504;
t2416 = -t2506 - t2434;
t2414 = -t2527 - t2528;
t2410 = -t2525 - t2529;
t2408 = -t2431 * t2485 + t2432 * t2489;
t2407 = t2431 * t2489 + t2432 * t2485;
t2403 = t2420 * t2482 - t2436 * t2481;
t2402 = t2420 * t2481 + t2436 * t2482;
t2397 = -t2525 - t2530;
t2395 = -t2421 * t2481 + t2426 * t2482;
t2394 = t2421 * t2482 + t2426 * t2481;
t2392 = t2501 - t2515;
t2386 = -t2417 * t2481 + t2419 * t2482;
t2385 = t2417 * t2482 + t2419 * t2481;
t2380 = -t2529 - t2530;
t2379 = t2403 * t2489 - t2416 * t2485;
t2378 = t2403 * t2485 + t2416 * t2489;
t2374 = t2395 * t2489 + t2418 * t2485;
t2373 = t2395 * t2485 - t2418 * t2489;
t2372 = t2424 * t2510 + t2497;
t2371 = t2387 + t2514;
t2370 = -t2425 * t2510 + t2496;
t2369 = (qJD(4) - t2470) * t2425 - t2496;
t2368 = t2386 * t2489 + t2414 * t2485;
t2367 = t2386 * t2485 - t2414 * t2489;
t2366 = t2392 * t2488 - t2410 * t2484;
t2365 = t2392 * t2484 + t2410 * t2488;
t2363 = pkin(5) * t2399 - qJ(6) * t2401;
t2360 = -t2393 * t2484 + t2397 * t2488;
t2359 = t2393 * t2488 + t2397 * t2484;
t2346 = -t2375 * t2481 + t2376 * t2482;
t2345 = t2375 * t2482 + t2376 * t2481;
t2344 = t2370 * t2488 - t2372 * t2484;
t2343 = t2370 * t2484 + t2372 * t2488;
t2338 = -t2365 * t2481 + t2366 * t2482;
t2337 = t2365 * t2482 + t2366 * t2481;
t2336 = t2346 * t2489 + t2411 * t2485;
t2335 = t2346 * t2485 - t2411 * t2489;
t2329 = -t2359 * t2481 + t2360 * t2482;
t2328 = t2359 * t2482 + t2360 * t2481;
t2326 = t2399 * t2511 + t2494;
t2322 = -t2401 * t2465 - t2499;
t2321 = t2401 * t2511 + t2503;
t2317 = t2338 * t2489 + t2371 * t2485;
t2316 = t2338 * t2485 - t2371 * t2489;
t2315 = t2329 * t2489 + t2369 * t2485;
t2314 = t2329 * t2485 - t2369 * t2489;
t2313 = -t2343 * t2481 + t2344 * t2482;
t2312 = t2343 * t2482 + t2344 * t2481;
t2303 = t2313 * t2489 + t2380 * t2485;
t2302 = t2313 * t2485 - t2380 * t2489;
t2293 = -t2318 * t2484 + t2319 * t2488;
t2292 = t2318 * t2488 + t2319 * t2484;
t2291 = t2334 + (-pkin(5) * t2465 + t2523) * t2401 - t2499 * pkin(5) - t2325 * qJ(6);
t2276 = t2322 * t2485 + t2555;
t2275 = t2325 * t2485 - t2558;
t2274 = -t2322 * t2489 + t2557;
t2273 = -t2325 * t2489 - t2559;
t2272 = pkin(5) * t2500 - qJ(6) * t2526 + t2401 * t2363 + qJDD(6) - t2285;
t2271 = -pkin(5) * t2526 - qJ(6) * t2500 - t2399 * t2363 + t2465 * t2523 + t2286;
t2270 = -t2292 * t2481 + t2293 * t2482;
t2269 = t2292 * t2482 + t2293 * t2481;
t2268 = t2321 * t2485 + t2555;
t2267 = t2326 * t2485 + t2558;
t2266 = -t2321 * t2489 + t2557;
t2265 = -t2326 * t2489 + t2559;
t2264 = t2270 * t2489 + t2377 * t2485;
t2263 = t2270 * t2485 - t2377 * t2489;
t2262 = -t2285 * t2483 + t2286 * t2487;
t2261 = t2285 * t2487 + t2286 * t2483;
t2256 = t2271 * t2487 + t2272 * t2483;
t2255 = t2271 * t2483 - t2272 * t2487;
t2250 = -t2261 * t2484 + t2262 * t2488;
t2249 = t2261 * t2488 + t2262 * t2484;
t2248 = -t2255 * t2484 + t2256 * t2488;
t2247 = t2255 * t2488 + t2256 * t2484;
t2246 = -t2249 * t2481 + t2250 * t2482;
t2245 = t2249 * t2482 + t2250 * t2481;
t2244 = t2246 * t2489 + t2334 * t2485;
t2243 = t2246 * t2485 - t2334 * t2489;
t2242 = -t2247 * t2481 + t2248 * t2482;
t2241 = t2247 * t2482 + t2248 * t2481;
t2240 = t2242 * t2489 + t2291 * t2485;
t2239 = t2242 * t2485 - t2291 * t2489;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2457, -t2456, 0, -t2462 * t2486 + t2463 * t2490, 0, 0, 0, 0, 0, 0, t2429 * t2490 - t2454 * t2486, t2430 * t2490 + t2451 * t2486, t2455 * t2490 - t2458 * t2486, t2408 * t2490 - t2445 * t2486, 0, 0, 0, 0, 0, 0, t2374 * t2490 + t2394 * t2486, t2379 * t2490 + t2402 * t2486, t2368 * t2490 + t2385 * t2486, t2336 * t2490 + t2345 * t2486, 0, 0, 0, 0, 0, 0, t2315 * t2490 + t2328 * t2486, t2317 * t2490 + t2337 * t2486, t2303 * t2490 + t2312 * t2486, t2264 * t2490 + t2269 * t2486, 0, 0, 0, 0, 0, 0, t2268 * t2490 + t2556, t2275 * t2490 - t2561, t2552, t2244 * t2490 + t2245 * t2486, 0, 0, 0, 0, 0, 0, t2276 * t2490 + t2556, t2552, t2267 * t2490 + t2561, t2240 * t2490 + t2241 * t2486; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2456, t2457, 0, t2462 * t2490 + t2463 * t2486, 0, 0, 0, 0, 0, 0, t2429 * t2486 + t2454 * t2490, t2430 * t2486 - t2451 * t2490, t2455 * t2486 + t2458 * t2490, t2408 * t2486 + t2445 * t2490, 0, 0, 0, 0, 0, 0, t2374 * t2486 - t2394 * t2490, t2379 * t2486 - t2402 * t2490, t2368 * t2486 - t2385 * t2490, t2336 * t2486 - t2345 * t2490, 0, 0, 0, 0, 0, 0, t2315 * t2486 - t2328 * t2490, t2317 * t2486 - t2337 * t2490, t2303 * t2486 - t2312 * t2490, t2264 * t2486 - t2269 * t2490, 0, 0, 0, 0, 0, 0, t2268 * t2486 - t2554, t2275 * t2486 + t2560, t2553, t2244 * t2486 - t2245 * t2490, 0, 0, 0, 0, 0, 0, t2276 * t2486 - t2554, t2553, t2267 * t2486 - t2560, t2240 * t2486 - t2241 * t2490; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2427, t2428, 0, t2407, 0, 0, 0, 0, 0, 0, t2373, t2378, t2367, t2335, 0, 0, 0, 0, 0, 0, t2314, t2316, t2302, t2263, 0, 0, 0, 0, 0, 0, t2266, t2273, t2549, t2243, 0, 0, 0, 0, 0, 0, t2274, t2549, t2265, t2239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2491, -qJDD(1), 0, t2463, 0, 0, 0, 0, 0, 0, t2429, t2430, t2455, t2408, 0, 0, 0, 0, 0, 0, t2374, t2379, t2368, t2336, 0, 0, 0, 0, 0, 0, t2315, t2317, t2303, t2264, 0, 0, 0, 0, 0, 0, t2268, t2275, t2548, t2244, 0, 0, 0, 0, 0, 0, t2276, t2548, t2267, t2240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2491, 0, t2462, 0, 0, 0, 0, 0, 0, t2454, -t2451, t2458, t2445, 0, 0, 0, 0, 0, 0, -t2394, -t2402, -t2385, -t2345, 0, 0, 0, 0, 0, 0, -t2328, -t2337, -t2312, -t2269, 0, 0, 0, 0, 0, 0, -t2547, t2281, -t2543, -t2245, 0, 0, 0, 0, 0, 0, -t2547, -t2543, -t2281, -t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2427, t2428, 0, t2407, 0, 0, 0, 0, 0, 0, t2373, t2378, t2367, t2335, 0, 0, 0, 0, 0, 0, t2314, t2316, t2302, t2263, 0, 0, 0, 0, 0, 0, t2266, t2273, t2549, t2243, 0, 0, 0, 0, 0, 0, t2274, t2549, t2265, t2239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2468, t2461, t2507, t2432, 0, 0, 0, 0, 0, 0, t2395, t2403, t2386, t2346, 0, 0, 0, 0, 0, 0, t2329, t2338, t2313, t2270, 0, 0, 0, 0, 0, 0, t2546, -t2283, t2542, t2246, 0, 0, 0, 0, 0, 0, t2546, t2542, t2283, t2242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2460, t2467, -t2508, t2431, 0, 0, 0, 0, 0, 0, -t2418, t2416, -t2414, -t2411, 0, 0, 0, 0, 0, 0, -t2369, -t2371, -t2380, -t2377, 0, 0, 0, 0, 0, 0, -t2321, -t2325, t2350, -t2334, 0, 0, 0, 0, 0, 0, -t2322, t2350, -t2326, -t2291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2454, t2451, -t2458, -t2445, 0, 0, 0, 0, 0, 0, t2394, t2402, t2385, t2345, 0, 0, 0, 0, 0, 0, t2328, t2337, t2312, t2269, 0, 0, 0, 0, 0, 0, t2547, -t2281, t2543, t2245, 0, 0, 0, 0, 0, 0, t2547, t2543, t2281, t2241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, t2420, t2419, t2376, 0, 0, 0, 0, 0, 0, t2360, t2366, t2344, t2293, 0, 0, 0, 0, 0, 0, t2541, -t2300, t2537, t2250, 0, 0, 0, 0, 0, 0, t2541, t2537, t2300, t2248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2421, t2436, t2417, t2375, 0, 0, 0, 0, 0, 0, t2359, t2365, t2343, t2292, 0, 0, 0, 0, 0, 0, t2540, t2308, t2536, t2249, 0, 0, 0, 0, 0, 0, t2540, t2536, -t2308, t2247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2418, -t2416, t2414, t2411, 0, 0, 0, 0, 0, 0, t2369, t2371, t2380, t2377, 0, 0, 0, 0, 0, 0, t2321, t2325, -t2350, t2334, 0, 0, 0, 0, 0, 0, t2322, -t2350, t2326, t2291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2397, t2392, t2370, t2319, 0, 0, 0, 0, 0, 0, t2538, t2341, t2532, t2262, 0, 0, 0, 0, 0, 0, t2538, t2532, -t2341, t2256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2393, t2410, t2372, t2318, 0, 0, 0, 0, 0, 0, t2539, t2339, t2533, t2261, 0, 0, 0, 0, 0, 0, t2539, t2533, -t2339, t2255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2369, t2371, t2380, t2377, 0, 0, 0, 0, 0, 0, t2321, t2325, -t2350, t2334, 0, 0, 0, 0, 0, 0, t2322, -t2350, t2326, t2291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2534, t2356, t2498, t2286, 0, 0, 0, 0, 0, 0, t2534, t2498, -t2356, t2271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2357, t2535, -t2324, t2285, 0, 0, 0, 0, 0, 0, -t2357, -t2324, -t2535, -t2272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2321, t2325, -t2350, t2334, 0, 0, 0, 0, 0, 0, t2322, -t2350, t2326, t2291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2534, t2498, -t2356, t2271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2322, -t2350, t2326, t2291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2357, t2324, t2535, t2272;];
f_new_reg  = t1;
