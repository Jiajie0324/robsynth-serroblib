% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRP8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP8_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:25:16
% EndTime: 2019-03-09 12:25:23
% DurationCPUTime: 2.47s
% Computational Cost: add. (4990->282), mult. (11824->478), div. (0->0), fcn. (11155->8), ass. (0->133)
t180 = sin(qJ(4));
t179 = pkin(8) + qJ(3);
t182 = cos(qJ(4));
t186 = t179 * t182;
t184 = t180 * qJD(3) + qJD(4) * t186;
t187 = t179 * t180;
t188 = -t182 * qJD(3) + qJD(4) * t187;
t105 = sin(pkin(10));
t106 = cos(pkin(10));
t39 = t188 * t105 - t184 * t106;
t108 = sin(qJ(2));
t132 = -t182 * t105 - t180 * t106;
t129 = t108 * t132;
t120 = qJD(4) * t129;
t109 = cos(qJ(2));
t133 = t180 * t105 - t182 * t106;
t128 = qJD(2) * t133;
t121 = t109 * t128;
t113 = t120 - t121;
t172 = t106 * t109;
t101 = qJD(2) * t108;
t161 = pkin(7) * t101;
t72 = -t108 * qJD(3) + (pkin(2) * t108 - qJ(3) * t109) * qJD(2);
t57 = t105 * t161 + t106 * t72;
t45 = (pkin(3) * t108 - pkin(8) * t172) * qJD(2) + t57;
t173 = t106 * t108;
t174 = t105 * t109;
t65 = t105 * t72;
t48 = t65 + (-pkin(7) * t173 - pkin(8) * t174) * qJD(2);
t144 = -t180 * t48 + t182 * t45;
t154 = qJD(4) * t180;
t155 = qJD(4) * t182;
t164 = pkin(4) * t101;
t142 = -pkin(2) * t109 - qJ(3) * t108;
t81 = -pkin(1) + t142;
t76 = t106 * t81;
t54 = -pkin(8) * t173 + t76 + (-pkin(7) * t105 - pkin(3)) * t109;
t175 = t105 * t108;
t93 = pkin(7) * t172;
t62 = t105 * t81 + t93;
t59 = -pkin(8) * t175 + t62;
t10 = -pkin(9) * t113 - t154 * t54 - t155 * t59 + t144 + t164;
t107 = sin(qJ(5));
t150 = t105 * t154;
t171 = qJD(2) * t109;
t158 = t106 * t171;
t159 = t105 * t171;
t166 = -t155 * t173 - t180 * t158 - t182 * t159;
t131 = -t108 * t150 - t166;
t16 = t154 * t59 - t54 * t155 - t180 * t45 - t182 * t48;
t13 = -pkin(9) * t131 - t16;
t181 = cos(qJ(5));
t143 = -t180 * t59 + t182 * t54;
t70 = t133 * t108;
t23 = -t109 * pkin(4) + t70 * pkin(9) + t143;
t178 = t180 * t54 + t182 * t59;
t28 = pkin(9) * t129 + t178;
t135 = t107 * t23 + t181 * t28;
t4 = -qJD(5) * t135 + t181 * t10 - t107 * t13;
t38 = t184 * t105 + t188 * t106;
t183 = t109 ^ 2;
t110 = 2 * qJD(6);
t177 = -t105 * t187 + t106 * t186;
t176 = t105 * t155 + t106 * t154;
t99 = pkin(7) * t171;
t74 = pkin(3) * t159 + t99;
t80 = pkin(3) * t175 + t108 * pkin(7);
t170 = qJD(3) * t109;
t169 = qJD(5) * t107;
t168 = qJD(6) * t109;
t167 = -0.2e1 * pkin(1) * qJD(2);
t165 = pkin(7) * t174;
t163 = pkin(5) * t101;
t162 = pkin(4) * t169;
t160 = t176 * pkin(4);
t96 = -t106 * pkin(3) - pkin(2);
t157 = t108 * t171;
t153 = qJD(5) * t181;
t149 = 0.2e1 * (t105 ^ 2 + t106 ^ 2) * qJD(3);
t58 = -t106 * t161 + t65;
t141 = -t105 * t57 + t106 * t58;
t118 = -t105 * t186 - t106 * t187;
t116 = pkin(9) * t132 + t118;
t114 = t181 * t116;
t46 = -pkin(9) * t133 + t177;
t26 = t107 * t46 - t114;
t127 = t133 * qJD(4);
t111 = -pkin(9) * t127 - t39;
t112 = -pkin(9) * t176 - t38;
t115 = t107 * t116;
t7 = qJD(5) * t115 + t107 * t112 + t181 * t111 + t46 * t153;
t138 = -t101 * t26 + t7 * t109;
t27 = t181 * t46 + t115;
t6 = -qJD(5) * t114 + t107 * t111 - t181 * t112 + t46 * t169;
t137 = -t101 * t27 - t6 * t109;
t136 = -t107 * t28 + t181 * t23;
t3 = -t107 * t10 - t181 * t13 - t23 * t153 + t169 * t28;
t97 = qJ(6) * t101;
t134 = -t3 + t97;
t130 = t107 * t133;
t126 = -0.2e1 * t127;
t125 = t107 * t129;
t122 = t181 * t133;
t119 = t181 * t129;
t34 = pkin(4) * t131 + t74;
t56 = -pkin(4) * t129 + t80;
t64 = pkin(4) * t133 + t96;
t117 = t109 * t162 + t4;
t100 = pkin(4) * t153;
t98 = -t181 * pkin(4) - pkin(5);
t95 = pkin(4) * t107 + qJ(6);
t94 = -0.2e1 * t162;
t89 = t100 + qJD(6);
t88 = -0.2e1 * t157;
t61 = t76 - t165;
t53 = -t132 * t181 - t130;
t52 = -t107 * t132 + t122;
t44 = -t181 * t70 + t125;
t43 = -t107 * t70 - t119;
t30 = -qJD(5) * t130 - t107 * t127 - t132 * t153 + t181 * t176;
t29 = t107 * t176 - t132 * t169 - (-qJD(4) - qJD(5)) * t122;
t25 = t52 * pkin(5) - t53 * qJ(6) + t64;
t20 = t43 * pkin(5) - t44 * qJ(6) + t56;
t19 = qJD(5) * t125 + t107 * t113 + t181 * t131 - t70 * t153;
t18 = -qJD(5) * t119 + t107 * t131 - t181 * t113 - t70 * t169;
t17 = -t178 * qJD(4) + t144;
t15 = t109 * pkin(5) - t136;
t14 = -qJ(6) * t109 + t135;
t11 = t30 * pkin(5) + t29 * qJ(6) - t53 * qJD(6) + t160;
t5 = t19 * pkin(5) + t18 * qJ(6) - t44 * qJD(6) + t34;
t2 = -t163 - t4;
t1 = t134 - t168;
t8 = [0, 0, 0, 0.2e1 * t157, 0.2e1 * (-t108 ^ 2 + t183) * qJD(2), 0, 0, 0, t108 * t167, t109 * t167, -0.2e1 * t57 * t109 + 0.2e1 * (t61 + 0.2e1 * t165) * t101, 0.2e1 * t58 * t109 + 0.2e1 * (-t62 + 0.2e1 * t93) * t101, 0.2e1 * (-t105 * t58 - t106 * t57) * t108 + 0.2e1 * (-t105 * t62 - t106 * t61) * t171, 0.2e1 * pkin(7) ^ 2 * t157 + 0.2e1 * t57 * t61 + 0.2e1 * t58 * t62, -0.2e1 * t70 * t113, 0.2e1 * t113 * t129 + 0.2e1 * t131 * t70, -0.2e1 * t109 * t120 + 0.2e1 * (-t70 * t108 + t183 * t133) * qJD(2), -0.2e1 * t166 * t109 + 0.2e1 * (qJD(2) * t129 - t109 * t150) * t108, t88, 0.2e1 * t101 * t143 - 0.2e1 * t17 * t109 - 0.2e1 * t74 * t129 + 0.2e1 * t131 * t80, -0.2e1 * t16 * t109 - 0.2e1 * t74 * t70 + 0.2e1 * t80 * t120 + 0.2e1 * (-t80 * t133 * t109 - t178 * t108) * qJD(2), -0.2e1 * t44 * t18, 0.2e1 * t18 * t43 - 0.2e1 * t19 * t44, 0.2e1 * t101 * t44 + 0.2e1 * t109 * t18, -0.2e1 * t101 * t43 + 0.2e1 * t109 * t19, t88, 0.2e1 * t101 * t136 - 0.2e1 * t4 * t109 + 0.2e1 * t56 * t19 + 0.2e1 * t34 * t43, -0.2e1 * t135 * t101 - 0.2e1 * t3 * t109 - 0.2e1 * t56 * t18 + 0.2e1 * t34 * t44, -0.2e1 * t101 * t15 + 0.2e1 * t109 * t2 + 0.2e1 * t19 * t20 + 0.2e1 * t43 * t5, -0.2e1 * t1 * t43 - 0.2e1 * t14 * t19 - 0.2e1 * t15 * t18 + 0.2e1 * t2 * t44, -0.2e1 * t1 * t109 + 0.2e1 * t101 * t14 + 0.2e1 * t18 * t20 - 0.2e1 * t44 * t5, 0.2e1 * t1 * t14 + 0.2e1 * t15 * t2 + 0.2e1 * t20 * t5; 0, 0, 0, 0, 0, t171, -t101, 0, -t99, t161, t105 * t170 + (t105 * t142 - t93) * qJD(2), t106 * t170 + (t106 * t142 + t165) * qJD(2), t141, -pkin(2) * t99 + (-t105 * t61 + t106 * t62) * qJD(3) + t141 * qJ(3), t132 * t121 + (-t129 * t132 + t133 * t70) * qJD(4), t132 * t131 + t176 * t70 + (-t113 - t120) * t133, -t101 * t132 + t109 * t127, -t108 * t128 + t109 * t176, 0, t118 * t101 - t39 * t109 + t96 * t131 + t74 * t133 + t176 * t80, -t177 * t101 - t38 * t109 + t96 * t113 - t80 * t127 - t132 * t74, -t18 * t53 - t29 * t44, t18 * t52 - t19 * t53 + t29 * t43 - t30 * t44, t101 * t53 + t109 * t29, -t101 * t52 + t109 * t30, 0, t160 * t43 + t64 * t19 + t56 * t30 + t34 * t52 + t138, t160 * t44 - t64 * t18 - t56 * t29 + t34 * t53 + t137, t11 * t43 + t19 * t25 + t20 * t30 + t5 * t52 + t138, -t1 * t52 - t14 * t30 - t15 * t29 - t18 * t26 - t19 * t27 + t2 * t53 + t43 * t6 + t44 * t7, -t11 * t44 + t18 * t25 + t20 * t29 - t5 * t53 - t137, t1 * t27 + t11 * t20 - t14 * t6 + t15 * t7 + t2 * t26 + t25 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, qJ(3) * t149, -t132 * t126, 0.2e1 * t133 ^ 2 * qJD(4) + 0.2e1 * t132 * t176, 0, 0, 0, 0.2e1 * t96 * t176, t96 * t126, -0.2e1 * t53 * t29, 0.2e1 * t29 * t52 - 0.2e1 * t30 * t53, 0, 0, 0, 0.2e1 * t160 * t52 + 0.2e1 * t64 * t30, 0.2e1 * t160 * t53 - 0.2e1 * t64 * t29, 0.2e1 * t11 * t52 + 0.2e1 * t25 * t30, -0.2e1 * t26 * t29 - 0.2e1 * t27 * t30 + 0.2e1 * t52 * t6 + 0.2e1 * t53 * t7, -0.2e1 * t11 * t53 + 0.2e1 * t25 * t29, 0.2e1 * t11 * t25 + 0.2e1 * t26 * t7 - 0.2e1 * t27 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, t158, 0, t99, 0, 0, 0, 0, 0, t131, t113, 0, 0, 0, 0, 0, t19, -t18, t19, 0, t18, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, -t127, 0, 0, 0, 0, 0, t30, -t29, t30, 0, t29, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, -t131, t101, t17, t16, 0, 0, -t18, -t19, t101, t181 * t164 + t117 (-t101 * t107 + t109 * t153) * pkin(4) + t3 (pkin(5) - t98) * t101 + t117, t162 * t44 - t18 * t98 - t19 * t95 - t43 * t89, t95 * t101 + (-qJD(6) - t89) * t109 + t134, t1 * t95 + t14 * t89 + t15 * t162 + t2 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, -t176, 0, t39, t38, 0, 0, -t29, -t30, 0, -t7, t6, -t7, t162 * t53 - t29 * t98 - t30 * t95 - t52 * t89, -t6, t162 * t26 + t27 * t89 - t6 * t95 + t7 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, -0.2e1 * t100, t94, 0, 0.2e1 * t89, 0.2e1 * t162 * t98 + 0.2e1 * t89 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t19, t101, t4, t3, t4 + 0.2e1 * t163, pkin(5) * t18 - qJ(6) * t19 - qJD(6) * t43, -t3 + 0.2e1 * t97 - 0.2e1 * t168, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t30, 0, -t7, t6, -t7, pkin(5) * t29 - qJ(6) * t30 - qJD(6) * t52, -t6, -pkin(5) * t7 - qJ(6) * t6 + qJD(6) * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, -t100, -t162, 0, t110 + t100, -pkin(5) * t162 + qJ(6) * t89 + qJD(6) * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, qJ(6) * t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, -t18, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
