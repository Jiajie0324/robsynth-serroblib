% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP8_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:25:23
% EndTime: 2019-03-09 12:25:46
% DurationCPUTime: 12.34s
% Computational Cost: add. (18558->744), mult. (42346->916), div. (0->0), fcn. (31525->14), ass. (0->344)
t294 = sin(pkin(10));
t299 = sin(qJ(2));
t419 = qJD(1) * t299;
t400 = t294 * t419;
t295 = cos(pkin(10));
t410 = t295 * qJD(2);
t227 = t400 - t410;
t398 = t295 * t419;
t417 = qJD(2) * t294;
t229 = t398 + t417;
t298 = sin(qJ(4));
t301 = cos(qJ(4));
t149 = t227 * t298 - t229 * t301;
t297 = sin(qJ(5));
t370 = -t227 * t301 - t298 * t229;
t482 = cos(qJ(5));
t98 = t297 * t149 + t370 * t482;
t521 = t98 ^ 2;
t302 = cos(qJ(2));
t418 = qJD(1) * t302;
t268 = -qJD(4) + t418;
t260 = -qJD(5) + t268;
t520 = t260 * t98;
t235 = t294 * t301 + t295 * t298;
t187 = t235 * t418;
t492 = t235 * qJD(4);
t498 = t187 - t492;
t437 = t295 * t301;
t365 = t294 * t298 - t437;
t188 = t365 * t418;
t493 = qJD(4) * t365;
t497 = t188 - t493;
t406 = t299 * qJDD(1);
t275 = pkin(7) * t406;
t408 = qJD(1) * qJD(2);
t394 = t302 * t408;
t204 = -qJDD(2) * pkin(2) + pkin(7) * t394 + qJDD(3) + t275;
t289 = g(3) * t302;
t300 = sin(qJ(1));
t303 = cos(qJ(1));
t380 = g(1) * t303 + g(2) * t300;
t326 = -t380 * t299 + t289;
t314 = t204 + t326;
t283 = t302 * qJDD(1);
t347 = t299 * t408 - t283;
t234 = qJDD(4) + t347;
t220 = qJDD(5) + t234;
t291 = pkin(10) + qJ(4);
t284 = qJ(5) + t291;
t270 = sin(t284);
t468 = pkin(8) + qJ(3);
t249 = t468 * t294;
t250 = t468 * t295;
t434 = t298 * t250;
t165 = -t301 * t249 - t434;
t478 = pkin(9) * t235;
t131 = t165 - t478;
t166 = -t298 * t249 + t301 * t250;
t518 = t365 * pkin(9) - t166;
t87 = t297 * t131 - t482 * t518;
t519 = -t87 * t220 + t270 * t326;
t509 = -t149 * t482 + t297 * t370;
t484 = t509 ^ 2;
t279 = t295 * qJDD(2);
t348 = t394 + t406;
t178 = t294 * t348 - t279;
t407 = t294 * qJDD(2);
t179 = t295 * t348 + t407;
t412 = qJD(4) * t301;
t413 = qJD(4) * t298;
t361 = t301 * t178 + t298 * t179 - t227 * t413 + t229 * t412;
t89 = t298 * t178 - t301 * t179 + t227 * t412 + t229 * t413;
t34 = qJD(5) * t509 - t297 * t89 + t482 * t361;
t503 = t260 * t509;
t513 = t34 + t503;
t517 = t149 ^ 2;
t243 = -qJD(2) * pkin(2) + pkin(7) * t419 + qJD(3);
t170 = pkin(3) * t227 + t243;
t109 = -pkin(4) * t370 + t170;
t41 = -pkin(5) * t98 - qJ(6) * t509 + t109;
t516 = t41 * t98;
t515 = t109 * t98;
t514 = t98 * t509;
t512 = t149 * t268;
t333 = t482 * t365;
t411 = qJD(5) * t297;
t425 = t235 * t411 - (-qJD(4) - qJD(5)) * t333 - t188 * t482 - t498 * t297;
t401 = t482 * t235;
t154 = -t297 * t365 + t401;
t424 = qJD(4) * t401 + qJD(5) * t154 - t187 * t482 + t297 * t497;
t404 = -t484 + t521;
t396 = qJD(5) * t482;
t33 = -t149 * t411 + t297 * t361 - t370 * t396 + t482 * t89;
t510 = -t33 + t520;
t56 = pkin(5) * t509 - qJ(6) * t98;
t508 = t370 ^ 2;
t202 = t365 * t299;
t506 = pkin(9) * t202;
t414 = qJD(3) * t294;
t423 = qJD(3) * t437 - t249 * t412;
t108 = -t298 * t414 + (-t434 - t478) * qJD(4) + t423;
t343 = t235 * qJD(3);
t494 = qJD(4) * t518 - t343;
t374 = pkin(2) * t299 - qJ(3) * t302;
t240 = t374 * qJD(1);
t171 = pkin(7) * t400 + t295 * t240;
t436 = t295 * t302;
t362 = pkin(3) * t299 - pkin(8) * t436;
t137 = qJD(1) * t362 + t171;
t214 = t294 * t240;
t438 = t295 * t299;
t439 = t294 * t302;
t350 = -pkin(7) * t438 - pkin(8) * t439;
t155 = qJD(1) * t350 + t214;
t91 = t301 * t137 - t155 * t298;
t69 = pkin(4) * t419 + pkin(9) * t188 + t91;
t92 = t298 * t137 + t301 * t155;
t75 = -pkin(9) * t187 + t92;
t464 = t87 * qJD(5) + (-t494 + t69) * t482 + (t108 - t75) * t297;
t504 = t235 * t361;
t502 = t268 * t370;
t277 = pkin(7) * t418;
t399 = t294 * t418;
t221 = pkin(3) * t399 + t277;
t499 = -pkin(4) * t498 - t221;
t375 = pkin(2) * t302 + qJ(3) * t299;
t245 = -pkin(1) - t375;
t226 = t295 * t245;
t156 = -pkin(8) * t438 + t226 + (-pkin(7) * t294 - pkin(3)) * t302;
t185 = pkin(7) * t436 + t294 * t245;
t440 = t294 * t299;
t164 = -pkin(8) * t440 + t185;
t104 = t298 * t156 + t301 * t164;
t211 = t220 * qJ(6);
t248 = t260 * qJD(6);
t496 = t211 - t248;
t472 = t178 * pkin(3);
t128 = t204 + t472;
t495 = t128 * t235 - t170 * t493;
t292 = t299 ^ 2;
t293 = t302 ^ 2;
t421 = t292 - t293;
t386 = qJD(1) * t421;
t346 = qJD(2) * t235;
t213 = t220 * pkin(5);
t491 = t213 - qJDD(6);
t490 = t34 * pkin(5) + t33 * qJ(6) - qJD(6) * t509;
t271 = cos(t284);
t430 = t300 * t302;
t180 = t270 * t430 + t271 * t303;
t428 = t303 * t270;
t431 = t300 * t271;
t182 = t302 * t428 - t431;
t217 = t245 * qJD(1);
t251 = qJD(2) * qJ(3) + t277;
t157 = t295 * t217 - t251 * t294;
t113 = -pkin(3) * t418 - pkin(8) * t229 + t157;
t158 = t294 * t217 + t295 * t251;
t116 = -pkin(8) * t227 + t158;
t71 = t113 * t298 + t116 * t301;
t209 = qJD(2) * t374 - t299 * qJD(3);
t148 = qJD(1) * t209 + qJDD(1) * t245;
t192 = -pkin(7) * t347 + qJDD(2) * qJ(3) + qJD(2) * qJD(3);
t106 = t295 * t148 - t294 * t192;
t76 = pkin(3) * t347 - t179 * pkin(8) + t106;
t107 = t294 * t148 + t295 * t192;
t90 = -pkin(8) * t178 + t107;
t26 = -qJD(4) * t71 - t298 * t90 + t301 * t76;
t15 = t234 * pkin(4) + t89 * pkin(9) + t26;
t25 = t113 * t412 - t116 * t413 + t298 * t76 + t301 * t90;
t18 = -pkin(9) * t361 + t25;
t70 = t301 * t113 - t116 * t298;
t61 = pkin(9) * t149 + t70;
t57 = -pkin(4) * t268 + t61;
t62 = pkin(9) * t370 + t71;
t388 = -t482 * t15 + t297 * t18 + t62 * t396 + t57 * t411;
t445 = t270 * t299;
t323 = g(1) * t182 + g(2) * t180 + g(3) * t445 - t388;
t313 = t41 * t509 - t323 - t491;
t489 = -t109 * t509 + t323;
t153 = t235 * t297 + t333;
t488 = -t220 * t153 + t260 * t424 - t419 * t98;
t473 = g(3) * t299;
t487 = t302 * t380 + t473;
t415 = qJD(2) * t302;
t133 = t299 * t492 + t365 * t415;
t416 = qJD(2) * t299;
t405 = pkin(7) * t416;
t162 = t295 * t209 + t294 * t405;
t127 = qJD(2) * t362 + t162;
t190 = t294 * t209;
t139 = qJD(2) * t350 + t190;
t53 = -qJD(4) * t104 + t301 * t127 - t298 * t139;
t43 = pkin(4) * t416 + pkin(9) * t133 + t53;
t331 = t302 * t346;
t402 = t298 * t127 + t301 * t139 + t156 * t412;
t435 = t298 * t164;
t46 = -pkin(9) * t331 + (-t435 + t506) * qJD(4) + t402;
t103 = t301 * t156 - t435;
t79 = -pkin(4) * t302 + t103 + t506;
t349 = t235 * t299;
t88 = -pkin(9) * t349 + t104;
t462 = t297 * t79 + t482 * t88;
t9 = -qJD(5) * t462 - t297 * t46 + t43 * t482;
t486 = -t153 * t33 + t154 * t34 + t424 * t509 + t425 * t98;
t485 = -0.2e1 * pkin(1);
t481 = pkin(3) * t294;
t480 = pkin(7) * t227;
t479 = pkin(7) * t229;
t477 = g(1) * t300;
t474 = g(2) * t303;
t354 = t131 * t482 + t297 * t518;
t35 = t354 * qJD(5) + t482 * t108 + t297 * t494;
t40 = t297 * t69 + t482 * t75;
t37 = qJ(6) * t419 + t40;
t467 = t35 - t37;
t466 = t35 - t40;
t465 = pkin(5) * t419 + t464;
t463 = pkin(5) * t424 + qJ(6) * t425 - t154 * qJD(6) + t499;
t403 = t482 * t62;
t29 = t297 * t57 + t403;
t461 = t260 * t29;
t459 = t297 * t62;
t456 = t89 * t235;
t454 = (-qJD(4) * t250 - t414) * t298 + t423 - t92;
t453 = -qJD(4) * t166 - t343 - t91;
t31 = t482 * t61 - t459;
t452 = pkin(4) * t396 + qJD(6) - t31;
t451 = pkin(7) * qJDD(1);
t449 = t149 * t370;
t448 = t178 * t295;
t447 = t179 * t294;
t446 = t235 * t234;
t444 = t271 * t299;
t282 = cos(t291);
t443 = t282 * t300;
t442 = t282 * t303;
t305 = qJD(1) ^ 2;
t441 = t293 * t305;
t433 = t299 * t300;
t432 = t299 * t303;
t273 = t295 * pkin(3) + pkin(2);
t239 = pkin(4) * t282 + t273;
t216 = t302 * t239;
t429 = t302 * t303;
t28 = t482 * t57 - t459;
t426 = qJD(6) - t28;
t222 = (pkin(7) + t481) * t415;
t241 = pkin(3) * t440 + t299 * pkin(7);
t422 = t303 * pkin(1) + t300 * pkin(7);
t420 = t292 + t293;
t409 = qJD(3) - t243;
t397 = t260 * t419;
t393 = t294 * t406;
t392 = t294 * t283;
t391 = t295 * t406;
t390 = t295 * t283;
t3 = t297 * t15 + t482 * t18 + t57 * t396 - t62 * t411;
t183 = t270 * t300 + t271 * t429;
t387 = -t182 * pkin(5) + qJ(6) * t183;
t385 = t299 * t394;
t30 = t297 * t61 + t403;
t384 = pkin(4) * t411 - t30;
t269 = g(1) * t433;
t383 = -g(2) * t432 + t269;
t382 = g(1) * t180 - g(2) * t182;
t181 = t271 * t430 - t428;
t381 = g(1) * t181 - g(2) * t183;
t379 = -t474 + t477;
t377 = -t484 - t521;
t329 = t299 * t401;
t125 = -t202 * t297 + t329;
t126 = -t202 * t482 - t297 * t349;
t308 = t299 * t493 - t331;
t65 = qJD(5) * t126 - t297 * t133 - t308 * t482;
t376 = t125 * t34 - t65 * t98;
t373 = pkin(5) * t271 + qJ(6) * t270;
t371 = t227 * t295 + t229 * t294;
t367 = t273 * t302 + t299 * t468;
t364 = qJD(1) * (t227 + t410);
t363 = qJD(1) * (-t229 + t417);
t50 = -t297 * t88 + t482 * t79;
t356 = -pkin(7) * qJDD(2) + t408 * t485;
t8 = t297 * t43 + t79 * t396 - t411 * t88 + t482 * t46;
t351 = t153 * t34 - t424 * t98;
t340 = t361 * pkin(4);
t339 = pkin(1) * t305 + t380;
t304 = qJD(2) ^ 2;
t338 = pkin(7) * t304 + qJDD(1) * t485 + t474;
t281 = sin(t291);
t242 = pkin(4) * t281 + t481;
t290 = -pkin(9) - t468;
t336 = t239 * t429 + t300 * t242 - t290 * t432 + t422;
t335 = g(2) * t299 * t431 + t354 * t220 + (g(1) * t432 - t289) * t271;
t287 = t303 * pkin(7);
t330 = t303 * t242 + t290 * t433 + t287 + (-pkin(1) - t216) * t300;
t328 = t33 + t520;
t324 = g(1) * t183 + g(2) * t181 + g(3) * t444 - t3;
t64 = qJD(5) * t329 + t133 * t482 - t202 * t411 - t297 * t308;
t322 = t125 * t33 - t126 * t34 - t509 * t65 - t64 * t98;
t189 = pkin(4) * t365 - t273;
t160 = pkin(4) * t349 + t241;
t320 = t125 * t220 - t260 * t65 - t302 * t34 - t416 * t98;
t318 = -t260 * t28 + t324;
t317 = -g(2) * (-t180 * pkin(5) + t181 * qJ(6)) - g(3) * (-pkin(5) * t445 + qJ(6) * t444);
t315 = t33 * t354 - t87 * t34 + t35 * t98 - t487;
t311 = t34 - t503;
t310 = g(2) * t442 + t281 * t487;
t66 = t340 + t128;
t309 = t314 + t472;
t110 = -pkin(4) * t308 + t222;
t307 = t340 + t309;
t274 = -pkin(4) * t482 - pkin(5);
t272 = pkin(4) * t297 + qJ(6);
t264 = t299 * t305 * t302;
t255 = pkin(4) * t443;
t224 = qJDD(1) * t293 - 0.2e1 * t385;
t196 = t281 * t300 + t282 * t429;
t195 = -t281 * t429 + t443;
t194 = t281 * t303 - t282 * t430;
t193 = t281 * t430 + t442;
t184 = -pkin(7) * t439 + t226;
t172 = -pkin(7) * t398 + t214;
t163 = -t295 * t405 + t190;
t161 = -t220 * t302 - t260 * t416;
t85 = t153 * pkin(5) - t154 * qJ(6) + t189;
t67 = t125 * pkin(5) - t126 * qJ(6) + t160;
t52 = -t164 * t413 + t402;
t49 = -pkin(4) * t149 + t56;
t48 = t302 * pkin(5) - t50;
t47 = -qJ(6) * t302 + t462;
t32 = t154 * t220 + t260 * t425 - t419 * t509;
t24 = -t260 * qJ(6) + t29;
t23 = t260 * pkin(5) + t426;
t19 = t65 * pkin(5) + t64 * qJ(6) - t126 * qJD(6) + t110;
t12 = -t126 * t33 - t509 * t64;
t11 = t126 * t220 + t260 * t64 + t302 * t33 + t416 * t509;
t10 = -t154 * t33 - t425 * t509;
t7 = -pkin(5) * t416 - t9;
t6 = qJ(6) * t416 - qJD(6) * t302 + t8;
t5 = t66 + t490;
t2 = t388 - t491;
t1 = t3 + t496;
t4 = [0, 0, 0, 0, 0, qJDD(1), t379, t380, 0, 0, qJDD(1) * t292 + 0.2e1 * t385, -0.2e1 * qJD(2) * t386 + 0.2e1 * t283 * t299, qJDD(2) * t299 + t302 * t304, t224, qJDD(2) * t302 - t299 * t304, 0, t356 * t299 + (-t338 + t477) * t302, t299 * t338 + t302 * t356 - t269, 0.2e1 * t420 * t451 - t380, -g(1) * (-pkin(1) * t300 + t287) - g(2) * t422 + (pkin(7) ^ 2 * t420 + pkin(1) ^ 2) * qJDD(1) (t179 * t299 + t229 * t415) * t295 (-t447 - t448) * t299 - t371 * t415 (-t179 - t391) * t302 + (t229 * t299 + t295 * t386) * qJD(2) (t178 * t299 + t227 * t415) * t294 (t178 + t393) * t302 + (-t227 * t299 - t294 * t386) * qJD(2), t224, -t380 * t294 + (pkin(7) * t178 + t204 * t294 + (qJD(1) * t184 + t157) * qJD(2)) * t299 + (-t162 * qJD(1) - t184 * qJDD(1) - t106 + t379 * t295 + (t243 * t294 + t480) * qJD(2)) * t302, -t380 * t295 + (pkin(7) * t179 + t204 * t295 + (-qJD(1) * t185 - t158) * qJD(2)) * t299 + (t163 * qJD(1) + t185 * qJDD(1) + t107 - t379 * t294 + (t243 * t295 + t479) * qJD(2)) * t302, -t162 * t229 - t163 * t227 - t178 * t185 - t179 * t184 + t269 + (-t157 * t295 - t158 * t294) * t415 + (-t106 * t295 - t107 * t294 - t474) * t299, t107 * t185 + t158 * t163 + t106 * t184 + t157 * t162 - g(1) * t287 - g(2) * (t303 * t375 + t422) - t245 * t477 + (t204 * t299 + t243 * t415) * pkin(7), t133 * t149 + t202 * t89, -t133 * t370 + t202 * t361 + t149 * t331 + (-t149 * t493 + t456) * t299, t133 * t268 - t149 * t416 - t202 * t234 + t302 * t89, -t370 * t331 + (t370 * t493 + t504) * t299 (t268 * t346 + t361) * t302 + (qJD(2) * t370 - t268 * t493 - t446) * t299, -t234 * t302 - t268 * t416, -t53 * t268 + t103 * t234 - t222 * t370 + t241 * t361 - g(1) * t194 - g(2) * t196 + (t170 * t346 - t26) * t302 + (t70 * qJD(2) + t495) * t299, -g(1) * t193 - g(2) * t195 - t104 * t234 - t128 * t202 - t133 * t170 - t149 * t222 - t241 * t89 + t25 * t302 + t268 * t52 - t416 * t71, t52 * t370 - t104 * t361 + t53 * t149 + t103 * t89 + t26 * t202 + t70 * t133 + t269 - t71 * t331 + (-t235 * t25 + t493 * t71 - t474) * t299, t25 * t104 + t71 * t52 + t26 * t103 + t70 * t53 + t128 * t241 + t170 * t222 - g(1) * (t303 * t481 + t287) - g(2) * (t273 * t429 + t432 * t468 + t422) + (-g(1) * (-pkin(1) - t367) - g(2) * t481) * t300, t12, t322, t11, t376, -t320, t161, t109 * t65 - t110 * t98 + t125 * t66 + t160 * t34 + t220 * t50 - t260 * t9 + t28 * t416 + t302 * t388 + t381, -t109 * t64 + t110 * t509 + t126 * t66 - t160 * t33 - t220 * t462 + t260 * t8 - t29 * t416 + t3 * t302 - t382, -t125 * t3 + t126 * t388 + t28 * t64 - t29 * t65 + t33 * t50 - t34 * t462 - t509 * t9 + t8 * t98 + t383, -g(1) * t330 - g(2) * t336 + t109 * t110 + t66 * t160 + t28 * t9 + t29 * t8 + t3 * t462 - t388 * t50, t12, t11, -t322, t161, t320, t376, t125 * t5 - t19 * t98 + t2 * t302 - t220 * t48 - t23 * t416 + t260 * t7 + t34 * t67 + t41 * t65 + t381, -t1 * t125 + t126 * t2 - t23 * t64 - t24 * t65 - t33 * t48 - t34 * t47 + t509 * t7 + t6 * t98 + t383, -t1 * t302 - t126 * t5 - t19 * t509 + t220 * t47 + t24 * t416 - t260 * t6 + t33 * t67 + t41 * t64 + t382, t1 * t47 + t24 * t6 + t5 * t67 + t41 * t19 + t2 * t48 + t23 * t7 - g(1) * (-pkin(5) * t181 - qJ(6) * t180 + t330) - g(2) * (pkin(5) * t183 + qJ(6) * t182 + t336); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t264, t421 * t305, t406, t264, t283, qJDD(2), t299 * t339 - t275 - t289, t473 + (t339 - t451) * t302, 0, 0, -t229 * t295 * t418 + t447, -t294 * t178 + t179 * t295 + t371 * t418, t295 * t441 + t299 * t363 - t392, -t227 * t399 - t448, -t294 * t441 + t299 * t364 - t390, t264, qJ(3) * t392 - pkin(2) * t178 - t314 * t295 + ((-qJ(3) * t417 - t157) * t299 + (t294 * t409 + t171 - t480) * t302) * qJD(1), qJ(3) * t390 - pkin(2) * t179 + t314 * t294 + ((-qJ(3) * t410 + t158) * t299 + (t295 * t409 - t172 - t479) * t302) * qJD(1), t171 * t229 + t172 * t227 + (-qJ(3) * t178 - qJD(3) * t227 + t157 * t418 + t107) * t295 + (qJ(3) * t179 + qJD(3) * t229 + t158 * t418 - t106) * t294 - t487, -t243 * t277 - t157 * t171 - t158 * t172 + (-t157 * t294 + t158 * t295) * qJD(3) - t314 * pkin(2) + (-t106 * t294 + t107 * t295 - t487) * qJ(3), -t149 * t497 - t456, -t504 + t89 * t365 + t188 * t370 - t149 * t187 + (t149 * t235 - t365 * t370) * qJD(4), t149 * t419 - t268 * t497 + t446, t361 * t365 + t370 * t498, -t234 * t365 - t268 * t498 - t370 * t419, t268 * t419, t128 * t365 + t165 * t234 - t170 * t498 + t221 * t370 - t268 * t453 - t273 * t361 - t282 * t326 - t419 * t70, t149 * t221 - t166 * t234 + t170 * t188 + t268 * t454 + t273 * t89 + t281 * t326 + t419 * t71 + t495, -t166 * t361 - t25 * t365 + t165 * t89 - t26 * t235 + t71 * t187 - t70 * t188 + t453 * t149 + t454 * t370 + (-t235 * t71 + t365 * t70) * qJD(4) - t487, -g(3) * t367 - t128 * t273 + t26 * t165 + t25 * t166 - t170 * t221 + t453 * t70 + t454 * t71 + t380 * (t273 * t299 - t302 * t468) t10, -t486, t32, t351, t488, t397, t109 * t424 + t66 * t153 + t189 * t34 + t260 * t464 - t28 * t419 - t499 * t98 + t335, -t109 * t425 + t66 * t154 - t189 * t33 + t260 * t466 + t29 * t419 + t499 * t509 + t519, -t153 * t3 + t154 * t388 + t28 * t425 - t29 * t424 - t40 * t98 + t464 * t509 + t315, t3 * t87 - t388 * t354 + t66 * t189 - g(3) * (-t299 * t290 + t216) + t466 * t29 - t464 * t28 + t380 * (t239 * t299 + t290 * t302) + t499 * t109, t10, t32, t486, t397, -t488, t351, t153 * t5 + t23 * t419 + t260 * t465 + t34 * t85 + t41 * t424 - t463 * t98 + t335, -t1 * t153 + t154 * t2 - t23 * t425 - t24 * t424 - t37 * t98 + t465 * t509 + t315, -t154 * t5 - t24 * t419 - t260 * t467 + t33 * t85 + t41 * t425 - t463 * t509 - t519, -g(3) * t216 + t1 * t87 - t2 * t354 + t5 * t85 + t463 * t41 + t467 * t24 + t465 * t23 + (-g(3) * t373 + t290 * t380) * t302 + (g(3) * t290 + t380 * (t239 + t373)) * t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t302 * t363 - t279 + t393, t302 * t364 + t391 + t407, -t227 ^ 2 - t229 ^ 2, t157 * t229 + t158 * t227 + t314, 0, 0, 0, 0, 0, 0, t361 + t512, -t89 - t502, -t508 - t517, -t149 * t70 - t370 * t71 + t309, 0, 0, 0, 0, 0, 0, t311, -t328, t377, t28 * t509 - t29 * t98 + t307, 0, 0, 0, 0, 0, 0, t311, t377, t328, -t23 * t509 - t24 * t98 + t307 + t490; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, -t508 + t517, -t89 + t502, -t449, -t361 + t512, t234, -g(1) * t195 + g(2) * t193 + t149 * t170 - t268 * t71 + t281 * t473 + t26, g(1) * t196 - g(2) * t194 - t170 * t370 - t268 * t70 + t282 * t473 - t25, 0, 0, -t514, -t404, t510, t514, -t513, t220, -t30 * t260 + (-t149 * t98 + t220 * t482 + t260 * t411) * pkin(4) + t489, -t515 - t31 * t260 + (t149 * t509 - t220 * t297 + t260 * t396) * pkin(4) + t324, t28 * t98 + t29 * t509 - t30 * t509 - t31 * t98 + (t482 * t33 - t297 * t34 + (t297 * t509 + t482 * t98) * qJD(5)) * pkin(4), -g(1) * t255 + t28 * t30 - t29 * t31 + (-t388 * t482 + t109 * t149 + t3 * t297 + (-t28 * t297 + t29 * t482) * qJD(5) + t310) * pkin(4), -t514, t510, t404, t220, t513, t514, -t220 * t274 + t260 * t384 + t49 * t98 - t313, -t272 * t34 - t274 * t33 + (t24 + t384) * t509 - (t23 - t452) * t98, t220 * t272 - t260 * t452 + t49 * t509 - t324 + t496 + t516, t1 * t272 + t2 * t274 - t41 * t49 - t23 * t30 - g(1) * (t255 + t387) + t452 * t24 + (t23 * t411 + t310) * pkin(4) + t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t514, -t404, t510, t514, -t513, t220, -t461 + t489, t318 - t515, 0, 0, -t514, t510, t404, t220, t513, t514, t56 * t98 + t213 - t313 - t461, pkin(5) * t33 - qJ(6) * t34 + (t24 - t29) * t509 - (t23 - t426) * t98, t509 * t56 + 0.2e1 * t211 - 0.2e1 * t248 - t318 + t516, -t2 * pkin(5) - g(1) * t387 + t1 * qJ(6) - t23 * t29 + t24 * t426 - t41 * t56 + t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t220 - t514, t510, -t260 ^ 2 - t484, t24 * t260 + t313;];
tau_reg  = t4;
