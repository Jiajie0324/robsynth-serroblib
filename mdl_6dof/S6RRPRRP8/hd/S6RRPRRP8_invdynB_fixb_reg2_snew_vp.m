% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:25
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:23:34
% EndTime: 2019-05-06 18:24:38
% DurationCPUTime: 61.78s
% Computational Cost: add. (215473->818), mult. (471500->1180), div. (0->0), fcn. (347185->10), ass. (0->586)
t1125 = sin(qJ(1));
t1129 = cos(qJ(1));
t1124 = sin(qJ(2));
t1128 = cos(qJ(2));
t1122 = sin(qJ(5));
t1126 = cos(qJ(5));
t1120 = sin(pkin(10));
t1121 = cos(pkin(10));
t1198 = qJD(1) * t1124;
t1077 = -t1121 * qJD(2) + t1120 * t1198;
t1078 = qJD(2) * t1120 + t1121 * t1198;
t1123 = sin(qJ(4));
t1127 = cos(qJ(4));
t1035 = -t1077 * t1123 + t1078 * t1127;
t1197 = qJD(1) * t1128;
t1159 = qJD(2) * t1197;
t1172 = qJDD(1) * t1124;
t1085 = t1159 + t1172;
t1056 = t1120 * qJDD(2) + t1121 * t1085;
t1142 = qJDD(2) * t1121 - t1085 * t1120;
t1155 = t1123 * t1056 - t1127 * t1142;
t1138 = -qJD(4) * t1035 - t1155;
t1034 = t1127 * t1077 + t1078 * t1123;
t959 = -t1034 * qJD(4) + t1127 * t1056 + t1123 * t1142;
t982 = t1126 * t1034 + t1035 * t1122;
t1168 = t982 * qJD(5) - t1122 * t1138 - t1126 * t959;
t1107 = -qJD(4) + t1197;
t1099 = -qJD(5) + t1107;
t964 = t982 * t1099;
t1251 = t964 - t1168;
t1110 = qJD(2) * t1198;
t1170 = qJDD(1) * t1128;
t1086 = -t1110 + t1170;
t1079 = -qJDD(4) + t1086;
t1075 = -qJDD(5) + t1079;
t984 = -t1034 * t1122 + t1035 * t1126;
t1224 = t982 * t984;
t1132 = t1075 - t1224;
t1206 = t1126 * t1132;
t1229 = t1099 ^ 2;
t981 = t984 ^ 2;
t946 = -t981 - t1229;
t835 = t1122 * t946 - t1206;
t1216 = t1122 * t1132;
t853 = t1126 * t946 + t1216;
t759 = t1123 * t835 - t1127 * t853;
t761 = t1123 * t853 + t1127 * t835;
t712 = t1120 * t759 - t1121 * t761;
t675 = t1124 * t1251 + t1128 * t712;
t700 = t1120 * t761 + t1121 * t759;
t639 = t1125 * t675 + t1129 * t700;
t1368 = pkin(6) * t639;
t641 = -t1125 * t700 + t1129 * t675;
t1367 = pkin(6) * t641;
t673 = t1124 * t712 - t1128 * t1251;
t1366 = pkin(7) * t673;
t1365 = pkin(1) * t673 - pkin(2) * t1251 + qJ(3) * t712;
t1364 = -pkin(1) * t700 - pkin(7) * t675;
t1157 = t1122 * t959 - t1126 * t1138;
t1135 = (-qJD(5) - t1099) * t984 - t1157;
t1233 = t982 ^ 2;
t961 = t1233 - t1229;
t868 = t1122 * t961 - t1206;
t872 = t1126 * t961 + t1216;
t790 = t1123 * t872 + t1127 * t868;
t793 = t1123 * t868 - t1127 * t872;
t723 = t1120 * t790 + t1121 * t793;
t690 = -t1124 * t1135 + t1128 * t723;
t720 = t1120 * t793 - t1121 * t790;
t1363 = t1125 * t690 - t1129 * t720;
t822 = (qJD(5) - t1099) * t984 + t1157;
t752 = -t1122 * t822 + t1126 * t1251;
t1219 = t1122 * t1251;
t755 = t1126 * t822 + t1219;
t692 = t1123 * t755 - t1127 * t752;
t696 = t1123 * t752 + t1127 * t755;
t634 = t1120 * t692 - t1121 * t696;
t911 = t981 - t1233;
t627 = t1124 * t911 + t1128 * t634;
t630 = t1120 * t696 + t1121 * t692;
t1362 = t1125 * t627 + t1129 * t630;
t1361 = t1125 * t720 + t1129 * t690;
t1360 = -t1125 * t630 + t1129 * t627;
t1358 = qJ(3) * t700;
t1351 = -pkin(2) * t700 - pkin(3) * t759 + pkin(4) * t853;
t1349 = t1124 * t723 + t1128 * t1135;
t1348 = t1124 * t634 - t1128 * t911;
t1347 = pkin(8) * t759;
t1345 = pkin(3) * t1251 + pkin(8) * t761;
t1250 = t964 + t1168;
t1239 = -t1122 * t1250 + t1126 * t1135;
t1241 = t1122 * t1135 + t1126 * t1250;
t1257 = t1123 * t1239 + t1127 * t1241;
t1258 = -t1123 * t1241 + t1127 * t1239;
t1278 = t1120 * t1258 + t1121 * t1257;
t1277 = -t1120 * t1257 + t1121 * t1258;
t881 = t981 + t1233;
t1307 = -t1124 * t881 + t1128 * t1277;
t1326 = t1125 * t1278 + t1129 * t1307;
t1344 = pkin(6) * t1326;
t1328 = t1125 * t1307 - t1129 * t1278;
t1343 = pkin(6) * t1328;
t1341 = pkin(9) * t835;
t1340 = pkin(9) * t853;
t1133 = -t1075 - t1224;
t1215 = t1122 * t1133;
t1245 = -t1229 - t1233;
t1263 = t1126 * t1245 - t1215;
t900 = t1126 * t1133;
t1264 = t1122 * t1245 + t900;
t1275 = t1123 * t1263 + t1127 * t1264;
t1276 = -t1123 * t1264 + t1127 * t1263;
t1304 = t1120 * t1276 + t1121 * t1275;
t1339 = pkin(1) * t1304;
t1311 = t1124 * t1277 + t1128 * t881;
t1338 = pkin(7) * t1311;
t1303 = -t1120 * t1275 + t1121 * t1276;
t1337 = qJ(3) * t1303;
t1336 = qJ(3) * t1304;
t1335 = t1124 * t1303;
t1334 = t1125 * t1304;
t1333 = t1128 * t1303;
t1332 = t1129 * t1304;
t1331 = -pkin(1) * t1311 - pkin(2) * t881 - qJ(3) * t1277;
t1330 = -pkin(2) * t1304 - pkin(3) * t1275 - pkin(4) * t1264;
t1329 = -pkin(1) * t1278 + pkin(7) * t1307;
t962 = -t981 + t1229;
t1252 = t1126 * t962 + t1215;
t1253 = -t1122 * t962 + t900;
t1255 = -t1123 * t1252 + t1127 * t1253;
t1256 = t1123 * t1253 + t1127 * t1252;
t1279 = -t1120 * t1255 - t1121 * t1256;
t1280 = -t1120 * t1256 + t1121 * t1255;
t1308 = -t1124 * t1250 + t1128 * t1280;
t1327 = t1125 * t1308 + t1129 * t1279;
t1325 = -t1125 * t1279 + t1129 * t1308;
t1323 = pkin(8) * t1275;
t1322 = pkin(8) * t1276;
t1321 = qJ(3) * t1278;
t602 = -pkin(2) * t1278 - pkin(3) * t1257 - pkin(4) * t1241;
t1312 = t1124 * t1280 + t1128 * t1250;
t1136 = (t1122 * t982 + t1126 * t984) * t1099;
t1178 = t1099 * t1126;
t1165 = t982 * t1178;
t1179 = t1099 * t1122;
t954 = t984 * t1179;
t1146 = -t954 + t1165;
t1236 = -t1123 * t1136 + t1127 * t1146;
t1237 = t1123 * t1146 + t1127 * t1136;
t1259 = -t1120 * t1236 - t1121 * t1237;
t1260 = -t1120 * t1237 + t1121 * t1236;
t1282 = -t1075 * t1124 + t1128 * t1260;
t1310 = t1125 * t1282 + t1129 * t1259;
t875 = -qJD(5) * t984 - t1157;
t1140 = -t1122 * t875 - t1165;
t1147 = t1126 * t875 - t1179 * t982;
t1234 = t1123 * t1140 + t1127 * t1147;
t1235 = -t1123 * t1147 + t1127 * t1140;
t1262 = -t1120 * t1235 - t1121 * t1234;
t1167 = t1124 * t1224;
t1261 = -t1120 * t1234 + t1121 * t1235;
t1283 = t1128 * t1261 - t1167;
t1309 = t1125 * t1283 + t1129 * t1262;
t1306 = -t1125 * t1259 + t1129 * t1282;
t1305 = -t1125 * t1262 + t1129 * t1283;
t1300 = pkin(8) * t1257;
t1299 = pkin(9) * t1263;
t1298 = pkin(9) * t1264;
t1297 = qJ(6) * t1251;
t1011 = -pkin(4) * t1107 - pkin(9) * t1035;
t1231 = t1034 ^ 2;
t1097 = g(1) * t1129 + g(2) * t1125;
t1130 = qJD(1) ^ 2;
t1072 = -pkin(1) * t1130 + qJDD(1) * pkin(7) - t1097;
t1227 = pkin(2) * t1128;
t1145 = -qJ(3) * t1124 - t1227;
t1083 = t1145 * qJD(1);
t1225 = g(3) * t1128;
t1232 = qJD(2) ^ 2;
t1003 = -qJDD(2) * pkin(2) - t1232 * qJ(3) + (qJD(1) * t1083 + t1072) * t1124 + qJDD(3) + t1225;
t1057 = -pkin(3) * t1197 - pkin(8) * t1078;
t1230 = t1077 ^ 2;
t938 = -t1142 * pkin(3) - t1230 * pkin(8) + t1057 * t1078 + t1003;
t837 = -t1138 * pkin(4) - t1231 * pkin(9) + t1011 * t1035 + t938;
t1292 = -t875 * pkin(5) - t1297 + t837;
t1287 = pkin(4) * t881 + pkin(9) * t1239;
t1285 = t1128 * t1075 + t1124 * t1260;
t1166 = t1128 * t1224;
t1284 = t1124 * t1261 + t1166;
t1281 = pkin(3) * t881 + pkin(8) * t1258;
t1274 = -2 * qJD(6);
t1269 = pkin(9) * t1241;
t1022 = t1034 * t1107;
t931 = t1022 - t959;
t1254 = t1022 + t959;
t1185 = t1077 * t1078;
t1137 = -t1086 - t1185;
t1249 = t1120 * t1137;
t1248 = t1121 * t1137;
t1190 = t1034 * t1035;
t1134 = -t1079 - t1190;
t1247 = t1123 * t1134;
t1246 = t1127 * t1134;
t1164 = t1077 * t1197;
t1024 = -t1056 + t1164;
t1184 = t1078 * t1128;
t1062 = qJD(1) * t1184;
t1027 = t1142 - t1062;
t1052 = -g(3) * t1124 + t1128 * t1072;
t1004 = -pkin(2) * t1232 + qJDD(2) * qJ(3) + t1083 * t1197 + t1052;
t1096 = g(1) * t1125 - t1129 * g(2);
t1071 = qJDD(1) * pkin(1) + pkin(7) * t1130 + t1096;
t1144 = t1085 + t1159;
t995 = -t1144 * qJ(3) + (-t1086 + t1110) * pkin(2) - t1071;
t935 = 0.2e1 * qJD(3) * t1078 + t1004 * t1120 - t1121 * t995;
t886 = t1137 * pkin(3) + pkin(8) * t1024 - t935;
t936 = -0.2e1 * qJD(3) * t1077 + t1121 * t1004 + t1120 * t995;
t891 = -pkin(3) * t1230 + pkin(8) * t1142 + t1057 * t1197 + t936;
t805 = t1123 * t891 - t1127 * t886;
t769 = t1134 * pkin(4) + pkin(9) * t931 - t805;
t806 = t1123 * t886 + t1127 * t891;
t776 = -pkin(4) * t1231 + pkin(9) * t1138 + t1107 * t1011 + t806;
t706 = t1122 * t769 + t1126 * t776;
t910 = pkin(5) * t982 - qJ(6) * t984;
t1143 = -t1075 * qJ(6) + t1099 * t1274 - t982 * t910 + t706;
t819 = -t1122 * t1168 - t1178 * t984;
t820 = -t1126 * t1168 + t954;
t747 = t1123 * t820 + t1127 * t819;
t750 = -t1123 * t819 + t1127 * t820;
t687 = -t1120 * t747 + t1121 * t750;
t1150 = t1128 * t687 + t1167;
t684 = -t1120 * t750 - t1121 * t747;
t1240 = t1125 * t1150 + t1129 * t684;
t932 = (qJD(4) + t1107) * t1035 + t1155;
t1238 = -t1125 * t684 + t1129 * t1150;
t1033 = t1035 ^ 2;
t1076 = t1078 ^ 2;
t1105 = t1107 ^ 2;
t1228 = pkin(2) * t1124;
t1226 = pkin(5) * t1126;
t705 = t1122 * t776 - t1126 * t769;
t1223 = qJ(6) * t1126;
t734 = t1123 * t806 - t1127 * t805;
t1222 = t1120 * t734;
t1221 = t1121 * t734;
t1217 = t1122 * t837;
t647 = t1122 * t706 - t1126 * t705;
t1213 = t1123 * t647;
t1212 = t1123 * t938;
t967 = t1079 - t1190;
t1211 = t1123 * t967;
t1207 = t1126 * t837;
t1205 = t1127 * t647;
t1204 = t1127 * t938;
t1203 = t1127 * t967;
t1201 = t984 * t1099;
t1200 = -t1229 + t881;
t1199 = qJD(1) * qJD(2);
t1195 = t1003 * t1120;
t1194 = t1003 * t1121;
t1028 = t1086 - t1185;
t1192 = t1028 * t1120;
t1191 = t1028 * t1121;
t1188 = t1071 * t1124;
t1187 = t1071 * t1128;
t1183 = t1086 * t1124;
t1106 = t1128 * t1130 * t1124;
t1094 = -t1106 + qJDD(2);
t1182 = t1094 * t1124;
t1181 = t1094 * t1128;
t1095 = qJDD(2) + t1106;
t1180 = t1095 * t1124;
t1177 = t1107 * t1123;
t1176 = t1107 * t1127;
t1117 = t1124 ^ 2;
t1175 = t1117 * t1130;
t1118 = t1128 ^ 2;
t1173 = t1117 + t1118;
t1171 = qJDD(1) * t1125;
t1169 = qJDD(1) * t1129;
t1163 = t1124 * t1190;
t1162 = t1128 * t1190;
t1161 = t1124 * t1185;
t1160 = t1077 * t1184;
t1158 = -qJ(6) * t1122 - pkin(4);
t648 = t1122 * t705 + t1126 * t706;
t735 = t1123 * t805 + t1127 * t806;
t1051 = t1072 * t1124 + t1225;
t998 = t1051 * t1124 + t1128 * t1052;
t1043 = -t1096 * t1125 - t1129 * t1097;
t1153 = t984 * t910 + qJDD(6) + t705;
t1152 = t1125 * t1106;
t1151 = t1129 * t1106;
t1149 = t1124 * t687 - t1166;
t1091 = -t1125 * t1130 + t1169;
t1148 = -pkin(6) * t1091 - g(3) * t1125;
t862 = t1120 * t936 - t1121 * t935;
t863 = t1120 * t935 + t1121 * t936;
t997 = t1051 * t1128 - t1052 * t1124;
t1042 = t1096 * t1129 - t1097 * t1125;
t1139 = pkin(5) * t1075 + t1153;
t1131 = 0.2e1 * qJD(6) * t984 - t1292;
t1114 = t1118 * t1130;
t1104 = -t1114 - t1232;
t1103 = t1114 - t1232;
t1102 = -t1175 - t1232;
t1101 = -t1175 + t1232;
t1093 = t1114 - t1175;
t1092 = t1114 + t1175;
t1090 = t1129 * t1130 + t1171;
t1089 = t1173 * qJDD(1);
t1087 = -0.2e1 * t1110 + t1170;
t1084 = 0.2e1 * t1159 + t1172;
t1081 = t1128 * t1095;
t1080 = t1173 * t1199;
t1073 = t1128 * t1086;
t1065 = -pkin(6) * t1090 + g(3) * t1129;
t1060 = -t1076 - t1114;
t1059 = -t1076 + t1114;
t1058 = -t1114 + t1230;
t1055 = t1085 * t1128 - t1117 * t1199;
t1054 = -t1118 * t1199 - t1183;
t1050 = -t1102 * t1124 - t1181;
t1049 = -t1101 * t1124 + t1081;
t1048 = t1104 * t1128 - t1180;
t1047 = t1103 * t1128 - t1182;
t1046 = t1102 * t1128 - t1182;
t1045 = t1104 * t1124 + t1081;
t1040 = t1089 * t1129 - t1092 * t1125;
t1039 = t1089 * t1125 + t1092 * t1129;
t1038 = -t1076 + t1230;
t1037 = -t1084 * t1124 + t1087 * t1128;
t1036 = -t1114 - t1230;
t1026 = t1062 + t1142;
t1023 = -t1164 - t1056;
t1020 = t1076 + t1230;
t1019 = (t1077 * t1121 - t1078 * t1120) * t1197;
t1018 = (-t1077 * t1120 - t1078 * t1121) * t1197;
t1017 = -t1033 + t1105;
t1016 = -t1105 + t1231;
t1015 = t1050 * t1129 + t1084 * t1125;
t1014 = t1048 * t1129 - t1087 * t1125;
t1013 = t1050 * t1125 - t1084 * t1129;
t1012 = t1048 * t1125 + t1087 * t1129;
t1010 = -pkin(7) * t1046 - t1187;
t1009 = -pkin(7) * t1045 - t1188;
t1008 = t1056 * t1121 + t1062 * t1120;
t1007 = -t1056 * t1120 + t1062 * t1121;
t1006 = -t1120 * t1142 - t1121 * t1164;
t1005 = t1120 * t1164 - t1121 * t1142;
t1002 = -pkin(1) * t1046 + t1052;
t1001 = -pkin(1) * t1045 + t1051;
t1000 = -t1033 - t1105;
t992 = t1019 * t1128 - t1183;
t991 = t1058 * t1121 + t1192;
t990 = -t1059 * t1120 + t1248;
t989 = -t1060 * t1120 + t1191;
t988 = -t1058 * t1120 + t1191;
t987 = -t1059 * t1121 - t1249;
t986 = t1060 * t1121 + t1192;
t985 = -t1033 + t1231;
t978 = -t1071 * t1125 + t1129 * t998;
t977 = t1071 * t1129 + t1125 * t998;
t976 = -t1105 - t1231;
t973 = t1036 * t1121 - t1249;
t972 = t1036 * t1120 + t1248;
t971 = t1008 * t1128 + t1161;
t970 = t1006 * t1128 - t1161;
t958 = -t1024 * t1120 + t1027 * t1121;
t957 = t1023 * t1120 + t1026 * t1121;
t956 = t1024 * t1121 + t1027 * t1120;
t955 = t1023 * t1121 - t1026 * t1120;
t951 = (t1034 * t1127 - t1035 * t1123) * t1107;
t950 = (t1034 * t1123 + t1035 * t1127) * t1107;
t944 = -t1033 - t1231;
t943 = t1027 * t1124 + t1128 * t991;
t942 = -t1024 * t1124 + t1128 * t990;
t941 = -t1023 * t1124 + t1128 * t989;
t940 = t1023 * t1128 + t1124 * t989;
t939 = -qJ(3) * t986 + t1194;
t937 = -t1038 * t1124 + t1128 * t957;
t934 = -t1026 * t1124 + t1128 * t973;
t933 = t1026 * t1128 + t1124 * t973;
t927 = (qJD(4) - t1107) * t1035 + t1155;
t926 = t1016 * t1127 + t1211;
t925 = -t1017 * t1123 + t1246;
t924 = t1016 * t1123 - t1203;
t923 = t1017 * t1127 + t1247;
t922 = t1035 * t1177 + t1127 * t959;
t921 = -t1035 * t1176 + t1123 * t959;
t920 = -t1034 * t1176 - t1123 * t1138;
t919 = -t1034 * t1177 + t1127 * t1138;
t918 = -qJ(3) * t972 + t1195;
t917 = -t1020 * t1124 + t1128 * t958;
t916 = t1020 * t1128 + t1124 * t958;
t915 = -t1000 * t1123 + t1203;
t914 = t1000 * t1127 + t1211;
t907 = t1127 * t976 - t1247;
t906 = t1123 * t976 + t1246;
t895 = -t1120 * t950 + t1121 * t951;
t894 = -t1120 * t951 - t1121 * t950;
t893 = t1125 * t986 + t1129 * t941;
t892 = t1125 * t941 - t1129 * t986;
t889 = -pkin(2) * t986 + t936;
t888 = -t1079 * t1124 + t1128 * t895;
t887 = -pkin(2) * t972 + t935;
t883 = t1125 * t972 + t1129 * t934;
t882 = t1125 * t934 - t1129 * t972;
t879 = t1125 * t956 + t1129 * t917;
t878 = t1125 * t917 - t1129 * t956;
t861 = -t1123 * t931 - t1127 * t932;
t860 = -t1123 * t1254 - t1127 * t927;
t859 = -t1123 * t932 + t1127 * t931;
t858 = -t1123 * t927 + t1127 * t1254;
t857 = -pkin(8) * t914 + t1204;
t852 = -t1120 * t924 + t1121 * t926;
t851 = -t1120 * t923 + t1121 * t925;
t850 = -t1120 * t926 - t1121 * t924;
t849 = -t1120 * t925 - t1121 * t923;
t848 = -t1120 * t921 + t1121 * t922;
t847 = -t1120 * t919 + t1121 * t920;
t846 = -t1120 * t922 - t1121 * t921;
t845 = -t1120 * t920 - t1121 * t919;
t844 = -pkin(1) * t940 - pkin(2) * t1023 - qJ(3) * t989 - t1195;
t843 = -t1120 * t914 + t1121 * t915;
t842 = t1120 * t915 + t1121 * t914;
t841 = -pkin(8) * t906 + t1212;
t840 = -pkin(1) * t933 - pkin(2) * t1026 - qJ(3) * t973 + t1194;
t839 = t1003 * t1124 + t1128 * t863;
t838 = -t1003 * t1128 + t1124 * t863;
t832 = -t1120 * t906 + t1121 * t907;
t831 = t1120 * t907 + t1121 * t906;
t823 = -t875 - t1201;
t814 = -qJ(3) * t956 - t862;
t813 = t1128 * t848 + t1163;
t812 = t1128 * t847 - t1163;
t807 = -pkin(3) * t1254 + pkin(8) * t915 + t1212;
t804 = -t1124 * t932 + t1128 * t852;
t803 = -t1124 * t931 + t1128 * t851;
t801 = t1124 * t1254 + t1128 * t843;
t800 = t1124 * t843 - t1128 * t1254;
t799 = -pkin(3) * t927 + pkin(8) * t907 - t1204;
t798 = -pkin(7) * t940 - t1124 * t889 + t1128 * t939;
t797 = t1124 * t927 + t1128 * t832;
t796 = t1124 * t832 - t1128 * t927;
t795 = -pkin(7) * t933 - t1124 * t887 + t1128 * t918;
t786 = -pkin(1) * t916 - pkin(2) * t1020 - qJ(3) * t958 - t863;
t785 = -t1120 * t859 + t1121 * t861;
t784 = -t1120 * t858 + t1121 * t860;
t783 = t1120 * t861 + t1121 * t859;
t782 = -t1120 * t860 - t1121 * t858;
t777 = -pkin(7) * t916 + t1128 * t814 + t1228 * t956;
t775 = t1125 * t862 + t1129 * t839;
t774 = t1125 * t839 - t1129 * t862;
t771 = t1207 - t1340;
t770 = -t1124 * t985 + t1128 * t784;
t766 = -pkin(1) * t838 + pkin(2) * t1003 - qJ(3) * t863;
t765 = t1124 * t944 + t1128 * t785;
t764 = t1124 * t785 - t1128 * t944;
t763 = t1217 - t1298;
t744 = t1125 * t842 + t1129 * t801;
t743 = t1125 * t801 - t1129 * t842;
t736 = -pkin(2) * t783 - pkin(3) * t859;
t733 = t1125 * t831 + t1129 * t797;
t732 = t1125 * t797 - t1129 * t831;
t731 = -pkin(2) * t842 - pkin(3) * t914 + t806;
t730 = -pkin(7) * t838 + (-qJ(3) * t1128 + t1228) * t862;
t729 = -pkin(2) * t831 - pkin(3) * t906 + t805;
t728 = -pkin(4) * t1251 + t1217 - t1341;
t727 = -pkin(3) * t938 + pkin(8) * t735;
t726 = -qJ(3) * t842 - t1120 * t807 + t1121 * t857;
t725 = -pkin(4) * t822 - t1207 + t1299;
t716 = -qJ(3) * t831 - t1120 * t799 + t1121 * t841;
t715 = -pkin(8) * t859 - t734;
t714 = (-pkin(5) * t1099 + t1274) * t984 + t1292;
t709 = t1125 * t783 + t1129 * t765;
t708 = t1125 * t765 - t1129 * t783;
t707 = -pkin(3) * t944 + pkin(8) * t861 + t735;
t678 = (-t823 + t1201) * pkin(5) + t1131;
t677 = pkin(5) * t1201 + t1131 + t1297;
t676 = t1124 * t823 + t1333;
t674 = -t1128 * t823 + t1335;
t672 = qJ(6) * t1229 - t1139;
t671 = -pkin(5) * t1229 + t1143;
t670 = -pkin(1) * t800 + pkin(2) * t1254 - qJ(3) * t843 - t1120 * t857 - t1121 * t807;
t665 = t1121 * t735 - t1222;
t664 = t1120 * t735 + t1221;
t663 = -pkin(1) * t796 + pkin(2) * t927 - qJ(3) * t832 - t1120 * t841 - t1121 * t799;
t662 = qJ(6) * t1200 + t1139;
t661 = pkin(5) * t1200 + t1143;
t660 = t1124 * t822 + t1333;
t658 = -t1128 * t822 + t1335;
t656 = t1124 * t938 + t1128 * t665;
t655 = t1124 * t665 - t1128 * t938;
t654 = -t1122 * t678 - t1223 * t823 - t1298;
t653 = -t1123 * t728 + t1127 * t771 + t1347;
t652 = -pkin(5) * t1219 + t1126 * t677 + t1340;
t651 = -pkin(7) * t800 - t1124 * t731 + t1128 * t726;
t650 = -t1123 * t725 + t1127 * t763 - t1323;
t649 = t1126 * t678 + t1158 * t823 + t1299;
t646 = t1123 * t771 + t1127 * t728 - t1345;
t645 = t1341 + t1122 * t677 - (-pkin(4) - t1226) * t1251;
t644 = -pkin(7) * t796 - t1124 * t729 + t1128 * t716;
t643 = -pkin(2) * t664 - pkin(3) * t734;
t642 = t1129 * t676 + t1334;
t640 = t1125 * t676 - t1332;
t638 = -pkin(3) * t822 + t1123 * t763 + t1127 * t725 + t1322;
t637 = -pkin(4) * t837 + pkin(9) * t648;
t628 = -qJ(3) * t783 - t1120 * t707 + t1121 * t715;
t625 = -t1122 * t672 + t1126 * t671;
t624 = t1122 * t671 + t1126 * t672;
t619 = t1129 * t660 + t1334;
t617 = t1125 * t660 - t1332;
t615 = -t1351 + t706;
t614 = -t647 - t1269;
t613 = t1287 + t648;
t612 = -pkin(8) * t1221 - qJ(3) * t664 - t1120 * t727;
t611 = t1125 * t664 + t1129 * t656;
t610 = t1125 * t656 - t1129 * t664;
t609 = -pkin(1) * t764 + pkin(2) * t944 - qJ(3) * t785 - t1120 * t715 - t1121 * t707;
t608 = t1330 + t705;
t607 = (-t1229 - t1245) * qJ(6) + (t1075 - t1133) * pkin(5) + t1153 + t1330;
t606 = -t1122 * t661 + t1126 * t662 - t1269;
t605 = qJ(6) * t1132 + (t1229 + t946) * pkin(5) - t1143 + t1351;
t604 = -pkin(7) * t764 - t1124 * t736 + t1128 * t628;
t603 = t1122 * t662 + t1126 * t661 + t1287;
t601 = t1127 * t648 - t1213;
t600 = t1123 * t648 + t1205;
t599 = -t1123 * t649 + t1127 * t654 - t1323;
t598 = -pkin(9) * t624 + (pkin(5) * t1122 - t1223) * t714;
t597 = -t1123 * t645 + t1127 * t652 - t1347;
t596 = -pkin(1) * t655 + pkin(2) * t938 + pkin(8) * t1222 - qJ(3) * t665 - t1121 * t727;
t595 = -pkin(3) * t823 + t1123 * t654 + t1127 * t649 + t1322;
t594 = -pkin(5) * t1250 - qJ(6) * t1135 + t602;
t593 = t1123 * t652 + t1127 * t645 + t1345;
t592 = -t1120 * t646 + t1121 * t653 + t1358;
t587 = -t1123 * t624 + t1127 * t625;
t586 = t1123 * t625 + t1127 * t624;
t585 = pkin(9) * t625 + (t1158 - t1226) * t714;
t584 = -t1120 * t638 + t1121 * t650 - t1336;
t583 = -t1120 * t653 - t1121 * t646 - t1365;
t582 = -pkin(7) * t655 - t1124 * t643 + t1128 * t612;
t581 = -t1123 * t613 + t1127 * t614 - t1300;
t580 = t1123 * t614 + t1127 * t613 + t1281;
t579 = -pkin(1) * t658 + pkin(2) * t822 - t1120 * t650 - t1121 * t638 - t1337;
t578 = -t1120 * t600 + t1121 * t601;
t577 = t1120 * t601 + t1121 * t600;
t576 = -t1123 * t603 + t1127 * t606 - t1300;
t575 = -pkin(8) * t600 - pkin(9) * t1205 - t1123 * t637;
t574 = t1124 * t837 + t1128 * t578;
t573 = t1124 * t578 - t1128 * t837;
t572 = t1123 * t606 + t1127 * t603 + t1281;
t571 = -t1124 * t615 + t1128 * t592 - t1366;
t570 = -pkin(3) * t837 + pkin(8) * t601 - pkin(9) * t1213 + t1127 * t637;
t569 = -t1120 * t595 + t1121 * t599 - t1336;
t568 = -pkin(7) * t658 - t1124 * t608 + t1128 * t584;
t567 = -t1120 * t586 + t1121 * t587;
t566 = t1120 * t587 + t1121 * t586;
t565 = -t1120 * t593 + t1121 * t597 - t1358;
t564 = t1124 * t714 + t1128 * t567;
t563 = t1124 * t567 - t1128 * t714;
t562 = -pkin(1) * t674 + pkin(2) * t823 - t1120 * t599 - t1121 * t595 - t1337;
t561 = -t1120 * t597 - t1121 * t593 + t1365;
t560 = -pkin(7) * t674 - t1124 * t607 + t1128 * t569;
t559 = -pkin(2) * t577 - pkin(3) * t600 - pkin(4) * t647;
t558 = -pkin(8) * t586 - t1123 * t585 + t1127 * t598;
t557 = -t1124 * t605 + t1128 * t565 + t1366;
t556 = -pkin(3) * t714 + pkin(8) * t587 + t1123 * t598 + t1127 * t585;
t555 = -t1120 * t580 + t1121 * t581 - t1321;
t554 = t1125 * t577 + t1129 * t574;
t553 = t1125 * t574 - t1129 * t577;
t552 = -t1120 * t581 - t1121 * t580 + t1331;
t551 = -t1120 * t572 + t1121 * t576 - t1321;
t550 = -pkin(2) * t566 - pkin(3) * t586 - pkin(4) * t624 - pkin(5) * t672 - qJ(6) * t671;
t549 = t1125 * t566 + t1129 * t564;
t548 = t1125 * t564 - t1129 * t566;
t547 = -t1120 * t576 - t1121 * t572 + t1331;
t546 = -t1124 * t602 + t1128 * t555 - t1338;
t545 = -qJ(3) * t577 - t1120 * t570 + t1121 * t575;
t544 = -t1124 * t594 + t1128 * t551 - t1338;
t543 = -pkin(1) * t573 + pkin(2) * t837 - qJ(3) * t578 - t1120 * t575 - t1121 * t570;
t542 = -qJ(3) * t566 - t1120 * t556 + t1121 * t558;
t541 = -pkin(7) * t573 - t1124 * t559 + t1128 * t545;
t540 = -pkin(1) * t563 + pkin(2) * t714 - qJ(3) * t567 - t1120 * t558 - t1121 * t556;
t539 = -pkin(7) * t563 - t1124 * t550 + t1128 * t542;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1090, -t1091, 0, t1043, 0, 0, 0, 0, 0, 0, t1014, t1015, t1040, t978, 0, 0, 0, 0, 0, 0, t883, t893, t879, t775, 0, 0, 0, 0, 0, 0, t733, t744, t709, t611, 0, 0, 0, 0, 0, 0, t619, t641, t1326, t554, 0, 0, 0, 0, 0, 0, t642, t1326, -t641, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1091, -t1090, 0, t1042, 0, 0, 0, 0, 0, 0, t1012, t1013, t1039, t977, 0, 0, 0, 0, 0, 0, t882, t892, t878, t774, 0, 0, 0, 0, 0, 0, t732, t743, t708, t610, 0, 0, 0, 0, 0, 0, t617, t639, t1328, t553, 0, 0, 0, 0, 0, 0, t640, t1328, -t639, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1045, t1046, 0, -t997, 0, 0, 0, 0, 0, 0, t933, t940, t916, t838, 0, 0, 0, 0, 0, 0, t796, t800, t764, t655, 0, 0, 0, 0, 0, 0, t658, t673, t1311, t573, 0, 0, 0, 0, 0, 0, t674, t1311, -t673, t563; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1091, 0, -t1090, 0, t1148, -t1065, -t1042, -pkin(6) * t1042, t1055 * t1129 - t1152, t1037 * t1129 - t1093 * t1125, t1049 * t1129 + t1124 * t1171, t1054 * t1129 + t1152, t1047 * t1129 + t1125 * t1170, qJDD(2) * t1125 + t1080 * t1129, -pkin(6) * t1012 - t1001 * t1125 + t1009 * t1129, -pkin(6) * t1013 - t1002 * t1125 + t1010 * t1129, -pkin(6) * t1039 + t1129 * t997, -pkin(6) * t977 - (pkin(1) * t1125 - pkin(7) * t1129) * t997, -t1007 * t1125 + t1129 * t971, -t1125 * t955 + t1129 * t937, -t1125 * t987 + t1129 * t942, -t1005 * t1125 + t1129 * t970, -t1125 * t988 + t1129 * t943, -t1018 * t1125 + t1129 * t992, -pkin(6) * t882 - t1125 * t840 + t1129 * t795, -pkin(6) * t892 - t1125 * t844 + t1129 * t798, -pkin(6) * t878 - t1125 * t786 + t1129 * t777, -pkin(6) * t774 - t1125 * t766 + t1129 * t730, -t1125 * t846 + t1129 * t813, -t1125 * t782 + t1129 * t770, -t1125 * t849 + t1129 * t803, -t1125 * t845 + t1129 * t812, -t1125 * t850 + t1129 * t804, -t1125 * t894 + t1129 * t888, -pkin(6) * t732 - t1125 * t663 + t1129 * t644, -pkin(6) * t743 - t1125 * t670 + t1129 * t651, -pkin(6) * t708 - t1125 * t609 + t1129 * t604, -pkin(6) * t610 - t1125 * t596 + t1129 * t582, t1238, t1360, t1325, t1305, -t1361, t1306, -pkin(6) * t617 - t1125 * t579 + t1129 * t568, -t1125 * t583 + t1129 * t571 - t1368, -t1125 * t552 + t1129 * t546 - t1343, -pkin(6) * t553 - t1125 * t543 + t1129 * t541, t1238, t1325, -t1360, t1306, t1361, t1305, -pkin(6) * t640 - t1125 * t562 + t1129 * t560, -t1125 * t547 + t1129 * t544 - t1343, -t1125 * t561 + t1129 * t557 + t1368, -pkin(6) * t548 - t1125 * t540 + t1129 * t539; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1090, 0, t1091, 0, t1065, t1148, t1043, pkin(6) * t1043, t1055 * t1125 + t1151, t1037 * t1125 + t1093 * t1129, t1049 * t1125 - t1124 * t1169, t1054 * t1125 - t1151, t1047 * t1125 - t1128 * t1169, -qJDD(2) * t1129 + t1080 * t1125, pkin(6) * t1014 + t1001 * t1129 + t1009 * t1125, pkin(6) * t1015 + t1002 * t1129 + t1010 * t1125, pkin(6) * t1040 + t1125 * t997, pkin(6) * t978 - (-pkin(1) * t1129 - pkin(7) * t1125) * t997, t1007 * t1129 + t1125 * t971, t1125 * t937 + t1129 * t955, t1125 * t942 + t1129 * t987, t1005 * t1129 + t1125 * t970, t1125 * t943 + t1129 * t988, t1018 * t1129 + t1125 * t992, pkin(6) * t883 + t1125 * t795 + t1129 * t840, pkin(6) * t893 + t1125 * t798 + t1129 * t844, pkin(6) * t879 + t1125 * t777 + t1129 * t786, pkin(6) * t775 + t1125 * t730 + t1129 * t766, t1125 * t813 + t1129 * t846, t1125 * t770 + t1129 * t782, t1125 * t803 + t1129 * t849, t1125 * t812 + t1129 * t845, t1125 * t804 + t1129 * t850, t1125 * t888 + t1129 * t894, pkin(6) * t733 + t1125 * t644 + t1129 * t663, pkin(6) * t744 + t1125 * t651 + t1129 * t670, pkin(6) * t709 + t1125 * t604 + t1129 * t609, pkin(6) * t611 + t1125 * t582 + t1129 * t596, t1240, t1362, t1327, t1309, -t1363, t1310, pkin(6) * t619 + t1125 * t568 + t1129 * t579, t1125 * t571 + t1129 * t583 + t1367, t1125 * t546 + t1129 * t552 + t1344, pkin(6) * t554 + t1125 * t541 + t1129 * t543, t1240, t1327, -t1362, t1310, t1363, t1309, pkin(6) * t642 + t1125 * t560 + t1129 * t562, t1125 * t544 + t1129 * t547 + t1344, t1125 * t557 + t1129 * t561 - t1367, pkin(6) * t549 + t1125 * t539 + t1129 * t540; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1096, t1097, 0, 0, t1144 * t1124, t1084 * t1128 + t1087 * t1124, t1101 * t1128 + t1180, -t1124 * t1159 + t1073, t1103 * t1124 + t1181, 0, pkin(1) * t1087 + pkin(7) * t1048 + t1187, -pkin(1) * t1084 + pkin(7) * t1050 - t1188, pkin(1) * t1092 + pkin(7) * t1089 + t998, pkin(1) * t1071 + pkin(7) * t998, t1008 * t1124 - t1160, t1038 * t1128 + t1124 * t957, t1024 * t1128 + t1124 * t990, t1006 * t1124 + t1160, -t1027 * t1128 + t1124 * t991, t1019 * t1124 + t1073, -pkin(1) * t972 + pkin(7) * t934 + t1124 * t918 + t1128 * t887, -pkin(1) * t986 + pkin(7) * t941 + t1124 * t939 + t1128 * t889, pkin(7) * t917 + t1124 * t814 + (-pkin(1) - t1227) * t956, pkin(7) * t839 + (-pkin(1) + t1145) * t862, t1124 * t848 - t1162, t1124 * t784 + t1128 * t985, t1124 * t851 + t1128 * t931, t1124 * t847 + t1162, t1124 * t852 + t1128 * t932, t1079 * t1128 + t1124 * t895, -pkin(1) * t831 + pkin(7) * t797 + t1124 * t716 + t1128 * t729, -pkin(1) * t842 + pkin(7) * t801 + t1124 * t726 + t1128 * t731, -pkin(1) * t783 + pkin(7) * t765 + t1124 * t628 + t1128 * t736, -pkin(1) * t664 + pkin(7) * t656 + t1124 * t612 + t1128 * t643, t1149, t1348, t1312, t1284, -t1349, t1285, pkin(7) * t660 + t1124 * t584 + t1128 * t608 - t1339, t1124 * t592 + t1128 * t615 - t1364, t1124 * t555 + t1128 * t602 + t1329, -pkin(1) * t577 + pkin(7) * t574 + t1124 * t545 + t1128 * t559, t1149, t1312, -t1348, t1285, t1349, t1284, pkin(7) * t676 + t1124 * t569 + t1128 * t607 - t1339, t1124 * t551 + t1128 * t594 + t1329, t1124 * t565 + t1128 * t605 + t1364, -pkin(1) * t566 + pkin(7) * t564 + t1124 * t542 + t1128 * t550;];
tauB_reg  = t1;
