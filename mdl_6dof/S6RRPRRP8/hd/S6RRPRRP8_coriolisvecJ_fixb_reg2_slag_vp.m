% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRP8_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP8_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP8_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP8_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:25:16
% EndTime: 2019-03-09 12:25:35
% DurationCPUTime: 7.86s
% Computational Cost: add. (15276->568), mult. (37852->738), div. (0->0), fcn. (28053->8), ass. (0->275)
t252 = sin(pkin(10));
t256 = sin(qJ(2));
t344 = qJD(1) * t256;
t326 = t252 * t344;
t253 = cos(pkin(10));
t334 = t253 * qJD(2);
t202 = t326 - t334;
t324 = t253 * t344;
t341 = qJD(2) * t252;
t204 = t324 + t341;
t255 = sin(qJ(4));
t257 = cos(qJ(4));
t145 = t202 * t255 - t204 * t257;
t254 = sin(qJ(5));
t298 = -t202 * t257 - t255 * t204;
t389 = cos(qJ(5));
t89 = t254 * t145 + t298 * t389;
t425 = t89 ^ 2;
t258 = cos(qJ(2));
t343 = qJD(1) * t258;
t238 = -qJD(4) + t343;
t229 = -qJD(5) + t238;
t424 = t229 * t89;
t354 = t255 * t253;
t209 = t257 * t252 + t354;
t173 = t209 * t343;
t395 = t209 * qJD(4);
t416 = t173 - t395;
t353 = t257 * t253;
t296 = t255 * t252 - t353;
t174 = t296 * t343;
t394 = t296 * qJD(4);
t415 = t174 - t394;
t412 = -t145 * t389 + t254 * t298;
t390 = t412 ^ 2;
t404 = t229 * t412;
t333 = qJD(1) * qJD(2);
t321 = t258 * t333;
t308 = t257 * t321;
t309 = t252 * t321;
t336 = qJD(4) * t257;
t104 = t255 * (qJD(4) * t204 + t309) + t202 * t336 - t253 * t308;
t337 = qJD(4) * t255;
t311 = -t202 * t337 + t204 * t336 + t252 * t308 + t321 * t354;
t45 = qJD(5) * t412 - t254 * t104 + t389 * t311;
t418 = t45 + t404;
t383 = pkin(8) + qJ(3);
t220 = t383 * t252;
t221 = t383 * t253;
t161 = -t255 * t220 + t257 * t221;
t423 = t296 * pkin(9) - t161;
t422 = t145 ^ 2;
t243 = pkin(7) * t344;
t376 = qJD(2) * pkin(2);
t317 = qJD(3) - t376;
t217 = t243 + t317;
t162 = pkin(3) * t202 + t217;
t101 = -pkin(4) * t298 + t162;
t39 = -pkin(5) * t89 - qJ(6) * t412 + t101;
t421 = t39 * t89;
t420 = t101 * t89;
t419 = t89 * t412;
t271 = t389 * t296;
t335 = qJD(5) * t254;
t369 = -t209 * t335 + (-qJD(4) - qJD(5)) * t271 + t174 * t389 + t416 * t254;
t327 = t389 * t209;
t150 = -t254 * t296 + t327;
t368 = qJD(4) * t327 + qJD(5) * t150 - t173 * t389 + t415 * t254;
t417 = t145 * t238;
t330 = -t390 + t425;
t322 = qJD(5) * t389;
t44 = t389 * t104 - t145 * t335 + t254 * t311 - t298 * t322;
t413 = -t44 + t424;
t56 = pkin(5) * t412 - qJ(6) * t89;
t411 = t298 ^ 2;
t410 = -0.2e1 * t333;
t184 = t296 * t256;
t408 = pkin(9) * t184;
t338 = qJD(3) * t252;
t347 = qJD(3) * t353 - t220 * t336;
t355 = t255 * t221;
t388 = pkin(9) * t209;
t100 = -t255 * t338 + (-t355 - t388) * qJD(4) + t347;
t279 = t209 * qJD(3);
t397 = t423 * qJD(4) - t279;
t301 = pkin(2) * t256 - qJ(3) * t258;
t211 = t301 * qJD(1);
t163 = pkin(7) * t326 + t253 * t211;
t357 = t253 * t258;
t293 = pkin(3) * t256 - pkin(8) * t357;
t134 = qJD(1) * t293 + t163;
t193 = t252 * t211;
t358 = t253 * t256;
t359 = t252 * t258;
t283 = -pkin(7) * t358 - pkin(8) * t359;
t151 = qJD(1) * t283 + t193;
t81 = t257 * t134 - t151 * t255;
t68 = pkin(4) * t344 + pkin(9) * t174 + t81;
t82 = t255 * t134 + t257 * t151;
t72 = -pkin(9) * t173 + t82;
t160 = -t257 * t220 - t355;
t128 = t160 - t388;
t79 = t254 * t128 - t389 * t423;
t379 = t79 * qJD(5) + (-t397 + t68) * t389 + (t100 - t72) * t254;
t387 = t39 * t412;
t406 = t101 * t412;
t405 = t209 * t311;
t403 = t238 * t298;
t244 = pkin(7) * t343;
t325 = t252 * t343;
t196 = pkin(3) * t325 + t244;
t400 = -t416 * pkin(4) - t196;
t218 = -pkin(2) * t258 - qJ(3) * t256 - pkin(1);
t201 = t253 * t218;
t152 = -pkin(8) * t358 + t201 + (-pkin(7) * t252 - pkin(3)) * t258;
t236 = pkin(7) * t357;
t171 = t252 * t218 + t236;
t360 = t252 * t256;
t159 = -pkin(8) * t360 + t171;
t95 = t255 * t152 + t257 * t159;
t237 = pkin(7) * t321;
t189 = pkin(3) * t309 + t237;
t398 = -t162 * t394 + t189 * t209;
t250 = t256 ^ 2;
t251 = t258 ^ 2;
t396 = qJD(1) * (t250 - 0.2e1 * t251);
t268 = t256 * t327;
t123 = -t184 * t254 + t268;
t340 = qJD(2) * t256;
t282 = t256 * t209;
t124 = -t184 * t389 - t254 * t282;
t339 = qJD(2) * t258;
t130 = t256 * t395 + t296 * t339;
t342 = qJD(2) * t209;
t269 = t258 * t342;
t261 = t256 * t394 - t269;
t65 = qJD(5) * t124 - t254 * t130 - t261 * t389;
t393 = -t229 * t65 - t258 * t45 + (qJD(1) * t123 - t89) * t340;
t356 = t255 * t159;
t94 = t257 * t152 - t356;
t75 = -pkin(4) * t258 + t408 + t94;
t80 = -pkin(9) * t282 + t95;
t377 = t254 * t75 + t389 * t80;
t190 = qJD(2) * t301 - t256 * qJD(3);
t331 = pkin(7) * t340;
t157 = t253 * t190 + t252 * t331;
t275 = t293 * qJD(2);
t125 = t275 + t157;
t177 = t252 * t190;
t136 = qJD(2) * t283 + t177;
t53 = -qJD(4) * t95 + t257 * t125 - t255 * t136;
t41 = pkin(4) * t340 + pkin(9) * t130 + t53;
t328 = t255 * t125 + t257 * t136 + t152 * t336;
t46 = -pkin(9) * t269 + (-t356 + t408) * qJD(4) + t328;
t8 = -qJD(5) * t377 - t254 * t46 + t389 * t41;
t149 = t209 * t254 + t271;
t392 = t229 * t368 - (qJD(2) * t149 + t89) * t344;
t391 = -t149 * t44 + t150 * t45 + t368 * t412 - t369 * t89;
t287 = t128 * t389 + t254 * t423;
t31 = t287 * qJD(5) + t389 * t100 + t254 * t397;
t38 = t254 * t68 + t389 * t72;
t35 = qJ(6) * t344 + t38;
t382 = t31 - t35;
t381 = t31 - t38;
t380 = pkin(5) * t344 + t379;
t378 = pkin(5) * t368 - qJ(6) * t369 - t150 * qJD(6) + t400;
t195 = t218 * qJD(1);
t223 = qJD(2) * qJ(3) + t244;
t153 = t253 * t195 - t223 * t252;
t110 = -pkin(3) * t343 - pkin(8) * t204 + t153;
t154 = t252 * t195 + t253 * t223;
t114 = -pkin(8) * t202 + t154;
t70 = t110 * t255 + t114 * t257;
t62 = pkin(9) * t298 + t70;
t374 = t254 * t62;
t372 = (-qJD(4) * t221 - t338) * t255 + t347 - t82;
t371 = -qJD(4) * t161 - t279 - t81;
t69 = t257 * t110 - t114 * t255;
t61 = pkin(9) * t145 + t69;
t23 = t389 * t61 - t374;
t370 = -pkin(4) * t322 - qJD(6) + t23;
t367 = qJD(2) * t287;
t366 = qJD(2) * t79;
t365 = t104 * t209;
t364 = t145 * t298;
t362 = t202 * t253;
t260 = qJD(1) ^ 2;
t361 = t251 * t260;
t352 = t258 * t260;
t259 = qJD(2) ^ 2;
t351 = t259 * t256;
t350 = t259 * t258;
t57 = -pkin(4) * t238 + t61;
t17 = t389 * t57 - t374;
t349 = qJD(6) - t17;
t175 = t190 * qJD(1);
t216 = (qJD(3) - t243) * qJD(2);
t133 = t252 * t175 + t253 * t216;
t245 = pkin(7) * t339;
t197 = t252 * pkin(3) * t339 + t245;
t212 = pkin(3) * t360 + t256 * pkin(7);
t345 = t250 - t251;
t332 = pkin(7) * t359;
t329 = t389 * t62;
t240 = -t253 * pkin(3) - pkin(2);
t323 = t229 * t344;
t241 = t256 * t333;
t132 = t253 * t175 - t216 * t252;
t107 = qJD(1) * t275 + t132;
t111 = -pkin(8) * t309 + t133;
t34 = -qJD(4) * t70 + t257 * t107 - t255 * t111;
t24 = pkin(4) * t241 + pkin(9) * t104 + t34;
t33 = t255 * t107 + t110 * t336 + t257 * t111 - t114 * t337;
t29 = -pkin(9) * t311 + t33;
t320 = -t254 * t24 - t389 * t29 - t57 * t322 + t62 * t335;
t4 = t389 * t24 - t254 * t29 - t62 * t322 - t57 * t335;
t318 = pkin(1) * t410;
t314 = t202 + t334;
t313 = -t204 + t341;
t312 = pkin(5) * t241;
t310 = t287 * t44 + t31 * t89 - t79 * t45;
t307 = t258 * t241;
t22 = t254 * t61 + t329;
t306 = pkin(4) * t335 - t22;
t304 = -t390 - t425;
t303 = -t217 + t317;
t302 = t123 * t45 - t65 * t89;
t295 = qJD(1) * t314;
t294 = qJD(1) * t313;
t219 = t229 * qJD(6);
t233 = qJ(6) * t241;
t1 = t233 - t219 - t320;
t292 = -t17 * t229 + t320;
t18 = t254 * t57 + t329;
t291 = -t18 * t229 + t4;
t50 = -t254 * t80 + t389 * t75;
t7 = t254 * t41 + t75 * t322 - t335 * t80 + t389 * t46;
t288 = t45 * t149 - t368 * t89;
t284 = t258 * t294;
t83 = pkin(4) * t311 + t189;
t2 = -t312 - t4;
t267 = t44 + t424;
t64 = qJD(5) * t268 + t130 * t389 - t184 * t335 - t254 * t261;
t266 = t123 * t44 - t124 * t45 - t412 * t65 - t64 * t89;
t176 = pkin(4) * t296 + t240;
t156 = pkin(4) * t282 + t212;
t262 = t45 - t404;
t9 = t45 * pkin(5) + t44 * qJ(6) - qJD(6) * t412 + t83;
t105 = -pkin(4) * t261 + t197;
t249 = t253 ^ 2;
t248 = t252 ^ 2;
t242 = -pkin(4) * t389 - pkin(5);
t239 = pkin(4) * t254 + qJ(6);
t234 = t256 * t352;
t224 = -0.2e1 * t307;
t170 = t201 - t332;
t169 = (-t229 - t343) * t340;
t164 = -pkin(7) * t324 + t193;
t158 = -t253 * t331 + t177;
t77 = t149 * pkin(5) - t150 * qJ(6) + t176;
t66 = t123 * pkin(5) - t124 * qJ(6) + t156;
t52 = -t159 * t337 + t328;
t49 = -pkin(4) * t145 + t56;
t48 = t258 * pkin(5) - t50;
t47 = -qJ(6) * t258 + t377;
t30 = -t369 * t229 + (qJD(2) * t150 - t412) * t344;
t15 = -t229 * qJ(6) + t18;
t14 = t229 * pkin(5) + t349;
t13 = t65 * pkin(5) + t64 * qJ(6) - t124 * qJD(6) + t105;
t12 = -t124 * t44 - t412 * t64;
t11 = t64 * t229 + t44 * t258 + (qJD(1) * t124 + t412) * t340;
t10 = -t44 * t150 + t369 * t412;
t6 = -pkin(5) * t340 - t8;
t5 = qJ(6) * t340 - qJD(6) * t258 + t7;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t307, t345 * t410, t350, t224, -t351, 0, -pkin(7) * t350 + t256 * t318, pkin(7) * t351 + t258 * t318, 0, 0 (t204 * t253 + t249 * t344) * t339 (-t362 + (-t204 - 0.2e1 * t324) * t252) * t339 (t204 * t256 + t253 * t396) * qJD(2) (t202 * t252 + t248 * t344) * t339 (-t202 * t256 - t252 * t396) * qJD(2), t224 (-qJD(1) * t157 - t132) * t258 + ((pkin(7) * t202 + t217 * t252) * t258 + (t153 + (t170 + 0.2e1 * t332) * qJD(1)) * t256) * qJD(2) (qJD(1) * t158 + t133) * t258 + ((pkin(7) * t204 + t217 * t253) * t258 + (-t154 + (-t171 + 0.2e1 * t236) * qJD(1)) * t256) * qJD(2), -t157 * t204 - t158 * t202 + (-t132 * t253 - t133 * t252) * t256 + (-t153 * t253 - t154 * t252 + (-t170 * t253 - t171 * t252) * qJD(1)) * t339, t132 * t170 + t133 * t171 + t153 * t157 + t154 * t158 + (t217 + t243) * t245, t104 * t184 + t130 * t145, -t130 * t298 + t184 * t311 + t145 * t269 + (-t145 * t394 + t365) * t256, t104 * t258 + t130 * t238 + (-qJD(1) * t184 - t145) * t340, -t298 * t269 + (t298 * t394 + t405) * t256 (t238 * t342 + t311) * t258 + (-t238 * t394 + (-qJD(1) * t282 + t298) * qJD(2)) * t256 (-t238 - t343) * t340, -t53 * t238 - t197 * t298 + t212 * t311 + (t162 * t342 - t34) * t258 + ((qJD(1) * t94 + t69) * qJD(2) + t398) * t256, -t104 * t212 - t130 * t162 - t145 * t197 - t184 * t189 + t238 * t52 + t258 * t33 + (-qJD(1) * t95 - t70) * t340, t52 * t298 - t95 * t311 + t53 * t145 + t94 * t104 + t34 * t184 + t69 * t130 - t70 * t269 + (-t209 * t33 + t394 * t70) * t256, t162 * t197 + t189 * t212 + t33 * t95 + t34 * t94 + t52 * t70 + t53 * t69, t12, t266, t11, t302, -t393, t169, t101 * t65 - t105 * t89 + t123 * t83 + t156 * t45 - t229 * t8 - t258 * t4 + (qJD(1) * t50 + t17) * t340, -t101 * t64 + t105 * t412 + t124 * t83 - t156 * t44 + t229 * t7 - t258 * t320 + (-qJD(1) * t377 - t18) * t340, t123 * t320 - t124 * t4 + t17 * t64 - t18 * t65 - t377 * t45 - t412 * t8 + t44 * t50 + t7 * t89, t101 * t105 + t156 * t83 + t17 * t8 + t18 * t7 - t320 * t377 + t4 * t50, t12, t11, -t266, t169, t393, t302, t123 * t9 - t13 * t89 + t2 * t258 + t229 * t6 + t39 * t65 + t45 * t66 + (-qJD(1) * t48 - t14) * t340, -t1 * t123 + t124 * t2 - t14 * t64 - t15 * t65 + t412 * t6 - t44 * t48 - t45 * t47 + t5 * t89, -t1 * t258 - t124 * t9 - t13 * t412 - t229 * t5 + t39 * t64 + t44 * t66 + (qJD(1) * t47 + t15) * t340, t1 * t47 + t13 * t39 + t14 * t6 + t15 * t5 + t2 * t48 + t66 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t234, t345 * t260, 0, t234, 0, 0, t260 * pkin(1) * t256, pkin(1) * t352, 0, 0, t253 * t284 (t362 + t204 * t252 + (-t248 + t249) * qJD(2)) * t343, t253 * t361 + t256 * t294, -t314 * t325, -t252 * t361 + t256 * t295, t234 ((-qJ(3) * t341 - t153) * t256 + (-pkin(7) * t314 + t252 * t303 + t163) * t258) * qJD(1) ((-qJ(3) * t334 + t154) * t256 + (pkin(7) * t313 + t253 * t303 - t164) * t258) * qJD(1), t163 * t204 + t164 * t202 + (-qJD(3) * t202 + t153 * t343 + t133) * t253 + (qJD(3) * t204 + t154 * t343 - t132) * t252, -t153 * t163 - t154 * t164 + (-t153 * t252 + t154 * t253) * qJD(3) + (-t132 * t252 + t133 * t253) * qJ(3) + (-t217 - t376) * t244, -t145 * t415 - t365, -t405 + t104 * t296 + t174 * t298 - t145 * t173 + (t145 * t209 - t296 * t298) * qJD(4), -t415 * t238 + (t145 + t342) * t344, t296 * t311 + t298 * t416, -t416 * t238 + (-qJD(2) * t296 - t298) * t344, t238 * t344, t240 * t311 + t189 * t296 + t196 * t298 - t371 * t238 + (qJD(2) * t160 - t69) * t344 - t416 * t162, -t240 * t104 + t196 * t145 + t162 * t174 + t372 * t238 + (-qJD(2) * t161 + t70) * t344 + t398, -t161 * t311 - t33 * t296 + t160 * t104 - t34 * t209 + t70 * t173 - t69 * t174 + t371 * t145 + t372 * t298 + (-t209 * t70 + t296 * t69) * qJD(4), t160 * t34 + t161 * t33 - t162 * t196 + t189 * t240 + t371 * t69 + t372 * t70, t10, -t391, t30, t288, t392, t323, t83 * t149 + t176 * t45 + t379 * t229 + t368 * t101 + (-t17 + t367) * t344 - t400 * t89, t83 * t150 - t176 * t44 + t381 * t229 + t369 * t101 + (t18 - t366) * t344 + t400 * t412, t149 * t320 - t150 * t4 - t17 * t369 - t18 * t368 + t379 * t412 - t38 * t89 + t310, t101 * t400 - t379 * t17 + t83 * t176 + t381 * t18 + t287 * t4 - t320 * t79, t10, t30, t391, t323, -t392, t288, t149 * t9 + t45 * t77 - t378 * t89 + t368 * t39 + t380 * t229 + (t14 + t367) * t344, -t1 * t149 + t14 * t369 - t15 * t368 + t150 * t2 - t35 * t89 + t380 * t412 + t310, -t150 * t9 + t44 * t77 - t378 * t412 - t369 * t39 - t382 * t229 + (-t15 + t366) * t344, t1 * t79 + t14 * t380 + t15 * t382 - t2 * t287 + t378 * t39 + t77 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t284, t258 * t295, -t202 ^ 2 - t204 ^ 2, t153 * t204 + t154 * t202 + t237, 0, 0, 0, 0, 0, 0, t311 + t417, -t104 - t403, -t411 - t422, -t145 * t69 - t298 * t70 + t189, 0, 0, 0, 0, 0, 0, t262, -t267, t304, t17 * t412 - t18 * t89 + t83, 0, 0, 0, 0, 0, 0, t262, t304, t267, -t14 * t412 - t15 * t89 + t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, -t411 + t422, -t104 + t403, -t364, -t311 + t417, t241, t145 * t162 - t238 * t70 + t34, -t162 * t298 - t238 * t69 - t33, 0, 0, -t419, -t330, t413, t419, -t418, t241, -t406 - t22 * t229 + (-t145 * t89 + t229 * t335 + t241 * t389) * pkin(4) + t4, -t420 - t23 * t229 + (t145 * t412 + t229 * t322 - t241 * t254) * pkin(4) + t320, t17 * t89 + t18 * t412 - t22 * t412 - t23 * t89 + (t389 * t44 - t254 * t45 + (t254 * t412 + t389 * t89) * qJD(5)) * pkin(4), t17 * t22 - t18 * t23 + (t389 * t4 + t101 * t145 - t254 * t320 + (-t17 * t254 + t18 * t389) * qJD(5)) * pkin(4), -t419, t413, t330, t241, t418, t419, -t387 + t49 * t89 + t306 * t229 + (pkin(5) - t242) * t241 + t4, -t239 * t45 - t242 * t44 + (t15 + t306) * t412 - (t14 + t370) * t89, t229 * t370 + t239 * t241 + t412 * t49 + t1 + t421, t1 * t239 + t14 * t306 - t15 * t370 + t2 * t242 - t39 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t419, -t330, t413, t419, -t418, t241, t291 - t406, t292 - t420, 0, 0, -t419, t413, t330, t241, t418, t419, t56 * t89 + t291 + 0.2e1 * t312 - t387, pkin(5) * t44 - qJ(6) * t45 + (t15 - t18) * t412 - (t14 - t349) * t89, t412 * t56 - 0.2e1 * t219 + 0.2e1 * t233 - t292 + t421, -pkin(5) * t2 + qJ(6) * t1 - t14 * t18 + t15 * t349 - t39 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t241 - t419, t413, -t229 ^ 2 - t390, t15 * t229 + t2 + t387;];
tauc_reg  = t3;
