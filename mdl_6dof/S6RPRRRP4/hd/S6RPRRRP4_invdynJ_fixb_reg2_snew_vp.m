% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRRP4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:25:35
% EndTime: 2019-05-06 01:25:55
% DurationCPUTime: 9.37s
% Computational Cost: add. (50664->519), mult. (122407->720), div. (0->0), fcn. (97477->10), ass. (0->345)
t299 = sin(pkin(10));
t296 = t299 ^ 2;
t300 = cos(pkin(10));
t297 = t300 ^ 2;
t365 = t296 + t297;
t303 = sin(qJ(3));
t307 = cos(qJ(3));
t283 = (-t299 * t303 + t300 * t307) * qJD(1);
t328 = t299 * t307 + t300 * t303;
t284 = t328 * qJD(1);
t302 = sin(qJ(4));
t306 = cos(qJ(4));
t259 = t283 * t302 + t284 * t306;
t357 = t300 * qJDD(1);
t358 = t299 * qJDD(1);
t241 = -t303 * t358 + t307 * t357;
t361 = t284 * qJD(3);
t268 = t241 - t361;
t282 = t328 * qJDD(1);
t362 = t283 * qJD(3);
t270 = t282 + t362;
t338 = -t306 * t268 + t302 * t270;
t209 = -qJD(4) * t259 - t338;
t208 = qJDD(5) - t209;
t298 = qJD(3) + qJD(4);
t301 = sin(qJ(5));
t305 = cos(qJ(5));
t245 = t259 * t301 - t305 * t298;
t247 = t259 * t305 + t298 * t301;
t213 = t247 * t245;
t426 = t208 - t213;
t435 = pkin(5) * t426;
t257 = -t306 * t283 + t284 * t302;
t329 = t302 * t268 + t306 * t270;
t210 = -qJD(4) * t257 + t329;
t356 = qJDD(3) + qJDD(4);
t181 = -t245 * qJD(5) + t305 * t210 + t301 * t356;
t254 = qJD(5) + t257;
t223 = t254 * t245;
t166 = t223 + t181;
t434 = qJ(6) * t166;
t231 = t259 * t257;
t424 = -t231 + t356;
t433 = t302 * t424;
t272 = t283 * t284;
t422 = qJDD(3) + t272;
t432 = t303 * t422;
t431 = t306 * t424;
t430 = t307 * t422;
t385 = t426 * t301;
t384 = t426 * t305;
t309 = qJD(1) ^ 2;
t304 = sin(qJ(1));
t410 = cos(qJ(1));
t341 = t304 * g(1) - t410 * g(2);
t331 = -qJDD(2) + t341;
t263 = (pkin(7) * t365 + qJ(2)) * t309 + (pkin(2) * t300 + pkin(1)) * qJDD(1) + t331;
t280 = t283 ^ 2;
t330 = qJD(3) * pkin(3) - pkin(8) * t284;
t205 = t268 * pkin(3) + t280 * pkin(8) - t284 * t330 + t263;
t326 = g(1) * t410 + t304 * g(2);
t332 = -t309 * pkin(1) + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t326;
t324 = pkin(7) * qJDD(1) + t332;
t409 = pkin(2) * t309;
t319 = t300 * t409 - t324;
t397 = t307 * g(3);
t398 = t303 * g(3);
t423 = (t307 * t319 + t398) * t299 - (t303 * t324 + t397) * t300;
t244 = t247 ^ 2;
t253 = t254 ^ 2;
t204 = -t244 - t253;
t243 = t245 ^ 2;
t339 = t301 * t210 - t305 * t356;
t180 = -qJD(5) * t247 - t339;
t217 = pkin(5) * t254 - qJ(6) * t247;
t355 = t297 * t409;
t216 = -t307 * t355 + (t307 * t324 - t398) * t300 + (t303 * t319 - t397) * t299;
t184 = -t280 * pkin(3) + t268 * pkin(8) - qJD(3) * t330 + t216;
t312 = t306 * t184 + t302 * t423;
t336 = t303 * t355;
t317 = t336 + (-t270 + t362) * pkin(8);
t428 = pkin(3) * t422 + t317;
t136 = t302 * t428 + t312;
t229 = pkin(4) * t257 - pkin(9) * t259;
t417 = t298 ^ 2;
t118 = -pkin(4) * t417 + pkin(9) * t356 - t257 * t229 + t136;
t252 = t298 * t257;
t193 = t210 - t252;
t124 = -t193 * pkin(9) + (t259 * t298 - t209) * pkin(4) - t205;
t78 = t305 * t118 + t301 * t124;
t322 = t180 * qJ(6) - 0.2e1 * qJD(6) * t245 - t254 * t217 + t78;
t429 = -t322 + (t204 + t243) * pkin(5);
t77 = t118 * t301 - t305 * t124;
t43 = t301 * t77 + t305 * t78;
t425 = -t223 + t181;
t370 = t309 * qJ(2);
t388 = qJDD(1) * pkin(1);
t279 = t331 + t370 + t388;
t421 = t365 * t370 - t279 - t388;
t163 = (qJD(5) - t254) * t247 + t339;
t255 = t257 ^ 2;
t256 = t259 ^ 2;
t281 = t284 ^ 2;
t363 = qJD(6) * t247;
t239 = -0.2e1 * t363;
t321 = -t434 - t77 + t435;
t53 = t239 + t321;
t416 = pkin(5) * t53;
t112 = -t163 * t305 + t166 * t301;
t196 = -t243 - t244;
t89 = t112 * t302 - t196 * t306;
t90 = t112 * t306 + t196 * t302;
t57 = t303 * t90 + t307 * t89;
t415 = pkin(7) * t57;
t197 = -t253 - t243;
t134 = t197 * t305 - t385;
t162 = (qJD(5) + t254) * t247 + t339;
t97 = t134 * t302 - t162 * t306;
t98 = t134 * t306 + t162 * t302;
t63 = t303 * t98 + t307 * t97;
t414 = pkin(7) * t63;
t170 = t208 + t213;
t386 = t170 * t305;
t140 = -t204 * t301 - t386;
t101 = t140 * t302 - t306 * t425;
t102 = t140 * t306 + t302 * t425;
t68 = t101 * t307 + t102 * t303;
t413 = pkin(7) * t68;
t412 = pkin(8) * t89;
t411 = pkin(8) * t97;
t133 = t197 * t301 + t384;
t408 = pkin(4) * t133;
t387 = t170 * t301;
t139 = t204 * t305 - t387;
t407 = pkin(4) * t139;
t406 = pkin(4) * t302;
t405 = pkin(5) * t166;
t404 = pkin(8) * t101;
t110 = -t163 * t301 - t166 * t305;
t403 = pkin(9) * t110;
t402 = pkin(9) * t133;
t401 = pkin(9) * t139;
t396 = t301 * t53;
t135 = t184 * t302 - t306 * (t423 + t428);
t85 = -t135 * t306 + t136 * t302;
t395 = t303 * t85;
t394 = t305 * t53;
t393 = t307 * t85;
t117 = -t356 * pkin(4) - t417 * pkin(9) + t229 * t259 + t135;
t392 = -pkin(4) * t117 + pkin(9) * t43;
t58 = -t303 * t89 + t307 * t90;
t391 = qJ(2) * (-t299 * t57 + t300 * t58) - pkin(1) * t110;
t64 = -t303 * t97 + t307 * t98;
t390 = qJ(2) * (-t299 * t63 + t300 * t64) - pkin(1) * t133;
t69 = -t101 * t303 + t102 * t307;
t389 = qJ(2) * (-t299 * t68 + t300 * t69) - pkin(1) * t139;
t215 = -t336 - t423;
t172 = -t215 * t307 + t216 * t303;
t383 = t172 * t299;
t382 = t205 * t302;
t381 = t205 * t306;
t227 = t231 + t356;
t380 = t227 * t302;
t379 = t227 * t306;
t378 = t254 * t301;
t377 = t254 * t305;
t376 = t263 * t303;
t375 = t263 * t307;
t265 = qJDD(3) - t272;
t374 = t265 * t303;
t373 = t265 * t307;
t372 = t298 * t302;
t371 = t298 * t306;
t113 = t301 * t117;
t114 = t305 * t117;
t369 = -pkin(4) * t196 + pkin(9) * t112;
t368 = -pkin(4) * t162 + pkin(9) * t134;
t367 = -pkin(4) * t425 + pkin(9) * t140;
t360 = qJD(4) + t298;
t352 = t302 * t213;
t351 = t306 * t213;
t350 = t113 + t367;
t349 = -t114 + t368;
t347 = -pkin(4) * t306 - pkin(3);
t346 = -pkin(2) * t110 + pkin(7) * t58;
t345 = -pkin(2) * t133 + pkin(7) * t64;
t344 = -pkin(2) * t139 + pkin(7) * t69;
t343 = -pkin(3) * t133 + pkin(8) * t98;
t342 = -pkin(3) * t139 + pkin(8) * t102;
t86 = t135 * t302 + t306 * t136;
t173 = t215 * t303 + t307 * t216;
t337 = t365 * t332;
t48 = -qJ(6) * t163 + (-t196 - t243) * pkin(5) + t322;
t240 = 0.2e1 * t363;
t50 = t240 - t321 + t434;
t335 = t301 * t50 + t305 * t48 + t369;
t334 = t369 + t43;
t120 = -pkin(5) * t425 - qJ(6) * t170;
t80 = -t180 * pkin(5) - t243 * qJ(6) + t217 * t247 + qJDD(6) + t117;
t74 = -qJ(6) * t204 + t80;
t333 = t305 * t120 + t301 * t74 + t367;
t42 = t301 * t78 - t305 * t77;
t59 = -pkin(5) * t243 + t322;
t26 = t305 * t59 - t396;
t39 = -pkin(5) * t80 + qJ(6) * t59;
t325 = -pkin(4) * t80 + pkin(9) * t26 - qJ(6) * t396 + t305 * t39;
t66 = -pkin(5) * t162 + qJ(6) * t197 - t80;
t323 = -qJ(6) * t385 + t305 * t66 + t368;
t320 = (-qJD(4) + t298) * t259 - t338;
t318 = t321 + t435;
t308 = qJD(3) ^ 2;
t293 = t297 * qJDD(1);
t292 = t296 * qJDD(1);
t286 = t365 * t309;
t276 = -t281 - t308;
t275 = -t281 + t308;
t274 = t280 - t308;
t269 = t282 + 0.2e1 * t362;
t267 = -t241 + 0.2e1 * t361;
t262 = -t308 - t280;
t251 = -t256 + t417;
t250 = t255 - t417;
t249 = -t256 - t417;
t248 = -t280 - t281;
t237 = -t276 * t303 - t373;
t236 = t276 * t307 - t374;
t235 = t241 * t307 + t282 * t303;
t234 = t241 * t303 - t282 * t307;
t233 = t262 * t307 - t432;
t232 = t262 * t303 + t430;
t230 = t256 - t255;
t225 = -t417 - t255;
t221 = -t244 + t253;
t220 = t243 - t253;
t219 = (-t257 * t306 + t259 * t302) * t298;
t218 = (-t257 * t302 - t259 * t306) * t298;
t211 = t244 - t243;
t207 = -t255 - t256;
t203 = t250 * t306 - t380;
t202 = -t251 * t302 + t431;
t201 = t250 * t302 + t379;
t200 = t251 * t306 + t433;
t199 = -t249 * t302 - t379;
t198 = t249 * t306 - t380;
t194 = t210 + t252;
t192 = -t257 * t360 + t329;
t189 = t259 * t360 + t338;
t188 = t210 * t306 - t259 * t372;
t187 = t210 * t302 + t259 * t371;
t186 = -t209 * t302 + t257 * t371;
t185 = t209 * t306 + t257 * t372;
t183 = t225 * t306 - t433;
t182 = t225 * t302 + t431;
t176 = (-t245 * t305 + t247 * t301) * t254;
t175 = (-t245 * t301 - t247 * t305) * t254;
t168 = -pkin(8) * t198 - t381;
t159 = t181 * t305 - t247 * t378;
t158 = t181 * t301 + t247 * t377;
t157 = -t180 * t301 + t245 * t377;
t156 = t180 * t305 + t245 * t378;
t155 = -t198 * t303 + t199 * t307;
t154 = t198 * t307 + t199 * t303;
t153 = -pkin(8) * t182 - t382;
t152 = t176 * t306 + t208 * t302;
t151 = t176 * t302 - t208 * t306;
t150 = t220 * t305 - t387;
t149 = -t221 * t301 + t384;
t148 = t220 * t301 + t386;
t147 = t221 * t305 + t385;
t146 = t194 * t302 + t306 * t320;
t145 = -t189 * t306 - t193 * t302;
t144 = -t194 * t306 + t302 * t320;
t143 = -t189 * t302 + t193 * t306;
t142 = -t182 * t303 + t183 * t307;
t141 = t182 * t307 + t183 * t303;
t129 = t159 * t306 + t352;
t128 = t157 * t306 - t352;
t127 = t159 * t302 - t351;
t126 = t157 * t302 + t351;
t125 = -pkin(3) * t192 + pkin(8) * t199 - t382;
t121 = -pkin(3) * t189 + pkin(8) * t183 + t381;
t111 = -t162 * t305 - t301 * t425;
t109 = -t162 * t301 + t305 * t425;
t106 = t150 * t306 - t163 * t302;
t105 = t149 * t306 + t166 * t302;
t104 = t150 * t302 + t163 * t306;
t103 = t149 * t302 - t166 * t306;
t100 = pkin(3) * t101;
t96 = pkin(3) * t97;
t94 = t111 * t306 + t211 * t302;
t93 = t111 * t302 - t211 * t306;
t92 = -t144 * t303 + t146 * t307;
t91 = t144 * t307 + t146 * t303;
t88 = pkin(3) * t89;
t87 = pkin(8) * t90;
t84 = -pkin(4) * t110 + t405;
t83 = t114 - t401;
t82 = pkin(3) * t205 + pkin(8) * t86;
t81 = t113 - t402;
t72 = -pkin(8) * t144 - t85;
t71 = -pkin(3) * t207 + pkin(8) * t146 + t86;
t70 = t299 * (-t151 * t303 + t152 * t307) + t300 * (t151 * t307 + t152 * t303);
t61 = t78 - t407;
t60 = t77 - t408;
t55 = t307 * t86 - t395;
t54 = t303 * t86 + t393;
t52 = t299 * (-t127 * t303 + t129 * t307) + t300 * (t127 * t307 + t129 * t303);
t51 = t299 * (-t126 * t303 + t128 * t307) + t300 * (t126 * t307 + t128 * t303);
t46 = -t407 - t429;
t45 = -t120 * t301 + t305 * t74 - t401;
t44 = -qJ(6) * t384 - t301 * t66 - t402;
t40 = t240 - t318 - t408;
t37 = t299 * (-t104 * t303 + t106 * t307) + t300 * (t104 * t307 + t106 * t303);
t36 = t299 * (-t103 * t303 + t105 * t307) + t300 * (t103 * t307 + t105 * t303);
t35 = t117 * t302 + t306 * t43;
t34 = -t117 * t306 + t302 * t43;
t33 = -t42 - t403;
t30 = t299 * (-t303 * t93 + t307 * t94) + t300 * (t303 * t94 + t307 * t93);
t29 = -t302 * t61 + t306 * t83 - t404;
t28 = -t302 * t60 + t306 * t81 - t411;
t25 = t301 * t59 + t394;
t23 = t302 * t83 + t306 * t61 + t342;
t22 = t302 * t81 + t306 * t60 + t343;
t21 = t110 * t406 + t306 * t33 - t412;
t20 = t26 * t306 + t302 * t80;
t19 = t26 * t302 - t306 * t80;
t18 = -t301 * t48 + t305 * t50 - t403;
t17 = t110 * t347 + t302 * t33 + t87;
t16 = -t302 * t46 + t306 * t45 - t404;
t15 = -pkin(4) * t25 - t416;
t14 = -t302 * t40 + t306 * t44 - t411;
t13 = t302 * t45 + t306 * t46 + t342;
t12 = -t303 * t34 + t307 * t35;
t11 = t303 * t35 + t307 * t34;
t10 = t302 * t44 + t306 * t40 + t343;
t9 = t18 * t306 - t302 * t84 - t412;
t8 = -pkin(3) * t110 + t18 * t302 + t306 * t84 + t87;
t7 = -pkin(8) * t34 + (-pkin(9) * t306 + t406) * t42;
t6 = -pkin(9) * t25 - qJ(6) * t394 - t301 * t39;
t5 = -t19 * t303 + t20 * t307;
t4 = t19 * t307 + t20 * t303;
t3 = pkin(8) * t35 + (-pkin(9) * t302 + t347) * t42;
t2 = -pkin(8) * t19 - t15 * t302 + t306 * t6;
t1 = -pkin(3) * t25 + pkin(8) * t20 + t15 * t306 + t302 * t6;
t24 = [0, 0, 0, 0, 0, qJDD(1), t341, t326, 0, 0, t292, 0.2e1 * t299 * t357, 0, t293, 0, 0, -t421 * t300, t421 * t299, pkin(1) * t286 + qJ(2) * (t293 + t292) + t337, pkin(1) * t279 + qJ(2) * t337, t299 * (t270 * t307 - t303 * t361) + t300 * (t270 * t303 + t307 * t361), t299 * (-t267 * t307 - t269 * t303) + t300 * (-t267 * t303 + t269 * t307), t299 * (-t275 * t303 + t430) + t300 * (t275 * t307 + t432), t299 * (-t268 * t303 - t307 * t362) + t300 * (t268 * t307 - t303 * t362), t299 * (t274 * t307 - t374) + t300 * (t274 * t303 + t373), (t299 * (t283 * t307 + t284 * t303) + t300 * (t283 * t303 - t284 * t307)) * qJD(3), t299 * (-pkin(7) * t232 - t376) + t300 * (-pkin(2) * t267 + pkin(7) * t233 + t375) - pkin(1) * t267 + qJ(2) * (-t232 * t299 + t233 * t300), t299 * (-pkin(7) * t236 - t375) + t300 * (-pkin(2) * t269 + pkin(7) * t237 - t376) - pkin(1) * t269 + qJ(2) * (-t236 * t299 + t237 * t300), t299 * (-pkin(7) * t234 - t172) + t300 * (-pkin(2) * t248 + pkin(7) * t235 + t173) - pkin(1) * t248 + qJ(2) * (-t234 * t299 + t235 * t300), -pkin(7) * t383 + t300 * (pkin(2) * t263 + pkin(7) * t173) + pkin(1) * t263 + qJ(2) * (t173 * t300 - t383), t299 * (-t187 * t303 + t188 * t307) + t300 * (t187 * t307 + t188 * t303), t299 * (-t143 * t303 + t145 * t307) + t300 * (t143 * t307 + t145 * t303), t299 * (-t200 * t303 + t202 * t307) + t300 * (t200 * t307 + t202 * t303), t299 * (-t185 * t303 + t186 * t307) + t300 * (t185 * t307 + t186 * t303), t299 * (-t201 * t303 + t203 * t307) + t300 * (t201 * t307 + t203 * t303), t299 * (-t218 * t303 + t219 * t307) + t300 * (t218 * t307 + t219 * t303), t299 * (-pkin(7) * t141 - t121 * t303 + t153 * t307) + t300 * (-pkin(2) * t189 + pkin(7) * t142 + t121 * t307 + t153 * t303) - pkin(1) * t189 + qJ(2) * (-t141 * t299 + t142 * t300), t299 * (-pkin(7) * t154 - t125 * t303 + t168 * t307) + t300 * (-pkin(2) * t192 + pkin(7) * t155 + t125 * t307 + t168 * t303) - pkin(1) * t192 + qJ(2) * (-t154 * t299 + t155 * t300), t299 * (-pkin(7) * t91 - t303 * t71 + t307 * t72) + t300 * (-pkin(2) * t207 + pkin(7) * t92 + t303 * t72 + t307 * t71) - pkin(1) * t207 + qJ(2) * (-t299 * t91 + t300 * t92), t299 * (-pkin(7) * t54 - pkin(8) * t393 - t303 * t82) + t300 * (pkin(2) * t205 + pkin(7) * t55 - pkin(8) * t395 + t307 * t82) + pkin(1) * t205 + qJ(2) * (-t299 * t54 + t300 * t55), t52, t30, t36, t51, t37, t70, t299 * (-t22 * t303 + t28 * t307 - t414) + t300 * (t22 * t307 + t28 * t303 + t345) + t390, t299 * (-t23 * t303 + t29 * t307 - t413) + t300 * (t23 * t307 + t29 * t303 + t344) + t389, t299 * (-t17 * t303 + t21 * t307 - t415) + t300 * (t17 * t307 + t21 * t303 + t346) + t391, t299 * (-pkin(7) * t11 - t3 * t303 + t307 * t7) + t300 * (-pkin(2) * t42 + pkin(7) * t12 + t3 * t307 + t303 * t7) - pkin(1) * t42 + qJ(2) * (-t11 * t299 + t12 * t300), t52, t30, t36, t51, t37, t70, t299 * (-t10 * t303 + t14 * t307 - t414) + t300 * (t10 * t307 + t14 * t303 + t345) + t390, t299 * (-t13 * t303 + t16 * t307 - t413) + t300 * (t13 * t307 + t16 * t303 + t344) + t389, t299 * (-t303 * t8 + t307 * t9 - t415) + t300 * (t303 * t9 + t307 * t8 + t346) + t391, t299 * (-pkin(7) * t4 - t1 * t303 + t2 * t307) + t300 * (-pkin(2) * t25 + pkin(7) * t5 + t1 * t307 + t2 * t303) - pkin(1) * t25 + qJ(2) * (-t299 * t4 + t300 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t357, t358, -t286, -t279, 0, 0, 0, 0, 0, 0, t267, t269, t248, -t263, 0, 0, 0, 0, 0, 0, t189, t192, t207, -t205, 0, 0, 0, 0, 0, 0, t133, t139, t110, t42, 0, 0, 0, 0, 0, 0, t133, t139, t110, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t281 - t280, t282, t272, t241, qJDD(3), -t215, -t216, 0, 0, t231, t230, t194, -t231, t320, t356, pkin(3) * t182 - t135, -t302 * t317 + (-t302 * t422 + t198) * pkin(3) - t312, pkin(3) * t144, pkin(3) * t85, t158, t109, t147, t156, t148, t175, t96 + t349, t100 + t350, t88 + t334, pkin(3) * t34 + t392, t158, t109, t147, t156, t148, t175, t323 + t96, t100 + t333, t88 + t335, pkin(3) * t19 + t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, t230, t194, -t231, t320, t356, -t135, -t136, 0, 0, t158, t109, t147, t156, t148, t175, t349, t350, t334, t392, t158, t109, t147, t156, t148, t175, t323, t333, t335, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, t211, t166, -t213, -t163, t208, -t77, -t78, 0, 0, t213, t211, t166, -t213, -t163, t208, t239 + t318, t429, -t405, t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162, t425, t196, t80;];
tauJ_reg  = t24;
