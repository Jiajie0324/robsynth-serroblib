% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:25:55
% EndTime: 2019-05-06 01:26:22
% DurationCPUTime: 24.10s
% Computational Cost: add. (177206->770), mult. (427992->1130), div. (0->0), fcn. (340792->10), ass. (0->555)
t929 = sin(pkin(10));
t930 = cos(pkin(10));
t933 = sin(qJ(3));
t937 = cos(qJ(3));
t901 = (-t929 * t933 + t930 * t937) * qJD(1);
t955 = t929 * t937 + t930 * t933;
t902 = t955 * qJD(1);
t932 = sin(qJ(4));
t936 = cos(qJ(4));
t862 = t901 * t932 + t902 * t936;
t988 = qJDD(1) * t930;
t989 = qJDD(1) * t929;
t899 = t933 * t989 - t937 * t988;
t992 = t902 * qJD(3);
t871 = -t899 - t992;
t1056 = t955 * qJDD(1);
t993 = t901 * qJD(3);
t873 = t1056 + t993;
t965 = -t936 * t871 + t932 * t873;
t793 = -t862 * qJD(4) - t965;
t791 = qJDD(5) - t793;
t931 = sin(qJ(5));
t935 = cos(qJ(5));
t985 = qJD(3) + qJD(4);
t843 = t862 * t931 - t935 * t985;
t845 = t935 * t862 + t931 * t985;
t797 = t845 * t843;
t731 = t791 - t797;
t1017 = t731 * t931;
t1016 = t731 * t935;
t1059 = t731 * pkin(5);
t860 = -t936 * t901 + t902 * t932;
t794 = -qJD(4) * t860 + t871 * t932 + t873 * t936;
t853 = t985 * t860;
t1064 = t794 - t853;
t876 = t901 * t902;
t1055 = qJDD(3) + t876;
t1063 = t1055 * t933;
t1062 = t1055 * t937;
t817 = t862 * t860;
t984 = qJDD(3) + qJDD(4);
t1057 = -t817 + t984;
t1061 = t1057 * t932;
t1060 = t1057 * t936;
t940 = qJD(1) ^ 2;
t934 = sin(qJ(1));
t938 = cos(qJ(1));
t913 = t934 * g(1) - t938 * g(2);
t961 = -qJDD(2) + t913;
t927 = t929 ^ 2;
t928 = t930 ^ 2;
t995 = t927 + t928;
t866 = (pkin(7) * t995 + qJ(2)) * t940 + (pkin(2) * t930 + pkin(1)) * qJDD(1) + t961;
t897 = t901 ^ 2;
t960 = qJD(3) * pkin(3) - pkin(8) * t902;
t787 = t871 * pkin(3) + t897 * pkin(8) - t902 * t960 + t866;
t983 = t985 ^ 2;
t750 = -t843 * qJD(5) + t935 * t794 + t931 * t984;
t857 = qJD(5) + t860;
t809 = t857 * t843;
t1058 = -t809 + t750;
t1052 = t940 * t995;
t966 = t931 * t794 - t935 * t984;
t723 = (qJD(5) - t857) * t845 + t966;
t1050 = pkin(2) * t940;
t914 = g(1) * t938 + g(2) * t934;
t903 = -pkin(1) * t940 + qJDD(1) * qJ(2) - t914;
t990 = qJD(1) * qJD(2);
t917 = -0.2e1 * t929 * t990;
t1030 = pkin(7) * qJDD(1);
t963 = t903 + 0.2e1 * t990;
t952 = t963 + t1030;
t1032 = t929 * g(3);
t923 = t928 * t940;
t954 = -pkin(2) * t923 - t1032;
t799 = (t933 * t952 - t937 * (t1050 * t929 - g(3))) * t930 + t933 * t954 - t937 * (-pkin(7) * t989 - t929 * t903 + t917);
t841 = t843 ^ 2;
t842 = t845 ^ 2;
t856 = t857 ^ 2;
t858 = t860 ^ 2;
t859 = t862 ^ 2;
t898 = t902 ^ 2;
t774 = -t856 - t841;
t684 = t774 * t931 + t1016;
t1049 = pkin(4) * t684;
t732 = t791 + t797;
t1019 = t732 * t931;
t782 = -t842 - t856;
t689 = t782 * t935 - t1019;
t1048 = pkin(4) * t689;
t1047 = pkin(4) * t932;
t727 = -t809 - t750;
t660 = -t723 * t935 - t727 * t931;
t773 = -t841 - t842;
t629 = t660 * t932 - t773 * t936;
t630 = t660 * t936 + t773 * t932;
t576 = t629 * t937 + t630 * t933;
t577 = -t629 * t933 + t630 * t937;
t526 = -t576 * t929 + t577 * t930;
t658 = -t723 * t931 + t727 * t935;
t501 = t526 * t934 - t658 * t938;
t1046 = pkin(6) * t501;
t685 = t774 * t935 - t1017;
t722 = (qJD(5) + t857) * t845 + t966;
t640 = t685 * t932 - t722 * t936;
t641 = t685 * t936 + t722 * t932;
t588 = t640 * t937 + t641 * t933;
t589 = -t640 * t933 + t641 * t937;
t538 = -t588 * t929 + t589 * t930;
t514 = t538 * t934 - t684 * t938;
t1045 = pkin(6) * t514;
t1018 = t732 * t935;
t690 = -t782 * t931 - t1018;
t643 = -t1058 * t936 + t690 * t932;
t644 = t1058 * t932 + t690 * t936;
t593 = t643 * t937 + t644 * t933;
t594 = -t643 * t933 + t644 * t937;
t541 = -t593 * t929 + t594 * t930;
t519 = t541 * t934 - t689 * t938;
t1044 = pkin(6) * t519;
t1043 = pkin(7) * t576;
t1042 = pkin(7) * t588;
t1041 = pkin(7) * t593;
t1040 = pkin(8) * t629;
t1039 = pkin(8) * t640;
t1038 = pkin(8) * t643;
t1037 = pkin(9) * t658;
t1036 = pkin(9) * t684;
t1035 = pkin(9) * t689;
t1031 = t930 * g(3);
t525 = t576 * t930 + t577 * t929;
t1029 = qJ(2) * t525;
t537 = t588 * t930 + t589 * t929;
t1028 = qJ(2) * t537;
t540 = t593 * t930 + t594 * t929;
t1027 = qJ(2) * t540;
t1026 = qJDD(1) * pkin(1);
t800 = t937 * (t930 * t952 + t954) + t933 * (-t1031 + t917 + (t1050 * t930 - t1030 - t903) * t929);
t756 = -t897 * pkin(3) + t871 * pkin(8) - qJD(3) * t960 + t800;
t943 = (-t873 + t993) * pkin(8) + t1055 * pkin(3) - t799;
t687 = t936 * t756 + t932 * t943;
t815 = pkin(4) * t860 - pkin(9) * t862;
t664 = -pkin(4) * t983 + pkin(9) * t984 - t860 * t815 + t687;
t964 = t985 * t862;
t669 = -t1064 * pkin(9) + (-t793 + t964) * pkin(4) - t787;
t996 = -t931 * t664 + t935 * t669;
t976 = t750 * qJ(6) - t996;
t951 = -qJ(6) * t809 - t976;
t994 = qJD(6) * t845;
t568 = t951 - 0.2e1 * t994 + t1059;
t1025 = t568 * t931;
t1024 = t568 * t935;
t686 = t756 * t932 - t936 * t943;
t624 = -t686 * t936 + t687 * t932;
t1023 = t624 * t933;
t1022 = t624 * t937;
t663 = -t984 * pkin(4) - t983 * pkin(9) + t815 * t862 + t686;
t1021 = t663 * t931;
t1020 = t663 * t935;
t738 = -t799 * t937 + t800 * t933;
t1015 = t738 * t929;
t1014 = t738 * t930;
t1013 = t787 * t932;
t1012 = t787 * t936;
t813 = t817 + t984;
t1011 = t813 * t932;
t1010 = t813 * t936;
t1009 = t857 * t931;
t1008 = t857 * t935;
t1007 = t866 * t933;
t1006 = t866 * t937;
t868 = qJDD(3) - t876;
t1005 = t868 * t933;
t1004 = t868 * t937;
t895 = t940 * qJ(2) + t1026 + t961;
t1003 = t895 * t934;
t1002 = t895 * t938;
t1001 = t927 * t940;
t1000 = t929 * t930;
t999 = -pkin(1) * t658 + qJ(2) * t526;
t998 = -pkin(1) * t684 + qJ(2) * t538;
t997 = -pkin(1) * t689 + qJ(2) * t541;
t608 = t935 * t664 + t931 * t669;
t987 = qJDD(1) * t934;
t986 = qJDD(1) * t938;
t982 = t932 * t797;
t981 = t936 * t797;
t980 = t934 * t817;
t979 = t938 * t817;
t978 = t934 * t876;
t977 = t938 * t876;
t974 = -pkin(4) * t936 - pkin(3);
t973 = -pkin(2) * t658 + pkin(7) * t577;
t972 = -pkin(2) * t684 + pkin(7) * t589;
t971 = -pkin(2) * t689 + pkin(7) * t594;
t970 = -pkin(3) * t684 + pkin(8) * t641;
t969 = -pkin(3) * t689 + pkin(8) * t644;
t968 = t895 + t1026;
t625 = t686 * t932 + t936 * t687;
t739 = t799 * t933 + t937 * t800;
t877 = t929 * t963 + t1031;
t878 = t930 * t963 - t1032;
t826 = t877 * t929 + t930 * t878;
t886 = -t913 * t934 - t938 * t914;
t912 = -t934 * t940 + t986;
t962 = -pkin(6) * t912 - g(3) * t934;
t959 = t932 * t853;
t958 = t932 * t964;
t957 = t936 * t853;
t956 = t936 * t964;
t552 = t608 * t931 + t935 * t996;
t553 = t608 * t935 - t931 * t996;
t825 = t877 * t930 - t878 * t929;
t885 = t913 * t938 - t914 * t934;
t911 = t938 * t940 + t987;
t765 = qJD(3) * t862 - t965;
t905 = t930 * t1052;
t882 = -t905 * t934 + t930 * t986;
t953 = t905 * t938 + t930 * t987;
t749 = -qJD(5) * t845 - t966;
t801 = pkin(5) * t857 - qJ(6) * t845;
t950 = t749 * qJ(6) - 0.2e1 * qJD(6) * t843 - t857 * t801 + t608;
t948 = -pkin(1) * t525 - pkin(2) * t576 - pkin(3) * t629 + pkin(4) * t773 - pkin(9) * t660;
t947 = -pkin(1) * t537 - pkin(2) * t588 - pkin(3) * t640 + pkin(4) * t722 - pkin(9) * t685;
t946 = -pkin(1) * t540 - pkin(2) * t593 - pkin(3) * t643 + pkin(4) * t1058 - pkin(9) * t690;
t611 = -t749 * pkin(5) - t841 * qJ(6) + t801 * t845 + qJDD(6) + t663;
t939 = qJD(3) ^ 2;
t922 = t928 * qJDD(1);
t921 = t927 * qJDD(1);
t910 = t923 - t1001;
t909 = t923 + t1001;
t908 = t922 - t921;
t907 = t922 + t921;
t904 = t929 * t1052;
t896 = -pkin(6) * t911 + g(3) * t938;
t891 = -t898 - t939;
t890 = -t898 + t939;
t889 = t897 - t939;
t888 = t912 * t1000;
t887 = t911 * t1000;
t883 = t904 * t938 + t929 * t987;
t881 = t904 * t934 - t929 * t986;
t880 = t907 * t938 - t909 * t934;
t879 = t907 * t934 + t909 * t938;
t875 = -t898 + t897;
t872 = t1056 + 0.2e1 * t993;
t870 = t899 + 0.2e1 * t992;
t865 = -t939 - t897;
t855 = (t901 * t937 + t902 * t933) * qJD(3);
t854 = (t901 * t933 - t902 * t937) * qJD(3);
t851 = -t859 + t983;
t850 = t858 - t983;
t848 = -t859 - t983;
t846 = -t897 - t898;
t838 = 0.2e1 * t994;
t836 = t873 * t937 - t933 * t992;
t835 = t873 * t933 + t937 * t992;
t834 = -t871 * t933 - t937 * t993;
t833 = t871 * t937 - t933 * t993;
t832 = -t891 * t933 - t1004;
t831 = -t890 * t933 + t1062;
t830 = t889 * t937 - t1005;
t829 = t891 * t937 - t1005;
t828 = t890 * t937 + t1063;
t827 = t889 * t933 + t1004;
t823 = -t870 * t937 - t872 * t933;
t822 = t1056 * t933 - t899 * t937;
t821 = -t870 * t933 + t872 * t937;
t820 = -t1056 * t937 - t899 * t933;
t819 = t865 * t937 - t1063;
t818 = t865 * t933 + t1062;
t816 = -t859 + t858;
t811 = -t983 - t858;
t808 = -t854 * t929 + t855 * t930;
t807 = -t842 + t856;
t806 = t841 - t856;
t805 = -t957 + t958;
t804 = -t959 - t956;
t803 = t826 * t938 - t1003;
t802 = t826 * t934 + t1002;
t796 = -t842 + t841;
t795 = -pkin(7) * t829 - t1006;
t792 = -pkin(7) * t818 - t1007;
t790 = -t858 - t859;
t789 = -t835 * t929 + t836 * t930;
t788 = -t833 * t929 + t834 * t930;
t786 = -t829 * t929 + t832 * t930;
t785 = -t828 * t929 + t831 * t930;
t784 = -t827 * t929 + t830 * t930;
t783 = t829 * t930 + t832 * t929;
t781 = t850 * t936 - t1011;
t780 = -t851 * t932 + t1060;
t779 = t850 * t932 + t1010;
t778 = t851 * t936 + t1061;
t777 = -pkin(2) * t872 + pkin(7) * t832 - t1007;
t776 = -t848 * t932 - t1010;
t775 = t848 * t936 - t1011;
t772 = -pkin(2) * t870 + pkin(7) * t819 + t1006;
t771 = -t821 * t929 + t823 * t930;
t770 = -t820 * t929 + t822 * t930;
t769 = t820 * t930 + t822 * t929;
t768 = -t794 - t853;
t763 = (0.2e1 * qJD(4) + qJD(3)) * t862 + t965;
t762 = -t818 * t929 + t819 * t930;
t761 = t818 * t930 + t819 * t929;
t760 = t936 * t794 - t958;
t759 = t932 * t794 + t956;
t758 = -t932 * t793 + t957;
t757 = t936 * t793 + t959;
t755 = t786 * t938 + t872 * t934;
t754 = t786 * t934 - t872 * t938;
t753 = t811 * t936 - t1061;
t752 = t811 * t932 + t1060;
t745 = (-t843 * t935 + t845 * t931) * t857;
t744 = (t843 * t931 + t845 * t935) * t857;
t741 = -t804 * t933 + t805 * t937;
t740 = t804 * t937 + t805 * t933;
t737 = t762 * t938 + t870 * t934;
t736 = t762 * t934 - t870 * t938;
t735 = t770 * t938 + t846 * t934;
t734 = t770 * t934 - t846 * t938;
t730 = pkin(2) * t866 + pkin(7) * t739;
t729 = -pkin(1) * t769 - pkin(2) * t820;
t728 = -pkin(8) * t775 - t1012;
t721 = -pkin(7) * t820 - t738;
t720 = -t779 * t933 + t781 * t937;
t719 = -t778 * t933 + t780 * t937;
t718 = t779 * t937 + t781 * t933;
t717 = t778 * t937 + t780 * t933;
t716 = -t1009 * t845 + t750 * t935;
t715 = -t1008 * t845 - t750 * t931;
t714 = t1008 * t843 - t749 * t931;
t713 = -t1009 * t843 - t749 * t935;
t712 = -t775 * t933 + t776 * t937;
t711 = t775 * t937 + t776 * t933;
t710 = -pkin(1) * t783 - pkin(2) * t829 + t800;
t709 = -pkin(8) * t752 - t1013;
t708 = t745 * t936 + t791 * t932;
t707 = t745 * t932 - t791 * t936;
t706 = t806 * t935 - t1019;
t705 = -t807 * t931 + t1016;
t704 = -t806 * t931 - t1018;
t703 = -t807 * t935 - t1017;
t702 = -pkin(2) * t846 + pkin(7) * t822 + t739;
t701 = t765 * t936 - t768 * t932;
t700 = -t1064 * t932 - t763 * t936;
t699 = t765 * t932 + t768 * t936;
t698 = t1064 * t936 - t763 * t932;
t697 = -pkin(1) * t761 - pkin(2) * t818 + t799;
t696 = -t759 * t933 + t760 * t937;
t695 = -t757 * t933 + t758 * t937;
t694 = t759 * t937 + t760 * t933;
t693 = t757 * t937 + t758 * t933;
t692 = -t752 * t933 + t753 * t937;
t691 = t752 * t937 + t753 * t933;
t681 = -qJ(2) * t783 - t777 * t929 + t795 * t930;
t680 = t716 * t936 + t982;
t679 = t714 * t936 - t982;
t678 = t716 * t932 - t981;
t677 = t714 * t932 + t981;
t676 = -t740 * t929 + t741 * t930;
t675 = t739 * t930 - t1015;
t674 = t739 * t929 + t1014;
t673 = -pkin(3) * t1064 + pkin(8) * t776 - t1013;
t672 = -qJ(2) * t761 - t772 * t929 + t792 * t930;
t671 = t675 * t938 - t866 * t934;
t670 = t675 * t934 + t866 * t938;
t666 = -pkin(3) * t763 + pkin(8) * t753 + t1012;
t665 = -pkin(5) * t1058 - qJ(6) * t732;
t659 = -t1058 * t931 - t722 * t935;
t657 = -t1058 * t935 + t722 * t931;
t655 = -t718 * t929 + t720 * t930;
t654 = -t717 * t929 + t719 * t930;
t653 = -t711 * t929 + t712 * t930;
t652 = t711 * t930 + t712 * t929;
t651 = t706 * t936 - t723 * t932;
t650 = t705 * t936 - t727 * t932;
t649 = t706 * t932 + t723 * t936;
t648 = t705 * t932 + t727 * t936;
t647 = -pkin(1) * t674 - pkin(2) * t738;
t646 = -t707 * t933 + t708 * t937;
t645 = t707 * t937 + t708 * t933;
t638 = t659 * t936 - t796 * t932;
t637 = t659 * t932 + t796 * t936;
t636 = -t699 * t933 + t701 * t937;
t635 = -t698 * t933 + t700 * t937;
t634 = t699 * t937 + t701 * t933;
t633 = t698 * t937 + t700 * t933;
t632 = -t694 * t929 + t696 * t930;
t631 = -t693 * t929 + t695 * t930;
t628 = pkin(8) * t630;
t627 = -t691 * t929 + t692 * t930;
t626 = t691 * t930 + t692 * t929;
t623 = t1064 * t934 + t653 * t938;
t622 = -t1064 * t938 + t653 * t934;
t621 = -qJ(2) * t769 - t702 * t929 + t721 * t930;
t620 = -t678 * t933 + t680 * t937;
t619 = -t677 * t933 + t679 * t937;
t618 = t678 * t937 + t680 * t933;
t617 = t677 * t937 + t679 * t933;
t616 = -pkin(4) * t658 - pkin(5) * t727;
t615 = -pkin(7) * t1014 - qJ(2) * t674 - t730 * t929;
t614 = t1020 - t1035;
t613 = pkin(3) * t787 + pkin(8) * t625;
t612 = t1021 - t1036;
t610 = t627 * t938 + t763 * t934;
t609 = t627 * t934 - t763 * t938;
t606 = -pkin(7) * t711 - t673 * t933 + t728 * t937;
t605 = -qJ(6) * t782 + t611;
t604 = -pkin(8) * t699 - t624;
t603 = -pkin(7) * t691 - t666 * t933 + t709 * t937;
t602 = -pkin(2) * t1064 + pkin(7) * t712 + t673 * t937 + t728 * t933;
t601 = -pkin(3) * t790 + pkin(8) * t701 + t625;
t600 = -t649 * t933 + t651 * t937;
t599 = -t648 * t933 + t650 * t937;
t598 = t649 * t937 + t651 * t933;
t597 = t648 * t937 + t650 * t933;
t596 = -t645 * t929 + t646 * t930;
t595 = t645 * t930 + t646 * t929;
t591 = -pkin(5) * t722 + qJ(6) * t774 - t611;
t590 = -pkin(2) * t763 + pkin(7) * t692 + t666 * t937 + t709 * t933;
t586 = t608 - t1048;
t585 = -t637 * t933 + t638 * t937;
t584 = t637 * t937 + t638 * t933;
t583 = -t996 - t1049;
t582 = -t634 * t929 + t636 * t930;
t581 = -t633 * t929 + t635 * t930;
t580 = t634 * t930 + t636 * t929;
t579 = -pkin(1) * t652 - pkin(2) * t711 - pkin(3) * t775 + t687;
t578 = -pkin(5) * t841 + t950;
t574 = t582 * t938 + t790 * t934;
t573 = t582 * t934 - t790 * t938;
t572 = t596 * t938 - t744 * t934;
t571 = t596 * t934 + t744 * t938;
t570 = t625 * t937 - t1023;
t569 = t625 * t933 + t1022;
t567 = -t618 * t929 + t620 * t930;
t566 = -t617 * t929 + t619 * t930;
t565 = t618 * t930 + t620 * t929;
t564 = t617 * t930 + t619 * t929;
t563 = -pkin(1) * t626 - pkin(2) * t691 - pkin(3) * t752 + t686;
t562 = t838 + (-t727 + t809) * qJ(6) - t1059 + t976;
t561 = -qJ(6) * t723 + (-t773 - t841) * pkin(5) + t950;
t560 = t567 * t938 - t715 * t934;
t559 = t566 * t938 - t713 * t934;
t558 = t567 * t934 + t715 * t938;
t557 = t566 * t934 + t713 * t938;
t556 = -t1048 + (-t782 - t841) * pkin(5) + t950;
t555 = t605 * t935 - t665 * t931 - t1035;
t554 = -qJ(6) * t1016 - t591 * t931 - t1036;
t551 = -t1049 + t838 - t951 - 0.2e1 * t1059;
t550 = -pkin(5) * t611 + qJ(6) * t578;
t549 = -pkin(1) * t580 - pkin(2) * t634 - pkin(3) * t699;
t548 = -t598 * t929 + t600 * t930;
t547 = -t597 * t929 + t599 * t930;
t546 = t598 * t930 + t600 * t929;
t545 = t597 * t930 + t599 * t929;
t544 = t553 * t936 + t663 * t932;
t543 = t553 * t932 - t663 * t936;
t542 = -t552 - t1037;
t535 = -t584 * t929 + t585 * t930;
t534 = t584 * t930 + t585 * t929;
t533 = -qJ(2) * t652 - t602 * t929 + t606 * t930;
t532 = t548 * t938 - t704 * t934;
t531 = t547 * t938 - t703 * t934;
t530 = t548 * t934 + t704 * t938;
t529 = t547 * t934 + t703 * t938;
t528 = -t586 * t932 + t614 * t936 - t1038;
t527 = -t583 * t932 + t612 * t936 - t1039;
t523 = t578 * t935 - t1025;
t522 = t578 * t931 + t1024;
t521 = -pkin(7) * t634 - t601 * t933 + t604 * t937;
t520 = t541 * t938 + t689 * t934;
t518 = pkin(6) * t520;
t517 = -t569 * t929 + t570 * t930;
t516 = t569 * t930 + t570 * t929;
t515 = t538 * t938 + t684 * t934;
t513 = pkin(6) * t515;
t512 = -pkin(2) * t790 + pkin(7) * t636 + t601 * t937 + t604 * t933;
t511 = -pkin(7) * t569 - pkin(8) * t1022 - t613 * t933;
t510 = t517 * t938 - t787 * t934;
t509 = t517 * t934 + t787 * t938;
t508 = -qJ(2) * t626 - t590 * t929 + t603 * t930;
t507 = t586 * t936 + t614 * t932 + t969;
t506 = t535 * t938 - t657 * t934;
t505 = t535 * t934 + t657 * t938;
t504 = t583 * t936 + t612 * t932 + t970;
t503 = pkin(2) * t787 + pkin(7) * t570 - pkin(8) * t1023 + t613 * t937;
t502 = t526 * t938 + t658 * t934;
t500 = pkin(6) * t502;
t499 = t1047 * t658 + t542 * t936 - t1040;
t498 = t523 * t936 + t611 * t932;
t497 = t523 * t932 - t611 * t936;
t496 = -t561 * t931 + t562 * t935 - t1037;
t495 = t932 * t542 + t658 * t974 + t628;
t494 = t555 * t936 - t556 * t932 - t1038;
t493 = -pkin(4) * t522 - pkin(5) * t568;
t492 = -t551 * t932 + t554 * t936 - t1039;
t491 = t555 * t932 + t556 * t936 + t969;
t490 = -t543 * t933 + t544 * t937;
t489 = t543 * t937 + t544 * t933;
t488 = t551 * t936 + t554 * t932 + t970;
t487 = -pkin(1) * t516 - pkin(2) * t569 - pkin(3) * t624;
t486 = t946 - t1021;
t485 = t496 * t936 - t616 * t932 - t1040;
t484 = t947 + t1020;
t483 = -pkin(3) * t658 + t496 * t932 + t616 * t936 + t628;
t482 = -pkin(8) * t543 + (-pkin(9) * t936 + t1047) * t552;
t481 = -t605 * t931 - t665 * t935 + t946;
t480 = -pkin(9) * t522 - qJ(6) * t1024 - t550 * t931;
t479 = qJ(6) * t1017 - t591 * t935 + t947;
t478 = -t507 * t933 + t528 * t937 - t1041;
t477 = -qJ(2) * t580 - t512 * t929 + t521 * t930;
t476 = -t504 * t933 + t527 * t937 - t1042;
t475 = -t497 * t933 + t498 * t937;
t474 = t497 * t937 + t498 * t933;
t473 = -t553 + t948;
t472 = t507 * t937 + t528 * t933 + t971;
t471 = t504 * t937 + t527 * t933 + t972;
t470 = pkin(8) * t544 + (-pkin(9) * t932 + t974) * t552;
t469 = -t561 * t935 - t562 * t931 + t948;
t468 = -qJ(2) * t516 - t503 * t929 + t511 * t930;
t467 = -t495 * t933 + t499 * t937 - t1043;
t466 = -t489 * t929 + t490 * t930;
t465 = t489 * t930 + t490 * t929;
t464 = t495 * t937 + t499 * t933 + t973;
t463 = -t491 * t933 + t494 * t937 - t1041;
t462 = t491 * t937 + t494 * t933 + t971;
t461 = -t488 * t933 + t492 * t937 - t1042;
t460 = t488 * t937 + t492 * t933 + t972;
t459 = t466 * t938 + t552 * t934;
t458 = t466 * t934 - t552 * t938;
t457 = -t483 * t933 + t485 * t937 - t1043;
t456 = t483 * t937 + t485 * t933 + t973;
t455 = -pkin(8) * t497 + t480 * t936 - t493 * t932;
t454 = -t474 * t929 + t475 * t930;
t453 = t474 * t930 + t475 * t929;
t452 = -t472 * t929 + t478 * t930 - t1027;
t451 = -pkin(3) * t522 + pkin(8) * t498 + t480 * t932 + t493 * t936;
t450 = -t471 * t929 + t476 * t930 - t1028;
t449 = t454 * t938 + t522 * t934;
t448 = t454 * t934 - t522 * t938;
t447 = -pkin(7) * t489 - t470 * t933 + t482 * t937;
t446 = -pkin(1) * t465 - pkin(2) * t489 - pkin(3) * t543 + pkin(4) * t663 - pkin(9) * t553;
t445 = -pkin(2) * t552 + pkin(7) * t490 + t470 * t937 + t482 * t933;
t444 = -t464 * t929 + t467 * t930 - t1029;
t443 = -t462 * t929 + t463 * t930 - t1027;
t442 = -t460 * t929 + t461 * t930 - t1028;
t441 = -t456 * t929 + t457 * t930 - t1029;
t440 = -pkin(1) * t453 - pkin(2) * t474 - pkin(3) * t497 + pkin(4) * t611 - pkin(9) * t523 + qJ(6) * t1025 - t550 * t935;
t439 = -pkin(7) * t474 - t451 * t933 + t455 * t937;
t438 = -pkin(2) * t522 + pkin(7) * t475 + t451 * t937 + t455 * t933;
t437 = -qJ(2) * t465 - t445 * t929 + t447 * t930;
t436 = -qJ(2) * t453 - t438 * t929 + t439 * t930;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t911, -t912, 0, t886, 0, 0, 0, 0, 0, 0, -t953, t883, t880, t803, 0, 0, 0, 0, 0, 0, t737, t755, t735, t671, 0, 0, 0, 0, 0, 0, t610, t623, t574, t510, 0, 0, 0, 0, 0, 0, t515, t520, t502, t459, 0, 0, 0, 0, 0, 0, t515, t520, t502, t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t912, -t911, 0, t885, 0, 0, 0, 0, 0, 0, t882, t881, t879, t802, 0, 0, 0, 0, 0, 0, t736, t754, t734, t670, 0, 0, 0, 0, 0, 0, t609, t622, t573, t509, 0, 0, 0, 0, 0, 0, t514, t519, t501, t458, 0, 0, 0, 0, 0, 0, t514, t519, t501, t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t825, 0, 0, 0, 0, 0, 0, t761, t783, t769, t674, 0, 0, 0, 0, 0, 0, t626, t652, t580, t516, 0, 0, 0, 0, 0, 0, t537, t540, t525, t465, 0, 0, 0, 0, 0, 0, t537, t540, t525, t453; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t912, 0, -t911, 0, t962, -t896, -t885, -pkin(6) * t885, t888, t908 * t938 - t910 * t934, t883, -t888, t953, 0, -pkin(6) * t882 - t1002 * t929 - t877 * t934, -pkin(6) * t881 - t1002 * t930 - t878 * t934, -pkin(6) * t879 + t825 * t938, -pkin(6) * t802 - (pkin(1) * t934 - qJ(2) * t938) * t825, t789 * t938 - t978, t771 * t938 - t875 * t934, t1056 * t934 + t785 * t938, t788 * t938 + t978, t784 * t938 - t899 * t934, qJDD(3) * t934 + t808 * t938, -pkin(6) * t736 + t672 * t938 - t697 * t934, -pkin(6) * t754 + t681 * t938 - t710 * t934, -pkin(6) * t734 + t621 * t938 - t729 * t934, -pkin(6) * t670 + t615 * t938 - t647 * t934, t632 * t938 + t980, t581 * t938 - t816 * t934, t654 * t938 - t768 * t934, t631 * t938 - t980, t655 * t938 + t765 * t934, t938 * t676 + t934 * t984, -pkin(6) * t609 + t508 * t938 - t563 * t934, -pkin(6) * t622 + t533 * t938 - t579 * t934, -pkin(6) * t573 + t477 * t938 - t549 * t934, -pkin(6) * t509 + t468 * t938 - t487 * t934, t560, t506, t531, t559, t532, t572, t450 * t938 - t484 * t934 - t1045, t452 * t938 - t486 * t934 - t1044, t444 * t938 - t473 * t934 - t1046, -pkin(6) * t458 + t437 * t938 - t446 * t934, t560, t506, t531, t559, t532, t572, t442 * t938 - t479 * t934 - t1045, t443 * t938 - t481 * t934 - t1044, t441 * t938 - t469 * t934 - t1046, -pkin(6) * t448 + t436 * t938 - t440 * t934; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t911, 0, t912, 0, t896, t962, t886, pkin(6) * t886, t887, t908 * t934 + t910 * t938, t881, -t887, -t882, 0, -pkin(6) * t953 - t1003 * t929 + t877 * t938, pkin(6) * t883 - t1003 * t930 + t878 * t938, pkin(6) * t880 + t825 * t934, pkin(6) * t803 - (-pkin(1) * t938 - qJ(2) * t934) * t825, t789 * t934 + t977, t771 * t934 + t875 * t938, -t1056 * t938 + t785 * t934, t788 * t934 - t977, t784 * t934 + t899 * t938, -qJDD(3) * t938 + t808 * t934, pkin(6) * t737 + t672 * t934 + t697 * t938, pkin(6) * t755 + t681 * t934 + t710 * t938, pkin(6) * t735 + t621 * t934 + t729 * t938, pkin(6) * t671 + t615 * t934 + t647 * t938, t632 * t934 - t979, t581 * t934 + t816 * t938, t654 * t934 + t768 * t938, t631 * t934 + t979, t655 * t934 - t765 * t938, t934 * t676 - t938 * t984, pkin(6) * t610 + t508 * t934 + t563 * t938, pkin(6) * t623 + t533 * t934 + t579 * t938, pkin(6) * t574 + t477 * t934 + t549 * t938, pkin(6) * t510 + t468 * t934 + t487 * t938, t558, t505, t529, t557, t530, t571, t450 * t934 + t484 * t938 + t513, t452 * t934 + t486 * t938 + t518, t444 * t934 + t473 * t938 + t500, pkin(6) * t459 + t437 * t934 + t446 * t938, t558, t505, t529, t557, t530, t571, t442 * t934 + t479 * t938 + t513, t443 * t934 + t481 * t938 + t518, t441 * t934 + t469 * t938 + t500, pkin(6) * t449 + t436 * t934 + t440 * t938; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t913, t914, 0, 0, t921, 0.2e1 * t929 * t988, 0, t922, 0, 0, -qJ(2) * t905 + t930 * t968, qJ(2) * t904 - t929 * t968, pkin(1) * t909 + qJ(2) * t907 + t826, pkin(1) * t895 + qJ(2) * t826, t835 * t930 + t836 * t929, t821 * t930 + t823 * t929, t828 * t930 + t831 * t929, t833 * t930 + t834 * t929, t827 * t930 + t830 * t929, t854 * t930 + t855 * t929, -pkin(1) * t870 + qJ(2) * t762 + t772 * t930 + t792 * t929, -pkin(1) * t872 + qJ(2) * t786 + t777 * t930 + t795 * t929, -pkin(1) * t846 + qJ(2) * t770 + t702 * t930 + t721 * t929, pkin(1) * t866 - pkin(7) * t1015 + qJ(2) * t675 + t730 * t930, t694 * t930 + t696 * t929, t633 * t930 + t635 * t929, t717 * t930 + t719 * t929, t693 * t930 + t695 * t929, t718 * t930 + t720 * t929, t740 * t930 + t741 * t929, -pkin(1) * t763 + qJ(2) * t627 + t590 * t930 + t603 * t929, -pkin(1) * t1064 + qJ(2) * t653 + t602 * t930 + t606 * t929, -pkin(1) * t790 + qJ(2) * t582 + t512 * t930 + t521 * t929, pkin(1) * t787 + qJ(2) * t517 + t503 * t930 + t511 * t929, t565, t534, t545, t564, t546, t595, t471 * t930 + t476 * t929 + t998, t472 * t930 + t478 * t929 + t997, t464 * t930 + t467 * t929 + t999, -pkin(1) * t552 + qJ(2) * t466 + t445 * t930 + t447 * t929, t565, t534, t545, t564, t546, t595, t460 * t930 + t461 * t929 + t998, t462 * t930 + t463 * t929 + t997, t456 * t930 + t457 * t929 + t999, -pkin(1) * t522 + qJ(2) * t454 + t438 * t930 + t439 * t929;];
tauB_reg  = t1;
