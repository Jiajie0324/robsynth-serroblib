% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP4_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:08:53
% EndTime: 2019-03-09 06:09:08
% DurationCPUTime: 9.52s
% Computational Cost: add. (17183->629), mult. (42144->746), div. (0->0), fcn. (33389->14), ass. (0->325)
t262 = cos(qJ(5));
t363 = qJD(5) * t262;
t255 = sin(pkin(10));
t256 = cos(pkin(10));
t428 = sin(qJ(3));
t430 = cos(qJ(3));
t287 = -t255 * t430 - t256 * t428;
t189 = t287 * qJD(1);
t260 = sin(qJ(4));
t344 = t428 * t255;
t288 = -t256 * t430 + t344;
t188 = t288 * qJD(1);
t429 = cos(qJ(4));
t443 = t429 * t188;
t152 = t189 * t260 - t443;
t461 = t152 * t262;
t478 = t363 - t461;
t259 = sin(qJ(5));
t293 = t260 * t188 + t189 * t429;
t357 = qJD(3) + qJD(4);
t318 = t262 * t357;
t137 = -t259 * t293 - t318;
t337 = qJD(3) * t428;
t311 = qJD(1) * t337;
t331 = qJDD(1) * t430;
t338 = qJD(3) * t430;
t460 = qJD(1) * t338 + qJDD(1) * t428;
t346 = t255 * t331 + t256 * t460;
t155 = t255 * t311 - t346;
t347 = -t255 * t460 - t256 * t311;
t285 = -t256 * t331 - t347;
t366 = qJD(4) * t260;
t270 = t155 * t429 - t189 * t366 + t260 * t285;
t336 = qJD(4) * t429;
t268 = t188 * t336 + t270;
t356 = qJDD(3) + qJDD(4);
t139 = t259 * t357 - t262 * t293;
t365 = qJD(5) * t139;
t69 = -t259 * t268 - t262 * t356 + t365;
t407 = -t137 * t363 - t259 * t69;
t457 = qJD(5) - t152;
t473 = t457 * t259;
t445 = t139 * t473;
t364 = qJD(5) * t259;
t68 = -qJD(5) * t318 - t259 * t356 + t262 * t268 - t293 * t364;
t477 = t137 * t461 - t262 * t68 + t407 - t445;
t415 = qJ(6) * t69;
t240 = t256 * pkin(2) + pkin(1);
t207 = -qJD(1) * t240 + qJD(2);
t162 = pkin(3) * t188 + t207;
t102 = -pkin(4) * t152 + pkin(9) * t293 + t162;
t418 = pkin(7) + qJ(2);
t218 = t418 * t255;
t199 = qJD(1) * t218;
t219 = t418 * t256;
t200 = qJD(1) * t219;
t345 = t428 * t200;
t158 = -t430 * t199 - t345;
t135 = t189 * pkin(8) + t158;
t133 = qJD(3) * pkin(3) + t135;
t289 = t199 * t428 - t200 * t430;
t136 = -t188 * pkin(8) - t289;
t359 = qJD(1) * qJD(2);
t435 = qJDD(1) * t418 + t359;
t170 = t435 * t255;
t171 = t435 * t256;
t304 = -t430 * t170 - t171 * t428;
t120 = qJD(3) * t289 + t304;
t89 = qJDD(3) * pkin(3) + t155 * pkin(8) + t120;
t349 = -t428 * t170 + t430 * t171 - t199 * t338;
t119 = -t200 * t337 + t349;
t92 = -pkin(8) * t285 + t119;
t25 = t133 * t336 - t136 * t366 + t260 * t89 + t429 * t92;
t23 = pkin(9) * t356 + t25;
t400 = qJDD(1) * pkin(1);
t244 = qJDD(2) - t400;
t358 = t256 * qJDD(1);
t327 = t260 * t155 - t429 * t285;
t458 = qJD(4) * t293;
t93 = -t327 - t458;
t45 = -pkin(2) * t358 + pkin(3) * t285 + t93 * pkin(4) + pkin(9) * t268 + t244;
t132 = t429 * t136;
t101 = t260 * t133 + t132;
t95 = pkin(9) * t357 + t101;
t5 = t102 * t363 + t262 * t23 + t259 * t45 - t95 * t364;
t3 = -qJD(6) * t137 - t415 + t5;
t254 = pkin(10) + qJ(3);
t247 = qJ(4) + t254;
t238 = sin(t247);
t233 = g(3) * t238;
t239 = cos(t247);
t263 = cos(qJ(1));
t375 = t239 * t263;
t261 = sin(qJ(1));
t376 = t239 * t261;
t348 = g(1) * t375 + g(2) * t376 + t233;
t416 = qJ(6) * t68;
t91 = qJDD(5) + t93;
t431 = pkin(5) * t91;
t53 = t102 * t259 + t262 * t95;
t6 = -qJD(5) * t53 - t23 * t259 + t262 * t45;
t1 = -qJD(6) * t139 + t416 + t431 + t6;
t43 = -qJ(6) * t137 + t53;
t414 = t457 * t43;
t449 = t1 + t414;
t476 = -t259 * t449 + t3 * t262 - t348;
t462 = t152 * t259;
t475 = pkin(5) * t462;
t412 = t457 * t53;
t474 = t6 + t412;
t52 = t262 * t102 - t259 * t95;
t413 = t457 * t52;
t439 = -g(1) * t261 + g(2) * t263;
t297 = -t244 - t439;
t444 = t152 * t357;
t472 = -t268 - t444;
t388 = t152 ^ 2;
t389 = t293 ^ 2;
t471 = -t388 + t389;
t321 = t133 * t366 + t136 * t336 + t260 * t92 - t429 * t89;
t24 = -pkin(4) * t356 + t321;
t18 = t69 * pkin(5) + qJDD(6) + t24;
t329 = t137 * pkin(5) + qJD(6);
t131 = t260 * t136;
t100 = t133 * t429 - t131;
t94 = -pkin(4) * t357 - t100;
t75 = t329 + t94;
t448 = t18 * t259 + t75 * t363;
t470 = -t293 * t43 - t75 * t461 + t448;
t421 = g(3) * t239;
t342 = -t18 - t421;
t377 = t238 * t263;
t378 = t238 * t261;
t441 = g(1) * t377 + g(2) * t378;
t369 = t441 * t262;
t42 = -qJ(6) * t139 + t52;
t38 = pkin(5) * t457 + t42;
t72 = t75 * t364;
t469 = t262 * t342 + t293 * t38 - t462 * t75 + t369 + t72;
t468 = qJ(6) * t462 + t262 * qJD(6);
t65 = t68 * t259;
t466 = t478 * t139 - t65;
t392 = t139 * t293;
t82 = t259 * t91;
t465 = t457 * t478 + t392 + t82;
t464 = t152 * t94;
t396 = t137 * t293;
t463 = t457 * t293;
t383 = t152 * t293;
t362 = t293 * qJD(3);
t459 = -t362 + t327;
t84 = t94 * t364;
t455 = t52 * t293 + t369 + t84;
t447 = t24 * t259 + t94 * t363;
t453 = -t53 * t293 + t447;
t452 = -t162 * t152 - t25 + t348;
t451 = t162 * t293 - t321 - t421 + t441;
t118 = -pkin(4) * t293 - pkin(9) * t152;
t249 = t262 * qJ(6);
t450 = pkin(5) * t293 + t152 * t249;
t317 = pkin(3) * t336;
t104 = t135 * t429 - t131;
t107 = -pkin(3) * t189 + t118;
t59 = t262 * t104 + t259 * t107;
t446 = -t262 * t317 + t59;
t103 = t135 * t260 + t132;
t310 = pkin(3) * t366 - t103;
t163 = -t430 * t218 - t219 * t428;
t146 = pkin(8) * t287 + t163;
t164 = -t428 * t218 + t430 * t219;
t147 = -pkin(8) * t288 + t164;
t113 = t260 * t146 + t147 * t429;
t109 = t262 * t113;
t274 = t429 * t288;
t156 = -t260 * t287 + t274;
t280 = t260 * t288;
t157 = -t287 * t429 - t280;
t168 = pkin(3) * t288 - t240;
t114 = t156 * pkin(4) - t157 * pkin(9) + t168;
t63 = t259 * t114 + t109;
t419 = t262 * pkin(5);
t242 = pkin(4) + t419;
t257 = -qJ(6) - pkin(9);
t442 = -t238 * t257 + t239 * t242;
t440 = t239 * pkin(4) + t238 * pkin(9);
t438 = -t259 * t52 + t262 * t53;
t305 = g(1) * t263 + g(2) * t261;
t437 = qJ(2) * qJDD(1);
t371 = t262 * t263;
t374 = t259 * t261;
t177 = t239 * t374 + t371;
t372 = t261 * t262;
t373 = t259 * t263;
t179 = -t239 * t373 + t372;
t420 = g(3) * t259;
t436 = -g(1) * t179 + g(2) * t177 + t238 * t420;
t434 = t139 ^ 2;
t433 = t189 ^ 2;
t432 = qJD(3) ^ 2;
t246 = cos(t254);
t237 = pkin(3) * t246;
t203 = t237 + t240;
t191 = t263 * t203;
t423 = g(2) * t191;
t4 = t5 * t262;
t417 = -t42 + t38;
t410 = t262 * t38;
t67 = t69 * t262;
t241 = pkin(3) * t260 + pkin(9);
t370 = -qJ(6) - t241;
t325 = qJD(5) * t370;
t405 = t259 * t325 - t446 + t468;
t58 = -t104 * t259 + t262 * t107;
t404 = (-t317 - qJD(6)) * t259 + t262 * t325 - t58 + t450;
t332 = qJD(5) * t257;
t61 = t262 * t100 + t259 * t118;
t403 = t259 * t332 + t468 - t61;
t60 = -t100 * t259 + t262 * t118;
t402 = -t259 * qJD(6) + t262 * t332 + t450 - t60;
t352 = pkin(5) * t364;
t401 = t310 + t352 - t475;
t276 = qJD(3) * t287;
t121 = -t260 * t276 + t274 * t357 - t287 * t366;
t399 = t121 * t259;
t398 = t121 * t262;
t397 = t137 * t457;
t395 = t137 * t259;
t394 = t139 * t137;
t393 = t139 * t457;
t382 = t157 * t259;
t381 = t157 * t262;
t380 = t188 * t189;
t252 = t255 ^ 2;
t253 = t256 ^ 2;
t367 = t252 + t253;
t361 = t189 * qJD(3);
t339 = qJD(2) * t428;
t340 = qJD(2) * t430;
t142 = -t218 * t338 - t219 * t337 - t255 * t339 + t256 * t340;
t124 = pkin(8) * t276 + t142;
t277 = qJD(3) * t288;
t266 = pkin(8) * t277 + t218 * t337 - t219 * t338 - t255 * t340 - t256 * t339;
t56 = t124 * t429 + t146 * t336 - t147 * t366 + t260 * t266;
t122 = -qJD(4) * t280 - t260 * t277 - t276 * t429 - t287 * t336;
t275 = pkin(3) * t276;
t74 = t122 * pkin(4) + t121 * pkin(9) - t275;
t355 = t114 * t363 + t259 * t74 + t262 * t56;
t351 = pkin(9) * qJD(5) * t457;
t343 = t157 * t363;
t341 = -t24 - t421;
t251 = -pkin(8) - t418;
t335 = pkin(5) * t259 - t251;
t333 = -t259 * t56 + t262 * t74;
t328 = t367 * qJD(1) ^ 2;
t62 = -t113 * t259 + t262 * t114;
t112 = -t429 * t146 + t147 * t260;
t323 = t457 * t262;
t319 = t4 - t348;
t316 = 0.2e1 * t367;
t243 = -pkin(3) * t429 - pkin(4);
t315 = qJD(1) * t344;
t76 = t101 + t475;
t314 = -t76 + t352;
t313 = g(1) * t378 - g(2) * t377;
t308 = -pkin(9) * t91 - t464;
t307 = -g(1) * t177 - g(2) * t179;
t178 = -t239 * t372 + t373;
t180 = t239 * t371 + t374;
t306 = -g(1) * t178 - g(2) * t180;
t303 = -t241 * t91 - t464;
t302 = t259 * t53 + t262 * t52;
t299 = t238 * t242 + t239 * t257;
t298 = qJ(6) * t121 - qJD(6) * t157;
t83 = t262 * t91;
t296 = t83 + (-t364 + t462) * t457;
t295 = t305 * t238;
t245 = sin(t254);
t294 = t305 * t245;
t292 = t343 - t399;
t291 = -t157 * t364 - t398;
t206 = -qJDD(1) * t240 + qJDD(2);
t282 = t297 + t400;
t212 = t239 * t420;
t281 = -t259 * t295 + t212;
t279 = -g(3) * t246 + t294;
t278 = g(1) * t180 - g(2) * t178 + t262 * t233 - t5;
t273 = t316 * t359 - t305;
t272 = -qJD(5) * t302 - t6 * t259 + t4;
t57 = qJD(4) * t113 + t260 * t124 - t429 * t266;
t271 = -g(1) * (-pkin(4) * t377 + pkin(9) * t375) - g(2) * (-pkin(4) * t378 + pkin(9) * t376);
t141 = qJDD(2) - t347 * pkin(3) + (-pkin(1) + (-pkin(3) * t430 - pkin(2)) * t256) * qJDD(1);
t269 = t6 + t436;
t222 = pkin(9) * t262 + t249;
t221 = t257 * t259;
t220 = t243 - t419;
t194 = t241 * t262 + t249;
t193 = t370 * t259;
t185 = t188 ^ 2;
t143 = qJD(2) * t287 - qJD(3) * t164;
t134 = t137 ^ 2;
t79 = pkin(5) * t382 + t112;
t77 = -t134 + t434;
t55 = -qJ(6) * t382 + t63;
t49 = pkin(5) * t156 - t157 * t249 + t62;
t48 = t122 * t457 + t156 * t91;
t47 = t393 - t69;
t46 = -t68 + t397;
t37 = t137 * t473 - t67;
t36 = t395 * t457 - t67;
t33 = -t323 * t457 + t392 - t82;
t30 = t296 + t396;
t29 = t296 - t396;
t28 = -t457 * t473 - t396 + t83;
t27 = pkin(5) * t292 + t57;
t20 = t137 * t292 + t382 * t69;
t19 = t139 * t291 - t381 * t68;
t16 = -qJD(5) * t63 + t333;
t15 = -t113 * t364 + t355;
t12 = (t137 * t152 + t68) * t262 + t445 + t407;
t11 = -t122 * t137 - t156 * t69 - t292 * t457 - t382 * t91;
t10 = t122 * t139 - t156 * t68 + t291 * t457 + t381 * t91;
t9 = -qJ(6) * t343 + (-qJD(5) * t113 + t298) * t259 + t355;
t8 = pkin(5) * t122 + t298 * t262 + (-t109 + (qJ(6) * t157 - t114) * t259) * qJD(5) + t333;
t7 = (t137 * t262 + t139 * t259) * t121 + (t65 - t67 + (-t139 * t262 + t395) * qJD(5)) * t157;
t2 = [0, 0, 0, 0, 0, qJDD(1), -t439, t305, 0, 0, t252 * qJDD(1), 0.2e1 * t255 * t358, 0, t253 * qJDD(1), 0, 0, t282 * t256, -t282 * t255, t316 * t437 + t273, t297 * pkin(1) + (t367 * t437 + t273) * qJ(2), t155 * t287 + t189 * t277, t155 * t288 + t188 * t277 - t189 * t276 + t285 * t287, -qJDD(3) * t287 - t288 * t432, -t188 * t276 + t285 * t288, -qJDD(3) * t288 + t287 * t432, 0, t163 * qJDD(3) + t206 * t288 - t240 * t285 - t439 * t246 + (-t207 * t287 + t143) * qJD(3), -t142 * qJD(3) - t164 * qJDD(3) + t240 * t155 - t206 * t287 - t207 * t277 + t245 * t439, t120 * t287 - t142 * t188 + t143 * t189 + t163 * t155 - t289 * t276 - t164 * t285 - t305 + (qJD(3) * t158 - t119) * t288, t119 * t164 - t289 * t142 + t120 * t163 + t158 * t143 - t206 * t240 - g(1) * (-t240 * t261 + t263 * t418) - g(2) * (t240 * t263 + t261 * t418) t121 * t293 - t157 * t268, -t121 * t152 + t122 * t293 + t156 * t268 - t157 * t93, -t121 * t357 + t157 * t356, -t122 * t152 + t156 * t93, -t122 * t357 - t156 * t356, 0, g(1) * t376 - g(2) * t375 - t112 * t356 + t162 * t122 + t141 * t156 + t152 * t275 + t168 * t93 - t357 * t57, -t113 * t356 - t162 * t121 + t141 * t157 - t168 * t268 + t275 * t293 - t357 * t56 - t313, t100 * t121 - t101 * t122 - t112 * t268 - t113 * t93 + t152 * t56 - t25 * t156 + t157 * t321 - t293 * t57 - t305, t25 * t113 + t101 * t56 + t321 * t112 - t100 * t57 + t141 * t168 - t162 * t275 - g(1) * (-t203 * t261 - t251 * t263) - g(2) * (-t251 * t261 + t191) t19, t7, t10, t20, t11, t48, t112 * t69 + t122 * t52 + t137 * t57 + t156 * t6 + t157 * t447 + t16 * t457 - t94 * t399 + t62 * t91 + t306, -t94 * t398 - t112 * t68 - t122 * t53 + t139 * t57 - t457 * t15 - t156 * t5 - t63 * t91 + (t24 * t262 - t84) * t157 + t307, -t137 * t15 - t139 * t16 + t62 * t68 - t63 * t69 + t302 * t121 + (-qJD(5) * t438 - t259 * t5 - t262 * t6) * t157 + t313, -t423 + t24 * t112 + t53 * t15 + t52 * t16 + t5 * t63 + t94 * t57 + t6 * t62 + (g(1) * t251 - g(2) * t440) * t263 + (-g(1) * (-t203 - t440) + g(2) * t251) * t261, t19, t7, t10, t20, t11, t48, t1 * t156 + t122 * t38 + t137 * t27 + t157 * t448 - t75 * t399 + t457 * t8 + t49 * t91 + t69 * t79 + t306, -t75 * t398 - t122 * t43 + t139 * t27 - t457 * t9 - t156 * t3 - t55 * t91 - t68 * t79 + (t18 * t262 - t72) * t157 + t307, -t137 * t9 - t139 * t8 + t49 * t68 - t55 * t69 + (t259 * t43 + t410) * t121 + (-t1 * t262 - t259 * t3 + (t259 * t38 - t262 * t43) * qJD(5)) * t157 + t313, -t423 + t1 * t49 + t18 * t79 + t75 * t27 + t3 * t55 + t38 * t8 + t43 * t9 + (-g(1) * t335 - g(2) * t442) * t263 + (-g(1) * (-t203 - t442) - g(2) * t335) * t261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t358, t255 * qJDD(1), -t328, -qJ(2) * t328 - t297, 0, 0, 0, 0, 0, 0, t285 - t361 (-t315 - t188) * qJD(3) + t346, -t185 - t433, -t158 * t189 - t188 * t289 + t206 + t439, 0, 0, 0, 0, 0, 0, -t327 - t362 - 0.2e1 * t458, -t268 + t444, -t388 - t389, -t100 * t293 - t101 * t152 + t141 + t439, 0, 0, 0, 0, 0, 0, t30, t33, t12, t293 * t94 + t474 * t262 + (t5 - t413) * t259 + t439, 0, 0, 0, 0, 0, 0, t30, t33, t12, t293 * t75 + t449 * t262 + (-t38 * t457 + t3) * t259 + t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380, -t185 + t433 (-t315 + t188) * qJD(3) + t346, t380, -t285 - t361, qJDD(3), t207 * t189 + t279 + t304, g(3) * t245 + t207 * t188 + t305 * t246 + (t345 + t158) * qJD(3) - t349, 0, 0, t383, t471, t472, -t383, t459, t356, t103 * t357 + (-t152 * t189 + t356 * t429 - t357 * t366) * pkin(3) + t451, t104 * t357 + (-t189 * t293 - t260 * t356 - t336 * t357) * pkin(3) + t452, t100 * t152 - t101 * t293 + t103 * t293 - t104 * t152 + (-t260 * t93 + t429 * t270 + (-t260 * t293 + (t152 + t443) * t429) * qJD(4)) * pkin(3), t100 * t103 - t101 * t104 + (-t429 * t321 + t162 * t189 + t25 * t260 + (-t100 * t260 + t101 * t429) * qJD(4) + t279) * pkin(3), t466, t477, t465, t37, t29, t463, t243 * t69 + t341 * t262 + t303 * t259 + t310 * t137 + (-t241 * t363 - t259 * t317 - t58) * t457 + t455, -t243 * t68 + t303 * t262 + t310 * t139 + (t241 * t364 + t446) * t457 + t281 + t453, t59 * t137 + t58 * t139 + (-t137 * t317 + t152 * t52 - t241 * t69 + (t139 * t241 - t52) * qJD(5)) * t262 + (t139 * t317 + t152 * t53 - t241 * t68 - t6 + (t137 * t241 - t53) * qJD(5)) * t259 + t319, t24 * t243 - t53 * t59 - t52 * t58 - t94 * t103 - g(3) * (t237 + t440) + (t294 + (t260 * t94 + t429 * t438) * qJD(4)) * pkin(3) + t272 * t241 + t271, t466, t477, t465, t37, t29, t463, t137 * t401 + t193 * t91 + t220 * t69 + t404 * t457 + t469, t139 * t401 - t194 * t91 - t220 * t68 - t405 * t457 + t281 + t470, -t405 * t137 - t404 * t139 + t193 * t68 - t194 * t69 - t38 * t323 + t476, t3 * t194 + t1 * t193 + t18 * t220 - g(3) * (t237 + t442) + t401 * t75 + t405 * t43 + t404 * t38 + t305 * (pkin(3) * t245 + t299); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, t471, t472, -t383, t459, t356, t101 * t357 + t451, t100 * t357 + t452, 0, 0, t466, t477, t465, t36, t28, t463, -pkin(4) * t69 - t101 * t137 - t457 * t60 + t308 * t259 + (t341 - t351) * t262 + t455, pkin(4) * t68 - t101 * t139 + t457 * t61 + t212 + t308 * t262 + (-t295 + t351) * t259 + t453, t137 * t61 + t139 * t60 + (-t413 + (-t69 + t365) * pkin(9)) * t262 + ((qJD(5) * t137 - t68) * pkin(9) - t474) * t259 + t319, -t24 * pkin(4) + pkin(9) * t272 - g(3) * t440 - t94 * t101 - t52 * t60 - t53 * t61 + t271, t466, t477, t465, t36, t28, t463, t137 * t314 + t221 * t91 - t242 * t69 + t402 * t457 + t469, -t139 * t76 - t222 * t91 + t242 * t68 + t212 - t403 * t457 + (pkin(5) * t365 - t295) * t259 + t470, -t403 * t137 - t402 * t139 + t221 * t68 - t222 * t69 - t457 * t410 + t476, -g(3) * t442 + t1 * t221 - t18 * t242 + t3 * t222 + t299 * t305 + t314 * t75 + t38 * t402 + t403 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t394, t77, t46, -t394, t47, t91, -t139 * t94 + t269 + t412, t137 * t94 + t278 + t413, 0, 0, t394, t77, t46, -t394, t47, t91, 0.2e1 * t431 + t416 + t414 + (-t329 - t75) * t139 + t269, -pkin(5) * t434 + t415 + t457 * t42 + (qJD(6) + t75) * t137 + t278, pkin(5) * t68 - t137 * t417, t417 * t43 + (-t75 * t139 + t1 + t436) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69 + t393, -t68 - t397, -t134 - t434, t43 * t137 + t38 * t139 - t342 - t441;];
tau_reg  = t2;
