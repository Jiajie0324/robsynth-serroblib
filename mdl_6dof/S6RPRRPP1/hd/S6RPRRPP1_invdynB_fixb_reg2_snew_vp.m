% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:17:47
% EndTime: 2019-05-05 21:18:27
% DurationCPUTime: 40.30s
% Computational Cost: add. (102695->746), mult. (206466->1061), div. (0->0), fcn. (139900->10), ass. (0->535)
t977 = sin(qJ(3));
t1030 = qJD(1) * t977;
t976 = sin(qJ(4));
t979 = cos(qJ(4));
t927 = -t979 * qJD(3) + t1030 * t976;
t928 = qJD(3) * t976 + t1030 * t979;
t970 = sin(pkin(10));
t972 = cos(pkin(10));
t876 = t972 * t927 + t928 * t970;
t980 = cos(qJ(3));
t1029 = qJD(1) * t980;
t954 = -qJD(4) + t1029;
t1049 = t876 * t954;
t1024 = qJD(1) * qJD(3);
t1015 = t980 * t1024;
t1023 = qJDD(1) * t977;
t933 = t1015 + t1023;
t871 = -t927 * qJD(4) + t976 * qJDD(3) + t979 * t933;
t996 = t979 * qJDD(3) - t976 * t933;
t986 = qJD(4) * t928 - t996;
t984 = t972 * t871 - t970 * t986;
t1094 = t984 + t1049;
t878 = -t927 * t970 + t928 * t972;
t1050 = t876 * t878;
t1022 = qJDD(1) * t980;
t959 = t977 * t1024;
t934 = -t959 + t1022;
t924 = -qJDD(4) + t934;
t988 = t924 - t1050;
t1061 = t988 * t972;
t1081 = t954 ^ 2;
t875 = t878 ^ 2;
t828 = -t875 - t1081;
t703 = t828 * t970 - t1061;
t1062 = t988 * t970;
t719 = t828 * t972 + t1062;
t624 = t703 * t979 + t719 * t976;
t597 = -t1094 * t977 + t624 * t980;
t622 = t703 * t976 - t719 * t979;
t971 = sin(pkin(9));
t973 = cos(pkin(9));
t535 = t597 * t971 - t622 * t973;
t537 = t597 * t973 + t622 * t971;
t978 = sin(qJ(1));
t981 = cos(qJ(1));
t493 = t535 * t981 + t537 * t978;
t1237 = pkin(6) * t493;
t503 = t535 * t978 - t537 * t981;
t1236 = pkin(6) * t503;
t1235 = qJ(2) * t535;
t1234 = pkin(1) * t535 - pkin(2) * t622 + pkin(7) * t597;
t595 = t1094 * t980 + t624 * t977;
t1233 = -pkin(1) * t595 + qJ(2) * t537;
t1013 = t871 * t970 + t972 * t986;
t1048 = t878 * t954;
t992 = t1013 - t1048;
t666 = t1094 * t972 - t992 * t970;
t1064 = t1094 * t970;
t670 = -t992 * t972 - t1064;
t590 = -t666 * t976 + t670 * t979;
t1083 = t876 ^ 2;
t804 = t875 - t1083;
t576 = t590 * t980 + t804 * t977;
t584 = t666 * t979 + t670 * t976;
t523 = t576 * t971 - t584 * t973;
t525 = t576 * t973 + t584 * t971;
t1232 = t523 * t981 + t525 * t978;
t1231 = t523 * t978 - t525 * t981;
t841 = t1083 - t1081;
t727 = t841 * t970 - t1061;
t731 = t841 * t972 + t1062;
t651 = t727 * t976 - t731 * t979;
t746 = t1013 + t1048;
t618 = t651 * t980 + t746 * t977;
t647 = t727 * t979 + t731 * t976;
t554 = t618 * t971 + t647 * t973;
t558 = t618 * t973 - t647 * t971;
t1230 = t554 * t981 + t558 * t978;
t1229 = t554 * t978 - t558 * t981;
t1227 = pkin(7) * t595;
t1226 = -pkin(2) * t595 - pkin(3) * t1094 - pkin(8) * t624;
t1223 = pkin(8) * t622;
t1096 = t1049 - t984;
t1114 = -t1096 * t970 - t746 * t972;
t1115 = t972 * t1096 - t746 * t970;
t1133 = t1114 * t976 + t1115 * t979;
t1134 = t1114 * t979 - t1115 * t976;
t763 = t875 + t1083;
t1159 = t1134 * t980 - t763 * t977;
t1184 = t1133 * t971 + t1159 * t973;
t1185 = -t1133 * t973 + t1159 * t971;
t1197 = t1184 * t978 + t1185 * t981;
t1222 = pkin(6) * t1197;
t1198 = t1184 * t981 - t1185 * t978;
t1221 = pkin(6) * t1198;
t989 = -t924 - t1050;
t1060 = t989 * t970;
t1092 = -t1081 - t1083;
t1108 = t1092 * t972 - t1060;
t774 = t972 * t989;
t1112 = t1092 * t970 + t774;
t1135 = t1108 * t976 + t1112 * t979;
t1136 = t1108 * t979 - t1112 * t976;
t1163 = t1136 * t980 + t977 * t992;
t1180 = t1135 * t971 + t1163 * t973;
t1181 = -t1135 * t973 + t1163 * t971;
t1201 = t1180 * t978 + t1181 * t981;
t1220 = pkin(6) * t1201;
t1202 = t1180 * t981 - t1181 * t978;
t1219 = pkin(6) * t1202;
t1212 = -pkin(3) * t622 + pkin(4) * t719;
t1210 = t651 * t977 - t746 * t980;
t1209 = t590 * t977 - t804 * t980;
t1208 = qJ(2) * t1181;
t1207 = qJ(2) * t1185;
t1206 = pkin(1) * t1181 - pkin(2) * t1135 + pkin(7) * t1163;
t1205 = pkin(1) * t1185 - pkin(2) * t1133 + pkin(7) * t1159;
t1164 = t1136 * t977 - t980 * t992;
t1204 = -pkin(1) * t1164 + qJ(2) * t1180;
t1160 = t1134 * t977 + t763 * t980;
t1203 = -pkin(1) * t1160 + qJ(2) * t1184;
t842 = -t875 + t1081;
t1116 = t972 * t842 + t1060;
t1117 = -t842 * t970 + t774;
t1132 = -t1116 * t979 - t1117 * t976;
t1131 = -t1116 * t976 + t1117 * t979;
t1161 = -t1096 * t977 + t1131 * t980;
t1182 = -t1132 * t971 + t1161 * t973;
t1183 = t1132 * t973 + t1161 * t971;
t1200 = t1182 * t981 - t1183 * t978;
t1199 = t1182 * t978 + t1183 * t981;
t1193 = pkin(7) * t1160;
t1192 = pkin(7) * t1164;
t1191 = qJ(5) * t703;
t1190 = qJ(5) * t719;
t1189 = -pkin(2) * t1160 - pkin(3) * t763 - pkin(8) * t1134;
t1188 = -pkin(2) * t1164 + pkin(3) * t992 - pkin(8) * t1136;
t1177 = pkin(8) * t1133;
t1176 = pkin(8) * t1135;
t542 = -pkin(3) * t1133 - pkin(4) * t1115;
t1167 = -pkin(3) * t1135 - pkin(4) * t1112;
t1162 = t1096 * t980 + t1131 * t977;
t1040 = t954 * t970;
t1001 = -t1013 * t972 - t1040 * t876;
t1039 = t954 * t972;
t1019 = t876 * t1039;
t993 = t1013 * t970 - t1019;
t1085 = -t1001 * t979 - t976 * t993;
t1021 = t977 * t1050;
t1084 = -t1001 * t976 + t979 * t993;
t1110 = t1084 * t980 - t1021;
t1138 = -t1085 * t971 + t1110 * t973;
t1139 = t1085 * t973 + t1110 * t971;
t1158 = t1138 * t981 - t1139 * t978;
t1157 = t1138 * t978 + t1139 * t981;
t840 = t878 * t1040;
t1000 = -t840 + t1019;
t990 = (t876 * t970 + t878 * t972) * t954;
t1086 = -t1000 * t976 - t979 * t990;
t1047 = t924 * t977;
t1087 = t1000 * t979 - t976 * t990;
t1109 = t1087 * t980 - t1047;
t1140 = -t1086 * t971 + t1109 * t973;
t1141 = t1086 * t973 + t1109 * t971;
t1156 = t1140 * t981 - t1141 * t978;
t1155 = t1140 * t978 + t1141 * t981;
t1147 = qJ(5) * t1108;
t1146 = qJ(5) * t1112;
t1145 = qJ(5) * t1115;
t1144 = qJ(6) * t1094;
t947 = g(1) * t981 + g(2) * t978;
t982 = qJD(1) ^ 2;
t930 = -pkin(1) * t982 - t947;
t946 = g(1) * t978 - t981 * g(2);
t995 = qJDD(1) * pkin(1) + t946;
t879 = t971 * t930 - t973 * t995;
t880 = t973 * t930 + t971 * t995;
t1012 = t879 * t971 + t973 * t880;
t799 = t879 * t973 - t880 * t971;
t1059 = t799 * t978;
t711 = t1012 * t981 + t1059;
t1058 = t799 * t981;
t1143 = -t1012 * t978 + t1058;
t1035 = g(3) - qJDD(2);
t937 = qJDD(1) * t973 - t971 * t982;
t1088 = -qJ(2) * t937 - t1035 * t971;
t936 = qJDD(1) * t971 + t973 * t982;
t1095 = t981 * t936 + t937 * t978;
t907 = -qJ(2) * t936 + t1035 * t973;
t1142 = -pkin(6) * t1095 + t1088 * t978 + t907 * t981;
t1137 = pkin(4) * t763 + qJ(5) * t1114;
t882 = -t936 * t978 + t981 * t937;
t1130 = -pkin(6) * t882 + t1088 * t981 - t907 * t978;
t1129 = -2 * qJD(6);
t1082 = t927 ^ 2;
t1080 = qJD(3) ^ 2;
t856 = -pkin(2) * t982 + qJDD(1) * pkin(7) + t880;
t1078 = pkin(3) * t980;
t1005 = -pkin(8) * t977 - t1078;
t931 = t1005 * qJD(1);
t958 = t980 * t1035;
t801 = (qJD(1) * t931 + t856) * t977 - qJDD(3) * pkin(3) - t1080 * pkin(8) + t958;
t898 = -pkin(4) * t954 - qJ(5) * t928;
t705 = t986 * pkin(4) - t1082 * qJ(5) + t928 * t898 + qJDD(5) + t801;
t1118 = pkin(5) * t1013 - t1144 + t705;
t911 = t980 * t924;
t1113 = t1087 * t977 + t911;
t1020 = t980 * t1050;
t1111 = t1084 * t977 + t1020;
t739 = -t1039 * t878 + t970 * t984;
t740 = t972 * t984 + t840;
t662 = -t739 * t976 + t740 * t979;
t1002 = t980 * t662 + t1021;
t659 = -t739 * t979 - t740 * t976;
t1089 = t1002 * t973 - t659 * t971;
t1090 = t1002 * t971 + t973 * t659;
t1106 = t1089 * t981 - t1090 * t978;
t1105 = t1089 * t978 + t1090 * t981;
t1046 = t927 * t928;
t987 = -t924 - t1046;
t1102 = t976 * t987;
t1100 = t979 * t987;
t909 = t927 * t954;
t825 = t909 - t871;
t823 = t909 + t871;
t855 = -qJDD(1) * pkin(2) - t982 * pkin(7) + t879;
t998 = -t934 + t959;
t999 = t933 + t1015;
t788 = pkin(3) * t998 - pkin(8) * t999 + t855;
t832 = -t977 * t1035 + t980 * t856;
t802 = -pkin(3) * t1080 + qJDD(3) * pkin(8) + t1029 * t931 + t832;
t707 = -t979 * t788 + t976 * t802;
t663 = t987 * pkin(4) + qJ(5) * t825 - t707;
t708 = t976 * t788 + t979 * t802;
t674 = -pkin(4) * t1082 - qJ(5) * t986 + t954 * t898 + t708;
t1034 = t970 * t663 + t972 * t674;
t803 = pkin(5) * t876 - qJ(6) * t878;
t1093 = -t924 * qJ(6) + t1129 * t954 - t876 * t803 + t1034;
t820 = (qJD(4) + t954) * t928 - t996;
t923 = t928 ^ 2;
t1079 = pkin(3) * t977;
t1077 = pkin(5) * t972;
t1074 = qJ(6) * t972;
t1033 = -t972 * t663 + t970 * t674;
t1027 = qJD(5) * t878;
t869 = 0.2e1 * t1027;
t581 = t869 + t1033;
t1028 = qJD(5) * t876;
t867 = -0.2e1 * t1028;
t582 = t867 + t1034;
t520 = -t581 * t972 + t582 * t970;
t1073 = t520 * t976;
t1072 = t520 * t979;
t1070 = t705 * t970;
t1069 = t705 * t972;
t1057 = t801 * t976;
t1056 = t801 * t979;
t851 = t924 - t1046;
t1054 = t851 * t976;
t1053 = t851 * t979;
t1052 = t855 * t977;
t1051 = t855 * t980;
t953 = t980 * t982 * t977;
t943 = -t953 + qJDD(3);
t1043 = t943 * t977;
t1042 = t943 * t980;
t944 = qJDD(3) + t953;
t1041 = t944 * t977;
t1038 = t954 * t976;
t1037 = t954 * t979;
t966 = t977 ^ 2;
t1036 = t966 * t982;
t1032 = t763 - t1081;
t967 = t980 ^ 2;
t1031 = t966 + t967;
t1018 = t977 * t1046;
t1017 = t980 * t1046;
t1014 = -qJ(6) * t970 - pkin(4);
t521 = t581 * t970 + t972 * t582;
t830 = t977 * t856 + t958;
t761 = t830 * t977 + t980 * t832;
t891 = -t946 * t978 - t981 * t947;
t1009 = t971 * t953;
t1008 = t973 * t953;
t1006 = t878 * t803 + qJDD(6) + t1033;
t940 = qJDD(1) * t981 - t978 * t982;
t1004 = -pkin(6) * t940 - g(3) * t978;
t1003 = t977 * t662 - t1020;
t631 = -t707 * t979 + t708 * t976;
t632 = t707 * t976 + t708 * t979;
t760 = t830 * t980 - t832 * t977;
t890 = t946 * t981 - t947 * t978;
t994 = t867 + t1093;
t991 = t924 * pkin(5) + t1006;
t983 = 0.2e1 * qJD(6) * t878 - t1118;
t964 = t967 * t982;
t951 = -t964 - t1080;
t950 = t964 - t1080;
t949 = -t1036 - t1080;
t948 = -t1036 + t1080;
t942 = t964 - t1036;
t941 = t964 + t1036;
t939 = qJDD(1) * t978 + t981 * t982;
t938 = t1031 * qJDD(1);
t935 = -0.2e1 * t959 + t1022;
t932 = 0.2e1 * t1015 + t1023;
t926 = t980 * t944;
t925 = t1031 * t1024;
t910 = -pkin(6) * t939 + g(3) * t981;
t904 = -t923 + t1081;
t903 = -t1081 + t1082;
t902 = -t1024 * t966 + t933 * t980;
t901 = -t1024 * t967 - t934 * t977;
t900 = qJDD(3) * t971 + t925 * t973;
t899 = -qJDD(3) * t973 + t925 * t971;
t897 = -t949 * t977 - t1042;
t896 = -t948 * t977 + t926;
t895 = t951 * t980 - t1041;
t894 = t950 * t980 - t1043;
t893 = t949 * t980 - t1043;
t892 = t951 * t977 + t926;
t889 = -t923 + t1082;
t888 = -t923 - t1081;
t887 = t938 * t973 - t941 * t971;
t886 = t938 * t971 + t941 * t973;
t881 = -t932 * t977 + t935 * t980;
t872 = -t1081 - t1082;
t865 = t902 * t973 - t1009;
t864 = t901 * t973 + t1009;
t863 = t902 * t971 + t1008;
t862 = t901 * t971 - t1008;
t861 = t1023 * t971 + t896 * t973;
t860 = t1022 * t971 + t894 * t973;
t859 = -t1023 * t973 + t896 * t971;
t858 = -t1022 * t973 + t894 * t971;
t850 = t923 + t1082;
t839 = t897 * t973 + t932 * t971;
t838 = t895 * t973 - t935 * t971;
t837 = t897 * t971 - t932 * t973;
t836 = t895 * t971 + t935 * t973;
t834 = (t927 * t979 - t928 * t976) * t954;
t833 = (-t927 * t976 - t928 * t979) * t954;
t831 = t881 * t973 - t942 * t971;
t829 = t881 * t971 + t942 * t973;
t821 = (-qJD(4) + t954) * t928 + t996;
t819 = t1038 * t928 + t871 * t979;
t818 = t1037 * t928 - t871 * t976;
t817 = -t1037 * t927 + t976 * t986;
t816 = t1038 * t927 + t979 * t986;
t815 = -t886 * t978 + t887 * t981;
t814 = t886 * t981 + t887 * t978;
t813 = t834 * t980 - t1047;
t811 = -pkin(7) * t893 + t1051;
t810 = t903 * t979 + t1054;
t809 = -t904 * t976 + t1100;
t808 = -pkin(7) * t892 + t1052;
t807 = -t903 * t976 + t1053;
t806 = -t904 * t979 - t1102;
t795 = -pkin(2) * t893 + t832;
t794 = -pkin(2) * t892 + t830;
t793 = -t888 * t976 + t1053;
t792 = t888 * t979 + t1054;
t787 = pkin(1) * t1035 + qJ(2) * t1012;
t779 = t872 * t979 - t1102;
t778 = t872 * t976 + t1100;
t769 = t819 * t980 + t1018;
t768 = t817 * t980 - t1018;
t767 = -t837 * t978 + t839 * t981;
t766 = -t836 * t978 + t838 * t981;
t765 = t837 * t981 + t839 * t978;
t764 = t836 * t981 + t838 * t978;
t756 = -t820 * t979 - t825 * t976;
t755 = t821 * t979 - t823 * t976;
t754 = -t820 * t976 + t825 * t979;
t753 = -t821 * t976 - t823 * t979;
t743 = t813 * t973 - t833 * t971;
t742 = t813 * t971 + t833 * t973;
t734 = t810 * t980 - t820 * t977;
t733 = t809 * t980 - t825 * t977;
t724 = t793 * t980 + t823 * t977;
t721 = t793 * t977 - t823 * t980;
t718 = -qJ(2) * t886 + t760 * t973;
t717 = qJ(2) * t887 + t760 * t971;
t716 = t779 * t980 - t821 * t977;
t715 = t779 * t977 + t821 * t980;
t714 = t761 * t973 + t855 * t971;
t713 = t761 * t971 - t855 * t973;
t712 = -pkin(8) * t792 + t1056;
t709 = t755 * t980 - t889 * t977;
t706 = -pkin(8) * t778 + t1057;
t700 = t769 * t973 - t818 * t971;
t699 = t768 * t973 - t816 * t971;
t698 = t769 * t971 + t818 * t973;
t697 = t768 * t971 + t816 * t973;
t696 = t756 * t980 - t850 * t977;
t695 = t756 * t977 + t850 * t980;
t690 = -qJ(2) * t837 - t795 * t971 + t811 * t973;
t689 = -qJ(2) * t836 - t794 * t971 + t808 * t973;
t686 = t734 * t973 - t807 * t971;
t685 = t733 * t973 - t806 * t971;
t684 = t734 * t971 + t807 * t973;
t683 = t733 * t971 + t806 * t973;
t682 = t724 * t973 + t792 * t971;
t681 = t724 * t971 - t792 * t973;
t680 = -pkin(1) * t893 + qJ(2) * t839 + t795 * t973 + t811 * t971;
t679 = -pkin(1) * t892 + qJ(2) * t838 + t794 * t973 + t808 * t971;
t678 = t716 * t973 + t778 * t971;
t677 = t716 * t971 - t778 * t973;
t676 = -pkin(3) * t792 + t708;
t675 = -pkin(3) * t778 + t707;
t643 = t709 * t973 - t753 * t971;
t642 = t709 * t971 + t753 * t973;
t637 = t696 * t973 + t754 * t971;
t636 = t696 * t971 - t754 * t973;
t635 = t1069 - t1190;
t634 = -t713 * t978 + t714 * t981;
t633 = t713 * t981 + t714 * t978;
t630 = t1070 - t1146;
t621 = -pkin(2) * t721 + pkin(3) * t823 - pkin(8) * t793 - t1057;
t620 = -pkin(2) * t715 - pkin(3) * t821 - pkin(8) * t779 + t1056;
t619 = -qJ(2) * t713 - (pkin(2) * t971 - pkin(7) * t973) * t760;
t610 = t632 * t980 + t801 * t977;
t609 = t632 * t977 - t801 * t980;
t604 = -pkin(4) * t1094 + t1070 - t1191;
t603 = (-pkin(5) * t954 + t1129) * t878 + t1118;
t602 = -pkin(8) * t754 - t631;
t601 = -t681 * t978 + t682 * t981;
t600 = t681 * t981 + t682 * t978;
t599 = -pkin(4) * t992 - t1069 + t1147;
t594 = -t677 * t978 + t678 * t981;
t593 = t677 * t981 + t678 * t978;
t592 = qJ(2) * t714 - (-pkin(2) * t973 - pkin(7) * t971 - pkin(1)) * t760;
t583 = -pkin(7) * t721 - t676 * t977 + t712 * t980;
t579 = -pkin(7) * t715 - t675 * t977 + t706 * t980;
t578 = (-t992 + t1048) * pkin(5) + t983;
t577 = pkin(5) * t1048 + t1144 + t983;
t574 = -t636 * t978 + t637 * t981;
t573 = t636 * t981 + t637 * t978;
t560 = -pkin(2) * t695 - pkin(3) * t850 - pkin(8) * t756 - t632;
t559 = qJ(6) * t1081 - 0.2e1 * t1027 - t991;
t550 = -pkin(5) * t1081 + t994;
t545 = t610 * t973 + t631 * t971;
t544 = t610 * t971 - t631 * t973;
t543 = -pkin(7) * t695 + t1079 * t754 + t602 * t980;
t541 = qJ(6) * t1032 + t869 + t991;
t540 = pkin(5) * t1032 + t994;
t539 = -pkin(2) * t609 + pkin(3) * t801 - pkin(8) * t632;
t534 = -t1074 * t992 - t578 * t970 - t1146;
t533 = -pkin(5) * t1064 + t577 * t972 + t1190;
t532 = t1014 * t992 + t972 * t578 + t1147;
t531 = -t1212 + t582;
t530 = t1191 + t970 * t577 + (pkin(4) + t1077) * t1094;
t529 = -pkin(5) * t1096 + qJ(6) * t746 + t542;
t528 = -t604 * t976 + t635 * t979 + t1223;
t527 = t1167 + t581;
t526 = -pkin(7) * t609 + (-pkin(8) * t980 + t1079) * t631;
t519 = -qJ(2) * t681 + t583 * t973 - t621 * t971;
t514 = -t599 * t976 + t630 * t979 - t1176;
t513 = -qJ(2) * t677 + t579 * t973 - t620 * t971;
t512 = t869 + (-t1092 - t1081) * qJ(6) + (-t989 + t924) * pkin(5) + t1006 + t1167;
t511 = -pkin(1) * t721 + qJ(2) * t682 + t583 * t971 + t621 * t973;
t510 = -pkin(4) * t705 + qJ(5) * t521;
t509 = -pkin(1) * t715 + qJ(2) * t678 + t579 * t971 + t620 * t973;
t508 = -t520 - t1145;
t507 = qJ(6) * t988 + 0.2e1 * t1028 + (t828 + t1081) * pkin(5) - t1093 + t1212;
t506 = t550 * t972 - t559 * t970;
t505 = t550 * t970 + t559 * t972;
t500 = t1137 + t521;
t499 = -t544 * t978 + t545 * t981;
t498 = t544 * t981 + t545 * t978;
t497 = -t604 * t979 - t635 * t976 - t1226;
t492 = -qJ(2) * t636 + t543 * t973 - t560 * t971;
t491 = -t599 * t979 - t630 * t976 + t1188;
t490 = -t540 * t970 + t541 * t972 - t1145;
t489 = -pkin(1) * t695 + qJ(2) * t637 + t543 * t971 + t560 * t973;
t488 = t540 * t972 + t541 * t970 + t1137;
t487 = -t532 * t976 + t534 * t979 - t1176;
t486 = -t530 * t976 + t533 * t979 - t1223;
t485 = t521 * t979 - t1073;
t484 = t521 * t976 + t1072;
t479 = -qJ(5) * t505 + (pkin(5) * t970 - t1074) * t603;
t478 = t485 * t980 + t705 * t977;
t477 = t485 * t977 - t705 * t980;
t476 = t528 * t980 - t531 * t977 + t1227;
t475 = -qJ(2) * t544 + t526 * t973 - t539 * t971;
t474 = -t532 * t979 - t534 * t976 + t1188;
t473 = t514 * t980 - t527 * t977 - t1192;
t472 = qJ(5) * t506 + (t1014 - t1077) * t603;
t471 = -t505 * t976 + t506 * t979;
t470 = t505 * t979 + t506 * t976;
t469 = -t530 * t979 - t533 * t976 + t1226;
t468 = -pkin(1) * t609 + qJ(2) * t545 + t526 * t971 + t539 * t973;
t467 = t471 * t980 + t603 * t977;
t466 = t471 * t977 - t603 * t980;
t465 = -pkin(3) * t484 - pkin(4) * t520;
t464 = -t500 * t976 + t508 * t979 - t1177;
t463 = t487 * t980 - t512 * t977 - t1192;
t462 = t486 * t980 - t507 * t977 - t1227;
t461 = -t500 * t979 - t508 * t976 + t1189;
t460 = -t488 * t976 + t490 * t979 - t1177;
t459 = -pkin(8) * t484 - qJ(5) * t1072 - t510 * t976;
t458 = t478 * t973 + t484 * t971;
t457 = t478 * t971 - t484 * t973;
t456 = t464 * t980 - t542 * t977 - t1193;
t455 = t476 * t973 - t497 * t971 + t1235;
t454 = -t488 * t979 - t490 * t976 + t1189;
t453 = t476 * t971 + t497 * t973 - t1233;
t452 = t473 * t973 - t491 * t971 - t1208;
t451 = -pkin(3) * t470 - pkin(4) * t505 - pkin(5) * t559 - qJ(6) * t550;
t450 = t473 * t971 + t491 * t973 + t1204;
t449 = t460 * t980 - t529 * t977 - t1193;
t448 = t467 * t973 + t470 * t971;
t447 = t467 * t971 - t470 * t973;
t446 = t463 * t973 - t474 * t971 - t1208;
t445 = -pkin(2) * t477 + pkin(3) * t705 - pkin(8) * t485 + qJ(5) * t1073 - t510 * t979;
t444 = t463 * t971 + t474 * t973 + t1204;
t443 = t462 * t973 - t469 * t971 - t1235;
t442 = -pkin(8) * t470 - t472 * t976 + t479 * t979;
t441 = t462 * t971 + t469 * t973 + t1233;
t440 = -t457 * t978 + t458 * t981;
t439 = t457 * t981 + t458 * t978;
t438 = t456 * t973 - t461 * t971 - t1207;
t437 = -pkin(7) * t477 + t459 * t980 - t465 * t977;
t436 = t456 * t971 + t461 * t973 + t1203;
t435 = -pkin(2) * t466 + pkin(3) * t603 - pkin(8) * t471 - t472 * t979 - t479 * t976;
t434 = -t447 * t978 + t448 * t981;
t433 = t447 * t981 + t448 * t978;
t432 = t449 * t973 - t454 * t971 - t1207;
t431 = t449 * t971 + t454 * t973 + t1203;
t430 = -pkin(7) * t466 + t442 * t980 - t451 * t977;
t429 = -qJ(2) * t457 + t437 * t973 - t445 * t971;
t428 = -pkin(1) * t477 + qJ(2) * t458 + t437 * t971 + t445 * t973;
t427 = -qJ(2) * t447 + t430 * t973 - t435 * t971;
t426 = -pkin(1) * t466 + qJ(2) * t448 + t430 * t971 + t435 * t973;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t939, -t940, 0, t891, 0, 0, 0, 0, 0, 0, -t1095, -t882, 0, t711, 0, 0, 0, 0, 0, 0, t766, t767, t815, t634, 0, 0, 0, 0, 0, 0, t594, t601, t574, t499, 0, 0, 0, 0, 0, 0, t1202, t503, t1198, t440, 0, 0, 0, 0, 0, 0, t1202, t1198, -t503, t434; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t940, -t939, 0, t890, 0, 0, 0, 0, 0, 0, t882, -t1095, 0, -t1143, 0, 0, 0, 0, 0, 0, t764, t765, t814, t633, 0, 0, 0, 0, 0, 0, t593, t600, t573, t498, 0, 0, 0, 0, 0, 0, t1201, -t493, t1197, t439, 0, 0, 0, 0, 0, 0, t1201, t1197, t493, t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1035, 0, 0, 0, 0, 0, 0, t892, t893, 0, -t760, 0, 0, 0, 0, 0, 0, t715, t721, t695, t609, 0, 0, 0, 0, 0, 0, t1164, -t595, t1160, t477, 0, 0, 0, 0, 0, 0, t1164, t1160, t595, t466; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t940, 0, -t939, 0, t1004, -t910, -t890, -pkin(6) * t890, 0, 0, t882, 0, -t1095, 0, t1130, -t1142, t1143, pkin(6) * t1143 + qJ(2) * t1058 - t787 * t978, -t863 * t978 + t865 * t981, -t829 * t978 + t831 * t981, -t859 * t978 + t861 * t981, -t862 * t978 + t864 * t981, -t858 * t978 + t860 * t981, -t899 * t978 + t900 * t981, -pkin(6) * t764 - t679 * t978 + t689 * t981, -pkin(6) * t765 - t680 * t978 + t690 * t981, -pkin(6) * t814 - t717 * t978 + t718 * t981, -pkin(6) * t633 - t592 * t978 + t619 * t981, -t698 * t978 + t700 * t981, -t642 * t978 + t643 * t981, -t683 * t978 + t685 * t981, -t697 * t978 + t699 * t981, -t684 * t978 + t686 * t981, -t742 * t978 + t743 * t981, -pkin(6) * t593 - t509 * t978 + t513 * t981, -pkin(6) * t600 - t511 * t978 + t519 * t981, -pkin(6) * t573 - t489 * t978 + t492 * t981, -pkin(6) * t498 - t468 * t978 + t475 * t981, t1106, -t1231, t1200, t1158, t1229, t1156, -t450 * t978 + t452 * t981 - t1220, -t453 * t978 + t455 * t981 + t1237, -t436 * t978 + t438 * t981 - t1222, -pkin(6) * t439 - t428 * t978 + t429 * t981, t1106, t1200, t1231, t1156, -t1229, t1158, -t444 * t978 + t446 * t981 - t1220, -t431 * t978 + t432 * t981 - t1222, -t441 * t978 + t443 * t981 - t1237, -pkin(6) * t433 - t426 * t978 + t427 * t981; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t939, 0, t940, 0, t910, t1004, t891, pkin(6) * t891, 0, 0, t1095, 0, t882, 0, t1142, t1130, t711, pkin(6) * t711 + qJ(2) * t1059 + t787 * t981, t863 * t981 + t865 * t978, t829 * t981 + t831 * t978, t859 * t981 + t861 * t978, t862 * t981 + t864 * t978, t858 * t981 + t860 * t978, t899 * t981 + t900 * t978, pkin(6) * t766 + t679 * t981 + t689 * t978, pkin(6) * t767 + t680 * t981 + t690 * t978, pkin(6) * t815 + t717 * t981 + t718 * t978, pkin(6) * t634 + t592 * t981 + t619 * t978, t698 * t981 + t700 * t978, t642 * t981 + t643 * t978, t683 * t981 + t685 * t978, t697 * t981 + t699 * t978, t684 * t981 + t686 * t978, t742 * t981 + t743 * t978, pkin(6) * t594 + t509 * t981 + t513 * t978, pkin(6) * t601 + t511 * t981 + t519 * t978, pkin(6) * t574 + t489 * t981 + t492 * t978, pkin(6) * t499 + t468 * t981 + t475 * t978, t1105, t1232, t1199, t1157, -t1230, t1155, t450 * t981 + t452 * t978 + t1219, t453 * t981 + t455 * t978 + t1236, t436 * t981 + t438 * t978 + t1221, pkin(6) * t440 + t428 * t981 + t429 * t978, t1105, t1199, -t1232, t1155, t1230, t1157, t444 * t981 + t446 * t978 + t1219, t431 * t981 + t432 * t978 + t1221, t441 * t981 + t443 * t978 - t1236, pkin(6) * t434 + t426 * t981 + t427 * t978; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t946, t947, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t937 - t879, -pkin(1) * t936 - t880, 0, -pkin(1) * t799, t999 * t977, t932 * t980 + t935 * t977, t948 * t980 + t1041, -t998 * t980, t950 * t977 + t1042, 0, pkin(1) * t836 + pkin(2) * t935 + pkin(7) * t895 - t1051, pkin(1) * t837 - pkin(2) * t932 + pkin(7) * t897 + t1052, pkin(1) * t886 + pkin(2) * t941 + pkin(7) * t938 + t761, pkin(1) * t713 - pkin(2) * t855 + pkin(7) * t761, t819 * t977 - t1017, t755 * t977 + t889 * t980, t809 * t977 + t825 * t980, t817 * t977 + t1017, t810 * t977 + t820 * t980, t834 * t977 + t911, pkin(1) * t677 - pkin(2) * t778 + pkin(7) * t716 + t675 * t980 + t706 * t977, pkin(1) * t681 - pkin(2) * t792 + pkin(7) * t724 + t676 * t980 + t712 * t977, pkin(1) * t636 + pkin(7) * t696 + t977 * t602 + (-pkin(2) - t1078) * t754, pkin(1) * t544 + pkin(7) * t610 + (-pkin(2) + t1005) * t631, t1003, t1209, t1162, t1111, -t1210, t1113, t514 * t977 + t527 * t980 + t1206, t528 * t977 + t531 * t980 - t1234, t464 * t977 + t542 * t980 + t1205, pkin(1) * t457 - pkin(2) * t484 + pkin(7) * t478 + t459 * t977 + t465 * t980, t1003, t1162, -t1209, t1113, t1210, t1111, t487 * t977 + t512 * t980 + t1206, t460 * t977 + t529 * t980 + t1205, t486 * t977 + t507 * t980 + t1234, pkin(1) * t447 - pkin(2) * t470 + pkin(7) * t467 + t442 * t977 + t451 * t980;];
tauB_reg  = t1;
