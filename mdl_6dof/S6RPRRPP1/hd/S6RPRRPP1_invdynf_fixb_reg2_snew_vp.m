% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP1_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:19:17
% EndTime: 2019-05-05 21:19:25
% DurationCPUTime: 8.46s
% Computational Cost: add. (26132->280), mult. (52533->346), div. (0->0), fcn. (35525->10), ass. (0->197)
t2382 = sin(qJ(3));
t2416 = qJD(1) * t2382;
t2367 = qJD(3) * t2416;
t2385 = cos(qJ(3));
t2404 = t2385 * qJDD(1);
t2399 = t2367 - t2404;
t2398 = -qJDD(4) - t2399;
t2381 = sin(qJ(4));
t2384 = cos(qJ(4));
t2340 = -t2384 * qJD(3) + t2381 * t2416;
t2341 = qJD(3) * t2381 + t2384 * t2416;
t2375 = sin(pkin(10));
t2377 = cos(pkin(10));
t2318 = t2340 * t2377 + t2375 * t2341;
t2320 = -t2340 * t2375 + t2341 * t2377;
t2412 = t2318 * t2320;
t2270 = t2398 - t2412;
t2317 = t2320 ^ 2;
t2415 = qJD(1) * t2385;
t2362 = -qJD(4) + t2415;
t2420 = t2362 ^ 2;
t2427 = -t2317 - t2420;
t2246 = t2270 * t2375 + t2377 * t2427;
t2249 = t2270 * t2377 - t2375 * t2427;
t2211 = t2246 * t2381 - t2249 * t2384;
t2403 = qJD(3) * t2415;
t2405 = t2382 * qJDD(1);
t2345 = t2403 + t2405;
t2395 = -t2381 * qJDD(3) - t2384 * t2345;
t2315 = -qJD(4) * t2340 - t2395;
t2396 = t2384 * qJDD(3) - t2381 * t2345;
t2391 = -qJD(4) * t2341 + t2396;
t2390 = t2377 * t2315 + t2375 * t2391;
t2411 = t2318 * t2362;
t2389 = t2390 + t2411;
t2200 = t2211 * t2385 - t2382 * t2389;
t2217 = t2246 * t2384 + t2249 * t2381;
t2376 = sin(pkin(9));
t2378 = cos(pkin(9));
t2176 = t2200 * t2376 + t2217 * t2378;
t2178 = t2200 * t2378 - t2217 * t2376;
t2383 = sin(qJ(1));
t2386 = cos(qJ(1));
t2457 = t2176 * t2386 + t2178 * t2383;
t2456 = t2176 * t2383 - t2178 * t2386;
t2198 = t2211 * t2382 + t2385 * t2389;
t2271 = t2398 + t2412;
t2286 = t2318 ^ 2;
t2426 = -t2420 - t2286;
t2434 = t2271 * t2375 + t2377 * t2426;
t2435 = -t2377 * t2271 + t2375 * t2426;
t2436 = t2381 * t2434 + t2384 * t2435;
t2401 = -t2315 * t2375 + t2377 * t2391;
t2410 = t2320 * t2362;
t2392 = -t2401 - t2410;
t2437 = -t2381 * t2435 + t2384 * t2434;
t2442 = t2382 * t2392 + t2385 * t2437;
t2450 = t2376 * t2436 + t2378 * t2442;
t2451 = t2376 * t2442 - t2378 * t2436;
t2453 = -t2383 * t2451 + t2386 * t2450;
t2452 = t2383 * t2450 + t2386 * t2451;
t2259 = t2390 - t2411;
t2393 = t2401 - t2410;
t2424 = t2259 * t2375 + t2377 * t2393;
t2425 = -t2377 * t2259 + t2375 * t2393;
t2432 = t2381 * t2424 + t2384 * t2425;
t2265 = t2317 + t2286;
t2433 = -t2381 * t2425 + t2384 * t2424;
t2438 = -t2265 * t2382 + t2385 * t2433;
t2444 = t2376 * t2432 + t2378 * t2438;
t2445 = t2376 * t2438 - t2378 * t2432;
t2449 = -t2383 * t2445 + t2386 * t2444;
t2448 = t2383 * t2444 + t2386 * t2445;
t2443 = t2382 * t2437 - t2385 * t2392;
t2439 = t2265 * t2385 + t2382 * t2433;
t2423 = qJD(3) ^ 2;
t2422 = t2340 ^ 2;
t2421 = t2341 ^ 2;
t2419 = -2 * qJD(5);
t2418 = -2 * qJD(6);
t2417 = -g(3) + qJDD(2);
t2409 = t2340 * t2341;
t2408 = t2340 * t2362;
t2407 = qJD(4) + t2362;
t2356 = -g(1) * t2386 - g(2) * t2383;
t2387 = qJD(1) ^ 2;
t2342 = -pkin(1) * t2387 + t2356;
t2355 = t2383 * g(1) - g(2) * t2386;
t2394 = qJDD(1) * pkin(1) + t2355;
t2321 = -t2376 * t2342 + t2378 * t2394;
t2309 = -qJDD(1) * pkin(2) - t2387 * pkin(7) - t2321;
t2275 = (-t2345 - t2403) * pkin(8) + (t2399 + t2367) * pkin(3) + t2309;
t2322 = t2378 * t2342 + t2376 * t2394;
t2310 = -pkin(2) * t2387 + qJDD(1) * pkin(7) + t2322;
t2294 = t2385 * t2310 + t2382 * t2417;
t2343 = (-pkin(3) * t2385 - pkin(8) * t2382) * qJD(1);
t2284 = -pkin(3) * t2423 + qJDD(3) * pkin(8) + t2343 * t2415 + t2294;
t2241 = t2381 * t2275 + t2384 * t2284;
t2371 = t2382 ^ 2;
t2372 = t2385 ^ 2;
t2406 = t2371 + t2372;
t2330 = -pkin(4) * t2362 - qJ(5) * t2341;
t2228 = -pkin(4) * t2422 + qJ(5) * t2391 + t2362 * t2330 + t2241;
t2240 = t2384 * t2275 - t2381 * t2284;
t2307 = -t2398 - t2409;
t2388 = (-t2315 + t2408) * qJ(5) + t2307 * pkin(4) + t2240;
t2193 = t2377 * t2228 + t2318 * t2419 + t2375 * t2388;
t2402 = t2375 * t2228 - t2377 * t2388;
t2347 = -qJDD(1) * t2376 - t2378 * t2387;
t2348 = qJDD(1) * t2378 - t2376 * t2387;
t2400 = t2386 * t2347 - t2348 * t2383;
t2397 = t2347 * t2383 + t2348 * t2386;
t2366 = t2385 * t2417;
t2283 = -t2366 - qJDD(3) * pkin(3) - t2423 * pkin(8) + (qJD(1) * t2343 + t2310) * t2382;
t2239 = -t2391 * pkin(4) - t2422 * qJ(5) + t2341 * t2330 + qJDD(5) + t2283;
t2361 = t2385 * t2387 * t2382;
t2359 = -t2372 * t2387 - t2423;
t2358 = -t2371 * t2387 - t2423;
t2354 = -qJDD(3) + t2361;
t2353 = qJDD(3) + t2361;
t2352 = t2406 * t2387;
t2351 = -qJDD(1) * t2383 - t2386 * t2387;
t2350 = qJDD(1) * t2386 - t2383 * t2387;
t2349 = t2406 * qJDD(1);
t2346 = -0.2e1 * t2367 + t2404;
t2344 = 0.2e1 * t2403 + t2405;
t2329 = t2354 * t2385 - t2358 * t2382;
t2328 = -t2353 * t2382 + t2359 * t2385;
t2327 = t2354 * t2382 + t2358 * t2385;
t2326 = t2353 * t2385 + t2359 * t2382;
t2325 = -t2420 - t2421;
t2324 = t2349 * t2378 - t2352 * t2376;
t2323 = t2349 * t2376 + t2352 * t2378;
t2316 = -t2420 - t2422;
t2306 = t2398 - t2409;
t2305 = -t2421 - t2422;
t2298 = t2329 * t2378 + t2344 * t2376;
t2297 = t2328 * t2378 - t2346 * t2376;
t2296 = t2329 * t2376 - t2344 * t2378;
t2295 = t2328 * t2376 + t2346 * t2378;
t2293 = -t2382 * t2310 + t2366;
t2290 = t2340 * t2407 + t2395;
t2289 = t2315 + t2408;
t2288 = -t2341 * t2407 + t2396;
t2287 = (qJD(4) - t2362) * t2341 - t2396;
t2285 = pkin(5) * t2318 - qJ(6) * t2320;
t2282 = -t2321 * t2376 + t2322 * t2378;
t2281 = t2321 * t2378 + t2322 * t2376;
t2279 = t2306 * t2384 - t2325 * t2381;
t2278 = t2306 * t2381 + t2325 * t2384;
t2269 = -t2307 * t2381 + t2316 * t2384;
t2268 = t2307 * t2384 + t2316 * t2381;
t2263 = -t2293 * t2382 + t2294 * t2385;
t2262 = t2293 * t2385 + t2294 * t2382;
t2261 = t2288 * t2384 - t2290 * t2381;
t2260 = t2288 * t2381 + t2290 * t2384;
t2251 = t2279 * t2385 + t2289 * t2382;
t2248 = t2279 * t2382 - t2289 * t2385;
t2245 = t2269 * t2385 + t2287 * t2382;
t2244 = t2269 * t2382 - t2287 * t2385;
t2243 = t2263 * t2378 + t2309 * t2376;
t2242 = t2263 * t2376 - t2309 * t2378;
t2234 = t2261 * t2385 + t2305 * t2382;
t2233 = t2261 * t2382 - t2305 * t2385;
t2232 = t2251 * t2378 + t2278 * t2376;
t2231 = t2251 * t2376 - t2278 * t2378;
t2230 = t2245 * t2378 + t2268 * t2376;
t2229 = t2245 * t2376 - t2268 * t2378;
t2216 = t2234 * t2378 + t2260 * t2376;
t2215 = t2234 * t2376 - t2260 * t2378;
t2214 = -t2240 * t2381 + t2241 * t2384;
t2213 = t2240 * t2384 + t2241 * t2381;
t2208 = t2214 * t2385 + t2283 * t2382;
t2207 = t2214 * t2382 - t2283 * t2385;
t2202 = -t2401 * pkin(5) + (-pkin(5) * t2362 + t2418) * t2320 + t2239 - t2389 * qJ(6);
t2192 = t2320 * t2419 - t2402;
t2187 = qJDD(6) + t2398 * pkin(5) - t2420 * qJ(6) + ((2 * qJD(5)) + t2285) * t2320 + t2402;
t2186 = -pkin(5) * t2420 - qJ(6) * t2398 - t2318 * t2285 + t2362 * t2418 + t2193;
t2181 = t2208 * t2378 + t2213 * t2376;
t2180 = t2208 * t2376 - t2213 * t2378;
t2175 = -t2192 * t2375 + t2193 * t2377;
t2174 = t2192 * t2377 + t2193 * t2375;
t2169 = t2186 * t2377 + t2187 * t2375;
t2168 = t2186 * t2375 - t2187 * t2377;
t2167 = -t2174 * t2381 + t2175 * t2384;
t2166 = t2174 * t2384 + t2175 * t2381;
t2165 = t2167 * t2385 + t2239 * t2382;
t2164 = t2167 * t2382 - t2239 * t2385;
t2163 = -t2168 * t2381 + t2169 * t2384;
t2162 = t2168 * t2384 + t2169 * t2381;
t2161 = t2163 * t2385 + t2202 * t2382;
t2160 = t2163 * t2382 - t2202 * t2385;
t2159 = t2165 * t2378 + t2166 * t2376;
t2158 = t2165 * t2376 - t2166 * t2378;
t2157 = t2161 * t2378 + t2162 * t2376;
t2156 = t2161 * t2376 - t2162 * t2378;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2351, -t2350, 0, -t2355 * t2383 + t2356 * t2386, 0, 0, 0, 0, 0, 0, t2400, -t2397, 0, -t2281 * t2383 + t2282 * t2386, 0, 0, 0, 0, 0, 0, -t2295 * t2383 + t2297 * t2386, -t2296 * t2383 + t2298 * t2386, -t2323 * t2383 + t2324 * t2386, -t2242 * t2383 + t2243 * t2386, 0, 0, 0, 0, 0, 0, -t2229 * t2383 + t2230 * t2386, -t2231 * t2383 + t2232 * t2386, -t2215 * t2383 + t2216 * t2386, -t2180 * t2383 + t2181 * t2386, 0, 0, 0, 0, 0, 0, t2453, t2456, t2449, -t2158 * t2383 + t2159 * t2386, 0, 0, 0, 0, 0, 0, t2453, t2449, -t2456, -t2156 * t2383 + t2157 * t2386; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2350, t2351, 0, t2355 * t2386 + t2356 * t2383, 0, 0, 0, 0, 0, 0, t2397, t2400, 0, t2281 * t2386 + t2282 * t2383, 0, 0, 0, 0, 0, 0, t2295 * t2386 + t2297 * t2383, t2296 * t2386 + t2298 * t2383, t2323 * t2386 + t2324 * t2383, t2242 * t2386 + t2243 * t2383, 0, 0, 0, 0, 0, 0, t2229 * t2386 + t2230 * t2383, t2231 * t2386 + t2232 * t2383, t2215 * t2386 + t2216 * t2383, t2180 * t2386 + t2181 * t2383, 0, 0, 0, 0, 0, 0, t2452, -t2457, t2448, t2158 * t2386 + t2159 * t2383, 0, 0, 0, 0, 0, 0, t2452, t2448, t2457, t2156 * t2386 + t2157 * t2383; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2417, 0, 0, 0, 0, 0, 0, t2326, t2327, 0, t2262, 0, 0, 0, 0, 0, 0, t2244, t2248, t2233, t2207, 0, 0, 0, 0, 0, 0, t2443, -t2198, t2439, t2164, 0, 0, 0, 0, 0, 0, t2443, t2439, t2198, t2160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2387, -qJDD(1), 0, t2356, 0, 0, 0, 0, 0, 0, t2347, -t2348, 0, t2282, 0, 0, 0, 0, 0, 0, t2297, t2298, t2324, t2243, 0, 0, 0, 0, 0, 0, t2230, t2232, t2216, t2181, 0, 0, 0, 0, 0, 0, t2450, -t2178, t2444, t2159, 0, 0, 0, 0, 0, 0, t2450, t2444, t2178, t2157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2387, 0, t2355, 0, 0, 0, 0, 0, 0, t2348, t2347, 0, t2281, 0, 0, 0, 0, 0, 0, t2295, t2296, t2323, t2242, 0, 0, 0, 0, 0, 0, t2229, t2231, t2215, t2180, 0, 0, 0, 0, 0, 0, t2451, -t2176, t2445, t2158, 0, 0, 0, 0, 0, 0, t2451, t2445, t2176, t2156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2417, 0, 0, 0, 0, 0, 0, t2326, t2327, 0, t2262, 0, 0, 0, 0, 0, 0, t2244, t2248, t2233, t2207, 0, 0, 0, 0, 0, 0, t2443, -t2198, t2439, t2164, 0, 0, 0, 0, 0, 0, t2443, t2439, t2198, t2160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2387, -qJDD(1), 0, t2322, 0, 0, 0, 0, 0, 0, t2328, t2329, t2349, t2263, 0, 0, 0, 0, 0, 0, t2245, t2251, t2234, t2208, 0, 0, 0, 0, 0, 0, t2442, -t2200, t2438, t2165, 0, 0, 0, 0, 0, 0, t2442, t2438, t2200, t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2387, 0, t2321, 0, 0, 0, 0, 0, 0, t2346, -t2344, t2352, -t2309, 0, 0, 0, 0, 0, 0, -t2268, -t2278, -t2260, -t2213, 0, 0, 0, 0, 0, 0, -t2436, -t2217, -t2432, -t2166, 0, 0, 0, 0, 0, 0, -t2436, -t2432, t2217, -t2162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2417, 0, 0, 0, 0, 0, 0, t2326, t2327, 0, t2262, 0, 0, 0, 0, 0, 0, t2244, t2248, t2233, t2207, 0, 0, 0, 0, 0, 0, t2443, -t2198, t2439, t2164, 0, 0, 0, 0, 0, 0, t2443, t2439, t2198, t2160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2359, t2354, t2404, t2294, 0, 0, 0, 0, 0, 0, t2269, t2279, t2261, t2214, 0, 0, 0, 0, 0, 0, t2437, -t2211, t2433, t2167, 0, 0, 0, 0, 0, 0, t2437, t2433, t2211, t2163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2353, t2358, -t2405, t2293, 0, 0, 0, 0, 0, 0, -t2287, -t2289, -t2305, -t2283, 0, 0, 0, 0, 0, 0, -t2392, -t2389, t2265, -t2239, 0, 0, 0, 0, 0, 0, -t2392, t2265, t2389, -t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2346, t2344, -t2352, t2309, 0, 0, 0, 0, 0, 0, t2268, t2278, t2260, t2213, 0, 0, 0, 0, 0, 0, t2436, t2217, t2432, t2166, 0, 0, 0, 0, 0, 0, t2436, t2432, -t2217, t2162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2316, t2306, t2288, t2241, 0, 0, 0, 0, 0, 0, t2434, t2249, t2424, t2175, 0, 0, 0, 0, 0, 0, t2434, t2424, -t2249, t2169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2307, t2325, t2290, t2240, 0, 0, 0, 0, 0, 0, t2435, t2246, t2425, t2174, 0, 0, 0, 0, 0, 0, t2435, t2425, -t2246, t2168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2287, t2289, t2305, t2283, 0, 0, 0, 0, 0, 0, t2392, t2389, -t2265, t2239, 0, 0, 0, 0, 0, 0, t2392, -t2265, -t2389, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, t2270, t2393, t2193, 0, 0, 0, 0, 0, 0, t2426, t2393, -t2270, t2186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2271, t2427, -t2259, t2192, 0, 0, 0, 0, 0, 0, -t2271, -t2259, -t2427, -t2187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2392, t2389, -t2265, t2239, 0, 0, 0, 0, 0, 0, t2392, -t2265, -t2389, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2426, t2393, -t2270, t2186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2392, -t2265, -t2389, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2271, t2259, t2427, t2187;];
f_new_reg  = t1;
