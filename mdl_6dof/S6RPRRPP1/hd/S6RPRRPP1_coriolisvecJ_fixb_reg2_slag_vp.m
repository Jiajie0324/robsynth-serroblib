% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRRPP1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:29:51
% EndTime: 2019-03-09 04:30:03
% DurationCPUTime: 4.36s
% Computational Cost: add. (6017->447), mult. (14437->574), div. (0->0), fcn. (9496->8), ass. (0->223)
t189 = cos(qJ(3));
t256 = qJD(1) * t189;
t168 = -qJD(4) + t256;
t186 = sin(qJ(4));
t188 = cos(qJ(4));
t248 = t188 * qJD(3);
t187 = sin(qJ(3));
t257 = qJD(1) * t187;
t145 = t186 * t257 - t248;
t254 = qJD(3) * t186;
t147 = t188 * t257 + t254;
t183 = sin(pkin(10));
t286 = cos(pkin(10));
t87 = t286 * t145 + t147 * t183;
t289 = t87 * t168;
t245 = qJD(3) * qJD(4);
t250 = qJD(4) * t186;
t237 = t187 * t250;
t238 = t189 * t248;
t320 = t237 - t238;
t103 = qJD(1) * t320 - t188 * t245;
t249 = qJD(4) * t188;
t236 = t187 * t249;
t252 = qJD(3) * t189;
t239 = t186 * t252;
t196 = t236 + t239;
t104 = qJD(1) * t196 + t186 * t245;
t62 = -t103 * t286 - t183 * t104;
t32 = t62 - t289;
t230 = t286 * t186;
t142 = t183 * t188 + t230;
t118 = t142 * t187;
t199 = -t183 * t145 + t147 * t286;
t229 = t286 * t188;
t132 = qJD(4) * t229 - t183 * t250;
t227 = qJD(3) * t286;
t216 = t189 * t227;
t73 = -t132 * t187 - t183 * t238 - t186 * t216;
t297 = t62 * t118 - t199 * t73;
t269 = t186 * t187;
t119 = -t183 * t269 + t187 * t229;
t61 = -t103 * t183 + t286 * t104;
t131 = t142 * qJD(4);
t74 = t131 * t187 + t183 * t239 - t188 * t216;
t298 = -t119 * t61 + t74 * t87;
t325 = t297 - t298;
t324 = t297 + t298;
t323 = t87 * t199;
t246 = qJD(1) * qJD(3);
t176 = t187 * t246;
t322 = -t119 * t176 - t74 * t168;
t253 = qJD(3) * t187;
t321 = -t189 * t62 + t199 * t253;
t262 = t142 * t256 - t131;
t241 = t186 * t256;
t261 = -t183 * t241 + t229 * t256 - t132;
t232 = -t189 * t61 + t87 * t253;
t316 = -t118 * t176 - t73 * t168;
t319 = t316 - t232;
t318 = t316 + t232;
t307 = t199 ^ 2;
t303 = -qJ(5) - pkin(8);
t231 = qJD(4) * t303;
t247 = t188 * qJD(5);
t127 = t186 * t231 + t247;
t195 = -t186 * qJD(5) + t188 * t231;
t266 = t188 * t189;
t203 = pkin(4) * t187 - qJ(5) * t266;
t214 = pkin(3) * t187 - pkin(8) * t189;
t149 = t214 * qJD(1);
t173 = sin(pkin(9)) * pkin(1) + pkin(7);
t157 = t173 * qJD(1);
t313 = qJD(2) * t189 - t187 * t157;
t82 = t188 * t149 - t186 * t313;
t64 = qJD(1) * t203 + t82;
t83 = t186 * t149 + t188 * t313;
t71 = -qJ(5) * t241 + t83;
t300 = (-t195 + t64) * t286 + (t127 - t71) * t183;
t107 = -qJD(3) * pkin(3) - t313;
t84 = pkin(4) * t145 + qJD(5) + t107;
t29 = pkin(5) * t87 - qJ(6) * t199 + t84;
t317 = t29 * t199;
t111 = t313 * qJD(3);
t150 = t214 * qJD(3);
t137 = qJD(1) * t150;
t121 = qJD(2) * t187 + t157 * t189;
t108 = qJD(3) * pkin(8) + t121;
t175 = -cos(pkin(9)) * pkin(1) - pkin(2);
t138 = -pkin(3) * t189 - pkin(8) * t187 + t175;
t114 = t138 * qJD(1);
t67 = t108 * t188 + t114 * t186;
t35 = -qJD(4) * t67 - t186 * t111 + t188 * t137;
t315 = t168 * t67 - t35;
t34 = -t108 * t250 + t188 * t111 + t114 * t249 + t186 * t137;
t66 = -t108 * t186 + t188 * t114;
t314 = t168 * t66 + t34;
t217 = -t121 + (-t241 + t250) * pkin(4);
t148 = t173 * t266;
t92 = t186 * t138 + t148;
t312 = t321 + t322;
t181 = t187 ^ 2;
t206 = qJD(1) * t181 - t168 * t189;
t311 = -t168 * t237 - t206 * t248;
t270 = t183 * t186;
t141 = -t229 + t270;
t310 = t168 * t262 + (qJD(3) * t141 - t87) * t257;
t309 = -t141 * t62 - t142 * t61 + t199 * t262 + t261 * t87;
t56 = -qJ(5) * t145 + t67;
t53 = t286 * t56;
t55 = -qJ(5) * t147 + t66;
t22 = t183 * t55 + t53;
t308 = t22 * t199;
t305 = t87 ^ 2;
t19 = pkin(4) * t176 + qJ(5) * t103 - qJD(5) * t147 + t35;
t25 = -qJ(5) * t104 - qJD(5) * t145 + t34;
t3 = -t183 * t25 + t286 * t19;
t4 = t183 * t19 + t286 * t25;
t31 = t183 * t64 + t286 * t71;
t26 = qJ(6) * t257 + t31;
t77 = t127 * t286 + t183 * t195;
t302 = t26 - t77;
t301 = pkin(5) * t257 + t300;
t299 = -t31 + t77;
t271 = t173 * t186;
t259 = t188 * t150 + t253 * t271;
t37 = -t187 * t247 + t203 * qJD(3) + (-t148 + (qJ(5) * t187 - t138) * t186) * qJD(4) + t259;
t260 = t138 * t249 + t186 * t150;
t267 = t187 * t188;
t42 = (-qJ(5) * qJD(4) - qJD(3) * t173) * t267 + (-qJD(5) * t187 + (-qJ(5) * qJD(3) - qJD(4) * t173) * t189) * t186 + t260;
t9 = t183 * t37 + t286 * t42;
t296 = pkin(5) * t262 - qJ(6) * t261 + qJD(6) * t142 - t217;
t52 = -pkin(4) * t168 + t55;
t18 = t183 * t52 + t53;
t125 = t188 * t138;
t75 = -qJ(5) * t267 + t125 + (-pkin(4) - t271) * t189;
t81 = -qJ(5) * t269 + t92;
t41 = t183 * t75 + t286 * t81;
t293 = t168 * t199;
t292 = t183 * t56;
t287 = -t104 * t267 - t145 * t238;
t159 = t303 * t188;
t96 = -t159 * t183 - t303 * t230;
t285 = qJD(3) * t96;
t97 = -t286 * t159 + t303 * t270;
t284 = qJD(3) * t97;
t283 = t104 * t189;
t282 = t107 * t186;
t281 = t107 * t188;
t112 = qJD(2) * t253 + t157 * t252;
t280 = t112 * t186;
t279 = t112 * t187;
t278 = t112 * t188;
t277 = t145 * t168;
t276 = t145 * t187;
t275 = t147 * t145;
t274 = t147 * t168;
t273 = t168 * t186;
t272 = t168 * t188;
t268 = t186 * t189;
t190 = qJD(3) ^ 2;
t265 = t190 * t187;
t264 = t190 * t189;
t23 = t286 * t55 - t292;
t263 = qJD(6) - t23;
t128 = pkin(4) * t269 + t187 * t173;
t258 = -t189 ^ 2 + t181;
t158 = qJD(1) * t175;
t251 = qJD(4) * t145;
t244 = qJ(6) * t176 + t4;
t191 = qJD(1) ^ 2;
t242 = t189 * t191 * t187;
t94 = pkin(4) * t196 + t173 * t252;
t179 = -pkin(4) * t188 - pkin(3);
t240 = t147 * t252;
t235 = t168 * t257;
t225 = t103 * t189 + t147 * t253;
t224 = -t103 + t251;
t223 = -t97 * t61 + t62 * t96 - t77 * t87;
t222 = t147 * t236;
t220 = t168 * t236;
t219 = -t22 * t168 + t3;
t218 = t189 * t176;
t70 = pkin(4) * t104 + t112;
t213 = -t305 - t307;
t212 = -t305 + t307;
t211 = t118 * t61 - t73 * t87;
t208 = -t186 * t67 - t188 * t66;
t207 = t186 * t66 - t188 * t67;
t204 = 0.2e1 * qJD(3) * t158;
t202 = t61 - t293;
t201 = -t61 - t293;
t8 = -t183 * t42 + t286 * t37;
t17 = t286 * t52 - t292;
t40 = -t183 * t81 + t286 * t75;
t2 = -pkin(5) * t176 - t3;
t200 = t61 * t141 - t262 * t87;
t198 = t206 * t186;
t194 = -t62 - t289;
t5 = pkin(5) * t61 - qJ(6) * t62 - qJD(6) * t199 + t70;
t193 = qJD(4) * t208 - t186 * t35 + t188 * t34;
t192 = t111 * t189 + t279 + (-t121 * t187 - t189 * t313) * qJD(3);
t174 = -pkin(4) * t286 - pkin(5);
t171 = pkin(4) * t183 + qJ(6);
t113 = (-t168 - t256) * t253;
t91 = -t173 * t268 + t125;
t85 = pkin(5) * t141 - qJ(6) * t142 + t179;
t59 = pkin(5) * t118 - qJ(6) * t119 + t128;
t58 = -t92 * qJD(4) + t259;
t57 = (-t187 * t248 - t189 * t250) * t173 + t260;
t43 = pkin(4) * t147 + pkin(5) * t199 + qJ(6) * t87;
t38 = t189 * pkin(5) - t40;
t36 = -qJ(6) * t189 + t41;
t28 = t261 * t168 + (qJD(3) * t142 - t199) * t257;
t24 = -pkin(5) * t73 + qJ(6) * t74 - qJD(6) * t119 + t94;
t14 = t119 * t62 - t199 * t74;
t13 = -qJ(6) * t168 + t18;
t12 = t168 * pkin(5) + qJD(6) - t17;
t11 = t321 - t322;
t10 = t62 * t142 - t199 * t261;
t7 = -pkin(5) * t253 - t8;
t6 = qJ(6) * t253 - qJD(6) * t189 + t9;
t1 = -qJD(6) * t168 + t244;
t15 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t218, -0.2e1 * t258 * t246, t264, -0.2e1 * t218, -t265, 0, -t173 * t264 + t187 * t204, t173 * t265 + t189 * t204, t192, t192 * t173, -t103 * t267 - t147 * t320, -t222 + (-t240 + (t103 + t251) * t187) * t186 + t287, t225 - t311, t104 * t269 + t145 * t196, t220 + t283 + (-t198 - t276) * qJD(3), t113, -t168 * t58 + (-t35 + (t145 * t173 + t282) * qJD(3)) * t189 + (t107 * t249 + t104 * t173 + t280 + (qJD(1) * t91 + t66) * qJD(3)) * t187, t168 * t57 + (t34 + (t147 * t173 + t281) * qJD(3)) * t189 + (-t107 * t250 - t103 * t173 + t278 + (-qJD(1) * t92 - t67) * qJD(3)) * t187, t103 * t91 - t104 * t92 - t145 * t57 - t147 * t58 + t208 * t252 + (qJD(4) * t207 - t186 * t34 - t188 * t35) * t187, t34 * t92 + t35 * t91 + t57 * t67 + t58 * t66 + (t107 * t252 + t279) * t173, t14, -t325, t11, t211, t319, t113, t118 * t70 + t128 * t61 - t168 * t8 - t189 * t3 - t73 * t84 + t87 * t94 + (qJD(1) * t40 + t17) * t253, t119 * t70 + t128 * t62 + t168 * t9 + t189 * t4 - t74 * t84 + t199 * t94 + (-qJD(1) * t41 - t18) * t253, -t118 * t4 - t119 * t3 + t17 * t74 + t18 * t73 - t199 * t8 - t40 * t62 - t41 * t61 - t87 * t9, t128 * t70 + t17 * t8 + t18 * t9 + t3 * t40 + t4 * t41 + t84 * t94, t14, t11, t325, t113, -t319, t211, t118 * t5 + t168 * t7 + t189 * t2 + t24 * t87 - t29 * t73 + t59 * t61 + (-qJD(1) * t38 - t12) * t253, -t1 * t118 + t119 * t2 - t12 * t74 + t13 * t73 + t199 * t7 - t36 * t61 + t38 * t62 - t6 * t87, -t1 * t189 - t119 * t5 - t168 * t6 - t24 * t199 + t29 * t74 - t59 * t62 + (qJD(1) * t36 + t13) * t253, t1 * t36 + t12 * t7 + t13 * t6 + t2 * t38 + t24 * t29 + t5 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, -t264, 0, t111 * t187 - t112 * t189 + (t121 * t189 - t187 * t313) * qJD(3), 0, 0, 0, 0, 0, 0, t220 - t283 + (-t198 + t276) * qJD(3), t225 + t311, t222 + (t187 * t224 + t240) * t186 + t287 (-qJD(3) * t207 - t112) * t189 + (qJD(3) * t107 + t193) * t187, 0, 0, 0, 0, 0, 0, t318, t312, t324, -t118 * t3 + t119 * t4 + t17 * t73 - t18 * t74 - t189 * t70 + t253 * t84, 0, 0, 0, 0, 0, 0, t318, t324, -t312, t1 * t119 + t118 * t2 - t12 * t73 - t13 * t74 - t189 * t5 + t253 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t242, t258 * t191, 0, t242, 0, 0, qJD(3) * t121 - t158 * t257 - t112, -t158 * t256, 0, 0, -t103 * t186 - t147 * t272 (-t103 + t277) * t188 + (-t104 + t274) * t186, -t168 * t249 + (t168 * t266 + (-t147 + t254) * t187) * qJD(1), -t104 * t188 - t145 * t273, t168 * t250 + (-t168 * t268 + (t145 + t248) * t187) * qJD(1), t235, -pkin(3) * t104 - t278 - t121 * t145 + t168 * t82 + (pkin(8) * t272 + t282) * qJD(4) + (-t187 * t66 + (-pkin(8) * t253 - t107 * t189) * t186) * qJD(1), pkin(3) * t103 + t280 - t121 * t147 - t168 * t83 + (-pkin(8) * t273 + t281) * qJD(4) + (-t107 * t266 + (-pkin(8) * t248 + t67) * t187) * qJD(1), t145 * t83 + t147 * t82 + ((qJD(4) * t147 - t104) * pkin(8) + t314) * t188 + (pkin(8) * t224 + t315) * t186, -pkin(3) * t112 + pkin(8) * t193 - t107 * t121 - t66 * t82 - t67 * t83, t10, t309, t28, t200, -t310, t235, t141 * t70 + t179 * t61 + t217 * t87 - t262 * t84 + t300 * t168 + (-t17 - t285) * t257, t142 * t70 + t179 * t62 + t217 * t199 - t261 * t84 + t299 * t168 + (t18 - t284) * t257, -t141 * t4 - t142 * t3 + t261 * t17 + t262 * t18 + t199 * t300 + t31 * t87 + t223, -t300 * t17 + t179 * t70 + t299 * t18 + t217 * t84 - t3 * t96 + t4 * t97, t10, t28, -t309, t235, t310, t200, t141 * t5 + t61 * t85 - t296 * t87 - t262 * t29 + t301 * t168 + (t12 - t285) * t257, -t1 * t141 - t261 * t12 + t262 * t13 + t142 * t2 + t199 * t301 + t26 * t87 + t223, -t142 * t5 - t62 * t85 + t296 * t199 + t261 * t29 + t302 * t168 + (-t13 + t284) * t257, t1 * t97 + t301 * t12 - t302 * t13 + t2 * t96 - t296 * t29 + t5 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t275, -t145 ^ 2 + t147 ^ 2, -t103 - t277, -t275, -t104 - t274, t176, -t107 * t147 - t315, t107 * t145 - t314, 0, 0, t323, t212, t32, -t323, t201, t176, -t84 * t199 + (-t147 * t87 + t227 * t257) * pkin(4) + t219, -t168 * t23 + t84 * t87 + (-t147 * t199 - t176 * t183) * pkin(4) - t4, t18 * t199 - t308 + (-t183 * t61 - t286 * t62) * pkin(4) + (-t17 + t23) * t87, t17 * t22 - t18 * t23 + (-t147 * t84 + t183 * t4 + t286 * t3) * pkin(4), t323, t32, -t212, t176, -t201, -t323, -t317 - t43 * t87 + (pkin(5) - t174) * t176 + t219, t13 * t199 - t171 * t61 + t174 * t62 - t308 + (t12 - t263) * t87, t171 * t176 - t29 * t87 + t43 * t199 + (-0.2e1 * qJD(6) + t23) * t168 + t244, t1 * t171 - t12 * t22 + t13 * t263 + t174 * t2 - t29 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, -t194, t213, t17 * t199 + t18 * t87 + t70, 0, 0, 0, 0, 0, 0, t202, t213, t194, -t12 * t199 + t13 * t87 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176 + t323, t32, -t168 ^ 2 - t307, t13 * t168 + t2 + t317;];
tauc_reg  = t15;
