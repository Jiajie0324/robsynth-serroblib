% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP9_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:21:28
% EndTime: 2019-05-07 19:22:57
% DurationCPUTime: 75.75s
% Computational Cost: add. (167781->886), mult. (359048->1274), div. (0->0), fcn. (284249->10), ass. (0->661)
t1214 = sin(qJ(1));
t1218 = cos(qJ(1));
t1213 = sin(qJ(2));
t1217 = cos(qJ(2));
t1211 = sin(qJ(4));
t1215 = cos(qJ(4));
t1210 = cos(pkin(6));
t1201 = qJD(1) * t1210 + qJD(2);
t1212 = sin(qJ(3));
t1216 = cos(qJ(3));
t1209 = sin(pkin(6));
t1348 = t1209 * t1213;
t1329 = qJD(1) * t1348;
t1171 = t1201 * t1212 + t1216 * t1329;
t1334 = qJDD(1) * t1213;
t1379 = qJD(1) * t1217;
t1178 = (qJD(2) * t1379 + t1334) * t1209;
t1314 = qJDD(1) * t1210 + qJDD(2);
t1315 = t1212 * t1178 - t1216 * t1314;
t1116 = -t1171 * qJD(3) - t1315;
t1115 = qJDD(4) - t1116;
t1347 = t1209 * t1217;
t1200 = qJD(1) * t1347;
t1336 = t1200 - qJD(3);
t1138 = t1171 * t1211 + t1215 * t1336;
t1140 = t1215 * t1171 - t1211 * t1336;
t1358 = t1140 * t1138;
t1429 = -t1358 + t1115;
t1371 = t1429 * t1215;
t1169 = -t1216 * t1201 + t1212 * t1329;
t1165 = qJD(4) + t1169;
t1163 = t1165 ^ 2;
t1414 = t1138 ^ 2;
t1430 = -t1163 - t1414;
t1469 = t1430 * t1211 + t1371;
t1117 = -t1169 * qJD(3) + t1216 * t1178 + t1212 * t1314;
t1333 = qJDD(1) * t1217;
t1380 = qJD(1) * t1213;
t1254 = qJD(2) * t1380 - t1333;
t1237 = t1254 * t1209;
t1232 = qJDD(3) + t1237;
t1038 = qJD(4) * t1140 + t1117 * t1211 - t1215 * t1232;
t1357 = t1165 * t1140;
t1434 = t1038 + t1357;
t1372 = t1429 * t1211;
t1470 = t1430 * t1215 - t1372;
t1488 = t1212 * t1434 + t1216 * t1470;
t1510 = t1213 * t1469 + t1217 * t1488;
t1491 = t1212 * t1470 - t1216 * t1434;
t1512 = t1213 * t1488 - t1217 * t1469;
t1539 = -t1209 * t1491 + t1210 * t1512;
t710 = t1214 * t1539 - t1218 * t1510;
t1587 = pkin(7) * t710;
t1561 = t1214 * t1510 + t1218 * t1539;
t1589 = pkin(7) * t1561;
t1224 = t1215 * t1117 + t1211 * t1232;
t1001 = t1138 * (qJD(4) + t1165) - t1224;
t1413 = t1140 ^ 2;
t1076 = -t1413 - t1163;
t1428 = t1358 + t1115;
t1456 = t1215 * t1428;
t1468 = t1076 * t1211 + t1456;
t1489 = t1001 * t1212 + t1216 * t1468;
t1453 = t1428 * t1211;
t939 = t1076 * t1215 - t1453;
t1508 = -t1213 * t939 + t1217 * t1489;
t1492 = -t1001 * t1216 + t1212 * t1468;
t1507 = t1213 * t1489 + t1217 * t939;
t1540 = -t1209 * t1492 + t1210 * t1507;
t717 = t1214 * t1540 - t1218 * t1508;
t1588 = pkin(7) * t717;
t1560 = t1214 * t1508 + t1218 * t1540;
t1590 = pkin(7) * t1560;
t1541 = t1209 * t1512 + t1210 * t1491;
t1559 = (t1209 * t1541 + t1210 * t1539) * pkin(8);
t1102 = -t1413 + t1163;
t953 = t1102 * t1215 + t1372;
t1496 = t1217 * t953;
t959 = t1102 * t1211 - t1371;
t1498 = t1216 * t959;
t998 = (-qJD(4) + t1165) * t1138 + t1224;
t872 = t1212 * t998 - t1498;
t1283 = t1213 * t872 - t1496;
t1501 = t1212 * t959;
t867 = t1216 * t998 + t1501;
t770 = t1209 * t867 + t1210 * t1283;
t1499 = t1213 * t953;
t810 = t1217 * t872 + t1499;
t1617 = t1214 * t770 - t1218 * t810;
t1616 = t1214 * t810 + t1218 * t770;
t1577 = pkin(1) * t1539;
t1575 = pkin(1) * t1541;
t1542 = t1209 * t1507 + t1210 * t1492;
t1558 = (t1209 * t1542 + t1210 * t1540) * pkin(8);
t1101 = t1414 - t1163;
t1494 = t1101 * t1211 + t1456;
t962 = t1101 * t1215 - t1453;
t992 = t1038 - t1357;
t876 = -t1212 * t992 + t1216 * t962;
t1279 = t1213 * t876 - t1217 * t1494;
t870 = t1212 * t962 + t1216 * t992;
t774 = -t1209 * t870 + t1210 * t1279;
t814 = t1213 * t1494 + t1217 * t876;
t1615 = t1214 * t774 - t1218 * t814;
t1614 = t1214 * t814 + t1218 * t774;
t1576 = pkin(1) * t1540;
t1574 = pkin(1) * t1542;
t1082 = -t1414 + t1413;
t1480 = t1082 * t1212;
t1455 = t1215 * t1434;
t883 = -t1211 * t1001 + t1455;
t845 = t1216 * t883 - t1480;
t1397 = t1211 * t1434;
t881 = t1215 * t1001 + t1397;
t1293 = t1213 * t845 - t1217 * t881;
t1479 = t1082 * t1216;
t842 = t1212 * t883 + t1479;
t742 = -t1209 * t842 + t1210 * t1293;
t785 = t1213 * t881 + t1217 * t845;
t1610 = t1214 * t742 - t1218 * t785;
t1609 = t1214 * t785 + t1218 * t742;
t1608 = t1209 * t1283 - t1210 * t867;
t1555 = pkin(8) * t1510;
t1602 = t1209 * t1279 + t1210 * t870;
t1396 = t1211 * t992;
t1039 = -t1138 * qJD(4) + t1224;
t1107 = t1138 * t1165;
t997 = t1107 + t1039;
t1495 = -t1215 * t997 - t1396;
t1043 = t1414 + t1413;
t1482 = t1043 * t1212;
t990 = t1215 * t992;
t1502 = t1211 * t997 - t990;
t1511 = t1216 * t1502 - t1482;
t1537 = t1213 * t1495 + t1217 * t1511;
t1481 = t1043 * t1216;
t1513 = t1212 * t1502 + t1481;
t1538 = t1213 * t1511 - t1217 * t1495;
t1564 = -t1209 * t1513 + t1210 * t1538;
t1579 = t1214 * t1537 + t1218 * t1564;
t1601 = pkin(7) * t1579;
t1580 = -t1214 * t1564 + t1218 * t1537;
t1600 = pkin(7) * t1580;
t1556 = pkin(8) * t1508;
t1593 = t1209 * t1293 + t1210 * t842;
t1592 = pkin(1) * t1564;
t1565 = t1209 * t1538 + t1210 * t1513;
t1591 = pkin(1) * t1565;
t1533 = pkin(9) * t1491;
t1516 = -pkin(2) * t1492 - pkin(10) * t1468;
t1582 = -pkin(3) * t1001 - t1516;
t1581 = -pkin(2) * t1491 - pkin(10) * t1470;
t1515 = -pkin(2) * t1469 + pkin(9) * t1488;
t1578 = (-t1209 * t1565 - t1210 * t1564) * pkin(8);
t1573 = pkin(8) * t1537;
t1532 = pkin(9) * t1492;
t1505 = pkin(3) * t1469;
t1566 = qJ(5) * t1430 + t1505;
t1509 = pkin(2) * t939 + pkin(9) * t1489;
t1554 = pkin(9) * t1511;
t1553 = pkin(9) * t1513;
t1503 = pkin(10) * t1469;
t1485 = pkin(3) * t1043;
t1543 = -pkin(2) * t1513 - pkin(10) * t1502 - t1485;
t1535 = pkin(3) * t939;
t1534 = pkin(10) * t939;
t1531 = pkin(10) * t1495;
t1377 = qJD(5) * t1165;
t1518 = -qJ(5) * t1428 - 0.2e1 * t1377 + t1535;
t1517 = pkin(3) * t1434 + t1581;
t1356 = t1165 * t1211;
t1096 = t1140 * t1356;
t1355 = t1165 * t1215;
t1326 = t1138 * t1355;
t1303 = t1096 - t1326;
t1359 = t1115 * t1212;
t1422 = t1216 * t1303 + t1359;
t1097 = t1138 * t1356;
t1098 = t1140 * t1355;
t1337 = t1097 + t1098;
t1439 = t1213 * t1337;
t1449 = t1217 * t1422 - t1439;
t1111 = t1216 * t1115;
t1426 = t1212 * t1303 - t1111;
t1435 = t1217 * t1337;
t1450 = t1213 * t1422 + t1435;
t1466 = -t1209 * t1426 + t1210 * t1450;
t1490 = -t1214 * t1466 + t1218 * t1449;
t1487 = t1214 * t1449 + t1218 * t1466;
t1484 = (t1434 + t1357) * pkin(4);
t1483 = qJ(5) * t1043;
t1257 = t1038 * t1211 + t1326;
t1328 = t1212 * t1358;
t1423 = t1216 * t1257 - t1328;
t1433 = t1038 * t1215 - t1097;
t1447 = -t1213 * t1433 + t1217 * t1423;
t1478 = t1214 * t1447;
t1338 = t1215 * t1039 - t1096;
t1421 = t1216 * t1338 + t1328;
t1432 = -t1039 * t1211 - t1098;
t1448 = -t1213 * t1432 + t1217 * t1421;
t1477 = t1214 * t1448;
t1475 = t1218 * t1447;
t1474 = t1218 * t1448;
t1467 = t1209 * t1450 + t1210 * t1426;
t1327 = t1216 * t1358;
t1424 = t1212 * t1338 - t1327;
t1463 = t1209 * t1424;
t1425 = t1212 * t1257 + t1327;
t1462 = t1209 * t1425;
t1460 = t1210 * t1424;
t1459 = t1210 * t1425;
t996 = -t1107 + t1039;
t1151 = t1169 * t1336;
t1071 = t1151 + t1117;
t1305 = t1216 * t1151;
t1317 = t1336 * t1171;
t1306 = t1212 * t1317;
t1092 = t1305 - t1306;
t1452 = t1213 * t1092 - t1217 * t1232;
t1345 = t1210 * t1217;
t1346 = t1210 * t1213;
t1417 = t1345 * t1433 + t1346 * t1423 - t1462;
t1446 = t1218 * t1417 + t1478;
t1445 = -t1214 * t1417 + t1475;
t1418 = t1345 * t1432 + t1346 * t1421 - t1463;
t1444 = t1218 * t1418 + t1477;
t1443 = -t1214 * t1418 + t1474;
t1332 = t1336 ^ 2;
t1206 = t1209 ^ 2;
t1442 = t1206 * t1217;
t1354 = t1171 * t1169;
t1228 = t1232 - t1354;
t1440 = t1212 * t1228;
t1437 = t1216 * t1228;
t1186 = t1201 * t1200;
t1147 = t1186 + t1178;
t1378 = qJD(5) * t1140;
t1131 = 0.2e1 * t1378;
t1427 = -qJ(5) * t1001 + t1131;
t1416 = t1347 * t1432 + t1348 * t1421 + t1460;
t1415 = t1347 * t1433 + t1348 * t1423 + t1459;
t1167 = t1169 ^ 2;
t1168 = t1171 ^ 2;
t1412 = t1201 ^ 2;
t1411 = -0.2e1 * qJD(5);
t1410 = -2 * qJD(6);
t1409 = pkin(4) + qJ(6);
t1408 = pkin(2) * t1213;
t1407 = pkin(2) * t1217;
t1406 = pkin(3) * t1212;
t1405 = pkin(4) * t1165;
t1404 = pkin(4) * t1211;
t1403 = pkin(4) * t1215;
t1402 = pkin(8) * t1209;
t1401 = t1210 * g(3);
t1400 = qJ(5) * t992;
t1124 = pkin(3) * t1169 - pkin(10) * t1171;
t1197 = g(1) * t1218 + g(2) * t1214;
t1219 = qJD(1) ^ 2;
t1174 = -pkin(1) * t1219 + qJDD(1) * t1402 - t1197;
t1313 = -pkin(9) * t1213 - t1407;
t1381 = qJD(1) * t1209;
t1177 = t1313 * t1381;
t1196 = t1214 * g(1) - t1218 * g(2);
t1235 = qJDD(1) * pkin(1) + t1219 * t1402 + t1196;
t1231 = t1210 * t1235;
t1225 = -g(3) * t1348 + t1213 * t1231;
t1060 = t1314 * pkin(9) - t1412 * pkin(2) + (t1177 * t1381 + t1174) * t1217 + t1225;
t1340 = qJD(2) + t1201;
t1318 = qJD(1) * t1340;
t1221 = -t1178 * pkin(9) - t1401 + (-t1201 * pkin(9) * t1379 + (t1213 * t1318 - t1333) * pkin(2) - t1235) * t1209;
t965 = t1216 * t1060 + t1212 * t1221;
t907 = -pkin(3) * t1332 + pkin(10) * t1232 - t1169 * t1124 + t965;
t1316 = t1213 * t1174 - t1217 * t1231;
t1059 = -t1314 * pkin(2) - t1412 * pkin(9) + (g(3) * t1217 + t1177 * t1380) * t1209 + t1316;
t911 = -t1071 * pkin(10) + (-t1116 - t1317) * pkin(3) + t1059;
t817 = t1211 * t911 + t1215 * t907;
t964 = t1060 * t1212 - t1216 * t1221;
t906 = -t1232 * pkin(3) - t1332 * pkin(10) + t1124 * t1171 + t964;
t1398 = t1211 * t906;
t1389 = t1215 * t906;
t1382 = qJD(1) * t1201;
t1376 = qJD(6) * t1138;
t1366 = t1059 * t1212;
t1365 = t1059 * t1216;
t1104 = -t1232 - t1354;
t1361 = t1104 * t1212;
t1360 = t1104 * t1216;
t1341 = t1217 * t1219;
t1321 = t1213 * t1341;
t1195 = t1206 * t1321;
t1175 = t1195 + t1314;
t1353 = t1175 * t1213;
t1352 = t1175 * t1217;
t1176 = -t1195 + t1314;
t1351 = t1176 * t1213;
t1350 = t1176 * t1217;
t1349 = t1206 * t1219;
t1153 = t1209 * t1235 + t1401;
t1343 = t1213 * t1153;
t1342 = t1217 * t1153;
t1207 = t1213 ^ 2;
t1208 = t1217 ^ 2;
t1335 = t1207 + t1208;
t1331 = -pkin(3) * t1216 - pkin(2);
t1330 = t1201 * t1381;
t1325 = t1213 * t1354;
t1324 = t1217 * t1354;
t1323 = t1207 * t1349;
t1322 = t1208 * t1349;
t1320 = -qJ(5) * t1211 - pkin(3);
t1095 = pkin(5) * t1140 - qJ(6) * t1165;
t1319 = t1095 - t1405;
t816 = t1211 * t907 - t1215 * t911;
t864 = t1212 * t964 + t1216 * t965;
t1158 = -t1196 * t1214 - t1218 * t1197;
t1194 = qJDD(1) * t1218 - t1214 * t1219;
t1312 = -pkin(7) * t1194 - g(3) * t1214;
t1307 = t1212 * t1151;
t1304 = t1216 * t1317;
t1164 = -t1323 - t1412;
t1123 = -t1164 * t1213 - t1350;
t1302 = pkin(8) * t1123 - t1343;
t1182 = -t1322 - t1412;
t1129 = t1182 * t1217 - t1353;
t1301 = pkin(8) * t1129 + t1342;
t1081 = pkin(4) * t1138 - qJ(5) * t1140;
t1300 = -t1163 * pkin(4) + t1115 * qJ(5) - t1138 * t1081 + t817;
t750 = t1211 * t817 - t1215 * t816;
t751 = t1211 * t816 + t1215 * t817;
t863 = t1212 * t965 - t1216 * t964;
t1234 = -t1115 * pkin(4) - t1163 * qJ(5) + t1081 * t1140 + qJDD(5) + t816;
t1227 = t1039 * pkin(5) - qJ(6) * t1429 + t1234;
t754 = (pkin(5) * t1138 + t1410) * t1165 + t1227;
t1156 = 0.2e1 * t1377;
t1230 = -t1038 * pkin(5) - qJ(6) * t1414 + t1095 * t1165 + qJDD(6) + t1300;
t767 = t1156 + t1230;
t695 = t1211 * t754 + t1215 * t767;
t1229 = t1038 * pkin(4) - qJ(5) * t996 + t906;
t1226 = -pkin(5) * t1414 + t1229;
t1223 = qJ(6) * t1038 + t1226;
t768 = 0.2e1 * t1376 + (t1411 - t1319) * t1140 + t1223;
t670 = t1212 * t768 + t1216 * t695;
t694 = t1211 * t767 - t1215 * t754;
t1299 = t1213 * t670 - t1217 * t694;
t790 = t1156 + t1300;
t723 = t1211 * t1234 + t1215 * t790;
t799 = (t1411 + t1405) * t1140 + t1229;
t686 = t1212 * t799 + t1216 * t723;
t722 = t1211 * t790 - t1215 * t1234;
t1298 = t1213 * t686 - t1217 * t722;
t728 = t1212 * t906 + t1216 * t751;
t1297 = t1213 * t728 - t1217 * t750;
t885 = t1211 * t998 - t990;
t834 = t1216 * t885 - t1482;
t879 = -t1215 * t998 - t1396;
t1295 = t1213 * t834 - t1217 * t879;
t886 = -t1211 * t996 - t1455;
t846 = t1216 * t886 + t1480;
t880 = -t1215 * t996 + t1397;
t1292 = t1213 * t846 + t1217 * t880;
t871 = t1212 * t997 - t1498;
t1284 = t1213 * t871 - t1496;
t1278 = t1213 * t1423 + t1217 * t1433;
t1277 = t1213 * t1421 + t1217 * t1432;
t1030 = (-t1138 * t1215 + t1140 * t1211) * t1165;
t981 = t1030 * t1216 + t1359;
t1274 = t1213 * t981 + t1435;
t1273 = -t1059 * t1217 + t1213 * t864;
t1272 = -t1210 * t1219 + t1382;
t1069 = (-0.2e1 * qJD(3) + t1200) * t1171 - t1315;
t1004 = t1069 * t1216 - t1071 * t1212;
t1125 = -t1168 + t1167;
t1271 = t1004 * t1213 + t1125 * t1217;
t1068 = t1171 * t1200 + t1315;
t1073 = -t1117 + t1151;
t1005 = -t1068 * t1216 - t1073 * t1212;
t1094 = t1167 + t1168;
t1270 = t1005 * t1213 + t1094 * t1217;
t1120 = -t1332 - t1167;
t1034 = t1120 * t1216 - t1440;
t1269 = t1034 * t1213 + t1069 * t1217;
t1126 = -t1168 - t1332;
t1046 = -t1126 * t1212 + t1360;
t1268 = t1046 * t1213 - t1071 * t1217;
t1145 = -t1168 + t1332;
t1049 = -t1145 * t1212 + t1437;
t1267 = t1049 * t1213 + t1073 * t1217;
t1144 = t1167 - t1332;
t1050 = t1144 * t1216 + t1361;
t1266 = t1050 * t1213 + t1068 * t1217;
t1121 = g(3) * t1347 + t1316;
t1122 = t1217 * t1174 + t1225;
t1265 = -t1217 * t1121 + t1213 * t1122;
t1044 = t1121 * t1213 + t1122 * t1217;
t1185 = t1201 * t1329;
t1150 = -t1185 - t1237;
t1264 = t1147 * t1217 + t1150 * t1213;
t1148 = -t1186 + t1178;
t1149 = t1185 - t1237;
t1263 = -t1148 * t1217 + t1149 * t1213;
t1262 = t1164 * t1217 - t1351;
t1180 = -t1323 + t1412;
t1261 = t1180 * t1217 + t1353;
t1260 = t1182 * t1213 + t1352;
t1181 = t1322 - t1412;
t1259 = t1181 * t1213 + t1350;
t1157 = t1196 * t1218 - t1197 * t1214;
t1258 = t1209 * t1314;
t1063 = -t1212 * t1116 - t1305;
t1256 = t1063 * t1213 + t1324;
t1065 = t1216 * t1117 + t1306;
t1255 = t1065 * t1213 - t1324;
t672 = pkin(5) * t767 - t1409 * t768;
t697 = pkin(5) * t754 - qJ(5) * t768;
t637 = -pkin(10) * t694 - t1211 * t672 + t1215 * t697;
t648 = -pkin(3) * t694 - qJ(5) * t767 + t1409 * t754;
t669 = t1212 * t695 - t1216 * t768;
t615 = -pkin(9) * t669 - t1212 * t648 + t1216 * t637;
t623 = -pkin(2) * t669 + pkin(3) * t768 - pkin(10) * t695 - t1211 * t697 - t1215 * t672;
t649 = t1213 * t694 + t1217 * t670;
t1253 = pkin(8) * t649 + t1213 * t615 + t1217 * t623;
t671 = -pkin(3) * t722 + pkin(4) * t1234 - qJ(5) * t790;
t674 = -pkin(10) * t722 + (-qJ(5) * t1215 + t1404) * t799;
t685 = t1212 * t723 - t1216 * t799;
t636 = -pkin(9) * t685 - t1212 * t671 + t1216 * t674;
t647 = -pkin(2) * t685 - pkin(10) * t723 + (-t1320 + t1403) * t799;
t661 = t1213 * t722 + t1217 * t686;
t1252 = pkin(8) * t661 + t1213 * t636 + t1217 * t647;
t725 = -pkin(5) * t992 + t1043 * t1409 + t767;
t732 = t1483 + t1165 * t1410 + (t997 + t1107) * pkin(5) + t1227;
t666 = -t1211 * t725 + t1215 * t732 - t1531;
t775 = -pkin(3) * t1495 + t1409 * t997 + t1400;
t654 = -t1212 * t775 + t1216 * t666 - t1553;
t662 = -t1211 * t732 - t1215 * t725 + t1543;
t1251 = t1213 * t654 + t1217 * t662 + t1573;
t1130 = -0.2e1 * t1376;
t726 = t1131 + (-t1038 - t1434) * qJ(6) + pkin(5) * t1430 - t1484 - t1226 + t1130 + t1095 * t1140;
t897 = -pkin(5) * t1429 - qJ(5) * t1434;
t701 = -t1211 * t726 + t1215 * t897 - t1503;
t719 = -t1409 * t1429 - t1566 + t754;
t657 = -t1212 * t719 + t1216 * t701 - t1533;
t683 = -t1211 * t897 - t1215 * t726 + t1517;
t1250 = t1213 * t657 + t1217 * t683 + t1555;
t745 = pkin(5) * t1076 + t1140 * t1319 + t1130 - t1223 + t1427;
t828 = pkin(5) * t1428 - t1001 * t1409;
t699 = -t1211 * t828 + t1215 * t745 + t1534;
t721 = t1076 * t1409 - t1230 + t1518;
t658 = -t1212 * t721 + t1216 * t699 - t1532;
t680 = -t1211 * t745 - t1215 * t828 - t1582;
t1249 = t1213 * t658 + t1217 * t680 + t1556;
t727 = t1212 * t751 - t1216 * t906;
t664 = -pkin(9) * t727 + (-pkin(10) * t1216 + t1406) * t750;
t676 = -pkin(2) * t727 + pkin(3) * t906 - pkin(10) * t751;
t682 = t1213 * t750 + t1217 * t728;
t1248 = pkin(8) * t682 + t1213 * t664 + t1217 * t676;
t776 = pkin(4) * t1043 + t790;
t779 = t1234 + t1483;
t693 = -pkin(10) * t879 - t1211 * t776 + t1215 * t779;
t798 = -pkin(3) * t879 + pkin(4) * t998 + t1400;
t831 = t1212 * t885 + t1481;
t665 = -pkin(9) * t831 - t1212 * t798 + t1216 * t693;
t677 = -pkin(2) * t831 - pkin(10) * t885 - t1211 * t779 - t1215 * t776 - t1485;
t783 = t1213 * t879 + t1217 * t834;
t1247 = pkin(8) * t783 + t1213 * t665 + t1217 * t677;
t781 = t1229 - 0.2e1 * t1378 + t1484;
t740 = qJ(5) * t1455 - t1211 * t781 + t1503;
t747 = pkin(4) * t1429 - t1234 + t1566;
t673 = -t1212 * t747 + t1216 * t740 + t1533;
t703 = -t1215 * t781 + t1320 * t1434 - t1581;
t1246 = t1213 * t673 + t1217 * t703 - t1555;
t780 = -pkin(4) * t1357 - t1229 + t1427;
t741 = t1001 * t1404 + t1215 * t780 + t1534;
t748 = pkin(4) * t1076 - t1300 + t1518;
t675 = -t1212 * t748 + t1216 * t741 - t1532;
t704 = -t1211 * t780 - (-pkin(3) - t1403) * t1001 + t1516;
t1245 = t1213 * t675 + t1217 * t704 + t1556;
t724 = -t750 - t1531;
t684 = t1216 * t724 + t1406 * t1495 - t1553;
t696 = t1543 - t751;
t1244 = t1213 * t684 + t1217 * t696 + t1573;
t788 = t816 - t1505;
t820 = t1398 - t1503;
t711 = -t1212 * t788 + t1216 * t820 - t1533;
t752 = t1389 + t1517;
t1243 = t1213 * t711 + t1217 * t752 + t1555;
t789 = t817 - t1535;
t826 = t1389 - t1534;
t712 = -t1212 * t789 + t1216 * t826 + t1532;
t753 = -t1398 + t1582;
t1242 = t1213 * t712 + t1217 * t753 - t1556;
t1033 = t1120 * t1212 + t1437;
t896 = -pkin(2) * t1033 + t964;
t944 = -pkin(9) * t1033 + t1366;
t947 = t1034 * t1217 - t1069 * t1213;
t1241 = pkin(8) * t947 + t1213 * t944 + t1217 * t896;
t1045 = t1126 * t1216 + t1361;
t900 = -pkin(2) * t1045 + t965;
t948 = -pkin(9) * t1045 + t1365;
t949 = t1046 * t1217 + t1071 * t1213;
t1240 = pkin(8) * t949 + t1213 * t948 + t1217 * t900;
t1089 = t1148 * t1213 + t1149 * t1217;
t1239 = pkin(8) * t1089 + t1044;
t1003 = -t1068 * t1212 + t1073 * t1216;
t815 = -pkin(9) * t1003 - t863;
t927 = t1005 * t1217 - t1094 * t1213;
t1238 = pkin(8) * t927 - t1003 * t1407 + t1213 * t815;
t827 = t1059 * t1213 + t1217 * t864;
t1236 = pkin(8) * t827 + t1313 * t863;
t1205 = t1209 * t1206;
t1193 = qJDD(1) * t1214 + t1218 * t1219;
t1184 = t1335 * t1349;
t1183 = (t1207 - t1208) * t1349;
t1179 = -pkin(7) * t1193 + g(3) * t1218;
t1152 = t1335 * t1330;
t1146 = (t1217 * t1318 + t1334) * t1209;
t1143 = t1178 * t1217 - t1207 * t1330;
t1142 = (-t1208 * t1382 + t1213 * t1254) * t1209;
t1128 = t1181 * t1217 - t1351;
t1127 = -t1180 * t1213 + t1352;
t1119 = (t1147 * t1210 + t1205 * t1341) * t1213;
t1118 = -t1205 * t1321 + (-t1340 * t1380 + t1333) * t1209 * t1345;
t1091 = t1307 + t1304;
t1090 = -t1147 * t1213 + t1150 * t1217;
t1080 = t1209 * t1150 + t1210 * t1260;
t1079 = -t1209 * t1149 + t1210 * t1259;
t1078 = -t1209 * t1148 + t1210 * t1261;
t1077 = -t1210 * t1150 + t1209 * t1260;
t1067 = -t1209 * t1146 + t1210 * t1262;
t1066 = t1210 * t1146 + t1209 * t1262;
t1064 = t1212 * t1117 - t1304;
t1062 = t1216 * t1116 - t1307;
t1061 = t1217 * t1092 + t1213 * t1232;
t1058 = -t1209 * t1183 + t1210 * t1264;
t1057 = t1209 * t1184 + t1210 * t1263;
t1056 = -t1210 * t1184 + t1209 * t1263;
t1048 = t1144 * t1212 - t1360;
t1047 = t1145 * t1216 + t1440;
t1024 = -t1080 * t1214 + t1129 * t1218;
t1023 = t1080 * t1218 + t1129 * t1214;
t1014 = t1065 * t1217 + t1325;
t1013 = t1063 * t1217 - t1325;
t1012 = -t1067 * t1214 + t1123 * t1218;
t1011 = t1067 * t1218 + t1123 * t1214;
t1010 = t1209 * t1153 + t1210 * t1265;
t1009 = -t1210 * t1153 + t1209 * t1265;
t1008 = -t1209 * t1091 + t1210 * t1452;
t1007 = -t1057 * t1214 + t1089 * t1218;
t1006 = t1057 * t1218 + t1089 * t1214;
t1002 = t1069 * t1212 + t1071 * t1216;
t978 = t1030 * t1212 - t1111;
t967 = t1050 * t1217 - t1068 * t1213;
t966 = t1049 * t1217 - t1073 * t1213;
t950 = -t1343 + (-t1077 * t1209 - t1080 * t1210) * pkin(8);
t946 = -t1342 + (-t1066 * t1209 - t1067 * t1210) * pkin(8);
t945 = -pkin(1) * t1077 + t1209 * t1121 + t1210 * t1301;
t937 = t1004 * t1217 - t1125 * t1213;
t936 = -pkin(1) * t1066 + t1209 * t1122 + t1210 * t1302;
t929 = -t1209 * t1064 + t1210 * t1255;
t928 = -t1209 * t1062 + t1210 * t1256;
t926 = pkin(8) * t1044 * t1210 - pkin(1) * t1009;
t925 = -t1010 * t1214 + t1044 * t1218;
t924 = t1010 * t1218 + t1044 * t1214;
t908 = -pkin(1) * t1056 + t1210 * t1239;
t905 = -pkin(2) * t1071 + pkin(9) * t1046 + t1366;
t903 = -t1209 * t1048 + t1210 * t1266;
t902 = -t1209 * t1047 + t1210 * t1267;
t901 = (-t1009 * t1209 - t1010 * t1210) * pkin(8);
t899 = pkin(2) * t1069 + pkin(9) * t1034 - t1365;
t898 = (-t1056 * t1209 - t1057 * t1210) * pkin(8) - t1265;
t895 = -t1209 * t1045 + t1210 * t1268;
t894 = t1210 * t1045 + t1209 * t1268;
t893 = t1217 * t981 - t1439;
t890 = -t1209 * t1033 + t1210 * t1269;
t889 = t1210 * t1033 + t1209 * t1269;
t865 = -t1216 * t997 - t1501;
t856 = -t1209 * t1002 + t1210 * t1271;
t849 = -t1209 * t1003 + t1210 * t1270;
t848 = t1210 * t1003 + t1209 * t1270;
t843 = t1212 * t886 - t1479;
t829 = -pkin(2) * t1059 + pkin(9) * t864;
t825 = -t1209 * t978 + t1210 * t1274;
t822 = -t1214 * t895 + t1218 * t949;
t821 = t1214 * t949 + t1218 * t895;
t819 = -t1214 * t890 + t1218 * t947;
t818 = t1214 * t947 + t1218 * t890;
t809 = t1217 * t871 + t1499;
t805 = pkin(2) * t1094 + pkin(9) * t1005 + t864;
t801 = -t1214 * t849 + t1218 * t927;
t800 = t1214 * t927 + t1218 * t849;
t797 = t1210 * t1277 - t1463;
t792 = t1210 * t1278 - t1462;
t786 = -t1213 * t880 + t1217 * t846;
t778 = -t1209 * t863 + t1210 * t1273;
t777 = t1209 * t1273 + t1210 * t863;
t769 = -t1209 * t865 + t1210 * t1284;
t749 = -t1213 * t900 + t1217 * t948 + (-t1209 * t894 - t1210 * t895) * pkin(8);
t746 = -t1213 * t896 + t1217 * t944 + (-t1209 * t889 - t1210 * t890) * pkin(8);
t743 = -t1209 * t843 + t1210 * t1292;
t739 = -pkin(1) * t894 - t1209 * t905 + t1210 * t1240;
t737 = -t1209 * t831 + t1210 * t1295;
t734 = t1209 * t1295 + t1210 * t831;
t731 = -t1214 * t778 + t1218 * t827;
t730 = t1214 * t827 + t1218 * t778;
t729 = -pkin(1) * t889 - t1209 * t899 + t1210 * t1241;
t720 = t1003 * t1408 + t1217 * t815 + (-t1209 * t848 - t1210 * t849) * pkin(8);
t702 = t1212 * t826 + t1216 * t789 - t1509;
t700 = t1212 * t820 + t1216 * t788 + t1515;
t698 = -pkin(1) * t848 - t1209 * t805 + t1210 * t1238;
t691 = -t1214 * t737 + t1218 * t783;
t688 = t1214 * t783 + t1218 * t737;
t681 = (-pkin(9) * t1217 + t1408) * t863 + (-t1209 * t777 - t1210 * t778) * pkin(8);
t679 = -pkin(1) * t777 - t1209 * t829 + t1210 * t1236;
t678 = t1212 * t724 + t1331 * t1495 + t1554;
t668 = t1212 * t741 + t1216 * t748 + t1509;
t667 = t1212 * t740 + t1216 * t747 - t1515;
t663 = -pkin(2) * t879 + pkin(9) * t834 + t1212 * t693 + t1216 * t798;
t660 = -t1209 * t727 + t1210 * t1297;
t659 = t1209 * t1297 + t1210 * t727;
t656 = t1212 * t699 + t1216 * t721 + t1509;
t655 = t1212 * t701 + t1216 * t719 + t1515;
t653 = pkin(9) * t728 + (-pkin(10) * t1212 + t1331) * t750;
t652 = -t1213 * t753 + t1217 * t712 + t1558;
t651 = -pkin(2) * t1495 + t1212 * t666 + t1216 * t775 + t1554;
t650 = -t1213 * t752 + t1217 * t711 - t1559;
t646 = -t1209 * t685 + t1210 * t1298;
t645 = t1209 * t1298 + t1210 * t685;
t644 = -t1209 * t702 + t1210 * t1242 + t1574;
t643 = -t1214 * t660 + t1218 * t682;
t642 = t1214 * t682 + t1218 * t660;
t641 = -t1209 * t700 + t1210 * t1243 - t1575;
t640 = -t1213 * t704 + t1217 * t675 - t1558;
t639 = -t1213 * t703 + t1217 * t673 + t1559;
t638 = -t1213 * t696 + t1217 * t684 + t1578;
t635 = -t1209 * t669 + t1210 * t1299;
t634 = t1209 * t1299 + t1210 * t669;
t633 = -t1213 * t683 + t1217 * t657 - t1559;
t632 = -t1213 * t677 + t1217 * t665 + (-t1209 * t734 - t1210 * t737) * pkin(8);
t631 = -t1213 * t680 + t1217 * t658 - t1558;
t630 = -t1209 * t678 + t1210 * t1244 - t1591;
t629 = -t1209 * t668 + t1210 * t1245 - t1574;
t628 = -t1209 * t667 + t1210 * t1246 + t1575;
t627 = -pkin(2) * t722 + pkin(9) * t686 + t1212 * t674 + t1216 * t671;
t626 = -t1214 * t646 + t1218 * t661;
t625 = t1214 * t661 + t1218 * t646;
t624 = -t1213 * t662 + t1217 * t654 + t1578;
t622 = -pkin(1) * t734 - t1209 * t663 + t1210 * t1247;
t621 = -t1209 * t655 + t1210 * t1250 - t1575;
t620 = -t1209 * t656 + t1210 * t1249 - t1574;
t619 = -t1214 * t635 + t1218 * t649;
t618 = t1214 * t649 + t1218 * t635;
t617 = -t1213 * t676 + t1217 * t664 + (-t1209 * t659 - t1210 * t660) * pkin(8);
t616 = -t1209 * t651 + t1210 * t1251 - t1591;
t614 = -pkin(2) * t694 + pkin(9) * t670 + t1212 * t637 + t1216 * t648;
t613 = -pkin(1) * t659 - t1209 * t653 + t1210 * t1248;
t612 = -t1213 * t647 + t1217 * t636 + (-t1209 * t645 - t1210 * t646) * pkin(8);
t611 = -pkin(1) * t645 - t1209 * t627 + t1210 * t1252;
t610 = -t1213 * t623 + t1217 * t615 + (-t1209 * t634 - t1210 * t635) * pkin(8);
t609 = -pkin(1) * t634 - t1209 * t614 + t1210 * t1253;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1193, -t1194, 0, t1158, 0, 0, 0, 0, 0, 0, t1024, t1012, t1007, t925, 0, 0, 0, 0, 0, 0, t819, t822, t801, t731, 0, 0, 0, 0, 0, 0, -t710, t717, t1580, t643, 0, 0, 0, 0, 0, 0, t691, t710, -t717, t626, 0, 0, 0, 0, 0, 0, t1580, -t717, -t710, t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1194, -t1193, 0, t1157, 0, 0, 0, 0, 0, 0, t1023, t1011, t1006, t924, 0, 0, 0, 0, 0, 0, t818, t821, t800, t730, 0, 0, 0, 0, 0, 0, t1561, -t1560, t1579, t642, 0, 0, 0, 0, 0, 0, t688, -t1561, t1560, t625, 0, 0, 0, 0, 0, 0, t1579, t1560, t1561, t618; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1077, t1066, t1056, t1009, 0, 0, 0, 0, 0, 0, t889, t894, t848, t777, 0, 0, 0, 0, 0, 0, t1541, -t1542, t1565, t659, 0, 0, 0, 0, 0, 0, t734, -t1541, t1542, t645, 0, 0, 0, 0, 0, 0, t1565, t1542, t1541, t634; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1194, 0, -t1193, 0, t1312, -t1179, -t1157, -pkin(7) * t1157, -t1119 * t1214 + t1143 * t1218, -t1058 * t1214 + t1090 * t1218, -t1078 * t1214 + t1127 * t1218, -t1118 * t1214 + t1142 * t1218, -t1079 * t1214 + t1128 * t1218, t1218 * t1152 + t1214 * t1258, -pkin(7) * t1023 - t1214 * t945 + t1218 * t950, -pkin(7) * t1011 - t1214 * t936 + t1218 * t946, -pkin(7) * t1006 - t1214 * t908 + t1218 * t898, -pkin(7) * t924 - t1214 * t926 + t1218 * t901, t1014 * t1218 - t1214 * t929, -t1214 * t856 + t1218 * t937, -t1214 * t902 + t1218 * t966, t1013 * t1218 - t1214 * t928, -t1214 * t903 + t1218 * t967, -t1008 * t1214 + t1061 * t1218, -pkin(7) * t818 - t1214 * t729 + t1218 * t746, -pkin(7) * t821 - t1214 * t739 + t1218 * t749, -pkin(7) * t800 - t1214 * t698 + t1218 * t720, -pkin(7) * t730 - t1214 * t679 + t1218 * t681, t1443, -t1214 * t743 + t1218 * t786, -t1214 * t769 + t1218 * t809, -t1214 * t792 + t1475, -t1615, t1490, -t1214 * t641 + t1218 * t650 - t1589, -t1214 * t644 + t1218 * t652 + t1590, -t1214 * t630 + t1218 * t638 - t1601, -pkin(7) * t642 - t1214 * t613 + t1218 * t617, -t1214 * t825 + t1218 * t893, t1617, t1615, -t1214 * t797 + t1474, t1610, t1445, -pkin(7) * t688 - t1214 * t622 + t1218 * t632, -t1214 * t628 + t1218 * t639 + t1589, -t1214 * t629 + t1218 * t640 - t1590, -pkin(7) * t625 - t1214 * t611 + t1218 * t612, t1490, t1615, -t1617, t1445, -t1610, t1443, -t1214 * t616 + t1218 * t624 - t1601, -t1214 * t620 + t1218 * t631 - t1590, -t1214 * t621 + t1218 * t633 - t1589, -pkin(7) * t618 - t1214 * t609 + t1218 * t610; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1193, 0, t1194, 0, t1179, t1312, t1158, pkin(7) * t1158, t1119 * t1218 + t1143 * t1214, t1058 * t1218 + t1090 * t1214, t1078 * t1218 + t1127 * t1214, t1118 * t1218 + t1142 * t1214, t1079 * t1218 + t1128 * t1214, t1214 * t1152 - t1218 * t1258, pkin(7) * t1024 + t1214 * t950 + t1218 * t945, pkin(7) * t1012 + t1214 * t946 + t1218 * t936, pkin(7) * t1007 + t1214 * t898 + t1218 * t908, pkin(7) * t925 + t1214 * t901 + t1218 * t926, t1014 * t1214 + t1218 * t929, t1214 * t937 + t1218 * t856, t1214 * t966 + t1218 * t902, t1013 * t1214 + t1218 * t928, t1214 * t967 + t1218 * t903, t1008 * t1218 + t1061 * t1214, pkin(7) * t819 + t1214 * t746 + t1218 * t729, pkin(7) * t822 + t1214 * t749 + t1218 * t739, pkin(7) * t801 + t1214 * t720 + t1218 * t698, pkin(7) * t731 + t1214 * t681 + t1218 * t679, t1444, t1214 * t786 + t1218 * t743, t1214 * t809 + t1218 * t769, t1218 * t792 + t1478, t1614, t1487, t1214 * t650 + t1218 * t641 - t1587, t1214 * t652 + t1218 * t644 + t1588, t1214 * t638 + t1218 * t630 + t1600, pkin(7) * t643 + t1214 * t617 + t1218 * t613, t1214 * t893 + t1218 * t825, -t1616, -t1614, t1218 * t797 + t1477, -t1609, t1446, pkin(7) * t691 + t1214 * t632 + t1218 * t622, t1214 * t639 + t1218 * t628 + t1587, t1214 * t640 + t1218 * t629 - t1588, pkin(7) * t626 + t1214 * t612 + t1218 * t611, t1487, -t1614, t1616, t1446, t1609, t1444, t1214 * t624 + t1218 * t616 + t1600, t1214 * t631 + t1218 * t620 - t1588, t1214 * t633 + t1218 * t621 - t1587, pkin(7) * t619 + t1214 * t610 + t1218 * t609; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1196, t1197, 0, 0, (t1178 * t1209 + t1272 * t1442) * t1213, t1210 * t1183 + t1209 * t1264, t1210 * t1148 + t1209 * t1261, (-t1213 * t1272 - t1254) * t1442, t1210 * t1149 + t1209 * t1259, t1210 * t1314, pkin(1) * t1080 - t1210 * t1121 + t1209 * t1301, pkin(1) * t1067 - t1210 * t1122 + t1209 * t1302, pkin(1) * t1057 + t1209 * t1239, pkin(1) * t1010 + t1044 * t1402, t1210 * t1064 + t1209 * t1255, t1210 * t1002 + t1209 * t1271, t1210 * t1047 + t1209 * t1267, t1210 * t1062 + t1209 * t1256, t1210 * t1048 + t1209 * t1266, t1210 * t1091 + t1209 * t1452, pkin(1) * t890 + t1209 * t1241 + t1210 * t899, pkin(1) * t895 + t1209 * t1240 + t1210 * t905, pkin(1) * t849 + t1209 * t1238 + t1210 * t805, pkin(1) * t778 + t1209 * t1236 + t1210 * t829, t1416, t1209 * t1292 + t1210 * t843, t1209 * t1284 + t1210 * t865, t1209 * t1278 + t1459, t1602, t1467, t1209 * t1243 + t1210 * t700 + t1577, t1209 * t1242 + t1210 * t702 - t1576, t1209 * t1244 + t1210 * t678 + t1592, pkin(1) * t660 + t1209 * t1248 + t1210 * t653, t1209 * t1274 + t1210 * t978, -t1608, -t1602, t1209 * t1277 + t1460, -t1593, t1415, pkin(1) * t737 + t1209 * t1247 + t1210 * t663, t1209 * t1246 + t1210 * t667 - t1577, t1209 * t1245 + t1210 * t668 + t1576, pkin(1) * t646 + t1209 * t1252 + t1210 * t627, t1467, -t1602, t1608, t1415, t1593, t1416, t1209 * t1251 + t1210 * t651 + t1592, t1209 * t1249 + t1210 * t656 + t1576, t1209 * t1250 + t1210 * t655 + t1577, pkin(1) * t635 + t1209 * t1253 + t1210 * t614;];
tauB_reg  = t1;
