% Calculate vector of inverse dynamics joint torques for
% S6RRRRPP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPP9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPP9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP9_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRRRPP9_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:50:24
% EndTime: 2019-03-09 21:50:54
% DurationCPUTime: 24.46s
% Computational Cost: add. (13980->910), mult. (33902->1114), div. (0->0), fcn. (26718->10), ass. (0->337)
t827 = cos(qJ(2));
t820 = sin(pkin(6));
t972 = qJD(1) * t820;
t799 = t827 * t972;
t885 = t799 - qJD(3);
t824 = sin(qJ(2));
t1026 = cos(pkin(6));
t924 = t1026 * qJD(1);
t901 = pkin(1) * t924;
t740 = pkin(8) * t799 + t824 * t901;
t823 = sin(qJ(3));
t826 = cos(qJ(3));
t1056 = t740 + t885 * (pkin(3) * t823 - pkin(10) * t826);
t881 = t924 + qJD(2);
t860 = qJD(3) * t881;
t913 = t1026 * qJDD(1);
t876 = t913 + qJDD(2);
t849 = t823 * t860 - t826 * t876;
t958 = qJDD(1) * t824;
t927 = t823 * t958;
t970 = qJD(2) * t827;
t939 = t823 * t970;
t967 = qJD(3) * t826;
t616 = (qJD(1) * (t824 * t967 + t939) + t927) * t820 + t849;
t610 = qJDD(4) + t616;
t941 = t824 * t972;
t737 = -pkin(8) * t941 + t827 * t901;
t894 = pkin(2) * t824 - pkin(9) * t827;
t738 = t894 * t972;
t983 = t737 * t826 + t738 * t823;
t630 = pkin(10) * t941 + t983;
t1054 = -pkin(3) * t826 - pkin(2);
t772 = -pkin(10) * t823 + t1054;
t825 = cos(qJ(4));
t996 = t825 * t826;
t810 = pkin(9) * t996;
t822 = sin(qJ(4));
t965 = qJD(4) * t822;
t1045 = qJD(4) * t810 + t1056 * t825 - t630 * t822 + t772 * t965;
t995 = t825 * t827;
t714 = (t822 * t824 + t826 * t995) * t820;
t699 = qJD(1) * t714;
t934 = t823 * t965;
t1055 = t699 + t934;
t1023 = qJ(5) * t822;
t1053 = pkin(3) + t1023;
t964 = qJD(4) * t825;
t1051 = t1056 * t822 + t825 * t630 - t772 * t964;
t969 = qJD(3) * t823;
t1028 = pkin(4) + qJ(6);
t933 = t1028 * t610;
t710 = t823 * t941 - t826 * t881;
t702 = qJD(4) + t710;
t688 = -pkin(2) * t881 - t737;
t712 = t823 * t881 + t826 * t941;
t599 = pkin(3) * t710 - pkin(10) * t712 + t688;
t689 = pkin(9) * t881 + t740;
t878 = -pkin(2) * t827 - pkin(9) * t824 - pkin(1);
t700 = t878 * t972;
t615 = t689 * t826 + t700 * t823;
t603 = -pkin(10) * t885 + t615;
t563 = -t599 * t825 + t603 * t822;
t658 = t712 * t825 - t822 * t885;
t872 = pkin(5) * t658 + t563;
t963 = qJD(5) + t872;
t1035 = sin(qJ(1));
t1036 = cos(qJ(1));
t897 = t1026 * t1036;
t752 = t1035 * t827 + t824 * t897;
t943 = t820 * t1036;
t679 = t752 * t826 - t823 * t943;
t751 = t1035 * t824 - t827 * t897;
t631 = t679 * t822 - t751 * t825;
t632 = t679 * t825 + t751 * t822;
t903 = t823 * t799;
t1050 = qJ(5) * t903 + qJD(5) * t826 + t1051;
t606 = t610 * qJ(5);
t694 = t702 * qJD(5);
t1049 = -t606 - t694;
t1000 = t820 * t827;
t1001 = t820 * t824;
t749 = t1001 * t823 - t1026 * t826;
t938 = t826 * t970;
t675 = -qJD(3) * t749 + t820 * t938;
t1047 = -qJD(4) * t1000 + t675;
t944 = pkin(1) * t1026;
t873 = -pkin(8) * t1001 + t827 * t944;
t859 = t823 * t876;
t836 = t826 * t860 + t859;
t960 = qJD(1) * qJD(2);
t931 = t824 * t960;
t900 = t820 * t931;
t956 = qJDD(1) * t827;
t798 = t820 * t956;
t954 = qJDD(3) - t798;
t857 = t900 + t954;
t832 = t822 * t836 - t825 * t857;
t957 = qJDD(1) * t826;
t926 = t824 * t957;
t838 = (t926 + (-t824 * t969 + t938) * qJD(1)) * t820;
t966 = qJD(4) * t658;
t575 = t822 * t838 + t832 + t966;
t830 = t838 + t836;
t1046 = (qJDD(2) + 0.2e1 * t913) * t820;
t902 = t826 * t799;
t1044 = t902 - t967;
t715 = t823 * t737;
t629 = -pkin(3) * t941 - t738 * t826 + t715;
t937 = t822 * t967;
t1043 = -t629 + pkin(9) * t967 + (t823 * t964 + t937) * pkin(4) + t1055 * qJ(5);
t1008 = t710 * t822;
t1042 = -qJD(5) * t822 - t615 + (t1008 + t965) * pkin(4);
t1041 = -pkin(5) * t575 + qJDD(6);
t656 = t712 * t822 + t825 * t885;
t1039 = t656 ^ 2;
t655 = t658 ^ 2;
t701 = t702 ^ 2;
t1038 = 0.2e1 * t606;
t828 = qJD(1) ^ 2;
t1037 = pkin(5) + pkin(10);
t1033 = pkin(4) * t610;
t910 = qJD(4) * t885;
t574 = t712 * t965 - t822 * t857 + (-t830 + t910) * t825;
t1032 = pkin(5) * t574;
t1030 = pkin(5) * t656;
t1029 = pkin(10) * t610;
t1027 = pkin(10) * qJD(4);
t1025 = qJ(5) * t575;
t1024 = qJ(5) * t656;
t1022 = qJ(5) * t825;
t750 = t1001 * t826 + t1026 * t823;
t676 = t750 * t822 + t820 * t995;
t1021 = qJ(6) * t676;
t543 = -t1028 * t702 + t963;
t1020 = t543 * t702;
t564 = t599 * t822 + t603 * t825;
t556 = -qJ(5) * t702 - t564;
t1019 = t556 * t702;
t1018 = t564 * t702;
t1017 = t574 * t822;
t1016 = t610 * t822;
t1015 = t610 * t825;
t1014 = t656 * t658;
t1013 = t656 * t702;
t1012 = t658 * t702;
t917 = -t752 * t823 - t826 * t943;
t1011 = t917 * t825;
t896 = t1026 * t1035;
t754 = t1036 * t827 - t824 * t896;
t942 = t820 * t1035;
t682 = t754 * t823 - t826 * t942;
t1010 = t682 * t825;
t1009 = t702 * t822;
t914 = t702 * t825;
t1007 = t749 * t825;
t1005 = t751 * t823;
t753 = t1036 * t824 + t827 * t896;
t1003 = t753 * t823;
t817 = t820 ^ 2;
t1002 = t817 * t828;
t999 = t822 * t823;
t998 = t822 * t826;
t997 = t823 * t825;
t945 = -pkin(9) * t822 - pkin(4);
t994 = t1028 * t903 + qJD(6) * t826 + (-qJ(6) + t945) * t969 + t1045 + (qJD(3) * t996 - t1055) * pkin(5);
t698 = t822 * t902 - t825 * t941;
t809 = pkin(9) * t998;
t993 = pkin(5) * t698 + (-pkin(5) * t997 - t809) * qJD(4) + (-pkin(5) * t998 + (-pkin(9) * t825 + qJ(5)) * t823) * qJD(3) - t1050;
t884 = -qJ(6) * t822 + t1022;
t992 = -t1028 * t698 - t884 * t967 + (qJD(6) * t822 + (qJ(6) * qJD(4) - qJD(5)) * t825) * t823 + t1043;
t614 = -t689 * t823 + t826 * t700;
t645 = pkin(3) * t712 + pkin(10) * t710;
t991 = t614 * t825 + t645 * t822;
t968 = qJD(3) * t825;
t990 = -qJ(5) * t969 + (t823 * t968 + t826 * t965) * pkin(9) + t1050;
t728 = -pkin(2) * t1026 - t873;
t743 = t749 * pkin(3);
t621 = -pkin(10) * t750 + t728 + t743;
t976 = pkin(8) * t1000 + t824 * t944;
t729 = pkin(9) * t1026 + t976;
t977 = -pkin(2) * t1000 - pkin(9) * t1001;
t730 = -pkin(1) * t820 + t977;
t984 = t729 * t826 + t730 * t823;
t623 = -pkin(10) * t1000 + t984;
t989 = t621 * t822 + t623 * t825;
t987 = pkin(4) * t903 + t945 * t969 + t1045;
t986 = -pkin(4) * t698 + (-qJ(5) * t967 - qJD(5) * t823) * t825 + t1043;
t985 = -qJD(6) * t825 - t702 * t884 + t1042;
t982 = -qJ(5) * t964 - t1022 * t710 + t1042;
t569 = -qJ(5) * t712 - t991;
t979 = -pkin(5) * t1008 - t1037 * t965 + t569;
t604 = t822 * t614;
t779 = t1037 * t825;
t978 = qJD(4) * t779 - t604 - (-pkin(5) * t710 - t645) * t825 + t1028 * t712;
t975 = pkin(4) * t999 + pkin(9) * t823;
t974 = t772 * t822 + t810;
t818 = t824 ^ 2;
t973 = -t827 ^ 2 + t818;
t971 = qJD(2) * t824;
t962 = qJD(5) + t563;
t547 = t564 - t1030;
t961 = -qJD(6) - t547;
t959 = qJD(1) * qJD(3);
t803 = pkin(3) * t1000;
t953 = t827 * t1002;
t952 = t823 * t1000;
t951 = t822 * t1000;
t950 = pkin(4) * t1011 + t1053 * t917;
t949 = -pkin(4) * t1010 - t1053 * t682;
t947 = -pkin(4) * t1007 - t1023 * t749 - t743;
t877 = qJD(2) * t901;
t898 = pkin(1) * t913;
t946 = pkin(8) * t798 + t824 * t898 + t827 * t877;
t940 = t820 * t971;
t936 = t702 * t965;
t932 = 0.2e1 * pkin(1) * t817;
t930 = t827 * t960;
t929 = t824 * t959;
t928 = t820 * t958;
t923 = -pkin(4) * t631 + qJ(5) * t632;
t683 = t754 * t826 + t823 * t942;
t635 = t683 * t822 - t753 * t825;
t636 = t683 * t825 + t753 * t822;
t922 = -pkin(4) * t635 + qJ(5) * t636;
t677 = t750 * t825 - t951;
t921 = -pkin(4) * t676 + qJ(5) * t677;
t920 = t621 * t825 - t623 * t822;
t918 = -t729 * t823 + t730 * t826;
t916 = t772 * t825 - t809;
t915 = t827 * t885;
t911 = qJD(3) * t885;
t852 = -pkin(8) * t900 + t946;
t643 = pkin(9) * t876 + t852;
t871 = qJD(2) * t894;
t646 = (qJD(1) * t871 + qJDD(1) * t878) * t820;
t867 = -t643 * t826 - t646 * t823 + t689 * t969 - t700 * t967;
t553 = pkin(10) * t857 - t867;
t899 = t820 * t930;
t906 = t824 * t877 - t827 * t898 + (t899 + t928) * pkin(8);
t644 = -pkin(2) * t876 + t906;
t559 = pkin(3) * t616 - pkin(10) * t830 + t644;
t909 = -t553 * t825 - t559 * t822 - t599 * t964 + t603 * t965;
t908 = t553 * t822 - t559 * t825 + t599 * t965 + t603 * t964;
t907 = t643 * t823 - t646 * t826 + t689 * t967 + t700 * t969;
t895 = t820 * t828 * t1026;
t892 = -g(1) * t631 + g(2) * t635;
t891 = g(1) * t632 - g(2) * t636;
t890 = g(1) * t917 + g(2) * t682;
t571 = -qJ(5) * t749 - t989;
t692 = qJ(5) * t826 - t974;
t622 = t803 - t918;
t888 = -t698 + t937;
t887 = t825 * t967 - t699;
t555 = -pkin(4) * t702 + t962;
t883 = t555 * t825 + t556 * t822;
t880 = 0.2e1 * t924 + qJD(2);
t879 = -qJDD(5) - t908;
t739 = t820 * t871;
t741 = t873 * qJD(2);
t866 = -t729 * t969 + t730 * t967 + t739 * t823 + t741 * t826;
t584 = pkin(10) * t940 + t866;
t674 = qJD(3) * t750 + t820 * t939;
t742 = t976 * qJD(2);
t589 = pkin(3) * t674 - pkin(10) * t675 + t742;
t875 = -t584 * t822 + t589 * t825 - t621 * t965 - t623 * t964;
t874 = -t729 * t967 - t730 * t969 + t739 * t826 - t741 * t823;
t532 = t909 + t1049;
t602 = pkin(3) * t885 - t614;
t870 = t602 * t702 - t1029;
t847 = -t658 * qJ(5) + t602;
t562 = t656 * pkin(4) + t847;
t869 = -t562 * t702 + t1029;
t868 = t930 + t958;
t865 = t584 * t825 + t589 * t822 + t621 * t964 - t623 * t965;
t650 = -t751 * t998 - t752 * t825;
t652 = -t753 * t998 - t754 * t825;
t713 = -t1001 * t825 + t826 * t951;
t864 = g(1) * t652 + g(2) * t650 + g(3) * t713;
t651 = -t751 * t996 + t752 * t822;
t653 = -t753 * t996 + t754 * t822;
t863 = -g(1) * t653 - g(2) * t651 - g(3) * t714;
t862 = g(1) * t682 - g(2) * t917 + g(3) * t749;
t861 = -g(1) * t683 - g(2) * t679 - g(3) * t750;
t858 = t876 * MDP(8);
t855 = pkin(4) * t714 + pkin(10) * t952 + qJ(5) * t713 + t803 * t826 - t977;
t854 = g(1) * t753 + g(2) * t751 - g(3) * t1000;
t554 = -pkin(3) * t857 + t907;
t833 = qJ(5) * t574 - qJD(5) * t658 + t554;
t531 = qJD(6) * t656 + t1028 * t575 + t833;
t853 = -t531 + t862;
t577 = t622 - t921;
t851 = t651 * pkin(4) + pkin(9) * t752 - pkin(10) * t1005 + qJ(5) * t650 + t1054 * t751;
t850 = pkin(4) * t653 + pkin(9) * t754 - pkin(10) * t1003 + qJ(5) * t652 + t1054 * t753;
t548 = -t574 + t1013;
t848 = pkin(1) * t1036 + pkin(2) * t754 + pkin(3) * t683 + pkin(4) * t636 + pkin(8) * t942 + pkin(9) * t753 + qJ(5) * t635;
t585 = -pkin(3) * t940 - t874;
t846 = t1027 * t702 - t862;
t844 = g(1) * t635 + g(2) * t631 + g(3) * t676 - t908;
t843 = g(1) * t636 + g(2) * t632 + g(3) * t677 + t909;
t536 = pkin(4) * t575 + t833;
t842 = t536 + t846;
t540 = -qJ(5) * t674 - qJD(5) * t749 - t865;
t841 = -qJDD(5) + t844;
t840 = -pkin(1) * t1035 - pkin(2) * t752 - pkin(3) * t679 - pkin(4) * t632 + pkin(8) * t943 - pkin(9) * t751 - qJ(5) * t631;
t839 = t562 * t658 - t841;
t595 = t1047 * t825 - t750 * t965 + t822 * t940;
t837 = -qJ(5) * t595 - qJD(5) * t677 + t585;
t545 = t1028 * t656 + t847;
t835 = t545 * t658 - t1032 - t841;
t834 = -t545 * t656 + t1041 - t843;
t815 = t826 * pkin(4);
t778 = t1037 * t822;
t767 = -pkin(4) * t825 - t1053;
t756 = -t1028 * t825 - t1053;
t731 = -qJ(5) * t997 + t975;
t693 = t815 - t916;
t690 = -t823 * t884 + t975;
t665 = -pkin(5) * t999 - t692;
t660 = qJ(6) * t826 + t809 + t815 + (pkin(5) * t823 - t772) * t825;
t594 = t1047 * t822 + t750 * t964 - t825 * t940;
t587 = pkin(4) * t658 + t1024;
t576 = t1028 * t658 + t1024;
t572 = -pkin(4) * t749 - t920;
t570 = -pkin(4) * t712 - t645 * t825 + t604;
t566 = t577 + t1021;
t560 = -pkin(5) * t676 - t571;
t552 = pkin(5) * t677 - t1028 * t749 - t920;
t544 = qJD(6) - t556 - t1030;
t542 = pkin(4) * t594 + t837;
t541 = -pkin(4) * t674 - t875;
t539 = qJD(6) * t676 + t1028 * t594 + t837;
t538 = -pkin(5) * t594 - t540;
t537 = pkin(5) * t595 - qJD(6) * t749 - t1028 * t674 - t875;
t533 = -t879 - t1033;
t530 = -t532 + t1041;
t529 = -qJD(6) * t702 - t1032 - t879 - t933;
t1 = [((qJDD(1) * t818 + 0.2e1 * t824 * t930) * MDP(4) + 0.2e1 * (t824 * t956 - t960 * t973) * MDP(5)) * t817 + (t532 * t676 + t533 * t677 + t540 * t656 + t541 * t658 + t555 * t595 + t556 * t594 + t571 * t575 - t572 * t574 - t890) * MDP(25) + (t529 * t677 - t530 * t676 + t537 * t658 - t538 * t656 + t543 * t595 - t544 * t594 - t552 * t574 - t560 * t575 - t890) * MDP(29) + (t533 * t749 - t536 * t676 + t541 * t702 - t542 * t656 + t555 * t674 - t562 * t594 + t572 * t610 - t575 * t577 - t891) * MDP(26) + (-t529 * t749 + t531 * t676 - t537 * t702 + t539 * t656 - t543 * t674 + t545 * t594 - t552 * t610 + t566 * t575 + t891) * MDP(31) + (-t532 * t749 - t536 * t677 - t540 * t702 - t542 * t658 - t556 * t674 - t562 * t595 - t571 * t610 + t574 * t577 - t892) * MDP(27) + (t530 * t749 - t531 * t677 + t538 * t702 - t539 * t658 + t544 * t674 - t545 * t595 + t560 * t610 + t566 * t574 - t892) * MDP(30) + (g(1) * t1035 - g(2) * t1036) * MDP(2) + (g(1) * t1036 + g(2) * t1035) * MDP(3) + (-g(1) * t751 + g(2) * t753 - t1026 * t852 - t741 * t881 - t868 * t932 - t876 * t976) * MDP(10) + (-t742 * t881 + t873 * t876 - t906 * t1026 + g(1) * t752 - g(2) * t754 + (-t931 + t956) * t932) * MDP(9) + t1026 * t858 + (-t675 * t885 + t750 * t954 + ((-t859 + (-t860 - t899) * t826) * t827 + (-(-t823 * t959 + t957) * t1000 + (qJD(1) * t750 + t712) * qJD(2)) * t824) * t820) * MDP(13) + (-t1000 * t867 - t615 * t940 + t644 * t750 + t688 * t675 + t742 * t712 + t728 * t830 - t857 * t984 + t866 * t885 + t890) * MDP(17) + (t1046 * t827 - t880 * t940) * MDP(7) + (t712 * t675 + t750 * t830) * MDP(11) + (-t750 * t616 - t712 * t674 - t675 * t710 - t749 * t830) * MDP(12) + (t531 * t566 + t545 * t539 + t529 * t552 + t543 * t537 + t530 * t560 + t544 * t538 - g(1) * (-qJ(6) * t632 + t1037 * t917 + t840) - g(2) * (qJ(6) * t636 + t1037 * t682 + t848)) * MDP(32) + (t554 * t677 - t564 * t674 - t622 * t574 + t585 * t658 + t602 * t595 - t610 * t989 - t702 * t865 + t749 * t909 + t892) * MDP(24) + (t554 * t676 - t563 * t674 + t622 * t575 + t585 * t656 + t602 * t594 + t610 * t920 + t702 * t875 - t749 * t908 + t891) * MDP(23) + (g(1) * t679 - g(2) * t683 + t1000 * t907 + t614 * t940 + t728 * t616 + t644 * t749 + t688 * t674 + t742 * t710 + t857 * t918 - t874 * t885) * MDP(16) + (t820 * t880 * t970 + t1046 * t824) * MDP(6) + (-t954 * t827 + (-t799 - t885) * t971) * t820 * MDP(15) + (-t575 * t749 - t594 * t702 - t610 * t676 - t656 * t674) * MDP(21) + (-t574 * t749 + t595 * t702 + t610 * t677 + t658 * t674) * MDP(20) + (t610 * t749 + t674 * t702) * MDP(22) + (t574 * t676 - t575 * t677 - t594 * t658 - t595 * t656) * MDP(19) + (-t574 * t677 + t595 * t658) * MDP(18) + (t674 * t885 - t749 * t954 + (t616 * t827 + (-qJD(1) * t749 - t710) * t971) * t820) * MDP(14) + qJDD(1) * MDP(1) + (t536 * t577 + t562 * t542 + t532 * t571 + t556 * t540 + t533 * t572 + t555 * t541 - g(1) * (pkin(10) * t917 + t840) - g(2) * (pkin(10) * t682 + t848)) * MDP(28); (t656 * t699 + t658 * t698 + (-t656 * t825 - t658 * t822) * t967 + (t1017 - t575 * t825 + (t656 * t822 - t658 * t825) * qJD(4)) * t823) * MDP(19) + (t574 * t826 + t887 * t702 + (-t658 * t885 + t1015 - t936) * t823) * MDP(20) + (t575 * t826 - t888 * t702 + (t656 * t885 - t702 * t964 - t1016) * t823) * MDP(21) + (-t574 * t997 + (t887 - t934) * t658) * MDP(18) + (t824 * t895 + t798) * MDP(7) + (-t827 * t895 + t928) * MDP(6) + ((-t820 * t929 + t876) * t823 ^ 2 + ((t820 * t868 + t860) * t823 - t885 * t712) * t826) * MDP(11) + (pkin(1) * t953 + t737 * t881 + g(1) * t754 + g(2) * t752 + (pkin(8) * t960 + g(3)) * t1001 - t946) * MDP(10) + (pkin(1) * t1002 * t824 + t740 * t881 + t854 - t906) * MDP(9) + (t531 * t690 + t529 * t660 + t530 * t665 - g(1) * (-pkin(5) * t1003 + qJ(6) * t653 + t850) - g(2) * (-pkin(5) * t1005 + qJ(6) * t651 + t851) - g(3) * (pkin(5) * t952 + qJ(6) * t714 + t855) + t992 * t545 + t993 * t544 + t994 * t543) * MDP(32) + t858 + (-t702 * t823 * t885 - t610 * t826) * MDP(22) + (-t543 * t699 + t544 * t698 - t574 * t660 - t575 * t665 + t994 * t658 - t993 * t656 + (t543 * t825 - t544 * t822) * t967 + (t529 * t825 - t530 * t822 + (-t543 * t822 - t544 * t825) * qJD(4) + t854) * t823) * MDP(29) + (t529 * t826 + t575 * t690 - t610 * t660 - t994 * t702 + t992 * t656 + t888 * t545 + (t531 * t822 + t543 * t885 + t545 * t964) * t823 + t863) * MDP(31) + (-t974 * t610 - t629 * t658 - t602 * t699 + t1051 * t702 + (t602 * t968 - t909 + (qJD(3) * t658 + t936) * pkin(9)) * t826 + (-t602 * t965 + t554 * t825 + t885 * t564 + (t702 * t968 - t574) * pkin(9)) * t823 + t864) * MDP(24) + (-t823 * t616 + t826 * t830 + (t903 - t969) * t712 + t1044 * t710) * MDP(12) + (-pkin(2) * t830 - g(1) * t1003 - g(2) * t1005 + g(3) * t952 + t615 * t941 + t644 * t823 - t740 * t712 - t885 * t983 - t1044 * t688 + (-t826 * t857 - t885 * t969) * pkin(9)) * MDP(17) + t885 * MDP(15) * t941 - t824 * MDP(4) * t953 + (t916 * t610 - t629 * t656 - t602 * t698 - t1045 * t702 + (t908 + (pkin(9) * t656 + t602 * t822) * qJD(3)) * t826 + (t602 * t964 + t554 * t822 + t885 * t563 + (qJD(3) * t1009 + t575) * pkin(9)) * t823 + t863) * MDP(23) + (-pkin(2) * t616 - t715 * t885 - t614 * t941 - t740 * t710 + (-pkin(9) * t857 - t688 * t885) * t823 + (pkin(9) * t911 + t738 * t885 - t644 + t854) * t826) * MDP(16) + (-t826 * t911 + t823 * t954 + (t826 * t915 + (qJD(2) * t823 - t712) * t824) * t972) * MDP(13) + (t823 * t911 + t826 * t954 + (-t823 * t915 + (qJD(2) * t826 + t710) * t824) * t972) * MDP(14) + (-t533 * t826 - t575 * t731 + t610 * t693 + t987 * t702 - t986 * t656 - t888 * t562 + (-t536 * t822 - t555 * t885 - t562 * t964) * t823 - t863) * MDP(26) + (-t555 * t699 - t556 * t698 - t574 * t693 + t575 * t692 + t987 * t658 + t990 * t656 + t883 * t967 + (t532 * t822 + t533 * t825 + (-t555 * t822 + t556 * t825) * qJD(4) + t854) * t823) * MDP(25) + (-g(1) * t850 - g(2) * t851 - g(3) * t855 + t532 * t692 + t533 * t693 + t536 * t731 + t555 * t987 + t556 * t990 + t562 * t986) * MDP(28) + (t532 * t826 + t574 * t731 - t610 * t692 - t990 * t702 - t986 * t658 - t887 * t562 + (-t536 * t825 + t556 * t885 + t562 * t965) * t823 - t864) * MDP(27) + (-t530 * t826 + t574 * t690 + t610 * t665 + t993 * t702 - t992 * t658 - t887 * t545 + (-t531 * t825 - t544 * t885 + t545 * t965) * t823 - t864) * MDP(30) + t973 * MDP(5) * t1002; -t710 ^ 2 * MDP(12) + (-t710 * t885 + t830) * MDP(13) - t616 * MDP(14) + t857 * MDP(15) + (-t615 * t885 + t862 - t907) * MDP(16) + (-t614 * t885 + t688 * t710 - t861 + t867) * MDP(17) + (t658 * t914 - t1017) * MDP(18) + ((-t574 - t1013) * t825 + (-t575 - t1012) * t822) * MDP(19) + (t702 * t914 + t1016) * MDP(20) + (-t701 * t822 + t1015) * MDP(21) + (-pkin(3) * t575 + t604 * t702 - t615 * t656 + t870 * t822 + (-t554 + (-t645 - t1027) * t702 + t862) * t825) * MDP(23) + (pkin(3) * t574 + t991 * t702 - t615 * t658 + t870 * t825 + (t554 + t846) * t822) * MDP(24) + (-t569 * t656 - t570 * t658 + (-t532 + t702 * t555 + (-t575 + t966) * pkin(10)) * t825 + (t533 + t1019 + (qJD(4) * t656 - t574) * pkin(10)) * t822 + t861) * MDP(25) + (-t570 * t702 - t575 * t767 - t656 * t982 + t822 * t869 + t825 * t842) * MDP(26) + (t569 * t702 + t574 * t767 - t658 * t982 - t822 * t842 + t825 * t869) * MDP(27) + (t536 * t767 - t556 * t569 - t555 * t570 - g(1) * t949 - g(2) * t950 - g(3) * t947 + t982 * t562 + (qJD(4) * t883 - t532 * t825 + t533 * t822 + t861) * pkin(10)) * MDP(28) + (-t574 * t778 - t575 * t779 + t978 * t658 - t979 * t656 + (t530 + t1020) * t825 + (-t544 * t702 + t529) * t822 + t861) * MDP(29) + (-t545 * t914 + t574 * t756 + t610 * t779 - t658 * t985 + t702 * t979 + t822 * t853) * MDP(30) + (t1009 * t545 + t575 * t756 - t610 * t778 + t656 * t985 - t702 * t978 + t825 * t853) * MDP(31) + (t531 * t756 + t529 * t778 + t530 * t779 - g(1) * (-qJ(6) * t1010 + t1037 * t683 + t949) - g(2) * (qJ(6) * t1011 + t1037 * t679 + t950) - g(3) * (-qJ(6) * t1007 + t1037 * t750 + t947) + t985 * t545 + t979 * t544 + t978 * t543) * MDP(32) + (MDP(11) * t710 + MDP(12) * t712 - MDP(14) * t885 - MDP(16) * t688 - MDP(20) * t658 + MDP(21) * t656 - MDP(22) * t702 + MDP(23) * t563 + MDP(24) * t564 - MDP(26) * t555 + MDP(27) * t556 - MDP(30) * t544 + MDP(31) * t543) * t712; MDP(18) * t1014 + (t655 - t1039) * MDP(19) + t548 * MDP(20) + (t1012 - t575) * MDP(21) + t610 * MDP(22) + (-t602 * t658 + t1018 + t844) * MDP(23) + (-t563 * t702 + t602 * t656 + t843) * MDP(24) + (pkin(4) * t574 - t1025 + (-t556 - t564) * t658 + (t555 - t962) * t656) * MDP(25) + (t587 * t656 - t1018 - 0.2e1 * t1033 + t839) * MDP(26) + (-t562 * t656 + t587 * t658 + t702 * t962 + t1038 + t694 - t843) * MDP(27) + (-t533 * pkin(4) - g(1) * t922 - g(2) * t923 - g(3) * t921 - t532 * qJ(5) - t555 * t564 - t556 * t962 - t562 * t587) * MDP(28) + (-t1025 + t574 * t1028 + (t544 + t961) * t658 + (t543 - t963) * t656) * MDP(29) + (t576 * t658 + t702 * t872 + t1038 + 0.2e1 * t694 + t834) * MDP(30) + (-t576 * t656 + (0.2e1 * qJD(6) + t547) * t702 + 0.2e1 * t933 - t835) * MDP(31) + (-t529 * t1028 + t530 * qJ(5) - t545 * t576 - g(1) * (-qJ(6) * t635 + t922) - g(2) * (-qJ(6) * t631 + t923) - g(3) * (t921 - t1021) + t963 * t544 + t961 * t543) * MDP(32); (t1019 + t839 - t1033) * MDP(28) + ((-qJD(6) - t544) * t702 - t933 + t835) * MDP(32) + (MDP(25) + MDP(29)) * t548 + (MDP(27) + MDP(30)) * (-t655 - t701) + (MDP(26) - MDP(31)) * (t610 - t1014); (-t712 * t964 + t822 * t910 + t1012 - t832) * MDP(29) + (qJDD(4) + t849 + t1014) * MDP(30) + (-t701 - t1039) * MDP(31) + (t834 + t1020 - t1049) * MDP(32) + (-t822 * (-t823 * t929 + t826 * t930 + t926) * MDP(29) + (t823 * t930 + t826 * t929 + t927) * MDP(30)) * t820;];
tau  = t1;
