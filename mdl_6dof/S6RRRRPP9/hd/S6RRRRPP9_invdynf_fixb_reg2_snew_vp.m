% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP9_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:24:16
% EndTime: 2019-05-07 19:24:28
% DurationCPUTime: 13.05s
% Computational Cost: add. (37792->332), mult. (81094->419), div. (0->0), fcn. (64372->10), ass. (0->238)
t2945 = sin(qJ(1));
t2949 = cos(qJ(1));
t2944 = sin(qJ(2));
t2948 = cos(qJ(2));
t2942 = sin(qJ(4));
t2946 = cos(qJ(4));
t2943 = sin(qJ(3));
t2947 = cos(qJ(3));
t2941 = cos(pkin(6));
t3019 = qJD(1) * t2941;
t2995 = qJD(2) + t3019;
t2940 = sin(pkin(6));
t3004 = t2940 * t2944;
t2998 = qJD(1) * t3004;
t2913 = t2943 * t2995 + t2947 * t2998;
t3003 = t2940 * t2948;
t2997 = qJD(1) * t3003;
t3000 = qJDD(1) * t2940;
t2920 = qJD(2) * t2997 + t2944 * t3000;
t2990 = qJDD(1) * t2941 + qJDD(2);
t2991 = t2943 * t2920 - t2947 * t2990;
t2964 = qJD(3) * t2913 + qJDD(4) + t2991;
t2930 = -qJD(3) + t2997;
t2891 = t2942 * t2913 + t2930 * t2946;
t2893 = t2913 * t2946 - t2930 * t2942;
t3008 = t2893 * t2891;
t3025 = t3008 - t2964;
t2889 = t2891 ^ 2;
t2911 = t2943 * t2998 - t2947 * t2995;
t2909 = qJD(4) + t2911;
t3024 = t2909 ^ 2;
t3027 = -t2889 - t3024;
t3040 = t3027 * t2942 - t3025 * t2946;
t2961 = -t2947 * t2920 - t2943 * t2990;
t2878 = -t2911 * qJD(3) - t2961;
t2999 = qJDD(1) * t2948;
t3018 = qJD(1) * t2944;
t3029 = (qJD(2) * t3018 - t2999) * t2940;
t2960 = qJDD(3) + t3029;
t2994 = t2878 * t2942 - t2946 * t2960;
t2966 = qJD(4) * t2893 + t2994;
t3007 = t2909 * t2893;
t3026 = t2966 + t3007;
t3041 = t3025 * t2942 + t3027 * t2946;
t3045 = t2943 * t3026 + t2947 * t3041;
t3054 = t2944 * t3040 + t2948 * t3045;
t3047 = t2943 * t3041 - t2947 * t3026;
t3056 = t2944 * t3045 - t2948 * t3040;
t3074 = -t2940 * t3047 + t2941 * t3056;
t3090 = t2945 * t3074 - t2949 * t3054;
t3080 = t2945 * t3054 + t2949 * t3074;
t3075 = t2940 * t3056 + t2941 * t3047;
t2955 = t2946 * t2878 + t2942 * t2960;
t2954 = -t2891 * qJD(4) + t2955;
t3009 = t2891 * t2909;
t2815 = t2954 + t3009;
t2814 = t3007 - t2966;
t3017 = t2814 * t2942;
t3048 = -t2815 * t2946 + t3017;
t2890 = t2893 ^ 2;
t3028 = -t2889 - t2890;
t3036 = t2943 * t3028;
t2809 = t2814 * t2946;
t3049 = t2815 * t2942 + t2809;
t3055 = t2947 * t3049 + t3036;
t3071 = t2944 * t3048 + t2948 * t3055;
t3034 = t2947 * t3028;
t3057 = t2943 * t3049 - t3034;
t3073 = t2944 * t3055 - t2948 * t3048;
t3082 = -t2940 * t3057 + t2941 * t3073;
t3087 = -t2945 * t3082 + t2949 * t3071;
t3086 = t2945 * t3071 + t2949 * t3082;
t3083 = t2940 * t3073 + t2941 * t3057;
t2953 = (-qJD(4) - t2909) * t2891 + t2955;
t2825 = t2964 + t3008;
t2841 = t3024 + t2890;
t2803 = -t2946 * t2825 + t2841 * t2942;
t3068 = t2803 * t2947;
t3038 = -t2943 * t2953 - t3068;
t3032 = t2825 * t2942 + t2841 * t2946;
t3065 = t2944 * t3032;
t3044 = t2948 * t3038 + t3065;
t3069 = t2803 * t2943;
t3039 = t2947 * t2953 - t3069;
t3062 = t2948 * t3032;
t3046 = t2944 * t3038 - t3062;
t3058 = -t2940 * t3039 + t2941 * t3046;
t3072 = -t2945 * t3058 + t2949 * t3044;
t3070 = t2945 * t3044 + t2949 * t3058;
t3059 = t2940 * t3046 + t2941 * t3039;
t2819 = t2954 - t3009;
t2989 = t2995 ^ 2;
t3023 = t2911 ^ 2;
t3022 = t2913 ^ 2;
t3021 = t2930 ^ 2;
t3020 = t2941 * g(3);
t3006 = t2913 * t2911;
t2950 = qJD(1) ^ 2;
t3005 = t2940 ^ 2 * t2950;
t3002 = qJD(3) + t2930;
t2919 = (-pkin(2) * t2948 - pkin(9) * t2944) * t2940 * qJD(1);
t2932 = -g(1) * t2949 - g(2) * t2945;
t2916 = -pkin(1) * t2950 + pkin(8) * t3000 + t2932;
t2931 = t2945 * g(1) - t2949 * g(2);
t2959 = t2950 * t2940 * pkin(8) + qJDD(1) * pkin(1) + t2931;
t2956 = t2941 * t2959;
t3001 = t2948 * t2916 + t2944 * t2956;
t2848 = t2990 * pkin(9) - t2989 * pkin(2) + (qJD(1) * t2919 * t2948 - g(3) * t2944) * t2940 + t3001;
t2988 = qJD(1) * t2995;
t2967 = t2948 * t2988;
t2951 = -t2920 * pkin(9) - t3020 + (-pkin(9) * t2967 + (-t2999 + (0.2e1 * qJD(2) + t3019) * t3018) * pkin(2) - t2959) * t2940;
t2808 = t2947 * t2848 + t2943 * t2951;
t2996 = pkin(4) * t2909 - (2 * qJD(5));
t2883 = pkin(3) * t2911 - pkin(10) * t2913;
t2790 = -pkin(3) * t3021 + pkin(10) * t2960 - t2911 * t2883 + t2808;
t2992 = t2944 * t2916 - t2948 * t2956;
t2847 = -t2990 * pkin(2) - t2989 * pkin(9) + (g(3) * t2948 + t2919 * t3018) * t2940 + t2992;
t2851 = (qJD(3) - t2930) * t2913 + t2991;
t2993 = -t2911 * t2930 - t2878;
t2952 = pkin(3) * t2851 + pkin(10) * t2993 + t2847;
t2754 = -t2942 * t2790 + t2946 * t2952;
t2807 = -t2943 * t2848 + t2947 * t2951;
t2860 = pkin(4) * t2891 - qJ(5) * t2893;
t2746 = -t2964 * pkin(4) - t3024 * qJ(5) + t2893 * t2860 + qJDD(5) - t2754;
t2725 = t2954 * pkin(5) + (pkin(5) * t2891 - (2 * qJD(6))) * t2909 + t2746 + t3025 * qJ(6);
t2755 = t2946 * t2790 + t2942 * t2952;
t2745 = -t3024 * pkin(4) + qJ(5) * t2964 + 0.2e1 * qJD(5) * t2909 - t2891 * t2860 + t2755;
t2867 = pkin(5) * t2893 - qJ(6) * t2909;
t2738 = -pkin(5) * t2966 - t2889 * qJ(6) + t2909 * t2867 + qJDD(6) + t2745;
t2712 = t2725 * t2942 + t2738 * t2946;
t2789 = -t2960 * pkin(3) - t3021 * pkin(10) + t2913 * t2883 - t2807;
t2957 = t2966 * pkin(4) - qJ(5) * t2819 + t2789;
t2739 = -t2889 * pkin(5) + t2994 * qJ(6) + 0.2e1 * qJD(6) * t2891 + (qJ(6) * qJD(4) - t2867 + t2996) * t2893 + t2957;
t2707 = t2712 * t2947 + t2739 * t2943;
t2711 = -t2725 * t2946 + t2738 * t2942;
t2987 = t2707 * t2944 - t2711 * t2948;
t2714 = t2745 * t2946 + t2746 * t2942;
t2747 = t2893 * t2996 + t2957;
t2710 = t2714 * t2947 + t2747 * t2943;
t2713 = t2745 * t2942 - t2746 * t2946;
t2986 = t2710 * t2944 - t2713 * t2948;
t2724 = -t2754 * t2942 + t2755 * t2946;
t2716 = t2724 * t2947 + t2789 * t2943;
t2723 = t2754 * t2946 + t2755 * t2942;
t2985 = t2716 * t2944 - t2723 * t2948;
t2816 = (-qJD(4) + t2909) * t2891 + t2955;
t2783 = t2816 * t2942 + t2809;
t2761 = t2783 * t2947 + t3036;
t2780 = -t2816 * t2946 + t3017;
t2983 = t2761 * t2944 - t2780 * t2948;
t2775 = t2819 * t2943 + t3068;
t2977 = t2775 * t2944 + t3062;
t2778 = -t2807 * t2943 + t2808 * t2947;
t2975 = t2778 * t2944 - t2847 * t2948;
t2852 = -t2913 * t3002 - t2991;
t2854 = t2911 * t3002 + t2961;
t2821 = t2852 * t2947 - t2854 * t2943;
t2866 = -t3022 - t3023;
t2974 = t2821 * t2944 - t2866 * t2948;
t2870 = t2960 - t3006;
t2879 = -t3021 - t3023;
t2831 = -t2870 * t2943 + t2879 * t2947;
t2973 = t2831 * t2944 - t2851 * t2948;
t2869 = -t3006 - t2960;
t2884 = -t3021 - t3022;
t2839 = t2869 * t2947 - t2884 * t2943;
t2972 = t2839 * t2944 + t2948 * t2993;
t2880 = -g(3) * t3003 - t2992;
t2881 = -g(3) * t3004 + t3001;
t2971 = t2880 * t2948 + t2881 * t2944;
t2896 = t2940 * t2967 - t2920;
t2923 = t2988 * t3004;
t2897 = t2923 - t3029;
t2970 = t2896 * t2948 + t2897 * t2944;
t2938 = t2944 ^ 2;
t2908 = -t2938 * t3005 - t2989;
t2929 = t2948 * t2944 * t3005;
t2918 = t2929 - t2990;
t2969 = t2908 * t2948 + t2918 * t2944;
t2917 = t2929 + t2990;
t2939 = t2948 ^ 2;
t2921 = -t2939 * t3005 - t2989;
t2968 = t2917 * t2948 + t2921 * t2944;
t2928 = -qJDD(1) * t2945 - t2949 * t2950;
t2927 = qJDD(1) * t2949 - t2945 * t2950;
t2922 = (-t2938 - t2939) * t3005;
t2900 = -t2940 * t2959 - t3020;
t2898 = t2923 + t3029;
t2895 = t2995 * t2997 + t2920;
t2885 = -t2917 * t2944 + t2921 * t2948;
t2882 = -t2908 * t2944 + t2918 * t2948;
t2865 = -t2896 * t2944 + t2897 * t2948;
t2859 = -t2940 * t2898 + t2941 * t2968;
t2858 = t2941 * t2898 + t2940 * t2968;
t2850 = -t2940 * t2895 + t2941 * t2969;
t2849 = t2941 * t2895 + t2940 * t2969;
t2846 = -t2940 * t2922 + t2941 * t2970;
t2845 = t2941 * t2922 + t2940 * t2970;
t2838 = t2869 * t2943 + t2884 * t2947;
t2837 = -t2880 * t2944 + t2881 * t2948;
t2830 = t2870 * t2947 + t2879 * t2943;
t2823 = -t2940 * t2900 + t2941 * t2971;
t2822 = t2941 * t2900 + t2940 * t2971;
t2820 = t2852 * t2943 + t2854 * t2947;
t2806 = t2839 * t2948 - t2944 * t2993;
t2805 = t2831 * t2948 + t2851 * t2944;
t2792 = t2821 * t2948 + t2866 * t2944;
t2788 = -t2940 * t2838 + t2941 * t2972;
t2787 = t2941 * t2838 + t2940 * t2972;
t2786 = -t2940 * t2830 + t2941 * t2973;
t2785 = t2941 * t2830 + t2940 * t2973;
t2777 = t2807 * t2947 + t2808 * t2943;
t2772 = -t2819 * t2947 + t3069;
t2764 = -t2940 * t2820 + t2941 * t2974;
t2763 = t2941 * t2820 + t2940 * t2974;
t2758 = t2783 * t2943 - t3034;
t2756 = t2778 * t2948 + t2847 * t2944;
t2752 = t2775 * t2948 - t3065;
t2743 = t2761 * t2948 + t2780 * t2944;
t2741 = -t2940 * t2777 + t2941 * t2975;
t2740 = t2941 * t2777 + t2940 * t2975;
t2736 = -t2940 * t2772 + t2941 * t2977;
t2733 = t2941 * t2772 + t2940 * t2977;
t2721 = -t2940 * t2758 + t2941 * t2983;
t2718 = t2941 * t2758 + t2940 * t2983;
t2715 = t2724 * t2943 - t2789 * t2947;
t2709 = t2714 * t2943 - t2747 * t2947;
t2708 = t2716 * t2948 + t2723 * t2944;
t2706 = t2712 * t2943 - t2739 * t2947;
t2705 = t2710 * t2948 + t2713 * t2944;
t2704 = -t2940 * t2715 + t2941 * t2985;
t2703 = t2941 * t2715 + t2940 * t2985;
t2702 = t2707 * t2948 + t2711 * t2944;
t2701 = -t2940 * t2709 + t2941 * t2986;
t2700 = t2941 * t2709 + t2940 * t2986;
t2699 = -t2940 * t2706 + t2941 * t2987;
t2698 = t2941 * t2706 + t2940 * t2987;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2928, -t2927, 0, -t2931 * t2945 + t2932 * t2949, 0, 0, 0, 0, 0, 0, -t2859 * t2945 + t2885 * t2949, -t2850 * t2945 + t2882 * t2949, -t2846 * t2945 + t2865 * t2949, -t2823 * t2945 + t2837 * t2949, 0, 0, 0, 0, 0, 0, -t2786 * t2945 + t2805 * t2949, -t2788 * t2945 + t2806 * t2949, -t2764 * t2945 + t2792 * t2949, -t2741 * t2945 + t2756 * t2949, 0, 0, 0, 0, 0, 0, -t3090, -t2736 * t2945 + t2752 * t2949, t3087, -t2704 * t2945 + t2708 * t2949, 0, 0, 0, 0, 0, 0, -t2721 * t2945 + t2743 * t2949, t3090, t3072, -t2701 * t2945 + t2705 * t2949, 0, 0, 0, 0, 0, 0, t3087, t3072, -t3090, -t2699 * t2945 + t2702 * t2949; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2927, t2928, 0, t2931 * t2949 + t2932 * t2945, 0, 0, 0, 0, 0, 0, t2859 * t2949 + t2885 * t2945, t2850 * t2949 + t2882 * t2945, t2846 * t2949 + t2865 * t2945, t2823 * t2949 + t2837 * t2945, 0, 0, 0, 0, 0, 0, t2786 * t2949 + t2805 * t2945, t2788 * t2949 + t2806 * t2945, t2764 * t2949 + t2792 * t2945, t2741 * t2949 + t2756 * t2945, 0, 0, 0, 0, 0, 0, t3080, t2736 * t2949 + t2752 * t2945, t3086, t2704 * t2949 + t2708 * t2945, 0, 0, 0, 0, 0, 0, t2721 * t2949 + t2743 * t2945, -t3080, t3070, t2701 * t2949 + t2705 * t2945, 0, 0, 0, 0, 0, 0, t3086, t3070, t3080, t2699 * t2949 + t2702 * t2945; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2858, t2849, t2845, t2822, 0, 0, 0, 0, 0, 0, t2785, t2787, t2763, t2740, 0, 0, 0, 0, 0, 0, t3075, t2733, t3083, t2703, 0, 0, 0, 0, 0, 0, t2718, -t3075, t3059, t2700, 0, 0, 0, 0, 0, 0, t3083, t3059, t3075, t2698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2950, -qJDD(1), 0, t2932, 0, 0, 0, 0, 0, 0, t2885, t2882, t2865, t2837, 0, 0, 0, 0, 0, 0, t2805, t2806, t2792, t2756, 0, 0, 0, 0, 0, 0, t3054, t2752, t3071, t2708, 0, 0, 0, 0, 0, 0, t2743, -t3054, t3044, t2705, 0, 0, 0, 0, 0, 0, t3071, t3044, t3054, t2702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2950, 0, t2931, 0, 0, 0, 0, 0, 0, t2859, t2850, t2846, t2823, 0, 0, 0, 0, 0, 0, t2786, t2788, t2764, t2741, 0, 0, 0, 0, 0, 0, t3074, t2736, t3082, t2704, 0, 0, 0, 0, 0, 0, t2721, -t3074, t3058, t2701, 0, 0, 0, 0, 0, 0, t3082, t3058, t3074, t2699; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2858, t2849, t2845, t2822, 0, 0, 0, 0, 0, 0, t2785, t2787, t2763, t2740, 0, 0, 0, 0, 0, 0, t3075, t2733, t3083, t2703, 0, 0, 0, 0, 0, 0, t2718, -t3075, t3059, t2700, 0, 0, 0, 0, 0, 0, t3083, t3059, t3075, t2698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2921, t2918, t2897, t2881, 0, 0, 0, 0, 0, 0, t2831, t2839, t2821, t2778, 0, 0, 0, 0, 0, 0, t3045, t2775, t3055, t2716, 0, 0, 0, 0, 0, 0, t2761, -t3045, t3038, t2710, 0, 0, 0, 0, 0, 0, t3055, t3038, t3045, t2707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2917, t2908, t2896, t2880, 0, 0, 0, 0, 0, 0, -t2851, t2993, -t2866, -t2847, 0, 0, 0, 0, 0, 0, -t3040, t3032, -t3048, -t2723, 0, 0, 0, 0, 0, 0, -t2780, t3040, -t3032, -t2713, 0, 0, 0, 0, 0, 0, -t3048, -t3032, -t3040, -t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2898, t2895, t2922, t2900, 0, 0, 0, 0, 0, 0, t2830, t2838, t2820, t2777, 0, 0, 0, 0, 0, 0, t3047, t2772, t3057, t2715, 0, 0, 0, 0, 0, 0, t2758, -t3047, t3039, t2709, 0, 0, 0, 0, 0, 0, t3057, t3039, t3047, t2706; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2879, t2869, t2852, t2808, 0, 0, 0, 0, 0, 0, t3041, t2803, t3049, t2724, 0, 0, 0, 0, 0, 0, t2783, -t3041, -t2803, t2714, 0, 0, 0, 0, 0, 0, t3049, -t2803, t3041, t2712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2870, t2884, t2854, t2807, 0, 0, 0, 0, 0, 0, -t3026, -t2819, -t3028, -t2789, 0, 0, 0, 0, 0, 0, -t3028, t3026, t2953, -t2747, 0, 0, 0, 0, 0, 0, -t3028, t2953, -t3026, -t2739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2851, -t2993, t2866, t2847, 0, 0, 0, 0, 0, 0, t3040, -t3032, t3048, t2723, 0, 0, 0, 0, 0, 0, t2780, -t3040, t3032, t2713, 0, 0, 0, 0, 0, 0, t3048, t3032, t3040, t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3027, -t2825, t2814, t2755, 0, 0, 0, 0, 0, 0, t2814, -t3027, t2825, t2745, 0, 0, 0, 0, 0, 0, t2814, t2825, t3027, t2738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3025, -t2841, -t2815, t2754, 0, 0, 0, 0, 0, 0, -t2816, t3025, t2841, -t2746, 0, 0, 0, 0, 0, 0, -t2815, t2841, -t3025, -t2725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3026, t2819, t3028, t2789, 0, 0, 0, 0, 0, 0, t3028, -t3026, -t2953, t2747, 0, 0, 0, 0, 0, 0, t3028, -t2953, t3026, t2739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3028, -t3026, -t2953, t2747, 0, 0, 0, 0, 0, 0, t3028, -t2953, t3026, t2739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2814, t3027, -t2825, -t2745, 0, 0, 0, 0, 0, 0, -t2814, -t2825, -t3027, -t2738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2816, -t3025, -t2841, t2746, 0, 0, 0, 0, 0, 0, t2815, -t2841, t3025, t2725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3028, -t2953, t3026, t2739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2815, -t2841, t3025, t2725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2814, t2825, t3027, t2738;];
f_new_reg  = t1;
