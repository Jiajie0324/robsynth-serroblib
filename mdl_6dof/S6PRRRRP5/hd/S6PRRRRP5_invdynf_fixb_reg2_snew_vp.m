% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:08:59
% EndTime: 2019-05-05 10:09:08
% DurationCPUTime: 9.18s
% Computational Cost: add. (71164->303), mult. (148033->483), div. (0->0), fcn. (120917->14), ass. (0->266)
t2313 = sin(pkin(12));
t2316 = cos(pkin(12));
t2299 = g(1) * t2313 - g(2) * t2316;
t2312 = -g(3) + qJDD(1);
t2315 = sin(pkin(6));
t2318 = cos(pkin(6));
t2401 = t2299 * t2318 + t2312 * t2315;
t2314 = sin(pkin(7));
t2325 = cos(qJ(3));
t2376 = qJDD(2) * t2325;
t2321 = sin(qJ(3));
t2389 = qJD(2) * t2321;
t2400 = (qJD(3) * t2389 - t2376) * t2314;
t2332 = qJDD(4) + t2400;
t2382 = t2314 * t2325;
t2373 = qJD(2) * t2382;
t2369 = -qJD(4) + t2373;
t2368 = t2369 ^ 2;
t2317 = cos(pkin(7));
t2307 = qJD(2) * t2317 + qJD(3);
t2320 = sin(qJ(4));
t2324 = cos(qJ(4));
t2383 = t2314 * t2321;
t2374 = qJD(2) * t2383;
t2274 = -t2307 * t2324 + t2320 * t2374;
t2272 = qJD(5) + t2274;
t2399 = qJD(5) + t2272;
t2300 = -g(1) * t2316 - g(2) * t2313;
t2322 = sin(qJ(2));
t2326 = cos(qJ(2));
t2259 = -t2322 * t2300 + t2326 * t2401;
t2327 = qJD(2) ^ 2;
t2330 = t2327 * t2314 * pkin(9) + qJDD(2) * pkin(2) + t2259;
t2377 = qJDD(2) * t2314;
t2282 = qJD(3) * t2373 + t2321 * t2377;
t2306 = qJDD(2) * t2317 + qJDD(3);
t2340 = t2324 * t2282 + t2320 * t2306;
t2248 = -t2274 * qJD(4) + t2340;
t2235 = t2274 * t2369 + t2248;
t2276 = t2307 * t2320 + t2324 * t2374;
t2319 = sin(qJ(5));
t2323 = cos(qJ(5));
t2261 = t2276 * t2319 + t2323 * t2369;
t2398 = t2261 ^ 2;
t2263 = t2276 * t2323 - t2319 * t2369;
t2397 = t2263 ^ 2;
t2396 = t2272 ^ 2;
t2395 = t2274 ^ 2;
t2394 = t2276 ^ 2;
t2393 = t2307 ^ 2;
t2392 = -2 * qJD(6);
t2390 = qJD(2) * t2314;
t2388 = t2261 * t2263;
t2387 = t2276 * t2274;
t2385 = t2314 ^ 2 * t2327;
t2277 = -t2299 * t2315 + t2312 * t2318;
t2381 = t2317 * t2277;
t2379 = qJD(5) - t2272;
t2260 = t2326 * t2300 + t2322 * t2401;
t2254 = -pkin(2) * t2327 + pkin(9) * t2377 + t2260;
t2329 = t2317 * t2330;
t2218 = t2254 * t2325 + t2277 * t2383 + t2321 * t2329;
t2281 = (-pkin(3) * t2325 - pkin(10) * t2321) * t2390;
t2210 = -pkin(3) * t2393 + pkin(10) * t2306 + t2281 * t2373 + t2218;
t2328 = -t2282 * pkin(10) + t2381 + (-t2325 * qJD(2) * t2307 * pkin(10) + (-t2376 + (qJD(3) + t2307) * t2389) * pkin(3) - t2330) * t2314;
t2185 = t2210 * t2324 + t2320 * t2328;
t2255 = pkin(4) * t2274 - pkin(11) * t2276;
t2172 = -pkin(4) * t2368 + pkin(11) * t2332 - t2274 * t2255 + t2185;
t2378 = -t2277 * t2382 - t2325 * t2329;
t2209 = -t2306 * pkin(3) - t2393 * pkin(10) + (t2281 * t2390 + t2254) * t2321 + t2378;
t2371 = t2320 * t2282 - t2306 * t2324;
t2233 = (0.2e1 * qJD(4) - t2373) * t2276 + t2371;
t2181 = pkin(4) * t2233 - pkin(11) * t2235 + t2209;
t2154 = t2172 * t2323 + t2181 * t2319;
t2153 = -t2319 * t2172 + t2181 * t2323;
t2184 = -t2210 * t2320 + t2324 * t2328;
t2372 = t2319 * t2248 - t2323 * t2332;
t2370 = t2307 * t2373;
t2331 = -t2323 * t2248 - t2319 * t2332;
t2205 = t2261 * t2379 + t2331;
t2335 = -t2276 * qJD(4) - qJDD(5) - t2371;
t2215 = -t2335 - t2388;
t2139 = pkin(5) * t2215 + qJ(6) * t2205 + t2263 * t2392 + t2153;
t2244 = pkin(5) * t2272 - qJ(6) * t2263;
t2337 = -qJD(5) * t2263 - t2372;
t2142 = -t2272 * t2244 + t2337 * qJ(6) + (-pkin(5) * t2261 + t2392) * t2261 + t2154;
t2126 = -t2139 * t2319 + t2142 * t2323;
t2171 = -pkin(4) * t2332 - pkin(11) * t2368 + t2255 * t2276 - t2184;
t2156 = -pkin(5) * t2337 - qJ(6) * t2398 + t2244 * t2263 + qJDD(6) + t2171;
t2119 = t2126 * t2320 - t2156 * t2324;
t2120 = t2126 * t2324 + t2156 * t2320;
t2125 = t2139 * t2323 + t2142 * t2319;
t2365 = t2120 * t2321 - t2125 * t2325;
t2102 = -t2314 * t2119 + t2317 * t2365;
t2107 = t2120 * t2325 + t2125 * t2321;
t2367 = t2102 * t2326 + t2107 * t2322;
t2132 = -t2153 * t2319 + t2154 * t2323;
t2127 = t2132 * t2320 - t2171 * t2324;
t2128 = t2132 * t2324 + t2171 * t2320;
t2131 = t2153 * t2323 + t2154 * t2319;
t2364 = t2128 * t2321 - t2131 * t2325;
t2106 = -t2314 * t2127 + t2317 * t2364;
t2116 = t2128 * t2325 + t2131 * t2321;
t2366 = t2106 * t2326 + t2116 * t2322;
t2158 = t2184 * t2324 + t2185 * t2320;
t2159 = -t2184 * t2320 + t2185 * t2324;
t2359 = t2159 * t2321 - t2209 * t2325;
t2134 = -t2314 * t2158 + t2317 * t2359;
t2152 = t2159 * t2325 + t2209 * t2321;
t2363 = t2134 * t2326 + t2152 * t2322;
t2203 = -t2263 * t2379 - t2372;
t2176 = t2203 * t2323 - t2205 * t2319;
t2223 = -t2397 - t2398;
t2164 = t2176 * t2320 - t2223 * t2324;
t2165 = t2176 * t2324 + t2223 * t2320;
t2175 = t2203 * t2319 + t2205 * t2323;
t2358 = t2165 * t2321 - t2175 * t2325;
t2136 = -t2314 * t2164 + t2317 * t2358;
t2149 = t2165 * t2325 + t2175 * t2321;
t2362 = t2136 * t2326 + t2149 * t2322;
t2228 = -t2396 - t2398;
t2195 = -t2215 * t2319 + t2228 * t2323;
t2202 = t2263 * t2399 + t2372;
t2168 = t2195 * t2320 - t2202 * t2324;
t2169 = t2195 * t2324 + t2202 * t2320;
t2194 = t2215 * t2323 + t2228 * t2319;
t2356 = t2169 * t2321 - t2194 * t2325;
t2141 = -t2314 * t2168 + t2317 * t2356;
t2157 = t2169 * t2325 + t2194 * t2321;
t2361 = t2141 * t2326 + t2157 * t2322;
t2216 = t2335 - t2388;
t2237 = -t2396 - t2397;
t2197 = t2216 * t2323 - t2237 * t2319;
t2204 = -t2261 * t2399 - t2331;
t2173 = t2197 * t2320 - t2204 * t2324;
t2174 = t2197 * t2324 + t2204 * t2320;
t2196 = t2216 * t2319 + t2237 * t2323;
t2355 = t2174 * t2321 - t2196 * t2325;
t2144 = -t2314 * t2173 + t2317 * t2355;
t2160 = t2174 * t2325 + t2196 * t2321;
t2360 = t2144 * t2326 + t2160 * t2322;
t2234 = -t2276 * t2373 - t2371;
t2236 = t2274 * t2373 - t2340;
t2206 = t2234 * t2320 + t2236 * t2324;
t2207 = t2234 * t2324 - t2236 * t2320;
t2243 = -t2394 - t2395;
t2351 = t2207 * t2321 - t2243 * t2325;
t2167 = -t2314 * t2206 + t2317 * t2351;
t2191 = t2207 * t2325 + t2243 * t2321;
t2357 = t2167 * t2326 + t2191 * t2322;
t2241 = -t2314 * t2330 + t2381;
t2217 = -t2321 * t2254 - t2378;
t2350 = t2217 * t2325 + t2218 * t2321;
t2178 = -t2314 * t2241 + t2317 * t2350;
t2190 = -t2217 * t2321 + t2218 * t2325;
t2354 = t2178 * t2326 + t2190 * t2322;
t2246 = t2332 - t2387;
t2249 = -t2368 - t2395;
t2220 = t2246 * t2324 + t2249 * t2320;
t2221 = -t2246 * t2320 + t2249 * t2324;
t2349 = t2221 * t2321 - t2233 * t2325;
t2183 = -t2314 * t2220 + t2317 * t2349;
t2200 = t2221 * t2325 + t2233 * t2321;
t2353 = t2183 * t2326 + t2200 * t2322;
t2245 = -t2387 - t2332;
t2256 = -t2394 - t2368;
t2226 = t2245 * t2320 + t2256 * t2324;
t2227 = t2245 * t2324 - t2256 * t2320;
t2348 = t2227 * t2321 - t2235 * t2325;
t2187 = -t2314 * t2226 + t2317 * t2348;
t2201 = t2227 * t2325 + t2235 * t2321;
t2352 = t2187 * t2326 + t2201 * t2322;
t2310 = t2321 ^ 2;
t2311 = t2325 ^ 2;
t2288 = (-t2310 - t2311) * t2385;
t2265 = t2370 - t2282;
t2290 = t2307 * t2374;
t2266 = t2290 - t2400;
t2343 = t2265 * t2325 + t2266 * t2321;
t2230 = -t2314 * t2288 + t2317 * t2343;
t2242 = -t2265 * t2321 + t2266 * t2325;
t2347 = t2230 * t2326 + t2242 * t2322;
t2264 = t2370 + t2282;
t2271 = -t2310 * t2385 - t2393;
t2298 = t2321 * t2325 * t2385;
t2280 = t2298 - t2306;
t2342 = t2271 * t2325 + t2280 * t2321;
t2232 = -t2314 * t2264 + t2317 * t2342;
t2253 = -t2271 * t2321 + t2280 * t2325;
t2346 = t2232 * t2326 + t2253 * t2322;
t2267 = t2290 + t2400;
t2279 = t2298 + t2306;
t2283 = -t2311 * t2385 - t2393;
t2341 = t2279 * t2325 + t2283 * t2321;
t2240 = -t2314 * t2267 + t2317 * t2341;
t2257 = -t2279 * t2321 + t2283 * t2325;
t2345 = t2240 * t2326 + t2257 * t2322;
t2344 = t2259 * t2326 + t2260 * t2322;
t2338 = qJDD(2) * t2326 - t2322 * t2327;
t2297 = -qJDD(2) * t2322 - t2326 * t2327;
t2287 = t2338 * t2318;
t2286 = t2297 * t2318;
t2285 = t2338 * t2315;
t2284 = t2297 * t2315;
t2239 = t2317 * t2267 + t2314 * t2341;
t2238 = -t2259 * t2322 + t2260 * t2326;
t2231 = t2317 * t2264 + t2314 * t2342;
t2229 = t2317 * t2288 + t2314 * t2343;
t2225 = -t2315 * t2277 + t2318 * t2344;
t2224 = t2318 * t2277 + t2315 * t2344;
t2219 = -t2240 * t2322 + t2257 * t2326;
t2214 = -t2232 * t2322 + t2253 * t2326;
t2211 = -t2230 * t2322 + t2242 * t2326;
t2199 = -t2315 * t2239 + t2318 * t2345;
t2198 = t2318 * t2239 + t2315 * t2345;
t2193 = -t2315 * t2231 + t2318 * t2346;
t2192 = t2318 * t2231 + t2315 * t2346;
t2189 = -t2315 * t2229 + t2318 * t2347;
t2188 = t2318 * t2229 + t2315 * t2347;
t2186 = t2317 * t2226 + t2314 * t2348;
t2182 = t2317 * t2220 + t2314 * t2349;
t2177 = t2317 * t2241 + t2314 * t2350;
t2166 = t2317 * t2206 + t2314 * t2351;
t2163 = -t2187 * t2322 + t2201 * t2326;
t2162 = -t2183 * t2322 + t2200 * t2326;
t2161 = -t2178 * t2322 + t2190 * t2326;
t2155 = -t2167 * t2322 + t2191 * t2326;
t2151 = -t2315 * t2186 + t2318 * t2352;
t2150 = t2318 * t2186 + t2315 * t2352;
t2148 = -t2315 * t2182 + t2318 * t2353;
t2147 = t2318 * t2182 + t2315 * t2353;
t2146 = -t2315 * t2177 + t2318 * t2354;
t2145 = t2318 * t2177 + t2315 * t2354;
t2143 = t2317 * t2173 + t2314 * t2355;
t2140 = t2317 * t2168 + t2314 * t2356;
t2138 = -t2315 * t2166 + t2318 * t2357;
t2137 = t2318 * t2166 + t2315 * t2357;
t2135 = t2317 * t2164 + t2314 * t2358;
t2133 = t2317 * t2158 + t2314 * t2359;
t2130 = -t2144 * t2322 + t2160 * t2326;
t2129 = -t2141 * t2322 + t2157 * t2326;
t2124 = -t2136 * t2322 + t2149 * t2326;
t2123 = -t2134 * t2322 + t2152 * t2326;
t2122 = -t2315 * t2143 + t2318 * t2360;
t2121 = t2318 * t2143 + t2315 * t2360;
t2118 = -t2315 * t2140 + t2318 * t2361;
t2117 = t2318 * t2140 + t2315 * t2361;
t2115 = -t2315 * t2135 + t2318 * t2362;
t2114 = t2318 * t2135 + t2315 * t2362;
t2113 = -t2315 * t2133 + t2318 * t2363;
t2112 = t2318 * t2133 + t2315 * t2363;
t2111 = -t2122 * t2313 + t2130 * t2316;
t2110 = t2122 * t2316 + t2130 * t2313;
t2109 = -t2118 * t2313 + t2129 * t2316;
t2108 = t2118 * t2316 + t2129 * t2313;
t2105 = t2317 * t2127 + t2314 * t2364;
t2104 = -t2115 * t2313 + t2124 * t2316;
t2103 = t2115 * t2316 + t2124 * t2313;
t2101 = t2317 * t2119 + t2314 * t2365;
t2100 = -t2106 * t2322 + t2116 * t2326;
t2099 = -t2102 * t2322 + t2107 * t2326;
t2098 = -t2315 * t2105 + t2318 * t2366;
t2097 = t2318 * t2105 + t2315 * t2366;
t2096 = -t2315 * t2101 + t2318 * t2367;
t2095 = t2318 * t2101 + t2315 * t2367;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2299 * t2313 + t2300 * t2316, 0, 0, 0, 0, 0, 0, -t2287 * t2313 + t2297 * t2316, -t2286 * t2313 - t2316 * t2338, 0, -t2225 * t2313 + t2238 * t2316, 0, 0, 0, 0, 0, 0, -t2199 * t2313 + t2219 * t2316, -t2193 * t2313 + t2214 * t2316, -t2189 * t2313 + t2211 * t2316, -t2146 * t2313 + t2161 * t2316, 0, 0, 0, 0, 0, 0, -t2148 * t2313 + t2162 * t2316, -t2151 * t2313 + t2163 * t2316, -t2138 * t2313 + t2155 * t2316, -t2113 * t2313 + t2123 * t2316, 0, 0, 0, 0, 0, 0, t2109, t2111, t2104, -t2098 * t2313 + t2100 * t2316, 0, 0, 0, 0, 0, 0, t2109, t2111, t2104, -t2096 * t2313 + t2099 * t2316; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299 * t2316 + t2300 * t2313, 0, 0, 0, 0, 0, 0, t2287 * t2316 + t2297 * t2313, t2286 * t2316 - t2313 * t2338, 0, t2225 * t2316 + t2238 * t2313, 0, 0, 0, 0, 0, 0, t2199 * t2316 + t2219 * t2313, t2193 * t2316 + t2214 * t2313, t2189 * t2316 + t2211 * t2313, t2146 * t2316 + t2161 * t2313, 0, 0, 0, 0, 0, 0, t2148 * t2316 + t2162 * t2313, t2151 * t2316 + t2163 * t2313, t2138 * t2316 + t2155 * t2313, t2113 * t2316 + t2123 * t2313, 0, 0, 0, 0, 0, 0, t2108, t2110, t2103, t2098 * t2316 + t2100 * t2313, 0, 0, 0, 0, 0, 0, t2108, t2110, t2103, t2096 * t2316 + t2099 * t2313; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2312, 0, 0, 0, 0, 0, 0, t2285, t2284, 0, t2224, 0, 0, 0, 0, 0, 0, t2198, t2192, t2188, t2145, 0, 0, 0, 0, 0, 0, t2147, t2150, t2137, t2112, 0, 0, 0, 0, 0, 0, t2117, t2121, t2114, t2097, 0, 0, 0, 0, 0, 0, t2117, t2121, t2114, t2095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2300, 0, 0, 0, 0, 0, 0, t2297, -t2338, 0, t2238, 0, 0, 0, 0, 0, 0, t2219, t2214, t2211, t2161, 0, 0, 0, 0, 0, 0, t2162, t2163, t2155, t2123, 0, 0, 0, 0, 0, 0, t2129, t2130, t2124, t2100, 0, 0, 0, 0, 0, 0, t2129, t2130, t2124, t2099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299, 0, 0, 0, 0, 0, 0, t2287, t2286, 0, t2225, 0, 0, 0, 0, 0, 0, t2199, t2193, t2189, t2146, 0, 0, 0, 0, 0, 0, t2148, t2151, t2138, t2113, 0, 0, 0, 0, 0, 0, t2118, t2122, t2115, t2098, 0, 0, 0, 0, 0, 0, t2118, t2122, t2115, t2096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2312, 0, 0, 0, 0, 0, 0, t2285, t2284, 0, t2224, 0, 0, 0, 0, 0, 0, t2198, t2192, t2188, t2145, 0, 0, 0, 0, 0, 0, t2147, t2150, t2137, t2112, 0, 0, 0, 0, 0, 0, t2117, t2121, t2114, t2097, 0, 0, 0, 0, 0, 0, t2117, t2121, t2114, t2095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2327, -qJDD(2), 0, t2260, 0, 0, 0, 0, 0, 0, t2257, t2253, t2242, t2190, 0, 0, 0, 0, 0, 0, t2200, t2201, t2191, t2152, 0, 0, 0, 0, 0, 0, t2157, t2160, t2149, t2116, 0, 0, 0, 0, 0, 0, t2157, t2160, t2149, t2107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2327, 0, t2259, 0, 0, 0, 0, 0, 0, t2240, t2232, t2230, t2178, 0, 0, 0, 0, 0, 0, t2183, t2187, t2167, t2134, 0, 0, 0, 0, 0, 0, t2141, t2144, t2136, t2106, 0, 0, 0, 0, 0, 0, t2141, t2144, t2136, t2102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2277, 0, 0, 0, 0, 0, 0, t2239, t2231, t2229, t2177, 0, 0, 0, 0, 0, 0, t2182, t2186, t2166, t2133, 0, 0, 0, 0, 0, 0, t2140, t2143, t2135, t2105, 0, 0, 0, 0, 0, 0, t2140, t2143, t2135, t2101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2283, t2280, t2266, t2218, 0, 0, 0, 0, 0, 0, t2221, t2227, t2207, t2159, 0, 0, 0, 0, 0, 0, t2169, t2174, t2165, t2128, 0, 0, 0, 0, 0, 0, t2169, t2174, t2165, t2120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2279, t2271, t2265, t2217, 0, 0, 0, 0, 0, 0, -t2233, -t2235, -t2243, -t2209, 0, 0, 0, 0, 0, 0, -t2194, -t2196, -t2175, -t2131, 0, 0, 0, 0, 0, 0, -t2194, -t2196, -t2175, -t2125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, t2264, t2288, t2241, 0, 0, 0, 0, 0, 0, t2220, t2226, t2206, t2158, 0, 0, 0, 0, 0, 0, t2168, t2173, t2164, t2127, 0, 0, 0, 0, 0, 0, t2168, t2173, t2164, t2119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2249, t2245, t2234, t2185, 0, 0, 0, 0, 0, 0, t2195, t2197, t2176, t2132, 0, 0, 0, 0, 0, 0, t2195, t2197, t2176, t2126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2246, t2256, t2236, t2184, 0, 0, 0, 0, 0, 0, -t2202, -t2204, -t2223, -t2171, 0, 0, 0, 0, 0, 0, -t2202, -t2204, -t2223, -t2156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2233, t2235, t2243, t2209, 0, 0, 0, 0, 0, 0, t2194, t2196, t2175, t2131, 0, 0, 0, 0, 0, 0, t2194, t2196, t2175, t2125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2228, t2216, t2203, t2154, 0, 0, 0, 0, 0, 0, t2228, t2216, t2203, t2142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215, t2237, t2205, t2153, 0, 0, 0, 0, 0, 0, t2215, t2237, t2205, t2139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2202, t2204, t2223, t2171, 0, 0, 0, 0, 0, 0, t2202, t2204, t2223, t2156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2228, t2216, t2203, t2142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2215, t2237, t2205, t2139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2202, t2204, t2223, t2156;];
f_new_reg  = t1;
