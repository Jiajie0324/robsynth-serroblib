% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRRRP5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRP5_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:06:43
% EndTime: 2019-05-05 10:07:00
% DurationCPUTime: 7.28s
% Computational Cost: add. (38852->468), mult. (80585->687), div. (0->0), fcn. (65468->14), ass. (0->336)
t260 = cos(pkin(7));
t254 = qJD(2) * t260 + qJD(3);
t262 = sin(qJ(4));
t266 = cos(qJ(4));
t263 = sin(qJ(3));
t258 = sin(pkin(7));
t337 = qJD(2) * t258;
t321 = t263 * t337;
t234 = t254 * t262 + t266 * t321;
t261 = sin(qJ(5));
t265 = cos(qJ(5));
t267 = cos(qJ(3));
t336 = qJD(2) * t267;
t252 = t258 * t336;
t331 = t252 - qJD(4);
t215 = t234 * t261 + t265 * t331;
t217 = t265 * t234 - t261 * t331;
t181 = t217 * t215;
t329 = qJDD(2) * t263;
t330 = qJD(2) * qJD(3);
t239 = (t267 * t330 + t329) * t258;
t253 = qJDD(2) * t260 + qJDD(3);
t318 = t262 * t239 - t266 * t253;
t197 = -t234 * qJD(4) - t318;
t196 = qJDD(5) - t197;
t393 = -t181 + t196;
t401 = pkin(5) * t393;
t232 = -t266 * t254 + t262 * t321;
t293 = -t266 * t239 - t262 * t253;
t198 = -t232 * qJD(4) - t293;
t328 = qJDD(2) * t267;
t288 = t263 * t330 - t328;
t281 = t288 * t258;
t279 = qJDD(4) + t281;
t159 = -t215 * qJD(5) + t265 * t198 + t261 * t279;
t228 = qJD(5) + t232;
t193 = t228 * t215;
t135 = t193 + t159;
t400 = qJ(6) * t135;
t352 = t393 * t261;
t351 = t393 * t265;
t264 = sin(qJ(2));
t357 = sin(pkin(12));
t358 = cos(pkin(12));
t284 = -g(1) * t358 - g(2) * t357;
t380 = cos(qJ(2));
t259 = sin(pkin(6));
t283 = g(1) * t357 - g(2) * t358;
t359 = cos(pkin(6));
t277 = t359 * t283;
t342 = -g(3) + qJDD(1);
t391 = t259 * t342 + t277;
t211 = -t264 * t284 + t380 * t391;
t268 = qJD(2) ^ 2;
t373 = pkin(9) * t258;
t272 = qJDD(2) * pkin(2) + t268 * t373 + t211;
t275 = -t259 * t283 + t342 * t359;
t399 = t258 * t275 + t260 * t272;
t214 = t217 ^ 2;
t226 = t228 ^ 2;
t177 = -t214 - t226;
t213 = t215 ^ 2;
t319 = t198 * t261 - t265 * t279;
t158 = -qJD(5) * t217 - t319;
t186 = pkin(5) * t228 - qJ(6) * t217;
t270 = t399 * t263;
t212 = t264 * t391 + t380 * t284;
t202 = -t268 * pkin(2) + qJDD(2) * t373 + t212;
t379 = pkin(3) * t267;
t312 = -pkin(10) * t263 - t379;
t307 = t312 * t337 ^ 2 + t202;
t389 = t254 ^ 2;
t142 = -pkin(3) * t389 + t253 * pkin(10) + t267 * t307 + t270;
t273 = t260 * t275;
t316 = qJD(2) * (qJD(3) + t254);
t269 = t273 - t239 * pkin(10) + (-t254 * pkin(10) * t336 + (t263 * t316 - t328) * pkin(3) - t272) * t258;
t103 = t266 * t142 + t262 * t269;
t203 = pkin(4) * t232 - pkin(11) * t234;
t327 = t331 ^ 2;
t82 = -pkin(4) * t327 + pkin(11) * t279 - t232 * t203 + t103;
t338 = t399 * t267;
t141 = -t253 * pkin(3) - t389 * pkin(10) + t263 * t307 - t338;
t224 = t331 * t232;
t174 = t198 + t224;
t317 = t234 * t331;
t99 = -t174 * pkin(11) + (-t197 - t317) * pkin(4) + t141;
t57 = t261 * t99 + t265 * t82;
t289 = t158 * qJ(6) - 0.2e1 * qJD(6) * t215 - t186 * t228 + t57;
t398 = -t289 + (t177 + t213) * pkin(5);
t255 = t258 ^ 2;
t396 = t255 * t267;
t346 = t234 * t232;
t276 = t279 - t346;
t395 = t262 * t276;
t394 = t266 * t276;
t392 = -t193 + t159;
t132 = (qJD(5) - t228) * t217 + t319;
t230 = t232 ^ 2;
t231 = t234 ^ 2;
t161 = -t213 - t214;
t94 = -t132 * t265 + t135 * t261;
t73 = -t161 * t266 + t262 * t94;
t388 = pkin(3) * t73;
t166 = -t226 - t213;
t113 = t166 * t265 - t352;
t131 = (qJD(5) + t228) * t217 + t319;
t78 = t113 * t262 - t131 * t266;
t387 = pkin(3) * t78;
t146 = t181 + t196;
t353 = t146 * t265;
t117 = -t177 * t261 - t353;
t84 = t117 * t262 - t266 * t392;
t386 = pkin(3) * t84;
t334 = qJD(6) * t217;
t208 = -0.2e1 * t334;
t56 = t261 * t82 - t265 * t99;
t285 = -t400 - t56 + t401;
t39 = t208 + t285;
t385 = pkin(5) * t39;
t384 = pkin(10) * t73;
t383 = pkin(10) * t78;
t382 = pkin(10) * t84;
t92 = -t132 * t261 - t135 * t265;
t381 = pkin(11) * t92;
t112 = t166 * t261 + t351;
t378 = pkin(4) * t112;
t354 = t146 * t261;
t116 = t177 * t265 - t354;
t377 = pkin(4) * t116;
t376 = pkin(4) * t262;
t375 = pkin(4) * t266;
t374 = pkin(5) * t135;
t372 = pkin(11) * t112;
t371 = pkin(11) * t116;
t74 = t161 * t262 + t266 * t94;
t304 = t263 * t74 - t267 * t92;
t33 = -t258 * t73 + t260 * t304;
t52 = t263 * t92 + t267 * t74;
t370 = pkin(2) * t33 + t52 * t373;
t79 = t113 * t266 + t131 * t262;
t303 = -t112 * t267 + t263 * t79;
t41 = -t258 * t78 + t260 * t303;
t63 = t112 * t263 + t267 * t79;
t369 = pkin(2) * t41 + t63 * t373;
t85 = t117 * t266 + t262 * t392;
t302 = -t116 * t267 + t263 * t85;
t44 = -t258 * t84 + t260 * t302;
t69 = t116 * t263 + t267 * t85;
t368 = pkin(2) * t44 + t69 * t373;
t367 = -pkin(3) * t92 + pkin(10) * t74;
t366 = t261 * t39;
t102 = t142 * t262 - t266 * t269;
t81 = -t279 * pkin(4) - t327 * pkin(11) + t203 * t234 + t102;
t365 = t261 * t81;
t364 = t265 * t39;
t363 = t265 * t81;
t362 = -pkin(3) * t112 + pkin(10) * t79;
t361 = -pkin(3) * t116 + pkin(10) * t85;
t360 = -pkin(4) * t161 + pkin(11) * t94;
t356 = t141 * t262;
t355 = t141 * t266;
t190 = -t346 - t279;
t350 = t190 * t262;
t349 = t190 * t266;
t348 = t228 * t261;
t347 = t228 * t265;
t345 = t255 * t268;
t249 = t263 * t267 * t345;
t236 = t249 + t253;
t344 = t263 * t236;
t237 = -t249 + t253;
t343 = t267 * t237;
t341 = pkin(4) * t131 - pkin(11) * t113;
t340 = pkin(4) * t392 - pkin(11) * t117;
t333 = 0.2e1 * qJD(4) - t252;
t326 = t262 * t181;
t325 = t266 * t181;
t256 = t263 ^ 2;
t324 = t256 * t345;
t257 = t267 ^ 2;
t323 = t257 * t345;
t322 = t267 * t346;
t28 = t261 * t56 + t265 * t57;
t66 = t102 * t262 + t266 * t103;
t315 = -pkin(4) * t81 + pkin(11) * t28;
t314 = -t341 - t363;
t313 = -t340 + t365;
t311 = t262 * t317;
t310 = t262 * t224;
t309 = t266 * t317;
t308 = t266 * t224;
t42 = -pkin(5) * t213 + t289;
t22 = t265 * t42 - t366;
t61 = -t158 * pkin(5) - t213 * qJ(6) + t186 * t217 + qJDD(6) + t81;
t17 = t22 * t266 + t262 * t61;
t21 = t261 * t42 + t364;
t306 = t17 * t263 - t21 * t267;
t24 = t262 * t81 + t266 * t28;
t27 = t261 * t57 - t265 * t56;
t305 = t24 * t263 - t267 * t27;
t301 = -t141 * t267 + t263 * t66;
t65 = -t102 * t266 + t103 * t262;
t171 = t234 * t252 + t318;
t175 = t198 - t224;
t139 = -t171 * t266 + t175 * t262;
t185 = t230 + t231;
t300 = t139 * t263 + t185 * t267;
t148 = t263 * t202 - t338;
t149 = t267 * t202 + t270;
t299 = -t148 * t267 + t149 * t263;
t108 = t148 * t263 + t149 * t267;
t199 = -t327 - t230;
t156 = t199 * t266 - t395;
t172 = -t234 * t333 - t318;
t298 = t156 * t263 + t172 * t267;
t205 = -t231 - t327;
t163 = -t205 * t262 + t349;
t176 = t232 * t333 + t293;
t297 = t163 * t263 + t176 * t267;
t244 = t254 * t252;
t221 = -t244 + t239;
t243 = t254 * t321;
t222 = t243 - t281;
t296 = -t221 * t267 + t222 * t263;
t227 = -t324 - t389;
t295 = t227 * t267 - t237 * t263;
t240 = -t323 - t389;
t294 = t236 * t267 + t240 * t263;
t292 = t28 + t360;
t291 = qJD(2) * t254 - t260 * t268;
t34 = -qJ(6) * t132 + (-t161 - t213) * pkin(5) + t289;
t209 = 0.2e1 * t334;
t37 = t209 - t285 + t400;
t287 = t261 * t37 + t265 * t34 + t360;
t105 = -pkin(5) * t392 - qJ(6) * t146;
t58 = -qJ(6) * t177 + t61;
t286 = t105 * t265 + t261 * t58 - t340;
t49 = -pkin(5) * t131 + qJ(6) * t166 - t61;
t282 = -qJ(6) * t352 + t265 * t49 - t341;
t280 = t285 + t401;
t26 = -pkin(5) * t61 + qJ(6) * t42;
t278 = -pkin(4) * t61 + pkin(11) * t22 - qJ(6) * t366 + t26 * t265;
t242 = (-t256 - t257) * t345;
t241 = (t256 - t257) * t345;
t223 = -t243 - t281;
t220 = (t267 * t316 + t329) * t258;
t219 = -t231 + t327;
t218 = t230 - t327;
t206 = t240 * t267 - t344;
t204 = t231 - t230;
t201 = -t227 * t263 - t343;
t188 = -t214 + t226;
t187 = t213 - t226;
t184 = t310 + t309;
t183 = t221 * t263 + t222 * t267;
t182 = t258 * t272 - t273;
t179 = t214 - t213;
t178 = t223 * t258 + t260 * t294;
t170 = -t220 * t258 + t260 * t295;
t169 = t262 * t198 - t309;
t168 = t266 * t197 - t310;
t167 = -t242 * t258 + t260 * t296;
t165 = t218 * t262 - t349;
t164 = t219 * t266 + t395;
t162 = t205 * t266 + t350;
t155 = t199 * t262 + t394;
t151 = (-t215 * t265 + t217 * t261) * t228;
t150 = (-t215 * t261 - t217 * t265) * t228;
t138 = -t171 * t262 - t175 * t266;
t137 = t172 * t262 + t174 * t266;
t128 = t159 * t265 - t217 * t348;
t127 = t159 * t261 + t217 * t347;
t126 = -t158 * t261 + t215 * t347;
t125 = -t265 * t158 - t215 * t348;
t124 = t151 * t262 - t196 * t266;
t123 = t187 * t265 - t354;
t122 = -t188 * t261 + t351;
t121 = t187 * t261 + t353;
t120 = t188 * t265 + t352;
t119 = t163 * t267 - t176 * t263;
t118 = t156 * t267 - t172 * t263;
t109 = t139 * t267 - t185 * t263;
t107 = t128 * t262 - t325;
t106 = t126 * t262 + t325;
t104 = -t162 * t258 + t260 * t297;
t100 = -t155 * t258 + t260 * t298;
t96 = t182 * t258 + t260 * t299;
t95 = -t131 * t265 - t261 * t392;
t93 = -t131 * t261 + t265 * t392;
t89 = pkin(3) * t176 + pkin(10) * t163 + t356;
t88 = pkin(3) * t172 + pkin(10) * t156 - t355;
t87 = t123 * t262 + t132 * t266;
t86 = t122 * t262 - t135 * t266;
t76 = -t138 * t258 + t260 * t300;
t75 = -t179 * t266 + t262 * t95;
t71 = t260 * t124 + (t263 * (t151 * t266 + t196 * t262) - t267 * t150) * t258;
t70 = -pkin(4) * t92 + t374;
t67 = t363 - t371;
t64 = t365 - t372;
t60 = t260 * t107 + (t263 * (t128 * t266 + t326) - t267 * t127) * t258;
t59 = t260 * t106 + (t263 * (t126 * t266 - t326) + t267 * t125) * t258;
t54 = -pkin(3) * t141 + pkin(10) * t66;
t53 = t141 * t263 + t267 * t66;
t50 = pkin(3) * t185 + pkin(10) * t139 + t66;
t48 = t260 * t87 + (t263 * (t123 * t266 - t132 * t262) - t267 * t121) * t258;
t47 = t260 * t86 + (t263 * (t122 * t266 + t135 * t262) - t267 * t120) * t258;
t46 = t57 - t377;
t45 = t56 - t378;
t38 = t260 * t75 + (t263 * (t179 * t262 + t266 * t95) - t267 * t93) * t258;
t36 = -t105 * t261 + t265 * t58 - t371;
t35 = -qJ(6) * t351 - t261 * t49 - t372;
t31 = -t377 - t398;
t30 = -t258 * t65 + t260 * t301;
t29 = t209 - t280 - t378;
t25 = -t27 - t381;
t23 = t262 * t28 - t266 * t81;
t20 = t262 * t67 + t266 * t46 + t361;
t19 = t262 * t64 + t266 * t45 + t362;
t18 = t359 * (t258 * t302 + t260 * t84) + (t264 * t69 + t380 * t44) * t259;
t16 = t22 * t262 - t266 * t61;
t15 = t359 * (t258 * t303 + t260 * t78) + (t264 * t63 + t380 * t41) * t259;
t14 = -t261 * t34 + t265 * t37 - t381;
t13 = t25 * t262 - t375 * t92 + t367;
t12 = t262 * t36 + t266 * t31 + t361;
t11 = -pkin(4) * t21 - t385;
t10 = t262 * t35 + t266 * t29 + t362;
t9 = t24 * t267 + t263 * t27;
t8 = t359 * (t258 * t304 + t260 * t73) + (t264 * t52 + t33 * t380) * t259;
t7 = t14 * t262 + t266 * t70 + t367;
t6 = -pkin(11) * t21 - qJ(6) * t364 - t26 * t261;
t5 = t17 * t267 + t21 * t263;
t4 = -t23 * t258 + t260 * t305;
t3 = pkin(10) * t24 + (-pkin(11) * t262 - pkin(3) - t375) * t27;
t2 = -t16 * t258 + t260 * t306;
t1 = -pkin(3) * t21 + pkin(10) * t17 + t11 * t266 + t262 * t6;
t32 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t342, 0, 0, 0, 0, 0, 0, (qJDD(2) * t380 - t264 * t268) * t259, (-qJDD(2) * t264 - t268 * t380) * t259, 0, t359 ^ 2 * t342 + (t211 * t380 + t264 * t212 - t277) * t259, 0, 0, 0, 0, 0, 0, t359 * (-t260 * t223 + t258 * t294) + (t178 * t380 + t264 * t206) * t259, t359 * (t260 * t220 + t258 * t295) + (t170 * t380 + t264 * t201) * t259, t359 * (t260 * t242 + t258 * t296) + (t167 * t380 + t264 * t183) * t259, t359 * (-t260 * t182 + t258 * t299) + (t264 * t108 + t380 * t96) * t259, 0, 0, 0, 0, 0, 0, t359 * (t260 * t155 + t258 * t298) + (t100 * t380 + t264 * t118) * t259, t359 * (t260 * t162 + t258 * t297) + (t104 * t380 + t264 * t119) * t259, t359 * (t260 * t138 + t258 * t300) + (t264 * t109 + t380 * t76) * t259, t359 * (t258 * t301 + t260 * t65) + (t264 * t53 + t30 * t380) * t259, 0, 0, 0, 0, 0, 0, t15, t18, t8, t359 * (t260 * t23 + t258 * t305) + (t264 * t9 + t380 * t4) * t259, 0, 0, 0, 0, 0, 0, t15, t18, t8, t359 * (t260 * t16 + t258 * t306) + (t2 * t380 + t264 * t5) * t259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t211, -t212, 0, 0, (t239 * t258 + t291 * t396) * t263, t260 * t241 + (t263 * t223 + (t239 + t244) * t267) * t258, t260 * t221 + (t344 + t267 * (-t324 + t389)) * t258, (-t263 * t291 - t288) * t396, t260 * t222 + (t263 * (t323 - t389) + t343) * t258, t260 * t253, pkin(2) * t178 - t148 * t260 + (pkin(9) * t206 + t182 * t267) * t258, pkin(2) * t170 - t149 * t260 + (pkin(9) * t201 - t182 * t263) * t258, pkin(2) * t167 + (pkin(9) * t183 + t108) * t258, pkin(2) * t96 + t108 * t373, t260 * t169 + (t263 * (t266 * t198 + t311) - t322) * t258, t260 * t137 + (t263 * (t172 * t266 - t174 * t262) - t267 * t204) * t258, t260 * t164 + (t263 * (-t219 * t262 + t394) - t267 * t175) * t258, t260 * t168 + (t263 * (-t262 * t197 - t308) + t322) * t258, t260 * t165 + (t263 * (t218 * t266 + t350) + t267 * t171) * t258, t260 * t184 + (t263 * (t308 - t311) - t279 * t267) * t258, pkin(2) * t100 + t260 * t88 + (t263 * (-pkin(10) * t155 + t356) + t267 * (-pkin(3) * t155 + t102) + pkin(9) * t118) * t258, pkin(2) * t104 + t260 * t89 + (t263 * (-pkin(10) * t162 + t355) + t267 * (-pkin(3) * t162 + t103) + pkin(9) * t119) * t258, pkin(2) * t76 + t260 * t50 + (t263 * (-pkin(10) * t138 - t65) - t138 * t379 + pkin(9) * t109) * t258, pkin(2) * t30 + t260 * t54 + (pkin(9) * t53 + t312 * t65) * t258, t60, t38, t47, t59, t48, t71, t260 * t19 + (t263 * (-t262 * t45 + t266 * t64 - t383) + t267 * (-t314 - t387)) * t258 + t369, t260 * t20 + (t263 * (-t262 * t46 + t266 * t67 - t382) + t267 * (-t313 - t386)) * t258 + t368, t260 * t13 + (t263 * (t25 * t266 + t376 * t92 - t384) + t267 * (-t292 - t388)) * t258 + t370, pkin(2) * t4 + t260 * t3 + (t263 * (-pkin(10) * t23 + (-pkin(11) * t266 + t376) * t27) + t267 * (-pkin(3) * t23 - t315) + pkin(9) * t9) * t258, t60, t38, t47, t59, t48, t71, t260 * t10 + (t263 * (-t262 * t29 + t266 * t35 - t383) + t267 * (-t282 - t387)) * t258 + t369, t260 * t12 + (t263 * (-t262 * t31 + t266 * t36 - t382) + t267 * (-t286 - t386)) * t258 + t368, t260 * t7 + (t263 * (t14 * t266 - t262 * t70 - t384) + t267 * (-t287 - t388)) * t258 + t370, pkin(2) * t2 + t260 * t1 + (t263 * (-pkin(10) * t16 - t11 * t262 + t266 * t6) + t267 * (-pkin(3) * t16 - t278) + pkin(9) * t5) * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249, t241, t221, t249, t222, t253, -t148, -t149, 0, 0, t169, t137, t164, t168, t165, t184, t88, t89, t50, t54, t107, t75, t86, t106, t87, t124, t19, t20, t13, t3, t107, t75, t86, t106, t87, t124, t10, t12, t7, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t346, t204, t175, -t346, -t171, t279, -t102, -t103, 0, 0, t127, t93, t120, -t125, t121, t150, t314, t313, t292, t315, t127, t93, t120, -t125, t121, t150, t282, t286, t287, t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, t179, t135, -t181, -t132, t196, -t56, -t57, 0, 0, t181, t179, t135, -t181, -t132, t196, t208 + t280, t398, -t374, t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, t392, t161, t61;];
tauJ_reg  = t32;
