% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:17:29
% EndTime: 2019-05-05 10:19:33
% DurationCPUTime: 112.77s
% Computational Cost: add. (370306->1024), mult. (767237->1645), div. (0->0), fcn. (623809->14), ass. (0->780)
t1154 = sin(pkin(12));
t1157 = cos(pkin(12));
t1156 = sin(pkin(6));
t1159 = cos(pkin(6));
t1163 = sin(qJ(2));
t1167 = cos(qJ(2));
t1155 = sin(pkin(7));
t1158 = cos(pkin(7));
t1162 = sin(qJ(3));
t1166 = cos(qJ(3));
t1161 = sin(qJ(4));
t1165 = cos(qJ(4));
t1147 = qJD(2) * t1158 + qJD(3);
t1349 = t1155 * t1162;
t1327 = qJD(2) * t1349;
t1113 = -t1165 * t1147 + t1161 * t1327;
t1109 = qJD(5) + t1113;
t1397 = t1109 ^ 2;
t1115 = t1147 * t1161 + t1165 * t1327;
t1160 = sin(qJ(5));
t1164 = cos(qJ(5));
t1348 = t1155 * t1166;
t1145 = qJD(2) * t1348;
t1335 = t1145 - qJD(4);
t1084 = t1115 * t1160 + t1164 * t1335;
t1398 = t1084 ^ 2;
t1048 = t1398 - t1397;
t1086 = t1164 * t1115 - t1160 * t1335;
t1035 = t1086 * t1084;
t1332 = qJDD(2) * t1162;
t1367 = qJD(2) * t1166;
t1121 = (qJD(3) * t1367 + t1332) * t1155;
t1146 = qJDD(2) * t1158 + qJDD(3);
t1312 = t1161 * t1121 - t1165 * t1146;
t1060 = -t1115 * qJD(4) - t1312;
t1059 = qJDD(5) - t1060;
t1411 = t1035 + t1059;
t1383 = t1160 * t1411;
t922 = t1048 * t1164 - t1383;
t1061 = -t1113 * qJD(4) + t1165 * t1121 + t1161 * t1146;
t1331 = qJDD(2) * t1166;
t1368 = qJD(2) * t1162;
t1214 = qJD(3) * t1368 - t1331;
t1182 = t1214 * t1155;
t1178 = qJDD(4) + t1182;
t1313 = t1160 * t1061 - t1164 * t1178;
t940 = (qJD(5) - t1109) * t1086 + t1313;
t837 = -t1161 * t940 + t1165 * t922;
t1375 = t1164 * t1411;
t917 = t1048 * t1160 + t1375;
t1280 = t1162 * t837 - t1166 * t917;
t833 = t1161 * t922 + t1165 * t940;
t730 = -t1155 * t833 + t1158 * t1280;
t781 = t1162 * t917 + t1166 * t837;
t1260 = t1163 * t781 + t1167 * t730;
t726 = t1155 * t1280 + t1158 * t833;
t629 = -t1156 * t726 + t1159 * t1260;
t668 = t1163 * t730 - t1167 * t781;
t1587 = t1154 * t629 + t1157 * t668;
t1083 = t1086 ^ 2;
t1032 = t1083 - t1398;
t1174 = -t1164 * t1061 - t1160 * t1178;
t1173 = -t1084 * qJD(5) - t1174;
t1360 = t1084 * t1109;
t1407 = -t1360 + t1173;
t1385 = t1160 * t1407;
t1337 = qJD(5) + t1109;
t939 = t1086 * t1337 + t1313;
t844 = t1164 * t939 + t1385;
t804 = -t1032 * t1161 + t1165 * t844;
t840 = -t1160 * t939 + t1164 * t1407;
t1289 = t1162 * t804 + t1166 * t840;
t802 = t1032 * t1165 + t1161 * t844;
t695 = -t1155 * t802 + t1158 * t1289;
t747 = -t1162 * t840 + t1166 * t804;
t1269 = t1163 * t747 + t1167 * t695;
t693 = t1155 * t1289 + t1158 * t802;
t606 = -t1156 * t693 + t1159 * t1269;
t638 = t1163 * t695 - t1167 * t747;
t1586 = t1154 * t606 + t1157 * t638;
t1585 = -t1154 * t668 + t1157 * t629;
t1584 = -t1154 * t638 + t1157 * t606;
t1579 = t1156 * t1260 + t1159 * t726;
t1578 = t1156 * t1269 + t1159 * t693;
t1408 = -t1360 - t1173;
t1454 = -t1160 * t940 + t1164 * t1408;
t1410 = t1083 + t1398;
t1453 = -t1160 * t1408 - t1164 * t940;
t1476 = -t1161 * t1410 + t1165 * t1453;
t1495 = t1162 * t1454 + t1166 * t1476;
t1480 = t1161 * t1453 + t1165 * t1410;
t1497 = t1162 * t1476 - t1166 * t1454;
t1525 = -t1155 * t1480 + t1158 * t1497;
t1540 = -t1163 * t1525 + t1167 * t1495;
t1529 = t1155 * t1497 + t1158 * t1480;
t1538 = t1163 * t1495 + t1167 * t1525;
t1553 = -t1156 * t1529 + t1159 * t1538;
t1562 = t1154 * t1540 + t1157 * t1553;
t1573 = qJ(1) * t1562;
t1564 = -t1154 * t1553 + t1157 * t1540;
t1572 = qJ(1) * t1564;
t1571 = pkin(1) * t1553;
t1555 = t1156 * t1538 + t1159 * t1529;
t1570 = pkin(1) * t1555;
t1049 = -t1083 + t1397;
t1412 = -t1035 + t1059;
t1382 = t1160 * t1412;
t1456 = -t1049 * t1164 - t1382;
t1374 = t1164 * t1412;
t1455 = -t1049 * t1160 + t1374;
t1475 = -t1161 * t1408 + t1165 * t1455;
t1496 = -t1162 * t1456 + t1166 * t1475;
t1479 = t1161 * t1455 + t1165 * t1408;
t1498 = t1162 * t1475 + t1166 * t1456;
t1524 = -t1155 * t1479 + t1158 * t1498;
t1541 = -t1163 * t1524 + t1167 * t1496;
t1528 = t1155 * t1498 + t1158 * t1479;
t1539 = t1163 * t1496 + t1167 * t1524;
t1552 = -t1156 * t1528 + t1159 * t1539;
t1565 = -t1154 * t1552 + t1157 * t1541;
t1563 = t1154 * t1541 + t1157 * t1552;
t1561 = (-t1156 * t1555 - t1159 * t1553) * pkin(8);
t1560 = pkin(8) * t1540;
t1554 = t1156 * t1539 + t1159 * t1528;
t1551 = pkin(2) * t1525;
t1550 = pkin(2) * t1529;
t1537 = (-t1155 * t1529 - t1158 * t1525) * pkin(9);
t1536 = pkin(9) * t1495;
t1356 = t1109 * t1164;
t1046 = t1086 * t1356;
t1357 = t1109 * t1160;
t1324 = t1084 * t1357;
t1300 = t1046 + t1324;
t1045 = t1086 * t1357;
t1323 = t1084 * t1356;
t1301 = t1045 - t1323;
t1402 = t1059 * t1161 + t1165 * t1301;
t1427 = -t1162 * t1300 + t1166 * t1402;
t1405 = -t1165 * t1059 + t1161 * t1301;
t1430 = t1162 * t1402 + t1166 * t1300;
t1448 = -t1155 * t1405 + t1158 * t1430;
t1478 = -t1163 * t1448 + t1167 * t1427;
t1451 = t1155 * t1430 + t1158 * t1405;
t1474 = t1163 * t1427 + t1167 * t1448;
t1499 = -t1156 * t1451 + t1159 * t1474;
t1531 = -t1154 * t1499 + t1157 * t1478;
t984 = -qJD(5) * t1086 - t1313;
t1218 = -t1164 * t984 - t1324;
t1219 = -t1160 * t984 + t1323;
t1326 = t1161 * t1035;
t1403 = t1165 * t1219 - t1326;
t1426 = -t1162 * t1218 + t1166 * t1403;
t1325 = t1165 * t1035;
t1404 = t1161 * t1219 + t1325;
t1429 = t1162 * t1403 + t1166 * t1218;
t1449 = -t1155 * t1404 + t1158 * t1429;
t1477 = -t1163 * t1449 + t1167 * t1426;
t1452 = t1155 * t1429 + t1158 * t1404;
t1473 = t1163 * t1426 + t1167 * t1449;
t1500 = -t1156 * t1452 + t1159 * t1473;
t1530 = -t1154 * t1500 + t1157 * t1477;
t1527 = t1154 * t1478 + t1157 * t1499;
t1526 = t1154 * t1477 + t1157 * t1500;
t1000 = t1397 + t1083;
t896 = t1000 * t1164 + t1383;
t1523 = pkin(3) * t896;
t1522 = pkin(4) * t896;
t1521 = pkin(11) * t896;
t904 = t1000 * t1160 - t1375;
t1520 = pkin(11) * t904;
t1519 = pkin(10) * t1476;
t1518 = pkin(10) * t1480;
t1517 = t1161 * t904;
t1516 = t1162 * t896;
t1514 = t1165 * t904;
t1513 = t1166 * t896;
t1503 = -pkin(3) * t1480 - pkin(4) * t1410 - pkin(11) * t1453;
t1502 = t1156 * t1473 + t1159 * t1452;
t1501 = t1156 * t1474 + t1159 * t1451;
t1494 = pkin(11) * t1454;
t938 = t1164 * t1173 - t1045;
t1306 = t1161 * t938 - t1325;
t1307 = t1165 * t938 + t1326;
t1345 = t1158 * t1166;
t937 = -t1160 * t1173 - t1046;
t1400 = t1158 * t1162 * t1307 - t1155 * t1306 + t937 * t1345;
t1401 = -t1162 * t937 + t1166 * t1307;
t1424 = -t1163 * t1400 + t1167 * t1401;
t1399 = t1158 * t1306 + t1307 * t1349 + t937 * t1348;
t1425 = t1163 * t1401 + t1167 * t1400;
t1447 = -t1156 * t1399 + t1159 * t1425;
t1482 = -t1154 * t1447 + t1157 * t1424;
t1481 = t1154 * t1424 + t1157 * t1447;
t1406 = -t1397 - t1398;
t1431 = t1160 * t1406 + t1374;
t1472 = pkin(3) * t1431;
t1471 = pkin(4) * t1431;
t1428 = t1164 * t1406 - t1382;
t1470 = pkin(11) * t1428;
t1469 = pkin(11) * t1431;
t1464 = t1161 * t1428;
t1463 = t1162 * t1431;
t1460 = t1165 * t1428;
t1459 = t1166 * t1431;
t1450 = t1156 * t1425 + t1159 * t1399;
t1446 = 2 * qJD(6);
t1444 = qJ(6) * t1407;
t1100 = t1113 * t1335;
t1018 = t1100 + t1061;
t1389 = g(3) - qJDD(1);
t1315 = t1156 * t1389;
t1149 = t1157 * g(2);
t1316 = g(1) * t1154 - t1149;
t1180 = t1159 * t1316 - t1315;
t1308 = g(1) * t1157 + g(2) * t1154;
t1079 = -t1163 * t1308 - t1167 * t1180;
t1168 = qJD(2) ^ 2;
t1390 = pkin(9) * t1155;
t1172 = qJDD(2) * pkin(2) + t1168 * t1390 - t1079;
t1133 = t1156 * t1316;
t1295 = t1159 * t1389 + t1133;
t1433 = -t1155 * t1295 + t1158 * t1172;
t1302 = t1165 * t1100;
t1314 = t1115 * t1335;
t1305 = t1161 * t1314;
t1040 = t1302 - t1305;
t1432 = t1162 * t1040 - t1166 * t1178;
t1330 = t1335 ^ 2;
t1080 = t1163 * t1180 - t1167 * t1308;
t1024 = t1079 * t1163 + t1080 * t1167;
t1423 = t1024 * t1156;
t1151 = t1155 ^ 2;
t1422 = t1151 * t1166;
t1421 = t1154 * t1389;
t1420 = t1157 * t1389;
t1355 = t1113 * t1115;
t1175 = t1178 - t1355;
t1419 = t1161 * t1175;
t1212 = t1163 * t1295;
t1416 = t1165 * t1175;
t1211 = t1167 * t1295;
t1131 = t1147 * t1327;
t1409 = t1131 + t1182;
t1132 = t1147 * t1145;
t1096 = t1132 + t1121;
t1031 = pkin(5) * t1084 - qJ(6) * t1086;
t1071 = pkin(4) * t1113 - pkin(11) * t1115;
t1036 = t1155 * t1172 + t1158 * t1295;
t1170 = pkin(3) * t1409 - pkin(10) * t1096 - t1036;
t1394 = pkin(3) * t1166;
t1309 = -pkin(10) * t1162 - t1394;
t1369 = qJD(2) * t1155;
t1120 = t1309 * t1369;
t1396 = t1147 ^ 2;
t1069 = -t1168 * pkin(2) + qJDD(2) * t1390 + t1080;
t972 = t1166 * t1069 + t1162 * t1433;
t954 = -pkin(3) * t1396 + t1146 * pkin(10) + t1120 * t1145 + t972;
t865 = t1161 * t1170 + t1165 * t954;
t819 = -pkin(4) * t1330 + pkin(11) * t1178 - t1113 * t1071 + t865;
t1336 = t1433 * t1166;
t953 = -t1146 * pkin(3) - t1396 * pkin(10) + (t1120 * t1369 + t1069) * t1162 - t1336;
t856 = -t1018 * pkin(11) + (-t1060 - t1314) * pkin(4) + t953;
t752 = t1160 * t856 + t1164 * t819;
t1299 = t1059 * qJ(6) - t1084 * t1031 + t1109 * t1446 + t752;
t1103 = -t1154 * t1316 - t1157 * t1308;
t1111 = t1113 ^ 2;
t1112 = t1115 ^ 2;
t1395 = pkin(3) * t1162;
t1393 = pkin(4) * t1161;
t1392 = pkin(5) * t1164;
t1391 = pkin(8) * t1159;
t751 = t1160 * t819 - t1164 * t856;
t1388 = qJ(6) * t1164;
t864 = t1161 * t954 - t1165 * t1170;
t818 = -t1178 * pkin(4) - t1330 * pkin(11) + t1071 * t1115 + t864;
t1387 = t1160 * t818;
t1380 = t1161 * t953;
t1378 = t1164 * t818;
t1372 = t1165 * t953;
t1371 = -t1397 + t1410;
t1370 = qJD(2) * t1147;
t1051 = -t1178 - t1355;
t1363 = t1051 * t1161;
t1362 = t1051 * t1165;
t1359 = t1086 * t1109;
t1328 = t1147 * t1369;
t1152 = t1162 ^ 2;
t1153 = t1166 ^ 2;
t1334 = t1152 + t1153;
t1101 = t1334 * t1328;
t1358 = t1101 * t1163;
t1340 = t1166 * t1168;
t1318 = t1162 * t1340;
t1142 = t1151 * t1318;
t1118 = t1142 + t1146;
t1354 = t1118 * t1162;
t1353 = t1118 * t1166;
t1119 = -t1142 + t1146;
t1352 = t1119 * t1162;
t1351 = t1119 * t1166;
t1350 = t1151 * t1168;
t1347 = t1155 * t1167;
t1344 = t1162 * t1036;
t1342 = t1166 * t1036;
t1339 = qJD(3) + t1147;
t1333 = qJDD(2) * t1156;
t1329 = -pkin(4) * t1165 - pkin(3);
t1322 = t1162 * t1355;
t1321 = t1166 * t1355;
t1320 = t1152 * t1350;
t1319 = t1153 * t1350;
t1317 = qJ(6) * t1160 + pkin(4);
t769 = t1161 * t864 + t1165 * t865;
t1310 = t1086 * t1031 + qJDD(6) + t751;
t1304 = t1161 * t1100;
t1303 = t1165 * t1314;
t1108 = -t1320 - t1396;
t1068 = -t1108 * t1162 - t1351;
t1298 = pkin(9) * t1068 - t1344;
t1124 = -t1319 - t1396;
t1077 = t1124 * t1166 - t1354;
t1297 = pkin(9) * t1077 + t1342;
t1296 = g(2) * t1154 ^ 2 + t1149 * t1157;
t670 = t1160 * t752 - t1164 * t751;
t671 = t1160 * t751 + t1164 * t752;
t768 = t1161 * t865 - t1165 * t864;
t722 = -pkin(5) * t1397 + t1299;
t1217 = -pkin(5) * t1059 + t1310;
t733 = qJ(6) * t1397 - t1217;
t646 = -t1160 * t733 + t1164 * t722;
t1177 = -t984 * pkin(5) - t1444 + t818;
t746 = (pkin(5) * t1109 - (2 * qJD(6))) * t1086 + t1177;
t618 = t1161 * t746 + t1165 * t646;
t645 = t1160 * t722 + t1164 * t733;
t1294 = t1162 * t618 - t1166 * t645;
t644 = t1161 * t818 + t1165 * t671;
t1293 = t1162 * t644 - t1166 * t670;
t1292 = t1162 * t769 - t1166 * t953;
t814 = -t1161 * t1407 - t1514;
t1287 = t1162 * t814 - t1513;
t815 = t1161 * t939 + t1460;
t1286 = t1162 * t815 - t1459;
t947 = t1084 * t1337 + t1174;
t824 = -t1161 * t947 + t1514;
t1285 = t1162 * t824 + t1513;
t941 = -t984 + t1359;
t825 = t1161 * t941 + t1460;
t1284 = t1162 * t825 - t1459;
t971 = t1162 * t1069 - t1336;
t1275 = t1162 * t972 - t1166 * t971;
t886 = t1162 * t971 + t1166 * t972;
t617 = t1161 * t646 - t1165 * t746;
t554 = -t1155 * t617 + t1158 * t1294;
t578 = t1162 * t645 + t1166 * t618;
t1274 = t1163 * t578 + t1167 * t554;
t643 = t1161 * t671 - t1165 * t818;
t574 = -t1155 * t643 + t1158 * t1293;
t604 = t1162 * t670 + t1166 * t644;
t1273 = t1163 * t604 + t1167 * t574;
t675 = -t1155 * t768 + t1158 * t1292;
t744 = t1162 * t953 + t1166 * t769;
t1272 = t1163 * t744 + t1167 * t675;
t812 = t1165 * t1407 - t1517;
t709 = -t1155 * t812 + t1158 * t1287;
t764 = t1166 * t814 + t1516;
t1267 = t1163 * t764 + t1167 * t709;
t813 = -t1165 * t939 + t1464;
t710 = -t1155 * t813 + t1158 * t1286;
t765 = t1166 * t815 + t1463;
t1266 = t1163 * t765 + t1167 * t710;
t822 = t1165 * t947 + t1517;
t715 = -t1155 * t822 + t1158 * t1285;
t773 = t1166 * t824 - t1516;
t1265 = t1163 * t773 + t1167 * t715;
t823 = -t1165 * t941 + t1464;
t716 = -t1155 * t823 + t1158 * t1284;
t774 = t1166 * t825 + t1463;
t1264 = t1163 * t774 + t1167 * t716;
t1044 = t1111 + t1112;
t1015 = t1115 * t1145 + t1312;
t1020 = -t1061 + t1100;
t951 = -t1015 * t1165 - t1020 * t1161;
t1239 = t1044 * t1166 + t1162 * t951;
t949 = -t1015 * t1161 + t1020 * t1165;
t810 = -t1155 * t949 + t1158 * t1239;
t889 = -t1044 * t1162 + t1166 * t951;
t1253 = t1163 * t889 + t1167 * t810;
t1073 = -t1112 + t1111;
t1016 = (-0.2e1 * qJD(4) + t1145) * t1115 - t1312;
t950 = t1016 * t1165 - t1018 * t1161;
t1238 = t1073 * t1166 + t1162 * t950;
t948 = t1016 * t1161 + t1018 * t1165;
t821 = -t1155 * t948 + t1158 * t1238;
t901 = -t1073 * t1162 + t1166 * t950;
t1252 = t1163 * t901 + t1167 * t821;
t853 = t1155 * t1036 + t1158 * t1275;
t1251 = t1163 * t886 + t1167 * t853;
t1066 = -t1330 - t1111;
t982 = t1066 * t1165 - t1419;
t1242 = t1016 * t1166 + t1162 * t982;
t981 = t1066 * t1161 + t1416;
t858 = -t1155 * t981 + t1158 * t1242;
t910 = -t1016 * t1162 + t1166 * t982;
t1250 = t1163 * t910 + t1167 * t858;
t1074 = -t1112 - t1330;
t992 = -t1074 * t1161 + t1362;
t1241 = -t1018 * t1166 + t1162 * t992;
t991 = t1074 * t1165 + t1363;
t867 = -t1155 * t991 + t1158 * t1241;
t914 = t1018 * t1162 + t1166 * t992;
t1249 = t1163 * t914 + t1167 * t867;
t1094 = -t1112 + t1330;
t997 = -t1094 * t1161 + t1416;
t1240 = t1020 * t1166 + t1162 * t997;
t995 = t1094 * t1165 + t1419;
t870 = -t1155 * t995 + t1158 * t1240;
t923 = -t1020 * t1162 + t1166 * t997;
t1248 = t1163 * t923 + t1167 * t870;
t1093 = t1111 - t1330;
t998 = t1093 * t1165 + t1363;
t1243 = t1015 * t1166 + t1162 * t998;
t996 = t1093 * t1161 - t1362;
t871 = -t1155 * t996 + t1158 * t1243;
t924 = -t1015 * t1162 + t1166 * t998;
t1247 = t1163 * t924 + t1167 * t871;
t1008 = t1165 * t1060 - t1304;
t1009 = -t1161 * t1060 - t1302;
t1216 = t1009 * t1162 + t1321;
t892 = -t1155 * t1008 + t1158 * t1216;
t964 = t1009 * t1166 - t1322;
t1246 = t1163 * t964 + t1167 * t892;
t1010 = t1161 * t1061 - t1303;
t1011 = t1165 * t1061 + t1305;
t1215 = t1011 * t1162 - t1321;
t893 = -t1155 * t1010 + t1158 * t1215;
t965 = t1011 * t1166 + t1322;
t1245 = t1163 * t965 + t1167 * t893;
t1007 = t1166 * t1040 + t1162 * t1178;
t1039 = t1304 + t1303;
t958 = -t1155 * t1039 + t1158 * t1432;
t1244 = t1007 * t1163 + t1167 * t958;
t1237 = -t1158 * t1168 + t1370;
t1130 = t1334 * t1350;
t1097 = -t1132 + t1121;
t1098 = t1131 - t1182;
t1227 = -t1097 * t1166 + t1098 * t1162;
t1005 = t1155 * t1130 + t1158 * t1227;
t1037 = t1097 * t1162 + t1098 * t1166;
t1236 = t1005 * t1167 + t1037 * t1163;
t1129 = (t1152 - t1153) * t1350;
t1228 = t1096 * t1166 - t1162 * t1409;
t1006 = -t1155 * t1129 + t1158 * t1228;
t1038 = -t1096 * t1162 - t1166 * t1409;
t1235 = t1006 * t1167 + t1038 * t1163;
t1095 = (t1339 * t1367 + t1332) * t1155;
t1226 = t1108 * t1166 - t1352;
t1014 = -t1155 * t1095 + t1158 * t1226;
t1234 = t1014 * t1167 + t1068 * t1163;
t1122 = -t1320 + t1396;
t1225 = t1122 * t1166 + t1354;
t1028 = -t1155 * t1097 + t1158 * t1225;
t1075 = -t1122 * t1162 + t1353;
t1233 = t1028 * t1167 + t1075 * t1163;
t1123 = t1319 - t1396;
t1223 = t1123 * t1162 + t1351;
t1029 = -t1155 * t1098 + t1158 * t1223;
t1076 = t1123 * t1166 - t1352;
t1232 = t1029 * t1167 + t1076 * t1163;
t1224 = t1124 * t1162 + t1353;
t1030 = -t1155 * t1409 + t1158 * t1224;
t1231 = t1030 * t1167 + t1077 * t1163;
t1150 = t1155 * t1151;
t1062 = -t1150 * t1318 + (-t1339 * t1368 + t1331) * t1155 * t1345;
t1087 = (-t1153 * t1370 + t1162 * t1214) * t1155;
t1230 = t1062 * t1167 + t1087 * t1163;
t1065 = (t1096 * t1158 + t1150 * t1340) * t1162;
t1088 = t1121 * t1166 - t1152 * t1328;
t1229 = t1065 * t1167 + t1088 * t1163;
t1023 = t1167 * t1079 - t1163 * t1080;
t1221 = qJDD(2) * t1163 + t1167 * t1168;
t1127 = t1221 * t1159;
t1140 = qJDD(2) * t1167 - t1163 * t1168;
t1222 = t1127 * t1157 + t1140 * t1154;
t1091 = t1127 * t1154 - t1140 * t1157;
t593 = -pkin(4) * t645 - pkin(5) * t733 - qJ(6) * t722;
t597 = -pkin(11) * t645 + (pkin(5) * t1160 - t1388) * t746;
t548 = -pkin(10) * t617 - t1161 * t593 + t1165 * t597;
t561 = -pkin(3) * t617 - pkin(11) * t646 + (t1317 + t1392) * t746;
t1194 = pkin(9) * t578 + t1162 * t548 + t1166 * t561;
t541 = -pkin(3) * t645 + pkin(10) * t618 + t1161 * t597 + t1165 * t593;
t553 = t1155 * t1294 + t1158 * t617;
t511 = -pkin(2) * t553 - t1155 * t541 + t1158 * t1194;
t515 = -t1162 * t561 + t1166 * t548 + (-t1155 * t553 - t1158 * t554) * pkin(9);
t540 = -t1163 * t554 + t1167 * t578;
t1210 = pkin(8) * t540 + t1163 * t515 + t1167 * t511;
t576 = -pkin(10) * t643 + (-pkin(11) * t1165 + t1393) * t670;
t592 = -pkin(3) * t643 + pkin(4) * t818 - pkin(11) * t671;
t1193 = pkin(9) * t604 + t1162 * t576 + t1166 * t592;
t563 = pkin(10) * t644 + (-pkin(11) * t1161 + t1329) * t670;
t573 = t1155 * t1293 + t1158 * t643;
t523 = -pkin(2) * t573 - t1155 * t563 + t1158 * t1193;
t529 = -t1162 * t592 + t1166 * t576 + (-t1155 * t573 - t1158 * t574) * pkin(9);
t550 = -t1163 * t574 + t1167 * t604;
t1209 = pkin(8) * t550 + t1163 * t529 + t1167 * t523;
t706 = pkin(5) * t1371 + t1299;
t711 = qJ(6) * t1371 + t1217;
t630 = -t1160 * t706 + t1164 * t711 - t1494;
t761 = -pkin(4) * t1454 - pkin(5) * t1408 + qJ(6) * t940;
t596 = -t1161 * t761 + t1165 * t630 - t1518;
t611 = -t1160 * t711 - t1164 * t706 + t1503;
t1192 = t1162 * t596 + t1166 * t611 + t1536;
t591 = -pkin(3) * t1454 + t1161 * t630 + t1165 * t761 + t1519;
t539 = -t1155 * t591 + t1158 * t1192 - t1550;
t549 = -t1162 * t611 + t1166 * t596 + t1537;
t1208 = t1163 * t549 + t1167 * t539 + t1560;
t677 = -t1522 - qJ(6) * t1411 + (-t1000 + t1397) * pkin(5) - t1299;
t1176 = t1086 * t1446 - t1177;
t719 = -pkin(5) * t1359 + t1176 + t1444;
t679 = -pkin(5) * t1385 + t1164 * t719 - t1521;
t608 = -pkin(10) * t812 - t1161 * t677 + t1165 * t679;
t641 = -pkin(3) * t812 + t1520 - t1160 * t719 + (-pkin(4) - t1392) * t1407;
t1191 = pkin(9) * t764 + t1162 * t608 + t1166 * t641;
t603 = pkin(10) * t814 + t1161 * t679 + t1165 * t677 - t1523;
t707 = t1155 * t1287 + t1158 * t812;
t543 = -pkin(2) * t707 - t1155 * t603 + t1158 * t1191;
t555 = -t1162 * t641 + t1166 * t608 + (-t1155 * t707 - t1158 * t709) * pkin(9);
t656 = -t1163 * t709 + t1167 * t764;
t1207 = pkin(8) * t656 + t1163 * t555 + t1167 * t543;
t651 = -t670 - t1494;
t619 = t1165 * t651 + t1393 * t1454 - t1518;
t631 = t1503 - t671;
t1189 = t1162 * t619 + t1166 * t631 + t1536;
t612 = t1161 * t651 + t1329 * t1454 + t1519;
t545 = -t1155 * t612 + t1158 * t1189 - t1550;
t552 = -t1162 * t631 + t1166 * t619 + t1537;
t1206 = t1163 * t552 + t1167 * t545 + t1560;
t720 = (-t941 - t1359) * pkin(5) + t1176;
t680 = -t1160 * t720 - t1388 * t941 - t1469;
t681 = -t1471 + (-t1406 - t1397) * qJ(6) + (-t1059 - t1412) * pkin(5) + t1310;
t610 = -pkin(10) * t823 - t1161 * t681 + t1165 * t680;
t642 = -pkin(3) * t823 - t1164 * t720 + t1317 * t941 - t1470;
t1190 = pkin(9) * t774 + t1162 * t610 + t1166 * t642;
t605 = pkin(10) * t825 + t1161 * t680 + t1165 * t681 - t1472;
t714 = t1155 * t1284 + t1158 * t823;
t547 = -pkin(2) * t714 - t1155 * t605 + t1158 * t1190;
t558 = -t1162 * t642 + t1166 * t610 + (-t1155 * t714 - t1158 * t716) * pkin(9);
t661 = -t1163 * t716 + t1167 * t774;
t1205 = pkin(8) * t661 + t1163 * t558 + t1167 * t547;
t718 = t751 - t1471;
t766 = t1387 - t1469;
t639 = -pkin(10) * t813 - t1161 * t718 + t1165 * t766;
t697 = -pkin(3) * t813 + pkin(4) * t939 + t1378 - t1470;
t1188 = pkin(9) * t765 + t1162 * t639 + t1166 * t697;
t632 = pkin(10) * t815 + t1161 * t766 + t1165 * t718 - t1472;
t708 = t1155 * t1286 + t1158 * t813;
t557 = -pkin(2) * t708 - t1155 * t632 + t1158 * t1188;
t572 = -t1162 * t697 + t1166 * t639 + (-t1155 * t708 - t1158 * t710) * pkin(9);
t657 = -t1163 * t710 + t1167 * t765;
t1204 = pkin(8) * t657 + t1163 * t572 + t1167 * t557;
t721 = t752 + t1522;
t770 = t1378 + t1521;
t640 = -pkin(10) * t822 - t1161 * t721 + t1165 * t770;
t698 = -pkin(3) * t822 - pkin(4) * t947 - t1387 - t1520;
t1187 = pkin(9) * t773 + t1162 * t640 + t1166 * t698;
t634 = pkin(10) * t824 + t1161 * t770 + t1165 * t721 + t1523;
t713 = t1155 * t1285 + t1158 * t822;
t560 = -pkin(2) * t713 - t1155 * t634 + t1158 * t1187;
t575 = -t1162 * t698 + t1166 * t640 + (-t1155 * t713 - t1158 * t715) * pkin(9);
t660 = -t1163 * t715 + t1167 * t773;
t1203 = pkin(8) * t660 + t1163 * t575 + t1167 * t560;
t1181 = pkin(9) * t744 + t1309 * t768;
t674 = t1155 * t1292 + t1158 * t768;
t745 = -pkin(3) * t953 + pkin(10) * t769;
t589 = -pkin(2) * t674 - t1155 * t745 + t1158 * t1181;
t590 = (-pkin(10) * t1166 + t1395) * t768 + (-t1155 * t674 - t1158 * t675) * pkin(9);
t633 = -t1163 * t675 + t1167 * t744;
t1202 = pkin(8) * t633 + t1163 * t590 + t1167 * t589;
t743 = -pkin(10) * t949 - t768;
t1183 = pkin(9) * t889 + t1162 * t743 - t1394 * t949;
t736 = pkin(3) * t1044 + pkin(10) * t951 + t769;
t809 = t1155 * t1239 + t1158 * t949;
t625 = -pkin(2) * t809 - t1155 * t736 + t1158 * t1183;
t652 = t949 * t1395 + t1166 * t743 + (-t1155 * t809 - t1158 * t810) * pkin(9);
t763 = -t1163 * t810 + t1167 * t889;
t1201 = pkin(8) * t763 + t1163 * t652 + t1167 * t625;
t806 = -pkin(3) * t981 + t864;
t872 = -pkin(10) * t981 + t1380;
t1186 = pkin(9) * t910 + t1162 * t872 + t1166 * t806;
t838 = pkin(3) * t1016 + pkin(10) * t982 - t1372;
t857 = t1155 * t1242 + t1158 * t981;
t659 = -pkin(2) * t857 - t1155 * t838 + t1158 * t1186;
t678 = -t1162 * t806 + t1166 * t872 + (-t1155 * t857 - t1158 * t858) * pkin(9);
t782 = -t1163 * t858 + t1167 * t910;
t1200 = pkin(8) * t782 + t1163 * t678 + t1167 * t659;
t811 = -pkin(3) * t991 + t865;
t873 = -pkin(10) * t991 + t1372;
t1185 = pkin(9) * t914 + t1162 * t873 + t1166 * t811;
t839 = -pkin(3) * t1018 + pkin(10) * t992 + t1380;
t866 = t1155 * t1241 + t1158 * t991;
t663 = -pkin(2) * t866 - t1155 * t839 + t1158 * t1185;
t687 = -t1162 * t811 + t1166 * t873 + (-t1155 * t866 - t1158 * t867) * pkin(9);
t783 = -t1163 * t867 + t1167 * t914;
t1199 = pkin(8) * t783 + t1163 * t687 + t1167 * t663;
t852 = -t1158 * t1036 + t1155 * t1275;
t762 = (-t1155 * t852 - t1158 * t853) * pkin(9);
t775 = -t1163 * t853 + t1167 * t886;
t776 = pkin(9) * t1158 * t886 - pkin(2) * t852;
t1198 = pkin(8) * t775 + t1163 * t762 + t1167 * t776;
t1003 = -t1158 * t1130 + t1155 * t1227;
t794 = (-t1003 * t1155 - t1005 * t1158) * pkin(9) - t1275;
t1184 = pkin(9) * t1037 + t886;
t808 = -pkin(2) * t1003 + t1158 * t1184;
t955 = -t1005 * t1163 + t1037 * t1167;
t1197 = pkin(8) * t955 + t1163 * t794 + t1167 * t808;
t1013 = t1158 * t1095 + t1155 * t1226;
t849 = -pkin(2) * t1013 + t1155 * t972 + t1158 * t1298;
t887 = -t1342 + (-t1013 * t1155 - t1014 * t1158) * pkin(9);
t963 = -t1014 * t1163 + t1068 * t1167;
t1196 = pkin(8) * t963 + t1163 * t887 + t1167 * t849;
t1027 = t1155 * t1224 + t1158 * t1409;
t860 = -pkin(2) * t1027 + t1155 * t971 + t1158 * t1297;
t888 = -t1344 + (-t1027 * t1155 - t1030 * t1158) * pkin(9);
t975 = -t1030 * t1163 + t1077 * t1167;
t1195 = pkin(8) * t975 + t1163 * t888 + t1167 * t860;
t1128 = t1140 * t1159;
t1126 = t1140 * t1156;
t1125 = t1221 * t1156;
t1092 = -t1128 * t1154 - t1157 * t1221;
t1090 = t1128 * t1157 - t1154 * t1221;
t1070 = t1146 * t1155 * t1163 + t1101 * t1167;
t1064 = (t1121 * t1155 + t1237 * t1422) * t1162;
t1063 = (-t1162 * t1237 - t1214) * t1422;
t1043 = -t1211 + (t1125 * t1156 + t1127 * t1159) * pkin(8);
t1042 = -t1212 + (-t1126 * t1156 - t1128 * t1159) * pkin(8);
t1041 = t1159 * t1358 + (-t1156 * t1158 - t1159 * t1347) * t1146;
t1026 = t1158 * t1098 + t1155 * t1223;
t1025 = t1158 * t1097 + t1155 * t1225;
t1012 = t1024 * t1159;
t1004 = t1158 * t1129 + t1155 * t1228;
t1002 = -t1065 * t1163 + t1088 * t1167;
t1001 = -t1062 * t1163 + t1087 * t1167;
t994 = -pkin(1) * t1126 + t1156 * t1079 + t1159 * t1211 - t1221 * t1391;
t993 = pkin(1) * t1125 + t1156 * t1080 - t1140 * t1391 - t1159 * t1212;
t990 = t1156 * t1133 + (t1315 - t1023) * t1159;
t989 = -t1023 * t1156 - t1159 * t1295;
t974 = -t1029 * t1163 + t1076 * t1167;
t973 = -t1028 * t1163 + t1075 * t1167;
t960 = -t1156 * t1064 + t1159 * t1229;
t959 = -t1156 * t1063 + t1159 * t1230;
t957 = t1158 * t1039 + t1155 * t1432;
t956 = -t1006 * t1163 + t1038 * t1167;
t913 = -pkin(1) * t989 + t1024 * t1391;
t912 = t1024 * t1157 - t1154 * t990;
t911 = t1024 * t1154 + t1157 * t990;
t909 = -t1156 * t1027 + t1159 * t1231;
t908 = -t1156 * t1026 + t1159 * t1232;
t907 = -t1156 * t1025 + t1159 * t1233;
t906 = t1159 * t1027 + t1156 * t1231;
t900 = (-t1156 * t989 - t1159 * t990) * pkin(8);
t895 = -t1156 * t1013 + t1159 * t1234;
t894 = t1159 * t1013 + t1156 * t1234;
t891 = t1158 * t1010 + t1155 * t1215;
t890 = t1158 * t1008 + t1155 * t1216;
t877 = t1007 * t1167 - t1163 * t958;
t876 = -t1156 * t1004 + t1159 * t1235;
t875 = -t1156 * t1003 + t1159 * t1236;
t874 = t1159 * t1003 + t1156 * t1236;
t869 = t1155 * t1243 + t1158 * t996;
t868 = t1155 * t1240 + t1158 * t995;
t859 = pkin(2) * t1030 + t1155 * t1297 - t1158 * t971;
t851 = -t1154 * t909 + t1157 * t975;
t850 = t1154 * t975 + t1157 * t909;
t848 = pkin(2) * t1014 + t1155 * t1298 - t1158 * t972;
t829 = -t1154 * t895 + t1157 * t963;
t828 = t1154 * t963 + t1157 * t895;
t827 = -t1163 * t893 + t1167 * t965;
t826 = -t1163 * t892 + t1167 * t964;
t820 = t1155 * t1238 + t1158 * t948;
t807 = pkin(2) * t1005 + t1155 * t1184;
t801 = -t1156 * t957 + t1159 * t1244;
t800 = -t1154 * t875 + t1157 * t955;
t799 = t1154 * t955 + t1157 * t875;
t789 = -t1163 * t871 + t1167 * t924;
t788 = -t1163 * t870 + t1167 * t923;
t777 = pkin(2) * t853 + t1390 * t886;
t772 = -t1156 * t891 + t1159 * t1245;
t771 = -t1156 * t890 + t1159 * t1246;
t767 = -t1163 * t821 + t1167 * t901;
t750 = -t1156 * t869 + t1159 * t1247;
t749 = -t1156 * t868 + t1159 * t1248;
t740 = -t1156 * t866 + t1159 * t1249;
t739 = t1156 * t1249 + t1159 * t866;
t735 = -t1156 * t857 + t1159 * t1250;
t734 = t1156 * t1250 + t1159 * t857;
t732 = -t1156 * t852 + t1159 * t1251;
t731 = t1156 * t1251 + t1159 * t852;
t717 = -t1163 * t860 + t1167 * t888 + (-t1156 * t906 - t1159 * t909) * pkin(8);
t712 = -t1156 * t820 + t1159 * t1252;
t705 = -t1163 * t849 + t1167 * t887 + (-t1156 * t894 - t1159 * t895) * pkin(8);
t704 = -t1156 * t809 + t1159 * t1253;
t703 = t1156 * t1253 + t1159 * t809;
t692 = -pkin(1) * t906 - t1156 * t859 + t1159 * t1195;
t686 = -pkin(1) * t894 - t1156 * t848 + t1159 * t1196;
t683 = -t1154 * t740 + t1157 * t783;
t682 = t1154 * t783 + t1157 * t740;
t676 = -t1163 * t808 + t1167 * t794 + (-t1156 * t874 - t1159 * t875) * pkin(8);
t673 = -t1154 * t735 + t1157 * t782;
t672 = t1154 * t782 + t1157 * t735;
t665 = -t1154 * t732 + t1157 * t775;
t664 = t1154 * t775 + t1157 * t732;
t662 = pkin(2) * t867 + t1155 * t1185 + t1158 * t839;
t658 = pkin(2) * t858 + t1155 * t1186 + t1158 * t838;
t655 = -pkin(1) * t874 - t1156 * t807 + t1159 * t1197;
t654 = -t1154 * t704 + t1157 * t763;
t653 = t1154 * t763 + t1157 * t704;
t624 = pkin(2) * t810 + t1155 * t1183 + t1158 * t736;
t623 = -t1156 * t714 + t1159 * t1264;
t622 = -t1156 * t713 + t1159 * t1265;
t621 = t1156 * t1264 + t1159 * t714;
t620 = t1156 * t1265 + t1159 * t713;
t616 = -t1156 * t708 + t1159 * t1266;
t615 = -t1156 * t707 + t1159 * t1267;
t614 = t1156 * t1266 + t1159 * t708;
t613 = t1156 * t1267 + t1159 * t707;
t609 = -t1163 * t776 + t1167 * t762 + (-t1156 * t731 - t1159 * t732) * pkin(8);
t598 = -pkin(1) * t731 - t1156 * t777 + t1159 * t1198;
t595 = -t1156 * t674 + t1159 * t1272;
t594 = t1156 * t1272 + t1159 * t674;
t588 = pkin(2) * t675 + t1155 * t1181 + t1158 * t745;
t587 = -t1154 * t623 + t1157 * t661;
t586 = -t1154 * t622 + t1157 * t660;
t585 = t1154 * t661 + t1157 * t623;
t584 = t1154 * t660 + t1157 * t622;
t583 = -t1154 * t616 + t1157 * t657;
t582 = -t1154 * t615 + t1157 * t656;
t581 = t1154 * t657 + t1157 * t616;
t580 = t1154 * t656 + t1157 * t615;
t579 = -t1163 * t663 + t1167 * t687 + (-t1156 * t739 - t1159 * t740) * pkin(8);
t577 = -t1163 * t659 + t1167 * t678 + (-t1156 * t734 - t1159 * t735) * pkin(8);
t567 = -pkin(1) * t739 - t1156 * t662 + t1159 * t1199;
t566 = -t1154 * t595 + t1157 * t633;
t565 = t1154 * t633 + t1157 * t595;
t564 = -pkin(1) * t734 - t1156 * t658 + t1159 * t1200;
t562 = -t1163 * t625 + t1167 * t652 + (-t1156 * t703 - t1159 * t704) * pkin(8);
t559 = pkin(2) * t715 + t1155 * t1187 + t1158 * t634;
t556 = pkin(2) * t710 + t1155 * t1188 + t1158 * t632;
t551 = -pkin(1) * t703 - t1156 * t624 + t1159 * t1201;
t546 = pkin(2) * t716 + t1155 * t1190 + t1158 * t605;
t544 = t1155 * t1189 + t1158 * t612 + t1551;
t542 = pkin(2) * t709 + t1155 * t1191 + t1158 * t603;
t538 = t1155 * t1192 + t1158 * t591 + t1551;
t537 = -t1156 * t573 + t1159 * t1273;
t536 = t1156 * t1273 + t1159 * t573;
t535 = -t1163 * t589 + t1167 * t590 + (-t1156 * t594 - t1159 * t595) * pkin(8);
t534 = -t1163 * t560 + t1167 * t575 + (-t1156 * t620 - t1159 * t622) * pkin(8);
t533 = -t1163 * t557 + t1167 * t572 + (-t1156 * t614 - t1159 * t616) * pkin(8);
t532 = -pkin(1) * t594 - t1156 * t588 + t1159 * t1202;
t531 = -t1156 * t553 + t1159 * t1274;
t530 = t1156 * t1274 + t1159 * t553;
t528 = -t1163 * t547 + t1167 * t558 + (-t1156 * t621 - t1159 * t623) * pkin(8);
t527 = -t1154 * t537 + t1157 * t550;
t526 = t1154 * t550 + t1157 * t537;
t525 = -t1163 * t543 + t1167 * t555 + (-t1156 * t613 - t1159 * t615) * pkin(8);
t524 = -pkin(1) * t620 - t1156 * t559 + t1159 * t1203;
t522 = pkin(2) * t574 + t1155 * t1193 + t1158 * t563;
t521 = -pkin(1) * t614 - t1156 * t556 + t1159 * t1204;
t520 = -t1163 * t545 + t1167 * t552 + t1561;
t519 = -t1163 * t539 + t1167 * t549 + t1561;
t518 = -t1154 * t531 + t1157 * t540;
t517 = t1154 * t540 + t1157 * t531;
t516 = -pkin(1) * t621 - t1156 * t546 + t1159 * t1205;
t514 = -pkin(1) * t613 - t1156 * t542 + t1159 * t1207;
t513 = -t1156 * t544 + t1159 * t1206 - t1570;
t512 = -t1156 * t538 + t1159 * t1208 - t1570;
t510 = pkin(2) * t554 + t1155 * t1194 + t1158 * t541;
t509 = -t1163 * t523 + t1167 * t529 + (-t1156 * t536 - t1159 * t537) * pkin(8);
t508 = -pkin(1) * t536 - t1156 * t522 + t1159 * t1209;
t507 = -t1163 * t511 + t1167 * t515 + (-t1156 * t530 - t1159 * t531) * pkin(8);
t506 = -pkin(1) * t530 - t1156 * t510 + t1159 * t1210;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1103, 0, 0, 0, 0, 0, 0, t1092, t1091, 0, t912, 0, 0, 0, 0, 0, 0, t851, t829, t800, t665, 0, 0, 0, 0, 0, 0, t673, t683, t654, t566, 0, 0, 0, 0, 0, 0, t583, t586, t1564, t527, 0, 0, 0, 0, 0, 0, t587, t1564, t582, t518; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1296, 0, 0, 0, 0, 0, 0, t1090, -t1222, 0, t911, 0, 0, 0, 0, 0, 0, t850, t828, t799, t664, 0, 0, 0, 0, 0, 0, t672, t682, t653, t565, 0, 0, 0, 0, 0, 0, t581, t584, t1562, t526, 0, 0, 0, 0, 0, 0, t585, t1562, t580, t517; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1389, 0, 0, 0, 0, 0, 0, t1126, -t1125, 0, t989, 0, 0, 0, 0, 0, 0, t906, t894, t874, t731, 0, 0, 0, 0, 0, 0, t734, t739, t703, t594, 0, 0, 0, 0, 0, 0, t614, t620, t1555, t536, 0, 0, 0, 0, 0, 0, t621, t1555, t613, t530; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1421, -t1420, t1296, qJ(1) * t1296, 0, 0, -t1091, 0, t1092, t1154 * t1333, -qJ(1) * t1090 + t1042 * t1157 - t1154 * t994, qJ(1) * t1222 + t1043 * t1157 - t1154 * t993, -t1012 * t1154 + t1023 * t1157, -qJ(1) * t911 - t1154 * t913 + t1157 * t900, t1002 * t1157 - t1154 * t960, -t1154 * t876 + t1157 * t956, -t1154 * t907 + t1157 * t973, t1001 * t1157 - t1154 * t959, -t1154 * t908 + t1157 * t974, -t1041 * t1154 + t1070 * t1157, -qJ(1) * t850 - t1154 * t692 + t1157 * t717, -qJ(1) * t828 - t1154 * t686 + t1157 * t705, -qJ(1) * t799 - t1154 * t655 + t1157 * t676, -qJ(1) * t664 - t1154 * t598 + t1157 * t609, -t1154 * t772 + t1157 * t827, -t1154 * t712 + t1157 * t767, -t1154 * t749 + t1157 * t788, -t1154 * t771 + t1157 * t826, -t1154 * t750 + t1157 * t789, -t1154 * t801 + t1157 * t877, -qJ(1) * t672 - t1154 * t564 + t1157 * t577, -qJ(1) * t682 - t1154 * t567 + t1157 * t579, -qJ(1) * t653 - t1154 * t551 + t1157 * t562, -qJ(1) * t565 - t1154 * t532 + t1157 * t535, t1482, t1586, t1565, t1530, -t1587, t1531, -qJ(1) * t581 - t1154 * t521 + t1157 * t533, -qJ(1) * t584 - t1154 * t524 + t1157 * t534, -t1154 * t513 + t1157 * t520 - t1573, -qJ(1) * t526 - t1154 * t508 + t1157 * t509, t1482, t1565, -t1586, t1531, t1587, t1530, -qJ(1) * t585 - t1154 * t516 + t1157 * t528, -t1154 * t512 + t1157 * t519 - t1573, -qJ(1) * t580 - t1154 * t514 + t1157 * t525, -qJ(1) * t517 - t1154 * t506 + t1157 * t507; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1420, -t1421, t1103, qJ(1) * t1103, 0, 0, t1222, 0, t1090, -t1157 * t1333, qJ(1) * t1092 + t1042 * t1154 + t1157 * t994, qJ(1) * t1091 + t1043 * t1154 + t1157 * t993, t1012 * t1157 + t1023 * t1154, qJ(1) * t912 + t1154 * t900 + t1157 * t913, t1002 * t1154 + t1157 * t960, t1154 * t956 + t1157 * t876, t1154 * t973 + t1157 * t907, t1001 * t1154 + t1157 * t959, t1154 * t974 + t1157 * t908, t1041 * t1157 + t1070 * t1154, qJ(1) * t851 + t1154 * t717 + t1157 * t692, qJ(1) * t829 + t1154 * t705 + t1157 * t686, qJ(1) * t800 + t1154 * t676 + t1157 * t655, qJ(1) * t665 + t1154 * t609 + t1157 * t598, t1154 * t827 + t1157 * t772, t1154 * t767 + t1157 * t712, t1154 * t788 + t1157 * t749, t1154 * t826 + t1157 * t771, t1154 * t789 + t1157 * t750, t1154 * t877 + t1157 * t801, qJ(1) * t673 + t1154 * t577 + t1157 * t564, qJ(1) * t683 + t1154 * t579 + t1157 * t567, qJ(1) * t654 + t1154 * t562 + t1157 * t551, qJ(1) * t566 + t1154 * t535 + t1157 * t532, t1481, -t1584, t1563, t1526, t1585, t1527, qJ(1) * t583 + t1154 * t533 + t1157 * t521, qJ(1) * t586 + t1154 * t534 + t1157 * t524, t1154 * t520 + t1157 * t513 + t1572, qJ(1) * t527 + t1154 * t509 + t1157 * t508, t1481, t1563, t1584, t1527, -t1585, t1526, qJ(1) * t587 + t1154 * t528 + t1157 * t516, t1154 * t519 + t1157 * t512 + t1572, qJ(1) * t582 + t1154 * t525 + t1157 * t514, qJ(1) * t518 + t1154 * t507 + t1157 * t506; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1316, t1308, 0, 0, 0, 0, t1125, 0, t1126, t1159 * qJDD(2), pkin(1) * t1128 - t1159 * t1079 + (-pkin(8) * t1221 + t1211) * t1156, -pkin(1) * t1127 - t1159 * t1080 + (-pkin(8) * t1140 - t1212) * t1156, t1423, pkin(1) * t990 + pkin(8) * t1423, t1159 * t1064 + t1156 * t1229, t1159 * t1004 + t1156 * t1235, t1159 * t1025 + t1156 * t1233, t1159 * t1063 + t1156 * t1230, t1159 * t1026 + t1156 * t1232, t1156 * t1358 + (-t1156 * t1347 + t1158 * t1159) * t1146, pkin(1) * t909 + t1156 * t1195 + t1159 * t859, pkin(1) * t895 + t1156 * t1196 + t1159 * t848, pkin(1) * t875 + t1156 * t1197 + t1159 * t807, pkin(1) * t732 + t1156 * t1198 + t1159 * t777, t1156 * t1245 + t1159 * t891, t1156 * t1252 + t1159 * t820, t1156 * t1248 + t1159 * t868, t1156 * t1246 + t1159 * t890, t1156 * t1247 + t1159 * t869, t1156 * t1244 + t1159 * t957, pkin(1) * t735 + t1156 * t1200 + t1159 * t658, pkin(1) * t740 + t1156 * t1199 + t1159 * t662, pkin(1) * t704 + t1156 * t1201 + t1159 * t624, pkin(1) * t595 + t1156 * t1202 + t1159 * t588, t1450, -t1578, t1554, t1502, t1579, t1501, pkin(1) * t616 + t1156 * t1204 + t1159 * t556, pkin(1) * t622 + t1156 * t1203 + t1159 * t559, t1156 * t1206 + t1159 * t544 + t1571, pkin(1) * t537 + t1156 * t1209 + t1159 * t522, t1450, t1554, t1578, t1501, -t1579, t1502, pkin(1) * t623 + t1156 * t1205 + t1159 * t546, t1156 * t1208 + t1159 * t538 + t1571, pkin(1) * t615 + t1156 * t1207 + t1159 * t542, pkin(1) * t531 + t1156 * t1210 + t1159 * t510;];
tauB_reg  = t1;
