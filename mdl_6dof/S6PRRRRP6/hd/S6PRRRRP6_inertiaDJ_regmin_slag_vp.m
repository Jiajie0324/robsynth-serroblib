% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6PRRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x29]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRRRP6_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP6_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP6_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRP6_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:34:25
% EndTime: 2019-03-09 00:34:38
% DurationCPUTime: 4.13s
% Computational Cost: add. (4332->384), mult. (12624->674), div. (0->0), fcn. (12453->12), ass. (0->188)
t116 = cos(qJ(5));
t102 = qJD(5) * t116;
t112 = sin(qJ(5));
t113 = sin(qJ(4));
t117 = cos(qJ(4));
t196 = qJD(4) * t117;
t240 = t113 * t102 + t112 * t196;
t239 = -0.4e1 * t113;
t194 = qJD(5) * t112;
t108 = sin(pkin(7));
t118 = cos(qJ(3));
t200 = qJD(3) * t118;
t169 = t108 * t200;
t110 = cos(pkin(7));
t114 = sin(qJ(3));
t211 = t108 * t114;
t81 = t110 * t113 + t117 * t211;
t55 = t81 * qJD(4) + t113 * t169;
t80 = -t117 * t110 + t113 * t211;
t136 = -t116 * t55 + t80 * t194;
t238 = pkin(11) * t136;
t227 = pkin(10) * t117;
t100 = t116 * t227;
t226 = pkin(11) * t113;
t154 = -pkin(4) * t117 - t226;
t93 = -pkin(3) + t154;
t237 = t112 * t93 + t100;
t195 = qJD(4) * t118;
t174 = t117 * t195;
t202 = qJD(3) * t114;
t236 = (t113 * t202 - t174) * t108;
t106 = t116 ^ 2;
t205 = t112 ^ 2 - t106;
t163 = t205 * qJD(5);
t192 = qJD(5) * t117;
t173 = t112 * t192;
t197 = qJD(4) * t116;
t129 = t113 * t197 + t173;
t225 = pkin(11) * t117;
t153 = pkin(4) * t113 - t225;
t88 = t153 * qJD(4);
t49 = t129 * pkin(10) - t93 * t102 - t112 * t88;
t150 = pkin(5) * t112 - qJ(6) * t116;
t143 = pkin(10) + t150;
t74 = t143 * t113;
t78 = t150 * qJD(5) - t112 * qJD(6);
t151 = pkin(5) * t116 + qJ(6) * t112;
t89 = -pkin(4) - t151;
t235 = qJD(4) * (-t117 * t89 + t226) - qJD(5) * t74 - t113 * t78;
t198 = qJD(4) * t113;
t179 = t112 * t198;
t50 = pkin(10) * t179 - qJD(5) * t237 + t116 * t88;
t234 = t151 * qJD(5) - t116 * qJD(6);
t170 = t108 * t202;
t210 = t108 * t118;
t185 = pkin(9) * t210;
t230 = pkin(2) * t114;
t72 = t185 + (pkin(10) + t230) * t110;
t155 = -pkin(3) * t118 - pkin(10) * t114;
t73 = (-pkin(2) + t155) * t108;
t75 = (pkin(3) * t114 - pkin(10) * t118) * t108 * qJD(3);
t76 = -t110 * pkin(2) * t200 + pkin(9) * t170;
t26 = -t113 * t75 + t117 * t76 - t73 * t196 + t72 * t198;
t22 = pkin(11) * t170 - t26;
t71 = pkin(9) * t211 + (-pkin(2) * t118 - pkin(3)) * t110;
t44 = t80 * pkin(4) - t81 * pkin(11) + t71;
t223 = t113 * t73 + t117 * t72;
t46 = -pkin(11) * t210 + t223;
t224 = t112 * t44 + t116 * t46;
t128 = qJD(4) * t80;
t187 = t110 * t230;
t30 = t55 * pkin(4) + pkin(11) * t128 + (t187 + (pkin(9) - t225) * t210) * qJD(3);
t5 = -qJD(5) * t224 - t112 * t22 + t116 * t30;
t107 = t117 ^ 2;
t233 = 0.2e1 * t108;
t232 = 0.2e1 * qJD(6);
t231 = t55 * pkin(5);
t229 = pkin(10) * t112;
t228 = pkin(10) * t113;
t220 = qJ(6) * t55;
t115 = sin(qJ(2));
t109 = sin(pkin(6));
t203 = qJD(2) * t109;
t168 = t115 * t203;
t159 = t108 * t168;
t111 = cos(pkin(6));
t119 = cos(qJ(2));
t206 = t118 * t119;
t209 = t114 * t115;
t135 = t110 * t206 - t209;
t38 = t111 * t169 + (t135 * qJD(3) + (-t110 * t209 + t206) * qJD(2)) * t109;
t207 = t115 * t118;
t208 = t114 * t119;
t134 = t110 * t208 + t207;
t54 = t134 * t109 + t111 * t211;
t79 = -t108 * t109 * t119 + t111 * t110;
t43 = t113 * t79 + t117 * t54;
t15 = t43 * qJD(4) + t38 * t113 - t117 * t159;
t219 = t112 * t15;
t56 = t112 * t81 + t116 * t210;
t218 = t112 * t56;
t156 = t117 * t169;
t120 = -t128 + t156;
t181 = t112 * t210;
t32 = -qJD(5) * t181 + t81 * t102 + t112 * t120 - t116 * t170;
t217 = t116 * t32;
t57 = t116 * t81 - t181;
t216 = t116 * t57;
t215 = t116 * t93;
t31 = t56 * qJD(5) - t112 * t170 - t116 * t120;
t214 = t31 * t112;
t213 = t31 * t116;
t212 = qJD(6) * t80;
t105 = t113 ^ 2;
t204 = t105 - t107;
t201 = qJD(3) * t117;
t199 = qJD(4) * t112;
t193 = qJD(5) * t113;
t190 = t117 * qJD(6);
t189 = -0.2e1 * pkin(3) * qJD(4);
t188 = -0.2e1 * pkin(4) * qJD(5);
t186 = t112 * t227;
t184 = pkin(5) * t198;
t183 = pkin(11) * t194;
t182 = pkin(11) * t102;
t103 = t108 ^ 2;
t180 = t103 * t200;
t177 = qJ(6) * t198;
t176 = t116 * t196;
t175 = t110 * t196;
t171 = t116 * t192;
t167 = t112 * t102;
t166 = t113 * t196;
t164 = -t113 * t72 + t117 * t73;
t162 = t204 * qJD(4);
t161 = 0.2e1 * t166;
t160 = t103 * t168;
t158 = t114 * t180;
t157 = t112 * t176;
t45 = pkin(4) * t210 - t164;
t13 = qJ(6) * t80 + t224;
t18 = -t112 * t46 + t116 * t44;
t14 = -pkin(5) * t80 - t18;
t149 = -t112 * t13 + t116 * t14;
t53 = -t135 * t109 - t111 * t210;
t24 = t112 * t43 - t53 * t116;
t25 = t112 * t53 + t116 * t43;
t148 = -t112 * t25 + t116 * t24;
t146 = -t112 * t57 - t116 * t56;
t58 = -qJ(6) * t117 + t237;
t59 = -t215 + (pkin(5) + t229) * t117;
t145 = -t112 * t58 + t116 * t59;
t42 = t113 * t54 - t117 * t79;
t27 = t113 * t76 + t117 * t75 - t72 * t196 - t73 * t198;
t20 = pkin(5) * t56 - qJ(6) * t57 + t45;
t23 = -pkin(4) * t170 - t27;
t8 = pkin(5) * t32 + qJ(6) * t31 - qJD(6) * t57 + t23;
t141 = -t20 * t102 - t112 * t8;
t140 = -t116 * t8 + t20 * t194;
t10 = -t116 * t15 + t42 * t194;
t139 = t45 * t102 + t23 * t112;
t138 = -t23 * t116 + t45 * t194;
t137 = t80 * t102 + t112 * t55;
t4 = -t44 * t102 - t112 * t30 - t116 * t22 + t46 * t194;
t16 = -qJD(4) * t42 + t113 * t159 + t38 * t117;
t37 = t111 * t170 + (t134 * qJD(3) + (t110 * t207 + t208) * qJD(2)) * t109;
t6 = t25 * qJD(5) + t16 * t112 - t37 * t116;
t133 = t15 * t56 - t24 * t55 + t42 * t32 - t6 * t80;
t132 = t137 * pkin(11);
t131 = -t114 * t198 + t117 * t200;
t127 = t113 * t219 + t117 * t6 - t24 * t198 + t240 * t42;
t7 = -t24 * qJD(5) + t37 * t112 + t16 * t116;
t126 = t15 * t57 - t25 * t55 - t31 * t42 - t7 * t80;
t2 = t212 - t4 + t220;
t3 = -t231 - t5;
t123 = t149 * qJD(5) + t112 * t3 + t116 * t2;
t122 = t148 * qJD(5) + t6 * t112 + t7 * t116;
t40 = -t49 + t177 - t190;
t47 = -t184 - t50;
t121 = t145 * qJD(5) + t47 * t112 + t40 * t116;
t97 = pkin(11) * t171;
t82 = -t112 * t193 + t176;
t77 = (t185 + t187) * qJD(3);
t69 = -t186 + t215;
t48 = t234 * t113 + t143 * t196;
t9 = t42 * t102 + t219;
t1 = (t42 * t197 + t7) * t117 + (-qJD(4) * t25 - t10) * t113;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t15 * t42 + 0.2e1 * t24 * t6 + 0.2e1 * t25 * t7; 0, 0, -t168, -t119 * t203, 0, 0, 0, 0, 0, -t110 * t37 - t118 * t160 + t79 * t170, -t110 * t38 + t114 * t160 + t79 * t169, 0, 0, 0, 0, 0, t37 * t80 + t53 * t55 + (t118 * t15 - t42 * t202) * t108, t53 * t175 + t37 * t81 + (t16 * t118 + t131 * t53 - t43 * t202) * t108, 0, 0, 0, 0, 0, t133, t126, t133, -t24 * t31 - t25 * t32 - t56 * t7 + t57 * t6, -t126, t13 * t7 + t14 * t6 + t15 * t20 + t2 * t25 + t24 * t3 + t42 * t8; 0, 0, 0, 0, 0.2e1 * t158, 0.2e1 * (-t114 ^ 2 + t118 ^ 2) * t103 * qJD(3), 0.2e1 * t110 * t169, -0.2e1 * t110 * t170, 0, -0.2e1 * pkin(2) * t103 * t202 - 0.2e1 * t110 * t77, -0.2e1 * pkin(2) * t180 + 0.2e1 * t110 * t76, 0.2e1 * t81 * t120, -0.2e1 * t120 * t80 - 0.2e1 * t81 * t55 (-t110 * t174 - t131 * t210 + t81 * t202) * t233 (t118 * t55 - t80 * t202) * t233, -0.2e1 * t158, 0.2e1 * t71 * t55 + 0.2e1 * t77 * t80 + 0.2e1 * (-t27 * t118 + t164 * t202) * t108, 0.2e1 * t71 * t175 + 0.2e1 * t77 * t81 + 0.2e1 * (-t26 * t118 + t71 * t131 - t223 * t202) * t108, -0.2e1 * t57 * t31, 0.2e1 * t31 * t56 - 0.2e1 * t32 * t57, -0.2e1 * t31 * t80 + 0.2e1 * t55 * t57, -0.2e1 * t32 * t80 - 0.2e1 * t55 * t56, 0.2e1 * t80 * t55, 0.2e1 * t18 * t55 + 0.2e1 * t23 * t56 + 0.2e1 * t32 * t45 + 0.2e1 * t5 * t80, -0.2e1 * t224 * t55 + 0.2e1 * t23 * t57 - 0.2e1 * t31 * t45 + 0.2e1 * t4 * t80, -0.2e1 * t14 * t55 + 0.2e1 * t20 * t32 - 0.2e1 * t3 * t80 + 0.2e1 * t56 * t8, -0.2e1 * t13 * t32 - 0.2e1 * t14 * t31 - 0.2e1 * t2 * t56 + 0.2e1 * t3 * t57, 0.2e1 * t13 * t55 + 0.2e1 * t2 * t80 + 0.2e1 * t20 * t31 - 0.2e1 * t57 * t8, 0.2e1 * t13 * t2 + 0.2e1 * t14 * t3 + 0.2e1 * t20 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t38, 0, 0, 0, 0, 0, -t117 * t37 + t53 * t198, t113 * t37 + t196 * t53, 0, 0, 0, 0, 0, t127, t1, t127, t148 * t196 + (-t112 * t7 + t116 * t6 + (-t112 * t24 - t116 * t25) * qJD(5)) * t113, -t1, t15 * t74 + t24 * t47 + t25 * t40 + t42 * t48 + t58 * t7 + t59 * t6; 0, 0, 0, 0, 0, 0, t169, -t170, 0, -t77, t76, t113 * t156 + (-t80 * t113 + t81 * t117) * qJD(4), t107 * t169 - t113 * t55 + (-t81 * t113 - 0.2e1 * t117 * t80) * qJD(4), t236 (t113 * t195 + t114 * t201) * t108, 0, -pkin(3) * t55 - pkin(10) * t236 - t77 * t117 + t71 * t198, t77 * t113 + t155 * t108 * t201 + (pkin(3) * t80 + t71 * t117 - t210 * t228) * qJD(4), t57 * t176 + (-t194 * t57 - t213) * t113, t146 * t196 + (t214 - t217 + (-t216 + t218) * qJD(5)) * t113 (t197 * t80 + t31) * t117 + (qJD(4) * t57 - t136) * t113 (-t199 * t80 + t32) * t117 + (-qJD(4) * t56 - t137) * t113, -t117 * t55 + t198 * t80, t50 * t80 + t55 * t69 + (-t5 + (pkin(10) * t56 + t112 * t45) * qJD(4)) * t117 + (pkin(10) * t32 + qJD(4) * t18 + t139) * t113, t49 * t80 - t55 * t237 + (-t4 + (pkin(10) * t57 + t116 * t45) * qJD(4)) * t117 + (-pkin(10) * t31 - qJD(4) * t224 - t138) * t113, t32 * t74 - t47 * t80 + t48 * t56 - t55 * t59 + (t199 * t20 + t3) * t117 + (-qJD(4) * t14 - t141) * t113, -t31 * t59 - t32 * t58 - t40 * t56 + t47 * t57 + t149 * t196 + (-t112 * t2 + t116 * t3 + (-t112 * t14 - t116 * t13) * qJD(5)) * t113, t31 * t74 + t40 * t80 - t48 * t57 + t55 * t58 + (-t197 * t20 - t2) * t117 + (qJD(4) * t13 + t140) * t113, t13 * t40 + t14 * t47 + t2 * t58 + t20 * t48 + t3 * t59 + t74 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, -0.2e1 * t162, 0, 0, 0, t113 * t189, t117 * t189, -0.2e1 * t105 * t167 + 0.2e1 * t106 * t166, 0.2e1 * t105 * t163 + t157 * t239, 0.2e1 * t113 * t173 + 0.2e1 * t204 * t197, -0.2e1 * t112 * t162 + 0.2e1 * t113 * t171, -0.2e1 * t166, 0.2e1 * t69 * t198 - 0.2e1 * t50 * t117 + 0.2e1 * (t102 * t105 + t112 * t161) * pkin(10), -0.2e1 * t237 * t198 - 0.2e1 * t49 * t117 + 0.2e1 * (-t105 * t194 + t116 * t161) * pkin(10), 0.2e1 * (t199 * t74 + t47) * t117 + 0.2e1 * (-qJD(4) * t59 + t102 * t74 + t112 * t48) * t113, 0.2e1 * t145 * t196 + 0.2e1 * (-t112 * t40 + t116 * t47 + (-t112 * t59 - t116 * t58) * qJD(5)) * t113, 0.2e1 * (-t197 * t74 - t40) * t117 + 0.2e1 * (qJD(4) * t58 - t116 * t48 + t194 * t74) * t113, 0.2e1 * t40 * t58 + 0.2e1 * t47 * t59 + 0.2e1 * t48 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t16, 0, 0, 0, 0, 0, t10, t9, t10, t122, -t9, pkin(11) * t122 + t15 * t89 + t42 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, -t55, t170, t27, t26, t102 * t57 - t214, qJD(5) * t146 - t112 * t32 - t213, t137, -t136, 0, -pkin(4) * t32 - t132 + t138, pkin(4) * t31 + t139 + t238, t32 * t89 + t56 * t78 - t132 + t140 (-t214 - t217 + (t216 + t218) * qJD(5)) * pkin(11) + t123, t31 * t89 - t57 * t78 + t141 - t238, pkin(11) * t123 + t20 * t78 + t8 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, -t198, 0, -pkin(10) * t196, pkin(10) * t198, -t113 * t163 + t157, t167 * t239 - t205 * t196, -t171 + t179, t129, 0, t97 + (-pkin(4) * t116 + t229) * t193 + (t112 * t154 - t100) * qJD(4) (t112 * t153 + t116 * t228) * qJD(5) + (t116 * t154 + t186) * qJD(4), t97 + (t193 * t89 - t48) * t116 - t235 * t112, t121 (-t48 + (t113 * t89 + t225) * qJD(5)) * t112 + t235 * t116, pkin(11) * t121 + t48 * t89 + t74 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t167, -0.2e1 * t163, 0, 0, 0, t112 * t188, t116 * t188, -0.2e1 * t116 * t78 + 0.2e1 * t194 * t89, 0, -0.2e1 * t102 * t89 - 0.2e1 * t112 * t78, 0.2e1 * t89 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t7, -t6, 0, t7, -pkin(5) * t6 + qJ(6) * t7 + qJD(6) * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t32, t55, t5, t4, t5 + 0.2e1 * t231, pkin(5) * t31 - qJ(6) * t32 - qJD(6) * t56, 0.2e1 * t212 - t4 + 0.2e1 * t220, -pkin(5) * t3 + qJ(6) * t2 + qJD(6) * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, -t240, t198, t50, t49, t50 + 0.2e1 * t184 (-pkin(5) * t196 - qJ(6) * t193) * t116 + (-qJ(6) * t196 + (pkin(5) * qJD(5) - qJD(6)) * t113) * t112, -t49 + 0.2e1 * t177 - 0.2e1 * t190, -pkin(5) * t47 + qJ(6) * t40 + qJD(6) * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, -t194, 0, -t182, t183, -t182, -t234, -t183, -t234 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t232, qJ(6) * t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, -t31, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, t82, 0, t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, 0, t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t11;
