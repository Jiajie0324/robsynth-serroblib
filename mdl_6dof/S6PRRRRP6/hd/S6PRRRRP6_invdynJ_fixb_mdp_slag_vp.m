% Calculate vector of inverse dynamics joint torques for
% S6PRRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,theta1]';
% MDP [29x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6PRRRRP6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6PRRRRP6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(29,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRP6_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [29 1]), ...
  'S6PRRRRP6_invdynJ_fixb_mdp_slag_vp: MDP has to be [29x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 00:34:56
% EndTime: 2019-03-09 00:35:24
% DurationCPUTime: 21.09s
% Computational Cost: add. (11274->784), mult. (28358->1066), div. (0->0), fcn. (24441->14), ass. (0->321)
t738 = sin(pkin(7));
t745 = sin(qJ(3));
t749 = cos(qJ(3));
t797 = (pkin(3) * t745 - pkin(10) * t749) * t738;
t739 = sin(pkin(6));
t746 = sin(qJ(2));
t908 = t739 * t746;
t849 = qJD(1) * t908;
t962 = qJD(3) * t797 - t738 * t849;
t741 = cos(pkin(7));
t750 = cos(qJ(2));
t895 = t749 * t750;
t901 = t745 * t746;
t793 = -t741 * t901 + t895;
t671 = t793 * t739;
t912 = t738 * t745;
t729 = pkin(9) * t912;
t903 = t741 * t749;
t947 = pkin(2) * t903 - t729;
t960 = -qJD(1) * t671 + t947 * qJD(3);
t874 = qJD(2) * t738;
t728 = t749 * t874;
t810 = t728 - qJD(4);
t904 = t741 * t745;
t910 = t738 * t749;
t879 = pkin(2) * t904 + pkin(9) * t910;
t679 = pkin(10) * t741 + t879;
t816 = -pkin(3) * t749 - pkin(10) * t745;
t680 = (-pkin(2) + t816) * t738;
t744 = sin(qJ(4));
t748 = cos(qJ(4));
t868 = qJD(4) * t748;
t870 = qJD(4) * t744;
t961 = -t679 * t870 + t680 * t868 + t744 * t962 + t960 * t748;
t899 = t746 * t749;
t900 = t745 * t750;
t795 = t741 * t899 + t900;
t670 = t795 * t739;
t948 = -qJD(1) * t670 + t879 * qJD(3);
t826 = qJD(2) * t741 + qJD(3);
t804 = qJD(4) * t826;
t820 = qJDD(2) * t741 + qJDD(3);
t872 = qJD(3) * t749;
t843 = t744 * t872;
t860 = qJDD(2) * t745;
t590 = (qJD(2) * (t745 * t868 + t843) + t744 * t860) * t738 + t744 * t804 - t748 * t820;
t579 = qJDD(5) + t590;
t873 = qJD(3) * t745;
t844 = t738 * t873;
t959 = -pkin(11) * t844 - t961;
t695 = -t748 * t741 + t744 * t912;
t842 = t748 * t872;
t637 = -qJD(4) * t695 + t738 * t842;
t911 = t738 * t748;
t696 = t744 * t741 + t745 * t911;
t638 = qJD(4) * t696 + t738 * t843;
t958 = pkin(4) * t638 - pkin(11) * t637 + t948;
t700 = pkin(9) * t874 + t849;
t875 = qJD(1) * t750;
t710 = qJD(2) * pkin(2) + t739 * t875;
t742 = cos(pkin(6));
t876 = qJD(1) * t742;
t850 = t738 * t876;
t610 = t749 * t700 + t710 * t904 + t745 * t850;
t957 = t610 + t810 * (pkin(4) * t744 - pkin(11) * t748);
t907 = t739 * t750;
t727 = qJDD(1) * t907;
t847 = qJD(2) * t908;
t819 = qJD(1) * t847;
t676 = qJDD(2) * pkin(2) + t727 - t819;
t861 = qJDD(1) * t742;
t837 = t738 * t861;
t845 = qJD(3) * t738 * t742;
t916 = t710 * t741;
t935 = pkin(9) * t738;
t952 = qJDD(2) * t935 + (qJD(2) * t875 + qJDD(1) * t746) * t739 + qJD(1) * t845 + qJD(3) * t916;
t798 = -t676 * t903 + t700 * t872 + t745 * t952 - t749 * t837;
t523 = -pkin(3) * t820 + t798;
t926 = sin(pkin(12));
t832 = t926 * t750;
t740 = cos(pkin(12));
t906 = t740 * t746;
t693 = t742 * t906 + t832;
t833 = t926 * t746;
t905 = t740 * t750;
t771 = -t742 * t905 + t833;
t765 = t771 * t749;
t909 = t739 * t740;
t854 = t738 * t909;
t594 = t693 * t745 + t741 * t765 + t749 * t854;
t694 = -t742 * t833 + t905;
t772 = t742 * t832 + t906;
t767 = t772 * t749;
t834 = t739 * t926;
t817 = t738 * t834;
t596 = t694 * t745 + t741 * t767 - t749 * t817;
t944 = t741 * t895 - t901;
t633 = -t739 * t944 - t742 * t910;
t777 = g(1) * t596 + g(2) * t594 + g(3) * t633;
t956 = t523 - t777;
t954 = t679 * t868 + t680 * t870 + t960 * t744 - t748 * t962;
t953 = t744 * t728 - t870;
t848 = t745 * t874;
t667 = t744 * t848 - t748 * t826;
t657 = qJD(5) + t667;
t669 = t744 * t826 + t748 * t848;
t951 = t810 * t669;
t889 = -pkin(4) * t844 + t954;
t678 = t729 + (-pkin(2) * t749 - pkin(3)) * t741;
t600 = pkin(4) * t695 - pkin(11) * t696 + t678;
t882 = t748 * t679 + t744 * t680;
t602 = -pkin(11) * t910 + t882;
t743 = sin(qJ(5));
t747 = cos(qJ(5));
t865 = qJD(5) * t747;
t866 = qJD(5) * t743;
t950 = -t600 * t865 + t602 * t866 - t958 * t743 + t747 * t959;
t949 = t743 * t600 + t747 * t602;
t800 = t744 * t820;
t759 = t748 * t804 + t800;
t774 = -t745 * t870 + t842;
t859 = qJDD(2) * t748;
t835 = t745 * t859;
t753 = t759 + (qJD(2) * t774 + t835) * t738;
t862 = qJD(2) * qJD(3);
t839 = t745 * t862;
t858 = qJDD(2) * t749;
t726 = t738 * t858;
t857 = qJDD(4) - t726;
t776 = t738 * t839 + t857;
t625 = t747 * t669 - t743 * t810;
t867 = qJD(5) * t625;
t525 = t743 * t753 - t747 * t776 + t867;
t821 = t748 * t728;
t945 = t821 - t868;
t609 = -t745 * t700 + t749 * (t850 + t916);
t685 = qJD(2) * t797;
t884 = t748 * t609 + t744 * t685;
t557 = pkin(11) * t848 + t884;
t805 = pkin(4) * t748 + pkin(11) * t744 + pkin(3);
t943 = t747 * t557 + t743 * t957 + t805 * t865;
t766 = t771 * t745;
t595 = t693 * t749 - t741 * t766 - t745 * t854;
t597 = t694 * t749 + (-t741 * t772 + t817) * t745;
t794 = t741 * t900 + t899;
t634 = t739 * t794 + t742 * t912;
t796 = t738 * t907 - t741 * t742;
t598 = t634 * t744 + t748 * t796;
t635 = t738 * t771 - t741 * t909;
t636 = t738 * t772 + t741 * t834;
t780 = g(3) * t598 - g(2) * (-t595 * t744 + t635 * t748) - g(1) * (-t597 * t744 + t636 * t748);
t593 = pkin(10) * t826 + t610;
t725 = t741 * t876;
t622 = t725 + (qJD(2) * t816 - t710) * t738;
t541 = -t744 * t593 + t748 * t622;
t535 = pkin(4) * t810 - t541;
t830 = t747 * t810;
t623 = t669 * t743 + t830;
t502 = t623 * pkin(5) - t625 * qJ(6) + t535;
t934 = pkin(11) * t579;
t942 = t502 * t657 - t934;
t940 = -qJD(5) * t949 + t743 * t959 + t958 * t747;
t939 = t625 ^ 2;
t938 = t657 ^ 2;
t751 = qJD(2) ^ 2;
t937 = qJD(3) ^ 2;
t936 = pkin(5) * t579;
t927 = pkin(11) * qJD(5);
t925 = qJ(6) * t579;
t542 = t748 * t593 + t744 * t622;
t536 = -pkin(11) * t810 + t542;
t592 = -pkin(3) * t826 - t609;
t544 = t667 * pkin(4) - t669 * pkin(11) + t592;
t501 = t536 * t747 + t544 * t743;
t496 = qJ(6) * t657 + t501;
t924 = t496 * t657;
t923 = t501 * t657;
t524 = qJD(5) * t830 + t669 * t866 - t743 * t776 - t747 * t753;
t922 = t524 * t743;
t921 = t579 * t743;
t920 = t579 * t747;
t919 = t623 * t657;
t918 = t625 * t623;
t917 = t625 * t657;
t915 = t805 * t747;
t913 = t738 * t744;
t902 = t743 * t748;
t898 = t746 * t751;
t897 = t747 * t748;
t896 = t747 * t749;
t894 = qJDD(1) - g(3);
t893 = qJ(6) * t638 + qJD(6) * t695 - t950;
t892 = -pkin(5) * t638 - t940;
t639 = t696 * t743 + t738 * t896;
t559 = qJD(5) * t639 - t747 * t637 - t743 * t844;
t852 = t743 * t910;
t560 = -qJD(5) * t852 + t637 * t743 + t696 * t865 - t747 * t844;
t640 = t696 * t747 - t852;
t891 = pkin(5) * t560 + qJ(6) * t559 - qJD(6) * t640 + t889;
t608 = pkin(4) * t669 + pkin(11) * t667;
t890 = t747 * t541 + t743 * t608;
t864 = qJD(5) * t748;
t869 = qJD(4) * t747;
t887 = -qJD(6) * t748 + (-t743 * t864 - t744 * t869) * pkin(10) - t943 - t953 * qJ(6);
t885 = -t805 * t866 + (-pkin(10) * t870 - t557) * t743 + (pkin(10) * t864 + t957) * t747 + t953 * pkin(5);
t605 = t744 * t609;
t556 = -pkin(4) * t848 - t685 * t748 + t605;
t653 = t743 * t821 - t747 * t848;
t654 = (t743 * t745 + t748 * t896) * t874;
t811 = pkin(5) * t743 - qJ(6) * t747;
t802 = pkin(10) + t811;
t812 = pkin(5) * t747 + qJ(6) * t743;
t883 = -pkin(5) * t653 + qJ(6) * t654 - t556 + (qJD(5) * t812 - qJD(6) * t747) * t744 + t802 * t868;
t881 = -qJD(6) * t743 + t657 * t811 - t542;
t878 = pkin(10) * t897 - t743 * t805;
t736 = t745 ^ 2;
t877 = -t749 ^ 2 + t736;
t871 = qJD(4) * t743;
t500 = -t536 * t743 + t544 * t747;
t863 = qJD(6) - t500;
t856 = 0.2e1 * t741;
t853 = t738 * t908;
t841 = t657 * t866;
t840 = t738 * t741 * t751;
t838 = t749 * t862;
t831 = -t744 * t679 + t680 * t748;
t829 = t749 * t810;
t828 = t657 * t747;
t827 = qJD(4) * t810;
t768 = -t676 * t904 + t700 * t873 - t745 * t837 - t749 * t952;
t522 = pkin(10) * t820 - t768;
t724 = t741 * t861;
t788 = t839 - t858;
t789 = t838 + t860;
t568 = t724 + (pkin(3) * t788 - pkin(10) * t789 - t676) * t738;
t787 = -t748 * t522 - t744 * t568 + t593 * t870 - t622 * t868;
t490 = pkin(11) * t776 - t787;
t499 = t590 * pkin(4) - pkin(11) * t753 + t523;
t484 = -t743 * t490 + t747 * t499 - t536 * t865 - t544 * t866;
t825 = t744 * t522 - t748 * t568 + t593 * t868 + t622 * t870;
t823 = t738 * t847;
t601 = pkin(4) * t910 - t831;
t814 = t743 * t868 - t653;
t813 = t747 * t868 - t654;
t495 = -pkin(5) * t657 + t863;
t809 = t495 * t747 - t496 * t743;
t599 = t634 * t748 - t744 * t796;
t548 = t599 * t747 + t633 * t743;
t547 = t599 * t743 - t633 * t747;
t807 = t600 * t747 - t602 * t743;
t803 = pkin(4) + t812;
t799 = t820 * MDP(9);
t791 = -t657 * t865 - t921;
t790 = t535 * t657 - t934;
t483 = t747 * t490 + t743 * t499 - t536 * t866 + t544 * t865;
t526 = -t594 * t902 - t595 * t747;
t528 = -t596 * t902 - t597 * t747;
t566 = -t633 * t902 - t634 * t747;
t784 = g(1) * t528 + g(2) * t526 + g(3) * t566;
t527 = -t594 * t897 + t595 * t743;
t529 = -t596 * t897 + t597 * t743;
t567 = -t633 * t897 + t634 * t743;
t783 = -g(1) * t529 - g(2) * t527 - g(3) * t567;
t617 = -t693 * t904 - t765;
t570 = t617 * t748 + t693 * t913;
t616 = t693 * t903 - t766;
t531 = t570 * t743 - t616 * t747;
t619 = -t694 * t904 - t767;
t572 = t619 * t748 + t694 * t913;
t618 = t694 * t903 - t745 * t772;
t533 = t572 * t743 - t618 * t747;
t628 = t671 * t748 + t744 * t853;
t574 = t628 * t743 - t670 * t747;
t782 = -g(1) * t533 - g(2) * t531 - g(3) * t574;
t532 = t570 * t747 + t616 * t743;
t534 = t572 * t747 + t618 * t743;
t575 = t628 * t747 + t670 * t743;
t781 = -g(1) * t534 - g(2) * t532 - g(3) * t575;
t550 = t595 * t748 + t635 * t744;
t552 = t597 * t748 + t636 * t744;
t779 = -g(1) * t552 - g(2) * t550 - g(3) * t599;
t569 = t617 * t744 - t693 * t911;
t571 = t619 * t744 - t694 * t911;
t627 = t671 * t744 - t748 * t853;
t778 = -g(1) * t571 - g(2) * t569 - g(3) * t627;
t770 = t738 * t796;
t764 = t770 * t862;
t762 = -t657 * t927 + t780;
t511 = t550 * t743 - t594 * t747;
t513 = t552 * t743 - t596 * t747;
t761 = g(1) * t513 + g(2) * t511 + g(3) * t547 + t484;
t491 = -pkin(4) * t776 + t825;
t485 = t525 * pkin(5) + t524 * qJ(6) - t625 * qJD(6) + t491;
t760 = -t485 + t762;
t512 = t550 * t747 + t594 * t743;
t514 = t552 * t747 + t596 * t743;
t758 = -g(1) * t514 - g(2) * t512 - g(3) * t548 + t483;
t735 = t738 ^ 2;
t757 = t735 * t739 * t898 - qJDD(2) * t770;
t756 = t502 * t625 + qJDD(6) - t761;
t684 = t802 * t744;
t656 = -t710 * t738 + t725;
t646 = t915 + (pkin(10) * t743 + pkin(5)) * t748;
t645 = -qJ(6) * t748 + t878;
t631 = -t676 * t738 + t724;
t583 = t749 * t845 + (t793 * qJD(2) + qJD(3) * t944) * t739;
t582 = t742 * t844 + (qJD(2) * t795 + qJD(3) * t794) * t739;
t555 = pkin(5) * t625 + qJ(6) * t623;
t537 = pkin(5) * t639 - qJ(6) * t640 + t601;
t518 = -qJD(4) * t598 + t583 * t748 + t744 * t823;
t517 = qJD(4) * t599 + t583 * t744 - t748 * t823;
t516 = -pkin(5) * t695 - t807;
t515 = qJ(6) * t695 + t949;
t505 = -pkin(5) * t669 + t541 * t743 - t608 * t747;
t504 = qJ(6) * t669 + t890;
t503 = -t524 + t919;
t493 = -qJD(5) * t547 + t518 * t747 + t582 * t743;
t492 = qJD(5) * t548 + t518 * t743 - t582 * t747;
t482 = qJDD(6) - t484 - t936;
t481 = qJD(6) * t657 + t483 + t925;
t1 = [t894 * MDP(1) + (-t582 * t826 - t633 * t820 - t745 * t764 - t749 * t757) * MDP(10) + (-t583 * t826 - t634 * t820 + t745 * t757 - t749 * t764) * MDP(11) + (t517 * t810 + t582 * t667 + t633 * t590 - t598 * t776) * MDP(17) + (t518 * t810 - t599 * t857 + t582 * t669 + t633 * t759 + (t633 * t835 + (-t599 * t873 + t633 * t774) * qJD(2)) * t738) * MDP(18) + (t492 * t625 - t493 * t623 - t524 * t547 - t525 * t548) * MDP(27) + (t481 * t548 + t482 * t547 + t485 * t598 + t492 * t495 + t493 * t496 + t502 * t517 - g(3)) * MDP(29) + (MDP(24) + MDP(26)) * (-t492 * t657 + t517 * t623 + t598 * t525 - t547 * t579) + (-MDP(25) + MDP(28)) * (t493 * t657 - t517 * t625 + t524 * t598 + t548 * t579) + ((qJDD(2) * t750 - t898) * MDP(3) + (-qJDD(2) * t746 - t750 * t751) * MDP(4)) * t739; (t947 * t820 - t798 * t741 - g(1) * t619 - g(2) * t617 - g(3) * t671 + (-t631 * t749 + t656 * t873) * t738 - t948 * t826) * MDP(10) + (-t482 * t695 + t485 * t639 - t495 * t638 + t502 * t560 - t516 * t579 + t525 * t537 + t623 * t891 - t657 * t892 + t781) * MDP(26) + (t481 * t695 - t485 * t640 + t496 * t638 + t502 * t559 + t515 * t579 + t524 * t537 - t625 * t891 + t657 * t893 + t782) * MDP(28) + (-t481 * t639 + t482 * t640 - t495 * t559 - t496 * t560 - t515 * t525 - t516 * t524 - t623 * t893 + t625 * t892 + t778) * MDP(27) + (t638 * t810 - t695 * t857 + (t590 * t749 + (-qJD(2) * t695 - t667) * t873) * t738) * MDP(15) + (g(1) * t772 + g(2) * t771 - g(3) * t907 + t727) * MDP(3) + (g(1) * t694 + g(2) * t693 - t894 * t908) * MDP(4) + (-t637 * t810 + t696 * t857 + ((-t800 + (-t738 * t838 - t804) * t748) * t749 + (-(-qJD(2) * t870 + t859) * t910 + (qJD(2) * t696 + t669) * qJD(3)) * t745) * t738) * MDP(14) + (t481 * t515 + t485 * t537 + t482 * t516 - g(1) * (-pkin(2) * t772 + t619 * pkin(3) + t572 * pkin(4) + t534 * pkin(5) + t618 * pkin(10) + t571 * pkin(11) + t533 * qJ(6) + t694 * t935) - g(2) * (-pkin(2) * t771 + t617 * pkin(3) + t570 * pkin(4) + t532 * pkin(5) + t616 * pkin(10) + t569 * pkin(11) + t531 * qJ(6) + t693 * t935) - g(3) * (pkin(3) * t671 + pkin(4) * t628 + pkin(5) * t575 + pkin(10) * t670 + pkin(11) * t627 + qJ(6) * t574 + (pkin(2) * t750 + t746 * t935) * t739) + t891 * t502 + t893 * t496 + t892 * t495) * MDP(29) + qJDD(2) * MDP(2) + ((-pkin(2) * t788 + t749 * t819) * MDP(10) + (-pkin(2) * t789 - t745 * t819) * MDP(11) + 0.2e1 * (t745 * t858 - t862 * t877) * MDP(6) + (qJDD(2) * t736 + 0.2e1 * t745 * t838) * MDP(5)) * t735 + t741 * t799 + (-g(1) * t572 - g(2) * t570 - g(3) * t628 + t523 * t695 + t541 * t844 + t678 * t590 + t592 * t638 + t948 * t667 + t831 * t776 + t810 * t954 + t825 * t910) * MDP(17) + (qJDD(3) * t749 - t745 * t937 - t788 * t856) * t738 * MDP(8) + (t745 * qJDD(3) + t749 * t937 + t789 * t856) * t738 * MDP(7) + (-t857 * t749 + (-t728 - t810) * t873) * t738 * MDP(16) + (-t524 * t695 - t559 * t657 + t579 * t640 + t625 * t638) * MDP(21) + (t579 * t695 + t638 * t657) * MDP(23) + (-t525 * t695 - t560 * t657 - t579 * t639 - t623 * t638) * MDP(22) + (t524 * t639 - t525 * t640 + t559 * t623 - t560 * t625) * MDP(20) + (-t524 * t640 - t559 * t625) * MDP(19) + (-t483 * t695 + t491 * t640 - t501 * t638 - t601 * t524 - t535 * t559 - t579 * t949 + t889 * t625 + t657 * t950 - t782) * MDP(25) + (-t879 * t820 + t768 * t741 + g(1) * t618 + g(2) * t616 + g(3) * t670 + (t631 * t745 + t656 * t872) * t738 - t960 * t826) * MDP(11) + (t523 * t696 - t542 * t844 + t592 * t637 + t948 * t669 + t678 * t753 - t776 * t882 - t787 * t910 + t810 * t961 - t778) * MDP(18) + (t484 * t695 + t491 * t639 + t500 * t638 + t601 * t525 + t535 * t560 + t807 * t579 + t889 * t623 + t657 * t940 + t781) * MDP(24) + (t669 * t637 + t696 * t753) * MDP(12) + (-t696 * t590 - t637 * t667 - t669 * t638 - t695 * t753) * MDP(13); (t738 * t860 - t749 * t840) * MDP(7) + (-t524 * t744 * t747 + (-t744 * t866 + t813) * t625) * MDP(19) + (t610 * t826 - t656 * t848 + t777 - t798) * MDP(10) + (t525 * t748 - t814 * t657 + (t623 * t810 + t791) * t744) * MDP(22) + (t745 * t840 + t726) * MDP(8) + (g(1) * t597 + g(2) * t595 + g(3) * t634 + t609 * t826 - t656 * t728 + t768) * MDP(11) + (t482 * t748 + t525 * t684 - t579 * t646 - t885 * t657 + t883 * t623 + t814 * t502 + (t485 * t743 + t495 * t810 + t502 * t865) * t744 + t783) * MDP(26) + (-t481 * t748 + t524 * t684 + t579 * t645 + t887 * t657 - t883 * t625 - t813 * t502 + (-t485 * t747 - t496 * t810 + t502 * t866) * t744 - t784) * MDP(28) + (-t495 * t654 + t496 * t653 - t524 * t646 - t525 * t645 + t885 * t625 - t887 * t623 + t809 * t868 + (-t481 * t743 + t482 * t747 + (-t495 * t743 - t496 * t747) * qJD(5) + t777) * t744) * MDP(27) + (t524 * t748 + t813 * t657 + (-t625 * t810 - t841 + t920) * t744) * MDP(21) + (t623 * t654 + t625 * t653 + (-t623 * t747 - t625 * t743) * t868 + (t922 - t525 * t747 + (t623 * t743 - t625 * t747) * qJD(5)) * t744) * MDP(20) + t799 + (-t657 * t744 * t810 - t579 * t748) * MDP(23) + (-pkin(3) * t590 - t605 * t810 - t541 * t848 - t610 * t667 + (-pkin(10) * t776 - t592 * t810) * t744 + (pkin(10) * t827 + t685 * t810 - t956) * t748) * MDP(17) + (-t748 * t827 + t744 * t857 + (t748 * t829 + (qJD(3) * t744 - t669) * t745) * t874) * MDP(14) + (t744 * t827 + t748 * t857 + (-t744 * t829 + (qJD(3) * t748 + t667) * t745) * t874) * MDP(15) + (-t579 * t915 - t535 * t653 - t556 * t623 + (-t957 * t747 + (qJD(5) * t805 + t557) * t743) * t657 + (t535 * t871 - t484 + (qJD(4) * t623 + t791) * pkin(10)) * t748 + (t535 * t865 + t491 * t743 - t810 * t500 + (t657 * t871 + t525) * pkin(10)) * t744 + t783) * MDP(24) + t810 * MDP(16) * t848 + (t481 * t645 + t485 * t684 + t482 * t646 - g(1) * (pkin(5) * t529 + pkin(10) * t597 + qJ(6) * t528) - g(2) * (pkin(5) * t527 + pkin(10) * t595 + qJ(6) * t526) - g(3) * (pkin(5) * t567 + pkin(10) * t634 + qJ(6) * t566) + t883 * t502 + t887 * t496 + t885 * t495 + t777 * t805) * MDP(29) + (-t878 * t579 - t556 * t625 - t535 * t654 + t943 * t657 + (t535 * t869 + t483 + (qJD(4) * t625 + t841) * pkin(10)) * t748 + (-t535 * t866 + t491 * t747 + t810 * t501 + (t657 * t869 - t524) * pkin(10)) * t744 + t784) * MDP(25) + (-t744 * t590 + t945 * t667 + t669 * t953 + t748 * t753) * MDP(13) + (-pkin(3) * t753 + t542 * t848 - t610 * t669 - t810 * t884 - t945 * t592 + (-t748 * t776 - t810 * t870) * pkin(10) + t956 * t744) * MDP(18) + ((-qJD(4) * t848 + t820) * t744 ^ 2 + ((t738 * t789 + t804) * t744 - t951) * t748) * MDP(12) + (-MDP(5) * t745 * t749 + MDP(6) * t877) * t735 * t751; -t667 ^ 2 * MDP(13) + (-t667 * t810 + t753) * MDP(14) + (-t590 - t951) * MDP(15) + t776 * MDP(16) + (-t542 * t810 + t780 - t825) * MDP(17) + (-t541 * t810 + t592 * t667 - t779 + t787) * MDP(18) + (t625 * t828 - t922) * MDP(19) + ((-t524 - t919) * t747 + (-t525 - t917) * t743) * MDP(20) + (t657 * t828 + t921) * MDP(21) + (-t743 * t938 + t920) * MDP(22) + (-pkin(4) * t525 - t542 * t623 + (t541 * t657 + t790) * t743 + (-t491 + (-t608 - t927) * t657 + t780) * t747) * MDP(24) + (pkin(4) * t524 + t890 * t657 - t542 * t625 + t790 * t747 + (t491 - t762) * t743) * MDP(25) + (t505 * t657 - t525 * t803 + t881 * t623 + t743 * t942 + t760 * t747) * MDP(26) + (t504 * t623 - t505 * t625 + (t481 + t657 * t495 + (-t525 + t867) * pkin(11)) * t747 + (t482 - t924 + (qJD(5) * t623 - t524) * pkin(11)) * t743 + t779) * MDP(27) + (-t504 * t657 - t524 * t803 - t881 * t625 + t760 * t743 - t747 * t942) * MDP(28) + (-t495 * t505 - t496 * t504 + t881 * t502 + (qJD(5) * t809 + t481 * t747 + t482 * t743 + t779) * pkin(11) + (-t485 + t780) * t803) * MDP(29) + (MDP(12) * t667 + MDP(13) * t669 - MDP(17) * t592 - MDP(21) * t625 + MDP(22) * t623 - MDP(23) * t657 - MDP(24) * t500 + MDP(25) * t501 + MDP(26) * t495 - MDP(28) * t496) * t669; MDP(19) * t918 + (-t623 ^ 2 + t939) * MDP(20) + t503 * MDP(21) + (t917 - t525) * MDP(22) + t579 * MDP(23) + (-t535 * t625 + t761 + t923) * MDP(24) + (t500 * t657 + t535 * t623 - t758) * MDP(25) + (-t555 * t623 - t756 + t923 + 0.2e1 * t936) * MDP(26) + (pkin(5) * t524 - qJ(6) * t525 + (t496 - t501) * t625 + (t495 - t863) * t623) * MDP(27) + (0.2e1 * t925 - t502 * t623 + t555 * t625 + (0.2e1 * qJD(6) - t500) * t657 + t758) * MDP(28) + (t481 * qJ(6) - t482 * pkin(5) - t502 * t555 - t495 * t501 - g(1) * (-pkin(5) * t513 + qJ(6) * t514) - g(2) * (-pkin(5) * t511 + qJ(6) * t512) - g(3) * (-pkin(5) * t547 + qJ(6) * t548) + t863 * t496) * MDP(29); t503 * MDP(27) + (-t938 - t939) * MDP(28) + (t756 - t924 - t936) * MDP(29) + (t918 - t579) * MDP(26);];
tau  = t1;
