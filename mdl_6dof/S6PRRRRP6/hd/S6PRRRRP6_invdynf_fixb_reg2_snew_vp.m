% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 10:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 10:21:38
% EndTime: 2019-05-05 10:21:56
% DurationCPUTime: 18.88s
% Computational Cost: add. (70162->340), mult. (145575->507), div. (0->0), fcn. (118755->14), ass. (0->281)
t2949 = sin(qJ(4));
t2953 = cos(qJ(4));
t2946 = cos(pkin(7));
t3037 = qJD(2) * t2946;
t3015 = qJD(3) + t3037;
t2943 = sin(pkin(7));
t2950 = sin(qJ(3));
t3025 = t2943 * t2950;
t3017 = qJD(2) * t3025;
t2908 = t2949 * t3015 + t2953 * t3017;
t2954 = cos(qJ(3));
t3038 = qJD(2) * t2943;
t3016 = t2954 * t3038;
t3021 = qJDD(2) * t2943;
t2913 = qJD(3) * t3016 + t2950 * t3021;
t3019 = t2946 * qJDD(2) + qJDD(3);
t3012 = t2949 * t2913 - t2953 * t3019;
t2967 = qJD(4) * t2908 + qJDD(5) + t3012;
t2929 = -qJD(4) + t3016;
t2948 = sin(qJ(5));
t2952 = cos(qJ(5));
t2891 = t2908 * t2948 + t2929 * t2952;
t2893 = t2908 * t2952 - t2929 * t2948;
t3031 = t2891 * t2893;
t2832 = t2967 + t3031;
t2890 = t2893 ^ 2;
t2906 = t2949 * t3017 - t2953 * t3015;
t2904 = qJD(5) + t2906;
t3043 = t2904 ^ 2;
t3047 = -t2890 - t3043;
t2806 = t2832 * t2952 + t2948 * t3047;
t2968 = -t2953 * t2913 - t2949 * t3019;
t2876 = -t2906 * qJD(4) - t2968;
t3020 = qJDD(2) * t2954;
t3036 = qJD(2) * t2950;
t3048 = (qJD(3) * t3036 - t3020) * t2943;
t2963 = qJDD(4) + t3048;
t2961 = -t2891 * qJD(5) + t2952 * t2876 + t2948 * t2963;
t3030 = t2891 * t2904;
t2959 = t2961 - t3030;
t2773 = t2806 * t2949 + t2953 * t2959;
t2775 = t2806 * t2953 - t2949 * t2959;
t2804 = t2832 * t2948 - t2952 * t3047;
t2994 = t2775 * t2950 - t2804 * t2954;
t2735 = t2946 * t2773 + t2943 * t2994;
t2944 = sin(pkin(6));
t2947 = cos(pkin(6));
t2737 = -t2943 * t2773 + t2946 * t2994;
t2758 = t2775 * t2954 + t2804 * t2950;
t2951 = sin(qJ(2));
t2955 = cos(qJ(2));
t3002 = t2737 * t2955 + t2758 * t2951;
t2706 = -t2944 * t2735 + t2947 * t3002;
t2723 = t2737 * t2951 - t2758 * t2955;
t2942 = sin(pkin(12));
t2945 = cos(pkin(12));
t3094 = t2706 * t2942 + t2723 * t2945;
t3093 = t2706 * t2945 - t2723 * t2942;
t2704 = t2947 * t2735 + t2944 * t3002;
t2820 = t2961 + t3030;
t3014 = t2948 * t2876 - t2952 * t2963;
t2966 = (-qJD(5) + t2904) * t2893 - t3014;
t3045 = -t2820 * t2952 + t2948 * t2966;
t2864 = t2891 ^ 2;
t2843 = t2890 + t2864;
t3044 = t2820 * t2948 + t2952 * t2966;
t3060 = -t2843 * t2949 + t2953 * t3044;
t3065 = t2950 * t3045 + t2954 * t3060;
t3059 = t2843 * t2953 + t2949 * t3044;
t3066 = t2950 * t3060 - t2954 * t3045;
t3071 = -t2943 * t3059 + t2946 * t3066;
t3076 = -t2951 * t3071 + t2955 * t3065;
t3072 = t2943 * t3066 + t2946 * t3059;
t3075 = t2951 * t3065 + t2955 * t3071;
t3081 = -t2944 * t3072 + t2947 * t3075;
t3086 = -t2942 * t3081 + t2945 * t3076;
t3085 = t2942 * t3076 + t2945 * t3081;
t3082 = t2944 * t3075 + t2947 * t3072;
t2833 = t2967 - t3031;
t3046 = -t3043 - t2864;
t3051 = -t2833 * t2948 + t2952 * t3046;
t3064 = t2949 * t3051;
t3052 = t2833 * t2952 + t2948 * t3046;
t3063 = t2950 * t3052;
t3062 = t2953 * t3051;
t3061 = t2954 * t3052;
t2931 = -g(1) * t2945 - g(2) * t2942;
t2941 = -g(3) + qJDD(1);
t3026 = t2941 * t2944;
t2930 = g(1) * t2942 - g(2) * t2945;
t3028 = t2930 * t2947;
t3053 = t3026 + t3028;
t2888 = -t2951 * t2931 + t2955 * t3053;
t2956 = qJD(2) ^ 2;
t2962 = t2956 * t2943 * pkin(9) + qJDD(2) * pkin(2) + t2888;
t2975 = -t2930 * t2944 + t2941 * t2947;
t3054 = t2943 * t2975 + t2946 * t2962;
t3011 = t3015 ^ 2;
t3042 = t2906 ^ 2;
t3041 = t2908 ^ 2;
t3040 = t2929 ^ 2;
t3029 = t2908 * t2906;
t3027 = t2943 ^ 2 * t2956;
t3023 = qJD(4) + t2929;
t2889 = t2955 * t2931 + t2951 * t3053;
t2882 = -pkin(2) * t2956 + pkin(9) * t3021 + t2889;
t2836 = t2954 * t2882 + t2950 * t3054;
t2912 = (-pkin(3) * t2954 - pkin(10) * t2950) * t3038;
t2827 = -pkin(3) * t3011 + pkin(10) * t3019 + t2912 * t3016 + t2836;
t2969 = t2946 * t2975;
t3010 = qJD(2) * t3015;
t2973 = t2954 * t3010;
t2957 = t2969 - t2913 * pkin(10) + (-pkin(10) * t2973 + (-t3020 + (0.2e1 * qJD(3) + t3037) * t3036) * pkin(3) - t2962) * t2943;
t2795 = t2953 * t2827 + t2949 * t2957;
t2883 = pkin(4) * t2906 - pkin(11) * t2908;
t2779 = -pkin(4) * t3040 + pkin(11) * t2963 - t2906 * t2883 + t2795;
t3022 = t3054 * t2954;
t2826 = -t3019 * pkin(3) - t3011 * pkin(10) + (t2912 * t3038 + t2882) * t2950 - t3022;
t2854 = (qJD(4) - t2929) * t2908 + t3012;
t3013 = -t2906 * t2929 - t2876;
t2958 = pkin(4) * t2854 + pkin(11) * t3013 + t2826;
t2756 = t2952 * t2779 + t2948 * t2958;
t2755 = -t2948 * t2779 + t2952 * t2958;
t2794 = -t2949 * t2827 + t2953 * t2957;
t2863 = pkin(5) * t2891 - qJ(6) * t2893;
t2743 = -pkin(5) * t3043 + qJ(6) * t2967 + 0.2e1 * qJD(6) * t2904 - t2891 * t2863 + t2756;
t2746 = -pkin(5) * t2967 - qJ(6) * t3043 + t2893 * t2863 + qJDD(6) - t2755;
t2720 = t2743 * t2952 + t2746 * t2948;
t2778 = -t2963 * pkin(4) - t3040 * pkin(11) + t2908 * t2883 - t2794;
t2972 = -qJD(5) * t2893 - t3014;
t2754 = -t2972 * pkin(5) + (pkin(5) * t2904 - 0.2e1 * qJD(6)) * t2893 + t2778 - t2959 * qJ(6);
t2708 = t2720 * t2949 - t2754 * t2953;
t2709 = t2720 * t2953 + t2754 * t2949;
t2719 = t2743 * t2948 - t2746 * t2952;
t3007 = t2709 * t2950 - t2719 * t2954;
t2693 = -t2943 * t2708 + t2946 * t3007;
t2696 = t2709 * t2954 + t2719 * t2950;
t3009 = t2693 * t2955 + t2696 * t2951;
t2726 = -t2755 * t2948 + t2756 * t2952;
t2717 = t2726 * t2949 - t2778 * t2953;
t2718 = t2726 * t2953 + t2778 * t2949;
t2725 = t2755 * t2952 + t2756 * t2948;
t3006 = t2718 * t2950 - t2725 * t2954;
t2695 = -t2943 * t2717 + t2946 * t3006;
t2703 = t2718 * t2954 + t2725 * t2950;
t3008 = t2695 * t2955 + t2703 * t2951;
t2760 = t2794 * t2953 + t2795 * t2949;
t2761 = -t2794 * t2949 + t2795 * t2953;
t2998 = t2761 * t2950 - t2826 * t2954;
t2728 = -t2943 * t2760 + t2946 * t2998;
t2753 = t2761 * t2954 + t2826 * t2950;
t3005 = t2728 * t2955 + t2753 * t2951;
t2816 = (qJD(5) + t2904) * t2893 + t3014;
t2774 = -t2816 * t2953 + t3064;
t2776 = t2816 * t2949 + t3062;
t2993 = t2776 * t2950 - t3061;
t2738 = -t2943 * t2774 + t2946 * t2993;
t2759 = t2776 * t2954 + t3063;
t3001 = t2738 * t2955 + t2759 * t2951;
t2817 = t2893 * t2904 - t2972;
t2781 = -t2817 * t2953 + t3064;
t2783 = t2817 * t2949 + t3062;
t2991 = t2783 * t2950 - t3061;
t2742 = -t2943 * t2781 + t2946 * t2991;
t2763 = t2783 * t2954 + t3063;
t2999 = t2742 * t2955 + t2763 * t2951;
t2855 = -t2908 * t3023 - t3012;
t2857 = t2906 * t3023 + t2968;
t2823 = t2855 * t2949 + t2857 * t2953;
t2824 = t2855 * t2953 - t2857 * t2949;
t2867 = -t3041 - t3042;
t2987 = t2824 * t2950 - t2867 * t2954;
t2772 = -t2943 * t2823 + t2946 * t2987;
t2801 = t2824 * t2954 + t2867 * t2950;
t2995 = t2772 * t2955 + t2801 * t2951;
t2865 = -t2943 * t2962 + t2969;
t2835 = -t2950 * t2882 + t3022;
t2986 = t2835 * t2954 + t2836 * t2950;
t2789 = -t2943 * t2865 + t2946 * t2986;
t2800 = -t2835 * t2950 + t2836 * t2954;
t2990 = t2789 * t2955 + t2800 * t2951;
t2870 = t2963 - t3029;
t2877 = -t3040 - t3042;
t2839 = t2870 * t2953 + t2877 * t2949;
t2840 = -t2870 * t2949 + t2877 * t2953;
t2985 = t2840 * t2950 - t2854 * t2954;
t2793 = -t2943 * t2839 + t2946 * t2985;
t2814 = t2840 * t2954 + t2854 * t2950;
t2989 = t2793 * t2955 + t2814 * t2951;
t2869 = -t3029 - t2963;
t2885 = -t3040 - t3041;
t2846 = t2869 * t2949 + t2885 * t2953;
t2847 = t2869 * t2953 - t2885 * t2949;
t2984 = t2847 * t2950 + t2954 * t3013;
t2797 = -t2943 * t2846 + t2946 * t2984;
t2815 = t2847 * t2954 - t2950 * t3013;
t2988 = t2797 * t2955 + t2815 * t2951;
t2939 = t2950 ^ 2;
t2940 = t2954 ^ 2;
t2919 = (-t2939 - t2940) * t3027;
t2895 = t2943 * t2973 - t2913;
t2921 = t3010 * t3025;
t2896 = t2921 - t3048;
t2979 = t2895 * t2954 + t2896 * t2950;
t2851 = -t2943 * t2919 + t2946 * t2979;
t2866 = -t2895 * t2950 + t2896 * t2954;
t2983 = t2851 * t2955 + t2866 * t2951;
t2894 = t3015 * t3016 + t2913;
t2903 = -t2939 * t3027 - t3011;
t2928 = t2950 * t2954 * t3027;
t2911 = t2928 - t3019;
t2978 = t2903 * t2954 + t2911 * t2950;
t2853 = -t2943 * t2894 + t2946 * t2978;
t2881 = -t2903 * t2950 + t2911 * t2954;
t2982 = t2853 * t2955 + t2881 * t2951;
t2897 = t2921 + t3048;
t2910 = t2928 + t3019;
t2914 = -t2940 * t3027 - t3011;
t2977 = t2910 * t2954 + t2914 * t2950;
t2862 = -t2943 * t2897 + t2946 * t2977;
t2886 = -t2910 * t2950 + t2914 * t2954;
t2981 = t2862 * t2955 + t2886 * t2951;
t2980 = t2888 * t2955 + t2889 * t2951;
t2974 = qJDD(2) * t2955 - t2951 * t2956;
t2927 = -qJDD(2) * t2951 - t2955 * t2956;
t2918 = t2974 * t2947;
t2917 = t2927 * t2947;
t2916 = t2974 * t2944;
t2915 = t2927 * t2944;
t2861 = t2946 * t2897 + t2943 * t2977;
t2860 = -t2888 * t2951 + t2889 * t2955;
t2852 = t2946 * t2894 + t2943 * t2978;
t2850 = t2946 * t2919 + t2943 * t2979;
t2845 = t2944 ^ 2 * t2930 + (t2980 - t3026) * t2947;
t2844 = t2947 ^ 2 * t2941 + (t2980 - t3028) * t2944;
t2837 = -t2862 * t2951 + t2886 * t2955;
t2831 = -t2853 * t2951 + t2881 * t2955;
t2828 = -t2851 * t2951 + t2866 * t2955;
t2813 = -t2944 * t2861 + t2947 * t2981;
t2812 = t2947 * t2861 + t2944 * t2981;
t2803 = -t2944 * t2852 + t2947 * t2982;
t2802 = t2947 * t2852 + t2944 * t2982;
t2799 = -t2944 * t2850 + t2947 * t2983;
t2798 = t2947 * t2850 + t2944 * t2983;
t2796 = t2946 * t2846 + t2943 * t2984;
t2792 = t2946 * t2839 + t2943 * t2985;
t2788 = t2946 * t2865 + t2943 * t2986;
t2771 = t2946 * t2823 + t2943 * t2987;
t2766 = -t2797 * t2951 + t2815 * t2955;
t2765 = -t2793 * t2951 + t2814 * t2955;
t2764 = -t2789 * t2951 + t2800 * t2955;
t2757 = -t2772 * t2951 + t2801 * t2955;
t2752 = -t2944 * t2796 + t2947 * t2988;
t2751 = t2947 * t2796 + t2944 * t2988;
t2748 = -t2944 * t2792 + t2947 * t2989;
t2747 = t2947 * t2792 + t2944 * t2989;
t2745 = -t2944 * t2788 + t2947 * t2990;
t2744 = t2947 * t2788 + t2944 * t2990;
t2740 = t2946 * t2781 + t2943 * t2991;
t2736 = t2946 * t2774 + t2943 * t2993;
t2734 = -t2944 * t2771 + t2947 * t2995;
t2733 = t2947 * t2771 + t2944 * t2995;
t2727 = t2946 * t2760 + t2943 * t2998;
t2724 = -t2742 * t2951 + t2763 * t2955;
t2722 = -t2738 * t2951 + t2759 * t2955;
t2714 = -t2728 * t2951 + t2753 * t2955;
t2713 = -t2944 * t2740 + t2947 * t2999;
t2711 = t2947 * t2740 + t2944 * t2999;
t2707 = -t2944 * t2736 + t2947 * t3001;
t2705 = t2947 * t2736 + t2944 * t3001;
t2698 = -t2944 * t2727 + t2947 * t3005;
t2697 = t2947 * t2727 + t2944 * t3005;
t2694 = t2946 * t2717 + t2943 * t3006;
t2692 = t2946 * t2708 + t2943 * t3007;
t2691 = -t2695 * t2951 + t2703 * t2955;
t2690 = -t2693 * t2951 + t2696 * t2955;
t2689 = -t2944 * t2694 + t2947 * t3008;
t2688 = t2947 * t2694 + t2944 * t3008;
t2687 = -t2944 * t2692 + t2947 * t3009;
t2686 = t2947 * t2692 + t2944 * t3009;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2930 * t2942 + t2931 * t2945, 0, 0, 0, 0, 0, 0, -t2918 * t2942 + t2927 * t2945, -t2917 * t2942 - t2945 * t2974, 0, -t2845 * t2942 + t2860 * t2945, 0, 0, 0, 0, 0, 0, -t2813 * t2942 + t2837 * t2945, -t2803 * t2942 + t2831 * t2945, -t2799 * t2942 + t2828 * t2945, -t2745 * t2942 + t2764 * t2945, 0, 0, 0, 0, 0, 0, -t2748 * t2942 + t2765 * t2945, -t2752 * t2942 + t2766 * t2945, -t2734 * t2942 + t2757 * t2945, -t2698 * t2942 + t2714 * t2945, 0, 0, 0, 0, 0, 0, -t2707 * t2942 + t2722 * t2945, t3094, t3086, -t2689 * t2942 + t2691 * t2945, 0, 0, 0, 0, 0, 0, -t2713 * t2942 + t2724 * t2945, t3086, -t3094, -t2687 * t2942 + t2690 * t2945; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2930 * t2945 + t2931 * t2942, 0, 0, 0, 0, 0, 0, t2918 * t2945 + t2927 * t2942, t2917 * t2945 - t2942 * t2974, 0, t2845 * t2945 + t2860 * t2942, 0, 0, 0, 0, 0, 0, t2813 * t2945 + t2837 * t2942, t2803 * t2945 + t2831 * t2942, t2799 * t2945 + t2828 * t2942, t2745 * t2945 + t2764 * t2942, 0, 0, 0, 0, 0, 0, t2748 * t2945 + t2765 * t2942, t2752 * t2945 + t2766 * t2942, t2734 * t2945 + t2757 * t2942, t2698 * t2945 + t2714 * t2942, 0, 0, 0, 0, 0, 0, t2707 * t2945 + t2722 * t2942, -t3093, t3085, t2689 * t2945 + t2691 * t2942, 0, 0, 0, 0, 0, 0, t2713 * t2945 + t2724 * t2942, t3085, t3093, t2687 * t2945 + t2690 * t2942; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2941, 0, 0, 0, 0, 0, 0, t2916, t2915, 0, t2844, 0, 0, 0, 0, 0, 0, t2812, t2802, t2798, t2744, 0, 0, 0, 0, 0, 0, t2747, t2751, t2733, t2697, 0, 0, 0, 0, 0, 0, t2705, -t2704, t3082, t2688, 0, 0, 0, 0, 0, 0, t2711, t3082, t2704, t2686; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2931, 0, 0, 0, 0, 0, 0, t2927, -t2974, 0, t2860, 0, 0, 0, 0, 0, 0, t2837, t2831, t2828, t2764, 0, 0, 0, 0, 0, 0, t2765, t2766, t2757, t2714, 0, 0, 0, 0, 0, 0, t2722, t2723, t3076, t2691, 0, 0, 0, 0, 0, 0, t2724, t3076, -t2723, t2690; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2930, 0, 0, 0, 0, 0, 0, t2918, t2917, 0, t2845, 0, 0, 0, 0, 0, 0, t2813, t2803, t2799, t2745, 0, 0, 0, 0, 0, 0, t2748, t2752, t2734, t2698, 0, 0, 0, 0, 0, 0, t2707, -t2706, t3081, t2689, 0, 0, 0, 0, 0, 0, t2713, t3081, t2706, t2687; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2941, 0, 0, 0, 0, 0, 0, t2916, t2915, 0, t2844, 0, 0, 0, 0, 0, 0, t2812, t2802, t2798, t2744, 0, 0, 0, 0, 0, 0, t2747, t2751, t2733, t2697, 0, 0, 0, 0, 0, 0, t2705, -t2704, t3082, t2688, 0, 0, 0, 0, 0, 0, t2711, t3082, t2704, t2686; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2956, -qJDD(2), 0, t2889, 0, 0, 0, 0, 0, 0, t2886, t2881, t2866, t2800, 0, 0, 0, 0, 0, 0, t2814, t2815, t2801, t2753, 0, 0, 0, 0, 0, 0, t2759, -t2758, t3065, t2703, 0, 0, 0, 0, 0, 0, t2763, t3065, t2758, t2696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2956, 0, t2888, 0, 0, 0, 0, 0, 0, t2862, t2853, t2851, t2789, 0, 0, 0, 0, 0, 0, t2793, t2797, t2772, t2728, 0, 0, 0, 0, 0, 0, t2738, -t2737, t3071, t2695, 0, 0, 0, 0, 0, 0, t2742, t3071, t2737, t2693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2975, 0, 0, 0, 0, 0, 0, t2861, t2852, t2850, t2788, 0, 0, 0, 0, 0, 0, t2792, t2796, t2771, t2727, 0, 0, 0, 0, 0, 0, t2736, -t2735, t3072, t2694, 0, 0, 0, 0, 0, 0, t2740, t3072, t2735, t2692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2914, t2911, t2896, t2836, 0, 0, 0, 0, 0, 0, t2840, t2847, t2824, t2761, 0, 0, 0, 0, 0, 0, t2776, -t2775, t3060, t2718, 0, 0, 0, 0, 0, 0, t2783, t3060, t2775, t2709; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2910, t2903, t2895, t2835, 0, 0, 0, 0, 0, 0, -t2854, t3013, -t2867, -t2826, 0, 0, 0, 0, 0, 0, -t3052, t2804, -t3045, -t2725, 0, 0, 0, 0, 0, 0, -t3052, -t3045, -t2804, -t2719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2897, t2894, t2919, t2865, 0, 0, 0, 0, 0, 0, t2839, t2846, t2823, t2760, 0, 0, 0, 0, 0, 0, t2774, -t2773, t3059, t2717, 0, 0, 0, 0, 0, 0, t2781, t3059, t2773, t2708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2877, t2869, t2855, t2795, 0, 0, 0, 0, 0, 0, t3051, -t2806, t3044, t2726, 0, 0, 0, 0, 0, 0, t3051, t3044, t2806, t2720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2870, t2885, t2857, t2794, 0, 0, 0, 0, 0, 0, -t2816, -t2959, t2843, -t2778, 0, 0, 0, 0, 0, 0, -t2817, t2843, t2959, -t2754; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2854, -t3013, t2867, t2826, 0, 0, 0, 0, 0, 0, t3052, -t2804, t3045, t2725, 0, 0, 0, 0, 0, 0, t3052, t3045, t2804, t2719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3046, -t2832, t2966, t2756, 0, 0, 0, 0, 0, 0, t3046, t2966, t2832, t2743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2833, t3047, -t2820, t2755, 0, 0, 0, 0, 0, 0, t2833, -t2820, -t3047, -t2746; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2816, t2959, -t2843, t2778, 0, 0, 0, 0, 0, 0, t2817, -t2843, -t2959, t2754; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3046, t2966, t2832, t2743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2817, -t2843, -t2959, t2754; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2833, t2820, t3047, t2746;];
f_new_reg  = t1;
