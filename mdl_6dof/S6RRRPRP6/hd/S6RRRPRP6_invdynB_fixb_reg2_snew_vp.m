% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 08:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 08:08:49
% EndTime: 2019-05-07 08:09:44
% DurationCPUTime: 49.04s
% Computational Cost: add. (420260->965), mult. (931783->1501), div. (0->0), fcn. (756637->12), ass. (0->726)
t1135 = cos(qJ(2));
t1126 = sin(pkin(6));
t1131 = sin(qJ(2));
t1259 = t1126 * t1131;
t1241 = qJD(1) * t1259;
t1251 = qJDD(1) * t1126;
t1090 = -qJD(2) * t1241 + t1135 * t1251;
t1128 = cos(pkin(6));
t1117 = qJD(1) * t1128 + qJD(2);
t1097 = t1117 * t1241;
t1063 = -t1097 + t1090;
t1337 = t1063 * t1128;
t1129 = sin(qJ(5));
t1130 = sin(qJ(3));
t1134 = cos(qJ(3));
t1080 = t1117 * t1134 - t1130 * t1241;
t1081 = t1117 * t1130 + t1134 * t1241;
t1125 = sin(pkin(11));
t1127 = cos(pkin(11));
t1047 = t1125 * t1080 + t1127 * t1081;
t1258 = t1126 * t1135;
t1240 = qJD(1) * t1258;
t1109 = -qJD(3) + t1240;
t1133 = cos(qJ(5));
t1020 = t1047 * t1129 + t1133 * t1109;
t1022 = t1047 * t1133 - t1109 * t1129;
t959 = t1022 * t1020;
t1250 = qJDD(1) * t1131;
t1281 = qJD(1) * t1135;
t1089 = (qJD(2) * t1281 + t1250) * t1126;
t1222 = qJDD(1) * t1128 + qJDD(2);
t1033 = t1080 * qJD(3) + t1134 * t1089 + t1130 * t1222;
t1223 = t1089 * t1130 - t1134 * t1222;
t1163 = qJD(3) * t1081 + t1223;
t1225 = t1033 * t1125 + t1127 * t1163;
t972 = qJDD(5) + t1225;
t1228 = -t972 + t959;
t1292 = t1129 * t1228;
t1286 = t1133 * t1228;
t1336 = t1228 * pkin(5);
t1273 = t1047 * t1109;
t941 = t1225 - t1273;
t1231 = -qJDD(3) + t1090;
t976 = t1127 * t1033 - t1125 * t1163;
t916 = -t1020 * qJD(5) - t1129 * t1231 + t1133 * t976;
t1045 = -t1127 * t1080 + t1081 * t1125;
t1042 = qJD(5) + t1045;
t973 = t1042 * t1020;
t1335 = -t973 + t916;
t1029 = t1045 * t1109;
t1227 = -t976 - t1029;
t1274 = t1045 * t1047;
t1172 = -t1231 - t1274;
t1334 = t1125 * t1172;
t1333 = t1127 * t1172;
t1270 = t1080 * t1081;
t1171 = -t1231 + t1270;
t1332 = t1130 * t1171;
t1331 = t1134 * t1171;
t1064 = t1080 * t1109;
t1005 = -t1064 - t1033;
t1003 = -t1064 + t1033;
t1098 = t1117 * t1240;
t1060 = t1098 + t1089;
t1226 = t1129 * t976 + t1133 * t1231;
t871 = (qJD(5) - t1042) * t1022 + t1226;
t1000 = (qJD(3) + t1109) * t1081 + t1223;
t1018 = t1020 ^ 2;
t1019 = t1022 ^ 2;
t1041 = t1042 ^ 2;
t1043 = t1045 ^ 2;
t1044 = t1047 ^ 2;
t1330 = t1080 ^ 2;
t1079 = t1081 ^ 2;
t1329 = t1109 ^ 2;
t1328 = t1117 ^ 2;
t932 = -t1041 - t1018;
t831 = t1129 * t932 - t1286;
t1327 = pkin(4) * t831;
t896 = t959 + t972;
t1293 = t1129 * t896;
t950 = -t1019 - t1041;
t837 = t1133 * t950 - t1293;
t1326 = pkin(4) * t837;
t1132 = sin(qJ(1));
t1136 = cos(qJ(1));
t875 = -t973 - t916;
t802 = -t1129 * t875 - t1133 * t871;
t920 = -t1018 - t1019;
t769 = t1125 * t802 - t1127 * t920;
t770 = t1125 * t920 + t1127 * t802;
t705 = -t1130 * t769 + t1134 * t770;
t800 = -t1129 * t871 + t1133 * t875;
t1205 = t1131 * t705 - t1135 * t800;
t704 = t1130 * t770 + t1134 * t769;
t634 = -t1126 * t704 + t1128 * t1205;
t678 = t1131 * t800 + t1135 * t705;
t592 = t1132 * t678 + t1136 * t634;
t1325 = pkin(7) * t592;
t832 = t1133 * t932 + t1292;
t870 = (qJD(5) + t1042) * t1022 + t1226;
t777 = t1125 * t832 - t1127 * t870;
t778 = t1125 * t870 + t1127 * t832;
t721 = -t1130 * t777 + t1134 * t778;
t1203 = t1131 * t721 - t1135 * t831;
t720 = t1130 * t778 + t1134 * t777;
t646 = -t1126 * t720 + t1128 * t1203;
t689 = t1131 * t831 + t1135 * t721;
t609 = t1132 * t689 + t1136 * t646;
t1324 = pkin(7) * t609;
t1287 = t1133 * t896;
t838 = -t1129 * t950 - t1287;
t780 = t1125 * t838 - t1127 * t1335;
t781 = t1125 * t1335 + t1127 * t838;
t725 = -t1130 * t780 + t1134 * t781;
t1202 = t1131 * t725 - t1135 * t837;
t724 = t1130 * t781 + t1134 * t780;
t653 = -t1126 * t724 + t1128 * t1202;
t693 = t1131 * t837 + t1135 * t725;
t614 = t1132 * t693 + t1136 * t653;
t1323 = pkin(7) * t614;
t1322 = pkin(9) * t704;
t1321 = pkin(9) * t720;
t1320 = pkin(9) * t724;
t1319 = pkin(10) * t800;
t1318 = pkin(10) * t831;
t1317 = pkin(10) * t837;
t1316 = pkin(2) * t1131;
t1315 = pkin(2) * t1135;
t1314 = pkin(4) * t1125;
t1313 = pkin(8) * t1126;
t1312 = pkin(8) * t1128;
t1311 = t1089 * pkin(9);
t1310 = t1128 * g(3);
t1309 = qJ(4) * t769;
t1308 = qJ(4) * t777;
t1307 = qJ(4) * t780;
t1306 = pkin(1) * t634 + t678 * t1313;
t1305 = pkin(1) * t646 + t689 * t1313;
t1304 = pkin(1) * t653 + t693 * t1313;
t1303 = -pkin(2) * t800 + pkin(9) * t705;
t1302 = -pkin(2) * t831 + pkin(9) * t721;
t1301 = -pkin(2) * t837 + pkin(9) * t725;
t1112 = g(1) * t1136 + g(2) * t1132;
t1137 = qJD(1) ^ 2;
t1085 = -pkin(1) * t1137 + pkin(8) * t1251 - t1112;
t1221 = -pkin(9) * t1131 - t1315;
t1282 = qJD(1) * t1126;
t1088 = t1221 * t1282;
t1111 = t1132 * g(1) - t1136 * g(2);
t1146 = qJDD(1) * pkin(1) + t1137 * t1313 + t1111;
t1145 = t1128 * t1146;
t1143 = -g(3) * t1259 + t1131 * t1145;
t1142 = pkin(9) * t1222 + t1143;
t1140 = -t1328 * pkin(2) + (t1088 * t1282 + t1085) * t1135 + t1142;
t1220 = -pkin(9) * t1135 + t1316;
t1283 = qJD(1) * t1117;
t1141 = -t1090 * pkin(2) - t1311 - t1310 + (t1220 * t1283 - t1146) * t1126;
t924 = t1130 * t1140 - t1134 * t1141;
t1139 = pkin(3) * t1171 + qJ(4) * t1005 - t924;
t1056 = -pkin(3) * t1109 - qJ(4) * t1081;
t925 = t1130 * t1141 + t1134 * t1140;
t879 = -pkin(3) * t1330 - qJ(4) * t1163 + t1109 * t1056 + t925;
t790 = -0.2e1 * qJD(4) * t1045 + t1125 * t1139 + t1127 * t879;
t981 = pkin(4) * t1045 - pkin(10) * t1047;
t764 = -pkin(4) * t1329 - pkin(10) * t1231 - t1045 * t981 + t790;
t1224 = t1085 * t1131 - t1135 * t1145;
t992 = -t1222 * pkin(2) - t1328 * pkin(9) + (qJD(1) * t1088 * t1131 + g(3) * t1135) * t1126 + t1224;
t905 = t1163 * pkin(3) - t1330 * qJ(4) + t1056 * t1081 + qJDD(4) + t992;
t808 = pkin(4) * t941 + t1227 * pkin(10) + t905;
t727 = t1129 * t808 + t1133 * t764;
t1300 = -t1129 * t764 + t1133 * t808;
t1299 = t1125 * t905;
t969 = t1231 - t1274;
t1298 = t1125 * t969;
t1297 = t1127 * t905;
t1296 = t1127 * t969;
t1249 = t916 * qJ(6) - t1300;
t1162 = -qJ(6) * t973 - t1249;
t1279 = qJD(6) * t1022;
t684 = t1162 - 0.2e1 * t1279 - t1336;
t1295 = t1129 * t684;
t1230 = t1125 * t879 - t1127 * t1139;
t1174 = t1231 * pkin(4) - pkin(10) * t1329 + t1230;
t1229 = (0.2e1 * qJD(4) + t981) * t1047;
t763 = t1229 + t1174;
t1294 = t1129 * t763;
t1280 = qJD(4) * t1047;
t789 = t1230 + 0.2e1 * t1280;
t728 = t1125 * t790 - t1127 * t789;
t1291 = t1130 * t728;
t1290 = t1130 * t992;
t1289 = t1133 * t684;
t1288 = t1133 * t763;
t1285 = t1134 * t728;
t1284 = t1134 * t992;
t1024 = t1231 + t1270;
t1278 = t1024 * t1130;
t1277 = t1024 * t1134;
t1276 = t1042 * t1129;
t1275 = t1042 * t1133;
t1066 = t1126 * t1146 + t1310;
t1272 = t1066 * t1131;
t1271 = t1066 * t1135;
t1255 = t1135 * t1137;
t1122 = t1126 ^ 2;
t1261 = t1122 * t1131;
t1108 = t1255 * t1261;
t1086 = -t1108 + t1222;
t1269 = t1086 * t1131;
t1268 = t1086 * t1135;
t1087 = t1108 + t1222;
t1267 = t1087 * t1131;
t1266 = t1087 * t1135;
t1265 = t1109 * t1125;
t1264 = t1109 * t1127;
t1263 = t1109 * t1130;
t1262 = t1109 * t1134;
t1260 = t1122 * t1137;
t1257 = t1128 * t1131;
t1256 = t1135 * t1085;
t1123 = t1131 ^ 2;
t1124 = t1135 ^ 2;
t1252 = t1123 + t1124;
t1248 = -pkin(4) * t1127 - pkin(3);
t633 = t1126 * t1205 + t1128 * t704;
t1247 = -pkin(1) * t633 + t678 * t1312;
t645 = t1126 * t1203 + t1128 * t720;
t1246 = -pkin(1) * t645 + t689 * t1312;
t652 = t1126 * t1202 + t1128 * t724;
t1245 = -pkin(1) * t652 + t693 * t1312;
t1244 = -pkin(3) * t831 + qJ(4) * t778;
t1243 = -pkin(3) * t837 + qJ(4) * t781;
t1242 = t1117 * t1282;
t1239 = t1125 * t959;
t1238 = t1127 * t959;
t1237 = t1131 * t1274;
t1236 = t1135 * t1274;
t1235 = t1131 * t1270;
t1234 = t1135 * t1270;
t1233 = t1123 * t1260;
t1232 = t1124 * t1260;
t729 = t1125 * t789 + t1127 * t790;
t843 = t1130 * t924 + t1134 * t925;
t1068 = -t1111 * t1132 - t1136 * t1112;
t1106 = qJDD(1) * t1136 - t1132 * t1137;
t1219 = -pkin(7) * t1106 - g(3) * t1132;
t1218 = t1131 * t1231;
t1217 = t1135 * t1231;
t1076 = -t1233 - t1328;
t1048 = -t1076 * t1131 - t1268;
t1216 = pkin(8) * t1048 - t1272;
t1094 = -t1232 - t1328;
t1053 = t1094 * t1135 - t1267;
t1215 = pkin(8) * t1053 + t1271;
t660 = t1129 * t727 + t1133 * t1300;
t661 = -t1129 * t1300 + t1133 * t727;
t842 = t1130 * t925 - t1134 * t924;
t915 = -qJD(5) * t1022 - t1226;
t966 = pkin(5) * t1042 - qJ(6) * t1022;
t1161 = t915 * qJ(6) - 0.2e1 * qJD(6) * t1020 - t1042 * t966 + t727;
t672 = -qJ(6) * t871 + (-t1018 - t920) * pkin(5) + t1161;
t1014 = 0.2e1 * t1279;
t675 = t1014 + (-t875 + t973) * qJ(6) + t1336 + t1249;
t607 = -t1129 * t672 + t1133 * t675 - t1319;
t751 = -pkin(4) * t800 - pkin(5) * t875;
t768 = qJ(4) * t770;
t585 = -pkin(3) * t800 + t1125 * t607 + t1127 * t751 + t768;
t588 = -t1125 * t751 + t1127 * t607 - t1309;
t561 = -t1130 * t585 + t1134 * t588 - t1322;
t1150 = -pkin(2) * t704 - pkin(3) * t769 + pkin(4) * t920 - pkin(10) * t802;
t584 = -t1129 * t675 - t1133 * t672 + t1150;
t1214 = t1131 * t561 + t1135 * t584;
t664 = t1014 - t1162 - t1327 + 0.2e1 * t1336;
t1144 = -t915 * pkin(5) - t1018 * qJ(6) + t1022 * t966 + qJDD(6) + t1174;
t696 = -pkin(5) * t870 + qJ(6) * t932 - t1047 * t981 - t1144 - 0.2e1 * t1280;
t670 = qJ(6) * t1286 - t1129 * t696 - t1318;
t590 = t1125 * t670 + t1127 * t664 + t1244;
t598 = -t1125 * t664 + t1127 * t670 - t1308;
t565 = -t1130 * t590 + t1134 * t598 - t1321;
t1149 = -pkin(2) * t720 - pkin(3) * t777 + pkin(4) * t870 - pkin(10) * t832;
t617 = -qJ(6) * t1292 - t1133 * t696 + t1149;
t1213 = t1131 * t565 + t1135 * t617;
t669 = -t1326 + (-t1018 - t950) * pkin(5) + t1161;
t739 = t1229 + t1144;
t722 = -qJ(6) * t950 + t739;
t810 = -pkin(5) * t1335 - qJ(6) * t896;
t671 = -t1129 * t810 + t1133 * t722 - t1317;
t595 = t1125 * t671 + t1127 * t669 + t1243;
t605 = -t1125 * t669 + t1127 * t671 - t1307;
t567 = -t1130 * t595 + t1134 * t605 - t1320;
t1148 = -pkin(2) * t724 - pkin(3) * t780 + pkin(4) * t1335 - pkin(10) * t838;
t619 = -t1129 * t722 - t1133 * t810 + t1148;
t1212 = t1131 * t567 + t1135 * t619;
t643 = -t660 - t1319;
t606 = t1125 * t643 + t1248 * t800 + t768;
t618 = t1127 * t643 + t1314 * t800 - t1309;
t570 = -t1130 * t606 + t1134 * t618 - t1322;
t594 = t1150 - t661;
t1211 = t1131 * t570 + t1135 * t594;
t686 = -pkin(5) * t1018 + t1161;
t631 = t1133 * t686 - t1295;
t611 = t1125 * t631 - t1127 * t739;
t612 = t1125 * t739 + t1127 * t631;
t573 = -t1130 * t611 + t1134 * t612;
t630 = t1129 * t686 + t1289;
t1210 = t1131 * t573 - t1135 * t630;
t694 = -t1300 - t1327;
t741 = t1294 - t1318;
t626 = t1125 * t741 + t1127 * t694 + t1244;
t635 = -t1125 * t694 + t1127 * t741 - t1308;
t577 = -t1130 * t626 + t1134 * t635 - t1321;
t637 = t1149 + t1288;
t1209 = t1131 * t577 + t1135 * t637;
t695 = t727 - t1326;
t742 = t1288 - t1317;
t628 = t1125 * t742 + t1127 * t695 + t1243;
t636 = -t1125 * t695 + t1127 * t742 - t1307;
t578 = -t1130 * t628 + t1134 * t636 - t1320;
t638 = t1148 - t1294;
t1208 = t1131 * t578 + t1135 * t638;
t639 = t1125 * t661 - t1127 * t763;
t640 = t1125 * t763 + t1127 * t661;
t587 = -t1130 * t639 + t1134 * t640;
t1207 = t1131 * t587 - t1135 * t660;
t663 = t1134 * t729 - t1291;
t1206 = t1131 * t663 - t1135 * t905;
t801 = -t1129 * t1335 - t1133 * t870;
t958 = -t1019 + t1018;
t774 = t1125 * t801 + t1127 * t958;
t775 = -t1125 * t958 + t1127 * t801;
t714 = -t1130 * t774 + t1134 * t775;
t799 = t1129 * t870 - t1133 * t1335;
t1204 = t1131 * t714 + t1135 * t799;
t968 = -t1019 + t1041;
t850 = -t1129 * t968 - t1286;
t791 = t1125 * t850 + t1127 * t875;
t793 = -t1125 * t875 + t1127 * t850;
t734 = -t1130 * t791 + t1134 * t793;
t848 = -t1133 * t968 + t1292;
t1201 = t1131 * t734 + t1135 * t848;
t967 = t1018 - t1041;
t851 = t1133 * t967 - t1293;
t792 = t1125 * t851 + t1127 * t871;
t794 = -t1125 * t871 + t1127 * t851;
t735 = -t1130 * t792 + t1134 * t794;
t849 = -t1129 * t967 - t1287;
t1200 = t1131 * t735 + t1135 * t849;
t867 = t1020 * t1275 - t1129 * t915;
t825 = t1125 * t867 + t1238;
t827 = t1127 * t867 - t1239;
t757 = -t1130 * t825 + t1134 * t827;
t866 = -t1020 * t1276 - t1133 * t915;
t1199 = t1131 * t757 + t1135 * t866;
t869 = -t1022 * t1276 + t1133 * t916;
t826 = t1125 * t869 - t1238;
t828 = t1127 * t869 + t1239;
t758 = -t1130 * t826 + t1134 * t828;
t868 = -t1022 * t1275 - t1129 * t916;
t1198 = t1131 * t758 + t1135 * t868;
t902 = (-t1020 * t1133 + t1022 * t1129) * t1042;
t856 = t1125 * t902 - t1127 * t972;
t857 = t1125 * t972 + t1127 * t902;
t783 = -t1130 * t856 + t1134 * t857;
t901 = (t1020 * t1129 + t1022 * t1133) * t1042;
t1197 = t1131 * t783 + t1135 * t901;
t858 = -t1125 * t941 - t1127 * t1227;
t860 = t1125 * t1227 - t1127 * t941;
t787 = -t1130 * t858 + t1134 * t860;
t982 = -t1044 + t1043;
t1196 = t1131 * t787 + t1135 * t982;
t942 = t1225 + t1273;
t946 = t1029 - t976;
t859 = -t1125 * t942 + t1127 * t946;
t861 = -t1125 * t946 - t1127 * t942;
t788 = -t1130 * t859 + t1134 * t861;
t951 = -t1043 - t1044;
t1195 = t1131 * t788 - t1135 * t951;
t978 = -t1329 - t1043;
t903 = t1125 * t978 + t1333;
t904 = t1127 * t978 - t1334;
t822 = -t1130 * t903 + t1134 * t904;
t1194 = t1131 * t822 - t1135 * t941;
t1010 = -t1044 - t1329;
t922 = t1010 * t1127 + t1298;
t923 = -t1010 * t1125 + t1296;
t841 = -t1130 * t922 + t1134 * t923;
t1193 = t1131 * t841 + t1135 * t1227;
t1192 = t1131 * t843 - t1135 * t992;
t1028 = -t1044 + t1329;
t928 = t1028 * t1127 + t1334;
t930 = -t1028 * t1125 + t1333;
t846 = -t1130 * t928 + t1134 * t930;
t1191 = t1131 * t846 + t1135 * t946;
t1027 = t1043 - t1329;
t929 = t1027 * t1125 - t1296;
t931 = t1027 * t1127 + t1298;
t847 = -t1130 * t929 + t1134 * t931;
t1190 = t1131 * t847 + t1135 * t942;
t1057 = -t1329 + t1330;
t986 = t1057 * t1134 + t1278;
t1189 = t1000 * t1135 + t1131 * t986;
t1001 = (-qJD(3) + t1109) * t1081 - t1223;
t1036 = -t1329 - t1330;
t965 = t1036 * t1134 - t1332;
t1188 = t1001 * t1135 + t1131 * t965;
t1050 = -t1079 - t1329;
t980 = -t1050 * t1130 + t1277;
t1187 = -t1003 * t1135 + t1131 * t980;
t1058 = -t1079 + t1329;
t985 = -t1058 * t1130 + t1331;
t1186 = t1005 * t1135 + t1131 * t985;
t1023 = t1079 + t1330;
t940 = -t1000 * t1134 - t1005 * t1130;
t1185 = t1023 * t1135 + t1131 * t940;
t1049 = -t1079 + t1330;
t939 = t1001 * t1134 - t1003 * t1130;
t1184 = t1049 * t1135 + t1131 * t939;
t1183 = -t1128 * t1137 + t1283;
t1037 = g(3) * t1258 + t1224;
t1038 = t1143 + t1256;
t1182 = -t1037 * t1135 + t1038 * t1131;
t977 = t1037 * t1131 + t1038 * t1135;
t1181 = t1060 * t1135 + t1063 * t1131;
t1061 = -t1098 + t1089;
t1062 = t1097 + t1090;
t1180 = -t1061 * t1135 + t1062 * t1131;
t1179 = t1076 * t1135 - t1269;
t1093 = t1232 - t1328;
t1178 = t1093 * t1131 + t1268;
t1092 = -t1233 + t1328;
t1177 = t1092 * t1135 + t1267;
t1176 = t1094 * t1131 + t1266;
t1067 = t1111 * t1136 - t1112 * t1132;
t1175 = t1126 * t1222;
t1170 = (-t1126 * t633 - t1128 * t634) * pkin(8);
t1169 = (-t1126 * t645 - t1128 * t646) * pkin(8);
t1168 = (-t1126 * t652 - t1128 * t653) * pkin(8);
t933 = -t1045 * t1265 - t1127 * t1225;
t934 = -t1045 * t1264 + t1125 * t1225;
t854 = -t1130 * t933 + t1134 * t934;
t1167 = t1131 * t854 + t1236;
t935 = -t1047 * t1264 + t1125 * t976;
t936 = t1047 * t1265 + t1127 * t976;
t855 = -t1130 * t935 + t1134 * t936;
t1166 = t1131 * t855 - t1236;
t995 = t1080 * t1262 + t1130 * t1163;
t1165 = t1131 * t995 - t1234;
t997 = t1033 * t1134 + t1081 * t1263;
t1164 = t1131 * t997 + t1234;
t654 = -pkin(5) * t739 + qJ(6) * t686;
t580 = -pkin(10) * t630 - qJ(6) * t1289 - t1129 * t654;
t596 = -pkin(4) * t630 - pkin(5) * t684;
t553 = -pkin(3) * t630 + qJ(4) * t612 + t1125 * t580 + t1127 * t596;
t555 = -qJ(4) * t611 - t1125 * t596 + t1127 * t580;
t572 = t1130 * t612 + t1134 * t611;
t532 = -pkin(9) * t572 - t1130 * t553 + t1134 * t555;
t546 = -pkin(2) * t572 - pkin(3) * t611 + pkin(4) * t739 - pkin(10) * t631 + qJ(6) * t1295 - t1133 * t654;
t563 = t1131 * t630 + t1135 * t573;
t1160 = pkin(8) * t563 + t1131 * t532 + t1135 * t546;
t569 = qJ(4) * t640 + (-pkin(10) * t1125 + t1248) * t660;
t579 = -qJ(4) * t639 + (-pkin(10) * t1127 + t1314) * t660;
t586 = t1130 * t640 + t1134 * t639;
t541 = -pkin(9) * t586 - t1130 * t569 + t1134 * t579;
t562 = -pkin(2) * t586 - pkin(3) * t639 + pkin(4) * t763 - pkin(10) * t661;
t574 = t1131 * t660 + t1135 * t587;
t1159 = pkin(8) * t574 + t1131 * t541 + t1135 * t562;
t662 = t1130 * t729 + t1285;
t708 = -pkin(3) * t905 + qJ(4) * t729;
t603 = -pkin(9) * t662 - qJ(4) * t1285 - t1130 * t708;
t629 = -pkin(2) * t662 - pkin(3) * t728;
t659 = t1131 * t905 + t1135 * t663;
t1158 = pkin(8) * t659 + t1131 * t603 + t1135 * t629;
t692 = -pkin(3) * t951 + qJ(4) * t861 + t729;
t699 = -qJ(4) * t859 - t728;
t786 = t1130 * t861 + t1134 * t859;
t627 = -pkin(9) * t786 - t1130 * t692 + t1134 * t699;
t750 = -pkin(2) * t786 - pkin(3) * t859;
t767 = t1131 * t951 + t1135 * t788;
t1157 = pkin(8) * t767 + t1131 * t627 + t1135 * t750;
t803 = -pkin(3) * t941 + qJ(4) * t904 - t1297;
t821 = t1130 * t904 + t1134 * t903;
t829 = -qJ(4) * t903 + t1299;
t715 = -pkin(9) * t821 - t1130 * t803 + t1134 * t829;
t731 = -pkin(2) * t821 - pkin(3) * t903 + t789;
t798 = t1131 * t941 + t1135 * t822;
t1156 = pkin(8) * t798 + t1131 * t715 + t1135 * t731;
t805 = pkin(3) * t1227 + qJ(4) * t923 + t1299;
t835 = -qJ(4) * t922 + t1297;
t840 = t1130 * t923 + t1134 * t922;
t730 = -pkin(9) * t840 - t1130 * t805 + t1134 * t835;
t743 = -pkin(2) * t840 - pkin(3) * t922 + t790;
t809 = -t1131 * t1227 + t1135 * t841;
t1155 = pkin(8) * t809 + t1131 * t730 + t1135 * t743;
t964 = t1036 * t1130 + t1331;
t880 = t1130 * (t1088 * t1240 + t1142 + t1256) - t1134 * (-pkin(9) * t1098 - t1066 - t1311) + (t1063 * t1134 - t1130 * t1328 - t964) * pkin(2);
t908 = -pkin(9) * t964 + t1290;
t911 = -t1001 * t1131 + t1135 * t965;
t1154 = pkin(8) * t911 + t1131 * t908 + t1135 * t880;
t979 = t1050 * t1134 + t1278;
t883 = -pkin(2) * t979 + t925;
t917 = -pkin(9) * t979 + t1284;
t918 = t1003 * t1131 + t1135 * t980;
t1153 = pkin(8) * t918 + t1131 * t917 + t1135 * t883;
t1011 = t1061 * t1131 + t1062 * t1135;
t1152 = pkin(8) * t1011 + t977;
t938 = -t1000 * t1130 + t1005 * t1134;
t811 = -pkin(9) * t938 - t842;
t898 = -t1023 * t1131 + t1135 * t940;
t1151 = pkin(8) * t898 + t1131 * t811 - t1315 * t938;
t819 = t1131 * t992 + t1135 * t843;
t1147 = pkin(8) * t819 + t1221 * t842;
t1121 = t1126 * t1122;
t1105 = qJDD(1) * t1132 + t1136 * t1137;
t1096 = t1252 * t1260;
t1095 = (t1123 - t1124) * t1260;
t1091 = -pkin(7) * t1105 + g(3) * t1136;
t1070 = t1128 * t1217;
t1069 = t1126 * t1217;
t1065 = t1252 * t1242;
t1059 = (t1250 + (qJD(2) + t1117) * t1281) * t1126;
t1055 = t1089 * t1135 - t1123 * t1242;
t1054 = -t1090 * t1131 - t1124 * t1242;
t1052 = t1093 * t1135 - t1269;
t1051 = -t1092 * t1131 + t1266;
t1035 = (t1060 * t1128 + t1121 * t1255) * t1131;
t1034 = (-t1121 * t1131 * t1137 + t1337) * t1135;
t1017 = (-t1080 * t1134 - t1081 * t1130) * t1109;
t1016 = (-t1080 * t1130 + t1081 * t1134) * t1109;
t1012 = -t1060 * t1131 + t1063 * t1135;
t1009 = t1063 * t1126 + t1128 * t1176;
t1008 = -t1062 * t1126 + t1128 * t1178;
t1007 = -t1061 * t1126 + t1128 * t1177;
t1006 = t1126 * t1176 - t1337;
t999 = -t1059 * t1126 + t1128 * t1179;
t998 = t1059 * t1128 + t1126 * t1179;
t996 = t1033 * t1130 - t1081 * t1262;
t994 = t1080 * t1263 - t1134 * t1163;
t993 = t1135 * t1017 - t1218;
t991 = -t1095 * t1126 + t1128 * t1181;
t990 = t1096 * t1126 + t1128 * t1180;
t989 = -t1096 * t1128 + t1126 * t1180;
t984 = t1057 * t1130 - t1277;
t983 = t1058 * t1134 + t1332;
t963 = (t1045 * t1127 - t1047 * t1125) * t1109;
t962 = (t1045 * t1125 + t1047 * t1127) * t1109;
t961 = -t1009 * t1132 + t1053 * t1136;
t960 = t1009 * t1136 + t1053 * t1132;
t957 = t1135 * t997 - t1235;
t956 = t1135 * t995 + t1235;
t955 = t1048 * t1136 - t1132 * t999;
t954 = t1048 * t1132 + t1136 * t999;
t953 = t1066 * t1126 + t1128 * t1182;
t952 = -t1066 * t1128 + t1126 * t1182;
t949 = -t1016 * t1126 + t1017 * t1257 + t1070;
t948 = t1011 * t1136 - t1132 * t990;
t947 = t1011 * t1132 + t1136 * t990;
t937 = t1001 * t1130 + t1003 * t1134;
t927 = -t1000 * t1131 + t1135 * t986;
t926 = -t1005 * t1131 + t1135 * t985;
t919 = -t1272 + (-t1006 * t1126 - t1009 * t1128) * pkin(8);
t910 = -t1271 + (-t1126 * t998 - t1128 * t999) * pkin(8);
t909 = -pkin(1) * t1006 + t1037 * t1126 + t1128 * t1215;
t907 = -t1049 * t1131 + t1135 * t939;
t906 = -pkin(1) * t998 + t1038 * t1126 + t1128 * t1216;
t900 = -t1126 * t996 + t1128 * t1164;
t899 = -t1126 * t994 + t1128 * t1165;
t894 = -t1130 * t962 + t1134 * t963;
t893 = t1130 * t963 + t1134 * t962;
t892 = -pkin(1) * t952 + t1312 * t977;
t891 = -t1132 * t953 + t1136 * t977;
t890 = t1132 * t977 + t1136 * t953;
t889 = t1135 * t894 - t1218;
t888 = -pkin(1) * t989 + t1128 * t1152;
t887 = -pkin(2) * t1003 + pkin(9) * t980 + t1290;
t886 = -t1126 * t984 + t1128 * t1189;
t885 = -t1126 * t983 + t1128 * t1186;
t884 = (-t1126 * t952 - t1128 * t953) * pkin(8);
t882 = pkin(2) * t1001 + pkin(9) * t965 - t1284;
t881 = (-t1126 * t989 - t1128 * t990) * pkin(8) - t1182;
t878 = -t1126 * t979 + t1128 * t1187;
t877 = t1126 * t1187 + t1128 * t979;
t865 = -t1126 * t964 + t1128 * t1188;
t864 = t1126 * t1188 + t1128 * t964;
t853 = t1130 * t936 + t1134 * t935;
t852 = t1130 * t934 + t1134 * t933;
t845 = t1130 * t931 + t1134 * t929;
t844 = t1130 * t930 + t1134 * t928;
t839 = -t1126 * t937 + t1128 * t1184;
t834 = -t1126 * t938 + t1128 * t1185;
t833 = t1126 * t1185 + t1128 * t938;
t824 = t1135 * t855 + t1237;
t823 = t1135 * t854 - t1237;
t820 = -pkin(2) * t992 + pkin(9) * t843;
t818 = -t1132 * t878 + t1136 * t918;
t817 = t1132 * t918 + t1136 * t878;
t816 = -t1126 * t893 + t1257 * t894 + t1070;
t815 = -t1131 * t942 + t1135 * t847;
t814 = -t1131 * t946 + t1135 * t846;
t813 = -t1132 * t865 + t1136 * t911;
t812 = t1132 * t911 + t1136 * t865;
t804 = pkin(2) * t1023 + pkin(9) * t940 + t843;
t796 = -t1132 * t834 + t1136 * t898;
t795 = t1132 * t898 + t1136 * t834;
t785 = t1130 * t860 + t1134 * t858;
t782 = t1130 * t857 + t1134 * t856;
t773 = -t1131 * t982 + t1135 * t787;
t772 = -t1126 * t853 + t1128 * t1166;
t771 = -t1126 * t852 + t1128 * t1167;
t766 = -t1126 * t842 + t1128 * t1192;
t765 = t1126 * t1192 + t1128 * t842;
t760 = -t1126 * t845 + t1128 * t1190;
t759 = -t1126 * t844 + t1128 * t1191;
t756 = t1130 * t828 + t1134 * t826;
t755 = t1130 * t827 + t1134 * t825;
t754 = -t1131 * t901 + t1135 * t783;
t753 = -t1126 * t840 + t1128 * t1193;
t752 = t1126 * t1193 + t1128 * t840;
t749 = -t1126 * t821 + t1128 * t1194;
t748 = t1126 * t1194 + t1128 * t821;
t747 = -t1131 * t883 + t1135 * t917 + (-t1126 * t877 - t1128 * t878) * pkin(8);
t746 = -t1131 * t880 + t1135 * t908 + (-t1126 * t864 - t1128 * t865) * pkin(8);
t745 = -t1131 * t868 + t1135 * t758;
t744 = -t1131 * t866 + t1135 * t757;
t740 = -pkin(1) * t877 - t1126 * t887 + t1128 * t1153;
t738 = -t1132 * t766 + t1136 * t819;
t737 = t1132 * t819 + t1136 * t766;
t736 = -pkin(1) * t864 - t1126 * t882 + t1128 * t1154;
t733 = t1130 * t794 + t1134 * t792;
t732 = t1130 * t793 + t1134 * t791;
t718 = -t1126 * t785 + t1128 * t1196;
t717 = -t1132 * t753 + t1136 * t809;
t716 = t1132 * t809 + t1136 * t753;
t713 = t1130 * t775 + t1134 * t774;
t712 = -t1126 * t786 + t1128 * t1195;
t711 = t1126 * t1195 + t1128 * t786;
t710 = pkin(2) * t1227 + pkin(9) * t841 + t1130 * t835 + t1134 * t805;
t709 = t938 * t1316 + t1135 * t811 + (-t1126 * t833 - t1128 * t834) * pkin(8);
t707 = -t1126 * t782 + t1128 * t1197;
t706 = t1126 * t1197 + t1128 * t782;
t702 = -pkin(2) * t941 + pkin(9) * t822 + t1130 * t829 + t1134 * t803;
t701 = -t1131 * t849 + t1135 * t735;
t700 = -t1131 * t848 + t1135 * t734;
t698 = -t1132 * t749 + t1136 * t798;
t697 = t1132 * t798 + t1136 * t749;
t685 = -pkin(1) * t833 - t1126 * t804 + t1128 * t1151;
t683 = -t1126 * t756 + t1128 * t1198;
t682 = -t1126 * t755 + t1128 * t1199;
t681 = t1126 * t1198 + t1128 * t756;
t680 = t1126 * t1199 + t1128 * t755;
t679 = -t1131 * t799 + t1135 * t714;
t674 = -t1132 * t712 + t1136 * t767;
t673 = t1132 * t767 + t1136 * t712;
t668 = t1220 * t842 + (-t1126 * t765 - t1128 * t766) * pkin(8);
t667 = -pkin(1) * t765 - t1126 * t820 + t1128 * t1147;
t666 = -t1132 * t707 + t1136 * t754;
t665 = t1132 * t754 + t1136 * t707;
t658 = -t1126 * t733 + t1128 * t1200;
t657 = -t1126 * t732 + t1128 * t1201;
t656 = t1126 * t1200 + t1128 * t733;
t655 = t1126 * t1201 + t1128 * t732;
t650 = -t1132 * t683 + t1136 * t745;
t649 = -t1132 * t682 + t1136 * t744;
t648 = t1132 * t745 + t1136 * t683;
t647 = t1132 * t744 + t1136 * t682;
t642 = -t1126 * t713 + t1128 * t1204;
t641 = t1126 * t1204 + t1128 * t713;
t625 = -pkin(2) * t951 + pkin(9) * t788 + t1130 * t699 + t1134 * t692;
t624 = -t1131 * t743 + t1135 * t730 + (-t1126 * t752 - t1128 * t753) * pkin(8);
t623 = -t1132 * t658 + t1136 * t701;
t622 = -t1132 * t657 + t1136 * t700;
t621 = t1132 * t701 + t1136 * t658;
t620 = t1132 * t700 + t1136 * t657;
t616 = -t1131 * t731 + t1135 * t715 + (-t1126 * t748 - t1128 * t749) * pkin(8);
t615 = -t1132 * t653 + t1136 * t693;
t613 = pkin(7) * t615;
t610 = -t1132 * t646 + t1136 * t689;
t608 = pkin(7) * t610;
t604 = -pkin(1) * t752 - t1126 * t710 + t1128 * t1155;
t602 = -t1126 * t662 + t1128 * t1206;
t601 = t1126 * t1206 + t1128 * t662;
t600 = -t1132 * t642 + t1136 * t679;
t599 = t1132 * t679 + t1136 * t642;
t597 = -pkin(2) * t905 + pkin(9) * t663 - qJ(4) * t1291 + t1134 * t708;
t593 = -t1132 * t634 + t1136 * t678;
t591 = pkin(7) * t593;
t589 = -pkin(1) * t748 - t1126 * t702 + t1128 * t1156;
t583 = -t1131 * t750 + t1135 * t627 + (-t1126 * t711 - t1128 * t712) * pkin(8);
t582 = -t1132 * t602 + t1136 * t659;
t581 = t1132 * t659 + t1136 * t602;
t576 = t1130 * t636 + t1134 * t628 + t1301;
t575 = t1130 * t635 + t1134 * t626 + t1302;
t571 = -pkin(1) * t711 - t1126 * t625 + t1128 * t1157;
t568 = t1130 * t618 + t1134 * t606 + t1303;
t566 = t1130 * t605 + t1134 * t595 + t1301;
t564 = t1130 * t598 + t1134 * t590 + t1302;
t560 = t1130 * t588 + t1134 * t585 + t1303;
t559 = -t1126 * t586 + t1128 * t1207;
t558 = t1126 * t1207 + t1128 * t586;
t557 = -t1131 * t638 + t1135 * t578 + t1168;
t556 = -t1131 * t637 + t1135 * t577 + t1169;
t554 = -t1131 * t629 + t1135 * t603 + (-t1126 * t601 - t1128 * t602) * pkin(8);
t552 = -pkin(1) * t601 - t1126 * t597 + t1128 * t1158;
t551 = -t1131 * t619 + t1135 * t567 + t1168;
t550 = -t1126 * t572 + t1128 * t1210;
t549 = t1126 * t1210 + t1128 * t572;
t548 = -t1131 * t617 + t1135 * t565 + t1169;
t547 = -t1131 * t594 + t1135 * t570 + t1170;
t545 = -t1132 * t559 + t1136 * t574;
t544 = t1132 * t574 + t1136 * t559;
t543 = -t1126 * t576 + t1128 * t1208 + t1245;
t542 = -t1126 * t575 + t1128 * t1209 + t1246;
t540 = -pkin(2) * t660 + pkin(9) * t587 + t1130 * t579 + t1134 * t569;
t539 = -t1131 * t584 + t1135 * t561 + t1170;
t538 = -t1126 * t566 + t1128 * t1212 + t1245;
t537 = -t1126 * t568 + t1128 * t1211 + t1247;
t536 = -t1126 * t564 + t1128 * t1213 + t1246;
t535 = -t1132 * t550 + t1136 * t563;
t534 = t1132 * t563 + t1136 * t550;
t533 = -t1126 * t560 + t1128 * t1214 + t1247;
t531 = -pkin(2) * t630 + pkin(9) * t573 + t1130 * t555 + t1134 * t553;
t530 = -t1131 * t562 + t1135 * t541 + (-t1126 * t558 - t1128 * t559) * pkin(8);
t529 = -pkin(1) * t558 - t1126 * t540 + t1128 * t1159;
t528 = -t1131 * t546 + t1135 * t532 + (-t1126 * t549 - t1128 * t550) * pkin(8);
t527 = -pkin(1) * t549 - t1126 * t531 + t1128 * t1160;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1105, -t1106, 0, t1068, 0, 0, 0, 0, 0, 0, t961, t955, t948, t891, 0, 0, 0, 0, 0, 0, t813, t818, t796, t738, 0, 0, 0, 0, 0, 0, t698, t717, t674, t582, 0, 0, 0, 0, 0, 0, t610, t615, t593, t545, 0, 0, 0, 0, 0, 0, t610, t615, t593, t535; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1106, -t1105, 0, t1067, 0, 0, 0, 0, 0, 0, t960, t954, t947, t890, 0, 0, 0, 0, 0, 0, t812, t817, t795, t737, 0, 0, 0, 0, 0, 0, t697, t716, t673, t581, 0, 0, 0, 0, 0, 0, t609, t614, t592, t544, 0, 0, 0, 0, 0, 0, t609, t614, t592, t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1006, t998, t989, t952, 0, 0, 0, 0, 0, 0, t864, t877, t833, t765, 0, 0, 0, 0, 0, 0, t748, t752, t711, t601, 0, 0, 0, 0, 0, 0, t645, t652, t633, t558, 0, 0, 0, 0, 0, 0, t645, t652, t633, t549; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1106, 0, -t1105, 0, t1219, -t1091, -t1067, -pkin(7) * t1067, -t1035 * t1132 + t1055 * t1136, t1012 * t1136 - t1132 * t991, -t1007 * t1132 + t1051 * t1136, -t1034 * t1132 + t1054 * t1136, -t1008 * t1132 + t1052 * t1136, t1136 * t1065 + t1132 * t1175, -pkin(7) * t960 - t1132 * t909 + t1136 * t919, -pkin(7) * t954 - t1132 * t906 + t1136 * t910, -pkin(7) * t947 - t1132 * t888 + t1136 * t881, -pkin(7) * t890 - t1132 * t892 + t1136 * t884, -t1132 * t900 + t1136 * t957, -t1132 * t839 + t1136 * t907, -t1132 * t885 + t1136 * t926, -t1132 * t899 + t1136 * t956, -t1132 * t886 + t1136 * t927, -t1132 * t949 + t1136 * t993, -pkin(7) * t812 - t1132 * t736 + t1136 * t746, -pkin(7) * t817 - t1132 * t740 + t1136 * t747, -pkin(7) * t795 - t1132 * t685 + t1136 * t709, -pkin(7) * t737 - t1132 * t667 + t1136 * t668, -t1132 * t772 + t1136 * t824, -t1132 * t718 + t1136 * t773, -t1132 * t759 + t1136 * t814, -t1132 * t771 + t1136 * t823, -t1132 * t760 + t1136 * t815, -t1132 * t816 + t1136 * t889, -pkin(7) * t697 - t1132 * t589 + t1136 * t616, -pkin(7) * t716 - t1132 * t604 + t1136 * t624, -pkin(7) * t673 - t1132 * t571 + t1136 * t583, -pkin(7) * t581 - t1132 * t552 + t1136 * t554, t650, t600, t622, t649, t623, t666, -t1132 * t542 + t1136 * t556 - t1324, -t1132 * t543 + t1136 * t557 - t1323, -t1132 * t537 + t1136 * t547 - t1325, -pkin(7) * t544 - t1132 * t529 + t1136 * t530, t650, t600, t622, t649, t623, t666, -t1132 * t536 + t1136 * t548 - t1324, -t1132 * t538 + t1136 * t551 - t1323, -t1132 * t533 + t1136 * t539 - t1325, -pkin(7) * t534 - t1132 * t527 + t1136 * t528; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1105, 0, t1106, 0, t1091, t1219, t1068, pkin(7) * t1068, t1035 * t1136 + t1055 * t1132, t1012 * t1132 + t1136 * t991, t1007 * t1136 + t1051 * t1132, t1034 * t1136 + t1054 * t1132, t1008 * t1136 + t1052 * t1132, t1132 * t1065 - t1136 * t1175, pkin(7) * t961 + t1132 * t919 + t1136 * t909, pkin(7) * t955 + t1132 * t910 + t1136 * t906, pkin(7) * t948 + t1132 * t881 + t1136 * t888, pkin(7) * t891 + t1132 * t884 + t1136 * t892, t1132 * t957 + t1136 * t900, t1132 * t907 + t1136 * t839, t1132 * t926 + t1136 * t885, t1132 * t956 + t1136 * t899, t1132 * t927 + t1136 * t886, t1132 * t993 + t1136 * t949, pkin(7) * t813 + t1132 * t746 + t1136 * t736, pkin(7) * t818 + t1132 * t747 + t1136 * t740, pkin(7) * t796 + t1132 * t709 + t1136 * t685, pkin(7) * t738 + t1132 * t668 + t1136 * t667, t1132 * t824 + t1136 * t772, t1132 * t773 + t1136 * t718, t1132 * t814 + t1136 * t759, t1132 * t823 + t1136 * t771, t1132 * t815 + t1136 * t760, t1132 * t889 + t1136 * t816, pkin(7) * t698 + t1132 * t616 + t1136 * t589, pkin(7) * t717 + t1132 * t624 + t1136 * t604, pkin(7) * t674 + t1132 * t583 + t1136 * t571, pkin(7) * t582 + t1132 * t554 + t1136 * t552, t648, t599, t620, t647, t621, t665, t1132 * t556 + t1136 * t542 + t608, t1132 * t557 + t1136 * t543 + t613, t1132 * t547 + t1136 * t537 + t591, pkin(7) * t545 + t1132 * t530 + t1136 * t529, t648, t599, t620, t647, t621, t665, t1132 * t548 + t1136 * t536 + t608, t1132 * t551 + t1136 * t538 + t613, t1132 * t539 + t1136 * t533 + t591, pkin(7) * t535 + t1132 * t528 + t1136 * t527; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1111, t1112, 0, 0, (t1122 * t1135 * t1183 + t1089 * t1126) * t1131, t1095 * t1128 + t1126 * t1181, t1061 * t1128 + t1126 * t1177, (t1090 * t1126 - t1183 * t1261) * t1135, t1062 * t1128 + t1126 * t1178, t1128 * t1222, pkin(1) * t1009 - t1037 * t1128 + t1126 * t1215, pkin(1) * t999 - t1038 * t1128 + t1126 * t1216, pkin(1) * t990 + t1126 * t1152, pkin(1) * t953 + t1313 * t977, t1126 * t1164 + t1128 * t996, t1126 * t1184 + t1128 * t937, t1126 * t1186 + t1128 * t983, t1126 * t1165 + t1128 * t994, t1126 * t1189 + t1128 * t984, t1016 * t1128 + t1017 * t1259 + t1069, pkin(1) * t865 + t1126 * t1154 + t1128 * t882, pkin(1) * t878 + t1126 * t1153 + t1128 * t887, pkin(1) * t834 + t1126 * t1151 + t1128 * t804, pkin(1) * t766 + t1126 * t1147 + t1128 * t820, t1126 * t1166 + t1128 * t853, t1126 * t1196 + t1128 * t785, t1126 * t1191 + t1128 * t844, t1126 * t1167 + t1128 * t852, t1126 * t1190 + t1128 * t845, t1128 * t893 + t1259 * t894 + t1069, pkin(1) * t749 + t1126 * t1156 + t1128 * t702, pkin(1) * t753 + t1126 * t1155 + t1128 * t710, pkin(1) * t712 + t1126 * t1157 + t1128 * t625, pkin(1) * t602 + t1126 * t1158 + t1128 * t597, t681, t641, t655, t680, t656, t706, t1126 * t1209 + t1128 * t575 + t1305, t1126 * t1208 + t1128 * t576 + t1304, t1126 * t1211 + t1128 * t568 + t1306, pkin(1) * t559 + t1126 * t1159 + t1128 * t540, t681, t641, t655, t680, t656, t706, t1126 * t1213 + t1128 * t564 + t1305, t1126 * t1212 + t1128 * t566 + t1304, t1126 * t1214 + t1128 * t560 + t1306, pkin(1) * t550 + t1126 * t1160 + t1128 * t531;];
tauB_reg  = t1;
