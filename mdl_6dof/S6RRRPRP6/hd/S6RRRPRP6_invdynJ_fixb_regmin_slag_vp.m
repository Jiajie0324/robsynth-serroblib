% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [6x28]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP6_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:01:13
% EndTime: 2019-03-09 17:01:38
% DurationCPUTime: 12.21s
% Computational Cost: add. (13711->627), mult. (33859->848), div. (0->0), fcn. (27192->14), ass. (0->316)
t291 = sin(pkin(6));
t302 = cos(qJ(2));
t405 = qJD(1) * t302;
t266 = t291 * t405;
t339 = t266 - qJD(3);
t298 = sin(qJ(2));
t345 = pkin(2) * t298 - pkin(9) * t302;
t407 = qJD(1) * t291;
t207 = t345 * t407;
t301 = cos(qJ(3));
t192 = t301 * t207;
t377 = t298 * t407;
t293 = cos(pkin(6));
t406 = qJD(1) * t293;
t390 = pkin(1) * t406;
t206 = -pkin(8) * t377 + t302 * t390;
t297 = sin(qJ(3));
t458 = qJ(4) + pkin(9);
t367 = qJD(3) * t458;
t489 = t192 + (-qJ(4) * t301 * t302 + pkin(3) * t298) * t407 + t301 * t367 + (-t206 + qJD(4)) * t297;
t349 = t297 * t266;
t411 = t301 * t206 + t297 * t207;
t488 = qJ(4) * t349 + t301 * qJD(4) - t297 * t367 - t411;
t290 = sin(pkin(11));
t292 = cos(pkin(11));
t226 = t290 * t301 + t292 * t297;
t410 = t339 * t226;
t225 = t290 * t297 - t292 * t301;
t165 = t225 * t266;
t215 = t225 * qJD(3);
t487 = t215 - t165;
t445 = -t290 * t489 + t488 * t292;
t396 = qJD(1) * qJD(2);
t371 = t302 * t396;
t394 = qJDD(1) * t298;
t486 = t371 + t394;
t209 = pkin(8) * t266 + t298 * t390;
t402 = qJD(3) * t297;
t485 = -t209 + (-t349 + t402) * pkin(3);
t484 = -pkin(10) * t377 + t445;
t483 = -pkin(4) * t410 + t487 * pkin(10) + t485;
t395 = qJDD(1) * t293;
t267 = qJDD(2) + t395;
t389 = pkin(1) * qJD(2) * t293;
t352 = qJD(1) * t389;
t387 = pkin(1) * t395;
t480 = t486 * t291;
t351 = -pkin(8) * t480 - t298 * t352 + t302 * t387;
t135 = -t267 * pkin(2) - t351;
t354 = qJD(3) * t339;
t303 = cos(qJ(1));
t417 = t302 * t303;
t299 = sin(qJ(1));
t421 = t298 * t299;
t218 = -t293 * t417 + t421;
t419 = t299 * t302;
t420 = t298 * t303;
t220 = t293 * t419 + t420;
t426 = t291 * t302;
t470 = -g(1) * t220 - g(2) * t218 + g(3) * t426;
t481 = pkin(9) * t354 - t135 - t470;
t296 = sin(qJ(5));
t300 = cos(qJ(5));
t268 = qJD(2) + t406;
t350 = t297 * t377;
t186 = -t301 * t268 + t350;
t188 = t268 * t297 + t301 * t377;
t363 = -t292 * t186 - t188 * t290;
t467 = qJD(5) - t363;
t358 = t300 * t467;
t401 = qJD(3) * t301;
t118 = -qJD(3) * t350 + t297 * t267 + t268 * t401 + t301 * t480;
t403 = qJD(2) * t302;
t374 = t297 * t403;
t119 = -t301 * t267 + t268 * t402 + t291 * (qJD(1) * (t298 * t401 + t374) + t297 * t394);
t82 = -t118 * t290 - t292 * t119;
t79 = qJDD(5) - t82;
t479 = -t296 * t79 - t467 * t358;
t219 = t293 * t420 + t419;
t287 = qJ(3) + pkin(11);
t283 = sin(t287);
t284 = cos(t287);
t425 = t291 * t303;
t152 = t219 * t284 - t283 * t425;
t478 = t152 * t296 - t218 * t300;
t438 = t218 * t296;
t477 = t152 * t300 + t438;
t286 = t291 ^ 2;
t391 = 0.2e1 * t286;
t475 = t483 * t300;
t446 = t488 * t290 + t292 * t489;
t335 = -t186 * t290 + t292 * t188;
t105 = -t296 * t339 + t300 * t335;
t359 = t296 * t467;
t474 = t105 * t359;
t472 = t186 * t339;
t471 = t188 * t339;
t462 = pkin(1) * t298;
t409 = pkin(8) * t426 + t293 * t462;
t199 = pkin(9) * t293 + t409;
t332 = -pkin(2) * t302 - pkin(9) * t298 - pkin(1);
t200 = t332 * t291;
t414 = t301 * t199 + t297 * t200;
t221 = -t293 * t421 + t417;
t428 = t291 * t299;
t156 = t221 * t284 + t283 * t428;
t120 = -t156 * t296 + t220 * t300;
t429 = t291 * t298;
t197 = t283 * t293 + t284 * t429;
t382 = t300 * t426;
t469 = g(2) * t478 - g(3) * (-t197 * t296 - t382) - g(1) * t120;
t282 = pkin(3) * t301 + pkin(2);
t150 = pkin(4) * t225 - pkin(10) * t226 - t282;
t399 = qJD(5) * t300;
t468 = t150 * t399 + t483 * t296 + t300 * t484;
t170 = pkin(9) * t268 + t209;
t174 = qJD(1) * t200;
t117 = t170 * t301 + t174 * t297;
t372 = t298 * t396;
t348 = t291 * t372;
t393 = qJDD(1) * t302;
t265 = t291 * t393;
t378 = -pkin(8) * t265 - t298 * t387 - t302 * t352;
t311 = -pkin(8) * t348 - t378;
t134 = pkin(9) * t267 + t311;
t326 = t345 * qJD(2);
t139 = (qJD(1) * t326 + qJDD(1) * t332) * t291;
t366 = -t297 * t134 + t301 * t139;
t308 = -qJD(3) * t117 + t366;
t392 = qJDD(3) - t265;
t319 = t348 + t392;
t34 = pkin(3) * t319 - t118 * qJ(4) - t188 * qJD(4) + t308;
t322 = -t301 * t134 - t297 * t139 + t170 * t402 - t174 * t401;
t37 = -qJ(4) * t119 - qJD(4) * t186 - t322;
t12 = t290 * t34 + t292 * t37;
t10 = pkin(10) * t319 + t12;
t97 = -qJ(4) * t186 + t117;
t450 = t292 * t97;
t116 = -t297 * t170 + t301 * t174;
t96 = -t188 * qJ(4) + t116;
t88 = -pkin(3) * t339 + t96;
t49 = t290 * t88 + t450;
t44 = -pkin(10) * t339 + t49;
t169 = -pkin(2) * t268 - t206;
t126 = pkin(3) * t186 + qJD(4) + t169;
t55 = -pkin(4) * t363 - pkin(10) * t335 + t126;
t22 = t296 * t55 + t300 * t44;
t337 = t118 * t292 - t119 * t290;
t84 = t119 * pkin(3) + qJDD(4) + t135;
t23 = -t82 * pkin(4) - pkin(10) * t337 + t84;
t4 = -qJD(5) * t22 - t296 * t10 + t300 * t23;
t357 = t300 * t339;
t400 = qJD(5) * t296;
t41 = qJD(5) * t357 - t296 * t319 - t300 * t337 + t335 * t400;
t1 = t79 * pkin(5) + t41 * qJ(6) - t105 * qJD(6) + t4;
t103 = t296 * t335 + t357;
t15 = -qJ(6) * t103 + t22;
t466 = t15 * t467 + t1;
t465 = -pkin(9) * t319 - t339 * t169;
t463 = t105 ^ 2;
t461 = pkin(3) * t292;
t460 = pkin(5) * t296;
t21 = -t296 * t44 + t300 * t55;
t14 = -qJ(6) * t105 + t21;
t13 = pkin(5) * t467 + t14;
t457 = -t14 + t13;
t144 = -t165 * t300 + t296 * t377;
t249 = t458 * t297;
t250 = t458 * t301;
t168 = -t249 * t290 + t250 * t292;
t158 = t300 * t168;
t333 = qJ(6) * t215 - qJD(6) * t226;
t456 = qJ(6) * t144 - t158 * qJD(5) + t333 * t300 + t475 + ((qJ(6) * t226 - t150) * qJD(5) - t484) * t296 - t410 * pkin(5);
t313 = t296 * t337 - t300 * t319;
t42 = qJD(5) * t105 + t313;
t455 = -t103 * t399 - t296 * t42;
t143 = -t165 * t296 - t300 * t377;
t373 = t226 * t399;
t454 = (-qJD(5) * t168 + t333) * t296 + t468 + (t143 - t373) * qJ(6);
t93 = t290 * t97;
t52 = t292 * t96 - t93;
t73 = pkin(3) * t188 + pkin(4) * t335 - pkin(10) * t363;
t453 = t296 * t73 + t300 * t52;
t427 = t291 * t301;
t217 = t293 * t297 + t298 * t427;
t362 = -t199 * t297 + t301 * t200;
t100 = -pkin(3) * t426 - qJ(4) * t217 + t362;
t385 = t297 * t429;
t424 = t293 * t301;
t216 = t385 - t424;
t111 = -qJ(4) * t216 + t414;
t64 = t290 * t100 + t292 * t111;
t59 = -pkin(10) * t426 + t64;
t146 = t292 * t216 + t217 * t290;
t147 = -t216 * t290 + t217 * t292;
t269 = pkin(8) * t429;
t198 = t269 + (-pkin(1) * t302 - pkin(2)) * t293;
t312 = t216 * pkin(3) + t198;
t83 = t146 * pkin(4) - t147 * pkin(10) + t312;
t452 = t296 * t83 + t300 * t59;
t375 = t291 * t403;
t160 = -qJD(3) * t216 + t301 * t375;
t208 = t291 * t326;
t423 = t293 * t302;
t210 = (pkin(1) * t423 - t269) * qJD(2);
t307 = -qJD(3) * t414 + t301 * t208 - t297 * t210;
t404 = qJD(2) * t298;
t376 = t291 * t404;
t60 = pkin(3) * t376 - t160 * qJ(4) - t217 * qJD(4) + t307;
t159 = qJD(3) * t217 + t291 * t374;
t321 = -t199 * t402 + t200 * t401 + t297 * t208 + t301 * t210;
t65 = -qJ(4) * t159 - qJD(4) * t216 + t321;
t30 = t290 * t60 + t292 * t65;
t448 = t41 * t296;
t447 = pkin(4) * t377 + t446;
t279 = pkin(3) * t290 + pkin(10);
t416 = qJ(6) + t279;
t360 = qJD(5) * t416;
t439 = t363 * t296;
t444 = qJ(6) * t439 + t300 * qJD(6) - t296 * t360 - t453;
t72 = t300 * t73;
t443 = -pkin(5) * t335 - t72 + (qJ(6) * t363 - t360) * t300 + (-qJD(6) + t52) * t296;
t442 = t103 * t335;
t441 = t103 * t363;
t440 = t105 * t335;
t436 = t219 * t297;
t435 = t220 * t296;
t434 = t221 * t297;
t433 = t226 * t296;
t432 = t226 * t300;
t431 = t284 * t296;
t430 = t286 * qJD(1) ^ 2;
t422 = t296 * t302;
t418 = t301 * t303;
t415 = t296 * t150 + t158;
t413 = -t218 * t282 + t219 * t458;
t412 = -t220 * t282 + t221 * t458;
t211 = pkin(8) * t375 + t298 * t389;
t288 = t298 ^ 2;
t408 = -t302 ^ 2 + t288;
t398 = qJD(2) - t268;
t386 = t302 * t430;
t384 = t297 * t428;
t383 = t299 * t427;
t381 = t291 * t418;
t252 = t291 * t422;
t253 = t297 * t425;
t281 = pkin(5) * t300 + pkin(4);
t51 = t290 * t96 + t450;
t11 = -t290 * t37 + t292 * t34;
t29 = -t290 * t65 + t292 * t60;
t48 = t292 * t88 - t93;
t368 = -t296 * t59 + t300 * t83;
t63 = t100 * t292 - t290 * t111;
t365 = t215 * t296 + t143;
t364 = t215 * t300 + t144;
t361 = t219 * t301 - t253;
t167 = t292 * t249 + t250 * t290;
t356 = t302 * t339;
t355 = t268 + t406;
t353 = t267 + t395;
t346 = t159 * pkin(3) + t211;
t343 = -g(1) * t218 + g(2) * t220;
t342 = g(1) * t221 + g(2) * t219;
t58 = pkin(4) * t426 - t63;
t329 = -t300 * t10 - t296 * t23 - t55 * t399 + t400 * t44;
t2 = -qJ(6) * t42 - qJD(6) * t103 - t329;
t340 = -t13 * t467 + t2;
t338 = t303 * pkin(1) + pkin(3) * t384 + pkin(8) * t428 + t220 * t458 + t221 * t282;
t336 = t159 * t290 - t160 * t292;
t294 = -qJ(6) - pkin(10);
t334 = t281 * t284 - t283 * t294;
t331 = t300 * t79 + (-t400 + t439) * t467;
t123 = t147 * t296 + t382;
t151 = t219 * t283 + t284 * t425;
t328 = -t381 - t436;
t27 = pkin(10) * t376 + t30;
t110 = t292 * t159 + t160 * t290;
t47 = t110 * pkin(4) + pkin(10) * t336 + t346;
t327 = t300 * t27 + t296 * t47 + t83 * t399 - t400 * t59;
t325 = -pkin(1) * t299 + pkin(3) * t253 + pkin(8) * t425 - t218 * t458 - t219 * t282;
t43 = pkin(4) * t339 - t48;
t323 = -t279 * t79 + t43 * t467;
t155 = t221 * t283 - t284 * t428;
t196 = t283 * t429 - t293 * t284;
t320 = -g(1) * t155 - g(2) * t151 - g(3) * t196;
t318 = -t365 + t373;
t317 = -t226 * t400 - t364;
t26 = -pkin(4) * t376 - t29;
t314 = g(3) * t429 + t342;
t309 = -qJD(5) * t452 - t296 * t27 + t300 * t47;
t9 = -pkin(4) * t319 - t11;
t306 = qJD(5) * t279 * t467 + t320 + t9;
t7 = t42 * pkin(5) + qJDD(6) + t9;
t280 = -pkin(4) - t461;
t275 = pkin(3) * t424;
t247 = pkin(3) * t383;
t229 = t282 * t426;
t223 = t416 * t300;
t222 = t416 * t296;
t162 = t221 * t301 + t384;
t161 = t383 - t434;
t149 = t300 * t150;
t124 = t147 * t300 - t252;
t121 = t156 * t300 + t435;
t102 = t103 ^ 2;
t91 = -qJ(6) * t433 + t415;
t86 = pkin(5) * t225 - qJ(6) * t432 - t168 * t296 + t149;
t68 = -qJD(5) * t252 + t147 * t399 - t296 * t336 - t300 * t376;
t67 = qJD(5) * t123 - t296 * t376 + t300 * t336;
t33 = t103 * pkin(5) + qJD(6) + t43;
t24 = -qJ(6) * t123 + t452;
t17 = pkin(5) * t146 - qJ(6) * t124 + t368;
t6 = -qJ(6) * t68 - qJD(6) * t123 + t327;
t5 = t110 * pkin(5) + t67 * qJ(6) - t124 * qJD(6) + t309;
t3 = [qJDD(1), g(1) * t299 - g(2) * t303, g(1) * t303 + g(2) * t299 (qJDD(1) * t288 + 0.2e1 * t298 * t371) * t286 (t298 * t393 - t396 * t408) * t391 (t298 * t353 + t355 * t403) * t291 (t302 * t353 - t355 * t404) * t291, t267 * t293, -t211 * t268 - t269 * t267 + t351 * t293 + g(1) * t219 - g(2) * t221 + (t267 * t423 + (-t372 + t393) * t391) * pkin(1), -pkin(1) * t391 * t486 - t210 * t268 - t409 * t267 - t311 * t293 + t343, t118 * t217 + t160 * t188, -t118 * t216 - t119 * t217 - t159 * t188 - t160 * t186, -t160 * t339 + t217 * t392 + (-t118 * t302 + (qJD(1) * t217 + t188) * t404) * t291, t159 * t339 - t216 * t392 + (t119 * t302 + (-qJD(1) * t216 - t186) * t404) * t291 (-t392 * t302 + (-t266 - t339) * t404) * t291, g(1) * t361 - g(2) * t162 + t116 * t376 + t198 * t119 + t135 * t216 + t169 * t159 + t211 * t186 - t307 * t339 - t308 * t426 + t319 * t362, t321 * t339 - t414 * t392 + t211 * t188 + t198 * t118 + t135 * t217 + t169 * t160 - g(1) * t436 - g(2) * t161 + (-t322 * t302 - g(1) * t418 + (-qJD(1) * t414 - t117) * t404) * t291, -t11 * t147 - t49 * t110 - t12 * t146 - t29 * t335 + t30 * t363 + t336 * t48 - t337 * t63 + t64 * t82 - t343, -g(1) * t325 - g(2) * t338 + t11 * t63 + t12 * t64 + t126 * t346 + t48 * t29 + t49 * t30 + t312 * t84, -t105 * t67 - t124 * t41, t103 * t67 - t105 * t68 + t123 * t41 - t124 * t42, t105 * t110 + t124 * t79 - t146 * t41 - t467 * t67, -t103 * t110 - t123 * t79 - t146 * t42 - t467 * t68, t110 * t467 + t146 * t79, g(1) * t477 - g(2) * t121 + t26 * t103 + t21 * t110 + t9 * t123 + t4 * t146 + t309 * t467 + t368 * t79 + t58 * t42 + t43 * t68, -g(1) * t478 - g(2) * t120 + t26 * t105 - t22 * t110 + t9 * t124 + t329 * t146 - t327 * t467 - t58 * t41 - t43 * t67 - t452 * t79, g(1) * t151 - g(2) * t155 - t1 * t124 - t103 * t6 - t105 * t5 - t123 * t2 + t13 * t67 - t15 * t68 + t17 * t41 - t24 * t42, t2 * t24 + t15 * t6 + t1 * t17 + t13 * t5 + t7 * (pkin(5) * t123 + t58) + t33 * (pkin(5) * t68 + t26) - g(1) * (-pkin(5) * t438 + t151 * t294 - t152 * t281 + t325) - g(2) * (pkin(5) * t435 - t155 * t294 + t156 * t281 + t338); 0, 0, 0, -t298 * t386, t408 * t430 (t398 * t405 + t394) * t291, -t377 * t398 + t265, t267, t209 * t268 + t430 * t462 + t351 - t470, pkin(1) * t386 + t206 * t268 + (pkin(8) * t396 + g(3)) * t429 + t342 + t378, t118 * t297 - t301 * t471 (t118 + t472) * t301 + (-t119 + t471) * t297, -t301 * t354 + t297 * t392 + (t301 * t356 + (qJD(2) * t297 - t188) * t298) * t407, t297 * t354 + t301 * t392 + (-t297 * t356 + (qJD(2) * t301 + t186) * t298) * t407, t339 * t377, -pkin(2) * t119 + t192 * t339 - t116 * t377 - t209 * t186 + (-t206 * t339 + t465) * t297 + t481 * t301, -pkin(2) * t118 + t117 * t377 - t209 * t188 - t297 * t481 + t465 * t301 - t411 * t339, -t11 * t226 - t12 * t225 + t167 * t337 + t168 * t82 + t446 * t335 + t445 * t363 + t410 * t49 + t48 * t487 - t314, t12 * t168 - t11 * t167 - t84 * t282 - g(1) * t412 - g(2) * t413 - g(3) * (t429 * t458 + t229) + t445 * t49 - t446 * t48 + t485 * t126, t105 * t317 - t41 * t432, t365 * t105 + t364 * t103 + (t448 - t300 * t42 + (t103 * t296 - t105 * t300) * qJD(5)) * t226, -t105 * t410 - t41 * t225 + t317 * t467 + t432 * t79, t103 * t410 - t42 * t225 - t318 * t467 - t433 * t79, t225 * t79 - t410 * t467, -t43 * t143 + t149 * t79 + t167 * t42 + t4 * t225 - t410 * t21 + t475 * t467 + t447 * t103 + ((-t168 * t467 + t226 * t43) * qJD(5) - t470 * t284) * t300 + (-t168 * t79 - t43 * t215 + t9 * t226 + (-qJD(5) * t150 - t484) * t467 - t314) * t296, -t415 * t79 + t329 * t225 - t167 * t41 + t9 * t432 - g(1) * (t220 * t431 + t221 * t300) - g(2) * (t218 * t431 + t219 * t300) - g(3) * (-t284 * t422 + t298 * t300) * t291 + t410 * t22 + (t168 * t400 - t468) * t467 + t447 * t105 + t317 * t43, t41 * t86 - t42 * t91 + t365 * t15 + t364 * t13 - t456 * t105 - t454 * t103 - t470 * t283 + (-t1 * t300 - t2 * t296 + (t13 * t296 - t15 * t300) * qJD(5)) * t226, t2 * t91 + t1 * t86 + t7 * (pkin(5) * t433 + t167) - g(1) * (-t220 * t334 + t221 * t460 + t412) - g(2) * (-t218 * t334 + t219 * t460 + t413) - g(3) * t229 + (pkin(5) * t318 + t446) * t33 + t454 * t15 + t456 * t13 + (-g(3) * t334 * t302 + (t33 * pkin(4) * qJD(1) - g(3) * (t458 + t460)) * t298) * t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t188 * t186, -t186 ^ 2 + t188 ^ 2, t118 - t472, -t119 - t471, t319, -g(1) * t161 - g(2) * t328 + g(3) * t216 - t117 * t266 - t169 * t188 + t366, g(1) * t162 + g(2) * t361 + g(3) * t217 - t116 * t339 + t169 * t186 + t322 (t290 * t82 - t292 * t337) * pkin(3) + (-t52 + t48) * t363 + (t49 - t51) * t335, -g(1) * t247 - g(3) * t275 + t48 * t51 - t49 * t52 + (g(2) * t381 + t11 * t292 + t12 * t290 - t126 * t188 + t297 * t314) * pkin(3), t105 * t358 - t448 (-t41 + t441) * t300 - t474 + t455, -t440 - t479, t331 + t442, -t467 * t335, -t51 * t103 - t72 * t467 - t21 * t335 + t280 * t42 + (t467 * t52 + t323) * t296 - t306 * t300, -t51 * t105 + t22 * t335 - t280 * t41 + t296 * t306 + t300 * t323 + t453 * t467, -g(1) * t156 - g(2) * t152 - g(3) * t197 - t444 * t103 - t443 * t105 - t222 * t41 - t223 * t42 - t296 * t466 + t340 * t300, t2 * t223 - t1 * t222 + t7 * (-t281 - t461) - g(1) * (-pkin(3) * t434 - t155 * t281 - t156 * t294 + t247) - g(2) * (pkin(3) * t328 - t151 * t281 - t152 * t294) - g(3) * (-pkin(3) * t385 - t196 * t281 - t197 * t294 + t275) + (pkin(5) * t359 - t51) * t33 + t444 * t15 + t443 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t335 ^ 2 - t363 ^ 2, t335 * t48 - t363 * t49 + t470 + t84, 0, 0, 0, 0, 0, t331 - t442, -t440 + t479 (t41 + t441) * t300 + t474 + t455, t340 * t296 + t300 * t466 - t33 * t335 + t470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * t103, -t102 + t463, t103 * t467 - t41, -t313 + (-qJD(5) + t467) * t105, t79, -t43 * t105 + t22 * t467 + t4 + t469, t21 * t467 + t43 * t103 + g(1) * t121 + g(2) * t477 - g(3) * (-t197 * t300 + t252) + t329, pkin(5) * t41 - t103 * t457, t457 * t15 + (-t33 * t105 + t1 + t469) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102 - t463, t15 * t103 + t13 * t105 + t320 + t7;];
tau_reg  = t3;
