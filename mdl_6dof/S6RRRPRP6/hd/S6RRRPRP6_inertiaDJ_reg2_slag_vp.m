% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP6_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:01:09
% EndTime: 2019-03-09 17:01:28
% DurationCPUTime: 7.35s
% Computational Cost: add. (11049->490), mult. (29081->864), div. (0->0), fcn. (28612->10), ass. (0->236)
t155 = sin(qJ(3));
t269 = cos(pkin(6));
t216 = t269 * qJD(3);
t153 = sin(pkin(6));
t159 = cos(qJ(2));
t250 = qJD(2) * t159;
t226 = t153 * t250;
t183 = t216 + t226;
t303 = t155 * t183;
t156 = sin(qJ(2));
t251 = qJD(2) * t156;
t141 = t153 * t251;
t158 = cos(qJ(3));
t256 = t153 * t158;
t118 = t269 * t155 + t156 * t256;
t221 = t269 * t158;
t257 = t153 * t156;
t187 = t155 * t257 - t221;
t267 = sin(pkin(11));
t268 = cos(pkin(11));
t88 = t267 * t118 + t268 * t187;
t89 = t268 * t118 - t267 * t187;
t232 = pkin(1) * t269;
t181 = pkin(8) * t257 - t159 * t232;
t111 = -t269 * pkin(2) + t181;
t98 = pkin(3) * t187 + t111;
t167 = t88 * pkin(4) - t89 * pkin(10) + t98;
t214 = pkin(3) * t141;
t230 = qJD(3) * t257;
t130 = t155 * t230;
t296 = -t158 * t183 + t130;
t176 = t181 * qJD(2);
t190 = (-pkin(2) * t159 - pkin(9) * t156 - pkin(1)) * t153;
t298 = -qJD(3) * t190 + t176;
t255 = t153 * t159;
t120 = pkin(8) * t255 + t156 * t232;
t172 = t269 * pkin(9) + t120;
t299 = qJD(3) * t172 - qJD(2) * t153 * (pkin(2) * t156 - pkin(9) * t159);
t58 = t298 * t155 - t299 * t158;
t162 = qJ(4) * t296 - t118 * qJD(4) + t214 + t58;
t233 = t158 * t230 + t303;
t57 = t299 * t155 + t298 * t158;
t163 = -t233 * qJ(4) - t187 * qJD(4) - t57;
t19 = t267 * t162 + t268 * t163;
t302 = -pkin(10) * t141 - qJD(5) * t167 - t19;
t281 = -qJ(4) - pkin(9);
t222 = qJD(3) * t281;
t184 = qJD(4) * t158 + t155 * t222;
t185 = -qJD(4) * t155 + t158 * t222;
t168 = t268 * t184 + t267 * t185;
t218 = t267 * t155;
t124 = -t268 * t158 + t218;
t220 = t268 * t155;
t125 = t267 * t158 + t220;
t147 = -pkin(3) * t158 - pkin(2);
t186 = -pkin(4) * t124 + pkin(10) * t125 - t147;
t301 = qJD(5) * t186 - t168;
t154 = sin(qJ(5));
t151 = t154 ^ 2;
t157 = cos(qJ(5));
t152 = t157 ^ 2;
t252 = t151 - t152;
t300 = t252 * qJD(5);
t178 = qJD(3) * t187;
t297 = t155 * t178 - t233 * t158;
t136 = t281 * t158;
t103 = -t268 * t136 + t281 * t218;
t116 = t125 * qJD(3);
t117 = t124 * qJD(3);
t249 = qJD(3) * t155;
t239 = pkin(3) * t249;
t179 = pkin(4) * t116 + pkin(10) * t117 + t239;
t241 = -t154 * t179 + t301 * t157;
t245 = qJD(5) * t154;
t33 = t103 * t245 + t241;
t65 = t157 * t103 - t154 * t186;
t84 = t157 * t179;
t34 = -t65 * qJD(5) - t154 * t168 + t84;
t64 = -t103 * t154 - t157 * t186;
t295 = t154 * t33 - t157 * t34 + (t154 * t64 - t157 * t65) * qJD(5);
t180 = -qJ(6) * t117 + qJD(5) * t103 + qJD(6) * t125;
t228 = t125 * t245;
t164 = qJ(6) * t228 + t301 * t154 - t180 * t157 + t84;
t285 = t116 * pkin(5);
t24 = t164 + t285;
t149 = qJD(5) * t157;
t227 = t125 * t149;
t25 = qJ(6) * t227 + t154 * t180 + t241;
t261 = t125 * t157;
t54 = pkin(5) * t124 - qJ(6) * t261 + t64;
t262 = t125 * t154;
t59 = -qJ(6) * t262 + t65;
t294 = t154 * t25 - t157 * t24 + (t154 * t54 - t157 * t59) * qJD(5);
t80 = -t155 * t172 + t158 * t190;
t63 = -pkin(3) * t255 - t118 * qJ(4) + t80;
t81 = t155 * t190 + t158 * t172;
t70 = -qJ(4) * t187 + t81;
t41 = t267 * t63 + t268 * t70;
t38 = -pkin(10) * t255 + t41;
t22 = -t154 * t38 + t157 * t167;
t23 = t154 * t167 + t157 * t38;
t169 = -t267 * t233 - t268 * t296;
t217 = qJD(2) * t269;
t209 = t156 * t217;
t211 = t233 * pkin(3);
t69 = t268 * t233 - t267 * t296;
t165 = pkin(1) * t209 + t69 * pkin(4) + pkin(8) * t226 - t169 * pkin(10) + t211;
t3 = -t154 * t165 + t302 * t157 + t38 * t245;
t4 = -t38 * t149 + t302 * t154 + t157 * t165;
t293 = t154 * t3 - t157 * t4 + (t154 * t22 - t157 * t23) * qJD(5);
t77 = t154 * t89 + t157 * t255;
t45 = qJD(5) * t77 - t154 * t141 - t157 * t169;
t234 = t154 * t255;
t78 = t157 * t89 - t234;
t160 = t45 * qJ(6) - t78 * qJD(6) + t4;
t288 = t69 * pkin(5);
t1 = t160 + t288;
t12 = pkin(5) * t88 - qJ(6) * t78 + t22;
t13 = -qJ(6) * t77 + t23;
t46 = -qJD(5) * t234 - t157 * t141 + t89 * t149 + t154 * t169;
t2 = t46 * qJ(6) + t77 * qJD(6) + t3;
t292 = -t1 * t157 + t154 * t2 + (t12 * t154 - t13 * t157) * qJD(5);
t291 = t159 ^ 2;
t290 = 0.2e1 * t153;
t289 = 0.2e1 * qJD(5);
t287 = t77 * pkin(5);
t286 = pkin(9) * t153;
t18 = t268 * t162 - t267 * t163;
t15 = -pkin(4) * t141 - t18;
t6 = pkin(5) * t46 + t15;
t284 = t154 * t6;
t283 = t157 * pkin(5);
t282 = t157 * t6;
t280 = -t77 * t149 - t154 * t46;
t102 = -t267 * t136 - t281 * t220;
t86 = t267 * t184 - t268 * t185;
t279 = t102 * t86;
t278 = t15 * t154;
t277 = t15 * t157;
t276 = t154 * t45;
t265 = t117 * t154;
t97 = t227 - t265;
t60 = pkin(5) * t97 + t86;
t275 = t154 * t60;
t274 = t154 * t77;
t273 = t154 * t78;
t272 = t157 * t46;
t271 = t157 * t60;
t270 = t157 * t78;
t115 = qJD(2) * t120;
t266 = t115 * t155;
t264 = t117 * t157;
t263 = t125 * t117;
t146 = -t268 * pkin(3) - pkin(4);
t129 = t146 - t283;
t260 = t129 * t157;
t145 = t267 * pkin(3) + pkin(10);
t259 = t145 * t154;
t258 = t145 * t157;
t254 = t154 * t157;
t253 = qJ(6) + t145;
t248 = qJD(3) * t158;
t247 = qJD(3) * t159;
t244 = t111 * qJD(3);
t243 = t118 * qJD(3);
t53 = 0.2e1 * t88 * t69;
t242 = -0.2e1 * pkin(2) * qJD(3);
t100 = 0.2e1 * t124 * t116;
t240 = t146 * t289;
t238 = pkin(9) * t248;
t237 = pkin(5) * t245;
t40 = -t267 * t70 + t268 * t63;
t37 = pkin(4) * t255 - t40;
t26 = t37 + t287;
t236 = t26 * t245;
t85 = pkin(5) * t262 + t102;
t235 = t85 * t245;
t150 = t153 ^ 2;
t231 = t150 * t250;
t229 = t155 * t247;
t225 = t154 * t149;
t224 = t155 * t248;
t223 = -t129 + t283;
t215 = -0.4e1 * t125 * t254;
t123 = t125 ^ 2;
t213 = t123 * t225;
t212 = t156 * t231;
t207 = -t154 * t4 - t157 * t3;
t205 = pkin(5) * t151 + t260;
t43 = t116 * t88 + t124 * t69;
t204 = -t12 * t157 - t13 * t154;
t202 = -t154 * t23 - t157 * t22;
t197 = -t154 * t65 - t157 * t64;
t195 = -t58 * t155 - t57 * t158;
t194 = -t116 * t145 - t117 * t146;
t193 = t124 * t145 - t125 * t146;
t192 = -t157 * t45 - t78 * t245;
t51 = t88 * t149 + t154 * t69;
t50 = t157 * t69 - t88 * t245;
t95 = t116 * t154 + t124 * t149;
t191 = t228 + t264;
t188 = t155 * t251 - t158 * t247;
t171 = qJD(5) * t197 - t154 * t34 - t157 * t33;
t139 = -0.2e1 * t225;
t138 = 0.2e1 * t225;
t128 = -0.2e1 * t212;
t127 = -0.2e1 * t300;
t122 = t253 * t157;
t121 = t253 * t154;
t108 = -qJD(6) * t154 - t253 * t149;
t107 = -t157 * qJD(6) + t253 * t245;
t93 = t116 * t157 - t124 * t245;
t90 = (-t151 - t152) * t117;
t79 = t211 + t115;
t75 = -0.2e1 * t152 * t263 - 0.2e1 * t213;
t74 = -0.2e1 * t151 * t263 + 0.2e1 * t213;
t72 = t117 * t254 + t125 * t300;
t71 = qJD(5) * t215 + t252 * t117;
t62 = t252 * t123 * t289 - t117 * t215;
t56 = -0.2e1 * t116 * t262 - 0.2e1 * t124 * t97;
t55 = 0.2e1 * t116 * t261 - 0.2e1 * t124 * t191;
t30 = -0.2e1 * t78 * t45;
t29 = 0.2e1 * t77 * t46;
t28 = t77 * t245 - t272;
t27 = t78 * t149 - t276;
t21 = -t280 * t125 - t77 * t265;
t20 = t125 * t192 - t78 * t264;
t17 = -0.2e1 * t46 * t88 - 0.2e1 * t69 * t77;
t16 = -0.2e1 * t45 * t88 + 0.2e1 * t69 * t78;
t11 = 0.2e1 * t45 * t77 - 0.2e1 * t46 * t78;
t10 = t192 + t280;
t9 = -t192 + t280;
t8 = -t116 * t77 - t124 * t46 - t125 * t51 + t88 * t265;
t7 = t116 * t78 - t124 * t45 + t125 * t50 - t88 * t264;
t5 = -(-t157 * t77 - t273) * t117 + (t276 - t272 + (-t270 + t274) * qJD(5)) * t125;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t212, 0.2e1 * (-t156 ^ 2 + t291) * t150 * qJD(2), 0.2e1 * t217 * t255, t128, -0.2e1 * t153 * t209, 0, -0.2e1 * t150 * pkin(1) * t251 - 0.2e1 * t115 * t269, -0.2e1 * pkin(1) * t231 + 0.2e1 * t269 * t176, 0.2e1 * t115 * t257 - 0.2e1 * t120 * t141 - 0.2e1 * t176 * t255 + 0.2e1 * t181 * t226, 0.2e1 * t115 * t181 - 0.2e1 * t120 * t176, -0.2e1 * t118 * t296, -0.2e1 * t118 * t233 + 0.2e1 * t187 * t296 (-(t158 * t216 - t130) * t159 + (t118 * t156 - t291 * t256) * qJD(2)) * t290, 0.2e1 * t187 * t233, -0.2e1 * t141 * t187 + 0.2e1 * t233 * t255, t128, -0.2e1 * t115 * t221 + 0.2e1 * t111 * t233 + 0.2e1 * (-t58 * t159 + (qJD(2) * t80 + t266) * t156) * t153, -0.2e1 * t111 * t296 + 0.2e1 * t115 * t118 - 0.2e1 * t141 * t81 - 0.2e1 * t255 * t57, -0.2e1 * t58 * t118 + 0.2e1 * t187 * t57 - 0.2e1 * t233 * t81 + 0.2e1 * t296 * t80, 0.2e1 * t111 * t115 - 0.2e1 * t57 * t81 + 0.2e1 * t58 * t80, 0.2e1 * t89 * t169, -0.2e1 * t169 * t88 - 0.2e1 * t89 * t69, 0.2e1 * t141 * t89 - 0.2e1 * t169 * t255, t53 (t159 * t69 - t251 * t88) * t290, t128, 0.2e1 * t98 * t69 + 0.2e1 * t79 * t88 + 0.2e1 * (-t159 * t18 + t251 * t40) * t153, -0.2e1 * t141 * t41 + 0.2e1 * t169 * t98 + 0.2e1 * t19 * t255 + 0.2e1 * t79 * t89, -0.2e1 * t169 * t40 - 0.2e1 * t18 * t89 - 0.2e1 * t19 * t88 - 0.2e1 * t41 * t69, 0.2e1 * t18 * t40 + 0.2e1 * t19 * t41 + 0.2e1 * t79 * t98, t30, t11, t16, t29, t17, t53, 0.2e1 * t15 * t77 + 0.2e1 * t22 * t69 + 0.2e1 * t37 * t46 + 0.2e1 * t4 * t88, 0.2e1 * t15 * t78 - 0.2e1 * t23 * t69 + 0.2e1 * t3 * t88 - 0.2e1 * t37 * t45, 0.2e1 * t22 * t45 - 0.2e1 * t23 * t46 + 0.2e1 * t3 * t77 - 0.2e1 * t4 * t78, 0.2e1 * t15 * t37 + 0.2e1 * t22 * t4 - 0.2e1 * t23 * t3, t30, t11, t16, t29, t17, t53, 0.2e1 * t1 * t88 + 0.2e1 * t12 * t69 + 0.2e1 * t26 * t46 + 0.2e1 * t6 * t77, -0.2e1 * t13 * t69 + 0.2e1 * t2 * t88 - 0.2e1 * t26 * t45 + 0.2e1 * t6 * t78, -0.2e1 * t1 * t78 + 0.2e1 * t12 * t45 - 0.2e1 * t13 * t46 + 0.2e1 * t2 * t77, 0.2e1 * t1 * t12 - 0.2e1 * t13 * t2 + 0.2e1 * t26 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t226, 0, -t141, 0, -t115, t176, 0, 0, -t130 * t155 + (t243 + t303) * t158 (-t296 - t178) * t158 + (-t233 - t243) * t155, t188 * t153, t297 (t158 * t251 + t229) * t153, 0, -pkin(2) * t233 - t115 * t158 + t155 * t244 - t188 * t286, pkin(2) * t296 - t229 * t286 + t266 + (-pkin(9) * t141 + t244) * t158, t118 * t238 - t248 * t80 - t249 * t81 + t195 + (-t155 * t296 + t297) * pkin(9), -pkin(2) * t115 + ((-t81 * t155 - t80 * t158) * qJD(3) + t195) * pkin(9), -t89 * t117 + t125 * t169, -t89 * t116 + t117 * t88 - t124 * t169 - t125 * t69 (t117 * t159 + t125 * t251) * t153, t43 (t116 * t159 - t124 * t251) * t153, 0, t88 * t239 + t98 * t116 + t79 * t124 + t147 * t69 + (-t102 * t251 + t159 * t86) * t153, -t103 * t141 - t98 * t117 + t79 * t125 + t147 * t169 + t168 * t255 + t239 * t89, t102 * t169 - t103 * t69 - t41 * t116 + t40 * t117 - t19 * t124 - t18 * t125 - t168 * t88 + t86 * t89, -t18 * t102 + t19 * t103 + t79 * t147 + t168 * t41 + t239 * t98 - t40 * t86, t20, t5, t7, t21, t8, t43, -t37 * t265 + t102 * t46 + t116 * t22 + t124 * t4 + t34 * t88 + t64 * t69 + t77 * t86 + (t149 * t37 + t278) * t125, -t37 * t264 - t102 * t45 - t116 * t23 + t124 * t3 + t33 * t88 - t65 * t69 + t78 * t86 + (-t245 * t37 + t277) * t125, -t202 * t117 + t125 * t293 + t33 * t77 - t34 * t78 + t45 * t64 - t46 * t65, t102 * t15 + t22 * t34 - t23 * t33 - t3 * t65 + t37 * t86 + t4 * t64, t20, t5, t7, t21, t8, t43, -t26 * t265 + t1 * t124 + t116 * t12 + t24 * t88 + t46 * t85 + t54 * t69 + t60 * t77 + (t149 * t26 + t284) * t125, -t26 * t264 - t116 * t13 + t124 * t2 + t25 * t88 - t45 * t85 - t59 * t69 + t60 * t78 + (-t236 + t282) * t125, -t204 * t117 + t125 * t292 - t24 * t78 + t25 * t77 + t45 * t54 - t46 * t59, t1 * t54 + t12 * t24 - t13 * t25 - t2 * t59 + t26 * t60 + t6 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t224, 0.2e1 * (-t155 ^ 2 + t158 ^ 2) * qJD(3), 0, -0.2e1 * t224, 0, 0, t155 * t242, t158 * t242, 0, 0, -0.2e1 * t263, -0.2e1 * t116 * t125 + 0.2e1 * t117 * t124, 0, t100, 0, 0, 0.2e1 * t116 * t147 + 0.2e1 * t124 * t239, -0.2e1 * t117 * t147 + 0.2e1 * t125 * t239, -0.2e1 * t102 * t117 - 0.2e1 * t103 * t116 - 0.2e1 * t124 * t168 + 0.2e1 * t86 * t125, 0.2e1 * t103 * t168 + 0.2e1 * t147 * t239 + 0.2e1 * t279, t75, t62, t55, t74, t56, t100, 0.2e1 * t102 * t97 + 0.2e1 * t116 * t64 + 0.2e1 * t124 * t34 + 0.2e1 * t262 * t86, -0.2e1 * t102 * t191 - 0.2e1 * t116 * t65 + 0.2e1 * t124 * t33 + 0.2e1 * t261 * t86, -0.2e1 * t197 * t117 + 0.2e1 * t125 * t295, -0.2e1 * t33 * t65 + 0.2e1 * t34 * t64 + 0.2e1 * t279, t75, t62, t55, t74, t56, t100, -0.2e1 * t85 * t265 + 0.2e1 * t116 * t54 + 0.2e1 * t124 * t24 + 0.2e1 * (t149 * t85 + t275) * t125, -0.2e1 * t85 * t264 - 0.2e1 * t116 * t59 + 0.2e1 * t124 * t25 + 0.2e1 * (-t235 + t271) * t125, -0.2e1 * (-t154 * t59 - t157 * t54) * t117 + 0.2e1 * t294 * t125, 0.2e1 * t24 * t54 - 0.2e1 * t25 * t59 + 0.2e1 * t60 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t296, 0, -t233, t141, t58, t57, 0, 0, 0, 0, t169, 0, -t69, t141, t268 * t214 + t18, -t214 * t267 - t19 (-t169 * t268 - t267 * t69) * pkin(3) (t18 * t268 + t19 * t267) * pkin(3), t27, t10, t51, t28, t50, 0, -t69 * t259 + t146 * t46 - t277 + (t154 * t37 - t258 * t88) * qJD(5), -t69 * t258 - t146 * t45 + t278 + (t157 * t37 + t259 * t88) * qJD(5) (-t272 - t276) * t145 + ((t270 + t274) * t145 + t202) * qJD(5) + t207, t146 * t15 + (qJD(5) * t202 + t207) * t145, t27, t10, t51, t28, t50, 0, t108 * t88 - t121 * t69 + t129 * t46 - t282 + (t26 + t287) * t245, t107 * t88 - t122 * t69 - t129 * t45 + t284 + (pkin(5) * t273 + t157 * t26) * qJD(5), qJD(5) * t204 - t1 * t154 + t107 * t77 - t108 * t78 - t121 * t45 - t122 * t46 - t157 * t2, pkin(5) * t236 - t1 * t121 - t107 * t13 + t108 * t12 - t122 * t2 + t129 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, 0, -t249, 0, -t238, pkin(9) * t249, 0, 0, 0, 0, -t117, 0, -t116, 0, -t86, -t168 (-t116 * t267 + t117 * t268) * pkin(3) (t168 * t267 - t268 * t86) * pkin(3), -t72, t71, t95, t72, t93, 0, -t157 * t86 + t194 * t154 + (t102 * t154 - t157 * t193) * qJD(5), t154 * t86 + t194 * t157 + (t102 * t157 + t154 * t193) * qJD(5), t171, t145 * t171 + t146 * t86, -t72, t71, t95, t72, t93, 0, -t129 * t265 + t108 * t124 - t116 * t121 - t271 + (t125 * t205 + t154 * t85) * qJD(5), -t117 * t260 + t107 * t124 - t116 * t122 + t275 + (t157 * t85 + t223 * t262) * qJD(5) (-t108 * t125 - t117 * t121 - t25 + (-t122 * t125 - t54) * qJD(5)) * t157 + (t107 * t125 + t117 * t122 - t24 + (-t121 * t125 - t59) * qJD(5)) * t154, pkin(5) * t235 - t107 * t59 + t108 * t54 - t121 * t24 - t122 * t25 + t129 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, t127, 0, t139, 0, 0, t154 * t240, t157 * t240, 0, 0, t138, t127, 0, t139, 0, 0, -0.2e1 * t223 * t245, t205 * t289, -0.2e1 * t107 * t157 - 0.2e1 * t108 * t154 + 0.2e1 * (t121 * t157 - t122 * t154) * qJD(5), -0.2e1 * t107 * t122 - 0.2e1 * t108 * t121 + 0.2e1 * t129 * t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, t169, 0, t79, 0, 0, 0, 0, 0, 0, t50, -t51, t9, -t293, 0, 0, 0, 0, 0, 0, t50, -t51, t9, -t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, -t117, 0, t239, 0, 0, 0, 0, 0, 0, t93, -t95, -t90, -t295, 0, 0, 0, 0, 0, 0, t93, -t95, -t90, -t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107 * t154 + t108 * t157 + (t121 * t154 + t122 * t157) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, -t46, t69, t4, t3, 0, 0, 0, 0, -t45, 0, -t46, t69, t160 + 0.2e1 * t288, t2, t45 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t191, 0, -t97, t116, t34, t33, 0, 0, 0, 0, -t191, 0, -t97, t116, t164 + 0.2e1 * t285, t25, t191 * pkin(5), t24 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, 0, -t245, 0, -t145 * t149, t145 * t245, 0, 0, 0, 0, t149, 0, -t245, 0, t108, t107, -pkin(5) * t149, t108 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t245, -t149, 0, 0, 0, 0, 0, 0, 0, 0, -t245, -t149, 0, -t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t45, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t191, 0, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t245, t149, 0, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t14;
