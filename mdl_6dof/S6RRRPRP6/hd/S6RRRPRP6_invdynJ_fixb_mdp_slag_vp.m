% Calculate vector of inverse dynamics joint torques for
% S6RRRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,theta4]';
% MDP [28x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRP6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRP6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(28,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRP6_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [28 1]), ...
  'S6RRRPRP6_invdynJ_fixb_mdp_slag_vp: MDP has to be [28x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:01:38
% EndTime: 2019-03-09 17:02:02
% DurationCPUTime: 19.09s
% Computational Cost: add. (13788->710), mult. (33947->945), div. (0->0), fcn. (27192->14), ass. (0->323)
t780 = sin(pkin(6));
t791 = cos(qJ(2));
t893 = qJD(1) * t791;
t755 = t780 * t893;
t827 = t755 - qJD(3);
t787 = sin(qJ(2));
t832 = pkin(2) * t787 - pkin(9) * t791;
t895 = qJD(1) * t780;
t696 = t832 * t895;
t790 = cos(qJ(3));
t681 = t790 * t696;
t864 = t787 * t895;
t782 = cos(pkin(6));
t894 = qJD(1) * t782;
t877 = pkin(1) * t894;
t695 = -pkin(8) * t864 + t791 * t877;
t786 = sin(qJ(3));
t952 = qJ(4) + pkin(9);
t855 = qJD(3) * t952;
t982 = t681 + (-qJ(4) * t790 * t791 + pkin(3) * t787) * t895 + t790 * t855 + (-t695 + qJD(4)) * t786;
t836 = t786 * t755;
t899 = t790 * t695 + t786 * t696;
t981 = qJ(4) * t836 + qJD(4) * t790 - t786 * t855 - t899;
t779 = sin(pkin(11));
t781 = cos(pkin(11));
t715 = t779 * t790 + t781 * t786;
t898 = t827 * t715;
t714 = t779 * t786 - t781 * t790;
t654 = t714 * t755;
t704 = t714 * qJD(3);
t980 = t704 - t654;
t906 = -t779 * t982 + t981 * t781;
t883 = qJD(1) * qJD(2);
t858 = t791 * t883;
t881 = qJDD(1) * t787;
t979 = t858 + t881;
t698 = pkin(8) * t755 + t787 * t877;
t890 = qJD(3) * t786;
t978 = -t698 + (-t836 + t890) * pkin(3);
t976 = pkin(10) * t864 - t906;
t977 = -pkin(4) * t898 + t980 * pkin(10) + t978;
t882 = qJDD(1) * t782;
t756 = qJDD(2) + t882;
t876 = pkin(1) * qJD(2) * t782;
t839 = qJD(1) * t876;
t874 = pkin(1) * t882;
t974 = t979 * t780;
t838 = pkin(8) * t974 + t787 * t839 - t791 * t874;
t624 = -t756 * pkin(2) + t838;
t841 = qJD(3) * t827;
t792 = cos(qJ(1));
t918 = t791 * t792;
t788 = sin(qJ(1));
t923 = t787 * t788;
t707 = -t782 * t918 + t923;
t921 = t788 * t791;
t922 = t787 * t792;
t709 = t782 * t921 + t922;
t929 = t780 * t791;
t964 = -g(1) * t709 - g(2) * t707 + g(3) * t929;
t975 = pkin(9) * t841 - t624 - t964;
t757 = qJD(2) + t894;
t837 = t786 * t864;
t889 = qJD(3) * t790;
t607 = -qJD(3) * t837 + t786 * t756 + t757 * t889 + t790 * t974;
t677 = t757 * t786 + t790 * t864;
t659 = pkin(9) * t757 + t698;
t820 = -pkin(2) * t791 - pkin(9) * t787 - pkin(1);
t689 = t820 * t780;
t663 = qJD(1) * t689;
t606 = t659 * t790 + t663 * t786;
t859 = t787 * t883;
t835 = t780 * t859;
t880 = qJDD(1) * t791;
t754 = t780 * t880;
t865 = -pkin(8) * t754 - t787 * t874 - t791 * t839;
t800 = -pkin(8) * t835 - t865;
t623 = pkin(9) * t756 + t800;
t817 = qJD(2) * t832;
t628 = (qJD(1) * t817 + qJDD(1) * t820) * t780;
t853 = -t786 * t623 + t790 * t628;
t796 = -qJD(3) * t606 + t853;
t879 = qJDD(3) - t754;
t808 = t835 + t879;
t523 = pkin(3) * t808 - t607 * qJ(4) - t677 * qJD(4) + t796;
t891 = qJD(2) * t791;
t861 = t786 * t891;
t608 = -t790 * t756 + t757 * t890 + t780 * (qJD(1) * (t787 * t889 + t861) + t786 * t881);
t675 = -t790 * t757 + t837;
t814 = -t790 * t623 - t786 * t628 + t659 * t890 - t663 * t889;
t526 = -qJ(4) * t608 - qJD(4) * t675 - t814;
t501 = t779 * t523 + t781 * t526;
t499 = pkin(10) * t808 + t501;
t605 = -t786 * t659 + t790 * t663;
t585 = -t677 * qJ(4) + t605;
t577 = -pkin(3) * t827 + t585;
t586 = -qJ(4) * t675 + t606;
t927 = t781 * t586;
t538 = t779 * t577 + t927;
t533 = -pkin(10) * t827 + t538;
t658 = -pkin(2) * t757 - t695;
t615 = pkin(3) * t675 + qJD(4) + t658;
t823 = -t675 * t779 + t781 * t677;
t849 = -t781 * t675 - t677 * t779;
t544 = -pkin(4) * t849 - pkin(10) * t823 + t615;
t785 = sin(qJ(5));
t789 = cos(qJ(5));
t511 = t533 * t789 + t544 * t785;
t571 = -t607 * t779 - t781 * t608;
t573 = t608 * pkin(3) + qJDD(4) + t624;
t825 = t607 * t781 - t608 * t779;
t512 = -t571 * pkin(4) - pkin(10) * t825 + t573;
t493 = -qJD(5) * t511 - t785 * t499 + t789 * t512;
t845 = t789 * t827;
t887 = qJD(5) * t785;
t530 = qJD(5) * t845 - t785 * t808 - t789 * t825 + t823 * t887;
t568 = qJDD(5) - t571;
t594 = -t785 * t827 + t789 * t823;
t490 = pkin(5) * t568 + qJ(6) * t530 - qJD(6) * t594 + t493;
t592 = t785 * t823 + t845;
t504 = -qJ(6) * t592 + t511;
t961 = qJD(5) - t849;
t973 = t504 * t961 + t490;
t802 = t785 * t825 - t789 * t808;
t531 = qJD(5) * t594 + t802;
t886 = qJD(5) * t789;
t812 = -t789 * t499 - t785 * t512 + t533 * t887 - t544 * t886;
t491 = -qJ(6) * t531 - qJD(6) * t592 - t812;
t510 = -t533 * t785 + t789 * t544;
t503 = -qJ(6) * t594 + t510;
t502 = pkin(5) * t961 + t503;
t972 = -t502 * t961 + t491;
t708 = t782 * t922 + t921;
t776 = qJ(3) + pkin(11);
t772 = sin(t776);
t773 = cos(t776);
t928 = t780 * t792;
t641 = t708 * t773 - t772 * t928;
t971 = t641 * t785 - t707 * t789;
t945 = t707 * t785;
t970 = t641 * t789 + t945;
t968 = t594 * t961;
t967 = t675 * t827;
t966 = t827 * t677;
t930 = t780 * t790;
t706 = t782 * t786 + t787 * t930;
t957 = pkin(1) * t787;
t897 = pkin(8) * t929 + t782 * t957;
t688 = pkin(9) * t782 + t897;
t848 = -t688 * t786 + t790 * t689;
t589 = -pkin(3) * t929 - qJ(4) * t706 + t848;
t932 = t780 * t787;
t872 = t786 * t932;
t926 = t782 * t790;
t705 = t872 - t926;
t904 = t790 * t688 + t786 * t689;
t600 = -qJ(4) * t705 + t904;
t553 = t779 * t589 + t781 * t600;
t548 = -pkin(10) * t929 + t553;
t635 = t781 * t705 + t706 * t779;
t636 = -t705 * t779 + t706 * t781;
t758 = pkin(8) * t932;
t687 = t758 + (-pkin(1) * t791 - pkin(2)) * t782;
t801 = pkin(3) * t705 + t687;
t572 = pkin(4) * t635 - pkin(10) * t636 + t801;
t911 = t789 * t548 + t785 * t572;
t965 = t977 * t789;
t907 = t981 * t779 + t781 * t982;
t710 = -t782 * t923 + t918;
t931 = t780 * t788;
t645 = t710 * t773 + t772 * t931;
t609 = -t645 * t785 + t709 * t789;
t686 = t772 * t782 + t773 * t932;
t920 = t789 * t791;
t869 = t780 * t920;
t963 = g(2) * t971 - g(3) * (-t686 * t785 - t869) - g(1) * t609;
t771 = pkin(3) * t790 + pkin(2);
t639 = pkin(4) * t714 - pkin(10) * t715 - t771;
t962 = t639 * t886 + t977 * t785 - t789 * t976;
t960 = -pkin(9) * t808 - t827 * t658;
t958 = t594 ^ 2;
t956 = pkin(3) * t781;
t955 = pkin(5) * t785;
t953 = g(3) * t780;
t951 = MDP(6) * t780;
t950 = t530 * t785;
t949 = t592 * t823;
t948 = t592 * t849;
t947 = t594 * t823;
t946 = t849 * t785;
t943 = t708 * t785;
t942 = t708 * t786;
t941 = t709 * t785;
t940 = t710 * t785;
t939 = t710 * t786;
t938 = t715 * t785;
t937 = t715 * t789;
t936 = t756 * MDP(8);
t935 = t773 * t785;
t934 = t773 * t789;
t775 = t780 ^ 2;
t933 = t775 * qJD(1) ^ 2;
t582 = t779 * t586;
t925 = t782 * t791;
t924 = t785 * t791;
t563 = t789 * t568;
t738 = t952 * t786;
t739 = t952 * t790;
t657 = -t738 * t779 + t739 * t781;
t647 = t789 * t657;
t919 = t790 * t792;
t768 = pkin(3) * t779 + pkin(10);
t917 = qJ(6) + t768;
t916 = -t503 + t502;
t633 = -t654 * t789 + t785 * t864;
t821 = qJ(6) * t704 - qJD(6) * t715;
t915 = qJ(6) * t633 - t647 * qJD(5) + t821 * t789 + t965 + ((qJ(6) * t715 - t639) * qJD(5) + t976) * t785 - t898 * pkin(5);
t914 = -t785 * t531 - t592 * t886;
t632 = -t654 * t785 - t789 * t864;
t860 = t715 * t886;
t913 = (-qJD(5) * t657 + t821) * t785 + t962 + (t632 - t860) * qJ(6);
t541 = t585 * t781 - t582;
t562 = pkin(3) * t677 + pkin(4) * t823 - pkin(10) * t849;
t912 = t789 * t541 + t785 * t562;
t862 = t780 * t891;
t649 = -qJD(3) * t705 + t790 * t862;
t697 = t780 * t817;
t699 = (pkin(1) * t925 - t758) * qJD(2);
t797 = -qJD(3) * t904 + t790 * t697 - t699 * t786;
t892 = qJD(2) * t787;
t863 = t780 * t892;
t549 = pkin(3) * t863 - qJ(4) * t649 - qJD(4) * t706 + t797;
t648 = qJD(3) * t706 + t780 * t861;
t813 = -t688 * t890 + t689 * t889 + t786 * t697 + t790 * t699;
t554 = -qJ(4) * t648 - qJD(4) * t705 + t813;
t519 = t779 * t549 + t781 * t554;
t909 = t946 * t961 + t563;
t908 = pkin(4) * t864 + t907;
t905 = t785 * t639 + t647;
t846 = qJD(5) * t917;
t903 = qJ(6) * t946 + qJD(6) * t789 - t785 * t846 - t912;
t561 = t789 * t562;
t902 = -pkin(5) * t823 - t561 + (qJ(6) * t849 - t846) * t789 + (-qJD(6) + t541) * t785;
t901 = -t707 * t771 + t708 * t952;
t900 = -t709 * t771 + t710 * t952;
t700 = pkin(8) * t862 + t787 * t876;
t777 = t787 ^ 2;
t896 = -t791 ^ 2 + t777;
t888 = qJD(5) * t961;
t885 = qJD(2) - t757;
t878 = 0.2e1 * t775;
t873 = t791 * t933;
t871 = t786 * t931;
t870 = t788 * t930;
t868 = t780 * t919;
t741 = t780 * t924;
t742 = t786 * t928;
t770 = pkin(5) * t789 + pkin(4);
t500 = t781 * t523 - t779 * t526;
t854 = -t548 * t785 + t789 * t572;
t518 = t549 * t781 - t779 * t554;
t537 = t781 * t577 - t582;
t540 = t779 * t585 + t927;
t552 = t589 * t781 - t779 * t600;
t852 = t704 * t785 + t632;
t851 = t704 * t789 + t633;
t850 = t789 * t639 - t657 * t785;
t847 = t708 * t790 - t742;
t656 = t781 * t738 + t739 * t779;
t844 = t791 * t827;
t843 = t961 * t789;
t842 = t757 + t894;
t840 = t756 + t882;
t833 = t648 * pkin(3) + t700;
t830 = -g(1) * t707 + g(2) * t709;
t829 = g(1) * t710 + g(2) * t708;
t547 = pkin(4) * t929 - t552;
t826 = t792 * pkin(1) + pkin(3) * t871 + pkin(8) * t931 + t709 * t952 + t710 * t771;
t824 = t648 * t779 - t649 * t781;
t783 = -qJ(6) - pkin(10);
t822 = t770 * t773 - t772 * t783;
t612 = t636 * t785 + t869;
t640 = t708 * t772 + t773 * t928;
t818 = -t868 - t942;
t816 = -pkin(1) * t788 + pkin(3) * t742 + pkin(8) * t928 - t707 * t952 - t708 * t771;
t516 = pkin(10) * t863 + t519;
t599 = t781 * t648 + t649 * t779;
t536 = t599 * pkin(4) + pkin(10) * t824 + t833;
t811 = t789 * t516 + t785 * t536 - t548 * t887 + t572 * t886;
t532 = pkin(4) * t827 - t537;
t810 = t532 * t961 - t768 * t568;
t644 = t710 * t772 - t773 * t931;
t685 = t772 * t932 - t782 * t773;
t809 = -g(1) * t644 - g(2) * t640 - g(3) * t685;
t807 = -t852 + t860;
t806 = -t715 * t887 - t851;
t803 = g(3) * t932 + t829;
t515 = -pkin(4) * t863 - t518;
t798 = -qJD(5) * t911 - t516 * t785 + t789 * t536;
t498 = -pkin(4) * t808 - t500;
t795 = t768 * t888 + t498 + t809;
t496 = t531 * pkin(5) + qJDD(6) + t498;
t769 = -pkin(4) - t956;
t764 = pkin(3) * t926;
t736 = pkin(3) * t870;
t718 = t771 * t929;
t712 = t917 * t789;
t711 = t917 * t785;
t651 = t710 * t790 + t871;
t650 = t870 - t939;
t613 = t636 * t789 - t741;
t610 = t645 * t789 + t941;
t591 = t592 ^ 2;
t580 = -qJ(6) * t938 + t905;
t575 = pkin(5) * t714 - qJ(6) * t937 + t850;
t557 = -qJD(5) * t741 + t636 * t886 - t785 * t824 - t789 * t863;
t556 = qJD(5) * t612 - t785 * t863 + t789 * t824;
t522 = t592 * pkin(5) + qJD(6) + t532;
t513 = -qJ(6) * t612 + t911;
t506 = pkin(5) * t635 - qJ(6) * t613 + t854;
t495 = -qJ(6) * t557 - qJD(6) * t612 + t811;
t494 = pkin(5) * t599 + qJ(6) * t556 - qJD(6) * t613 + t798;
t1 = [(-t700 * t757 - t758 * t756 - t838 * t782 + g(1) * t708 - g(2) * t710 + (t756 * t925 + (-t859 + t880) * t878) * pkin(1)) * MDP(9) + (-g(1) * t816 - g(2) * t826 + t500 * t552 + t501 * t553 + t537 * t518 + t538 * t519 + t573 * t801 + t615 * t833) * MDP(19) + (-t500 * t636 - t501 * t635 - t518 * t823 + t519 * t849 + t537 * t824 - t538 * t599 - t552 * t825 + t553 * t571 - t830) * MDP(18) + (g(1) * t847 - g(2) * t651 + t605 * t863 + t687 * t608 + t624 * t705 + t658 * t648 + t700 * t675 - t796 * t929 - t797 * t827 + t808 * t848) * MDP(16) + (g(1) * t970 - g(2) * t610 + t493 * t635 + t498 * t612 + t510 * t599 + t515 * t592 + t547 * t531 + t532 * t557 + t854 * t568 + t798 * t961) * MDP(25) + (-g(1) * t971 - g(2) * t609 + t498 * t613 - t511 * t599 + t515 * t594 - t547 * t530 - t532 * t556 - t911 * t568 + t812 * t635 - t811 * t961) * MDP(26) + t782 * t936 + (t787 * t840 + t842 * t891) * t951 + (-g(1) * t942 - g(2) * t650 + t687 * t607 + t624 * t706 + t658 * t649 + t700 * t677 + t813 * t827 - t904 * t879) * MDP(17) + (-t649 * t827 + t706 * t879) * MDP(13) + (t648 * t827 - t705 * t879) * MDP(14) + ((-t814 * t791 - g(1) * t919 + (-qJD(1) * t904 - t606) * t892) * MDP(17) + (-t879 * t791 + (-t755 - t827) * t892) * MDP(15) + (t791 * t840 - t842 * t892) * MDP(7) + (-t607 * t791 + (qJD(1) * t706 + t677) * t892) * MDP(13) + (t608 * t791 + (-qJD(1) * t705 - t675) * t892) * MDP(14)) * t780 + qJDD(1) * MDP(1) + ((qJDD(1) * t777 + 0.2e1 * t787 * t858) * MDP(4) + 0.2e1 * (t787 * t880 - t883 * t896) * MDP(5)) * t775 + (g(1) * t788 - g(2) * t792) * MDP(2) + (g(1) * t792 + g(2) * t788) * MDP(3) + (-t530 * t613 - t556 * t594) * MDP(20) + (t530 * t612 - t531 * t613 + t556 * t592 - t557 * t594) * MDP(21) + (t568 * t635 + t599 * t961) * MDP(24) + (-t531 * t635 - t557 * t961 - t568 * t612 - t592 * t599) * MDP(23) + (-t530 * t635 - t556 * t961 + t568 * t613 + t594 * t599) * MDP(22) + (g(1) * t640 - g(2) * t644 - t490 * t613 - t491 * t612 - t494 * t594 - t495 * t592 + t502 * t556 - t504 * t557 + t506 * t530 - t513 * t531) * MDP(27) + (t491 * t513 + t504 * t495 + t490 * t506 + t502 * t494 + t496 * (pkin(5) * t612 + t547) + t522 * (pkin(5) * t557 + t515) - g(1) * (-pkin(5) * t945 + t640 * t783 - t641 * t770 + t816) - g(2) * (pkin(5) * t941 - t644 * t783 + t645 * t770 + t826)) * MDP(28) + (-pkin(1) * t878 * t979 - t699 * t757 - t897 * t756 - t800 * t782 + t830) * MDP(10) + (t607 * t706 + t649 * t677) * MDP(11) + (-t607 * t705 - t608 * t706 - t648 * t677 - t649 * t675) * MDP(12); (-t864 * t885 + t754) * MDP(7) + (-pkin(2) * t608 + t681 * t827 - t605 * t864 - t698 * t675 + (-t695 * t827 + t960) * t786 + t975 * t790) * MDP(16) + (-pkin(2) * t607 + t606 * t864 - t698 * t677 - t786 * t975 + t960 * t790 - t899 * t827) * MDP(17) + (-t530 * t937 + t594 * t806) * MDP(20) + (pkin(1) * t873 + t695 * t757 + (pkin(8) * t883 + g(3)) * t932 + t829 + t865) * MDP(10) + ((t607 + t967) * t790 + (-t608 + t966) * t786) * MDP(12) + (-t790 * t841 + t786 * t879 + (t790 * t844 + (qJD(2) * t786 - t677) * t787) * t895) * MDP(13) + (t786 * t841 + t790 * t879 + (-t786 * t844 + (qJD(2) * t790 + t675) * t787) * t895) * MDP(14) + (t607 * t786 - t790 * t966) * MDP(11) + t936 + (t852 * t594 + t851 * t592 + (t950 - t531 * t789 + (t592 * t785 - t594 * t789) * qJD(5)) * t715) * MDP(21) - t787 * MDP(4) * t873 + t827 * MDP(15) * t864 + (t885 * t893 + t881) * t951 + (-t500 * t715 - t501 * t714 + t537 * t980 + t898 * t538 + t657 * t571 + t656 * t825 + t907 * t823 + t906 * t849 - t803) * MDP(18) + (t850 * t568 + t493 * t714 + t656 * t531 + t498 * t938 - g(1) * (-t709 * t934 + t940) - g(2) * (-t707 * t934 + t943) - (t773 * t920 + t785 * t787) * t953 + (-t657 * t886 + (-qJD(5) * t639 + t976) * t785 + t965) * t961 + t908 * t592 - t898 * t510 + t807 * t532) * MDP(25) + (-t531 * t714 - t568 * t938 + t592 * t898 - t807 * t961) * MDP(23) + (t568 * t714 - t898 * t961) * MDP(24) + (-t530 * t714 + t563 * t715 - t594 * t898 + t806 * t961) * MDP(22) + (-t905 * t568 + t812 * t714 - t656 * t530 + t498 * t937 - g(1) * (t709 * t935 + t710 * t789) - g(2) * (t707 * t935 + t708 * t789) - (-t773 * t924 + t787 * t789) * t953 + (t657 * t887 - t962) * t961 + t908 * t594 + t898 * t511 + t806 * t532) * MDP(26) + t896 * MDP(5) * t933 + (t491 * t580 + t490 * t575 + t496 * (pkin(5) * t938 + t656) - g(1) * (pkin(5) * t940 - t709 * t822 + t900) - g(2) * (pkin(5) * t943 - t707 * t822 + t901) - g(3) * t718 + (pkin(5) * t807 + t907) * t522 + t913 * t504 + t915 * t502 + (-g(3) * t822 * t791 + (t522 * pkin(4) * qJD(1) - g(3) * (t952 + t955)) * t787) * t780) * MDP(28) + (t530 * t575 - t531 * t580 - t915 * t594 - t913 * t592 + t852 * t504 + t851 * t502 - t964 * t772 + (-t490 * t789 - t491 * t785 + (t502 * t785 - t504 * t789) * qJD(5)) * t715) * MDP(27) + (t698 * t757 + t933 * t957 - t838 - t964) * MDP(9) + (t501 * t657 - t500 * t656 - t573 * t771 - g(1) * t900 - g(2) * t901 - g(3) * (t932 * t952 + t718) + t978 * t615 + t906 * t538 - t907 * t537) * MDP(19); t677 * t675 * MDP(11) + (-t675 ^ 2 + t677 ^ 2) * MDP(12) + (t607 - t967) * MDP(13) + (-t608 - t966) * MDP(14) + t808 * MDP(15) + (-g(1) * t650 - g(2) * t818 + g(3) * t705 - t606 * t755 - t658 * t677 + t853) * MDP(16) + (g(1) * t651 + g(2) * t847 + g(3) * t706 - t605 * t827 + t658 * t675 + t814) * MDP(17) + ((t779 * t571 - t781 * t825) * pkin(3) + (t537 - t541) * t849 + (t538 - t540) * t823) * MDP(18) + (-g(1) * t736 - g(3) * t764 + t537 * t540 - t538 * t541 + (g(2) * t868 + t500 * t781 + t501 * t779 - t615 * t677 + t786 * t803) * pkin(3)) * MDP(19) + (t594 * t843 - t950) * MDP(20) + ((-t530 + t948) * t789 - t785 * t968 + t914) * MDP(21) + (t568 * t785 + t843 * t961 - t947) * MDP(22) + (-t887 * t961 + t909 + t949) * MDP(23) - t961 * t823 * MDP(24) + (-t510 * t823 + t769 * t531 - t540 * t592 - t561 * t961 + (t541 * t961 + t810) * t785 - t795 * t789) * MDP(25) + (t511 * t823 - t769 * t530 - t540 * t594 + t785 * t795 + t789 * t810 + t912 * t961) * MDP(26) + (-g(1) * t645 - g(2) * t641 - g(3) * t686 - t530 * t711 - t531 * t712 - t903 * t592 - t902 * t594 - t785 * t973 + t789 * t972) * MDP(27) + (t491 * t712 - t490 * t711 + t496 * (-t770 - t956) - g(1) * (-pkin(3) * t939 - t644 * t770 - t645 * t783 + t736) - g(2) * (pkin(3) * t818 - t640 * t770 - t641 * t783) - g(3) * (-pkin(3) * t872 - t685 * t770 - t686 * t783 + t764) + (t955 * t961 - t540) * t522 + t903 * t504 + t902 * t502) * MDP(28); (-t823 ^ 2 - t849 ^ 2) * MDP(18) + (t537 * t823 - t538 * t849 + t573 + t964) * MDP(19) + (t909 - t949) * MDP(25) - MDP(26) * t947 + t914 * MDP(27) + (-t522 * t823 + t964) * MDP(28) + (-MDP(25) * t888 - t568 * MDP(26) + MDP(27) * t968 + MDP(28) * t972) * t785 + ((t530 + t948) * MDP(27) + t973 * MDP(28) - t961 ^ 2 * MDP(26)) * t789; t594 * t592 * MDP(20) + (-t591 + t958) * MDP(21) + (t592 * t961 - t530) * MDP(22) + (-t802 + (-qJD(5) + t961) * t594) * MDP(23) + t568 * MDP(24) + (t511 * t961 - t532 * t594 + t493 + t963) * MDP(25) + (t510 * t961 + t532 * t592 + g(1) * t610 + g(2) * t970 - g(3) * (-t686 * t789 + t741) + t812) * MDP(26) + (pkin(5) * t530 - t592 * t916) * MDP(27) + (t916 * t504 + (-t522 * t594 + t490 + t963) * pkin(5)) * MDP(28); (-t591 - t958) * MDP(27) + (t502 * t594 + t504 * t592 + t496 + t809) * MDP(28);];
tau  = t1;
