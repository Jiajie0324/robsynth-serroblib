% Calculate minimal parameter regressor of coriolis matrix for
% S6RPPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta2,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x23]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPPRPR3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:45:09
% EndTime: 2019-03-09 01:45:11
% DurationCPUTime: 1.64s
% Computational Cost: add. (2537->182), mult. (4625->279), div. (0->0), fcn. (4995->8), ass. (0->164)
t155 = sin(qJ(4));
t242 = sin(pkin(10));
t143 = t242 * t155;
t157 = cos(qJ(4));
t243 = cos(pkin(10));
t185 = t243 * t157;
t134 = t185 - t143;
t156 = cos(qJ(6));
t217 = qJD(4) * t156;
t125 = t134 * t217;
t133 = -t243 * t155 - t242 * t157;
t154 = sin(qJ(6));
t76 = t154 * t133;
t229 = t76 * qJD(6);
t261 = -t125 - t229;
t132 = t134 ^ 2;
t203 = t132 / 0.2e1;
t141 = -cos(pkin(9)) * pkin(1) - pkin(2) - pkin(7);
t223 = -qJ(5) + t141;
t127 = t223 * t155;
t183 = t223 * t157;
t158 = t243 * t127 + t242 * t183;
t246 = t158 * t154;
t245 = t158 * t156;
t250 = qJD(4) * pkin(4);
t260 = (t243 * t133 + t242 * t134) * t250;
t257 = t133 ^ 2;
t259 = t132 + t257;
t179 = t257 / 0.2e1 + t203;
t151 = t154 ^ 2;
t152 = t156 ^ 2;
t140 = t152 - t151;
t220 = qJD(1) * t156;
t188 = t134 * t220;
t258 = t140 * qJD(4) - 0.2e1 * t154 * t188;
t61 = t242 * t127 - t243 * t183;
t256 = t61 / 0.2e1;
t255 = -t154 / 0.2e1;
t254 = -t156 / 0.2e1;
t253 = t156 / 0.2e1;
t252 = t157 * pkin(4);
t142 = sin(pkin(9)) * pkin(1) + qJ(3);
t136 = t155 * pkin(4) + t142;
t159 = -t133 * pkin(5) - t134 * pkin(8) + t136;
t24 = -t156 * t159 + t246;
t83 = t134 * pkin(5) - t133 * pkin(8) + t252;
t247 = t156 * t83;
t1 = (-t24 + t246) * t134 - t247 * t133;
t249 = t1 * qJD(1);
t248 = t154 * t83;
t78 = t154 * t134;
t14 = -t24 * t133 - t61 * t78;
t241 = t14 * qJD(1);
t25 = t154 * t159 + t245;
t82 = t156 * t134;
t15 = t25 * t133 + t61 * t82;
t240 = t15 * qJD(1);
t20 = t133 * t158 + t61 * t134;
t239 = t20 * qJD(1);
t204 = -t132 / 0.2e1;
t96 = t156 * t204;
t21 = t132 * t253 + t96;
t238 = t21 * qJD(1);
t34 = -0.1e1 / 0.2e1 - t179;
t28 = t34 * t154;
t237 = t28 * qJD(1);
t236 = t34 * qJD(1);
t46 = t34 * t156;
t235 = t46 * qJD(1);
t202 = t132 - t257;
t48 = t202 * t154;
t234 = t48 * qJD(1);
t49 = t259 * t154;
t233 = t49 * qJD(1);
t50 = t202 * t156;
t232 = t50 * qJD(1);
t184 = t242 * t133;
t186 = t243 * t134;
t160 = t184 / 0.2e1 - t186 / 0.2e1;
t58 = (-t157 / 0.2e1 + t160) * pkin(4);
t231 = t58 * qJD(1);
t230 = t76 * qJD(1);
t228 = t78 * qJD(1);
t79 = t156 * t133;
t227 = t79 * qJD(1);
t226 = t79 * qJD(4);
t85 = t259 * t156;
t225 = t85 * qJD(1);
t224 = t259 * qJD(1);
t222 = qJD(1) * t133;
t221 = qJD(1) * t134;
t219 = qJD(3) * t133;
t218 = qJD(4) * t154;
t216 = qJD(5) * t156;
t215 = qJD(6) * t154;
t214 = qJD(6) * t156;
t131 = t185 / 0.2e1 - t143 / 0.2e1;
t213 = t131 * qJD(1);
t212 = t136 * qJD(1);
t139 = t155 ^ 2 - t157 ^ 2;
t211 = t139 * qJD(1);
t210 = t142 * qJD(1);
t209 = t155 * qJD(1);
t208 = t155 * qJD(4);
t207 = t157 * qJD(1);
t206 = t157 * qJD(4);
t199 = -t61 / 0.2e1 + t256;
t198 = t134 * t215;
t197 = t134 * t214;
t196 = t133 * t221;
t195 = t134 * t133 * qJD(4);
t194 = t142 * t209;
t193 = t142 * t207;
t192 = t154 * t214;
t191 = t154 * t222;
t190 = t154 * t217;
t189 = t133 * t220;
t187 = t155 * t207;
t182 = -qJD(6) + t222;
t180 = t154 * t125;
t178 = -t78 * qJD(4) + t133 * t214;
t2 = (-t25 + t245) * t134 + t248 * t133;
t177 = t2 * qJD(1) + t21 * qJD(2);
t26 = t203 + t204;
t5 = t199 * t133;
t176 = t5 * qJD(1) - t26 * qJD(2);
t6 = t199 * t134;
t175 = -t6 * qJD(1) - t26 * qJD(3);
t146 = t242 * pkin(4) + pkin(8);
t147 = -t243 * pkin(4) - pkin(5);
t174 = t133 * t147 - t134 * t146;
t173 = t182 * t156;
t171 = t146 * t133 / 0.2e1 + t147 * t134 / 0.2e1;
t162 = -t83 / 0.2e1 + t171;
t9 = -t162 * t154 + t199 * t156;
t172 = -t9 * qJD(1) - t147 * t217;
t11 = t199 * t154 + t162 * t156;
t170 = -t11 * qJD(1) - t147 * t218;
t74 = (t151 / 0.2e1 - t152 / 0.2e1) * t134;
t169 = -t74 * qJD(1) + t190;
t168 = t134 * t173;
t167 = -t131 * qJD(6) + t196;
t166 = t132 * t154 * t220 + t74 * qJD(4);
t84 = t140 * t132;
t165 = t84 * qJD(1) + 0.2e1 * t180;
t8 = t136 * t252;
t164 = t8 * qJD(1) + t6 * qJD(2) - t5 * qJD(3);
t126 = t131 * qJD(4);
t124 = t134 * t218;
t72 = t79 * qJD(6);
t66 = t76 * qJD(4);
t65 = t74 * qJD(6);
t57 = t252 / 0.2e1 + t160 * pkin(4);
t56 = -t215 + t230;
t47 = t257 * t254 + t253 + t96;
t33 = 0.1e1 / 0.2e1 - t179;
t29 = t154 * t179 + t255;
t22 = t26 * qJD(4);
t13 = t21 * qJD(4);
t12 = t154 * t256 - t61 * t255 + t247 / 0.2e1 + t171 * t156;
t10 = -t248 / 0.2e1 - t171 * t154 + (t253 - t254) * t61;
t4 = t5 * qJD(4);
t3 = t6 * qJD(4);
t7 = [0, 0, 0, 0, 0, qJD(3), t142 * qJD(3), -t155 * t206, t139 * qJD(4), 0, 0, 0, qJD(3) * t155 + t142 * t206, qJD(3) * t157 - t142 * t208, qJD(5) * t259, t136 * qJD(3) + t8 * qJD(4) + t20 * qJD(5), -t132 * t192 + t152 * t195, -t84 * qJD(6) - 0.2e1 * t133 * t180, t50 * qJD(4) + t133 * t198, -t48 * qJD(4) + t133 * t197, -t195, t1 * qJD(4) + t49 * qJD(5) + t15 * qJD(6) - t156 * t219, t2 * qJD(4) + t85 * qJD(5) + t14 * qJD(6) + t154 * t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, t13; 0, 0, 0, 0, 0, qJD(1), t210, 0, 0, 0, 0, 0, t209, t207, 0, t33 * qJD(5) + t212 - t4, 0, 0, 0, 0, 0, t47 * qJD(6) - t189, t29 * qJD(6) + t191; 0, 0, 0, 0, 0, 0, 0, -t187, t211, -t208, -t206, 0, -t141 * t208 + t193, -t141 * t206 - t194, -t260 (-t158 * t243 - t242 * t61) * t250 + t57 * qJD(5) + t164, -t65 + (t152 * t221 + t190) * t133, t133 * t258 - 0.2e1 * t134 * t192, t124 + t232, t125 - t234, -t167, t249 + (t154 * t174 - t245) * qJD(4) + t12 * qJD(6) (t156 * t174 + t246) * qJD(4) + t10 * qJD(6) + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t224, t33 * qJD(3) + t57 * qJD(4) + t239, 0, 0, 0, 0, 0, t233, t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, -t165, t182 * t78, t168, t126, t47 * qJD(3) + t12 * qJD(4) - t25 * qJD(6) + t240, t29 * qJD(3) + t10 * qJD(4) + t24 * qJD(6) + t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206, t208, 0 (-t186 + t184) * t250 - t175, 0, 0, 0, 0, 0, t261, t124 - t72 + t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66 - t197, t198 - t226; 0, 0, 0, 0, 0, -qJD(1), -t210, 0, 0, 0, 0, 0, -t209, -t207, 0, t34 * qJD(5) - t212 - t4, 0, 0, 0, 0, 0, t46 * qJD(6) + t189, -t28 * qJD(6) - t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, -t206, 0, -t176 + t260, 0, 0, 0, 0, 0, -t78 * qJD(6) + t133 * t217, -t82 * qJD(6) - t133 * t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t178 + t235, -t82 * qJD(4) - t133 * t215 - t237; 0, 0, 0, 0, 0, 0, 0, t187, -t211, 0, 0, 0, -t193, t194, 0, t58 * qJD(5) - t164, -t152 * t196 - t65, 0.2e1 * t154 * t168, -t72 - t232, t229 + t234, t167, t11 * qJD(6) - t134 * t216 - t249, t78 * qJD(5) + t9 * qJD(6) - t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, 0, 0, 0, 0, 0, 0, -t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, t140 * qJD(6), 0, 0, 0, t147 * t215, t147 * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, 0, 0, 0, 0, 0, -t188, t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, t258, t214 - t227, t56, -t213, -t146 * t214 - t170, t146 * t215 - t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t224, -t34 * qJD(3) - t58 * qJD(4) - t239, 0, 0, 0, 0, 0, -t233 - t261, t178 - t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t231, 0, 0, 0, 0, 0, t188, -t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, t165, -t134 * t191 + t226, -t133 * t188 - t66, t126, -t46 * qJD(3) - t11 * qJD(4) - t76 * qJD(5) - t240, t28 * qJD(3) - t9 * qJD(4) - t133 * t216 - t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t169, -t258, t227, -t230, t213, t170, t172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t230, -t189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t7;
