% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta2,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:10
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:09:59
% EndTime: 2019-05-05 14:10:19
% DurationCPUTime: 17.38s
% Computational Cost: add. (52537->660), mult. (109277->980), div. (0->0), fcn. (70709->10), ass. (0->436)
t646 = sin(pkin(9));
t659 = qJD(1) ^ 2;
t648 = cos(pkin(9));
t690 = t648 * qJDD(1);
t609 = t646 * t659 - t690;
t642 = g(3) - qJDD(2);
t574 = qJ(2) * t609 - t642 * t646;
t654 = sin(qJ(1));
t657 = cos(qJ(1));
t608 = qJDD(1) * t646 + t648 * t659;
t673 = t657 * t608 - t609 * t654;
t680 = -qJ(2) * t608 + t648 * t642;
t765 = -pkin(6) * t673 + t574 * t654 + t657 * t680;
t645 = sin(pkin(10));
t647 = cos(pkin(10));
t653 = sin(qJ(4));
t656 = cos(qJ(4));
t590 = (t645 * t656 + t647 * t653) * qJD(1);
t701 = qJD(1) * t656;
t592 = -qJD(1) * t645 * t653 + t647 * t701;
t722 = t592 * t590;
t761 = qJDD(4) - t722;
t767 = t645 * t761;
t766 = t647 * t761;
t694 = qJD(1) * qJD(4);
t681 = t656 * t694;
t692 = qJDD(1) * t653;
t605 = -t681 - t692;
t682 = t653 * t694;
t691 = qJDD(1) * t656;
t606 = -t682 + t691;
t543 = t605 * t645 + t606 * t647;
t700 = qJD(4) * t590;
t503 = t543 - t700;
t618 = g(1) * t654 - t657 * g(2);
t602 = qJDD(1) * pkin(1) + t618;
t619 = g(1) * t657 + g(2) * t654;
t603 = -pkin(1) * t659 - t619;
t540 = -t648 * t602 + t603 * t646;
t541 = t646 * t602 + t648 * t603;
t676 = t540 * t646 + t648 * t541;
t477 = t540 * t648 - t541 * t646;
t732 = t477 * t654;
t411 = t657 * t676 + t732;
t731 = t477 * t657;
t762 = -t654 * t676 + t731;
t671 = t608 * t654 + t657 * t609;
t746 = pkin(6) * t671 + t574 * t657 - t654 * t680;
t652 = sin(qJ(6));
t655 = cos(qJ(6));
t560 = -t655 * qJD(4) + t592 * t652;
t562 = qJD(4) * t652 + t592 * t655;
t499 = t562 * t560;
t674 = -t647 * t605 + t606 * t645;
t666 = qJDD(6) + t674;
t750 = -t499 + t666;
t758 = t652 * t750;
t757 = t655 * t750;
t699 = qJD(4) * t592;
t500 = t674 + t699;
t693 = qJDD(1) * qJ(3);
t661 = -t659 * pkin(2) + t541 + t693;
t745 = 2 * qJD(3);
t689 = qJD(1) * t745;
t520 = t661 + t689;
t644 = qJDD(1) * pkin(2);
t521 = -t659 * qJ(3) + qJDD(3) + t540 - t644;
t460 = t520 * t646 - t521 * t648;
t677 = t648 * t520 + t521 * t646;
t389 = -t460 * t654 + t657 * t677;
t388 = t460 * t657 + t654 * t677;
t481 = -t560 * qJD(6) + t652 * qJDD(4) + t655 * t543;
t586 = qJD(6) + t590;
t519 = t586 * t560;
t440 = -t519 + t481;
t615 = qJD(4) * pkin(4) - qJ(5) * t701;
t516 = -qJDD(1) * pkin(7) + t521;
t703 = -t653 * t516 + t656 * t642;
t640 = t653 ^ 2;
t713 = t640 * t659;
t466 = -pkin(4) * t713 + qJ(5) * t605 - qJD(4) * t615 - t703;
t707 = t656 * t659;
t708 = t656 * t516;
t660 = qJDD(4) * pkin(4) - t606 * qJ(5) + t708 + (-pkin(4) * t707 - qJ(5) * t694 + t642) * t653;
t381 = -0.2e1 * qJD(5) * t590 + t647 * t466 + t645 * t660;
t675 = -t655 * qJDD(4) + t652 * t543;
t437 = (qJD(6) - t586) * t562 + t675;
t558 = t560 ^ 2;
t559 = t562 ^ 2;
t585 = t586 ^ 2;
t588 = t590 ^ 2;
t589 = t592 ^ 2;
t744 = 0.2e1 * qJD(5);
t743 = pkin(2) + pkin(7);
t742 = pkin(5) * t645;
t678 = t645 * t466 - t647 * t660;
t380 = t592 * t744 + t678;
t332 = -t380 * t647 + t381 * t645;
t740 = t332 * t653;
t739 = t332 * t656;
t530 = pkin(5) * t590 - pkin(8) * t592;
t658 = qJD(4) ^ 2;
t361 = -qJDD(4) * pkin(5) - t658 * pkin(8) + (t744 + t530) * t592 + t678;
t738 = t361 * t652;
t737 = t361 * t655;
t468 = t499 + t666;
t736 = t468 * t652;
t735 = t468 * t655;
t650 = t659 * pkin(7);
t470 = qJDD(5) - t605 * pkin(4) - qJ(5) * t713 - t650 + (t615 * t656 + t745) * qJD(1) + t661;
t734 = t470 * t645;
t733 = t470 * t647;
t534 = qJDD(4) + t722;
t730 = t534 * t645;
t729 = t534 * t647;
t724 = t586 * t652;
t723 = t586 * t655;
t641 = t656 ^ 2;
t702 = t640 + t641;
t610 = t702 * qJDD(1);
t719 = t610 * t646;
t718 = t610 * t648;
t684 = t653 * t707;
t616 = qJDD(4) + t684;
t717 = t616 * t653;
t716 = t616 * t656;
t617 = qJDD(4) - t684;
t715 = t617 * t653;
t714 = t617 * t656;
t712 = t641 * t659;
t509 = t520 - t650;
t710 = t653 * t509;
t709 = t656 * t509;
t362 = -pkin(5) * t658 + qJDD(4) * pkin(8) - t530 * t590 + t381;
t392 = t500 * pkin(5) - pkin(8) * t503 + t470;
t329 = t655 * t362 + t652 * t392;
t698 = qJD(4) * t645;
t697 = qJD(4) * t647;
t688 = t645 * t499;
t687 = t647 * t499;
t686 = t646 * t722;
t685 = t648 * t722;
t683 = -pkin(5) * t647 - pkin(4);
t328 = t362 * t652 - t655 * t392;
t281 = t328 * t652 + t655 * t329;
t333 = t380 * t645 + t647 * t381;
t557 = -t618 * t654 - t657 * t619;
t669 = t646 * t684;
t668 = t648 * t684;
t612 = qJDD(1) * t657 - t654 * t659;
t667 = -pkin(6) * t612 - g(3) * t654;
t280 = -t328 * t655 + t329 * t652;
t495 = -t653 * t642 - t708;
t432 = -t656 * t495 - t653 * t703;
t433 = t495 * t653 - t656 * t703;
t556 = t618 * t657 - t619 * t654;
t664 = -pkin(1) * t609 - t540;
t663 = -t674 + t699;
t662 = -pkin(1) * t608 - t541;
t631 = t648 * qJDD(4);
t630 = t646 * qJDD(4);
t624 = -t658 - t712;
t623 = t658 - t712;
t622 = -t658 - t713;
t621 = -t658 + t713;
t614 = (-t640 + t641) * t659;
t613 = t702 * t659;
t611 = qJDD(1) * t654 + t657 * t659;
t607 = -0.2e1 * t682 + t691;
t604 = 0.2e1 * t681 + t692;
t600 = t702 * t694;
t587 = -pkin(6) * t611 + g(3) * t657;
t581 = -t589 - t658;
t580 = -t589 + t658;
t579 = t588 - t658;
t572 = -t606 * t653 - t641 * t694;
t571 = -t605 * t656 - t640 * t694;
t570 = -t600 * t646 + t631;
t569 = t600 * t648 + t630;
t568 = -t624 * t653 - t716;
t567 = t622 * t656 - t715;
t566 = t624 * t656 - t717;
t565 = -t623 * t656 - t715;
t564 = t622 * t653 + t714;
t563 = -t621 * t653 - t716;
t554 = -t613 * t648 - t719;
t553 = -t613 * t646 + t718;
t544 = t604 * t653 - t607 * t656;
t537 = t589 - t588;
t532 = -t658 - t588;
t529 = -t571 * t646 - t668;
t528 = -t572 * t646 + t668;
t527 = t571 * t648 - t669;
t526 = t572 * t648 + t669;
t525 = -t565 * t646 + t656 * t690;
t524 = -t563 * t646 - t653 * t690;
t523 = t565 * t648 + t646 * t691;
t522 = t563 * t648 - t646 * t692;
t518 = (-t590 * t647 + t592 * t645) * qJD(4);
t517 = (-t590 * t645 - t592 * t647) * qJD(4);
t515 = t566 * t646 + t607 * t648;
t514 = t564 * t646 + t604 * t648;
t513 = -t566 * t648 + t607 * t646;
t512 = -t564 * t648 + t604 * t646;
t511 = -t559 + t585;
t510 = t558 - t585;
t506 = -t544 * t646 + t614 * t648;
t505 = t544 * t648 + t614 * t646;
t504 = t543 + t700;
t498 = -t588 - t589;
t497 = -t559 + t558;
t494 = t543 * t647 - t592 * t698;
t493 = t543 * t645 + t592 * t697;
t492 = t590 * t697 + t645 * t674;
t491 = t590 * t698 - t647 * t674;
t490 = -t559 - t585;
t489 = -t581 * t645 - t729;
t488 = -t580 * t645 + t766;
t487 = t579 * t647 - t730;
t486 = t581 * t647 - t730;
t485 = t580 * t647 + t767;
t484 = t579 * t645 + t729;
t483 = -t553 * t654 + t554 * t657;
t482 = t553 * t657 + t554 * t654;
t480 = -qJD(6) * t562 - t675;
t479 = -t585 - t558;
t474 = t558 + t559;
t473 = t532 * t647 - t767;
t472 = t532 * t645 + t766;
t471 = pkin(1) * t642 + qJ(2) * t676;
t458 = (-t560 * t655 + t562 * t652) * t586;
t457 = (-t560 * t652 - t562 * t655) * t586;
t456 = -t517 * t656 - t518 * t653;
t455 = -t513 * t654 + t515 * t657;
t454 = -t512 * t654 + t514 * t657;
t453 = t513 * t657 + t515 * t654;
t452 = t512 * t657 + t514 * t654;
t451 = -t456 * t646 + t631;
t450 = t456 * t648 + t630;
t449 = pkin(3) * t566 - qJ(3) * t568 + t703;
t448 = pkin(3) * t564 - qJ(3) * t567 - t495;
t447 = t504 * t645 + t647 * t663;
t446 = -t500 * t647 - t503 * t645;
t445 = -t504 * t647 + t645 * t663;
t444 = -t500 * t645 + t503 * t647;
t443 = -qJ(2) * t460 + (-pkin(2) * t646 + qJ(3) * t648) * t642;
t441 = -t519 - t481;
t438 = (-qJD(6) - t586) * t562 - t675;
t436 = qJ(2) * t677 + (pkin(2) * t648 + qJ(3) * t646 + pkin(1)) * t642;
t435 = pkin(3) * t604 - t567 * t743 + t709;
t434 = pkin(3) * t607 - t568 * t743 - t710;
t431 = t481 * t655 - t562 * t724;
t430 = t481 * t652 + t562 * t723;
t429 = -t480 * t652 + t560 * t723;
t428 = t480 * t655 + t560 * t724;
t427 = -t493 * t656 - t494 * t653;
t426 = -t491 * t656 - t492 * t653;
t425 = -pkin(3) * t613 - t433;
t424 = -t486 * t653 + t489 * t656;
t423 = t486 * t656 + t489 * t653;
t422 = -t485 * t656 - t488 * t653;
t421 = -t484 * t656 - t487 * t653;
t420 = t458 * t647 + t645 * t666;
t419 = t458 * t645 - t647 * t666;
t418 = t510 * t655 - t736;
t417 = -t511 * t652 + t757;
t416 = t510 * t652 + t735;
t415 = t511 * t655 + t758;
t414 = -qJ(5) * t486 + t733;
t413 = -t490 * t652 - t735;
t412 = t490 * t655 - t736;
t409 = t479 * t655 - t758;
t408 = t479 * t652 + t757;
t407 = -t427 * t646 + t685;
t406 = -t426 * t646 - t685;
t405 = t427 * t648 + t686;
t404 = t426 * t648 - t686;
t403 = -t472 * t653 + t473 * t656;
t402 = t472 * t656 + t473 * t653;
t401 = -qJ(5) * t472 + t734;
t400 = t432 * t646 + t509 * t648;
t399 = -t432 * t648 + t509 * t646;
t398 = t431 * t647 + t688;
t397 = t429 * t647 - t688;
t396 = t431 * t645 - t687;
t395 = t429 * t645 + t687;
t394 = -pkin(3) * t718 - qJ(2) * t553 - t425 * t646;
t393 = -pkin(3) * t719 + qJ(2) * t554 + t425 * t648;
t387 = -t422 * t646 + t504 * t648;
t386 = t423 * t646 + t503 * t648;
t385 = -t421 * t646 + t648 * t663;
t384 = t422 * t648 + t504 * t646;
t383 = -t423 * t648 + t503 * t646;
t382 = t421 * t648 + t646 * t663;
t379 = -pkin(4) * t503 + qJ(5) * t489 + t734;
t377 = -pkin(4) * t500 + qJ(5) * t473 - t733;
t376 = -t445 * t653 + t447 * t656;
t375 = t445 * t656 + t447 * t653;
t374 = -t444 * t656 - t446 * t653;
t373 = t402 * t646 + t500 * t648;
t372 = -t402 * t648 + t500 * t646;
t371 = -t437 * t655 - t441 * t652;
t370 = t438 * t655 - t440 * t652;
t369 = -t437 * t652 + t441 * t655;
t368 = t438 * t652 + t440 * t655;
t367 = pkin(3) * t432 - qJ(3) * t433;
t366 = t418 * t647 - t437 * t645;
t365 = t417 * t647 - t441 * t645;
t364 = t418 * t645 + t437 * t647;
t363 = t417 * t645 + t441 * t647;
t359 = -t374 * t646 + t537 * t648;
t358 = t374 * t648 + t537 * t646;
t357 = t413 * t647 + t440 * t645;
t356 = t413 * t645 - t440 * t647;
t355 = -t419 * t656 - t420 * t653;
t354 = -qJ(2) * t513 - t434 * t646 + t449 * t648;
t353 = -qJ(2) * t512 - t435 * t646 + t448 * t648;
t352 = t409 * t647 - t438 * t645;
t351 = t409 * t645 + t438 * t647;
t350 = t375 * t646 + t498 * t648;
t349 = -t375 * t648 + t498 * t646;
t348 = pkin(3) * t509 - t433 * t743;
t347 = t370 * t647 - t497 * t645;
t346 = t370 * t645 + t497 * t647;
t345 = -pkin(1) * t568 + qJ(2) * t515 + t434 * t648 + t449 * t646;
t344 = -pkin(1) * t567 + qJ(2) * t514 + t435 * t648 + t448 * t646;
t343 = t371 * t647 - t474 * t645;
t342 = t371 * t645 + t474 * t647;
t341 = -t399 * t654 + t400 * t657;
t340 = t399 * t657 + t400 * t654;
t339 = -t396 * t656 - t398 * t653;
t338 = -t395 * t656 - t397 * t653;
t337 = -t355 * t646 + t457 * t648;
t336 = t355 * t648 + t457 * t646;
t335 = -t383 * t654 + t386 * t657;
t334 = t383 * t657 + t386 * t654;
t331 = -pkin(8) * t412 + t737;
t330 = -pkin(8) * t408 + t738;
t326 = -t372 * t654 + t373 * t657;
t325 = t372 * t657 + t373 * t654;
t324 = -t339 * t646 + t430 * t648;
t323 = -t338 * t646 + t428 * t648;
t322 = t339 * t648 + t430 * t646;
t321 = t338 * t648 + t428 * t646;
t320 = -pkin(4) * t470 + qJ(5) * t333;
t319 = -qJ(5) * t445 - t332;
t318 = -t364 * t656 - t366 * t653;
t317 = -t363 * t656 - t365 * t653;
t316 = pkin(3) * t423 + pkin(4) * t486 - qJ(3) * t424 - t381;
t315 = -t356 * t653 + t357 * t656;
t314 = t356 * t656 + t357 * t653;
t313 = pkin(3) * t375 + pkin(4) * t445 - qJ(3) * t376;
t312 = -t351 * t653 + t352 * t656;
t311 = t351 * t656 + t352 * t653;
t310 = -pkin(4) * t498 + qJ(5) * t447 + t333;
t309 = -t349 * t654 + t350 * t657;
t308 = t349 * t657 + t350 * t654;
t307 = -t346 * t656 - t347 * t653;
t306 = -pkin(5) * t412 + t329;
t305 = -pkin(5) * t408 + t328;
t304 = pkin(3) * t402 + pkin(4) * t472 - qJ(3) * t403 - t380;
t303 = -t342 * t653 + t343 * t656;
t302 = t342 * t656 + t343 * t653;
t301 = -t318 * t646 + t416 * t648;
t300 = -t317 * t646 + t415 * t648;
t299 = t318 * t648 + t416 * t646;
t298 = t317 * t648 + t415 * t646;
t297 = pkin(3) * t503 - t656 * t379 - t653 * t414 - t424 * t743;
t296 = -qJ(2) * t399 - t348 * t646 + t367 * t648;
t295 = t314 * t646 + t412 * t648;
t294 = -t314 * t648 + t412 * t646;
t293 = t311 * t646 + t408 * t648;
t292 = -t311 * t648 + t408 * t646;
t291 = pkin(3) * t500 - t656 * t377 - t653 * t401 - t403 * t743;
t290 = -pkin(1) * t433 + qJ(2) * t400 + t348 * t648 + t367 * t646;
t289 = t333 * t656 - t740;
t288 = t333 * t653 + t739;
t287 = -t307 * t646 + t368 * t648;
t286 = t307 * t648 + t368 * t646;
t285 = t302 * t646 + t369 * t648;
t284 = -t302 * t648 + t369 * t646;
t283 = t288 * t646 + t470 * t648;
t282 = -t288 * t648 + t470 * t646;
t279 = -pkin(8) * t369 - t280;
t278 = t281 * t647 + t361 * t645;
t277 = t281 * t645 - t361 * t647;
t276 = -qJ(5) * t356 - t306 * t645 + t331 * t647;
t275 = -qJ(5) * t351 - t305 * t645 + t330 * t647;
t274 = -qJ(2) * t383 - t297 * t646 + t316 * t648;
t273 = -t294 * t654 + t295 * t657;
t272 = t294 * t657 + t295 * t654;
t271 = -pkin(4) * t412 + qJ(5) * t357 + t306 * t647 + t331 * t645;
t270 = -t292 * t654 + t293 * t657;
t269 = t292 * t657 + t293 * t654;
t268 = -pkin(4) * t408 + qJ(5) * t352 + t305 * t647 + t330 * t645;
t267 = -pkin(1) * t424 + qJ(2) * t386 + t297 * t648 + t316 * t646;
t266 = pkin(3) * t498 - t656 * t310 - t653 * t319 - t376 * t743;
t265 = -qJ(2) * t372 - t291 * t646 + t304 * t648;
t264 = -qJ(5) * t342 + t279 * t647 + t369 * t742;
t263 = -t284 * t654 + t285 * t657;
t262 = t284 * t657 + t285 * t654;
t261 = -pkin(1) * t403 + qJ(2) * t373 + t291 * t648 + t304 * t646;
t260 = -t282 * t654 + t283 * t657;
t259 = t282 * t657 + t283 * t654;
t258 = pkin(3) * t314 + pkin(4) * t356 - pkin(5) * t440 + pkin(8) * t413 - qJ(3) * t315 + t738;
t257 = qJ(5) * t343 + t645 * t279 + t369 * t683;
t256 = pkin(3) * t311 + pkin(4) * t351 + pkin(5) * t438 + pkin(8) * t409 - qJ(3) * t312 - t737;
t255 = pkin(3) * t288 + pkin(4) * t332 - qJ(3) * t289;
t254 = -t277 * t653 + t278 * t656;
t253 = t277 * t656 + t278 * t653;
t252 = -qJ(2) * t349 - t266 * t646 + t313 * t648;
t251 = pkin(3) * t470 + qJ(5) * t740 - t289 * t743 - t656 * t320;
t250 = -pkin(1) * t376 + qJ(2) * t350 + t266 * t648 + t313 * t646;
t249 = pkin(3) * t302 + pkin(4) * t342 + pkin(5) * t474 + pkin(8) * t371 - qJ(3) * t303 + t281;
t248 = -qJ(5) * t277 + (-pkin(8) * t647 + t742) * t280;
t247 = t253 * t646 + t280 * t648;
t246 = -t253 * t648 + t280 * t646;
t245 = qJ(5) * t278 + (-pkin(8) * t645 + t683) * t280;
t244 = pkin(3) * t412 - t656 * t271 - t653 * t276 - t315 * t743;
t243 = pkin(3) * t408 - t656 * t268 - t653 * t275 - t312 * t743;
t242 = pkin(3) * t369 - t656 * t257 - t653 * t264 - t303 * t743;
t241 = -qJ(2) * t282 - t251 * t646 + t255 * t648;
t240 = -pkin(1) * t289 + qJ(2) * t283 + t251 * t648 + t255 * t646;
t239 = -t246 * t654 + t247 * t657;
t238 = t246 * t657 + t247 * t654;
t237 = -qJ(2) * t294 - t244 * t646 + t258 * t648;
t236 = -qJ(2) * t292 - t243 * t646 + t256 * t648;
t235 = pkin(3) * t253 + pkin(4) * t277 - pkin(5) * t361 + pkin(8) * t281 - qJ(3) * t254;
t234 = -pkin(1) * t315 + qJ(2) * t295 + t244 * t648 + t258 * t646;
t233 = -pkin(1) * t312 + qJ(2) * t293 + t243 * t648 + t256 * t646;
t232 = -qJ(2) * t284 - t242 * t646 + t249 * t648;
t231 = -pkin(1) * t303 + qJ(2) * t285 + t242 * t648 + t249 * t646;
t230 = pkin(3) * t280 - t656 * t245 - t653 * t248 - t254 * t743;
t229 = -qJ(2) * t246 - t230 * t646 + t235 * t648;
t228 = -pkin(1) * t254 + qJ(2) * t247 + t230 * t648 + t235 * t646;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t611, -t612, 0, t557, 0, 0, 0, 0, 0, 0, -t673, t671, 0, t411, 0, 0, 0, 0, 0, 0, 0, t673, -t671, t389, 0, 0, 0, 0, 0, 0, t454, t455, t483, t341, 0, 0, 0, 0, 0, 0, t326, t335, t309, t260, 0, 0, 0, 0, 0, 0, t270, t273, t263, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t612, -t611, 0, t556, 0, 0, 0, 0, 0, 0, -t671, -t673, 0, -t762, 0, 0, 0, 0, 0, 0, 0, t671, t673, t388, 0, 0, 0, 0, 0, 0, t452, t453, t482, t340, 0, 0, 0, 0, 0, 0, t325, t334, t308, t259, 0, 0, 0, 0, 0, 0, t269, t272, t262, t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t642, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t642, 0, 0, 0, 0, 0, 0, t567, t568, 0, t433, 0, 0, 0, 0, 0, 0, t403, t424, t376, t289, 0, 0, 0, 0, 0, 0, t312, t315, t303, t254; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t612, 0, -t611, 0, t667, -t587, -t556, -pkin(6) * t556, 0, 0, -t671, 0, -t673, 0, t746, -t765, t762, pkin(6) * t762 + qJ(2) * t731 - t471 * t654, 0, t671, t673, 0, 0, 0, -t388, -t746, t765, -pkin(6) * t388 - t436 * t654 + t443 * t657, -t526 * t654 + t528 * t657, -t505 * t654 + t506 * t657, -t523 * t654 + t525 * t657, -t527 * t654 + t529 * t657, -t522 * t654 + t524 * t657, -t569 * t654 + t570 * t657, -pkin(6) * t452 - t344 * t654 + t353 * t657, -pkin(6) * t453 - t345 * t654 + t354 * t657, -pkin(6) * t482 - t393 * t654 + t394 * t657, -pkin(6) * t340 - t290 * t654 + t296 * t657, -t405 * t654 + t407 * t657, -t358 * t654 + t359 * t657, -t384 * t654 + t387 * t657, -t404 * t654 + t406 * t657, -t382 * t654 + t385 * t657, -t450 * t654 + t451 * t657, -pkin(6) * t325 - t261 * t654 + t265 * t657, -pkin(6) * t334 - t267 * t654 + t274 * t657, -pkin(6) * t308 - t250 * t654 + t252 * t657, -pkin(6) * t259 - t240 * t654 + t241 * t657, -t322 * t654 + t324 * t657, -t286 * t654 + t287 * t657, -t298 * t654 + t300 * t657, -t321 * t654 + t323 * t657, -t299 * t654 + t301 * t657, -t336 * t654 + t337 * t657, -pkin(6) * t269 - t233 * t654 + t236 * t657, -pkin(6) * t272 - t234 * t654 + t237 * t657, -pkin(6) * t262 - t231 * t654 + t232 * t657, -pkin(6) * t238 - t228 * t654 + t229 * t657; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t611, 0, t612, 0, t587, t667, t557, pkin(6) * t557, 0, 0, t673, 0, -t671, 0, t765, t746, t411, pkin(6) * t411 + qJ(2) * t732 + t471 * t657, 0, -t673, t671, 0, 0, 0, t389, -t765, -t746, pkin(6) * t389 + t436 * t657 + t443 * t654, t526 * t657 + t528 * t654, t505 * t657 + t506 * t654, t523 * t657 + t525 * t654, t527 * t657 + t529 * t654, t522 * t657 + t524 * t654, t569 * t657 + t570 * t654, pkin(6) * t454 + t344 * t657 + t353 * t654, pkin(6) * t455 + t345 * t657 + t354 * t654, pkin(6) * t483 + t393 * t657 + t394 * t654, pkin(6) * t341 + t290 * t657 + t296 * t654, t405 * t657 + t407 * t654, t358 * t657 + t359 * t654, t384 * t657 + t387 * t654, t404 * t657 + t406 * t654, t382 * t657 + t385 * t654, t450 * t657 + t451 * t654, pkin(6) * t326 + t261 * t657 + t265 * t654, pkin(6) * t335 + t267 * t657 + t274 * t654, pkin(6) * t309 + t250 * t657 + t252 * t654, pkin(6) * t260 + t240 * t657 + t241 * t654, t322 * t657 + t324 * t654, t286 * t657 + t287 * t654, t298 * t657 + t300 * t654, t321 * t657 + t323 * t654, t299 * t657 + t301 * t654, t336 * t657 + t337 * t654, pkin(6) * t270 + t233 * t657 + t236 * t654, pkin(6) * t273 + t234 * t657 + t237 * t654, pkin(6) * t263 + t231 * t657 + t232 * t654, pkin(6) * t239 + t228 * t657 + t229 * t654; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t618, t619, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t664, t662, 0, -pkin(1) * t477, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) - 0.2e1 * t644 - t664, -t662 + t689 + 0.2e1 * t693, pkin(1) * t460 - pkin(2) * t521 + qJ(3) * t520, (t606 - t682) * t656, -t604 * t656 - t607 * t653, -t623 * t653 + t714, (-t605 + t681) * t653, t621 * t656 - t717, 0, pkin(1) * t512 + qJ(3) * t604 - t564 * t743 + t710, pkin(1) * t513 + qJ(3) * t607 - t566 * t743 + t709, pkin(1) * t553 - qJ(3) * t613 + t610 * t743 - t432, pkin(1) * t399 + qJ(3) * t509 - t432 * t743, -t493 * t653 + t494 * t656, -t444 * t653 + t446 * t656, -t485 * t653 + t488 * t656, -t491 * t653 + t492 * t656, -t484 * t653 + t487 * t656, -t517 * t653 + t518 * t656, pkin(1) * t372 + qJ(3) * t500 - t653 * t377 + t656 * t401 - t402 * t743, pkin(1) * t383 + qJ(3) * t503 - t653 * t379 + t656 * t414 - t423 * t743, pkin(1) * t349 + qJ(3) * t498 - t653 * t310 + t656 * t319 - t375 * t743, pkin(1) * t282 + qJ(3) * t470 - qJ(5) * t739 - t288 * t743 - t653 * t320, -t396 * t653 + t398 * t656, -t346 * t653 + t347 * t656, -t363 * t653 + t365 * t656, -t395 * t653 + t397 * t656, -t364 * t653 + t366 * t656, -t419 * t653 + t420 * t656, pkin(1) * t292 + qJ(3) * t408 - t653 * t268 + t656 * t275 - t311 * t743, pkin(1) * t294 + qJ(3) * t412 - t653 * t271 + t656 * t276 - t314 * t743, pkin(1) * t284 + qJ(3) * t369 - t653 * t257 + t656 * t264 - t302 * t743, pkin(1) * t246 + qJ(3) * t280 - t653 * t245 + t656 * t248 - t253 * t743;];
tauB_reg  = t1;
