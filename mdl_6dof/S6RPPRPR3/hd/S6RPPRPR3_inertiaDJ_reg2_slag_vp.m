% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta2,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRPR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR3_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:44:58
% EndTime: 2019-03-09 01:45:01
% DurationCPUTime: 1.16s
% Computational Cost: add. (1580->133), mult. (2934->227), div. (0->0), fcn. (2696->8), ass. (0->89)
t45 = sin(pkin(10));
t49 = cos(qJ(4));
t90 = cos(pkin(10));
t75 = t90 * t49;
t47 = sin(qJ(4));
t87 = t47 * qJD(4);
t30 = -qJD(4) * t75 + t45 * t87;
t34 = t45 * t49 + t90 * t47;
t22 = t34 * t30;
t31 = t34 * qJD(4);
t35 = -t45 * t47 + t75;
t24 = t35 * t31;
t111 = 0.2e1 * t22 + 0.2e1 * t24;
t110 = (t30 * t45 + t90 * t31) * pkin(4);
t21 = t34 * t31;
t109 = t35 * t30 + t21;
t64 = -cos(pkin(9)) * pkin(1) - pkin(2) - pkin(7);
t61 = qJ(5) - t64;
t57 = t49 * t61;
t26 = -qJD(4) * t57 - t47 * qJD(5);
t53 = t49 * qJD(5) - t61 * t87;
t51 = t90 * t26 - t45 * t53;
t39 = sin(pkin(9)) * pkin(1) + qJ(3);
t36 = t47 * pkin(4) + t39;
t54 = t34 * pkin(5) - t35 * pkin(8) + t36;
t107 = -qJD(6) * t54 - t51;
t46 = sin(qJ(6));
t43 = t46 ^ 2;
t48 = cos(qJ(6));
t44 = t48 ^ 2;
t74 = qJD(6) * (t43 - t44);
t32 = t61 * t47;
t12 = -t90 * t32 - t45 * t57;
t86 = t49 * qJD(4);
t37 = pkin(4) * t86 + qJD(3);
t56 = -t30 * pkin(5) + t31 * pkin(8) + t37;
t89 = qJD(6) * t46;
t1 = t107 * t48 + t12 * t89 - t46 * t56;
t88 = qJD(6) * t48;
t2 = t107 * t46 - t12 * t88 + t48 * t56;
t3 = -t46 * t12 + t48 * t54;
t4 = t48 * t12 + t46 * t54;
t70 = t3 * t46 - t4 * t48;
t106 = t70 * qJD(6) + t1 * t46 - t2 * t48;
t33 = t35 ^ 2;
t104 = -0.2e1 * t22;
t103 = 0.2e1 * qJD(3);
t11 = -t45 * t32 + t90 * t57;
t7 = t45 * t26 + t90 * t53;
t102 = t11 * t7;
t101 = t7 * t46;
t100 = t7 * t48;
t42 = -t90 * pkin(4) - pkin(5);
t99 = t31 * t42;
t98 = t31 * t48;
t97 = t43 * t31;
t27 = t44 * t31;
t96 = t46 * t30;
t95 = t48 * t30;
t94 = -t48 * t21 - t35 * t95;
t92 = -t43 - t44;
t84 = t46 * t98;
t83 = 0.2e1 * qJD(6) * t42;
t82 = t39 * t103;
t81 = t35 * t89;
t80 = t46 * t88;
t79 = t47 * t86;
t78 = t34 ^ 2 + t33;
t77 = t92 * t30;
t41 = t45 * pkin(4) + pkin(8);
t76 = t92 * t41;
t73 = t33 * t80;
t71 = t3 * t48 + t4 * t46;
t69 = -t11 * t30 + t7 * t34;
t68 = t11 * t31 - t7 * t35;
t66 = t30 * t41 - t99;
t65 = t34 * t41 - t35 * t42;
t15 = t34 * t88 - t96;
t63 = -t31 * t46 + t35 * t88;
t14 = t81 + t98;
t58 = qJD(4) * t64;
t55 = -t71 * qJD(6) - t1 * t48 - t2 * t46;
t50 = -t12 * t30 + t51 * t34 + t68;
t18 = t35 * t27;
t17 = t35 * t97;
t13 = t34 * t89 + t95;
t10 = t27 + t97;
t5 = t35 * t74 + t84;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, t82, -0.2e1 * t79, 0.2e1 * (t47 ^ 2 - t49 ^ 2) * qJD(4), 0, 0.2e1 * t79, 0, 0, 0.2e1 * qJD(3) * t47 + 0.2e1 * t39 * t86, 0.2e1 * qJD(3) * t49 - 0.2e1 * t39 * t87, 0, t82, -0.2e1 * t24, 0.2e1 * t109, 0, t104, 0, 0, -0.2e1 * t36 * t30 + 0.2e1 * t37 * t34, -0.2e1 * t36 * t31 + 0.2e1 * t37 * t35, -0.2e1 * t50, 0.2e1 * t12 * t51 + 0.2e1 * t36 * t37 + 0.2e1 * t102, -0.2e1 * t18 - 0.2e1 * t73, 0.2e1 * t33 * t74 + 0.4e1 * t35 * t84, -0.2e1 * t34 * t81 + 0.2e1 * t94, -0.2e1 * t17 + 0.2e1 * t73, -0.2e1 * t63 * t34 + 0.2e1 * t35 * t96, t104, 0.2e1 * t35 * t101 + 0.2e1 * t63 * t11 + 0.2e1 * t2 * t34 - 0.2e1 * t3 * t30, 0.2e1 * t1 * t34 + 0.2e1 * t35 * t100 - 0.2e1 * t14 * t11 + 0.2e1 * t4 * t30, 0.2e1 * t106 * t35 + 0.2e1 * t71 * t31, -0.2e1 * t4 * t1 + 0.2e1 * t3 * t2 + 0.2e1 * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12 * t31 + t51 * t35 + t69, 0, 0, 0, 0, 0, 0, 0, t109 * t48 + t94, 0, t70 * t31 + t55 * t35 + t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t18 - 0.2e1 * t17 - 0.2e1 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, t50, 0, 0, 0, 0, 0, 0, t111 * t46 - t78 * t88, t111 * t48 + t78 * t89, 0, t70 * t30 + t55 * t34 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109 * (0.1e1 + t92); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t34 * t77 - 0.2e1 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, 0, -t86, 0, -t47 * t58, -t49 * t58, 0, 0, 0, 0, -t31, 0, t30, 0, -t7, -t51, t110 (t51 * t45 - t7 * t90) * pkin(4), -t5, -0.4e1 * t35 * t80 - t27 + t97, t15, t5, -t13, 0, -t100 + t66 * t46 + (t11 * t46 - t65 * t48) * qJD(6), t101 + t66 * t48 + (t11 * t48 + t65 * t46) * qJD(6), t55, t55 * t41 + t7 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, t87, 0, 0, 0, 0, 0, 0, 0, 0, t30, t31, 0 (t90 * t30 - t31 * t45) * pkin(4), 0, 0, 0, 0, 0, 0, t13, t15, -t10, -t30 * t42 + t31 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t86, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t30, 0, -t110, 0, 0, 0, 0, 0, 0, -t14, -t63, t77, t30 * t76 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t80, -0.2e1 * t74, 0, -0.2e1 * t80, 0, 0, t46 * t83, t48 * t83, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, -t31, 0, t37, 0, 0, 0, 0, 0, 0, -t13, -t15, t10, -t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, 0, -t63, -t30, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, -t89, 0, -t41 * t88, t41 * t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, -t88, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t6;
