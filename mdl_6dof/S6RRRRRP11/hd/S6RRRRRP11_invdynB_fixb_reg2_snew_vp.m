% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 07:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRP11_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 07:10:03
% EndTime: 2019-05-08 07:12:38
% DurationCPUTime: 103.66s
% Computational Cost: add. (1121573->1110), mult. (2772395->1779), div. (0->0), fcn. (2354788->14), ass. (0->839)
t1269 = sin(qJ(5));
t1268 = cos(pkin(6));
t1503 = qJD(1) * t1268;
t1257 = qJD(2) + t1503;
t1271 = sin(qJ(3));
t1272 = sin(qJ(2));
t1276 = cos(qJ(3));
t1267 = cos(pkin(7));
t1277 = cos(qJ(2));
t1468 = t1267 * t1277;
t1265 = sin(pkin(7));
t1474 = t1265 * t1271;
t1266 = sin(pkin(6));
t1504 = qJD(1) * t1266;
t1214 = t1257 * t1474 + (t1271 * t1468 + t1272 * t1276) * t1504;
t1471 = t1266 * t1277;
t1447 = qJD(1) * t1471;
t1432 = t1265 * t1447;
t1231 = t1257 * t1267 + qJD(3) - t1432;
t1270 = sin(qJ(4));
t1275 = cos(qJ(4));
t1194 = t1214 * t1275 + t1231 * t1270;
t1274 = cos(qJ(5));
t1433 = t1267 * t1447;
t1472 = t1266 * t1272;
t1448 = qJD(1) * t1472;
t1473 = t1265 * t1276;
t1212 = -t1257 * t1473 + t1271 * t1448 - t1276 * t1433;
t1308 = qJD(4) + t1212;
t1158 = t1194 * t1269 - t1274 * t1308;
t1160 = t1194 * t1274 + t1269 * t1308;
t1105 = t1160 * t1158;
t1461 = qJDD(1) * t1266;
t1235 = -qJD(2) * t1448 + t1277 * t1461;
t1434 = qJDD(1) * t1268 + qJDD(2);
t1349 = t1265 * t1434;
t1302 = t1267 * t1235 + t1349;
t1460 = qJDD(1) * t1272;
t1501 = qJD(1) * t1277;
t1338 = qJD(2) * t1501 + t1460;
t1307 = t1338 * t1266;
t1286 = t1271 * t1302 + t1276 * t1307;
t1172 = -t1212 * qJD(3) + t1286;
t1218 = -t1265 * t1235 + t1267 * t1434 + qJDD(3);
t1435 = t1270 * t1172 - t1218 * t1275;
t1112 = -t1194 * qJD(4) - t1435;
t1111 = qJDD(5) - t1112;
t1437 = -t1111 + t1105;
t1495 = t1437 * t1269;
t1494 = t1437 * t1274;
t1256 = t1257 ^ 2;
t1273 = sin(qJ(1));
t1278 = cos(qJ(1));
t1253 = t1273 * g(1) - g(2) * t1278;
t1347 = qJDD(1) * pkin(1) + t1253;
t1317 = t1268 * t1347;
t1523 = pkin(10) * t1265;
t1459 = t1272 * t1523;
t1330 = (-pkin(2) * t1277 - t1459) * t1266;
t1254 = g(1) * t1278 + g(2) * t1273;
t1542 = qJD(1) ^ 2;
t1521 = t1542 * pkin(1);
t1332 = t1254 + t1521;
t1391 = t1434 * pkin(2);
t1522 = pkin(10) * t1267;
t1456 = -pkin(9) - t1522;
t1524 = pkin(9) * t1268;
t1282 = t1256 * t1523 + t1272 * t1332 + t1277 * t1317 + t1391 + (((-t1272 * t1330 + t1277 * t1524) * qJD(1) + (-qJD(2) + t1257) * pkin(10) * t1468) * qJD(1) - t1277 * g(3) + t1456 * t1460) * t1266;
t1263 = t1272 ^ 2;
t1264 = t1277 ^ 2;
t1462 = t1263 + t1264;
t1465 = qJD(2) + t1257;
t1476 = t1257 * t1272;
t1519 = t1268 * g(3);
t1520 = t1235 * pkin(2);
t1284 = -t1520 - t1519 + ((-pkin(1) - t1459) * qJDD(1) + (pkin(2) * t1476 - pkin(9) * t1504 + (-t1465 * t1277 * t1265 - t1267 * t1462 * t1504) * pkin(10)) * qJD(1) - t1253) * t1266;
t1091 = t1265 * t1282 - t1267 * t1284;
t1548 = t1437 * pkin(5);
t1192 = t1214 * t1270 - t1231 * t1275;
t1146 = t1194 * t1192;
t1469 = t1267 * t1276;
t1292 = -t1235 * t1469 + t1271 * t1307 - t1276 * t1349;
t1291 = t1214 * qJD(3) + t1292;
t1290 = qJDD(4) + t1291;
t1544 = -t1146 + t1290;
t1551 = t1270 * t1544;
t1550 = t1275 * t1544;
t1549 = t1265 * t1284 + t1267 * t1282;
t1167 = t1308 * t1192;
t1439 = qJD(4) * t1192 - t1172 * t1275 - t1218 * t1270;
t1085 = t1439 + t1167;
t1305 = t1308 ^ 2;
t1485 = t1212 * t1214;
t1311 = t1218 - t1485;
t1547 = t1271 * t1311;
t1546 = t1276 * t1311;
t1047 = -t1158 * qJD(5) + t1269 * t1290 - t1274 * t1439;
t1189 = qJD(5) + t1192;
t1120 = t1189 * t1158;
t1545 = -t1120 + t1047;
t1197 = t1231 * t1212;
t1135 = -t1197 + t1172;
t1436 = -t1269 * t1439 - t1274 * t1290;
t1017 = (qJD(5) - t1189) * t1160 + t1436;
t1155 = t1158 ^ 2;
t1156 = t1160 ^ 2;
t1188 = t1189 ^ 2;
t1190 = t1192 ^ 2;
t1191 = t1194 ^ 2;
t1208 = t1212 ^ 2;
t1209 = t1214 ^ 2;
t1541 = t1231 ^ 2;
t1262 = t1266 ^ 2;
t1089 = -t1188 - t1155;
t992 = t1089 * t1269 - t1494;
t1540 = pkin(4) * t992;
t1095 = -t1156 - t1188;
t1041 = t1105 + t1111;
t1497 = t1041 * t1269;
t998 = t1095 * t1274 - t1497;
t1539 = pkin(4) * t998;
t1072 = -t1155 - t1156;
t1021 = -t1120 - t1047;
t951 = -t1017 * t1274 - t1021 * t1269;
t906 = t1072 * t1270 + t1275 * t951;
t949 = -t1017 * t1269 + t1021 * t1274;
t1418 = t1271 * t906 - t1276 * t949;
t905 = -t1072 * t1275 + t1270 * t951;
t816 = -t1265 * t905 + t1267 * t1418;
t857 = t1271 * t949 + t1276 * t906;
t1405 = t1272 * t857 + t1277 * t816;
t815 = t1265 * t1418 + t1267 * t905;
t724 = -t1266 * t815 + t1268 * t1405;
t761 = -t1272 * t816 + t1277 * t857;
t689 = t1273 * t761 + t1278 * t724;
t1538 = pkin(8) * t689;
t1016 = (qJD(5) + t1189) * t1160 + t1436;
t993 = t1089 * t1274 + t1495;
t926 = t1016 * t1270 + t1275 * t993;
t1416 = t1271 * t926 - t1276 * t992;
t925 = -t1016 * t1275 + t1270 * t993;
t836 = -t1265 * t925 + t1267 * t1416;
t879 = t1271 * t992 + t1276 * t926;
t1403 = t1272 * t879 + t1277 * t836;
t835 = t1265 * t1416 + t1267 * t925;
t745 = -t1266 * t835 + t1268 * t1403;
t790 = -t1272 * t836 + t1277 * t879;
t705 = t1273 * t790 + t1278 * t745;
t1537 = pkin(8) * t705;
t1496 = t1041 * t1274;
t999 = -t1095 * t1269 - t1496;
t932 = t1270 * t1545 + t1275 * t999;
t1415 = t1271 * t932 - t1276 * t998;
t931 = t1270 * t999 - t1275 * t1545;
t839 = -t1265 * t931 + t1267 * t1415;
t887 = t1271 * t998 + t1276 * t932;
t1402 = t1272 * t887 + t1277 * t839;
t838 = t1265 * t1415 + t1267 * t931;
t749 = -t1266 * t838 + t1268 * t1402;
t795 = -t1272 * t839 + t1277 * t887;
t709 = t1273 * t795 + t1278 * t749;
t1536 = pkin(8) * t709;
t1535 = pkin(11) * t905;
t1534 = pkin(11) * t925;
t1533 = pkin(11) * t931;
t1532 = pkin(12) * t949;
t1531 = pkin(12) * t992;
t1530 = pkin(12) * t998;
t1529 = pkin(3) * t1271;
t1528 = pkin(3) * t1276;
t1527 = pkin(4) * t1270;
t1526 = pkin(4) * t1275;
t1525 = pkin(9) * t1266;
t1518 = pkin(1) * t724 + t1525 * t761;
t1517 = pkin(1) * t745 + t1525 * t790;
t1516 = pkin(1) * t749 + t1525 * t795;
t1515 = pkin(2) * t816 + t1523 * t857;
t1514 = pkin(2) * t836 + t1523 * t879;
t1513 = pkin(2) * t839 + t1523 * t887;
t1512 = -pkin(3) * t949 + pkin(11) * t906;
t1144 = pkin(4) * t1192 - pkin(12) * t1194;
t1183 = pkin(3) * t1212 - pkin(11) * t1214;
t1258 = g(3) * t1472;
t1309 = pkin(9) * t1461 - t1254;
t1467 = t1268 * t1272;
t1143 = t1277 * t1309 + t1272 * t1317 - t1258 - pkin(2) * t1256 + t1302 * pkin(10) + (-pkin(1) * t1501 + (t1476 * t1522 + (pkin(9) * t1467 + t1277 * t1330) * qJD(1)) * t1266) * qJD(1);
t1466 = t1276 * t1143;
t1025 = -t1541 * pkin(3) + t1218 * pkin(11) - t1212 * t1183 + t1271 * t1549 + t1466;
t1482 = t1231 * t1214;
t1280 = -t1135 * pkin(11) + (t1291 + t1482) * pkin(3) - t1091;
t954 = t1025 * t1275 + t1270 * t1280;
t912 = -pkin(4) * t1305 + pkin(12) * t1290 - t1192 * t1144 + t954;
t1048 = t1271 * t1143 - t1276 * t1549;
t1024 = -pkin(3) * t1218 - pkin(11) * t1541 + t1214 * t1183 + t1048;
t1299 = t1308 * t1194;
t944 = t1085 * pkin(12) + (-t1112 + t1299) * pkin(4) + t1024;
t859 = t1269 * t944 + t1274 * t912;
t1511 = -pkin(3) * t992 + pkin(11) * t926;
t1510 = -pkin(3) * t998 + pkin(11) * t932;
t1509 = -t1269 * t912 + t1274 * t944;
t1457 = qJ(6) * t1047 - t1509;
t1334 = -qJ(6) * t1120 - t1457;
t1500 = qJD(6) * t1160;
t825 = t1334 - 0.2e1 * t1500 - t1548;
t1508 = t1269 * t825;
t953 = t1025 * t1270 - t1275 * t1280;
t911 = -pkin(4) * t1290 - pkin(12) * t1305 + t1144 * t1194 + t953;
t1507 = t1269 * t911;
t1506 = t1274 * t825;
t1505 = t1274 * t911;
t1502 = qJD(1) * t1272;
t1499 = t1024 * t1270;
t1498 = t1024 * t1275;
t1493 = t1091 * t1271;
t1492 = t1091 * t1276;
t1101 = t1146 + t1290;
t1491 = t1101 * t1270;
t1490 = t1101 * t1275;
t1162 = -t1218 - t1485;
t1489 = t1162 * t1271;
t1488 = t1162 * t1276;
t1487 = t1189 * t1269;
t1486 = t1189 * t1274;
t1300 = t1525 * t1542 + t1347;
t1225 = t1266 * t1300 + t1519;
t1484 = t1225 * t1272;
t1483 = t1225 * t1277;
t1440 = t1272 * t1277 * t1542;
t1252 = t1262 * t1440;
t1233 = t1252 + t1434;
t1481 = t1233 * t1272;
t1480 = t1233 * t1277;
t1234 = -t1252 + t1434;
t1479 = t1234 * t1272;
t1478 = t1234 * t1277;
t1477 = t1257 * t1266;
t1475 = t1262 * t1542;
t1470 = t1267 * t1271;
t1464 = qJD(3) + t1231;
t723 = t1266 * t1405 + t1268 * t815;
t1455 = -pkin(1) * t723 + t1524 * t761;
t744 = t1266 * t1403 + t1268 * t835;
t1454 = -pkin(1) * t744 + t1524 * t790;
t748 = t1266 * t1402 + t1268 * t838;
t1453 = -pkin(1) * t748 + t1524 * t795;
t1452 = -pkin(2) * t815 + t1522 * t857;
t1451 = -pkin(2) * t835 + t1522 * t879;
t1450 = -pkin(2) * t838 + t1522 * t887;
t1449 = qJD(1) * t1477;
t1446 = t1263 * t1475;
t1445 = t1264 * t1475;
t1444 = t1270 * t1105;
t1443 = t1275 * t1105;
t1442 = t1271 * t1146;
t1441 = t1276 * t1146;
t866 = t1270 * t953 + t1275 * t954;
t1438 = -t1257 + t1503;
t1228 = -t1253 * t1273 - t1254 * t1278;
t1251 = qJDD(1) * t1278 - t1273 * t1542;
t1431 = -pkin(8) * t1251 - g(3) * t1273;
t1232 = -t1446 - t1256;
t1202 = -t1232 * t1272 - t1478;
t1430 = pkin(9) * t1202 - t1484;
t1239 = -t1256 - t1445;
t1206 = t1239 * t1277 - t1481;
t1429 = pkin(9) * t1206 + t1483;
t1171 = -t1541 - t1208;
t1110 = t1171 * t1276 - t1547;
t1428 = pkin(10) * t1110 + t1492;
t1178 = -t1209 - t1541;
t1116 = -t1178 * t1271 + t1488;
t1427 = pkin(10) * t1116 - t1493;
t786 = t1269 * t859 + t1274 * t1509;
t787 = -t1269 * t1509 + t1274 * t859;
t865 = t1270 * t954 - t1275 * t953;
t1046 = -qJD(5) * t1160 - t1436;
t1117 = pkin(5) * t1189 - qJ(6) * t1160;
t1333 = qJ(6) * t1046 - 0.2e1 * qJD(6) * t1158 - t1117 * t1189 + t859;
t809 = -qJ(6) * t1017 + (-t1072 - t1155) * pkin(5) + t1333;
t1153 = 0.2e1 * t1500;
t811 = t1153 + (-t1021 + t1120) * qJ(6) + t1548 + t1457;
t732 = -t1269 * t809 + t1274 * t811 - t1532;
t893 = -pkin(4) * t949 - pkin(5) * t1021;
t713 = -t1270 * t893 + t1275 * t732 - t1535;
t1335 = -pkin(3) * t905 + pkin(4) * t1072 - pkin(12) * t951;
t719 = -t1269 * t811 - t1274 * t809 + t1335;
t1426 = t1271 * t713 + t1276 * t719;
t800 = t1153 - t1334 - t1540 + 0.2e1 * t1548;
t867 = -pkin(5) * t1046 - qJ(6) * t1155 + t1117 * t1160 + qJDD(6) + t911;
t840 = -pkin(5) * t1016 + qJ(6) * t1089 - t867;
t812 = qJ(6) * t1494 - t1269 * t840 - t1531;
t729 = -t1270 * t800 + t1275 * t812 - t1534;
t1337 = -pkin(3) * t925 + pkin(4) * t1016 - pkin(12) * t993;
t772 = -qJ(6) * t1495 - t1274 * t840 + t1337;
t1425 = t1271 * t729 + t1276 * t772;
t810 = -t1539 + (-t1095 - t1155) * pkin(5) + t1333;
t863 = -qJ(6) * t1095 + t867;
t963 = -pkin(5) * t1545 - qJ(6) * t1041;
t813 = -t1269 * t963 + t1274 * t863 - t1530;
t733 = -t1270 * t810 + t1275 * t813 - t1533;
t1336 = -pkin(3) * t931 + pkin(4) * t1545 - pkin(12) * t999;
t773 = -t1269 * t863 - t1274 * t963 + t1336;
t1424 = t1271 * t733 + t1276 * t773;
t830 = -pkin(5) * t1155 + t1333;
t758 = t1274 * t830 - t1508;
t735 = t1270 * t867 + t1275 * t758;
t757 = t1269 * t830 + t1506;
t1423 = t1271 * t735 - t1276 * t757;
t768 = -t786 - t1532;
t740 = t1275 * t768 + t1527 * t949 - t1535;
t746 = t1335 - t787;
t1422 = t1271 * t740 + t1276 * t746;
t832 = -t1509 - t1540;
t874 = t1507 - t1531;
t762 = -t1270 * t832 + t1275 * t874 - t1534;
t818 = t1337 + t1505;
t1421 = t1271 * t762 + t1276 * t818;
t764 = t1270 * t911 + t1275 * t787;
t1420 = t1271 * t764 - t1276 * t786;
t833 = t859 - t1539;
t875 = t1505 - t1530;
t766 = -t1270 * t833 + t1275 * t875 - t1533;
t820 = t1336 - t1507;
t1419 = t1271 * t766 + t1276 * t820;
t1104 = -t1156 + t1155;
t950 = -t1016 * t1274 - t1269 * t1545;
t920 = -t1104 * t1270 + t1275 * t950;
t948 = t1016 * t1269 - t1274 * t1545;
t1417 = t1271 * t920 + t1276 * t948;
t703 = t1270 * t732 + t1275 * t893 + t1512;
t657 = -t1265 * t703 + t1267 * t1426 + t1452;
t1346 = (-t1265 * t815 - t1267 * t816) * pkin(10);
t663 = -t1271 * t719 + t1276 * t713 + t1346;
t1414 = t1272 * t663 + t1277 * t657;
t730 = t1270 * t768 - t1526 * t949 + t1512;
t662 = -t1265 * t730 + t1267 * t1422 + t1452;
t673 = -t1271 * t746 + t1276 * t740 + t1346;
t1413 = t1272 * t673 + t1277 * t662;
t720 = t1270 * t812 + t1275 * t800 + t1511;
t665 = -t1265 * t720 + t1267 * t1425 + t1451;
t1345 = (-t1265 * t835 - t1267 * t836) * pkin(10);
t676 = -t1271 * t772 + t1276 * t729 + t1345;
t1412 = t1272 * t676 + t1277 * t665;
t726 = t1270 * t813 + t1275 * t810 + t1510;
t667 = -t1265 * t726 + t1267 * t1424 + t1450;
t1344 = (-t1265 * t838 - t1267 * t839) * pkin(10);
t681 = -t1271 * t773 + t1276 * t733 + t1344;
t1411 = t1272 * t681 + t1277 * t667;
t734 = t1270 * t758 - t1275 * t867;
t672 = -t1265 * t734 + t1267 * t1423;
t696 = t1271 * t757 + t1276 * t735;
t1410 = t1272 * t696 + t1277 * t672;
t755 = t1270 * t874 + t1275 * t832 + t1511;
t675 = -t1265 * t755 + t1267 * t1421 + t1451;
t691 = -t1271 * t818 + t1276 * t762 + t1345;
t1409 = t1272 * t691 + t1277 * t675;
t756 = t1270 * t875 + t1275 * t833 + t1510;
t678 = -t1265 * t756 + t1267 * t1419 + t1450;
t695 = -t1271 * t820 + t1276 * t766 + t1344;
t1408 = t1272 * t695 + t1277 * t678;
t763 = t1270 * t787 - t1275 * t911;
t687 = -t1265 * t763 + t1267 * t1420;
t718 = t1271 * t786 + t1276 * t764;
t1407 = t1272 * t718 + t1277 * t687;
t1384 = -t1024 * t1276 + t1271 * t866;
t792 = -t1265 * t865 + t1267 * t1384;
t851 = t1024 * t1271 + t1276 * t866;
t1406 = t1272 * t851 + t1277 * t792;
t919 = t1104 * t1275 + t1270 * t950;
t822 = -t1265 * t919 + t1267 * t1417;
t862 = -t1271 * t948 + t1276 * t920;
t1404 = t1272 * t862 + t1277 * t822;
t1119 = -t1156 + t1188;
t1008 = -t1119 * t1274 + t1495;
t1010 = -t1119 * t1269 - t1494;
t940 = t1010 * t1275 - t1021 * t1270;
t1388 = t1008 * t1276 + t1271 * t940;
t938 = t1010 * t1270 + t1021 * t1275;
t846 = -t1265 * t938 + t1267 * t1388;
t891 = -t1008 * t1271 + t1276 * t940;
t1401 = t1272 * t891 + t1277 * t846;
t1118 = t1155 - t1188;
t1009 = -t1118 * t1269 - t1496;
t1011 = t1118 * t1274 - t1497;
t941 = t1011 * t1275 - t1017 * t1270;
t1387 = t1009 * t1276 + t1271 * t941;
t939 = t1011 * t1270 + t1017 * t1275;
t847 = -t1265 * t939 + t1267 * t1387;
t892 = -t1009 * t1271 + t1276 * t941;
t1400 = t1272 * t892 + t1277 * t847;
t1012 = -t1046 * t1274 - t1158 * t1487;
t1013 = -t1046 * t1269 + t1158 * t1486;
t982 = t1013 * t1275 - t1444;
t1386 = t1012 * t1276 + t1271 * t982;
t980 = t1013 * t1270 + t1443;
t871 = -t1265 * t980 + t1267 * t1386;
t917 = -t1012 * t1271 + t1276 * t982;
t1399 = t1272 * t917 + t1277 * t871;
t1014 = -t1047 * t1269 - t1160 * t1486;
t1015 = t1047 * t1274 - t1160 * t1487;
t983 = t1015 * t1275 + t1444;
t1385 = t1014 * t1276 + t1271 * t983;
t981 = t1015 * t1270 - t1443;
t872 = -t1265 * t981 + t1267 * t1385;
t918 = -t1014 * t1271 + t1276 * t983;
t1398 = t1272 * t918 + t1277 * t872;
t1061 = (-t1158 * t1274 + t1160 * t1269) * t1189;
t1028 = t1061 * t1270 - t1111 * t1275;
t1029 = t1061 * t1275 + t1111 * t1270;
t1060 = (t1158 * t1269 + t1160 * t1274) * t1189;
t1379 = t1029 * t1271 + t1060 * t1276;
t908 = -t1028 * t1265 + t1267 * t1379;
t973 = t1029 * t1276 - t1060 * t1271;
t1397 = t1272 * t973 + t1277 * t908;
t1080 = -t1194 * t1212 + t1435;
t1084 = -t1167 + t1439;
t1005 = -t1080 * t1270 + t1084 * t1275;
t1007 = -t1080 * t1275 - t1084 * t1270;
t1114 = t1190 + t1191;
t1380 = t1007 * t1271 + t1114 * t1276;
t916 = -t1005 * t1265 + t1267 * t1380;
t984 = t1007 * t1276 - t1114 * t1271;
t1396 = t1272 * t984 + t1277 * t916;
t1081 = (-0.2e1 * qJD(4) - t1212) * t1194 - t1435;
t1004 = t1081 * t1270 - t1085 * t1275;
t1006 = t1081 * t1275 + t1085 * t1270;
t1145 = -t1191 + t1190;
t1381 = t1006 * t1271 + t1145 * t1276;
t923 = -t1004 * t1265 + t1267 * t1381;
t989 = t1006 * t1276 - t1145 * t1271;
t1395 = t1272 * t989 + t1277 * t923;
t1124 = -t1305 - t1190;
t1052 = t1124 * t1270 + t1550;
t1053 = t1124 * t1275 - t1551;
t1375 = t1053 * t1271 + t1081 * t1276;
t956 = -t1052 * t1265 + t1267 * t1375;
t995 = t1053 * t1276 - t1081 * t1271;
t1394 = t1272 * t995 + t1277 * t956;
t1297 = t1268 * t1300;
t1314 = t1257 * t1265 + t1433;
t1301 = qJD(1) * t1314;
t1049 = t1466 + (t1267 * (-g(3) * t1471 + t1277 * t1297 + t1391) + t1265 * (-t1225 - t1520) + (t1267 * (-qJD(2) * t1433 + t1257 * t1314) + t1265 * (-qJD(2) * t1432 - t1301 * t1471)) * pkin(10) + (t1267 * t1332 + (pkin(2) * t1301 + (-pkin(10) * t1265 ^ 2 + t1267 * t1456) * qJDD(1)) * t1266) * t1272) * t1271;
t1376 = -t1048 * t1276 + t1049 * t1271;
t959 = t1091 * t1265 + t1267 * t1376;
t979 = t1048 * t1271 + t1049 * t1276;
t1393 = t1272 * t979 + t1277 * t959;
t1140 = -t1191 - t1305;
t1056 = t1140 * t1275 - t1491;
t1057 = -t1140 * t1270 - t1490;
t1373 = t1057 * t1271 + t1085 * t1276;
t961 = -t1056 * t1265 + t1267 * t1373;
t996 = t1057 * t1276 - t1085 * t1271;
t1392 = t1272 * t996 + t1277 * t961;
t1166 = -t1191 + t1305;
t1066 = -t1166 * t1270 + t1550;
t1002 = t1066 * t1276 - t1084 * t1271;
t1064 = t1166 * t1275 + t1551;
t1370 = t1066 * t1271 + t1084 * t1276;
t966 = -t1064 * t1265 + t1267 * t1370;
t1390 = t1002 * t1272 + t1277 * t966;
t1165 = t1190 - t1305;
t1067 = t1165 * t1275 - t1491;
t1003 = t1067 * t1276 - t1080 * t1271;
t1065 = t1165 * t1270 + t1490;
t1369 = t1067 * t1271 + t1080 * t1276;
t967 = -t1065 * t1265 + t1267 * t1369;
t1389 = t1003 * t1272 + t1277 * t967;
t1294 = t1275 * t1167;
t1077 = -t1112 * t1270 + t1294;
t1036 = t1077 * t1276 - t1442;
t1296 = t1270 * t1167;
t1076 = t1112 * t1275 + t1296;
t1340 = t1077 * t1271 + t1441;
t987 = -t1076 * t1265 + t1267 * t1340;
t1383 = t1036 * t1272 + t1277 * t987;
t1295 = t1270 * t1299;
t1079 = -t1275 * t1439 - t1295;
t1037 = t1079 * t1276 + t1442;
t1293 = t1275 * t1299;
t1078 = -t1270 * t1439 + t1293;
t1339 = t1079 * t1271 - t1441;
t988 = -t1078 * t1265 + t1267 * t1339;
t1382 = t1037 * t1272 + t1277 * t988;
t1106 = -t1296 - t1293;
t1107 = -t1294 + t1295;
t1287 = t1107 * t1271 - t1276 * t1290;
t1032 = -t1106 * t1265 + t1267 * t1287;
t1073 = t1276 * t1107 + t1271 * t1290;
t1378 = t1032 * t1277 + t1073 * t1272;
t1157 = -t1208 - t1209;
t1136 = t1197 + t1172;
t1288 = (-qJD(3) + t1231) * t1214 - t1292;
t1362 = -t1136 * t1276 + t1271 * t1288;
t1039 = -t1157 * t1265 + t1267 * t1362;
t1075 = t1136 * t1271 + t1276 * t1288;
t1377 = t1039 * t1277 + t1075 * t1272;
t1184 = t1209 - t1208;
t1131 = t1214 * t1464 + t1292;
t1363 = -t1131 * t1271 + t1135 * t1276;
t1055 = -t1184 * t1265 + t1267 * t1363;
t1074 = -t1131 * t1276 - t1135 * t1271;
t1374 = t1055 * t1277 + t1074 * t1272;
t1358 = t1171 * t1271 + t1546;
t1059 = -t1131 * t1265 + t1267 * t1358;
t1372 = t1059 * t1277 + t1110 * t1272;
t1134 = -t1212 * t1464 + t1286;
t1361 = t1178 * t1276 + t1489;
t1063 = -t1134 * t1265 + t1267 * t1361;
t1371 = t1063 * t1277 + t1116 * t1272;
t1196 = -t1209 + t1541;
t1359 = t1196 * t1276 + t1547;
t1070 = -t1136 * t1265 + t1267 * t1359;
t1122 = -t1196 * t1271 + t1546;
t1368 = t1070 * t1277 + t1122 * t1272;
t1195 = t1208 - t1541;
t1360 = t1195 * t1271 - t1488;
t1071 = -t1265 * t1288 + t1267 * t1360;
t1123 = t1195 * t1276 + t1489;
t1367 = t1071 * t1277 + t1123 * t1272;
t1289 = t1276 * t1291;
t1097 = -t1267 * t1289 + (t1214 * t1265 + t1231 * t1470) * t1212;
t1129 = t1197 * t1276 + t1271 * t1291;
t1366 = t1097 * t1277 + t1129 * t1272;
t1099 = t1172 * t1470 + (-t1212 * t1265 + t1231 * t1469) * t1214;
t1130 = t1172 * t1276 - t1271 * t1482;
t1365 = t1099 * t1277 + t1130 * t1272;
t1331 = t1231 * (-t1212 * t1271 - t1214 * t1276);
t1128 = -t1218 * t1265 + t1267 * t1331;
t1151 = (-t1212 * t1276 + t1214 * t1271) * t1231;
t1364 = t1128 * t1277 + t1151 * t1272;
t1298 = t1309 - t1521;
t1200 = t1272 * t1298 + (t1266 * g(3) - t1297) * t1277;
t1201 = t1272 * t1297 + t1277 * t1298 - t1258;
t1357 = -t1200 * t1277 + t1201 * t1272;
t1161 = t1200 * t1272 + t1201 * t1277;
t1243 = t1257 * t1447;
t1220 = t1243 + t1307;
t1242 = t1257 * t1448;
t1223 = t1235 - t1242;
t1356 = t1220 * t1277 + t1223 * t1272;
t1221 = -t1243 + t1307;
t1222 = t1235 + t1242;
t1355 = -t1221 * t1277 + t1222 * t1272;
t1354 = t1232 * t1277 - t1479;
t1237 = t1256 - t1446;
t1353 = t1237 * t1277 + t1481;
t1352 = t1239 * t1272 + t1480;
t1238 = -t1256 + t1445;
t1351 = t1238 * t1272 + t1478;
t1227 = t1253 * t1278 - t1254 * t1273;
t1348 = t1266 * t1434;
t1343 = (-t1266 * t723 - t1268 * t724) * pkin(9);
t1342 = (-t1266 * t744 - t1268 * t745) * pkin(9);
t1341 = (-t1266 * t748 - t1268 * t749) * pkin(9);
t780 = -pkin(5) * t867 + qJ(6) * t830;
t697 = -pkin(12) * t757 - qJ(6) * t1506 - t1269 * t780;
t721 = -pkin(4) * t757 - pkin(5) * t825;
t660 = -pkin(11) * t734 - t1270 * t721 + t1275 * t697;
t670 = -pkin(3) * t734 + pkin(4) * t867 - pkin(12) * t758 + qJ(6) * t1508 - t1274 * t780;
t1321 = pkin(10) * t696 + t1271 * t660 + t1276 * t670;
t658 = -pkin(3) * t757 + pkin(11) * t735 + t1270 * t697 + t1275 * t721;
t671 = t1265 * t1423 + t1267 * t734;
t629 = -pkin(2) * t671 - t1265 * t658 + t1267 * t1321;
t631 = -t1271 * t670 + t1276 * t660 + (-t1265 * t671 - t1267 * t672) * pkin(10);
t659 = -t1272 * t672 + t1277 * t696;
t1329 = pkin(9) * t659 + t1272 * t631 + t1277 * t629;
t692 = -pkin(11) * t763 + (-pkin(12) * t1275 + t1527) * t786;
t707 = -pkin(3) * t763 + pkin(4) * t911 - pkin(12) * t787;
t1320 = pkin(10) * t718 + t1271 * t692 + t1276 * t707;
t679 = pkin(11) * t764 + (-pkin(12) * t1270 - pkin(3) - t1526) * t786;
t686 = t1265 * t1420 + t1267 * t763;
t639 = -pkin(2) * t686 - t1265 * t679 + t1267 * t1320;
t649 = -t1271 * t707 + t1276 * t692 + (-t1265 * t686 - t1267 * t687) * pkin(10);
t668 = -t1272 * t687 + t1277 * t718;
t1328 = pkin(9) * t668 + t1272 * t649 + t1277 * t639;
t1303 = pkin(10) * t851 + (-pkin(11) * t1271 - t1528) * t865;
t791 = t1265 * t1384 + t1267 * t865;
t852 = -pkin(3) * t1024 + pkin(11) * t866;
t701 = -pkin(2) * t791 - t1265 * t852 + t1267 * t1303;
t702 = (-pkin(11) * t1276 + t1529) * t865 + (-t1265 * t791 - t1267 * t792) * pkin(10);
t750 = -t1272 * t792 + t1277 * t851;
t1327 = pkin(9) * t750 + t1272 * t702 + t1277 * t701;
t850 = -pkin(11) * t1005 - t865;
t1310 = pkin(10) * t984 - t1005 * t1528 + t1271 * t850;
t841 = pkin(3) * t1114 + pkin(11) * t1007 + t866;
t915 = t1005 * t1267 + t1265 * t1380;
t742 = -pkin(2) * t915 - t1265 * t841 + t1267 * t1310;
t769 = t1005 * t1529 + t1276 * t850 + (-t1265 * t915 - t1267 * t916) * pkin(10);
t868 = -t1272 * t916 + t1277 * t984;
t1326 = pkin(9) * t868 + t1272 * t769 + t1277 * t742;
t900 = -pkin(3) * t1052 + t953;
t969 = -pkin(11) * t1052 + t1499;
t1319 = pkin(10) * t995 + t1271 * t969 + t1276 * t900;
t927 = pkin(3) * t1081 + pkin(11) * t1053 - t1498;
t955 = t1052 * t1267 + t1265 * t1375;
t782 = -pkin(2) * t955 - t1265 * t927 + t1267 * t1319;
t805 = -t1271 * t900 + t1276 * t969 + (-t1265 * t955 - t1267 * t956) * pkin(10);
t890 = -t1272 * t956 + t1277 * t995;
t1325 = pkin(9) * t890 + t1272 * t805 + t1277 * t782;
t903 = -pkin(3) * t1056 + t954;
t972 = -pkin(11) * t1056 + t1498;
t1318 = pkin(10) * t996 + t1271 * t972 + t1276 * t903;
t933 = pkin(3) * t1085 + pkin(11) * t1057 + t1499;
t960 = t1056 * t1267 + t1265 * t1373;
t785 = -pkin(2) * t960 - t1265 * t933 + t1267 * t1318;
t806 = -t1271 * t903 + t1276 * t972 + (-t1265 * t960 - t1267 * t961) * pkin(10);
t894 = -t1272 * t961 + t1277 * t996;
t1324 = pkin(9) * t894 + t1272 * t806 + t1277 * t785;
t958 = -t1091 * t1267 + t1265 * t1376;
t873 = (-t1265 * t958 - t1267 * t959) * pkin(10);
t884 = -t1272 * t959 + t1277 * t979;
t885 = -pkin(2) * t958 + t1522 * t979;
t1323 = pkin(9) * t884 + t1272 * t873 + t1277 * t885;
t1038 = t1157 * t1267 + t1265 * t1362;
t895 = (-t1038 * t1265 - t1039 * t1267) * pkin(10) - t1376;
t1312 = pkin(10) * t1075 + t979;
t899 = -pkin(2) * t1038 + t1267 * t1312;
t990 = -t1039 * t1272 + t1075 * t1277;
t1322 = pkin(9) * t990 + t1272 * t895 + t1277 * t899;
t1023 = -t1059 * t1272 + t1110 * t1277;
t1058 = t1131 * t1267 + t1265 * t1358;
t929 = -pkin(2) * t1058 + t1048 * t1265 + t1267 * t1428;
t962 = -t1493 + (-t1058 * t1265 - t1059 * t1267) * pkin(10);
t1316 = pkin(9) * t1023 + t1272 * t962 + t1277 * t929;
t1030 = -t1063 * t1272 + t1116 * t1277;
t1062 = t1134 * t1267 + t1265 * t1361;
t935 = -pkin(2) * t1062 + t1049 * t1265 + t1267 * t1427;
t968 = -t1492 + (-t1062 * t1265 - t1063 * t1267) * pkin(10);
t1315 = pkin(9) * t1030 + t1272 * t968 + t1277 * t935;
t1185 = t1221 * t1272 + t1222 * t1277;
t1313 = pkin(9) * t1185 + t1161;
t1219 = (t1465 * t1501 + t1460) * t1266;
t1261 = t1266 * t1262;
t1250 = qJDD(1) * t1273 + t1278 * t1542;
t1241 = t1462 * t1475;
t1240 = (t1263 - t1264) * t1475;
t1236 = -pkin(8) * t1250 + g(3) * t1278;
t1224 = t1462 * t1449;
t1216 = (-qJD(1) * t1257 * t1263 + t1277 * t1338) * t1266;
t1215 = -t1235 * t1272 - t1264 * t1449;
t1205 = t1238 * t1277 - t1479;
t1204 = -t1237 * t1272 + t1480;
t1199 = t1219 * t1467 + t1261 * t1440;
t1198 = (t1235 * t1268 + (-qJD(1) * t1261 - t1268 * t1477) * t1502) * t1277;
t1186 = -t1220 * t1272 + t1223 * t1277;
t1182 = t1223 * t1266 + t1268 * t1352;
t1181 = -t1222 * t1266 + t1268 * t1351;
t1180 = -t1221 * t1266 + t1268 * t1353;
t1179 = -t1223 * t1268 + t1266 * t1352;
t1177 = -t1219 * t1266 + t1268 * t1354;
t1176 = t1219 * t1268 + t1266 * t1354;
t1175 = -t1240 * t1266 + t1268 * t1356;
t1174 = t1241 * t1266 + t1268 * t1355;
t1173 = -t1241 * t1268 + t1266 * t1355;
t1150 = -t1182 * t1273 + t1206 * t1278;
t1149 = t1182 * t1278 + t1206 * t1273;
t1142 = -t1177 * t1273 + t1202 * t1278;
t1141 = t1177 * t1278 + t1202 * t1273;
t1138 = t1225 * t1266 + t1268 * t1357;
t1137 = -t1225 * t1268 + t1266 * t1357;
t1127 = t1218 * t1267 + t1265 * t1331;
t1126 = -t1174 * t1273 + t1185 * t1278;
t1125 = t1174 * t1278 + t1185 * t1273;
t1115 = -t1484 + (-t1179 * t1266 - t1182 * t1268) * pkin(9);
t1109 = -t1483 + (-t1176 * t1266 - t1177 * t1268) * pkin(9);
t1108 = -pkin(1) * t1179 + t1200 * t1266 + t1268 * t1429;
t1103 = -pkin(1) * t1176 + t1201 * t1266 + t1268 * t1430;
t1098 = t1172 * t1474 + (t1212 * t1267 + t1231 * t1473) * t1214;
t1096 = -t1265 * t1289 + (-t1214 * t1267 + t1231 * t1474) * t1212;
t1094 = -pkin(1) * t1137 + t1161 * t1524;
t1093 = -t1138 * t1273 + t1161 * t1278;
t1092 = t1138 * t1278 + t1161 * t1273;
t1090 = -pkin(1) * t1173 + t1268 * t1313;
t1088 = -t1128 * t1272 + t1151 * t1277;
t1087 = (-t1137 * t1266 - t1138 * t1268) * pkin(9);
t1086 = (-t1173 * t1266 - t1174 * t1268) * pkin(9) - t1357;
t1069 = t1265 * t1360 + t1267 * t1288;
t1068 = t1136 * t1267 + t1265 * t1359;
t1054 = t1184 * t1267 + t1265 * t1363;
t1051 = -t1099 * t1272 + t1130 * t1277;
t1050 = -t1097 * t1272 + t1129 * t1277;
t1035 = -t1127 * t1266 + t1268 * t1364;
t1034 = -t1071 * t1272 + t1123 * t1277;
t1033 = -t1070 * t1272 + t1122 * t1277;
t1031 = t1106 * t1267 + t1265 * t1287;
t1001 = -t1098 * t1266 + t1268 * t1365;
t1000 = -t1096 * t1266 + t1268 * t1366;
t994 = -t1055 * t1272 + t1074 * t1277;
t986 = t1078 * t1267 + t1265 * t1339;
t985 = t1076 * t1267 + t1265 * t1340;
t978 = -t1032 * t1272 + t1073 * t1277;
t977 = -t1069 * t1266 + t1268 * t1367;
t976 = -t1068 * t1266 + t1268 * t1368;
t975 = -t1062 * t1266 + t1268 * t1371;
t974 = t1062 * t1268 + t1266 * t1371;
t971 = -t1058 * t1266 + t1268 * t1372;
t970 = t1058 * t1268 + t1266 * t1372;
t965 = t1065 * t1267 + t1265 * t1369;
t964 = t1064 * t1267 + t1265 * t1370;
t957 = -t1054 * t1266 + t1268 * t1374;
t946 = -t1038 * t1266 + t1268 * t1377;
t945 = t1038 * t1268 + t1266 * t1377;
t937 = t1037 * t1277 - t1272 * t988;
t936 = t1036 * t1277 - t1272 * t987;
t934 = pkin(2) * t1063 - t1049 * t1267 + t1265 * t1427;
t928 = pkin(2) * t1059 - t1048 * t1267 + t1265 * t1428;
t922 = t1004 * t1267 + t1265 * t1381;
t921 = -t1031 * t1266 + t1268 * t1378;
t914 = t1030 * t1278 - t1273 * t975;
t913 = t1030 * t1273 + t1278 * t975;
t907 = t1028 * t1267 + t1265 * t1379;
t902 = t1023 * t1278 - t1273 * t971;
t901 = t1023 * t1273 + t1278 * t971;
t898 = pkin(2) * t1039 + t1265 * t1312;
t897 = t1003 * t1277 - t1272 * t967;
t896 = t1002 * t1277 - t1272 * t966;
t889 = -t1273 * t946 + t1278 * t990;
t888 = t1273 * t990 + t1278 * t946;
t886 = pkin(2) * t959 + t1523 * t979;
t881 = -t1266 * t986 + t1268 * t1382;
t880 = -t1266 * t985 + t1268 * t1383;
t876 = -t1272 * t923 + t1277 * t989;
t870 = t1265 * t1385 + t1267 * t981;
t869 = t1265 * t1386 + t1267 * t980;
t864 = -t1272 * t908 + t1277 * t973;
t861 = -t1266 * t965 + t1268 * t1389;
t860 = -t1266 * t964 + t1268 * t1390;
t854 = -t1266 * t960 + t1268 * t1392;
t853 = t1266 * t1392 + t1268 * t960;
t849 = -t1266 * t955 + t1268 * t1394;
t848 = t1266 * t1394 + t1268 * t955;
t845 = t1265 * t1387 + t1267 * t939;
t844 = t1265 * t1388 + t1267 * t938;
t843 = -t1266 * t958 + t1268 * t1393;
t842 = t1266 * t1393 + t1268 * t958;
t831 = -t1266 * t922 + t1268 * t1395;
t829 = -t1272 * t872 + t1277 * t918;
t828 = -t1272 * t871 + t1277 * t917;
t827 = -t1266 * t915 + t1268 * t1396;
t826 = t1266 * t1396 + t1268 * t915;
t824 = -t1266 * t907 + t1268 * t1397;
t823 = t1266 * t1397 + t1268 * t907;
t821 = t1265 * t1417 + t1267 * t919;
t819 = -t1272 * t935 + t1277 * t968 + (-t1266 * t974 - t1268 * t975) * pkin(9);
t817 = -t1272 * t929 + t1277 * t962 + (-t1266 * t970 - t1268 * t971) * pkin(9);
t808 = -t1273 * t854 + t1278 * t894;
t807 = t1273 * t894 + t1278 * t854;
t804 = -t1273 * t849 + t1278 * t890;
t803 = t1273 * t890 + t1278 * t849;
t802 = -t1272 * t847 + t1277 * t892;
t801 = -t1272 * t846 + t1277 * t891;
t799 = -pkin(1) * t974 - t1266 * t934 + t1268 * t1315;
t798 = -t1273 * t843 + t1278 * t884;
t797 = t1273 * t884 + t1278 * t843;
t796 = -pkin(1) * t970 - t1266 * t928 + t1268 * t1316;
t784 = pkin(2) * t961 + t1265 * t1318 + t1267 * t933;
t783 = -t1272 * t899 + t1277 * t895 + (-t1266 * t945 - t1268 * t946) * pkin(9);
t781 = pkin(2) * t956 + t1265 * t1319 + t1267 * t927;
t779 = -t1266 * t870 + t1268 * t1398;
t778 = -t1266 * t869 + t1268 * t1399;
t777 = t1266 * t1398 + t1268 * t870;
t776 = t1266 * t1399 + t1268 * t869;
t775 = -t1273 * t827 + t1278 * t868;
t774 = t1273 * t868 + t1278 * t827;
t771 = -t1273 * t824 + t1278 * t864;
t770 = t1273 * t864 + t1278 * t824;
t767 = -t1272 * t822 + t1277 * t862;
t765 = -pkin(1) * t945 - t1266 * t898 + t1268 * t1322;
t754 = -t1266 * t845 + t1268 * t1400;
t753 = -t1266 * t844 + t1268 * t1401;
t752 = t1266 * t1400 + t1268 * t845;
t751 = t1266 * t1401 + t1268 * t844;
t741 = pkin(2) * t916 + t1265 * t1310 + t1267 * t841;
t739 = -t1273 * t779 + t1278 * t829;
t738 = -t1273 * t778 + t1278 * t828;
t737 = t1273 * t829 + t1278 * t779;
t736 = t1273 * t828 + t1278 * t778;
t731 = -t1272 * t885 + t1277 * t873 + (-t1266 * t842 - t1268 * t843) * pkin(9);
t728 = -t1266 * t821 + t1268 * t1404;
t727 = t1266 * t1404 + t1268 * t821;
t725 = -pkin(1) * t842 - t1266 * t886 + t1268 * t1323;
t717 = -t1273 * t754 + t1278 * t802;
t716 = -t1273 * t753 + t1278 * t801;
t715 = t1273 * t802 + t1278 * t754;
t714 = t1273 * t801 + t1278 * t753;
t712 = -t1266 * t791 + t1268 * t1406;
t711 = t1266 * t1406 + t1268 * t791;
t710 = -t1273 * t749 + t1278 * t795;
t708 = pkin(8) * t710;
t706 = -t1273 * t745 + t1278 * t790;
t704 = pkin(8) * t706;
t700 = pkin(2) * t792 + t1265 * t1303 + t1267 * t852;
t699 = -t1272 * t785 + t1277 * t806 + (-t1266 * t853 - t1268 * t854) * pkin(9);
t698 = -t1272 * t782 + t1277 * t805 + (-t1266 * t848 - t1268 * t849) * pkin(9);
t694 = -t1273 * t728 + t1278 * t767;
t693 = t1273 * t767 + t1278 * t728;
t690 = -t1273 * t724 + t1278 * t761;
t688 = pkin(8) * t690;
t685 = -pkin(1) * t853 - t1266 * t784 + t1268 * t1324;
t684 = -pkin(1) * t848 - t1266 * t781 + t1268 * t1325;
t683 = -t1273 * t712 + t1278 * t750;
t682 = t1273 * t750 + t1278 * t712;
t680 = -t1272 * t742 + t1277 * t769 + (-t1266 * t826 - t1268 * t827) * pkin(9);
t677 = t1265 * t1419 + t1267 * t756 + t1513;
t674 = t1265 * t1421 + t1267 * t755 + t1514;
t669 = -pkin(1) * t826 - t1266 * t741 + t1268 * t1326;
t666 = t1265 * t1424 + t1267 * t726 + t1513;
t664 = t1265 * t1425 + t1267 * t720 + t1514;
t661 = t1265 * t1422 + t1267 * t730 + t1515;
t656 = t1265 * t1426 + t1267 * t703 + t1515;
t655 = -t1266 * t686 + t1268 * t1407;
t654 = t1266 * t1407 + t1268 * t686;
t653 = -t1272 * t678 + t1277 * t695 + t1341;
t652 = -t1272 * t701 + t1277 * t702 + (-t1266 * t711 - t1268 * t712) * pkin(9);
t651 = -t1272 * t675 + t1277 * t691 + t1342;
t650 = -pkin(1) * t711 - t1266 * t700 + t1268 * t1327;
t648 = -t1266 * t671 + t1268 * t1410;
t647 = t1266 * t1410 + t1268 * t671;
t646 = -t1272 * t667 + t1277 * t681 + t1341;
t645 = -t1272 * t665 + t1277 * t676 + t1342;
t644 = -t1266 * t677 + t1268 * t1408 + t1453;
t643 = -t1266 * t674 + t1268 * t1409 + t1454;
t642 = -t1273 * t655 + t1278 * t668;
t641 = t1273 * t668 + t1278 * t655;
t640 = -t1272 * t662 + t1277 * t673 + t1343;
t638 = pkin(2) * t687 + t1265 * t1320 + t1267 * t679;
t637 = -t1266 * t666 + t1268 * t1411 + t1453;
t636 = -t1272 * t657 + t1277 * t663 + t1343;
t635 = -t1266 * t664 + t1268 * t1412 + t1454;
t634 = -t1266 * t661 + t1268 * t1413 + t1455;
t633 = -t1273 * t648 + t1278 * t659;
t632 = t1273 * t659 + t1278 * t648;
t630 = -t1266 * t656 + t1268 * t1414 + t1455;
t628 = pkin(2) * t672 + t1265 * t1321 + t1267 * t658;
t627 = -t1272 * t639 + t1277 * t649 + (-t1266 * t654 - t1268 * t655) * pkin(9);
t626 = -pkin(1) * t654 - t1266 * t638 + t1268 * t1328;
t625 = -t1272 * t629 + t1277 * t631 + (-t1266 * t647 - t1268 * t648) * pkin(9);
t624 = -pkin(1) * t647 - t1266 * t628 + t1268 * t1329;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1250, -t1251, 0, t1228, 0, 0, 0, 0, 0, 0, t1150, t1142, t1126, t1093, 0, 0, 0, 0, 0, 0, t902, t914, t889, t798, 0, 0, 0, 0, 0, 0, t804, t808, t775, t683, 0, 0, 0, 0, 0, 0, t706, t710, t690, t642, 0, 0, 0, 0, 0, 0, t706, t710, t690, t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1251, -t1250, 0, t1227, 0, 0, 0, 0, 0, 0, t1149, t1141, t1125, t1092, 0, 0, 0, 0, 0, 0, t901, t913, t888, t797, 0, 0, 0, 0, 0, 0, t803, t807, t774, t682, 0, 0, 0, 0, 0, 0, t705, t709, t689, t641, 0, 0, 0, 0, 0, 0, t705, t709, t689, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1179, t1176, t1173, t1137, 0, 0, 0, 0, 0, 0, t970, t974, t945, t842, 0, 0, 0, 0, 0, 0, t848, t853, t826, t711, 0, 0, 0, 0, 0, 0, t744, t748, t723, t654, 0, 0, 0, 0, 0, 0, t744, t748, t723, t647; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1251, 0, -t1250, 0, t1431, -t1236, -t1227, -pkin(8) * t1227, -t1199 * t1273 + t1216 * t1278, -t1175 * t1273 + t1186 * t1278, -t1180 * t1273 + t1204 * t1278, -t1198 * t1273 + t1215 * t1278, -t1181 * t1273 + t1205 * t1278, t1224 * t1278 + t1273 * t1348, -pkin(8) * t1149 - t1108 * t1273 + t1115 * t1278, -pkin(8) * t1141 - t1103 * t1273 + t1109 * t1278, -pkin(8) * t1125 + t1086 * t1278 - t1090 * t1273, -pkin(8) * t1092 + t1087 * t1278 - t1094 * t1273, -t1001 * t1273 + t1051 * t1278, -t1273 * t957 + t1278 * t994, t1033 * t1278 - t1273 * t976, -t1000 * t1273 + t1050 * t1278, t1034 * t1278 - t1273 * t977, -t1035 * t1273 + t1088 * t1278, -pkin(8) * t901 - t1273 * t796 + t1278 * t817, -pkin(8) * t913 - t1273 * t799 + t1278 * t819, -pkin(8) * t888 - t1273 * t765 + t1278 * t783, -pkin(8) * t797 - t1273 * t725 + t1278 * t731, -t1273 * t881 + t1278 * t937, -t1273 * t831 + t1278 * t876, -t1273 * t860 + t1278 * t896, -t1273 * t880 + t1278 * t936, -t1273 * t861 + t1278 * t897, -t1273 * t921 + t1278 * t978, -pkin(8) * t803 - t1273 * t684 + t1278 * t698, -pkin(8) * t807 - t1273 * t685 + t1278 * t699, -pkin(8) * t774 - t1273 * t669 + t1278 * t680, -pkin(8) * t682 - t1273 * t650 + t1278 * t652, t739, t694, t716, t738, t717, t771, -t1273 * t643 + t1278 * t651 - t1537, -t1273 * t644 + t1278 * t653 - t1536, -t1273 * t634 + t1278 * t640 - t1538, -pkin(8) * t641 - t1273 * t626 + t1278 * t627, t739, t694, t716, t738, t717, t771, -t1273 * t635 + t1278 * t645 - t1537, -t1273 * t637 + t1278 * t646 - t1536, -t1273 * t630 + t1278 * t636 - t1538, -pkin(8) * t632 - t1273 * t624 + t1278 * t625; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1250, 0, t1251, 0, t1236, t1431, t1228, pkin(8) * t1228, t1199 * t1278 + t1216 * t1273, t1175 * t1278 + t1186 * t1273, t1180 * t1278 + t1204 * t1273, t1198 * t1278 + t1215 * t1273, t1181 * t1278 + t1205 * t1273, t1224 * t1273 - t1278 * t1348, pkin(8) * t1150 + t1108 * t1278 + t1115 * t1273, pkin(8) * t1142 + t1103 * t1278 + t1109 * t1273, pkin(8) * t1126 + t1086 * t1273 + t1090 * t1278, pkin(8) * t1093 + t1087 * t1273 + t1094 * t1278, t1001 * t1278 + t1051 * t1273, t1273 * t994 + t1278 * t957, t1033 * t1273 + t1278 * t976, t1000 * t1278 + t1050 * t1273, t1034 * t1273 + t1278 * t977, t1035 * t1278 + t1088 * t1273, pkin(8) * t902 + t1273 * t817 + t1278 * t796, pkin(8) * t914 + t1273 * t819 + t1278 * t799, pkin(8) * t889 + t1273 * t783 + t1278 * t765, pkin(8) * t798 + t1273 * t731 + t1278 * t725, t1273 * t937 + t1278 * t881, t1273 * t876 + t1278 * t831, t1273 * t896 + t1278 * t860, t1273 * t936 + t1278 * t880, t1273 * t897 + t1278 * t861, t1273 * t978 + t1278 * t921, pkin(8) * t804 + t1273 * t698 + t1278 * t684, pkin(8) * t808 + t1273 * t699 + t1278 * t685, pkin(8) * t775 + t1273 * t680 + t1278 * t669, pkin(8) * t683 + t1273 * t652 + t1278 * t650, t737, t693, t714, t736, t715, t770, t1273 * t651 + t1278 * t643 + t704, t1273 * t653 + t1278 * t644 + t708, t1273 * t640 + t1278 * t634 + t688, pkin(8) * t642 + t1273 * t627 + t1278 * t626, t737, t693, t714, t736, t715, t770, t1273 * t645 + t1278 * t635 + t704, t1273 * t646 + t1278 * t637 + t708, t1273 * t636 + t1278 * t630 + t688, pkin(8) * t633 + t1273 * t625 + t1278 * t624; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1253, t1254, 0, 0, (t1460 + (qJD(2) - t1438) * t1501) * t1262 * t1272, t1240 * t1268 + t1266 * t1356, t1221 * t1268 + t1266 * t1353, (t1262 * t1438 * t1502 + t1235 * t1266) * t1277, t1222 * t1268 + t1266 * t1351, t1268 * t1434, pkin(1) * t1182 - t1200 * t1268 + t1266 * t1429, pkin(1) * t1177 - t1201 * t1268 + t1266 * t1430, pkin(1) * t1174 + t1266 * t1313, pkin(1) * t1138 + t1161 * t1525, t1098 * t1268 + t1266 * t1365, t1054 * t1268 + t1266 * t1374, t1068 * t1268 + t1266 * t1368, t1096 * t1268 + t1266 * t1366, t1069 * t1268 + t1266 * t1367, t1127 * t1268 + t1266 * t1364, pkin(1) * t971 + t1266 * t1316 + t1268 * t928, pkin(1) * t975 + t1266 * t1315 + t1268 * t934, pkin(1) * t946 + t1266 * t1322 + t1268 * t898, pkin(1) * t843 + t1266 * t1323 + t1268 * t886, t1266 * t1382 + t1268 * t986, t1266 * t1395 + t1268 * t922, t1266 * t1390 + t1268 * t964, t1266 * t1383 + t1268 * t985, t1266 * t1389 + t1268 * t965, t1031 * t1268 + t1266 * t1378, pkin(1) * t849 + t1266 * t1325 + t1268 * t781, pkin(1) * t854 + t1266 * t1324 + t1268 * t784, pkin(1) * t827 + t1266 * t1326 + t1268 * t741, pkin(1) * t712 + t1266 * t1327 + t1268 * t700, t777, t727, t751, t776, t752, t823, t1266 * t1409 + t1268 * t674 + t1517, t1266 * t1408 + t1268 * t677 + t1516, t1266 * t1413 + t1268 * t661 + t1518, pkin(1) * t655 + t1266 * t1328 + t1268 * t638, t777, t727, t751, t776, t752, t823, t1266 * t1412 + t1268 * t664 + t1517, t1266 * t1411 + t1268 * t666 + t1516, t1266 * t1414 + t1268 * t656 + t1518, pkin(1) * t648 + t1266 * t1329 + t1268 * t628;];
tauB_reg  = t1;
