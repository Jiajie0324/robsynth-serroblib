% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR4_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:05:54
% EndTime: 2019-03-09 07:06:04
% DurationCPUTime: 3.62s
% Computational Cost: add. (12883->247), mult. (27151->420), div. (0->0), fcn. (29671->10), ass. (0->149)
t99 = sin(qJ(6));
t95 = t99 ^ 2;
t101 = cos(qJ(6));
t96 = t101 ^ 2;
t184 = t95 + t96;
t100 = sin(qJ(5));
t197 = cos(qJ(4));
t173 = t197 * pkin(3);
t151 = t173 + pkin(4);
t196 = cos(qJ(5));
t130 = t196 * t151;
t163 = qJD(4) * t197;
t155 = pkin(3) * t163;
t194 = sin(qJ(4));
t162 = qJD(4) * t194;
t56 = -qJD(5) * t130 - t196 * t155 + (t194 * qJD(5) + t162) * t100 * pkin(3);
t212 = t184 * t56;
t150 = t194 * t196;
t211 = (qJD(4) + qJD(5)) * pkin(3) * (t197 * t100 + t150);
t195 = sin(qJ(3));
t198 = cos(qJ(3));
t97 = sin(pkin(11));
t98 = cos(pkin(11));
t127 = t195 * t97 - t198 * t98;
t116 = t194 * t127;
t129 = t195 * t98 + t198 * t97;
t58 = t197 * t129 - t116;
t185 = t95 - t96;
t203 = t185 * qJD(6);
t189 = pkin(7) + qJ(2);
t205 = t198 * t189;
t210 = -t195 * qJD(2) - qJD(3) * t205;
t206 = t195 * t189;
t209 = -t198 * qJD(2) + qJD(3) * t206;
t186 = t129 * qJD(3);
t208 = 0.2e1 * t186;
t117 = t194 * t129;
t118 = t197 * t127;
t110 = t117 + t118;
t108 = t196 * t110;
t39 = t100 * t58 + t108;
t109 = t100 * t110;
t40 = t196 * t58 - t109;
t89 = -t98 * pkin(2) - pkin(1);
t63 = t127 * pkin(3) + t89;
t43 = t110 * pkin(4) + t63;
t104 = -t39 * pkin(5) + t40 * pkin(10) - t43;
t103 = t101 * t104;
t111 = (-t195 * pkin(8) - t206) * t98 + (-t198 * pkin(8) - t205) * t97;
t48 = t197 * t111;
t60 = t205 * t98 - t206 * t97;
t50 = -t127 * pkin(8) + t60;
t31 = -t194 * t50 + t48;
t131 = -t58 * pkin(9) + t31;
t47 = t194 * t111;
t32 = t197 * t50 + t47;
t29 = -t110 * pkin(9) + t32;
t20 = t100 * t131 + t196 * t29;
t10 = -t99 * t20 - t103;
t11 = t101 * t20 - t99 * t104;
t204 = -t10 * t99 + t101 * t11;
t106 = t194 * t186 + qJD(4) * t117 - (-qJD(3) - qJD(4)) * t118;
t126 = -qJD(3) * t116 + qJD(4) * t58 + t197 * t186;
t177 = qJD(5) * t100;
t22 = qJD(5) * t108 + t100 * t126 + t196 * t106 + t58 * t177;
t161 = qJD(5) * t196;
t23 = -qJD(5) * t109 - t100 * t106 + t196 * t126 + t58 * t161;
t168 = t186 * pkin(3);
t30 = t126 * pkin(4) + t168;
t112 = t23 * pkin(5) + t22 * pkin(10) + t30;
t178 = qJD(6) * t99;
t123 = t127 * qJD(3);
t46 = t209 * t97 + t210 * t98;
t105 = pkin(8) * t123 + t46;
t45 = t209 * t98 - t210 * t97;
t107 = -t186 * pkin(8) - t45;
t25 = -qJD(4) * t47 + t197 * t105 - t194 * t107 - t50 * t163;
t102 = -t106 * pkin(9) - t25;
t121 = t196 * t131;
t24 = -qJD(4) * t48 - t194 * t105 - t197 * t107 + t50 * t162;
t16 = -t126 * pkin(9) - t24;
t6 = -qJD(5) * t121 + t100 * t102 - t196 * t16 + t29 * t177;
t2 = qJD(6) * t103 + t101 * t6 - t99 * t112 + t20 * t178;
t3 = -t11 * qJD(6) + t101 * t112 + t99 * t6;
t201 = -qJD(6) * t204 - t101 * t3 + t2 * t99;
t19 = t100 * t29 - t121;
t7 = t20 * qJD(5) + t100 * t16 + t196 * t102;
t200 = t19 * t7;
t5 = t7 * t99;
t92 = qJD(6) * t101;
t199 = t19 * t92 + t5;
t170 = pkin(4) * t177;
t57 = t170 + t211;
t192 = t19 * t57;
t191 = t40 * t22;
t190 = t99 * t23;
t172 = t194 * pkin(3);
t71 = -t100 * t172 + t130;
t68 = -pkin(5) - t71;
t188 = t57 * t99 + t68 * t92;
t153 = pkin(4) * t161;
t70 = t184 * t153;
t91 = -t196 * pkin(4) - pkin(5);
t187 = t99 * t170 + t91 * t92;
t72 = pkin(3) * t150 + t100 * t151;
t183 = qJD(5) * pkin(4);
t182 = t100 * t19;
t180 = t101 * t22;
t176 = 0.2e1 * t39 * t23;
t175 = pkin(5) * t178;
t174 = t99 * t180;
t171 = pkin(5) * t92;
t169 = t40 * t178;
t17 = t19 * t178;
t165 = t99 * t92;
t61 = t68 * t178;
t158 = -t101 * t57 + t61;
t157 = -0.2e1 * t170;
t38 = t40 ^ 2;
t156 = t38 * t165;
t154 = pkin(3) * t162;
t152 = 0.2e1 * (t97 ^ 2 + t98 ^ 2) * qJD(2);
t144 = -t19 * t22 + t40 * t7;
t143 = t22 * t39 - t23 * t40;
t142 = t39 * t56 + t40 * t57;
t69 = pkin(10) + t72;
t141 = t39 * t69 - t40 * t68;
t90 = t100 * pkin(4) + pkin(10);
t140 = t39 * t90 - t40 * t91;
t138 = t10 * t101 + t11 * t99;
t76 = t91 * t178;
t137 = -t101 * t170 + t76;
t134 = t169 + t180;
t133 = -t99 * t22 + t40 * t92;
t132 = -t101 * t23 + t39 * t178;
t14 = t39 * t92 + t190;
t128 = t184 * t196;
t125 = (t100 * t40 - t196 * t39) * qJD(5);
t122 = -t22 * t68 - t23 * t69 + t142;
t120 = -0.2e1 * t123;
t1 = -t138 * qJD(6) - t101 * t2 - t3 * t99;
t113 = pkin(4) * t125 - t22 * t91 - t23 * t90;
t85 = -0.2e1 * t165;
t84 = 0.2e1 * t165;
t75 = -0.2e1 * t203;
t59 = -t205 * t97 - t206 * t98;
t12 = t203 * t40 + t174;
t9 = -0.4e1 * t40 * t165 + t185 * t22;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, qJ(2) * t152, t129 * t120, 0.2e1 * t127 ^ 2 * qJD(3) - 0.2e1 * t129 * t186, 0, t127 * t208, 0, 0, t89 * t208, t89 * t120, -0.2e1 * t46 * t129 - 0.2e1 * t60 * t186 + 0.2e1 * (qJD(3) * t59 + t45) * t127, -0.2e1 * t45 * t60 + 0.2e1 * t46 * t59, -0.2e1 * t58 * t106, 0.2e1 * t106 * t110 - 0.2e1 * t58 * t126, 0, 0.2e1 * t110 * t126, 0, 0, 0.2e1 * t110 * t168 + 0.2e1 * t126 * t63, -0.2e1 * t106 * t63 + 0.2e1 * t168 * t58, 0.2e1 * t106 * t31 + 0.2e1 * t110 * t24 - 0.2e1 * t126 * t32 - 0.2e1 * t25 * t58, 0.2e1 * t168 * t63 - 0.2e1 * t32 * t24 + 0.2e1 * t31 * t25, -0.2e1 * t191, 0.2e1 * t143, 0, t176, 0, 0, 0.2e1 * t23 * t43 + 0.2e1 * t30 * t39, -0.2e1 * t22 * t43 + 0.2e1 * t30 * t40, -0.2e1 * t20 * t23 + 0.2e1 * t39 * t6 + 0.2e1 * t144, -0.2e1 * t20 * t6 + 0.2e1 * t30 * t43 + 0.2e1 * t200, -0.2e1 * t191 * t96 - 0.2e1 * t156, 0.4e1 * t174 * t40 + 0.2e1 * t203 * t38, -0.2e1 * t101 * t143 - 0.2e1 * t169 * t39, -0.2e1 * t191 * t95 + 0.2e1 * t156, -0.2e1 * t133 * t39 - 0.2e1 * t190 * t40, t176, 0.2e1 * t10 * t23 + 0.2e1 * t133 * t19 + 0.2e1 * t3 * t39 + 0.2e1 * t40 * t5, 0.2e1 * t101 * t144 - 0.2e1 * t11 * t23 - 0.2e1 * t17 * t40 + 0.2e1 * t2 * t39, 0.2e1 * t138 * t22 + 0.2e1 * t201 * t40, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186, -t123, 0, 0, 0, 0, 0, 0, 0, 0, t126, -t106, 0, t168, 0, 0, 0, 0, 0, 0, t23, -t22, 0, t30, 0, 0, 0, 0, 0, 0, -t132, -t14, t184 * t22, -t201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123, 0, -t186, 0, t46, t45, 0, 0, 0, 0, -t106, 0, -t126, 0, t25, t24, t106 * t173 - t110 * t155 - t126 * t172 + t154 * t58 (-t194 * t24 + t197 * t25 + (-t194 * t31 + t197 * t32) * qJD(4)) * pkin(3), 0, 0, -t22, 0, -t23, 0, -t7, t6, t22 * t71 - t23 * t72 + t142, -t20 * t56 - t6 * t72 - t7 * t71 + t192, -t12, t9, t14, t12, -t132, 0, t17 + (-qJD(6) * t141 - t7) * t101 + t122 * t99, t101 * t122 + t141 * t178 + t199, t1, t1 * t69 - t204 * t56 + t7 * t68 + t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t154, -0.2e1 * t155, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t57, 0.2e1 * t56, 0, -0.2e1 * t56 * t72 - 0.2e1 * t57 * t71, t84, t75, 0, t85, 0, 0, 0.2e1 * t158, 0.2e1 * t188, -0.2e1 * t212, -0.2e1 * t212 * t69 + 0.2e1 * t57 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, 0, -t126, 0, t25, t24, 0, 0, 0, 0, -t22, 0, -t23, 0, -t7, t6 (-t100 * t23 + t196 * t22 + t125) * pkin(4) (-t196 * t7 - t100 * t6 + (t196 * t20 + t182) * qJD(5)) * pkin(4), -t12, t9, t14, t12, -t132, 0, t17 + (-qJD(6) * t140 - t7) * t101 + t113 * t99, t101 * t113 + t140 * t178 + t199, t1, t7 * t91 + (t196 * t204 + t182) * t183 + t1 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t154, -t155, 0, 0, 0, 0, 0, 0, 0, 0, t157 - t211, -t153 + t56, 0 (-t196 * t57 - t100 * t56 + (-t100 * t71 + t196 * t72) * qJD(5)) * pkin(4), t84, t75, 0, t85, 0, 0, t61 + t76 + (-t57 - t170) * t101, t187 + t188, t70 - t212, t57 * t91 - t90 * t212 + (t100 * t68 + t128 * t69) * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157, -0.2e1 * t153, 0, 0, t84, t75, 0, t85, 0, 0, 0.2e1 * t137, 0.2e1 * t187, 0.2e1 * t70, 0.2e1 * (t100 * t91 + t128 * t90) * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t23, 0, -t7, t6, 0, 0, -t12, t9, t14, t12, -t132, 0, t17 + (pkin(5) * t22 - pkin(10) * t23) * t99 + (-t7 + (-pkin(5) * t40 - pkin(10) * t39) * qJD(6)) * t101, pkin(5) * t134 + pkin(10) * t132 + t199, t1, -t7 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57, t56, 0, 0, t84, t75, 0, t85, 0, 0, t158 - t175, -t171 + t188, -t212, -pkin(5) * t57 - pkin(10) * t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, -t153, 0, 0, t84, t75, 0, t85, 0, 0, t137 - t175, -t171 + t187, t70 (-pkin(5) * t100 + pkin(10) * t128) * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, t75, 0, t85, 0, 0, -0.2e1 * t175, -0.2e1 * t171, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134, 0, -t133, t23, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t178, -t92, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t178, 0, t99 * t56 - t69 * t92, t101 * t56 + t178 * t69, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t178, 0, -t153 * t99 - t90 * t92, -t101 * t153 + t178 * t90, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t178, 0, -pkin(10) * t92, pkin(10) * t178, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
