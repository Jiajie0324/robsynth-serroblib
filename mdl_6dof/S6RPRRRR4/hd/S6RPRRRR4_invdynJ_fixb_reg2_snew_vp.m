% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 03:17
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRRR4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 03:15:08
% EndTime: 2019-05-06 03:15:33
% DurationCPUTime: 14.94s
% Computational Cost: add. (123045->636), mult. (308924->943), div. (0->0), fcn. (253687->12), ass. (0->407)
t378 = qJD(1) ^ 2;
t372 = sin(qJ(1));
t464 = cos(qJ(1));
t386 = g(1) * t464 + t372 * g(2);
t476 = -t378 * pkin(1) + qJDD(1) * qJ(2) + (2 * qJD(1) * qJD(2)) - t386;
t368 = sin(qJ(6));
t366 = sin(pkin(11));
t367 = cos(pkin(11));
t371 = sin(qJ(3));
t376 = cos(qJ(3));
t344 = (t366 * t371 - t367 * t376) * qJD(1);
t387 = t366 * t376 + t367 * t371;
t346 = t387 * qJD(1);
t370 = sin(qJ(4));
t375 = cos(qJ(4));
t318 = -t344 * t375 - t370 * t346;
t319 = -t344 * t370 + t346 * t375;
t369 = sin(qJ(5));
t374 = cos(qJ(5));
t294 = t318 * t369 + t319 * t374;
t418 = t367 * qJDD(1);
t419 = t366 * qJDD(1);
t307 = -t371 * t419 + t376 * t418;
t425 = t346 * qJD(3);
t328 = t307 - t425;
t343 = t387 * qJDD(1);
t426 = qJD(3) * t344;
t330 = t343 - t426;
t401 = -t375 * t328 + t330 * t370;
t271 = -qJD(4) * t319 - t401;
t388 = t328 * t370 + t330 * t375;
t272 = qJD(4) * t318 + t388;
t402 = -t374 * t271 + t272 * t369;
t209 = -qJD(5) * t294 - t402;
t208 = qJDD(6) - t209;
t365 = qJD(3) + qJD(4);
t360 = qJD(5) + t365;
t373 = cos(qJ(6));
t276 = t294 * t368 - t373 * t360;
t278 = t294 * t373 + t360 * t368;
t234 = t278 * t276;
t475 = t208 - t234;
t484 = t368 * t475;
t292 = -t374 * t318 + t319 * t369;
t251 = t294 * t292;
t417 = qJDD(3) + qJDD(4);
t357 = qJDD(5) + t417;
t474 = -t251 + t357;
t483 = t369 * t474;
t300 = t318 * t319;
t473 = t300 + t417;
t482 = t370 * t473;
t332 = t346 * t344;
t471 = qJDD(3) - t332;
t481 = t371 * t471;
t480 = t373 * t475;
t479 = t374 * t474;
t478 = t375 * t473;
t477 = t376 * t471;
t406 = g(1) * t372 - t464 * g(2);
t393 = -qJDD(2) + t406;
t363 = t366 ^ 2;
t364 = t367 ^ 2;
t427 = t363 + t364;
t463 = pkin(2) * t367;
t323 = (pkin(7) * t427 + qJ(2)) * t378 + (pkin(1) + t463) * qJDD(1) + t393;
t341 = t344 ^ 2;
t391 = qJD(3) * pkin(3) - pkin(8) * t346;
t268 = pkin(3) * t328 + pkin(8) * t341 - t346 * t391 + t323;
t316 = t318 ^ 2;
t394 = pkin(4) * t365 - pkin(9) * t319;
t199 = pkin(4) * t271 + pkin(9) * t316 - t319 * t394 + t268;
t389 = t271 * t369 + t272 * t374;
t210 = -qJD(5) * t292 + t389;
t286 = t360 * t292;
t192 = t210 - t286;
t114 = -t192 * pkin(10) + (t294 * t360 - t209) * pkin(5) - t199;
t396 = -g(3) * t366 + t367 * t476;
t430 = t364 * t378;
t314 = -pkin(2) * t430 + pkin(7) * t418 + t396;
t457 = g(3) * t367;
t472 = -t457 + (-pkin(7) * qJDD(1) + t378 * t463 - t476) * t366;
t280 = t314 * t371 - t376 * t472;
t238 = (-t330 - t426) * pkin(8) + t471 * pkin(3) - t280;
t281 = t376 * t314 + t371 * t472;
t250 = -t341 * pkin(3) + t328 * pkin(8) - qJD(3) * t391 + t281;
t202 = t370 * t238 + t375 * t250;
t171 = -t316 * pkin(4) + t271 * pkin(9) - t365 * t394 + t202;
t201 = -t375 * t238 + t370 * t250;
t313 = t365 * t318;
t261 = t272 - t313;
t382 = pkin(4) * t473 - pkin(9) * t261 - t201;
t117 = t374 * t171 + t369 * t382;
t246 = pkin(5) * t292 - pkin(10) * t294;
t465 = t360 ^ 2;
t93 = -pkin(5) * t465 + t357 * pkin(10) - t292 * t246 + t117;
t65 = -t373 * t114 + t368 * t93;
t66 = t114 * t368 + t373 * t93;
t39 = t368 * t65 + t373 * t66;
t452 = qJDD(1) * pkin(1);
t453 = qJ(2) * t378;
t340 = t393 + t452 + t453;
t470 = qJ(2) * t430 + t363 * t453 - t340 - t452;
t288 = qJD(6) + t292;
t403 = t210 * t368 - t373 * t357;
t164 = (qJD(6) - t288) * t278 + t403;
t274 = t276 ^ 2;
t275 = t278 ^ 2;
t287 = t288 ^ 2;
t290 = t292 ^ 2;
t291 = t294 ^ 2;
t317 = t319 ^ 2;
t342 = t346 ^ 2;
t362 = t365 ^ 2;
t460 = pkin(5) * t369;
t116 = t171 * t369 - t374 * t382;
t92 = -t357 * pkin(5) - pkin(10) * t465 + t246 * t294 + t116;
t456 = -pkin(5) * t92 + pkin(10) * t39;
t87 = t368 * t92;
t69 = -t116 * t374 + t117 * t369;
t455 = t370 * t69;
t88 = t373 * t92;
t454 = t375 * t69;
t145 = -t201 * t375 + t202 * t370;
t451 = t145 * t371;
t450 = t145 * t376;
t179 = t208 + t234;
t449 = t179 * t368;
t448 = t179 * t373;
t447 = t199 * t369;
t446 = t199 * t374;
t231 = -t280 * t376 + t281 * t371;
t445 = t231 * t366;
t244 = t251 + t357;
t444 = t244 * t369;
t443 = t244 * t374;
t442 = t268 * t370;
t441 = t268 * t375;
t440 = t288 * t368;
t439 = t288 * t373;
t297 = -t300 + t417;
t438 = t297 * t370;
t437 = t297 * t375;
t436 = t323 * t371;
t435 = t323 * t376;
t325 = qJDD(3) + t332;
t434 = t325 * t371;
t433 = t325 * t376;
t432 = t360 * t369;
t431 = t360 * t374;
t429 = t365 * t370;
t428 = t365 * t375;
t424 = qJD(4) + t365;
t423 = qJD(5) + t360;
t421 = qJD(6) + t288;
t28 = t369 * t39 - t374 * t92;
t416 = pkin(4) * t28 + t456;
t228 = -t275 - t287;
t143 = -t228 * t368 - t448;
t390 = -t210 * t373 - t357 * t368;
t169 = t276 * t421 + t390;
t414 = pkin(5) * t169 + pkin(10) * t143 + t87;
t218 = -t287 - t274;
t140 = t218 * t373 - t484;
t165 = -t278 * t421 - t403;
t413 = pkin(5) * t165 + pkin(10) * t140 - t88;
t410 = t369 * t234;
t409 = t374 * t234;
t407 = -pkin(5) * t374 - pkin(4);
t70 = t116 * t369 + t374 * t117;
t146 = t201 * t370 + t375 * t202;
t232 = t280 * t371 + t376 * t281;
t400 = t366 * (t366 * t476 + t457) + t367 * t396;
t183 = -qJD(6) * t276 - t390;
t241 = t288 * t276;
t168 = t183 + t241;
t112 = -t164 * t373 + t168 * t368;
t217 = t274 + t275;
t399 = pkin(5) * t217 + pkin(10) * t112 + t39;
t100 = t143 * t369 + t169 * t374;
t398 = pkin(4) * t100 + t414;
t97 = t140 * t369 + t165 * t374;
t397 = pkin(4) * t97 + t413;
t83 = t112 * t369 + t217 * t374;
t395 = pkin(4) * t83 + t399;
t242 = -t465 - t290;
t204 = t242 * t369 + t479;
t392 = pkin(4) * t204 - t116;
t38 = t368 * t66 - t373 * t65;
t385 = (-qJD(5) + t360) * t294 - t402;
t384 = (-qJD(4) + t365) * t319 - t401;
t279 = -t291 - t465;
t222 = t279 * t374 - t444;
t381 = pkin(4) * t222 - t117;
t377 = qJD(3) ^ 2;
t359 = t364 * qJDD(1);
t358 = t363 * qJDD(1);
t348 = t427 * t378;
t336 = -t342 - t377;
t335 = -t342 + t377;
t334 = t341 - t377;
t329 = t343 - 0.2e1 * t426;
t327 = -t307 + 0.2e1 * t425;
t322 = -t377 - t341;
t312 = -t317 + t362;
t311 = t316 - t362;
t310 = -t317 - t362;
t308 = -t341 - t342;
t306 = -t336 * t371 - t433;
t305 = t336 * t376 - t434;
t304 = t307 * t376 + t343 * t371;
t303 = t307 * t371 - t343 * t376;
t302 = t322 * t376 - t481;
t301 = t322 * t371 + t477;
t299 = t317 - t316;
t295 = -t362 - t316;
t285 = -t291 + t465;
t284 = t290 - t465;
t283 = (t318 * t375 + t319 * t370) * t365;
t282 = (t318 * t370 - t319 * t375) * t365;
t270 = -t316 - t317;
t267 = t311 * t375 - t438;
t266 = -t312 * t370 + t478;
t265 = t311 * t370 + t437;
t264 = t312 * t375 + t482;
t263 = -t310 * t370 - t437;
t262 = t310 * t375 - t438;
t260 = t272 + t313;
t259 = t318 * t424 + t388;
t256 = t319 * t424 + t401;
t255 = t272 * t375 - t319 * t429;
t254 = t272 * t370 + t319 * t428;
t253 = -t271 * t370 - t318 * t428;
t252 = t271 * t375 - t318 * t429;
t249 = t291 - t290;
t248 = t295 * t375 - t482;
t247 = t295 * t370 + t478;
t240 = -t275 + t287;
t239 = t274 - t287;
t237 = (-t292 * t374 + t294 * t369) * t360;
t236 = (-t292 * t369 - t294 * t374) * t360;
t233 = t275 - t274;
t230 = -t290 - t291;
t229 = -pkin(8) * t262 - t441;
t227 = t284 * t374 - t444;
t226 = -t285 * t369 + t479;
t225 = t284 * t369 + t443;
t224 = t285 * t374 + t483;
t223 = -t279 * t369 - t443;
t220 = -t262 * t371 + t263 * t376;
t219 = t262 * t376 + t263 * t371;
t215 = -pkin(8) * t247 - t442;
t214 = t261 * t370 + t375 * t384;
t213 = -t256 * t375 - t260 * t370;
t212 = -t261 * t375 + t370 * t384;
t211 = -t256 * t370 + t260 * t375;
t207 = -t247 * t371 + t248 * t376;
t206 = t247 * t376 + t248 * t371;
t205 = t242 * t374 - t483;
t198 = (-t276 * t373 + t278 * t368) * t288;
t197 = (-t276 * t368 - t278 * t373) * t288;
t196 = -t236 * t370 + t237 * t375;
t195 = t236 * t375 + t237 * t370;
t194 = -t292 * t423 + t389;
t193 = t210 + t286;
t189 = t294 * t423 + t402;
t188 = t210 * t374 - t294 * t432;
t187 = t210 * t369 + t294 * t431;
t186 = -t209 * t369 + t292 * t431;
t185 = t209 * t374 + t292 * t432;
t184 = -pkin(3) * t259 + pkin(8) * t263 - t442;
t182 = -qJD(6) * t278 - t403;
t181 = -pkin(3) * t256 + pkin(8) * t248 + t441;
t177 = -t225 * t370 + t227 * t375;
t176 = -t224 * t370 + t226 * t375;
t175 = t225 * t375 + t227 * t370;
t174 = t224 * t375 + t226 * t370;
t173 = -t222 * t370 + t223 * t375;
t172 = t222 * t375 + t223 * t370;
t167 = t183 - t241;
t161 = t183 * t373 - t278 * t440;
t160 = t183 * t368 + t278 * t439;
t159 = -t182 * t368 + t276 * t439;
t158 = t182 * t373 + t276 * t440;
t157 = -pkin(9) * t222 - t446;
t156 = -t212 * t371 + t214 * t376;
t155 = t212 * t376 + t214 * t371;
t154 = t198 * t374 + t208 * t369;
t153 = t198 * t369 - t208 * t374;
t152 = t239 * t373 - t449;
t151 = -t240 * t368 + t480;
t150 = t239 * t368 + t448;
t149 = t240 * t373 + t484;
t148 = -t204 * t370 + t205 * t375;
t147 = t204 * t375 + t205 * t370;
t144 = -pkin(9) * t204 - t447;
t142 = t228 * t373 - t449;
t139 = t218 * t368 + t480;
t137 = t161 * t374 + t410;
t136 = t159 * t374 - t410;
t135 = t161 * t369 - t409;
t134 = t159 * t369 + t409;
t133 = t193 * t369 + t374 * t385;
t132 = -t189 * t374 - t192 * t369;
t131 = -t193 * t374 + t369 * t385;
t130 = -t189 * t369 + t192 * t374;
t129 = pkin(4) * t131;
t128 = -t187 * t370 + t188 * t375;
t127 = -t185 * t370 + t186 * t375;
t126 = t187 * t375 + t188 * t370;
t125 = t185 * t375 + t186 * t370;
t124 = pkin(3) * t268 + pkin(8) * t146;
t123 = -pkin(8) * t212 - t145;
t122 = -pkin(4) * t194 + pkin(9) * t223 - t447;
t121 = -t172 * t371 + t173 * t376;
t120 = t172 * t376 + t173 * t371;
t119 = -pkin(4) * t189 + pkin(9) * t205 + t446;
t118 = -pkin(3) * t270 + pkin(8) * t214 + t146;
t111 = t165 * t373 - t167 * t368;
t110 = -t164 * t368 - t168 * t373;
t109 = t165 * t368 + t167 * t373;
t107 = t152 * t374 - t164 * t369;
t106 = t151 * t374 + t168 * t369;
t105 = t152 * t369 + t164 * t374;
t104 = t151 * t369 - t168 * t374;
t103 = -t153 * t370 + t154 * t375;
t102 = t153 * t375 + t154 * t370;
t101 = t143 * t374 - t169 * t369;
t98 = t140 * t374 - t165 * t369;
t95 = t111 * t374 + t233 * t369;
t94 = t111 * t369 - t233 * t374;
t91 = -t147 * t371 + t148 * t376;
t90 = t147 * t376 + t148 * t371;
t86 = t146 * t376 - t451;
t85 = t146 * t371 + t450;
t84 = t112 * t374 - t217 * t369;
t81 = -t135 * t370 + t137 * t375;
t80 = -t134 * t370 + t136 * t375;
t79 = t135 * t375 + t137 * t370;
t78 = t134 * t375 + t136 * t370;
t77 = -t131 * t370 + t133 * t375;
t76 = -t130 * t370 + t132 * t375;
t75 = t131 * t375 + t133 * t370;
t74 = t130 * t375 + t132 * t370;
t73 = -pkin(10) * t142 + t88;
t72 = -pkin(10) * t139 + t87;
t71 = -pkin(8) * t172 - t122 * t370 + t157 * t375;
t68 = pkin(4) * t69;
t67 = -pkin(8) * t147 - t119 * t370 + t144 * t375;
t62 = -t105 * t370 + t107 * t375;
t61 = -t104 * t370 + t106 * t375;
t60 = t105 * t375 + t107 * t370;
t59 = t104 * t375 + t106 * t370;
t58 = -pkin(3) * t194 + pkin(8) * t173 + t122 * t375 + t157 * t370;
t57 = pkin(4) * t199 + pkin(9) * t70;
t56 = -t100 * t370 + t101 * t375;
t55 = t100 * t375 + t101 * t370;
t54 = -t370 * t97 + t375 * t98;
t53 = t370 * t98 + t375 * t97;
t52 = -t370 * t94 + t375 * t95;
t51 = t370 * t95 + t375 * t94;
t50 = -pkin(3) * t189 + pkin(8) * t148 + t119 * t375 + t144 * t370;
t49 = -t370 * t83 + t375 * t84;
t48 = t370 * t84 + t375 * t83;
t47 = -pkin(9) * t131 - t69;
t46 = -t371 * t75 + t376 * t77;
t45 = t371 * t77 + t376 * t75;
t44 = -pkin(5) * t142 + t66;
t43 = -pkin(4) * t230 + pkin(9) * t133 + t70;
t42 = -pkin(5) * t139 + t65;
t41 = t375 * t70 - t455;
t40 = t370 * t70 + t454;
t36 = -t371 * t55 + t376 * t56;
t35 = t371 * t56 + t376 * t55;
t34 = -t371 * t53 + t376 * t54;
t33 = t371 * t54 + t376 * t53;
t32 = -t371 * t48 + t376 * t49;
t31 = t371 * t49 + t376 * t48;
t30 = -pkin(10) * t110 - t38;
t29 = t369 * t92 + t374 * t39;
t26 = -pkin(9) * t100 - t369 * t44 + t374 * t73;
t25 = -pkin(9) * t97 - t369 * t42 + t374 * t72;
t24 = -pkin(4) * t142 + pkin(9) * t101 + t369 * t73 + t374 * t44;
t23 = -pkin(4) * t139 + pkin(9) * t98 + t369 * t72 + t374 * t42;
t22 = -pkin(8) * t75 - t370 * t43 + t375 * t47;
t21 = -pkin(3) * t230 + pkin(8) * t77 + t370 * t47 + t375 * t43;
t20 = -pkin(9) * t83 + t110 * t460 + t30 * t374;
t19 = -t371 * t40 + t376 * t41;
t18 = t371 * t41 + t376 * t40;
t17 = -pkin(8) * t40 - pkin(9) * t454 - t370 * t57;
t16 = pkin(3) * t199 + pkin(8) * t41 - pkin(9) * t455 + t375 * t57;
t15 = pkin(9) * t84 + t110 * t407 + t30 * t369;
t14 = -t28 * t370 + t29 * t375;
t13 = t28 * t375 + t29 * t370;
t12 = -pkin(9) * t28 + (-pkin(10) * t374 + t460) * t38;
t11 = -pkin(8) * t55 - t24 * t370 + t26 * t375;
t10 = -pkin(8) * t53 - t23 * t370 + t25 * t375;
t9 = -pkin(3) * t142 + pkin(8) * t56 + t24 * t375 + t26 * t370;
t8 = -pkin(3) * t139 + pkin(8) * t54 + t23 * t375 + t25 * t370;
t7 = pkin(9) * t29 + (-pkin(10) * t369 + t407) * t38;
t6 = -pkin(8) * t48 - t15 * t370 + t20 * t375;
t5 = -pkin(3) * t110 + pkin(8) * t49 + t15 * t375 + t20 * t370;
t4 = -t13 * t371 + t14 * t376;
t3 = t13 * t376 + t14 * t371;
t2 = -pkin(8) * t13 + t12 * t375 - t370 * t7;
t1 = -pkin(3) * t38 + pkin(8) * t14 + t12 * t370 + t375 * t7;
t27 = [0, 0, 0, 0, 0, qJDD(1), t406, t386, 0, 0, t358, 0.2e1 * t366 * t418, 0, t359, 0, 0, -t470 * t367, t470 * t366, pkin(1) * t348 + qJ(2) * (t359 + t358) + t400, pkin(1) * t340 + qJ(2) * t400, t366 * (t330 * t376 - t371 * t425) + t367 * (t330 * t371 + t376 * t425), t366 * (-t327 * t376 - t329 * t371) + t367 * (-t327 * t371 + t329 * t376), t366 * (-t335 * t371 + t477) + t367 * (t335 * t376 + t481), t366 * (-t328 * t371 + t376 * t426) + t367 * (t328 * t376 + t371 * t426), t366 * (t334 * t376 - t434) + t367 * (t334 * t371 + t433), (t366 * (-t344 * t376 + t346 * t371) + t367 * (-t344 * t371 - t346 * t376)) * qJD(3), t366 * (-pkin(7) * t301 - t436) + t367 * (-pkin(2) * t327 + pkin(7) * t302 + t435) - pkin(1) * t327 + qJ(2) * (-t301 * t366 + t302 * t367), t366 * (-pkin(7) * t305 - t435) + t367 * (-pkin(2) * t329 + pkin(7) * t306 - t436) - pkin(1) * t329 + qJ(2) * (-t305 * t366 + t306 * t367), t366 * (-pkin(7) * t303 - t231) + t367 * (-pkin(2) * t308 + pkin(7) * t304 + t232) - pkin(1) * t308 + qJ(2) * (-t303 * t366 + t304 * t367), -pkin(7) * t445 + t367 * (pkin(2) * t323 + pkin(7) * t232) + pkin(1) * t323 + qJ(2) * (t232 * t367 - t445), t366 * (-t254 * t371 + t255 * t376) + t367 * (t254 * t376 + t255 * t371), t366 * (-t211 * t371 + t213 * t376) + t367 * (t211 * t376 + t213 * t371), t366 * (-t264 * t371 + t266 * t376) + t367 * (t264 * t376 + t266 * t371), t366 * (-t252 * t371 + t253 * t376) + t367 * (t252 * t376 + t253 * t371), t366 * (-t265 * t371 + t267 * t376) + t367 * (t265 * t376 + t267 * t371), t366 * (-t282 * t371 + t283 * t376) + t367 * (t282 * t376 + t283 * t371), t366 * (-pkin(7) * t206 - t181 * t371 + t215 * t376) + t367 * (-pkin(2) * t256 + pkin(7) * t207 + t181 * t376 + t215 * t371) - pkin(1) * t256 + qJ(2) * (-t206 * t366 + t207 * t367), t366 * (-pkin(7) * t219 - t184 * t371 + t229 * t376) + t367 * (-pkin(2) * t259 + pkin(7) * t220 + t184 * t376 + t229 * t371) - pkin(1) * t259 + qJ(2) * (-t219 * t366 + t220 * t367), t366 * (-pkin(7) * t155 - t118 * t371 + t123 * t376) + t367 * (-pkin(2) * t270 + pkin(7) * t156 + t118 * t376 + t123 * t371) - pkin(1) * t270 + qJ(2) * (-t155 * t366 + t156 * t367), t366 * (-pkin(7) * t85 - pkin(8) * t450 - t124 * t371) + t367 * (pkin(2) * t268 + pkin(7) * t86 - pkin(8) * t451 + t124 * t376) + pkin(1) * t268 + qJ(2) * (-t366 * t85 + t367 * t86), t366 * (-t126 * t371 + t128 * t376) + t367 * (t126 * t376 + t128 * t371), t366 * (-t371 * t74 + t376 * t76) + t367 * (t371 * t76 + t376 * t74), t366 * (-t174 * t371 + t176 * t376) + t367 * (t174 * t376 + t176 * t371), t366 * (-t125 * t371 + t127 * t376) + t367 * (t125 * t376 + t127 * t371), t366 * (-t175 * t371 + t177 * t376) + t367 * (t175 * t376 + t177 * t371), t366 * (-t195 * t371 + t196 * t376) + t367 * (t195 * t376 + t196 * t371), t366 * (-pkin(7) * t90 - t371 * t50 + t376 * t67) + t367 * (-pkin(2) * t189 + pkin(7) * t91 + t371 * t67 + t376 * t50) - pkin(1) * t189 + qJ(2) * (-t366 * t90 + t367 * t91), t366 * (-pkin(7) * t120 - t371 * t58 + t376 * t71) + t367 * (-pkin(2) * t194 + pkin(7) * t121 + t371 * t71 + t376 * t58) - pkin(1) * t194 + qJ(2) * (-t120 * t366 + t121 * t367), t366 * (-pkin(7) * t45 - t21 * t371 + t22 * t376) + t367 * (-pkin(2) * t230 + pkin(7) * t46 + t21 * t376 + t22 * t371) - pkin(1) * t230 + qJ(2) * (-t366 * t45 + t367 * t46), t366 * (-pkin(7) * t18 - t16 * t371 + t17 * t376) + t367 * (pkin(2) * t199 + pkin(7) * t19 + t16 * t376 + t17 * t371) + pkin(1) * t199 + qJ(2) * (-t18 * t366 + t19 * t367), t366 * (-t371 * t79 + t376 * t81) + t367 * (t371 * t81 + t376 * t79), t366 * (-t371 * t51 + t376 * t52) + t367 * (t371 * t52 + t376 * t51), t366 * (-t371 * t59 + t376 * t61) + t367 * (t371 * t61 + t376 * t59), t366 * (-t371 * t78 + t376 * t80) + t367 * (t371 * t80 + t376 * t78), t366 * (-t371 * t60 + t376 * t62) + t367 * (t371 * t62 + t376 * t60), t366 * (-t102 * t371 + t103 * t376) + t367 * (t102 * t376 + t103 * t371), t366 * (-pkin(7) * t33 + t10 * t376 - t371 * t8) + t367 * (-pkin(2) * t139 + pkin(7) * t34 + t10 * t371 + t376 * t8) - pkin(1) * t139 + qJ(2) * (-t33 * t366 + t34 * t367), t366 * (-pkin(7) * t35 + t11 * t376 - t371 * t9) + t367 * (-pkin(2) * t142 + pkin(7) * t36 + t11 * t371 + t376 * t9) - pkin(1) * t142 + qJ(2) * (-t35 * t366 + t36 * t367), t366 * (-pkin(7) * t31 - t371 * t5 + t376 * t6) + t367 * (-pkin(2) * t110 + pkin(7) * t32 + t371 * t6 + t376 * t5) - pkin(1) * t110 + qJ(2) * (-t31 * t366 + t32 * t367), t366 * (-pkin(7) * t3 - t1 * t371 + t2 * t376) + t367 * (-pkin(2) * t38 + pkin(7) * t4 + t1 * t376 + t2 * t371) - pkin(1) * t38 + qJ(2) * (-t3 * t366 + t367 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t418, t419, -t348, -t340, 0, 0, 0, 0, 0, 0, t327, t329, t308, -t323, 0, 0, 0, 0, 0, 0, t256, t259, t270, -t268, 0, 0, 0, 0, 0, 0, t189, t194, t230, -t199, 0, 0, 0, 0, 0, 0, t139, t142, t110, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, -t341 + t342, t343, -t332, t307, qJDD(3), -t280, -t281, 0, 0, -t300, t299, t261, t300, t384, t417, pkin(3) * t247 - t201, pkin(3) * t262 - t202, pkin(3) * t212, pkin(3) * t145, t251, t249, t193, -t251, t385, t357, pkin(3) * t147 + t392, pkin(3) * t172 + t381, pkin(3) * t75 + t129, pkin(3) * t40 + t68, t160, t109, t149, t158, t150, t197, pkin(3) * t53 + t397, pkin(3) * t55 + t398, pkin(3) * t48 + t395, pkin(3) * t13 + t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, t299, t261, t300, t384, t417, -t201, -t202, 0, 0, t251, t249, t193, -t251, t385, t357, t392, t381, t129, t68, t160, t109, t149, t158, t150, t197, t397, t398, t395, t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, t249, t193, -t251, t385, t357, -t116, -t117, 0, 0, t160, t109, t149, t158, t150, t197, t413, t414, t399, t456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234, t233, t168, -t234, -t164, t208, -t65, -t66, 0, 0;];
tauJ_reg  = t27;
