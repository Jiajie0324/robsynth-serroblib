% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:06:02
% EndTime: 2019-03-09 07:06:25
% DurationCPUTime: 13.36s
% Computational Cost: add. (29373->673), mult. (74560->829), div. (0->0), fcn. (60552->18), ass. (0->338)
t258 = sin(qJ(5));
t254 = sin(pkin(11));
t255 = cos(pkin(11));
t427 = sin(qJ(3));
t430 = cos(qJ(3));
t303 = t254 * t430 + t255 * t427;
t189 = t303 * qJD(1);
t259 = sin(qJ(4));
t429 = cos(qJ(4));
t350 = t427 * t254;
t354 = t430 * t255;
t302 = t350 - t354;
t466 = t302 * qJD(1);
t308 = t189 * t429 - t259 * t466;
t309 = -t259 * t189 - t429 * t466;
t428 = cos(qJ(5));
t107 = t258 * t308 - t309 * t428;
t261 = cos(qJ(6));
t370 = qJD(6) * t261;
t492 = t107 * t261 + t370;
t289 = t303 * qJDD(1);
t482 = qJD(3) * t466;
t276 = t289 - t482;
t346 = qJD(3) * t427;
t347 = qJD(3) * t430;
t357 = -qJDD(1) * t350 + (-t254 * t347 - t255 * t346) * qJD(1);
t299 = -qJDD(1) * t354 - t357;
t345 = qJD(4) * t429;
t373 = qJD(4) * t259;
t304 = -t189 * t373 - t259 * t299 + t429 * t276 - t345 * t466;
t344 = qJD(5) * t428;
t372 = qJD(5) * t258;
t269 = t259 * t276 + t429 * t299;
t90 = qJD(4) * t308 + t269;
t43 = t258 * t90 - t304 * t428 + t308 * t372 - t309 * t344;
t340 = -t258 * t304 - t428 * t90;
t434 = t258 * t309 + t308 * t428;
t467 = qJD(5) * t434;
t44 = -t340 + t467;
t134 = qJDD(2) - t357 * pkin(3) + (-pkin(1) + (-pkin(3) * t430 - pkin(2)) * t255) * qJDD(1);
t431 = t90 * pkin(4);
t69 = t134 + t431;
t14 = t44 * pkin(5) + t43 * pkin(10) + t69;
t13 = t261 * t14;
t257 = sin(qJ(6));
t253 = qJD(3) + qJD(4);
t339 = qJD(5) + t253;
t455 = pkin(9) * t309;
t422 = pkin(7) + qJ(2);
t214 = t422 * t254;
t198 = qJD(1) * t214;
t215 = t422 * t255;
t199 = qJD(1) * t215;
t351 = t427 * t199;
t160 = -t430 * t198 - t351;
t132 = -t189 * pkin(8) + t160;
t131 = qJD(3) * pkin(3) + t132;
t161 = -t198 * t427 + t199 * t430;
t133 = -pkin(8) * t466 + t161;
t353 = t429 * t133;
t92 = t259 * t131 + t353;
t76 = t92 + t455;
t361 = t428 * t76;
t456 = pkin(9) * t308;
t129 = t259 * t133;
t91 = t429 * t131 - t129;
t75 = t91 - t456;
t71 = pkin(4) * t253 + t75;
t50 = t258 * t71 + t361;
t48 = pkin(10) * t339 + t50;
t237 = t255 * pkin(2) + pkin(1);
t209 = -qJD(1) * t237 + qJD(2);
t162 = pkin(3) * t466 + t209;
t119 = -pkin(4) * t309 + t162;
t59 = pkin(5) * t107 - pkin(10) * t434 + t119;
t16 = t257 * t59 + t261 * t48;
t248 = qJDD(3) + qJDD(4);
t331 = qJDD(5) + t248;
t366 = qJD(1) * qJD(2);
t435 = qJDD(1) * t422 + t366;
t176 = t435 * t254;
t177 = t435 * t255;
t323 = -t430 * t176 - t177 * t427;
t84 = qJDD(3) * pkin(3) - pkin(8) * t276 + t198 * t346 - t199 * t347 + t323;
t359 = -t427 * t176 + t430 * t177 - t198 * t347;
t112 = -t199 * t346 + t359;
t88 = -pkin(8) * t299 + t112;
t38 = -qJD(4) * t92 - t259 * t88 + t429 * t84;
t26 = t248 * pkin(4) - pkin(9) * t304 + t38;
t333 = -t131 * t345 + t133 * t373 - t259 * t84 - t429 * t88;
t28 = -pkin(9) * t90 - t333;
t9 = t258 * t26 + t428 * t28 + t71 * t344 - t76 * t372;
t7 = pkin(10) * t331 + t9;
t3 = -qJD(6) * t16 - t257 * t7 + t13;
t481 = qJD(6) + t107;
t418 = t481 * t16;
t491 = t3 + t418;
t490 = t481 ^ 2;
t15 = -t257 * t48 + t261 * t59;
t419 = t481 * t15;
t371 = qJD(6) * t257;
t410 = t258 * t76;
t49 = t428 * t71 - t410;
t47 = -pkin(5) * t339 - t49;
t45 = t47 * t371;
t252 = pkin(11) + qJ(3);
t245 = qJ(4) + t252;
t238 = qJ(5) + t245;
t231 = sin(t238);
t262 = cos(qJ(1));
t388 = t231 * t262;
t260 = sin(qJ(1));
t389 = t231 * t260;
t472 = g(1) * t388 + g(2) * t389;
t489 = -t434 * t15 + t261 * t472 + t45;
t232 = cos(t238);
t425 = g(3) * t232;
t341 = t258 * t28 - t428 * t26;
t10 = -qJD(5) * t50 - t341;
t8 = -pkin(5) * t331 - t10;
t459 = t8 * t257 + t47 * t370;
t488 = t434 * t16 + t257 * t425 + t459;
t399 = t107 ^ 2;
t476 = t434 ^ 2;
t464 = -t399 + t476;
t99 = t257 * t339 + t261 * t434;
t403 = qJD(6) * t99;
t36 = -t257 * t43 - t261 * t331 + t403;
t34 = t36 * t261;
t318 = t261 * t339;
t97 = t257 * t434 - t318;
t412 = t257 * t97;
t487 = t412 * t481 - t34;
t35 = -qJD(6) * t318 - t257 * t331 + t261 * t43 + t371 * t434;
t32 = t35 * t257;
t478 = t492 * t99 - t32;
t42 = qJDD(6) + t44;
t39 = t257 * t42;
t416 = t434 * t99;
t477 = t481 * t492 + t39 - t416;
t486 = t107 * t15;
t475 = t107 * t47;
t451 = t107 * t339;
t463 = -t43 + t451;
t395 = t107 * t434;
t402 = qJDD(1) * pkin(1);
t447 = -g(1) * t260 + g(2) * t262;
t316 = -qJDD(2) + t402 - t447;
t325 = g(1) * t262 + g(2) * t260;
t313 = t325 * t231;
t484 = -t257 * t313 + t488;
t355 = -t8 - t425;
t483 = t261 * t355 + t489;
t332 = t434 * t253;
t436 = t332 + t340;
t480 = -t107 * t16 - t3;
t68 = pkin(5) * t434 + pkin(10) * t107;
t479 = -t49 * t107 + t50 * t434;
t222 = g(3) * t231;
t386 = t232 * t262;
t387 = t232 * t260;
t358 = -g(1) * t386 - g(2) * t387 - t222;
t462 = t119 * t107 - t358 - t9;
t314 = -t261 * t35 - t99 * t371;
t408 = t261 * t97;
t411 = t257 * t99;
t319 = t408 + t411;
t421 = -t257 * t36 - t97 * t370;
t461 = -t107 * t319 + t314 + t421;
t417 = t434 * t97;
t452 = t481 * t434;
t268 = t189 * t345 - t373 * t466 + t269;
t381 = t253 * t308;
t471 = -t268 + t381;
t285 = t429 * t302;
t278 = t259 * t303 + t285;
t392 = t309 * t253;
t470 = t304 - t392;
t393 = t309 ^ 2;
t394 = t308 ^ 2;
t469 = -t393 + t394;
t449 = t429 * t303;
t159 = -t259 * t302 + t449;
t271 = qJD(4) * t159;
t468 = qJD(4) * t278;
t439 = -t119 * t434 - t341 - t425 + t472;
t458 = pkin(4) * t308;
t241 = pkin(3) * t429 + pkin(4);
t378 = t258 * t259;
t157 = t241 * t344 + (-t259 * t372 + (t428 * t429 - t378) * qJD(4)) * pkin(3);
t93 = -t259 * t132 - t353;
t297 = t93 - t455;
t94 = t429 * t132 - t129;
t77 = t94 - t456;
t55 = t258 * t297 + t428 * t77;
t405 = t157 - t55;
t352 = t428 * t259;
t404 = -t258 * t77 + t297 * t428 + t241 * t372 + (t259 * t344 + (t258 * t429 + t352) * qJD(4)) * pkin(3);
t391 = t309 * t308;
t450 = t447 * t231;
t163 = -t430 * t214 - t215 * t427;
t146 = -pkin(8) * t303 + t163;
t164 = -t427 * t214 + t430 * t215;
t147 = -pkin(8) * t302 + t164;
t103 = t259 * t146 + t429 * t147;
t448 = t232 * pkin(5) + t231 * pkin(10);
t446 = -qJD(3) * t159 - t271;
t445 = -qJD(3) * t278 - t468;
t444 = -t15 * t257 + t16 * t261;
t443 = qJD(3) * t302;
t442 = qJ(2) * qJDD(1);
t40 = t261 * t42;
t441 = t40 + t417;
t235 = sin(t245);
t384 = t235 * t262;
t385 = t235 * t260;
t236 = cos(t245);
t424 = g(3) * t236;
t438 = g(1) * t384 + g(2) * t385 - t162 * t308 + t38 - t424;
t382 = t236 * t262;
t383 = t236 * t260;
t437 = g(1) * t382 + g(2) * t383 + g(3) * t235 - t162 * t309 + t333;
t433 = t189 ^ 2;
t432 = qJD(3) ^ 2;
t2 = qJD(6) * t15 + t14 * t257 + t261 * t7;
t1 = t2 * t261;
t423 = t99 * t97;
t266 = qJD(3) * t449 - t259 * t443 + t271;
t293 = qJD(3) * t303;
t267 = qJD(3) * t285 + t259 * t293 + t468;
t270 = t428 * t278;
t60 = qJD(5) * t270 + t159 * t372 + t258 * t266 + t267 * t428;
t413 = t257 * t60;
t409 = t261 * t60;
t407 = t261 * t99;
t401 = t481 * t257;
t390 = t189 * t466;
t380 = t257 * t260;
t379 = t257 * t262;
t377 = t260 * t261;
t376 = t261 * t262;
t185 = pkin(3) * t352 + t258 * t241;
t250 = t254 ^ 2;
t251 = t255 ^ 2;
t374 = t250 + t251;
t369 = t189 * qJD(3);
t365 = t255 * qJDD(1);
t249 = -pkin(8) - t422;
t363 = pkin(10) * qJD(6) * t481;
t230 = pkin(4) * t236;
t356 = t230 + t448;
t349 = qJD(2) * t430;
t348 = qJD(2) * t427;
t243 = sin(t252);
t191 = -pkin(3) * t243 - pkin(4) * t235;
t343 = -pkin(5) * t231 + t191;
t124 = pkin(3) * t189 + t458;
t62 = t124 + t68;
t18 = -t257 * t55 + t261 * t62;
t338 = -t157 * t257 - t18;
t19 = t257 * t62 + t261 * t55;
t337 = t157 * t261 - t19;
t335 = t374 * qJD(1) ^ 2;
t102 = t429 * t146 - t259 * t147;
t334 = t1 + t358;
t330 = pkin(4) * t344;
t244 = cos(t252);
t234 = pkin(3) * t244;
t200 = t234 + t237;
t329 = 0.2e1 * t374;
t51 = t258 * t75 + t361;
t328 = pkin(4) * t372 - t51;
t326 = -pkin(10) * t42 + t475;
t239 = pkin(4) * t258 + pkin(10);
t322 = -t239 * t42 + t475;
t182 = pkin(10) + t185;
t321 = -t182 * t42 + t475;
t320 = t15 * t261 + t16 * t257;
t79 = -pkin(9) * t159 + t102;
t80 = -pkin(9) * t278 + t103;
t58 = t258 * t79 + t428 * t80;
t117 = t159 * t258 + t270;
t275 = t258 * t278;
t118 = t159 * t428 - t275;
t169 = pkin(3) * t302 - t237;
t127 = pkin(4) * t278 + t169;
t66 = t117 * pkin(5) - t118 * pkin(10) + t127;
t30 = t257 * t66 + t261 * t58;
t29 = -t257 * t58 + t261 * t66;
t317 = -t107 * t401 - t371 * t481 + t40;
t315 = -qJD(6) * t59 + t222 - t7;
t312 = t325 * t235;
t136 = -t214 * t347 - t215 * t346 - t254 * t348 + t255 * t349;
t122 = -pkin(8) * t293 + t136;
t123 = pkin(8) * t443 + t214 * t346 - t215 * t347 - t254 * t349 - t255 * t348;
t310 = -t259 * t122 + t123 * t429;
t201 = -qJDD(1) * t237 + qJDD(2);
t63 = t429 * t122 + t259 * t123 + t146 * t345 - t147 * t373;
t184 = -pkin(3) * t378 + t241 * t428;
t298 = t316 + t402;
t294 = -g(3) * t244 + t243 * t325;
t288 = pkin(3) * t293;
t283 = t329 * t366 - t325;
t282 = -qJD(6) * t320 - t3 * t257 + t1;
t202 = pkin(10) * t387;
t203 = pkin(10) * t386;
t281 = -g(1) * (-pkin(5) * t388 + t203) - g(2) * (-pkin(5) * t389 + t202);
t279 = t134 + t447;
t265 = pkin(9) * t267 - t146 * t373 - t147 * t345 + t310;
t246 = -pkin(9) + t249;
t240 = -pkin(4) * t428 - pkin(5);
t183 = t466 ^ 2;
t181 = -pkin(5) - t184;
t175 = t232 * t376 + t380;
t174 = -t232 * t379 + t377;
t173 = -t232 * t377 + t379;
t172 = t232 * t380 + t376;
t171 = t200 + t230;
t165 = t262 * t171;
t137 = -qJD(2) * t303 - qJD(3) * t164;
t113 = -t161 * qJD(3) + t323;
t100 = pkin(4) * t271 + (pkin(3) * t303 + pkin(4) * t159) * qJD(3);
t65 = t458 + t68;
t64 = -qJD(4) * t103 + t310;
t61 = -qJD(5) * t275 + t159 * t344 - t258 * t267 + t266 * t428;
t57 = t258 * t80 - t428 * t79;
t56 = -pkin(9) * t266 + t63;
t52 = t428 * t75 - t410;
t23 = t257 * t68 + t261 * t49;
t22 = -t257 * t49 + t261 * t68;
t21 = t257 * t65 + t261 * t52;
t20 = -t257 * t52 + t261 * t65;
t17 = pkin(4) * t266 + t61 * pkin(5) + t60 * pkin(10) + t288;
t12 = qJD(5) * t58 + t258 * t56 - t265 * t428;
t11 = t258 * t265 + t344 * t79 - t372 * t80 + t428 * t56;
t5 = -qJD(6) * t30 - t11 * t257 + t17 * t261;
t4 = qJD(6) * t29 + t11 * t261 + t17 * t257;
t6 = [0, 0, 0, 0, 0, qJDD(1), -t447, t325, 0, 0, t250 * qJDD(1), 0.2e1 * t254 * t365, 0, t251 * qJDD(1), 0, 0, t298 * t255, -t298 * t254, t329 * t442 + t283, pkin(1) * t316 + (t374 * t442 + t283) * qJ(2), -t189 * t443 + t276 * t303, -t189 * t293 - t276 * t302 - t299 * t303 + t443 * t466, qJDD(3) * t303 - t302 * t432, t293 * t466 + t299 * t302, -qJDD(3) * t302 - t303 * t432, 0, t163 * qJDD(3) + t201 * t302 - t237 * t299 - t447 * t244 + (t209 * t303 + t137) * qJD(3), -t136 * qJD(3) - t164 * qJDD(3) + t201 * t303 - t209 * t443 - t237 * t276 + t243 * t447, -t136 * t466 - t164 * t299 - t112 * t302 - t161 * t293 - t137 * t189 + t163 * (qJD(1) * t443 - t289) - t113 * t303 + t160 * t443 - t325, t112 * t164 + t161 * t136 + t113 * t163 + t160 * t137 - t201 * t237 - g(1) * (-t237 * t260 + t262 * t422) - g(2) * (t237 * t262 + t260 * t422) t159 * t304 + t308 * t445, -t159 * t90 - t266 * t308 - t267 * t309 - t278 * t304, t248 * t159 + t253 * t445, t278 * t90 + t309 * t446, -t248 * t278 + t253 * t446, 0, g(1) * t383 - g(2) * t382 + t102 * t248 + t134 * t278 + t162 * t266 + t169 * t90 + t64 * t253 - t288 * t309, -g(1) * t385 + g(2) * t384 - t103 * t248 + t134 * t159 - t162 * t267 + t169 * t304 - t63 * t253 + t288 * t308, -t102 * t304 - t103 * t90 - t38 * t159 - t266 * t92 + t267 * t91 + t278 * t333 - t308 * t64 + t309 * t63 - t325, -t333 * t103 + t92 * t63 + t38 * t102 + t91 * t64 + t134 * t169 + t162 * t288 - g(1) * (-t200 * t260 - t249 * t262) - g(2) * (t200 * t262 - t249 * t260) -t118 * t43 - t434 * t60, t107 * t60 + t117 * t43 - t118 * t44 - t434 * t61, t118 * t331 - t339 * t60, t107 * t61 + t117 * t44, -t117 * t331 - t339 * t61, 0, t100 * t107 + t69 * t117 + t119 * t61 - t12 * t339 + t127 * t44 - t232 * t447 - t331 * t57, t100 * t434 - t11 * t339 + t69 * t118 - t119 * t60 - t127 * t43 - t331 * t58 + t450, -t10 * t118 - t107 * t11 - t117 * t9 + t12 * t434 - t43 * t57 - t44 * t58 + t49 * t60 - t50 * t61 - t325, t9 * t58 + t50 * t11 - t10 * t57 - t49 * t12 + t69 * t127 + t119 * t100 - g(1) * (-t171 * t260 - t246 * t262) - g(2) * (-t246 * t260 + t165) t118 * t314 - t407 * t60, t319 * t60 + (t32 - t34 + (-t407 + t412) * qJD(6)) * t118, t118 * t40 - t117 * t35 + t61 * t99 + (-t118 * t371 - t409) * t481, -t118 * t421 - t412 * t60, -t118 * t39 - t117 * t36 - t61 * t97 + (-t118 * t370 + t413) * t481, t117 * t42 + t481 * t61, -g(1) * t173 - g(2) * t175 + t117 * t3 + t118 * t459 + t12 * t97 + t15 * t61 + t29 * t42 + t36 * t57 - t47 * t413 + t481 * t5, -t47 * t409 - g(1) * t172 - g(2) * t174 - t481 * t4 - t117 * t2 + t12 * t99 - t16 * t61 - t30 * t42 - t35 * t57 + (t8 * t261 - t45) * t118, t29 * t35 - t30 * t36 - t4 * t97 - t5 * t99 + t320 * t60 - t450 + (-qJD(6) * t444 - t2 * t257 - t261 * t3) * t118, -g(2) * t165 + t47 * t12 + t15 * t5 + t16 * t4 + t2 * t30 + t3 * t29 + t8 * t57 + (g(1) * t246 - g(2) * t448) * t262 + (-g(1) * (-t171 - t448) + g(2) * t246) * t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, t254 * qJDD(1), -t335, -qJ(2) * t335 - t316, 0, 0, 0, 0, 0, 0, t299 + t369, t289 - 0.2e1 * t482, -t183 - t433, t160 * t189 + t161 * t466 + t201 + t447, 0, 0, 0, 0, 0, 0, t268 + t381, t304 + t392, -t393 - t394, t308 * t91 - t309 * t92 + t279, 0, 0, 0, 0, 0, 0, t332 - t340 + 0.2e1 * t467, -t43 - t451, -t399 - t476, t107 * t50 + t434 * t49 + t279 + t431, 0, 0, 0, 0, 0, 0, t317 - t417, -t261 * t490 - t39 - t416 -(t408 - t411) * t107 - t314 + t421, -t434 * t47 + t491 * t261 + (t2 - t419) * t257 + t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t390, -t183 + t433, t289, -t390, -t299 + t369, qJDD(3), -t209 * t189 + t294 + t323, g(3) * t243 + t209 * t466 + t325 * t244 + (t351 + t160) * qJD(3) - t359, 0, 0, -t391, t469, t470, t391, t471, t248, -t93 * t253 + (t189 * t309 + t248 * t429 - t253 * t373) * pkin(3) + t438, t94 * t253 + (-t189 * t308 - t248 * t259 - t253 * t345) * pkin(3) + t437, t92 * t308 - t94 * t309 + t91 * t309 + t93 * t308 + (-t429 * t304 - t259 * t90 + (t259 * t308 + t309 * t429) * qJD(4)) * pkin(3), -t91 * t93 - t92 * t94 + (t429 * t38 - t162 * t189 - t259 * t333 + (-t259 * t91 + t429 * t92) * qJD(4) + t294) * pkin(3), t395, t464, t463, -t395, t436, t331, t184 * t331 - t124 * t107 + (-t50 - t404) * qJD(5) - t404 * t253 + t439, -t124 * t434 - t185 * t331 - t339 * t405 + t462, -t107 * t405 + t184 * t43 - t185 * t44 + t404 * t434 + t479, t9 * t185 + t10 * t184 - t119 * t124 - g(3) * (t230 + t234) + t405 * t50 - t404 * t49 - t325 * t191, t478, t461, t477, t487, t317 + t417, -t452, t181 * t36 + t404 * t97 + t321 * t257 + (-t182 * t370 + t338) * t481 + t483, -t181 * t35 + t404 * t99 + t321 * t261 + (t182 * t371 - t337) * t481 + t484, t18 * t99 + t19 * t97 + (-t486 - t157 * t97 - t182 * t36 + (t182 * t99 - t15) * qJD(6)) * t261 + (t157 * t99 - t182 * t35 + (t182 * t97 - t16) * qJD(6) + t480) * t257 + t334, t8 * t181 - g(1) * (t262 * t343 + t203) - g(2) * (t260 * t343 + t202) - g(3) * (t234 + t356) + t404 * t47 + t337 * t16 + t338 * t15 + t282 * t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t391, t469, t470, t391, t471, t248, t92 * t253 + t438, t253 * t91 + t437, 0, 0, t395, t464, t463, -t395, t436, t331, t51 * t253 + (t51 - t50) * qJD(5) + (-t107 * t308 + t331 * t428 - t339 * t372) * pkin(4) + t439, t52 * t339 + (-t258 * t331 - t308 * t434 - t339 * t344) * pkin(4) + t462, t52 * t107 - t51 * t434 + (t428 * t43 - t258 * t44 + (-t107 * t428 + t258 * t434) * qJD(5)) * pkin(4) + t479, t49 * t51 - t50 * t52 + (t428 * t10 - t424 - t119 * t308 + t258 * t9 + t312 + (-t258 * t49 + t428 * t50) * qJD(5)) * pkin(4), t478, t461, t477, t487, -t401 * t481 + t441, -t452, t240 * t36 + t328 * t97 + t322 * t257 + (-t239 * t370 - t257 * t330 - t20) * t481 + t483, -t240 * t35 + t328 * t99 + t322 * t261 + (t239 * t371 - t261 * t330 + t21) * t481 + t484, t20 * t99 + t21 * t97 + (-t97 * t330 - t486 - t239 * t36 + (t239 * t99 - t15) * qJD(6)) * t261 + (t99 * t330 - t239 * t35 + (t239 * t97 - t16) * qJD(6) + t480) * t257 + t334, t8 * t240 - t16 * t21 - t15 * t20 - t47 * t51 - g(3) * t356 + (t312 + (t258 * t47 + t428 * t444) * qJD(5)) * pkin(4) + t282 * t239 + t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, t464, t463, -t395, t436, t331, t253 * t50 + t439, t339 * t49 + t462, 0, 0, t478, t461, t477, t401 * t97 - t34, -t257 * t490 + t441, -t452, -pkin(5) * t36 - t481 * t22 - t50 * t97 + t326 * t257 + (t355 - t363) * t261 + t489, pkin(5) * t35 + t481 * t23 - t50 * t99 + t326 * t261 + (-t313 + t363) * t257 + t488, t22 * t99 + t23 * t97 + (-t419 + (-t36 + t403) * pkin(10)) * t261 + ((qJD(6) * t97 - t35) * pkin(10) - t491) * t257 + t334, -t8 * pkin(5) + pkin(10) * t282 - g(3) * t448 - t15 * t22 - t16 * t23 - t47 * t50 + t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t423, -t97 ^ 2 + t99 ^ 2, t481 * t97 - t35, -t423, t481 * t99 - t36, t42, -g(1) * t174 + g(2) * t172 + t257 * t315 - t370 * t48 - t47 * t99 + t13 + t418, g(1) * t175 - g(2) * t173 + t419 + t47 * t97 + (qJD(6) * t48 - t14) * t257 + t315 * t261, 0, 0;];
tau_reg  = t6;
