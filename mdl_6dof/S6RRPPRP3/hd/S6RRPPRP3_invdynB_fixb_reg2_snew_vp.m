% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:17
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RRPPRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:16:43
% EndTime: 2019-05-06 09:16:58
% DurationCPUTime: 8.90s
% Computational Cost: add. (18950->533), mult. (40209->656), div. (0->0), fcn. (21481->6), ass. (0->375)
t654 = qJD(2) ^ 2;
t649 = sin(qJ(2));
t642 = t649 ^ 2;
t655 = qJD(1) ^ 2;
t750 = t642 * t655;
t618 = t654 + t750;
t652 = cos(qJ(2));
t790 = t652 * t655;
t696 = t649 * t790;
t614 = -qJDD(2) + t696;
t726 = t652 * t614;
t554 = t649 * t618 + t726;
t706 = qJD(1) * qJD(2);
t692 = t652 * t706;
t704 = t649 * qJDD(1);
t602 = 0.2e1 * t692 + t704;
t650 = sin(qJ(1));
t653 = cos(qJ(1));
t499 = t650 * t554 - t653 * t602;
t771 = pkin(6) * t499;
t503 = t653 * t554 + t650 * t602;
t497 = pkin(6) * t503;
t643 = t652 ^ 2;
t749 = t643 * t655;
t620 = t654 + t749;
t613 = qJDD(2) + t696;
t741 = t649 * t613;
t556 = t652 * t620 + t741;
t630 = t649 * t706;
t702 = t652 * qJDD(1);
t605 = -0.2e1 * t630 + t702;
t501 = t650 * t556 - t653 * t605;
t770 = pkin(6) * t501;
t505 = t653 * t556 + t650 * t605;
t498 = pkin(6) * t505;
t648 = sin(qJ(5));
t651 = cos(qJ(5));
t713 = qJD(1) * t652;
t595 = -t651 * qJD(2) + t648 * t713;
t596 = t648 * qJD(2) + t651 * t713;
t539 = t595 * t596;
t603 = t692 + t704;
t587 = qJDD(5) + t603;
t794 = t539 - t587;
t799 = t794 * pkin(5);
t592 = t652 * t613;
t552 = -t649 * t620 + t592;
t775 = pkin(1) * t552;
t798 = -qJ(3) * t620 + t775;
t764 = pkin(7) * t552;
t777 = pkin(2) + pkin(8);
t797 = pkin(3) + t777;
t761 = pkin(4) + qJ(3);
t719 = pkin(1) * t602 - pkin(7) * t554;
t740 = t649 * t614;
t547 = -t652 * t618 + t740;
t796 = pkin(1) * t547;
t714 = t642 + t643;
t607 = t714 * qJDD(1);
t610 = t714 * t655;
t532 = t650 * t607 + t653 * t610;
t769 = pkin(6) * t532;
t534 = t653 * t607 - t650 * t610;
t531 = pkin(6) * t534;
t765 = pkin(7) * t547;
t778 = pkin(2) + pkin(3);
t795 = pkin(8) + t778;
t745 = t648 * t794;
t730 = t651 * t794;
t718 = pkin(1) * t605 - pkin(7) * t556;
t727 = t652 * t605;
t743 = t649 * t602;
t530 = -t727 + t743;
t611 = (t642 - t643) * t655;
t792 = t650 * t530 + t653 * t611;
t791 = t653 * t530 - t650 * t611;
t621 = -t654 + t749;
t557 = t652 * t621 + t740;
t701 = t653 * qJDD(1);
t517 = t650 * t557 - t652 * t701;
t519 = t653 * t557 + t650 * t702;
t604 = -t630 + t702;
t525 = t595 * qJD(5) - t648 * qJDD(2) - t651 * t604;
t709 = t649 * qJD(1);
t624 = qJD(5) + t709;
t570 = t624 * t595;
t788 = t570 + t525;
t717 = pkin(1) * t610 + pkin(7) * t607;
t694 = qJD(4) * t713;
t628 = 0.2e1 * t694;
t705 = qJD(3) * qJD(2);
t637 = -0.2e1 * t705;
t787 = t628 + t637;
t636 = 0.2e1 * t705;
t786 = t636 - 0.2e1 * t694;
t615 = t650 * g(1) - t653 * g(2);
t578 = qJDD(1) * pkin(1) + t655 * pkin(7) + t615;
t668 = -pkin(2) * t630 + t578;
t779 = t604 * pkin(3) - qJ(4) * t749 + qJDD(4);
t660 = t668 + t779;
t612 = -qJD(2) * pkin(3) - qJ(4) * t709;
t689 = (0.2e1 * qJD(3) + t612) * t649;
t405 = t777 * t604 + t761 * t603 + (t689 + (-t649 * pkin(8) + t761 * t652) * qJD(2)) * qJD(1) + t660;
t616 = t653 * g(1) + t650 * g(2);
t579 = -t655 * pkin(1) + qJDD(1) * pkin(7) - t616;
t762 = t652 * g(3);
t561 = t649 * t579 + t762;
t690 = qJDD(2) * pkin(2) + t654 * qJ(3) - qJDD(3);
t674 = pkin(3) * t613 + t603 * qJ(4) + t690;
t663 = t561 - t674;
t683 = pkin(4) * t649 + pkin(8) * t652;
t712 = qJD(2) * t652;
t695 = qJ(4) * t712;
t681 = -pkin(2) * t652 - qJ(3) * t649;
t600 = t681 * qJD(1);
t708 = -0.2e1 * qJD(4) + t600;
t430 = -t654 * pkin(4) - qJDD(2) * pkin(8) + (t695 + (-t683 * qJD(1) + t708) * t649) * qJD(1) + t663;
t362 = -t651 * t405 + t648 * t430;
t785 = -qJ(6) * t570 - 0.2e1 * qJD(6) * t596 + t362 + t799;
t784 = -t649 * t621 + t726;
t585 = t595 ^ 2;
t622 = t624 ^ 2;
t526 = -t622 - t585;
t449 = t648 * t526 - t730;
t450 = t651 * t526 + t745;
t783 = -qJ(4) * t450 + t761 * t449;
t676 = t651 * qJDD(2) - t648 * t604;
t524 = t596 * qJD(5) - t676;
t560 = t624 * pkin(5) + t596 * qJ(6);
t782 = t524 * qJ(6) + 0.2e1 * qJD(6) * t595 - t624 * t560;
t781 = qJ(3) * t614 + t637 + t796;
t780 = qJDD(2) * pkin(4) - t654 * pkin(8) - t683 * t790;
t679 = t603 + t692;
t699 = 0.2e1 * t709;
t687 = qJD(3) * t699;
t657 = t679 * qJ(3) + t668 + t687;
t459 = (t604 + t605) * pkin(2) + t657;
t688 = qJD(1) * t600 + t579;
t661 = t688 * t649 - t690 + t762;
t586 = t596 ^ 2;
t483 = -t570 + t525;
t667 = (qJD(5) - t624) * t596 - t676;
t424 = t648 * t483 + t651 * t667;
t509 = -t585 - t586;
t388 = t649 * t424 + t652 * t509;
t422 = -t651 * t483 + t648 * t667;
t354 = t650 * t388 + t653 * t422;
t774 = pkin(6) * t354;
t478 = (-qJD(5) - t624) * t596 + t676;
t398 = t649 * t450 + t652 * t478;
t366 = t650 * t398 + t653 * t449;
t773 = pkin(6) * t366;
t700 = t586 + t622;
t511 = t539 + t587;
t731 = t651 * t511;
t461 = t648 * t700 - t731;
t404 = t649 * t461 + t652 * t788;
t746 = t648 * t511;
t460 = -t651 * t700 - t746;
t371 = t650 * t404 + t653 * t460;
t772 = pkin(6) * t371;
t387 = -t652 * t424 + t649 * t509;
t768 = pkin(7) * t387;
t397 = -t652 * t450 + t649 * t478;
t767 = pkin(7) * t397;
t403 = -t652 * t461 + t649 * t788;
t766 = pkin(7) * t403;
t763 = t604 * pkin(2);
t759 = qJ(3) * t610;
t756 = qJ(3) * t652;
t752 = t624 * t648;
t751 = t624 * t651;
t349 = -t525 * qJ(6) - t785;
t748 = t648 * t349;
t715 = t649 * g(3) - t652 * t579;
t677 = t654 * pkin(2) - qJDD(2) * qJ(3) - t600 * t713 + t715;
t669 = pkin(3) * t749 - qJD(2) * t612 + t677;
t662 = t604 * qJ(4) + t669;
t442 = -t662 + t786;
t429 = t442 + t780;
t747 = t648 * t429;
t744 = t649 * t578;
t742 = t649 * t605;
t733 = t651 * t349;
t732 = t651 * t429;
t729 = t652 * t578;
t728 = t652 * t602;
t722 = pkin(1) * t422 + pkin(7) * t388;
t721 = pkin(1) * t449 + pkin(7) * t398;
t720 = pkin(1) * t460 + pkin(7) * t404;
t363 = t648 * t405 + t651 * t430;
t703 = t650 * qJDD(1);
t698 = t649 * t539;
t697 = t652 * t539;
t486 = t649 * t561 - t652 * t715;
t544 = -t650 * t615 - t653 * t616;
t685 = t650 * t696;
t684 = t653 * t696;
t609 = -t650 * t655 + t701;
t682 = -pkin(6) * t609 - t650 * g(3);
t680 = pkin(2) * t649 - t756;
t338 = -t651 * t362 + t648 * t363;
t339 = t648 * t362 + t651 * t363;
t485 = t652 * t561 + t649 * t715;
t528 = t728 + t742;
t543 = t653 * t615 - t650 * t616;
t487 = t636 - t677;
t350 = -qJ(4) * t424 + t761 * t422;
t673 = t363 + t782;
t672 = -qJ(4) * t509 + t795 * t422;
t671 = -qJ(4) * t478 + t795 * t449;
t670 = -qJ(4) * t788 + t795 * t460;
t341 = -qJ(4) * t461 + t761 * t460 - t363;
t666 = -pkin(1) * t387 + t424 * t797 - t761 * t509;
t665 = -pkin(1) * t397 + t450 * t797 - t761 * t478;
t664 = -pkin(1) * t403 + t461 * t797 - t761 * t788;
t658 = t763 + (t602 + t679) * qJ(3) + t668;
t656 = -t524 * pkin(5) - t585 * qJ(6) - t596 * t560 + qJDD(6) - t662 + t780;
t378 = t656 + t786;
t627 = qJD(4) * t699;
t619 = t654 - t750;
t608 = t653 * t655 + t703;
t598 = t680 * qJDD(1);
t591 = t714 * t706;
t574 = -pkin(6) * t608 + t653 * g(3);
t572 = (-t778 * t649 + t756) * qJDD(1);
t568 = -t586 + t622;
t567 = t585 - t622;
t566 = t650 * qJDD(2) + t653 * t591;
t565 = t652 * t603 - t642 * t706;
t564 = -t653 * qJDD(2) + t650 * t591;
t563 = -t649 * t604 - t643 * t706;
t553 = -t649 * t619 + t592;
t549 = t679 * t649;
t546 = t652 * t619 + t741;
t545 = (t604 - t630) * t652;
t542 = -qJ(3) * t605 - qJ(4) * t613;
t536 = t586 - t585;
t523 = t653 * t565 - t685;
t522 = t653 * t563 + t685;
t521 = t650 * t565 + t684;
t520 = t650 * t563 - t684;
t518 = t653 * t553 + t649 * t703;
t516 = t650 * t553 - t649 * t701;
t513 = qJ(4) * t614 + t778 * t602;
t496 = -t729 - t765;
t495 = -t744 - t764;
t494 = (-t595 * t651 + t596 * t648) * t624;
t493 = (t595 * t648 + t596 * t651) * t624;
t489 = t561 - t775;
t488 = -t715 - t796;
t474 = t661 + t759;
t473 = pkin(2) * t610 + t487;
t472 = -t651 * t525 - t596 * t752;
t471 = t648 * t525 - t596 * t751;
t470 = t648 * t524 + t595 * t751;
t469 = t651 * t524 - t595 * t752;
t468 = t657 + t763;
t467 = -t649 * t494 + t652 * t587;
t466 = t652 * t494 + t649 * t587;
t465 = -t651 * t567 + t746;
t464 = t648 * t568 + t730;
t463 = t648 * t567 + t731;
t462 = t651 * t568 - t745;
t458 = t658 + t687;
t457 = t653 * t486 - t650 * t578;
t456 = t650 * t486 + t653 * t578;
t443 = (t708 * t649 + t695) * qJD(1) + t663;
t441 = -pkin(2) * t613 + t661 - t798;
t440 = -t649 * t472 + t697;
t439 = -t649 * t470 - t697;
t438 = t652 * t472 + t698;
t437 = t652 * t470 - t698;
t436 = -pkin(2) * t618 + t677 + t781;
t435 = t763 + t603 * qJ(3) + (qJ(3) * t712 + t689) * qJD(1) + t660;
t434 = -pkin(5) * t788 - qJ(6) * t511;
t433 = -t759 + t627 + (-qJ(4) * t706 - g(3)) * t652 + (qJ(4) * qJDD(1) - t688) * t649 + t674;
t432 = t652 * t487 + t649 * t661;
t431 = t649 * t487 - t652 * t661;
t426 = -t778 * t610 + (t604 + t702) * qJ(4) + t669 + t787;
t425 = t651 * t478 + t648 * t788;
t423 = -t648 * t478 + t651 * t788;
t416 = qJ(4) * t618 + qJD(1) * t689 + t658 + t779;
t415 = t653 * t467 - t650 * t493;
t414 = t650 * t467 + t653 * t493;
t413 = -pkin(2) * t743 + t652 * t458 + t765;
t412 = qJ(3) * t727 - t649 * t459 - t764;
t411 = -t649 * t473 + t652 * t474;
t410 = -t649 * t464 + t652 * t483;
t409 = -t649 * t465 + t652 * t667;
t408 = t652 * t464 + t649 * t483;
t407 = t652 * t465 + t649 * t667;
t406 = -pkin(3) * t605 - qJ(4) * t620 - t612 * t709 - t459 - t779;
t399 = -t778 * t618 + t628 + t662 + t781;
t396 = t627 + t778 * t613 + (-t649 * t600 - t695) * qJD(1) - t663 + t798;
t394 = -t649 * t425 + t652 * t536;
t393 = t652 * t425 + t649 * t536;
t392 = t653 * t440 - t650 * t471;
t391 = t653 * t439 - t650 * t469;
t390 = t650 * t440 + t653 * t471;
t389 = t650 * t439 + t653 * t469;
t385 = t653 * t432 - t650 * t468;
t384 = t650 * t432 + t653 * t468;
t383 = t652 * t442 + t649 * t443;
t382 = t649 * t442 - t652 * t443;
t381 = qJ(3) * t435 - qJ(4) * t443;
t380 = -t649 * t406 + t652 * t542 + t764;
t379 = t652 * t416 - t649 * t513 + t765;
t377 = t653 * t410 - t650 * t462;
t376 = t653 * t409 - t650 * t463;
t375 = t650 * t410 + t653 * t462;
t374 = t650 * t409 + t653 * t463;
t373 = -pkin(1) * t431 + pkin(2) * t661 - qJ(3) * t487;
t372 = t653 * t404 - t650 * t460;
t370 = pkin(6) * t372;
t369 = -t649 * t426 + t652 * t433;
t368 = qJ(6) * t700 + t378;
t367 = t653 * t398 - t650 * t449;
t365 = pkin(6) * t367;
t364 = -pkin(7) * t431 - t468 * t680;
t360 = t653 * t394 - t650 * t423;
t359 = t650 * t394 + t653 * t423;
t358 = t653 * t383 - t650 * t435;
t357 = t650 * t383 + t653 * t435;
t356 = -qJ(4) * t442 + t778 * t435;
t355 = t653 * t388 - t650 * t422;
t353 = pkin(6) * t355;
t352 = -pkin(5) * t478 + qJ(6) * t526 - t656 + t787;
t351 = -t585 * pkin(5) + t673;
t347 = t670 - t732;
t346 = -pkin(5) * t483 + t350;
t345 = t671 - t747;
t344 = (t483 + t525) * qJ(6) + t785;
t343 = -pkin(1) * t382 - qJ(3) * t442 + t778 * t443;
t342 = qJ(6) * t667 + (-t509 - t585) * pkin(5) + t673;
t340 = -t362 + t783;
t337 = -pkin(5) * t378 + qJ(6) * t351;
t336 = t664 + t747;
t335 = (t585 - t700) * pkin(5) + t341 - t782;
t334 = t665 - t732;
t333 = -t651 * t368 + t648 * t434 + t670;
t332 = t649 * t339 + t652 * t429;
t331 = -t652 * t339 + t649 * t429;
t330 = -qJ(6) * t730 + t648 * t352 + t671;
t329 = t349 + t783 - t799;
t328 = -pkin(7) * t382 - t649 * t356 + t652 * t381;
t327 = t651 * t351 - t748;
t326 = t648 * t351 + t733;
t325 = t648 * t368 + t651 * t434 + t664;
t324 = qJ(6) * t745 + t651 * t352 + t665;
t323 = t338 + t672;
t322 = t649 * t327 + t652 * t378;
t321 = -t652 * t327 + t649 * t378;
t320 = t652 * t341 - t649 * t347 - t766;
t319 = t652 * t340 - t649 * t345 - t767;
t318 = t339 + t666;
t317 = t653 * t332 - t650 * t338;
t316 = t650 * t332 + t653 * t338;
t315 = t648 * t342 - t651 * t344 + t672;
t314 = -t649 * t333 + t652 * t335 - t766;
t313 = -t649 * t323 + t652 * t350 - t768;
t312 = t652 * t329 - t649 * t330 - t767;
t311 = t651 * t342 + t648 * t344 + t666;
t310 = -qJ(4) * t339 + t761 * t338;
t309 = -qJ(4) * t429 + t338 * t797;
t308 = t653 * t322 - t650 * t326;
t307 = t650 * t322 + t653 * t326;
t306 = -t649 * t315 + t652 * t346 - t768;
t305 = -pkin(1) * t331 + t339 * t797 - t761 * t429;
t304 = pkin(5) * t349 - qJ(4) * t327 + t761 * t326;
t303 = -qJ(4) * t378 + qJ(6) * t733 + t326 * t797 + t648 * t337;
t302 = -pkin(7) * t331 - t649 * t309 + t652 * t310;
t301 = -pkin(1) * t321 - qJ(6) * t748 + t327 * t797 + t651 * t337 - t761 * t378;
t300 = -pkin(7) * t321 - t649 * t303 + t652 * t304;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t608, -t609, 0, t544, 0, 0, 0, 0, 0, 0, -t505, t503, t534, t457, 0, 0, 0, 0, 0, 0, -t505, t534, -t503, t385, 0, 0, 0, 0, 0, 0, -t503, t505, -t534, t358, 0, 0, 0, 0, 0, 0, t367, t372, t355, t317, 0, 0, 0, 0, 0, 0, t367, t372, t355, t308; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t609, -t608, 0, t543, 0, 0, 0, 0, 0, 0, -t501, t499, t532, t456, 0, 0, 0, 0, 0, 0, -t501, t532, -t499, t384, 0, 0, 0, 0, 0, 0, -t499, t501, -t532, t357, 0, 0, 0, 0, 0, 0, t366, t371, t354, t316, 0, 0, 0, 0, 0, 0, t366, t371, t354, t307; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t552, t547, 0, -t485, 0, 0, 0, 0, 0, 0, t552, 0, -t547, t431, 0, 0, 0, 0, 0, 0, -t547, -t552, 0, t382, 0, 0, 0, 0, 0, 0, t397, t403, t387, t331, 0, 0, 0, 0, 0, 0, t397, t403, t387, t321; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t609, 0, -t608, 0, t682, -t574, -t543, -pkin(6) * t543, t523, -t791, t518, t522, t519, t566, -t650 * t489 + t653 * t495 + t770, -t650 * t488 + t653 * t496 - t771, t653 * t485 - t769, -pkin(6) * t456 - (pkin(1) * t650 - pkin(7) * t653) * t485, t523, t518, t791, t566, -t519, t522, t653 * t412 - t650 * t441 + t770, t653 * t411 - t650 * t598 - t769, t653 * t413 - t650 * t436 + t771, -pkin(6) * t384 + t653 * t364 - t650 * t373, t522, -t791, t519, t523, t518, t566, t653 * t379 - t650 * t399 + t771, t653 * t380 - t650 * t396 - t770, t653 * t369 - t650 * t572 + t769, -pkin(6) * t357 + t653 * t328 - t650 * t343, t392, t360, t377, t391, t376, t415, t653 * t319 - t650 * t334 - t773, t653 * t320 - t650 * t336 - t772, t653 * t313 - t650 * t318 - t774, -pkin(6) * t316 + t653 * t302 - t650 * t305, t392, t360, t377, t391, t376, t415, t653 * t312 - t650 * t324 - t773, t653 * t314 - t650 * t325 - t772, t653 * t306 - t650 * t311 - t774, -pkin(6) * t307 + t653 * t300 - t650 * t301; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t608, 0, t609, 0, t574, t682, t544, pkin(6) * t544, t521, -t792, t516, t520, t517, t564, t653 * t489 + t650 * t495 - t498, t653 * t488 + t650 * t496 + t497, t650 * t485 + t531, pkin(6) * t457 - (-pkin(1) * t653 - pkin(7) * t650) * t485, t521, t516, t792, t564, -t517, t520, t650 * t412 + t653 * t441 - t498, t650 * t411 + t653 * t598 + t531, t650 * t413 + t653 * t436 - t497, pkin(6) * t385 + t650 * t364 + t653 * t373, t520, -t792, t517, t521, t516, t564, t650 * t379 + t653 * t399 - t497, t650 * t380 + t653 * t396 + t498, t650 * t369 + t653 * t572 - t531, pkin(6) * t358 + t650 * t328 + t653 * t343, t390, t359, t375, t389, t374, t414, t650 * t319 + t653 * t334 + t365, t650 * t320 + t653 * t336 + t370, t650 * t313 + t653 * t318 + t353, pkin(6) * t317 + t650 * t302 + t653 * t305, t390, t359, t375, t389, t374, t414, t650 * t312 + t653 * t324 + t365, t650 * t314 + t653 * t325 + t370, t650 * t306 + t653 * t311 + t353, pkin(6) * t308 + t650 * t300 + t653 * t301; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t615, t616, 0, 0, t549, t528, t546, t545, -t784, 0, t718 + t729, -t719 - t744, t486 + t717, pkin(1) * t578 + pkin(7) * t486, t549, t546, -t528, 0, t784, t545, qJ(3) * t742 + t652 * t459 + t718, t652 * t473 + t649 * t474 + t717, pkin(2) * t728 + t649 * t458 + t719, pkin(7) * t432 + (pkin(1) - t681) * t468, t545, t528, -t784, t549, t546, 0, t649 * t416 + t652 * t513 + t719, t652 * t406 + t649 * t542 - t718, t652 * t426 + t649 * t433 - t717, pkin(1) * t435 + pkin(7) * t383 + t652 * t356 + t649 * t381, t438, t393, t408, t437, t407, t466, t649 * t340 + t652 * t345 + t721, t649 * t341 + t652 * t347 + t720, t652 * t323 + t649 * t350 + t722, pkin(1) * t338 + pkin(7) * t332 + t652 * t309 + t649 * t310, t438, t393, t408, t437, t407, t466, t649 * t329 + t652 * t330 + t721, t652 * t333 + t649 * t335 + t720, t652 * t315 + t649 * t346 + t722, pkin(1) * t326 + pkin(7) * t322 + t652 * t303 + t649 * t304;];
tauB_reg  = t1;
