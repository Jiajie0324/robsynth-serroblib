% Calculate minimal parameter regressor of coriolis matrix for
% S6RRPPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RRPPRP3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RRPPRP3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:35:36
% EndTime: 2019-03-09 08:35:44
% DurationCPUTime: 3.14s
% Computational Cost: add. (3209->323), mult. (5076->437), div. (0->0), fcn. (4308->4), ass. (0->253)
t184 = cos(qJ(5));
t257 = qJD(5) * t184;
t183 = sin(qJ(2));
t316 = t183 * pkin(5);
t185 = cos(qJ(2));
t278 = t184 * t185;
t167 = t183 * qJ(4);
t315 = t183 * pkin(7);
t132 = -t167 + t315;
t182 = sin(qJ(5));
t287 = t132 * t182;
t168 = t183 * qJ(3);
t267 = -t185 * pkin(2) - t168;
t127 = -pkin(1) + t267;
t104 = t185 * pkin(3) - t127;
t74 = pkin(4) * t183 + pkin(8) * t185 + t104;
t55 = -t184 * t74 + t287;
t50 = qJ(6) * t278 - t55;
t46 = t50 + t316;
t327 = t46 / 0.2e1;
t232 = -t50 / 0.2e1 + t327;
t233 = t316 / 0.2e1;
t193 = (t233 + t232) * t184;
t329 = qJD(1) * t193;
t331 = pkin(5) * t257 + t329;
t177 = t182 ^ 2;
t179 = t184 ^ 2;
t323 = -t179 / 0.2e1;
t213 = -t177 / 0.2e1 + t323;
t129 = -0.1e1 / 0.2e1 + t213;
t244 = t185 * qJD(3);
t330 = t267 * qJD(2) + t244;
t231 = t182 * t278;
t212 = 0.2e1 * t231;
t154 = t177 * t183;
t156 = t179 * t183;
t114 = -t154 - t156;
t328 = -qJD(4) * t114 + qJD(5) * t193;
t279 = t184 * qJ(6);
t170 = t185 * qJ(4);
t313 = t185 * pkin(7);
t134 = -t170 + t313;
t285 = t134 * t182;
t314 = t185 * pkin(5);
t181 = qJ(3) + pkin(4);
t186 = -pkin(2) - pkin(3);
t174 = -pkin(8) + t186;
t284 = t174 * t183;
t75 = t181 * t185 + t284;
t73 = t184 * t75;
t49 = -t183 * t279 - t285 + t314 + t73;
t326 = t49 / 0.2e1;
t324 = t177 / 0.2e1;
t322 = -t182 / 0.2e1;
t321 = t182 / 0.2e1;
t320 = t184 / 0.2e1;
t319 = t185 / 0.2e1;
t318 = pkin(5) * t184;
t317 = t182 * pkin(5);
t312 = -t46 + t50;
t311 = pkin(5) * qJD(5);
t241 = pkin(5) * t278;
t286 = t132 * t184;
t51 = t286 + (qJ(6) * t185 + t74) * t182;
t230 = -pkin(7) + t317;
t96 = -t185 * t230 - t170;
t7 = -t96 * t241 + t312 * t51;
t309 = qJD(1) * t7;
t281 = t182 * t185;
t8 = t312 * t281;
t308 = qJD(1) * t8;
t135 = t182 * t233;
t9 = t182 * t232 + t135;
t307 = qJD(1) * t9;
t306 = t46 * t184;
t282 = t182 * t183;
t112 = t134 * t184;
t72 = t182 * t75;
t302 = t112 + t72;
t54 = -qJ(6) * t282 + t302;
t95 = t183 * t230 + t167;
t5 = t46 * t49 + t51 * t54 + t95 * t96;
t305 = t5 * qJD(1);
t6 = (-t183 * t46 + t185 * t49) * t184 + (-t183 * t51 + t185 * t54) * t182;
t304 = t6 * qJD(1);
t303 = t96 * t182;
t121 = (qJ(6) - t174) * t182;
t290 = t121 * t183;
t208 = t290 / 0.2e1 - t54 / 0.2e1;
t150 = t181 + t318;
t276 = t185 * t150;
t214 = -t276 / 0.2e1;
t122 = t174 * t184 - t279;
t289 = t122 * t183;
t18 = t214 + (-t289 / 0.2e1 - t49 / 0.2e1) * t184 + t208 * t182;
t300 = qJD(1) * t18;
t280 = t183 * t184;
t19 = t185 * t96 + t51 * t280 - t46 * t282;
t299 = qJD(1) * t19;
t205 = t51 * t182 + t306;
t22 = t205 * t183;
t298 = qJD(1) * t22;
t23 = t205 * t185;
t297 = qJD(1) * t23;
t30 = -t134 * t281 - t183 * t55;
t296 = qJD(1) * t30;
t56 = t182 * t74 + t286;
t31 = -t134 * t278 - t183 * t56;
t295 = qJD(1) * t31;
t277 = t185 * qJ(3);
t107 = t186 * t183 + t277;
t57 = t104 * t185 + t107 * t183;
t294 = qJD(1) * t57;
t58 = -t104 * t183 + t107 * t185;
t293 = qJD(1) * t58;
t69 = t132 * t183 + t134 * t185;
t292 = qJD(1) * t69;
t291 = t121 * t182;
t288 = t122 * t184;
t178 = t183 ^ 2;
t283 = t178 * t182;
t180 = t185 ^ 2;
t155 = t182 * t180;
t20 = t73 * t183 + (-t55 + t287) * t185;
t275 = t20 * qJD(1);
t21 = t302 * t183 - t134 * t280 + (t56 - t286) * t185;
t274 = t21 * qJD(1);
t24 = t104 * t107;
t273 = t24 * qJD(1);
t133 = t183 * pkin(2) - t277;
t65 = t127 * t185 + t133 * t183;
t272 = t65 * qJD(1);
t66 = -t127 * t183 + t133 * t185;
t271 = t66 * qJD(1);
t242 = -pkin(2) / 0.2e1 - pkin(3) / 0.2e1;
t77 = t277 + (t186 / 0.2e1 + t242) * t183;
t270 = t77 * qJD(1);
t139 = t179 + t177;
t86 = t139 * t185 * t183;
t269 = t86 * qJD(1);
t88 = t129 * t185;
t268 = t88 * qJD(1);
t138 = t178 + t180;
t140 = t179 - t177;
t141 = t180 - t178;
t118 = -t155 + t283;
t266 = qJD(1) * t118;
t120 = t141 * t184;
t265 = qJD(1) * t120;
t264 = qJD(3) * t182;
t263 = qJD(3) * t183;
t262 = qJD(3) * t184;
t260 = qJD(4) * t185;
t259 = qJD(5) * t182;
t258 = qJD(5) * t183;
t256 = t114 * qJD(1);
t115 = t139 * t180;
t255 = t115 * qJD(1);
t117 = t155 + t283;
t254 = t117 * qJD(1);
t119 = t138 * t184;
t253 = t119 * qJD(1);
t252 = t129 * qJD(2);
t251 = t138 * qJD(1);
t250 = t139 * qJD(2);
t249 = t141 * qJD(1);
t164 = t178 * qJD(1);
t163 = t178 * qJD(3);
t248 = t182 * qJD(2);
t165 = t183 * qJD(1);
t247 = t183 * qJD(2);
t246 = t184 * qJD(2);
t245 = t185 * qJD(1);
t166 = t185 * qJD(2);
t243 = t185 * qJD(5);
t240 = pkin(1) * t165;
t239 = pkin(1) * t245;
t238 = pkin(5) * t259;
t236 = pkin(7) * t247;
t235 = pkin(7) * t166;
t234 = -t316 / 0.2e1;
t229 = t182 * t164;
t228 = t182 * t246;
t227 = t182 * t166;
t226 = t184 * t166;
t225 = t183 * t244;
t224 = t182 * t243;
t223 = t183 * t257;
t222 = t184 * t243;
t221 = t127 * t133 * qJD(1);
t220 = t127 * t165;
t219 = t182 * t257;
t218 = t182 * t165;
t217 = t182 * t245;
t145 = t183 * t166;
t144 = t183 * t245;
t216 = t184 * t245;
t215 = t280 / 0.2e1;
t211 = qJD(5) + t165;
t210 = t315 / 0.2e1 - t167 / 0.2e1;
t209 = t313 / 0.2e1 - t170 / 0.2e1;
t207 = t122 * t319 + t327;
t206 = qJD(2) * t212;
t1 = t232 * t122 + (t326 + t276 * t320 + t303 / 0.2e1) * pkin(5);
t26 = t150 * t317;
t204 = -qJD(1) * t1 - qJD(2) * t26;
t199 = (-t51 / 0.2e1 + t121 * t319) * t184;
t13 = t199 + (t234 + t207) * t182 + t210;
t64 = t288 - t291;
t203 = qJD(1) * t13 - qJD(2) * t64;
t200 = t289 / 0.2e1 - t314 / 0.2e1;
t16 = t208 * t184 + (t326 + t200) * t182 + t209;
t202 = qJD(1) * t16 + qJD(2) * t150;
t201 = t211 * t185;
t198 = t284 / 0.2e1 + t181 * t319;
t189 = t198 * t184;
t53 = -t73 / 0.2e1 - t189;
t197 = -qJD(1) * t53 + t181 * t248;
t188 = t198 * t182;
t52 = t72 / 0.2e1 + t188;
t196 = -qJD(1) * t52 + t181 * t246;
t106 = (t324 + t323) * t185;
t195 = -qJD(1) * t106 + t228;
t194 = t216 + t248;
t192 = qJD(1) * t184 * t155 + qJD(2) * t106;
t116 = t140 * t180;
t191 = qJD(1) * t116 + t206;
t190 = qJD(1) * t212 - qJD(2) * t140;
t187 = (-t174 * t185 + t181 * t183) * qJD(2) - t244;
t176 = qJ(3) * qJD(3);
t175 = qJD(2) * qJ(3);
t151 = t166 / 0.2e1;
t147 = t182 * t258;
t146 = t184 * t165;
t128 = 0.1e1 / 0.2e1 + t213;
t124 = t134 * qJD(2);
t111 = -t146 - t257;
t110 = t211 * t182;
t109 = t144 + t243 / 0.2e1;
t105 = t194 * pkin(5);
t97 = t106 * qJD(5);
t90 = (-t186 / 0.2e1 + t242) * t183;
t89 = t179 * t319 + (t324 - 0.1e1 / 0.2e1) * t185;
t33 = -t285 + t73 / 0.2e1 - t189;
t32 = -t112 - t72 / 0.2e1 + t188;
t17 = t214 + t54 * t321 + t49 * t320 + (-t288 / 0.2e1 + t291 / 0.2e1) * t183;
t15 = t121 * t215 + t200 * t182 + t54 * t320 + t49 * t322 + t209;
t14 = t182 * t207 + t135 + t199 - t210;
t12 = t50 * t320 - t306 / 0.2e1 + pkin(5) * t215;
t11 = t50 * t321 + t46 * t322 + t135;
t4 = (t232 + t234) * t184;
t2 = t214 * t318 + (t50 / 0.2e1 - t46 / 0.2e1) * t122 + (-t303 / 0.2e1 + t326) * pkin(5);
t3 = [0, 0, 0, t145, t141 * qJD(2), 0, 0, 0, -pkin(1) * t247, -pkin(1) * t166, -qJD(2) * t66 + t225, 0, -qJD(2) * t65 + t163 (qJD(2) * t133 - t263) * t127, qJD(2) * t57 + t163, -qJD(2) * t58 - t225, qJD(4) * t138, qJD(2) * t24 - qJD(4) * t69 + t104 * t263, -t145 * t179 - t180 * t219, -qJD(5) * t116 + t183 * t206, -qJD(2) * t120 + t183 * t224, -qJD(2) * t118 + t183 * t222, t145, qJD(2) * t20 + qJD(4) * t117 + qJD(5) * t31 + t163 * t184, -qJD(2) * t21 + qJD(4) * t119 - qJD(5) * t30 - t163 * t182, qJD(2) * t6 + qJD(3) * t86 + qJD(5) * t8 + qJD(6) * t115, qJD(2) * t5 + qJD(3) * t22 - qJD(4) * t19 + qJD(5) * t7 + qJD(6) * t23; 0, 0, 0, t144, t249, t166, -t247, 0, -t235 - t240, t236 - t239, -t235 - t271, t330, -t236 - t272, pkin(7) * t330 + t221, -qJD(2) * t132 + t294, t124 - t293 (-t185 * t186 + t168) * qJD(2) - t244, t273 + (-t132 * qJ(3) + t134 * t186) * qJD(2) + t134 * qJD(3) + t90 * qJD(4), -t97 + (-t179 * t245 - t228) * t183 (t154 - t156) * qJD(2) + (-qJD(5) + t165) * t212, -t227 - t265, -t226 - t266, t109, t33 * qJD(5) - t132 * t246 + t182 * t187 + t275, t32 * qJD(5) + t132 * t248 + t184 * t187 - t274, t304 + ((-t54 - t290) * t184 + (t49 - t289) * t182) * qJD(2) + t4 * qJD(5), t305 + (t121 * t49 + t122 * t54 + t150 * t95) * qJD(2) + t15 * qJD(3) + t17 * qJD(4) + t2 * qJD(5) + t14 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, t166, t164, -t220 + t235, t164, -t144, -t166, t104 * t165 + t124, 0, 0, 0, 0, 0, t164 * t184 - t227, -t226 - t229, t269, qJD(2) * t15 + qJD(5) * t12 + t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, qJD(2) * t90 - t292, 0, 0, 0, 0, 0, t254, t253, 0, qJD(2) * t17 + qJD(5) * t11 + qJD(6) * t89 - t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t192, -t191, t182 * t201, t184 * t201, t151, qJD(2) * t33 - qJD(5) * t56 + t295, qJD(2) * t32 + qJD(5) * t55 - t296, -pkin(5) * t224 + qJD(2) * t4 + t308, qJD(2) * t2 + qJD(3) * t12 + qJD(4) * t11 - t51 * t311 + t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t255, qJD(2) * t14 + qJD(4) * t89 + t297; 0, 0, 0, -t144, -t249, 0, 0, 0, t240, t239, t271, 0, t272, -t221, -t260 - t294, -qJD(4) * t183 + t293, 0, -qJD(4) * t77 - t273, t144 * t179 - t97, -0.2e1 * t211 * t231, -t223 + t265, t147 + t266, -t109, qJD(5) * t53 - t184 * t260 - t275, qJD(5) * t52 + t182 * t260 + t274, -t304 + t328, qJD(3) * t16 + qJD(4) * t18 - qJD(5) * t1 + qJD(6) * t13 - t305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t176, qJD(3), 0, 0, t176, t219, t140 * qJD(5), 0, 0, 0, -t181 * t259 + t262, -t181 * t257 - t264, qJD(6) * t139, qJD(3) * t150 - qJD(5) * t26 - qJD(6) * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t175, qJD(2), 0, 0, t175, 0, 0, 0, 0, 0, t246, -t248, 0, qJD(6) * t128 + t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t245, -t165, 0, -t270, 0, 0, 0, 0, 0, -t216, t217, -t256, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t195, -t190, t111, t110, -t245 / 0.2e1, -t174 * t257 - t197, t174 * t259 - t196, t331, -t122 * t311 + t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t250, qJD(3) * t128 + t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144, 0, -t164, t220, -t164, t144, 0 (-qJD(1) * t104 - qJD(4)) * t183, 0, 0, 0, 0, 0 (-t164 - t258) * t184, t147 + t229, -t269, -qJD(2) * t16 - t298 - t328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2), -t175, -qJD(2), 0, 0, -t175, 0, 0, 0, 0, 0, -t246, t248, 0, qJD(6) * t129 - t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t165, 0, 0, 0, 0, 0, 0, 0, 0, t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, t110, 0, -t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, t247, -t251, qJD(2) * t77 + t263 + t292, 0, 0, 0, 0, 0, -t147 + t226 - t254, -t223 - t227 - t253, t114 * qJD(2), -qJD(2) * t18 - qJD(3) * t114 - qJD(5) * t9 - qJD(6) * t88 + t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t245, t165, 0, t270, 0, 0, 0, 0, 0, t216, -t217, t256, -t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, 0, 0, 0, 0, 0, 0, 0, 0, -t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110, t111, 0, -t238 - t307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, t191 (-t217 + t246) * t183, -t194 * t183, t151, -t295 - qJD(2) * t53 + (qJD(4) * t182 + t262) * t183, t296 - qJD(2) * t52 + (qJD(4) * t184 - t264) * t183, -qJD(2) * t193 - t308, qJD(2) * t1 + qJD(3) * t193 + qJD(4) * t9 + qJD(6) * t241 - t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195, t190, t146, -t218, t245 / 0.2e1, t197, t196, -t329, qJD(6) * t317 - t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, -t218, 0, t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218, t146, 0, t307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t255, -pkin(5) * t222 - qJD(2) * t13 + qJD(4) * t88 - t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t250, -t129 * qJD(3) - t203 - t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t3;
