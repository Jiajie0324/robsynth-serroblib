% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 04:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 04:29:14
% EndTime: 2019-05-06 04:29:47
% DurationCPUTime: 19.52s
% Computational Cost: add. (145649->726), mult. (290496->1079), div. (0->0), fcn. (202076->10), ass. (0->485)
t801 = sin(qJ(6));
t803 = sin(qJ(4));
t808 = cos(qJ(4));
t809 = cos(qJ(3));
t853 = qJD(1) * t809;
t764 = -t808 * qJD(3) + t803 * t853;
t766 = qJD(3) * t803 + t808 * t853;
t802 = sin(qJ(5));
t807 = cos(qJ(5));
t720 = t807 * t764 + t766 * t802;
t722 = -t764 * t802 + t766 * t807;
t806 = cos(qJ(6));
t667 = t806 * t720 + t722 * t801;
t669 = -t720 * t801 + t722 * t806;
t612 = t669 * t667;
t849 = qJD(1) * qJD(3);
t833 = t809 * t849;
t804 = sin(qJ(3));
t847 = qJDD(1) * t804;
t769 = -t833 - t847;
t762 = qJDD(4) - t769;
t758 = qJDD(5) + t762;
t813 = qJDD(6) + t758;
t894 = -t612 + t813;
t901 = t801 * t894;
t676 = t722 * t720;
t892 = -t676 + t758;
t900 = t802 * t892;
t730 = t766 * t764;
t890 = -t730 + t762;
t899 = t803 * t890;
t898 = t806 * t894;
t897 = t807 * t892;
t896 = t808 * t890;
t790 = qJD(1) * t804 + qJD(4);
t784 = qJD(5) + t790;
t706 = t784 * t720;
t834 = t804 * t849;
t845 = qJDD(1) * t809;
t770 = -t834 + t845;
t830 = -t808 * qJDD(3) + t803 * t770;
t715 = -qJD(4) * t766 - t830;
t836 = t764 * qJD(4) - t803 * qJDD(3) - t808 * t770;
t815 = qJD(5) * t720 - t715 * t802 + t807 * t836;
t609 = -t706 + t815;
t747 = t790 * t764;
t691 = -t747 + t836;
t812 = qJD(1) ^ 2;
t889 = pkin(7) + pkin(1);
t895 = t812 * t889;
t778 = qJD(6) + t784;
t651 = t778 * t667;
t831 = -t807 * t715 - t802 * t836;
t637 = -qJD(5) * t722 - t831;
t814 = qJD(6) * t667 - t637 * t801 + t806 * t815;
t893 = -t651 - t814;
t891 = -t706 - t815;
t690 = t836 + t747;
t832 = -t806 * t637 - t801 * t815;
t531 = (qJD(6) - t778) * t669 + t832;
t605 = (qJD(5) - t784) * t722 + t831;
t686 = (qJD(4) - t790) * t766 + t830;
t665 = t667 ^ 2;
t666 = t669 ^ 2;
t718 = t720 ^ 2;
t719 = t722 ^ 2;
t760 = t764 ^ 2;
t761 = t766 ^ 2;
t775 = t778 ^ 2;
t783 = t784 ^ 2;
t789 = t790 ^ 2;
t888 = pkin(3) * t804;
t887 = qJDD(1) * pkin(1);
t848 = qJD(2) * qJD(1);
t796 = 0.2e1 * t848;
t805 = sin(qJ(1));
t810 = cos(qJ(1));
t782 = t810 * g(1) + t805 * g(2);
t798 = qJDD(1) * qJ(2);
t819 = t782 - t798;
t817 = t796 - t819;
t820 = -t770 + t834;
t821 = -t769 + t833;
t681 = pkin(3) * t821 + pkin(8) * t820 + t817 - t895;
t781 = t805 * g(1) - t810 * g(2);
t822 = qJDD(2) - t781;
t816 = -t812 * qJ(2) + t822;
t746 = -qJDD(1) * t889 + t816;
t725 = -t809 * g(3) + t804 * t746;
t811 = qJD(3) ^ 2;
t827 = -pkin(8) * t809 + t888;
t818 = t812 * t827;
t695 = -t811 * pkin(3) + qJDD(3) * pkin(8) - t804 * t818 + t725;
t630 = -t808 * t681 + t803 * t695;
t578 = t890 * pkin(4) + pkin(9) * t691 - t630;
t631 = t803 * t681 + t808 * t695;
t826 = pkin(4) * t790 - pkin(9) * t766;
t585 = -t760 * pkin(4) + t715 * pkin(9) - t790 * t826 + t631;
t522 = -t807 * t578 + t802 * t585;
t493 = t892 * pkin(5) + pkin(10) * t609 - t522;
t523 = t802 * t578 + t807 * t585;
t825 = pkin(5) * t784 - pkin(10) * t722;
t502 = -t718 * pkin(5) + t637 * pkin(10) - t784 * t825 + t523;
t447 = -t806 * t493 + t502 * t801;
t448 = t801 * t493 + t806 * t502;
t411 = -t447 * t806 + t448 * t801;
t886 = t411 * t802;
t885 = t411 * t807;
t466 = -t522 * t807 + t523 * t802;
t884 = t466 * t803;
t883 = t466 * t808;
t724 = g(3) * t804 + t746 * t809;
t694 = qJDD(3) * pkin(3) + pkin(8) * t811 - t809 * t818 + t724;
t617 = pkin(4) * t715 + pkin(9) * t760 - t766 * t826 + t694;
t537 = pkin(5) * t637 + pkin(10) * t718 - t722 * t825 + t617;
t882 = t537 * t801;
t881 = t537 * t806;
t596 = t612 + t813;
t880 = t596 * t801;
t879 = t596 * t806;
t878 = t617 * t802;
t877 = t617 * t807;
t654 = t676 + t758;
t876 = t654 * t802;
t875 = t654 * t807;
t874 = t694 * t803;
t873 = t694 * t808;
t710 = t730 + t762;
t872 = t710 * t803;
t871 = t710 * t808;
t799 = t804 ^ 2;
t800 = t809 ^ 2;
t854 = t799 + t800;
t772 = t854 * qJDD(1);
t870 = t772 * t805;
t869 = t772 * t810;
t868 = t778 * t801;
t867 = t778 * t806;
t837 = t804 * t809 * t812;
t779 = qJDD(3) + t837;
t866 = t779 * t804;
t865 = t779 * t809;
t780 = qJDD(3) - t837;
t864 = t780 * t804;
t863 = t780 * t809;
t862 = t784 * t802;
t861 = t784 * t807;
t860 = t790 * t803;
t859 = t790 * t808;
t858 = t799 * t812;
t857 = t800 * t812;
t741 = t819 - 0.2e1 * t848 + t895;
t856 = t804 * t741;
t855 = t809 * t741;
t846 = qJDD(1) * t805;
t844 = qJDD(1) * t810;
t843 = t804 * t612;
t842 = t809 * t612;
t841 = t804 * t676;
t840 = t809 * t676;
t839 = t804 * t730;
t838 = t809 * t730;
t835 = pkin(3) * t809 + pkin(2);
t412 = t447 * t801 + t806 * t448;
t467 = t522 * t802 + t807 * t523;
t573 = t630 * t803 + t808 * t631;
t748 = -t812 * pkin(1) + t817;
t749 = -t816 + t887;
t701 = t810 * t748 - t749 * t805;
t732 = -t781 * t805 - t810 * t782;
t829 = t805 * t837;
t828 = t810 * t837;
t773 = -t805 * t812 + t844;
t824 = pkin(6) * t773 + g(3) * t805;
t774 = t810 * t812 + t846;
t823 = -pkin(6) * t774 + g(3) * t810;
t572 = -t630 * t808 + t631 * t803;
t679 = t809 * t724 + t804 * t725;
t680 = -t724 * t804 + t725 * t809;
t698 = t748 * t805 + t749 * t810;
t731 = t781 * t810 - t782 * t805;
t788 = -t811 - t857;
t787 = t811 - t857;
t786 = -t811 - t858;
t785 = -t811 + t858;
t777 = (-t799 + t800) * t812;
t776 = t854 * t812;
t771 = -0.2e1 * t834 + t845;
t768 = 0.2e1 * t833 + t847;
t763 = t854 * t849;
t745 = -t761 + t789;
t744 = t760 - t789;
t743 = -t770 * t804 - t800 * t849;
t742 = -t769 * t809 - t799 * t849;
t738 = -t788 * t804 - t865;
t737 = t786 * t809 - t864;
t736 = t788 * t809 - t866;
t735 = -t787 * t809 - t864;
t734 = t786 * t804 + t863;
t733 = -t785 * t804 - t865;
t729 = -t761 + t760;
t728 = -t776 * t810 - t870;
t727 = -t776 * t805 + t869;
t726 = -t761 - t789;
t723 = t768 * t804 - t771 * t809;
t717 = -t789 - t760;
t708 = t760 + t761;
t705 = -t719 + t783;
t704 = t718 - t783;
t703 = t736 * t805 + t771 * t810;
t702 = t734 * t805 + t768 * t810;
t700 = -t736 * t810 + t771 * t805;
t699 = -t734 * t810 + t768 * t805;
t697 = (-t764 * t808 + t766 * t803) * t790;
t696 = (-t764 * t803 - t766 * t808) * t790;
t693 = -t719 - t783;
t687 = (-qJD(4) - t790) * t766 - t830;
t685 = -t766 * t860 - t808 * t836;
t684 = t766 * t859 - t803 * t836;
t683 = -t715 * t803 + t764 * t859;
t682 = t715 * t808 + t764 * t860;
t675 = -t697 * t804 + t762 * t809;
t674 = -t719 + t718;
t673 = t744 * t808 - t872;
t672 = -t745 * t803 + t896;
t671 = t744 * t803 + t871;
t670 = t745 * t808 + t899;
t664 = -t726 * t803 - t871;
t663 = t726 * t808 - t872;
t662 = -t783 - t718;
t661 = -pkin(2) * t776 - t680;
t659 = pkin(2) * t736 - qJ(2) * t738 - t725;
t658 = pkin(2) * t734 - qJ(2) * t737 + t724;
t657 = t717 * t808 - t899;
t656 = t717 * t803 + t896;
t650 = -t666 + t775;
t649 = t665 - t775;
t648 = (-t720 * t807 + t722 * t802) * t784;
t647 = (-t720 * t802 - t722 * t807) * t784;
t646 = pkin(2) * t768 - t737 * t889 - t855;
t645 = pkin(2) * t771 - t738 * t889 + t856;
t644 = t679 * t805 - t741 * t810;
t643 = -t679 * t810 - t741 * t805;
t642 = -t666 - t775;
t641 = -t685 * t804 + t838;
t640 = -t683 * t804 - t838;
t639 = -t718 - t719;
t635 = -t686 * t808 - t691 * t803;
t634 = t687 * t808 + t690 * t803;
t633 = -t686 * t803 + t691 * t808;
t632 = t687 * t803 - t690 * t808;
t628 = -t673 * t804 - t686 * t809;
t627 = -t672 * t804 - t691 * t809;
t626 = t704 * t807 - t876;
t625 = -t705 * t802 + t897;
t624 = t704 * t802 + t875;
t623 = t705 * t807 + t900;
t622 = -pkin(8) * t663 - t873;
t621 = pkin(2) * t679 - qJ(2) * t680;
t620 = -pkin(8) * t656 - t874;
t619 = t664 * t809 - t690 * t804;
t618 = t664 * t804 + t690 * t809;
t616 = -t693 * t802 - t875;
t615 = t693 * t807 - t876;
t614 = t657 * t809 - t687 * t804;
t613 = t657 * t804 + t687 * t809;
t611 = -t666 + t665;
t610 = -t634 * t804 - t729 * t809;
t604 = (qJD(5) + t784) * t722 + t831;
t603 = -pkin(2) * t741 - t680 * t889;
t602 = -t775 - t665;
t601 = -t722 * t862 - t807 * t815;
t600 = t722 * t861 - t802 * t815;
t599 = -t637 * t802 + t720 * t861;
t598 = t637 * t807 + t720 * t862;
t594 = t662 * t807 - t900;
t593 = t662 * t802 + t897;
t592 = t635 * t809 - t708 * t804;
t591 = t635 * t804 + t708 * t809;
t590 = (-t667 * t806 + t669 * t801) * t778;
t589 = (-t667 * t801 - t669 * t806) * t778;
t588 = -t647 * t803 + t648 * t808;
t587 = t647 * t808 + t648 * t803;
t586 = -pkin(3) * t663 + t631;
t584 = -pkin(3) * t656 + t630;
t582 = -t588 * t804 + t758 * t809;
t581 = t618 * t805 + t663 * t810;
t580 = -t618 * t810 + t663 * t805;
t579 = -t665 - t666;
t575 = t613 * t805 + t656 * t810;
t574 = -t613 * t810 + t656 * t805;
t571 = t649 * t806 - t880;
t570 = -t650 * t801 + t898;
t569 = t649 * t801 + t879;
t568 = t650 * t806 + t901;
t567 = -t642 * t801 - t879;
t566 = t642 * t806 - t880;
t565 = -t624 * t803 + t626 * t808;
t564 = -t623 * t803 + t625 * t808;
t563 = t624 * t808 + t626 * t803;
t562 = t623 * t808 + t625 * t803;
t561 = -pkin(9) * t615 - t877;
t560 = -t615 * t803 + t616 * t808;
t559 = t615 * t808 + t616 * t803;
t558 = t591 * t805 + t633 * t810;
t557 = -t591 * t810 + t633 * t805;
t556 = t573 * t809 - t694 * t804;
t555 = t573 * t804 + t694 * t809;
t553 = -qJD(6) * t669 - t832;
t552 = -pkin(9) * t593 - t878;
t551 = -t605 * t807 - t609 * t802;
t550 = -t604 * t807 - t802 * t891;
t549 = -t605 * t802 + t609 * t807;
t548 = -t604 * t802 + t807 * t891;
t547 = t602 * t806 - t901;
t546 = t602 * t801 + t898;
t545 = -t600 * t803 + t601 * t808;
t544 = -t598 * t803 + t599 * t808;
t543 = t600 * t808 + t601 * t803;
t542 = t598 * t808 + t599 * t803;
t541 = -t593 * t803 + t594 * t808;
t540 = t593 * t808 + t594 * t803;
t539 = -t589 * t802 + t590 * t807;
t538 = t589 * t807 + t590 * t802;
t536 = -pkin(8) * t633 - t572;
t535 = -t651 + t814;
t530 = (qJD(6) + t778) * t669 + t832;
t529 = -t669 * t868 - t806 * t814;
t528 = t669 * t867 - t801 * t814;
t527 = -t553 * t801 + t667 * t867;
t526 = t553 * t806 + t667 * t868;
t525 = -t545 * t804 + t840;
t524 = -t544 * t804 - t840;
t521 = -t565 * t804 - t605 * t809;
t520 = -t564 * t804 - t609 * t809;
t518 = -pkin(4) * t891 + pkin(9) * t616 - t878;
t517 = t560 * t809 + t804 * t891;
t516 = t560 * t804 - t809 * t891;
t515 = -pkin(4) * t604 + pkin(9) * t594 + t877;
t514 = pkin(2) * t618 + pkin(3) * t690 + pkin(8) * t664 - qJ(2) * t619 - t874;
t513 = pkin(2) * t613 + pkin(3) * t687 + pkin(8) * t657 - qJ(2) * t614 + t873;
t512 = t541 * t809 + t604 * t804;
t511 = t541 * t804 - t604 * t809;
t510 = -t569 * t802 + t571 * t807;
t509 = -t568 * t802 + t570 * t807;
t508 = t569 * t807 + t571 * t802;
t507 = t568 * t807 + t570 * t802;
t506 = -t566 * t802 + t567 * t807;
t505 = t566 * t807 + t567 * t802;
t504 = t555 * t805 + t572 * t810;
t503 = -t555 * t810 + t572 * t805;
t501 = -pkin(10) * t566 - t881;
t499 = -t549 * t803 + t551 * t808;
t498 = -t548 * t803 + t550 * t808;
t497 = t549 * t808 + t551 * t803;
t496 = t548 * t808 + t550 * t803;
t495 = -t546 * t802 + t547 * t807;
t494 = t546 * t807 + t547 * t802;
t490 = pkin(2) * t663 - t809 * t586 - t619 * t889 - t804 * t622;
t489 = -pkin(10) * t546 - t882;
t488 = -t538 * t803 + t539 * t808;
t487 = t538 * t808 + t539 * t803;
t486 = -t498 * t804 - t674 * t809;
t485 = pkin(2) * t656 - t809 * t584 - t614 * t889 - t804 * t620;
t484 = -t488 * t804 + t809 * t813;
t483 = t516 * t805 + t559 * t810;
t482 = -t516 * t810 + t559 * t805;
t481 = pkin(2) * t591 + pkin(3) * t708 + pkin(8) * t635 - qJ(2) * t592 + t573;
t480 = t499 * t809 + t639 * t804;
t479 = t499 * t804 - t639 * t809;
t478 = -t531 * t806 - t535 * t801;
t477 = -t530 * t806 - t801 * t893;
t476 = -t531 * t801 + t535 * t806;
t475 = -t530 * t801 + t806 * t893;
t474 = -t528 * t802 + t529 * t807;
t473 = -t526 * t802 + t527 * t807;
t472 = t528 * t807 + t529 * t802;
t471 = t526 * t807 + t527 * t802;
t470 = t511 * t805 + t540 * t810;
t469 = -t511 * t810 + t540 * t805;
t468 = -pkin(3) * t559 - pkin(4) * t615 + t523;
t465 = pkin(2) * t555 + pkin(3) * t694 + pkin(8) * t573 - qJ(2) * t556;
t464 = -pkin(3) * t540 - pkin(4) * t593 + t522;
t463 = -t804 * t536 - t592 * t889 + t633 * t835;
t462 = -pkin(3) * t497 - pkin(4) * t549;
t461 = pkin(4) * t617 + pkin(9) * t467;
t460 = -pkin(8) * t559 - t518 * t803 + t561 * t808;
t459 = -pkin(5) * t893 + pkin(10) * t567 - t882;
t458 = -t508 * t803 + t510 * t808;
t457 = -t507 * t803 + t509 * t808;
t456 = t508 * t808 + t510 * t803;
t455 = t507 * t808 + t509 * t803;
t454 = -t505 * t803 + t506 * t808;
t453 = t505 * t808 + t506 * t803;
t452 = -pkin(5) * t530 + pkin(10) * t547 + t881;
t451 = -pkin(8) * t540 - t515 * t803 + t552 * t808;
t450 = -pkin(9) * t549 - t466;
t449 = -pkin(4) * t639 + pkin(9) * t551 + t467;
t445 = -t494 * t803 + t495 * t808;
t444 = t494 * t808 + t495 * t803;
t443 = -t889 * t556 + (pkin(8) * t804 + t835) * t572;
t442 = t479 * t805 + t497 * t810;
t441 = -t479 * t810 + t497 * t805;
t440 = -t458 * t804 - t531 * t809;
t439 = -t457 * t804 - t535 * t809;
t438 = t454 * t809 + t804 * t893;
t437 = t454 * t804 - t809 * t893;
t436 = -t476 * t802 + t478 * t807;
t435 = -t475 * t802 + t477 * t807;
t434 = t476 * t807 + t478 * t802;
t433 = t475 * t807 + t477 * t802;
t432 = -t472 * t803 + t474 * t808;
t431 = -t471 * t803 + t473 * t808;
t430 = t472 * t808 + t474 * t803;
t429 = t471 * t808 + t473 * t803;
t428 = t445 * t809 + t530 * t804;
t427 = t445 * t804 - t530 * t809;
t426 = t467 * t808 - t884;
t425 = t467 * t803 + t883;
t424 = -t432 * t804 + t842;
t423 = -t431 * t804 - t842;
t422 = t426 * t809 - t617 * t804;
t421 = t426 * t804 + t617 * t809;
t420 = pkin(2) * t516 - pkin(3) * t891 + pkin(8) * t560 - qJ(2) * t517 + t518 * t808 + t561 * t803;
t419 = -pkin(9) * t505 - t459 * t802 + t501 * t807;
t418 = pkin(2) * t511 - pkin(3) * t604 + pkin(8) * t541 - qJ(2) * t512 + t515 * t808 + t552 * t803;
t417 = -pkin(9) * t494 - t452 * t802 + t489 * t807;
t416 = t437 * t805 + t453 * t810;
t415 = -t437 * t810 + t453 * t805;
t414 = -pkin(4) * t893 + pkin(9) * t506 + t459 * t807 + t501 * t802;
t413 = -pkin(3) * t425 - pkin(4) * t466;
t410 = -pkin(4) * t530 + pkin(9) * t495 + t452 * t807 + t489 * t802;
t409 = pkin(5) * t537 + pkin(10) * t412;
t408 = t427 * t805 + t444 * t810;
t407 = -t427 * t810 + t444 * t805;
t406 = pkin(2) * t559 - t804 * t460 - t809 * t468 - t517 * t889;
t405 = -pkin(8) * t497 - t449 * t803 + t450 * t808;
t404 = -t434 * t803 + t436 * t808;
t403 = -t433 * t803 + t435 * t808;
t402 = t434 * t808 + t436 * t803;
t401 = t433 * t808 + t435 * t803;
t400 = -pkin(3) * t453 - pkin(4) * t505 - pkin(5) * t566 + t448;
t399 = -t403 * t804 - t611 * t809;
t398 = pkin(2) * t540 - t804 * t451 - t809 * t464 - t512 * t889;
t397 = t404 * t809 + t579 * t804;
t396 = t404 * t804 - t579 * t809;
t395 = -pkin(10) * t476 - t411;
t394 = -pkin(8) * t425 - pkin(9) * t883 - t461 * t803;
t393 = -pkin(3) * t444 - pkin(4) * t494 - pkin(5) * t546 + t447;
t392 = t421 * t805 + t425 * t810;
t391 = -t421 * t810 + t425 * t805;
t390 = -pkin(5) * t579 + pkin(10) * t478 + t412;
t389 = pkin(2) * t479 - pkin(3) * t639 + pkin(8) * t499 - qJ(2) * t480 + t449 * t808 + t450 * t803;
t388 = t412 * t807 - t886;
t387 = t412 * t802 + t885;
t386 = -pkin(3) * t402 - pkin(4) * t434 - pkin(5) * t476;
t385 = -pkin(8) * t453 - t414 * t803 + t419 * t808;
t384 = pkin(2) * t497 - t804 * t405 - t809 * t462 - t480 * t889;
t383 = t396 * t805 + t402 * t810;
t382 = -t396 * t810 + t402 * t805;
t381 = -pkin(8) * t444 - t410 * t803 + t417 * t808;
t380 = pkin(2) * t421 + pkin(3) * t617 + pkin(8) * t426 - pkin(9) * t884 - qJ(2) * t422 + t461 * t808;
t379 = -pkin(9) * t434 - t390 * t802 + t395 * t807;
t378 = -pkin(4) * t579 + pkin(9) * t436 + t390 * t807 + t395 * t802;
t377 = pkin(2) * t437 - pkin(3) * t893 + pkin(8) * t454 - qJ(2) * t438 + t414 * t808 + t419 * t803;
t376 = pkin(2) * t427 - pkin(3) * t530 + pkin(8) * t445 - qJ(2) * t428 + t410 * t808 + t417 * t803;
t375 = -t387 * t803 + t388 * t808;
t374 = t387 * t808 + t388 * t803;
t373 = -pkin(9) * t387 - pkin(10) * t885 - t409 * t802;
t372 = t375 * t809 - t537 * t804;
t371 = t375 * t804 + t537 * t809;
t370 = pkin(4) * t537 + pkin(9) * t388 - pkin(10) * t886 + t409 * t807;
t369 = pkin(2) * t425 - t804 * t394 - t809 * t413 - t422 * t889;
t368 = pkin(2) * t453 - t804 * t385 - t809 * t400 - t438 * t889;
t367 = pkin(2) * t444 - t804 * t381 - t809 * t393 - t428 * t889;
t366 = -pkin(3) * t374 - pkin(4) * t387 - pkin(5) * t411;
t365 = -pkin(8) * t402 - t378 * t803 + t379 * t808;
t364 = t371 * t805 + t374 * t810;
t363 = -t371 * t810 + t374 * t805;
t362 = pkin(2) * t396 - pkin(3) * t579 + pkin(8) * t404 - qJ(2) * t397 + t378 * t808 + t379 * t803;
t361 = -pkin(8) * t374 - t370 * t803 + t373 * t808;
t360 = pkin(2) * t402 - t804 * t365 - t809 * t386 - t397 * t889;
t359 = pkin(2) * t371 + pkin(3) * t537 + pkin(8) * t375 - qJ(2) * t372 + t370 * t808 + t373 * t803;
t358 = pkin(2) * t374 - t804 * t361 - t809 * t366 - t372 * t889;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t774, -t773, 0, t732, 0, 0, 0, 0, 0, 0, 0, t774, t773, t701, 0, 0, 0, 0, 0, 0, t702, t703, t728, t644, 0, 0, 0, 0, 0, 0, t575, t581, t558, t504, 0, 0, 0, 0, 0, 0, t470, t483, t442, t392, 0, 0, 0, 0, 0, 0, t408, t416, t383, t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t773, -t774, 0, t731, 0, 0, 0, 0, 0, 0, 0, -t773, t774, t698, 0, 0, 0, 0, 0, 0, t699, t700, t727, t643, 0, 0, 0, 0, 0, 0, t574, t580, t557, t503, 0, 0, 0, 0, 0, 0, t469, t482, t441, t391, 0, 0, 0, 0, 0, 0, t407, t415, t382, t363; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t737, t738, 0, t680, 0, 0, 0, 0, 0, 0, t614, t619, t592, t556, 0, 0, 0, 0, 0, 0, t512, t517, t480, t422, 0, 0, 0, 0, 0, 0, t428, t438, t397, t372; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t773, 0, -t774, 0, -t824, -t823, -t731, -pkin(6) * t731, 0, -t773, t774, 0, 0, 0, -t698, t824, t823, -pkin(6) * t698 + (-pkin(1) * t805 + qJ(2) * t810) * g(3), -t743 * t805 + t828, -t723 * t805 + t777 * t810, -t735 * t805 + t809 * t844, -t742 * t805 - t828, -t733 * t805 - t804 * t844, qJDD(3) * t810 - t763 * t805, -pkin(6) * t699 - t646 * t805 + t658 * t810, -pkin(6) * t700 - t645 * t805 + t659 * t810, -pkin(2) * t869 - pkin(6) * t727 - t661 * t805, -pkin(6) * t643 - t603 * t805 + t621 * t810, -t641 * t805 + t684 * t810, -t610 * t805 + t632 * t810, -t627 * t805 + t670 * t810, -t640 * t805 + t682 * t810, -t628 * t805 + t671 * t810, -t675 * t805 + t696 * t810, -pkin(6) * t574 - t485 * t805 + t513 * t810, -pkin(6) * t580 - t490 * t805 + t514 * t810, -pkin(6) * t557 - t463 * t805 + t481 * t810, -pkin(6) * t503 - t443 * t805 + t465 * t810, -t525 * t805 + t543 * t810, -t486 * t805 + t496 * t810, -t520 * t805 + t562 * t810, -t524 * t805 + t542 * t810, -t521 * t805 + t563 * t810, -t582 * t805 + t587 * t810, -pkin(6) * t469 - t398 * t805 + t418 * t810, -pkin(6) * t482 - t406 * t805 + t420 * t810, -pkin(6) * t441 - t384 * t805 + t389 * t810, -pkin(6) * t391 - t369 * t805 + t380 * t810, -t424 * t805 + t430 * t810, -t399 * t805 + t401 * t810, -t439 * t805 + t455 * t810, -t423 * t805 + t429 * t810, -t440 * t805 + t456 * t810, -t484 * t805 + t487 * t810, -pkin(6) * t407 - t367 * t805 + t376 * t810, -pkin(6) * t415 - t368 * t805 + t377 * t810, -pkin(6) * t382 - t360 * t805 + t362 * t810, -pkin(6) * t363 - t358 * t805 + t359 * t810; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t774, 0, t773, 0, t823, -t824, t732, pkin(6) * t732, 0, -t774, -t773, 0, 0, 0, t701, -t823, t824, pkin(6) * t701 + (pkin(1) * t810 + qJ(2) * t805) * g(3), t743 * t810 + t829, t723 * t810 + t777 * t805, t735 * t810 + t805 * t845, t742 * t810 - t829, t733 * t810 - t804 * t846, qJDD(3) * t805 + t763 * t810, pkin(6) * t702 + t646 * t810 + t658 * t805, pkin(6) * t703 + t645 * t810 + t659 * t805, -pkin(2) * t870 + pkin(6) * t728 + t661 * t810, pkin(6) * t644 + t603 * t810 + t621 * t805, t641 * t810 + t684 * t805, t610 * t810 + t632 * t805, t627 * t810 + t670 * t805, t640 * t810 + t682 * t805, t628 * t810 + t671 * t805, t675 * t810 + t696 * t805, pkin(6) * t575 + t485 * t810 + t513 * t805, pkin(6) * t581 + t490 * t810 + t514 * t805, pkin(6) * t558 + t463 * t810 + t481 * t805, pkin(6) * t504 + t443 * t810 + t465 * t805, t525 * t810 + t543 * t805, t486 * t810 + t496 * t805, t520 * t810 + t562 * t805, t524 * t810 + t542 * t805, t521 * t810 + t563 * t805, t582 * t810 + t587 * t805, pkin(6) * t470 + t398 * t810 + t418 * t805, pkin(6) * t483 + t406 * t810 + t420 * t805, pkin(6) * t442 + t384 * t810 + t389 * t805, pkin(6) * t392 + t369 * t810 + t380 * t805, t424 * t810 + t430 * t805, t399 * t810 + t401 * t805, t439 * t810 + t455 * t805, t423 * t810 + t429 * t805, t440 * t810 + t456 * t805, t484 * t810 + t487 * t805, pkin(6) * t408 + t367 * t810 + t376 * t805, pkin(6) * t416 + t368 * t810 + t377 * t805, pkin(6) * t383 + t360 * t810 + t362 * t805, pkin(6) * t364 + t358 * t810 + t359 * t805; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t781, t782, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t822 - 0.2e1 * t887, -t782 + t796 + 0.2e1 * t798, pkin(1) * t749 + qJ(2) * t748, -t820 * t809, -t768 * t809 - t771 * t804, -t787 * t804 + t863, t821 * t804, t785 * t809 - t866, 0, qJ(2) * t768 - t734 * t889 - t856, qJ(2) * t771 - t736 * t889 - t855, -qJ(2) * t776 + t772 * t889 - t679, -qJ(2) * t741 - t679 * t889, t685 * t809 + t839, t634 * t809 - t729 * t804, t672 * t809 - t691 * t804, t683 * t809 - t839, t673 * t809 - t686 * t804, t697 * t809 + t762 * t804, qJ(2) * t656 - t804 * t584 - t613 * t889 + t809 * t620, qJ(2) * t663 - t804 * t586 - t618 * t889 + t809 * t622, t809 * t536 + (qJ(2) + t888) * t633 - t889 * t591, -t889 * t555 + (qJ(2) + t827) * t572, t545 * t809 + t841, t498 * t809 - t674 * t804, t564 * t809 - t609 * t804, t544 * t809 - t841, t565 * t809 - t605 * t804, t588 * t809 + t758 * t804, qJ(2) * t540 + t809 * t451 - t804 * t464 - t511 * t889, qJ(2) * t559 + t809 * t460 - t804 * t468 - t516 * t889, qJ(2) * t497 + t809 * t405 - t804 * t462 - t479 * t889, qJ(2) * t425 + t809 * t394 - t804 * t413 - t421 * t889, t432 * t809 + t843, t403 * t809 - t611 * t804, t457 * t809 - t535 * t804, t431 * t809 - t843, t458 * t809 - t531 * t804, t488 * t809 + t804 * t813, qJ(2) * t444 + t809 * t381 - t804 * t393 - t427 * t889, qJ(2) * t453 + t809 * t385 - t804 * t400 - t437 * t889, qJ(2) * t402 + t809 * t365 - t804 * t386 - t396 * t889, qJ(2) * t374 + t809 * t361 - t804 * t366 - t371 * t889;];
tauB_reg  = t1;
