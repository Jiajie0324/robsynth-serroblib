% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 15:13
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR12_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR12_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR12_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 15:08:32
% EndTime: 2019-05-07 15:10:31
% DurationCPUTime: 97.77s
% Computational Cost: add. (1090402->1120), mult. (2385413->1825), div. (0->0), fcn. (1946432->14), ass. (0->808)
t1248 = sin(pkin(12));
t1251 = cos(pkin(6));
t1402 = qJD(1) * t1251;
t1240 = qJD(2) + t1402;
t1254 = sin(qJ(3));
t1259 = cos(qJ(3));
t1249 = sin(pkin(6));
t1255 = sin(qJ(2));
t1373 = t1249 * t1255;
t1359 = qJD(1) * t1373;
t1209 = t1240 * t1254 + t1259 * t1359;
t1260 = cos(qJ(2));
t1372 = t1249 * t1260;
t1358 = qJD(1) * t1372;
t1234 = -qJD(3) + t1358;
t1250 = cos(pkin(12));
t1180 = t1209 * t1248 + t1250 * t1234;
t1181 = t1209 * t1250 - t1234 * t1248;
t1143 = t1181 * t1180;
t1363 = qJDD(1) * t1255;
t1400 = qJD(1) * t1260;
t1216 = (qJD(2) * t1400 + t1363) * t1249;
t1239 = qJDD(1) * t1251 + qJDD(2);
t1342 = t1254 * t1216 - t1259 * t1239;
t1160 = qJD(3) * t1209 + t1342;
t1428 = -t1143 + t1160;
t1442 = t1248 * t1428;
t1441 = t1250 * t1428;
t1252 = sin(qJ(6));
t1159 = qJDD(5) + t1160;
t1271 = qJDD(6) + t1159;
t1253 = sin(qJ(5));
t1258 = cos(qJ(5));
t1132 = t1258 * t1180 + t1181 * t1253;
t1134 = -t1180 * t1253 + t1181 * t1258;
t1257 = cos(qJ(6));
t1059 = t1257 * t1132 + t1134 * t1252;
t1061 = -t1132 * t1252 + t1134 * t1257;
t970 = t1061 * t1059;
t1435 = t1271 - t970;
t1440 = t1252 * t1435;
t1066 = t1134 * t1132;
t1430 = -t1066 + t1159;
t1439 = t1253 * t1430;
t1438 = t1257 * t1435;
t1437 = t1258 * t1430;
t1207 = -t1259 * t1240 + t1254 * t1359;
t1147 = (t1207 * t1259 - t1209 * t1254) * t1234;
t1362 = qJDD(1) * t1260;
t1401 = qJD(1) * t1255;
t1291 = qJD(2) * t1401 - t1362;
t1274 = t1291 * t1249;
t1268 = qJDD(3) + t1274;
t1436 = t1255 * t1147 - t1260 * t1268;
t1383 = t1209 * t1207;
t1266 = t1268 - t1383;
t1434 = t1254 * t1266;
t1433 = t1259 * t1266;
t1202 = qJD(5) + t1207;
t1198 = qJD(6) + t1202;
t1044 = t1198 * t1059;
t1161 = -t1207 * qJD(3) + t1259 * t1216 + t1254 * t1239;
t1141 = t1250 * t1161 + t1248 * t1268;
t1264 = t1248 * t1161 - t1250 * t1268;
t1344 = t1253 * t1141 + t1258 * t1264;
t1008 = -qJD(5) * t1134 - t1344;
t1009 = -t1132 * qJD(5) + t1258 * t1141 - t1253 * t1264;
t1275 = qJD(6) * t1059 - t1008 * t1252 - t1009 * t1257;
t1431 = -t1044 - t1275;
t1100 = t1202 * t1132;
t966 = -t1100 - t1009;
t1429 = -t1100 + t1009;
t1155 = t1207 * t1180;
t1081 = -t1155 - t1141;
t1080 = -t1155 + t1141;
t1191 = t1207 * t1234;
t1126 = t1191 + t1161;
t1345 = -t1257 * t1008 + t1252 * t1009;
t866 = (qJD(6) - t1198) * t1061 + t1345;
t962 = (qJD(5) - t1202) * t1134 + t1344;
t1123 = (qJD(3) + t1234) * t1209 + t1342;
t1427 = qJD(1) ^ 2;
t1057 = t1059 ^ 2;
t1058 = t1061 ^ 2;
t1426 = t1132 ^ 2;
t1131 = t1134 ^ 2;
t1425 = t1180 ^ 2;
t1179 = t1181 ^ 2;
t1196 = t1198 ^ 2;
t1200 = t1202 ^ 2;
t1424 = t1207 ^ 2;
t1206 = t1209 ^ 2;
t1423 = t1234 ^ 2;
t1422 = t1240 ^ 2;
t1245 = t1249 ^ 2;
t1421 = pkin(2) * t1255;
t1420 = pkin(2) * t1260;
t1419 = pkin(3) * t1254;
t1418 = pkin(8) * t1249;
t1417 = pkin(9) * t1260;
t1416 = t1251 * g(3);
t1341 = -pkin(9) * t1255 - t1420;
t1403 = qJD(1) * t1249;
t1215 = t1341 * t1403;
t1256 = sin(qJ(1));
t1261 = cos(qJ(1));
t1236 = g(1) * t1261 + t1256 * g(2);
t1212 = -pkin(1) * t1427 + qJDD(1) * t1418 - t1236;
t1235 = t1256 * g(1) - t1261 * g(2);
t1270 = qJDD(1) * pkin(1) + t1418 * t1427 + t1235;
t1267 = t1251 * t1270;
t1343 = t1255 * t1212 - t1260 * t1267;
t1113 = -t1239 * pkin(2) - t1422 * pkin(9) + (g(3) * t1260 + t1215 * t1401) * t1249 + t1343;
t1002 = -t1126 * qJ(4) + (-t1209 * t1234 + t1160) * pkin(3) + t1113;
t1265 = -g(3) * t1373 + t1255 * t1267;
t1114 = t1239 * pkin(9) - t1422 * pkin(2) + (t1215 * t1403 + t1212) * t1260 + t1265;
t1368 = qJD(2) + t1240;
t1263 = -t1216 * pkin(9) - t1416 + ((-pkin(1) - t1420) * qJDD(1) + (-pkin(8) * t1403 - t1240 * t1417 + t1368 * t1421) * qJD(1) - t1235) * t1249;
t1047 = t1259 * t1114 + t1254 * t1263;
t1168 = pkin(3) * t1207 - qJ(4) * t1209;
t994 = -pkin(3) * t1423 + qJ(4) * t1268 - t1207 * t1168 + t1047;
t909 = 0.2e1 * qJD(4) * t1181 - t1250 * t1002 + t1248 * t994;
t871 = pkin(4) * t1428 + pkin(10) * t1081 - t909;
t1149 = pkin(4) * t1207 - pkin(10) * t1181;
t910 = -0.2e1 * qJD(4) * t1180 + t1248 * t1002 + t1250 * t994;
t878 = -pkin(4) * t1425 - pkin(10) * t1264 - t1207 * t1149 + t910;
t789 = t1253 * t878 - t1258 * t871;
t760 = pkin(5) * t1430 + pkin(11) * t966 - t789;
t1097 = pkin(5) * t1202 - pkin(11) * t1134;
t790 = t1253 * t871 + t1258 * t878;
t764 = -pkin(5) * t1426 + pkin(11) * t1008 - t1097 * t1202 + t790;
t698 = t1252 * t760 + t1257 * t764;
t722 = t1253 * t790 - t1258 * t789;
t1415 = t1248 * t722;
t1046 = t1114 * t1254 - t1259 * t1263;
t993 = -t1268 * pkin(3) - t1423 * qJ(4) + t1168 * t1209 + qJDD(4) + t1046;
t1414 = t1248 * t993;
t1413 = t1250 * t722;
t1412 = t1250 * t993;
t926 = t1264 * pkin(4) - t1425 * pkin(10) + t1149 * t1181 + t993;
t839 = -t1008 * pkin(5) - pkin(11) * t1426 + t1097 * t1134 + t926;
t1411 = t1252 * t839;
t942 = t1271 + t970;
t1410 = t1252 * t942;
t697 = t1252 * t764 - t1257 * t760;
t647 = t1252 * t698 - t1257 * t697;
t1409 = t1253 * t647;
t1408 = t1253 * t926;
t1407 = t1257 * t839;
t1406 = t1257 * t942;
t1405 = t1258 * t647;
t1404 = t1258 * t926;
t1023 = t1066 + t1159;
t1399 = t1023 * t1253;
t1398 = t1023 * t1258;
t1084 = t1143 + t1160;
t1397 = t1084 * t1248;
t1396 = t1084 * t1250;
t1395 = t1113 * t1254;
t1394 = t1113 * t1259;
t1150 = -t1268 - t1383;
t1393 = t1150 * t1254;
t1392 = t1150 * t1259;
t1391 = t1160 * t1254;
t1390 = t1198 * t1252;
t1389 = t1198 * t1257;
t1388 = t1202 * t1253;
t1387 = t1202 * t1258;
t1386 = t1207 * t1181;
t1385 = t1207 * t1248;
t1384 = t1207 * t1250;
t1347 = t1255 * t1260 * t1427;
t1233 = t1245 * t1347;
t1213 = t1233 + t1239;
t1382 = t1213 * t1255;
t1381 = t1213 * t1260;
t1214 = -t1233 + t1239;
t1380 = t1214 * t1255;
t1379 = t1214 * t1260;
t1378 = t1234 * t1254;
t1377 = t1234 * t1259;
t1376 = t1239 * t1249;
t1375 = t1240 * t1249;
t1374 = t1245 * t1427;
t1193 = t1249 * t1270 + t1416;
t1370 = t1255 * t1193;
t1369 = t1260 * t1193;
t1246 = t1255 ^ 2;
t1247 = t1260 ^ 2;
t1364 = t1246 + t1247;
t1361 = -pkin(3) * t1259 - pkin(2);
t1360 = qJD(1) * t1375;
t1357 = t1246 * t1374;
t1356 = t1247 * t1374;
t1355 = t1254 * t970;
t1354 = t1259 * t970;
t1353 = t1254 * t1066;
t1352 = t1259 * t1066;
t1351 = t1254 * t1143;
t1350 = t1259 * t1143;
t1349 = t1255 * t1383;
t1348 = t1260 * t1383;
t648 = t1252 * t697 + t1257 * t698;
t723 = t1253 * t789 + t1258 * t790;
t1346 = -t1240 + t1402;
t947 = t1046 * t1254 + t1259 * t1047;
t1195 = -t1235 * t1256 - t1261 * t1236;
t1232 = qJDD(1) * t1261 - t1256 * t1427;
t1340 = -pkin(7) * t1232 - g(3) * t1256;
t1201 = -t1357 - t1422;
t1167 = -t1201 * t1255 - t1379;
t1339 = pkin(8) * t1167 - t1370;
t1220 = -t1356 - t1422;
t1177 = t1220 * t1260 - t1382;
t1338 = pkin(8) * t1177 + t1369;
t824 = t1248 * t910 - t1250 * t909;
t825 = t1248 * t909 + t1250 * t910;
t617 = t1253 * t648 + t1405;
t618 = t1258 * t648 - t1409;
t592 = -t1248 * t617 + t1250 * t618;
t589 = t1254 * t839 + t1259 * t592;
t591 = t1248 * t618 + t1250 * t617;
t1337 = t1255 * t589 - t1260 * t591;
t870 = -t1044 + t1275;
t780 = -t1252 * t866 + t1257 * t870;
t782 = -t1252 * t870 - t1257 * t866;
t717 = t1253 * t782 + t1258 * t780;
t719 = -t1253 * t780 + t1258 * t782;
t668 = -t1248 * t717 + t1250 * t719;
t924 = -t1057 - t1058;
t655 = t1254 * t924 + t1259 * t668;
t666 = t1248 * t719 + t1250 * t717;
t1336 = t1255 * t655 - t1260 * t666;
t865 = (qJD(6) + t1198) * t1061 + t1345;
t779 = -t1252 * t865 + t1257 * t1431;
t781 = -t1252 * t1431 - t1257 * t865;
t716 = t1253 * t781 + t1258 * t779;
t718 = -t1253 * t779 + t1258 * t781;
t667 = -t1248 * t716 + t1250 * t718;
t969 = -t1058 + t1057;
t659 = -t1254 * t969 + t1259 * t667;
t665 = -t1248 * t718 - t1250 * t716;
t1335 = t1255 * t659 + t1260 * t665;
t673 = t1250 * t723 - t1415;
t662 = t1254 * t926 + t1259 * t673;
t672 = t1248 * t723 + t1413;
t1334 = t1255 * t662 - t1260 * t672;
t954 = -t1196 - t1057;
t881 = t1252 * t954 + t1438;
t882 = t1257 * t954 - t1440;
t803 = t1253 * t882 + t1258 * t881;
t804 = -t1253 * t881 + t1258 * t882;
t733 = -t1248 * t803 + t1250 * t804;
t705 = t1254 * t865 + t1259 * t733;
t732 = t1248 * t804 + t1250 * t803;
t1333 = t1255 * t705 - t1260 * t732;
t896 = -qJD(6) * t1061 - t1345;
t859 = t1059 * t1390 + t1257 * t896;
t860 = t1059 * t1389 - t1252 * t896;
t774 = t1253 * t860 + t1258 * t859;
t776 = -t1253 * t859 + t1258 * t860;
t714 = -t1248 * t774 + t1250 * t776;
t709 = t1259 * t714 - t1355;
t712 = -t1248 * t776 - t1250 * t774;
t1332 = t1255 * t709 + t1260 * t712;
t861 = t1061 * t1389 - t1252 * t1275;
t862 = -t1061 * t1390 - t1257 * t1275;
t775 = t1253 * t862 + t1258 * t861;
t777 = -t1253 * t861 + t1258 * t862;
t715 = -t1248 * t775 + t1250 * t777;
t710 = t1259 * t715 + t1355;
t713 = -t1248 * t777 - t1250 * t775;
t1331 = t1255 * t710 + t1260 * t713;
t1025 = -t1058 - t1196;
t904 = t1025 * t1257 - t1410;
t905 = -t1025 * t1252 - t1406;
t820 = t1253 * t905 + t1258 * t904;
t821 = -t1253 * t904 + t1258 * t905;
t752 = -t1248 * t820 + t1250 * t821;
t721 = t1254 * t1431 + t1259 * t752;
t751 = t1248 * t821 + t1250 * t820;
t1330 = t1255 * t721 - t1260 * t751;
t1042 = -t1058 + t1196;
t911 = t1042 * t1257 + t1440;
t913 = -t1042 * t1252 + t1438;
t826 = t1253 * t913 + t1258 * t911;
t828 = -t1253 * t911 + t1258 * t913;
t756 = -t1248 * t826 + t1250 * t828;
t726 = -t1254 * t870 + t1259 * t756;
t754 = -t1248 * t828 - t1250 * t826;
t1329 = t1255 * t726 + t1260 * t754;
t1041 = t1057 - t1196;
t912 = t1041 * t1252 + t1406;
t914 = t1041 * t1257 - t1410;
t827 = t1253 * t914 + t1258 * t912;
t829 = -t1253 * t912 + t1258 * t914;
t757 = -t1248 * t827 + t1250 * t829;
t727 = -t1254 * t866 + t1259 * t757;
t755 = -t1248 * t829 - t1250 * t827;
t1328 = t1255 * t727 + t1260 * t755;
t1010 = -t1131 - t1426;
t890 = -t1253 * t962 + t1258 * t966;
t892 = -t1253 * t966 - t1258 * t962;
t814 = -t1248 * t890 + t1250 * t892;
t787 = t1010 * t1254 + t1259 * t814;
t812 = t1248 * t892 + t1250 * t890;
t1327 = t1255 * t787 - t1260 * t812;
t944 = (-t1059 * t1252 - t1061 * t1257) * t1198;
t945 = (-t1059 * t1257 + t1061 * t1252) * t1198;
t879 = t1253 * t945 + t1258 * t944;
t880 = -t1253 * t944 + t1258 * t945;
t802 = -t1248 * t879 + t1250 * t880;
t793 = t1254 * t1271 + t1259 * t802;
t801 = -t1248 * t880 - t1250 * t879;
t1326 = t1255 * t793 + t1260 * t801;
t1065 = -t1131 + t1426;
t961 = (qJD(5) + t1202) * t1134 + t1344;
t889 = -t1253 * t961 + t1258 * t1429;
t891 = -t1253 * t1429 - t1258 * t961;
t813 = -t1248 * t889 + t1250 * t891;
t800 = -t1065 * t1254 + t1259 * t813;
t811 = -t1248 * t891 - t1250 * t889;
t1325 = t1255 * t800 + t1260 * t811;
t808 = t1254 * t993 + t1259 * t825;
t1324 = t1255 * t808 - t1260 * t824;
t1050 = -t1200 - t1426;
t936 = t1050 * t1253 + t1437;
t937 = t1050 * t1258 - t1439;
t875 = -t1248 * t936 + t1250 * t937;
t831 = t1254 * t961 + t1259 * t875;
t874 = t1248 * t937 + t1250 * t936;
t1323 = t1255 * t831 - t1260 * t874;
t1086 = -t1131 - t1200;
t967 = t1086 * t1258 - t1399;
t968 = -t1086 * t1253 - t1398;
t888 = -t1248 * t967 + t1250 * t968;
t836 = t1254 * t1429 + t1259 * t888;
t887 = t1248 * t968 + t1250 * t967;
t1322 = t1255 * t836 - t1260 * t887;
t1099 = -t1131 + t1200;
t977 = t1099 * t1258 + t1439;
t979 = -t1099 * t1253 + t1437;
t900 = -t1248 * t977 + t1250 * t979;
t842 = -t1254 * t966 + t1259 * t900;
t898 = -t1248 * t979 - t1250 * t977;
t1321 = t1255 * t842 + t1260 * t898;
t1098 = -t1200 + t1426;
t978 = t1098 * t1253 + t1398;
t980 = t1098 * t1258 - t1399;
t901 = -t1248 * t978 + t1250 * t980;
t843 = -t1254 * t962 + t1259 * t901;
t899 = -t1248 * t980 - t1250 * t978;
t1320 = t1255 * t843 + t1260 * t899;
t957 = t1008 * t1258 + t1132 * t1388;
t958 = -t1008 * t1253 + t1132 * t1387;
t885 = -t1248 * t957 + t1250 * t958;
t853 = t1259 * t885 - t1353;
t883 = -t1248 * t958 - t1250 * t957;
t1319 = t1255 * t853 + t1260 * t883;
t959 = t1009 * t1253 + t1134 * t1387;
t960 = t1009 * t1258 - t1134 * t1388;
t886 = -t1248 * t959 + t1250 * t960;
t854 = t1259 * t886 + t1353;
t884 = -t1248 * t960 - t1250 * t959;
t1318 = t1255 * t854 + t1260 * t884;
t1029 = (-t1132 * t1253 - t1134 * t1258) * t1202;
t1030 = (-t1132 * t1258 + t1134 * t1253) * t1202;
t933 = -t1029 * t1248 + t1030 * t1250;
t929 = t1159 * t1254 + t1259 * t933;
t932 = -t1029 * t1250 - t1030 * t1248;
t1317 = t1255 * t929 + t1260 * t932;
t1093 = t1179 + t1425;
t1077 = t1264 - t1386;
t998 = -t1077 * t1250 - t1081 * t1248;
t940 = -t1093 * t1254 + t1259 * t998;
t996 = -t1077 * t1248 + t1081 * t1250;
t1316 = t1255 * t940 - t1260 * t996;
t1142 = -t1179 + t1425;
t1078 = -t1264 - t1386;
t997 = t1078 * t1250 - t1080 * t1248;
t953 = -t1142 * t1254 + t1259 * t997;
t995 = -t1078 * t1248 - t1080 * t1250;
t1315 = t1255 * t953 + t1260 * t995;
t1106 = -t1424 - t1425;
t1014 = t1106 * t1248 + t1441;
t1015 = t1106 * t1250 - t1442;
t949 = t1015 * t1259 - t1078 * t1254;
t1314 = -t1014 * t1260 + t1255 * t949;
t1136 = -t1179 - t1424;
t1026 = t1136 * t1250 - t1397;
t1028 = -t1136 * t1248 - t1396;
t956 = t1028 * t1259 + t1080 * t1254;
t1313 = -t1026 * t1260 + t1255 * t956;
t1154 = -t1179 + t1424;
t1037 = -t1154 * t1250 - t1442;
t1039 = -t1154 * t1248 + t1441;
t973 = t1039 * t1259 - t1081 * t1254;
t1312 = t1037 * t1260 + t1255 * t973;
t1153 = -t1424 + t1425;
t1038 = -t1153 * t1248 - t1396;
t1040 = t1153 * t1250 - t1397;
t974 = t1040 * t1259 - t1077 * t1254;
t1311 = t1038 * t1260 + t1255 * t974;
t1310 = -t1113 * t1260 + t1255 * t947;
t1068 = t1180 * t1384 + t1248 * t1264;
t1018 = t1068 * t1259 - t1351;
t1067 = -t1180 * t1385 + t1250 * t1264;
t1309 = t1018 * t1255 + t1067 * t1260;
t1070 = t1141 * t1250 - t1181 * t1385;
t1019 = t1070 * t1259 + t1351;
t1069 = -t1141 * t1248 - t1181 * t1384;
t1308 = t1019 * t1255 + t1069 * t1260;
t946 = -t1046 * t1259 + t1047 * t1254;
t1090 = (-t1180 * t1250 + t1181 * t1248) * t1207;
t1052 = t1090 * t1259 + t1391;
t1089 = (t1180 * t1248 + t1181 * t1250) * t1207;
t1307 = t1052 * t1255 + t1089 * t1260;
t1124 = (-qJD(3) + t1234) * t1209 - t1342;
t1055 = t1124 * t1259 - t1126 * t1254;
t1169 = -t1206 + t1424;
t1306 = t1055 * t1255 + t1169 * t1260;
t1128 = t1191 - t1161;
t1056 = -t1123 * t1259 - t1128 * t1254;
t1148 = t1424 + t1206;
t1305 = t1056 * t1255 + t1148 * t1260;
t1164 = -t1424 - t1423;
t1092 = t1164 * t1259 - t1434;
t1304 = t1092 * t1255 + t1124 * t1260;
t1171 = -t1206 - t1423;
t1096 = -t1171 * t1254 + t1392;
t1303 = t1096 * t1255 - t1126 * t1260;
t1185 = -t1206 + t1423;
t1104 = -t1185 * t1254 + t1433;
t1302 = t1104 * t1255 + t1128 * t1260;
t1184 = t1424 - t1423;
t1105 = t1184 * t1259 + t1393;
t1301 = t1105 * t1255 + t1123 * t1260;
t1165 = g(3) * t1372 + t1343;
t1166 = t1260 * t1212 + t1265;
t1300 = -t1260 * t1165 + t1255 * t1166;
t1094 = t1165 * t1255 + t1166 * t1260;
t1224 = t1240 * t1358;
t1187 = t1224 + t1216;
t1223 = t1240 * t1359;
t1190 = -t1223 - t1274;
t1299 = t1187 * t1260 + t1190 * t1255;
t1188 = -t1224 + t1216;
t1189 = t1223 - t1274;
t1298 = -t1188 * t1260 + t1189 * t1255;
t1297 = t1201 * t1260 - t1380;
t1218 = -t1357 + t1422;
t1296 = t1218 * t1260 + t1382;
t1295 = t1220 * t1255 + t1381;
t1219 = t1356 - t1422;
t1294 = t1219 * t1255 + t1379;
t1194 = t1235 * t1261 - t1256 * t1236;
t1117 = -t1207 * t1377 + t1391;
t1293 = t1117 * t1255 + t1348;
t1119 = t1161 * t1259 + t1209 * t1378;
t1292 = t1119 * t1255 - t1348;
t640 = -pkin(5) * t839 + pkin(11) * t648;
t585 = -pkin(4) * t839 + pkin(10) * t618 - pkin(11) * t1409 + t1258 * t640;
t590 = -pkin(10) * t617 - pkin(11) * t1405 - t1253 * t640;
t569 = -qJ(4) * t591 - t1248 * t585 + t1250 * t590;
t581 = -pkin(3) * t591 - pkin(4) * t617 - pkin(5) * t647;
t588 = t1254 * t592 - t1259 * t839;
t563 = -pkin(9) * t588 - t1254 * t581 + t1259 * t569;
t567 = -pkin(2) * t588 + pkin(3) * t839 - qJ(4) * t592 - t1248 * t590 - t1250 * t585;
t578 = t1255 * t591 + t1260 * t589;
t1290 = pkin(8) * t578 + t1255 * t563 + t1260 * t567;
t635 = -pkin(5) * t924 + pkin(11) * t782 + t648;
t638 = -pkin(11) * t780 - t647;
t601 = -pkin(4) * t924 + pkin(10) * t719 + t1253 * t638 + t1258 * t635;
t602 = -pkin(10) * t717 - t1253 * t635 + t1258 * t638;
t582 = -qJ(4) * t666 - t1248 * t601 + t1250 * t602;
t631 = -pkin(3) * t666 - pkin(4) * t717 - pkin(5) * t780;
t654 = t1254 * t668 - t1259 * t924;
t576 = -pkin(9) * t654 - t1254 * t631 + t1259 * t582;
t579 = -pkin(2) * t654 + pkin(3) * t924 - qJ(4) * t668 - t1248 * t602 - t1250 * t601;
t625 = t1255 * t666 + t1260 * t655;
t1289 = pkin(8) * t625 + t1255 * t576 + t1260 * t579;
t711 = -pkin(4) * t926 + pkin(10) * t723;
t629 = -pkin(10) * t1413 - qJ(4) * t672 - t1248 * t711;
t639 = -pkin(3) * t672 - pkin(4) * t722;
t661 = t1254 * t673 - t1259 * t926;
t597 = -pkin(9) * t661 - t1254 * t639 + t1259 * t629;
t608 = -pkin(2) * t661 + pkin(3) * t926 + pkin(10) * t1415 - qJ(4) * t673 - t1250 * t711;
t628 = t1255 * t672 + t1260 * t662;
t1288 = pkin(8) * t628 + t1255 * t597 + t1260 * t608;
t745 = -pkin(5) * t865 + pkin(11) * t882 - t1407;
t772 = -pkin(11) * t881 + t1411;
t671 = -pkin(4) * t865 + pkin(10) * t804 + t1253 * t772 + t1258 * t745;
t679 = -pkin(10) * t803 - t1253 * t745 + t1258 * t772;
t620 = -qJ(4) * t732 - t1248 * t671 + t1250 * t679;
t642 = -pkin(3) * t732 - pkin(4) * t803 - pkin(5) * t881 + t697;
t704 = t1254 * t733 - t1259 * t865;
t598 = -pkin(9) * t704 - t1254 * t642 + t1259 * t620;
t611 = -pkin(2) * t704 + pkin(3) * t865 - qJ(4) * t733 - t1248 * t679 - t1250 * t671;
t664 = t1255 * t732 + t1260 * t705;
t1287 = pkin(8) * t664 + t1255 * t598 + t1260 * t611;
t750 = -pkin(5) * t1431 + pkin(11) * t905 + t1411;
t791 = -pkin(11) * t904 + t1407;
t677 = -pkin(4) * t1431 + pkin(10) * t821 + t1253 * t791 + t1258 * t750;
t683 = -pkin(10) * t820 - t1253 * t750 + t1258 * t791;
t627 = -qJ(4) * t751 - t1248 * t677 + t1250 * t683;
t649 = -pkin(3) * t751 - pkin(4) * t820 - pkin(5) * t904 + t698;
t720 = t1254 * t752 - t1259 * t1431;
t600 = -pkin(9) * t720 - t1254 * t649 + t1259 * t627;
t613 = -pkin(2) * t720 + pkin(3) * t1431 - qJ(4) * t752 - t1248 * t683 - t1250 * t677;
t680 = t1255 * t751 + t1260 * t721;
t1286 = pkin(8) * t680 + t1255 * t600 + t1260 * t613;
t699 = -pkin(4) * t1010 + pkin(10) * t892 + t723;
t703 = -pkin(10) * t890 - t722;
t641 = -qJ(4) * t812 - t1248 * t699 + t1250 * t703;
t762 = -pkin(3) * t812 - pkin(4) * t890;
t786 = -t1010 * t1259 + t1254 * t814;
t630 = -pkin(9) * t786 - t1254 * t762 + t1259 * t641;
t632 = -pkin(2) * t786 + pkin(3) * t1010 - qJ(4) * t814 - t1248 * t703 - t1250 * t699;
t731 = t1255 * t812 + t1260 * t787;
t1285 = pkin(8) * t731 + t1255 * t630 + t1260 * t632;
t819 = -pkin(4) * t961 + pkin(10) * t937 - t1404;
t850 = -pkin(10) * t936 + t1408;
t734 = -qJ(4) * t874 - t1248 * t819 + t1250 * t850;
t737 = -pkin(3) * t874 - pkin(4) * t936 + t789;
t830 = t1254 * t875 - t1259 * t961;
t663 = -pkin(9) * t830 - t1254 * t737 + t1259 * t734;
t695 = -pkin(2) * t830 + pkin(3) * t961 - qJ(4) * t875 - t1248 * t850 - t1250 * t819;
t766 = t1255 * t874 + t1260 * t831;
t1284 = pkin(8) * t766 + t1255 * t663 + t1260 * t695;
t822 = -pkin(4) * t1429 + pkin(10) * t968 + t1408;
t872 = -pkin(10) * t967 + t1404;
t740 = -qJ(4) * t887 - t1248 * t822 + t1250 * t872;
t741 = -pkin(3) * t887 - pkin(4) * t967 + t790;
t835 = t1254 * t888 - t1259 * t1429;
t674 = -pkin(9) * t835 - t1254 * t741 + t1259 * t740;
t700 = -pkin(2) * t835 + pkin(3) * t1429 - qJ(4) * t888 - t1248 * t872 - t1250 * t822;
t773 = t1255 * t887 + t1260 * t836;
t1283 = pkin(8) * t773 + t1255 * t674 + t1260 * t700;
t807 = t1254 * t825 - t1259 * t993;
t706 = -pkin(9) * t807 + (-qJ(4) * t1259 + t1419) * t824;
t736 = -pkin(2) * t807 + pkin(3) * t993 - qJ(4) * t825;
t744 = t1255 * t824 + t1260 * t808;
t1282 = pkin(8) * t744 + t1255 * t706 + t1260 * t736;
t809 = -qJ(4) * t996 - t824;
t939 = t1093 * t1259 + t1254 * t998;
t761 = -pkin(9) * t939 + t1259 * t809 + t1419 * t996;
t767 = -pkin(2) * t939 - pkin(3) * t1093 - qJ(4) * t998 - t825;
t893 = t1255 * t996 + t1260 * t940;
t1281 = pkin(8) * t893 + t1255 * t761 + t1260 * t767;
t873 = -pkin(3) * t1014 + t909;
t921 = -qJ(4) * t1014 + t1414;
t948 = t1015 * t1254 + t1078 * t1259;
t778 = -pkin(9) * t948 - t1254 * t873 + t1259 * t921;
t837 = -pkin(2) * t948 - pkin(3) * t1078 - qJ(4) * t1015 + t1412;
t906 = t1014 * t1255 + t1260 * t949;
t1280 = pkin(8) * t906 + t1255 * t778 + t1260 * t837;
t876 = -pkin(3) * t1026 + t910;
t925 = -qJ(4) * t1026 + t1412;
t955 = t1028 * t1254 - t1080 * t1259;
t785 = -pkin(9) * t955 - t1254 * t876 + t1259 * t925;
t844 = -pkin(2) * t955 + pkin(3) * t1080 - qJ(4) * t1028 - t1414;
t915 = t1026 * t1255 + t1260 * t956;
t1279 = pkin(8) * t915 + t1255 * t785 + t1260 * t844;
t1091 = t1164 * t1254 + t1433;
t1027 = -pkin(9) * t1091 + t1395;
t1033 = t1092 * t1260 - t1124 * t1255;
t984 = -pkin(2) * t1091 + t1046;
t1278 = pkin(8) * t1033 + t1027 * t1255 + t1260 * t984;
t1095 = t1171 * t1259 + t1393;
t1034 = -pkin(9) * t1095 + t1394;
t1035 = t1096 * t1260 + t1126 * t1255;
t987 = -pkin(2) * t1095 + t1047;
t1277 = pkin(8) * t1035 + t1034 * t1255 + t1260 * t987;
t1144 = t1188 * t1255 + t1189 * t1260;
t1276 = pkin(8) * t1144 + t1094;
t1011 = t1056 * t1260 - t1148 * t1255;
t1054 = -t1123 * t1254 + t1128 * t1259;
t916 = -pkin(9) * t1054 - t946;
t1273 = pkin(8) * t1011 - t1054 * t1420 + t1255 * t916;
t930 = t1113 * t1255 + t1260 * t947;
t1272 = pkin(8) * t930 + t1341 * t946;
t1244 = t1249 * t1245;
t1231 = t1256 * qJDD(1) + t1261 * t1427;
t1222 = t1364 * t1374;
t1221 = (t1246 - t1247) * t1374;
t1217 = -pkin(7) * t1231 + g(3) * t1261;
t1192 = t1364 * t1360;
t1186 = (t1368 * t1400 + t1363) * t1249;
t1183 = t1216 * t1260 - t1246 * t1360;
t1182 = (-t1247 * t1240 * qJD(1) + t1255 * t1291) * t1249;
t1176 = t1219 * t1260 - t1380;
t1175 = -t1218 * t1255 + t1381;
t1163 = (t1216 * t1251 + (qJD(1) * t1244 + t1251 * t1375) * t1400) * t1255;
t1162 = -t1244 * t1347 + (-t1368 * t1401 + t1362) * t1251 * t1372;
t1157 = t1259 * t1160;
t1146 = (t1207 * t1254 + t1209 * t1259) * t1234;
t1145 = -t1187 * t1255 + t1190 * t1260;
t1140 = t1249 * t1190 + t1251 * t1295;
t1139 = -t1249 * t1189 + t1251 * t1294;
t1138 = -t1249 * t1188 + t1251 * t1296;
t1137 = -t1251 * t1190 + t1249 * t1295;
t1121 = -t1249 * t1186 + t1251 * t1297;
t1120 = t1251 * t1186 + t1249 * t1297;
t1118 = t1161 * t1254 - t1209 * t1377;
t1116 = -t1207 * t1378 - t1157;
t1115 = t1260 * t1147 + t1255 * t1268;
t1112 = -t1249 * t1221 + t1251 * t1299;
t1111 = t1249 * t1222 + t1251 * t1298;
t1110 = -t1251 * t1222 + t1249 * t1298;
t1103 = t1184 * t1254 - t1392;
t1102 = t1185 * t1259 + t1434;
t1088 = -t1256 * t1140 + t1177 * t1261;
t1087 = t1140 * t1261 + t1256 * t1177;
t1076 = t1119 * t1260 + t1349;
t1075 = t1117 * t1260 - t1349;
t1074 = -t1256 * t1121 + t1167 * t1261;
t1073 = t1121 * t1261 + t1256 * t1167;
t1072 = t1249 * t1193 + t1251 * t1300;
t1071 = -t1251 * t1193 + t1249 * t1300;
t1064 = -t1249 * t1146 + t1251 * t1436;
t1063 = -t1256 * t1111 + t1144 * t1261;
t1062 = t1111 * t1261 + t1256 * t1144;
t1053 = t1124 * t1254 + t1126 * t1259;
t1051 = t1090 * t1254 - t1157;
t1049 = t1105 * t1260 - t1123 * t1255;
t1048 = t1104 * t1260 - t1128 * t1255;
t1036 = -t1370 + (-t1137 * t1249 - t1140 * t1251) * pkin(8);
t1032 = -t1369 + (-t1120 * t1249 - t1121 * t1251) * pkin(8);
t1031 = -pkin(1) * t1137 + t1249 * t1165 + t1251 * t1338;
t1021 = t1055 * t1260 - t1169 * t1255;
t1020 = -pkin(1) * t1120 + t1249 * t1166 + t1251 * t1339;
t1017 = t1070 * t1254 - t1350;
t1016 = t1068 * t1254 + t1350;
t1013 = -t1249 * t1118 + t1251 * t1292;
t1012 = -t1249 * t1116 + t1251 * t1293;
t1005 = pkin(8) * t1094 * t1251 - pkin(1) * t1071;
t1004 = -t1256 * t1072 + t1094 * t1261;
t1003 = t1072 * t1261 + t1256 * t1094;
t999 = -pkin(1) * t1110 + t1251 * t1276;
t992 = -pkin(2) * t1126 + pkin(9) * t1096 + t1395;
t990 = -t1249 * t1103 + t1251 * t1301;
t989 = -t1249 * t1102 + t1251 * t1302;
t988 = (-t1071 * t1249 - t1072 * t1251) * pkin(8);
t986 = pkin(2) * t1124 + pkin(9) * t1092 - t1394;
t985 = (-t1110 * t1249 - t1111 * t1251) * pkin(8) - t1300;
t983 = t1052 * t1260 - t1089 * t1255;
t982 = -t1249 * t1095 + t1251 * t1303;
t981 = t1251 * t1095 + t1249 * t1303;
t976 = -t1249 * t1091 + t1251 * t1304;
t975 = t1251 * t1091 + t1249 * t1304;
t972 = t1040 * t1254 + t1077 * t1259;
t971 = t1039 * t1254 + t1081 * t1259;
t952 = t1142 * t1259 + t1254 * t997;
t951 = t1019 * t1260 - t1069 * t1255;
t950 = t1018 * t1260 - t1067 * t1255;
t938 = -t1249 * t1053 + t1251 * t1306;
t935 = -t1249 * t1054 + t1251 * t1305;
t934 = t1251 * t1054 + t1249 * t1305;
t931 = -pkin(2) * t1113 + pkin(9) * t947;
t928 = -t1159 * t1259 + t1254 * t933;
t927 = -t1249 * t1051 + t1251 * t1307;
t923 = t1035 * t1261 - t1256 * t982;
t922 = t1256 * t1035 + t1261 * t982;
t920 = -t1038 * t1255 + t1260 * t974;
t919 = -t1037 * t1255 + t1260 * t973;
t918 = t1033 * t1261 - t1256 * t976;
t917 = t1256 * t1033 + t1261 * t976;
t908 = -t1249 * t1017 + t1251 * t1308;
t907 = -t1249 * t1016 + t1251 * t1309;
t903 = pkin(2) * t1148 + pkin(9) * t1056 + t947;
t902 = -t1255 * t995 + t1260 * t953;
t895 = t1011 * t1261 - t1256 * t935;
t894 = t1256 * t1011 + t1261 * t935;
t858 = -t1249 * t946 + t1251 * t1310;
t857 = t1249 * t1310 + t1251 * t946;
t856 = -t1249 * t972 + t1251 * t1311;
t855 = -t1249 * t971 + t1251 * t1312;
t852 = t1254 * t886 - t1352;
t851 = t1254 * t885 + t1352;
t849 = -t1255 * t932 + t1260 * t929;
t848 = -t1249 * t955 + t1251 * t1313;
t847 = t1249 * t1313 + t1251 * t955;
t846 = -t1249 * t948 + t1251 * t1314;
t845 = t1249 * t1314 + t1251 * t948;
t841 = t1254 * t901 + t1259 * t962;
t840 = t1254 * t900 + t1259 * t966;
t838 = -t1249 * t952 + t1251 * t1315;
t834 = -t1249 * t939 + t1251 * t1316;
t833 = t1249 * t1316 + t1251 * t939;
t832 = t1260 * t1034 - t1255 * t987 + (-t1249 * t981 - t1251 * t982) * pkin(8);
t823 = t1260 * t1027 - t1255 * t984 + (-t1249 * t975 - t1251 * t976) * pkin(8);
t818 = -pkin(1) * t981 - t1249 * t992 + t1251 * t1277;
t817 = -t1256 * t858 + t1261 * t930;
t816 = t1256 * t930 + t1261 * t858;
t815 = -pkin(1) * t975 - t1249 * t986 + t1251 * t1278;
t810 = -t1249 * t928 + t1251 * t1317;
t806 = -t1256 * t848 + t1261 * t915;
t805 = t1256 * t915 + t1261 * t848;
t799 = t1065 * t1259 + t1254 * t813;
t798 = t1054 * t1421 + t1260 * t916 + (-t1249 * t934 - t1251 * t935) * pkin(8);
t797 = -t1255 * t884 + t1260 * t854;
t796 = -t1255 * t883 + t1260 * t853;
t795 = -t1256 * t846 + t1261 * t906;
t794 = t1256 * t906 + t1261 * t846;
t792 = t1254 * t802 - t1259 * t1271;
t784 = -t1255 * t899 + t1260 * t843;
t783 = -t1255 * t898 + t1260 * t842;
t771 = -t1256 * t834 + t1261 * t893;
t770 = t1256 * t893 + t1261 * t834;
t769 = -pkin(2) * t1026 + pkin(9) * t956 + t1254 * t925 + t1259 * t876;
t768 = -pkin(2) * t1014 + pkin(9) * t949 + t1254 * t921 + t1259 * t873;
t765 = -pkin(1) * t934 - t1249 * t903 + t1251 * t1273;
t753 = pkin(9) * t940 + t1254 * t809 + t1361 * t996;
t749 = -t1249 * t852 + t1251 * t1318;
t748 = -t1249 * t851 + t1251 * t1319;
t747 = (-t1417 + t1421) * t946 + (-t1249 * t857 - t1251 * t858) * pkin(8);
t746 = -pkin(1) * t857 - t1249 * t931 + t1251 * t1272;
t743 = -t1249 * t841 + t1251 * t1320;
t742 = -t1249 * t840 + t1251 * t1321;
t739 = -t1249 * t835 + t1251 * t1322;
t738 = t1249 * t1322 + t1251 * t835;
t735 = -t1255 * t811 + t1260 * t800;
t730 = -t1249 * t830 + t1251 * t1323;
t729 = t1249 * t1323 + t1251 * t830;
t728 = -t1255 * t801 + t1260 * t793;
t725 = t1254 * t757 + t1259 * t866;
t724 = t1254 * t756 + t1259 * t870;
t708 = t1254 * t715 - t1354;
t707 = t1254 * t714 + t1354;
t702 = -t1249 * t807 + t1251 * t1324;
t701 = t1249 * t1324 + t1251 * t807;
t694 = -t1255 * t844 + t1260 * t785 + (-t1249 * t847 - t1251 * t848) * pkin(8);
t693 = -t1249 * t799 + t1251 * t1325;
t692 = -t1256 * t739 + t1261 * t773;
t691 = t1256 * t773 + t1261 * t739;
t690 = -t1255 * t837 + t1260 * t778 + (-t1249 * t845 - t1251 * t846) * pkin(8);
t689 = -t1249 * t786 + t1251 * t1327;
t688 = t1249 * t1327 + t1251 * t786;
t687 = -t1249 * t792 + t1251 * t1326;
t686 = pkin(9) * t808 + (-qJ(4) * t1254 + t1361) * t824;
t685 = -t1256 * t730 + t1261 * t766;
t684 = t1256 * t766 + t1261 * t730;
t682 = -t1255 * t755 + t1260 * t727;
t681 = -t1255 * t754 + t1260 * t726;
t678 = -pkin(1) * t847 - t1249 * t769 + t1251 * t1279;
t676 = -pkin(1) * t845 - t1249 * t768 + t1251 * t1280;
t675 = -t1255 * t767 + t1260 * t761 + (-t1249 * t833 - t1251 * t834) * pkin(8);
t670 = -t1256 * t702 + t1261 * t744;
t669 = t1256 * t744 + t1261 * t702;
t660 = -pkin(2) * t887 + pkin(9) * t836 + t1254 * t740 + t1259 * t741;
t658 = t1254 * t667 + t1259 * t969;
t657 = -t1255 * t713 + t1260 * t710;
t656 = -t1255 * t712 + t1260 * t709;
t653 = -t1256 * t689 + t1261 * t731;
t652 = t1256 * t731 + t1261 * t689;
t651 = -pkin(2) * t874 + pkin(9) * t831 + t1254 * t734 + t1259 * t737;
t650 = -pkin(1) * t833 - t1249 * t753 + t1251 * t1281;
t646 = -t1249 * t725 + t1251 * t1328;
t645 = -t1249 * t724 + t1251 * t1329;
t644 = -t1249 * t720 + t1251 * t1330;
t643 = t1249 * t1330 + t1251 * t720;
t637 = -t1249 * t704 + t1251 * t1333;
t636 = t1249 * t1333 + t1251 * t704;
t634 = -t1249 * t708 + t1251 * t1331;
t633 = -t1249 * t707 + t1251 * t1332;
t626 = -t1255 * t665 + t1260 * t659;
t624 = -pkin(2) * t812 + pkin(9) * t787 + t1254 * t641 + t1259 * t762;
t623 = -t1256 * t644 + t1261 * t680;
t622 = t1256 * t680 + t1261 * t644;
t621 = -t1255 * t736 + t1260 * t706 + (-t1249 * t701 - t1251 * t702) * pkin(8);
t619 = -t1255 * t700 + t1260 * t674 + (-t1249 * t738 - t1251 * t739) * pkin(8);
t616 = -t1256 * t637 + t1261 * t664;
t615 = t1256 * t664 + t1261 * t637;
t614 = -t1255 * t695 + t1260 * t663 + (-t1249 * t729 - t1251 * t730) * pkin(8);
t612 = -pkin(1) * t701 - t1249 * t686 + t1251 * t1282;
t610 = -t1249 * t661 + t1251 * t1334;
t609 = t1249 * t1334 + t1251 * t661;
t607 = -t1249 * t658 + t1251 * t1335;
t606 = -t1249 * t654 + t1251 * t1336;
t605 = t1249 * t1336 + t1251 * t654;
t604 = -pkin(1) * t738 - t1249 * t660 + t1251 * t1283;
t603 = -pkin(1) * t729 - t1249 * t651 + t1251 * t1284;
t599 = -pkin(2) * t751 + pkin(9) * t721 + t1254 * t627 + t1259 * t649;
t596 = -pkin(2) * t732 + pkin(9) * t705 + t1254 * t620 + t1259 * t642;
t595 = -t1255 * t632 + t1260 * t630 + (-t1249 * t688 - t1251 * t689) * pkin(8);
t594 = -t1256 * t610 + t1261 * t628;
t593 = t1256 * t628 + t1261 * t610;
t587 = -t1256 * t606 + t1261 * t625;
t586 = t1256 * t625 + t1261 * t606;
t584 = -pkin(2) * t672 + pkin(9) * t662 + t1254 * t629 + t1259 * t639;
t583 = -pkin(1) * t688 - t1249 * t624 + t1251 * t1285;
t580 = -t1255 * t613 + t1260 * t600 + (-t1249 * t643 - t1251 * t644) * pkin(8);
t577 = -t1255 * t611 + t1260 * t598 + (-t1249 * t636 - t1251 * t637) * pkin(8);
t575 = -pkin(2) * t666 + pkin(9) * t655 + t1254 * t582 + t1259 * t631;
t574 = -pkin(1) * t643 - t1249 * t599 + t1251 * t1286;
t573 = -t1255 * t608 + t1260 * t597 + (-t1249 * t609 - t1251 * t610) * pkin(8);
t572 = -pkin(1) * t636 - t1249 * t596 + t1251 * t1287;
t571 = -t1249 * t588 + t1251 * t1337;
t570 = t1249 * t1337 + t1251 * t588;
t568 = -pkin(1) * t609 - t1249 * t584 + t1251 * t1288;
t566 = -t1256 * t571 + t1261 * t578;
t565 = t1256 * t578 + t1261 * t571;
t564 = -t1255 * t579 + t1260 * t576 + (-t1249 * t605 - t1251 * t606) * pkin(8);
t562 = -pkin(2) * t591 + pkin(9) * t589 + t1254 * t569 + t1259 * t581;
t561 = -pkin(1) * t605 - t1249 * t575 + t1251 * t1289;
t560 = -t1255 * t567 + t1260 * t563 + (-t1249 * t570 - t1251 * t571) * pkin(8);
t559 = -pkin(1) * t570 - t1249 * t562 + t1251 * t1290;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1231, -t1232, 0, t1195, 0, 0, 0, 0, 0, 0, t1088, t1074, t1063, t1004, 0, 0, 0, 0, 0, 0, t918, t923, t895, t817, 0, 0, 0, 0, 0, 0, t795, t806, t771, t670, 0, 0, 0, 0, 0, 0, t685, t692, t653, t594, 0, 0, 0, 0, 0, 0, t616, t623, t587, t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1232, -t1231, 0, t1194, 0, 0, 0, 0, 0, 0, t1087, t1073, t1062, t1003, 0, 0, 0, 0, 0, 0, t917, t922, t894, t816, 0, 0, 0, 0, 0, 0, t794, t805, t770, t669, 0, 0, 0, 0, 0, 0, t684, t691, t652, t593, 0, 0, 0, 0, 0, 0, t615, t622, t586, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1137, t1120, t1110, t1071, 0, 0, 0, 0, 0, 0, t975, t981, t934, t857, 0, 0, 0, 0, 0, 0, t845, t847, t833, t701, 0, 0, 0, 0, 0, 0, t729, t738, t688, t609, 0, 0, 0, 0, 0, 0, t636, t643, t605, t570; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1232, 0, -t1231, 0, t1340, -t1217, -t1194, -pkin(7) * t1194, -t1256 * t1163 + t1183 * t1261, -t1256 * t1112 + t1145 * t1261, -t1256 * t1138 + t1175 * t1261, -t1256 * t1162 + t1182 * t1261, -t1256 * t1139 + t1176 * t1261, t1192 * t1261 + t1256 * t1376, -pkin(7) * t1087 - t1256 * t1031 + t1036 * t1261, -pkin(7) * t1073 - t1256 * t1020 + t1032 * t1261, -pkin(7) * t1062 - t1256 * t999 + t1261 * t985, -pkin(7) * t1003 - t1256 * t1005 + t1261 * t988, -t1256 * t1013 + t1076 * t1261, t1021 * t1261 - t1256 * t938, t1048 * t1261 - t1256 * t989, -t1256 * t1012 + t1075 * t1261, t1049 * t1261 - t1256 * t990, -t1256 * t1064 + t1115 * t1261, -pkin(7) * t917 - t1256 * t815 + t1261 * t823, -pkin(7) * t922 - t1256 * t818 + t1261 * t832, -pkin(7) * t894 - t1256 * t765 + t1261 * t798, -pkin(7) * t816 - t1256 * t746 + t1261 * t747, -t1256 * t908 + t1261 * t951, -t1256 * t838 + t1261 * t902, -t1256 * t855 + t1261 * t919, -t1256 * t907 + t1261 * t950, -t1256 * t856 + t1261 * t920, -t1256 * t927 + t1261 * t983, -pkin(7) * t794 - t1256 * t676 + t1261 * t690, -pkin(7) * t805 - t1256 * t678 + t1261 * t694, -pkin(7) * t770 - t1256 * t650 + t1261 * t675, -pkin(7) * t669 - t1256 * t612 + t1261 * t621, -t1256 * t749 + t1261 * t797, -t1256 * t693 + t1261 * t735, -t1256 * t742 + t1261 * t783, -t1256 * t748 + t1261 * t796, -t1256 * t743 + t1261 * t784, -t1256 * t810 + t1261 * t849, -pkin(7) * t684 - t1256 * t603 + t1261 * t614, -pkin(7) * t691 - t1256 * t604 + t1261 * t619, -pkin(7) * t652 - t1256 * t583 + t1261 * t595, -pkin(7) * t593 - t1256 * t568 + t1261 * t573, -t1256 * t634 + t1261 * t657, -t1256 * t607 + t1261 * t626, -t1256 * t645 + t1261 * t681, -t1256 * t633 + t1261 * t656, -t1256 * t646 + t1261 * t682, -t1256 * t687 + t1261 * t728, -pkin(7) * t615 - t1256 * t572 + t1261 * t577, -pkin(7) * t622 - t1256 * t574 + t1261 * t580, -pkin(7) * t586 - t1256 * t561 + t1261 * t564, -pkin(7) * t565 - t1256 * t559 + t1261 * t560; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1231, 0, t1232, 0, t1217, t1340, t1195, pkin(7) * t1195, t1163 * t1261 + t1256 * t1183, t1112 * t1261 + t1256 * t1145, t1138 * t1261 + t1256 * t1175, t1162 * t1261 + t1256 * t1182, t1139 * t1261 + t1256 * t1176, t1256 * t1192 - t1261 * t1376, pkin(7) * t1088 + t1031 * t1261 + t1256 * t1036, pkin(7) * t1074 + t1020 * t1261 + t1256 * t1032, pkin(7) * t1063 + t1256 * t985 + t1261 * t999, pkin(7) * t1004 + t1005 * t1261 + t1256 * t988, t1013 * t1261 + t1256 * t1076, t1256 * t1021 + t1261 * t938, t1256 * t1048 + t1261 * t989, t1012 * t1261 + t1256 * t1075, t1256 * t1049 + t1261 * t990, t1064 * t1261 + t1256 * t1115, pkin(7) * t918 + t1256 * t823 + t1261 * t815, pkin(7) * t923 + t1256 * t832 + t1261 * t818, pkin(7) * t895 + t1256 * t798 + t1261 * t765, pkin(7) * t817 + t1256 * t747 + t1261 * t746, t1256 * t951 + t1261 * t908, t1256 * t902 + t1261 * t838, t1256 * t919 + t1261 * t855, t1256 * t950 + t1261 * t907, t1256 * t920 + t1261 * t856, t1256 * t983 + t1261 * t927, pkin(7) * t795 + t1256 * t690 + t1261 * t676, pkin(7) * t806 + t1256 * t694 + t1261 * t678, pkin(7) * t771 + t1256 * t675 + t1261 * t650, pkin(7) * t670 + t1256 * t621 + t1261 * t612, t1256 * t797 + t1261 * t749, t1256 * t735 + t1261 * t693, t1256 * t783 + t1261 * t742, t1256 * t796 + t1261 * t748, t1256 * t784 + t1261 * t743, t1256 * t849 + t1261 * t810, pkin(7) * t685 + t1256 * t614 + t1261 * t603, pkin(7) * t692 + t1256 * t619 + t1261 * t604, pkin(7) * t653 + t1256 * t595 + t1261 * t583, pkin(7) * t594 + t1256 * t573 + t1261 * t568, t1256 * t657 + t1261 * t634, t1256 * t626 + t1261 * t607, t1256 * t681 + t1261 * t645, t1256 * t656 + t1261 * t633, t1256 * t682 + t1261 * t646, t1256 * t728 + t1261 * t687, pkin(7) * t616 + t1256 * t577 + t1261 * t572, pkin(7) * t623 + t1256 * t580 + t1261 * t574, pkin(7) * t587 + t1256 * t564 + t1261 * t561, pkin(7) * t566 + t1256 * t560 + t1261 * t559; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1235, t1236, 0, 0, (-t1245 * t1346 * t1400 + t1216 * t1249) * t1255, t1251 * t1221 + t1249 * t1299, t1251 * t1188 + t1249 * t1296, (t1362 + (-qJD(2) + t1346) * t1401) * t1245 * t1260, t1251 * t1189 + t1249 * t1294, t1251 * t1239, pkin(1) * t1140 - t1251 * t1165 + t1249 * t1338, pkin(1) * t1121 - t1251 * t1166 + t1249 * t1339, pkin(1) * t1111 + t1249 * t1276, pkin(1) * t1072 + t1094 * t1418, t1251 * t1118 + t1249 * t1292, t1251 * t1053 + t1249 * t1306, t1251 * t1102 + t1249 * t1302, t1251 * t1116 + t1249 * t1293, t1251 * t1103 + t1249 * t1301, t1251 * t1146 + t1249 * t1436, pkin(1) * t976 + t1249 * t1278 + t1251 * t986, pkin(1) * t982 + t1249 * t1277 + t1251 * t992, pkin(1) * t935 + t1249 * t1273 + t1251 * t903, pkin(1) * t858 + t1249 * t1272 + t1251 * t931, t1251 * t1017 + t1249 * t1308, t1249 * t1315 + t1251 * t952, t1249 * t1312 + t1251 * t971, t1251 * t1016 + t1249 * t1309, t1249 * t1311 + t1251 * t972, t1251 * t1051 + t1249 * t1307, pkin(1) * t846 + t1249 * t1280 + t1251 * t768, pkin(1) * t848 + t1249 * t1279 + t1251 * t769, pkin(1) * t834 + t1249 * t1281 + t1251 * t753, pkin(1) * t702 + t1249 * t1282 + t1251 * t686, t1249 * t1318 + t1251 * t852, t1249 * t1325 + t1251 * t799, t1249 * t1321 + t1251 * t840, t1249 * t1319 + t1251 * t851, t1249 * t1320 + t1251 * t841, t1249 * t1317 + t1251 * t928, pkin(1) * t730 + t1249 * t1284 + t1251 * t651, pkin(1) * t739 + t1249 * t1283 + t1251 * t660, pkin(1) * t689 + t1249 * t1285 + t1251 * t624, pkin(1) * t610 + t1249 * t1288 + t1251 * t584, t1249 * t1331 + t1251 * t708, t1249 * t1335 + t1251 * t658, t1249 * t1329 + t1251 * t724, t1249 * t1332 + t1251 * t707, t1249 * t1328 + t1251 * t725, t1249 * t1326 + t1251 * t792, pkin(1) * t637 + t1249 * t1287 + t1251 * t596, pkin(1) * t644 + t1249 * t1286 + t1251 * t599, pkin(1) * t606 + t1249 * t1289 + t1251 * t575, pkin(1) * t571 + t1249 * t1290 + t1251 * t562;];
tauB_reg  = t1;
