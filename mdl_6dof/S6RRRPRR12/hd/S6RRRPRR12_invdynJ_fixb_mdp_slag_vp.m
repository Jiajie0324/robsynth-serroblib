% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR12_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR12_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:47:19
% EndTime: 2019-03-09 19:48:01
% DurationCPUTime: 32.03s
% Computational Cost: add. (19624->889), mult. (47537->1200), div. (0->0), fcn. (39452->18), ass. (0->335)
t918 = cos(qJ(2));
t1021 = qJD(1) * t918;
t909 = sin(pkin(6));
t997 = t909 * t1021;
t872 = -qJD(3) + t997;
t914 = sin(qJ(2));
t1071 = cos(pkin(6));
t986 = t1071 * qJD(1);
t971 = pkin(1) * t986;
t833 = pkin(8) * t997 + t914 * t971;
t913 = sin(qJ(3));
t917 = cos(qJ(3));
t1109 = qJD(4) * t913 + t833 + t872 * (pkin(3) * t913 - qJ(4) * t917);
t951 = t986 + qJD(2);
t1022 = qJD(1) * t909;
t998 = t914 * t1022;
t813 = t913 * t951 + t917 * t998;
t908 = sin(pkin(12));
t910 = cos(pkin(12));
t757 = t813 * t908 + t910 * t872;
t759 = t813 * t910 - t872 * t908;
t912 = sin(qJ(5));
t916 = cos(qJ(5));
t1091 = t757 * t912 - t759 * t916;
t911 = sin(qJ(6));
t1067 = t1091 * t911;
t675 = t916 * t757 + t759 * t912;
t915 = cos(qJ(6));
t617 = t915 * t675 - t1067;
t973 = t913 * t998;
t811 = -t917 * t951 + t973;
t803 = qJD(5) + t811;
t798 = qJD(6) + t803;
t1101 = t617 * t798;
t1108 = t675 * t803;
t954 = t1091 * t915 + t675 * t911;
t1100 = t798 * t954;
t830 = -pkin(8) * t998 + t918 * t971;
t964 = pkin(2) * t914 - pkin(9) * t918;
t831 = t964 * t1022;
t1031 = t917 * t830 + t913 * t831;
t726 = qJ(4) * t998 + t1031;
t1107 = t1109 * t908 + t910 * t726;
t1018 = qJD(3) * t913;
t1005 = pkin(9) * t1018;
t1034 = -t1109 * t910 + (t1005 + t726) * t908;
t1048 = t910 * t917;
t1046 = t917 * t918;
t797 = (t1046 * t910 + t908 * t914) * t1022;
t996 = t913 * t1021;
t972 = t909 * t996;
t1106 = pkin(4) * t972 - pkin(10) * t797 - (pkin(4) * t913 - pkin(10) * t1048) * qJD(3) - t1034;
t1049 = t910 * t913;
t1052 = t908 * t917;
t796 = t1052 * t997 - t910 * t998;
t1105 = -pkin(10) * t796 - (-pkin(9) * t1049 - pkin(10) * t1052) * qJD(3) + t1107;
t1104 = t1091 * t803;
t1065 = t811 * t908;
t794 = pkin(9) * t951 + t833;
t1079 = pkin(9) * t914;
t949 = -pkin(2) * t918 - pkin(1) - t1079;
t825 = t949 * t909;
t802 = qJD(1) * t825;
t711 = -t913 * t794 + t802 * t917;
t739 = pkin(3) * t813 + qJ(4) * t811;
t657 = t910 * t711 + t908 * t739;
t643 = pkin(10) * t1065 + t657;
t1102 = -qJD(4) * t910 + t643;
t1014 = qJD(5) * t913;
t1017 = qJD(3) * t917;
t1054 = t908 * t912;
t854 = -t916 * t910 + t1054;
t855 = t908 * t916 + t910 * t912;
t1037 = -t1014 * t855 - t1017 * t854 + t796 * t912 - t797 * t916;
t1013 = qJD(5) * t916;
t1036 = t1013 * t1049 - t1014 * t1054 + t1017 * t855 - t916 * t796 - t797 * t912;
t1030 = t803 * t854;
t1029 = t803 * t855;
t1008 = qJDD(1) * t914;
t989 = t909 * t1008;
t1009 = qJD(1) * qJD(2);
t990 = t918 * t1009;
t1098 = t909 * t990 + t989;
t1050 = t909 * t918;
t1082 = cos(qJ(1));
t1000 = t909 * t1082;
t1081 = sin(qJ(1));
t967 = t1071 * t1082;
t843 = t1081 * t918 + t914 * t967;
t784 = -t913 * t1000 + t843 * t917;
t842 = t1081 * t914 - t918 * t967;
t905 = pkin(12) + qJ(5);
t902 = qJ(6) + t905;
t896 = sin(t902);
t897 = cos(t902);
t1093 = t784 * t897 + t842 * t896;
t1012 = qJD(6) * t911;
t793 = -pkin(2) * t951 - t830;
t689 = t811 * pkin(3) - t813 * qJ(4) + t793;
t712 = t917 * t794 + t913 * t802;
t693 = -qJ(4) * t872 + t712;
t633 = t910 * t689 - t693 * t908;
t603 = pkin(4) * t811 - pkin(10) * t759 + t633;
t634 = t908 * t689 + t910 * t693;
t613 = -pkin(10) * t757 + t634;
t580 = t603 * t912 + t613 * t916;
t574 = -pkin(11) * t675 + t580;
t572 = t574 * t1012;
t691 = pkin(3) * t872 + qJD(4) - t711;
t659 = pkin(4) * t757 + t691;
t608 = pkin(5) * t675 + t659;
t966 = t1071 * t1081;
t845 = t1082 * t918 - t914 * t966;
t999 = t909 * t1081;
t788 = t845 * t917 + t913 * t999;
t844 = t1082 * t914 + t918 * t966;
t710 = t788 * t897 + t844 * t896;
t1051 = t909 * t914;
t841 = t1051 * t917 + t1071 * t913;
t1097 = t608 * t617 + g(1) * t710 + g(2) * t1093 - g(3) * (t1050 * t896 - t841 * t897) + t572;
t900 = sin(t905);
t901 = cos(t905);
t1096 = t784 * t900 - t842 * t901;
t1095 = t784 * t901 + t842 * t900;
t1094 = t784 * t896 - t842 * t897;
t932 = qJD(3) * t951;
t978 = t1071 * qJDD(1);
t946 = t978 + qJDD(2);
t1019 = qJD(2) * t918;
t993 = t913 * t1019;
t715 = (qJD(1) * (t1017 * t914 + t993) + t913 * t1008) * t909 + t913 * t932 - t917 * t946;
t709 = -t788 * t896 + t844 * t897;
t1092 = t608 * t954 - g(3) * (-t1050 * t897 - t841 * t896) + g(2) * t1094 - g(1) * t709;
t703 = qJDD(5) + t715;
t700 = qJDD(6) + t703;
t1090 = t700 * MDP(33) + (-t617 ^ 2 + t954 ^ 2) * MDP(30) - t617 * MDP(29) * t954;
t1001 = pkin(1) * t1071;
t943 = -pkin(8) * t1051 + t918 * t1001;
t823 = -pkin(2) * t1071 - t943;
t840 = t1051 * t913 - t1071 * t917;
t723 = t840 * pkin(3) - t841 * qJ(4) + t823;
t1025 = pkin(8) * t1050 + t914 * t1001;
t824 = pkin(9) * t1071 + t1025;
t1032 = t917 * t824 + t913 * t825;
t724 = -qJ(4) * t1050 + t1032;
t654 = t910 * t723 - t724 * t908;
t779 = -t1050 * t908 + t841 * t910;
t625 = pkin(4) * t840 - pkin(10) * t779 + t654;
t655 = t908 * t723 + t910 * t724;
t778 = t1050 * t910 + t841 * t908;
t635 = -pkin(10) * t778 + t655;
t1045 = t912 * t625 + t916 * t635;
t1089 = t1106 * t916;
t945 = pkin(3) * t917 + qJ(4) * t913 + pkin(2);
t849 = t910 * t945;
t769 = -pkin(10) * t1049 - t849 + (-pkin(9) * t908 - pkin(4)) * t917;
t1053 = t908 * t913;
t809 = pkin(9) * t1048 - t908 * t945;
t782 = -pkin(10) * t1053 + t809;
t1035 = t912 * t769 + t916 * t782;
t814 = t913 * t830;
t727 = -pkin(3) * t998 - t831 * t917 + t814;
t1028 = -pkin(4) * t796 - t727 + (pkin(4) * t908 + pkin(9)) * t1017;
t1073 = pkin(10) + qJ(4);
t867 = t1073 * t908;
t868 = t1073 * t910;
t1026 = -t912 * t867 + t916 * t868;
t1088 = (qJDD(2) + 0.2e1 * t978) * t909;
t1015 = qJD(5) * t912;
t1087 = -t769 * t1013 + t1015 * t782 + t1105 * t916 + t1106 * t912;
t1007 = qJDD(1) * t918;
t886 = t909 * t1007;
t991 = t914 * t1009;
t970 = t909 * t991;
t827 = qJDD(3) - t886 + t970;
t1086 = -pkin(3) * t827 + qJDD(4);
t714 = -qJD(3) * t973 + t913 * t946 + (t932 + t1098) * t917;
t681 = t714 * t908 - t910 * t827;
t682 = t714 * t910 + t827 * t908;
t598 = -qJD(5) * t1091 + t916 * t681 + t682 * t912;
t597 = -t757 * t1013 - t1015 * t759 - t912 * t681 + t916 * t682;
t984 = t911 * t597 + t915 * t598;
t566 = -qJD(6) * t954 + t984;
t656 = -t711 * t908 + t910 * t739;
t630 = pkin(10) * t811 * t910 + pkin(4) * t813 + t656;
t947 = qJD(4) * t908 + qJD(5) * t868;
t1083 = t867 * t1013 + t1102 * t916 + (t630 + t947) * t912;
t919 = qJD(1) ^ 2;
t1077 = g(1) * t844;
t1075 = g(2) * t842;
t1072 = pkin(9) * qJD(3);
t1070 = qJ(4) * t715;
t579 = t916 * t603 - t613 * t912;
t573 = pkin(11) * t1091 + t579;
t571 = pkin(5) * t803 + t573;
t1069 = t571 * t915;
t1068 = t574 * t915;
t1066 = t811 * t872;
t1064 = t813 * t872;
t940 = t872 * t913;
t1059 = t896 * t917;
t1058 = t897 * t917;
t1057 = t900 * t917;
t1056 = t901 * t917;
t904 = t909 ^ 2;
t1055 = t904 * t919;
t948 = qJD(2) * t971;
t968 = pkin(1) * t978;
t1002 = pkin(8) * t886 + t914 * t968 + t918 * t948;
t925 = -pkin(8) * t970 + t1002;
t737 = pkin(9) * t946 + t925;
t942 = t964 * qJD(2);
t743 = (qJD(1) * t942 + qJDD(1) * t949) * t909;
t939 = t802 * t1017 - t1018 * t794 + t917 * t737 + t913 * t743;
t612 = qJ(4) * t827 - qJD(4) * t872 + t939;
t975 = pkin(8) * t1098 + t914 * t948 - t918 * t968;
t738 = -pkin(2) * t946 + t975;
t614 = t715 * pkin(3) - t714 * qJ(4) - t813 * qJD(4) + t738;
t584 = -t612 * t908 + t910 * t614;
t569 = pkin(4) * t715 - pkin(10) * t682 + t584;
t585 = t910 * t612 + t908 * t614;
t578 = -pkin(10) * t681 + t585;
t560 = -qJD(5) * t580 + t916 * t569 - t912 * t578;
t557 = pkin(5) * t703 - pkin(11) * t597 + t560;
t1047 = t911 * t557;
t828 = t855 * t913;
t829 = t854 * t913;
t741 = t915 * t828 - t829 * t911;
t1043 = -qJD(6) * t741 - t1036 * t911 + t1037 * t915;
t742 = -t828 * t911 - t829 * t915;
t1042 = qJD(6) * t742 + t1036 * t915 + t1037 * t911;
t1020 = qJD(2) * t914;
t832 = t909 * t942;
t834 = t943 * qJD(2);
t938 = t825 * t1017 - t1018 * t824 + t913 * t832 + t917 * t834;
t660 = (qJ(4) * t1020 - qJD(4) * t918) * t909 + t938;
t780 = qJD(3) * t841 + t909 * t993;
t994 = t909 * t1019;
t781 = -qJD(3) * t840 + t917 * t994;
t835 = t1025 * qJD(2);
t666 = t780 * pkin(3) - t781 * qJ(4) - t841 * qJD(4) + t835;
t605 = t910 * t660 + t908 * t666;
t767 = t915 * t854 + t855 * t911;
t1040 = -qJD(6) * t767 - t1029 * t911 - t1030 * t915;
t768 = -t854 * t911 + t855 * t915;
t1039 = qJD(6) * t768 + t1029 * t915 - t1030 * t911;
t1038 = pkin(5) * t1036 + t1028;
t1033 = -t1005 * t910 - t1107;
t856 = pkin(4) * t1053 + t913 * pkin(9);
t906 = t914 ^ 2;
t1024 = -t918 ^ 2 + t906;
t1011 = qJD(6) * t915;
t1010 = -qJD(4) + t691;
t1004 = t918 * t1055;
t1003 = -t675 * t1011 + t915 * t597 - t911 * t598;
t683 = -pkin(4) * t1065 + t712;
t898 = -pkin(4) * t910 - pkin(3);
t995 = t909 * t1020;
t992 = 0.2e1 * pkin(1) * t904;
t987 = pkin(5) * t1029 - t683;
t937 = -t603 * t1013 + t1015 * t613 - t912 * t569 - t916 * t578;
t558 = -pkin(11) * t598 - t937;
t985 = t915 * t557 - t911 * t558;
t983 = t916 * t625 - t635 * t912;
t604 = -t660 * t908 + t910 * t666;
t981 = t916 * t769 - t782 * t912;
t980 = -t913 * t824 + t825 * t917;
t979 = -t916 * t867 - t868 * t912;
t977 = qJD(6) * t571 + t558;
t976 = t794 * t1017 + t802 * t1018 + t913 * t737 - t917 * t743;
t965 = t909 * t919 * t1071;
t783 = t1000 * t917 + t843 * t913;
t787 = t845 * t913 - t917 * t999;
t963 = -g(1) * t783 + g(2) * t787;
t962 = g(1) * t845 + g(2) * t843;
t725 = pkin(3) * t1050 - t980;
t627 = t916 * t630;
t752 = -pkin(11) * t854 + t1026;
t961 = pkin(5) * t813 - pkin(11) * t1030 + t855 * qJD(4) + qJD(5) * t1026 + qJD(6) * t752 - t643 * t912 + t627;
t751 = -pkin(11) * t855 + t979;
t960 = pkin(11) * t1029 - qJD(6) * t751 + t1083;
t669 = -pkin(11) * t828 + t1035;
t959 = qJD(5) * t1035 + qJD(6) * t669 + t1089 - t1105 * t912 + t1037 * pkin(11) + (-t1018 + t972) * pkin(5);
t667 = -pkin(5) * t917 + pkin(11) * t829 + t981;
t958 = pkin(11) * t1036 - qJD(6) * t667 + t1087;
t564 = t571 * t911 + t1068;
t695 = -t778 * t912 + t779 * t916;
t581 = pkin(5) * t840 - pkin(11) * t695 + t983;
t694 = t916 * t778 + t779 * t912;
t583 = -pkin(11) * t694 + t1045;
t956 = t581 * t915 - t583 * t911;
t955 = t581 * t911 + t583 * t915;
t641 = t915 * t694 + t695 * t911;
t642 = -t694 * t911 + t695 * t915;
t950 = 0.2e1 * t986 + qJD(2);
t944 = -t824 * t1017 - t825 * t1018 + t832 * t917 - t913 * t834;
t748 = t781 * t910 + t908 * t995;
t592 = pkin(4) * t780 - pkin(10) * t748 + t604;
t747 = t781 * t908 - t910 * t995;
t600 = -pkin(10) * t747 + t605;
t936 = t625 * t1013 - t1015 * t635 + t912 * t592 + t916 * t600;
t565 = t1012 * t1091 + t1003;
t934 = g(1) * t787 + g(2) * t783 + g(3) * t840;
t933 = -g(1) * t788 - g(2) * t784 - g(3) * t841;
t680 = pkin(4) * t778 + t725;
t931 = t946 * MDP(8);
t615 = t976 + t1086;
t929 = g(3) * t1050 - t1075 - t1077;
t928 = -g(3) * t1051 - t962;
t926 = -t615 + t934;
t924 = -t738 - t929;
t923 = -pkin(9) * t827 - t793 * t872;
t596 = pkin(4) * t681 + t615;
t665 = -pkin(3) * t995 - t944;
t921 = t934 - t976;
t920 = -qJD(5) * t1045 + t916 * t592 - t600 * t912;
t555 = -qJD(6) * t564 + t985;
t636 = pkin(4) * t747 + t665;
t820 = pkin(5) * t854 + t898;
t808 = -pkin(9) * t1052 - t849;
t772 = pkin(5) * t828 + t856;
t721 = t788 * t901 + t844 * t900;
t720 = -t788 * t900 + t844 * t901;
t631 = pkin(5) * t694 + t680;
t629 = qJD(5) * t695 + t916 * t747 + t748 * t912;
t628 = -qJD(5) * t694 - t747 * t912 + t748 * t916;
t589 = pkin(5) * t629 + t636;
t577 = qJD(6) * t642 + t628 * t911 + t915 * t629;
t576 = -qJD(6) * t641 + t628 * t915 - t629 * t911;
t570 = pkin(5) * t598 + t596;
t563 = -t574 * t911 + t1069;
t562 = -pkin(11) * t629 + t936;
t561 = pkin(5) * t780 - pkin(11) * t628 + t920;
t554 = t977 * t915 + t1047 - t572;
t1 = [(-t1091 * t780 + t597 * t840 + t628 * t803 + t695 * t703) * MDP(24) + (t1091 * t629 - t597 * t694 - t598 * t695 - t628 * t675) * MDP(23) + (-t1091 * t628 + t597 * t695) * MDP(22) + (-g(1) * t1096 - g(2) * t720 - t1045 * t703 - t1091 * t636 - t580 * t780 + t596 * t695 + t680 * t597 + t659 * t628 - t936 * t803 + t937 * t840) * MDP(28) + (t565 * t840 + t576 * t798 + t642 * t700 - t780 * t954) * MDP(31) + (-t565 * t641 - t566 * t642 - t576 * t617 + t577 * t954) * MDP(30) + (t565 * t642 - t576 * t954) * MDP(29) + (t585 * t655 + t634 * t605 + t584 * t654 + t633 * t604 + t615 * t725 + t691 * t665 - g(1) * (-pkin(1) * t1081 - t843 * pkin(2) - pkin(3) * t784 + pkin(8) * t1000 - t842 * pkin(9) - qJ(4) * t783) - g(2) * (pkin(1) * t1082 + t845 * pkin(2) + t788 * pkin(3) + pkin(8) * t999 + t844 * pkin(9) + t787 * qJ(4))) * MDP(21) + (-t944 * t872 + t980 * t827 + t835 * t811 + t823 * t715 + t738 * t840 + t793 * t780 + g(1) * t784 - g(2) * t788 + (t1020 * t711 + t918 * t976) * t909) * MDP(16) + (-t605 * t811 - t655 * t715 - t585 * t840 - t634 * t780 + t665 * t759 + t725 * t682 + t615 * t779 + t691 * t748 - g(1) * (t784 * t908 - t842 * t910) - g(2) * (-t788 * t908 + t844 * t910)) * MDP(19) + (t604 * t811 + t654 * t715 + t584 * t840 + t633 * t780 + t665 * t757 + t725 * t681 + t615 * t778 + t691 * t747 - g(1) * (-t784 * t910 - t842 * t908) - g(2) * (t788 * t910 + t844 * t908)) * MDP(18) + ((-qJD(6) * t955 + t561 * t915 - t562 * t911) * t798 + t956 * t700 + t555 * t840 + t563 * t780 + t589 * t617 + t631 * t566 + t570 * t641 + t608 * t577 + g(1) * t1093 - g(2) * t710) * MDP(34) + (-(qJD(6) * t956 + t561 * t911 + t562 * t915) * t798 - t955 * t700 - t554 * t840 - t564 * t780 - t589 * t954 + t631 * t565 + t570 * t642 + t608 * t576 - g(1) * t1094 - g(2) * t709) * MDP(35) + (g(1) * t1095 - g(2) * t721 + t560 * t840 + t579 * t780 + t596 * t694 + t680 * t598 + t659 * t629 + t636 * t675 + t983 * t703 + t920 * t803) * MDP(27) + (0.2e1 * (t1007 * t914 - t1009 * t1024) * MDP(5) + (qJDD(1) * t906 + 0.2e1 * t914 * t990) * MDP(4)) * t904 + (g(1) * t1081 - g(2) * t1082) * MDP(2) + (g(1) * t1082 + g(2) * t1081) * MDP(3) + (t780 * t872 - t827 * t840 + (-t1020 * t811 + t715 * t918) * t909) * MDP(14) + (-t781 * t872 + t827 * t841 + (t1020 * t813 - t714 * t918) * t909) * MDP(13) + (-t584 * t779 - t585 * t778 - t604 * t759 - t605 * t757 - t633 * t748 - t634 * t747 - t654 * t682 - t655 * t681 - t963) * MDP(20) + (-t714 * t840 - t715 * t841 - t780 * t813 - t781 * t811) * MDP(12) + (t714 * t841 + t781 * t813) * MDP(11) + (-t566 * t840 - t577 * t798 - t617 * t780 - t641 * t700) * MDP(32) + (t700 * t840 + t780 * t798) * MDP(33) + (-t598 * t840 - t629 * t803 - t675 * t780 - t694 * t703) * MDP(25) + (t703 * t840 + t780 * t803) * MDP(26) + (t938 * t872 - t1032 * t827 + t835 * t813 + t823 * t714 + t738 * t841 + t793 * t781 + (-t1020 * t712 + t918 * t939) * t909 + t963) * MDP(17) + (t1088 * t918 - t950 * t995) * MDP(7) + (t1088 * t914 + t950 * t994) * MDP(6) + (-t1020 * t872 - t827 * t918) * t909 * MDP(15) + (-t835 * t951 + t943 * t946 - t975 * t1071 + g(1) * t843 - g(2) * t845 + (-t991 + t1007) * t992) * MDP(9) + (-t834 * t951 - t1025 * t946 - t925 * t1071 - g(1) * t842 + g(2) * t844 + (-t990 - t1008) * t992) * MDP(10) + t1071 * t931 + qJDD(1) * MDP(1); (-t1042 * t798 + t566 * t917 + t617 * t940 - t700 * t741) * MDP(32) + (t1036 * t1091 - t1037 * t675 - t597 * t828 + t598 * t829) * MDP(23) + (-t1037 * t1091 - t597 * t829) * MDP(22) + (-t1035 * t703 - t937 * t917 - t580 * t1018 + t856 * t597 - t596 * t829 - g(1) * (t1057 * t844 + t845 * t901) - g(2) * (t1057 * t842 + t843 * t901) + t1087 * t803 - t1028 * t1091 + t1037 * t659 + (t580 * t996 - g(3) * (-t1046 * t900 + t901 * t914)) * t909) * MDP(28) + (t1037 * t803 + t1091 * t940 - t597 * t917 - t703 * t829) * MDP(24) + (t584 * t808 + t585 * t809 - t691 * t727 + t1033 * t634 + t1034 * t633 + t945 * t1077 + t945 * t1075 + (t1017 * t691 + t615 * t913 - t962) * pkin(9) - g(3) * (t918 * t945 + t1079) * t909) * MDP(21) + (-t1043 * t954 + t565 * t742) * MDP(29) + (t1042 * t954 - t1043 * t617 - t565 * t741 - t566 * t742) * MDP(30) + (-(t667 * t911 + t669 * t915) * t700 + t554 * t917 - t564 * t1018 + t772 * t565 + t570 * t742 - g(1) * (t1059 * t844 + t845 * t897) - g(2) * (t1059 * t842 + t843 * t897) + (t911 * t959 + t915 * t958) * t798 - t1038 * t954 + t1043 * t608 + (t564 * t996 - g(3) * (-t1046 * t896 + t897 * t914)) * t909) * MDP(35) + (-t703 * t917 - t803 * t940) * MDP(26) + (-t700 * t917 - t798 * t940) * MDP(33) + (t1043 * t798 - t565 * t917 + t700 * t742 + t940 * t954) * MDP(31) + (t914 * t965 + t886) * MDP(7) + (t981 * t703 - t560 * t917 + t579 * t1018 + t856 * t598 + t596 * t828 - g(1) * (-t1056 * t844 + t845 * t900) - g(2) * (-t1056 * t842 + t843 * t900) + (-t782 * t1013 + (-qJD(5) * t769 + t1105) * t912 - t1089) * t803 + t1028 * t675 + t1036 * t659 + (-t579 * t996 - g(3) * (t1046 * t901 + t900 * t914)) * t909) * MDP(27) + (-t1064 * t917 + t714 * t913) * MDP(11) + ((t714 + t1066) * t917 + (-t715 + t1064) * t913) * MDP(12) + t931 + (-t872 * t1017 + t827 * t913 + (t1046 * t872 - t813 * t914) * t1022) * MDP(13) + (pkin(1) * t1004 + t830 * t951 + (pkin(8) * t1009 + g(3)) * t1051 + t962 - t1002) * MDP(10) + (pkin(1) * t1055 * t914 + t833 * t951 - t929 - t975) * MDP(9) + (-t691 * t797 - t809 * t715 - t727 * t759 - t1033 * t811 + t928 * t910 + (t585 + (pkin(9) * t759 + t691 * t910) * qJD(3) + t929 * t908) * t917 + (pkin(9) * t682 + t615 * t910 + t634 * t872) * t913) * MDP(19) + (-t691 * t796 + t808 * t715 - t727 * t757 + t1034 * t811 + t928 * t908 + (-t584 + (pkin(9) * t757 + t691 * t908) * qJD(3) - t929 * t910) * t917 + (pkin(9) * t681 + t615 * t908 - t633 * t872) * t913) * MDP(18) + (t633 * t797 + t634 * t796 - t681 * t809 - t682 * t808 - t1034 * t759 - t1033 * t757 + (-t633 * t910 - t634 * t908) * t1017 + (-t584 * t910 - t585 * t908 - t929) * t913) * MDP(20) + (-t1036 * t803 + t598 * t917 + t675 * t940 - t703 * t828) * MDP(25) - t914 * MDP(4) * t1004 + (-pkin(2) * t714 - t1031 * t872 + t712 * t998 - t833 * t813 + t923 * t917 + (-t1072 * t872 - t924) * t913) * MDP(17) + (-t711 * t998 - pkin(2) * t715 - t833 * t811 - t814 * t872 + t923 * t913 + ((t831 + t1072) * t872 + t924) * t917) * MDP(16) + (-t918 * t965 + t989) * MDP(6) + ((t667 * t915 - t669 * t911) * t700 - t555 * t917 + t563 * t1018 + t772 * t566 + t570 * t741 - g(1) * (-t1058 * t844 + t845 * t896) - g(2) * (-t1058 * t842 + t843 * t896) + (t911 * t958 - t915 * t959) * t798 + t1038 * t617 + t1042 * t608 + (-t563 * t996 - g(3) * (t1046 * t897 + t896 * t914)) * t909) * MDP(34) + (t872 * t1018 + t827 * t917 + (t811 * t914 - t918 * t940) * t1022) * MDP(14) + t872 * MDP(15) * t998 + t1024 * MDP(5) * t1055; (-t1026 * t703 - t1030 * t659 + t1083 * t803 + t1091 * t683 + t596 * t855 + t898 * t597 - t934 * t900) * MDP(28) + ((t751 * t915 - t752 * t911) * t700 + t820 * t566 + t570 * t767 + (t911 * t960 - t915 * t961) * t798 + t987 * t617 + t1039 * t608 + t934 * t897) * MDP(34) + (-t1039 * t798 - t700 * t767) * MDP(32) + (-(t751 * t911 + t752 * t915) * t700 + t820 * t565 + t570 * t768 + (t911 * t961 + t915 * t960) * t798 - t987 * t954 + t1040 * t608 - t934 * t896) * MDP(35) + (t1040 * t798 + t700 * t768) * MDP(31) + (-t1040 * t954 + t565 * t768) * MDP(29) + (t1039 * t954 - t1040 * t617 - t565 * t767 - t566 * t768) * MDP(30) + (-t711 * t872 + t793 * t811 - t933 - t939) * MDP(17) + (-t1064 - t715) * MDP(14) + (t714 - t1066) * MDP(13) + (t979 * t703 + t898 * t598 + t596 * t854 - t683 * t675 + (-t627 - t947 * t916 + (qJD(5) * t867 + t1102) * t912) * t803 + t1029 * t659 + t934 * t901) * MDP(27) + (-t1029 * t803 - t703 * t854) * MDP(25) + (-t1030 * t803 + t703 * t855) * MDP(24) + (t1030 * t1091 + t597 * t855) * MDP(22) + (t656 * t759 + t657 * t757 + (-qJ(4) * t681 - qJD(4) * t757 - t633 * t811 + t585) * t910 + (qJ(4) * t682 + qJD(4) * t759 - t634 * t811 - t584) * t908 + t933) * MDP(20) + (-t633 * t656 - t634 * t657 - t691 * t712 + (-t633 * t908 + t634 * t910) * qJD(4) + t926 * pkin(3) + (-t584 * t908 + t585 * t910 + t933) * qJ(4)) * MDP(21) + t827 * MDP(15) - t811 ^ 2 * MDP(12) + (t1029 * t1091 + t1030 * t675 - t597 * t854 - t598 * t855) * MDP(23) + (-t712 * t872 + t921) * MDP(16) + (-t910 * t1070 - pkin(3) * t682 - t712 * t759 + (t1010 * t910 + t657) * t811 - t926 * t908) * MDP(19) + (-t908 * t1070 - pkin(3) * t681 - t712 * t757 + (t1010 * t908 - t656) * t811 + t926 * t910) * MDP(18) + (MDP(11) * t811 + MDP(12) * t813 - MDP(16) * t793 - MDP(18) * t633 + MDP(19) * t634 + MDP(24) * t1091 + MDP(25) * t675 - MDP(26) * t803 - MDP(27) * t579 + MDP(28) * t580 + MDP(31) * t954 + MDP(32) * t617 - MDP(33) * t798 - MDP(34) * t563 + MDP(35) * t564) * t813; (t759 * t811 + t681) * MDP(18) + (-t757 * t811 + t682) * MDP(19) + (-t757 ^ 2 - t759 ^ 2) * MDP(20) + (t633 * t759 + t634 * t757 + t1086 - t921) * MDP(21) + (t598 - t1104) * MDP(27) + (t597 - t1108) * MDP(28) + (t566 - t1100) * MDP(34) + (t565 - t1101) * MDP(35); -t1091 * t675 * MDP(22) + (t1091 ^ 2 - t675 ^ 2) * MDP(23) + (t597 + t1108) * MDP(24) + (-t598 - t1104) * MDP(25) + t703 * MDP(26) + (t580 * t803 + t659 * t1091 - g(1) * t720 + g(2) * t1096 - g(3) * (-t1050 * t901 - t841 * t900) + t560) * MDP(27) + (t579 * t803 + t659 * t675 + g(1) * t721 + g(2) * t1095 - g(3) * (t1050 * t900 - t841 * t901) + t937) * MDP(28) + (t565 + t1101) * MDP(31) + (-t566 - t1100) * MDP(32) + (-(-t573 * t911 - t1068) * t798 + (-t1012 * t798 + t1091 * t617 + t700 * t915) * pkin(5) + t555 + t1092) * MDP(34) + ((-t574 * t798 - t557) * t911 + (t573 * t798 - t977) * t915 + (-t1011 * t798 - t1091 * t954 - t700 * t911) * pkin(5) + t1097) * MDP(35) + t1090; (t1003 + t1101) * MDP(31) + (-t984 - t1100) * MDP(32) + (t564 * t798 + t1092 + t985) * MDP(34) + (-t915 * t558 + t563 * t798 - t1047 + t1097) * MDP(35) + (MDP(31) * t1067 + MDP(32) * t954 - MDP(34) * t564 - MDP(35) * t1069) * qJD(6) + t1090;];
tau  = t1;
