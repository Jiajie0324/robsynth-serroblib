% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPRR12_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR12_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR12_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR12_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR12_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 19:47:01
% EndTime: 2019-03-09 19:47:33
% DurationCPUTime: 20.71s
% Computational Cost: add. (16030->724), mult. (41606->985), div. (0->0), fcn. (34005->12), ass. (0->270)
t768 = sin(pkin(6));
t777 = cos(qJ(2));
t846 = qJD(1) * t777;
t829 = t768 * t846;
t748 = -qJD(3) + t829;
t773 = sin(qJ(2));
t890 = cos(pkin(6));
t823 = t890 * qJD(1);
t807 = pkin(1) * t823;
t718 = pkin(8) * t829 + t773 * t807;
t772 = sin(qJ(3));
t776 = cos(qJ(3));
t913 = qJD(4) * t772 + t718 + t748 * (pkin(3) * t772 - qJ(4) * t776);
t792 = t823 + qJD(2);
t847 = qJD(1) * t768;
t830 = t773 * t847;
t696 = t772 * t792 + t776 * t830;
t767 = sin(pkin(12));
t769 = cos(pkin(12));
t642 = t696 * t767 + t769 * t748;
t644 = t696 * t769 - t748 * t767;
t771 = sin(qJ(5));
t775 = cos(qJ(5));
t574 = t775 * t642 + t644 * t771;
t774 = cos(qJ(6));
t770 = sin(qJ(6));
t899 = t642 * t771 - t644 * t775;
t884 = t899 * t770;
t512 = t774 * t574 - t884;
t900 = -t772 * t830 + t776 * t792;
t687 = qJD(5) - t900;
t678 = qJD(6) + t687;
t903 = t512 * t678;
t912 = t574 * t687;
t795 = t574 * t770 + t774 * t899;
t902 = t678 * t795;
t715 = -pkin(8) * t830 + t777 * t807;
t788 = (pkin(2) * t773 - pkin(9) * t777) * t768;
t716 = qJD(1) * t788;
t855 = t776 * t715 + t772 * t716;
t618 = qJ(4) * t830 + t855;
t843 = qJD(3) * t772;
t833 = pkin(9) * t843;
t864 = t913 * t769 + (-t618 - t833) * t767;
t911 = t769 * t618 + t767 * t913;
t910 = t687 * t899;
t674 = pkin(9) * t792 + t718;
t711 = (-pkin(2) * t777 - pkin(9) * t773 - pkin(1)) * t768;
t686 = qJD(1) * t711;
t601 = -t772 * t674 + t686 * t776;
t625 = pkin(3) * t696 - qJ(4) * t900;
t559 = t769 * t601 + t767 * t625;
t881 = t900 * t767;
t539 = -pkin(10) * t881 + t559;
t908 = -qJD(4) * t769 + t539;
t870 = t776 * t777;
t677 = (t767 * t773 + t769 * t870) * t847;
t808 = t772 * t829;
t871 = t769 * t776;
t907 = pkin(4) * t808 - pkin(10) * t677 - (pkin(4) * t772 - pkin(10) * t871) * qJD(3) + t864;
t875 = t767 * t776;
t676 = -t769 * t830 + t829 * t875;
t872 = t769 * t772;
t906 = -pkin(10) * t676 - (-pkin(9) * t872 - pkin(10) * t875) * qJD(3) + t911;
t588 = pkin(3) * t748 + qJD(4) - t601;
t561 = pkin(4) * t642 + t588;
t509 = pkin(5) * t574 + t561;
t905 = t509 * t512;
t904 = t509 * t795;
t877 = t767 * t771;
t735 = -t775 * t769 + t877;
t736 = t767 * t775 + t769 * t771;
t839 = qJD(5) * t772;
t842 = qJD(3) * t776;
t859 = t676 * t771 - t677 * t775 - t735 * t842 - t736 * t839;
t838 = qJD(5) * t775;
t858 = -t775 * t676 - t677 * t771 + t736 * t842 + t838 * t872 - t839 * t877;
t854 = t687 * t735;
t853 = t687 * t736;
t834 = qJD(1) * qJD(2);
t825 = t768 * t834;
t805 = t777 * t825;
t793 = t772 * t805;
t652 = qJD(3) * t696 + t793;
t898 = t652 * MDP(33) + (-t512 ^ 2 + t795 ^ 2) * MDP(30) - t512 * MDP(29) * t795;
t764 = t768 ^ 2;
t897 = -0.2e1 * t764 * t834;
t896 = MDP(5) * (t773 ^ 2 - t777 ^ 2);
t831 = pkin(1) * t890;
t874 = t768 * t773;
t893 = -pkin(8) * t874 + t777 * t831;
t709 = -pkin(2) * t890 - t893;
t725 = t772 * t874 - t776 * t890;
t726 = t772 * t890 + t776 * t874;
t612 = t725 * pkin(3) - t726 * qJ(4) + t709;
t873 = t768 * t777;
t781 = pkin(8) * t873 + t773 * t831;
t710 = pkin(9) * t890 + t781;
t856 = t776 * t710 + t772 * t711;
t613 = -qJ(4) * t873 + t856;
t556 = t769 * t612 - t613 * t767;
t665 = t726 * t769 - t767 * t873;
t521 = pkin(4) * t725 - pkin(10) * t665 + t556;
t557 = t767 * t612 + t769 * t613;
t664 = t726 * t767 + t769 * t873;
t531 = -pkin(10) * t664 + t557;
t869 = t771 * t521 + t775 * t531;
t895 = t907 * t775;
t744 = -pkin(3) * t776 - qJ(4) * t772 - pkin(2);
t730 = t769 * t744;
t655 = -pkin(10) * t872 + t730 + (-pkin(9) * t767 - pkin(4)) * t776;
t692 = pkin(9) * t871 + t767 * t744;
t876 = t767 * t772;
t668 = -pkin(10) * t876 + t692;
t857 = t771 * t655 + t775 * t668;
t815 = -t772 * t715 + t716 * t776;
t619 = -pkin(3) * t830 - t815;
t852 = -pkin(4) * t676 - t619 + (pkin(4) * t767 + pkin(9)) * t842;
t891 = pkin(10) + qJ(4);
t746 = t891 * t767;
t747 = t891 * t769;
t850 = -t771 * t746 + t775 * t747;
t840 = qJD(5) * t771;
t894 = -t655 * t838 + t668 * t840 + t771 * t907 + t775 * t906;
t651 = qJD(3) * t900 + t776 * t805;
t806 = t773 * t825;
t616 = t651 * t767 - t769 * t806;
t617 = t651 * t769 + t767 * t806;
t508 = -qJD(5) * t899 + t775 * t616 + t617 * t771;
t507 = -t771 * t616 + t775 * t617 - t642 * t838 - t644 * t840;
t820 = t770 * t507 + t774 * t508;
t468 = -qJD(6) * t795 + t820;
t558 = -t601 * t767 + t769 * t625;
t526 = -pkin(10) * t769 * t900 + pkin(4) * t696 + t558;
t790 = qJD(4) * t767 + qJD(5) * t747;
t892 = t746 * t838 + t908 * t775 + (t526 + t790) * t771;
t778 = qJD(1) ^ 2;
t889 = qJ(4) * t652;
t673 = -pkin(2) * t792 - t715;
t586 = -pkin(3) * t900 - t696 * qJ(4) + t673;
t602 = t776 * t674 + t772 * t686;
t590 = -qJ(4) * t748 + t602;
t529 = t769 * t586 - t590 * t767;
t499 = -pkin(4) * t900 - pkin(10) * t644 + t529;
t530 = t767 * t586 + t769 * t590;
t510 = -pkin(10) * t642 + t530;
t475 = t775 * t499 - t510 * t771;
t471 = pkin(11) * t899 + t475;
t469 = pkin(5) * t687 + t471;
t888 = t469 * t774;
t476 = t499 * t771 + t510 * t775;
t472 = -pkin(11) * t574 + t476;
t887 = t472 * t774;
t717 = qJD(2) * t788;
t704 = qJD(1) * t717;
t719 = t893 * qJD(2);
t705 = qJD(1) * t719;
t811 = t674 * t842 + t686 * t843 - t776 * t704 + t772 * t705;
t555 = -pkin(3) * t806 + t811;
t886 = t555 * t767;
t885 = t555 * t769;
t883 = t652 * t776;
t882 = t900 * t748;
t880 = t696 * t748;
t786 = t748 * t772;
t879 = t748 * t776;
t878 = t764 * t778;
t713 = t736 * t772;
t714 = t735 * t772;
t627 = t774 * t713 - t714 * t770;
t867 = -qJD(6) * t627 - t770 * t858 + t774 * t859;
t628 = -t713 * t770 - t714 * t774;
t866 = qJD(6) * t628 + t770 * t859 + t774 * t858;
t785 = t674 * t843 - t686 * t842 - t772 * t704 - t776 * t705;
t545 = qJ(4) * t806 - qJD(4) * t748 - t785;
t720 = t781 * qJD(2);
t706 = qJD(1) * t720;
t554 = t652 * pkin(3) - t651 * qJ(4) - t696 * qJD(4) + t706;
t496 = t769 * t545 + t767 * t554;
t784 = -t710 * t843 + t711 * t842 + t772 * t717 + t776 * t719;
t845 = qJD(2) * t773;
t562 = (qJ(4) * t845 - qJD(4) * t777) * t768 + t784;
t827 = qJD(2) * t873;
t666 = qJD(3) * t726 + t772 * t827;
t667 = -qJD(3) * t725 + t776 * t827;
t568 = t666 * pkin(3) - t667 * qJ(4) - t726 * qJD(4) + t720;
t501 = t769 * t562 + t767 * t568;
t863 = t769 * t833 + t911;
t653 = t774 * t735 + t736 * t770;
t862 = -qJD(6) * t653 - t770 * t853 - t774 * t854;
t654 = -t735 * t770 + t736 * t774;
t861 = qJD(6) * t654 - t770 * t854 + t774 * t853;
t860 = pkin(5) * t858 + t852;
t737 = pkin(4) * t876 + t772 * pkin(9);
t844 = qJD(2) * t776;
t837 = qJD(6) * t770;
t836 = qJD(6) * t774;
t835 = -qJD(4) + t588;
t832 = t774 * t507 - t770 * t508 - t574 * t836;
t580 = pkin(4) * t881 + t602;
t761 = -pkin(4) * t769 - pkin(3);
t828 = t768 * t845;
t824 = pkin(5) * t853 - t580;
t495 = -t545 * t767 + t769 * t554;
t484 = pkin(4) * t652 - pkin(10) * t617 + t495;
t488 = -pkin(10) * t616 + t496;
t462 = -qJD(5) * t476 + t775 * t484 - t488 * t771;
t459 = pkin(5) * t652 - pkin(11) * t507 + t462;
t461 = t771 * t484 + t775 * t488 + t499 * t838 - t510 * t840;
t460 = -pkin(11) * t508 + t461;
t822 = t774 * t459 - t770 * t460;
t470 = t472 * t837;
t821 = t770 * t459 - t470;
t819 = t775 * t521 - t531 * t771;
t500 = -t562 * t767 + t769 * t568;
t817 = t775 * t655 - t668 * t771;
t816 = -t772 * t710 + t711 * t776;
t814 = -t775 * t746 - t747 * t771;
t813 = qJD(6) * t469 + t460;
t812 = t764 * t773 * t777 * MDP(4);
t803 = pkin(1) * t897;
t614 = pkin(3) * t873 - t816;
t523 = t775 * t526;
t637 = -pkin(11) * t735 + t850;
t802 = pkin(5) * t696 - pkin(11) * t854 + t736 * qJD(4) + t850 * qJD(5) + qJD(6) * t637 - t539 * t771 + t523;
t636 = -pkin(11) * t736 + t814;
t801 = pkin(11) * t853 - qJD(6) * t636 + t892;
t571 = -pkin(11) * t713 + t857;
t800 = t857 * qJD(5) + qJD(6) * t571 + t895 - t906 * t771 + t859 * pkin(11) + (t808 - t843) * pkin(5);
t569 = -pkin(5) * t776 + pkin(11) * t714 + t817;
t799 = pkin(11) * t858 - qJD(6) * t569 + t894;
t466 = t469 * t770 + t887;
t592 = -t664 * t771 + t665 * t775;
t477 = pkin(5) * t725 - pkin(11) * t592 + t819;
t591 = t775 * t664 + t665 * t771;
t479 = -pkin(11) * t591 + t869;
t797 = t477 * t774 - t479 * t770;
t796 = t477 * t770 + t479 * t774;
t537 = t774 * t591 + t592 * t770;
t538 = -t591 * t770 + t592 * t774;
t789 = -t710 * t842 - t711 * t843 + t717 * t776 - t772 * t719;
t633 = t667 * t769 + t767 * t828;
t492 = pkin(4) * t666 - pkin(10) * t633 + t500;
t632 = t667 * t767 - t769 * t828;
t494 = -pkin(10) * t632 + t501;
t783 = t771 * t492 + t775 * t494 + t521 * t838 - t531 * t840;
t467 = t837 * t899 + t832;
t579 = pkin(4) * t664 + t614;
t780 = pkin(1) * (-qJD(2) * t823 + t878);
t567 = -pkin(3) * t828 - t789;
t779 = -qJD(5) * t869 + t775 * t492 - t494 * t771;
t457 = -qJD(6) * t466 + t822;
t516 = pkin(4) * t616 + t555;
t532 = pkin(4) * t632 + t567;
t703 = pkin(5) * t735 + t761;
t691 = -pkin(9) * t875 + t730;
t658 = pkin(5) * t713 + t737;
t615 = t652 * t725;
t527 = pkin(5) * t591 + t579;
t525 = qJD(5) * t592 + t775 * t632 + t633 * t771;
t524 = -qJD(5) * t591 - t632 * t771 + t633 * t775;
t489 = pkin(5) * t525 + t532;
t480 = pkin(5) * t508 + t516;
t474 = qJD(6) * t538 + t524 * t770 + t774 * t525;
t473 = -qJD(6) * t537 + t524 * t774 - t525 * t770;
t465 = -t472 * t770 + t888;
t464 = -pkin(11) * t525 + t783;
t463 = pkin(5) * t666 - pkin(11) * t524 + t779;
t456 = t813 * t774 + t821;
t1 = [(t462 * t725 + t475 * t666 + t579 * t508 + t516 * t591 + t561 * t525 + t532 * t574 + t652 * t819 + t687 * t779) * MDP(27) + ((-qJD(6) * t796 + t463 * t774 - t464 * t770) * t678 + t797 * t652 + t457 * t725 + t465 * t666 + t489 * t512 + t527 * t468 + t480 * t537 + t509 * t474) * MDP(34) + 0.2e1 * t812 * t834 + (-t705 * t890 - t719 * t792 + t777 * t803) * MDP(10) + (-t706 * t890 - t720 * t792 + t773 * t803) * MDP(9) + (t507 * t725 + t524 * t687 + t592 * t652 - t666 * t899) * MDP(24) + (-t507 * t591 - t508 * t592 - t524 * t574 + t525 * t899) * MDP(23) + (t507 * t592 - t524 * t899) * MDP(22) + (-t461 * t725 - t476 * t666 + t579 * t507 + t516 * t592 + t561 * t524 - t532 * t899 - t652 * t869 - t687 * t783) * MDP(28) + t896 * t897 + (t666 * t748 + (t652 * t777 + (-qJD(1) * t725 + t900) * t845) * t768) * MDP(14) + (-t789 * t748 - t720 * t900 + t709 * t652 + t706 * t725 + t673 * t666 + (t811 * t777 + (qJD(1) * t816 + t601) * t845) * t768) * MDP(16) + (t495 * t725 - t500 * t900 + t529 * t666 + t555 * t664 + t556 * t652 + t567 * t642 + t588 * t632 + t614 * t616) * MDP(18) + (-t496 * t725 + t501 * t900 - t530 * t666 + t555 * t665 - t557 * t652 + t567 * t644 + t588 * t633 + t614 * t617) * MDP(19) + (-t651 * t725 - t652 * t726 - t666 * t696 + t667 * t900) * MDP(12) + (-t748 * t768 - t764 * t846) * MDP(15) * t845 + (-t667 * t748 + (-t651 * t777 + (qJD(1) * t726 + t696) * t845) * t768) * MDP(13) + (t784 * t748 + t720 * t696 + t709 * t651 + t706 * t726 + t673 * t667 + (-t785 * t777 + (-qJD(1) * t856 - t602) * t845) * t768) * MDP(17) + (MDP(6) * t827 - MDP(7) * t828) * (0.2e1 * t823 + qJD(2)) + (-t508 * t725 - t525 * t687 - t574 * t666 - t591 * t652) * MDP(25) + (-t468 * t725 - t474 * t678 - t512 * t666 - t537 * t652) * MDP(32) + (t651 * t726 + t667 * t696) * MDP(11) + (t666 * t687 + t615) * MDP(26) + (t666 * t678 + t615) * MDP(33) + (-t495 * t665 - t496 * t664 - t500 * t644 - t501 * t642 - t529 * t633 - t530 * t632 - t556 * t617 - t557 * t616) * MDP(20) + (t495 * t556 + t496 * t557 + t500 * t529 + t501 * t530 + t555 * t614 + t567 * t588) * MDP(21) + (-(qJD(6) * t797 + t463 * t770 + t464 * t774) * t678 - t796 * t652 - t456 * t725 - t466 * t666 - t489 * t795 + t527 * t467 + t480 * t538 + t509 * t473) * MDP(35) + (t467 * t725 + t473 * t678 + t538 * t652 - t666 * t795) * MDP(31) + (-t467 * t537 - t468 * t538 - t473 * t512 + t474 * t795) * MDP(30) + (t467 * t538 - t473 * t795) * MDP(29); (-pkin(8) * t805 + t718 * t792 + t773 * t780) * MDP(9) + (pkin(8) * t806 + t715 * t792 + t777 * t780) * MDP(10) + (t461 * t776 + t476 * t786 + t737 * t507 - t516 * t714 + t859 * t561 - t857 * t652 + t687 * t894 - t852 * t899) * MDP(28) + (-t507 * t714 - t859 * t899) * MDP(22) + (-t507 * t713 + t508 * t714 - t574 * t859 + t858 * t899) * MDP(23) + (-t507 * t776 - t652 * t714 + t687 * t859 + t786 * t899) * MDP(24) + ((t651 - t882) * t776 + (-t652 + t880) * t772) * MDP(12) + t878 * t896 + (-t588 * t677 - t619 * t644 - t652 * t692 - t863 * t900 + (t496 + (pkin(9) * t644 + t588 * t769) * qJD(3)) * t776 + (pkin(9) * t617 + t530 * t748 + t885) * t772) * MDP(19) + (-t588 * t676 - t619 * t642 + t652 * t691 + t864 * t900 + (-t495 + (pkin(9) * t642 + t588 * t767) * qJD(3)) * t776 + (pkin(9) * t616 - t529 * t748 + t886) * t772) * MDP(18) + (-pkin(2) * t652 - t706 * t776 + t815 * t748 + t718 * t900 + (pkin(9) * t879 + t673 * t772) * qJD(3) + (-t601 * t773 + (-pkin(9) * t845 - t673 * t777) * t772) * t847) * MDP(16) + (t748 * t843 + (-t777 * t786 + (-t900 + t844) * t773) * t847) * MDP(14) + (t529 * t677 + t530 * t676 - t616 * t692 - t617 * t691 + (-t495 * t769 - t496 * t767) * t772 + t864 * t644 + t863 * t642 + (-t529 * t769 - t530 * t767) * t842) * MDP(20) + (t495 * t691 + t496 * t692 - t588 * t619 - t863 * t530 - t864 * t529 + (t555 * t772 + t588 * t842) * pkin(9)) * MDP(21) + (t468 * t776 + t512 * t786 - t627 * t652 - t678 * t866) * MDP(32) + (-t812 + (-MDP(6) * t777 + MDP(7) * t773) * t768 * t890) * t778 + (-pkin(2) * t651 + t706 * t772 - t855 * t748 - t718 * t696 + (-pkin(9) * t786 + t673 * t776) * qJD(3) + (-t673 * t870 + (-pkin(9) * t844 + t602) * t773) * t847) * MDP(17) + t748 * MDP(15) * t830 + (t817 * t652 - t462 * t776 + t737 * t508 + t516 * t713 + (-t668 * t838 + (-qJD(5) * t655 + t906) * t771 - t895) * t687 + t852 * t574 + t858 * t561 - t475 * t786) * MDP(27) + (t651 * t772 - t696 * t879) * MDP(11) + (t508 * t776 + t574 * t786 - t652 * t713 - t687 * t858) * MDP(25) + (-t748 * t842 + (t748 * t870 + (qJD(2) * t772 - t696) * t773) * t847) * MDP(13) + (t467 * t628 - t795 * t867) * MDP(29) + (-(t569 * t770 + t571 * t774) * t652 + t456 * t776 + t658 * t467 + t480 * t628 + (t770 * t800 + t774 * t799) * t678 - t860 * t795 + t867 * t509 + t466 * t786) * MDP(35) + (-t467 * t627 - t468 * t628 - t512 * t867 + t795 * t866) * MDP(30) + ((t569 * t774 - t571 * t770) * t652 - t457 * t776 + t658 * t468 + t480 * t627 + (t770 * t799 - t774 * t800) * t678 + t860 * t512 + t866 * t509 - t465 * t786) * MDP(34) + (-t687 * t786 - t883) * MDP(26) + (-t678 * t786 - t883) * MDP(33) + (-t467 * t776 + t628 * t652 + t678 * t867 + t786 * t795) * MDP(31); (t558 * t644 + t559 * t642 + (-qJ(4) * t616 - qJD(4) * t642 + t529 * t900 + t496) * t769 + (qJ(4) * t617 + qJD(4) * t644 + t530 * t900 - t495) * t767) * MDP(20) + (-pkin(3) * t555 - t529 * t558 - t530 * t559 - t588 * t602 + (-t529 * t767 + t530 * t769) * qJD(4) + (-t495 * t767 + t496 * t769) * qJ(4)) * MDP(21) + (-t769 * t889 - pkin(3) * t617 + t886 - t602 * t644 - (t769 * t835 + t559) * t900) * MDP(19) + (-t767 * t889 - pkin(3) * t616 - t885 - t602 * t642 - (t767 * t835 - t558) * t900) * MDP(18) + (-t602 * t748 - t811) * MDP(16) + (t814 * t652 + t761 * t508 + t516 * t735 - t580 * t574 + (-t523 - t790 * t775 + (qJD(5) * t746 + t908) * t771) * t687 + t853 * t561) * MDP(27) + (-t652 * t735 - t687 * t853) * MDP(25) + (t652 * t736 - t687 * t854) * MDP(24) + (t507 * t736 + t854 * t899) * MDP(22) + (-t507 * t735 - t508 * t736 + t574 * t854 + t853 * t899) * MDP(23) + ((t636 * t774 - t637 * t770) * t652 + t703 * t468 + t480 * t653 + (t770 * t801 - t774 * t802) * t678 + t824 * t512 + t861 * t509) * MDP(34) + (-t652 * t653 - t678 * t861) * MDP(32) + (t652 * t654 + t678 * t862) * MDP(31) + (t467 * t654 - t795 * t862) * MDP(29) + (-(t636 * t770 + t637 * t774) * t652 + t703 * t467 + t480 * t654 + (t770 * t802 + t774 * t801) * t678 - t824 * t795 + t862 * t509) * MDP(35) + (-t467 * t653 - t468 * t654 - t512 * t862 + t795 * t861) * MDP(30) + (-t601 * t748 - t673 * t900 + t785) * MDP(17) + (-t793 - t880) * MDP(14) + (t651 + t882) * MDP(13) + MDP(15) * t806 - t900 ^ 2 * MDP(12) + (t761 * t507 + t516 * t736 - t854 * t561 + t580 * t899 - t850 * t652 + t687 * t892) * MDP(28) + (-t900 * MDP(11) - qJD(3) * MDP(14) - t673 * MDP(16) - t529 * MDP(18) + t530 * MDP(19) + t899 * MDP(24) + t574 * MDP(25) - t687 * MDP(26) - t475 * MDP(27) + t476 * MDP(28) + t795 * MDP(31) + t512 * MDP(32) - t678 * MDP(33) - t465 * MDP(34) + t466 * MDP(35) + t696 * MDP(12)) * t696; (-t644 * t900 + t616) * MDP(18) + (t642 * t900 + t617) * MDP(19) + (-t642 ^ 2 - t644 ^ 2) * MDP(20) + (t529 * t644 + t530 * t642 + t555) * MDP(21) + (t508 - t910) * MDP(27) + (t507 - t912) * MDP(28) + (t468 - t902) * MDP(34) + (t467 - t903) * MDP(35); -t899 * t574 * MDP(22) + (-t574 ^ 2 + t899 ^ 2) * MDP(23) + (t507 + t912) * MDP(24) + (-t508 - t910) * MDP(25) + t652 * MDP(26) + (t476 * t687 + t561 * t899 + t462) * MDP(27) + (t475 * t687 + t561 * t574 - t461) * MDP(28) + (t467 + t903) * MDP(31) + (-t468 - t902) * MDP(32) + (-(-t471 * t770 - t887) * t678 + t904 + (t512 * t899 + t652 * t774 - t678 * t837) * pkin(5) + t457) * MDP(34) + (t905 + t470 + (-t472 * t678 - t459) * t770 + (t471 * t678 - t813) * t774 + (-t652 * t770 - t678 * t836 - t795 * t899) * pkin(5)) * MDP(35) + t898; (t832 + t903) * MDP(31) + (-t820 - t902) * MDP(32) + (t466 * t678 + t822 + t904) * MDP(34) + (-t774 * t460 + t465 * t678 - t821 + t905) * MDP(35) + (MDP(31) * t884 + MDP(32) * t795 - MDP(34) * t466 - MDP(35) * t888) * qJD(6) + t898;];
tauc  = t1;
