% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PPRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d5,d6,theta1,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PPRPRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRPRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRPRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRPRR1_inertiaDJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:43:38
% EndTime: 2019-03-08 18:43:44
% DurationCPUTime: 2.11s
% Computational Cost: add. (2302->207), mult. (7261->377), div. (0->0), fcn. (8108->14), ass. (0->130)
t135 = cos(pkin(7));
t133 = cos(pkin(13));
t62 = sin(pkin(13));
t64 = sin(pkin(7));
t68 = sin(qJ(3));
t71 = cos(qJ(3));
t40 = (t133 * t68 + t62 * t71) * t64;
t67 = sin(qJ(5));
t70 = cos(qJ(5));
t83 = t135 * t70 - t40 * t67;
t127 = t83 * qJD(5);
t153 = -0.4e1 * t67;
t136 = cos(pkin(6));
t110 = t136 * t64;
t103 = t71 * t110;
t132 = qJD(3) * t68;
t63 = sin(pkin(12));
t65 = sin(pkin(6));
t134 = cos(pkin(12));
t92 = t135 * t134;
t87 = t71 * t92;
t24 = t65 * t63 * t132 + (-t65 * t87 - t103) * qJD(3);
t28 = (t63 * t71 + t68 * t92) * t65 + t68 * t110;
t25 = t28 * qJD(3);
t13 = -t133 * t24 - t25 * t62;
t27 = t103 + (-t63 * t68 + t87) * t65;
t16 = t133 * t28 + t27 * t62;
t79 = -t134 * t64 * t65 + t135 * t136;
t9 = t67 * t16 - t70 * t79;
t137 = t9 * qJD(5);
t152 = -t70 * t13 + t137;
t66 = sin(qJ(6));
t58 = t66 ^ 2;
t69 = cos(qJ(6));
t60 = t69 ^ 2;
t109 = qJD(6) * (t58 - t60);
t144 = t64 * t71;
t105 = t133 * t144;
t116 = t64 * t132;
t36 = -qJD(3) * t105 + t116 * t62;
t78 = t70 * t36 - t127;
t10 = t70 * t16 + t67 * t79;
t4 = t10 * qJD(5) + t67 * t13;
t151 = t9 * t4;
t150 = pkin(5) * t67;
t149 = pkin(10) * t70;
t12 = t133 * t25 - t24 * t62;
t15 = -t133 * t27 + t28 * t62;
t148 = t15 * t12;
t32 = t135 * t67 + t40 * t70;
t20 = t32 * qJD(5) - t67 * t36;
t147 = t83 * t20;
t37 = qJD(3) * t40;
t39 = t62 * t64 * t68 - t105;
t146 = t39 * t37;
t56 = pkin(3) * t62 + pkin(9);
t145 = t56 * t67;
t143 = t66 * t56;
t142 = t69 * t70;
t59 = t67 ^ 2;
t138 = -t70 ^ 2 + t59;
t131 = qJD(5) * t69;
t130 = qJD(6) * t66;
t129 = qJD(6) * t69;
t128 = qJD(6) * t70;
t126 = t67 * qJD(5);
t125 = t70 * qJD(5);
t124 = -0.2e1 * pkin(5) * qJD(6);
t123 = t70 * t143;
t122 = t56 * t142;
t57 = -pkin(3) * t133 - pkin(4);
t121 = 0.2e1 * qJD(5) * t57;
t120 = qJD(6) * t56 * t59;
t119 = t66 * t128;
t118 = t69 * t128;
t117 = t58 * t125;
t115 = t66 * t129;
t114 = t67 * t125;
t113 = t56 * t126;
t112 = t69 * t125;
t111 = t56 * t125;
t108 = t138 * qJD(5);
t107 = t66 * t112;
t106 = t59 * t115;
t102 = -pkin(5) * t70 - pkin(10) * t67;
t101 = -t149 + t150;
t100 = t9 * t20 - t4 * t83;
t5 = -t10 * t66 + t15 * t69;
t6 = t10 * t69 + t15 * t66;
t99 = -t5 * t69 - t6 * t66;
t98 = t5 * t66 - t6 * t69;
t97 = t12 * t39 + t15 * t37;
t21 = -t32 * t66 + t39 * t69;
t22 = t32 * t69 + t39 * t66;
t96 = -t21 * t69 - t22 * t66;
t95 = t21 * t66 - t22 * t69;
t81 = -t102 - t57;
t80 = t69 * t81;
t29 = -t80 - t123;
t30 = -t66 * t81 + t122;
t94 = -t29 * t69 - t30 * t66;
t93 = t29 * t66 - t30 * t69;
t91 = t125 * t9 + t4 * t67;
t90 = t129 * t9 + t4 * t66;
t89 = t130 * t9 - t4 * t69;
t88 = t101 * t66;
t86 = -t125 * t83 + t20 * t67;
t85 = -t129 * t83 + t20 * t66;
t84 = -t130 * t83 - t20 * t69;
t43 = t126 * t69 + t119;
t1 = t10 * t130 - t12 * t66 - t129 * t15 + t152 * t69;
t2 = -t10 * t129 + t69 * t12 - t130 * t15 + t152 * t66;
t77 = qJD(6) * t99 - t1 * t69 - t2 * t66;
t7 = -t129 * t39 + t130 * t32 - t37 * t66 + t69 * t78;
t8 = -t129 * t32 - t130 * t39 + t69 * t37 + t66 * t78;
t76 = qJD(6) * t96 - t8 * t66 - t7 * t69;
t17 = -qJD(5) * t88 + qJD(6) * t80 + t43 * t56;
t18 = -t30 * qJD(6) + (t101 * t69 + t143 * t67) * qJD(5);
t75 = qJD(6) * t94 - t17 * t69 - t18 * t66;
t74 = t78 * t70;
t72 = t152 * t70;
t54 = t60 * t125;
t53 = -0.2e1 * t114;
t51 = t60 * t114;
t50 = t58 * t114;
t45 = t126 * t66 - t118;
t44 = -t125 * t66 - t129 * t67;
t42 = t130 * t67 - t112;
t33 = t109 * t67 - t107;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t24 * t28 - 0.2e1 * t25 * t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t13 * t16 + 0.2e1 * t148, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t10 * t152 + 0.2e1 * t148 + 0.2e1 * t151, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t1 * t6 + 0.2e1 * t2 * t5 + 0.2e1 * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t24 * t68 - t25 * t71 + (-t27 * t68 + t28 * t71) * qJD(3)) * t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * t40 - t16 * t36 + t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t78 - t152 * t32 + t100 + t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t22 + t2 * t21 + t5 * t8 - t6 * t7 + t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t36 * t40 + 0.2e1 * t146, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t32 * t78 + 0.2e1 * t146 - 0.2e1 * t147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t21 * t8 - 0.2e1 * t22 * t7 - 0.2e1 * t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t24, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t13, 0 (-t12 * t133 + t13 * t62) * pkin(3), 0, 0, 0, 0, 0, 0, -t12 * t70 + t126 * t15, t12 * t67 + t125 * t15, -t10 * t126 - t72 + t91, -t10 * t113 + t111 * t9 + t12 * t57 + t145 * t4 - t56 * t72, 0, 0, 0, 0, 0, 0 (t137 * t66 - t2) * t70 + (qJD(5) * t5 + t90) * t67 (t131 * t9 - t1) * t70 + (-qJD(5) * t6 - t89) * t67, t99 * t125 + (qJD(6) * t98 + t1 * t66 - t2 * t69) * t67, -t1 * t30 - t6 * t17 + t5 * t18 + t2 * t29 + t56 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t116, -qJD(3) * t144, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t36, 0 (-t133 * t37 - t36 * t62) * pkin(3), 0, 0, 0, 0, 0, 0, t126 * t39 - t37 * t70, t125 * t39 + t37 * t67, -t126 * t32 - t74 + t86, -t111 * t83 - t113 * t32 + t145 * t20 + t37 * t57 - t56 * t74, 0, 0, 0, 0, 0, 0 (-t127 * t66 - t8) * t70 + (qJD(5) * t21 + t85) * t67 (-t127 * t69 - t7) * t70 + (-qJD(5) * t22 - t84) * t67, t96 * t125 + (qJD(6) * t95 + t66 * t7 - t69 * t8) * t67, -t22 * t17 + t21 * t18 + t8 * t29 - t7 * t30 + t56 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t114, -0.2e1 * t108, 0, t53, 0, 0, t67 * t121, t70 * t121, 0, 0, 0.2e1 * t51 - 0.2e1 * t106, t107 * t153 + 0.2e1 * t109 * t59, 0.2e1 * t119 * t67 + 0.2e1 * t131 * t138, 0.2e1 * t50 + 0.2e1 * t106, -0.2e1 * t108 * t66 + 0.2e1 * t118 * t67, t53, 0.2e1 * t69 * t120 - 0.2e1 * t18 * t70 + 0.2e1 * (t29 + 0.2e1 * t123) * t126, -0.2e1 * t66 * t120 - 0.2e1 * t17 * t70 + 0.2e1 * (-t30 + 0.2e1 * t122) * t126, 0.2e1 * t94 * t125 + 0.2e1 * (qJD(6) * t93 + t17 * t66 - t18 * t69) * t67, 0.2e1 * t114 * t56 ^ 2 - 0.2e1 * t17 * t30 + 0.2e1 * t18 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t125 + t126 * t9 - t152 * t67 - t4 * t70, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-qJD(5) * t98 - t4) * t70 + (t77 + t137) * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125 * t32 - t126 * t83 - t20 * t70 - t67 * t78, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-qJD(5) * t95 - t20) * t70 + (t76 - t127) * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75 * t67 + (t138 * t56 - t70 * t93) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t50 + 0.2e1 * t51 - 0.2e1 * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t4, t152, 0, 0, 0, 0, 0, 0, 0, 0, t89, t90, t77, -t4 * pkin(5) + pkin(10) * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, t78, 0, 0, 0, 0, 0, 0, 0, 0, t84, t85, t76, -t20 * pkin(5) + pkin(10) * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, 0, -t126, 0, -t111, t113, 0, 0, -t33, t115 * t153 - t117 + t54, t45, t33, t43, 0 (pkin(10) * t142 + (-pkin(5) * t69 + t143) * t67) * qJD(6) + (t102 * t66 - t122) * qJD(5) (t145 * t69 + t88) * qJD(6) + (t102 * t69 + t123) * qJD(5), t75, -pkin(5) * t111 + pkin(10) * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, -t125, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t45, t54 + t117 (-t150 + (t58 + t60) * t149) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t115, -0.2e1 * t109, 0, -0.2e1 * t115, 0, 0, t66 * t124, t69 * t124, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, 0, t44, t126, t18, t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, t42, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, 0, -t130, 0, -pkin(10) * t129, pkin(10) * t130, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
