% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PPRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d5,d6,theta1,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 19:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PPRPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 19:54:11
% EndTime: 2019-05-04 19:54:55
% DurationCPUTime: 43.13s
% Computational Cost: add. (268361->866), mult. (473259->1465), div. (0->0), fcn. (404055->16), ass. (0->627)
t739 = sin(pkin(6));
t744 = cos(pkin(6));
t735 = sin(pkin(13));
t740 = cos(pkin(13));
t754 = qJD(3) ^ 2;
t700 = qJDD(3) * t735 + t740 * t754;
t701 = qJDD(3) * t740 - t735 * t754;
t749 = sin(qJ(3));
t752 = cos(qJ(3));
t649 = t700 * t749 - t701 * t752;
t736 = sin(pkin(12));
t741 = cos(pkin(12));
t743 = cos(pkin(7));
t783 = t700 * t752 + t701 * t749;
t893 = t783 * t743;
t789 = t649 * t736 - t741 * t893;
t738 = sin(pkin(7));
t894 = t783 * t738;
t535 = t739 * t894 + t744 * t789;
t578 = t649 * t741 + t736 * t893;
t737 = sin(pkin(11));
t742 = cos(pkin(11));
t910 = t535 * t737 - t578 * t742;
t489 = t535 * t742 + t578 * t737;
t532 = t739 * t789 - t744 * t894;
t707 = g(1) * t737 - t742 * g(2);
t708 = g(1) * t742 + g(2) * t737;
t732 = g(3) - qJDD(1);
t619 = -t708 * t741 + (t707 * t744 - t732 * t739) * t736;
t859 = t741 * t744;
t860 = t739 * t741;
t618 = -t707 * t859 - t708 * t736 + t732 * t860;
t669 = t707 * t739 + t732 * t744 - qJDD(2);
t901 = t618 * t743 + t669 * t738;
t526 = t619 * t752 - t749 * t901;
t520 = -pkin(3) * t754 + t526;
t525 = t619 * t749 + t752 * t901;
t780 = qJDD(3) * pkin(3) - t525;
t458 = t520 * t735 - t740 * t780;
t459 = t740 * t520 + t735 * t780;
t844 = t458 * t735 + t740 * t459;
t398 = t458 * t740 - t459 * t735;
t884 = t398 * t749;
t907 = t752 * t844 + t884;
t883 = t398 * t752;
t338 = -t749 * t844 + t883;
t782 = qJDD(3) * t749 + t752 * t754;
t680 = t782 * t738;
t682 = t782 * t743;
t703 = qJDD(3) * t752 - t749 * t754;
t785 = t682 * t741 + t703 * t736;
t597 = -t680 * t739 + t744 * t785;
t643 = t682 * t736 - t703 * t741;
t550 = t597 * t737 + t643 * t742;
t906 = t597 * t742 - t643 * t737;
t581 = -t618 * t738 + t743 * t669;
t580 = -qJDD(4) + t581;
t562 = qJ(4) * t700 - t580 * t740;
t835 = -qJ(4) * t701 - t580 * t735;
t900 = t562 * t749 + t835 * t752;
t899 = t562 * t752 - t835 * t749;
t747 = sin(qJ(6));
t748 = sin(qJ(5));
t851 = qJD(3) * qJD(5);
t721 = t748 * t851;
t751 = cos(qJ(5));
t725 = t751 * qJDD(3);
t698 = t725 - t721;
t689 = -qJDD(6) + t698;
t750 = cos(qJ(6));
t854 = qJD(3) * t748;
t692 = -t750 * qJD(5) + t747 * t854;
t694 = qJD(5) * t747 + t750 * t854;
t868 = t692 * t694;
t781 = -t689 - t868;
t898 = t747 * t781;
t896 = t750 * t781;
t853 = qJD(3) * t751;
t718 = -qJD(6) + t853;
t676 = t692 * t718;
t845 = t751 * t851;
t850 = qJDD(3) * t748;
t697 = t845 + t850;
t847 = t692 * qJD(6) - t747 * qJDD(5) - t750 * t697;
t606 = t847 - t676;
t843 = -t750 * qJDD(5) + t697 * t747;
t602 = (qJD(6) + t718) * t694 + t843;
t890 = t680 * t744 + t739 * t785;
t687 = t692 ^ 2;
t688 = t694 ^ 2;
t716 = t718 ^ 2;
t889 = pkin(3) * t398;
t888 = pkin(5) * t748;
t887 = pkin(5) * t751;
t465 = t525 * t749 + t526 * t752;
t886 = pkin(8) * t465;
t564 = t618 * t736 + t619 * t741;
t885 = qJ(2) * t564;
t455 = -pkin(4) * t754 + qJDD(3) * pkin(9) + t459;
t572 = t751 * t580;
t840 = -pkin(10) * t748 - t887;
t695 = t840 * qJD(3);
t753 = qJD(5) ^ 2;
t423 = t572 - qJDD(5) * pkin(5) - t753 * pkin(10) + (qJD(3) * t695 + t455) * t748;
t882 = t423 * t747;
t881 = t423 * t750;
t454 = -qJDD(3) * pkin(4) - t754 * pkin(9) + t458;
t880 = t454 * t748;
t879 = t454 * t751;
t621 = t689 - t868;
t877 = t621 * t747;
t876 = t621 * t750;
t875 = t669 * t737;
t873 = t669 * t739;
t872 = t669 * t742;
t871 = t669 * t744;
t717 = t748 * t754 * t751;
t710 = qJDD(5) + t717;
t867 = t710 * t748;
t711 = qJDD(5) - t717;
t866 = t711 * t748;
t865 = t711 * t751;
t864 = t718 * t747;
t863 = t718 * t750;
t730 = t748 ^ 2;
t862 = t730 * t754;
t861 = t737 * t732;
t858 = t742 * t732;
t857 = t749 * t581;
t856 = t752 * t581;
t429 = t751 * t455 - t748 * t580;
t424 = -pkin(5) * t753 + qJDD(5) * pkin(10) + t695 * t853 + t429;
t836 = -t698 + t721;
t837 = t697 + t845;
t442 = pkin(5) * t836 - pkin(10) * t837 + t454;
t369 = t750 * t424 + t747 * t442;
t731 = t751 ^ 2;
t855 = t730 + t731;
t849 = t748 * t868;
t848 = t751 * t868;
t846 = qJDD(3) * t736 * t738;
t368 = t424 * t747 - t750 * t442;
t428 = t455 * t748 + t572;
t367 = t428 * t748 + t751 * t429;
t656 = -t707 * t737 - t742 * t708;
t842 = t735 * t717;
t841 = t740 * t717;
t839 = -pkin(8) * t703 - t857;
t838 = -pkin(8) * t782 + t856;
t325 = t368 * t747 + t369 * t750;
t307 = t325 * t748 - t423 * t751;
t308 = t325 * t751 + t423 * t748;
t324 = -t368 * t750 + t369 * t747;
t274 = t308 * t735 - t324 * t740;
t275 = t308 * t740 + t324 * t735;
t833 = t274 * t752 + t275 * t749;
t241 = -t738 * t307 + t743 * t833;
t251 = -t274 * t749 + t275 * t752;
t834 = t241 * t741 + t251 * t736;
t366 = t428 * t751 - t429 * t748;
t342 = t367 * t735 - t454 * t740;
t343 = t367 * t740 + t454 * t735;
t829 = t342 * t752 + t343 * t749;
t282 = t366 * t738 + t743 * t829;
t300 = -t342 * t749 + t343 * t752;
t832 = t282 * t741 + t300 * t736;
t331 = -t338 * t743 + t738 * t580;
t831 = t331 * t741 + t736 * t907;
t337 = t907 * t743;
t830 = t337 * t741 + t338 * t736;
t607 = t676 + t847;
t531 = -t602 * t750 - t607 * t747;
t620 = t687 + t688;
t494 = t531 * t748 + t620 * t751;
t495 = t531 * t751 - t620 * t748;
t528 = -t602 * t747 + t607 * t750;
t443 = t495 * t735 - t528 * t740;
t444 = t495 * t740 + t528 * t735;
t816 = t443 * t752 + t444 * t749;
t351 = -t738 * t494 + t743 * t816;
t381 = -t443 * t749 + t444 * t752;
t828 = t351 * t741 + t381 * t736;
t603 = (-qJD(6) + t718) * t694 - t843;
t530 = t603 * t750 + t606 * t747;
t657 = -t688 + t687;
t500 = t530 * t748 + t657 * t751;
t501 = t530 * t751 - t657 * t748;
t527 = -t603 * t747 + t606 * t750;
t447 = t501 * t735 + t527 * t740;
t448 = t501 * t740 - t527 * t735;
t815 = t447 * t752 + t448 * t749;
t358 = -t738 * t500 + t743 * t815;
t387 = -t447 * t749 + t448 * t752;
t827 = t358 * t741 + t387 * t736;
t645 = -t716 - t687;
t566 = t645 * t750 - t898;
t504 = t566 * t748 + t603 * t751;
t505 = t566 * t751 - t603 * t748;
t565 = t645 * t747 + t896;
t470 = t505 * t735 - t565 * t740;
t471 = t505 * t740 + t565 * t735;
t813 = t470 * t752 + t471 * t749;
t374 = -t738 * t504 + t743 * t813;
t403 = -t470 * t749 + t471 * t752;
t826 = t374 * t741 + t403 * t736;
t654 = -t688 - t716;
t574 = -t654 * t747 + t876;
t507 = t574 * t748 + t606 * t751;
t508 = t574 * t751 - t606 * t748;
t573 = t654 * t750 + t877;
t476 = t508 * t735 - t573 * t740;
t477 = t508 * t740 + t573 * t735;
t812 = t476 * t752 + t477 * t749;
t380 = -t738 * t507 + t743 * t812;
t404 = -t476 * t749 + t477 * t752;
t825 = t380 * t741 + t404 * t736;
t675 = -t688 + t716;
t586 = -t675 * t747 + t896;
t509 = t586 * t748 + t607 * t751;
t511 = t586 * t751 - t607 * t748;
t584 = -t675 * t750 - t898;
t481 = t511 * t735 + t584 * t740;
t483 = t511 * t740 - t584 * t735;
t811 = t481 * t752 + t483 * t749;
t390 = -t738 * t509 + t743 * t811;
t411 = -t481 * t749 + t483 * t752;
t824 = t390 * t741 + t411 * t736;
t674 = t687 - t716;
t587 = t674 * t750 + t877;
t510 = t587 * t748 + t602 * t751;
t512 = t587 * t751 - t602 * t748;
t585 = -t674 * t747 + t876;
t482 = t512 * t735 + t585 * t740;
t484 = t512 * t740 - t585 * t735;
t810 = t482 * t752 + t484 * t749;
t391 = -t510 * t738 + t743 * t810;
t412 = -t482 * t749 + t484 * t752;
t823 = t391 * t741 + t412 * t736;
t634 = -qJD(6) * t694 - t843;
t592 = -t634 * t747 - t692 * t863;
t554 = t592 * t748 + t848;
t556 = t592 * t751 - t849;
t591 = -t634 * t750 + t692 * t864;
t496 = t556 * t735 + t591 * t740;
t498 = t556 * t740 - t591 * t735;
t809 = t496 * t752 + t498 * t749;
t408 = -t554 * t738 + t743 * t809;
t430 = -t496 * t749 + t498 * t752;
t820 = t408 * t741 + t430 * t736;
t594 = t694 * t864 - t750 * t847;
t555 = t594 * t748 - t848;
t557 = t594 * t751 + t849;
t593 = t694 * t863 + t747 * t847;
t497 = t557 * t735 + t593 * t740;
t499 = t557 * t740 - t593 * t735;
t808 = t497 * t752 + t499 * t749;
t409 = -t555 * t738 + t743 * t808;
t431 = -t497 * t749 + t499 * t752;
t819 = t409 * t741 + t431 * t736;
t464 = t525 * t752 - t526 * t749;
t435 = -t464 * t743 + t581 * t738;
t818 = t435 * t741 + t465 * t736;
t613 = (t692 * t750 - t694 * t747) * t718;
t588 = t613 * t748 + t689 * t751;
t589 = t613 * t751 - t689 * t748;
t612 = (-t692 * t747 - t694 * t750) * t718;
t521 = t589 * t735 + t612 * t740;
t522 = t589 * t740 - t612 * t735;
t804 = t521 * t752 + t522 * t749;
t437 = -t588 * t738 + t743 * t804;
t463 = -t521 * t749 + t522 * t752;
t817 = t437 * t741 + t463 * t736;
t461 = t465 * t743;
t814 = t461 * t741 + t464 * t736;
t696 = 0.2e1 * t845 + t850;
t699 = t725 - 0.2e1 * t721;
t646 = t696 * t751 + t699 * t748;
t647 = -t696 * t748 + t699 * t751;
t728 = t731 * t754;
t706 = t728 - t862;
t609 = t647 * t735 + t706 * t740;
t610 = t647 * t740 - t706 * t735;
t797 = t609 * t752 + t610 * t749;
t503 = -t646 * t738 + t743 * t797;
t547 = -t609 * t749 + t610 * t752;
t807 = t503 * t741 + t547 * t736;
t691 = t751 * t710;
t715 = -t728 - t753;
t662 = t715 * t748 + t691;
t666 = t715 * t751 - t867;
t614 = t666 * t735 + t699 * t740;
t616 = t666 * t740 - t699 * t735;
t796 = t614 * t752 + t616 * t749;
t515 = -t662 * t738 + t743 * t796;
t552 = -t614 * t749 + t616 * t752;
t806 = t515 * t741 + t552 * t736;
t713 = -t753 - t862;
t664 = t713 * t751 - t866;
t668 = -t713 * t748 - t865;
t615 = t668 * t735 - t696 * t740;
t617 = t668 * t740 + t696 * t735;
t795 = t615 * t752 + t617 * t749;
t516 = -t664 * t738 + t743 * t795;
t553 = -t615 * t749 + t617 * t752;
t805 = t516 * t741 + t553 * t736;
t714 = t728 - t753;
t661 = t714 * t748 + t865;
t665 = t714 * t751 - t866;
t624 = t665 * t735 - t725 * t740;
t626 = t665 * t740 + t725 * t735;
t794 = t624 * t752 + t626 * t749;
t541 = -t661 * t738 + t743 * t794;
t567 = -t624 * t749 + t626 * t752;
t803 = t541 * t741 + t567 * t736;
t712 = t753 - t862;
t663 = t712 * t751 + t867;
t667 = -t712 * t748 + t691;
t625 = t667 * t735 - t740 * t850;
t627 = t667 * t740 + t735 * t850;
t793 = t625 * t752 + t627 * t749;
t542 = -t663 * t738 + t743 * t793;
t568 = -t625 * t749 + t627 * t752;
t802 = t542 * t741 + t568 * t736;
t659 = t836 * t751;
t672 = -t698 * t748 - t731 * t851;
t628 = t672 * t735 - t841;
t630 = t672 * t740 + t842;
t792 = t628 * t752 + t630 * t749;
t545 = t659 * t738 + t743 * t792;
t569 = -t628 * t749 + t630 * t752;
t801 = t545 * t741 + t569 * t736;
t660 = t837 * t748;
t673 = t697 * t751 - t730 * t851;
t629 = t673 * t735 + t841;
t631 = t673 * t740 - t842;
t791 = t629 * t752 + t631 * t749;
t546 = -t660 * t738 + t743 * t791;
t570 = -t629 * t749 + t631 * t752;
t800 = t546 * t741 + t570 * t736;
t702 = t855 * qJDD(3);
t705 = t728 + t862;
t652 = t702 * t735 + t705 * t740;
t653 = t702 * t740 - t705 * t735;
t787 = t652 * t752 + t653 * t749;
t583 = t787 * t743;
t590 = -t652 * t749 + t653 * t752;
t799 = t583 * t741 + t590 * t736;
t690 = t855 * t851;
t670 = -qJDD(5) * t740 + t690 * t735;
t671 = qJDD(5) * t735 + t690 * t740;
t786 = t670 * t752 + t671 * t749;
t601 = t786 * t743;
t608 = -t670 * t749 + t671 * t752;
t798 = t601 * t741 + t608 * t736;
t563 = t618 * t741 - t619 * t736;
t641 = t649 * t743;
t788 = -t641 * t741 - t736 * t783;
t683 = t703 * t743;
t784 = t683 * t741 - t736 * t782;
t655 = t707 * t742 - t708 * t737;
t259 = -pkin(9) * t307 + (-pkin(10) * t751 + t888) * t324;
t267 = -pkin(4) * t307 + pkin(5) * t423 - pkin(10) * t325;
t229 = -pkin(3) * t307 + qJ(4) * t275 + t259 * t735 + t267 * t740;
t236 = -qJ(4) * t274 + t259 * t740 - t267 * t735;
t779 = pkin(8) * t251 + t229 * t752 + t236 * t749;
t321 = -pkin(10) * t528 - t324;
t302 = -pkin(9) * t494 + t321 * t751 + t528 * t888;
t309 = -pkin(4) * t494 - pkin(5) * t620 - pkin(10) * t531 - t325;
t261 = -pkin(3) * t494 + qJ(4) * t444 + t302 * t735 + t309 * t740;
t264 = -qJ(4) * t443 + t302 * t740 - t309 * t735;
t778 = pkin(8) * t381 + t261 * t752 + t264 * t749;
t276 = qJ(4) * t343 - (-pkin(4) * t740 - pkin(9) * t735 - pkin(3)) * t366;
t287 = -qJ(4) * t342 - (pkin(4) * t735 - pkin(9) * t740) * t366;
t777 = pkin(8) * t300 + t276 * t752 + t287 * t749;
t352 = -pkin(5) * t565 + t368;
t405 = -pkin(10) * t565 + t882;
t323 = -pkin(9) * t504 - t352 * t748 + t405 * t751;
t371 = -pkin(4) * t504 - pkin(5) * t603 - pkin(10) * t566 + t881;
t283 = -pkin(3) * t504 + qJ(4) * t471 + t323 * t735 + t371 * t740;
t288 = -qJ(4) * t470 + t323 * t740 - t371 * t735;
t776 = pkin(8) * t403 + t283 * t752 + t288 * t749;
t353 = -pkin(5) * t573 + t369;
t410 = -pkin(10) * t573 + t881;
t326 = -pkin(9) * t507 - t353 * t748 + t410 * t751;
t372 = -pkin(4) * t507 - pkin(5) * t606 - pkin(10) * t574 - t882;
t284 = -pkin(3) * t507 + qJ(4) * t477 + t326 * t735 + t372 * t740;
t289 = -qJ(4) * t476 + t326 * t740 - t372 * t735;
t775 = pkin(8) * t404 + t284 * t752 + t289 * t749;
t420 = -pkin(4) * t662 + t428;
t445 = -pkin(9) * t662 + t880;
t355 = -pkin(3) * t662 + qJ(4) * t616 + t420 * t740 + t445 * t735;
t361 = -qJ(4) * t614 - t420 * t735 + t445 * t740;
t774 = pkin(8) * t552 + t355 * t752 + t361 * t749;
t421 = -pkin(4) * t664 + t429;
t446 = -pkin(9) * t664 + t879;
t356 = -pkin(3) * t664 + qJ(4) * t617 + t421 * t740 + t446 * t735;
t362 = -qJ(4) * t615 - t421 * t735 + t446 * t740;
t773 = pkin(8) * t553 + t356 * t752 + t362 * t749;
t359 = qJ(4) * t653 + t366 * t735;
t360 = -qJ(4) * t652 + t366 * t740;
t772 = pkin(8) * t590 + t359 * t752 + t360 * t749;
t771 = -pkin(8) * t783 - t899;
t770 = pkin(8) * t649 + t900;
t239 = pkin(3) * t274 + pkin(9) * t308 + (-pkin(4) + t840) * t324;
t240 = t743 * t307 + t738 * t833;
t212 = -pkin(2) * t240 - t239 * t738 + t743 * t779;
t214 = -t229 * t749 + t236 * t752 + (-t240 * t738 - t241 * t743) * pkin(8);
t227 = -t241 * t736 + t251 * t741;
t769 = qJ(2) * t227 + t212 * t741 + t214 * t736;
t281 = -t366 * t743 + t738 * t829;
t301 = pkin(3) * t342 - pkin(4) * t454 + pkin(9) * t367;
t231 = -pkin(2) * t281 - t301 * t738 + t743 * t777;
t237 = -t276 * t749 + t287 * t752 + (-t281 * t738 - t282 * t743) * pkin(8);
t256 = -t282 * t736 + t300 * t741;
t768 = qJ(2) * t256 + t231 * t741 + t237 * t736;
t290 = pkin(3) * t443 + pkin(9) * t495 + t321 * t748 + (-pkin(4) - t887) * t528;
t350 = t743 * t494 + t738 * t816;
t235 = -pkin(2) * t350 - t290 * t738 + t743 * t778;
t238 = -t261 * t749 + t264 * t752 + (-t350 * t738 - t351 * t743) * pkin(8);
t322 = -t351 * t736 + t381 * t741;
t767 = qJ(2) * t322 + t235 * t741 + t238 * t736;
t310 = pkin(3) * t470 - pkin(4) * t565 + pkin(9) * t505 + t352 * t751 + t405 * t748;
t373 = t743 * t504 + t738 * t813;
t243 = -pkin(2) * t373 - t310 * t738 + t743 * t776;
t252 = -t283 * t749 + t288 * t752 + (-t373 * t738 - t374 * t743) * pkin(8);
t332 = -t374 * t736 + t403 * t741;
t766 = qJ(2) * t332 + t243 * t741 + t252 * t736;
t313 = pkin(3) * t476 - pkin(4) * t573 + pkin(9) * t508 + t353 * t751 + t410 * t748;
t379 = t743 * t507 + t738 * t812;
t245 = -pkin(2) * t379 - t313 * t738 + t743 * t775;
t253 = -t284 * t749 + t289 * t752 + (-t379 * t738 - t380 * t743) * pkin(8);
t333 = -t380 * t736 + t404 * t741;
t765 = qJ(2) * t333 + t245 * t741 + t253 * t736;
t330 = -t338 * t738 - t743 * t580;
t382 = pkin(3) * t580 + qJ(4) * t844;
t755 = pkin(8) * t907 + qJ(4) * t884 + t382 * t752;
t263 = -pkin(2) * t330 + t738 * t889 + t743 * t755;
t268 = qJ(4) * t883 - t382 * t749 + (-t330 * t738 - t331 * t743) * pkin(8);
t291 = -t331 * t736 + t741 * t907;
t764 = qJ(2) * t291 + t263 * t741 + t268 * t736;
t354 = pkin(3) * t652 + pkin(4) * t705 + pkin(9) * t702 + t367;
t582 = t787 * t738;
t286 = -pkin(2) * t582 - t354 * t738 + t743 * t772;
t314 = -t359 * t749 + t360 * t752 + (-t582 * t738 - t583 * t743) * pkin(8);
t506 = -t583 * t736 + t590 * t741;
t763 = qJ(2) * t506 + t286 * t741 + t314 * t736;
t426 = pkin(3) * t614 + pkin(4) * t699 + pkin(9) * t666 - t879;
t513 = t662 * t743 + t738 * t796;
t298 = -pkin(2) * t513 - t426 * t738 + t743 * t774;
t305 = -t355 * t749 + t361 * t752 + (-t513 * t738 - t515 * t743) * pkin(8);
t472 = -t515 * t736 + t552 * t741;
t762 = qJ(2) * t472 + t298 * t741 + t305 * t736;
t425 = pkin(3) * t615 - pkin(4) * t696 + pkin(9) * t668 + t880;
t514 = t664 * t743 + t738 * t795;
t299 = -pkin(2) * t514 - t425 * t738 + t743 * t773;
t306 = -t356 * t749 + t362 * t752 + (-t514 * t738 - t516 * t743) * pkin(8);
t473 = -t516 * t736 + t553 * t741;
t761 = qJ(2) * t473 + t299 * t741 + t306 * t736;
t434 = -t464 * t738 - t581 * t743;
t370 = (-t434 * t738 - t435 * t743) * pkin(8);
t384 = -t435 * t736 + t465 * t741;
t385 = -pkin(2) * t434 + t743 * t886;
t760 = qJ(2) * t384 + t370 * t736 + t385 * t741;
t451 = pkin(3) * t701 - t458;
t638 = t649 * t738;
t394 = pkin(2) * t638 - t451 * t738 + t743 * t771;
t449 = (t638 * t738 + t641 * t743) * pkin(8) + t900;
t579 = t641 * t736 - t741 * t783;
t759 = qJ(2) * t579 + t394 * t741 + t449 * t736;
t452 = -pkin(3) * t700 - t459;
t395 = pkin(2) * t894 - t452 * t738 + t743 * t770;
t450 = (t738 * t894 + t743 * t893) * pkin(8) + t899;
t758 = qJ(2) * t578 + t395 * t741 + t450 * t736;
t468 = pkin(2) * t680 + t526 * t738 + t743 * t839;
t538 = -t856 + (t680 * t738 + t682 * t743) * pkin(8);
t757 = qJ(2) * t643 + t468 * t741 + t538 * t736;
t681 = t703 * t738;
t469 = -pkin(2) * t681 + t525 * t738 + t743 * t838;
t537 = -t857 + (-t681 * t738 - t683 * t743) * pkin(8);
t644 = -t683 * t736 - t741 * t782;
t756 = qJ(2) * t644 + t469 * t741 + t537 * t736;
t678 = (-t738 * t859 - t739 * t743) * qJDD(3);
t677 = (-t738 * t860 + t743 * t744) * qJDD(3);
t633 = -t678 * t737 + t742 * t846;
t632 = t678 * t742 + t737 * t846;
t600 = t786 * t738;
t599 = -t681 * t739 + t744 * t784;
t596 = t681 * t744 + t739 * t784;
t576 = t618 * t739 + t669 * t859;
t575 = t619 * t739 - t736 * t871;
t558 = t564 * t744;
t551 = -t599 * t737 + t644 * t742;
t549 = t599 * t742 + t644 * t737;
t544 = t660 * t743 + t738 * t791;
t543 = -t659 * t743 + t738 * t792;
t540 = t663 * t743 + t738 * t793;
t539 = t661 * t743 + t738 * t794;
t536 = t638 * t739 + t744 * t788;
t533 = -t638 * t744 + t739 * t788;
t529 = -t601 * t736 + t608 * t741;
t524 = -t563 * t744 + t873;
t523 = -t563 * t739 - t871;
t502 = t646 * t743 + t738 * t797;
t493 = -t600 * t739 + t744 * t798;
t492 = -t536 * t737 + t579 * t742;
t490 = t536 * t742 + t579 * t737;
t488 = -t546 * t736 + t570 * t741;
t487 = -t545 * t736 + t569 * t741;
t486 = -t542 * t736 + t568 * t741;
t485 = -t541 * t736 + t567 * t741;
t480 = -pkin(1) * t523 + t744 * t885;
t479 = -t524 * t737 + t564 * t742;
t478 = t524 * t742 + t564 * t737;
t475 = -t582 * t739 + t744 * t799;
t474 = t582 * t744 + t739 * t799;
t467 = pkin(2) * t683 - t525 * t743 + t738 * t838;
t466 = -pkin(2) * t682 - t526 * t743 + t738 * t839;
t462 = (-t523 * t739 - t524 * t744) * qJ(2);
t460 = t465 * t738;
t456 = -t503 * t736 + t547 * t741;
t439 = -t544 * t739 + t744 * t800;
t438 = -t543 * t739 + t744 * t801;
t436 = t588 * t743 + t738 * t804;
t433 = -t540 * t739 + t744 * t802;
t432 = -t539 * t739 + t744 * t803;
t419 = -t514 * t739 + t744 * t805;
t418 = -t513 * t739 + t744 * t806;
t417 = t514 * t744 + t739 * t805;
t416 = t513 * t744 + t739 * t806;
t415 = -t475 * t737 + t506 * t742;
t414 = t475 * t742 + t506 * t737;
t413 = -t502 * t739 + t744 * t807;
t407 = t555 * t743 + t738 * t808;
t406 = t554 * t743 + t738 * t809;
t402 = -t468 * t736 + t538 * t741 + (t597 * t744 + t739 * t890) * qJ(2);
t401 = -t469 * t736 + t537 * t741 + (-t596 * t739 - t599 * t744) * qJ(2);
t400 = -t461 * t736 + t464 * t741;
t393 = -pkin(2) * t893 + t452 * t743 + t738 * t770;
t392 = -pkin(2) * t641 + t451 * t743 + t738 * t771;
t389 = t510 * t743 + t738 * t810;
t388 = t509 * t743 + t738 * t811;
t386 = pkin(2) * t435 + t738 * t886;
t383 = -t437 * t736 + t463 * t741;
t378 = -t419 * t737 + t473 * t742;
t377 = -t418 * t737 + t472 * t742;
t376 = t419 * t742 + t473 * t737;
t375 = t418 * t742 + t472 * t737;
t364 = pkin(1) * t890 - t466 * t739 + t744 * t757;
t363 = -pkin(1) * t596 - t467 * t739 + t744 * t756;
t357 = t743 * t500 + t738 * t815;
t349 = -t739 * t460 + t744 * t814;
t348 = -t409 * t736 + t431 * t741;
t347 = -t408 * t736 + t430 * t741;
t346 = -t739 * t434 + t744 * t818;
t345 = t744 * t434 + t739 * t818;
t344 = -t739 * t436 + t744 * t817;
t341 = -t391 * t736 + t412 * t741;
t340 = -t390 * t736 + t411 * t741;
t336 = t907 * t738;
t335 = -t395 * t736 + t450 * t741 + (-t532 * t739 - t535 * t744) * qJ(2);
t334 = -t394 * t736 + t449 * t741 + (-t533 * t739 - t536 * t744) * qJ(2);
t329 = -t739 * t407 + t744 * t819;
t328 = -t739 * t406 + t744 * t820;
t327 = -t358 * t736 + t387 * t741;
t320 = -t346 * t737 + t384 * t742;
t319 = t346 * t742 + t384 * t737;
t318 = -pkin(1) * t532 - t393 * t739 + t744 * t758;
t317 = -pkin(1) * t533 - t392 * t739 + t744 * t759;
t316 = -t739 * t389 + t744 * t823;
t315 = -t739 * t388 + t744 * t824;
t312 = -t739 * t379 + t744 * t825;
t311 = t744 * t379 + t739 * t825;
t304 = -t739 * t373 + t744 * t826;
t303 = t744 * t373 + t739 * t826;
t297 = pkin(2) * t516 + t425 * t743 + t738 * t773;
t296 = pkin(2) * t515 + t426 * t743 + t738 * t774;
t295 = -t739 * t357 + t744 * t827;
t294 = -t337 * t736 + t338 * t741;
t293 = -t739 * t350 + t744 * t828;
t292 = t744 * t350 + t739 * t828;
t285 = pkin(2) * t583 + t354 * t743 + t738 * t772;
t280 = -t312 * t737 + t333 * t742;
t279 = t312 * t742 + t333 * t737;
t278 = -t304 * t737 + t332 * t742;
t277 = t304 * t742 + t332 * t737;
t273 = t370 * t741 - t385 * t736 + (-t345 * t739 - t346 * t744) * qJ(2);
t272 = -t739 * t336 + t744 * t830;
t271 = -t739 * t330 + t744 * t831;
t270 = t744 * t330 + t739 * t831;
t269 = -pkin(1) * t345 - t386 * t739 + t744 * t760;
t266 = -t293 * t737 + t322 * t742;
t265 = t293 * t742 + t322 * t737;
t262 = pkin(2) * t331 + t738 * t755 - t743 * t889;
t260 = -t286 * t736 + t314 * t741 + (-t474 * t739 - t475 * t744) * qJ(2);
t258 = -t299 * t736 + t306 * t741 + (-t417 * t739 - t419 * t744) * qJ(2);
t257 = -t298 * t736 + t305 * t741 + (-t416 * t739 - t418 * t744) * qJ(2);
t255 = -t271 * t737 + t291 * t742;
t254 = t271 * t742 + t291 * t737;
t250 = -pkin(1) * t417 - t297 * t739 + t744 * t761;
t249 = -pkin(1) * t416 - t296 * t739 + t744 * t762;
t248 = -pkin(1) * t474 - t285 * t739 + t744 * t763;
t247 = -t739 * t281 + t744 * t832;
t246 = t744 * t281 + t739 * t832;
t244 = pkin(2) * t380 + t313 * t743 + t738 * t775;
t242 = pkin(2) * t374 + t310 * t743 + t738 * t776;
t234 = pkin(2) * t351 + t290 * t743 + t738 * t778;
t233 = -t247 * t737 + t256 * t742;
t232 = t247 * t742 + t256 * t737;
t230 = pkin(2) * t282 + t301 * t743 + t738 * t777;
t228 = -t263 * t736 + t268 * t741 + (-t270 * t739 - t271 * t744) * qJ(2);
t226 = -t245 * t736 + t253 * t741 + (-t311 * t739 - t312 * t744) * qJ(2);
t225 = -pkin(1) * t270 - t262 * t739 + t744 * t764;
t224 = -t243 * t736 + t252 * t741 + (-t303 * t739 - t304 * t744) * qJ(2);
t223 = -t739 * t240 + t744 * t834;
t222 = t744 * t240 + t739 * t834;
t221 = -pkin(1) * t311 - t244 * t739 + t744 * t765;
t220 = -pkin(1) * t303 - t242 * t739 + t744 * t766;
t219 = -t235 * t736 + t238 * t741 + (-t292 * t739 - t293 * t744) * qJ(2);
t218 = -pkin(1) * t292 - t234 * t739 + t744 * t767;
t217 = -t223 * t737 + t227 * t742;
t216 = t223 * t742 + t227 * t737;
t215 = -t231 * t736 + t237 * t741 + (-t246 * t739 - t247 * t744) * qJ(2);
t213 = -pkin(1) * t246 - t230 * t739 + t744 * t768;
t211 = pkin(2) * t241 + t239 * t743 + t738 * t779;
t210 = -t212 * t736 + t214 * t741 + (-t222 * t739 - t223 * t744) * qJ(2);
t209 = -pkin(1) * t222 - t211 * t739 + t744 * t769;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t656, 0, 0, 0, 0, 0, 0, 0, 0, 0, t479, 0, 0, 0, 0, 0, 0, t551, t550, 0, t320, 0, 0, 0, 0, 0, 0, t492, -t910, 0, t255, 0, 0, 0, 0, 0, 0, t377, t378, t415, t233, 0, 0, 0, 0, 0, 0, t278, t280, t266, t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t655, 0, 0, 0, 0, 0, 0, 0, 0, 0, t478, 0, 0, 0, 0, 0, 0, t549, -t906, 0, t319, 0, 0, 0, 0, 0, 0, t490, t489, 0, t254, 0, 0, 0, 0, 0, 0, t375, t376, t414, t232, 0, 0, 0, 0, 0, 0, t277, t279, t265, t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t732, 0, 0, 0, 0, 0, 0, 0, 0, 0, t523, 0, 0, 0, 0, 0, 0, t596, -t890, 0, t345, 0, 0, 0, 0, 0, 0, t533, t532, 0, t270, 0, 0, 0, 0, 0, 0, t416, t417, t474, t246, 0, 0, 0, 0, 0, 0, t303, t311, t292, t222; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t861, -t858, -t655, -qJ(1) * t655, 0, 0, 0, 0, 0, 0, -t576 * t737 - t736 * t872, -t575 * t737 - t741 * t872, -t558 * t737 + t563 * t742, -qJ(1) * t478 + t462 * t742 - t480 * t737, 0, 0, -t550, 0, t551, t633, -qJ(1) * t549 - t363 * t737 + t401 * t742, qJ(1) * t906 - t364 * t737 + t402 * t742, -t349 * t737 + t400 * t742, -qJ(1) * t319 - t269 * t737 + t273 * t742, 0, 0, t910, 0, t492, t633, -qJ(1) * t490 - t317 * t737 + t334 * t742, -qJ(1) * t489 - t318 * t737 + t335 * t742, -t272 * t737 + t294 * t742, -qJ(1) * t254 - t225 * t737 + t228 * t742, -t439 * t737 + t488 * t742, -t413 * t737 + t456 * t742, -t433 * t737 + t486 * t742, -t438 * t737 + t487 * t742, -t432 * t737 + t485 * t742, -t493 * t737 + t529 * t742, -qJ(1) * t375 - t249 * t737 + t257 * t742, -qJ(1) * t376 - t250 * t737 + t258 * t742, -qJ(1) * t414 - t248 * t737 + t260 * t742, -qJ(1) * t232 - t213 * t737 + t215 * t742, -t329 * t737 + t348 * t742, -t295 * t737 + t327 * t742, -t315 * t737 + t340 * t742, -t328 * t737 + t347 * t742, -t316 * t737 + t341 * t742, -t344 * t737 + t383 * t742, -qJ(1) * t277 - t220 * t737 + t224 * t742, -qJ(1) * t279 - t221 * t737 + t226 * t742, -qJ(1) * t265 - t218 * t737 + t219 * t742, -qJ(1) * t216 - t209 * t737 + t210 * t742; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t858, -t861, t656, qJ(1) * t656, 0, 0, 0, 0, 0, 0, t576 * t742 - t736 * t875, t575 * t742 - t741 * t875, t558 * t742 + t563 * t737, qJ(1) * t479 + t462 * t737 + t480 * t742, 0, 0, t906, 0, t549, t632, qJ(1) * t551 + t363 * t742 + t401 * t737, qJ(1) * t550 + t364 * t742 + t402 * t737, t349 * t742 + t400 * t737, qJ(1) * t320 + t269 * t742 + t273 * t737, 0, 0, -t489, 0, t490, t632, qJ(1) * t492 + t317 * t742 + t334 * t737, -qJ(1) * t910 + t318 * t742 + t335 * t737, t272 * t742 + t294 * t737, qJ(1) * t255 + t225 * t742 + t228 * t737, t439 * t742 + t488 * t737, t413 * t742 + t456 * t737, t433 * t742 + t486 * t737, t438 * t742 + t487 * t737, t432 * t742 + t485 * t737, t493 * t742 + t529 * t737, qJ(1) * t377 + t249 * t742 + t257 * t737, qJ(1) * t378 + t250 * t742 + t258 * t737, qJ(1) * t415 + t248 * t742 + t260 * t737, qJ(1) * t233 + t213 * t742 + t215 * t737, t329 * t742 + t348 * t737, t295 * t742 + t327 * t737, t315 * t742 + t340 * t737, t328 * t742 + t347 * t737, t316 * t742 + t341 * t737, t344 * t742 + t383 * t737, qJ(1) * t278 + t220 * t742 + t224 * t737, qJ(1) * t280 + t221 * t742 + t226 * t737, qJ(1) * t266 + t218 * t742 + t219 * t737, qJ(1) * t217 + t209 * t742 + t210 * t737; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t707, t708, 0, 0, 0, 0, 0, 0, 0, 0, -t618 * t744 + t669 * t860, -t619 * t744 - t736 * t873, t564 * t739, pkin(1) * t524 + t739 * t885, 0, 0, t890, 0, t596, t677, pkin(1) * t599 + t467 * t744 + t739 * t756, -pkin(1) * t597 + t466 * t744 + t739 * t757, t744 * t460 + t739 * t814, pkin(1) * t346 + t386 * t744 + t739 * t760, 0, 0, -t532, 0, t533, t677, pkin(1) * t536 + t392 * t744 + t739 * t759, pkin(1) * t535 + t393 * t744 + t739 * t758, t744 * t336 + t739 * t830, pkin(1) * t271 + t262 * t744 + t739 * t764, t544 * t744 + t739 * t800, t502 * t744 + t739 * t807, t540 * t744 + t739 * t802, t543 * t744 + t739 * t801, t539 * t744 + t739 * t803, t600 * t744 + t739 * t798, pkin(1) * t418 + t296 * t744 + t739 * t762, pkin(1) * t419 + t297 * t744 + t739 * t761, pkin(1) * t475 + t285 * t744 + t739 * t763, pkin(1) * t247 + t230 * t744 + t739 * t768, t744 * t407 + t739 * t819, t744 * t357 + t739 * t827, t744 * t388 + t739 * t824, t744 * t406 + t739 * t820, t744 * t389 + t739 * t823, t744 * t436 + t739 * t817, pkin(1) * t304 + t242 * t744 + t739 * t766, pkin(1) * t312 + t244 * t744 + t739 * t765, pkin(1) * t293 + t234 * t744 + t739 * t767, pkin(1) * t223 + t211 * t744 + t739 * t769;];
tauB_reg  = t1;
