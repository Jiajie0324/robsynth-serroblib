% Calculate minimal parameter regressor of coriolis matrix for
% S6PPRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d5,d6,theta1,theta2,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x20]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PPRPRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRPRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:43:45
% EndTime: 2019-03-08 18:43:49
% DurationCPUTime: 1.94s
% Computational Cost: add. (2362->200), mult. (7216->366), div. (0->0), fcn. (8735->14), ass. (0->173)
t161 = cos(qJ(6));
t156 = sin(pkin(12));
t157 = sin(pkin(6));
t160 = sin(qJ(3));
t244 = cos(pkin(12));
t245 = cos(pkin(7));
t187 = t245 * t244;
t242 = sin(pkin(7));
t246 = cos(pkin(6));
t188 = t246 * t242;
t253 = cos(qJ(3));
t100 = -t253 * t188 + (t156 * t160 - t187 * t253) * t157;
t101 = t160 * t188 + (t253 * t156 + t160 * t187) * t157;
t155 = sin(pkin(13));
t243 = cos(pkin(13));
t65 = t243 * t100 + t101 * t155;
t261 = t161 * t65;
t158 = sin(qJ(6));
t151 = t158 ^ 2;
t153 = t161 ^ 2;
t141 = t153 - t151;
t159 = sin(qJ(5));
t221 = t159 * qJD(3);
t209 = t161 * t221;
t260 = qJD(5) * t141 - 0.2e1 * t158 * t209;
t259 = -t65 / 0.2e1;
t162 = cos(qJ(5));
t251 = t162 * pkin(10);
t252 = t159 * pkin(5);
t136 = -t251 + t252;
t258 = -t136 / 0.2e1;
t257 = -t159 / 0.2e1;
t256 = t159 / 0.2e1;
t255 = -t162 / 0.2e1;
t254 = t162 / 0.2e1;
t250 = qJD(3) * pkin(3);
t163 = -t157 * t244 * t242 + t246 * t245;
t173 = -t155 * t100 + t243 * t101;
t46 = t163 * t159 + t162 * t173;
t249 = t158 * t46;
t248 = t158 * t173;
t247 = t161 * t173;
t186 = t243 * t242;
t192 = t242 * t253;
t120 = t155 * t192 + t160 * t186;
t216 = t259 + t65 / 0.2e1;
t10 = t216 * t120;
t241 = t10 * qJD(1);
t152 = t159 ^ 2;
t240 = t152 * t158;
t105 = t162 * t120 + t159 * t245;
t239 = t158 * t105;
t238 = t158 * t120;
t237 = t158 * t159;
t236 = t158 * t162;
t235 = t159 * t161;
t197 = t160 * t242;
t119 = t155 * t197 - t253 * t186;
t234 = t161 * t119;
t233 = t161 * t120;
t232 = t161 * t136;
t231 = t161 * t152;
t230 = t161 * t162;
t154 = t162 ^ 2;
t142 = t154 - t152;
t229 = qJD(5) * t158;
t228 = qJD(5) * t161;
t227 = qJD(6) * t158;
t226 = qJD(6) * t161;
t225 = qJD(6) * t162;
t129 = t142 * t158;
t224 = t129 * qJD(3);
t130 = t154 * t161 - t231;
t223 = t130 * qJD(3);
t222 = t142 * qJD(3);
t220 = t159 * qJD(5);
t219 = t159 * qJD(6);
t218 = t162 * qJD(3);
t217 = t162 * qJD(5);
t147 = pkin(3) * t155 + pkin(9);
t215 = t147 * t236;
t214 = t147 * t230;
t213 = t119 * t236;
t133 = t147 * t237;
t212 = t249 / 0.2e1;
t211 = t261 / 0.2e1;
t210 = t65 * t255;
t208 = t158 * t228;
t207 = t158 * t225;
t206 = t161 * t225;
t205 = t158 * t226;
t204 = t159 * t217;
t203 = t159 * t218;
t202 = t161 * t220;
t201 = t239 / 0.2e1;
t200 = -t237 / 0.2e1;
t199 = t235 / 0.2e1;
t198 = t234 / 0.2e1;
t196 = -qJD(6) + t218;
t195 = t158 * t202;
t24 = t249 - t261;
t193 = t211 + t24 / 0.2e1;
t148 = -t243 * pkin(3) - pkin(4);
t76 = -t234 + t239;
t191 = t198 + t76 / 0.2e1;
t190 = -t162 * pkin(5) - t159 * pkin(10);
t104 = t120 * t159 - t162 * t245;
t189 = -t120 / 0.2e1 + t104 * t256;
t185 = t158 * t65 + t161 * t46;
t3 = t216 * t237;
t123 = t190 + t148;
t103 = t158 * t123 + t214;
t57 = t136 * t236 + (-t103 + t214) * t159;
t184 = -t3 * qJD(1) + t57 * qJD(3);
t183 = t10 * qJD(2);
t182 = t105 * t161 + t119 * t158;
t181 = t196 * t159;
t180 = t251 / 0.2e1 - t252 / 0.2e1;
t171 = t258 + t180;
t106 = t171 * t158;
t179 = pkin(5) * t228 + qJD(3) * t106;
t107 = t171 * t161;
t178 = pkin(5) * t229 - qJD(3) * t107;
t25 = t216 * t159;
t177 = -t25 * qJD(1) - t148 * t221;
t26 = t216 * t162;
t176 = -t26 * qJD(1) - t148 * t218;
t175 = t161 * t181;
t124 = (t151 / 0.2e1 - t153 / 0.2e1) * t159;
t174 = -qJD(3) * t124 + t208;
t172 = t247 / 0.2e1 - t158 * t210;
t170 = qJD(3) * t158 * t231 + qJD(5) * t124;
t128 = t141 * t152;
t169 = qJD(3) * t128 + 0.2e1 * t195;
t1 = (t212 - t193) * t159;
t16 = (t201 - t191) * t159;
t102 = -t161 * t123 + t215;
t56 = t102 * t159 + (-t133 + t232) * t162;
t167 = t1 * qJD(1) + t16 * qJD(2) - t56 * qJD(3);
t29 = (t105 * t255 - t189) * t161;
t45 = t159 * t173 - t163 * t162;
t164 = t185 * t254 + t45 * t199;
t5 = -t164 + t172;
t82 = -t103 * t162 - t147 * t231;
t166 = qJD(1) * t5 + qJD(2) * t29 + qJD(3) * t82;
t30 = t189 * t158 + t191 * t162;
t6 = t193 * t162 + (-t173 / 0.2e1 + t45 * t256) * t158;
t81 = -t102 * t162 - t147 * t240;
t165 = qJD(1) * t6 + qJD(2) * t30 - qJD(3) * t81;
t149 = t220 / 0.2e1;
t145 = t158 * t220;
t127 = (t218 - qJD(6) / 0.2e1) * t159;
t121 = t124 * qJD(6);
t84 = t133 + t232 / 0.2e1 + t180 * t161;
t83 = t147 * t235 + (-t180 + t258) * t158;
t80 = t119 * t162;
t79 = t119 * t159;
t71 = t104 * t161;
t70 = t104 * t158;
t32 = t182 * t254 + t104 * t199 + t213 / 0.2e1 + t233 / 0.2e1;
t31 = t76 * t255 + t104 * t200 + t162 * t198 - t238 / 0.2e1;
t28 = t65 * t254 - t210;
t27 = (t256 - t257) * t65;
t19 = t105 * t199 + t119 * t200 + t182 * t257;
t17 = (t198 - t76 / 0.2e1 + t201) * t159;
t15 = t45 * t161;
t14 = t45 * t158;
t9 = t10 * qJD(3);
t8 = t164 + t172;
t7 = t24 * t255 + t45 * t200 - t161 * t210 - t248 / 0.2e1;
t4 = t185 * t257 + t46 * t199 + t237 * t259;
t2 = (t211 - t24 / 0.2e1 + t212) * t159;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -t101 * qJD(3), t100 * qJD(3) (-t155 * t65 - t173 * t243) * t250 + t183, 0, 0, 0, 0, 0, t27 * qJD(5) - t173 * t218, qJD(5) * t28 + t173 * t221, 0, 0, 0, 0, 0 (-(t236 * t65 + t247) * t162 - t65 * t240) * qJD(3) + t2 * qJD(5) + t8 * qJD(6) ((-t230 * t65 + t248) * t162 - t65 * t231) * qJD(3) + t4 * qJD(5) + t7 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t27 - qJD(5) * t46, qJD(3) * t28 + qJD(5) * t45, 0, 0, 0, 0, 0, qJD(3) * t2 + qJD(6) * t14 - t228 * t46, qJD(3) * t4 + qJD(6) * t15 + t229 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 * qJD(3) + t14 * qJD(5) - qJD(6) * t185, qJD(3) * t7 + qJD(5) * t15 + qJD(6) * t24; 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -qJD(3) * t197, -qJD(3) * t192, t241 + (-t119 * t155 - t243 * t120) * t250, 0, 0, 0, 0, 0, t79 * qJD(5) - t120 * t218, qJD(5) * t80 + t120 * t221, 0, 0, 0, 0, 0 (-(t213 + t233) * t162 - t119 * t240) * qJD(3) + t17 * qJD(5) + t32 * qJD(6) ((-t119 * t230 + t238) * t162 - t119 * t231) * qJD(3) + t19 * qJD(5) + t31 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t79 - qJD(5) * t105, qJD(3) * t80 + qJD(5) * t104, 0, 0, 0, 0, 0, qJD(3) * t17 + qJD(6) * t70 - t105 * t228, qJD(3) * t19 + qJD(6) * t71 + t105 * t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 * qJD(3) + t70 * qJD(5) - qJD(6) * t182, qJD(3) * t31 + qJD(5) * t71 + qJD(6) * t76; 0, 0, 0, 0, 0, -t183, 0, 0, 0, 0, 0, t25 * qJD(5), t26 * qJD(5), 0, 0, 0, 0, 0, qJD(5) * t1 - qJD(6) * t5, -qJD(5) * t3 - qJD(6) * t6; 0, 0, 0, 0, 0, -t241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5) * t16 - qJD(6) * t29, -qJD(6) * t30; 0, 0, 0, 0, 0, 0, t204, t142 * qJD(5), 0, 0, 0, t148 * t220, t148 * t217, -t152 * t205 + t153 * t204, -t128 * qJD(6) - 0.2e1 * t162 * t195, -t130 * qJD(5) + t159 * t207, t129 * qJD(5) + t159 * t206, -t204, -qJD(5) * t56 - qJD(6) * t82, qJD(5) * t57 + qJD(6) * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, t203, t222, t217, -t220, 0, -t147 * t217 - t177, t147 * t220 - t176, -t121 + (t153 * t221 + t208) * t162, -0.2e1 * t159 * t205 + t260 * t162, t145 - t223, t202 + t224, -t127 (t158 * t190 - t214) * qJD(5) + t84 * qJD(6) + t167 (t161 * t190 + t215) * qJD(5) + t83 * qJD(6) + t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, -t169, t158 * t181, t175, t149, qJD(5) * t84 - qJD(6) * t103 - t166, qJD(5) * t83 + qJD(6) * t102 - t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t220, -t217, 0, 0, 0, 0, 0, -t202 - t207, t145 - t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158 * t217 - t161 * t219, t158 * t219 - t161 * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25 * qJD(3), -t26 * qJD(3), 0, 0, 0, 0, 0, -qJD(3) * t1, qJD(3) * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t16, 0; 0, 0, 0, 0, 0, 0, -t203, -t222, 0, 0, 0, t177, t176, -t153 * t203 - t121, 0.2e1 * t158 * t175, -t206 + t223, t207 - t224, t127, qJD(6) * t107 - t167, -qJD(6) * t106 - t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, t141 * qJD(6), 0, 0, 0, -pkin(5) * t227, -pkin(5) * t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174, t260, -t196 * t161, t196 * t158, -t221 / 0.2e1, -pkin(10) * t226 - t178, pkin(10) * t227 - t179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t5, qJD(3) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t29, qJD(3) * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, t169 (-t158 * t221 + t228) * t162 (-t209 - t229) * t162, t149, -qJD(5) * t107 + t166, qJD(5) * t106 + t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t174, -t260, t161 * t218, -t158 * t218, t221 / 0.2e1, t178, t179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t11;
