% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:04:06
% EndTime: 2019-03-09 18:04:17
% DurationCPUTime: 4.03s
% Computational Cost: add. (13720->280), mult. (29373->482), div. (0->0), fcn. (30230->10), ass. (0->170)
t108 = sin(qJ(6));
t106 = t108 ^ 2;
t110 = cos(qJ(6));
t107 = t110 ^ 2;
t197 = t106 + t107;
t211 = sin(qJ(5));
t175 = qJD(5) * t211;
t201 = sin(pkin(11));
t212 = sin(qJ(3));
t159 = t201 * t212;
t146 = pkin(2) * t159;
t214 = cos(qJ(3));
t190 = t214 * pkin(2);
t164 = t190 + pkin(3);
t202 = cos(pkin(11));
t84 = t202 * t164 - t146;
t126 = pkin(4) + t84;
t213 = cos(qJ(5));
t124 = t213 * t126;
t160 = t202 * t212;
t131 = -t201 * t214 - t160;
t204 = pkin(2) * qJD(3);
t127 = t131 * t204;
t161 = t202 * t214;
t98 = qJD(3) * t146;
t138 = t161 * t204 - t98;
t191 = -qJD(5) * t124 - t211 * t127 - t213 * t138;
t86 = pkin(2) * t160 + t201 * t164;
t37 = t86 * t175 + t191;
t171 = t197 * t37;
t180 = t201 * pkin(3);
t147 = t211 * t180;
t163 = t202 * pkin(3) + pkin(4);
t142 = t213 * t163;
t95 = qJD(5) * t142;
t79 = qJD(5) * t147 - t95;
t170 = t197 * t79;
t198 = t106 - t107;
t220 = t198 * qJD(6);
t109 = sin(qJ(2));
t111 = cos(qJ(2));
t140 = t212 * t109 - t214 * t111;
t141 = t214 * t109 + t212 * t111;
t122 = t202 * t140 + t201 * t141;
t120 = t213 * t122;
t65 = -t201 * t140 + t202 * t141;
t41 = t211 * t65 + t120;
t42 = -t211 * t122 + t213 * t65;
t104 = -t111 * pkin(2) - pkin(1);
t81 = pkin(3) * t140 + t104;
t48 = pkin(4) * t122 + t81;
t116 = t41 * pkin(5) - t42 * pkin(10) + t48;
t136 = t141 * qJD(3);
t123 = -qJD(2) * t141 - t136;
t174 = t214 * qJD(3);
t176 = qJD(3) * t212;
t196 = qJD(2) * t109;
t219 = -t111 * (t214 * qJD(2) + t174) + t109 * t176 + t212 * t196;
t125 = t202 * t219;
t118 = t201 * t123 - t125;
t217 = -pkin(8) - pkin(7);
t165 = t217 * t212;
t148 = qJD(2) * t165;
t166 = t217 * t214;
t149 = qJD(2) * t166;
t92 = t109 * t165;
t97 = t217 * t111;
t114 = qJ(4) * t219 - qJD(3) * t92 - t141 * qJD(4) - t109 * t148 + t111 * t149 + t97 * t174;
t93 = t109 * t166;
t46 = -qJD(3) * t93 - t109 * t149 - t111 * t148 - t97 * t176;
t117 = qJ(4) * t123 - qJD(4) * t140 - t46;
t24 = t202 * t114 - t201 * t117;
t112 = pkin(9) * t118 - t24;
t66 = t212 * t97 + t93;
t59 = -t141 * qJ(4) + t66;
t67 = -t214 * t97 + t92;
t60 = -qJ(4) * t140 + t67;
t35 = -t201 * t60 + t202 * t59;
t143 = -t65 * pkin(9) + t35;
t133 = t213 * t143;
t64 = t201 * t219;
t121 = -t202 * t123 - t64;
t25 = t201 * t114 + t202 * t117;
t16 = -pkin(9) * t121 + t25;
t36 = t201 * t59 + t202 * t60;
t30 = -pkin(9) * t122 + t36;
t6 = -qJD(5) * t133 + t211 * t112 - t213 * t16 + t30 * t175;
t221 = -qJD(6) * t116 + t6;
t20 = t211 * t143 + t213 * t30;
t10 = -t108 * t20 + t110 * t116;
t11 = t108 * t116 + t110 * t20;
t150 = t10 * t108 - t11 * t110;
t22 = qJD(5) * t120 - t213 * t118 + t211 * t121 + t65 * t175;
t23 = t42 * qJD(5) + t211 * t118 + t213 * t121;
t186 = pkin(2) * t196;
t31 = -pkin(3) * t123 + pkin(4) * t121 + t186;
t113 = t23 * pkin(5) + t22 * pkin(10) + t31;
t194 = qJD(6) * t108;
t2 = -t108 * t113 + t221 * t110 + t20 * t194;
t105 = qJD(6) * t110;
t3 = -t20 * t105 + t221 * t108 + t110 * t113;
t218 = qJD(6) * t150 + t2 * t108 - t3 * t110;
t19 = t211 * t30 - t133;
t7 = t20 * qJD(5) + t213 * t112 + t211 * t16;
t216 = t19 * t7;
t18 = t19 * t105;
t215 = t7 * t108 + t18;
t210 = t109 * pkin(2);
t128 = t213 * t127 - t211 * t138;
t78 = t213 * t86;
t58 = t211 * t126 + t78;
t38 = t58 * qJD(5) - t128;
t209 = t19 * t38;
t103 = t213 * t180;
t96 = t211 * t163;
t87 = t103 + t96;
t80 = t87 * qJD(5);
t208 = t19 * t80;
t207 = t42 * t22;
t183 = t211 * t86;
t57 = -t183 + t124;
t52 = -pkin(5) - t57;
t206 = t52 * t105 + t38 * t108;
t85 = -t147 + t142;
t82 = -pkin(5) - t85;
t205 = t82 * t105 + t80 * t108;
t203 = t110 * t22;
t195 = qJD(2) * t111;
t193 = 0.2e1 * t41 * t23;
t192 = -0.2e1 * pkin(1) * qJD(2);
t188 = pkin(5) * t194;
t187 = pkin(5) * t105;
t185 = t108 * t203;
t182 = t42 * t194;
t181 = t42 * t105;
t17 = t19 * t194;
t179 = t108 * t105;
t178 = t109 * t195;
t49 = t52 * t194;
t173 = -t38 * t110 + t49;
t71 = t82 * t194;
t172 = -t80 * t110 + t71;
t169 = pkin(2) * t174;
t168 = pkin(2) * t176;
t40 = t42 ^ 2;
t167 = t40 * t179;
t162 = -t19 * t22 + t7 * t42;
t157 = t22 * t41 - t42 * t23;
t156 = t37 * t41 + t38 * t42;
t53 = pkin(10) + t58;
t154 = t41 * t53 - t42 * t52;
t153 = t79 * t41 + t80 * t42;
t83 = pkin(10) + t87;
t152 = t41 * t83 - t42 * t82;
t151 = t10 * t110 + t108 * t11;
t145 = t182 + t203;
t14 = t41 * t105 + t108 * t23;
t144 = -t110 * t23 + t41 * t194;
t137 = t104 * t141;
t135 = -t22 * t52 - t23 * t53 + t156;
t134 = -t22 * t82 - t23 * t83 + t153;
t1 = -qJD(6) * t151 - t3 * t108 - t2 * t110;
t100 = -0.2e1 * t179;
t99 = 0.2e1 * t179;
t91 = -0.2e1 * t220;
t61 = pkin(3) * t136 + (pkin(3) * t141 + t210) * qJD(2);
t47 = -t67 * qJD(3) + (t111 * t166 - t92) * qJD(2);
t12 = t42 * t220 + t185;
t9 = -0.4e1 * t42 * t179 + t198 * t22;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t178, 0.2e1 * (-t109 ^ 2 + t111 ^ 2) * qJD(2), 0, -0.2e1 * t178, 0, 0, t109 * t192, t111 * t192, 0, 0, -0.2e1 * t141 * t219, 0.2e1 * t123 * t141 + 0.2e1 * t140 * t219, 0, -0.2e1 * t140 * t123, 0, 0, 0.2e1 * qJD(3) * t137 + 0.2e1 * (t140 * t210 + t137) * qJD(2), -0.2e1 * t104 * t219 + 0.2e1 * t141 * t186, 0.2e1 * t123 * t67 + 0.2e1 * t140 * t46 - 0.2e1 * t141 * t47 + 0.2e1 * t219 * t66, 0.2e1 * t104 * t186 - 0.2e1 * t67 * t46 + 0.2e1 * t66 * t47, 0.2e1 * t65 * t118, -0.2e1 * t118 * t122 - 0.2e1 * t121 * t65, 0, 0.2e1 * t122 * t121, 0, 0, 0.2e1 * t121 * t81 + 0.2e1 * t122 * t61, 0.2e1 * t118 * t81 + 0.2e1 * t61 * t65, -0.2e1 * t118 * t35 - 0.2e1 * t121 * t36 - 0.2e1 * t122 * t25 - 0.2e1 * t24 * t65, 0.2e1 * t35 * t24 + 0.2e1 * t36 * t25 + 0.2e1 * t81 * t61, -0.2e1 * t207, 0.2e1 * t157, 0, t193, 0, 0, 0.2e1 * t48 * t23 + 0.2e1 * t31 * t41, -0.2e1 * t48 * t22 + 0.2e1 * t31 * t42, -0.2e1 * t20 * t23 + 0.2e1 * t6 * t41 + 0.2e1 * t162, -0.2e1 * t20 * t6 + 0.2e1 * t48 * t31 + 0.2e1 * t216, -0.2e1 * t107 * t207 - 0.2e1 * t167, 0.4e1 * t185 * t42 + 0.2e1 * t40 * t220, -0.2e1 * t110 * t157 - 0.2e1 * t182 * t41, -0.2e1 * t106 * t207 + 0.2e1 * t167, 0.2e1 * t108 * t157 - 0.2e1 * t181 * t41, t193, 0.2e1 * t10 * t23 + 0.2e1 * t108 * t162 + 0.2e1 * t18 * t42 + 0.2e1 * t3 * t41, -0.2e1 * t11 * t23 + 0.2e1 * t110 * t162 - 0.2e1 * t17 * t42 + 0.2e1 * t2 * t41, 0.2e1 * t151 * t22 + 0.2e1 * t218 * t42, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t195, 0, -t196, 0, -pkin(7) * t195, pkin(7) * t196, 0, 0, 0, 0, -t219, 0, t123, 0, t47, t46, t219 * t190 - t140 * t169 + (t123 + t136) * t212 * pkin(2) (t47 * t214 - t46 * t212 + (-t212 * t66 + t214 * t67) * qJD(3)) * pkin(2), 0, 0, t118, 0, -t121, 0, t24, -t25, -t118 * t84 - t121 * t86 - t122 * t138 - t127 * t65, t127 * t35 + t138 * t36 + t24 * t84 + t25 * t86, 0, 0, -t22, 0, -t23, 0, -t7, t6, t57 * t22 - t58 * t23 + t156, -t20 * t37 - t7 * t57 - t6 * t58 + t209, -t12, t9, t14, t12, -t144, 0, t17 + (-qJD(6) * t154 - t7) * t110 + t135 * t108, t110 * t135 + t154 * t194 + t215, t1, t1 * t53 + t150 * t37 + t7 * t52 + t209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t168, -0.2e1 * t169, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t127, -0.2e1 * t138, 0, -0.2e1 * t86 * t98 + 0.2e1 * (t131 * t84 + t161 * t86) * t204, 0, 0, 0, 0, 0, 0, -0.2e1 * t38, 0.2e1 * t37, 0, -0.2e1 * t58 * t37 - 0.2e1 * t57 * t38, t99, t91, 0, t100, 0, 0, 0.2e1 * t173, 0.2e1 * t206, -0.2e1 * t171, -0.2e1 * t171 * t53 + 0.2e1 * t52 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, 0, t123, 0, t47, t46, 0, 0, 0, 0, t118, 0, -t121, 0, t24, -t25 (t202 * t125 + t201 * t64) * pkin(3) (t201 * t25 + t202 * t24) * pkin(3), 0, 0, -t22, 0, -t23, 0, -t7, t6, t85 * t22 - t87 * t23 + t153, -t20 * t79 - t6 * t87 - t7 * t85 + t208, -t12, t9, t14, t12, -t144, 0, t17 + (-qJD(6) * t152 - t7) * t110 + t134 * t108, t110 * t134 + t152 * t194 + t215, t1, t1 * t83 + t150 * t79 + t7 * t82 + t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t169, 0, 0, 0, 0, 0, 0, 0, 0, t127, -t138, 0 (t202 * t127 + t138 * t201) * pkin(3), 0, 0, 0, 0, 0, 0 (-t103 - 0.2e1 * t96 - t78 - t211 * (t161 - t159) * pkin(2)) * qJD(5) + t128, -t95 + (t147 + t183) * qJD(5) + t191, 0, -t37 * t87 - t38 * t85 - t57 * t80 - t58 * t79, t99, t91, 0, t100, 0, 0, t49 + t71 + (-t38 - t80) * t110, t205 + t206, -t170 - t171, t38 * t82 + t52 * t80 + t197 * (-t37 * t83 - t53 * t79); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t80, 0.2e1 * t79, 0, -0.2e1 * t87 * t79 - 0.2e1 * t85 * t80, t99, t91, 0, t100, 0, 0, 0.2e1 * t172, 0.2e1 * t205, -0.2e1 * t170, -0.2e1 * t170 * t83 + 0.2e1 * t82 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t118, 0, t61, 0, 0, 0, 0, 0, 0, t23, -t22, 0, t31, 0, 0, 0, 0, 0, 0, -t144, -t14, t197 * t22, -t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t23, 0, -t7, t6, 0, 0, -t12, t9, t14, t12, -t144, 0, t17 + (pkin(5) * t22 - pkin(10) * t23) * t108 + (-t7 + (-pkin(5) * t42 - pkin(10) * t41) * qJD(6)) * t110, pkin(5) * t145 + pkin(10) * t144 + t215, t1, -t7 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t37, 0, 0, t99, t91, 0, t100, 0, 0, t173 - t188, -t187 + t206, -t171, -t38 * pkin(5) - pkin(10) * t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, t79, 0, 0, t99, t91, 0, t100, 0, 0, t172 - t188, -t187 + t205, -t170, -t80 * pkin(5) - pkin(10) * t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t91, 0, t100, 0, 0, -0.2e1 * t188, -0.2e1 * t187, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, t108 * t22 - t181, t23, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, 0, -t194, 0, -t105 * t53 + t108 * t37, t110 * t37 + t194 * t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, 0, -t194, 0, -t105 * t83 + t108 * t79, t110 * t79 + t194 * t83, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194, -t105, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, 0, -t194, 0, -pkin(10) * t105, pkin(10) * t194, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
