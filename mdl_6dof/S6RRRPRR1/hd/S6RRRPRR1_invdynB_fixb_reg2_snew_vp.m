% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 09:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 09:45:00
% EndTime: 2019-05-07 09:46:01
% DurationCPUTime: 56.93s
% Computational Cost: add. (503888->955), mult. (1183581->1476), div. (0->0), fcn. (914146->12), ass. (0->653)
t1133 = cos(qJ(2));
t1114 = t1133 * qJDD(1);
t1128 = sin(qJ(2));
t1200 = qJD(1) * t1128;
t1165 = qJD(2) * t1200;
t1087 = t1114 - t1165;
t1122 = t1133 ^ 2;
t1136 = qJD(1) ^ 2;
t1129 = sin(qJ(1));
t1134 = cos(qJ(1));
t1096 = t1129 * g(1) - t1134 * g(2);
t1145 = qJDD(1) * pkin(1) + t1096;
t1146 = qJD(2) * pkin(2) - pkin(8) * t1200;
t1022 = t1087 * pkin(2) - t1146 * t1200 + t1145 + (pkin(8) * t1122 + pkin(7)) * t1136;
t1127 = sin(qJ(3));
t1132 = cos(qJ(3));
t1077 = (t1127 * t1133 + t1128 * t1132) * qJD(1);
t1199 = qJD(1) * t1133;
t1160 = qJD(2) * t1199;
t1175 = qJDD(1) * t1128;
t1086 = t1160 + t1175;
t1153 = t1127 * t1086 - t1132 * t1087;
t1019 = -qJD(3) * t1077 - t1153;
t1075 = t1127 * t1200 - t1132 * t1199;
t1073 = t1075 ^ 2;
t1120 = qJD(2) + qJD(3);
t1147 = pkin(3) * t1120 - qJ(4) * t1077;
t926 = t1019 * pkin(3) + t1073 * qJ(4) - t1077 * t1147 - qJDD(4) + t1022;
t1123 = sin(pkin(11));
t1119 = qJDD(2) + qJDD(3);
t1124 = cos(pkin(11));
t1041 = -t1075 * t1124 - t1123 * t1077;
t1042 = -t1075 * t1123 + t1077 * t1124;
t989 = t1041 * t1042;
t1229 = t989 + t1119;
t1241 = t1123 * t1229;
t1240 = t1124 * t1229;
t1125 = sin(qJ(6));
t1126 = sin(qJ(5));
t1131 = cos(qJ(5));
t1143 = qJD(3) * t1075 - t1086 * t1132 - t1087 * t1127;
t1156 = -t1124 * t1019 - t1123 * t1143;
t959 = t1123 * t1019 - t1124 * t1143;
t1158 = t1126 * t959 + t1131 * t1156;
t981 = t1041 * t1126 + t1042 * t1131;
t867 = -qJD(5) * t981 - t1158;
t1144 = qJDD(6) - t867;
t1113 = qJD(5) + t1120;
t1130 = cos(qJ(6));
t964 = -t1130 * t1113 + t1125 * t981;
t966 = t1113 * t1125 + t1130 * t981;
t904 = t966 * t964;
t1231 = t1144 - t904;
t1239 = t1125 * t1231;
t1112 = qJDD(5) + t1119;
t979 = -t1131 * t1041 + t1042 * t1126;
t921 = t981 * t979;
t1230 = -t921 + t1112;
t1238 = t1126 * t1230;
t1048 = t1077 * t1075;
t1228 = -t1048 + t1119;
t1237 = t1127 * t1228;
t1236 = t1130 * t1231;
t1235 = t1131 * t1230;
t1234 = t1132 * t1228;
t1069 = t1120 * t1075;
t1233 = -t1069 + t1143;
t1038 = t1041 ^ 2;
t1149 = pkin(4) * t1120 - pkin(9) * t1042;
t846 = -pkin(4) * t1156 + t1038 * pkin(9) - t1042 * t1149 + t926;
t868 = -qJD(5) * t979 - t1126 * t1156 + t1131 * t959;
t972 = t1113 * t979;
t842 = t868 - t972;
t834 = -t964 * qJD(6) + t1125 * t1112 + t1130 * t868;
t975 = qJD(6) + t979;
t912 = t975 * t964;
t804 = -t912 + t834;
t1035 = t1120 * t1041;
t936 = t1035 - t959;
t1232 = t1035 + t959;
t1227 = -t1069 - t1143;
t1225 = t1120 ^ 2;
t1043 = -t1073 - t1225;
t1157 = -t1130 * t1112 + t1125 * t868;
t801 = (qJD(6) - t975) * t966 + t1157;
t840 = (qJD(5) - t1113) * t981 + t1158;
t997 = (qJD(3) - t1120) * t1077 + t1153;
t961 = t964 ^ 2;
t962 = t966 ^ 2;
t974 = t975 ^ 2;
t977 = t979 ^ 2;
t978 = t981 ^ 2;
t1039 = t1042 ^ 2;
t1074 = t1077 ^ 2;
t1226 = t1113 ^ 2;
t1224 = 2 * qJD(4);
t1223 = pkin(5) * t1126;
t1179 = t1128 * t1136;
t1097 = g(1) * t1134 + g(2) * t1129;
t1079 = -pkin(1) * t1136 + qJDD(1) * pkin(7) - t1097;
t1180 = t1128 * t1079;
t1201 = qJD(1) * qJD(2);
t1011 = qJDD(2) * pkin(2) - t1086 * pkin(8) - t1180 + (pkin(2) * t1179 + pkin(8) * t1201 - g(3)) * t1133;
t1063 = -t1128 * g(3) + t1133 * t1079;
t1116 = t1122 * t1136;
t1015 = -pkin(2) * t1116 + t1087 * pkin(8) - qJD(2) * t1146 + t1063;
t955 = -t1132 * t1011 + t1127 * t1015;
t1140 = pkin(3) * t1228 + qJ(4) * t1233 - t955;
t956 = t1127 * t1011 + t1132 * t1015;
t1141 = -t1073 * pkin(3) + t1019 * qJ(4) - t1120 * t1147 + t956;
t1172 = t1042 * t1224;
t827 = t1123 * t1141 - t1124 * t1140 + t1172;
t1137 = pkin(4) * t1229 + pkin(9) * t936 - t827;
t828 = t1041 * t1224 + t1123 * t1140 + t1124 * t1141;
t789 = -t1038 * pkin(4) - pkin(9) * t1156 - t1120 * t1149 + t828;
t710 = t1126 * t1137 + t1131 * t789;
t917 = pkin(5) * t979 - pkin(10) * t981;
t687 = -pkin(5) * t1226 + pkin(10) * t1112 - t917 * t979 + t710;
t737 = -t842 * pkin(10) + (t1113 * t981 - t867) * pkin(5) - t846;
t654 = t1125 * t737 + t1130 * t687;
t709 = t1126 * t789 - t1131 * t1137;
t657 = t1126 * t710 - t1131 * t709;
t1222 = t1123 * t657;
t1221 = t1123 * t926;
t984 = -t989 + t1119;
t1220 = t1123 * t984;
t1219 = t1124 * t657;
t1218 = t1124 * t926;
t1217 = t1124 * t984;
t686 = -t1112 * pkin(5) - pkin(10) * t1226 + t917 * t981 + t709;
t1216 = t1125 * t686;
t821 = t1144 + t904;
t1215 = t1125 * t821;
t1214 = t1125 * t975;
t1213 = t1126 * t846;
t915 = t921 + t1112;
t1212 = t1126 * t915;
t750 = t1123 * t828 - t1124 * t827;
t1211 = t1127 * t750;
t896 = t1127 * t956 - t1132 * t955;
t1210 = t1128 * t896;
t1209 = t1130 * t686;
t1208 = t1130 * t821;
t1207 = t1130 * t975;
t1206 = t1131 * t846;
t1205 = t1131 * t915;
t1204 = t1132 * t750;
t1203 = t1133 * t896;
t1198 = t1022 * t1127;
t1197 = t1022 * t1132;
t1196 = t1042 * t1120;
t1045 = t1048 + t1119;
t1195 = t1045 * t1127;
t1194 = t1045 * t1132;
t1078 = t1136 * pkin(7) + t1145;
t1193 = t1078 * t1128;
t1192 = t1078 * t1133;
t1107 = t1133 * t1179;
t1094 = qJDD(2) + t1107;
t1191 = t1094 * t1128;
t1095 = qJDD(2) - t1107;
t1190 = t1095 * t1128;
t1189 = t1095 * t1133;
t1188 = t1113 * t1126;
t1187 = t1113 * t1131;
t1186 = t1119 * t1129;
t1185 = t1120 * t1123;
t1184 = t1120 * t1124;
t1183 = t1120 * t1127;
t1182 = t1120 * t1132;
t1121 = t1128 ^ 2;
t1181 = t1121 * t1136;
t1176 = t1121 + t1122;
t1174 = qJDD(1) * t1129;
t1173 = qJDD(1) * t1134;
t1171 = t1126 * t904;
t1170 = t1129 * t921;
t1169 = t1131 * t904;
t1168 = t1134 * t921;
t1167 = -pkin(5) * t1131 - pkin(4);
t1164 = t1129 * t989;
t1163 = t1134 * t989;
t1162 = t1129 * t1048;
t1161 = t1134 * t1048;
t751 = t1123 * t827 + t1124 * t828;
t653 = t1125 * t687 - t1130 * t737;
t658 = t1126 * t709 + t1131 * t710;
t897 = t1127 * t955 + t1132 * t956;
t1062 = t1133 * g(3) + t1180;
t1014 = t1062 * t1128 + t1133 * t1063;
t1054 = -t1096 * t1129 - t1134 * t1097;
t1152 = t1129 * t1107;
t1151 = t1134 * t1107;
t1091 = -t1129 * t1136 + t1173;
t1148 = -pkin(6) * t1091 - g(3) * t1129;
t606 = t1125 * t654 - t1130 * t653;
t607 = t1125 * t653 + t1130 * t654;
t1013 = t1062 * t1133 - t1063 * t1128;
t1053 = t1096 * t1134 - t1097 * t1129;
t932 = t1156 - t1196;
t1135 = qJD(2) ^ 2;
t1108 = t1134 * t1119;
t1105 = -t1116 - t1135;
t1104 = t1116 - t1135;
t1103 = -t1135 - t1181;
t1102 = t1135 - t1181;
t1093 = t1116 - t1181;
t1092 = t1116 + t1181;
t1090 = t1134 * t1136 + t1174;
t1089 = t1176 * qJDD(1);
t1088 = t1114 - 0.2e1 * t1165;
t1085 = 0.2e1 * t1160 + t1175;
t1083 = t1133 * t1094;
t1082 = t1176 * t1201;
t1072 = -pkin(6) * t1090 + g(3) * t1134;
t1067 = -t1074 + t1225;
t1066 = t1073 - t1225;
t1065 = t1086 * t1133 - t1121 * t1201;
t1064 = -t1087 * t1128 - t1122 * t1201;
t1061 = -t1074 - t1225;
t1060 = -t1103 * t1128 - t1189;
t1059 = -t1102 * t1128 + t1083;
t1058 = t1105 * t1133 - t1191;
t1057 = t1104 * t1133 - t1190;
t1056 = t1103 * t1133 - t1190;
t1055 = t1105 * t1128 + t1083;
t1051 = t1089 * t1134 - t1092 * t1129;
t1050 = t1089 * t1129 + t1092 * t1134;
t1049 = -t1085 * t1128 + t1088 * t1133;
t1047 = -t1074 + t1073;
t1033 = t1060 * t1134 + t1085 * t1129;
t1032 = t1058 * t1134 - t1088 * t1129;
t1031 = t1060 * t1129 - t1085 * t1134;
t1030 = t1058 * t1129 + t1088 * t1134;
t1029 = -t1039 + t1225;
t1028 = t1038 - t1225;
t1027 = (-t1075 * t1132 + t1077 * t1127) * t1120;
t1026 = (-t1075 * t1127 - t1077 * t1132) * t1120;
t1025 = -pkin(7) * t1056 - t1192;
t1024 = -pkin(7) * t1055 - t1193;
t1023 = -t1039 - t1225;
t1021 = -t1073 - t1074;
t1018 = -pkin(1) * t1056 + t1063;
t1017 = -pkin(1) * t1055 + t1062;
t1007 = t1066 * t1132 - t1195;
t1006 = -t1067 * t1127 + t1234;
t1005 = t1066 * t1127 + t1194;
t1004 = t1067 * t1132 + t1237;
t1003 = -t1061 * t1127 - t1194;
t1002 = t1061 * t1132 - t1195;
t996 = (qJD(3) + t1120) * t1077 + t1153;
t995 = -t1077 * t1183 - t1132 * t1143;
t994 = t1077 * t1182 - t1127 * t1143;
t993 = -t1019 * t1127 + t1075 * t1182;
t992 = t1019 * t1132 + t1075 * t1183;
t991 = t1014 * t1134 - t1078 * t1129;
t990 = t1014 * t1129 + t1078 * t1134;
t988 = t1043 * t1132 - t1237;
t987 = t1043 * t1127 + t1234;
t986 = -t1039 + t1038;
t982 = -t1225 - t1038;
t971 = -t978 + t1226;
t970 = t977 - t1226;
t969 = (t1041 * t1124 + t1042 * t1123) * t1120;
t968 = (t1041 * t1123 - t1042 * t1124) * t1120;
t967 = -t978 - t1226;
t963 = -t1026 * t1128 + t1027 * t1133;
t954 = -t1038 - t1039;
t952 = -pkin(8) * t1002 - t1197;
t951 = -pkin(8) * t987 - t1198;
t950 = -t1005 * t1128 + t1007 * t1133;
t949 = -t1004 * t1128 + t1006 * t1133;
t948 = t1028 * t1124 - t1220;
t947 = -t1029 * t1123 + t1240;
t946 = t1028 * t1123 + t1217;
t945 = t1029 * t1124 + t1241;
t944 = -t1023 * t1123 - t1217;
t943 = t1023 * t1124 - t1220;
t942 = -t1002 * t1128 + t1003 * t1133;
t941 = t1002 * t1133 + t1003 * t1128;
t940 = -t1127 * t1233 - t1132 * t997;
t939 = -t1127 * t1227 - t1132 * t996;
t938 = -t1127 * t997 + t1132 * t1233;
t937 = -t1127 * t996 + t1132 * t1227;
t931 = t1156 + t1196;
t930 = -t1042 * t1185 + t1124 * t959;
t929 = t1042 * t1184 + t1123 * t959;
t928 = -t1041 * t1184 + t1123 * t1156;
t927 = -t1041 * t1185 - t1124 * t1156;
t925 = -t1128 * t994 + t1133 * t995;
t924 = -t1128 * t992 + t1133 * t993;
t923 = -t1128 * t987 + t1133 * t988;
t922 = t1128 * t988 + t1133 * t987;
t920 = -t978 + t977;
t919 = t1124 * t982 - t1241;
t918 = t1123 * t982 + t1240;
t913 = -t1226 - t977;
t911 = -t962 + t974;
t910 = t961 - t974;
t909 = (t1126 * t981 - t1131 * t979) * t1113;
t908 = (-t1126 * t979 - t1131 * t981) * t1113;
t907 = -pkin(2) * t1227 + pkin(8) * t1003 - t1198;
t906 = -t1127 * t968 + t1132 * t969;
t905 = t1127 * t969 + t1132 * t968;
t903 = -t962 + t961;
t902 = -pkin(2) * t996 + pkin(8) * t988 + t1197;
t900 = t1129 * t1227 + t1134 * t942;
t899 = t1129 * t942 - t1134 * t1227;
t895 = t1129 * t996 + t1134 * t923;
t894 = t1129 * t923 - t1134 * t996;
t893 = -t977 - t978;
t892 = -t962 - t974;
t891 = t1131 * t970 - t1212;
t890 = -t1126 * t971 + t1235;
t889 = t1126 * t970 + t1205;
t888 = t1131 * t971 + t1238;
t887 = -t1127 * t946 + t1132 * t948;
t886 = -t1127 * t945 + t1132 * t947;
t885 = t1127 * t948 + t1132 * t946;
t884 = t1127 * t947 + t1132 * t945;
t883 = -t1126 * t967 - t1205;
t882 = t1131 * t967 - t1212;
t881 = -t974 - t961;
t880 = -t1127 * t943 + t1132 * t944;
t879 = t1127 * t944 + t1132 * t943;
t878 = pkin(2) * t1022 + pkin(8) * t897;
t877 = -t1128 * t938 + t1133 * t940;
t876 = -t1128 * t937 + t1133 * t939;
t875 = t1128 * t940 + t1133 * t938;
t874 = t961 + t962;
t873 = -qJ(4) * t943 - t1218;
t872 = -t1123 * t936 - t1124 * t932;
t871 = -t1123 * t1232 - t1124 * t931;
t870 = -t1123 * t932 + t1124 * t936;
t869 = -t1123 * t931 + t1124 * t1232;
t864 = -t1127 * t929 + t1132 * t930;
t863 = -t1127 * t927 + t1132 * t928;
t862 = t1127 * t930 + t1132 * t929;
t861 = t1127 * t928 + t1132 * t927;
t860 = -pkin(1) * t941 - pkin(2) * t1002 + t956;
t859 = -qJ(4) * t918 - t1221;
t858 = t1021 * t1129 + t1134 * t877;
t857 = -t1021 * t1134 + t1129 * t877;
t856 = -t1127 * t918 + t1132 * t919;
t855 = t1127 * t919 + t1132 * t918;
t854 = t1131 * t913 - t1238;
t853 = t1126 * t913 + t1235;
t852 = -pkin(1) * t922 - pkin(2) * t987 + t955;
t851 = (t1125 * t966 - t1130 * t964) * t975;
t850 = (t1125 * t964 + t1130 * t966) * t975;
t849 = -t1123 * t908 + t1124 * t909;
t848 = t1123 * t909 + t1124 * t908;
t847 = -pkin(8) * t938 - t896;
t845 = -t1128 * t905 + t1133 * t906;
t844 = -t868 - t972;
t839 = (qJD(5) + t1113) * t981 + t1158;
t838 = t1131 * t868 - t1188 * t981;
t837 = t1126 * t868 + t1187 * t981;
t836 = -t1126 * t867 + t1187 * t979;
t835 = t1131 * t867 + t1188 * t979;
t833 = -qJD(6) * t966 - t1157;
t832 = -pkin(2) * t1021 + pkin(8) * t940 + t897;
t831 = -pkin(1) * t875 - pkin(2) * t938;
t830 = -pkin(3) * t1232 + qJ(4) * t944 - t1221;
t829 = -pkin(7) * t941 - t1128 * t907 + t1133 * t952;
t826 = -pkin(3) * t931 + qJ(4) * t919 + t1218;
t825 = t1133 * t897 - t1210;
t824 = t1128 * t897 + t1203;
t819 = -pkin(7) * t922 - t1128 * t902 + t1133 * t951;
t818 = -t1022 * t1129 + t1134 * t825;
t817 = t1022 * t1134 + t1129 * t825;
t816 = -t1123 * t889 + t1124 * t891;
t815 = -t1123 * t888 + t1124 * t890;
t814 = t1123 * t891 + t1124 * t889;
t813 = t1123 * t890 + t1124 * t888;
t812 = -t1128 * t885 + t1133 * t887;
t811 = -t1128 * t884 + t1133 * t886;
t810 = -t1123 * t882 + t1124 * t883;
t809 = t1123 * t883 + t1124 * t882;
t808 = -t1128 * t879 + t1133 * t880;
t807 = t1128 * t880 + t1133 * t879;
t805 = -t912 - t834;
t802 = (-qJD(6) - t975) * t966 - t1157;
t800 = t1130 * t834 - t1214 * t966;
t799 = -t1125 * t834 - t1207 * t966;
t798 = -t1125 * t833 + t1207 * t964;
t797 = -t1130 * t833 - t1214 * t964;
t796 = -t1127 * t870 + t1132 * t872;
t795 = -t1127 * t869 + t1132 * t871;
t794 = t1127 * t872 + t1132 * t870;
t793 = t1127 * t871 + t1132 * t869;
t792 = -t1128 * t862 + t1133 * t864;
t791 = -t1128 * t861 + t1133 * t863;
t790 = -pkin(9) * t882 - t1206;
t787 = t1126 * t1144 + t1131 * t851;
t786 = t1126 * t851 - t1131 * t1144;
t785 = t1130 * t910 - t1215;
t784 = -t1125 * t911 + t1236;
t783 = -t1125 * t910 - t1208;
t782 = -t1130 * t911 - t1239;
t781 = -t1128 * t855 + t1133 * t856;
t780 = t1128 * t856 + t1133 * t855;
t777 = -t1123 * t853 + t1124 * t854;
t776 = t1123 * t854 + t1124 * t853;
t775 = t1129 * t1232 + t1134 * t808;
t774 = t1129 * t808 - t1134 * t1232;
t773 = -pkin(1) * t824 - pkin(2) * t896;
t772 = -pkin(9) * t853 - t1213;
t771 = -t1127 * t848 + t1132 * t849;
t770 = t1127 * t849 + t1132 * t848;
t769 = -t1125 * t892 - t1208;
t768 = t1130 * t892 - t1215;
t767 = t1130 * t881 - t1239;
t766 = t1125 * t881 + t1236;
t765 = -t1126 * t844 - t1131 * t840;
t764 = -t1126 * t842 - t1131 * t839;
t763 = -t1126 * t840 + t1131 * t844;
t762 = -t1126 * t839 + t1131 * t842;
t761 = t1131 * t800 + t1171;
t760 = t1131 * t798 - t1171;
t759 = t1126 * t800 - t1169;
t758 = t1126 * t798 + t1169;
t757 = -t1123 * t837 + t1124 * t838;
t756 = -t1123 * t835 + t1124 * t836;
t755 = t1123 * t838 + t1124 * t837;
t754 = t1123 * t836 + t1124 * t835;
t753 = t1129 * t931 + t1134 * t781;
t752 = t1129 * t781 - t1134 * t931;
t749 = -pkin(7) * t824 - pkin(8) * t1203 - t1128 * t878;
t748 = -pkin(8) * t879 - t1127 * t830 + t1132 * t873;
t747 = -pkin(4) * t842 + pkin(9) * t883 - t1213;
t746 = -pkin(7) * t875 - t1128 * t832 + t1133 * t847;
t745 = -t1127 * t814 + t1132 * t816;
t744 = -t1127 * t813 + t1132 * t815;
t743 = t1127 * t816 + t1132 * t814;
t742 = t1127 * t815 + t1132 * t813;
t741 = pkin(3) * t926 + qJ(4) * t751;
t740 = -t1127 * t809 + t1132 * t810;
t739 = t1127 * t810 + t1132 * t809;
t738 = -pkin(4) * t839 + pkin(9) * t854 + t1206;
t736 = -pkin(8) * t855 - t1127 * t826 + t1132 * t859;
t733 = -pkin(2) * t1232 + pkin(8) * t880 + t1127 * t873 + t1132 * t830;
t732 = -t1125 * t805 - t1130 * t801;
t731 = -t1125 * t804 + t1130 * t802;
t730 = -t1125 * t801 + t1130 * t805;
t729 = -t1125 * t802 - t1130 * t804;
t728 = -t1128 * t794 + t1133 * t796;
t727 = -t1128 * t793 + t1133 * t795;
t726 = t1128 * t796 + t1133 * t794;
t725 = -qJ(4) * t870 - t750;
t724 = -t1126 * t801 + t1131 * t785;
t723 = -t1126 * t805 + t1131 * t784;
t722 = t1126 * t785 + t1131 * t801;
t721 = t1126 * t784 + t1131 * t805;
t720 = -pkin(2) * t931 + pkin(8) * t856 + t1127 * t859 + t1132 * t826;
t719 = t1129 * t954 + t1134 * t728;
t718 = t1129 * t728 - t1134 * t954;
t717 = -t1123 * t786 + t1124 * t787;
t716 = t1123 * t787 + t1124 * t786;
t715 = t1126 * t804 + t1131 * t769;
t714 = t1126 * t769 - t1131 * t804;
t713 = -t1126 * t802 + t1131 * t767;
t712 = t1126 * t767 + t1131 * t802;
t711 = -pkin(3) * t954 + qJ(4) * t872 + t751;
t707 = -t1126 * t903 + t1131 * t731;
t706 = t1126 * t731 + t1131 * t903;
t705 = -t1127 * t776 + t1132 * t777;
t704 = t1127 * t777 + t1132 * t776;
t703 = -pkin(1) * t807 - pkin(2) * t879 - pkin(3) * t943 + t828;
t702 = -t1126 * t874 + t1131 * t732;
t701 = t1126 * t732 + t1131 * t874;
t700 = -t1128 * t770 + t1133 * t771;
t699 = -t1123 * t763 + t1124 * t765;
t698 = -t1123 * t762 + t1124 * t764;
t697 = t1123 * t765 + t1124 * t763;
t696 = t1123 * t764 + t1124 * t762;
t695 = -t1123 * t759 + t1124 * t761;
t694 = -t1123 * t758 + t1124 * t760;
t693 = t1123 * t761 + t1124 * t759;
t692 = t1123 * t760 + t1124 * t758;
t691 = -t1127 * t755 + t1132 * t757;
t690 = -t1127 * t754 + t1132 * t756;
t689 = t1127 * t757 + t1132 * t755;
t688 = t1127 * t756 + t1132 * t754;
t684 = -pkin(1) * t780 - pkin(2) * t855 + t1123 * t956 + t1124 * t955 + t1172 + (t1123 * (t1077 * t1120 + t1019) - t1124 * t1233) * qJ(4) + (t1043 * t1123 - t1124 * t1228 - t918) * pkin(3);
t683 = t1132 * t751 - t1211;
t682 = t1127 * t751 + t1204;
t681 = -pkin(1) * t726 - pkin(2) * t794 - pkin(3) * t870;
t680 = -t1128 * t743 + t1133 * t745;
t679 = -t1128 * t742 + t1133 * t744;
t678 = -t1128 * t739 + t1133 * t740;
t677 = t1128 * t740 + t1133 * t739;
t676 = -qJ(4) * t809 - t1123 * t747 + t1124 * t790;
t675 = -pkin(10) * t768 + t1209;
t674 = -pkin(10) * t766 + t1216;
t673 = -t1123 * t722 + t1124 * t724;
t672 = -t1123 * t721 + t1124 * t723;
t671 = t1123 * t724 + t1124 * t722;
t670 = t1123 * t723 + t1124 * t721;
t669 = -qJ(4) * t776 - t1123 * t738 + t1124 * t772;
t668 = t1129 * t842 + t1134 * t678;
t667 = t1129 * t678 - t1134 * t842;
t666 = -pkin(3) * t842 + qJ(4) * t810 + t1123 * t790 + t1124 * t747;
t665 = -t1127 * t716 + t1132 * t717;
t664 = t1127 * t717 + t1132 * t716;
t663 = -t1123 * t714 + t1124 * t715;
t662 = t1123 * t715 + t1124 * t714;
t661 = -t1123 * t712 + t1124 * t713;
t660 = t1123 * t713 + t1124 * t712;
t659 = -pkin(7) * t807 - t1128 * t733 + t1133 * t748;
t656 = -t1123 * t706 + t1124 * t707;
t655 = t1123 * t707 + t1124 * t706;
t652 = -t1128 * t704 + t1133 * t705;
t651 = t1128 * t705 + t1133 * t704;
t650 = -t1123 * t701 + t1124 * t702;
t649 = t1123 * t702 + t1124 * t701;
t648 = -pkin(3) * t839 + qJ(4) * t777 + t1123 * t772 + t1124 * t738;
t647 = -t1127 * t697 + t1132 * t699;
t646 = -t1127 * t696 + t1132 * t698;
t645 = t1127 * t699 + t1132 * t697;
t644 = t1127 * t698 + t1132 * t696;
t643 = pkin(4) * t846 + pkin(9) * t658;
t642 = -pkin(7) * t780 - t1128 * t720 + t1133 * t736;
t641 = -t1127 * t693 + t1132 * t695;
t640 = -t1127 * t692 + t1132 * t694;
t639 = t1127 * t695 + t1132 * t693;
t638 = t1127 * t694 + t1132 * t692;
t637 = -t1128 * t689 + t1133 * t691;
t636 = -t1128 * t688 + t1133 * t690;
t635 = -pkin(8) * t794 - t1127 * t711 + t1132 * t725;
t634 = t1129 * t839 + t1134 * t652;
t633 = t1129 * t652 - t1134 * t839;
t632 = -pkin(2) * t954 + pkin(8) * t796 + t1127 * t725 + t1132 * t711;
t631 = -pkin(9) * t763 - t657;
t630 = -pkin(5) * t768 + t654;
t629 = -pkin(5) * t766 + t653;
t628 = -pkin(4) * t893 + pkin(9) * t765 + t658;
t627 = -t1128 * t682 + t1133 * t683;
t626 = t1128 * t683 + t1133 * t682;
t625 = -pkin(8) * t682 - qJ(4) * t1204 - t1127 * t741;
t624 = -t1129 * t926 + t1134 * t627;
t623 = t1129 * t627 + t1134 * t926;
t622 = pkin(2) * t926 + pkin(8) * t683 - qJ(4) * t1211 + t1132 * t741;
t621 = -t1127 * t671 + t1132 * t673;
t620 = -t1127 * t670 + t1132 * t672;
t619 = t1127 * t673 + t1132 * t671;
t618 = t1127 * t672 + t1132 * t670;
t617 = -t1128 * t664 + t1133 * t665;
t616 = -t1127 * t662 + t1132 * t663;
t615 = t1127 * t663 + t1132 * t662;
t614 = -t1127 * t660 + t1132 * t661;
t613 = t1127 * t661 + t1132 * t660;
t612 = t1124 * t658 - t1222;
t611 = t1123 * t658 + t1219;
t610 = -t1127 * t655 + t1132 * t656;
t609 = t1127 * t656 + t1132 * t655;
t608 = -pkin(1) * t677 - pkin(2) * t739 - pkin(3) * t809 - pkin(4) * t882 + t710;
t605 = -t1127 * t649 + t1132 * t650;
t604 = t1127 * t650 + t1132 * t649;
t603 = -pkin(8) * t739 - t1127 * t666 + t1132 * t676;
t602 = -t1128 * t645 + t1133 * t647;
t601 = -t1128 * t644 + t1133 * t646;
t600 = t1128 * t647 + t1133 * t645;
t599 = -t1128 * t639 + t1133 * t641;
t598 = -t1128 * t638 + t1133 * t640;
t597 = -pkin(2) * t842 + pkin(8) * t740 + t1127 * t676 + t1132 * t666;
t596 = t1129 * t893 + t1134 * t602;
t595 = t1129 * t602 - t1134 * t893;
t594 = -pkin(1) * t626 - pkin(2) * t682 - pkin(3) * t750;
t593 = -pkin(1) * t651 - pkin(2) * t704 - pkin(3) * t776 - pkin(4) * t853 + t709;
t592 = -pkin(10) * t730 - t606;
t591 = -pkin(8) * t704 - t1127 * t648 + t1132 * t669;
t590 = t1126 * t686 + t1131 * t607;
t589 = t1126 * t607 - t1131 * t686;
t588 = -pkin(9) * t714 - t1126 * t630 + t1131 * t675;
t587 = -pkin(9) * t712 - t1126 * t629 + t1131 * t674;
t586 = -pkin(2) * t839 + pkin(8) * t705 + t1127 * t669 + t1132 * t648;
t585 = -pkin(7) * t726 - t1128 * t632 + t1133 * t635;
t584 = -pkin(4) * t768 + pkin(9) * t715 + t1126 * t675 + t1131 * t630;
t583 = -pkin(4) * t766 + pkin(9) * t713 + t1126 * t674 + t1131 * t629;
t582 = -qJ(4) * t697 - t1123 * t628 + t1124 * t631;
t581 = -pkin(3) * t893 + qJ(4) * t699 + t1123 * t631 + t1124 * t628;
t580 = -pkin(9) * t701 + t1131 * t592 + t1223 * t730;
t579 = -t1128 * t619 + t1133 * t621;
t578 = -t1128 * t618 + t1133 * t620;
t577 = pkin(9) * t702 + t1126 * t592 + t1167 * t730;
t576 = -t1128 * t615 + t1133 * t616;
t575 = t1128 * t616 + t1133 * t615;
t574 = -t1128 * t613 + t1133 * t614;
t573 = t1128 * t614 + t1133 * t613;
t572 = -t1127 * t611 + t1132 * t612;
t571 = t1127 * t612 + t1132 * t611;
t570 = -t1128 * t609 + t1133 * t610;
t569 = -pkin(9) * t1219 - qJ(4) * t611 - t1123 * t643;
t568 = t1129 * t768 + t1134 * t576;
t567 = t1129 * t576 - t1134 * t768;
t566 = -pkin(1) * t600 - pkin(2) * t645 - pkin(3) * t697 - pkin(4) * t763;
t565 = t1129 * t766 + t1134 * t574;
t564 = t1129 * t574 - t1134 * t766;
t563 = pkin(3) * t846 - pkin(9) * t1222 + qJ(4) * t612 + t1124 * t643;
t562 = -t1128 * t604 + t1133 * t605;
t561 = t1128 * t605 + t1133 * t604;
t560 = -pkin(7) * t626 - t1128 * t622 + t1133 * t625;
t559 = t1129 * t730 + t1134 * t562;
t558 = t1129 * t562 - t1134 * t730;
t557 = -t1123 * t589 + t1124 * t590;
t556 = t1123 * t590 + t1124 * t589;
t555 = -pkin(7) * t677 - t1128 * t597 + t1133 * t603;
t554 = -pkin(7) * t651 - t1128 * t586 + t1133 * t591;
t553 = -qJ(4) * t662 - t1123 * t584 + t1124 * t588;
t552 = -qJ(4) * t660 - t1123 * t583 + t1124 * t587;
t551 = -pkin(9) * t589 + (-pkin(10) * t1131 + t1223) * t606;
t550 = -pkin(3) * t768 + qJ(4) * t663 + t1123 * t588 + t1124 * t584;
t549 = -pkin(3) * t766 + qJ(4) * t661 + t1123 * t587 + t1124 * t583;
t548 = -pkin(8) * t645 - t1127 * t581 + t1132 * t582;
t547 = -pkin(2) * t893 + pkin(8) * t647 + t1127 * t582 + t1132 * t581;
t546 = -t1128 * t571 + t1133 * t572;
t545 = t1128 * t572 + t1133 * t571;
t544 = -t1129 * t846 + t1134 * t546;
t543 = t1129 * t546 + t1134 * t846;
t542 = -qJ(4) * t649 - t1123 * t577 + t1124 * t580;
t541 = -pkin(1) * t575 - pkin(2) * t615 - pkin(3) * t662 - pkin(4) * t714 + pkin(5) * t804 - pkin(10) * t769 - t1216;
t540 = -pkin(1) * t573 - pkin(2) * t613 - pkin(3) * t660 - pkin(4) * t712 - pkin(5) * t802 - pkin(10) * t767 + t1209;
t539 = pkin(9) * t590 + (-pkin(10) * t1126 + t1167) * t606;
t538 = -pkin(3) * t730 + qJ(4) * t650 + t1123 * t580 + t1124 * t577;
t537 = -t1127 * t556 + t1132 * t557;
t536 = t1127 * t557 + t1132 * t556;
t535 = -pkin(1) * t561 - pkin(2) * t604 - pkin(3) * t649 - pkin(4) * t701 - pkin(5) * t874 - pkin(10) * t732 - t607;
t534 = -pkin(8) * t571 - t1127 * t563 + t1132 * t569;
t533 = pkin(2) * t846 + pkin(8) * t572 + t1127 * t569 + t1132 * t563;
t532 = -pkin(1) * t545 - pkin(2) * t571 - pkin(3) * t611 - pkin(4) * t657;
t531 = -pkin(8) * t615 - t1127 * t550 + t1132 * t553;
t530 = -pkin(8) * t613 - t1127 * t549 + t1132 * t552;
t529 = -pkin(2) * t768 + pkin(8) * t616 + t1127 * t553 + t1132 * t550;
t528 = -pkin(2) * t766 + pkin(8) * t614 + t1127 * t552 + t1132 * t549;
t527 = -pkin(7) * t600 - t1128 * t547 + t1133 * t548;
t526 = -pkin(8) * t604 - t1127 * t538 + t1132 * t542;
t525 = -pkin(2) * t730 + pkin(8) * t605 + t1127 * t542 + t1132 * t538;
t524 = -qJ(4) * t556 - t1123 * t539 + t1124 * t551;
t523 = -t1128 * t536 + t1133 * t537;
t522 = t1128 * t537 + t1133 * t536;
t521 = -pkin(3) * t606 + qJ(4) * t557 + t1123 * t551 + t1124 * t539;
t520 = t1129 * t606 + t1134 * t523;
t519 = t1129 * t523 - t1134 * t606;
t518 = -pkin(7) * t545 - t1128 * t533 + t1133 * t534;
t517 = -pkin(7) * t575 - t1128 * t529 + t1133 * t531;
t516 = -pkin(7) * t573 - t1128 * t528 + t1133 * t530;
t515 = -pkin(1) * t522 - pkin(2) * t536 - pkin(3) * t556 - pkin(4) * t589 + pkin(5) * t686 - pkin(10) * t607;
t514 = -pkin(7) * t561 - t1128 * t525 + t1133 * t526;
t513 = -pkin(8) * t536 - t1127 * t521 + t1132 * t524;
t512 = -pkin(2) * t606 + pkin(8) * t537 + t1127 * t524 + t1132 * t521;
t511 = -pkin(7) * t522 - t1128 * t512 + t1133 * t513;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1090, -t1091, 0, t1054, 0, 0, 0, 0, 0, 0, t1032, t1033, t1051, t991, 0, 0, 0, 0, 0, 0, t895, t900, t858, t818, 0, 0, 0, 0, 0, 0, t753, t775, t719, t624, 0, 0, 0, 0, 0, 0, t634, t668, t596, t544, 0, 0, 0, 0, 0, 0, t565, t568, t559, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1091, -t1090, 0, t1053, 0, 0, 0, 0, 0, 0, t1030, t1031, t1050, t990, 0, 0, 0, 0, 0, 0, t894, t899, t857, t817, 0, 0, 0, 0, 0, 0, t752, t774, t718, t623, 0, 0, 0, 0, 0, 0, t633, t667, t595, t543, 0, 0, 0, 0, 0, 0, t564, t567, t558, t519; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1055, t1056, 0, -t1013, 0, 0, 0, 0, 0, 0, t922, t941, t875, t824, 0, 0, 0, 0, 0, 0, t780, t807, t726, t626, 0, 0, 0, 0, 0, 0, t651, t677, t600, t545, 0, 0, 0, 0, 0, 0, t573, t575, t561, t522; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1091, 0, -t1090, 0, t1148, -t1072, -t1053, -pkin(6) * t1053, t1065 * t1134 - t1152, t1049 * t1134 - t1093 * t1129, t1059 * t1134 + t1128 * t1174, t1064 * t1134 + t1152, t1057 * t1134 + t1114 * t1129, qJDD(2) * t1129 + t1082 * t1134, -pkin(6) * t1030 - t1017 * t1129 + t1024 * t1134, -pkin(6) * t1031 - t1018 * t1129 + t1025 * t1134, -pkin(6) * t1050 + t1013 * t1134, -pkin(6) * t990 - (pkin(1) * t1129 - pkin(7) * t1134) * t1013, t1134 * t925 + t1162, -t1047 * t1129 + t1134 * t876, -t1129 * t1233 + t1134 * t949, t1134 * t924 - t1162, -t1129 * t997 + t1134 * t950, t1134 * t963 + t1186, -pkin(6) * t894 - t1129 * t852 + t1134 * t819, -pkin(6) * t899 - t1129 * t860 + t1134 * t829, -pkin(6) * t857 - t1129 * t831 + t1134 * t746, -pkin(6) * t817 - t1129 * t773 + t1134 * t749, t1134 * t792 - t1164, -t1129 * t986 + t1134 * t727, -t1129 * t936 + t1134 * t811, t1134 * t791 + t1164, -t1129 * t932 + t1134 * t812, t1134 * t845 + t1186, -pkin(6) * t752 - t1129 * t684 + t1134 * t642, -pkin(6) * t774 - t1129 * t703 + t1134 * t659, -pkin(6) * t718 - t1129 * t681 + t1134 * t585, -pkin(6) * t623 - t1129 * t594 + t1134 * t560, t1134 * t637 + t1170, -t1129 * t920 + t1134 * t601, -t1129 * t844 + t1134 * t679, t1134 * t636 - t1170, -t1129 * t840 + t1134 * t680, t1112 * t1129 + t1134 * t700, -pkin(6) * t633 - t1129 * t593 + t1134 * t554, -pkin(6) * t667 - t1129 * t608 + t1134 * t555, -pkin(6) * t595 - t1129 * t566 + t1134 * t527, -pkin(6) * t543 - t1129 * t532 + t1134 * t518, -t1129 * t799 + t1134 * t599, -t1129 * t729 + t1134 * t570, -t1129 * t782 + t1134 * t578, -t1129 * t797 + t1134 * t598, -t1129 * t783 + t1134 * t579, -t1129 * t850 + t1134 * t617, -pkin(6) * t564 - t1129 * t540 + t1134 * t516, -pkin(6) * t567 - t1129 * t541 + t1134 * t517, -pkin(6) * t558 - t1129 * t535 + t1134 * t514, -pkin(6) * t519 - t1129 * t515 + t1134 * t511; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1090, 0, t1091, 0, t1072, t1148, t1054, pkin(6) * t1054, t1065 * t1129 + t1151, t1049 * t1129 + t1093 * t1134, t1059 * t1129 - t1128 * t1173, t1064 * t1129 - t1151, t1057 * t1129 - t1114 * t1134, -qJDD(2) * t1134 + t1082 * t1129, pkin(6) * t1032 + t1017 * t1134 + t1024 * t1129, pkin(6) * t1033 + t1018 * t1134 + t1025 * t1129, pkin(6) * t1051 + t1013 * t1129, pkin(6) * t991 - (-pkin(1) * t1134 - pkin(7) * t1129) * t1013, t1129 * t925 - t1161, t1047 * t1134 + t1129 * t876, t1129 * t949 + t1134 * t1233, t1129 * t924 + t1161, t1129 * t950 + t1134 * t997, t1129 * t963 - t1108, pkin(6) * t895 + t1129 * t819 + t1134 * t852, pkin(6) * t900 + t1129 * t829 + t1134 * t860, pkin(6) * t858 + t1129 * t746 + t1134 * t831, pkin(6) * t818 + t1129 * t749 + t1134 * t773, t1129 * t792 + t1163, t1129 * t727 + t1134 * t986, t1129 * t811 + t1134 * t936, t1129 * t791 - t1163, t1129 * t812 + t1134 * t932, t1129 * t845 - t1108, pkin(6) * t753 + t1129 * t642 + t1134 * t684, pkin(6) * t775 + t1129 * t659 + t1134 * t703, pkin(6) * t719 + t1129 * t585 + t1134 * t681, pkin(6) * t624 + t1129 * t560 + t1134 * t594, t1129 * t637 - t1168, t1129 * t601 + t1134 * t920, t1129 * t679 + t1134 * t844, t1129 * t636 + t1168, t1129 * t680 + t1134 * t840, -t1112 * t1134 + t1129 * t700, pkin(6) * t634 + t1129 * t554 + t1134 * t593, pkin(6) * t668 + t1129 * t555 + t1134 * t608, pkin(6) * t596 + t1129 * t527 + t1134 * t566, pkin(6) * t544 + t1129 * t518 + t1134 * t532, t1129 * t599 + t1134 * t799, t1129 * t570 + t1134 * t729, t1129 * t578 + t1134 * t782, t1129 * t598 + t1134 * t797, t1129 * t579 + t1134 * t783, t1129 * t617 + t1134 * t850, pkin(6) * t565 + t1129 * t516 + t1134 * t540, pkin(6) * t568 + t1129 * t517 + t1134 * t541, pkin(6) * t559 + t1129 * t514 + t1134 * t535, pkin(6) * t520 + t1129 * t511 + t1134 * t515; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1096, t1097, 0, 0, (t1086 + t1160) * t1128, t1085 * t1133 + t1088 * t1128, t1102 * t1133 + t1191, (t1087 - t1165) * t1133, t1104 * t1128 + t1189, 0, pkin(1) * t1088 + pkin(7) * t1058 + t1192, -pkin(1) * t1085 + pkin(7) * t1060 - t1193, pkin(1) * t1092 + pkin(7) * t1089 + t1014, pkin(1) * t1078 + pkin(7) * t1014, t1128 * t995 + t1133 * t994, t1128 * t939 + t1133 * t937, t1004 * t1133 + t1006 * t1128, t1128 * t993 + t1133 * t992, t1005 * t1133 + t1007 * t1128, t1026 * t1133 + t1027 * t1128, -pkin(1) * t996 + pkin(7) * t923 + t1128 * t951 + t1133 * t902, -pkin(1) * t1227 + pkin(7) * t942 + t1128 * t952 + t1133 * t907, -pkin(1) * t1021 + pkin(7) * t877 + t1128 * t847 + t1133 * t832, pkin(1) * t1022 + pkin(7) * t825 - pkin(8) * t1210 + t1133 * t878, t1128 * t864 + t1133 * t862, t1128 * t795 + t1133 * t793, t1128 * t886 + t1133 * t884, t1128 * t863 + t1133 * t861, t1128 * t887 + t1133 * t885, t1128 * t906 + t1133 * t905, -pkin(1) * t931 + pkin(7) * t781 + t1128 * t736 + t1133 * t720, -pkin(1) * t1232 + pkin(7) * t808 + t1128 * t748 + t1133 * t733, -pkin(1) * t954 + pkin(7) * t728 + t1128 * t635 + t1133 * t632, pkin(1) * t926 + pkin(7) * t627 + t1128 * t625 + t1133 * t622, t1128 * t691 + t1133 * t689, t1128 * t646 + t1133 * t644, t1128 * t744 + t1133 * t742, t1128 * t690 + t1133 * t688, t1128 * t745 + t1133 * t743, t1128 * t771 + t1133 * t770, -pkin(1) * t839 + pkin(7) * t652 + t1128 * t591 + t1133 * t586, -pkin(1) * t842 + pkin(7) * t678 + t1128 * t603 + t1133 * t597, -pkin(1) * t893 + pkin(7) * t602 + t1128 * t548 + t1133 * t547, pkin(1) * t846 + pkin(7) * t546 + t1128 * t534 + t1133 * t533, t1128 * t641 + t1133 * t639, t1128 * t610 + t1133 * t609, t1128 * t620 + t1133 * t618, t1128 * t640 + t1133 * t638, t1128 * t621 + t1133 * t619, t1128 * t665 + t1133 * t664, -pkin(1) * t766 + pkin(7) * t574 + t1128 * t530 + t1133 * t528, -pkin(1) * t768 + pkin(7) * t576 + t1128 * t531 + t1133 * t529, -pkin(1) * t730 + pkin(7) * t562 + t1128 * t526 + t1133 * t525, -pkin(1) * t606 + pkin(7) * t523 + t1128 * t513 + t1133 * t512;];
tauB_reg  = t1;
