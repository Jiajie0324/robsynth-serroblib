% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 09:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 09:47:20
% EndTime: 2019-05-07 09:47:33
% DurationCPUTime: 13.37s
% Computational Cost: add. (121923->342), mult. (285973->485), div. (0->0), fcn. (220522->12), ass. (0->272)
t2304 = cos(qJ(2));
t2288 = t2304 * qJDD(1);
t2299 = sin(qJ(2));
t2346 = qJD(1) * t2299;
t2327 = qJD(2) * t2346;
t2267 = t2288 - t2327;
t2293 = t2304 ^ 2;
t2307 = qJD(1) ^ 2;
t2300 = sin(qJ(1));
t2305 = cos(qJ(1));
t2275 = t2300 * g(1) - t2305 * g(2);
t2314 = qJDD(1) * pkin(1) + t2275;
t2315 = qJD(2) * pkin(2) - pkin(8) * t2346;
t2235 = t2267 * pkin(2) - t2315 * t2346 + t2314 + (pkin(8) * t2293 + pkin(7)) * t2307;
t2298 = sin(qJ(3));
t2303 = cos(qJ(3));
t2260 = (t2298 * t2304 + t2299 * t2303) * qJD(1);
t2345 = qJD(1) * t2304;
t2326 = qJD(2) * t2345;
t2330 = t2299 * qJDD(1);
t2266 = t2326 + t2330;
t2321 = t2298 * t2266 - t2303 * t2267;
t2232 = -qJD(3) * t2260 - t2321;
t2258 = t2298 * t2346 - t2303 * t2345;
t2257 = t2258 ^ 2;
t2291 = qJD(2) + qJD(3);
t2318 = pkin(3) * t2291 - qJ(4) * t2260;
t2186 = t2232 * pkin(3) + t2257 * qJ(4) - t2260 * t2318 - qJDD(4) + t2235;
t2316 = -t2303 * t2266 - t2298 * t2267;
t2233 = -qJD(3) * t2258 - t2316;
t2294 = sin(pkin(11));
t2295 = cos(pkin(11));
t2201 = t2295 * t2232 - t2233 * t2294;
t2242 = -t2258 * t2295 - t2294 * t2260;
t2240 = t2242 ^ 2;
t2243 = -t2258 * t2294 + t2260 * t2295;
t2319 = pkin(4) * t2291 - pkin(9) * t2243;
t2153 = t2201 * pkin(4) + t2240 * pkin(9) - t2243 * t2319 + t2186;
t2297 = sin(qJ(5));
t2302 = cos(qJ(5));
t2210 = -t2302 * t2242 + t2243 * t2297;
t2208 = qJD(6) + t2210;
t2356 = qJD(6) + t2208;
t2212 = t2242 * t2297 + t2243 * t2302;
t2287 = qJD(5) + t2291;
t2296 = sin(qJ(6));
t2301 = cos(qJ(6));
t2203 = t2212 * t2296 - t2301 * t2287;
t2355 = t2203 ^ 2;
t2205 = t2212 * t2301 + t2287 * t2296;
t2354 = t2205 ^ 2;
t2353 = t2208 ^ 2;
t2352 = t2210 ^ 2;
t2351 = t2212 ^ 2;
t2350 = t2243 ^ 2;
t2349 = t2260 ^ 2;
t2348 = t2287 ^ 2;
t2347 = t2291 ^ 2;
t2344 = t2203 * t2205;
t2343 = t2210 * t2212;
t2342 = t2242 * t2243;
t2341 = t2243 * t2291;
t2340 = t2258 * t2260;
t2339 = t2291 * t2242;
t2338 = t2291 * t2258;
t2337 = t2293 * t2307;
t2276 = -g(1) * t2305 - g(2) * t2300;
t2262 = -pkin(1) * t2307 + qJDD(1) * pkin(7) + t2276;
t2336 = t2299 * t2262;
t2335 = t2299 * t2307;
t2334 = qJD(3) - t2291;
t2333 = qJD(5) - t2287;
t2332 = qJD(6) - t2208;
t2227 = qJDD(2) * pkin(2) - t2266 * pkin(8) - t2336 + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2335 - g(3)) * t2304;
t2253 = -t2299 * g(3) + t2304 * t2262;
t2230 = -pkin(2) * t2337 + t2267 * pkin(8) - qJD(2) * t2315 + t2253;
t2198 = t2303 * t2227 - t2298 * t2230;
t2329 = qJDD(2) + qJDD(3);
t2245 = t2329 - t2340;
t2174 = (-t2233 - t2338) * qJ(4) + t2245 * pkin(3) + t2198;
t2199 = t2298 * t2227 + t2303 * t2230;
t2176 = -t2257 * pkin(3) + t2232 * qJ(4) - t2291 * t2318 + t2199;
t2148 = 0.2e1 * qJD(4) * t2242 + t2294 * t2174 + t2295 * t2176;
t2132 = -t2240 * pkin(4) + t2201 * pkin(9) - t2291 * t2319 + t2148;
t2147 = -0.2e1 * qJD(4) * t2243 + t2295 * t2174 - t2294 * t2176;
t2202 = t2232 * t2294 + t2233 * t2295;
t2190 = -t2202 + t2339;
t2214 = t2329 + t2342;
t2309 = pkin(4) * t2214 + pkin(9) * t2190 + t2147;
t2105 = t2302 * t2132 + t2297 * t2309;
t2292 = t2299 ^ 2;
t2331 = t2292 + t2293;
t2325 = qJDD(5) + t2329;
t2104 = -t2132 * t2297 + t2302 * t2309;
t2317 = -t2297 * t2201 - t2302 * t2202;
t2158 = -qJD(5) * t2210 - t2317;
t2324 = t2287 * t2210 - t2158;
t2323 = -t2296 * t2158 + t2301 * t2325;
t2322 = -t2302 * t2201 + t2297 * t2202;
t2313 = -qJD(5) * t2212 - qJDD(6) - t2322;
t2149 = (qJD(5) + t2287) * t2212 + t2322;
t2312 = -t2301 * t2158 - t2296 * t2325;
t2306 = qJD(2) ^ 2;
t2283 = t2304 * t2335;
t2281 = -t2306 - t2337;
t2280 = -t2292 * t2307 - t2306;
t2274 = -qJDD(2) + t2283;
t2273 = qJDD(2) + t2283;
t2272 = t2331 * t2307;
t2271 = -qJDD(1) * t2300 - t2305 * t2307;
t2270 = qJDD(1) * t2305 - t2300 * t2307;
t2269 = t2331 * qJDD(1);
t2268 = t2288 - 0.2e1 * t2327;
t2265 = 0.2e1 * t2326 + t2330;
t2261 = t2307 * pkin(7) + t2314;
t2252 = -t2304 * g(3) - t2336;
t2251 = -t2347 - t2349;
t2250 = t2274 * t2304 - t2280 * t2299;
t2249 = -t2273 * t2299 + t2281 * t2304;
t2248 = t2274 * t2299 + t2280 * t2304;
t2247 = t2273 * t2304 + t2281 * t2299;
t2246 = -t2329 - t2340;
t2244 = -t2347 - t2257;
t2236 = -t2347 - t2350;
t2234 = -t2257 - t2349;
t2229 = -t2252 * t2299 + t2253 * t2304;
t2228 = t2252 * t2304 + t2253 * t2299;
t2223 = t2246 * t2303 - t2251 * t2298;
t2222 = t2246 * t2298 + t2251 * t2303;
t2221 = t2258 * t2334 + t2316;
t2220 = t2233 - t2338;
t2219 = -t2260 * t2334 - t2321;
t2218 = (qJD(3) + t2291) * t2260 + t2321;
t2217 = t2244 * t2303 - t2245 * t2298;
t2216 = t2244 * t2298 + t2245 * t2303;
t2215 = -t2329 + t2342;
t2213 = -t2347 - t2240;
t2206 = -t2348 - t2351;
t2197 = -t2240 - t2350;
t2196 = t2215 * t2295 - t2236 * t2294;
t2195 = t2215 * t2294 + t2236 * t2295;
t2194 = -t2222 * t2299 + t2223 * t2304;
t2193 = t2222 * t2304 + t2223 * t2299;
t2192 = t2219 * t2303 - t2221 * t2298;
t2191 = t2219 * t2298 + t2221 * t2303;
t2189 = t2202 + t2339;
t2188 = t2201 + t2341;
t2187 = -t2201 + t2341;
t2185 = -t2216 * t2299 + t2217 * t2304;
t2184 = t2216 * t2304 + t2217 * t2299;
t2183 = t2213 * t2295 - t2214 * t2294;
t2182 = t2213 * t2294 + t2214 * t2295;
t2181 = pkin(5) * t2210 - pkin(10) * t2212;
t2180 = -t2325 - t2343;
t2179 = t2325 - t2343;
t2178 = -t2348 - t2352;
t2172 = -t2198 * t2298 + t2199 * t2303;
t2171 = t2198 * t2303 + t2199 * t2298;
t2170 = -t2351 - t2352;
t2169 = -t2353 - t2354;
t2168 = t2180 * t2302 - t2206 * t2297;
t2167 = t2180 * t2297 + t2206 * t2302;
t2166 = -t2353 - t2355;
t2165 = -t2195 * t2298 + t2196 * t2303;
t2164 = t2195 * t2303 + t2196 * t2298;
t2163 = -t2191 * t2299 + t2192 * t2304;
t2162 = t2191 * t2304 + t2192 * t2299;
t2161 = -t2354 - t2355;
t2160 = t2188 * t2295 - t2190 * t2294;
t2159 = t2188 * t2294 + t2190 * t2295;
t2157 = -t2182 * t2298 + t2183 * t2303;
t2156 = t2182 * t2303 + t2183 * t2298;
t2155 = t2178 * t2302 - t2179 * t2297;
t2154 = t2178 * t2297 + t2179 * t2302;
t2152 = t2210 * t2333 + t2317;
t2150 = -t2212 * t2333 - t2322;
t2146 = -t2171 * t2299 + t2172 * t2304;
t2145 = t2171 * t2304 + t2172 * t2299;
t2144 = t2313 - t2344;
t2143 = -t2313 - t2344;
t2142 = -t2167 * t2294 + t2168 * t2295;
t2141 = t2167 * t2295 + t2168 * t2294;
t2140 = -t2164 * t2299 + t2165 * t2304;
t2139 = t2164 * t2304 + t2165 * t2299;
t2138 = t2203 * t2332 + t2312;
t2137 = -t2203 * t2356 - t2312;
t2136 = -t2205 * t2332 + t2323;
t2135 = t2205 * t2356 - t2323;
t2134 = -t2159 * t2298 + t2160 * t2303;
t2133 = t2159 * t2303 + t2160 * t2298;
t2130 = -t2156 * t2299 + t2157 * t2304;
t2129 = t2156 * t2304 + t2157 * t2299;
t2126 = -t2154 * t2294 + t2155 * t2295;
t2125 = t2154 * t2295 + t2155 * t2294;
t2124 = t2144 * t2301 - t2169 * t2296;
t2123 = t2144 * t2296 + t2169 * t2301;
t2122 = -t2143 * t2296 + t2166 * t2301;
t2121 = t2143 * t2301 + t2166 * t2296;
t2120 = t2150 * t2302 - t2152 * t2297;
t2119 = t2150 * t2297 + t2152 * t2302;
t2118 = -t2147 * t2294 + t2148 * t2295;
t2117 = t2147 * t2295 + t2148 * t2294;
t2116 = -t2141 * t2298 + t2142 * t2303;
t2115 = t2141 * t2303 + t2142 * t2298;
t2114 = pkin(5) * t2149 + pkin(10) * t2324 - t2153;
t2113 = t2136 * t2301 - t2138 * t2296;
t2112 = t2136 * t2296 + t2138 * t2301;
t2111 = -t2133 * t2299 + t2134 * t2304;
t2110 = t2133 * t2304 + t2134 * t2299;
t2109 = t2124 * t2302 + t2137 * t2297;
t2108 = t2124 * t2297 - t2137 * t2302;
t2107 = t2122 * t2302 + t2135 * t2297;
t2106 = t2122 * t2297 - t2135 * t2302;
t2103 = -t2125 * t2298 + t2126 * t2303;
t2102 = t2125 * t2303 + t2126 * t2298;
t2101 = t2113 * t2302 + t2161 * t2297;
t2100 = t2113 * t2297 - t2161 * t2302;
t2099 = -t2119 * t2294 + t2120 * t2295;
t2098 = t2119 * t2295 + t2120 * t2294;
t2097 = -pkin(5) * t2348 + pkin(10) * t2325 - t2210 * t2181 + t2105;
t2096 = -pkin(5) * t2325 - pkin(10) * t2348 + t2181 * t2212 - t2104;
t2095 = -t2117 * t2298 + t2118 * t2303;
t2094 = t2117 * t2303 + t2118 * t2298;
t2093 = -t2115 * t2299 + t2116 * t2304;
t2092 = t2115 * t2304 + t2116 * t2299;
t2091 = -t2108 * t2294 + t2109 * t2295;
t2090 = t2108 * t2295 + t2109 * t2294;
t2089 = -t2106 * t2294 + t2107 * t2295;
t2088 = t2106 * t2295 + t2107 * t2294;
t2087 = -t2104 * t2297 + t2105 * t2302;
t2086 = t2104 * t2302 + t2105 * t2297;
t2085 = t2097 * t2301 + t2114 * t2296;
t2084 = -t2097 * t2296 + t2114 * t2301;
t2083 = -t2102 * t2299 + t2103 * t2304;
t2082 = t2102 * t2304 + t2103 * t2299;
t2081 = -t2100 * t2294 + t2101 * t2295;
t2080 = t2100 * t2295 + t2101 * t2294;
t2079 = -t2098 * t2298 + t2099 * t2303;
t2078 = t2098 * t2303 + t2099 * t2298;
t2077 = -t2094 * t2299 + t2095 * t2304;
t2076 = t2094 * t2304 + t2095 * t2299;
t2075 = -t2090 * t2298 + t2091 * t2303;
t2074 = t2090 * t2303 + t2091 * t2298;
t2073 = -t2088 * t2298 + t2089 * t2303;
t2072 = t2088 * t2303 + t2089 * t2298;
t2071 = -t2086 * t2294 + t2087 * t2295;
t2070 = t2086 * t2295 + t2087 * t2294;
t2069 = -t2084 * t2296 + t2085 * t2301;
t2068 = t2084 * t2301 + t2085 * t2296;
t2067 = -t2080 * t2298 + t2081 * t2303;
t2066 = t2080 * t2303 + t2081 * t2298;
t2065 = -t2078 * t2299 + t2079 * t2304;
t2064 = t2078 * t2304 + t2079 * t2299;
t2063 = t2069 * t2302 + t2096 * t2297;
t2062 = t2069 * t2297 - t2096 * t2302;
t2061 = -t2074 * t2299 + t2075 * t2304;
t2060 = t2074 * t2304 + t2075 * t2299;
t2059 = -t2072 * t2299 + t2073 * t2304;
t2058 = t2072 * t2304 + t2073 * t2299;
t2057 = -t2070 * t2298 + t2071 * t2303;
t2056 = t2070 * t2303 + t2071 * t2298;
t2055 = -t2066 * t2299 + t2067 * t2304;
t2054 = t2066 * t2304 + t2067 * t2299;
t2053 = -t2062 * t2294 + t2063 * t2295;
t2052 = t2062 * t2295 + t2063 * t2294;
t2051 = -t2056 * t2299 + t2057 * t2304;
t2050 = t2056 * t2304 + t2057 * t2299;
t2049 = -t2052 * t2298 + t2053 * t2303;
t2048 = t2052 * t2303 + t2053 * t2298;
t2047 = -t2048 * t2299 + t2049 * t2304;
t2046 = t2048 * t2304 + t2049 * t2299;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2271, -t2270, 0, -t2275 * t2300 + t2276 * t2305, 0, 0, 0, 0, 0, 0, t2249 * t2305 - t2268 * t2300, t2250 * t2305 + t2265 * t2300, t2269 * t2305 - t2272 * t2300, t2229 * t2305 - t2261 * t2300, 0, 0, 0, 0, 0, 0, t2185 * t2305 + t2218 * t2300, t2194 * t2305 + t2220 * t2300, t2163 * t2305 + t2234 * t2300, t2146 * t2305 - t2235 * t2300, 0, 0, 0, 0, 0, 0, t2130 * t2305 + t2187 * t2300, t2140 * t2305 + t2189 * t2300, t2111 * t2305 + t2197 * t2300, t2077 * t2305 - t2186 * t2300, 0, 0, 0, 0, 0, 0, t2083 * t2305 + t2149 * t2300, t2093 * t2305 - t2300 * t2324, t2065 * t2305 + t2170 * t2300, t2051 * t2305 - t2153 * t2300, 0, 0, 0, 0, 0, 0, t2059 * t2305 + t2121 * t2300, t2061 * t2305 + t2123 * t2300, t2055 * t2305 + t2112 * t2300, t2047 * t2305 + t2068 * t2300; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2270, t2271, 0, t2275 * t2305 + t2276 * t2300, 0, 0, 0, 0, 0, 0, t2249 * t2300 + t2268 * t2305, t2250 * t2300 - t2265 * t2305, t2269 * t2300 + t2272 * t2305, t2229 * t2300 + t2261 * t2305, 0, 0, 0, 0, 0, 0, t2185 * t2300 - t2218 * t2305, t2194 * t2300 - t2220 * t2305, t2163 * t2300 - t2234 * t2305, t2146 * t2300 + t2235 * t2305, 0, 0, 0, 0, 0, 0, t2130 * t2300 - t2187 * t2305, t2140 * t2300 - t2189 * t2305, t2111 * t2300 - t2197 * t2305, t2077 * t2300 + t2186 * t2305, 0, 0, 0, 0, 0, 0, t2083 * t2300 - t2149 * t2305, t2093 * t2300 + t2305 * t2324, t2065 * t2300 - t2170 * t2305, t2051 * t2300 + t2153 * t2305, 0, 0, 0, 0, 0, 0, t2059 * t2300 - t2121 * t2305, t2061 * t2300 - t2123 * t2305, t2055 * t2300 - t2112 * t2305, t2047 * t2300 - t2068 * t2305; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2247, t2248, 0, t2228, 0, 0, 0, 0, 0, 0, t2184, t2193, t2162, t2145, 0, 0, 0, 0, 0, 0, t2129, t2139, t2110, t2076, 0, 0, 0, 0, 0, 0, t2082, t2092, t2064, t2050, 0, 0, 0, 0, 0, 0, t2058, t2060, t2054, t2046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2307, -qJDD(1), 0, t2276, 0, 0, 0, 0, 0, 0, t2249, t2250, t2269, t2229, 0, 0, 0, 0, 0, 0, t2185, t2194, t2163, t2146, 0, 0, 0, 0, 0, 0, t2130, t2140, t2111, t2077, 0, 0, 0, 0, 0, 0, t2083, t2093, t2065, t2051, 0, 0, 0, 0, 0, 0, t2059, t2061, t2055, t2047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2307, 0, t2275, 0, 0, 0, 0, 0, 0, t2268, -t2265, t2272, t2261, 0, 0, 0, 0, 0, 0, -t2218, -t2220, -t2234, t2235, 0, 0, 0, 0, 0, 0, -t2187, -t2189, -t2197, t2186, 0, 0, 0, 0, 0, 0, -t2149, t2324, -t2170, t2153, 0, 0, 0, 0, 0, 0, -t2121, -t2123, -t2112, -t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2247, t2248, 0, t2228, 0, 0, 0, 0, 0, 0, t2184, t2193, t2162, t2145, 0, 0, 0, 0, 0, 0, t2129, t2139, t2110, t2076, 0, 0, 0, 0, 0, 0, t2082, t2092, t2064, t2050, 0, 0, 0, 0, 0, 0, t2058, t2060, t2054, t2046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2281, t2274, t2288, t2253, 0, 0, 0, 0, 0, 0, t2217, t2223, t2192, t2172, 0, 0, 0, 0, 0, 0, t2157, t2165, t2134, t2095, 0, 0, 0, 0, 0, 0, t2103, t2116, t2079, t2057, 0, 0, 0, 0, 0, 0, t2073, t2075, t2067, t2049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2273, t2280, -t2330, t2252, 0, 0, 0, 0, 0, 0, t2216, t2222, t2191, t2171, 0, 0, 0, 0, 0, 0, t2156, t2164, t2133, t2094, 0, 0, 0, 0, 0, 0, t2102, t2115, t2078, t2056, 0, 0, 0, 0, 0, 0, t2072, t2074, t2066, t2048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2268, t2265, -t2272, -t2261, 0, 0, 0, 0, 0, 0, t2218, t2220, t2234, -t2235, 0, 0, 0, 0, 0, 0, t2187, t2189, t2197, -t2186, 0, 0, 0, 0, 0, 0, t2149, -t2324, t2170, -t2153, 0, 0, 0, 0, 0, 0, t2121, t2123, t2112, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2244, t2246, t2219, t2199, 0, 0, 0, 0, 0, 0, t2183, t2196, t2160, t2118, 0, 0, 0, 0, 0, 0, t2126, t2142, t2099, t2071, 0, 0, 0, 0, 0, 0, t2089, t2091, t2081, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2245, t2251, t2221, t2198, 0, 0, 0, 0, 0, 0, t2182, t2195, t2159, t2117, 0, 0, 0, 0, 0, 0, t2125, t2141, t2098, t2070, 0, 0, 0, 0, 0, 0, t2088, t2090, t2080, t2052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2218, t2220, t2234, -t2235, 0, 0, 0, 0, 0, 0, t2187, t2189, t2197, -t2186, 0, 0, 0, 0, 0, 0, t2149, -t2324, t2170, -t2153, 0, 0, 0, 0, 0, 0, t2121, t2123, t2112, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2213, t2215, t2188, t2148, 0, 0, 0, 0, 0, 0, t2155, t2168, t2120, t2087, 0, 0, 0, 0, 0, 0, t2107, t2109, t2101, t2063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2214, t2236, t2190, t2147, 0, 0, 0, 0, 0, 0, t2154, t2167, t2119, t2086, 0, 0, 0, 0, 0, 0, t2106, t2108, t2100, t2062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2187, t2189, t2197, -t2186, 0, 0, 0, 0, 0, 0, t2149, -t2324, t2170, -t2153, 0, 0, 0, 0, 0, 0, t2121, t2123, t2112, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2178, t2180, t2150, t2105, 0, 0, 0, 0, 0, 0, t2122, t2124, t2113, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2179, t2206, t2152, t2104, 0, 0, 0, 0, 0, 0, -t2135, -t2137, -t2161, -t2096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2149, -t2324, t2170, -t2153, 0, 0, 0, 0, 0, 0, t2121, t2123, t2112, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2144, t2136, t2085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2143, t2169, t2138, t2084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2135, t2137, t2161, t2096;];
f_new_reg  = t1;
