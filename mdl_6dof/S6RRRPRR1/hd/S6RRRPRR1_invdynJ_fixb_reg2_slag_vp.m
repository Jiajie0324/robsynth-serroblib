% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:04:15
% EndTime: 2019-03-09 18:04:42
% DurationCPUTime: 17.34s
% Computational Cost: add. (31867->724), mult. (78266->896), div. (0->0), fcn. (60604->18), ass. (0->372)
t318 = cos(qJ(6));
t419 = qJD(6) * t318;
t319 = cos(qJ(2));
t499 = cos(qJ(3));
t404 = t499 * t319;
t379 = qJD(1) * t404;
t315 = sin(qJ(3));
t316 = sin(qJ(2));
t424 = qJD(1) * t316;
t403 = t315 * t424;
t226 = -t379 + t403;
t357 = t315 * t319 + t316 * t499;
t228 = t357 * qJD(1);
t312 = sin(pkin(11));
t472 = cos(pkin(11));
t178 = -t472 * t226 - t312 * t228;
t498 = cos(qJ(5));
t173 = t178 * t498;
t314 = sin(qJ(5));
t352 = -t312 * t226 + t228 * t472;
t131 = -t314 * t352 + t173;
t520 = t131 * t318;
t525 = t419 - t520;
t308 = qJD(2) + qJD(3);
t394 = qJDD(1) * t499;
t415 = t319 * qJDD(1);
t380 = -t308 * t379 - t315 * t415 - t316 * t394;
t158 = t308 * t403 + t380;
t416 = t316 * qJDD(1);
t509 = t308 * t357;
t159 = qJD(1) * t509 + t315 * t416 - t319 * t394;
t106 = -t158 * t312 + t472 * t159;
t107 = -t158 * t472 - t312 * t159;
t422 = qJD(5) * t314;
t59 = -qJD(5) * t173 + t314 * t106 - t498 * t107 + t352 * t422;
t389 = t498 * t106 + t314 * t107;
t510 = t178 * t314 + t352 * t498;
t514 = qJD(5) * t510;
t60 = t389 + t514;
t304 = t319 * pkin(2);
t297 = t304 + pkin(1);
t417 = qJD(1) * qJD(2);
t400 = t316 * t417;
t224 = pkin(2) * t400 - qJDD(1) * t297;
t138 = pkin(3) * t159 + qJDD(4) + t224;
t493 = pkin(4) * t106;
t77 = t138 + t493;
t15 = pkin(5) * t60 + pkin(10) * t59 + t77;
t14 = t318 * t15;
t313 = sin(qJ(6));
t391 = qJD(5) + t308;
t174 = t352 * pkin(9);
t321 = -pkin(8) - pkin(7);
t266 = t321 * t319;
t247 = qJD(1) * t266;
t229 = t315 * t247;
t265 = t321 * t316;
t245 = qJD(1) * t265;
t485 = qJD(2) * pkin(2);
t235 = t245 + t485;
t183 = t499 * t235 + t229;
t223 = t228 * qJ(4);
t156 = t183 - t223;
t148 = pkin(3) * t308 + t156;
t233 = t499 * t247;
t184 = t315 * t235 - t233;
t450 = t226 * qJ(4);
t157 = t184 - t450;
t149 = t312 * t157;
t99 = t472 * t148 - t149;
t86 = pkin(4) * t308 - t174 + t99;
t151 = t472 * t157;
t100 = t312 * t148 + t151;
t487 = t178 * pkin(9);
t89 = t100 + t487;
t54 = t314 * t86 + t498 * t89;
t52 = pkin(10) * t391 + t54;
t264 = t297 * qJD(1);
t192 = t226 * pkin(3) + qJD(4) - t264;
t141 = -pkin(4) * t178 + t192;
t69 = -pkin(5) * t131 - pkin(10) * t510 + t141;
t23 = t313 * t69 + t318 * t52;
t306 = qJDD(2) + qJDD(3);
t399 = t319 * t417;
t191 = qJDD(2) * pkin(2) - t321 * (-t399 - t416);
t193 = t321 * (-t400 + t415);
t118 = -qJD(3) * t184 + t499 * t191 + t315 * t193;
t80 = t306 * pkin(3) + t158 * qJ(4) - t228 * qJD(4) + t118;
t402 = qJD(3) * t499;
t423 = qJD(3) * t315;
t382 = -t315 * t191 + t499 * t193 - t235 * t402 - t247 * t423;
t84 = -qJ(4) * t159 - qJD(4) * t226 - t382;
t46 = -t312 * t84 + t472 * t80;
t33 = pkin(4) * t306 - pkin(9) * t107 + t46;
t47 = t312 * t80 + t472 * t84;
t37 = -pkin(9) * t106 + t47;
t401 = qJD(5) * t498;
t10 = t314 * t33 + t498 * t37 + t86 * t401 - t89 * t422;
t383 = qJDD(5) + t306;
t8 = pkin(10) * t383 + t10;
t3 = -qJD(6) * t23 - t313 * t8 + t14;
t518 = qJD(6) - t131;
t483 = t518 * t23;
t524 = t3 + t483;
t121 = t313 * t391 + t318 * t510;
t522 = t518 * t313;
t523 = t121 * t522;
t367 = t318 * t391;
t119 = t313 * t510 - t367;
t421 = qJD(6) * t121;
t43 = -t313 * t59 - t318 * t383 + t421;
t41 = t43 * t318;
t19 = t119 * t522 - t41;
t22 = -t313 * t52 + t318 * t69;
t484 = t518 * t22;
t462 = t131 ^ 2;
t464 = t510 ^ 2;
t48 = -t462 + t464;
t420 = qJD(6) * t313;
t42 = -qJD(6) * t367 - t313 * t383 + t318 * t59 + t420 * t510;
t478 = -t119 * t419 - t313 * t43;
t521 = t119 * t520 - t318 * t42 + t478;
t39 = t42 * t313;
t18 = t121 * t525 - t39;
t468 = t121 * t510;
t58 = qJDD(6) + t60;
t55 = t313 * t58;
t17 = t518 * t525 - t468 + t55;
t53 = -t314 * t89 + t498 * t86;
t51 = -pkin(5) * t391 - t53;
t482 = t131 * t51;
t506 = t131 * t391;
t44 = -t59 - t506;
t519 = t510 * t131;
t82 = pkin(5) * t510 - pkin(10) * t131;
t311 = qJ(2) + qJ(3);
t300 = pkin(11) + t311;
t294 = qJ(5) + t300;
t284 = sin(t294);
t269 = g(3) * t284;
t285 = cos(t294);
t320 = cos(qJ(1));
t445 = t285 * t320;
t317 = sin(qJ(1));
t446 = t285 * t317;
t409 = g(1) * t445 + g(2) * t446 + t269;
t345 = -t141 * t131 - t10 + t409;
t384 = t510 * t308;
t45 = t384 - t389;
t470 = t119 * t510;
t466 = t518 * t510;
t49 = t51 * t420;
t447 = t284 * t320;
t448 = t284 * t317;
t508 = g(1) * t447 + g(2) * t448;
t513 = -t510 * t22 + t318 * t508 + t49;
t490 = g(3) * t285;
t395 = t314 * t37 - t498 * t33;
t11 = -qJD(5) * t54 - t395;
t9 = -pkin(5) * t383 - t11;
t507 = t9 * t313 + t51 * t419;
t512 = t510 * t23 + t313 * t490 + t507;
t341 = -t141 * t510 - t395 - t490 + t508;
t511 = t352 * t178;
t296 = pkin(2) * t499 + pkin(3);
t436 = t312 * t315;
t219 = -pkin(2) * t436 + t472 * t296;
t213 = pkin(4) + t219;
t392 = t472 * t315;
t221 = pkin(2) * t392 + t312 * t296;
t170 = t213 * t498 - t314 * t221;
t486 = pkin(2) * qJD(3);
t217 = (-t312 * t499 - t392) * t486;
t218 = (t472 * t499 - t436) * t486;
t125 = qJD(5) * t170 + t314 * t217 + t218 * t498;
t188 = -t245 * t315 + t233;
t160 = t188 + t450;
t189 = t499 * t245 + t229;
t161 = -t223 + t189;
t113 = t160 * t472 - t312 * t161;
t346 = t113 - t487;
t114 = t312 * t160 + t472 * t161;
t95 = -t174 + t114;
t64 = t314 * t346 + t498 * t95;
t476 = t125 - t64;
t171 = t314 * t213 + t498 * t221;
t475 = qJD(5) * t171 + (-t217 + t346) * t498 + (t218 - t95) * t314;
t291 = pkin(3) * t472 + pkin(4);
t494 = pkin(3) * t312;
t220 = t291 * t498 - t314 * t494;
t201 = t220 * qJD(5);
t104 = -t312 * t156 - t151;
t347 = t104 - t487;
t105 = t472 * t156 - t149;
t93 = -t174 + t105;
t62 = t314 * t347 + t498 * t93;
t474 = t201 - t62;
t222 = t314 * t291 + t498 * t494;
t473 = t222 * qJD(5) - t314 * t93 + t347 * t498;
t505 = t183 * t308;
t500 = g(1) * t317 - g(2) * t320;
t502 = t500 * t284;
t430 = t218 - t114;
t195 = t315 * t265 - t499 * t266;
t501 = t285 * pkin(5) + t284 * pkin(10);
t497 = pkin(2) * t316;
t496 = pkin(3) * t228;
t301 = sin(t311);
t495 = pkin(3) * t301;
t492 = pkin(5) * t284;
t302 = cos(t311);
t489 = g(3) * t302;
t488 = g(3) * t319;
t2 = qJD(6) * t22 + t15 * t313 + t318 * t8;
t1 = t2 * t318;
t356 = -t315 * t316 + t404;
t185 = t312 * t356 + t357 * t472;
t329 = t308 * t356;
t326 = -t312 * t509 + t329 * t472;
t327 = t312 * t329 + t472 * t509;
t337 = t312 * t357 - t356 * t472;
t333 = t498 * t337;
t72 = qJD(5) * t333 + t185 * t422 + t314 * t327 - t326 * t498;
t481 = t313 * t72;
t480 = t318 * t72;
t471 = pkin(7) * qJDD(1);
t469 = t121 * t119;
t467 = t121 * t313;
t460 = t131 * t313;
t334 = t314 * t337;
t134 = t185 * t498 - t334;
t456 = t134 * t313;
t455 = t134 * t318;
t454 = t352 * t308;
t453 = t178 * t308;
t452 = t352 ^ 2;
t449 = t228 * t226;
t289 = sin(t300);
t444 = t289 * t317;
t443 = t289 * t320;
t290 = cos(t300);
t442 = t290 * t317;
t441 = t290 * t320;
t440 = t301 * t317;
t439 = t301 * t320;
t438 = t302 * t317;
t437 = t302 * t320;
t435 = t313 * t317;
t434 = t313 * t320;
t433 = t317 * t318;
t432 = t318 * t320;
t405 = qJD(2) * t321;
t246 = t316 * t405;
t248 = t319 * t405;
t145 = t499 * t246 + t315 * t248 + t265 * t402 + t266 * t423;
t111 = -qJ(4) * t509 + qJD(4) * t356 + t145;
t388 = -t315 * t246 + t499 * t248;
t112 = -qJ(4) * t329 - qJD(4) * t357 - t265 * t423 + t266 * t402 + t388;
t75 = t472 * t111 + t312 * t112;
t194 = t499 * t265 + t315 * t266;
t175 = -qJ(4) * t357 + t194;
t176 = qJ(4) * t356 + t195;
t124 = t312 * t175 + t472 * t176;
t431 = t217 - t113;
t280 = pkin(4) * t290;
t293 = pkin(3) * t302;
t428 = t280 + t293;
t427 = t293 + t304;
t309 = t316 ^ 2;
t310 = t319 ^ 2;
t426 = t309 - t310;
t425 = t309 + t310;
t307 = -qJ(4) + t321;
t412 = pkin(10) * qJD(6) * t518;
t299 = t316 * t485;
t323 = qJD(1) ^ 2;
t410 = t316 * t323 * t319;
t408 = t280 + t427;
t406 = -t9 - t490;
t236 = -pkin(4) * t289 - t495;
t212 = t236 - t497;
t398 = t212 - t492;
t397 = t236 - t492;
t123 = t472 * t175 - t176 * t312;
t385 = t1 - t409;
t381 = t428 + t501;
t203 = -pkin(3) * t356 - t297;
t378 = t316 * t399;
t147 = pkin(4) * t352 + t496;
t376 = -pkin(10) * t58 - t482;
t375 = g(1) * t320 + g(2) * t317;
t372 = t131 * t53 + t510 * t54;
t164 = pkin(10) + t171;
t371 = -t164 * t58 - t482;
t215 = pkin(10) + t222;
t370 = -t215 * t58 - t482;
t369 = t22 * t318 + t23 * t313;
t368 = t22 * t313 - t23 * t318;
t97 = -pkin(9) * t185 + t123;
t98 = -pkin(9) * t337 + t124;
t68 = t314 * t97 + t498 * t98;
t133 = t185 * t314 + t333;
t152 = pkin(4) * t337 + t203;
t76 = t133 * pkin(5) - t134 * pkin(10) + t152;
t36 = t313 * t76 + t318 * t68;
t35 = -t313 * t68 + t318 * t76;
t365 = t100 * t352 + t99 * t178;
t364 = t22 * t520 + t23 * t460 + t385;
t56 = t318 * t58;
t363 = t56 + (-t420 + t460) * t518;
t362 = -qJD(6) * t69 + t269 - t8;
t361 = t375 * t284;
t360 = -0.2e1 * pkin(1) * t417 - pkin(7) * qJDD(2);
t359 = t134 * t419 - t481;
t358 = -t134 * t420 - t480;
t354 = t178 ^ 2;
t74 = -t312 * t111 + t112 * t472;
t349 = g(1) * t441 + g(2) * t442 + g(3) * t289 - t178 * t192 - t47;
t71 = t147 + t82;
t322 = qJD(2) ^ 2;
t344 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t322 + t500;
t343 = pkin(1) * t323 + t375 - t471;
t342 = g(1) * t437 + g(2) * t438 + g(3) * t301 - t264 * t226 + t382;
t340 = g(1) * t443 + g(2) * t444 - g(3) * t290 - t192 * t352 + t46;
t339 = t318 * t406 + t513;
t338 = -qJD(6) * t369 - t3 * t313 + t1;
t336 = -t313 * t361 + t512;
t335 = t138 - t500;
t328 = g(1) * t439 + g(2) * t440 + t264 * t228 + t118 - t489;
t180 = pkin(3) * t509 + t299;
t325 = -pkin(9) * t326 + t74;
t110 = pkin(4) * t327 + t180;
t303 = -pkin(9) + t307;
t298 = pkin(2) * t424;
t250 = pkin(10) * t445;
t249 = pkin(10) * t446;
t244 = pkin(1) + t427;
t214 = -pkin(5) - t220;
t208 = pkin(1) + t408;
t207 = t285 * t432 + t435;
t206 = -t285 * t434 + t433;
t205 = -t285 * t433 + t434;
t204 = t285 * t435 + t432;
t197 = t320 * t208;
t196 = t298 + t496;
t163 = -pkin(5) - t170;
t162 = -t226 ^ 2 + t228 ^ 2;
t146 = -qJD(3) * t195 + t388;
t142 = t147 + t298;
t140 = t228 * t308 - t159;
t139 = -t380 + (t226 - t403) * t308;
t92 = t107 - t453;
t91 = -t106 + t454;
t88 = -t354 + t452;
t73 = -qJD(5) * t334 + t185 * t401 + t314 * t326 + t327 * t498;
t70 = t298 + t71;
t67 = t314 * t98 - t498 * t97;
t66 = -pkin(9) * t327 + t75;
t30 = t313 * t82 + t318 * t53;
t29 = -t313 * t53 + t318 * t82;
t28 = t313 * t70 + t318 * t64;
t27 = -t313 * t64 + t318 * t70;
t26 = t313 * t71 + t318 * t62;
t25 = -t313 * t62 + t318 * t71;
t24 = t73 * pkin(5) + t72 * pkin(10) + t110;
t16 = t363 + t470;
t13 = qJD(5) * t68 + t314 * t66 - t325 * t498;
t12 = t314 * t325 + t401 * t97 - t422 * t98 + t498 * t66;
t6 = -t467 * t518 + t521;
t5 = -qJD(6) * t36 - t12 * t313 + t24 * t318;
t4 = qJD(6) * t35 + t12 * t318 + t24 * t313;
t7 = [0, 0, 0, 0, 0, qJDD(1), t500, t375, 0, 0, qJDD(1) * t309 + 0.2e1 * t378, 0.2e1 * t316 * t415 - 0.2e1 * t417 * t426, qJDD(2) * t316 + t319 * t322, qJDD(1) * t310 - 0.2e1 * t378, qJDD(2) * t319 - t316 * t322, 0, t316 * t360 + t319 * t344, -t316 * t344 + t319 * t360, 0.2e1 * t425 * t471 - t375, -g(1) * (-pkin(1) * t317 + pkin(7) * t320) - g(2) * (pkin(1) * t320 + pkin(7) * t317) + (pkin(7) ^ 2 * t425 + pkin(1) ^ 2) * qJDD(1), -t158 * t357 + t228 * t329, -t158 * t356 - t159 * t357 + t308 * (-t226 * t356 - t228 * t357) t306 * t357 + t308 * t329, -t159 * t356 + t226 * t509, t306 * t356 - t308 * t509, 0, g(1) * t438 - g(2) * t437 + t146 * t308 - t297 * t159 + t194 * t306 - t224 * t356 + t226 * t299 - t264 * t509, -g(1) * t440 + g(2) * t439 - t145 * t308 + t297 * t158 - t195 * t306 + t224 * t357 + t228 * t299 - t264 * t329, -t118 * t357 - t145 * t226 - t146 * t228 + t194 * t158 - t195 * t159 - t184 * t509 - t375 + (-t382 - t505) * t356, -t382 * t195 + t184 * t145 + t118 * t194 + t183 * t146 - t224 * t297 - t264 * t299 - g(1) * (-t297 * t317 - t320 * t321) - g(2) * (t297 * t320 - t317 * t321) t107 * t185 + t326 * t352, -t185 * t106 - t107 * t337 + t178 * t326 - t327 * t352, t185 * t306 + t308 * t326, t106 * t337 - t178 * t327, -t306 * t337 - t308 * t327, 0, g(1) * t442 - g(2) * t441 + t203 * t106 + t123 * t306 + t138 * t337 - t178 * t180 + t192 * t327 + t74 * t308, -g(1) * t444 + g(2) * t443 + t203 * t107 - t124 * t306 + t138 * t185 + t180 * t352 + t192 * t326 - t75 * t308, -t100 * t327 - t124 * t106 - t123 * t107 + t178 * t75 - t46 * t185 - t326 * t99 - t337 * t47 - t352 * t74 - t375, t47 * t124 + t100 * t75 + t46 * t123 + t99 * t74 + t138 * t203 + t192 * t180 - g(1) * (-t244 * t317 - t307 * t320) - g(2) * (t244 * t320 - t307 * t317) -t134 * t59 - t510 * t72, -t131 * t72 + t133 * t59 - t134 * t60 - t510 * t73, t134 * t383 - t391 * t72, -t131 * t73 + t133 * t60, -t133 * t383 - t391 * t73, 0, -t110 * t131 - t13 * t391 + t77 * t133 + t141 * t73 + t152 * t60 + t285 * t500 - t383 * t67, t110 * t510 - t12 * t391 + t77 * t134 - t141 * t72 - t152 * t59 - t383 * t68 - t502, -t10 * t133 - t11 * t134 + t12 * t131 + t13 * t510 + t53 * t72 - t54 * t73 - t59 * t67 - t60 * t68 - t375, t10 * t68 + t54 * t12 - t11 * t67 - t53 * t13 + t77 * t152 + t141 * t110 - g(1) * (-t208 * t317 - t303 * t320) - g(2) * (-t303 * t317 + t197) t121 * t358 - t42 * t455 (t119 * t318 + t467) * t72 + (t39 - t41 + (t119 * t313 - t121 * t318) * qJD(6)) * t134, t121 * t73 - t133 * t42 + t358 * t518 + t455 * t58, t119 * t359 + t43 * t456, -t119 * t73 - t133 * t43 - t359 * t518 - t456 * t58, t133 * t58 + t518 * t73, -g(1) * t205 - g(2) * t207 + t119 * t13 + t133 * t3 + t134 * t507 + t22 * t73 + t35 * t58 + t43 * t67 - t51 * t481 + t5 * t518, -t51 * t480 - g(1) * t204 - g(2) * t206 + t121 * t13 - t518 * t4 - t133 * t2 - t23 * t73 - t36 * t58 - t42 * t67 + (t318 * t9 - t49) * t134, -t119 * t4 - t121 * t5 + t35 * t42 - t36 * t43 + t369 * t72 + t502 + (qJD(6) * t368 - t2 * t313 - t3 * t318) * t134, -g(2) * t197 + t51 * t13 + t2 * t36 + t22 * t5 + t23 * t4 + t3 * t35 + t9 * t67 + (g(1) * t303 - g(2) * t501) * t320 + (-g(1) * (-t208 - t501) + g(2) * t303) * t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t410, t426 * t323, t416, t410, t415, qJDD(2), t316 * t343 - t488, g(3) * t316 + t319 * t343, 0, 0, t449, t162, t139, -t449, t140, t306, -t188 * t308 + (-t226 * t424 + t306 * t499 - t308 * t423) * pkin(2) + t328, t189 * t308 + (-t228 * t424 - t315 * t306 - t308 * t402) * pkin(2) + t342 (t184 + t188) * t228 + (-t183 + t189) * t226 + (t158 * t499 - t315 * t159 + (-t226 * t499 + t228 * t315) * qJD(3)) * pkin(2), -t183 * t188 - t184 * t189 + (t118 * t499 - t488 - t382 * t315 + (-t183 * t315 + t184 * t499) * qJD(3) + (qJD(1) * t264 + t375) * t316) * pkin(2), -t511, t88, t92, t511, t91, t306, t178 * t196 + t219 * t306 + t308 * t431 + t340, -t196 * t352 - t221 * t306 - t308 * t430 + t349, -t221 * t106 - t219 * t107 + t178 * t430 - t352 * t431 + t365, t47 * t221 + t46 * t219 - t192 * t196 - g(3) * t427 + t431 * t99 - t375 * (-t495 - t497) + t430 * t100, -t519, t48, t44, t519, t45, t383, t170 * t383 + t142 * t131 + (-t54 - t475) * qJD(5) + t341 - t475 * t308, -t142 * t510 - t171 * t383 - t391 * t476 + t345, t131 * t476 + t170 * t59 - t171 * t60 + t475 * t510 + t372, -g(3) * t408 + t10 * t171 + t11 * t170 - t141 * t142 - t212 * t375 - t475 * t53 + t476 * t54, t18, t6, t17, t19, t16, -t466, t163 * t43 + t371 * t313 + t475 * t119 + (-t125 * t313 - t164 * t419 - t27) * t518 + t339, -t163 * t42 + t371 * t318 + t475 * t121 + (-t125 * t318 + t164 * t420 + t28) * t518 + t336, t119 * t28 + t121 * t27 + (-t119 * t125 - t164 * t43 + (t121 * t164 - t22) * qJD(6)) * t318 + (t121 * t125 - t164 * t42 - t3 + (t119 * t164 - t23) * qJD(6)) * t313 + t364, t9 * t163 - t23 * t28 - t22 * t27 - g(1) * (t320 * t398 + t250) - g(2) * (t317 * t398 + t249) - g(3) * (t304 + t381) + t475 * t51 - t368 * t125 + t338 * t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, t162, t139, -t449, t140, t306, t184 * t308 + t328, t342 + t505, 0, 0, -t511, t88, t92, t511, t91, t306, -t104 * t308 + (t178 * t228 + t306 * t472) * pkin(3) + t340, t105 * t308 + (-t228 * t352 - t306 * t312) * pkin(3) + t349, -t105 * t178 + t104 * t352 + (-t312 * t106 - t107 * t472) * pkin(3) + t365, -t100 * t105 - t99 * t104 + (-t192 * t228 + t301 * t375 + t312 * t47 + t46 * t472 - t489) * pkin(3), -t519, t48, t44, t519, t45, t383, t220 * t383 + t147 * t131 + (-t54 - t473) * qJD(5) + t341 - t473 * t308, -t147 * t510 - t222 * t383 - t391 * t474 + t345, t131 * t474 + t220 * t59 - t222 * t60 + t473 * t510 + t372, -g(3) * t428 + t10 * t222 + t11 * t220 - t141 * t147 - t236 * t375 - t473 * t53 + t474 * t54, t18, t6, t17, t19, t16, -t466, t214 * t43 + t370 * t313 + t473 * t119 + (-t201 * t313 - t215 * t419 - t25) * t518 + t339, -t214 * t42 + t370 * t318 + t473 * t121 + (-t201 * t318 + t215 * t420 + t26) * t518 + t336, t119 * t26 + t121 * t25 + (-t119 * t201 - t215 * t43 + (t121 * t215 - t22) * qJD(6)) * t318 + (t121 * t201 - t215 * t42 - t3 + (t119 * t215 - t23) * qJD(6)) * t313 + t364, t9 * t214 - t23 * t26 - t22 * t25 - g(1) * (t320 * t397 + t250) - g(2) * (t317 * t397 + t249) - g(3) * t381 + t473 * t51 - t368 * t201 + t338 * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106 + t454, t107 + t453, -t354 - t452, -t100 * t178 + t352 * t99 + t335, 0, 0, 0, 0, 0, 0, t384 + t389 + 0.2e1 * t514, -t59 + t506, -t462 - t464, -t131 * t54 + t510 * t53 + t335 + t493, 0, 0, 0, 0, 0, 0, t363 - t470, -t318 * t518 ^ 2 - t468 - t55 (t119 * t131 + t42) * t318 + t523 + t478, -t510 * t51 + t524 * t318 + (t2 - t484) * t313 - t500; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t519, t48, t44, t519, t45, t383, t308 * t54 + t341, t391 * t53 + t345, 0, 0, t18, t521 - t523, t17, t19, -t518 * t522 + t470 + t56, -t466, -pkin(5) * t43 - t119 * t54 - t518 * t29 + t376 * t313 + (t406 - t412) * t318 + t513, pkin(5) * t42 - t121 * t54 + t518 * t30 + t376 * t318 + (-t361 + t412) * t313 + t512, t119 * t30 + t121 * t29 + (-t484 + (-t43 + t421) * pkin(10)) * t318 + ((qJD(6) * t119 - t42) * pkin(10) - t524) * t313 + t385, -t9 * pkin(5) - t23 * t30 - t22 * t29 - t51 * t54 - g(1) * (-pkin(5) * t447 + t250) - g(2) * (-pkin(5) * t448 + t249) - g(3) * t501 + t338 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t469, -t119 ^ 2 + t121 ^ 2, t119 * t518 - t42, -t469, t121 * t518 - t43, t58, -g(1) * t206 + g(2) * t204 - t121 * t51 + t313 * t362 - t419 * t52 + t14 + t483, g(1) * t207 - g(2) * t205 + t119 * t51 + t484 + (qJD(6) * t52 - t15) * t313 + t362 * t318, 0, 0;];
tau_reg  = t7;
