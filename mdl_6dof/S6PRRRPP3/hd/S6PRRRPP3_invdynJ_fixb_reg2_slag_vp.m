% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRRPP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:58:37
% EndTime: 2019-03-08 22:58:51
% DurationCPUTime: 7.91s
% Computational Cost: add. (5589->642), mult. (12936->768), div. (0->0), fcn. (9878->10), ass. (0->301)
t221 = sin(qJ(4));
t224 = cos(qJ(4));
t222 = sin(qJ(3));
t358 = qJD(3) * t221;
t360 = qJD(2) * t224;
t160 = t222 * t360 + t358;
t225 = cos(qJ(3));
t359 = qJD(2) * t225;
t199 = -qJD(4) + t359;
t384 = t160 * t199;
t352 = t224 * qJD(3);
t362 = qJD(2) * t222;
t158 = t221 * t362 - t352;
t385 = t158 * t199;
t350 = qJD(2) * qJD(3);
t318 = t225 * t350;
t348 = t222 * qJDD(2);
t354 = qJD(4) * t222;
t439 = qJD(2) * t354 - qJDD(3);
t77 = -qJD(4) * t352 + (-t318 - t348) * t224 + t439 * t221;
t78 = t221 * (qJD(3) * (qJD(4) + t359) + t348) + t439 * t224;
t447 = t221 * (t78 - t384) + t224 * (t77 - t385);
t422 = pkin(3) * t225;
t173 = -pkin(9) * t222 - pkin(2) - t422;
t260 = t173 * qJD(2);
t226 = cos(qJ(2));
t218 = sin(pkin(6));
t364 = qJD(1) * t218;
t332 = t226 * t364;
t241 = t260 - t332;
t223 = sin(qJ(2));
t333 = t223 * t364;
t166 = qJD(2) * pkin(8) + t333;
t219 = cos(pkin(6));
t349 = qJDD(1) * t219;
t351 = qJD(1) * qJD(2);
t320 = t226 * t351;
t363 = qJD(1) * t219;
t390 = qJDD(2) * pkin(8);
t443 = t390 + (qJDD(1) * t223 + t320) * t218 + qJD(3) * t363;
t338 = -t222 * t349 - t225 * t443;
t357 = qJD(3) * t222;
t38 = -t166 * t357 - t338;
t446 = qJDD(3) * pkin(9) + qJD(4) * t241 + t38;
t42 = t78 + t384;
t210 = t225 * qJDD(2);
t156 = t222 * t350 + qJDD(4) - t210;
t416 = pkin(4) + qJ(6);
t322 = t416 * t156;
t353 = qJD(4) * t224;
t356 = qJD(3) * t225;
t442 = t221 * t356 + t222 * t353;
t393 = qJ(5) * t221;
t420 = pkin(4) * t224;
t441 = t393 + t420;
t380 = t218 * t225;
t146 = t219 * t222 + t223 * t380;
t361 = qJD(2) * t223;
t330 = t218 * t361;
t379 = t218 * t226;
t381 = t218 * t223;
t145 = -t219 * t225 + t222 * t381;
t329 = qJD(2) * t379;
t95 = -qJD(3) * t145 + t225 * t329;
t438 = -qJD(4) * t379 + t95;
t20 = t146 * t353 + t221 * t438 - t224 * t330;
t355 = qJD(4) * t221;
t21 = -t146 * t355 + t221 * t330 + t224 * t438;
t98 = t146 * t221 + t224 * t379;
t340 = t221 * t379;
t99 = t146 * t224 - t340;
t440 = -t21 * t158 + t20 * t160 - t98 * t77 - t99 * t78;
t331 = t222 * t363;
t116 = t166 * t225 + t331;
t107 = qJD(3) * pkin(9) + t116;
t44 = t107 * t221 - t224 * t241;
t272 = pkin(5) * t160 + t44;
t372 = qJD(5) + t272;
t406 = t224 * t78;
t407 = t221 * t77;
t229 = t222 * ((t158 * t221 - t160 * t224) * qJD(4) - t406 + t407) - (t158 * t224 + t160 * t221) * t356;
t154 = t158 ^ 2;
t155 = t160 ^ 2;
t323 = -t155 + t154;
t196 = t199 ^ 2;
t436 = -t155 - t196;
t149 = t156 * qJ(5);
t186 = qJD(5) * t199;
t435 = t186 - t149;
t296 = pkin(3) * t222 - pkin(9) * t225;
t165 = t296 * qJD(3);
t375 = t224 * t225;
t203 = pkin(8) * t375;
t298 = t221 * t332;
t434 = qJD(4) * t203 + t173 * t355 - t225 * t298 + (-t165 + t333) * t224;
t433 = -qJD(5) * t221 - t331 + (-t221 * t359 + t355) * pkin(4);
t432 = -pkin(5) * t78 + qJDD(6);
t96 = qJD(3) * t146 + t222 * t329;
t261 = t145 * t77 + t156 * t99 - t96 * t160 - t199 * t21;
t262 = t145 * t78 - t156 * t98 + t96 * t158 + t199 * t20;
t374 = t225 * t226;
t119 = (t221 * t223 + t224 * t374) * t218;
t114 = qJD(1) * t119;
t431 = -pkin(8) * (t222 * t352 + t225 * t355) - t114;
t321 = t223 * t351;
t285 = -qJDD(1) * t379 + t218 * t321;
t391 = qJDD(2) * pkin(2);
t120 = t285 - t391;
t227 = qJD(3) ^ 2;
t395 = cos(pkin(10));
t309 = t395 * t226;
t217 = sin(pkin(10));
t383 = t217 * t223;
t140 = -t219 * t309 + t383;
t310 = t395 * t223;
t382 = t217 * t226;
t142 = t219 * t382 + t310;
t295 = g(1) * t142 + g(2) * t140;
t430 = -pkin(8) * t227 + t218 * (-g(3) * t226 + t321) - t120 + t295 + t391;
t267 = t156 * t224 + t199 * t355;
t377 = t221 * t225;
t36 = qJD(2) * (-t158 * t222 + t199 * t377) - t267;
t268 = -t156 * t221 + t199 * t353;
t37 = qJD(2) * (-t160 * t222 + t199 * t375) - t268;
t9 = t222 * (qJD(3) * t160 + t267) - t225 * (t199 * t352 - t77);
t427 = t222 * (-qJD(3) * t158 + t268) + t225 * (t199 * t358 + t78);
t426 = 0.2e1 * t149;
t425 = pkin(5) + pkin(9);
t424 = pkin(5) * t77;
t421 = pkin(4) * t156;
t419 = pkin(8) * t221;
t418 = pkin(9) * t156;
t417 = t158 * pkin(5);
t413 = qJ(5) * t78;
t412 = qJD(2) * pkin(2);
t11 = t199 * t416 + t372;
t411 = t11 * t199;
t45 = t224 * t107 + t221 * t260 - t298;
t30 = t199 * qJ(5) - t45;
t410 = t199 * t30;
t409 = t199 * t44;
t408 = t199 * t45;
t279 = -qJ(5) * t224 + qJ(6) * t221;
t405 = qJD(4) * t279 - qJD(6) * t224 - (qJD(2) * t279 + t166) * t225 + t433;
t404 = -qJ(5) * t353 - (-qJ(5) * t360 + t166) * t225 + t433;
t345 = pkin(5) * t377;
t153 = t222 * t166;
t115 = t225 * t363 - t153;
t162 = t296 * qJD(2);
t75 = t224 * t115 + t221 * t162;
t403 = -t425 * t355 - (qJ(5) * t222 - t345) * qJD(2) - t75;
t180 = t425 * t224;
t344 = pkin(5) * t375;
t74 = -t221 * t115 + t162 * t224;
t402 = qJD(4) * t180 - (-t222 * t416 + t344) * qJD(2) + t74;
t326 = t221 * t354;
t334 = -pkin(4) - t419;
t401 = -pkin(5) * t326 + qJD(6) * t225 + (t344 + (-qJ(6) + t334) * t222) * qJD(3) + t434;
t202 = pkin(8) * t377;
t369 = t221 * t165 + t173 * t353;
t289 = -qJD(5) * t225 + t369;
t376 = t222 * t224;
t400 = (-pkin(5) * t376 - t202) * qJD(4) + (-t345 + (-pkin(8) * t224 + qJ(5)) * t222) * qJD(3) + t289 - t114;
t399 = -qJ(5) * t357 - t289 - t431;
t398 = t334 * t357 + t434;
t397 = t369 + t431;
t396 = -t357 * t419 + t434;
t394 = qJ(5) * t158;
t392 = qJ(6) * t224;
t389 = t140 * t222;
t388 = t142 * t222;
t387 = t145 * t224;
t386 = t158 * t160;
t378 = t221 * t222;
t373 = -qJD(5) - t44;
t25 = t45 - t417;
t371 = -qJD(6) - t25;
t370 = qJDD(1) - g(3);
t368 = pkin(2) * t379 + pkin(8) * t381;
t367 = pkin(4) * t378 + t222 * pkin(8);
t123 = t221 * t173 + t203;
t215 = t222 ^ 2;
t216 = t225 ^ 2;
t366 = t215 - t216;
t365 = t215 + t216;
t141 = t219 * t310 + t382;
t311 = t218 * t395;
t91 = -t141 * t222 - t225 * t311;
t85 = t91 * pkin(3);
t347 = t441 * t91 + t85;
t143 = -t219 * t383 + t309;
t93 = -t143 * t222 + t217 * t380;
t86 = t93 * pkin(3);
t346 = t441 * t93 + t86;
t106 = -qJD(3) * pkin(3) - t115;
t248 = -qJ(5) * t160 + t106;
t26 = t158 * t416 + t248;
t343 = t26 * t355;
t342 = t26 * t353;
t341 = t222 * t379;
t228 = qJD(2) ^ 2;
t339 = t222 * t228 * t225;
t138 = t145 * pkin(3);
t337 = -pkin(4) * t387 - t145 * t393 - t138;
t136 = t140 * pkin(2);
t336 = -pkin(9) * t389 - t140 * t422 - t136;
t137 = t142 * pkin(2);
t335 = -pkin(9) * t388 - t142 * t422 - t137;
t324 = t199 * t362;
t317 = t226 * t350;
t315 = -pkin(3) - t393;
t92 = t141 * t225 - t222 * t311;
t51 = -t140 * t224 + t221 * t92;
t52 = t140 * t221 + t224 * t92;
t314 = -t51 * pkin(4) + qJ(5) * t52;
t94 = t217 * t218 * t222 + t143 * t225;
t53 = -t142 * t224 + t221 * t94;
t54 = t142 * t221 + t224 * t94;
t313 = -t53 * pkin(4) + qJ(5) * t54;
t312 = -t98 * pkin(4) + qJ(5) * t99;
t64 = qJD(2) * t165 + qJDD(2) * t173 + t285;
t308 = t107 * t355 - t221 * t64 - t224 * t446;
t307 = t107 * t353 + t221 * t446 - t224 * t64;
t122 = t173 * t224 - t202;
t304 = t166 * t356 + t222 * t443 - t225 * t349;
t303 = t218 * pkin(3) * t374 + pkin(9) * t341 + t368;
t302 = pkin(4) * t442 + pkin(8) * t356 + qJ(5) * t326;
t301 = t158 * t332;
t300 = t160 * t332;
t299 = t222 * t332;
t297 = t222 * t318;
t294 = g(1) * t143 + g(2) * t141;
t109 = qJ(5) * t225 - t123;
t288 = (qJD(4) * t158 - t77) * pkin(9);
t287 = (qJD(4) * t160 - t78) * pkin(9);
t286 = -qJDD(5) - t307;
t29 = pkin(4) * t199 - t373;
t282 = t221 * t30 + t224 * t29;
t281 = -t221 * t45 + t224 * t44;
t274 = qJDD(2) * t226 - t223 * t228;
t4 = t308 + t435;
t118 = -t224 * t381 + t225 * t340;
t68 = -t140 * t377 - t141 * t224;
t70 = -t142 * t377 - t143 * t224;
t266 = g(1) * t70 + g(2) * t68 + g(3) * t118;
t69 = -t140 * t375 + t141 * t221;
t71 = -t142 * t375 + t143 * t221;
t265 = -g(1) * t71 - g(2) * t69 - g(3) * t119;
t264 = g(1) * t93 + g(2) * t91 - g(3) * t145;
t263 = g(1) * t94 + g(2) * t92 + g(3) * t146;
t35 = -qJDD(3) * pkin(3) + t304;
t238 = qJ(5) * t77 - qJD(5) * t160 + t35;
t3 = qJD(6) * t158 + t416 * t78 + t238;
t259 = -t264 - t3;
t257 = t119 * pkin(4) + qJ(5) * t118 + t303;
t256 = -g(3) * t379 + t295;
t46 = pkin(4) * t158 + t248;
t255 = t199 * t46 + t418;
t254 = -t106 * t199 - t418;
t253 = t69 * pkin(4) + pkin(8) * t141 + qJ(5) * t68 + t336;
t252 = t71 * pkin(4) + pkin(8) * t143 + qJ(5) * t70 + t335;
t251 = t156 - t386;
t18 = -t224 * t384 - t407;
t19 = -t221 * t385 - t406;
t247 = pkin(9) * qJD(4) * t199 - t264;
t246 = g(1) * t53 + g(2) * t51 + g(3) * t98 - t307;
t245 = g(1) * t54 + g(2) * t52 + g(3) * t99 + t308;
t8 = pkin(4) * t78 + t238;
t243 = t247 - t8;
t242 = t247 - t35;
t240 = -qJDD(5) + t246;
t239 = t77 + t385;
t167 = -t332 - t412;
t237 = -pkin(8) * qJDD(3) + (t167 + t332 - t412) * qJD(3);
t15 = t158 * t442 + t78 * t378;
t14 = -t77 * t376 + (t225 * t352 - t326) * t160;
t235 = t160 * t46 - t240;
t234 = t160 * t26 - t240 - t424;
t233 = -t158 * t26 - t245 + t432;
t232 = t304 * t222 + t38 * t225 + (-t115 * t225 - t116 * t222) * qJD(3) - t294;
t213 = t225 * pkin(4);
t179 = t425 * t221;
t168 = t315 - t420;
t150 = -t224 * t416 + t315;
t135 = -qJ(5) * t376 + t367;
t110 = -t122 + t213;
t105 = t222 * t279 + t367;
t97 = -t156 * t225 - t199 * t357;
t90 = pkin(4) * t160 + t394;
t84 = -pkin(5) * t378 - t109;
t79 = qJ(6) * t225 + t202 + t213 + (pkin(5) * t222 - t173) * t224;
t65 = t160 * t416 + t394;
t61 = (-qJ(5) * t356 - qJD(5) * t222) * t224 + t302;
t60 = -pkin(4) * t362 - t74;
t59 = -qJ(5) * t362 - t75;
t23 = t279 * t356 + (qJD(6) * t221 + (qJ(6) * qJD(4) - qJD(5)) * t224) * t222 + t302;
t16 = qJD(6) - t30 - t417;
t5 = -t286 - t421;
t2 = -t4 + t432;
t1 = qJD(6) * t199 - t286 - t322 - t424;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t370, 0, 0, 0, 0, 0, 0, t274 * t218 (-qJDD(2) * t223 - t226 * t228) * t218, 0, -g(3) + (t219 ^ 2 + (t223 ^ 2 + t226 ^ 2) * t218 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t96 - qJDD(3) * t145 + (-t222 * t317 + t225 * t274) * t218, -qJD(3) * t95 - qJDD(3) * t146 + (-t222 * t274 - t225 * t317) * t218 (t145 * t222 + t146 * t225) * qJDD(2) + (t222 * t96 + t225 * t95 + (t145 * t225 - t146 * t222) * qJD(3)) * qJD(2), -t115 * t96 + t116 * t95 + t145 * t304 + t146 * t38 - g(3) + (-t120 * t226 + t167 * t361) * t218, 0, 0, 0, 0, 0, 0, t262, -t261, t440, t106 * t96 + t145 * t35 + t20 * t44 + t21 * t45 + t307 * t98 - t308 * t99 - g(3), 0, 0, 0, 0, 0, 0, t440, -t262, t261, t145 * t8 + t20 * t29 - t21 * t30 - t4 * t99 + t46 * t96 + t5 * t98 - g(3), 0, 0, 0, 0, 0, 0, t440, t261, t262, t1 * t98 + t11 * t20 + t145 * t3 + t16 * t21 + t2 * t99 + t26 * t96 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t370 * t379 + t295, -t370 * t381 + t294, 0, 0, qJDD(2) * t215 + 0.2e1 * t297, 0.2e1 * t210 * t222 - 0.2e1 * t350 * t366, qJDD(3) * t222 + t225 * t227, qJDD(2) * t216 - 0.2e1 * t297, qJDD(3) * t225 - t222 * t227, 0, t237 * t222 + t225 * t430, -t222 * t430 + t237 * t225, t365 * t390 + (-g(3) * t223 - t320 * t365) * t218 + t232, -t120 * pkin(2) + g(1) * t137 + g(2) * t136 - g(3) * t368 + (-t167 * t223 + (t115 * t222 - t116 * t225) * t226) * t364 + t232 * pkin(8), t14, t229, t9, t15, t427, t97, t122 * t156 + t396 * t199 + (t307 + (pkin(8) * t158 + t106 * t221) * qJD(3)) * t225 + (pkin(8) * t78 - qJD(3) * t44 + t106 * t353 + t221 * t35 - t301) * t222 + t265, -t123 * t156 + t397 * t199 + (-t308 + (pkin(8) * t160 + t106 * t224) * qJD(3)) * t225 + (-pkin(8) * t77 - qJD(3) * t45 - t106 * t355 + t224 * t35 - t300) * t222 + t266, t122 * t77 - t123 * t78 + t396 * t160 - t397 * t158 + t281 * t356 + (t221 * t308 + t224 * t307 + (-t221 * t44 - t224 * t45) * qJD(4) + t256) * t222, -t308 * t123 - t307 * t122 - t106 * t299 - g(1) * t335 - g(2) * t336 - g(3) * t303 + t397 * t45 + t396 * t44 + (t106 * t356 + t222 * t35 - t294) * pkin(8), t97, -t9, -t427, t14, t229, t15, t109 * t78 - t110 * t77 + t398 * t160 + t399 * t158 + t282 * t356 + (t221 * t4 + t224 * t5 + (-t221 * t29 + t224 * t30) * qJD(4) + t256) * t222, t110 * t156 - t135 * t78 - t158 * t61 + (-t358 * t46 - t5) * t225 - t398 * t199 + (qJD(3) * t29 - t221 * t8 - t353 * t46 + t301) * t222 - t265, -t109 * t156 + t135 * t77 - t160 * t61 + (-t352 * t46 + t4) * t225 + t399 * t199 + (-qJD(3) * t30 - t224 * t8 + t355 * t46 + t300) * t222 - t266, t8 * t135 + t4 * t109 + t5 * t110 - g(1) * t252 - g(2) * t253 - g(3) * t257 + (t61 - t299) * t46 + t399 * t30 + t398 * t29, t97, -t427, t9, t15, -t229, t14, -t77 * t79 - t78 * t84 + t401 * t160 - t400 * t158 + (t11 * t224 - t16 * t221) * t356 + (t1 * t224 - t2 * t221 + (-t11 * t221 - t16 * t224) * qJD(4) + t256) * t222, t105 * t77 + t156 * t84 - t160 * t23 + (-t26 * t352 - t2) * t225 - t400 * t199 + (qJD(3) * t16 - t224 * t3 + t300 + t343) * t222 - t266, t105 * t78 - t156 * t79 + t158 * t23 + (t26 * t358 + t1) * t225 + t401 * t199 + (-qJD(3) * t11 + t221 * t3 - t301 + t342) * t222 + t265, t3 * t105 + t1 * t79 + t2 * t84 - g(1) * (-pkin(5) * t388 + qJ(6) * t71 + t252) - g(2) * (-pkin(5) * t389 + qJ(6) * t69 + t253) - g(3) * (pkin(5) * t341 + qJ(6) * t119 + t257) + (t23 - t299) * t26 + t400 * t16 + t401 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t339, t366 * t228, t348, t339, t210, qJDD(3), qJD(3) * t116 - t167 * t362 - t264 - t304, -t167 * t359 + (t115 + t153) * qJD(3) + t263 + t338, 0, 0, t18, -t447, t37, t19, -t36, t324, -pkin(3) * t78 - t116 * t158 + t199 * t74 + t221 * t254 + t224 * t242 + t362 * t44, pkin(3) * t77 - t116 * t160 - t199 * t75 - t221 * t242 + t224 * t254 + t362 * t45, t158 * t75 + t160 * t74 + (t287 - t308 - t409) * t224 + (t288 + t307 + t408) * t221 - t263, -t35 * pkin(3) - g(1) * t86 - g(2) * t85 + g(3) * t138 - t106 * t116 + t44 * t74 - t45 * t75 + (qJD(4) * t281 + t221 * t307 - t224 * t308 - t263) * pkin(9), t324, -t37, t36, t18, -t447, t19, -t158 * t59 - t160 * t60 + (-t199 * t29 + t287 - t4) * t224 + (t288 + t5 - t410) * t221 - t263, -t158 * t404 - t168 * t78 + t199 * t60 + t221 * t255 - t224 * t243 - t29 * t362, -t160 * t404 + t168 * t77 - t199 * t59 + t221 * t243 + t224 * t255 + t30 * t362, t8 * t168 - t30 * t59 - t29 * t60 - g(1) * t346 - g(2) * t347 - g(3) * t337 + t404 * t46 + (qJD(4) * t282 + t5 * t221 - t4 * t224 - t263) * pkin(9), t324, t36, t37, t19, t447, t18, -t179 * t77 - t180 * t78 + t402 * t160 - t403 * t158 + (t2 - t411) * t224 + (t16 * t199 + t1) * t221 - t263, -t342 + t150 * t77 + t156 * t180 - t403 * t199 - t405 * t160 + (-t16 * t222 + t26 * t375) * qJD(2) + t259 * t221, t343 + t150 * t78 - t156 * t179 + t402 * t199 + t405 * t158 + (t11 * t222 - t26 * t377) * qJD(2) + t259 * t224, t3 * t150 + t1 * t179 + t2 * t180 - g(1) * (t392 * t93 + t425 * t94 + t346) - g(2) * (t392 * t91 + t425 * t92 + t347) - g(3) * (-qJ(6) * t387 + t146 * t425 + t337) + t405 * t26 + t403 * t16 + t402 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t386, -t323, -t239, -t386, -t42, t156, -t106 * t160 + t246 - t408, t106 * t158 + t245 + t409, 0, 0, t156, t239, t42, t386, -t323, -t386, pkin(4) * t77 - t413 + (-t30 - t45) * t160 + (t29 + t373) * t158, t158 * t90 + t235 + t408 - 0.2e1 * t421, -t158 * t46 + t160 * t90 + t199 * t373 - t186 - t245 + t426, -t5 * pkin(4) - g(1) * t313 - g(2) * t314 - g(3) * t312 - t4 * qJ(5) - t29 * t45 + t30 * t373 - t46 * t90, t156, t42, -t239, -t386, t323, t386, -t413 + t416 * t77 + (t16 + t371) * t160 + (t11 - t372) * t158, t160 * t65 - t199 * t272 - 0.2e1 * t186 + t233 + t426, -t158 * t65 + (-0.2e1 * qJD(6) - t25) * t199 + 0.2e1 * t322 - t234, -t1 * t416 + t2 * qJ(5) - t26 * t65 - g(1) * (-qJ(6) * t53 + t313) - g(2) * (-qJ(6) * t51 + t314) - g(3) * (-qJ(6) * t98 + t312) + t372 * t16 + t371 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, t251, t436, t235 - t410 - t421, 0, 0, 0, 0, 0, 0, -t239, t436, -t251 (qJD(6) + t16) * t199 - t322 + t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t156 + t386, -t154 - t196, t233 - t411 - t435;];
tau_reg  = t6;
