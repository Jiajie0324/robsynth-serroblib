% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:35
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRP9_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP9_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP9_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP9_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:33:59
% EndTime: 2019-03-09 12:34:24
% DurationCPUTime: 10.86s
% Computational Cost: add. (20722->631), mult. (54983->878), div. (0->0), fcn. (44499->10), ass. (0->303)
t291 = sin(pkin(6));
t298 = cos(qJ(2));
t373 = qJD(1) * t298;
t276 = t291 * t373;
t290 = sin(pkin(11));
t295 = sin(qJ(4));
t292 = cos(pkin(11));
t429 = cos(qJ(4));
t357 = t429 * t292;
t319 = -t295 * t290 + t357;
t209 = t319 * t276;
t352 = qJD(4) * t429;
t371 = qJD(4) * t295;
t243 = t290 * t371 - t292 * t352;
t380 = t243 + t209;
t251 = t290 * t429 + t295 * t292;
t384 = t291 * t298;
t306 = t251 * t384;
t379 = -qJD(1) * t306 + t251 * qJD(4);
t296 = sin(qJ(2));
t328 = pkin(2) * t296 - qJ(3) * t298;
t376 = qJD(1) * t291;
t234 = t328 * t376;
t374 = qJD(1) * t296;
t356 = t291 * t374;
t293 = cos(pkin(6));
t427 = pkin(1) * t298;
t363 = t293 * t427;
t235 = -pkin(8) * t356 + qJD(1) * t363;
t177 = t292 * t234 - t290 * t235;
t383 = t292 * t298;
t311 = (pkin(3) * t296 - pkin(9) * t383) * t291;
t154 = qJD(1) * t311 + t177;
t178 = t290 * t234 + t292 * t235;
t334 = t290 * t276;
t161 = -pkin(9) * t334 + t178;
t424 = pkin(9) + qJ(3);
t266 = t424 * t290;
t267 = t424 * t292;
t432 = -t429 * t266 - t295 * t267;
t409 = t319 * qJD(3) + qJD(4) * t432 - t295 * t154 - t429 * t161;
t294 = sin(qJ(5));
t297 = cos(qJ(5));
t375 = qJD(1) * t293;
t278 = qJD(2) + t375;
t221 = t278 * t292 - t290 * t356;
t222 = t278 * t290 + t292 * t356;
t320 = t295 * t221 + t222 * t429;
t365 = t276 - qJD(4);
t147 = -t294 * t365 + t297 * t320;
t428 = pkin(1) * t296;
t378 = pkin(8) * t384 + t293 * t428;
t236 = t378 * qJD(1);
t210 = t278 * qJ(3) + t236;
t231 = (-pkin(2) * t298 - qJ(3) * t296 - pkin(1)) * t291;
t216 = qJD(1) * t231;
t155 = -t210 * t290 + t292 * t216;
t111 = -pkin(3) * t276 - pkin(9) * t222 + t155;
t213 = (qJD(2) * t328 - qJD(3) * t296) * t291;
t197 = qJD(1) * t213;
t372 = qJD(2) * t296;
t355 = t291 * t372;
t330 = qJD(1) * t355;
t362 = pkin(1) * qJD(2) * t293;
t336 = qJD(1) * t362;
t228 = -pkin(8) * t330 + t298 * t336;
t198 = qJD(3) * t278 + t228;
t150 = t292 * t197 - t290 * t198;
t307 = qJD(2) * t311;
t112 = qJD(1) * t307 + t150;
t156 = t292 * t210 + t290 * t216;
t125 = pkin(9) * t221 + t156;
t151 = t290 * t197 + t292 * t198;
t364 = qJD(1) * qJD(2);
t350 = t298 * t364;
t331 = t291 * t350;
t325 = t290 * t331;
t126 = -pkin(9) * t325 + t151;
t313 = -t111 * t352 - t295 * t112 + t125 * t371 - t429 * t126;
t33 = pkin(10) * t330 - t313;
t74 = t295 * t111 + t125 * t429;
t71 = -pkin(10) * t365 + t74;
t203 = -pkin(2) * t278 + qJD(3) - t235;
t165 = -pkin(3) * t221 + t203;
t167 = -t429 * t221 + t222 * t295;
t86 = pkin(4) * t167 - pkin(10) * t320 + t165;
t40 = t294 * t86 + t297 * t71;
t305 = qJD(2) * t306;
t303 = qJD(1) * t305;
t431 = qJD(4) * t320;
t124 = t303 + t431;
t229 = pkin(8) * t331 + t296 * t336;
t193 = pkin(3) * t325 + t229;
t312 = t221 * t352 - t222 * t371 - t295 * t325;
t354 = qJD(2) * t384;
t332 = t292 * t354;
t321 = t429 * t332;
t301 = -qJD(1) * t321 - t312;
t68 = t124 * pkin(4) + pkin(10) * t301 + t193;
t7 = -qJD(5) * t40 - t294 * t33 + t297 * t68;
t341 = t297 * t365;
t369 = qJD(5) * t294;
t80 = qJD(5) * t341 - t294 * t330 + t297 * t301 + t320 * t369;
t302 = t80 * qJ(6) + t7;
t426 = t124 * pkin(5);
t1 = -t147 * qJD(6) + t302 + t426;
t145 = t294 * t320 + t341;
t25 = -qJ(6) * t145 + t40;
t441 = qJD(5) + t167;
t416 = t25 * t441;
t450 = -t1 - t416;
t449 = -pkin(10) * t356 + t409;
t201 = pkin(3) * t334 + t236;
t448 = -t379 * pkin(4) - t380 * pkin(10) + t201;
t179 = t209 * t294 - t297 * t356;
t345 = t243 * t294 + t179;
t39 = -t294 * t71 + t297 * t86;
t24 = -qJ(6) * t147 + t39;
t18 = pkin(5) * t441 + t24;
t368 = qJD(5) * t297;
t348 = -t294 * t68 - t297 * t33 - t86 * t368 + t71 * t369;
t370 = qJD(5) * t147;
t81 = -t294 * t301 - t297 * t330 + t370;
t322 = qJ(6) * t81 + t348;
t2 = -qJD(6) * t145 - t322;
t447 = -t18 * t441 + t2;
t446 = t40 * t441 + t7;
t442 = -t39 * t441 - t348;
t445 = t167 ^ 2;
t207 = -t295 * t266 + t267 * t429;
t407 = qJD(3) * t251 + qJD(4) * t207 + t154 * t429 - t295 * t161;
t444 = t145 * t167;
t443 = t167 * t365;
t353 = t251 * t368;
t310 = t353 - t345;
t440 = t320 ^ 2;
t287 = t291 ^ 2;
t439 = -0.2e1 * t287 * t364;
t408 = pkin(4) * t356 + t407;
t437 = t449 * t294 + t448 * t297;
t285 = -pkin(3) * t292 - pkin(2);
t190 = -pkin(4) * t319 - pkin(10) * t251 + t285;
t436 = -t190 * t368 + t448 * t294 - t449 * t297;
t385 = t291 * t296;
t241 = t290 * t385 - t293 * t292;
t242 = t290 * t293 + t292 * t385;
t181 = t241 * t429 + t242 * t295;
t182 = -t295 * t241 + t242 * t429;
t279 = pkin(8) * t385;
t233 = t279 + (-pkin(2) - t427) * t293;
t188 = t241 * pkin(3) + t233;
t102 = t181 * pkin(4) - t182 * pkin(10) + t188;
t230 = qJ(3) * t293 + t378;
t172 = -t230 * t290 + t292 * t231;
t133 = -pkin(3) * t384 - pkin(9) * t242 + t172;
t173 = t292 * t230 + t290 * t231;
t153 = -pkin(9) * t241 + t173;
t91 = t295 * t133 + t429 * t153;
t89 = -pkin(10) * t384 + t91;
t54 = t294 * t102 + t297 * t89;
t435 = t145 * t320;
t434 = t147 * t320;
t433 = t276 * t320;
t195 = t297 * t207;
t138 = t294 * t190 + t195;
t430 = t147 ^ 2;
t289 = t298 ^ 2;
t425 = t145 * pkin(5);
t423 = -qJ(6) - pkin(10);
t422 = t18 - t24;
t180 = t209 * t297 + t294 * t356;
t323 = qJ(6) * t243 - qJD(6) * t251;
t421 = -qJ(6) * t180 - t323 * t297 - (-t195 + (qJ(6) * t251 - t190) * t294) * qJD(5) + t437 - t379 * pkin(5);
t420 = -(-qJD(5) * t207 + t323) * t294 + t436 + (-t179 + t353) * qJ(6);
t419 = qJD(5) * t138 + t437;
t418 = t207 * t369 + t436;
t415 = t296 * t74;
t413 = t80 * t294;
t412 = t81 * t297;
t411 = pkin(5) * t310 + t408;
t410 = -t145 * t368 - t294 * t81;
t349 = qJD(5) * t423;
t394 = t167 * t294;
t105 = pkin(4) * t320 + pkin(10) * t167;
t73 = t111 * t429 - t295 * t125;
t50 = t294 * t105 + t297 * t73;
t406 = -qJ(6) * t394 + t297 * qJD(6) + t294 * t349 - t50;
t393 = t167 * t297;
t49 = t297 * t105 - t294 * t73;
t405 = -pkin(5) * t320 - qJ(6) * t393 - t294 * qJD(6) + t297 * t349 - t49;
t404 = t124 * t181;
t403 = t124 * t319;
t402 = t145 * t441;
t401 = t147 * t145;
t400 = t147 * t441;
t399 = t147 * t294;
t398 = t155 * t296;
t397 = t156 * t296;
t396 = t441 * t320;
t395 = t441 * t294;
t392 = t320 * t167;
t390 = t251 * t294;
t389 = t251 * t297;
t388 = t287 * t289;
t387 = t287 * qJD(1) ^ 2;
t386 = t290 * t298;
t382 = t294 * t124;
t118 = t297 * t124;
t237 = -pkin(8) * t355 + t298 * t362;
t220 = qJD(3) * t293 + t237;
t160 = t290 * t213 + t292 * t220;
t377 = t296 ^ 2 - t289;
t367 = qJD(2) - t278;
t361 = t289 * t387;
t360 = t298 * t387;
t359 = t294 * t384;
t347 = qJD(6) + t425;
t53 = t297 * t102 - t294 * t89;
t344 = t243 * t297 + t180;
t137 = t297 * t190 - t207 * t294;
t159 = t292 * t213 - t290 * t220;
t343 = t441 ^ 2;
t340 = t441 * t297;
t339 = t365 * t291;
t338 = t278 + t375;
t337 = qJD(2) * t292 - t221;
t38 = -t111 * t371 + t429 * t112 - t125 * t352 - t295 * t126;
t335 = t298 * t357;
t333 = t290 * t354;
t329 = pkin(1) * t439;
t90 = t133 * t429 - t295 * t153;
t327 = t294 * t40 + t297 * t39;
t326 = -t221 * t292 + t222 * t290;
t324 = t287 * t296 * t350;
t88 = pkin(4) * t384 - t90;
t162 = t182 * t294 + t297 * t384;
t130 = t159 + t307;
t149 = -pkin(9) * t333 + t160;
t47 = t295 * t130 + t133 * t352 + t429 * t149 - t153 * t371;
t44 = pkin(10) * t355 + t47;
t140 = t241 * t352 - t321 + (qJD(4) * t242 + t333) * t295;
t141 = qJD(4) * t182 + t305;
t238 = t378 * qJD(2);
t202 = pkin(3) * t333 + t238;
t79 = t141 * pkin(4) + t140 * pkin(10) + t202;
t9 = t102 * t368 + t294 * t79 + t297 * t44 - t369 * t89;
t317 = t337 * t376;
t316 = (qJD(2) * t290 - t222) * t376;
t70 = pkin(4) * t365 - t73;
t315 = -pkin(10) * t124 + t441 * t70;
t48 = t130 * t429 - t133 * t371 - t295 * t149 - t153 * t352;
t309 = -t251 * t369 - t344;
t308 = t298 * t316;
t34 = -pkin(4) * t330 - t38;
t304 = -qJ(3) * t372 + (-pkin(2) * qJD(2) + qJD(3) - t203) * t298;
t10 = -qJD(5) * t54 - t294 * t44 + t297 * t79;
t45 = -pkin(4) * t355 - t48;
t17 = pkin(5) * t81 + t34;
t286 = -pkin(5) * t297 - pkin(4);
t272 = t423 * t297;
t271 = t423 * t294;
t261 = t296 * t360;
t255 = -0.2e1 * t324;
t245 = -t279 + t363;
t176 = pkin(5) * t390 - t432;
t163 = t182 * t297 - t359;
t142 = t145 ^ 2;
t115 = -qJ(6) * t390 + t138;
t106 = -pkin(5) * t319 - qJ(6) * t389 + t137;
t93 = -qJD(5) * t359 - t140 * t294 + t182 * t368 - t297 * t355;
t92 = qJD(5) * t162 + t297 * t140 - t294 * t355;
t65 = -t142 + t430;
t64 = t162 * pkin(5) + t88;
t60 = -pkin(5) * t394 + t74;
t58 = t141 * t441 + t404;
t57 = t379 * t441 - t403;
t56 = t347 + t70;
t52 = t400 - t81;
t51 = -t80 + t402;
t42 = -qJ(6) * t162 + t54;
t36 = t145 * t395 - t412;
t35 = t147 * t340 - t413;
t32 = -t297 * t343 - t382 - t434;
t31 = t340 * t441 + t382 - t434;
t30 = -t294 * t343 + t118 - t435;
t29 = -t395 * t441 + t118 + t435;
t27 = pkin(5) * t181 - qJ(6) * t163 + t53;
t23 = t145 * t93 + t162 * t81;
t22 = -t147 * t92 - t163 * t80;
t21 = t93 * pkin(5) + t45;
t20 = t145 * t310 + t390 * t81;
t19 = t147 * t309 - t389 * t80;
t16 = -t124 * t162 - t141 * t145 - t181 * t81 - t441 * t93;
t15 = t124 * t163 + t141 * t147 - t181 * t80 - t441 * t92;
t14 = -t145 * t379 - t251 * t382 - t310 * t441 + t319 * t81;
t13 = t118 * t251 + t147 * t379 + t309 * t441 + t319 * t80;
t12 = (-t80 - t444) * t297 - t147 * t395 + t410;
t11 = (t80 - t444) * t297 + t441 * t399 + t410;
t8 = t145 * t92 - t147 * t93 + t162 * t80 - t163 * t81;
t5 = t345 * t147 + t344 * t145 + (t413 - t412 + (t145 * t294 - t147 * t297) * qJD(5)) * t251;
t4 = -qJ(6) * t93 - qJD(6) * t162 + t9;
t3 = t141 * pkin(5) + t92 * qJ(6) - t163 * qJD(6) + t10;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t324, t377 * t439, t338 * t354, t255, -t338 * t355, 0, -t229 * t293 - t238 * t278 + t296 * t329, -t228 * t293 - t237 * t278 + t298 * t329 (t228 * t298 + t229 * t296 + (-t235 * t298 - t236 * t296) * qJD(2) + (t237 * t298 + t238 * t296 + (-t245 * t298 - t296 * t378) * qJD(2)) * qJD(1)) * t291, t228 * t378 - t229 * t245 - t235 * t238 + t236 * t237 (qJD(1) * t242 + t222) * t332 ((-t241 * t292 - t242 * t290) * qJD(1) - t326) * t354 (t222 * t385 + (t242 * t385 - 0.2e1 * t292 * t388) * qJD(1)) * qJD(2) (qJD(1) * t241 - t221) * t333 (t221 * t385 + (-t241 * t385 + 0.2e1 * t290 * t388) * qJD(1)) * qJD(2), t255, -t238 * t221 + t229 * t241 + ((-qJD(1) * t159 - t150) * t298 + (t203 * t386 + t398 + (t172 * t296 + t233 * t386) * qJD(1)) * qJD(2)) * t291, t238 * t222 + t229 * t242 + ((qJD(1) * t160 + t151) * t298 + (t203 * t383 - t397 + (-t173 * t296 + t233 * t383) * qJD(1)) * qJD(2)) * t291, -t150 * t242 - t151 * t241 - t159 * t222 + t160 * t221 + (-t155 * t292 - t156 * t290 + (-t172 * t292 - t173 * t290) * qJD(1)) * t354, t150 * t172 + t151 * t173 + t155 * t159 + t156 * t160 + t203 * t238 + t229 * t233, -t140 * t320 - t182 * t301, -t182 * t124 + t140 * t167 - t141 * t320 + t181 * t301, t140 * t365 + (-t312 * t298 + (t320 * t296 + (-t289 * t291 * t357 + t182 * t296) * qJD(1)) * qJD(2)) * t291, t141 * t167 + t404, t141 * t365 + (t124 * t298 + (-qJD(1) * t181 - t167) * t372) * t291 (-t287 * t373 - t339) * t372, -t48 * t365 + t202 * t167 + t188 * t124 + t193 * t181 + t165 * t141 + (-t38 * t298 + (qJD(1) * t90 + t73) * t372) * t291, t47 * t365 + t202 * t320 + t188 * t312 + t193 * t182 - t165 * t140 + (-t313 * t298 + (-t415 + (t188 * t335 - t296 * t91) * qJD(1)) * qJD(2)) * t291, -t91 * t124 + t73 * t140 - t74 * t141 - t47 * t167 + t181 * t313 - t38 * t182 + t301 * t90 - t320 * t48, t165 * t202 + t188 * t193 - t313 * t91 + t38 * t90 + t47 * t74 + t48 * t73, t22, t8, t15, t23, t16, t58, t10 * t441 + t124 * t53 + t141 * t39 + t145 * t45 + t162 * t34 + t181 * t7 + t70 * t93 + t81 * t88, -t124 * t54 - t141 * t40 + t147 * t45 + t163 * t34 + t181 * t348 - t441 * t9 - t70 * t92 - t80 * t88, -t10 * t147 - t145 * t9 + t162 * t348 - t163 * t7 + t39 * t92 - t40 * t93 + t53 * t80 - t54 * t81, t10 * t39 + t34 * t88 - t348 * t54 + t40 * t9 + t45 * t70 + t53 * t7, t22, t8, t15, t23, t16, t58, t1 * t181 + t124 * t27 + t141 * t18 + t145 * t21 + t162 * t17 + t3 * t441 + t56 * t93 + t64 * t81, -t124 * t42 - t141 * t25 + t147 * t21 + t163 * t17 - t181 * t2 - t4 * t441 - t56 * t92 - t64 * t80, -t1 * t163 - t145 * t4 - t147 * t3 - t162 * t2 + t18 * t92 - t25 * t93 + t27 * t80 - t42 * t81, t1 * t27 + t17 * t64 + t18 * t3 + t2 * t42 + t21 * t56 + t25 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t261, t377 * t387, t367 * t276, t261, -t367 * t356, 0, t236 * t278 + t387 * t428 - t229, pkin(1) * t360 + t235 * t278 - t228, 0, 0, t292 * t308 ((-t290 ^ 2 + t292 ^ 2) * qJD(2) + t326) * t276, t292 * t361 + t296 * t316, -t337 * t334, -t290 * t361 + t296 * t317, t261, t236 * t221 - t229 * t292 + (t177 * t298 + t290 * t304 - t398) * t376, -t236 * t222 + t229 * t290 + (-t178 * t298 + t292 * t304 + t397) * t376, t177 * t222 - t178 * t221 + (qJD(3) * t221 + t155 * t276 + t151) * t292 + (qJD(3) * t222 + t156 * t276 - t150) * t290, -t229 * pkin(2) - t155 * t177 - t156 * t178 - t203 * t236 + (-t155 * t290 + t156 * t292) * qJD(3) + (-t150 * t290 + t151 * t292) * qJ(3), -t251 * t301 - t320 * t380, -t251 * t124 + t167 * t380 - t301 * t319 - t320 * t379 (qJD(2) * t251 - t320) * t356 + t380 * t365, t167 * t379 - t403 (qJD(2) * t319 + t167) * t356 + t379 * t365, t339 * t374, t285 * t124 - t193 * t319 - t201 * t167 + t379 * t165 + (qJD(2) * t432 - t73) * t356 + t407 * t365, t285 * t312 + t193 * t251 - t201 * t320 - t380 * t165 + (t415 + (-t207 * t296 + t285 * t335) * qJD(2)) * t376 + t409 * t365, -t207 * t124 - t167 * t409 - t38 * t251 + t301 * t432 - t313 * t319 + t320 * t407 - t379 * t74 + t380 * t73, -t165 * t201 + t193 * t285 - t207 * t313 + t38 * t432 - t407 * t73 + t409 * t74, t19, t5, t13, t20, t14, t57, t137 * t124 + t145 * t408 + t310 * t70 - t319 * t7 + t34 * t390 + t379 * t39 - t419 * t441 - t432 * t81, -t138 * t124 + t147 * t408 + t309 * t70 - t319 * t348 + t34 * t389 - t379 * t40 + t418 * t441 + t432 * t80, t137 * t80 - t138 * t81 + t40 * t179 + t39 * t180 + t327 * t243 + t419 * t147 + t418 * t145 + (t348 * t294 - t7 * t297 + (t294 * t39 - t297 * t40) * qJD(5)) * t251, t7 * t137 - t138 * t348 - t34 * t432 - t39 * t419 - t40 * t418 + t408 * t70, t19, t5, t13, t20, t14, t57, -t1 * t319 + t106 * t124 + t145 * t411 + t17 * t390 + t176 * t81 + t18 * t379 + t310 * t56 - t421 * t441, -t115 * t124 + t147 * t411 + t17 * t389 - t176 * t80 + t2 * t319 - t25 * t379 + t309 * t56 + t420 * t441, t106 * t80 - t115 * t81 + t345 * t25 + t344 * t18 + t421 * t147 + t420 * t145 + (-t1 * t297 - t2 * t294 + (t18 * t294 - t25 * t297) * qJD(5)) * t251, t1 * t106 + t2 * t115 + t17 * t176 - t18 * t421 - t25 * t420 + t411 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t308, t298 * t317, -t221 ^ 2 - t222 ^ 2, t155 * t222 - t156 * t221 + t229, 0, 0, 0, 0, 0, 0, t303 + 0.2e1 * t431 - t433, -t301 + t443, -t440 - t445, t167 * t74 + t320 * t73 + t193, 0, 0, 0, 0, 0, 0, t30, t32, t11, t442 * t294 + t446 * t297 - t70 * t320, 0, 0, 0, 0, 0, 0, t30, t32, t11, t447 * t294 - t450 * t297 - t56 * t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t392, t440 - t445, -t301 - t443, -t392, -t251 * t331 - t433, t330, -t165 * t320 - t365 * t74 + t38, t165 * t167 - t365 * t73 + t313, 0, 0, t35, t12, t31, t36, t29, -t396, -pkin(4) * t81 - t74 * t145 - t39 * t320 - t34 * t297 + (-pkin(10) * t368 - t49) * t441 + t315 * t294, pkin(4) * t80 - t74 * t147 + t40 * t320 + t34 * t294 + (pkin(10) * t369 + t50) * t441 + t315 * t297, t50 * t145 + t49 * t147 + ((-t81 + t370) * pkin(10) + t442) * t297 + ((qJD(5) * t145 - t80) * pkin(10) - t446) * t294, -t34 * pkin(4) - t39 * t49 - t40 * t50 - t70 * t74 + (-qJD(5) * t327 - t7 * t294 - t297 * t348) * pkin(10), t35, t12, t31, t36, t29, -t396, t271 * t124 - t60 * t145 - t17 * t297 - t18 * t320 + t286 * t81 + t405 * t441 + (t167 * t56 + (t56 + t425) * qJD(5)) * t294, t56 * t393 + t272 * t124 - t60 * t147 + t17 * t294 + t25 * t320 - t286 * t80 - t406 * t441 + (pkin(5) * t399 + t297 * t56) * qJD(5), -t406 * t145 - t405 * t147 + t271 * t80 + t272 * t81 + t450 * t294 + t447 * t297, t1 * t271 + t17 * t286 - t2 * t272 + (pkin(5) * t369 - t60) * t56 + t406 * t25 + t405 * t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, t65, t51, -t401, t52, t124, -t70 * t147 + t446, t145 * t70 - t442, 0, 0, t401, t65, t51, -t401, t52, t124, 0.2e1 * t426 + t416 + (-t347 - t56) * t147 + t302, -pkin(5) * t430 + t441 * t24 + (qJD(6) + t56) * t145 + t322, pkin(5) * t80 - t145 * t422, t422 * t25 + (-t56 * t147 + t1) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81 + t400, -t80 - t402, -t142 - t430, t145 * t25 + t147 * t18 + t17;];
tauc_reg  = t6;
