% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:35
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRP9_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP9_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP9_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP9_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:33:58
% EndTime: 2019-03-09 12:34:06
% DurationCPUTime: 2.74s
% Computational Cost: add. (5485->322), mult. (14362->590), div. (0->0), fcn. (14571->10), ass. (0->159)
t127 = sin(qJ(5));
t121 = t127 ^ 2;
t130 = cos(qJ(5));
t122 = t130 ^ 2;
t183 = t121 - t122;
t160 = t183 * qJD(5);
t123 = sin(pkin(11));
t125 = cos(pkin(11));
t128 = sin(qJ(4));
t131 = cos(qJ(4));
t101 = t123 * t131 + t125 * t128;
t184 = t131 * t125;
t100 = t123 * t128 - t184;
t96 = t100 * qJD(4);
t146 = qJ(6) * t96 - qJD(6) * t101;
t97 = t101 * qJD(4);
t156 = pkin(4) * t97 + pkin(10) * t96;
t200 = pkin(9) + qJ(3);
t106 = t200 * t123;
t107 = t200 * t125;
t178 = qJD(4) * t131;
t61 = -qJD(3) * t184 + t106 * t178 + (qJD(3) * t123 + qJD(4) * t107) * t128;
t164 = t127 * t61 + t130 * t156;
t116 = -pkin(3) * t125 - pkin(2);
t73 = pkin(4) * t100 - pkin(10) * t101 + t116;
t79 = -t106 * t128 + t107 * t131;
t74 = t130 * t79;
t15 = pkin(5) * t97 + t146 * t130 + (-t74 + (qJ(6) * t101 - t73) * t127) * qJD(5) + t164;
t176 = qJD(5) * t130;
t168 = t101 * t176;
t174 = t127 * t156 - t130 * t61 + t73 * t176;
t16 = -qJ(6) * t168 + (-qJD(5) * t79 + t146) * t127 + t174;
t189 = t101 * t130;
t45 = -t127 * t79 + t130 * t73;
t33 = pkin(5) * t100 - qJ(6) * t189 + t45;
t190 = t101 * t127;
t46 = t127 * t73 + t74;
t34 = -qJ(6) * t190 + t46;
t207 = -t127 * t16 - t130 * t15 + (t127 * t33 - t130 * t34) * qJD(5);
t132 = cos(qJ(2));
t136 = t100 * t132;
t126 = cos(pkin(6));
t124 = sin(pkin(6));
t129 = sin(qJ(2));
t188 = t124 * t129;
t94 = t123 * t188 - t125 * t126;
t95 = t123 * t126 + t125 * t188;
t64 = t128 * t95 + t131 * t94;
t137 = t64 * qJD(4);
t182 = qJD(2) * t124;
t134 = -t136 * t182 - t137;
t181 = qJD(2) * t129;
t167 = t124 * t181;
t187 = t124 * t132;
t65 = -t128 * t94 + t131 * t95;
t56 = t127 * t65 + t130 * t187;
t26 = t56 * qJD(5) - t127 * t167 - t130 * t134;
t180 = qJD(2) * t132;
t166 = t124 * t180;
t158 = t123 * t166;
t102 = pkin(3) * t158;
t202 = pkin(1) * t129;
t173 = t126 * t202;
t201 = pkin(10) * t100;
t48 = t65 * qJD(4) + t101 * t166;
t133 = t48 * pkin(4) + t102 + pkin(10) * t137 + (t173 + (pkin(8) + t201) * t187) * qJD(2);
t172 = pkin(8) * t187;
t86 = t172 + (qJ(3) + t202) * t126;
t150 = -pkin(2) * t132 - qJ(3) * t129;
t87 = (-pkin(1) + t150) * t124;
t59 = -t123 * t86 + t125 * t87;
t41 = -pkin(3) * t187 - t95 * pkin(9) + t59;
t60 = t123 * t87 + t125 * t86;
t52 = -pkin(9) * t94 + t60;
t197 = t128 * t41 + t131 * t52;
t24 = -pkin(10) * t187 + t197;
t89 = pkin(8) * t188 + (-pkin(1) * t132 - pkin(2)) * t126;
t72 = t94 * pkin(3) + t89;
t31 = t64 * pkin(4) - t65 * pkin(10) + t72;
t14 = t127 * t31 + t130 * t24;
t179 = qJD(4) * t128;
t186 = t125 * t132;
t81 = (-qJD(3) * t129 + (pkin(2) * t129 - qJ(3) * t132) * qJD(2)) * t124;
t90 = -t126 * pkin(1) * t180 + pkin(8) * t167;
t85 = qJD(3) * t126 - t90;
t54 = -t123 * t85 + t125 * t81;
t39 = (pkin(3) * t129 - pkin(9) * t186) * t182 + t54;
t55 = t123 * t81 + t125 * t85;
t51 = -pkin(9) * t158 + t55;
t11 = -t128 * t39 - t131 * t51 - t41 * t178 + t52 * t179;
t9 = pkin(10) * t167 - t11;
t4 = -t14 * qJD(5) - t127 * t9 + t130 * t133;
t170 = t127 * t187;
t57 = t130 * t65 - t170;
t1 = pkin(5) * t48 + qJ(6) * t26 - qJD(6) * t57 + t4;
t27 = -qJD(5) * t170 + t127 * t134 - t130 * t167 + t65 * t176;
t177 = qJD(5) * t127;
t3 = -t127 * t133 - t130 * t9 - t31 * t176 + t24 * t177;
t2 = -qJ(6) * t27 - qJD(6) * t56 - t3;
t13 = -t127 * t24 + t130 * t31;
t6 = pkin(5) * t64 - qJ(6) * t57 + t13;
t7 = -qJ(6) * t56 + t14;
t206 = -t1 * t130 - t127 * t2 + (t127 * t6 - t130 * t7) * qJD(5);
t205 = t132 ^ 2;
t204 = 0.2e1 * t116;
t203 = 0.2e1 * t124;
t199 = -qJ(6) - pkin(10);
t198 = -t127 * t27 - t56 * t176;
t196 = t101 * t96;
t195 = t127 * t26;
t62 = t101 * qJD(3) + t79 * qJD(4);
t194 = t127 * t62;
t193 = t127 * t96;
t192 = t130 * t62;
t191 = t130 * t96;
t185 = t127 * t130;
t175 = -0.2e1 * pkin(4) * qJD(5);
t171 = pkin(5) * t177;
t119 = t124 ^ 2;
t169 = t119 * t180;
t165 = t127 * t176;
t163 = -t128 * t52 + t131 * t41;
t162 = qJD(5) * t199;
t161 = -0.4e1 * t101 * t185;
t159 = t129 * t169;
t157 = 0.2e1 * (t123 ^ 2 + t125 ^ 2) * qJD(3);
t155 = pkin(4) * t96 - pkin(10) * t97;
t23 = pkin(4) * t187 - t163;
t154 = pkin(4) * t101 + t201;
t152 = -t127 * t7 - t130 * t6;
t149 = -t123 * t54 + t125 * t55;
t12 = -t128 * t51 + t131 * t39 - t52 * t178 - t41 * t179;
t78 = t106 * t131 + t107 * t128;
t10 = -pkin(4) * t167 - t12;
t145 = t10 * t127 + t23 * t176;
t144 = t10 * t130 - t23 * t177;
t143 = -t130 * t26 - t57 * t177;
t142 = t127 * t48 + t64 * t176;
t141 = -t130 * t48 + t64 * t177;
t140 = t100 * t176 + t127 * t97;
t139 = t168 - t193;
t138 = t101 * t177 + t191;
t91 = (t172 + t173) * qJD(2);
t135 = (t150 * qJD(2) + qJD(3) * t132) * t124;
t117 = -pkin(5) * t130 - pkin(4);
t109 = t199 * t130;
t108 = t199 * t127;
t99 = t101 ^ 2;
t93 = -qJD(6) * t127 + t130 * t162;
t92 = qJD(6) * t130 + t127 * t162;
t77 = t102 + t91;
t71 = -t100 * t177 + t130 * t97;
t63 = pkin(5) * t190 + t78;
t35 = t139 * pkin(5) + t62;
t21 = -t46 * qJD(5) + t164;
t20 = t79 * t177 - t174;
t17 = pkin(5) * t56 + t23;
t5 = pkin(5) * t27 + t10;
t8 = [0, 0, 0, 0.2e1 * t159, 0.2e1 * (-t129 ^ 2 + t205) * t119 * qJD(2), 0.2e1 * t126 * t166, -0.2e1 * t126 * t167, 0, -0.2e1 * pkin(1) * t119 * t181 - 0.2e1 * t126 * t91, -0.2e1 * pkin(1) * t169 + 0.2e1 * t90 * t126, 0.2e1 * t91 * t94 + 0.2e1 * (-t132 * t54 + (t123 * t132 * t89 + t129 * t59) * qJD(2)) * t124, 0.2e1 * t91 * t95 + 0.2e1 * (t132 * t55 + (-t129 * t60 + t89 * t186) * qJD(2)) * t124, -0.2e1 * t54 * t95 - 0.2e1 * t55 * t94 + 0.2e1 * (-t123 * t60 - t125 * t59) * t166, 0.2e1 * t54 * t59 + 0.2e1 * t55 * t60 + 0.2e1 * t89 * t91, 0.2e1 * t65 * t134, -0.2e1 * t134 * t64 - 0.2e1 * t65 * t48 (t132 * t137 + (t100 * t124 * t205 + t65 * t129) * qJD(2)) * t203 (t132 * t48 - t64 * t181) * t203, -0.2e1 * t159, 0.2e1 * t72 * t48 + 0.2e1 * t77 * t64 + 0.2e1 * (-t12 * t132 + t163 * t181) * t124, 0.2e1 * t77 * t65 - 0.2e1 * t72 * t137 + 0.2e1 * (-t11 * t132 + (-t197 * t129 - t72 * t136) * qJD(2)) * t124, -0.2e1 * t57 * t26, 0.2e1 * t26 * t56 - 0.2e1 * t27 * t57, -0.2e1 * t26 * t64 + 0.2e1 * t48 * t57, -0.2e1 * t27 * t64 - 0.2e1 * t48 * t56, 0.2e1 * t64 * t48, 0.2e1 * t10 * t56 + 0.2e1 * t13 * t48 + 0.2e1 * t23 * t27 + 0.2e1 * t4 * t64, 0.2e1 * t10 * t57 - 0.2e1 * t14 * t48 - 0.2e1 * t23 * t26 + 0.2e1 * t3 * t64, -0.2e1 * t1 * t57 - 0.2e1 * t2 * t56 + 0.2e1 * t26 * t6 - 0.2e1 * t27 * t7, 0.2e1 * t1 * t6 + 0.2e1 * t17 * t5 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, t166, -t167, 0, -t91, t90, t123 * t135 - t91 * t125, t91 * t123 + t125 * t135 (t123 * t95 - t125 * t94) * qJD(3) + t149, -pkin(2) * t91 + (-t123 * t59 + t125 * t60) * qJD(3) + t149 * qJ(3), t101 * t134 - t65 * t96, -t100 * t134 - t101 * t48 + t96 * t64 - t65 * t97 (t101 * t181 + t132 * t96) * t124 (-t100 * t181 + t132 * t97) * t124, 0, t77 * t100 + t116 * t48 + t72 * t97 + (t132 * t62 - t78 * t181) * t124, t77 * t101 - t72 * t96 - t116 * t137 + (-t61 * t132 + (-t116 * t136 - t79 * t129) * qJD(2)) * t124, t101 * t143 - t57 * t191 -(-t127 * t57 - t130 * t56) * t96 + (t195 - t130 * t27 + (t127 * t56 - t130 * t57) * qJD(5)) * t101, -t100 * t26 - t101 * t141 - t64 * t191 + t57 * t97, -t100 * t27 - t101 * t142 + t64 * t193 - t56 * t97, t100 * t48 + t64 * t97, t100 * t4 + t101 * t145 + t13 * t97 - t23 * t193 + t21 * t64 + t27 * t78 + t45 * t48 + t56 * t62, t100 * t3 + t101 * t144 - t14 * t97 - t23 * t191 + t20 * t64 - t26 * t78 - t46 * t48 + t57 * t62, t206 * t101 - t15 * t57 - t152 * t96 - t16 * t56 + t26 * t33 - t27 * t34, t1 * t33 + t15 * t6 + t16 * t7 + t17 * t35 + t2 * t34 + t5 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157, qJ(3) * t157, -0.2e1 * t196, 0.2e1 * t100 * t96 - 0.2e1 * t101 * t97, 0, 0, 0, t97 * t204, -t96 * t204, -0.2e1 * t122 * t196 - 0.2e1 * t165 * t99, 0.2e1 * t99 * t160 - t96 * t161, -0.2e1 * t100 * t138 + 0.2e1 * t97 * t189, -0.2e1 * t100 * t139 - 0.2e1 * t97 * t190, 0.2e1 * t100 * t97, -0.2e1 * t78 * t193 + 0.2e1 * t100 * t21 + 0.2e1 * t45 * t97 + 0.2e1 * (t78 * t176 + t194) * t101, -0.2e1 * t78 * t191 + 0.2e1 * t100 * t20 - 0.2e1 * t46 * t97 + 0.2e1 * (-t78 * t177 + t192) * t101, -0.2e1 * (-t127 * t34 - t130 * t33) * t96 + 0.2e1 * t207 * t101, 0.2e1 * t15 * t33 + 0.2e1 * t16 * t34 + 0.2e1 * t35 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, t125 * t166, 0, t91, 0, 0, 0, 0, 0, t48, t134, 0, 0, 0, 0, 0, -t141, -t142, -t143 + t198, -t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t96, 0, 0, 0, 0, 0, t71, -t140 -(-t121 - t122) * t96, -t207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, -t48, t167, t12, t11, t57 * t176 - t195, t143 + t198, t142, -t141, 0, -pkin(4) * t27 - pkin(10) * t142 - t144, pkin(4) * t26 + pkin(10) * t141 + t145, qJD(5) * t152 - t1 * t127 + t108 * t26 + t109 * t27 + t130 * t2 - t56 * t92 - t57 * t93, t1 * t108 - t109 * t2 + t117 * t5 + t17 * t171 + t6 * t93 + t7 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t97, 0, -t62, t61, -t101 * t160 - t96 * t185, qJD(5) * t161 + t183 * t96, t140, t71, 0, -t192 + t155 * t127 + (t127 * t78 - t130 * t154) * qJD(5), t194 + t155 * t130 + (t127 * t154 + t130 * t78) * qJD(5) (-t101 * t93 + t108 * t96 + t16 + (t101 * t109 - t33) * qJD(5)) * t130 + (-t101 * t92 - t109 * t96 - t15 + (t101 * t108 - t34) * qJD(5)) * t127, t108 * t15 - t109 * t16 + t117 * t35 + t171 * t63 + t33 * t93 + t34 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127 * t92 + t130 * t93 + (-t108 * t127 - t109 * t130) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t165, -0.2e1 * t160, 0, 0, 0, t127 * t175, t130 * t175, -0.2e1 * t127 * t93 + 0.2e1 * t130 * t92 + 0.2e1 * (-t108 * t130 + t109 * t127) * qJD(5), 0.2e1 * t108 * t93 - 0.2e1 * t109 * t92 + 0.2e1 * t117 * t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, -t27, t48, t4, t3, pkin(5) * t26, t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t138, -t139, t97, t21, t20, t138 * pkin(5), t15 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, -t176, 0, -t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, -t177, 0, -pkin(10) * t176, pkin(10) * t177, -pkin(5) * t176, t93 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
