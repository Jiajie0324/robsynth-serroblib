% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRRP9_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP9_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP9_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP9_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP9_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP9_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:34:49
% EndTime: 2019-05-06 18:35:18
% DurationCPUTime: 14.53s
% Computational Cost: add. (107842->637), mult. (245484->914), div. (0->0), fcn. (200101->12), ass. (0->418)
t346 = sin(pkin(11));
t348 = cos(pkin(11));
t349 = cos(pkin(6));
t431 = qJD(1) * t349;
t406 = qJD(2) + t431;
t347 = sin(pkin(6));
t352 = sin(qJ(2));
t430 = qJD(1) * t352;
t415 = t347 * t430;
t319 = -t346 * t415 + t348 * t406;
t320 = t346 * t406 + t348 * t415;
t351 = sin(qJ(4));
t354 = cos(qJ(4));
t295 = t319 * t351 + t320 * t354;
t350 = sin(qJ(5));
t353 = cos(qJ(5));
t355 = cos(qJ(2));
t429 = qJD(1) * t355;
t414 = t347 * t429;
t397 = -qJD(4) + t414;
t270 = t295 * t350 + t353 * t397;
t272 = t353 * t295 - t350 * t397;
t230 = t272 * t270;
t424 = qJDD(1) * t347;
t325 = qJD(2) * t414 + t352 * t424;
t404 = qJDD(1) * t349 + qJDD(2);
t299 = t348 * t325 + t346 * t404;
t407 = t325 * t346 - t348 * t404;
t410 = t351 * t299 + t354 * t407;
t238 = -t295 * qJD(4) - t410;
t237 = qJDD(5) - t238;
t508 = -t230 + t237;
t519 = pkin(5) * t508;
t293 = -t354 * t319 + t320 * t351;
t239 = -t293 * qJD(4) + t299 * t354 - t351 * t407;
t423 = qJDD(1) * t355;
t383 = qJD(2) * t430 - t423;
t509 = t383 * t347;
t366 = qJDD(4) + t509;
t205 = -t270 * qJD(5) + t353 * t239 + t350 * t366;
t290 = qJD(5) + t293;
t249 = t290 * t270;
t183 = t249 + t205;
t518 = qJ(6) * t183;
t460 = t508 * t350;
t459 = t508 * t353;
t284 = t293 * t397;
t517 = t239 + t284;
t269 = t272 ^ 2;
t288 = t290 ^ 2;
t226 = -t269 - t288;
t268 = t270 ^ 2;
t411 = t239 * t350 - t353 * t366;
t204 = -qJD(5) * t272 - t411;
t240 = pkin(5) * t290 - qJ(6) * t272;
t492 = sin(qJ(1));
t493 = cos(qJ(1));
t381 = g(1) * t492 - g(2) * t493;
t368 = qJDD(1) * pkin(1) + t381;
t356 = qJD(1) ^ 2;
t484 = pkin(8) * t356;
t422 = t347 * t484;
t362 = t368 + t422;
t361 = t349 * t362;
t382 = g(1) * t493 + g(2) * t492;
t322 = -t356 * pkin(1) + pkin(8) * t424 - t382;
t444 = t347 * t352;
t408 = -g(3) * t444 + t355 * t322;
t287 = t352 * t361 + t408;
t399 = -pkin(2) * t355 - qJ(3) * t352;
t387 = t356 * t399;
t403 = t406 ^ 2;
t505 = -t403 * pkin(2) + t404 * qJ(3);
t343 = t347 ^ 2;
t514 = t343 * t355;
t358 = t387 * t514 + t287 + t505;
t392 = qJD(1) * t406;
t385 = t355 * t392;
t360 = -qJ(3) * t385 - t368;
t478 = t349 * g(3);
t398 = -t325 * qJ(3) - t478;
t359 = (-t422 + (-t423 + (0.2e1 * qJD(2) + t431) * t430) * pkin(2) + t360) * t347 + t398;
t200 = 0.2e1 * qJD(3) * t319 + t346 * t359 + t348 * t358;
t300 = -pkin(3) * t414 - pkin(9) * t320;
t316 = t319 ^ 2;
t186 = -pkin(3) * t316 - pkin(9) * t407 + t300 * t414 + t200;
t307 = t319 * t414;
t277 = -t307 - t299;
t447 = t320 * t319;
t364 = t509 + t447;
t428 = qJD(3) * t320;
t357 = pkin(3) * t364 + pkin(9) * t277 - t346 * t358 + t348 * t359 - 0.2e1 * t428;
t128 = t354 * t186 + t351 * t357;
t252 = pkin(4) * t293 - pkin(10) * t295;
t393 = t397 ^ 2;
t103 = -pkin(4) * t393 + pkin(10) * t366 - t293 * t252 + t128;
t409 = t352 * t322 - t355 * t361;
t260 = qJDD(3) - t404 * pkin(2) - t403 * qJ(3) + (t355 * g(3) + t387 * t444) * t347 + t409;
t206 = pkin(3) * t407 - t316 * pkin(9) + t320 * t300 + t260;
t388 = t397 * t295;
t135 = -t517 * pkin(10) + (-t238 - t388) * pkin(4) + t206;
t89 = t353 * t103 + t350 * t135;
t384 = t204 * qJ(6) - 0.2e1 * qJD(6) * t270 - t240 * t290 + t89;
t516 = -t384 + (t226 + t268) * pkin(5);
t513 = t346 * t364;
t512 = t348 * t364;
t448 = t295 * t293;
t363 = t366 - t448;
t511 = t351 * t363;
t510 = t354 * t363;
t507 = -t249 + t205;
t308 = t320 * t414;
t506 = t308 + t407;
t443 = t347 * t355;
t286 = g(3) * t443 + t409;
t504 = t352 * t286 + t355 * t287;
t191 = t230 + t237;
t461 = t191 * t353;
t153 = -t226 * t350 - t461;
t110 = t153 * t351 - t354 * t507;
t111 = t153 * t354 + t351 * t507;
t81 = t110 * t348 + t111 * t346;
t503 = -pkin(2) * t81 - pkin(3) * t110;
t219 = -t288 - t268;
t146 = t219 * t353 - t460;
t179 = (qJD(5) + t290) * t272 + t411;
t107 = t146 * t351 - t179 * t354;
t108 = t146 * t354 + t179 * t351;
t78 = t107 * t348 + t108 * t346;
t502 = -pkin(2) * t78 - pkin(3) * t107;
t180 = (qJD(5) - t290) * t272 + t411;
t125 = -t180 * t353 + t183 * t350;
t208 = -t268 - t269;
t100 = t125 * t354 + t208 * t351;
t99 = t125 * t351 - t208 * t354;
t70 = t100 * t346 + t348 * t99;
t501 = -pkin(2) * t70 - pkin(3) * t99;
t291 = t293 ^ 2;
t292 = t295 ^ 2;
t317 = t320 ^ 2;
t426 = qJD(6) * t272;
t263 = -0.2e1 * t426;
t88 = t103 * t350 - t353 * t135;
t374 = -t518 - t88 + t519;
t61 = t263 + t374;
t495 = pkin(5) * t61;
t494 = pkin(9) * t99;
t145 = t219 * t350 + t459;
t489 = pkin(4) * t145;
t462 = t191 * t350;
t152 = t226 * t353 - t462;
t488 = pkin(4) * t152;
t487 = pkin(4) * t351;
t486 = pkin(5) * t183;
t485 = pkin(8) * t347;
t483 = pkin(9) * t107;
t482 = pkin(9) * t110;
t123 = -t180 * t350 - t183 * t353;
t481 = pkin(10) * t123;
t480 = pkin(10) * t145;
t479 = pkin(10) * t152;
t71 = t100 * t348 - t346 * t99;
t477 = pkin(1) * (-t347 * t70 + (-t123 * t355 + t352 * t71) * t349) + (t123 * t352 + t355 * t71) * t485;
t79 = -t107 * t346 + t108 * t348;
t476 = pkin(1) * (-t347 * t78 + (-t145 * t355 + t352 * t79) * t349) + (t145 * t352 + t355 * t79) * t485;
t82 = -t110 * t346 + t111 * t348;
t475 = pkin(1) * (-t347 * t81 + (-t152 * t355 + t352 * t82) * t349) + (t152 * t352 + t355 * t82) * t485;
t474 = qJ(3) * t70;
t473 = qJ(3) * t78;
t472 = qJ(3) * t81;
t127 = t186 * t351 - t354 * t357;
t90 = -t127 * t354 + t128 * t351;
t471 = t346 * t90;
t470 = t348 * t90;
t469 = t350 * t61;
t468 = t353 * t61;
t467 = -pkin(2) * t123 + qJ(3) * t71;
t466 = -pkin(2) * t145 + qJ(3) * t79;
t465 = -pkin(2) * t152 + qJ(3) * t82;
t102 = -t366 * pkin(4) - t393 * pkin(10) + t252 * t295 + t127;
t464 = t102 * t350;
t463 = t102 * t353;
t458 = t206 * t351;
t457 = t206 * t354;
t246 = -t448 - t366;
t456 = t246 * t351;
t455 = t246 * t354;
t454 = t260 * t346;
t453 = t260 * t348;
t281 = -t509 + t447;
t452 = t281 * t346;
t451 = t281 * t348;
t450 = t290 * t350;
t449 = t290 * t353;
t445 = t343 * t356;
t442 = t349 * t352;
t441 = t349 * t356;
t418 = t352 * t514;
t336 = t356 * t418;
t324 = t336 + t404;
t439 = t352 * t324;
t323 = -t336 + t404;
t437 = t355 * t323;
t435 = -pkin(4) * t208 + pkin(10) * t125;
t434 = -pkin(4) * t179 + pkin(10) * t146;
t433 = -pkin(4) * t507 + pkin(10) * t153;
t421 = t351 * t230;
t420 = t354 * t230;
t419 = t352 ^ 2 * t445;
t417 = t355 * t448;
t416 = -pkin(4) * t354 - pkin(3);
t413 = -pkin(3) * t145 + pkin(9) * t108;
t412 = -pkin(3) * t152 + pkin(9) * t111;
t49 = t350 * t88 + t353 * t89;
t91 = t127 * t351 + t354 * t128;
t386 = t352 * t392;
t199 = t346 * (t368 * t442 + t408 + t505) - t348 * t398 + 0.2e1 * t428 + (t346 * t352 * pkin(8) * t441 - t348 * (t360 + (t383 + t386) * pkin(2)) + (t346 * (-pkin(2) * t429 - qJ(3) * t430) * t429 + t348 * t484) * t347) * t347;
t149 = t199 * t346 + t348 * t200;
t405 = t443 * t447;
t402 = -pkin(4) * t102 + pkin(10) * t49;
t401 = t434 - t463;
t400 = t433 + t464;
t48 = t350 * t89 - t353 * t88;
t395 = t199 * t348 - t200 * t346;
t394 = t49 + t435;
t391 = -pkin(1) + t399;
t56 = -qJ(6) * t180 + (-t208 - t268) * pkin(5) + t384;
t264 = 0.2e1 * t426;
t58 = t264 - t374 + t518;
t380 = t350 * t58 + t353 * t56 + t435;
t131 = -pkin(5) * t507 - qJ(6) * t191;
t92 = -t204 * pkin(5) - t268 * qJ(6) + t240 * t272 + qJDD(6) + t102;
t84 = -qJ(6) * t226 + t92;
t379 = t131 * t353 + t350 * t84 + t433;
t378 = t351 * t284;
t377 = t351 * t388;
t376 = t354 * t284;
t375 = t354 * t388;
t68 = -pkin(5) * t179 + qJ(6) * t219 - t92;
t373 = -qJ(6) * t460 + t353 * t68 + t434;
t370 = -t295 * t414 - t410;
t369 = t392 - t441;
t367 = t374 + t519;
t64 = -pkin(5) * t268 + t384;
t36 = t353 * t64 - t469;
t47 = -pkin(5) * t92 + qJ(6) * t64;
t365 = -pkin(4) * t92 + pkin(10) * t36 - qJ(6) * t469 + t353 * t47;
t341 = t355 ^ 2 * t445;
t329 = t347 * t385;
t328 = t347 * t386;
t327 = -t341 + t419;
t326 = -t341 - t403;
t315 = -t419 - t403;
t313 = t383 * t514;
t309 = t347 * t362 + t478;
t306 = -t317 - t341;
t305 = -t317 + t341;
t304 = t316 - t341;
t303 = -t328 - t509;
t302 = t328 - t509;
t301 = -t329 + t325;
t289 = -t341 - t316;
t280 = -t307 + t299;
t278 = -t308 + t407;
t276 = -t292 + t393;
t275 = t291 - t393;
t274 = (-t319 * t346 + t320 * t348) * t414;
t273 = -t316 - t317;
t267 = t299 * t346 - t308 * t348;
t266 = t307 * t346 - t348 * t407;
t261 = -t292 - t393;
t257 = -t306 * t346 + t451;
t256 = t304 * t346 - t451;
t255 = t305 * t348 + t513;
t254 = t306 * t348 + t452;
t253 = t292 - t291;
t251 = -t393 - t291;
t244 = -t269 + t288;
t243 = t268 - t288;
t242 = t289 * t348 - t513;
t241 = t289 * t346 + t512;
t236 = t376 - t377;
t235 = t378 + t375;
t233 = -t277 * t346 - t348 * t506;
t231 = -t278 * t346 + t280 * t348;
t228 = t269 - t268;
t227 = -t291 - t292;
t224 = t239 - t284;
t220 = (0.2e1 * qJD(4) - t414) * t295 + t410;
t218 = t275 * t354 + t456;
t217 = -t276 * t351 + t510;
t216 = t275 * t351 - t455;
t215 = t276 * t354 + t511;
t214 = t354 * t239 + t377;
t213 = t351 * t239 - t375;
t212 = -t351 * t238 - t376;
t211 = t354 * t238 - t378;
t210 = -t261 * t351 + t455;
t209 = t261 * t354 + t456;
t196 = t251 * t354 - t511;
t195 = t251 * t351 + t510;
t194 = (-t270 * t353 + t272 * t350) * t290;
t193 = (-t270 * t350 - t272 * t353) * t290;
t189 = t235 * t348 + t236 * t346;
t188 = -pkin(2) * t280 + qJ(3) * t257 + t454;
t187 = -pkin(2) * t278 + qJ(3) * t242 - t453;
t176 = t205 * t353 - t272 * t450;
t175 = t205 * t350 + t272 * t449;
t174 = -t204 * t350 + t270 * t449;
t173 = -t353 * t204 - t270 * t450;
t170 = t224 * t351 + t354 * t370;
t169 = -t220 * t354 - t351 * t517;
t168 = -t224 * t354 + t351 * t370;
t167 = -t220 * t351 + t354 * t517;
t166 = t194 * t354 + t237 * t351;
t165 = t194 * t351 - t237 * t354;
t164 = t216 * t348 + t218 * t346;
t163 = t215 * t348 + t217 * t346;
t162 = t243 * t353 - t462;
t161 = -t244 * t350 + t459;
t160 = t243 * t350 + t461;
t159 = t244 * t353 + t460;
t158 = t213 * t348 + t214 * t346;
t157 = t211 * t348 + t212 * t346;
t156 = -t209 * t346 + t210 * t348;
t155 = t209 * t348 + t210 * t346;
t154 = -pkin(9) * t209 + t457;
t147 = -pkin(9) * t195 + t458;
t142 = t176 * t354 + t421;
t141 = t174 * t354 - t421;
t140 = t176 * t351 - t420;
t139 = t174 * t351 + t420;
t138 = -t195 * t346 + t196 * t348;
t137 = t195 * t348 + t196 * t346;
t136 = -pkin(2) * t260 + qJ(3) * t149;
t132 = -pkin(3) * t517 + pkin(9) * t210 + t458;
t130 = -pkin(3) * t220 + pkin(9) * t196 - t457;
t129 = -pkin(2) * t273 + qJ(3) * t233 + t149;
t124 = -t179 * t353 - t350 * t507;
t122 = -t179 * t350 + t353 * t507;
t119 = t162 * t354 - t180 * t351;
t118 = t161 * t354 + t183 * t351;
t117 = t162 * t351 + t180 * t354;
t116 = t161 * t351 - t183 * t354;
t115 = -t168 * t346 + t170 * t348;
t114 = t168 * t348 + t170 * t346;
t113 = t167 * t348 + t169 * t346;
t112 = t165 * t348 + t166 * t346;
t105 = t124 * t354 + t228 * t351;
t104 = t124 * t351 - t228 * t354;
t98 = pkin(9) * t100;
t97 = t140 * t348 + t142 * t346;
t96 = t139 * t348 + t141 * t346;
t95 = -pkin(4) * t123 + t486;
t94 = t463 - t479;
t93 = t464 - t480;
t86 = t117 * t348 + t119 * t346;
t85 = t116 * t348 + t118 * t346;
t83 = -pkin(3) * t206 + pkin(9) * t91;
t76 = -pkin(2) * t517 + qJ(3) * t156 + t132 * t348 + t154 * t346;
t75 = t104 * t348 + t105 * t346;
t74 = -pkin(9) * t168 - t90;
t73 = -pkin(2) * t220 + qJ(3) * t138 + t130 * t348 + t147 * t346;
t72 = t349 * t112 + (t352 * (-t165 * t346 + t166 * t348) - t355 * t193) * t347;
t67 = -pkin(3) * t227 + pkin(9) * t170 + t91;
t66 = t89 - t488;
t65 = t88 - t489;
t60 = t349 * t97 + (t352 * (-t140 * t346 + t142 * t348) - t355 * t175) * t347;
t59 = t349 * t96 + (t352 * (-t139 * t346 + t141 * t348) + t355 * t173) * t347;
t55 = -t131 * t350 + t353 * t84 - t479;
t54 = -qJ(6) * t459 - t350 * t68 - t480;
t53 = -t488 - t516;
t52 = t348 * t91 - t471;
t51 = t346 * t91 + t470;
t50 = t264 - t367 - t489;
t46 = t349 * t86 + (t352 * (-t117 * t346 + t119 * t348) - t355 * t160) * t347;
t45 = t349 * t85 + (t352 * (-t116 * t346 + t118 * t348) - t355 * t159) * t347;
t44 = -t48 - t481;
t41 = t102 * t351 + t354 * t49;
t40 = -t102 * t354 + t351 * t49;
t39 = -t351 * t66 + t354 * t94 - t482;
t38 = t349 * t75 + (t352 * (-t104 * t346 + t105 * t348) - t355 * t122) * t347;
t37 = -t351 * t65 + t354 * t93 - t483;
t35 = t350 * t64 + t468;
t33 = t351 * t94 + t354 * t66 + t412;
t32 = t351 * t93 + t354 * t65 + t413;
t31 = -pkin(2) * t227 + qJ(3) * t115 + t346 * t74 + t348 * t67;
t30 = t123 * t487 + t354 * t44 - t494;
t29 = t351 * t92 + t354 * t36;
t28 = t351 * t36 - t354 * t92;
t27 = -t350 * t56 + t353 * t58 - t481;
t26 = -pkin(2) * t206 - pkin(9) * t471 + qJ(3) * t52 + t348 * t83;
t25 = t123 * t416 + t351 * t44 + t98;
t24 = -t351 * t53 + t354 * t55 - t482;
t23 = -pkin(4) * t35 - t495;
t22 = -t351 * t50 + t354 * t54 - t483;
t21 = t351 * t55 + t354 * t53 + t412;
t20 = t351 * t54 + t354 * t50 + t413;
t19 = -t346 * t40 + t348 * t41;
t18 = t346 * t41 + t348 * t40;
t17 = t27 * t354 - t351 * t95 - t494;
t16 = -pkin(3) * t123 + t27 * t351 + t354 * t95 + t98;
t15 = -pkin(10) * t35 - qJ(6) * t468 - t350 * t47;
t14 = -pkin(9) * t40 + (-pkin(10) * t354 + t487) * t48;
t13 = t33 * t348 + t346 * t39 + t465;
t12 = t32 * t348 + t346 * t37 + t466;
t11 = -t28 * t346 + t29 * t348;
t10 = t28 * t348 + t29 * t346;
t9 = pkin(9) * t41 + (-pkin(10) * t351 + t416) * t48;
t8 = t25 * t348 + t30 * t346 + t467;
t7 = t21 * t348 + t24 * t346 + t465;
t6 = t20 * t348 + t22 * t346 + t466;
t5 = t16 * t348 + t17 * t346 + t467;
t4 = -pkin(9) * t28 + t15 * t354 - t23 * t351;
t3 = -pkin(3) * t35 + pkin(9) * t29 + t15 * t351 + t23 * t354;
t2 = -pkin(2) * t48 + qJ(3) * t19 + t14 * t346 + t348 * t9;
t1 = -pkin(2) * t35 + qJ(3) * t11 + t3 * t348 + t346 * t4;
t34 = [0, 0, 0, 0, 0, qJDD(1), t381, t382, 0, 0, (t347 * t325 + t369 * t514) * t352, t349 * t327 + (t352 * t303 + t355 * (t329 + t325)) * t347, t349 * t301 + (t439 + t355 * (t403 - t419)) * t347, -t369 * t418 - t313, t349 * t302 + (t352 * (t341 - t403) + t437) * t347, t349 * t404, (-t286 + pkin(1) * (t324 * t355 + t326 * t352)) * t349 + (t355 * t309 + pkin(1) * t303 + pkin(8) * (t326 * t355 - t439)) * t347, -t309 * t444 - t349 * t287 + pkin(1) * (-t323 * t442 + t349 * t355 * t315 - t347 * (t406 * t414 + t325)) + (-t315 * t352 - t437) * t485, pkin(1) * (-t301 * t355 + t302 * t352) * t349 + (t301 * t352 + t302 * t355) * t485 + (pkin(1) * (t341 + t419) + t504) * t347, pkin(1) * (t309 * t347 + (-t286 * t355 + t287 * t352) * t349) + t504 * t485, (t299 * t348 + t308 * t346) * t444 + t405 + t349 * t267, t349 * t231 + (t352 * (-t278 * t348 - t280 * t346) + t355 * (-t317 + t316)) * t347, t349 * t255 + (t352 * (-t305 * t346 + t512) + t355 * t277) * t347, (t307 * t348 + t346 * t407) * t444 - t405 + t349 * t266, t349 * t256 + (t352 * (t304 * t348 + t452) + t355 * t506) * t347, t349 * t274 - t313 + t343 * t352 * (-t319 * t348 - t320 * t346) * t429, (-qJ(3) * t241 + t454) * t444 + (-pkin(2) * t241 + t199) * t443 + t349 * t187 + pkin(1) * (-t347 * t241 + (t242 * t352 - t278 * t355) * t349) + (t355 * t242 + t352 * t278) * t485, (t188 + pkin(1) * (t257 * t352 - t280 * t355)) * t349 + (t352 * (-qJ(3) * t254 + t453) + t355 * (-pkin(2) * t254 + t200) - pkin(1) * t254 + pkin(8) * (t257 * t355 + t280 * t352)) * t347, (t129 + pkin(1) * (t233 * t352 - t273 * t355)) * t349 + (t352 * t395 + pkin(8) * (t233 * t355 + t273 * t352) + t391 * (t277 * t348 - t346 * t506)) * t347, (t136 + pkin(1) * (t149 * t352 - t260 * t355)) * t349 + (pkin(8) * (t149 * t355 + t260 * t352) - t391 * t395) * t347, t349 * t158 + (t352 * (-t213 * t346 + t214 * t348) - t417) * t347, t349 * t113 + (t352 * (-t167 * t346 + t169 * t348) - t355 * t253) * t347, t349 * t163 + (t352 * (-t215 * t346 + t217 * t348) - t355 * t224) * t347, t349 * t157 + (t352 * (-t211 * t346 + t212 * t348) + t417) * t347, t349 * t164 + (t352 * (-t216 * t346 + t218 * t348) - t355 * t370) * t347, t349 * t189 + (t352 * (-t235 * t346 + t236 * t348) - t366 * t355) * t347, (t73 + pkin(1) * (t138 * t352 - t220 * t355)) * t349 + (t352 * (-qJ(3) * t137 - t130 * t346 + t147 * t348) + t355 * (-pkin(2) * t137 - pkin(3) * t195 + t127) - pkin(1) * t137 + pkin(8) * (t138 * t355 + t220 * t352)) * t347, (t76 + pkin(1) * (t156 * t352 - t355 * t517)) * t349 + (t352 * (-qJ(3) * t155 - t132 * t346 + t154 * t348) + t355 * (-pkin(2) * t155 - pkin(3) * t209 + t128) - pkin(1) * t155 + pkin(8) * (t156 * t355 + t352 * t517)) * t347, (t31 + pkin(1) * (t115 * t352 - t227 * t355)) * t349 + (t352 * (-qJ(3) * t114 - t346 * t67 + t348 * t74) + t355 * (-pkin(2) * t114 - pkin(3) * t168) - pkin(1) * t114 + pkin(8) * (t115 * t355 + t227 * t352)) * t347, (t26 + pkin(1) * (-t206 * t355 + t352 * t52)) * t349 + (t352 * (-pkin(9) * t470 - qJ(3) * t51 - t346 * t83) + t355 * (-pkin(2) * t51 - pkin(3) * t90) - pkin(1) * t51 + pkin(8) * (t206 * t352 + t355 * t52)) * t347, t60, t38, t45, t59, t46, t72, t349 * t12 + (t352 * (-t32 * t346 + t348 * t37 - t473) + t355 * (-t401 + t502)) * t347 + t476, t349 * t13 + (t352 * (-t33 * t346 + t348 * t39 - t472) + t355 * (-t400 + t503)) * t347 + t475, t349 * t8 + (t352 * (-t25 * t346 + t30 * t348 - t474) + t355 * (-t394 + t501)) * t347 + t477, (t2 + pkin(1) * (t19 * t352 - t355 * t48)) * t349 + (t352 * (-qJ(3) * t18 + t14 * t348 - t346 * t9) + t355 * (-pkin(2) * t18 - pkin(3) * t40 - t402) - pkin(1) * t18 + pkin(8) * (t19 * t355 + t352 * t48)) * t347, t60, t38, t45, t59, t46, t72, t349 * t6 + (t352 * (-t20 * t346 + t22 * t348 - t473) + t355 * (-t373 + t502)) * t347 + t476, t349 * t7 + (t352 * (-t21 * t346 + t24 * t348 - t472) + t355 * (-t379 + t503)) * t347 + t475, t349 * t5 + (t352 * (-t16 * t346 + t17 * t348 - t474) + t355 * (-t380 + t501)) * t347 + t477, (t1 + pkin(1) * (t11 * t352 - t35 * t355)) * t349 + (t352 * (-qJ(3) * t10 - t3 * t346 + t348 * t4) + t355 * (-pkin(2) * t10 - pkin(3) * t28 - t365) - pkin(1) * t10 + pkin(8) * (t11 * t355 + t35 * t352)) * t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t336, t327, t301, t336, t302, t404, -t286, -t287, 0, 0, t267, t231, t255, t266, t256, t274, t187, t188, t129, t136, t158, t113, t163, t157, t164, t189, t73, t76, t31, t26, t97, t75, t85, t96, t86, t112, t12, t13, t8, t2, t97, t75, t85, t96, t86, t112, t6, t7, t5, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t278, t280, t273, t260, 0, 0, 0, 0, 0, 0, t220, t517, t227, t206, 0, 0, 0, 0, 0, 0, t145, t152, t123, t48, 0, 0, 0, 0, 0, 0, t145, t152, t123, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t448, t253, t224, -t448, t370, t366, -t127, -t128, 0, 0, t175, t122, t159, -t173, t160, t193, t401, t400, t394, t402, t175, t122, t159, -t173, t160, t193, t373, t379, t380, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t230, t228, t183, -t230, -t180, t237, -t88, -t89, 0, 0, t230, t228, t183, -t230, -t180, t237, t263 + t367, t516, -t486, t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t179, t507, t208, t92;];
tauJ_reg  = t34;
