% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP9_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:35:18
% EndTime: 2019-05-06 18:36:13
% DurationCPUTime: 47.90s
% Computational Cost: add. (400753->963), mult. (913242->1486), div. (0->0), fcn. (744259->12), ass. (0->722)
t1112 = sin(qJ(5));
t1111 = cos(pkin(6));
t1100 = qJD(1) * t1111 + qJD(2);
t1108 = sin(pkin(11));
t1110 = cos(pkin(11));
t1109 = sin(pkin(6));
t1114 = sin(qJ(2));
t1244 = t1109 * t1114;
t1225 = qJD(1) * t1244;
t1069 = t1100 * t1110 - t1108 * t1225;
t1070 = t1100 * t1108 + t1110 * t1225;
t1113 = sin(qJ(4));
t1117 = cos(qJ(4));
t1034 = t1069 * t1113 + t1070 * t1117;
t1116 = cos(qJ(5));
t1118 = cos(qJ(2));
t1243 = t1109 * t1118;
t1224 = qJD(1) * t1243;
t1203 = -qJD(4) + t1224;
t1005 = t1034 * t1112 + t1116 * t1203;
t1007 = t1116 * t1034 - t1112 * t1203;
t946 = t1007 * t1005;
t1235 = qJDD(1) * t1114;
t1258 = qJD(1) * t1118;
t1076 = (qJD(2) * t1258 + t1235) * t1109;
t1207 = qJDD(1) * t1111 + qJDD(2);
t1044 = t1110 * t1076 + t1108 * t1207;
t1208 = t1076 * t1108 - t1110 * t1207;
t1210 = t1113 * t1044 + t1117 * t1208;
t956 = -t1034 * qJD(4) - t1210;
t955 = qJDD(5) - t956;
t1214 = -t955 + t946;
t1269 = t1112 * t1214;
t1263 = t1116 * t1214;
t1314 = t1214 * pkin(5);
t1168 = t1203 ^ 2;
t1236 = qJDD(1) * t1109;
t1237 = -qJD(2) * t1225 + t1118 * t1236;
t1215 = -qJDD(4) + t1237;
t1032 = -t1117 * t1069 + t1070 * t1113;
t957 = -t1032 * qJD(4) + t1117 * t1044 - t1113 * t1208;
t904 = -t1005 * qJD(5) - t1112 * t1215 + t1116 * t957;
t1029 = qJD(5) + t1032;
t966 = t1029 * t1005;
t1313 = -t966 + t904;
t1021 = t1032 * t1203;
t1312 = t1021 + t957;
t1105 = t1109 ^ 2;
t1120 = qJD(1) ^ 2;
t1245 = t1105 * t1120;
t1251 = t1069 * t1070;
t1202 = -t1237 + t1251;
t1311 = t1108 * t1202;
t1310 = t1110 * t1202;
t1252 = t1032 * t1034;
t1158 = -t1215 - t1252;
t1309 = t1113 * t1158;
t1308 = t1117 * t1158;
t1055 = t1069 * t1224;
t1013 = -t1055 - t1044;
t1056 = t1070 * t1224;
t1014 = t1056 + t1208;
t1084 = t1100 * t1224;
t1046 = t1084 + t1076;
t1213 = t1112 * t957 + t1116 * t1215;
t862 = (qJD(5) - t1029) * t1007 + t1213;
t1003 = t1005 ^ 2;
t1004 = t1007 ^ 2;
t1027 = t1029 ^ 2;
t1030 = t1032 ^ 2;
t1031 = t1034 ^ 2;
t1307 = t1069 ^ 2;
t1067 = t1070 ^ 2;
t1306 = t1100 ^ 2;
t1305 = 2 * qJD(3);
t925 = -t1027 - t1003;
t821 = t1112 * t925 - t1263;
t1304 = pkin(4) * t821;
t889 = t946 + t955;
t1270 = t1112 * t889;
t935 = -t1004 - t1027;
t829 = t1116 * t935 - t1270;
t1303 = pkin(4) * t829;
t1115 = sin(qJ(1));
t1119 = cos(qJ(1));
t866 = -t966 - t904;
t789 = -t1112 * t866 - t1116 * t862;
t909 = -t1003 - t1004;
t760 = t1113 * t789 - t1117 * t909;
t761 = t1113 * t909 + t1117 * t789;
t696 = -t1108 * t760 + t1110 * t761;
t787 = -t1112 * t862 + t1116 * t866;
t1190 = t1114 * t696 - t1118 * t787;
t695 = t1108 * t761 + t1110 * t760;
t624 = -t1109 * t695 + t1111 * t1190;
t670 = t1114 * t787 + t1118 * t696;
t583 = t1115 * t670 + t1119 * t624;
t1302 = pkin(7) * t583;
t822 = t1116 * t925 + t1269;
t861 = (qJD(5) + t1029) * t1007 + t1213;
t770 = t1113 * t822 - t1117 * t861;
t771 = t1113 * t861 + t1117 * t822;
t711 = -t1108 * t770 + t1110 * t771;
t1188 = t1114 * t711 - t1118 * t821;
t710 = t1108 * t771 + t1110 * t770;
t638 = -t1109 * t710 + t1111 * t1188;
t680 = t1114 * t821 + t1118 * t711;
t598 = t1115 * t680 + t1119 * t638;
t1301 = pkin(7) * t598;
t1264 = t1116 * t889;
t830 = -t1112 * t935 - t1264;
t773 = t1113 * t830 - t1117 * t1313;
t774 = t1113 * t1313 + t1117 * t830;
t715 = -t1108 * t773 + t1110 * t774;
t1187 = t1114 * t715 - t1118 * t829;
t714 = t1108 * t774 + t1110 * t773;
t645 = -t1109 * t714 + t1111 * t1187;
t683 = t1114 * t829 + t1118 * t715;
t605 = t1115 * t683 + t1119 * t645;
t1300 = pkin(7) * t605;
t1299 = pkin(9) * t760;
t1298 = pkin(9) * t770;
t1297 = pkin(9) * t773;
t1296 = pkin(10) * t787;
t1295 = pkin(10) * t821;
t1294 = pkin(10) * t829;
t1293 = pkin(2) * t1114;
t1292 = pkin(2) * t1118;
t1291 = pkin(4) * t1113;
t1290 = pkin(8) * t1109;
t1289 = pkin(8) * t1111;
t1288 = t1111 * g(3);
t1287 = qJ(3) * t695;
t1286 = qJ(3) * t710;
t1285 = qJ(3) * t714;
t1284 = pkin(1) * t624 + t670 * t1290;
t1283 = pkin(1) * t638 + t680 * t1290;
t1282 = pkin(1) * t645 + t683 * t1290;
t1281 = -pkin(2) * t787 + qJ(3) * t696;
t1280 = -pkin(2) * t821 + qJ(3) * t711;
t1279 = -pkin(2) * t829 + qJ(3) * t715;
t1094 = g(1) * t1119 + g(2) * t1115;
t1072 = -pkin(1) * t1120 + pkin(8) * t1236 - t1094;
t1205 = -qJ(3) * t1114 - t1292;
t1259 = qJD(1) * t1109;
t1073 = t1205 * t1259;
t1093 = t1115 * g(1) - t1119 * g(2);
t1128 = qJDD(1) * pkin(1) + t1120 * t1290 + t1093;
t1127 = t1111 * t1128;
t1126 = -g(3) * t1244 + t1114 * t1127;
t1125 = qJ(3) * t1207 + t1126;
t1123 = -t1306 * pkin(2) + (t1073 * t1259 + t1072) * t1118 + t1125;
t1204 = -qJ(3) * t1118 + t1293;
t1260 = qJD(1) * t1100;
t1277 = t1076 * qJ(3);
t1124 = -t1288 - t1277 - t1237 * pkin(2) + (t1204 * t1260 - t1128) * t1109;
t1234 = t1070 * t1305;
t898 = t1108 * t1123 - t1110 * t1124 + t1234;
t1122 = pkin(3) * t1202 + pkin(9) * t1013 - t898;
t1045 = -pkin(3) * t1224 - pkin(9) * t1070;
t899 = t1069 * t1305 + t1108 * t1124 + t1110 * t1123;
t872 = -pkin(3) * t1307 - pkin(9) * t1208 + t1045 * t1224 + t899;
t793 = t1113 * t1122 + t1117 * t872;
t972 = pkin(4) * t1032 - pkin(10) * t1034;
t766 = -pkin(4) * t1168 - pkin(10) * t1215 - t1032 * t972 + t793;
t1151 = t1203 * t1034;
t1209 = t1114 * t1072 - t1118 * t1127;
t982 = qJDD(3) - t1207 * pkin(2) - t1306 * qJ(3) + (qJD(1) * t1073 * t1114 + g(3) * t1118) * t1109 + t1209;
t907 = t1208 * pkin(3) - t1307 * pkin(9) + t1070 * t1045 + t982;
t802 = -t1312 * pkin(10) + (-t956 - t1151) * pkin(4) + t907;
t725 = t1112 * t802 + t1116 * t766;
t1278 = -t1112 * t766 + t1116 * t802;
t792 = t1113 * t872 - t1117 * t1122;
t730 = t1113 * t793 - t1117 * t792;
t1276 = t1108 * t730;
t1275 = t1108 * t982;
t1274 = t1110 * t730;
t1273 = t1110 * t982;
t1233 = t904 * qJ(6) - t1278;
t1148 = -qJ(6) * t966 - t1233;
t1257 = qJD(6) * t1007;
t677 = t1148 - 0.2e1 * t1257 - t1314;
t1272 = t1112 * t677;
t765 = t1215 * pkin(4) - t1168 * pkin(10) + t1034 * t972 + t792;
t1271 = t1112 * t765;
t1268 = t1113 * t907;
t963 = t1215 - t1252;
t1267 = t1113 * t963;
t1266 = t1116 * t677;
t1265 = t1116 * t765;
t1262 = t1117 * t907;
t1261 = t1117 * t963;
t1018 = t1237 + t1251;
t1256 = t1018 * t1108;
t1255 = t1018 * t1110;
t1254 = t1029 * t1112;
t1253 = t1029 * t1116;
t1241 = t1114 * t1118;
t1216 = t1105 * t1241;
t1092 = t1120 * t1216;
t1074 = -t1092 + t1207;
t1250 = t1074 * t1114;
t1249 = t1074 * t1118;
t1075 = t1092 + t1207;
t1248 = t1075 * t1114;
t1247 = t1075 * t1118;
t1246 = t1109 * t1245;
t1057 = t1109 * t1128 + t1288;
t1242 = t1114 * t1057;
t1240 = t1118 * t1057;
t1239 = t1118 * t1072;
t1232 = -pkin(4) * t1117 - pkin(3);
t623 = t1109 * t1190 + t1111 * t695;
t1231 = -pkin(1) * t623 + t670 * t1289;
t637 = t1109 * t1188 + t1111 * t710;
t1230 = -pkin(1) * t637 + t680 * t1289;
t644 = t1109 * t1187 + t1111 * t714;
t1229 = -pkin(1) * t644 + t683 * t1289;
t1228 = -pkin(3) * t821 + pkin(9) * t771;
t1227 = -pkin(3) * t829 + pkin(9) * t774;
t1226 = t1100 * t1259;
t1223 = t1113 * t946;
t1222 = t1117 * t946;
t1221 = t1114 * t1252;
t1220 = t1118 * t1252;
t1219 = t1114 * t1251;
t1218 = t1118 * t1251;
t1106 = t1114 ^ 2;
t1217 = t1106 * t1245;
t1083 = t1100 * t1225;
t1050 = -t1083 + t1237;
t827 = t1108 * t898 + t1110 * t899;
t731 = t1113 * t792 + t1117 * t793;
t1212 = t1114 * t1237;
t1211 = t1118 * t1237;
t1059 = -t1093 * t1115 - t1119 * t1094;
t1091 = qJDD(1) * t1119 - t1115 * t1120;
t1206 = -pkin(7) * t1091 - g(3) * t1115;
t1066 = -t1217 - t1306;
t1035 = -t1066 * t1114 - t1249;
t1201 = pkin(8) * t1035 - t1242;
t1107 = t1118 ^ 2;
t1099 = t1107 * t1245;
t1080 = -t1099 - t1306;
t1039 = t1080 * t1118 - t1248;
t1200 = pkin(8) * t1039 + t1240;
t826 = t1108 * t899 - t1110 * t898;
t655 = t1112 * t725 + t1116 * t1278;
t656 = -t1112 * t1278 + t1116 * t725;
t903 = -qJD(5) * t1007 - t1213;
t958 = pkin(5) * t1029 - qJ(6) * t1007;
t1152 = t903 * qJ(6) - 0.2e1 * qJD(6) * t1005 - t1029 * t958 + t725;
t667 = -qJ(6) * t862 + (-t1003 - t909) * pkin(5) + t1152;
t997 = 0.2e1 * t1257;
t671 = t997 + (-t866 + t966) * qJ(6) + t1314 + t1233;
t600 = -t1112 * t667 + t1116 * t671 - t1296;
t744 = -pkin(4) * t787 - pkin(5) * t866;
t759 = pkin(9) * t761;
t578 = -pkin(3) * t787 + t1113 * t600 + t1117 * t744 + t759;
t579 = -t1113 * t744 + t1117 * t600 - t1299;
t554 = -t1108 * t578 + t1110 * t579 - t1287;
t1132 = -pkin(2) * t695 - pkin(3) * t760 + pkin(4) * t909 - pkin(10) * t789;
t577 = -t1112 * t671 - t1116 * t667 + t1132;
t1199 = t1114 * t554 + t1118 * t577;
t657 = -t1148 - t1304 + t997 + 0.2e1 * t1314;
t732 = -t903 * pkin(5) - t1003 * qJ(6) + t1007 * t958 + qJDD(6) + t765;
t689 = -pkin(5) * t861 + qJ(6) * t925 - t732;
t665 = qJ(6) * t1263 - t1112 * t689 - t1295;
t585 = t1113 * t665 + t1117 * t657 + t1228;
t591 = -t1113 * t657 + t1117 * t665 - t1298;
t558 = -t1108 * t585 + t1110 * t591 - t1286;
t1131 = -pkin(2) * t710 - pkin(3) * t770 + pkin(4) * t861 - pkin(10) * t822;
t610 = -qJ(6) * t1269 - t1116 * t689 + t1131;
t1198 = t1114 * t558 + t1118 * t610;
t664 = -t1303 + (-t1003 - t935) * pkin(5) + t1152;
t719 = -qJ(6) * t935 + t732;
t796 = -pkin(5) * t1313 - qJ(6) * t889;
t666 = -t1112 * t796 + t1116 * t719 - t1294;
t588 = t1113 * t666 + t1117 * t664 + t1227;
t593 = -t1113 * t664 + t1117 * t666 - t1297;
t560 = -t1108 * t588 + t1110 * t593 - t1285;
t1130 = -pkin(2) * t714 - pkin(3) * t773 + pkin(4) * t1313 - pkin(10) * t830;
t611 = -t1112 * t719 - t1116 * t796 + t1130;
t1197 = t1114 * t560 + t1118 * t611;
t646 = -t655 - t1296;
t595 = t1113 * t646 + t1232 * t787 + t759;
t616 = t1117 * t646 + t1291 * t787 - t1299;
t562 = -t1108 * t595 + t1110 * t616 - t1287;
t587 = t1132 - t656;
t1196 = t1114 * t562 + t1118 * t587;
t684 = -pkin(5) * t1003 + t1152;
t626 = t1116 * t684 - t1272;
t607 = t1113 * t626 - t1117 * t732;
t608 = t1113 * t732 + t1117 * t626;
t566 = -t1108 * t607 + t1110 * t608;
t625 = t1112 * t684 + t1266;
t1195 = t1114 * t566 - t1118 * t625;
t686 = -t1278 - t1304;
t735 = t1271 - t1295;
t619 = t1113 * t735 + t1117 * t686 + t1228;
t629 = -t1113 * t686 + t1117 * t735 - t1298;
t570 = -t1108 * t619 + t1110 * t629 - t1286;
t628 = t1131 + t1265;
t1194 = t1114 * t570 + t1118 * t628;
t687 = t725 - t1303;
t736 = t1265 - t1294;
t620 = t1113 * t736 + t1117 * t687 + t1227;
t633 = -t1113 * t687 + t1117 * t736 - t1297;
t571 = -t1108 * t620 + t1110 * t633 - t1285;
t632 = t1130 - t1271;
t1193 = t1114 * t571 + t1118 * t632;
t634 = t1113 * t656 - t1117 * t765;
t635 = t1113 * t765 + t1117 * t656;
t581 = -t1108 * t634 + t1110 * t635;
t1192 = t1114 * t581 - t1118 * t655;
t661 = t1110 * t731 - t1276;
t1191 = t1114 * t661 - t1118 * t907;
t788 = -t1112 * t1313 - t1116 * t861;
t945 = -t1004 + t1003;
t767 = t1113 * t788 + t1117 * t945;
t768 = -t1113 * t945 + t1117 * t788;
t704 = -t1108 * t767 + t1110 * t768;
t786 = t1112 * t861 - t1116 * t1313;
t1189 = t1114 * t704 + t1118 * t786;
t962 = -t1004 + t1027;
t840 = -t1112 * t962 - t1263;
t781 = t1113 * t840 + t1117 * t866;
t783 = -t1113 * t866 + t1117 * t840;
t722 = -t1108 * t781 + t1110 * t783;
t838 = -t1116 * t962 + t1269;
t1186 = t1114 * t722 + t1118 * t838;
t961 = t1003 - t1027;
t841 = t1116 * t961 - t1270;
t782 = t1113 * t841 + t1117 * t862;
t784 = -t1113 * t862 + t1117 * t841;
t723 = -t1108 * t782 + t1110 * t784;
t839 = -t1112 * t961 - t1264;
t1185 = t1114 * t723 + t1118 * t839;
t855 = t1005 * t1253 - t1112 * t903;
t816 = t1113 * t855 + t1222;
t818 = t1117 * t855 - t1223;
t752 = -t1108 * t816 + t1110 * t818;
t854 = -t1005 * t1254 - t1116 * t903;
t1184 = t1114 * t752 + t1118 * t854;
t857 = -t1007 * t1254 + t1116 * t904;
t817 = t1113 * t857 - t1222;
t819 = t1117 * t857 + t1223;
t753 = -t1108 * t817 + t1110 * t819;
t856 = -t1007 * t1253 - t1112 * t904;
t1183 = t1114 * t753 + t1118 * t856;
t892 = (-t1005 * t1116 + t1007 * t1112) * t1029;
t846 = t1113 * t892 - t1117 * t955;
t847 = t1113 * t955 + t1117 * t892;
t776 = -t1108 * t846 + t1110 * t847;
t891 = (t1005 * t1112 + t1007 * t1116) * t1029;
t1182 = t1114 * t776 + t1118 * t891;
t926 = (0.2e1 * qJD(4) - t1224) * t1034 + t1210;
t848 = -t1113 * t926 + t1117 * t1312;
t850 = -t1113 * t1312 - t1117 * t926;
t779 = -t1108 * t848 + t1110 * t850;
t973 = -t1031 + t1030;
t1181 = t1114 * t779 + t1118 * t973;
t930 = -t957 + t1021;
t931 = t1034 * t1224 + t1210;
t849 = -t1113 * t931 + t1117 * t930;
t851 = -t1113 * t930 - t1117 * t931;
t780 = -t1108 * t849 + t1110 * t851;
t940 = -t1030 - t1031;
t1180 = t1114 * t780 - t1118 * t940;
t970 = -t1168 - t1030;
t893 = t1113 * t970 + t1308;
t894 = t1117 * t970 - t1309;
t815 = -t1108 * t893 + t1110 * t894;
t1179 = t1114 * t815 - t1118 * t926;
t1178 = t1114 * t827 - t1118 * t982;
t993 = -t1031 - t1168;
t912 = t1117 * t993 + t1267;
t913 = -t1113 * t993 + t1261;
t833 = -t1108 * t912 + t1110 * t913;
t1177 = t1114 * t833 - t1118 * t1312;
t1012 = -t1031 + t1168;
t921 = t1012 * t1117 + t1309;
t923 = -t1012 * t1113 + t1308;
t844 = -t1108 * t921 + t1110 * t923;
t1176 = t1114 * t844 + t1118 * t930;
t1011 = t1030 - t1168;
t922 = t1011 * t1113 - t1261;
t924 = t1011 * t1117 + t1267;
t845 = -t1108 * t922 + t1110 * t924;
t1175 = t1114 * t845 + t1118 * t931;
t1008 = t1067 + t1307;
t950 = -t1013 * t1108 - t1014 * t1110;
t1174 = t1008 * t1118 + t1114 * t950;
t1052 = -t1067 + t1099;
t978 = -t1052 * t1108 + t1310;
t1173 = t1013 * t1118 + t1114 * t978;
t1051 = -t1099 + t1307;
t979 = t1051 * t1110 + t1256;
t1172 = t1014 * t1118 + t1114 * t979;
t1015 = t1056 - t1208;
t1028 = -t1099 - t1307;
t960 = t1028 * t1110 - t1311;
t1171 = t1015 * t1118 + t1114 * t960;
t1017 = -t1055 + t1044;
t1053 = -t1067 - t1099;
t977 = -t1053 * t1108 + t1255;
t1170 = -t1017 * t1118 + t1114 * t977;
t1036 = -t1067 + t1307;
t949 = t1015 * t1110 - t1017 * t1108;
t1169 = t1036 * t1118 + t1114 * t949;
t1167 = -t1111 * t1120 + t1260;
t1025 = g(3) * t1243 + t1209;
t1026 = t1126 + t1239;
t1166 = -t1118 * t1025 + t1114 * t1026;
t971 = t1025 * t1114 + t1026 * t1118;
t1165 = t1046 * t1118 + t1050 * t1114;
t1048 = -t1084 + t1076;
t1049 = t1083 + t1237;
t1164 = -t1048 * t1118 + t1049 * t1114;
t1163 = t1066 * t1118 - t1250;
t1079 = t1099 - t1306;
t1162 = t1079 * t1114 + t1249;
t1078 = -t1217 + t1306;
t1161 = t1078 * t1118 + t1248;
t1160 = t1080 * t1114 + t1247;
t1058 = t1093 * t1119 - t1094 * t1115;
t1159 = t1109 * t1207;
t1157 = (-t1109 * t623 - t1111 * t624) * pkin(8);
t1156 = (-t1109 * t637 - t1111 * t638) * pkin(8);
t1155 = (-t1109 * t644 - t1111 * t645) * pkin(8);
t1139 = t1113 * t1021;
t916 = t1117 * t956 - t1139;
t1137 = t1117 * t1021;
t917 = -t1113 * t956 - t1137;
t836 = -t1108 * t916 + t1110 * t917;
t1154 = t1114 * t836 + t1220;
t1136 = t1117 * t1151;
t918 = t1113 * t957 - t1136;
t1138 = t1113 * t1151;
t919 = t1117 * t957 + t1138;
t837 = -t1108 * t918 + t1110 * t919;
t1153 = t1114 * t837 - t1220;
t1000 = t1055 * t1110 + t1108 * t1208;
t1150 = t1000 * t1114 - t1218;
t1002 = t1044 * t1110 + t1056 * t1108;
t1149 = t1002 * t1114 + t1218;
t651 = -pkin(5) * t732 + qJ(6) * t684;
t573 = -pkin(10) * t625 - qJ(6) * t1266 - t1112 * t651;
t592 = -pkin(4) * t625 - pkin(5) * t677;
t545 = -pkin(3) * t625 + pkin(9) * t608 + t1113 * t573 + t1117 * t592;
t548 = -pkin(9) * t607 - t1113 * t592 + t1117 * t573;
t565 = t1108 * t608 + t1110 * t607;
t525 = -qJ(3) * t565 - t1108 * t545 + t1110 * t548;
t540 = -pkin(2) * t565 - pkin(3) * t607 + pkin(4) * t732 - pkin(10) * t626 + qJ(6) * t1272 - t1116 * t651;
t556 = t1114 * t625 + t1118 * t566;
t1147 = pkin(8) * t556 + t1114 * t525 + t1118 * t540;
t564 = pkin(9) * t635 + (-pkin(10) * t1113 + t1232) * t655;
t572 = -pkin(9) * t634 + (-pkin(10) * t1117 + t1291) * t655;
t580 = t1108 * t635 + t1110 * t634;
t536 = -qJ(3) * t580 - t1108 * t564 + t1110 * t572;
t555 = -pkin(2) * t580 - pkin(3) * t634 + pkin(4) * t765 - pkin(10) * t656;
t568 = t1114 * t655 + t1118 * t581;
t1146 = pkin(8) * t568 + t1114 * t536 + t1118 * t555;
t660 = t1108 * t731 + t1274;
t718 = -pkin(3) * t907 + pkin(9) * t731;
t603 = -pkin(9) * t1274 - qJ(3) * t660 - t1108 * t718;
t627 = -pkin(2) * t660 - pkin(3) * t730;
t654 = t1114 * t907 + t1118 * t661;
t1145 = pkin(8) * t654 + t1114 * t603 + t1118 * t627;
t688 = -pkin(3) * t940 + pkin(9) * t851 + t731;
t700 = -pkin(9) * t849 - t730;
t778 = t1108 * t851 + t1110 * t849;
t621 = -qJ(3) * t778 - t1108 * t688 + t1110 * t700;
t742 = -pkin(2) * t778 - pkin(3) * t849;
t756 = t1114 * t940 + t1118 * t780;
t1144 = pkin(8) * t756 + t1114 * t621 + t1118 * t742;
t795 = -pkin(3) * t926 + pkin(9) * t894 - t1262;
t814 = t1108 * t894 + t1110 * t893;
t823 = -pkin(9) * t893 + t1268;
t712 = -qJ(3) * t814 - t1108 * t795 + t1110 * t823;
t728 = -pkin(2) * t814 - pkin(3) * t893 + t792;
t790 = t1114 * t926 + t1118 * t815;
t1143 = pkin(8) * t790 + t1114 * t712 + t1118 * t728;
t797 = -pkin(3) * t1312 + pkin(9) * t913 + t1268;
t831 = -pkin(9) * t912 + t1262;
t832 = t1108 * t913 + t1110 * t912;
t726 = -qJ(3) * t832 - t1108 * t797 + t1110 * t831;
t737 = -pkin(2) * t832 - pkin(3) * t912 + t793;
t798 = t1114 * t1312 + t1118 * t833;
t1142 = pkin(8) * t798 + t1114 * t726 + t1118 * t737;
t959 = t1028 * t1108 + t1310;
t860 = t1108 * (t1073 * t1224 + t1125 + t1239) - t1110 * (-qJ(3) * t1084 - t1057 - t1277) + t1234 + (t1050 * t1110 - t1108 * t1306 - t959) * pkin(2);
t897 = -qJ(3) * t959 + t1275;
t920 = -t1015 * t1114 + t1118 * t960;
t1141 = pkin(8) * t920 + t1114 * t897 + t1118 * t860;
t974 = t1053 * t1110 + t1256;
t868 = -pkin(2) * t974 + t899;
t910 = -qJ(3) * t974 + t1273;
t936 = t1017 * t1114 + t1118 * t977;
t1140 = pkin(8) * t936 + t1114 * t910 + t1118 * t868;
t994 = t1048 * t1114 + t1049 * t1118;
t1135 = pkin(8) * t994 + t971;
t948 = t1013 * t1110 - t1014 * t1108;
t801 = -qJ(3) * t948 - t826;
t908 = -t1008 * t1114 + t1118 * t950;
t1134 = pkin(8) * t908 + t1114 * t801 - t1292 * t948;
t953 = t1139 + t1136;
t954 = t1137 - t1138;
t887 = -t1108 * t953 + t1110 * t954;
t1133 = t1114 * t887 + t1118 * t1215;
t808 = t1114 * t982 + t1118 * t827;
t1129 = pkin(8) * t808 + t1205 * t826;
t1090 = qJDD(1) * t1115 + t1119 * t1120;
t1082 = -t1099 - t1217;
t1081 = -t1099 + t1217;
t1077 = -pkin(7) * t1090 + g(3) * t1119;
t1064 = t1111 * t1211;
t1063 = t1109 * t1211;
t1054 = (t1106 + t1107) * t1226;
t1047 = (t1235 + (qJD(2) + t1100) * t1258) * t1109;
t1041 = t1076 * t1118 - t1106 * t1226;
t1040 = -t1107 * t1226 - t1212;
t1038 = t1079 * t1118 - t1250;
t1037 = -t1078 * t1114 + t1247;
t1024 = (t1046 * t1111 + t1118 * t1246) * t1114;
t1023 = t1064 + (-t1111 * t1226 - t1246) * t1241;
t1010 = (-t1069 * t1110 - t1070 * t1108) * t1224;
t1009 = (-t1069 * t1108 + t1070 * t1110) * t1224;
t1001 = t1044 * t1108 - t1056 * t1110;
t999 = t1055 * t1108 - t1110 * t1208;
t995 = -t1046 * t1114 + t1050 * t1118;
t992 = t1109 * t1050 + t1111 * t1160;
t991 = -t1109 * t1049 + t1111 * t1162;
t990 = -t1109 * t1048 + t1111 * t1161;
t989 = -t1111 * t1050 + t1109 * t1160;
t988 = -t1109 * t1047 + t1111 * t1163;
t987 = t1111 * t1047 + t1109 * t1163;
t986 = t1118 * t1010 - t1212;
t985 = -t1109 * t1081 + t1111 * t1165;
t984 = -t1109 * t1082 + t1111 * t1164;
t983 = t1111 * t1082 + t1109 * t1164;
t976 = t1051 * t1108 - t1255;
t975 = t1052 * t1110 + t1311;
t969 = t1002 * t1118 - t1219;
t968 = t1000 * t1118 + t1219;
t952 = t1039 * t1119 - t1115 * t992;
t951 = t1039 * t1115 + t1119 * t992;
t947 = t1015 * t1108 + t1017 * t1110;
t944 = t1035 * t1119 - t1115 * t988;
t943 = t1035 * t1115 + t1119 * t988;
t942 = t1109 * t1057 + t1111 * t1166;
t941 = -t1111 * t1057 + t1109 * t1166;
t939 = t1010 * t1111 * t1114 - t1009 * t1109 + t1064;
t938 = -t1014 * t1114 + t1118 * t979;
t937 = -t1013 * t1114 + t1118 * t978;
t934 = -t1115 * t984 + t1119 * t994;
t933 = t1115 * t994 + t1119 * t984;
t932 = -t1036 * t1114 + t1118 * t949;
t915 = -t1109 * t1001 + t1111 * t1149;
t914 = -t1109 * t999 + t1111 * t1150;
t911 = -t1242 + (-t1109 * t989 - t1111 * t992) * pkin(8);
t906 = -t1240 + (-t1109 * t987 - t1111 * t988) * pkin(8);
t905 = -pkin(1) * t989 + t1109 * t1025 + t1111 * t1200;
t895 = -pkin(1) * t987 + t1109 * t1026 + t1111 * t1201;
t886 = t1108 * t954 + t1110 * t953;
t885 = -pkin(2) * t1017 + qJ(3) * t977 + t1275;
t884 = -pkin(1) * t941 + t1289 * t971;
t883 = -t1115 * t942 + t1119 * t971;
t882 = t1115 * t971 + t1119 * t942;
t881 = -t1109 * t976 + t1111 * t1172;
t880 = -t1109 * t975 + t1111 * t1173;
t879 = -t1109 * t974 + t1111 * t1170;
t878 = t1109 * t1170 + t1111 * t974;
t877 = pkin(2) * t1015 + qJ(3) * t960 - t1273;
t876 = -t1114 * t1215 + t1118 * t887;
t875 = -pkin(1) * t983 + t1111 * t1135;
t874 = (-t1109 * t941 - t1111 * t942) * pkin(8);
t873 = (-t1109 * t983 - t1111 * t984) * pkin(8) - t1166;
t871 = -t1109 * t959 + t1111 * t1171;
t870 = t1109 * t1171 + t1111 * t959;
t867 = -t1109 * t947 + t1111 * t1169;
t859 = -t1109 * t948 + t1111 * t1174;
t858 = t1109 * t1174 + t1111 * t948;
t843 = t1108 * t924 + t1110 * t922;
t842 = t1108 * t923 + t1110 * t921;
t835 = t1108 * t919 + t1110 * t918;
t834 = t1108 * t917 + t1110 * t916;
t825 = -t1115 * t879 + t1119 * t936;
t824 = t1115 * t936 + t1119 * t879;
t813 = t1118 * t837 + t1221;
t812 = t1118 * t836 - t1221;
t811 = -t1115 * t871 + t1119 * t920;
t810 = t1115 * t920 + t1119 * t871;
t809 = -pkin(2) * t982 + qJ(3) * t827;
t807 = -t1115 * t859 + t1119 * t908;
t806 = t1115 * t908 + t1119 * t859;
t805 = -t1109 * t886 + t1111 * t1133;
t804 = -t1114 * t931 + t1118 * t845;
t803 = -t1114 * t930 + t1118 * t844;
t794 = pkin(2) * t1008 + qJ(3) * t950 + t827;
t777 = t1108 * t850 + t1110 * t848;
t775 = t1108 * t847 + t1110 * t846;
t762 = -t1114 * t973 + t1118 * t779;
t758 = -t1109 * t835 + t1111 * t1153;
t757 = -t1109 * t834 + t1111 * t1154;
t755 = -t1109 * t843 + t1111 * t1175;
t754 = -t1109 * t842 + t1111 * t1176;
t751 = t1108 * t819 + t1110 * t817;
t750 = t1108 * t818 + t1110 * t816;
t749 = -t1109 * t832 + t1111 * t1177;
t748 = t1109 * t1177 + t1111 * t832;
t747 = -t1114 * t891 + t1118 * t776;
t746 = -t1109 * t826 + t1111 * t1178;
t745 = t1109 * t1178 + t1111 * t826;
t743 = -t1114 * t868 + t1118 * t910 + (-t1109 * t878 - t1111 * t879) * pkin(8);
t741 = -t1109 * t814 + t1111 * t1179;
t740 = t1109 * t1179 + t1111 * t814;
t739 = -t1114 * t860 + t1118 * t897 + (-t1109 * t870 - t1111 * t871) * pkin(8);
t738 = -pkin(1) * t878 - t1109 * t885 + t1111 * t1140;
t734 = -t1114 * t856 + t1118 * t753;
t733 = -t1114 * t854 + t1118 * t752;
t729 = -pkin(1) * t870 - t1109 * t877 + t1111 * t1141;
t727 = t948 * t1293 + t1118 * t801 + (-t1109 * t858 - t1111 * t859) * pkin(8);
t721 = t1108 * t784 + t1110 * t782;
t720 = t1108 * t783 + t1110 * t781;
t717 = -t1115 * t746 + t1119 * t808;
t716 = t1115 * t808 + t1119 * t746;
t708 = -pkin(2) * t1312 + qJ(3) * t833 + t1108 * t831 + t1110 * t797;
t707 = -t1115 * t749 + t1119 * t798;
t706 = t1115 * t798 + t1119 * t749;
t705 = -t1109 * t777 + t1111 * t1181;
t703 = t1108 * t768 + t1110 * t767;
t702 = -t1109 * t778 + t1111 * t1180;
t701 = t1109 * t1180 + t1111 * t778;
t699 = -pkin(2) * t926 + qJ(3) * t815 + t1108 * t823 + t1110 * t795;
t698 = -t1109 * t775 + t1111 * t1182;
t697 = t1109 * t1182 + t1111 * t775;
t693 = -t1115 * t741 + t1119 * t790;
t692 = t1115 * t790 + t1119 * t741;
t691 = -t1114 * t839 + t1118 * t723;
t690 = -t1114 * t838 + t1118 * t722;
t685 = -pkin(1) * t858 - t1109 * t794 + t1111 * t1134;
t676 = -t1109 * t751 + t1111 * t1183;
t675 = -t1109 * t750 + t1111 * t1184;
t674 = t1109 * t1183 + t1111 * t751;
t673 = t1109 * t1184 + t1111 * t750;
t672 = -t1114 * t786 + t1118 * t704;
t663 = -t1115 * t702 + t1119 * t756;
t662 = t1115 * t756 + t1119 * t702;
t659 = -t1115 * t698 + t1119 * t747;
t658 = t1115 * t747 + t1119 * t698;
t653 = t1204 * t826 + (-t1109 * t745 - t1111 * t746) * pkin(8);
t652 = -pkin(1) * t745 - t1109 * t809 + t1111 * t1129;
t650 = -t1109 * t721 + t1111 * t1185;
t649 = -t1109 * t720 + t1111 * t1186;
t648 = t1109 * t1185 + t1111 * t721;
t647 = t1109 * t1186 + t1111 * t720;
t642 = -t1115 * t676 + t1119 * t734;
t641 = -t1115 * t675 + t1119 * t733;
t640 = t1115 * t734 + t1119 * t676;
t639 = t1115 * t733 + t1119 * t675;
t631 = -t1109 * t703 + t1111 * t1189;
t630 = t1109 * t1189 + t1111 * t703;
t618 = -pkin(2) * t940 + qJ(3) * t780 + t1108 * t700 + t1110 * t688;
t617 = -t1114 * t737 + t1118 * t726 + (-t1109 * t748 - t1111 * t749) * pkin(8);
t615 = -t1115 * t650 + t1119 * t691;
t614 = -t1115 * t649 + t1119 * t690;
t613 = t1115 * t691 + t1119 * t650;
t612 = t1115 * t690 + t1119 * t649;
t609 = -t1114 * t728 + t1118 * t712 + (-t1109 * t740 - t1111 * t741) * pkin(8);
t606 = -t1115 * t645 + t1119 * t683;
t604 = pkin(7) * t606;
t602 = -t1109 * t660 + t1111 * t1191;
t601 = t1109 * t1191 + t1111 * t660;
t599 = -t1115 * t638 + t1119 * t680;
t597 = pkin(7) * t599;
t596 = -pkin(2) * t907 - pkin(9) * t1276 + qJ(3) * t661 + t1110 * t718;
t594 = -pkin(1) * t748 - t1109 * t708 + t1111 * t1142;
t590 = -t1115 * t631 + t1119 * t672;
t589 = t1115 * t672 + t1119 * t631;
t586 = -pkin(1) * t740 - t1109 * t699 + t1111 * t1143;
t584 = -t1115 * t624 + t1119 * t670;
t582 = pkin(7) * t584;
t576 = -t1115 * t602 + t1119 * t654;
t575 = t1115 * t654 + t1119 * t602;
t574 = -t1114 * t742 + t1118 * t621 + (-t1109 * t701 - t1111 * t702) * pkin(8);
t569 = t1108 * t633 + t1110 * t620 + t1279;
t567 = t1108 * t629 + t1110 * t619 + t1280;
t563 = -pkin(1) * t701 - t1109 * t618 + t1111 * t1144;
t561 = t1108 * t616 + t1110 * t595 + t1281;
t559 = t1108 * t593 + t1110 * t588 + t1279;
t557 = t1108 * t591 + t1110 * t585 + t1280;
t553 = -t1109 * t580 + t1111 * t1192;
t552 = t1109 * t1192 + t1111 * t580;
t551 = t1108 * t579 + t1110 * t578 + t1281;
t550 = -t1114 * t627 + t1118 * t603 + (-t1109 * t601 - t1111 * t602) * pkin(8);
t549 = -t1114 * t632 + t1118 * t571 + t1155;
t547 = -t1114 * t628 + t1118 * t570 + t1156;
t546 = -pkin(1) * t601 - t1109 * t596 + t1111 * t1145;
t544 = -t1109 * t565 + t1111 * t1195;
t543 = t1109 * t1195 + t1111 * t565;
t542 = -t1114 * t611 + t1118 * t560 + t1155;
t541 = -t1114 * t610 + t1118 * t558 + t1156;
t539 = -t1114 * t587 + t1118 * t562 + t1157;
t538 = -t1115 * t553 + t1119 * t568;
t537 = t1115 * t568 + t1119 * t553;
t535 = -t1109 * t569 + t1111 * t1193 + t1229;
t534 = -t1109 * t567 + t1111 * t1194 + t1230;
t533 = -pkin(2) * t655 + qJ(3) * t581 + t1108 * t572 + t1110 * t564;
t532 = -t1114 * t577 + t1118 * t554 + t1157;
t531 = -t1109 * t559 + t1111 * t1197 + t1229;
t530 = -t1109 * t561 + t1111 * t1196 + t1231;
t529 = -t1109 * t557 + t1111 * t1198 + t1230;
t528 = -t1115 * t544 + t1119 * t556;
t527 = t1115 * t556 + t1119 * t544;
t526 = -t1109 * t551 + t1111 * t1199 + t1231;
t524 = -pkin(2) * t625 + qJ(3) * t566 + t1108 * t548 + t1110 * t545;
t523 = -t1114 * t555 + t1118 * t536 + (-t1109 * t552 - t1111 * t553) * pkin(8);
t522 = -pkin(1) * t552 - t1109 * t533 + t1111 * t1146;
t521 = -t1114 * t540 + t1118 * t525 + (-t1109 * t543 - t1111 * t544) * pkin(8);
t520 = -pkin(1) * t543 - t1109 * t524 + t1111 * t1147;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1090, -t1091, 0, t1059, 0, 0, 0, 0, 0, 0, t952, t944, t934, t883, 0, 0, 0, 0, 0, 0, t811, t825, t807, t717, 0, 0, 0, 0, 0, 0, t693, t707, t663, t576, 0, 0, 0, 0, 0, 0, t599, t606, t584, t538, 0, 0, 0, 0, 0, 0, t599, t606, t584, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1091, -t1090, 0, t1058, 0, 0, 0, 0, 0, 0, t951, t943, t933, t882, 0, 0, 0, 0, 0, 0, t810, t824, t806, t716, 0, 0, 0, 0, 0, 0, t692, t706, t662, t575, 0, 0, 0, 0, 0, 0, t598, t605, t583, t537, 0, 0, 0, 0, 0, 0, t598, t605, t583, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t989, t987, t983, t941, 0, 0, 0, 0, 0, 0, t870, t878, t858, t745, 0, 0, 0, 0, 0, 0, t740, t748, t701, t601, 0, 0, 0, 0, 0, 0, t637, t644, t623, t552, 0, 0, 0, 0, 0, 0, t637, t644, t623, t543; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1091, 0, -t1090, 0, t1206, -t1077, -t1058, -pkin(7) * t1058, -t1024 * t1115 + t1041 * t1119, -t1115 * t985 + t1119 * t995, t1037 * t1119 - t1115 * t990, -t1023 * t1115 + t1040 * t1119, t1038 * t1119 - t1115 * t991, t1119 * t1054 + t1115 * t1159, -pkin(7) * t951 - t1115 * t905 + t1119 * t911, -pkin(7) * t943 - t1115 * t895 + t1119 * t906, -pkin(7) * t933 - t1115 * t875 + t1119 * t873, -pkin(7) * t882 - t1115 * t884 + t1119 * t874, -t1115 * t915 + t1119 * t969, -t1115 * t867 + t1119 * t932, -t1115 * t880 + t1119 * t937, -t1115 * t914 + t1119 * t968, -t1115 * t881 + t1119 * t938, -t1115 * t939 + t1119 * t986, -pkin(7) * t810 - t1115 * t729 + t1119 * t739, -pkin(7) * t824 - t1115 * t738 + t1119 * t743, -pkin(7) * t806 - t1115 * t685 + t1119 * t727, -pkin(7) * t716 - t1115 * t652 + t1119 * t653, -t1115 * t758 + t1119 * t813, -t1115 * t705 + t1119 * t762, -t1115 * t754 + t1119 * t803, -t1115 * t757 + t1119 * t812, -t1115 * t755 + t1119 * t804, -t1115 * t805 + t1119 * t876, -pkin(7) * t692 - t1115 * t586 + t1119 * t609, -pkin(7) * t706 - t1115 * t594 + t1119 * t617, -pkin(7) * t662 - t1115 * t563 + t1119 * t574, -pkin(7) * t575 - t1115 * t546 + t1119 * t550, t642, t590, t614, t641, t615, t659, -t1115 * t534 + t1119 * t547 - t1301, -t1115 * t535 + t1119 * t549 - t1300, -t1115 * t530 + t1119 * t539 - t1302, -pkin(7) * t537 - t1115 * t522 + t1119 * t523, t642, t590, t614, t641, t615, t659, -t1115 * t529 + t1119 * t541 - t1301, -t1115 * t531 + t1119 * t542 - t1300, -t1115 * t526 + t1119 * t532 - t1302, -pkin(7) * t527 - t1115 * t520 + t1119 * t521; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1090, 0, t1091, 0, t1077, t1206, t1059, pkin(7) * t1059, t1024 * t1119 + t1041 * t1115, t1115 * t995 + t1119 * t985, t1037 * t1115 + t1119 * t990, t1023 * t1119 + t1040 * t1115, t1038 * t1115 + t1119 * t991, t1115 * t1054 - t1119 * t1159, pkin(7) * t952 + t1115 * t911 + t1119 * t905, pkin(7) * t944 + t1115 * t906 + t1119 * t895, pkin(7) * t934 + t1115 * t873 + t1119 * t875, pkin(7) * t883 + t1115 * t874 + t1119 * t884, t1115 * t969 + t1119 * t915, t1115 * t932 + t1119 * t867, t1115 * t937 + t1119 * t880, t1115 * t968 + t1119 * t914, t1115 * t938 + t1119 * t881, t1115 * t986 + t1119 * t939, pkin(7) * t811 + t1115 * t739 + t1119 * t729, pkin(7) * t825 + t1115 * t743 + t1119 * t738, pkin(7) * t807 + t1115 * t727 + t1119 * t685, pkin(7) * t717 + t1115 * t653 + t1119 * t652, t1115 * t813 + t1119 * t758, t1115 * t762 + t1119 * t705, t1115 * t803 + t1119 * t754, t1115 * t812 + t1119 * t757, t1115 * t804 + t1119 * t755, t1115 * t876 + t1119 * t805, pkin(7) * t693 + t1115 * t609 + t1119 * t586, pkin(7) * t707 + t1115 * t617 + t1119 * t594, pkin(7) * t663 + t1115 * t574 + t1119 * t563, pkin(7) * t576 + t1115 * t550 + t1119 * t546, t640, t589, t612, t639, t613, t658, t1115 * t547 + t1119 * t534 + t597, t1115 * t549 + t1119 * t535 + t604, t1115 * t539 + t1119 * t530 + t582, pkin(7) * t538 + t1115 * t523 + t1119 * t522, t640, t589, t612, t639, t613, t658, t1115 * t541 + t1119 * t529 + t597, t1115 * t542 + t1119 * t531 + t604, t1115 * t532 + t1119 * t526 + t582, pkin(7) * t528 + t1115 * t521 + t1119 * t520; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1093, t1094, 0, 0, (t1105 * t1118 * t1167 + t1076 * t1109) * t1114, t1111 * t1081 + t1109 * t1165, t1111 * t1048 + t1109 * t1161, -t1167 * t1216 + t1063, t1111 * t1049 + t1109 * t1162, t1111 * t1207, pkin(1) * t992 - t1111 * t1025 + t1109 * t1200, pkin(1) * t988 - t1111 * t1026 + t1109 * t1201, pkin(1) * t984 + t1109 * t1135, pkin(1) * t942 + t1290 * t971, t1111 * t1001 + t1109 * t1149, t1109 * t1169 + t1111 * t947, t1109 * t1173 + t1111 * t975, t1109 * t1150 + t1111 * t999, t1109 * t1172 + t1111 * t976, t1009 * t1111 + t1010 * t1244 + t1063, pkin(1) * t871 + t1109 * t1141 + t1111 * t877, pkin(1) * t879 + t1109 * t1140 + t1111 * t885, pkin(1) * t859 + t1109 * t1134 + t1111 * t794, pkin(1) * t746 + t1109 * t1129 + t1111 * t809, t1109 * t1153 + t1111 * t835, t1109 * t1181 + t1111 * t777, t1109 * t1176 + t1111 * t842, t1109 * t1154 + t1111 * t834, t1109 * t1175 + t1111 * t843, t1109 * t1133 + t1111 * t886, pkin(1) * t741 + t1109 * t1143 + t1111 * t699, pkin(1) * t749 + t1109 * t1142 + t1111 * t708, pkin(1) * t702 + t1109 * t1144 + t1111 * t618, pkin(1) * t602 + t1109 * t1145 + t1111 * t596, t674, t630, t647, t673, t648, t697, t1109 * t1194 + t1111 * t567 + t1283, t1109 * t1193 + t1111 * t569 + t1282, t1109 * t1196 + t1111 * t561 + t1284, pkin(1) * t553 + t1109 * t1146 + t1111 * t533, t674, t630, t647, t673, t648, t697, t1109 * t1198 + t1111 * t557 + t1283, t1109 * t1197 + t1111 * t559 + t1282, t1109 * t1199 + t1111 * t551 + t1284, pkin(1) * t544 + t1109 * t1147 + t1111 * t524;];
tauB_reg  = t1;
