% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRP9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRP9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP9_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:37:20
% EndTime: 2019-05-06 18:37:28
% DurationCPUTime: 8.62s
% Computational Cost: add. (83962->320), mult. (191723->479), div. (0->0), fcn. (156431->12), ass. (0->266)
t2403 = sin(pkin(6));
t2412 = cos(qJ(2));
t2457 = t2403 * t2412;
t2453 = qJD(1) * t2457;
t2445 = -qJD(4) + t2453;
t2444 = t2445 ^ 2;
t2405 = cos(pkin(6));
t2398 = qJD(1) * t2405 + qJD(2);
t2402 = sin(pkin(11));
t2404 = cos(pkin(11));
t2408 = sin(qJ(2));
t2462 = qJD(1) * t2408;
t2454 = t2403 * t2462;
t2373 = t2398 * t2404 - t2402 * t2454;
t2374 = t2398 * t2402 + t2404 * t2454;
t2407 = sin(qJ(4));
t2411 = cos(qJ(4));
t2349 = -t2411 * t2373 + t2374 * t2407;
t2348 = qJD(5) + t2349;
t2474 = qJD(5) + t2348;
t2455 = qJDD(1) * t2403;
t2380 = qJD(2) * t2453 + t2408 * t2455;
t2448 = qJDD(1) * t2405 + qJDD(2);
t2357 = t2404 * t2380 + t2402 * t2448;
t2364 = t2373 * t2453;
t2338 = -t2364 - t2357;
t2397 = t2412 * t2455;
t2425 = qJD(2) * t2454 - t2397;
t2459 = t2373 * t2374;
t2343 = t2425 + t2459;
t2356 = -t2380 * t2402 + t2404 * t2448;
t2429 = t2407 * t2356 + t2411 * t2357;
t2310 = -t2349 * qJD(4) + t2429;
t2301 = t2349 * t2445 + t2310;
t2351 = t2373 * t2407 + t2374 * t2411;
t2406 = sin(qJ(5));
t2410 = cos(qJ(5));
t2334 = t2351 * t2406 + t2410 * t2445;
t2473 = t2334 ^ 2;
t2336 = t2410 * t2351 - t2406 * t2445;
t2472 = t2336 ^ 2;
t2471 = t2348 ^ 2;
t2470 = t2349 ^ 2;
t2469 = t2351 ^ 2;
t2468 = t2373 ^ 2;
t2467 = t2374 ^ 2;
t2466 = t2398 ^ 2;
t2465 = -2 * qJD(6);
t2464 = t2405 * g(3);
t2463 = qJD(1) * t2403;
t2461 = t2334 * t2336;
t2460 = t2349 * t2351;
t2414 = qJD(1) ^ 2;
t2458 = t2403 ^ 2 * t2414;
t2456 = qJD(5) - t2348;
t2409 = sin(qJ(1));
t2413 = cos(qJ(1));
t2392 = -g(1) * t2413 - g(2) * t2409;
t2376 = -pkin(1) * t2414 + pkin(8) * t2455 + t2392;
t2377 = (-pkin(2) * t2412 - qJ(3) * t2408) * t2463;
t2391 = t2409 * g(1) - t2413 * g(2);
t2421 = t2414 * t2403 * pkin(8) + qJDD(1) * pkin(1) + t2391;
t2420 = t2405 * t2421;
t2418 = (-t2403 * g(3) + t2420) * t2408;
t2416 = -t2466 * pkin(2) + t2448 * qJ(3) + (t2377 * t2463 + t2376) * t2412 + t2418;
t2417 = -t2397 * pkin(2) - t2464 - t2380 * qJ(3) + ((-qJ(3) * t2398 * t2412 + (qJD(2) + t2398) * t2408 * pkin(2)) * qJD(1) - t2421) * t2403;
t2290 = 0.2e1 * qJD(3) * t2373 + t2402 * t2417 + t2404 * t2416;
t2358 = -pkin(3) * t2453 - pkin(9) * t2374;
t2282 = -pkin(3) * t2468 + pkin(9) * t2356 + t2358 * t2453 + t2290;
t2289 = -0.2e1 * qJD(3) * t2374 - t2402 * t2416 + t2404 * t2417;
t2415 = pkin(3) * t2343 + pkin(9) * t2338 + t2289;
t2253 = t2411 * t2282 + t2407 * t2415;
t2319 = pkin(4) * t2349 - pkin(10) * t2351;
t2423 = qJDD(4) + t2425;
t2242 = -pkin(4) * t2444 + pkin(10) * t2423 - t2349 * t2319 + t2253;
t2449 = t2408 * t2376 - t2412 * t2420;
t2324 = qJDD(3) - t2448 * pkin(2) - t2466 * qJ(3) + (g(3) * t2412 + t2377 * t2462) * t2403 + t2449;
t2292 = -t2356 * pkin(3) - t2468 * pkin(9) + t2374 * t2358 + t2324;
t2450 = -t2411 * t2356 + t2407 * t2357;
t2299 = (0.2e1 * qJD(4) - t2453) * t2351 + t2450;
t2257 = t2299 * pkin(4) - pkin(10) * t2301 + t2292;
t2227 = t2410 * t2242 + t2406 * t2257;
t2401 = t2412 ^ 2;
t2452 = t2401 * t2458;
t2226 = -t2406 * t2242 + t2410 * t2257;
t2252 = -t2282 * t2407 + t2411 * t2415;
t2451 = t2406 * t2310 - t2410 * t2423;
t2447 = t2398 * t2453;
t2446 = t2374 * t2453;
t2419 = -t2410 * t2310 - t2406 * t2423;
t2278 = t2334 * t2456 + t2419;
t2422 = -t2351 * qJD(4) - qJDD(5) - t2450;
t2285 = -t2422 - t2461;
t2214 = pkin(5) * t2285 + qJ(6) * t2278 + t2336 * t2465 + t2226;
t2311 = pkin(5) * t2348 - qJ(6) * t2336;
t2424 = -qJD(5) * t2336 - t2451;
t2217 = -t2348 * t2311 + t2424 * qJ(6) + (-pkin(5) * t2334 + t2465) * t2334 + t2227;
t2201 = -t2214 * t2406 + t2217 * t2410;
t2241 = -t2423 * pkin(4) - t2444 * pkin(10) + t2319 * t2351 - t2252;
t2230 = -pkin(5) * t2424 - qJ(6) * t2473 + t2311 * t2336 + qJDD(6) + t2241;
t2196 = t2201 * t2407 - t2230 * t2411;
t2197 = t2201 * t2411 + t2230 * t2407;
t2184 = -t2196 * t2402 + t2197 * t2404;
t2200 = t2214 * t2410 + t2217 * t2406;
t2443 = t2184 * t2408 - t2200 * t2412;
t2210 = -t2226 * t2406 + t2227 * t2410;
t2202 = t2210 * t2407 - t2241 * t2411;
t2203 = t2210 * t2411 + t2241 * t2407;
t2187 = -t2202 * t2402 + t2203 * t2404;
t2209 = t2226 * t2410 + t2227 * t2406;
t2442 = t2187 * t2408 - t2209 * t2412;
t2228 = t2252 * t2411 + t2253 * t2407;
t2229 = -t2252 * t2407 + t2253 * t2411;
t2212 = -t2228 * t2402 + t2229 * t2404;
t2441 = t2212 * t2408 - t2292 * t2412;
t2276 = -t2336 * t2456 - t2451;
t2250 = t2276 * t2410 - t2278 * t2406;
t2294 = -t2472 - t2473;
t2238 = t2250 * t2407 - t2294 * t2411;
t2239 = t2250 * t2411 + t2294 * t2407;
t2219 = -t2238 * t2402 + t2239 * t2404;
t2249 = t2276 * t2406 + t2278 * t2410;
t2440 = t2219 * t2408 - t2249 * t2412;
t2298 = -t2471 - t2473;
t2262 = -t2285 * t2406 + t2298 * t2410;
t2275 = t2336 * t2474 + t2451;
t2243 = t2262 * t2407 - t2275 * t2411;
t2244 = t2262 * t2411 + t2275 * t2407;
t2223 = -t2243 * t2402 + t2244 * t2404;
t2261 = t2285 * t2410 + t2298 * t2406;
t2439 = t2223 * t2408 - t2261 * t2412;
t2286 = t2422 - t2461;
t2303 = -t2471 - t2472;
t2266 = t2286 * t2410 - t2303 * t2406;
t2277 = -t2334 * t2474 - t2419;
t2245 = t2266 * t2407 - t2277 * t2411;
t2246 = t2266 * t2411 + t2277 * t2407;
t2225 = -t2245 * t2402 + t2246 * t2404;
t2265 = t2286 * t2406 + t2303 * t2410;
t2438 = t2225 * t2408 - t2265 * t2412;
t2300 = -t2351 * t2453 - t2450;
t2302 = t2349 * t2453 - t2429;
t2269 = t2300 * t2407 + t2302 * t2411;
t2270 = t2300 * t2411 - t2302 * t2407;
t2248 = -t2269 * t2402 + t2270 * t2404;
t2305 = -t2469 - t2470;
t2437 = t2248 * t2408 - t2305 * t2412;
t2315 = t2423 - t2460;
t2317 = -t2444 - t2470;
t2287 = t2315 * t2411 + t2317 * t2407;
t2288 = -t2315 * t2407 + t2317 * t2411;
t2260 = -t2287 * t2402 + t2288 * t2404;
t2436 = t2260 * t2408 - t2299 * t2412;
t2264 = -t2289 * t2402 + t2290 * t2404;
t2435 = t2264 * t2408 - t2324 * t2412;
t2314 = -t2423 - t2460;
t2331 = -t2469 - t2444;
t2295 = t2314 * t2407 + t2331 * t2411;
t2296 = t2314 * t2411 - t2331 * t2407;
t2268 = -t2295 * t2402 + t2296 * t2404;
t2434 = t2268 * t2408 - t2301 * t2412;
t2340 = t2356 - t2446;
t2309 = -t2338 * t2402 + t2340 * t2404;
t2337 = -t2467 - t2468;
t2433 = t2309 * t2408 - t2337 * t2412;
t2347 = -t2452 - t2468;
t2313 = -t2343 * t2402 + t2347 * t2404;
t2339 = -t2356 - t2446;
t2432 = t2313 * t2408 - t2339 * t2412;
t2342 = -t2425 + t2459;
t2363 = -t2452 - t2467;
t2321 = t2342 * t2404 - t2363 * t2402;
t2341 = -t2364 + t2357;
t2431 = t2321 * t2408 - t2341 * t2412;
t2345 = -g(3) * t2457 - t2449;
t2346 = t2412 * t2376 + t2418;
t2430 = t2345 * t2412 + t2346 * t2408;
t2360 = t2447 - t2380;
t2383 = t2398 * t2454;
t2361 = t2383 - t2425;
t2428 = t2360 * t2412 + t2361 * t2408;
t2400 = t2408 ^ 2;
t2371 = -t2400 * t2458 - t2466;
t2390 = t2412 * t2408 * t2458;
t2379 = t2390 - t2448;
t2427 = t2371 * t2412 + t2379 * t2408;
t2378 = t2390 + t2448;
t2381 = -t2452 - t2466;
t2426 = t2378 * t2412 + t2381 * t2408;
t2389 = -qJDD(1) * t2409 - t2413 * t2414;
t2388 = qJDD(1) * t2413 - t2409 * t2414;
t2382 = (-t2400 - t2401) * t2458;
t2366 = -t2403 * t2421 - t2464;
t2362 = t2383 + t2425;
t2359 = t2447 + t2380;
t2353 = -t2378 * t2408 + t2381 * t2412;
t2352 = -t2371 * t2408 + t2379 * t2412;
t2332 = -t2360 * t2408 + t2361 * t2412;
t2330 = -t2403 * t2362 + t2405 * t2426;
t2329 = t2405 * t2362 + t2403 * t2426;
t2328 = -t2403 * t2359 + t2405 * t2427;
t2327 = t2405 * t2359 + t2403 * t2427;
t2326 = -t2403 * t2382 + t2405 * t2428;
t2325 = t2405 * t2382 + t2403 * t2428;
t2320 = t2342 * t2402 + t2363 * t2404;
t2318 = -t2345 * t2408 + t2346 * t2412;
t2312 = t2343 * t2404 + t2347 * t2402;
t2308 = t2338 * t2404 + t2340 * t2402;
t2307 = -t2403 * t2366 + t2405 * t2430;
t2306 = t2405 * t2366 + t2403 * t2430;
t2304 = t2321 * t2412 + t2341 * t2408;
t2297 = t2313 * t2412 + t2339 * t2408;
t2293 = t2309 * t2412 + t2337 * t2408;
t2284 = -t2403 * t2320 + t2405 * t2431;
t2283 = t2405 * t2320 + t2403 * t2431;
t2281 = -t2403 * t2312 + t2405 * t2432;
t2280 = t2405 * t2312 + t2403 * t2432;
t2274 = -t2403 * t2308 + t2405 * t2433;
t2273 = t2405 * t2308 + t2403 * t2433;
t2267 = t2295 * t2404 + t2296 * t2402;
t2263 = t2289 * t2404 + t2290 * t2402;
t2259 = t2287 * t2404 + t2288 * t2402;
t2258 = t2264 * t2412 + t2324 * t2408;
t2254 = t2268 * t2412 + t2301 * t2408;
t2251 = t2260 * t2412 + t2299 * t2408;
t2247 = t2269 * t2404 + t2270 * t2402;
t2237 = t2248 * t2412 + t2305 * t2408;
t2236 = -t2403 * t2267 + t2405 * t2434;
t2235 = t2405 * t2267 + t2403 * t2434;
t2234 = -t2403 * t2263 + t2405 * t2435;
t2233 = t2405 * t2263 + t2403 * t2435;
t2232 = -t2403 * t2259 + t2405 * t2436;
t2231 = t2405 * t2259 + t2403 * t2436;
t2224 = t2245 * t2404 + t2246 * t2402;
t2222 = t2243 * t2404 + t2244 * t2402;
t2221 = -t2403 * t2247 + t2405 * t2437;
t2220 = t2405 * t2247 + t2403 * t2437;
t2218 = t2238 * t2404 + t2239 * t2402;
t2216 = t2225 * t2412 + t2265 * t2408;
t2215 = t2223 * t2412 + t2261 * t2408;
t2213 = t2219 * t2412 + t2249 * t2408;
t2211 = t2228 * t2404 + t2229 * t2402;
t2208 = t2212 * t2412 + t2292 * t2408;
t2207 = -t2403 * t2224 + t2405 * t2438;
t2206 = t2405 * t2224 + t2403 * t2438;
t2205 = -t2403 * t2222 + t2405 * t2439;
t2204 = t2405 * t2222 + t2403 * t2439;
t2199 = -t2403 * t2218 + t2405 * t2440;
t2198 = t2405 * t2218 + t2403 * t2440;
t2195 = -t2207 * t2409 + t2216 * t2413;
t2194 = t2207 * t2413 + t2216 * t2409;
t2193 = -t2403 * t2211 + t2405 * t2441;
t2192 = t2405 * t2211 + t2403 * t2441;
t2191 = -t2205 * t2409 + t2215 * t2413;
t2190 = t2205 * t2413 + t2215 * t2409;
t2189 = -t2199 * t2409 + t2213 * t2413;
t2188 = t2199 * t2413 + t2213 * t2409;
t2186 = t2202 * t2404 + t2203 * t2402;
t2185 = t2187 * t2412 + t2209 * t2408;
t2183 = t2196 * t2404 + t2197 * t2402;
t2182 = t2184 * t2412 + t2200 * t2408;
t2181 = -t2403 * t2186 + t2405 * t2442;
t2180 = t2405 * t2186 + t2403 * t2442;
t2179 = -t2403 * t2183 + t2405 * t2443;
t2178 = t2405 * t2183 + t2403 * t2443;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2389, -t2388, 0, -t2391 * t2409 + t2392 * t2413, 0, 0, 0, 0, 0, 0, -t2330 * t2409 + t2353 * t2413, -t2328 * t2409 + t2352 * t2413, -t2326 * t2409 + t2332 * t2413, -t2307 * t2409 + t2318 * t2413, 0, 0, 0, 0, 0, 0, -t2281 * t2409 + t2297 * t2413, -t2284 * t2409 + t2304 * t2413, -t2274 * t2409 + t2293 * t2413, -t2234 * t2409 + t2258 * t2413, 0, 0, 0, 0, 0, 0, -t2232 * t2409 + t2251 * t2413, -t2236 * t2409 + t2254 * t2413, -t2221 * t2409 + t2237 * t2413, -t2193 * t2409 + t2208 * t2413, 0, 0, 0, 0, 0, 0, t2191, t2195, t2189, -t2181 * t2409 + t2185 * t2413, 0, 0, 0, 0, 0, 0, t2191, t2195, t2189, -t2179 * t2409 + t2182 * t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2388, t2389, 0, t2391 * t2413 + t2392 * t2409, 0, 0, 0, 0, 0, 0, t2330 * t2413 + t2353 * t2409, t2328 * t2413 + t2352 * t2409, t2326 * t2413 + t2332 * t2409, t2307 * t2413 + t2318 * t2409, 0, 0, 0, 0, 0, 0, t2281 * t2413 + t2297 * t2409, t2284 * t2413 + t2304 * t2409, t2274 * t2413 + t2293 * t2409, t2234 * t2413 + t2258 * t2409, 0, 0, 0, 0, 0, 0, t2232 * t2413 + t2251 * t2409, t2236 * t2413 + t2254 * t2409, t2221 * t2413 + t2237 * t2409, t2193 * t2413 + t2208 * t2409, 0, 0, 0, 0, 0, 0, t2190, t2194, t2188, t2181 * t2413 + t2185 * t2409, 0, 0, 0, 0, 0, 0, t2190, t2194, t2188, t2179 * t2413 + t2182 * t2409; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2329, t2327, t2325, t2306, 0, 0, 0, 0, 0, 0, t2280, t2283, t2273, t2233, 0, 0, 0, 0, 0, 0, t2231, t2235, t2220, t2192, 0, 0, 0, 0, 0, 0, t2204, t2206, t2198, t2180, 0, 0, 0, 0, 0, 0, t2204, t2206, t2198, t2178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2414, -qJDD(1), 0, t2392, 0, 0, 0, 0, 0, 0, t2353, t2352, t2332, t2318, 0, 0, 0, 0, 0, 0, t2297, t2304, t2293, t2258, 0, 0, 0, 0, 0, 0, t2251, t2254, t2237, t2208, 0, 0, 0, 0, 0, 0, t2215, t2216, t2213, t2185, 0, 0, 0, 0, 0, 0, t2215, t2216, t2213, t2182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2414, 0, t2391, 0, 0, 0, 0, 0, 0, t2330, t2328, t2326, t2307, 0, 0, 0, 0, 0, 0, t2281, t2284, t2274, t2234, 0, 0, 0, 0, 0, 0, t2232, t2236, t2221, t2193, 0, 0, 0, 0, 0, 0, t2205, t2207, t2199, t2181, 0, 0, 0, 0, 0, 0, t2205, t2207, t2199, t2179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2329, t2327, t2325, t2306, 0, 0, 0, 0, 0, 0, t2280, t2283, t2273, t2233, 0, 0, 0, 0, 0, 0, t2231, t2235, t2220, t2192, 0, 0, 0, 0, 0, 0, t2204, t2206, t2198, t2180, 0, 0, 0, 0, 0, 0, t2204, t2206, t2198, t2178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2381, t2379, t2361, t2346, 0, 0, 0, 0, 0, 0, t2313, t2321, t2309, t2264, 0, 0, 0, 0, 0, 0, t2260, t2268, t2248, t2212, 0, 0, 0, 0, 0, 0, t2223, t2225, t2219, t2187, 0, 0, 0, 0, 0, 0, t2223, t2225, t2219, t2184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2378, t2371, t2360, t2345, 0, 0, 0, 0, 0, 0, -t2339, -t2341, -t2337, -t2324, 0, 0, 0, 0, 0, 0, -t2299, -t2301, -t2305, -t2292, 0, 0, 0, 0, 0, 0, -t2261, -t2265, -t2249, -t2209, 0, 0, 0, 0, 0, 0, -t2261, -t2265, -t2249, -t2200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2362, t2359, t2382, t2366, 0, 0, 0, 0, 0, 0, t2312, t2320, t2308, t2263, 0, 0, 0, 0, 0, 0, t2259, t2267, t2247, t2211, 0, 0, 0, 0, 0, 0, t2222, t2224, t2218, t2186, 0, 0, 0, 0, 0, 0, t2222, t2224, t2218, t2183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2347, t2342, t2340, t2290, 0, 0, 0, 0, 0, 0, t2288, t2296, t2270, t2229, 0, 0, 0, 0, 0, 0, t2244, t2246, t2239, t2203, 0, 0, 0, 0, 0, 0, t2244, t2246, t2239, t2197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2343, t2363, t2338, t2289, 0, 0, 0, 0, 0, 0, t2287, t2295, t2269, t2228, 0, 0, 0, 0, 0, 0, t2243, t2245, t2238, t2202, 0, 0, 0, 0, 0, 0, t2243, t2245, t2238, t2196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2339, t2341, t2337, t2324, 0, 0, 0, 0, 0, 0, t2299, t2301, t2305, t2292, 0, 0, 0, 0, 0, 0, t2261, t2265, t2249, t2209, 0, 0, 0, 0, 0, 0, t2261, t2265, t2249, t2200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, t2314, t2300, t2253, 0, 0, 0, 0, 0, 0, t2262, t2266, t2250, t2210, 0, 0, 0, 0, 0, 0, t2262, t2266, t2250, t2201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2315, t2331, t2302, t2252, 0, 0, 0, 0, 0, 0, -t2275, -t2277, -t2294, -t2241, 0, 0, 0, 0, 0, 0, -t2275, -t2277, -t2294, -t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2299, t2301, t2305, t2292, 0, 0, 0, 0, 0, 0, t2261, t2265, t2249, t2209, 0, 0, 0, 0, 0, 0, t2261, t2265, t2249, t2200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2298, t2286, t2276, t2227, 0, 0, 0, 0, 0, 0, t2298, t2286, t2276, t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2285, t2303, t2278, t2226, 0, 0, 0, 0, 0, 0, t2285, t2303, t2278, t2214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2275, t2277, t2294, t2241, 0, 0, 0, 0, 0, 0, t2275, t2277, t2294, t2230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2298, t2286, t2276, t2217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2285, t2303, t2278, t2214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2275, t2277, t2294, t2230;];
f_new_reg  = t1;
