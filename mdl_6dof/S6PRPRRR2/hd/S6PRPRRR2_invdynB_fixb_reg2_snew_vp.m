% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 00:26
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:25:07
% EndTime: 2019-05-05 00:25:44
% DurationCPUTime: 34.11s
% Computational Cost: add. (215282->910), mult. (406086->1479), div. (0->0), fcn. (301087->14), ass. (0->648)
t859 = cos(qJ(2));
t845 = sin(pkin(11));
t848 = cos(pkin(11));
t812 = g(1) * t848 + g(2) * t845;
t855 = sin(qJ(2));
t841 = g(3) - qJDD(1);
t846 = sin(pkin(6));
t811 = g(1) * t845 - t848 * g(2);
t849 = cos(pkin(6));
t953 = t811 * t849;
t989 = t841 * t846 - t953;
t721 = -t812 * t859 - t855 * t989;
t860 = qJD(2) ^ 2;
t709 = -pkin(2) * t860 + t721;
t844 = sin(pkin(12));
t847 = cos(pkin(12));
t720 = -t812 * t855 + t859 * t989;
t879 = qJDD(2) * pkin(2) - t720;
t648 = t709 * t844 - t847 * t879;
t649 = t847 * t709 + t844 * t879;
t925 = t648 * t844 + t847 * t649;
t556 = t648 * t847 - t649 * t844;
t967 = t556 * t855;
t994 = t859 * t925 + t967;
t966 = t556 * t859;
t485 = -t855 * t925 + t966;
t804 = qJDD(2) * t844 + t847 * t860;
t829 = t849 * t841;
t779 = t811 * t846 + t829;
t915 = -qJDD(3) + t779;
t715 = -qJ(3) * t804 + t847 * t915;
t805 = qJDD(2) * t847 - t844 * t860;
t980 = -qJ(3) * t805 - t844 * t915;
t993 = -t715 * t855 + t980 * t859;
t992 = -t715 * t859 - t980 * t855;
t853 = sin(qJ(5));
t857 = cos(qJ(5));
t854 = sin(qJ(4));
t940 = qJD(2) * t854;
t796 = -t857 * qJD(4) + t853 * t940;
t858 = cos(qJ(4));
t939 = qJD(2) * t858;
t826 = -qJD(5) + t939;
t780 = t796 * t826;
t936 = qJD(2) * qJD(4);
t926 = t858 * t936;
t934 = qJDD(2) * t854;
t801 = t926 + t934;
t928 = t796 * qJD(5) - t853 * qJDD(4) - t857 * t801;
t693 = t780 + t928;
t752 = t804 * t855 - t805 * t859;
t881 = t804 * t859 + t805 * t855;
t982 = t881 * t849;
t669 = t752 * t848 + t845 * t982;
t667 = t752 * t845 - t848 * t982;
t852 = sin(qJ(6));
t830 = t854 * t936;
t933 = qJDD(2) * t858;
t802 = -t830 + t933;
t793 = -qJDD(5) + t802;
t788 = -qJDD(6) + t793;
t798 = qJD(4) * t853 + t857 * t940;
t856 = cos(qJ(6));
t746 = t856 * t796 + t798 * t852;
t748 = -t796 * t852 + t798 * t856;
t957 = t746 * t748;
t861 = -t788 - t957;
t988 = t852 * t861;
t954 = t796 * t798;
t864 = -t793 - t954;
t987 = t853 * t864;
t985 = t856 * t861;
t984 = t857 * t864;
t734 = t881 * t846;
t817 = -qJD(6) + t826;
t710 = t746 * t817;
t923 = -t857 * qJDD(4) + t801 * t853;
t732 = -qJD(5) * t798 - t923;
t863 = qJD(6) * t746 - t732 * t852 + t856 * t928;
t981 = t710 - t863;
t692 = t928 - t780;
t924 = -t856 * t732 - t852 * t928;
t577 = (qJD(6) + t817) * t748 + t924;
t688 = (qJD(5) + t826) * t798 + t923;
t744 = t746 ^ 2;
t745 = t748 ^ 2;
t979 = t796 ^ 2;
t792 = t798 ^ 2;
t816 = t817 ^ 2;
t824 = t826 ^ 2;
t978 = qJD(4) ^ 2;
t977 = pkin(2) * t556;
t976 = pkin(4) * t854;
t975 = pkin(4) * t858;
t654 = t720 * t855 + t721 * t859;
t974 = pkin(7) * t654;
t640 = -pkin(3) * t860 + qJDD(2) * pkin(8) + t649;
t617 = t858 * t640 - t854 * t915;
t920 = -pkin(9) * t854 - t975;
t799 = t920 * qJD(2);
t588 = -pkin(4) * t978 + qJDD(4) * pkin(9) + t799 * t939 + t617;
t639 = -qJDD(2) * pkin(3) - t860 * pkin(8) + t648;
t916 = -t802 + t830;
t917 = t801 + t926;
t598 = pkin(4) * t916 - pkin(9) * t917 + t639;
t514 = t588 * t853 - t857 * t598;
t484 = t864 * pkin(5) + pkin(10) * t693 - t514;
t515 = t857 * t588 + t853 * t598;
t772 = -pkin(5) * t826 - pkin(10) * t798;
t490 = -pkin(5) * t979 + pkin(10) * t732 + t772 * t826 + t515;
t413 = -t856 * t484 + t490 * t852;
t414 = t852 * t484 + t856 * t490;
t362 = -t413 * t856 + t414 * t852;
t971 = t362 * t853;
t970 = t362 * t857;
t761 = t858 * t915;
t587 = t761 - qJDD(4) * pkin(4) - t978 * pkin(9) + (qJD(2) * t799 + t640) * t854;
t533 = -t732 * pkin(5) - pkin(10) * t979 + t772 * t798 + t587;
t969 = t533 * t852;
t968 = t533 * t856;
t965 = t587 * t853;
t964 = t587 * t857;
t963 = t639 * t854;
t962 = t639 * t858;
t655 = t788 - t957;
t961 = t655 * t852;
t960 = t655 * t856;
t717 = t793 - t954;
t959 = t717 * t853;
t958 = t717 * t857;
t956 = t779 * t855;
t955 = t779 * t859;
t825 = t854 * t860 * t858;
t813 = qJDD(4) + t825;
t952 = t813 * t854;
t814 = qJDD(4) - t825;
t951 = t814 * t854;
t950 = t814 * t858;
t949 = t817 * t852;
t948 = t817 * t856;
t947 = t826 * t853;
t946 = t826 * t857;
t839 = t854 ^ 2;
t945 = t839 * t860;
t943 = t845 * t841;
t942 = t848 * t841;
t840 = t858 ^ 2;
t941 = t839 + t840;
t935 = qJDD(2) * t846;
t932 = t854 * t957;
t931 = t858 * t957;
t930 = t854 * t954;
t929 = t858 * t954;
t927 = t848 * t935;
t363 = t413 * t852 + t856 * t414;
t616 = t640 * t854 + t761;
t530 = t616 * t854 + t858 * t617;
t758 = -t811 * t845 - t848 * t812;
t922 = t844 * t825;
t921 = t847 * t825;
t807 = qJDD(2) * t859 - t855 * t860;
t919 = -pkin(7) * t807 - t956;
t880 = qJDD(2) * t855 + t859 * t860;
t918 = -pkin(7) * t880 + t955;
t336 = t363 * t857 - t971;
t334 = t336 * t858 + t533 * t854;
t335 = t363 * t853 + t970;
t297 = t334 * t844 - t335 * t847;
t298 = t334 * t847 + t335 * t844;
t914 = t297 * t859 + t298 * t855;
t581 = t710 + t863;
t508 = -t577 * t852 + t581 * t856;
t510 = -t577 * t856 - t581 * t852;
t442 = -t508 * t853 + t510 * t857;
t638 = -t744 - t745;
t424 = t442 * t858 + t638 * t854;
t440 = t508 * t857 + t510 * t853;
t375 = t424 * t844 - t440 * t847;
t376 = t424 * t847 + t440 * t844;
t913 = t375 * t859 + t376 * t855;
t447 = t514 * t853 + t515 * t857;
t419 = t447 * t858 + t587 * t854;
t446 = -t514 * t857 + t515 * t853;
t377 = t419 * t844 - t446 * t847;
t378 = t419 * t847 + t446 * t844;
t912 = t377 * t859 + t378 * t855;
t576 = (qJD(6) - t817) * t748 + t924;
t509 = -t576 * t852 + t856 * t981;
t511 = -t576 * t856 - t852 * t981;
t443 = -t509 * t853 + t511 * t857;
t677 = -t745 + t744;
t435 = t443 * t858 - t677 * t854;
t441 = -t509 * t857 - t511 * t853;
t381 = t435 * t844 + t441 * t847;
t382 = t435 * t847 - t441 * t844;
t911 = t381 * t859 + t382 * t855;
t664 = -t816 - t744;
t570 = t664 * t852 + t985;
t571 = t664 * t856 - t988;
t501 = -t570 * t853 + t571 * t857;
t457 = t501 * t858 + t576 * t854;
t500 = t570 * t857 + t571 * t853;
t407 = t457 * t844 - t500 * t847;
t408 = t457 * t847 + t500 * t844;
t910 = t407 * t859 + t408 * t855;
t695 = -t745 - t816;
t596 = t695 * t856 + t961;
t597 = -t695 * t852 + t960;
t519 = -t596 * t853 + t597 * t857;
t461 = t519 * t858 + t854 * t981;
t518 = t596 * t857 + t597 * t853;
t425 = t461 * t844 - t518 * t847;
t426 = t461 * t847 + t518 * t844;
t909 = t425 * t859 + t426 * t855;
t630 = -qJD(6) * t748 - t924;
t572 = t630 * t856 - t746 * t949;
t573 = -t630 * t852 - t746 * t948;
t504 = -t572 * t853 + t573 * t857;
t477 = t504 * t858 - t932;
t502 = -t572 * t857 - t573 * t853;
t427 = t477 * t844 + t502 * t847;
t429 = t477 * t847 - t502 * t844;
t908 = t427 * t859 + t429 * t855;
t574 = -t748 * t948 - t852 * t863;
t575 = t748 * t949 - t856 * t863;
t505 = -t574 * t853 + t575 * t857;
t478 = t505 * t858 + t932;
t503 = -t574 * t857 - t575 * t853;
t428 = t478 * t844 + t503 * t847;
t430 = t478 * t847 - t503 * t844;
t907 = t428 * t859 + t430 * t855;
t708 = -t745 + t816;
t602 = t708 * t856 + t988;
t604 = -t708 * t852 + t985;
t526 = -t602 * t853 + t604 * t857;
t467 = t526 * t858 - t581 * t854;
t524 = -t602 * t857 - t604 * t853;
t436 = t467 * t844 + t524 * t847;
t438 = t467 * t847 - t524 * t844;
t906 = t436 * t859 + t438 * t855;
t707 = t744 - t816;
t603 = t707 * t852 - t960;
t605 = t707 * t856 + t961;
t527 = -t603 * t853 + t605 * t857;
t468 = t527 * t858 - t577 * t854;
t525 = -t603 * t857 - t605 * t853;
t437 = t468 * t844 + t525 * t847;
t439 = t468 * t847 - t525 * t844;
t905 = t437 * t859 + t439 * t855;
t651 = (t746 * t852 + t748 * t856) * t817;
t652 = (t746 * t856 - t748 * t852) * t817;
t561 = -t651 * t853 + t652 * t857;
t549 = t561 * t858 - t788 * t854;
t560 = -t651 * t857 - t652 * t853;
t479 = t549 * t844 + t560 * t847;
t480 = t549 * t847 - t560 * t844;
t904 = t479 * t859 + t480 * t855;
t492 = t530 * t844 - t639 * t847;
t493 = t530 * t847 + t639 * t844;
t903 = t492 * t859 + t493 * t855;
t623 = -t688 * t857 - t693 * t853;
t712 = t792 + t979;
t565 = t623 * t858 - t712 * t854;
t621 = -t688 * t853 + t693 * t857;
t516 = t565 * t844 - t621 * t847;
t517 = t565 * t847 + t621 * t844;
t902 = t516 * t859 + t517 * t855;
t689 = (-qJD(5) + t826) * t798 - t923;
t622 = t689 * t857 + t692 * t853;
t759 = -t792 + t979;
t586 = t622 * t858 - t759 * t854;
t620 = -t689 * t853 + t692 * t857;
t520 = t586 * t844 + t620 * t847;
t521 = t586 * t847 - t620 * t844;
t901 = t520 * t859 + t521 * t855;
t743 = -t824 - t979;
t659 = t743 * t857 - t987;
t591 = t659 * t858 - t689 * t854;
t658 = t743 * t853 + t984;
t535 = t591 * t844 - t658 * t847;
t538 = t591 * t847 + t658 * t844;
t900 = t535 * t859 + t538 * t855;
t756 = -t792 - t824;
t666 = -t756 * t853 + t958;
t600 = t666 * t858 - t692 * t854;
t665 = t756 * t857 + t959;
t542 = t600 * t844 - t665 * t847;
t543 = t600 * t847 + t665 * t844;
t899 = t542 * t859 + t543 * t855;
t778 = -t792 + t824;
t675 = -t778 * t853 + t984;
t608 = t675 * t858 - t693 * t854;
t673 = -t778 * t857 - t987;
t550 = t608 * t844 + t673 * t847;
t552 = t608 * t847 - t673 * t844;
t898 = t550 * t859 + t552 * t855;
t777 = -t824 + t979;
t676 = t777 * t857 + t959;
t609 = t676 * t858 - t688 * t854;
t674 = -t777 * t853 + t958;
t551 = t609 * t844 + t674 * t847;
t553 = t609 * t847 - t674 * t844;
t897 = t551 * t859 + t553 * t855;
t684 = -t732 * t853 - t796 * t946;
t646 = t684 * t858 - t930;
t683 = -t732 * t857 + t796 * t947;
t566 = t646 * t844 + t683 * t847;
t568 = t646 * t847 - t683 * t844;
t894 = t566 * t859 + t568 * t855;
t686 = t798 * t947 - t857 * t928;
t647 = t686 * t858 + t930;
t685 = t798 * t946 + t853 * t928;
t567 = t647 * t844 + t685 * t847;
t569 = t647 * t847 - t685 * t844;
t893 = t567 * t859 + t569 * t855;
t529 = t616 * t858 - t617 * t854;
t699 = (t796 * t857 - t798 * t853) * t826;
t679 = t699 * t858 - t793 * t854;
t698 = (-t796 * t853 - t798 * t857) * t826;
t618 = t679 * t844 + t698 * t847;
t619 = t679 * t847 - t698 * t844;
t892 = t618 * t859 + t619 * t855;
t800 = 0.2e1 * t926 + t934;
t803 = -0.2e1 * t830 + t933;
t750 = -t800 * t854 + t803 * t858;
t837 = t840 * t860;
t810 = t837 - t945;
t696 = t750 * t844 + t810 * t847;
t697 = t750 * t847 - t810 * t844;
t891 = t696 * t859 + t697 * t855;
t823 = -t837 - t978;
t769 = t823 * t858 - t952;
t703 = t769 * t844 + t803 * t847;
t705 = t769 * t847 - t803 * t844;
t890 = t703 * t859 + t705 * t855;
t821 = -t945 - t978;
t771 = -t821 * t854 - t950;
t704 = t771 * t844 - t800 * t847;
t706 = t771 * t847 + t800 * t844;
t889 = t704 * t859 + t706 * t855;
t653 = t720 * t859 - t721 * t855;
t822 = t837 - t978;
t768 = t822 * t858 - t951;
t724 = t768 * t844 - t847 * t933;
t726 = t768 * t847 + t844 * t933;
t888 = t724 * t859 + t726 * t855;
t795 = t858 * t813;
t820 = -t945 + t978;
t770 = -t820 * t854 + t795;
t725 = t770 * t844 - t847 * t934;
t727 = t770 * t847 + t844 * t934;
t887 = t725 * t859 + t727 * t855;
t775 = -t802 * t854 - t840 * t936;
t728 = t775 * t844 - t921;
t730 = t775 * t847 + t922;
t886 = t728 * t859 + t730 * t855;
t776 = t801 * t858 - t839 * t936;
t729 = t776 * t844 + t921;
t731 = t776 * t847 - t922;
t885 = t729 * t859 + t731 * t855;
t806 = t941 * qJDD(2);
t809 = t837 + t945;
t754 = t806 * t844 + t809 * t847;
t755 = t806 * t847 - t809 * t844;
t884 = t754 * t859 + t755 * t855;
t794 = t941 * t936;
t773 = -qJDD(4) * t847 + t794 * t844;
t774 = qJDD(4) * t844 + t794 * t847;
t883 = t773 * t859 + t774 * t855;
t783 = t880 * t849;
t882 = t783 * t848 + t807 * t845;
t741 = t783 * t845 - t807 * t848;
t757 = t811 * t848 - t812 * t845;
t357 = -pkin(5) * t533 + pkin(10) * t363;
t299 = -pkin(9) * t335 - pkin(10) * t970 - t357 * t853;
t315 = -pkin(4) * t335 - pkin(5) * t362;
t333 = t336 * t854 - t533 * t858;
t290 = -pkin(8) * t333 + t299 * t858 - t315 * t854;
t294 = -pkin(3) * t333 + pkin(4) * t533 - pkin(9) * t336 + pkin(10) * t971 - t357 * t857;
t276 = -pkin(2) * t333 + qJ(3) * t298 + t290 * t844 + t294 * t847;
t278 = -qJ(3) * t297 + t290 * t847 - t294 * t844;
t292 = -t297 * t855 + t298 * t859;
t878 = pkin(7) * t292 + t276 * t859 + t278 * t855;
t346 = -pkin(5) * t638 + pkin(10) * t510 + t363;
t353 = -pkin(10) * t508 - t362;
t317 = -pkin(9) * t440 - t346 * t853 + t353 * t857;
t404 = -pkin(4) * t440 - pkin(5) * t508;
t423 = t442 * t854 - t638 * t858;
t305 = -pkin(8) * t423 + t317 * t858 - t404 * t854;
t311 = -pkin(3) * t423 + pkin(4) * t638 - pkin(9) * t442 - t346 * t857 - t353 * t853;
t291 = -pkin(2) * t423 + qJ(3) * t376 + t305 * t844 + t311 * t847;
t293 = -qJ(3) * t375 + t305 * t847 - t311 * t844;
t339 = -t375 * t855 + t376 * t859;
t877 = pkin(7) * t339 + t291 * t859 + t293 * t855;
t452 = -pkin(5) * t576 + pkin(10) * t571 - t968;
t474 = -pkin(10) * t570 + t969;
t383 = -pkin(9) * t500 - t452 * t853 + t474 * t857;
t384 = -pkin(4) * t500 - pkin(5) * t570 + t413;
t456 = t501 * t854 - t576 * t858;
t337 = -pkin(8) * t456 + t383 * t858 - t384 * t854;
t348 = -pkin(3) * t456 + pkin(4) * t576 - pkin(9) * t501 - t452 * t857 - t474 * t853;
t300 = -pkin(2) * t456 + qJ(3) * t408 + t337 * t844 + t348 * t847;
t307 = -qJ(3) * t407 + t337 * t847 - t348 * t844;
t360 = -t407 * t855 + t408 * t859;
t876 = pkin(7) * t360 + t300 * t859 + t307 * t855;
t455 = -pkin(5) * t981 + pkin(10) * t597 + t969;
t487 = -pkin(10) * t596 + t968;
t386 = -pkin(9) * t518 - t455 * t853 + t487 * t857;
t387 = -pkin(4) * t518 - pkin(5) * t596 + t414;
t460 = t519 * t854 - t858 * t981;
t338 = -pkin(8) * t460 + t386 * t858 - t387 * t854;
t356 = -pkin(3) * t460 + pkin(4) * t981 - pkin(9) * t519 - t455 * t857 - t487 * t853;
t308 = -pkin(2) * t460 + qJ(3) * t426 + t338 * t844 + t356 * t847;
t310 = -qJ(3) * t425 + t338 * t847 - t356 * t844;
t366 = -t425 * t855 + t426 * t859;
t875 = pkin(7) * t366 + t308 * t859 + t310 * t855;
t418 = t447 * t854 - t587 * t858;
t347 = -pkin(8) * t418 + (-pkin(9) * t858 + t976) * t446;
t365 = -pkin(3) * t418 + pkin(4) * t587 - pkin(9) * t447;
t309 = -pkin(2) * t418 + qJ(3) * t378 + t347 * t844 + t365 * t847;
t314 = -qJ(3) * t377 + t347 * t847 - t365 * t844;
t340 = -t377 * t855 + t378 * t859;
t874 = pkin(7) * t340 + t309 * t859 + t314 * t855;
t433 = -pkin(9) * t621 - t446;
t564 = t623 * t854 + t712 * t858;
t401 = -pkin(8) * t564 + t433 * t858 + t621 * t976;
t405 = -pkin(3) * t564 - pkin(4) * t712 - pkin(9) * t623 - t447;
t342 = -pkin(2) * t564 + qJ(3) * t517 + t401 * t844 + t405 * t847;
t343 = -qJ(3) * t516 + t401 * t847 - t405 * t844;
t450 = -t516 * t855 + t517 * t859;
t873 = pkin(7) * t450 + t342 * t859 + t343 * t855;
t489 = -pkin(4) * t658 + t514;
t534 = -pkin(9) * t658 + t965;
t590 = t659 * t854 + t689 * t858;
t415 = -pkin(8) * t590 - t489 * t854 + t534 * t858;
t464 = -pkin(3) * t590 - pkin(4) * t689 - pkin(9) * t659 + t964;
t361 = -pkin(2) * t590 + qJ(3) * t538 + t415 * t844 + t464 * t847;
t369 = -qJ(3) * t535 + t415 * t847 - t464 * t844;
t458 = -t535 * t855 + t538 * t859;
t872 = pkin(7) * t458 + t361 * t859 + t369 * t855;
t491 = -pkin(4) * t665 + t515;
t541 = -pkin(9) * t665 + t964;
t599 = t666 * t854 + t692 * t858;
t421 = -pkin(8) * t599 - t491 * t854 + t541 * t858;
t469 = -pkin(3) * t599 - pkin(4) * t692 - pkin(9) * t666 - t965;
t364 = -pkin(2) * t599 + qJ(3) * t543 + t421 * t844 + t469 * t847;
t374 = -qJ(3) * t542 + t421 * t847 - t469 * t844;
t459 = -t542 * t855 + t543 * t859;
t871 = pkin(7) * t459 + t364 * t859 + t374 * t855;
t388 = qJ(3) * t493 - (-pkin(3) * t847 - pkin(8) * t844 - pkin(2)) * t529;
t406 = -qJ(3) * t492 - (pkin(3) * t844 - pkin(8) * t847) * t529;
t422 = -t492 * t855 + t493 * t859;
t870 = pkin(7) * t422 + t388 * t859 + t406 * t855;
t765 = t823 * t854 + t795;
t582 = -pkin(3) * t765 + t616;
t614 = -pkin(8) * t765 + t963;
t494 = -pkin(2) * t765 + qJ(3) * t705 + t582 * t847 + t614 * t844;
t498 = -qJ(3) * t703 - t582 * t844 + t614 * t847;
t642 = -t703 * t855 + t705 * t859;
t869 = pkin(7) * t642 + t494 * t859 + t498 * t855;
t767 = t821 * t858 - t951;
t583 = -pkin(3) * t767 + t617;
t615 = -pkin(8) * t767 + t962;
t495 = -pkin(2) * t767 + qJ(3) * t706 + t583 * t847 + t615 * t844;
t499 = -qJ(3) * t704 - t583 * t844 + t615 * t847;
t643 = -t704 * t855 + t706 * t859;
t868 = pkin(7) * t643 + t495 * t859 + t499 * t855;
t512 = qJ(3) * t755 + t529 * t844;
t513 = -qJ(3) * t754 + t529 * t847;
t682 = -t754 * t855 + t755 * t859;
t867 = pkin(7) * t682 + t512 * t859 + t513 * t855;
t866 = -pkin(7) * t881 - t992;
t865 = pkin(7) * t752 + t993;
t544 = pkin(2) * t915 + qJ(3) * t925;
t862 = pkin(7) * t994 + qJ(3) * t967 + t544 * t859;
t831 = t849 * qJDD(2);
t819 = t845 * t935;
t784 = t807 * t849;
t782 = t807 * t846;
t781 = t880 * t846;
t766 = t820 * t858 + t952;
t764 = t822 * t854 + t950;
t763 = t917 * t854;
t762 = t916 * t858;
t749 = t800 * t858 + t803 * t854;
t742 = -t784 * t845 - t848 * t880;
t740 = t784 * t848 - t845 * t880;
t738 = t752 * t849;
t735 = t752 * t846;
t694 = -t773 * t855 + t774 * t859;
t687 = t883 * t849;
t681 = -t955 + (t781 * t846 + t783 * t849) * pkin(7);
t680 = -t956 + (-t782 * t846 - t784 * t849) * pkin(7);
t678 = t699 * t854 + t793 * t858;
t672 = t884 * t849;
t671 = t884 * t846;
t670 = t738 * t845 - t848 * t881;
t668 = -t738 * t848 - t845 * t881;
t663 = -t729 * t855 + t731 * t859;
t662 = -t728 * t855 + t730 * t859;
t661 = -t725 * t855 + t727 * t859;
t660 = -t724 * t855 + t726 * t859;
t650 = t654 * t849;
t645 = t686 * t854 - t929;
t644 = t684 * t854 + t929;
t636 = -pkin(1) * t782 + t720 * t846 + t849 * t918;
t635 = pkin(1) * t781 + t721 * t846 + t849 * t919;
t634 = -t696 * t855 + t697 * t859;
t633 = -pkin(2) * t804 - t649;
t632 = pkin(2) * t805 - t648;
t629 = -t763 * t846 + t849 * t885;
t628 = t762 * t846 + t849 * t886;
t627 = -t766 * t846 + t849 * t887;
t626 = -t764 * t846 + t849 * t888;
t625 = -t653 * t849 + t779 * t846;
t624 = -t653 * t846 - t779 * t849;
t613 = -t767 * t846 + t849 * t889;
t612 = -t765 * t846 + t849 * t890;
t611 = t767 * t849 + t846 * t889;
t610 = t765 * t849 + t846 * t890;
t607 = t676 * t854 + t688 * t858;
t606 = t675 * t854 + t693 * t858;
t593 = -t672 * t845 + t682 * t848;
t592 = t672 * t848 + t682 * t845;
t589 = -t749 * t846 + t849 * t891;
t585 = t622 * t854 + t759 * t858;
t563 = (t734 * t846 + t849 * t982) * pkin(7) + t992;
t562 = (t735 * t846 + t738 * t849) * pkin(7) + t993;
t559 = pkin(2) * t703 + pkin(3) * t803 + pkin(8) * t769 - t962;
t558 = pkin(2) * t704 - pkin(3) * t800 + pkin(8) * t771 + t963;
t548 = t561 * t854 + t788 * t858;
t547 = -pkin(1) * t624 + t849 * t974;
t546 = -t625 * t845 + t654 * t848;
t545 = t625 * t848 + t654 * t845;
t540 = -t613 * t845 + t643 * t848;
t539 = -t612 * t845 + t642 * t848;
t537 = t613 * t848 + t643 * t845;
t536 = t612 * t848 + t642 * t845;
t532 = (-t624 * t846 - t625 * t849) * pkin(7);
t531 = -t618 * t855 + t619 * t859;
t523 = pkin(1) * t734 - t633 * t846 + t849 * t865;
t522 = pkin(1) * t735 - t632 * t846 + t849 * t866;
t507 = pkin(2) * t754 + pkin(3) * t809 + pkin(8) * t806 + t530;
t506 = -t678 * t846 + t849 * t892;
t497 = -t567 * t855 + t569 * t859;
t496 = -t566 * t855 + t568 * t859;
t483 = t994 * t849;
t476 = t505 * t854 - t931;
t475 = t504 * t854 + t931;
t473 = -t551 * t855 + t553 * t859;
t472 = -t550 * t855 + t552 * t859;
t471 = -t485 * t849 + t846 * t915;
t470 = t849 * (qJDD(3) - t829) + (-t485 - t953) * t846;
t466 = t527 * t854 + t577 * t858;
t465 = t526 * t854 + t581 * t858;
t463 = -t645 * t846 + t849 * t893;
t462 = -t644 * t846 + t849 * t894;
t454 = -t607 * t846 + t849 * t897;
t453 = -t606 * t846 + t849 * t898;
t451 = -t520 * t855 + t521 * t859;
t449 = -t599 * t846 + t849 * t899;
t448 = t599 * t849 + t846 * t899;
t445 = -t590 * t846 + t849 * t900;
t444 = t590 * t849 + t846 * t900;
t434 = t443 * t854 + t677 * t858;
t432 = -t585 * t846 + t849 * t901;
t431 = pkin(2) * t492 - pkin(3) * t639 + pkin(8) * t530;
t420 = -t512 * t855 + t513 * t859 + (-t671 * t846 - t672 * t849) * pkin(7);
t417 = -t564 * t846 + t849 * t902;
t416 = t564 * t849 + t846 * t902;
t411 = -t479 * t855 + t480 * t859;
t410 = -t471 * t845 + t848 * t994;
t409 = t471 * t848 + t845 * t994;
t403 = -t495 * t855 + t499 * t859 + (-t611 * t846 - t613 * t849) * pkin(7);
t402 = -t494 * t855 + t498 * t859 + (-t610 * t846 - t612 * t849) * pkin(7);
t400 = t529 * t846 + t849 * t903;
t399 = -t529 * t849 + t846 * t903;
t398 = -t548 * t846 + t849 * t904;
t397 = pkin(2) * t542 - pkin(3) * t665 + pkin(8) * t600 + t491 * t858 + t541 * t854;
t396 = -t449 * t845 + t459 * t848;
t395 = t449 * t848 + t459 * t845;
t394 = -pkin(1) * t671 - t507 * t846 + t849 * t867;
t393 = pkin(2) * t535 - pkin(3) * t658 + pkin(8) * t591 + t489 * t858 + t534 * t854;
t392 = -t445 * t845 + t458 * t848;
t391 = t445 * t848 + t458 * t845;
t390 = -pkin(1) * t611 - t558 * t846 + t849 * t868;
t389 = -pkin(1) * t610 - t559 * t846 + t849 * t869;
t385 = qJ(3) * t966 - t544 * t855 + (-t470 * t846 - t471 * t849) * pkin(7);
t380 = -t417 * t845 + t450 * t848;
t379 = t417 * t848 + t450 * t845;
t373 = -t437 * t855 + t439 * t859;
t372 = -t436 * t855 + t438 * t859;
t371 = pkin(2) * t516 + pkin(8) * t565 + t433 * t854 + (-pkin(3) - t975) * t621;
t370 = -pkin(1) * t470 + t846 * t977 + t849 * t862;
t368 = -t428 * t855 + t430 * t859;
t367 = -t427 * t855 + t429 * t859;
t359 = -t400 * t845 + t422 * t848;
t358 = t400 * t848 + t422 * t845;
t355 = -t466 * t846 + t849 * t905;
t354 = -t465 * t846 + t849 * t906;
t352 = -t476 * t846 + t849 * t907;
t351 = -t475 * t846 + t849 * t908;
t350 = -t460 * t846 + t849 * t909;
t349 = t460 * t849 + t846 * t909;
t345 = -t456 * t846 + t849 * t910;
t344 = t456 * t849 + t846 * t910;
t341 = -t381 * t855 + t382 * t859;
t332 = -t350 * t845 + t366 * t848;
t331 = t350 * t848 + t366 * t845;
t330 = -t434 * t846 + t849 * t911;
t329 = -t418 * t846 + t849 * t912;
t328 = t418 * t849 + t846 * t912;
t327 = -t423 * t846 + t849 * t913;
t326 = t423 * t849 + t846 * t913;
t325 = -t345 * t845 + t360 * t848;
t324 = t345 * t848 + t360 * t845;
t323 = pkin(2) * t425 - pkin(3) * t518 + pkin(8) * t461 + t386 * t854 + t387 * t858;
t322 = pkin(2) * t377 + pkin(8) * t419 + (-pkin(3) + t920) * t446;
t321 = -t388 * t855 + t406 * t859 + (-t399 * t846 - t400 * t849) * pkin(7);
t320 = -t364 * t855 + t374 * t859 + (-t448 * t846 - t449 * t849) * pkin(7);
t319 = pkin(2) * t407 - pkin(3) * t500 + pkin(8) * t457 + t383 * t854 + t384 * t858;
t318 = -t361 * t855 + t369 * t859 + (-t444 * t846 - t445 * t849) * pkin(7);
t316 = -pkin(1) * t399 - t431 * t846 + t849 * t870;
t313 = -pkin(1) * t448 - t397 * t846 + t849 * t871;
t312 = -pkin(1) * t444 - t393 * t846 + t849 * t872;
t306 = -t342 * t855 + t343 * t859 + (-t416 * t846 - t417 * t849) * pkin(7);
t304 = -t329 * t845 + t340 * t848;
t303 = t329 * t848 + t340 * t845;
t302 = -t327 * t845 + t339 * t848;
t301 = t327 * t848 + t339 * t845;
t296 = -pkin(1) * t416 - t371 * t846 + t849 * t873;
t295 = pkin(2) * t375 - pkin(3) * t440 + pkin(8) * t424 + t317 * t854 + t404 * t858;
t289 = -t308 * t855 + t310 * t859 + (-t349 * t846 - t350 * t849) * pkin(7);
t288 = -t333 * t846 + t849 * t914;
t287 = t333 * t849 + t846 * t914;
t286 = -t300 * t855 + t307 * t859 + (-t344 * t846 - t345 * t849) * pkin(7);
t285 = -t309 * t855 + t314 * t859 + (-t328 * t846 - t329 * t849) * pkin(7);
t284 = -pkin(1) * t349 - t323 * t846 + t849 * t875;
t283 = -pkin(1) * t344 - t319 * t846 + t849 * t876;
t282 = -pkin(1) * t328 - t322 * t846 + t849 * t874;
t281 = pkin(2) * t297 - pkin(3) * t335 + pkin(8) * t334 + t299 * t854 + t315 * t858;
t280 = -t288 * t845 + t292 * t848;
t279 = t288 * t848 + t292 * t845;
t277 = -t291 * t855 + t293 * t859 + (-t326 * t846 - t327 * t849) * pkin(7);
t275 = -pkin(1) * t326 - t295 * t846 + t849 * t877;
t274 = -t276 * t855 + t278 * t859 + (-t287 * t846 - t288 * t849) * pkin(7);
t273 = -pkin(1) * t287 - t281 * t846 + t849 * t878;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t758, 0, 0, 0, 0, 0, 0, t742, t741, 0, t546, 0, 0, 0, 0, 0, 0, t670, t669, 0, t410, 0, 0, 0, 0, 0, 0, t539, t540, t593, t359, 0, 0, 0, 0, 0, 0, t392, t396, t380, t304, 0, 0, 0, 0, 0, 0, t325, t332, t302, t280; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, 0, 0, 0, 0, 0, 0, t740, -t882, 0, t545, 0, 0, 0, 0, 0, 0, t668, t667, 0, t409, 0, 0, 0, 0, 0, 0, t536, t537, t592, t358, 0, 0, 0, 0, 0, 0, t391, t395, t379, t303, 0, 0, 0, 0, 0, 0, t324, t331, t301, t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t841, 0, 0, 0, 0, 0, 0, t782, -t781, 0, t624, 0, 0, 0, 0, 0, 0, -t735, -t734, 0, t470, 0, 0, 0, 0, 0, 0, t610, t611, t671, t399, 0, 0, 0, 0, 0, 0, t444, t448, t416, t328, 0, 0, 0, 0, 0, 0, t344, t349, t326, t287; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t943, -t942, -t757, -qJ(1) * t757, 0, 0, -t741, 0, t742, t819, -qJ(1) * t740 - t636 * t845 + t680 * t848, qJ(1) * t882 - t635 * t845 + t681 * t848, -t650 * t845 + t653 * t848, -qJ(1) * t545 + t532 * t848 - t547 * t845, 0, 0, -t669, 0, t670, t819, -qJ(1) * t668 - t522 * t845 + t562 * t848, -qJ(1) * t667 - t523 * t845 + t563 * t848, -t483 * t845 + t485 * t848, -qJ(1) * t409 - t370 * t845 + t385 * t848, -t629 * t845 + t663 * t848, -t589 * t845 + t634 * t848, -t627 * t845 + t661 * t848, -t628 * t845 + t662 * t848, -t626 * t845 + t660 * t848, -t687 * t845 + t694 * t848, -qJ(1) * t536 - t389 * t845 + t402 * t848, -qJ(1) * t537 - t390 * t845 + t403 * t848, -qJ(1) * t592 - t394 * t845 + t420 * t848, -qJ(1) * t358 - t316 * t845 + t321 * t848, -t463 * t845 + t497 * t848, -t432 * t845 + t451 * t848, -t453 * t845 + t472 * t848, -t462 * t845 + t496 * t848, -t454 * t845 + t473 * t848, -t506 * t845 + t531 * t848, -qJ(1) * t391 - t312 * t845 + t318 * t848, -qJ(1) * t395 - t313 * t845 + t320 * t848, -qJ(1) * t379 - t296 * t845 + t306 * t848, -qJ(1) * t303 - t282 * t845 + t285 * t848, -t352 * t845 + t368 * t848, -t330 * t845 + t341 * t848, -t354 * t845 + t372 * t848, -t351 * t845 + t367 * t848, -t355 * t845 + t373 * t848, -t398 * t845 + t411 * t848, -qJ(1) * t324 - t283 * t845 + t286 * t848, -qJ(1) * t331 - t284 * t845 + t289 * t848, -qJ(1) * t301 - t275 * t845 + t277 * t848, -qJ(1) * t279 - t273 * t845 + t274 * t848; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t942, -t943, t758, qJ(1) * t758, 0, 0, t882, 0, t740, -t927, qJ(1) * t742 + t636 * t848 + t680 * t845, qJ(1) * t741 + t635 * t848 + t681 * t845, t650 * t848 + t653 * t845, qJ(1) * t546 + t532 * t845 + t547 * t848, 0, 0, -t667, 0, t668, -t927, qJ(1) * t670 + t522 * t848 + t562 * t845, qJ(1) * t669 + t523 * t848 + t563 * t845, t483 * t848 + t485 * t845, qJ(1) * t410 + t370 * t848 + t385 * t845, t629 * t848 + t663 * t845, t589 * t848 + t634 * t845, t627 * t848 + t661 * t845, t628 * t848 + t662 * t845, t626 * t848 + t660 * t845, t687 * t848 + t694 * t845, qJ(1) * t539 + t389 * t848 + t402 * t845, qJ(1) * t540 + t390 * t848 + t403 * t845, qJ(1) * t593 + t394 * t848 + t420 * t845, qJ(1) * t359 + t316 * t848 + t321 * t845, t463 * t848 + t497 * t845, t432 * t848 + t451 * t845, t453 * t848 + t472 * t845, t462 * t848 + t496 * t845, t454 * t848 + t473 * t845, t506 * t848 + t531 * t845, qJ(1) * t392 + t312 * t848 + t318 * t845, qJ(1) * t396 + t313 * t848 + t320 * t845, qJ(1) * t380 + t296 * t848 + t306 * t845, qJ(1) * t304 + t282 * t848 + t285 * t845, t352 * t848 + t368 * t845, t330 * t848 + t341 * t845, t354 * t848 + t372 * t845, t351 * t848 + t367 * t845, t355 * t848 + t373 * t845, t398 * t848 + t411 * t845, qJ(1) * t325 + t283 * t848 + t286 * t845, qJ(1) * t332 + t284 * t848 + t289 * t845, qJ(1) * t302 + t275 * t848 + t277 * t845, qJ(1) * t280 + t273 * t848 + t274 * t845; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t811, t812, 0, 0, 0, 0, t781, 0, t782, t831, pkin(1) * t784 - t720 * t849 + t846 * t918, -pkin(1) * t783 - t721 * t849 + t846 * t919, t654 * t846, pkin(1) * t625 + t846 * t974, 0, 0, t734, 0, -t735, t831, -pkin(1) * t738 + t632 * t849 + t846 * t866, -pkin(1) * t982 + t633 * t849 + t846 * t865, t994 * t846, pkin(1) * t471 + t846 * t862 - t849 * t977, t763 * t849 + t846 * t885, t749 * t849 + t846 * t891, t766 * t849 + t846 * t887, -t762 * t849 + t846 * t886, t764 * t849 + t846 * t888, t883 * t846, pkin(1) * t612 + t559 * t849 + t846 * t869, pkin(1) * t613 + t558 * t849 + t846 * t868, pkin(1) * t672 + t507 * t849 + t846 * t867, pkin(1) * t400 + t431 * t849 + t846 * t870, t645 * t849 + t846 * t893, t585 * t849 + t846 * t901, t606 * t849 + t846 * t898, t644 * t849 + t846 * t894, t607 * t849 + t846 * t897, t678 * t849 + t846 * t892, pkin(1) * t445 + t393 * t849 + t846 * t872, pkin(1) * t449 + t397 * t849 + t846 * t871, pkin(1) * t417 + t371 * t849 + t846 * t873, pkin(1) * t329 + t322 * t849 + t846 * t874, t476 * t849 + t846 * t907, t434 * t849 + t846 * t911, t465 * t849 + t846 * t906, t475 * t849 + t846 * t908, t466 * t849 + t846 * t905, t548 * t849 + t846 * t904, pkin(1) * t345 + t319 * t849 + t846 * t876, pkin(1) * t350 + t323 * t849 + t846 * t875, pkin(1) * t327 + t295 * t849 + t846 * t877, pkin(1) * t288 + t281 * t849 + t846 * t878;];
tauB_reg  = t1;
