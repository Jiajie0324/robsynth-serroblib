% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:30:03
% EndTime: 2019-03-08 20:30:18
% DurationCPUTime: 8.93s
% Computational Cost: add. (8967->593), mult. (20703->814), div. (0->0), fcn. (16736->16), ass. (0->276)
t229 = sin(pkin(6));
t227 = sin(pkin(12));
t230 = cos(pkin(12));
t236 = sin(qJ(2));
t240 = cos(qJ(2));
t277 = t227 * t240 + t230 * t236;
t141 = t277 * t229;
t131 = qJD(1) * t141;
t235 = sin(qJ(4));
t239 = cos(qJ(4));
t285 = pkin(4) * t235 - pkin(9) * t239;
t174 = t285 * qJD(4);
t407 = t174 - t131;
t340 = qJD(1) * t229;
t312 = t236 * t340;
t182 = t227 * t312;
t311 = t240 * t340;
t134 = t230 * t311 - t182;
t286 = pkin(4) * t239 + pkin(9) * t235;
t275 = -pkin(3) - t286;
t389 = pkin(2) * t230;
t158 = t275 - t389;
t211 = pkin(2) * t227 + pkin(8);
t234 = sin(qJ(5));
t238 = cos(qJ(5));
t325 = t238 * qJD(4);
t328 = qJD(5) * t238;
t330 = qJD(5) * t234;
t350 = t238 * t239;
t384 = t158 * t328 + (-t235 * t325 - t239 * t330) * t211 - t134 * t350 + t407 * t234;
t333 = qJD(4) * t235;
t352 = t234 * t239;
t366 = t211 * t234;
t406 = t134 * t352 + t407 * t238 + t333 * t366;
t170 = t211 * t350;
t274 = pkin(5) * t235 - pkin(10) * t350;
t405 = t274 * qJD(4) + (-t170 + (pkin(10) * t235 - t158) * t234) * qJD(5) + t406;
t332 = qJD(4) * t239;
t305 = t234 * t332;
t306 = t235 * t328;
t260 = t305 + t306;
t404 = -pkin(10) * t260 + t384;
t241 = -pkin(10) - pkin(9);
t313 = qJD(5) * t241;
t336 = qJD(2) * t239;
t171 = t285 * qJD(2);
t177 = qJD(2) * pkin(2) + t311;
t124 = t227 * t177 + t230 * t312;
t121 = qJD(2) * pkin(8) + t124;
t113 = t235 * t121;
t232 = cos(pkin(6));
t206 = qJD(1) * t232 + qJD(3);
t86 = t206 * t239 - t113;
t55 = t234 * t171 + t238 * t86;
t403 = -t55 + (pkin(10) * t336 + t313) * t234;
t54 = t238 * t171 - t234 * t86;
t402 = -qJD(2) * t274 + t238 * t313 - t54;
t337 = qJD(2) * t235;
t163 = t234 * t337 - t325;
t334 = qJD(4) * t234;
t165 = t238 * t337 + t334;
t233 = sin(qJ(6));
t237 = cos(qJ(6));
t109 = t237 * t163 + t165 * t233;
t279 = t163 * t233 - t237 * t165;
t372 = t109 * t279;
t338 = qJD(2) * t229;
t303 = qJD(1) * t338;
t322 = qJDD(1) * t229;
t401 = t236 * t322 + t240 * t303;
t208 = -qJD(5) + t336;
t200 = t232 * qJDD(1) + qJDD(3);
t199 = t240 * t322;
t374 = qJDD(2) * pkin(2);
t135 = -t236 * t303 + t199 + t374;
t81 = t227 * t135 + t230 * t401;
t79 = qJDD(2) * pkin(8) + t81;
t319 = -t235 * t200 - t206 * t332 - t239 * t79;
t33 = -t121 * t333 - t319;
t30 = qJDD(4) * pkin(9) + t33;
t315 = -t230 * t135 + t227 * t401;
t51 = qJD(2) * t174 + qJDD(2) * t275 + t315;
t367 = t206 * t235;
t87 = t121 * t239 + t367;
t84 = qJD(4) * pkin(9) + t87;
t123 = t177 * t230 - t182;
t93 = qJD(2) * t275 - t123;
t271 = -t234 * t51 - t238 * t30 - t93 * t328 + t330 * t84;
t41 = -t234 * t84 + t238 * t93;
t400 = t41 * t208 - t271;
t324 = qJD(2) * qJD(4);
t302 = t239 * t324;
t321 = t235 * qJDD(2);
t399 = qJD(4) * qJD(5) + t302 + t321;
t398 = -t109 ^ 2 + t279 ^ 2;
t198 = -qJD(6) + t208;
t329 = qJD(5) * t235;
t301 = qJD(2) * t329;
t105 = (-qJDD(4) + t301) * t234 - t399 * t238;
t292 = t234 * t399 + t238 * t301;
t263 = t238 * qJDD(4) - t292;
t326 = qJD(6) * t237;
t327 = qJD(6) * t233;
t26 = t237 * t105 + t163 * t326 + t165 * t327 - t233 * t263;
t397 = -t109 * t198 - t26;
t35 = -pkin(10) * t165 + t41;
t25 = -pkin(5) * t208 + t35;
t42 = t234 * t93 + t238 * t84;
t36 = -pkin(10) * t163 + t42;
t219 = t239 * qJDD(2);
t160 = t235 * t324 + qJDD(5) - t219;
t9 = -qJD(5) * t42 - t234 * t30 + t238 * t51;
t6 = pkin(5) * t160 + pkin(10) * t105 + t9;
t7 = pkin(10) * t263 - t271;
t1 = (qJD(6) * t25 + t7) * t237 + t233 * t6 - t36 * t327;
t119 = t141 * t239 + t232 * t235;
t349 = t240 * t230;
t360 = t229 * t236;
t140 = t227 * t360 - t229 * t349;
t226 = qJ(5) + qJ(6);
t221 = sin(t226);
t222 = cos(t226);
t83 = -qJD(4) * pkin(4) - t86;
t58 = pkin(5) * t163 + t83;
t231 = cos(pkin(11));
t361 = t229 * t235;
t161 = t227 * t236 - t349;
t228 = sin(pkin(11));
t355 = t232 * t240;
t356 = t232 * t236;
t344 = -t227 * t355 - t230 * t356;
t94 = t228 * t161 + t231 * t344;
t74 = -t231 * t361 - t239 * t94;
t99 = -t231 * t161 + t228 * t344;
t76 = t228 * t361 + t239 * t99;
t264 = t161 * t232;
t95 = -t228 * t277 - t231 * t264;
t98 = t228 * t264 - t231 * t277;
t396 = t109 * t58 - g(1) * (t221 * t98 - t222 * t76) - g(2) * (t221 * t95 - t222 * t74) - g(3) * (-t119 * t222 - t140 * t221) - t1;
t379 = t237 * t36;
t13 = t233 * t25 + t379;
t2 = -qJD(6) * t13 - t233 * t7 + t237 * t6;
t395 = t279 * t58 - g(1) * (-t221 * t76 - t222 * t98) - g(2) * (-t221 * t74 - t222 * t95) - g(3) * (-t119 * t221 + t140 * t222) + t2;
t252 = qJD(6) * t279 + t105 * t233 + t237 * t263;
t394 = t198 * t279 + t252;
t393 = t42 * t208 - t9;
t115 = t234 * t158 + t170;
t67 = -t119 * t234 + t140 * t238;
t392 = -g(1) * (-t234 * t76 - t238 * t98) - g(2) * (-t234 * t74 - t238 * t95) - g(3) * t67;
t309 = t239 * t325;
t261 = -t234 * t329 + t309;
t320 = qJD(5) + qJD(6);
t351 = t235 * t238;
t391 = t160 * t351 - t208 * t261;
t388 = pkin(5) * t234;
t353 = t234 * t235;
t104 = -pkin(10) * t353 + t115;
t146 = t238 * t158;
t92 = -pkin(10) * t351 + t146 + (-pkin(5) - t366) * t239;
t44 = -t104 * t233 + t237 * t92;
t387 = qJD(6) * t44 + t233 * t405 + t404 * t237;
t45 = t104 * t237 + t233 * t92;
t386 = -qJD(6) * t45 - t404 * t233 + t237 * t405;
t354 = t233 * t234;
t166 = -t237 * t238 + t354;
t144 = t166 * t235;
t167 = t233 * t238 + t234 * t237;
t117 = t320 * t167;
t59 = t117 * t235 + t233 * t305 - t237 * t309;
t385 = t59 * t109 - t144 * t252;
t383 = -qJD(5) * t115 + t406;
t193 = t241 * t234;
t194 = t241 * t238;
t125 = t193 * t237 + t194 * t233;
t382 = qJD(6) * t125 + t233 * t402 + t237 * t403;
t126 = t193 * t233 - t194 * t237;
t381 = -qJD(6) * t126 - t233 * t403 + t237 * t402;
t380 = t233 * t36;
t143 = t167 * t235;
t157 = qJDD(6) + t160;
t60 = -t327 * t353 + (t320 * t351 + t305) * t237 + t261 * t233;
t376 = -t143 * t157 + t60 * t198;
t257 = t263 * t238;
t375 = -t163 * t309 + t235 * t257;
t373 = qJDD(4) * pkin(4);
t371 = t134 * t235;
t370 = t163 * t208;
t369 = t165 * t163;
t368 = t165 * t208;
t365 = t221 * t239;
t364 = t222 * t239;
t362 = t228 * t236;
t359 = t229 * t239;
t358 = t229 * t240;
t348 = qJDD(1) - g(3);
t347 = -t166 * t336 - t237 * t328 - t238 * t326 + t320 * t354;
t346 = -t167 * t336 + t117;
t343 = pkin(2) * t358 - t140 * pkin(3);
t224 = t235 ^ 2;
t225 = t239 ^ 2;
t342 = t224 - t225;
t339 = qJD(2) * t134;
t335 = qJD(4) * t163;
t331 = qJD(5) * t163;
t317 = t231 * t355;
t243 = qJD(2) ^ 2;
t316 = t235 * t243 * t239;
t314 = pkin(8) + t388;
t310 = t208 * t334;
t308 = t165 * t332;
t298 = t239 * t26 - t279 * t333;
t296 = t105 * t239 + t165 * t333;
t295 = pkin(5) * t260 + t211 * t332 - t371;
t294 = -t105 + t331;
t293 = t121 * t332 - t239 * t200 + t206 * t333 + t235 * t79;
t291 = t165 * t306;
t289 = t235 * t302;
t288 = pkin(5) * t330 - t367 - (qJD(2) * t388 + t121) * t239;
t287 = pkin(8) * t141 + t343;
t284 = t143 * t26 + t279 * t60;
t68 = t119 * t238 + t140 * t234;
t22 = -t233 * t68 + t237 * t67;
t23 = t233 * t67 + t237 * t68;
t283 = -t234 * t42 - t238 * t41;
t282 = t234 * t41 - t238 * t42;
t281 = t235 * t86 - t239 * t87;
t280 = t144 * t157 - t198 * t59;
t118 = t141 * t235 - t232 * t239;
t216 = pkin(5) * t238 + pkin(4);
t278 = t216 * t239 - t235 * t241;
t185 = pkin(2) * t317;
t276 = -pkin(2) * t362 + t95 * pkin(3) + t185;
t273 = -t109 * t333 - t239 * t252;
t272 = -t228 * t355 - t231 * t236;
t270 = -t234 * t160 + t208 * t328;
t31 = t293 - t373;
t73 = -t231 * t359 + t235 * t94;
t75 = t228 * t359 - t235 * t99;
t269 = g(1) * t75 + g(2) * t73 - g(3) * t118;
t268 = g(1) * t76 + g(2) * t74 + g(3) * t119;
t267 = g(1) * t98 + g(2) * t95 - g(3) * t140;
t266 = -g(1) * t99 + g(2) * t94 - g(3) * t141;
t265 = -g(3) * t232 + (-g(1) * t228 + g(2) * t231) * t229;
t262 = -pkin(8) * t94 + t276;
t259 = -t269 - t31;
t258 = -pkin(9) * t160 - t208 * t83;
t256 = pkin(2) * t272 + t98 * pkin(3);
t255 = -qJD(2) * t131 + t267;
t120 = -qJD(2) * pkin(3) - t123;
t212 = -pkin(3) - t389;
t254 = -t211 * qJDD(4) + (qJD(2) * t212 + t120 + t134) * qJD(4);
t253 = -pkin(9) * qJD(5) * t208 - t259;
t251 = pkin(8) * t99 + t256;
t250 = -g(1) * t272 - g(3) * t358;
t249 = qJD(5) * t283 - t9 * t234 - t238 * t271;
t248 = t293 * t235 + t33 * t239 + (-t235 * t87 - t239 * t86) * qJD(4);
t242 = qJD(4) ^ 2;
t78 = -qJDD(2) * pkin(3) + t315;
t245 = qJDD(2) * t212 + t211 * t242 + t255 + t78;
t184 = qJDD(4) * t239 - t235 * t242;
t183 = qJDD(4) * t235 + t239 * t242;
t149 = (t211 + t388) * t235;
t133 = t161 * t338;
t132 = qJD(2) * t141;
t114 = -t211 * t352 + t146;
t66 = -qJD(4) * t118 - t133 * t239;
t65 = qJD(4) * t119 - t133 * t235;
t20 = qJD(5) * t67 + t132 * t234 + t238 * t66;
t19 = -qJD(5) * t68 + t132 * t238 - t234 * t66;
t18 = -pkin(5) * t263 + t31;
t15 = t237 * t35 - t380;
t14 = -t233 * t35 - t379;
t12 = t237 * t25 - t380;
t4 = -qJD(6) * t23 + t19 * t237 - t20 * t233;
t3 = qJD(6) * t22 + t19 * t233 + t20 * t237;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t348, 0, 0, 0, 0, 0, 0 (qJDD(2) * t240 - t236 * t243) * t229 (-qJDD(2) * t236 - t240 * t243) * t229, 0, -g(3) + (t232 ^ 2 + (t236 ^ 2 + t240 ^ 2) * t229 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(2) * t132 - qJDD(2) * t140, qJD(2) * t133 - qJDD(2) * t141, 0, -t123 * t132 - t124 * t133 + t140 * t315 + t141 * t81 + t200 * t232 - g(3), 0, 0, 0, 0, 0, 0, -t140 * t219 - qJD(4) * t65 - qJDD(4) * t118 + (-t132 * t239 + t140 * t333) * qJD(2), t140 * t321 - qJD(4) * t66 - qJDD(4) * t119 + (t132 * t235 + t140 * t332) * qJD(2) (t118 * t235 + t119 * t239) * qJDD(2) + (t235 * t65 + t239 * t66 + (t118 * t239 - t119 * t235) * qJD(4)) * qJD(2), t118 * t293 + t119 * t33 + t120 * t132 + t140 * t78 - t65 * t86 + t66 * t87 - g(3), 0, 0, 0, 0, 0, 0, -t118 * t263 + t67 * t160 + t65 * t163 - t19 * t208, -t105 * t118 - t160 * t68 + t165 * t65 + t20 * t208, t67 * t105 - t20 * t163 - t19 * t165 + t263 * t68, t118 * t31 + t19 * t41 + t20 * t42 - t271 * t68 + t65 * t83 + t67 * t9 - g(3), 0, 0, 0, 0, 0, 0, t109 * t65 - t118 * t252 + t157 * t22 - t198 * t4, -t118 * t26 - t157 * t23 + t198 * t3 - t279 * t65, -t109 * t3 + t22 * t26 + t23 * t252 + t279 * t4, t1 * t23 + t118 * t18 + t12 * t4 + t13 * t3 + t2 * t22 + t58 * t65 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t199 - g(2) * (t317 - t362) + t250, -g(1) * (t228 * t356 - t231 * t240) - g(2) * (-t228 * t240 - t231 * t356) - t348 * t360, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t230 * t374 - t255 - t315, -t227 * t374 - t266 + t339 - t81, 0, -g(2) * t185 + t123 * t131 - t124 * t134 + (g(2) * t362 + t81 * t227 - t230 * t315 + t250) * pkin(2), qJDD(2) * t224 + 0.2e1 * t289, 0.2e1 * t219 * t235 - 0.2e1 * t324 * t342, t183, qJDD(2) * t225 - 0.2e1 * t289, t184, 0, t235 * t254 - t239 * t245, t235 * t245 + t239 * t254, t248 + t266 + (qJDD(2) * t211 - t339) * (t224 + t225) -g(1) * t251 - g(2) * t262 - g(3) * t287 - t120 * t131 + t134 * t281 + t211 * t248 + t78 * t212, -t105 * t351 + t165 * t261, -t291 + (-t308 + (t105 + t331) * t235) * t234 + t375, t296 + t391, t163 * t260 - t263 * t353 (-t263 + t310) * t239 + (t270 - t335) * t235, -t160 * t239 - t208 * t333, t114 * t160 - t383 * t208 + t266 * t234 + (-t9 + (t163 * t211 + t234 * t83) * qJD(4) - t267 * t238) * t239 + (t41 * qJD(4) - t134 * t163 - t211 * t263 + t31 * t234 + t328 * t83) * t235, -t115 * t160 + t384 * t208 + t266 * t238 + (-t271 + (t165 * t211 + t238 * t83) * qJD(4) + t267 * t234) * t239 + (-qJD(4) * t42 - t105 * t211 - t134 * t165 + t31 * t238 - t330 * t83) * t235, t115 * t263 + t114 * t105 - t383 * t165 - t384 * t163 + t283 * t332 + (qJD(5) * t282 + t234 * t271 - t9 * t238 - t267) * t235, -t271 * t115 + t9 * t114 - t83 * t371 - g(1) * (t286 * t98 + t251) - g(2) * (t286 * t95 + t262) - g(3) * (-t140 * t286 + t287) + t384 * t42 + t383 * t41 + (t235 * t31 + t332 * t83) * t211, t144 * t26 + t279 * t59, t284 + t385, -t280 + t298, t109 * t60 - t143 * t252, t273 + t376, -t157 * t239 - t198 * t333, t44 * t157 - t2 * t239 + t12 * t333 - t149 * t252 + t18 * t143 + t58 * t60 - g(1) * (t221 * t99 + t364 * t98) - g(2) * (-t221 * t94 + t364 * t95) - g(3) * (-t140 * t364 + t141 * t221) - t386 * t198 + t295 * t109, -t45 * t157 + t1 * t239 - t13 * t333 - t149 * t26 - t18 * t144 - t58 * t59 - g(1) * (t222 * t99 - t365 * t98) - g(2) * (-t222 * t94 - t365 * t95) - g(3) * (t140 * t365 + t141 * t222) + t387 * t198 - t295 * t279, -t1 * t143 - t109 * t387 + t12 * t59 - t13 * t60 + t144 * t2 - t235 * t267 + t252 * t45 + t26 * t44 + t279 * t386, t1 * t45 + t2 * t44 + t18 * t149 - g(1) * (t278 * t98 + t314 * t99 + t256) - g(2) * (t278 * t95 - t314 * t94 + t276) - g(3) * (-t140 * t278 + t141 * t314 + t343) + t295 * t58 + t387 * t13 + t386 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265 + t200, 0, 0, 0, 0, 0, 0, t184, -t183, 0, -qJD(4) * t281 + t235 * t33 - t239 * t293 + t265, 0, 0, 0, 0, 0, 0 (t263 + t310) * t239 + (t270 + t335) * t235, t296 - t391, t291 + (t235 * t294 + t308) * t234 + t375 (-qJD(4) * t282 - t31) * t239 + (qJD(4) * t83 + t249) * t235 + t265, 0, 0, 0, 0, 0, 0, -t273 + t376, t280 + t298, -t284 + t385, -t1 * t144 - t12 * t60 - t13 * t59 - t143 * t2 - t18 * t239 + t333 * t58 + t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316, t342 * t243, t321, t316, t219, qJDD(4), qJD(4) * t87 - t120 * t337 - t269 - t293, -t120 * t336 + (t86 + t113) * qJD(4) + t268 + t319, 0, 0, -t234 * t105 - t238 * t368 (-t105 + t370) * t238 + (t263 + t368) * t234 (-t165 * t235 + t208 * t350) * qJD(2) - t270, -t234 * t370 + t257, t208 * t330 + t160 * t238 + (t163 * t235 - t208 * t352) * qJD(2), t208 * t337, -pkin(4) * t292 + t54 * t208 - t41 * t337 - t87 * t163 + t258 * t234 + (-t253 + t373) * t238, pkin(4) * t105 - t165 * t87 - t208 * t55 + t234 * t253 + t238 * t258 + t337 * t42, t55 * t163 + t54 * t165 + ((qJD(5) * t165 + t263) * pkin(9) + t400) * t238 + (pkin(9) * t294 + t393) * t234 - t268, -t41 * t54 - t42 * t55 - t83 * t87 + t259 * pkin(4) + (t249 - t268) * pkin(9), -t167 * t26 + t279 * t347, t109 * t347 + t166 * t26 + t167 * t252 + t279 * t346, t157 * t167 + t198 * t347 + t279 * t337, t109 * t346 - t166 * t252, t109 * t337 - t157 * t166 + t198 * t346, t198 * t337, t109 * t288 - t12 * t337 + t125 * t157 + t166 * t18 - t198 * t381 + t216 * t252 - t222 * t269 + t346 * t58, -t126 * t157 + t13 * t337 + t167 * t18 + t198 * t382 + t216 * t26 + t221 * t269 - t279 * t288 - t347 * t58, -t1 * t166 - t109 * t382 + t12 * t347 + t125 * t26 + t126 * t252 - t13 * t346 - t167 * t2 + t279 * t381 - t268, t1 * t126 + t2 * t125 - t18 * t216 - g(1) * (t216 * t75 - t241 * t76) - g(2) * (t216 * t73 - t241 * t74) - g(3) * (-t118 * t216 - t119 * t241) + t288 * t58 + t382 * t13 + t381 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t369, -t163 ^ 2 + t165 ^ 2, -t105 - t370, -t369, t263 - t368, t160, -t83 * t165 + t392 - t393, t83 * t163 - g(1) * (t234 * t98 - t238 * t76) - g(2) * (t234 * t95 - t238 * t74) + g(3) * t68 - t400, 0, 0, -t372, t398, t397, t372, t394, t157, t14 * t198 + (-t109 * t165 + t157 * t237 + t198 * t327) * pkin(5) + t395, -t15 * t198 + (-t157 * t233 + t165 * t279 + t198 * t326) * pkin(5) + t396, -t279 * t13 + t109 * t15 - t109 * t12 - t279 * t14 + (t233 * t252 + t237 * t26 + (-t109 * t237 - t233 * t279) * qJD(6)) * pkin(5), -t12 * t14 - t13 * t15 + (t1 * t233 + t2 * t237 - t58 * t165 + (-t12 * t233 + t13 * t237) * qJD(6) + t392) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t372, t398, t397, t372, t394, t157, -t13 * t198 + t395, -t12 * t198 + t396, 0, 0;];
tau_reg  = t5;
