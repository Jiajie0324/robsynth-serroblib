% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 04:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 04:54:58
% EndTime: 2019-05-08 04:55:09
% DurationCPUTime: 11.90s
% Computational Cost: add. (55226->321), mult. (110652->404), div. (0->0), fcn. (81808->10), ass. (0->230)
t2574 = sin(qJ(3));
t2575 = sin(qJ(2));
t2579 = cos(qJ(3));
t2580 = cos(qJ(2));
t2544 = (t2574 * t2580 + t2575 * t2579) * qJD(1);
t2621 = qJD(1) * t2580;
t2603 = qJD(2) * t2621;
t2608 = t2575 * qJDD(1);
t2549 = t2603 + t2608;
t2568 = t2580 * qJDD(1);
t2622 = qJD(1) * t2575;
t2604 = qJD(2) * t2622;
t2550 = t2568 - t2604;
t2601 = t2574 * t2549 - t2579 * t2550;
t2594 = t2544 * qJD(3) + qJDD(4) + t2601;
t2592 = qJDD(5) + t2594;
t2573 = sin(qJ(4));
t2578 = cos(qJ(4));
t2611 = qJD(2) + qJD(3);
t2527 = t2573 * t2544 - t2578 * t2611;
t2528 = t2578 * t2544 + t2573 * t2611;
t2572 = sin(qJ(5));
t2577 = cos(qJ(5));
t2506 = t2527 * t2577 + t2528 * t2572;
t2508 = -t2527 * t2572 + t2528 * t2577;
t2618 = t2506 * t2508;
t2462 = t2592 + t2618;
t2505 = t2508 ^ 2;
t2542 = t2574 * t2622 - t2579 * t2621;
t2541 = qJD(4) + t2542;
t2540 = qJD(5) + t2541;
t2626 = t2540 ^ 2;
t2633 = -t2505 - t2626;
t2432 = t2462 * t2572 - t2577 * t2633;
t2434 = t2462 * t2577 + t2572 * t2633;
t2411 = t2432 * t2573 - t2434 * t2578;
t2600 = t2579 * t2549 + t2574 * t2550;
t2516 = -t2542 * qJD(3) + t2600;
t2607 = qJDD(2) + qJDD(3);
t2596 = -t2578 * t2516 - t2573 * t2607;
t2487 = -t2527 * qJD(4) - t2596;
t2595 = -t2573 * t2516 + t2578 * t2607;
t2589 = -t2528 * qJD(4) + t2595;
t2587 = -t2506 * qJD(5) + t2577 * t2487 + t2572 * t2589;
t2617 = t2506 * t2540;
t2586 = t2587 - t2617;
t2387 = t2411 * t2574 - t2579 * t2586;
t2389 = t2411 * t2579 + t2574 * t2586;
t2360 = t2387 * t2575 - t2389 * t2580;
t2401 = t2432 * t2578 + t2434 * t2573;
t2576 = sin(qJ(1));
t2581 = cos(qJ(1));
t2657 = t2360 * t2576 - t2401 * t2581;
t2656 = t2360 * t2581 + t2401 * t2576;
t2364 = t2387 * t2580 + t2389 * t2575;
t2427 = t2587 + t2617;
t2602 = t2572 * t2487 - t2577 * t2589;
t2593 = (-qJD(5) + t2540) * t2508 - t2602;
t2629 = t2427 * t2572 + t2577 * t2593;
t2631 = -t2577 * t2427 + t2572 * t2593;
t2636 = t2573 * t2629 + t2578 * t2631;
t2478 = t2506 ^ 2;
t2455 = t2505 + t2478;
t2637 = -t2573 * t2631 + t2578 * t2629;
t2642 = -t2455 * t2574 + t2579 * t2637;
t2643 = t2455 * t2579 + t2574 * t2637;
t2647 = -t2575 * t2643 + t2580 * t2642;
t2653 = t2576 * t2647 - t2581 * t2636;
t2652 = t2576 * t2636 + t2581 * t2647;
t2463 = t2592 - t2618;
t2632 = -t2626 - t2478;
t2638 = -t2463 * t2572 + t2577 * t2632;
t2639 = t2577 * t2463 + t2572 * t2632;
t2641 = -t2573 * t2639 + t2578 * t2638;
t2651 = t2574 * t2641;
t2640 = t2573 * t2638 + t2578 * t2639;
t2650 = t2576 * t2640;
t2649 = t2579 * t2641;
t2648 = t2581 * t2640;
t2646 = t2575 * t2642 + t2580 * t2643;
t2606 = t2611 ^ 2;
t2630 = t2542 * t2611 - t2516;
t2571 = t2580 ^ 2;
t2583 = qJD(1) ^ 2;
t2558 = t2576 * g(1) - t2581 * g(2);
t2598 = qJDD(1) * pkin(1) + t2558;
t2599 = qJD(2) * pkin(2) - pkin(8) * t2622;
t2518 = t2550 * pkin(2) + (pkin(8) * t2571 + pkin(7)) * t2583 - t2599 * t2622 + t2598;
t2628 = t2527 ^ 2;
t2627 = t2528 ^ 2;
t2625 = t2541 ^ 2;
t2624 = t2542 ^ 2;
t2623 = t2544 ^ 2;
t2616 = t2527 * t2528;
t2615 = t2541 * t2527;
t2614 = t2542 * t2544;
t2613 = t2571 * t2583;
t2612 = t2575 * t2583;
t2610 = qJD(4) - t2541;
t2497 = (0.2e1 * qJD(3) + qJD(2)) * t2544 + t2601;
t2451 = t2497 * pkin(3) + pkin(9) * t2630 - t2518;
t2559 = -g(1) * t2581 - g(2) * t2576;
t2590 = -pkin(1) * t2583 + qJDD(1) * pkin(7) + t2559;
t2535 = -t2575 * g(3) + t2580 * t2590;
t2514 = -pkin(2) * t2613 + t2550 * pkin(8) - qJD(2) * t2599 + t2535;
t2588 = t2575 * t2590;
t2584 = -t2588 - t2549 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2612 - g(3)) * t2580;
t2480 = t2579 * t2514 + t2574 * t2584;
t2525 = pkin(3) * t2542 - pkin(9) * t2544;
t2458 = -pkin(3) * t2606 + pkin(9) * t2607 - t2542 * t2525 + t2480;
t2418 = t2573 * t2451 + t2578 * t2458;
t2519 = pkin(4) * t2541 - pkin(10) * t2528;
t2414 = -pkin(4) * t2628 + pkin(10) * t2589 - t2541 * t2519 + t2418;
t2417 = t2578 * t2451 - t2573 * t2458;
t2481 = t2594 - t2616;
t2585 = (-t2487 - t2615) * pkin(10) + t2481 * pkin(4) + t2417;
t2379 = t2577 * t2414 + t2572 * t2585;
t2570 = t2575 ^ 2;
t2609 = t2570 + t2571;
t2378 = -t2572 * t2414 + t2577 * t2585;
t2479 = -t2574 * t2514 + t2579 * t2584;
t2597 = -qJD(5) * t2508 - t2602;
t2457 = -t2607 * pkin(3) - t2606 * pkin(9) + t2544 * t2525 - t2479;
t2419 = -t2589 * pkin(4) - t2628 * pkin(10) + t2528 * t2519 + t2457;
t2582 = qJD(2) ^ 2;
t2563 = t2580 * t2612;
t2561 = -t2582 - t2613;
t2560 = -t2570 * t2583 - t2582;
t2557 = -qJDD(2) + t2563;
t2556 = qJDD(2) + t2563;
t2555 = t2609 * t2583;
t2554 = -qJDD(1) * t2576 - t2581 * t2583;
t2553 = qJDD(1) * t2581 - t2576 * t2583;
t2552 = t2609 * qJDD(1);
t2551 = t2568 - 0.2e1 * t2604;
t2548 = 0.2e1 * t2603 + t2608;
t2545 = t2583 * pkin(7) + t2598;
t2534 = -t2580 * g(3) - t2588;
t2533 = -t2623 - t2606;
t2532 = t2557 * t2580 - t2560 * t2575;
t2531 = -t2556 * t2575 + t2561 * t2580;
t2530 = t2557 * t2575 + t2560 * t2580;
t2529 = t2556 * t2580 + t2561 * t2575;
t2524 = -t2607 - t2614;
t2523 = t2607 - t2614;
t2522 = -t2606 - t2624;
t2517 = -t2623 - t2624;
t2513 = -t2534 * t2575 + t2535 * t2580;
t2512 = t2534 * t2580 + t2535 * t2575;
t2504 = -t2625 - t2627;
t2502 = t2524 * t2579 - t2533 * t2574;
t2501 = t2524 * t2574 + t2533 * t2579;
t2500 = -qJD(2) * t2542 - t2600;
t2498 = qJD(2) * t2544 - t2601;
t2496 = -t2625 - t2628;
t2491 = t2522 * t2579 - t2523 * t2574;
t2490 = t2522 * t2574 + t2523 * t2579;
t2488 = -t2627 - t2628;
t2482 = -t2594 - t2616;
t2477 = pkin(5) * t2506 - qJ(6) * t2508;
t2476 = t2527 * t2610 + t2596;
t2475 = t2487 - t2615;
t2474 = -t2528 * t2610 + t2595;
t2473 = (qJD(4) + t2541) * t2528 - t2595;
t2470 = -t2501 * t2575 + t2502 * t2580;
t2469 = t2501 * t2580 + t2502 * t2575;
t2468 = t2498 * t2579 - t2500 * t2574;
t2467 = t2498 * t2574 + t2500 * t2579;
t2466 = -t2490 * t2575 + t2491 * t2580;
t2465 = t2490 * t2580 + t2491 * t2575;
t2461 = t2482 * t2578 - t2504 * t2573;
t2460 = t2482 * t2573 + t2504 * t2578;
t2453 = -t2481 * t2573 + t2496 * t2578;
t2452 = t2481 * t2578 + t2496 * t2573;
t2449 = -t2479 * t2574 + t2480 * t2579;
t2448 = t2479 * t2579 + t2480 * t2574;
t2445 = t2474 * t2578 - t2476 * t2573;
t2444 = t2474 * t2573 + t2476 * t2578;
t2439 = -t2467 * t2575 + t2468 * t2580;
t2438 = t2467 * t2580 + t2468 * t2575;
t2437 = t2461 * t2579 + t2475 * t2574;
t2436 = t2461 * t2574 - t2475 * t2579;
t2431 = t2453 * t2579 + t2473 * t2574;
t2430 = t2453 * t2574 - t2473 * t2579;
t2424 = t2540 * t2508 - t2597;
t2423 = (qJD(5) + t2540) * t2508 + t2602;
t2421 = t2445 * t2579 + t2488 * t2574;
t2420 = t2445 * t2574 - t2488 * t2579;
t2416 = -t2448 * t2575 + t2449 * t2580;
t2415 = t2448 * t2580 + t2449 * t2575;
t2406 = -t2436 * t2575 + t2437 * t2580;
t2405 = t2436 * t2580 + t2437 * t2575;
t2400 = -t2430 * t2575 + t2431 * t2580;
t2399 = t2430 * t2580 + t2431 * t2575;
t2394 = -t2420 * t2575 + t2421 * t2580;
t2393 = t2420 * t2580 + t2421 * t2575;
t2392 = -t2417 * t2573 + t2418 * t2578;
t2391 = t2417 * t2578 + t2418 * t2573;
t2390 = t2424 * t2574 + t2649;
t2388 = -t2424 * t2579 + t2651;
t2386 = t2392 * t2579 + t2457 * t2574;
t2385 = t2392 * t2574 - t2457 * t2579;
t2384 = t2423 * t2574 + t2649;
t2382 = -t2423 * t2579 + t2651;
t2380 = -t2597 * pkin(5) + (pkin(5) * t2540 - (2 * qJD(6))) * t2508 + t2419 - t2586 * qJ(6);
t2373 = -pkin(5) * t2592 - qJ(6) * t2626 + t2508 * t2477 + qJDD(6) - t2378;
t2372 = -pkin(5) * t2626 + qJ(6) * t2592 + 0.2e1 * qJD(6) * t2540 - t2506 * t2477 + t2379;
t2367 = -t2388 * t2575 + t2390 * t2580;
t2365 = t2388 * t2580 + t2390 * t2575;
t2363 = -t2385 * t2575 + t2386 * t2580;
t2362 = t2385 * t2580 + t2386 * t2575;
t2361 = -t2382 * t2575 + t2384 * t2580;
t2359 = t2382 * t2580 + t2384 * t2575;
t2357 = -t2378 * t2572 + t2379 * t2577;
t2356 = t2378 * t2577 + t2379 * t2572;
t2355 = t2372 * t2577 + t2373 * t2572;
t2354 = t2372 * t2572 - t2373 * t2577;
t2349 = -t2356 * t2573 + t2357 * t2578;
t2348 = t2356 * t2578 + t2357 * t2573;
t2347 = t2349 * t2579 + t2419 * t2574;
t2346 = t2349 * t2574 - t2419 * t2579;
t2345 = -t2354 * t2573 + t2355 * t2578;
t2344 = t2354 * t2578 + t2355 * t2573;
t2343 = t2345 * t2579 + t2380 * t2574;
t2342 = t2345 * t2574 - t2380 * t2579;
t2341 = -t2346 * t2575 + t2347 * t2580;
t2340 = t2346 * t2580 + t2347 * t2575;
t2339 = -t2342 * t2575 + t2343 * t2580;
t2338 = t2342 * t2580 + t2343 * t2575;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2554, -t2553, 0, -t2558 * t2576 + t2559 * t2581, 0, 0, 0, 0, 0, 0, t2531 * t2581 - t2551 * t2576, t2532 * t2581 + t2548 * t2576, t2552 * t2581 - t2555 * t2576, t2513 * t2581 - t2545 * t2576, 0, 0, 0, 0, 0, 0, t2466 * t2581 + t2497 * t2576, t2470 * t2581 - t2576 * t2630, t2439 * t2581 + t2517 * t2576, t2416 * t2581 - t2518 * t2576, 0, 0, 0, 0, 0, 0, t2400 * t2581 + t2452 * t2576, t2406 * t2581 + t2460 * t2576, t2394 * t2581 + t2444 * t2576, t2363 * t2581 + t2391 * t2576, 0, 0, 0, 0, 0, 0, t2361 * t2581 + t2650, -t2656, t2652, t2341 * t2581 + t2348 * t2576, 0, 0, 0, 0, 0, 0, t2367 * t2581 + t2650, t2652, t2656, t2339 * t2581 + t2344 * t2576; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2553, t2554, 0, t2558 * t2581 + t2559 * t2576, 0, 0, 0, 0, 0, 0, t2531 * t2576 + t2551 * t2581, t2532 * t2576 - t2548 * t2581, t2552 * t2576 + t2555 * t2581, t2513 * t2576 + t2545 * t2581, 0, 0, 0, 0, 0, 0, t2466 * t2576 - t2497 * t2581, t2470 * t2576 + t2581 * t2630, t2439 * t2576 - t2517 * t2581, t2416 * t2576 + t2518 * t2581, 0, 0, 0, 0, 0, 0, t2400 * t2576 - t2452 * t2581, t2406 * t2576 - t2460 * t2581, t2394 * t2576 - t2444 * t2581, t2363 * t2576 - t2391 * t2581, 0, 0, 0, 0, 0, 0, t2361 * t2576 - t2648, -t2657, t2653, t2341 * t2576 - t2348 * t2581, 0, 0, 0, 0, 0, 0, t2367 * t2576 - t2648, t2653, t2657, t2339 * t2576 - t2344 * t2581; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2529, t2530, 0, t2512, 0, 0, 0, 0, 0, 0, t2465, t2469, t2438, t2415, 0, 0, 0, 0, 0, 0, t2399, t2405, t2393, t2362, 0, 0, 0, 0, 0, 0, t2359, t2364, t2646, t2340, 0, 0, 0, 0, 0, 0, t2365, t2646, -t2364, t2338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2583, -qJDD(1), 0, t2559, 0, 0, 0, 0, 0, 0, t2531, t2532, t2552, t2513, 0, 0, 0, 0, 0, 0, t2466, t2470, t2439, t2416, 0, 0, 0, 0, 0, 0, t2400, t2406, t2394, t2363, 0, 0, 0, 0, 0, 0, t2361, -t2360, t2647, t2341, 0, 0, 0, 0, 0, 0, t2367, t2647, t2360, t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2583, 0, t2558, 0, 0, 0, 0, 0, 0, t2551, -t2548, t2555, t2545, 0, 0, 0, 0, 0, 0, -t2497, t2630, -t2517, t2518, 0, 0, 0, 0, 0, 0, -t2452, -t2460, -t2444, -t2391, 0, 0, 0, 0, 0, 0, -t2640, t2401, -t2636, -t2348, 0, 0, 0, 0, 0, 0, -t2640, -t2636, -t2401, -t2344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2529, t2530, 0, t2512, 0, 0, 0, 0, 0, 0, t2465, t2469, t2438, t2415, 0, 0, 0, 0, 0, 0, t2399, t2405, t2393, t2362, 0, 0, 0, 0, 0, 0, t2359, t2364, t2646, t2340, 0, 0, 0, 0, 0, 0, t2365, t2646, -t2364, t2338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2561, t2557, t2568, t2535, 0, 0, 0, 0, 0, 0, t2491, t2502, t2468, t2449, 0, 0, 0, 0, 0, 0, t2431, t2437, t2421, t2386, 0, 0, 0, 0, 0, 0, t2384, t2389, t2642, t2347, 0, 0, 0, 0, 0, 0, t2390, t2642, -t2389, t2343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2556, t2560, -t2608, t2534, 0, 0, 0, 0, 0, 0, t2490, t2501, t2467, t2448, 0, 0, 0, 0, 0, 0, t2430, t2436, t2420, t2385, 0, 0, 0, 0, 0, 0, t2382, t2387, t2643, t2346, 0, 0, 0, 0, 0, 0, t2388, t2643, -t2387, t2342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2551, t2548, -t2555, -t2545, 0, 0, 0, 0, 0, 0, t2497, -t2630, t2517, -t2518, 0, 0, 0, 0, 0, 0, t2452, t2460, t2444, t2391, 0, 0, 0, 0, 0, 0, t2640, -t2401, t2636, t2348, 0, 0, 0, 0, 0, 0, t2640, t2636, t2401, t2344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2522, t2524, t2498, t2480, 0, 0, 0, 0, 0, 0, t2453, t2461, t2445, t2392, 0, 0, 0, 0, 0, 0, t2641, t2411, t2637, t2349, 0, 0, 0, 0, 0, 0, t2641, t2637, -t2411, t2345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2523, t2533, t2500, t2479, 0, 0, 0, 0, 0, 0, -t2473, -t2475, -t2488, -t2457, 0, 0, 0, 0, 0, 0, -t2423, -t2586, t2455, -t2419, 0, 0, 0, 0, 0, 0, -t2424, t2455, t2586, -t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2497, -t2630, t2517, -t2518, 0, 0, 0, 0, 0, 0, t2452, t2460, t2444, t2391, 0, 0, 0, 0, 0, 0, t2640, -t2401, t2636, t2348, 0, 0, 0, 0, 0, 0, t2640, t2636, t2401, t2344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2496, t2482, t2474, t2418, 0, 0, 0, 0, 0, 0, t2638, -t2434, t2629, t2357, 0, 0, 0, 0, 0, 0, t2638, t2629, t2434, t2355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2481, t2504, t2476, t2417, 0, 0, 0, 0, 0, 0, t2639, -t2432, t2631, t2356, 0, 0, 0, 0, 0, 0, t2639, t2631, t2432, t2354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2473, t2475, t2488, t2457, 0, 0, 0, 0, 0, 0, t2423, t2586, -t2455, t2419, 0, 0, 0, 0, 0, 0, t2424, -t2455, -t2586, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2632, -t2462, t2593, t2379, 0, 0, 0, 0, 0, 0, t2632, t2593, t2462, t2372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2463, t2633, -t2427, t2378, 0, 0, 0, 0, 0, 0, t2463, -t2427, -t2633, -t2373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2423, t2586, -t2455, t2419, 0, 0, 0, 0, 0, 0, t2424, -t2455, -t2586, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2632, t2593, t2462, t2372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2424, -t2455, -t2586, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2463, t2427, t2633, t2373;];
f_new_reg  = t1;
