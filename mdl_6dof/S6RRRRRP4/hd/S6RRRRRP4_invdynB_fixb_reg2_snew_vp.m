% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 04:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 04:52:44
% EndTime: 2019-05-08 04:53:52
% DurationCPUTime: 61.81s
% Computational Cost: add. (212040->827), mult. (423747->1195), div. (0->0), fcn. (313848->10), ass. (0->589)
t1182 = sin(qJ(1));
t1187 = cos(qJ(1));
t1181 = sin(qJ(2));
t1186 = cos(qJ(2));
t1180 = sin(qJ(3));
t1185 = cos(qJ(3));
t1140 = (t1180 * t1186 + t1181 * t1185) * qJD(1);
t1175 = qJD(2) + qJD(3);
t1179 = sin(qJ(4));
t1184 = cos(qJ(4));
t1110 = t1140 * t1179 - t1184 * t1175;
t1261 = qJD(1) * t1186;
t1262 = qJD(1) * t1181;
t1138 = t1180 * t1262 - t1185 * t1261;
t1218 = qJD(2) * t1261;
t1232 = qJDD(1) * t1181;
t1148 = t1218 + t1232;
t1171 = t1186 * qJDD(1);
t1226 = qJD(2) * t1262;
t1149 = t1171 - t1226;
t1198 = qJD(3) * t1138 - t1148 * t1185 - t1149 * t1180;
t1229 = qJDD(2) + qJDD(3);
t1021 = -t1110 * qJD(4) + t1179 * t1229 - t1184 * t1198;
t1111 = t1140 * t1184 + t1175 * t1179;
t1178 = sin(qJ(5));
t1183 = cos(qJ(5));
t1059 = t1183 * t1110 + t1111 * t1178;
t1199 = t1179 * t1198 + t1184 * t1229;
t1195 = t1111 * qJD(4) - t1199;
t1192 = -t1059 * qJD(5) + t1183 * t1021 - t1178 * t1195;
t1134 = qJD(4) + t1138;
t1132 = qJD(5) + t1134;
t1256 = t1059 * t1132;
t1298 = t1192 - t1256;
t1061 = -t1110 * t1178 + t1111 * t1183;
t1007 = t1061 * t1059;
t1215 = t1180 * t1148 - t1185 * t1149;
t1078 = -qJD(3) * t1140 - t1215;
t1075 = qJDD(4) - t1078;
t1074 = qJDD(5) + t1075;
t1302 = t1007 + t1074;
t1278 = t1178 * t1302;
t1058 = t1061 ^ 2;
t1287 = t1132 ^ 2;
t988 = t1287 + t1058;
t900 = t1183 * t988 + t1278;
t1269 = t1183 * t1302;
t917 = t1178 * t988 - t1269;
t835 = t1179 * t900 + t1184 * t917;
t769 = t1180 * t835 - t1185 * t1298;
t771 = t1180 * t1298 + t1185 * t835;
t706 = t1181 * t769 - t1186 * t771;
t833 = t1179 * t917 - t1184 * t900;
t682 = t1182 * t706 + t1187 * t833;
t1426 = pkin(6) * t682;
t684 = -t1182 * t833 + t1187 * t706;
t1425 = pkin(6) * t684;
t711 = t1181 * t771 + t1186 * t769;
t1424 = pkin(7) * t711;
t1423 = pkin(1) * t711 + pkin(2) * t769 - pkin(3) * t1298 + pkin(9) * t835;
t1422 = pkin(1) * t833 + pkin(7) * t706;
t1289 = t1059 ^ 2;
t1026 = t1289 - t1287;
t926 = t1026 * t1178 + t1269;
t930 = t1026 * t1183 - t1278;
t850 = t1179 * t926 - t1184 * t930;
t1216 = t1178 * t1021 + t1183 * t1195;
t890 = (qJD(5) - t1132) * t1061 + t1216;
t775 = t1180 * t850 - t1185 * t890;
t779 = t1180 * t890 + t1185 * t850;
t718 = t1181 * t775 - t1186 * t779;
t846 = t1179 * t930 + t1184 * t926;
t1421 = t1182 * t718 - t1187 * t846;
t1003 = t1058 - t1289;
t889 = (qJD(5) + t1132) * t1061 + t1216;
t813 = -t1178 * t889 + t1183 * t1298;
t1280 = t1178 * t1298;
t815 = t1183 * t889 + t1280;
t746 = t1179 * t813 + t1184 * t815;
t732 = t1003 * t1185 + t1180 * t746;
t734 = -t1003 * t1180 + t1185 * t746;
t674 = t1181 * t732 - t1186 * t734;
t744 = t1179 * t815 - t1184 * t813;
t1420 = t1182 * t674 + t1187 * t744;
t1419 = t1182 * t846 + t1187 * t718;
t1418 = -t1182 * t744 + t1187 * t674;
t1417 = pkin(8) * t769;
t1415 = pkin(2) * t833 - pkin(8) * t771;
t1414 = t1181 * t734 + t1186 * t732;
t1413 = t1181 * t779 + t1186 * t775;
t1297 = -t1256 - t1192;
t1335 = -t1178 * t1297 - t1183 * t890;
t1336 = -t1178 * t890 + t1183 * t1297;
t1349 = t1179 * t1335 + t1184 * t1336;
t1350 = -t1179 * t1336 + t1184 * t1335;
t954 = -t1289 - t1058;
t1371 = t1180 * t954 + t1185 * t1350;
t1373 = t1180 * t1350 - t1185 * t954;
t1389 = -t1181 * t1373 + t1186 * t1371;
t1393 = t1182 * t1349 + t1187 * t1389;
t1412 = pkin(6) * t1393;
t1395 = t1182 * t1389 - t1187 * t1349;
t1411 = pkin(6) * t1395;
t1408 = pkin(9) * t833;
t1388 = t1181 * t1371 + t1186 * t1373;
t1407 = pkin(7) * t1388;
t1400 = pkin(3) * t833 - pkin(4) * t900;
t1398 = -pkin(1) * t1388 - pkin(2) * t1373 + pkin(3) * t954 - pkin(9) * t1350;
t1397 = -pkin(1) * t1349 + pkin(7) * t1389;
t1027 = -t1058 + t1287;
t1303 = -t1007 + t1074;
t959 = t1183 * t1303;
t1325 = -t1027 * t1178 + t959;
t1277 = t1178 * t1303;
t1337 = t1183 * t1027 + t1277;
t1353 = -t1179 * t1325 - t1184 * t1337;
t1356 = -t1179 * t1337 + t1184 * t1325;
t1372 = -t1180 * t1297 + t1185 * t1356;
t1374 = t1180 * t1356 + t1185 * t1297;
t1387 = -t1181 * t1374 + t1186 * t1372;
t1396 = t1182 * t1387 + t1187 * t1353;
t1394 = -t1182 * t1353 + t1187 * t1387;
t1392 = pkin(8) * t1373;
t1390 = -pkin(2) * t1349 + pkin(8) * t1371;
t1386 = t1181 * t1372 + t1186 * t1374;
t1384 = pkin(10) * t900;
t1383 = pkin(10) * t917;
t1380 = pkin(9) * t1349;
t703 = -pkin(3) * t1349 - pkin(4) * t1336;
t1296 = -t1287 - t1289;
t1307 = t1183 * t1296 - t1277;
t1311 = t1178 * t1296 + t959;
t1333 = t1179 * t1307 + t1184 * t1311;
t1370 = pkin(1) * t1333;
t1369 = pkin(2) * t1333;
t1367 = pkin(9) * t1333;
t1334 = -t1179 * t1311 + t1184 * t1307;
t1366 = pkin(9) * t1334;
t1365 = pkin(10) * t1336;
t1362 = t1180 * t1334;
t1361 = t1182 * t1333;
t1360 = t1185 * t1334;
t1359 = t1187 * t1333;
t1358 = -pkin(3) * t1333 - pkin(4) * t1311;
t1357 = -pkin(4) * t954 + pkin(10) * t1335;
t1200 = (-t1059 * t1178 - t1061 * t1183) * t1132;
t1249 = t1132 * t1178;
t1023 = t1061 * t1249;
t1248 = t1132 * t1183;
t1223 = t1059 * t1248;
t1206 = t1023 - t1223;
t1295 = -t1179 * t1206 - t1184 * t1200;
t1294 = -t1179 * t1200 + t1184 * t1206;
t1305 = t1074 * t1180 + t1185 * t1294;
t1309 = -t1185 * t1074 + t1180 * t1294;
t1332 = -t1181 * t1309 + t1186 * t1305;
t1355 = t1182 * t1332 + t1187 * t1295;
t934 = -qJD(5) * t1061 - t1216;
t1202 = -t1178 * t934 + t1223;
t1207 = t1059 * t1249 + t1183 * t934;
t1292 = -t1179 * t1202 - t1184 * t1207;
t1225 = t1180 * t1007;
t1293 = -t1179 * t1207 + t1184 * t1202;
t1306 = t1185 * t1293 - t1225;
t1224 = t1185 * t1007;
t1308 = t1180 * t1293 + t1224;
t1330 = -t1181 * t1308 + t1186 * t1306;
t1354 = t1182 * t1330 + t1187 * t1292;
t1352 = -t1182 * t1295 + t1187 * t1332;
t1351 = -t1182 * t1292 + t1187 * t1330;
t1345 = pkin(10) * t1307;
t1344 = pkin(10) * t1311;
t1331 = t1181 * t1305 + t1186 * t1309;
t1329 = t1181 * t1306 + t1186 * t1308;
t1328 = 2 * qJD(6);
t1326 = qJ(6) * t1298;
t1072 = t1111 * t1110;
t1301 = -t1072 + t1075;
t1324 = t1179 * t1301;
t1101 = t1140 * t1138;
t1300 = -t1101 + t1229;
t1321 = t1180 * t1300;
t1318 = t1184 * t1301;
t1315 = t1185 * t1300;
t1129 = t1175 * t1138;
t1312 = t1198 + t1129;
t885 = t1061 * t1248 + t1178 * t1192;
t886 = t1183 * t1192 - t1023;
t810 = -t1179 * t885 + t1184 * t886;
t1208 = t1180 * t810 - t1224;
t1209 = t1185 * t810 + t1225;
t1290 = -t1181 * t1208 + t1186 * t1209;
t807 = -t1179 * t886 - t1184 * t885;
t1310 = t1182 * t1290 + t1187 * t807;
t1304 = -t1182 * t807 + t1187 * t1290;
t1089 = t1134 * t1110;
t1000 = -t1089 - t1021;
t999 = -t1089 + t1021;
t1002 = pkin(5) * t1059 - qJ(6) * t1061;
t1177 = t1186 ^ 2;
t1189 = qJD(1) ^ 2;
t1158 = t1182 * g(1) - t1187 * g(2);
t1203 = qJDD(1) * pkin(1) + t1158;
t1204 = qJD(2) * pkin(2) - pkin(8) * t1262;
t1081 = t1149 * pkin(2) + (pkin(8) * t1177 + pkin(7)) * t1189 - t1204 * t1262 + t1203;
t949 = t1312 * pkin(9) + (t1140 * t1175 - t1078) * pkin(3) - t1081;
t1159 = g(1) * t1187 + g(2) * t1182;
t1196 = -pkin(1) * t1189 + qJDD(1) * pkin(7) - t1159;
t1122 = -t1181 * g(3) + t1186 * t1196;
t1173 = t1177 * t1189;
t1070 = -pkin(2) * t1173 + t1149 * pkin(8) - qJD(2) * t1204 + t1122;
t1194 = t1181 * t1196;
t1237 = t1181 * t1189;
t1263 = qJD(1) * qJD(2);
t1190 = -t1194 - t1148 * pkin(8) + qJDD(2) * pkin(2) + (pkin(2) * t1237 + pkin(8) * t1263 - g(3)) * t1186;
t1010 = t1185 * t1070 + t1180 * t1190;
t1099 = pkin(3) * t1138 - pkin(9) * t1140;
t1286 = t1175 ^ 2;
t958 = -pkin(3) * t1286 + pkin(9) * t1229 - t1138 * t1099 + t1010;
t865 = t1179 * t958 - t1184 * t949;
t830 = pkin(4) * t1301 + pkin(10) * t1000 - t865;
t1082 = pkin(4) * t1134 - pkin(10) * t1111;
t1288 = t1110 ^ 2;
t866 = t1179 * t949 + t1184 * t958;
t840 = -pkin(4) * t1288 - pkin(10) * t1195 - t1134 * t1082 + t866;
t754 = t1178 * t830 + t1183 * t840;
t1205 = t1074 * qJ(6) - t1059 * t1002 + t1132 * t1328 + t754;
t996 = (qJD(4) - t1134) * t1111 - t1199;
t1047 = (qJD(3) - t1175) * t1140 + t1215;
t1291 = t1181 * t1209 + t1186 * t1208;
t1108 = t1111 ^ 2;
t1133 = t1134 ^ 2;
t1136 = t1138 ^ 2;
t1137 = t1140 ^ 2;
t1285 = pkin(3) * t1180;
t1284 = pkin(5) * t1183;
t753 = t1178 * t840 - t1183 * t830;
t1283 = qJ(6) * t1183;
t1009 = t1180 * t1070 - t1185 * t1190;
t957 = -t1229 * pkin(3) - t1286 * pkin(9) + t1140 * t1099 + t1009;
t867 = t1195 * pkin(4) - t1288 * pkin(10) + t1111 * t1082 + t957;
t1282 = t1178 * t867;
t694 = t1178 * t754 - t1183 * t753;
t1276 = t1179 * t694;
t1275 = t1179 * t957;
t937 = -t1009 * t1185 + t1010 * t1180;
t1273 = t1181 * t937;
t1271 = t1183 * t867;
t1268 = t1184 * t694;
t1267 = t1184 * t957;
t1265 = t1186 * t937;
t1264 = -t1287 - t954;
t1012 = t1072 + t1075;
t1259 = t1012 * t1179;
t1258 = t1012 * t1184;
t1254 = t1081 * t1180;
t1253 = t1081 * t1185;
t1096 = t1101 + t1229;
t1252 = t1096 * t1180;
t1251 = t1096 * t1185;
t1250 = t1132 * t1061;
t1247 = t1134 * t1179;
t1246 = t1134 * t1184;
t1141 = t1189 * pkin(7) + t1203;
t1245 = t1141 * t1181;
t1244 = t1141 * t1186;
t1165 = t1186 * t1237;
t1156 = qJDD(2) + t1165;
t1243 = t1156 * t1181;
t1157 = qJDD(2) - t1165;
t1242 = t1157 * t1181;
t1241 = t1157 * t1186;
t1240 = t1175 * t1180;
t1239 = t1175 * t1185;
t1176 = t1181 ^ 2;
t1238 = t1176 * t1189;
t1233 = t1176 + t1177;
t1231 = qJDD(1) * t1182;
t1230 = qJDD(1) * t1187;
t1228 = -pkin(3) * t1185 - pkin(2);
t1222 = t1180 * t1072;
t1221 = t1185 * t1072;
t1220 = t1182 * t1101;
t1219 = t1187 * t1101;
t1217 = -qJ(6) * t1178 - pkin(4);
t695 = t1178 * t753 + t1183 * t754;
t938 = t1009 * t1180 + t1185 * t1010;
t1121 = t1186 * g(3) + t1194;
t1069 = t1121 * t1181 + t1186 * t1122;
t1113 = -t1158 * t1182 - t1187 * t1159;
t1213 = t1061 * t1002 + qJDD(6) + t753;
t1212 = t1182 * t1165;
t1211 = t1187 * t1165;
t1153 = -t1182 * t1189 + t1230;
t1210 = -pkin(6) * t1153 - g(3) * t1182;
t795 = t1179 * t866 - t1184 * t865;
t796 = t1179 * t865 + t1184 * t866;
t1068 = t1121 * t1186 - t1122 * t1181;
t1112 = t1158 * t1187 - t1159 * t1182;
t1201 = -t1074 * pkin(5) + t1213;
t1193 = -t934 * pkin(5) - t1326 + t867;
t1191 = t1061 * t1328 - t1193;
t1188 = qJD(2) ^ 2;
t1163 = -t1173 - t1188;
t1162 = t1173 - t1188;
t1161 = -t1188 - t1238;
t1160 = t1188 - t1238;
t1155 = t1173 - t1238;
t1154 = t1173 + t1238;
t1152 = t1187 * t1189 + t1231;
t1151 = t1233 * qJDD(1);
t1150 = t1171 - 0.2e1 * t1226;
t1147 = 0.2e1 * t1218 + t1232;
t1145 = t1186 * t1156;
t1144 = t1233 * t1263;
t1135 = -pkin(6) * t1152 + g(3) * t1187;
t1126 = -t1137 + t1286;
t1125 = t1136 - t1286;
t1124 = t1148 * t1186 - t1176 * t1263;
t1123 = -t1149 * t1181 - t1177 * t1263;
t1120 = -t1137 - t1286;
t1119 = -t1161 * t1181 - t1241;
t1118 = -t1160 * t1181 + t1145;
t1117 = t1163 * t1186 - t1243;
t1116 = t1162 * t1186 - t1242;
t1115 = t1161 * t1186 - t1242;
t1114 = t1163 * t1181 + t1145;
t1106 = t1151 * t1187 - t1154 * t1182;
t1105 = t1151 * t1182 + t1154 * t1187;
t1102 = -t1147 * t1181 + t1150 * t1186;
t1100 = -t1137 + t1136;
t1095 = -t1286 - t1136;
t1093 = t1119 * t1187 + t1147 * t1182;
t1092 = t1117 * t1187 - t1150 * t1182;
t1091 = t1119 * t1182 - t1147 * t1187;
t1090 = t1117 * t1182 + t1150 * t1187;
t1088 = -t1108 + t1133;
t1087 = -t1133 + t1288;
t1086 = (-t1138 * t1185 + t1140 * t1180) * t1175;
t1085 = (-t1138 * t1180 - t1140 * t1185) * t1175;
t1084 = -pkin(7) * t1115 - t1244;
t1083 = -pkin(7) * t1114 - t1245;
t1080 = -t1136 - t1137;
t1077 = -pkin(1) * t1115 + t1122;
t1076 = -pkin(1) * t1114 + t1121;
t1066 = -t1108 + t1288;
t1055 = -t1108 - t1133;
t1053 = t1125 * t1185 - t1252;
t1052 = -t1126 * t1180 + t1315;
t1051 = t1125 * t1180 + t1251;
t1050 = t1126 * t1185 + t1321;
t1049 = -t1120 * t1180 - t1251;
t1048 = t1120 * t1185 - t1252;
t1046 = -t1129 + t1198;
t1042 = (qJD(3) + t1175) * t1140 + t1215;
t1041 = -t1133 - t1288;
t1040 = -t1140 * t1240 - t1185 * t1198;
t1039 = t1140 * t1239 - t1180 * t1198;
t1038 = -t1078 * t1180 + t1138 * t1239;
t1037 = t1078 * t1185 + t1138 * t1240;
t1036 = t1069 * t1187 - t1141 * t1182;
t1035 = t1069 * t1182 + t1141 * t1187;
t1030 = t1095 * t1185 - t1321;
t1029 = t1095 * t1180 + t1315;
t1024 = t1108 + t1288;
t1018 = (-t1110 * t1184 + t1111 * t1179) * t1134;
t1017 = (t1110 * t1179 + t1111 * t1184) * t1134;
t1016 = -t1085 * t1181 + t1086 * t1186;
t1005 = -pkin(8) * t1048 - t1253;
t997 = (-qJD(4) - t1134) * t1111 + t1199;
t995 = -pkin(8) * t1029 - t1254;
t994 = -t1051 * t1181 + t1053 * t1186;
t993 = -t1050 * t1181 + t1052 * t1186;
t992 = t1021 * t1184 - t1111 * t1247;
t991 = -t1021 * t1179 - t1111 * t1246;
t990 = t1110 * t1246 + t1179 * t1195;
t989 = -t1110 * t1247 + t1184 * t1195;
t986 = -t1048 * t1181 + t1049 * t1186;
t985 = t1048 * t1186 + t1049 * t1181;
t984 = -t1046 * t1180 - t1047 * t1185;
t983 = -t1042 * t1185 + t1180 * t1312;
t982 = t1046 * t1185 - t1047 * t1180;
t981 = -t1042 * t1180 - t1185 * t1312;
t980 = t1018 * t1185 + t1075 * t1180;
t979 = t1018 * t1180 - t1075 * t1185;
t978 = t1087 * t1184 - t1259;
t977 = -t1088 * t1179 + t1318;
t976 = -t1087 * t1179 - t1258;
t975 = -t1088 * t1184 - t1324;
t974 = -t1039 * t1181 + t1040 * t1186;
t973 = -t1037 * t1181 + t1038 * t1186;
t968 = -t1029 * t1181 + t1030 * t1186;
t967 = t1029 * t1186 + t1030 * t1181;
t961 = -t1055 * t1179 - t1258;
t960 = t1055 * t1184 - t1259;
t953 = t1041 * t1184 - t1324;
t952 = t1041 * t1179 + t1318;
t948 = pkin(2) * t1312 + pkin(8) * t1049 - t1254;
t945 = t1185 * t992 + t1222;
t944 = t1185 * t990 - t1222;
t943 = t1180 * t992 - t1221;
t942 = t1180 * t990 + t1221;
t941 = -pkin(2) * t1042 + pkin(8) * t1030 + t1253;
t940 = -t1182 * t1312 + t1187 * t986;
t939 = t1182 * t986 + t1187 * t1312;
t936 = t1042 * t1182 + t1187 * t968;
t935 = -t1042 * t1187 + t1182 * t968;
t922 = -t1000 * t1179 - t1184 * t996;
t921 = -t1179 * t999 + t1184 * t997;
t920 = t1000 * t1184 - t1179 * t996;
t919 = -t1179 * t997 - t1184 * t999;
t914 = pkin(2) * t1081 + pkin(8) * t938;
t913 = -t1181 * t982 + t1186 * t984;
t912 = -t1181 * t981 + t1186 * t983;
t911 = t1181 * t984 + t1186 * t982;
t910 = -t1180 * t996 + t1185 * t978;
t909 = -t1000 * t1180 + t1185 * t977;
t908 = t1180 * t978 + t1185 * t996;
t907 = t1000 * t1185 + t1180 * t977;
t906 = -t1181 * t979 + t1186 * t980;
t905 = t1180 * t999 + t1185 * t961;
t904 = t1180 * t961 - t1185 * t999;
t899 = -t1180 * t997 + t1185 * t953;
t898 = t1180 * t953 + t1185 * t997;
t891 = -t934 + t1250;
t887 = -pkin(1) * t985 - pkin(2) * t1048 + t1010;
t880 = -t1066 * t1180 + t1185 * t921;
t879 = t1066 * t1185 + t1180 * t921;
t874 = t1080 * t1182 + t1187 * t913;
t873 = -t1080 * t1187 + t1182 * t913;
t872 = -pkin(9) * t960 + t1267;
t871 = -t1024 * t1180 + t1185 * t922;
t870 = t1024 * t1185 + t1180 * t922;
t869 = -pkin(1) * t967 - pkin(2) * t1029 + t1009;
t868 = -pkin(9) * t952 + t1275;
t864 = -pkin(8) * t982 - t937;
t859 = -t1181 * t943 + t1186 * t945;
t858 = -t1181 * t942 + t1186 * t944;
t857 = -pkin(2) * t1080 + pkin(8) * t984 + t938;
t856 = -pkin(1) * t911 - pkin(2) * t982;
t855 = -pkin(7) * t985 + t1005 * t1186 - t1181 * t948;
t854 = t1186 * t938 - t1273;
t853 = t1181 * t938 + t1265;
t852 = -pkin(7) * t967 - t1181 * t941 + t1186 * t995;
t843 = -t1081 * t1182 + t1187 * t854;
t842 = t1081 * t1187 + t1182 * t854;
t841 = -pkin(3) * t960 + t866;
t839 = -pkin(3) * t952 + t865;
t832 = -t1181 * t908 + t1186 * t910;
t831 = -t1181 * t907 + t1186 * t909;
t827 = -t1181 * t904 + t1186 * t905;
t826 = t1181 * t905 + t1186 * t904;
t821 = -t1181 * t898 + t1186 * t899;
t820 = t1181 * t899 + t1186 * t898;
t819 = t1271 + t1384;
t801 = -t1181 * t879 + t1186 * t880;
t800 = t1282 - t1344;
t799 = -t1181 * t870 + t1186 * t871;
t798 = t1181 * t871 + t1186 * t870;
t797 = -pkin(1) * t853 - pkin(2) * t937;
t784 = t1182 * t960 + t1187 * t827;
t783 = t1182 * t827 - t1187 * t960;
t782 = t1182 * t952 + t1187 * t821;
t781 = t1182 * t821 - t1187 * t952;
t772 = t1180 * t891 + t1360;
t770 = -t1185 * t891 + t1362;
t768 = t1180 * t957 + t1185 * t796;
t767 = t1180 * t796 - t1185 * t957;
t766 = t1180 * t889 + t1360;
t764 = -t1185 * t889 + t1362;
t762 = -pkin(4) * t1298 + t1282 + t1383;
t761 = t1182 * t920 + t1187 * t799;
t760 = t1182 * t799 - t1187 * t920;
t759 = -pkin(4) * t889 - t1271 + t1345;
t758 = -pkin(9) * t920 - t795;
t757 = -pkin(7) * t853 - pkin(8) * t1265 - t1181 * t914;
t756 = (pkin(5) * t1132 - (2 * qJD(6))) * t1061 + t1193;
t755 = -pkin(7) * t911 - t1181 * t857 + t1186 * t864;
t751 = -pkin(8) * t904 - t1180 * t841 + t1185 * t872;
t750 = -pkin(8) * t898 - t1180 * t839 + t1185 * t868;
t741 = -pkin(2) * t960 + pkin(8) * t905 + t1180 * t872 + t1185 * t841;
t740 = (-t891 - t1250) * pkin(5) + t1191;
t739 = -pkin(5) * t1250 + t1191 + t1326;
t738 = -pkin(1) * t826 - pkin(2) * t904 + pkin(3) * t999 - pkin(9) * t961 - t1275;
t737 = -pkin(2) * t952 + pkin(8) * t899 + t1180 * t868 + t1185 * t839;
t736 = qJ(6) * t1287 - t1201;
t731 = -pkin(5) * t1287 + t1205;
t730 = -pkin(1) * t820 - pkin(2) * t898 - pkin(3) * t997 - pkin(9) * t953 + t1267;
t721 = qJ(6) * t1264 + t1201;
t720 = pkin(5) * t1264 + t1205;
t719 = -pkin(8) * t870 + t1185 * t758 + t1285 * t920;
t714 = -t1181 * t770 + t1186 * t772;
t712 = t1181 * t772 + t1186 * t770;
t710 = -t1181 * t767 + t1186 * t768;
t709 = t1181 * t768 + t1186 * t767;
t708 = pkin(8) * t871 + t1180 * t758 + t1228 * t920;
t707 = -t1181 * t764 + t1186 * t766;
t705 = t1181 * t766 + t1186 * t764;
t702 = -t1400 + t754;
t701 = -t1178 * t740 - t1283 * t891 - t1344;
t700 = -pkin(5) * t1280 + t1183 * t739 - t1384;
t699 = t1358 + t753;
t698 = -pkin(1) * t798 - pkin(2) * t870 - pkin(3) * t1024 - pkin(9) * t922 - t796;
t697 = -t1179 * t762 + t1184 * t819 - t1408;
t696 = t1183 * t740 + t1217 * t891 + t1345;
t693 = t1187 * t714 + t1361;
t691 = t1182 * t714 - t1359;
t689 = -t1179 * t759 + t1184 * t800 - t1367;
t688 = -t1383 + t1178 * t739 + (pkin(4) + t1284) * t1298;
t687 = -pkin(8) * t767 + (-pkin(9) * t1185 + t1285) * t795;
t686 = (-t1296 - t1287) * qJ(6) + (-t1074 - t1303) * pkin(5) + t1213 + t1358;
t685 = t1187 * t707 + t1361;
t683 = t1182 * t707 - t1359;
t681 = -pkin(5) * t1297 + qJ(6) * t890 + t703;
t680 = t1182 * t795 + t1187 * t710;
t679 = t1182 * t710 - t1187 * t795;
t678 = -pkin(4) * t867 + pkin(10) * t695;
t677 = -qJ(6) * t1302 + (t1287 - t988) * pkin(5) - t1205 + t1400;
t676 = -t1178 * t736 + t1183 * t731;
t675 = t1178 * t731 + t1183 * t736;
t672 = -t694 - t1365;
t667 = t1357 + t695;
t666 = pkin(8) * t768 + (-pkin(9) * t1180 + t1228) * t795;
t665 = -pkin(7) * t826 - t1181 * t741 + t1186 * t751;
t664 = -pkin(7) * t820 - t1181 * t737 + t1186 * t750;
t663 = -pkin(1) * t709 - pkin(2) * t767 + pkin(3) * t957 - pkin(9) * t796;
t662 = -t1178 * t720 + t1183 * t721 - t1365;
t661 = t1178 * t721 + t1183 * t720 + t1357;
t660 = -pkin(7) * t798 - t1181 * t708 + t1186 * t719;
t655 = t1184 * t695 - t1276;
t654 = t1179 * t695 + t1268;
t653 = -t1179 * t696 + t1184 * t701 - t1367;
t652 = -pkin(10) * t675 + (pkin(5) * t1178 - t1283) * t756;
t651 = t1180 * t867 + t1185 * t655;
t650 = t1180 * t655 - t1185 * t867;
t649 = -t1179 * t688 + t1184 * t700 + t1408;
t648 = -t1180 * t702 + t1185 * t697 - t1417;
t647 = -t1179 * t819 - t1184 * t762 - t1423;
t646 = -pkin(8) * t764 - t1180 * t699 + t1185 * t689;
t645 = -pkin(1) * t705 - pkin(2) * t764 + pkin(3) * t889 - t1179 * t800 - t1184 * t759 - t1366;
t644 = t1180 * t697 + t1185 * t702 - t1415;
t643 = -t1179 * t675 + t1184 * t676;
t642 = t1179 * t676 + t1184 * t675;
t641 = pkin(8) * t766 + t1180 * t689 + t1185 * t699 - t1369;
t640 = pkin(10) * t676 + (t1217 - t1284) * t756;
t639 = t1180 * t756 + t1185 * t643;
t638 = t1180 * t643 - t1185 * t756;
t637 = -pkin(3) * t654 - pkin(4) * t694;
t636 = -t1179 * t667 + t1184 * t672 - t1380;
t635 = -pkin(7) * t709 - t1181 * t666 + t1186 * t687;
t634 = -pkin(1) * t712 - pkin(2) * t770 + pkin(3) * t891 - t1179 * t701 - t1184 * t696 - t1366;
t633 = -t1179 * t700 - t1184 * t688 + t1423;
t632 = -pkin(8) * t770 - t1180 * t686 + t1185 * t653;
t631 = -t1180 * t677 + t1185 * t649 + t1417;
t630 = pkin(8) * t772 + t1180 * t653 + t1185 * t686 - t1369;
t629 = -t1179 * t661 + t1184 * t662 - t1380;
t628 = t1180 * t649 + t1185 * t677 + t1415;
t627 = -pkin(9) * t654 - pkin(10) * t1268 - t1179 * t678;
t626 = -t1181 * t650 + t1186 * t651;
t625 = t1181 * t651 + t1186 * t650;
t624 = -t1180 * t703 + t1185 * t636 - t1392;
t623 = -pkin(3) * t642 - pkin(4) * t675 - pkin(5) * t736 - qJ(6) * t731;
t622 = -t1179 * t672 - t1184 * t667 + t1398;
t621 = t1180 * t636 + t1185 * t703 + t1390;
t620 = -t1181 * t644 + t1186 * t648 - t1424;
t619 = -t1180 * t681 + t1185 * t629 - t1392;
t618 = -pkin(7) * t705 - t1181 * t641 + t1186 * t646;
t617 = -t1181 * t638 + t1186 * t639;
t616 = t1181 * t639 + t1186 * t638;
t615 = -t1179 * t662 - t1184 * t661 + t1398;
t614 = t1180 * t629 + t1185 * t681 + t1390;
t613 = t1182 * t654 + t1187 * t626;
t612 = t1182 * t626 - t1187 * t654;
t611 = -pkin(9) * t642 - t1179 * t640 + t1184 * t652;
t610 = -pkin(7) * t712 - t1181 * t630 + t1186 * t632;
t609 = t1182 * t642 + t1187 * t617;
t608 = t1182 * t617 - t1187 * t642;
t607 = -t1181 * t628 + t1186 * t631 + t1424;
t606 = -pkin(8) * t650 - t1180 * t637 + t1185 * t627;
t605 = -pkin(1) * t625 - pkin(2) * t650 + pkin(3) * t867 - pkin(9) * t655 + pkin(10) * t1276 - t1184 * t678;
t604 = -t1181 * t621 + t1186 * t624 - t1407;
t603 = -pkin(2) * t654 + pkin(8) * t651 + t1180 * t627 + t1185 * t637;
t602 = -t1181 * t614 + t1186 * t619 - t1407;
t601 = -pkin(8) * t638 - t1180 * t623 + t1185 * t611;
t600 = -pkin(1) * t616 - pkin(2) * t638 + pkin(3) * t756 - pkin(9) * t643 - t1179 * t652 - t1184 * t640;
t599 = -pkin(2) * t642 + pkin(8) * t639 + t1180 * t611 + t1185 * t623;
t598 = -pkin(7) * t625 - t1181 * t603 + t1186 * t606;
t597 = -pkin(7) * t616 - t1181 * t599 + t1186 * t601;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1152, -t1153, 0, t1113, 0, 0, 0, 0, 0, 0, t1092, t1093, t1106, t1036, 0, 0, 0, 0, 0, 0, t936, t940, t874, t843, 0, 0, 0, 0, 0, 0, t782, t784, t761, t680, 0, 0, 0, 0, 0, 0, t685, -t684, t1393, t613, 0, 0, 0, 0, 0, 0, t693, t1393, t684, t609; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1153, -t1152, 0, t1112, 0, 0, 0, 0, 0, 0, t1090, t1091, t1105, t1035, 0, 0, 0, 0, 0, 0, t935, t939, t873, t842, 0, 0, 0, 0, 0, 0, t781, t783, t760, t679, 0, 0, 0, 0, 0, 0, t683, -t682, t1395, t612, 0, 0, 0, 0, 0, 0, t691, t1395, t682, t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1114, t1115, 0, -t1068, 0, 0, 0, 0, 0, 0, t967, t985, t911, t853, 0, 0, 0, 0, 0, 0, t820, t826, t798, t709, 0, 0, 0, 0, 0, 0, t705, t711, t1388, t625, 0, 0, 0, 0, 0, 0, t712, t1388, -t711, t616; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1153, 0, -t1152, 0, t1210, -t1135, -t1112, -pkin(6) * t1112, t1124 * t1187 - t1212, t1102 * t1187 - t1155 * t1182, t1118 * t1187 + t1181 * t1231, t1123 * t1187 + t1212, t1116 * t1187 + t1171 * t1182, qJDD(2) * t1182 + t1144 * t1187, -pkin(6) * t1090 - t1076 * t1182 + t1083 * t1187, -pkin(6) * t1091 - t1077 * t1182 + t1084 * t1187, -pkin(6) * t1105 + t1068 * t1187, -pkin(6) * t1035 - (pkin(1) * t1182 - pkin(7) * t1187) * t1068, t1187 * t974 + t1220, -t1100 * t1182 + t1187 * t912, -t1046 * t1182 + t1187 * t993, t1187 * t973 - t1220, -t1047 * t1182 + t1187 * t994, t1187 * t1016 + t1182 * t1229, -pkin(6) * t935 - t1182 * t869 + t1187 * t852, -pkin(6) * t939 - t1182 * t887 + t1187 * t855, -pkin(6) * t873 - t1182 * t856 + t1187 * t755, -pkin(6) * t842 - t1182 * t797 + t1187 * t757, -t1182 * t991 + t1187 * t859, -t1182 * t919 + t1187 * t801, -t1182 * t975 + t1187 * t831, -t1182 * t989 + t1187 * t858, -t1182 * t976 + t1187 * t832, -t1017 * t1182 + t1187 * t906, -pkin(6) * t781 - t1182 * t730 + t1187 * t664, -pkin(6) * t783 - t1182 * t738 + t1187 * t665, -pkin(6) * t760 - t1182 * t698 + t1187 * t660, -pkin(6) * t679 - t1182 * t663 + t1187 * t635, t1304, t1418, t1394, t1351, t1419, t1352, -pkin(6) * t683 - t1182 * t645 + t1187 * t618, -t1182 * t647 + t1187 * t620 + t1426, -t1182 * t622 + t1187 * t604 - t1411, -pkin(6) * t612 - t1182 * t605 + t1187 * t598, t1304, t1394, -t1418, t1352, -t1419, t1351, -pkin(6) * t691 - t1182 * t634 + t1187 * t610, -t1182 * t615 + t1187 * t602 - t1411, -t1182 * t633 + t1187 * t607 - t1426, -pkin(6) * t608 - t1182 * t600 + t1187 * t597; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1152, 0, t1153, 0, t1135, t1210, t1113, pkin(6) * t1113, t1124 * t1182 + t1211, t1102 * t1182 + t1155 * t1187, t1118 * t1182 - t1181 * t1230, t1123 * t1182 - t1211, t1116 * t1182 - t1171 * t1187, -qJDD(2) * t1187 + t1144 * t1182, pkin(6) * t1092 + t1076 * t1187 + t1083 * t1182, pkin(6) * t1093 + t1077 * t1187 + t1084 * t1182, pkin(6) * t1106 + t1068 * t1182, pkin(6) * t1036 - (-pkin(1) * t1187 - pkin(7) * t1182) * t1068, t1182 * t974 - t1219, t1100 * t1187 + t1182 * t912, t1046 * t1187 + t1182 * t993, t1182 * t973 + t1219, t1047 * t1187 + t1182 * t994, t1182 * t1016 - t1187 * t1229, pkin(6) * t936 + t1182 * t852 + t1187 * t869, pkin(6) * t940 + t1182 * t855 + t1187 * t887, pkin(6) * t874 + t1182 * t755 + t1187 * t856, pkin(6) * t843 + t1182 * t757 + t1187 * t797, t1182 * t859 + t1187 * t991, t1182 * t801 + t1187 * t919, t1182 * t831 + t1187 * t975, t1182 * t858 + t1187 * t989, t1182 * t832 + t1187 * t976, t1017 * t1187 + t1182 * t906, pkin(6) * t782 + t1182 * t664 + t1187 * t730, pkin(6) * t784 + t1182 * t665 + t1187 * t738, pkin(6) * t761 + t1182 * t660 + t1187 * t698, pkin(6) * t680 + t1182 * t635 + t1187 * t663, t1310, t1420, t1396, t1354, t1421, t1355, pkin(6) * t685 + t1182 * t618 + t1187 * t645, t1182 * t620 + t1187 * t647 - t1425, t1182 * t604 + t1187 * t622 + t1412, pkin(6) * t613 + t1182 * t598 + t1187 * t605, t1310, t1396, -t1420, t1355, -t1421, t1354, pkin(6) * t693 + t1182 * t610 + t1187 * t634, t1182 * t602 + t1187 * t615 + t1412, t1182 * t607 + t1187 * t633 + t1425, pkin(6) * t609 + t1182 * t597 + t1187 * t600; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1158, t1159, 0, 0, (t1148 + t1218) * t1181, t1147 * t1186 + t1150 * t1181, t1160 * t1186 + t1243, (t1149 - t1226) * t1186, t1162 * t1181 + t1241, 0, pkin(1) * t1150 + pkin(7) * t1117 + t1244, -pkin(1) * t1147 + pkin(7) * t1119 - t1245, pkin(1) * t1154 + pkin(7) * t1151 + t1069, pkin(1) * t1141 + pkin(7) * t1069, t1039 * t1186 + t1040 * t1181, t1181 * t983 + t1186 * t981, t1050 * t1186 + t1052 * t1181, t1037 * t1186 + t1038 * t1181, t1051 * t1186 + t1053 * t1181, t1085 * t1186 + t1086 * t1181, -pkin(1) * t1042 + pkin(7) * t968 + t1181 * t995 + t1186 * t941, pkin(1) * t1312 + pkin(7) * t986 + t1005 * t1181 + t1186 * t948, -pkin(1) * t1080 + pkin(7) * t913 + t1181 * t864 + t1186 * t857, pkin(1) * t1081 + pkin(7) * t854 - pkin(8) * t1273 + t1186 * t914, t1181 * t945 + t1186 * t943, t1181 * t880 + t1186 * t879, t1181 * t909 + t1186 * t907, t1181 * t944 + t1186 * t942, t1181 * t910 + t1186 * t908, t1181 * t980 + t1186 * t979, -pkin(1) * t952 + pkin(7) * t821 + t1181 * t750 + t1186 * t737, -pkin(1) * t960 + pkin(7) * t827 + t1181 * t751 + t1186 * t741, -pkin(1) * t920 + pkin(7) * t799 + t1181 * t719 + t1186 * t708, -pkin(1) * t795 + pkin(7) * t710 + t1181 * t687 + t1186 * t666, t1291, -t1414, t1386, t1329, -t1413, t1331, pkin(7) * t707 + t1181 * t646 + t1186 * t641 - t1370, t1181 * t648 + t1186 * t644 - t1422, t1181 * t624 + t1186 * t621 + t1397, -pkin(1) * t654 + pkin(7) * t626 + t1181 * t606 + t1186 * t603, t1291, t1386, t1414, t1331, t1413, t1329, pkin(7) * t714 + t1181 * t632 + t1186 * t630 - t1370, t1181 * t619 + t1186 * t614 + t1397, t1181 * t631 + t1186 * t628 + t1422, -pkin(1) * t642 + pkin(7) * t617 + t1181 * t601 + t1186 * t599;];
tauB_reg  = t1;
