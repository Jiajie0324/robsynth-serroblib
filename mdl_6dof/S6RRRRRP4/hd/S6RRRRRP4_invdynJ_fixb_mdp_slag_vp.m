% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP4_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP4_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP4_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP4_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP4_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP4_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP4_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRRP4_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:16:10
% EndTime: 2019-03-10 01:16:30
% DurationCPUTime: 15.81s
% Computational Cost: add. (15957->701), mult. (34642->856), div. (0->0), fcn. (25626->14), ass. (0->314)
t798 = cos(qJ(2));
t801 = -pkin(8) - pkin(7);
t752 = t801 * t798;
t733 = qJD(1) * t752;
t794 = sin(qJ(3));
t715 = t794 * t733;
t795 = sin(qJ(2));
t750 = t801 * t795;
t731 = qJD(1) * t750;
t969 = cos(qJ(3));
t662 = t731 * t969 + t715;
t874 = qJD(3) * t969;
t1010 = -pkin(2) * t874 + t662;
t924 = t794 * t798;
t729 = t795 * t969 + t924;
t787 = qJD(2) + qJD(3);
t667 = t787 * t729;
t882 = t969 * t798;
t894 = qJDD(1) * t795;
t625 = qJD(1) * t667 - qJDD(1) * t882 + t794 * t894;
t624 = qJDD(4) + t625;
t622 = qJDD(5) + t624;
t875 = qJD(1) * t969;
t901 = qJD(1) * t795;
t710 = t794 * t901 - t798 * t875;
t712 = -qJD(1) * t924 - t795 * t875;
t653 = -pkin(3) * t712 + pkin(9) * t710;
t638 = pkin(2) * t901 + t653;
t793 = sin(qJ(4));
t797 = cos(qJ(4));
t1011 = t1010 * t793 - t797 * t638;
t1009 = t1010 * t797 + t793 * t638;
t899 = qJD(4) * t793;
t944 = t710 * t793;
t1008 = t899 + t944;
t674 = t793 * t712 + t787 * t797;
t675 = -t712 * t797 + t787 * t793;
t792 = sin(qJ(5));
t968 = cos(qJ(5));
t609 = -t968 * t674 + t675 * t792;
t838 = t792 * t674 + t675 * t968;
t1007 = t609 * t838;
t943 = t710 * t797;
t861 = -t712 * pkin(4) + pkin(10) * t943;
t774 = pkin(2) * t794 + pkin(9);
t956 = -pkin(10) - t774;
t867 = qJD(4) * t956;
t1006 = -t797 * t867 - t1011 + t861;
t644 = t797 * t653;
t955 = qJD(2) * pkin(2);
t717 = t731 + t955;
t658 = t717 * t969 + t715;
t800 = -pkin(10) - pkin(9);
t884 = qJD(4) * t800;
t1005 = -t658 * t793 - t797 * t884 + t644 + t861;
t892 = pkin(10) * t944;
t1004 = -t793 * t867 + t1009 + t892;
t908 = t793 * t653 + t797 * t658;
t1003 = -t793 * t884 + t892 + t908;
t880 = t968 * t793;
t728 = t792 * t797 + t880;
t975 = qJD(4) + qJD(5);
t665 = t975 * t728;
t999 = t728 * t710 + t665;
t928 = t792 * t793;
t835 = t968 * t797 - t928;
t872 = t968 * qJD(5);
t979 = t968 * qJD(4) + t872;
t998 = t835 * t710 + t797 * t979 - t928 * t975;
t786 = qJDD(2) + qJDD(3);
t841 = -t794 * t795 + t882;
t666 = t787 * t841;
t808 = t666 * qJD(1);
t806 = t729 * qJDD(1) + t808;
t805 = qJD(4) * t674 + t793 * t786 + t806 * t797;
t898 = qJD(4) * t797;
t889 = -t712 * t898 + t787 * t899 + t793 * t806;
t849 = t786 * t797 - t889;
t897 = qJD(5) * t792;
t536 = -t674 * t872 + t675 * t897 - t792 * t849 - t968 * t805;
t705 = qJD(4) + t710;
t696 = qJD(5) + t705;
t523 = t609 * t696 - t536;
t537 = t674 * t897 + t675 * t872 + t792 * t805 - t968 * t849;
t970 = t838 ^ 2;
t1002 = t622 * MDP(29) + (t696 * t838 - t537) * MDP(28) + MDP(25) * t1007 + (-t609 ^ 2 + t970) * MDP(26) + t523 * MDP(27);
t639 = -t787 * pkin(3) - t658;
t606 = -t674 * pkin(4) + t639;
t551 = t609 * pkin(5) - qJ(6) * t838 + t606;
t1001 = t551 * t609;
t1000 = t606 * t609;
t983 = t1008 * pkin(4);
t791 = qJ(2) + qJ(3);
t782 = sin(t791);
t799 = cos(qJ(1));
t935 = t782 * t799;
t796 = sin(qJ(1));
t936 = t782 * t796;
t997 = g(1) * t935 + g(2) * t936;
t996 = t666 * t793 + t729 * t898;
t565 = pkin(5) * t838 + qJ(6) * t609;
t993 = t705 ^ 2;
t718 = t956 * t793;
t785 = t797 * pkin(10);
t940 = t774 * t797;
t719 = t785 + t940;
t837 = t718 * t968 - t792 * t719;
t991 = -qJD(5) * t837 + t1004 * t968 + t1006 * t792;
t652 = t792 * t718 + t719 * t968;
t990 = -qJD(5) * t652 + t1004 * t792 - t1006 * t968;
t957 = t798 * pkin(2);
t778 = pkin(1) + t957;
t981 = -pkin(9) * t729 - t778;
t657 = -pkin(3) * t841 + t981;
t648 = t797 * t657;
t679 = t794 * t750 - t752 * t969;
t941 = t729 * t797;
t586 = -pkin(4) * t841 - pkin(10) * t941 - t679 * t793 + t648;
t672 = t797 * t679;
t906 = t793 * t657 + t672;
t942 = t729 * t793;
t600 = -pkin(10) * t942 + t906;
t989 = t792 * t586 + t968 * t600;
t988 = pkin(5) * t999 - qJ(6) * t998 - qJD(6) * t728 + t983;
t749 = t800 * t793;
t751 = pkin(9) * t797 + t785;
t836 = t749 * t968 - t792 * t751;
t987 = -qJD(5) * t836 + t1003 * t968 + t1005 * t792;
t678 = t792 * t749 + t751 * t968;
t986 = -qJD(5) * t678 + t1003 * t792 - t1005 * t968;
t619 = t622 * qJ(6);
t689 = t696 * qJD(6);
t985 = t619 + t689;
t716 = t969 * t733;
t661 = t794 * t731 - t716;
t900 = qJD(3) * t794;
t984 = -pkin(2) * t900 + t661;
t877 = t729 * t899;
t948 = t666 * t797;
t978 = -t877 + t948;
t977 = t969 * t750 + t794 * t752;
t856 = g(1) * t799 + g(2) * t796;
t784 = cos(t791);
t921 = t797 * t799;
t926 = t793 * t796;
t700 = t784 * t926 + t921;
t922 = t796 * t797;
t925 = t793 * t799;
t702 = -t784 * t925 + t922;
t976 = -g(1) * t702 + g(2) * t700;
t620 = t622 * pkin(5);
t974 = t620 - qJDD(6);
t790 = qJ(4) + qJ(5);
t781 = sin(t790);
t783 = cos(t790);
t932 = t784 * t796;
t685 = t781 * t932 + t783 * t799;
t920 = t799 * t781;
t923 = t796 * t783;
t687 = t784 * t920 - t923;
t895 = qJD(1) * qJD(2);
t870 = t798 * t895;
t671 = qJDD(2) * pkin(2) - t801 * (-t870 - t894);
t871 = t795 * t895;
t893 = qJDD(1) * t798;
t673 = t801 * (-t871 + t893);
t819 = t794 * t671 - t673 * t969 + t717 * t874 + t733 * t900;
t579 = t786 * pkin(9) + t819;
t748 = t778 * qJD(1);
t636 = pkin(3) * t710 + pkin(9) * t712 - t748;
t768 = pkin(2) * t871;
t569 = t625 * pkin(3) - pkin(9) * t808 + qJDD(1) * t981 + t768;
t659 = t794 * t717 - t716;
t640 = pkin(9) * t787 + t659;
t854 = t797 * t569 - t640 * t898;
t516 = t624 * pkin(4) - pkin(10) * t805 - t793 * t579 - t636 * t899 + t854;
t831 = t793 * t569 + t797 * t579 + t636 * t898 - t640 * t899;
t521 = pkin(10) * t849 + t831;
t596 = t797 * t636 - t640 * t793;
t571 = -pkin(10) * t675 + t596;
t562 = pkin(4) * t705 + t571;
t597 = t636 * t793 + t640 * t797;
t572 = pkin(10) * t674 + t597;
t863 = -t968 * t516 + t792 * t521 + t562 * t897 + t572 * t872;
t939 = t781 * t782;
t824 = g(1) * t687 + g(2) * t685 + g(3) * t939 - t863;
t813 = t551 * t838 - t824 - t974;
t973 = -t606 * t838 + t824;
t890 = t795 * t955;
t605 = pkin(3) * t667 - pkin(9) * t666 + t890;
t602 = t797 * t605;
t885 = qJD(2) * t801;
t732 = t795 * t885;
t734 = t798 * t885;
t616 = qJD(3) * t977 + t969 * t732 + t794 * t734;
t527 = -pkin(10) * t948 + pkin(4) * t667 - t616 * t793 + t602 + (-t672 + (pkin(10) * t729 - t657) * t793) * qJD(4);
t830 = t793 * t605 + t797 * t616 + t657 * t898 - t679 * t899;
t533 = -pkin(10) * t996 + t830;
t972 = -qJD(5) * t989 + t527 * t968 - t792 * t533;
t770 = g(3) * t782;
t962 = g(3) * t784;
t961 = g(3) * t793;
t960 = t712 * pkin(5);
t959 = t786 * pkin(3);
t958 = t797 * pkin(4);
t881 = t968 * t572;
t531 = t792 * t562 + t881;
t954 = t531 * t696;
t953 = t624 * t797;
t952 = t639 * t710;
t951 = t837 * t622;
t950 = t652 * t622;
t947 = t675 * t705;
t946 = t836 * t622;
t945 = t678 * t622;
t938 = t781 * t784;
t937 = t782 * t783;
t934 = t782 * t800;
t933 = t783 * t784;
t776 = pkin(3) + t958;
t742 = t784 * t776;
t931 = t784 * t799;
t930 = t784 * t800;
t929 = t792 * t572;
t927 = t793 * t624;
t699 = t712 * qJ(6);
t917 = t699 - t991;
t916 = -t960 - t990;
t915 = -t984 + t988;
t913 = -t659 + t988;
t912 = t699 - t987;
t911 = -t960 - t986;
t905 = t983 - t984;
t539 = t571 * t968 - t929;
t904 = pkin(4) * t872 + qJD(6) - t539;
t788 = t795 ^ 2;
t903 = -t798 ^ 2 + t788;
t530 = t562 * t968 - t929;
t896 = qJD(6) - t530;
t891 = t969 * pkin(2);
t888 = -g(3) * t938 + t781 * t997;
t887 = pkin(5) * t933 + qJ(6) * t938 + t742;
t886 = g(1) * t931 + g(2) * t932 + t770;
t878 = t705 * t899;
t630 = t639 * t899;
t631 = t639 * t898;
t869 = pkin(4) * t793 - t801;
t862 = -t969 * t671 - t794 * t673 + t717 * t900 - t733 * t874;
t580 = t862 - t959;
t868 = -t580 - t962;
t866 = -qJD(4) * t636 - t579;
t864 = t792 * t516 + t968 * t521 + t562 * t872 - t572 * t897;
t777 = -t891 - pkin(3);
t860 = -t659 + t983;
t538 = t792 * t571 + t881;
t859 = pkin(4) * t897 - t538;
t858 = -g(1) * t685 + g(2) * t687;
t686 = t784 * t923 - t920;
t688 = t781 * t796 + t783 * t931;
t857 = g(1) * t686 - g(2) * t688;
t855 = g(1) * t796 - g(2) * t799;
t851 = -g(3) * t933 + t783 * t997;
t850 = t596 * t712 + t797 * t997 + t630;
t637 = pkin(4) * t942 - t977;
t847 = pkin(5) * t783 + qJ(6) * t781 + t776;
t846 = -0.2e1 * pkin(1) * t895 - pkin(7) * qJDD(2);
t845 = t742 + t778 - t934;
t842 = t586 * t968 - t792 * t600;
t617 = t794 * t732 - t734 * t969 + t750 * t900 - t752 * t874;
t829 = t792 * t527 + t968 * t533 + t586 * t872 - t600 * t897;
t654 = -pkin(5) * t835 - t728 * qJ(6) - t776;
t576 = pkin(4) * t996 + t617;
t802 = qJD(2) ^ 2;
t827 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t802 + t855;
t803 = qJD(1) ^ 2;
t826 = pkin(1) * t803 - pkin(7) * qJDD(1) + t856;
t825 = g(1) * t688 + g(2) * t686 + g(3) * t937 - t864;
t550 = -pkin(4) * t849 + t580;
t513 = t537 * pkin(5) + t536 * qJ(6) - qJD(6) * t838 + t550;
t529 = t696 * qJ(6) + t531;
t823 = -t513 * t728 + t529 * t712 - t551 * t998 + t888;
t822 = -t531 * t712 + t550 * t728 + t606 * t998 - t888;
t821 = -t748 * t712 - t862 - t962 + t997;
t818 = t530 * t696 + t825;
t505 = t864 + t985;
t507 = t863 - t974;
t528 = -t696 * pkin(5) + t896;
t817 = t505 * t835 + t507 * t728 + t528 * t998 - t529 * t999 - t886;
t816 = -t513 * t835 - t528 * t712 + t551 * t999 + t851;
t815 = t530 * t712 - t550 * t835 + t606 * t999 + t851;
t812 = -g(1) * (-t687 * pkin(5) + qJ(6) * t688) - g(2) * (-t685 * pkin(5) + qJ(6) * t686) - g(3) * (-pkin(5) * t939 + qJ(6) * t937);
t811 = -t748 * t710 - t819 + t886;
t810 = -t597 * t712 + t639 * t943 + t784 * t961 + t631 + (t580 - t997) * t793;
t804 = t805 * t797;
t807 = (-t536 * t835 - t537 * t728 - t609 * t998 - t838 * t999) * MDP(26) + (-t536 * t728 + t838 * t998) * MDP(25) + (t793 * t849 + t804 - t1008 * t675 + (t898 + t943) * t674) * MDP(19) + (t622 * t728 + t696 * t998 + t712 * t838) * MDP(27) + (-t609 * t712 + t622 * t835 - t696 * t999) * MDP(28) + (t947 * t797 + ((qJD(4) * t787 + t806) * t797 + (qJD(4) * t712 + t786) * t793) * t793) * MDP(18) + (t674 * t712 - t793 * t993 + t953) * MDP(21) + (t675 * t712 + t797 * t993 + t927) * MDP(20) + (t710 * t787 + t806) * MDP(13) + (-t712 * t787 - t625) * MDP(14) + (-t710 ^ 2 + t712 ^ 2) * MDP(12) + t786 * MDP(15) + (-MDP(11) * t710 + MDP(22) * t705 + MDP(29) * t696) * t712;
t775 = -pkin(4) * t968 - pkin(5);
t769 = pkin(4) * t792 + qJ(6);
t747 = t777 - t958;
t707 = -qJDD(1) * t778 + t768;
t703 = t784 * t921 + t926;
t701 = -t784 * t922 + t925;
t646 = t835 * t729;
t645 = t728 * t729;
t642 = -t891 + t654;
t568 = t645 * pkin(5) - t646 * qJ(6) + t637;
t557 = pkin(4) * t675 + t565;
t556 = t666 * t880 - t792 * t877 - t897 * t942 + (t666 * t792 + t729 * t979) * t797;
t555 = t665 * t729 - t666 * t835;
t549 = pkin(5) * t841 - t842;
t548 = -qJ(6) * t841 + t989;
t518 = t556 * pkin(5) + t555 * qJ(6) - t646 * qJD(6) + t576;
t510 = -t667 * pkin(5) - t972;
t509 = qJ(6) * t667 - qJD(6) * t841 + t829;
t1 = [t855 * MDP(2) + t856 * MDP(3) + ((-t679 * t898 + t602) * t705 + t648 * t624 - t854 * t841 + t596 * t667 - t617 * t674 + t977 * t849 + t729 * t631 - g(1) * t701 - g(2) * t703 + ((-qJD(4) * t657 - t616) * t705 - t679 * t624 - t866 * t841 + t580 * t729 + t639 * t666) * t793) * MDP(23) + (-g(1) * t700 - g(2) * t702 + t580 * t941 - t597 * t667 + t617 * t675 - t624 * t906 - t630 * t729 + t639 * t948 - t705 * t830 - t805 * t977 + t831 * t841) * MDP(24) + (-t617 * t787 - t625 * t778 - t667 * t748 - t707 * t841 + t710 * t890 + t784 * t855 + t786 * t977) * MDP(16) + (t505 * t548 + t529 * t509 + t513 * t568 + t551 * t518 + t507 * t549 + t528 * t510 - g(1) * (-pkin(5) * t686 - qJ(6) * t685) - g(2) * (pkin(5) * t688 + qJ(6) * t687) + (-g(1) * t869 - g(2) * t845) * t799 + (g(1) * t845 - g(2) * t869) * t796) * MDP(35) + (qJDD(1) * t788 + 0.2e1 * t795 * t870) * MDP(4) + (-g(1) * t936 + g(2) * t935 - t616 * t787 - t748 * t666 - t679 * t786 + t707 * t729 - t712 * t890 - t778 * t806) * MDP(17) + (t674 * t667 - t705 * t996 - t729 * t927 - t841 * t849) * MDP(21) + (t674 * t978 - t675 * t996 - t805 * t942 + t849 * t941) * MDP(19) + (t795 * t846 + t798 * t827) * MDP(9) + (-t795 * t827 + t798 * t846) * MDP(10) + qJDD(1) * MDP(1) + (-t505 * t645 + t507 * t646 - t509 * t609 + t510 * t838 - t528 * t555 - t529 * t556 - t536 * t549 - t537 * t548 + t782 * t855) * MDP(33) + (t536 * t645 - t537 * t646 + t555 * t609 - t556 * t838) * MDP(26) + (-t536 * t646 - t555 * t838) * MDP(25) + (t507 * t841 - t510 * t696 + t513 * t645 + t518 * t609 - t528 * t667 + t537 * t568 - t549 * t622 + t551 * t556 + t857) * MDP(32) + (-t505 * t841 + t509 * t696 - t513 * t646 - t518 * t838 + t529 * t667 + t536 * t568 + t548 * t622 + t551 * t555 - t858) * MDP(34) + (t536 * t841 - t555 * t696 + t622 * t646 + t667 * t838) * MDP(27) + (t537 * t841 - t556 * t696 - t609 * t667 - t622 * t645) * MDP(28) + (-t622 * t841 + t667 * t696) * MDP(29) + (-t624 * t841 + t667 * t705) * MDP(22) + (-t667 * t787 + t786 * t841) * MDP(14) + (t530 * t667 + t637 * t537 + t550 * t645 + t606 * t556 + t576 * t609 + t842 * t622 + t696 * t972 + t841 * t863 + t857) * MDP(30) + (t624 * t941 + t675 * t667 + t705 * t978 - t805 * t841) * MDP(20) + (-t729 * t625 - t666 * t710 + t712 * t667 + t806 * t841) * MDP(12) + (-t531 * t667 - t637 * t536 + t550 * t646 - t606 * t555 + t576 * t838 - t622 * t989 - t696 * t829 + t841 * t864 + t858) * MDP(31) + (qJDD(2) * t798 - t795 * t802) * MDP(7) + (qJDD(2) * t795 + t798 * t802) * MDP(6) + (t675 * t978 + t729 * t804) * MDP(18) + (-t712 * t666 + t729 * t806) * MDP(11) + 0.2e1 * (t795 * t893 - t895 * t903) * MDP(5) + (t666 * t787 + t729 * t786) * MDP(13); (g(3) * t795 + t798 * t826) * MDP(10) + (-g(3) * t798 + t795 * t826) * MDP(9) + t807 + (t747 * t537 + t905 * t609 + t696 * t990 + t815 + t951) * MDP(30) + (t505 * t652 + t513 * t642 - t507 * t837 - g(3) * (t887 - t934 + t957) + t915 * t551 + t917 * t529 + t916 * t528 + t856 * (pkin(2) * t795 + t782 * t847 + t930)) * MDP(35) + (t662 * t787 + (t712 * t901 - t786 * t794 - t787 * t874) * pkin(2) + t811) * MDP(17) + (t661 * t787 + (-t710 * t901 + t786 * t969 - t787 * t900) * pkin(2) + t821) * MDP(16) + qJDD(2) * MDP(8) + (t537 * t642 + t609 * t915 - t696 * t916 + t816 + t951) * MDP(32) + (t777 * t889 + (-t777 * t786 + t868) * t797 + (-t774 * t624 + t952) * t793 + t984 * t674 + (-t774 * t898 + t1011) * t705 + t850) * MDP(23) + (t536 * t642 + t696 * t917 - t838 * t915 + t823 + t950) * MDP(34) + (t536 * t837 - t537 * t652 - t609 * t917 + t838 * t916 + t817) * MDP(33) + (-t747 * t536 + t696 * t991 + t905 * t838 + t822 - t950) * MDP(31) + MDP(7) * t893 + MDP(6) * t894 + (t1009 * t705 - t624 * t940 - t984 * t675 + t774 * t878 + t777 * t805 + t810) * MDP(24) + (-t795 * t798 * MDP(4) + MDP(5) * t903) * t803; t807 + (-t776 * t537 + t860 * t609 + t696 * t986 + t815 + t946) * MDP(30) + (t537 * t654 + t609 * t913 - t696 * t911 + t816 + t946) * MDP(32) + (t505 * t678 + t513 * t654 - t507 * t836 - g(3) * t887 + t856 * t930 + t913 * t551 + t912 * t529 + t911 * t528 + (g(3) * t800 + t847 * t856) * t782) * MDP(35) + (t658 * t787 + t811) * MDP(17) + (-pkin(3) * t889 - t644 * t705 + t659 * t674 + (-pkin(9) * t624 + t658 * t705 + t952) * t793 + (-qJD(4) * pkin(9) * t705 + t868 + t959) * t797 + t850) * MDP(23) + (t536 * t654 + t696 * t912 - t838 * t913 + t823 + t945) * MDP(34) + (t536 * t836 - t537 * t678 - t609 * t912 + t838 * t911 + t817) * MDP(33) + (t776 * t536 + t696 * t987 + t860 * t838 + t822 - t945) * MDP(31) + (-pkin(3) * t805 - t659 * t675 + t908 * t705 + t810 + (t878 - t953) * pkin(9)) * MDP(24) + (t659 * t787 + t821) * MDP(16); -t675 * t674 * MDP(18) + (-t674 ^ 2 + t675 ^ 2) * MDP(19) + (-t674 * t705 + t805) * MDP(20) + (t849 + t947) * MDP(21) + t624 * MDP(22) + (t597 * t705 - t639 * t675 + (t866 + t770) * t793 + t854 + t976) * MDP(23) + (g(1) * t703 - g(2) * t701 + t596 * t705 - t639 * t674 + t770 * t797 - t831) * MDP(24) + (t538 * t696 + (-t609 * t675 + t622 * t968 - t696 * t897) * pkin(4) + t973) * MDP(30) + (t539 * t696 + t1000 + (-t792 * t622 - t675 * t838 - t696 * t872) * pkin(4) + t825) * MDP(31) + (-t557 * t609 - t622 * t775 - t696 * t859 - t813) * MDP(32) + (-t536 * t775 - t537 * t769 + (t529 + t859) * t838 + (t528 - t904) * t609) * MDP(33) + (t557 * t838 + t622 * t769 + t696 * t904 - t1001 - t825 + t985) * MDP(34) + (t505 * t769 + t507 * t775 - t551 * t557 - t528 * t538 + t904 * t529 + (t528 * t897 + t782 * t961 + t976) * pkin(4) + t812) * MDP(35) + t1002; (t954 + t973) * MDP(30) + (t818 + t1000) * MDP(31) + (-t565 * t609 + t620 - t813 + t954) * MDP(32) + (pkin(5) * t536 - qJ(6) * t537 + (t529 - t531) * t838 + (t528 - t896) * t609) * MDP(33) + (t565 * t838 - t1001 + 0.2e1 * t619 + 0.2e1 * t689 - t818) * MDP(34) + (-t507 * pkin(5) + t505 * qJ(6) - t528 * t531 + t529 * t896 - t551 * t565 + t812) * MDP(35) + t1002; t523 * MDP(33) + (-t696 ^ 2 - t970) * MDP(34) + (-t529 * t696 + t813) * MDP(35) + (t1007 - t622) * MDP(32);];
tau  = t1;
