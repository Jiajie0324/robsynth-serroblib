% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRRP4_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP4_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP4_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP4_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:15:41
% EndTime: 2019-03-10 01:15:58
% DurationCPUTime: 6.51s
% Computational Cost: add. (13149->483), mult. (31007->623), div. (0->0), fcn. (22740->8), ass. (0->262)
t250 = cos(qJ(2));
t372 = -pkin(8) - pkin(7);
t223 = t372 * t250;
t213 = qJD(1) * t223;
t247 = sin(qJ(3));
t197 = t247 * t213;
t248 = sin(qJ(2));
t221 = t372 * t248;
t211 = qJD(1) * t221;
t370 = cos(qJ(3));
t156 = t370 * t211 + t197;
t300 = qJD(3) * t370;
t405 = -pkin(2) * t300 + t156;
t301 = qJD(1) * t370;
t321 = qJD(1) * t248;
t192 = t247 * t321 - t250 * t301;
t335 = t247 * t250;
t194 = -qJD(1) * t335 - t248 * t301;
t148 = -pkin(3) * t194 + pkin(9) * t192;
t129 = pkin(2) * t321 + t148;
t246 = sin(qJ(4));
t249 = cos(qJ(4));
t404 = -t249 * t129 + t405 * t246;
t403 = t246 * t129 + t405 * t249;
t234 = pkin(2) * t247 + pkin(9);
t366 = -pkin(10) - t234;
t296 = qJD(4) * t366;
t343 = t192 * t246;
t315 = pkin(10) * t343;
t402 = -t246 * t296 + t315 + t403;
t342 = t192 * t249;
t288 = -t194 * pkin(4) + pkin(10) * t342;
t401 = t249 * t296 - t288 + t404;
t371 = -pkin(10) - pkin(9);
t309 = qJD(4) * t371;
t359 = qJD(2) * pkin(2);
t199 = t211 + t359;
t153 = t370 * t199 + t197;
t326 = t246 * t148 + t249 * t153;
t400 = -t246 * t309 + t315 + t326;
t292 = t249 * t148 - t153 * t246;
t399 = t249 * t309 - t288 - t292;
t245 = sin(qJ(5));
t369 = cos(qJ(5));
t307 = t369 * t246;
t208 = t245 * t249 + t307;
t377 = qJD(4) + qJD(5);
t159 = t377 * t208;
t395 = t208 * t192 + t159;
t306 = t369 * t249;
t338 = t245 * t246;
t271 = t306 - t338;
t298 = t369 * qJD(5);
t380 = t369 * qJD(4) + t298;
t394 = t271 * t192 + t380 * t249 - t377 * t338;
t209 = t370 * t248 + t335;
t242 = qJD(2) + qJD(3);
t161 = t242 * t209;
t398 = t161 * qJD(1);
t165 = t246 * t194 + t249 * t242;
t166 = -t194 * t249 + t242 * t246;
t104 = -t369 * t165 + t166 * t245;
t130 = -t242 * pkin(3) - t153;
t101 = -t165 * pkin(4) + t130;
t274 = t245 * t165 + t369 * t166;
t45 = t104 * pkin(5) - qJ(6) * t274 + t101;
t397 = t104 * t45;
t396 = t101 * t104;
t352 = t274 * t104;
t319 = qJD(4) * t246;
t382 = (t319 + t343) * pkin(4);
t318 = qJD(4) * t249;
t275 = -t247 * t248 + t370 * t250;
t260 = t275 * qJD(3);
t160 = qJD(2) * t275 + t260;
t336 = t246 * t160;
t393 = t209 * t318 + t336;
t373 = t274 ^ 2;
t392 = -t104 ^ 2 + t373;
t188 = qJD(4) + t192;
t181 = qJD(5) + t188;
t256 = t160 * qJD(1);
t255 = t249 * t256;
t254 = qJD(4) * t165 + t255;
t311 = t194 * t318 - t242 * t319 - t246 * t256;
t317 = qJD(5) * t245;
t41 = -t165 * t298 + t166 * t317 - t245 * t311 - t369 * t254;
t24 = t104 * t181 - t41;
t60 = pkin(5) * t274 + qJ(6) * t104;
t391 = t188 ^ 2;
t316 = qJD(1) * qJD(2);
t390 = -0.2e1 * t316;
t388 = -t395 * pkin(5) + t394 * qJ(6) + qJD(6) * t208 - t382;
t202 = t366 * t246;
t241 = t249 * pkin(10);
t203 = t234 * t249 + t241;
t273 = t369 * t202 - t245 * t203;
t387 = -t273 * qJD(5) - t401 * t245 + t402 * t369;
t147 = t245 * t202 + t369 * t203;
t386 = -t147 * qJD(5) + t402 * t245 + t401 * t369;
t220 = t371 * t246;
t222 = pkin(9) * t249 + t241;
t272 = t369 * t220 - t245 * t222;
t385 = -t272 * qJD(5) - t399 * t245 + t400 * t369;
t169 = t245 * t220 + t369 * t222;
t384 = -t169 * qJD(5) + t400 * t245 + t399 * t369;
t198 = t370 * t213;
t155 = t247 * t211 - t198;
t320 = qJD(3) * t247;
t383 = -pkin(2) * t320 + t155;
t381 = -t166 * t319 + t254 * t249;
t334 = t249 * t398;
t379 = t188 * t319 - t334;
t378 = t370 * t221 + t247 * t223;
t143 = t398 * pkin(5);
t238 = -pkin(2) * t250 - pkin(1);
t219 = t238 * qJD(1);
t127 = pkin(3) * t192 + pkin(9) * t194 + t219;
t154 = t247 * t199 - t198;
t131 = pkin(9) * t242 + t154;
t90 = t398 * pkin(3) + (-pkin(9) * t260 + (t248 * pkin(2) - pkin(9) * t275) * qJD(2)) * qJD(1);
t87 = t249 * t90;
t286 = -t131 * t318 + t87;
t310 = qJD(2) * t372;
t290 = qJD(1) * t310;
t200 = t248 * t290;
t201 = t250 * t290;
t93 = t199 * t300 + t370 * t200 + t247 * t201 + t213 * t320;
t356 = t246 * t93;
t15 = pkin(4) * t398 - pkin(10) * t254 - t127 * t319 + t286 - t356;
t269 = t127 * t318 - t131 * t319 + t246 * t90 + t249 * t93;
t18 = pkin(10) * t311 + t269;
t83 = t249 * t127 - t131 * t246;
t65 = -pkin(10) * t166 + t83;
t59 = pkin(4) * t188 + t65;
t84 = t246 * t127 + t249 * t131;
t66 = pkin(10) * t165 + t84;
t294 = -t369 * t15 + t245 * t18 + t66 * t298 + t59 * t317;
t4 = -t143 + t294;
t262 = t274 * t45 + t4;
t42 = t165 * t317 + t166 * t298 + t245 * t254 - t369 * t311;
t376 = t181 * t274 - t42;
t375 = -t101 * t274 - t294;
t212 = t248 * t310;
t214 = t250 * t310;
t111 = t378 * qJD(3) + t370 * t212 + t247 * t214;
t152 = -pkin(3) * t275 - pkin(9) * t209 + t238;
t170 = t247 * t221 - t370 * t223;
t164 = t249 * t170;
t349 = t160 * t249;
t313 = t248 * t359;
t100 = pkin(3) * t161 - pkin(9) * t160 + t313;
t96 = t249 * t100;
t23 = -pkin(10) * t349 + pkin(4) * t161 - t111 * t246 + t96 + (-t164 + (pkin(10) * t209 - t152) * t246) * qJD(4);
t141 = t249 * t152;
t339 = t209 * t249;
t76 = -pkin(4) * t275 - pkin(10) * t339 - t170 * t246 + t141;
t324 = t246 * t152 + t164;
t340 = t209 * t246;
t89 = -pkin(10) * t340 + t324;
t277 = t245 * t76 + t369 * t89;
t266 = t246 * t100 + t249 * t111 + t152 * t318 - t170 * t319;
t30 = -pkin(10) * t393 + t266;
t374 = -qJD(5) * t277 + t369 * t23 - t245 * t30;
t368 = t194 * pkin(5);
t367 = t249 * pkin(4);
t186 = t194 * qJ(6);
t365 = -t186 + t387;
t364 = t368 + t386;
t363 = t154 + t388;
t362 = t383 + t388;
t312 = t369 * t66;
t28 = t245 * t59 + t312;
t358 = t181 * t28;
t357 = t245 * t66;
t355 = t186 - t385;
t354 = -t368 - t384;
t32 = t369 * t65 - t357;
t353 = pkin(4) * t298 + qJD(6) - t32;
t351 = t273 * t398;
t350 = t147 * t398;
t348 = t166 * t249;
t347 = t272 * t398;
t346 = t169 * t398;
t345 = t181 * t194;
t344 = t188 * t194;
t341 = t194 * t192;
t337 = t246 * t398;
t333 = t249 * t165;
t252 = qJD(1) ^ 2;
t332 = t250 * t252;
t251 = qJD(2) ^ 2;
t331 = t251 * t248;
t330 = t251 * t250;
t27 = t369 * t59 - t357;
t329 = qJD(6) - t27;
t323 = t382 - t383;
t322 = t248 ^ 2 - t250 ^ 2;
t314 = t370 * pkin(2);
t237 = -pkin(3) - t367;
t304 = t209 * t319;
t121 = t130 * t319;
t122 = t130 * t318;
t297 = t248 * t316;
t295 = -t245 * t15 - t369 * t18 - t59 * t298 + t66 * t317;
t293 = pkin(1) * t390;
t94 = t199 * t320 + t247 * t200 - t370 * t201 - t213 * t300;
t236 = -t314 - pkin(3);
t31 = t245 * t65 + t312;
t289 = pkin(4) * t317 - t31;
t287 = -t154 + t382;
t139 = t398 * qJ(6);
t174 = t181 * qJD(6);
t2 = t139 + t174 - t295;
t128 = pkin(4) * t340 - t378;
t283 = t83 * t194 - t94 * t249 + t121;
t282 = t181 * t27 + t295;
t279 = -t245 * t89 + t369 * t76;
t276 = t245 * t23 + t76 * t298 + t369 * t30 - t317 * t89;
t53 = -pkin(4) * t311 + t94;
t10 = t42 * pkin(5) + t41 * qJ(6) - qJD(6) * t274 + t53;
t25 = -t181 * pkin(5) + t329;
t268 = -t10 * t271 - t194 * t25 + t395 * t45;
t26 = t181 * qJ(6) + t28;
t267 = -t10 * t208 + t194 * t26 - t394 * t45;
t265 = t194 * t219 - t94;
t112 = t247 * t212 - t370 * t214 + t221 * t320 - t223 * t300;
t264 = t101 * t395 + t27 * t194 - t53 * t271;
t263 = t101 * t394 - t28 * t194 + t53 * t208;
t149 = -pkin(5) * t271 - t208 * qJ(6) + t237;
t261 = t130 * t342 - t84 * t194 + t94 * t246 + t122;
t259 = t2 * t271 + t4 * t208 + t394 * t25 - t26 * t395;
t70 = pkin(4) * t393 + t112;
t258 = t219 * t192 - t93;
t235 = -t369 * pkin(4) - pkin(5);
t231 = pkin(4) * t245 + qJ(6);
t218 = t236 - t367;
t138 = t271 * t209;
t137 = t208 * t209;
t134 = -t314 + t149;
t118 = -t192 ^ 2 + t194 ^ 2;
t117 = t398 * t275;
t114 = -t194 * t242 - t398;
t113 = t192 * t242 + t256;
t63 = t137 * pkin(5) - t138 * qJ(6) + t128;
t58 = t166 * t194 + t391 * t249 + t337;
t57 = t165 * t194 - t391 * t246 + t334;
t51 = t166 * t342 + (t246 * t165 + t348) * qJD(4) + t246 * t255;
t50 = pkin(4) * t166 + t60;
t49 = t160 * t307 - t245 * t304 - t317 * t340 + (t160 * t245 + t380 * t209) * t249;
t48 = t159 * t209 - t160 * t306 + t245 * t336;
t44 = pkin(5) * t275 - t279;
t43 = -qJ(6) * t275 + t277;
t36 = -t104 * t194 - t181 * t395 + t271 * t398;
t35 = t181 * t394 + t194 * t274 + t208 * t398;
t21 = t165 * t318 - t166 * t343 + t192 * t333 + t246 * t311 + t381;
t12 = -t208 * t41 + t274 * t394;
t11 = t49 * pkin(5) + t48 * qJ(6) - t138 * qJD(6) + t70;
t7 = -t161 * pkin(5) - t374;
t6 = qJ(6) * t161 - qJD(6) * t275 + t276;
t5 = -t104 * t394 - t208 * t42 - t271 * t41 - t274 * t395;
t1 = [0, 0, 0, 0.2e1 * t250 * t297, t322 * t390, t330, -t331, 0, -pkin(7) * t330 + t248 * t293, pkin(7) * t331 + t250 * t293, -t194 * t160 + t209 * t256, -t160 * t192 + t194 * t161 - t209 * t398 + t256 * t275, t160 * t242, -t161 * t242, 0, -t112 * t242 + t398 * t238 + t161 * t219 + (-qJD(1) * t275 + t192) * t313, pkin(2) * t209 * t297 - t111 * t242 + t219 * t160 - t194 * t313 + t238 * t256, t160 * t348 + t381 * t209, t160 * t333 - t165 * t304 - t166 * t393 - t254 * t340 + t311 * t339, t166 * t161 - t275 * t254 + t209 * t334 + (-t304 + t349) * t188, t165 * t161 - t188 * t393 - t209 * t337 - t275 * t311, t161 * t188 - t117 (-t170 * t318 + t96) * t188 + t141 * t398 - t286 * t275 + t83 * t161 - t112 * t165 + t378 * t311 + t209 * t122 + ((-qJD(4) * t152 - t111) * t188 - t170 * t398 - (-qJD(4) * t127 - t93) * t275 + t94 * t209 + t130 * t160) * t246, t112 * t166 - t121 * t209 + t130 * t349 - t84 * t161 - t188 * t266 - t254 * t378 + t269 * t275 - t324 * t398 + t94 * t339, -t138 * t41 - t274 * t48, t104 * t48 + t137 * t41 - t138 * t42 - t274 * t49, t138 * t398 + t161 * t274 - t181 * t48 + t275 * t41, -t104 * t161 - t137 * t398 - t181 * t49 + t275 * t42, t161 * t181 - t117, t101 * t49 + t70 * t104 + t128 * t42 + t53 * t137 + t27 * t161 + t374 * t181 + t275 * t294 + t279 * t398, -t101 * t48 - t128 * t41 + t53 * t138 - t28 * t161 - t276 * t181 + t274 * t70 - t275 * t295 - t277 * t398, t10 * t137 + t104 * t11 - t161 * t25 - t181 * t7 + t275 * t4 - t398 * t44 + t42 * t63 + t45 * t49, -t104 * t6 - t137 * t2 + t138 * t4 - t25 * t48 - t26 * t49 + t274 * t7 - t41 * t44 - t42 * t43, -t10 * t138 - t11 * t274 + t161 * t26 + t181 * t6 - t2 * t275 + t398 * t43 + t41 * t63 + t45 * t48, t10 * t63 + t11 * t45 + t2 * t43 + t25 * t7 + t26 * t6 + t4 * t44; 0, 0, 0, -t248 * t332, t322 * t252, 0, 0, 0, t252 * pkin(1) * t248, pkin(1) * t332, -t341, t118, t113, t114, 0, t155 * t242 + (-t192 * t321 - t242 * t320) * pkin(2) + t265, t156 * t242 + (t194 * t321 - t242 * t300) * pkin(2) + t258, t51, t21, t58, t57, t344, -t236 * t311 + (t130 * t192 - t234 * t398) * t246 + t383 * t165 + (-t234 * t318 + t404) * t188 + t283, -t383 * t166 + t403 * t188 + t379 * t234 + t236 * t254 + t261, t12, t5, t35, t36, t345, t323 * t104 + t386 * t181 + t218 * t42 + t264 + t351, t387 * t181 - t218 * t41 + t323 * t274 + t263 - t350, -t362 * t104 + t134 * t42 + t364 * t181 + t268 + t351, t365 * t104 - t147 * t42 + t273 * t41 - t274 * t364 + t259, t134 * t41 - t365 * t181 + t274 * t362 + t267 + t350, t10 * t134 + t147 * t2 - t364 * t25 - t365 * t26 - t273 * t4 - t362 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, t118, t113, t114, 0, t154 * t242 + t265, t153 * t242 + t258, t51, t21, t58, t57, t344, pkin(3) * t311 - t292 * t188 + t154 * t165 + t130 * t343 + (-t188 * t318 - t337) * pkin(9) + t283, -pkin(3) * t254 + t379 * pkin(9) - t154 * t166 + t188 * t326 + t261, t12, t5, t35, t36, t345, t287 * t104 + t384 * t181 + t237 * t42 + t264 + t347, t385 * t181 - t237 * t41 + t287 * t274 + t263 - t346, -t363 * t104 + t149 * t42 - t354 * t181 + t268 + t347, -t355 * t104 - t169 * t42 + t272 * t41 + t274 * t354 + t259, t149 * t41 + t355 * t181 + t274 * t363 + t267 + t346, t10 * t149 + t169 * t2 + t354 * t25 + t355 * t26 - t272 * t4 - t363 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166 * t165, -t165 ^ 2 + t166 ^ 2, -t165 * t188 + t254, t166 * t188 + t311, t398, -t130 * t166 - t356 + t87 + (-qJD(4) + t188) * t84, -t130 * t165 + t188 * t83 - t269, t352, t392, t24, t376, t398, t31 * t181 + (-t104 * t166 - t181 * t317 + t369 * t398) * pkin(4) + t375, t396 + t32 * t181 + (-t166 * t274 - t181 * t298 - t245 * t398) * pkin(4) + t295, -t104 * t50 - t181 * t289 - t235 * t398 - t262, -t231 * t42 - t235 * t41 + (t26 + t289) * t274 + (-t353 + t25) * t104, t353 * t181 + t231 * t398 + t274 * t50 + t2 - t397, t2 * t231 + t235 * t4 + t289 * t25 + t353 * t26 - t45 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t352, t392, t24, t376, t398, t358 + t375, t282 + t396, -t104 * t60 + t143 - t262 + t358, pkin(5) * t41 - qJ(6) * t42 + (t26 - t28) * t274 + (t25 - t329) * t104, t274 * t60 + 0.2e1 * t139 + 0.2e1 * t174 - t282 - t397, -pkin(5) * t4 + qJ(6) * t2 - t25 * t28 + t26 * t329 - t45 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t398 + t352, t24, -t181 ^ 2 - t373, -t181 * t26 + t262;];
tauc_reg  = t1;
