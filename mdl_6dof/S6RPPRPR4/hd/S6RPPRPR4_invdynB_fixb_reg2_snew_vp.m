% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:16:02
% EndTime: 2019-05-05 14:16:18
% DurationCPUTime: 13.95s
% Computational Cost: add. (55967->660), mult. (113216->969), div. (0->0), fcn. (66621->10), ass. (0->424)
t640 = sin(pkin(10));
t642 = cos(pkin(10));
t650 = cos(qJ(4));
t647 = sin(qJ(4));
t688 = qJD(1) * t647;
t592 = -t642 * t650 * qJD(1) + t640 * t688;
t593 = (-t640 * t650 - t642 * t647) * qJD(1);
t698 = t592 * t593;
t723 = qJDD(4) + t698;
t728 = t640 * t723;
t727 = t642 * t723;
t643 = cos(pkin(9));
t653 = qJD(1) ^ 2;
t641 = sin(pkin(9));
t679 = t641 * qJDD(1);
t606 = t643 * t653 - t679;
t607 = qJDD(1) * t643 + t641 * t653;
t648 = sin(qJ(1));
t651 = cos(qJ(1));
t545 = t651 * t606 + t607 * t648;
t638 = g(3) + qJDD(3);
t575 = qJ(3) * t607 + t638 * t641;
t663 = qJ(3) * t606 + t638 * t643;
t726 = -pkin(6) * t545 + t575 * t648 + t651 * t663;
t646 = sin(qJ(6));
t649 = cos(qJ(6));
t557 = -t649 * qJD(4) + t593 * t646;
t559 = qJD(4) * t646 + t593 * t649;
t506 = t559 * t557;
t682 = qJD(1) * qJD(4);
t672 = t650 * t682;
t681 = qJDD(1) * t647;
t603 = -t672 - t681;
t673 = t647 * t682;
t680 = qJDD(1) * t650;
t605 = t673 - t680;
t669 = t603 * t640 - t642 * t605;
t664 = qJDD(6) + t669;
t718 = -t506 + t664;
t725 = t646 * t718;
t724 = t649 * t718;
t686 = qJD(4) * t593;
t507 = t669 + t686;
t668 = -t606 * t648 + t651 * t607;
t721 = -pkin(6) * t668 + t575 * t651 - t648 * t663;
t635 = qJDD(1) * qJ(2);
t616 = g(1) * t651 + g(2) * t648;
t662 = 0.2e1 * qJD(2) * qJD(1) - t616;
t659 = t635 + t662;
t715 = pkin(1) + pkin(2);
t571 = -t653 * t715 + t659;
t615 = g(1) * t648 - g(2) * t651;
t661 = -qJDD(2) + t615;
t656 = -qJ(2) * t653 - t661;
t655 = -qJDD(1) * t715 + t656;
t503 = t571 * t641 - t643 * t655;
t504 = t643 * t571 + t641 * t655;
t452 = t503 * t643 - t504 * t641;
t453 = t503 * t641 + t504 * t643;
t384 = t452 * t651 + t453 * t648;
t720 = t452 * t648 - t453 * t651;
t543 = t603 * t642 + t605 * t640;
t484 = -t557 * qJD(6) + t646 * qJDD(4) + t649 * t543;
t585 = -qJD(6) + t592;
t524 = t557 * t585;
t447 = t524 + t484;
t670 = -t649 * qJDD(4) + t543 * t646;
t444 = (qJD(6) + t585) * t559 + t670;
t555 = t557 ^ 2;
t556 = t559 ^ 2;
t584 = t585 ^ 2;
t590 = t592 ^ 2;
t591 = t593 ^ 2;
t716 = 2 * qJD(5);
t714 = pkin(5) * t640;
t713 = qJDD(1) * pkin(1);
t658 = -pkin(3) * t653 - qJDD(1) * pkin(7) + t504;
t486 = t647 * t638 + t650 * t658;
t637 = t650 ^ 2;
t633 = t637 * t653;
t660 = qJD(4) * pkin(4) + qJ(5) * t688;
t463 = -pkin(4) * t633 + t605 * qJ(5) - qJD(4) * t660 + t486;
t657 = t647 * t658;
t690 = t647 * t653;
t654 = -t657 - t603 * qJ(5) + qJDD(4) * pkin(4) + (pkin(4) * t690 - qJ(5) * t682 + t638) * t650;
t671 = t463 * t640 - t642 * t654;
t386 = t593 * t716 + t671;
t387 = t642 * t463 + t592 * t716 + t640 * t654;
t338 = -t386 * t642 + t387 * t640;
t712 = t338 * t647;
t711 = t338 * t650;
t533 = -pkin(5) * t592 - pkin(8) * t593;
t652 = qJD(4) ^ 2;
t361 = -qJDD(4) * pkin(5) - t652 * pkin(8) - (-(2 * qJD(5)) - t533) * t593 + t671;
t710 = t361 * t646;
t709 = t361 * t649;
t501 = qJDD(1) * pkin(3) - t653 * pkin(7) + t503;
t473 = -t605 * pkin(4) - qJ(5) * t633 - t660 * t688 + qJDD(5) + t501;
t708 = t473 * t640;
t707 = t473 * t642;
t477 = t506 + t664;
t706 = t477 * t646;
t705 = t477 * t649;
t704 = t501 * t647;
t703 = t501 * t650;
t536 = qJDD(4) - t698;
t702 = t536 * t640;
t701 = t536 * t642;
t700 = t585 * t646;
t699 = t585 * t649;
t622 = t650 * t690;
t613 = qJDD(4) + t622;
t695 = t613 * t647;
t694 = t613 * t650;
t614 = qJDD(4) - t622;
t693 = t614 * t647;
t692 = t614 * t650;
t636 = t647 ^ 2;
t691 = t636 * t653;
t362 = -pkin(5) * t652 + qJDD(4) * pkin(8) + t533 * t592 + t387;
t687 = qJD(4) * t592;
t667 = -t543 - t687;
t398 = pkin(5) * t507 + t667 * pkin(8) + t473;
t332 = t649 * t362 + t646 * t398;
t689 = -t636 - t637;
t685 = qJD(4) * t640;
t684 = qJD(4) * t642;
t678 = t640 * t506;
t677 = t642 * t506;
t676 = t641 * t698;
t675 = t643 * t698;
t674 = -pkin(5) * t642 - pkin(4);
t331 = t362 * t646 - t649 * t398;
t339 = t386 * t640 + t642 * t387;
t581 = -pkin(1) * t653 + t659;
t587 = -t656 + t713;
t521 = t651 * t581 - t587 * t648;
t554 = -t615 * t648 - t651 * t616;
t666 = t641 * t622;
t665 = t643 * t622;
t609 = qJDD(1) * t648 + t651 * t653;
t589 = -pkin(6) * t609 + g(3) * t651;
t610 = qJDD(1) * t651 - t648 * t653;
t588 = pkin(6) * t610 + g(3) * t648;
t295 = -t331 * t649 + t332 * t646;
t296 = t331 * t646 + t332 * t649;
t485 = -t650 * t638 + t657;
t424 = t485 * t650 - t486 * t647;
t425 = t485 * t647 + t486 * t650;
t520 = t581 * t648 + t587 * t651;
t553 = t615 * t651 - t616 * t648;
t509 = -t669 + t686;
t628 = t643 * qJDD(4);
t626 = t641 * qJDD(4);
t621 = -t633 - t652;
t620 = t633 - t652;
t619 = -t652 - t691;
t618 = t652 - t691;
t612 = t633 - t691;
t611 = t633 + t691;
t608 = t689 * qJDD(1);
t604 = 0.2e1 * t673 - t680;
t602 = 0.2e1 * t672 + t681;
t600 = t689 * t682;
t580 = -t591 - t652;
t579 = -t591 + t652;
t578 = t590 - t652;
t573 = t603 * t650 + t636 * t682;
t572 = -t605 * t647 + t637 * t682;
t569 = t600 * t643 + t626;
t568 = -t600 * t641 + t628;
t565 = -t619 * t647 - t692;
t564 = -t618 * t647 + t694;
t563 = t621 * t650 - t695;
t562 = t620 * t650 - t693;
t561 = t619 * t650 - t693;
t560 = t621 * t647 + t694;
t550 = t608 * t643 - t611 * t641;
t549 = t608 * t641 + t611 * t643;
t544 = t602 * t647 + t604 * t650;
t539 = -t591 + t590;
t534 = -t652 - t590;
t532 = t573 * t643 - t666;
t531 = t572 * t643 + t666;
t530 = -t573 * t641 - t665;
t529 = -t572 * t641 + t665;
t528 = t564 * t643 - t647 * t679;
t527 = t562 * t643 - t650 * t679;
t526 = -t564 * t641 - t643 * t681;
t525 = -t562 * t641 - t643 * t680;
t523 = (t592 * t642 + t593 * t640) * qJD(4);
t522 = (t592 * t640 - t593 * t642) * qJD(4);
t519 = t565 * t643 - t602 * t641;
t518 = t563 * t643 - t604 * t641;
t517 = t565 * t641 + t602 * t643;
t516 = t563 * t641 + t604 * t643;
t515 = -t556 + t584;
t514 = t555 - t584;
t513 = t544 * t643 - t612 * t641;
t512 = -t544 * t641 - t612 * t643;
t511 = -t543 + t687;
t505 = -t590 - t591;
t502 = -t556 + t555;
t500 = t543 * t642 - t593 * t685;
t499 = t543 * t640 + t593 * t684;
t498 = -t592 * t684 + t640 * t669;
t497 = -t592 * t685 - t642 * t669;
t495 = -t556 - t584;
t494 = -t580 * t640 - t701;
t493 = -t579 * t640 + t727;
t492 = t578 * t642 - t702;
t491 = t580 * t642 - t702;
t490 = t579 * t642 + t728;
t489 = t578 * t640 + t701;
t488 = t549 * t648 + t550 * t651;
t487 = -t549 * t651 + t550 * t648;
t483 = -qJD(6) * t559 - t670;
t482 = -t584 - t555;
t481 = t555 + t556;
t480 = t534 * t642 - t728;
t479 = t534 * t640 + t727;
t475 = -pkin(7) * t561 + t703;
t474 = -pkin(7) * t560 + t704;
t472 = (t557 * t649 - t559 * t646) * t585;
t471 = (-t557 * t646 - t559 * t649) * t585;
t470 = -pkin(3) * t561 + t486;
t469 = -pkin(3) * t560 + t485;
t468 = -t522 * t647 + t523 * t650;
t467 = t517 * t648 + t519 * t651;
t466 = t516 * t648 + t518 * t651;
t465 = -t517 * t651 + t519 * t648;
t464 = -t516 * t651 + t518 * t648;
t459 = t468 * t643 + t626;
t458 = -t468 * t641 + t628;
t457 = -t507 * t642 + t640 * t667;
t456 = t509 * t642 - t511 * t640;
t455 = -t507 * t640 - t642 * t667;
t454 = t509 * t640 + t511 * t642;
t448 = t524 - t484;
t445 = (-qJD(6) + t585) * t559 - t670;
t443 = qJ(2) * t638 + qJ(3) * t452;
t442 = t484 * t649 + t559 * t700;
t441 = -t484 * t646 + t559 * t699;
t440 = -t483 * t646 - t557 * t699;
t439 = -t483 * t649 + t557 * t700;
t438 = -qJ(3) * t453 + t638 * t715;
t437 = -t499 * t647 + t500 * t650;
t436 = -t497 * t647 + t498 * t650;
t435 = -t491 * t647 + t494 * t650;
t434 = -t490 * t647 + t493 * t650;
t433 = -t489 * t647 + t492 * t650;
t432 = t491 * t650 + t494 * t647;
t431 = t472 * t642 + t640 * t664;
t430 = t472 * t640 - t642 * t664;
t429 = t514 * t649 - t706;
t428 = -t515 * t646 + t724;
t427 = -t514 * t646 - t705;
t426 = -t515 * t649 - t725;
t422 = -t495 * t646 - t705;
t421 = t495 * t649 - t706;
t420 = t482 * t649 - t725;
t419 = t482 * t646 + t724;
t418 = -qJ(5) * t491 + t707;
t417 = t437 * t643 - t676;
t416 = t436 * t643 + t676;
t415 = -t437 * t641 - t675;
t414 = -t436 * t641 + t675;
t413 = -t479 * t647 + t480 * t650;
t412 = t479 * t650 + t480 * t647;
t411 = t442 * t642 + t678;
t410 = t440 * t642 - t678;
t409 = t442 * t640 - t677;
t408 = t440 * t640 + t677;
t407 = -qJ(3) * t549 + t424 * t643;
t406 = -qJ(3) * t550 - t424 * t641;
t405 = -qJ(5) * t479 + t708;
t404 = t435 * t643 - t641 * t667;
t403 = t434 * t643 - t511 * t641;
t402 = t433 * t643 + t509 * t641;
t401 = t435 * t641 + t643 * t667;
t400 = -t434 * t641 - t511 * t643;
t399 = -t433 * t641 + t509 * t643;
t395 = t425 * t643 + t501 * t641;
t394 = t425 * t641 - t501 * t643;
t393 = pkin(4) * t667 + qJ(5) * t494 + t708;
t392 = -t455 * t647 + t457 * t650;
t391 = -t454 * t647 + t456 * t650;
t390 = t454 * t650 + t456 * t647;
t389 = t413 * t643 + t507 * t641;
t388 = t413 * t641 - t507 * t643;
t382 = -t444 * t649 - t448 * t646;
t381 = t445 * t649 - t447 * t646;
t380 = -t444 * t646 + t448 * t649;
t379 = -t445 * t646 - t447 * t649;
t378 = -pkin(4) * t507 + qJ(5) * t480 - t707;
t377 = t429 * t642 - t444 * t640;
t376 = t428 * t642 - t448 * t640;
t375 = t429 * t640 + t444 * t642;
t374 = t428 * t640 + t448 * t642;
t373 = qJ(2) * t561 - qJ(3) * t517 - t470 * t641 + t475 * t643;
t372 = qJ(2) * t560 - qJ(3) * t516 - t469 * t641 + t474 * t643;
t371 = t392 * t643 - t539 * t641;
t370 = -t392 * t641 - t539 * t643;
t369 = t422 * t642 + t447 * t640;
t368 = t422 * t640 - t447 * t642;
t367 = -t430 * t647 + t431 * t650;
t366 = t420 * t642 - t445 * t640;
t365 = t420 * t640 + t445 * t642;
t364 = t391 * t643 + t505 * t641;
t363 = t391 * t641 - t505 * t643;
t359 = -qJ(3) * t519 - t470 * t643 - t475 * t641 + t561 * t715;
t358 = -qJ(3) * t518 - t469 * t643 - t474 * t641 + t560 * t715;
t357 = t381 * t642 - t502 * t640;
t356 = t381 * t640 + t502 * t642;
t355 = t382 * t642 - t481 * t640;
t354 = t382 * t640 + t481 * t642;
t353 = -pkin(3) * t390 - pkin(4) * t454;
t352 = -t409 * t647 + t411 * t650;
t351 = -t408 * t647 + t410 * t650;
t350 = t367 * t643 - t471 * t641;
t349 = -t367 * t641 - t471 * t643;
t348 = t401 * t648 + t404 * t651;
t347 = -t401 * t651 + t404 * t648;
t346 = t394 * t648 + t395 * t651;
t345 = -t394 * t651 + t395 * t648;
t344 = -pkin(3) * t432 - pkin(4) * t491 + t387;
t343 = -pkin(8) * t421 + t709;
t342 = -pkin(8) * t419 + t710;
t341 = t388 * t648 + t389 * t651;
t340 = -t388 * t651 + t389 * t648;
t337 = -pkin(3) * t412 - pkin(4) * t479 + t386;
t336 = t352 * t643 - t441 * t641;
t335 = t351 * t643 - t439 * t641;
t334 = -t352 * t641 - t441 * t643;
t333 = -t351 * t641 - t439 * t643;
t330 = -t375 * t647 + t377 * t650;
t329 = -t374 * t647 + t376 * t650;
t328 = -pkin(7) * t432 - t393 * t647 + t418 * t650;
t327 = -t368 * t647 + t369 * t650;
t326 = t368 * t650 + t369 * t647;
t325 = -pkin(4) * t473 + qJ(5) * t339;
t324 = -t365 * t647 + t366 * t650;
t323 = t365 * t650 + t366 * t647;
t322 = -qJ(5) * t454 - t338;
t321 = t363 * t648 + t364 * t651;
t320 = -t363 * t651 + t364 * t648;
t319 = -pkin(7) * t412 - t378 * t647 + t405 * t650;
t318 = -t356 * t647 + t357 * t650;
t317 = -pkin(4) * t505 + qJ(5) * t456 + t339;
t316 = -t354 * t647 + t355 * t650;
t315 = t354 * t650 + t355 * t647;
t314 = -pkin(5) * t421 + t332;
t313 = -qJ(3) * t394 - (pkin(3) * t641 - pkin(7) * t643 + qJ(2)) * t424;
t312 = -pkin(5) * t419 + t331;
t311 = t330 * t643 - t427 * t641;
t310 = t329 * t643 - t426 * t641;
t309 = -t330 * t641 - t427 * t643;
t308 = -t329 * t641 - t426 * t643;
t307 = t327 * t643 + t421 * t641;
t306 = t327 * t641 - t421 * t643;
t305 = t324 * t643 + t419 * t641;
t304 = t324 * t641 - t419 * t643;
t303 = -qJ(3) * t395 - (pkin(3) * t643 + pkin(7) * t641 + t715) * t424;
t302 = t318 * t643 - t379 * t641;
t301 = -t318 * t641 - t379 * t643;
t300 = t316 * t643 + t380 * t641;
t299 = t316 * t641 - t380 * t643;
t298 = t339 * t650 - t712;
t297 = t339 * t647 + t711;
t294 = t298 * t643 + t473 * t641;
t293 = t298 * t641 - t473 * t643;
t292 = -pkin(8) * t380 - t295;
t291 = t296 * t642 + t361 * t640;
t290 = t296 * t640 - t361 * t642;
t289 = qJ(2) * t432 - qJ(3) * t401 + t328 * t643 - t344 * t641;
t288 = -qJ(5) * t368 - t314 * t640 + t343 * t642;
t287 = -pkin(3) * t297 - pkin(4) * t338;
t286 = -pkin(3) * t326 - pkin(4) * t368 + pkin(5) * t447 - pkin(8) * t422 - t710;
t285 = -qJ(5) * t365 - t312 * t640 + t342 * t642;
t284 = -pkin(3) * t323 - pkin(4) * t365 - pkin(5) * t445 - pkin(8) * t420 + t709;
t283 = -qJ(3) * t404 - t328 * t641 - t344 * t643 + t432 * t715;
t282 = -pkin(7) * t390 - t317 * t647 + t322 * t650;
t281 = t306 * t648 + t307 * t651;
t280 = -t306 * t651 + t307 * t648;
t279 = qJ(2) * t412 - qJ(3) * t388 + t319 * t643 - t337 * t641;
t278 = t304 * t648 + t305 * t651;
t277 = -t304 * t651 + t305 * t648;
t276 = -pkin(4) * t421 + qJ(5) * t369 + t314 * t642 + t343 * t640;
t275 = -pkin(4) * t419 + qJ(5) * t366 + t312 * t642 + t342 * t640;
t274 = -qJ(3) * t389 - t319 * t641 - t337 * t643 + t412 * t715;
t273 = t299 * t648 + t300 * t651;
t272 = -t299 * t651 + t300 * t648;
t271 = -qJ(5) * t354 + t292 * t642 + t380 * t714;
t270 = -pkin(7) * t297 - qJ(5) * t711 - t325 * t647;
t269 = qJ(5) * t355 + t292 * t640 + t380 * t674;
t268 = t293 * t648 + t294 * t651;
t267 = -t293 * t651 + t294 * t648;
t266 = -pkin(3) * t315 - pkin(4) * t354 - pkin(5) * t481 - pkin(8) * t382 - t296;
t265 = qJ(2) * t390 - qJ(3) * t363 + t282 * t643 - t353 * t641;
t264 = -qJ(3) * t364 - t282 * t641 - t353 * t643 + t390 * t715;
t263 = -t290 * t647 + t291 * t650;
t262 = t290 * t650 + t291 * t647;
t261 = -qJ(5) * t290 + (-pkin(8) * t642 + t714) * t295;
t260 = -pkin(7) * t326 - t276 * t647 + t288 * t650;
t259 = -pkin(7) * t323 - t275 * t647 + t285 * t650;
t258 = t263 * t643 + t295 * t641;
t257 = t263 * t641 - t295 * t643;
t256 = qJ(5) * t291 + (-pkin(8) * t640 + t674) * t295;
t255 = -pkin(7) * t315 - t269 * t647 + t271 * t650;
t254 = -pkin(3) * t262 - pkin(4) * t290 + pkin(5) * t361 - pkin(8) * t296;
t253 = qJ(2) * t297 - qJ(3) * t293 + t270 * t643 - t287 * t641;
t252 = qJ(2) * t326 - qJ(3) * t306 + t260 * t643 - t286 * t641;
t251 = -qJ(3) * t294 - t270 * t641 - t287 * t643 + t297 * t715;
t250 = qJ(2) * t323 - qJ(3) * t304 + t259 * t643 - t284 * t641;
t249 = -qJ(3) * t307 - t260 * t641 - t286 * t643 + t326 * t715;
t248 = -qJ(3) * t305 - t259 * t641 - t284 * t643 + t323 * t715;
t247 = t257 * t648 + t258 * t651;
t246 = -t257 * t651 + t258 * t648;
t245 = qJ(2) * t315 - qJ(3) * t299 + t255 * t643 - t266 * t641;
t244 = -qJ(3) * t300 - t255 * t641 - t266 * t643 + t315 * t715;
t243 = -pkin(7) * t262 - t256 * t647 + t261 * t650;
t242 = qJ(2) * t262 - qJ(3) * t257 + t243 * t643 - t254 * t641;
t241 = -qJ(3) * t258 - t243 * t641 - t643 * t254 + t262 * t715;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t609, -t610, 0, t554, 0, 0, 0, 0, 0, 0, -t609, 0, t610, t521, 0, 0, 0, 0, 0, 0, -t545, t668, 0, -t720, 0, 0, 0, 0, 0, 0, t466, t467, t488, t346, 0, 0, 0, 0, 0, 0, t341, t348, t321, t268, 0, 0, 0, 0, 0, 0, t278, t281, t273, t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t610, -t609, 0, t553, 0, 0, 0, 0, 0, 0, t610, 0, t609, t520, 0, 0, 0, 0, 0, 0, t668, t545, 0, t384, 0, 0, 0, 0, 0, 0, t464, t465, t487, t345, 0, 0, 0, 0, 0, 0, t340, t347, t320, t267, 0, 0, 0, 0, 0, 0, t277, t280, t272, t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t638, 0, 0, 0, 0, 0, 0, -t560, -t561, 0, t424, 0, 0, 0, 0, 0, 0, -t412, -t432, -t390, -t297, 0, 0, 0, 0, 0, 0, -t323, -t326, -t315, -t262; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t610, 0, -t609, 0, -t588, -t589, -t553, -pkin(6) * t553, 0, t610, 0, 0, t609, 0, -t588, -t520, t589, -pkin(6) * t520 + (-pkin(1) * t648 + qJ(2) * t651) * g(3), 0, 0, -t668, 0, -t545, 0, t721, t726, t384, -pkin(6) * t384 - t438 * t648 + t443 * t651, -t530 * t648 + t532 * t651, -t512 * t648 + t513 * t651, -t526 * t648 + t528 * t651, -t529 * t648 + t531 * t651, -t525 * t648 + t527 * t651, -t568 * t648 + t569 * t651, -pkin(6) * t464 - t358 * t648 + t372 * t651, -pkin(6) * t465 - t359 * t648 + t373 * t651, -pkin(6) * t487 - t406 * t648 + t407 * t651, -pkin(6) * t345 - t303 * t648 + t313 * t651, -t415 * t648 + t417 * t651, -t370 * t648 + t371 * t651, -t400 * t648 + t403 * t651, -t414 * t648 + t416 * t651, -t399 * t648 + t402 * t651, -t458 * t648 + t459 * t651, -pkin(6) * t340 - t274 * t648 + t279 * t651, -pkin(6) * t347 - t283 * t648 + t289 * t651, -pkin(6) * t320 - t264 * t648 + t265 * t651, -pkin(6) * t267 - t251 * t648 + t253 * t651, -t334 * t648 + t336 * t651, -t301 * t648 + t302 * t651, -t308 * t648 + t310 * t651, -t333 * t648 + t335 * t651, -t309 * t648 + t311 * t651, -t349 * t648 + t350 * t651, -pkin(6) * t277 - t248 * t648 + t250 * t651, -pkin(6) * t280 - t249 * t648 + t252 * t651, -pkin(6) * t272 - t244 * t648 + t245 * t651, -pkin(6) * t246 - t241 * t648 + t242 * t651; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t609, 0, t610, 0, t589, -t588, t554, pkin(6) * t554, 0, t609, 0, 0, -t610, 0, t589, t521, t588, pkin(6) * t521 + (pkin(1) * t651 + qJ(2) * t648) * g(3), 0, 0, -t545, 0, t668, 0, t726, -t721, t720, -pkin(6) * t720 + t438 * t651 + t443 * t648, t530 * t651 + t532 * t648, t512 * t651 + t513 * t648, t526 * t651 + t528 * t648, t529 * t651 + t531 * t648, t525 * t651 + t527 * t648, t568 * t651 + t569 * t648, pkin(6) * t466 + t358 * t651 + t372 * t648, pkin(6) * t467 + t359 * t651 + t373 * t648, pkin(6) * t488 + t406 * t651 + t407 * t648, pkin(6) * t346 + t303 * t651 + t313 * t648, t415 * t651 + t417 * t648, t370 * t651 + t371 * t648, t400 * t651 + t403 * t648, t414 * t651 + t416 * t648, t399 * t651 + t402 * t648, t458 * t651 + t459 * t648, pkin(6) * t341 + t274 * t651 + t279 * t648, pkin(6) * t348 + t283 * t651 + t289 * t648, pkin(6) * t321 + t264 * t651 + t265 * t648, pkin(6) * t268 + t251 * t651 + t253 * t648, t334 * t651 + t336 * t648, t301 * t651 + t302 * t648, t308 * t651 + t310 * t648, t333 * t651 + t335 * t648, t309 * t651 + t311 * t648, t349 * t651 + t350 * t648, pkin(6) * t278 + t248 * t651 + t250 * t648, pkin(6) * t281 + t249 * t651 + t252 * t648, pkin(6) * t273 + t244 * t651 + t245 * t648, pkin(6) * t247 + t241 * t651 + t242 * t648; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t615, t616, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t661 + 0.2e1 * t713, 0, 0.2e1 * t635 + t662, pkin(1) * t587 + qJ(2) * t581, 0, 0, 0, 0, 0, qJDD(1), -qJ(2) * t606 + t607 * t715 + t503, qJ(2) * t607 + t606 * t715 + t504, 0, qJ(2) * t453 + t452 * t715, (-t603 + t672) * t647, t602 * t650 - t604 * t647, -t618 * t650 - t695, (-t605 - t673) * t650, -t620 * t647 - t692, 0, -pkin(3) * t604 - pkin(7) * t563 + qJ(2) * t518 - t516 * t715 + t703, -pkin(3) * t602 - pkin(7) * t565 + qJ(2) * t519 - t517 * t715 - t704, -pkin(3) * t611 - pkin(7) * t608 + qJ(2) * t550 - t549 * t715 - t425, pkin(3) * t501 - pkin(7) * t425 + qJ(2) * t395 - t394 * t715, -t499 * t650 - t500 * t647, -t455 * t650 - t457 * t647, -t490 * t650 - t493 * t647, -t497 * t650 - t498 * t647, -t489 * t650 - t492 * t647, -t522 * t650 - t523 * t647, pkin(3) * t507 - pkin(7) * t413 + qJ(2) * t389 - t378 * t650 - t388 * t715 - t405 * t647, -pkin(3) * t667 - pkin(7) * t435 + qJ(2) * t404 - t393 * t650 - t401 * t715 - t418 * t647, pkin(3) * t505 - pkin(7) * t391 + qJ(2) * t364 - t317 * t650 - t322 * t647 - t363 * t715, pkin(3) * t473 - pkin(7) * t298 + qJ(2) * t294 + qJ(5) * t712 - t293 * t715 - t325 * t650, -t409 * t650 - t411 * t647, -t356 * t650 - t357 * t647, -t374 * t650 - t376 * t647, -t408 * t650 - t410 * t647, -t375 * t650 - t377 * t647, -t430 * t650 - t431 * t647, pkin(3) * t419 - pkin(7) * t324 + qJ(2) * t305 - t275 * t650 - t285 * t647 - t304 * t715, pkin(3) * t421 - pkin(7) * t327 + qJ(2) * t307 - t276 * t650 - t288 * t647 - t306 * t715, pkin(3) * t380 - pkin(7) * t316 + qJ(2) * t300 - t269 * t650 - t271 * t647 - t299 * t715, pkin(3) * t295 - pkin(7) * t263 + qJ(2) * t258 - t256 * t650 - t257 * t715 - t647 * t261;];
tauB_reg  = t1;
