% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta3,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRPR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRPR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR4_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 01:47:09
% EndTime: 2019-03-09 01:47:15
% DurationCPUTime: 1.90s
% Computational Cost: add. (2045->156), mult. (3827->309), div. (0->0), fcn. (3636->8), ass. (0->99)
t52 = cos(qJ(4));
t50 = sin(qJ(4));
t99 = cos(pkin(10));
t84 = t99 * t50;
t98 = sin(pkin(10));
t31 = t98 * t52 + t84;
t114 = 0.4e1 * t31;
t82 = t98 * t50;
t30 = -t99 * t52 + t82;
t27 = t31 * qJD(4);
t47 = sin(pkin(9));
t61 = t47 * t27;
t28 = t30 * qJD(4);
t113 = 2 * qJD(2);
t112 = 2 * qJD(6);
t111 = -pkin(1) - pkin(2);
t48 = cos(pkin(9));
t103 = t48 * qJ(2) + t47 * t111;
t34 = -pkin(7) + t103;
t100 = qJ(5) - t34;
t23 = t100 * t52;
t11 = -t100 * t84 - t98 * t23;
t94 = t48 * qJD(2);
t78 = -qJD(5) + t94;
t80 = qJD(4) * t100;
t17 = t50 * t80 + t78 * t52;
t60 = -t78 * t50 + t52 * t80;
t6 = t98 * t17 - t99 * t60;
t110 = t11 * t6;
t22 = t28 * t47;
t24 = t31 * t47;
t109 = t24 * t22;
t51 = cos(qJ(6));
t108 = t28 * t51;
t107 = t30 * t27;
t106 = t31 * t28;
t49 = sin(qJ(6));
t105 = t31 * t49;
t104 = t31 * t51;
t43 = t49 ^ 2;
t45 = t51 ^ 2;
t102 = t43 - t45;
t44 = t50 ^ 2;
t46 = t52 ^ 2;
t101 = t44 + t46;
t97 = qJD(6) * t49;
t96 = qJD(6) * t51;
t95 = t47 * qJD(2);
t93 = t50 * qJD(4);
t92 = t52 * qJD(4);
t91 = 0.2e1 * t107;
t90 = t49 * t108;
t40 = -t99 * pkin(4) - pkin(5);
t89 = t40 * t112;
t88 = 0.2e1 * t94;
t87 = t49 * t96;
t86 = t50 * t92;
t85 = (t43 + t45) * t28;
t81 = t102 * qJD(6);
t29 = t31 ^ 2;
t79 = t29 * t87;
t12 = t100 * t82 - t99 * t23;
t63 = -t47 * qJ(2) + t48 * t111;
t33 = pkin(3) - t63;
t26 = t52 * pkin(4) + t33;
t55 = -t30 * pkin(5) + t31 * pkin(8) + t26;
t54 = t51 * t55;
t3 = -t49 * t12 + t54;
t4 = t51 * t12 + t49 * t55;
t77 = t3 * t51 + t4 * t49;
t76 = -t3 * t49 + t4 * t51;
t73 = -t11 * t22 + t6 * t24;
t72 = t11 * t27 + t6 * t30;
t25 = t30 * t47;
t19 = -t25 * t51 - t48 * t49;
t68 = -t25 * t49 + t48 * t51;
t71 = t19 * t49 - t51 * t68;
t70 = t19 * t51 + t49 * t68;
t69 = -t22 * t30 + t24 * t27;
t39 = t98 * pkin(4) + pkin(8);
t67 = t27 * t39 + t28 * t40;
t66 = t30 * t39 - t31 * t40;
t16 = t27 * t49 + t30 * t96;
t15 = -t27 * t51 + t30 * t97;
t65 = -t28 * t49 + t31 * t96;
t64 = t31 * t97 + t108;
t35 = -pkin(4) * t93 + t95;
t62 = -pkin(5) * t27 - pkin(8) * t28 + t35;
t53 = t99 * t17 + t98 * t60;
t1 = -qJD(6) * t54 + t12 * t97 - t49 * t62 - t51 * t53;
t2 = -qJD(6) * t4 - t49 * t53 + t51 * t62;
t59 = t76 * qJD(6) - t1 * t49 + t2 * t51;
t58 = -t77 * qJD(6) - t1 * t51 - t2 * t49;
t8 = qJD(6) * t68 + t51 * t61;
t9 = t25 * t96 + t48 * t97 + t49 * t61;
t57 = t70 * qJD(6) - t49 * t8 + t51 * t9;
t56 = -qJD(6) * t71 - t49 * t9 - t51 * t8;
t7 = -t31 * t81 - t90;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, qJ(2) * t113, 0, 0, 0, 0, 0, 0, 0.2e1 * t95, t88, 0 (t103 * t48 - t63 * t47) * t113, 0.2e1 * t86, 0.2e1 * (-t44 + t46) * qJD(4), 0, -0.2e1 * t86, 0, 0, -0.2e1 * t33 * t93 + 0.2e1 * t52 * t95, -0.2e1 * t33 * t92 - 0.2e1 * t50 * t95, -t101 * t88 (t101 * t48 * t34 + t33 * t47) * t113, -0.2e1 * t106, -0.2e1 * t27 * t31 + 0.2e1 * t28 * t30, 0, t91, 0, 0, -0.2e1 * t26 * t27 - 0.2e1 * t30 * t35, 0.2e1 * t26 * t28 - 0.2e1 * t31 * t35, 0.2e1 * t11 * t28 + 0.2e1 * t12 * t27 + 0.2e1 * t30 * t53 - 0.2e1 * t6 * t31, 0.2e1 * t12 * t53 + 0.2e1 * t26 * t35 + 0.2e1 * t110, -0.2e1 * t45 * t106 - 0.2e1 * t79, t102 * t29 * t112 + t90 * t114, 0.2e1 * t27 * t104 - 0.2e1 * t30 * t64, -0.2e1 * t43 * t106 + 0.2e1 * t79, -0.2e1 * t27 * t105 - 0.2e1 * t30 * t65, t91, -0.2e1 * t6 * t105 - 0.2e1 * t11 * t65 - 0.2e1 * t2 * t30 - 0.2e1 * t27 * t3, -0.2e1 * t1 * t30 - 0.2e1 * t6 * t104 + 0.2e1 * t11 * t64 + 0.2e1 * t27 * t4, -0.2e1 * t77 * t28 + 0.2e1 * t59 * t31, -0.2e1 * t1 * t4 + 0.2e1 * t2 * t3 + 0.2e1 * t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 * t93, t48 * t92, 0 (-0.1e1 + t101) * t47 * t94, 0, 0, 0, 0, 0, 0, t48 * t27, -t48 * t28, t22 * t31 + t24 * t28 - t25 * t27 - t30 * t61, -t12 * t61 - t25 * t53 - t35 * t48 + t73, 0, 0, 0, 0, 0, 0, t22 * t105 - t24 * t65 + t27 * t68 - t30 * t9, t22 * t104 + t19 * t27 + t24 * t64 - t30 * t8, -t28 * t71 + t57 * t31, -t1 * t19 - t2 * t68 + t3 * t9 - t4 * t8 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t25 * t61 - 0.2e1 * t109, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t19 * t8 - 0.2e1 * t68 * t9 - 0.2e1 * t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12 * t28 + t31 * t53 + t72, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76 * t28 + t58 * t31 + t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25 * t28 - t31 * t61 + t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28 * t70 + t31 * t56 + t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t106 + 0.2e1 * t107, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t31 * t85 + 0.2e1 * t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, 0, t93, 0, -t34 * t92 - t50 * t94, t34 * t93 - t52 * t94, 0, 0, 0, 0, t28, 0, t27, 0, -t6, -t53 (t98 * t27 - t99 * t28) * pkin(4) (t53 * t98 - t6 * t99) * pkin(4), -t7, -t102 * t28 + t87 * t114, -t16, t7, t15, 0, -t51 * t6 + t67 * t49 + (t11 * t49 + t51 * t66) * qJD(6), t49 * t6 + t67 * t51 + (t11 * t51 - t49 * t66) * qJD(6), t58, t39 * t58 + t40 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47 * t92, t47 * t93, 0, 0, 0, 0, 0, 0, 0, 0, t22, t61, 0 (t22 * t99 - t98 * t61) * pkin(4), 0, 0, 0, 0, 0, 0, t22 * t51 + t24 * t97, -t22 * t49 + t24 * t96, t56, -t22 * t40 + t39 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, -t92, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t28, 0 (-t99 * t27 - t98 * t28) * pkin(4), 0, 0, 0, 0, 0, 0, t15, t16, -t85, t27 * t40 - t39 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t87, -0.2e1 * t81, 0, -0.2e1 * t87, 0, 0, t49 * t89, t51 * t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t28, 0, t35, 0, 0, 0, 0, 0, 0, t15, t16, -t85, t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t65, -t27, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, t64, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, -t97, 0, -t39 * t96, t39 * t97, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, -t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
