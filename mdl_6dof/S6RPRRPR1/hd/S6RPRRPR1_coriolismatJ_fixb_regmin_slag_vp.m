% Calculate minimal parameter regressor of coriolis matrix for
% S6RPRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPRRPR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:58:48
% EndTime: 2019-03-09 04:59:01
% DurationCPUTime: 6.05s
% Computational Cost: add. (9559->331), mult. (18033->463), div. (0->0), fcn. (21151->10), ass. (0->296)
t283 = sin(qJ(6));
t281 = sin(pkin(11));
t285 = sin(qJ(3));
t271 = sin(pkin(10)) * pkin(1) + pkin(7);
t454 = pkin(8) + t271;
t257 = t454 * t285;
t288 = cos(qJ(3));
t258 = t454 * t288;
t284 = sin(qJ(4));
t287 = cos(qJ(4));
t167 = t284 * t257 - t287 * t258;
t259 = t284 * t285 - t287 * t288;
t303 = t259 * qJ(5) + t167;
t431 = cos(pkin(11));
t261 = t284 * t288 + t287 * t285;
t319 = -t287 * t257 - t284 * t258;
t482 = -t261 * qJ(5) + t319;
t496 = t281 * t303 + t482 * t431;
t468 = t496 / 0.2e1;
t511 = -t496 / 0.2e1 + t468;
t514 = t283 * t511;
t286 = cos(qJ(6));
t513 = t286 * t511;
t361 = qJD(3) + qJD(4);
t228 = t431 * t259 + t281 * t261;
t332 = t228 * t361;
t252 = t431 * t261;
t412 = t281 * t259;
t483 = t252 - t412;
t512 = t483 * t332;
t497 = t281 * t482 - t303 * t431;
t434 = t497 * t228;
t439 = t496 * t483;
t465 = t483 / 0.2e1;
t467 = t228 / 0.2e1;
t499 = t465 * t496 + t467 * t497 - t439 / 0.2e1 - t434 / 0.2e1;
t510 = qJD(2) * t499;
t509 = t499 * qJD(1);
t435 = t497 * t483;
t273 = -cos(pkin(10)) * pkin(1) - pkin(2);
t264 = -t288 * pkin(3) + t273;
t235 = t259 * pkin(4) + t264;
t292 = t228 * pkin(5) - pkin(9) * t483 + t235;
t505 = t497 * t283;
t51 = -t286 * t292 + t505;
t508 = t283 * t435 - t51 * t483;
t504 = t497 * t286;
t52 = t283 * t292 + t504;
t507 = t286 * t435 - t52 * t483;
t334 = t431 * t284;
t254 = (t281 * t287 + t334) * pkin(3);
t463 = t254 / 0.2e1;
t277 = t287 * pkin(3) + pkin(4);
t250 = pkin(3) * t334 + t281 * t277;
t506 = t496 * t250;
t436 = t496 * t286;
t457 = -t286 / 0.2e1;
t503 = t457 * t496 - t436 / 0.2e1;
t437 = t496 * t283;
t459 = -t283 / 0.2e1;
t502 = t459 * t496 - t437 / 0.2e1;
t411 = t281 * t284;
t255 = (t287 * t431 - t411) * pkin(3);
t418 = t228 * t250;
t249 = -pkin(3) * t411 + t277 * t431;
t424 = t483 * t249;
t315 = t424 / 0.2e1 + t418 / 0.2e1;
t498 = -t228 * t463 - t255 * t465 + t315;
t492 = qJD(1) * t228;
t495 = -qJD(6) - t492;
t494 = t483 ^ 2;
t490 = 0.2e1 * t483;
t466 = -t228 / 0.2e1;
t491 = t361 * t319;
t409 = t283 * t286;
t489 = t409 * t490;
t215 = t228 * t457;
t408 = t286 * t228;
t137 = t408 / 0.2e1 - t215;
t488 = t137 * t361;
t338 = t467 + t466;
t136 = t338 * t286;
t485 = t361 * t136;
t484 = t361 * t259;
t410 = t283 * t228;
t135 = t410 / 0.2e1 - t228 * t459;
t121 = t135 * qJD(6);
t381 = qJD(4) * t286;
t384 = qJD(3) * t286;
t392 = (t381 + t384) * t483;
t53 = t121 - t392;
t455 = t261 * pkin(4);
t108 = pkin(5) * t483 + pkin(9) * t228 + t455;
t279 = t285 * pkin(3);
t107 = t108 + t279;
t246 = pkin(9) + t250;
t245 = -pkin(5) - t249;
t464 = -t245 / 0.2e1;
t313 = t246 * t467 + t464 * t483;
t300 = t107 / 0.2e1 + t313;
t23 = -t286 * t300 + t514;
t134 = t338 * t283;
t375 = t134 * qJD(2);
t385 = qJD(3) * t283;
t481 = -t23 * qJD(1) - t245 * t385 - t375;
t21 = t283 * t300 + t513;
t373 = t136 * qJD(2);
t480 = -t21 * qJD(1) - t245 * t384 - t373;
t462 = -t255 / 0.2e1;
t312 = t228 * t462 + t463 * t483;
t419 = t228 * t245;
t270 = t281 * pkin(4) + pkin(9);
t423 = t483 * t270;
t425 = t483 * t246;
t479 = -t423 / 0.2e1 - t425 / 0.2e1 - t419 / 0.2e1 + t312;
t478 = t361 * t167;
t272 = -pkin(4) * t431 - pkin(5);
t460 = -t272 / 0.2e1;
t328 = t462 + t460 + t464;
t180 = t328 * t286;
t461 = t270 / 0.2e1;
t311 = t228 * t461 + t460 * t483;
t299 = t108 / 0.2e1 + t311;
t25 = t283 * t299 + t513;
t477 = -t25 * qJD(1) + t180 * qJD(3) - t272 * t381 - t373;
t179 = t328 * t283;
t27 = -t286 * t299 + t514;
t382 = qJD(4) * t283;
t476 = -t27 * qJD(1) + t179 * qJD(3) - t272 * t382 - t375;
t280 = t286 ^ 2;
t472 = t283 ^ 2;
t131 = (t472 / 0.2e1 - t280 / 0.2e1) * t483;
t387 = qJD(1) * t286;
t350 = t283 * t387;
t473 = t131 * t361 + t350 * t494;
t359 = -t280 + t472;
t156 = t350 * t490 + t359 * t361;
t471 = t497 / 0.2e1;
t470 = -t497 / 0.2e1;
t458 = t283 / 0.2e1;
t456 = t286 / 0.2e1;
t453 = pkin(3) * qJD(4);
t452 = pkin(4) * qJD(4);
t451 = qJD(3) * pkin(3);
t2 = t107 * t408 + t508;
t450 = t2 * qJD(1);
t3 = -t107 * t410 + t507;
t449 = t3 * qJD(1);
t4 = t108 * t408 + t508;
t448 = t4 * qJD(1);
t5 = -t108 * t410 + t507;
t447 = t5 * qJD(1);
t133 = t283 * t483;
t432 = t133 * qJD(5);
t289 = -(t245 / 0.2e1 + t460) * t228 + (-t246 / 0.2e1 + t461) * t483 + t312;
t358 = t471 + t470;
t14 = t283 * t289 - t286 * t358;
t427 = t14 * qJD(1);
t422 = t483 * t281;
t421 = t228 ^ 2;
t417 = t228 * t281;
t415 = t249 * t228;
t414 = t250 * t483;
t29 = t51 * t228 + t437 * t483;
t407 = t29 * qJD(1);
t30 = -t52 * t228 - t436 * t483;
t406 = t30 * qJD(1);
t291 = t415 / 0.2e1 - t414 / 0.2e1 + t312;
t335 = t431 * t228;
t297 = (-t422 / 0.2e1 + t335 / 0.2e1) * pkin(4);
t38 = t297 - t291;
t405 = t38 * qJD(1);
t322 = t494 - t421;
t62 = t322 * t283;
t404 = t62 * qJD(1);
t69 = t494 + t421;
t63 = t69 * t283;
t403 = t63 * qJD(1);
t64 = t322 * t286;
t402 = t64 * qJD(1);
t65 = t69 * t286;
t401 = t65 * qJD(1);
t399 = t69 * qJD(1);
t253 = t455 / 0.2e1;
t360 = t253 + t279 / 0.2e1;
t75 = t315 + t360;
t397 = t75 * qJD(1);
t396 = t361 * t135;
t395 = t361 * t134;
t393 = (t382 + t385) * t483;
t389 = qJD(1) * t483;
t388 = qJD(1) * t264;
t386 = qJD(1) * t288;
t383 = qJD(4) * t264;
t380 = qJD(6) * t283;
t379 = qJD(6) * t286;
t336 = t431 * t483;
t304 = -t417 / 0.2e1 - t336 / 0.2e1;
t103 = (-t261 / 0.2e1 + t304) * pkin(4);
t378 = t103 * qJD(1);
t377 = t131 * qJD(1);
t376 = t133 * qJD(1);
t374 = t134 * qJD(6);
t120 = t135 * qJD(1);
t129 = t137 * qJD(1);
t138 = 0.2e1 * t466 * t286;
t372 = t138 * qJD(1);
t142 = t359 * t494;
t371 = t142 * qJD(1);
t200 = t259 * t279 + t264 * t261;
t368 = t200 * qJD(1);
t201 = -t264 * t259 + t261 * t279;
t367 = t201 * qJD(1);
t202 = t259 ^ 2 - t261 ^ 2;
t366 = t202 * qJD(1);
t225 = -t412 / 0.2e1 + t252 / 0.2e1;
t365 = t225 * qJD(1);
t268 = -t285 ^ 2 + t288 ^ 2;
t364 = t268 * qJD(1);
t363 = t285 * qJD(3);
t362 = t288 * qJD(3);
t352 = t228 * t389;
t351 = t280 * t389;
t349 = t483 * t380;
t348 = t483 * t379;
t347 = t259 * t388;
t346 = t261 * t388;
t345 = t273 * t285 * qJD(1);
t344 = t273 * t386;
t269 = t283 * t379;
t343 = t285 * t386;
t342 = t286 * t483 * qJD(5);
t340 = t272 * t458;
t339 = t272 * t456;
t333 = pkin(3) * t361;
t233 = t361 * t261;
t331 = t361 * t286;
t327 = t283 * t331;
t326 = t361 * t409;
t19 = t235 * t455;
t325 = t19 * qJD(1) + t510;
t18 = t235 * (t279 + t455);
t324 = t18 * qJD(1) + t510;
t34 = -t434 - t439;
t323 = t34 * qJD(1);
t321 = -t419 - t425;
t320 = -t228 * t272 - t423;
t318 = t483 * t495;
t17 = t283 * t358 + t286 * t289;
t310 = -t17 * qJD(1) - t254 * t385;
t96 = t225 * qJD(6) + t483 * t492;
t305 = t327 * t490;
t155 = -t249 * t254 + t250 * t255;
t296 = t304 * pkin(4);
t39 = t296 + t498;
t293 = -t506 / 0.2e1 + t497 * t462 + t249 * t471 + t496 * t463;
t298 = (t281 * t468 + t431 * t470) * pkin(4);
t6 = t298 + t293;
t301 = t6 * qJD(1) + t39 * qJD(2) - t155 * qJD(3);
t266 = t359 * qJD(6);
t240 = t254 * t382;
t234 = t261 * t259 * qJD(1);
t220 = t483 * t387;
t182 = t245 * t456 + t255 * t457 + t339;
t181 = t245 * t458 + t255 * t459 + t340;
t140 = t361 * t225;
t139 = -t408 / 0.2e1 - t215;
t128 = t137 * qJD(6);
t126 = t136 * qJD(6);
t111 = t131 * qJD(6);
t110 = t129 + t379;
t109 = -t120 - t380;
t104 = t253 + t296;
t102 = t326 - t377;
t101 = -t327 + t377;
t77 = t495 * t489;
t76 = t360 - t315;
t54 = t228 * t351 - t111;
t50 = t128 - t402;
t49 = -t121 + t404;
t48 = -t111 - (t326 + t351) * t228;
t47 = (-qJD(6) + t492) * t489 + t359 * t332;
t41 = t296 - t498;
t40 = t297 + t291;
t33 = t126 + t393 + t402;
t32 = -t374 + t392 - t404;
t28 = t108 * t456 - t286 * t311 + t502;
t26 = t108 * t459 + t283 * t311 + t503;
t24 = t107 * t456 - t286 * t313 + t502;
t22 = t107 * t459 + t283 * t313 + t503;
t20 = t128 + t393;
t16 = -t228 * t339 + t479 * t286 + t505;
t15 = -t228 * t340 + t479 * t283 - t504;
t7 = t298 - t293;
t1 = t361 * t499;
t8 = [0, 0, 0, 0, t285 * t362, t268 * qJD(3), 0, 0, 0, t273 * t363, t273 * t362, -t259 * t233, t361 * t202, 0, 0, 0, t200 * qJD(3) + t261 * t383, t201 * qJD(3) - t259 * t383, qJD(5) * t69, qJD(3) * t18 + qJD(4) * t19 + qJD(5) * t34, -t269 * t494 - t280 * t512, t142 * qJD(6) + t228 * t305, -t228 * t349 + t361 * t64, -t228 * t348 - t361 * t62, t512, qJD(3) * t2 + qJD(4) * t4 + qJD(5) * t63 + qJD(6) * t30, qJD(3) * t3 + qJD(4) * t5 + qJD(5) * t65 + qJD(6) * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, t343, t364, t362, -t363, 0, -t271 * t362 + t345, t271 * t363 + t344, -t234, t366, -t484, -t233, 0, t368 + t478, t367 - t491 (-t414 + t415) * qJD(3) + t40 * qJD(4) (-t249 * t497 + t506) * qJD(3) + t7 * qJD(4) + t76 * qJD(5) + t324, t48, t47, t33, t32, t96, t450 + (t283 * t321 - t504) * qJD(3) + t15 * qJD(4) + t24 * qJD(6), t449 + (t286 * t321 + t505) * qJD(3) + t16 * qJD(4) + t22 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t234, t366, -t484, -t233, 0, t346 + t478, -t347 - t491, t40 * qJD(3) + (t335 - t422) * t452, t7 * qJD(3) + (t281 * t496 - t431 * t497) * t452 + t104 * qJD(5) + t325, t48, t47, t33, t32, t96, t448 + t15 * qJD(3) + (t283 * t320 - t504) * qJD(4) + t28 * qJD(6), t447 + t16 * qJD(3) + (t286 * t320 + t505) * qJD(4) + t26 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, t76 * qJD(3) + qJD(4) * t104 + t323, 0, 0, 0, 0, 0, -t374 + t403, qJD(6) * t139 + t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t473, -t305 + t371, t283 * t318 + t485, t286 * t318 - t395, t140, t24 * qJD(3) + t28 * qJD(4) - qJD(5) * t134 - t52 * qJD(6) + t406, t22 * qJD(3) + t26 * qJD(4) + qJD(5) * t139 + t51 * qJD(6) + t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t363, -t362, 0, 0, 0, 0, 0, -t233, t484, 0 (-t418 - t424) * qJD(3) + t41 * qJD(4) + t509, 0, 0, 0, 0, 0, t53, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t233, t484, 0, t41 * qJD(3) + (-t336 - t417) * t452 + t509, 0, 0, 0, 0, 0, t53, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t348 + t396, t349 + t488; 0, 0, 0, 0, -t343, -t364, 0, 0, 0, -t345, -t344, t234, -t366, 0, 0, 0, -t368, -t367, -qJD(4) * t38, -qJD(4) * t6 - qJD(5) * t75 - t324, t54, t77, t50, t49, -t96, t14 * qJD(4) + t23 * qJD(6) - t342 - t450, t17 * qJD(4) + t21 * qJD(6) + t432 - t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t39 - t509, 0, 0, 0, 0, 0, t374, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284 * t453, -t287 * t453, 0, t155 * qJD(4), t269, -t266, 0, 0, 0, t245 * t380 - t254 * t381, t245 * t379 + t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284 * t333, -t287 * t333, -t405 (-t254 * t431 + t255 * t281) * t452 - t301, t269, -t266, 0, 0, 0, t181 * qJD(6) - t254 * t331 + t427, t182 * qJD(6) + t240 - t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t397, 0, 0, 0, 0, 0, -t220, t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, -t156, t110, t109, -t365, t181 * qJD(4) - t246 * t379 - t481, t182 * qJD(4) + t246 * t380 - t480; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234, -t366, 0, 0, 0, -t346, t347, qJD(3) * t38, t6 * qJD(3) + qJD(5) * t103 - t325, t54, t77, t50, t49, -t96, -t14 * qJD(3) + t27 * qJD(6) - t342 - t448, -t17 * qJD(3) + t25 * qJD(6) + t432 - t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t39 - t509, 0, 0, 0, 0, 0, t374, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t284 * t451, t287 * t451, t405, t301, t269, -t266, 0, 0, 0, -t179 * qJD(6) + t254 * t384 - t427, -t180 * qJD(6) + t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, -t266, 0, 0, 0, t272 * t380, t272 * t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t378, 0, 0, 0, 0, 0, -t220, t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, -t156, t110, t109, -t365, -t270 * t379 - t476, t270 * t380 - t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t399, t75 * qJD(3) - qJD(4) * t103 - t323, 0, 0, 0, 0, 0, -t403 - t53, qJD(6) * t138 - t133 * t361 - t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397, 0, 0, 0, 0, 0, t220, -t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t378, 0, 0, 0, 0, 0, t220, -t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, t372 - t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t473, t326 * t490 - t371, t283 * t352 - t488, t286 * t352 + t396, t140, -t23 * qJD(3) - t27 * qJD(4) + qJD(5) * t135 - t406, -t21 * qJD(3) - t25 * qJD(4) - qJD(5) * t138 - t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t395, -t485; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, t156, -t129, t120, t365, t179 * qJD(4) + t481, t180 * qJD(4) + t480; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, t156, -t129, t120, t365, t476, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, -t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t8;
