% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:58:53
% EndTime: 2019-03-09 04:59:03
% DurationCPUTime: 6.21s
% Computational Cost: add. (13646->573), mult. (30256->702), div. (0->0), fcn. (21893->18), ass. (0->313)
t247 = sin(qJ(6));
t251 = cos(qJ(6));
t239 = qJD(3) + qJD(4);
t244 = sin(pkin(11));
t248 = sin(qJ(4));
t249 = sin(qJ(3));
t252 = cos(qJ(3));
t399 = cos(qJ(4));
t173 = t248 * t252 + t249 * t399;
t165 = t173 * qJD(1);
t159 = t165 * qJ(5);
t245 = sin(pkin(10));
t216 = pkin(1) * t245 + pkin(7);
t192 = t216 * qJD(1);
t306 = pkin(8) * qJD(1) + t192;
t330 = t249 * qJD(2);
t136 = t252 * t306 + t330;
t131 = t248 * t136;
t232 = t252 * qJD(2);
t135 = -t249 * t306 + t232;
t133 = qJD(3) * pkin(3) + t135;
t93 = t399 * t133 - t131;
t83 = -t159 + t93;
t76 = pkin(4) * t239 + t83;
t370 = cos(pkin(11));
t316 = t399 * t252;
t300 = qJD(1) * t316;
t335 = qJD(1) * t249;
t315 = t248 * t335;
t163 = -t300 + t315;
t351 = t163 * qJ(5);
t317 = t399 * t136;
t94 = t248 * t133 + t317;
t84 = t94 - t351;
t79 = t370 * t84;
t48 = t244 * t76 + t79;
t46 = pkin(9) * t239 + t48;
t116 = t370 * t163 + t165 * t244;
t246 = cos(pkin(10));
t218 = -pkin(1) * t246 - pkin(2);
t235 = t252 * pkin(3);
t401 = t218 - t235;
t166 = t401 * qJD(1);
t123 = t163 * pkin(4) + qJD(5) + t166;
t271 = -t244 * t163 + t165 * t370;
t61 = t116 * pkin(5) - pkin(9) * t271 + t123;
t21 = t247 * t61 + t251 * t46;
t406 = qJD(6) + t116;
t414 = t21 * t406;
t20 = -t247 * t46 + t251 * t61;
t413 = t406 * t20;
t243 = qJ(3) + qJ(4);
t233 = sin(t243);
t234 = cos(t243);
t240 = qJ(1) + pkin(10);
t228 = cos(t240);
t227 = sin(t240);
t393 = g(2) * t227;
t297 = g(1) * t228 + t393;
t412 = -g(3) * t234 + t233 * t297;
t411 = t116 * t271;
t231 = pkin(11) + t243;
t213 = sin(t231);
t347 = t213 * t228;
t409 = g(1) * t347 + t213 * t393;
t190 = t216 * qJDD(1);
t408 = qJD(2) * qJD(3) + t190;
t303 = t406 * t251;
t339 = t248 * t249;
t294 = t239 * t339;
t308 = qJDD(1) * t399;
t325 = t252 * qJDD(1);
t301 = -t239 * t300 - t248 * t325 - t249 * t308;
t104 = qJD(1) * t294 + t301;
t129 = t239 * t173;
t326 = t249 * qJDD(1);
t292 = t248 * t326 - t252 * t308;
t105 = qJD(1) * t129 + t292;
t66 = -t104 * t244 + t370 * t105;
t64 = qJDD(6) + t66;
t407 = -t247 * t64 - t303 * t406;
t331 = qJD(6) * t251;
t379 = t244 * t84;
t47 = t370 * t76 - t379;
t45 = -t239 * pkin(5) - t47;
t237 = qJDD(3) + qJDD(4);
t321 = t249 * qJDD(2) + t252 * t408;
t334 = qJD(3) * t249;
t113 = -t192 * t334 + t321;
t328 = qJD(1) * qJD(3);
t312 = t249 * t328;
t102 = (-t312 + t325) * pkin(8) + t113;
t230 = t252 * qJDD(2);
t96 = qJDD(3) * pkin(3) + t230 + (-pkin(8) * qJDD(1) - t190) * t249 - t136 * qJD(3);
t40 = -qJD(4) * t94 - t248 * t102 + t399 * t96;
t30 = t237 * pkin(4) + t104 * qJ(5) - t165 * qJD(5) + t40;
t313 = qJD(4) * t399;
t333 = qJD(4) * t248;
t302 = -t399 * t102 - t133 * t313 + t136 * t333 - t248 * t96;
t32 = -qJ(5) * t105 - qJD(5) * t163 - t302;
t10 = -t244 * t32 + t370 * t30;
t8 = -pkin(5) * t237 - t10;
t405 = t8 * t247 + t45 * t331;
t369 = pkin(1) * qJDD(1);
t310 = -g(1) * t227 + g(2) * t228;
t403 = t310 * t213;
t387 = pkin(8) + t216;
t169 = t387 * t249;
t170 = t387 * t252;
t121 = -t248 * t169 + t399 * t170;
t214 = cos(t231);
t402 = -t214 * pkin(5) - t213 * pkin(9);
t172 = -t316 + t339;
t125 = -t244 * t172 + t173 * t370;
t332 = qJD(6) * t247;
t128 = -qJD(3) * t316 - t252 * t313 + t294;
t89 = -t128 * t370 - t244 * t129;
t376 = t251 * t89;
t272 = t125 * t332 - t376;
t352 = t125 * t251;
t400 = -t272 * t406 + t64 * t352;
t254 = -pkin(8) - pkin(7);
t398 = pkin(4) * t165;
t397 = pkin(4) * t233;
t396 = pkin(5) * t213;
t200 = g(3) * t213;
t392 = g(3) * t214;
t390 = g(3) * t252;
t67 = -t104 * t370 - t244 * t105;
t142 = pkin(3) * t312 + qJDD(1) * t401;
t81 = t105 * pkin(4) + qJDD(5) + t142;
t19 = t66 * pkin(5) - t67 * pkin(9) + t81;
t11 = t244 * t30 + t370 * t32;
t9 = pkin(9) * t237 + t11;
t2 = qJD(6) * t20 + t247 * t19 + t251 * t9;
t1 = t2 * t251;
t250 = sin(qJ(1));
t389 = t250 * pkin(1);
t18 = t251 * t19;
t3 = -qJD(6) * t21 - t247 * t9 + t18;
t388 = t3 * t247;
t107 = -t251 * t239 + t247 * t271;
t109 = t239 * t247 + t251 * t271;
t305 = -t251 * t237 + t247 * t67;
t44 = qJD(6) * t109 + t305;
t386 = -t107 * t376 - t44 * t352;
t385 = -t107 * t331 - t247 * t44;
t384 = -t89 * t116 - t125 * t66;
t124 = t172 * t370 + t173 * t244;
t43 = -t247 * t237 - t239 * t331 - t251 * t67 + t271 * t332;
t88 = -t128 * t244 + t129 * t370;
t383 = t109 * t88 - t43 * t124;
t382 = pkin(3) * qJD(4);
t381 = t116 * t45;
t380 = t20 * t251;
t377 = t247 * t89;
t375 = t43 * t247;
t374 = t44 * t251;
t373 = -t173 * t105 + t128 * t163;
t97 = -t248 * t135 - t317;
t267 = t97 + t351;
t307 = t370 * t248;
t98 = t399 * t135 - t131;
t85 = -t159 + t98;
t372 = -t244 * t85 + t370 * t267 + (t244 * t399 + t307) * t382;
t340 = t244 * t248;
t153 = (t370 * t399 - t340) * t382;
t53 = t244 * t267 + t370 * t85;
t371 = t153 - t53;
t368 = t107 * t271;
t367 = t107 * t116;
t366 = t107 * t247;
t365 = t109 * t107;
t364 = t109 * t271;
t363 = t109 * t247;
t362 = t109 * t251;
t361 = t406 * t271;
t360 = t271 ^ 2;
t359 = t271 * t239;
t357 = t116 ^ 2;
t356 = t116 * t239;
t355 = t116 * t247;
t353 = t125 * t247;
t350 = t165 * t163;
t349 = t192 * t249;
t348 = t192 * t252;
t346 = t214 * t227;
t345 = t214 * t228;
t344 = t227 * t247;
t343 = t227 * t251;
t342 = t228 * t247;
t341 = t228 * t251;
t221 = pkin(4) * t234;
t337 = t221 + t235;
t180 = pkin(2) + t337;
t253 = cos(qJ(1));
t236 = t253 * pkin(1);
t338 = t228 * t180 + t236;
t223 = pkin(3) * t399 + pkin(4);
t158 = pkin(3) * t307 + t244 * t223;
t241 = t249 ^ 2;
t242 = t252 ^ 2;
t336 = t241 - t242;
t193 = qJD(1) * t218;
t191 = qJDD(1) * t218;
t226 = pkin(3) * t334;
t324 = t89 * t363;
t256 = qJD(1) ^ 2;
t322 = t249 * t256 * t252;
t41 = t45 * t332;
t320 = g(1) * t345 + g(2) * t346 + t200;
t319 = t221 - t402;
t318 = -t8 - t392;
t215 = pkin(4) * t244 + pkin(9);
t314 = qJD(6) * t406 * t215;
t119 = pkin(4) * t129 + t226;
t181 = -pkin(3) * t249 - t397;
t311 = t181 - t396;
t309 = qJD(3) * t387;
t304 = t406 * t247;
t299 = t252 * t312;
t298 = -t396 - t397;
t295 = g(1) * t250 - g(2) * t253;
t238 = -qJ(5) + t254;
t293 = -t228 * t238 - t389;
t291 = -t88 * t107 - t124 * t44;
t290 = -t116 * t47 + t271 * t48;
t151 = pkin(9) + t158;
t289 = -t151 * t64 + t381;
t288 = -t215 * t64 + t381;
t287 = -t124 * t67 - t271 * t88;
t286 = -t21 * t247 - t380;
t285 = t20 * t247 - t21 * t251;
t106 = -qJ(5) * t172 + t121;
t120 = -t169 * t399 - t248 * t170;
t266 = -t173 * qJ(5) + t120;
t69 = t106 * t370 + t244 * t266;
t134 = pkin(4) * t172 + t401;
t73 = pkin(5) * t124 - pkin(9) * t125 + t134;
t34 = t247 * t73 + t251 * t69;
t33 = -t247 * t69 + t251 * t73;
t284 = t125 * t237 + t239 * t89;
t283 = t21 * t271 + t247 * t392 + t405;
t282 = -t104 * t172 + t129 * t165;
t281 = t362 + t366;
t280 = t128 * t239 - t173 * t237;
t149 = t330 + t348;
t278 = -t20 * t271 + t251 * t409 + t41;
t277 = -t116 * t380 - t21 * t355 + t1 - t320;
t276 = t251 * t64 + (-t332 - t355) * t406;
t275 = -qJD(6) * t61 + t200 - t9;
t274 = t297 * t213;
t273 = t125 * t331 + t377;
t160 = t249 * t309;
t161 = t252 * t309;
t77 = -t399 * t160 - t248 * t161 - t169 * t313 - t170 * t333;
t72 = pkin(5) * t271 + pkin(9) * t116 + t398;
t157 = -pkin(3) * t340 + t223 * t370;
t270 = -qJD(1) * t193 + t297;
t269 = t116 * t123 - t11 + t320;
t268 = 0.2e1 * qJD(3) * t193 - qJDD(3) * t216;
t265 = g(3) * t233 + t166 * t163 + t234 * t297 + t302;
t264 = -t123 * t271 + t10 - t392 + t409;
t255 = qJD(3) ^ 2;
t263 = -t216 * t255 - 0.2e1 * t191 - t310;
t262 = -t273 * t406 - t353 * t64;
t261 = qJD(6) * t286 + t1 - t388;
t114 = -qJD(3) * t149 - t249 * t190 + t230;
t148 = t232 - t349;
t260 = t113 * t252 - t114 * t249 + (-t148 * t252 - t149 * t249) * qJD(3);
t78 = -qJD(4) * t121 + t248 * t160 - t399 * t161;
t259 = -t166 * t165 + t40 + t412;
t258 = t128 * qJ(5) - t173 * qJD(5) + t78;
t225 = pkin(3) * t335;
t224 = t235 + pkin(2);
t217 = -pkin(4) * t370 - pkin(5);
t188 = qJDD(3) * t252 - t249 * t255;
t187 = qJDD(3) * t249 + t252 * t255;
t175 = pkin(9) * t345;
t174 = pkin(9) * t346;
t150 = -pkin(5) - t157;
t141 = t214 * t341 + t344;
t140 = -t214 * t342 + t343;
t139 = t225 + t398;
t138 = -t214 * t343 + t342;
t137 = t214 * t344 + t341;
t110 = -t163 ^ 2 + t165 ^ 2;
t103 = -t129 * t239 - t172 * t237;
t86 = -t301 + (t163 - t315) * t239;
t71 = t225 + t72;
t68 = t106 * t244 - t266 * t370;
t65 = -t124 * t237 - t239 * t88;
t58 = -qJ(5) * t129 - qJD(5) * t172 + t77;
t55 = t67 + t356;
t54 = -t66 + t359;
t51 = -t357 + t360;
t50 = t370 * t83 - t379;
t49 = t244 * t83 + t79;
t37 = pkin(5) * t88 - pkin(9) * t89 + t119;
t27 = t244 * t258 + t370 * t58;
t26 = t244 * t58 - t258 * t370;
t25 = t247 * t71 + t251 * t53;
t24 = -t247 * t53 + t251 * t71;
t23 = t247 * t72 + t251 * t50;
t22 = -t247 * t50 + t251 * t72;
t17 = t107 * t304 - t374;
t16 = t109 * t303 - t375;
t15 = -t364 - t407;
t14 = t276 + t368;
t6 = (-t43 - t367) * t251 - t406 * t363 + t385;
t5 = -qJD(6) * t34 - t247 * t27 + t251 * t37;
t4 = qJD(6) * t33 + t247 * t37 + t251 * t27;
t7 = [0, 0, 0, 0, 0, qJDD(1), t295, g(1) * t253 + g(2) * t250, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t246 * t369 - t310, -0.2e1 * t245 * t369 + t297, 0 (t295 + (t245 ^ 2 + t246 ^ 2) * t369) * pkin(1), qJDD(1) * t241 + 0.2e1 * t299, 0.2e1 * t249 * t325 - 0.2e1 * t328 * t336, t187, qJDD(1) * t242 - 0.2e1 * t299, t188, 0, t249 * t268 + t252 * t263, -t249 * t263 + t252 * t268 (t241 + t242) * t190 + t260 - t297, t191 * t218 - g(1) * (-pkin(2) * t227 + pkin(7) * t228 - t389) - g(2) * (pkin(2) * t228 + pkin(7) * t227 + t236) + t260 * t216, -t104 * t173 - t128 * t165, -t282 + t373, -t280, t105 * t172 + t129 * t163, t103, 0, t105 * t401 + t120 * t237 + t129 * t166 + t142 * t172 + t163 * t226 - t234 * t310 + t239 * t78, -t104 * t401 - t121 * t237 - t128 * t166 + t142 * t173 + t165 * t226 + t233 * t310 - t239 * t77, t104 * t120 - t105 * t121 + t128 * t93 - t129 * t94 - t163 * t77 - t165 * t78 + t172 * t302 - t173 * t40 - t297, -t302 * t121 + t94 * t77 + t40 * t120 + t93 * t78 + t142 * t401 + t166 * t226 - g(1) * (-t224 * t227 - t228 * t254 - t389) - g(2) * (t224 * t228 - t227 * t254 + t236) t125 * t67 + t271 * t89, t287 + t384, t284, t116 * t88 + t124 * t66, t65, 0, t119 * t116 + t123 * t88 + t81 * t124 + t134 * t66 - t214 * t310 - t68 * t237 - t26 * t239, t119 * t271 + t123 * t89 + t81 * t125 + t134 * t67 - t69 * t237 - t27 * t239 + t403, -t10 * t125 - t11 * t124 - t116 * t27 + t26 * t271 - t47 * t89 - t48 * t88 - t66 * t69 + t67 * t68 - t297, t11 * t69 + t48 * t27 - t10 * t68 - t47 * t26 + t81 * t134 + t123 * t119 - g(1) * (-t180 * t227 + t293) - g(2) * (-t227 * t238 + t338) -t109 * t272 - t352 * t43, -t324 + (t375 + (-t362 + t366) * qJD(6)) * t125 + t386, t383 + t400, t107 * t273 + t353 * t44, t262 + t291, t124 * t64 + t406 * t88, -g(1) * t138 - g(2) * t141 + t107 * t26 + t124 * t3 + t125 * t405 + t20 * t88 + t33 * t64 + t45 * t377 + t406 * t5 + t44 * t68, t45 * t376 - g(1) * t137 - g(2) * t140 + t109 * t26 - t406 * t4 - t124 * t2 - t21 * t88 - t34 * t64 - t43 * t68 + (t251 * t8 - t41) * t125, -t107 * t4 - t109 * t5 + t33 * t43 - t34 * t44 + t286 * t89 - t403 + (qJD(6) * t285 - t2 * t247 - t251 * t3) * t125, t2 * t34 + t21 * t4 + t3 * t33 + t20 * t5 + t8 * t68 + t45 * t26 - g(1) * t293 - g(2) * (pkin(5) * t345 + pkin(9) * t347 + t338) + (-g(1) * (-t180 + t402) + g(2) * t238) * t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t188, -t187, 0, t113 * t249 + t114 * t252 - g(3) + (-t148 * t249 + t149 * t252) * qJD(3), 0, 0, 0, 0, 0, 0, t103, t280, t282 + t373, -t128 * t94 - t129 * t93 - t172 * t40 - t173 * t302 - g(3), 0, 0, 0, 0, 0, 0, t65, -t284, -t287 + t384, -t10 * t124 + t11 * t125 - t47 * t88 + t48 * t89 - g(3), 0, 0, 0, 0, 0, 0, t262 - t291, t383 - t400, t324 + (qJD(6) * t281 - t375) * t125 + t386, t124 * t8 + t125 * t261 - t285 * t89 + t45 * t88 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322, t336 * t256, t326, t322, t325, qJDD(3), -t390 + t230 + (t149 - t348) * qJD(3) + (t270 - t408) * t249, g(3) * t249 + (t148 + t349) * qJD(3) + t270 * t252 - t321, 0, 0, t350, t110, t86, -t350, -t292, t237, -t97 * t239 + (-t163 * t335 + t237 * t399 - t239 * t333) * pkin(3) + t259, t98 * t239 + (-t165 * t335 - t237 * t248 - t239 * t313) * pkin(3) + t265 (t94 + t97) * t165 + (-t93 + t98) * t163 + (t399 * t104 - t105 * t248 + (-t163 * t399 + t165 * t248) * qJD(4)) * pkin(3), -t93 * t97 - t94 * t98 + (t399 * t40 - t390 - t248 * t302 + (-t248 * t93 + t399 * t94) * qJD(4) + (-qJD(1) * t166 + t297) * t249) * pkin(3), t411, t51, t55, -t411, t54, t237, -t116 * t139 + t157 * t237 - t239 * t372 + t264, -t139 * t271 - t158 * t237 - t239 * t371 + t269, -t116 * t371 - t157 * t67 - t158 * t66 + t271 * t372 + t290, -g(3) * t337 + t10 * t157 + t11 * t158 - t123 * t139 - t181 * t297 + t371 * t48 - t372 * t47, t16, t6, t15, t17, t14, -t361, t150 * t44 + t318 * t251 + t289 * t247 + t372 * t107 + (-t151 * t331 - t153 * t247 - t24) * t406 + t278, -t150 * t43 + t289 * t251 - t247 * t274 + t372 * t109 + (t151 * t332 - t153 * t251 + t25) * t406 + t283, t107 * t25 + t109 * t24 + (-t107 * t153 - t151 * t44 + (t109 * t151 - t20) * qJD(6)) * t251 + (t109 * t153 - t151 * t43 - t3 + (t107 * t151 - t21) * qJD(6)) * t247 + t277, t8 * t150 - t21 * t25 - t20 * t24 - g(1) * (t228 * t311 + t175) - g(2) * (t227 * t311 + t174) - g(3) * (t235 + t319) + t372 * t45 - t285 * t153 + t261 * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t350, t110, t86, -t350, -t292, t237, t94 * t239 + t259, t239 * t93 + t265, 0, 0, t411, t51, t55, -t411, t54, t237, t49 * t239 + (-t116 * t165 + t237 * t370) * pkin(4) + t264, t239 * t50 + (-t165 * t271 - t237 * t244) * pkin(4) + t269, t50 * t116 - t49 * t271 + (-t244 * t66 - t370 * t67) * pkin(4) + t290, t47 * t49 - t48 * t50 + (t10 * t370 + t11 * t244 - t123 * t165 + t412) * pkin(4), t16, t6, t15, t17, t14, -t361, -t107 * t49 - t406 * t22 + t217 * t44 + t288 * t247 + (-t314 + t318) * t251 + t278, -t109 * t49 + t406 * t23 - t217 * t43 + t288 * t251 + (-t274 + t314) * t247 + t283, t107 * t23 + t109 * t22 - t388 + (-t374 - t375) * t215 + (t215 * t281 + t286) * qJD(6) + t277, t8 * t217 - t21 * t23 - t20 * t22 - t45 * t49 - g(1) * (t228 * t298 + t175) - g(2) * (t227 * t298 + t174) - g(3) * t319 + t261 * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 + t359, t67 - t356, -t357 - t360, t116 * t48 + t271 * t47 + t310 + t81, 0, 0, 0, 0, 0, 0, t276 - t368, -t364 + t407 (t43 - t367) * t251 + t109 * t304 + t385, -t45 * t271 + (t3 + t414) * t251 + (t2 - t413) * t247 + t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t365, -t107 ^ 2 + t109 ^ 2, t107 * t406 - t43, -t365, -t305 + (-qJD(6) + t406) * t109, t64, -g(1) * t140 + g(2) * t137 - t109 * t45 + t247 * t275 - t331 * t46 + t18 + t414, g(1) * t141 - g(2) * t138 + t107 * t45 + t413 + (qJD(6) * t46 - t19) * t247 + t275 * t251, 0, 0;];
tau_reg  = t7;
