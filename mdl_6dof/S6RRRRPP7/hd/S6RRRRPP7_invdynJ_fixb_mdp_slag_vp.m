% Calculate vector of inverse dynamics joint torques for
% S6RRRRPP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,theta5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPP7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPP7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPP7_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRRPP7_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:27:08
% EndTime: 2019-03-09 21:27:43
% DurationCPUTime: 26.60s
% Computational Cost: add. (19447->840), mult. (47234->1094), div. (0->0), fcn. (37376->14), ass. (0->346)
t906 = sin(pkin(6));
t1021 = qJD(1) * t906;
t914 = cos(qJ(2));
t995 = t914 * t1021;
t860 = -qJD(3) + t995;
t911 = sin(qJ(2));
t1085 = cos(pkin(6));
t981 = t1085 * qJD(1);
t970 = pkin(1) * t981;
t818 = pkin(8) * t995 + t911 * t970;
t910 = sin(qJ(3));
t913 = cos(qJ(3));
t1120 = t818 + t860 * (pkin(3) * t910 - pkin(10) * t913);
t1017 = qJD(3) * t913;
t909 = sin(qJ(4));
t912 = cos(qJ(4));
t996 = t911 * t1021;
t780 = t909 * t913 * t995 - t912 * t996;
t1114 = -t1017 * t909 + t780;
t1050 = t913 * t914;
t1054 = t909 * t911;
t781 = (t1050 * t912 + t1054) * t1021;
t1119 = -t1017 * t912 + t781;
t1018 = qJD(3) * t910;
t1087 = pkin(9) * t909;
t1118 = t1018 * t1087 - t1120 * t912;
t1009 = qJDD(1) * t911;
t976 = t1085 * qJDD(1);
t880 = t976 + qJDD(2);
t955 = t981 + qJD(2);
t939 = qJD(3) * t955;
t1019 = qJD(2) * t914;
t992 = t910 * t1019;
t686 = (qJD(1) * (t1017 * t911 + t992) + t910 * t1009) * t906 - t913 * t880 + t910 * t939;
t680 = qJDD(4) + t686;
t1013 = qJD(4) * t912;
t815 = -pkin(8) * t996 + t914 * t970;
t963 = pkin(2) * t911 - pkin(9) * t914;
t816 = t963 * t1021;
t1029 = t815 * t913 + t816 * t910;
t705 = pkin(10) * t996 + t1029;
t856 = -pkin(3) * t913 - pkin(10) * t910 - pkin(2);
t1117 = -t856 * t1013 + t1120 * t909 + t912 * t705;
t1012 = qJD(5) * t912;
t1051 = t912 * t913;
t1089 = pkin(4) * t910;
t890 = pkin(9) * t1051;
t971 = t910 * t995;
t1116 = -pkin(4) * t971 + qJ(5) * t781 + t705 * t909 - t910 * t1012 + (-qJ(5) * t1051 + t1089) * qJD(3) + (-t890 + (qJ(5) * t910 - t856) * t909) * qJD(4) + t1118;
t1053 = t910 * t912;
t1086 = pkin(9) * qJD(3);
t1115 = -qJ(5) * t780 - (-qJ(5) * qJD(4) - t1086) * t1053 - (-qJD(5) * t910 + (-pkin(9) * qJD(4) - qJ(5) * qJD(3)) * t913) * t909 + t1117;
t1095 = sin(qJ(1));
t1096 = cos(qJ(1));
t966 = t1085 * t1096;
t830 = t1095 * t911 - t914 * t966;
t1070 = t830 * t912;
t831 = t1095 * t914 + t911 * t966;
t998 = t906 * t1096;
t757 = t831 * t913 - t910 * t998;
t1078 = t757 * t909;
t1113 = t1070 - t1078;
t1112 = pkin(4) * t909 + pkin(9);
t792 = t910 * t955 + t913 * t996;
t731 = t792 * t909 + t860 * t912;
t733 = t792 * t912 - t860 * t909;
t905 = sin(pkin(11));
t907 = cos(pkin(11));
t651 = t731 * t907 + t733 * t905;
t972 = t910 * t996;
t790 = -t913 * t955 + t972;
t783 = qJD(4) + t790;
t1111 = t651 * t783;
t840 = t905 * t912 + t907 * t909;
t826 = t840 * qJD(4);
t1110 = t790 * t840 + t826;
t1015 = qJD(4) * t909;
t839 = t905 * t909 - t907 * t912;
t1040 = -t1013 * t907 + t1015 * t905 + t790 * t839;
t1014 = qJD(4) * t910;
t1039 = t1014 * t839 - t1017 * t840 + t780 * t907 + t781 * t905;
t1038 = -t1114 * t905 + t1119 * t907 + t826 * t910;
t986 = t906 * t1009;
t1010 = qJD(1) * qJD(2);
t987 = t914 * t1010;
t1109 = -t906 * t987 - t986;
t1108 = t1018 - t971;
t895 = pkin(4) * t912 + pkin(3);
t908 = -qJ(5) - pkin(10);
t1107 = -t895 * t913 + t908 * t910 - pkin(2);
t1071 = t830 * t909;
t1106 = t757 * t912 + t1071;
t902 = qJ(4) + pkin(11);
t897 = sin(t902);
t898 = cos(t902);
t693 = t757 * t897 - t830 * t898;
t694 = t757 * t898 + t830 * t897;
t956 = -t731 * t905 + t733 * t907;
t1105 = t956 ^ 2;
t1047 = t1115 * t905 + t1116 * t907;
t1046 = -t1115 * t907 + t1116 * t905;
t1060 = t906 * t911;
t881 = pkin(8) * t1060;
t982 = t914 * t1085;
t1102 = pkin(1) * t982 - t881;
t808 = -pkin(2) * t1085 - t1102;
t828 = t1060 * t910 - t1085 * t913;
t829 = t1060 * t913 + t1085 * t910;
t700 = pkin(3) * t828 - pkin(10) * t829 + t808;
t1059 = t906 * t914;
t1094 = pkin(1) * t911;
t1025 = pkin(8) * t1059 + t1085 * t1094;
t809 = pkin(9) * t1085 + t1025;
t1026 = -pkin(2) * t1059 - pkin(9) * t1060;
t810 = -pkin(1) * t906 + t1026;
t1031 = t809 * t913 + t810 * t910;
t702 = -pkin(10) * t1059 + t1031;
t1042 = t700 * t909 + t702 * t912;
t771 = pkin(9) * t955 + t818;
t953 = -pkin(2) * t914 - pkin(9) * t911 - pkin(1);
t782 = t953 * t1021;
t683 = -t771 * t910 + t782 * t913;
t716 = pkin(3) * t792 + pkin(10) * t790;
t711 = t912 * t716;
t626 = qJ(5) * t790 * t912 + pkin(4) * t792 - t683 * t909 + t711;
t1044 = t683 * t912 + t716 * t909;
t1075 = t790 * t909;
t637 = qJ(5) * t1075 + t1044;
t983 = qJD(4) * t908;
t825 = t909 * t983 + t1012;
t937 = -qJD(5) * t909 + t912 * t983;
t1036 = (-t626 + t937) * t907 + (t637 - t825) * t905;
t793 = t910 * t815;
t704 = -pkin(3) * t996 - t816 * t913 + t793;
t1103 = -pkin(4) * t1114 + pkin(9) * t1017 + t1013 * t1089 - t704;
t684 = t771 * t913 + t782 * t910;
t1101 = -t684 + (t1015 + t1075) * pkin(4);
t685 = -qJD(3) * t972 + t910 * t880 + (t939 - t1109) * t913;
t1008 = qJDD(1) * t914;
t878 = t906 * t1008;
t988 = t911 * t1010;
t969 = t906 * t988;
t812 = qJDD(3) - t878 + t969;
t645 = qJD(4) * t733 + t685 * t909 - t812 * t912;
t1100 = pkin(4) * t645 + qJDD(5);
t670 = pkin(3) * t860 - t683;
t646 = pkin(4) * t731 + qJD(5) + t670;
t598 = pkin(5) * t651 - qJ(6) * t956 + t646;
t965 = t1085 * t1095;
t833 = t1096 * t914 - t911 * t965;
t997 = t906 * t1095;
t761 = t833 * t913 + t910 * t997;
t832 = t1096 * t911 + t914 * t965;
t697 = t761 * t897 - t832 * t898;
t740 = t1059 * t898 + t829 * t897;
t952 = qJD(2) * t970;
t967 = pkin(1) * t976;
t1000 = -pkin(8) * t878 - t911 * t967 - t914 * t952;
t933 = -pkin(8) * t969 - t1000;
t714 = pkin(9) * t880 + t933;
t950 = t963 * qJD(2);
t721 = (qJD(1) * t950 + qJDD(1) * t953) * t906;
t947 = t1017 * t782 - t1018 * t771 + t714 * t913 + t721 * t910;
t616 = pkin(10) * t812 + t947;
t974 = pkin(8) * t1109 - t911 * t952 + t914 * t967;
t715 = -pkin(2) * t880 - t974;
t622 = pkin(3) * t686 - pkin(10) * t685 + t715;
t770 = -pkin(2) * t955 - t815;
t666 = pkin(3) * t790 - pkin(10) * t792 + t770;
t671 = -pkin(10) * t860 + t684;
t633 = t666 * t909 + t671 * t912;
t577 = -qJD(4) * t633 - t909 * t616 + t622 * t912;
t644 = -t1013 * t860 - t1015 * t792 + t685 * t912 + t812 * t909;
t571 = pkin(4) * t680 - qJ(5) * t644 - qJD(5) * t733 + t577;
t945 = -t1013 * t666 + t1015 * t671 - t616 * t912 - t622 * t909;
t574 = -qJ(5) * t645 - qJD(5) * t731 - t945;
t562 = t571 * t907 - t574 * t905;
t984 = -qJDD(6) + t562;
t1099 = g(1) * t697 + g(2) * t693 + g(3) * t740 - t598 * t956 + t984;
t1097 = t783 ^ 2;
t915 = qJD(1) ^ 2;
t1093 = pkin(3) * t812;
t1003 = t912 * t1059;
t754 = t829 * t909 + t1003;
t1091 = pkin(4) * t754;
t1088 = pkin(5) * t680;
t614 = -qJ(5) * t731 + t633;
t610 = t907 * t614;
t632 = t666 * t912 - t671 * t909;
t613 = -qJ(5) * t733 + t632;
t586 = t613 * t905 + t610;
t1084 = t586 * t956;
t1083 = t614 * t905;
t1082 = t644 * t909;
t1081 = t680 * t912;
t1080 = t731 * t783;
t1079 = t733 * t783;
t1077 = t761 * t909;
t977 = t783 * t912;
t1076 = t790 * t860;
t1074 = t792 * t860;
t1069 = t832 * t909;
t1068 = t832 * t912;
t1067 = t860 * t910;
t1066 = t880 * MDP(8);
t1064 = t897 * t913;
t1063 = t898 * t913;
t901 = t906 ^ 2;
t1062 = t901 * t915;
t1056 = t909 * t680;
t1055 = t909 * t910;
t1052 = t910 * t914;
t563 = t571 * t905 + t574 * t907;
t993 = t906 * t1019;
t753 = -qJD(3) * t828 + t913 * t993;
t1020 = qJD(2) * t911;
t994 = t906 * t1020;
t665 = -qJD(4) * t754 + t753 * t912 + t909 * t994;
t752 = qJD(3) * t829 + t906 * t992;
t1004 = t909 * t1059;
t755 = t829 * t912 - t1004;
t817 = t906 * t950;
t819 = t1102 * qJD(2);
t946 = t1017 * t810 - t1018 * t809 + t817 * t910 + t819 * t913;
t648 = pkin(10) * t994 + t946;
t820 = t1025 * qJD(2);
t658 = pkin(3) * t752 - pkin(10) * t753 + t820;
t921 = -qJD(4) * t1042 - t648 * t909 + t658 * t912;
t579 = pkin(4) * t752 - qJ(5) * t665 - qJD(5) * t755 + t921;
t664 = -qJD(4) * t1004 + t1013 * t829 + t753 * t909 - t912 * t994;
t944 = t1013 * t700 - t1015 * t702 + t648 * t912 + t658 * t909;
t585 = -qJ(5) * t664 - qJD(5) * t754 + t944;
t568 = t579 * t905 + t585 * t907;
t608 = pkin(4) * t783 + t613;
t584 = t608 * t905 + t610;
t1049 = qJ(6) * t1108 - qJD(6) * t913 + t1046;
t1048 = -pkin(5) * t1108 - t1047;
t980 = t700 * t912 - t702 * t909;
t624 = pkin(4) * t828 - qJ(5) * t755 + t980;
t634 = -qJ(5) * t754 + t1042;
t593 = t624 * t905 + t634 * t907;
t596 = t626 * t905 + t637 * t907;
t814 = t1053 * t907 - t1055 * t905;
t1045 = -pkin(5) * t1039 + qJ(6) * t1038 - qJD(6) * t814 + t1103;
t1043 = pkin(5) * t1110 + qJ(6) * t1040 - qJD(6) * t840 + t1101;
t1035 = pkin(5) * t792 - t1036;
t590 = qJ(6) * t792 + t596;
t729 = t825 * t907 + t905 * t937;
t1034 = t729 - t590;
t756 = t831 * t910 + t913 * t998;
t1033 = -t756 * t895 - t757 * t908;
t760 = t833 * t910 - t913 * t997;
t1032 = -t760 * t895 - t761 * t908;
t842 = t912 * t856;
t743 = -qJ(5) * t1053 + t842 + (-pkin(4) - t1087) * t913;
t1024 = t856 * t909 + t890;
t764 = -qJ(5) * t1055 + t1024;
t673 = t743 * t905 + t764 * t907;
t1030 = -t828 * t895 - t829 * t908;
t1023 = pkin(4) * t1055 + pkin(9) * t910;
t903 = t911 ^ 2;
t1022 = -t914 ^ 2 + t903;
t1016 = qJD(4) * t783;
t587 = t613 * t907 - t1083;
t1011 = qJD(6) - t587;
t1007 = 0.2e1 * t901;
t1005 = t914 * t1062;
t1002 = qJ(6) * t680 + t563;
t989 = t908 * t909;
t603 = t644 * t905 + t645 * t907;
t978 = -t809 * t910 + t810 * t913;
t975 = t1017 * t771 + t1018 * t782 + t714 * t910 - t721 * t913;
t964 = t906 * t915 * t1085;
t961 = -g(1) * t756 + g(2) * t760;
t960 = g(1) * t833 + g(2) * t831;
t701 = pkin(3) * t1059 - t978;
t958 = -pkin(5) * t898 - qJ(6) * t897;
t567 = t579 * t907 - t585 * t905;
t583 = t608 * t907 - t1083;
t592 = t624 * t907 - t634 * t905;
t604 = t644 * t907 - t645 * t905;
t672 = t743 * t907 - t764 * t905;
t954 = 0.2e1 * t981 + qJD(2);
t951 = -t1017 * t809 - t1018 * t810 + t817 * t913 - t819 * t910;
t617 = t975 - t1093;
t948 = -pkin(10) * t680 + t670 * t783;
t943 = t906 * (t976 + t880);
t942 = g(1) * t760 + g(2) * t756 + g(3) * t828;
t941 = g(1) * t761 + g(2) * t757 + g(3) * t829;
t940 = t701 + t1091;
t936 = -g(1) * t832 - g(2) * t830 + g(3) * t1059;
t935 = -g(3) * t1060 - t960;
t934 = pkin(1) * t1096 + pkin(2) * t833 + pkin(4) * t1069 + pkin(8) * t997 + pkin(9) * t832 - t760 * t908 + t761 * t895;
t932 = -t1026 + (pkin(4) * t1054 + t1050 * t895 - t1052 * t908) * t906;
t931 = -t715 - t936;
t930 = t1107 * t830 + t1112 * t831;
t929 = t1107 * t832 + t1112 * t833;
t928 = -pkin(9) * t812 - t770 * t860;
t927 = t936 * t910;
t594 = t617 + t1100;
t649 = -pkin(3) * t994 - t951;
t923 = -pkin(1) * t1095 - pkin(2) * t831 - pkin(4) * t1071 + pkin(8) * t998 - pkin(9) * t830 + t756 * t908 - t757 * t895;
t922 = t942 - t975;
t920 = pkin(9) * t1016 + t936;
t919 = pkin(10) * t1016 + t617 - t942;
t862 = t908 * t912;
t768 = -t862 * t905 - t907 * t989;
t769 = -t862 * t907 + t905 * t989;
t918 = -t603 * t769 + t604 * t768 - t651 * t729 - t941;
t917 = pkin(4) * t664 + t649;
t564 = pkin(5) * t603 - qJ(6) * t604 - qJD(6) * t956 + t594;
t894 = -pkin(4) * t907 - pkin(5);
t891 = pkin(4) * t905 + qJ(6);
t813 = t840 * t910;
t806 = pkin(4) * t1068;
t802 = pkin(4) * t1070;
t773 = (t1050 * t898 + t897 * t911) * t906;
t772 = (t1050 * t897 - t898 * t911) * t906;
t741 = -t1059 * t897 + t829 * t898;
t734 = pkin(5) * t839 - qJ(6) * t840 - t895;
t720 = -t1063 * t832 + t833 * t897;
t719 = -t1064 * t832 - t833 * t898;
t718 = -t1063 * t830 + t831 * t897;
t717 = -t1064 * t830 - t831 * t898;
t707 = t761 * t912 + t1069;
t706 = t1068 - t1077;
t703 = pkin(5) * t813 - qJ(6) * t814 + t1023;
t698 = t761 * t898 + t832 * t897;
t675 = -t754 * t905 + t755 * t907;
t674 = t754 * t907 + t755 * t905;
t668 = pkin(5) * t913 - t672;
t667 = -qJ(6) * t913 + t673;
t630 = -t664 * t905 + t665 * t907;
t628 = t664 * t907 + t665 * t905;
t607 = pkin(4) * t733 + pkin(5) * t956 + qJ(6) * t651;
t605 = pkin(5) * t674 - qJ(6) * t675 + t940;
t589 = -pkin(5) * t828 - t592;
t588 = qJ(6) * t828 + t593;
t581 = qJ(6) * t783 + t584;
t580 = -pkin(5) * t783 + qJD(6) - t583;
t575 = pkin(5) * t628 - qJ(6) * t630 - qJD(6) * t675 + t917;
t566 = -pkin(5) * t752 - t567;
t565 = qJ(6) * t752 + qJD(6) * t828 + t568;
t561 = -t984 - t1088;
t560 = qJD(6) * t783 + t1002;
t1 = [(-g(1) * t923 - g(2) * t934 + t562 * t592 + t563 * t593 + t583 * t567 + t584 * t568 + t594 * t940 + t646 * t917) * MDP(26) + (-t1020 * t860 - t812 * t914) * t906 * MDP(15) + (t946 * t860 - t1031 * t812 + t820 * t792 + t808 * t685 + t715 * t829 + t770 * t753 + (-t1020 * t684 + t914 * t947) * t906 + t961) * MDP(17) + (-t819 * t955 - t1025 * t880 - t933 * t1085 - g(1) * t830 + g(2) * t832 + (-t987 - t1009) * pkin(1) * t1007) * MDP(10) + (-t820 * t955 - t881 * t880 + t974 * t1085 + g(1) * t831 - g(2) * t833 + (t880 * t982 + (-t988 + t1008) * t1007) * pkin(1)) * MDP(9) + t1085 * t1066 + (0.2e1 * (t1008 * t911 - t1010 * t1022) * MDP(5) + (qJDD(1) * t903 + 0.2e1 * t911 * t987) * MDP(4)) * t901 + (-t951 * t860 + t978 * t812 + t820 * t790 + t808 * t686 + t715 * t828 + t770 * t752 + g(1) * t757 - g(2) * t761 + (t1020 * t683 + t914 * t975) * t906) * MDP(16) + (t911 * t943 + t954 * t993) * MDP(6) + (t914 * t943 - t954 * t994) * MDP(7) + (t752 * t860 - t812 * t828 + (-t1020 * t790 + t686 * t914) * t906) * MDP(14) + (-t753 * t860 + t812 * t829 + (t1020 * t792 - t685 * t914) * t906) * MDP(13) + (g(1) * t1095 - g(2) * t1096) * MDP(2) + (g(1) * t1096 + g(2) * t1095) * MDP(3) + (g(1) * t1113 - g(2) * t706 - t1042 * t680 + t617 * t755 - t633 * t752 + t701 * t644 + t649 * t733 + t670 * t665 - t944 * t783 + t945 * t828) * MDP(24) + (-t562 * t675 - t563 * t674 - t567 * t956 - t568 * t651 - t583 * t630 - t584 * t628 - t592 * t604 - t593 * t603 - t961) * MDP(25) + (-t560 * t674 + t561 * t675 - t565 * t651 + t566 * t956 + t580 * t630 - t581 * t628 - t588 * t603 + t589 * t604 - t961) * MDP(28) + (-t685 * t828 - t686 * t829 - t752 * t792 - t753 * t790) * MDP(12) + (t685 * t829 + t753 * t792) * MDP(11) + (-t645 * t828 - t664 * t783 - t680 * t754 - t731 * t752) * MDP(21) + (t644 * t828 + t665 * t783 + t680 * t755 + t733 * t752) * MDP(20) + (t680 * t828 + t752 * t783) * MDP(22) + (-t644 * t754 - t645 * t755 - t664 * t733 - t665 * t731) * MDP(19) + (t644 * t755 + t665 * t733) * MDP(18) + (g(1) * t693 - g(2) * t697 + t560 * t828 - t564 * t675 + t565 * t783 - t575 * t956 + t581 * t752 + t588 * t680 - t598 * t630 - t604 * t605) * MDP(29) + (g(1) * t694 - g(2) * t698 - t561 * t828 + t564 * t674 - t566 * t783 + t575 * t651 - t580 * t752 - t589 * t680 + t598 * t628 + t603 * t605) * MDP(27) + (t560 * t588 + t581 * t565 + t564 * t605 + t598 * t575 + t561 * t589 + t580 * t566 - g(1) * (-pkin(5) * t694 - qJ(6) * t693 + t923) - g(2) * (pkin(5) * t698 + qJ(6) * t697 + t934)) * MDP(30) + (g(1) * t1106 - g(2) * t707 + t577 * t828 + t617 * t754 + t632 * t752 + t701 * t645 + t649 * t731 + t670 * t664 + t980 * t680 + t921 * t783) * MDP(23) + qJDD(1) * MDP(1); (t911 * t964 + t878) * MDP(7) - t911 * MDP(4) * t1005 + (t860 * t1018 + t913 * t812 + (-t1052 * t860 + t790 * t911) * t1021) * MDP(14) + (t560 * t667 + t564 * t703 + t561 * t668 - g(1) * (pkin(5) * t720 + qJ(6) * t719 + t929) - g(2) * (pkin(5) * t718 + qJ(6) * t717 + t930) - g(3) * (pkin(5) * t773 + qJ(6) * t772 + t932) + t1045 * t598 + t1049 * t581 + t1048 * t580) * MDP(30) + (-t860 * t1017 + t812 * t910 + (t1050 * t860 - t792 * t911) * t1021) * MDP(13) + (-t1074 * t913 + t685 * t910) * MDP(11) + (-g(1) * t720 - g(2) * t718 - g(3) * t773 - t1039 * t598 + t1045 * t651 - t1048 * t783 + t1067 * t580 + t561 * t913 + t564 * t813 + t603 * t703 - t668 * t680) * MDP(27) + (-pkin(2) * t685 - t1029 * t860 + t684 * t996 - t818 * t792 + t928 * t913 + (-t1086 * t860 - t931) * t910) * MDP(17) + (-t683 * t996 - pkin(2) * t686 - t818 * t790 - t793 * t860 + t928 * t910 + ((t816 + t1086) * t860 + t931) * t913) * MDP(16) + (-t914 * t964 + t986) * MDP(6) + t1022 * MDP(5) * t1062 + (-g(1) * t929 - g(2) * t930 - g(3) * t932 + t594 * t1023 + t1046 * t584 + t1047 * t583 + t1103 * t646 + t562 * t672 + t563 * t673) * MDP(26) + (pkin(1) * t1005 + t815 * t955 + (pkin(8) * t1010 + g(3)) * t1060 + t960 + t1000) * MDP(10) + (t645 * t913 + t1114 * t783 + (-t1013 * t783 + t731 * t860 - t1056) * t910) * MDP(21) + (-t1067 * t783 - t680 * t913) * MDP(22) + (-g(1) * t719 - g(2) * t717 - g(3) * t772 + t1038 * t598 - t1045 * t956 + t1049 * t783 - t1067 * t581 - t560 * t913 - t564 * t814 - t604 * t703 + t667 * t680) * MDP(29) + (t644 * t1053 + (-t1014 * t909 - t1119) * t733) * MDP(18) + (-t644 * t913 - t1119 * t783 + (-t1015 * t783 - t733 * t860 + t1081) * t910) * MDP(20) + (t1062 * t1094 + t818 * t955 - t936 + t974) * MDP(9) + ((t685 + t1076) * t913 + (-t686 + t1074) * t910) * MDP(12) + (t731 * t781 + t733 * t780 + (-t731 * t912 - t733 * t909) * t1017 + (-t1082 - t645 * t912 + (t731 * t909 - t733 * t912) * qJD(4)) * t910) * MDP(19) + t860 * MDP(15) * t996 + t1066 + (-t1038 * t580 + t1039 * t581 + t1048 * t956 - t1049 * t651 - t560 * t813 + t561 * t814 - t603 * t667 + t604 * t668 - t927) * MDP(28) + (t1038 * t583 + t1039 * t584 - t1046 * t651 - t1047 * t956 - t562 * t814 - t563 * t813 - t603 * t673 - t604 * t672 - t927) * MDP(25) + (-t1024 * t680 - t704 * t733 - t670 * t781 + t1117 * t783 + t935 * t912 + (-t945 + (pkin(9) * t733 + t670 * t912) * qJD(3) + t920 * t909) * t913 + (-t670 * t1015 + t617 * t912 + t860 * t633 + (qJD(3) * t977 + t644) * pkin(9)) * t910) * MDP(24) + (-t670 * t780 + t842 * t680 - t704 * t731 + t1118 * t783 + ((-qJD(4) * t856 + t705) * t783 + t935) * t909 + (t670 * t909 * qJD(3) - t577 + (qJD(3) * t731 - t1056) * pkin(9) - t920 * t912) * t913 + (pkin(9) * t645 + t1013 * t670 + t617 * t909 - t632 * t860) * t910) * MDP(23); -t790 ^ 2 * MDP(12) + (t685 - t1076) * MDP(13) + (-t1074 - t686) * MDP(14) + t812 * MDP(15) + (-t684 * t860 + t922) * MDP(16) + (-t683 * t860 + t770 * t790 + t941 - t947) * MDP(17) + (t733 * t977 + t1082) * MDP(18) + ((t644 - t1080) * t912 + (-t645 - t1079) * t909) * MDP(19) + (t783 * t977 + t1056) * MDP(20) + (-t1097 * t909 + t1081) * MDP(21) + (-pkin(3) * t645 - t684 * t731 - t711 * t783 + (t683 * t783 + t948) * t909 - t919 * t912) * MDP(23) + (-pkin(3) * t644 + t1044 * t783 - t684 * t733 + t909 * t919 + t912 * t948) * MDP(24) + (-t1036 * t956 + t1040 * t583 - t1110 * t584 - t562 * t840 - t563 * t839 + t596 * t651 + t918) * MDP(25) + (t563 * t769 - t562 * t768 - t594 * t895 - g(1) * t1032 - g(2) * t1033 - g(3) * t1030 + t1101 * t646 + (t729 - t596) * t584 + t1036 * t583) * MDP(26) + (-t1035 * t783 + t1043 * t651 + t1110 * t598 + t564 * t839 + t603 * t734 - t680 * t768 + t898 * t942) * MDP(27) + (t1035 * t956 - t1040 * t580 - t1110 * t581 - t560 * t839 + t561 * t840 + t590 * t651 + t918) * MDP(28) + (t1034 * t783 + t1040 * t598 - t1043 * t956 - t564 * t840 - t604 * t734 + t680 * t769 + t897 * t942) * MDP(29) + (t560 * t769 + t564 * t734 + t561 * t768 - g(1) * (t760 * t958 + t1032) - g(2) * (t756 * t958 + t1033) - g(3) * (t828 * t958 + t1030) + t1043 * t598 + t1034 * t581 + t1035 * t580) * MDP(30) + (MDP(11) * t790 + MDP(12) * t792 - MDP(16) * t770 - MDP(20) * t733 + MDP(21) * t731 - MDP(22) * t783 - MDP(23) * t632 + MDP(24) * t633 + MDP(27) * t580 - MDP(29) * t581) * t792; t733 * t731 * MDP(18) + (-t731 ^ 2 + t733 ^ 2) * MDP(19) + (t644 + t1080) * MDP(20) + (t1079 - t645) * MDP(21) + t680 * MDP(22) + (-g(1) * t706 - g(2) * t1113 + g(3) * t754 + t633 * t783 - t670 * t733 + t577) * MDP(23) + (g(1) * t707 + g(2) * t1106 + g(3) * t755 + t632 * t783 + t670 * t731 + t945) * MDP(24) + (t584 * t956 - t1084 + (-t603 * t905 - t604 * t907) * pkin(4) + (-t583 + t587) * t651) * MDP(25) + (-g(1) * t806 - g(2) * t802 + t583 * t586 - t584 * t587 + (g(3) * t1003 + t562 * t907 + t563 * t905 - t646 * t733 + t909 * t941) * pkin(4)) * MDP(26) + (t586 * t783 - t607 * t651 + (pkin(5) - t894) * t680 + t1099) * MDP(27) + (t581 * t956 - t603 * t891 + t604 * t894 - t1084 + (-t1011 + t580) * t651) * MDP(28) + (-g(1) * t698 - g(2) * t694 - g(3) * t741 - t598 * t651 + t607 * t956 + t680 * t891 + (0.2e1 * qJD(6) - t587) * t783 + t1002) * MDP(29) + (t560 * t891 + t561 * t894 - t598 * t607 - t580 * t586 - g(1) * (-pkin(4) * t1077 - pkin(5) * t697 + qJ(6) * t698 + t806) - g(2) * (-pkin(4) * t1078 - pkin(5) * t693 + qJ(6) * t694 + t802) - g(3) * (-pkin(5) * t740 + qJ(6) * t741 - t1091) + t1011 * t581) * MDP(30); (t583 * t956 + t584 * t651 - t1093 + t1100 - t922) * MDP(26) + (t783 * t956 + t603) * MDP(27) + (-t604 + t1111) * MDP(29) + (-t580 * t956 + t581 * t651 + t564 - t942) * MDP(30) + (MDP(25) + MDP(28)) * (-t651 ^ 2 - t1105); (t604 + t1111) * MDP(28) + (-t1097 - t1105) * MDP(29) + (-t581 * t783 - t1088 - t1099) * MDP(30) + (t651 * t956 - t680) * MDP(27);];
tau  = t1;
