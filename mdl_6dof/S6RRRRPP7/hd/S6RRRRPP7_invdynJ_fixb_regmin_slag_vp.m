% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,theta5]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP7_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP7_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPP7_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:26:35
% EndTime: 2019-03-09 21:27:08
% DurationCPUTime: 17.06s
% Computational Cost: add. (19358->748), mult. (47134->998), div. (0->0), fcn. (37376->14), ass. (0->346)
t355 = cos(qJ(2));
t347 = sin(pkin(6));
t461 = qJD(1) * t347;
t435 = t355 * t461;
t301 = -qJD(3) + t435;
t352 = sin(qJ(2));
t513 = cos(pkin(6));
t422 = t513 * qJD(1);
t411 = pkin(1) * t422;
t259 = pkin(8) * t435 + t352 * t411;
t351 = sin(qJ(3));
t354 = cos(qJ(3));
t559 = t259 + t301 * (pkin(3) * t351 - pkin(10) * t354);
t353 = cos(qJ(4));
t458 = qJD(3) * t351;
t350 = sin(qJ(4));
t527 = pkin(9) * t350;
t558 = -t353 * t559 + t458 * t527;
t436 = t352 * t461;
t221 = t350 * t354 * t435 - t353 * t436;
t457 = qJD(3) * t354;
t553 = -t350 * t457 + t221;
t482 = t354 * t355;
t487 = t350 * t352;
t222 = (t353 * t482 + t487) * t461;
t557 = -t353 * t457 + t222;
t256 = -pkin(8) * t436 + t355 * t411;
t404 = pkin(2) * t352 - pkin(9) * t355;
t257 = t404 * t461;
t469 = t354 * t256 + t351 * t257;
t146 = pkin(10) * t436 + t469;
t297 = -pkin(3) * t354 - pkin(10) * t351 - pkin(2);
t453 = qJD(4) * t353;
t556 = t353 * t146 - t297 * t453 + t350 * t559;
t417 = t513 * qJDD(1);
t321 = t417 + qJDD(2);
t396 = t422 + qJD(2);
t380 = qJD(3) * t396;
t459 = qJD(2) * t355;
t432 = t351 * t459;
t450 = qJDD(1) * t352;
t127 = -t354 * t321 + t347 * (qJD(1) * (t352 * t457 + t432) + t351 * t450) + t351 * t380;
t121 = qJDD(4) + t127;
t483 = t353 * t354;
t331 = pkin(9) * t483;
t412 = t351 * t435;
t452 = qJD(5) * t353;
t529 = pkin(4) * t351;
t555 = -pkin(4) * t412 + qJ(5) * t222 + t146 * t350 - t351 * t452 + (-qJ(5) * t483 + t529) * qJD(3) + (-t331 + (qJ(5) * t351 - t297) * t350) * qJD(4) + t558;
t486 = t351 * t353;
t520 = pkin(9) * qJD(3);
t554 = qJ(5) * t221 + (-qJ(5) * qJD(4) - t520) * t486 + (-qJD(5) * t351 + (-pkin(9) * qJD(4) - qJ(5) * qJD(3)) * t354) * t350 - t556;
t535 = cos(qJ(1));
t407 = t513 * t535;
t534 = sin(qJ(1));
t271 = t352 * t534 - t355 * t407;
t502 = t271 * t353;
t272 = t352 * t407 + t355 * t534;
t438 = t347 * t535;
t198 = t272 * t354 - t351 * t438;
t510 = t198 * t350;
t552 = t502 - t510;
t551 = pkin(4) * t350 + pkin(9);
t413 = t351 * t436;
t231 = -t354 * t396 + t413;
t224 = qJD(4) + t231;
t233 = t351 * t396 + t354 * t436;
t172 = t233 * t350 + t353 * t301;
t174 = t233 * t353 - t301 * t350;
t346 = sin(pkin(11));
t348 = cos(pkin(11));
t92 = t348 * t172 + t174 * t346;
t550 = t224 * t92;
t281 = t346 * t353 + t348 * t350;
t267 = t281 * qJD(4);
t549 = t281 * t231 + t267;
t280 = t346 * t350 - t348 * t353;
t455 = qJD(4) * t350;
t477 = t280 * t231 + t346 * t455 - t348 * t453;
t454 = qJD(4) * t351;
t476 = t348 * t221 + t222 * t346 + t280 * t454 - t281 * t457;
t475 = t267 * t351 - t346 * t553 + t348 * t557;
t426 = t347 * t450;
t451 = qJD(1) * qJD(2);
t427 = t347 * t451;
t548 = -t355 * t427 - t426;
t547 = t412 - t458;
t336 = pkin(4) * t353 + pkin(3);
t349 = -qJ(5) - pkin(10);
t546 = -t336 * t354 + t349 * t351 - pkin(2);
t343 = qJ(4) + pkin(11);
t338 = sin(t343);
t339 = cos(t343);
t134 = t198 * t338 - t271 * t339;
t135 = t198 * t339 + t271 * t338;
t503 = t271 * t350;
t545 = t198 * t353 + t503;
t397 = -t172 * t346 + t348 * t174;
t544 = t397 ^ 2;
t342 = t347 ^ 2;
t448 = 0.2e1 * t342;
t523 = -t554 * t346 + t348 * t555;
t522 = t346 * t555 + t554 * t348;
t424 = qJD(4) * t349;
t266 = t350 * t424 + t452;
t378 = -qJD(5) * t350 + t353 * t424;
t212 = pkin(9) * t396 + t259;
t394 = -pkin(2) * t355 - pkin(9) * t352 - pkin(1);
t223 = t394 * t461;
t124 = -t351 * t212 + t223 * t354;
t157 = pkin(3) * t233 + pkin(10) * t231;
t152 = t353 * t157;
t67 = qJ(5) * t231 * t353 + pkin(4) * t233 - t124 * t350 + t152;
t480 = t353 * t124 + t350 * t157;
t507 = t231 * t350;
t78 = qJ(5) * t507 + t480;
t515 = (-t378 + t67) * t348 + (t266 - t78) * t346;
t493 = t347 * t352;
t322 = pkin(8) * t493;
t423 = t355 * t513;
t542 = pkin(1) * t423 - t322;
t249 = -pkin(2) * t513 - t542;
t269 = t351 * t493 - t354 * t513;
t270 = t351 * t513 + t354 * t493;
t141 = t269 * pkin(3) - t270 * pkin(10) + t249;
t492 = t347 * t355;
t533 = pkin(1) * t352;
t465 = pkin(8) * t492 + t513 * t533;
t250 = pkin(9) * t513 + t465;
t466 = -pkin(2) * t492 - pkin(9) * t493;
t251 = -pkin(1) * t347 + t466;
t471 = t354 * t250 + t351 * t251;
t143 = -pkin(10) * t492 + t471;
t479 = t350 * t141 + t353 * t143;
t234 = t351 * t256;
t145 = -pkin(3) * t436 - t257 * t354 + t234;
t543 = -pkin(4) * t553 + pkin(9) * t457 + t453 * t529 - t145;
t125 = t354 * t212 + t351 * t223;
t541 = -t125 + (t455 + t507) * pkin(4);
t126 = -qJD(3) * t413 + t351 * t321 + (t380 - t548) * t354;
t449 = qJDD(1) * t355;
t319 = t347 * t449;
t410 = t352 * t427;
t253 = qJDD(3) - t319 + t410;
t86 = qJD(4) * t174 + t126 * t350 - t353 * t253;
t540 = pkin(4) * t86 + qJDD(5);
t406 = t513 * t534;
t274 = -t352 * t406 + t355 * t535;
t437 = t347 * t534;
t202 = t274 * t354 + t351 * t437;
t273 = t352 * t535 + t355 * t406;
t138 = t202 * t338 - t273 * t339;
t181 = t270 * t338 + t339 * t492;
t111 = pkin(3) * t301 - t124;
t87 = pkin(4) * t172 + qJD(5) + t111;
t39 = pkin(5) * t92 - qJ(6) * t397 + t87;
t393 = qJD(2) * t411;
t408 = pkin(1) * t417;
t440 = -pkin(8) * t319 - t352 * t408 - t355 * t393;
t374 = -pkin(8) * t410 - t440;
t155 = pkin(9) * t321 + t374;
t391 = t404 * qJD(2);
t162 = (qJD(1) * t391 + qJDD(1) * t394) * t347;
t386 = t354 * t155 + t351 * t162 - t212 * t458 + t223 * t457;
t57 = pkin(10) * t253 + t386;
t415 = pkin(8) * t548 - t352 * t393 + t355 * t408;
t156 = -pkin(2) * t321 - t415;
t63 = pkin(3) * t127 - pkin(10) * t126 + t156;
t211 = -pkin(2) * t396 - t256;
t107 = t231 * pkin(3) - t233 * pkin(10) + t211;
t112 = -pkin(10) * t301 + t125;
t74 = t107 * t350 + t112 * t353;
t18 = -qJD(4) * t74 - t350 * t57 + t353 * t63;
t85 = t353 * t126 - t233 * t455 + t350 * t253 - t301 * t453;
t12 = pkin(4) * t121 - qJ(5) * t85 - qJD(5) * t174 + t18;
t389 = -t107 * t453 + t112 * t455 - t350 * t63 - t353 * t57;
t15 = -qJ(5) * t86 - qJD(5) * t172 - t389;
t3 = t348 * t12 - t346 * t15;
t442 = -qJDD(6) + t3;
t539 = g(1) * t138 + g(2) * t134 + g(3) * t181 - t39 * t397 + t442;
t537 = t224 ^ 2;
t356 = qJD(1) ^ 2;
t532 = pkin(3) * t253;
t443 = t353 * t492;
t195 = t270 * t350 + t443;
t531 = pkin(4) * t195;
t528 = pkin(5) * t121;
t55 = -qJ(5) * t172 + t74;
t51 = t348 * t55;
t73 = t353 * t107 - t112 * t350;
t54 = -qJ(5) * t174 + t73;
t27 = t346 * t54 + t51;
t526 = t27 * t397;
t4 = t346 * t12 + t348 * t15;
t433 = t347 * t459;
t194 = -qJD(3) * t269 + t354 * t433;
t460 = qJD(2) * t352;
t434 = t347 * t460;
t106 = -qJD(4) * t195 + t194 * t353 + t350 * t434;
t193 = qJD(3) * t270 + t347 * t432;
t444 = t350 * t492;
t196 = t270 * t353 - t444;
t258 = t347 * t391;
t260 = t542 * qJD(2);
t385 = -t250 * t458 + t251 * t457 + t351 * t258 + t354 * t260;
t89 = pkin(10) * t434 + t385;
t261 = t465 * qJD(2);
t99 = t193 * pkin(3) - t194 * pkin(10) + t261;
t364 = -qJD(4) * t479 - t350 * t89 + t353 * t99;
t20 = pkin(4) * t193 - qJ(5) * t106 - qJD(5) * t196 + t364;
t105 = -qJD(4) * t444 + t194 * t350 + t270 * t453 - t353 * t434;
t388 = t141 * t453 - t143 * t455 + t350 * t99 + t353 * t89;
t26 = -qJ(5) * t105 - qJD(5) * t195 + t388;
t9 = t346 * t20 + t348 * t26;
t49 = pkin(4) * t224 + t54;
t25 = t346 * t49 + t51;
t525 = -qJ(6) * t547 - qJD(6) * t354 + t522;
t524 = pkin(5) * t547 - t523;
t421 = t353 * t141 - t143 * t350;
t65 = pkin(4) * t269 - qJ(5) * t196 + t421;
t75 = -qJ(5) * t195 + t479;
t34 = t346 * t65 + t348 * t75;
t37 = t346 * t67 + t348 * t78;
t488 = t350 * t351;
t255 = -t346 * t488 + t348 * t486;
t521 = -pkin(5) * t476 + qJ(6) * t475 - qJD(6) * t255 + t543;
t519 = t346 * t55;
t518 = t350 * t85;
t517 = pkin(5) * t549 + qJ(6) * t477 - qJD(6) * t281 + t541;
t516 = pkin(5) * t233 + t515;
t170 = t348 * t266 + t346 * t378;
t31 = qJ(6) * t233 + t37;
t514 = t170 - t31;
t512 = t172 * t224;
t511 = t174 * t224;
t509 = t202 * t350;
t418 = t224 * t353;
t508 = t231 * t301;
t506 = t233 * t301;
t501 = t273 * t350;
t500 = t273 * t353;
t499 = t301 * t351;
t497 = t338 * t354;
t496 = t339 * t354;
t495 = t342 * t356;
t489 = t350 * t121;
t485 = t351 * t355;
t484 = t353 * t121;
t28 = t348 * t54 - t519;
t481 = qJD(6) - t28;
t197 = t272 * t351 + t354 * t438;
t473 = -t197 * t336 - t198 * t349;
t201 = t274 * t351 - t354 * t437;
t472 = -t201 * t336 - t202 * t349;
t283 = t353 * t297;
t184 = -qJ(5) * t486 + t283 + (-pkin(4) - t527) * t354;
t464 = t350 * t297 + t331;
t205 = -qJ(5) * t488 + t464;
t114 = t346 * t184 + t348 * t205;
t470 = -t269 * t336 - t270 * t349;
t463 = pkin(4) * t488 + t351 * pkin(9);
t344 = t352 ^ 2;
t462 = -t355 ^ 2 + t344;
t456 = qJD(4) * t224;
t447 = t121 * qJ(6) + t4;
t445 = t355 * t495;
t429 = t349 * t350;
t428 = t355 * t451;
t44 = t346 * t85 + t348 * t86;
t419 = -t351 * t250 + t251 * t354;
t416 = -t351 * t155 + t354 * t162 - t212 * t457 - t223 * t458;
t405 = t347 * t356 * t513;
t402 = -g(1) * t197 + g(2) * t201;
t401 = g(1) * t274 + g(2) * t272;
t400 = -t92 ^ 2 - t544;
t142 = pkin(3) * t492 - t419;
t398 = -pkin(5) * t339 - qJ(6) * t338;
t8 = t20 * t348 - t26 * t346;
t24 = t348 * t49 - t519;
t33 = -t346 * t75 + t348 * t65;
t45 = -t346 * t86 + t348 * t85;
t113 = t184 * t348 - t205 * t346;
t395 = 0.2e1 * t422 + qJD(2);
t392 = -t250 * t457 - t251 * t458 + t258 * t354 - t351 * t260;
t58 = -t416 - t532;
t387 = -pkin(10) * t121 + t111 * t224;
t384 = t347 * (t417 + t321);
t383 = g(1) * t201 + g(2) * t197 + g(3) * t269;
t382 = g(1) * t202 + g(2) * t198 + g(3) * t270;
t381 = t142 + t531;
t377 = -g(1) * t273 - g(2) * t271 + g(3) * t492;
t376 = -g(3) * t493 - t401;
t375 = t535 * pkin(1) + t274 * pkin(2) + pkin(4) * t501 + pkin(8) * t437 + pkin(9) * t273 - t201 * t349 + t202 * t336;
t373 = -t466 + (pkin(4) * t487 + t336 * t482 - t349 * t485) * t347;
t372 = -t156 - t377;
t371 = t546 * t271 + t272 * t551;
t370 = t546 * t273 + t274 * t551;
t369 = -pkin(9) * t253 - t211 * t301;
t368 = t377 * t351;
t35 = t58 + t540;
t90 = -pkin(3) * t434 - t392;
t363 = -pkin(1) * t534 - t272 * pkin(2) - pkin(4) * t503 + pkin(8) * t438 - t271 * pkin(9) + t197 * t349 - t198 * t336;
t362 = t383 + t416;
t303 = t349 * t353;
t209 = -t303 * t346 - t348 * t429;
t210 = -t348 * t303 + t346 * t429;
t361 = -t170 * t92 + t209 * t45 - t210 * t44 - t382;
t360 = pkin(10) * t456 - t383 + t58;
t359 = pkin(9) * t456 + t377;
t358 = pkin(4) * t105 + t90;
t5 = pkin(5) * t44 - qJ(6) * t45 - qJD(6) * t397 + t35;
t335 = -pkin(4) * t348 - pkin(5);
t332 = pkin(4) * t346 + qJ(6);
t254 = t281 * t351;
t247 = pkin(4) * t500;
t243 = pkin(4) * t502;
t214 = (t338 * t352 + t339 * t482) * t347;
t213 = (t338 * t482 - t339 * t352) * t347;
t182 = t270 * t339 - t338 * t492;
t175 = pkin(5) * t280 - qJ(6) * t281 - t336;
t161 = -t273 * t496 + t274 * t338;
t160 = -t273 * t497 - t274 * t339;
t159 = -t271 * t496 + t272 * t338;
t158 = -t271 * t497 - t272 * t339;
t148 = t202 * t353 + t501;
t147 = t500 - t509;
t144 = pkin(5) * t254 - qJ(6) * t255 + t463;
t139 = t202 * t339 + t273 * t338;
t116 = -t195 * t346 + t196 * t348;
t115 = t348 * t195 + t196 * t346;
t109 = pkin(5) * t354 - t113;
t108 = -qJ(6) * t354 + t114;
t71 = -t105 * t346 + t106 * t348;
t69 = t348 * t105 + t106 * t346;
t48 = pkin(4) * t174 + pkin(5) * t397 + qJ(6) * t92;
t46 = pkin(5) * t115 - qJ(6) * t116 + t381;
t30 = -pkin(5) * t269 - t33;
t29 = qJ(6) * t269 + t34;
t22 = qJ(6) * t224 + t25;
t21 = -pkin(5) * t224 + qJD(6) - t24;
t16 = pkin(5) * t69 - qJ(6) * t71 - qJD(6) * t116 + t358;
t7 = -pkin(5) * t193 - t8;
t6 = qJ(6) * t193 + qJD(6) * t269 + t9;
t2 = -t442 - t528;
t1 = qJD(6) * t224 + t447;
t10 = [qJDD(1), g(1) * t534 - g(2) * t535, g(1) * t535 + g(2) * t534 (qJDD(1) * t344 + 0.2e1 * t352 * t428) * t342 (t352 * t449 - t451 * t462) * t448, t352 * t384 + t395 * t433, t355 * t384 - t395 * t434, t321 * t513, -t261 * t396 - t322 * t321 + t415 * t513 + g(1) * t272 - g(2) * t274 + (t321 * t423 + (-t352 * t451 + t449) * t448) * pkin(1), -t260 * t396 - t465 * t321 - t374 * t513 - g(1) * t271 + g(2) * t273 + (-t428 - t450) * pkin(1) * t448, t126 * t270 + t194 * t233, -t126 * t269 - t127 * t270 - t193 * t233 - t194 * t231, -t194 * t301 + t253 * t270 + (-t126 * t355 + t233 * t460) * t347, t193 * t301 - t253 * t269 + (t127 * t355 - t231 * t460) * t347 (-t253 * t355 - t301 * t460) * t347, -t392 * t301 + t419 * t253 + t261 * t231 + t249 * t127 + t156 * t269 + t211 * t193 + g(1) * t198 - g(2) * t202 + (t124 * t460 - t355 * t416) * t347, t385 * t301 - t471 * t253 + t261 * t233 + t249 * t126 + t156 * t270 + t211 * t194 + (-t125 * t460 + t355 * t386) * t347 + t402, t106 * t174 + t196 * t85, -t105 * t174 - t106 * t172 - t195 * t85 - t196 * t86, t106 * t224 + t121 * t196 + t174 * t193 + t269 * t85, -t105 * t224 - t121 * t195 - t172 * t193 - t269 * t86, t121 * t269 + t193 * t224, g(1) * t545 - g(2) * t148 + t111 * t105 + t421 * t121 + t142 * t86 + t90 * t172 + t18 * t269 + t73 * t193 + t58 * t195 + t364 * t224, g(1) * t552 - g(2) * t147 + t111 * t106 - t479 * t121 + t142 * t85 + t90 * t174 - t74 * t193 + t58 * t196 - t388 * t224 + t389 * t269, -t115 * t4 - t116 * t3 - t24 * t71 - t25 * t69 - t33 * t45 - t34 * t44 - t397 * t8 - t9 * t92 - t402, -g(1) * t363 - g(2) * t375 + t24 * t8 + t25 * t9 + t3 * t33 + t4 * t34 + t35 * t381 + t358 * t87, g(1) * t135 - g(2) * t139 + t115 * t5 - t121 * t30 + t16 * t92 - t193 * t21 - t2 * t269 - t224 * t7 + t39 * t69 + t44 * t46, -t1 * t115 + t116 * t2 + t21 * t71 - t22 * t69 - t29 * t44 + t30 * t45 + t397 * t7 - t6 * t92 - t402, g(1) * t134 - g(2) * t138 + t1 * t269 - t116 * t5 + t121 * t29 - t16 * t397 + t193 * t22 + t224 * t6 - t39 * t71 - t45 * t46, t1 * t29 + t22 * t6 + t5 * t46 + t39 * t16 + t2 * t30 + t21 * t7 - g(1) * (-pkin(5) * t135 - qJ(6) * t134 + t363) - g(2) * (pkin(5) * t139 + qJ(6) * t138 + t375); 0, 0, 0, -t352 * t445, t462 * t495, -t355 * t405 + t426, t352 * t405 + t319, t321, t259 * t396 + t495 * t533 - t377 + t415, pkin(1) * t445 + t256 * t396 + (pkin(8) * t451 + g(3)) * t493 + t401 + t440, t126 * t351 - t354 * t506 (t126 + t508) * t354 + (-t127 + t506) * t351, -t301 * t457 + t351 * t253 + (-t233 * t352 + t301 * t482) * t461, t301 * t458 + t354 * t253 + (t231 * t352 - t301 * t485) * t461, t301 * t436, -t124 * t436 - pkin(2) * t127 - t259 * t231 - t234 * t301 + t369 * t351 + ((t257 + t520) * t301 + t372) * t354, -pkin(2) * t126 - t469 * t301 + t125 * t436 - t259 * t233 + t369 * t354 + (-t301 * t520 - t372) * t351, t85 * t486 + (-t350 * t454 - t557) * t174, t172 * t222 + t174 * t221 + (-t172 * t353 - t174 * t350) * t457 + (-t518 - t353 * t86 + (t172 * t350 - t174 * t353) * qJD(4)) * t351, -t354 * t85 - t557 * t224 + (-t174 * t301 - t224 * t455 + t484) * t351, t354 * t86 + t553 * t224 + (t172 * t301 - t224 * t453 - t489) * t351, -t121 * t354 - t224 * t499, -t111 * t221 + t283 * t121 - t145 * t172 + t558 * t224 + ((-qJD(4) * t297 + t146) * t224 + t376) * t350 + (t111 * t350 * qJD(3) - t18 + (qJD(3) * t172 - t489) * pkin(9) - t359 * t353) * t354 + (pkin(9) * t86 + t111 * t453 - t301 * t73 + t58 * t350) * t351, -t464 * t121 - t145 * t174 - t111 * t222 + t556 * t224 + t376 * t353 + (-t389 + (pkin(9) * t174 + t111 * t353) * qJD(3) + t359 * t350) * t354 + (-t111 * t455 + t58 * t353 + t301 * t74 + (qJD(3) * t418 + t85) * pkin(9)) * t351, -t113 * t45 - t114 * t44 + t24 * t475 + t25 * t476 - t254 * t4 - t255 * t3 - t397 * t523 - t522 * t92 - t368, -g(1) * t370 - g(2) * t371 - g(3) * t373 + t3 * t113 + t4 * t114 + t523 * t24 + t522 * t25 + t35 * t463 + t543 * t87, -g(1) * t161 - g(2) * t159 - g(3) * t214 - t109 * t121 + t144 * t44 + t2 * t354 + t21 * t499 - t224 * t524 + t254 * t5 - t39 * t476 + t521 * t92, -t1 * t254 - t108 * t44 + t109 * t45 + t2 * t255 - t21 * t475 + t22 * t476 + t397 * t524 - t525 * t92 - t368, -g(1) * t160 - g(2) * t158 - g(3) * t213 - t1 * t354 + t108 * t121 - t144 * t45 - t22 * t499 + t224 * t525 - t255 * t5 + t39 * t475 - t397 * t521, t1 * t108 + t5 * t144 + t2 * t109 - g(1) * (pkin(5) * t161 + qJ(6) * t160 + t370) - g(2) * (pkin(5) * t159 + qJ(6) * t158 + t371) - g(3) * (pkin(5) * t214 + qJ(6) * t213 + t373) + t521 * t39 + t525 * t22 + t524 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t233 * t231, -t231 ^ 2 + t233 ^ 2, t126 - t508, -t127 - t506, t253, -t125 * t301 - t211 * t233 + t362, -t124 * t301 + t211 * t231 + t382 - t386, t174 * t418 + t518 (t85 - t512) * t353 + (-t86 - t511) * t350, -t174 * t233 + t224 * t418 + t489, t172 * t233 - t350 * t537 + t484, -t224 * t233, -pkin(3) * t86 - t125 * t172 - t152 * t224 - t73 * t233 + (t124 * t224 + t387) * t350 - t360 * t353, -pkin(3) * t85 - t125 * t174 + t224 * t480 + t74 * t233 + t350 * t360 + t353 * t387, t24 * t477 - t25 * t549 - t280 * t4 - t281 * t3 + t37 * t92 + t397 * t515 + t361, t4 * t210 - t3 * t209 - t35 * t336 - g(1) * t472 - g(2) * t473 - g(3) * t470 + t541 * t87 + (t170 - t37) * t25 - t515 * t24, -t121 * t209 + t175 * t44 + t21 * t233 - t224 * t516 + t280 * t5 + t339 * t383 + t39 * t549 + t517 * t92, -t1 * t280 + t2 * t281 - t21 * t477 - t22 * t549 + t31 * t92 + t397 * t516 + t361, t121 * t210 - t175 * t45 - t22 * t233 + t224 * t514 - t281 * t5 + t338 * t383 + t39 * t477 - t397 * t517, t1 * t210 + t5 * t175 + t2 * t209 - g(1) * (t201 * t398 + t472) - g(2) * (t197 * t398 + t473) - g(3) * (t269 * t398 + t470) + t517 * t39 + t514 * t22 + t516 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174 * t172, -t172 ^ 2 + t174 ^ 2, t85 + t512, t511 - t86, t121, -g(1) * t147 - g(2) * t552 + g(3) * t195 - t111 * t174 + t74 * t224 + t18, g(1) * t148 + g(2) * t545 + g(3) * t196 + t111 * t172 + t73 * t224 + t389, t25 * t397 - t526 + (-t346 * t44 - t348 * t45) * pkin(4) + (-t24 + t28) * t92, -g(1) * t247 - g(2) * t243 + t24 * t27 - t25 * t28 + (g(3) * t443 - t87 * t174 + t3 * t348 + t4 * t346 + t350 * t382) * pkin(4), t224 * t27 - t48 * t92 + (pkin(5) - t335) * t121 + t539, t22 * t397 - t332 * t44 + t335 * t45 - t526 + (t21 - t481) * t92, -g(1) * t139 - g(2) * t135 - g(3) * t182 + t121 * t332 - t39 * t92 + t48 * t397 + (0.2e1 * qJD(6) - t28) * t224 + t447, t1 * t332 + t2 * t335 - t39 * t48 - t21 * t27 - g(1) * (-pkin(4) * t509 - pkin(5) * t138 + qJ(6) * t139 + t247) - g(2) * (-pkin(4) * t510 - pkin(5) * t134 + qJ(6) * t135 + t243) - g(3) * (-pkin(5) * t181 + qJ(6) * t182 - t531) + t481 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t400, t24 * t397 + t25 * t92 - t362 - t532 + t540, t224 * t397 + t44, t400, -t45 + t550, -t21 * t397 + t22 * t92 - t383 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397 * t92 - t121, t45 + t550, -t537 - t544, -t22 * t224 - t528 - t539;];
tau_reg  = t10;
