% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:56
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPP7_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:51:44
% EndTime: 2019-05-07 18:53:36
% DurationCPUTime: 106.16s
% Computational Cost: add. (449798->975), mult. (970139->1493), div. (0->0), fcn. (783328->12), ass. (0->731)
t1319 = sin(qJ(1));
t1323 = cos(qJ(1));
t1313 = sin(pkin(6));
t1315 = cos(pkin(6));
t1318 = sin(qJ(2));
t1322 = cos(qJ(2));
t1317 = sin(qJ(3));
t1321 = cos(qJ(3));
t1487 = qJD(1) * t1315;
t1304 = qJD(2) + t1487;
t1445 = t1313 * t1318;
t1430 = qJD(1) * t1445;
t1270 = -t1321 * t1304 + t1317 * t1430;
t1434 = qJDD(1) * t1318;
t1485 = qJD(1) * t1322;
t1279 = (qJD(2) * t1485 + t1434) * t1313;
t1303 = qJDD(1) * t1315 + qJDD(2);
t1226 = -t1270 * qJD(3) + t1321 * t1279 + t1317 * t1303;
t1272 = t1304 * t1317 + t1321 * t1430;
t1444 = t1313 * t1322;
t1429 = qJD(1) * t1444;
t1297 = -qJD(3) + t1429;
t1316 = sin(qJ(4));
t1320 = cos(qJ(4));
t1244 = t1272 * t1316 + t1320 * t1297;
t1300 = qJD(2) * t1430;
t1433 = qJDD(1) * t1322;
t1403 = t1313 * t1433 - t1300;
t1359 = -qJDD(3) + t1403;
t1151 = -t1244 * qJD(4) + t1320 * t1226 - t1316 * t1359;
t1312 = sin(pkin(11));
t1314 = cos(pkin(11));
t1245 = t1272 * t1320 - t1297 * t1316;
t1417 = t1316 * t1226 + t1320 * t1359;
t1355 = qJD(4) * t1245 + t1417;
t1329 = t1314 * t1151 - t1312 * t1355;
t1200 = t1314 * t1244 + t1245 * t1312;
t1265 = qJD(4) + t1270;
t1465 = t1200 * t1265;
t1522 = t1329 - t1465;
t1202 = -t1244 * t1312 + t1245 * t1314;
t1199 = t1202 ^ 2;
t1505 = t1265 ^ 2;
t1107 = t1505 + t1199;
t1131 = t1202 * t1200;
t1415 = t1317 * t1279 - t1321 * t1303;
t1225 = -qJD(3) * t1272 - t1415;
t1224 = qJDD(4) - t1225;
t1524 = t1131 + t1224;
t1472 = t1524 * t1314;
t1016 = t1107 * t1312 - t1472;
t1473 = t1524 * t1312;
t991 = t1107 * t1314 + t1473;
t935 = t1016 * t1320 + t1316 * t991;
t879 = t1317 * t1522 + t1321 * t935;
t933 = t1016 * t1316 - t1320 * t991;
t1393 = t1318 * t879 - t1322 * t933;
t877 = t1317 * t935 - t1321 * t1522;
t777 = -t1313 * t877 + t1315 * t1393;
t812 = t1318 * t933 + t1322 * t879;
t735 = t1319 * t777 - t1323 * t812;
t1698 = pkin(7) * t735;
t745 = t1319 * t812 + t1323 * t777;
t1697 = pkin(7) * t745;
t775 = t1313 * t1393 + t1315 * t877;
t1696 = pkin(8) * (t1313 * t775 + t1315 * t777);
t1695 = pkin(1) * t775;
t1694 = pkin(1) * t777;
t1071 = -t1151 * t1312 - t1314 * t1355;
t1461 = t1265 * t1202;
t1354 = t1071 + t1461;
t1507 = t1200 ^ 2;
t1159 = t1507 - t1505;
t1033 = t1159 * t1312 + t1472;
t1037 = t1159 * t1314 - t1473;
t953 = t1033 * t1316 - t1037 * t1320;
t889 = -t1354 * t1317 + t1321 * t953;
t949 = t1033 * t1320 + t1037 * t1316;
t1389 = t1318 * t889 + t1322 * t949;
t885 = t1317 * t953 + t1354 * t1321;
t786 = -t1313 * t885 + t1315 * t1389;
t823 = -t1318 * t949 + t1322 * t889;
t1693 = t1319 * t786 - t1323 * t823;
t1128 = t1199 - t1507;
t1353 = -t1071 + t1461;
t938 = -t1353 * t1312 + t1314 * t1522;
t1479 = t1522 * t1312;
t942 = -t1353 * t1314 - t1479;
t852 = -t1316 * t938 + t1320 * t942;
t841 = t1128 * t1317 + t1321 * t852;
t847 = t1316 * t942 + t1320 * t938;
t1397 = t1318 * t841 - t1322 * t847;
t839 = -t1128 * t1321 + t1317 * t852;
t750 = -t1313 * t839 + t1315 * t1397;
t773 = t1318 * t847 + t1322 * t841;
t1692 = t1319 * t750 - t1323 * t773;
t1691 = t1319 * t823 + t1323 * t786;
t1690 = t1319 * t773 + t1323 * t750;
t1688 = pkin(8) * t812;
t1681 = t1313 * t1389 + t1315 * t885;
t1680 = t1313 * t1397 + t1315 * t839;
t1679 = pkin(9) * t877;
t1672 = pkin(2) * t877 - pkin(3) * t1522 + pkin(10) * t935;
t1671 = pkin(2) * t933 - pkin(9) * t879;
t1525 = -t1131 + t1224;
t1471 = t1525 * t1312;
t1518 = -t1505 - t1507;
t1538 = t1314 * t1518 - t1471;
t1078 = t1314 * t1525;
t1540 = t1312 * t1518 + t1078;
t1557 = t1316 * t1538 + t1320 * t1540;
t1558 = -t1316 * t1540 + t1320 * t1538;
t1585 = t1317 * t1353 + t1321 * t1558;
t1611 = t1318 * t1557 + t1322 * t1585;
t1587 = t1317 * t1558 - t1321 * t1353;
t1615 = t1318 * t1585 - t1322 * t1557;
t1637 = -t1313 * t1587 + t1315 * t1615;
t1647 = t1319 * t1611 + t1323 * t1637;
t1670 = pkin(7) * t1647;
t1648 = -t1319 * t1637 + t1323 * t1611;
t1669 = pkin(7) * t1648;
t1160 = -t1199 + t1505;
t1567 = t1314 * t1160 + t1471;
t1568 = -t1160 * t1312 + t1078;
t1583 = -t1316 * t1568 - t1320 * t1567;
t1519 = -t1465 - t1329;
t1582 = -t1316 * t1567 + t1320 * t1568;
t1612 = -t1317 * t1519 + t1321 * t1582;
t1634 = -t1318 * t1583 + t1322 * t1612;
t1616 = t1317 * t1582 + t1321 * t1519;
t1636 = t1318 * t1612 + t1322 * t1583;
t1649 = -t1313 * t1616 + t1315 * t1636;
t1668 = -t1319 * t1649 + t1323 * t1634;
t1667 = t1319 * t1634 + t1323 * t1649;
t1665 = pkin(10) * t933;
t1664 = pkin(1) * t1637;
t1638 = t1313 * t1615 + t1315 * t1587;
t1663 = pkin(1) * t1638;
t1516 = -t1312 * t1519 + t1314 * t1354;
t1517 = t1312 * t1354 + t1314 * t1519;
t1533 = t1316 * t1516 + t1320 * t1517;
t1066 = -t1507 - t1199;
t1534 = -t1316 * t1517 + t1320 * t1516;
t1559 = t1066 * t1317 + t1321 * t1534;
t1584 = t1318 * t1533 + t1322 * t1559;
t1560 = -t1066 * t1321 + t1317 * t1534;
t1586 = t1318 * t1559 - t1322 * t1533;
t1617 = -t1313 * t1560 + t1315 * t1586;
t1633 = t1319 * t1584 + t1323 * t1617;
t1662 = pkin(7) * t1633;
t1635 = -t1319 * t1617 + t1323 * t1584;
t1661 = pkin(7) * t1635;
t1652 = pkin(3) * t933 - pkin(4) * t991;
t1650 = t1313 * t1636 + t1315 * t1616;
t1646 = (-t1313 * t1638 - t1315 * t1637) * pkin(8);
t1645 = pkin(1) * t1617;
t1618 = t1313 * t1586 + t1315 * t1560;
t1644 = pkin(1) * t1618;
t1643 = pkin(8) * t1611;
t1632 = (-t1313 * t1618 - t1315 * t1617) * pkin(8);
t1630 = pkin(8) * t1584;
t1629 = pkin(9) * t1587;
t1628 = qJ(5) * t991;
t1627 = qJ(5) * t1016;
t1620 = -pkin(2) * t1587 + pkin(3) * t1353 - pkin(10) * t1558;
t1619 = -pkin(2) * t1557 + pkin(9) * t1585;
t1351 = (-t1200 * t1312 - t1202 * t1314) * t1265;
t1460 = t1265 * t1312;
t1157 = t1202 * t1460;
t1459 = t1265 * t1314;
t1424 = t1200 * t1459;
t1406 = t1157 - t1424;
t1514 = -t1316 * t1406 - t1320 * t1351;
t1462 = t1224 * t1317;
t1513 = -t1316 * t1351 + t1320 * t1406;
t1535 = t1321 * t1513 + t1462;
t1563 = -t1318 * t1514 + t1322 * t1535;
t1221 = t1321 * t1224;
t1539 = t1317 * t1513 - t1221;
t1565 = t1318 * t1535 + t1322 * t1514;
t1588 = -t1313 * t1539 + t1315 * t1565;
t1614 = -t1319 * t1588 + t1323 * t1563;
t1358 = -t1071 * t1312 + t1424;
t1407 = t1314 * t1071 + t1200 * t1460;
t1511 = -t1316 * t1358 - t1320 * t1407;
t1426 = t1317 * t1131;
t1512 = -t1316 * t1407 + t1320 * t1358;
t1536 = t1321 * t1512 - t1426;
t1562 = -t1318 * t1511 + t1322 * t1536;
t1425 = t1321 * t1131;
t1537 = t1317 * t1512 + t1425;
t1564 = t1318 * t1536 + t1322 * t1511;
t1589 = -t1313 * t1537 + t1315 * t1564;
t1613 = -t1319 * t1589 + t1323 * t1562;
t1610 = t1319 * t1563 + t1323 * t1588;
t1609 = t1319 * t1562 + t1323 * t1589;
t1607 = pkin(9) * t1560;
t1606 = pkin(10) * t1557;
t1595 = -pkin(2) * t1560 + pkin(3) * t1066 - pkin(10) * t1534;
t1594 = -pkin(3) * t1557 - pkin(4) * t1540;
t1593 = -pkin(2) * t1533 + pkin(9) * t1559;
t1591 = t1313 * t1564 + t1315 * t1537;
t1590 = t1313 * t1565 + t1315 * t1539;
t1579 = pkin(10) * t1533;
t1578 = qJ(5) * t1538;
t1577 = qJ(5) * t1540;
t804 = -pkin(3) * t1533 - pkin(4) * t1517;
t1566 = -pkin(4) * t1066 + qJ(5) * t1516;
t1556 = 2 * qJD(6);
t1552 = qJ(5) * t1517;
t1551 = qJ(6) * t1522;
t1208 = t1245 * t1244;
t1523 = -t1208 + t1224;
t1550 = t1316 * t1523;
t1545 = t1320 * t1523;
t1012 = t1202 * t1459 + t1312 * t1329;
t1013 = t1314 * t1329 - t1157;
t932 = -t1012 * t1316 + t1013 * t1320;
t1408 = t1317 * t932 - t1425;
t1409 = t1321 * t932 + t1426;
t929 = -t1012 * t1320 - t1013 * t1316;
t1510 = -t1313 * t1408 + (t1318 * t1409 + t1322 * t929) * t1315;
t1515 = -t1318 * t929 + t1322 * t1409;
t1532 = t1319 * t1515 + t1323 * t1510;
t1531 = -t1319 * t1510 + t1323 * t1515;
t1456 = t1270 * t1272;
t1332 = -t1359 - t1456;
t1529 = t1317 * t1332;
t1527 = t1321 * t1332;
t1220 = t1265 * t1244;
t1118 = -t1220 - t1151;
t1116 = -t1220 + t1151;
t1255 = t1270 * t1297;
t1191 = t1255 + t1226;
t1212 = (t1270 * t1321 - t1272 * t1317) * t1297;
t1521 = t1318 * t1212 + t1322 * t1359;
t1127 = pkin(5) * t1200 - qJ(6) * t1202;
t1299 = g(1) * t1323 + t1319 * g(2);
t1498 = pkin(8) * t1313;
t1508 = qJD(1) ^ 2;
t1275 = -pkin(1) * t1508 + qJDD(1) * t1498 - t1299;
t1501 = pkin(2) * t1322;
t1412 = -pkin(9) * t1318 - t1501;
t1488 = qJD(1) * t1313;
t1278 = t1412 * t1488;
t1298 = t1319 * g(1) - t1323 * g(2);
t1331 = qJDD(1) * pkin(1) + t1498 * t1508 + t1298;
t1330 = t1315 * t1331;
t1328 = -g(3) * t1445 + t1318 * t1330;
t1503 = t1304 ^ 2;
t1178 = t1303 * pkin(9) - t1503 * pkin(2) + (t1278 * t1488 + t1275) * t1322 + t1328;
t1502 = pkin(2) * t1318;
t1411 = -pkin(9) * t1322 + t1502;
t1497 = t1315 * g(3);
t1325 = t1300 * pkin(2) - t1279 * pkin(9) - t1497 + ((-pkin(1) - t1501) * qJDD(1) + (-pkin(8) * t1488 + t1304 * t1411) * qJD(1) - t1298) * t1313;
t1103 = t1321 * t1178 + t1317 * t1325;
t1233 = pkin(3) * t1270 - pkin(10) * t1272;
t1504 = t1297 ^ 2;
t1051 = -pkin(3) * t1504 - pkin(10) * t1359 - t1270 * t1233 + t1103;
t1416 = t1318 * t1275 - t1322 * t1330;
t1486 = qJD(1) * t1318;
t1177 = -t1303 * pkin(2) - t1503 * pkin(9) + (g(3) * t1322 + t1278 * t1486) * t1313 + t1416;
t1055 = -t1191 * pkin(10) + (-t1272 * t1297 - t1225) * pkin(3) + t1177;
t961 = t1316 * t1051 - t1320 * t1055;
t909 = pkin(4) * t1523 + qJ(5) * t1118 - t961;
t1214 = pkin(4) * t1265 - qJ(5) * t1245;
t1506 = t1244 ^ 2;
t962 = t1320 * t1051 + t1316 * t1055;
t918 = -pkin(4) * t1506 - qJ(5) * t1355 - t1265 * t1214 + t962;
t1496 = t1312 * t909 + t1314 * t918;
t1520 = t1224 * qJ(6) - t1200 * t1127 + t1265 * t1556 + t1496;
t1119 = (qJD(4) - t1265) * t1245 + t1417;
t1186 = (qJD(3) + t1297) * t1272 + t1415;
t1509 = t1315 * t1408 + t1409 * t1445 + t929 * t1444;
t1243 = t1245 ^ 2;
t1268 = t1270 ^ 2;
t1269 = t1272 ^ 2;
t1500 = pkin(3) * t1317;
t1499 = pkin(5) * t1314;
t1495 = t1312 * t918 - t1314 * t909;
t1494 = qJ(6) * t1314;
t1102 = t1317 * t1178 - t1321 * t1325;
t1050 = t1359 * pkin(3) - t1504 * pkin(10) + t1272 * t1233 + t1102;
t965 = t1355 * pkin(4) - t1506 * qJ(5) + t1245 * t1214 + qJDD(5) + t1050;
t1493 = t1312 * t965;
t1492 = t1314 * t965;
t1483 = qJD(5) * t1202;
t1195 = 0.2e1 * t1483;
t815 = t1195 + t1495;
t1484 = qJD(5) * t1200;
t1193 = -0.2e1 * t1484;
t816 = t1193 + t1496;
t761 = t1312 * t816 - t1314 * t815;
t1491 = t1316 * t761;
t1489 = t1320 * t761;
t1475 = t1050 * t1316;
t1474 = t1050 * t1320;
t1139 = t1208 + t1224;
t1470 = t1139 * t1316;
t1469 = t1139 * t1320;
t1467 = t1177 * t1317;
t1466 = t1177 * t1321;
t1217 = t1359 - t1456;
t1464 = t1217 * t1317;
t1463 = t1217 * t1321;
t1458 = t1265 * t1316;
t1457 = t1265 * t1320;
t1442 = t1318 * t1508;
t1309 = t1313 ^ 2;
t1446 = t1309 * t1322;
t1296 = t1442 * t1446;
t1276 = t1296 + t1303;
t1455 = t1276 * t1318;
t1454 = t1276 * t1322;
t1277 = -t1296 + t1303;
t1453 = t1277 * t1318;
t1452 = t1277 * t1322;
t1451 = t1297 * t1317;
t1450 = t1297 * t1321;
t1449 = t1303 * t1313;
t1448 = t1304 * t1313;
t1447 = t1309 * t1508;
t1257 = t1313 * t1331 + t1497;
t1440 = t1318 * t1257;
t1439 = t1322 * t1257;
t1436 = -t1066 - t1505;
t1310 = t1318 ^ 2;
t1311 = t1322 ^ 2;
t1435 = t1310 + t1311;
t1432 = -pkin(3) * t1321 - pkin(2);
t1431 = qJD(1) * t1448;
t1428 = t1310 * t1447;
t1427 = t1311 * t1447;
t1423 = t1317 * t1208;
t1422 = t1321 * t1208;
t1421 = t1318 * t1456;
t1420 = t1322 * t1456;
t1419 = -qJ(6) * t1312 - pkin(4);
t762 = t1312 * t815 + t1314 * t816;
t1418 = -t1304 + t1487;
t999 = t1102 * t1317 + t1321 * t1103;
t1260 = -t1298 * t1319 - t1323 * t1299;
t1413 = t1202 * t1127 + qJDD(6) + t1495;
t1295 = qJDD(1) * t1323 - t1319 * t1508;
t1410 = -pkin(7) * t1295 - g(3) * t1319;
t1264 = -t1428 - t1503;
t1232 = -t1264 * t1318 - t1452;
t1405 = pkin(8) * t1232 - t1440;
t1283 = -t1427 - t1503;
t1240 = t1283 * t1322 - t1455;
t1404 = pkin(8) * t1240 + t1439;
t871 = t1316 * t962 - t1320 * t961;
t872 = t1316 * t961 + t1320 * t962;
t1360 = t1193 + t1520;
t803 = -pkin(5) * t1505 + t1360;
t1352 = -t1224 * pkin(5) + t1413;
t805 = qJ(6) * t1505 - t1352 - 0.2e1 * t1483;
t754 = t1312 * t803 + t1314 * t805;
t755 = -t1312 * t805 + t1314 * t803;
t707 = -t1316 * t754 + t1320 * t755;
t1327 = -t1071 * pkin(5) - t1551 + t965;
t861 = t1327 + (pkin(5) * t1265 - (2 * qJD(6))) * t1202;
t704 = t1317 * t861 + t1321 * t707;
t706 = t1316 * t755 + t1320 * t754;
t1402 = t1318 * t704 - t1322 * t706;
t722 = t1320 * t762 - t1491;
t715 = t1317 * t965 + t1321 * t722;
t721 = t1316 * t762 + t1489;
t1401 = t1318 * t715 - t1322 * t721;
t846 = t1050 * t1317 + t1321 * t872;
t1396 = t1318 * t846 - t1322 * t871;
t1114 = (-qJD(4) - t1265) * t1245 - t1417;
t1004 = -t1114 * t1316 - t1116 * t1320;
t1006 = t1114 * t1320 - t1116 * t1316;
t1207 = -t1243 + t1506;
t982 = t1006 * t1321 - t1207 * t1317;
t1383 = t1004 * t1322 + t1318 * t982;
t1005 = t1118 * t1320 - t1119 * t1316;
t1007 = -t1118 * t1316 - t1119 * t1320;
t1152 = t1243 + t1506;
t978 = t1007 * t1321 - t1152 * t1317;
t1382 = -t1005 * t1322 + t1318 * t978;
t1170 = -t1505 - t1506;
t1074 = t1170 * t1316 + t1545;
t1075 = t1170 * t1320 - t1550;
t990 = t1075 * t1321 - t1114 * t1317;
t1381 = -t1074 * t1322 + t1318 * t990;
t1196 = -t1243 - t1505;
t1079 = t1196 * t1320 - t1470;
t1080 = -t1196 * t1316 - t1469;
t997 = t1080 * t1321 + t1116 * t1317;
t1380 = -t1079 * t1322 + t1318 * t997;
t1379 = -t1177 * t1322 + t1318 * t999;
t1216 = -t1243 + t1505;
t1099 = -t1216 * t1316 + t1545;
t1002 = t1099 * t1321 - t1118 * t1317;
t1097 = -t1216 * t1320 - t1550;
t1378 = t1002 * t1318 + t1097 * t1322;
t1215 = -t1505 + t1506;
t1100 = t1215 * t1320 - t1470;
t1003 = t1100 * t1321 - t1119 * t1317;
t1098 = -t1215 * t1316 - t1469;
t1377 = t1003 * t1318 + t1098 * t1322;
t1111 = t1244 * t1457 + t1316 * t1355;
t1058 = t1111 * t1321 - t1423;
t1110 = -t1244 * t1458 + t1320 * t1355;
t1376 = t1058 * t1318 + t1110 * t1322;
t1113 = t1151 * t1320 - t1245 * t1458;
t1059 = t1113 * t1321 + t1423;
t1112 = -t1151 * t1316 - t1245 * t1457;
t1375 = t1059 * t1318 + t1112 * t1322;
t998 = -t1102 * t1321 + t1103 * t1317;
t1146 = (-t1244 * t1320 + t1245 * t1316) * t1265;
t1109 = t1146 * t1321 + t1462;
t1145 = (t1244 * t1316 + t1245 * t1320) * t1265;
t1374 = t1109 * t1318 + t1145 * t1322;
t1187 = (-qJD(3) + t1297) * t1272 - t1415;
t1122 = t1187 * t1321 - t1191 * t1317;
t1235 = -t1269 + t1268;
t1373 = t1122 * t1318 + t1235 * t1322;
t1190 = t1255 - t1226;
t1123 = -t1186 * t1321 - t1190 * t1317;
t1213 = t1268 + t1269;
t1372 = t1123 * t1318 + t1213 * t1322;
t1229 = -t1504 - t1268;
t1149 = t1229 * t1321 - t1529;
t1371 = t1149 * t1318 + t1187 * t1322;
t1236 = -t1269 - t1504;
t1156 = -t1236 * t1317 + t1463;
t1370 = t1156 * t1318 - t1191 * t1322;
t1249 = -t1269 + t1504;
t1168 = -t1249 * t1317 + t1527;
t1369 = t1168 * t1318 + t1190 * t1322;
t1248 = t1268 - t1504;
t1169 = t1248 * t1321 + t1464;
t1368 = t1169 * t1318 + t1186 * t1322;
t1230 = g(3) * t1444 + t1416;
t1231 = t1322 * t1275 + t1328;
t1367 = -t1322 * t1230 + t1318 * t1231;
t1153 = t1230 * t1318 + t1231 * t1322;
t1287 = t1304 * t1429;
t1251 = t1287 + t1279;
t1286 = t1304 * t1430;
t1254 = -t1286 + t1403;
t1366 = t1251 * t1322 + t1254 * t1318;
t1252 = -t1287 + t1279;
t1253 = t1286 + t1403;
t1365 = -t1252 * t1322 + t1253 * t1318;
t1364 = t1264 * t1322 - t1453;
t1281 = -t1428 + t1503;
t1363 = t1281 * t1322 + t1455;
t1362 = t1283 * t1318 + t1454;
t1282 = t1427 - t1503;
t1361 = t1282 * t1318 + t1452;
t1259 = t1298 * t1323 - t1319 * t1299;
t1181 = -t1225 * t1317 - t1270 * t1450;
t1357 = t1181 * t1318 + t1420;
t1183 = t1226 * t1321 + t1272 * t1451;
t1356 = t1183 * t1318 - t1420;
t708 = qJ(5) * t755 + (t1419 - t1499) * t861;
t723 = -qJ(5) * t754 + (pkin(5) * t1312 - t1494) * t861;
t676 = -pkin(10) * t706 - t1316 * t708 + t1320 * t723;
t687 = -pkin(3) * t706 - pkin(4) * t754 - pkin(5) * t805 - qJ(6) * t803;
t703 = t1317 * t707 - t1321 * t861;
t659 = -pkin(9) * t703 - t1317 * t687 + t1321 * t676;
t669 = -pkin(2) * t703 + pkin(3) * t861 - pkin(10) * t707 - t1316 * t723 - t1320 * t708;
t684 = t1318 * t706 + t1322 * t704;
t1350 = pkin(8) * t684 + t1318 * t659 + t1322 * t669;
t756 = -pkin(4) * t965 + qJ(5) * t762;
t691 = -pkin(10) * t721 - qJ(5) * t1489 - t1316 * t756;
t700 = -pkin(3) * t721 - pkin(4) * t761;
t714 = t1317 * t722 - t1321 * t965;
t671 = -pkin(9) * t714 - t1317 * t700 + t1321 * t691;
t679 = -pkin(2) * t714 + pkin(3) * t965 - pkin(10) * t722 + qJ(5) * t1491 - t1320 * t756;
t690 = t1318 * t721 + t1322 * t715;
t1349 = pkin(8) * t690 + t1318 * t671 + t1322 * t679;
t798 = pkin(5) * t1436 + t1360;
t799 = qJ(6) * t1436 + t1195 + t1352;
t731 = t1312 * t799 + t1314 * t798 + t1566;
t732 = -t1312 * t798 + t1314 * t799 - t1552;
t695 = -t1316 * t731 + t1320 * t732 - t1579;
t781 = -pkin(5) * t1519 - qJ(6) * t1354 + t804;
t686 = -t1317 * t781 + t1321 * t695 - t1607;
t693 = -t1316 * t732 - t1320 * t731 + t1595;
t1348 = t1318 * t686 + t1322 * t693 + t1630;
t751 = t1566 + t762;
t753 = -t761 - t1552;
t702 = -t1316 * t751 + t1320 * t753 - t1579;
t694 = -t1317 * t804 + t1321 * t702 - t1607;
t696 = -t1316 * t753 - t1320 * t751 + t1595;
t1347 = t1318 * t694 + t1322 * t696 + t1630;
t1326 = t1202 * t1556 - t1327;
t825 = -pkin(5) * t1461 + t1326 + t1551;
t782 = -t1627 + t1312 * t825 + (pkin(4) + t1499) * t1522;
t796 = -pkin(5) * t1479 + t1314 * t825 - t1628;
t729 = -t1316 * t782 + t1320 * t796 + t1665;
t759 = -qJ(6) * t1524 + 0.2e1 * t1484 + (-t1107 + t1505) * pkin(5) - t1520 + t1652;
t699 = -t1317 * t759 + t1321 * t729 + t1679;
t716 = -t1316 * t796 - t1320 * t782 + t1672;
t1346 = t1318 * t699 + t1322 * t716 - t1688;
t826 = (-t1353 - t1461) * pkin(5) + t1326;
t783 = t1314 * t826 + t1353 * t1419 + t1578;
t797 = -t1312 * t826 - t1353 * t1494 - t1577;
t730 = -t1316 * t783 + t1320 * t797 - t1606;
t763 = t1195 + (-t1518 - t1505) * qJ(6) + (-t1525 - t1224) * pkin(5) + t1413 + t1594;
t701 = -t1317 * t763 + t1321 * t730 - t1629;
t719 = -t1316 * t797 - t1320 * t783 + t1620;
t1345 = t1318 * t701 + t1322 * t719 + t1643;
t862 = -pkin(4) * t1353 - t1492 + t1578;
t893 = t1493 - t1577;
t768 = -t1316 * t862 + t1320 * t893 - t1606;
t771 = t1594 + t815;
t718 = -t1317 * t771 + t1321 * t768 - t1629;
t744 = -t1316 * t893 - t1320 * t862 + t1620;
t1344 = t1318 * t718 + t1322 * t744 + t1643;
t864 = -pkin(4) * t1522 + t1493 + t1627;
t896 = t1492 + t1628;
t774 = -t1316 * t864 + t1320 * t896 - t1665;
t780 = -t1652 + t816;
t724 = -t1317 * t780 + t1321 * t774 - t1679;
t752 = -t1316 * t896 - t1320 * t864 - t1672;
t1343 = t1318 * t724 + t1322 * t752 + t1688;
t845 = -t1050 * t1321 + t1317 * t872;
t760 = -pkin(9) * t845 + (-pkin(10) * t1321 + t1500) * t871;
t779 = -pkin(2) * t845 + pkin(3) * t1050 - pkin(10) * t872;
t791 = t1318 * t871 + t1322 * t846;
t1342 = pkin(8) * t791 + t1318 * t760 + t1322 * t779;
t842 = -pkin(10) * t1005 - t871;
t977 = t1007 * t1317 + t1152 * t1321;
t800 = -pkin(9) * t977 + t1005 * t1500 + t1321 * t842;
t806 = -pkin(2) * t977 - pkin(3) * t1152 - pkin(10) * t1007 - t872;
t910 = t1005 * t1318 + t1322 * t978;
t1341 = pkin(8) * t910 + t1318 * t800 + t1322 * t806;
t919 = -pkin(3) * t1074 + t961;
t966 = -pkin(10) * t1074 + t1475;
t989 = t1075 * t1317 + t1114 * t1321;
t819 = -pkin(9) * t989 - t1317 * t919 + t1321 * t966;
t873 = -pkin(2) * t989 - pkin(3) * t1114 - pkin(10) * t1075 + t1474;
t955 = t1074 * t1318 + t1322 * t990;
t1340 = pkin(8) * t955 + t1318 * t819 + t1322 * t873;
t920 = -pkin(3) * t1079 + t962;
t970 = -pkin(10) * t1079 + t1474;
t996 = t1080 * t1317 - t1116 * t1321;
t820 = -pkin(9) * t996 - t1317 * t920 + t1321 * t970;
t874 = -pkin(2) * t996 + pkin(3) * t1116 - pkin(10) * t1080 - t1475;
t957 = t1079 * t1318 + t1322 * t997;
t1339 = pkin(8) * t957 + t1318 * t820 + t1322 * t874;
t1148 = t1229 * t1317 + t1527;
t1041 = -pkin(2) * t1148 + t1102;
t1086 = -pkin(9) * t1148 + t1467;
t1093 = t1149 * t1322 - t1187 * t1318;
t1338 = pkin(8) * t1093 + t1041 * t1322 + t1086 * t1318;
t1155 = t1236 * t1321 + t1464;
t1044 = -pkin(2) * t1155 + t1103;
t1094 = -pkin(9) * t1155 + t1466;
t1095 = t1156 * t1322 + t1191 * t1318;
t1337 = pkin(8) * t1095 + t1044 * t1322 + t1094 * t1318;
t1209 = t1252 * t1318 + t1253 * t1322;
t1336 = pkin(8) * t1209 + t1153;
t1068 = t1123 * t1322 - t1213 * t1318;
t1121 = -t1186 * t1317 + t1190 * t1321;
t960 = -pkin(9) * t1121 - t998;
t1334 = pkin(8) * t1068 - t1121 * t1501 + t1318 * t960;
t975 = t1177 * t1318 + t1322 * t999;
t1333 = pkin(8) * t975 + t1412 * t998;
t1308 = t1313 * t1309;
t1294 = t1319 * qJDD(1) + t1323 * t1508;
t1285 = t1435 * t1447;
t1284 = (t1310 - t1311) * t1447;
t1280 = -pkin(7) * t1294 + g(3) * t1323;
t1256 = t1435 * t1431;
t1250 = (t1434 + (qJD(2) + t1304) * t1485) * t1313;
t1247 = t1279 * t1322 - t1310 * t1431;
t1246 = -t1311 * t1431 - t1318 * t1403;
t1239 = t1282 * t1322 - t1453;
t1238 = -t1281 * t1318 + t1454;
t1228 = (t1279 * t1315 + (qJD(1) * t1308 + t1315 * t1448) * t1485) * t1318;
t1227 = (-t1308 * t1442 + (-t1300 + (-t1304 * t1486 + t1433) * t1313) * t1315) * t1322;
t1211 = (t1270 * t1317 + t1272 * t1321) * t1297;
t1210 = -t1251 * t1318 + t1254 * t1322;
t1206 = t1313 * t1254 + t1315 * t1362;
t1205 = -t1313 * t1253 + t1315 * t1361;
t1204 = -t1313 * t1252 + t1315 * t1363;
t1203 = -t1315 * t1254 + t1313 * t1362;
t1185 = -t1313 * t1250 + t1315 * t1364;
t1184 = t1315 * t1250 + t1313 * t1364;
t1182 = t1226 * t1317 - t1272 * t1450;
t1180 = t1225 * t1321 - t1270 * t1451;
t1179 = t1322 * t1212 - t1318 * t1359;
t1176 = -t1313 * t1284 + t1315 * t1366;
t1175 = t1313 * t1285 + t1315 * t1365;
t1174 = -t1315 * t1285 + t1313 * t1365;
t1167 = t1248 * t1317 - t1463;
t1166 = t1249 * t1321 + t1529;
t1144 = -t1319 * t1206 + t1240 * t1323;
t1143 = t1206 * t1323 + t1319 * t1240;
t1137 = t1183 * t1322 + t1421;
t1136 = t1181 * t1322 - t1421;
t1135 = -t1319 * t1185 + t1232 * t1323;
t1134 = t1185 * t1323 + t1319 * t1232;
t1133 = t1313 * t1257 + t1315 * t1367;
t1132 = -t1315 * t1257 + t1313 * t1367;
t1126 = -t1313 * t1211 + t1315 * t1521;
t1125 = -t1319 * t1175 + t1209 * t1323;
t1124 = t1175 * t1323 + t1319 * t1209;
t1120 = t1187 * t1317 + t1191 * t1321;
t1108 = t1146 * t1317 - t1221;
t1105 = t1169 * t1322 - t1186 * t1318;
t1104 = t1168 * t1322 - t1190 * t1318;
t1096 = -t1440 + (-t1203 * t1313 - t1206 * t1315) * pkin(8);
t1092 = -t1439 + (-t1184 * t1313 - t1185 * t1315) * pkin(8);
t1091 = -pkin(1) * t1203 + t1313 * t1230 + t1315 * t1404;
t1077 = t1122 * t1322 - t1235 * t1318;
t1076 = -pkin(1) * t1184 + t1313 * t1231 + t1315 * t1405;
t1073 = -t1313 * t1182 + t1315 * t1356;
t1072 = -t1313 * t1180 + t1315 * t1357;
t1062 = pkin(8) * t1153 * t1315 - pkin(1) * t1132;
t1061 = -t1319 * t1133 + t1153 * t1323;
t1060 = t1133 * t1323 + t1319 * t1153;
t1057 = t1113 * t1317 - t1422;
t1056 = t1111 * t1317 + t1422;
t1052 = -pkin(1) * t1174 + t1315 * t1336;
t1049 = -pkin(2) * t1191 + pkin(9) * t1156 + t1467;
t1047 = -t1313 * t1167 + t1315 * t1368;
t1046 = -t1313 * t1166 + t1315 * t1369;
t1045 = (-t1132 * t1313 - t1133 * t1315) * pkin(8);
t1043 = pkin(2) * t1187 + pkin(9) * t1149 - t1466;
t1042 = (-t1174 * t1313 - t1175 * t1315) * pkin(8) - t1367;
t1040 = -t1313 * t1155 + t1315 * t1370;
t1039 = t1315 * t1155 + t1313 * t1370;
t1038 = t1109 * t1322 - t1145 * t1318;
t1029 = -t1313 * t1148 + t1315 * t1371;
t1028 = t1315 * t1148 + t1313 * t1371;
t1001 = t1100 * t1317 + t1119 * t1321;
t1000 = t1099 * t1317 + t1118 * t1321;
t995 = -t1313 * t1120 + t1315 * t1373;
t988 = -t1313 * t1121 + t1315 * t1372;
t987 = t1315 * t1121 + t1313 * t1372;
t981 = t1006 * t1317 + t1207 * t1321;
t980 = t1059 * t1322 - t1112 * t1318;
t979 = t1058 * t1322 - t1110 * t1318;
t976 = -pkin(2) * t1177 + pkin(9) * t999;
t969 = -t1313 * t1108 + t1315 * t1374;
t968 = -t1319 * t1040 + t1095 * t1323;
t967 = t1040 * t1323 + t1319 * t1095;
t964 = -t1319 * t1029 + t1093 * t1323;
t963 = t1029 * t1323 + t1319 * t1093;
t959 = t1003 * t1322 - t1098 * t1318;
t958 = t1002 * t1322 - t1097 * t1318;
t956 = pkin(2) * t1213 + pkin(9) * t1123 + t999;
t946 = t1068 * t1323 - t1319 * t988;
t945 = t1319 * t1068 + t1323 * t988;
t922 = -t1313 * t1057 + t1315 * t1375;
t921 = -t1313 * t1056 + t1315 * t1376;
t915 = -t1004 * t1318 + t1322 * t982;
t898 = -t1313 * t998 + t1315 * t1379;
t897 = t1313 * t1379 + t1315 * t998;
t892 = -t1313 * t1001 + t1315 * t1377;
t891 = -t1313 * t1000 + t1315 * t1378;
t882 = -t1313 * t996 + t1315 * t1380;
t881 = t1313 * t1380 + t1315 * t996;
t876 = -t1313 * t989 + t1315 * t1381;
t875 = t1313 * t1381 + t1315 * t989;
t870 = -t1318 * t1044 + t1322 * t1094 + (-t1039 * t1313 - t1040 * t1315) * pkin(8);
t865 = -t1318 * t1041 + t1322 * t1086 + (-t1028 * t1313 - t1029 * t1315) * pkin(8);
t863 = -t1313 * t981 + t1315 * t1383;
t860 = -pkin(1) * t1039 - t1313 * t1049 + t1315 * t1337;
t859 = -t1313 * t977 + t1315 * t1382;
t858 = t1313 * t1382 + t1315 * t977;
t857 = -t1319 * t898 + t1323 * t975;
t856 = t1319 * t975 + t1323 * t898;
t855 = -pkin(1) * t1028 - t1313 * t1043 + t1315 * t1338;
t833 = t1121 * t1502 + t1322 * t960 + (-t1313 * t987 - t1315 * t988) * pkin(8);
t828 = -t1319 * t882 + t1323 * t957;
t827 = t1319 * t957 + t1323 * t882;
t818 = -t1319 * t876 + t1323 * t955;
t817 = t1319 * t955 + t1323 * t876;
t811 = -pkin(2) * t1079 + pkin(9) * t997 + t1317 * t970 + t1321 * t920;
t810 = -pkin(2) * t1074 + pkin(9) * t990 + t1317 * t966 + t1321 * t919;
t807 = -pkin(1) * t987 - t1313 * t956 + t1315 * t1334;
t802 = -t1319 * t859 + t1323 * t910;
t801 = t1319 * t910 + t1323 * t859;
t790 = t1411 * t998 + (-t1313 * t897 - t1315 * t898) * pkin(8);
t789 = -pkin(1) * t897 - t1313 * t976 + t1315 * t1333;
t788 = pkin(9) * t978 + t1005 * t1432 + t1317 * t842;
t758 = -t1313 * t845 + t1315 * t1396;
t757 = t1313 * t1396 + t1315 * t845;
t739 = pkin(9) * t846 + (-pkin(10) * t1317 + t1432) * t871;
t738 = -t1318 * t874 + t1322 * t820 + (-t1313 * t881 - t1315 * t882) * pkin(8);
t737 = -t1318 * t873 + t1322 * t819 + (-t1313 * t875 - t1315 * t876) * pkin(8);
t728 = -pkin(1) * t881 - t1313 * t811 + t1315 * t1339;
t727 = -t1319 * t758 + t1323 * t791;
t726 = t1319 * t791 + t1323 * t758;
t725 = -pkin(1) * t875 - t1313 * t810 + t1315 * t1340;
t720 = -t1318 * t806 + t1322 * t800 + (-t1313 * t858 - t1315 * t859) * pkin(8);
t717 = t1317 * t774 + t1321 * t780 - t1671;
t709 = t1317 * t768 + t1321 * t771 + t1619;
t705 = -pkin(1) * t858 - t1313 * t788 + t1315 * t1341;
t698 = t1317 * t730 + t1321 * t763 + t1619;
t697 = t1317 * t729 + t1321 * t759 + t1671;
t692 = -t1318 * t779 + t1322 * t760 + (-t1313 * t757 - t1315 * t758) * pkin(8);
t689 = t1317 * t702 + t1321 * t804 + t1593;
t688 = -t1318 * t752 + t1322 * t724 - t1696;
t685 = -pkin(1) * t757 - t1313 * t739 + t1315 * t1342;
t683 = t1317 * t695 + t1321 * t781 + t1593;
t682 = -t1318 * t744 + t1322 * t718 + t1646;
t681 = -t1313 * t714 + t1315 * t1401;
t680 = t1313 * t1401 + t1315 * t714;
t678 = -t1313 * t717 + t1315 * t1343 - t1695;
t677 = -t1318 * t719 + t1322 * t701 + t1646;
t675 = -t1318 * t716 + t1322 * t699 + t1696;
t674 = -t1313 * t709 + t1315 * t1344 - t1663;
t673 = -t1313 * t703 + t1315 * t1402;
t672 = t1313 * t1402 + t1315 * t703;
t670 = -t1313 * t698 + t1315 * t1345 - t1663;
t668 = -t1318 * t696 + t1322 * t694 + t1632;
t667 = -t1313 * t697 + t1315 * t1346 + t1695;
t666 = -t1319 * t681 + t1323 * t690;
t665 = t1319 * t690 + t1323 * t681;
t664 = -pkin(2) * t721 + pkin(9) * t715 + t1317 * t691 + t1321 * t700;
t663 = -t1318 * t693 + t1322 * t686 + t1632;
t662 = -t1319 * t673 + t1323 * t684;
t661 = t1319 * t684 + t1323 * t673;
t660 = -t1313 * t689 + t1315 * t1347 - t1644;
t658 = -t1313 * t683 + t1315 * t1348 - t1644;
t657 = -pkin(2) * t706 + pkin(9) * t704 + t1317 * t676 + t1321 * t687;
t656 = -t1318 * t679 + t1322 * t671 + (-t1313 * t680 - t1315 * t681) * pkin(8);
t655 = -pkin(1) * t680 - t1313 * t664 + t1315 * t1349;
t654 = -t1318 * t669 + t1322 * t659 + (-t1313 * t672 - t1315 * t673) * pkin(8);
t653 = -pkin(1) * t672 - t1313 * t657 + t1315 * t1350;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1294, -t1295, 0, t1260, 0, 0, 0, 0, 0, 0, t1144, t1135, t1125, t1061, 0, 0, 0, 0, 0, 0, t964, t968, t946, t857, 0, 0, 0, 0, 0, 0, t818, t828, t802, t727, 0, 0, 0, 0, 0, 0, t1648, -t735, t1635, t666, 0, 0, 0, 0, 0, 0, t1648, t1635, t735, t662; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1295, -t1294, 0, t1259, 0, 0, 0, 0, 0, 0, t1143, t1134, t1124, t1060, 0, 0, 0, 0, 0, 0, t963, t967, t945, t856, 0, 0, 0, 0, 0, 0, t817, t827, t801, t726, 0, 0, 0, 0, 0, 0, t1647, t745, t1633, t665, 0, 0, 0, 0, 0, 0, t1647, t1633, -t745, t661; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1203, t1184, t1174, t1132, 0, 0, 0, 0, 0, 0, t1028, t1039, t987, t897, 0, 0, 0, 0, 0, 0, t875, t881, t858, t757, 0, 0, 0, 0, 0, 0, t1638, t775, t1618, t680, 0, 0, 0, 0, 0, 0, t1638, t1618, -t775, t672; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1295, 0, -t1294, 0, t1410, -t1280, -t1259, -pkin(7) * t1259, -t1319 * t1228 + t1247 * t1323, -t1319 * t1176 + t1210 * t1323, -t1319 * t1204 + t1238 * t1323, -t1319 * t1227 + t1246 * t1323, -t1319 * t1205 + t1239 * t1323, t1256 * t1323 + t1319 * t1449, -pkin(7) * t1143 - t1319 * t1091 + t1096 * t1323, -pkin(7) * t1134 - t1319 * t1076 + t1092 * t1323, -pkin(7) * t1124 + t1042 * t1323 - t1319 * t1052, -pkin(7) * t1060 + t1045 * t1323 - t1319 * t1062, -t1319 * t1073 + t1137 * t1323, t1077 * t1323 - t1319 * t995, -t1319 * t1046 + t1104 * t1323, -t1319 * t1072 + t1136 * t1323, -t1319 * t1047 + t1105 * t1323, -t1319 * t1126 + t1179 * t1323, -pkin(7) * t963 - t1319 * t855 + t1323 * t865, -pkin(7) * t967 - t1319 * t860 + t1323 * t870, -pkin(7) * t945 - t1319 * t807 + t1323 * t833, -pkin(7) * t856 - t1319 * t789 + t1323 * t790, -t1319 * t922 + t1323 * t980, -t1319 * t863 + t1323 * t915, -t1319 * t891 + t1323 * t958, -t1319 * t921 + t1323 * t979, -t1319 * t892 + t1323 * t959, t1038 * t1323 - t1319 * t969, -pkin(7) * t817 - t1319 * t725 + t1323 * t737, -pkin(7) * t827 - t1319 * t728 + t1323 * t738, -pkin(7) * t801 - t1319 * t705 + t1323 * t720, -pkin(7) * t726 - t1319 * t685 + t1323 * t692, t1531, -t1692, t1668, t1613, t1693, t1614, -t1319 * t674 + t1323 * t682 - t1670, -t1319 * t678 + t1323 * t688 - t1697, -t1319 * t660 + t1323 * t668 - t1662, -pkin(7) * t665 - t1319 * t655 + t1323 * t656, t1531, t1668, t1692, t1614, -t1693, t1613, -t1319 * t670 + t1323 * t677 - t1670, -t1319 * t658 + t1323 * t663 - t1662, -t1319 * t667 + t1323 * t675 + t1697, -pkin(7) * t661 - t1319 * t653 + t1323 * t654; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1294, 0, t1295, 0, t1280, t1410, t1260, pkin(7) * t1260, t1228 * t1323 + t1319 * t1247, t1176 * t1323 + t1319 * t1210, t1204 * t1323 + t1319 * t1238, t1227 * t1323 + t1319 * t1246, t1205 * t1323 + t1319 * t1239, t1319 * t1256 - t1323 * t1449, pkin(7) * t1144 + t1091 * t1323 + t1319 * t1096, pkin(7) * t1135 + t1076 * t1323 + t1319 * t1092, pkin(7) * t1125 + t1319 * t1042 + t1052 * t1323, pkin(7) * t1061 + t1319 * t1045 + t1062 * t1323, t1073 * t1323 + t1319 * t1137, t1319 * t1077 + t1323 * t995, t1046 * t1323 + t1319 * t1104, t1072 * t1323 + t1319 * t1136, t1047 * t1323 + t1319 * t1105, t1126 * t1323 + t1319 * t1179, pkin(7) * t964 + t1319 * t865 + t1323 * t855, pkin(7) * t968 + t1319 * t870 + t1323 * t860, pkin(7) * t946 + t1319 * t833 + t1323 * t807, pkin(7) * t857 + t1319 * t790 + t1323 * t789, t1319 * t980 + t1323 * t922, t1319 * t915 + t1323 * t863, t1319 * t958 + t1323 * t891, t1319 * t979 + t1323 * t921, t1319 * t959 + t1323 * t892, t1319 * t1038 + t1323 * t969, pkin(7) * t818 + t1319 * t737 + t1323 * t725, pkin(7) * t828 + t1319 * t738 + t1323 * t728, pkin(7) * t802 + t1319 * t720 + t1323 * t705, pkin(7) * t727 + t1319 * t692 + t1323 * t685, t1532, t1690, t1667, t1609, -t1691, t1610, t1319 * t682 + t1323 * t674 + t1669, t1319 * t688 + t1323 * t678 - t1698, t1319 * t668 + t1323 * t660 + t1661, pkin(7) * t666 + t1319 * t656 + t1323 * t655, t1532, t1667, -t1690, t1610, t1691, t1609, t1319 * t677 + t1323 * t670 + t1669, t1319 * t663 + t1323 * t658 + t1661, t1319 * t675 + t1323 * t667 + t1698, pkin(7) * t662 + t1319 * t654 + t1323 * t653; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1298, t1299, 0, 0, (-qJD(1) * t1418 * t1446 + t1279 * t1313) * t1318, t1315 * t1284 + t1313 * t1366, t1315 * t1252 + t1313 * t1363, (t1309 * t1418 * t1486 + t1313 * t1403) * t1322, t1315 * t1253 + t1313 * t1361, t1315 * t1303, pkin(1) * t1206 - t1315 * t1230 + t1313 * t1404, pkin(1) * t1185 - t1315 * t1231 + t1313 * t1405, pkin(1) * t1175 + t1313 * t1336, pkin(1) * t1133 + t1153 * t1498, t1315 * t1182 + t1313 * t1356, t1315 * t1120 + t1313 * t1373, t1315 * t1166 + t1313 * t1369, t1315 * t1180 + t1313 * t1357, t1315 * t1167 + t1313 * t1368, t1315 * t1211 + t1313 * t1521, pkin(1) * t1029 + t1315 * t1043 + t1313 * t1338, pkin(1) * t1040 + t1315 * t1049 + t1313 * t1337, pkin(1) * t988 + t1313 * t1334 + t1315 * t956, pkin(1) * t898 + t1313 * t1333 + t1315 * t976, t1315 * t1057 + t1313 * t1375, t1313 * t1383 + t1315 * t981, t1315 * t1000 + t1313 * t1378, t1315 * t1056 + t1313 * t1376, t1315 * t1001 + t1313 * t1377, t1315 * t1108 + t1313 * t1374, pkin(1) * t876 + t1313 * t1340 + t1315 * t810, pkin(1) * t882 + t1313 * t1339 + t1315 * t811, pkin(1) * t859 + t1313 * t1341 + t1315 * t788, pkin(1) * t758 + t1313 * t1342 + t1315 * t739, t1509, t1680, t1650, t1591, -t1681, t1590, t1313 * t1344 + t1315 * t709 + t1664, t1313 * t1343 + t1315 * t717 + t1694, t1313 * t1347 + t1315 * t689 + t1645, pkin(1) * t681 + t1313 * t1349 + t1315 * t664, t1509, t1650, -t1680, t1590, t1681, t1591, t1313 * t1345 + t1315 * t698 + t1664, t1313 * t1348 + t1315 * t683 + t1645, t1313 * t1346 + t1315 * t697 - t1694, pkin(1) * t673 + t1313 * t1350 + t1315 * t657;];
tauB_reg  = t1;
