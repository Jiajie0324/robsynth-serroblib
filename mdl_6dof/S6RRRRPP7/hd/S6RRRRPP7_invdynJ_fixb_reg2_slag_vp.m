% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPP7_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:26:40
% EndTime: 2019-03-09 21:27:24
% DurationCPUTime: 24.23s
% Computational Cost: add. (27574->976), mult. (67741->1244), div. (0->0), fcn. (54112->14), ass. (0->419)
t390 = sin(qJ(2));
t596 = cos(pkin(6));
t512 = pkin(1) * t596;
t368 = t390 * t512;
t389 = sin(qJ(3));
t392 = cos(qJ(3));
t467 = pkin(3) * t389 - pkin(10) * t392;
t386 = sin(pkin(6));
t393 = cos(qJ(2));
t560 = t386 * t393;
t650 = -(t368 + (pkin(8) + t467) * t560) * qJD(1) + t467 * qJD(3);
t388 = sin(qJ(4));
t391 = cos(qJ(4));
t535 = qJD(1) * t386;
t499 = t393 * t535;
t481 = t392 * t499;
t508 = t390 * t535;
t251 = t388 * t481 - t391 * t508;
t531 = qJD(3) * t392;
t461 = -t388 * t531 + t251;
t553 = t392 * t393;
t557 = t388 * t390;
t252 = (t391 * t553 + t557) * t535;
t649 = -t391 * t531 + t252;
t528 = qJD(4) * t391;
t648 = t389 * t528 - t461;
t490 = t596 * qJD(1);
t480 = pkin(1) * t490;
t291 = -pkin(8) * t508 + t393 * t480;
t469 = pkin(2) * t390 - pkin(9) * t393;
t292 = t469 * t535;
t194 = t392 * t291 + t389 * t292;
t170 = pkin(10) * t508 + t194;
t532 = qJD(3) * t389;
t519 = pkin(9) * t532;
t647 = t650 * t391 + (t170 + t519) * t388;
t618 = pkin(3) * t392;
t468 = pkin(10) * t389 + t618;
t337 = -pkin(2) - t468;
t646 = -t391 * t170 + t337 * t528 + t650 * t388;
t449 = t490 + qJD(2);
t427 = qJD(3) * t449;
t488 = t596 * qJDD(1);
t444 = t488 + qJDD(2);
t533 = qJD(2) * t393;
t505 = t389 * t533;
t525 = qJDD(1) * t390;
t151 = t386 * (qJD(1) * (t390 * t531 + t505) + t389 * t525) + t389 * t427 - t392 * t444;
t146 = qJDD(4) + t151;
t554 = t391 * t392;
t370 = pkin(9) * t554;
t482 = t389 * t499;
t527 = qJD(5) * t391;
t645 = -pkin(4) * t482 + qJ(5) * t252 - t389 * t527 + (pkin(4) * t389 - qJ(5) * t554) * qJD(3) + (-t370 + (qJ(5) * t389 - t337) * t388) * qJD(4) + t647;
t556 = t389 * t391;
t608 = pkin(9) * qJD(3);
t644 = qJ(5) * t251 + (-qJ(5) * qJD(4) - t608) * t556 + (-qJD(5) * t389 + (-pkin(9) * qJD(4) - qJ(5) * qJD(3)) * t392) * t388 + t646;
t620 = cos(qJ(1));
t474 = t596 * t620;
t619 = sin(qJ(1));
t306 = t390 * t619 - t393 * t474;
t570 = t306 * t391;
t307 = t390 * t474 + t393 * t619;
t511 = t386 * t620;
t229 = t307 * t392 - t389 * t511;
t580 = t229 * t388;
t643 = t570 - t580;
t526 = qJD(1) * qJD(2);
t497 = t390 * t526;
t478 = t386 * t497;
t524 = qJDD(1) * t393;
t358 = t386 * t524;
t522 = qJDD(3) - t358;
t426 = t478 + t522;
t496 = t393 * t526;
t433 = t496 + t525;
t400 = t386 * t433 + t427;
t483 = t389 * t508;
t414 = qJD(3) * t483 - t389 * t444;
t632 = t400 * t392 - t414;
t642 = t388 * t632 - t391 * t426;
t641 = pkin(4) * t388 + pkin(9);
t385 = sin(pkin(11));
t595 = cos(pkin(11));
t264 = t389 * t449 + t392 * t508;
t341 = -qJD(3) + t499;
t529 = qJD(4) * t388;
t98 = t264 * t529 + t341 * t528 - t388 * t426 - t391 * t632;
t204 = t264 * t391 - t341 * t388;
t530 = qJD(4) * t204;
t99 = t530 + t642;
t54 = -t385 * t99 - t595 * t98;
t202 = t264 * t388 + t391 * t341;
t114 = t595 * t202 + t204 * t385;
t262 = -t392 * t449 + t483;
t254 = qJD(4) + t262;
t590 = t114 * t254;
t34 = t54 + t590;
t434 = -t385 * t202 + t204 * t595;
t640 = t114 * t434;
t492 = t595 * t388;
t318 = t385 * t391 + t492;
t302 = t318 * qJD(4);
t639 = t318 * t262 + t302;
t491 = t595 * t391;
t303 = qJD(4) * t491 - t385 * t529;
t562 = t385 * t388;
t317 = -t491 + t562;
t550 = t317 * t262 - t303;
t472 = t595 * t531;
t549 = t251 * t595 - t303 * t389 + t649 * t385 - t388 * t472;
t548 = t252 * t595 + t302 * t389 - t461 * t385 - t391 * t472;
t241 = -pkin(2) * t449 - t291;
t132 = t262 * pkin(3) - t264 * pkin(10) + t241;
t538 = pkin(8) * t560 + t368;
t286 = t596 * pkin(9) + t538;
t242 = qJD(2) * pkin(9) + qJD(1) * t286;
t447 = -pkin(2) * t393 - pkin(9) * t390 - pkin(1);
t253 = t447 * t535;
t150 = t242 * t392 + t253 * t389;
t137 = -pkin(10) * t341 + t150;
t445 = qJD(2) * t480;
t477 = pkin(1) * t488;
t513 = pkin(8) * t358 + t390 * t477 + t393 * t445;
t205 = -pkin(8) * t478 + t513;
t179 = pkin(9) * t444 + t205;
t441 = t469 * qJD(2);
t190 = (qJD(1) * t441 + qJDD(1) * t447) * t386;
t78 = t392 * t179 + t389 * t190 - t242 * t532 + t253 * t531;
t66 = pkin(10) * t426 + t78;
t495 = t386 * t525;
t485 = t390 * t445 - t393 * t477 + (t386 * t496 + t495) * pkin(8);
t180 = -pkin(2) * t444 + t485;
t73 = t151 * pkin(3) - pkin(10) * t632 + t180;
t438 = -t132 * t528 + t137 * t529 - t388 * t73 - t391 * t66;
t85 = t391 * t132 - t137 * t388;
t638 = -t85 * t254 - t438;
t629 = t482 - t532;
t375 = pkin(4) * t391 + pkin(3);
t387 = -qJ(5) - pkin(10);
t637 = -t375 * t392 + t387 * t389;
t561 = t386 * t390;
t312 = -pkin(8) * t561 + t393 * t512;
t295 = qJD(2) * t312;
t289 = t318 * t389;
t439 = t341 * t389;
t53 = -t385 * t98 + t595 * t99;
t636 = t114 * t439 - t146 * t289 + t254 * t549 + t392 * t53;
t382 = qJ(4) + pkin(11);
t377 = sin(t382);
t378 = cos(t382);
t158 = t229 * t377 - t306 * t378;
t159 = t229 * t378 + t306 * t377;
t572 = t306 * t388;
t635 = t229 * t391 + t572;
t594 = t434 ^ 2;
t381 = t386 ^ 2;
t634 = 0.2e1 * t381;
t611 = -t644 * t385 + t595 * t645;
t610 = t385 * t645 + t644 * t595;
t493 = qJD(4) * t387;
t301 = t388 * t493 + t527;
t424 = -qJD(5) * t388 + t391 * t493;
t149 = -t389 * t242 + t253 * t392;
t183 = pkin(3) * t264 + pkin(10) * t262;
t103 = -t149 * t388 + t391 * t183;
t77 = qJ(5) * t262 * t391 + pkin(4) * t264 + t103;
t104 = t391 * t149 + t388 * t183;
t577 = t262 * t388;
t90 = qJ(5) * t577 + t104;
t599 = (-t424 + t77) * t595 + (t301 - t90) * t385;
t86 = t132 * t388 + t137 * t391;
t23 = -qJD(4) * t86 - t388 * t66 + t391 * t73;
t633 = -t86 * t254 - t23;
t475 = -t150 + (t529 + t577) * pkin(4);
t285 = -pkin(2) * t596 - t312;
t304 = t389 * t561 - t392 * t596;
t305 = t389 * t596 + t392 * t561;
t165 = t304 * pkin(3) - t305 * pkin(10) + t285;
t539 = pkin(2) * t560 + pkin(9) * t561;
t287 = -pkin(1) * t386 - t539;
t185 = t392 * t286 + t389 * t287;
t167 = -pkin(10) * t560 + t185;
t102 = t388 * t165 + t391 * t167;
t193 = -t389 * t291 + t292 * t392;
t169 = -pkin(3) * t508 - t193;
t376 = pkin(9) * t531;
t543 = t648 * pkin(4) - t169 + t376;
t277 = t388 * t337 + t370;
t631 = (qJDD(2) + 0.2e1 * t488) * t386;
t630 = t481 - t531;
t296 = t538 * qJD(2);
t628 = t114 * t264 - t146 * t317 - t254 * t639;
t343 = t387 * t391;
t240 = -t343 * t595 + t387 * t562;
t228 = t307 * t389 + t392 * t511;
t473 = t596 * t619;
t309 = -t390 * t473 + t393 * t620;
t510 = t386 * t619;
t232 = t309 * t389 - t392 * t510;
t429 = g(1) * t232 + g(2) * t228 + g(3) * t304;
t626 = -t146 * t240 - t377 * t429;
t136 = pkin(3) * t341 - t149;
t105 = pkin(4) * t202 + qJD(5) + t136;
t48 = pkin(5) * t114 - qJ(6) * t434 + t105;
t624 = -t434 * t48 - qJDD(6);
t623 = t114 * t550 - t317 * t54 - t318 * t53 - t434 * t639;
t558 = t388 * t389;
t290 = -t385 * t558 + t389 * t491;
t622 = t114 * t548 - t289 * t54 - t290 * t53 + t434 * t549;
t621 = t254 ^ 2;
t394 = qJD(1) ^ 2;
t516 = t391 * t560;
t226 = t305 * t388 + t516;
t617 = pkin(4) * t226;
t615 = pkin(5) * t146;
t614 = pkin(9) * t392;
t379 = t389 * pkin(9);
t12 = pkin(4) * t146 + qJ(5) * t98 - qJD(5) * t204 + t23;
t16 = -qJ(5) * t99 - qJD(5) * t202 - t438;
t3 = t595 * t12 - t385 * t16;
t4 = t385 * t12 + t595 * t16;
t506 = t386 * t533;
t225 = -qJD(3) * t304 + t392 * t506;
t534 = qJD(2) * t390;
t507 = t386 * t534;
t131 = -qJD(4) * t226 + t225 * t391 + t388 * t507;
t224 = qJD(3) * t305 + t386 * t505;
t514 = t388 * t560;
t227 = t305 * t391 - t514;
t293 = t386 * t441;
t111 = -t286 * t532 + t287 * t531 + t389 * t293 + t392 * t295;
t107 = pkin(10) * t507 + t111;
t123 = t224 * pkin(3) - t225 * pkin(10) + t296;
t45 = -qJD(4) * t102 - t107 * t388 + t391 * t123;
t25 = pkin(4) * t224 - qJ(5) * t131 - qJD(5) * t227 + t45;
t130 = -qJD(4) * t514 + t225 * t388 + t305 * t528 - t391 * t507;
t44 = t391 * t107 + t388 * t123 + t165 * t528 - t167 * t529;
t31 = -qJ(5) * t130 - qJD(5) * t226 + t44;
t9 = t385 * t25 + t595 * t31;
t63 = -qJ(5) * t204 + t85;
t58 = pkin(4) * t254 + t63;
t64 = -qJ(5) * t202 + t86;
t60 = t595 * t64;
t30 = t385 * t58 + t60;
t613 = -t629 * qJ(6) - qJD(6) * t392 + t610;
t612 = t629 * pkin(5) - t611;
t101 = t391 * t165 - t167 * t388;
t75 = pkin(4) * t304 - qJ(5) * t227 + t101;
t87 = -qJ(5) * t226 + t102;
t40 = t385 * t75 + t595 * t87;
t43 = t385 * t77 + t595 * t90;
t609 = -t549 * pkin(5) + t548 * qJ(6) - qJD(6) * t290 + t543;
t32 = t385 * t63 + t60;
t607 = t32 * t434;
t606 = t385 * t64;
t605 = t388 * t98;
t604 = t391 * t99;
t601 = t639 * pkin(5) + t550 * qJ(6) - qJD(6) * t318 + t475;
t600 = t264 * pkin(5) + t599;
t200 = t301 * t595 + t385 * t424;
t37 = qJ(6) * t264 + t43;
t598 = t200 - t37;
t597 = t200 - t43;
t593 = t434 * t254;
t591 = t114 ^ 2;
t587 = t146 * t388;
t586 = t146 * t391;
t585 = t151 * t392;
t584 = t202 * t254;
t583 = t202 * t388;
t582 = t204 * t202;
t581 = t204 * t254;
t233 = t309 * t392 + t389 * t510;
t579 = t233 * t388;
t578 = t254 * t264;
t576 = t264 * t262;
t575 = t264 * t341;
t571 = t306 * t389;
t308 = t390 * t620 + t393 * t473;
t569 = t308 * t388;
t568 = t308 * t389;
t567 = t308 * t391;
t565 = t377 * t392;
t564 = t378 * t392;
t563 = t381 * t394;
t555 = t389 * t393;
t33 = t595 * t63 - t606;
t552 = qJD(6) - t33;
t547 = (-t391 * t532 - t392 * t529) * pkin(9) + t646;
t546 = -qJD(4) * t277 + t647;
t545 = -t228 * t375 - t229 * t387;
t544 = -t232 * t375 - t233 * t387;
t320 = t391 * t337;
t216 = -qJ(5) * t556 + t320 + (-pkin(9) * t388 - pkin(4)) * t392;
t236 = -qJ(5) * t558 + t277;
t139 = t385 * t216 + t595 * t236;
t542 = -t304 * t375 - t305 * t387;
t324 = pkin(4) * t558 + t379;
t537 = t620 * pkin(1) + pkin(8) * t510;
t383 = t390 ^ 2;
t384 = t393 ^ 2;
t536 = t383 - t384;
t521 = g(3) * t561;
t518 = t393 * t563;
t517 = t386 * t555;
t515 = t377 * t560;
t503 = t341 * t532;
t498 = pkin(1) * t634;
t184 = -t389 * t286 + t287 * t392;
t489 = t254 * t391;
t487 = t390 * t518;
t486 = t389 * t179 - t392 * t190 + t242 * t531 + t253 * t532;
t479 = t390 * t496;
t476 = -pkin(1) * t619 + pkin(8) * t511;
t471 = t386 * t394 * t596;
t162 = t233 * t377 - t308 * t378;
t466 = g(1) * t158 - g(2) * t162;
t163 = t233 * t378 + t308 * t377;
t465 = g(1) * t159 - g(2) * t163;
t464 = -g(1) * t228 + g(2) * t232;
t463 = -g(1) * t306 + g(2) * t308;
t462 = g(1) * t309 + g(2) * t307;
t166 = pkin(3) * t560 - t184;
t459 = -pkin(5) * t378 - qJ(6) * t377;
t140 = t226 * t595 + t227 * t385;
t81 = t130 * t595 + t131 * t385;
t458 = t114 * t81 + t140 * t53;
t455 = -t388 * t86 - t391 * t85;
t453 = -t591 - t594;
t452 = -t591 + t594;
t448 = 0.2e1 * t490 + qJD(2);
t446 = t309 * pkin(2) + pkin(9) * t308 + t537;
t112 = -t286 * t531 - t287 * t532 + t293 * t392 - t389 * t295;
t443 = t53 + t593;
t442 = -t53 + t593;
t8 = t25 * t595 - t385 * t31;
t29 = t58 * t595 - t606;
t39 = -t385 * t87 + t595 * t75;
t437 = -pkin(10) * t146 + t136 * t254;
t436 = -t114 * t549 + t289 * t53;
t435 = t114 * t639 + t317 * t53;
t138 = t216 * t595 - t385 * t236;
t432 = g(1) * t620 + g(2) * t619;
t186 = -t306 * t565 - t307 * t378;
t188 = -t308 * t565 - t309 * t378;
t243 = -t378 * t561 + t392 * t515;
t431 = -g(1) * t188 - g(2) * t186 - g(3) * t243;
t187 = -t306 * t564 + t307 * t377;
t189 = -t308 * t564 + t309 * t377;
t244 = (t377 * t390 + t378 * t553) * t386;
t430 = -g(1) * t189 - g(2) * t187 - g(3) * t244;
t428 = g(1) * t233 + g(2) * t229 + g(3) * t305;
t118 = t166 + t617;
t423 = -t307 * pkin(2) - t306 * pkin(9) + t476;
t67 = -pkin(3) * t426 + t486;
t422 = t429 - t67;
t421 = -g(1) * t308 - g(2) * t306 + g(3) * t560;
t420 = -t462 - t521;
t418 = pkin(4) * t569 - t232 * t387 + t233 * t375 + t446;
t214 = t305 * t378 - t515;
t417 = g(1) * t163 + g(2) * t159 + g(3) * t214 - t4;
t213 = t305 * t377 + t378 * t560;
t416 = g(1) * t162 + g(2) * t158 + g(3) * t213 + t3;
t415 = -t387 * t517 + t539 + (pkin(4) * t557 + t375 * t553) * t386;
t413 = -t54 + t590;
t297 = t306 * pkin(2);
t412 = t637 * t306 + t641 * t307 - t297;
t299 = t308 * pkin(2);
t411 = t637 * t308 + t641 * t309 - t299;
t410 = t421 * t389;
t409 = t389 * t486 + t78 * t392 - t462;
t141 = -t385 * t226 + t227 * t595;
t83 = -t385 * t130 + t131 * t595;
t407 = t114 * t83 + t140 * t54 + t141 * t53 + t434 * t81;
t406 = t114 * t224 + t140 * t146 + t254 * t81 + t304 * t53;
t108 = -pkin(3) * t507 - t112;
t405 = -pkin(4) * t572 + t228 * t387 - t229 * t375 + t423;
t404 = t32 * t254 + t416;
t239 = -t343 * t385 - t387 * t492;
t403 = -t200 * t114 + t239 * t54 - t240 * t53 - t428;
t402 = pkin(10) * qJD(4) * t254 - t422;
t401 = -t146 * t239 + t378 * t429;
t68 = pkin(4) * t130 + t108;
t41 = t99 * pkin(4) + qJDD(5) + t67;
t5 = t53 * pkin(5) - t54 * qJ(6) - qJD(6) * t434 + t41;
t374 = -pkin(4) * t595 - pkin(5);
t371 = pkin(4) * t385 + qJ(6);
t294 = t538 * qJD(1);
t283 = pkin(4) * t567;
t279 = pkin(4) * t570;
t276 = -t388 * t614 + t320;
t207 = pkin(5) * t317 - qJ(6) * t318 - t375;
t172 = t233 * t391 + t569;
t171 = t567 - t579;
t168 = pkin(5) * t289 - qJ(6) * t290 + t324;
t143 = t146 * qJ(6);
t134 = t392 * pkin(5) - t138;
t133 = -qJ(6) * t392 + t139;
t100 = -t146 * t392 - t254 * t439;
t93 = t146 * t304 + t224 * t254;
t57 = pkin(4) * t204 + pkin(5) * t434 + qJ(6) * t114;
t55 = pkin(5) * t140 - qJ(6) * t141 + t118;
t46 = t146 * t318 - t254 * t550 - t264 * t434;
t36 = -t304 * pkin(5) - t39;
t35 = qJ(6) * t304 + t40;
t27 = qJ(6) * t254 + t30;
t26 = -t254 * pkin(5) + qJD(6) - t29;
t21 = t318 * t54 - t434 * t550;
t20 = t290 * t54 - t434 * t548;
t19 = pkin(5) * t81 - qJ(6) * t83 - qJD(6) * t141 + t68;
t18 = t141 * t54 + t434 * t83;
t17 = t146 * t290 - t254 * t548 - t392 * t54 - t434 * t439;
t13 = t141 * t146 + t224 * t434 + t254 * t83 + t304 * t54;
t7 = -t224 * pkin(5) - t8;
t6 = qJ(6) * t224 + qJD(6) * t304 + t9;
t2 = qJDD(6) - t3 - t615;
t1 = qJD(6) * t254 + t143 + t4;
t10 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t619 - g(2) * t620, t432, 0, 0 (qJDD(1) * t383 + 0.2e1 * t479) * t381 (t390 * t524 - t526 * t536) * t634, t390 * t631 + t448 * t506 (qJDD(1) * t384 - 0.2e1 * t479) * t381, t393 * t631 - t448 * t507, t444 * t596, -t296 * t449 + t312 * t444 - t485 * t596 + g(1) * t307 - g(2) * t309 + (-t497 + t524) * t498, -t205 * t596 - t295 * t449 - t433 * t498 - t444 * t538 + t463 ((-t291 * qJD(2) + qJDD(1) * t538 + t205) * t393 + (-qJD(2) * t294 - qJDD(1) * t312 + t485) * t390 - t432) * t386, t381 * qJDD(1) * pkin(1) ^ 2 - g(1) * t476 - g(2) * t537 + t205 * t538 - t291 * t296 + t294 * t295 - t312 * t485, t264 * t225 + t305 * t632, -t305 * t151 - t264 * t224 - t225 * t262 - t304 * t632, -t225 * t341 + t305 * t522 + ((qJD(1) * t305 + t264) * t534 - t632 * t393) * t386, t151 * t304 + t224 * t262, t224 * t341 - t304 * t522 + (t151 * t393 + (-qJD(1) * t304 - t262) * t534) * t386 (-t522 * t393 + (-t341 - t499) * t534) * t386, -t112 * t341 + t184 * t522 + t296 * t262 + t285 * t151 + t180 * t304 + t241 * t224 + g(1) * t229 - g(2) * t233 + (t486 * t393 + (qJD(1) * t184 + t149) * t534) * t386, t111 * t341 - t150 * t507 + t180 * t305 - t185 * t426 + t241 * t225 + t296 * t264 + t285 * t632 + t560 * t78 + t464, -t111 * t262 - t112 * t264 - t149 * t225 - t150 * t224 - t185 * t151 - t184 * t632 - t78 * t304 + t305 * t486 - t463, -g(1) * t423 - g(2) * t446 + t150 * t111 + t149 * t112 + t180 * t285 - t184 * t486 + t78 * t185 + t241 * t296, t131 * t204 - t227 * t98, -t130 * t204 - t131 * t202 + t226 * t98 - t227 * t99, t131 * t254 + t146 * t227 + t204 * t224 - t304 * t98, t130 * t202 + t226 * t99, -t130 * t254 - t146 * t226 - t202 * t224 - t304 * t99, t93, g(1) * t635 - g(2) * t172 + t101 * t146 + t108 * t202 + t136 * t130 + t166 * t99 + t85 * t224 + t67 * t226 + t23 * t304 + t45 * t254, g(1) * t643 - g(2) * t171 - t102 * t146 + t108 * t204 + t136 * t131 - t166 * t98 - t86 * t224 + t67 * t227 - t44 * t254 + t438 * t304, t101 * t98 - t102 * t99 - t130 * t86 - t131 * t85 - t202 * t44 - t204 * t45 + t226 * t438 - t227 * t23 - t464, -t438 * t102 + t86 * t44 + t23 * t101 + t85 * t45 + t67 * t166 + t136 * t108 - g(1) * (-pkin(3) * t229 - pkin(10) * t228 + t423) - g(2) * (pkin(3) * t233 + pkin(10) * t232 + t446) t18, -t407, t13, t458, -t406, t93, t105 * t81 + t114 * t68 + t118 * t53 + t140 * t41 + t146 * t39 + t224 * t29 + t254 * t8 + t3 * t304 + t465, t105 * t83 + t118 * t54 + t141 * t41 - t146 * t40 - t224 * t30 - t254 * t9 - t304 * t4 + t434 * t68 - t466, -t114 * t9 - t140 * t4 - t141 * t3 - t29 * t83 - t30 * t81 - t39 * t54 - t40 * t53 - t434 * t8 - t464, -g(1) * t405 - g(2) * t418 + t105 * t68 + t41 * t118 + t29 * t8 + t3 * t39 + t30 * t9 + t4 * t40, t18, t13, t407, t93, t406, t458, t114 * t19 + t140 * t5 - t146 * t36 - t2 * t304 - t224 * t26 - t254 * t7 + t48 * t81 + t53 * t55 + t465, -t1 * t140 - t114 * t6 + t141 * t2 + t26 * t83 - t27 * t81 - t35 * t53 + t36 * t54 + t434 * t7 - t464, t1 * t304 - t141 * t5 + t146 * t35 - t19 * t434 + t224 * t27 + t254 * t6 - t48 * t83 - t54 * t55 + t466, t1 * t35 + t27 * t6 + t5 * t55 + t48 * t19 + t2 * t36 + t26 * t7 - g(1) * (-pkin(5) * t159 - qJ(6) * t158 + t405) - g(2) * (pkin(5) * t163 + qJ(6) * t162 + t418); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t487, t536 * t563, -t393 * t471 + t495, t487, t390 * t471 + t358, t444, pkin(1) * t390 * t563 + t294 * t449 - t421 - t485, pkin(1) * t518 + t291 * t449 + (pkin(8) * t526 + g(3)) * t561 + t462 - t513, 0, 0, -t414 * t389 + (t389 * t400 - t575) * t392, -t389 * t151 + t262 * t630 + t264 * t629 + t392 * t632, -t341 * t531 + t389 * t522 + (t341 * t553 + (qJD(2) * t389 - t264) * t390) * t535, -t262 * t439 - t585, t503 + t392 * t522 + (-t341 * t555 + (qJD(2) * t392 + t262) * t390) * t535, t341 * t508, -t149 * t508 - pkin(2) * t151 + t193 * t341 - t294 * t262 + (-pkin(9) * t426 - t241 * t341) * t389 + (t341 * t608 - t180 - t421) * t392, -pkin(2) * t632 - pkin(9) * t503 - g(1) * t568 - g(2) * t571 + g(3) * t517 + t150 * t508 + t180 * t389 - t194 * t341 - t241 * t630 - t294 * t264 - t426 * t614, -pkin(9) * t585 + t632 * t379 + t409 - t521 + (t193 + t376) * t264 + (t194 + t519) * t262 + t629 * t150 + t630 * t149, -t180 * pkin(2) - t150 * t194 - t149 * t193 - t241 * t294 + g(1) * t299 + g(2) * t297 - g(3) * t539 + ((-t149 * t392 - t150 * t389) * qJD(3) + t409) * pkin(9), -t98 * t556 + (-t389 * t529 - t649) * t204, t202 * t252 + t204 * t251 + (-t202 * t391 - t204 * t388) * t531 + (t605 - t604 + (-t204 * t391 + t583) * qJD(4)) * t389, t392 * t98 - t649 * t254 + (-t204 * t341 - t254 * t529 + t586) * t389, t648 * t202 + t99 * t558, t392 * t99 + t461 * t254 + (t202 * t341 - t254 * t528 - t587) * t389, t100, -t136 * t251 + t276 * t146 - t169 * t202 + t546 * t254 + t420 * t388 + (-t23 + (pkin(9) * t202 + t136 * t388) * qJD(3) - t421 * t391) * t392 + (pkin(9) * t99 + t136 * t528 - t341 * t85 + t67 * t388) * t389, -t136 * t252 - t277 * t146 - t169 * t204 - t547 * t254 + t420 * t391 + (-t438 + (pkin(9) * t204 + t136 * t391) * qJD(3) + t421 * t388) * t392 + (-pkin(9) * t98 - t136 * t529 + t341 * t86 + t67 * t391) * t389, t251 * t86 + t252 * t85 + t276 * t98 - t277 * t99 - t546 * t204 - t547 * t202 + t455 * t531 + (t438 * t388 - t23 * t391 + (t388 * t85 - t391 * t86) * qJD(4) - t421) * t389, -t438 * t277 + t23 * t276 - t136 * t169 - g(1) * (-pkin(10) * t568 - t308 * t618 - t299) - g(2) * (-pkin(10) * t571 - t306 * t618 - t297) - g(3) * (t468 * t560 + t539) + t547 * t86 + t546 * t85 + (t136 * t531 + t389 * t67 - t462) * pkin(9), t20, t622, t17, t436, t636, t100, -t105 * t549 + t114 * t543 + t138 * t146 + t254 * t611 + t289 * t41 - t29 * t439 - t3 * t392 + t324 * t53 + t430, -t105 * t548 - t139 * t146 - t254 * t610 + t290 * t41 + t30 * t439 + t324 * t54 + t392 * t4 + t434 * t543 - t431, -t114 * t610 - t138 * t54 - t139 * t53 - t289 * t4 + t29 * t548 - t290 * t3 + t30 * t549 - t434 * t611 - t410, -g(1) * t411 - g(2) * t412 - g(3) * t415 + t105 * t543 + t3 * t138 + t4 * t139 + t29 * t611 + t30 * t610 + t41 * t324, t20, t17, -t622, t100, -t636, t436, t114 * t609 - t134 * t146 + t168 * t53 + t2 * t392 - t254 * t612 + t26 * t439 + t289 * t5 - t48 * t549 + t430, -t1 * t289 - t114 * t613 - t133 * t53 + t134 * t54 + t2 * t290 - t26 * t548 + t27 * t549 + t434 * t612 - t410, -t1 * t392 + t133 * t146 - t168 * t54 + t254 * t613 - t27 * t439 - t290 * t5 - t434 * t609 + t48 * t548 + t431, t1 * t133 + t5 * t168 + t2 * t134 - g(1) * (pkin(5) * t189 + qJ(6) * t188 + t411) - g(2) * (pkin(5) * t187 + qJ(6) * t186 + t412) - g(3) * (pkin(5) * t244 + qJ(6) * t243 + t415) + t609 * t48 + t613 * t27 + t612 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t576, -t262 ^ 2 + t264 ^ 2, -t262 * t341 + t632, -t576, -t151 - t575, t426, -t150 * t341 - t241 * t264 + t429 - t486, -t149 * t341 + t241 * t262 + t428 - t78, 0, 0, t204 * t489 - t605 (-t98 - t584) * t391 + (-t99 - t581) * t388, -t204 * t264 + t254 * t489 + t587, t254 * t583 - t604, t202 * t264 - t388 * t621 + t586, -t578, -pkin(3) * t99 - t103 * t254 - t150 * t202 - t264 * t85 + t388 * t437 - t391 * t402, pkin(3) * t98 + t104 * t254 - t150 * t204 + t264 * t86 + t388 * t402 + t391 * t437, t103 * t204 + t104 * t202 + ((-t99 + t530) * pkin(10) + t638) * t391 + ((qJD(4) * t202 - t98) * pkin(10) + t633) * t388 - t428, -t85 * t103 - t86 * t104 - t136 * t150 + t422 * pkin(3) + (qJD(4) * t455 - t23 * t388 - t391 * t438 - t428) * pkin(10), t21, t623, t46, t435, t628, -t578, t105 * t639 + t114 * t475 - t254 * t599 - t264 * t29 + t317 * t41 - t375 * t53 + t401, -t105 * t550 - t254 * t597 + t264 * t30 + t318 * t41 - t375 * t54 + t434 * t475 + t626, t114 * t43 + t29 * t550 - t3 * t318 - t30 * t639 - t317 * t4 + t434 * t599 + t403, -g(1) * t544 - g(2) * t545 - g(3) * t542 + t105 * t475 - t3 * t239 + t4 * t240 - t29 * t599 + t30 * t597 - t41 * t375, t21, t46, -t623, -t578, -t628, t435, t114 * t601 + t207 * t53 - t254 * t600 + t26 * t264 + t317 * t5 + t48 * t639 + t401, -t1 * t317 + t114 * t37 + t2 * t318 - t26 * t550 - t27 * t639 + t434 * t600 + t403, -t207 * t54 + t254 * t598 - t264 * t27 - t318 * t5 - t434 * t601 + t48 * t550 - t626, t1 * t240 + t5 * t207 + t2 * t239 - g(1) * (t232 * t459 + t544) - g(2) * (t228 * t459 + t545) - g(3) * (t304 * t459 + t542) + t601 * t48 + t598 * t27 + t600 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t582, -t202 ^ 2 + t204 ^ 2, -t98 + t584, -t582, -t264 * t528 + t341 * t529 + t581 - t642, t146, -g(1) * t171 - g(2) * t643 + g(3) * t226 - t136 * t204 - t633, g(1) * t172 + g(2) * t635 + g(3) * t227 + t136 * t202 - t638, 0, 0, t640, t452, t34, -t640, t442, t146, -t105 * t434 + (-t114 * t204 + t146 * t595) * pkin(4) + t404, t105 * t114 + t254 * t33 + (-t146 * t385 - t204 * t434) * pkin(4) + t417, t30 * t434 - t607 + (-t385 * t53 - t54 * t595) * pkin(4) + (t33 - t29) * t114, -g(1) * t283 - g(2) * t279 + t29 * t32 - t30 * t33 + (g(3) * t516 - t105 * t204 + t3 * t595 + t4 * t385 + t388 * t428) * pkin(4), t640, t34, -t452, t146, -t442, -t640, -t114 * t57 + (pkin(5) - t374) * t146 + t404 + t624, t27 * t434 - t371 * t53 + t374 * t54 - t607 + (t26 - t552) * t114, -t114 * t48 + t434 * t57 + t146 * t371 + t143 + (0.2e1 * qJD(6) - t33) * t254 - t417, t1 * t371 + t2 * t374 - t48 * t57 - t26 * t32 - g(1) * (-pkin(4) * t579 - pkin(5) * t162 + qJ(6) * t163 + t283) - g(2) * (-pkin(4) * t580 - pkin(5) * t158 + qJ(6) * t159 + t279) - g(3) * (-pkin(5) * t213 + qJ(6) * t214 - t617) + t552 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t443, -t413, t453, t114 * t30 + t29 * t434 + t41 - t429, 0, 0, 0, 0, 0, 0, t443, t453, t413, t114 * t27 - t26 * t434 - t429 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t640 - t146, t34, -t621 - t594, -t254 * t27 - t416 - t615 - t624;];
tau_reg  = t10;
