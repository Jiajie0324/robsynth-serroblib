% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:56
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPP7_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:55:32
% EndTime: 2019-05-07 18:55:49
% DurationCPUTime: 17.77s
% Computational Cost: add. (97629->350), mult. (210788->484), div. (0->0), fcn. (170022->12), ass. (0->268)
t3062 = cos(pkin(6));
t3054 = qJD(1) * t3062 + qJD(2);
t3064 = sin(qJ(3));
t3068 = cos(qJ(3));
t3060 = sin(pkin(6));
t3065 = sin(qJ(2));
t3123 = t3060 * t3065;
t3117 = qJD(1) * t3123;
t3029 = t3054 * t3064 + t3068 * t3117;
t3069 = cos(qJ(2));
t3122 = t3060 * t3069;
t3116 = qJD(1) * t3122;
t3119 = qJDD(1) * t3060;
t3036 = qJD(2) * t3116 + t3065 * t3119;
t3053 = t3062 * qJDD(1) + qJDD(2);
t3112 = t3064 * t3036 - t3068 * t3053;
t3084 = t3029 * qJD(3) + qJDD(4) + t3112;
t3063 = sin(qJ(4));
t3067 = cos(qJ(4));
t3110 = -qJD(3) + t3116;
t3013 = t3063 * t3029 + t3067 * t3110;
t3014 = t3067 * t3029 - t3063 * t3110;
t3059 = sin(pkin(11));
t3061 = cos(pkin(11));
t2990 = t3013 * t3061 + t3059 * t3014;
t2992 = -t3013 * t3059 + t3014 * t3061;
t3130 = t2990 * t2992;
t2934 = t3084 + t3130;
t2989 = t2992 ^ 2;
t3027 = -t3068 * t3054 + t3064 * t3117;
t3026 = qJD(4) + t3027;
t3140 = t3026 ^ 2;
t3146 = -t2989 - t3140;
t2893 = t2934 * t3059 - t3061 * t3146;
t2895 = t2934 * t3061 + t3059 * t3146;
t2875 = t2893 * t3063 - t2895 * t3067;
t3088 = t3068 * t3036 + t3064 * t3053;
t3002 = -t3027 * qJD(3) + t3088;
t3118 = qJDD(1) * t3069;
t3134 = qJD(1) * t3065;
t3147 = (qJD(2) * t3134 - t3118) * t3060;
t3081 = qJDD(3) + t3147;
t3078 = -t3067 * t3002 - t3063 * t3081;
t2961 = -t3013 * qJD(4) - t3078;
t3077 = -t3063 * t3002 + t3067 * t3081;
t3076 = -t3014 * qJD(4) + t3077;
t3075 = t3061 * t2961 + t3059 * t3076;
t3129 = t2990 * t3026;
t3073 = t3075 - t3129;
t2856 = t2875 * t3064 - t3068 * t3073;
t2858 = t2875 * t3068 + t3064 * t3073;
t2867 = t2893 * t3067 + t2895 * t3063;
t3101 = t2858 * t3065 + t2867 * t3069;
t2824 = -t3060 * t2856 + t3062 * t3101;
t2831 = t2858 * t3069 - t2867 * t3065;
t3066 = sin(qJ(1));
t3070 = cos(qJ(1));
t3193 = t2824 * t3066 - t2831 * t3070;
t3192 = t2824 * t3070 + t2831 * t3066;
t2822 = t3062 * t2856 + t3060 * t3101;
t2935 = t3084 - t3130;
t2950 = t2990 ^ 2;
t3145 = -t3140 - t2950;
t3154 = -t2935 * t3059 + t3061 * t3145;
t3155 = t3061 * t2935 + t3059 * t3145;
t3156 = t3063 * t3154 + t3067 * t3155;
t3114 = -t2961 * t3059 + t3061 * t3076;
t3127 = t3026 * t2992;
t3086 = -t3114 + t3127;
t3157 = -t3063 * t3155 + t3067 * t3154;
t3163 = t3064 * t3086 + t3068 * t3157;
t3170 = t3065 * t3156 + t3069 * t3163;
t3165 = t3064 * t3157 - t3068 * t3086;
t3171 = t3065 * t3163 - t3069 * t3156;
t3180 = -t3060 * t3165 + t3062 * t3171;
t3187 = -t3066 * t3180 + t3070 * t3170;
t3186 = t3066 * t3170 + t3070 * t3180;
t3181 = t3060 * t3171 + t3062 * t3165;
t2911 = t3075 + t3129;
t3087 = t3114 + t3127;
t3143 = t2911 * t3059 + t3061 * t3087;
t3144 = -t3061 * t2911 + t3059 * t3087;
t3152 = t3063 * t3143 + t3067 * t3144;
t2925 = t2989 + t2950;
t3153 = -t3063 * t3144 + t3067 * t3143;
t3158 = -t2925 * t3064 + t3068 * t3153;
t3162 = t3065 * t3152 + t3069 * t3158;
t3159 = t2925 * t3068 + t3064 * t3153;
t3164 = t3065 * t3158 - t3069 * t3152;
t3172 = -t3060 * t3159 + t3062 * t3164;
t3179 = -t3066 * t3172 + t3070 * t3162;
t3178 = t3066 * t3162 + t3070 * t3172;
t3173 = t3060 * t3164 + t3062 * t3159;
t3109 = t3110 ^ 2;
t2983 = t3027 * t3110 + t3002;
t3142 = t3013 ^ 2;
t3141 = t3014 ^ 2;
t3139 = t3027 ^ 2;
t3138 = t3029 ^ 2;
t3137 = t3054 ^ 2;
t3136 = -2 * qJD(5);
t3135 = t3062 * g(3);
t3133 = qJD(1) * t3069;
t3128 = t3013 * t3014;
t3126 = t3026 * t3013;
t3125 = t3029 * t3027;
t3071 = qJD(1) ^ 2;
t3124 = t3060 ^ 2 * t3071;
t3035 = (-pkin(2) * t3069 - pkin(9) * t3065) * t3060 * qJD(1);
t3048 = -g(1) * t3070 - g(2) * t3066;
t3032 = -pkin(1) * t3071 + pkin(8) * t3119 + t3048;
t3047 = t3066 * g(1) - t3070 * g(2);
t3080 = t3071 * t3060 * pkin(8) + qJDD(1) * pkin(1) + t3047;
t3079 = t3062 * t3080;
t3121 = t3069 * t3032 + t3065 * t3079;
t2978 = -t3137 * pkin(2) + t3053 * pkin(9) + (-g(3) * t3065 + t3035 * t3133) * t3060 + t3121;
t3072 = -t3036 * pkin(9) - t3135 + (-t3054 * pkin(9) * t3133 + (-t3118 + (qJD(2) + t3054) * t3134) * pkin(2) - t3080) * t3060;
t2940 = t3068 * t2978 + t3064 * t3072;
t3007 = pkin(3) * t3027 - pkin(10) * t3029;
t2921 = -pkin(3) * t3109 + pkin(10) * t3081 - t3027 * t3007 + t2940;
t3113 = t3065 * t3032 - t3069 * t3079;
t2977 = -t3053 * pkin(2) - t3137 * pkin(9) + (g(3) * t3069 + t3035 * t3134) * t3060 + t3113;
t2981 = (0.2e1 * qJD(3) - t3116) * t3029 + t3112;
t2923 = t2981 * pkin(3) - pkin(10) * t2983 + t2977;
t2884 = t3067 * t2921 + t3063 * t2923;
t3120 = -t3026 + qJD(4);
t2997 = pkin(4) * t3026 - qJ(5) * t3014;
t2872 = -pkin(4) * t3142 + qJ(5) * t3076 - t3026 * t2997 + t2884;
t2883 = -t3063 * t2921 + t3067 * t2923;
t2953 = t3084 - t3128;
t3074 = (-t2961 - t3126) * qJ(5) + t2953 * pkin(4) + t2883;
t2834 = t3061 * t2872 + t2990 * t3136 + t3059 * t3074;
t3115 = t3059 * t2872 - t3061 * t3074;
t2939 = -t3064 * t2978 + t3068 * t3072;
t3111 = t3054 * t3116;
t2949 = pkin(5) * t2990 - qJ(6) * t2992;
t2827 = -pkin(5) * t3140 + qJ(6) * t3084 + 0.2e1 * qJD(6) * t3026 - t2990 * t2949 + t2834;
t2828 = qJDD(6) - t3084 * pkin(5) - t3140 * qJ(6) + ((2 * qJD(5)) + t2949) * t2992 + t3115;
t2810 = t2827 * t3059 - t2828 * t3061;
t2811 = t2827 * t3061 + t2828 * t3059;
t2801 = -t2810 * t3063 + t2811 * t3067;
t2920 = -t3081 * pkin(3) - t3109 * pkin(10) + t3029 * t3007 - t2939;
t2885 = -t3076 * pkin(4) - t3142 * qJ(5) + t3014 * t2997 + qJDD(5) + t2920;
t2847 = -t3114 * pkin(5) + (pkin(5) * t3026 - 0.2e1 * qJD(6)) * t2992 + t2885 - t3073 * qJ(6);
t2799 = t2801 * t3068 + t2847 * t3064;
t2800 = t2810 * t3067 + t2811 * t3063;
t3108 = t2799 * t3065 - t2800 * t3069;
t2833 = t2992 * t3136 - t3115;
t2814 = t2833 * t3061 + t2834 * t3059;
t2815 = -t2833 * t3059 + t2834 * t3061;
t2805 = -t2814 * t3063 + t2815 * t3067;
t2803 = t2805 * t3068 + t2885 * t3064;
t2804 = t2814 * t3067 + t2815 * t3063;
t3107 = t2803 * t3065 - t2804 * t3069;
t2853 = -t2883 * t3063 + t2884 * t3067;
t2840 = t2853 * t3068 + t2920 * t3064;
t2852 = t2883 * t3067 + t2884 * t3063;
t3104 = t2840 * t3065 - t2852 * t3069;
t2944 = -t3014 * t3120 + t3077;
t2946 = t3013 * t3120 + t3078;
t2902 = t2944 * t3067 - t2946 * t3063;
t2962 = -t3141 - t3142;
t2888 = t2902 * t3068 + t2962 * t3064;
t2901 = t2944 * t3063 + t2946 * t3067;
t3099 = t2888 * t3065 - t2901 * t3069;
t2971 = -t3140 - t3142;
t2930 = -t2953 * t3063 + t2971 * t3067;
t2943 = (qJD(4) + t3026) * t3014 - t3077;
t2892 = t2930 * t3068 + t2943 * t3064;
t2929 = t2953 * t3067 + t2971 * t3063;
t3098 = t2892 * t3065 - t2929 * t3069;
t2954 = -t3084 - t3128;
t2988 = -t3140 - t3141;
t2933 = t2954 * t3067 - t2988 * t3063;
t2945 = t2961 - t3126;
t2898 = t2933 * t3068 + t2945 * t3064;
t2932 = t2954 * t3063 + t2988 * t3067;
t3097 = t2898 * t3065 - t2932 * t3069;
t2900 = -t2939 * t3064 + t2940 * t3068;
t3096 = t2900 * t3065 - t2977 * t3069;
t2982 = -t3029 * t3116 - t3112;
t2984 = t3027 * t3116 - t3088;
t2948 = t2982 * t3068 - t2984 * t3064;
t2996 = -t3138 - t3139;
t3095 = t2948 * t3065 - t2996 * t3069;
t2999 = t3081 - t3125;
t3003 = -t3109 - t3139;
t2959 = -t2999 * t3064 + t3003 * t3068;
t3094 = t2959 * t3065 - t2981 * t3069;
t2998 = -t3125 - t3081;
t3009 = -t3138 - t3109;
t2965 = t2998 * t3068 - t3009 * t3064;
t3093 = t2965 * t3065 - t2983 * t3069;
t3004 = -g(3) * t3122 - t3113;
t3005 = -g(3) * t3123 + t3121;
t3092 = t3004 * t3069 + t3005 * t3065;
t3016 = t3111 - t3036;
t3039 = t3054 * t3117;
t3017 = t3039 - t3147;
t3091 = t3016 * t3069 + t3017 * t3065;
t3057 = t3065 ^ 2;
t3025 = -t3057 * t3124 - t3137;
t3046 = t3069 * t3065 * t3124;
t3034 = t3046 - t3053;
t3090 = t3025 * t3069 + t3034 * t3065;
t3033 = t3046 + t3053;
t3058 = t3069 ^ 2;
t3037 = -t3058 * t3124 - t3137;
t3089 = t3033 * t3069 + t3037 * t3065;
t3045 = -qJDD(1) * t3066 - t3070 * t3071;
t3044 = qJDD(1) * t3070 - t3066 * t3071;
t3038 = (-t3057 - t3058) * t3124;
t3020 = -t3060 * t3080 - t3135;
t3018 = t3039 + t3147;
t3015 = t3111 + t3036;
t3011 = -t3033 * t3065 + t3037 * t3069;
t3006 = -t3025 * t3065 + t3034 * t3069;
t2995 = -t3016 * t3065 + t3017 * t3069;
t2994 = -t3060 * t3018 + t3062 * t3089;
t2993 = t3062 * t3018 + t3060 * t3089;
t2980 = -t3060 * t3015 + t3062 * t3090;
t2979 = t3062 * t3015 + t3060 * t3090;
t2976 = -t3060 * t3038 + t3062 * t3091;
t2975 = t3062 * t3038 + t3060 * t3091;
t2964 = t2998 * t3064 + t3009 * t3068;
t2963 = -t3004 * t3065 + t3005 * t3069;
t2958 = t2999 * t3068 + t3003 * t3064;
t2952 = -t3060 * t3020 + t3062 * t3092;
t2951 = t3062 * t3020 + t3060 * t3092;
t2947 = t2982 * t3064 + t2984 * t3068;
t2938 = t2965 * t3069 + t2983 * t3065;
t2937 = t2959 * t3069 + t2981 * t3065;
t2926 = t2948 * t3069 + t2996 * t3065;
t2918 = -t3060 * t2964 + t3062 * t3093;
t2917 = t3062 * t2964 + t3060 * t3093;
t2916 = -t3060 * t2958 + t3062 * t3094;
t2915 = t3062 * t2958 + t3060 * t3094;
t2899 = t2939 * t3068 + t2940 * t3064;
t2897 = t2933 * t3064 - t2945 * t3068;
t2891 = t2930 * t3064 - t2943 * t3068;
t2890 = -t3060 * t2947 + t3062 * t3095;
t2889 = t3062 * t2947 + t3060 * t3095;
t2887 = t2902 * t3064 - t2962 * t3068;
t2886 = t2900 * t3069 + t2977 * t3065;
t2882 = t2898 * t3069 + t2932 * t3065;
t2881 = t2892 * t3069 + t2929 * t3065;
t2866 = t2888 * t3069 + t2901 * t3065;
t2863 = -t3060 * t2899 + t3062 * t3096;
t2862 = t3062 * t2899 + t3060 * t3096;
t2861 = -t3060 * t2897 + t3062 * t3097;
t2860 = t3062 * t2897 + t3060 * t3097;
t2855 = -t3060 * t2891 + t3062 * t3098;
t2854 = t3062 * t2891 + t3060 * t3098;
t2846 = -t3060 * t2887 + t3062 * t3099;
t2845 = t3062 * t2887 + t3060 * t3099;
t2839 = t2853 * t3064 - t2920 * t3068;
t2826 = t2840 * t3069 + t2852 * t3065;
t2813 = -t3060 * t2839 + t3062 * t3104;
t2812 = t3062 * t2839 + t3060 * t3104;
t2802 = t2805 * t3064 - t2885 * t3068;
t2798 = t2801 * t3064 - t2847 * t3068;
t2797 = t2803 * t3069 + t2804 * t3065;
t2796 = t2799 * t3069 + t2800 * t3065;
t2795 = -t3060 * t2802 + t3062 * t3107;
t2794 = t3062 * t2802 + t3060 * t3107;
t2793 = -t3060 * t2798 + t3062 * t3108;
t2792 = t3062 * t2798 + t3060 * t3108;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3045, -t3044, 0, -t3047 * t3066 + t3048 * t3070, 0, 0, 0, 0, 0, 0, -t2994 * t3066 + t3011 * t3070, -t2980 * t3066 + t3006 * t3070, -t2976 * t3066 + t2995 * t3070, -t2952 * t3066 + t2963 * t3070, 0, 0, 0, 0, 0, 0, -t2916 * t3066 + t2937 * t3070, -t2918 * t3066 + t2938 * t3070, -t2890 * t3066 + t2926 * t3070, -t2863 * t3066 + t2886 * t3070, 0, 0, 0, 0, 0, 0, -t2855 * t3066 + t2881 * t3070, -t2861 * t3066 + t2882 * t3070, -t2846 * t3066 + t2866 * t3070, -t2813 * t3066 + t2826 * t3070, 0, 0, 0, 0, 0, 0, t3187, -t3193, t3179, -t2795 * t3066 + t2797 * t3070, 0, 0, 0, 0, 0, 0, t3187, t3179, t3193, -t2793 * t3066 + t2796 * t3070; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3044, t3045, 0, t3047 * t3070 + t3048 * t3066, 0, 0, 0, 0, 0, 0, t2994 * t3070 + t3011 * t3066, t2980 * t3070 + t3006 * t3066, t2976 * t3070 + t2995 * t3066, t2952 * t3070 + t2963 * t3066, 0, 0, 0, 0, 0, 0, t2916 * t3070 + t2937 * t3066, t2918 * t3070 + t2938 * t3066, t2890 * t3070 + t2926 * t3066, t2863 * t3070 + t2886 * t3066, 0, 0, 0, 0, 0, 0, t2855 * t3070 + t2881 * t3066, t2861 * t3070 + t2882 * t3066, t2846 * t3070 + t2866 * t3066, t2813 * t3070 + t2826 * t3066, 0, 0, 0, 0, 0, 0, t3186, t3192, t3178, t2795 * t3070 + t2797 * t3066, 0, 0, 0, 0, 0, 0, t3186, t3178, -t3192, t2793 * t3070 + t2796 * t3066; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2993, t2979, t2975, t2951, 0, 0, 0, 0, 0, 0, t2915, t2917, t2889, t2862, 0, 0, 0, 0, 0, 0, t2854, t2860, t2845, t2812, 0, 0, 0, 0, 0, 0, t3181, t2822, t3173, t2794, 0, 0, 0, 0, 0, 0, t3181, t3173, -t2822, t2792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3071, -qJDD(1), 0, t3048, 0, 0, 0, 0, 0, 0, t3011, t3006, t2995, t2963, 0, 0, 0, 0, 0, 0, t2937, t2938, t2926, t2886, 0, 0, 0, 0, 0, 0, t2881, t2882, t2866, t2826, 0, 0, 0, 0, 0, 0, t3170, t2831, t3162, t2797, 0, 0, 0, 0, 0, 0, t3170, t3162, -t2831, t2796; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3071, 0, t3047, 0, 0, 0, 0, 0, 0, t2994, t2980, t2976, t2952, 0, 0, 0, 0, 0, 0, t2916, t2918, t2890, t2863, 0, 0, 0, 0, 0, 0, t2855, t2861, t2846, t2813, 0, 0, 0, 0, 0, 0, t3180, t2824, t3172, t2795, 0, 0, 0, 0, 0, 0, t3180, t3172, -t2824, t2793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2993, t2979, t2975, t2951, 0, 0, 0, 0, 0, 0, t2915, t2917, t2889, t2862, 0, 0, 0, 0, 0, 0, t2854, t2860, t2845, t2812, 0, 0, 0, 0, 0, 0, t3181, t2822, t3173, t2794, 0, 0, 0, 0, 0, 0, t3181, t3173, -t2822, t2792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3037, t3034, t3017, t3005, 0, 0, 0, 0, 0, 0, t2959, t2965, t2948, t2900, 0, 0, 0, 0, 0, 0, t2892, t2898, t2888, t2840, 0, 0, 0, 0, 0, 0, t3163, t2858, t3158, t2803, 0, 0, 0, 0, 0, 0, t3163, t3158, -t2858, t2799; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3033, t3025, t3016, t3004, 0, 0, 0, 0, 0, 0, -t2981, -t2983, -t2996, -t2977, 0, 0, 0, 0, 0, 0, -t2929, -t2932, -t2901, -t2852, 0, 0, 0, 0, 0, 0, -t3156, t2867, -t3152, -t2804, 0, 0, 0, 0, 0, 0, -t3156, -t3152, -t2867, -t2800; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3018, t3015, t3038, t3020, 0, 0, 0, 0, 0, 0, t2958, t2964, t2947, t2899, 0, 0, 0, 0, 0, 0, t2891, t2897, t2887, t2839, 0, 0, 0, 0, 0, 0, t3165, t2856, t3159, t2802, 0, 0, 0, 0, 0, 0, t3165, t3159, -t2856, t2798; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3003, t2998, t2982, t2940, 0, 0, 0, 0, 0, 0, t2930, t2933, t2902, t2853, 0, 0, 0, 0, 0, 0, t3157, t2875, t3153, t2805, 0, 0, 0, 0, 0, 0, t3157, t3153, -t2875, t2801; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2999, t3009, t2984, t2939, 0, 0, 0, 0, 0, 0, -t2943, -t2945, -t2962, -t2920, 0, 0, 0, 0, 0, 0, -t3086, -t3073, t2925, -t2885, 0, 0, 0, 0, 0, 0, -t3086, t2925, t3073, -t2847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2981, t2983, t2996, t2977, 0, 0, 0, 0, 0, 0, t2929, t2932, t2901, t2852, 0, 0, 0, 0, 0, 0, t3156, -t2867, t3152, t2804, 0, 0, 0, 0, 0, 0, t3156, t3152, t2867, t2800; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2971, t2954, t2944, t2884, 0, 0, 0, 0, 0, 0, t3154, -t2895, t3143, t2815, 0, 0, 0, 0, 0, 0, t3154, t3143, t2895, t2811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2953, t2988, t2946, t2883, 0, 0, 0, 0, 0, 0, t3155, -t2893, t3144, t2814, 0, 0, 0, 0, 0, 0, t3155, t3144, t2893, t2810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2943, t2945, t2962, t2920, 0, 0, 0, 0, 0, 0, t3086, t3073, -t2925, t2885, 0, 0, 0, 0, 0, 0, t3086, -t2925, -t3073, t2847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3145, -t2934, t3087, t2834, 0, 0, 0, 0, 0, 0, t3145, t3087, t2934, t2827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2935, t3146, -t2911, t2833, 0, 0, 0, 0, 0, 0, t2935, -t2911, -t3146, -t2828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3086, t3073, -t2925, t2885, 0, 0, 0, 0, 0, 0, t3086, -t2925, -t3073, t2847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3145, t3087, t2934, t2827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3086, -t2925, -t3073, t2847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2935, t2911, t3146, t2828;];
f_new_reg  = t1;
