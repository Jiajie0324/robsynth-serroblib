% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPRR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRR7_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:34:12
% EndTime: 2019-03-08 22:34:21
% DurationCPUTime: 3.43s
% Computational Cost: add. (3044->287), mult. (7174->515), div. (0->0), fcn. (6513->10), ass. (0->164)
t195 = pkin(3) + pkin(9);
t202 = pkin(10) + t195;
t90 = sin(qJ(5));
t63 = t202 * t90;
t91 = sin(qJ(3));
t163 = t195 * t91;
t94 = cos(qJ(3));
t183 = qJ(4) * t94;
t204 = t163 - t183;
t194 = pkin(4) + pkin(8);
t191 = sin(qJ(6));
t192 = cos(qJ(6));
t200 = qJD(5) + qJD(6);
t93 = cos(qJ(5));
t149 = t191 * t93;
t152 = t192 * t90;
t59 = t149 + t152;
t31 = t200 * t59;
t144 = t191 * qJD(5);
t134 = t90 * t144;
t145 = t192 * qJD(6);
t146 = qJD(6) * t191;
t32 = -t134 - t90 * t146 + (qJD(5) * t192 + t145) * t93;
t150 = t191 * t90;
t151 = t192 * t93;
t60 = t151 - t150;
t203 = (qJD(6) * (-t191 * t60 + t192 * t59) + t191 * t32 - t192 * t31) * pkin(5);
t201 = t195 * t94;
t175 = qJD(5) * t93;
t79 = t94 * qJD(3);
t54 = -t175 * t91 - t79 * t90;
t87 = t94 ^ 2;
t143 = qJD(3) * (t91 ^ 2 - t87);
t84 = t90 ^ 2;
t86 = t93 ^ 2;
t185 = t84 - t86;
t142 = t185 * qJD(5);
t177 = qJD(4) * t94;
t182 = t91 * qJ(4);
t69 = t194 * t94;
t199 = qJD(3) * (t182 + t201) - qJD(5) * t69 - t177;
t95 = cos(qJ(2));
t180 = qJD(2) * t95;
t88 = sin(pkin(6));
t158 = t88 * t180;
t92 = sin(qJ(2));
t188 = t88 * t92;
t167 = t91 * t188;
t89 = cos(pkin(6));
t33 = -qJD(3) * t167 + (qJD(3) * t89 + t158) * t94;
t52 = t188 * t94 + t89 * t91;
t26 = t52 * t33;
t34 = qJD(3) * t52 + t158 * t91;
t51 = -t89 * t94 + t167;
t197 = -0.2e1 * t180 * t88 ^ 2 * t92 + 0.2e1 * t51 * t34 + 0.2e1 * t26;
t196 = 0.2e1 * qJD(4);
t190 = t59 * t32;
t189 = t60 * t31;
t187 = t88 * t95;
t186 = t93 * t94;
t133 = pkin(2) + t201;
t114 = -t133 - t182;
t164 = t90 * t194;
t30 = t114 * t93 + t164 * t91;
t181 = qJD(2) * t92;
t179 = qJD(3) * t90;
t178 = qJD(3) * t93;
t176 = qJD(5) * t90;
t174 = qJD(5) * t94;
t173 = qJD(5) * t195;
t172 = t91 * qJD(3);
t171 = t91 * qJD(4);
t170 = qJ(4) * qJD(5);
t168 = -0.2e1 * pkin(2) * qJD(3);
t166 = pkin(8) * t172;
t165 = pkin(8) * t79;
t162 = t90 * t174;
t160 = t93 * t174;
t159 = t88 * t181;
t156 = t90 * t171;
t155 = t91 * t79;
t154 = t93 * t172;
t153 = t90 * t175;
t148 = qJD(3) * t192;
t147 = qJD(3) * t191;
t141 = t90 * t154;
t140 = t87 * t153;
t139 = t94 * t151;
t138 = pkin(5) * t145;
t137 = pkin(5) * t146;
t136 = t91 * t147;
t135 = t91 * t148;
t132 = -t94 * pkin(3) - t182;
t22 = t93 * t136 + (t135 + (t144 + t146) * t94) * t90 - t200 * t139;
t45 = t59 * t94;
t131 = t22 * t60 + t31 * t45;
t23 = t135 * t93 - t136 * t90 + t31 * t94;
t44 = t150 * t94 - t139;
t130 = -t59 * t23 - t32 * t44;
t116 = t90 * qJ(4) + t194 * t93;
t29 = t116 * t91 + t133 * t90;
t129 = -t29 * t90 + t30 * t93;
t128 = t189 - t190;
t120 = t187 * t93 - t51 * t90;
t35 = t187 * t90 + t51 * t93;
t127 = -t120 * t93 - t35 * t90;
t125 = t202 * t94 + pkin(2);
t124 = t33 * qJ(4) + t52 * qJD(4);
t123 = t202 * t151;
t122 = t202 * t149;
t119 = -t32 * t91 - t59 * t79;
t118 = t175 * t52 + t33 * t90;
t117 = -t176 * t52 + t33 * t93;
t115 = pkin(5) + t116;
t112 = t154 + t162;
t101 = t115 * t91 + t125 * t90;
t100 = t192 * t101;
t27 = -pkin(10) * t186 + t30;
t109 = (t93 * qJ(4) - t164) * t91;
t97 = t156 + (t125 * t93 + t109) * qJD(5) + (t115 * t94 - t63 * t91) * qJD(3);
t14 = t114 * t176 - t93 * (qJD(3) * t204 - t171) + t54 * t194;
t98 = pkin(10) * t112 - t14;
t1 = -qJD(6) * t100 + t146 * t27 - t191 * t97 - t192 * t98;
t21 = -t120 * t192 + t191 * t35;
t62 = t194 * t172;
t108 = qJD(5) * t204 - t62;
t10 = -t191 * t27 + t100;
t99 = t191 * t101;
t11 = t192 * t27 + t99;
t2 = -qJD(6) * t99 - t145 * t27 - t191 * t98 + t192 * t97;
t107 = -t1 * t59 - t10 * t31 + t11 * t32 + t2 * t60;
t20 = t120 * t191 + t192 * t35;
t16 = qJD(5) * t120 - t159 * t90 + t34 * t93;
t17 = qJD(5) * t35 + t159 * t93 + t34 * t90;
t4 = -t120 * t146 - t145 * t35 - t16 * t191 - t17 * t192;
t5 = -qJD(6) * t21 + t16 * t192 - t17 * t191;
t106 = t20 * t31 - t21 * t32 + t4 * t59 - t5 * t60;
t18 = t123 * t200 - t134 * t202 - t63 * t146;
t38 = -t192 * t63 - t122;
t19 = -t38 * qJD(6) + (t152 * t202 + t122) * qJD(5);
t37 = t191 * t63 - t123;
t105 = t18 * t59 - t19 * t60 + t37 * t31 - t38 * t32;
t104 = qJD(3) * t132 + t177;
t15 = t156 + (t133 * t93 + t109) * qJD(5) + (t116 * t94 - t163 * t90) * qJD(3);
t3 = qJD(5) * t129 - t14 * t90 + t15 * t93;
t6 = qJD(5) * t127 + t16 * t93 + t17 * t90;
t103 = t33 * t94 + t34 * t91 + (t51 * t94 - t52 * t91) * qJD(3);
t102 = t103 * pkin(8);
t82 = qJ(4) * t196;
t77 = t90 * pkin(5) + qJ(4);
t73 = pkin(5) * t175 + qJD(4);
t72 = -0.2e1 * t155;
t71 = 0.2e1 * t155;
t64 = -pkin(2) + t132;
t58 = -0.2e1 * t143;
t53 = -t176 * t91 + t79 * t93;
t50 = pkin(5) * t186 + t69;
t47 = -t171 + (pkin(3) * t91 - t183) * qJD(3);
t43 = (t172 * t95 + t181 * t94) * t88;
t42 = (t181 * t91 - t79 * t95) * t88;
t41 = -t142 * t94 - t141;
t39 = -pkin(5) * t162 + (-pkin(5) * t93 - t194) * t172;
t24 = -t31 * t91 + t60 * t79;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t120 * t17 + 0.2e1 * t35 * t16 + 0.2e1 * t26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t20 * t5 - 0.2e1 * t21 * t4 + 0.2e1 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, -t158, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t42, t103, -pkin(2) * t159 + t102, 0, 0, 0, 0, 0, 0, t103, t43, -t42 (t181 * t64 - t47 * t95) * t88 + t102, 0, 0, 0, 0, 0, 0 (-t178 * t52 + t16) * t91 + (qJD(3) * t35 + t117) * t94 (t179 * t52 - t17) * t91 + (qJD(3) * t120 - t118) * t94, t127 * t172 + (t16 * t90 - t17 * t93 + (-t120 * t90 + t35 * t93) * qJD(5)) * t94, t120 * t14 + t35 * t15 + t16 * t29 + t17 * t30 + t33 * t69 - t52 * t62, 0, 0, 0, 0, 0, 0, t20 * t79 - t52 * t23 - t33 * t44 + t5 * t91, -t21 * t79 + t52 * t22 - t33 * t45 + t4 * t91, -t20 * t22 + t21 * t23 - t4 * t44 + t5 * t45, -t21 * t1 + t5 * t10 - t4 * t11 + t20 * t2 + t33 * t50 + t52 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t58, 0, t72, 0, 0, t91 * t168, t94 * t168, 0, 0, 0, 0, 0, t71, t58, t72, 0, -0.2e1 * t172 * t64 + 0.2e1 * t47 * t94, -0.2e1 * t47 * t91 - 0.2e1 * t64 * t79, 0.2e1 * t64 * t47, -0.2e1 * t155 * t84 + 0.2e1 * t140, -0.4e1 * t141 * t94 - 0.2e1 * t142 * t87, 0.2e1 * t143 * t90 - 0.2e1 * t160 * t91, -0.2e1 * t155 * t86 - 0.2e1 * t140, 0.2e1 * t143 * t93 + 0.2e1 * t162 * t91, t71, 0.2e1 * (-t178 * t69 + t15) * t91 + 0.2e1 * (qJD(3) * t29 - t176 * t69 - t62 * t93) * t94, 0.2e1 * (t179 * t69 + t14) * t91 + 0.2e1 * (-qJD(3) * t30 - t175 * t69 + t62 * t90) * t94, 0.2e1 * t129 * t172 + 0.2e1 * (t14 * t93 + t15 * t90 + (t29 * t93 + t30 * t90) * qJD(5)) * t94, -0.2e1 * t30 * t14 + 0.2e1 * t29 * t15 - 0.2e1 * t69 * t62, -0.2e1 * t45 * t22, 0.2e1 * t22 * t44 - 0.2e1 * t45 * t23, 0.2e1 * t22 * t91 - 0.2e1 * t45 * t79, 0.2e1 * t44 * t23, 0.2e1 * t23 * t91 + 0.2e1 * t44 * t79, t71, 0.2e1 * t10 * t79 + 0.2e1 * t2 * t91 - 0.2e1 * t50 * t23 - 0.2e1 * t39 * t44, 0.2e1 * t1 * t91 - 0.2e1 * t11 * t79 + 0.2e1 * t50 * t22 - 0.2e1 * t39 * t45, -0.2e1 * t1 * t44 - 0.2e1 * t10 * t22 + 0.2e1 * t11 * t23 + 0.2e1 * t2 * t45, -0.2e1 * t11 * t1 + 0.2e1 * t10 * t2 + 0.2e1 * t50 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t33, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t33, -t34 * pkin(3) + t124, 0, 0, 0, 0, 0, 0, t118, t117, -t6, -t195 * t6 + t124, 0, 0, 0, 0, 0, 0, t52 * t32 + t33 * t59, -t52 * t31 + t33 * t60, t106, -t21 * t18 + t20 * t19 + t33 * t77 + t5 * t37 - t4 * t38 + t52 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, -t172, 0, -t165, t166, 0, 0, 0, -t79, t172, 0, 0, 0, t104, t165, -t166, t104 * pkin(8), -t41, 0.4e1 * t153 * t94 - t172 * t185, t53, t41, t54, 0, t108 * t90 - t199 * t93, t108 * t93 + t199 * t90, -t3, -t62 * qJ(4) + t69 * qJD(4) - t195 * t3, t131, -t22 * t59 + t60 * t23 - t31 * t44 + t45 * t32, t24, t130, t119, 0, t19 * t91 - t77 * t23 + t50 * t32 + t37 * t79 + t39 * t59 - t73 * t44, t18 * t91 + t77 * t22 - t50 * t31 - t38 * t79 + t39 * t60 - t73 * t45, -t18 * t44 + t19 * t45 - t37 * t22 + t38 * t23 - t107, -t1 * t38 + t10 * t19 - t11 * t18 + t2 * t37 + t39 * t77 + t50 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, t82, -0.2e1 * t153, 0.2e1 * t142, 0, 0.2e1 * t153, 0, 0, 0.2e1 * qJD(4) * t90 + 0.2e1 * t170 * t93, 0.2e1 * qJD(4) * t93 - 0.2e1 * t170 * t90, 0, t82, -0.2e1 * t189, 0.2e1 * t31 * t59 - 0.2e1 * t60 * t32, 0, 0.2e1 * t190, 0, 0, 0.2e1 * t77 * t32 + 0.2e1 * t73 * t59, -0.2e1 * t77 * t31 + 0.2e1 * t73 * t60, 0.2e1 * t105, -0.2e1 * t38 * t18 + 0.2e1 * t37 * t19 + 0.2e1 * t77 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, t165, 0, 0, 0, 0, 0, 0, t53, t54, 0, t3, 0, 0, 0, 0, 0, 0, t24, t119, -t130 - t131, t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t128, -t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, -t17, 0, 0, 0, 0, 0, 0, 0, 0, t5, t4, 0 (t192 * t5 - t191 * t4 + (-t191 * t20 + t192 * t21) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172 * t90 - t160, 0, t112, t79, t15, t14, 0, 0, 0, 0, t22, 0, t23, t79, pkin(5) * t148 * t94 - t137 * t91 + t2 (-t145 * t91 - t147 * t94) * pkin(5) + t1 (-t192 * t22 + t191 * t23 + (-t191 * t45 + t192 * t44) * qJD(6)) * pkin(5) (t192 * t2 - t191 * t1 + (-t10 * t191 + t11 * t192) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176, 0, -t175, 0, t90 * t173, t93 * t173, 0, 0, 0, 0, -t31, 0, -t32, 0, t19, t18, -t203 (t192 * t19 - t191 * t18 + (-t191 * t37 + t192 * t38) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176, -t175, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t32, 0, t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t137, -0.2e1 * t138, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, t23, t79, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, -t32, 0, t19, t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137, -t138, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
