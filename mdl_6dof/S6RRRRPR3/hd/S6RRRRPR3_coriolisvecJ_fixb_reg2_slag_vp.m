% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPR3_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR3_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR3_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR3_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:04:00
% EndTime: 2019-03-09 22:04:15
% DurationCPUTime: 6.43s
% Computational Cost: add. (16358->530), mult. (41342->656), div. (0->0), fcn. (30710->8), ass. (0->283)
t214 = sin(qJ(2));
t361 = sin(qJ(3));
t296 = t361 * t214;
t271 = qJD(1) * t296;
t216 = cos(qJ(2));
t363 = cos(qJ(3));
t297 = t363 * t216;
t171 = qJD(1) * t297 - t271;
t182 = t214 * t363 + t216 * t361;
t172 = qJD(1) * t182;
t213 = sin(qJ(4));
t362 = cos(qJ(4));
t131 = -t362 * t171 + t172 * t213;
t209 = qJD(2) + qJD(3);
t207 = qJD(4) + t209;
t212 = sin(qJ(6));
t215 = cos(qJ(6));
t112 = -t215 * t131 + t207 * t212;
t249 = t213 * t171 + t172 * t362;
t372 = qJD(6) + t249;
t390 = t372 * t112;
t228 = t209 * t182;
t224 = t362 * t228;
t291 = qJD(4) * t362;
t311 = qJD(4) * t213;
t290 = t363 * qJD(3);
t242 = qJD(2) * t363 + t290;
t236 = qJD(1) * t242;
t314 = t209 * t271;
t387 = -t216 * t236 + t314;
t223 = qJD(1) * t224 + t171 * t311 + t172 * t291 - t213 * t387;
t308 = qJD(6) * t215;
t309 = qJD(6) * t212;
t41 = -t131 * t308 + t207 * t309 - t212 * t223;
t395 = t41 - t390;
t388 = t372 * t215;
t225 = t228 * qJD(1);
t71 = -t171 * t291 + t172 * t311 + t213 * t225 + t362 * t387;
t243 = t212 * t71 - t372 * t388;
t20 = -t112 * t131 + t243;
t114 = t131 * t212 + t207 * t215;
t389 = t372 * t212;
t65 = t215 * t71;
t254 = -t372 * t389 - t65;
t19 = t114 * t131 + t254;
t331 = qJ(5) * t131;
t95 = pkin(4) * t249 + t331;
t40 = t215 * t41;
t22 = -t114 * t389 - t40;
t310 = qJD(6) * t114;
t42 = -t215 * t223 + t310;
t343 = t212 * t42;
t23 = t215 * t390 + t343;
t5 = -t215 * t42 - t114 * t388 + (t41 + t390) * t212;
t394 = t131 * pkin(5);
t365 = -pkin(8) - pkin(7);
t191 = t365 * t216;
t187 = qJD(1) * t191;
t173 = t361 * t187;
t298 = qJD(1) * t365;
t186 = t214 * t298;
t351 = qJD(2) * pkin(2);
t178 = t186 + t351;
t140 = t363 * t178 + t173;
t166 = t172 * pkin(9);
t110 = -t166 + t140;
t103 = t209 * pkin(3) + t110;
t177 = t363 * t187;
t141 = t178 * t361 - t177;
t355 = t171 * pkin(9);
t111 = t141 + t355;
t108 = t362 * t111;
t73 = t213 * t103 + t108;
t67 = -t207 * qJ(5) - t73;
t49 = -t67 - t394;
t287 = t372 * t49;
t272 = qJD(2) * t298;
t179 = t214 * t272;
t180 = t216 * t272;
t289 = t361 * qJD(3);
t96 = t178 * t290 + t363 * t179 + t361 * t180 + t187 * t289;
t78 = -pkin(9) * t225 + t96;
t268 = -t179 * t361 + t363 * t180;
t79 = pkin(9) * t387 - t178 * t289 + t187 * t290 + t268;
t18 = t103 * t311 + t111 * t291 + t213 * t78 - t362 * t79;
t204 = -t216 * pkin(2) - pkin(1);
t189 = qJD(1) * t204;
t149 = -pkin(3) * t171 + t189;
t233 = -qJ(5) * t249 + t149;
t82 = pkin(4) * t131 + t233;
t349 = t249 * t82;
t256 = t18 + t349;
t391 = t131 * t249;
t329 = t372 * t131;
t321 = t213 * t111;
t72 = -t362 * t103 + t321;
t316 = qJD(5) + t72;
t367 = t249 ^ 2;
t386 = -t131 ^ 2 + t367;
t357 = t249 * pkin(5);
t317 = t357 + t316;
t366 = pkin(4) + pkin(10);
t43 = -t207 * t366 + t317;
t57 = t131 * t366 + t233;
t26 = t212 * t43 + t215 * t57;
t285 = -t103 * t291 + t111 * t311 - t213 * t79 - t362 * t78;
t16 = -t207 * qJD(5) + t285;
t8 = -pkin(5) * t223 - t16;
t7 = t8 * t215;
t292 = -t131 * t26 + t7;
t10 = -pkin(5) * t71 + t18;
t304 = qJD(1) * qJD(2);
t288 = t214 * t304;
t197 = pkin(2) * t288;
t118 = pkin(3) * t225 + t197;
t21 = pkin(4) * t223 + t71 * qJ(5) - qJD(5) * t249 + t118;
t11 = pkin(10) * t223 + t21;
t2 = -qJD(6) * t26 + t215 * t10 - t11 * t212;
t385 = t26 * t372 + t2;
t247 = -t131 * t82 - t16;
t384 = t114 * t372 - t42;
t383 = -t131 * t207 + t71;
t251 = t131 * t149 + t285;
t262 = t212 * t57 - t215 * t43;
t364 = t8 * t212 + t49 * t308;
t382 = -t131 * t262 + t364;
t381 = 0.2e1 * t189;
t380 = -0.2e1 * t304;
t378 = t249 * t49;
t303 = t363 * pkin(2);
t203 = t303 + pkin(3);
t277 = pkin(2) * t290;
t138 = -(qJD(4) * t361 + t289) * pkin(2) * t213 + t203 * t291 + t362 * t277;
t137 = -qJD(5) - t138;
t147 = -t186 * t361 + t177;
t116 = t147 - t355;
t148 = t363 * t186 + t173;
t117 = -t166 + t148;
t84 = t213 * t116 + t117 * t362;
t336 = t137 + t84;
t273 = t361 * t362;
t139 = t203 * t311 + (qJD(4) * t273 + (t213 * t363 + t273) * qJD(3)) * pkin(2);
t83 = -t362 * t116 + t117 * t213;
t334 = t139 - t83;
t276 = pkin(3) * t291;
t195 = t276 + qJD(5);
t81 = t110 * t362 - t321;
t332 = t195 - t81;
t245 = t296 - t297;
t240 = t213 * t245;
t146 = t182 * t362 - t240;
t54 = t71 * t146;
t226 = t209 * t245;
t234 = t362 * t245;
t86 = qJD(4) * t234 + t182 * t311 + t213 * t228 + t226 * t362;
t377 = -t249 * t86 - t54;
t300 = pkin(3) * t311;
t80 = t110 * t213 + t108;
t269 = -t80 + t300;
t375 = t149 * t249;
t374 = t207 * t334;
t293 = -t249 * t26 - t2;
t190 = t365 * t214;
t150 = t363 * t190 + t191 * t361;
t123 = -t182 * pkin(9) + t150;
t151 = t361 * t190 - t363 * t191;
t124 = -pkin(9) * t245 + t151;
t274 = t365 * t361;
t258 = qJD(2) * t274;
t275 = t365 * t363;
t259 = qJD(2) * t275;
t220 = pkin(9) * t226 - t190 * t289 + t191 * t290 - t214 * t258 + t216 * t259;
t101 = t190 * t290 + t191 * t289 + t214 * t259 + t216 * t258;
t221 = -pkin(9) * t228 + t101;
t34 = -t123 * t291 + t124 * t311 - t213 * t220 - t362 * t221;
t35 = t123 * t311 + t124 * t291 + t213 * t221 - t362 * t220;
t93 = -t362 * t123 + t124 * t213;
t94 = t213 * t123 + t124 * t362;
t371 = t34 * t131 + t18 * t146 - t223 * t94 + t249 * t35 - t93 * t71;
t145 = t182 * t213 + t234;
t87 = -qJD(4) * t240 + t182 * t291 - t213 * t226 + t224;
t370 = t131 * t87 + t145 * t223;
t369 = t86 * t131 + t71 * t145 - t146 * t223 - t249 * t87;
t368 = -t207 * t249 + t223;
t1 = -qJD(6) * t262 + t10 * t212 + t11 * t215;
t359 = pkin(3) * t172;
t354 = t18 * t93;
t353 = t213 * pkin(3);
t24 = t262 * t309;
t344 = t212 * t262;
t352 = -t249 * t344 - t24;
t347 = t207 * t34;
t346 = t207 * t86;
t345 = t207 * t87;
t341 = t212 * t87;
t340 = t215 * t87;
t339 = t366 * t71;
t338 = t35 * t207;
t337 = t357 - t336;
t335 = t138 - t84;
t333 = t357 + t332;
t330 = t114 * t112;
t325 = t145 * t212;
t324 = t145 * t215;
t323 = t172 * t171;
t322 = t189 * t172;
t219 = qJD(1) ^ 2;
t320 = t216 * t219;
t218 = qJD(2) ^ 2;
t319 = t218 * t214;
t318 = t218 * t216;
t313 = t214 ^ 2 - t216 ^ 2;
t312 = qJD(1) * t214;
t307 = qJD(6) * t366;
t302 = t362 * pkin(3);
t301 = t361 * pkin(2);
t206 = t214 * t351;
t205 = pkin(2) * t312;
t299 = t214 * t320;
t294 = t249 * t262 + t1;
t286 = pkin(1) * t380;
t284 = -t42 + t310;
t202 = -t302 - pkin(4);
t270 = t216 * t288;
t167 = t203 * t362 - t213 * t301;
t63 = -pkin(4) * t207 + t316;
t266 = t63 * t131 - t249 * t67;
t265 = t72 * t131 + t249 * t73;
t264 = t212 * t26 - t215 * t262;
t263 = t215 * t26 + t344;
t154 = pkin(3) * t245 + t204;
t229 = -t146 * qJ(5) + t154;
t62 = t145 * t366 + t229;
t68 = pkin(5) * t146 + t93;
t37 = t212 * t68 + t215 * t62;
t36 = -t212 * t62 + t215 * t68;
t261 = t215 * t378 + t382;
t164 = -pkin(4) - t167;
t255 = t207 * t73 - t18;
t253 = t145 * t308 + t341;
t252 = t145 * t309 - t340;
t250 = -t18 - t375;
t248 = -t189 * t171 - t96;
t88 = t359 + t95;
t244 = t84 * t131 + t334 * t249;
t168 = pkin(2) * t273 + t213 * t203;
t85 = t205 + t88;
t239 = t245 * qJD(2);
t238 = t81 * t131 + t269 * t249;
t232 = qJD(6) * t263 + t1 * t212 + t2 * t215;
t97 = -qJD(3) * t141 + t268;
t136 = pkin(3) * t228 + t206;
t33 = t87 * pkin(4) + t86 * qJ(5) - t146 * qJD(5) + t136;
t201 = qJ(5) + t353;
t200 = -pkin(10) + t202;
t163 = qJ(5) + t168;
t158 = -pkin(10) + t164;
t152 = t205 + t359;
t125 = t249 * pkin(10);
t115 = -t171 ^ 2 + t172 ^ 2;
t107 = t172 * t209 - t225;
t106 = -t171 * t209 - t387;
t102 = -t151 * qJD(3) + (-t214 * t274 + t216 * t275) * qJD(2);
t92 = t145 * pkin(4) + t229;
t70 = t249 * t366 + t331;
t69 = -t145 * pkin(5) + t94;
t61 = t125 + t88;
t60 = t125 + t85;
t58 = t83 - t394;
t55 = t80 - t394;
t53 = t73 - t394;
t32 = t212 * t53 + t215 * t70;
t31 = -t212 * t70 + t215 * t53;
t30 = t212 * t58 + t215 * t60;
t29 = -t212 * t60 + t215 * t58;
t28 = t212 * t55 + t215 * t61;
t27 = -t212 * t61 + t215 * t55;
t14 = -t86 * pkin(5) + t35;
t13 = -pkin(5) * t87 - t34;
t12 = t87 * pkin(10) + t33;
t4 = -qJD(6) * t37 - t12 * t212 + t14 * t215;
t3 = qJD(6) * t36 + t12 * t215 + t14 * t212;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t270, t313 * t380, t318, -0.2e1 * t270, -t319, 0, -pkin(7) * t318 + t214 * t286, pkin(7) * t319 + t216 * t286, 0, 0, -t314 * t182 + t172 * (-qJD(2) * t361 - t289) * t214 + (t172 * t242 + t182 * t236) * t216, -t171 * t226 - t172 * t228 - t182 * t225 + t245 * t387, -t226 * t209, -t171 * t228 + t225 * t245, -t228 * t209, 0, -t171 * t206 + t239 * t205 + (t182 * t381 + t102) * t209, -t101 * t209 + t172 * t206 + t182 * t197 - t189 * t226 - t204 * t387, t101 * t171 - t151 * t225 - t96 * t245 - t141 * t228 - t102 * t172 + t150 * t387 - t97 * t182 + t140 * (qJD(3) * t245 + t239) t101 * t141 + t102 * t140 + t150 * t97 + t151 * t96 + t206 * t381, t377, t369, -t346, t370, -t345, 0, t118 * t145 + t136 * t131 + t149 * t87 + t154 * t223 - t338, t118 * t146 + t136 * t249 - t149 * t86 - t154 * t71 + t347, t145 * t285 - t72 * t86 - t73 * t87 + t371, t118 * t154 + t136 * t149 - t285 * t94 - t34 * t73 + t35 * t72 + t354, 0, t346, t345, t377, t369, t370, t16 * t145 - t63 * t86 + t67 * t87 + t371, -t33 * t131 - t21 * t145 - t223 * t92 - t82 * t87 + t338, -t146 * t21 - t249 * t33 + t71 * t92 + t82 * t86 - t347, -t16 * t94 + t21 * t92 + t33 * t82 + t34 * t67 + t35 * t63 + t354, t114 * t253 - t325 * t41 (-t112 * t212 + t114 * t215) * t87 + (-t343 - t40 + (-t112 * t215 - t114 * t212) * qJD(6)) * t145, -t114 * t86 - t146 * t41 + t253 * t372 - t325 * t71, t112 * t252 - t324 * t42, t112 * t86 - t146 * t42 - t252 * t372 - t324 * t71, -t372 * t86 - t54, -t49 * t340 + t112 * t13 + t372 * t4 + t146 * t2 + t262 * t86 - t36 * t71 + t42 * t69 + (t309 * t49 - t7) * t145, -t1 * t146 + t114 * t13 + t145 * t364 + t26 * t86 - t3 * t372 + t341 * t49 + t37 * t71 - t41 * t69, -t112 * t3 - t114 * t4 + t36 * t41 - t37 * t42 + t263 * t87 + (-qJD(6) * t264 + t1 * t215 - t2 * t212) * t145, t1 * t37 + t13 * t49 + t2 * t36 + t26 * t3 - t262 * t4 + t69 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t313 * t219, 0, t299, 0, 0, t219 * pkin(1) * t214, pkin(1) * t320, 0, 0, -t323, t115, t106, t323, t107, 0, t171 * t205 - t147 * t209 - t322 + (-t209 * t301 - t141) * qJD(3) + t268, t148 * t209 + (-t172 * t312 - t209 * t290) * pkin(2) + t248, -t225 * t301 + t387 * t303 + (pkin(2) * t289 + t141 + t147) * t172 + (t140 - t148 + t277) * t171, -t140 * t147 - t141 * t148 + (-t189 * t312 + t363 * t97 + t361 * t96 + (-t140 * t361 + t141 * t363) * qJD(3)) * pkin(2), t391, t386, -t383, -t391, -t368, 0, -t131 * t152 + t250 - t374, -t152 * t249 - t207 * t335 + t251, -t138 * t131 + t167 * t71 - t168 * t223 + t244 + t265, -t149 * t152 - t167 * t18 - t168 * t285 + t334 * t72 + t335 * t73, 0, t383, t368, t391, t386, -t391, t137 * t131 - t163 * t223 - t164 * t71 + t244 + t266, t131 * t85 + t256 + t374, -t207 * t336 + t249 * t85 + t247, -t16 * t163 + t164 * t18 + t334 * t63 + t336 * t67 - t82 * t85, t22, t5, t19, t23, t20, t329, -t158 * t65 + t163 * t42 + t337 * t112 + (t139 * t215 - t158 * t309 - t29) * t372 + t261, -t163 * t41 + (-t158 * t308 + t30) * t372 + t337 * t114 + (-t139 * t372 + t158 * t71 - t287) * t212 + t292, t112 * t30 + t114 * t29 + (-t112 * t139 + t158 * t284 - t1) * t212 + (-t114 * t139 + t158 * t41 + (-t112 * t158 - t26) * qJD(6) + t293) * t215 + t352, t139 * t264 + t158 * t232 + t163 * t8 - t26 * t30 + t262 * t29 + t337 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, t115, t106, t323, t107, 0, t141 * t209 - t322 + t97, t140 * t209 + t248, 0, 0, t391, t386, -t383, -t391, -t368, 0, t207 * t80 + (-t131 * t172 - t207 * t311) * pkin(3) + t250, t81 * t207 + (-t172 * t249 - t207 * t291) * pkin(3) + t251, -t131 * t276 - t223 * t353 + t302 * t71 + t238 + t265, -t72 * t80 - t73 * t81 + (-t362 * t18 - t149 * t172 - t285 * t213 + (t213 * t72 + t362 * t73) * qJD(4)) * pkin(3), 0, t383, t368, t391, t386, -t391, -t195 * t131 - t201 * t223 - t202 * t71 + t238 + t266, t131 * t88 + t207 * t269 + t256, t207 * t332 + t249 * t88 + t247, -t16 * t201 + t18 * t202 + t269 * t63 - t332 * t67 - t82 * t88, t22, t5, t19, t23, t20, t329, -t200 * t65 + t201 * t42 + t333 * t112 + (-t200 * t309 + t215 * t300 - t27) * t372 + t261, -t201 * t41 + (-t200 * t308 + t28) * t372 + t333 * t114 + (t200 * t71 - t300 * t372 - t287) * t212 + t292, t112 * t28 + t114 * t27 + (-t112 * t300 + t200 * t284 - t1) * t212 + (-t114 * t300 + t200 * t41 + (-t112 * t200 - t26) * qJD(6) + t293) * t215 + t352, t200 * t232 + t201 * t8 - t26 * t28 + t262 * t27 + t264 * t300 + t333 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t391, t386, -t383, -t391, -t368, 0, t255 - t375, -t207 * t72 + t251, 0, 0, 0, t383, t368, t391, t386, -t391, pkin(4) * t71 - qJ(5) * t223 + (-t67 - t73) * t249 + (t63 - t316) * t131, t131 * t95 - t255 + t349, t207 * t316 + t249 * t95 + t247, -pkin(4) * t18 - qJ(5) * t16 - t316 * t67 - t63 * t73 - t82 * t95, t22, t5, t19, t23, t20, t329, qJ(5) * t42 + (t339 + t378) * t215 + (t212 * t307 - t31) * t372 + t317 * t112 + t382, -qJ(5) * t41 + (t215 * t307 + t32) * t372 + t317 * t114 + (-t339 - t287) * t212 + t292, t112 * t32 + t114 * t31 - t24 + (-t284 * t366 - t294) * t212 + (-t366 * t41 + (t112 * t366 - t26) * qJD(6) + t293) * t215, qJ(5) * t8 - t232 * t366 - t26 * t32 + t262 * t31 + t317 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t383, -t391, -t207 ^ 2 - t367, t207 * t67 + t256, 0, 0, 0, 0, 0, 0, -t112 * t207 + t254, -t114 * t207 + t243, t384 * t212 + t395 * t215, -t207 * t49 + t294 * t212 + t215 * t385 + t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, -t112 ^ 2 + t114 ^ 2, -t395, -t330, t384, -t71, -t114 * t49 + t385, t112 * t49 - t262 * t372 - t1, 0, 0;];
tauc_reg  = t6;
