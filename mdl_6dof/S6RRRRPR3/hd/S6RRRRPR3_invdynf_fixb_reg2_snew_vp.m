% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 19:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:59:08
% EndTime: 2019-05-07 19:59:18
% DurationCPUTime: 10.07s
% Computational Cost: add. (43151->338), mult. (95236->407), div. (0->0), fcn. (71468->10), ass. (0->240)
t2327 = qJDD(2) + qJDD(3);
t2284 = qJDD(4) + t2327;
t2293 = sin(qJ(3));
t2298 = cos(qJ(3));
t2299 = cos(qJ(2));
t2346 = qJD(1) * t2299;
t2294 = sin(qJ(2));
t2347 = qJD(1) * t2294;
t2256 = -t2293 * t2347 + t2298 * t2346;
t2257 = (t2293 * t2299 + t2294 * t2298) * qJD(1);
t2292 = sin(qJ(4));
t2297 = cos(qJ(4));
t2238 = -t2297 * t2256 + t2257 * t2292;
t2240 = t2256 * t2292 + t2257 * t2297;
t2340 = t2240 * t2238;
t2198 = t2284 + t2340;
t2288 = qJD(2) + qJD(3);
t2285 = qJD(4) + t2288;
t2283 = t2285 ^ 2;
t2351 = t2240 ^ 2;
t2322 = -t2283 - t2351;
t2188 = t2198 * t2292 - t2297 * t2322;
t2190 = t2198 * t2297 + t2292 * t2322;
t2153 = t2188 * t2298 + t2190 * t2293;
t2156 = t2188 * t2293 - t2190 * t2298;
t2128 = t2153 * t2294 + t2156 * t2299;
t2295 = sin(qJ(1));
t2367 = t2128 * t2295;
t2300 = cos(qJ(1));
t2366 = t2128 * t2300;
t2237 = t2238 ^ 2;
t2197 = -t2283 - t2237;
t2309 = t2284 - t2340;
t2172 = t2197 * t2292 + t2297 * t2309;
t2175 = -t2197 * t2297 + t2292 * t2309;
t2143 = t2172 * t2298 - t2175 * t2293;
t2146 = t2172 * t2293 + t2175 * t2298;
t2117 = t2143 * t2294 + t2146 * t2299;
t2365 = t2117 * t2295;
t2364 = t2117 * t2300;
t2125 = t2153 * t2299 - t2156 * t2294;
t2114 = t2143 * t2299 - t2146 * t2294;
t2324 = qJD(2) * t2346;
t2328 = t2294 * qJDD(1);
t2263 = t2324 + t2328;
t2286 = t2299 * qJDD(1);
t2325 = qJD(2) * t2347;
t2264 = t2286 - t2325;
t2318 = t2293 * t2263 - t2298 * t2264;
t2225 = -qJD(3) * t2257 - t2318;
t2312 = -t2298 * t2263 - t2293 * t2264;
t2226 = qJD(3) * t2256 - t2312;
t2313 = t2292 * t2225 + t2297 * t2226;
t2333 = qJD(4) - t2285;
t2171 = t2238 * t2333 - t2313;
t2363 = t2171 * t2292;
t2362 = t2171 * t2297;
t2290 = t2299 ^ 2;
t2302 = qJD(1) ^ 2;
t2272 = t2295 * g(1) - t2300 * g(2);
t2310 = qJDD(1) * pkin(1) + t2272;
t2311 = qJD(2) * pkin(2) - pkin(8) * t2347;
t2228 = t2264 * pkin(2) - t2311 * t2347 + t2310 + (pkin(8) * t2290 + pkin(7)) * t2302;
t2255 = t2256 ^ 2;
t2316 = pkin(3) * t2288 - pkin(9) * t2257;
t2178 = t2225 * pkin(3) + t2255 * pkin(9) - t2257 * t2316 + t2228;
t2231 = t2285 * t2240;
t2182 = -qJD(4) * t2238 + t2313;
t2341 = t2238 * t2285;
t2320 = -t2182 + t2341;
t2361 = pkin(4) * t2231 + t2320 * qJ(5) - 0.2e1 * qJD(5) * t2240 - t2178;
t2356 = -t2237 - t2351;
t2360 = t2295 * t2356;
t2359 = t2300 * t2356;
t2291 = sin(qJ(6));
t2296 = cos(qJ(6));
t2220 = -t2296 * t2238 + t2285 * t2291;
t2354 = t2220 ^ 2;
t2222 = t2238 * t2291 + t2285 * t2296;
t2353 = t2222 ^ 2;
t2235 = qJD(6) + t2240;
t2352 = t2235 ^ 2;
t2350 = t2257 ^ 2;
t2349 = t2288 ^ 2;
t2348 = 0.2e1 * qJD(5);
t2342 = t2220 * t2222;
t2339 = t2256 * t2257;
t2338 = t2288 * t2256;
t2337 = t2290 * t2302;
t2273 = -g(1) * t2300 - g(2) * t2295;
t2259 = -pkin(1) * t2302 + qJDD(1) * pkin(7) + t2273;
t2336 = t2294 * t2259;
t2335 = t2294 * t2302;
t2334 = -qJD(3) + t2288;
t2332 = qJD(4) + t2285;
t2331 = qJD(6) - t2235;
t2330 = qJD(6) + t2235;
t2215 = qJDD(2) * pkin(2) - t2263 * pkin(8) - t2336 + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2335 - g(3)) * t2299;
t2251 = -t2294 * g(3) + t2299 * t2259;
t2218 = -pkin(2) * t2337 + t2264 * pkin(8) - qJD(2) * t2311 + t2251;
t2196 = t2293 * t2215 + t2298 * t2218;
t2289 = t2294 ^ 2;
t2329 = t2289 + t2290;
t2323 = -t2352 - t2353;
t2195 = t2298 * t2215 - t2293 * t2218;
t2243 = t2327 + t2339;
t2162 = (-t2226 + t2338) * pkin(9) + t2243 * pkin(3) + t2195;
t2163 = -t2255 * pkin(3) + t2225 * pkin(9) - t2288 * t2316 + t2196;
t2133 = t2297 * t2162 - t2292 * t2163;
t2319 = -t2297 * t2225 + t2292 * t2226;
t2181 = qJD(4) * t2240 + t2319;
t2321 = t2296 * t2181 - t2291 * t2284;
t2202 = pkin(4) * t2238 - qJ(5) * t2240;
t2129 = -t2284 * pkin(4) - t2283 * qJ(5) + t2240 * t2202 + qJDD(5) - t2133;
t2105 = -t2309 * pkin(10) + (t2182 + t2341) * pkin(5) + t2129;
t2229 = pkin(5) * t2240 - pkin(10) * t2285;
t2106 = -t2237 * pkin(5) - t2240 * t2229 + (pkin(4) + pkin(10)) * t2181 + t2361;
t2315 = t2105 * t2296 - t2106 * t2291;
t2134 = t2292 * t2162 + t2297 * t2163;
t2314 = -t2291 * t2181 - t2296 * t2284;
t2307 = qJDD(6) + t2182;
t2306 = t2220 * t2331 + t2314;
t2305 = -t2283 * pkin(4) + t2284 * qJ(5) - t2238 * t2202 + t2134;
t2304 = t2307 - t2342;
t2301 = qJD(2) ^ 2;
t2278 = t2299 * t2335;
t2276 = -t2301 - t2337;
t2275 = -t2289 * t2302 - t2301;
t2271 = -qJDD(2) + t2278;
t2270 = qJDD(2) + t2278;
t2269 = t2329 * t2302;
t2268 = -qJDD(1) * t2295 - t2300 * t2302;
t2267 = qJDD(1) * t2300 - t2295 * t2302;
t2266 = t2329 * qJDD(1);
t2265 = t2286 - 0.2e1 * t2325;
t2262 = 0.2e1 * t2324 + t2328;
t2258 = t2302 * pkin(7) + t2310;
t2250 = -t2299 * g(3) - t2336;
t2249 = -t2349 - t2350;
t2248 = t2271 * t2299 - t2275 * t2294;
t2247 = -t2270 * t2294 + t2276 * t2299;
t2246 = t2271 * t2294 + t2275 * t2299;
t2245 = t2270 * t2299 + t2276 * t2294;
t2244 = -t2327 + t2339;
t2242 = -t2349 - t2255;
t2227 = -t2255 - t2350;
t2217 = -t2250 * t2294 + t2251 * t2299;
t2216 = t2250 * t2299 + t2251 * t2294;
t2211 = t2244 * t2298 - t2249 * t2293;
t2210 = t2244 * t2293 + t2249 * t2298;
t2209 = t2256 * t2334 + t2312;
t2208 = t2226 + t2338;
t2207 = t2257 * t2334 - t2318;
t2206 = (qJD(3) + t2288) * t2257 + t2318;
t2204 = t2242 * t2298 - t2243 * t2293;
t2203 = t2242 * t2293 + t2243 * t2298;
t2187 = -t2210 * t2294 + t2211 * t2299;
t2186 = t2210 * t2299 + t2211 * t2294;
t2185 = -t2352 - t2354;
t2184 = t2207 * t2298 - t2209 * t2293;
t2183 = t2207 * t2293 + t2209 * t2298;
t2179 = -t2353 - t2354;
t2177 = -t2203 * t2294 + t2204 * t2299;
t2176 = t2203 * t2299 + t2204 * t2294;
t2169 = -t2238 * t2332 + t2313;
t2167 = -t2181 + t2231;
t2166 = t2181 + t2231;
t2165 = t2240 * t2333 + t2319;
t2164 = t2240 * t2332 + t2319;
t2160 = -t2195 * t2293 + t2196 * t2298;
t2159 = t2195 * t2298 + t2196 * t2293;
t2158 = -t2307 - t2342;
t2152 = -t2183 * t2294 + t2184 * t2299;
t2151 = t2183 * t2299 + t2184 * t2294;
t2150 = -t2220 * t2330 - t2314;
t2149 = -t2222 * t2331 + t2321;
t2148 = t2222 * t2330 - t2321;
t2142 = t2167 * t2297 - t2363;
t2141 = -t2165 * t2297 - t2363;
t2140 = t2167 * t2292 + t2362;
t2139 = -t2165 * t2292 + t2362;
t2138 = t2296 * t2158 - t2291 * t2323;
t2137 = t2291 * t2158 + t2296 * t2323;
t2136 = t2296 * t2185 - t2291 * t2304;
t2135 = t2291 * t2185 + t2296 * t2304;
t2132 = -t2159 * t2294 + t2160 * t2299;
t2131 = t2159 * t2299 + t2160 * t2294;
t2130 = -t2181 * pkin(4) - t2361;
t2124 = t2285 * t2348 + t2305;
t2123 = t2296 * t2149 - t2291 * t2306;
t2122 = t2291 * t2149 + t2296 * t2306;
t2121 = t2137 * t2292 + t2150 * t2297;
t2120 = -t2137 * t2297 + t2150 * t2292;
t2119 = t2135 * t2292 + t2148 * t2297;
t2118 = -t2135 * t2297 + t2148 * t2292;
t2113 = t2122 * t2292 + t2179 * t2297;
t2112 = -t2122 * t2297 + t2179 * t2292;
t2111 = -t2140 * t2293 + t2142 * t2298;
t2110 = -t2139 * t2293 + t2141 * t2298;
t2109 = t2140 * t2298 + t2142 * t2293;
t2108 = t2139 * t2298 + t2141 * t2293;
t2107 = -t2181 * pkin(5) - t2237 * pkin(10) + (t2348 + t2229) * t2285 + t2305;
t2104 = -t2133 * t2292 + t2134 * t2297;
t2103 = t2133 * t2297 + t2134 * t2292;
t2102 = t2124 * t2297 + t2129 * t2292;
t2101 = t2124 * t2292 - t2129 * t2297;
t2100 = -t2120 * t2293 + t2121 * t2298;
t2099 = t2120 * t2298 + t2121 * t2293;
t2098 = -t2118 * t2293 + t2119 * t2298;
t2097 = t2118 * t2298 + t2119 * t2293;
t2096 = -t2112 * t2293 + t2113 * t2298;
t2095 = t2112 * t2298 + t2113 * t2293;
t2094 = -t2109 * t2294 + t2111 * t2299;
t2093 = -t2108 * t2294 + t2110 * t2299;
t2092 = t2109 * t2299 + t2111 * t2294;
t2091 = t2108 * t2299 + t2110 * t2294;
t2090 = t2105 * t2291 + t2106 * t2296;
t2088 = -t2103 * t2293 + t2104 * t2298;
t2087 = t2103 * t2298 + t2104 * t2293;
t2086 = -t2101 * t2293 + t2102 * t2298;
t2085 = t2101 * t2298 + t2102 * t2293;
t2084 = -t2099 * t2294 + t2100 * t2299;
t2083 = t2099 * t2299 + t2100 * t2294;
t2082 = -t2097 * t2294 + t2098 * t2299;
t2081 = t2097 * t2299 + t2098 * t2294;
t2080 = -t2095 * t2294 + t2096 * t2299;
t2079 = t2095 * t2299 + t2096 * t2294;
t2078 = t2296 * t2090 - t2291 * t2315;
t2077 = t2291 * t2090 + t2296 * t2315;
t2076 = -t2087 * t2294 + t2088 * t2299;
t2075 = t2087 * t2299 + t2088 * t2294;
t2074 = t2077 * t2292 + t2107 * t2297;
t2073 = -t2077 * t2297 + t2107 * t2292;
t2072 = -t2085 * t2294 + t2086 * t2299;
t2071 = t2085 * t2299 + t2086 * t2294;
t2070 = -t2073 * t2293 + t2074 * t2298;
t2069 = t2073 * t2298 + t2074 * t2293;
t2068 = -t2069 * t2294 + t2070 * t2299;
t2067 = t2069 * t2299 + t2070 * t2294;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2268, -t2267, 0, -t2272 * t2295 + t2273 * t2300, 0, 0, 0, 0, 0, 0, t2247 * t2300 - t2265 * t2295, t2248 * t2300 + t2262 * t2295, t2266 * t2300 - t2269 * t2295, t2217 * t2300 - t2258 * t2295, 0, 0, 0, 0, 0, 0, t2177 * t2300 + t2206 * t2295, t2187 * t2300 + t2208 * t2295, t2152 * t2300 + t2227 * t2295, t2132 * t2300 - t2228 * t2295, 0, 0, 0, 0, 0, 0, t2164 * t2295 - t2364, -t2295 * t2320 + t2366, t2094 * t2300 + t2360, t2076 * t2300 - t2178 * t2295, 0, 0, 0, 0, 0, 0, t2093 * t2300 + t2360, -t2166 * t2295 + t2364, -t2169 * t2295 - t2366, t2072 * t2300 - t2130 * t2295, 0, 0, 0, 0, 0, 0, t2082 * t2300 + t2136 * t2295, t2084 * t2300 + t2138 * t2295, t2080 * t2300 + t2123 * t2295, t2068 * t2300 + t2078 * t2295; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2267, t2268, 0, t2272 * t2300 + t2273 * t2295, 0, 0, 0, 0, 0, 0, t2247 * t2295 + t2265 * t2300, t2248 * t2295 - t2262 * t2300, t2266 * t2295 + t2269 * t2300, t2217 * t2295 + t2258 * t2300, 0, 0, 0, 0, 0, 0, t2177 * t2295 - t2206 * t2300, t2187 * t2295 - t2208 * t2300, t2152 * t2295 - t2227 * t2300, t2132 * t2295 + t2228 * t2300, 0, 0, 0, 0, 0, 0, -t2164 * t2300 - t2365, t2300 * t2320 + t2367, t2094 * t2295 - t2359, t2076 * t2295 + t2178 * t2300, 0, 0, 0, 0, 0, 0, t2093 * t2295 - t2359, t2166 * t2300 + t2365, t2169 * t2300 - t2367, t2072 * t2295 + t2130 * t2300, 0, 0, 0, 0, 0, 0, t2082 * t2295 - t2136 * t2300, t2084 * t2295 - t2138 * t2300, t2080 * t2295 - t2123 * t2300, t2068 * t2295 - t2078 * t2300; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2245, t2246, 0, t2216, 0, 0, 0, 0, 0, 0, t2176, t2186, t2151, t2131, 0, 0, 0, 0, 0, 0, t2114, -t2125, t2092, t2075, 0, 0, 0, 0, 0, 0, t2091, -t2114, t2125, t2071, 0, 0, 0, 0, 0, 0, t2081, t2083, t2079, t2067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2302, -qJDD(1), 0, t2273, 0, 0, 0, 0, 0, 0, t2247, t2248, t2266, t2217, 0, 0, 0, 0, 0, 0, t2177, t2187, t2152, t2132, 0, 0, 0, 0, 0, 0, -t2117, t2128, t2094, t2076, 0, 0, 0, 0, 0, 0, t2093, t2117, -t2128, t2072, 0, 0, 0, 0, 0, 0, t2082, t2084, t2080, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2302, 0, t2272, 0, 0, 0, 0, 0, 0, t2265, -t2262, t2269, t2258, 0, 0, 0, 0, 0, 0, -t2206, -t2208, -t2227, t2228, 0, 0, 0, 0, 0, 0, -t2164, t2320, -t2356, t2178, 0, 0, 0, 0, 0, 0, -t2356, t2166, t2169, t2130, 0, 0, 0, 0, 0, 0, -t2136, -t2138, -t2123, -t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2245, t2246, 0, t2216, 0, 0, 0, 0, 0, 0, t2176, t2186, t2151, t2131, 0, 0, 0, 0, 0, 0, t2114, -t2125, t2092, t2075, 0, 0, 0, 0, 0, 0, t2091, -t2114, t2125, t2071, 0, 0, 0, 0, 0, 0, t2081, t2083, t2079, t2067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2276, t2271, t2286, t2251, 0, 0, 0, 0, 0, 0, t2204, t2211, t2184, t2160, 0, 0, 0, 0, 0, 0, -t2146, t2156, t2111, t2088, 0, 0, 0, 0, 0, 0, t2110, t2146, -t2156, t2086, 0, 0, 0, 0, 0, 0, t2098, t2100, t2096, t2070; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2270, t2275, -t2328, t2250, 0, 0, 0, 0, 0, 0, t2203, t2210, t2183, t2159, 0, 0, 0, 0, 0, 0, t2143, -t2153, t2109, t2087, 0, 0, 0, 0, 0, 0, t2108, -t2143, t2153, t2085, 0, 0, 0, 0, 0, 0, t2097, t2099, t2095, t2069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2265, t2262, -t2269, -t2258, 0, 0, 0, 0, 0, 0, t2206, t2208, t2227, -t2228, 0, 0, 0, 0, 0, 0, t2164, -t2320, t2356, -t2178, 0, 0, 0, 0, 0, 0, t2356, -t2166, -t2169, -t2130, 0, 0, 0, 0, 0, 0, t2136, t2138, t2123, t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2242, t2244, t2207, t2196, 0, 0, 0, 0, 0, 0, -t2175, -t2190, t2142, t2104, 0, 0, 0, 0, 0, 0, t2141, t2175, t2190, t2102, 0, 0, 0, 0, 0, 0, t2119, t2121, t2113, t2074; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2243, t2249, t2209, t2195, 0, 0, 0, 0, 0, 0, t2172, -t2188, t2140, t2103, 0, 0, 0, 0, 0, 0, t2139, -t2172, t2188, t2101, 0, 0, 0, 0, 0, 0, t2118, t2120, t2112, t2073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2206, t2208, t2227, -t2228, 0, 0, 0, 0, 0, 0, t2164, -t2320, t2356, -t2178, 0, 0, 0, 0, 0, 0, t2356, -t2166, -t2169, -t2130, 0, 0, 0, 0, 0, 0, t2136, t2138, t2123, t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2197, -t2198, t2167, t2134, 0, 0, 0, 0, 0, 0, -t2165, -t2197, t2198, t2124, 0, 0, 0, 0, 0, 0, t2148, t2150, t2179, t2107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2309, t2322, t2171, t2133, 0, 0, 0, 0, 0, 0, t2171, -t2309, -t2322, -t2129, 0, 0, 0, 0, 0, 0, -t2135, -t2137, -t2122, -t2077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2164, -t2320, t2356, -t2178, 0, 0, 0, 0, 0, 0, t2356, -t2166, -t2169, -t2130, 0, 0, 0, 0, 0, 0, t2136, t2138, t2123, t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2356, -t2166, -t2169, -t2130, 0, 0, 0, 0, 0, 0, t2136, t2138, t2123, t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2165, t2197, -t2198, -t2124, 0, 0, 0, 0, 0, 0, -t2148, -t2150, -t2179, -t2107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2171, t2309, t2322, t2129, 0, 0, 0, 0, 0, 0, t2135, t2137, t2122, t2077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2185, t2158, t2149, t2090; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2304, t2323, t2306, t2315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2148, t2150, t2179, t2107;];
f_new_reg  = t1;
