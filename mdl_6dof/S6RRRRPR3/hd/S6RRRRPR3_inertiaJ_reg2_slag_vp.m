% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPR3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t69 = sin(qJ(3));
t112 = t69 * pkin(2);
t73 = cos(qJ(3));
t61 = t73 * pkin(2);
t56 = t61 + pkin(3);
t68 = sin(qJ(4));
t72 = cos(qJ(4));
t102 = t68 * t112 - t72 * t56;
t36 = -pkin(4) + t102;
t33 = -pkin(10) + t36;
t67 = sin(qJ(6));
t62 = t67 ^ 2;
t71 = cos(qJ(6));
t64 = t71 ^ 2;
t47 = t62 + t64;
t124 = t47 * t33;
t60 = t72 * pkin(3);
t55 = -t60 - pkin(4);
t50 = -pkin(10) + t55;
t123 = t47 * t50;
t115 = pkin(4) + pkin(10);
t88 = t47 * t115;
t95 = t72 * t112;
t122 = -(pkin(3) + t56) * t68 - t95;
t70 = sin(qJ(2));
t74 = cos(qJ(2));
t40 = t69 * t70 - t73 * t74;
t42 = t69 * t74 + t70 * t73;
t22 = t72 * t40 + t42 * t68;
t24 = -t40 * t68 + t42 * t72;
t57 = -pkin(2) * t74 - pkin(1);
t31 = pkin(3) * t40 + t57;
t83 = -qJ(5) * t24 + t31;
t9 = pkin(4) * t22 + t83;
t121 = -0.2e1 * t9;
t20 = t22 ^ 2;
t21 = t24 ^ 2;
t38 = t56 * t68 + t95;
t34 = qJ(5) + t38;
t120 = t34 ^ 2;
t113 = t68 * pkin(3);
t52 = qJ(5) + t113;
t119 = t52 ^ 2;
t118 = 0.2e1 * t31;
t117 = 0.2e1 * t57;
t116 = 0.2e1 * t74;
t114 = -pkin(8) - pkin(7);
t110 = t22 * t34;
t109 = t22 * t52;
t108 = t24 * t22;
t107 = t34 * t52;
t106 = t67 * t22;
t105 = t67 * t24;
t104 = t71 * t22;
t103 = t71 * t67;
t63 = t70 ^ 2;
t65 = t74 ^ 2;
t101 = t63 + t65;
t100 = qJ(5) * t22;
t99 = qJ(5) * t34;
t98 = qJ(5) * t52;
t97 = -0.2e1 * t108;
t96 = 0.2e1 * t108;
t78 = -0.2e1 * pkin(4);
t94 = t78 + t102;
t93 = t114 * t74;
t92 = t114 * t70;
t27 = t69 * t92 - t73 * t93;
t17 = -t40 * pkin(9) + t27;
t26 = t69 * t93 + t73 * t92;
t82 = -t42 * pkin(9) + t26;
t10 = t17 * t68 - t72 * t82;
t12 = t72 * t17 + t68 * t82;
t91 = t10 ^ 2 + t12 ^ 2;
t6 = t115 * t22 + t83;
t7 = pkin(5) * t24 + t10;
t2 = -t6 * t67 + t7 * t71;
t3 = t6 * t71 + t67 * t7;
t1 = t2 * t71 + t3 * t67;
t87 = -t24 * t33 + t110;
t86 = -t24 * t50 + t109;
t85 = t115 * t24 + t100;
t84 = 0.2e1 * t10 * t24 - 0.2e1 * t12 * t22;
t77 = qJ(5) ^ 2;
t76 = 0.2e1 * qJ(5);
t59 = qJ(5) * t71;
t58 = qJ(5) * t67;
t51 = -0.2e1 * t103;
t45 = t52 * t71;
t44 = t52 * t67;
t29 = t34 * t71;
t28 = t34 * t67;
t19 = t71 * t24;
t18 = t22 * t103;
t14 = (-t62 + t64) * t22;
t8 = -t22 * pkin(5) + t12;
t5 = t8 * t71;
t4 = t8 * t67;
t11 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t63, t70 * t116, 0, t65, 0, 0, pkin(1) * t116, -0.2e1 * pkin(1) * t70, 0.2e1 * t101 * pkin(7), t101 * pkin(7) ^ 2 + pkin(1) ^ 2, t42 ^ 2, -0.2e1 * t42 * t40, 0, t40 ^ 2, 0, 0, t40 * t117, t42 * t117, -0.2e1 * t26 * t42 - 0.2e1 * t27 * t40, t26 ^ 2 + t27 ^ 2 + t57 ^ 2, t21, t97, 0, t20, 0, 0, t22 * t118, t24 * t118, t84, t31 ^ 2 + t91, 0, 0, 0, t21, t97, t20, t84, t22 * t121, t24 * t121, t9 ^ 2 + t91, t62 * t20, 0.2e1 * t20 * t103, t67 * t96, t64 * t20, t71 * t96, t21, -0.2e1 * t8 * t104 + 0.2e1 * t2 * t24, 0.2e1 * t8 * t106 - 0.2e1 * t24 * t3, 0.2e1 * (-t2 * t67 + t3 * t71) * t22, t2 ^ 2 + t3 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t74, 0, -t70 * pkin(7), -t74 * pkin(7), 0, 0, 0, 0, t42, 0, -t40, 0, t26, -t27 (-t40 * t69 - t42 * t73) * pkin(2) (t26 * t73 + t27 * t69) * pkin(2), 0, 0, t24, 0, -t22, 0, -t10, -t12, t102 * t24 - t22 * t38, t10 * t102 + t12 * t38, 0, -t24, t22, 0, 0, 0, t24 * t36 - t110, t10, t12, t10 * t36 + t12 * t34, t18, t14, t19, -t18, -t105, 0, -t87 * t71 + t4, t87 * t67 + t5, -t1, t1 * t33 + t34 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t61, -0.2e1 * t112, 0 (t69 ^ 2 + t73 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t102, -0.2e1 * t38, 0, t102 ^ 2 + t38 ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t36, 0.2e1 * t34, t36 ^ 2 + t120, t64, t51, 0, t62, 0, 0, 0.2e1 * t28, 0.2e1 * t29, -0.2e1 * t124, t47 * t33 ^ 2 + t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t40, 0, t26, -t27, 0, 0, 0, 0, t24, 0, -t22, 0, -t10, -t12 (-t22 * t68 - t24 * t72) * pkin(3) (-t10 * t72 + t12 * t68) * pkin(3), 0, -t24, t22, 0, 0, 0, t24 * t55 - t109, t10, t12, t10 * t55 + t12 * t52, t18, t14, t19, -t18, -t105, 0, -t86 * t71 + t4, t86 * t67 + t5, -t1, t1 * t50 + t52 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t61, -t112, 0, 0, 0, 0, 0, 0, 0, 1, t60 - t102, t122, 0 (-t102 * t72 + t38 * t68) * pkin(3), 1, 0, 0, 0, 0, 0, 0, -t60 + t94, -t122 + t76, t36 * t55 + t107, t64, t51, 0, t62, 0, 0, t44 + t28, t45 + t29, -t123 - t124, t123 * t33 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t60, -0.2e1 * t113, 0 (t68 ^ 2 + t72 ^ 2) * pkin(3) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t55, 0.2e1 * t52, t55 ^ 2 + t119, t64, t51, 0, t62, 0, 0, 0.2e1 * t44, 0.2e1 * t45, -0.2e1 * t123, t47 * t50 ^ 2 + t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, 0, -t10, -t12, 0, 0, 0, -t24, t22, 0, 0, 0, -pkin(4) * t24 - t100, t10, t12, -pkin(4) * t10 + qJ(5) * t12, t18, t14, t19, -t18, -t105, 0, -t85 * t71 + t4, t85 * t67 + t5, -t1, qJ(5) * t8 - t1 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t102, -t38, 0, 0, 1, 0, 0, 0, 0, 0, 0, t94, t38 + t76, -pkin(4) * t36 + t99, t64, t51, 0, t62, 0, 0, t58 + t28, t59 + t29, t88 - t124, -t33 * t88 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t60, -t113, 0, 0, 1, 0, 0, 0, 0, 0, 0, t78 - t60, t76 + t113, -pkin(4) * t55 + t98, t64, t51, 0, t62, 0, 0, t58 + t44, t59 + t45, t88 - t123, -t50 * t88 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t78, t76, pkin(4) ^ 2 + t77, t64, t51, 0, t62, 0, 0, 0.2e1 * t58, 0.2e1 * t59, 0.2e1 * t88, t115 ^ 2 * t47 + t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, 0, t10, 0, 0, 0, 0, 0, 0, t19, -t105, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, -t47, t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t55, 0, 0, 0, 0, 0, 0, 0, 0, -t47, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, t104, t24, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, -t67, 0, t71 * t33, -t67 * t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, -t67, 0, t71 * t50, -t67 * t50, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, -t67, 0, -t71 * t115, t67 * t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t67, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
