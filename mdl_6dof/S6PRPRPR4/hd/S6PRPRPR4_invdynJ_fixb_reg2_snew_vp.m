% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 22:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRPRPR4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:47:59
% EndTime: 2019-05-04 22:48:12
% DurationCPUTime: 5.93s
% Computational Cost: add. (30119->458), mult. (70097->708), div. (0->0), fcn. (54618->14), ass. (0->267)
t242 = sin(pkin(12));
t243 = sin(pkin(11));
t246 = cos(pkin(11));
t249 = sin(qJ(4));
t252 = cos(qJ(4));
t266 = t243 * t252 + t246 * t249;
t219 = t266 * qJD(2);
t245 = cos(pkin(12));
t202 = -t245 * qJD(4) + t219 * t242;
t204 = qJD(4) * t242 + t219 * t245;
t170 = t204 * t202;
t277 = t246 * qJDD(2);
t278 = t243 * qJDD(2);
t267 = t249 * t278 - t252 * t277;
t280 = t219 * qJD(4);
t192 = t267 + t280;
t318 = -t170 + t192;
t329 = t242 * t318;
t328 = t245 * t318;
t248 = sin(qJ(6));
t251 = cos(qJ(6));
t165 = t251 * t202 + t204 * t248;
t167 = -t202 * t248 + t204 * t251;
t130 = t167 * t165;
t186 = qJDD(6) + t192;
t320 = -t130 + t186;
t327 = t248 * t320;
t283 = qJD(2) * t246;
t286 = t243 * t249;
t217 = qJD(2) * t286 - t252 * t283;
t196 = t219 * t217;
t315 = qJDD(4) - t196;
t326 = t249 * t315;
t325 = t251 * t320;
t324 = t252 * t315;
t236 = t243 ^ 2;
t237 = t246 ^ 2;
t312 = qJD(2) ^ 2;
t224 = (t236 + t237) * t312;
t244 = sin(pkin(6));
t247 = cos(pkin(6));
t301 = sin(pkin(10));
t302 = cos(pkin(10));
t264 = t301 * g(1) - t302 * g(2);
t263 = t247 * t264;
t284 = -g(3) + qJDD(1);
t323 = t244 * t284 + t263;
t250 = sin(qJ(2));
t253 = cos(qJ(2));
t265 = t302 * g(1) + t301 * g(2);
t183 = t250 * t323 - t253 * t265;
t258 = qJDD(2) * qJ(3) + t183;
t261 = -t244 * t264 + t247 * t284;
t310 = 2 * qJD(3);
t148 = t246 * (-t312 * pkin(2) + t258) + t243 * t261 + t283 * t310;
t282 = t312 * t237;
t135 = -pkin(3) * t282 + pkin(8) * t277 + t148;
t259 = t246 * t261;
t322 = qJ(3) + pkin(8);
t256 = t259 + (-t322 * qJDD(2) + (-(2 * qJD(3)) + (t246 * pkin(3) + pkin(2)) * qJD(2)) * qJD(2) - t183) * t243;
t103 = t252 * t135 + t249 * t256;
t216 = t266 * qJDD(2);
t281 = t217 * qJD(4);
t194 = t216 - t281;
t177 = qJDD(4) * t242 + t245 * t194;
t268 = -t245 * qJDD(4) + t194 * t242;
t119 = -t165 * qJD(6) + t251 * t177 - t248 * t268;
t212 = qJD(6) + t217;
t156 = t212 * t165;
t319 = -t156 + t119;
t180 = t217 * t202;
t142 = -t177 - t180;
t317 = t177 - t180;
t269 = t177 * t248 + t251 * t268;
t96 = (qJD(6) - t212) * t167 + t269;
t163 = t165 ^ 2;
t164 = t167 ^ 2;
t314 = t202 ^ 2;
t201 = t204 ^ 2;
t211 = t212 ^ 2;
t313 = t217 ^ 2;
t215 = t219 ^ 2;
t311 = qJD(4) ^ 2;
t182 = t250 * t265 + t253 * t323;
t241 = qJDD(2) * pkin(2);
t174 = -t312 * qJ(3) + qJDD(3) - t182 - t241;
t159 = -pkin(3) * t277 + t174 + (-t236 * t312 - t282) * pkin(8);
t110 = (-t194 + t281) * qJ(5) + (t192 + t280) * pkin(4) + t159;
t185 = pkin(4) * t217 - qJ(5) * t219;
t82 = -t311 * pkin(4) + qJDD(4) * qJ(5) - t217 * t185 + t103;
t66 = 0.2e1 * qJD(5) * t204 - t245 * t110 + t242 * t82;
t46 = pkin(5) * t318 + pkin(9) * t142 - t66;
t176 = pkin(5) * t217 - pkin(9) * t204;
t67 = -0.2e1 * qJD(5) * t202 + t242 * t110 + t245 * t82;
t49 = -t314 * pkin(5) - pkin(9) * t268 - t217 * t176 + t67;
t24 = t248 * t49 - t251 * t46;
t25 = t248 * t46 + t251 * t49;
t12 = -t24 * t251 + t248 * t25;
t309 = t12 * t242;
t308 = t12 * t245;
t102 = t135 * t249 - t252 * t256;
t79 = -qJDD(4) * pkin(4) - t311 * qJ(5) + t185 * t219 + qJDD(5) + t102;
t307 = t242 * t79;
t71 = -t102 * t252 + t103 * t249;
t306 = t243 * t71;
t305 = t245 * t79;
t70 = pkin(5) * t268 - t314 * pkin(9) + t176 * t204 + t79;
t304 = t248 * t70;
t303 = t251 * t70;
t123 = t130 + t186;
t300 = t123 * t248;
t299 = t123 * t251;
t144 = t170 + t192;
t298 = t144 * t242;
t297 = t144 * t245;
t296 = t159 * t249;
t295 = t159 * t252;
t189 = qJDD(4) + t196;
t294 = t189 * t249;
t293 = t189 * t252;
t292 = t192 * t249;
t291 = t204 * t217;
t290 = t212 * t248;
t289 = t212 * t251;
t288 = t217 * t242;
t287 = t217 * t245;
t276 = t249 * t130;
t275 = t252 * t130;
t274 = t249 * t170;
t273 = t252 * t170;
t272 = -pkin(4) * t252 - pkin(3);
t13 = t24 * t248 + t251 * t25;
t35 = t242 * t66 + t245 * t67;
t270 = -t174 + t241;
t72 = t102 * t249 + t252 * t103;
t147 = -t259 + ((-pkin(2) * qJD(2) + t310) * qJD(2) + t258) * t243;
t111 = t147 * t243 + t246 * t148;
t34 = t242 * t67 - t245 * t66;
t26 = t249 * t35 - t252 * t79;
t27 = t249 * t79 + t252 * t35;
t14 = -t243 * t26 + t246 * t27;
t138 = t268 - t291;
t234 = t237 * qJDD(2);
t232 = t236 * qJDD(2);
t223 = t234 + t232;
t222 = t246 * t224;
t221 = t243 * t224;
t208 = -t215 - t311;
t207 = -t215 + t311;
t206 = t313 - t311;
t193 = t216 - 0.2e1 * t281;
t191 = t267 + 0.2e1 * t280;
t187 = -t313 - t311;
t184 = t252 * t192;
t179 = -t201 + t313;
t178 = -t313 + t314;
t171 = -t313 - t215;
t168 = -t201 + t314;
t162 = -t201 - t313;
t161 = -t208 * t249 - t293;
t160 = t208 * t252 - t294;
t158 = -t313 - t314;
t155 = t216 * t249 - t252 * t267;
t154 = -t216 * t252 - t249 * t267;
t153 = -t164 + t211;
t152 = t163 - t211;
t151 = t187 * t252 - t326;
t150 = t187 * t249 + t324;
t149 = -t201 - t314;
t137 = t268 + t291;
t136 = (-t202 * t245 + t204 * t242) * t217;
t134 = t177 * t245 - t204 * t288;
t133 = t202 * t287 + t242 * t268;
t132 = -t164 - t211;
t129 = t164 - t163;
t128 = -t243 * t160 + t246 * t161;
t127 = -t211 - t163;
t126 = t178 * t245 - t298;
t125 = -t179 * t242 + t328;
t121 = -t162 * t242 - t297;
t120 = t162 * t245 - t298;
t118 = -qJD(6) * t167 - t269;
t117 = (-t165 * t251 + t167 * t248) * t212;
t116 = (-t165 * t248 - t167 * t251) * t212;
t115 = -t243 * t154 + t246 * t155;
t114 = t158 * t245 - t329;
t113 = t158 * t242 + t328;
t112 = -t243 * t150 + t246 * t151;
t109 = -t163 - t164;
t106 = -t137 * t245 - t242 * t317;
t105 = -t138 * t245 - t142 * t242;
t104 = -t138 * t242 + t142 * t245;
t99 = t156 + t119;
t95 = (qJD(6) + t212) * t167 + t269;
t94 = t152 * t251 - t300;
t93 = -t153 * t248 + t325;
t92 = t152 * t248 + t299;
t91 = t153 * t251 + t327;
t90 = t119 * t251 - t167 * t290;
t89 = t119 * t248 + t167 * t289;
t88 = -t118 * t248 + t165 * t289;
t87 = t118 * t251 + t165 * t290;
t86 = t121 * t252 + t249 * t317;
t85 = t121 * t249 - t252 * t317;
t84 = -t132 * t248 - t299;
t83 = t132 * t251 - t300;
t81 = t114 * t252 + t137 * t249;
t80 = t114 * t249 - t137 * t252;
t77 = t105 * t252 + t149 * t249;
t76 = t105 * t249 - t149 * t252;
t75 = t127 * t251 - t327;
t74 = t127 * t248 + t325;
t73 = -t116 * t242 + t117 * t245;
t69 = -qJ(5) * t120 + t305;
t68 = -qJ(5) * t113 + t307;
t64 = -t248 * t319 - t251 * t95;
t63 = t248 * t99 - t251 * t96;
t62 = -t248 * t95 + t251 * t319;
t61 = -t248 * t96 - t251 * t99;
t60 = -t242 * t92 + t245 * t94;
t59 = -t242 * t91 + t245 * t93;
t58 = -t242 * t89 + t245 * t90;
t57 = -t242 * t87 + t245 * t88;
t56 = -t243 * t85 + t246 * t86;
t55 = -t242 * t83 + t245 * t84;
t54 = t242 * t84 + t245 * t83;
t53 = -t243 * t80 + t246 * t81;
t52 = -t243 * t76 + t246 * t77;
t51 = -t242 * t74 + t245 * t75;
t50 = t242 * t75 + t245 * t74;
t48 = -pkin(4) * t120 + t67;
t47 = -pkin(4) * t113 + t66;
t44 = -pkin(9) * t83 + t303;
t43 = -pkin(9) * t74 + t304;
t42 = t249 * t319 + t252 * t55;
t41 = t249 * t55 - t252 * t319;
t40 = t246 * t72 - t306;
t39 = t249 * t95 + t252 * t51;
t38 = t249 * t51 - t252 * t95;
t37 = -pkin(5) * t319 + pkin(9) * t84 + t304;
t36 = -pkin(5) * t95 + pkin(9) * t75 - t303;
t33 = -t242 * t62 + t245 * t64;
t32 = -t242 * t61 + t245 * t63;
t31 = t242 * t63 + t245 * t61;
t30 = -qJ(5) * t104 - t34;
t29 = t109 * t249 + t252 * t32;
t28 = -t109 * t252 + t249 * t32;
t22 = -pkin(4) * t31 - pkin(5) * t61;
t21 = -t243 * t41 + t246 * t42;
t20 = -t243 * t38 + t246 * t39;
t19 = -pkin(4) * t54 - pkin(5) * t83 + t25;
t18 = -qJ(5) * t54 - t242 * t37 + t245 * t44;
t17 = -pkin(4) * t50 - pkin(5) * t74 + t24;
t16 = -qJ(5) * t50 - t242 * t36 + t245 * t43;
t15 = -t243 * t28 + t246 * t29;
t11 = -pkin(5) * t70 + pkin(9) * t13;
t10 = -pkin(9) * t61 - t12;
t9 = -pkin(5) * t109 + pkin(9) * t63 + t13;
t8 = t13 * t245 - t309;
t7 = t13 * t242 + t308;
t6 = t249 * t70 + t252 * t8;
t5 = t249 * t8 - t252 * t70;
t4 = -qJ(5) * t31 + t10 * t245 - t242 * t9;
t3 = -pkin(4) * t7 - pkin(5) * t12;
t2 = -pkin(9) * t308 - qJ(5) * t7 - t11 * t242;
t1 = -t243 * t5 + t246 * t6;
t23 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t284, 0, 0, 0, 0, 0, 0, (qJDD(2) * t253 - t312 * t250) * t244, (-qJDD(2) * t250 - t312 * t253) * t244, 0, t247 ^ 2 * t284 + (t253 * t182 + t250 * t183 - t263) * t244, 0, 0, 0, 0, 0, 0, (-t222 * t250 + t253 * t277) * t244, (t221 * t250 - t253 * t278) * t244, (t223 * t250 + t224 * t253) * t244, t247 * (-t147 * t246 + t148 * t243) + (t250 * t111 - t253 * t174) * t244, 0, 0, 0, 0, 0, 0, t247 * (t150 * t246 + t151 * t243) + (t250 * t112 - t253 * t191) * t244, t247 * (t160 * t246 + t161 * t243) + (t250 * t128 - t253 * t193) * t244, t247 * (t154 * t246 + t155 * t243) + (t250 * t115 - t253 * t171) * t244, t247 * (t243 * t72 + t246 * t71) + (-t253 * t159 + t250 * t40) * t244, 0, 0, 0, 0, 0, 0, t247 * (t243 * t81 + t246 * t80) + (-t253 * t113 + t250 * t53) * t244, t247 * (t243 * t86 + t246 * t85) + (-t253 * t120 + t250 * t56) * t244, t247 * (t243 * t77 + t246 * t76) + (-t253 * t104 + t250 * t52) * t244, t247 * (t243 * t27 + t246 * t26) + (t250 * t14 - t253 * t34) * t244, 0, 0, 0, 0, 0, 0, t247 * (t243 * t39 + t246 * t38) + (t250 * t20 - t253 * t50) * t244, t247 * (t243 * t42 + t246 * t41) + (t250 * t21 - t253 * t54) * t244, t247 * (t243 * t29 + t246 * t28) + (t250 * t15 - t253 * t31) * t244, t247 * (t243 * t6 + t246 * t5) + (t250 * t1 - t253 * t7) * t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t182, -t183, 0, 0, t232, 0.2e1 * t243 * t277, 0, t234, 0, 0, -qJ(3) * t222 + t270 * t246, qJ(3) * t221 - t270 * t243, pkin(2) * t224 + qJ(3) * t223 + t111, -pkin(2) * t174 + qJ(3) * t111, t243 * (t194 * t252 - t249 * t280) + t246 * (t194 * t249 + t252 * t280), t243 * (-t191 * t252 - t193 * t249) + t246 * (-t191 * t249 + t193 * t252), t243 * (-t207 * t249 + t324) + t246 * (t207 * t252 + t326), t243 * (t252 * t281 + t292) + t246 * (t249 * t281 - t184), t243 * (t206 * t252 - t294) + t246 * (t206 * t249 + t293), (t243 * (-t217 * t252 + t219 * t249) + t246 * (-t217 * t249 - t219 * t252)) * qJD(4), t243 * (-pkin(8) * t150 + t296) + t246 * (-pkin(3) * t191 + pkin(8) * t151 - t295) - pkin(2) * t191 + qJ(3) * t112, t243 * (-pkin(8) * t160 + t295) + t246 * (-pkin(3) * t193 + pkin(8) * t161 + t296) - pkin(2) * t193 + qJ(3) * t128, t243 * (-pkin(8) * t154 - t71) + t246 * (-pkin(3) * t171 + pkin(8) * t155 + t72) - pkin(2) * t171 + qJ(3) * t115, -pkin(8) * t306 + t246 * (-pkin(3) * t159 + pkin(8) * t72) - pkin(2) * t159 + qJ(3) * t40, t243 * (t134 * t252 + t274) + t246 * (t134 * t249 - t273), t243 * (t106 * t252 - t168 * t249) + t246 * (t106 * t249 + t168 * t252), t243 * (t125 * t252 - t142 * t249) + t246 * (t125 * t249 + t142 * t252), t243 * (t133 * t252 - t274) + t246 * (t133 * t249 + t273), t243 * (t126 * t252 - t138 * t249) + t246 * (t126 * t249 + t138 * t252), t243 * (t136 * t252 + t292) + t246 * (t136 * t249 - t184), t243 * (-pkin(8) * t80 - t249 * t47 + t252 * t68) + t246 * (-pkin(3) * t113 + pkin(8) * t81 + t249 * t68 + t252 * t47) - pkin(2) * t113 + qJ(3) * t53, t243 * (-pkin(8) * t85 - t249 * t48 + t252 * t69) + t246 * (-pkin(3) * t120 + pkin(8) * t86 + t249 * t69 + t252 * t48) - pkin(2) * t120 + qJ(3) * t56, t243 * (-pkin(8) * t76 + t252 * t30) + t246 * (pkin(8) * t77 + t249 * t30) + qJ(3) * t52 + (pkin(4) * t286 + t246 * t272 - pkin(2)) * t104, (t243 * (pkin(4) * t249 - qJ(5) * t252) + t246 * (-qJ(5) * t249 + t272) - pkin(2)) * t34 + t322 * t14, t243 * (t252 * t58 + t276) + t246 * (t249 * t58 - t275), t243 * (t129 * t249 + t252 * t33) + t246 * (-t129 * t252 + t249 * t33), t243 * (t249 * t99 + t252 * t59) + t246 * (t249 * t59 - t252 * t99), t243 * (t252 * t57 - t276) + t246 * (t249 * t57 + t275), t243 * (-t249 * t96 + t252 * t60) + t246 * (t249 * t60 + t252 * t96), t243 * (t186 * t249 + t252 * t73) + t246 * (-t186 * t252 + t249 * t73), t243 * (-pkin(8) * t38 + t16 * t252 - t17 * t249) + t246 * (-pkin(3) * t50 + pkin(8) * t39 + t16 * t249 + t17 * t252) - pkin(2) * t50 + qJ(3) * t20, t243 * (-pkin(8) * t41 + t18 * t252 - t19 * t249) + t246 * (-pkin(3) * t54 + pkin(8) * t42 + t18 * t249 + t19 * t252) - pkin(2) * t54 + qJ(3) * t21, t243 * (-pkin(8) * t28 - t22 * t249 + t252 * t4) + t246 * (-pkin(3) * t31 + pkin(8) * t29 + t22 * t252 + t249 * t4) - pkin(2) * t31 + qJ(3) * t15, t243 * (-pkin(8) * t5 + t2 * t252 - t249 * t3) + t246 * (-pkin(3) * t7 + pkin(8) * t6 + t2 * t249 + t252 * t3) - pkin(2) * t7 + qJ(3) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t277, t278, -t224, t174, 0, 0, 0, 0, 0, 0, t191, t193, t171, t159, 0, 0, 0, 0, 0, 0, t113, t120, t104, t34, 0, 0, 0, 0, 0, 0, t50, t54, t31, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, t215 - t313, t216, -t196, -t267, qJDD(4), -t102, -t103, 0, 0, t177 * t242 + t204 * t287, -t137 * t242 + t245 * t317, t179 * t245 + t329, t202 * t288 - t245 * t268, t178 * t242 + t297, (-t202 * t242 - t204 * t245) * t217, -pkin(4) * t137 + qJ(5) * t114 - t305, -pkin(4) * t317 + qJ(5) * t121 + t307, -pkin(4) * t149 + qJ(5) * t105 + t35, -pkin(4) * t79 + qJ(5) * t35, t242 * t90 + t245 * t89, t242 * t64 + t245 * t62, t242 * t93 + t245 * t91, t242 * t88 + t245 * t87, t242 * t94 + t245 * t92, t116 * t245 + t117 * t242, -pkin(4) * t95 + qJ(5) * t51 + t242 * t43 + t245 * t36, -pkin(4) * t319 + qJ(5) * t55 + t242 * t44 + t245 * t37, -pkin(4) * t109 + qJ(5) * t32 + t10 * t242 + t245 * t9, -pkin(4) * t70 - pkin(9) * t309 + qJ(5) * t8 + t11 * t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t317, t149, t79, 0, 0, 0, 0, 0, 0, t95, t319, t109, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, t129, t99, -t130, -t96, t186, -t24, -t25, 0, 0;];
tauJ_reg  = t23;
