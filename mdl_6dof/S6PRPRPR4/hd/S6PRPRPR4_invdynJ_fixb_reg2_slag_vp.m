% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRPR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRPR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:41:24
% EndTime: 2019-03-08 19:41:39
% DurationCPUTime: 8.99s
% Computational Cost: add. (9179->560), mult. (21936->746), div. (0->0), fcn. (18267->18), ass. (0->272)
t221 = sin(pkin(11));
t224 = cos(pkin(11));
t229 = sin(qJ(4));
t367 = cos(qJ(4));
t181 = t221 * t367 + t229 * t224;
t170 = t181 * qJD(2);
t220 = sin(pkin(12));
t223 = cos(pkin(12));
t143 = qJD(4) * t220 + t170 * t223;
t228 = sin(qJ(6));
t366 = cos(qJ(6));
t324 = t220 * t170;
t387 = qJD(4) * t223 - t324;
t250 = t366 * t387;
t70 = -t143 * t228 + t250;
t391 = t70 ^ 2;
t296 = t367 * t224;
t203 = qJD(2) * t296;
t318 = t229 * t221;
t292 = qJD(2) * t318;
t168 = -t203 + t292;
t160 = qJD(6) + t168;
t390 = t160 * t70;
t69 = t143 * t366 + t228 * t387;
t389 = t69 ^ 2;
t288 = qJD(4) * t367;
t306 = qJD(4) * t229;
t290 = t221 * t306;
t174 = -t224 * t288 + t290;
t175 = t181 * qJD(4);
t230 = sin(qJ(2));
t222 = sin(pkin(6));
t310 = qJD(1) * t222;
t294 = t230 * t310;
t388 = pkin(4) * t175 + qJ(5) * t174 - qJD(5) * t181 - t294;
t252 = t296 - t318;
t231 = cos(qJ(2));
t322 = t222 * t231;
t241 = t252 * t322;
t360 = pkin(8) + qJ(3);
t188 = t360 * t221;
t190 = t360 * t224;
t381 = -t367 * t188 - t229 * t190;
t344 = -qJD(1) * t241 + t252 * qJD(3) + qJD(4) * t381;
t347 = -t344 * t220 + t223 * t388;
t346 = t220 * t388 + t344 * t223;
t364 = pkin(9) * t223;
t386 = pkin(5) * t175 + t174 * t364 + t347;
t330 = t174 * t220;
t385 = -pkin(9) * t330 - t346;
t295 = t366 * t223;
t251 = -t228 * t220 + t295;
t305 = qJD(6) * t228;
t379 = qJD(6) * t295 - t220 * t305;
t349 = -t251 * t168 - t379;
t180 = t220 * t366 + t228 * t223;
t173 = t180 * qJD(6);
t348 = t180 * t168 + t173;
t139 = -t229 * t188 + t190 * t367;
t242 = t181 * t322;
t343 = -qJD(1) * t242 + qJD(3) * t181 + qJD(4) * t139;
t382 = t170 * t387;
t219 = pkin(11) + qJ(4);
t212 = sin(t219);
t225 = cos(pkin(6));
t341 = sin(pkin(10));
t279 = t341 * t230;
t342 = cos(pkin(10));
t280 = t342 * t231;
t164 = -t225 * t280 + t279;
t278 = t341 * t231;
t281 = t342 * t230;
t166 = t225 * t278 + t281;
t273 = g(1) * t166 + g(2) * t164;
t380 = g(3) * t322 - t273;
t240 = t380 * t212;
t232 = qJD(2) ^ 2;
t247 = (qJDD(2) * t231 - t230 * t232) * t222;
t293 = t231 * t310;
t269 = qJD(3) - t293;
t308 = qJD(2) * t230;
t287 = qJD(1) * t308;
t378 = t222 * t287 + qJDD(3);
t377 = -qJDD(4) * pkin(4) + qJDD(5);
t284 = qJDD(2) * t367;
t300 = t224 * qJDD(2);
t297 = qJD(4) * t203 + t221 * t284 + t229 * t300;
t121 = qJD(2) * t290 - t297;
t96 = -qJDD(4) * t223 - t220 * t121;
t97 = qJDD(4) * t220 - t121 * t223;
t27 = -qJD(6) * t250 + t143 * t305 + t228 * t96 - t366 * t97;
t376 = -t251 * t27 - t348 * t69;
t301 = t221 * qJDD(2);
t268 = -t224 * t284 + t229 * t301;
t122 = qJD(2) * t175 + t268;
t115 = qJDD(6) + t122;
t375 = t115 * t180 - t160 * t349;
t161 = t168 ^ 2;
t336 = t122 * t220;
t374 = -t161 * t223 - t336;
t304 = qJDD(1) * t222;
t286 = t231 * t304;
t254 = -t286 + t378;
t339 = qJDD(2) * pkin(2);
t150 = t254 - t339;
t259 = -t150 + t273;
t373 = t222 * (-g(3) * t231 + t287) + t259 + t339;
t184 = qJD(2) * qJ(3) + t294;
t309 = qJD(1) * t225;
t147 = t224 * t184 + t221 * t309;
t199 = t224 * t309;
t263 = (-t184 * t221 + t199) * t221 - t147 * t224;
t372 = t231 * t263 - (-qJD(2) * pkin(2) + t269) * t230;
t356 = pkin(8) * qJD(2);
t131 = t199 + (-t184 - t356) * t221;
t132 = t224 * t356 + t147;
t64 = t229 * t131 + t132 * t367;
t60 = qJD(4) * qJ(5) + t64;
t210 = pkin(3) * t224 + pkin(2);
t159 = -qJD(2) * t210 + t269;
t75 = pkin(4) * t168 - qJ(5) * t170 + t159;
t31 = -t220 * t60 + t223 * t75;
t19 = pkin(5) * t168 - pkin(9) * t143 + t31;
t32 = t220 * t75 + t223 * t60;
t26 = pkin(9) * t387 + t32;
t256 = -t19 * t366 + t228 * t26;
t128 = t229 * t132;
t302 = qJDD(2) * qJ(3);
t145 = t230 * t304 + t302 + (qJD(3) + t293) * qJD(2);
t303 = qJDD(1) * t225;
t197 = t224 * t303;
t98 = t197 + (-pkin(8) * qJDD(2) - t145) * t221;
t113 = t224 * t145 + t221 * t303;
t99 = pkin(8) * t300 + t113;
t298 = t131 * t288 + t229 * t98 + t367 * t99;
t21 = qJDD(4) * qJ(5) + (qJD(5) - t128) * qJD(4) + t298;
t271 = t210 * qJDD(2);
t134 = -t271 + t254;
t37 = pkin(4) * t122 + qJ(5) * t121 - qJD(5) * t170 + t134;
t10 = -t21 * t220 + t223 * t37;
t6 = pkin(5) * t122 - pkin(9) * t97 + t10;
t11 = t223 * t21 + t220 * t37;
t9 = -pkin(9) * t96 + t11;
t1 = -t256 * qJD(6) + t228 * t6 + t366 * t9;
t371 = t170 ^ 2;
t370 = pkin(5) * t96;
t116 = -pkin(4) * t252 - qJ(5) * t181 - t210;
t57 = t223 * t116 - t139 * t220;
t44 = -pkin(5) * t252 - t181 * t364 + t57;
t329 = t181 * t220;
t58 = t220 * t116 + t223 * t139;
t48 = -pkin(9) * t329 + t58;
t17 = -t228 * t48 + t366 * t44;
t369 = t17 * qJD(6) + t228 * t386 - t385 * t366;
t18 = t228 * t44 + t366 * t48;
t368 = -t18 * qJD(6) + t385 * t228 + t366 * t386;
t365 = pkin(5) * t220;
t183 = t210 * t322;
t363 = g(3) * t183;
t362 = g(3) * t222;
t361 = t69 * t70;
t359 = pkin(9) + qJ(5);
t187 = t359 * t220;
t189 = t359 * t223;
t136 = -t187 * t366 - t228 * t189;
t331 = t168 * t223;
t114 = pkin(4) * t170 + qJ(5) * t168;
t63 = t367 * t131 - t128;
t40 = t223 * t114 - t220 * t63;
t29 = pkin(5) * t170 + pkin(9) * t331 + t40;
t332 = t168 * t220;
t41 = t220 * t114 + t223 * t63;
t33 = pkin(9) * t332 + t41;
t358 = t251 * qJD(5) + t136 * qJD(6) - t228 * t29 - t366 * t33;
t138 = -t228 * t187 + t189 * t366;
t357 = -qJD(5) * t180 - qJD(6) * t138 + t228 * t33 - t366 * t29;
t355 = t170 * t70;
t354 = t170 * t69;
t352 = t220 * t97;
t351 = t96 * t223;
t350 = t97 * t223;
t345 = -pkin(5) * t330 + t343;
t340 = qJD(4) * t64;
t335 = t143 * t170;
t334 = t143 * t220;
t333 = t168 * t170;
t218 = pkin(12) + qJ(6);
t211 = sin(t218);
t214 = cos(t219);
t327 = t211 * t214;
t213 = cos(t218);
t326 = t213 * t214;
t325 = t214 * t231;
t323 = t222 * t230;
t111 = t223 * t122;
t321 = t360 * t230;
t317 = t231 * t232;
t56 = -qJD(4) * pkin(4) + qJD(5) - t63;
t316 = -qJD(5) + t56;
t315 = qJDD(1) - g(3);
t314 = -t220 * t161 + t111;
t165 = t225 * t281 + t278;
t313 = -t164 * t210 + t165 * t360;
t167 = -t225 * t279 + t280;
t312 = -t166 * t210 + t167 * t360;
t215 = t221 ^ 2;
t217 = t224 ^ 2;
t311 = t215 + t217;
t299 = g(3) * t323;
t291 = t222 * t308;
t285 = t228 * t97 + t366 * t96;
t283 = t222 * t342;
t282 = t222 * t341;
t25 = -t131 * t306 - t132 * t288 - t229 * t99 + t367 * t98;
t28 = qJD(6) * t69 + t285;
t276 = -t180 * t28 - t349 * t70;
t274 = t251 * t115 - t160 * t348;
t272 = g(1) * t167 + g(2) * t165;
t270 = pkin(4) * t214 + qJ(5) * t212;
t267 = -t10 * t223 - t11 * t220;
t266 = -t220 * t31 + t223 * t32;
t265 = t122 * t181 - t168 * t174;
t264 = -t122 * t252 + t168 * t175;
t209 = pkin(5) * t223 + pkin(4);
t262 = t209 * t214 + t212 * t359;
t261 = t223 * t387;
t162 = -t221 * t323 + t224 * t225;
t163 = t221 * t225 + t224 * t323;
t103 = t229 * t162 + t163 * t367;
t76 = -t103 * t220 - t223 * t322;
t77 = t103 * t223 - t220 * t322;
t38 = -t228 * t77 + t366 * t76;
t8 = t228 * t19 + t26 * t366;
t39 = t228 * t76 + t366 * t77;
t253 = t162 * t367 - t229 * t163;
t124 = t165 * t212 + t214 * t283;
t126 = t167 * t212 - t214 * t282;
t153 = t212 * t323 - t225 * t214;
t249 = g(1) * t126 + g(2) * t124 + g(3) * t153;
t125 = t165 * t214 - t212 * t283;
t127 = t167 * t214 + t212 * t282;
t154 = t212 * t225 + t214 * t323;
t248 = g(1) * t127 + g(2) * t125 + g(3) * t154;
t23 = -t25 + t377;
t246 = -t23 + t249;
t243 = t261 - t334;
t239 = t380 * t214;
t238 = -t380 + t286;
t237 = -t56 * t174 + t23 * t181 - t272;
t112 = -t145 * t221 + t197;
t236 = -t112 * t221 + t113 * t224 - t272;
t235 = t249 + t25;
t2 = -qJD(6) * t8 - t228 * t9 + t366 * t6;
t234 = -t238 + t378;
t233 = -t235 + t377;
t107 = t251 * t181;
t106 = t180 * t181;
t93 = pkin(5) * t329 - t381;
t81 = t220 * t96;
t62 = qJD(2) * t242 + qJD(4) * t103;
t61 = qJD(2) * t241 + qJD(4) * t253;
t53 = t220 * t291 + t223 * t61;
t52 = -t220 * t61 + t223 * t291;
t51 = -t180 * t174 + t181 * t379;
t50 = t181 * t173 + t174 * t251;
t49 = -pkin(5) * t332 + t64;
t45 = -pkin(5) * t387 + t56;
t24 = -t132 * t306 + t298;
t16 = t23 + t370;
t13 = -qJD(6) * t39 - t228 * t53 + t366 * t52;
t12 = qJD(6) * t38 + t228 * t52 + t366 * t53;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t315, 0, 0, 0, 0, 0, 0, t247 (-qJDD(2) * t230 - t317) * t222, 0, -g(3) + (t225 ^ 2 + (t230 ^ 2 + t231 ^ 2) * t222 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t224 * t247, -t221 * t247, t311 * t222 * t317 + (-t162 * t221 + t163 * t224) * qJDD(2), t112 * t162 + t113 * t163 - g(3) + (-qJD(2) * t372 - t150 * t231) * t222, 0, 0, 0, 0, 0, 0, -qJD(4) * t62 + qJDD(4) * t253 + (-t122 * t231 + t168 * t308) * t222, -qJD(4) * t61 - qJDD(4) * t103 + (t121 * t231 + t170 * t308) * t222, -t103 * t122 + t121 * t253 - t168 * t61 + t170 * t62, t253 * t25 + t103 * t24 + t61 * t64 - t62 * t63 - g(3) + (-t134 * t231 + t159 * t308) * t222, 0, 0, 0, 0, 0, 0, t76 * t122 + t52 * t168 - t253 * t96 - t387 * t62, -t122 * t77 + t143 * t62 - t168 * t53 - t253 * t97, -t52 * t143 + t387 * t53 - t76 * t97 - t77 * t96, t10 * t76 + t11 * t77 - t23 * t253 + t31 * t52 + t32 * t53 + t56 * t62 - g(3), 0, 0, 0, 0, 0, 0, t115 * t38 + t13 * t160 - t253 * t28 - t62 * t70, -t115 * t39 - t12 * t160 + t253 * t27 + t62 * t69, t12 * t70 - t13 * t69 + t27 * t38 - t28 * t39, t1 * t39 + t12 * t8 - t13 * t256 - t16 * t253 + t2 * t38 + t45 * t62 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t238, -t315 * t323 + t272, 0, 0, t215 * qJDD(2), 0.2e1 * t221 * t300, 0, t217 * qJDD(2), 0, 0, t373 * t224, -t373 * t221, -t299 + t236 + (qJD(2) * t269 + t302) * t311, -t263 * qJD(3) + t259 * pkin(2) + t236 * qJ(3) + (-g(3) * (pkin(2) * t231 + qJ(3) * t230) + t372 * qJD(1)) * t222, -t121 * t181 - t170 * t174, -t121 * t252 - t170 * t175 - t265, -qJD(4) * t174 + qJDD(4) * t181, t264, -qJD(4) * t175 + qJDD(4) * t252, 0, -qJD(4) * t343 + qJDD(4) * t381 - t122 * t210 - t134 * t252 + t159 * t175 - t168 * t294 - t239, -qJD(4) * t344 - qJDD(4) * t139 + t121 * t210 + t134 * t181 - t159 * t174 - t170 * t294 + t240, t121 * t381 - t122 * t139 - t168 * t344 + t170 * t343 + t174 * t63 - t175 * t64 - t181 * t25 + t24 * t252 - t272 - t299, t24 * t139 + t25 * t381 - t134 * t210 - t159 * t294 - g(1) * t312 - g(2) * t313 - g(3) * (t222 * t321 + t183) + t344 * t64 - t343 * t63 (-t143 * t174 + t181 * t97) * t223 (-t351 - t352) * t181 - t243 * t174, t143 * t175 + t223 * t265 - t252 * t97 (t174 * t387 + t96 * t181) * t220, t175 * t387 - t220 * t265 + t252 * t96, t264, t57 * t122 - t10 * t252 + t31 * t175 - t381 * t96 - t223 * t239 + (t237 - t299) * t220 + t347 * t168 - t343 * t387, t11 * t252 - t58 * t122 - t381 * t97 - t32 * t175 - t273 * t220 * t214 + t237 * t223 - (-t220 * t325 + t223 * t230) * t362 - t346 * t168 + t343 * t143, -t58 * t96 - t57 * t97 + t267 * t181 + (t32 * t220 + t31 * t223) * t174 - t347 * t143 - t240 + t346 * t387, t11 * t58 + t10 * t57 - t23 * t381 - g(1) * (-t166 * t270 + t312) - g(2) * (-t164 * t270 + t313) - t363 + t343 * t56 + t346 * t32 + t347 * t31 - (t231 * t270 + t321) * t362, -t107 * t27 - t50 * t69, t106 * t27 - t107 * t28 - t50 * t70 - t51 * t69, t107 * t115 - t160 * t50 + t175 * t69 + t252 * t27, t106 * t28 - t51 * t70, -t106 * t115 - t160 * t51 + t175 * t70 + t252 * t28, -t115 * t252 + t160 * t175, t17 * t115 - t2 * t252 - t256 * t175 + t93 * t28 + t16 * t106 + t45 * t51 - g(1) * (-t166 * t326 + t167 * t211) - g(2) * (-t164 * t326 + t165 * t211) - t345 * t70 - (t211 * t230 + t213 * t325) * t362 + t368 * t160, -t18 * t115 + t1 * t252 - t8 * t175 - t93 * t27 + t16 * t107 - t45 * t50 - g(1) * (t166 * t327 + t167 * t213) - g(2) * (t164 * t327 + t165 * t213) + t345 * t69 - (-t211 * t325 + t213 * t230) * t362 - t369 * t160, -t1 * t106 - t107 * t2 + t17 * t27 - t18 * t28 - t256 * t50 - t368 * t69 + t369 * t70 - t51 * t8 - t240, t1 * t18 + t2 * t17 + t16 * t93 - g(1) * (-t166 * t262 + t167 * t365 + t312) - g(2) * (-t164 * t262 + t165 * t365 + t313) - t363 + t369 * t8 - t368 * t256 + t345 * t45 - (t262 * t231 + (t360 + t365) * t230) * t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, t301, -t311 * t232, qJD(2) * t263 + t234 - t339, 0, 0, 0, 0, 0, 0, 0.2e1 * t170 * qJD(4) + t268 (-t168 - t292) * qJD(4) + t297, -t161 - t371, t168 * t64 + t170 * t63 + t234 - t271, 0, 0, 0, 0, 0, 0, t314 + t382, -t335 + t374, -t350 - t81 + (t261 + t334) * t168, t168 * t266 - t170 * t56 - t267 + t380, 0, 0, 0, 0, 0, 0, t274 + t355, -t354 - t375, t276 - t376, t1 * t180 - t170 * t45 + t2 * t251 + t256 * t348 - t349 * t8 + t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t333, -t161 + t371 (t168 - t292) * qJD(4) + t297, -t333, -t268, qJDD(4), -t159 * t170 + t235 + t340, t159 * t168 + (t63 + t128) * qJD(4) + t248 - t298, 0, 0, t143 * t331 + t352, t168 * t243 + t350 - t81, -t335 - t374, -t332 * t387 - t351, t314 - t382, -t333, -qJ(5) * t336 - pkin(4) * t96 - t64 * t324 - t31 * t170 + (t220 * t316 - t40) * t168 + (t246 + t340) * t223, -qJ(5) * t111 - pkin(4) * t97 - t143 * t64 + t170 * t32 + (t223 * t316 + t41) * t168 - t246 * t220, t40 * t143 + t41 * t324 + (-qJ(5) * t96 - qJD(5) * t324 - t31 * t168 + t11 + (t223 * qJD(5) - t41) * qJD(4)) * t223 + (qJ(5) * t97 + qJD(5) * t143 - t32 * t168 - t10) * t220 - t248, -t31 * t40 - t32 * t41 - t56 * t64 + t266 * qJD(5) + t246 * pkin(4) + (-t10 * t220 + t11 * t223 - t248) * qJ(5), -t180 * t27 - t349 * t69, t276 + t376, -t354 + t375, -t251 * t28 - t348 * t70, t274 - t355, -t160 * t170, t115 * t136 - t16 * t251 + t160 * t357 + t170 * t256 - t209 * t28 + t213 * t249 + t348 * t45 + t49 * t70, -t115 * t138 + t16 * t180 - t160 * t358 + t170 * t8 + t209 * t27 - t211 * t249 - t349 * t45 - t49 * t69, t1 * t251 + t136 * t27 - t138 * t28 - t180 * t2 - t256 * t349 - t348 * t8 - t357 * t69 + t358 * t70 - t248, t1 * t138 + t2 * t136 - t16 * t209 - t45 * t49 - g(1) * (-t126 * t209 + t127 * t359) - g(2) * (-t124 * t209 + t125 * t359) - g(3) * (-t153 * t209 + t154 * t359) + t358 * t8 - t357 * t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143 * t168 + t96, t168 * t387 + t97, -t143 ^ 2 - t387 ^ 2, t143 * t31 - t32 * t387 + t233, 0, 0, 0, 0, 0, 0, t69 * t160 + t28, -t27 + t390, -t389 - t391, -t256 * t69 - t70 * t8 + t233 + t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t361, t389 - t391, -t27 - t390, t361, -t285 + (-qJD(6) + t160) * t69, t115, t8 * t160 - t45 * t69 - g(1) * (-t127 * t211 + t166 * t213) - g(2) * (-t125 * t211 + t164 * t213) - g(3) * (-t154 * t211 - t213 * t322) + t2, -t256 * t160 - t45 * t70 - g(1) * (-t127 * t213 - t166 * t211) - g(2) * (-t125 * t213 - t164 * t211) - g(3) * (-t154 * t213 + t211 * t322) - t1, 0, 0;];
tau_reg  = t3;
