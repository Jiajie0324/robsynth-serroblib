% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 22:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:48:12
% EndTime: 2019-05-04 22:48:52
% DurationCPUTime: 39.85s
% Computational Cost: add. (282885->968), mult. (657865->1587), div. (0->0), fcn. (513318->14), ass. (0->686)
t932 = cos(pkin(11));
t1035 = qJD(2) * t932;
t928 = sin(pkin(11));
t936 = sin(qJ(4));
t1043 = t928 * t936;
t939 = cos(qJ(4));
t892 = qJD(2) * t1043 - t939 * t1035;
t970 = t928 * t939 + t932 * t936;
t894 = t970 * qJD(2);
t852 = t894 * t892;
t1078 = qJDD(4) - t852;
t1093 = t1078 * t936;
t1092 = t1078 * t939;
t927 = sin(pkin(12));
t931 = cos(pkin(12));
t870 = -t931 * qJD(4) + t894 * t927;
t872 = qJD(4) * t927 + t894 * t931;
t813 = t872 * t870;
t1032 = t894 * qJD(4);
t1028 = qJDD(2) * t932;
t886 = qJDD(2) * t1043 - t939 * t1028;
t843 = t886 + t1032;
t1082 = -t813 + t843;
t1091 = t1082 * t927;
t1090 = t1082 * t931;
t935 = sin(qJ(6));
t938 = cos(qJ(6));
t808 = t938 * t870 + t872 * t935;
t810 = -t870 * t935 + t872 * t938;
t738 = t810 * t808;
t947 = qJDD(6) + t843;
t1084 = -t738 + t947;
t1089 = t1084 * t935;
t1088 = t1084 * t938;
t1074 = qJD(2) ^ 2;
t921 = t928 ^ 2;
t1034 = t1074 * t921;
t922 = t932 ^ 2;
t918 = t922 * t1074;
t901 = t918 + t1034;
t929 = sin(pkin(10));
t933 = cos(pkin(10));
t1014 = g(1) * t929 - t933 * g(2);
t1036 = g(3) - qJDD(1);
t930 = sin(pkin(6));
t934 = cos(pkin(6));
t1087 = t934 * t1014 - t930 * t1036;
t940 = cos(qJ(2));
t1027 = qJDD(2) * t940;
t1015 = t932 * t1027;
t1077 = t1074 * (t921 + t922);
t897 = t932 * t1077;
t937 = sin(qJ(2));
t964 = -t897 * t937 + t1015;
t1085 = t964 * t934;
t1026 = t937 * qJDD(2);
t868 = t1026 * t932 + t897 * t940;
t792 = t1085 * t933 - t868 * t929;
t1086 = t1085 * t929 + t868 * t933;
t854 = t964 * t930;
t882 = qJD(6) + t892;
t781 = t882 * t808;
t1033 = t892 * qJD(4);
t1079 = t970 * qJDD(2);
t845 = t1079 - t1033;
t821 = t931 * qJDD(4) - t845 * t927;
t822 = t927 * qJDD(4) + t931 * t845;
t950 = qJD(6) * t808 - t821 * t935 - t822 * t938;
t1083 = -t781 - t950;
t827 = t892 * t870;
t762 = -t827 - t822;
t761 = -t827 + t822;
t1081 = t929 * t1036;
t1080 = t933 * t1036;
t906 = g(1) * t933 + g(2) * t929;
t864 = -t1014 * t929 - t933 * t906;
t829 = t1087 * t937 - t940 * t906;
t1011 = -t938 * t821 + t935 * t822;
t655 = (qJD(6) - t882) * t810 + t1011;
t863 = t1014 * t933 - t929 * t906;
t806 = t808 ^ 2;
t807 = t810 ^ 2;
t1076 = t870 ^ 2;
t866 = t872 ^ 2;
t881 = t882 ^ 2;
t1075 = t892 ^ 2;
t885 = t894 ^ 2;
t1073 = qJD(4) ^ 2;
t1072 = 2 * qJD(3);
t1071 = pkin(4) * t936;
t828 = -t1087 * t940 - t937 * t906;
t768 = t937 * t828 + t829 * t940;
t1070 = pkin(7) * t768;
t926 = qJDD(2) * pkin(2);
t875 = t1014 * t930 + t1036 * t934;
t944 = qJDD(2) * qJ(3) + t829;
t771 = t932 * (-pkin(2) * t1074 + t944) - t928 * t875 + t1035 * t1072;
t752 = -pkin(3) * t918 + pkin(8) * t1028 + t771;
t1041 = t932 * t875;
t943 = -t1041 + ((-qJ(3) - pkin(8)) * qJDD(2) + (-(2 * qJD(3)) + (pkin(3) * t932 + pkin(2)) * qJD(2)) * qJD(2) - t829) * t928;
t677 = t939 * t752 + t936 * t943;
t834 = pkin(4) * t892 - qJ(5) * t894;
t636 = -pkin(4) * t1073 + qJDD(4) * qJ(5) - t834 * t892 + t677;
t817 = -t1074 * qJ(3) + qJDD(3) + t828 - t926;
t790 = -pkin(3) * t1028 - pkin(8) * t901 + t817;
t687 = (-t845 + t1033) * qJ(5) + (t843 + t1032) * pkin(4) + t790;
t589 = 0.2e1 * qJD(5) * t872 + t927 * t636 - t931 * t687;
t536 = pkin(5) * t1082 + pkin(9) * t762 - t589;
t590 = -0.2e1 * qJD(5) * t870 + t931 * t636 + t927 * t687;
t820 = pkin(5) * t892 - pkin(9) * t872;
t550 = -pkin(5) * t1076 + pkin(9) * t821 - t820 * t892 + t590;
t478 = -t938 * t536 + t550 * t935;
t479 = t935 * t536 + t938 * t550;
t423 = -t478 * t938 + t479 * t935;
t1069 = t423 * t927;
t1068 = t423 * t931;
t676 = t752 * t936 - t939 * t943;
t633 = -qJDD(4) * pkin(4) - t1073 * qJ(5) + t834 * t894 + qJDD(5) + t676;
t600 = -t821 * pkin(5) - pkin(9) * t1076 + t820 * t872 + t633;
t1067 = t600 * t935;
t1066 = t600 * t938;
t601 = -t676 * t939 + t677 * t936;
t1065 = t601 * t928;
t1064 = t601 * t932;
t1063 = t633 * t927;
t1062 = t633 * t931;
t712 = t738 + t947;
t1061 = t712 * t935;
t1060 = t712 * t938;
t765 = t813 + t843;
t1059 = t765 * t927;
t1058 = t765 * t931;
t1057 = t790 * t936;
t1056 = t790 * t939;
t1055 = t817 * t940;
t840 = qJDD(4) + t852;
t1054 = t840 * t936;
t1053 = t840 * t939;
t1052 = t843 * t936;
t1051 = t872 * t892;
t1044 = t928 * t932;
t1017 = t1074 * t1044;
t874 = t1015 * t928 - t1017 * t937;
t1050 = t874 * t929;
t1049 = t874 * t933;
t1048 = t882 * t935;
t1047 = t882 * t938;
t1046 = t892 * t927;
t1045 = t892 * t931;
t1040 = t937 * t817;
t1039 = t937 * t875;
t1038 = t940 * t875;
t1030 = qJDD(2) * t921;
t1029 = qJDD(2) * t930;
t1025 = t936 * t738;
t1024 = t939 * t738;
t1023 = t936 * t813;
t1022 = t939 * t813;
t1021 = t940 * t852;
t1020 = t937 * t1044;
t1019 = t937 * t852;
t1018 = -pkin(4) * t939 - pkin(3);
t1016 = t928 * t1028;
t1012 = -t817 + t926;
t424 = t478 * t935 + t938 * t479;
t602 = t676 * t936 + t939 * t677;
t770 = t1041 + ((-pkin(2) * qJD(2) + t1072) * qJD(2) + t944) * t928;
t691 = t770 * t928 + t932 * t771;
t1010 = t930 * t1020;
t1009 = t934 * t1020;
t1008 = t940 * t1017;
t690 = t770 * t932 - t771 * t928;
t916 = t922 * qJDD(2);
t899 = t916 + t1030;
t858 = t899 * t940 - t937 * t901;
t1006 = pkin(7) * t858 + t690 * t937;
t904 = -t1074 * t937 + t1027;
t1005 = -pkin(7) * t904 - t1039;
t968 = t1074 * t940 + t1026;
t1004 = -pkin(7) * t968 + t1038;
t1003 = t930 * t1008;
t1002 = t934 * t1008;
t393 = t424 * t931 - t1069;
t387 = t393 * t936 - t600 * t939;
t388 = t393 * t939 + t600 * t936;
t358 = -t387 * t928 + t388 * t932;
t392 = t424 * t927 + t1068;
t1001 = t358 * t937 - t392 * t940;
t509 = t589 * t927 + t590 * t931;
t489 = t509 * t936 - t633 * t939;
t490 = t509 * t939 + t633 * t936;
t426 = -t489 * t928 + t490 * t932;
t508 = -t589 * t931 + t590 * t927;
t1000 = t426 * t937 - t508 * t940;
t659 = -t781 + t950;
t580 = -t655 * t935 + t659 * t938;
t582 = -t655 * t938 - t659 * t935;
t506 = -t580 * t927 + t582 * t931;
t686 = -t806 - t807;
t496 = t506 * t936 - t686 * t939;
t497 = t506 * t939 + t686 * t936;
t429 = -t496 * t928 + t497 * t932;
t504 = t580 * t931 + t582 * t927;
t999 = t429 * t937 - t504 * t940;
t654 = (qJD(6) + t882) * t810 + t1011;
t581 = t1083 * t938 - t654 * t935;
t583 = -t1083 * t935 - t654 * t938;
t507 = -t581 * t927 + t583 * t931;
t737 = -t807 + t806;
t502 = t507 * t936 + t737 * t939;
t503 = t507 * t939 - t737 * t936;
t433 = -t502 * t928 + t503 * t932;
t505 = -t581 * t931 - t583 * t927;
t998 = t433 * t937 + t505 * t940;
t723 = -t881 - t806;
t624 = t723 * t935 + t1088;
t625 = t723 * t938 - t1089;
t552 = -t624 * t927 + t625 * t931;
t513 = t552 * t936 - t654 * t939;
t514 = t552 * t939 + t654 * t936;
t458 = -t513 * t928 + t514 * t932;
t551 = t624 * t931 + t625 * t927;
t997 = t458 * t937 - t551 * t940;
t747 = -t807 - t881;
t637 = t747 * t938 - t1061;
t638 = -t747 * t935 - t1060;
t562 = -t637 * t927 + t638 * t931;
t517 = -t1083 * t939 + t562 * t936;
t518 = t1083 * t936 + t562 * t939;
t462 = -t517 * t928 + t518 * t932;
t561 = t637 * t931 + t638 * t927;
t996 = t462 * t937 - t561 * t940;
t776 = -t807 + t881;
t650 = t776 * t938 + t1089;
t652 = -t776 * t935 + t1088;
t576 = -t650 * t927 + t652 * t931;
t524 = t576 * t936 + t659 * t939;
t526 = t576 * t939 - t659 * t936;
t467 = -t524 * t928 + t526 * t932;
t574 = -t650 * t931 - t652 * t927;
t995 = t467 * t937 + t574 * t940;
t775 = t806 - t881;
t651 = t775 * t935 + t1060;
t653 = t775 * t938 - t1061;
t577 = -t651 * t927 + t653 * t931;
t525 = t577 * t936 + t655 * t939;
t527 = t577 * t939 - t655 * t936;
t468 = -t525 * t928 + t527 * t932;
t575 = -t651 * t931 - t653 * t927;
t994 = t468 * t937 + t575 * t940;
t705 = -qJD(6) * t810 - t1011;
t646 = t1048 * t808 + t705 * t938;
t647 = t1047 * t808 - t705 * t935;
t572 = -t646 * t927 + t647 * t931;
t545 = t572 * t936 + t1024;
t547 = t572 * t939 - t1025;
t483 = -t545 * t928 + t547 * t932;
t570 = -t646 * t931 - t647 * t927;
t993 = t483 * t937 + t570 * t940;
t648 = t1047 * t810 - t935 * t950;
t649 = -t1048 * t810 - t938 * t950;
t573 = -t648 * t927 + t649 * t931;
t546 = t573 * t936 - t1024;
t548 = t573 * t939 + t1025;
t484 = -t546 * t928 + t548 * t932;
t571 = -t648 * t931 - t649 * t927;
t992 = t484 * t937 + t571 * t940;
t516 = t602 * t932 - t1065;
t991 = t516 * t937 - t790 * t940;
t703 = (-t808 * t935 - t810 * t938) * t882;
t704 = (-t808 * t938 + t810 * t935) * t882;
t613 = -t703 * t927 + t704 * t931;
t610 = t613 * t936 - t939 * t947;
t611 = t613 * t939 + t936 * t947;
t520 = -t610 * t928 + t611 * t932;
t612 = -t703 * t931 - t704 * t927;
t990 = t520 * t937 + t612 * t940;
t758 = -t821 - t1051;
t682 = -t758 * t931 - t762 * t927;
t772 = t866 + t1076;
t630 = t682 * t936 + t772 * t939;
t631 = t682 * t939 - t772 * t936;
t557 = -t630 * t928 + t631 * t932;
t680 = -t758 * t927 + t762 * t931;
t989 = t557 * t937 - t680 * t940;
t787 = -t1075 - t1076;
t698 = t787 * t931 - t1091;
t760 = t821 - t1051;
t634 = t698 * t936 + t760 * t939;
t635 = t698 * t939 - t760 * t936;
t560 = -t634 * t928 + t635 * t932;
t697 = t787 * t927 + t1090;
t988 = t560 * t937 - t697 * t940;
t801 = -t866 - t1075;
t710 = -t801 * t927 - t1058;
t640 = t710 * t936 - t761 * t939;
t641 = t710 * t939 + t761 * t936;
t565 = -t640 * t928 + t641 * t932;
t709 = t801 * t931 - t1059;
t987 = t565 * t937 - t709 * t940;
t683 = t760 * t931 - t761 * t927;
t811 = -t866 + t1076;
t643 = t683 * t936 + t811 * t939;
t644 = t683 * t939 - t811 * t936;
t569 = -t643 * t928 + t644 * t932;
t681 = -t760 * t927 - t761 * t931;
t986 = t569 * t937 + t681 * t940;
t824 = -t866 + t1075;
t721 = -t824 * t927 + t1090;
t660 = t721 * t936 + t762 * t939;
t662 = t721 * t939 - t762 * t936;
t586 = -t660 * t928 + t662 * t932;
t719 = -t824 * t931 - t1091;
t985 = t586 * t937 + t719 * t940;
t823 = -t1075 + t1076;
t722 = t823 * t931 - t1059;
t661 = t722 * t936 + t758 * t939;
t663 = t722 * t939 - t758 * t936;
t587 = -t661 * t928 + t663 * t932;
t720 = -t823 * t927 - t1058;
t984 = t587 * t937 + t720 * t940;
t749 = t1045 * t870 - t821 * t927;
t714 = t749 * t936 + t1022;
t716 = t749 * t939 - t1023;
t618 = -t714 * t928 + t716 * t932;
t748 = -t1046 * t870 - t821 * t931;
t983 = t618 * t937 + t748 * t940;
t751 = -t1046 * t872 + t822 * t931;
t715 = t751 * t936 - t1022;
t717 = t751 * t939 + t1023;
t619 = -t715 * t928 + t717 * t932;
t750 = -t1045 * t872 - t822 * t927;
t982 = t619 * t937 + t750 * t940;
t757 = (-t870 * t931 + t872 * t927) * t892;
t831 = t939 * t843;
t724 = t757 * t936 - t831;
t725 = t757 * t939 + t1052;
t629 = -t724 * t928 + t725 * t932;
t756 = (t870 * t927 + t872 * t931) * t892;
t981 = t629 * t937 + t756 * t940;
t980 = t691 * t937 - t1055;
t836 = -t1075 - t1073;
t773 = t836 * t936 + t1092;
t774 = t836 * t939 - t1093;
t696 = -t773 * t928 + t774 * t932;
t842 = t886 + 0.2e1 * t1032;
t979 = t696 * t937 - t842 * t940;
t777 = -t1079 * t939 - t886 * t936;
t779 = t1079 * t936 - t886 * t939;
t701 = -t777 * t928 + t779 * t932;
t814 = -t1075 - t885;
t978 = t701 * t937 - t814 * t940;
t844 = t1079 - 0.2e1 * t1033;
t778 = -t842 * t936 + t844 * t939;
t780 = -t842 * t939 - t844 * t936;
t702 = -t778 * t928 + t780 * t932;
t850 = -t885 + t1075;
t977 = t702 * t937 + t850 * t940;
t876 = t1075 - t1073;
t795 = t876 * t936 + t1053;
t798 = t876 * t939 - t1054;
t730 = -t795 * t928 + t798 * t932;
t976 = t730 * t937 + t886 * t940;
t877 = -t885 + t1073;
t796 = t877 * t939 + t1093;
t799 = -t877 * t936 + t1092;
t731 = -t796 * t928 + t799 * t932;
t975 = -t1079 * t940 + t731 * t937;
t878 = -t885 - t1073;
t797 = t878 * t939 - t1054;
t800 = -t878 * t936 - t1053;
t732 = -t797 * t928 + t800 * t932;
t974 = t732 * t937 - t844 * t940;
t767 = t828 * t940 - t937 * t829;
t890 = t968 * t934;
t973 = t890 * t933 + t904 * t929;
t848 = t890 * t929 - t904 * t933;
t972 = t899 * t937 + t901 * t940;
t900 = t916 - t1030;
t902 = t918 - t1034;
t971 = t900 * t937 + t902 * t940;
t825 = (-t892 * t936 - t894 * t939) * qJD(4);
t826 = (-t892 * t939 + t894 * t936) * qJD(4);
t754 = -t825 * t928 + t826 * t932;
t969 = -qJDD(4) * t940 + t754 * t937;
t802 = t1033 * t936 - t831;
t803 = t1033 * t939 + t1052;
t735 = -t802 * t928 + t803 * t932;
t967 = t735 * t937 + t1021;
t804 = t1032 * t939 + t845 * t936;
t805 = -t1032 * t936 + t845 * t939;
t736 = -t804 * t928 + t805 * t932;
t966 = t736 * t937 - t1021;
t896 = t928 * t1077;
t965 = -t1027 * t928 + t896 * t937;
t420 = -pkin(5) * t600 + pkin(9) * t424;
t362 = -pkin(9) * t1068 - qJ(5) * t392 - t420 * t927;
t372 = -pkin(4) * t392 - pkin(5) * t423;
t341 = -pkin(3) * t392 + pkin(8) * t388 + t362 * t936 + t372 * t939;
t349 = -pkin(8) * t387 + t362 * t939 - t372 * t936;
t357 = t387 * t932 + t388 * t928;
t334 = -qJ(3) * t357 - t341 * t928 + t349 * t932;
t342 = -pkin(2) * t357 - pkin(3) * t387 + pkin(4) * t600 + pkin(9) * t1069 - qJ(5) * t393 - t420 * t931;
t351 = t358 * t940 + t937 * t392;
t962 = pkin(7) * t351 + t334 * t937 + t342 * t940;
t414 = -pkin(5) * t686 + pkin(9) * t582 + t424;
t417 = -pkin(9) * t580 - t423;
t374 = -qJ(5) * t504 - t414 * t927 + t417 * t931;
t470 = -pkin(4) * t504 - pkin(5) * t580;
t360 = -pkin(3) * t504 + pkin(8) * t497 + t374 * t936 + t470 * t939;
t365 = -pkin(8) * t496 + t374 * t939 - t470 * t936;
t428 = t496 * t932 + t497 * t928;
t350 = -qJ(3) * t428 - t360 * t928 + t365 * t932;
t359 = -pkin(2) * t428 - pkin(3) * t496 + pkin(4) * t686 - qJ(5) * t506 - t414 * t931 - t417 * t927;
t413 = t429 * t940 + t937 * t504;
t961 = pkin(7) * t413 + t350 * t937 + t359 * t940;
t510 = -pkin(5) * t654 + pkin(9) * t625 - t1066;
t528 = -pkin(9) * t624 + t1067;
t430 = -qJ(5) * t551 - t510 * t927 + t528 * t931;
t434 = -pkin(4) * t551 - pkin(5) * t624 + t478;
t380 = -pkin(3) * t551 + pkin(8) * t514 + t430 * t936 + t434 * t939;
t391 = -pkin(8) * t513 + t430 * t939 - t434 * t936;
t457 = t513 * t932 + t514 * t928;
t353 = -qJ(3) * t457 - t380 * t928 + t391 * t932;
t394 = -pkin(2) * t457 - pkin(3) * t513 + pkin(4) * t654 - qJ(5) * t552 - t510 * t931 - t528 * t927;
t427 = t458 * t940 + t937 * t551;
t960 = pkin(7) * t427 + t353 * t937 + t394 * t940;
t511 = -pkin(5) * t1083 + pkin(9) * t638 + t1067;
t532 = -pkin(9) * t637 + t1066;
t436 = -qJ(5) * t561 - t511 * t927 + t532 * t931;
t438 = -pkin(4) * t561 - pkin(5) * t637 + t479;
t389 = -pkin(3) * t561 + pkin(8) * t518 + t436 * t936 + t438 * t939;
t395 = -pkin(8) * t517 + t436 * t939 - t438 * t936;
t461 = t517 * t932 + t518 * t928;
t356 = -qJ(3) * t461 - t389 * t928 + t395 * t932;
t397 = -pkin(2) * t461 - pkin(3) * t517 + pkin(4) * t1083 - qJ(5) * t562 - t511 * t931 - t532 * t927;
t437 = t462 * t940 + t937 * t561;
t959 = pkin(7) * t437 + t356 * t937 + t397 * t940;
t399 = pkin(8) * t490 + (-qJ(5) * t936 + t1018) * t508;
t416 = -pkin(8) * t489 + (-qJ(5) * t939 + t1071) * t508;
t425 = t489 * t932 + t490 * t928;
t366 = -qJ(3) * t425 - t399 * t928 + t416 * t932;
t396 = -pkin(2) * t425 - pkin(3) * t489 + pkin(4) * t633 - qJ(5) * t509;
t409 = t426 * t940 + t937 * t508;
t958 = pkin(7) * t409 + t366 * t937 + t396 * t940;
t498 = -qJ(5) * t680 - t508;
t450 = pkin(8) * t631 + t1018 * t680 + t936 * t498;
t460 = -pkin(8) * t630 + t1071 * t680 + t498 * t939;
t556 = t630 * t932 + t631 * t928;
t402 = -qJ(3) * t556 - t450 * t928 + t460 * t932;
t439 = -pkin(2) * t556 - pkin(3) * t630 - pkin(4) * t772 - qJ(5) * t682 - t509;
t523 = t557 * t940 + t937 * t680;
t957 = pkin(7) * t523 + t402 * t937 + t439 * t940;
t539 = -pkin(4) * t697 + t589;
t594 = -qJ(5) * t697 + t1063;
t463 = -pkin(3) * t697 + pkin(8) * t635 + t539 * t939 + t594 * t936;
t471 = -pkin(8) * t634 - t539 * t936 + t594 * t939;
t559 = t634 * t932 + t635 * t928;
t410 = -qJ(3) * t559 - t463 * t928 + t471 * t932;
t473 = -pkin(2) * t559 - pkin(3) * t634 - pkin(4) * t760 - qJ(5) * t698 + t1062;
t529 = t560 * t940 + t937 * t697;
t956 = pkin(7) * t529 + t410 * t937 + t473 * t940;
t540 = -pkin(4) * t709 + t590;
t595 = -qJ(5) * t709 + t1062;
t469 = -pkin(3) * t709 + pkin(8) * t641 + t540 * t939 + t595 * t936;
t472 = -pkin(8) * t640 - t540 * t936 + t595 * t939;
t564 = t640 * t932 + t641 * t928;
t412 = -qJ(3) * t564 - t469 * t928 + t472 * t932;
t476 = -pkin(2) * t564 - pkin(3) * t640 + pkin(4) * t761 - qJ(5) * t710 - t1063;
t531 = t565 * t940 + t937 * t709;
t955 = pkin(7) * t531 + t412 * t937 + t476 * t940;
t515 = t602 * t928 + t1064;
t588 = -pkin(3) * t790 + pkin(8) * t602;
t459 = -pkin(8) * t1064 - qJ(3) * t515 - t588 * t928;
t488 = -pkin(2) * t515 - pkin(3) * t601;
t512 = t516 * t940 + t937 * t790;
t954 = pkin(7) * t512 + t459 * t937 + t488 * t940;
t558 = -pkin(3) * t814 + pkin(8) * t779 + t602;
t579 = -pkin(8) * t777 - t601;
t699 = t777 * t932 + t779 * t928;
t491 = -qJ(3) * t699 - t558 * t928 + t579 * t932;
t645 = -pkin(2) * t699 - pkin(3) * t777;
t666 = t701 * t940 + t937 * t814;
t953 = pkin(7) * t666 + t491 * t937 + t645 * t940;
t679 = -pkin(3) * t842 + pkin(8) * t774 - t1056;
t695 = t773 * t932 + t774 * t928;
t718 = -pkin(8) * t773 + t1057;
t563 = -qJ(3) * t695 - t679 * t928 + t718 * t932;
t593 = -pkin(2) * t695 - pkin(3) * t773 + t676;
t672 = t696 * t940 + t937 * t842;
t952 = pkin(7) * t672 + t563 * t937 + t593 * t940;
t692 = -pkin(3) * t844 + pkin(8) * t800 + t1057;
t726 = -pkin(8) * t797 + t1056;
t729 = t797 * t932 + t800 * t928;
t592 = -qJ(3) * t729 - t692 * t928 + t726 * t932;
t603 = -pkin(2) * t729 - pkin(3) * t797 + t677;
t688 = t732 * t940 + t937 * t844;
t951 = pkin(7) * t688 + t592 * t937 + t603 * t940;
t949 = -pkin(7) * t868 + t1040 * t928 + t770 * t940;
t867 = t1026 * t928 + t896 * t940;
t948 = pkin(7) * t867 + t1040 * t932 + t771 * t940;
t664 = t691 * t940 + t1040;
t946 = pkin(7) * t664 - (-pkin(2) * t940 - qJ(3) * t937) * t690;
t891 = t904 * t934;
t889 = t904 * t930;
t888 = t968 * t930;
t859 = t900 * t940 - t937 * t902;
t855 = t965 * t934;
t853 = t965 * t930;
t849 = -t891 * t929 - t933 * t968;
t847 = t891 * t933 - t929 * t968;
t838 = t972 * t934;
t837 = t972 * t930;
t833 = -t1002 + (-t922 * t930 - t1009) * qJDD(2);
t832 = t1002 + (-t921 * t930 + t1009) * qJDD(2);
t818 = -0.2e1 * t1016 * t930 + t934 * t971;
t793 = -t855 * t929 + t867 * t933;
t791 = t855 * t933 + t867 * t929;
t789 = -t1038 + (t888 * t930 + t890 * t934) * pkin(7);
t788 = -t1039 + (-t889 * t930 - t891 * t934) * pkin(7);
t786 = -t838 * t929 + t858 * t933;
t785 = t838 * t933 + t858 * t929;
t784 = -qJ(3) * t897 + t1012 * t932;
t783 = qJ(3) * t896 - t1012 * t928;
t755 = t768 * t934;
t753 = t825 * t932 + t826 * t928;
t743 = t937 * qJDD(4) + t754 * t940;
t742 = -pkin(1) * t889 + t1004 * t934 + t930 * t828;
t741 = pkin(1) * t888 + t1005 * t934 + t930 * t829;
t740 = -t767 * t934 + t930 * t875;
t739 = -t767 * t930 - t934 * t875;
t734 = t804 * t932 + t805 * t928;
t733 = t802 * t932 + t803 * t928;
t728 = t796 * t932 + t799 * t928;
t727 = t795 * t932 + t798 * t928;
t708 = t1079 * t937 + t731 * t940;
t707 = t730 * t940 - t937 * t886;
t700 = t778 * t932 + t780 * t928;
t694 = t736 * t940 + t1019;
t693 = t735 * t940 - t1019;
t678 = pkin(2) * t901 + qJ(3) * t899 + t691;
t674 = t702 * t940 - t937 * t850;
t673 = -t930 * t753 + t934 * t969;
t671 = -pkin(1) * t739 + t1070 * t934;
t670 = -t740 * t929 + t768 * t933;
t669 = t740 * t933 + t768 * t929;
t668 = t932 * t1055 - t937 * t771 + (-t853 * t930 - t855 * t934) * pkin(7);
t667 = t928 * t1055 - t937 * t770 + (-t1085 * t934 - t854 * t930) * pkin(7);
t665 = -pkin(2) * t817 + qJ(3) * t691;
t642 = (-t739 * t930 - t740 * t934) * pkin(7);
t639 = t940 * t690 + (-t837 * t930 - t838 * t934) * pkin(7);
t628 = t724 * t932 + t725 * t928;
t627 = -pkin(1) * t853 - t930 * t783 + t934 * t948;
t626 = -pkin(1) * t854 - t930 * t784 + t934 * t949;
t623 = -t930 * t728 + t934 * t975;
t622 = -t930 * t727 + t934 * t976;
t621 = -t930 * t734 + t934 * t966;
t620 = -t930 * t733 + t934 * t967;
t617 = t715 * t932 + t717 * t928;
t616 = t714 * t932 + t716 * t928;
t615 = -t930 * t729 + t934 * t974;
t614 = t934 * t729 + t930 * t974;
t609 = t629 * t940 - t937 * t756;
t608 = -t930 * t700 + t934 * t977;
t607 = -t930 * t695 + t934 * t979;
t606 = t934 * t695 + t930 * t979;
t605 = -t930 * t699 + t934 * t978;
t604 = t934 * t699 + t930 * t978;
t599 = t690 * t930 + t934 * t980;
t598 = -t690 * t934 + t930 * t980;
t597 = t619 * t940 - t937 * t750;
t596 = t618 * t940 - t937 * t748;
t591 = -pkin(1) * t837 + t1006 * t934 - t930 * t678;
t585 = t661 * t932 + t663 * t928;
t584 = t660 * t932 + t662 * t928;
t578 = -pkin(2) * t844 + qJ(3) * t732 + t692 * t932 + t726 * t928;
t568 = t643 * t932 + t644 * t928;
t567 = -t615 * t929 + t688 * t933;
t566 = t615 * t933 + t688 * t929;
t555 = -pkin(2) * t842 + qJ(3) * t696 + t679 * t932 + t718 * t928;
t554 = -t607 * t929 + t672 * t933;
t553 = t607 * t933 + t672 * t929;
t544 = -t605 * t929 + t666 * t933;
t543 = t605 * t933 + t666 * t929;
t542 = t587 * t940 - t937 * t720;
t541 = t586 * t940 - t937 * t719;
t538 = -t599 * t929 + t664 * t933;
t537 = t599 * t933 + t664 * t929;
t533 = -t930 * t628 + t934 * t981;
t530 = t569 * t940 - t937 * t681;
t522 = -t930 * t617 + t934 * t982;
t521 = -t930 * t616 + t934 * t983;
t519 = t610 * t932 + t611 * t928;
t501 = t520 * t940 - t937 * t612;
t500 = -t930 * t585 + t934 * t984;
t499 = -t930 * t584 + t934 * t985;
t495 = -(pkin(2) * t937 - qJ(3) * t940) * t690 + (-t598 * t930 - t599 * t934) * pkin(7);
t494 = -t930 * t564 + t934 * t987;
t493 = t934 * t564 + t930 * t987;
t492 = -t930 * t568 + t934 * t986;
t487 = -pkin(1) * t598 - t930 * t665 + t934 * t946;
t486 = -t930 * t559 + t934 * t988;
t485 = t934 * t559 + t930 * t988;
t482 = t546 * t932 + t548 * t928;
t481 = t545 * t932 + t547 * t928;
t480 = -pkin(2) * t814 + qJ(3) * t701 + t558 * t932 + t579 * t928;
t475 = -t930 * t556 + t934 * t989;
t474 = t934 * t556 + t930 * t989;
t466 = t525 * t932 + t527 * t928;
t465 = t524 * t932 + t526 * t928;
t464 = t940 * t592 - t937 * t603 + (-t614 * t930 - t615 * t934) * pkin(7);
t456 = -t930 * t515 + t934 * t991;
t455 = t934 * t515 + t930 * t991;
t454 = t484 * t940 - t937 * t571;
t453 = t483 * t940 - t937 * t570;
t452 = t940 * t563 - t937 * t593 + (-t606 * t930 - t607 * t934) * pkin(7);
t451 = -pkin(2) * t790 - pkin(8) * t1065 + qJ(3) * t516 + t588 * t932;
t449 = -pkin(1) * t614 - t930 * t578 + t934 * t951;
t448 = -t930 * t519 + t934 * t990;
t447 = -t494 * t929 + t531 * t933;
t446 = t494 * t933 + t531 * t929;
t445 = -t486 * t929 + t529 * t933;
t444 = t486 * t933 + t529 * t929;
t443 = t468 * t940 - t937 * t575;
t442 = t467 * t940 - t937 * t574;
t441 = -t475 * t929 + t523 * t933;
t440 = t475 * t933 + t523 * t929;
t435 = -pkin(1) * t606 - t930 * t555 + t934 * t952;
t432 = t502 * t932 + t503 * t928;
t431 = t940 * t491 - t937 * t645 + (-t604 * t930 - t605 * t934) * pkin(7);
t422 = -t456 * t929 + t512 * t933;
t421 = t456 * t933 + t512 * t929;
t419 = -t930 * t482 + t934 * t992;
t418 = -t930 * t481 + t934 * t993;
t415 = t433 * t940 - t937 * t505;
t411 = -pkin(1) * t604 - t930 * t480 + t934 * t953;
t408 = -t930 * t466 + t934 * t994;
t407 = -t930 * t465 + t934 * t995;
t406 = -pkin(2) * t709 + qJ(3) * t565 + t469 * t932 + t472 * t928;
t405 = -pkin(2) * t697 + qJ(3) * t560 + t463 * t932 + t471 * t928;
t404 = -t930 * t461 + t934 * t996;
t403 = t934 * t461 + t930 * t996;
t401 = -t930 * t457 + t934 * t997;
t400 = t934 * t457 + t930 * t997;
t398 = -pkin(2) * t680 + qJ(3) * t557 + t450 * t932 + t460 * t928;
t390 = -t930 * t432 + t934 * t998;
t386 = -t930 * t428 + t934 * t999;
t385 = t934 * t428 + t930 * t999;
t384 = -t404 * t929 + t437 * t933;
t383 = t404 * t933 + t437 * t929;
t382 = t1000 * t934 - t930 * t425;
t381 = t1000 * t930 + t934 * t425;
t379 = -t401 * t929 + t427 * t933;
t378 = t401 * t933 + t427 * t929;
t377 = t940 * t459 - t937 * t488 + (-t455 * t930 - t456 * t934) * pkin(7);
t376 = t940 * t412 - t937 * t476 + (-t493 * t930 - t494 * t934) * pkin(7);
t375 = t940 * t410 - t937 * t473 + (-t485 * t930 - t486 * t934) * pkin(7);
t373 = -pkin(1) * t455 - t930 * t451 + t934 * t954;
t371 = t940 * t402 - t937 * t439 + (-t474 * t930 - t475 * t934) * pkin(7);
t370 = -t386 * t929 + t413 * t933;
t369 = t386 * t933 + t413 * t929;
t368 = -t382 * t929 + t409 * t933;
t367 = t382 * t933 + t409 * t929;
t364 = -pkin(1) * t493 - t930 * t406 + t934 * t955;
t363 = -pkin(1) * t485 - t930 * t405 + t934 * t956;
t361 = -pkin(2) * t508 + qJ(3) * t426 + t399 * t932 + t416 * t928;
t355 = -pkin(1) * t474 - t930 * t398 + t934 * t957;
t354 = -pkin(2) * t561 + qJ(3) * t462 + t389 * t932 + t395 * t928;
t352 = -pkin(2) * t551 + qJ(3) * t458 + t380 * t932 + t391 * t928;
t348 = -pkin(2) * t504 + qJ(3) * t429 + t360 * t932 + t365 * t928;
t347 = t940 * t356 - t937 * t397 + (-t403 * t930 - t404 * t934) * pkin(7);
t346 = t940 * t353 - t937 * t394 + (-t400 * t930 - t401 * t934) * pkin(7);
t345 = t940 * t366 - t937 * t396 + (-t381 * t930 - t382 * t934) * pkin(7);
t344 = t1001 * t934 - t930 * t357;
t343 = t1001 * t930 + t934 * t357;
t340 = -pkin(1) * t381 - t930 * t361 + t934 * t958;
t339 = -pkin(1) * t403 - t930 * t354 + t934 * t959;
t338 = -pkin(1) * t400 - t930 * t352 + t934 * t960;
t337 = -t344 * t929 + t351 * t933;
t336 = t344 * t933 + t351 * t929;
t335 = t940 * t350 - t937 * t359 + (-t385 * t930 - t386 * t934) * pkin(7);
t333 = -pkin(1) * t385 - t930 * t348 + t934 * t961;
t332 = -pkin(2) * t392 + qJ(3) * t358 + t341 * t932 + t349 * t928;
t331 = t940 * t334 - t937 * t342 + (-t343 * t930 - t344 * t934) * pkin(7);
t330 = -pkin(1) * t343 - t930 * t332 + t934 * t962;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, 0, 0, 0, 0, 0, 0, t849, t848, 0, t670, 0, 0, 0, 0, 0, 0, -t1086, t793, t786, t538, 0, 0, 0, 0, 0, 0, t554, t567, t544, t422, 0, 0, 0, 0, 0, 0, t445, t447, t441, t368, 0, 0, 0, 0, 0, 0, t379, t384, t370, t337; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t863, 0, 0, 0, 0, 0, 0, t847, -t973, 0, t669, 0, 0, 0, 0, 0, 0, t792, t791, t785, t537, 0, 0, 0, 0, 0, 0, t553, t566, t543, t421, 0, 0, 0, 0, 0, 0, t444, t446, t440, t367, 0, 0, 0, 0, 0, 0, t378, t383, t369, t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1036, 0, 0, 0, 0, 0, 0, t889, -t888, 0, t739, 0, 0, 0, 0, 0, 0, t854, t853, t837, t598, 0, 0, 0, 0, 0, 0, t606, t614, t604, t455, 0, 0, 0, 0, 0, 0, t485, t493, t474, t381, 0, 0, 0, 0, 0, 0, t400, t403, t385, t343; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1081, -t1080, -t863, -qJ(1) * t863, 0, 0, -t848, 0, t849, t929 * t1029, -qJ(1) * t847 - t742 * t929 + t788 * t933, qJ(1) * t973 - t741 * t929 + t789 * t933, -t755 * t929 + t767 * t933, -qJ(1) * t669 + t642 * t933 - t671 * t929, -t832 * t929 + t1049, -t818 * t929 + t859 * t933, t793, -t833 * t929 - t1049, t1086, 0, -qJ(1) * t792 - t626 * t929 + t667 * t933, -qJ(1) * t791 - t627 * t929 + t668 * t933, -qJ(1) * t785 - t591 * t929 + t639 * t933, -qJ(1) * t537 - t487 * t929 + t495 * t933, -t621 * t929 + t694 * t933, -t608 * t929 + t674 * t933, -t623 * t929 + t708 * t933, -t620 * t929 + t693 * t933, -t622 * t929 + t707 * t933, -t673 * t929 + t743 * t933, -qJ(1) * t553 - t435 * t929 + t452 * t933, -qJ(1) * t566 - t449 * t929 + t464 * t933, -qJ(1) * t543 - t411 * t929 + t431 * t933, -qJ(1) * t421 - t373 * t929 + t377 * t933, -t522 * t929 + t597 * t933, -t492 * t929 + t530 * t933, -t499 * t929 + t541 * t933, -t521 * t929 + t596 * t933, -t500 * t929 + t542 * t933, -t533 * t929 + t609 * t933, -qJ(1) * t444 - t363 * t929 + t375 * t933, -qJ(1) * t446 - t364 * t929 + t376 * t933, -qJ(1) * t440 - t355 * t929 + t371 * t933, -qJ(1) * t367 - t340 * t929 + t345 * t933, -t419 * t929 + t454 * t933, -t390 * t929 + t415 * t933, -t407 * t929 + t442 * t933, -t418 * t929 + t453 * t933, -t408 * t929 + t443 * t933, -t448 * t929 + t501 * t933, -qJ(1) * t378 - t338 * t929 + t346 * t933, -qJ(1) * t383 - t339 * t929 + t347 * t933, -qJ(1) * t369 - t333 * t929 + t335 * t933, -qJ(1) * t336 - t330 * t929 + t331 * t933; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1080, -t1081, t864, qJ(1) * t864, 0, 0, t973, 0, t847, -t933 * t1029, qJ(1) * t849 + t742 * t933 + t788 * t929, qJ(1) * t848 + t741 * t933 + t789 * t929, t755 * t933 + t767 * t929, qJ(1) * t670 + t642 * t929 + t671 * t933, t832 * t933 + t1050, t818 * t933 + t859 * t929, t791, t833 * t933 - t1050, -t792, 0, -qJ(1) * t1086 + t626 * t933 + t667 * t929, qJ(1) * t793 + t627 * t933 + t668 * t929, qJ(1) * t786 + t591 * t933 + t639 * t929, qJ(1) * t538 + t487 * t933 + t495 * t929, t621 * t933 + t694 * t929, t608 * t933 + t674 * t929, t623 * t933 + t708 * t929, t620 * t933 + t693 * t929, t622 * t933 + t707 * t929, t673 * t933 + t743 * t929, qJ(1) * t554 + t435 * t933 + t452 * t929, qJ(1) * t567 + t449 * t933 + t464 * t929, qJ(1) * t544 + t411 * t933 + t431 * t929, qJ(1) * t422 + t373 * t933 + t377 * t929, t522 * t933 + t597 * t929, t492 * t933 + t530 * t929, t499 * t933 + t541 * t929, t521 * t933 + t596 * t929, t500 * t933 + t542 * t929, t533 * t933 + t609 * t929, qJ(1) * t445 + t363 * t933 + t375 * t929, qJ(1) * t447 + t364 * t933 + t376 * t929, qJ(1) * t441 + t355 * t933 + t371 * t929, qJ(1) * t368 + t340 * t933 + t345 * t929, t419 * t933 + t454 * t929, t390 * t933 + t415 * t929, t407 * t933 + t442 * t929, t418 * t933 + t453 * t929, t408 * t933 + t443 * t929, t448 * t933 + t501 * t929, qJ(1) * t379 + t338 * t933 + t346 * t929, qJ(1) * t384 + t339 * t933 + t347 * t929, qJ(1) * t370 + t333 * t933 + t335 * t929, qJ(1) * t337 + t330 * t933 + t331 * t929; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1014, t906, 0, 0, 0, 0, t888, 0, t889, t934 * qJDD(2), pkin(1) * t891 + t1004 * t930 - t934 * t828, -pkin(1) * t890 + t1005 * t930 - t934 * t829, t768 * t930, pkin(1) * t740 + t1070 * t930, t1003 + (t921 * t934 + t1010) * qJDD(2), 0.2e1 * t1016 * t934 + t930 * t971, t853, -t1003 + (t922 * t934 - t1010) * qJDD(2), -t854, 0, pkin(1) * t1085 + t934 * t784 + t930 * t949, pkin(1) * t855 + t934 * t783 + t930 * t948, pkin(1) * t838 + t1006 * t930 + t934 * t678, pkin(1) * t599 + t934 * t665 + t930 * t946, t934 * t734 + t930 * t966, t934 * t700 + t930 * t977, t934 * t728 + t930 * t975, t934 * t733 + t930 * t967, t934 * t727 + t930 * t976, t934 * t753 + t930 * t969, pkin(1) * t607 + t934 * t555 + t930 * t952, pkin(1) * t615 + t934 * t578 + t930 * t951, pkin(1) * t605 + t934 * t480 + t930 * t953, pkin(1) * t456 + t934 * t451 + t930 * t954, t934 * t617 + t930 * t982, t934 * t568 + t930 * t986, t934 * t584 + t930 * t985, t934 * t616 + t930 * t983, t934 * t585 + t930 * t984, t934 * t628 + t930 * t981, pkin(1) * t486 + t934 * t405 + t930 * t956, pkin(1) * t494 + t934 * t406 + t930 * t955, pkin(1) * t475 + t934 * t398 + t930 * t957, pkin(1) * t382 + t934 * t361 + t930 * t958, t934 * t482 + t930 * t992, t934 * t432 + t930 * t998, t934 * t465 + t930 * t995, t934 * t481 + t930 * t993, t934 * t466 + t930 * t994, t934 * t519 + t930 * t990, pkin(1) * t401 + t934 * t352 + t930 * t960, pkin(1) * t404 + t934 * t354 + t930 * t959, pkin(1) * t386 + t934 * t348 + t930 * t961, pkin(1) * t344 + t934 * t332 + t930 * t962;];
tauB_reg  = t1;
