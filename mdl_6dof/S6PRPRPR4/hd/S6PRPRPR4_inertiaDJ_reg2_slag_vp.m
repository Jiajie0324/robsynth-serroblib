% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRPR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRPR4_inertiaDJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:41:17
% EndTime: 2019-03-08 19:41:24
% DurationCPUTime: 2.35s
% Computational Cost: add. (3213->232), mult. (8095->436), div. (0->0), fcn. (8521->12), ass. (0->136)
t86 = cos(pkin(12));
t76 = -t86 * pkin(5) - pkin(4);
t175 = 0.2e1 * t76;
t151 = pkin(8) + qJ(3);
t167 = cos(qJ(4));
t122 = t151 * t167;
t127 = t167 * qJD(3);
t89 = sin(qJ(4));
t139 = t89 * qJD(3);
t141 = qJD(4) * t89;
t87 = cos(pkin(11));
t69 = t151 * t87;
t84 = sin(pkin(11));
t95 = (-qJD(4) * t122 - t139) * t84 + t87 * t127 - t69 * t141;
t129 = qJD(4) * t167;
t59 = -t87 * t129 + t84 * t141;
t66 = t167 * t84 + t89 * t87;
t60 = t66 * qJD(4);
t134 = t167 * t87;
t64 = t89 * t84 - t134;
t112 = t59 * t64 - t66 * t60;
t174 = 0.2e1 * t112;
t173 = t86 * t95;
t145 = cos(pkin(6));
t85 = sin(pkin(6));
t90 = sin(qJ(2));
t156 = t85 * t90;
t108 = -t145 * t87 + t84 * t156;
t56 = t145 * t84 + t87 * t156;
t172 = t108 * t84 + t56 * t87;
t166 = cos(qJ(6));
t128 = qJD(6) * t166;
t88 = sin(qJ(6));
t140 = qJD(6) * t88;
t83 = sin(pkin(12));
t171 = t86 * t128 - t83 * t140;
t170 = t166 * t86 - t88 * t83;
t169 = -0.2e1 * t59;
t168 = 0.2e1 * t60;
t91 = cos(qJ(2));
t142 = qJD(2) * t91;
t135 = t85 * t142;
t38 = -t89 * t108 + t167 * t56;
t26 = t38 * qJD(4) + t66 * t135;
t100 = t167 * t108;
t37 = t89 * t56 + t100;
t11 = t37 * t26;
t132 = t89 * t151;
t35 = t69 * t129 + t87 * t139 + (-qJD(4) * t132 + t127) * t84;
t47 = t84 * t122 + t89 * t69;
t165 = t47 * t35;
t152 = t88 * t86;
t65 = t166 * t83 + t152;
t58 = t65 * qJD(6);
t163 = t170 * t58;
t162 = t65 * t171;
t161 = t85 ^ 2 * t90;
t49 = -t84 * t132 + t167 * t69;
t160 = t83 * t49;
t159 = t83 * t59;
t158 = t83 * t60;
t157 = t83 * t66;
t155 = t85 * t91;
t154 = t86 * t59;
t150 = pkin(9) + qJ(5);
t20 = t171 * t66 - t65 * t59;
t39 = t65 * t66;
t149 = -t171 * t39 - t65 * t20;
t77 = -t87 * pkin(3) - pkin(2);
t110 = t64 * pkin(4) + t77;
t105 = -t66 * qJ(5) + t110;
t24 = t83 * t105 + t86 * t49;
t78 = t83 ^ 2;
t81 = t86 ^ 2;
t147 = t78 + t81;
t146 = t84 ^ 2 + t87 ^ 2;
t144 = qJD(2) * t85;
t143 = qJD(2) * t90;
t43 = t64 * t168;
t138 = t66 * t169;
t137 = t83 * t154;
t70 = t85 * t143;
t131 = t150 * t83;
t130 = t146 * t91;
t126 = t166 * qJD(5);
t125 = 0.2e1 * t147 * qJD(5);
t124 = 0.2e1 * t146 * qJD(3);
t111 = t60 * pkin(4) - t66 * qJD(5);
t106 = t59 * qJ(5) + t111;
t94 = t95 * t83;
t13 = t106 * t86 - t94;
t14 = t106 * t83 + t173;
t121 = t13 * t86 + t14 * t83;
t120 = -t13 * t83 + t14 * t86;
t19 = t170 * t59 + t66 * t58;
t40 = t170 * t66;
t119 = t170 * t19 + t40 * t58;
t25 = qJD(4) * t100 - t134 * t135 + (qJD(4) * t56 + t84 * t135) * t89;
t21 = t83 * t25 + t86 * t70;
t22 = -t86 * t25 + t83 * t70;
t118 = t21 * t86 + t22 * t83;
t117 = -t21 * t83 + t22 * t86;
t116 = t26 * t47 + t37 * t35;
t115 = t26 * t66 - t37 * t59;
t114 = t35 * t66 - t47 * t59;
t113 = -t171 * t64 - t65 * t60;
t109 = t166 * t131;
t31 = -t86 * t155 - t83 * t38;
t32 = -t83 * t155 + t86 * t38;
t10 = t166 * t32 + t88 * t31;
t107 = pkin(4) * t59 - qJ(5) * t60 - qJD(5) * t64;
t102 = t150 * t59 + t111;
t98 = t64 * pkin(5) - t160 + (-t150 * t66 + t110) * t86;
t97 = t88 * t98;
t96 = t166 * t98;
t93 = t102 * t83 + t173;
t92 = t60 * pkin(5) + t102 * t86 - t94;
t68 = t150 * t86;
t54 = t86 * t60;
t48 = -t88 * t131 + t166 * t68;
t46 = -t88 * t68 - t109;
t36 = pkin(5) * t157 + t47;
t34 = -t68 * t128 - qJD(5) * t152 + (t150 * t140 - t126) * t83;
t33 = qJD(6) * t109 - t86 * t126 + (t83 * qJD(5) + qJD(6) * t68) * t88;
t28 = t170 * t60 - t58 * t64;
t27 = -pkin(5) * t159 + t35;
t23 = t105 * t86 - t160;
t16 = -pkin(9) * t157 + t24;
t9 = t166 * t31 - t88 * t32;
t6 = t166 * t16 + t97;
t5 = -t88 * t16 + t96;
t4 = -t10 * qJD(6) + t166 * t21 - t88 * t22;
t3 = -t31 * t128 + t32 * t140 - t166 * t22 - t88 * t21;
t2 = -qJD(6) * t97 - t16 * t128 + t166 * t92 - t88 * t93;
t1 = -qJD(6) * t96 + t16 * t140 - t166 * t93 - t88 * t92;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (t172 * t85 - t161) * t142, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t142 * t161 - 0.2e1 * t38 * t25 + 0.2e1 * t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t31 * t21 + 0.2e1 * t32 * t22 + 0.2e1 * t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t10 * t3 + 0.2e1 * t9 * t4 + 0.2e1 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t135, 0, 0, 0, 0, 0, 0, 0, 0, -t87 * t70, t84 * t70, t130 * t144, t172 * qJD(3) + (-pkin(2) * t90 + qJ(3) * t130) * t144, 0, 0, 0, 0, 0, 0 (t64 * t143 - t60 * t91) * t85 (t66 * t143 + t59 * t91) * t85, t25 * t64 - t38 * t60 + t115, -t25 * t49 + t38 * t95 + t77 * t70 + t116, 0, 0, 0, 0, 0, 0, t115 * t83 + t21 * t64 + t31 * t60, t115 * t86 - t22 * t64 - t32 * t60, -t118 * t66 + (t31 * t86 + t32 * t83) * t59, t31 * t13 + t32 * t14 + t21 * t23 + t22 * t24 + t116, 0, 0, 0, 0, 0, 0, t37 * t20 + t26 * t39 + t4 * t64 + t9 * t60, -t10 * t60 - t37 * t19 + t26 * t40 + t3 * t64, -t10 * t20 + t9 * t19 + t3 * t39 - t4 * t40, -t10 * t1 + t9 * t2 + t26 * t36 + t37 * t27 - t3 * t6 + t4 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, qJ(3) * t124, t138, t174, 0, t43, 0, 0, t77 * t168, t77 * t169, -0.2e1 * t49 * t60 - 0.2e1 * t95 * t64 + 0.2e1 * t114, 0.2e1 * t95 * t49 + 0.2e1 * t165, t81 * t138, 0.4e1 * t66 * t137, -0.2e1 * t112 * t86, t78 * t138, t83 * t174, t43, 0.2e1 * t114 * t83 + 0.2e1 * t13 * t64 + 0.2e1 * t23 * t60, 0.2e1 * t114 * t86 - 0.2e1 * t14 * t64 - 0.2e1 * t24 * t60, -0.2e1 * t121 * t66 + 0.2e1 * (t23 * t86 + t24 * t83) * t59, 0.2e1 * t23 * t13 + 0.2e1 * t24 * t14 + 0.2e1 * t165, -0.2e1 * t40 * t19, 0.2e1 * t19 * t39 - 0.2e1 * t40 * t20, -0.2e1 * t19 * t64 + 0.2e1 * t40 * t60, 0.2e1 * t39 * t20, -0.2e1 * t20 * t64 - 0.2e1 * t39 * t60, t43, 0.2e1 * t2 * t64 + 0.2e1 * t36 * t20 + 0.2e1 * t27 * t39 + 0.2e1 * t5 * t60, 0.2e1 * t1 * t64 - 0.2e1 * t36 * t19 + 0.2e1 * t27 * t40 - 0.2e1 * t6 * t60, 0.2e1 * t1 * t39 + 0.2e1 * t5 * t19 - 0.2e1 * t2 * t40 - 0.2e1 * t6 * t20, -0.2e1 * t6 * t1 + 0.2e1 * t5 * t2 + 0.2e1 * t36 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t171 + t170 * t4 - t3 * t65 - t9 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t158, t147 * t59, t121, 0, 0, 0, 0, 0, 0, t28, t113, t119 + t149, -t1 * t65 + t170 * t2 + t171 * t6 - t5 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t162 - 0.2e1 * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, t25, 0, 0, 0, 0, 0, 0, 0, 0, -t26 * t86, t26 * t83, t117, -t26 * pkin(4) + (-t31 * t83 + t32 * t86) * qJD(5) + t117 * qJ(5), 0, 0, 0, 0, 0, 0, -t170 * t26 + t37 * t58, t171 * t37 + t26 * t65, -t10 * t58 - t170 * t3 - t171 * t9 - t4 * t65, -t10 * t33 + t26 * t76 - t3 * t48 + t9 * t34 + t4 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, 0, -t60, 0, -t35, -t95, 0, 0, -t137 (t78 - t81) * t59, t158, t137, t54, 0, t107 * t83 - t35 * t86, t107 * t86 + t35 * t83, t120, -t35 * pkin(4) + (-t23 * t83 + t24 * t86) * qJD(5) + t120 * qJ(5), t171 * t40 - t19 * t65, -t119 + t149, -t113, -t170 * t20 + t39 * t58, t28, 0, -t170 * t27 + t76 * t20 + t34 * t64 + t36 * t58 + t46 * t60, t171 * t36 - t76 * t19 + t27 * t65 + t33 * t64 - t48 * t60, -t1 * t170 - t171 * t5 + t46 * t19 - t2 * t65 - t48 * t20 + t33 * t39 - t34 * t40 - t6 * t58, -t1 * t48 + t2 * t46 + t27 * t76 - t6 * t33 + t5 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170 * t34 + t171 * t48 - t65 * t33 - t58 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, qJ(5) * t125, 0.2e1 * t162, 0.2e1 * t170 * t171 - 0.2e1 * t65 * t58, 0, -0.2e1 * t163, 0, 0, t58 * t175, t171 * t175, -0.2e1 * t170 * t33 - 0.2e1 * t171 * t46 - 0.2e1 * t34 * t65 - 0.2e1 * t48 * t58, -0.2e1 * t48 * t33 + 0.2e1 * t46 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, -t154, 0, t35, 0, 0, 0, 0, 0, 0, t20, -t19, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t171, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t20, t60, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, -t171, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t171, 0, -t58, 0, t34, t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
