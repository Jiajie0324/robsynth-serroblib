% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPPRRR7_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR7_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR7_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR7_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR7_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR7_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:06:05
% EndTime: 2019-05-05 16:06:18
% DurationCPUTime: 5.71s
% Computational Cost: add. (29687->435), mult. (69057->623), div. (0->0), fcn. (52606->10), ass. (0->288)
t252 = cos(pkin(10));
t248 = t252 ^ 2;
t253 = sin(qJ(6));
t251 = sin(pkin(10));
t259 = cos(qJ(4));
t301 = qJD(1) * t259;
t255 = sin(qJ(4));
t302 = qJD(1) * t255;
t228 = -t251 * t301 - t252 * t302;
t229 = -t251 * t302 + t252 * t301;
t254 = sin(qJ(5));
t258 = cos(qJ(5));
t200 = t228 * t254 + t229 * t258;
t305 = t251 * t259;
t181 = (t252 * t255 + t305) * qJDD(1);
t299 = t229 * qJD(4);
t212 = -t181 - t299;
t294 = t252 * qJDD(1);
t295 = t251 * qJDD(1);
t227 = -t255 * t295 + t259 * t294;
t300 = qJD(4) * t228;
t214 = t227 + t300;
t284 = -t212 * t258 + t254 * t214;
t155 = -qJD(5) * t200 - t284;
t154 = qJDD(6) - t155;
t249 = qJD(4) + qJD(5);
t257 = cos(qJ(6));
t184 = t200 * t253 - t249 * t257;
t186 = t200 * t257 + t249 * t253;
t161 = t186 * t184;
t338 = t154 - t161;
t347 = t253 * t338;
t198 = -t228 * t258 + t229 * t254;
t174 = t200 * t198;
t246 = qJDD(4) + qJDD(5);
t337 = -t174 + t246;
t346 = t254 * t337;
t215 = t228 * t229;
t335 = qJDD(4) + t215;
t345 = t255 * t335;
t344 = t257 * t338;
t343 = t258 * t337;
t342 = t259 * t335;
t262 = qJD(1) ^ 2;
t256 = sin(qJ(1));
t260 = cos(qJ(1));
t287 = g(1) * t256 - g(2) * t260;
t280 = qJDD(2) - t287;
t274 = -qJ(2) * t262 + t280;
t325 = -qJ(3) - pkin(1);
t282 = -0.2e1 * qJD(1) * qJD(3) + qJDD(1) * t325 + t274;
t247 = t251 ^ 2;
t304 = t282 * t251;
t330 = pkin(3) * t262;
t272 = -pkin(7) * t295 - t247 * t330 + t304;
t268 = -g(3) * t305 + t255 * t272;
t265 = -t268 + (-t214 + t300) * pkin(8);
t341 = pkin(4) * t335 + t265;
t303 = t247 + t248;
t340 = pkin(3) * t295 - (pkin(7) * t303 - t325) * t262;
t171 = pkin(5) * t198 - pkin(9) * t200;
t331 = t249 ^ 2;
t271 = -pkin(7) * qJDD(1) - t251 * t330 + t282;
t326 = t255 * g(3);
t159 = t259 * t272 + t251 * t326 + (-t259 * g(3) + t255 * t271) * t252;
t225 = t228 ^ 2;
t279 = qJD(4) * pkin(4) - pkin(8) * t229;
t124 = -t225 * pkin(4) + t212 * pkin(8) - qJD(4) * t279 + t159;
t267 = (t259 * t271 + t326) * t252;
t266 = t258 * t124 + t254 * t267;
t77 = t254 * t341 + t266;
t69 = -pkin(5) * t331 + t246 * pkin(9) - t198 * t171 + t77;
t296 = qJD(2) * qJD(1);
t244 = 0.2e1 * t296;
t250 = qJDD(1) * qJ(2);
t281 = t260 * g(1) + t256 * g(2);
t276 = -t250 + t281;
t275 = -qJDD(3) + t276;
t334 = t212 * pkin(4) + t225 * pkin(8) - t229 * t279;
t156 = -qJD(5) * t198 + t212 * t254 + t214 * t258;
t191 = t249 * t198;
t336 = -t191 + t156;
t72 = t244 - t336 * pkin(9) + (t200 * t249 - t155) * pkin(5) - t275 - t334 + t340;
t37 = t253 * t69 - t257 * t72;
t38 = t253 * t72 + t257 * t69;
t21 = t253 * t37 + t257 * t38;
t339 = t303 * t262;
t195 = qJD(6) + t198;
t285 = t253 * t156 - t246 * t257;
t110 = (qJD(6) - t195) * t186 + t285;
t182 = t184 ^ 2;
t183 = t186 ^ 2;
t194 = t195 ^ 2;
t196 = t198 ^ 2;
t197 = t200 ^ 2;
t226 = t229 ^ 2;
t329 = pkin(5) * t254;
t76 = t124 * t254 - t258 * (t267 + t341);
t68 = -pkin(5) * t246 - pkin(9) * t331 + t171 * t200 + t76;
t324 = -pkin(5) * t68 + pkin(9) * t21;
t65 = t253 * t68;
t42 = t254 * t77 - t258 * t76;
t323 = t255 * t42;
t66 = t257 * t68;
t322 = t259 * t42;
t321 = qJDD(1) * pkin(1);
t117 = t154 + t161;
t320 = t117 * t253;
t319 = t117 * t257;
t158 = t268 - t267;
t119 = -t158 * t259 + t159 * t255;
t318 = t119 * t252;
t270 = t275 - 0.2e1 * t296;
t192 = t270 - t340;
t151 = t192 + t334;
t317 = t151 * t254;
t316 = t151 * t258;
t169 = t174 + t246;
t315 = t169 * t254;
t314 = t169 * t258;
t313 = t192 * t255;
t312 = t192 * t259;
t311 = t195 * t253;
t310 = t195 * t257;
t209 = qJDD(4) - t215;
t309 = t209 * t255;
t308 = t209 * t259;
t307 = t249 * t254;
t306 = t249 * t258;
t297 = qJD(6) + t195;
t278 = -t257 * t156 - t253 * t246;
t115 = t184 * t297 + t278;
t150 = -t183 - t194;
t87 = -t150 * t253 - t319;
t293 = pkin(5) * t115 + pkin(9) * t87 + t65;
t111 = -t186 * t297 - t285;
t143 = -t194 - t182;
t84 = t143 * t257 - t347;
t292 = pkin(5) * t111 + pkin(9) * t84 - t66;
t290 = t254 * t161;
t289 = t258 * t161;
t288 = -pkin(5) * t258 - pkin(4);
t43 = t254 * t76 + t258 * t77;
t142 = t182 + t183;
t126 = -qJD(6) * t184 - t278;
t166 = t195 * t184;
t114 = t126 + t166;
t64 = -t110 * t257 + t114 * t253;
t286 = pkin(5) * t142 + pkin(9) * t64 + t21;
t120 = t158 * t255 + t159 * t259;
t217 = -t262 * t325 + t270;
t283 = -t217 + t250;
t20 = t253 * t38 - t257 * t37;
t173 = t248 * t282 + t251 * t304;
t273 = (-qJD(5) + t249) * t200 - t284;
t261 = qJD(4) ^ 2;
t232 = t303 * qJDD(1);
t231 = t251 * t339;
t230 = t252 * t339;
t224 = -t274 + t321;
t221 = -t226 - t261;
t220 = -t226 + t261;
t219 = t225 - t261;
t213 = t227 + 0.2e1 * t300;
t211 = 0.2e1 * t299 + t181;
t207 = -t261 - t225;
t190 = -t197 + t331;
t189 = t196 - t331;
t188 = -t197 - t331;
t187 = -t225 - t226;
t180 = -t221 * t255 - t308;
t179 = t221 * t259 - t309;
t178 = -t181 * t259 + t227 * t255;
t177 = -t181 * t255 - t227 * t259;
t176 = t207 * t259 - t345;
t175 = t207 * t255 + t342;
t172 = t197 - t196;
t167 = -t331 - t196;
t165 = -t183 + t194;
t164 = t182 - t194;
t163 = (-t198 * t258 + t200 * t254) * t249;
t162 = (-t198 * t254 - t200 * t258) * t249;
t160 = t183 - t182;
t153 = -t196 - t197;
t152 = t179 * t252 + t180 * t251;
t149 = t189 * t258 - t315;
t148 = -t190 * t254 + t343;
t147 = t189 * t254 + t314;
t146 = t190 * t258 + t346;
t145 = -t188 * t254 - t314;
t144 = t188 * t258 - t315;
t140 = t177 * t252 + t178 * t251;
t139 = t191 + t156;
t134 = (qJD(5) + t249) * t200 + t284;
t133 = t175 * t252 + t176 * t251;
t132 = t156 * t258 - t200 * t307;
t131 = t156 * t254 + t200 * t306;
t130 = -t155 * t254 + t198 * t306;
t129 = t155 * t258 + t198 * t307;
t128 = t167 * t258 - t346;
t127 = t167 * t254 + t343;
t125 = -qJD(6) * t186 - t285;
t123 = (-t184 * t257 + t186 * t253) * t195;
t122 = (-t184 * t253 - t186 * t257) * t195;
t113 = t126 - t166;
t107 = -pkin(8) * t144 - t316;
t106 = t126 * t257 - t186 * t311;
t105 = t126 * t253 + t186 * t310;
t104 = -t125 * t253 + t184 * t310;
t103 = t125 * t257 + t184 * t311;
t102 = -t144 * t255 + t145 * t259;
t101 = t144 * t259 + t145 * t255;
t100 = -pkin(8) * t127 - t317;
t99 = t123 * t258 + t154 * t254;
t98 = t123 * t254 - t154 * t258;
t97 = t164 * t257 - t320;
t96 = -t165 * t253 + t344;
t95 = t164 * t253 + t319;
t94 = t165 * t257 + t347;
t93 = t139 * t254 + t258 * t273;
t92 = -t134 * t258 - t254 * t336;
t91 = -t139 * t258 + t254 * t273;
t90 = -t134 * t254 + t258 * t336;
t89 = -t127 * t255 + t128 * t259;
t88 = t127 * t259 + t128 * t255;
t86 = t150 * t257 - t320;
t83 = t143 * t253 + t344;
t81 = t106 * t258 + t290;
t80 = t104 * t258 - t290;
t79 = t106 * t254 - t289;
t78 = t104 * t254 + t289;
t74 = -pkin(4) * t336 + pkin(8) * t145 - t317;
t73 = t120 * t251 + t318;
t70 = -pkin(4) * t134 + pkin(8) * t128 + t316;
t63 = t111 * t257 - t113 * t253;
t62 = -t110 * t253 - t114 * t257;
t61 = t111 * t253 + t113 * t257;
t59 = t101 * t252 + t102 * t251;
t58 = -t110 * t254 + t258 * t97;
t57 = t114 * t254 + t258 * t96;
t56 = t110 * t258 + t254 * t97;
t55 = -t114 * t258 + t254 * t96;
t54 = -t115 * t254 + t258 * t87;
t53 = t115 * t258 + t254 * t87;
t52 = -t111 * t254 + t258 * t84;
t51 = t111 * t258 + t254 * t84;
t50 = t160 * t254 + t258 * t63;
t49 = -t160 * t258 + t254 * t63;
t48 = -t255 * t91 + t259 * t93;
t47 = t255 * t93 + t259 * t91;
t46 = -t142 * t254 + t258 * t64;
t45 = t142 * t258 + t254 * t64;
t44 = t251 * t89 + t252 * t88;
t41 = -pkin(9) * t86 + t66;
t40 = -pkin(9) * t83 + t65;
t39 = pkin(4) * t151 + pkin(8) * t43;
t34 = -pkin(8) * t91 - t42;
t33 = -pkin(4) * t153 + pkin(8) * t93 + t43;
t32 = -t255 * t53 + t259 * t54;
t31 = t255 * t54 + t259 * t53;
t30 = -t255 * t51 + t259 * t52;
t29 = t255 * t52 + t259 * t51;
t28 = t251 * t48 + t252 * t47;
t27 = -pkin(5) * t86 + t38;
t26 = -pkin(5) * t83 + t37;
t25 = -t255 * t45 + t259 * t46;
t24 = t255 * t46 + t259 * t45;
t23 = t259 * t43 - t323;
t22 = t255 * t43 + t322;
t18 = t21 * t258 + t254 * t68;
t17 = t21 * t254 - t258 * t68;
t16 = -pkin(9) * t62 - t20;
t15 = t251 * t32 + t252 * t31;
t14 = t251 * t30 + t252 * t29;
t13 = t24 * t252 + t25 * t251;
t12 = -pkin(8) * t53 - t254 * t27 + t258 * t41;
t11 = -pkin(8) * t51 - t254 * t26 + t258 * t40;
t10 = t22 * t252 + t23 * t251;
t9 = -pkin(4) * t86 + pkin(8) * t54 + t254 * t41 + t258 * t27;
t8 = -pkin(4) * t83 + pkin(8) * t52 + t254 * t40 + t258 * t26;
t7 = -pkin(8) * t45 + t16 * t258 + t329 * t62;
t6 = pkin(8) * t46 + t254 * t16 + t288 * t62;
t5 = -t17 * t255 + t18 * t259;
t4 = t17 * t259 + t18 * t255;
t3 = -pkin(8) * t17 + (-pkin(9) * t258 + t329) * t20;
t2 = pkin(8) * t18 + (-pkin(9) * t254 + t288) * t20;
t1 = t251 * t5 + t252 * t4;
t19 = [0, 0, 0, 0, 0, qJDD(1), t287, t281, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t280 - 0.2e1 * t321, t244 + 0.2e1 * t250 - t281, pkin(1) * t224 + qJ(2) * (-t262 * pkin(1) + t244 - t276), t248 * qJDD(1), -0.2e1 * t251 * t294, 0, t247 * qJDD(1), 0, 0, -t231 * t325 + t251 * t283, -t230 * t325 + t252 * t283, -qJ(2) * t339 - t232 * t325 - t173, -qJ(2) * t217 + t173 * t325, t252 * (t214 * t259 - t255 * t299) - t251 * (t214 * t255 + t259 * t299), t252 * (-t211 * t259 - t213 * t255) - t251 * (-t211 * t255 + t213 * t259), t252 * (-t220 * t255 + t342) - t251 * (t220 * t259 + t345), t252 * (-t212 * t255 - t259 * t300) - t251 * (t212 * t259 - t255 * t300), t252 * (t219 * t259 - t309) - t251 * (t219 * t255 + t308), (t252 * (t228 * t259 + t229 * t255) - t251 * (t228 * t255 - t229 * t259)) * qJD(4), t252 * (-pkin(7) * t175 - t313) - t251 * (-pkin(3) * t211 + pkin(7) * t176 + t312) + qJ(2) * t211 + t325 * t133, t252 * (-pkin(7) * t179 - t312) - t251 * (-pkin(3) * t213 + pkin(7) * t180 - t313) + qJ(2) * t213 + t325 * t152, t252 * (-pkin(7) * t177 - t119) - t251 * (-pkin(3) * t187 + pkin(7) * t178 + t120) + qJ(2) * t187 + t325 * t140, -pkin(7) * t318 - t251 * (pkin(3) * t192 + pkin(7) * t120) - qJ(2) * t192 + t325 * t73, t252 * (-t131 * t255 + t132 * t259) - t251 * (t131 * t259 + t132 * t255), t252 * (-t255 * t90 + t259 * t92) - t251 * (t255 * t92 + t259 * t90), t252 * (-t146 * t255 + t148 * t259) - t251 * (t146 * t259 + t148 * t255), t252 * (-t129 * t255 + t130 * t259) - t251 * (t129 * t259 + t130 * t255), t252 * (-t147 * t255 + t149 * t259) - t251 * (t147 * t259 + t149 * t255), t252 * (-t162 * t255 + t163 * t259) - t251 * (t162 * t259 + t163 * t255), t252 * (-pkin(7) * t88 + t100 * t259 - t255 * t70) - t251 * (-pkin(3) * t134 + pkin(7) * t89 + t100 * t255 + t259 * t70) + qJ(2) * t134 + t325 * t44, t252 * (-pkin(7) * t101 + t107 * t259 - t255 * t74) - t251 * (-pkin(3) * t336 + pkin(7) * t102 + t107 * t255 + t259 * t74) + qJ(2) * t336 + t325 * t59, t252 * (-pkin(7) * t47 - t255 * t33 + t259 * t34) - t251 * (-pkin(3) * t153 + pkin(7) * t48 + t255 * t34 + t259 * t33) + qJ(2) * t153 + t325 * t28, t252 * (-pkin(7) * t22 - pkin(8) * t322 - t255 * t39) - t251 * (pkin(3) * t151 + pkin(7) * t23 - pkin(8) * t323 + t259 * t39) - qJ(2) * t151 + t325 * t10, t252 * (-t255 * t79 + t259 * t81) - t251 * (t255 * t81 + t259 * t79), t252 * (-t255 * t49 + t259 * t50) - t251 * (t255 * t50 + t259 * t49), t252 * (-t255 * t55 + t259 * t57) - t251 * (t255 * t57 + t259 * t55), t252 * (-t255 * t78 + t259 * t80) - t251 * (t255 * t80 + t259 * t78), t252 * (-t255 * t56 + t259 * t58) - t251 * (t255 * t58 + t259 * t56), t252 * (-t255 * t98 + t259 * t99) - t251 * (t255 * t99 + t259 * t98), t252 * (-pkin(7) * t29 + t11 * t259 - t255 * t8) - t251 * (-pkin(3) * t83 + pkin(7) * t30 + t11 * t255 + t259 * t8) + qJ(2) * t83 + t325 * t14, t252 * (-pkin(7) * t31 + t12 * t259 - t255 * t9) - t251 * (-pkin(3) * t86 + pkin(7) * t32 + t12 * t255 + t259 * t9) + qJ(2) * t86 + t325 * t15, t252 * (-pkin(7) * t24 - t255 * t6 + t259 * t7) - t251 * (-pkin(3) * t62 + pkin(7) * t25 + t255 * t7 + t259 * t6) + qJ(2) * t62 + t325 * t13, t252 * (-pkin(7) * t4 - t2 * t255 + t259 * t3) - t251 * (-pkin(3) * t20 + pkin(7) * t5 + t2 * t259 + t255 * t3) + qJ(2) * t20 + t325 * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t262, -t224, 0, 0, 0, 0, 0, 0, -t231, -t230, -t232, t173, 0, 0, 0, 0, 0, 0, t133, t152, t140, t73, 0, 0, 0, 0, 0, 0, t44, t59, t28, t10, 0, 0, 0, 0, 0, 0, t14, t15, t13, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t295, t294, -t339, -t217, 0, 0, 0, 0, 0, 0, t211, t213, t187, -t192, 0, 0, 0, 0, 0, 0, t134, t336, t153, -t151, 0, 0, 0, 0, 0, 0, t83, t86, t62, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, t226 - t225, t227, t215, -t181, qJDD(4), -t158, -t159, 0, 0, t174, t172, t139, -t174, t273, t246, pkin(4) * t127 - t76, -t254 * t265 + (-t254 * t335 + t144) * pkin(4) - t266, pkin(4) * t91, pkin(4) * t42, t105, t61, t94, t103, t95, t122, pkin(4) * t51 + t292, pkin(4) * t53 + t293, pkin(4) * t45 + t286, pkin(4) * t17 + t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174, t172, t139, -t174, t273, t246, -t76, -t77, 0, 0, t105, t61, t94, t103, t95, t122, t292, t293, t286, t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, t160, t114, -t161, -t110, t154, -t37, -t38, 0, 0;];
tauJ_reg  = t19;
