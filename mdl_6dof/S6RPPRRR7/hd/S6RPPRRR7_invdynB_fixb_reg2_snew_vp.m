% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:06:18
% EndTime: 2019-05-05 16:06:38
% DurationCPUTime: 17.64s
% Computational Cost: add. (104122->691), mult. (241754->1039), div. (0->0), fcn. (184214->10), ass. (0->458)
t782 = qJD(1) ^ 2;
t776 = sin(qJ(1));
t780 = cos(qJ(1));
t749 = g(1) * t776 - t780 * g(2);
t797 = qJDD(2) - t749;
t789 = -qJ(2) * t782 + t797;
t851 = -qJ(3) - pkin(1);
t800 = -(2 * qJD(1) * qJD(3)) + qJDD(1) * t851 + t789;
t773 = sin(qJ(6));
t771 = sin(pkin(10));
t772 = cos(pkin(10));
t779 = cos(qJ(4));
t823 = qJD(1) * t779;
t775 = sin(qJ(4));
t824 = qJD(1) * t775;
t738 = -t771 * t823 - t772 * t824;
t739 = -t771 * t824 + t772 * t823;
t774 = sin(qJ(5));
t778 = cos(qJ(5));
t692 = t738 * t774 + t739 * t778;
t769 = qJD(4) + qJD(5);
t777 = cos(qJ(6));
t672 = t692 * t773 - t777 * t769;
t674 = t692 * t777 + t769 * t773;
t630 = t674 * t672;
t790 = (t771 * t779 + t772 * t775) * qJDD(1);
t821 = t739 * qJD(4);
t702 = -t790 - t821;
t815 = qJDD(1) * t772;
t816 = qJDD(1) * t771;
t737 = -t775 * t816 + t779 * t815;
t822 = qJD(4) * t738;
t704 = t737 + t822;
t802 = -t778 * t702 + t704 * t774;
t621 = -qJD(5) * t692 - t802;
t788 = qJDD(6) - t621;
t863 = -t630 + t788;
t871 = t773 * t863;
t690 = -t778 * t738 + t739 * t774;
t646 = t692 * t690;
t766 = qJDD(4) + qJDD(5);
t862 = -t646 + t766;
t870 = t774 * t862;
t708 = t738 * t739;
t861 = qJDD(4) + t708;
t869 = t775 * t861;
t868 = t777 * t863;
t867 = t778 * t862;
t866 = t779 * t861;
t767 = t771 ^ 2;
t768 = t772 ^ 2;
t825 = t767 + t768;
t865 = pkin(3) * t816 - (pkin(7) * t825 - t851) * t782;
t864 = t825 * t782;
t794 = t702 * t774 + t704 * t778;
t622 = -qJD(5) * t690 + t794;
t680 = t769 * t690;
t594 = t622 - t680;
t578 = -t672 * qJD(6) + t777 * t622 + t773 * t766;
t687 = qJD(6) + t690;
t637 = t687 * t672;
t555 = -t637 + t578;
t696 = -g(3) * t772 + t771 * t800;
t734 = t738 ^ 2;
t796 = qJD(4) * pkin(4) - pkin(8) * t739;
t860 = pkin(4) * t702 + pkin(8) * t734 - t739 * t796;
t803 = t622 * t773 - t777 * t766;
t552 = (qJD(6) - t687) * t674 + t803;
t670 = t672 ^ 2;
t671 = t674 ^ 2;
t686 = t687 ^ 2;
t688 = t690 ^ 2;
t689 = t692 ^ 2;
t735 = t739 ^ 2;
t857 = t769 ^ 2;
t856 = pkin(3) * t782;
t854 = pkin(5) * t774;
t852 = g(3) * t771;
t850 = qJDD(1) * pkin(1);
t669 = t852 + (-pkin(7) * qJDD(1) - t771 * t856 + t800) * t772;
t677 = -pkin(7) * t816 - t767 * t856 + t696;
t628 = t775 * t669 + t779 * t677;
t576 = -t734 * pkin(4) + t702 * pkin(8) - qJD(4) * t796 + t628;
t795 = t669 * t779 - t677 * t775;
t785 = (-t704 + t822) * pkin(8) + t861 * pkin(4) + t795;
t512 = t576 * t774 - t778 * t785;
t513 = t778 * t576 + t774 * t785;
t455 = -t512 * t778 + t513 * t774;
t849 = t455 * t775;
t848 = t455 * t779;
t642 = pkin(5) * t690 - pkin(9) * t692;
t496 = -t766 * pkin(5) - pkin(9) * t857 + t642 * t692 + t512;
t847 = t496 * t773;
t846 = t496 * t777;
t560 = t630 + t788;
t845 = t560 * t773;
t844 = t560 * t777;
t562 = t628 * t775 + t779 * t795;
t843 = t562 * t771;
t842 = t562 * t772;
t750 = g(1) * t780 + g(2) * t776;
t770 = qJDD(1) * qJ(2);
t792 = t750 - t770;
t791 = -qJDD(3) + t792;
t817 = qJD(2) * qJD(1);
t786 = t791 - (2 * t817);
t685 = t786 - t865;
t610 = t685 + t860;
t841 = t610 * t774;
t840 = t610 * t778;
t640 = t646 + t766;
t839 = t640 * t774;
t838 = t640 * t778;
t837 = t685 * t775;
t836 = t685 * t779;
t835 = t687 * t773;
t834 = t687 * t777;
t699 = qJDD(4) - t708;
t833 = t699 * t775;
t832 = t699 * t779;
t743 = t825 * qJDD(1);
t831 = t743 * t776;
t830 = t743 * t780;
t829 = t769 * t774;
t828 = t769 * t778;
t827 = t771 * t772;
t497 = -pkin(5) * t857 + pkin(9) * t766 - t642 * t690 + t513;
t764 = 2 * t817;
t504 = t764 - t594 * pkin(9) + (t692 * t769 - t621) * pkin(5) - t791 - t860 + t865;
t449 = t777 * t497 + t773 * t504;
t826 = t767 - t768;
t820 = qJD(5) + t769;
t814 = qJDD(1) * t776;
t813 = qJDD(1) * t780;
t812 = t774 * t630;
t811 = t778 * t630;
t810 = t776 * t646;
t809 = t780 * t646;
t808 = t776 * t708;
t807 = t780 * t708;
t806 = -pkin(5) * t778 - pkin(4);
t448 = t497 * t773 - t777 * t504;
t412 = t448 * t773 + t777 * t449;
t456 = t512 * t774 + t778 * t513;
t563 = t779 * t628 - t775 * t795;
t727 = -pkin(1) * t782 + t764 - t792;
t729 = -t789 + t850;
t682 = t780 * t727 - t729 * t776;
t716 = -t749 * t776 - t780 * t750;
t718 = -t782 * t851 + t786;
t801 = -t718 + t770;
t747 = -t776 * t782 + t813;
t799 = pkin(6) * t747 + g(3) * t776;
t748 = t780 * t782 + t814;
t798 = -pkin(6) * t748 + g(3) * t780;
t411 = -t448 * t777 + t449 * t773;
t695 = t772 * t800 + t852;
t644 = t695 * t772 + t696 * t771;
t645 = -t695 * t771 + t696 * t772;
t681 = t727 * t776 + t729 * t780;
t715 = t749 * t780 - t750 * t776;
t741 = t771 * t864;
t713 = -t741 * t776 + t771 * t813;
t711 = t741 * t780 + t771 * t814;
t787 = (-qJD(5) + t769) * t692 - t802;
t781 = qJD(4) ^ 2;
t746 = t826 * t782;
t744 = t826 * qJDD(1);
t740 = t772 * t864;
t725 = -t735 - t781;
t724 = -t735 + t781;
t723 = t734 - t781;
t721 = t748 * t827;
t720 = t747 * t827;
t714 = -t740 * t776 + t772 * t813;
t712 = t740 * t780 + t772 * t814;
t710 = -t780 * t864 - t831;
t709 = -t776 * t864 + t830;
t707 = t735 - t734;
t706 = pkin(2) * t816 - t718 * t772;
t705 = pkin(2) * t815 + t718 * t771;
t703 = t737 + 0.2e1 * t822;
t701 = 0.2e1 * t821 + t790;
t697 = -t781 - t734;
t684 = (t738 * t779 + t739 * t775) * qJD(4);
t683 = (t738 * t775 - t739 * t779) * qJD(4);
t679 = -t689 + t857;
t678 = t688 - t857;
t676 = -t689 - t857;
t675 = -t734 - t735;
t667 = -pkin(2) * t741 + t695;
t666 = -pkin(2) * t740 - t696;
t662 = t704 * t779 - t775 * t821;
t661 = t704 * t775 + t779 * t821;
t660 = -t702 * t775 - t779 * t822;
t659 = t702 * t779 - t775 * t822;
t658 = -t725 * t775 - t832;
t657 = -t724 * t775 + t866;
t656 = t723 * t779 - t833;
t655 = t725 * t779 - t833;
t654 = t724 * t779 + t869;
t653 = t723 * t775 + t832;
t652 = -t701 * t779 - t703 * t775;
t651 = t737 * t775 - t779 * t790;
t650 = -t701 * t775 + t703 * t779;
t649 = -t737 * t779 - t775 * t790;
t648 = t697 * t779 - t869;
t647 = t697 * t775 + t866;
t643 = t689 - t688;
t638 = -t857 - t688;
t636 = -pkin(2) * t864 - t645;
t635 = -t683 * t772 - t684 * t771;
t634 = -t671 + t686;
t633 = t670 - t686;
t632 = (-t690 * t778 + t692 * t774) * t769;
t631 = (-t690 * t774 - t692 * t778) * t769;
t629 = -t671 + t670;
t626 = -pkin(7) * t655 - t836;
t624 = t644 * t776 - t718 * t780;
t623 = -t644 * t780 - t718 * t776;
t619 = -t688 - t689;
t617 = -pkin(7) * t647 - t837;
t616 = -t661 * t772 - t662 * t771;
t615 = -t659 * t772 - t660 * t771;
t614 = -t655 * t771 + t658 * t772;
t613 = t655 * t772 + t658 * t771;
t612 = -t654 * t772 - t657 * t771;
t611 = -t653 * t772 - t656 * t771;
t609 = -t671 - t686;
t608 = t678 * t778 - t839;
t607 = -t679 * t774 + t867;
t606 = t678 * t774 + t838;
t605 = t679 * t778 + t870;
t604 = -t676 * t774 - t838;
t603 = t676 * t778 - t839;
t602 = -t686 - t670;
t601 = -pkin(3) * t703 + pkin(7) * t658 - t837;
t600 = t670 + t671;
t599 = -t649 * t771 + t651 * t772;
t598 = -t650 * t772 - t652 * t771;
t597 = t649 * t772 + t651 * t771;
t596 = -pkin(3) * t701 + pkin(7) * t648 + t836;
t595 = t622 + t680;
t593 = -t690 * t820 + t794;
t590 = t692 * t820 + t802;
t589 = pkin(2) * t644 - qJ(2) * t645;
t588 = -t647 * t771 + t648 * t772;
t587 = t647 * t772 + t648 * t771;
t586 = t622 * t778 - t692 * t829;
t585 = t622 * t774 + t692 * t828;
t584 = -t621 * t774 + t690 * t828;
t583 = t621 * t778 + t690 * t829;
t582 = t613 * t776 + t703 * t780;
t581 = -t613 * t780 + t703 * t776;
t580 = t638 * t778 - t870;
t579 = t638 * t774 + t867;
t577 = -qJD(6) * t674 - t803;
t574 = (-t672 * t777 + t674 * t773) * t687;
t573 = (-t672 * t773 - t674 * t777) * t687;
t572 = -pkin(2) * t718 + t645 * t851;
t571 = -t631 * t775 + t632 * t779;
t570 = t631 * t779 + t632 * t775;
t567 = t587 * t776 + t701 * t780;
t566 = -t587 * t780 + t701 * t776;
t565 = t597 * t776 + t675 * t780;
t564 = -t597 * t780 + t675 * t776;
t558 = pkin(3) * t685 + pkin(7) * t563;
t556 = -t637 - t578;
t553 = (-qJD(6) - t687) * t674 - t803;
t551 = -pkin(8) * t603 - t840;
t550 = -t606 * t775 + t608 * t779;
t549 = -t605 * t775 + t607 * t779;
t548 = t606 * t779 + t608 * t775;
t547 = t605 * t779 + t607 * t775;
t546 = t578 * t777 - t674 * t835;
t545 = t578 * t773 + t674 * t834;
t544 = -t577 * t773 + t672 * t834;
t543 = t577 * t777 + t672 * t835;
t542 = -t603 * t775 + t604 * t779;
t541 = t603 * t779 + t604 * t775;
t540 = -pkin(7) * t649 - t562;
t539 = -pkin(8) * t579 - t841;
t538 = t574 * t778 + t774 * t788;
t537 = t574 * t774 - t778 * t788;
t536 = t633 * t777 - t845;
t535 = -t634 * t773 + t868;
t534 = t633 * t773 + t844;
t533 = t634 * t777 + t871;
t532 = t595 * t774 + t778 * t787;
t531 = -t590 * t778 - t594 * t774;
t530 = -t595 * t778 + t774 * t787;
t529 = -t590 * t774 + t594 * t778;
t528 = -t585 * t775 + t586 * t779;
t527 = -t583 * t775 + t584 * t779;
t526 = t585 * t779 + t586 * t775;
t525 = t583 * t779 + t584 * t775;
t524 = -pkin(3) * t675 + pkin(7) * t651 + t563;
t523 = -t579 * t775 + t580 * t779;
t522 = t579 * t779 + t580 * t775;
t521 = -t609 * t773 - t844;
t520 = t609 * t777 - t845;
t519 = t602 * t777 - t871;
t518 = t602 * t773 + t868;
t517 = t546 * t778 + t812;
t516 = t544 * t778 - t812;
t515 = t546 * t774 - t811;
t514 = t544 * t774 + t811;
t510 = -t570 * t772 - t571 * t771;
t509 = pkin(2) * t597 + pkin(3) * t649 - qJ(2) * t599;
t508 = pkin(2) * t613 + pkin(3) * t655 - qJ(2) * t614 - t628;
t507 = -pkin(4) * t593 + pkin(8) * t604 - t841;
t506 = t563 * t772 - t843;
t505 = t563 * t771 + t842;
t501 = -pkin(4) * t590 + pkin(8) * t580 + t840;
t500 = t505 * t776 - t685 * t780;
t499 = -t505 * t780 - t685 * t776;
t498 = pkin(2) * t587 + pkin(3) * t647 - qJ(2) * t588 + t795;
t494 = -t552 * t777 - t556 * t773;
t493 = t553 * t777 - t555 * t773;
t492 = -t552 * t773 + t556 * t777;
t491 = t553 * t773 + t555 * t777;
t490 = -t548 * t772 - t550 * t771;
t489 = -t547 * t772 - t549 * t771;
t488 = pkin(2) * t703 - t601 * t772 + t614 * t851 - t626 * t771;
t487 = -t541 * t771 + t542 * t772;
t486 = t541 * t772 + t542 * t771;
t485 = t536 * t778 - t552 * t774;
t484 = t535 * t778 - t556 * t774;
t483 = t536 * t774 + t552 * t778;
t482 = t535 * t774 + t556 * t778;
t481 = -t537 * t775 + t538 * t779;
t480 = t537 * t779 + t538 * t775;
t479 = t521 * t778 + t555 * t774;
t478 = t521 * t774 - t555 * t778;
t477 = t519 * t778 - t553 * t774;
t476 = t519 * t774 + t553 * t778;
t475 = pkin(2) * t701 + t588 * t851 - t596 * t772 - t617 * t771;
t474 = t493 * t778 - t629 * t774;
t473 = t493 * t774 + t629 * t778;
t472 = -t530 * t775 + t532 * t779;
t471 = -t529 * t775 + t531 * t779;
t470 = t530 * t779 + t532 * t775;
t469 = t529 * t779 + t531 * t775;
t468 = -t526 * t772 - t528 * t771;
t467 = -t525 * t772 - t527 * t771;
t466 = t494 * t778 - t600 * t774;
t465 = t494 * t774 + t600 * t778;
t464 = -t522 * t771 + t523 * t772;
t463 = t522 * t772 + t523 * t771;
t462 = t486 * t776 + t593 * t780;
t461 = -t486 * t780 + t593 * t776;
t460 = -t515 * t775 + t517 * t779;
t459 = -t514 * t775 + t516 * t779;
t458 = t515 * t779 + t517 * t775;
t457 = t514 * t779 + t516 * t775;
t454 = -pkin(9) * t520 + t846;
t453 = t463 * t776 + t590 * t780;
t452 = -t463 * t780 + t590 * t776;
t451 = -pkin(9) * t518 + t847;
t450 = pkin(4) * t610 + pkin(8) * t456;
t446 = -pkin(7) * t541 - t507 * t775 + t551 * t779;
t445 = pkin(2) * t675 - t524 * t772 - t540 * t771 + t599 * t851;
t444 = -pkin(8) * t530 - t455;
t443 = pkin(2) * t505 + pkin(3) * t562 - qJ(2) * t506;
t442 = -pkin(7) * t522 - t501 * t775 + t539 * t779;
t441 = -pkin(3) * t593 + pkin(7) * t542 + t507 * t779 + t551 * t775;
t440 = -t483 * t775 + t485 * t779;
t439 = -t482 * t775 + t484 * t779;
t438 = t483 * t779 + t485 * t775;
t437 = t482 * t779 + t484 * t775;
t436 = -pkin(4) * t619 + pkin(8) * t532 + t456;
t435 = -t480 * t772 - t481 * t771;
t434 = -t478 * t775 + t479 * t779;
t433 = t478 * t779 + t479 * t775;
t432 = -t476 * t775 + t477 * t779;
t431 = t476 * t779 + t477 * t775;
t430 = -pkin(3) * t590 + pkin(7) * t523 + t501 * t779 + t539 * t775;
t429 = -t473 * t775 + t474 * t779;
t428 = t473 * t779 + t474 * t775;
t427 = -t470 * t771 + t472 * t772;
t426 = t470 * t772 + t472 * t771;
t425 = -t469 * t772 - t471 * t771;
t424 = -pkin(5) * t520 + t449;
t423 = -pkin(5) * t518 + t448;
t422 = -t465 * t775 + t466 * t779;
t421 = t465 * t779 + t466 * t775;
t420 = -pkin(2) * t685 + pkin(7) * t843 + t506 * t851 - t558 * t772;
t419 = t426 * t776 + t619 * t780;
t418 = -t426 * t780 + t619 * t776;
t417 = -t458 * t772 - t460 * t771;
t416 = -t457 * t772 - t459 * t771;
t415 = t456 * t779 - t849;
t414 = t456 * t775 + t848;
t413 = pkin(2) * t486 + pkin(3) * t541 + pkin(4) * t603 - qJ(2) * t487 - t513;
t410 = pkin(2) * t463 + pkin(3) * t522 + pkin(4) * t579 - qJ(2) * t464 - t512;
t409 = -t438 * t772 - t440 * t771;
t408 = -t437 * t772 - t439 * t771;
t407 = t412 * t778 + t496 * t774;
t406 = t412 * t774 - t496 * t778;
t405 = -pkin(9) * t492 - t411;
t404 = -t433 * t771 + t434 * t772;
t403 = t433 * t772 + t434 * t771;
t402 = -t431 * t771 + t432 * t772;
t401 = t431 * t772 + t432 * t771;
t400 = -t428 * t772 - t429 * t771;
t399 = -t421 * t771 + t422 * t772;
t398 = t421 * t772 + t422 * t771;
t397 = -pkin(8) * t478 - t424 * t774 + t454 * t778;
t396 = -pkin(8) * t476 - t423 * t774 + t451 * t778;
t395 = t403 * t776 + t520 * t780;
t394 = -t403 * t780 + t520 * t776;
t393 = t401 * t776 + t518 * t780;
t392 = -t401 * t780 + t518 * t776;
t391 = -pkin(7) * t470 - t436 * t775 + t444 * t779;
t390 = -pkin(3) * t619 + pkin(7) * t472 + t436 * t779 + t444 * t775;
t389 = -t414 * t771 + t415 * t772;
t388 = t414 * t772 + t415 * t771;
t387 = -pkin(4) * t520 + pkin(8) * t479 + t424 * t778 + t454 * t774;
t386 = -pkin(7) * t414 - pkin(8) * t848 - t450 * t775;
t385 = -pkin(4) * t518 + pkin(8) * t477 + t423 * t778 + t451 * t774;
t384 = t388 * t776 - t610 * t780;
t383 = -t388 * t780 - t610 * t776;
t382 = pkin(3) * t610 + pkin(7) * t415 - pkin(8) * t849 + t450 * t779;
t381 = t398 * t776 + t492 * t780;
t380 = -t398 * t780 + t492 * t776;
t379 = pkin(2) * t593 - t441 * t772 - t446 * t771 + t487 * t851;
t378 = pkin(2) * t426 + pkin(3) * t470 + pkin(4) * t530 - qJ(2) * t427;
t377 = -pkin(8) * t465 + t405 * t778 + t492 * t854;
t376 = pkin(2) * t590 - t430 * t772 - t442 * t771 + t464 * t851;
t375 = pkin(8) * t466 + t405 * t774 + t492 * t806;
t374 = -t406 * t775 + t407 * t779;
t373 = t406 * t779 + t407 * t775;
t372 = -pkin(8) * t406 + (-pkin(9) * t778 + t854) * t411;
t371 = -pkin(7) * t433 - t387 * t775 + t397 * t779;
t370 = -pkin(7) * t431 - t385 * t775 + t396 * t779;
t369 = -pkin(3) * t520 + pkin(7) * t434 + t387 * t779 + t397 * t775;
t368 = -pkin(3) * t518 + pkin(7) * t432 + t385 * t779 + t396 * t775;
t367 = pkin(2) * t403 + pkin(3) * t433 + pkin(4) * t478 - pkin(5) * t555 + pkin(9) * t521 - qJ(2) * t404 + t847;
t366 = pkin(2) * t401 + pkin(3) * t431 + pkin(4) * t476 + pkin(5) * t553 + pkin(9) * t519 - qJ(2) * t402 - t846;
t365 = pkin(8) * t407 + (-pkin(9) * t774 + t806) * t411;
t364 = pkin(2) * t388 + pkin(3) * t414 + pkin(4) * t455 - qJ(2) * t389;
t363 = pkin(2) * t619 - t390 * t772 - t391 * t771 + t427 * t851;
t362 = -pkin(7) * t421 - t375 * t775 + t377 * t779;
t361 = -t373 * t771 + t374 * t772;
t360 = t373 * t772 + t374 * t771;
t359 = -pkin(3) * t492 + pkin(7) * t422 + t375 * t779 + t377 * t775;
t358 = pkin(2) * t398 + pkin(3) * t421 + pkin(4) * t465 + pkin(5) * t600 + pkin(9) * t494 - qJ(2) * t399 + t412;
t357 = t360 * t776 + t411 * t780;
t356 = -t360 * t780 + t411 * t776;
t355 = -pkin(2) * t610 - t382 * t772 - t386 * t771 + t389 * t851;
t354 = -pkin(7) * t373 - t365 * t775 + t372 * t779;
t353 = pkin(2) * t520 - t369 * t772 - t371 * t771 + t404 * t851;
t352 = pkin(2) * t518 - t368 * t772 - t370 * t771 + t402 * t851;
t351 = -pkin(3) * t411 + pkin(7) * t374 + t365 * t779 + t372 * t775;
t350 = pkin(2) * t492 - t359 * t772 - t362 * t771 + t399 * t851;
t349 = pkin(2) * t360 + pkin(3) * t373 + pkin(4) * t406 - pkin(5) * t496 + pkin(9) * t412 - qJ(2) * t361;
t348 = pkin(2) * t411 - t351 * t772 - t354 * t771 + t361 * t851;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t748, -t747, 0, t716, 0, 0, 0, 0, 0, 0, 0, t748, t747, t682, 0, 0, 0, 0, 0, 0, t713, t714, t710, t624, 0, 0, 0, 0, 0, 0, t567, t582, t565, t500, 0, 0, 0, 0, 0, 0, t453, t462, t419, t384, 0, 0, 0, 0, 0, 0, t393, t395, t381, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t747, -t748, 0, t715, 0, 0, 0, 0, 0, 0, 0, -t747, t748, t681, 0, 0, 0, 0, 0, 0, t711, t712, t709, t623, 0, 0, 0, 0, 0, 0, t566, t581, t564, t499, 0, 0, 0, 0, 0, 0, t452, t461, t418, t383, 0, 0, 0, 0, 0, 0, t392, t394, t380, t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t645, 0, 0, 0, 0, 0, 0, t588, t614, t599, t506, 0, 0, 0, 0, 0, 0, t464, t487, t427, t389, 0, 0, 0, 0, 0, 0, t402, t404, t399, t361; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t747, 0, -t748, 0, -t799, -t798, -t715, -pkin(6) * t715, 0, -t747, t748, 0, 0, 0, -t681, t799, t798, -pkin(6) * t681 + (-pkin(1) * t776 + qJ(2) * t780) * g(3), t721, -t744 * t776 - t746 * t780, t714, -t721, -t713, 0, -pkin(6) * t711 + t667 * t780 - t706 * t776, -pkin(6) * t712 + t666 * t780 - t705 * t776, -pkin(2) * t830 - pkin(6) * t709 - t636 * t776, -pkin(6) * t623 - t572 * t776 + t589 * t780, -t616 * t776 - t807, -t598 * t776 + t707 * t780, -t612 * t776 + t737 * t780, -t615 * t776 + t807, -t611 * t776 - t780 * t790, qJDD(4) * t780 - t635 * t776, -pkin(6) * t566 - t475 * t776 + t498 * t780, -pkin(6) * t581 - t488 * t776 + t508 * t780, -pkin(6) * t564 - t445 * t776 + t509 * t780, -pkin(6) * t499 - t420 * t776 + t443 * t780, -t468 * t776 + t809, -t425 * t776 + t643 * t780, -t489 * t776 + t595 * t780, -t467 * t776 - t809, -t490 * t776 + t780 * t787, -t510 * t776 + t766 * t780, -pkin(6) * t452 - t376 * t776 + t410 * t780, -pkin(6) * t461 - t379 * t776 + t413 * t780, -pkin(6) * t418 - t363 * t776 + t378 * t780, -pkin(6) * t383 - t355 * t776 + t364 * t780, -t417 * t776 + t545 * t780, -t400 * t776 + t491 * t780, -t408 * t776 + t533 * t780, -t416 * t776 + t543 * t780, -t409 * t776 + t534 * t780, -t435 * t776 + t573 * t780, -pkin(6) * t392 - t352 * t776 + t366 * t780, -pkin(6) * t394 - t353 * t776 + t367 * t780, -pkin(6) * t380 - t350 * t776 + t358 * t780, -pkin(6) * t356 - t348 * t776 + t349 * t780; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t748, 0, t747, 0, t798, -t799, t716, pkin(6) * t716, 0, -t748, -t747, 0, 0, 0, t682, -t798, t799, pkin(6) * t682 + (pkin(1) * t780 + qJ(2) * t776) * g(3), -t720, t744 * t780 - t746 * t776, t712, t720, -t711, 0, pkin(6) * t713 + t667 * t776 + t706 * t780, pkin(6) * t714 + t666 * t776 + t705 * t780, -pkin(2) * t831 + pkin(6) * t710 + t636 * t780, pkin(6) * t624 + t572 * t780 + t589 * t776, t616 * t780 - t808, t598 * t780 + t707 * t776, t612 * t780 + t737 * t776, t615 * t780 + t808, t611 * t780 - t776 * t790, qJDD(4) * t776 + t635 * t780, pkin(6) * t567 + t475 * t780 + t498 * t776, pkin(6) * t582 + t488 * t780 + t508 * t776, pkin(6) * t565 + t445 * t780 + t509 * t776, pkin(6) * t500 + t420 * t780 + t443 * t776, t468 * t780 + t810, t425 * t780 + t643 * t776, t489 * t780 + t595 * t776, t467 * t780 - t810, t490 * t780 + t776 * t787, t510 * t780 + t766 * t776, pkin(6) * t453 + t376 * t780 + t410 * t776, pkin(6) * t462 + t379 * t780 + t413 * t776, pkin(6) * t419 + t363 * t780 + t378 * t776, pkin(6) * t384 + t355 * t780 + t364 * t776, t417 * t780 + t545 * t776, t400 * t780 + t491 * t776, t408 * t780 + t533 * t776, t416 * t780 + t543 * t776, t409 * t780 + t534 * t776, t435 * t780 + t573 * t776, pkin(6) * t393 + t352 * t780 + t366 * t776, pkin(6) * t395 + t353 * t780 + t367 * t776, pkin(6) * t381 + t350 * t780 + t358 * t776, pkin(6) * t357 + t348 * t780 + t349 * t776; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t749, t750, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t797 - 0.2e1 * t850, -t750 + t764 + 0.2e1 * t770, pkin(1) * t729 + qJ(2) * t727, t768 * qJDD(1), -0.2e1 * t771 * t815, 0, t767 * qJDD(1), 0, 0, -t741 * t851 + t771 * t801, -t740 * t851 + t772 * t801, -qJ(2) * t864 - t743 * t851 - t644, -qJ(2) * t718 + t644 * t851, -t661 * t771 + t662 * t772, -t650 * t771 + t652 * t772, -t654 * t771 + t657 * t772, -t659 * t771 + t660 * t772, -t653 * t771 + t656 * t772, -t683 * t771 + t684 * t772, qJ(2) * t701 + t587 * t851 - t596 * t771 + t617 * t772, qJ(2) * t703 - t601 * t771 + t613 * t851 + t626 * t772, qJ(2) * t675 - t524 * t771 + t540 * t772 + t597 * t851, -pkin(7) * t842 - qJ(2) * t685 + t505 * t851 - t558 * t771, -t526 * t771 + t528 * t772, -t469 * t771 + t471 * t772, -t547 * t771 + t549 * t772, -t525 * t771 + t527 * t772, -t548 * t771 + t550 * t772, -t570 * t771 + t571 * t772, qJ(2) * t590 - t430 * t771 + t442 * t772 + t463 * t851, qJ(2) * t593 - t441 * t771 + t446 * t772 + t486 * t851, qJ(2) * t619 - t390 * t771 + t391 * t772 + t426 * t851, -qJ(2) * t610 - t382 * t771 + t386 * t772 + t388 * t851, -t458 * t771 + t460 * t772, -t428 * t771 + t429 * t772, -t437 * t771 + t439 * t772, -t457 * t771 + t459 * t772, -t438 * t771 + t440 * t772, -t480 * t771 + t481 * t772, qJ(2) * t518 - t368 * t771 + t370 * t772 + t401 * t851, qJ(2) * t520 - t369 * t771 + t371 * t772 + t403 * t851, qJ(2) * t492 - t359 * t771 + t362 * t772 + t398 * t851, qJ(2) * t411 - t351 * t771 + t354 * t772 + t360 * t851;];
tauB_reg  = t1;
