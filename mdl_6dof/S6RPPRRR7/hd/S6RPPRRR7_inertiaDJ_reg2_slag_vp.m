% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR7_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:33:48
% EndTime: 2019-03-09 02:33:57
% DurationCPUTime: 2.69s
% Computational Cost: add. (4737->181), mult. (8998->309), div. (0->0), fcn. (9377->8), ass. (0->122)
t155 = cos(qJ(5));
t84 = sin(qJ(5));
t137 = qJD(5) * t84;
t154 = sin(qJ(4));
t119 = qJD(4) * t154;
t156 = cos(qJ(4));
t120 = qJD(4) * t156;
t80 = sin(pkin(10));
t81 = cos(pkin(10));
t143 = t119 * t81 + t120 * t80;
t125 = t156 * t81;
t58 = -t154 * t80 + t125;
t168 = t58 * qJD(4);
t142 = t154 * t81 + t156 * t80;
t169 = t155 * t142;
t172 = qJD(5) * t169 + t137 * t58 + t143 * t155 + t168 * t84;
t118 = qJD(5) * t155;
t170 = t84 * t142;
t23 = qJD(5) * t170 - t118 * t58 + t143 * t84 - t155 * t168;
t39 = t155 * t58 - t170;
t151 = t39 * t84;
t175 = t84 * t58 + t169;
t97 = (-t155 * t175 + t151) * qJD(5);
t199 = (t155 * t172 + t23 * t84 + t97) * pkin(4);
t82 = -pkin(1) - qJ(3);
t158 = -pkin(7) + t82;
t114 = t158 * t154;
t60 = t158 * t80;
t41 = t114 * t81 + t156 * t60;
t33 = -pkin(8) * t142 + t41;
t57 = t158 * t125;
t40 = -t154 * t60 + t57;
t99 = -pkin(8) * t58 + t40;
t93 = t155 * t99;
t19 = t33 * t84 - t93;
t117 = t156 * qJD(3);
t121 = qJD(3) * t154;
t31 = (-qJD(4) * t114 - t117) * t81 - t60 * t120 + t80 * t121;
t177 = pkin(8) * t143 + t31;
t20 = t155 * t33 + t84 * t99;
t103 = -qJD(4) * t57 + t119 * t60;
t28 = -pkin(8) * t168 - t117 * t80 - t121 * t81 - t103;
t6 = qJD(5) * t20 - t155 * t177 + t84 * t28;
t107 = t172 * t19 - t6 * t39;
t86 = -qJD(5) * t93 + t137 * t33 - t155 * t28 - t177 * t84;
t197 = -t175 * t86 - t20 * t23 + t107;
t83 = sin(qJ(6));
t147 = t83 * t23;
t85 = cos(qJ(6));
t75 = qJD(6) * t85;
t196 = -t175 * t75 + t147;
t193 = t39 * t172;
t194 = t175 * t23;
t192 = -t193 - t194;
t35 = t39 ^ 2;
t148 = t83 * t172;
t102 = t39 * t75 - t148;
t135 = qJD(6) * t83;
t100 = t135 * t175 + t23 * t85;
t101 = t135 * t39 + t172 * t85;
t189 = pkin(5) * t172;
t128 = t155 * pkin(4);
t74 = -t128 - pkin(5);
t187 = t172 * t74;
t124 = t58 * t143;
t176 = t168 * t142;
t178 = -0.2e1 * t124 + 0.2e1 * t176;
t78 = t83 ^ 2;
t79 = t85 ^ 2;
t140 = t78 - t79;
t166 = t140 * qJD(6);
t30 = qJD(3) * t142 + t103;
t174 = -t142 * t30 - t143 * t40 + t168 * t41 + t31 * t58;
t139 = t78 + t79;
t69 = t80 * pkin(3) + qJ(2);
t42 = pkin(4) * t142 + t69;
t91 = pkin(5) * t175 - t39 * pkin(9) + t42;
t171 = -qJD(6) * t91 + t86;
t8 = -t20 * t83 + t85 * t91;
t9 = t85 * t20 + t83 * t91;
t167 = -t8 * t83 + t85 * t9;
t61 = (t80 ^ 2 + t81 ^ 2) * qJD(3);
t43 = pkin(4) * t168 + qJD(2);
t87 = -pkin(5) * t23 + pkin(9) * t172 + t43;
t2 = t20 * t135 + t171 * t85 - t83 * t87;
t3 = t171 * t83 - t20 * t75 + t85 * t87;
t165 = -qJD(6) * t167 + t2 * t83 - t3 * t85;
t163 = 0.2e1 * qJD(2);
t162 = pkin(4) * t84;
t161 = t19 * t6;
t5 = t6 * t83;
t157 = t19 * t75 + t5;
t149 = t39 * t85;
t129 = pkin(4) * t137;
t144 = t129 * t83 + t74 * t75;
t138 = pkin(4) * qJD(5);
t134 = qJ(2) * qJD(2);
t133 = -0.2e1 * t194;
t132 = t85 * t148;
t131 = pkin(5) * t135;
t130 = pkin(5) * t75;
t127 = t83 * t75;
t12 = t139 * t23;
t116 = t35 * t127;
t115 = pkin(4) * t118;
t111 = t8 * t85 + t83 * t9;
t106 = -t175 ^ 2 - t35;
t73 = pkin(9) + t162;
t105 = t175 * t73 - t39 * t74;
t104 = -t129 * t85 + t135 * t74;
t98 = t139 * t155;
t94 = -0.2e1 * t192;
t1 = -qJD(6) * t111 - t2 * t85 - t3 * t83;
t88 = pkin(4) * t97 + t23 * t73 - t187;
t66 = -0.2e1 * t127;
t65 = 0.2e1 * t127;
t59 = -0.2e1 * t166;
t51 = t98 * t138;
t17 = t19 * t135;
t11 = t166 * t39 + t132;
t7 = -0.4e1 * t127 * t39 + t140 * t172;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, 0.2e1 * t134, 0, 0, 0, 0, 0, 0, t80 * t163, t81 * t163, 0.2e1 * t61, -0.2e1 * t61 * t82 + 0.2e1 * t134, -0.2e1 * t124, 0.2e1 * t142 * t143 - 0.2e1 * t168 * t58, 0, 0.2e1 * t176, 0, 0, 0.2e1 * qJD(2) * t142 + 0.2e1 * t168 * t69, 0.2e1 * qJD(2) * t58 - 0.2e1 * t143 * t69, -0.2e1 * t174, 0.2e1 * qJD(2) * t69 - 0.2e1 * t30 * t41 + 0.2e1 * t31 * t40, -0.2e1 * t193, 0.2e1 * t172 * t175 + 0.2e1 * t23 * t39, 0, t133, 0, 0, 0.2e1 * t175 * t43 - 0.2e1 * t23 * t42, -0.2e1 * t172 * t42 + 0.2e1 * t39 * t43, -0.2e1 * t197, -0.2e1 * t20 * t86 + 0.2e1 * t42 * t43 + 0.2e1 * t161, -0.2e1 * t193 * t79 - 0.2e1 * t116, 0.4e1 * t132 * t39 + 0.2e1 * t166 * t35, -0.2e1 * t101 * t175 - 0.2e1 * t149 * t23, -0.2e1 * t193 * t78 + 0.2e1 * t116, -0.2e1 * t102 * t175 + 0.2e1 * t147 * t39, t133, 0.2e1 * t102 * t19 + 0.2e1 * t175 * t3 - 0.2e1 * t23 * t8 + 0.2e1 * t39 * t5, -0.2e1 * t101 * t19 + 0.2e1 * t149 * t6 + 0.2e1 * t175 * t2 + 0.2e1 * t23 * t9, 0.2e1 * t111 * t172 + 0.2e1 * t165 * t39, -0.2e1 * t2 * t9 + 0.2e1 * t3 * t8 + 0.2e1 * t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, 0, 0, 0, 0, 0, 0, 0, 0, -t178, t174, 0, 0, 0, 0, 0, 0, 0, 0, t94, t197, 0, 0, 0, 0, 0, 0, t106 * t75 + t83 * t94, -t106 * t135 + t85 * t94, 0, t1 * t175 - t167 * t23 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t192, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t12 * t175 - 0.2e1 * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, t168, -t143, 0, qJD(2), 0, 0, 0, 0, 0, 0, -t23, -t172, 0, t43, 0, 0, 0, 0, 0, 0, -t100, t196, t139 * t172, -t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, 0, -t168, 0, t31, t30, 0, 0, 0, 0, -t172, 0, t23, 0, -t6, t86, t199, t115 * t20 - t128 * t6 + t129 * t19 - t162 * t86, -t11, t7, -t196, t11, -t100, 0, t17 + (-qJD(6) * t105 - t6) * t85 + t88 * t83, t105 * t135 + t85 * t88 + t157, t1, t6 * t74 + (t155 * t167 + t19 * t84) * t138 + t1 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t168, 0, 0, 0, 0, 0, 0, 0, 0, -t172, t23, 0, -t199, 0, 0, 0, 0, 0, 0, -t101, -t102, -t12, t187 - t73 * t12 + (t175 * t98 - t151) * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t129, -0.2e1 * t115, 0, 0, t65, t59, 0, t66, 0, 0, 0.2e1 * t104, 0.2e1 * t144, 0.2e1 * t51, 0.2e1 * (t73 * t98 + t74 * t84) * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172, 0, t23, 0, -t6, t86, 0, 0, -t11, t7, -t196, t11, -t100, 0, t17 + (pkin(9) * t23 + t189) * t83 + (-t6 + (-pkin(5) * t39 - pkin(9) * t175) * qJD(6)) * t85, pkin(5) * t101 + pkin(9) * t100 + t157, t1, -t6 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172, t23, 0, 0, 0, 0, 0, 0, 0, 0, -t101, -t102, -t12, -pkin(9) * t12 - t189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t129, -t115, 0, 0, t65, t59, 0, t66, 0, 0, t104 - t131, -t130 + t144, t51 (-pkin(5) * t84 + pkin(9) * t98) * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t59, 0, t66, 0, 0, -0.2e1 * t131, -0.2e1 * t130, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, 0, -t102, -t23, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, t100, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t75, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, -t135, 0, -t115 * t83 - t73 * t75, -t115 * t85 + t135 * t73, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, -t135, 0, -pkin(9) * t75, pkin(9) * t135, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
