% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:03:30
% EndTime: 2019-03-08 23:03:49
% DurationCPUTime: 11.44s
% Computational Cost: add. (14530->680), mult. (34655->911), div. (0->0), fcn. (27618->18), ass. (0->342)
t276 = cos(qJ(4));
t277 = cos(qJ(3));
t390 = t276 * t277;
t272 = sin(qJ(4));
t273 = sin(qJ(3));
t392 = t272 * t273;
t209 = -t390 + t392;
t457 = pkin(9) + pkin(8);
t357 = qJD(3) * t457;
t215 = t273 * t357;
t216 = t277 * t357;
t224 = t457 * t273;
t225 = t457 * t277;
t269 = sin(pkin(6));
t278 = cos(qJ(2));
t394 = t269 * t278;
t350 = qJD(1) * t394;
t373 = qJD(4) * t276;
t374 = qJD(4) * t272;
t388 = t209 * t350 - t276 * t215 - t272 * t216 - t224 * t373 - t225 * t374;
t166 = -t272 * t224 + t276 * t225;
t210 = t272 * t277 + t273 * t276;
t387 = -qJD(4) * t166 + t210 * t350 + t272 * t215 - t276 * t216;
t263 = qJD(3) + qJD(4);
t153 = t263 * t210;
t475 = -qJ(5) * t153 - qJD(5) * t209 + t388;
t320 = t263 * t392;
t152 = -qJD(3) * t390 - t277 * t373 + t320;
t474 = t152 * qJ(5) - t210 * qJD(5) + t387;
t375 = qJD(3) * t273;
t256 = pkin(3) * t375;
t274 = sin(qJ(2));
t379 = qJD(1) * t274;
t355 = t269 * t379;
t297 = -t355 + t256;
t322 = pkin(4) * t153 + t297;
t271 = sin(qJ(6));
t275 = cos(qJ(6));
t267 = sin(pkin(12));
t203 = t210 * qJD(2);
t192 = t203 * qJ(5);
t217 = qJD(2) * pkin(8) + t355;
t333 = pkin(9) * qJD(2) + t217;
t270 = cos(pkin(6));
t380 = qJD(1) * t270;
t349 = t273 * t380;
t159 = t277 * t333 + t349;
t148 = t272 * t159;
t234 = t277 * t380;
t158 = -t273 * t333 + t234;
t150 = qJD(3) * pkin(3) + t158;
t99 = t276 * t150 - t148;
t84 = -t192 + t99;
t74 = pkin(4) * t263 + t84;
t428 = cos(pkin(12));
t407 = t159 * t276;
t100 = t150 * t272 + t407;
t376 = qJD(2) * t277;
t348 = t276 * t376;
t378 = qJD(2) * t273;
t352 = t272 * t378;
t201 = -t348 + t352;
t427 = qJ(5) * t201;
t85 = t100 - t427;
t76 = t428 * t85;
t46 = t267 * t74 + t76;
t42 = pkin(10) * t263 + t46;
t126 = t428 * t201 + t203 * t267;
t455 = pkin(3) * t277;
t254 = pkin(2) + t455;
t193 = -qJD(2) * t254 - t350;
t137 = t201 * pkin(4) + qJD(5) + t193;
t301 = -t267 * t201 + t203 * t428;
t58 = t126 * pkin(5) - pkin(10) * t301 + t137;
t22 = t271 * t58 + t275 * t42;
t367 = qJD(2) * qJD(3);
t344 = t277 * t367;
t364 = t277 * qJDD(2);
t365 = t273 * qJDD(2);
t328 = -qJD(4) * t348 - t272 * t364 + (-t344 - t365) * t276;
t111 = qJD(2) * t320 + t328;
t318 = t272 * t365 - t276 * t364;
t112 = qJD(2) * t153 + t318;
t63 = -t111 * t267 + t428 * t112;
t64 = -t111 * t428 - t267 * t112;
t342 = qJDD(1) * t394;
t368 = qJD(1) * qJD(2);
t347 = t274 * t368;
t319 = t269 * t347 - t342;
t345 = t273 * t367;
t140 = pkin(3) * t345 - qJDD(2) * t254 + t319;
t80 = t112 * pkin(4) + qJDD(5) + t140;
t23 = t63 * pkin(5) - t64 * pkin(10) + t80;
t260 = qJDD(3) + qJDD(4);
t346 = t278 * t368;
t425 = qJDD(2) * pkin(8);
t175 = t425 + (qJDD(1) * t274 + t346) * t269;
t366 = qJDD(1) * t270;
t233 = t277 * t366;
t93 = qJDD(3) * pkin(3) + t233 + (-pkin(9) * qJDD(2) - t175) * t273 - t159 * qJD(3);
t358 = qJD(3) * t234 + t277 * t175 + t273 * t366;
t107 = -t217 * t375 + t358;
t94 = (-t345 + t364) * pkin(9) + t107;
t34 = -qJD(4) * t100 - t272 * t94 + t276 * t93;
t26 = t260 * pkin(4) + t111 * qJ(5) - t203 * qJD(5) + t34;
t329 = -t150 * t373 + t159 * t374 - t272 * t93 - t276 * t94;
t28 = -qJ(5) * t112 - qJD(5) * t201 - t329;
t9 = t267 * t26 + t428 * t28;
t7 = pkin(10) * t260 + t9;
t3 = -qJD(6) * t22 + t275 * t23 - t271 * t7;
t466 = qJD(6) + t126;
t473 = t22 * t466 + t3;
t312 = t271 * t42 - t275 * t58;
t2 = -t312 * qJD(6) + t271 * t23 + t275 * t7;
t472 = t312 * t466 + t2;
t97 = -t152 * t267 + t153 * t428;
t98 = -t152 * t428 - t267 * t153;
t471 = pkin(5) * t97 - pkin(10) * t98 + t322;
t430 = t474 * t267 + t428 * t475;
t470 = t126 * t301;
t429 = cos(pkin(11));
t335 = t429 * t278;
t268 = sin(pkin(11));
t398 = t268 * t274;
t197 = -t270 * t398 + t335;
t266 = qJ(3) + qJ(4);
t258 = sin(t266);
t259 = cos(t266);
t399 = t268 * t269;
t469 = -t197 * t258 + t259 * t399;
t396 = t269 * t274;
t468 = -t258 * t396 + t259 * t270;
t331 = t275 * t466;
t61 = qJDD(6) + t63;
t467 = -t271 * t61 - t331 * t466;
t336 = t429 * t274;
t397 = t268 * t278;
t195 = t270 * t336 + t397;
t257 = pkin(12) + t266;
t247 = sin(t257);
t248 = cos(t257);
t337 = t269 * t429;
t132 = -t195 * t247 - t248 * t337;
t134 = -t197 * t247 + t248 * t399;
t172 = -t247 * t396 + t248 * t270;
t465 = g(1) * t134 + g(2) * t132 + g(3) * t172;
t370 = qJD(6) * t275;
t440 = t267 * t85;
t45 = t428 * t74 - t440;
t41 = -t263 * pkin(5) - t45;
t8 = t428 * t26 - t267 * t28;
t6 = -pkin(5) * t260 - t8;
t464 = t6 * t271 + t41 * t370;
t1 = t2 * t275;
t447 = t3 * t271;
t463 = t1 - t447;
t453 = pkin(4) * t267;
t249 = pkin(10) + t453;
t48 = t428 * t84 - t440;
t454 = pkin(4) * t203;
t72 = pkin(5) * t301 + pkin(10) * t126 + t454;
t30 = t271 * t72 + t275 * t48;
t371 = qJD(6) * t271;
t462 = -t249 * t371 - t30;
t194 = -t270 * t335 + t398;
t196 = t270 * t397 + t336;
t324 = g(1) * t196 + g(2) * t194;
t459 = g(3) * t394 - t324;
t460 = t459 * t247;
t280 = qJD(3) ^ 2;
t426 = qJDD(2) * pkin(2);
t174 = t319 - t426;
t308 = -t174 + t324;
t458 = -pkin(8) * t280 + t269 * (-g(3) * t278 + t347) + t308 + t426;
t456 = pkin(3) * t276;
t199 = t270 * t277 - t273 * t396;
t449 = g(3) * t199;
t448 = g(3) * t269;
t146 = t209 * t428 + t210 * t267;
t147 = -t267 * t209 + t210 * t428;
t178 = pkin(4) * t209 - t254;
t75 = pkin(5) * t146 - pkin(10) * t147 + t178;
t122 = -qJ(5) * t209 + t166;
t165 = -t224 * t276 - t225 * t272;
t294 = -qJ(5) * t210 + t165;
t79 = t122 * t428 + t267 * t294;
t43 = -t271 * t79 + t275 * t75;
t446 = qJD(6) * t43 + t271 * t471 + t430 * t275;
t44 = t271 * t75 + t275 * t79;
t445 = -qJD(6) * t44 - t430 * t271 + t275 * t471;
t444 = pkin(3) * qJD(4);
t443 = qJD(2) * pkin(2);
t442 = t126 * t41;
t441 = t312 * t275;
t438 = t271 * t98;
t437 = t275 * t98;
t51 = -t271 * t260 - t263 * t370 - t275 * t64 + t301 * t371;
t436 = t51 * t271;
t115 = t263 * t271 + t275 * t301;
t332 = -t275 * t260 + t271 * t64;
t52 = qJD(6) * t115 + t332;
t435 = t52 * t275;
t113 = -t275 * t263 + t271 * t301;
t434 = -t113 * t370 - t271 * t52;
t101 = -t158 * t272 - t407;
t295 = t101 + t427;
t334 = t428 * t272;
t102 = t276 * t158 - t148;
t87 = -t192 + t102;
t433 = -t267 * t87 + t428 * t295 + (t267 * t276 + t334) * t444;
t400 = t267 * t272;
t187 = (t276 * t428 - t400) * t444;
t54 = t267 * t295 + t428 * t87;
t432 = t187 - t54;
t431 = t267 * t475 - t474 * t428;
t424 = t113 * t301;
t423 = t113 * t126;
t422 = t113 * t271;
t421 = t115 * t113;
t420 = t115 * t301;
t419 = t115 * t271;
t418 = t115 * t275;
t417 = t466 * t301;
t416 = t301 ^ 2;
t415 = t301 * t263;
t413 = t126 ^ 2;
t412 = t126 * t263;
t411 = t126 * t271;
t409 = t147 * t271;
t408 = t147 * t275;
t405 = t203 * t201;
t404 = t217 * t273;
t403 = t248 * t271;
t402 = t248 * t275;
t395 = t269 * t277;
t393 = t271 * t278;
t391 = t275 * t278;
t389 = qJDD(1) - g(3);
t220 = pkin(4) * t259 + t455;
t214 = pkin(2) + t220;
t261 = -qJ(5) - t457;
t386 = -t194 * t214 - t195 * t261;
t385 = -t196 * t214 - t197 * t261;
t219 = -pkin(3) * t273 - pkin(4) * t258;
t384 = t197 * t219 + t220 * t399;
t383 = t219 * t396 + t270 * t220;
t253 = pkin(4) + t456;
t190 = pkin(3) * t334 + t267 * t253;
t264 = t273 ^ 2;
t265 = t277 ^ 2;
t382 = t264 - t265;
t381 = t264 + t265;
t377 = qJD(2) * t274;
t372 = qJD(6) * t466;
t255 = pkin(3) * t378;
t361 = t269 * t393;
t360 = t269 * t391;
t281 = qJD(2) ^ 2;
t359 = t273 * t281 * t277;
t39 = t41 * t371;
t356 = t428 * pkin(4);
t354 = t269 * t377;
t353 = qJD(2) * t394;
t343 = t278 * t367;
t133 = t195 * t248 - t247 * t337;
t341 = t132 * pkin(5) + t133 * pkin(10);
t135 = t197 * t248 + t247 * t399;
t340 = t134 * pkin(5) + pkin(10) * t135;
t173 = t247 * t270 + t248 * t396;
t339 = t172 * pkin(5) + pkin(10) * t173;
t338 = t301 * t312 + t39;
t330 = t466 * t271;
t327 = t273 * t344;
t326 = t469 * pkin(4);
t325 = pkin(5) * t248 + pkin(10) * t247;
t323 = g(1) * t197 + g(2) * t195;
t317 = -t126 * t45 + t301 * t46;
t184 = pkin(10) + t190;
t316 = -t184 * t61 + t442;
t315 = -t249 * t61 + t442;
t314 = -t22 * t271 + t441;
t313 = -t22 * t275 - t271 * t312;
t200 = t270 * t273 + t274 * t395;
t123 = t199 * t276 - t200 * t272;
t124 = t199 * t272 + t200 * t276;
t311 = t468 * pkin(4);
t310 = qJDD(2) * t278 - t274 * t281;
t309 = t275 * t61 + (-t371 - t411) * t466;
t306 = t195 * t219 - t220 * t337;
t82 = t267 * t123 + t124 * t428;
t70 = -t271 * t82 - t360;
t305 = -t275 * t82 + t361;
t303 = t147 * t370 + t438;
t302 = -t147 * t371 + t437;
t171 = t217 * t277 + t349;
t299 = g(1) * t135 + g(2) * t133 + g(3) * t173;
t298 = t22 * t301 + t271 * t465 + t464;
t189 = -pkin(3) * t400 + t253 * t428;
t141 = -t195 * t258 - t259 * t337;
t296 = -t465 - t6;
t292 = -g(3) * t396 - t323;
t291 = t141 * pkin(4);
t290 = t126 * t441 - t22 * t411 + t1 - t299;
t288 = t126 * t137 + t299 - t9;
t218 = -t350 - t443;
t287 = -pkin(8) * qJDD(3) + (t218 + t350 - t443) * qJD(3);
t286 = -t137 * t301 - t465 + t8;
t285 = -g(1) * (-t197 * t259 - t258 * t399) - g(2) * (-t195 * t259 + t258 * t337) - g(3) * (-t258 * t270 - t259 * t396) + t193 * t201 + t329;
t108 = -t171 * qJD(3) - t273 * t175 + t233;
t170 = t234 - t404;
t284 = t107 * t277 - t108 * t273 + (-t170 * t277 - t171 * t273) * qJD(3) - t323;
t282 = -g(1) * t469 - g(2) * t141 - g(3) * t468 - t193 * t203 + t34;
t250 = -t356 - pkin(5);
t185 = t214 * t394;
t183 = -pkin(5) - t189;
t169 = t255 + t454;
t155 = -qJD(3) * t200 - t273 * t353;
t154 = qJD(3) * t199 + t277 * t353;
t116 = -t201 ^ 2 + t203 ^ 2;
t95 = -t328 + (t201 - t352) * t263;
t81 = -t123 * t428 + t124 * t267;
t78 = t122 * t267 - t294 * t428;
t69 = t255 + t72;
t67 = -qJD(4) * t124 - t272 * t154 + t276 * t155;
t66 = qJD(4) * t123 + t276 * t154 + t272 * t155;
t57 = t64 + t412;
t56 = -t63 + t415;
t55 = -t413 + t416;
t47 = t267 * t84 + t76;
t36 = t267 * t67 + t428 * t66;
t35 = t267 * t66 - t428 * t67;
t32 = t271 * t69 + t275 * t54;
t31 = -t271 * t54 + t275 * t69;
t29 = -t271 * t48 + t275 * t72;
t19 = t113 * t330 - t435;
t18 = t115 * t331 - t436;
t17 = -t420 - t467;
t16 = t309 + t424;
t15 = qJD(6) * t305 - t271 * t36 + t275 * t354;
t14 = qJD(6) * t70 + t271 * t354 + t275 * t36;
t4 = (-t51 - t423) * t275 - t466 * t419 + t434;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t389, 0, 0, 0, 0, 0, 0, t310 * t269 (-qJDD(2) * t274 - t278 * t281) * t269, 0, -g(3) + (t270 ^ 2 + (t274 ^ 2 + t278 ^ 2) * t269 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t155 * qJD(3) + t199 * qJDD(3) + (-t273 * t343 + t277 * t310) * t269, -t154 * qJD(3) - t200 * qJDD(3) + (-t273 * t310 - t277 * t343) * t269 (-t199 * t273 + t200 * t277) * qJDD(2) + (t154 * t277 - t155 * t273 + (-t199 * t277 - t200 * t273) * qJD(3)) * qJD(2), t107 * t200 + t108 * t199 + t171 * t154 + t170 * t155 - g(3) + (-t174 * t278 + t218 * t377) * t269, 0, 0, 0, 0, 0, 0, t123 * t260 + t67 * t263 + (-t112 * t278 + t201 * t377) * t269, -t124 * t260 - t66 * t263 + (t111 * t278 + t203 * t377) * t269, t111 * t123 - t112 * t124 - t201 * t66 - t203 * t67, t100 * t66 + t34 * t123 - t329 * t124 + t99 * t67 - g(3) + (-t140 * t278 + t193 * t377) * t269, 0, 0, 0, 0, 0, 0, -t81 * t260 - t35 * t263 + (t126 * t377 - t278 * t63) * t269, -t82 * t260 - t36 * t263 + (-t278 * t64 + t301 * t377) * t269, -t126 * t36 + t301 * t35 - t63 * t82 + t64 * t81, -t45 * t35 + t46 * t36 - t8 * t81 + t9 * t82 - g(3) + (t137 * t377 - t278 * t80) * t269, 0, 0, 0, 0, 0, 0, t113 * t35 + t15 * t466 + t52 * t81 + t61 * t70, t115 * t35 - t14 * t466 + t305 * t61 - t51 * t81, -t113 * t14 - t115 * t15 + t305 * t52 + t51 * t70, t14 * t22 - t15 * t312 - t2 * t305 + t3 * t70 + t35 * t41 + t6 * t81 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t459 + t342, -t389 * t396 + t323, 0, 0, qJDD(2) * t264 + 0.2e1 * t327, 0.2e1 * t273 * t364 - 0.2e1 * t367 * t382, qJDD(3) * t273 + t277 * t280, qJDD(2) * t265 - 0.2e1 * t327, qJDD(3) * t277 - t273 * t280, 0, t287 * t273 + t277 * t458, -t273 * t458 + t287 * t277, t381 * t425 + (-g(3) * t274 - t346 * t381) * t269 + t284, t308 * pkin(2) + t284 * pkin(8) + (-g(3) * (pkin(2) * t278 + pkin(8) * t274) + (-t218 * t274 + (t170 * t273 - t171 * t277) * t278) * qJD(1)) * t269, -t111 * t210 - t152 * t203, t111 * t209 - t112 * t210 + t152 * t201 - t153 * t203, -t152 * t263 + t210 * t260, t112 * t209 + t153 * t201, -t153 * t263 - t209 * t260, 0, -t254 * t112 + t140 * t209 + t193 * t153 + t165 * t260 + t201 * t297 - t259 * t459 + t263 * t387, t254 * t111 + t140 * t210 - t193 * t152 - t166 * t260 + t203 * t297 + t258 * t459 - t263 * t388, -t100 * t153 + t165 * t111 - t166 * t112 + t99 * t152 - t201 * t388 - t203 * t387 + t209 * t329 - t34 * t210 + t292, -t329 * t166 + t34 * t165 - t140 * t254 + t193 * t256 - g(1) * (-t196 * t254 + t197 * t457) - g(2) * (-t194 * t254 + t195 * t457) + t387 * t99 + t388 * t100 + (-t193 * t379 - g(3) * (t254 * t278 + t274 * t457)) * t269, t147 * t64 + t301 * t98, -t126 * t98 - t146 * t64 - t147 * t63 - t301 * t97, t147 * t260 + t263 * t98, t126 * t97 + t146 * t63, -t146 * t260 - t263 * t97, 0, t126 * t322 + t137 * t97 + t80 * t146 + t178 * t63 - t248 * t459 - t78 * t260 - t263 * t431, t137 * t98 + t80 * t147 + t178 * t64 - t79 * t260 - t263 * t430 + t301 * t322 + t460, -t126 * t430 - t9 * t146 - t8 * t147 + t301 * t431 - t45 * t98 - t46 * t97 - t79 * t63 + t78 * t64 + t292, t9 * t79 - t8 * t78 + t80 * t178 - g(1) * t385 - g(2) * t386 - g(3) * (-t261 * t396 + t185) + t430 * t46 - t431 * t45 + t322 * t137, t115 * t302 - t408 * t51 (-t113 * t275 - t419) * t98 + (t436 - t435 + (-t418 + t422) * qJD(6)) * t147, t115 * t97 - t51 * t146 + t302 * t466 + t408 * t61, t113 * t303 + t409 * t52, -t113 * t97 - t52 * t146 - t303 * t466 - t409 * t61, t146 * t61 + t466 * t97, t43 * t61 + t3 * t146 - t312 * t97 + t78 * t52 + t41 * t438 - g(1) * (-t196 * t402 + t197 * t271) - g(2) * (-t194 * t402 + t195 * t271) - (t248 * t391 + t271 * t274) * t448 + t464 * t147 + t445 * t466 + t431 * t113, -t44 * t61 - t2 * t146 - t22 * t97 - t78 * t51 + t41 * t437 - g(1) * (t196 * t403 + t197 * t275) - g(2) * (t194 * t403 + t195 * t275) - (-t248 * t393 + t274 * t275) * t448 + (t6 * t275 - t39) * t147 - t446 * t466 + t431 * t115, t43 * t51 - t44 * t52 + t314 * t98 - t445 * t115 - t446 * t113 - t460 + (qJD(6) * t313 - t2 * t271 - t3 * t275) * t147, t2 * t44 + t3 * t43 + t6 * t78 - g(1) * (-t196 * t325 + t385) - g(2) * (-t194 * t325 + t386) - g(3) * t185 + t431 * t41 - (-t261 * t274 + t278 * t325) * t448 + t446 * t22 - t445 * t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t359, t382 * t281, t365, t359, t364, qJDD(3), -t449 + t233 + (-g(1) * t268 + g(2) * t429) * t395 + (-qJD(2) * t218 - t175 + t323) * t273, -t218 * t376 - g(1) * (-t197 * t277 - t273 * t399) - g(2) * (-t195 * t277 + t273 * t337) + g(3) * t200 + (t170 + t404) * qJD(3) - t358, 0, 0, t405, t116, t95, -t405, -t318, t260, -t101 * t263 + (-t201 * t378 + t260 * t276 - t263 * t374) * pkin(3) + t282, t102 * t263 + (-t203 * t378 - t260 * t272 - t263 * t373) * pkin(3) + t285 (t100 + t101) * t203 + (t102 - t99) * t201 + (t111 * t276 - t112 * t272 + (-t201 * t276 + t203 * t272) * qJD(4)) * pkin(3), -t100 * t102 - t99 * t101 - t193 * t255 + t34 * t456 + (-t329 * t272 + t100 * t373 - t99 * t374 - g(1) * (-t197 * t273 + t268 * t395) - g(2) * (-t195 * t273 - t277 * t337) - t449) * pkin(3), t470, t55, t57, -t470, t56, t260, -t169 * t126 + t189 * t260 - t263 * t433 + t286, -t169 * t301 - t190 * t260 - t263 * t432 + t288, -t126 * t432 - t189 * t64 - t190 * t63 + t301 * t433 + t317, -g(1) * t384 - g(2) * t306 - g(3) * t383 - t137 * t169 + t8 * t189 + t9 * t190 + t432 * t46 - t433 * t45, t18, t4, t17, t19, t16, -t417, -t31 * t466 + t183 * t52 + t433 * t113 + (-t187 * t466 + t316) * t271 + (-t184 * t372 + t296) * t275 + t338, -t183 * t51 + t316 * t275 + t433 * t115 + (t184 * t371 - t187 * t275 + t32) * t466 + t298, t113 * t32 + t115 * t31 + (-t113 * t187 - t184 * t52 + (t115 * t184 + t312) * qJD(6)) * t275 + (t115 * t187 - t184 * t51 - t3 + (t113 * t184 - t22) * qJD(6)) * t271 + t290, t6 * t183 - t22 * t32 + t312 * t31 - g(1) * (t340 + t384) - g(2) * (t306 + t341) - g(3) * (t339 + t383) + t433 * t41 - t313 * t187 + (qJD(6) * t314 + t463) * t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t405, t116, t95, -t405, -t318, t260, t100 * t263 + t282, t263 * t99 + t285, 0, 0, t470, t55, t57, -t470, t56, t260, t47 * t263 + (-t126 * t203 + t260 * t428) * pkin(4) + t286, t48 * t263 + (-t203 * t301 - t260 * t267) * pkin(4) + t288, t48 * t126 - t47 * t301 + (-t267 * t63 - t428 * t64) * pkin(4) + t317, -g(1) * t326 - g(2) * t291 - g(3) * t311 - t137 * t454 + t356 * t8 + t45 * t47 + t453 * t9 - t46 * t48, t18, t4, t17, t19, t16, -t417, -t47 * t113 - t29 * t466 + t250 * t52 + t315 * t271 + (-t249 * t372 + t296) * t275 + t338, -t47 * t115 - t250 * t51 + t315 * t275 - t462 * t466 + t298, t30 * t113 + t29 * t115 - t447 + (-t435 - t436) * t249 + ((t418 + t422) * t249 + t314) * qJD(6) + t290, t6 * t250 + t312 * t29 - t41 * t47 - g(1) * (t326 + t340) - g(2) * (t291 + t341) - g(3) * (t311 + t339) + t462 * t22 + (t312 * t370 + t463) * t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63 + t415, t64 - t412, -t413 - t416, t126 * t46 + t301 * t45 + t459 + t80, 0, 0, 0, 0, 0, 0, t309 - t424, -t420 + t467 (t51 - t423) * t275 + t115 * t330 + t434, t271 * t472 + t275 * t473 - t41 * t301 + t459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t421, -t113 ^ 2 + t115 ^ 2, t113 * t466 - t51, -t421, -t332 + (-qJD(6) + t466) * t115, t61, -t41 * t115 - g(1) * (-t135 * t271 + t196 * t275) - g(2) * (-t133 * t271 + t194 * t275) - g(3) * (-t173 * t271 - t360) + t473, t41 * t113 - g(1) * (-t135 * t275 - t196 * t271) - g(2) * (-t133 * t275 - t194 * t271) - g(3) * (-t173 * t275 + t361) - t472, 0, 0;];
tau_reg  = t5;
