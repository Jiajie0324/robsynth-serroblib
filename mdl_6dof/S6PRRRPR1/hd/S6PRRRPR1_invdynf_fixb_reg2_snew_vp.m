% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 07:03
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:03:23
% EndTime: 2019-05-05 07:03:32
% DurationCPUTime: 9.70s
% Computational Cost: add. (75257->327), mult. (162171->509), div. (0->0), fcn. (124114->14), ass. (0->283)
t2277 = sin(pkin(6));
t2280 = cos(pkin(6));
t2276 = sin(pkin(11));
t2279 = cos(pkin(11));
t2317 = g(1) * t2276 - g(2) * t2279;
t2341 = -g(3) + qJDD(1);
t2353 = t2277 * t2341 + t2280 * t2317;
t2283 = sin(qJ(4));
t2287 = cos(qJ(4));
t2288 = cos(qJ(3));
t2339 = qJD(2) * t2288;
t2284 = sin(qJ(3));
t2340 = qJD(2) * t2284;
t2241 = t2283 * t2340 - t2287 * t2339;
t2243 = (t2283 * t2288 + t2284 * t2287) * qJD(2);
t2275 = sin(pkin(12));
t2278 = cos(pkin(12));
t2214 = t2278 * t2241 + t2243 * t2275;
t2211 = qJD(6) + t2214;
t2352 = qJD(6) + t2211;
t2216 = -t2241 * t2275 + t2243 * t2278;
t2272 = qJD(3) + qJD(4);
t2282 = sin(qJ(6));
t2286 = cos(qJ(6));
t2196 = t2216 * t2282 - t2286 * t2272;
t2351 = t2196 ^ 2;
t2198 = t2216 * t2286 + t2272 * t2282;
t2350 = t2198 ^ 2;
t2349 = t2211 ^ 2;
t2348 = t2214 ^ 2;
t2347 = t2216 ^ 2;
t2346 = t2241 ^ 2;
t2345 = t2243 ^ 2;
t2344 = t2272 ^ 2;
t2343 = t2288 ^ 2;
t2342 = -2 * qJD(5);
t2338 = t2196 * t2198;
t2337 = t2214 * t2216;
t2336 = t2216 * t2272;
t2335 = t2241 * t2243;
t2334 = t2272 * t2214;
t2333 = t2272 * t2241;
t2291 = qJD(2) ^ 2;
t2332 = t2343 * t2291;
t2331 = qJD(4) - t2272;
t2330 = qJD(6) - t2211;
t2254 = -g(1) * t2279 - g(2) * t2276;
t2285 = sin(qJ(2));
t2289 = cos(qJ(2));
t2213 = t2289 * t2254 + t2285 * t2353;
t2205 = -pkin(2) * t2291 + qJDD(2) * pkin(8) + t2213;
t2231 = -t2277 * t2317 + t2280 * t2341;
t2186 = -t2284 * t2205 + t2288 * t2231;
t2324 = qJD(3) * t2339;
t2329 = t2284 * qJDD(2);
t2248 = t2324 + t2329;
t2263 = t2284 * t2291 * t2288;
t2255 = qJDD(3) + t2263;
t2170 = (-t2248 + t2324) * pkin(9) + t2255 * pkin(3) + t2186;
t2187 = t2288 * t2205 + t2284 * t2231;
t2259 = qJD(3) * pkin(3) - pkin(9) * t2340;
t2325 = qJD(3) * t2340;
t2328 = t2288 * qJDD(2);
t2295 = -t2325 + t2328;
t2172 = -pkin(3) * t2332 + pkin(9) * t2295 - qJD(3) * t2259 + t2187;
t2140 = t2283 * t2170 + t2287 * t2172;
t2327 = qJDD(3) + qJDD(4);
t2273 = t2284 ^ 2;
t2326 = t2273 + t2343;
t2318 = t2283 * t2248 - t2287 * t2295;
t2200 = -qJD(4) * t2243 - t2318;
t2230 = pkin(4) * t2272 - qJ(5) * t2243;
t2127 = -pkin(4) * t2346 + qJ(5) * t2200 - t2230 * t2272 + t2140;
t2139 = t2287 * t2170 - t2283 * t2172;
t2293 = -t2287 * t2248 - t2283 * t2295;
t2201 = -t2241 * qJD(4) - t2293;
t2218 = t2327 - t2335;
t2292 = (-t2201 - t2333) * qJ(5) + t2218 * pkin(4) + t2139;
t2093 = t2278 * t2127 + t2214 * t2342 + t2275 * t2292;
t2322 = t2275 * t2127 - t2278 * t2292;
t2171 = t2200 * t2275 + t2201 * t2278;
t2321 = -t2171 + t2334;
t2320 = -t2282 * t2171 + t2286 * t2327;
t2319 = -t2278 * t2200 + t2201 * t2275;
t2316 = t2285 * t2254 - t2289 * t2353;
t2315 = -qJDD(6) - t2319;
t2178 = pkin(5) * t2214 - pkin(10) * t2216;
t2088 = -pkin(5) * t2344 + pkin(10) * t2327 - t2214 * t2178 + t2093;
t2204 = -qJDD(2) * pkin(2) - t2291 * pkin(8) + t2316;
t2181 = -t2295 * pkin(3) - pkin(9) * t2332 + t2259 * t2340 + t2204;
t2145 = -t2200 * pkin(4) - t2346 * qJ(5) + t2243 * t2230 + qJDD(5) + t2181;
t2153 = t2319 + t2336;
t2108 = pkin(5) * t2153 + pkin(10) * t2321 + t2145;
t2075 = -t2088 * t2282 + t2108 * t2286;
t2076 = t2088 * t2286 + t2108 * t2282;
t2057 = -t2075 * t2282 + t2076 * t2286;
t2087 = -t2327 * pkin(5) - t2344 * pkin(10) + ((2 * qJD(5)) + t2178) * t2216 + t2322;
t2047 = t2057 * t2275 - t2087 * t2278;
t2048 = t2057 * t2278 + t2087 * t2275;
t2036 = t2047 * t2287 + t2048 * t2283;
t2037 = -t2047 * t2283 + t2048 * t2287;
t2033 = -t2036 * t2284 + t2037 * t2288;
t2056 = t2075 * t2286 + t2076 * t2282;
t2314 = t2033 * t2285 - t2056 * t2289;
t2092 = t2216 * t2342 - t2322;
t2068 = t2092 * t2278 + t2093 * t2275;
t2069 = -t2092 * t2275 + t2093 * t2278;
t2052 = t2068 * t2287 + t2069 * t2283;
t2053 = -t2068 * t2283 + t2069 * t2287;
t2042 = -t2052 * t2284 + t2053 * t2288;
t2313 = t2042 * t2285 - t2145 * t2289;
t2135 = -t2198 * t2330 + t2320;
t2294 = -t2286 * t2171 - t2282 * t2327;
t2137 = t2196 * t2330 + t2294;
t2107 = t2135 * t2286 - t2137 * t2282;
t2152 = -t2350 - t2351;
t2094 = t2107 * t2275 - t2152 * t2278;
t2095 = t2107 * t2278 + t2152 * t2275;
t2070 = t2094 * t2287 + t2095 * t2283;
t2071 = -t2094 * t2283 + t2095 * t2287;
t2055 = -t2070 * t2284 + t2071 * t2288;
t2106 = t2135 * t2282 + t2137 * t2286;
t2312 = t2055 * t2285 - t2106 * t2289;
t2143 = -t2315 - t2338;
t2161 = -t2349 - t2351;
t2118 = -t2143 * t2282 + t2161 * t2286;
t2134 = t2198 * t2352 - t2320;
t2098 = t2118 * t2275 - t2134 * t2278;
t2099 = t2118 * t2278 + t2134 * t2275;
t2077 = t2098 * t2287 + t2099 * t2283;
t2078 = -t2098 * t2283 + t2099 * t2287;
t2061 = -t2077 * t2284 + t2078 * t2288;
t2117 = t2143 * t2286 + t2161 * t2282;
t2311 = t2061 * t2285 - t2117 * t2289;
t2144 = t2315 - t2338;
t2164 = -t2349 - t2350;
t2123 = t2144 * t2286 - t2164 * t2282;
t2136 = -t2196 * t2352 - t2294;
t2102 = t2123 * t2275 - t2136 * t2278;
t2103 = t2123 * t2278 + t2136 * t2275;
t2081 = t2102 * t2287 + t2103 * t2283;
t2082 = -t2102 * t2283 + t2103 * t2287;
t2063 = -t2081 * t2284 + t2082 * t2288;
t2122 = t2144 * t2282 + t2164 * t2286;
t2310 = t2063 * t2285 - t2122 * t2289;
t2154 = -t2319 + t2336;
t2156 = -t2171 - t2334;
t2128 = t2154 * t2275 + t2156 * t2278;
t2129 = t2154 * t2278 - t2156 * t2275;
t2100 = t2128 * t2287 + t2129 * t2283;
t2101 = -t2128 * t2283 + t2129 * t2287;
t2080 = -t2100 * t2284 + t2101 * t2288;
t2165 = -t2347 - t2348;
t2309 = t2080 * t2285 - t2165 * t2289;
t2109 = t2139 * t2287 + t2140 * t2283;
t2110 = -t2139 * t2283 + t2140 * t2287;
t2085 = -t2109 * t2284 + t2110 * t2288;
t2308 = t2085 * t2285 - t2181 * t2289;
t2175 = -t2344 - t2348;
t2176 = t2327 - t2337;
t2146 = t2175 * t2275 + t2176 * t2278;
t2147 = t2175 * t2278 - t2176 * t2275;
t2119 = t2146 * t2287 + t2147 * t2283;
t2120 = -t2146 * t2283 + t2147 * t2287;
t2091 = -t2119 * t2284 + t2120 * t2288;
t2307 = t2091 * t2285 - t2153 * t2289;
t2177 = -t2327 - t2337;
t2203 = -t2344 - t2347;
t2162 = t2177 * t2275 + t2203 * t2278;
t2163 = t2177 * t2278 - t2203 * t2275;
t2132 = t2162 * t2287 + t2163 * t2283;
t2133 = -t2162 * t2283 + t2163 * t2287;
t2105 = -t2132 * t2284 + t2133 * t2288;
t2306 = t2105 * t2285 + t2289 * t2321;
t2189 = -t2243 * t2331 - t2318;
t2191 = t2241 * t2331 + t2293;
t2157 = t2189 * t2283 + t2191 * t2287;
t2158 = t2189 * t2287 - t2191 * t2283;
t2131 = -t2157 * t2284 + t2158 * t2288;
t2202 = -t2345 - t2346;
t2305 = t2131 * t2285 - t2202 * t2289;
t2217 = -t2344 - t2346;
t2179 = t2217 * t2283 + t2218 * t2287;
t2180 = t2217 * t2287 - t2218 * t2283;
t2149 = -t2179 * t2284 + t2180 * t2288;
t2188 = (qJD(4) + t2272) * t2243 + t2318;
t2304 = t2149 * t2285 - t2188 * t2289;
t2151 = -t2186 * t2284 + t2187 * t2288;
t2303 = t2151 * t2285 - t2204 * t2289;
t2219 = -t2327 - t2335;
t2227 = -t2344 - t2345;
t2192 = t2219 * t2283 + t2227 * t2287;
t2193 = t2219 * t2287 - t2227 * t2283;
t2160 = -t2192 * t2284 + t2193 * t2288;
t2190 = t2201 - t2333;
t2302 = t2160 * t2285 - t2190 * t2289;
t2301 = t2213 * t2285 - t2289 * t2316;
t2290 = qJD(3) ^ 2;
t2262 = -t2290 - t2332;
t2225 = -t2255 * t2284 + t2262 * t2288;
t2249 = -0.2e1 * t2325 + t2328;
t2300 = t2225 * t2285 + t2249 * t2289;
t2256 = -qJDD(3) + t2263;
t2261 = -t2273 * t2291 - t2290;
t2226 = t2256 * t2288 - t2261 * t2284;
t2247 = 0.2e1 * t2324 + t2329;
t2299 = t2226 * t2285 - t2247 * t2289;
t2250 = t2326 * qJDD(2);
t2253 = t2326 * t2291;
t2298 = t2250 * t2285 + t2253 * t2289;
t2297 = qJDD(2) * t2289 - t2285 * t2291;
t2252 = -qJDD(2) * t2285 - t2289 * t2291;
t2238 = t2297 * t2280;
t2237 = t2252 * t2280;
t2236 = t2297 * t2277;
t2235 = t2252 * t2277;
t2224 = t2256 * t2284 + t2261 * t2288;
t2223 = t2255 * t2288 + t2262 * t2284;
t2222 = t2250 * t2289 - t2253 * t2285;
t2221 = t2298 * t2280;
t2220 = t2298 * t2277;
t2207 = t2226 * t2289 + t2247 * t2285;
t2206 = t2225 * t2289 - t2249 * t2285;
t2185 = -t2277 * t2224 + t2280 * t2299;
t2184 = -t2277 * t2223 + t2280 * t2300;
t2183 = t2280 * t2224 + t2277 * t2299;
t2182 = t2280 * t2223 + t2277 * t2300;
t2174 = t2213 * t2289 + t2285 * t2316;
t2167 = -t2277 * t2231 + t2280 * t2301;
t2166 = t2280 * t2231 + t2277 * t2301;
t2159 = t2192 * t2288 + t2193 * t2284;
t2150 = t2186 * t2288 + t2187 * t2284;
t2148 = t2179 * t2288 + t2180 * t2284;
t2142 = t2151 * t2289 + t2204 * t2285;
t2141 = t2160 * t2289 + t2190 * t2285;
t2138 = t2149 * t2289 + t2188 * t2285;
t2130 = t2157 * t2288 + t2158 * t2284;
t2121 = t2131 * t2289 + t2202 * t2285;
t2116 = -t2277 * t2159 + t2280 * t2302;
t2115 = t2280 * t2159 + t2277 * t2302;
t2114 = -t2277 * t2150 + t2280 * t2303;
t2113 = t2280 * t2150 + t2277 * t2303;
t2112 = -t2277 * t2148 + t2280 * t2304;
t2111 = t2280 * t2148 + t2277 * t2304;
t2104 = t2132 * t2288 + t2133 * t2284;
t2097 = -t2277 * t2130 + t2280 * t2305;
t2096 = t2280 * t2130 + t2277 * t2305;
t2090 = t2119 * t2288 + t2120 * t2284;
t2089 = t2105 * t2289 - t2285 * t2321;
t2086 = t2091 * t2289 + t2153 * t2285;
t2084 = t2109 * t2288 + t2110 * t2284;
t2083 = t2085 * t2289 + t2181 * t2285;
t2079 = t2100 * t2288 + t2101 * t2284;
t2074 = -t2277 * t2104 + t2280 * t2306;
t2073 = t2280 * t2104 + t2277 * t2306;
t2072 = t2080 * t2289 + t2165 * t2285;
t2067 = -t2277 * t2090 + t2280 * t2307;
t2066 = t2280 * t2090 + t2277 * t2307;
t2065 = -t2277 * t2084 + t2280 * t2308;
t2064 = t2280 * t2084 + t2277 * t2308;
t2062 = t2081 * t2288 + t2082 * t2284;
t2060 = t2077 * t2288 + t2078 * t2284;
t2059 = -t2277 * t2079 + t2280 * t2309;
t2058 = t2280 * t2079 + t2277 * t2309;
t2054 = t2070 * t2288 + t2071 * t2284;
t2051 = t2063 * t2289 + t2122 * t2285;
t2050 = t2061 * t2289 + t2117 * t2285;
t2049 = t2055 * t2289 + t2106 * t2285;
t2046 = -t2277 * t2062 + t2280 * t2310;
t2045 = t2280 * t2062 + t2277 * t2310;
t2044 = -t2277 * t2060 + t2280 * t2311;
t2043 = t2280 * t2060 + t2277 * t2311;
t2041 = t2052 * t2288 + t2053 * t2284;
t2040 = t2042 * t2289 + t2145 * t2285;
t2039 = -t2277 * t2054 + t2280 * t2312;
t2038 = t2280 * t2054 + t2277 * t2312;
t2035 = -t2277 * t2041 + t2280 * t2313;
t2034 = t2280 * t2041 + t2277 * t2313;
t2032 = t2036 * t2288 + t2037 * t2284;
t2031 = t2033 * t2289 + t2056 * t2285;
t2030 = -t2277 * t2032 + t2280 * t2314;
t2029 = t2280 * t2032 + t2277 * t2314;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2279 * t2254 - t2276 * t2317, 0, 0, 0, 0, 0, 0, -t2238 * t2276 + t2252 * t2279, -t2237 * t2276 - t2279 * t2297, 0, -t2167 * t2276 + t2174 * t2279, 0, 0, 0, 0, 0, 0, -t2184 * t2276 + t2206 * t2279, -t2185 * t2276 + t2207 * t2279, -t2221 * t2276 + t2222 * t2279, -t2114 * t2276 + t2142 * t2279, 0, 0, 0, 0, 0, 0, -t2112 * t2276 + t2138 * t2279, -t2116 * t2276 + t2141 * t2279, -t2097 * t2276 + t2121 * t2279, -t2065 * t2276 + t2083 * t2279, 0, 0, 0, 0, 0, 0, -t2067 * t2276 + t2086 * t2279, -t2074 * t2276 + t2089 * t2279, -t2059 * t2276 + t2072 * t2279, -t2035 * t2276 + t2040 * t2279, 0, 0, 0, 0, 0, 0, -t2044 * t2276 + t2050 * t2279, -t2046 * t2276 + t2051 * t2279, -t2039 * t2276 + t2049 * t2279, -t2030 * t2276 + t2031 * t2279; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2276 * t2254 + t2279 * t2317, 0, 0, 0, 0, 0, 0, t2238 * t2279 + t2252 * t2276, t2237 * t2279 - t2276 * t2297, 0, t2167 * t2279 + t2174 * t2276, 0, 0, 0, 0, 0, 0, t2184 * t2279 + t2206 * t2276, t2185 * t2279 + t2207 * t2276, t2221 * t2279 + t2222 * t2276, t2114 * t2279 + t2142 * t2276, 0, 0, 0, 0, 0, 0, t2112 * t2279 + t2138 * t2276, t2116 * t2279 + t2141 * t2276, t2097 * t2279 + t2121 * t2276, t2065 * t2279 + t2083 * t2276, 0, 0, 0, 0, 0, 0, t2067 * t2279 + t2086 * t2276, t2074 * t2279 + t2089 * t2276, t2059 * t2279 + t2072 * t2276, t2035 * t2279 + t2040 * t2276, 0, 0, 0, 0, 0, 0, t2044 * t2279 + t2050 * t2276, t2046 * t2279 + t2051 * t2276, t2039 * t2279 + t2049 * t2276, t2030 * t2279 + t2031 * t2276; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2341, 0, 0, 0, 0, 0, 0, t2236, t2235, 0, t2166, 0, 0, 0, 0, 0, 0, t2182, t2183, t2220, t2113, 0, 0, 0, 0, 0, 0, t2111, t2115, t2096, t2064, 0, 0, 0, 0, 0, 0, t2066, t2073, t2058, t2034, 0, 0, 0, 0, 0, 0, t2043, t2045, t2038, t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2254, 0, 0, 0, 0, 0, 0, t2252, -t2297, 0, t2174, 0, 0, 0, 0, 0, 0, t2206, t2207, t2222, t2142, 0, 0, 0, 0, 0, 0, t2138, t2141, t2121, t2083, 0, 0, 0, 0, 0, 0, t2086, t2089, t2072, t2040, 0, 0, 0, 0, 0, 0, t2050, t2051, t2049, t2031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, 0, 0, 0, 0, 0, 0, t2238, t2237, 0, t2167, 0, 0, 0, 0, 0, 0, t2184, t2185, t2221, t2114, 0, 0, 0, 0, 0, 0, t2112, t2116, t2097, t2065, 0, 0, 0, 0, 0, 0, t2067, t2074, t2059, t2035, 0, 0, 0, 0, 0, 0, t2044, t2046, t2039, t2030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2341, 0, 0, 0, 0, 0, 0, t2236, t2235, 0, t2166, 0, 0, 0, 0, 0, 0, t2182, t2183, t2220, t2113, 0, 0, 0, 0, 0, 0, t2111, t2115, t2096, t2064, 0, 0, 0, 0, 0, 0, t2066, t2073, t2058, t2034, 0, 0, 0, 0, 0, 0, t2043, t2045, t2038, t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2291, -qJDD(2), 0, t2213, 0, 0, 0, 0, 0, 0, t2225, t2226, t2250, t2151, 0, 0, 0, 0, 0, 0, t2149, t2160, t2131, t2085, 0, 0, 0, 0, 0, 0, t2091, t2105, t2080, t2042, 0, 0, 0, 0, 0, 0, t2061, t2063, t2055, t2033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2291, 0, -t2316, 0, 0, 0, 0, 0, 0, t2249, -t2247, t2253, -t2204, 0, 0, 0, 0, 0, 0, -t2188, -t2190, -t2202, -t2181, 0, 0, 0, 0, 0, 0, -t2153, t2321, -t2165, -t2145, 0, 0, 0, 0, 0, 0, -t2117, -t2122, -t2106, -t2056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2231, 0, 0, 0, 0, 0, 0, t2223, t2224, 0, t2150, 0, 0, 0, 0, 0, 0, t2148, t2159, t2130, t2084, 0, 0, 0, 0, 0, 0, t2090, t2104, t2079, t2041, 0, 0, 0, 0, 0, 0, t2060, t2062, t2054, t2032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2262, t2256, t2328, t2187, 0, 0, 0, 0, 0, 0, t2180, t2193, t2158, t2110, 0, 0, 0, 0, 0, 0, t2120, t2133, t2101, t2053, 0, 0, 0, 0, 0, 0, t2078, t2082, t2071, t2037; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2255, t2261, -t2329, t2186, 0, 0, 0, 0, 0, 0, t2179, t2192, t2157, t2109, 0, 0, 0, 0, 0, 0, t2119, t2132, t2100, t2052, 0, 0, 0, 0, 0, 0, t2077, t2081, t2070, t2036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2249, t2247, -t2253, t2204, 0, 0, 0, 0, 0, 0, t2188, t2190, t2202, t2181, 0, 0, 0, 0, 0, 0, t2153, -t2321, t2165, t2145, 0, 0, 0, 0, 0, 0, t2117, t2122, t2106, t2056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2217, t2219, t2189, t2140, 0, 0, 0, 0, 0, 0, t2147, t2163, t2129, t2069, 0, 0, 0, 0, 0, 0, t2099, t2103, t2095, t2048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2218, t2227, t2191, t2139, 0, 0, 0, 0, 0, 0, t2146, t2162, t2128, t2068, 0, 0, 0, 0, 0, 0, t2098, t2102, t2094, t2047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2188, t2190, t2202, t2181, 0, 0, 0, 0, 0, 0, t2153, -t2321, t2165, t2145, 0, 0, 0, 0, 0, 0, t2117, t2122, t2106, t2056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2175, t2177, t2154, t2093, 0, 0, 0, 0, 0, 0, t2118, t2123, t2107, t2057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2176, t2203, t2156, t2092, 0, 0, 0, 0, 0, 0, -t2134, -t2136, -t2152, -t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2153, -t2321, t2165, t2145, 0, 0, 0, 0, 0, 0, t2117, t2122, t2106, t2056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2161, t2144, t2135, t2076; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2143, t2164, t2137, t2075; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2134, t2136, t2152, t2087;];
f_new_reg  = t1;
