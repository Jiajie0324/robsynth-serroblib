% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6PRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6PRRRPR1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:03:23
% EndTime: 2019-03-08 23:03:39
% DurationCPUTime: 6.41s
% Computational Cost: add. (11700->476), mult. (30269->647), div. (0->0), fcn. (23704->12), ass. (0->265)
t207 = sin(qJ(3));
t339 = -pkin(9) - pkin(8);
t178 = t339 * t207;
t211 = cos(qJ(3));
t179 = t339 * t211;
t206 = sin(qJ(4));
t210 = cos(qJ(4));
t142 = t206 * t178 - t210 * t179;
t168 = t206 * t211 + t207 * t210;
t263 = qJD(3) * t339;
t172 = t207 * t263;
t173 = t211 * t263;
t212 = cos(qJ(2));
t203 = sin(pkin(6));
t280 = qJD(1) * t203;
t258 = t212 * t280;
t309 = qJD(4) * t142 - t168 * t258 + t206 * t172 - t210 * t173;
t287 = t206 * t207;
t167 = -t210 * t211 + t287;
t271 = qJD(4) * t210;
t272 = qJD(4) * t206;
t308 = -t167 * t258 - t210 * t172 - t206 * t173 - t178 * t271 - t179 * t272;
t199 = qJD(3) + qJD(4);
t134 = t199 * t168;
t350 = -qJ(5) * t134 - qJD(5) * t167 - t308;
t238 = t199 * t287;
t273 = qJD(3) * t211;
t133 = -t210 * t273 - t211 * t271 + t238;
t349 = t133 * qJ(5) - t168 * qJD(5) - t309;
t208 = sin(qJ(2));
t262 = t208 * t280;
t274 = qJD(3) * t207;
t222 = pkin(3) * t274 - t262;
t241 = pkin(4) * t134 + t222;
t205 = sin(qJ(6));
t209 = cos(qJ(6));
t202 = sin(pkin(12));
t163 = t168 * qJD(2);
t155 = t163 * qJ(5);
t175 = qJD(2) * pkin(8) + t262;
t252 = pkin(9) * qJD(2) + t175;
t204 = cos(pkin(6));
t279 = qJD(1) * t207;
t257 = t204 * t279;
t138 = t211 * t252 + t257;
t129 = t206 * t138;
t288 = t204 * t211;
t185 = qJD(1) * t288;
t231 = t252 * t207;
t137 = t185 - t231;
t131 = qJD(3) * pkin(3) + t137;
t85 = t210 * t131 - t129;
t73 = -t155 + t85;
t64 = pkin(4) * t199 + t73;
t305 = cos(pkin(12));
t275 = qJD(2) * t211;
t256 = t210 * t275;
t277 = qJD(2) * t207;
t259 = t206 * t277;
t161 = -t256 + t259;
t304 = qJ(5) * t161;
t286 = t210 * t138;
t86 = t131 * t206 + t286;
t74 = t86 - t304;
t66 = t305 * t74;
t39 = t202 * t64 + t66;
t35 = pkin(10) * t199 + t39;
t114 = t305 * t161 + t163 * t202;
t196 = -pkin(3) * t211 - pkin(2);
t156 = t196 * qJD(2) - t258;
t123 = t161 * pkin(4) + qJD(5) + t156;
t224 = -t202 * t161 + t305 * t163;
t53 = t114 * pkin(5) - pkin(10) * t224 + t123;
t15 = t205 * t53 + t209 * t35;
t267 = qJD(2) * qJD(3);
t254 = t211 * t267;
t282 = -qJD(4) * t256 - t210 * t254;
t121 = qJD(2) * t238 + t282;
t122 = t134 * qJD(2);
t79 = -t121 * t202 + t305 * t122;
t80 = -t305 * t121 - t202 * t122;
t197 = pkin(3) * t277;
t278 = qJD(2) * t203;
t255 = qJD(1) * t278;
t157 = qJD(3) * t197 + t208 * t255;
t96 = pkin(4) * t122 + t157;
t31 = pkin(5) * t79 - pkin(10) * t80 + t96;
t243 = t212 * t255;
t283 = qJD(3) * t185 + t211 * t243;
t104 = -qJD(3) * t231 + t283;
t105 = -qJD(3) * t138 - t207 * t243;
t249 = -t206 * t104 + t210 * t105;
t46 = -qJD(4) * t86 + t249;
t217 = t121 * qJ(5) - t163 * qJD(5) + t46;
t247 = -t210 * t104 - t206 * t105 - t131 * t271 + t138 * t272;
t25 = -qJ(5) * t122 - qJD(5) * t161 - t247;
t9 = t202 * t217 + t305 * t25;
t3 = -qJD(6) * t15 - t205 * t9 + t209 * t31;
t343 = qJD(6) + t114;
t348 = t15 * t343 + t3;
t233 = t205 * t35 - t209 * t53;
t2 = -qJD(6) * t233 + t205 * t31 + t209 * t9;
t347 = t233 * t343 + t2;
t329 = t349 * t202 + t350 * t305;
t83 = -t133 * t202 + t305 * t134;
t84 = -t305 * t133 - t202 * t134;
t346 = pkin(5) * t83 - pkin(10) * t84 + t241;
t345 = t114 * t224;
t248 = t343 * t209;
t320 = t205 * t79;
t344 = -t248 * t343 - t320;
t269 = qJD(6) * t209;
t321 = t202 * t74;
t38 = t305 * t64 - t321;
t34 = -t199 * pkin(5) - t38;
t8 = t202 * t25 - t305 * t217;
t342 = t8 * t205 + t34 * t269;
t270 = qJD(6) * t205;
t341 = t8 * t209 - t34 * t270;
t109 = -qJ(5) * t167 + t142;
t141 = t210 * t178 + t179 * t206;
t225 = -qJ(5) * t168 + t141;
t68 = t109 * t202 - t305 * t225;
t338 = t8 * t68;
t291 = t203 * t208;
t159 = -t207 * t291 + t288;
t160 = t204 * t207 + t211 * t291;
t111 = t159 * t210 - t160 * t206;
t112 = t159 * t206 + t160 * t210;
t70 = -t305 * t111 + t112 * t202;
t337 = t8 * t70;
t127 = t305 * t167 + t168 * t202;
t128 = -t202 * t167 + t305 * t168;
t146 = pkin(4) * t167 + t196;
t65 = pkin(5) * t127 - pkin(10) * t128 + t146;
t69 = t305 * t109 + t202 * t225;
t36 = -t205 * t69 + t209 * t65;
t336 = qJD(6) * t36 + t346 * t205 + t209 * t329;
t37 = t205 * t65 + t209 * t69;
t335 = -qJD(6) * t37 - t205 * t329 + t346 * t209;
t334 = pkin(4) * t163;
t1 = t2 * t209;
t333 = t3 * t205;
t97 = -t209 * t199 + t205 * t224;
t99 = t199 * t205 + t209 * t224;
t331 = t99 * t97;
t330 = t350 * t202 - t349 * t305;
t319 = t205 * t80;
t50 = qJD(6) * t99 + t319;
t328 = -t205 * t50 - t97 * t269;
t327 = pkin(3) * qJD(4);
t326 = qJD(2) * pkin(2);
t325 = t224 * t97;
t324 = t114 * t34;
t323 = t127 * t79;
t322 = t233 * t209;
t318 = t205 * t84;
t317 = t205 * t97;
t316 = t205 * t99;
t75 = t209 * t79;
t315 = t209 * t84;
t314 = t209 * t97;
t313 = t209 * t99;
t49 = -t199 * t269 - t209 * t80 + t224 * t270;
t312 = t49 * t205;
t311 = t50 * t209;
t310 = t99 * t224;
t87 = -t137 * t206 - t286;
t221 = t87 + t304;
t253 = t305 * t206;
t88 = t210 * t137 - t129;
t78 = -t155 + t88;
t307 = -t202 * t78 + t305 * t221 + (t202 * t210 + t253) * t327;
t292 = t202 * t206;
t152 = (t305 * t210 - t292) * t327;
t44 = t202 * t221 + t305 * t78;
t306 = t152 - t44;
t303 = t343 * t224;
t302 = t224 ^ 2;
t301 = t224 * t199;
t299 = t114 ^ 2;
t298 = t114 * t199;
t297 = t114 * t205;
t295 = t156 * t163;
t294 = t163 * t161;
t293 = t175 * t207;
t290 = t203 * t212;
t214 = qJD(2) ^ 2;
t289 = t203 * t214;
t213 = qJD(3) ^ 2;
t285 = t213 * t207;
t284 = t213 * t211;
t195 = pkin(3) * t210 + pkin(4);
t154 = pkin(3) * t253 + t202 * t195;
t200 = t207 ^ 2;
t201 = t211 ^ 2;
t281 = t200 - t201;
t276 = qJD(2) * t208;
t266 = t114 * t322 - t15 * t297 + t1;
t265 = t208 * t289;
t264 = t207 * t214 * t211;
t261 = t203 * t276;
t260 = t212 * t278;
t62 = pkin(5) * t224 + pkin(10) * t114 + t334;
t59 = t197 + t62;
t22 = -t205 * t44 + t209 * t59;
t251 = -t152 * t205 - t22;
t23 = t205 * t59 + t209 * t44;
t250 = t152 * t209 - t23;
t246 = t15 * t224 + t342;
t245 = t207 * t260;
t244 = t211 * t260;
t242 = t207 * t254;
t176 = -t258 - t326;
t240 = -t176 - t258;
t237 = -t114 * t38 + t224 * t39;
t150 = pkin(10) + t154;
t236 = -t150 * t79 + t324;
t192 = pkin(4) * t202 + pkin(10);
t235 = -t192 * t79 + t324;
t234 = -t15 * t205 + t322;
t232 = t314 + t316;
t230 = t75 + (-t270 - t297) * t343;
t229 = t224 * t233 - t341;
t228 = -t123 * t224 - t8;
t227 = -t209 * t49 - t99 * t270;
t71 = t202 * t111 + t305 * t112;
t60 = -t205 * t71 - t209 * t290;
t226 = t205 * t290 - t209 * t71;
t145 = t175 * t211 + t257;
t223 = t156 * t161 + t247;
t153 = -pkin(3) * t292 + t305 * t195;
t220 = qJD(3) * (-t240 - t326);
t219 = qJD(6) * t234 + t1 - t333;
t118 = -t175 * t274 + t283;
t119 = -t175 * t273 + (-qJD(3) * t204 - t260) * t279;
t144 = t185 - t293;
t218 = t118 * t211 - t119 * t207 + (-t144 * t211 - t145 * t207) * qJD(3);
t215 = t114 * t123 - t9;
t193 = -t305 * pkin(4) - pkin(5);
t149 = -pkin(5) - t153;
t143 = t197 + t334;
t136 = -qJD(3) * t160 - t245;
t135 = qJD(3) * t159 + t244;
t100 = -t161 ^ 2 + t163 ^ 2;
t93 = -t282 + (t161 - t259) * t199;
t57 = -qJD(4) * t112 - t206 * t135 + t210 * t136;
t56 = qJD(4) * t111 + t210 * t135 + t206 * t136;
t52 = t80 + t298;
t51 = -t79 + t301;
t47 = -t299 + t302;
t41 = t305 * t73 - t321;
t40 = t202 * t73 + t66;
t27 = t202 * t57 + t305 * t56;
t26 = t202 * t56 - t305 * t57;
t21 = t205 * t62 + t209 * t41;
t20 = -t205 * t41 + t209 * t62;
t19 = t317 * t343 - t311;
t18 = t248 * t99 - t312;
t17 = -t310 - t344;
t16 = t230 + t325;
t13 = qJD(6) * t226 - t205 * t27 + t209 * t261;
t12 = qJD(6) * t60 + t205 * t261 + t209 * t27;
t6 = -t114 * t232 + t227 + t328;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, -t212 * t289, 0, 0, 0, 0, 0, 0, 0, 0, -t211 * t265 + (t136 - t245) * qJD(3), t207 * t265 + (-t135 - t244) * qJD(3) (t135 * t211 - t136 * t207 + (-t159 * t211 - t160 * t207) * qJD(3)) * qJD(2), t118 * t160 + t119 * t159 + t145 * t135 + t144 * t136 + (t176 - t258) * t261, 0, 0, 0, 0, 0, 0, t57 * t199 + (-t122 * t212 + t161 * t276) * t203, -t56 * t199 + (t121 * t212 + t163 * t276) * t203, t111 * t121 - t112 * t122 - t161 * t56 - t163 * t57, t46 * t111 - t247 * t112 + t86 * t56 + t85 * t57 + (t156 * t276 - t157 * t212) * t203, 0, 0, 0, 0, 0, 0, -t26 * t199 + (t114 * t276 - t212 * t79) * t203, -t27 * t199 + (-t212 * t80 + t224 * t276) * t203, -t114 * t27 + t224 * t26 + t70 * t80 - t71 * t79, -t38 * t26 + t39 * t27 + t337 + t9 * t71 + (t123 * t276 - t212 * t96) * t203, 0, 0, 0, 0, 0, 0, t13 * t343 + t26 * t97 + t50 * t70 + t60 * t79, -t12 * t343 + t226 * t79 + t26 * t99 - t49 * t70, -t12 * t97 - t13 * t99 + t226 * t50 + t49 * t60, t12 * t15 - t13 * t233 - t2 * t226 + t26 * t34 + t3 * t60 + t337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t242, -0.2e1 * t281 * t267, t284, -0.2e1 * t242, -t285, 0, -pkin(8) * t284 + t207 * t220, pkin(8) * t285 + t211 * t220 (-t200 - t201) * t243 + t218 ((t144 * t207 - t145 * t211) * t212 + (-t176 - t326) * t208) * t280 + t218 * pkin(8), -t121 * t168 - t133 * t163, t121 * t167 - t122 * t168 + t133 * t161 - t134 * t163, -t133 * t199, t122 * t167 + t134 * t161, -t134 * t199, 0, t196 * t122 + t156 * t134 + t157 * t167 + t222 * t161 - t309 * t199, -t196 * t121 - t156 * t133 + t157 * t168 + t222 * t163 + t308 * t199, t141 * t121 - t142 * t122 + t85 * t133 - t86 * t134 + t308 * t161 + t309 * t163 + t167 * t247 - t46 * t168, t46 * t141 - t142 * t247 + t222 * t156 + t157 * t196 - t308 * t86 - t309 * t85, t128 * t80 + t224 * t84, -t114 * t84 - t127 * t80 - t128 * t79 - t224 * t83, t84 * t199, t114 * t83 + t323, -t83 * t199, 0, t241 * t114 + t123 * t83 + t96 * t127 + t146 * t79 - t330 * t199, t123 * t84 + t96 * t128 + t146 * t80 - t329 * t199 + t224 * t241, -t329 * t114 - t9 * t127 + t8 * t128 + t224 * t330 - t38 * t84 - t39 * t83 + t68 * t80 - t69 * t79, t241 * t123 + t96 * t146 + t329 * t39 - t330 * t38 + t9 * t69 + t338, t128 * t227 + t84 * t313, -t232 * t84 + (t312 - t311 + (-t313 + t317) * qJD(6)) * t128, t128 * t75 - t49 * t127 + t99 * t83 + (-t128 * t270 + t315) * t343, -t328 * t128 + t84 * t317, -t128 * t320 - t50 * t127 - t97 * t83 + (-t128 * t269 - t318) * t343, t343 * t83 + t323, t3 * t127 + t128 * t342 - t233 * t83 + t34 * t318 + t330 * t97 + t335 * t343 + t36 * t79 + t68 * t50, -t2 * t127 + t128 * t341 - t15 * t83 + t34 * t315 + t330 * t99 - t336 * t343 - t37 * t79 - t68 * t49, t36 * t49 - t37 * t50 - t335 * t99 - t336 * t97 + t234 * t84 + (-t2 * t205 - t3 * t209 + (-t15 * t209 - t205 * t233) * qJD(6)) * t128, t336 * t15 + t2 * t37 - t233 * t335 + t3 * t36 + t330 * t34 + t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t264, t281 * t214, 0, t264, 0, 0, t240 * t277, -t176 * t275 + (t144 + t293) * qJD(3) - t283, 0, 0, t294, t100, t93, -t294, 0, 0, -t161 * t197 - t295 - t87 * t199 + (-t286 + (-pkin(3) * t199 - t131) * t206) * qJD(4) + t249, t88 * t199 + (-t163 * t277 - t199 * t271) * pkin(3) + t223 (t86 + t87) * t163 + (-t85 + t88) * t161 + (t121 * t210 - t122 * t206 + (-t161 * t210 + t163 * t206) * qJD(4)) * pkin(3), -t85 * t87 - t86 * t88 + (-t156 * t277 - t206 * t247 + t210 * t46 + (-t206 * t85 + t210 * t86) * qJD(4)) * pkin(3), t345, t47, t52, -t345, t51, 0, -t143 * t114 - t307 * t199 + t228, -t143 * t224 - t306 * t199 + t215, -t306 * t114 - t153 * t80 - t154 * t79 + t224 * t307 + t237, -t123 * t143 - t8 * t153 + t9 * t154 + t306 * t39 - t307 * t38, t18, t6, t17, t19, t16, -t303, t149 * t50 + t307 * t97 + t236 * t205 + (-t150 * t269 + t251) * t343 + t229, -t149 * t49 + t307 * t99 + t236 * t209 + (t150 * t270 - t250) * t343 + t246, t22 * t99 + t23 * t97 + (-t150 * t50 - t152 * t97 + (t150 * t99 + t233) * qJD(6)) * t209 + (-t150 * t49 + t152 * t99 - t3 + (t150 * t97 - t15) * qJD(6)) * t205 + t266, t8 * t149 + t15 * t250 + t150 * t219 - t233 * t251 + t307 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294, t100, t93, -t294, 0, 0, t86 * t199 - t295 + t46, t199 * t85 + t223, 0, 0, t345, t47, t52, -t345, t51, 0, -t114 * t334 + t199 * t40 + t228, t41 * t199 - t224 * t334 + t215, t41 * t114 - t40 * t224 + (-t202 * t79 - t305 * t80) * pkin(4) + t237, t38 * t40 - t39 * t41 + (-t123 * t163 + t202 * t9 - t305 * t8) * pkin(4), t18, t6, t17, t19, t16, -t303, t193 * t50 - t40 * t97 + t235 * t205 + (-t192 * t269 - t20) * t343 + t229, -t193 * t49 - t40 * t99 + t235 * t209 + (t192 * t270 + t21) * t343 + t246, t20 * t99 - t333 + t21 * t97 + (-t311 - t312) * t192 + ((t313 + t317) * t192 + t234) * qJD(6) + t266, -t15 * t21 + t192 * t219 + t8 * t193 + t20 * t233 - t34 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79 + t301, t80 - t298, -t299 - t302, t114 * t39 + t224 * t38 + t96, 0, 0, 0, 0, 0, 0, t230 - t325, -t310 + t344 -(t314 - t316) * t114 - t227 + t328, t205 * t347 + t209 * t348 - t34 * t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t331, -t97 ^ 2 + t99 ^ 2, t343 * t97 - t49, -t331, -t319 + (-qJD(6) + t343) * t99, t79, -t34 * t99 + t348, t34 * t97 - t347, 0, 0;];
tauc_reg  = t4;
