% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRP10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP10_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP10_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPRPRP10_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:32:32
% EndTime: 2019-03-09 03:32:38
% DurationCPUTime: 1.86s
% Computational Cost: add. (1177->173), mult. (2251->282), div. (0->0), fcn. (1584->4), ass. (0->119)
t69 = sin(qJ(5));
t65 = t69 ^ 2;
t71 = cos(qJ(5));
t67 = t71 ^ 2;
t125 = t65 + t67;
t70 = sin(qJ(3));
t59 = t70 * qJD(3);
t29 = t125 * t59;
t123 = qJ(4) * t70;
t134 = pkin(3) + pkin(8);
t72 = cos(qJ(3));
t129 = t134 * t72;
t144 = t123 + t129;
t122 = t72 * qJ(4);
t142 = -pkin(3) * t70 + t122;
t42 = qJ(2) - t142;
t37 = pkin(8) * t70 + t42;
t74 = -pkin(1) - pkin(7);
t132 = pkin(4) - t74;
t44 = t132 * t72;
t143 = t37 * t71 + t44 * t69;
t126 = t65 - t67;
t45 = t126 * qJD(5);
t88 = pkin(5) * t69 - qJ(6) * t71;
t41 = qJ(4) + t88;
t138 = qJD(5) * t88 - t69 * qJD(6);
t60 = t72 * qJD(3);
t55 = t74 * t60;
t89 = pkin(5) * t71 + qJ(6) * t69;
t81 = -pkin(4) - t89;
t7 = t138 * t70 + t60 * t81 + t55;
t141 = (t41 * t70 + t129) * qJD(5) + t7;
t130 = t70 * t134;
t57 = t70 * t74;
t43 = -pkin(4) * t70 + t57;
t58 = t70 * qJD(4);
t140 = (t122 - t130) * qJD(3) - qJD(5) * t43 + t58;
t95 = t132 * t59;
t96 = -t72 * qJD(4) + qJD(2);
t75 = -qJD(5) * t143 - t69 * t96 - t71 * t95;
t119 = qJD(5) * t69;
t61 = qJD(5) * t71;
t79 = t144 * qJD(3);
t5 = t37 * t119 - t71 * (t79 + t96) + t69 * t95 - t44 * t61;
t6 = -t69 * t79 + t75;
t10 = -t37 * t69 + t44 * t71;
t86 = t10 * t69 - t143 * t71;
t2 = -qJD(5) * t86 - t5 * t69 + t6 * t71;
t101 = qJ(6) * t59;
t113 = t72 * qJD(6);
t3 = -t101 - t5 + t113;
t133 = t70 * pkin(5);
t90 = pkin(3) * t72 + t123;
t77 = t69 * (pkin(8) * t72 + t90);
t4 = (t77 + t133) * qJD(3) - t75;
t8 = qJ(6) * t72 + t143;
t9 = -pkin(5) * t72 - t10;
t92 = t69 * t9 + t71 * t8;
t1 = qJD(5) * t92 + t3 * t69 - t4 * t71;
t139 = -qJD(5) * t89 + t71 * qJD(6);
t137 = 0.2e1 * qJD(2);
t136 = 0.2e1 * qJD(4);
t135 = 0.2e1 * qJD(6);
t22 = qJD(4) - t139;
t131 = t70 * t22;
t128 = t134 * t29;
t127 = qJ(4) * t60 + t58;
t66 = t70 ^ 2;
t68 = t72 ^ 2;
t124 = t66 - t68;
t121 = qJD(3) * t69;
t120 = qJD(3) * t71;
t118 = qJD(5) * t70;
t117 = qJD(5) * t72;
t116 = qJD(5) * t134;
t112 = qJ(2) * qJD(3);
t111 = qJ(4) * qJD(5);
t109 = t69 * t117;
t108 = t69 * t116;
t107 = t71 * t117;
t106 = t71 * t116;
t105 = t74 * t59;
t104 = t71 * t60;
t103 = t69 * t61;
t102 = t70 * t60;
t100 = qJD(5) * (t66 + t68);
t99 = t124 * qJD(3);
t50 = 0.2e1 * t102;
t98 = t69 * t104;
t97 = t66 * t103;
t91 = t69 * t8 - t71 * t9;
t87 = t10 * t71 + t143 * t69;
t39 = -pkin(4) * t60 + t55;
t78 = qJD(5) * t144 + t39;
t19 = t70 * t81 + t57;
t76 = qJD(5) * t19 - t131 + (-t41 * t72 + t130) * qJD(3);
t64 = qJ(2) * t137;
t63 = qJ(4) * t136;
t51 = -0.2e1 * t102;
t49 = -0.2e1 * t103;
t48 = 0.2e1 * t103;
t40 = 0.2e1 * t99;
t35 = -t59 * t69 + t107;
t34 = t71 * t100;
t33 = t60 * t69 + t61 * t70;
t32 = t59 * t71 + t109;
t31 = t69 * t100;
t30 = t118 * t69 - t104;
t26 = pkin(3) * t59 - t127;
t23 = qJD(3) * t90 + t96;
t21 = 0.2e1 * t102 * t67 - 0.2e1 * t97;
t20 = 0.2e1 * t102 * t65 + 0.2e1 * t97;
t18 = -t118 * t126 + t98;
t17 = t109 * t70 + t71 * t99;
t16 = 0.4e1 * t103 * t70 + t126 * t60;
t14 = 0.2e1 * t107 * t70 - 0.2e1 * t121 * t124;
t13 = -t45 * t66 + 0.2e1 * t70 * t98;
t12 = (0.1e1 - t125) * t50;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t64, t51, t40, 0, t50, 0, 0, 0.2e1 * qJD(2) * t70 + 0.2e1 * t112 * t72, 0.2e1 * qJD(2) * t72 - 0.2e1 * t112 * t70, 0, t64, 0, 0, 0, t51, t40, t50, 0, -0.2e1 * t23 * t70 - 0.2e1 * t42 * t60, -0.2e1 * t23 * t72 + 0.2e1 * t42 * t59, 0.2e1 * t42 * t23, t20, 0.2e1 * t13, t14, t21, -0.2e1 * t17, t51, 0.2e1 * (-t120 * t43 + t6) * t72 + 0.2e1 * (-qJD(3) * t10 + t119 * t43 - t39 * t71) * t70, 0.2e1 * (t121 * t43 + t5) * t72 + 0.2e1 * (qJD(3) * t143 + t39 * t69 + t43 * t61) * t70, -0.2e1 * t86 * t60 + 0.2e1 * (-qJD(5) * t87 - t5 * t71 - t6 * t69) * t70, 0.2e1 * t10 * t6 - 0.2e1 * t143 * t5 + 0.2e1 * t39 * t43, t20, t14, -0.2e1 * t13, t51, 0.2e1 * t17, t21, 0.2e1 * (-t120 * t19 - t4) * t72 + 0.2e1 * (qJD(3) * t9 + t119 * t19 - t7 * t71) * t70, 0.2e1 * t92 * t60 + 0.2e1 * (-qJD(5) * t91 + t3 * t71 + t4 * t69) * t70, 0.2e1 * (-t121 * t19 + t3) * t72 + 0.2e1 * (-qJD(3) * t8 - t19 * t61 - t7 * t69) * t70, 0.2e1 * t19 * t7 + 0.2e1 * t3 * t8 + 0.2e1 * t4 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t34, 0 (qJD(3) * t87 + t39) * t70 + (qJD(3) * t43 - t2) * t72, 0, 0, 0, 0, 0, 0, t31, 0, -t34 (qJD(3) * t91 + t7) * t70 + (qJD(3) * t19 - t1) * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, 0, -t60, 0, -t105, -t55, 0, 0, 0, t59, t60, 0, 0, 0, t26, t105, t55 (qJD(3) * t142 + t58) * t74, t18, -t16, -t32, -t18, -t35, 0, -t140 * t71 + t69 * t78, t140 * t69 + t78 * t71, -t2, t39 * qJ(4) + t43 * qJD(4) - t134 * t2, t18, -t32, t16, 0, t35, -t18, t141 * t69 + t71 * t76, -t1, -t141 * t71 + t69 * t76, -t1 * t134 + t19 * t22 + t7 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, -t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, t60, -t26, 0, 0, 0, 0, 0, 0, t33, -t30, -t29, t127 - t128, 0, 0, 0, 0, 0, 0, t33, -t29, t30, t41 * t60 - t128 + t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, t63, t49, 0.2e1 * t45, 0, t48, 0, 0, 0.2e1 * qJD(4) * t69 + 0.2e1 * t111 * t71, 0.2e1 * qJD(4) * t71 - 0.2e1 * t111 * t69, 0, t63, t49, 0, -0.2e1 * t45, 0, 0, t48, 0.2e1 * t22 * t69 + 0.2e1 * t41 * t61, 0, 0.2e1 * t119 * t41 - 0.2e1 * t22 * t71, 0.2e1 * t41 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, 0, 0, t105, 0, 0, 0, 0, 0, 0, -t32, -t35, 0, t2, 0, 0, 0, 0, 0, 0, -t32, 0, t35, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t30, -t59, t6, t5, 0, 0, 0, t33, 0, -t59, t30, 0 (-t77 - 0.2e1 * t133) * qJD(3) + t75, t139 * t70 - t60 * t88, -0.2e1 * t101 - t5 + 0.2e1 * t113, -pkin(5) * t4 + qJ(6) * t3 + qJD(6) * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, t35, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t35 (pkin(5) * t59 - qJ(6) * t117) * t71 + (t101 + (pkin(5) * qJD(5) - qJD(6)) * t72) * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, 0, -t61, 0, t108, t106, 0, 0, 0, -t119, 0, 0, t61, 0, t108, t138, -t106, t138 * t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t61, 0, 0, 0, 0, 0, 0, 0, 0, -t119, 0, t61, -t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, qJ(6) * t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, t33, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, 0, -t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t11;
