% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6PRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x29]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRRPR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR8_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:53:21
% EndTime: 2019-03-08 23:53:29
% DurationCPUTime: 2.84s
% Computational Cost: add. (2237->308), mult. (6800->566), div. (0->0), fcn. (6619->12), ass. (0->168)
t103 = cos(qJ(3));
t99 = sin(qJ(3));
t179 = qJD(3) * t99;
t95 = sin(pkin(7));
t118 = (qJ(5) * t179 - qJD(5) * t103) * t95;
t102 = cos(qJ(4));
t98 = sin(qJ(4));
t177 = qJD(4) * t98;
t182 = cos(pkin(7));
t154 = t99 * t182;
t139 = pkin(2) * t154;
t188 = t103 * t95;
t117 = pkin(9) * t188 + t139;
t59 = t182 * pkin(10) + t117;
t60 = (-pkin(3) * t103 - pkin(10) * t99 - pkin(2)) * t95;
t61 = (pkin(3) * t99 - pkin(10) * t103) * t95 * qJD(3);
t145 = qJD(3) * t182;
t136 = t103 * t145;
t82 = t95 * t179;
t62 = -pkin(2) * t136 + pkin(9) * t82;
t89 = qJD(4) * t102;
t19 = t102 * t62 + t59 * t177 - t60 * t89 - t98 * t61;
t12 = t19 - t118;
t101 = cos(qJ(6));
t201 = pkin(4) + pkin(11);
t175 = t101 * t201;
t184 = t98 * qJ(5);
t209 = t201 * t102 + t184;
t100 = sin(qJ(2));
t104 = cos(qJ(2));
t183 = cos(pkin(6));
t153 = t183 * t95;
t137 = qJD(3) * t153;
t148 = t104 * t182;
t189 = t100 * t99;
t96 = sin(pkin(6));
t30 = t103 * t137 + ((t103 * t148 - t189) * qJD(3) + (-t100 * t154 + t103 * t104) * qJD(2)) * t96;
t65 = -t96 * t104 * t95 + t183 * t182;
t208 = t65 * qJD(4) + t30;
t119 = t100 * t103 + t99 * t148;
t108 = t119 * t96 + t99 * t153;
t180 = qJD(2) * t96;
t157 = t100 * t180;
t207 = -qJD(4) * t108 + t95 * t157;
t193 = t95 * t99;
t66 = -t102 * t182 + t98 * t193;
t94 = t102 ^ 2;
t151 = qJD(4) * (t98 ^ 2 - t94);
t97 = sin(qJ(6));
t91 = t97 ^ 2;
t191 = -t101 ^ 2 + t91;
t147 = t191 * qJD(6);
t10 = t208 * t102 + t207 * t98;
t149 = t103 * t182;
t29 = t99 * t137 + (t119 * qJD(3) + (t100 * t149 + t104 * t99) * qJD(2)) * t96;
t33 = t108 * t102 + t65 * t98;
t42 = t96 * t189 + (-t96 * t148 - t153) * t103;
t173 = qJD(3) * t103;
t158 = t95 * t173;
t43 = t66 * qJD(4) - t102 * t158;
t67 = t102 * t193 + t98 * t182;
t206 = (-t10 * t103 + t33 * t179) * t95 - t29 * t67 + t42 * t43;
t32 = -t65 * t102 + t108 * t98;
t44 = qJD(4) * t67 + t98 * t158;
t9 = -t207 * t102 + t208 * t98;
t205 = (-t103 * t9 + t32 * t179) * t95 - t29 * t66 - t42 * t44;
t170 = qJD(5) * t102;
t200 = pkin(5) + pkin(10);
t79 = t200 * t102;
t204 = qJD(4) * t209 - qJD(6) * t79 - t170;
t203 = 0.2e1 * t95;
t202 = 0.2e1 * qJD(5);
t199 = pkin(10) * t95;
t198 = t44 * pkin(4);
t8 = -t44 * pkin(5) - t12;
t197 = t8 * t97;
t187 = t103 * t97;
t45 = t101 * t66 + t95 * t187;
t25 = t45 * qJD(6) + t101 * t82 + t97 * t44;
t196 = t25 * t97;
t195 = t43 * t98;
t194 = t8 * t101;
t192 = t102 * t59 + t98 * t60;
t186 = t201 * t97;
t185 = t25 * t101;
t181 = qJ(5) * t102;
t178 = qJD(4) * t97;
t176 = qJD(6) * t97;
t172 = qJD(4) * t101;
t171 = qJD(4) * t103;
t169 = qJD(6) * t101;
t168 = qJD(6) * t102;
t167 = qJD(6) * t201;
t166 = -0.2e1 * pkin(3) * qJD(4);
t164 = pkin(10) * t177;
t163 = t97 * t177;
t90 = t95 ^ 2;
t162 = t90 * t173;
t161 = t97 * t168;
t160 = t98 * t172;
t159 = t97 * t169;
t156 = t98 * t89;
t155 = t101 * t168;
t152 = t102 * t60 - t98 * t59;
t146 = pkin(4) * t177 - t98 * qJD(5);
t144 = pkin(4) * t82;
t143 = t90 * t157;
t141 = t99 * t162;
t140 = t97 * t160;
t35 = pkin(4) * t188 - t152;
t88 = pkin(10) * t89;
t138 = pkin(5) * t89 + t88;
t133 = -t102 * pkin(4) - t184;
t22 = t67 * pkin(5) + pkin(11) * t188 + t35;
t58 = -pkin(2) * t149 - t182 * pkin(3) + pkin(9) * t193;
t109 = -t67 * qJ(5) + t58;
t27 = t201 * t66 + t109;
t6 = t101 * t27 + t97 * t22;
t18 = t42 * t101 + t32 * t97;
t17 = t32 * t101 - t42 * t97;
t46 = -t101 * t188 + t97 * t66;
t132 = t101 * t46 + t45 * t97;
t71 = -pkin(3) - t209;
t78 = t200 * t98;
t41 = t101 * t71 + t97 * t78;
t131 = t43 * qJ(5) - t67 * qJD(5);
t20 = t102 * t61 - t60 * t177 - t59 * t89 + t98 * t62;
t34 = qJ(5) * t188 - t192;
t126 = t10 * t101 - t33 * t176;
t125 = t10 * t97 + t33 * t169;
t36 = -t101 * t43 - t67 * t176;
t124 = -t67 * t169 + t97 * t43;
t122 = -t102 * t171 + t98 * t179;
t121 = t102 * t179 + t98 * t171;
t120 = -t43 * pkin(5) - t20;
t74 = t200 * t177;
t116 = -t74 + (t201 * t98 - t181) * qJD(6);
t115 = t122 * t95;
t114 = t121 * t95;
t63 = t117 * qJD(3);
t113 = t133 * qJD(4) + t170;
t112 = -(pkin(11) * t98 - t181) * qJD(4) - t146;
t111 = t10 * t102 + t9 * t98 + (t102 * t32 - t33 * t98) * qJD(4);
t13 = -t20 - t144;
t110 = -t12 * t102 + t13 * t98 + (t102 * t35 + t34 * t98) * qJD(4);
t107 = t131 + t63;
t81 = 0.2e1 * t156;
t75 = -pkin(3) + t133;
t69 = -t98 * t169 - t97 * t89;
t68 = t101 * t89 - t98 * t176;
t64 = -qJ(5) * t89 + t146;
t40 = t101 * t78 - t97 * t71;
t38 = -0.2e1 * t67 * t43;
t37 = t67 * t89 - t195;
t31 = t66 * pkin(4) + t109;
t28 = -t66 * pkin(5) - t34;
t26 = -t66 * t176 - t97 * t82 + (qJD(6) * t188 + t44) * t101;
t24 = -t41 * qJD(6) + t101 * t138 + t97 * t112;
t23 = t101 * t112 - t97 * t138 - t78 * t169 + t71 * t176;
t16 = t107 + t198;
t15 = t29 * t102 - t42 * t177;
t14 = t29 * t98 + t42 * t89;
t5 = t101 * t22 - t97 * t27;
t4 = t17 * qJD(6) + t29 * t101 + t9 * t97;
t3 = -t18 * qJD(6) + t9 * t101 - t29 * t97;
t2 = -t97 * (t44 * pkin(11) + t131 + t198) + t101 * t120 - t6 * qJD(6) + (-t97 * t139 + (-pkin(9) * t187 - t99 * t175) * t95) * qJD(3);
t1 = t27 * t176 - t101 * (t201 * t44 + t107) - t22 * t169 - t97 * (-t201 * t82 + t120);
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t10 * t33 + 0.2e1 * t29 * t42 + 0.2e1 * t32 * t9, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t157, -t104 * t180, 0, 0, 0, 0, 0, -t103 * t143 - t29 * t182 + t65 * t82, t99 * t143 + t65 * t158 - t30 * t182, 0, 0, 0, 0, 0, -t205, -t206, -t10 * t66 - t32 * t43 - t33 * t44 + t67 * t9, t205, t206, -t10 * t34 - t12 * t33 + t13 * t32 + t16 * t42 + t29 * t31 + t35 * t9, 0, 0, 0, 0, 0, -t10 * t45 - t17 * t43 - t26 * t33 + t3 * t67, t10 * t46 + t18 * t43 + t25 * t33 - t4 * t67; 0, 0, 0, 0, 0.2e1 * t141, 0.2e1 * (t103 ^ 2 - t99 ^ 2) * t90 * qJD(3), t136 * t203, -0.2e1 * t145 * t193, 0, -0.2e1 * t90 * pkin(2) * t179 - 0.2e1 * t63 * t182, -0.2e1 * pkin(2) * t162 + 0.2e1 * t62 * t182, t38, 0.2e1 * t43 * t66 - 0.2e1 * t44 * t67 (t103 * t43 + t67 * t179) * t203 (t103 * t44 - t66 * t179) * t203, -0.2e1 * t141, 0.2e1 * t58 * t44 + 0.2e1 * t63 * t66 + 0.2e1 * (-t20 * t103 + t152 * t179) * t95, -0.2e1 * t58 * t43 + 0.2e1 * t63 * t67 + 0.2e1 * (-t19 * t103 - t192 * t179) * t95, 0.2e1 * t12 * t66 + 0.2e1 * t13 * t67 + 0.2e1 * t34 * t44 - 0.2e1 * t35 * t43, -0.2e1 * t16 * t66 - 0.2e1 * t31 * t44 + 0.2e1 * (-t103 * t13 + t35 * t179) * t95, -0.2e1 * t16 * t67 + 0.2e1 * t31 * t43 + 0.2e1 * (t103 * t12 - t34 * t179) * t95, 0.2e1 * t12 * t34 + 0.2e1 * t13 * t35 + 0.2e1 * t16 * t31, 0.2e1 * t46 * t25, 0.2e1 * t25 * t45 + 0.2e1 * t26 * t46, 0.2e1 * t25 * t67 - 0.2e1 * t43 * t46, 0.2e1 * t26 * t67 - 0.2e1 * t43 * t45, t38, 0.2e1 * t2 * t67 - 0.2e1 * t26 * t28 - 0.2e1 * t43 * t5 - 0.2e1 * t45 * t8, 0.2e1 * t1 * t67 + 0.2e1 * t25 * t28 + 0.2e1 * t43 * t6 + 0.2e1 * t8 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t30, 0, 0, 0, 0, 0, -t15, t14, t111, t15, -t14, pkin(10) * t111 + t29 * t75 + t42 * t64, 0, 0, 0, 0, 0 (-t172 * t33 + t3) * t98 + (qJD(4) * t17 + t126) * t102 (t178 * t33 - t4) * t98 + (-qJD(4) * t18 - t125) * t102; 0, 0, 0, 0, 0, 0, t158, -t82, 0, -t63, t62, t37, -t43 * t102 - t98 * t44 + (-t102 * t66 - t67 * t98) * qJD(4), t115, t114, 0, -pkin(3) * t44 - t63 * t102 - t122 * t199 + t58 * t177, pkin(3) * t43 - t121 * t199 + t58 * t89 + t63 * t98 (-t102 * t44 - t195 + (t102 * t67 + t66 * t98) * qJD(4)) * pkin(10) + t110, pkin(10) * t115 + t16 * t102 - t31 * t177 - t75 * t44 - t64 * t66, pkin(10) * t114 - t16 * t98 - t31 * t89 + t75 * t43 - t64 * t67, pkin(10) * t110 + t16 * t75 + t31 * t64, t46 * t163 + (-t169 * t46 - t196) * t102, t132 * t177 + (-t185 - t26 * t97 + (-t101 * t45 + t46 * t97) * qJD(6)) * t102 (t178 * t67 + t25) * t98 + (qJD(4) * t46 + t124) * t102 (t172 * t67 + t26) * t98 + (qJD(4) * t45 - t36) * t102, t37, t24 * t67 - t79 * t26 - t40 * t43 + t74 * t45 + (-t172 * t28 + t2) * t98 + (qJD(4) * t5 - t176 * t28 + t194) * t102, t23 * t67 + t79 * t25 + t41 * t43 - t74 * t46 + (t178 * t28 + t1) * t98 + (-qJD(4) * t6 - t169 * t28 - t197) * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -0.2e1 * t151, 0, 0, 0, t98 * t166, t102 * t166, 0, 0.2e1 * t64 * t102 - 0.2e1 * t75 * t177, -0.2e1 * t64 * t98 - 0.2e1 * t75 * t89, 0.2e1 * t75 * t64, -0.2e1 * t156 * t91 + 0.2e1 * t159 * t94, -0.4e1 * t102 * t140 - 0.2e1 * t94 * t147, 0.2e1 * t151 * t97 - 0.2e1 * t155 * t98, 0.2e1 * t101 * t151 + 0.2e1 * t161 * t98, t81, 0.2e1 * (-t172 * t79 + t24) * t98 + 0.2e1 * (qJD(4) * t40 - t74 * t101 - t176 * t79) * t102, 0.2e1 * (t178 * t79 + t23) * t98 + 0.2e1 * (-qJD(4) * t41 - t169 * t79 + t74 * t97) * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9, -t10, 0, t9, t10, -pkin(4) * t9 + qJ(5) * t10 + qJD(5) * t33, 0, 0, 0, 0, 0, t125, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, -t44, t82, t20, t19, pkin(4) * t43 - qJ(5) * t44 - qJD(5) * t66, -t20 - 0.2e1 * t144, 0.2e1 * t118 - t19, -pkin(4) * t13 - qJ(5) * t12 - qJD(5) * t34, -t46 * t176 + t185, -qJD(6) * t132 + t101 * t26 - t196, t36, t124, 0, t43 * t175 - qJ(5) * t26 - qJD(5) * t45 + t197 + (t101 * t28 + t186 * t67) * qJD(6), -t43 * t186 + qJ(5) * t25 + qJD(5) * t46 + t194 + (t175 * t67 - t28 * t97) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, -t177, 0, -t88, t164, t113, t88, -t164, t113 * pkin(10), t102 * t147 + t140, 0.4e1 * t155 * t97 - t177 * t191, t68, t69, 0, -t204 * t101 + t116 * t97, t116 * t101 + t204 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, qJ(5) * t202, -0.2e1 * t159, 0.2e1 * t147, 0, 0, 0, 0.2e1 * qJ(5) * t169 + 0.2e1 * qJD(5) * t97, -0.2e1 * qJ(5) * t176 + 0.2e1 * qJD(5) * t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t82, 0, t13, 0, 0, 0, 0, 0, t36, t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, 0, t88, 0, 0, 0, 0, 0, t68, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t26, -t43, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155 + t163, t160 + t161, t89, t24, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176, -t169, 0, t97 * t167, t101 * t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176, -t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
