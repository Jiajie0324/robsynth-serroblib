% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6PRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1]';
% 
% Output:
% tau_reg [6x29]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPR8_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR8_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR8_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:53:24
% EndTime: 2019-03-08 23:53:43
% DurationCPUTime: 7.79s
% Computational Cost: add. (6630->602), mult. (17012->852), div. (0->0), fcn. (14711->14), ass. (0->292)
t218 = sin(pkin(7));
t223 = sin(qJ(3));
t227 = cos(qJ(3));
t274 = (pkin(3) * t223 - pkin(10) * t227) * t218;
t219 = sin(pkin(6));
t224 = sin(qJ(2));
t374 = t219 * t224;
t344 = qJD(1) * t374;
t430 = qJD(3) * t274 - t218 * t344;
t228 = cos(qJ(2));
t391 = cos(pkin(7));
t328 = t223 * t391;
t257 = -t224 * t328 + t227 * t228;
t144 = t257 * t219;
t326 = t227 * t391;
t377 = t218 * t223;
t276 = pkin(2) * t326 - pkin(9) * t377;
t429 = qJD(1) * t144 - t276 * qJD(3);
t222 = sin(qJ(4));
t226 = cos(qJ(4));
t314 = t391 * qJD(2);
t282 = t314 + qJD(3);
t358 = qJD(2) * t218;
t343 = t223 * t358;
t141 = t222 * t282 + t226 * t343;
t129 = qJD(6) + t141;
t173 = pkin(9) * t358 + t344;
t359 = qJD(1) * t228;
t186 = qJD(2) * pkin(2) + t219 * t359;
t220 = cos(pkin(6));
t379 = t218 * t220;
t345 = qJD(1) * t379;
t426 = t391 * t186 + t345;
t87 = t227 * t173 + t223 * t426;
t73 = pkin(10) * t282 + t87;
t329 = t220 * t391;
t205 = qJD(1) * t329;
t292 = -pkin(3) * t227 - pkin(10) * t223;
t98 = t205 + (qJD(2) * t292 - t186) * t218;
t31 = t222 * t73 - t226 * t98;
t366 = -qJD(5) - t31;
t408 = pkin(9) * t218;
t428 = qJDD(2) * t408 + (qJD(2) * t359 + qJDD(1) * t224) * t219 + qJD(3) * t345;
t255 = t223 * t228 + t224 * t326;
t143 = t255 * t219;
t315 = qJD(3) * t391;
t294 = t223 * t315;
t356 = qJD(3) * t227;
t339 = t218 * t356;
t362 = pkin(2) * t294 + pkin(9) * t339 - qJD(1) * t143;
t346 = t222 * t377;
t427 = qJD(4) * t346 - t226 * t339;
t342 = t227 * t358;
t197 = -qJD(4) + t342;
t260 = qJD(4) * t282;
t311 = t391 * qJDD(2);
t280 = t311 + qJDD(3);
t338 = t222 * t356;
t348 = t223 * qJDD(2);
t354 = qJD(4) * t226;
t71 = t218 * (qJD(2) * (t223 * t354 + t338) + t222 * t348) + t222 * t260 - t226 * t280;
t375 = t218 * t227;
t361 = pkin(2) * t328 + pkin(9) * t375;
t153 = pkin(10) * t391 + t361;
t154 = (-pkin(2) + t292) * t218;
t355 = qJD(4) * t222;
t425 = -t153 * t355 + t154 * t354 + t222 * t430 - t429 * t226;
t424 = t153 * t354 + t154 * t355 - t429 * t222 - t226 * t430;
t389 = sin(pkin(12));
t321 = t389 * t224;
t390 = cos(pkin(12));
t322 = t390 * t228;
t250 = -t220 * t322 + t321;
t331 = t219 * t390;
t423 = t218 * t331 + t250 * t391;
t320 = t389 * t228;
t323 = t390 * t224;
t251 = t220 * t320 + t323;
t330 = t219 * t389;
t422 = -t218 * t330 + t251 * t391;
t327 = t226 * t391;
t110 = -qJD(4) * t327 + t427;
t376 = t218 * t226;
t171 = t222 * t391 + t223 * t376;
t421 = qJ(5) * t110 - qJD(5) * t171 + t362;
t420 = (qJDD(3) + 0.2e1 * t311) * t218;
t325 = t228 * t391;
t419 = -t223 * t224 + t227 * t325;
t304 = t222 * t342;
t418 = -qJD(5) * t222 - t87 + (-t304 + t355) * pkin(4);
t365 = pkin(5) * t141 - t366;
t108 = -t219 * t419 - t220 * t375;
t168 = t220 * t323 + t320;
t74 = t168 * t223 + t227 * t423;
t169 = -t220 * t321 + t322;
t76 = t169 * t223 + t227 * t422;
t266 = g(1) * t76 + g(2) * t74 + g(3) * t108;
t32 = t222 * t98 + t226 * t73;
t29 = qJ(5) * t197 - t32;
t139 = t222 * t343 - t226 * t282;
t409 = pkin(5) * t139;
t15 = -t29 - t409;
t414 = pkin(4) + pkin(11);
t334 = t218 * t348;
t70 = -t222 * t280 + (-t260 - t334) * t226 + t427 * qJD(2);
t66 = -qJDD(6) + t70;
t417 = t414 * t66 + (t15 - t32 + t409) * t129;
t86 = -t223 * t173 + t227 * t426;
t221 = sin(qJ(6));
t225 = cos(qJ(6));
t101 = t139 * t221 - t197 * t225;
t350 = qJDD(2) * t227;
t206 = t218 * t350;
t351 = qJD(2) * qJD(3);
t337 = t223 * t351;
t155 = t218 * t337 + qJDD(4) - t206;
t27 = qJD(6) * t101 + t155 * t221 - t225 * t71;
t357 = qJD(3) * t223;
t404 = -t218 * (qJ(5) * t357 - qJD(5) * t227) - t425;
t415 = t141 ^ 2;
t230 = qJD(2) ^ 2;
t413 = pkin(5) + pkin(10);
t410 = pkin(4) * t155;
t407 = pkin(10) * t155;
t111 = qJD(4) * t171 + t218 * t338;
t405 = -pkin(5) * t111 - t404;
t340 = t218 * t357;
t403 = -pkin(4) * t340 + t424;
t402 = pkin(10) * qJD(4);
t99 = -t225 * t139 - t197 * t221;
t401 = t129 * t99;
t400 = t197 * t29;
t399 = t197 * t32;
t398 = t197 * t99;
t397 = t221 * t66;
t352 = qJD(6) * t225;
t353 = qJD(6) * t221;
t26 = t139 * t352 + t225 * t155 + t197 * t353 + t221 * t71;
t396 = t225 * t26;
t61 = t225 * t66;
t387 = qJ(5) * t226;
t395 = -qJ(5) * t354 + t342 * t387 + t418;
t370 = t222 * t227;
t159 = qJD(2) * t274;
t392 = t222 * t159 + t226 * t86;
t394 = -t413 * t355 - (-pkin(5) * t370 + qJ(5) * t223) * t358 - t392;
t393 = pkin(4) * t111 + t421;
t388 = qJ(5) * t139;
t386 = t101 * t129;
t385 = t101 * t197;
t384 = t139 * t197;
t383 = t141 * t139;
t382 = t141 * t197;
t149 = t155 * qJ(5);
t373 = t219 * t228;
t167 = -t218 * t373 + t329;
t381 = t167 * t218;
t215 = t218 ^ 2;
t380 = t215 * t230;
t378 = t218 * t222;
t372 = t221 * t222;
t371 = t222 * t225;
t368 = t224 * t230;
t367 = t226 * t227;
t364 = qJDD(1) - g(3);
t363 = t226 * t153 + t222 * t154;
t216 = t223 ^ 2;
t360 = -t227 ^ 2 + t216;
t201 = t413 * t226;
t347 = t218 * t374;
t341 = qJD(2) * t374;
t336 = t227 * t351;
t335 = qJDD(1) * t379;
t332 = -qJ(5) * t222 - pkin(3);
t207 = qJDD(1) * t373;
t301 = qJD(1) * t341;
t150 = qJDD(2) * pkin(2) + t207 - t301;
t252 = -t150 * t328 + t173 * t357 - t223 * t335 + (-t186 * t315 - t428) * t227;
t23 = pkin(10) * t280 - t252;
t204 = qJDD(1) * t329;
t262 = t337 - t350;
t263 = t336 + t348;
t54 = t204 + (pkin(3) * t262 - pkin(10) * t263 - t150) * t218;
t319 = -t222 * t54 - t226 * t23 - t98 * t354 + t73 * t355;
t318 = t222 * t23 - t226 * t54 + t73 * t354 + t98 * t355;
t83 = t222 * t86;
t316 = -t159 * t226 + t83;
t313 = -t222 * t153 + t154 * t226;
t312 = t129 * t221;
t309 = t215 * t219 * t368;
t305 = t218 * t341;
t170 = -t327 + t346;
t152 = -pkin(3) * t391 - t276;
t238 = -t171 * qJ(5) + t152;
t52 = t170 * t414 + t238;
t299 = pkin(5) * t110 + qJD(6) * t52 + t340 * t414 - t424;
t82 = pkin(4) * t375 - t313;
t47 = pkin(5) * t171 + pkin(11) * t375 + t82;
t295 = -qJD(6) * t47 - t111 * t414 - t421;
t293 = t218 * t230 * t391;
t288 = qJDD(5) + t318;
t4 = -pkin(5) * t70 - t155 * t414 + t288;
t275 = -t150 * t326 + t173 * t356 + t186 * t294 + t223 * t428 - t227 * t335;
t24 = -pkin(3) * t280 + t275;
t232 = t70 * qJ(5) - t141 * qJD(5) + t24;
t8 = t414 * t71 + t232;
t291 = t221 * t4 + t225 * t8;
t200 = t413 * t222;
t290 = -qJD(6) * t200 - t418 + t197 * (pkin(11) * t222 - t387);
t172 = -t226 * t414 + t332;
t289 = qJD(6) * t172 - qJD(4) * t201 + (pkin(5) * t367 - t223 * t414) * t358 + t316;
t125 = t221 * t343 - t225 * t304;
t287 = t225 * t355 + t125;
t126 = (t221 * t370 + t223 * t225) * t358;
t286 = t221 * t355 - t126;
t12 = t197 * t414 + t365;
t72 = -pkin(3) * t282 - t86;
t231 = -t141 * qJ(5) + t72;
t25 = t139 * t414 + t231;
t9 = t12 * t225 - t221 * t25;
t10 = t12 * t221 + t225 * t25;
t256 = t223 * t325 + t224 * t227;
t109 = t219 * t256 + t220 * t377;
t79 = t109 * t222 - t167 * t226;
t38 = t108 * t225 + t221 * t79;
t37 = -t108 * t221 + t225 * t79;
t80 = t109 * t226 + t167 * t222;
t281 = 0.2e1 * t314 + qJD(3);
t184 = qJD(5) * t197;
t6 = -t149 + t184 + t319;
t279 = pkin(4) * t226 - t332;
t81 = qJ(5) * t375 - t363;
t273 = -t129 * t312 - t61;
t272 = -t170 * t221 + t225 * t375;
t112 = t170 * t225 + t221 * t375;
t271 = t197 * t226;
t233 = t218 * t250 - t331 * t391;
t75 = t168 * t227 - t223 * t423;
t40 = t222 * t233 + t75 * t226;
t234 = t218 * t251 + t330 * t391;
t77 = t169 * t227 - t223 * t422;
t42 = t222 * t234 + t77 * t226;
t269 = -g(1) * t42 - g(2) * t40 - g(3) * t80;
t102 = t144 * t222 - t226 * t347;
t93 = -t168 * t328 - t227 * t250;
t57 = -t168 * t376 + t222 * t93;
t95 = -t169 * t328 - t227 * t251;
t59 = -t169 * t376 + t222 * t95;
t268 = -g(1) * t59 - g(2) * t57 - g(3) * t102;
t103 = t144 * t226 + t222 * t347;
t58 = t168 * t378 + t226 * t93;
t60 = t169 * t378 + t226 * t95;
t267 = g(1) * t60 + g(2) * t58 + g(3) * t103;
t265 = -g(1) * t77 - g(2) * t75 - g(3) * t109;
t92 = t168 * t326 - t223 * t250;
t94 = t169 * t326 - t223 * t251;
t264 = g(1) * t94 + g(2) * t92 + g(3) * t143;
t254 = -t129 ^ 2 * t225 + t397;
t249 = -t197 * t72 - t407;
t33 = t139 * pkin(4) + t231;
t248 = t197 * t33 + t407;
t69 = t220 * t339 + (t257 * qJD(2) + qJD(3) * t419) * t219;
t16 = qJD(4) * t80 + t222 * t69 - t226 * t305;
t68 = t220 * t340 + (qJD(2) * t255 + qJD(3) * t256) * t219;
t246 = t108 * t71 + t139 * t68 - t155 * t79 + t16 * t197;
t17 = t222 * t305 - t109 * t355 + (qJD(4) * t167 + t69) * t226;
t245 = t108 * t70 - t141 * t68 + t155 * t80 - t17 * t197;
t39 = t222 * t75 - t226 * t233;
t41 = t222 * t77 - t226 * t234;
t244 = g(1) * t41 + g(2) * t39 + g(3) * t79 - t318;
t243 = t269 - t319;
t242 = t197 * t402 + t266;
t2 = -qJD(6) * t10 - t221 * t8 + t225 * t4;
t11 = t71 * pkin(4) + t232;
t241 = -t11 + t242;
t237 = -t70 - t384;
t5 = -pkin(5) * t71 - t6;
t236 = t5 + (t129 * t414 + t388) * t129 + t269;
t235 = t141 * t33 + qJDD(5) - t244;
t128 = -t186 * t218 + t205;
t107 = -t150 * t218 + t204;
t85 = pkin(4) * t141 + t388;
t78 = t170 * pkin(4) + t238;
t53 = -pkin(5) * t170 - t81;
t49 = qJD(6) * t272 + t111 * t225 - t221 * t340;
t48 = qJD(6) * t112 + t111 * t221 + t225 * t340;
t46 = -pkin(4) * t343 + t316;
t44 = -qJ(5) * t343 - t392;
t28 = pkin(4) * t197 - t366;
t7 = t288 - t410;
t1 = t9 * qJD(6) + t291;
t3 = [t364, 0 (qJDD(2) * t228 - t368) * t219 (-qJDD(2) * t224 - t228 * t230) * t219, 0, 0, 0, 0, 0, -t108 * t280 - t227 * t309 + t262 * t381 - t282 * t68, -t109 * t280 + t223 * t309 + t263 * t381 - t282 * t69, 0, 0, 0, 0, 0, t246, -t245, -t139 * t17 + t141 * t16 - t70 * t79 - t71 * t80, -t246, t245, t108 * t11 + t16 * t28 - t17 * t29 + t33 * t68 - t6 * t80 + t7 * t79 - g(3), 0, 0, 0, 0, 0 (-qJD(6) * t38 + t16 * t225 - t221 * t68) * t129 - t37 * t66 + t17 * t99 + t80 * t27 -(qJD(6) * t37 + t16 * t221 + t225 * t68) * t129 + t38 * t66 + t17 * t101 + t80 * t26; 0, qJDD(2), g(1) * t251 + g(2) * t250 - g(3) * t373 + t207, g(1) * t169 + g(2) * t168 - t364 * t374 (qJDD(2) * t216 + 0.2e1 * t223 * t336) * t215, 0.2e1 * (t227 * t348 - t351 * t360) * t215, t223 * t420 + t281 * t339, t227 * t420 - t281 * t340, t280 * t391, t276 * t280 - t275 * t391 - g(1) * t95 - g(2) * t93 - g(3) * t144 + (-t107 * t227 + t128 * t357) * t218 + (-pkin(2) * t262 + t227 * t301) * t215 - t362 * t282, -t361 * t280 + t252 * t391 + (t107 * t223 + t128 * t356) * t218 + (-pkin(2) * t263 - t223 * t301) * t215 + t264 + t429 * t282, -t110 * t141 - t171 * t70, t110 * t139 - t111 * t141 + t170 * t70 - t171 * t71, t110 * t197 + t155 * t171 + (t141 * t357 + t227 * t70) * t218, t111 * t197 - t155 * t170 + (-t139 * t357 + t227 * t71) * t218 (-t155 * t227 - t197 * t357) * t218, t313 * t155 + t152 * t71 + t24 * t170 + t72 * t111 + (t227 * t318 - t31 * t357) * t218 + t424 * t197 + t362 * t139 - t267, -t363 * t155 - t152 * t70 + t24 * t171 - t72 * t110 + (-t227 * t319 - t32 * t357) * t218 + t425 * t197 + t362 * t141 - t268, -t110 * t28 + t111 * t29 + t139 * t404 + t141 * t403 + t170 * t6 + t171 * t7 - t70 * t82 + t71 * t81 - t264, -t11 * t170 - t111 * t33 + t155 * t82 - t71 * t78 + (-t227 * t7 + t28 * t357) * t218 - t403 * t197 - t393 * t139 + t267, -t11 * t171 + t110 * t33 - t155 * t81 + t70 * t78 + (t227 * t6 - t29 * t357) * t218 + t404 * t197 - t393 * t141 + t268, t11 * t78 + t6 * t81 + t7 * t82 - g(1) * (-pkin(2) * t251 + t95 * pkin(3) + t60 * pkin(4) + t94 * pkin(10) + t59 * qJ(5) + t169 * t408) - g(2) * (-pkin(2) * t250 + t93 * pkin(3) + t58 * pkin(4) + t92 * pkin(10) + t57 * qJ(5) + t168 * t408) - g(3) * (pkin(3) * t144 + pkin(4) * t103 + pkin(10) * t143 + qJ(5) * t102 + (pkin(2) * t228 + t224 * t408) * t219) + t393 * t33 + t404 * t29 + t403 * t28, t101 * t48 - t26 * t272, t101 * t49 + t112 * t26 + t27 * t272 - t48 * t99, -t101 * t110 + t129 * t48 + t171 * t26 + t272 * t66, t110 * t99 - t112 * t66 + t129 * t49 - t171 * t27, -t110 * t129 - t171 * t66 -(-t221 * t52 + t225 * t47) * t66 + t2 * t171 - t9 * t110 + t53 * t27 - t5 * t112 - t15 * t49 - g(1) * (t221 * t59 + t225 * t94) - g(2) * (t221 * t57 + t225 * t92) - g(3) * (t102 * t221 + t143 * t225) + t405 * t99 + (t221 * t295 - t225 * t299) * t129 (t221 * t47 + t225 * t52) * t66 - t1 * t171 + t10 * t110 + t53 * t26 - t5 * t272 + t15 * t48 - g(1) * (-t221 * t94 + t225 * t59) - g(2) * (-t221 * t92 + t225 * t57) - g(3) * (t102 * t225 - t143 * t221) + (t221 * t299 + t225 * t295) * t129 + t405 * t101; 0, 0, 0, 0, -t223 * t227 * t380, t360 * t380, -t227 * t293 + t334, t223 * t293 + t206, t280, -t128 * t343 + t282 * t87 + t266 - t275, -t128 * t342 + t282 * t86 + t252 - t265, -t141 * t271 - t222 * t70 (-t70 + t384) * t226 + (-t71 + t382) * t222, -t197 * t354 + t155 * t222 + (-t141 * t223 + t197 * t367) * t358, t197 * t355 + t155 * t226 + (t139 * t223 - t197 * t370) * t358, t197 * t343, t31 * t343 - pkin(3) * t71 - t87 * t139 - t83 * t197 + t249 * t222 + (-t24 + (t159 + t402) * t197 + t266) * t226, pkin(3) * t70 - t392 * t197 + t32 * t343 - t87 * t141 + t249 * t226 + (t24 - t242) * t222, -t139 * t44 - t141 * t46 + (-t6 - t197 * t28 + (qJD(4) * t141 - t71) * pkin(10)) * t226 + (t7 - t400 + (qJD(4) * t139 - t70) * pkin(10)) * t222 + t265, -t139 * t395 + t197 * t46 + t222 * t248 - t226 * t241 + t279 * t71 - t28 * t343, -t141 * t395 - t197 * t44 + t222 * t241 + t226 * t248 - t279 * t70 + t29 * t343, -t28 * t46 - t29 * t44 + t395 * t33 + (t7 * t222 - t6 * t226 + (t222 * t29 + t226 * t28) * qJD(4) + t265) * pkin(10) + (-t11 + t266) * t279, -t221 * t226 * t26 + (-t226 * t352 + t286) * t101, t101 * t125 + t126 * t99 + (t101 * t225 - t221 * t99) * t355 + (t221 * t27 - t396 + (t101 * t221 + t225 * t99) * qJD(6)) * t226, t222 * t26 + t286 * t129 + (-t129 * t352 - t385 + t397) * t226, -t222 * t27 + t287 * t129 + (t129 * t353 + t398 + t61) * t226, -t129 * t271 - t222 * t66 -(-t172 * t221 + t200 * t225) * t66 + t2 * t222 + t201 * t27 - g(1) * (t225 * t77 - t372 * t76) - g(2) * (t225 * t75 - t372 * t74) - g(3) * (-t108 * t372 + t109 * t225) + t394 * t99 - t287 * t15 + (t221 * t290 - t225 * t289) * t129 + (-t15 * t353 - t197 * t9 + t5 * t225) * t226 (t172 * t225 + t200 * t221) * t66 - t1 * t222 + t201 * t26 - g(1) * (-t221 * t77 - t371 * t76) - g(2) * (-t221 * t75 - t371 * t74) - g(3) * (-t108 * t371 - t109 * t221) + t286 * t15 + (t221 * t289 + t225 * t290) * t129 + t394 * t101 + (t10 * t197 - t15 * t352 - t5 * t221) * t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, -t139 ^ 2 + t415, t237, -t382 - t71, t155, -t141 * t72 + t244 - t399, t139 * t72 + t197 * t31 - t243, pkin(4) * t70 - qJ(5) * t71 + (-t29 - t32) * t141 + (t28 + t366) * t139, t139 * t85 + t235 + t399 - 0.2e1 * t410, -t139 * t33 + t141 * t85 + t197 * t366 + 0.2e1 * t149 - t184 + t243, -t6 * qJ(5) - t7 * pkin(4) - t33 * t85 - t28 * t32 - g(1) * (-pkin(4) * t41 + qJ(5) * t42) - g(2) * (-pkin(4) * t39 + qJ(5) * t40) - g(3) * (-pkin(4) * t79 + qJ(5) * t80) + t366 * t29, -t101 * t312 + t396 (-t27 - t386) * t225 + (-t26 + t401) * t221, t101 * t139 + t273, -t139 * t99 + t254, t129 * t139, qJ(5) * t27 + t9 * t139 + t236 * t221 + t225 * t417 + t365 * t99, qJ(5) * t26 - t10 * t139 + t365 * t101 - t221 * t417 + t236 * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t155 - t383, -t197 ^ 2 - t415, t235 - t400 - t410, 0, 0, 0, 0, 0, t273 + t398, t254 + t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101 * t99, t101 ^ 2 - t99 ^ 2, t26 + t401, -t27 + t386, -t66, t10 * t129 - t15 * t101 - g(1) * (-t221 * t76 + t225 * t41) - g(2) * (-t221 * t74 + t225 * t39) - g(3) * t37 + t2, t15 * t99 - g(1) * (-t221 * t41 - t225 * t76) - g(2) * (-t221 * t39 - t225 * t74) + g(3) * t38 - t291 + (t129 - qJD(6)) * t9;];
tau_reg  = t3;
