% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6PRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6PRRRPR8_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-09 23:00
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6PRRRPR8_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR8_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR8_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6PRRRPR8_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR8_jacobiaD_rot_sym_varpar: pkin has to be [12x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:04
	% EndTime: 2019-10-09 23:00:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:04
	% EndTime: 2019-10-09 23:00:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:04
	% EndTime: 2019-10-09 23:00:05
	% DurationCPUTime: 0.10s
	% Computational Cost: add. (46->7), mult. (159->21), div. (18->4), fcn. (175->5), ass. (0->15)
	t39 = cos(pkin(12));
	t41 = sin(qJ(2));
	t42 = cos(qJ(2));
	t45 = sin(pkin(12)) * cos(pkin(6));
	t37 = t39 * t42 - t41 * t45;
	t34 = 0.1e1 / t37 ^ 2;
	t49 = qJD(2) * t34;
	t36 = t39 * t41 + t42 * t45;
	t33 = t36 ^ 2;
	t30 = t33 * t34 + 0.1e1;
	t46 = t37 * t49;
	t47 = t36 / t37 * t49;
	t48 = (t33 * t47 + t36 * t46) / t30 ^ 2;
	t28 = 0.1e1 / t30;
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, -0.2e1 * t48 + 0.2e1 * (t28 * t46 + (t28 * t47 - t34 * t48) * t36) * t36, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:05
	% EndTime: 2019-10-09 23:00:05
	% DurationCPUTime: 0.69s
	% Computational Cost: add. (1326->63), mult. (4214->161), div. (275->12), fcn. (5416->13), ass. (0->79)
	t164 = sin(pkin(7));
	t162 = t164 ^ 2;
	t206 = 0.2e1 * t162;
	t166 = cos(pkin(12));
	t163 = sin(pkin(12));
	t170 = sin(qJ(2));
	t168 = cos(pkin(6));
	t172 = cos(qJ(2));
	t190 = t168 * t172;
	t182 = -t163 * t170 + t166 * t190;
	t165 = sin(pkin(6));
	t167 = cos(pkin(7));
	t195 = t165 * t167;
	t146 = t182 * t164 + t166 * t195;
	t196 = t164 * t172;
	t156 = -t165 * t196 + t168 * t167;
	t141 = atan2(t146, t156);
	t136 = sin(t141);
	t137 = cos(t141);
	t123 = t136 * t146 + t137 * t156;
	t120 = 0.1e1 / t123;
	t169 = sin(qJ(3));
	t171 = cos(qJ(3));
	t191 = t168 * t170;
	t180 = t163 * t191 - t166 * t172;
	t181 = t163 * t190 + t166 * t170;
	t187 = t163 * t164 * t165;
	t183 = -t167 * t181 + t187;
	t135 = t183 * t169 - t171 * t180;
	t131 = 0.1e1 / t135;
	t153 = 0.1e1 / t156;
	t121 = 0.1e1 / t123 ^ 2;
	t132 = 0.1e1 / t135 ^ 2;
	t154 = 0.1e1 / t156 ^ 2;
	t147 = t163 * t195 + t164 * t181;
	t145 = t147 ^ 2;
	t119 = t121 * t145 + 0.1e1;
	t152 = t180 * qJD(2);
	t157 = -t163 * t172 - t166 * t191;
	t150 = t157 * qJD(2);
	t194 = t165 * t170;
	t198 = t146 * t154;
	t185 = t194 * t198;
	t144 = t146 ^ 2;
	t140 = t144 * t154 + 0.1e1;
	t138 = 0.1e1 / t140;
	t199 = t138 * t164;
	t115 = (-qJD(2) * t185 + t150 * t153) * t199;
	t184 = -t136 * t156 + t137 * t146;
	t189 = qJD(2) * t165;
	t186 = t170 * t189;
	t112 = (t136 * t150 + t137 * t186) * t164 + t184 * t115;
	t204 = t112 * t120 * t121;
	t205 = (-t121 * t147 * t152 * t164 - t145 * t204) / t119 ^ 2;
	t192 = t167 * t171;
	t197 = t180 * t169;
	t134 = -t171 * t187 + t181 * t192 - t197;
	t130 = t134 ^ 2;
	t127 = t130 * t132 + 0.1e1;
	t151 = t181 * qJD(2);
	t193 = t167 * t169;
	t129 = t152 * t193 - t151 * t171 + (t183 * t171 + t197) * qJD(3);
	t201 = t129 * t131 * t132;
	t128 = t135 * qJD(3) - t151 * t169 - t152 * t192;
	t202 = t128 * t132;
	t203 = (-t130 * t201 + t134 * t202) / t127 ^ 2;
	t143 = -t171 * t181 + t180 * t193;
	t200 = t134 * t143;
	t188 = t154 * t162 * t170;
	t142 = -t169 * t181 - t180 * t192;
	t179 = -t153 * t157 + t185;
	t155 = t153 * t154;
	t149 = t182 * qJD(2);
	t125 = 0.1e1 / t127;
	t117 = 0.1e1 / t119;
	t116 = t179 * t199;
	t113 = (t136 * t157 + t137 * t194) * t164 - t184 * t116;
	t111 = t179 / t140 ^ 2 * (-t144 * t155 * t186 + t150 * t198) * t206 + (-t149 * t153 * t164 + (-t150 * t188 + (-t157 * t188 + (t155 * t165 * t170 ^ 2 * t206 - t154 * t196) * t146) * qJD(2)) * t165) * t138;
	t1 = [0, t111, 0, 0, 0, 0; 0, (-(t123 * t116 * t115 + t184 * t111) * t121 * t117 + 0.2e1 * (t117 * t204 + t121 * t205) * t113) * t147 + (0.2e1 * t180 * t120 * t205 + (-t151 * t120 + (t180 * t112 + t113 * t152 + (-(t115 * t157 - t116 * t150 + t172 * t189) * t137 - (-t149 + (qJD(2) * t116 - t115) * t194) * t136) * t147) * t121) * t117) * t164, 0, 0, 0, 0; 0, 0.2e1 * (-t131 * t142 + t132 * t200) * t203 + ((t143 * qJD(3) - t151 * t192 + t152 * t169) * t131 + 0.2e1 * t200 * t201 + (-t142 * t129 - (-t142 * qJD(3) + t151 * t193 + t152 * t171) * t134 - t143 * t128) * t132) * t125, -0.2e1 * t203 + 0.2e1 * (t125 * t202 + (-t125 * t201 - t132 * t203) * t134) * t134, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:05
	% EndTime: 2019-10-09 23:00:07
	% DurationCPUTime: 1.71s
	% Computational Cost: add. (5341->130), mult. (16984->252), div. (538->12), fcn. (21480->15), ass. (0->122)
	t287 = sin(qJ(2));
	t290 = cos(qJ(2));
	t354 = cos(pkin(12));
	t355 = cos(pkin(6));
	t320 = t355 * t354;
	t353 = sin(pkin(12));
	t306 = -t353 * t287 + t290 * t320;
	t271 = t306 * qJD(2);
	t282 = sin(pkin(7));
	t283 = sin(pkin(6));
	t323 = t354 * t283 * t282;
	t358 = -qJD(3) * t323 + t271;
	t286 = sin(qJ(3));
	t305 = -t287 * t320 - t353 * t290;
	t300 = t305 * qJD(2);
	t289 = cos(qJ(3));
	t301 = t306 * t289;
	t357 = qJD(3) * t301 + t286 * t300;
	t284 = cos(pkin(7));
	t302 = t306 * t286;
	t297 = t284 * t302 - t289 * t305;
	t338 = t284 * t289;
	t225 = t297 * qJD(3) + t358 * t286 - t300 * t338;
	t343 = t305 * t286;
	t249 = -t284 * t301 + t289 * t323 - t343;
	t247 = t249 ^ 2;
	t334 = t289 * t290;
	t337 = t286 * t287;
	t311 = t284 * t334 - t337;
	t327 = t355 * t282;
	t262 = -t311 * t283 - t289 * t327;
	t260 = 0.1e1 / t262 ^ 2;
	t241 = t247 * t260 + 0.1e1;
	t344 = t249 * t260;
	t335 = t287 * t289;
	t336 = t286 * t290;
	t309 = t284 * t336 + t335;
	t310 = t284 * t335 + t336;
	t321 = qJD(3) * t327;
	t245 = t286 * t321 + (t310 * qJD(2) + t309 * qJD(3)) * t283;
	t259 = 0.1e1 / t262;
	t345 = t245 * t259 * t260;
	t356 = -0.2e1 * (t225 * t344 - t247 * t345) / t241 ^ 2;
	t242 = atan2(-t249, t262);
	t237 = sin(t242);
	t238 = cos(t242);
	t219 = -t237 * t249 + t238 * t262;
	t216 = 0.1e1 / t219;
	t319 = t355 * t353;
	t304 = t287 * t319 - t354 * t290;
	t303 = t354 * t287 + t290 * t319;
	t328 = t283 * t353;
	t322 = t282 * t328;
	t307 = -t284 * t303 + t322;
	t253 = t307 * t286 - t289 * t304;
	t264 = t282 * t303 + t284 * t328;
	t285 = sin(qJ(4));
	t288 = cos(qJ(4));
	t236 = t253 * t288 + t264 * t285;
	t232 = 0.1e1 / t236;
	t217 = 0.1e1 / t219 ^ 2;
	t233 = 0.1e1 / t236 ^ 2;
	t239 = 0.1e1 / t241;
	t209 = (-t225 * t259 + t245 * t344) * t239;
	t318 = -t237 * t262 - t238 * t249;
	t205 = t318 * t209 - t237 * t225 + t238 * t245;
	t352 = t205 * t216 * t217;
	t272 = t303 * qJD(2);
	t273 = t304 * qJD(2);
	t339 = t284 * t286;
	t342 = t304 * t286;
	t228 = t273 * t339 - t272 * t289 + (t307 * t289 + t342) * qJD(3);
	t340 = t282 * t288;
	t220 = t236 * qJD(4) + t228 * t285 + t273 * t340;
	t235 = t253 * t285 - t264 * t288;
	t231 = t235 ^ 2;
	t224 = t231 * t233 + 0.1e1;
	t348 = t233 * t235;
	t333 = qJD(4) * t235;
	t341 = t282 * t285;
	t221 = t228 * t288 - t273 * t341 - t333;
	t349 = t221 * t232 * t233;
	t351 = (t220 * t348 - t231 * t349) / t224 ^ 2;
	t252 = -t289 * t322 + t303 * t338 - t342;
	t350 = t217 * t252;
	t347 = t237 * t252;
	t346 = t238 * t252;
	t248 = t252 ^ 2;
	t215 = t248 * t217 + 0.1e1;
	t227 = t253 * qJD(3) - t272 * t286 - t273 * t338;
	t332 = 0.2e1 * (t227 * t350 - t248 * t352) / t215 ^ 2;
	t331 = -0.2e1 * t351;
	t330 = t235 * t349;
	t329 = qJD(3) * t343;
	t325 = -0.2e1 * t249 * t345;
	t324 = 0.2e1 * t252 * t352;
	t315 = -t285 * t232 + t288 * t348;
	t251 = -t286 * t323 + t297;
	t263 = t309 * t283 + t286 * t327;
	t314 = -t251 * t259 + t263 * t344;
	t255 = -t305 * t338 + t302;
	t270 = t310 * t283;
	t313 = -t255 * t259 + t270 * t344;
	t257 = -t289 * t303 + t304 * t339;
	t312 = -t257 * t285 - t304 * t340;
	t244 = t257 * t288 - t304 * t341;
	t256 = -t286 * t303 - t304 * t338;
	t308 = -t284 * t337 + t334;
	t254 = (t311 * qJD(2) + t308 * qJD(3)) * t283;
	t246 = t289 * t321 + (t308 * qJD(2) + t311 * qJD(3)) * t283;
	t230 = -t256 * qJD(3) + t272 * t339 + t273 * t289;
	t229 = t271 * t338 + t284 * t329 + t357;
	t226 = t357 * t284 + t358 * t289 + t329;
	t222 = 0.1e1 / t224;
	t213 = 0.1e1 / t215;
	t211 = t313 * t239;
	t210 = t314 * t239;
	t207 = t318 * t211 - t237 * t255 + t238 * t270;
	t206 = t318 * t210 - t237 * t251 + t238 * t263;
	t204 = t313 * t356 + (t270 * t325 - t229 * t259 + (t225 * t270 + t245 * t255 + t249 * t254) * t260) * t239;
	t203 = t314 * t356 + (t263 * t325 - t226 * t259 + (t225 * t263 + t245 * t251 + t246 * t249) * t260) * t239;
	t1 = [0, t204, t203, 0, 0, 0; 0, (t207 * t350 - t216 * t256) * t332 + ((t257 * qJD(3) - t272 * t338 + t273 * t286) * t216 + t207 * t324 + (-t256 * t205 - t207 * t227 - (-t204 * t249 - t211 * t225 + t254 + (-t211 * t262 - t255) * t209) * t346 - (-t204 * t262 - t211 * t245 - t229 + (t211 * t249 - t270) * t209) * t347) * t217) * t213, (t206 * t350 - t216 * t253) * t332 + (t206 * t324 + t228 * t216 + (-t253 * t205 - t206 * t227 - (-t203 * t249 - t210 * t225 + t246 + (-t210 * t262 - t251) * t209) * t346 - (-t203 * t262 - t210 * t245 - t226 + (t210 * t249 - t263) * t209) * t347) * t217) * t213, 0, 0, 0; 0, 0.2e1 * (t232 * t312 + t244 * t348) * t351 + ((t244 * qJD(4) + t230 * t285 + t272 * t340) * t232 + 0.2e1 * t244 * t330 + (t312 * t221 - (t312 * qJD(4) + t230 * t288 - t272 * t341) * t235 - t244 * t220) * t233) * t222, t315 * t252 * t331 + (t315 * t227 + ((-qJD(4) * t232 - 0.2e1 * t330) * t288 + (t220 * t288 + (t221 - t333) * t285) * t233) * t252) * t222, t331 + 0.2e1 * (t220 * t233 * t222 + (-t222 * t349 - t233 * t351) * t235) * t235, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:05
	% EndTime: 2019-10-09 23:00:09
	% DurationCPUTime: 3.51s
	% Computational Cost: add. (12413->176), mult. (37424->340), div. (781->12), fcn. (48146->15), ass. (0->139)
	t318 = sin(qJ(3));
	t321 = cos(qJ(3));
	t314 = sin(pkin(7));
	t316 = cos(pkin(7));
	t319 = sin(qJ(2));
	t322 = cos(qJ(2));
	t386 = cos(pkin(12));
	t387 = cos(pkin(6));
	t347 = t387 * t386;
	t385 = sin(pkin(12));
	t334 = t385 * t319 - t322 * t347;
	t315 = sin(pkin(6));
	t356 = t315 * t386;
	t329 = -t314 * t356 - t316 * t334;
	t333 = -t319 * t347 - t322 * t385;
	t285 = t318 * t333 + t321 * t329;
	t303 = t334 * qJD(2);
	t304 = t333 * qJD(2);
	t369 = t316 * t318;
	t261 = qJD(3) * t285 - t303 * t321 + t304 * t369;
	t286 = t318 * t329 - t321 * t333;
	t317 = sin(qJ(4));
	t320 = cos(qJ(4));
	t330 = t314 * t334 - t316 * t356;
	t271 = t286 * t320 + t317 * t330;
	t371 = t314 * t320;
	t244 = qJD(4) * t271 + t261 * t317 + t304 * t371;
	t269 = t286 * t317 - t320 * t330;
	t266 = t269 ^ 2;
	t365 = t319 * t321;
	t366 = t318 * t322;
	t337 = t316 * t366 + t365;
	t354 = t387 * t314;
	t298 = t315 * t337 + t318 * t354;
	t370 = t314 * t322;
	t307 = -t315 * t370 + t316 * t387;
	t289 = t298 * t317 - t307 * t320;
	t283 = 0.1e1 / t289 ^ 2;
	t256 = t266 * t283 + 0.1e1;
	t253 = 0.1e1 / t256;
	t364 = t321 * t322;
	t367 = t318 * t319;
	t336 = -t316 * t367 + t364;
	t339 = t316 * t364 - t367;
	t348 = qJD(3) * t354;
	t278 = t321 * t348 + (qJD(2) * t336 + qJD(3) * t339) * t315;
	t290 = t298 * t320 + t307 * t317;
	t372 = t314 * t319;
	t357 = t315 * t372;
	t350 = qJD(2) * t357;
	t258 = qJD(4) * t290 + t278 * t317 - t320 * t350;
	t282 = 0.1e1 / t289;
	t379 = t269 * t283;
	t231 = (-t244 * t282 + t258 * t379) * t253;
	t257 = atan2(-t269, t289);
	t249 = sin(t257);
	t250 = cos(t257);
	t345 = -t249 * t289 - t250 * t269;
	t227 = t231 * t345 - t249 * t244 + t250 * t258;
	t243 = -t249 * t269 + t250 * t289;
	t240 = 0.1e1 / t243;
	t241 = 0.1e1 / t243 ^ 2;
	t390 = t227 * t240 * t241;
	t346 = t387 * t385;
	t332 = t319 * t346 - t322 * t386;
	t331 = t319 * t386 + t322 * t346;
	t355 = t315 * t385;
	t349 = t314 * t355;
	t335 = -t316 * t331 + t349;
	t288 = t318 * t335 - t321 * t332;
	t299 = t314 * t331 + t316 * t355;
	t272 = t288 * t317 - t299 * t320;
	t352 = 0.2e1 * t272 * t390;
	t297 = t315 * t339 + t321 * t354;
	t341 = -t282 * t285 + t297 * t379;
	t389 = t317 * t341;
	t380 = t258 * t282 * t283;
	t388 = -0.2e1 * (t244 * t379 - t266 * t380) / t256 ^ 2;
	t368 = t316 * t321;
	t374 = t332 * t318;
	t287 = -t321 * t349 + t331 * t368 - t374;
	t279 = 0.1e1 / t287;
	t280 = 0.1e1 / t287 ^ 2;
	t384 = t241 * t272;
	t305 = t331 * qJD(2);
	t306 = t332 * qJD(2);
	t263 = t306 * t369 - t305 * t321 + (t321 * t335 + t374) * qJD(3);
	t273 = t288 * t320 + t299 * t317;
	t246 = qJD(4) * t273 + t263 * t317 + t306 * t371;
	t383 = t246 * t241;
	t382 = t249 * t272;
	t381 = t250 * t272;
	t378 = t273 * t280;
	t377 = t279 * t287;
	t376 = t287 * t317;
	t373 = t314 * t317;
	t363 = qJD(4) * t317;
	t362 = qJD(4) * t320;
	t267 = t272 ^ 2;
	t239 = t241 * t267 + 0.1e1;
	t361 = 0.2e1 * (-t267 * t390 + t272 * t383) / t239 ^ 2;
	t247 = -qJD(4) * t272 + t263 * t320 - t306 * t373;
	t268 = t273 ^ 2;
	t255 = t268 * t280 + 0.1e1;
	t262 = qJD(3) * t288 - t305 * t318 - t306 * t368;
	t281 = t279 * t280;
	t360 = 0.2e1 * (-t262 * t268 * t281 + t247 * t378) / t255 ^ 2;
	t358 = 0.2e1 * t273 * t281;
	t351 = -0.2e1 * t269 * t380;
	t343 = -t271 * t282 + t290 * t379;
	t291 = -t321 * t334 + t333 * t369;
	t274 = t291 * t317 + t333 * t371;
	t302 = t336 * t315;
	t294 = t302 * t317 - t320 * t357;
	t342 = -t274 * t282 + t294 * t379;
	t293 = -t321 * t331 + t332 * t369;
	t340 = -t293 * t317 - t332 * t371;
	t276 = t293 * t320 - t332 * t373;
	t292 = -t318 * t331 - t332 * t368;
	t338 = -t316 * t365 - t366;
	t277 = -t318 * t348 + (qJD(2) * t338 - qJD(3) * t337) * t315;
	t265 = -qJD(3) * t292 + t305 * t369 + t306 * t321;
	t264 = t302 * t362 + ((qJD(3) * t338 + qJD(4) * t372) * t317 + (-t317 * t337 - t320 * t370) * qJD(2)) * t315;
	t260 = -qJD(3) * t286 + t303 * t318 + t304 * t368;
	t259 = -qJD(4) * t289 + t278 * t320 + t317 * t350;
	t251 = 0.1e1 / t255;
	t248 = (t303 * t369 + t304 * t321 + (t318 * t334 + t333 * t368) * qJD(3)) * t317 + t291 * t362 + t303 * t371 - t333 * t314 * t363;
	t245 = -qJD(4) * t269 + t261 * t320 - t304 * t373;
	t237 = 0.1e1 / t239;
	t236 = t253 * t389;
	t235 = t342 * t253;
	t233 = t343 * t253;
	t230 = (-t249 * t285 + t250 * t297) * t317 + t345 * t236;
	t229 = t235 * t345 - t249 * t274 + t250 * t294;
	t228 = t233 * t345 - t249 * t271 + t250 * t290;
	t226 = t342 * t388 + (t294 * t351 - t248 * t282 + (t244 * t294 + t258 * t274 + t264 * t269) * t283) * t253;
	t224 = t343 * t388 + (t290 * t351 - t245 * t282 + (t244 * t290 + t258 * t271 + t259 * t269) * t283) * t253;
	t223 = t388 * t389 + (t341 * t362 + (t297 * t351 - t260 * t282 + (t244 * t297 + t258 * t285 + t269 * t277) * t283) * t317) * t253;
	t1 = [0, t226, t223, t224, 0, 0; 0, (t229 * t384 + t240 * t340) * t361 + ((qJD(4) * t276 + t265 * t317 + t305 * t371) * t240 + t229 * t352 + (t340 * t227 - t229 * t246 - (-t226 * t269 - t235 * t244 + t264 + (-t235 * t289 - t274) * t231) * t381 - (-t226 * t289 - t235 * t258 - t248 + (t235 * t269 - t294) * t231) * t382) * t241) * t237, (t230 * t384 + t240 * t376) * t361 + ((-t262 * t317 - t287 * t362) * t240 + (-t383 + t352) * t230 + (t376 * t227 - (t297 * t362 - t223 * t269 - t236 * t244 + t277 * t317 + (-t236 * t289 - t285 * t317) * t231) * t381 - (-t285 * t362 - t223 * t289 - t236 * t258 - t260 * t317 + (t236 * t269 - t297 * t317) * t231) * t382) * t241) * t237, (t228 * t384 - t240 * t273) * t361 + (t228 * t352 + t247 * t240 + (-t273 * t227 - t228 * t246 - (-t224 * t269 - t233 * t244 + t259 + (-t233 * t289 - t271) * t231) * t381 - (-t224 * t289 - t233 * t258 - t245 + (t233 * t269 - t290) * t231) * t382) * t241) * t237, 0, 0; 0, (-t276 * t279 + t292 * t378) * t360 + ((qJD(4) * t340 + t265 * t320 - t305 * t373) * t279 + t292 * t262 * t358 + (-t276 * t262 - (qJD(3) * t293 - t305 * t368 + t306 * t318) * t273 - t292 * t247) * t280) * t251, (t288 * t378 + t320 * t377) * t360 + (t363 * t377 + (-t247 * t288 - t263 * t273) * t280 + (t288 * t358 + (t280 * t287 - t279) * t320) * t262) * t251, t272 * t279 * t360 + (t262 * t272 * t280 - t246 * t279) * t251, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 23:00:06
	% EndTime: 2019-10-09 23:00:10
	% DurationCPUTime: 4.14s
	% Computational Cost: add. (14691->205), mult. (44088->386), div. (816->12), fcn. (56595->17), ass. (0->168)
	t401 = sin(qJ(3));
	t405 = cos(qJ(3));
	t398 = cos(pkin(6));
	t406 = cos(qJ(2));
	t488 = sin(pkin(12));
	t444 = t488 * t406;
	t396 = cos(pkin(12));
	t402 = sin(qJ(2));
	t467 = t396 * t402;
	t423 = -t398 * t467 - t444;
	t418 = qJD(2) * t423;
	t456 = t423 * qJD(3);
	t445 = t488 * t402;
	t466 = t396 * t406;
	t490 = -t398 * t466 + t445;
	t459 = qJD(3) * t490;
	t397 = cos(pkin(7));
	t464 = t397 * t405;
	t465 = t397 * t401;
	t384 = t490 * qJD(2);
	t394 = sin(pkin(7));
	t395 = sin(pkin(6));
	t468 = t395 * t396;
	t452 = t394 * t468;
	t493 = qJD(3) * t452 + t384;
	t341 = t401 * t456 - t493 * t405 + t418 * t465 - t459 * t464;
	t377 = t394 * t490 - t397 * t468;
	t400 = sin(qJ(4));
	t404 = cos(qJ(4));
	t428 = -t397 * t490 - t452;
	t415 = t428 * t401 - t405 * t423;
	t492 = qJD(4) * t415 + t394 * t418;
	t317 = (qJD(4) * t377 + t341) * t404 - t492 * t400;
	t351 = t377 * t400 + t415 * t404;
	t348 = t351 ^ 2;
	t461 = t402 * t405;
	t462 = t401 * t406;
	t425 = t397 * t462 + t461;
	t473 = t394 * t398;
	t376 = t425 * t395 + t401 * t473;
	t469 = t394 * t406;
	t387 = -t395 * t469 + t398 * t397;
	t368 = t376 * t404 + t387 * t400;
	t362 = 0.1e1 / t368 ^ 2;
	t332 = t348 * t362 + 0.1e1;
	t330 = 0.1e1 / t332;
	t460 = t405 * t406;
	t463 = t401 * t402;
	t424 = -t397 * t463 + t460;
	t427 = t397 * t460 - t463;
	t449 = qJD(3) * t473;
	t360 = t405 * t449 + (t424 * qJD(2) + t427 * qJD(3)) * t395;
	t367 = -t376 * t400 + t387 * t404;
	t471 = t394 * t402;
	t451 = t395 * t471;
	t440 = qJD(2) * t451;
	t335 = t367 * qJD(4) + t360 * t404 + t400 * t440;
	t361 = 0.1e1 / t368;
	t478 = t351 * t362;
	t299 = (-t317 * t361 + t335 * t478) * t330;
	t333 = atan2(-t351, t368);
	t328 = sin(t333);
	t329 = cos(t333);
	t436 = -t328 * t368 - t329 * t351;
	t294 = t436 * t299 - t328 * t317 + t329 * t335;
	t312 = -t328 * t351 + t329 * t368;
	t309 = 0.1e1 / t312;
	t310 = 0.1e1 / t312 ^ 2;
	t496 = t294 * t309 * t310;
	t421 = t398 * t444 + t467;
	t446 = t395 * t488;
	t438 = t394 * t446;
	t413 = -t421 * t397 + t438;
	t422 = t398 * t445 - t466;
	t366 = t413 * t401 - t405 * t422;
	t378 = t421 * t394 + t397 * t446;
	t353 = t366 * t400 - t378 * t404;
	t419 = t421 * t405;
	t474 = t422 * t401;
	t365 = t397 * t419 - t405 * t438 - t474;
	t399 = sin(qJ(6));
	t403 = cos(qJ(6));
	t435 = t353 * t403 - t365 * t399;
	t495 = t435 * qJD(6);
	t354 = t366 * t404 + t378 * t400;
	t443 = 0.2e1 * t354 * t496;
	t364 = t401 * t423 + t428 * t405;
	t375 = t427 * t395 + t405 * t473;
	t430 = -t361 * t364 + t375 * t478;
	t494 = t404 * t430;
	t491 = t401 * t459 + t405 * t418;
	t479 = t335 * t361 * t362;
	t489 = -0.2e1 * (t317 * t478 - t348 * t479) / t332 ^ 2;
	t476 = t365 * t403;
	t327 = t353 * t399 + t476;
	t323 = 0.1e1 / t327;
	t324 = 0.1e1 / t327 ^ 2;
	t385 = t421 * qJD(2);
	t386 = t422 * qJD(2);
	t343 = t386 * t465 - t385 * t405 + (t413 * t405 + t474) * qJD(3);
	t470 = t394 * t404;
	t318 = t354 * qJD(4) + t343 * t400 + t386 * t470;
	t342 = t366 * qJD(3) - t385 * t401 - t386 * t464;
	t308 = t318 * t399 + t342 * t403 + t495;
	t487 = t308 * t323 * t324;
	t486 = t310 * t354;
	t307 = t327 * qJD(6) - t318 * t403 + t342 * t399;
	t322 = t435 ^ 2;
	t315 = t322 * t324 + 0.1e1;
	t483 = t324 * t435;
	t485 = 0.1e1 / t315 ^ 2 * (-t307 * t483 - t322 * t487);
	t484 = t323 * t403;
	t482 = t435 * t399;
	t481 = t328 * t354;
	t480 = t329 * t354;
	t477 = t365 * t400;
	t475 = t365 * t404;
	t472 = t394 * t400;
	t458 = qJD(4) * t400;
	t457 = qJD(4) * t404;
	t349 = t354 ^ 2;
	t306 = t310 * t349 + 0.1e1;
	t319 = -t353 * qJD(4) + t343 * t404 - t386 * t472;
	t455 = 0.2e1 * (t319 * t486 - t349 * t496) / t306 ^ 2;
	t453 = 0.2e1 * t485;
	t447 = t405 * t456;
	t442 = -0.2e1 * t435 * t487;
	t441 = -0.2e1 * t351 * t479;
	t437 = -qJD(6) * t477 + t343;
	t370 = -t421 * t401 - t422 * t464;
	t371 = t422 * t465 - t419;
	t429 = -t371 * t400 - t422 * t470;
	t434 = -t370 * t399 - t403 * t429;
	t339 = t370 * t403 - t399 * t429;
	t433 = -t324 * t482 + t484;
	t350 = -t377 * t404 + t415 * t400;
	t432 = t350 * t361 + t367 * t478;
	t369 = -t405 * t490 + t423 * t465;
	t355 = t369 * t404 - t423 * t472;
	t383 = t424 * t395;
	t372 = t383 * t404 + t400 * t451;
	t431 = -t355 * t361 + t372 * t478;
	t357 = t371 * t404 - t422 * t472;
	t426 = -t397 * t461 - t462;
	t420 = qJD(6) * t366 + t342 * t400 + t365 * t457;
	t359 = -t401 * t449 + (t426 * qJD(2) - t425 * qJD(3)) * t395;
	t347 = -t370 * qJD(3) + t385 * t465 + t386 * t405;
	t346 = t371 * qJD(3) - t385 * t464 + t386 * t401;
	t344 = -t383 * t458 + ((t426 * qJD(3) + qJD(4) * t471) * t404 + (t400 * t469 - t425 * t404) * qJD(2)) * t395;
	t340 = t491 * t397 + t493 * t401 + t447;
	t337 = t366 * t403 - t399 * t477;
	t336 = t366 * t399 + t400 * t476;
	t334 = -t368 * qJD(4) - t360 * t400 + t404 * t440;
	t321 = t357 * qJD(4) + t347 * t400 + t385 * t470;
	t320 = (t384 * t465 + t397 * t447 + t491) * t404 - t369 * t458 - t384 * t472 - t423 * t394 * t457;
	t316 = t341 * t400 + t377 * t458 + t492 * t404;
	t313 = 0.1e1 / t315;
	t304 = 0.1e1 / t306;
	t303 = t330 * t494;
	t302 = t431 * t330;
	t301 = t432 * t330;
	t297 = (-t328 * t364 + t329 * t375) * t404 + t436 * t303;
	t296 = t436 * t302 - t328 * t355 + t329 * t372;
	t295 = t436 * t301 + t328 * t350 + t329 * t367;
	t293 = t431 * t489 + (t372 * t441 - t320 * t361 + (t317 * t372 + t335 * t355 + t344 * t351) * t362) * t330;
	t291 = t432 * t489 + (t367 * t441 + t316 * t361 + (t317 * t367 + t334 * t351 - t335 * t350) * t362) * t330;
	t290 = t489 * t494 + (-t430 * t458 + (t375 * t441 - t340 * t361 + (t317 * t375 + t335 * t364 + t351 * t359) * t362) * t404) * t330;
	t1 = [0, t293, t290, t291, 0, 0; 0, (t296 * t486 - t309 * t357) * t455 + ((t429 * qJD(4) + t347 * t404 - t385 * t472) * t309 + t296 * t443 + (-t357 * t294 - t296 * t319 - (-t293 * t351 - t302 * t317 + t344 + (-t302 * t368 - t355) * t299) * t480 - (-t293 * t368 - t302 * t335 - t320 + (t302 * t351 - t372) * t299) * t481) * t310) * t304, (t297 * t486 + t309 * t475) * t455 + ((-t342 * t404 + t365 * t458) * t309 + t297 * t443 + (-t297 * t319 + t475 * t294 - (-t375 * t458 - t290 * t351 - t303 * t317 + t359 * t404 + (-t303 * t368 - t364 * t404) * t299) * t480 - (t364 * t458 - t290 * t368 - t303 * t335 - t340 * t404 + (t303 * t351 - t375 * t404) * t299) * t481) * t310) * t304, (t295 * t486 + t309 * t353) * t455 + (t295 * t443 - t318 * t309 + (t353 * t294 - t295 * t319 - (-t291 * t351 - t301 * t317 + t334 + (-t301 * t368 + t350) * t299) * t480 - (-t291 * t368 - t301 * t335 + t316 + (t301 * t351 - t367) * t299) * t481) * t310) * t304, 0, 0; 0, (t323 * t434 - t339 * t483) * t453 + ((t339 * qJD(6) - t321 * t403 + t346 * t399) * t323 + t339 * t442 + (t434 * t308 + (t434 * qJD(6) + t321 * t399 + t346 * t403) * t435 - t339 * t307) * t324) * t313, (-t323 * t336 - t337 * t483) * t453 + (t337 * t442 + t437 * t323 * t399 + t420 * t484 + (t403 * t435 * t437 - t337 * t307 - t336 * t308 - t420 * t482) * t324) * t313, t433 * t354 * t453 + (-t433 * t319 + ((qJD(6) * t323 + t442) * t399 + (-t307 * t399 + (t308 + t495) * t403) * t324) * t354) * t313, 0, -0.2e1 * t485 - 0.2e1 * (t307 * t324 * t313 - (-t313 * t487 - t324 * t485) * t435) * t435;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end