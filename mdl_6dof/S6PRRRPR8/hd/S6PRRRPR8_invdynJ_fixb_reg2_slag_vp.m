% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:53:28
% EndTime: 2019-03-08 23:53:56
% DurationCPUTime: 16.75s
% Computational Cost: add. (13079->789), mult. (33258->1057), div. (0->0), fcn. (28304->14), ass. (0->361)
t270 = sin(qJ(4));
t266 = sin(pkin(7));
t274 = cos(qJ(3));
t449 = qJD(2) * t274;
t419 = t266 * t449;
t446 = qJD(4) * t270;
t538 = -t270 * t419 + t446;
t267 = sin(pkin(6));
t272 = sin(qJ(2));
t275 = cos(qJ(2));
t271 = sin(qJ(3));
t485 = cos(pkin(7));
t402 = t271 * t485;
t320 = -t272 * t402 + t274 * t275;
t188 = t320 * t267;
t401 = t274 * t485;
t471 = t266 * t271;
t217 = pkin(2) * t401 - pkin(9) * t471;
t206 = qJD(3) * t217;
t456 = -qJD(1) * t188 + t206;
t318 = t271 * t275 + t272 * t401;
t187 = t318 * t267;
t470 = t266 * t274;
t218 = pkin(2) * t402 + pkin(9) * t470;
t207 = qJD(3) * t218;
t455 = -qJD(1) * t187 + t207;
t451 = qJD(1) * t275;
t235 = qJD(2) * pkin(2) + t267 * t451;
t399 = t485 * t235;
t469 = t267 * t272;
t422 = qJD(1) * t469;
t450 = qJD(2) * t266;
t220 = pkin(9) * t450 + t422;
t460 = t274 * t220;
t537 = t538 * pkin(4) - t270 * qJD(5) - t271 * t399 - t460;
t268 = cos(pkin(6));
t452 = qJD(1) * t268;
t316 = t266 * t452 + t399;
t508 = cos(qJ(4));
t344 = pkin(11) * t270 - qJ(5) * t508;
t421 = t271 * t452;
t536 = qJD(4) * t344 - (t344 * t449 + t421) * t266 + t537;
t511 = pkin(5) + pkin(10);
t250 = t511 * t508;
t118 = -t271 * t220 + t274 * t316;
t342 = (pkin(3) * t271 - pkin(10) * t274) * t266;
t204 = qJD(2) * t342;
t361 = t270 * t118 - t204 * t508;
t426 = t274 * t508;
t512 = pkin(4) + pkin(11);
t535 = t250 * qJD(4) - (pkin(5) * t426 - t271 * t512) * t450 - t361;
t367 = t508 * t485;
t447 = qJD(3) * t274;
t416 = t266 * t447;
t436 = t270 * t471;
t530 = qJD(4) * t436 - t508 * t416;
t151 = -qJD(4) * t367 + t530;
t429 = t266 * t508;
t379 = t271 * t429;
t216 = t270 * t485 + t379;
t534 = t151 * qJ(5) - t216 * qJD(5) + t455;
t197 = pkin(10) * t485 + t218;
t363 = -pkin(3) * t274 - pkin(10) * t271;
t198 = (-pkin(2) + t363) * t266;
t205 = qJD(3) * t342;
t356 = t429 * t469;
t413 = qJD(4) * t508;
t486 = qJD(1) * t356 + t197 * t413 + t198 * t446 - t205 * t508 + t270 * t456;
t448 = qJD(3) * t271;
t417 = t266 * t448;
t533 = -t151 * pkin(5) - t417 * t512 + t486;
t415 = t270 * t447;
t152 = qJD(4) * t216 + t266 * t415;
t532 = -t152 * t512 - t534;
t393 = t485 * qJD(2);
t350 = t393 + qJD(3);
t315 = t508 * t350;
t420 = t271 * t450;
t183 = t270 * t420 - t315;
t119 = t271 * t316 + t460;
t105 = pkin(10) * t350 + t119;
t403 = t268 * t485;
t364 = qJD(1) * t403;
t286 = t364 + (qJD(2) * t363 - t235) * t266;
t284 = t270 * t286;
t46 = t508 * t105 + t284;
t34 = -t183 * pkin(5) + t46;
t126 = t508 * t286;
t45 = t105 * t270 - t126;
t459 = -qJD(5) - t45;
t327 = t270 * t350;
t387 = t485 * qJDD(2);
t346 = t387 + qJDD(3);
t444 = qJDD(2) * t271;
t100 = qJD(4) * t327 + t266 * (qJD(2) * (t271 * t413 + t415) + t270 * t444) - t508 * t346;
t185 = qJD(2) * t379 + t327;
t246 = -qJD(4) + t419;
t477 = t185 * t246;
t531 = t100 + t477;
t269 = sin(qJ(6));
t273 = cos(qJ(6));
t135 = -t273 * t183 - t246 * t269;
t506 = pkin(9) * t266;
t529 = qJDD(2) * t506 + (qJD(2) * t451 + qJDD(1) * t272) * t267 + t316 * qJD(3);
t468 = t267 * t275;
t253 = qJDD(1) * t468;
t418 = qJD(2) * t469;
t373 = qJD(1) * t418;
t194 = qJDD(2) * pkin(2) + t253 - t373;
t409 = qJDD(1) * t266 * t268;
t343 = -t194 * t401 + t220 * t447 + t271 * t529 - t274 * t409;
t36 = -pkin(3) * t346 + t343;
t99 = qJD(2) * t530 - qJD(4) * t315 - qJDD(2) * t379 - t270 * t346;
t280 = t99 * qJ(5) - t185 * qJD(5) + t36;
t10 = t100 * t512 + t280;
t458 = pkin(5) * t185 - t459;
t24 = t246 * t512 + t458;
t104 = -pkin(3) * t350 - t118;
t279 = -t185 * qJ(5) + t104;
t37 = t183 * t512 + t279;
t15 = t24 * t273 - t269 * t37;
t443 = qJDD(2) * t274;
t252 = t266 * t443;
t445 = qJD(2) * qJD(3);
t411 = t271 * t445;
t199 = t266 * t411 + qJDD(4) - t252;
t310 = -t194 * t402 + t220 * t448 - t271 * t409 - t274 * t529;
t35 = pkin(10) * t346 - t310;
t251 = qJDD(1) * t403;
t329 = t411 - t443;
t410 = t274 * t445;
t330 = t410 + t444;
t80 = t251 + (pkin(3) * t329 - pkin(10) * t330 - t194) * t266;
t391 = qJD(4) * t284 + t105 * t413 + t270 * t35 - t508 * t80;
t358 = qJDD(5) + t391;
t6 = -pkin(5) * t99 - t199 * t512 + t358;
t1 = qJD(6) * t15 + t273 * t10 + t269 * t6;
t171 = qJD(6) + t185;
t528 = -t15 * t171 + t1;
t16 = t24 * t269 + t273 * t37;
t2 = -qJD(6) * t16 - t269 * t10 + t273 * t6;
t527 = t16 * t171 + t2;
t466 = t270 * qJ(5);
t243 = -pkin(4) * t508 - pkin(3) - t466;
t219 = -pkin(11) * t508 + t243;
t249 = t511 * t270;
t147 = -t219 * t269 + t249 * t273;
t526 = qJD(6) * t147 + t535 * t269 + t273 * t536;
t148 = t219 * t273 + t249 * t269;
t499 = -qJD(6) * t148 - t269 * t536 + t535 * t273;
t464 = t270 * t274;
t76 = t508 * t118 + t270 * t204;
t492 = -t511 * t446 - (-pkin(5) * t464 + qJ(5) * t271) * t450 - t76;
t38 = qJD(6) * t135 - t269 * t100 - t273 * t199;
t388 = t135 * t171;
t525 = t38 - t388;
t137 = t183 * t269 - t246 * t273;
t39 = qJD(6) * t137 - t273 * t100 + t199 * t269;
t480 = t137 * t171;
t524 = -t39 + t480;
t483 = sin(pkin(12));
t396 = t483 * t272;
t484 = cos(pkin(12));
t397 = t484 * t275;
t308 = -t268 * t397 + t396;
t405 = t267 * t484;
t523 = t266 * t405 + t308 * t485;
t395 = t483 * t275;
t398 = t484 * t272;
t309 = t268 * t395 + t398;
t404 = t267 * t483;
t522 = -t266 * t404 + t309 * t485;
t437 = t266 * t469;
t381 = t270 * t437;
t487 = -qJD(1) * t381 - t197 * t446 + t198 * t413 + t270 * t205 + t456 * t508;
t521 = (qJDD(3) + 0.2e1 * t387) * t266;
t400 = t275 * t485;
t520 = -t271 * t272 + t274 * t400;
t475 = t246 * qJ(5);
t27 = -t475 + t34;
t96 = -qJDD(6) + t99;
t519 = t171 * t27 + t512 * t96;
t215 = -t367 + t436;
t518 = t266 * (-t100 * t274 + t183 * t448) - t152 * t246 + t199 * t215;
t517 = t266 * (t185 * t448 + t274 * t99) + t151 * t246 + t199 * t216;
t424 = t508 * t199;
t516 = -t246 * t446 + (-t183 * t271 + t246 * t464) * t450 - t424;
t515 = t270 * t199 - t246 * t413 + (-t185 * t271 + t246 * t426) * t450;
t490 = -t266 * (qJ(5) * t448 - qJD(5) * t274) - t487;
t513 = t185 ^ 2;
t277 = qJD(2) ^ 2;
t120 = -t270 * t197 + t198 * t508;
t114 = pkin(4) * t470 - t120;
t65 = t216 * pkin(5) + pkin(11) * t470 + t114;
t196 = -pkin(3) * t485 - t217;
t291 = -t216 * qJ(5) + t196;
t74 = t215 * t512 + t291;
t22 = -t269 * t74 + t273 * t65;
t510 = qJD(6) * t22 + t269 * t533 - t532 * t273;
t23 = t269 * t65 + t273 * t74;
t509 = -qJD(6) * t23 + t532 * t269 + t273 * t533;
t507 = pkin(4) * t199;
t213 = t268 * t398 + t395;
t128 = t213 * t401 - t271 * t308;
t505 = pkin(10) * t128;
t214 = -t268 * t396 + t397;
t130 = t214 * t401 - t271 * t309;
t504 = pkin(10) * t130;
t503 = pkin(10) * t187;
t502 = pkin(10) * t199;
t43 = -t46 + t475;
t496 = t246 * t43;
t495 = t246 * t46;
t374 = qJD(2) * t426;
t493 = -qJ(5) * t413 - (-qJ(5) * t374 + t421) * t266 + t537;
t491 = -pkin(5) * t152 - t490;
t489 = -pkin(4) * t417 + t486;
t488 = t152 * pkin(4) + t534;
t482 = qJ(5) * t183;
t481 = t137 * t135;
t479 = t183 * t185;
t478 = t183 * t246;
t193 = t199 * qJ(5);
t212 = -t266 * t468 + t403;
t476 = t212 * t266;
t262 = t266 ^ 2;
t473 = t262 * t277;
t472 = t266 * t270;
t467 = t269 * t270;
t465 = t270 * t273;
t462 = t272 * t277;
t457 = qJDD(1) - g(3);
t121 = t508 * t197 + t270 * t198;
t454 = pkin(2) * t468 + pkin(9) * t437;
t264 = t271 ^ 2;
t265 = t274 ^ 2;
t453 = t264 - t265;
t106 = t213 * t271 + t274 * t523;
t101 = t106 * pkin(3);
t432 = t106 * t508;
t441 = -pkin(4) * t432 - t106 * t466 - t101;
t108 = t214 * t271 + t274 * t522;
t102 = t108 * pkin(3);
t431 = t108 * t508;
t440 = -pkin(4) * t431 - t108 * t466 - t102;
t233 = qJD(5) * t246;
t392 = -qJD(4) * t126 + t105 * t446 - t270 * t80 - t508 * t35;
t8 = -t193 + t233 + t392;
t439 = t8 * t508;
t438 = t392 * t508;
t149 = -t267 * t520 - t268 * t470;
t146 = t149 * pkin(3);
t430 = t149 * t508;
t435 = -pkin(4) * t430 - t149 * t466 - t146;
t434 = t188 * pkin(3) + t454;
t433 = t100 * t508;
t428 = t269 * t508;
t427 = t273 * t508;
t414 = -t183 ^ 2 + t513;
t412 = t508 * qJD(6);
t107 = t213 * t274 - t271 * t523;
t281 = t266 * t308 - t405 * t485;
t55 = t107 * t270 - t281 * t508;
t56 = t107 * t508 + t270 * t281;
t407 = -t55 * pkin(4) + qJ(5) * t56;
t109 = t214 * t274 - t271 * t522;
t282 = t266 * t309 + t404 * t485;
t57 = t109 * t270 - t282 * t508;
t58 = t109 * t508 + t270 * t282;
t406 = -t57 * pkin(4) + qJ(5) * t58;
t319 = t271 * t400 + t272 * t274;
t150 = t267 * t319 + t268 * t471;
t111 = t150 * t270 - t212 * t508;
t112 = t150 * t508 + t212 * t270;
t390 = -t111 * pkin(4) + qJ(5) * t112;
t389 = t171 * t269;
t385 = pkin(10) * t424;
t384 = pkin(10) * t413;
t383 = t262 * t267 * t462;
t382 = t271 * t274 * t473;
t378 = t266 * t418;
t375 = t246 * t420;
t371 = t271 * t410;
t365 = t266 * t277 * t485;
t362 = g(1) * t214 + g(2) * t213;
t359 = (qJD(4) * t183 - t99) * pkin(10);
t357 = -t151 * t185 - t216 * t99;
t355 = t100 * t215 + t152 * t183;
t53 = t111 * t273 - t149 * t269;
t54 = t111 * t269 + t149 * t273;
t349 = 0.2e1 * t393 + qJD(3);
t129 = -t213 * t402 - t274 * t308;
t208 = t308 * pkin(2);
t348 = t129 * pkin(3) + t213 * t506 - t208;
t131 = -t214 * t402 - t274 * t309;
t209 = t309 * pkin(2);
t347 = t131 * pkin(3) + t214 * t506 - t209;
t113 = qJ(5) * t470 - t121;
t341 = -t171 * t389 - t273 * t96;
t154 = -t269 * t215 + t273 * t470;
t153 = t215 * t273 + t269 * t470;
t336 = g(1) * t57 + g(2) * t55 + g(3) * t111;
t335 = -g(1) * t58 - g(2) * t56 - g(3) * t112;
t138 = t188 * t270 - t356;
t83 = t129 * t270 - t213 * t429;
t85 = t131 * t270 - t214 * t429;
t334 = -g(1) * t85 - g(2) * t83 - g(3) * t138;
t139 = t188 * t508 + t381;
t84 = t129 * t508 + t213 * t472;
t86 = t131 * t508 + t214 * t472;
t333 = g(1) * t86 + g(2) * t84 + g(3) * t139;
t332 = t139 * pkin(4) + qJ(5) * t138 + t434;
t326 = g(1) * t108 + g(2) * t106 + g(3) * t149;
t325 = -g(1) * t109 - g(2) * t107 - g(3) * t150;
t324 = g(1) * t130 + g(2) * t128 + g(3) * t187;
t317 = -t171 ^ 2 * t273 + t269 * t96;
t312 = t84 * pkin(4) + qJ(5) * t83 + t348;
t311 = t86 * pkin(4) + qJ(5) * t85 + t347;
t305 = t538 * t273 + (t412 + t420) * t269;
t304 = -t269 * t446 + t273 * t412 + (t269 * t464 + t271 * t273) * t450;
t303 = t266 * t374 - t413;
t98 = t268 * t416 + (t320 * qJD(2) + qJD(3) * t520) * t267;
t28 = -qJD(2) * t356 + qJD(4) * t112 + t98 * t270;
t29 = -t150 * t446 + t212 * t413 + t270 * t378 + t508 * t98;
t302 = -t100 * t112 - t111 * t99 - t183 * t29 + t185 * t28;
t97 = t268 * t417 + (qJD(2) * t318 + qJD(3) * t319) * t267;
t301 = t112 * t199 + t149 * t99 - t185 * t97 - t246 * t29;
t300 = t100 * t149 - t111 * t199 + t183 * t97 + t246 * t28;
t299 = -t100 * t216 + t151 * t183 - t152 * t185 + t215 * t99;
t298 = t336 - t391;
t297 = t335 - t392;
t296 = pkin(10) * qJD(4) * t246 + t326;
t7 = -pkin(5) * t100 - t8;
t295 = qJD(6) * t171 * t512 + t335 + t7;
t294 = -t270 * t478 - t433;
t290 = t99 + t478;
t289 = g(1) * t431 + g(2) * t432 + g(3) * t430;
t47 = t183 * pkin(4) + t279;
t288 = t185 * t47 + qJDD(5) - t298;
t287 = -t185 * t303 - t99 * t270;
t283 = (t185 * t413 - t433) * pkin(10) + t325;
t278 = -t99 * t508 + t303 * t183 + (-t100 + t477) * t270;
t169 = -t266 * t235 + t364;
t145 = -t194 * t266 + t251;
t127 = (-t199 * t274 - t246 * t448) * t266;
t117 = pkin(4) * t185 + t482;
t110 = t215 * pkin(4) + t291;
t81 = t185 * t512 + t482;
t77 = -pkin(5) * t215 - t113;
t69 = qJD(6) * t154 + t152 * t273 - t269 * t417;
t68 = qJD(6) * t153 + t152 * t269 + t273 * t417;
t64 = -pkin(4) * t420 + t361;
t62 = -qJ(5) * t420 - t76;
t40 = pkin(4) * t246 - t459;
t19 = t269 * t34 + t273 * t81;
t18 = -t269 * t81 + t273 * t34;
t17 = t100 * pkin(4) + t280;
t14 = qJD(6) * t53 + t269 * t28 + t273 * t97;
t13 = -qJD(6) * t54 - t269 * t97 + t273 * t28;
t9 = t358 - t507;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t457, 0, 0, 0, 0, 0, 0 (qJDD(2) * t275 - t462) * t267 (-qJDD(2) * t272 - t275 * t277) * t267, 0, -g(3) + (t268 ^ 2 + (t272 ^ 2 + t275 ^ 2) * t267 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -t149 * t346 - t274 * t383 + t329 * t476 - t350 * t97, -t150 * t346 + t271 * t383 + t330 * t476 - t350 * t98 ((t149 * t271 + t150 * t274) * qJDD(2) + (t271 * t97 + t274 * t98 + (t149 * t274 - t150 * t271) * qJD(3)) * qJD(2)) * t266, -t118 * t97 + t119 * t98 + t145 * t212 + t149 * t343 - t150 * t310 + t169 * t378 - g(3), 0, 0, 0, 0, 0, 0, t300, -t301, t302, t104 * t97 + t111 * t391 - t112 * t392 + t149 * t36 + t28 * t45 + t29 * t46 - g(3), 0, 0, 0, 0, 0, 0, t302, -t300, t301, t111 * t9 - t112 * t8 + t149 * t17 + t28 * t40 - t29 * t43 + t47 * t97 - g(3), 0, 0, 0, 0, 0, 0, t112 * t39 + t13 * t171 + t135 * t29 - t53 * t96, -t112 * t38 + t137 * t29 - t14 * t171 + t54 * t96, -t13 * t137 - t135 * t14 + t38 * t53 - t39 * t54, t1 * t54 + t112 * t7 + t13 * t15 + t14 * t16 + t2 * t53 + t27 * t29 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), g(1) * t309 + g(2) * t308 - g(3) * t468 + t253, -t457 * t469 + t362, 0, 0 (qJDD(2) * t264 + 0.2e1 * t371) * t262, 0.2e1 * (t271 * t443 - t445 * t453) * t262, t271 * t521 + t349 * t416 (qJDD(2) * t265 - 0.2e1 * t371) * t262, t274 * t521 - t349 * t417, t346 * t485, t217 * t346 - t343 * t485 - g(1) * t131 - g(2) * t129 - g(3) * t188 + (-t145 * t274 + t169 * t448) * t266 + (-pkin(2) * t329 + t274 * t373) * t262 - t455 * t350, -t218 * t346 + t310 * t485 + (t145 * t271 + t169 * t447) * t266 + (-pkin(2) * t330 - t271 * t373) * t262 + t324 - t456 * t350 (-g(3) * t469 + (-t118 * qJD(3) + qJDD(2) * t218 - t310) * t274 + (-qJD(3) * t119 - qJDD(2) * t217 + t343) * t271 + ((t456 - t206) * t274 + (t455 - t207) * t271) * qJD(2) - t362) * t266, -t310 * t218 - t343 * t217 + g(1) * t209 + g(2) * t208 - g(3) * t454 + (-t145 * pkin(2) - pkin(9) * t362 - t169 * t422) * t266 + t456 * t119 - t455 * t118, t357, t299, t517, t355, -t518, t127, t100 * t196 + t104 * t152 + t120 * t199 + t215 * t36 + (t274 * t391 - t448 * t45) * t266 + t486 * t246 + t455 * t183 - t333, -t104 * t151 - t121 * t199 - t196 * t99 + t216 * t36 + (-t274 * t392 - t448 * t46) * t266 + t487 * t246 + t455 * t185 - t334, -t100 * t121 + t120 * t99 - t151 * t45 - t152 * t46 - t183 * t487 + t185 * t486 + t215 * t392 + t216 * t391 - t324, -t392 * t121 - t391 * t120 + t36 * t196 - g(1) * (t347 + t504) - g(2) * (t348 + t505) - g(3) * (t434 + t503) + t487 * t46 + t486 * t45 + t455 * t104, t127, -t517, t518, t357, t299, t355, t100 * t113 - t114 * t99 - t151 * t40 + t152 * t43 + t183 * t490 + t185 * t489 + t215 * t8 + t216 * t9 - t324, -t100 * t110 + t114 * t199 - t152 * t47 - t17 * t215 + (-t274 * t9 + t40 * t448) * t266 - t489 * t246 - t488 * t183 + t333, t110 * t99 - t113 * t199 + t151 * t47 - t17 * t216 + (t274 * t8 - t43 * t448) * t266 + t490 * t246 - t488 * t185 + t334, t17 * t110 + t8 * t113 + t9 * t114 - g(1) * (t311 + t504) - g(2) * (t312 + t505) - g(3) * (t332 + t503) + t488 * t47 + t490 * t43 + t489 * t40, t137 * t68 + t154 * t38, -t135 * t68 + t137 * t69 - t153 * t38 + t154 * t39, -t137 * t151 + t154 * t96 + t171 * t68 - t216 * t38, -t135 * t69 - t153 * t39, t135 * t151 - t153 * t96 + t171 * t69 - t216 * t39, -t151 * t171 - t216 * t96, -t22 * t96 + t2 * t216 - t15 * t151 + t77 * t39 - t7 * t153 - t27 * t69 - g(1) * (t130 * t273 + t269 * t85) - g(2) * (t128 * t273 + t269 * t83) - g(3) * (t138 * t269 + t187 * t273) + t509 * t171 + t491 * t135, t23 * t96 - t1 * t216 + t16 * t151 - t77 * t38 - t7 * t154 + t27 * t68 - g(1) * (-t130 * t269 + t273 * t85) - g(2) * (-t128 * t269 + t273 * t83) - g(3) * (t138 * t273 - t187 * t269) - t510 * t171 + t491 * t137, t1 * t153 - t135 * t510 - t137 * t509 - t15 * t68 + t154 * t2 + t16 * t69 + t22 * t38 - t23 * t39 - t333, t1 * t23 + t2 * t22 + t7 * t77 - g(1) * (pkin(11) * t86 + t130 * t511 + t311) - g(2) * (pkin(11) * t84 + t128 * t511 + t312) - g(3) * (pkin(11) * t139 + t187 * t511 + t332) + t491 * t27 + t510 * t16 + t509 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t382, t453 * t473, t266 * t444 - t274 * t365, t382, t271 * t365 + t252, t346, t119 * t350 - t169 * t420 + t326 - t343, t118 * t350 - t169 * t419 + t310 - t325, 0, 0, t287, t278, t515, t294, -t516, t375, t45 * t420 - t36 * t508 - pkin(3) * t100 - t119 * t183 + (t384 - t361) * t246 + (-t104 * t246 - t502) * t270 + t289, -t385 + t104 * t413 + pkin(3) * t99 - t119 * t185 - t76 * t246 + (-t104 * t426 + t271 * t46) * t450 + (-t296 + t36) * t270, -t438 + t76 * t183 - t361 * t185 - t303 * t45 + (t391 + t359 + t495) * t270 + t283, -t36 * pkin(3) + g(1) * t102 + g(2) * t101 + g(3) * t146 - t104 * t119 - t45 * t361 - t46 * t76 + (-t438 + t391 * t270 + (-t270 * t46 + t45 * t508) * qJD(4) + t325) * pkin(10), t375, -t515, t516, t287, t278, t294, -t439 - t62 * t183 - t64 * t185 - t303 * t40 + (t359 + t9 - t496) * t270 + t283, -t40 * t420 + t17 * t508 - t243 * t100 + (-t384 + t64) * t246 - t493 * t183 + (t246 * t47 + t502) * t270 - t289, t385 - t47 * t413 + t243 * t99 - t62 * t246 - t493 * t185 + (t271 * t43 + t426 * t47) * t450 + (-t17 + t296) * t270, t17 * t243 - t43 * t62 - t40 * t64 - g(1) * t440 - g(2) * t441 - g(3) * t435 + t493 * t47 + (-t439 + t9 * t270 + (t270 * t43 + t40 * t508) * qJD(4) + t325) * pkin(10), -t137 * t304 + t38 * t428, t135 * t304 + t137 * t305 + t38 * t427 + t39 * t428, -t137 * t303 - t171 * t304 - t38 * t270 + t428 * t96, -t135 * t305 + t39 * t427, t135 * t303 + t171 * t305 - t39 * t270 + t427 * t96, -t171 * t303 - t96 * t270, -t147 * t96 + t2 * t270 + t250 * t39 + t7 * t427 - g(1) * (-t108 * t467 + t109 * t273) - g(2) * (-t106 * t467 + t107 * t273) - g(3) * (-t149 * t467 + t150 * t273) + t499 * t171 - t303 * t15 + t492 * t135 - t305 * t27, t148 * t96 - t1 * t270 - t250 * t38 - t7 * t428 - g(1) * (-t108 * t465 - t109 * t269) - g(2) * (-t106 * t465 - t107 * t269) - g(3) * (-t149 * t465 - t150 * t269) - t526 * t171 + t303 * t16 + t492 * t137 - t304 * t27, -t1 * t427 - t135 * t526 - t137 * t499 + t147 * t38 - t148 * t39 + t15 * t304 + t16 * t305 + t2 * t428 + t289, t1 * t148 + t2 * t147 + t7 * t250 - g(1) * (-pkin(11) * t431 + t109 * t511 + t440) - g(2) * (-pkin(11) * t432 + t107 * t511 + t441) - g(3) * (-pkin(11) * t430 + t150 * t511 + t435) + t492 * t27 + t526 * t16 + t499 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t479, t414, -t290, -t479, -t531, t199, -t104 * t185 + t298 - t495, t104 * t183 + t246 * t45 - t297, 0, 0, t199, t290, t531, t479, t414, -t479, pkin(4) * t99 - qJ(5) * t100 + (-t43 - t46) * t185 + (t40 + t459) * t183, t117 * t183 + t288 + t495 - 0.2e1 * t507, t117 * t185 - t183 * t47 + t246 * t459 + 0.2e1 * t193 - t233 + t297, -t9 * pkin(4) - g(1) * t406 - g(2) * t407 - g(3) * t390 - t8 * qJ(5) - t47 * t117 - t40 * t46 + t43 * t459, -t137 * t389 - t273 * t38 (-t39 - t480) * t273 + (t38 + t388) * t269, t137 * t183 + t341, t269 * t39 + t273 * t388, -t135 * t183 + t317, t171 * t183, qJ(5) * t39 + t458 * t135 + t15 * t183 - t171 * t18 + t295 * t269 + t273 * t519, -qJ(5) * t38 + t458 * t137 - t16 * t183 + t171 * t19 - t269 * t519 + t295 * t273, t135 * t19 + t137 * t18 + (-t16 * t185 - t512 * t38 - t2 + (t135 * t512 - t16) * qJD(6)) * t273 + (t15 * t185 + t512 * t39 - t1 + (-t137 * t512 + t15) * qJD(6)) * t269 + t336, t7 * qJ(5) - t16 * t19 - t15 * t18 - g(1) * (-pkin(11) * t57 + t406) - g(2) * (-pkin(11) * t55 + t407) - g(3) * (-pkin(11) * t111 + t390) + t458 * t27 - (t1 * t269 + t2 * t273 + (-t15 * t269 + t16 * t273) * qJD(6)) * t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t290, t199 - t479, -t246 ^ 2 - t513, t288 - t496 - t507, 0, 0, 0, 0, 0, 0, t135 * t246 + t341, t137 * t246 + t317, t269 * t524 + t273 * t525, t246 * t27 + t269 * t528 + t273 * t527 - t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, -t135 ^ 2 + t137 ^ 2, -t525, -t481, t524, -t96, -t27 * t137 - g(1) * (-t108 * t269 + t273 * t57) - g(2) * (-t106 * t269 + t273 * t55) - g(3) * t53 + t527, t27 * t135 - g(1) * (-t108 * t273 - t269 * t57) - g(2) * (-t106 * t273 - t269 * t55) + g(3) * t54 - t528, 0, 0;];
tau_reg  = t3;
