% Calculate vector of inverse dynamics joint torques for
% S6PRRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1]';
% MDP [29x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6PRRRPR8_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6PRRRPR8_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(29,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR8_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR8_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR8_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [29 1]), ...
  'S6PRRRPR8_invdynJ_fixb_mdp_slag_vp: MDP has to be [29x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:53:43
% EndTime: 2019-03-08 23:54:00
% DurationCPUTime: 13.93s
% Computational Cost: add. (6716->694), mult. (17109->951), div. (0->0), fcn. (14711->14), ass. (0->293)
t648 = sin(pkin(7));
t653 = sin(qJ(3));
t657 = cos(qJ(3));
t703 = (pkin(3) * t653 - pkin(10) * t657) * t648;
t649 = sin(pkin(6));
t654 = sin(qJ(2));
t814 = t649 * t654;
t775 = qJD(1) * t814;
t863 = qJD(3) * t703 - t648 * t775;
t658 = cos(qJ(2));
t837 = cos(pkin(7));
t759 = t653 * t837;
t686 = -t654 * t759 + t657 * t658;
t574 = t686 * t649;
t757 = t657 * t837;
t817 = t648 * t653;
t706 = pkin(2) * t757 - pkin(9) * t817;
t862 = qJD(1) * t574 - t706 * qJD(3);
t652 = sin(qJ(4));
t656 = cos(qJ(4));
t749 = t837 * qJD(2);
t712 = t749 + qJD(3);
t792 = qJD(2) * t648;
t774 = t653 * t792;
t571 = t652 * t712 + t656 * t774;
t559 = qJD(6) + t571;
t650 = cos(pkin(6));
t819 = t648 * t650;
t776 = qJD(1) * t819;
t793 = qJD(1) * t658;
t843 = pkin(9) * t648;
t861 = qJDD(2) * t843 + (qJD(2) * t793 + qJDD(1) * t654) * t649 + qJD(3) * t776;
t684 = t653 * t658 + t654 * t757;
t573 = t684 * t649;
t750 = qJD(3) * t837;
t725 = t653 * t750;
t790 = qJD(3) * t657;
t770 = t648 * t790;
t798 = pkin(2) * t725 + pkin(9) * t770 - qJD(1) * t573;
t778 = t652 * t817;
t860 = qJD(4) * t778 - t656 * t770;
t616 = qJD(2) * pkin(2) + t649 * t793;
t859 = t837 * t616 + t776;
t773 = t657 * t792;
t627 = -qJD(4) + t773;
t603 = pkin(9) * t792 + t775;
t517 = t657 * t603 + t653 * t859;
t503 = pkin(10) * t712 + t517;
t760 = t650 * t837;
t635 = qJD(1) * t760;
t723 = -pkin(3) * t657 - pkin(10) * t653;
t528 = t635 + (qJD(2) * t723 - t616) * t648;
t461 = t503 * t652 - t656 * t528;
t785 = -qJD(5) - t461;
t690 = qJD(4) * t712;
t742 = t837 * qJDD(2);
t709 = t742 + qJDD(3);
t769 = t652 * t790;
t782 = qJDD(2) * t653;
t788 = qJD(4) * t656;
t501 = t648 * (qJD(2) * (t653 * t788 + t769) + t652 * t782) + t652 * t690 - t656 * t709;
t815 = t648 * t657;
t795 = pkin(2) * t759 + pkin(9) * t815;
t583 = pkin(10) * t837 + t795;
t584 = (-pkin(2) + t723) * t648;
t789 = qJD(4) * t652;
t858 = t583 * t788 + t584 * t789 - t862 * t652 - t656 * t863;
t857 = -t583 * t789 + t584 * t788 + t652 * t863 - t862 * t656;
t835 = sin(pkin(12));
t752 = t835 * t654;
t836 = cos(pkin(12));
t753 = t836 * t658;
t680 = -t650 * t753 + t752;
t762 = t649 * t836;
t856 = t648 * t762 + t680 * t837;
t751 = t835 * t658;
t754 = t836 * t654;
t681 = t650 * t751 + t754;
t761 = t649 * t835;
t855 = -t648 * t761 + t681 * t837;
t758 = t656 * t837;
t540 = -qJD(4) * t758 + t860;
t816 = t648 * t656;
t601 = t652 * t837 + t653 * t816;
t854 = qJ(5) * t540 - qJD(5) * t601 + t798;
t853 = (qJDD(3) + 0.2e1 * t742) * t648;
t756 = t658 * t837;
t852 = -t653 * t654 + t657 * t756;
t733 = t652 * t773;
t851 = -qJD(5) * t652 - t517 + (-t733 + t789) * pkin(4);
t784 = pkin(5) * t571 - t785;
t598 = t650 * t754 + t751;
t504 = t598 * t653 + t657 * t856;
t599 = -t650 * t752 + t753;
t506 = t599 * t653 + t657 * t855;
t538 = -t649 * t852 - t650 * t815;
t693 = g(1) * t506 + g(2) * t504 + g(3) * t538;
t462 = t656 * t503 + t652 * t528;
t459 = qJ(5) * t627 - t462;
t569 = t652 * t774 - t656 * t712;
t844 = pkin(5) * t569;
t445 = -t459 - t844;
t765 = t648 * t782;
t500 = -t652 * t709 + (-t690 - t765) * t656 + t860 * qJD(2);
t496 = -qJDD(6) + t500;
t847 = pkin(4) + pkin(11);
t850 = t847 * t496 + (t445 - t462 + t844) * t559;
t516 = -t653 * t603 + t657 * t859;
t791 = qJD(3) * t653;
t803 = -t648 * (qJ(5) * t791 - qJD(5) * t657) - t857;
t848 = t571 ^ 2;
t660 = qJD(2) ^ 2;
t846 = pkin(5) + pkin(10);
t781 = qJDD(2) * t657;
t636 = t648 * t781;
t783 = qJD(2) * qJD(3);
t768 = t653 * t783;
t585 = t648 * t768 + qJDD(4) - t636;
t845 = pkin(4) * t585;
t842 = pkin(10) * t585;
t838 = pkin(10) * qJD(4);
t834 = qJ(5) * t569;
t833 = qJ(5) * t656;
t651 = sin(qJ(6));
t655 = cos(qJ(6));
t786 = qJD(6) * t655;
t777 = t651 * t501 + t569 * t786 + t655 * t585;
t787 = qJD(6) * t651;
t456 = t627 * t787 + t777;
t832 = t456 * t655;
t831 = t459 * t627;
t830 = t462 * t627;
t821 = t627 * t651;
t529 = -t655 * t569 - t821;
t829 = t529 * t559;
t828 = t529 * t627;
t531 = t569 * t651 - t627 * t655;
t827 = t531 * t559;
t826 = t531 * t627;
t825 = t569 * t571;
t824 = t569 * t627;
t823 = t571 * t627;
t579 = t585 * qJ(5);
t813 = t649 * t658;
t597 = -t648 * t813 + t760;
t822 = t597 * t648;
t818 = t648 * t652;
t812 = t651 * t496;
t811 = t651 * t652;
t810 = t652 * t655;
t809 = t652 * t657;
t807 = t654 * t660;
t491 = t655 * t496;
t806 = t656 * t657;
t805 = qJDD(1) - g(3);
t541 = qJD(4) * t601 + t648 * t769;
t804 = -pkin(5) * t541 - t803;
t771 = t648 * t791;
t802 = -pkin(4) * t771 + t858;
t801 = pkin(4) * t541 + t854;
t589 = qJD(2) * t703;
t800 = t656 * t516 + t652 * t589;
t799 = t656 * t583 + t652 * t584;
t797 = -qJ(5) * t788 + t773 * t833 + t851;
t796 = -t846 * t789 - (-pkin(5) * t809 + qJ(5) * t653) * t792 - t800;
t646 = t653 ^ 2;
t794 = -t657 ^ 2 + t646;
t631 = t846 * t656;
t779 = t648 * t814;
t772 = qJD(2) * t814;
t767 = t657 * t783;
t766 = qJDD(1) * t819;
t763 = -qJ(5) * t652 - pkin(3);
t637 = qJDD(1) * t813;
t730 = qJD(1) * t772;
t580 = qJDD(2) * pkin(2) + t637 - t730;
t682 = -t580 * t759 + t603 * t791 - t653 * t766 + (-t616 * t750 - t861) * t657;
t453 = pkin(10) * t709 - t682;
t634 = qJDD(1) * t760;
t698 = t768 - t781;
t699 = t767 + t782;
t484 = t634 + (pkin(3) * t698 - pkin(10) * t699 - t580) * t648;
t738 = t652 * t453 - t656 * t484 + t503 * t788 + t528 * t789;
t710 = qJDD(5) + t738;
t434 = -pkin(5) * t500 - t585 * t847 + t710;
t704 = -t580 * t757 + t603 * t790 + t616 * t725 + t653 * t861 - t657 * t766;
t454 = -pkin(3) * t709 + t704;
t662 = t500 * qJ(5) - t571 * qJD(5) + t454;
t438 = t501 * t847 + t662;
t748 = t655 * t434 - t651 * t438;
t747 = -t655 * t501 + t585 * t651;
t513 = t652 * t516;
t746 = -t589 * t656 + t513;
t745 = -t652 * t583 + t584 * t656;
t744 = t559 * t651;
t743 = t559 * t655;
t645 = t648 ^ 2;
t740 = t645 * t649 * t807;
t739 = -t656 * t453 - t652 * t484 + t503 * t789 - t528 * t788;
t734 = t648 * t772;
t724 = t648 * t660 * t837;
t512 = pkin(4) * t815 - t745;
t555 = t651 * t774 - t655 * t733;
t722 = t655 * t789 + t555;
t556 = (t651 * t809 + t653 * t655) * t792;
t721 = t651 * t789 - t556;
t600 = -t758 + t778;
t582 = -pkin(3) * t837 - t706;
t668 = -t601 * qJ(5) + t582;
t482 = t600 * t847 + t668;
t720 = pkin(5) * t540 + qJD(6) * t482 + t771 * t847 - t858;
t477 = pkin(5) * t601 + pkin(11) * t815 + t512;
t719 = -qJD(6) * t477 - t541 * t847 - t854;
t602 = -t656 * t847 + t763;
t718 = qJD(6) * t602 + (pkin(5) * t806 - t653 * t847) * t792 + t746 - qJD(4) * t631;
t630 = t846 * t652;
t717 = -qJD(6) * t630 - t851 + t627 * (pkin(11) * t652 - t833);
t715 = t651 * t434 + t655 * t438;
t442 = t627 * t847 + t784;
t502 = -pkin(3) * t712 - t516;
t661 = -t571 * qJ(5) + t502;
t455 = t569 * t847 + t661;
t439 = t442 * t655 - t455 * t651;
t440 = t442 * t651 + t455 * t655;
t685 = t653 * t756 + t654 * t657;
t539 = t649 * t685 + t650 * t817;
t509 = t539 * t652 - t597 * t656;
t467 = t509 * t655 - t538 * t651;
t468 = t509 * t651 + t538 * t655;
t510 = t539 * t656 + t597 * t652;
t711 = 0.2e1 * t749 + qJD(3);
t708 = pkin(4) * t656 - t763;
t511 = qJ(5) * t815 - t799;
t614 = qJD(5) * t627;
t436 = -t579 + t614 + t739;
t702 = -t600 * t651 + t655 * t815;
t542 = t600 * t655 + t651 * t815;
t701 = t627 * t656;
t505 = t598 * t657 - t653 * t856;
t663 = t648 * t680 - t762 * t837;
t470 = t505 * t656 + t652 * t663;
t507 = t599 * t657 - t653 * t855;
t664 = t648 * t681 + t761 * t837;
t472 = t507 * t656 + t652 * t664;
t696 = -g(1) * t472 - g(2) * t470 - g(3) * t510;
t523 = -t598 * t759 - t657 * t680;
t487 = t523 * t652 - t598 * t816;
t525 = -t599 * t759 - t657 * t681;
t489 = t525 * t652 - t599 * t816;
t532 = t574 * t652 - t656 * t779;
t695 = -g(1) * t489 - g(2) * t487 - g(3) * t532;
t488 = t523 * t656 + t598 * t818;
t490 = t525 * t656 + t599 * t818;
t533 = t574 * t656 + t652 * t779;
t694 = g(1) * t490 + g(2) * t488 + g(3) * t533;
t692 = -g(1) * t507 - g(2) * t505 - g(3) * t539;
t522 = t598 * t757 - t653 * t680;
t524 = t599 * t757 - t653 * t681;
t691 = g(1) * t524 + g(2) * t522 + g(3) * t573;
t689 = t709 * MDP(9);
t679 = -t502 * t627 - t842;
t463 = t569 * pkin(4) + t661;
t678 = t463 * t627 + t842;
t674 = t627 * t838 + t693;
t469 = t505 * t652 - t656 * t663;
t471 = t507 * t652 - t656 * t664;
t673 = g(1) * t471 + g(2) * t469 + g(3) * t509 - t738;
t672 = t696 - t739;
t441 = t501 * pkin(4) + t662;
t671 = -t441 + t674;
t667 = -t500 - t824;
t435 = -pkin(5) * t501 - t436;
t666 = t435 + (t559 * t847 + t834) * t559 + t696;
t665 = t463 * t571 + qJDD(5) - t673;
t558 = -t616 * t648 + t635;
t537 = -t580 * t648 + t634;
t515 = pkin(4) * t571 + t834;
t508 = t600 * pkin(4) + t668;
t499 = t650 * t770 + (t686 * qJD(2) + qJD(3) * t852) * t649;
t498 = t650 * t771 + (qJD(2) * t684 + qJD(3) * t685) * t649;
t483 = -pkin(5) * t600 - t511;
t479 = qJD(6) * t702 + t541 * t655 - t651 * t771;
t478 = qJD(6) * t542 + t541 * t651 + t655 * t771;
t476 = -pkin(4) * t774 + t746;
t474 = -qJ(5) * t774 - t800;
t458 = pkin(4) * t627 - t785;
t457 = qJD(6) * t531 + t747;
t447 = t652 * t734 - t539 * t789 + (qJD(4) * t597 + t499) * t656;
t446 = qJD(4) * t510 + t499 * t652 - t656 * t734;
t437 = t710 - t845;
t432 = -qJD(6) * t440 + t748;
t431 = qJD(6) * t439 + t715;
t1 = [t805 * MDP(1) + (-t498 * t712 - t538 * t709 - t657 * t740 + t698 * t822) * MDP(10) + (-t499 * t712 - t539 * t709 + t653 * t740 + t699 * t822) * MDP(11) + (t446 * t571 - t447 * t569 - t500 * t509 - t501 * t510) * MDP(19) + (-t436 * t510 + t437 * t509 + t441 * t538 + t446 * t458 - t447 * t459 + t463 * t498 - g(3)) * MDP(22) + ((-qJD(6) * t468 + t446 * t655 - t498 * t651) * t559 - t467 * t496 + t447 * t529 + t510 * t457) * MDP(28) + (-(qJD(6) * t467 + t446 * t651 + t498 * t655) * t559 + t468 * t496 + t447 * t531 + t510 * t456) * MDP(29) + (MDP(17) - MDP(20)) * (t446 * t627 + t498 * t569 + t501 * t538 - t509 * t585) + (MDP(18) - MDP(21)) * (t447 * t627 + t498 * t571 - t500 * t538 - t510 * t585) + ((qJDD(2) * t658 - t807) * MDP(3) + (-qJDD(2) * t654 - t658 * t660) * MDP(4)) * t649; (g(1) * t681 + g(2) * t680 - g(3) * t813 + t637) * MDP(3) + (g(1) * t599 + g(2) * t598 - t805 * t814) * MDP(4) + (t441 * t508 + t436 * t511 + t437 * t512 - g(1) * (-pkin(2) * t681 + t525 * pkin(3) + t490 * pkin(4) + t524 * pkin(10) + t489 * qJ(5) + t599 * t843) - g(2) * (-pkin(2) * t680 + t523 * pkin(3) + t488 * pkin(4) + t522 * pkin(10) + t487 * qJ(5) + t598 * t843) - g(3) * (pkin(3) * t574 + pkin(4) * t533 + pkin(10) * t573 + qJ(5) * t532 + (pkin(2) * t658 + t654 * t843) * t649) + t801 * t463 + t803 * t459 + t802 * t458) * MDP(22) + (-t441 * t600 - t463 * t541 - t501 * t508 + t512 * t585 + (-t437 * t657 + t458 * t791) * t648 - t802 * t627 - t801 * t569 + t694) * MDP(20) + (-t441 * t601 + t463 * t540 + t500 * t508 - t511 * t585 + (t436 * t657 - t459 * t791) * t648 + t803 * t627 - t801 * t571 + t695) * MDP(21) + (t436 * t600 + t437 * t601 - t458 * t540 + t459 * t541 - t500 * t512 + t501 * t511 + t569 * t803 + t571 * t802 - t691) * MDP(19) + (-(t477 * t655 - t482 * t651) * t496 + t432 * t601 - t439 * t540 + t483 * t457 - t435 * t542 - t445 * t479 - g(1) * (t489 * t651 + t524 * t655) - g(2) * (t487 * t651 + t522 * t655) - g(3) * (t532 * t651 + t573 * t655) + (t651 * t719 - t655 * t720) * t559 + t804 * t529) * MDP(28) + (t541 * t627 - t585 * t600 + (t501 * t657 - t569 * t791) * t648) * MDP(15) + t837 * t689 + (t540 * t627 + t585 * t601 + (t500 * t657 + t571 * t791) * t648) * MDP(14) + qJDD(2) * MDP(2) + ((-pkin(2) * t698 + t657 * t730) * MDP(10) + (-pkin(2) * t699 - t653 * t730) * MDP(11) + 0.2e1 * (t653 * t781 - t783 * t794) * MDP(6) + (qJDD(2) * t646 + 0.2e1 * t653 * t767) * MDP(5)) * t645 + (t706 * t709 - t704 * t837 - g(1) * t525 - g(2) * t523 - g(3) * t574 + (-t537 * t657 + t558 * t791) * t648 - t798 * t712) * MDP(10) + ((t477 * t651 + t482 * t655) * t496 - t431 * t601 + t440 * t540 + t483 * t456 - t435 * t702 + t445 * t478 - g(1) * (t489 * t655 - t524 * t651) - g(2) * (t487 * t655 - t522 * t651) - g(3) * (t532 * t655 - t573 * t651) + (t651 * t720 + t655 * t719) * t559 + t804 * t531) * MDP(29) + (-t456 * t702 + t478 * t531) * MDP(23) + (t456 * t542 + t457 * t702 - t478 * t529 + t479 * t531) * MDP(24) + (t456 * t601 + t478 * t559 + t496 * t702 - t531 * t540) * MDP(25) + (-t585 * t657 - t627 * t791) * t648 * MDP(16) + (-t795 * t709 + t682 * t837 + (t537 * t653 + t558 * t790) * t648 + t691 + t862 * t712) * MDP(11) + (t657 * t853 - t711 * t771) * MDP(8) + (t653 * t853 + t711 * t770) * MDP(7) + (-t799 * t585 - t582 * t500 + t454 * t601 - t502 * t540 + (-t462 * t791 - t657 * t739) * t648 + t857 * t627 + t798 * t571 - t695) * MDP(18) + (t745 * t585 + t582 * t501 + t454 * t600 + t502 * t541 + (-t461 * t791 + t657 * t738) * t648 + t858 * t627 + t798 * t569 - t694) * MDP(17) + (-t496 * t601 - t540 * t559) * MDP(27) + (-t457 * t601 + t479 * t559 - t496 * t542 + t529 * t540) * MDP(26) + (-t500 * t601 - t540 * t571) * MDP(12) + (t500 * t600 - t501 * t601 + t540 * t569 - t541 * t571) * MDP(13); (-t500 * t652 - t571 * t701) * MDP(12) + (-t496 * t652 - t559 * t701) * MDP(27) + (-t657 * t724 + t765) * MDP(7) + (-t458 * t774 + t476 * t627 + t501 * t708 - t569 * t797 + t652 * t678 - t656 * t671) * MDP(20) + (t459 * t774 - t474 * t627 - t500 * t708 - t571 * t797 + t652 * t671 + t656 * t678) * MDP(21) + (-t474 * t569 - t476 * t571 + (-t436 - t627 * t458 + (qJD(4) * t571 - t501) * pkin(10)) * t656 + (t437 - t831 + (qJD(4) * t569 - t500) * pkin(10)) * t652 + t692) * MDP(19) + (t529 * t556 + t531 * t555 + (-t529 * t651 + t531 * t655) * t789 + (-t832 + t457 * t651 + (t529 * t655 + t531 * t651) * qJD(6)) * t656) * MDP(24) + (pkin(3) * t500 - t800 * t627 + t462 * t774 - t517 * t571 + t679 * t656 + (t454 - t674) * t652) * MDP(18) + (-t627 * t788 + t585 * t652 + (-t571 * t653 + t627 * t806) * t792) * MDP(14) + ((t602 * t655 + t630 * t651) * t496 - t431 * t652 + t631 * t456 - g(1) * (-t506 * t810 - t507 * t651) - g(2) * (-t504 * t810 - t505 * t651) - g(3) * (-t538 * t810 - t539 * t651) + (t651 * t718 + t655 * t717) * t559 + t796 * t531 + t721 * t445 + (-t435 * t651 + t440 * t627 - t445 * t786) * t656) * MDP(29) + (-(-t602 * t651 + t630 * t655) * t496 + t432 * t652 + t631 * t457 - g(1) * (-t506 * t811 + t507 * t655) - g(2) * (-t504 * t811 + t505 * t655) - g(3) * (-t538 * t811 + t539 * t655) + (t651 * t717 - t655 * t718) * t559 + t796 * t529 - t722 * t445 + (t435 * t655 - t439 * t627 - t445 * t787) * t656) * MDP(28) + (t456 * t652 + t721 * t559 + (-t559 * t786 + t812 - t826) * t656) * MDP(25) + (-t457 * t652 + t722 * t559 + (t559 * t787 + t491 + t828) * t656) * MDP(26) + ((-t500 + t824) * t656 + (-t501 + t823) * t652) * MDP(13) + (t516 * t712 - t558 * t773 + t682 - t692) * MDP(11) + (t517 * t712 - t558 * t774 + t693 - t704) * MDP(10) + (t461 * t774 - pkin(3) * t501 - t513 * t627 - t517 * t569 + t679 * t652 + (-t454 + (t589 + t838) * t627 + t693) * t656) * MDP(17) + t627 * MDP(16) * t774 + (t627 * t789 + t585 * t656 + (t569 * t653 - t627 * t809) * t792) * MDP(15) + (t653 * t724 + t636) * MDP(8) + (-t456 * t651 * t656 + (-t656 * t786 + t721) * t531) * MDP(23) + t689 + (-t458 * t476 - t459 * t474 + t797 * t463 + (-t436 * t656 + t437 * t652 + (t458 * t656 + t459 * t652) * qJD(4) + t692) * pkin(10) + (-t441 + t693) * t708) * MDP(22) + (-MDP(5) * t653 * t657 + MDP(6) * t794) * t645 * t660; MDP(12) * t825 + (-t569 ^ 2 + t848) * MDP(13) + t667 * MDP(14) + (-t501 - t823) * MDP(15) + t585 * MDP(16) + (-t502 * t571 + t673 - t830) * MDP(17) + (t461 * t627 + t502 * t569 - t672) * MDP(18) + (pkin(4) * t500 - qJ(5) * t501 + (-t459 - t462) * t571 + (t458 + t785) * t569) * MDP(19) + (t515 * t569 + t665 + t830 - 0.2e1 * t845) * MDP(20) + (-t463 * t569 + t515 * t571 + t627 * t785 + 0.2e1 * t579 - t614 + t672) * MDP(21) + (-t436 * qJ(5) - t437 * pkin(4) - t463 * t515 - t458 * t462 - g(1) * (-pkin(4) * t471 + qJ(5) * t472) - g(2) * (-pkin(4) * t469 + qJ(5) * t470) - g(3) * (-pkin(4) * t509 + qJ(5) * t510) + t785 * t459) * MDP(22) + (-t531 * t744 + t832) * MDP(23) + ((-t457 - t827) * t655 + (-t456 + t829) * t651) * MDP(24) + (t531 * t569 - t559 * t744 - t491) * MDP(25) + (-t529 * t569 - t559 * t743 + t812) * MDP(26) + t559 * t569 * MDP(27) + (qJ(5) * t457 + t439 * t569 + t784 * t529 + t666 * t651 + t655 * t850) * MDP(28) + (qJ(5) * t456 - t440 * t569 + t784 * t531 - t651 * t850 + t666 * t655) * MDP(29); t667 * MDP(19) + (t585 - t825) * MDP(20) + (-t627 ^ 2 - t848) * MDP(21) + (t665 - t831 - t845) * MDP(22) + (-t491 + t828) * MDP(28) + (t812 + t826) * MDP(29) + (-MDP(28) * t744 - MDP(29) * t743) * t559; t531 * t529 * MDP(23) + (-t529 ^ 2 + t531 ^ 2) * MDP(24) + (t777 + t829) * MDP(25) + (-t747 + t827) * MDP(26) - t496 * MDP(27) + (t440 * t559 - t445 * t531 - g(1) * (t471 * t655 - t506 * t651) - g(2) * (t469 * t655 - t504 * t651) - g(3) * t467 + t748) * MDP(28) + (t439 * t559 + t445 * t529 - g(1) * (-t471 * t651 - t506 * t655) - g(2) * (-t469 * t651 - t504 * t655) + g(3) * t468 - t715) * MDP(29) + (MDP(25) * t821 - MDP(26) * t531 - MDP(28) * t440 - MDP(29) * t439) * qJD(6);];
tau  = t1;
