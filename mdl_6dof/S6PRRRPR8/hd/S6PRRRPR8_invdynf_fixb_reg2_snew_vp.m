% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRPR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 09:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRPR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR8_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:14:49
% EndTime: 2019-05-05 09:14:59
% DurationCPUTime: 10.63s
% Computational Cost: add. (53174->363), mult. (111724->539), div. (0->0), fcn. (89836->14), ass. (0->312)
t2719 = sin(qJ(3));
t2712 = sin(pkin(7));
t2813 = qJD(2) * t2712;
t2795 = t2719 * t2813;
t2700 = qJD(3) * t2795;
t2723 = cos(qJ(3));
t2797 = qJDD(2) * t2723;
t2784 = t2712 * t2797 - t2700;
t2744 = -qJDD(4) + t2784;
t2718 = sin(qJ(4));
t2722 = cos(qJ(4));
t2715 = cos(pkin(7));
t2789 = qJD(2) * t2715 + qJD(3);
t2667 = t2718 * t2795 - t2722 * t2789;
t2669 = t2718 * t2789 + t2722 * t2795;
t2809 = t2667 * t2669;
t2630 = t2744 + t2809;
t2666 = t2667 ^ 2;
t2794 = t2723 * t2813;
t2695 = -qJD(4) + t2794;
t2691 = t2695 ^ 2;
t2636 = -t2691 - t2666;
t2597 = t2630 * t2722 - t2636 * t2718;
t2837 = t2597 * t2712;
t2836 = t2597 * t2715;
t2598 = t2630 * t2718 + t2636 * t2722;
t2835 = t2598 * t2719;
t2834 = t2598 * t2723;
t2738 = t2744 - t2809;
t2816 = t2669 ^ 2;
t2792 = -t2691 - t2816;
t2603 = t2718 * t2738 + t2722 * t2792;
t2833 = t2603 * t2712;
t2832 = t2603 * t2715;
t2606 = t2718 * t2792 - t2722 * t2738;
t2831 = t2606 * t2719;
t2830 = t2606 * t2723;
t2798 = qJDD(2) * t2712;
t2676 = qJD(3) * t2794 + t2719 * t2798;
t2705 = t2715 * qJDD(2) + qJDD(3);
t2748 = t2676 * t2722 + t2705 * t2718;
t2739 = qJD(4) * t2667 - t2748;
t2808 = t2667 * t2695;
t2829 = t2739 - t2808;
t2822 = -t2666 - t2816;
t2828 = t2719 * t2822;
t2827 = t2723 * t2822;
t2711 = sin(pkin(12));
t2714 = cos(pkin(12));
t2698 = -g(1) * t2714 - g(2) * t2711;
t2720 = sin(qJ(2));
t2724 = cos(qJ(2));
t2710 = -g(3) + qJDD(1);
t2713 = sin(pkin(6));
t2804 = t2710 * t2713;
t2697 = g(1) * t2711 - g(2) * t2714;
t2716 = cos(pkin(6));
t2807 = t2697 * t2716;
t2825 = t2804 + t2807;
t2646 = -t2698 * t2720 + t2724 * t2825;
t2725 = qJD(2) ^ 2;
t2731 = pkin(9) * t2712 * t2725 + qJDD(2) * pkin(2) + t2646;
t2746 = -t2697 * t2713 + t2710 * t2716;
t2826 = t2712 * t2746 + t2715 * t2731;
t2786 = t2789 ^ 2;
t2802 = qJD(4) + t2695;
t2736 = t2667 * t2802 - t2748;
t2824 = t2718 * t2736;
t2823 = t2722 * t2736;
t2821 = -t2705 * pkin(3) - t2786 * pkin(10);
t2717 = sin(qJ(6));
t2721 = cos(qJ(6));
t2647 = t2724 * t2698 + t2720 * t2825;
t2641 = -pkin(2) * t2725 + pkin(9) * t2798 + t2647;
t2594 = t2723 * t2641 + t2719 * t2826;
t2675 = (-pkin(3) * t2723 - pkin(10) * t2719) * t2813;
t2586 = -pkin(3) * t2786 + t2705 * pkin(10) + t2675 * t2794 + t2594;
t2662 = t2715 * t2746;
t2783 = qJD(2) * t2789;
t2742 = t2719 * t2783;
t2743 = t2723 * t2783;
t2589 = t2700 * pkin(3) - t2676 * pkin(10) + t2662 + (-pkin(10) * t2743 + (t2742 - t2797) * pkin(3) - t2731) * t2712;
t2554 = -t2718 * t2586 + t2722 * t2589;
t2740 = pkin(4) * t2744 - t2691 * qJ(5) + qJDD(5) - t2554;
t2728 = t2744 * pkin(11) + t2740 + (-t2739 - t2808) * pkin(5);
t2799 = t2826 * t2723;
t2593 = -t2641 * t2719 + t2799;
t2787 = t2676 * t2718 - t2722 * t2705;
t2635 = qJD(4) * t2669 + t2787;
t2820 = t2635 * pkin(4) + qJ(5) * t2829;
t2729 = -t2666 * pkin(5) + pkin(11) * t2635 + t2675 * t2795 - t2593 + t2820 + t2821;
t2651 = pkin(5) * t2669 + pkin(11) * t2695;
t2815 = -2 * qJD(5);
t2791 = -pkin(4) * t2695 + t2815;
t2785 = -t2651 + t2791;
t2642 = pkin(4) * t2667 - qJ(5) * t2669;
t2790 = pkin(11) * t2667 + t2642;
t2726 = -t2717 * t2729 + t2721 * t2728 + (-t2717 * t2785 + t2721 * t2790) * t2669;
t2648 = -t2721 * t2667 - t2695 * t2717;
t2819 = t2648 ^ 2;
t2650 = t2667 * t2717 - t2695 * t2721;
t2818 = t2650 ^ 2;
t2665 = qJD(6) + t2669;
t2817 = t2665 ^ 2;
t2810 = t2648 * t2650;
t2805 = t2712 ^ 2 * t2725;
t2803 = qJD(4) - t2695;
t2801 = qJD(6) - t2665;
t2800 = qJD(6) + t2665;
t2793 = -t2817 - t2818;
t2788 = t2721 * t2635 + t2717 * t2744;
t2504 = t2721 * t2729 + t2717 * t2728 + (t2717 * t2790 + t2721 * t2785) * t2669;
t2486 = t2717 * t2504 + t2721 * t2726;
t2555 = t2586 * t2722 + t2589 * t2718;
t2734 = -t2691 * pkin(4) - qJ(5) * t2744 - t2642 * t2667 + t2555;
t2530 = -pkin(5) * t2635 - pkin(11) * t2666 + (t2815 - t2651) * t2695 + t2734;
t2482 = -t2486 * t2722 + t2530 * t2718;
t2483 = t2486 * t2718 + t2530 * t2722;
t2487 = t2504 * t2721 - t2717 * t2726;
t2781 = t2483 * t2719 - t2487 * t2723;
t2469 = -t2482 * t2712 + t2715 * t2781;
t2472 = t2483 * t2723 + t2487 * t2719;
t2782 = t2469 * t2724 + t2472 * t2720;
t2539 = t2695 * t2815 + t2734;
t2542 = t2669 * t2642 + t2740;
t2518 = t2539 * t2718 - t2542 * t2722;
t2519 = t2539 * t2722 + t2542 * t2718;
t2585 = (t2675 * t2813 + t2641) * t2719 - t2799 + t2821;
t2545 = t2669 * t2791 + t2585 + t2820;
t2775 = t2519 * t2719 - t2545 * t2723;
t2489 = -t2518 * t2712 + t2715 * t2775;
t2496 = t2519 * t2723 + t2545 * t2719;
t2780 = t2489 * t2724 + t2496 * t2720;
t2524 = t2554 * t2722 + t2555 * t2718;
t2525 = -t2554 * t2718 + t2555 * t2722;
t2774 = t2525 * t2719 - t2585 * t2723;
t2493 = -t2524 * t2712 + t2715 * t2774;
t2520 = t2525 * t2723 + t2585 * t2719;
t2779 = t2493 * t2724 + t2520 * t2720;
t2579 = -t2650 * t2801 + t2788;
t2753 = -t2717 * t2635 + t2721 * t2744;
t2735 = t2648 * t2801 + t2753;
t2546 = t2717 * t2579 + t2721 * t2735;
t2600 = -t2818 - t2819;
t2533 = -t2546 * t2722 + t2600 * t2718;
t2534 = t2546 * t2718 + t2600 * t2722;
t2547 = t2579 * t2721 - t2717 * t2735;
t2773 = t2534 * t2719 - t2547 * t2723;
t2495 = -t2533 * t2712 + t2715 * t2773;
t2513 = t2534 * t2723 + t2547 * t2719;
t2778 = t2495 * t2724 + t2513 * t2720;
t2607 = -t2817 - t2819;
t2737 = qJDD(6) - t2739;
t2733 = t2737 - t2810;
t2567 = t2717 * t2607 + t2721 * t2733;
t2578 = t2650 * t2800 - t2788;
t2540 = -t2567 * t2722 + t2578 * t2718;
t2541 = t2567 * t2718 + t2578 * t2722;
t2568 = t2607 * t2721 - t2717 * t2733;
t2770 = t2541 * t2719 - t2568 * t2723;
t2502 = -t2540 * t2712 + t2715 * t2770;
t2523 = t2541 * t2723 + t2568 * t2719;
t2777 = t2502 * t2724 + t2523 * t2720;
t2592 = -t2737 - t2810;
t2569 = t2717 * t2592 + t2721 * t2793;
t2580 = -t2648 * t2800 - t2753;
t2543 = -t2569 * t2722 + t2580 * t2718;
t2544 = t2569 * t2718 + t2580 * t2722;
t2570 = t2592 * t2721 - t2717 * t2793;
t2769 = t2544 * t2719 - t2570 * t2723;
t2506 = -t2543 * t2712 + t2715 * t2769;
t2526 = t2544 * t2723 + t2570 * t2719;
t2776 = t2506 * t2724 + t2526 * t2720;
t2615 = -t2669 * t2802 - t2787;
t2581 = t2615 * t2718 + t2823;
t2583 = t2615 * t2722 - t2824;
t2763 = t2583 * t2719 - t2827;
t2537 = -t2581 * t2712 + t2715 * t2763;
t2563 = t2583 * t2723 + t2828;
t2772 = t2537 * t2724 + t2563 * t2720;
t2658 = t2669 * t2695;
t2616 = -t2635 - t2658;
t2582 = t2616 * t2718 + t2823;
t2584 = t2616 * t2722 - t2824;
t2762 = t2584 * t2719 - t2827;
t2538 = -t2582 * t2712 + t2715 * t2762;
t2564 = t2584 * t2723 + t2828;
t2771 = t2538 * t2724 + t2564 * t2720;
t2624 = -t2712 * t2731 + t2662;
t2761 = t2593 * t2723 + t2594 * t2719;
t2549 = -t2624 * t2712 + t2715 * t2761;
t2562 = -t2593 * t2719 + t2594 * t2723;
t2768 = t2549 * t2724 + t2562 * t2720;
t2613 = t2669 * t2803 + t2787;
t2760 = -t2613 * t2723 + t2835;
t2552 = t2715 * t2760 + t2837;
t2573 = t2613 * t2719 + t2834;
t2767 = t2552 * t2724 + t2573 * t2720;
t2614 = t2635 - t2658;
t2759 = t2614 * t2723 - t2835;
t2553 = t2715 * t2759 - t2837;
t2574 = -t2614 * t2719 - t2834;
t2766 = t2553 * t2724 + t2574 * t2720;
t2758 = t2723 * t2829 - t2831;
t2558 = t2715 * t2758 - t2833;
t2575 = -t2719 * t2829 - t2830;
t2765 = t2558 * t2724 + t2575 * t2720;
t2617 = -t2667 * t2803 + t2748;
t2757 = t2617 * t2723 + t2831;
t2559 = t2715 * t2757 + t2833;
t2576 = -t2617 * t2719 + t2830;
t2764 = t2559 * t2724 + t2576 * t2720;
t2708 = t2719 ^ 2;
t2709 = t2723 ^ 2;
t2682 = (-t2708 - t2709) * t2805;
t2654 = t2712 * t2743 - t2676;
t2684 = t2712 * t2742;
t2655 = t2684 + t2784;
t2751 = t2654 * t2723 + t2655 * t2719;
t2609 = -t2682 * t2712 + t2715 * t2751;
t2625 = -t2654 * t2719 + t2655 * t2723;
t2756 = t2609 * t2724 + t2625 * t2720;
t2653 = t2789 * t2794 + t2676;
t2664 = -t2708 * t2805 - t2786;
t2694 = t2719 * t2723 * t2805;
t2674 = t2694 - t2705;
t2750 = t2664 * t2723 + t2674 * t2719;
t2611 = -t2653 * t2712 + t2715 * t2750;
t2640 = -t2664 * t2719 + t2674 * t2723;
t2755 = t2611 * t2724 + t2640 * t2720;
t2656 = t2684 - t2784;
t2673 = t2694 + t2705;
t2677 = -t2709 * t2805 - t2786;
t2749 = t2673 * t2723 + t2677 * t2719;
t2623 = -t2656 * t2712 + t2715 * t2749;
t2645 = -t2673 * t2719 + t2677 * t2723;
t2754 = t2623 * t2724 + t2645 * t2720;
t2752 = t2646 * t2724 + t2647 * t2720;
t2745 = qJDD(2) * t2724 - t2720 * t2725;
t2693 = -qJDD(2) * t2720 - t2724 * t2725;
t2681 = t2745 * t2716;
t2680 = t2693 * t2716;
t2679 = t2745 * t2713;
t2678 = t2693 * t2713;
t2622 = t2656 * t2715 + t2712 * t2749;
t2621 = -t2646 * t2720 + t2647 * t2724;
t2610 = t2653 * t2715 + t2712 * t2750;
t2608 = t2682 * t2715 + t2712 * t2751;
t2602 = t2713 ^ 2 * t2697 + (t2752 - t2804) * t2716;
t2601 = t2710 * t2716 ^ 2 + (t2752 - t2807) * t2713;
t2595 = -t2623 * t2720 + t2645 * t2724;
t2590 = -t2611 * t2720 + t2640 * t2724;
t2587 = -t2609 * t2720 + t2625 * t2724;
t2572 = -t2622 * t2713 + t2716 * t2754;
t2571 = t2622 * t2716 + t2713 * t2754;
t2566 = -t2610 * t2713 + t2716 * t2755;
t2565 = t2610 * t2716 + t2713 * t2755;
t2561 = -t2608 * t2713 + t2716 * t2756;
t2560 = t2608 * t2716 + t2713 * t2756;
t2557 = t2712 * t2757 - t2832;
t2556 = t2712 * t2758 + t2832;
t2551 = t2712 * t2759 + t2836;
t2550 = t2712 * t2760 - t2836;
t2548 = t2624 * t2715 + t2712 * t2761;
t2536 = t2582 * t2715 + t2712 * t2762;
t2535 = t2581 * t2715 + t2712 * t2763;
t2532 = -t2559 * t2720 + t2576 * t2724;
t2531 = -t2558 * t2720 + t2575 * t2724;
t2529 = -t2553 * t2720 + t2574 * t2724;
t2528 = -t2552 * t2720 + t2573 * t2724;
t2527 = -t2549 * t2720 + t2562 * t2724;
t2522 = -t2538 * t2720 + t2564 * t2724;
t2521 = -t2537 * t2720 + t2563 * t2724;
t2517 = -t2557 * t2713 + t2716 * t2764;
t2516 = -t2556 * t2713 + t2716 * t2765;
t2515 = t2557 * t2716 + t2713 * t2764;
t2514 = t2556 * t2716 + t2713 * t2765;
t2512 = -t2551 * t2713 + t2716 * t2766;
t2511 = -t2550 * t2713 + t2716 * t2767;
t2510 = t2551 * t2716 + t2713 * t2766;
t2509 = t2550 * t2716 + t2713 * t2767;
t2508 = -t2548 * t2713 + t2716 * t2768;
t2507 = t2548 * t2716 + t2713 * t2768;
t2505 = t2543 * t2715 + t2712 * t2769;
t2501 = t2540 * t2715 + t2712 * t2770;
t2500 = -t2536 * t2713 + t2716 * t2771;
t2499 = -t2535 * t2713 + t2716 * t2772;
t2498 = t2536 * t2716 + t2713 * t2771;
t2497 = t2535 * t2716 + t2713 * t2772;
t2494 = t2533 * t2715 + t2712 * t2773;
t2492 = t2524 * t2715 + t2712 * t2774;
t2491 = -t2506 * t2720 + t2526 * t2724;
t2490 = -t2502 * t2720 + t2523 * t2724;
t2488 = t2518 * t2715 + t2712 * t2775;
t2485 = -t2495 * t2720 + t2513 * t2724;
t2484 = -t2493 * t2720 + t2520 * t2724;
t2481 = -t2505 * t2713 + t2716 * t2776;
t2480 = t2505 * t2716 + t2713 * t2776;
t2479 = -t2501 * t2713 + t2716 * t2777;
t2478 = t2501 * t2716 + t2713 * t2777;
t2477 = -t2489 * t2720 + t2496 * t2724;
t2476 = -t2494 * t2713 + t2716 * t2778;
t2475 = t2494 * t2716 + t2713 * t2778;
t2474 = -t2492 * t2713 + t2716 * t2779;
t2473 = t2492 * t2716 + t2713 * t2779;
t2471 = -t2488 * t2713 + t2716 * t2780;
t2470 = t2488 * t2716 + t2713 * t2780;
t2468 = t2482 * t2715 + t2712 * t2781;
t2467 = -t2469 * t2720 + t2472 * t2724;
t2466 = -t2468 * t2713 + t2716 * t2782;
t2465 = t2468 * t2716 + t2713 * t2782;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2697 * t2711 + t2698 * t2714, 0, 0, 0, 0, 0, 0, -t2681 * t2711 + t2693 * t2714, -t2680 * t2711 - t2714 * t2745, 0, -t2602 * t2711 + t2621 * t2714, 0, 0, 0, 0, 0, 0, -t2572 * t2711 + t2595 * t2714, -t2566 * t2711 + t2590 * t2714, -t2561 * t2711 + t2587 * t2714, -t2508 * t2711 + t2527 * t2714, 0, 0, 0, 0, 0, 0, -t2511 * t2711 + t2528 * t2714, -t2516 * t2711 + t2531 * t2714, -t2500 * t2711 + t2522 * t2714, -t2474 * t2711 + t2484 * t2714, 0, 0, 0, 0, 0, 0, -t2499 * t2711 + t2521 * t2714, -t2512 * t2711 + t2529 * t2714, -t2517 * t2711 + t2532 * t2714, -t2471 * t2711 + t2477 * t2714, 0, 0, 0, 0, 0, 0, -t2479 * t2711 + t2490 * t2714, -t2481 * t2711 + t2491 * t2714, -t2476 * t2711 + t2485 * t2714, -t2466 * t2711 + t2467 * t2714; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2697 * t2714 + t2698 * t2711, 0, 0, 0, 0, 0, 0, t2681 * t2714 + t2693 * t2711, t2680 * t2714 - t2711 * t2745, 0, t2602 * t2714 + t2621 * t2711, 0, 0, 0, 0, 0, 0, t2572 * t2714 + t2595 * t2711, t2566 * t2714 + t2590 * t2711, t2561 * t2714 + t2587 * t2711, t2508 * t2714 + t2527 * t2711, 0, 0, 0, 0, 0, 0, t2511 * t2714 + t2528 * t2711, t2516 * t2714 + t2531 * t2711, t2500 * t2714 + t2522 * t2711, t2474 * t2714 + t2484 * t2711, 0, 0, 0, 0, 0, 0, t2499 * t2714 + t2521 * t2711, t2512 * t2714 + t2529 * t2711, t2517 * t2714 + t2532 * t2711, t2471 * t2714 + t2477 * t2711, 0, 0, 0, 0, 0, 0, t2479 * t2714 + t2490 * t2711, t2481 * t2714 + t2491 * t2711, t2476 * t2714 + t2485 * t2711, t2466 * t2714 + t2467 * t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2710, 0, 0, 0, 0, 0, 0, t2679, t2678, 0, t2601, 0, 0, 0, 0, 0, 0, t2571, t2565, t2560, t2507, 0, 0, 0, 0, 0, 0, t2509, t2514, t2498, t2473, 0, 0, 0, 0, 0, 0, t2497, t2510, t2515, t2470, 0, 0, 0, 0, 0, 0, t2478, t2480, t2475, t2465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2698, 0, 0, 0, 0, 0, 0, t2693, -t2745, 0, t2621, 0, 0, 0, 0, 0, 0, t2595, t2590, t2587, t2527, 0, 0, 0, 0, 0, 0, t2528, t2531, t2522, t2484, 0, 0, 0, 0, 0, 0, t2521, t2529, t2532, t2477, 0, 0, 0, 0, 0, 0, t2490, t2491, t2485, t2467; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2697, 0, 0, 0, 0, 0, 0, t2681, t2680, 0, t2602, 0, 0, 0, 0, 0, 0, t2572, t2566, t2561, t2508, 0, 0, 0, 0, 0, 0, t2511, t2516, t2500, t2474, 0, 0, 0, 0, 0, 0, t2499, t2512, t2517, t2471, 0, 0, 0, 0, 0, 0, t2479, t2481, t2476, t2466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2710, 0, 0, 0, 0, 0, 0, t2679, t2678, 0, t2601, 0, 0, 0, 0, 0, 0, t2571, t2565, t2560, t2507, 0, 0, 0, 0, 0, 0, t2509, t2514, t2498, t2473, 0, 0, 0, 0, 0, 0, t2497, t2510, t2515, t2470, 0, 0, 0, 0, 0, 0, t2478, t2480, t2475, t2465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2725, -qJDD(2), 0, t2647, 0, 0, 0, 0, 0, 0, t2645, t2640, t2625, t2562, 0, 0, 0, 0, 0, 0, t2573, t2575, t2564, t2520, 0, 0, 0, 0, 0, 0, t2563, t2574, t2576, t2496, 0, 0, 0, 0, 0, 0, t2523, t2526, t2513, t2472; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2725, 0, t2646, 0, 0, 0, 0, 0, 0, t2623, t2611, t2609, t2549, 0, 0, 0, 0, 0, 0, t2552, t2558, t2538, t2493, 0, 0, 0, 0, 0, 0, t2537, t2553, t2559, t2489, 0, 0, 0, 0, 0, 0, t2502, t2506, t2495, t2469; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2746, 0, 0, 0, 0, 0, 0, t2622, t2610, t2608, t2548, 0, 0, 0, 0, 0, 0, t2550, t2556, t2536, t2492, 0, 0, 0, 0, 0, 0, t2535, t2551, t2557, t2488, 0, 0, 0, 0, 0, 0, t2501, t2505, t2494, t2468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2677, t2674, t2655, t2594, 0, 0, 0, 0, 0, 0, t2598, -t2606, t2584, t2525, 0, 0, 0, 0, 0, 0, t2583, -t2598, t2606, t2519, 0, 0, 0, 0, 0, 0, t2541, t2544, t2534, t2483; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2673, t2664, t2654, t2593, 0, 0, 0, 0, 0, 0, -t2613, t2829, -t2822, -t2585, 0, 0, 0, 0, 0, 0, -t2822, t2614, t2617, -t2545, 0, 0, 0, 0, 0, 0, -t2568, -t2570, -t2547, -t2487; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2656, t2653, t2682, t2624, 0, 0, 0, 0, 0, 0, -t2597, t2603, t2582, t2524, 0, 0, 0, 0, 0, 0, t2581, t2597, -t2603, t2518, 0, 0, 0, 0, 0, 0, t2540, t2543, t2533, t2482; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2636, t2738, t2616, t2555, 0, 0, 0, 0, 0, 0, t2615, -t2636, -t2738, t2539, 0, 0, 0, 0, 0, 0, t2578, t2580, t2600, t2530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2630, t2792, t2736, t2554, 0, 0, 0, 0, 0, 0, t2736, t2630, -t2792, -t2542, 0, 0, 0, 0, 0, 0, -t2567, -t2569, -t2546, -t2486; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2613, -t2829, t2822, t2585, 0, 0, 0, 0, 0, 0, t2822, -t2614, -t2617, t2545, 0, 0, 0, 0, 0, 0, t2568, t2570, t2547, t2487; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2822, -t2614, -t2617, t2545, 0, 0, 0, 0, 0, 0, t2568, t2570, t2547, t2487; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2615, t2636, t2738, -t2539, 0, 0, 0, 0, 0, 0, -t2578, -t2580, -t2600, -t2530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2736, -t2630, t2792, t2542, 0, 0, 0, 0, 0, 0, t2567, t2569, t2546, t2486; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2607, t2592, t2579, t2504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2733, t2793, t2735, t2726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2578, t2580, t2600, t2530;];
f_new_reg  = t1;
