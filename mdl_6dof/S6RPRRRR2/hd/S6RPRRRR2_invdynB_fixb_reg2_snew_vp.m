% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 02:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:45:48
% EndTime: 2019-05-06 02:46:22
% DurationCPUTime: 33.11s
% Computational Cost: add. (229615->883), mult. (451188->1363), div. (0->0), fcn. (321093->12), ass. (0->597)
t1045 = qJD(1) ^ 2;
t971 = sin(qJ(1));
t976 = cos(qJ(1));
t939 = g(1) * t976 + g(2) * t971;
t923 = -pkin(1) * t1045 - t939;
t964 = sin(pkin(11));
t965 = cos(pkin(11));
t938 = g(1) * t971 - t976 * g(2);
t984 = qJDD(1) * pkin(1) + t938;
t867 = t964 * t923 - t965 * t984;
t868 = t965 * t923 + t964 * t984;
t801 = t867 * t965 - t868 * t964;
t1031 = t801 * t971;
t991 = t867 * t964 + t965 * t868;
t732 = t976 * t991 + t1031;
t1030 = t801 * t976;
t1068 = -t971 * t991 + t1030;
t928 = qJDD(1) * t964 + t1045 * t965;
t929 = qJDD(1) * t965 - t1045 * t964;
t872 = -t928 * t971 + t976 * t929;
t962 = g(3) - qJDD(2);
t902 = qJ(2) * t928 - t962 * t965;
t985 = -qJ(2) * t929 - t962 * t964;
t1067 = -pkin(6) * t872 + t902 * t971 + t976 * t985;
t970 = sin(qJ(3));
t1010 = qJD(1) * t970;
t969 = sin(qJ(4));
t974 = cos(qJ(4));
t975 = cos(qJ(3));
t913 = -t974 * t975 * qJD(1) + t1010 * t969;
t959 = qJD(3) + qJD(4);
t904 = t959 * t913;
t1004 = qJDD(1) * t970;
t1005 = qJD(1) * qJD(3);
t994 = t975 * t1005;
t925 = t994 + t1004;
t955 = t975 * qJDD(1);
t995 = t970 * t1005;
t926 = t955 - t995;
t983 = qJD(4) * t913 - t925 * t974 - t926 * t969;
t1066 = t983 + t904;
t1003 = qJDD(3) + qJDD(4);
t915 = (t969 * t975 + t970 * t974) * qJD(1);
t869 = t915 * t913;
t1050 = -t869 + t1003;
t1065 = t1050 * t969;
t1064 = t1050 * t974;
t968 = sin(qJ(5));
t973 = cos(qJ(5));
t881 = t915 * t968 - t973 * t959;
t883 = t915 * t973 + t959 * t968;
t828 = t883 * t881;
t990 = t969 * t925 - t974 * t926;
t837 = -qJD(4) * t915 - t990;
t832 = qJDD(5) - t837;
t1052 = -t828 + t832;
t1063 = t1052 * t968;
t1062 = t1052 * t973;
t967 = sin(qJ(6));
t972 = cos(qJ(6));
t824 = t972 * t881 + t883 * t967;
t826 = -t881 * t967 + t883 * t972;
t760 = t826 * t824;
t981 = qJDD(6) + t832;
t1054 = -t760 + t981;
t1061 = t1054 * t967;
t1060 = t1054 * t972;
t1049 = t976 * t928 + t929 * t971;
t1059 = pkin(6) * t1049 + t902 * t976 - t971 * t985;
t908 = qJD(5) + t913;
t906 = qJD(6) + t908;
t791 = t906 * t824;
t992 = -t973 * t1003 - t968 * t983;
t779 = -qJD(5) * t883 - t992;
t780 = -t881 * qJD(5) + t968 * t1003 - t973 * t983;
t982 = qJD(6) * t824 - t779 * t967 - t780 * t972;
t1053 = -t791 - t982;
t849 = t908 * t881;
t757 = -t849 - t780;
t756 = -t849 + t780;
t993 = -t972 * t779 + t967 * t780;
t648 = (qJD(6) - t906) * t826 + t993;
t753 = (qJD(5) - t908) * t883 + t992;
t808 = (qJD(4) - t959) * t915 + t990;
t822 = t824 ^ 2;
t823 = t826 ^ 2;
t1047 = t881 ^ 2;
t880 = t883 ^ 2;
t905 = t906 ^ 2;
t907 = t908 ^ 2;
t910 = t913 ^ 2;
t911 = t915 ^ 2;
t1046 = t959 ^ 2;
t1044 = pkin(4) * t969;
t980 = qJDD(1) * pkin(7) + t868;
t979 = -pkin(2) * t1045 + t980;
t836 = -t970 * t962 + t975 * t979;
t937 = qJD(3) * pkin(3) - pkin(8) * t1010;
t961 = t975 ^ 2;
t957 = t961 * t1045;
t788 = -pkin(3) * t957 + pkin(8) * t926 - qJD(3) * t937 + t836;
t1012 = t975 * t962;
t978 = -t970 * t980 - t1012 - t925 * pkin(8) + qJDD(3) * pkin(3) + (qJD(3) * t975 * pkin(8) + (pkin(3) * t975 + pkin(2)) * t1010) * qJD(1);
t719 = t974 * t788 + t969 * t978;
t865 = pkin(4) * t913 - pkin(9) * t915;
t685 = -pkin(4) * t1046 + pkin(9) * t1003 - t913 * t865 + t719;
t851 = -qJDD(1) * pkin(2) - t1045 * pkin(7) + t867;
t803 = -t926 * pkin(3) - pkin(8) * t957 + t1010 * t937 + t851;
t694 = t1066 * pkin(9) + (t915 * t959 - t837) * pkin(4) + t803;
t613 = t968 * t685 - t973 * t694;
t574 = pkin(5) * t1052 + pkin(10) * t757 - t613;
t614 = t973 * t685 + t968 * t694;
t840 = pkin(5) * t908 - pkin(10) * t883;
t592 = -pkin(5) * t1047 + pkin(10) * t779 - t840 * t908 + t614;
t518 = -t972 * t574 + t592 * t967;
t519 = t967 * t574 + t972 * t592;
t462 = -t518 * t972 + t519 * t967;
t1043 = t462 * t968;
t1042 = t462 * t973;
t718 = t788 * t969 - t974 * t978;
t684 = -t1003 * pkin(4) - t1046 * pkin(9) + t865 * t915 + t718;
t618 = -t779 * pkin(5) - pkin(10) * t1047 + t840 * t883 + t684;
t1041 = t618 * t967;
t1040 = t618 * t972;
t635 = -t718 * t974 + t719 * t969;
t1039 = t635 * t970;
t1038 = t635 * t975;
t1037 = t684 * t968;
t1036 = t684 * t973;
t715 = t760 + t981;
t1035 = t715 * t967;
t1034 = t715 * t972;
t767 = t828 + t832;
t1033 = t767 * t968;
t1032 = t767 * t973;
t1029 = t803 * t969;
t1028 = t803 * t974;
t1027 = t851 * t970;
t1026 = t851 * t975;
t863 = t869 + t1003;
t1025 = t863 * t969;
t1024 = t863 * t974;
t1023 = t906 * t967;
t1022 = t906 * t972;
t1021 = t908 * t968;
t1020 = t908 * t973;
t945 = t975 * t1045 * t970;
t935 = qJDD(3) + t945;
t1017 = t935 * t970;
t936 = qJDD(3) - t945;
t1016 = t936 * t970;
t1015 = t936 * t975;
t1014 = t959 * t969;
t1013 = t959 * t974;
t960 = t970 ^ 2;
t1011 = t960 + t961;
t1009 = t1045 * t960;
t1002 = t969 * t760;
t1001 = t974 * t760;
t1000 = t969 * t828;
t999 = t974 * t828;
t998 = t964 * t869;
t997 = t965 * t869;
t996 = -pkin(4) * t974 - pkin(3);
t463 = t518 * t967 + t972 * t519;
t636 = t718 * t969 + t974 * t719;
t834 = t970 * t979 + t1012;
t765 = t834 * t970 + t975 * t836;
t885 = -t938 * t971 - t976 * t939;
t988 = t964 * t945;
t987 = t965 * t945;
t932 = qJDD(1) * t976 - t1045 * t971;
t986 = -pkin(6) * t932 - g(3) * t971;
t541 = -t613 * t973 + t614 * t968;
t542 = t613 * t968 + t614 * t973;
t764 = t834 * t975 - t836 * t970;
t884 = t938 * t976 - t939 * t971;
t977 = qJD(3) ^ 2;
t943 = -t957 - t977;
t942 = t957 - t977;
t941 = -t977 - t1009;
t940 = t977 - t1009;
t934 = t957 - t1009;
t933 = t957 + t1009;
t931 = qJDD(1) * t971 + t1045 * t976;
t930 = t1011 * qJDD(1);
t927 = t955 - 0.2e1 * t995;
t924 = 0.2e1 * t994 + t1004;
t921 = t975 * t935;
t920 = t1011 * t1005;
t909 = -pkin(6) * t931 + g(3) * t976;
t898 = -t911 + t1046;
t897 = t910 - t1046;
t896 = -t1005 * t960 + t925 * t975;
t895 = -t1005 * t961 - t926 * t970;
t894 = qJDD(3) * t964 + t920 * t965;
t893 = -qJDD(3) * t965 + t920 * t964;
t892 = -t911 - t1046;
t891 = -t941 * t970 - t1015;
t890 = -t940 * t970 + t921;
t889 = t943 * t975 - t1017;
t888 = t942 * t975 - t1016;
t887 = t941 * t975 - t1016;
t886 = t943 * t970 + t921;
t877 = t930 * t965 - t933 * t964;
t876 = t930 * t964 + t933 * t965;
t870 = -t924 * t970 + t927 * t975;
t866 = -t911 + t910;
t860 = -t1046 - t910;
t859 = t896 * t965 - t988;
t858 = t895 * t965 + t988;
t857 = t896 * t964 + t987;
t856 = t895 * t964 - t987;
t855 = t1004 * t964 + t890 * t965;
t854 = t888 * t965 + t955 * t964;
t853 = -t1004 * t965 + t890 * t964;
t852 = t888 * t964 - t955 * t965;
t848 = t891 * t965 + t924 * t964;
t847 = t889 * t965 - t927 * t964;
t846 = t891 * t964 - t924 * t965;
t845 = t889 * t964 + t927 * t965;
t844 = -t880 + t907;
t843 = -t907 + t1047;
t842 = (-t913 * t974 + t915 * t969) * t959;
t841 = (-t913 * t969 - t915 * t974) * t959;
t839 = -t910 - t911;
t835 = t870 * t965 - t934 * t964;
t833 = t870 * t964 + t934 * t965;
t827 = -t880 + t1047;
t821 = -t880 - t907;
t820 = t897 * t974 - t1025;
t819 = -t898 * t969 + t1064;
t818 = t897 * t969 + t1024;
t817 = t898 * t974 + t1065;
t816 = -t876 * t971 + t877 * t976;
t815 = t876 * t976 + t877 * t971;
t814 = -t892 * t969 - t1024;
t813 = t892 * t974 - t1025;
t812 = -t904 + t983;
t807 = (qJD(4) + t959) * t915 + t990;
t806 = -pkin(7) * t887 + t1026;
t805 = -pkin(7) * t886 + t1027;
t804 = -t907 - t1047;
t798 = -t1014 * t915 - t974 * t983;
t797 = t1013 * t915 - t969 * t983;
t796 = t1013 * t913 - t837 * t969;
t795 = t1014 * t913 + t837 * t974;
t794 = -pkin(2) * t887 + t836;
t793 = -pkin(2) * t886 + t834;
t790 = t860 * t974 - t1065;
t789 = t860 * t969 + t1064;
t787 = -t823 + t905;
t786 = t822 - t905;
t785 = pkin(1) * t962 + qJ(2) * t991;
t784 = t880 + t1047;
t776 = (-t881 * t973 + t883 * t968) * t908;
t775 = (t881 * t968 + t883 * t973) * t908;
t774 = -t846 * t971 + t848 * t976;
t773 = -t845 * t971 + t847 * t976;
t772 = t846 * t976 + t848 * t971;
t771 = t845 * t976 + t847 * t971;
t770 = -t841 * t970 + t842 * t975;
t769 = -t823 - t905;
t762 = t1003 * t964 + t965 * t770;
t761 = -t1003 * t965 + t964 * t770;
t759 = -t823 + t822;
t754 = (-qJD(5) - t908) * t883 - t992;
t752 = -t818 * t970 + t820 * t975;
t751 = -t817 * t970 + t819 * t975;
t750 = -t1021 * t883 + t780 * t973;
t749 = -t1020 * t883 - t780 * t968;
t748 = t1020 * t881 - t779 * t968;
t747 = -t1021 * t881 - t779 * t973;
t746 = -t905 - t822;
t745 = -qJ(2) * t876 + t764 * t965;
t744 = qJ(2) * t877 + t764 * t964;
t743 = -t813 * t970 + t814 * t975;
t742 = t813 * t975 + t814 * t970;
t741 = -t808 * t974 - t812 * t969;
t740 = t1066 * t969 - t807 * t974;
t739 = -t808 * t969 + t812 * t974;
t738 = -t1066 * t974 - t807 * t969;
t737 = -pkin(8) * t813 + t1028;
t736 = t776 * t974 + t832 * t969;
t735 = t776 * t969 - t832 * t974;
t734 = t765 * t965 + t851 * t964;
t733 = t765 * t964 - t851 * t965;
t730 = t843 * t973 - t1033;
t729 = -t844 * t968 + t1062;
t728 = -t843 * t968 - t1032;
t727 = -t844 * t973 - t1063;
t726 = -pkin(8) * t789 + t1029;
t725 = -t797 * t970 + t798 * t975;
t724 = -t795 * t970 + t796 * t975;
t723 = (-t824 * t972 + t826 * t967) * t906;
t722 = (-t824 * t967 - t826 * t972) * t906;
t721 = -t789 * t970 + t790 * t975;
t720 = t789 * t975 + t790 * t970;
t713 = -t821 * t968 - t1032;
t712 = t821 * t973 - t1033;
t711 = -t822 - t823;
t710 = t804 * t973 - t1063;
t709 = t804 * t968 + t1062;
t708 = t725 * t965 + t998;
t707 = t724 * t965 - t998;
t706 = t725 * t964 - t997;
t705 = t724 * t964 + t997;
t704 = -qJ(2) * t846 - t794 * t964 + t806 * t965;
t703 = -qJ(2) * t845 - t793 * t964 + t805 * t965;
t702 = t750 * t974 + t1000;
t701 = t748 * t974 - t1000;
t700 = t750 * t969 - t999;
t699 = t748 * t969 + t999;
t698 = t752 * t965 - t808 * t964;
t697 = t751 * t965 - t812 * t964;
t696 = t752 * t964 + t808 * t965;
t695 = t751 * t964 + t812 * t965;
t693 = pkin(3) * t1066 + pkin(8) * t814 + t1029;
t690 = -t1066 * t964 + t743 * t965;
t689 = t1066 * t965 + t743 * t964;
t688 = -pkin(1) * t887 + qJ(2) * t848 + t794 * t965 + t806 * t964;
t687 = -pkin(1) * t886 + qJ(2) * t847 + t793 * t965 + t805 * t964;
t686 = -pkin(3) * t807 + pkin(8) * t790 - t1028;
t682 = t721 * t965 + t807 * t964;
t681 = t721 * t964 - t807 * t965;
t679 = -qJD(6) * t826 - t993;
t678 = t786 * t972 - t1035;
t677 = -t787 * t967 + t1060;
t676 = t786 * t967 + t1034;
t675 = t787 * t972 + t1061;
t674 = -t753 * t973 - t757 * t968;
t673 = t754 * t973 - t756 * t968;
t672 = -t753 * t968 + t757 * t973;
t671 = -t754 * t968 - t756 * t973;
t670 = -t769 * t967 - t1034;
t669 = t769 * t972 - t1035;
t668 = -t739 * t970 + t741 * t975;
t667 = -t738 * t970 + t740 * t975;
t666 = t739 * t975 + t741 * t970;
t665 = t730 * t974 - t753 * t969;
t664 = t729 * t974 - t757 * t969;
t663 = t730 * t969 + t753 * t974;
t662 = t729 * t969 + t757 * t974;
t661 = -t735 * t970 + t736 * t975;
t660 = -t733 * t971 + t734 * t976;
t659 = t733 * t976 + t734 * t971;
t658 = t713 * t974 + t756 * t969;
t657 = t713 * t969 - t756 * t974;
t656 = t746 * t972 - t1061;
t655 = t746 * t967 + t1060;
t654 = t710 * t974 - t754 * t969;
t653 = t710 * t969 + t754 * t974;
t652 = -t791 + t982;
t647 = (qJD(6) + t906) * t826 + t993;
t646 = -t1023 * t826 - t972 * t982;
t645 = t1022 * t826 - t967 * t982;
t644 = t1022 * t824 - t679 * t967;
t643 = t1023 * t824 + t679 * t972;
t642 = t673 * t974 - t827 * t969;
t641 = t673 * t969 + t827 * t974;
t640 = -t722 * t968 + t723 * t973;
t639 = -t722 * t973 - t723 * t968;
t638 = t667 * t965 - t866 * t964;
t637 = t667 * t964 + t866 * t965;
t634 = t668 * t965 + t839 * t964;
t633 = t668 * t964 - t839 * t965;
t632 = t674 * t974 - t784 * t969;
t631 = t674 * t969 + t784 * t974;
t630 = -qJ(2) * t733 - (pkin(2) * t964 - pkin(7) * t965) * t764;
t629 = -pkin(2) * t742 - pkin(3) * t813 + t719;
t628 = t640 * t974 + t969 * t981;
t627 = t640 * t969 - t974 * t981;
t626 = -t700 * t970 + t702 * t975;
t625 = -t699 * t970 + t701 * t975;
t624 = -pkin(9) * t712 + t1036;
t623 = t661 * t965 - t775 * t964;
t622 = t661 * t964 + t775 * t965;
t621 = -pkin(2) * t720 - pkin(3) * t789 + t718;
t620 = -pkin(9) * t709 + t1037;
t619 = -pkin(3) * t803 + pkin(8) * t636;
t617 = -pkin(2) * t666 - pkin(3) * t739;
t616 = -t689 * t971 + t690 * t976;
t615 = t689 * t976 + t690 * t971;
t612 = qJ(2) * t734 - (-pkin(2) * t965 - pkin(7) * t964 - pkin(1)) * t764;
t611 = -pkin(8) * t739 - t635;
t610 = -t681 * t971 + t682 * t976;
t609 = t681 * t976 + t682 * t971;
t608 = -pkin(7) * t742 - t693 * t970 + t737 * t975;
t607 = -t676 * t968 + t678 * t973;
t606 = -t675 * t968 + t677 * t973;
t605 = -t676 * t973 - t678 * t968;
t604 = -t675 * t973 - t677 * t968;
t603 = -pkin(3) * t839 + pkin(8) * t741 + t636;
t602 = t626 * t965 - t749 * t964;
t601 = t625 * t965 - t747 * t964;
t600 = t626 * t964 + t749 * t965;
t599 = t625 * t964 + t747 * t965;
t598 = -pkin(7) * t720 - t686 * t970 + t726 * t975;
t597 = -t669 * t968 + t670 * t973;
t596 = t669 * t973 + t670 * t968;
t595 = -t663 * t970 + t665 * t975;
t594 = -t662 * t970 + t664 * t975;
t593 = -pkin(4) * t712 + t614;
t591 = -t657 * t970 + t658 * t975;
t590 = t657 * t975 + t658 * t970;
t589 = -pkin(4) * t709 + t613;
t587 = -t655 * t968 + t656 * t973;
t586 = t655 * t973 + t656 * t968;
t585 = -t653 * t970 + t654 * t975;
t584 = t653 * t975 + t654 * t970;
t583 = -t648 * t972 - t652 * t967;
t582 = -t1053 * t967 - t647 * t972;
t581 = -t648 * t967 + t652 * t972;
t580 = t1053 * t972 - t647 * t967;
t579 = -t645 * t968 + t646 * t973;
t578 = -t643 * t968 + t644 * t973;
t577 = -t645 * t973 - t646 * t968;
t576 = -t643 * t973 - t644 * t968;
t575 = -t641 * t970 + t642 * t975;
t571 = t636 * t975 - t1039;
t570 = t636 * t970 + t1038;
t569 = -pkin(10) * t669 + t1040;
t568 = -t633 * t971 + t634 * t976;
t567 = t633 * t976 + t634 * t971;
t566 = -t631 * t970 + t632 * t975;
t565 = t631 * t975 + t632 * t970;
t564 = -pkin(10) * t655 + t1041;
t563 = t595 * t965 - t728 * t964;
t562 = t594 * t965 - t727 * t964;
t561 = t595 * t964 + t728 * t965;
t560 = t594 * t964 + t727 * t965;
t559 = t571 * t965 + t803 * t964;
t558 = t571 * t964 - t803 * t965;
t557 = -t627 * t970 + t628 * t975;
t556 = t579 * t974 + t1002;
t555 = t578 * t974 - t1002;
t554 = t579 * t969 - t1001;
t553 = t578 * t969 + t1001;
t552 = t591 * t965 + t712 * t964;
t551 = t591 * t964 - t712 * t965;
t550 = t585 * t965 + t709 * t964;
t549 = t585 * t964 - t709 * t965;
t548 = t607 * t974 - t648 * t969;
t547 = t606 * t974 - t652 * t969;
t546 = t607 * t969 + t648 * t974;
t545 = t606 * t969 + t652 * t974;
t544 = t1053 * t969 + t597 * t974;
t543 = -t1053 * t974 + t597 * t969;
t540 = t575 * t965 - t671 * t964;
t539 = t575 * t964 + t671 * t965;
t538 = t587 * t974 + t647 * t969;
t537 = t587 * t969 - t647 * t974;
t536 = t566 * t965 + t672 * t964;
t535 = t566 * t964 - t672 * t965;
t534 = -pkin(5) * t1053 + pkin(10) * t670 + t1041;
t533 = -pkin(2) * t570 - pkin(3) * t635;
t532 = -pkin(5) * t647 + pkin(10) * t656 - t1040;
t531 = -qJ(2) * t689 + t608 * t965 - t629 * t964;
t530 = t557 * t965 - t639 * t964;
t529 = t557 * t964 + t639 * t965;
t528 = t542 * t974 + t684 * t969;
t527 = t542 * t969 - t684 * t974;
t526 = -pkin(9) * t672 - t541;
t525 = -qJ(2) * t681 + t598 * t965 - t621 * t964;
t524 = -pkin(1) * t742 + qJ(2) * t690 + t608 * t964 + t629 * t965;
t523 = -t581 * t968 + t583 * t973;
t522 = -t580 * t968 + t582 * t973;
t521 = t581 * t973 + t583 * t968;
t520 = -t580 * t973 - t582 * t968;
t517 = -pkin(7) * t666 - t603 * t970 + t611 * t975;
t515 = -pkin(8) * t657 - t593 * t969 + t624 * t974;
t514 = -pkin(8) * t653 - t589 * t969 + t620 * t974;
t513 = -pkin(1) * t720 + qJ(2) * t682 + t598 * t964 + t621 * t965;
t512 = t522 * t974 - t759 * t969;
t511 = t522 * t969 + t759 * t974;
t510 = -pkin(7) * t570 - pkin(8) * t1038 - t619 * t970;
t509 = -pkin(2) * t590 - pkin(3) * t657 + pkin(4) * t756 - pkin(9) * t713 - t1037;
t508 = t523 * t974 + t711 * t969;
t507 = t523 * t969 - t711 * t974;
t506 = -pkin(2) * t584 - pkin(3) * t653 - pkin(4) * t754 - pkin(9) * t710 + t1036;
t505 = -pkin(3) * t712 + pkin(8) * t658 + t593 * t974 + t624 * t969;
t504 = -t558 * t971 + t559 * t976;
t503 = t558 * t976 + t559 * t971;
t502 = -pkin(3) * t709 + pkin(8) * t654 + t589 * t974 + t620 * t969;
t501 = -t554 * t970 + t556 * t975;
t500 = -t553 * t970 + t555 * t975;
t499 = -t551 * t971 + t552 * t976;
t498 = t551 * t976 + t552 * t971;
t497 = -t549 * t971 + t550 * t976;
t496 = t549 * t976 + t550 * t971;
t495 = -t546 * t970 + t548 * t975;
t494 = -t545 * t970 + t547 * t975;
t493 = -t543 * t970 + t544 * t975;
t492 = t543 * t975 + t544 * t970;
t491 = -pkin(8) * t631 + t1044 * t672 + t526 * t974;
t490 = -t537 * t970 + t538 * t975;
t489 = t537 * t975 + t538 * t970;
t488 = -pkin(4) * t521 - pkin(5) * t581;
t487 = -t535 * t971 + t536 * t976;
t486 = t535 * t976 + t536 * t971;
t485 = pkin(8) * t632 + t969 * t526 + t672 * t996;
t484 = -qJ(2) * t633 + t517 * t965 - t617 * t964;
t483 = -pkin(4) * t596 - pkin(5) * t669 + t519;
t482 = t495 * t965 - t605 * t964;
t481 = t494 * t965 - t604 * t964;
t480 = t495 * t964 + t605 * t965;
t479 = t494 * t964 + t604 * t965;
t478 = t501 * t965 - t577 * t964;
t477 = t500 * t965 - t576 * t964;
t476 = t501 * t964 + t577 * t965;
t475 = t500 * t964 + t576 * t965;
t474 = -t527 * t970 + t528 * t975;
t473 = t527 * t975 + t528 * t970;
t472 = -pkin(4) * t586 - pkin(5) * t655 + t518;
t471 = -pkin(9) * t596 - t534 * t968 + t569 * t973;
t470 = -pkin(2) * t565 - pkin(3) * t631 - pkin(4) * t784 - pkin(9) * t674 - t542;
t469 = t493 * t965 + t596 * t964;
t468 = t493 * t964 - t596 * t965;
t467 = -pkin(1) * t666 + qJ(2) * t634 + t517 * t964 + t617 * t965;
t466 = -pkin(9) * t586 - t532 * t968 + t564 * t973;
t465 = t490 * t965 + t586 * t964;
t464 = t490 * t964 - t586 * t965;
t461 = -t511 * t970 + t512 * t975;
t460 = -pkin(8) * t527 + (-pkin(9) * t974 + t1044) * t541;
t459 = -t507 * t970 + t508 * t975;
t458 = t507 * t975 + t508 * t970;
t457 = -pkin(5) * t618 + pkin(10) * t463;
t456 = t474 * t965 + t541 * t964;
t455 = t474 * t964 - t541 * t965;
t454 = -qJ(2) * t558 + t510 * t965 - t533 * t964;
t453 = -pkin(10) * t581 - t462;
t452 = -pkin(5) * t711 + pkin(10) * t583 + t463;
t451 = -pkin(7) * t590 - t505 * t970 + t515 * t975;
t450 = -pkin(7) * t584 - t502 * t970 + t514 * t975;
t449 = pkin(8) * t528 + (-pkin(9) * t969 + t996) * t541;
t448 = -pkin(1) * t570 + qJ(2) * t559 + t510 * t964 + t533 * t965;
t447 = t461 * t965 - t520 * t964;
t446 = t461 * t964 + t520 * t965;
t445 = t459 * t965 + t521 * t964;
t444 = t459 * t964 - t521 * t965;
t443 = -pkin(2) * t473 - pkin(3) * t527 + pkin(4) * t684 - pkin(9) * t542;
t442 = -pkin(7) * t565 - t485 * t970 + t491 * t975;
t441 = -t468 * t971 + t469 * t976;
t440 = t468 * t976 + t469 * t971;
t439 = -t464 * t971 + t465 * t976;
t438 = t464 * t976 + t465 * t971;
t437 = -pkin(2) * t492 - pkin(3) * t543 + pkin(4) * t1053 - pkin(9) * t597 - t534 * t973 - t569 * t968;
t436 = t463 * t973 - t1043;
t435 = t463 * t968 + t1042;
t434 = -pkin(8) * t543 + t471 * t974 - t483 * t969;
t433 = -pkin(2) * t489 - pkin(3) * t537 + pkin(4) * t647 - pkin(9) * t587 - t532 * t973 - t564 * t968;
t432 = t436 * t974 + t618 * t969;
t431 = t436 * t969 - t618 * t974;
t430 = -pkin(8) * t537 + t466 * t974 - t472 * t969;
t429 = -qJ(2) * t551 + t451 * t965 - t509 * t964;
t428 = -pkin(3) * t596 + pkin(8) * t544 + t471 * t969 + t483 * t974;
t427 = -qJ(2) * t549 + t450 * t965 - t506 * t964;
t426 = -pkin(3) * t586 + pkin(8) * t538 + t466 * t969 + t472 * t974;
t425 = -t455 * t971 + t456 * t976;
t424 = t455 * t976 + t456 * t971;
t423 = -pkin(1) * t590 + qJ(2) * t552 + t451 * t964 + t509 * t965;
t422 = -pkin(1) * t584 + qJ(2) * t550 + t450 * t964 + t506 * t965;
t421 = -pkin(4) * t435 - pkin(5) * t462;
t420 = -qJ(2) * t535 + t442 * t965 - t470 * t964;
t419 = -pkin(9) * t521 - t452 * t968 + t453 * t973;
t418 = -t444 * t971 + t445 * t976;
t417 = t444 * t976 + t445 * t971;
t416 = -pkin(1) * t565 + qJ(2) * t536 + t442 * t964 + t470 * t965;
t415 = -pkin(7) * t473 - t449 * t970 + t460 * t975;
t414 = -pkin(9) * t435 - pkin(10) * t1042 - t457 * t968;
t413 = -t431 * t970 + t432 * t975;
t412 = t431 * t975 + t432 * t970;
t411 = -pkin(8) * t507 + t419 * t974 - t488 * t969;
t410 = -pkin(2) * t458 - pkin(3) * t507 + pkin(4) * t711 - pkin(9) * t523 - t452 * t973 - t453 * t968;
t409 = -pkin(3) * t521 + pkin(8) * t508 + t419 * t969 + t488 * t974;
t408 = -pkin(7) * t492 - t428 * t970 + t434 * t975;
t407 = -pkin(7) * t489 - t426 * t970 + t430 * t975;
t406 = t413 * t965 + t435 * t964;
t405 = t413 * t964 - t435 * t965;
t404 = -qJ(2) * t455 + t415 * t965 - t443 * t964;
t403 = -pkin(1) * t473 + qJ(2) * t456 + t415 * t964 + t443 * t965;
t402 = -qJ(2) * t468 + t408 * t965 - t437 * t964;
t401 = -qJ(2) * t464 + t407 * t965 - t433 * t964;
t400 = -pkin(1) * t492 + qJ(2) * t469 + t408 * t964 + t437 * t965;
t399 = -pkin(1) * t489 + qJ(2) * t465 + t407 * t964 + t433 * t965;
t398 = -pkin(8) * t431 + t414 * t974 - t421 * t969;
t397 = -pkin(7) * t458 - t409 * t970 + t411 * t975;
t396 = -pkin(2) * t412 - pkin(3) * t431 + pkin(4) * t618 - pkin(9) * t436 + pkin(10) * t1043 - t457 * t973;
t395 = -pkin(3) * t435 + pkin(8) * t432 + t414 * t969 + t421 * t974;
t394 = -t405 * t971 + t406 * t976;
t393 = t405 * t976 + t406 * t971;
t392 = -qJ(2) * t444 + t397 * t965 - t410 * t964;
t391 = -pkin(1) * t458 + qJ(2) * t445 + t397 * t964 + t410 * t965;
t390 = -pkin(7) * t412 - t395 * t970 + t398 * t975;
t389 = -qJ(2) * t405 + t390 * t965 - t396 * t964;
t388 = -pkin(1) * t412 + qJ(2) * t406 + t390 * t964 + t396 * t965;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t931, -t932, 0, t885, 0, 0, 0, 0, 0, 0, -t1049, -t872, 0, t732, 0, 0, 0, 0, 0, 0, t773, t774, t816, t660, 0, 0, 0, 0, 0, 0, t610, t616, t568, t504, 0, 0, 0, 0, 0, 0, t497, t499, t487, t425, 0, 0, 0, 0, 0, 0, t439, t441, t418, t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t932, -t931, 0, t884, 0, 0, 0, 0, 0, 0, t872, -t1049, 0, -t1068, 0, 0, 0, 0, 0, 0, t771, t772, t815, t659, 0, 0, 0, 0, 0, 0, t609, t615, t567, t503, 0, 0, 0, 0, 0, 0, t496, t498, t486, t424, 0, 0, 0, 0, 0, 0, t438, t440, t417, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t962, 0, 0, 0, 0, 0, 0, t886, t887, 0, -t764, 0, 0, 0, 0, 0, 0, t720, t742, t666, t570, 0, 0, 0, 0, 0, 0, t584, t590, t565, t473, 0, 0, 0, 0, 0, 0, t489, t492, t458, t412; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t932, 0, -t931, 0, t986, -t909, -t884, -pkin(6) * t884, 0, 0, t872, 0, -t1049, 0, t1067, t1059, t1068, pkin(6) * t1068 + qJ(2) * t1030 - t785 * t971, -t857 * t971 + t859 * t976, -t833 * t971 + t835 * t976, -t853 * t971 + t855 * t976, -t856 * t971 + t858 * t976, -t852 * t971 + t854 * t976, -t893 * t971 + t894 * t976, -pkin(6) * t771 - t687 * t971 + t703 * t976, -pkin(6) * t772 - t688 * t971 + t704 * t976, -pkin(6) * t815 - t744 * t971 + t745 * t976, -pkin(6) * t659 - t612 * t971 + t630 * t976, -t706 * t971 + t708 * t976, -t637 * t971 + t638 * t976, -t695 * t971 + t697 * t976, -t705 * t971 + t707 * t976, -t696 * t971 + t698 * t976, -t761 * t971 + t762 * t976, -pkin(6) * t609 - t513 * t971 + t525 * t976, -pkin(6) * t615 - t524 * t971 + t531 * t976, -pkin(6) * t567 - t467 * t971 + t484 * t976, -pkin(6) * t503 - t448 * t971 + t454 * t976, -t600 * t971 + t602 * t976, -t539 * t971 + t540 * t976, -t560 * t971 + t562 * t976, -t599 * t971 + t601 * t976, -t561 * t971 + t563 * t976, -t622 * t971 + t623 * t976, -pkin(6) * t496 - t422 * t971 + t427 * t976, -pkin(6) * t498 - t423 * t971 + t429 * t976, -pkin(6) * t486 - t416 * t971 + t420 * t976, -pkin(6) * t424 - t403 * t971 + t404 * t976, -t476 * t971 + t478 * t976, -t446 * t971 + t447 * t976, -t479 * t971 + t481 * t976, -t475 * t971 + t477 * t976, -t480 * t971 + t482 * t976, -t529 * t971 + t530 * t976, -pkin(6) * t438 - t399 * t971 + t401 * t976, -pkin(6) * t440 - t400 * t971 + t402 * t976, -pkin(6) * t417 - t391 * t971 + t392 * t976, -pkin(6) * t393 - t388 * t971 + t389 * t976; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t931, 0, t932, 0, t909, t986, t885, pkin(6) * t885, 0, 0, t1049, 0, t872, 0, -t1059, t1067, t732, pkin(6) * t732 + qJ(2) * t1031 + t785 * t976, t857 * t976 + t859 * t971, t833 * t976 + t835 * t971, t853 * t976 + t855 * t971, t856 * t976 + t858 * t971, t852 * t976 + t854 * t971, t893 * t976 + t894 * t971, pkin(6) * t773 + t687 * t976 + t703 * t971, pkin(6) * t774 + t688 * t976 + t704 * t971, pkin(6) * t816 + t744 * t976 + t745 * t971, pkin(6) * t660 + t612 * t976 + t630 * t971, t706 * t976 + t708 * t971, t637 * t976 + t638 * t971, t695 * t976 + t697 * t971, t705 * t976 + t707 * t971, t696 * t976 + t698 * t971, t761 * t976 + t762 * t971, pkin(6) * t610 + t513 * t976 + t525 * t971, pkin(6) * t616 + t524 * t976 + t531 * t971, pkin(6) * t568 + t467 * t976 + t484 * t971, pkin(6) * t504 + t448 * t976 + t454 * t971, t600 * t976 + t602 * t971, t539 * t976 + t540 * t971, t560 * t976 + t562 * t971, t599 * t976 + t601 * t971, t561 * t976 + t563 * t971, t622 * t976 + t623 * t971, pkin(6) * t497 + t422 * t976 + t427 * t971, pkin(6) * t499 + t423 * t976 + t429 * t971, pkin(6) * t487 + t416 * t976 + t420 * t971, pkin(6) * t425 + t403 * t976 + t404 * t971, t476 * t976 + t478 * t971, t446 * t976 + t447 * t971, t479 * t976 + t481 * t971, t475 * t976 + t477 * t971, t480 * t976 + t482 * t971, t529 * t976 + t530 * t971, pkin(6) * t439 + t399 * t976 + t401 * t971, pkin(6) * t441 + t400 * t976 + t402 * t971, pkin(6) * t418 + t391 * t976 + t392 * t971, pkin(6) * t394 + t388 * t976 + t389 * t971; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t938, t939, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t929 - t867, -pkin(1) * t928 - t868, 0, -pkin(1) * t801, (t925 + t994) * t970, t924 * t975 + t927 * t970, t940 * t975 + t1017, (t926 - t995) * t975, t942 * t970 + t1015, 0, pkin(1) * t845 + pkin(2) * t927 + pkin(7) * t889 - t1026, pkin(1) * t846 - pkin(2) * t924 + pkin(7) * t891 + t1027, pkin(1) * t876 + pkin(2) * t933 + pkin(7) * t930 + t765, pkin(1) * t733 - pkin(2) * t851 + pkin(7) * t765, t797 * t975 + t798 * t970, t738 * t975 + t740 * t970, t817 * t975 + t819 * t970, t795 * t975 + t796 * t970, t818 * t975 + t820 * t970, t841 * t975 + t842 * t970, pkin(1) * t681 - pkin(2) * t807 + pkin(7) * t721 + t686 * t975 + t726 * t970, pkin(1) * t689 + pkin(2) * t1066 + pkin(7) * t743 + t693 * t975 + t737 * t970, pkin(1) * t633 - pkin(2) * t839 + pkin(7) * t668 + t603 * t975 + t611 * t970, pkin(1) * t558 - pkin(2) * t803 + pkin(7) * t571 - pkin(8) * t1039 + t619 * t975, t700 * t975 + t702 * t970, t641 * t975 + t642 * t970, t662 * t975 + t664 * t970, t699 * t975 + t701 * t970, t663 * t975 + t665 * t970, t735 * t975 + t736 * t970, pkin(1) * t549 - pkin(2) * t709 + pkin(7) * t585 + t502 * t975 + t514 * t970, pkin(1) * t551 - pkin(2) * t712 + pkin(7) * t591 + t505 * t975 + t515 * t970, pkin(1) * t535 - pkin(2) * t672 + pkin(7) * t566 + t485 * t975 + t491 * t970, pkin(1) * t455 - pkin(2) * t541 + pkin(7) * t474 + t449 * t975 + t460 * t970, t554 * t975 + t556 * t970, t511 * t975 + t512 * t970, t545 * t975 + t547 * t970, t553 * t975 + t555 * t970, t546 * t975 + t548 * t970, t627 * t975 + t628 * t970, pkin(1) * t464 - pkin(2) * t586 + pkin(7) * t490 + t426 * t975 + t430 * t970, pkin(1) * t468 - pkin(2) * t596 + pkin(7) * t493 + t428 * t975 + t434 * t970, pkin(1) * t444 - pkin(2) * t521 + pkin(7) * t459 + t409 * t975 + t411 * t970, pkin(1) * t405 - pkin(2) * t435 + pkin(7) * t413 + t395 * t975 + t398 * t970;];
tauB_reg  = t1;
