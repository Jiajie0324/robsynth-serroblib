% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:58:30
% EndTime: 2019-03-09 06:58:42
% DurationCPUTime: 4.42s
% Computational Cost: add. (7284->333), mult. (15366->552), div. (0->0), fcn. (14600->10), ass. (0->189)
t150 = sin(qJ(4));
t151 = sin(qJ(3));
t193 = sin(pkin(11)) * pkin(1) + pkin(7);
t183 = pkin(8) + t193;
t263 = cos(qJ(4));
t171 = t183 * t263;
t153 = cos(qJ(3));
t176 = t153 * t183;
t88 = t150 * t176 + t151 * t171;
t167 = qJD(3) * t171;
t177 = t150 * t183;
t170 = qJD(3) * t177;
t158 = t88 * qJD(4) + t151 * t167 + t153 * t170;
t219 = t263 * t153;
t234 = t150 * t151;
t123 = -t219 + t234;
t125 = t150 * t153 + t263 * t151;
t139 = -cos(pkin(11)) * pkin(1) - pkin(2);
t129 = -t153 * pkin(3) + t139;
t164 = t123 * pkin(4) - t125 * pkin(9) + t129;
t276 = -qJD(5) * t164 + t158;
t161 = -t151 * t177 + t263 * t176;
t229 = t151 * qJD(3);
t222 = pkin(3) * t229;
t269 = qJD(3) + qJD(4);
t98 = t269 * t125;
t265 = t98 * pkin(4);
t209 = qJD(4) * t263;
t97 = -qJD(3) * t219 - t153 * t209 + t269 * t234;
t275 = -t97 * pkin(9) + qJD(5) * t161 - t222 - t265;
t149 = sin(qJ(5));
t147 = t149 ^ 2;
t152 = cos(qJ(5));
t148 = t152 ^ 2;
t270 = (t147 - t148) * qJD(5);
t274 = t147 + t148;
t262 = cos(qJ(6));
t205 = t262 * qJD(6);
t273 = t262 * qJD(5) + t205;
t145 = qJD(5) * t152;
t244 = t149 * t97;
t272 = t125 * t145 - t244;
t230 = qJD(5) * t149;
t214 = t125 * t230;
t242 = t152 * t97;
t64 = t214 + t242;
t261 = sin(qJ(6));
t216 = t261 * t149;
t217 = t262 * t152;
t122 = t216 - t217;
t45 = -t149 * t161 + t152 * t164;
t46 = t149 * t164 + t152 * t161;
t271 = -t149 * t45 + t152 * t46;
t268 = qJD(5) + qJD(6);
t76 = t123 * t98;
t72 = 0.2e1 * t76;
t267 = 0.2e1 * qJD(3);
t266 = -pkin(10) - pkin(9);
t264 = t98 * pkin(5);
t260 = pkin(3) * t150;
t259 = t152 * pkin(5);
t195 = t125 * t216;
t218 = t262 * t149;
t25 = -t97 * t218 + (t273 * t125 - t261 * t97) * t152 - t268 * t195;
t124 = t261 * t152 + t218;
t84 = t124 * t125;
t258 = t84 * t25;
t96 = t268 * t124;
t24 = -t122 * t97 + t96 * t125;
t85 = t125 * t217 - t195;
t257 = t85 * t24;
t47 = t161 * qJD(4) - t151 * t170 + t153 * t167;
t256 = t88 * t47;
t142 = pkin(9) + t260;
t255 = -pkin(10) - t142;
t253 = t24 * t122 - t85 * t96;
t28 = t272 * pkin(5) + t47;
t236 = t125 * t149;
t62 = pkin(5) * t236 + t88;
t252 = t28 * t122 + t62 * t96;
t208 = qJD(6) * t261;
t95 = (t261 * qJD(5) + t208) * t149 - t273 * t152;
t251 = t28 * t124 - t62 * t95;
t250 = t88 * t145 + t47 * t149;
t235 = t125 * t152;
t249 = -t123 * t242 + t98 * t235;
t190 = t123 * t97 - t125 * t98;
t248 = pkin(3) * qJD(4);
t247 = t125 * t97;
t246 = t147 * t97;
t93 = t148 * t97;
t221 = t150 * t248;
t223 = pkin(5) * t230;
t126 = t221 + t223;
t226 = t263 * pkin(3);
t143 = -t226 - pkin(4);
t130 = t143 - t259;
t241 = t126 * t122 + t130 * t96;
t240 = t126 * t124 - t130 * t95;
t144 = -pkin(4) - t259;
t239 = t122 * t223 + t144 * t96;
t238 = t124 * t223 - t144 * t95;
t237 = t123 * t150;
t233 = t143 * t145 + t149 * t221;
t228 = t153 * qJD(3);
t227 = t139 * t267;
t225 = pkin(4) * t230;
t224 = pkin(4) * t145;
t220 = t149 * t242;
t79 = t88 * t230;
t215 = t123 * t230;
t212 = t149 * t145;
t211 = t151 * t228;
t157 = t123 * pkin(5) - pkin(10) * t235 + t45;
t156 = t262 * t157;
t33 = -pkin(10) * t236 + t46;
t17 = -t261 * t33 + t156;
t155 = t261 * t157;
t18 = t262 * t33 + t155;
t14 = t276 * t149 - t275 * t152;
t154 = t64 * pkin(10) + t14 + t264;
t13 = t275 * t149 + t276 * t152;
t159 = -t272 * pkin(10) - t13;
t3 = -qJD(6) * t156 - t261 * t154 - t262 * t159 + t33 * t208;
t4 = -qJD(6) * t155 + t262 * t154 - t261 * t159 - t33 * t205;
t210 = t3 * t122 - t4 * t124 + t17 * t95 - t18 * t96;
t207 = t255 * t149;
t204 = qJD(5) * t255;
t203 = t274 * t97;
t146 = t152 * pkin(10);
t118 = t142 * t152 + t146;
t200 = pkin(3) * t209;
t186 = t152 * t200;
t165 = t149 * t204 + t186;
t187 = t149 * t200;
t166 = t152 * t204 - t187;
t181 = t262 * t207;
t34 = -qJD(6) * t181 + t118 * t208 - t262 * t165 - t261 * t166;
t180 = t261 * t207;
t35 = -qJD(6) * t180 - t118 * t205 - t261 * t165 + t262 * t166;
t91 = -t261 * t118 + t181;
t92 = t262 * t118 + t180;
t202 = t34 * t122 - t35 * t124 + t91 * t95 - t92 * t96;
t131 = t152 * pkin(9) + t146;
t197 = t266 * t262;
t185 = t149 * t197;
t101 = -t261 * t131 + t185;
t196 = t266 * t261;
t184 = t149 * t196;
t102 = t262 * t131 + t184;
t58 = t131 * t208 - t196 * t145 - t268 * t185;
t59 = -t102 * qJD(6) + (t152 * t197 - t184) * qJD(5);
t201 = t101 * t95 - t102 * t96 + t58 * t122 - t59 * t124;
t199 = pkin(5) * t205;
t198 = pkin(5) * t208;
t120 = t125 ^ 2;
t194 = t120 * t212;
t192 = t47 * t123 + t88 * t98;
t191 = -t124 * t25 + t84 * t95;
t40 = t122 * t98 + t123 * t96;
t189 = t149 * t46 + t152 * t45;
t182 = t123 * t142 - t125 * t143;
t179 = t143 * t230 - t152 * t221;
t178 = t193 * qJD(3);
t63 = -t152 * t98 + t215;
t175 = t274 * t263;
t169 = (-t263 * t123 + t125 * t150) * qJD(4);
t5 = -t189 * qJD(5) - t13 * t152 - t14 * t149;
t162 = pkin(3) * t169 - t142 * t98 - t143 * t97;
t134 = -0.2e1 * t212;
t133 = 0.2e1 * t212;
t121 = -0.2e1 * t270;
t115 = t175 * t248;
t73 = -0.2e1 * t124 * t95;
t71 = 0.2e1 * t122 * t96;
t68 = t125 * t93;
t67 = t125 * t246;
t65 = t123 * t145 + t149 * t98;
t55 = -t93 - t246;
t51 = t125 * t270 + t220;
t38 = -t123 * t95 + t124 * t98;
t37 = -0.4e1 * t125 * t212 + t246 - t93;
t36 = 0.2e1 * t122 * t95 - 0.2e1 * t124 * t96;
t32 = (t262 * t95 - t261 * t96 + (-t262 * t122 + t261 * t124) * qJD(6)) * pkin(5);
t16 = t122 * t25 + t84 * t96;
t15 = -t124 * t24 - t85 * t95;
t7 = t191 + t253;
t6 = -t191 + t253;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t211 (-t151 ^ 2 + t153 ^ 2) * t267, 0, -0.2e1 * t211, 0, 0, t151 * t227, t153 * t227, 0, 0, -0.2e1 * t247, 0.2e1 * t190, 0, t72, 0, 0, 0.2e1 * t123 * t222 + 0.2e1 * t129 * t98, 0.2e1 * t125 * t222 - 0.2e1 * t129 * t97, 0.2e1 * t158 * t123 + 0.2e1 * t47 * t125 - 0.2e1 * t161 * t98 - 0.2e1 * t88 * t97, 0.2e1 * t129 * t222 - 0.2e1 * t161 * t158 + 0.2e1 * t256, -0.2e1 * t68 - 0.2e1 * t194, 0.2e1 * t120 * t270 + 0.4e1 * t125 * t220, -0.2e1 * t123 * t214 + 0.2e1 * t249, -0.2e1 * t67 + 0.2e1 * t194, -0.2e1 * t123 * t272 - 0.2e1 * t98 * t236, t72, 0.2e1 * t123 * t14 + 0.2e1 * t250 * t125 - 0.2e1 * t88 * t244 + 0.2e1 * t45 * t98, -0.2e1 * t88 * t242 + 0.2e1 * t123 * t13 - 0.2e1 * t46 * t98 + 0.2e1 * (t47 * t152 - t79) * t125, 0.2e1 * t189 * t97 + 0.2e1 * (-qJD(5) * t271 + t13 * t149 - t14 * t152) * t125, -0.2e1 * t13 * t46 + 0.2e1 * t14 * t45 + 0.2e1 * t256, -0.2e1 * t257, 0.2e1 * t84 * t24 - 0.2e1 * t85 * t25, -0.2e1 * t24 * t123 + 0.2e1 * t85 * t98, 0.2e1 * t258, -0.2e1 * t123 * t25 - 0.2e1 * t98 * t84, t72, 0.2e1 * t123 * t4 + 0.2e1 * t17 * t98 + 0.2e1 * t25 * t62 + 0.2e1 * t28 * t84, 0.2e1 * t123 * t3 - 0.2e1 * t18 * t98 - 0.2e1 * t24 * t62 + 0.2e1 * t28 * t85, 0.2e1 * t17 * t24 - 0.2e1 * t18 * t25 + 0.2e1 * t3 * t84 - 0.2e1 * t4 * t85, 0.2e1 * t17 * t4 - 0.2e1 * t18 * t3 + 0.2e1 * t28 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158 * t125 - t161 * t97 + t192, 0, 0, 0, 0, 0, 0, 0, t152 * t190 + t249, 0, t125 * t5 - t271 * t97 + t192, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123 * t28 - t17 * t25 - t18 * t24 - t3 * t85 - t4 * t84 + t62 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t247 + 0.2e1 * t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t68 - 0.2e1 * t67 + 0.2e1 * t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t257 + 0.2e1 * t76 + 0.2e1 * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t228, 0, -t229, 0, -t153 * t178, t151 * t178, 0, 0, 0, 0, -t97, 0, -t98, 0, -t47, t158 (-t150 * t98 + t263 * t97 + t169) * pkin(3), -t158 * t260 + t161 * t200 + t88 * t221 - t47 * t226, -t51, t37, t65, t51, -t63, 0, t79 + (-t182 * qJD(5) - t47) * t152 + t162 * t149, t152 * t162 + t182 * t230 + t250, t5, t47 * t143 + (t88 * t150 + t271 * t263) * t248 + t5 * t142, t15, t7, t38, t16, -t40, 0, t123 * t35 + t126 * t84 + t130 * t25 + t91 * t98 + t252, t123 * t34 + t126 * t85 - t130 * t24 - t92 * t98 + t251, t24 * t91 - t25 * t92 + t34 * t84 - t35 * t85 + t210, t126 * t62 + t130 * t28 + t17 * t35 - t18 * t34 - t3 * t92 + t4 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t229, -t228, 0, 0, 0, 0, 0, 0, 0, 0, -t98, t97, 0 (-t263 * t98 - t150 * t97 + (t263 * t125 + t237) * qJD(4)) * pkin(3), 0, 0, 0, 0, 0, 0, t63, t65, t55, t98 * t143 - t142 * t203 + (t125 * t175 + t237) * t248, 0, 0, 0, 0, 0, 0, t40, t38, t6, t123 * t126 + t130 * t98 - t24 * t92 - t25 * t91 - t34 * t85 - t35 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t221, -0.2e1 * t200, 0, 0, t133, t121, 0, t134, 0, 0, 0.2e1 * t179, 0.2e1 * t233, 0.2e1 * t115, 0.2e1 * (t142 * t175 + t143 * t150) * t248, t73, t36, 0, t71, 0, 0, 0.2e1 * t241, 0.2e1 * t240, 0.2e1 * t202, 0.2e1 * t126 * t130 - 0.2e1 * t34 * t92 + 0.2e1 * t35 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, 0, -t98, 0, -t47, t158, 0, 0, -t51, t37, t65, t51, -t63, 0, t79 + (pkin(4) * t97 - pkin(9) * t98) * t149 + (-t47 + (-pkin(4) * t125 - pkin(9) * t123) * qJD(5)) * t152, pkin(4) * t64 + pkin(9) * t63 + t250, t5, -pkin(4) * t47 + pkin(9) * t5, t15, t7, t38, t16, -t40, 0, t101 * t98 + t123 * t59 + t144 * t25 + t223 * t84 + t252, -t102 * t98 + t123 * t58 - t144 * t24 + t223 * t85 + t251, t101 * t24 - t102 * t25 + t58 * t84 - t59 * t85 + t210, t101 * t4 - t102 * t3 + t144 * t28 + t17 * t59 - t18 * t58 + t223 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t98, t97, 0, 0, 0, 0, 0, 0, 0, 0, t63, t65, t55, -pkin(9) * t203 - t265, 0, 0, 0, 0, 0, 0, t40, t38, t6, pkin(5) * t215 - t101 * t25 - t102 * t24 + t144 * t98 - t58 * t85 - t59 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t221, -t200, 0, 0, t133, t121, 0, t134, 0, 0, t179 - t225, -t224 + t233, t115 (-pkin(4) * t150 + pkin(9) * t175) * t248, t73, t36, 0, t71, 0, 0, t239 + t241, t238 + t240, t201 + t202, t101 * t35 - t102 * t34 + t126 * t144 + t130 * t223 - t58 * t92 + t59 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, t121, 0, t134, 0, 0, -0.2e1 * t225, -0.2e1 * t224, 0, 0, t73, t36, 0, t71, 0, 0, 0.2e1 * t239, 0.2e1 * t238, 0.2e1 * t201, 0.2e1 * t101 * t59 - 0.2e1 * t102 * t58 + 0.2e1 * t144 * t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, 0, -t272, t98, t14, t13, 0, 0, 0, 0, -t24, 0, -t25, t98, -t123 * t198 + t262 * t264 + t4 (-t123 * t205 - t261 * t98) * pkin(5) + t3 (t262 * t24 - t261 * t25 + (t261 * t85 - t262 * t84) * qJD(6)) * pkin(5) (t262 * t4 - t261 * t3 + (-t17 * t261 + t18 * t262) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t64, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t24, 0 (-t262 * t25 - t261 * t24 + (t261 * t84 + t262 * t85) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, 0, -t230, 0, -t142 * t145 - t187, t142 * t230 - t186, 0, 0, 0, 0, -t95, 0, -t96, 0, t35, t34, t32 (t262 * t35 - t261 * t34 + (-t261 * t91 + t262 * t92) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, 0, -t230, 0, -pkin(9) * t145, pkin(9) * t230, 0, 0, 0, 0, -t95, 0, -t96, 0, t59, t58, t32 (t262 * t59 - t261 * t58 + (-t101 * t261 + t102 * t262) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t198, -0.2e1 * t199, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, 0, -t25, t98, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t24, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, 0, -t96, 0, t35, t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, 0, -t96, 0, t59, t58, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, -t199, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
