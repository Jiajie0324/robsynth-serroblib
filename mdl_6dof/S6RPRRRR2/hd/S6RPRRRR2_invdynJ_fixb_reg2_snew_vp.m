% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 02:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRRR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:45:30
% EndTime: 2019-05-06 02:45:48
% DurationCPUTime: 7.38s
% Computational Cost: add. (45868->516), mult. (90105->738), div. (0->0), fcn. (64053->12), ass. (0->315)
t289 = sin(qJ(6));
t292 = sin(qJ(3));
t295 = cos(qJ(4));
t291 = sin(qJ(4));
t296 = cos(qJ(3));
t346 = t291 * t296;
t256 = (t292 * t295 + t346) * qJD(1);
t282 = qJD(3) + qJD(4);
t290 = sin(qJ(5));
t294 = cos(qJ(5));
t237 = t256 * t290 - t294 * t282;
t239 = t256 * t294 + t282 * t290;
t293 = cos(qJ(6));
t209 = t293 * t237 + t239 * t289;
t211 = -t237 * t289 + t239 * t293;
t175 = t211 * t209;
t337 = qJD(1) * qJD(3);
t324 = t296 * t337;
t336 = t292 * qJDD(1);
t261 = t324 + t336;
t279 = t296 * qJDD(1);
t325 = t292 * t337;
t262 = t279 - t325;
t314 = t291 * t261 - t295 * t262;
t219 = -qJD(4) * t256 - t314;
t216 = qJDD(5) - t219;
t215 = qJDD(6) + t216;
t381 = -t175 + t215;
t387 = t289 * t381;
t213 = t239 * t237;
t379 = -t213 + t216;
t386 = t290 * t379;
t341 = qJD(1) * t292;
t254 = -t295 * t296 * qJD(1) + t291 * t341;
t233 = t256 * t254;
t335 = qJDD(3) + qJDD(4);
t378 = -t233 + t335;
t385 = t291 * t378;
t384 = t293 * t381;
t383 = t294 * t379;
t382 = t295 * t378;
t286 = sin(pkin(11));
t371 = sin(qJ(1));
t372 = cos(qJ(1));
t305 = g(1) * t371 - g(2) * t372;
t301 = qJDD(1) * pkin(1) + t305;
t306 = g(1) * t372 + g(2) * t371;
t375 = qJD(1) ^ 2;
t259 = -pkin(1) * t375 - t306;
t287 = cos(pkin(11));
t347 = t287 * t259;
t300 = qJDD(1) * pkin(7) + t286 * t301 + t347;
t299 = -pkin(2) * t375 + t300;
t298 = t292 * t299;
t369 = t261 * pkin(8);
t312 = qJDD(3) * pkin(3) - t369;
t342 = -g(3) + qJDD(2);
t268 = qJD(3) * pkin(3) - pkin(8) * t341;
t284 = t296 ^ 2;
t323 = t292 * t342;
t191 = t296 * t300 + t323 + t262 * pkin(8) - qJD(3) * t268 + (-pkin(2) * t296 - pkin(3) * t284) * t375;
t344 = t295 * t191;
t368 = pkin(8) * qJD(3);
t150 = t344 + t291 * (-t298 + t312) + ((pkin(3) * t341 + t368) * qJD(1) + t342) * t346;
t231 = pkin(4) * t254 - pkin(9) * t256;
t376 = t282 ^ 2;
t133 = -pkin(4) * t376 + pkin(9) * t335 - t254 * t231 + t150;
t253 = t287 * t301;
t315 = -t286 * t259 + t253;
t226 = -qJDD(1) * pkin(2) - t375 * pkin(7) - t315;
t281 = t284 * t375;
t196 = -t262 * pkin(3) - pkin(8) * t281 + t268 * t341 + t226;
t220 = -qJD(4) * t254 + t261 * t295 + t262 * t291;
t246 = t282 * t254;
t202 = t220 - t246;
t136 = -t202 * pkin(9) + (t256 * t282 - t219) * pkin(4) + t196;
t84 = t133 * t290 - t294 * t136;
t85 = t294 * t133 + t290 * t136;
t48 = t290 * t84 + t294 * t85;
t303 = -t294 * t220 - t290 * t335;
t185 = -t237 * qJD(5) - t303;
t316 = t220 * t290 - t294 * t335;
t307 = qJD(5) * t239 + t316;
t127 = -t209 * qJD(6) + t293 * t185 - t289 * t307;
t250 = qJD(5) + t254;
t248 = qJD(6) + t250;
t194 = t248 * t209;
t380 = -t194 + t127;
t225 = t250 * t237;
t172 = t225 + t185;
t318 = t185 * t289 + t293 * t307;
t103 = (qJD(6) - t248) * t211 + t318;
t168 = (qJD(5) - t250) * t239 + t316;
t207 = t209 ^ 2;
t208 = t211 ^ 2;
t377 = t237 ^ 2;
t236 = t239 ^ 2;
t247 = t248 ^ 2;
t249 = t250 ^ 2;
t251 = t254 ^ 2;
t252 = t256 ^ 2;
t58 = pkin(5) * t379 - t172 * pkin(10) - t84;
t222 = pkin(5) * t250 - pkin(10) * t239;
t73 = -pkin(5) * t377 - pkin(10) * t307 - t250 * t222 + t85;
t30 = t289 * t73 - t293 * t58;
t31 = t289 * t58 + t293 * t73;
t17 = t289 * t31 - t293 * t30;
t374 = pkin(5) * t17;
t106 = t194 + t127;
t64 = -t103 * t289 - t106 * t293;
t373 = pkin(5) * t64;
t370 = pkin(4) * t291;
t367 = t17 * t290;
t366 = t17 * t294;
t322 = t296 * t342;
t149 = t191 * t291 - t295 * (-t292 * t300 + t322 + (t296 * t368 + (t296 * pkin(3) + pkin(2)) * t341) * qJD(1) + t312);
t132 = -t335 * pkin(4) - t376 * pkin(9) + t231 * t256 + t149;
t87 = pkin(5) * t307 - pkin(10) * t377 + t222 * t239 + t132;
t365 = t289 * t87;
t92 = -t149 * t295 + t150 * t291;
t364 = t292 * t92;
t363 = t293 * t87;
t362 = -pkin(4) * t132 + pkin(9) * t48;
t146 = t175 + t215;
t361 = t146 * t289;
t360 = t146 * t293;
t178 = t213 + t216;
t359 = t178 * t290;
t358 = t178 * t294;
t357 = t196 * t291;
t356 = t196 * t295;
t229 = t233 + t335;
t355 = t229 * t291;
t354 = t229 * t295;
t353 = t248 * t289;
t352 = t248 * t293;
t351 = t250 * t290;
t350 = t250 * t294;
t349 = t282 * t291;
t348 = t282 * t295;
t128 = t290 * t132;
t272 = t296 * t375 * t292;
t266 = qJDD(3) + t272;
t345 = t292 * t266;
t129 = t294 * t132;
t267 = qJDD(3) - t272;
t343 = t296 * t267;
t339 = qJD(5) + t250;
t334 = t291 * t175;
t333 = t295 * t175;
t332 = t291 * t213;
t331 = t295 * t213;
t206 = -t236 - t249;
t144 = -t206 * t290 - t358;
t173 = t237 * t339 + t303;
t330 = pkin(4) * t173 + pkin(9) * t144 + t128;
t197 = -t249 - t377;
t140 = t197 * t294 - t386;
t169 = -t239 * t339 - t316;
t329 = pkin(4) * t169 + pkin(9) * t140 - t129;
t328 = -pkin(1) * t287 - pkin(2);
t327 = pkin(1) * t286 + pkin(7);
t326 = -pkin(4) * t295 - pkin(3);
t18 = t289 * t30 + t293 * t31;
t141 = -t207 - t208;
t66 = -t103 * t293 + t106 * t289;
t11 = -pkin(5) * t141 + pkin(10) * t66 + t18;
t13 = -pkin(10) * t64 - t17;
t36 = -t290 * t64 + t294 * t66;
t321 = -pkin(4) * t141 + pkin(9) * t36 + t294 * t11 + t290 * t13;
t102 = (qJD(6) + t248) * t211 + t318;
t161 = -t247 - t207;
t111 = t161 * t293 - t387;
t41 = -pkin(5) * t102 + pkin(10) * t111 - t363;
t110 = t161 * t289 + t384;
t52 = -pkin(10) * t110 + t365;
t70 = -t110 * t290 + t111 * t294;
t320 = -pkin(4) * t102 + pkin(9) * t70 + t290 * t52 + t294 * t41;
t180 = -t208 - t247;
t116 = -t180 * t289 - t360;
t43 = -pkin(5) * t380 + pkin(10) * t116 + t365;
t115 = t180 * t293 - t361;
t55 = -pkin(10) * t115 + t363;
t77 = -t115 * t290 + t116 * t294;
t319 = -pkin(4) * t380 + pkin(9) * t77 + t290 * t55 + t294 * t43;
t93 = t149 * t291 + t295 * t150;
t217 = t298 - t322;
t218 = t296 * t299 + t323;
t176 = t292 * t217 + t296 * t218;
t121 = -t168 * t294 + t172 * t290;
t188 = t236 + t377;
t313 = pkin(4) * t188 + pkin(9) * t121 + t48;
t311 = t290 * t85 - t294 * t84;
t309 = pkin(5) * t110 - t30;
t15 = -pkin(5) * t87 + pkin(10) * t18;
t9 = t18 * t294 - t367;
t308 = -pkin(4) * t87 + pkin(9) * t9 - pkin(10) * t367 + t294 * t15;
t304 = pkin(5) * t115 - t31;
t302 = (-qJD(4) + t282) * t256 - t314;
t297 = qJD(3) ^ 2;
t283 = t292 ^ 2;
t280 = t283 * t375;
t270 = -t281 - t297;
t269 = -t280 - t297;
t265 = t280 + t281;
t264 = (t283 + t284) * qJDD(1);
t263 = t279 - 0.2e1 * t325;
t260 = 0.2e1 * t324 + t336;
t244 = -t252 + t376;
t243 = t251 - t376;
t242 = -t252 - t376;
t241 = -t269 * t292 - t343;
t240 = t270 * t296 - t345;
t232 = t252 - t251;
t227 = -t376 - t251;
t224 = -t236 + t249;
t223 = -t249 + t377;
t221 = -t251 - t252;
t212 = t236 - t377;
t205 = -t242 * t291 - t354;
t204 = t242 * t295 - t355;
t203 = t220 + t246;
t198 = (qJD(4) + t282) * t256 + t314;
t193 = t227 * t295 - t385;
t192 = t227 * t291 + t382;
t190 = -t208 + t247;
t189 = t207 - t247;
t182 = (-t237 * t294 + t239 * t290) * t250;
t181 = (-t237 * t290 - t239 * t294) * t250;
t174 = t208 - t207;
t171 = -t225 + t185;
t165 = t185 * t294 - t239 * t351;
t164 = t185 * t290 + t239 * t350;
t163 = t237 * t350 + t290 * t307;
t162 = t237 * t351 - t294 * t307;
t160 = -t204 * t292 + t205 * t296;
t159 = t203 * t291 + t295 * t302;
t158 = -t203 * t295 + t291 * t302;
t157 = t223 * t294 - t359;
t156 = -t224 * t290 + t383;
t155 = t223 * t290 + t358;
t154 = t224 * t294 + t386;
t153 = (-t209 * t293 + t211 * t289) * t248;
t152 = (-t209 * t289 - t211 * t293) * t248;
t151 = -t192 * t292 + t193 * t296;
t143 = t206 * t294 - t359;
t139 = t197 * t290 + t383;
t126 = -qJD(6) * t211 - t318;
t125 = t189 * t293 - t361;
t124 = -t190 * t289 + t384;
t123 = t189 * t289 + t360;
t122 = t190 * t293 + t387;
t120 = t169 * t294 - t171 * t290;
t119 = -t168 * t290 - t172 * t294;
t118 = t169 * t290 + t171 * t294;
t114 = -t158 * t292 + t159 * t296;
t113 = t144 * t295 - t173 * t291;
t112 = t144 * t291 + t173 * t295;
t109 = t140 * t295 - t169 * t291;
t108 = t140 * t291 + t169 * t295;
t99 = t127 * t293 - t211 * t353;
t98 = t127 * t289 + t211 * t352;
t97 = -t126 * t289 + t209 * t352;
t96 = t126 * t293 + t209 * t353;
t95 = -t152 * t290 + t153 * t294;
t94 = t152 * t294 + t153 * t290;
t91 = t121 * t295 - t188 * t291;
t90 = t121 * t291 + t188 * t295;
t89 = -pkin(9) * t143 + t129;
t88 = -pkin(9) * t139 + t128;
t81 = -t123 * t290 + t125 * t294;
t80 = -t122 * t290 + t124 * t294;
t79 = t123 * t294 + t125 * t290;
t78 = t122 * t294 + t124 * t290;
t76 = t115 * t294 + t116 * t290;
t74 = -pkin(4) * t143 + t85;
t72 = -t112 * t292 + t113 * t296;
t71 = -pkin(4) * t139 + t84;
t69 = t110 * t294 + t111 * t290;
t67 = -t108 * t292 + t109 * t296;
t65 = -t102 * t293 - t289 * t380;
t63 = -t102 * t289 + t293 * t380;
t62 = -t290 * t98 + t294 * t99;
t61 = -t290 * t96 + t294 * t97;
t60 = t290 * t99 + t294 * t98;
t59 = t290 * t97 + t294 * t96;
t56 = t296 * t93 - t364;
t50 = t291 * t380 + t295 * t77;
t49 = t291 * t77 - t295 * t380;
t45 = t102 * t291 + t295 * t70;
t44 = -t102 * t295 + t291 * t70;
t39 = t132 * t291 + t295 * t48;
t38 = -t132 * t295 + t291 * t48;
t37 = -pkin(9) * t119 - t311;
t35 = -t290 * t63 + t294 * t65;
t34 = t290 * t66 + t294 * t64;
t33 = t290 * t65 + t294 * t63;
t28 = t141 * t291 + t295 * t36;
t27 = -t141 * t295 + t291 * t36;
t26 = -t292 * t49 + t296 * t50;
t25 = -t292 * t44 + t296 * t45;
t24 = -pkin(4) * t34 - t373;
t23 = -pkin(4) * t76 - t304;
t21 = -pkin(4) * t69 - t309;
t20 = -pkin(9) * t76 - t290 * t43 + t294 * t55;
t19 = -pkin(9) * t69 - t290 * t41 + t294 * t52;
t16 = -t27 * t292 + t28 * t296;
t8 = t18 * t290 + t366;
t6 = t291 * t87 + t295 * t9;
t5 = t291 * t9 - t295 * t87;
t4 = -pkin(4) * t8 - t374;
t3 = -pkin(9) * t34 - t11 * t290 + t13 * t294;
t2 = -pkin(9) * t8 - pkin(10) * t366 - t15 * t290;
t1 = -t292 * t5 + t296 * t6;
t7 = [0, 0, 0, 0, 0, qJDD(1), t305, t306, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * (qJDD(1) * t287 - t286 * t375) + t315, -t347 - t286 * t305 + (-0.2e1 * qJDD(1) * t286 - t287 * t375) * pkin(1), 0, pkin(1) * (t286 ^ 2 * t301 + t287 * t253), (t261 + t324) * t292, t260 * t296 + t263 * t292, t345 + t296 * (-t280 + t297), (t262 - t325) * t296, t292 * (t281 - t297) + t343, 0, -t296 * t226 + pkin(2) * t263 + pkin(7) * t240 + pkin(1) * (t240 * t286 + t263 * t287), t292 * t226 - pkin(2) * t260 + pkin(7) * t241 + pkin(1) * (t241 * t286 - t260 * t287), pkin(2) * t265 + pkin(7) * t264 + pkin(1) * (t264 * t286 + t265 * t287) + t176, -pkin(2) * t226 + pkin(7) * t176 + pkin(1) * (t176 * t286 - t226 * t287), t292 * (t220 * t295 - t256 * t349) + t296 * (t220 * t291 + t256 * t348), t292 * (-t198 * t295 - t202 * t291) + t296 * (-t198 * t291 + t202 * t295), t292 * (-t244 * t291 + t382) + t296 * (t244 * t295 + t385), t292 * (-t219 * t291 + t254 * t348) + t296 * (t219 * t295 + t254 * t349), t292 * (t243 * t295 - t355) + t296 * (t243 * t291 + t354), (t292 * (-t254 * t295 + t256 * t291) + t296 * (-t254 * t291 - t256 * t295)) * t282, t292 * (-pkin(8) * t192 + t357) + t296 * (-pkin(3) * t198 + pkin(8) * t193 - t356) - pkin(2) * t198 + pkin(7) * t151 + pkin(1) * (t151 * t286 - t198 * t287), t292 * (-pkin(8) * t204 + t356) + t296 * (-pkin(3) * t202 + pkin(8) * t205 + t357) - pkin(2) * t202 + pkin(7) * t160 + pkin(1) * (t160 * t286 - t202 * t287), t292 * (-pkin(8) * t158 - t92) + t296 * (-pkin(3) * t221 + pkin(8) * t159 + t93) - pkin(2) * t221 + pkin(7) * t114 + pkin(1) * (t114 * t286 - t221 * t287), -pkin(8) * t364 + t296 * (-pkin(3) * t196 + pkin(8) * t93) - pkin(2) * t196 + pkin(7) * t56 + pkin(1) * (-t196 * t287 + t286 * t56), t292 * (t165 * t295 + t332) + t296 * (t165 * t291 - t331), t292 * (t120 * t295 + t212 * t291) + t296 * (t120 * t291 - t212 * t295), t292 * (t156 * t295 + t172 * t291) + t296 * (t156 * t291 - t172 * t295), t292 * (t163 * t295 - t332) + t296 * (t163 * t291 + t331), t292 * (t157 * t295 - t168 * t291) + t296 * (t157 * t291 + t168 * t295), t292 * (t182 * t295 + t216 * t291) + t296 * (t182 * t291 - t216 * t295), t292 * (-pkin(8) * t108 - t291 * t71 + t295 * t88) + t296 * (-pkin(3) * t139 + pkin(8) * t109 + t291 * t88 + t295 * t71) - pkin(2) * t139 + pkin(7) * t67 + pkin(1) * (-t139 * t287 + t286 * t67), t292 * (-pkin(8) * t112 - t291 * t74 + t295 * t89) + t296 * (-pkin(3) * t143 + pkin(8) * t113 + t291 * t89 + t295 * t74) - pkin(2) * t143 + pkin(7) * t72 + pkin(1) * (-t143 * t287 + t286 * t72), t292 * (-pkin(8) * t90 + t295 * t37) + t296 * (pkin(8) * t91 + t291 * t37) + t327 * (-t292 * t90 + t296 * t91) + (t292 * t370 + t296 * t326 + t328) * t119, (t292 * (-pkin(9) * t295 + t370) + t296 * (-pkin(9) * t291 + t326) + t328) * t311 + (t327 + pkin(8)) * (-t292 * t38 + t296 * t39), t292 * (t295 * t62 + t334) + t296 * (t291 * t62 - t333), t292 * (t174 * t291 + t295 * t35) + t296 * (-t174 * t295 + t291 * t35), t292 * (t106 * t291 + t295 * t80) + t296 * (-t106 * t295 + t291 * t80), t292 * (t295 * t61 - t334) + t296 * (t291 * t61 + t333), t292 * (-t103 * t291 + t295 * t81) + t296 * (t103 * t295 + t291 * t81), t292 * (t215 * t291 + t295 * t95) + t296 * (-t215 * t295 + t291 * t95), t292 * (-pkin(8) * t44 + t19 * t295 - t21 * t291) + t296 * (-pkin(3) * t69 + pkin(8) * t45 + t19 * t291 + t21 * t295) - pkin(2) * t69 + pkin(7) * t25 + pkin(1) * (t25 * t286 - t287 * t69), t292 * (-pkin(8) * t49 + t20 * t295 - t23 * t291) + t296 * (-pkin(3) * t76 + pkin(8) * t50 + t20 * t291 + t23 * t295) - pkin(2) * t76 + pkin(7) * t26 + pkin(1) * (t26 * t286 - t287 * t76), t292 * (-pkin(8) * t27 - t24 * t291 + t295 * t3) + t296 * (-pkin(3) * t34 + pkin(8) * t28 + t24 * t295 + t291 * t3) - pkin(2) * t34 + pkin(7) * t16 + pkin(1) * (t16 * t286 - t287 * t34), t292 * (-pkin(8) * t5 + t2 * t295 - t291 * t4) + t296 * (-pkin(3) * t8 + pkin(8) * t6 + t2 * t291 + t295 * t4) - pkin(2) * t8 + pkin(7) * t1 + pkin(1) * (t1 * t286 - t287 * t8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t342, 0, 0, 0, 0, 0, 0, t266 * t296 + t270 * t292, -t267 * t292 + t269 * t296, 0, -t217 * t296 + t218 * t292, 0, 0, 0, 0, 0, 0, t192 * t296 + t193 * t292, t204 * t296 + t205 * t292, t158 * t296 + t159 * t292, t292 * t93 + t296 * t92, 0, 0, 0, 0, 0, 0, t108 * t296 + t109 * t292, t112 * t296 + t113 * t292, t292 * t91 + t296 * t90, t292 * t39 + t296 * t38, 0, 0, 0, 0, 0, 0, t292 * t45 + t296 * t44, t292 * t50 + t296 * t49, t27 * t296 + t28 * t292, t292 * t6 + t296 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t280 - t281, t336, t272, t279, qJDD(3), -t217, -t218, 0, 0, t233, t232, t203, -t233, t302, t335, pkin(3) * t192 - t149, -t344 - t291 * (pkin(8) * t324 - t217 - t369) + (-t266 * t291 + t204) * pkin(3), pkin(3) * t158, pkin(3) * t92, t164, t118, t154, t162, t155, t181, pkin(3) * t108 + t329, pkin(3) * t112 + t330, pkin(3) * t90 + t313, pkin(3) * t38 + t362, t60, t33, t78, t59, t79, t94, pkin(3) * t44 + t320, pkin(3) * t49 + t319, pkin(3) * t27 + t321, pkin(3) * t5 + t308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t233, t232, t203, -t233, t302, t335, -t149, -t150, 0, 0, t164, t118, t154, t162, t155, t181, t329, t330, t313, t362, t60, t33, t78, t59, t79, t94, t320, t319, t321, t308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, t212, t172, -t213, -t168, t216, -t84, -t85, 0, 0, t175, t174, t106, -t175, -t103, t215, t309, t304, t373, t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t174, t106, -t175, -t103, t215, -t30, -t31, 0, 0;];
tauJ_reg  = t7;
