% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:58:38
% EndTime: 2019-03-09 06:58:54
% DurationCPUTime: 8.39s
% Computational Cost: add. (17063->661), mult. (35847->833), div. (0->0), fcn. (25443->18), ass. (0->333)
t299 = sin(qJ(5));
t480 = cos(qJ(4));
t380 = t480 * qJD(4);
t368 = pkin(3) * t380;
t305 = cos(qJ(3));
t296 = sin(pkin(11));
t265 = pkin(1) * t296 + pkin(7);
t247 = t265 * qJD(1);
t372 = pkin(8) * qJD(1) + t247;
t301 = sin(qJ(3));
t405 = t301 * qJD(2);
t190 = t305 * t372 + t405;
t300 = sin(qJ(4));
t175 = t300 * t190;
t281 = t305 * qJD(2);
t189 = -t301 * t372 + t281;
t127 = t189 * t480 - t175;
t412 = qJD(1) * t301;
t385 = t300 * t412;
t386 = t480 * t305;
t211 = -qJD(1) * t386 + t385;
t225 = t300 * t305 + t301 * t480;
t213 = t225 * qJD(1);
t163 = pkin(4) * t213 + pkin(9) * t211;
t149 = pkin(3) * t412 + t163;
t304 = cos(qJ(5));
t77 = -t127 * t299 + t304 * t149;
t505 = -t299 * t368 - t77;
t78 = t304 * t127 + t299 * t149;
t504 = -t304 * t368 + t78;
t273 = pkin(3) * t300 + pkin(9);
t468 = -pkin(10) - t273;
t374 = qJD(5) * t468;
t439 = t211 * t299;
t398 = pkin(10) * t439;
t503 = t299 * t374 - t398 - t504;
t438 = t211 * t304;
t363 = t213 * pkin(5) + pkin(10) * t438;
t502 = t304 * t374 - t363 + t505;
t307 = -pkin(10) - pkin(9);
t387 = qJD(5) * t307;
t177 = qJD(3) * pkin(3) + t189;
t120 = t177 * t480 - t175;
t80 = t304 * t120 + t299 * t163;
t501 = t299 * t387 - t398 - t80;
t79 = -t120 * t299 + t304 * t163;
t500 = t304 * t387 - t363 - t79;
t290 = qJD(3) + qJD(4);
t178 = t213 * t299 - t304 * t290;
t180 = t213 * t304 + t290 * t299;
t298 = sin(qJ(6));
t303 = cos(qJ(6));
t110 = t303 * t178 + t180 * t298;
t343 = t178 * t298 - t303 * t180;
t450 = t110 * t343;
t422 = t298 * t304;
t224 = t299 * t303 + t422;
t399 = qJD(5) + qJD(6);
t168 = t399 * t224;
t499 = t224 * t211 + t168;
t406 = qJD(6) * t303;
t408 = qJD(5) * t304;
t423 = t298 * t299;
t486 = t303 * t304 - t423;
t498 = t486 * t211 + t303 * t408 + t304 * t406 - t399 * t423;
t291 = qJ(1) + pkin(11);
t278 = cos(t291);
t295 = qJ(3) + qJ(4);
t283 = sin(t295);
t430 = t278 * t283;
t277 = sin(t291);
t432 = t277 * t283;
t497 = g(1) * t430 + g(2) * t432;
t245 = t265 * qJDD(1);
t496 = qJD(2) * qJD(3) + t245;
t495 = -t110 ^ 2 + t343 ^ 2;
t208 = qJD(5) + t211;
t204 = qJD(6) + t208;
t289 = qJDD(3) + qJDD(4);
t328 = t480 * qJD(3) + t380;
t373 = qJDD(1) * t480;
t404 = qJD(1) * qJD(3);
t379 = t301 * t404;
t137 = qJD(4) * t385 + t300 * t379 - t301 * t373 - t305 * (qJD(1) * t328 + qJDD(1) * t300);
t409 = qJD(5) * t299;
t390 = -t299 * t137 + t213 * t408 + t290 * t409;
t336 = t304 * t289 - t390;
t407 = qJD(6) * t298;
t90 = t304 * t137 + t213 * t409 - t299 * t289 - t290 * t408;
t36 = t178 * t406 + t180 * t407 - t298 * t336 + t303 * t90;
t494 = t110 * t204 - t36;
t294 = qJ(5) + qJ(6);
t282 = sin(t294);
t284 = cos(t294);
t285 = cos(t295);
t426 = t284 * t285;
t182 = -t277 * t426 + t278 * t282;
t184 = t277 * t282 + t278 * t426;
t270 = g(3) * t283;
t176 = t480 * t190;
t121 = t300 * t177 + t176;
t107 = t290 * pkin(9) + t121;
t297 = cos(pkin(11));
t266 = -pkin(1) * t297 - pkin(2);
t287 = t305 * pkin(3);
t487 = t266 - t287;
t214 = t487 * qJD(1);
t139 = pkin(4) * t211 - pkin(9) * t213 + t214;
t280 = t305 * qJDD(2);
t125 = qJDD(3) * pkin(3) + t280 + (-pkin(8) * qJDD(1) - t245) * t301 - t190 * qJD(3);
t389 = t301 * qJDD(2) + t305 * t496;
t411 = qJD(3) * t301;
t150 = -t247 * t411 + t389;
t400 = t305 * qJDD(1);
t135 = (-t379 + t400) * pkin(8) + t150;
t410 = qJD(4) * t300;
t367 = -t300 * t125 - t480 * t135 - t177 * t380 + t190 * t410;
t45 = pkin(9) * t289 - t367;
t170 = t290 * t225;
t401 = t301 * qJDD(1);
t354 = t300 * t401 - t305 * t373;
t138 = qJD(1) * t170 + t354;
t191 = pkin(3) * t379 + qJDD(1) * t487;
t67 = pkin(4) * t138 + pkin(9) * t137 + t191;
t14 = -t107 * t409 + t139 * t408 + t299 * t67 + t304 * t45;
t10 = pkin(10) * t336 + t14;
t72 = -t107 * t299 + t304 * t139;
t58 = -pkin(10) * t180 + t72;
t52 = pkin(5) * t208 + t58;
t73 = t107 * t304 + t139 * t299;
t59 = -pkin(10) * t178 + t73;
t134 = qJDD(5) + t138;
t66 = t304 * t67;
t15 = -qJD(5) * t73 - t299 * t45 + t66;
t9 = pkin(5) * t134 + pkin(10) * t90 + t15;
t3 = (qJD(6) * t52 + t10) * t303 + t298 * t9 - t59 * t407;
t106 = -t290 * pkin(4) - t120;
t88 = t178 * pkin(5) + t106;
t493 = g(1) * t184 - g(2) * t182 + t110 * t88 + t284 * t270 - t3;
t428 = t282 * t285;
t181 = t277 * t428 + t278 * t284;
t183 = t277 * t284 - t278 * t428;
t460 = t303 * t59;
t21 = t298 * t52 + t460;
t4 = -qJD(6) * t21 - t298 * t10 + t303 * t9;
t492 = -g(1) * t183 + g(2) * t181 + t282 * t270 + t343 * t88 + t4;
t323 = qJD(6) * t343 + t298 * t90 + t303 * t336;
t491 = -t204 * t343 + t323;
t452 = pkin(1) * qJDD(1);
t126 = t189 * t300 + t176;
t360 = pkin(3) * t410 - t126;
t469 = pkin(8) + t265;
t215 = t469 * t301;
t216 = t469 * t305;
t159 = -t300 * t215 + t216 * t480;
t152 = t304 * t159;
t420 = t300 * t301;
t223 = -t386 + t420;
t153 = pkin(4) * t223 - pkin(9) * t225 + t487;
t93 = t299 * t153 + t152;
t490 = (t409 + t439) * pkin(5);
t489 = -t480 * t215 - t300 * t216;
t470 = t304 * pkin(5);
t274 = pkin(4) + t470;
t488 = t285 * t274 - t283 * t307;
t414 = t285 * pkin(4) + t283 * pkin(9);
t485 = -t299 * t72 + t304 * t73;
t359 = g(1) * t278 + g(2) * t277;
t425 = t285 * t299;
t192 = t277 * t425 + t278 * t304;
t194 = t277 * t304 - t278 * t425;
t484 = -g(1) * t194 + g(2) * t192;
t384 = t225 * t409;
t169 = t290 * t420 - t305 * t328;
t448 = t169 * t304;
t333 = t384 + t448;
t435 = t225 * t304;
t483 = t134 * t435 - t208 * t333;
t482 = t170 * t178 - t223 * t336;
t302 = sin(qJ(1));
t479 = pkin(1) * t302;
t476 = g(1) * t302;
t473 = g(3) * t285;
t472 = g(3) * t305;
t471 = t289 * pkin(4);
t157 = t486 * t225;
t55 = t168 * t225 + t169 * t486;
t467 = t55 * t110 + t157 * t323;
t130 = qJDD(6) + t134;
t156 = t224 * t225;
t436 = t225 * t299;
t449 = t169 * t299;
t56 = -t169 * t422 - t298 * t384 - t407 * t436 + (t399 * t435 - t449) * t303;
t466 = -t156 * t130 - t56 * t204;
t217 = t468 * t299;
t286 = t304 * pkin(10);
t218 = t273 * t304 + t286;
t161 = t217 * t303 - t218 * t298;
t465 = qJD(6) * t161 + t502 * t298 + t303 * t503;
t162 = t217 * t298 + t218 * t303;
t464 = -qJD(6) * t162 - t298 * t503 + t502 * t303;
t463 = -t170 * t343 - t36 * t223;
t13 = t14 * t304;
t462 = t298 * t59;
t458 = t90 * t299;
t331 = t336 * t304;
t457 = t178 * t448 + t225 * t331;
t249 = t307 * t299;
t250 = pkin(9) * t304 + t286;
t185 = t249 * t303 - t250 * t298;
t456 = qJD(6) * t185 + t298 * t500 + t303 * t501;
t186 = t249 * t298 + t250 * t303;
t455 = -qJD(6) * t186 - t298 * t501 + t303 * t500;
t454 = t180 * t170 - t90 * t223;
t453 = t490 + t360;
t451 = t106 * t211;
t446 = t178 * t208;
t445 = t178 * t299;
t444 = t180 * t178;
t443 = t180 * t208;
t442 = t180 * t304;
t441 = t204 * t213;
t440 = t208 * t213;
t437 = t213 * t211;
t434 = t247 * t301;
t433 = t247 * t305;
t431 = t277 * t285;
t429 = t278 * t285;
t424 = t285 * t304;
t418 = -t225 * t138 + t169 * t211;
t276 = t287 + pkin(2);
t306 = cos(qJ(1));
t288 = t306 * pkin(1);
t415 = t278 * t276 + t288;
t292 = t301 ^ 2;
t293 = t305 ^ 2;
t413 = t292 - t293;
t248 = qJD(1) * t266;
t246 = qJDD(1) * t266;
t397 = pkin(3) * t411;
t394 = pkin(9) * qJD(5) * t208;
t392 = t180 * t449;
t310 = qJD(1) ^ 2;
t391 = t301 * t310 * t305;
t388 = g(1) * t429 + g(2) * t431 + t270;
t366 = -t480 * t125 + t300 * t135 + t177 * t410 + t190 * t380;
t46 = t366 - t471;
t383 = -t46 - t473;
t308 = -pkin(8) - pkin(7);
t378 = pkin(5) * t299 - t308;
t102 = pkin(4) * t170 + pkin(9) * t169 + t397;
t375 = qJD(3) * t469;
t206 = t301 * t375;
t361 = t305 * t375;
t94 = qJD(4) * t489 - t480 * t206 - t300 * t361;
t376 = t304 * t102 - t299 * t94;
t92 = t304 * t153 - t159 * t299;
t369 = t208 * t304;
t275 = -pkin(3) * t480 - pkin(4);
t365 = t305 * t379;
t364 = -t121 + t490;
t362 = -g(1) * t432 + g(2) * t430;
t358 = g(1) * t277 - g(2) * t278;
t357 = -g(2) * t306 + t476;
t356 = -t278 * t308 - t479;
t355 = -pkin(9) * t134 + t451;
t353 = t156 * t36 + t343 * t56;
t74 = pkin(5) * t223 - pkin(10) * t435 + t92;
t81 = -pkin(10) * t436 + t93;
t40 = -t298 * t81 + t303 * t74;
t41 = t298 * t74 + t303 * t81;
t352 = t299 * t73 + t304 * t72;
t348 = -t110 * t170 + t223 * t323;
t347 = -t130 * t157 + t204 * t55;
t346 = -t134 * t273 + t451;
t345 = -t137 * t223 + t170 * t213;
t344 = t169 * t290 - t225 * t289;
t341 = t274 * t283 + t285 * t307;
t203 = t405 + t433;
t339 = g(3) * t425 + t106 * t408 + t73 * t213 + t46 * t299;
t338 = t106 * t409 - t72 * t213 + t304 * t497;
t337 = -t72 * t438 - t73 * t439 + t13 - t388;
t335 = t359 * t283;
t334 = t225 * t408 - t449;
t38 = t299 * t102 + t153 * t408 - t159 * t409 + t304 * t94;
t330 = -qJD(1) * t248 + t359;
t327 = 0.2e1 * qJD(3) * t248 - qJDD(3) * t265;
t326 = -qJD(5) * t352 - t15 * t299;
t325 = t214 * t211 + t367 + t388;
t324 = -t458 + (t442 + t445) * qJD(5);
t322 = -t214 * t213 - t366 - t473 + t497;
t309 = qJD(3) ^ 2;
t321 = -t265 * t309 - 0.2e1 * t246 + t358;
t20 = t303 * t52 - t462;
t320 = -t20 * t498 - t21 * t499 - t4 * t224 + t3 * t486 - t388;
t28 = -pkin(5) * t336 + t46;
t319 = -g(3) * t426 - t20 * t213 - t28 * t486 + t284 * t497 + t499 * t88;
t318 = -t134 * t436 - t208 * t334;
t317 = t326 + t13;
t95 = qJD(4) * t159 - t300 * t206 + t480 * t361;
t316 = -g(1) * (-pkin(4) * t430 + pkin(9) * t429) - g(2) * (-pkin(4) * t432 + pkin(9) * t431);
t151 = -qJD(3) * t203 - t301 * t245 + t280;
t202 = t281 - t434;
t315 = t150 * t305 - t151 * t301 + (-t202 * t305 - t203 * t301) * qJD(3);
t313 = g(3) * t428 + t21 * t213 + t28 * t224 - t282 * t335 + t498 * t88;
t244 = t275 - t470;
t243 = qJDD(3) * t305 - t301 * t309;
t242 = qJDD(3) * t301 + t305 * t309;
t195 = t277 * t299 + t278 * t424;
t193 = -t277 * t424 + t278 * t299;
t140 = -t211 ^ 2 + t213 ^ 2;
t136 = -t170 * t290 - t223 * t289;
t132 = pkin(5) * t436 - t489;
t100 = t290 * t211 - t137;
t64 = pkin(5) * t334 + t95;
t54 = t134 * t299 - t180 * t213 + t208 * t369;
t53 = -t208 ^ 2 * t299 + t134 * t304 + t178 * t213;
t51 = t208 * t445 + t331;
t50 = t180 * t369 - t458;
t39 = -qJD(5) * t93 + t376;
t35 = t110 * t213 + t130 * t486 - t204 * t499;
t34 = t224 * t130 + t204 * t498 + t213 * t343;
t24 = -pkin(10) * t334 + t38;
t23 = t303 * t58 - t462;
t22 = -t298 * t58 - t460;
t19 = pkin(10) * t448 + pkin(5) * t170 + (-t152 + (pkin(10) * t225 - t153) * t299) * qJD(5) + t376;
t18 = (-t90 - t446) * t304 + (t336 - t443) * t299;
t12 = t110 * t499 + t323 * t486;
t11 = -t36 * t224 - t343 * t498;
t7 = -qJD(6) * t41 + t303 * t19 - t298 * t24;
t6 = qJD(6) * t40 + t298 * t19 + t303 * t24;
t5 = -t110 * t498 + t224 * t323 + t343 * t499 - t36 * t486;
t1 = [0, 0, 0, 0, 0, qJDD(1), t357, g(1) * t306 + g(2) * t302, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t297 * t452 + t358, -0.2e1 * t296 * t452 + t359, 0 (t357 + (t296 ^ 2 + t297 ^ 2) * t452) * pkin(1), qJDD(1) * t292 + 0.2e1 * t365, 0.2e1 * t301 * t400 - 0.2e1 * t404 * t413, t242, qJDD(1) * t293 - 0.2e1 * t365, t243, 0, t301 * t327 + t305 * t321, -t301 * t321 + t305 * t327 (t292 + t293) * t245 + t315 - t359, t246 * t266 - g(1) * (-pkin(2) * t277 + pkin(7) * t278 - t479) - g(2) * (pkin(2) * t278 + pkin(7) * t277 + t288) + t315 * t265, -t137 * t225 - t169 * t213, -t345 + t418, -t344, t138 * t223 + t170 * t211, t136, 0, t138 * t487 + t170 * t214 + t191 * t223 + t211 * t397 + t285 * t358 + t289 * t489 - t290 * t95, -t137 * t487 - t159 * t289 - t169 * t214 + t191 * t225 + t213 * t397 - t290 * t94 + t362, t120 * t169 - t121 * t170 + t137 * t489 - t138 * t159 - t211 * t94 + t213 * t95 + t223 * t367 + t225 * t366 - t359, -t367 * t159 + t121 * t94 - t366 * t489 - t120 * t95 + t191 * t487 + t214 * t397 - g(1) * (-t276 * t277 + t356) - g(2) * (-t277 * t308 + t415) -t180 * t333 - t435 * t90, t392 + (t458 + (-t442 + t445) * qJD(5)) * t225 + t457, t454 + t483, t178 * t334 - t336 * t436, t318 - t482, t134 * t223 + t170 * t208, -g(1) * t193 - g(2) * t195 + t106 * t334 + t92 * t134 + t15 * t223 + t72 * t170 + t95 * t178 + t39 * t208 + t336 * t489 + t436 * t46, -g(1) * t192 - g(2) * t194 - t106 * t333 - t134 * t93 - t14 * t223 - t170 * t73 + t180 * t95 - t208 * t38 + t435 * t46 + t489 * t90, -t38 * t178 + t93 * t336 - t39 * t180 + t92 * t90 + t352 * t169 + (-qJD(5) * t485 - t14 * t299 - t15 * t304) * t225 - t362, t14 * t93 + t73 * t38 + t15 * t92 + t72 * t39 - t46 * t489 + t106 * t95 - g(1) * t356 - g(2) * (pkin(4) * t429 + pkin(9) * t430 + t415) + (-g(1) * (-t276 - t414) + g(2) * t308) * t277, -t157 * t36 + t343 * t55, t353 + t467, -t347 + t463, t110 * t56 - t156 * t323, t348 + t466, t130 * t223 + t170 * t204, -g(1) * t182 - g(2) * t184 + t110 * t64 + t130 * t40 - t132 * t323 + t156 * t28 + t170 * t20 + t204 * t7 + t223 * t4 + t56 * t88, -g(1) * t181 - g(2) * t183 - t130 * t41 - t132 * t36 + t157 * t28 - t170 * t21 - t204 * t6 - t223 * t3 - t343 * t64 - t55 * t88, -t110 * t6 - t156 * t3 - t157 * t4 + t20 * t55 - t21 * t56 + t323 * t41 + t343 * t7 + t36 * t40 - t362, t3 * t41 + t21 * t6 + t4 * t40 + t20 * t7 + t28 * t132 + t88 * t64 + pkin(1) * t476 - g(2) * t415 + (-g(1) * t378 - g(2) * t488) * t278 + (-g(1) * (-t276 - t488) - g(2) * t378) * t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t243, -t242, 0, t150 * t301 + t151 * t305 - g(3) + (-t202 * t301 + t203 * t305) * qJD(3), 0, 0, 0, 0, 0, 0, t136, t344, t345 + t418, -t120 * t170 - t121 * t169 + t223 * t366 - t225 * t367 - g(3), 0, 0, 0, 0, 0, 0, t318 + t482, t454 - t483, t225 * t324 - t392 + t457, t106 * t170 - t169 * t485 + t223 * t46 + t225 * t317 - g(3), 0, 0, 0, 0, 0, 0, -t348 + t466, t347 + t463, -t353 + t467, -t156 * t4 + t157 * t3 + t170 * t88 - t20 * t56 - t21 * t55 + t223 * t28 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t391, t413 * t310, t401, t391, t400, qJDD(3), -t472 + t280 + (t203 - t433) * qJD(3) + (t330 - t496) * t301, g(3) * t301 + (t202 + t434) * qJD(3) + t330 * t305 - t389, 0, 0, t437, t140, t100, -t437, -t354, t289, t126 * t290 + (-t211 * t412 + t289 * t480 - t290 * t410) * pkin(3) + t322, t127 * t290 + (-t213 * t412 - t289 * t300 - t290 * t380) * pkin(3) + t325 (t121 - t126) * t213 + (-t120 + t127) * t211 + (t480 * t137 - t138 * t300 + (-t211 * t480 + t213 * t300) * qJD(4)) * pkin(3), t120 * t126 - t121 * t127 + (-t480 * t366 - t472 - t300 * t367 + (-t120 * t300 + t121 * t480) * qJD(4) + (-qJD(1) * t214 + t359) * t301) * pkin(3), t50, t18, t54, t51, t53, -t440, t275 * t390 + (-t275 * t289 + t383) * t304 + t346 * t299 + t360 * t178 + (-t273 * t408 + t505) * t208 + t338, -t275 * t90 + t346 * t304 - t299 * t335 + t360 * t180 + (t273 * t409 + t504) * t208 + t339, t78 * t178 + t77 * t180 + (-t178 * t368 - qJD(5) * t72 + (qJD(5) * t180 + t336) * t273) * t304 + (t180 * t368 - t273 * t90 - t15 + (t178 * t273 - t73) * qJD(5)) * t299 + t337, t46 * t275 - t73 * t78 - t72 * t77 - t106 * t126 - g(3) * (t287 + t414) + (t359 * t301 + (t106 * t300 + t480 * t485) * qJD(4)) * pkin(3) + t317 * t273 + t316, t11, t5, t34, t12, t35, -t441, t110 * t453 + t130 * t161 + t204 * t464 - t244 * t323 + t319, -t130 * t162 - t204 * t465 - t244 * t36 - t343 * t453 + t313, -t110 * t465 + t161 * t36 + t162 * t323 + t343 * t464 + t320, t3 * t162 + t4 * t161 + t28 * t244 - g(3) * (t287 + t488) + t453 * t88 + t465 * t21 + t464 * t20 + t359 * (pkin(3) * t301 + t341); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t437, t140, t100, -t437, -t354, t289, t121 * t290 + t322, t120 * t290 + t325, 0, 0, t50, t18, t54, t51, t53, -t440, -pkin(4) * t390 - t79 * t208 - t121 * t178 + t355 * t299 + (t383 - t394 + t471) * t304 + t338, pkin(4) * t90 - t121 * t180 + t208 * t80 + t355 * t304 + (-t335 + t394) * t299 + t339, t80 * t178 + t79 * t180 + (t331 + t324) * pkin(9) + t326 + t337, -t46 * pkin(4) + pkin(9) * t317 - g(3) * t414 - t106 * t121 - t72 * t79 - t73 * t80 + t316, t11, t5, t34, t12, t35, -t441, t110 * t364 + t130 * t185 + t204 * t455 + t274 * t323 + t319, -t130 * t186 - t204 * t456 + t274 * t36 - t343 * t364 + t313, -t110 * t456 + t185 * t36 + t186 * t323 + t343 * t455 + t320, -g(3) * t488 + t4 * t185 + t3 * t186 + t20 * t455 + t21 * t456 - t28 * t274 + t341 * t359 + t364 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t444, -t178 ^ 2 + t180 ^ 2, -t90 + t446, -t444, t336 + t443, t134, -t107 * t408 - t106 * t180 + t208 * t73 + t66 + (-qJD(5) * t139 + t270 - t45) * t299 + t484, g(1) * t195 - g(2) * t193 + t106 * t178 + t208 * t72 + t270 * t304 - t14, 0, 0, -t450, t495, t494, t450, t491, t130, -t204 * t22 + (-t110 * t180 + t130 * t303 - t204 * t407) * pkin(5) + t492, t204 * t23 + (-t130 * t298 + t180 * t343 - t204 * t406) * pkin(5) + t493, -t343 * t21 + t110 * t23 - t110 * t20 - t343 * t22 + (t298 * t323 + t303 * t36 + (-t110 * t303 - t298 * t343) * qJD(6)) * pkin(5), -t20 * t22 - t21 * t23 + (t3 * t298 + t4 * t303 - t88 * t180 + t299 * t270 + (-t20 * t298 + t21 * t303) * qJD(6) + t484) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t450, t495, t494, t450, t491, t130, t204 * t21 + t492, t20 * t204 + t493, 0, 0;];
tau_reg  = t1;
