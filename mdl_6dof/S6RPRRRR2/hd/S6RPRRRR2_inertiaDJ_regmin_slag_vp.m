% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR2_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR2_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR2_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR2_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:58:30
% EndTime: 2019-03-09 06:58:35
% DurationCPUTime: 1.68s
% Computational Cost: add. (2530->207), mult. (5729->338), div. (0->0), fcn. (5515->10), ass. (0->154)
t118 = sin(qJ(6));
t119 = sin(qJ(5));
t122 = cos(qJ(6));
t123 = cos(qJ(5));
t203 = -t118 * t119 + t122 * t123;
t116 = t123 ^ 2;
t168 = t119 ^ 2 - t116;
t142 = t168 * qJD(5);
t202 = qJD(3) + qJD(4);
t201 = qJD(5) + qJD(6);
t200 = -pkin(9) - pkin(10);
t120 = sin(qJ(4));
t121 = sin(qJ(3));
t124 = cos(qJ(3));
t197 = cos(qJ(4));
t92 = t120 * t124 + t197 * t121;
t69 = t202 * t92;
t199 = pkin(5) * t69;
t148 = t197 * t124;
t170 = t120 * t121;
t90 = -t148 + t170;
t198 = pkin(5) * t90;
t196 = pkin(5) * t122;
t113 = qJD(5) * t123;
t152 = t92 * t113;
t146 = qJD(4) * t197;
t68 = -qJD(3) * t148 - t124 * t146 + t202 * t170;
t178 = t119 * t68;
t126 = t152 - t178;
t166 = qJD(5) * t119;
t106 = sin(pkin(11)) * pkin(1) + pkin(7);
t192 = pkin(8) + t106;
t144 = qJD(3) * t192;
t127 = t197 * t144;
t140 = t120 * t144;
t167 = qJD(4) * t120;
t83 = t192 * t121;
t84 = t192 * t124;
t30 = t121 * t127 + t124 * t140 + t146 * t83 + t84 * t167;
t164 = t121 * qJD(3);
t161 = pkin(3) * t164;
t35 = pkin(4) * t69 + pkin(9) * t68 + t161;
t107 = -cos(pkin(11)) * pkin(1) - pkin(2);
t98 = -pkin(3) * t124 + t107;
t57 = t90 * pkin(4) - t92 * pkin(9) + t98;
t63 = -t120 * t83 + t197 * t84;
t7 = -t57 * t113 - t119 * t35 + t123 * t30 + t63 * t166;
t6 = -pkin(10) * t126 - t7;
t195 = t122 * t6;
t194 = t123 * pkin(5);
t193 = t92 * t68;
t110 = pkin(3) * t120 + pkin(9);
t191 = -pkin(10) - t110;
t31 = qJD(4) * t63 - t121 * t140 + t124 * t127;
t16 = pkin(5) * t126 + t31;
t177 = t119 * t92;
t62 = t120 * t84 + t197 * t83;
t40 = pkin(5) * t177 + t62;
t171 = t118 * t123;
t91 = t119 * t122 + t171;
t67 = t201 * t91;
t188 = -t16 * t203 + t40 * t67;
t66 = t201 * t203;
t187 = t16 * t91 + t40 * t66;
t53 = t62 * t113;
t186 = t31 * t119 + t53;
t174 = t123 * t92;
t175 = t123 * t68;
t185 = t69 * t174 - t90 * t175;
t56 = t123 * t63;
t184 = t119 * t57 + t56;
t157 = pkin(3) * t167;
t158 = pkin(5) * t166;
t95 = t157 + t158;
t111 = -t197 * pkin(3) - pkin(4);
t99 = t111 - t194;
t183 = -t203 * t95 + t99 * t67;
t182 = t99 * t66 + t95 * t91;
t112 = -pkin(4) - t194;
t181 = t112 * t67 - t158 * t203;
t180 = t112 * t66 + t91 * t158;
t18 = -pkin(10) * t177 + t184;
t179 = t118 * t18;
t176 = t122 * t18;
t173 = t111 * t113 + t119 * t157;
t165 = qJD(6) * t118;
t163 = t124 * qJD(3);
t162 = 0.2e1 * t163;
t160 = pkin(4) * t166;
t159 = pkin(4) * t113;
t156 = pkin(5) * t165;
t155 = qJD(6) * t196;
t154 = t119 * t175;
t153 = t92 * t166;
t52 = t62 * t166;
t51 = t123 * t57;
t17 = -pkin(10) * t174 - t119 * t63 + t198 + t51;
t151 = -t17 - t198;
t145 = t119 * t30 + t123 * t35;
t5 = pkin(10) * t175 + t199 + (-t56 + (pkin(10) * t92 - t57) * t119) * qJD(5) + t145;
t150 = -t118 * t6 + t122 * t5;
t149 = qJD(5) * t200;
t147 = t119 * t113;
t143 = qJD(5) * t191;
t141 = pkin(3) * t146;
t139 = t31 * t92 - t62 * t68;
t25 = -t203 * t69 + t67 * t90;
t138 = t68 * t90 - t69 * t92;
t137 = t110 * t90 - t111 * t92;
t136 = -t122 * t17 + t179;
t135 = t118 * t17 + t176;
t85 = t191 * t119;
t114 = t123 * pkin(10);
t86 = t110 * t123 + t114;
t134 = t118 * t86 - t122 * t85;
t133 = t118 * t85 + t122 * t86;
t132 = t119 * t141;
t131 = t123 * t141;
t100 = t200 * t119;
t101 = pkin(9) * t123 + t114;
t130 = t100 * t122 - t101 * t118;
t129 = t100 * t118 + t101 * t122;
t128 = t111 * t166 - t123 * t157;
t42 = t153 + t175;
t41 = -t123 * t69 + t90 * t166;
t125 = -t110 * t69 - t111 * t68 + (t120 * t92 - t197 * t90) * qJD(4) * pkin(3);
t103 = 0.2e1 * t147;
t94 = t123 * t149;
t93 = t119 * t149;
t88 = -0.2e1 * t142;
t87 = t92 ^ 2;
t73 = t123 * t143 - t132;
t72 = t119 * t143 + t131;
t59 = t203 * t92;
t58 = t91 * t92;
t48 = 0.2e1 * t91 * t66;
t47 = 0.2e1 * t90 * t69;
t43 = t90 * t113 + t119 * t69;
t39 = -qJD(6) * t129 - t118 * t93 + t122 * t94;
t38 = -qJD(6) * t130 - t118 * t94 - t122 * t93;
t34 = -t142 * t92 - t154;
t23 = t66 * t90 + t69 * t91;
t22 = -0.4e1 * t92 * t147 + t168 * t68;
t21 = 0.2e1 * t203 * t66 - 0.2e1 * t67 * t91;
t20 = -qJD(6) * t133 - t118 * t72 + t122 * t73;
t19 = qJD(6) * t134 - t118 * t73 - t122 * t72;
t13 = -t68 * t171 - t118 * t153 - t165 * t177 + (t201 * t174 - t178) * t122;
t12 = t203 * t68 + t67 * t92;
t9 = -t12 * t91 + t59 * t66;
t8 = -t184 * qJD(5) + t145;
t3 = -t12 * t203 - t13 * t91 - t58 * t66 - t59 * t67;
t2 = -qJD(6) * t135 + t150;
t1 = qJD(6) * t136 - t118 * t5 - t195;
t4 = [0, 0, 0, 0, t121 * t162, 0.2e1 * (-t121 ^ 2 + t124 ^ 2) * qJD(3), 0, 0, 0, 0.2e1 * t107 * t164, t107 * t162, -0.2e1 * t193, 0.2e1 * t138, 0, 0, 0, 0.2e1 * t90 * t161 + 0.2e1 * t69 * t98, 0.2e1 * t92 * t161 - 0.2e1 * t68 * t98, -0.2e1 * t116 * t193 - 0.2e1 * t147 * t87, 0.2e1 * t87 * t142 + 0.4e1 * t92 * t154, -0.2e1 * t90 * t153 + 0.2e1 * t185, 0.2e1 * t119 * t138 - 0.2e1 * t90 * t152, t47, 0.2e1 * t92 * t53 + 0.2e1 * t51 * t69 + 0.2e1 * t8 * t90 + 0.2e1 * (-t63 * t69 + t139) * t119, 0.2e1 * t139 * t123 - 0.2e1 * t184 * t69 - 0.2e1 * t92 * t52 + 0.2e1 * t7 * t90, -0.2e1 * t59 * t12, 0.2e1 * t12 * t58 - 0.2e1 * t13 * t59, -0.2e1 * t12 * t90 + 0.2e1 * t59 * t69, -0.2e1 * t90 * t13 - 0.2e1 * t69 * t58, t47, 0.2e1 * t40 * t13 - 0.2e1 * t136 * t69 + 0.2e1 * t16 * t58 + 0.2e1 * t2 * t90, 0.2e1 * t1 * t90 - 0.2e1 * t40 * t12 - 0.2e1 * t135 * t69 + 0.2e1 * t16 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123 * t138 + t185, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, t163, -t164, 0, -t106 * t163, t106 * t164, 0, 0, -t68, -t69, 0, -t31, t30, t34, t22, t43, -t41, 0, t52 + (-t137 * qJD(5) - t31) * t123 + t125 * t119, t123 * t125 + t137 * t166 + t186, t9, t3, t23, -t25, 0, t99 * t13 - t134 * t69 + t20 * t90 + t95 * t58 + t188, -t99 * t12 - t133 * t69 + t19 * t90 + t95 * t59 + t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164, -t163, 0, 0, 0, 0, 0, -t69, t68, 0, 0, 0, 0, 0, t41, t43, 0, 0, 0, 0, 0, t25, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t157, -0.2e1 * t141, t103, t88, 0, 0, 0, 0.2e1 * t128, 0.2e1 * t173, t48, t21, 0, 0, 0, 0.2e1 * t183, 0.2e1 * t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t68, -t69, 0, -t31, t30, t34, t22, t43, -t41, 0, t52 + (pkin(4) * t68 - pkin(9) * t69) * t119 + (-t31 + (-pkin(4) * t92 - pkin(9) * t90) * qJD(5)) * t123, pkin(4) * t42 + pkin(9) * t41 + t186, t9, t3, t23, -t25, 0, t112 * t13 + t130 * t69 + t58 * t158 + t39 * t90 + t188, -t112 * t12 - t129 * t69 + t158 * t59 + t38 * t90 + t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t68, 0, 0, 0, 0, 0, t41, t43, 0, 0, 0, 0, 0, t25, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157, -t141, t103, t88, 0, 0, 0, t128 - t160, -t159 + t173, t48, t21, 0, 0, 0, t181 + t183, t180 + t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, t88, 0, 0, 0, -0.2e1 * t160, -0.2e1 * t159, t48, t21, 0, 0, 0, 0.2e1 * t181, 0.2e1 * t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t126, t69, t8, t7, 0, 0, -t12, -t13, t69, t69 * t196 + (t118 * t151 - t176) * qJD(6) + t150, -t195 + (-t5 - t199) * t118 + (t122 * t151 + t179) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, t42, 0, 0, 0, 0, 0, -t13, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, -t166, 0, -t110 * t113 - t132, t110 * t166 - t131, 0, 0, t66, -t67, 0, t20, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, -t166, 0, -pkin(9) * t113, pkin(9) * t166, 0, 0, t66, -t67, 0, t39, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t156, -0.2e1 * t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t13, t69, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, -t67, 0, t20, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, -t67, 0, t39, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t156, -t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
