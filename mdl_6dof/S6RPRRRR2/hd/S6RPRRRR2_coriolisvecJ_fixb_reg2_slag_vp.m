% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRRRR2_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR2_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR2_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR2_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:58:30
% EndTime: 2019-03-09 06:58:44
% DurationCPUTime: 5.48s
% Computational Cost: add. (14142->495), mult. (31921->652), div. (0->0), fcn. (22504->10), ass. (0->263)
t238 = sin(qJ(5));
t371 = cos(qJ(4));
t291 = t371 * qJD(4);
t281 = pkin(3) * t291;
t243 = cos(qJ(3));
t222 = sin(pkin(11)) * pkin(1) + pkin(7);
t208 = t222 * qJD(1);
t285 = pkin(8) * qJD(1) + t208;
t240 = sin(qJ(3));
t316 = qJD(2) * t240;
t175 = t243 * t285 + t316;
t239 = sin(qJ(4));
t164 = t239 * t175;
t230 = t243 * qJD(2);
t270 = t285 * t240;
t174 = t230 - t270;
t119 = t174 * t371 - t164;
t318 = qJD(1) * t240;
t295 = t239 * t318;
t296 = t371 * t243;
t191 = -qJD(1) * t296 + t295;
t202 = t239 * t243 + t240 * t371;
t193 = qJD(1) * t202;
t151 = pkin(4) * t193 + pkin(9) * t191;
t305 = pkin(3) * t318;
t135 = t151 + t305;
t242 = cos(qJ(5));
t70 = -t119 * t238 + t242 * t135;
t392 = -t238 * t281 - t70;
t71 = t242 * t119 + t238 * t135;
t391 = -t242 * t281 + t71;
t227 = pkin(3) * t239 + pkin(9);
t368 = -pkin(10) - t227;
t286 = qJD(5) * t368;
t337 = t191 * t238;
t306 = pkin(10) * t337;
t390 = t238 * t286 - t306 - t391;
t336 = t191 * t242;
t278 = t193 * pkin(5) + pkin(10) * t336;
t389 = -t242 * t286 + t278 - t392;
t372 = -pkin(10) - pkin(9);
t297 = qJD(5) * t372;
t166 = qJD(3) * pkin(3) + t174;
t113 = t166 * t371 - t164;
t73 = t242 * t113 + t238 * t151;
t388 = t238 * t297 - t306 - t73;
t72 = -t113 * t238 + t242 * t151;
t387 = t242 * t297 - t278 - t72;
t232 = qJD(3) + qJD(4);
t167 = t193 * t238 - t242 * t232;
t169 = t193 * t242 + t232 * t238;
t237 = sin(qJ(6));
t241 = cos(qJ(6));
t105 = t241 * t167 + t169 * t237;
t263 = t167 * t237 - t241 * t169;
t350 = t105 * t263;
t329 = t237 * t242;
t201 = t238 * t241 + t329;
t308 = qJD(5) + qJD(6);
t156 = t308 * t201;
t386 = t201 * t191 + t156;
t310 = qJD(6) * t241;
t312 = qJD(5) * t242;
t330 = t237 * t238;
t376 = t241 * t242 - t330;
t385 = t376 * t191 + t241 * t312 + t242 * t310 - t308 * t330;
t384 = -t105 ^ 2 + t263 ^ 2;
t165 = t371 * t175;
t114 = t239 * t166 + t165;
t102 = t232 * pkin(9) + t114;
t223 = -cos(pkin(11)) * pkin(1) - pkin(2);
t206 = -pkin(3) * t243 + t223;
t194 = qJD(1) * t206;
t123 = pkin(4) * t191 - pkin(9) * t193 + t194;
t313 = qJD(5) * t238;
t224 = qJD(3) * t230;
t162 = -qJD(3) * t270 + t224;
t163 = t175 * qJD(3);
t314 = qJD(4) * t239;
t61 = t162 * t371 - t239 * t163 + t166 * t291 - t175 * t314;
t255 = t371 * qJD(3) + t291;
t309 = qJD(1) * qJD(3);
t290 = t240 * t309;
t317 = qJD(1) * t243;
t147 = qJD(4) * t295 + t239 * t290 - t255 * t317;
t158 = t232 * t202;
t148 = t158 * qJD(1);
t83 = pkin(3) * t290 + pkin(4) * t148 + pkin(9) * t147;
t16 = -t102 * t313 + t123 * t312 + t238 * t83 + t242 * t61;
t298 = -t238 * t147 + t193 * t312 + t232 * t313;
t12 = -pkin(10) * t298 + t16;
t68 = t102 * t242 + t123 * t238;
t51 = -pkin(10) * t167 + t68;
t358 = t241 * t51;
t190 = qJD(5) + t191;
t67 = -t102 * t238 + t242 * t123;
t50 = -pkin(10) * t169 + t67;
t44 = pkin(5) * t190 + t50;
t20 = t237 * t44 + t358;
t17 = -t68 * qJD(5) - t238 * t61 + t242 * t83;
t98 = t242 * t147 + t193 * t313 - t232 * t312;
t9 = pkin(5) * t148 + pkin(10) * t98 + t17;
t4 = -qJD(6) * t20 - t12 * t237 + t241 * t9;
t101 = -t232 * pkin(4) - t113;
t77 = t167 * pkin(5) + t101;
t383 = t263 * t77 + t4;
t186 = qJD(6) + t190;
t311 = qJD(6) * t237;
t40 = t167 * t310 + t169 * t311 + t237 * t298 + t241 * t98;
t382 = t105 * t186 - t40;
t3 = (qJD(6) * t44 + t12) * t241 + t237 * t9 - t51 * t311;
t381 = t105 * t77 - t3;
t250 = qJD(6) * t263 + t237 * t98 - t241 * t298;
t380 = -t186 * t263 + t250;
t315 = qJD(3) * t240;
t304 = pkin(3) * t315;
t379 = 0.2e1 * t304;
t118 = t174 * t239 + t165;
t275 = pkin(3) * t314 - t118;
t369 = pkin(8) + t222;
t195 = t369 * t240;
t196 = t369 * t243;
t145 = -t239 * t195 + t196 * t371;
t136 = t242 * t145;
t327 = t239 * t240;
t200 = -t296 + t327;
t139 = pkin(4) * t200 - pkin(9) * t202 + t206;
t85 = t238 * t139 + t136;
t378 = (t313 + t337) * pkin(5);
t377 = -t371 * t195 - t239 * t196;
t375 = -t238 * t67 + t242 * t68;
t294 = t202 * t313;
t157 = t232 * t327 - t255 * t243;
t346 = t157 * t242;
t258 = t294 + t346;
t333 = t202 * t242;
t374 = t148 * t333 - t190 * t258;
t373 = -t158 * t167 - t200 * t298;
t370 = t242 * pkin(5);
t197 = t368 * t238;
t231 = t242 * pkin(10);
t198 = t227 * t242 + t231;
t150 = t197 * t237 + t198 * t241;
t367 = qJD(6) * t150 + t237 * t390 + t389 * t241;
t149 = t197 * t241 - t198 * t237;
t366 = -qJD(6) * t149 + t389 * t237 - t241 * t390;
t143 = t376 * t202;
t45 = t156 * t202 + t376 * t157;
t365 = t45 * t105 + t143 * t250;
t142 = t201 * t202;
t334 = t202 * t238;
t347 = t157 * t238;
t46 = -t157 * t329 - t237 * t294 - t311 * t334 + (t308 * t333 - t347) * t241;
t364 = -t142 * t148 - t46 * t186;
t363 = -t158 * t263 - t40 * t200;
t283 = t239 * t162 + t371 * t163;
t62 = qJD(4) * t114 + t283;
t362 = t377 * t62;
t15 = t16 * t242;
t361 = t200 * t62;
t360 = t237 * t51;
t356 = t98 * t238;
t274 = t298 * t242;
t355 = t167 * t346 - t202 * t274;
t210 = t372 * t238;
t211 = pkin(9) * t242 + t231;
t170 = t210 * t241 - t211 * t237;
t354 = qJD(6) * t170 + t237 * t387 + t241 * t388;
t171 = t210 * t237 + t211 * t241;
t353 = -qJD(6) * t171 - t237 * t388 + t241 * t387;
t352 = t169 * t158 - t98 * t200;
t351 = t378 + t275;
t124 = t148 * t200;
t349 = t148 * t238;
t348 = t148 * t242;
t344 = t167 * t190;
t343 = t167 * t238;
t342 = t169 * t167;
t341 = t169 * t190;
t340 = t169 * t242;
t339 = t186 * t193;
t338 = t190 * t193;
t335 = t193 * t191;
t332 = t208 * t240;
t331 = t232 * t157;
t244 = qJD(3) ^ 2;
t325 = t244 * t240;
t324 = t244 * t243;
t323 = -t202 * t148 + t157 * t191;
t319 = t240 ^ 2 - t243 ^ 2;
t209 = qJD(1) * t223;
t307 = -t67 * t336 - t68 * t337 + t15;
t300 = t169 * t347;
t245 = qJD(1) ^ 2;
t299 = t240 * t245 * t243;
t287 = qJD(3) * t369;
t188 = t240 * t287;
t276 = t243 * t287;
t87 = t377 * qJD(4) - t371 * t188 - t239 * t276;
t97 = pkin(4) * t158 + pkin(9) * t157 + t304;
t288 = -t238 * t87 + t242 * t97;
t84 = t242 * t139 - t145 * t238;
t282 = t190 * t242;
t228 = -pkin(3) * t371 - pkin(4);
t280 = t243 * t290;
t279 = -t114 + t378;
t277 = t101 * t312 + t68 * t193 + t62 * t238;
t273 = t142 * t40 + t263 * t46;
t69 = pkin(5) * t200 - pkin(10) * t333 + t84;
t74 = -pkin(10) * t334 + t85;
t34 = -t237 * t74 + t241 * t69;
t35 = t237 * t69 + t241 * t74;
t272 = t68 * t238 + t67 * t242;
t267 = -t105 * t158 + t200 * t250;
t266 = -t143 * t148 + t186 * t45;
t265 = t101 * t191 - t148 * t227;
t264 = -t147 * t200 + t158 * t193;
t185 = t208 * t243 + t316;
t262 = 0.2e1 * qJD(3) * t209;
t261 = t101 * t313 - t67 * t193 - t62 * t242;
t260 = -t194 * t193 - t283;
t259 = t202 * t312 - t347;
t30 = t139 * t312 - t145 * t313 + t238 * t97 + t242 * t87;
t19 = t241 * t44 - t360;
t42 = pkin(5) * t298 + t62;
t257 = -t19 * t193 - t376 * t42 + t386 * t77;
t256 = t193 * t20 + t42 * t201 + t385 * t77;
t254 = -t19 * t385 - t20 * t386 - t4 * t201 + t3 * t376;
t252 = -qJD(5) * t272 - t17 * t238;
t251 = -t356 + (t340 + t343) * qJD(5);
t249 = -t148 * t334 - t190 * t259;
t248 = t252 + t15;
t88 = qJD(4) * t145 - t239 * t188 + t371 * t276;
t177 = -t208 * t315 + t224;
t178 = qJD(3) * t185;
t184 = t230 - t332;
t247 = t177 * t243 + t178 * t240 + (-t184 * t243 - t185 * t240) * qJD(3);
t246 = t194 * t191 - t61;
t229 = -pkin(4) - t370;
t207 = t228 - t370;
t152 = t232 * t158;
t126 = -t191 ^ 2 + t193 ^ 2;
t121 = pkin(5) * t334 - t377;
t116 = t232 * t191 - t147;
t58 = pkin(5) * t259 + t88;
t54 = -t169 * t193 + t190 * t282 + t349;
t53 = -t190 ^ 2 * t238 + t167 * t193 + t348;
t49 = t190 * t343 - t274;
t48 = t169 * t282 - t356;
t33 = t105 * t193 + t148 * t376 - t186 * t386;
t32 = t148 * t201 + t186 * t385 + t193 * t263;
t31 = -t85 * qJD(5) + t288;
t24 = -pkin(10) * t259 + t30;
t23 = (-t98 - t344) * t242 + (-t298 - t341) * t238;
t22 = t241 * t50 - t360;
t21 = -t237 * t50 - t358;
t18 = pkin(10) * t346 + pkin(5) * t158 + (-t136 + (pkin(10) * t202 - t139) * t238) * qJD(5) + t288;
t11 = t105 * t386 + t250 * t376;
t10 = -t201 * t40 - t263 * t385;
t7 = -t105 * t385 + t201 * t250 + t263 * t386 - t376 * t40;
t6 = -qJD(6) * t35 + t18 * t241 - t237 * t24;
t5 = qJD(6) * t34 + t18 * t237 + t24 * t241;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t280, -0.2e1 * t319 * t309, t324, -0.2e1 * t280, -t325, 0, -t222 * t324 + t240 * t262, t222 * t325 + t243 * t262, t247, t247 * t222, -t147 * t202 - t157 * t193, -t264 + t323, -t331, t158 * t191 + t124, -t152, 0, t148 * t206 + t158 * t194 - t232 * t88 + (qJD(1) * t200 + t191) * t304, -t147 * t206 - t157 * t194 + t193 * t379 - t232 * t87, t113 * t157 - t114 * t158 - t145 * t148 + t147 * t377 - t191 * t87 + t193 * t88 - t200 * t61 + t202 * t62, -t113 * t88 + t114 * t87 + t145 * t61 + t194 * t379 - t362, -t169 * t258 - t333 * t98, t300 + (t356 + (-t340 + t343) * qJD(5)) * t202 + t355, t352 + t374, t167 * t259 + t298 * t334, t249 + t373, t158 * t190 + t124, t101 * t259 + t84 * t148 + t67 * t158 + t88 * t167 + t17 * t200 + t31 * t190 - t298 * t377 + t334 * t62, -t101 * t258 - t148 * t85 - t158 * t68 - t16 * t200 + t169 * t88 - t190 * t30 + t333 * t62 + t377 * t98, -t30 * t167 - t85 * t298 - t31 * t169 + t84 * t98 + t272 * t157 + (-qJD(5) * t375 - t16 * t238 - t17 * t242) * t202, t101 * t88 + t16 * t85 + t17 * t84 + t30 * t68 + t31 * t67 - t362, -t143 * t40 + t263 * t45, t273 + t365, -t266 + t363, t105 * t46 - t142 * t250, t267 + t364, t158 * t186 + t124, t105 * t58 - t121 * t250 + t142 * t42 + t148 * t34 + t158 * t19 + t186 * t6 + t200 * t4 + t46 * t77, -t121 * t40 + t143 * t42 - t148 * t35 - t158 * t20 - t186 * t5 - t200 * t3 - t263 * t58 - t45 * t77, -t105 * t5 - t142 * t3 - t143 * t4 + t19 * t45 - t20 * t46 + t250 * t35 + t263 * t6 + t34 * t40, t121 * t42 + t19 * t6 + t20 * t5 + t3 * t35 + t34 * t4 + t58 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t325, -t324, 0, t177 * t240 - t178 * t243 + (-t184 * t240 + t185 * t243) * qJD(3), 0, 0, 0, 0, 0, 0, -t152, t331, t264 + t323, -t113 * t158 - t114 * t157 + t202 * t61 + t361, 0, 0, 0, 0, 0, 0, t249 - t373, t352 - t374, t202 * t251 - t300 + t355, t101 * t158 - t157 * t375 + t202 * t248 + t361, 0, 0, 0, 0, 0, 0, -t267 + t364, t266 + t363, -t273 + t365, -t142 * t4 + t143 * t3 + t158 * t77 - t19 * t46 - t20 * t45 + t200 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t319 * t245, 0, t299, 0, 0, -t209 * t318, -t209 * t317 - t224 + (t184 + t332) * qJD(3), 0, 0, t335, t126, t116, -t335, 0, 0, -t191 * t305 + t118 * t232 + (-t165 + (-pkin(3) * t232 - t166) * t239) * qJD(4) + t260, t119 * t232 + (-t193 * t318 - t232 * t291) * pkin(3) + t246 (t114 - t118) * t193 + (-t113 + t119) * t191 + (t371 * t147 - t148 * t239 + (-t191 * t371 + t193 * t239) * qJD(4)) * pkin(3), t113 * t118 - t114 * t119 + (-t194 * t318 - t371 * t62 + t239 * t61 + (-t113 * t239 + t114 * t371) * qJD(4)) * pkin(3), t48, t23, t54, t49, t53, -t338, t228 * t298 + t265 * t238 + t275 * t167 + (-t227 * t312 + t392) * t190 + t261, -t228 * t98 + t265 * t242 + t275 * t169 + (t227 * t313 + t391) * t190 + t277, t71 * t167 + t70 * t169 + (-t167 * t281 - t227 * t298 + (t227 * t169 - t67) * qJD(5)) * t242 + (t169 * t281 - t227 * t98 - t17 + (t167 * t227 - t68) * qJD(5)) * t238 + t307, -t101 * t118 + t62 * t228 - t67 * t70 - t68 * t71 + (t101 * t239 + t375 * t371) * qJD(4) * pkin(3) + t248 * t227, t10, t7, t32, t11, t33, -t339, t105 * t351 + t148 * t149 - t186 * t367 - t207 * t250 + t257, -t148 * t150 + t186 * t366 - t207 * t40 - t263 * t351 + t256, t105 * t366 + t149 * t40 + t150 * t250 - t263 * t367 + t254, t149 * t4 + t150 * t3 - t19 * t367 - t20 * t366 + t207 * t42 + t351 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, t126, t116, -t335, 0, 0, t260 + (-qJD(4) + t232) * t114, t113 * t232 + t246, 0, 0, t48, t23, t54, t49, t53, -t338, -pkin(4) * t298 - t72 * t190 - t114 * t167 + t101 * t337 + (-t190 * t312 - t349) * pkin(9) + t261, t101 * t336 + pkin(4) * t98 - t114 * t169 + t190 * t73 + (t190 * t313 - t348) * pkin(9) + t277, t73 * t167 + t72 * t169 + (-t274 + t251) * pkin(9) + t252 + t307, -pkin(4) * t62 + pkin(9) * t248 - t101 * t114 - t67 * t72 - t68 * t73, t10, t7, t32, t11, t33, -t339, t105 * t279 + t148 * t170 + t186 * t353 - t229 * t250 + t257, -t148 * t171 - t186 * t354 - t229 * t40 - t263 * t279 + t256, -t105 * t354 + t170 * t40 + t171 * t250 + t263 * t353 + t254, t170 * t4 + t171 * t3 + t19 * t353 + t20 * t354 + t229 * t42 + t279 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t342, -t167 ^ 2 + t169 ^ 2, -t98 + t344, -t342, -t298 + t341, t148, -t101 * t169 + t190 * t68 + t17, t101 * t167 + t190 * t67 - t16, 0, 0, -t350, t384, t382, t350, t380, t148, -t186 * t21 + (-t105 * t169 + t148 * t241 - t186 * t311) * pkin(5) + t383, t186 * t22 + (-t148 * t237 + t169 * t263 - t186 * t310) * pkin(5) + t381, -t263 * t20 + t105 * t22 - t105 * t19 - t263 * t21 + (t237 * t250 + t241 * t40 + (-t105 * t241 - t237 * t263) * qJD(6)) * pkin(5), -t19 * t21 - t20 * t22 + (-t169 * t77 + t237 * t3 + t241 * t4 + (-t19 * t237 + t20 * t241) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t350, t384, t382, t350, t380, t148, t186 * t20 + t383, t186 * t19 + t381, 0, 0;];
tauc_reg  = t1;
