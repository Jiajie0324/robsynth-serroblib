% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRP5_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP5_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP5_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP5_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:23:04
% EndTime: 2019-03-10 01:23:13
% DurationCPUTime: 3.07s
% Computational Cost: add. (5678->296), mult. (13694->527), div. (0->0), fcn. (12562->8), ass. (0->158)
t139 = sin(qJ(2));
t228 = qJD(3) + qJD(4);
t232 = t139 * t228;
t224 = sin(qJ(4));
t175 = t224 * qJD(4);
t231 = t224 * qJD(3) + t175;
t138 = sin(qJ(3));
t140 = cos(qJ(3));
t203 = qJD(3) * t140;
t141 = cos(qJ(2));
t205 = qJD(2) * t141;
t230 = t138 * t205 + t139 * t203;
t226 = cos(qJ(4));
t193 = t226 * t138;
t96 = t224 * t140 + t193;
t179 = qJD(2) * t224;
t180 = qJD(2) * t226;
t192 = t226 * t140;
t210 = t140 * t141;
t212 = t138 * t141;
t166 = t179 * t210 + t180 * t212 + t192 * t232;
t229 = t138 * t231;
t143 = -t139 * t229 + t166;
t154 = t224 * t138 - t192;
t135 = t140 ^ 2;
t208 = t138 ^ 2 - t135;
t171 = t208 * qJD(3);
t156 = pkin(2) * t139 - pkin(8) * t141;
t102 = t156 * qJD(2);
t157 = -pkin(2) * t141 - t139 * pkin(8);
t105 = -pkin(1) + t157;
t206 = qJD(2) * t140;
t182 = t139 * t206;
t202 = qJD(3) * t141;
t188 = t138 * t202;
t149 = t182 + t188;
t52 = t149 * pkin(7) - t138 * t102 - t105 * t203;
t227 = pkin(8) + pkin(9);
t225 = cos(qJ(5));
t223 = pkin(3) * t139;
t222 = pkin(7) * t138;
t221 = t141 * pkin(4);
t137 = sin(qJ(5));
t211 = t139 * t140;
t95 = t140 * t105;
t73 = -pkin(9) * t211 + t95 + (-pkin(3) - t222) * t141;
t213 = t138 * t139;
t125 = pkin(7) * t210;
t214 = t138 * t105 + t125;
t77 = -pkin(9) * t213 + t214;
t159 = -t224 * t77 + t226 * t73;
t82 = t154 * t139;
t35 = t82 * pkin(10) + t159 - t221;
t209 = t96 * t139;
t218 = t224 * t73 + t226 * t77;
t37 = -t209 * pkin(10) + t218;
t36 = t225 * t37;
t220 = t137 * t35 + t36;
t110 = t227 * t138;
t111 = t227 * t140;
t158 = -t226 * t110 - t224 * t111;
t60 = -t96 * pkin(10) + t158;
t216 = -t224 * t110 + t226 * t111;
t61 = -t154 * pkin(10) + t216;
t219 = t137 * t60 + t225 * t61;
t131 = qJD(2) * t139;
t185 = t138 * t131;
t215 = pkin(7) * t185 + t140 * t102;
t103 = pkin(3) * t213 + t139 * pkin(7);
t134 = t139 ^ 2;
t207 = -t141 ^ 2 + t134;
t204 = qJD(3) * t138;
t201 = qJD(5) * t137;
t200 = -0.2e1 * pkin(1) * qJD(2);
t199 = -0.2e1 * pkin(2) * qJD(3);
t198 = t225 * pkin(4);
t197 = t224 * pkin(3);
t196 = pkin(4) * t131;
t130 = pkin(3) * t204;
t195 = pkin(4) * t201;
t129 = pkin(7) * t205;
t78 = t230 * pkin(3) + t129;
t128 = -t140 * pkin(3) - pkin(2);
t194 = qJD(3) * t227;
t189 = t140 * t205;
t186 = t140 * t202;
t184 = t138 * t203;
t183 = t139 * t205;
t42 = (-pkin(9) * t210 + t223) * qJD(2) + (-t125 + (pkin(9) * t139 - t105) * t138) * qJD(3) + t215;
t47 = -pkin(9) * t230 - t52;
t160 = -t224 * t47 + t226 * t42;
t18 = -qJD(4) * t218 + t160;
t48 = -t154 * t205 - t96 * t232;
t11 = -t48 * pkin(10) + t18 + t196;
t177 = t226 * qJD(4);
t17 = t77 * t175 - t73 * t177 - t224 * t42 - t226 * t47;
t13 = -t143 * pkin(10) - t17;
t181 = t225 * t11 - t137 * t13;
t178 = qJD(5) * t225;
t3 = -t137 * t11 - t225 * t13 - t35 * t178 + t37 * t201;
t174 = -t137 * t37 + t225 * t35;
t173 = -t137 * t61 + t225 * t60;
t172 = -0.2e1 * t195;
t170 = t207 * qJD(2);
t169 = pkin(3) * t177;
t168 = pkin(3) * t175;
t167 = pkin(4) * t178;
t165 = qJD(3) * t193 + t138 * t177 + t231 * t140;
t163 = t141 * t182;
t162 = t226 * pkin(3) + pkin(4);
t161 = t225 * t224;
t155 = t225 * t209;
t112 = t225 * t162;
t153 = -t137 * t197 + t112;
t74 = t209 * pkin(4) + t103;
t100 = t138 * t194;
t101 = t140 * t194;
t49 = t226 * t100 + t224 * t101 + t110 * t177 + t111 * t175;
t33 = -t165 * pkin(10) - t49;
t50 = -t216 * qJD(4) + t224 * t100 - t226 * t101;
t76 = t228 * t154;
t34 = t76 * pkin(10) + t50;
t9 = -t137 * t34 - t60 * t178 + t61 * t201 - t225 * t33;
t62 = t165 * pkin(4) + t130;
t151 = t225 * t154;
t56 = -t137 * t209 - t225 * t82;
t81 = t154 * pkin(4) + t128;
t72 = -t137 * t154 + t225 * t96;
t4 = -t220 * qJD(5) + t181;
t10 = -t219 * qJD(5) - t137 * t33 + t225 * t34;
t64 = -qJD(5) * t112 - t225 * t169 + (t224 * qJD(5) + t175) * t137 * pkin(3);
t38 = t143 * pkin(4) + t78;
t142 = (qJD(4) + qJD(5)) * (-t137 * t226 - t161) * pkin(3);
t127 = t198 + pkin(5);
t119 = -0.2e1 * t183;
t85 = pkin(3) * t161 + t137 * t162;
t83 = pkin(5) + t153;
t71 = t137 * t96 + t151;
t65 = t142 - t195;
t55 = -t137 * t82 + t155;
t53 = -t214 * qJD(3) + t215;
t51 = t71 * pkin(5) + t81;
t39 = t55 * pkin(5) + t74;
t25 = t72 * qJD(5) - t137 * t76 + t225 * t165;
t24 = qJD(5) * t151 + t137 * t165 + t96 * t201 + t225 * t76;
t23 = -qJ(6) * t71 + t219;
t22 = -qJ(6) * t72 + t173;
t21 = t25 * pkin(5) + t62;
t20 = t56 * qJD(5) + t137 * t48 + t225 * t143;
t19 = qJD(5) * t155 + t137 * t143 - t82 * t201 - t225 * t48;
t16 = -qJ(6) * t55 + t220;
t15 = -pkin(5) * t141 - t56 * qJ(6) + t174;
t14 = t20 * pkin(5) + t38;
t6 = t24 * qJ(6) - t72 * qJD(6) + t10;
t5 = -qJ(6) * t25 - qJD(6) * t71 - t9;
t2 = -qJ(6) * t20 - qJD(6) * t55 - t3;
t1 = pkin(5) * t131 + t19 * qJ(6) - t56 * qJD(6) + t4;
t7 = [0, 0, 0, 0.2e1 * t183, -0.2e1 * t170, 0, 0, 0, t139 * t200, t141 * t200, -0.2e1 * t134 * t184 + 0.2e1 * t135 * t183, 0.2e1 * t134 * t171 - 0.4e1 * t138 * t163, 0.2e1 * t139 * t188 + 0.2e1 * t207 * t206, -0.2e1 * t138 * t170 + 0.2e1 * t139 * t186, t119, 0.2e1 * t95 * t131 - 0.2e1 * t53 * t141 + 0.2e1 * (t134 * t203 + t138 * t183) * pkin(7), -0.2e1 * t52 * t141 - 0.2e1 * t214 * t131 + 0.2e1 * (-t134 * t204 + 0.2e1 * t163) * pkin(7), -0.2e1 * t82 * t48, 0.2e1 * t82 * t143 - 0.2e1 * t48 * t209, -0.2e1 * t82 * t131 - 0.2e1 * t141 * t48, 0.2e1 * t166 * t141 + 0.2e1 * (-t209 * qJD(2) - t141 * t229) * t139, t119, -0.2e1 * t18 * t141 + 0.2e1 * t78 * t209 + 0.2e1 * t103 * t166 + 0.2e1 * (t159 * qJD(2) - t103 * t229) * t139, 0.2e1 * t103 * t48 - 0.2e1 * t218 * t131 - 0.2e1 * t17 * t141 - 0.2e1 * t78 * t82, -0.2e1 * t56 * t19, 0.2e1 * t19 * t55 - 0.2e1 * t20 * t56, 0.2e1 * t131 * t56 + 0.2e1 * t141 * t19, -0.2e1 * t131 * t55 + 0.2e1 * t141 * t20, t119, 0.2e1 * t131 * t174 - 0.2e1 * t4 * t141 + 0.2e1 * t74 * t20 + 0.2e1 * t38 * t55, -0.2e1 * t220 * t131 - 0.2e1 * t3 * t141 - 0.2e1 * t74 * t19 + 0.2e1 * t38 * t56, -0.2e1 * t1 * t56 + 0.2e1 * t15 * t19 - 0.2e1 * t16 * t20 - 0.2e1 * t2 * t55, 0.2e1 * t1 * t15 + 0.2e1 * t14 * t39 + 0.2e1 * t16 * t2; 0, 0, 0, 0, 0, t205, -t131, 0, -t129, pkin(7) * t131, t138 * t189 - t139 * t171, -0.4e1 * t139 * t184 - t208 * t205, t185 - t186, t149, 0 (pkin(8) * t210 + (-pkin(2) * t140 + t222) * t139) * qJD(3) + (t157 * t138 - t125) * qJD(2) (pkin(7) * t211 + t156 * t138) * qJD(3) + (pkin(7) * t212 + t157 * t140) * qJD(2), t48 * t96 + t76 * t82, -t96 * t143 - t48 * t154 + t82 * t165 + t76 * t209, t96 * t131 + t141 * t76, -t154 * t131 + t165 * t141, 0, t103 * t165 + t128 * t143 + t209 * t130 + t158 * t131 - t50 * t141 + t78 * t154, -t103 * t76 + t128 * t48 - t82 * t130 - t216 * t131 - t49 * t141 + t78 * t96, -t19 * t72 - t24 * t56, t19 * t71 - t20 * t72 + t24 * t55 - t25 * t56, t131 * t72 + t141 * t24, -t131 * t71 + t141 * t25, 0, -t10 * t141 + t131 * t173 + t81 * t20 + t74 * t25 + t38 * t71 + t62 * t55, -t219 * t131 - t9 * t141 - t81 * t19 - t74 * t24 + t38 * t72 + t62 * t56, -t1 * t72 + t15 * t24 - t16 * t25 + t19 * t22 - t2 * t71 - t20 * t23 - t5 * t55 - t56 * t6, t1 * t22 + t14 * t51 + t15 * t6 + t16 * t5 + t2 * t23 + t21 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t184, -0.2e1 * t171, 0, 0, 0, t138 * t199, t140 * t199, -0.2e1 * t96 * t76, 0.2e1 * t76 * t154 - 0.2e1 * t96 * t165, 0, 0, 0, 0.2e1 * t128 * t165 + 0.2e1 * t154 * t130, -0.2e1 * t128 * t76 + 0.2e1 * t96 * t130, -0.2e1 * t72 * t24, 0.2e1 * t24 * t71 - 0.2e1 * t25 * t72, 0, 0, 0, 0.2e1 * t25 * t81 + 0.2e1 * t62 * t71, -0.2e1 * t24 * t81 + 0.2e1 * t62 * t72, 0.2e1 * t22 * t24 - 0.2e1 * t23 * t25 - 0.2e1 * t5 * t71 - 0.2e1 * t6 * t72, 0.2e1 * t21 * t51 + 0.2e1 * t22 * t6 + 0.2e1 * t23 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t139 * t204 + t189, -t230, t131, t53, t52, 0, 0, t48, -t143, t131, t180 * t223 + (t141 * t197 - t218) * qJD(4) + t160 (-t139 * t179 + t141 * t177) * pkin(3) + t17, 0, 0, -t19, -t20, t131, t131 * t153 - t65 * t141 + t4, -t131 * t85 - t141 * t64 + t3, t19 * t83 - t20 * t85 + t55 * t64 - t56 * t65, t1 * t83 + t15 * t65 - t16 * t64 + t2 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203, -t204, 0, -pkin(8) * t203, pkin(8) * t204, 0, 0, -t76, -t165, 0, t50, t49, 0, 0, -t24, -t25, 0, t10, t9, t24 * t83 - t25 * t85 + t64 * t71 - t65 * t72, t22 * t65 - t23 * t64 + t5 * t85 + t6 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t168, -0.2e1 * t169, 0, 0, 0, 0, 0, 0.2e1 * t65, 0.2e1 * t64, 0, -0.2e1 * t64 * t85 + 0.2e1 * t65 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, -t143, t131, t18, t17, 0, 0, -t19, -t20, t131, t225 * t196 + (-t36 + (-t35 + t221) * t137) * qJD(5) + t181 (-t131 * t137 + t141 * t178) * pkin(4) + t3, t127 * t19 + (-t137 * t20 + (t137 * t56 - t225 * t55) * qJD(5)) * pkin(4), t1 * t127 + (t137 * t2 + (-t137 * t15 + t225 * t16) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, -t165, 0, t50, t49, 0, 0, -t24, -t25, 0, t10, t9, t127 * t24 + (-t137 * t25 + (t137 * t72 - t225 * t71) * qJD(5)) * pkin(4), t6 * t127 + (t137 * t5 + (-t137 * t22 + t225 * t23) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t169, 0, 0, 0, 0, 0, t142 + t172, -t167 + t64, 0, t65 * t127 + (-t137 * t64 + (-t137 * t83 + t225 * t85) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, -0.2e1 * t167, 0, 0.2e1 * (t198 - t127) * t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t20, t131, t4, t3, pkin(5) * t19, t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t25, 0, t10, t9, pkin(5) * t24, t6 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t64, 0, t65 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195, -t167, 0, -pkin(5) * t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
