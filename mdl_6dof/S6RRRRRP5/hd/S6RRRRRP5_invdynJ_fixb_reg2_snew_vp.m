% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 05:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRRP5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP5_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:03:23
% EndTime: 2019-05-08 05:04:00
% DurationCPUTime: 12.85s
% Computational Cost: add. (89498->574), mult. (184425->742), div. (0->0), fcn. (137515->10), ass. (0->379)
t338 = sin(qJ(3));
t343 = cos(qJ(3));
t339 = sin(qJ(2));
t401 = qJD(1) * t339;
t306 = -t343 * qJD(2) + t338 * t401;
t307 = qJD(2) * t338 + t343 * t401;
t337 = sin(qJ(4));
t342 = cos(qJ(4));
t286 = -t306 * t342 - t337 * t307;
t287 = -t306 * t337 + t307 * t342;
t336 = sin(qJ(5));
t341 = cos(qJ(5));
t251 = -t341 * t286 + t287 * t336;
t253 = t286 * t336 + t287 * t341;
t206 = t253 * t251;
t395 = qJD(1) * qJD(2);
t325 = t339 * t395;
t344 = cos(qJ(2));
t394 = t344 * qJDD(1);
t311 = -t325 + t394;
t305 = -qJDD(3) + t311;
t302 = -qJDD(4) + t305;
t298 = -qJDD(5) + t302;
t468 = t206 + t298;
t473 = pkin(5) * t468;
t249 = t251 ^ 2;
t323 = qJD(1) * t344 - qJD(3);
t319 = -qJD(4) + t323;
t314 = -qJD(5) + t319;
t313 = t314 ^ 2;
t197 = -t313 - t249;
t421 = t468 * t341;
t153 = t197 * t336 - t421;
t422 = t468 * t336;
t154 = t197 * t341 + t422;
t109 = t153 * t342 + t154 * t337;
t108 = pkin(3) * t109;
t152 = pkin(4) * t153;
t326 = t339 * qJDD(1);
t386 = t344 * t395;
t310 = t326 + t386;
t361 = -t338 * qJDD(2) - t343 * t310;
t281 = -qJD(3) * t306 - t361;
t377 = -t343 * qJDD(2) + t338 * t310;
t357 = -qJD(3) * t307 - t377;
t218 = t286 * qJD(4) + t342 * t281 + t337 * t357;
t379 = t337 * t281 - t342 * t357;
t356 = -qJD(4) * t287 - t379;
t163 = -t251 * qJD(5) + t341 * t218 + t336 * t356;
t232 = t251 * t314;
t144 = -t232 + t163;
t471 = qJ(6) * t144;
t346 = qJD(1) ^ 2;
t340 = sin(qJ(1));
t345 = cos(qJ(1));
t381 = t340 * g(1) - t345 * g(2);
t300 = qJDD(1) * pkin(1) + t346 * pkin(7) + t381;
t366 = -t311 + t325;
t367 = t310 + t386;
t258 = pkin(2) * t366 - pkin(8) * t367 - t300;
t369 = g(1) * t345 + g(2) * t340;
t427 = qJDD(1) * pkin(7);
t301 = -pkin(1) * t346 - t369 + t427;
t370 = -pkin(2) * t344 - pkin(8) * t339;
t376 = t346 * t370 + t301;
t444 = t339 * g(3);
t458 = qJD(2) ^ 2;
t268 = -pkin(2) * t458 + qJDD(2) * pkin(8) + t344 * t376 - t444;
t220 = -t343 * t258 + t338 * t268;
t296 = t306 * t323;
t263 = t281 - t296;
t410 = t307 * t306;
t352 = -t305 - t410;
t182 = t352 * pkin(3) - pkin(9) * t263 - t220;
t221 = t338 * t258 + t343 * t268;
t293 = -pkin(3) * t323 - pkin(9) * t307;
t459 = t306 ^ 2;
t184 = -pkin(3) * t459 + pkin(9) * t357 + t323 * t293 + t221;
t131 = -t342 * t182 + t337 * t184;
t272 = t286 * t319;
t202 = t272 + t218;
t255 = t286 * t287;
t463 = t255 - t302;
t113 = pkin(4) * t463 - pkin(10) * t202 - t131;
t132 = t337 * t182 + t342 * t184;
t269 = -pkin(4) * t319 - pkin(10) * t287;
t284 = t286 ^ 2;
t118 = -t284 * pkin(4) + pkin(10) * t356 + t319 * t269 + t132;
t77 = -t341 * t113 + t118 * t336;
t350 = 0.2e1 * qJD(6) * t253 + t471 + t473 + t77;
t349 = -t350 - t473;
t348 = t152 + t349;
t472 = t108 + t348;
t443 = t344 * g(3);
t267 = -qJDD(2) * pkin(2) - t458 * pkin(8) + t376 * t339 + t443;
t209 = -t357 * pkin(3) - t459 * pkin(9) + t307 * t293 + t267;
t146 = -t356 * pkin(4) - t284 * pkin(10) + t287 * t269 + t209;
t470 = t337 * t463;
t469 = t342 * t463;
t228 = -pkin(5) * t314 - qJ(6) * t253;
t380 = -t336 * t218 + t341 * t356;
t355 = qJD(5) * t253 - t380;
t91 = pkin(5) * t355 - t249 * qJ(6) + t253 * t228 + qJDD(6) + t146;
t467 = t338 * t352;
t466 = t343 * t352;
t464 = t232 + t163;
t462 = -t272 + t218;
t199 = (qJD(4) + t319) * t287 + t379;
t259 = (qJD(3) + t323) * t307 + t377;
t250 = t253 ^ 2;
t285 = t287 ^ 2;
t304 = t307 ^ 2;
t318 = t319 ^ 2;
t321 = t323 ^ 2;
t110 = -t153 * t337 + t154 * t342;
t74 = t109 * t343 + t110 * t338;
t457 = pkin(2) * t74;
t225 = -t250 - t313;
t190 = -t206 + t298;
t424 = t190 * t336;
t170 = t225 * t341 + t424;
t423 = t190 * t341;
t171 = -t225 * t336 + t423;
t122 = t170 * t342 + t171 * t337;
t123 = -t170 * t337 + t171 * t342;
t84 = t122 * t343 + t123 * t338;
t456 = pkin(2) * t84;
t92 = -t131 * t342 + t132 * t337;
t455 = pkin(3) * t92;
t142 = (-qJD(5) - t314) * t253 + t380;
t101 = t142 * t336 - t144 * t341;
t103 = t142 * t341 + t144 * t336;
t65 = t101 * t342 + t103 * t337;
t67 = -t101 * t337 + t103 * t342;
t35 = t338 * t67 + t343 * t65;
t454 = pkin(8) * t35;
t453 = pkin(8) * t74;
t452 = pkin(8) * t84;
t451 = pkin(9) * t65;
t156 = -t199 * t337 - t202 * t342;
t450 = pkin(3) * t156;
t449 = pkin(9) * t109;
t448 = pkin(9) * t122;
t447 = pkin(10) * t101;
t446 = pkin(10) * t153;
t445 = pkin(10) * t170;
t179 = -t249 - t250;
t36 = -t338 * t65 + t343 * t67;
t442 = pkin(7) * (t179 * t339 + t344 * t36) - pkin(1) * t35;
t434 = t341 * t350;
t400 = qJD(6) * t251;
t241 = -0.2e1 * t400;
t78 = t336 * t113 + t341 * t118;
t365 = t249 * pkin(5) + qJ(6) * t355 - t314 * t228 - t78;
t54 = t241 - t365;
t26 = t336 * t54 - t434;
t51 = pkin(5) * t350;
t441 = pkin(4) * t26 - t51;
t233 = t314 * t253;
t140 = -t233 + t355;
t75 = -t109 * t338 + t110 * t343;
t440 = pkin(7) * (t140 * t339 + t344 * t75) - pkin(1) * t74;
t63 = pkin(3) * t65;
t99 = pkin(4) * t101;
t439 = t63 + t99;
t85 = -t122 * t338 + t123 * t343;
t438 = pkin(7) * (t339 * t464 + t344 * t85) - pkin(1) * t84;
t437 = t336 * t350;
t42 = t336 * t78 - t341 * t77;
t436 = t337 * t42;
t435 = t338 * t92;
t433 = t342 * t42;
t432 = t343 * t92;
t137 = pkin(5) * t144;
t431 = -t137 + t99;
t430 = -pkin(2) * t179 + pkin(8) * t36;
t429 = -pkin(2) * t140 + pkin(8) * t75;
t428 = -pkin(2) * t464 + pkin(8) * t85;
t426 = t146 * t336;
t425 = t146 * t341;
t420 = t209 * t337;
t419 = t209 * t342;
t235 = t255 + t302;
t418 = t235 * t337;
t417 = t235 * t342;
t416 = t267 * t338;
t415 = t267 * t343;
t275 = t305 - t410;
t414 = t275 * t338;
t413 = t275 * t343;
t409 = t314 * t336;
t408 = t314 * t341;
t407 = t319 * t337;
t406 = t319 * t342;
t405 = t323 * t338;
t404 = t323 * t343;
t322 = t344 * t346 * t339;
t403 = t339 * (qJDD(2) + t322);
t402 = t344 * (-t322 + qJDD(2));
t398 = qJD(3) - t323;
t393 = t344 * t206;
t392 = t344 * t255;
t391 = t344 * t410;
t169 = pkin(4) * t170;
t390 = t169 - t78;
t43 = t336 * t77 + t341 * t78;
t20 = t337 * t43 + t433;
t41 = pkin(4) * t42;
t389 = pkin(3) * t20 + t41;
t388 = -pkin(3) * t179 + pkin(9) * t67;
t387 = -pkin(4) * t179 + pkin(10) * t103;
t385 = -pkin(3) * t140 + pkin(9) * t110;
t384 = -pkin(3) * t464 + pkin(9) * t123;
t383 = -pkin(4) * t140 + pkin(10) * t154;
t382 = -pkin(4) * t464 + pkin(10) * t171;
t93 = t131 * t337 + t342 * t132;
t177 = t220 * t338 + t343 * t221;
t291 = t301 * t339 + t443;
t292 = t301 * t344 - t444;
t378 = t339 * t291 + t344 * t292;
t375 = -pkin(2) * t35 - t439;
t27 = t341 * t54 + t437;
t15 = t26 * t342 + t27 * t337;
t374 = pkin(3) * t15 + t441;
t121 = pkin(3) * t122;
t373 = t121 + t390;
t265 = -t285 - t318;
t207 = t265 * t342 + t418;
t372 = pkin(3) * t207 - t132;
t368 = -t152 + t77;
t364 = t220 * t343 - t221 * t338;
t362 = -pkin(1) + t370;
t360 = -t108 + t368;
t240 = -t318 - t284;
t188 = t240 * t337 + t469;
t359 = pkin(3) * t188 - t131;
t358 = pkin(5) * t225 + t365;
t354 = t169 + t358;
t351 = t121 + t354;
t333 = t344 ^ 2;
t332 = t339 ^ 2;
t330 = t333 * t346;
t328 = t332 * t346;
t312 = -0.2e1 * t325 + t394;
t309 = t326 + 0.2e1 * t386;
t295 = -t304 + t321;
t294 = -t321 + t459;
t289 = t304 - t459;
t288 = -t304 - t321;
t282 = -t321 - t459;
t274 = t304 + t459;
t271 = -t285 + t318;
t270 = t284 - t318;
t264 = t306 * t398 + t361;
t262 = t281 + t296;
t260 = -t307 * t398 - t377;
t254 = t285 - t284;
t246 = -t288 * t338 + t413;
t245 = t288 * t343 + t414;
t242 = 0.2e1 * t400;
t239 = t282 * t343 - t467;
t238 = t282 * t338 + t466;
t230 = -t250 + t313;
t229 = t249 - t313;
t227 = (-t286 * t342 - t287 * t337) * t319;
t226 = (-t286 * t337 + t287 * t342) * t319;
t222 = -t284 - t285;
t215 = -t259 * t343 + t263 * t338;
t213 = t270 * t342 + t418;
t212 = -t271 * t337 + t469;
t211 = t270 * t337 - t417;
t210 = t271 * t342 + t470;
t208 = -t265 * t337 + t417;
t204 = t250 - t249;
t198 = (qJD(4) - t319) * t287 + t379;
t196 = t218 * t342 + t287 * t407;
t195 = t218 * t337 - t287 * t406;
t194 = t286 * t406 - t337 * t356;
t193 = t286 * t407 + t342 * t356;
t189 = t240 * t342 - t470;
t186 = (t251 * t341 - t253 * t336) * t314;
t185 = (t251 * t336 + t253 * t341) * t314;
t175 = t229 * t341 + t424;
t174 = -t230 * t336 - t421;
t173 = t229 * t336 - t423;
t172 = t230 * t341 - t422;
t167 = -pkin(9) * t207 + t419;
t166 = -t207 * t338 + t208 * t343;
t165 = t207 * t343 + t208 * t338;
t164 = -pkin(9) * t188 + t420;
t158 = -t199 * t342 + t202 * t337;
t157 = -t198 * t342 - t337 * t462;
t155 = -t198 * t337 + t342 * t462;
t150 = -t188 * t338 + t189 * t343;
t149 = t188 * t343 + t189 * t338;
t148 = -t185 * t337 + t186 * t342;
t147 = t185 * t342 + t186 * t337;
t141 = t233 + t355;
t136 = t163 * t341 + t253 * t409;
t135 = t163 * t336 - t253 * t408;
t134 = -t251 * t408 + t336 * t355;
t133 = -t251 * t409 - t341 * t355;
t129 = -pkin(3) * t462 + pkin(9) * t208 + t420;
t128 = -pkin(3) * t198 + pkin(9) * t189 - t419;
t127 = -t173 * t337 + t175 * t342;
t126 = -t172 * t337 + t174 * t342;
t125 = t173 * t342 + t175 * t337;
t124 = t172 * t342 + t174 * t337;
t119 = -pkin(5) * t464 + qJ(6) * t190;
t116 = t425 - t445;
t115 = -t156 * t338 + t158 * t343;
t114 = t156 * t343 + t158 * t338;
t106 = t426 - t446;
t105 = t147 * t343 + t148 * t338;
t104 = t339 * (-t147 * t338 + t148 * t343) + t344 * t298;
t102 = -t140 * t341 - t336 * t464;
t100 = -t140 * t336 + t341 * t464;
t97 = -t135 * t337 + t136 * t342;
t96 = -t133 * t337 + t134 * t342;
t95 = t135 * t342 + t136 * t337;
t94 = t133 * t342 + t134 * t337;
t90 = -pkin(3) * t209 + pkin(9) * t93;
t89 = -qJ(6) * t225 + t91;
t88 = t382 + t426;
t87 = t125 * t343 + t127 * t338;
t86 = t124 * t343 + t126 * t338;
t81 = t383 - t425;
t80 = -pkin(9) * t156 - t92;
t79 = -pkin(3) * t222 + pkin(9) * t158 + t93;
t71 = t339 * (-t125 * t338 + t127 * t343) + t344 * t141;
t70 = t339 * (-t124 * t338 + t126 * t343) - t344 * t144;
t69 = -pkin(5) * t140 + qJ(6) * t197 - t91;
t66 = -t100 * t337 + t102 * t342;
t64 = t100 * t342 + t102 * t337;
t61 = t338 * t97 + t343 * t95;
t60 = t338 * t96 + t343 * t94;
t59 = t343 * t93 - t435;
t58 = t338 * t93 + t432;
t56 = t339 * (-t338 * t95 + t343 * t97) - t393;
t55 = t339 * (-t338 * t94 + t343 * t96) + t393;
t53 = -t119 * t336 + t341 * t89 - t445;
t50 = qJ(6) * t421 - t336 * t69 - t446;
t49 = t116 * t342 - t337 * t88 - t448;
t48 = t119 * t341 + t336 * t89 + t382;
t47 = t350 + t471;
t46 = qJ(6) * t422 + t341 * t69 + t383;
t45 = -pkin(5) * t179 + qJ(6) * t142 + t54;
t44 = t106 * t342 - t337 * t81 - t449;
t40 = t116 * t337 + t342 * t88 + t384;
t39 = -pkin(5) * t91 + qJ(6) * t54;
t38 = t106 * t337 + t342 * t81 + t385;
t37 = -pkin(4) * t146 + pkin(10) * t43;
t34 = t338 * t66 + t343 * t64;
t31 = -t42 - t447;
t30 = t339 * (-t338 * t64 + t343 * t66) - t344 * t204;
t28 = t387 + t43;
t24 = -t337 * t48 + t342 * t53 - t448;
t23 = -t337 * t46 + t342 * t50 - t449;
t22 = t337 * t53 + t342 * t48 + t384;
t21 = t342 * t43 - t436;
t19 = t337 * t50 + t342 * t46 + t385;
t18 = -t336 * t45 + t341 * t47 - t447;
t17 = t336 * t47 + t341 * t45 + t387;
t16 = -t26 * t337 + t27 * t342;
t14 = -pkin(10) * t26 + qJ(6) * t434 - t336 * t39;
t13 = -t28 * t337 + t31 * t342 - t451;
t12 = t28 * t342 + t31 * t337 + t388;
t11 = -pkin(4) * t91 + pkin(10) * t27 + qJ(6) * t437 + t341 * t39;
t10 = -t20 * t338 + t21 * t343;
t9 = t20 * t343 + t21 * t338;
t8 = -pkin(9) * t20 - pkin(10) * t433 - t337 * t37;
t7 = -pkin(3) * t146 + pkin(9) * t21 - pkin(10) * t436 + t342 * t37;
t6 = -t17 * t337 + t18 * t342 - t451;
t5 = t17 * t342 + t18 * t337 + t388;
t4 = -t15 * t338 + t16 * t343;
t3 = t15 * t343 + t16 * t338;
t2 = -pkin(9) * t15 - t11 * t337 + t14 * t342;
t1 = -pkin(3) * t91 + pkin(9) * t16 + t11 * t342 + t14 * t337;
t25 = [0, 0, 0, 0, 0, qJDD(1), t381, t369, 0, 0, t367 * t339, t309 * t344 + t312 * t339, t403 + t344 * (-t328 + t458), -t366 * t344, t339 * (t330 - t458) + t402, 0, t344 * t300 + pkin(1) * t312 + pkin(7) * (t344 * (-t330 - t458) - t403), -t339 * t300 - pkin(1) * t309 + pkin(7) * (-t402 - t339 * (-t328 - t458)), pkin(1) * (t328 + t330) + (t332 + t333) * t427 + t378, pkin(1) * t300 + pkin(7) * t378, t339 * (t281 * t343 + t307 * t405) - t391, t339 * (t260 * t343 - t262 * t338) - t344 * t289, t339 * (-t295 * t338 + t466) - t344 * t263, t339 * (-t306 * t404 - t338 * t357) + t391, t339 * (t294 * t343 + t414) + t344 * t259, t344 * t305 + t339 * (t306 * t343 - t307 * t338) * t323, t339 * (-pkin(8) * t238 + t416) + t344 * (-pkin(2) * t238 + t220) - pkin(1) * t238 + pkin(7) * (t239 * t344 - t260 * t339), t339 * (-pkin(8) * t245 + t415) + t344 * (-pkin(2) * t245 + t221) - pkin(1) * t245 + pkin(7) * (t246 * t344 - t264 * t339), t339 * t364 + pkin(7) * (t215 * t344 - t274 * t339) + t362 * (-t259 * t338 - t263 * t343), pkin(7) * (t177 * t344 + t267 * t339) - t362 * t364, t339 * (-t195 * t338 + t196 * t343) + t392, t339 * (-t155 * t338 + t157 * t343) - t344 * t254, t339 * (-t210 * t338 + t212 * t343) - t344 * t202, t339 * (-t193 * t338 + t194 * t343) - t392, t339 * (-t211 * t338 + t213 * t343) + t344 * t199, t339 * (-t226 * t338 + t227 * t343) + t344 * t302, t339 * (-pkin(8) * t149 - t128 * t338 + t164 * t343) + t344 * (-pkin(2) * t149 - t359) - pkin(1) * t149 + pkin(7) * (t150 * t344 + t198 * t339), t339 * (-pkin(8) * t165 - t129 * t338 + t167 * t343) + t344 * (-pkin(2) * t165 - t372) - pkin(1) * t165 + pkin(7) * (t166 * t344 + t339 * t462), t339 * (-pkin(8) * t114 - t338 * t79 + t343 * t80) + t344 * (-pkin(2) * t114 - t450) - pkin(1) * t114 + pkin(7) * (t115 * t344 + t222 * t339), t339 * (-pkin(8) * t58 - pkin(9) * t432 - t338 * t90) + t344 * (-pkin(2) * t58 - t455) - pkin(1) * t58 + pkin(7) * (t209 * t339 + t344 * t59), t56, t30, t70, t55, t71, t104, t339 * (-t338 * t38 + t343 * t44 - t453) + t344 * (t360 - t457) + t440, t339 * (-t338 * t40 + t343 * t49 - t452) + t344 * (-t373 - t456) + t438, t339 * (-t12 * t338 + t13 * t343 - t454) + t344 * t375 + t442, t339 * (-pkin(8) * t9 - t338 * t7 + t343 * t8) + t344 * (-pkin(2) * t9 - t389) - pkin(1) * t9 + pkin(7) * (t10 * t344 + t146 * t339), t56, t30, t70, t55, t71, t104, t339 * (-t19 * t338 + t23 * t343 - t453) + t344 * (-t457 - t472) + t440, t339 * (-t22 * t338 + t24 * t343 - t452) + t344 * (t241 - t351 - t456) + t438, t339 * (-t338 * t5 + t343 * t6 - t454) + t344 * (t137 + t375) + t442, t339 * (-pkin(8) * t3 - t1 * t338 + t2 * t343) + t344 * (-pkin(2) * t3 - t374) - pkin(1) * t3 + pkin(7) * (t339 * t91 + t344 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322, t328 - t330, t326, t322, t394, qJDD(2), -t291, -t292, 0, 0, t281 * t338 - t307 * t404, t260 * t338 + t262 * t343, t295 * t343 + t467, -t306 * t405 + t343 * t357, t294 * t338 - t413, (t306 * t338 + t307 * t343) * t323, pkin(2) * t260 + pkin(8) * t239 - t415, pkin(2) * t264 + pkin(8) * t246 + t416, pkin(2) * t274 + pkin(8) * t215 + t177, -pkin(2) * t267 + pkin(8) * t177, t195 * t343 + t196 * t338, t155 * t343 + t157 * t338, t210 * t343 + t212 * t338, t193 * t343 + t194 * t338, t211 * t343 + t213 * t338, t226 * t343 + t227 * t338, -pkin(2) * t198 + pkin(8) * t150 + t128 * t343 + t164 * t338, -pkin(2) * t462 + pkin(8) * t166 + t129 * t343 + t167 * t338, -pkin(2) * t222 + pkin(8) * t115 + t338 * t80 + t343 * t79, -pkin(2) * t209 + pkin(8) * t59 - pkin(9) * t435 + t343 * t90, t61, t34, t86, t60, t87, t105, t338 * t44 + t343 * t38 + t429, t338 * t49 + t343 * t40 + t428, t12 * t343 + t13 * t338 + t430, -pkin(2) * t146 + pkin(8) * t10 + t338 * t8 + t343 * t7, t61, t34, t86, t60, t87, t105, t19 * t343 + t23 * t338 + t429, t22 * t343 + t24 * t338 + t428, t338 * t6 + t343 * t5 + t430, -pkin(2) * t91 + pkin(8) * t4 + t1 * t343 + t2 * t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t410, t289, t263, -t410, -t259, -t305, -t220, -t221, 0, 0, -t255, t254, t202, t255, -t199, -t302, t359, t372, t450, t455, t206, t204, t144, -t206, -t141, -t298, -t360, t373, t439, t389, t206, t204, t144, -t206, -t141, -t298, t472, t242 + t351, t63 + t431, t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t255, t254, t202, t255, -t199, -t302, -t131, -t132, 0, 0, t206, t204, t144, -t206, -t141, -t298, -t368, t390, t99, t41, t206, t204, t144, -t206, -t141, -t298, t348, t242 + t354, t431, t441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, t204, t144, -t206, -t141, -t298, -t77, -t78, 0, 0, t206, t204, t144, -t206, -t141, -t298, t349, t242 + t358, -t137, -t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, t464, t179, t91;];
tauJ_reg  = t25;
