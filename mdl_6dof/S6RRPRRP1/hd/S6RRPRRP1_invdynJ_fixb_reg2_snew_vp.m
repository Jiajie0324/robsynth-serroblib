% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRRP1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP1_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:19:24
% EndTime: 2019-05-06 17:19:48
% DurationCPUTime: 11.01s
% Computational Cost: add. (57447->567), mult. (134002->768), div. (0->0), fcn. (100995->10), ass. (0->358)
t326 = cos(qJ(2));
t311 = t326 * qJDD(1);
t322 = sin(qJ(2));
t374 = qJD(1) * qJD(2);
t362 = t322 * t374;
t300 = t311 - t362;
t317 = t326 ^ 2;
t328 = qJD(1) ^ 2;
t384 = qJD(1) * t322;
t344 = qJD(2) * pkin(2) - qJ(3) * t384;
t323 = sin(qJ(1));
t436 = cos(qJ(1));
t358 = g(1) * t323 - t436 * g(2);
t346 = qJDD(1) * pkin(1) + t358;
t249 = pkin(2) * t300 - t344 * t384 - qJDD(3) + t346 + (qJ(3) * t317 + pkin(7)) * t328;
t318 = sin(pkin(10));
t319 = cos(pkin(10));
t290 = qJD(1) * t319 * t326 - t318 * t384;
t291 = (t318 * t326 + t319 * t322) * qJD(1);
t321 = sin(qJ(4));
t325 = cos(qJ(4));
t268 = t290 * t321 + t291 * t325;
t310 = t322 * qJDD(1);
t361 = t326 * t374;
t299 = t310 + t361;
t278 = -t299 * t318 + t319 * t300;
t279 = t319 * t299 + t318 * t300;
t356 = -t325 * t278 + t279 * t321;
t215 = -qJD(4) * t268 - t356;
t214 = qJDD(5) - t215;
t315 = qJD(2) + qJD(4);
t320 = sin(qJ(5));
t324 = cos(qJ(5));
t250 = t268 * t320 - t324 * t315;
t252 = t268 * t324 + t315 * t320;
t221 = t252 * t250;
t445 = t214 - t221;
t456 = pkin(5) * t445;
t266 = -t325 * t290 + t291 * t321;
t216 = -t266 * qJD(4) + t321 * t278 + t325 * t279;
t373 = qJDD(2) + qJDD(4);
t185 = -t250 * qJD(5) + t324 * t216 + t320 * t373;
t263 = qJD(5) + t266;
t228 = t263 * t250;
t172 = t228 + t185;
t455 = qJ(6) * t172;
t277 = t290 * t291;
t441 = qJDD(2) + t277;
t454 = t318 * t441;
t453 = t319 * t441;
t236 = t268 * t266;
t443 = -t236 + t373;
t452 = t321 * t443;
t451 = t325 * t443;
t410 = t445 * t320;
t409 = t445 * t324;
t248 = t252 ^ 2;
t262 = t263 ^ 2;
t211 = -t248 - t262;
t247 = t250 ^ 2;
t357 = t216 * t320 - t324 * t373;
t184 = -qJD(5) * t252 - t357;
t222 = pkin(5) * t263 - qJ(6) * t252;
t347 = g(1) * t436 + t323 * g(2);
t414 = qJDD(1) * pkin(7);
t296 = -t328 * pkin(1) - t347 + t414;
t313 = t317 * t328;
t426 = t322 * g(3);
t333 = -pkin(2) * t313 + t300 * qJ(3) - qJD(2) * t344 - t426;
t393 = t322 * t328;
t338 = pkin(2) * t393 + qJ(3) * t374 - g(3);
t397 = t296 * t322;
t340 = qJDD(2) * pkin(2) - qJ(3) * t299 - t397;
t378 = qJD(3) * t291;
t205 = t318 * t333 - t319 * t340 + (t318 * t296 - t319 * t338) * t326 + 0.2e1 * t378;
t383 = qJD(2) * t290;
t257 = -t279 + t383;
t440 = t257 * pkin(8);
t329 = pkin(3) * t441 - t205 + t440;
t391 = t326 * t296;
t331 = t333 + t391;
t332 = t326 * t338 + t340;
t206 = 0.2e1 * qJD(3) * t290 + t318 * t332 + t319 * t331;
t288 = t290 ^ 2;
t351 = qJD(2) * pkin(3) - pkin(8) * t291;
t178 = -t288 * pkin(3) + t278 * pkin(8) - qJD(2) * t351 + t206;
t392 = t325 * t178;
t130 = t321 * t329 + t392;
t234 = pkin(4) * t266 - pkin(9) * t268;
t439 = t315 ^ 2;
t115 = -pkin(4) * t439 + pkin(9) * t373 - t266 * t234 + t130;
t204 = pkin(3) * t278 + pkin(8) * t288 - t291 * t351 + t249;
t400 = t266 * t315;
t348 = t216 - t400;
t127 = -t348 * pkin(9) + (t268 * t315 - t215) * pkin(4) - t204;
t81 = t324 * t115 + t320 * t127;
t342 = t184 * qJ(6) - 0.2e1 * qJD(6) * t250 - t222 * t263 + t81;
t450 = -t342 + (t211 + t247) * pkin(5);
t169 = (qJD(5) - t263) * t252 + t357;
t121 = -t169 * t324 + t172 * t320;
t199 = -t247 - t248;
t92 = t121 * t321 - t199 * t325;
t93 = t121 * t325 + t199 * t321;
t59 = t318 * t93 + t319 * t92;
t448 = pkin(2) * t59 + pkin(3) * t92;
t200 = -t262 - t247;
t139 = t200 * t324 - t410;
t168 = (qJD(5) + t263) * t252 + t357;
t100 = t139 * t321 - t168 * t325;
t101 = t139 * t325 + t168 * t321;
t68 = t100 * t319 + t101 * t318;
t447 = pkin(2) * t68 + pkin(3) * t100;
t80 = t115 * t320 - t324 * t127;
t43 = t320 * t80 + t324 * t81;
t176 = t214 + t221;
t411 = t176 * t324;
t145 = -t211 * t320 - t411;
t444 = -t228 + t185;
t104 = t145 * t321 - t325 * t444;
t105 = t145 * t325 + t321 * t444;
t72 = t104 * t319 + t105 * t318;
t446 = pkin(2) * t72 + pkin(3) * t104;
t327 = qJD(2) ^ 2;
t442 = -t313 - t327;
t264 = t266 ^ 2;
t265 = t268 ^ 2;
t289 = t291 ^ 2;
t376 = qJD(6) * t252;
t244 = -0.2e1 * t376;
t341 = -t455 - t80 + t456;
t53 = t244 + t341;
t438 = pkin(5) * t53;
t437 = pkin(8) * t92;
t138 = t200 * t320 + t409;
t435 = pkin(4) * t138;
t412 = t176 * t320;
t144 = t211 * t324 - t412;
t434 = pkin(4) * t144;
t433 = pkin(4) * t321;
t432 = pkin(5) * t172;
t431 = pkin(8) * t100;
t430 = pkin(8) * t104;
t119 = -t169 * t320 - t172 * t324;
t429 = pkin(9) * t119;
t428 = pkin(9) * t138;
t427 = pkin(9) * t144;
t425 = qJ(3) * t59;
t424 = qJ(3) * t68;
t423 = qJ(3) * t72;
t129 = t178 * t321 - t325 * t329;
t87 = -t129 * t325 + t130 * t321;
t422 = t318 * t87;
t421 = t319 * t87;
t420 = t320 * t53;
t419 = t324 * t53;
t114 = -t373 * pkin(4) - t439 * pkin(9) + t234 * t268 + t129;
t418 = -pkin(4) * t114 + pkin(9) * t43;
t60 = -t318 * t92 + t319 * t93;
t417 = pkin(7) * (-t322 * t59 + t326 * t60) - pkin(1) * t119;
t69 = -t100 * t318 + t101 * t319;
t416 = pkin(7) * (-t322 * t68 + t326 * t69) - pkin(1) * t138;
t73 = -t104 * t318 + t105 * t319;
t415 = pkin(7) * (-t322 * t72 + t326 * t73) - pkin(1) * t144;
t160 = -t205 * t319 + t206 * t318;
t413 = t160 * t322;
t408 = t204 * t321;
t407 = t204 * t325;
t232 = t236 + t373;
t406 = t232 * t321;
t405 = t232 * t325;
t404 = t249 * t318;
t403 = t249 * t319;
t402 = t263 * t320;
t401 = t263 * t324;
t272 = qJDD(2) - t277;
t399 = t272 * t318;
t398 = t272 * t319;
t396 = t315 * t321;
t395 = t315 * t325;
t110 = t320 * t114;
t305 = t326 * t393;
t302 = qJDD(2) + t305;
t394 = t322 * t302;
t111 = t324 * t114;
t390 = t326 * (qJDD(2) - t305);
t389 = -pkin(4) * t199 + pkin(9) * t121;
t388 = -pkin(4) * t168 + pkin(9) * t139;
t387 = -pkin(4) * t444 + pkin(9) * t145;
t382 = qJD(2) * t291;
t381 = qJD(2) * t318;
t380 = qJD(2) * t319;
t372 = -0.2e1 * t378;
t371 = t321 * t221;
t370 = t325 * t221;
t369 = t110 + t387;
t368 = -t111 + t388;
t367 = -pkin(4) * t325 - pkin(3);
t366 = -pkin(2) * t119 + qJ(3) * t60;
t365 = -pkin(2) * t138 + qJ(3) * t69;
t364 = -pkin(2) * t144 + qJ(3) * t73;
t363 = -pkin(3) * t138 + pkin(8) * t101;
t360 = -pkin(3) * t144 + pkin(8) * t105;
t88 = t129 * t321 + t325 * t130;
t161 = t205 * t318 + t319 * t206;
t281 = g(3) * t326 + t397;
t282 = t391 - t426;
t355 = t322 * t281 + t326 * t282;
t48 = -qJ(6) * t169 + (-t199 - t247) * pkin(5) + t342;
t245 = 0.2e1 * t376;
t50 = t245 - t341 + t455;
t354 = t320 * t50 + t324 * t48 + t389;
t353 = t389 + t43;
t123 = -pkin(5) * t444 - qJ(6) * t176;
t84 = -t184 * pkin(5) - t247 * qJ(6) + t222 * t252 + qJDD(6) + t114;
t77 = -qJ(6) * t211 + t84;
t352 = t324 * t123 + t320 * t77 + t387;
t42 = t320 * t81 - t324 * t80;
t56 = -pkin(5) * t247 + t342;
t26 = t324 * t56 - t420;
t37 = -pkin(5) * t84 + qJ(6) * t56;
t345 = -pkin(4) * t84 + pkin(9) * t26 - qJ(6) * t420 + t324 * t37;
t255 = t278 + t382;
t64 = -pkin(5) * t168 + qJ(6) * t200 - t84;
t343 = -qJ(6) * t410 + t324 * t64 + t388;
t339 = (-qJD(4) + t315) * t268 - t356;
t337 = t341 + t456;
t316 = t322 ^ 2;
t312 = t316 * t328;
t301 = t311 - 0.2e1 * t362;
t298 = t310 + 0.2e1 * t361;
t295 = pkin(7) * t328 + t346;
t285 = -t289 - t327;
t284 = -t289 + t327;
t283 = t288 - t327;
t270 = -t327 - t288;
t260 = -t265 + t439;
t259 = t264 - t439;
t258 = -t265 - t439;
t256 = t383 + t279;
t254 = -t278 + t382;
t253 = -t288 - t289;
t240 = -t285 * t318 - t398;
t239 = t285 * t319 - t399;
t238 = t270 * t319 - t454;
t237 = t270 * t318 + t453;
t235 = t265 - t264;
t230 = -t439 - t264;
t226 = -t248 + t262;
t225 = t247 - t262;
t224 = (-t266 * t325 + t268 * t321) * t315;
t223 = (-t266 * t321 - t268 * t325) * t315;
t219 = t248 - t247;
t218 = t255 * t319 - t257 * t318;
t217 = t255 * t318 + t257 * t319;
t212 = -t264 - t265;
t210 = t259 * t325 - t406;
t209 = -t260 * t321 + t451;
t208 = t259 * t321 + t405;
t207 = t260 * t325 + t452;
t203 = -t258 * t321 - t405;
t202 = t258 * t325 - t406;
t196 = -t216 - t400;
t192 = (qJD(4) + t315) * t268 + t356;
t191 = t216 * t325 - t268 * t396;
t190 = t216 * t321 + t268 * t395;
t189 = -t215 * t321 + t266 * t395;
t188 = t215 * t325 + t266 * t396;
t187 = t230 * t325 - t452;
t186 = t230 * t321 + t451;
t180 = (-t250 * t324 + t252 * t320) * t263;
t179 = (-t250 * t320 - t252 * t324) * t263;
t165 = t185 * t324 - t252 * t402;
t164 = t185 * t320 + t252 * t401;
t163 = -t184 * t320 + t250 * t401;
t162 = t184 * t324 + t250 * t402;
t159 = -pkin(8) * t202 - t407;
t158 = -t202 * t318 + t203 * t319;
t157 = t202 * t319 + t203 * t318;
t156 = t180 * t325 + t214 * t321;
t155 = t180 * t321 - t214 * t325;
t154 = t225 * t324 - t412;
t153 = -t226 * t320 + t409;
t152 = t225 * t320 + t411;
t151 = t226 * t324 + t410;
t150 = -t196 * t321 + t325 * t339;
t149 = -t192 * t325 - t321 * t348;
t148 = t196 * t325 + t321 * t339;
t147 = -t192 * t321 + t325 * t348;
t146 = -pkin(8) * t186 - t408;
t141 = -t186 * t318 + t187 * t319;
t140 = t186 * t319 + t187 * t318;
t135 = t165 * t325 + t371;
t134 = t163 * t325 - t371;
t133 = t165 * t321 - t370;
t132 = t163 * t321 + t370;
t131 = -pkin(3) * t348 + pkin(8) * t203 - t408;
t124 = -pkin(3) * t192 + pkin(8) * t187 + t407;
t120 = -t168 * t324 - t320 * t444;
t118 = -t168 * t320 + t324 * t444;
t109 = t154 * t325 - t169 * t321;
t108 = t153 * t325 + t172 * t321;
t107 = t154 * t321 + t169 * t325;
t106 = t153 * t321 - t172 * t325;
t97 = -t148 * t318 + t150 * t319;
t96 = t148 * t319 + t150 * t318;
t95 = t120 * t325 + t219 * t321;
t94 = t120 * t321 - t219 * t325;
t90 = pkin(8) * t93;
t89 = -pkin(4) * t119 + t432;
t86 = t111 - t427;
t85 = t110 - t428;
t82 = pkin(3) * t204 + pkin(8) * t88;
t75 = -pkin(8) * t148 - t87;
t74 = t322 * (-t155 * t318 + t156 * t319) + t326 * (t155 * t319 + t156 * t318);
t65 = -pkin(3) * t212 + pkin(8) * t150 + t88;
t62 = t81 - t434;
t61 = t80 - t435;
t55 = t322 * (-t133 * t318 + t135 * t319) + t326 * (t133 * t319 + t135 * t318);
t54 = t322 * (-t132 * t318 + t134 * t319) + t326 * (t132 * t319 + t134 * t318);
t52 = t319 * t88 - t422;
t51 = t318 * t88 + t421;
t46 = -t123 * t320 + t324 * t77 - t427;
t45 = -t434 - t450;
t44 = -qJ(6) * t409 - t320 * t64 - t428;
t40 = t245 - t337 - t435;
t39 = t322 * (-t107 * t318 + t109 * t319) + t326 * (t107 * t319 + t109 * t318);
t38 = t322 * (-t106 * t318 + t108 * t319) + t326 * (t106 * t319 + t108 * t318);
t33 = -t42 - t429;
t32 = t322 * (-t318 * t94 + t319 * t95) + t326 * (t318 * t95 + t319 * t94);
t31 = t114 * t321 + t325 * t43;
t30 = -t114 * t325 + t321 * t43;
t28 = -t321 * t62 + t325 * t86 - t430;
t27 = -t321 * t61 + t325 * t85 - t431;
t25 = t320 * t56 + t419;
t23 = t321 * t86 + t325 * t62 + t360;
t22 = t321 * t85 + t325 * t61 + t363;
t21 = t119 * t433 + t325 * t33 - t437;
t20 = t26 * t325 + t321 * t84;
t19 = t26 * t321 - t325 * t84;
t18 = -t320 * t48 + t324 * t50 - t429;
t17 = t119 * t367 + t321 * t33 + t90;
t16 = -t321 * t45 + t325 * t46 - t430;
t15 = -pkin(4) * t25 - t438;
t14 = -t321 * t40 + t325 * t44 - t431;
t13 = t321 * t46 + t325 * t45 + t360;
t12 = t321 * t44 + t325 * t40 + t363;
t11 = -t30 * t318 + t31 * t319;
t10 = t30 * t319 + t31 * t318;
t9 = t18 * t325 - t321 * t89 - t437;
t8 = -pkin(3) * t119 + t18 * t321 + t325 * t89 + t90;
t7 = -pkin(8) * t30 + (-pkin(9) * t325 + t433) * t42;
t6 = -pkin(9) * t25 - qJ(6) * t419 - t320 * t37;
t5 = -t19 * t318 + t20 * t319;
t4 = t19 * t319 + t20 * t318;
t3 = pkin(8) * t31 + (-pkin(9) * t321 + t367) * t42;
t2 = -pkin(8) * t19 - t15 * t321 + t325 * t6;
t1 = -pkin(3) * t25 + pkin(8) * t20 + t15 * t325 + t321 * t6;
t24 = [0, 0, 0, 0, 0, qJDD(1), t358, t347, 0, 0, (t299 + t361) * t322, t298 * t326 + t301 * t322, t394 + t326 * (-t312 + t327), (t300 - t362) * t326, t322 * (t313 - t327) + t390, 0, t326 * t295 + pkin(1) * t301 + pkin(7) * (t326 * t442 - t394), -t322 * t295 - pkin(1) * t298 + pkin(7) * (-t390 - t322 * (-t312 - t327)), pkin(1) * (t312 + t313) + (t316 + t317) * t414 + t355, pkin(1) * t295 + pkin(7) * t355, t322 * (t279 * t319 - t291 * t381) + t326 * (t279 * t318 + t291 * t380), t322 * (-t254 * t319 - t256 * t318) + t326 * (-t254 * t318 + t256 * t319), t322 * (-t284 * t318 + t453) + t326 * (t284 * t319 + t454), t322 * (-t278 * t318 - t290 * t380) + t326 * (t278 * t319 - t290 * t381), t322 * (t283 * t319 - t399) + t326 * (t283 * t318 + t398), (t322 * (t290 * t319 + t291 * t318) + t326 * (t290 * t318 - t291 * t319)) * qJD(2), t322 * (-qJ(3) * t237 - t404) + t326 * (-pkin(2) * t254 + qJ(3) * t238 + t403) - pkin(1) * t254 + pkin(7) * (-t237 * t322 + t238 * t326), t322 * (-qJ(3) * t239 - t403) + t326 * (-pkin(2) * t256 + qJ(3) * t240 - t404) - pkin(1) * t256 + pkin(7) * (-t239 * t322 + t240 * t326), t322 * (-qJ(3) * t217 - t160) + t326 * (-pkin(2) * t253 + qJ(3) * t218 + t161) - pkin(1) * t253 + pkin(7) * (-t217 * t322 + t218 * t326), -qJ(3) * t413 + t326 * (pkin(2) * t249 + qJ(3) * t161) + pkin(1) * t249 + pkin(7) * (t161 * t326 - t413), t322 * (-t190 * t318 + t191 * t319) + t326 * (t190 * t319 + t191 * t318), t322 * (-t147 * t318 + t149 * t319) + t326 * (t147 * t319 + t149 * t318), t322 * (-t207 * t318 + t209 * t319) + t326 * (t207 * t319 + t209 * t318), t322 * (-t188 * t318 + t189 * t319) + t326 * (t188 * t319 + t189 * t318), t322 * (-t208 * t318 + t210 * t319) + t326 * (t208 * t319 + t210 * t318), t322 * (-t223 * t318 + t224 * t319) + t326 * (t223 * t319 + t224 * t318), t322 * (-qJ(3) * t140 - t124 * t318 + t146 * t319) + t326 * (-pkin(2) * t192 + qJ(3) * t141 + t124 * t319 + t146 * t318) - pkin(1) * t192 + pkin(7) * (-t140 * t322 + t141 * t326), t322 * (-qJ(3) * t157 - t131 * t318 + t159 * t319) + t326 * (-pkin(2) * t348 + qJ(3) * t158 + t131 * t319 + t159 * t318) - pkin(1) * t348 + pkin(7) * (-t157 * t322 + t158 * t326), t322 * (-qJ(3) * t96 - t318 * t65 + t319 * t75) + t326 * (-pkin(2) * t212 + qJ(3) * t97 + t318 * t75 + t319 * t65) - pkin(1) * t212 + pkin(7) * (-t322 * t96 + t326 * t97), t322 * (-pkin(8) * t421 - qJ(3) * t51 - t318 * t82) + t326 * (pkin(2) * t204 - pkin(8) * t422 + qJ(3) * t52 + t319 * t82) + pkin(1) * t204 + pkin(7) * (-t322 * t51 + t326 * t52), t55, t32, t38, t54, t39, t74, t322 * (-t22 * t318 + t27 * t319 - t424) + t326 * (t22 * t319 + t27 * t318 + t365) + t416, t322 * (-t23 * t318 + t28 * t319 - t423) + t326 * (t23 * t319 + t28 * t318 + t364) + t415, t322 * (-t17 * t318 + t21 * t319 - t425) + t326 * (t17 * t319 + t21 * t318 + t366) + t417, t322 * (-qJ(3) * t10 - t3 * t318 + t319 * t7) + t326 * (-pkin(2) * t42 + qJ(3) * t11 + t3 * t319 + t318 * t7) - pkin(1) * t42 + pkin(7) * (-t10 * t322 + t11 * t326), t55, t32, t38, t54, t39, t74, t322 * (-t12 * t318 + t14 * t319 - t424) + t326 * (t12 * t319 + t14 * t318 + t365) + t416, t322 * (-t13 * t318 + t16 * t319 - t423) + t326 * (t13 * t319 + t16 * t318 + t364) + t415, t322 * (-t318 * t8 + t319 * t9 - t425) + t326 * (t318 * t9 + t319 * t8 + t366) + t417, t322 * (-qJ(3) * t4 - t1 * t318 + t2 * t319) + t326 * (-pkin(2) * t25 + qJ(3) * t5 + t1 * t319 + t2 * t318) - pkin(1) * t25 + pkin(7) * (-t322 * t4 + t326 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t305, t312 - t313, t310, t305, t311, qJDD(2), -t281, -t282, 0, 0, -t277, t289 - t288, -t257, t277, t255, qJDD(2), -t318 * t282 - t319 * t281 + t372 + (-t318 * (t300 + t362) + t319 * (-t299 + t361)) * qJ(3) + (t319 * t302 - t318 * t442 + t237) * pkin(2), pkin(2) * t239 - t206, pkin(2) * t217, pkin(2) * t160, t236, t235, -t196, -t236, t339, t373, pkin(2) * t140 + pkin(3) * t186 - t129, pkin(2) * t157 - t392 - t321 * (-t318 * t331 + t319 * t332 + t372 + t440) + (-t321 * t441 + t202) * pkin(3), pkin(2) * t96 + pkin(3) * t148, pkin(2) * t51 + pkin(3) * t87, t164, t118, t151, t162, t152, t179, t368 + t447, t369 + t446, t353 + t448, pkin(2) * t10 + pkin(3) * t30 + t418, t164, t118, t151, t162, t152, t179, t343 + t447, t352 + t446, t354 + t448, pkin(2) * t4 + pkin(3) * t19 + t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, t256, t253, -t249, 0, 0, 0, 0, 0, 0, t192, t348, t212, -t204, 0, 0, 0, 0, 0, 0, t138, t144, t119, t42, 0, 0, 0, 0, 0, 0, t138, t144, t119, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236, t235, -t196, -t236, t339, t373, -t129, -t130, 0, 0, t164, t118, t151, t162, t152, t179, t368, t369, t353, t418, t164, t118, t151, t162, t152, t179, t343, t352, t354, t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, t219, t172, -t221, -t169, t214, -t80, -t81, 0, 0, t221, t219, t172, -t221, -t169, t214, t244 + t337, t450, -t432, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, t444, t199, t84;];
tauJ_reg  = t24;
