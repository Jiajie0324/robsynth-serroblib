% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:19:48
% EndTime: 2019-05-06 17:20:17
% DurationCPUTime: 25.81s
% Computational Cost: add. (190762->809), mult. (444895->1180), div. (0->0), fcn. (335296->10), ass. (0->580)
t1035 = qJD(1) * qJD(2);
t980 = cos(qJ(2));
t1017 = t980 * t1035;
t976 = sin(qJ(2));
t1034 = qJDD(1) * t976;
t942 = t1017 + t1034;
t1018 = t976 * t1035;
t966 = t980 * qJDD(1);
t943 = t966 - t1018;
t972 = sin(pkin(10));
t973 = cos(pkin(10));
t1007 = t942 * t972 - t973 * t943;
t906 = t973 * t942 + t972 * t943;
t975 = sin(qJ(4));
t979 = cos(qJ(4));
t1008 = t1007 * t979 + t975 * t906;
t1042 = qJD(1) * t976;
t932 = qJD(1) * t973 * t980 - t1042 * t972;
t933 = (t972 * t980 + t973 * t976) * qJD(1);
t896 = t932 * t975 + t933 * t979;
t818 = -t896 * qJD(4) - t1008;
t817 = qJDD(5) - t818;
t1030 = qJD(2) + qJD(4);
t974 = sin(qJ(5));
t978 = cos(qJ(5));
t866 = -t1030 * t978 + t974 * t896;
t868 = t1030 * t974 + t978 * t896;
t825 = t868 * t866;
t763 = t817 - t825;
t1067 = t763 * t974;
t1066 = t763 * t978;
t971 = t980 ^ 2;
t983 = qJD(1) ^ 2;
t995 = qJD(2) * pkin(2) - qJ(3) * t1042;
t977 = sin(qJ(1));
t981 = cos(qJ(1));
t952 = t977 * g(1) - t981 * g(2);
t996 = qJDD(1) * pkin(1) + t952;
t865 = t943 * pkin(2) - t995 * t1042 - qJDD(3) + (qJ(3) * t971 + pkin(7)) * t983 + t996;
t1102 = t763 * pkin(5);
t904 = t932 * t933;
t1097 = qJDD(2) + t904;
t1106 = t1097 * t972;
t1105 = t1097 * t973;
t1029 = qJDD(2) + qJDD(4);
t894 = -t979 * t932 + t933 * t975;
t840 = t896 * t894;
t1098 = -t840 + t1029;
t1104 = t1098 * t975;
t1103 = t1098 * t979;
t1002 = qJD(2) * pkin(3) - pkin(8) * t933;
t930 = t932 ^ 2;
t800 = -pkin(3) * t1007 + t930 * pkin(8) - t933 * t1002 + t865;
t1027 = t1030 ^ 2;
t819 = -t894 * qJD(4) - t1007 * t975 + t979 * t906;
t883 = t1030 * t894;
t1101 = t819 - t883;
t779 = -t866 * qJD(5) + t1029 * t974 + t978 * t819;
t891 = qJD(5) + t894;
t832 = t891 * t866;
t1100 = -t832 + t779;
t968 = t971 * t983;
t982 = qJD(2) ^ 2;
t958 = -t968 - t982;
t1048 = t976 * t983;
t953 = g(1) * t981 + g(2) * t977;
t936 = -pkin(1) * t983 + qJDD(1) * pkin(7) - t953;
t1049 = t976 * t936;
t1099 = (pkin(2) * t1048 + qJ(3) * t1035 - g(3)) * t980 + qJDD(2) * pkin(2) - t942 * qJ(3) - t1049;
t1009 = -t978 * t1029 + t974 * t819;
t751 = (qJD(5) - t891) * t868 + t1009;
t863 = t866 ^ 2;
t864 = t868 ^ 2;
t890 = t891 ^ 2;
t892 = t894 ^ 2;
t893 = t896 ^ 2;
t931 = t933 ^ 2;
t1096 = 2 * qJD(3);
t796 = -t890 - t863;
t710 = t796 * t974 + t1066;
t1095 = pkin(4) * t710;
t764 = t817 + t825;
t1069 = t764 * t974;
t808 = -t864 - t890;
t715 = t808 * t978 - t1069;
t1094 = pkin(4) * t715;
t1093 = pkin(4) * t975;
t755 = -t832 - t779;
t689 = -t751 * t978 - t755 * t974;
t795 = -t863 - t864;
t651 = t689 * t975 - t795 * t979;
t652 = t689 * t979 + t795 * t975;
t599 = t651 * t973 + t652 * t972;
t600 = -t651 * t972 + t652 * t973;
t549 = -t599 * t976 + t600 * t980;
t687 = -t751 * t974 + t755 * t978;
t528 = t549 * t977 - t687 * t981;
t1092 = pkin(6) * t528;
t711 = t796 * t978 - t1067;
t750 = (qJD(5) + t891) * t868 + t1009;
t662 = t711 * t975 - t750 * t979;
t663 = t711 * t979 + t750 * t975;
t612 = t662 * t973 + t663 * t972;
t613 = -t662 * t972 + t663 * t973;
t562 = -t612 * t976 + t613 * t980;
t542 = t562 * t977 - t710 * t981;
t1091 = pkin(6) * t542;
t1068 = t764 * t978;
t716 = -t808 * t974 - t1068;
t665 = -t1100 * t979 + t716 * t975;
t666 = t1100 * t975 + t716 * t979;
t615 = t665 * t973 + t666 * t972;
t616 = -t665 * t972 + t666 * t973;
t565 = -t615 * t976 + t616 * t980;
t545 = t565 * t977 - t715 * t981;
t1090 = pkin(6) * t545;
t548 = t599 * t980 + t600 * t976;
t1089 = pkin(7) * t548;
t561 = t612 * t980 + t613 * t976;
t1088 = pkin(7) * t561;
t564 = t615 * t980 + t616 * t976;
t1087 = pkin(7) * t564;
t1086 = pkin(8) * t651;
t1085 = pkin(8) * t662;
t1084 = pkin(8) * t665;
t1083 = pkin(9) * t687;
t1082 = pkin(9) * t710;
t1081 = pkin(9) * t715;
t1080 = qJ(3) * t599;
t1079 = qJ(3) * t612;
t1078 = qJ(3) * t615;
t1037 = qJD(6) * t868;
t920 = -t976 * g(3) + t980 * t936;
t985 = -pkin(2) * t968 + t943 * qJ(3) - qJD(2) * t995 + t920;
t802 = t932 * t1096 + t1099 * t972 + t973 * t985;
t767 = -t930 * pkin(3) - pkin(8) * t1007 - qJD(2) * t1002 + t802;
t1028 = t933 * t1096;
t801 = -t1099 * t973 + t972 * t985 + t1028;
t1041 = qJD(2) * t932;
t873 = -t906 + t1041;
t984 = pkin(3) * t1097 + pkin(8) * t873 - t801;
t698 = t979 * t767 + t975 * t984;
t838 = pkin(4) * t894 - pkin(9) * t896;
t680 = -pkin(4) * t1027 + pkin(9) * t1029 - t894 * t838 + t698;
t1006 = t1030 * t896;
t695 = -t1101 * pkin(9) + (-t818 + t1006) * pkin(4) - t800;
t1044 = -t974 * t680 + t978 * t695;
t1020 = t779 * qJ(6) - t1044;
t994 = -qJ(6) * t832 - t1020;
t587 = -0.2e1 * t1037 + t994 + t1102;
t1077 = t587 * t974;
t1076 = t587 * t978;
t697 = t767 * t975 - t979 * t984;
t636 = -t697 * t979 + t698 * t975;
t1075 = t636 * t972;
t1074 = t636 * t973;
t679 = -t1029 * pkin(4) - t1027 * pkin(9) + t838 * t896 + t697;
t1073 = t679 * t974;
t1072 = t679 * t978;
t738 = -t801 * t973 + t802 * t972;
t1071 = t738 * t976;
t1070 = t738 * t980;
t1065 = t800 * t975;
t1064 = t800 * t979;
t836 = t840 + t1029;
t1063 = t836 * t975;
t1062 = t836 * t979;
t1061 = t865 * t972;
t1060 = t865 * t973;
t1059 = t891 * t974;
t1058 = t891 * t978;
t900 = qJDD(2) - t904;
t1057 = t900 * t972;
t1056 = t900 * t973;
t935 = t983 * pkin(7) + t996;
t1055 = t935 * t976;
t1054 = t935 * t980;
t959 = t980 * t1048;
t950 = qJDD(2) + t959;
t1053 = t950 * t976;
t951 = qJDD(2) - t959;
t1052 = t951 * t976;
t1051 = t951 * t980;
t970 = t976 ^ 2;
t1050 = t970 * t983;
t1047 = -pkin(1) * t687 + pkin(7) * t549;
t1046 = -pkin(1) * t710 + pkin(7) * t562;
t1045 = -pkin(1) * t715 + pkin(7) * t565;
t630 = t978 * t680 + t974 * t695;
t1043 = t970 + t971;
t1040 = qJD(2) * t933;
t1039 = qJD(2) * t972;
t1038 = qJD(2) * t973;
t1033 = qJDD(1) * t977;
t1032 = qJDD(1) * t981;
t1031 = qJDD(2) * t981;
t1026 = t975 * t825;
t1025 = t979 * t825;
t1024 = t977 * t840;
t1023 = t981 * t840;
t1022 = t977 * t904;
t1021 = t981 * t904;
t1019 = -pkin(4) * t979 - pkin(3);
t1016 = -pkin(2) * t687 + qJ(3) * t600;
t1015 = -pkin(2) * t710 + qJ(3) * t613;
t1014 = -pkin(2) * t715 + qJ(3) * t616;
t1013 = -pkin(3) * t710 + pkin(8) * t663;
t1012 = -pkin(3) * t715 + pkin(8) * t666;
t637 = t697 * t975 + t979 * t698;
t739 = t801 * t972 + t973 * t802;
t919 = t980 * g(3) + t1049;
t859 = t919 * t976 + t980 * t920;
t912 = -t952 * t977 - t981 * t953;
t1005 = t977 * t959;
t1004 = t981 * t959;
t947 = -t977 * t983 + t1032;
t1003 = -pkin(6) * t947 - g(3) * t977;
t1000 = t975 * t883;
t999 = t975 * t1006;
t998 = t979 * t883;
t997 = t979 * t1006;
t573 = t1044 * t978 + t630 * t974;
t574 = -t1044 * t974 + t630 * t978;
t858 = t919 * t980 - t920 * t976;
t911 = t952 * t981 - t953 * t977;
t790 = qJD(2) * t896 - t1008;
t871 = -t1007 + t1040;
t778 = -qJD(5) * t868 - t1009;
t826 = pkin(5) * t891 - qJ(6) * t868;
t993 = t778 * qJ(6) - 0.2e1 * qJD(6) * t866 - t891 * t826 + t630;
t989 = -pkin(1) * t548 - pkin(2) * t599 - pkin(3) * t651 + pkin(4) * t795 - pkin(9) * t689;
t988 = -pkin(1) * t561 - pkin(2) * t612 - pkin(3) * t662 + pkin(4) * t750 - pkin(9) * t711;
t987 = -pkin(1) * t564 - pkin(2) * t615 - pkin(3) * t665 + pkin(4) * t1100 - pkin(9) * t716;
t633 = -t778 * pkin(5) - t863 * qJ(6) + t826 * t868 + qJDD(6) + t679;
t965 = t977 * qJDD(2);
t957 = t968 - t982;
t956 = -t982 - t1050;
t955 = t982 - t1050;
t949 = t968 - t1050;
t948 = t968 + t1050;
t946 = t981 * t983 + t1033;
t945 = t1043 * qJDD(1);
t944 = t966 - 0.2e1 * t1018;
t941 = 0.2e1 * t1017 + t1034;
t939 = t980 * t950;
t938 = t1043 * t1035;
t929 = -pkin(6) * t946 + g(3) * t981;
t925 = -t931 - t982;
t924 = -t931 + t982;
t923 = t930 - t982;
t922 = -t1035 * t970 + t942 * t980;
t921 = -t1035 * t971 - t943 * t976;
t918 = -t956 * t976 - t1051;
t917 = -t955 * t976 + t939;
t916 = t958 * t980 - t1053;
t915 = t957 * t980 - t1052;
t914 = t956 * t980 - t1052;
t913 = t958 * t976 + t939;
t909 = t945 * t981 - t948 * t977;
t908 = t945 * t977 + t948 * t981;
t907 = -t941 * t976 + t944 * t980;
t903 = -t931 + t930;
t898 = -t982 - t930;
t889 = (t932 * t973 + t933 * t972) * qJD(2);
t888 = (t932 * t972 - t933 * t973) * qJD(2);
t887 = t918 * t981 + t941 * t977;
t886 = t916 * t981 - t944 * t977;
t885 = t918 * t977 - t941 * t981;
t884 = t916 * t977 + t944 * t981;
t881 = -t893 + t1027;
t880 = t892 - t1027;
t879 = -pkin(7) * t914 - t1054;
t878 = -pkin(7) * t913 - t1055;
t877 = -t893 - t1027;
t876 = -pkin(1) * t914 + t920;
t875 = -pkin(1) * t913 + t919;
t872 = t906 + t1041;
t870 = t1007 + t1040;
t869 = -t930 - t931;
t861 = 0.2e1 * t1037;
t856 = -t1039 * t933 + t906 * t973;
t855 = t1038 * t933 + t906 * t972;
t854 = t1007 * t972 - t1038 * t932;
t853 = -t1007 * t973 - t1039 * t932;
t850 = -t925 * t972 - t1056;
t849 = -t924 * t972 + t1105;
t848 = t923 * t973 - t1057;
t847 = t925 * t973 - t1057;
t846 = t924 * t973 + t1106;
t845 = t923 * t972 + t1056;
t844 = t859 * t981 - t935 * t977;
t843 = t859 * t977 + t935 * t981;
t842 = t898 * t973 - t1106;
t841 = t898 * t972 + t1105;
t839 = -t893 + t892;
t834 = -t1027 - t892;
t831 = -t864 + t890;
t830 = t863 - t890;
t829 = -t888 * t976 + t889 * t980;
t828 = -t998 + t999;
t827 = -t1000 - t997;
t824 = -t864 + t863;
t823 = t871 * t973 - t873 * t972;
t822 = -t870 * t973 - t872 * t972;
t821 = t871 * t972 + t873 * t973;
t820 = -t870 * t972 + t872 * t973;
t816 = -qJ(3) * t847 - t1060;
t815 = -t892 - t893;
t814 = -t855 * t976 + t856 * t980;
t813 = -t853 * t976 + t854 * t980;
t812 = -t847 * t976 + t850 * t980;
t811 = -t846 * t976 + t849 * t980;
t810 = -t845 * t976 + t848 * t980;
t809 = t847 * t980 + t850 * t976;
t807 = -qJ(3) * t841 - t1061;
t806 = t880 * t979 - t1063;
t805 = -t881 * t975 + t1103;
t804 = t880 * t975 + t1062;
t803 = t881 * t979 + t1104;
t799 = -t877 * t975 - t1062;
t798 = t877 * t979 - t1063;
t793 = -t819 - t883;
t789 = (0.2e1 * qJD(4) + qJD(2)) * t896 + t1008;
t788 = t979 * t819 - t999;
t787 = t975 * t819 + t997;
t786 = -t975 * t818 + t998;
t785 = t979 * t818 + t1000;
t784 = -t841 * t976 + t842 * t980;
t783 = t841 * t980 + t842 * t976;
t782 = -pkin(2) * t872 + qJ(3) * t850 - t1061;
t781 = t834 * t979 - t1104;
t780 = t834 * t975 + t1103;
t774 = -pkin(2) * t870 + qJ(3) * t842 + t1060;
t773 = t812 * t981 + t872 * t977;
t772 = t812 * t977 - t872 * t981;
t771 = (-t866 * t978 + t868 * t974) * t891;
t770 = (t866 * t974 + t868 * t978) * t891;
t769 = -t827 * t972 + t828 * t973;
t768 = t827 * t973 + t828 * t972;
t762 = t784 * t981 + t870 * t977;
t761 = -t821 * t976 + t823 * t980;
t760 = -t820 * t976 + t822 * t980;
t759 = t784 * t977 - t870 * t981;
t758 = t821 * t980 + t823 * t976;
t749 = -t1059 * t868 + t779 * t978;
t748 = -t1058 * t868 - t779 * t974;
t747 = t1058 * t866 - t778 * t974;
t746 = -t1059 * t866 - t778 * t978;
t745 = t761 * t981 + t869 * t977;
t744 = t761 * t977 - t869 * t981;
t743 = -t804 * t972 + t806 * t973;
t742 = -t803 * t972 + t805 * t973;
t741 = t804 * t973 + t806 * t972;
t740 = t803 * t973 + t805 * t972;
t737 = -pkin(8) * t798 - t1064;
t736 = -t798 * t972 + t799 * t973;
t735 = t798 * t973 + t799 * t972;
t734 = t771 * t979 + t817 * t975;
t733 = t771 * t975 - t817 * t979;
t732 = t830 * t978 - t1069;
t731 = -t831 * t974 + t1066;
t730 = -t830 * t974 - t1068;
t729 = -t831 * t978 - t1067;
t728 = t790 * t979 - t793 * t975;
t727 = -t1101 * t975 - t789 * t979;
t726 = t790 * t975 + t793 * t979;
t725 = t1101 * t979 - t789 * t975;
t724 = -pkin(8) * t780 - t1065;
t723 = -t787 * t972 + t788 * t973;
t722 = -t785 * t972 + t786 * t973;
t721 = t787 * t973 + t788 * t972;
t720 = t785 * t973 + t786 * t972;
t719 = -pkin(1) * t758 - pkin(2) * t821;
t718 = -pkin(1) * t809 - pkin(2) * t847 + t802;
t717 = pkin(2) * t865 + qJ(3) * t739;
t713 = -t780 * t972 + t781 * t973;
t712 = t780 * t973 + t781 * t972;
t708 = t749 * t979 + t1026;
t707 = t747 * t979 - t1026;
t706 = t749 * t975 - t1025;
t705 = t747 * t975 + t1025;
t704 = -pkin(1) * t783 + t972 * t920 + t973 * t919 + t1028 + (t972 * (t943 + t1018) - t973 * (-t942 + t1017)) * qJ(3) + (-t973 * t950 + t958 * t972 - t841) * pkin(2);
t703 = -qJ(3) * t821 - t738;
t702 = -t768 * t976 + t769 * t980;
t701 = -pkin(7) * t809 - t782 * t976 + t816 * t980;
t700 = -pkin(3) * t1101 + pkin(8) * t799 - t1065;
t699 = -pkin(2) * t869 + qJ(3) * t823 + t739;
t692 = -pkin(3) * t789 + pkin(8) * t781 + t1064;
t691 = -pkin(5) * t1100 - qJ(6) * t764;
t690 = -pkin(7) * t783 - t774 * t976 + t807 * t980;
t688 = -t1100 * t974 - t750 * t978;
t686 = -t1100 * t978 + t750 * t974;
t684 = -t741 * t976 + t743 * t980;
t683 = -t740 * t976 + t742 * t980;
t682 = t739 * t980 - t1071;
t681 = t739 * t976 + t1070;
t676 = -t735 * t976 + t736 * t980;
t675 = t735 * t980 + t736 * t976;
t674 = t732 * t979 - t751 * t975;
t673 = t731 * t979 - t755 * t975;
t672 = t732 * t975 + t751 * t979;
t671 = t731 * t975 + t755 * t979;
t670 = t682 * t981 - t865 * t977;
t669 = t682 * t977 + t865 * t981;
t668 = -t733 * t972 + t734 * t973;
t667 = t733 * t973 + t734 * t972;
t660 = -t726 * t972 + t728 * t973;
t659 = -t725 * t972 + t727 * t973;
t658 = t726 * t973 + t728 * t972;
t657 = t725 * t973 + t727 * t972;
t656 = t688 * t979 - t824 * t975;
t655 = t688 * t975 + t824 * t979;
t654 = -t721 * t976 + t723 * t980;
t653 = -t720 * t976 + t722 * t980;
t650 = pkin(8) * t652;
t649 = -t712 * t976 + t713 * t980;
t648 = t712 * t980 + t713 * t976;
t647 = t1101 * t977 + t676 * t981;
t646 = -t1101 * t981 + t676 * t977;
t645 = -t706 * t972 + t708 * t973;
t644 = -t705 * t972 + t707 * t973;
t643 = t706 * t973 + t708 * t972;
t642 = t705 * t973 + t707 * t972;
t641 = -pkin(4) * t687 - pkin(5) * t755;
t640 = -pkin(1) * t681 - pkin(2) * t738;
t639 = t649 * t981 + t789 * t977;
t638 = t649 * t977 - t789 * t981;
t635 = t1072 - t1081;
t634 = t1073 - t1082;
t632 = -qJ(3) * t735 - t700 * t972 + t737 * t973;
t631 = pkin(3) * t800 + pkin(8) * t637;
t628 = -pkin(7) * t758 - t699 * t976 + t703 * t980;
t627 = -qJ(6) * t808 + t633;
t626 = -qJ(3) * t712 - t692 * t972 + t724 * t973;
t625 = -pkin(2) * t1101 + qJ(3) * t736 + t700 * t973 + t737 * t972;
t624 = -t672 * t972 + t674 * t973;
t623 = -t671 * t972 + t673 * t973;
t622 = t672 * t973 + t674 * t972;
t621 = t671 * t973 + t673 * t972;
t620 = -pkin(7) * t681 - qJ(3) * t1070 - t717 * t976;
t619 = -pkin(8) * t726 - t636;
t618 = -t667 * t976 + t668 * t980;
t617 = t667 * t980 + t668 * t976;
t610 = -t658 * t976 + t660 * t980;
t609 = -t657 * t976 + t659 * t980;
t608 = t658 * t980 + t660 * t976;
t607 = -t655 * t972 + t656 * t973;
t606 = t655 * t973 + t656 * t972;
t605 = -pkin(2) * t789 + qJ(3) * t713 + t692 * t973 + t724 * t972;
t604 = -pkin(3) * t815 + pkin(8) * t728 + t637;
t603 = -pkin(5) * t750 + qJ(6) * t796 - t633;
t602 = t630 - t1094;
t601 = -t1044 - t1095;
t597 = t610 * t981 + t815 * t977;
t596 = t610 * t977 - t815 * t981;
t595 = -pkin(1) * t675 - pkin(2) * t735 - pkin(3) * t798 + t698;
t594 = -pkin(5) * t863 + t993;
t593 = t618 * t981 - t770 * t977;
t592 = t618 * t977 + t770 * t981;
t591 = -t643 * t976 + t645 * t980;
t590 = -t642 * t976 + t644 * t980;
t589 = t643 * t980 + t645 * t976;
t588 = t642 * t980 + t644 * t976;
t586 = -pkin(1) * t648 - pkin(2) * t712 - pkin(3) * t780 + t697;
t585 = t637 * t973 - t1075;
t584 = t637 * t972 + t1074;
t583 = t591 * t981 - t748 * t977;
t582 = t590 * t981 - t746 * t977;
t581 = t591 * t977 + t748 * t981;
t580 = t590 * t977 + t746 * t981;
t579 = t861 + (-t755 + t832) * qJ(6) - t1102 + t1020;
t578 = -qJ(6) * t751 + (-t795 - t863) * pkin(5) + t993;
t577 = t627 * t978 - t691 * t974 - t1081;
t576 = -t1094 + (-t808 - t863) * pkin(5) + t993;
t575 = -qJ(6) * t1066 - t603 * t974 - t1082;
t572 = -t1095 + t861 - t994 - 0.2e1 * t1102;
t571 = -pkin(1) * t608 - pkin(2) * t658 - pkin(3) * t726;
t570 = -t622 * t976 + t624 * t980;
t569 = -t621 * t976 + t623 * t980;
t568 = t622 * t980 + t624 * t976;
t567 = t621 * t980 + t623 * t976;
t566 = -pkin(5) * t633 + qJ(6) * t594;
t559 = -t573 - t1083;
t558 = -t606 * t976 + t607 * t980;
t557 = t606 * t980 + t607 * t976;
t556 = t574 * t979 + t679 * t975;
t555 = t574 * t975 - t679 * t979;
t554 = t570 * t981 - t730 * t977;
t553 = t569 * t981 - t729 * t977;
t552 = t570 * t977 + t730 * t981;
t551 = t569 * t977 + t729 * t981;
t550 = -pkin(7) * t675 - t625 * t976 + t632 * t980;
t546 = t565 * t981 + t715 * t977;
t544 = pkin(6) * t546;
t543 = t562 * t981 + t710 * t977;
t541 = pkin(6) * t543;
t540 = -t602 * t975 + t635 * t979 - t1084;
t539 = -t601 * t975 + t634 * t979 - t1085;
t538 = t594 * t978 - t1077;
t537 = t594 * t974 + t1076;
t536 = t558 * t981 - t686 * t977;
t535 = t558 * t977 + t686 * t981;
t534 = -qJ(3) * t658 - t604 * t972 + t619 * t973;
t533 = -pkin(7) * t648 - t605 * t976 + t626 * t980;
t532 = -pkin(2) * t815 + qJ(3) * t660 + t604 * t973 + t619 * t972;
t531 = t602 * t979 + t635 * t975 + t1012;
t530 = t601 * t979 + t634 * t975 + t1013;
t529 = t549 * t981 + t687 * t977;
t527 = pkin(6) * t529;
t526 = -t584 * t976 + t585 * t980;
t525 = t584 * t980 + t585 * t976;
t524 = -pkin(8) * t1074 - qJ(3) * t584 - t631 * t972;
t523 = t526 * t981 - t800 * t977;
t522 = t526 * t977 + t800 * t981;
t521 = pkin(2) * t800 - pkin(8) * t1075 + qJ(3) * t585 + t631 * t973;
t520 = t1093 * t687 + t559 * t979 - t1086;
t519 = t538 * t979 + t633 * t975;
t518 = t538 * t975 - t633 * t979;
t517 = -t578 * t974 + t579 * t978 - t1083;
t516 = t1019 * t687 + t975 * t559 + t650;
t515 = -t576 * t975 + t577 * t979 - t1084;
t514 = -pkin(4) * t537 - pkin(5) * t587;
t513 = -t572 * t975 + t575 * t979 - t1085;
t512 = t576 * t979 + t577 * t975 + t1012;
t511 = t572 * t979 + t575 * t975 + t1013;
t510 = -t555 * t972 + t556 * t973;
t509 = t555 * t973 + t556 * t972;
t508 = t987 - t1073;
t507 = t988 + t1072;
t506 = t517 * t979 - t641 * t975 - t1086;
t505 = -pkin(1) * t525 - pkin(2) * t584 - pkin(3) * t636;
t504 = -pkin(3) * t687 + t517 * t975 + t641 * t979 + t650;
t503 = -t627 * t974 - t691 * t978 + t987;
t502 = qJ(6) * t1067 - t603 * t978 + t988;
t501 = -pkin(8) * t555 + (-pkin(9) * t979 + t1093) * t573;
t500 = -pkin(9) * t537 - qJ(6) * t1076 - t566 * t974;
t499 = -t531 * t972 + t540 * t973 - t1078;
t498 = -t530 * t972 + t539 * t973 - t1079;
t497 = -t574 + t989;
t496 = -pkin(7) * t608 - t532 * t976 + t534 * t980;
t495 = t531 * t973 + t540 * t972 + t1014;
t494 = -t518 * t972 + t519 * t973;
t493 = t518 * t973 + t519 * t972;
t492 = t530 * t973 + t539 * t972 + t1015;
t491 = pkin(8) * t556 + (-pkin(9) * t975 + t1019) * t573;
t490 = -t578 * t978 - t579 * t974 + t989;
t489 = -t516 * t972 + t520 * t973 - t1080;
t488 = t516 * t973 + t520 * t972 + t1016;
t487 = -t509 * t976 + t510 * t980;
t486 = t509 * t980 + t510 * t976;
t485 = -t512 * t972 + t515 * t973 - t1078;
t484 = t512 * t973 + t515 * t972 + t1014;
t483 = -t511 * t972 + t513 * t973 - t1079;
t482 = -pkin(7) * t525 - t521 * t976 + t524 * t980;
t481 = t511 * t973 + t513 * t972 + t1015;
t480 = t487 * t981 + t573 * t977;
t479 = t487 * t977 - t573 * t981;
t478 = -t504 * t972 + t506 * t973 - t1080;
t477 = t504 * t973 + t506 * t972 + t1016;
t476 = -pkin(8) * t518 + t500 * t979 - t514 * t975;
t475 = -t493 * t976 + t494 * t980;
t474 = t493 * t980 + t494 * t976;
t473 = -t495 * t976 + t499 * t980 - t1087;
t472 = -t492 * t976 + t498 * t980 - t1088;
t471 = -pkin(3) * t537 + pkin(8) * t519 + t500 * t975 + t514 * t979;
t470 = t475 * t981 + t537 * t977;
t469 = t475 * t977 - t537 * t981;
t468 = -qJ(3) * t509 - t491 * t972 + t501 * t973;
t467 = -pkin(1) * t486 - pkin(2) * t509 - pkin(3) * t555 + pkin(4) * t679 - pkin(9) * t574;
t466 = -t488 * t976 + t489 * t980 - t1089;
t465 = -pkin(2) * t573 + qJ(3) * t510 + t491 * t973 + t501 * t972;
t464 = -t484 * t976 + t485 * t980 - t1087;
t463 = -t481 * t976 + t483 * t980 - t1088;
t462 = -t477 * t976 + t478 * t980 - t1089;
t461 = -pkin(1) * t474 - pkin(2) * t493 - pkin(3) * t518 + pkin(4) * t633 - pkin(9) * t538 + qJ(6) * t1077 - t566 * t978;
t460 = -qJ(3) * t493 - t471 * t972 + t476 * t973;
t459 = -pkin(2) * t537 + qJ(3) * t494 + t471 * t973 + t476 * t972;
t458 = -pkin(7) * t486 - t465 * t976 + t468 * t980;
t457 = -pkin(7) * t474 - t459 * t976 + t460 * t980;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t946, -t947, 0, t912, 0, 0, 0, 0, 0, 0, t886, t887, t909, t844, 0, 0, 0, 0, 0, 0, t762, t773, t745, t670, 0, 0, 0, 0, 0, 0, t639, t647, t597, t523, 0, 0, 0, 0, 0, 0, t543, t546, t529, t480, 0, 0, 0, 0, 0, 0, t543, t546, t529, t470; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t947, -t946, 0, t911, 0, 0, 0, 0, 0, 0, t884, t885, t908, t843, 0, 0, 0, 0, 0, 0, t759, t772, t744, t669, 0, 0, 0, 0, 0, 0, t638, t646, t596, t522, 0, 0, 0, 0, 0, 0, t542, t545, t528, t479, 0, 0, 0, 0, 0, 0, t542, t545, t528, t469; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t913, t914, 0, -t858, 0, 0, 0, 0, 0, 0, t783, t809, t758, t681, 0, 0, 0, 0, 0, 0, t648, t675, t608, t525, 0, 0, 0, 0, 0, 0, t561, t564, t548, t486, 0, 0, 0, 0, 0, 0, t561, t564, t548, t474; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t947, 0, -t946, 0, t1003, -t929, -t911, -pkin(6) * t911, t922 * t981 - t1005, t907 * t981 - t949 * t977, t1033 * t976 + t917 * t981, t921 * t981 + t1005, t915 * t981 + t966 * t977, t938 * t981 + t965, -pkin(6) * t884 - t875 * t977 + t878 * t981, -pkin(6) * t885 - t876 * t977 + t879 * t981, -pkin(6) * t908 + t858 * t981, -pkin(6) * t843 - (pkin(1) * t977 - pkin(7) * t981) * t858, t814 * t981 - t1022, t760 * t981 - t903 * t977, t811 * t981 - t873 * t977, t813 * t981 + t1022, t810 * t981 + t871 * t977, t829 * t981 + t965, -pkin(6) * t759 + t690 * t981 - t704 * t977, -pkin(6) * t772 + t701 * t981 - t718 * t977, -pkin(6) * t744 + t628 * t981 - t719 * t977, -pkin(6) * t669 + t620 * t981 - t640 * t977, t654 * t981 + t1024, t609 * t981 - t839 * t977, t683 * t981 - t793 * t977, t653 * t981 - t1024, t684 * t981 + t790 * t977, t1029 * t977 + t981 * t702, -pkin(6) * t638 + t533 * t981 - t586 * t977, -pkin(6) * t646 + t550 * t981 - t595 * t977, -pkin(6) * t596 + t496 * t981 - t571 * t977, -pkin(6) * t522 + t482 * t981 - t505 * t977, t583, t536, t553, t582, t554, t593, t472 * t981 - t507 * t977 - t1091, t473 * t981 - t508 * t977 - t1090, t466 * t981 - t497 * t977 - t1092, -pkin(6) * t479 + t458 * t981 - t467 * t977, t583, t536, t553, t582, t554, t593, t463 * t981 - t502 * t977 - t1091, t464 * t981 - t503 * t977 - t1090, t462 * t981 - t490 * t977 - t1092, -pkin(6) * t469 + t457 * t981 - t461 * t977; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t946, 0, t947, 0, t929, t1003, t912, pkin(6) * t912, t922 * t977 + t1004, t907 * t977 + t949 * t981, -t1032 * t976 + t917 * t977, t921 * t977 - t1004, t915 * t977 - t966 * t981, t938 * t977 - t1031, pkin(6) * t886 + t875 * t981 + t878 * t977, pkin(6) * t887 + t876 * t981 + t879 * t977, pkin(6) * t909 + t858 * t977, pkin(6) * t844 - (-pkin(1) * t981 - pkin(7) * t977) * t858, t814 * t977 + t1021, t760 * t977 + t903 * t981, t811 * t977 + t873 * t981, t813 * t977 - t1021, t810 * t977 - t871 * t981, t829 * t977 - t1031, pkin(6) * t762 + t690 * t977 + t704 * t981, pkin(6) * t773 + t701 * t977 + t718 * t981, pkin(6) * t745 + t628 * t977 + t719 * t981, pkin(6) * t670 + t620 * t977 + t640 * t981, t654 * t977 - t1023, t609 * t977 + t839 * t981, t683 * t977 + t793 * t981, t653 * t977 + t1023, t684 * t977 - t790 * t981, -t1029 * t981 + t977 * t702, pkin(6) * t639 + t533 * t977 + t586 * t981, pkin(6) * t647 + t550 * t977 + t595 * t981, pkin(6) * t597 + t496 * t977 + t571 * t981, pkin(6) * t523 + t482 * t977 + t505 * t981, t581, t535, t551, t580, t552, t592, t472 * t977 + t507 * t981 + t541, t473 * t977 + t508 * t981 + t544, t466 * t977 + t497 * t981 + t527, pkin(6) * t480 + t458 * t977 + t467 * t981, t581, t535, t551, t580, t552, t592, t463 * t977 + t502 * t981 + t541, t464 * t977 + t503 * t981 + t544, t462 * t977 + t490 * t981 + t527, pkin(6) * t470 + t457 * t977 + t461 * t981; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t952, t953, 0, 0, (t942 + t1017) * t976, t941 * t980 + t944 * t976, t955 * t980 + t1053, (t943 - t1018) * t980, t957 * t976 + t1051, 0, pkin(1) * t944 + pkin(7) * t916 + t1054, -pkin(1) * t941 + pkin(7) * t918 - t1055, pkin(1) * t948 + pkin(7) * t945 + t859, pkin(1) * t935 + pkin(7) * t859, t855 * t980 + t856 * t976, t820 * t980 + t822 * t976, t846 * t980 + t849 * t976, t853 * t980 + t854 * t976, t845 * t980 + t848 * t976, t888 * t980 + t889 * t976, -pkin(1) * t870 + pkin(7) * t784 + t774 * t980 + t807 * t976, -pkin(1) * t872 + pkin(7) * t812 + t782 * t980 + t816 * t976, -pkin(1) * t869 + pkin(7) * t761 + t699 * t980 + t703 * t976, pkin(1) * t865 + pkin(7) * t682 - qJ(3) * t1071 + t717 * t980, t721 * t980 + t723 * t976, t657 * t980 + t659 * t976, t740 * t980 + t742 * t976, t720 * t980 + t722 * t976, t741 * t980 + t743 * t976, t768 * t980 + t769 * t976, -pkin(1) * t789 + pkin(7) * t649 + t605 * t980 + t626 * t976, -pkin(1) * t1101 + pkin(7) * t676 + t625 * t980 + t632 * t976, -pkin(1) * t815 + pkin(7) * t610 + t532 * t980 + t534 * t976, pkin(1) * t800 + pkin(7) * t526 + t521 * t980 + t524 * t976, t589, t557, t567, t588, t568, t617, t492 * t980 + t498 * t976 + t1046, t495 * t980 + t499 * t976 + t1045, t488 * t980 + t489 * t976 + t1047, -pkin(1) * t573 + pkin(7) * t487 + t465 * t980 + t468 * t976, t589, t557, t567, t588, t568, t617, t481 * t980 + t483 * t976 + t1046, t484 * t980 + t485 * t976 + t1045, t477 * t980 + t478 * t976 + t1047, -pkin(1) * t537 + pkin(7) * t475 + t459 * t980 + t460 * t976;];
tauB_reg  = t1;
