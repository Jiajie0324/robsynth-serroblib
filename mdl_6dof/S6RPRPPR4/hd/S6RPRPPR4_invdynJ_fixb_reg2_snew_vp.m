% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRPPR4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:49:34
% EndTime: 2019-05-05 16:49:57
% DurationCPUTime: 11.58s
% Computational Cost: add. (29819->519), mult. (74642->705), div. (0->0), fcn. (56238->10), ass. (0->316)
t283 = cos(pkin(10));
t281 = sin(pkin(10));
t282 = sin(pkin(9));
t288 = cos(qJ(3));
t284 = cos(pkin(9));
t286 = sin(qJ(3));
t349 = t284 * t286;
t310 = t282 * t288 + t349;
t267 = t310 * qJD(1);
t247 = -t283 * qJD(3) + t267 * t281;
t249 = qJD(3) * t281 + t267 * t283;
t201 = t249 * t247;
t334 = t284 * qJDD(1);
t335 = t282 * qJDD(1);
t312 = t286 * t335 - t288 * t334;
t337 = t267 * qJD(3);
t233 = t312 + t337;
t407 = t201 + t233;
t366 = t407 * t281;
t246 = t249 ^ 2;
t342 = qJD(1) * t284;
t350 = t282 * t286;
t265 = qJD(1) * t350 - t288 * t342;
t393 = t265 ^ 2;
t405 = -t246 - t393;
t120 = -t283 * t405 + t366;
t365 = t407 * t283;
t122 = t281 * t405 + t365;
t264 = t310 * qJDD(1);
t338 = t265 * qJD(3);
t235 = t264 - t338;
t212 = qJDD(3) * t281 + t235 * t283;
t356 = t247 * t265;
t406 = t212 - t356;
t87 = t286 * t122 + t288 * t406;
t89 = t122 * t288 - t286 * t406;
t467 = -pkin(1) * t120 - qJ(2) * (t282 * t87 - t284 * t89);
t466 = pkin(7) * t87;
t465 = -pkin(2) * t120 + pkin(7) * t89;
t394 = t247 ^ 2;
t214 = t394 - t393;
t144 = t214 * t283 - t366;
t320 = -t283 * qJDD(3) + t235 * t281;
t353 = t265 * t249;
t305 = -t320 + t353;
t463 = t282 * (t144 * t288 + t286 * t305) + t284 * (t286 * t144 - t305 * t288);
t304 = t320 + t353;
t368 = t406 * t281;
t116 = -t304 * t283 - t368;
t197 = t246 - t394;
t462 = t282 * (t116 * t288 + t286 * t197) + t284 * (t286 * t116 - t197 * t288);
t459 = pkin(3) * t120;
t458 = qJ(4) * t120;
t457 = qJ(4) * t122;
t163 = t212 + t356;
t215 = -t246 + t393;
t321 = -t233 + t201;
t363 = t321 * t283;
t447 = -t215 * t281 - t363;
t452 = t282 * (t286 * t163 + t288 * t447) + t284 * (-t163 * t288 + t286 * t447);
t364 = t321 * t281;
t403 = -t393 - t394;
t415 = t283 * t403 + t364;
t430 = t286 * t415 - t288 * t304;
t451 = pkin(7) * t430;
t174 = -t394 - t246;
t398 = t163 * t281 + t283 * t305;
t432 = -t174 * t288 + t286 * t398;
t450 = pkin(7) * t432;
t433 = t286 * t174 + t288 * t398;
t449 = pkin(7) * t433;
t448 = t283 * t215 - t364;
t416 = t281 * t403 - t363;
t429 = t286 * t304 + t288 * t415;
t446 = -pkin(2) * t416 + pkin(7) * t429;
t445 = qJ(2) * (-t282 * t432 + t284 * t433);
t444 = qJ(2) * (-t282 * t430 + t284 * t429) - pkin(1) * t416;
t441 = pkin(3) * t416;
t440 = qJ(4) * t415;
t439 = qJ(4) * t416;
t434 = -pkin(3) * t174 + qJ(4) * t398;
t431 = t214 * t281 + t365;
t428 = 2 * qJD(5);
t399 = -t163 * t283 + t281 * t305;
t426 = qJ(4) * t399;
t425 = qJ(5) * t406;
t238 = t267 * t265;
t402 = qJDD(3) - t238;
t421 = t286 * t402;
t418 = t288 * t402;
t414 = -t304 * t281 + t283 * t406;
t386 = sin(qJ(1));
t387 = cos(qJ(1));
t316 = g(1) * t386 - t387 * g(2);
t308 = -qJDD(2) + t316;
t392 = qJD(1) ^ 2;
t341 = t392 * qJ(2);
t378 = qJDD(1) * pkin(1);
t260 = t308 + t341 + t378;
t277 = t282 ^ 2;
t278 = t284 ^ 2;
t343 = t277 + t278;
t413 = t341 * t343 - t260 - t378;
t327 = pkin(2) * t284 + pkin(1);
t228 = t327 * qJDD(1) + (pkin(7) * t343 + qJ(2)) * t392 + t308;
t412 = qJ(2) + pkin(7);
t285 = sin(qJ(6));
t225 = qJDD(6) - t233;
t287 = cos(qJ(6));
t193 = -t287 * t247 + t249 * t285;
t195 = t247 * t285 + t249 * t287;
t361 = t195 * t193;
t297 = t225 - t361;
t411 = t285 * t297;
t409 = t287 * t297;
t196 = pkin(4) * t247 - qJ(5) * t249;
t224 = pkin(3) * t265 - qJ(4) * t267;
t302 = g(1) * t387 + g(2) * t386;
t292 = (-t412 * qJDD(1) + (qJD(1) * t327 - (2 * qJD(2))) * qJD(1) + t302) * t282;
t383 = t284 * g(3);
t291 = t292 - t383;
t298 = qJDD(1) * qJ(2) - t302;
t390 = 2 * qJD(2);
t317 = -g(3) * t282 + t284 * (-pkin(1) * t392 + t298) + t342 * t390;
t217 = -pkin(2) * t278 * t392 + pkin(7) * t334 + t317;
t345 = t288 * t217;
t391 = qJD(3) ^ 2;
t130 = -pkin(3) * t391 + qJDD(3) * qJ(4) - t265 * t224 + t286 * t291 + t345;
t140 = (-t235 + t338) * qJ(4) + (t233 + t337) * pkin(3) - t228;
t344 = t283 * t130 + t281 * t140;
t404 = t233 * qJ(5) - t247 * t196 + t265 * t428 + t344;
t323 = t281 * t130 - t283 * t140;
t301 = -t233 * pkin(4) - qJ(5) * t393 + qJDD(5) + t323;
t296 = -pkin(8) * t163 + t301;
t389 = 2 * qJD(4);
t336 = t389 + t196;
t401 = t296 - t233 * pkin(5) + (pkin(5) * t247 + t336) * t249;
t351 = t265 * t283;
t330 = t247 * t351;
t299 = t281 * t320 + t330;
t328 = t286 * t201;
t331 = t288 * t201;
t396 = t282 * (t288 * t299 - t328) + t284 * (t286 * t299 + t331);
t222 = t288 * t233;
t352 = t265 * t281;
t211 = t249 * t352;
t313 = t211 - t330;
t346 = t286 * t233;
t395 = t282 * (t288 * t313 + t346) + t284 * (t286 * t313 - t222);
t191 = t193 ^ 2;
t192 = t195 ^ 2;
t258 = -qJD(6) + t265;
t256 = t258 ^ 2;
t263 = t267 ^ 2;
t388 = pkin(4) + pkin(5);
t385 = pkin(4) * t283;
t315 = -pkin(5) * t265 - pkin(8) * t249;
t150 = t286 * t217 - t288 * t291;
t127 = -qJDD(3) * pkin(3) - t391 * qJ(4) + t267 * t224 + qJDD(4) + t150;
t295 = t320 * pkin(4) + t127 - t425;
t73 = (pkin(4) * t265 - (2 * qJD(5))) * t249 + t295;
t58 = pkin(5) * t320 + pkin(8) * t394 - t249 * t315 + t73;
t382 = t285 * t58;
t340 = qJD(4) * t247;
t242 = -0.2e1 * t340;
t306 = t242 + t404;
t61 = -pkin(4) * t393 + t306;
t51 = -pkin(5) * t394 + pkin(8) * t320 + t265 * t315 + t61;
t381 = t287 * t51;
t380 = t287 * t58;
t379 = qJ(5) * t283;
t151 = -g(3) * t349 + t286 * t292 + t345;
t111 = -t150 * t288 + t286 * t151;
t377 = t111 * t282;
t376 = t127 * t281;
t375 = t127 * t283;
t135 = -t225 - t361;
t374 = t135 * t285;
t373 = t135 * t287;
t362 = t193 * t258;
t359 = t228 * t286;
t358 = t228 * t288;
t230 = qJDD(3) + t238;
t357 = t230 * t288;
t355 = t258 * t285;
t354 = t258 * t287;
t347 = t286 * t230;
t333 = t249 * t389;
t332 = t288 * t361;
t329 = t286 * t361;
t77 = t242 + t344;
t129 = -t193 * qJD(6) + t287 * t212 + t285 * t320;
t326 = -pkin(3) * t288 - pkin(2);
t325 = -qJ(5) * t281 - pkin(3);
t76 = t323 + t333;
t49 = t281 * t76 + t283 * t77;
t24 = t285 * t51 - t287 * t401;
t112 = t150 * t286 + t288 * t151;
t322 = t285 * t212 - t287 * t320;
t319 = t282 * (t383 + ((-pkin(1) * qJD(1) + t390) * qJD(1) + t298) * t282) + t284 * t317;
t314 = t247 * t352 - t283 * t320;
t25 = t285 * t401 + t381;
t16 = -t24 * t287 + t25 * t285;
t17 = t285 * t24 + t287 * t25;
t48 = t281 * t77 - t283 * t76;
t309 = t129 + t362;
t303 = (-t247 * t281 - t249 * t283) * t265;
t300 = (-qJD(6) - t258) * t195 - t322;
t66 = t249 * t336 + t301;
t156 = t212 * t283 - t211;
t294 = t282 * (t288 * t156 + t328) + t284 * (t286 * t156 - t331);
t293 = t249 * t428 - t295;
t274 = t278 * qJDD(1);
t272 = t277 * qJDD(1);
t268 = t343 * t392;
t252 = -t263 + t391;
t251 = -t263 - t391;
t250 = t393 - t391;
t234 = t264 - 0.2e1 * t338;
t232 = t312 + 0.2e1 * t337;
t227 = -t393 - t391;
t202 = -t393 - t263;
t187 = -t286 * t251 - t357;
t186 = t251 * t288 - t347;
t181 = t286 * t264 - t288 * t312;
t180 = -t264 * t288 - t286 * t312;
t179 = -t192 + t256;
t178 = t191 - t256;
t177 = t227 * t288 - t421;
t176 = t286 * t227 + t418;
t155 = t212 * t281 + t249 * t351;
t152 = -t192 - t256;
t146 = t192 - t191;
t145 = -t256 - t191;
t128 = -qJD(6) * t195 - t322;
t126 = (t193 * t287 - t195 * t285) * t258;
t125 = (-t193 * t285 - t195 * t287) * t258;
t119 = -t191 - t192;
t109 = -t129 + t362;
t105 = (qJD(6) - t258) * t195 + t322;
t104 = t178 * t287 + t374;
t103 = -t179 * t285 + t409;
t102 = -t178 * t285 + t373;
t101 = -t179 * t287 - t411;
t100 = t129 * t287 + t195 * t355;
t99 = -t129 * t285 + t195 * t354;
t98 = -t128 * t285 - t193 * t354;
t97 = -t128 * t287 + t193 * t355;
t92 = -t152 * t285 + t373;
t91 = t152 * t287 + t374;
t82 = t145 * t287 - t411;
t81 = t145 * t285 + t409;
t80 = t375 + t458;
t79 = -t125 * t281 + t126 * t283;
t78 = t376 - t439;
t74 = -pkin(3) * t399 + pkin(4) * t163 - qJ(5) * t305;
t72 = (-t304 - t353) * pkin(4) + t293;
t71 = -pkin(4) * t353 + t293 + t425;
t70 = -t109 * t285 + t287 * t300;
t69 = -t105 * t287 - t285 * t309;
t68 = t109 * t287 + t285 * t300;
t67 = t105 * t285 - t287 * t309;
t65 = -t102 * t281 + t104 * t283;
t64 = -t101 * t281 + t103 * t283;
t63 = t100 * t283 - t281 * t99;
t62 = -t281 * t97 + t283 * t98;
t60 = t77 + t459;
t59 = t76 - t441;
t57 = t281 * t91 + t283 * t92;
t56 = t281 * t92 - t283 * t91;
t55 = -qJ(5) * t174 + t66;
t54 = (-t174 - t393) * pkin(4) + t306;
t53 = t281 * t81 + t283 * t82;
t52 = t281 * t82 - t283 * t81;
t47 = -t281 * t72 - t304 * t379 - t439;
t46 = -pkin(4) * t368 + t283 * t71 - t458;
t45 = -t286 * t309 + t288 * t57;
t44 = t286 * t57 + t288 * t309;
t43 = pkin(4) * t321 - qJ(5) * t403 - t441 + t66;
t42 = -t459 - qJ(5) * t407 + 0.2e1 * t340 + (t405 + t393) * pkin(4) - t404;
t41 = -t286 * t105 + t288 * t53;
t40 = t105 * t288 + t286 * t53;
t37 = -t48 - t426;
t36 = t281 * t68 + t283 * t70;
t35 = -t281 * t67 + t283 * t69;
t34 = t281 * t70 - t283 * t68;
t33 = t281 * t66 + t283 * t61;
t32 = t281 * t61 - t283 * t66;
t31 = -pkin(8) * t91 + qJ(5) * t309 - t380;
t30 = -pkin(8) * t81 + qJ(5) * t105 - t382;
t29 = -t286 * t119 + t288 * t36;
t28 = t119 * t288 + t286 * t36;
t27 = -pkin(8) * t92 + t309 * t388 + t382;
t26 = -pkin(8) * t82 + t105 * t388 - t380;
t23 = -t281 * t54 + t283 * t55 - t426;
t22 = t286 * t73 + t288 * t33;
t21 = t286 * t33 - t288 * t73;
t20 = -qJ(4) * t32 + (pkin(4) * t281 - t379) * t73;
t19 = -pkin(3) * t32 + pkin(4) * t66 - qJ(5) * t61;
t18 = -pkin(3) * t34 - qJ(5) * t70 + t388 * t68;
t15 = -pkin(3) * t56 + pkin(4) * t91 - qJ(5) * t92 - t381 - t285 * (t249 * t196 + t296 + t333) + (-t285 * t321 + t91) * pkin(5);
t14 = -qJ(4) * t56 - t27 * t281 + t283 * t31;
t13 = -pkin(3) * t52 - qJ(5) * t82 + t388 * t81 - t24;
t12 = -qJ(4) * t52 - t26 * t281 + t283 * t30;
t11 = -pkin(8) * t16 - qJ(5) * t58;
t10 = -pkin(8) * t68 + qJ(5) * t119 - t16;
t9 = -pkin(8) * t70 + t119 * t388 - t17;
t8 = -pkin(8) * t17 - t388 * t58;
t7 = t16 * t281 + t17 * t283;
t6 = -t16 * t283 + t17 * t281;
t5 = t286 * t58 + t288 * t7;
t4 = t286 * t7 - t288 * t58;
t3 = -qJ(4) * t34 + t10 * t283 - t281 * t9;
t2 = -qJ(4) * t6 + t11 * t283 - t281 * t8;
t1 = -pkin(3) * t6 - qJ(5) * t17 + t16 * t388;
t38 = [0, 0, 0, 0, 0, qJDD(1), t316, t302, 0, 0, t272, 0.2e1 * t282 * t334, 0, t274, 0, 0, -t413 * t284, t413 * t282, pkin(1) * t268 + qJ(2) * (t274 + t272) + t319, pkin(1) * t260 + qJ(2) * t319, t282 * (t235 * t288 - t286 * t337) + t284 * (t286 * t235 + t288 * t337), t282 * (-t232 * t288 - t286 * t234) + t284 * (-t286 * t232 + t234 * t288), t282 * (-t286 * t252 + t418) + t284 * (t252 * t288 + t421), t282 * (t288 * t338 + t346) + t284 * (t286 * t338 - t222), t282 * (t250 * t288 - t347) + t284 * (t286 * t250 + t357), (t282 * (-t265 * t288 + t267 * t286) + t284 * (-t265 * t286 - t267 * t288)) * qJD(3), t282 * (-pkin(7) * t176 - t359) + t284 * (-pkin(2) * t232 + pkin(7) * t177 + t358) - pkin(1) * t232 + qJ(2) * (-t176 * t282 + t177 * t284), t282 * (-pkin(7) * t186 - t358) + t284 * (-pkin(2) * t234 + pkin(7) * t187 - t359) - pkin(1) * t234 + qJ(2) * (-t186 * t282 + t187 * t284), t282 * (-pkin(7) * t180 - t111) + t284 * (-pkin(2) * t202 + pkin(7) * t181 + t112) - pkin(1) * t202 + qJ(2) * (-t180 * t282 + t181 * t284), -pkin(7) * t377 + t284 * (pkin(2) * t228 + pkin(7) * t112) + pkin(1) * t228 + qJ(2) * (t112 * t284 - t377), t294, t462, t452, t396, t463, t395, t282 * (-t286 * t59 + t288 * t78 - t451) + t284 * (t286 * t78 + t288 * t59 + t446) + t444, t282 * (-t286 * t60 + t288 * t80 + t466) + t284 * (t286 * t80 + t288 * t60 - t465) - t467, t282 * (t288 * t37 - t450) + t284 * (t286 * t37 + t449) + t445 + (pkin(3) * t350 + t284 * t326 - pkin(1)) * t399, (t282 * (pkin(3) * t286 - qJ(4) * t288) + t284 * (-qJ(4) * t286 + t326) - pkin(1)) * t48 + t412 * (-t282 * (-t127 * t288 + t286 * t49) + t284 * (t286 * t127 + t288 * t49)), t294, t452, -t462, t395, -t463, t396, t282 * (-t286 * t43 + t288 * t47 - t451) + t284 * (t286 * t47 + t288 * t43 + t446) + t444, t282 * (t23 * t288 - t286 * t74 - t450) + t284 * (-pkin(2) * t399 + t286 * t23 + t288 * t74 + t449) - pkin(1) * t399 + t445, t282 * (-t286 * t42 + t288 * t46 - t466) + t284 * (t286 * t46 + t288 * t42 + t465) + t467, t282 * (-pkin(7) * t21 - t286 * t19 + t20 * t288) + t284 * (-pkin(2) * t32 + pkin(7) * t22 + t19 * t288 + t286 * t20) - pkin(1) * t32 + qJ(2) * (-t21 * t282 + t22 * t284), t282 * (t288 * t63 - t329) + t284 * (t286 * t63 + t332), t282 * (-t286 * t146 + t288 * t35) + t284 * (t146 * t288 + t286 * t35), t282 * (t286 * t109 + t288 * t64) + t284 * (-t109 * t288 + t286 * t64), t282 * (t288 * t62 + t329) + t284 * (t286 * t62 - t332), t282 * (-t286 * t300 + t288 * t65) + t284 * (t286 * t65 + t288 * t300), t282 * (-t286 * t225 + t288 * t79) + t284 * (t225 * t288 + t286 * t79), t282 * (-pkin(7) * t40 + t12 * t288 - t286 * t13) + t284 * (-pkin(2) * t52 + pkin(7) * t41 + t286 * t12 + t13 * t288) - pkin(1) * t52 + qJ(2) * (-t282 * t40 + t284 * t41), t282 * (-pkin(7) * t44 + t14 * t288 - t286 * t15) + t284 * (-pkin(2) * t56 + pkin(7) * t45 + t286 * t14 + t15 * t288) - pkin(1) * t56 + qJ(2) * (-t282 * t44 + t284 * t45), t282 * (-pkin(7) * t28 - t286 * t18 + t288 * t3) + t284 * (-pkin(2) * t34 + pkin(7) * t29 + t18 * t288 + t286 * t3) - pkin(1) * t34 + qJ(2) * (-t28 * t282 + t284 * t29), t282 * (-pkin(7) * t4 - t286 * t1 + t2 * t288) + t284 * (-pkin(2) * t6 + pkin(7) * t5 + t1 * t288 + t286 * t2) - pkin(1) * t6 + qJ(2) * (-t282 * t4 + t284 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t334, t335, -t268, -t260, 0, 0, 0, 0, 0, 0, t232, t234, t202, -t228, 0, 0, 0, 0, 0, 0, t416, -t120, t399, t48, 0, 0, 0, 0, 0, 0, t416, t399, t120, t32, 0, 0, 0, 0, 0, 0, t52, t56, t34, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238, t263 - t393, t264, -t238, -t312, qJDD(3), -t150, -t151, 0, 0, t155, t414, t448, t314, t431, t303, -pkin(3) * t304 - t375 + t440, -pkin(3) * t406 + t376 - t457, t434 + t49, -pkin(3) * t127 + qJ(4) * t49, t155, t448, -t414, t303, -t431, t314, t283 * t72 + t304 * t325 + t440, t281 * t55 + t283 * t54 + t434, t457 + t281 * t71 + (pkin(3) + t385) * t406, qJ(4) * t33 + (t325 - t385) * t73, t100 * t281 + t283 * t99, t281 * t69 + t283 * t67, t101 * t283 + t103 * t281, t281 * t98 + t283 * t97, t102 * t283 + t104 * t281, t125 * t283 + t126 * t281, pkin(3) * t105 + qJ(4) * t53 + t26 * t283 + t281 * t30, pkin(3) * t309 + qJ(4) * t57 + t27 * t283 + t281 * t31, pkin(3) * t119 + qJ(4) * t36 + t10 * t281 + t283 * t9, -pkin(3) * t58 + qJ(4) * t7 + t11 * t281 + t283 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, t406, t174, t127, 0, 0, 0, 0, 0, 0, t304, t174, -t406, t73, 0, 0, 0, 0, 0, 0, -t105, -t309, -t119, t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t321, t163, t405, t66, 0, 0, 0, 0, 0, 0, t81, t91, t68, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t361, t146, -t109, -t361, t300, t225, -t24, -t25, 0, 0;];
tauJ_reg  = t38;
