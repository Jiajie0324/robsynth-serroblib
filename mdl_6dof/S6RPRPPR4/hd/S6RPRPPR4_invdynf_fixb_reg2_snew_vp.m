% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRPPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:51:23
% EndTime: 2019-05-05 16:51:31
% DurationCPUTime: 8.49s
% Computational Cost: add. (27582->302), mult. (69263->371), div. (0->0), fcn. (52318->10), ass. (0->207)
t2344 = sin(pkin(9));
t2346 = cos(pkin(9));
t2348 = sin(qJ(3));
t2351 = cos(qJ(3));
t2368 = t2344 * t2351 + t2346 * t2348;
t2323 = t2368 * qJD(1);
t2314 = t2323 * qJD(3);
t2337 = t2346 * qJDD(1);
t2377 = t2344 * qJDD(1);
t2369 = -t2351 * t2337 + t2348 * t2377;
t2293 = t2314 + t2369;
t2343 = sin(pkin(10));
t2345 = cos(pkin(10));
t2305 = -qJD(3) * t2345 + t2343 * t2323;
t2307 = qJD(3) * t2343 + t2323 * t2345;
t2386 = t2305 * t2307;
t2246 = t2293 + t2386;
t2304 = t2307 ^ 2;
t2321 = (t2344 * t2348 - t2346 * t2351) * qJD(1);
t2396 = t2321 ^ 2;
t2408 = -t2304 - t2396;
t2218 = t2246 * t2345 + t2343 * t2408;
t2384 = t2321 * qJD(3);
t2406 = t2368 * qJDD(1);
t2295 = t2406 - t2384;
t2367 = qJDD(3) * t2343 + t2295 * t2345;
t2385 = t2305 * t2321;
t2361 = t2367 - t2385;
t2193 = t2218 * t2348 + t2351 * t2361;
t2195 = t2218 * t2351 - t2348 * t2361;
t2176 = t2193 * t2344 - t2195 * t2346;
t2216 = t2246 * t2343 - t2345 * t2408;
t2349 = sin(qJ(1));
t2352 = cos(qJ(1));
t2437 = t2176 * t2349 + t2216 * t2352;
t2436 = t2176 * t2352 - t2216 * t2349;
t2167 = t2193 * t2346 + t2195 * t2344;
t2242 = t2367 + t2385;
t2373 = -t2345 * qJDD(3) + t2295 * t2343;
t2383 = t2321 * t2307;
t2366 = -t2373 + t2383;
t2404 = -t2242 * t2345 + t2343 * t2366;
t2398 = t2305 ^ 2;
t2251 = t2304 + t2398;
t2403 = t2242 * t2343 + t2345 * t2366;
t2422 = t2251 * t2351 + t2348 * t2403;
t2423 = -t2251 * t2348 + t2351 * t2403;
t2426 = -t2344 * t2422 + t2346 * t2423;
t2435 = t2349 * t2426 - t2352 * t2404;
t2247 = t2293 - t2386;
t2407 = -t2396 - t2398;
t2415 = t2247 * t2345 + t2343 * t2407;
t2365 = t2373 + t2383;
t2414 = -t2247 * t2343 + t2345 * t2407;
t2420 = t2348 * t2365 + t2351 * t2414;
t2421 = t2348 * t2414 - t2351 * t2365;
t2429 = -t2344 * t2421 + t2346 * t2420;
t2434 = t2349 * t2429 - t2352 * t2415;
t2433 = t2349 * t2404 + t2352 * t2426;
t2432 = t2349 * t2415 + t2352 * t2429;
t2428 = t2344 * t2420 + t2346 * t2421;
t2427 = t2344 * t2423 + t2346 * t2422;
t2353 = qJD(1) ^ 2;
t2330 = t2349 * g(1) - t2352 * g(2);
t2370 = -qJDD(2) + t2330;
t2375 = pkin(2) * t2346 + pkin(1);
t2339 = t2344 ^ 2;
t2340 = t2346 ^ 2;
t2378 = t2339 + t2340;
t2289 = t2375 * qJDD(1) + (pkin(7) * t2378 + qJ(2)) * t2353 + t2370;
t2327 = t2378 * t2353;
t2316 = -qJD(6) + t2321;
t2409 = qJD(6) - t2316;
t2401 = qJD(3) ^ 2;
t2347 = sin(qJ(6));
t2350 = cos(qJ(6));
t2266 = -t2350 * t2305 + t2307 * t2347;
t2400 = t2266 ^ 2;
t2268 = t2305 * t2347 + t2307 * t2350;
t2399 = t2268 ^ 2;
t2397 = t2316 ^ 2;
t2395 = t2323 ^ 2;
t2394 = -2 * qJD(4);
t2393 = t2346 * g(3);
t2392 = qJD(2) * qJD(1);
t2387 = t2266 * t2268;
t2382 = t2321 * t2323;
t2381 = t2340 * t2353;
t2269 = pkin(4) * t2305 - qJ(5) * t2307;
t2380 = (2 * qJD(4)) + t2269;
t2379 = qJD(6) + t2316;
t2371 = t2352 * g(1) + t2349 * g(2);
t2359 = -t2353 * pkin(1) + qJDD(1) * qJ(2) - t2371;
t2298 = -g(3) * t2344 + (t2359 + 0.2e1 * t2392) * t2346;
t2280 = -pkin(2) * t2381 + pkin(7) * t2337 + t2298;
t2376 = -0.2e1 * t2392;
t2357 = -t2393 + (t2376 + t2375 * t2353 + (-pkin(7) - qJ(2)) * qJDD(1) + t2371) * t2344;
t2237 = t2351 * t2280 + t2348 * t2357;
t2286 = pkin(3) * t2321 - qJ(4) * t2323;
t2224 = -pkin(3) * t2401 + qJDD(3) * qJ(4) - t2286 * t2321 + t2237;
t2356 = (-t2295 + t2384) * qJ(4) + (t2293 + t2314) * pkin(3) - t2289;
t2186 = t2345 * t2224 + t2305 * t2394 + t2343 * t2356;
t2374 = t2343 * t2224 - t2345 * t2356;
t2236 = -t2348 * t2280 + t2351 * t2357;
t2372 = -pkin(5) * t2321 - pkin(8) * t2307;
t2363 = -t2293 * pkin(4) - qJ(5) * t2396 + qJDD(5) + t2374;
t2362 = qJDD(6) - t2293;
t2360 = -t2347 * t2367 + t2350 * t2373;
t2178 = -pkin(4) * t2396 + t2293 * qJ(5) + 0.2e1 * qJD(5) * t2321 - t2305 * t2269 + t2186;
t2223 = -qJDD(3) * pkin(3) - qJ(4) * t2401 + t2323 * t2286 + qJDD(4) - t2236;
t2358 = -t2347 * t2373 - t2350 * t2367;
t2184 = t2373 * pkin(4) + (pkin(4) * t2321 - 0.2e1 * qJD(5)) * t2307 + t2223 - t2361 * qJ(5);
t2332 = t2344 * t2353 * t2346;
t2329 = -qJDD(1) * t2349 - t2352 * t2353;
t2328 = qJDD(1) * t2352 - t2349 * t2353;
t2326 = t2378 * qJDD(1);
t2325 = t2346 * t2327;
t2324 = t2344 * t2327;
t2318 = qJDD(1) * pkin(1) + t2353 * qJ(2) + t2370;
t2309 = -t2395 - t2401;
t2297 = -t2393 + (-t2359 + t2376) * t2344;
t2294 = t2406 - 0.2e1 * t2384;
t2292 = 0.2e1 * t2314 + t2369;
t2291 = -qJDD(3) - t2382;
t2290 = qJDD(3) - t2382;
t2288 = -t2396 - t2401;
t2272 = -t2395 - t2396;
t2270 = -t2293 + t2314;
t2263 = t2291 * t2351 - t2309 * t2348;
t2262 = t2291 * t2348 + t2309 * t2351;
t2259 = -t2297 * t2344 + t2298 * t2346;
t2258 = t2297 * t2346 + t2298 * t2344;
t2255 = t2270 * t2351 + t2348 * t2406;
t2254 = t2270 * t2348 - t2351 * t2406;
t2253 = t2288 * t2351 - t2290 * t2348;
t2252 = t2288 * t2348 + t2290 * t2351;
t2238 = -t2397 - t2399;
t2235 = -t2262 * t2344 + t2263 * t2346;
t2234 = t2262 * t2346 + t2263 * t2344;
t2233 = -t2397 - t2400;
t2230 = t2362 - t2387;
t2229 = -t2362 - t2387;
t2221 = -t2254 * t2344 + t2255 * t2346;
t2220 = t2254 * t2346 + t2255 * t2344;
t2215 = -t2252 * t2344 + t2253 * t2346;
t2214 = t2252 * t2346 + t2253 * t2344;
t2213 = -t2399 - t2400;
t2208 = -t2236 * t2348 + t2237 * t2351;
t2207 = t2236 * t2351 + t2237 * t2348;
t2206 = t2266 * t2379 + t2358;
t2205 = -t2266 * t2409 - t2358;
t2204 = -t2268 * t2379 + t2360;
t2203 = t2268 * t2409 - t2360;
t2198 = t2229 * t2350 - t2238 * t2347;
t2197 = t2229 * t2347 + t2238 * t2350;
t2188 = -t2230 * t2347 + t2233 * t2350;
t2187 = t2230 * t2350 + t2233 * t2347;
t2185 = t2307 * t2394 - t2374;
t2183 = -t2207 * t2344 + t2208 * t2346;
t2182 = t2207 * t2346 + t2208 * t2344;
t2181 = t2204 * t2350 - t2206 * t2347;
t2180 = t2204 * t2347 + t2206 * t2350;
t2179 = t2380 * t2307 + t2363;
t2173 = pkin(5) * t2373 + pkin(8) * t2398 - t2307 * t2372 + t2184;
t2172 = t2197 * t2343 + t2198 * t2345;
t2171 = -t2197 * t2345 + t2198 * t2343;
t2162 = t2187 * t2343 + t2188 * t2345;
t2161 = -t2187 * t2345 + t2188 * t2343;
t2160 = -pkin(5) * t2398 + pkin(8) * t2373 + t2321 * t2372 + t2178;
t2159 = -t2293 * pkin(5) - t2242 * pkin(8) + (pkin(5) * t2305 + t2380) * t2307 + t2363;
t2158 = -t2185 * t2343 + t2186 * t2345;
t2157 = t2185 * t2345 + t2186 * t2343;
t2156 = t2172 * t2351 - t2205 * t2348;
t2155 = t2172 * t2348 + t2205 * t2351;
t2154 = t2162 * t2351 - t2203 * t2348;
t2153 = t2162 * t2348 + t2203 * t2351;
t2152 = t2158 * t2351 + t2223 * t2348;
t2151 = t2158 * t2348 - t2223 * t2351;
t2150 = t2180 * t2343 + t2181 * t2345;
t2149 = -t2180 * t2345 + t2181 * t2343;
t2148 = t2178 * t2345 + t2179 * t2343;
t2147 = t2178 * t2343 - t2179 * t2345;
t2146 = t2150 * t2351 - t2213 * t2348;
t2145 = t2150 * t2348 + t2213 * t2351;
t2144 = t2159 * t2347 + t2160 * t2350;
t2143 = t2159 * t2350 - t2160 * t2347;
t2142 = t2148 * t2351 + t2184 * t2348;
t2141 = t2148 * t2348 - t2184 * t2351;
t2140 = -t2155 * t2344 + t2156 * t2346;
t2139 = t2155 * t2346 + t2156 * t2344;
t2138 = -t2153 * t2344 + t2154 * t2346;
t2137 = t2153 * t2346 + t2154 * t2344;
t2136 = -t2151 * t2344 + t2152 * t2346;
t2135 = t2151 * t2346 + t2152 * t2344;
t2134 = -t2145 * t2344 + t2146 * t2346;
t2133 = t2145 * t2346 + t2146 * t2344;
t2132 = -t2143 * t2347 + t2144 * t2350;
t2131 = t2143 * t2350 + t2144 * t2347;
t2130 = -t2141 * t2344 + t2142 * t2346;
t2129 = t2141 * t2346 + t2142 * t2344;
t2128 = t2131 * t2343 + t2132 * t2345;
t2127 = -t2131 * t2345 + t2132 * t2343;
t2126 = t2128 * t2351 + t2173 * t2348;
t2125 = t2128 * t2348 - t2173 * t2351;
t2124 = -t2125 * t2344 + t2126 * t2346;
t2123 = t2125 * t2346 + t2126 * t2344;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2329, -t2328, 0, -t2330 * t2349 - t2352 * t2371, 0, 0, 0, 0, 0, 0, -t2325 * t2352 - t2337 * t2349, t2324 * t2352 + t2349 * t2377, t2326 * t2352 - t2327 * t2349, t2259 * t2352 - t2318 * t2349, 0, 0, 0, 0, 0, 0, t2215 * t2352 + t2292 * t2349, t2235 * t2352 + t2294 * t2349, t2221 * t2352 + t2272 * t2349, t2183 * t2352 - t2289 * t2349, 0, 0, 0, 0, 0, 0, t2432, t2436, t2433, t2136 * t2352 + t2157 * t2349, 0, 0, 0, 0, 0, 0, t2432, t2433, -t2436, t2130 * t2352 + t2147 * t2349, 0, 0, 0, 0, 0, 0, t2138 * t2352 + t2161 * t2349, t2140 * t2352 + t2171 * t2349, t2134 * t2352 + t2149 * t2349, t2124 * t2352 + t2127 * t2349; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2328, t2329, 0, t2330 * t2352 - t2349 * t2371, 0, 0, 0, 0, 0, 0, -t2325 * t2349 + t2337 * t2352, t2324 * t2349 - t2352 * t2377, t2326 * t2349 + t2327 * t2352, t2259 * t2349 + t2318 * t2352, 0, 0, 0, 0, 0, 0, t2215 * t2349 - t2292 * t2352, t2235 * t2349 - t2294 * t2352, t2221 * t2349 - t2272 * t2352, t2183 * t2349 + t2289 * t2352, 0, 0, 0, 0, 0, 0, t2434, t2437, t2435, t2136 * t2349 - t2157 * t2352, 0, 0, 0, 0, 0, 0, t2434, t2435, -t2437, t2130 * t2349 - t2147 * t2352, 0, 0, 0, 0, 0, 0, t2138 * t2349 - t2161 * t2352, t2140 * t2349 - t2171 * t2352, t2134 * t2349 - t2149 * t2352, t2124 * t2349 - t2127 * t2352; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2258, 0, 0, 0, 0, 0, 0, t2214, t2234, t2220, t2182, 0, 0, 0, 0, 0, 0, t2428, -t2167, t2427, t2135, 0, 0, 0, 0, 0, 0, t2428, t2427, t2167, t2129, 0, 0, 0, 0, 0, 0, t2137, t2139, t2133, t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2353, -qJDD(1), 0, -t2371, 0, 0, 0, 0, 0, 0, -t2325, t2324, t2326, t2259, 0, 0, 0, 0, 0, 0, t2215, t2235, t2221, t2183, 0, 0, 0, 0, 0, 0, t2429, t2176, t2426, t2136, 0, 0, 0, 0, 0, 0, t2429, t2426, -t2176, t2130, 0, 0, 0, 0, 0, 0, t2138, t2140, t2134, t2124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2353, 0, t2330, 0, 0, 0, 0, 0, 0, t2337, -t2377, t2327, t2318, 0, 0, 0, 0, 0, 0, -t2292, -t2294, -t2272, t2289, 0, 0, 0, 0, 0, 0, -t2415, t2216, -t2404, -t2157, 0, 0, 0, 0, 0, 0, -t2415, -t2404, -t2216, -t2147, 0, 0, 0, 0, 0, 0, -t2161, -t2171, -t2149, -t2127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2258, 0, 0, 0, 0, 0, 0, t2214, t2234, t2220, t2182, 0, 0, 0, 0, 0, 0, t2428, -t2167, t2427, t2135, 0, 0, 0, 0, 0, 0, t2428, t2427, t2167, t2129, 0, 0, 0, 0, 0, 0, t2137, t2139, t2133, t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2381, t2332, t2337, t2298, 0, 0, 0, 0, 0, 0, t2253, t2263, t2255, t2208, 0, 0, 0, 0, 0, 0, t2420, -t2195, t2423, t2152, 0, 0, 0, 0, 0, 0, t2420, t2423, t2195, t2142, 0, 0, 0, 0, 0, 0, t2154, t2156, t2146, t2126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2332, -t2339 * t2353, -t2377, t2297, 0, 0, 0, 0, 0, 0, t2252, t2262, t2254, t2207, 0, 0, 0, 0, 0, 0, t2421, -t2193, t2422, t2151, 0, 0, 0, 0, 0, 0, t2421, t2422, t2193, t2141, 0, 0, 0, 0, 0, 0, t2153, t2155, t2145, t2125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2337, t2377, -t2327, -t2318, 0, 0, 0, 0, 0, 0, t2292, t2294, t2272, -t2289, 0, 0, 0, 0, 0, 0, t2415, -t2216, t2404, t2157, 0, 0, 0, 0, 0, 0, t2415, t2404, t2216, t2147, 0, 0, 0, 0, 0, 0, t2161, t2171, t2149, t2127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2288, t2291, t2270, t2237, 0, 0, 0, 0, 0, 0, t2414, -t2218, t2403, t2158, 0, 0, 0, 0, 0, 0, t2414, t2403, t2218, t2148, 0, 0, 0, 0, 0, 0, t2162, t2172, t2150, t2128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2290, t2309, -t2406, t2236, 0, 0, 0, 0, 0, 0, -t2365, -t2361, t2251, -t2223, 0, 0, 0, 0, 0, 0, -t2365, t2251, t2361, -t2184, 0, 0, 0, 0, 0, 0, t2203, t2205, t2213, -t2173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2292, t2294, t2272, -t2289, 0, 0, 0, 0, 0, 0, t2415, -t2216, t2404, t2157, 0, 0, 0, 0, 0, 0, t2415, t2404, t2216, t2147, 0, 0, 0, 0, 0, 0, t2161, t2171, t2149, t2127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2407, -t2246, t2366, t2186, 0, 0, 0, 0, 0, 0, t2407, t2366, t2246, t2178, 0, 0, 0, 0, 0, 0, t2188, t2198, t2181, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2247, t2408, -t2242, t2185, 0, 0, 0, 0, 0, 0, t2247, -t2242, -t2408, -t2179, 0, 0, 0, 0, 0, 0, -t2187, -t2197, -t2180, -t2131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2365, t2361, -t2251, t2223, 0, 0, 0, 0, 0, 0, t2365, -t2251, -t2361, t2184, 0, 0, 0, 0, 0, 0, -t2203, -t2205, -t2213, t2173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2407, t2366, t2246, t2178, 0, 0, 0, 0, 0, 0, t2188, t2198, t2181, t2132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2365, -t2251, -t2361, t2184, 0, 0, 0, 0, 0, 0, -t2203, -t2205, -t2213, t2173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2247, t2242, t2408, t2179, 0, 0, 0, 0, 0, 0, t2187, t2197, t2180, t2131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2233, t2229, t2204, t2144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2230, t2238, t2206, t2143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2203, t2205, t2213, -t2173;];
f_new_reg  = t1;
