% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPPR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:48:30
% EndTime: 2019-03-09 02:48:42
% DurationCPUTime: 5.99s
% Computational Cost: add. (8922->564), mult. (21459->680), div. (0->0), fcn. (16670->12), ass. (0->285)
t227 = sin(pkin(9));
t229 = cos(pkin(9));
t232 = sin(qJ(3));
t378 = cos(qJ(3));
t179 = t227 * t378 + t232 * t229;
t166 = t179 * qJD(1);
t226 = sin(pkin(10));
t228 = cos(pkin(10));
t133 = t228 * qJD(3) - t166 * t226;
t231 = sin(qJ(6));
t234 = cos(qJ(6));
t265 = qJD(3) * t226 + t228 * t166;
t406 = t133 * t234 + t231 * t265;
t418 = t406 ^ 2;
t407 = -t133 * t231 + t234 * t265;
t417 = t407 ^ 2;
t325 = qJD(3) * t232;
t309 = t227 * t325;
t311 = t378 * t229;
t206 = qJD(1) * t311;
t299 = qJDD(1) * t378;
t317 = t229 * qJDD(1);
t313 = qJD(3) * t206 + t227 * t299 + t232 * t317;
t115 = qJD(1) * t309 - t313;
t94 = -t228 * qJDD(3) - t115 * t226;
t95 = qJDD(3) * t226 - t115 * t228;
t25 = qJD(6) * t407 + t231 * t95 - t234 * t94;
t335 = t232 * t227;
t310 = qJD(1) * t335;
t164 = -t206 + t310;
t320 = qJD(6) - t164;
t414 = t320 * t407;
t416 = -t25 + t414;
t415 = t320 * t406;
t225 = pkin(9) + qJ(3);
t221 = cos(t225);
t212 = g(3) * t221;
t319 = qJD(1) * qJD(2);
t371 = pkin(7) + qJ(2);
t385 = qJDD(1) * t371 + t319;
t143 = t385 * t227;
t144 = t385 * t229;
t188 = t371 * t227;
t180 = qJD(1) * t188;
t190 = t371 * t229;
t181 = qJD(1) * t190;
t303 = qJD(3) * t378;
t61 = -t378 * t143 - t232 * t144 + t180 * t325 - t181 * t303;
t248 = qJDD(3) * pkin(3) - qJDD(4) + t61;
t304 = t248 - t212;
t220 = sin(t225);
t233 = sin(qJ(1));
t235 = cos(qJ(1));
t287 = g(1) * t235 + g(2) * t233;
t399 = t287 * t220;
t239 = -t399 - t304;
t176 = t226 * t231 + t228 * t234;
t168 = t176 * qJD(6);
t359 = -t176 * t164 + t168;
t392 = -t226 * t234 + t228 * t231;
t322 = qJD(6) * t234;
t323 = qJD(6) * t231;
t395 = -t226 * t322 + t228 * t323;
t413 = -t392 * t164 + t395;
t128 = -t232 * t188 + t190 * t378;
t91 = qJD(2) * t179 + qJD(3) * t128;
t412 = t228 * t179 * qJD(5) - t91;
t411 = t133 * t164;
t356 = qJDD(1) * pkin(1);
t397 = g(1) * t233 - g(2) * t235;
t263 = -qJDD(2) + t356 + t397;
t171 = t179 * qJD(3);
t318 = t227 * qJDD(1);
t280 = -t229 * t299 + t232 * t318;
t116 = qJD(1) * t171 + t280;
t216 = pkin(2) * t229 + pkin(1);
t184 = -qJDD(1) * t216 + qJDD(2);
t44 = pkin(3) * t116 + qJ(4) * t115 - qJD(4) * t166 + t184;
t162 = t232 * t181;
t315 = -t232 * t143 + t378 * t144 - t180 * t303;
t54 = qJDD(3) * qJ(4) + (qJD(4) - t162) * qJD(3) + t315;
t18 = -t226 * t54 + t228 * t44;
t284 = qJDD(5) - t18;
t380 = pkin(4) + pkin(5);
t6 = -pkin(8) * t95 - t116 * t380 + t284;
t19 = t226 * t44 + t228 * t54;
t12 = t116 * qJ(5) + t164 * qJD(5) + t19;
t7 = pkin(8) * t94 + t12;
t119 = -t232 * t180 + t181 * t378;
t109 = qJD(3) * qJ(4) + t119;
t185 = -qJD(1) * t216 + qJD(2);
t87 = pkin(3) * t164 - qJ(4) * t166 + t185;
t52 = -t226 * t109 + t228 * t87;
t290 = qJD(5) - t52;
t26 = -pkin(8) * t265 - t164 * t380 + t290;
t53 = t228 * t109 + t226 * t87;
t37 = t164 * qJ(5) + t53;
t28 = -pkin(8) * t133 + t37;
t9 = t231 * t26 + t234 * t28;
t2 = -qJD(6) * t9 - t231 * t7 + t234 * t6;
t410 = t320 * t9 + t2;
t274 = t231 * t28 - t234 * t26;
t1 = -qJD(6) * t274 + t231 * t6 + t234 * t7;
t409 = t274 * t320 + t1;
t24 = t133 * t322 - t231 * t94 - t234 * t95 + t265 * t323;
t408 = -t24 + t415;
t405 = t265 ^ 2;
t404 = t380 * t94;
t14 = -pkin(4) * t116 + t284;
t403 = -t164 * t37 + t14;
t402 = t164 * t265;
t398 = -t378 * t188 - t232 * t190;
t327 = t221 * pkin(3) + t220 * qJ(4);
t104 = t226 * t116;
t161 = t164 ^ 2;
t296 = t161 * t228 + t104;
t353 = t265 * t166;
t396 = t296 + t353;
t324 = qJD(5) * t265;
t394 = -qJ(5) * t95 - t324;
t105 = t228 * t116;
t330 = t161 * t226 - t105;
t355 = t133 * t166;
t393 = -t330 + t355;
t391 = t166 * qJD(3);
t390 = qJ(2) * qJDD(1);
t389 = t176 * t24 + t407 * t413;
t112 = -qJDD(6) + t116;
t387 = t112 * t392 - t320 * t359;
t254 = t311 - t335;
t170 = -t229 * t303 + t309;
t270 = t116 * t179 - t164 * t170;
t386 = -t133 * t171 + t226 * t270 - t254 * t94;
t357 = qJ(5) * t228;
t257 = t226 * t380 - t357;
t343 = t226 * qJ(5);
t302 = pkin(3) + t343;
t172 = t228 * t380 + t302;
t352 = t265 * t226;
t354 = t133 * t228;
t268 = t352 - t354;
t360 = t95 * t228;
t83 = t226 * t94;
t384 = t164 * t268 - t360 + t83;
t240 = t248 - t394;
t13 = t240 - t404;
t383 = t13 + t399;
t362 = t228 * t94;
t363 = t226 * t95;
t382 = t170 * t268 - t179 * (t362 + t363);
t381 = t166 ^ 2;
t379 = pkin(4) * t94;
t377 = pkin(8) * t226;
t374 = g(2) * t371;
t211 = g(3) * t220;
t372 = t407 * t406;
t370 = -pkin(8) + qJ(4);
t77 = pkin(3) * t171 + qJ(4) * t170 - qJD(4) * t179;
t90 = t254 * qJD(2) + qJD(3) * t398;
t42 = t226 * t77 + t228 * t90;
t187 = t370 * t226;
t189 = t370 * t228;
t125 = t187 * t234 - t189 * t231;
t118 = -t378 * t180 - t162;
t107 = t226 * t118;
t111 = pkin(3) * t166 + qJ(4) * t164;
t29 = t107 + (pkin(8) * t164 - t111) * t228 - t380 * t166;
t350 = t164 * t226;
t65 = t226 * t111 + t228 * t118;
t45 = t166 * qJ(5) + t65;
t35 = -pkin(8) * t350 + t45;
t369 = qJD(4) * t176 + qJD(6) * t125 - t231 * t29 - t234 * t35;
t127 = t187 * t231 + t189 * t234;
t368 = -qJD(4) * t392 - qJD(6) * t127 + t231 * t35 - t234 * t29;
t365 = t166 * t406;
t361 = t407 * t166;
t351 = t164 * t166;
t348 = t220 * t233;
t347 = t220 * t235;
t346 = t221 * t228;
t345 = t221 * t233;
t344 = t221 * t235;
t341 = t226 * t233;
t337 = t228 * t235;
t334 = t233 * t228;
t333 = t235 * t226;
t332 = t235 * t371;
t262 = qJD(3) * pkin(3) - qJD(4) + t118;
t245 = qJ(5) * t265 + t262;
t51 = -pkin(4) * t133 - t245;
t331 = qJD(4) - t51;
t113 = -pkin(3) * t254 - qJ(4) * t179 - t216;
t69 = t226 * t113 + t228 * t128;
t329 = (g(1) * t337 + g(2) * t334) * t220;
t328 = g(1) * t348 - g(2) * t347;
t223 = t227 ^ 2;
t224 = t229 ^ 2;
t326 = t223 + t224;
t321 = -qJD(4) - t262;
t316 = qJ(4) * t105;
t57 = -qJ(5) * t254 + t69;
t196 = t235 * t216;
t314 = pkin(3) * t344 + qJ(4) * t347 + t196;
t312 = g(1) * t344 + g(2) * t345 + t211;
t17 = -t240 + t379;
t305 = -t17 - t212;
t80 = t226 * t90;
t41 = t228 * t77 - t80;
t298 = t326 * qJD(1) ^ 2;
t297 = qJD(5) * t226 - t164 * t257 + t119;
t64 = t111 * t228 - t107;
t120 = t226 * t128;
t68 = t113 * t228 - t120;
t295 = t320 ^ 2;
t27 = t171 * qJ(5) - qJD(5) * t254 + t42;
t294 = pkin(4) * t346 + t221 * t343 + t327;
t293 = t25 * t392 + t359 * t406;
t292 = 0.2e1 * t326;
t291 = t176 * t112 + t320 * t413;
t149 = t221 * t341 + t337;
t151 = t221 * t333 - t334;
t289 = -g(1) * t149 + g(2) * t151;
t150 = t221 * t334 - t333;
t152 = t221 * t337 + t341;
t288 = g(1) * t150 - g(2) * t152;
t283 = t330 + t355;
t282 = -qJ(4) * t362 + qJD(4) * t354 - t312;
t281 = pkin(4) * t226 - t357;
t279 = -t12 * t226 + t14 * t228;
t278 = t17 * t179 - t170 * t51;
t277 = -t18 * t228 - t19 * t226;
t276 = -t226 * t52 + t228 * t53;
t32 = t120 + (-pkin(8) * t179 - t113) * t228 + t380 * t254;
t43 = t179 * t377 + t57;
t15 = -t231 * t43 + t234 * t32;
t16 = t231 * t32 + t234 * t43;
t273 = t170 * t262 - t179 * t248;
t271 = qJ(4) * t95 + qJD(4) * t265;
t62 = -t116 * t254 + t164 * t171;
t269 = -t133 ^ 2 - t405;
t267 = t149 * t234 - t150 * t231;
t266 = t149 * t231 + t150 * t234;
t264 = pkin(4) * t228 + t302;
t261 = -t216 - t327;
t260 = -t133 * t350 - t362;
t256 = -t150 * pkin(4) - qJ(5) * t149 + t332;
t255 = t94 + t402;
t253 = g(3) * t392;
t252 = (t133 * t170 + t179 * t94) * t226;
t251 = t152 * pkin(4) + qJ(5) * t151 + t314;
t249 = -g(1) * t151 - g(2) * t149 - t211 * t226;
t247 = t95 + t411;
t246 = t263 + t356;
t244 = -t360 - t83 + (t352 + t354) * t164;
t242 = (-g(1) * t261 - t374) * t233;
t241 = t292 * t319 - t287;
t238 = t239 + t394;
t195 = qJ(4) * t344;
t192 = qJ(4) * t345;
t102 = t176 * t179;
t101 = t392 * t179;
t97 = t151 * t231 + t152 * t234;
t96 = t151 * t234 - t152 * t231;
t70 = t179 * t281 - t398;
t67 = -t164 * t281 + t119;
t63 = -t179 * t257 + t398;
t60 = -t181 * t325 + t315;
t59 = pkin(4) * t254 - t68;
t56 = t168 * t179 - t170 * t392;
t55 = t170 * t176 + t179 * t395;
t48 = t228 * t402 + t363;
t47 = -pkin(4) * t166 - t64;
t40 = -t170 * t281 - t412;
t38 = (-t170 * t265 + t179 * t95) * t228;
t36 = -pkin(4) * t164 + t290;
t34 = t296 - t353;
t33 = t133 * t380 + t245;
t31 = -pkin(4) * t171 - t41;
t30 = t170 * t257 + t412;
t23 = -t170 * t377 + t27;
t22 = t80 + (pkin(8) * t170 - t77) * t228 - t380 * t171;
t20 = t171 * t265 + t228 * t270 - t254 * t95;
t4 = -qJD(6) * t16 + t234 * t22 - t231 * t23;
t3 = qJD(6) * t15 + t231 * t22 + t234 * t23;
t5 = [0, 0, 0, 0, 0, qJDD(1), t397, t287, 0, 0, t223 * qJDD(1), 0.2e1 * t227 * t317, 0, t224 * qJDD(1), 0, 0, t246 * t229, -t246 * t227, t292 * t390 + t241, pkin(1) * t263 + (t326 * t390 + t241) * qJ(2), -t115 * t179 - t166 * t170, -t115 * t254 - t166 * t171 - t270, -qJD(3) * t170 + qJDD(3) * t179, t62, -qJD(3) * t171 + qJDD(3) * t254, 0, -qJD(3) * t91 + qJDD(3) * t398 - t116 * t216 + t171 * t185 - t184 * t254 + t221 * t397, -qJD(3) * t90 - qJDD(3) * t128 + t115 * t216 - t170 * t185 + t179 * t184 - t328, t115 * t398 - t116 * t128 + t118 * t170 - t119 * t171 - t164 * t90 + t166 * t91 - t179 * t61 + t254 * t60 - t287, t60 * t128 + t119 * t90 + t61 * t398 - t118 * t91 - t184 * t216 - g(1) * (-t216 * t233 + t332) - g(2) * (t233 * t371 + t196) t38, t382, t20, t252, -t386, t62, t116 * t68 - t133 * t91 + t164 * t41 + t171 * t52 - t18 * t254 + t226 * t273 - t398 * t94 + t288, -t116 * t69 - t164 * t42 - t171 * t53 + t19 * t254 + t228 * t273 + t265 * t91 - t398 * t95 + t289, t133 * t42 - t265 * t41 - t68 * t95 - t69 * t94 + t277 * t179 + (t226 * t53 + t228 * t52) * t170 + t328, -g(1) * t332 - g(2) * t314 + t18 * t68 + t19 * t69 + t248 * t398 - t262 * t91 + t52 * t41 + t53 * t42 + t242, t38, t20, -t382, t62, t386, t252, -t116 * t59 - t133 * t40 + t14 * t254 - t164 * t31 - t171 * t36 + t226 * t278 + t70 * t94 + t288, t133 * t27 + t265 * t31 - t57 * t94 + t59 * t95 + t279 * t179 + (t226 * t37 - t228 * t36) * t170 + t328, t116 * t57 - t12 * t254 + t164 * t27 + t171 * t37 - t228 * t278 - t265 * t40 - t70 * t95 - t289, -g(1) * t256 - g(2) * t251 + t12 * t57 + t14 * t59 + t17 * t70 + t37 * t27 + t36 * t31 + t51 * t40 + t242, -t102 * t24 - t407 * t55, t101 * t24 - t102 * t25 + t406 * t55 - t407 * t56, -t102 * t112 - t171 * t407 - t24 * t254 - t320 * t55, t101 * t25 + t406 * t56, t101 * t112 + t171 * t406 - t25 * t254 - t320 * t56, -t112 * t254 - t171 * t320, g(1) * t266 - g(2) * t97 + t13 * t101 - t15 * t112 + t171 * t274 + t2 * t254 + t63 * t25 + t30 * t406 + t320 * t4 + t33 * t56, g(1) * t267 - g(2) * t96 - t1 * t254 + t13 * t102 + t16 * t112 + t9 * t171 - t63 * t24 - t3 * t320 + t30 * t407 - t33 * t55, -t1 * t101 - t102 * t2 + t15 * t24 - t16 * t25 - t274 * t55 - t3 * t406 - t4 * t407 - t56 * t9 - t328, t1 * t16 + t9 * t3 + t2 * t15 - t274 * t4 + t13 * t63 + t33 * t30 - g(1) * (-pkin(5) * t150 + t256) - g(2) * (pkin(5) * t152 - pkin(8) * t347 + t251) + (-g(1) * (pkin(8) * t220 + t261) - t374) * t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t317, t318, -t298, -qJ(2) * t298 - t263, 0, 0, 0, 0, 0, 0, t280 + 0.2e1 * t391 (-t164 - t310) * qJD(3) + t313, -t161 - t381, t118 * t166 + t119 * t164 + t184 - t397, 0, 0, 0, 0, 0, 0, t393, -t396, t244, t164 * t276 + t166 * t262 - t277 - t397, 0, 0, 0, 0, 0, 0, t393, t244, t396, -t166 * t51 + (t226 * t36 + t228 * t37) * t164 - t279 - t397, 0, 0, 0, 0, 0, 0, t291 + t365, t361 - t387, t293 - t389, -t1 * t392 + t166 * t33 - t176 * t2 - t274 * t413 - t359 * t9 - t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t351, -t161 + t381 (t164 - t310) * qJD(3) + t313, -t351, -t280, qJDD(3), qJD(3) * t119 - t166 * t185 - t212 + t399 + t61, t164 * t185 + (t118 + t162) * qJD(3) + t312 - t315, 0, 0, t48, -t384, t34, t260, -t283, -t351, -qJ(4) * t104 - pkin(3) * t94 + t119 * t133 - t166 * t52 + t304 * t228 + (t226 * t321 - t64) * t164 + t329, -t316 - pkin(3) * t95 - t119 * t265 + t166 * t53 + (t228 * t321 + t65) * t164 + t239 * t226, -t133 * t65 + t265 * t64 + (-t164 * t52 + t19) * t228 + (-t164 * t53 - t18 + t271) * t226 + t282, t248 * pkin(3) - t53 * t65 - t52 * t64 + t262 * t119 - g(1) * (-pkin(3) * t347 + t195) - g(2) * (-pkin(3) * t348 + t192) - g(3) * t327 + t276 * qJD(4) + (-t18 * t226 + t19 * t228) * qJ(4), t48, t34, t384, -t351, t283, t260, t133 * t67 + t164 * t47 + t166 * t36 - t264 * t94 + t305 * t228 + (-qJ(4) * t116 + qJD(5) * t133 - t164 * t331) * t226 + t329, -t133 * t45 - t265 * t47 + (t164 * t36 + t12) * t228 + (t271 + t403) * t226 + t282, t316 + t265 * t67 - t166 * t37 + t264 * t95 + (t228 * t331 - t45) * t164 + (t399 + t305 + t324) * t226, -t37 * t45 - t51 * t67 - t36 * t47 - g(1) * t195 - g(2) * t192 - g(3) * t294 + (qJ(4) * t12 + qJD(4) * t37) * t228 + (qJ(4) * t14 + qJD(4) * t36 - qJD(5) * t51) * t226 + (-t17 + t399) * t264, t24 * t392 - t359 * t407, t293 + t389, t361 + t387, t25 * t176 - t406 * t413, t291 - t365, t320 * t166, -t125 * t112 + t368 * t320 - t274 * t166 + t172 * t25 + t297 * t406 - t413 * t33 + (-t212 + t383) * t176, t127 * t112 - t9 * t166 - t172 * t24 + t221 * t253 + t297 * t407 - t320 * t369 - t359 * t33 - t383 * t392, -t1 * t176 + t125 * t24 - t127 * t25 + t2 * t392 - t274 * t359 - t368 * t407 - t369 * t406 + t413 * t9 + t312, t1 * t127 + t2 * t125 + t13 * t172 - g(1) * (-pkin(8) * t344 + t195) - g(2) * (-pkin(8) * t345 + t192) - g(3) * (pkin(5) * t346 + t294) + t369 * t9 - t368 * t274 + t297 * t33 + (g(3) * pkin(8) + t172 * t287) * t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t255, t247, t269, -t133 * t53 + t265 * t52 + t239, 0, 0, 0, 0, 0, 0, t255, t269, -t247, -t133 * t37 - t265 * t36 + t238 + t379, 0, 0, 0, 0, 0, 0, -t25 - t414, t24 + t415, t417 + t418, t274 * t407 - t406 * t9 + t238 + t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t133 * t265 - t280 - t391, t95 - t411, -t161 - t405, t265 * t51 + t249 + t403, 0, 0, 0, 0, 0, 0, -t234 * t112 - t231 * t295 - t265 * t406, t231 * t112 - t234 * t295 - t265 * t407, t231 * t416 - t408 * t234, t231 * t409 + t234 * t410 - t265 * t33 + t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, t417 - t418, t408, -t372, t416, -t112, -g(1) * t96 - g(2) * t267 + t220 * t253 - t33 * t407 + t410, g(1) * t97 + g(2) * t266 + t176 * t211 + t33 * t406 - t409, 0, 0;];
tau_reg  = t5;
