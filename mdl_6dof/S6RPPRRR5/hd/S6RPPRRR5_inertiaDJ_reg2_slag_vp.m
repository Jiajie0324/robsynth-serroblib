% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRR5_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:29:01
% EndTime: 2019-03-09 02:29:06
% DurationCPUTime: 1.57s
% Computational Cost: add. (2023->159), mult. (3835->269), div. (0->0), fcn. (3369->6), ass. (0->108)
t124 = sin(qJ(5));
t132 = qJD(4) + qJD(5);
t59 = sin(qJ(4));
t61 = cos(qJ(5));
t62 = cos(qJ(4));
t91 = t124 * t62;
t35 = t61 * t59 + t91;
t23 = t132 * t35;
t116 = t61 * t62;
t89 = qJD(5) * t124;
t92 = t124 * t59;
t24 = -qJD(4) * t92 + t132 * t116 - t59 * t89;
t36 = -t92 + t116;
t93 = t124 * t36;
t73 = (-t35 * t61 + t93) * qJD(5);
t136 = (-t124 * t24 + t23 * t61 + t73) * pkin(4);
t58 = sin(qJ(6));
t52 = t58 ^ 2;
t60 = cos(qJ(6));
t54 = t60 ^ 2;
t133 = (t52 - t54) * qJD(6);
t111 = qJD(2) * t59;
t56 = -pkin(7) + qJ(2);
t126 = pkin(8) - t56;
t94 = t126 * t62;
t28 = -qJD(4) * t94 + t111;
t37 = t126 * t59;
t106 = t59 * qJD(4);
t110 = qJD(2) * t62;
t74 = t126 * t106 + t110;
t131 = -t124 * t74 - t37 * t89 - (-qJD(5) * t94 + t28) * t61;
t57 = pkin(1) + qJ(3);
t47 = pkin(4) * t59 + t57;
t72 = pkin(5) * t35 - pkin(9) * t36 + t47;
t135 = -qJD(6) * t72 + t131;
t33 = t36 ^ 2;
t130 = pkin(4) * t61;
t129 = pkin(5) * t23;
t25 = -t124 * t37 + t61 * t94;
t26 = -t126 * t91 - t61 * t37;
t7 = t26 * qJD(5) + t124 * t28 - t61 * t74;
t128 = t25 * t7;
t127 = t7 * t36;
t51 = qJD(6) * t60;
t125 = t25 * t51 + t7 * t58;
t50 = -pkin(5) - t130;
t123 = t23 * t50;
t122 = t23 * t52;
t121 = t23 * t60;
t120 = t35 * t24;
t119 = t36 * t23;
t118 = t36 * t58;
t21 = t54 * t23;
t117 = t60 * t24;
t87 = pkin(4) * t89;
t115 = t50 * t51 + t58 * t87;
t113 = t52 + t54;
t112 = pkin(4) * qJD(5);
t109 = qJD(3) * t57;
t107 = qJD(6) * t58;
t105 = t62 * qJD(4);
t104 = qJ(2) * qJD(2);
t103 = 0.2e1 * t120;
t102 = t58 * t121;
t101 = pkin(5) * t107;
t100 = pkin(5) * t51;
t99 = t61 * t112;
t98 = t124 * pkin(4);
t97 = t58 * t51;
t96 = t59 * t105;
t95 = t35 ^ 2 + t33;
t12 = t113 * t24;
t90 = t113 * t61;
t53 = t59 ^ 2;
t55 = t62 ^ 2;
t40 = (t53 + t55) * qJD(2);
t88 = t33 * t97;
t44 = pkin(4) * t105 + qJD(3);
t10 = t60 * t26 + t58 * t72;
t9 = -t58 * t26 + t60 * t72;
t86 = t10 * t60 - t58 * t9;
t85 = t10 * t58 + t60 * t9;
t84 = t25 * t23 - t127;
t83 = t119 - t120;
t49 = t98 + pkin(9);
t82 = t35 * t49 - t36 * t50;
t80 = -t23 * t58 + t36 * t51;
t79 = t36 * t107 + t121;
t14 = t24 * t58 + t35 * t51;
t13 = t35 * t107 - t117;
t76 = t50 * t107 - t60 * t87;
t75 = 0.2e1 * t83;
t71 = pkin(5) * t24 + pkin(9) * t23 + t44;
t2 = t26 * t107 + t135 * t60 - t58 * t71;
t3 = t135 * t58 - t26 * t51 + t60 * t71;
t69 = -t86 * qJD(6) + t2 * t58 - t3 * t60;
t1 = -t85 * qJD(6) - t2 * t60 - t3 * t58;
t67 = pkin(4) * t73 - t24 * t49 - t123;
t64 = -t131 * t35 + t26 * t24 + t84;
t63 = 0.2e1 * qJD(2);
t43 = -0.2e1 * t97;
t42 = 0.2e1 * t97;
t34 = -0.2e1 * t133;
t30 = t90 * t112;
t19 = t25 * t107;
t11 = t36 * t133 + t102;
t4 = -0.4e1 * t36 * t97 + t122 - t21;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0.2e1 * t104, 0, 0, 0, 0, 0, 0, 0, t63, 0.2e1 * qJD(3), 0.2e1 * t104 + 0.2e1 * t109, -0.2e1 * t96, 0.2e1 * (t53 - t55) * qJD(4), 0, 0.2e1 * t96, 0, 0, 0.2e1 * qJD(3) * t59 + 0.2e1 * t57 * t105, 0.2e1 * qJD(3) * t62 - 0.2e1 * t57 * t106, -0.2e1 * t40, 0.2e1 * t56 * t40 + 0.2e1 * t109, -0.2e1 * t119, 0.2e1 * t23 * t35 - 0.2e1 * t24 * t36, 0, t103, 0, 0, 0.2e1 * t24 * t47 + 0.2e1 * t35 * t44, -0.2e1 * t23 * t47 + 0.2e1 * t36 * t44, -0.2e1 * t64, -0.2e1 * t131 * t26 + 0.2e1 * t47 * t44 + 0.2e1 * t128, -0.2e1 * t36 * t21 - 0.2e1 * t88, 0.4e1 * t36 * t102 + 0.2e1 * t33 * t133, 0.2e1 * t36 * t117 - 0.2e1 * t79 * t35, -0.2e1 * t52 * t119 + 0.2e1 * t88, -0.2e1 * t24 * t118 - 0.2e1 * t80 * t35, t103, 0.2e1 * t7 * t118 + 0.2e1 * t24 * t9 + 0.2e1 * t80 * t25 + 0.2e1 * t3 * t35, -0.2e1 * t10 * t24 + 0.2e1 * t60 * t127 + 0.2e1 * t2 * t35 - 0.2e1 * t79 * t25, 0.2e1 * t85 * t23 + 0.2e1 * t69 * t36, -0.2e1 * t10 * t2 + 0.2e1 * t3 * t9 + 0.2e1 * t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), 0, 0, 0, 0, 0, 0, -t105, t106, 0, -qJD(3), 0, 0, 0, 0, 0, 0, -t24, t23, 0, -t44, 0, 0, 0, 0, 0, 0, t13, t14, -t21 - t122, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, 0, t75, t64, 0, 0, 0, 0, 0, 0, -t95 * t51 + t58 * t75, t95 * t107 + t60 * t75, 0, t1 * t35 + t86 * t24 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t35 * t12 - 0.2e1 * t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, 0, -t105, 0, -t56 * t106 + t110, -t56 * t105 - t111, 0, 0, 0, 0, -t23, 0, -t24, 0, -t7, t131, t136, -t7 * t130 - t131 * t98 + t25 * t87 + t26 * t99, -t11, t4, t14, t11, -t13, 0, t19 + (-t82 * qJD(6) - t7) * t60 + t67 * t58, t82 * t107 + t67 * t60 + t125, t1, t7 * t50 + (t25 * t124 + t86 * t61) * t112 + t1 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, -t105, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t24, 0, -t136, 0, 0, 0, 0, 0, 0, -t79, -t80, t12, t123 + t49 * t12 + (t35 * t90 - t93) * t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t87, -0.2e1 * t99, 0, 0, t42, t34, 0, t43, 0, 0, 0.2e1 * t76, 0.2e1 * t115, 0.2e1 * t30, 0.2e1 * (t124 * t50 + t49 * t90) * t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, 0, -t24, 0, -t7, t131, 0, 0, -t11, t4, t14, t11, -t13, 0, t19 + (-pkin(9) * t24 + t129) * t58 + (-t7 + (-pkin(5) * t36 - pkin(9) * t35) * qJD(6)) * t60, t79 * pkin(5) + t13 * pkin(9) + t125, t1, -pkin(5) * t7 + t1 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t24, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t80, t12, pkin(9) * t12 - t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t87, -t99, 0, 0, t42, t34, 0, t43, 0, 0, t76 - t101, -t100 + t115, t30 (-t124 * pkin(5) + pkin(9) * t90) * t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t34, 0, t43, 0, 0, -0.2e1 * t101, -0.2e1 * t100, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, 0, -t80, t24, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, t51, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t107, 0, -t49 * t51 - t58 * t99, t49 * t107 - t60 * t99, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t107, 0, -pkin(9) * t51, pkin(9) * t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
