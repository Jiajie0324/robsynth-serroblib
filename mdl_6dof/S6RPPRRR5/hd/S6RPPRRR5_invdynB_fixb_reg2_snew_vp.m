% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:50:45
% EndTime: 2019-05-05 15:50:57
% DurationCPUTime: 8.60s
% Computational Cost: add. (30769->519), mult. (60617->742), div. (0->0), fcn. (38169->8), ass. (0->344)
t557 = sin(qJ(5));
t550 = qJDD(4) + qJDD(5);
t558 = sin(qJ(4));
t561 = cos(qJ(5));
t562 = cos(qJ(4));
t509 = (t557 * t562 + t558 * t561) * qJD(1);
t602 = qJD(1) * t562;
t511 = -t557 * t558 * qJD(1) + t561 * t602;
t619 = t511 * t509;
t643 = t550 - t619;
t645 = t557 * t643;
t644 = t561 * t643;
t600 = qJD(1) * qJD(4);
t586 = t562 * t600;
t598 = qJDD(1) * t558;
t517 = -t586 - t598;
t587 = t558 * t600;
t596 = qJDD(1) * t562;
t518 = -t587 + t596;
t441 = -qJD(5) * t509 + t517 * t557 + t518 * t561;
t551 = qJD(4) + qJD(5);
t614 = t551 * t509;
t423 = t441 - t614;
t556 = sin(qJ(6));
t560 = cos(qJ(6));
t477 = t511 * t556 - t560 * t551;
t479 = t511 * t560 + t551 * t556;
t437 = t479 * t477;
t581 = -t561 * t517 + t557 * t518;
t440 = -qJD(5) * t511 - t581;
t569 = qJDD(6) - t440;
t640 = -t437 + t569;
t642 = t556 * t640;
t641 = t560 * t640;
t405 = -t477 * qJD(6) + t560 * t441 + t556 * t550;
t502 = qJD(6) + t509;
t447 = t502 * t477;
t390 = -t447 + t405;
t582 = t556 * t441 - t560 * t550;
t387 = (qJD(6) - t502) * t479 + t582;
t565 = qJD(1) ^ 2;
t559 = sin(qJ(1));
t563 = cos(qJ(1));
t529 = t563 * g(1) + t559 * g(2);
t552 = qJDD(1) * qJ(2);
t574 = t529 - t552;
t632 = pkin(1) + qJ(3);
t639 = t565 * t632 - qJDD(3) + t574;
t474 = t477 ^ 2;
t475 = t479 ^ 2;
t500 = t502 ^ 2;
t507 = t509 ^ 2;
t508 = t511 ^ 2;
t638 = t551 ^ 2;
t637 = 2 * qJD(3);
t636 = pkin(2) + pkin(3);
t635 = pkin(5) * t557;
t595 = qJDD(1) * t563;
t521 = -t559 * t565 + t595;
t634 = pkin(6) * t521;
t597 = qJDD(1) * t559;
t522 = t563 * t565 + t597;
t633 = pkin(6) * t522;
t631 = pkin(7) - qJ(2);
t630 = qJDD(1) * pkin(1);
t527 = qJD(4) * pkin(4) - pkin(8) * t602;
t599 = qJD(2) * qJD(1);
t548 = 0.2e1 * t599;
t473 = -qJDD(1) * pkin(7) + t548 - t639;
t585 = t562 * g(3) - t558 * t473;
t553 = t558 ^ 2;
t611 = t553 * t565;
t427 = -pkin(4) * t611 + pkin(8) * t517 - qJD(4) * t527 - t585;
t604 = t562 * t565;
t605 = t562 * t473;
t566 = qJDD(4) * pkin(4) - t518 * pkin(8) + t605 + (-pkin(4) * t604 - pkin(8) * t600 + g(3)) * t558;
t378 = t557 * t427 - t561 * t566;
t379 = t561 * t427 + t557 * t566;
t331 = -t378 * t561 + t379 * t557;
t629 = t331 * t558;
t628 = t331 * t562;
t398 = t437 + t569;
t627 = t398 * t556;
t626 = t398 * t560;
t555 = t565 * pkin(7);
t528 = t559 * g(1) - t563 * g(2);
t576 = -qJDD(2) + t528;
t570 = t565 * qJ(2) + t576;
t584 = t632 * qJDD(1);
t567 = t584 + t570;
t433 = -t517 * pkin(4) - pkin(8) * t611 - t555 + (t527 * t562 + t637) * qJD(1) + t567;
t625 = t433 * t557;
t624 = t433 * t561;
t457 = t619 + t550;
t623 = t457 * t557;
t622 = t457 * t561;
t621 = t502 * t556;
t620 = t502 * t560;
t589 = t558 * t604;
t525 = qJDD(4) + t589;
t618 = t525 * t558;
t617 = t525 * t562;
t526 = qJDD(4) - t589;
t616 = t526 * t558;
t615 = t526 * t562;
t613 = t551 * t557;
t612 = t551 * t561;
t554 = t562 ^ 2;
t610 = t554 * t565;
t461 = pkin(5) * t509 - pkin(9) * t511;
t347 = -t550 * pkin(5) - pkin(9) * t638 + t461 * t511 + t378;
t609 = t556 * t347;
t594 = qJD(1) * t637;
t490 = t567 + t594;
t472 = -t555 + t490;
t608 = t558 * t472;
t607 = t560 * t347;
t606 = t562 * t472;
t348 = -pkin(5) * t638 + pkin(9) * t550 - t461 * t509 + t379;
t349 = -t423 * pkin(9) + (t511 * t551 - t440) * pkin(5) + t433;
t306 = t560 * t348 + t556 * t349;
t603 = t553 + t554;
t593 = t557 * t437;
t592 = t561 * t437;
t591 = t559 * t619;
t590 = t563 * t619;
t588 = -pkin(5) * t561 - pkin(4);
t305 = t348 * t556 - t560 * t349;
t282 = t556 * t305 + t560 * t306;
t332 = t378 * t557 + t561 * t379;
t459 = t558 * g(3) + t605;
t410 = -t558 * t459 - t562 * t585;
t491 = -0.2e1 * t599 + t639;
t435 = -t490 * t559 - t563 * t491;
t499 = -pkin(1) * t565 + t548 - t574;
t501 = t570 + t630;
t451 = t563 * t499 - t501 * t559;
t481 = -t528 * t559 - t563 * t529;
t580 = t559 * t589;
t579 = t563 * t589;
t578 = g(3) * t559 + t634;
t577 = g(3) * t563 - t633;
t281 = -t305 * t560 + t306 * t556;
t409 = t562 * t459 - t558 * t585;
t434 = t490 * t563 - t491 * t559;
t448 = t499 * t559 + t501 * t563;
t480 = t528 * t563 - t529 * t559;
t573 = -t529 + 0.2e1 * t552 + t548;
t545 = -pkin(2) * t565 + g(3);
t572 = -pkin(2) * t597 + t563 * t545 - t633;
t568 = (-qJD(5) + t551) * t511 - t581;
t564 = qJD(4) ^ 2;
t534 = -t564 - t610;
t533 = t564 - t610;
t532 = -t564 - t611;
t531 = -t564 + t611;
t524 = (-t553 + t554) * t565;
t523 = t603 * t565;
t520 = t603 * qJDD(1);
t519 = -0.2e1 * t587 + t596;
t516 = 0.2e1 * t586 + t598;
t514 = t603 * t600;
t496 = -t508 + t638;
t495 = t507 - t638;
t494 = t518 * t558 + t554 * t600;
t493 = t517 * t562 + t553 * t600;
t489 = -t508 - t638;
t488 = -t534 * t558 - t617;
t487 = t532 * t562 - t616;
t486 = t534 * t562 - t618;
t485 = t533 * t562 + t616;
t484 = t532 * t558 + t615;
t483 = t531 * t558 + t617;
t482 = t636 * t520;
t476 = -pkin(2) * t595 - t545 * t559 - t634;
t470 = -t520 * t563 + t523 * t559;
t469 = -t520 * t559 - t523 * t563;
t467 = -pkin(2) * t490 + qJ(2) * g(3);
t465 = -t516 * t558 + t519 * t562;
t463 = -pkin(2) * t491 + g(3) * t632;
t462 = t508 - t507;
t455 = -t638 - t507;
t453 = t486 * t563 - t519 * t559;
t452 = t484 * t563 - t516 * t559;
t450 = t486 * t559 + t519 * t563;
t449 = t484 * t559 + t516 * t563;
t446 = -t475 + t500;
t445 = t474 - t500;
t444 = (-t509 * t561 + t511 * t557) * t551;
t443 = (-t509 * t557 - t511 * t561) * t551;
t442 = -t507 - t508;
t436 = -t475 + t474;
t432 = -t475 - t500;
t431 = t495 * t561 - t623;
t430 = -t496 * t557 + t644;
t429 = t495 * t557 + t622;
t428 = t496 * t561 + t645;
t426 = -t489 * t557 - t622;
t425 = t489 * t561 - t623;
t424 = t441 + t614;
t419 = (qJD(5) + t551) * t511 + t581;
t415 = -t500 - t474;
t414 = t441 * t561 - t511 * t613;
t413 = t441 * t557 + t511 * t612;
t412 = -t440 * t557 + t509 * t612;
t411 = t440 * t561 + t509 * t613;
t408 = t455 * t561 - t645;
t407 = t455 * t557 + t644;
t406 = t474 + t475;
t404 = -qJD(6) * t479 - t582;
t403 = (-t477 * t560 + t479 * t556) * t502;
t402 = (-t477 * t556 - t479 * t560) * t502;
t401 = t443 * t562 + t444 * t558;
t400 = t523 * t636 + t410;
t396 = t488 * t631 - t519 * t636 + t608;
t395 = t487 * t631 - t516 * t636 - t606;
t394 = t409 * t563 - t472 * t559;
t393 = t409 * t559 + t472 * t563;
t391 = -t447 - t405;
t388 = (-qJD(6) - t502) * t479 - t582;
t386 = -pkin(8) * t425 + t624;
t385 = t429 * t562 + t431 * t558;
t384 = t428 * t562 + t430 * t558;
t383 = t405 * t560 - t479 * t621;
t382 = t405 * t556 + t479 * t620;
t381 = -t404 * t556 + t477 * t620;
t380 = t404 * t560 + t477 * t621;
t377 = t486 * t636 - t488 * t632 + t585;
t376 = t484 * t636 - t487 * t632 + t459;
t375 = -t425 * t558 + t426 * t562;
t374 = t425 * t562 + t426 * t558;
t373 = t424 * t557 + t561 * t568;
t372 = -t419 * t561 - t423 * t557;
t371 = -t424 * t561 + t557 * t568;
t370 = -t419 * t557 + t423 * t561;
t368 = -pkin(8) * t407 + t625;
t367 = t403 * t561 + t557 * t569;
t366 = t403 * t557 - t561 * t569;
t365 = t445 * t560 - t627;
t364 = -t446 * t556 + t641;
t363 = t445 * t556 + t626;
t362 = t446 * t560 + t642;
t361 = t413 * t562 + t414 * t558;
t360 = t411 * t562 + t412 * t558;
t359 = -t407 * t558 + t408 * t562;
t358 = t407 * t562 + t408 * t558;
t357 = -t432 * t556 - t626;
t356 = t432 * t560 - t627;
t355 = t415 * t560 - t642;
t354 = t415 * t556 + t641;
t353 = t383 * t561 + t593;
t352 = t381 * t561 - t593;
t351 = t383 * t557 - t592;
t350 = t381 * t557 + t592;
t346 = -pkin(4) * t423 + pkin(8) * t426 + t625;
t342 = -pkin(4) * t419 + pkin(8) * t408 - t624;
t341 = t374 * t563 - t423 * t559;
t340 = t374 * t559 + t423 * t563;
t339 = t410 * t631 - t472 * t636;
t338 = t358 * t563 - t419 * t559;
t337 = t358 * t559 + t419 * t563;
t336 = -t387 * t560 - t391 * t556;
t335 = t388 * t560 - t390 * t556;
t334 = -t387 * t556 + t391 * t560;
t333 = t388 * t556 + t390 * t560;
t330 = -t371 * t558 + t373 * t562;
t329 = t371 * t562 + t373 * t558;
t328 = t370 * t562 + t372 * t558;
t327 = t365 * t561 - t387 * t557;
t326 = t364 * t561 - t391 * t557;
t325 = t365 * t557 + t387 * t561;
t324 = t364 * t557 + t391 * t561;
t323 = t366 * t562 + t367 * t558;
t322 = t357 * t561 + t390 * t557;
t321 = t357 * t557 - t390 * t561;
t320 = t409 * t636 - t410 * t632;
t319 = t355 * t561 - t388 * t557;
t318 = t355 * t557 + t388 * t561;
t317 = t335 * t561 - t436 * t557;
t316 = t335 * t557 + t436 * t561;
t315 = t329 * t563 - t442 * t559;
t314 = t329 * t559 + t442 * t563;
t313 = -pkin(4) * t433 + pkin(8) * t332;
t312 = t336 * t561 - t406 * t557;
t311 = t336 * t557 + t406 * t561;
t310 = -pkin(9) * t356 + t607;
t309 = -pkin(9) * t354 + t609;
t308 = t351 * t562 + t353 * t558;
t307 = t350 * t562 + t352 * t558;
t303 = -pkin(8) * t371 - t331;
t302 = -pkin(4) * t442 + pkin(8) * t373 + t332;
t301 = t332 * t562 - t629;
t300 = t332 * t558 + t628;
t299 = -pkin(5) * t356 + t306;
t298 = -pkin(5) * t354 + t305;
t297 = t325 * t562 + t327 * t558;
t296 = t324 * t562 + t326 * t558;
t295 = -t321 * t558 + t322 * t562;
t294 = t321 * t562 + t322 * t558;
t293 = -t318 * t558 + t319 * t562;
t292 = t318 * t562 + t319 * t558;
t291 = t300 * t563 - t433 * t559;
t290 = t300 * t559 + t433 * t563;
t289 = t316 * t562 + t317 * t558;
t288 = -t311 * t558 + t312 * t562;
t287 = t311 * t562 + t312 * t558;
t286 = t562 * t346 + t375 * t631 + t558 * t386 - t423 * t636;
t285 = pkin(4) * t425 + t374 * t636 - t375 * t632 - t379;
t284 = t294 * t563 - t356 * t559;
t283 = t294 * t559 + t356 * t563;
t280 = t292 * t563 - t354 * t559;
t279 = t292 * t559 + t354 * t563;
t278 = t562 * t342 + t359 * t631 + t558 * t368 - t419 * t636;
t277 = pkin(4) * t407 + t358 * t636 - t359 * t632 - t378;
t276 = t287 * t563 - t334 * t559;
t275 = t287 * t559 + t334 * t563;
t274 = t282 * t561 + t347 * t557;
t273 = t282 * t557 - t347 * t561;
t272 = -pkin(9) * t334 - t281;
t271 = -pkin(8) * t321 - t299 * t557 + t310 * t561;
t270 = -pkin(8) * t318 - t298 * t557 + t309 * t561;
t269 = pkin(4) * t371 + t329 * t636 - t330 * t632;
t268 = -pkin(4) * t356 + pkin(8) * t322 + t299 * t561 + t310 * t557;
t267 = -pkin(4) * t354 + pkin(8) * t319 + t298 * t561 + t309 * t557;
t266 = t562 * t302 + t558 * t303 + t330 * t631 - t442 * t636;
t265 = -pkin(8) * t311 + t272 * t561 + t334 * t635;
t264 = -pkin(8) * t629 + t301 * t631 + t562 * t313 - t433 * t636;
t263 = pkin(8) * t312 + t557 * t272 + t334 * t588;
t262 = -t273 * t558 + t274 * t562;
t261 = t273 * t562 + t274 * t558;
t260 = pkin(4) * t331 + t300 * t636 - t301 * t632;
t259 = -pkin(8) * t273 + (-pkin(9) * t561 + t635) * t281;
t258 = t261 * t563 - t281 * t559;
t257 = t261 * t559 + t281 * t563;
t256 = pkin(4) * t321 - pkin(5) * t390 + pkin(9) * t357 + t294 * t636 - t295 * t632 + t609;
t255 = pkin(4) * t318 + pkin(5) * t388 + pkin(9) * t355 + t292 * t636 - t293 * t632 - t607;
t254 = pkin(8) * t274 + (-pkin(9) * t557 + t588) * t281;
t253 = t562 * t268 + t558 * t271 + t295 * t631 - t356 * t636;
t252 = pkin(4) * t311 + pkin(5) * t406 + pkin(9) * t336 + t287 * t636 - t288 * t632 + t282;
t251 = t562 * t267 + t558 * t270 + t293 * t631 - t354 * t636;
t250 = t562 * t263 + t558 * t265 + t288 * t631 - t334 * t636;
t249 = pkin(4) * t273 - pkin(5) * t347 + pkin(9) * t282 + t261 * t636 - t262 * t632;
t248 = t562 * t254 + t558 * t259 + t262 * t631 - t281 * t636;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t522, -t521, 0, t481, 0, 0, 0, 0, 0, 0, 0, t522, t521, t451, 0, 0, 0, 0, 0, 0, 0, t521, -t522, t435, 0, 0, 0, 0, 0, 0, t452, t453, t470, t394, 0, 0, 0, 0, 0, 0, t338, t341, t315, t291, 0, 0, 0, 0, 0, 0, t280, t284, t276, t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t521, -t522, 0, t480, 0, 0, 0, 0, 0, 0, 0, -t521, t522, t448, 0, 0, 0, 0, 0, 0, 0, t522, t521, t434, 0, 0, 0, 0, 0, 0, t449, t450, t469, t393, 0, 0, 0, 0, 0, 0, t337, t340, t314, t290, 0, 0, 0, 0, 0, 0, t279, t283, t275, t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t487, t488, 0, t410, 0, 0, 0, 0, 0, 0, t359, t375, t330, t301, 0, 0, 0, 0, 0, 0, t293, t295, t288, t262; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t521, 0, -t522, 0, -t578, -t577, -t480, -pkin(6) * t480, 0, -t521, t522, 0, 0, 0, -t448, t578, t577, -pkin(6) * t448 + (-pkin(1) * t559 + qJ(2) * t563) * g(3), 0, t522, t521, 0, 0, 0, -t434, t572, t476, -pkin(6) * t434 - t463 * t559 + t467 * t563, t494 * t563 - t580, t465 * t563 - t524 * t559, t485 * t563 - t559 * t596, t493 * t563 + t580, t483 * t563 + t558 * t597, -qJDD(4) * t559 - t514 * t563, -pkin(6) * t449 - t376 * t559 + t395 * t563, -pkin(6) * t450 - t377 * t559 + t396 * t563, -pkin(6) * t469 + t400 * t563 + t482 * t559, -pkin(6) * t393 - t320 * t559 + t339 * t563, t361 * t563 - t591, t328 * t563 - t462 * t559, t384 * t563 - t424 * t559, t360 * t563 + t591, t385 * t563 - t559 * t568, t401 * t563 - t550 * t559, -pkin(6) * t337 - t277 * t559 + t278 * t563, -pkin(6) * t340 - t285 * t559 + t286 * t563, -pkin(6) * t314 + t266 * t563 - t269 * t559, -pkin(6) * t290 - t260 * t559 + t264 * t563, t308 * t563 - t382 * t559, t289 * t563 - t333 * t559, t296 * t563 - t362 * t559, t307 * t563 - t380 * t559, t297 * t563 - t363 * t559, t323 * t563 - t402 * t559, -pkin(6) * t279 + t251 * t563 - t255 * t559, -pkin(6) * t283 + t253 * t563 - t256 * t559, -pkin(6) * t275 + t250 * t563 - t252 * t559, -pkin(6) * t257 + t248 * t563 - t249 * t559; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t522, 0, t521, 0, t577, -t578, t481, pkin(6) * t481, 0, -t522, -t521, 0, 0, 0, t451, -t577, t578, pkin(6) * t451 + (pkin(1) * t563 + qJ(2) * t559) * g(3), 0, -t521, t522, 0, 0, 0, t435, -t476, t572, pkin(6) * t435 + t463 * t563 + t467 * t559, t494 * t559 + t579, t465 * t559 + t524 * t563, t485 * t559 + t562 * t595, t493 * t559 - t579, t483 * t559 - t558 * t595, qJDD(4) * t563 - t514 * t559, pkin(6) * t452 + t376 * t563 + t395 * t559, pkin(6) * t453 + t377 * t563 + t396 * t559, pkin(6) * t470 + t400 * t559 - t482 * t563, pkin(6) * t394 + t320 * t563 + t339 * t559, t361 * t559 + t590, t328 * t559 + t462 * t563, t384 * t559 + t424 * t563, t360 * t559 - t590, t385 * t559 + t563 * t568, t401 * t559 + t550 * t563, pkin(6) * t338 + t277 * t563 + t278 * t559, pkin(6) * t341 + t285 * t563 + t286 * t559, pkin(6) * t315 + t266 * t559 + t269 * t563, pkin(6) * t291 + t260 * t563 + t264 * t559, t308 * t559 + t382 * t563, t289 * t559 + t333 * t563, t296 * t559 + t362 * t563, t307 * t559 + t380 * t563, t297 * t559 + t363 * t563, t323 * t559 + t402 * t563, pkin(6) * t280 + t251 * t559 + t255 * t563, pkin(6) * t284 + t253 * t559 + t256 * t563, pkin(6) * t276 + t250 * t559 + t252 * t563, pkin(6) * t258 + t248 * t559 + t249 * t563; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t528, t529, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t576 - 0.2e1 * t630, t573, pkin(1) * t501 + qJ(2) * t499, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) + t573, t576 + 0.2e1 * t584 + t594, -qJ(2) * t491 + t490 * t632, (t518 - t587) * t562, -t516 * t562 - t519 * t558, -t533 * t558 + t615, (-t517 + t586) * t558, t531 * t562 - t618, 0, -t484 * t631 + t516 * t632 + t608, -t486 * t631 + t519 * t632 + t606, t520 * t631 - t523 * t632 - t409, -t409 * t631 + t472 * t632, -t413 * t558 + t414 * t562, -t370 * t558 + t372 * t562, -t428 * t558 + t430 * t562, -t411 * t558 + t412 * t562, -t429 * t558 + t431 * t562, -t443 * t558 + t444 * t562, -t558 * t342 - t358 * t631 + t562 * t368 + t419 * t632, -t558 * t346 - t374 * t631 + t562 * t386 + t423 * t632, -t558 * t302 + t562 * t303 - t329 * t631 + t442 * t632, -pkin(8) * t628 - t300 * t631 - t558 * t313 + t433 * t632, -t351 * t558 + t353 * t562, -t316 * t558 + t317 * t562, -t324 * t558 + t326 * t562, -t350 * t558 + t352 * t562, -t325 * t558 + t327 * t562, -t366 * t558 + t367 * t562, -t558 * t267 + t562 * t270 - t292 * t631 + t354 * t632, -t558 * t268 + t562 * t271 - t294 * t631 + t356 * t632, -t558 * t263 + t562 * t265 - t287 * t631 + t334 * t632, -t558 * t254 + t562 * t259 - t261 * t631 + t281 * t632;];
tauB_reg  = t1;
