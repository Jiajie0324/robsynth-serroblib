% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 16:05
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR11_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR11_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR11_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR11_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR11_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR11_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 16:03:27
% EndTime: 2019-05-06 16:03:47
% DurationCPUTime: 8.12s
% Computational Cost: add. (54600->495), mult. (116619->679), div. (0->0), fcn. (76288->10), ass. (0->309)
t397 = -2 * qJD(5);
t285 = sin(qJ(2));
t278 = t285 ^ 2;
t292 = qJD(1) ^ 2;
t273 = t278 * t292;
t291 = qJD(2) ^ 2;
t260 = -t273 - t291;
t289 = cos(qJ(2));
t340 = t285 * t292;
t324 = t289 * t340;
t255 = -qJDD(2) + t324;
t338 = t289 * t255;
t396 = pkin(7) * (-t260 * t285 + t338);
t280 = sin(pkin(10));
t284 = sin(qJ(4));
t288 = cos(qJ(4));
t334 = qJD(1) * t289;
t242 = qJD(2) * t284 + t288 * t334;
t244 = qJD(2) * t288 - t284 * t334;
t281 = cos(pkin(10));
t212 = t281 * t242 + t244 * t280;
t214 = -t242 * t280 + t244 * t281;
t181 = t214 * t212;
t329 = qJD(1) * qJD(2);
t269 = t289 * t329;
t271 = t285 * qJDD(1);
t248 = t271 + t269;
t238 = qJDD(4) + t248;
t386 = -t181 + t238;
t395 = t280 * t386;
t394 = t281 * t386;
t283 = sin(qJ(6));
t287 = cos(qJ(6));
t177 = t287 * t212 + t214 * t283;
t179 = -t212 * t283 + t214 * t287;
t132 = t179 * t177;
t234 = qJDD(6) + t238;
t388 = -t132 + t234;
t393 = t283 * t388;
t219 = t244 * t242;
t385 = -t219 + t238;
t392 = t284 * t385;
t391 = t287 * t388;
t390 = t288 * t385;
t312 = t248 + t269;
t389 = t312 * qJ(3);
t272 = t289 * qJDD(1);
t323 = t285 * t329;
t249 = t272 - t323;
t316 = t284 * qJDD(2) + t288 * t249;
t206 = -qJD(4) * t244 - t316;
t305 = t288 * qJDD(2) - t284 * t249;
t207 = -qJD(4) * t242 + t305;
t171 = t206 * t280 + t207 * t281;
t335 = qJD(1) * t285;
t266 = qJD(4) + t335;
t195 = t266 * t212;
t387 = t171 - t195;
t149 = t171 + t195;
t227 = t266 * t242;
t188 = t207 + t227;
t256 = pkin(3) * t335 - qJD(2) * pkin(8);
t265 = pkin(2) * t323;
t322 = qJD(3) * t335;
t268 = -0.2e1 * t322;
t286 = sin(qJ(1));
t290 = cos(qJ(1));
t321 = t286 * g(1) - t290 * g(2);
t303 = -qJDD(1) * pkin(1) - t321;
t377 = -pkin(2) - pkin(8);
t379 = t289 ^ 2;
t153 = -t256 * t335 + t265 + t268 + (-pkin(3) * t379 - pkin(7)) * t292 + t377 * t249 - t389 + t303;
t343 = t285 * qJ(3);
t374 = pkin(2) * t289;
t313 = -t343 - t374;
t245 = t313 * qJD(1);
t314 = g(1) * t290 + g(2) * t286;
t364 = qJDD(1) * pkin(7);
t232 = -pkin(1) * t292 - t314 + t364;
t342 = t285 * t232;
t299 = -qJDD(2) * pkin(2) - t291 * qJ(3) + t245 * t335 + qJDD(3) + t342;
t169 = t248 * pkin(3) - qJDD(2) * pkin(8) + (-pkin(3) * t329 - pkin(8) * t340 + g(3)) * t289 + t299;
t119 = t284 * t153 - t288 * t169;
t101 = t385 * pkin(4) - t188 * qJ(5) - t119;
t120 = t153 * t288 + t169 * t284;
t222 = pkin(4) * t266 - qJ(5) * t244;
t381 = t242 ^ 2;
t104 = -pkin(4) * t381 + qJ(5) * t206 - t222 * t266 + t120;
t315 = t281 * t101 - t280 * t104 + t214 * t397;
t63 = t280 * t101 + t281 * t104 + t212 * t397;
t337 = t379 * t292;
t384 = t338 - (-t291 + t337) * t285;
t250 = t272 - 0.2e1 * t323;
t261 = t291 + t337;
t254 = qJDD(2) + t324;
t353 = t254 * t285;
t382 = pkin(7) * (t261 * t289 + t353) - pkin(1) * t250;
t175 = t177 ^ 2;
t176 = t179 ^ 2;
t210 = t212 ^ 2;
t211 = t214 ^ 2;
t237 = t244 ^ 2;
t258 = qJD(6) + t266;
t257 = t258 ^ 2;
t380 = t266 ^ 2;
t378 = 0.2e1 * qJD(3);
t45 = t386 * pkin(5) - t149 * pkin(9) + t315;
t170 = t281 * t206 - t207 * t280;
t192 = pkin(5) * t266 - pkin(9) * t214;
t46 = -pkin(5) * t210 + pkin(9) * t170 - t192 * t266 + t63;
t25 = t283 * t46 - t287 * t45;
t26 = t283 * t45 + t287 * t46;
t14 = -t25 * t287 + t26 * t283;
t15 = t25 * t283 + t287 * t26;
t370 = t14 * t281;
t8 = t15 * t280 + t370;
t376 = pkin(4) * t8 + pkin(5) * t14;
t275 = t285 * g(3);
t373 = t289 * g(3);
t319 = -t287 * t170 + t283 * t171;
t298 = (-qJD(6) + t258) * t179 - t319;
t308 = t283 * t170 + t287 * t171;
t117 = -qJD(6) * t177 + t308;
t160 = t258 * t177;
t94 = t117 + t160;
t57 = t283 * t298 - t287 * t94;
t59 = t283 * t94 + t287 * t298;
t34 = t280 * t59 + t281 * t57;
t372 = pkin(4) * t34 + pkin(5) * t57;
t371 = t14 * t280;
t297 = (qJD(1) * t245 + t232) * t289 - t275 - t291 * pkin(2);
t328 = qJDD(2) * qJ(3);
t167 = t328 + t249 * pkin(3) - pkin(8) * t337 + (t378 + t256) * qJD(2) + t297;
t123 = -t206 * pkin(4) - t381 * qJ(5) + t244 * t222 + qJDD(5) + t167;
t77 = -t170 * pkin(5) - t210 * pkin(9) + t214 * t192 + t123;
t369 = t283 * t77;
t38 = t280 * t63 + t281 * t315;
t368 = t284 * t38;
t367 = t287 * t77;
t366 = t288 * t38;
t363 = t123 * t280;
t362 = t123 * t281;
t128 = t132 + t234;
t361 = t128 * t283;
t360 = t128 * t287;
t296 = (-qJD(4) + t266) * t244 - t316;
t150 = -t188 * t288 + t284 * t296;
t359 = t150 * t285;
t165 = t181 + t238;
t358 = t165 * t280;
t357 = t165 * t281;
t198 = t219 + t238;
t356 = t198 * t284;
t355 = t198 * t288;
t354 = t214 * t266;
t352 = t258 * t283;
t351 = t258 * t287;
t348 = t266 * t280;
t347 = t266 * t281;
t346 = t266 * t284;
t345 = t266 * t288;
t344 = t284 * t167;
t341 = t285 * t250;
t339 = t288 * t167;
t252 = t273 + t337;
t336 = (t278 + t379) * t364 + pkin(1) * t252;
t331 = qJD(4) + t266;
t330 = qJD(6) + t258;
t327 = t285 * t132;
t326 = t285 * t181;
t325 = t285 * t219;
t39 = -t280 * t315 + t281 * t63;
t223 = t342 + t373;
t224 = t289 * t232 - t275;
t318 = t223 * t285 + t289 * t224;
t190 = -t211 - t380;
t134 = t190 * t281 - t358;
t317 = pkin(4) * t134 - t63;
t130 = -t257 - t175;
t88 = t130 * t283 + t391;
t89 = t130 * t287 - t393;
t53 = t280 * t89 + t281 * t88;
t310 = pkin(4) * t53 + pkin(5) * t88 - t25;
t75 = -t288 * t119 + t284 * t120;
t309 = t284 * t119 + t288 * t120;
t307 = (-t273 + t291) * t289 + t353;
t172 = -t380 - t210;
t125 = t172 * t280 + t394;
t304 = pkin(4) * t125 + t315;
t302 = t170 + t354;
t154 = -t176 - t257;
t105 = t154 * t287 - t361;
t106 = -t154 * t283 - t360;
t65 = t105 * t281 + t106 * t280;
t301 = pkin(4) * t65 + pkin(5) * t105 - t26;
t300 = t289 * t377 - pkin(1) - t343;
t231 = t292 * pkin(7) - t303;
t191 = t299 + t373;
t295 = qJD(2) * t378 + t297;
t294 = t249 * pkin(2) + t231 - t265;
t189 = t295 + t328;
t293 = t294 + 0.2e1 * t322;
t253 = t273 - t337;
t247 = t271 + 0.2e1 * t269;
t229 = t285 * t238;
t226 = -t237 + t380;
t225 = -t380 + t381;
t221 = t312 * t285;
t220 = (t249 - t323) * t289;
t217 = t237 - t381;
t216 = -t237 - t380;
t215 = t247 * t289 + t341;
t209 = -t380 - t381;
t196 = -t237 - t381;
t194 = -t211 + t380;
t193 = t210 - t380;
t187 = t207 - t227;
t186 = -t242 * t331 + t305;
t183 = t244 * t331 + t316;
t180 = t211 - t210;
t173 = t216 * t288 - t356;
t162 = t209 * t284 + t390;
t158 = -t176 + t257;
t157 = t175 - t257;
t156 = (-t212 * t281 + t214 * t280) * t266;
t155 = (-t212 * t280 - t214 * t281) * t266;
t152 = -t210 - t211;
t144 = -t170 + t354;
t143 = t171 * t281 - t214 * t348;
t142 = t171 * t280 + t214 * t347;
t141 = -t170 * t280 + t212 * t347;
t140 = t170 * t281 + t212 * t348;
t139 = t193 * t281 - t358;
t138 = -t194 * t280 + t394;
t137 = t193 * t280 + t357;
t136 = t194 * t281 + t395;
t135 = -t190 * t280 - t357;
t131 = t176 - t175;
t126 = t172 * t281 - t395;
t122 = (-t177 * t287 + t179 * t283) * t258;
t121 = (-t177 * t283 - t179 * t287) * t258;
t118 = -t175 - t176;
t116 = -qJD(6) * t179 - t319;
t115 = t149 * t280 + t281 * t302;
t114 = -t144 * t281 - t280 * t387;
t113 = -t149 * t281 + t280 * t302;
t112 = -t144 * t280 + t281 * t387;
t111 = pkin(4) * t113;
t110 = t157 * t287 - t361;
t109 = -t158 * t283 + t391;
t108 = t157 * t283 + t360;
t107 = t158 * t287 + t393;
t99 = t134 * t288 + t135 * t284;
t96 = -qJ(5) * t134 + t362;
t95 = -t177 * t330 + t308;
t93 = t117 - t160;
t90 = t179 * t330 + t319;
t87 = t117 * t287 - t179 * t352;
t86 = t117 * t283 + t179 * t351;
t85 = -t116 * t283 + t177 * t351;
t84 = t116 * t287 + t177 * t352;
t81 = t125 * t288 + t126 * t284;
t80 = -qJ(5) * t125 + t363;
t79 = -t121 * t280 + t122 * t281;
t78 = t121 * t281 + t122 * t280;
t74 = -pkin(4) * t387 + qJ(5) * t135 + t363;
t73 = -pkin(4) * t144 + qJ(5) * t126 - t362;
t71 = t113 * t288 + t115 * t284;
t70 = -t108 * t280 + t110 * t281;
t69 = -t107 * t280 + t109 * t281;
t68 = t108 * t281 + t110 * t280;
t67 = t107 * t281 + t109 * t280;
t66 = -t105 * t280 + t106 * t281;
t60 = -pkin(9) * t105 + t367;
t58 = -t283 * t93 - t287 * t90;
t56 = -t283 * t90 + t287 * t93;
t54 = -t280 * t88 + t281 * t89;
t51 = -t280 * t86 + t281 * t87;
t50 = -t280 * t84 + t281 * t85;
t49 = t280 * t87 + t281 * t86;
t48 = t280 * t85 + t281 * t84;
t47 = -pkin(9) * t88 + t369;
t43 = -pkin(5) * t95 + pkin(9) * t106 + t369;
t42 = -pkin(5) * t90 + pkin(9) * t89 - t367;
t40 = t284 * t66 + t288 * t65;
t37 = pkin(4) * t38;
t36 = -t280 * t57 + t281 * t59;
t35 = -t280 * t56 + t281 * t58;
t33 = t280 * t58 + t281 * t56;
t30 = t284 * t54 + t288 * t53;
t29 = -pkin(4) * t123 + qJ(5) * t39;
t28 = -qJ(5) * t113 - t38;
t27 = -pkin(4) * t152 + qJ(5) * t115 + t39;
t23 = -qJ(5) * t65 - t280 * t43 + t281 * t60;
t21 = t284 * t39 + t366;
t20 = -qJ(5) * t53 - t280 * t42 + t281 * t47;
t19 = -pkin(4) * t95 + qJ(5) * t66 + t280 * t60 + t281 * t43;
t17 = t284 * t36 + t288 * t34;
t16 = -pkin(4) * t90 + qJ(5) * t54 + t280 * t47 + t281 * t42;
t12 = -pkin(5) * t77 + pkin(9) * t15;
t11 = -pkin(9) * t57 - t14;
t10 = -pkin(5) * t118 + pkin(9) * t59 + t15;
t9 = t15 * t281 - t371;
t6 = -qJ(5) * t34 - t10 * t280 + t11 * t281;
t5 = -pkin(4) * t118 + qJ(5) * t36 + t10 * t281 + t11 * t280;
t3 = t284 * t9 + t288 * t8;
t2 = -pkin(9) * t370 - qJ(5) * t8 - t12 * t280;
t1 = -pkin(4) * t77 - pkin(9) * t371 + qJ(5) * t9 + t12 * t281;
t4 = [0, 0, 0, 0, 0, qJDD(1), t321, t314, 0, 0, t221, t215, t307, t220, -t384, 0, t289 * t231 - t382, -pkin(1) * t247 - t285 * t231 + t396, t318 + t336, pkin(1) * t231 + pkin(7) * t318, 0, -t307, t384, t221, t215, t220, t285 * (qJ(3) * t252 + t299) + (pkin(2) * t252 + t189 + t275) * t289 + t336, t289 * (-pkin(2) * t250 + t268 - t294) + (-t289 * t312 - t341) * qJ(3) + t382, t285 * t293 - t396 + (pkin(1) + t374) * t247 + (t247 + t312) * t343, pkin(7) * (t189 * t289 + t191 * t285) + (pkin(1) - t313) * (t293 + t389), t325 + t289 * (-t207 * t284 - t244 * t345), t285 * t217 + t289 * (t183 * t284 - t187 * t288), t285 * t188 + t289 * (-t226 * t288 - t392), -t325 + t289 * (-t206 * t288 - t242 * t346), t285 * t296 + t289 * (-t225 * t284 - t355), t229 + t289 * (t242 * t284 + t244 * t288) * t266, t285 * (pkin(3) * t162 - t119) + t289 * (pkin(3) * t183 + t339) + pkin(7) * (t162 * t285 + t183 * t289) + t300 * (t209 * t288 - t392), t285 * (pkin(3) * t173 - t120) + t289 * (pkin(3) * t186 - t344) + pkin(7) * (t173 * t285 + t186 * t289) + t300 * (-t216 * t284 - t355), pkin(3) * t359 + t289 * (pkin(3) * t196 - t309) + pkin(7) * (t196 * t289 + t359) + t300 * (t188 * t284 + t288 * t296), t300 * t309 + (pkin(3) + pkin(7)) * (t167 * t289 + t285 * t75), t326 + t289 * (-t142 * t288 - t143 * t284), t285 * t180 + t289 * (-t112 * t288 - t114 * t284), t285 * t149 + t289 * (-t136 * t288 - t138 * t284), -t326 + t289 * (-t140 * t288 - t141 * t284), t285 * t302 + t289 * (-t137 * t288 - t139 * t284), t229 + t289 * (-t155 * t288 - t156 * t284), t285 * (pkin(3) * t81 + t304) + t289 * (pkin(3) * t144 - t284 * t80 - t288 * t73) + pkin(7) * (t144 * t289 + t285 * t81) + t300 * (-t125 * t284 + t126 * t288), t285 * (pkin(3) * t99 + t317) + t289 * (pkin(3) * t387 - t284 * t96 - t288 * t74) + pkin(7) * (t285 * t99 + t289 * t387) + t300 * (-t134 * t284 + t135 * t288), t285 * (pkin(3) * t71 + t111) + t289 * (pkin(3) * t152 - t288 * t27 - t284 * t28) + pkin(7) * (t152 * t289 + t285 * t71) + t300 * (-t113 * t284 + t115 * t288), t285 * (pkin(3) * t21 + t37) + t289 * (pkin(3) * t123 + qJ(5) * t368 - t288 * t29) + pkin(7) * (t123 * t289 + t21 * t285) + t300 * (t288 * t39 - t368), t327 + t289 * (-t284 * t51 - t288 * t49), t285 * t131 + t289 * (-t284 * t35 - t288 * t33), t285 * t94 + t289 * (-t284 * t69 - t288 * t67), -t327 + t289 * (-t284 * t50 - t288 * t48), t285 * t298 + t289 * (-t284 * t70 - t288 * t68), t285 * t234 + t289 * (-t284 * t79 - t288 * t78), t285 * (pkin(3) * t30 + t310) + t289 * (pkin(3) * t90 - t288 * t16 - t284 * t20) + pkin(7) * (t285 * t30 + t289 * t90) + t300 * (-t284 * t53 + t288 * t54), t285 * (pkin(3) * t40 + t301) + t289 * (pkin(3) * t95 - t288 * t19 - t284 * t23) + pkin(7) * (t285 * t40 + t289 * t95) + t300 * (-t284 * t65 + t288 * t66), t285 * (pkin(3) * t17 + t372) + t289 * (pkin(3) * t118 - t284 * t6 - t288 * t5) + pkin(7) * (t118 * t289 + t17 * t285) + t300 * (-t284 * t34 + t288 * t36), t285 * (pkin(3) * t3 + t376) + t289 * (pkin(3) * t77 - t288 * t1 - t284 * t2) + pkin(7) * (t285 * t3 + t289 * t77) + t300 * (-t284 * t8 + t288 * t9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t324, t253, t271, t324, t272, qJDD(2), -t223, -t224, 0, 0, qJDD(2), -t271, -t272, -t324, t253, t324, (-pkin(2) * t285 + qJ(3) * t289) * qJDD(1), -pkin(2) * t254 + qJ(3) * t261 + t191, -pkin(2) * t260 + (qJDD(2) - t255) * qJ(3) + t295, -pkin(2) * t191 + qJ(3) * t189, t207 * t288 - t244 * t346, -t183 * t288 - t187 * t284, -t226 * t284 + t390, -t206 * t284 + t242 * t345, t225 * t288 - t356, (-t242 * t288 + t244 * t284) * t266, qJ(3) * t183 + t162 * t377 + t344, qJ(3) * t186 + t173 * t377 + t339, qJ(3) * t196 + t150 * t377 - t75, qJ(3) * t167 + t377 * t75, -t142 * t284 + t143 * t288, -t112 * t284 + t114 * t288, -t136 * t284 + t138 * t288, -t140 * t284 + t141 * t288, -t137 * t284 + t139 * t288, -t155 * t284 + t156 * t288, qJ(3) * t144 - t284 * t73 + t288 * t80 + t377 * t81, qJ(3) * t387 - t284 * t74 + t288 * t96 + t377 * t99, qJ(3) * t152 - t284 * t27 + t288 * t28 + t377 * t71, qJ(3) * t123 - qJ(5) * t366 + t21 * t377 - t284 * t29, -t284 * t49 + t288 * t51, -t284 * t33 + t288 * t35, -t284 * t67 + t288 * t69, -t284 * t48 + t288 * t50, -t284 * t68 + t288 * t70, -t284 * t78 + t288 * t79, qJ(3) * t90 - t284 * t16 + t288 * t20 + t30 * t377, qJ(3) * t95 - t284 * t19 + t288 * t23 + t377 * t40, qJ(3) * t118 + t17 * t377 - t284 * t5 + t288 * t6, qJ(3) * t77 - t284 * t1 + t288 * t2 + t3 * t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, t254, t260, t191, 0, 0, 0, 0, 0, 0, t162, t173, t150, t75, 0, 0, 0, 0, 0, 0, t81, t99, t71, t21, 0, 0, 0, 0, 0, 0, t30, t40, t17, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t219, t217, t188, -t219, t296, t238, -t119, -t120, 0, 0, t181, t180, t149, -t181, t302, t238, t304, t317, t111, t37, t132, t131, t94, -t132, t298, t234, t310, t301, t372, t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, t387, t152, t123, 0, 0, 0, 0, 0, 0, t90, t95, t118, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, t131, t94, -t132, t298, t234, -t25, -t26, 0, 0;];
tauJ_reg  = t4;
