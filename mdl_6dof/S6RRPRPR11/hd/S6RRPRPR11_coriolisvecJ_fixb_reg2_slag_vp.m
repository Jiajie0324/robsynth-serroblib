% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRPR11_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR11_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR11_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR11_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:15:04
% EndTime: 2019-03-09 11:15:23
% DurationCPUTime: 7.81s
% Computational Cost: add. (11906->536), mult. (26790->717), div. (0->0), fcn. (17679->8), ass. (0->266)
t265 = sin(qJ(2));
t328 = qJD(1) * t265;
t253 = pkin(2) * t328;
t267 = cos(qJ(2));
t292 = pkin(8) * t265 - qJ(3) * t267;
t180 = qJD(1) * t292 + t253;
t327 = qJD(1) * t267;
t249 = pkin(7) * t327;
t214 = pkin(3) * t327 + t249;
t264 = sin(qJ(4));
t266 = cos(qJ(4));
t120 = -t264 * t180 + t266 * t214;
t316 = t266 * qJD(5);
t322 = qJD(4) * t264;
t268 = -pkin(2) - pkin(8);
t334 = qJ(5) - t268;
t340 = t264 * t265;
t409 = t322 * t334 - t316 - (pkin(4) * t267 - qJ(5) * t340) * qJD(1) - t120;
t326 = qJD(2) * t264;
t206 = t266 * t327 + t326;
t303 = t264 * t327;
t324 = qJD(2) * t266;
t208 = -t303 + t324;
t261 = sin(pkin(10));
t262 = cos(pkin(10));
t130 = t206 * t262 + t261 * t208;
t263 = sin(qJ(6));
t289 = -t206 * t261 + t262 * t208;
t376 = cos(qJ(6));
t302 = qJD(6) * t376;
t319 = qJD(6) * t263;
t314 = qJD(1) * qJD(2);
t301 = t265 * t314;
t145 = qJD(4) * t206 - t264 * t301;
t321 = qJD(4) * t266;
t146 = qJD(2) * t321 - qJD(4) * t303 - t266 * t301;
t87 = -t145 * t261 + t262 * t146;
t88 = -t145 * t262 - t146 * t261;
t24 = t130 * t302 + t263 * t87 + t289 * t319 - t376 * t88;
t243 = qJD(4) + t328;
t236 = qJD(6) + t243;
t67 = t130 * t376 + t263 * t289;
t363 = t236 * t67;
t408 = -t24 + t363;
t121 = t266 * t180 + t264 * t214;
t218 = t334 * t266;
t311 = t266 * t328;
t407 = qJ(5) * t311 + qJD(4) * t218 + t264 * qJD(5) + t121;
t373 = t67 ^ 2;
t394 = -t263 * t130 + t289 * t376;
t374 = t394 ^ 2;
t406 = -t373 + t374;
t372 = t67 * t394;
t304 = t262 * t321;
t341 = t261 * t264;
t332 = t261 * t322 - t262 * t311 + t328 * t341 - t304;
t204 = t261 * t266 + t262 * t264;
t189 = t204 * qJD(4);
t331 = t204 * t328 + t189;
t300 = -t265 * qJ(3) - pkin(1);
t202 = t267 * t268 + t300;
t162 = t202 * qJD(1);
t248 = pkin(7) * t328;
t397 = qJD(3) + t248;
t315 = pkin(3) * t328 + t397;
t171 = qJD(2) * t268 + t315;
t98 = -t162 * t264 + t266 * t171;
t82 = -qJ(5) * t208 + t98;
t74 = pkin(4) * t243 + t82;
t99 = t162 * t266 + t171 * t264;
t83 = -qJ(5) * t206 + t99;
t76 = t261 * t83;
t36 = t262 * t74 - t76;
t392 = pkin(9) * t289;
t26 = pkin(5) * t243 + t36 - t392;
t361 = t262 * t83;
t37 = t261 * t74 + t361;
t402 = pkin(9) * t130;
t28 = t37 - t402;
t247 = t267 * t314;
t242 = pkin(2) * t301;
t317 = t265 * qJD(3);
t275 = qJD(2) * t292 - t317;
t140 = qJD(1) * t275 + t242;
t241 = pkin(7) * t247;
t198 = pkin(3) * t247 + t241;
t54 = -qJD(4) * t99 - t264 * t140 + t266 * t198;
t33 = pkin(4) * t247 + t145 * qJ(5) - t208 * qJD(5) + t54;
t53 = t266 * t140 - t162 * t322 + t171 * t321 + t264 * t198;
t35 = -qJ(5) * t146 - qJD(5) * t206 + t53;
t12 = -t261 * t35 + t262 * t33;
t8 = pkin(5) * t247 - pkin(9) * t88 + t12;
t13 = t261 * t33 + t262 * t35;
t9 = -pkin(9) * t87 + t13;
t274 = -t26 * t302 - t263 * t8 + t28 * t319 - t376 * t9;
t258 = qJD(2) * qJ(3);
t192 = t258 + t214;
t134 = pkin(4) * t206 + qJD(5) + t192;
t75 = pkin(5) * t130 + t134;
t405 = t75 * t67 + t274;
t356 = t407 * t261 + t262 * t409;
t355 = t261 * t409 - t407 * t262;
t25 = qJD(6) * t394 + t263 * t88 + t376 * t87;
t360 = t394 * t236;
t404 = -t25 + t360;
t6 = t263 * t26 + t28 * t376;
t2 = -qJD(6) * t6 - t263 * t9 + t376 * t8;
t403 = -t394 * t75 + t2;
t377 = pkin(3) + pkin(7);
t401 = pkin(5) * t327 - pkin(9) * t331 - t356;
t400 = -pkin(9) * t332 - t355;
t399 = t130 * t289;
t288 = -t262 * t266 + t341;
t281 = -t263 * t204 - t288 * t376;
t383 = qJD(6) * t281 - t263 * t331 - t332 * t376;
t398 = t383 * t236;
t279 = t204 * t376 - t263 * t288;
t396 = t2 * t281 - t274 * t279 + t383 * t6;
t395 = t25 * t279 + t383 * t67;
t393 = -0.2e1 * t314;
t391 = t24 * t281;
t389 = -t243 * t98 + t53;
t388 = t99 * t243 + t54;
t284 = t206 * t243;
t385 = t145 - t284;
t345 = t208 * t243;
t384 = -t146 + t345;
t312 = -pkin(4) * t266 - pkin(3);
t330 = pkin(4) * t321 - t312 * t328 + t397;
t229 = t377 * t265;
t136 = t266 * t202 + t264 * t229;
t382 = t263 * t332 - t331 * t376;
t320 = qJD(4) * t267;
t308 = t264 * t320;
t276 = t265 * t324 + t308;
t381 = -t130 * t332 + t204 * t87;
t380 = -t288 * t88 - t289 * t331;
t378 = -t12 * t288 + t13 * t204 - t331 * t36 - t332 * t37;
t375 = pkin(4) * t261;
t217 = t334 * t264;
t137 = t217 * t261 - t262 * t218;
t108 = pkin(9) * t288 + t137;
t138 = -t262 * t217 - t261 * t218;
t109 = -pkin(9) * t204 + t138;
t57 = t263 * t108 + t109 * t376;
t371 = qJD(6) * t57 - t263 * t400 + t376 * t401;
t56 = t108 * t376 - t263 * t109;
t370 = -qJD(6) * t56 + t263 * t401 + t376 * t400;
t325 = qJD(2) * t265;
t252 = pkin(2) * t325;
t150 = t252 + t275;
t323 = qJD(2) * t267;
t215 = t377 * t323;
t197 = t266 * t215;
t295 = qJ(5) * t267 - t202;
t48 = pkin(4) * t323 + t197 + t295 * t321 + (-qJ(5) * t325 - qJD(4) * t229 + qJD(5) * t267 - t150) * t264;
t64 = t266 * t150 - t202 * t322 + t264 * t215 + t229 * t321;
t55 = qJ(5) * t276 - t267 * t316 + t64;
t23 = t261 * t48 + t262 * t55;
t368 = t204 * t302 - t288 * t319 - t382;
t367 = -qJD(6) * t279 + t382;
t42 = t262 * t82 - t76;
t365 = qJD(2) * pkin(2);
t245 = pkin(4) * t262 + pkin(5);
t183 = t263 * t245 + t375 * t376;
t41 = -t261 * t82 - t361;
t29 = t41 + t402;
t30 = t42 - t392;
t357 = t183 * qJD(6) - t263 * t30 + t29 * t376;
t182 = t245 * t376 - t263 * t375;
t354 = -t182 * qJD(6) + t263 * t29 + t30 * t376;
t353 = t289 ^ 2;
t352 = t289 * t243;
t351 = t130 ^ 2;
t350 = t130 * t243;
t349 = t146 * t264;
t213 = t377 * t325;
t257 = qJD(2) * qJD(3);
t176 = -qJD(1) * t213 + t257;
t348 = t176 * t264;
t347 = t176 * t266;
t346 = t208 * t206;
t344 = t208 * t267;
t343 = t243 * t265;
t342 = t243 * t268;
t339 = t266 * t145;
t338 = t266 * t267;
t270 = qJD(1) ^ 2;
t337 = t267 * t270;
t269 = qJD(2) ^ 2;
t336 = t269 * t265;
t335 = t269 * t267;
t246 = t264 * pkin(4) + qJ(3);
t333 = -pkin(5) * t332 + t330;
t210 = t266 * t229;
t114 = t265 * pkin(4) + t264 * t295 + t210;
t119 = -qJ(5) * t338 + t136;
t59 = t261 * t114 + t262 * t119;
t230 = t377 * t267;
t259 = t265 ^ 2;
t260 = t267 ^ 2;
t329 = t259 - t260;
t220 = -pkin(2) * t267 + t300;
t193 = qJD(1) * t220;
t318 = t192 * qJD(2);
t313 = t266 * t343;
t190 = pkin(4) * t338 + t230;
t310 = t264 * t325;
t307 = t243 * t321;
t306 = t266 * t320;
t305 = t243 * t327;
t22 = -t261 * t55 + t262 * t48;
t298 = t332 * t243;
t297 = pkin(1) * t393;
t296 = qJD(3) - t365;
t58 = t262 * t114 - t119 * t261;
t293 = -t243 * t331 - t288 * t247;
t290 = -t264 * t98 + t266 * t99;
t287 = -qJD(1) * t260 + t343;
t286 = -0.2e1 * qJD(2) * t193;
t175 = t204 * t267;
t44 = pkin(5) * t265 + pkin(9) * t175 + t58;
t174 = t288 * t267;
t45 = pkin(9) * t174 + t59;
t20 = -t263 * t45 + t376 * t44;
t21 = t263 * t44 + t376 * t45;
t277 = -qJ(3) * t323 - t317;
t158 = qJD(1) * t277 + t242;
t184 = t252 + t277;
t283 = pkin(7) * t269 + qJD(1) * t184 + t158;
t111 = t263 * t174 - t175 * t376;
t278 = t192 * t265 + t268 * t323;
t112 = t146 * pkin(4) + t176;
t52 = t87 * pkin(5) + t112;
t139 = -pkin(4) * t308 + (-pkin(7) + t312) * t325;
t216 = pkin(7) * t301 - t257;
t219 = t248 + t296;
t226 = -t249 - t258;
t272 = -t216 * t267 + (t219 * t267 + (t226 + t249) * t265) * qJD(2);
t240 = t265 * t337;
t234 = t266 * t247;
t232 = t265 * t247;
t228 = -0.2e1 * t232;
t227 = 0.2e1 * t232;
t225 = t329 * t270;
t211 = -qJ(3) * t327 + t253;
t191 = t329 * t393;
t166 = t193 * t328;
t161 = t243 * t323 + t232;
t160 = pkin(5) * t204 + t246;
t135 = -t202 * t264 + t210;
t124 = -pkin(5) * t174 + t190;
t116 = -t261 * t276 - t262 * t310 + t267 * t304;
t115 = t189 * t267 - t288 * t325;
t110 = -t174 * t376 - t263 * t175;
t92 = pkin(4) * t208 + pkin(5) * t289;
t73 = -t115 * pkin(5) + t139;
t65 = -qJD(4) * t136 - t264 * t150 + t197;
t39 = qJD(6) * t111 - t115 * t376 - t263 * t116;
t38 = -t263 * t115 + t116 * t376 - t174 * t302 - t175 * t319;
t17 = pkin(9) * t115 + t23;
t16 = pkin(5) * t323 + pkin(9) * t116 + t22;
t5 = t26 * t376 - t263 * t28;
t4 = -qJD(6) * t21 + t16 * t376 - t263 * t17;
t3 = qJD(6) * t20 + t263 * t16 + t17 * t376;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, t191, t335, t228, -t336, 0, -pkin(7) * t335 + t265 * t297, pkin(7) * t336 + t267 * t297, 0, 0, 0, -t335, t336, t227, t191, t228, t272, t265 * t286 + t267 * t283, -t265 * t283 + t267 * t286, pkin(7) * t272 + t158 * t220 + t193 * t184, t145 * t264 * t267 + (-t306 + t310) * t208 (-t206 * t264 + t208 * t266) * t325 + (t339 + t349 + (t206 * t266 + t208 * t264) * qJD(4)) * t267, -t243 * t306 - t145 * t265 + (t264 * t287 + t344) * qJD(2), t146 * t338 - t206 * t276, t243 * t308 - t146 * t265 + (-t206 * t267 + t266 * t287) * qJD(2), t161, t230 * t146 - t213 * t206 + t65 * t243 + (-t266 * t318 + t54) * t265 + (-t192 * t322 + t347 + (qJD(1) * t135 + t98) * qJD(2)) * t267, -t230 * t145 - t213 * t208 - t64 * t243 + (t264 * t318 - t53) * t265 + (-t192 * t321 - t348 + (-qJD(1) * t136 - t99) * qJD(2)) * t267, t135 * t145 - t136 * t146 - t64 * t206 - t65 * t208 + t290 * t325 + (t264 * t54 - t266 * t53 + (t264 * t99 + t266 * t98) * qJD(4)) * t267, t135 * t54 + t136 * t53 + t176 * t230 - t192 * t213 + t64 * t99 + t65 * t98, -t116 * t289 - t175 * t88, t115 * t289 + t116 * t130 + t174 * t88 + t175 * t87, -t116 * t243 + t88 * t265 + (-qJD(1) * t175 + t289) * t323, -t115 * t130 - t174 * t87, t115 * t243 - t87 * t265 + (qJD(1) * t174 - t130) * t323, t161, -t112 * t174 - t134 * t115 + t12 * t265 + t139 * t130 + t190 * t87 + t22 * t243 + (qJD(1) * t58 + t36) * t323, -t112 * t175 - t134 * t116 - t13 * t265 + t139 * t289 + t190 * t88 - t23 * t243 + (-qJD(1) * t59 - t37) * t323, t115 * t37 + t116 * t36 + t12 * t175 + t13 * t174 - t130 * t23 - t22 * t289 - t58 * t88 - t59 * t87, t112 * t190 + t12 * t58 + t13 * t59 + t134 * t139 + t22 * t36 + t23 * t37, -t111 * t24 - t38 * t394, t110 * t24 - t111 * t25 + t38 * t67 - t39 * t394, -t38 * t236 - t24 * t265 + (qJD(1) * t111 + t394) * t323, t110 * t25 + t39 * t67, -t39 * t236 - t25 * t265 + (-qJD(1) * t110 - t67) * t323, t236 * t323 + t232, t52 * t110 + t124 * t25 + t2 * t265 + t4 * t236 + t75 * t39 + t73 * t67 + (qJD(1) * t20 + t5) * t323, t274 * t265 + t52 * t111 - t124 * t24 - t3 * t236 - t75 * t38 + t73 * t394 + (-qJD(1) * t21 - t6) * t323, t110 * t274 - t111 * t2 + t20 * t24 - t21 * t25 - t3 * t67 + t38 * t5 - t39 * t6 - t394 * t4, t124 * t52 + t2 * t20 - t21 * t274 + t3 * t6 + t4 * t5 + t73 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, t225, 0, t240, 0, 0, t270 * pkin(1) * t265, pkin(1) * t337, 0, 0, 0, 0, 0, -t240, t225, t240 ((-t226 - t258) * t265 + (-t219 + t296) * t267) * qJD(1), -t211 * t327 + t166, 0.2e1 * t257 + (t193 * t267 + t211 * t265) * qJD(1), -t216 * qJ(3) - t226 * qJD(3) - t193 * t211 + (-t226 * t265 + (-t219 - t365) * t267) * qJD(1) * pkin(7), -t264 * t345 - t339 (-t146 - t345) * t266 + (t145 + t284) * t264, -t243 * t322 + t234 + (-t243 * t340 - t344) * qJD(1), t266 * t284 + t349, -t307 + (-t313 + (t206 - t326) * t267) * qJD(1), -t305, qJ(3) * t146 - t120 * t243 + t348 + t315 * t206 + (t192 * t266 - t264 * t342) * qJD(4) + (t266 * t278 - t267 * t98) * qJD(1), -qJ(3) * t145 + t121 * t243 + t347 + t315 * t208 + (-t192 * t264 - t266 * t342) * qJD(4) + (-t264 * t278 + t267 * t99) * qJD(1), t120 * t208 + t121 * t206 + (-t99 * t328 + t145 * t268 - t54 + (-t206 * t268 - t99) * qJD(4)) * t266 + (t98 * t328 - t146 * t268 - t53 + (t208 * t268 + t98) * qJD(4)) * t264, t176 * qJ(3) - t98 * t120 - t99 * t121 + t315 * t192 + (qJD(4) * t290 + t53 * t264 + t54 * t266) * t268, t380, t130 * t331 - t88 * t204 + t288 * t87 + t289 * t332, -t289 * t327 + t293, t381, t298 + (-qJD(2) * t204 + t130) * t327, -t305, t112 * t204 + t246 * t87 + t356 * t243 - t332 * t134 + t330 * t130 + (qJD(2) * t137 - t36) * t327, -t112 * t288 + t246 * t88 - t355 * t243 - t331 * t134 + t330 * t289 + (-qJD(2) * t138 + t37) * t327, -t130 * t355 - t137 * t88 - t138 * t87 - t289 * t356 - t378, t112 * t246 + t12 * t137 + t13 * t138 + t134 * t330 + t355 * t37 + t356 * t36, -t368 * t394 - t391, t24 * t279 - t25 * t281 + t368 * t67 - t383 * t394, -t368 * t236 + (qJD(2) * t281 - t394) * t327, t395, -t398 + (-qJD(2) * t279 + t67) * t327, -t236 * t327, t52 * t279 + t160 * t25 + t383 * t75 + t333 * t67 - t371 * t236 + (qJD(2) * t56 - t5) * t327, t52 * t281 - t160 * t24 - t368 * t75 + t333 * t394 + t370 * t236 + (-qJD(2) * t57 + t6) * t327, t56 * t24 - t57 * t25 + t368 * t5 + t370 * t67 + t371 * t394 - t396, t52 * t160 + t2 * t56 - t274 * t57 + t333 * t75 - t370 * t6 - t371 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, -t259 * t270 - t269, qJD(2) * t226 + t166 + t241, 0, 0, 0, 0, 0, 0, -t243 ^ 2 * t264 - qJD(2) * t206 + t234, -t307 - qJD(2) * t208 + (-t264 * t323 - t313) * qJD(1), t264 * t384 + t266 * t385, t264 * t389 + t266 * t388 - t318, 0, 0, 0, 0, 0, 0, -qJD(2) * t130 + t293, t298 + (-t204 * t327 - t289) * qJD(2), -t380 - t381, -t134 * qJD(2) + t378, 0, 0, 0, 0, 0, 0, t367 * t236 + (t281 * t327 - t67) * qJD(2), -t398 + (-t279 * t327 - t394) * qJD(2), -t367 * t394 + t391 - t395, -t75 * qJD(2) + t367 * t5 + t396; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t346, -t206 ^ 2 + t208 ^ 2, -t385, -t346, t384, t247, -t192 * t208 + t388, t192 * t206 - t389, 0, 0, t399, -t351 + t353, t88 + t350, -t399, -t87 + t352, t247, -t134 * t289 - t41 * t243 + (-t130 * t208 + t247 * t262) * pkin(4) + t12, t134 * t130 + t42 * t243 + (-t208 * t289 - t247 * t261) * pkin(4) - t13 (-t261 * t87 - t262 * t88) * pkin(4) + (t37 + t41) * t289 + (t42 - t36) * t130, -t36 * t41 - t37 * t42 + (t12 * t262 + t13 * t261 - t134 * t208) * pkin(4), t372, t406, t408, -t372, t404, t247, t182 * t247 - t236 * t357 - t92 * t67 + t403, -t183 * t247 + t236 * t354 - t394 * t92 + t405, t182 * t24 - t183 * t25 + (t357 + t6) * t394 + (t354 - t5) * t67, t2 * t182 - t183 * t274 - t354 * t6 - t357 * t5 - t75 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87 + t352, t88 - t350, -t351 - t353, t130 * t37 + t289 * t36 + t112, 0, 0, 0, 0, 0, 0, t25 + t360, -t24 - t363, -t373 - t374, t394 * t5 + t6 * t67 + t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, t406, t408, -t372, t404, t247, t6 * t236 + t403, t5 * t236 + t405, 0, 0;];
tauc_reg  = t1;
