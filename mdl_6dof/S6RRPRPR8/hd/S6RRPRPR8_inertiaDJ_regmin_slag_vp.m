% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR8_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:53:20
% EndTime: 2019-03-09 10:53:26
% DurationCPUTime: 1.86s
% Computational Cost: add. (2529->255), mult. (6250->447), div. (0->0), fcn. (5719->8), ass. (0->119)
t115 = sin(pkin(10));
t116 = cos(pkin(10));
t169 = cos(qJ(4));
t145 = qJD(4) * t169;
t118 = sin(qJ(4));
t159 = qJD(4) * t118;
t172 = -t115 * t159 + t116 * t145;
t167 = pkin(8) + qJ(3);
t143 = t167 * t115;
t132 = t169 * t143;
t142 = t169 * qJD(3);
t160 = qJD(3) * t115;
t95 = t167 * t116;
t35 = (qJD(4) * t95 + t160) * t118 + qJD(4) * t132 - t116 * t142;
t117 = sin(qJ(6));
t168 = cos(qJ(6));
t120 = cos(qJ(2));
t119 = sin(qJ(2));
t162 = t116 * t119;
t136 = -pkin(2) * t120 - qJ(3) * t119;
t92 = -pkin(1) + t136;
t86 = t116 * t92;
t57 = -pkin(8) * t162 + t86 + (-pkin(7) * t115 - pkin(3)) * t120;
t164 = t115 * t119;
t161 = t116 * t120;
t103 = pkin(7) * t161;
t67 = t115 * t92 + t103;
t62 = -pkin(8) * t164 + t67;
t138 = -t118 * t62 + t169 * t57;
t23 = t120 * pkin(4) - t138;
t150 = t169 * t116;
t77 = -t118 * t164 + t119 * t150;
t18 = t120 * pkin(5) - t77 * pkin(9) + t23;
t166 = t118 * t57 + t169 * t62;
t22 = -qJ(5) * t120 + t166;
t90 = t169 * t115 + t118 * t116;
t76 = t90 * t119;
t19 = pkin(9) * t76 + t22;
t129 = t117 * t18 + t168 * t19;
t109 = t119 * qJD(2);
t121 = -pkin(4) - pkin(5);
t151 = pkin(7) * t109;
t79 = -qJD(3) * t119 + (pkin(2) * t119 - qJ(3) * t120) * qJD(2);
t60 = t115 * t151 + t116 * t79;
t42 = (pkin(3) * t119 - pkin(8) * t161) * qJD(2) + t60;
t163 = t115 * t120;
t69 = t115 * t79;
t49 = t69 + (-pkin(7) * t162 - pkin(8) * t163) * qJD(2);
t141 = t118 * t49 + t62 * t145 + t57 * t159 - t169 * t42;
t155 = t120 * qJD(2);
t147 = t116 * t155;
t148 = t115 * t155;
t82 = t90 * qJD(4);
t45 = t118 * t148 + t119 * t82 - t169 * t147;
t7 = pkin(9) * t45 + t121 * t109 + t141;
t46 = t172 * t119 + t90 * t155;
t107 = qJ(5) * t109;
t12 = -t118 * t42 - t57 * t145 + t62 * t159 - t169 * t49;
t158 = qJD(5) * t120;
t9 = t107 - t12 - t158;
t8 = pkin(9) * t46 + t9;
t2 = -t129 * qJD(6) - t117 * t8 + t168 * t7;
t171 = 0.2e1 * t172;
t170 = 0.2e1 * qJD(5);
t64 = -t118 * t143 + t169 * t95;
t108 = pkin(7) * t155;
t83 = pkin(3) * t148 + t108;
t91 = pkin(3) * t164 + t119 * pkin(7);
t157 = qJD(6) * t117;
t156 = t116 * qJD(3);
t154 = -0.2e1 * pkin(1) * qJD(2);
t153 = pkin(7) * t163;
t152 = pkin(4) * t109;
t106 = -pkin(3) * t116 - pkin(2);
t146 = t119 * t155;
t144 = qJD(6) * t168;
t139 = 0.2e1 * (t115 ^ 2 + t116 ^ 2) * qJD(3);
t137 = qJ(5) * t77 - t91;
t61 = -t116 * t151 + t69;
t135 = -t115 * t60 + t116 * t61;
t134 = qJ(5) * t172 + qJD(5) * t90;
t131 = qJ(5) * t90 - t106;
t1 = -t117 * t7 - t18 * t144 + t19 * t157 - t168 * t8;
t63 = t118 * t95 + t132;
t43 = -t90 * pkin(9) + t63;
t89 = t115 * t118 - t150;
t44 = pkin(9) * t89 + t64;
t128 = t117 * t43 + t168 * t44;
t41 = t117 * t76 + t168 * t77;
t55 = t117 * t89 + t168 * t90;
t127 = -t64 * t109 - t120 * t35;
t36 = t95 * t145 + t118 * t156 + (-t167 * t159 + t142) * t115;
t126 = -t63 * t109 + t120 * t36;
t125 = t168 * qJ(5) + t117 * t121;
t124 = -qJ(5) * t45 + qJD(5) * t77 - t83;
t123 = pkin(9) * t82 - t35;
t122 = -pkin(9) * t172 + t36;
t99 = -0.2e1 * t146;
t75 = t117 * qJD(5) + qJD(6) * t125;
t74 = qJ(5) * t157 - t168 * qJD(5) - t121 * t144;
t66 = t86 - t153;
t54 = t117 * t90 - t168 * t89;
t53 = pkin(4) * t89 - t131;
t40 = t117 * t77 - t168 * t76;
t31 = t121 * t89 + t131;
t30 = pkin(4) * t82 - t134;
t29 = pkin(4) * t76 - t137;
t25 = t121 * t82 + t134;
t24 = t121 * t76 + t137;
t21 = t55 * qJD(6) + t117 * t172 - t168 * t82;
t20 = -t117 * t82 - t89 * t144 + t90 * t157 - t168 * t172;
t16 = pkin(4) * t46 - t124;
t15 = t41 * qJD(6) - t117 * t45 - t168 * t46;
t14 = -t117 * t46 - t76 * t144 + t77 * t157 + t168 * t45;
t11 = t121 * t46 + t124;
t10 = t141 - t152;
t4 = t128 * qJD(6) + t117 * t123 - t168 * t122;
t3 = -t117 * t122 - t168 * t123 - t43 * t144 + t44 * t157;
t5 = [0, 0, 0, 0.2e1 * t146, 0.2e1 * (-t119 ^ 2 + t120 ^ 2) * qJD(2), 0, 0, 0, t119 * t154, t120 * t154, -0.2e1 * t120 * t60 + 0.2e1 * (t66 + 0.2e1 * t153) * t109, 0.2e1 * t120 * t61 + 0.2e1 * (-t67 + 0.2e1 * t103) * t109, 0.2e1 * (-t115 * t61 - t116 * t60) * t119 + 0.2e1 * (-t115 * t67 - t116 * t66) * t155, 0.2e1 * pkin(7) ^ 2 * t146 + 0.2e1 * t60 * t66 + 0.2e1 * t61 * t67, -0.2e1 * t77 * t45, 0.2e1 * t45 * t76 - 0.2e1 * t46 * t77, 0.2e1 * t109 * t77 + 0.2e1 * t120 * t45, -0.2e1 * t109 * t76 + 0.2e1 * t120 * t46, t99, 0.2e1 * t109 * t138 + 0.2e1 * t120 * t141 + 0.2e1 * t91 * t46 + 0.2e1 * t83 * t76, -0.2e1 * t166 * t109 - 0.2e1 * t12 * t120 - 0.2e1 * t91 * t45 + 0.2e1 * t83 * t77, 0.2e1 * t10 * t120 - 0.2e1 * t109 * t23 + 0.2e1 * t16 * t76 + 0.2e1 * t29 * t46, 0.2e1 * t10 * t77 - 0.2e1 * t22 * t46 - 0.2e1 * t23 * t45 - 0.2e1 * t76 * t9, 0.2e1 * t109 * t22 - 0.2e1 * t120 * t9 - 0.2e1 * t16 * t77 + 0.2e1 * t29 * t45, 0.2e1 * t10 * t23 + 0.2e1 * t16 * t29 + 0.2e1 * t22 * t9, -0.2e1 * t41 * t14, 0.2e1 * t14 * t40 - 0.2e1 * t15 * t41, -0.2e1 * t109 * t41 - 0.2e1 * t120 * t14, 0.2e1 * t109 * t40 - 0.2e1 * t120 * t15, t99, 0.2e1 * t2 * t120 - 0.2e1 * (-t117 * t19 + t168 * t18) * t109 + 0.2e1 * t11 * t40 + 0.2e1 * t24 * t15, 0.2e1 * t1 * t120 + 0.2e1 * t109 * t129 + 0.2e1 * t11 * t41 - 0.2e1 * t24 * t14; 0, 0, 0, 0, 0, t155, -t109, 0, -t108, t151, t120 * t160 + (t136 * t115 - t103) * qJD(2), t120 * t156 + (t136 * t116 + t153) * qJD(2), t135, -pkin(2) * t108 + (-t115 * t66 + t116 * t67) * qJD(3) + t135 * qJ(3), t172 * t77 - t45 * t90, -t172 * t76 + t45 * t89 - t46 * t90 - t77 * t82, t109 * t90 - t120 * t172, -t109 * t89 + t120 * t82, 0, t106 * t46 + t82 * t91 + t83 * t89 + t126, -t106 * t45 + t172 * t91 + t83 * t90 + t127, t16 * t89 + t29 * t82 + t30 * t76 + t46 * t53 + t126, t10 * t90 + t172 * t23 - t22 * t82 + t35 * t76 + t36 * t77 - t45 * t63 - t46 * t64 - t89 * t9, -t16 * t90 - t172 * t29 - t30 * t77 + t45 * t53 - t127, t10 * t63 + t16 * t53 - t22 * t35 + t23 * t36 + t29 * t30 + t64 * t9, -t14 * t55 - t20 * t41, t14 * t54 - t15 * t55 + t20 * t40 - t21 * t41, -t109 * t55 - t120 * t20, t109 * t54 - t120 * t21, 0, -t4 * t120 - (-t117 * t44 + t168 * t43) * t109 + t25 * t40 + t31 * t15 + t11 * t54 + t24 * t21, t109 * t128 + t11 * t55 + t3 * t120 - t31 * t14 - t24 * t20 + t25 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139, qJ(3) * t139, t90 * t171, -0.2e1 * t172 * t89 - 0.2e1 * t82 * t90, 0, 0, 0, 0.2e1 * t106 * t82, t106 * t171, 0.2e1 * t30 * t89 + 0.2e1 * t53 * t82, 0.2e1 * t172 * t63 + 0.2e1 * t35 * t89 + 0.2e1 * t36 * t90 - 0.2e1 * t64 * t82, -0.2e1 * t172 * t53 - 0.2e1 * t30 * t90, 0.2e1 * t30 * t53 - 0.2e1 * t35 * t64 + 0.2e1 * t36 * t63, -0.2e1 * t55 * t20, 0.2e1 * t20 * t54 - 0.2e1 * t21 * t55, 0, 0, 0, 0.2e1 * t21 * t31 + 0.2e1 * t25 * t54, -0.2e1 * t20 * t31 + 0.2e1 * t25 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, t147, 0, t108, 0, 0, 0, 0, 0, t46, -t45, t46, 0, t45, t16, 0, 0, 0, 0, 0, -t15, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, t172, t82, 0, -t172, t30, 0, 0, 0, 0, 0, -t21, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, -t46, t109, -t141, t12, -t141 + 0.2e1 * t152, pkin(4) * t45 - qJ(5) * t46 - qJD(5) * t76, 0.2e1 * t107 - t12 - 0.2e1 * t158, -pkin(4) * t10 + qJ(5) * t9 + qJD(5) * t22, 0, 0, t14, t15, t109, -t75 * t120 - (-t117 * qJ(5) + t168 * t121) * t109 - t2, t109 * t125 + t74 * t120 - t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, -t82, 0, -t36, t35, -t36, -pkin(4) * t172 - qJ(5) * t82 - qJD(5) * t89, -t35, -pkin(4) * t36 - qJ(5) * t35 + qJD(5) * t64, 0, 0, t20, t21, 0, t4, -t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, qJ(5) * t170, 0, 0, 0, 0, 0, 0.2e1 * t75, -0.2e1 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t45, 0, t10, 0, 0, 0, 0, 0, -t168 * t109 - t120 * t157, t109 * t117 - t120 * t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, 0, t36, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157, t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t15, -t109, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t21, 0, -t4, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157, -t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
