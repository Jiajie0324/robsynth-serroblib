% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR8_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR8_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR8_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR8_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR8_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR8_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:59:04
% EndTime: 2019-05-06 14:59:37
% DurationCPUTime: 14.37s
% Computational Cost: add. (47525->552), mult. (103499->740), div. (0->0), fcn. (74908->10), ass. (0->343)
t326 = cos(qJ(4));
t322 = sin(qJ(4));
t323 = sin(qJ(2));
t366 = qJD(1) * qJD(2);
t309 = t323 * t366;
t327 = cos(qJ(2));
t365 = t327 * qJDD(1);
t297 = -t309 + t365;
t293 = -qJDD(4) + t297;
t319 = sin(pkin(10));
t320 = cos(pkin(10));
t369 = qJD(1) * t323;
t291 = -t320 * qJD(2) + t319 * t369;
t292 = qJD(2) * t319 + t320 * t369;
t262 = t326 * t291 + t292 * t322;
t264 = -t291 * t322 + t292 * t326;
t380 = t264 * t262;
t332 = t293 - t380;
t389 = t332 * t322;
t261 = t264 ^ 2;
t368 = qJD(1) * t327;
t307 = -qJD(4) + t368;
t411 = t307 ^ 2;
t428 = -t261 - t411;
t153 = t326 * t428 + t389;
t388 = t332 * t326;
t155 = -t322 * t428 + t388;
t104 = t153 * t319 - t155 * t320;
t109 = t153 * t320 + t155 * t319;
t311 = t323 * qJDD(1);
t360 = t327 * t366;
t296 = t311 + t360;
t271 = qJDD(2) * t319 + t296 * t320;
t341 = qJDD(2) * t320 - t296 * t319;
t202 = -t262 * qJD(4) + t326 * t271 + t322 * t341;
t381 = t262 * t307;
t429 = t202 + t381;
t480 = -pkin(7) * (t104 * t327 - t323 * t429) - pkin(1) * t109;
t478 = qJ(3) * t109;
t477 = -pkin(2) * t109 - pkin(3) * t153;
t476 = -pkin(2) * t429 - qJ(3) * t104;
t413 = t262 ^ 2;
t240 = t413 - t411;
t165 = t240 * t322 - t388;
t169 = t240 * t326 + t389;
t355 = -t322 * t271 + t326 * t341;
t201 = qJD(4) * t264 - t355;
t249 = t264 * t307;
t175 = t201 + t249;
t474 = -t327 * t175 + t323 * (t165 * t319 - t169 * t320);
t430 = t201 - t249;
t120 = -t430 * t322 + t326 * t429;
t393 = t429 * t322;
t122 = t430 * t326 + t393;
t427 = t261 - t413;
t473 = t323 * (t120 * t319 + t122 * t320) + t327 * t427;
t471 = pkin(8) * t153;
t470 = pkin(8) * t155;
t469 = -t120 * t320 + t122 * t319;
t467 = t165 * t320 + t169 * t319;
t209 = t293 + t380;
t387 = t209 * t322;
t425 = -t411 - t413;
t434 = t326 * t425 + t387;
t205 = t326 * t209;
t435 = t322 * t425 - t205;
t446 = t319 * t434 + t320 * t435;
t465 = qJ(3) * t446;
t462 = -pkin(2) * t446 - pkin(3) * t435;
t447 = -t319 * t435 + t320 * t434;
t461 = -pkin(2) * t430 + qJ(3) * t447;
t241 = -t261 + t411;
t448 = t326 * t241 - t387;
t449 = -t241 * t322 - t205;
t460 = t319 * t449 + t320 * t448;
t459 = pkin(7) * (t323 * t430 + t327 * t447) - pkin(1) * t446;
t426 = -t381 + t202;
t458 = t323 * (-t319 * t448 + t320 * t449) - t327 * t426;
t186 = -t413 - t261;
t457 = pkin(2) * t186;
t456 = pkin(3) * t186;
t454 = pkin(8) * t434;
t453 = pkin(8) * t435;
t452 = qJ(5) * t429;
t451 = t186 * t323;
t329 = qJD(1) ^ 2;
t324 = sin(qJ(1));
t328 = cos(qJ(1));
t350 = g(1) * t328 + g(2) * t324;
t398 = qJDD(1) * pkin(7);
t283 = -pkin(1) * t329 - t350 + t398;
t346 = -pkin(2) * t327 - qJ(3) * t323;
t354 = t329 * t346 + t283;
t406 = t327 * g(3);
t410 = qJD(2) ^ 2;
t236 = -qJDD(2) * pkin(2) - t410 * qJ(3) + t323 * t354 + qJDD(3) + t406;
t272 = -pkin(3) * t368 - pkin(8) * t292;
t412 = t291 ^ 2;
t184 = -t341 * pkin(3) - t412 * pkin(8) + t292 * t272 + t236;
t450 = t201 * pkin(4) + t184 - t452;
t321 = sin(qJ(6));
t325 = cos(qJ(6));
t221 = -t325 * t262 + t264 * t321;
t223 = t262 * t321 + t264 * t325;
t151 = t223 * t221;
t287 = qJDD(6) + t293;
t431 = -t151 + t287;
t443 = t321 * t431;
t439 = t325 * t431;
t379 = t291 * t292;
t336 = -t297 - t379;
t433 = t319 * t336;
t432 = t320 * t336;
t133 = -t221 * qJD(6) + t321 * t201 + t325 * t202;
t304 = qJD(6) + t307;
t206 = t304 * t221;
t99 = -t206 + t133;
t276 = t291 * t368;
t253 = -t271 + t276;
t277 = t292 * t368;
t251 = t341 - t277;
t224 = pkin(4) * t262 - qJ(5) * t264;
t358 = t324 * g(1) - t328 * g(2);
t282 = qJDD(1) * pkin(1) + t329 * pkin(7) + t358;
t344 = t296 + t360;
t232 = -t344 * qJ(3) + (-t297 + t309) * pkin(2) - t282;
t407 = t323 * g(3);
t237 = -pkin(2) * t410 + qJDD(2) * qJ(3) + t327 * t354 - t407;
t182 = 0.2e1 * qJD(3) * t292 - t320 * t232 + t319 * t237;
t137 = t336 * pkin(3) + pkin(8) * t253 - t182;
t183 = -0.2e1 * qJD(3) * t291 + t319 * t232 + t320 * t237;
t139 = -pkin(3) * t412 + pkin(8) * t341 + t272 * t368 + t183;
t88 = t322 * t137 + t326 * t139;
t353 = t293 * qJ(5) + t262 * t224 - t88;
t422 = -pkin(4) * (t428 + t411) - qJ(5) * t332 - t353;
t87 = -t326 * t137 + t322 * t139;
t75 = t293 * pkin(4) - qJ(5) * t411 + t264 * t224 + qJDD(5) + t87;
t55 = t209 * pkin(5) - pkin(9) * t426 + t75;
t351 = pkin(5) * t307 - pkin(9) * t264;
t367 = qJD(5) * t307;
t301 = -0.2e1 * t367;
t343 = t301 - t353;
t72 = -pkin(4) * t411 + t343;
t56 = -pkin(5) * t413 + t201 * pkin(9) - t307 * t351 + t72;
t31 = t321 * t56 - t325 * t55;
t32 = t321 * t55 + t325 * t56;
t17 = -t31 * t325 + t32 * t321;
t18 = t321 * t31 + t325 * t32;
t409 = pkin(4) + pkin(5);
t421 = qJ(5) * t18 - t17 * t409;
t100 = t206 + t133;
t357 = t325 * t201 - t321 * t202;
t98 = (-qJD(6) + t304) * t223 + t357;
t62 = -t100 * t325 + t321 * t98;
t64 = t100 * t321 + t325 * t98;
t420 = qJ(5) * t64 - t409 * t62;
t219 = t221 ^ 2;
t302 = t304 ^ 2;
t149 = -t302 - t219;
t106 = t149 * t321 + t439;
t107 = t149 * t325 - t443;
t419 = qJ(5) * t107 - t106 * t409 + t31;
t220 = t223 ^ 2;
t188 = -t220 - t302;
t143 = t151 + t287;
t397 = t143 * t321;
t115 = t188 * t325 - t397;
t396 = t143 * t325;
t116 = -t188 * t321 - t396;
t418 = qJ(5) * t116 - t115 * t409 + t32;
t334 = (t262 * t322 + t264 * t326) * t307;
t375 = t307 * t322;
t239 = t264 * t375;
t374 = t307 * t326;
t364 = t262 * t374;
t347 = -t239 + t364;
t417 = t319 * t347 + t320 * t334;
t337 = t201 * t322 - t364;
t348 = -t326 * t201 - t262 * t375;
t416 = t319 * t337 + t320 * t348;
t415 = t323 * (-t319 * t334 + t320 * t347) + t327 * t293;
t362 = t327 * t380;
t414 = t323 * (-t319 * t348 + t320 * t337) + t362;
t290 = t292 ^ 2;
t408 = pkin(4) * t326;
t52 = t322 * t88 - t326 * t87;
t403 = t319 * t52;
t402 = t320 * t52;
t85 = (-pkin(4) * t307 - 0.2e1 * qJD(5)) * t264 + t450;
t69 = t201 * pkin(5) + pkin(9) * t413 - t264 * t351 + t85;
t401 = t321 * t69;
t400 = t325 * t69;
t399 = qJ(5) * t326;
t392 = t426 * t322;
t391 = t184 * t322;
t390 = t184 * t326;
t386 = t236 * t319;
t385 = t236 * t320;
t254 = t297 - t379;
t383 = t254 * t319;
t382 = t254 * t320;
t377 = t304 * t321;
t376 = t304 * t325;
t306 = t327 * t329 * t323;
t373 = t323 * (qJDD(2) + t306);
t371 = t327 * (-t306 + qJDD(2));
t363 = t327 * t151;
t361 = t327 * t379;
t359 = -qJ(5) * t322 - pkin(3);
t53 = t322 * t87 + t326 * t88;
t127 = t182 * t319 + t320 * t183;
t268 = t323 * t283 + t406;
t269 = t283 * t327 - t407;
t356 = t323 * t268 + t327 * t269;
t352 = -pkin(4) * t75 + qJ(5) * t72;
t161 = t202 * t322 - t264 * t374;
t162 = t202 * t326 + t239;
t349 = t323 * (-t161 * t319 + t162 * t320) - t362;
t345 = -pkin(4) * t426 - qJ(5) * t175;
t342 = t182 * t320 - t183 * t319;
t340 = -pkin(1) + t346;
t132 = -qJD(6) * t223 + t357;
t331 = -pkin(4) * t209 + qJ(5) * t425 - t75;
t330 = 0.2e1 * qJD(5) * t264 - t450;
t317 = t327 ^ 2;
t316 = t323 ^ 2;
t313 = t317 * t329;
t312 = t316 * t329;
t298 = -0.2e1 * t309 + t365;
t295 = t311 + 0.2e1 * t360;
t285 = t327 * t297;
t275 = -t290 - t313;
t274 = -t290 + t313;
t273 = -t313 + t412;
t265 = -t313 - t412;
t252 = t271 + t276;
t250 = -t277 - t341;
t244 = -t290 - t412;
t229 = -t275 * t319 + t382;
t228 = t275 * t320 + t383;
t214 = t265 * t320 - t433;
t213 = t265 * t319 + t432;
t207 = t304 * t223;
t204 = -t220 + t302;
t203 = t219 - t302;
t200 = t251 * t320 - t253 * t319;
t176 = (-qJD(4) - t307) * t264 + t355;
t171 = t326 * t426;
t150 = t220 - t219;
t141 = (-t221 * t325 + t223 * t321) * t304;
t140 = (t221 * t321 + t223 * t325) * t304;
t134 = t219 + t220;
t131 = t203 * t325 - t397;
t130 = -t204 * t321 + t439;
t129 = -t203 * t321 - t396;
t128 = -t204 * t325 - t443;
t125 = t176 * t326 + t392;
t123 = -t175 * t326 + t392;
t121 = t176 * t322 - t171;
t119 = -t175 * t322 - t171;
t117 = t390 - t471;
t114 = t161 * t320 + t162 * t319;
t108 = t391 - t453;
t97 = t132 - t207;
t96 = -t132 - t207;
t95 = t133 * t325 - t223 * t377;
t94 = -t133 * t321 - t223 * t376;
t93 = -t132 * t321 + t221 * t376;
t92 = -t132 * t325 - t221 * t377;
t91 = -t140 * t322 + t141 * t326;
t90 = t140 * t326 + t141 * t322;
t89 = -pkin(3) * t429 + t391 + t470;
t84 = -pkin(3) * t430 - t390 + t454;
t83 = -t129 * t322 + t131 * t326;
t82 = -t128 * t322 + t130 * t326;
t81 = t129 * t326 + t131 * t322;
t80 = t128 * t326 + t130 * t322;
t79 = -t121 * t319 + t125 * t320;
t78 = -t119 * t319 + t123 * t320;
t77 = t121 * t320 + t125 * t319;
t76 = t119 * t320 + t123 * t319;
t74 = t115 * t322 + t116 * t326;
t73 = -t115 * t326 + t116 * t322;
t71 = (-t430 + t249) * pkin(4) + t330;
t70 = pkin(4) * t249 + t330 + t452;
t68 = -qJ(5) * t186 + t75;
t67 = (-t186 - t411) * pkin(4) + t343;
t66 = t106 * t322 + t107 * t326;
t65 = -t106 * t326 + t107 * t322;
t63 = -t321 * t99 + t325 * t97;
t61 = -t321 * t97 - t325 * t99;
t60 = -t322 * t94 + t326 * t95;
t59 = -t322 * t92 + t326 * t93;
t58 = t322 * t95 + t326 * t94;
t57 = t322 * t93 + t326 * t92;
t51 = -t322 * t71 - t399 * t430 - t453;
t50 = -pkin(4) * t393 + t326 * t70 + t471;
t49 = -pkin(3) * t184 + pkin(8) * t53;
t48 = t326 * t71 + t359 * t430 + t454;
t47 = -t470 + t322 * t70 + (pkin(3) + t408) * t429;
t46 = -pkin(8) * t121 - t52;
t45 = t322 * t75 + t326 * t72;
t44 = t322 * t72 - t326 * t75;
t43 = -t319 * t73 + t320 * t74;
t42 = t319 * t74 + t320 * t73;
t41 = pkin(8) * t125 - t456 + t53;
t40 = -pkin(9) * t115 + qJ(5) * t99 - t400;
t39 = -pkin(9) * t106 - qJ(5) * t97 - t401;
t38 = -t319 * t65 + t320 * t66;
t37 = t319 * t66 + t320 * t65;
t36 = t322 * t62 + t326 * t64;
t35 = -t322 * t61 + t326 * t63;
t34 = t322 * t64 - t326 * t62;
t33 = t322 * t63 + t326 * t61;
t30 = -pkin(8) * t119 - t322 * t67 + t326 * t68;
t29 = -pkin(9) * t116 + t409 * t99 + t401;
t28 = -pkin(9) * t107 - t409 * t97 - t400;
t27 = t320 * t53 - t403;
t26 = t319 * t53 + t402;
t25 = pkin(8) * t123 + t322 * t68 + t326 * t67 - t456;
t24 = -pkin(8) * t44 + (pkin(4) * t322 - t399) * t85;
t23 = -t319 * t44 + t320 * t45;
t22 = t319 * t45 + t320 * t44;
t21 = pkin(8) * t45 + (t359 - t408) * t85;
t20 = -t319 * t34 + t320 * t36;
t19 = t319 * t36 + t320 * t34;
t16 = -pkin(8) * t73 - t29 * t322 + t326 * t40;
t15 = -pkin(9) * t17 - qJ(5) * t69;
t14 = -pkin(8) * t65 - t28 * t322 + t326 * t39;
t13 = pkin(3) * t99 + pkin(8) * t74 + t29 * t326 + t322 * t40;
t12 = -pkin(9) * t62 - qJ(5) * t134 - t17;
t11 = -pkin(3) * t97 + pkin(8) * t66 + t28 * t326 + t322 * t39;
t10 = -pkin(9) * t64 - t134 * t409 - t18;
t9 = -pkin(9) * t18 - t409 * t69;
t8 = t17 * t322 + t18 * t326;
t7 = -t17 * t326 + t18 * t322;
t6 = -pkin(8) * t34 - t10 * t322 + t12 * t326;
t5 = -pkin(3) * t134 + pkin(8) * t36 + t10 * t326 + t12 * t322;
t4 = -t319 * t7 + t320 * t8;
t3 = t319 * t8 + t320 * t7;
t2 = -pkin(8) * t7 + t15 * t326 - t322 * t9;
t1 = -pkin(3) * t69 + pkin(8) * t8 + t15 * t322 + t326 * t9;
t54 = [0, 0, 0, 0, 0, qJDD(1), t358, t350, 0, 0, t344 * t323, t295 * t327 + t298 * t323, t373 + t327 * (-t312 + t410), -t309 * t327 + t285, t323 * (t313 - t410) + t371, 0, t327 * t282 + pkin(1) * t298 + pkin(7) * (t327 * (-t313 - t410) - t373), -t323 * t282 - pkin(1) * t295 + pkin(7) * (-t371 - t323 * (-t312 - t410)), pkin(1) * (t312 + t313) + (t316 + t317) * t398 + t356, pkin(1) * t282 + pkin(7) * t356, t323 * (t271 * t320 + t277 * t319) - t361, t323 * (-t250 * t320 - t252 * t319) + t327 * (-t290 + t412), t323 * (-t274 * t319 + t432) + t327 * t253, t323 * (-t276 * t320 - t319 * t341) + t361, t323 * (t273 * t320 + t383) - t327 * t251, t285 + t323 * (t291 * t320 - t292 * t319) * t368, t323 * (-qJ(3) * t213 + t386) + t327 * (-pkin(2) * t213 + t182) - pkin(1) * t213 + pkin(7) * (t214 * t327 + t250 * t323), t323 * (-qJ(3) * t228 + t385) + t327 * (-pkin(2) * t228 + t183) - pkin(1) * t228 + pkin(7) * (t229 * t327 + t252 * t323), t323 * t342 + pkin(7) * (t200 * t327 + t244 * t323) + t340 * (t251 * t319 + t253 * t320), pkin(7) * (t127 * t327 + t236 * t323) - t340 * t342, t349, -t473, t458, t414, -t474, t415, t323 * (t108 * t320 - t319 * t84 - t465) + t327 * (t462 + t87) + t459, t323 * (t117 * t320 - t319 * t89 - t478) + t327 * (t477 + t88) + t480, t323 * (-qJ(3) * t77 - t319 * t41 + t320 * t46) + t327 * (-pkin(2) * t77 - pkin(3) * t121) - pkin(1) * t77 + pkin(7) * (t327 * t79 + t451), t323 * (-pkin(8) * t402 - qJ(3) * t26 - t319 * t49) + t327 * (-pkin(2) * t26 - pkin(3) * t52) - pkin(1) * t26 + pkin(7) * (t184 * t323 + t27 * t327), t349, t458, t473, t415, t474, t414, t323 * (-t319 * t48 + t320 * t51 - t465) + t327 * (-t331 + t462) + t459, t323 * (-qJ(3) * t76 - t25 * t319 + t30 * t320) + t327 * (-pkin(2) * t76 - pkin(3) * t119 - t345) - pkin(1) * t76 + pkin(7) * (t327 * t78 + t451), t323 * (-t319 * t47 + t320 * t50 + t478) + t327 * (0.2e1 * t367 - t422 - t477) - t480, t323 * (-qJ(3) * t22 - t21 * t319 + t24 * t320) + t327 * (-pkin(2) * t22 - pkin(3) * t44 - t352) - pkin(1) * t22 + pkin(7) * (t23 * t327 + t323 * t85), t323 * (-t319 * t58 + t320 * t60) + t363, t323 * (-t319 * t33 + t320 * t35) + t327 * t150, t323 * (-t319 * t80 + t320 * t82) + t327 * t100, t323 * (-t319 * t57 + t320 * t59) - t363, t323 * (-t319 * t81 + t320 * t83) - t327 * t96, t323 * (-t319 * t90 + t320 * t91) + t327 * t287, t323 * (-qJ(3) * t37 - t11 * t319 + t14 * t320) + t327 * (-pkin(2) * t37 - pkin(3) * t65 - t419) - pkin(1) * t37 + pkin(7) * (t323 * t97 + t327 * t38), t323 * (-qJ(3) * t42 - t13 * t319 + t16 * t320) + t327 * (-pkin(2) * t42 - pkin(3) * t73 - t418) - pkin(1) * t42 + pkin(7) * (-t323 * t99 + t327 * t43), t323 * (-qJ(3) * t19 - t319 * t5 + t320 * t6) + t327 * (-pkin(2) * t19 - pkin(3) * t34 - t420) - pkin(1) * t19 + pkin(7) * (t134 * t323 + t20 * t327), t323 * (-qJ(3) * t3 - t1 * t319 + t2 * t320) + t327 * (-pkin(2) * t3 - pkin(3) * t7 - t421) - pkin(1) * t3 + pkin(7) * (t323 * t69 + t327 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t306, t312 - t313, t311, t306, t365, qJDD(2), -t268, -t269, 0, 0, t271 * t319 - t277 * t320, -t250 * t319 + t252 * t320, t274 * t320 + t433, -t276 * t319 + t320 * t341, t273 * t319 - t382, (t291 * t319 + t292 * t320) * t368, -pkin(2) * t250 + qJ(3) * t214 - t385, -pkin(2) * t252 + qJ(3) * t229 + t386, -pkin(2) * t244 + qJ(3) * t200 + t127, -pkin(2) * t236 + qJ(3) * t127, t114, -t469, t460, t416, t467, t417, t108 * t319 + t320 * t84 + t461, t117 * t319 + t320 * t89 + t476, qJ(3) * t79 + t319 * t46 + t320 * t41 - t457, -pkin(2) * t184 - pkin(8) * t403 + qJ(3) * t27 + t320 * t49, t114, t460, t469, t417, -t467, t416, t319 * t51 + t320 * t48 + t461, qJ(3) * t78 + t25 * t320 + t30 * t319 - t457, t319 * t50 + t320 * t47 - t476, -pkin(2) * t85 + qJ(3) * t23 + t21 * t320 + t24 * t319, t319 * t60 + t320 * t58, t319 * t35 + t320 * t33, t319 * t82 + t320 * t80, t319 * t59 + t320 * t57, t319 * t83 + t320 * t81, t319 * t91 + t320 * t90, -pkin(2) * t97 + qJ(3) * t38 + t11 * t320 + t14 * t319, pkin(2) * t99 + qJ(3) * t43 + t13 * t320 + t16 * t319, -pkin(2) * t134 + qJ(3) * t20 + t319 * t6 + t320 * t5, -pkin(2) * t69 + qJ(3) * t4 + t1 * t320 + t2 * t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t250, t252, t244, t236, 0, 0, 0, 0, 0, 0, t430, t429, t186, t184, 0, 0, 0, 0, 0, 0, t430, t186, -t429, t85, 0, 0, 0, 0, 0, 0, t97, -t99, t134, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, t427, t426, -t380, -t175, -t293, -t87, -t88, 0, 0, t380, t426, -t427, -t293, t175, -t380, t331, t345, t301 + t422, t352, -t151, -t150, -t100, t151, t96, -t287, t419, t418, t420, t421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209, t426, t428, t75, 0, 0, 0, 0, 0, 0, t106, t115, t62, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, t150, t100, -t151, -t96, t287, -t31, -t32, 0, 0;];
tauJ_reg  = t54;
