% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:59:37
% EndTime: 2019-05-06 15:00:33
% DurationCPUTime: 51.23s
% Computational Cost: add. (145308->804), mult. (316300->1163), div. (0->0), fcn. (228390->10), ass. (0->573)
t1043 = sin(qJ(1));
t1047 = cos(qJ(1));
t1042 = sin(qJ(2));
t1046 = cos(qJ(2));
t1041 = sin(qJ(4));
t1045 = cos(qJ(4));
t1105 = qJD(1) * t1046;
t1083 = qJD(2) * t1105;
t1092 = qJDD(1) * t1042;
t1005 = t1083 + t1092;
t1038 = sin(pkin(10));
t1039 = cos(pkin(10));
t1061 = qJDD(2) * t1039 - t1005 * t1038;
t975 = qJDD(2) * t1038 + t1039 * t1005;
t1051 = -t1041 * t1061 - t1045 * t975;
t1106 = qJD(1) * t1042;
t1077 = qJD(2) * t1039 - t1038 * t1106;
t998 = qJD(2) * t1038 + t1039 * t1106;
t952 = t1041 * t998 - t1045 * t1077;
t1050 = -t952 * qJD(4) - t1051;
t1027 = -qJD(4) + t1105;
t1110 = t952 * t1027;
t1159 = t1050 + t1110;
t954 = t1041 * t1077 + t1045 * t998;
t1139 = t952 * t954;
t1030 = qJD(2) * t1106;
t1089 = t1046 * qJDD(1);
t1006 = -t1030 + t1089;
t999 = -qJDD(4) + t1006;
t1053 = t999 - t1139;
t1113 = t1045 * t1053;
t1146 = t1027 ^ 2;
t951 = t954 ^ 2;
t911 = -t951 - t1146;
t798 = t1041 * t911 - t1113;
t1124 = t1041 * t1053;
t804 = t1045 * t911 + t1124;
t721 = t1038 * t804 + t1039 * t798;
t685 = -t1042 * t1159 + t1046 * t721;
t719 = t1038 * t798 - t1039 * t804;
t622 = t1043 * t685 - t1047 * t719;
t1267 = pkin(6) * t622;
t624 = t1043 * t719 + t1047 * t685;
t1266 = pkin(6) * t624;
t683 = t1042 * t721 + t1046 * t1159;
t1265 = pkin(7) * t683;
t1264 = -pkin(1) * t683 - pkin(2) * t1159 - qJ(3) * t721;
t1263 = -pkin(1) * t719 + pkin(7) * t685;
t1148 = t952 ^ 2;
t928 = t1148 - t1146;
t819 = t1041 * t928 - t1113;
t823 = t1045 * t928 + t1124;
t750 = t1038 * t819 - t1039 * t823;
t1080 = t1041 * t975 - t1045 * t1061;
t1094 = qJD(4) + t1027;
t828 = t1094 * t954 + t1080;
t698 = t1042 * t828 + t1046 * t750;
t746 = t1038 * t823 + t1039 * t819;
t1262 = t1043 * t698 + t1047 * t746;
t827 = (qJD(4) - t1027) * t954 + t1080;
t756 = -t1041 * t827 + t1045 * t1159;
t1127 = t1041 * t1159;
t758 = t1045 * t827 + t1127;
t673 = t1038 * t756 + t1039 * t758;
t893 = t951 - t1148;
t658 = -t1042 * t893 + t1046 * t673;
t671 = t1038 * t758 - t1039 * t756;
t1261 = t1043 * t658 - t1047 * t671;
t1260 = -t1043 * t746 + t1047 * t698;
t1259 = t1043 * t671 + t1047 * t658;
t1158 = t1110 - t1050;
t1191 = -t1041 * t1158 - t1045 * t828;
t1192 = -t1041 * t828 + t1045 * t1158;
t1207 = t1038 * t1191 + t1039 * t1192;
t1208 = -t1038 * t1192 + t1039 * t1191;
t849 = t951 + t1148;
t1224 = -t1042 * t849 + t1046 * t1208;
t1239 = t1043 * t1207 + t1047 * t1224;
t1257 = pkin(6) * t1239;
t1241 = t1043 * t1224 - t1047 * t1207;
t1256 = pkin(6) * t1241;
t1255 = qJ(3) * t719;
t1248 = -pkin(2) * t719 + pkin(3) * t804;
t1246 = t1042 * t750 - t1046 * t828;
t1245 = t1042 * t673 + t1046 * t893;
t1226 = t1042 * t1208 + t1046 * t849;
t1244 = pkin(7) * t1226;
t1243 = -pkin(1) * t1226 - pkin(2) * t849 - qJ(3) * t1208;
t1242 = -pkin(1) * t1207 + pkin(7) * t1224;
t1081 = t999 + t1139;
t1123 = t1041 * t1081;
t929 = -t951 + t1146;
t1161 = t1045 * t929 - t1123;
t1160 = t1045 * t1081;
t1193 = -t1041 * t929 - t1160;
t1210 = -t1038 * t1193 - t1039 * t1161;
t1209 = -t1038 * t1161 + t1039 * t1193;
t1225 = -t1042 * t1158 + t1046 * t1209;
t1240 = t1043 * t1225 + t1047 * t1210;
t1238 = -t1043 * t1210 + t1047 * t1225;
t1236 = pkin(8) * t798;
t1235 = pkin(8) * t804;
t1233 = qJ(3) * t1207;
t629 = -pkin(2) * t1207 - pkin(3) * t1192;
t1227 = t1042 * t1209 + t1046 * t1158;
t1157 = -t1146 - t1148;
t1166 = t1045 * t1157 + t1123;
t1169 = t1041 * t1157 - t1160;
t1185 = t1038 * t1166 + t1039 * t1169;
t1223 = pkin(1) * t1185;
t1221 = pkin(8) * t1192;
t1220 = qJ(3) * t1185;
t1186 = -t1038 * t1169 + t1039 * t1166;
t1219 = qJ(3) * t1186;
t1216 = t1042 * t1186;
t1215 = t1043 * t1185;
t1214 = t1046 * t1186;
t1213 = t1047 * t1185;
t1212 = -pkin(2) * t1185 - pkin(3) * t1169;
t1211 = pkin(3) * t849 + pkin(8) * t1191;
t1203 = pkin(8) * t1166;
t1202 = pkin(8) * t1169;
t1201 = qJ(5) * t1159;
t1075 = t1077 ^ 2;
t1142 = pkin(2) * t1046;
t1065 = -qJ(3) * t1042 - t1142;
t1003 = t1065 * qJD(1);
t1140 = t1046 * g(3);
t1147 = qJD(2) ^ 2;
t1017 = g(1) * t1047 + g(2) * t1043;
t1048 = qJD(1) ^ 2;
t991 = -pkin(1) * t1048 + qJDD(1) * pkin(7) - t1017;
t914 = -qJDD(2) * pkin(2) - t1147 * qJ(3) + (qJD(1) * t1003 + t991) * t1042 + qJDD(3) + t1140;
t976 = -pkin(3) * t1105 - pkin(8) * t998;
t840 = -t1061 * pkin(3) - t1075 * pkin(8) + t998 * t976 + t914;
t865 = qJD(4) * t954 + t1080;
t1196 = t865 * pkin(4) - t1201 + t840;
t1063 = t1077 * t998;
t1170 = -t1006 + t1063;
t1195 = t1038 * t1170;
t1194 = t1039 * t1170;
t1055 = (t1041 * t952 + t1045 * t954) * t1027;
t1096 = t1027 * t1045;
t1084 = t952 * t1096;
t1097 = t1027 * t1041;
t923 = t954 * t1097;
t1067 = -t923 + t1084;
t1152 = -t1038 * t1067 - t1039 * t1055;
t1151 = -t1038 * t1055 + t1039 * t1067;
t1164 = -t1042 * t999 + t1046 * t1151;
t1190 = t1043 * t1164 + t1047 * t1152;
t1059 = t1041 * t865 - t1084;
t1068 = -t1045 * t865 - t1097 * t952;
t1149 = -t1038 * t1059 - t1039 * t1068;
t1087 = t1042 * t1139;
t1150 = -t1038 * t1068 + t1039 * t1059;
t1165 = t1046 * t1150 - t1087;
t1189 = t1043 * t1165 + t1047 * t1149;
t1188 = -t1043 * t1152 + t1047 * t1164;
t1187 = -t1043 * t1149 + t1047 * t1165;
t1184 = -2 * qJD(5);
t1040 = sin(qJ(6));
t1044 = cos(qJ(6));
t889 = t1040 * t954 - t1044 * t952;
t891 = t1040 * t952 + t1044 * t954;
t802 = t891 * t889;
t995 = qJDD(6) + t999;
t1162 = -t802 + t995;
t1180 = t1040 * t1162;
t1175 = t1044 * t1162;
t1168 = t1042 * t1151 + t1046 * t999;
t1085 = t1046 * t1139;
t1167 = t1042 * t1150 + t1085;
t768 = -t891 * qJD(6) - t1040 * t1050 + t1044 * t865;
t1019 = qJD(6) + t1027;
t870 = t1019 * t891;
t1163 = t768 + t870;
t769 = -t889 * qJD(6) + t1040 * t865 + t1044 * t1050;
t869 = t1019 * t889;
t716 = -t869 + t769;
t1062 = t1046 * t1077;
t981 = qJD(1) * t1062;
t943 = -t975 - t981;
t982 = t998 * t1105;
t941 = t1061 - t982;
t1145 = 2 * qJD(3);
t1064 = t1005 + t1083;
t1016 = t1043 * g(1) - t1047 * g(2);
t990 = qJDD(1) * pkin(1) + t1048 * pkin(7) + t1016;
t905 = -t1064 * qJ(3) + (-t1006 + t1030) * pkin(2) - t990;
t971 = -g(3) * t1042 + t1046 * t991;
t915 = -pkin(2) * t1147 + qJDD(2) * qJ(3) + t1003 * t1105 + t971;
t837 = t1038 * t915 - t1039 * t905 + t1145 * t998;
t777 = pkin(3) * t1170 + pkin(8) * t943 - t837;
t838 = t1038 * t905 + t1039 * t915 + t1077 * t1145;
t784 = -pkin(3) * t1075 + pkin(8) * t1061 + t1105 * t976 + t838;
t700 = t1041 * t777 + t1045 * t784;
t892 = pkin(4) * t952 - qJ(5) * t954;
t1066 = -t999 * qJ(5) + t1027 * t1184 - t952 * t892 + t700;
t815 = t1041 * t1050 - t1096 * t954;
t816 = t1045 * t1050 + t923;
t742 = -t1038 * t815 + t1039 * t816;
t1071 = t1046 * t742 + t1087;
t739 = -t1038 * t816 - t1039 * t815;
t1154 = t1043 * t1071 + t1047 * t739;
t1153 = -t1043 * t739 + t1047 * t1071;
t887 = t889 ^ 2;
t888 = t891 ^ 2;
t997 = t998 ^ 2;
t1018 = t1019 ^ 2;
t1144 = pkin(4) + pkin(5);
t1143 = pkin(2) * t1042;
t1141 = pkin(4) * t1045;
t699 = t1041 * t784 - t1045 * t777;
t1137 = qJ(5) * t1045;
t627 = t1041 * t700 - t1045 * t699;
t1136 = t1038 * t627;
t1135 = t1038 * t914;
t944 = t1006 + t1063;
t1134 = t1038 * t944;
t1133 = t1039 * t627;
t1132 = t1039 * t914;
t1131 = t1039 * t944;
t1072 = pkin(5) * t1027 - pkin(9) * t954;
t693 = (-pkin(4) * t1027 + t1184) * t954 + t1196;
t657 = t865 * pkin(5) + pkin(9) * t1148 - t1072 * t954 + t693;
t1130 = t1040 * t657;
t794 = t802 + t995;
t1129 = t1040 * t794;
t1125 = t1041 * t840;
t1120 = t1042 * t990;
t1117 = t1044 * t657;
t1116 = t1044 * t794;
t1114 = t1045 * t840;
t1111 = t1046 * t990;
t1109 = t954 * t1027;
t1108 = -t1146 + t849;
t1107 = qJD(1) * qJD(2);
t1103 = t1006 * t1042;
t1026 = t1046 * t1048 * t1042;
t1013 = -t1026 + qJDD(2);
t1102 = t1013 * t1042;
t1101 = t1013 * t1046;
t1014 = qJDD(2) + t1026;
t1100 = t1014 * t1042;
t1099 = t1019 * t1040;
t1098 = t1019 * t1044;
t1035 = t1042 ^ 2;
t1095 = t1035 * t1048;
t1036 = t1046 ^ 2;
t1093 = t1035 + t1036;
t1091 = qJDD(1) * t1043;
t1090 = qJDD(1) * t1047;
t1088 = t1042 * t802;
t1086 = t1046 * t802;
t1082 = -qJ(5) * t1041 - pkin(3);
t1076 = t954 * t892 + qJDD(5) + t699;
t1058 = t999 * pkin(4) + t1076;
t1052 = -qJ(5) * t1146 + t1058;
t631 = (t1094 * t952 + t1051) * pkin(9) + t1081 * pkin(5) + t1052;
t665 = -pkin(4) * t1146 + t1066;
t633 = -pkin(5) * t1148 + t865 * pkin(9) - t1027 * t1072 + t665;
t578 = t1040 * t633 - t1044 * t631;
t628 = t1041 * t699 + t1045 * t700;
t970 = t1042 * t991 + t1140;
t908 = t1042 * t970 + t1046 * t971;
t962 = -t1016 * t1043 - t1047 * t1017;
t1074 = t1043 * t1026;
t1073 = t1047 * t1026;
t1070 = t1042 * t742 - t1085;
t1010 = -t1043 * t1048 + t1090;
t1069 = -pkin(6) * t1010 - g(3) * t1043;
t762 = t1038 * t838 - t1039 * t837;
t763 = t1038 * t837 + t1039 * t838;
t579 = t1040 * t631 + t1044 * t633;
t541 = t1040 * t579 - t1044 * t578;
t542 = t1040 * t578 + t1044 * t579;
t906 = t1042 * t971 - t1046 * t970;
t961 = t1016 * t1047 - t1017 * t1043;
t1057 = t1042 * t1063;
t1056 = t998 * t1062;
t1049 = 0.2e1 * qJD(5) * t954 - t1196;
t1032 = t1036 * t1048;
t1024 = -t1032 - t1147;
t1023 = t1032 - t1147;
t1022 = -t1095 - t1147;
t1021 = -t1095 + t1147;
t1012 = t1032 - t1095;
t1011 = t1032 + t1095;
t1009 = t1047 * t1048 + t1091;
t1008 = t1093 * qJDD(1);
t1007 = -0.2e1 * t1030 + t1089;
t1004 = 0.2e1 * t1083 + t1092;
t1001 = t1046 * t1014;
t1000 = t1093 * t1107;
t993 = t1046 * t1006;
t983 = -pkin(6) * t1009 + g(3) * t1047;
t979 = -t997 - t1032;
t978 = -t997 + t1032;
t977 = t1075 - t1032;
t974 = t1005 * t1046 - t1035 * t1107;
t973 = -t1036 * t1107 - t1103;
t969 = -t1022 * t1042 - t1101;
t968 = -t1021 * t1042 + t1001;
t967 = t1024 * t1046 - t1100;
t966 = t1023 * t1046 - t1102;
t965 = t1022 * t1046 - t1102;
t964 = t1024 * t1042 + t1001;
t959 = t1008 * t1047 - t1011 * t1043;
t958 = t1008 * t1043 + t1011 * t1047;
t957 = -t997 + t1075;
t956 = -t1004 * t1042 + t1007 * t1046;
t955 = -t1032 - t1075;
t942 = t975 - t981;
t940 = t1061 + t982;
t934 = t1075 + t997;
t932 = (-t1038 * t998 - t1039 * t1077) * t1105;
t931 = (t1038 * t1077 - t1039 * t998) * t1105;
t927 = t1004 * t1043 + t1047 * t969;
t926 = -t1007 * t1043 + t1047 * t967;
t925 = -t1004 * t1047 + t1043 * t969;
t924 = t1007 * t1047 + t1043 * t967;
t922 = -pkin(7) * t965 - t1111;
t921 = -pkin(7) * t964 - t1120;
t919 = t1038 * t982 + t1039 * t975;
t918 = -t1038 * t975 + t1039 * t982;
t917 = -t1038 * t1061 + t1039 * t981;
t916 = -t1038 * t981 - t1039 * t1061;
t913 = -pkin(1) * t965 + t971;
t912 = -pkin(1) * t964 + t970;
t902 = t1046 * t932 - t1103;
t901 = t1039 * t977 + t1134;
t900 = -t1038 * t978 + t1194;
t899 = -t1038 * t979 + t1131;
t898 = -t1038 * t977 + t1131;
t897 = -t1039 * t978 - t1195;
t896 = t1039 * t979 + t1134;
t886 = -t1043 * t990 + t1047 * t908;
t885 = t1043 * t908 + t1047 * t990;
t879 = t1039 * t955 - t1195;
t878 = t1038 * t955 + t1194;
t877 = t1046 * t919 - t1057;
t876 = t1046 * t917 + t1057;
t867 = -t888 + t1018;
t866 = t887 - t1018;
t864 = -t1038 * t943 + t1039 * t941;
t863 = -t1038 * t942 + t1039 * t940;
t862 = t1038 * t941 + t1039 * t943;
t861 = -t1038 * t940 - t1039 * t942;
t850 = -t888 - t1018;
t845 = t1042 * t941 + t1046 * t901;
t844 = -t1042 * t943 + t1046 * t900;
t843 = t1042 * t942 + t1046 * t899;
t842 = t1042 * t899 - t1046 * t942;
t841 = -qJ(3) * t896 + t1132;
t839 = -t1042 * t957 + t1046 * t863;
t836 = -t1042 * t940 + t1046 * t879;
t835 = t1042 * t879 + t1046 * t940;
t826 = t865 - t1109;
t810 = -qJ(3) * t878 + t1135;
t809 = -t1042 * t934 + t1046 * t864;
t808 = t1042 * t864 + t1046 * t934;
t801 = t888 - t887;
t800 = -t1018 - t887;
t792 = (t1040 * t891 - t1044 * t889) * t1019;
t791 = (t1040 * t889 + t1044 * t891) * t1019;
t786 = t1043 * t896 + t1047 * t843;
t785 = t1043 * t843 - t1047 * t896;
t781 = -pkin(2) * t896 + t838;
t778 = -pkin(2) * t878 + t837;
t774 = t1043 * t878 + t1047 * t836;
t773 = t1043 * t836 - t1047 * t878;
t772 = t887 + t888;
t771 = t1043 * t862 + t1047 * t809;
t770 = t1043 * t809 - t1047 * t862;
t767 = t1044 * t866 - t1129;
t766 = -t1040 * t867 + t1175;
t765 = -t1040 * t866 - t1116;
t764 = -t1044 * t867 - t1180;
t753 = t1114 - t1235;
t752 = -t1040 * t850 - t1116;
t751 = t1044 * t850 - t1129;
t736 = -pkin(1) * t842 + pkin(2) * t942 - qJ(3) * t899 - t1135;
t728 = t1125 - t1202;
t727 = -pkin(1) * t835 - pkin(2) * t940 - qJ(3) * t879 + t1132;
t726 = t1042 * t914 + t1046 * t763;
t725 = t1042 * t763 - t1046 * t914;
t724 = t1044 * t800 - t1180;
t723 = t1040 * t800 + t1175;
t717 = t869 + t769;
t714 = t768 - t870;
t712 = t1044 * t769 - t1099 * t891;
t711 = -t1040 * t769 - t1098 * t891;
t710 = -t1040 * t768 + t1098 * t889;
t709 = -t1044 * t768 - t1099 * t889;
t708 = -qJ(3) * t862 - t762;
t703 = -t1041 * t791 + t1045 * t792;
t702 = t1041 * t792 + t1045 * t791;
t701 = -pkin(3) * t1159 + t1125 - t1236;
t692 = t1042 * t826 + t1214;
t690 = -t1046 * t826 + t1216;
t688 = -pkin(3) * t827 - t1114 + t1203;
t687 = -pkin(7) * t842 - t1042 * t781 + t1046 * t841;
t686 = t1042 * t827 + t1214;
t684 = -t1046 * t827 + t1216;
t682 = -pkin(7) * t835 - t1042 * t778 + t1046 * t810;
t681 = -t1041 * t765 + t1045 * t767;
t680 = -t1041 * t764 + t1045 * t766;
t679 = t1041 * t767 + t1045 * t765;
t678 = t1041 * t766 + t1045 * t764;
t677 = -pkin(1) * t808 - pkin(2) * t934 - qJ(3) * t864 - t763;
t667 = t1041 * t751 + t1045 * t752;
t666 = t1041 * t752 - t1045 * t751;
t664 = t1049 + (-t826 + t1109) * pkin(4);
t663 = pkin(4) * t1109 + t1049 + t1201;
t662 = -pkin(7) * t808 + t1046 * t708 + t1143 * t862;
t661 = t1043 * t762 + t1047 * t726;
t660 = t1043 * t726 - t1047 * t762;
t656 = -pkin(1) * t725 + pkin(2) * t914 - qJ(3) * t763;
t651 = qJ(5) * t1108 + t1058;
t650 = pkin(4) * t1108 + t1066;
t649 = t1041 * t723 + t1045 * t724;
t648 = t1041 * t724 - t1045 * t723;
t647 = t1040 * t717 + t1044 * t1163;
t646 = -t1040 * t716 + t1044 * t714;
t645 = t1040 * t1163 - t1044 * t717;
t644 = -t1040 * t714 - t1044 * t716;
t643 = -t1041 * t711 + t1045 * t712;
t642 = -t1041 * t709 + t1045 * t710;
t641 = t1041 * t712 + t1045 * t711;
t640 = t1041 * t710 + t1045 * t709;
t639 = t1047 * t692 + t1215;
t637 = t1043 * t692 - t1213;
t635 = -t1038 * t702 + t1039 * t703;
t634 = -t1038 * t703 - t1039 * t702;
t632 = -t1042 * t995 + t1046 * t635;
t626 = -t1041 * t664 - t1137 * t826 - t1202;
t625 = t1047 * t686 + t1215;
t623 = t1043 * t686 - t1213;
t621 = -t1248 + t700;
t620 = -pkin(7) * t725 + (-qJ(3) * t1046 + t1143) * t762;
t619 = -pkin(4) * t1127 + t1045 * t663 + t1235;
t618 = t1212 + t699;
t617 = -pkin(3) * t840 + pkin(8) * t628;
t616 = t1045 * t664 + t1082 * t826 + t1203;
t615 = -t1038 * t701 + t1039 * t753 + t1255;
t614 = t1236 + t1041 * t663 + (pkin(3) + t1141) * t1159;
t613 = -pkin(4) * t1158 + qJ(5) * t828 + t629;
t612 = -t1038 * t679 + t1039 * t681;
t611 = -t1038 * t678 + t1039 * t680;
t610 = -t1038 * t681 - t1039 * t679;
t609 = -t1038 * t680 - t1039 * t678;
t608 = -t1038 * t688 + t1039 * t728 - t1220;
t607 = -t627 - t1221;
t606 = t1041 * t1052 + t1045 * t665;
t605 = t1041 * t665 - t1045 * t1052;
t604 = -t1038 * t666 + t1039 * t667;
t603 = t1038 * t667 + t1039 * t666;
t602 = (-t1146 - t1157) * qJ(5) + (t1081 + t999) * pkin(4) + t1076 + t1212;
t597 = t1211 + t628;
t596 = qJ(5) * t1053 + (t1146 + t911) * pkin(4) - t1066 + t1248;
t595 = -pkin(9) * t751 + qJ(5) * t716 - t1117;
t594 = -pkin(9) * t723 - qJ(5) * t714 - t1130;
t593 = -t1038 * t648 + t1039 * t649;
t592 = t1038 * t649 + t1039 * t648;
t591 = t1041 * t645 + t1045 * t647;
t590 = -t1041 * t644 + t1045 * t646;
t589 = t1041 * t647 - t1045 * t645;
t588 = t1041 * t646 + t1045 * t644;
t587 = -t1042 * t1163 + t1046 * t612;
t586 = -t1042 * t717 + t1046 * t611;
t585 = -t1038 * t641 + t1039 * t643;
t584 = -t1038 * t640 + t1039 * t642;
t583 = -t1038 * t643 - t1039 * t641;
t582 = -t1038 * t642 - t1039 * t640;
t581 = -t1042 * t716 + t1046 * t604;
t580 = t1042 * t604 + t1046 * t716;
t577 = -t1038 * t753 - t1039 * t701 - t1264;
t576 = -t1041 * t650 + t1045 * t651 - t1221;
t575 = t1046 * t585 - t1088;
t574 = t1046 * t584 + t1088;
t573 = -pkin(9) * t752 + t1144 * t716 + t1130;
t572 = -pkin(9) * t724 - t1144 * t714 - t1117;
t571 = t1039 * t628 - t1136;
t570 = t1038 * t628 + t1133;
t569 = -pkin(1) * t684 + pkin(2) * t827 - t1038 * t728 - t1039 * t688 - t1219;
t568 = t1041 * t651 + t1045 * t650 + t1211;
t567 = t1042 * t714 + t1046 * t593;
t566 = t1042 * t593 - t1046 * t714;
t565 = t1042 * t840 + t1046 * t571;
t564 = t1042 * t571 - t1046 * t840;
t563 = -pkin(8) * t605 + (pkin(4) * t1041 - t1137) * t693;
t562 = -t1038 * t616 + t1039 * t626 - t1220;
t561 = -t1038 * t614 + t1039 * t619 - t1255;
t560 = -t1038 * t605 + t1039 * t606;
t559 = t1038 * t606 + t1039 * t605;
t558 = -t1042 * t621 + t1046 * t615 + t1265;
t557 = pkin(8) * t606 + (t1082 - t1141) * t693;
t556 = -pkin(7) * t684 - t1042 * t618 + t1046 * t608;
t555 = -pkin(2) * t570 - pkin(3) * t627;
t554 = t1043 * t603 + t1047 * t581;
t553 = t1043 * t581 - t1047 * t603;
t552 = t1042 * t693 + t1046 * t560;
t551 = t1042 * t560 - t1046 * t693;
t550 = -pkin(1) * t690 + pkin(2) * t826 - t1038 * t626 - t1039 * t616 - t1219;
t549 = -t1038 * t589 + t1039 * t591;
t548 = -t1038 * t588 + t1039 * t590;
t547 = t1038 * t591 + t1039 * t589;
t546 = -t1038 * t590 - t1039 * t588;
t545 = -t1038 * t619 - t1039 * t614 + t1264;
t544 = -t1038 * t597 + t1039 * t607 - t1233;
t543 = -t1042 * t801 + t1046 * t548;
t540 = t1042 * t772 + t1046 * t549;
t539 = t1042 * t549 - t1046 * t772;
t538 = t1043 * t592 + t1047 * t567;
t537 = t1043 * t567 - t1047 * t592;
t536 = -pkin(8) * t666 - t1041 * t573 + t1045 * t595;
t535 = -pkin(8) * t1133 - qJ(3) * t570 - t1038 * t617;
t534 = t1043 * t570 + t1047 * t565;
t533 = t1043 * t565 - t1047 * t570;
t532 = -t1038 * t607 - t1039 * t597 + t1243;
t531 = -pkin(9) * t541 - qJ(5) * t657;
t530 = -pkin(7) * t690 - t1042 * t602 + t1046 * t562;
t529 = -pkin(8) * t648 - t1041 * t572 + t1045 * t594;
t528 = pkin(3) * t716 + pkin(8) * t667 + t1041 * t595 + t1045 * t573;
t527 = -t1038 * t568 + t1039 * t576 - t1233;
t526 = -t1042 * t596 + t1046 * t561 - t1265;
t525 = -pkin(9) * t645 - qJ(5) * t772 - t541;
t524 = -pkin(2) * t603 - pkin(3) * t666 - qJ(5) * t752 + t1144 * t751 - t579;
t523 = -pkin(3) * t714 + pkin(8) * t649 + t1041 * t594 + t1045 * t572;
t522 = -pkin(9) * t647 - t1144 * t772 - t542;
t521 = -pkin(9) * t542 - t1144 * t657;
t520 = -t1042 * t629 + t1046 * t544 - t1244;
t519 = -pkin(2) * t559 - pkin(3) * t605 + pkin(4) * t1052 - qJ(5) * t665;
t518 = -pkin(2) * t592 - pkin(3) * t648 - qJ(5) * t724 + t1144 * t723 - t578;
t517 = -t1038 * t576 - t1039 * t568 + t1243;
t516 = t1043 * t559 + t1047 * t552;
t515 = t1043 * t552 - t1047 * t559;
t514 = -pkin(1) * t564 + pkin(2) * t840 + pkin(8) * t1136 - qJ(3) * t571 - t1039 * t617;
t513 = -t1042 * t613 + t1046 * t527 - t1244;
t512 = t1043 * t547 + t1047 * t540;
t511 = t1043 * t540 - t1047 * t547;
t510 = t1041 * t541 + t1045 * t542;
t509 = t1041 * t542 - t1045 * t541;
t508 = -pkin(2) * t547 - pkin(3) * t589 - qJ(5) * t647 + t1144 * t645;
t507 = -qJ(3) * t559 - t1038 * t557 + t1039 * t563;
t506 = -pkin(7) * t564 - t1042 * t555 + t1046 * t535;
t505 = -qJ(3) * t603 - t1038 * t528 + t1039 * t536;
t504 = -qJ(3) * t592 - t1038 * t523 + t1039 * t529;
t503 = -pkin(8) * t589 - t1041 * t522 + t1045 * t525;
t502 = -pkin(1) * t551 + pkin(2) * t693 - qJ(3) * t560 - t1038 * t563 - t1039 * t557;
t501 = -pkin(3) * t772 + pkin(8) * t591 + t1041 * t525 + t1045 * t522;
t500 = -pkin(1) * t580 - pkin(2) * t716 - qJ(3) * t604 - t1038 * t536 - t1039 * t528;
t499 = -pkin(1) * t566 + pkin(2) * t714 - qJ(3) * t593 - t1038 * t529 - t1039 * t523;
t498 = -t1038 * t509 + t1039 * t510;
t497 = t1038 * t510 + t1039 * t509;
t496 = t1042 * t657 + t1046 * t498;
t495 = t1042 * t498 - t1046 * t657;
t494 = -pkin(7) * t551 - t1042 * t519 + t1046 * t507;
t493 = -pkin(7) * t580 - t1042 * t524 + t1046 * t505;
t492 = -pkin(8) * t509 - t1041 * t521 + t1045 * t531;
t491 = -pkin(3) * t657 + pkin(8) * t510 + t1041 * t531 + t1045 * t521;
t490 = -pkin(7) * t566 - t1042 * t518 + t1046 * t504;
t489 = -qJ(3) * t547 - t1038 * t501 + t1039 * t503;
t488 = t1043 * t497 + t1047 * t496;
t487 = t1043 * t496 - t1047 * t497;
t486 = -pkin(1) * t539 + pkin(2) * t772 - qJ(3) * t549 - t1038 * t503 - t1039 * t501;
t485 = -pkin(2) * t497 - pkin(3) * t509 - qJ(5) * t542 + t1144 * t541;
t484 = -pkin(7) * t539 - t1042 * t508 + t1046 * t489;
t483 = -qJ(3) * t497 - t1038 * t491 + t1039 * t492;
t482 = -pkin(1) * t495 + pkin(2) * t657 - qJ(3) * t498 - t1038 * t492 - t1039 * t491;
t481 = -pkin(7) * t495 - t1042 * t485 + t1046 * t483;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1009, -t1010, 0, t962, 0, 0, 0, 0, 0, 0, t926, t927, t959, t886, 0, 0, 0, 0, 0, 0, t774, t786, t771, t661, 0, 0, 0, 0, 0, 0, t625, -t624, t1239, t534, 0, 0, 0, 0, 0, 0, t639, t1239, t624, t516, 0, 0, 0, 0, 0, 0, t538, t554, t512, t488; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1010, -t1009, 0, t961, 0, 0, 0, 0, 0, 0, t924, t925, t958, t885, 0, 0, 0, 0, 0, 0, t773, t785, t770, t660, 0, 0, 0, 0, 0, 0, t623, -t622, t1241, t533, 0, 0, 0, 0, 0, 0, t637, t1241, t622, t515, 0, 0, 0, 0, 0, 0, t537, t553, t511, t487; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t964, t965, 0, t906, 0, 0, 0, 0, 0, 0, t835, t842, t808, t725, 0, 0, 0, 0, 0, 0, t684, -t683, t1226, t564, 0, 0, 0, 0, 0, 0, t690, t1226, t683, t551, 0, 0, 0, 0, 0, 0, t566, t580, t539, t495; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1010, 0, -t1009, 0, t1069, -t983, -t961, -pkin(6) * t961, t1047 * t974 - t1074, -t1012 * t1043 + t1047 * t956, t1042 * t1091 + t1047 * t968, t1047 * t973 + t1074, t1043 * t1089 + t1047 * t966, qJDD(2) * t1043 + t1000 * t1047, -pkin(6) * t924 - t1043 * t912 + t1047 * t921, -pkin(6) * t925 - t1043 * t913 + t1047 * t922, -pkin(6) * t958 - t1047 * t906, -pkin(6) * t885 + (pkin(1) * t1043 - pkin(7) * t1047) * t906, -t1043 * t918 + t1047 * t877, -t1043 * t861 + t1047 * t839, -t1043 * t897 + t1047 * t844, -t1043 * t916 + t1047 * t876, -t1043 * t898 + t1047 * t845, -t1043 * t931 + t1047 * t902, -pkin(6) * t773 - t1043 * t727 + t1047 * t682, -pkin(6) * t785 - t1043 * t736 + t1047 * t687, -pkin(6) * t770 - t1043 * t677 + t1047 * t662, -pkin(6) * t660 - t1043 * t656 + t1047 * t620, t1153, -t1259, t1238, t1187, -t1260, t1188, -pkin(6) * t623 - t1043 * t569 + t1047 * t556, -t1043 * t577 + t1047 * t558 + t1267, -t1043 * t532 + t1047 * t520 - t1256, -pkin(6) * t533 - t1043 * t514 + t1047 * t506, t1153, t1238, t1259, t1188, t1260, t1187, -pkin(6) * t637 - t1043 * t550 + t1047 * t530, -t1043 * t517 + t1047 * t513 - t1256, -t1043 * t545 + t1047 * t526 - t1267, -pkin(6) * t515 - t1043 * t502 + t1047 * t494, -t1043 * t583 + t1047 * t575, -t1043 * t546 + t1047 * t543, -t1043 * t609 + t1047 * t586, -t1043 * t582 + t1047 * t574, -t1043 * t610 + t1047 * t587, -t1043 * t634 + t1047 * t632, -pkin(6) * t537 - t1043 * t499 + t1047 * t490, -pkin(6) * t553 - t1043 * t500 + t1047 * t493, -pkin(6) * t511 - t1043 * t486 + t1047 * t484, -pkin(6) * t487 - t1043 * t482 + t1047 * t481; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1009, 0, t1010, 0, t983, t1069, t962, pkin(6) * t962, t1043 * t974 + t1073, t1012 * t1047 + t1043 * t956, -t1042 * t1090 + t1043 * t968, t1043 * t973 - t1073, t1043 * t966 - t1047 * t1089, -qJDD(2) * t1047 + t1000 * t1043, pkin(6) * t926 + t1043 * t921 + t1047 * t912, pkin(6) * t927 + t1043 * t922 + t1047 * t913, pkin(6) * t959 - t1043 * t906, pkin(6) * t886 + (-pkin(1) * t1047 - pkin(7) * t1043) * t906, t1043 * t877 + t1047 * t918, t1043 * t839 + t1047 * t861, t1043 * t844 + t1047 * t897, t1043 * t876 + t1047 * t916, t1043 * t845 + t1047 * t898, t1043 * t902 + t1047 * t931, pkin(6) * t774 + t1043 * t682 + t1047 * t727, pkin(6) * t786 + t1043 * t687 + t1047 * t736, pkin(6) * t771 + t1043 * t662 + t1047 * t677, pkin(6) * t661 + t1043 * t620 + t1047 * t656, t1154, -t1261, t1240, t1189, -t1262, t1190, pkin(6) * t625 + t1043 * t556 + t1047 * t569, t1043 * t558 + t1047 * t577 - t1266, t1043 * t520 + t1047 * t532 + t1257, pkin(6) * t534 + t1043 * t506 + t1047 * t514, t1154, t1240, t1261, t1190, t1262, t1189, pkin(6) * t639 + t1043 * t530 + t1047 * t550, t1043 * t513 + t1047 * t517 + t1257, t1043 * t526 + t1047 * t545 + t1266, pkin(6) * t516 + t1043 * t494 + t1047 * t502, t1043 * t575 + t1047 * t583, t1043 * t543 + t1047 * t546, t1043 * t586 + t1047 * t609, t1043 * t574 + t1047 * t582, t1043 * t587 + t1047 * t610, t1043 * t632 + t1047 * t634, pkin(6) * t538 + t1043 * t490 + t1047 * t499, pkin(6) * t554 + t1043 * t493 + t1047 * t500, pkin(6) * t512 + t1043 * t484 + t1047 * t486, pkin(6) * t488 + t1043 * t481 + t1047 * t482; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1016, t1017, 0, 0, t1064 * t1042, t1004 * t1046 + t1007 * t1042, t1021 * t1046 + t1100, -t1042 * t1083 + t993, t1023 * t1042 + t1101, 0, pkin(1) * t1007 + pkin(7) * t967 + t1111, -pkin(1) * t1004 + pkin(7) * t969 - t1120, pkin(1) * t1011 + pkin(7) * t1008 + t908, pkin(1) * t990 + pkin(7) * t908, t1042 * t919 + t1056, t1042 * t863 + t1046 * t957, t1042 * t900 + t1046 * t943, t1042 * t917 - t1056, t1042 * t901 - t1046 * t941, t1042 * t932 + t993, -pkin(1) * t878 + pkin(7) * t836 + t1042 * t810 + t1046 * t778, -pkin(1) * t896 + pkin(7) * t843 + t1042 * t841 + t1046 * t781, pkin(7) * t809 + t1042 * t708 + (-pkin(1) - t1142) * t862, pkin(7) * t726 + (-pkin(1) + t1065) * t762, t1070, -t1245, t1227, t1167, -t1246, t1168, pkin(7) * t686 + t1042 * t608 + t1046 * t618 - t1223, t1042 * t615 + t1046 * t621 - t1263, t1042 * t544 + t1046 * t629 + t1242, -pkin(1) * t570 + pkin(7) * t565 + t1042 * t535 + t1046 * t555, t1070, t1227, t1245, t1168, t1246, t1167, pkin(7) * t692 + t1042 * t562 + t1046 * t602 - t1223, t1042 * t527 + t1046 * t613 + t1242, t1042 * t561 + t1046 * t596 + t1263, -pkin(1) * t559 + pkin(7) * t552 + t1042 * t507 + t1046 * t519, t1042 * t585 + t1086, t1042 * t548 + t1046 * t801, t1042 * t611 + t1046 * t717, t1042 * t584 - t1086, t1042 * t612 + t1046 * t1163, t1042 * t635 + t1046 * t995, -pkin(1) * t592 + pkin(7) * t567 + t1042 * t504 + t1046 * t518, -pkin(1) * t603 + pkin(7) * t581 + t1042 * t505 + t1046 * t524, -pkin(1) * t547 + pkin(7) * t540 + t1042 * t489 + t1046 * t508, -pkin(1) * t497 + pkin(7) * t496 + t1042 * t483 + t1046 * t485;];
tauB_reg  = t1;
