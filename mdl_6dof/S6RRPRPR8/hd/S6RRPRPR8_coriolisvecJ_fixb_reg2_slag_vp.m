% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRPR8_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR8_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR8_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR8_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:53:20
% EndTime: 2019-03-09 10:53:37
% DurationCPUTime: 6.70s
% Computational Cost: add. (11112->535), mult. (27169->710), div. (0->0), fcn. (19548->8), ass. (0->269)
t258 = sin(pkin(10));
t259 = cos(pkin(10));
t261 = sin(qJ(4));
t386 = cos(qJ(4));
t208 = t258 * t386 + t261 * t259;
t191 = t208 * qJD(4);
t264 = cos(qJ(2));
t275 = t264 * t208;
t351 = qJD(1) * t275 - t191;
t331 = t386 * t259;
t310 = t264 * t331;
t293 = qJD(1) * t310;
t345 = qJD(1) * t264;
t330 = t258 * t345;
t322 = qJD(4) * t386;
t338 = qJD(4) * t261;
t395 = -t258 * t338 + t259 * t322;
t350 = -t261 * t330 + t293 - t395;
t262 = sin(qJ(2));
t346 = qJD(1) * t262;
t325 = t258 * t346;
t341 = qJD(2) * t259;
t201 = -t325 + t341;
t329 = t259 * t346;
t342 = qJD(2) * t258;
t202 = t329 + t342;
t139 = -t386 * t201 + t202 * t261;
t260 = sin(qJ(6));
t263 = cos(qJ(6));
t286 = t261 * t201 + t202 * t386;
t403 = -t263 * t139 + t260 * t286;
t415 = t403 ^ 2;
t404 = t139 * t260 + t263 * t286;
t414 = t404 ^ 2;
t382 = pkin(8) + qJ(3);
t221 = t382 * t258;
t222 = t382 * t259;
t111 = -t221 * t322 + qJD(3) * t331 + (-qJD(3) * t258 - qJD(4) * t222) * t261;
t299 = pkin(2) * t262 - qJ(3) * t264;
t210 = t299 * qJD(1);
t159 = pkin(7) * t325 + t259 * t210;
t356 = t259 * t264;
t289 = pkin(3) * t262 - pkin(8) * t356;
t128 = qJD(1) * t289 + t159;
t192 = t258 * t210;
t357 = t259 * t262;
t358 = t258 * t264;
t282 = -pkin(7) * t357 - pkin(8) * t358;
t146 = qJD(1) * t282 + t192;
t67 = t261 * t128 + t386 * t146;
t62 = qJ(5) * t346 + t67;
t371 = t111 - t62;
t335 = qJD(1) * qJD(2);
t321 = t264 * t335;
t306 = t258 * t321;
t92 = t261 * (qJD(4) * t202 + t306) - qJD(2) * t293 - t201 * t322;
t273 = qJD(2) * t275;
t393 = qJD(4) * t286;
t93 = qJD(1) * t273 + t393;
t26 = qJD(6) * t404 - t260 * t92 - t263 * t93;
t242 = -qJD(4) + t345;
t233 = qJD(6) + t242;
t375 = t404 * t233;
t413 = t26 - t375;
t364 = t139 * t242;
t412 = t92 - t364;
t411 = t233 * t403;
t217 = -pkin(2) * t264 - qJ(3) * t262 - pkin(1);
t194 = t217 * qJD(1);
t250 = pkin(7) * t345;
t224 = qJD(2) * qJ(3) + t250;
t149 = t259 * t194 - t224 * t258;
t100 = -pkin(3) * t345 - pkin(8) * t202 + t149;
t150 = t258 * t194 + t259 * t224;
t109 = pkin(8) * t201 + t150;
t52 = t386 * t100 - t261 * t109;
t352 = qJD(5) - t52;
t157 = -t261 * t221 + t386 * t222;
t368 = t208 * qJD(3) + qJD(4) * t157 + t128 * t386 - t261 * t146;
t410 = t139 ^ 2;
t249 = pkin(7) * t346;
t378 = qJD(2) * pkin(2);
t317 = -qJD(3) + t378;
t303 = -t249 + t317;
t280 = t201 * pkin(3) + t303;
t272 = qJ(5) * t286 + t280;
t387 = pkin(4) + pkin(5);
t45 = -t139 * t387 + t272;
t409 = t45 * t404;
t332 = t387 * t262;
t408 = -pkin(9) * t350 - qJD(1) * t332 - t368;
t407 = pkin(9) * t351 - t371;
t383 = t404 * t403;
t406 = -pkin(9) * t286 + t352;
t405 = t414 - t415;
t388 = t286 ^ 2;
t401 = -0.2e1 * t335;
t227 = t242 * qJD(5);
t246 = t262 * t335;
t237 = qJ(5) * t246;
t186 = qJD(2) * t299 - t262 * qJD(3);
t170 = t186 * qJD(1);
t213 = (qJD(3) - t249) * qJD(2);
t127 = t258 * t170 + t259 * t213;
t106 = -pkin(8) * t306 + t127;
t126 = t259 * t170 - t258 * t213;
t278 = t289 * qJD(2);
t96 = qJD(1) * t278 + t126;
t285 = -t100 * t322 - t386 * t106 + t109 * t338 - t261 * t96;
t14 = -t227 + t237 - t285;
t10 = pkin(9) * t93 + t14;
t309 = qJD(2) * t332;
t318 = t100 * t338 + t261 * t106 + t109 * t322 - t386 * t96;
t11 = t92 * pkin(9) - qJD(1) * t309 + t318;
t36 = t242 * t387 + t406;
t228 = t242 * qJ(5);
t53 = t261 * t100 + t109 * t386;
t42 = t139 * pkin(9) + t53;
t40 = -t228 + t42;
t6 = t260 * t36 + t263 * t40;
t2 = -qJD(6) * t6 - t260 * t10 + t263 * t11;
t400 = t6 * t233 + t2;
t336 = qJD(6) * t263;
t337 = qJD(6) * t260;
t25 = -t139 * t336 - t260 * t93 + t263 * t92 + t286 * t337;
t399 = t25 - t411;
t362 = t286 * t242;
t195 = pkin(3) * t330 + t250;
t396 = qJ(5) * t350 - t208 * qJD(5) - t195;
t256 = t262 ^ 2;
t257 = t264 ^ 2;
t394 = qJD(1) * (t256 - 0.2e1 * t257);
t1 = t263 * t10 + t260 * t11 + t36 * t336 - t337 * t40;
t392 = t403 * t45 - t1;
t241 = pkin(7) * t321;
t185 = pkin(3) * t306 + t241;
t279 = t92 * qJ(5) - qJD(5) * t286 + t185;
t15 = -t387 * t93 - t279;
t123 = t262 * t395 + t273;
t181 = t208 * t262;
t340 = qJD(2) * t262;
t391 = -t242 * t123 - t264 * t93 + (qJD(1) * t181 + t139) * t340;
t207 = t258 * t261 - t331;
t390 = t242 * t351 + (qJD(2) * t207 - t139) * t346;
t389 = t139 * t350 + t92 * t207 - t208 * t93 + t286 * t351;
t5 = -t260 * t40 + t263 * t36;
t385 = t233 * t5;
t156 = t386 * t221 + t222 * t261;
t120 = -pkin(9) * t208 + t156;
t121 = pkin(9) * t207 + t157;
t60 = t120 * t260 + t121 * t263;
t381 = qJD(6) * t60 - t260 * t407 + t263 * t408;
t59 = t120 * t263 - t121 * t260;
t380 = -qJD(6) * t59 + t260 * t408 + t263 * t407;
t379 = t351 * t387 - t396;
t57 = pkin(4) * t139 - t272;
t377 = t286 * t57;
t374 = -pkin(4) * t351 + t396;
t145 = t207 * t260 + t208 * t263;
t373 = -qJD(6) * t145 + t260 * t350 - t263 * t351;
t372 = -t207 * t336 + t208 * t337 + t260 * t351 + t263 * t350;
t370 = t111 - t67;
t369 = pkin(4) * t346 + t368;
t215 = qJ(5) * t263 - t260 * t387;
t367 = qJD(6) * t215 + t260 * t406 + t263 * t42;
t214 = -qJ(5) * t260 - t263 * t387;
t366 = -qJD(6) * t214 + t260 * t42 - t263 * t406;
t365 = t139 * qJ(5);
t363 = t286 * t139;
t361 = t201 * t259;
t267 = qJD(1) ^ 2;
t360 = t257 * t267;
t359 = t258 * t262;
t355 = t264 * t267;
t266 = qJD(2) ^ 2;
t354 = t266 * t262;
t353 = t266 * t264;
t200 = t259 * t217;
t148 = -pkin(8) * t357 + t200 + (-pkin(7) * t258 - pkin(3)) * t264;
t240 = pkin(7) * t356;
t166 = t258 * t217 + t240;
t155 = -pkin(8) * t359 + t166;
t82 = t261 * t148 + t386 * t155;
t333 = pkin(7) * t340;
t153 = t259 * t186 + t258 * t333;
t339 = qJD(2) * t264;
t251 = pkin(7) * t339;
t328 = t258 * t339;
t196 = pkin(3) * t328 + t251;
t211 = pkin(3) * t359 + t262 * pkin(7);
t347 = t256 - t257;
t344 = qJD(2) * t156;
t343 = qJD(2) * t157;
t334 = pkin(7) * t358;
t245 = -t259 * pkin(3) - pkin(2);
t326 = t242 * t346;
t324 = -t388 + t410;
t319 = pkin(1) * t401;
t316 = t233 ^ 2;
t313 = -t201 + t341;
t312 = -t202 + t342;
t311 = pkin(4) * t246;
t308 = -t111 * t139 - t156 * t92 - t157 * t93;
t305 = t264 * t246;
t304 = t303 - t317;
t77 = -qJ(5) * t264 + t82;
t182 = -t261 * t359 + t262 * t331;
t301 = t182 * qJ(5) - t211;
t81 = t148 * t386 - t261 * t155;
t78 = t264 * pkin(4) - t81;
t56 = t264 * pkin(5) - t182 * pkin(9) + t78;
t58 = pkin(9) * t181 + t77;
t27 = -t260 * t58 + t263 * t56;
t28 = t260 * t56 + t263 * t58;
t297 = t123 * t139 + t181 * t93;
t295 = -t388 - t410;
t117 = t181 * t260 + t182 * t263;
t291 = qJD(1) * t313;
t290 = qJD(1) * t312;
t288 = t208 * qJ(5) - t245;
t287 = -t242 * t53 - t318;
t284 = t264 * t290;
t283 = -t139 * t351 + t93 * t207;
t118 = t278 + t153;
t172 = t258 * t186;
t130 = qJD(2) * t282 + t172;
t281 = -t118 * t386 + t261 * t130 + t148 * t338 + t155 * t322;
t37 = t261 * t118 + t386 * t130 + t148 * t322 - t155 * t338;
t122 = -qJD(2) * t310 + t191 * t262 + t261 * t328;
t277 = -t122 * qJ(5) + t182 * qJD(5) - t196;
t16 = -t311 + t318;
t274 = -t242 * t52 + t285;
t30 = pkin(4) * t93 + t279;
t271 = t122 * t139 - t123 * t286 + t181 * t92 - t182 * t93;
t32 = qJ(5) * t340 - qJD(5) * t264 + t37;
t268 = t93 - t362;
t255 = t259 ^ 2;
t254 = t258 ^ 2;
t238 = t262 * t355;
t225 = -0.2e1 * t305;
t171 = (-t242 - t345) * t340;
t165 = t200 - t334;
t160 = -pkin(7) * t329 + t192;
t154 = -t259 * t333 + t172;
t144 = -t263 * t207 + t208 * t260;
t137 = pkin(4) * t207 - t288;
t116 = -t263 * t181 + t182 * t260;
t105 = -t207 * t387 + t288;
t101 = pkin(4) * t181 - t301;
t80 = pkin(4) * t286 + t365;
t79 = -t181 * t387 + t301;
t55 = -t92 - t364;
t54 = -t286 * t387 - t365;
t50 = t350 * t242 + (qJD(2) * t208 - t286) * t346;
t48 = -t228 + t53;
t47 = pkin(4) * t242 + t352;
t46 = pkin(4) * t123 - t277;
t44 = qJD(6) * t117 - t260 * t122 - t263 * t123;
t43 = t263 * t122 - t260 * t123 - t181 * t336 + t182 * t337;
t39 = -t122 * t286 - t182 * t92;
t35 = -t123 * t387 + t277;
t34 = -pkin(4) * t340 + t281;
t31 = t122 * t242 + t92 * t264 + (qJD(1) * t182 + t286) * t340;
t29 = -t92 * t208 - t286 * t350;
t24 = pkin(9) * t123 + t32;
t23 = t122 * pkin(9) + t281 - t309;
t4 = -qJD(6) * t28 + t263 * t23 - t260 * t24;
t3 = qJD(6) * t27 + t260 * t23 + t263 * t24;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t305, t347 * t401, t353, t225, -t354, 0, -pkin(7) * t353 + t262 * t319, pkin(7) * t354 + t264 * t319, 0, 0 (t202 * t259 + t255 * t346) * t339 (t361 + (-t202 - 0.2e1 * t329) * t258) * t339 (t202 * t262 + t259 * t394) * qJD(2) (-t201 * t258 + t254 * t346) * t339 (t201 * t262 - t258 * t394) * qJD(2), t225 (-qJD(1) * t153 - t126) * t264 + ((-pkin(7) * t201 - t258 * t303) * t264 + (t149 + (t165 + 0.2e1 * t334) * qJD(1)) * t262) * qJD(2) (qJD(1) * t154 + t127) * t264 + ((pkin(7) * t202 - t259 * t303) * t264 + (-t150 + (-t166 + 0.2e1 * t240) * qJD(1)) * t262) * qJD(2), -t153 * t202 + t154 * t201 + (-t126 * t259 - t127 * t258) * t262 + (-t149 * t259 - t150 * t258 + (-t165 * t259 - t166 * t258) * qJD(1)) * t339, t126 * t165 + t127 * t166 + t149 * t153 + t150 * t154 + (-t303 + t249) * t251, t39, t271, t31, t297, -t391, t171, -t280 * t123 + t196 * t139 + t185 * t181 + t211 * t93 + t318 * t264 + t281 * t242 + (qJD(1) * t81 + t52) * t340, t280 * t122 + t196 * t286 + t185 * t182 - t285 * t264 - t211 * t92 + t37 * t242 + (-qJD(1) * t82 - t53) * t340, t122 * t52 - t123 * t53 - t139 * t37 + t181 * t285 + t182 * t318 + t281 * t286 + t81 * t92 - t82 * t93, t185 * t211 - t196 * t280 - t281 * t52 - t285 * t82 - t318 * t81 + t37 * t53, t39, t31, -t271, t171, t391, t297, t101 * t93 + t57 * t123 + t46 * t139 + t16 * t264 + t30 * t181 + t34 * t242 + (-qJD(1) * t78 - t47) * t340, -t122 * t47 - t123 * t48 - t139 * t32 - t14 * t181 + t16 * t182 + t286 * t34 - t77 * t93 - t78 * t92, t101 * t92 + t57 * t122 - t14 * t264 - t46 * t286 - t30 * t182 - t32 * t242 + (qJD(1) * t77 + t48) * t340, t101 * t30 + t14 * t77 + t16 * t78 + t32 * t48 + t34 * t47 + t46 * t57, -t117 * t25 - t404 * t43, t116 * t25 - t117 * t26 + t403 * t43 - t404 * t44, -t43 * t233 - t25 * t264 + (-qJD(1) * t117 - t404) * t340, t116 * t26 + t403 * t44, -t44 * t233 - t26 * t264 + (qJD(1) * t116 + t403) * t340 (-t233 - t345) * t340, t15 * t116 + t2 * t264 + t4 * t233 + t79 * t26 + t35 * t403 + t45 * t44 + (-qJD(1) * t27 - t5) * t340, -t1 * t264 + t15 * t117 - t3 * t233 - t79 * t25 + t35 * t404 - t45 * t43 + (qJD(1) * t28 + t6) * t340, -t1 * t116 - t117 * t2 + t25 * t27 - t26 * t28 - t3 * t403 - t4 * t404 + t43 * t5 - t44 * t6, t1 * t28 + t15 * t79 + t2 * t27 + t3 * t6 + t35 * t45 + t4 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t238, t347 * t267, 0, t238, 0, 0, t267 * pkin(1) * t262, pkin(1) * t355, 0, 0, t259 * t284 (-t361 + t202 * t258 + (-t254 + t255) * qJD(2)) * t345, t259 * t360 + t262 * t290, -t313 * t330, -t258 * t360 + t262 * t291, t238 ((-qJ(3) * t342 - t149) * t262 + (-pkin(7) * t313 + t258 * t304 + t159) * t264) * qJD(1) ((-qJ(3) * t341 + t150) * t262 + (pkin(7) * t312 + t259 * t304 - t160) * t264) * qJD(1), t159 * t202 - t160 * t201 + (qJD(3) * t201 + t149 * t345 + t127) * t259 + (qJD(3) * t202 + t150 * t345 - t126) * t258, -t149 * t159 - t150 * t160 + (-t149 * t258 + t150 * t259) * qJD(3) + (-t126 * t258 + t127 * t259) * qJ(3) + (t303 - t378) * t250, t29, t389, t50, t283, -t390, t326, -t195 * t139 + t185 * t207 + t245 * t93 + t368 * t242 + t351 * t280 + (-t52 - t344) * t346, -t195 * t286 + t185 * t208 - t245 * t92 + t370 * t242 + t350 * t280 + (t53 - t343) * t346, t67 * t139 + t207 * t285 + t208 * t318 + t286 * t368 + t350 * t52 + t351 * t53 + t308, t156 * t318 - t157 * t285 + t185 * t245 + t195 * t280 - t368 * t52 + t370 * t53, t29, t50, -t389, t326, t390, t283, t137 * t93 + t30 * t207 - t351 * t57 + t369 * t242 + t374 * t139 + (t47 - t344) * t346, t62 * t139 - t14 * t207 + t16 * t208 + t286 * t369 - t350 * t47 + t351 * t48 + t308, t137 * t92 - t30 * t208 + t350 * t57 - t371 * t242 - t374 * t286 + (-t48 + t343) * t346, t30 * t137 + t14 * t157 + t16 * t156 + t369 * t47 + t371 * t48 + t374 * t57, -t25 * t145 - t372 * t404, t25 * t144 - t145 * t26 + t372 * t403 + t373 * t404, -t372 * t233 + (-qJD(2) * t145 + t404) * t346, t26 * t144 - t373 * t403, t373 * t233 + (qJD(2) * t144 - t403) * t346, t233 * t346, t105 * t26 + t15 * t144 + t379 * t403 - t373 * t45 - t381 * t233 + (-qJD(2) * t59 + t5) * t346, -t105 * t25 + t15 * t145 + t379 * t404 - t372 * t45 + t380 * t233 + (qJD(2) * t60 - t6) * t346, -t1 * t144 - t2 * t145 + t59 * t25 - t60 * t26 + t372 * t5 + t373 * t6 + t380 * t403 + t381 * t404, t1 * t60 + t15 * t105 + t2 * t59 + t379 * t45 - t380 * t6 - t381 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t284, t264 * t291, -t201 ^ 2 - t202 ^ 2, t149 * t202 - t150 * t201 + t241, 0, 0, 0, 0, 0, 0, t268, -t412, t295, t139 * t53 + t286 * t52 + t185, 0, 0, 0, 0, 0, 0, t268, t295, t412, t139 * t48 - t286 * t47 + t30, 0, 0, 0, 0, 0, 0, -t26 - t375, t25 + t411, t414 + t415, -t403 * t6 - t404 * t5 - t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t363, -t324, t55, -t363, -t208 * t321 - t362 - t393, t246, t280 * t286 + t287, -t139 * t280 + t274, 0, 0, t363, t55, t324, t246, t93 + t362, -t363, -t139 * t80 + t287 + 0.2e1 * t311 - t377, pkin(4) * t92 - t93 * qJ(5) + (t48 - t53) * t286 + (t47 - t352) * t139, -t139 * t57 + t286 * t80 - 0.2e1 * t227 + 0.2e1 * t237 - t274, -t16 * pkin(4) + t14 * qJ(5) + t352 * t48 - t47 * t53 - t57 * t80, -t383, -t405, t399, t383, t413, t246, -t214 * t246 - t233 * t367 - t403 * t54 - t2 + t409, t215 * t246 + t233 * t366 - t404 * t54 - t392, t214 * t25 - t215 * t26 + (t366 + t5) * t403 + (t367 - t6) * t404, t1 * t215 + t2 * t214 - t366 * t6 - t367 * t5 - t45 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t246 + t363, t55, -t242 ^ 2 - t388, t242 * t48 + t16 + t377, 0, 0, 0, 0, 0, 0, -t246 * t263 - t260 * t316 - t286 * t403, t246 * t260 - t263 * t316 - t286 * t404, -t260 * t413 + t399 * t263, -t45 * t286 + t400 * t263 + (t1 - t385) * t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, t405, -t399, -t383, -t413, -t246, t400 - t409, t385 + t392, 0, 0;];
tauc_reg  = t7;
