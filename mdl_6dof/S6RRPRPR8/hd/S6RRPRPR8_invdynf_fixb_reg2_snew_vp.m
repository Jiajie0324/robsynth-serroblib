% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR8_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 15:01:28
% EndTime: 2019-05-06 15:01:37
% DurationCPUTime: 9.66s
% Computational Cost: add. (40274->322), mult. (87711->388), div. (0->0), fcn. (62838->10), ass. (0->225)
t2359 = sin(qJ(2));
t2398 = qJD(1) * t2359;
t2348 = qJD(2) * t2398;
t2363 = cos(qJ(2));
t2384 = t2363 * qJDD(1);
t2329 = -t2348 + t2384;
t2377 = -qJDD(4) + t2329;
t2355 = sin(pkin(10));
t2356 = cos(pkin(10));
t2324 = -t2356 * qJD(2) + t2355 * t2398;
t2325 = qJD(2) * t2355 + t2356 * t2398;
t2358 = sin(qJ(4));
t2362 = cos(qJ(4));
t2297 = t2324 * t2362 + t2358 * t2325;
t2299 = -t2324 * t2358 + t2325 * t2362;
t2392 = t2297 * t2299;
t2252 = t2377 - t2392;
t2296 = t2299 ^ 2;
t2397 = qJD(1) * t2363;
t2346 = qJD(4) - t2397;
t2401 = t2346 ^ 2;
t2412 = -t2296 - t2401;
t2218 = t2252 * t2358 + t2362 * t2412;
t2220 = t2252 * t2362 - t2358 * t2412;
t2187 = t2218 * t2355 - t2220 * t2356;
t2383 = qJD(2) * t2397;
t2385 = t2359 * qJDD(1);
t2374 = t2383 + t2385;
t2309 = t2355 * qJDD(2) + t2356 * t2374;
t2371 = t2356 * qJDD(2) - t2355 * t2374;
t2370 = -t2362 * t2309 - t2358 * t2371;
t2368 = -t2297 * qJD(4) - t2370;
t2391 = t2297 * t2346;
t2366 = t2368 - t2391;
t2172 = t2187 * t2363 - t2359 * t2366;
t2193 = t2218 * t2356 + t2220 * t2355;
t2360 = sin(qJ(1));
t2364 = cos(qJ(1));
t2434 = t2172 * t2360 + t2193 * t2364;
t2433 = t2172 * t2364 - t2193 * t2360;
t2170 = t2187 * t2359 + t2363 * t2366;
t2253 = t2377 + t2392;
t2405 = t2297 ^ 2;
t2411 = -t2401 - t2405;
t2417 = t2253 * t2358 + t2362 * t2411;
t2418 = -t2362 * t2253 + t2358 * t2411;
t2420 = -t2355 * t2418 + t2356 * t2417;
t2430 = t2359 * t2420;
t2419 = t2355 * t2417 + t2356 * t2418;
t2429 = t2360 * t2419;
t2428 = t2363 * t2420;
t2427 = t2364 * t2419;
t2231 = t2368 + t2391;
t2379 = t2358 * t2309 - t2362 * t2371;
t2387 = qJD(4) - t2346;
t2373 = -t2299 * t2387 - t2379;
t2409 = t2231 * t2358 + t2362 * t2373;
t2410 = -t2362 * t2231 + t2358 * t2373;
t2415 = t2355 * t2409 + t2356 * t2410;
t2241 = t2296 + t2405;
t2416 = -t2355 * t2410 + t2356 * t2409;
t2421 = -t2241 * t2359 + t2363 * t2416;
t2426 = t2360 * t2421 - t2364 * t2415;
t2425 = t2360 * t2415 + t2364 * t2421;
t2422 = t2241 * t2363 + t2359 * t2416;
t2313 = t2324 * t2397;
t2288 = t2313 - t2309;
t2408 = qJD(2) ^ 2;
t2357 = sin(qJ(6));
t2361 = cos(qJ(6));
t2262 = -t2361 * t2297 + t2299 * t2357;
t2407 = t2262 ^ 2;
t2264 = t2357 * t2297 + t2361 * t2299;
t2406 = t2264 ^ 2;
t2404 = t2324 ^ 2;
t2403 = t2325 ^ 2;
t2341 = qJD(6) - t2346;
t2402 = t2341 ^ 2;
t2400 = -2 * qJD(3);
t2399 = t2363 * g(3);
t2394 = t2262 * t2264;
t2393 = t2262 * t2341;
t2390 = t2324 * t2325;
t2389 = t2341 * t2264;
t2353 = t2363 ^ 2;
t2365 = qJD(1) ^ 2;
t2388 = t2353 * t2365;
t2338 = t2360 * g(1) - t2364 * g(2);
t2318 = qJDD(1) * pkin(1) + t2365 * pkin(7) + t2338;
t2328 = 0.2e1 * t2383 + t2385;
t2271 = (-t2329 + t2348) * pkin(2) - t2328 * qJ(3) - t2318;
t2339 = -g(1) * t2364 - g(2) * t2360;
t2319 = -pkin(1) * t2365 + qJDD(1) * pkin(7) + t2339;
t2307 = -g(3) * t2359 + t2363 * t2319;
t2327 = (-pkin(2) * t2363 - qJ(3) * t2359) * qJD(1);
t2278 = -pkin(2) * t2408 + qJDD(2) * qJ(3) + t2327 * t2397 + t2307;
t2235 = t2355 * t2271 + t2356 * t2278 + t2324 * t2400;
t2310 = -pkin(3) * t2397 - pkin(8) * t2325;
t2209 = -pkin(3) * t2404 + pkin(8) * t2371 + t2310 * t2397 + t2235;
t2234 = t2356 * t2271 - t2355 * t2278 + t2325 * t2400;
t2290 = -t2329 - t2390;
t2369 = t2290 * pkin(3) + pkin(8) * t2288 + t2234;
t2180 = t2362 * t2209 + t2358 * t2369;
t2352 = t2359 ^ 2;
t2386 = t2352 + t2353;
t2382 = t2325 * t2397;
t2375 = qJD(4) * t2299 + t2379;
t2381 = t2262 * qJD(6) - t2357 * t2375 - t2361 * t2368;
t2380 = pkin(4) * t2346 - (2 * qJD(5));
t2179 = -t2358 * t2209 + t2362 * t2369;
t2378 = -pkin(5) * t2346 - pkin(9) * t2299;
t2376 = -qJDD(6) - t2377;
t2265 = pkin(4) * t2297 - qJ(5) * t2299;
t2162 = -pkin(4) * t2401 - qJ(5) * t2377 + 0.2e1 * qJD(5) * t2346 - t2297 * t2265 + t2180;
t2165 = pkin(4) * t2377 - qJ(5) * t2401 + t2299 * t2265 + qJDD(5) - t2179;
t2372 = -t2264 * qJD(6) - t2357 * t2368 + t2361 * t2375;
t2277 = t2399 + qJDD(3) - t2408 * qJ(3) - qJDD(2) * pkin(2) + (qJD(1) * t2327 + t2319) * t2359;
t2236 = -t2371 * pkin(3) - t2404 * pkin(8) + t2325 * t2310 + t2277;
t2367 = t2375 * pkin(4) - qJ(5) * t2366 + t2236;
t2345 = t2363 * t2365 * t2359;
t2343 = -t2388 - t2408;
t2342 = -t2352 * t2365 - t2408;
t2336 = -qJDD(2) + t2345;
t2335 = qJDD(2) + t2345;
t2334 = t2386 * t2365;
t2333 = -qJDD(1) * t2360 - t2364 * t2365;
t2332 = qJDD(1) * t2364 - t2360 * t2365;
t2331 = t2386 * qJDD(1);
t2330 = -0.2e1 * t2348 + t2384;
t2311 = -t2388 - t2403;
t2306 = -t2359 * t2319 - t2399;
t2305 = t2336 * t2363 - t2342 * t2359;
t2304 = -t2335 * t2359 + t2343 * t2363;
t2303 = t2336 * t2359 + t2342 * t2363;
t2302 = t2335 * t2363 + t2343 * t2359;
t2300 = -t2388 - t2404;
t2289 = t2329 - t2390;
t2287 = t2313 + t2309;
t2286 = t2371 - t2382;
t2285 = -t2371 - t2382;
t2280 = -t2403 - t2404;
t2273 = -t2306 * t2359 + t2307 * t2363;
t2272 = t2306 * t2363 + t2307 * t2359;
t2268 = t2289 * t2356 - t2311 * t2355;
t2267 = t2289 * t2355 + t2311 * t2356;
t2256 = -t2290 * t2355 + t2300 * t2356;
t2255 = t2290 * t2356 + t2300 * t2355;
t2249 = t2286 * t2356 - t2288 * t2355;
t2248 = t2286 * t2355 + t2288 * t2356;
t2242 = -t2402 - t2406;
t2238 = t2268 * t2363 + t2287 * t2359;
t2237 = t2268 * t2359 - t2287 * t2363;
t2233 = t2256 * t2363 + t2285 * t2359;
t2232 = t2256 * t2359 - t2285 * t2363;
t2226 = (qJD(4) + t2346) * t2299 + t2379;
t2225 = t2346 * t2299 + t2375;
t2223 = t2249 * t2363 + t2280 * t2359;
t2222 = t2249 * t2359 - t2280 * t2363;
t2216 = -t2402 - t2407;
t2211 = t2376 - t2394;
t2210 = -t2376 - t2394;
t2205 = t2406 + t2407;
t2204 = -t2234 * t2355 + t2235 * t2356;
t2203 = t2234 * t2356 + t2235 * t2355;
t2198 = t2211 * t2361 - t2242 * t2357;
t2197 = t2211 * t2357 + t2242 * t2361;
t2192 = t2204 * t2363 + t2277 * t2359;
t2191 = t2204 * t2359 - t2277 * t2363;
t2190 = -t2210 * t2357 + t2216 * t2361;
t2189 = t2210 * t2361 + t2216 * t2357;
t2184 = t2381 + t2393;
t2183 = t2381 - t2393;
t2182 = t2372 + t2389;
t2181 = t2372 - t2389;
t2178 = t2380 * t2299 + t2367;
t2177 = t2225 * t2359 + t2428;
t2175 = -t2225 * t2363 + t2430;
t2173 = t2226 * t2359 + t2428;
t2171 = -t2226 * t2363 + t2430;
t2164 = t2197 * t2358 + t2198 * t2362;
t2163 = -t2197 * t2362 + t2198 * t2358;
t2161 = t2379 * pkin(5) + t2405 * pkin(9) + t2367 + (pkin(5) * qJD(4) - t2378 + t2380) * t2299;
t2156 = t2189 * t2358 + t2190 * t2362;
t2155 = -t2189 * t2362 + t2190 * t2358;
t2154 = t2182 * t2361 - t2183 * t2357;
t2153 = t2182 * t2357 + t2183 * t2361;
t2152 = -pkin(5) * t2405 + pkin(9) * t2375 + t2346 * t2378 + t2162;
t2151 = (t2297 * t2387 + t2370) * pkin(9) + t2253 * pkin(5) + t2165;
t2150 = -t2179 * t2358 + t2180 * t2362;
t2149 = t2179 * t2362 + t2180 * t2358;
t2148 = t2162 * t2362 + t2165 * t2358;
t2147 = t2162 * t2358 - t2165 * t2362;
t2146 = -t2163 * t2355 + t2164 * t2356;
t2145 = t2163 * t2356 + t2164 * t2355;
t2144 = -t2155 * t2355 + t2156 * t2356;
t2143 = t2155 * t2356 + t2156 * t2355;
t2142 = t2153 * t2358 + t2154 * t2362;
t2141 = -t2153 * t2362 + t2154 * t2358;
t2140 = t2146 * t2363 + t2184 * t2359;
t2139 = t2146 * t2359 - t2184 * t2363;
t2138 = t2151 * t2357 + t2152 * t2361;
t2137 = t2151 * t2361 - t2152 * t2357;
t2136 = -t2149 * t2355 + t2150 * t2356;
t2135 = t2149 * t2356 + t2150 * t2355;
t2134 = t2144 * t2363 + t2181 * t2359;
t2133 = t2144 * t2359 - t2181 * t2363;
t2132 = t2136 * t2363 + t2236 * t2359;
t2131 = t2136 * t2359 - t2236 * t2363;
t2130 = -t2147 * t2355 + t2148 * t2356;
t2129 = t2147 * t2356 + t2148 * t2355;
t2128 = t2130 * t2363 + t2178 * t2359;
t2127 = t2130 * t2359 - t2178 * t2363;
t2126 = -t2141 * t2355 + t2142 * t2356;
t2125 = t2141 * t2356 + t2142 * t2355;
t2124 = -t2137 * t2357 + t2138 * t2361;
t2123 = t2137 * t2361 + t2138 * t2357;
t2122 = t2126 * t2363 + t2205 * t2359;
t2121 = t2126 * t2359 - t2205 * t2363;
t2120 = t2123 * t2358 + t2124 * t2362;
t2119 = -t2123 * t2362 + t2124 * t2358;
t2118 = -t2119 * t2355 + t2120 * t2356;
t2117 = t2119 * t2356 + t2120 * t2355;
t2116 = t2118 * t2363 + t2161 * t2359;
t2115 = t2118 * t2359 - t2161 * t2363;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2333, -t2332, 0, -t2338 * t2360 + t2339 * t2364, 0, 0, 0, 0, 0, 0, t2304 * t2364 - t2330 * t2360, t2305 * t2364 + t2328 * t2360, t2331 * t2364 - t2334 * t2360, t2273 * t2364 - t2318 * t2360, 0, 0, 0, 0, 0, 0, t2233 * t2364 + t2255 * t2360, t2238 * t2364 + t2267 * t2360, t2223 * t2364 + t2248 * t2360, t2192 * t2364 + t2203 * t2360, 0, 0, 0, 0, 0, 0, t2173 * t2364 + t2429, -t2433, t2425, t2132 * t2364 + t2135 * t2360, 0, 0, 0, 0, 0, 0, t2177 * t2364 + t2429, t2425, t2433, t2128 * t2364 + t2129 * t2360, 0, 0, 0, 0, 0, 0, t2134 * t2364 + t2143 * t2360, t2140 * t2364 + t2145 * t2360, t2122 * t2364 + t2125 * t2360, t2116 * t2364 + t2117 * t2360; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2332, t2333, 0, t2338 * t2364 + t2339 * t2360, 0, 0, 0, 0, 0, 0, t2304 * t2360 + t2330 * t2364, t2305 * t2360 - t2328 * t2364, t2331 * t2360 + t2334 * t2364, t2273 * t2360 + t2318 * t2364, 0, 0, 0, 0, 0, 0, t2233 * t2360 - t2255 * t2364, t2238 * t2360 - t2267 * t2364, t2223 * t2360 - t2248 * t2364, t2192 * t2360 - t2203 * t2364, 0, 0, 0, 0, 0, 0, t2173 * t2360 - t2427, -t2434, t2426, t2132 * t2360 - t2135 * t2364, 0, 0, 0, 0, 0, 0, t2177 * t2360 - t2427, t2426, t2434, t2128 * t2360 - t2129 * t2364, 0, 0, 0, 0, 0, 0, t2134 * t2360 - t2143 * t2364, t2140 * t2360 - t2145 * t2364, t2122 * t2360 - t2125 * t2364, t2116 * t2360 - t2117 * t2364; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2302, t2303, 0, t2272, 0, 0, 0, 0, 0, 0, t2232, t2237, t2222, t2191, 0, 0, 0, 0, 0, 0, t2171, -t2170, t2422, t2131, 0, 0, 0, 0, 0, 0, t2175, t2422, t2170, t2127, 0, 0, 0, 0, 0, 0, t2133, t2139, t2121, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2365, -qJDD(1), 0, t2339, 0, 0, 0, 0, 0, 0, t2304, t2305, t2331, t2273, 0, 0, 0, 0, 0, 0, t2233, t2238, t2223, t2192, 0, 0, 0, 0, 0, 0, t2173, -t2172, t2421, t2132, 0, 0, 0, 0, 0, 0, t2177, t2421, t2172, t2128, 0, 0, 0, 0, 0, 0, t2134, t2140, t2122, t2116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2365, 0, t2338, 0, 0, 0, 0, 0, 0, t2330, -t2328, t2334, t2318, 0, 0, 0, 0, 0, 0, -t2255, -t2267, -t2248, -t2203, 0, 0, 0, 0, 0, 0, -t2419, -t2193, -t2415, -t2135, 0, 0, 0, 0, 0, 0, -t2419, -t2415, t2193, -t2129, 0, 0, 0, 0, 0, 0, -t2143, -t2145, -t2125, -t2117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2302, t2303, 0, t2272, 0, 0, 0, 0, 0, 0, t2232, t2237, t2222, t2191, 0, 0, 0, 0, 0, 0, t2171, -t2170, t2422, t2131, 0, 0, 0, 0, 0, 0, t2175, t2422, t2170, t2127, 0, 0, 0, 0, 0, 0, t2133, t2139, t2121, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2343, t2336, t2384, t2307, 0, 0, 0, 0, 0, 0, t2256, t2268, t2249, t2204, 0, 0, 0, 0, 0, 0, t2420, -t2187, t2416, t2136, 0, 0, 0, 0, 0, 0, t2420, t2416, t2187, t2130, 0, 0, 0, 0, 0, 0, t2144, t2146, t2126, t2118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2335, t2342, -t2385, t2306, 0, 0, 0, 0, 0, 0, -t2285, -t2287, -t2280, -t2277, 0, 0, 0, 0, 0, 0, -t2226, -t2366, t2241, -t2236, 0, 0, 0, 0, 0, 0, -t2225, t2241, t2366, -t2178, 0, 0, 0, 0, 0, 0, -t2181, -t2184, -t2205, -t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2330, t2328, -t2334, -t2318, 0, 0, 0, 0, 0, 0, t2255, t2267, t2248, t2203, 0, 0, 0, 0, 0, 0, t2419, t2193, t2415, t2135, 0, 0, 0, 0, 0, 0, t2419, t2415, -t2193, t2129, 0, 0, 0, 0, 0, 0, t2143, t2145, t2125, t2117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2300, t2289, t2286, t2235, 0, 0, 0, 0, 0, 0, t2417, t2220, t2409, t2150, 0, 0, 0, 0, 0, 0, t2417, t2409, -t2220, t2148, 0, 0, 0, 0, 0, 0, t2156, t2164, t2142, t2120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2290, t2311, t2288, t2234, 0, 0, 0, 0, 0, 0, t2418, t2218, t2410, t2149, 0, 0, 0, 0, 0, 0, t2418, t2410, -t2218, t2147, 0, 0, 0, 0, 0, 0, t2155, t2163, t2141, t2119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2285, t2287, t2280, t2277, 0, 0, 0, 0, 0, 0, t2226, t2366, -t2241, t2236, 0, 0, 0, 0, 0, 0, t2225, -t2241, -t2366, t2178, 0, 0, 0, 0, 0, 0, t2181, t2184, t2205, t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2411, t2252, t2373, t2180, 0, 0, 0, 0, 0, 0, t2411, t2373, -t2252, t2162, 0, 0, 0, 0, 0, 0, t2190, t2198, t2154, t2124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2253, t2412, -t2231, t2179, 0, 0, 0, 0, 0, 0, -t2253, -t2231, -t2412, -t2165, 0, 0, 0, 0, 0, 0, -t2189, -t2197, -t2153, -t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2226, t2366, -t2241, t2236, 0, 0, 0, 0, 0, 0, t2225, -t2241, -t2366, t2178, 0, 0, 0, 0, 0, 0, t2181, t2184, t2205, t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2411, t2373, -t2252, t2162, 0, 0, 0, 0, 0, 0, t2190, t2198, t2154, t2124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2225, -t2241, -t2366, t2178, 0, 0, 0, 0, 0, 0, t2181, t2184, t2205, t2161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2253, t2231, t2412, t2165, 0, 0, 0, 0, 0, 0, t2189, t2197, t2153, t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2216, t2211, t2182, t2138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2210, t2242, t2183, t2137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2181, -t2184, -t2205, -t2161;];
f_new_reg  = t1;
