% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6PRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6PRPRRR7_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-09 22:05
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6PRPRRR7_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR7_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR7_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6PRPRRR7_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRPRRR7_jacobiaD_rot_sym_varpar: pkin has to be [14x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:02
	% EndTime: 2019-10-09 22:05:02
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:02
	% EndTime: 2019-10-09 22:05:02
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:02
	% EndTime: 2019-10-09 22:05:02
	% DurationCPUTime: 0.09s
	% Computational Cost: add. (46->7), mult. (159->21), div. (18->4), fcn. (175->5), ass. (0->15)
	t39 = cos(pkin(13));
	t41 = sin(qJ(2));
	t42 = cos(qJ(2));
	t45 = sin(pkin(13)) * cos(pkin(6));
	t37 = t39 * t42 - t41 * t45;
	t34 = 0.1e1 / t37 ^ 2;
	t49 = qJD(2) * t34;
	t36 = t39 * t41 + t42 * t45;
	t33 = t36 ^ 2;
	t30 = t33 * t34 + 0.1e1;
	t46 = t37 * t49;
	t47 = t36 / t37 * t49;
	t48 = (t33 * t47 + t36 * t46) / t30 ^ 2;
	t28 = 0.1e1 / t30;
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, -0.2e1 * t48 + 0.2e1 * (t28 * t46 + (t28 * t47 - t34 * t48) * t36) * t36, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:02
	% EndTime: 2019-10-09 22:05:03
	% DurationCPUTime: 0.63s
	% Computational Cost: add. (1104->57), mult. (3515->153), div. (257->12), fcn. (4585->13), ass. (0->75)
	t132 = sin(pkin(7));
	t129 = t132 ^ 2;
	t170 = 0.2e1 * t129;
	t135 = cos(pkin(13));
	t131 = sin(pkin(13));
	t138 = sin(qJ(2));
	t137 = cos(pkin(6));
	t139 = cos(qJ(2));
	t155 = t137 * t139;
	t149 = -t131 * t138 + t135 * t155;
	t133 = sin(pkin(6));
	t136 = cos(pkin(7));
	t159 = t133 * t136;
	t115 = t149 * t132 + t135 * t159;
	t160 = t132 * t139;
	t124 = -t133 * t160 + t137 * t136;
	t110 = atan2(t115, t124);
	t103 = sin(t110);
	t104 = cos(t110);
	t92 = t103 * t115 + t104 * t124;
	t89 = 0.1e1 / t92;
	t130 = sin(pkin(14));
	t134 = cos(pkin(14));
	t156 = t137 * t138;
	t147 = t131 * t156 - t135 * t139;
	t148 = t131 * t155 + t135 * t138;
	t150 = t131 * t132 * t133 - t136 * t148;
	t102 = t150 * t130 - t134 * t147;
	t98 = 0.1e1 / t102;
	t121 = 0.1e1 / t124;
	t99 = 0.1e1 / t102 ^ 2;
	t122 = 0.1e1 / t124 ^ 2;
	t90 = 0.1e1 / t92 ^ 2;
	t116 = t131 * t159 + t132 * t148;
	t114 = t116 ^ 2;
	t120 = t147 * qJD(2);
	t125 = -t131 * t139 - t135 * t156;
	t118 = t125 * qJD(2);
	t154 = qJD(2) * t133;
	t152 = t138 * t154;
	t158 = t133 * t138;
	t162 = t115 * t122;
	t151 = t158 * t162;
	t113 = t115 ^ 2;
	t109 = t113 * t122 + 0.1e1;
	t105 = 0.1e1 / t109;
	t163 = t105 * t132;
	t84 = (-qJD(2) * t151 + t118 * t121) * t163;
	t81 = (t115 * t84 + t132 * t152) * t104 + (t118 * t132 - t124 * t84) * t103;
	t168 = t81 * t89 * t90;
	t88 = t114 * t90 + 0.1e1;
	t169 = (-t116 * t120 * t132 * t90 - t114 * t168) / t88 ^ 2;
	t146 = -t121 * t125 + t151;
	t85 = t146 * t163;
	t167 = t115 * t85;
	t166 = t124 * t85;
	t119 = t148 * qJD(2);
	t161 = t130 * t136;
	t108 = -t119 * t134 + t120 * t161;
	t165 = t98 * t99 * t108;
	t101 = -t130 * t147 - t150 * t134;
	t112 = -t134 * t148 + t147 * t161;
	t164 = t101 * t112;
	t157 = t134 * t136;
	t153 = t122 * t129 * t138;
	t123 = t121 * t122;
	t117 = t149 * qJD(2);
	t111 = -t130 * t148 - t147 * t157;
	t107 = -t119 * t130 - t120 * t157;
	t97 = t101 ^ 2;
	t96 = t97 * t99 + 0.1e1;
	t86 = 0.1e1 / t88;
	t82 = (t132 * t158 - t167) * t104 + (t125 * t132 + t166) * t103;
	t80 = t146 * (-t113 * t123 * t152 + t118 * t162) / t109 ^ 2 * t170 + (-t117 * t121 * t132 + (-t118 * t153 + (-t125 * t153 + (t123 * t133 * t138 ^ 2 * t170 - t122 * t160) * t115) * qJD(2)) * t133) * t105;
	t1 = [0, t80, 0, 0, 0, 0; 0, (-((t115 * t80 + t84 * t166) * t104 + (-t124 * t80 + t84 * t167) * t103) * t90 * t86 + 0.2e1 * (t86 * t168 + t90 * t169) * t82) * t116 + (0.2e1 * t147 * t89 * t169 + (-t119 * t89 + (t82 * t120 + t147 * t81 + (-(-t118 * t85 + t125 * t84 + t139 * t154) * t104 - (-t117 + (qJD(2) * t85 - t84) * t158) * t103) * t116) * t90) * t86) * t132, 0, 0, 0, 0; 0, 0.2e1 * (-t111 * t98 + t99 * t164) / t96 ^ 2 * (t101 * t107 * t99 - t97 * t165) + ((-t119 * t157 + t120 * t130) * t98 + 0.2e1 * t164 * t165 + (-t111 * t108 - (t119 * t161 + t120 * t134) * t101 - t112 * t107) * t99) / t96, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:03
	% EndTime: 2019-10-09 22:05:04
	% DurationCPUTime: 1.42s
	% Computational Cost: add. (4236->99), mult. (12947->219), div. (275->12), fcn. (16774->17), ass. (0->102)
	t277 = sin(pkin(13));
	t282 = cos(pkin(13));
	t289 = cos(qJ(2));
	t285 = cos(pkin(6));
	t287 = sin(qJ(2));
	t308 = t285 * t287;
	t272 = t277 * t289 + t282 * t308;
	t276 = sin(pkin(14));
	t278 = sin(pkin(8));
	t279 = sin(pkin(7));
	t281 = cos(pkin(14));
	t283 = cos(pkin(8));
	t284 = cos(pkin(7));
	t307 = t285 * t289;
	t298 = -t277 * t287 + t282 * t307;
	t280 = sin(pkin(6));
	t311 = t280 * t284;
	t314 = t279 * t280;
	t242 = (-t272 * t276 + (-t282 * t314 + t298 * t284) * t281) * t278 - (-t298 * t279 - t282 * t311) * t283;
	t310 = t281 * t284;
	t299 = -t276 * t287 + t289 * t310;
	t312 = t279 * t289;
	t253 = -(t285 * t279 * t281 + t299 * t280) * t278 + (-t280 * t312 + t285 * t284) * t283;
	t237 = atan2(t242, t253);
	t232 = sin(t237);
	t233 = cos(t237);
	t219 = t232 * t242 + t233 * t253;
	t216 = 0.1e1 / t219;
	t296 = t277 * t308 - t282 * t289;
	t297 = t277 * t307 + t282 * t287;
	t300 = t277 * t314 - t284 * t297;
	t255 = t300 * t276 - t281 * t296;
	t286 = sin(qJ(4));
	t288 = cos(qJ(4));
	t254 = t276 * t296 + t300 * t281;
	t267 = t277 * t311 + t279 * t297;
	t304 = t254 * t283 + t267 * t278;
	t231 = t255 * t288 + t304 * t286;
	t227 = 0.1e1 / t231;
	t250 = 0.1e1 / t253;
	t217 = 0.1e1 / t219 ^ 2;
	t228 = 0.1e1 / t231 ^ 2;
	t251 = 0.1e1 / t253 ^ 2;
	t240 = t242 ^ 2;
	t236 = t240 * t251 + 0.1e1;
	t234 = 0.1e1 / t236;
	t268 = t298 * qJD(2);
	t269 = t272 * qJD(2);
	t313 = t279 * t283;
	t244 = (-t268 * t276 - t269 * t310) * t278 - t269 * t313;
	t264 = (-(-t276 * t289 - t287 * t310) * t278 + t287 * t313) * t280;
	t263 = qJD(2) * t264;
	t322 = t242 * t251;
	t211 = (t244 * t250 - t263 * t322) * t234;
	t305 = -t232 * t253 + t233 * t242;
	t208 = t305 * t211 + t232 * t244 + t233 * t263;
	t328 = t208 * t216 * t217;
	t309 = t283 * t288;
	t315 = t278 * t288;
	t319 = t255 * t286;
	t230 = -t254 * t309 - t267 * t315 + t319;
	t226 = t230 ^ 2;
	t223 = t226 * t228 + 0.1e1;
	t270 = t297 * qJD(2);
	t271 = t296 * qJD(2);
	t317 = t276 * t284;
	t257 = -t270 * t281 + t271 * t317;
	t256 = t270 * t276 + t271 * t310;
	t316 = t278 * t279;
	t302 = -t256 * t283 + t271 * t316;
	t224 = t231 * qJD(4) + t257 * t286 + t302 * t288;
	t324 = t228 * t230;
	t225 = t257 * t288 - t302 * t286 + (t304 * t288 - t319) * qJD(4);
	t325 = t225 * t227 * t228;
	t327 = (t224 * t324 - t226 * t325) / t223 ^ 2;
	t243 = -t254 * t278 + t267 * t283;
	t326 = t217 * t243;
	t261 = -t281 * t297 + t296 * t317;
	t260 = t276 * t297 + t296 * t310;
	t301 = t260 * t283 - t296 * t316;
	t239 = t261 * t288 + t301 * t286;
	t323 = t230 * t239;
	t321 = t242 * t264;
	t320 = t250 * t251 * t263;
	t318 = t261 * t286;
	t306 = t279 * t315;
	t247 = (-t272 * t310 - t298 * t276) * t278 - t272 * t313;
	t303 = -t247 * t250 + t251 * t321;
	t262 = (t299 * t278 + t283 * t312) * t280 * qJD(2);
	t259 = t270 * t317 + t271 * t281;
	t258 = t270 * t310 - t271 * t276;
	t248 = -t260 * t278 - t296 * t313;
	t246 = -t256 * t278 - t271 * t313;
	t245 = (-t268 * t310 + t269 * t276) * t278 - t268 * t313;
	t241 = t243 ^ 2;
	t238 = -t301 * t288 + t318;
	t221 = 0.1e1 / t223;
	t215 = t217 * t241 + 0.1e1;
	t212 = t303 * t234;
	t209 = -t305 * t212 + t232 * t247 + t233 * t264;
	t207 = 0.2e1 * t303 / t236 ^ 2 * (-t240 * t320 + t244 * t322) + (0.2e1 * t320 * t321 + t245 * t250 + (-t242 * t262 - t244 * t264 - t247 * t263) * t251) * t234;
	t1 = [0, t207, 0, 0, 0, 0; 0, 0.2e1 * (t209 * t326 - t216 * t248) / t215 ^ 2 * (-t241 * t328 + t246 * t326) + ((-t258 * t278 - t270 * t313) * t216 + (-t248 * t208 - t209 * t246) * t217 + (0.2e1 * t209 * t328 + (-(t207 * t242 - t212 * t244 + t262 + (t212 * t253 + t247) * t211) * t233 - (-t207 * t253 + t212 * t263 + t245 + (t212 * t242 - t264) * t211) * t232) * t217) * t243) / t215, 0, 0, 0, 0; 0, 0.2e1 * (-t227 * t238 + t228 * t323) * t327 + ((-t258 * t309 + t259 * t286 + t270 * t306) * t227 + 0.2e1 * t323 * t325 + (-t238 * t225 - (t259 * t288 + (t258 * t283 - t270 * t316) * t286) * t230 - t239 * t224) * t228 + (t239 * t227 - (t260 * t309 - t296 * t306 - t318) * t324) * qJD(4)) * t221, 0, -0.2e1 * t327 + 0.2e1 * (t221 * t224 * t228 + (-t221 * t325 - t228 * t327) * t230) * t230, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:03
	% EndTime: 2019-10-09 22:05:08
	% DurationCPUTime: 4.18s
	% Computational Cost: add. (15417->170), mult. (47519->336), div. (538->12), fcn. (61232->19), ass. (0->147)
	t412 = sin(pkin(14));
	t413 = sin(pkin(8));
	t414 = sin(pkin(7));
	t416 = cos(pkin(14));
	t417 = cos(pkin(8));
	t418 = cos(pkin(7));
	t498 = cos(pkin(13));
	t499 = cos(pkin(6));
	t458 = t499 * t498;
	t497 = sin(pkin(13));
	t500 = sin(qJ(2));
	t501 = cos(qJ(2));
	t444 = -t501 * t458 + t497 * t500;
	t415 = sin(pkin(6));
	t464 = t415 * t498;
	t439 = -t414 * t464 - t444 * t418;
	t445 = t500 * t458 + t497 * t501;
	t511 = (-t445 * t412 + t439 * t416) * t417 + (t444 * t414 - t418 * t464) * t413;
	t457 = t499 * t497;
	t410 = -t500 * t457 + t498 * t501;
	t446 = t501 * t457 + t498 * t500;
	t463 = t415 * t497;
	t440 = t414 * t463 - t446 * t418;
	t434 = t410 * t412 - t440 * t416;
	t441 = t446 * t414 + t418 * t463;
	t509 = -t441 * t413 + t434 * t417;
	t465 = t500 * t416;
	t468 = t501 * t412;
	t483 = t414 * t413;
	t507 = (t500 * t483 + (-t418 * t465 - t468) * t417) * t415;
	t443 = t418 * t445;
	t510 = (t444 * t412 - t416 * t443) * t417 + t445 * t483;
	t384 = t439 * t412 + t445 * t416;
	t405 = t444 * qJD(2);
	t406 = t445 * qJD(2);
	t481 = t416 * t418;
	t508 = (t405 * t412 - t406 * t481) * t417 - t384 * qJD(4);
	t420 = sin(qJ(4));
	t422 = cos(qJ(4));
	t470 = t422 * t483;
	t484 = t412 * t418;
	t505 = t511 * qJD(4) - t405 * t416 - t406 * t484;
	t338 = -t406 * t470 + t505 * t420 - t508 * t422;
	t362 = t384 * t420 - t511 * t422;
	t360 = t362 ^ 2;
	t462 = t499 * t414;
	t469 = t415 * t501;
	t400 = t415 * t465 + (t418 * t469 + t462) * t412;
	t466 = t500 * t412;
	t467 = t501 * t416;
	t448 = t418 * t467 - t466;
	t459 = t414 * t469;
	t454 = (t448 * t415 + t416 * t462) * t417 + (t499 * t418 - t459) * t413;
	t502 = -t400 * t420 + t454 * t422;
	t373 = 0.1e1 / t502 ^ 2;
	t354 = t360 * t373 + 0.1e1;
	t488 = t362 * t373;
	t376 = t400 * t422 + t454 * t420;
	t404 = (-t418 * t466 + t467) * t415;
	t402 = qJD(2) * t404;
	t447 = t507 * qJD(2);
	t358 = t376 * qJD(4) + t402 * t420 - t447 * t422;
	t372 = 0.1e1 / t502;
	t489 = t358 * t372 * t373;
	t506 = -0.2e1 * (t338 * t488 + t360 * t489) / t354 ^ 2;
	t407 = t446 * qJD(2);
	t408 = t410 * qJD(2);
	t504 = -t509 * qJD(4) - t407 * t416 - t408 * t484;
	t396 = -t410 * t484 - t446 * t416;
	t395 = -t410 * t481 + t446 * t412;
	t450 = t395 * t417 + t410 * t483;
	t503 = -t396 * t420 + t450 * t422;
	t355 = atan2(-t362, -t502);
	t350 = sin(t355);
	t351 = cos(t355);
	t332 = -t350 * t362 - t351 * t502;
	t329 = 0.1e1 / t332;
	t385 = t410 * t416 + t440 * t412;
	t366 = t385 * t422 - t509 * t420;
	t377 = t434 * t413 + t441 * t417;
	t419 = sin(qJ(5));
	t421 = cos(qJ(5));
	t349 = t366 * t421 + t377 * t419;
	t345 = 0.1e1 / t349;
	t330 = 0.1e1 / t332 ^ 2;
	t346 = 0.1e1 / t349 ^ 2;
	t352 = 0.1e1 / t354;
	t322 = (t338 * t372 + t358 * t488) * t352;
	t455 = t350 * t502 - t351 * t362;
	t318 = t455 * t322 - t350 * t338 + t351 * t358;
	t496 = t318 * t329 * t330;
	t390 = t407 * t412 - t408 * t481;
	t471 = t420 * t483;
	t475 = t385 * qJD(4);
	t341 = t408 * t471 + (t390 * t417 - t475) * t420 + t504 * t422;
	t482 = t414 * t417;
	t378 = -t390 * t413 + t408 * t482;
	t333 = t349 * qJD(5) + t341 * t419 - t378 * t421;
	t348 = t366 * t419 - t377 * t421;
	t344 = t348 ^ 2;
	t337 = t344 * t346 + 0.1e1;
	t492 = t346 * t348;
	t477 = qJD(5) * t348;
	t334 = t341 * t421 + t378 * t419 - t477;
	t493 = t334 * t345 * t346;
	t495 = (t333 * t492 - t344 * t493) / t337 ^ 2;
	t365 = t385 * t420 + t509 * t422;
	t494 = t330 * t365;
	t491 = t350 * t365;
	t490 = t351 * t365;
	t480 = t417 * t422;
	t361 = t365 ^ 2;
	t328 = t361 * t330 + 0.1e1;
	t340 = -t390 * t480 - t408 * t470 + t504 * t420 + t422 * t475;
	t474 = 0.2e1 * (t340 * t494 - t361 * t496) / t328 ^ 2;
	t473 = -0.2e1 * t495;
	t472 = t348 * t493;
	t461 = 0.2e1 * t365 * t496;
	t460 = 0.2e1 * t362 * t489;
	t370 = t396 * t422 + t450 * t420;
	t380 = -t395 * t413 + t410 * t482;
	t357 = t370 * t421 + t380 * t419;
	t356 = t370 * t419 - t380 * t421;
	t453 = -t419 * t345 + t421 * t492;
	t364 = t384 * t422 + t511 * t420;
	t452 = t364 * t372 + t376 * t488;
	t394 = -t412 * t443 - t444 * t416;
	t368 = t394 * t420 - t510 * t422;
	t381 = t404 * t420 - t507 * t422;
	t451 = t368 * t372 + t381 * t488;
	t393 = t407 * t484 - t408 * t416;
	t392 = t407 * t481 + t408 * t412;
	t379 = -t392 * t413 - t407 * t482;
	t367 = ((-t418 * t468 - t465) * t420 + t448 * t480) * qJD(2) * t415 + t507 * qJD(4) * t420 + (-qJD(2) * t413 * t459 + t404 * qJD(4)) * t422;
	t359 = t502 * qJD(4) + t402 * t422 + t447 * t420;
	t343 = t393 * t422 + (t392 * t417 - t407 * t483) * t420 + t503 * qJD(4);
	t342 = (t405 * t484 - t406 * t416) * t420 + (-(t405 * t481 + t406 * t412) * t417 + t405 * t483) * t422 + (t394 * t422 + t510 * t420) * qJD(4);
	t339 = t406 * t471 + t508 * t420 + t505 * t422;
	t335 = 0.1e1 / t337;
	t326 = 0.1e1 / t328;
	t324 = t451 * t352;
	t323 = t452 * t352;
	t320 = t455 * t324 - t350 * t368 + t351 * t381;
	t319 = t455 * t323 - t350 * t364 + t351 * t376;
	t317 = t451 * t506 + (t381 * t460 + t342 * t372 + (t338 * t381 + t358 * t368 + t362 * t367) * t373) * t352;
	t315 = t452 * t506 + (t376 * t460 + t339 * t372 + (t338 * t376 + t358 * t364 + t359 * t362) * t373) * t352;
	t1 = [0, t317, 0, t315, 0, 0; 0, (t320 * t494 + t329 * t503) * t474 + (t320 * t461 + (t503 * t318 - t320 * t340 - (-t317 * t362 - t324 * t338 + t367 + (t324 * t502 - t368) * t322) * t490 - (t317 * t502 - t324 * t358 - t342 + (t324 * t362 - t381) * t322) * t491) * t330 + (t370 * qJD(4) - t392 * t480 + t393 * t420 + t407 * t470) * t329) * t326, 0, (t319 * t494 - t329 * t366) * t474 + (t319 * t461 + t341 * t329 + (-t366 * t318 - t319 * t340 - (-t315 * t362 - t323 * t338 + t359 + (t323 * t502 - t364) * t322) * t490 - (t315 * t502 - t323 * t358 - t339 + (t323 * t362 - t376) * t322) * t491) * t330) * t326, 0, 0; 0, 0.2e1 * (-t345 * t356 + t357 * t492) * t495 + ((t357 * qJD(5) + t343 * t419 - t379 * t421) * t345 + 0.2e1 * t357 * t472 + (-t356 * t334 - (-t356 * qJD(5) + t343 * t421 + t379 * t419) * t348 - t357 * t333) * t346) * t335, 0, t453 * t365 * t473 + (t453 * t340 + ((-qJD(5) * t345 - 0.2e1 * t472) * t421 + (t333 * t421 + (t334 - t477) * t419) * t346) * t365) * t335, t473 + 0.2e1 * (t333 * t346 * t335 + (-t335 * t493 - t346 * t495) * t348) * t348, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-09 22:05:05
	% EndTime: 2019-10-09 22:05:14
	% DurationCPUTime: 9.12s
	% Computational Cost: add. (40668->248), mult. (122035->475), div. (816->12), fcn. (158495->21), ass. (0->208)
	t657 = sin(pkin(13));
	t663 = cos(pkin(6));
	t618 = t663 * t657;
	t661 = cos(pkin(13));
	t664 = sin(qJ(2));
	t665 = cos(qJ(2));
	t548 = -t664 * t618 + t661 * t665;
	t550 = sin(pkin(14));
	t587 = t665 * t618 + t661 * t664;
	t659 = sin(pkin(6));
	t612 = t657 * t659;
	t658 = sin(pkin(7));
	t598 = t658 * t612;
	t660 = cos(pkin(14));
	t662 = cos(pkin(7));
	t522 = t548 * t660 + (-t587 * t662 + t598) * t550;
	t555 = sin(qJ(4));
	t558 = cos(qJ(4));
	t551 = sin(pkin(8));
	t552 = cos(pkin(8));
	t584 = t587 * t660;
	t571 = t548 * t550 + t662 * t584 - t660 * t598;
	t574 = t587 * t658 + t662 * t612;
	t670 = -t574 * t551 + t571 * t552;
	t503 = t522 * t555 + t670 * t558;
	t619 = t663 * t661;
	t585 = -t665 * t619 + t657 * t664;
	t586 = t664 * t619 + t657 * t665;
	t614 = t659 * t658;
	t599 = t661 * t614;
	t521 = t586 * t660 + (-t585 * t662 - t599) * t550;
	t581 = t585 * t660;
	t569 = t586 * t550 + t662 * t581 + t660 * t599;
	t616 = t662 * t659;
	t573 = t585 * t658 - t661 * t616;
	t565 = t573 * t551 - t569 * t552;
	t501 = -t521 * t555 + t565 * t558;
	t543 = t585 * qJD(2);
	t544 = t586 * qJD(2);
	t628 = t550 * t662;
	t524 = -t543 * t660 - t544 * t628;
	t617 = t662 * t660;
	t592 = t543 * t550 - t544 * t617;
	t626 = t551 * t658;
	t579 = t544 * t626 + t592 * t552;
	t478 = t501 * qJD(4) + t524 * t558 + t579 * t555;
	t502 = t521 * t558 + t565 * t555;
	t554 = sin(qJ(5));
	t557 = cos(qJ(5));
	t566 = t569 * t551 + t573 * t552;
	t487 = t502 * t557 + t566 * t554;
	t625 = t552 * t658;
	t580 = t544 * t625 - t592 * t551;
	t452 = t487 * qJD(5) + t478 * t554 - t580 * t557;
	t485 = t502 * t554 - t566 * t557;
	t483 = t485 ^ 2;
	t615 = t660 * t659;
	t601 = t664 * t615;
	t604 = t665 * t616;
	t613 = t658 * t663;
	t537 = t601 + (t604 + t613) * t550;
	t600 = t662 * t615;
	t627 = t550 * t659;
	t609 = t664 * t627;
	t577 = -t665 * t600 + t609;
	t536 = t660 * t613 - t577;
	t603 = t665 * t614;
	t547 = t663 * t662 - t603;
	t610 = t536 * t552 + t547 * t551;
	t512 = t537 * t558 + t610 * t555;
	t520 = -t536 * t551 + t547 * t552;
	t499 = t512 * t554 - t520 * t557;
	t497 = 0.1e1 / t499 ^ 2;
	t468 = t483 * t497 + 0.1e1;
	t466 = 0.1e1 / t468;
	t511 = -t537 * t555 + t610 * t558;
	t542 = -t662 * t609 + t665 * t615;
	t540 = t542 * qJD(2);
	t541 = -t664 * t600 - t665 * t627;
	t539 = t541 * qJD(2);
	t602 = t664 * t614;
	t593 = qJD(2) * t602;
	t588 = t539 * t552 + t551 * t593;
	t494 = t511 * qJD(4) + t540 * t558 + t588 * t555;
	t500 = t512 * t557 + t520 * t554;
	t533 = -t539 * t551 + t552 * t593;
	t470 = t500 * qJD(5) + t494 * t554 - t533 * t557;
	t496 = 0.1e1 / t499;
	t648 = t485 * t497;
	t435 = (-t452 * t496 + t470 * t648) * t466;
	t469 = atan2(-t485, t499);
	t464 = sin(t469);
	t465 = cos(t469);
	t611 = -t464 * t499 - t465 * t485;
	t430 = t611 * t435 - t464 * t452 + t465 * t470;
	t448 = -t464 * t485 + t465 * t499;
	t445 = 0.1e1 / t448;
	t446 = 0.1e1 / t448 ^ 2;
	t672 = t430 * t445 * t446;
	t504 = t522 * t558 - t555 * t670;
	t568 = t571 * t551 + t574 * t552;
	t488 = t504 * t554 - t568 * t557;
	t624 = 0.2e1 * t488 * t672;
	t605 = -t496 * t501 + t511 * t648;
	t671 = t554 * t605;
	t546 = t548 * qJD(2);
	t545 = t587 * qJD(2);
	t591 = t545 * t550 - t546 * t617;
	t669 = t546 * t626 + t591 * t552;
	t668 = t541 * t552 + t551 * t602;
	t649 = t470 * t496 * t497;
	t667 = -0.2e1 * (t452 * t648 - t483 * t649) / t468 ^ 2;
	t532 = -t548 * t628 - t584;
	t531 = -t548 * t617 + t587 * t550;
	t596 = t531 * t552 + t548 * t626;
	t666 = -t532 * t555 + t596 * t558;
	t489 = t504 * t557 + t568 * t554;
	t553 = sin(qJ(6));
	t556 = cos(qJ(6));
	t463 = t489 * t556 + t503 * t553;
	t459 = 0.1e1 / t463;
	t460 = 0.1e1 / t463 ^ 2;
	t526 = -t545 * t660 - t546 * t628;
	t480 = -t503 * qJD(4) + t526 * t558 + t669 * t555;
	t578 = t546 * t625 - t591 * t551;
	t455 = -t488 * qJD(5) + t480 * t557 + t578 * t554;
	t479 = t504 * qJD(4) + t526 * t555 - t669 * t558;
	t443 = t463 * qJD(6) + t455 * t553 - t479 * t556;
	t462 = t489 * t553 - t503 * t556;
	t458 = t462 ^ 2;
	t451 = t458 * t460 + 0.1e1;
	t652 = t460 * t462;
	t634 = qJD(6) * t462;
	t444 = t455 * t556 + t479 * t553 - t634;
	t655 = t444 * t459 * t460;
	t656 = (t443 * t652 - t458 * t655) / t451 ^ 2;
	t654 = t446 * t488;
	t454 = t489 * qJD(5) + t480 * t554 - t578 * t557;
	t653 = t454 * t446;
	t651 = t464 * t488;
	t650 = t465 * t488;
	t647 = t503 * t554;
	t646 = t503 * t557;
	t640 = t552 * t555;
	t639 = t553 * t459;
	t638 = t556 * t462;
	t636 = qJD(5) * t554;
	t635 = qJD(5) * t557;
	t484 = t488 ^ 2;
	t442 = t446 * t484 + 0.1e1;
	t633 = 0.2e1 * (-t484 * t672 + t488 * t653) / t442 ^ 2;
	t632 = -0.2e1 * t656;
	t631 = 0.2e1 * t656;
	t629 = t462 * t655;
	t623 = 0.2e1 * t629;
	t622 = -0.2e1 * t485 * t649;
	t620 = qJD(6) * t646 + t480;
	t507 = t532 * t558 + t596 * t555;
	t517 = -t531 * t551 + t548 * t625;
	t492 = t507 * t557 + t517 * t554;
	t473 = t492 * t556 - t553 * t666;
	t472 = t492 * t553 + t556 * t666;
	t491 = t507 * t554 - t517 * t557;
	t608 = t460 * t638 - t639;
	t607 = -t487 * t496 + t500 * t648;
	t583 = t586 * t662;
	t530 = -t550 * t583 - t581;
	t529 = t585 * t550 - t660 * t583;
	t582 = t586 * t658;
	t575 = t529 * t552 + t551 * t582;
	t505 = t530 * t558 + t575 * t555;
	t576 = -t529 * t551 + t552 * t582;
	t490 = t505 * t554 - t576 * t557;
	t518 = t542 * t558 + t668 * t555;
	t534 = -t541 * t551 + t552 * t602;
	t508 = t518 * t554 - t534 * t557;
	t606 = -t490 * t496 + t508 * t648;
	t527 = t545 * t617 + t546 * t550;
	t597 = -t527 * t552 + t545 * t626;
	t594 = qJD(2) * t603;
	t590 = qJD(6) * t504 - t479 * t557 + t503 * t636;
	t538 = t577 * qJD(2);
	t528 = t545 * t628 - t546 * t660;
	t525 = t543 * t617 + t544 * t550;
	t515 = -t527 * t551 - t545 * t625;
	t493 = -t512 * qJD(4) - t540 * t555 + t588 * t558;
	t482 = t666 * qJD(4) + t528 * t558 - t597 * t555;
	t481 = t507 * qJD(4) + t528 * t555 + t597 * t558;
	t477 = -t502 * qJD(4) - t524 * t555 + t579 * t558;
	t476 = (t538 * t640 + (-t542 * qJD(4) + t551 * t594) * t555 + ((-t550 * t604 - t601) * qJD(2) + t668 * qJD(4)) * t558) * t554 + t518 * t635 - (-t538 * t551 + t552 * t594) * t557 + t534 * t636;
	t475 = t504 * t553 - t556 * t646;
	t474 = -t504 * t556 - t553 * t646;
	t471 = -t499 * qJD(5) + t494 * t557 + t533 * t554;
	t457 = -t491 * qJD(5) + t482 * t557 + t515 * t554;
	t456 = (t505 * qJD(5) + t525 * t551 + t543 * t625) * t557 + ((t543 * t628 - t544 * t660) * t558 + t525 * t640 - t543 * t555 * t626 + t576 * qJD(5) + (-t530 * t555 + t575 * t558) * qJD(4)) * t554;
	t453 = -t485 * qJD(5) + t478 * t557 + t580 * t554;
	t449 = 0.1e1 / t451;
	t440 = 0.1e1 / t442;
	t439 = t466 * t671;
	t438 = t606 * t466;
	t437 = t607 * t466;
	t433 = (-t464 * t501 + t465 * t511) * t554 + t611 * t439;
	t432 = t611 * t438 - t464 * t490 + t465 * t508;
	t431 = t611 * t437 - t464 * t487 + t465 * t500;
	t429 = t606 * t667 + (t508 * t622 - t456 * t496 + (t452 * t508 + t470 * t490 + t476 * t485) * t497) * t466;
	t427 = t607 * t667 + (t500 * t622 - t453 * t496 + (t452 * t500 + t470 * t487 + t471 * t485) * t497) * t466;
	t426 = t667 * t671 + (t605 * t635 + (t511 * t622 - t477 * t496 + (t452 * t511 + t470 * t501 + t485 * t493) * t497) * t554) * t466;
	t1 = [0, t429, 0, t426, t427, 0; 0, (t432 * t654 - t445 * t491) * t633 + ((t492 * qJD(5) + t482 * t554 - t515 * t557) * t445 + t432 * t624 + (-t491 * t430 - t432 * t454 - (-t429 * t485 - t438 * t452 + t476 + (-t438 * t499 - t490) * t435) * t650 - (-t429 * t499 - t438 * t470 - t456 + (t438 * t485 - t508) * t435) * t651) * t446) * t440, 0, (t433 * t654 + t445 * t647) * t633 + ((-t479 * t554 - t503 * t635) * t445 + (-t653 + t624) * t433 + (t647 * t430 - (t511 * t635 - t426 * t485 - t439 * t452 + t493 * t554 + (-t439 * t499 - t501 * t554) * t435) * t650 - (-t501 * t635 - t426 * t499 - t439 * t470 - t477 * t554 + (t439 * t485 - t511 * t554) * t435) * t651) * t446) * t440, (t431 * t654 - t445 * t489) * t633 + (t431 * t624 + t455 * t445 + (-t489 * t430 - t431 * t454 - (-t427 * t485 - t437 * t452 + t471 + (-t437 * t499 - t487) * t435) * t650 - (-t427 * t499 - t437 * t470 - t453 + (t437 * t485 - t500) * t435) * t651) * t446) * t440, 0; 0, (-t459 * t472 + t473 * t652) * t631 + ((t473 * qJD(6) + t457 * t553 - t481 * t556) * t459 + t473 * t623 + (-t472 * t444 - (-t472 * qJD(6) + t457 * t556 + t481 * t553) * t462 - t473 * t443) * t460) * t449, 0, (-t459 * t474 + t475 * t652) * t631 + (t475 * t623 - t620 * t459 * t556 + t590 * t639 + (-t620 * t462 * t553 - t475 * t443 - t474 * t444 - t590 * t638) * t460) * t449, t608 * t488 * t632 + (t608 * t454 + ((-qJD(6) * t459 - 0.2e1 * t629) * t556 + (t443 * t556 + (t444 - t634) * t553) * t460) * t488) * t449, t632 + 0.2e1 * (t443 * t460 * t449 + (-t449 * t655 - t460 * t656) * t462) * t462;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end