% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRPRRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d4,d5,d6,theta1,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 02:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRPRRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRPRRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 02:02:17
% EndTime: 2019-05-05 02:02:38
% DurationCPUTime: 21.95s
% Computational Cost: add. (261414->399), mult. (743836->684), div. (0->0), fcn. (642415->18), ass. (0->365)
t2885 = sin(pkin(13));
t2890 = cos(pkin(13));
t2875 = -g(1) * t2890 - g(2) * t2885;
t2897 = sin(qJ(2));
t2901 = cos(qJ(2));
t2874 = g(1) * t2885 - g(2) * t2890;
t2883 = -g(3) + qJDD(1);
t2888 = sin(pkin(6));
t2893 = cos(pkin(6));
t3007 = t2874 * t2893 + t2883 * t2888;
t2818 = -t2875 * t2897 + t2901 * t3007;
t2887 = sin(pkin(7));
t2902 = qJD(2) ^ 2;
t2980 = t2887 * t2902;
t2814 = qJDD(2) * pkin(2) + qJ(3) * t2980 + t2818;
t2819 = t2901 * t2875 + t2897 * t3007;
t2976 = qJDD(2) * t2887;
t2815 = -pkin(2) * t2902 + qJ(3) * t2976 + t2819;
t2889 = cos(pkin(14));
t2884 = sin(pkin(14));
t2886 = sin(pkin(8));
t2984 = t2884 * t2886;
t2909 = -pkin(3) * t2889 - pkin(10) * t2984;
t2837 = t2909 * t2887 * qJD(2);
t2891 = cos(pkin(8));
t2892 = cos(pkin(7));
t2979 = t2889 * t2891;
t2982 = t2886 * t2892;
t3008 = t2887 * t2979 + t2982;
t2908 = pkin(10) * t3008;
t2838 = qJD(2) * t2908;
t2983 = t2884 * t2887;
t2996 = pkin(10) * t2891;
t2846 = (pkin(3) * t2892 - t2983 * t2996) * qJD(2);
t2915 = -t2838 * t2889 + t2846 * t2884;
t2841 = -t2874 * t2888 + t2883 * t2893;
t2972 = qJD(2) * t2983;
t2981 = t2887 * t2889;
t2991 = t2814 * t2892;
t2969 = -0.2e1 * qJD(3) * t2972 + t2841 * t2981 + t2889 * t2991;
t2973 = t2892 * t2841 + qJDD(3);
t2995 = qJD(2) * t2838;
t3010 = t2891 * ((pkin(3) * qJDD(2) + t2995) * t2892 + (-t2815 + (-qJD(2) * t2837 - qJDD(2) * t2996) * t2887) * t2884 + t2969) + t2886 * ((qJD(2) * t2915 + qJDD(2) * t2909 - t2814) * t2887 + t2973);
t2975 = qJDD(2) * t2889;
t2966 = t2887 * t2975;
t2974 = qJDD(2) * t2892;
t3009 = t2886 * t2974 + t2891 * t2966;
t2896 = sin(qJ(4));
t2900 = cos(qJ(4));
t2828 = (t2896 * t2982 + (t2884 * t2900 + t2896 * t2979) * t2887) * qJD(2);
t2839 = -qJD(4) - (-t2886 * t2981 + t2891 * t2892) * qJD(2);
t2895 = sin(qJ(5));
t2899 = cos(qJ(5));
t2808 = t2828 * t2895 + t2899 * t2839;
t2807 = qJD(6) + t2808;
t3006 = qJD(6) + t2807;
t2810 = t2828 * t2899 - t2839 * t2895;
t2826 = -qJD(2) * t2900 * t3008 + t2896 * t2972;
t2825 = qJD(5) + t2826;
t2894 = sin(qJ(6));
t2898 = cos(qJ(6));
t2787 = t2810 * t2894 - t2898 * t2825;
t3005 = t2787 ^ 2;
t2789 = t2810 * t2898 + t2825 * t2894;
t3004 = t2789 ^ 2;
t3003 = t2807 ^ 2;
t3002 = t2808 ^ 2;
t3001 = t2810 ^ 2;
t3000 = t2825 ^ 2;
t2999 = t2826 ^ 2;
t2998 = t2828 ^ 2;
t2997 = t2839 ^ 2;
t2993 = t2787 * t2789;
t2992 = t2808 * t2810;
t2990 = t2826 * t2828;
t2989 = t2826 * t2839;
t2988 = t2828 * t2839;
t2880 = t2887 ^ 2;
t2986 = t2880 * t2902;
t2978 = qJD(5) - t2825;
t2977 = qJD(6) - t2807;
t2774 = 0.2e1 * qJD(3) * qJD(2) * t2981 + t2889 * t2815 + t2841 * t2983 + t2884 * t2991;
t2756 = (t2837 * t2981 - t2846 * t2892) * qJD(2) + qJDD(2) * t2908 + t2774;
t2720 = t2900 * t2756 + t2896 * t3010;
t2799 = pkin(4) * t2826 - pkin(11) * t2828;
t2836 = -t2886 * t2966 + t2891 * t2974 + qJDD(4);
t2707 = -pkin(4) * t2997 + pkin(11) * t2836 - t2799 * t2826 + t2720;
t2773 = -t2884 * t2815 + t2969;
t2735 = -t2886 * (pkin(3) * t2974 + t2892 * t2995 + t2773) + t2891 * t2973 + (t2891 * (-pkin(3) * t2975 - t2814) + (t2837 * t2984 + t2891 * t2915) * qJD(2)) * t2887;
t2968 = t2884 * t2976;
t2961 = -t2828 * qJD(4) - t2896 * t2968 + t2900 * t3009;
t2777 = -t2961 - t2988;
t2802 = -t2826 * qJD(4) + t2896 * t3009 + t2900 * t2968;
t2963 = -t2802 - t2989;
t2903 = pkin(4) * t2777 + pkin(11) * t2963 + t2735;
t2679 = t2899 * t2707 + t2895 * t2903;
t2970 = t2892 * t2980;
t2678 = -t2707 * t2895 + t2899 * t2903;
t2919 = -t2899 * t2802 - t2895 * t2836;
t2769 = -qJD(5) * t2808 - t2919;
t2911 = qJDD(5) - t2961;
t2965 = -t2894 * t2769 + t2898 * t2911;
t2964 = t2825 * t2808 - t2769;
t2962 = t2895 * t2802 - t2899 * t2836;
t2959 = t2896 * t2756 - t2900 * t3010;
t2776 = pkin(5) * t2808 - pkin(12) * t2810;
t2671 = -pkin(5) * t3000 + pkin(12) * t2911 - t2808 * t2776 + t2679;
t2706 = -t2836 * pkin(4) - t2997 * pkin(11) + t2828 * t2799 + t2959;
t2747 = (qJD(5) + t2825) * t2810 + t2962;
t2683 = pkin(5) * t2747 + pkin(12) * t2964 + t2706;
t2649 = -t2671 * t2894 + t2683 * t2898;
t2650 = t2671 * t2898 + t2683 * t2894;
t2634 = -t2649 * t2894 + t2650 * t2898;
t2670 = -pkin(5) * t2911 - pkin(12) * t3000 + t2776 * t2810 - t2678;
t2621 = t2634 * t2895 - t2670 * t2899;
t2622 = t2634 * t2899 + t2670 * t2895;
t2633 = t2649 * t2898 + t2650 * t2894;
t2953 = t2622 * t2896 - t2633 * t2900;
t2600 = t2891 * t2621 + t2886 * t2953;
t2601 = -t2886 * t2621 + t2891 * t2953;
t2609 = t2622 * t2900 + t2633 * t2896;
t2957 = t2601 * t2889 + t2609 * t2884;
t2593 = -t2887 * t2600 + t2892 * t2957;
t2596 = -t2601 * t2884 + t2609 * t2889;
t2958 = t2593 * t2901 + t2596 * t2897;
t2654 = t2678 * t2899 + t2679 * t2895;
t2655 = -t2678 * t2895 + t2679 * t2899;
t2945 = t2655 * t2896 - t2706 * t2900;
t2630 = t2891 * t2654 + t2886 * t2945;
t2631 = -t2886 * t2654 + t2891 * t2945;
t2644 = t2655 * t2900 + t2706 * t2896;
t2951 = t2631 * t2889 + t2644 * t2884;
t2608 = -t2887 * t2630 + t2892 * t2951;
t2616 = -t2631 * t2884 + t2644 * t2889;
t2956 = t2608 * t2901 + t2616 * t2897;
t2725 = -t2789 * t2977 + t2965;
t2906 = -t2898 * t2769 - t2894 * t2911;
t2727 = t2787 * t2977 + t2906;
t2694 = t2725 * t2898 - t2727 * t2894;
t2742 = -t3004 - t3005;
t2680 = t2694 * t2895 - t2742 * t2899;
t2681 = t2694 * t2899 + t2742 * t2895;
t2693 = t2725 * t2894 + t2727 * t2898;
t2941 = t2681 * t2896 - t2693 * t2900;
t2642 = t2891 * t2680 + t2886 * t2941;
t2643 = -t2886 * t2680 + t2891 * t2941;
t2662 = t2681 * t2900 + t2693 * t2896;
t2949 = t2643 * t2889 + t2662 * t2884;
t2615 = -t2887 * t2642 + t2892 * t2949;
t2632 = -t2643 * t2884 + t2662 * t2889;
t2955 = t2615 * t2901 + t2632 * t2897;
t2907 = -qJD(5) * t2810 - qJDD(6) - t2962;
t2731 = -t2907 - t2993;
t2746 = -t3003 - t3005;
t2711 = -t2731 * t2894 + t2746 * t2898;
t2724 = t2789 * t3006 - t2965;
t2687 = t2711 * t2895 - t2724 * t2899;
t2688 = t2711 * t2899 + t2724 * t2895;
t2710 = t2731 * t2898 + t2746 * t2894;
t2939 = t2688 * t2896 - t2710 * t2900;
t2647 = t2891 * t2687 + t2886 * t2939;
t2648 = -t2886 * t2687 + t2891 * t2939;
t2668 = t2688 * t2900 + t2710 * t2896;
t2947 = t2648 * t2889 + t2668 * t2884;
t2620 = -t2887 * t2647 + t2892 * t2947;
t2636 = -t2648 * t2884 + t2668 * t2889;
t2954 = t2620 * t2901 + t2636 * t2897;
t2732 = t2907 - t2993;
t2752 = -t3003 - t3004;
t2717 = t2732 * t2898 - t2752 * t2894;
t2726 = -t2787 * t3006 - t2906;
t2689 = t2717 * t2895 - t2726 * t2899;
t2690 = t2717 * t2899 + t2726 * t2895;
t2716 = t2732 * t2894 + t2752 * t2898;
t2938 = t2690 * t2896 - t2716 * t2900;
t2651 = t2891 * t2689 + t2886 * t2938;
t2652 = -t2886 * t2689 + t2891 * t2938;
t2669 = t2690 * t2900 + t2716 * t2896;
t2946 = t2652 * t2889 + t2669 * t2884;
t2624 = -t2887 * t2651 + t2892 * t2946;
t2637 = -t2652 * t2884 + t2669 * t2889;
t2952 = t2624 * t2901 + t2637 * t2897;
t2932 = t2720 * t2896 - t2900 * t2959;
t2675 = t2891 * t2735 + t2886 * t2932;
t2676 = -t2886 * t2735 + t2891 * t2932;
t2686 = t2720 * t2900 + t2896 * t2959;
t2942 = t2676 * t2889 + t2686 * t2884;
t2639 = -t2887 * t2675 + t2892 * t2942;
t2653 = -t2676 * t2884 + t2686 * t2889;
t2950 = t2639 * t2901 + t2653 * t2897;
t2748 = -t2810 * t2978 - t2962;
t2750 = t2808 * t2978 + t2919;
t2721 = t2748 * t2895 + t2750 * t2899;
t2722 = t2748 * t2899 - t2750 * t2895;
t2762 = -t3001 - t3002;
t2931 = t2722 * t2896 - t2762 * t2900;
t2684 = t2891 * t2721 + t2886 * t2931;
t2685 = -t2886 * t2721 + t2891 * t2931;
t2708 = t2722 * t2900 + t2762 * t2896;
t2940 = t2685 * t2889 + t2708 * t2884;
t2646 = -t2887 * t2684 + t2892 * t2940;
t2667 = -t2685 * t2884 + t2708 * t2889;
t2948 = t2646 * t2901 + t2667 * t2897;
t2759 = t2911 - t2992;
t2770 = -t3000 - t3002;
t2736 = t2759 * t2899 + t2770 * t2895;
t2737 = -t2759 * t2895 + t2770 * t2899;
t2928 = t2737 * t2896 - t2747 * t2900;
t2697 = t2891 * t2736 + t2886 * t2928;
t2698 = -t2886 * t2736 + t2891 * t2928;
t2713 = t2737 * t2900 + t2747 * t2896;
t2936 = t2698 * t2889 + t2713 * t2884;
t2659 = -t2887 * t2697 + t2892 * t2936;
t2673 = -t2698 * t2884 + t2713 * t2889;
t2944 = t2659 * t2901 + t2673 * t2897;
t2760 = -t2911 - t2992;
t2775 = -t3000 - t3001;
t2738 = t2760 * t2895 + t2775 * t2899;
t2739 = t2760 * t2899 - t2775 * t2895;
t2927 = t2739 * t2896 + t2900 * t2964;
t2699 = t2891 * t2738 + t2886 * t2927;
t2700 = -t2886 * t2738 + t2891 * t2927;
t2718 = t2739 * t2900 - t2896 * t2964;
t2935 = t2700 * t2889 + t2718 * t2884;
t2661 = -t2887 * t2699 + t2892 * t2935;
t2674 = -t2700 * t2884 + t2718 * t2889;
t2943 = t2661 * t2901 + t2674 * t2897;
t2786 = -t2998 - t2999;
t2778 = t2961 - t2988;
t2780 = -t2802 + t2989;
t2923 = t2778 * t2896 + t2780 * t2900;
t2729 = t2891 * t2786 + t2886 * t2923;
t2730 = -t2886 * t2786 + t2891 * t2923;
t2751 = t2778 * t2900 - t2780 * t2896;
t2930 = t2730 * t2889 + t2751 * t2884;
t2696 = -t2887 * t2729 + t2892 * t2930;
t2712 = -t2730 * t2884 + t2751 * t2889;
t2937 = t2696 * t2901 + t2712 * t2897;
t2791 = -t2997 - t2999;
t2793 = t2836 - t2990;
t2922 = t2791 * t2896 + t2793 * t2900;
t2740 = t2891 * t2777 + t2886 * t2922;
t2741 = -t2886 * t2777 + t2891 * t2922;
t2761 = t2791 * t2900 - t2793 * t2896;
t2926 = t2741 * t2889 + t2761 * t2884;
t2702 = -t2887 * t2740 + t2892 * t2926;
t2723 = -t2741 * t2884 + t2761 * t2889;
t2934 = t2702 * t2901 + t2723 * t2897;
t2792 = -t2836 - t2990;
t2795 = -t2997 - t2998;
t2921 = t2792 * t2896 + t2795 * t2900;
t2743 = t2886 * t2921 - t2891 * t2963;
t2744 = t2886 * t2963 + t2891 * t2921;
t2767 = t2792 * t2900 - t2795 * t2896;
t2925 = t2744 * t2889 + t2767 * t2884;
t2704 = -t2887 * t2743 + t2892 * t2925;
t2728 = -t2744 * t2884 + t2767 * t2889;
t2933 = t2704 * t2901 + t2728 * t2897;
t2796 = -t2887 * t2814 + t2973;
t2924 = t2773 * t2889 + t2774 * t2884;
t2734 = -t2887 * t2796 + t2892 * t2924;
t2745 = -t2773 * t2884 + t2774 * t2889;
t2929 = t2734 * t2901 + t2745 * t2897;
t2879 = t2884 ^ 2;
t2881 = t2889 ^ 2;
t2849 = (-t2879 - t2881) * t2986;
t2864 = t2889 * t2970;
t2843 = t2864 - t2968;
t2863 = t2884 * t2970;
t2844 = t2863 + t2966;
t2914 = t2843 * t2889 + t2844 * t2884;
t2801 = -t2887 * t2849 + t2892 * t2914;
t2816 = -t2843 * t2884 + t2844 * t2889;
t2920 = t2801 * t2901 + t2816 * t2897;
t2845 = t2863 - t2966;
t2862 = t2884 * t2889 * t2986;
t2847 = t2862 + t2974;
t2882 = t2892 ^ 2;
t2857 = (-t2880 * t2881 - t2882) * t2902;
t2913 = t2847 * t2889 + t2857 * t2884;
t2805 = -t2887 * t2845 + t2892 * t2913;
t2820 = -t2847 * t2884 + t2857 * t2889;
t2918 = t2805 * t2901 + t2820 * t2897;
t2842 = t2864 + t2968;
t2848 = t2862 - t2974;
t2856 = (-t2879 * t2880 - t2882) * t2902;
t2912 = t2848 * t2884 + t2856 * t2889;
t2806 = -t2887 * t2842 + t2892 * t2912;
t2821 = t2848 * t2889 - t2856 * t2884;
t2917 = t2806 * t2901 + t2821 * t2897;
t2916 = t2818 * t2901 + t2819 * t2897;
t2910 = qJDD(2) * t2901 - t2897 * t2902;
t2871 = -qJDD(2) * t2897 - t2901 * t2902;
t2853 = t2910 * t2893;
t2852 = t2871 * t2893;
t2851 = t2910 * t2888;
t2850 = t2871 * t2888;
t2804 = t2892 * t2842 + t2887 * t2912;
t2803 = t2892 * t2845 + t2887 * t2913;
t2800 = t2892 * t2849 + t2887 * t2914;
t2794 = -t2818 * t2897 + t2819 * t2901;
t2785 = -t2806 * t2897 + t2821 * t2901;
t2784 = -t2805 * t2897 + t2820 * t2901;
t2783 = -t2888 * t2841 + t2893 * t2916;
t2782 = t2893 * t2841 + t2888 * t2916;
t2781 = -t2801 * t2897 + t2816 * t2901;
t2766 = -t2888 * t2804 + t2893 * t2917;
t2765 = -t2888 * t2803 + t2893 * t2918;
t2764 = t2893 * t2804 + t2888 * t2917;
t2763 = t2893 * t2803 + t2888 * t2918;
t2758 = -t2888 * t2800 + t2893 * t2920;
t2757 = t2893 * t2800 + t2888 * t2920;
t2733 = t2892 * t2796 + t2887 * t2924;
t2709 = -t2734 * t2897 + t2745 * t2901;
t2703 = t2892 * t2743 + t2887 * t2925;
t2701 = t2892 * t2740 + t2887 * t2926;
t2695 = t2892 * t2729 + t2887 * t2930;
t2692 = -t2888 * t2733 + t2893 * t2929;
t2691 = t2893 * t2733 + t2888 * t2929;
t2682 = -t2704 * t2897 + t2728 * t2901;
t2677 = -t2702 * t2897 + t2723 * t2901;
t2672 = -t2696 * t2897 + t2712 * t2901;
t2666 = -t2888 * t2703 + t2893 * t2933;
t2665 = t2893 * t2703 + t2888 * t2933;
t2664 = -t2888 * t2701 + t2893 * t2934;
t2663 = t2893 * t2701 + t2888 * t2934;
t2660 = t2892 * t2699 + t2887 * t2935;
t2658 = t2892 * t2697 + t2887 * t2936;
t2657 = -t2888 * t2695 + t2893 * t2937;
t2656 = t2893 * t2695 + t2888 * t2937;
t2645 = t2892 * t2684 + t2887 * t2940;
t2641 = -t2661 * t2897 + t2674 * t2901;
t2640 = -t2659 * t2897 + t2673 * t2901;
t2638 = t2892 * t2675 + t2887 * t2942;
t2635 = -t2646 * t2897 + t2667 * t2901;
t2629 = -t2888 * t2660 + t2893 * t2943;
t2628 = t2893 * t2660 + t2888 * t2943;
t2627 = -t2888 * t2658 + t2893 * t2944;
t2626 = t2893 * t2658 + t2888 * t2944;
t2625 = -t2639 * t2897 + t2653 * t2901;
t2623 = t2892 * t2651 + t2887 * t2946;
t2619 = t2892 * t2647 + t2887 * t2947;
t2618 = -t2888 * t2645 + t2893 * t2948;
t2617 = t2893 * t2645 + t2888 * t2948;
t2614 = t2892 * t2642 + t2887 * t2949;
t2613 = -t2888 * t2638 + t2893 * t2950;
t2612 = t2893 * t2638 + t2888 * t2950;
t2611 = -t2624 * t2897 + t2637 * t2901;
t2610 = -t2620 * t2897 + t2636 * t2901;
t2607 = t2892 * t2630 + t2887 * t2951;
t2606 = -t2615 * t2897 + t2632 * t2901;
t2605 = -t2888 * t2623 + t2893 * t2952;
t2604 = t2893 * t2623 + t2888 * t2952;
t2603 = -t2888 * t2619 + t2893 * t2954;
t2602 = t2893 * t2619 + t2888 * t2954;
t2599 = -t2608 * t2897 + t2616 * t2901;
t2598 = -t2888 * t2614 + t2893 * t2955;
t2597 = t2893 * t2614 + t2888 * t2955;
t2595 = -t2888 * t2607 + t2893 * t2956;
t2594 = t2893 * t2607 + t2888 * t2956;
t2592 = t2892 * t2600 + t2887 * t2957;
t2591 = -t2593 * t2897 + t2596 * t2901;
t2590 = -t2888 * t2592 + t2893 * t2958;
t2589 = t2893 * t2592 + t2888 * t2958;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2874 * t2885 + t2875 * t2890, 0, 0, 0, 0, 0, 0, -t2853 * t2885 + t2871 * t2890, -t2852 * t2885 - t2890 * t2910, 0, -t2783 * t2885 + t2794 * t2890, 0, 0, 0, 0, 0, 0, -t2765 * t2885 + t2784 * t2890, -t2766 * t2885 + t2785 * t2890, -t2758 * t2885 + t2781 * t2890, -t2692 * t2885 + t2709 * t2890, 0, 0, 0, 0, 0, 0, -t2664 * t2885 + t2677 * t2890, -t2666 * t2885 + t2682 * t2890, -t2657 * t2885 + t2672 * t2890, -t2613 * t2885 + t2625 * t2890, 0, 0, 0, 0, 0, 0, -t2627 * t2885 + t2640 * t2890, -t2629 * t2885 + t2641 * t2890, -t2618 * t2885 + t2635 * t2890, -t2595 * t2885 + t2599 * t2890, 0, 0, 0, 0, 0, 0, -t2603 * t2885 + t2610 * t2890, -t2605 * t2885 + t2611 * t2890, -t2598 * t2885 + t2606 * t2890, -t2590 * t2885 + t2591 * t2890; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2874 * t2890 + t2875 * t2885, 0, 0, 0, 0, 0, 0, t2853 * t2890 + t2871 * t2885, t2852 * t2890 - t2885 * t2910, 0, t2783 * t2890 + t2794 * t2885, 0, 0, 0, 0, 0, 0, t2765 * t2890 + t2784 * t2885, t2766 * t2890 + t2785 * t2885, t2758 * t2890 + t2781 * t2885, t2692 * t2890 + t2709 * t2885, 0, 0, 0, 0, 0, 0, t2664 * t2890 + t2677 * t2885, t2666 * t2890 + t2682 * t2885, t2657 * t2890 + t2672 * t2885, t2613 * t2890 + t2625 * t2885, 0, 0, 0, 0, 0, 0, t2627 * t2890 + t2640 * t2885, t2629 * t2890 + t2641 * t2885, t2618 * t2890 + t2635 * t2885, t2595 * t2890 + t2599 * t2885, 0, 0, 0, 0, 0, 0, t2603 * t2890 + t2610 * t2885, t2605 * t2890 + t2611 * t2885, t2598 * t2890 + t2606 * t2885, t2590 * t2890 + t2591 * t2885; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2883, 0, 0, 0, 0, 0, 0, t2851, t2850, 0, t2782, 0, 0, 0, 0, 0, 0, t2763, t2764, t2757, t2691, 0, 0, 0, 0, 0, 0, t2663, t2665, t2656, t2612, 0, 0, 0, 0, 0, 0, t2626, t2628, t2617, t2594, 0, 0, 0, 0, 0, 0, t2602, t2604, t2597, t2589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2875, 0, 0, 0, 0, 0, 0, t2871, -t2910, 0, t2794, 0, 0, 0, 0, 0, 0, t2784, t2785, t2781, t2709, 0, 0, 0, 0, 0, 0, t2677, t2682, t2672, t2625, 0, 0, 0, 0, 0, 0, t2640, t2641, t2635, t2599, 0, 0, 0, 0, 0, 0, t2610, t2611, t2606, t2591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2874, 0, 0, 0, 0, 0, 0, t2853, t2852, 0, t2783, 0, 0, 0, 0, 0, 0, t2765, t2766, t2758, t2692, 0, 0, 0, 0, 0, 0, t2664, t2666, t2657, t2613, 0, 0, 0, 0, 0, 0, t2627, t2629, t2618, t2595, 0, 0, 0, 0, 0, 0, t2603, t2605, t2598, t2590; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2883, 0, 0, 0, 0, 0, 0, t2851, t2850, 0, t2782, 0, 0, 0, 0, 0, 0, t2763, t2764, t2757, t2691, 0, 0, 0, 0, 0, 0, t2663, t2665, t2656, t2612, 0, 0, 0, 0, 0, 0, t2626, t2628, t2617, t2594, 0, 0, 0, 0, 0, 0, t2602, t2604, t2597, t2589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2902, -qJDD(2), 0, t2819, 0, 0, 0, 0, 0, 0, t2820, t2821, t2816, t2745, 0, 0, 0, 0, 0, 0, t2723, t2728, t2712, t2653, 0, 0, 0, 0, 0, 0, t2673, t2674, t2667, t2616, 0, 0, 0, 0, 0, 0, t2636, t2637, t2632, t2596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2902, 0, t2818, 0, 0, 0, 0, 0, 0, t2805, t2806, t2801, t2734, 0, 0, 0, 0, 0, 0, t2702, t2704, t2696, t2639, 0, 0, 0, 0, 0, 0, t2659, t2661, t2646, t2608, 0, 0, 0, 0, 0, 0, t2620, t2624, t2615, t2593; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2841, 0, 0, 0, 0, 0, 0, t2803, t2804, t2800, t2733, 0, 0, 0, 0, 0, 0, t2701, t2703, t2695, t2638, 0, 0, 0, 0, 0, 0, t2658, t2660, t2645, t2607, 0, 0, 0, 0, 0, 0, t2619, t2623, t2614, t2592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2857, t2848, t2844, t2774, 0, 0, 0, 0, 0, 0, t2761, t2767, t2751, t2686, 0, 0, 0, 0, 0, 0, t2713, t2718, t2708, t2644, 0, 0, 0, 0, 0, 0, t2668, t2669, t2662, t2609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2847, t2856, t2843, t2773, 0, 0, 0, 0, 0, 0, t2741, t2744, t2730, t2676, 0, 0, 0, 0, 0, 0, t2698, t2700, t2685, t2631, 0, 0, 0, 0, 0, 0, t2648, t2652, t2643, t2601; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2845, t2842, t2849, t2796, 0, 0, 0, 0, 0, 0, t2740, t2743, t2729, t2675, 0, 0, 0, 0, 0, 0, t2697, t2699, t2684, t2630, 0, 0, 0, 0, 0, 0, t2647, t2651, t2642, t2600; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2791, t2792, t2778, t2720, 0, 0, 0, 0, 0, 0, t2737, t2739, t2722, t2655, 0, 0, 0, 0, 0, 0, t2688, t2690, t2681, t2622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2793, t2795, t2780, -t2959, 0, 0, 0, 0, 0, 0, -t2747, t2964, -t2762, -t2706, 0, 0, 0, 0, 0, 0, -t2710, -t2716, -t2693, -t2633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2777, -t2963, t2786, t2735, 0, 0, 0, 0, 0, 0, t2736, t2738, t2721, t2654, 0, 0, 0, 0, 0, 0, t2687, t2689, t2680, t2621; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2770, t2760, t2748, t2679, 0, 0, 0, 0, 0, 0, t2711, t2717, t2694, t2634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2759, t2775, t2750, t2678, 0, 0, 0, 0, 0, 0, -t2724, -t2726, -t2742, -t2670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2747, -t2964, t2762, t2706, 0, 0, 0, 0, 0, 0, t2710, t2716, t2693, t2633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2746, t2732, t2725, t2650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2731, t2752, t2727, t2649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2724, t2726, t2742, t2670;];
f_new_reg  = t1;
