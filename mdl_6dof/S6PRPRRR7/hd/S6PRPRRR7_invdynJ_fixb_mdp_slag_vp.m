% Calculate vector of inverse dynamics joint torques for
% S6PRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d4,d5,d6,theta1,theta3]';
% MDP [29x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6PRPRRR7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6PRPRRR7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(14,1),zeros(29,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRPRRR7_invdynJ_fixb_mdp_slag_vp: pkin has to be [14x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [29 1]), ...
  'S6PRPRRR7_invdynJ_fixb_mdp_slag_vp: MDP has to be [29x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:56:23
% EndTime: 2019-03-08 20:56:43
% DurationCPUTime: 17.20s
% Computational Cost: add. (11564->702), mult. (35442->1025), div. (0->0), fcn. (32779->18), ass. (0->317)
t701 = sin(pkin(14));
t704 = sin(pkin(6));
t705 = cos(pkin(14));
t716 = cos(qJ(2));
t708 = cos(pkin(7));
t713 = sin(qJ(2));
t845 = t708 * t713;
t651 = (-t701 * t716 - t705 * t845) * t704;
t640 = qJD(1) * t651;
t703 = sin(pkin(7));
t831 = qJD(3) * t703;
t900 = t701 * t831 + t640;
t702 = sin(pkin(8));
t707 = cos(pkin(8));
t834 = qJD(1) * t704;
t806 = t713 * t834;
t780 = t703 * t806;
t757 = t702 * t900 - t707 * t780;
t879 = cos(qJ(4));
t808 = t879 * t705;
t781 = t707 * t808;
t811 = t702 * t879;
t783 = t708 * t811;
t899 = t703 * t781 + t783;
t652 = (-t701 * t845 + t705 * t716) * t704;
t644 = qJD(1) * t652;
t712 = sin(qJ(4));
t857 = t703 * t705;
t861 = t701 * t708;
t666 = pkin(2) * t861 + qJ(3) * t857;
t851 = t705 * t707;
t740 = (t702 * t708 + t703 * t851) * pkin(10);
t625 = t740 + t666;
t850 = t705 * t708;
t696 = pkin(2) * t850;
t862 = t701 * t703;
t878 = pkin(3) * t708;
t630 = t878 + t696 + (-pkin(10) * t707 - qJ(3)) * t862;
t877 = pkin(10) * t701;
t758 = -pkin(3) * t705 - t702 * t877;
t649 = (-pkin(2) + t758) * t703;
t810 = t707 * t879;
t724 = -t712 * t625 + t630 * t810 + t649 * t811;
t846 = t707 * t712;
t730 = t703 * (-t701 * t846 + t808);
t898 = -qJD(3) * t730 - qJD(4) * t724 + t879 * t644 + (t640 * t707 + t702 * t780) * t712;
t860 = t701 * t712;
t620 = (t783 + (t781 - t860) * t703) * qJD(4);
t809 = t879 * t701;
t858 = t702 * t712;
t815 = t708 * t858;
t629 = t703 * (t705 * t846 + t809) + t815;
t621 = t629 * qJD(4);
t897 = pkin(4) * t621 - pkin(11) * t620 + t757;
t645 = qJD(2) * t730;
t799 = qJD(4) * t879;
t775 = t702 * t799;
t896 = t645 - t775;
t818 = qJDD(2) * t703;
t797 = t712 * t818;
t557 = qJD(2) * t621 - qJDD(2) * t899 + t701 * t797;
t832 = qJD(2) * t703;
t804 = t701 * t832;
t894 = qJD(2) * t899 - t712 * t804;
t614 = qJD(5) - t894;
t619 = t629 * qJD(2);
t715 = cos(qJ(5));
t803 = t702 * t832;
t821 = -t705 * t803 + qJD(4);
t847 = t707 * t708;
t756 = qJD(2) * t847 + t821;
t648 = t715 * t756;
t711 = sin(qJ(5));
t574 = t619 * t711 - t648;
t573 = qJD(6) + t574;
t699 = t703 ^ 2;
t893 = t699 * (t701 ^ 2 + t705 ^ 2);
t613 = t879 * t625;
t729 = t703 * (t705 * t712 + t707 * t809);
t784 = t703 * t811;
t853 = t704 * t713;
t754 = t784 * t853;
t837 = qJD(3) * t729 + (t613 + (t630 * t707 + t649 * t702) * t712) * qJD(4) + qJD(1) * t754 + t640 * t810 - t712 * t644;
t892 = t711 * t898 + t897 * t715;
t577 = -t630 * t702 + t707 * t649;
t628 = t703 * t860 - t899;
t516 = pkin(4) * t628 - pkin(11) * t629 + t577;
t659 = t702 * t857 - t847;
t812 = t630 * t846 + t649 * t858 + t613;
t521 = -pkin(11) * t659 + t812;
t826 = qJD(5) * t715;
t828 = qJD(5) * t711;
t891 = -t516 * t826 + t521 * t828 - t897 * t711 + t715 * t898;
t890 = t711 * t516 + t715 * t521;
t667 = -t707 * t715 + t711 * t858;
t779 = t701 * t803;
t889 = qJD(5) * t667 + t711 * t779 + t715 * t896;
t668 = t707 * t711 + t715 * t858;
t888 = qJD(5) * t668 - t711 * t896 + t715 * t779;
t641 = qJD(2) * t729;
t830 = qJD(4) * t712;
t800 = t702 * t830;
t887 = t641 - t800;
t709 = cos(pkin(6));
t875 = sin(pkin(13));
t795 = t875 * t713;
t706 = cos(pkin(13));
t848 = t706 * t716;
t664 = -t709 * t795 + t848;
t794 = t875 * t716;
t849 = t706 * t713;
t663 = -t709 * t794 - t849;
t796 = t704 * t875;
t737 = t663 * t708 + t703 * t796;
t721 = t664 * t701 - t705 * t737;
t738 = -t663 * t703 + t708 * t796;
t886 = -t738 * t702 + t721 * t707;
t662 = t709 * t849 + t794;
t661 = t709 * t848 - t795;
t752 = -t703 * t704 * t706 + t661 * t708;
t723 = t662 * t701 - t705 * t752;
t854 = t704 * t708;
t753 = -t661 * t703 - t706 * t854;
t885 = -t753 * t702 + t723 * t707;
t553 = qJDD(5) + t557;
t670 = qJ(3) * t832 + t806;
t805 = t716 * t834;
t677 = qJD(2) * pkin(2) + t805;
t833 = qJD(1) * t709;
t807 = t703 * t833;
t594 = -t670 * t701 + t677 * t850 + t705 * t807;
t856 = t703 * t707;
t750 = -t856 * t877 + t878;
t572 = qJD(2) * t750 + t594;
t564 = t572 * t846;
t595 = t705 * t670 + t677 * t861 + t701 * t807;
t571 = qJD(2) * t740 + t595;
t822 = t708 * t833 + qJD(3);
t596 = (qJD(2) * t758 - t677) * t703 + t822;
t495 = t571 * t879 + t596 * t858 + t564;
t489 = pkin(11) * t756 + t495;
t526 = -t572 * t702 + t707 * t596;
t496 = -pkin(4) * t894 - pkin(11) * t619 + t526;
t464 = t489 * t715 + t496 * t711;
t653 = qJDD(2) * t659 - qJDD(4);
t820 = qJDD(1) * t704;
t631 = qJ(3) * t818 + t713 * t820 + (t805 + t831) * qJD(2);
t693 = t716 * t820;
t802 = qJD(2) * t853;
t774 = qJD(1) * t802;
t874 = qJDD(2) * pkin(2);
t654 = t693 - t774 + t874;
t819 = qJDD(1) * t709;
t798 = t703 * t819;
t560 = t705 * t631 + t654 * t861 + t701 * t798;
t539 = qJDD(2) * t740 + t560;
t559 = -t631 * t701 + t654 * t850 + t705 * t798;
t544 = qJDD(2) * t750 + t559;
t817 = t708 * t819 + qJDD(3);
t585 = (qJDD(2) * t758 - t654) * t703 + t817;
t782 = t572 * t810;
t731 = -qJD(4) * t782 - t539 * t879 - t544 * t846 + t571 * t830 - t585 * t858 - t596 * t775;
t459 = -pkin(11) * t653 - t731;
t509 = -t544 * t702 + t707 * t585;
t556 = qJD(4) * t894 + qJDD(2) * t815 + t797 * t851 + t809 * t818;
t475 = pkin(4) * t557 - pkin(11) * t556 + t509;
t791 = t459 * t711 - t715 * t475;
t880 = qJD(5) * t464 + t791;
t451 = -pkin(5) * t553 + t880;
t576 = t715 * t619 + t711 * t756;
t844 = t708 * t716;
t855 = t703 * t709;
t626 = t705 * t855 + (-t701 * t713 + t705 * t844) * t704;
t627 = t705 * t853 + (t704 * t844 + t855) * t701;
t852 = t704 * t716;
t660 = -t703 * t852 + t708 * t709;
t538 = t627 * t879 + (t626 * t707 + t660 * t702) * t712;
t584 = -t626 * t702 + t660 * t707;
t503 = t538 * t711 - t584 * t715;
t586 = t662 * t705 + t701 * t752;
t506 = t586 * t879 - t712 * t885;
t587 = t664 * t705 + t701 * t737;
t508 = t587 * t879 - t712 * t886;
t542 = t702 * t723 + t707 * t753;
t543 = t702 * t721 + t707 * t738;
t747 = g(1) * (-t508 * t711 + t543 * t715) + g(2) * (-t506 * t711 + t542 * t715) - g(3) * t503;
t883 = t573 * (pkin(5) * t576 + pkin(12) * t573) + t451 + t747;
t789 = t711 * t556 + t715 * t653;
t502 = qJD(5) * t576 + t789;
t500 = qJDD(6) + t502;
t687 = -pkin(5) * t715 - pkin(12) * t711 - pkin(4);
t882 = t573 * (t495 - t614 * (pkin(5) * t711 - pkin(12) * t715)) - t687 * t500;
t622 = -t703 * t654 + t817;
t881 = t699 * (t774 + t874) - t622 * t703;
t876 = pkin(11) * qJD(5);
t501 = qJD(5) * t648 + t715 * t556 - t619 * t828 - t711 * t653;
t710 = sin(qJ(6));
t714 = cos(qJ(6));
t824 = qJD(6) * t714;
t813 = t714 * t501 + t710 * t553 + t614 * t824;
t825 = qJD(6) * t710;
t467 = -t576 * t825 + t813;
t873 = t467 * t710;
t872 = t500 * t710;
t871 = t500 * t714;
t866 = t576 * t710;
t528 = -t714 * t614 + t866;
t870 = t528 * t573;
t530 = t576 * t714 + t614 * t710;
t869 = t530 * t573;
t868 = t574 * t614;
t867 = t576 * t614;
t865 = t894 * t715;
t859 = t702 * t703;
t717 = qJD(2) ^ 2;
t843 = t708 * t717;
t842 = t713 * t717;
t841 = qJDD(1) - g(3);
t840 = -pkin(5) * t621 + qJD(5) * t890 - t892;
t494 = -t712 * t571 + t596 * t811 + t782;
t558 = pkin(4) * t619 - pkin(11) * t894;
t838 = t715 * t494 + t711 * t558;
t829 = qJD(5) * t710;
t827 = qJD(5) * t714;
t823 = t653 * MDP(13);
t814 = t703 * t853;
t749 = t715 * t459 + t711 * t475 - t489 * t828 + t496 * t826;
t450 = pkin(12) * t553 + t749;
t755 = -qJD(4) * t564 - t712 * t539 + t544 * t810 - t571 * t799 + t585 * t811 - t596 * t800;
t460 = pkin(4) * t653 - t755;
t453 = pkin(5) * t502 - pkin(12) * t501 + t460;
t792 = -t710 * t450 + t714 * t453;
t790 = t501 * t710 - t714 * t553;
t788 = t614 * t715;
t787 = t573 * t714;
t665 = -qJ(3) * t862 + t696;
t786 = qJDD(2) * t665 + t559;
t785 = -qJDD(2) * t666 - t560;
t777 = t703 * t802;
t772 = g(1) * t663 + g(2) * t661;
t771 = g(1) * t664 + g(2) * t662;
t548 = t619 * t710 + t714 * t865;
t769 = t714 * t826 - t548;
t520 = t659 * pkin(4) - t724;
t588 = t629 * t711 + t715 * t659;
t589 = t629 * t715 - t659 * t711;
t485 = t588 * pkin(5) - t589 * pkin(12) + t520;
t768 = -pkin(12) * t621 - qJD(6) * t485 + t891;
t477 = pkin(12) * t628 + t890;
t535 = -qJD(5) * t588 + t620 * t715;
t536 = qJD(5) * t589 + t620 * t711;
t767 = -t536 * pkin(5) + t535 * pkin(12) + qJD(6) * t477 - t837;
t765 = -MDP(5) * t705 + MDP(6) * t701;
t764 = t714 * t450 + t710 * t453;
t462 = pkin(12) * t614 + t464;
t488 = -pkin(4) * t756 - t494;
t469 = t574 * pkin(5) - t576 * pkin(12) + t488;
t455 = t462 * t714 + t469 * t710;
t763 = t462 * t710 - t469 * t714;
t463 = -t489 * t711 + t496 * t715;
t504 = t538 * t715 + t584 * t711;
t722 = t626 * t810 - t627 * t712 + t660 * t811;
t480 = t504 * t714 - t710 * t722;
t479 = -t504 * t710 - t714 * t722;
t761 = t516 * t715 - t521 * t711;
t541 = t589 * t714 + t628 * t710;
t540 = t589 * t710 - t714 * t628;
t759 = t594 * t701 - t595 * t705;
t751 = -pkin(11) * t553 + t488 * t614;
t505 = t586 * t712 + t879 * t885;
t507 = t587 * t712 + t879 * t886;
t746 = g(1) * t507 + g(2) * t505 - g(3) * t722;
t745 = -g(1) * t508 - g(2) * t506 - g(3) * t538;
t743 = -t710 * t668 - t714 * t811;
t741 = -t714 * t668 + t710 * t811;
t735 = -g(3) * t852 - t772;
t734 = -g(3) * t853 - t771;
t732 = -t460 + t746;
t461 = -pkin(5) * t614 - t463;
t727 = -pkin(12) * t500 + (t461 + t463) * t573;
t725 = pkin(11) * qJD(6) * t573 - t746;
t719 = (pkin(12) * t619 - qJD(6) * t687 + t838) * t573 + t745;
t643 = qJD(2) * t652;
t642 = qJD(2) * t651;
t639 = -t677 * t703 + t822;
t609 = -t651 * t702 + t707 * t814;
t602 = -t642 * t702 + t707 * t777;
t600 = t663 * t705 - t664 * t861;
t599 = -t663 * t701 - t664 * t850;
t598 = t661 * t705 - t662 * t861;
t597 = -t661 * t701 - t662 * t850;
t570 = t652 * t879 + (t651 * t707 + t702 * t814) * t712;
t569 = -t651 * t810 + t652 * t712 - t754;
t568 = -t599 * t702 + t664 * t856;
t567 = -t597 * t702 + t662 * t856;
t547 = -t714 * t619 + t710 * t865;
t527 = t570 * t715 + t609 * t711;
t525 = t600 * t879 + (t599 * t707 + t664 * t859) * t712;
t524 = -t599 * t810 + t600 * t712 - t664 * t784;
t523 = t598 * t879 + (t597 * t707 + t662 * t859) * t712;
t522 = -t597 * t810 + t598 * t712 - t662 * t784;
t498 = t643 * t879 + (t642 * t707 + t702 * t777) * t712 + t722 * qJD(4);
t497 = -qJD(2) * t754 + qJD(4) * t538 - t642 * t810 + t643 * t712;
t491 = t525 * t715 + t568 * t711;
t490 = t523 * t715 + t567 * t711;
t487 = qJD(6) * t541 + t535 * t710 - t714 * t621;
t486 = -qJD(6) * t540 + t535 * t714 + t621 * t710;
t484 = t508 * t715 + t543 * t711;
t482 = t506 * t715 + t542 * t711;
t476 = -pkin(5) * t628 - t761;
t471 = -pkin(5) * t619 + t494 * t711 - t558 * t715;
t468 = qJD(6) * t530 + t790;
t466 = -qJD(5) * t503 + t498 * t715 + t602 * t711;
t465 = qJD(5) * t504 + t498 * t711 - t602 * t715;
t449 = -qJD(6) * t455 + t792;
t448 = -qJD(6) * t763 + t764;
t1 = [t841 * MDP(1) + (t559 * t626 + t560 * t627 + t594 * t642 + t595 * t643 + t622 * t660 - g(3)) * MDP(8) + (-t497 * t821 + t584 * t557 - t602 * t894 - t653 * t722) * MDP(14) + (-t498 * t821 + t538 * t653 + t584 * t556 + t602 * t619) * MDP(15) + (-t465 * t614 + t497 * t574 - t502 * t722 - t503 * t553) * MDP(21) + (-t466 * t614 + t497 * t576 - t501 * t722 - t504 * t553) * MDP(22) + ((-qJD(6) * t480 - t466 * t710 + t497 * t714) * t573 + t479 * t500 + t465 * t528 + t503 * t468) * MDP(28) + (-(qJD(6) * t479 + t466 * t714 + t497 * t710) * t573 - t480 * t500 + t465 * t530 + t503 * t467) * MDP(29) + ((MDP(5) * t626 - MDP(6) * t627) * qJDD(2) + (t642 * MDP(5) - t643 * MDP(6) + (-MDP(14) * t497 - MDP(15) * t498) * t707) * qJD(2)) * t708 + ((qJDD(2) * t716 - t842) * MDP(3) + (-qJDD(2) * t713 - t716 * t717) * MDP(4) + t765 * t699 * t842) * t704 + (((-t642 * t701 + t643 * t705) * MDP(7) + t639 * MDP(8) * t853) * qJD(2) + ((-t626 * t701 + t627 * t705) * MDP(7) + t765 * t660) * qJDD(2)) * t703; ((-t477 * t710 + t485 * t714) * t500 + t449 * t588 - t763 * t536 + t476 * t468 + t451 * t540 + t461 * t487 - g(1) * (t491 * t714 + t524 * t710) - g(2) * (t490 * t714 + t522 * t710) - g(3) * (t527 * t714 + t569 * t710) + (t710 * t768 - t714 * t767) * t573 + t840 * t528) * MDP(28) + (t761 * t553 - t791 * t628 + t463 * t621 + t520 * t502 + t460 * t588 + t488 * t536 - g(1) * t491 - g(2) * t490 - g(3) * t527 + t892 * t614 + t837 * t574 + (-t464 * t628 - t614 * t890) * qJD(5)) * MDP(21) + (-t890 * t553 - t749 * t628 - t464 * t621 + t520 * t501 + t460 * t589 + t488 * t535 - g(1) * (-t525 * t711 + t568 * t715) - g(2) * (-t523 * t711 + t567 * t715) - g(3) * (-t570 * t711 + t609 * t715) + t891 * t614 + t837 * t576) * MDP(22) + (t559 * t665 + t560 * t666 - t594 * t640 - t595 * t644 + t735 * pkin(2) + (-t622 * pkin(2) + qJ(3) * t734 - qJD(3) * t759 - t639 * t806) * t703) * MDP(8) + (g(1) * t524 + g(2) * t522 + g(3) * t569 + t509 * t629 + t526 * t620 + t577 * t556 + t619 * t757 + t653 * t812 - t659 * t731) * MDP(15) + (t659 * t557 + t653 * t628) * MDP(12) + (-(t477 * t714 + t485 * t710) * t500 - t448 * t588 - t455 * t536 + t476 * t467 + t451 * t541 + t461 * t486 - g(1) * (-t491 * t710 + t524 * t714) - g(2) * (-t490 * t710 + t522 * t714) - g(3) * (-t527 * t710 + t569 * t714) + (t710 * t767 + t714 * t768) * t573 + t840 * t530) * MDP(29) + (-g(1) * t600 - g(2) * t598 - g(3) * t652 + t881 * t705 + (-qJD(2) * t900 + t786) * t708) * MDP(5) + (-t659 * t556 - t653 * t629) * MDP(11) + (-g(1) * t525 - g(2) * t523 - g(3) * t570 + t509 * t628 + t526 * t621 + t577 * t557 - t653 * t724 - t659 * t755 - t757 * t894) * MDP(14) + (-t556 * t628 - t557 * t629 - t619 * t621 + t620 * t894) * MDP(10) + (-t841 * t853 + t771) * MDP(4) + qJDD(2) * MDP(2) + (t620 * MDP(11) - t621 * MDP(12) - t837 * MDP(14) + MDP(15) * t898) * t756 + (t693 + t735) * MDP(3) + (t467 * t541 + t486 * t530) * MDP(23) + (-t467 * t540 - t468 * t541 - t486 * t528 - t487 * t530) * MDP(24) + t659 * t823 + (-g(1) * t599 - g(2) * t597 - g(3) * t651 - t881 * t701 + ((-t705 * t831 + t644) * qJD(2) + t785) * t708) * MDP(6) + (t500 * t588 + t536 * t573) * MDP(27) + (-t468 * t588 - t487 * t573 - t500 * t540 - t528 * t536) * MDP(26) + (t467 * t588 + t486 * t573 + t500 * t541 + t530 * t536) * MDP(25) + (t501 * t589 + t535 * t576) * MDP(16) + (-t501 * t588 - t502 * t589 - t535 * t574 - t536 * t576) * MDP(17) + (t553 * t628 + t614 * t621) * MDP(20) + (-t502 * t628 - t536 * t614 - t553 * t588 - t574 * t621) * MDP(19) + (t501 * t628 + t535 * t614 + t553 * t589 + t576 * t621) * MDP(18) + (t556 * t629 + t619 * t620) * MDP(9) + (qJD(3) * qJD(2) * t893 + ((-qJD(2) * t644 - t785) * t705 + (qJD(2) * t640 - t786) * t701 + t734) * t703) * MDP(7); -t717 * MDP(7) * t893 + (-g(3) * t660 + (-g(1) * t875 + g(2) * t706) * t854 + t817) * MDP(8) + (t707 * t557 + t641 * t756 + (-t653 * t879 - t756 * t830 + t804 * t894) * t702) * MDP(14) + (t707 * t556 + t645 * t756 + (-t619 * t804 + t712 * t653 - t756 * t799) * t702) * MDP(15) + (-t502 * t811 - t667 * t553 - t574 * t887 - t614 * t888) * MDP(21) + (-t501 * t811 - t668 * t553 - t576 * t887 + t614 * t889) * MDP(22) + (t667 * t468 + t743 * t500 + (qJD(6) * t741 + t710 * t889 - t714 * t887) * t573 + t888 * t528) * MDP(28) + (t667 * t467 + t741 * t500 + (-t743 * qJD(6) + t710 * t887 + t714 * t889) * t573 + t888 * t530) * MDP(29) + ((-qJDD(2) * t705 + t701 * t843) * MDP(5) + (qJDD(2) * t701 + t705 * t843) * MDP(6) + (qJD(2) * t759 - t654 + t772) * MDP(8)) * t703; -t894 ^ 2 * MDP(10) + (-t756 * t894 + t556) * MDP(11) - t557 * MDP(12) - t823 + (t495 * t756 + t746 + t755) * MDP(14) + (t494 * t756 - t526 * t894 + t731 - t745) * MDP(15) + (t501 * t711 + t576 * t788) * MDP(16) + ((t501 - t868) * t715 + (-t502 - t867) * t711) * MDP(17) + (t553 * t711 + t614 * t788) * MDP(18) + (-t614 ^ 2 * t711 + t553 * t715) * MDP(19) + (-pkin(4) * t502 - t495 * t574 + (t494 * t614 + t751) * t711 + ((-t558 - t876) * t614 + t732) * t715) * MDP(21) + (-pkin(4) * t501 + t838 * t614 - t495 * t576 + t751 * t715 + (t614 * t876 - t732) * t711) * MDP(22) + (t467 * t711 * t714 + (-t711 * t825 + t769) * t530) * MDP(23) + (t528 * t548 + t530 * t547 + (-t528 * t714 - t530 * t710) * t826 + (-t873 - t468 * t714 + (t528 * t710 - t530 * t714) * qJD(6)) * t711) * MDP(24) + (-t467 * t715 + t769 * t573 + (t530 * t614 - t573 * t825 + t871) * t711) * MDP(25) + (t468 * t715 + (-t710 * t826 + t547) * t573 + (-t528 * t614 - t573 * t824 - t872) * t711) * MDP(26) + (t573 * t614 * t711 - t500 * t715) * MDP(27) + (-t461 * t547 - t471 * t528 - t882 * t714 + t719 * t710 + (t461 * t829 - t449 + (qJD(5) * t528 - t872) * pkin(11) - t725 * t714) * t715 + (t461 * t824 + t451 * t710 - t614 * t763 + (t573 * t829 + t468) * pkin(11)) * t711) * MDP(28) + (-t461 * t548 - t471 * t530 + t882 * t710 + t719 * t714 + (t461 * t827 + t448 + (qJD(5) * t530 - t871) * pkin(11) + t725 * t710) * t715 + (-t461 * t825 + t451 * t714 - t614 * t455 + (t573 * t827 + t467) * pkin(11)) * t711) * MDP(29) + (MDP(10) * t619 + MDP(12) * t756 - t526 * MDP(14) - t576 * MDP(18) + t574 * MDP(19) - t614 * MDP(20) - t463 * MDP(21) + t464 * MDP(22) - MDP(9) * t894) * t619; -t574 ^ 2 * MDP(17) + (t501 + t868) * MDP(18) + (-t789 + t867) * MDP(19) + t553 * MDP(20) + (t464 * t614 - t747 - t880) * MDP(21) + (g(1) * t484 + g(2) * t482 + g(3) * t504 + t463 * t614 + t488 * t574 - t749) * MDP(22) + (t530 * t787 + t873) * MDP(23) + ((t467 - t870) * t714 + (-t468 - t869) * t710) * MDP(24) + (t573 * t787 + t872) * MDP(25) + (-t573 ^ 2 * t710 + t871) * MDP(26) + (-pkin(5) * t468 - t464 * t528 + t727 * t710 - t714 * t883) * MDP(28) + (-pkin(5) * t467 - t464 * t530 + t710 * t883 + t727 * t714) * MDP(29) + (MDP(16) * t574 + MDP(17) * t576 - MDP(19) * qJD(5) - MDP(21) * t488 - MDP(25) * t530 + MDP(26) * t528 - MDP(27) * t573 + MDP(28) * t763 + MDP(29) * t455) * t576; t530 * t528 * MDP(23) + (-t528 ^ 2 + t530 ^ 2) * MDP(24) + (t813 + t870) * MDP(25) + (-t790 + t869) * MDP(26) + t500 * MDP(27) + (t455 * t573 - t461 * t530 - g(1) * (-t484 * t710 + t507 * t714) - g(2) * (-t482 * t710 + t505 * t714) - g(3) * t479 + t792) * MDP(28) + (-t763 * t573 + t461 * t528 - g(1) * (-t484 * t714 - t507 * t710) - g(2) * (-t482 * t714 - t505 * t710) + g(3) * t480 - t764) * MDP(29) + (-MDP(25) * t866 - MDP(26) * t530 - MDP(28) * t455 + MDP(29) * t763) * qJD(6);];
tau  = t1;
