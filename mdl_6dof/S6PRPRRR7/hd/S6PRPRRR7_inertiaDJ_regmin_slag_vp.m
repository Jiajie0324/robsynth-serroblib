% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6PRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x29]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRRR7_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR7_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR7_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRPRRR7_inertiaDJ_regmin_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:56:04
% EndTime: 2019-03-08 20:56:12
% DurationCPUTime: 3.16s
% Computational Cost: add. (4311->296), mult. (13592->571), div. (0->0), fcn. (14936->16), ass. (0->168)
t104 = sin(pkin(14));
t106 = sin(pkin(7));
t108 = cos(pkin(14));
t110 = cos(pkin(7));
t114 = sin(qJ(4));
t109 = cos(pkin(8));
t118 = cos(qJ(4));
t190 = t109 * t118;
t105 = sin(pkin(8));
t194 = t105 * t118;
t209 = t106 * (-t104 * t114 + t108 * t190) + t110 * t194;
t113 = sin(qJ(5));
t208 = -0.4e1 * t113;
t116 = cos(qJ(6));
t102 = t116 ^ 2;
t112 = sin(qJ(6));
t186 = t112 ^ 2 - t102;
t155 = t186 * qJD(6);
t107 = sin(pkin(6));
t115 = sin(qJ(2));
t119 = cos(qJ(2));
t188 = t110 * t119;
t111 = cos(pkin(6));
t192 = t106 * t111;
t61 = t108 * t192 + (-t104 * t115 + t108 * t188) * t107;
t80 = -t106 * t107 * t119 + t111 * t110;
t143 = t105 * t80 + t109 * t61;
t62 = t107 * t115 * t108 + (t107 * t188 + t192) * t104;
t206 = -t62 * t114 + t143 * t118;
t117 = cos(qJ(5));
t197 = t104 * t106;
t204 = pkin(2) * t110;
t97 = t108 * t204;
t66 = t110 * pkin(3) + t97 + (-pkin(10) * t109 - qJ(3)) * t197;
t75 = (-pkin(10) * t104 * t105 - pkin(3) * t108 - pkin(2)) * t106;
t45 = -t105 * t66 + t109 * t75;
t191 = t108 * t114;
t195 = t105 * t114;
t64 = t110 * t195 + (t104 * t118 + t109 * t191) * t106;
t31 = -pkin(4) * t209 - pkin(11) * t64 + t45;
t201 = t109 * t66;
t142 = t105 * t75 + t201;
t193 = t106 * t108;
t83 = qJ(3) * t193 + t104 * t204;
t59 = (t105 * t110 + t109 * t193) * pkin(10) + t83;
t121 = t142 * t114 + t118 * t59;
t79 = t105 * t193 - t109 * t110;
t34 = -t79 * pkin(11) + t121;
t138 = t113 * t31 + t117 * t34;
t183 = qJD(3) * t106;
t165 = t104 * t183;
t149 = t109 * t165;
t181 = qJD(4) * t118;
t159 = t105 * t181;
t164 = t108 * t183;
t27 = -t181 * t201 - t75 * t159 - t118 * t164 + (qJD(4) * t59 + t149) * t114;
t150 = t105 * t165;
t56 = t209 * qJD(4);
t57 = t64 * qJD(4);
t42 = pkin(4) * t57 - pkin(11) * t56 + t150;
t10 = -t138 * qJD(5) + t113 * t27 + t117 * t42;
t205 = 0.2e1 * t57;
t203 = pkin(11) * t112;
t202 = pkin(11) * t113;
t47 = t113 * t64 + t117 * t79;
t35 = -qJD(5) * t47 + t117 * t56;
t48 = -t113 * t79 + t117 * t64;
t39 = t112 * t48 + t116 * t209;
t20 = -t39 * qJD(6) + t112 * t57 + t116 * t35;
t200 = t20 * t112;
t199 = t20 * t116;
t189 = t110 * t115;
t187 = t116 * t117;
t101 = t113 ^ 2;
t185 = -t117 ^ 2 + t101;
t184 = qJD(2) * t107;
t182 = qJD(4) * t114;
t180 = qJD(5) * t112;
t179 = qJD(5) * t113;
t178 = qJD(5) * t116;
t177 = qJD(5) * t117;
t176 = qJD(5) * t118;
t175 = qJD(6) * t112;
t174 = qJD(6) * t116;
t173 = qJD(6) * t117;
t172 = -0.2e1 * pkin(4) * qJD(5);
t171 = -0.2e1 * pkin(5) * qJD(6);
t170 = t117 * t203;
t169 = pkin(11) * t187;
t168 = t113 * t195;
t163 = t116 * t177;
t162 = t112 * t173;
t161 = t116 * t173;
t160 = t105 * t182;
t158 = t115 * t184;
t157 = t112 * t174;
t156 = t113 * t177;
t154 = t185 * qJD(5);
t153 = -0.2e1 * t110 * t183;
t152 = 0.2e1 * t156;
t99 = t106 ^ 2;
t151 = t99 * t158;
t148 = t106 * t158;
t147 = t112 * t163;
t36 = t48 * qJD(5) + t113 * t56;
t146 = t36 * pkin(5) - t35 * pkin(12);
t145 = -pkin(5) * t117 - pkin(12) * t113;
t144 = pkin(5) * t113 - pkin(12) * t117;
t15 = -pkin(12) * t209 + t138;
t33 = t79 * pkin(4) + t114 * t59 - t142 * t118;
t19 = t47 * pkin(5) - t48 * pkin(12) + t33;
t6 = t112 * t19 + t116 * t15;
t38 = t143 * t114 + t62 * t118;
t46 = -t105 * t61 + t109 * t80;
t25 = t113 * t46 + t117 * t38;
t17 = -t112 * t206 + t116 * t25;
t16 = -t112 * t25 - t116 * t206;
t40 = -t112 * t209 + t116 * t48;
t141 = -t112 * t40 - t116 * t39;
t139 = -t113 * t34 + t117 * t31;
t24 = t113 * t38 - t117 * t46;
t137 = t105 * t148;
t92 = -pkin(4) + t145;
t77 = t112 * t92 + t169;
t14 = pkin(5) * t209 - t139;
t8 = -t57 * pkin(5) - t10;
t136 = t8 * t112 + t14 * t174;
t135 = -t8 * t116 + t14 * t175;
t134 = t113 * t57 - t177 * t209;
t133 = -t117 * t57 - t179 * t209;
t73 = (-t104 * t119 - t108 * t189) * t184;
t74 = (-t104 * t189 + t108 * t119) * t184;
t23 = t74 * t118 + (t109 * t73 + t137) * t114 + t206 * qJD(4);
t52 = -t105 * t73 + t109 * t148;
t11 = t25 * qJD(5) + t23 * t113 - t52 * t117;
t132 = t11 * t112 + t24 * t174;
t131 = -t11 * t116 + t24 * t175;
t130 = t112 * t36 + t47 * t174;
t129 = -t116 * t36 + t47 * t175;
t85 = t109 * t113 + t117 * t195;
t69 = t85 * qJD(5) + t113 * t159;
t84 = -t109 * t117 + t168;
t128 = t112 * t69 + t84 * t174;
t127 = -t116 * t69 + t84 * t175;
t126 = t112 * t85 + t116 * t194;
t125 = t112 * t194 - t116 * t85;
t124 = t144 * t112;
t9 = -t113 * t42 + t117 * t27 - t31 * t177 + t34 * t179;
t123 = t113 * t178 + t162;
t122 = -pkin(12) * t57 + t9;
t120 = t121 * qJD(4);
t28 = (t104 * t190 + t191) * t183 + t120;
t82 = -qJ(3) * t197 + t97;
t76 = t116 * t92 - t170;
t68 = qJD(5) * t168 - t109 * t177 - t117 * t159;
t50 = -t77 * qJD(6) + (t112 * t202 + t116 * t144) * qJD(5);
t49 = t123 * pkin(11) - qJD(5) * t124 - t92 * t174;
t44 = t125 * qJD(6) + t112 * t68 + t116 * t160;
t43 = t126 * qJD(6) - t112 * t160 + t116 * t68;
t22 = t38 * qJD(4) + t74 * t114 - t118 * t137 - t73 * t190;
t21 = qJD(6) * t40 + t112 * t35 - t116 * t57;
t12 = -qJD(5) * t24 + t52 * t113 + t23 * t117;
t5 = -t112 * t15 + t116 * t19;
t4 = t16 * qJD(6) + t22 * t112 + t12 * t116;
t3 = -t17 * qJD(6) - t12 * t112 + t22 * t116;
t2 = -t6 * qJD(6) + t112 * t122 + (t114 * t164 + t118 * t149 + t120 + t146) * t116;
t1 = t15 * t175 - t112 * (t146 + t28) - t19 * t174 + t116 * t122;
t7 = [0, 0, 0, 0, 0, 0, 0, 0.2e1 * t80 * t148 + 0.2e1 * t61 * t73 + 0.2e1 * t62 * t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t158, -t119 * t184, -t108 * t151 + t110 * t73, t104 * t151 - t110 * t74 (-t104 * t73 + t108 * t74) * t106, -pkin(2) * t151 + t73 * t82 + t74 * t83 + (-t104 * t61 + t108 * t62) * t183, 0, 0, 0, 0, 0, -t209 * t52 + t22 * t79 + t46 * t57, t23 * t79 + t46 * t56 + t52 * t64, 0, 0, 0, 0, 0, t11 * t209 - t206 * t36 + t22 * t47 - t24 * t57, t12 * t209 - t206 * t35 + t22 * t48 - t25 * t57, 0, 0, 0, 0, 0, t11 * t39 + t16 * t36 + t21 * t24 + t3 * t47, t11 * t40 - t17 * t36 + t20 * t24 - t4 * t47; 0, 0, 0, 0, t104 * t153, t108 * t153, 0.2e1 * (t104 ^ 2 + t108 ^ 2) * t99 * qJD(3), 0.2e1 * (-t104 * t82 + t108 * t83) * t183, 0.2e1 * t64 * t56, 0.2e1 * t209 * t56 - 0.2e1 * t57 * t64, -0.2e1 * t79 * t56, t79 * t205, 0, -0.2e1 * t150 * t209 + 0.2e1 * t28 * t79 + 0.2e1 * t45 * t57, 0.2e1 * t64 * t150 - 0.2e1 * t27 * t79 + 0.2e1 * t45 * t56, 0.2e1 * t48 * t35, -0.2e1 * t35 * t47 - 0.2e1 * t36 * t48, -0.2e1 * t209 * t35 + 0.2e1 * t48 * t57, 0.2e1 * t209 * t36 - 0.2e1 * t47 * t57, -t209 * t205, -0.2e1 * t10 * t209 + 0.2e1 * t139 * t57 + 0.2e1 * t28 * t47 + 0.2e1 * t33 * t36, -0.2e1 * t138 * t57 - 0.2e1 * t209 * t9 + 0.2e1 * t28 * t48 + 0.2e1 * t33 * t35, 0.2e1 * t40 * t20, -0.2e1 * t20 * t39 - 0.2e1 * t21 * t40, 0.2e1 * t20 * t47 + 0.2e1 * t36 * t40, -0.2e1 * t21 * t47 - 0.2e1 * t36 * t39, 0.2e1 * t47 * t36, 0.2e1 * t14 * t21 + 0.2e1 * t2 * t47 + 0.2e1 * t36 * t5 + 0.2e1 * t39 * t8, 0.2e1 * t1 * t47 + 0.2e1 * t14 * t20 - 0.2e1 * t36 * t6 + 0.2e1 * t40 * t8; 0, 0, 0, 0, 0, 0, 0, t148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109 * t57 + t79 * t160, t109 * t56 + t79 * t159, 0, 0, 0, 0, 0, -t84 * t57 + t69 * t209 + (-t118 * t36 + t182 * t47) * t105, -t85 * t57 - t68 * t209 + (-t118 * t35 + t182 * t48) * t105, 0, 0, 0, 0, 0, -t126 * t36 + t21 * t84 + t39 * t69 + t44 * t47, t125 * t36 + t20 * t84 + t40 * t69 + t43 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t23, 0, 0, 0, 0, 0, -t117 * t22 - t179 * t206, t113 * t22 - t177 * t206, 0, 0, 0, 0, 0 (t180 * t24 - t3) * t117 + (qJD(5) * t16 + t132) * t113 (t178 * t24 + t4) * t117 + (-qJD(5) * t17 - t131) * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t57, 0, -t28, t27, t113 * t35 + t177 * t48, -t113 * t36 + t35 * t117 + (-t113 * t48 - t117 * t47) * qJD(5), t134, -t133, 0, -pkin(4) * t36 - pkin(11) * t134 - t28 * t117 + t179 * t33, -pkin(4) * t35 + pkin(11) * t133 + t28 * t113 + t177 * t33, t40 * t163 + (-t175 * t40 + t199) * t113, t141 * t177 + (-t200 - t116 * t21 + (t112 * t39 - t116 * t40) * qJD(6)) * t113 (t178 * t47 - t20) * t117 + (qJD(5) * t40 - t129) * t113 (-t180 * t47 + t21) * t117 + (-qJD(5) * t39 - t130) * t113, -t117 * t36 + t179 * t47, t36 * t76 + t47 * t50 + (-t2 + (pkin(11) * t39 + t112 * t14) * qJD(5)) * t117 + (pkin(11) * t21 + qJD(5) * t5 + t136) * t113, -t77 * t36 + t49 * t47 + (-t1 + (pkin(11) * t40 + t116 * t14) * qJD(5)) * t117 + (pkin(11) * t20 - qJD(5) * t6 - t135) * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t160, -t159, 0, 0, 0, 0, 0 (-t113 * t176 - t117 * t182) * t105 (t113 * t182 - t117 * t176) * t105, 0, 0, 0, 0, 0 (t180 * t84 - t44) * t117 + (-qJD(5) * t126 + t128) * t113 (t178 * t84 - t43) * t117 + (qJD(5) * t125 - t127) * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, -0.2e1 * t154, 0, 0, 0, t113 * t172, t117 * t172, -0.2e1 * t101 * t157 + 0.2e1 * t102 * t156, 0.2e1 * t101 * t155 + t147 * t208, 0.2e1 * t113 * t162 + 0.2e1 * t178 * t185, -0.2e1 * t112 * t154 + 0.2e1 * t113 * t161, -0.2e1 * t156, 0.2e1 * t76 * t179 - 0.2e1 * t50 * t117 + 0.2e1 * (t101 * t174 + t112 * t152) * pkin(11), -0.2e1 * t77 * t179 - 0.2e1 * t49 * t117 + 0.2e1 * (-t101 * t175 + t116 * t152) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, -t12, 0, 0, 0, 0, 0, t131, t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, -t36, t57, t10, t9, t174 * t40 + t200, qJD(6) * t141 - t112 * t21 + t199, t130, -t129, 0, -pkin(5) * t21 - pkin(12) * t130 + t135, -pkin(5) * t20 + pkin(12) * t129 + t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t68, 0, 0, 0, 0, 0, t127, t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, -t179, 0, -pkin(11) * t177, pkin(11) * t179, -t113 * t155 + t147, t157 * t208 - t177 * t186, t112 * t179 - t161, t123, 0 (pkin(12) * t187 + (-pkin(5) * t116 + t203) * t113) * qJD(6) + (t112 * t145 - t169) * qJD(5) (t116 * t202 + t124) * qJD(6) + (t116 * t145 + t170) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, -0.2e1 * t155, 0, 0, 0, t112 * t171, t116 * t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t21, t36, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113 * t175 + t163, -t112 * t177 - t113 * t174, t179, t50, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174, -t175, 0, -pkin(12) * t174, pkin(12) * t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
