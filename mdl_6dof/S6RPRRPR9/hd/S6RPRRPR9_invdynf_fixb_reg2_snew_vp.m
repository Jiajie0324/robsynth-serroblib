% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 23:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR9_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 23:34:26
% EndTime: 2019-05-05 23:34:51
% DurationCPUTime: 26.03s
% Computational Cost: add. (306719->425), mult. (965693->689), div. (0->0), fcn. (836982->16), ass. (0->372)
t3049 = sin(pkin(12));
t3050 = sin(pkin(7));
t3054 = cos(pkin(7));
t3051 = sin(pkin(6));
t3053 = cos(pkin(12));
t3055 = cos(pkin(6));
t3059 = sin(qJ(1));
t3063 = cos(qJ(1));
t3041 = t3059 * g(1) - t3063 * g(2);
t3064 = qJD(1) ^ 2;
t3144 = t3051 * t3064;
t3077 = -qJ(2) * t3144 - t3041;
t3160 = pkin(9) * t3049;
t3080 = -pkin(2) * t3053 - t3050 * t3160;
t3128 = -t3055 * g(3) + qJDD(2);
t3146 = t3050 * t3055;
t3044 = t3049 ^ 2;
t3046 = t3053 ^ 2;
t3174 = -t3044 - t3046;
t3067 = ((-pkin(1) + t3080) * qJDD(1) + t3077) * t3051 + (t3049 * t3055 * pkin(2) + (t3051 * t3054 * t3174 - t3053 * t3146) * pkin(9)) * t3144 + t3128;
t3147 = t3049 * t3051;
t3136 = t3050 * t3147;
t3145 = t3051 * t3053;
t3143 = t3053 * t3054;
t3173 = t3051 * t3143 + t3146;
t3068 = (pkin(2) * t3145 * t3147 + (t3055 * t3173 + t3136 * t3147) * pkin(9)) * qJD(1);
t3074 = qJDD(1) * pkin(1) - t3077;
t3072 = t3055 * t3074;
t3070 = (-t3051 * g(3) + t3072) * t3053;
t3042 = -t3063 * g(1) - t3059 * g(2);
t3078 = t3064 * pkin(1) - t3042;
t3138 = qJDD(1) * t3055;
t3137 = pkin(2) * t3138;
t3139 = qJDD(1) * t3051;
t3177 = t3054 * (t3137 + t3070 + ((-pkin(9) * t3054 - qJ(2)) * t3139 + t3078) * t3049 + (-0.2e1 * qJD(2) * t3147 + t3068) * qJD(1)) + t3050 * t3067;
t3129 = t3054 * t3139;
t3176 = t3050 * t3138 + t3053 * t3129;
t3058 = sin(qJ(3));
t3062 = cos(qJ(3));
t3009 = (t3058 * t3146 + (t3049 * t3062 + t3058 * t3143) * t3051) * qJD(1);
t3142 = t3054 * t3055;
t3079 = t3050 * t3145 - t3142;
t3017 = qJD(1) * t3079 - qJD(3);
t3057 = sin(qJ(4));
t3061 = cos(qJ(4));
t2995 = t3009 * t3057 + t3061 * t3017;
t2997 = t3009 * t3061 - t3017 * t3057;
t3048 = sin(pkin(13));
t3052 = cos(pkin(13));
t2963 = t3052 * t2995 + t2997 * t3048;
t2962 = qJD(6) + t2963;
t3175 = qJD(6) + t2962;
t3076 = -qJDD(1) * t3079 + qJDD(3);
t2965 = -t2995 * t3048 + t2997 * t3052;
t3007 = (t3058 * t3147 - t3062 * t3173) * qJD(1);
t3006 = qJD(4) + t3007;
t3056 = sin(qJ(6));
t3060 = cos(qJ(6));
t2943 = t2965 * t3056 - t3060 * t3006;
t3172 = t2943 ^ 2;
t2945 = t2965 * t3060 + t3006 * t3056;
t3171 = t2945 ^ 2;
t3170 = t2962 ^ 2;
t3169 = t2963 ^ 2;
t3168 = t2965 ^ 2;
t3167 = t2995 ^ 2;
t3166 = t2997 ^ 2;
t3165 = t3006 ^ 2;
t3164 = t3007 ^ 2;
t3163 = t3009 ^ 2;
t3162 = t3017 ^ 2;
t3047 = t3055 ^ 2;
t3161 = -2 * qJD(5);
t3159 = qJD(1) * qJD(2);
t3157 = t2943 * t2945;
t3156 = t2963 * t2965;
t3155 = t2965 * t3006;
t3154 = t2995 * t2997;
t3153 = t3006 * t2963;
t3152 = t3006 * t2995;
t3151 = t3007 * t3017;
t3150 = t3009 * t3007;
t3149 = t3009 * t3017;
t3045 = t3051 ^ 2;
t3148 = t3045 * t3064;
t3141 = qJD(4) - t3006;
t3140 = qJD(6) - t2962;
t3073 = qJ(2) * t3139 - t3078;
t2994 = -g(3) * t3147 + t3049 * t3072 + t3053 * t3073 + 0.2e1 * t3145 * t3159;
t2958 = t3173 * qJDD(1) * pkin(9) + (-t3047 * pkin(2) + (t3080 * t3145 + t3142 * t3160) * t3051) * t3064 + t2994;
t2914 = t3062 * t2958 + t3058 * t3177;
t2982 = pkin(3) * t3007 - pkin(10) * t3009;
t2898 = -pkin(3) * t3162 + pkin(10) * t3076 - t3007 * t2982 + t2914;
t2936 = -t3050 * (-g(3) * t3145 - t3049 * t3073 + t3053 * t3072 - t3129 * t3160 + t3137) + t3054 * t3067 + (0.2e1 * qJD(2) * t3136 - t3050 * t3068) * qJD(1);
t3132 = t3049 * t3139;
t3121 = -t3009 * qJD(3) - t3058 * t3132 + t3062 * t3176;
t2966 = -t3121 - t3149;
t2986 = -t3007 * qJD(3) + t3058 * t3176 + t3062 * t3132;
t3123 = -t2986 - t3151;
t2904 = pkin(3) * t2966 + pkin(10) * t3123 + t2936;
t2865 = t3061 * t2898 + t3057 * t2904;
t3133 = t3055 * t3144;
t3122 = t3057 * t2986 - t3061 * t3076;
t2951 = -qJD(4) * t2997 - t3122;
t2974 = pkin(4) * t3006 - qJ(5) * t2997;
t2853 = -pkin(4) * t3167 + qJ(5) * t2951 - t2974 * t3006 + t2865;
t2864 = -t3057 * t2898 + t3061 * t2904;
t3081 = qJDD(4) - t3121;
t2938 = t3081 - t3154;
t3071 = -t3061 * t2986 - t3057 * t3076;
t2952 = -t2995 * qJD(4) - t3071;
t3069 = (-t2952 - t3152) * qJ(5) + t2938 * pkin(4) + t2864;
t2820 = t3052 * t2853 + t2963 * t3161 + t3048 * t3069;
t3130 = t3053 * t3139;
t3127 = t3048 * t2853 - t3052 * t3069;
t2923 = t2951 * t3048 + t2952 * t3052;
t3126 = -t2923 + t3153;
t3125 = -t3056 * t2923 + t3060 * t3081;
t3124 = -t3052 * t2951 + t2952 * t3048;
t3119 = t3058 * t2958 - t3062 * t3177;
t3118 = -qJDD(6) - t3124;
t2930 = pkin(5) * t2963 - pkin(11) * t2965;
t2814 = -pkin(5) * t3165 + pkin(11) * t3081 - t2963 * t2930 + t2820;
t2897 = -t3076 * pkin(3) - t3162 * pkin(10) + t3009 * t2982 + t3119;
t2876 = -t2951 * pkin(4) - t3167 * qJ(5) + t2997 * t2974 + qJDD(5) + t2897;
t2905 = t3124 + t3155;
t2842 = pkin(5) * t2905 + pkin(11) * t3126 + t2876;
t2797 = -t2814 * t3056 + t2842 * t3060;
t2798 = t2814 * t3060 + t2842 * t3056;
t2783 = -t2797 * t3056 + t2798 * t3060;
t2813 = -t3081 * pkin(5) - t3165 * pkin(11) + ((2 * qJD(5)) + t2930) * t2965 + t3127;
t2770 = t2783 * t3048 - t2813 * t3052;
t2771 = t2783 * t3052 + t2813 * t3048;
t2758 = t2770 * t3061 + t2771 * t3057;
t2759 = -t2770 * t3057 + t2771 * t3061;
t2782 = t2797 * t3060 + t2798 * t3056;
t3116 = t2759 * t3058 - t2782 * t3062;
t2753 = -t3050 * t2758 + t3054 * t3116;
t2756 = t2759 * t3062 + t2782 * t3058;
t3117 = t2753 * t3053 + t2756 * t3049;
t2819 = t2965 * t3161 - t3127;
t2795 = t2819 * t3052 + t2820 * t3048;
t2796 = -t2819 * t3048 + t2820 * t3052;
t2774 = t2795 * t3061 + t2796 * t3057;
t2775 = -t2795 * t3057 + t2796 * t3061;
t3114 = t2775 * t3058 - t2876 * t3062;
t2763 = -t3050 * t2774 + t3054 * t3114;
t2773 = t2775 * t3062 + t2876 * t3058;
t3115 = t2763 * t3053 + t2773 * t3049;
t2878 = -t2945 * t3140 + t3125;
t3075 = -t3060 * t2923 - t3056 * t3081;
t2880 = t2943 * t3140 + t3075;
t2846 = t2878 * t3060 - t2880 * t3056;
t2901 = -t3171 - t3172;
t2831 = t2846 * t3048 - t2901 * t3052;
t2832 = t2846 * t3052 + t2901 * t3048;
t2804 = t2831 * t3061 + t2832 * t3057;
t2805 = -t2831 * t3057 + t2832 * t3061;
t2845 = t2878 * t3056 + t2880 * t3060;
t3109 = t2805 * t3058 - t2845 * t3062;
t2781 = -t3050 * t2804 + t3054 * t3109;
t2794 = t2805 * t3062 + t2845 * t3058;
t3113 = t2781 * t3053 + t2794 * t3049;
t2887 = -t3118 - t3157;
t2910 = -t3170 - t3172;
t2859 = -t2887 * t3056 + t2910 * t3060;
t2877 = t2945 * t3175 - t3125;
t2835 = t2859 * t3048 - t2877 * t3052;
t2836 = t2859 * t3052 + t2877 * t3048;
t2809 = t2835 * t3061 + t2836 * t3057;
t2810 = -t2835 * t3057 + t2836 * t3061;
t2858 = t2887 * t3060 + t2910 * t3056;
t3107 = t2810 * t3058 - t2858 * t3062;
t2785 = -t3050 * t2809 + t3054 * t3107;
t2799 = t2810 * t3062 + t2858 * t3058;
t3112 = t2785 * t3053 + t2799 * t3049;
t2888 = t3118 - t3157;
t2911 = -t3170 - t3171;
t2861 = t2888 * t3060 - t2911 * t3056;
t2879 = -t2943 * t3175 - t3075;
t2837 = t2861 * t3048 - t2879 * t3052;
t2838 = t2861 * t3052 + t2879 * t3048;
t2811 = t2837 * t3061 + t2838 * t3057;
t2812 = -t2837 * t3057 + t2838 * t3061;
t2860 = t2888 * t3056 + t2911 * t3060;
t3106 = t2812 * t3058 - t2860 * t3062;
t2787 = -t3050 * t2811 + t3054 * t3106;
t2800 = t2812 * t3062 + t2860 * t3058;
t3111 = t2787 * t3053 + t2800 * t3049;
t2833 = t2864 * t3061 + t2865 * t3057;
t2834 = -t2864 * t3057 + t2865 * t3061;
t3103 = t2834 * t3058 - t2897 * t3062;
t2803 = -t3050 * t2833 + t3054 * t3103;
t2827 = t2834 * t3062 + t2897 * t3058;
t3110 = t2803 * t3053 + t2827 * t3049;
t2906 = -t3124 + t3155;
t2908 = -t2923 - t3153;
t2870 = t2906 * t3048 + t2908 * t3052;
t2871 = t2906 * t3052 - t2908 * t3048;
t2839 = t2870 * t3061 + t2871 * t3057;
t2840 = -t2870 * t3057 + t2871 * t3061;
t2912 = -t3168 - t3169;
t3102 = t2840 * t3058 - t2912 * t3062;
t2807 = -t3050 * t2839 + t3054 * t3102;
t2830 = t2840 * t3062 + t2912 * t3058;
t3108 = t2807 * t3053 + t2830 * t3049;
t2921 = t3081 - t3156;
t2929 = -t3165 - t3169;
t2889 = t2921 * t3052 + t2929 * t3048;
t2890 = -t2921 * t3048 + t2929 * t3052;
t2854 = t2889 * t3061 + t2890 * t3057;
t2855 = -t2889 * t3057 + t2890 * t3061;
t3101 = t2855 * t3058 - t2905 * t3062;
t2818 = -t3050 * t2854 + t3054 * t3101;
t2844 = t2855 * t3062 + t2905 * t3058;
t3105 = t2818 * t3053 + t2844 * t3049;
t2922 = -t3081 - t3156;
t2937 = -t3165 - t3168;
t2894 = t2922 * t3048 + t2937 * t3052;
t2895 = t2922 * t3052 - t2937 * t3048;
t2862 = t2894 * t3061 + t2895 * t3057;
t2863 = -t2894 * t3057 + t2895 * t3061;
t3099 = t2863 * t3058 + t3062 * t3126;
t2824 = -t3050 * t2862 + t3054 * t3099;
t2848 = t2863 * t3062 - t3058 * t3126;
t3104 = t2824 * t3053 + t2848 * t3049;
t2932 = -t2997 * t3141 - t3122;
t2934 = t2995 * t3141 + t3071;
t2899 = t2932 * t3057 + t2934 * t3061;
t2900 = t2932 * t3061 - t2934 * t3057;
t2941 = -t3166 - t3167;
t3095 = t2900 * t3058 - t2941 * t3062;
t2857 = -t3050 * t2899 + t3054 * t3095;
t2886 = t2900 * t3062 + t2941 * t3058;
t3100 = t2857 * t3053 + t2886 * t3049;
t3094 = t2914 * t3058 - t3062 * t3119;
t2867 = -t3050 * t2936 + t3054 * t3094;
t2885 = t2914 * t3062 + t3058 * t3119;
t3098 = t2867 * t3053 + t2885 * t3049;
t2953 = -t3165 - t3167;
t2917 = t2938 * t3061 + t2953 * t3057;
t2918 = -t2938 * t3057 + t2953 * t3061;
t2931 = (qJD(4) + t3006) * t2997 + t3122;
t3092 = t2918 * t3058 - t2931 * t3062;
t2873 = -t3050 * t2917 + t3054 * t3092;
t2892 = t2918 * t3062 + t2931 * t3058;
t3097 = t2873 * t3053 + t2892 * t3049;
t2939 = -t3081 - t3154;
t2957 = -t3165 - t3166;
t2919 = t2939 * t3057 + t2957 * t3061;
t2920 = t2939 * t3061 - t2957 * t3057;
t2933 = t2952 - t3152;
t3091 = t2920 * t3058 - t2933 * t3062;
t2875 = -t3050 * t2919 + t3054 * t3091;
t2893 = t2920 * t3062 + t2933 * t3058;
t3096 = t2875 * t3053 + t2893 * t3049;
t2973 = -t3163 - t3164;
t2967 = t3121 - t3149;
t2969 = -t2986 + t3151;
t3088 = t2967 * t3058 + t2969 * t3062;
t2916 = -t3050 * t2973 + t3054 * t3088;
t2935 = t2967 * t3062 - t2969 * t3058;
t3093 = t2916 * t3053 + t2935 * t3049;
t2976 = -t3162 - t3164;
t2978 = t3076 - t3150;
t3087 = t2976 * t3058 + t2978 * t3062;
t2925 = -t3050 * t2966 + t3054 * t3087;
t2940 = t2976 * t3062 - t2978 * t3058;
t3090 = t2925 * t3053 + t2940 * t3049;
t2977 = -t3076 - t3150;
t2979 = -t3162 - t3163;
t3086 = t2977 * t3058 + t2979 * t3062;
t2927 = t3050 * t3123 + t3054 * t3086;
t2942 = t2977 * t3062 - t2979 * t3058;
t3089 = t2927 * t3053 + t2942 * t3049;
t2993 = t3070 + ((-qJ(2) * qJDD(1) - 0.2e1 * t3159) * t3051 + t3078) * t3049;
t3085 = t2993 * t3053 + t2994 * t3049;
t3032 = t3053 * t3133;
t3019 = t3032 - t3132;
t3031 = t3049 * t3133;
t3020 = t3031 + t3130;
t3084 = t3019 * t3053 + t3020 * t3049;
t3030 = t3053 * t3049 * t3148;
t3022 = t3030 + t3138;
t3026 = (-t3045 * t3046 - t3047) * t3064;
t3083 = t3022 * t3053 + t3026 * t3049;
t3023 = t3030 - t3138;
t3025 = (-t3044 * t3045 - t3047) * t3064;
t3082 = t3023 * t3049 + t3025 * t3053;
t3039 = -qJDD(1) * t3059 - t3063 * t3064;
t3038 = qJDD(1) * t3063 - t3059 * t3064;
t3024 = t3174 * t3148;
t3021 = t3031 - t3130;
t3018 = t3032 + t3132;
t3010 = -t3051 * t3074 + t3128;
t3001 = t3023 * t3053 - t3025 * t3049;
t3000 = -t3022 * t3049 + t3026 * t3053;
t2998 = -t3019 * t3049 + t3020 * t3053;
t2990 = -t3051 * t3018 + t3055 * t3082;
t2989 = -t3051 * t3021 + t3055 * t3083;
t2988 = t3055 * t3018 + t3051 * t3082;
t2987 = t3055 * t3021 + t3051 * t3083;
t2985 = -t3051 * t3024 + t3055 * t3084;
t2984 = t3055 * t3024 + t3051 * t3084;
t2961 = -t2993 * t3049 + t2994 * t3053;
t2947 = -t3051 * t3010 + t3055 * t3085;
t2946 = t3055 * t3010 + t3051 * t3085;
t2926 = t3050 * t3086 - t3054 * t3123;
t2924 = t3054 * t2966 + t3050 * t3087;
t2915 = t3054 * t2973 + t3050 * t3088;
t2909 = -t2927 * t3049 + t2942 * t3053;
t2902 = -t2925 * t3049 + t2940 * t3053;
t2891 = -t2916 * t3049 + t2935 * t3053;
t2884 = -t3051 * t2926 + t3055 * t3089;
t2883 = t3055 * t2926 + t3051 * t3089;
t2882 = -t3051 * t2924 + t3055 * t3090;
t2881 = t3055 * t2924 + t3051 * t3090;
t2874 = t3054 * t2919 + t3050 * t3091;
t2872 = t3054 * t2917 + t3050 * t3092;
t2869 = -t3051 * t2915 + t3055 * t3093;
t2868 = t3055 * t2915 + t3051 * t3093;
t2866 = t3054 * t2936 + t3050 * t3094;
t2856 = t3054 * t2899 + t3050 * t3095;
t2849 = -t2875 * t3049 + t2893 * t3053;
t2847 = -t2873 * t3049 + t2892 * t3053;
t2843 = -t2867 * t3049 + t2885 * t3053;
t2841 = -t2857 * t3049 + t2886 * t3053;
t2829 = -t3051 * t2874 + t3055 * t3096;
t2828 = t3055 * t2874 + t3051 * t3096;
t2826 = -t3051 * t2872 + t3055 * t3097;
t2825 = t3055 * t2872 + t3051 * t3097;
t2823 = t3054 * t2862 + t3050 * t3099;
t2822 = -t3051 * t2866 + t3055 * t3098;
t2821 = t3055 * t2866 + t3051 * t3098;
t2817 = t3054 * t2854 + t3050 * t3101;
t2816 = -t3051 * t2856 + t3055 * t3100;
t2815 = t3055 * t2856 + t3051 * t3100;
t2808 = -t2824 * t3049 + t2848 * t3053;
t2806 = t3054 * t2839 + t3050 * t3102;
t2802 = t3054 * t2833 + t3050 * t3103;
t2801 = -t2818 * t3049 + t2844 * t3053;
t2793 = -t2807 * t3049 + t2830 * t3053;
t2792 = -t3051 * t2823 + t3055 * t3104;
t2791 = t3055 * t2823 + t3051 * t3104;
t2790 = -t2803 * t3049 + t2827 * t3053;
t2789 = -t3051 * t2817 + t3055 * t3105;
t2788 = t3055 * t2817 + t3051 * t3105;
t2786 = t3054 * t2811 + t3050 * t3106;
t2784 = t3054 * t2809 + t3050 * t3107;
t2780 = t3054 * t2804 + t3050 * t3109;
t2779 = -t3051 * t2806 + t3055 * t3108;
t2778 = t3055 * t2806 + t3051 * t3108;
t2777 = -t3051 * t2802 + t3055 * t3110;
t2776 = t3055 * t2802 + t3051 * t3110;
t2772 = -t2787 * t3049 + t2800 * t3053;
t2769 = -t2785 * t3049 + t2799 * t3053;
t2768 = -t2781 * t3049 + t2794 * t3053;
t2767 = -t3051 * t2786 + t3055 * t3111;
t2766 = t3055 * t2786 + t3051 * t3111;
t2765 = -t3051 * t2784 + t3055 * t3112;
t2764 = t3055 * t2784 + t3051 * t3112;
t2762 = t3054 * t2774 + t3050 * t3114;
t2761 = -t3051 * t2780 + t3055 * t3113;
t2760 = t3055 * t2780 + t3051 * t3113;
t2757 = -t2763 * t3049 + t2773 * t3053;
t2755 = -t3051 * t2762 + t3055 * t3115;
t2754 = t3055 * t2762 + t3051 * t3115;
t2752 = t3054 * t2758 + t3050 * t3116;
t2751 = -t2753 * t3049 + t2756 * t3053;
t2750 = -t3051 * t2752 + t3055 * t3117;
t2749 = t3055 * t2752 + t3051 * t3117;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3039, -t3038, 0, -t3041 * t3059 + t3042 * t3063, 0, 0, 0, 0, 0, 0, -t2989 * t3059 + t3000 * t3063, -t2990 * t3059 + t3001 * t3063, -t2985 * t3059 + t2998 * t3063, -t2947 * t3059 + t2961 * t3063, 0, 0, 0, 0, 0, 0, -t2882 * t3059 + t2902 * t3063, -t2884 * t3059 + t2909 * t3063, -t2869 * t3059 + t2891 * t3063, -t2822 * t3059 + t2843 * t3063, 0, 0, 0, 0, 0, 0, -t2826 * t3059 + t2847 * t3063, -t2829 * t3059 + t2849 * t3063, -t2816 * t3059 + t2841 * t3063, -t2777 * t3059 + t2790 * t3063, 0, 0, 0, 0, 0, 0, -t2789 * t3059 + t2801 * t3063, -t2792 * t3059 + t2808 * t3063, -t2779 * t3059 + t2793 * t3063, -t2755 * t3059 + t2757 * t3063, 0, 0, 0, 0, 0, 0, -t2765 * t3059 + t2769 * t3063, -t2767 * t3059 + t2772 * t3063, -t2761 * t3059 + t2768 * t3063, -t2750 * t3059 + t2751 * t3063; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3038, t3039, 0, t3041 * t3063 + t3042 * t3059, 0, 0, 0, 0, 0, 0, t2989 * t3063 + t3000 * t3059, t2990 * t3063 + t3001 * t3059, t2985 * t3063 + t2998 * t3059, t2947 * t3063 + t2961 * t3059, 0, 0, 0, 0, 0, 0, t2882 * t3063 + t2902 * t3059, t2884 * t3063 + t2909 * t3059, t2869 * t3063 + t2891 * t3059, t2822 * t3063 + t2843 * t3059, 0, 0, 0, 0, 0, 0, t2826 * t3063 + t2847 * t3059, t2829 * t3063 + t2849 * t3059, t2816 * t3063 + t2841 * t3059, t2777 * t3063 + t2790 * t3059, 0, 0, 0, 0, 0, 0, t2789 * t3063 + t2801 * t3059, t2792 * t3063 + t2808 * t3059, t2779 * t3063 + t2793 * t3059, t2755 * t3063 + t2757 * t3059, 0, 0, 0, 0, 0, 0, t2765 * t3063 + t2769 * t3059, t2767 * t3063 + t2772 * t3059, t2761 * t3063 + t2768 * t3059, t2750 * t3063 + t2751 * t3059; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2987, t2988, t2984, t2946, 0, 0, 0, 0, 0, 0, t2881, t2883, t2868, t2821, 0, 0, 0, 0, 0, 0, t2825, t2828, t2815, t2776, 0, 0, 0, 0, 0, 0, t2788, t2791, t2778, t2754, 0, 0, 0, 0, 0, 0, t2764, t2766, t2760, t2749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3064, -qJDD(1), 0, t3042, 0, 0, 0, 0, 0, 0, t3000, t3001, t2998, t2961, 0, 0, 0, 0, 0, 0, t2902, t2909, t2891, t2843, 0, 0, 0, 0, 0, 0, t2847, t2849, t2841, t2790, 0, 0, 0, 0, 0, 0, t2801, t2808, t2793, t2757, 0, 0, 0, 0, 0, 0, t2769, t2772, t2768, t2751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3064, 0, t3041, 0, 0, 0, 0, 0, 0, t2989, t2990, t2985, t2947, 0, 0, 0, 0, 0, 0, t2882, t2884, t2869, t2822, 0, 0, 0, 0, 0, 0, t2826, t2829, t2816, t2777, 0, 0, 0, 0, 0, 0, t2789, t2792, t2779, t2755, 0, 0, 0, 0, 0, 0, t2765, t2767, t2761, t2750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2987, t2988, t2984, t2946, 0, 0, 0, 0, 0, 0, t2881, t2883, t2868, t2821, 0, 0, 0, 0, 0, 0, t2825, t2828, t2815, t2776, 0, 0, 0, 0, 0, 0, t2788, t2791, t2778, t2754, 0, 0, 0, 0, 0, 0, t2764, t2766, t2760, t2749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3026, t3023, t3020, t2994, 0, 0, 0, 0, 0, 0, t2940, t2942, t2935, t2885, 0, 0, 0, 0, 0, 0, t2892, t2893, t2886, t2827, 0, 0, 0, 0, 0, 0, t2844, t2848, t2830, t2773, 0, 0, 0, 0, 0, 0, t2799, t2800, t2794, t2756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3022, t3025, t3019, t2993, 0, 0, 0, 0, 0, 0, t2925, t2927, t2916, t2867, 0, 0, 0, 0, 0, 0, t2873, t2875, t2857, t2803, 0, 0, 0, 0, 0, 0, t2818, t2824, t2807, t2763, 0, 0, 0, 0, 0, 0, t2785, t2787, t2781, t2753; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3021, t3018, t3024, t3010, 0, 0, 0, 0, 0, 0, t2924, t2926, t2915, t2866, 0, 0, 0, 0, 0, 0, t2872, t2874, t2856, t2802, 0, 0, 0, 0, 0, 0, t2817, t2823, t2806, t2762, 0, 0, 0, 0, 0, 0, t2784, t2786, t2780, t2752; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2976, t2977, t2967, t2914, 0, 0, 0, 0, 0, 0, t2918, t2920, t2900, t2834, 0, 0, 0, 0, 0, 0, t2855, t2863, t2840, t2775, 0, 0, 0, 0, 0, 0, t2810, t2812, t2805, t2759; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2978, t2979, t2969, -t3119, 0, 0, 0, 0, 0, 0, -t2931, -t2933, -t2941, -t2897, 0, 0, 0, 0, 0, 0, -t2905, t3126, -t2912, -t2876, 0, 0, 0, 0, 0, 0, -t2858, -t2860, -t2845, -t2782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2966, -t3123, t2973, t2936, 0, 0, 0, 0, 0, 0, t2917, t2919, t2899, t2833, 0, 0, 0, 0, 0, 0, t2854, t2862, t2839, t2774, 0, 0, 0, 0, 0, 0, t2809, t2811, t2804, t2758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2953, t2939, t2932, t2865, 0, 0, 0, 0, 0, 0, t2890, t2895, t2871, t2796, 0, 0, 0, 0, 0, 0, t2836, t2838, t2832, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2938, t2957, t2934, t2864, 0, 0, 0, 0, 0, 0, t2889, t2894, t2870, t2795, 0, 0, 0, 0, 0, 0, t2835, t2837, t2831, t2770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2931, t2933, t2941, t2897, 0, 0, 0, 0, 0, 0, t2905, -t3126, t2912, t2876, 0, 0, 0, 0, 0, 0, t2858, t2860, t2845, t2782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2929, t2922, t2906, t2820, 0, 0, 0, 0, 0, 0, t2859, t2861, t2846, t2783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2921, t2937, t2908, t2819, 0, 0, 0, 0, 0, 0, -t2877, -t2879, -t2901, -t2813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2905, -t3126, t2912, t2876, 0, 0, 0, 0, 0, 0, t2858, t2860, t2845, t2782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2910, t2888, t2878, t2798; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2887, t2911, t2880, t2797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2877, t2879, t2901, t2813;];
f_new_reg  = t1;
