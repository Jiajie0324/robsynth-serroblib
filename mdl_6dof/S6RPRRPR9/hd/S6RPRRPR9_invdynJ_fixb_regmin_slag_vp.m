% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RPRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR9_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR9_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR9_invdynJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:31:48
% EndTime: 2019-03-09 05:32:08
% DurationCPUTime: 10.45s
% Computational Cost: add. (20880->613), mult. (66846->864), div. (0->0), fcn. (58592->18), ass. (0->309)
t305 = sin(pkin(12));
t307 = sin(pkin(6));
t309 = cos(pkin(12));
t313 = sin(qJ(3));
t445 = cos(pkin(7));
t394 = t313 * t445;
t461 = cos(qJ(3));
t329 = t307 * (-t305 * t394 + t309 * t461);
t230 = qJD(1) * t329;
t306 = sin(pkin(7));
t403 = qJD(3) * t461;
t374 = t306 * t403;
t493 = t230 - t374;
t370 = t445 * t461;
t350 = t309 * t370;
t446 = cos(pkin(6));
t390 = t446 * t306;
t353 = t461 * t390;
t492 = t307 * t350 + t353;
t420 = qJD(1) * t307;
t406 = t305 * t420;
t476 = qJD(1) * t492 - t313 * t406;
t193 = qJD(4) - t476;
t314 = sin(qJ(1));
t317 = cos(qJ(1));
t392 = t317 * t446;
t247 = t314 * t305 - t309 * t392;
t248 = t305 * t392 + t314 * t309;
t430 = t307 * t317;
t433 = t306 * t313;
t157 = -t247 * t394 + t248 * t461 - t430 * t433;
t395 = t307 * t445;
t216 = t247 * t306 - t317 * t395;
t303 = qJ(4) + pkin(13);
t297 = sin(t303);
t298 = cos(t303);
t119 = t157 * t298 + t216 * t297;
t407 = t306 * t461;
t379 = t307 * t407;
t156 = t247 * t370 + t248 * t313 + t317 * t379;
t311 = sin(qJ(6));
t315 = cos(qJ(6));
t491 = t119 * t311 - t156 * t315;
t490 = t119 * t315 + t156 * t311;
t312 = sin(qJ(4));
t316 = cos(qJ(4));
t310 = -qJ(5) - pkin(10);
t396 = qJD(4) * t310;
t387 = qJD(1) * t446;
t375 = pkin(1) * t387;
t405 = t309 * t420;
t244 = qJ(2) * t405 + t305 * t375;
t328 = (t309 * t395 + t390) * pkin(9);
t185 = qJD(1) * t328 + t244;
t436 = t305 * t306;
t234 = (-pkin(2) * t309 - pkin(9) * t436 - pkin(1)) * t307;
t222 = qJD(1) * t234 + qJD(2);
t281 = t309 * t375;
t435 = t305 * t307;
t323 = t446 * pkin(2) + (-pkin(9) * t445 - qJ(2)) * t435;
t194 = qJD(1) * t323 + t281;
t352 = t194 * t370;
t111 = -t313 * t185 + t222 * t407 + t352;
t371 = t309 * t394;
t372 = t313 * t390;
t212 = t307 * (t305 * t461 + t371) + t372;
t203 = t212 * qJD(1);
t141 = pkin(3) * t203 - pkin(10) * t476;
t426 = t316 * t111 + t312 * t141;
t441 = t476 * t312;
t489 = qJ(5) * t441 + qJD(5) * t316 + t312 * t396 - t426;
t137 = t316 * t141;
t488 = -pkin(4) * t203 - t137 + (qJ(5) * t476 + t396) * t316 + (-qJD(5) + t111) * t312;
t255 = t312 * t445 + t316 * t433;
t378 = t306 * t406;
t487 = qJD(4) * t255 - t493 * t312 + t316 * t378;
t254 = -t312 * t433 + t316 * t445;
t486 = -qJD(4) * t254 + t312 * t378 + t493 * t316;
t439 = t216 * t312;
t485 = t157 * t316 + t439;
t361 = t446 * t445;
t239 = -qJD(1) * t361 + t306 * t405 - qJD(3);
t147 = t203 * t312 + t316 * t239;
t149 = t203 * t316 - t239 * t312;
t304 = sin(pkin(13));
t308 = cos(pkin(13));
t382 = -t308 * t147 - t149 * t304;
t467 = qJD(6) - t382;
t356 = -t147 * t304 + t308 * t149;
t78 = -t315 * t193 + t311 * t356;
t484 = t467 * t78;
t261 = t304 * t312 - t308 * t316;
t131 = t261 * t476;
t252 = t261 * qJD(4);
t480 = -t131 + t252;
t262 = t304 * t316 + t308 * t312;
t423 = t193 * t262;
t202 = t212 * qJD(3);
t412 = qJDD(1) * t307;
t400 = t305 * t412;
t140 = qJD(1) * t202 - qJDD(1) * t492 + t313 * t400;
t478 = t305 * t370 + t309 * t313;
t386 = t315 * t467;
t139 = qJD(3) * t476 + qJDD(1) * t372 + t371 * t412 + t461 * t400;
t411 = qJDD(1) * t309;
t399 = t307 * t411;
t238 = -qJDD(1) * t361 + t306 * t399 - qJDD(3);
t416 = qJD(4) * t316;
t417 = qJD(4) * t312;
t82 = t316 * t139 - t203 * t417 - t312 * t238 - t239 * t416;
t83 = qJD(4) * t149 + t139 * t312 + t316 * t238;
t56 = -t304 * t82 - t308 * t83;
t54 = qJDD(6) - t56;
t450 = t311 * t54;
t477 = -t386 * t467 - t450;
t475 = t157 * t312 - t216 * t316;
t448 = t304 * t489 - t488 * t308;
t447 = t488 * t304 + t308 * t489;
t301 = t307 ^ 2;
t473 = t301 * (t305 ^ 2 + t309 ^ 2);
t408 = pkin(1) * t446;
t289 = t309 * t408;
t213 = t289 + t323;
t150 = -t213 * t306 + t445 * t234;
t434 = t305 * t313;
t211 = t307 * t434 - t492;
t104 = pkin(3) * t211 - pkin(10) * t212 + t150;
t432 = t307 * t309;
t246 = t306 * t432 - t361;
t253 = qJ(2) * t432 + t305 * t408;
t207 = t328 + t253;
t409 = t461 * t207 + t213 * t394 + t234 * t433;
t110 = -pkin(10) * t246 + t409;
t427 = t312 * t104 + t316 * t110;
t472 = t304 * t487 + t308 * t486;
t424 = -t304 * t486 + t308 * t487;
t322 = -t313 * t207 + t213 * t370 + t234 * t407;
t154 = t212 * t312 + t246 * t316;
t155 = t212 * t316 - t246 * t312;
t114 = -t154 * t304 + t155 * t308;
t206 = t211 * t315;
t471 = -t114 * t311 + t206;
t229 = t478 * t420;
t418 = qJD(3) * t313;
t404 = t306 * t418;
t470 = t229 - t404;
t112 = t461 * t185 + t194 * t394 + t222 * t433;
t469 = -t112 + (t417 - t441) * pkin(4);
t466 = pkin(4) * t83 + qJDD(5);
t393 = t314 * t446;
t249 = -t305 * t393 + t317 * t309;
t335 = t317 * t305 + t309 * t393;
t326 = t335 * t445;
t431 = t307 * t314;
t161 = t249 * t461 + (t306 * t431 - t326) * t313;
t217 = t306 * t335 + t314 * t395;
t125 = -t161 * t312 + t217 * t316;
t465 = -g(1) * t125 + g(2) * t475 + g(3) * t154;
t294 = pkin(4) * t304 + pkin(11);
t138 = qJDD(4) + t140;
t373 = qJDD(1) * t408;
t413 = qJD(1) * qJD(2);
t401 = t307 * t413;
t224 = qJ(2) * t399 + t305 * t373 + t309 * t401;
t166 = qJDD(1) * t328 + t224;
t279 = t309 * t373;
t167 = qJDD(1) * t323 - t305 * t401 + t279;
t218 = qJDD(1) * t234 + qJDD(2);
t330 = qJD(3) * t352 + t461 * t166 + t167 * t394 - t185 * t418 + t218 * t433 + t222 * t374;
t65 = -pkin(10) * t238 + t330;
t132 = -t167 * t306 + t445 * t218;
t74 = pkin(3) * t140 - pkin(10) * t139 + t132;
t397 = -t312 * t65 + t316 * t74;
t142 = -t194 * t306 + t445 * t222;
t90 = -pkin(3) * t476 - pkin(10) * t203 + t142;
t92 = -pkin(10) * t239 + t112;
t63 = t312 * t90 + t316 * t92;
t327 = -qJD(4) * t63 + t397;
t16 = pkin(4) * t138 - qJ(5) * t82 - qJD(5) * t149 + t327;
t348 = -t312 * t74 - t316 * t65 - t90 * t416 + t417 * t92;
t18 = -qJ(5) * t83 - qJD(5) * t147 - t348;
t5 = t16 * t308 - t18 * t304;
t3 = -pkin(5) * t138 - t5;
t464 = (pkin(4) * t149 + pkin(5) * t356 - pkin(11) * t382 + qJD(6) * t294) * t467 + g(1) * (-t161 * t297 + t217 * t298) + g(2) * (-t157 * t297 + t216 * t298) + g(3) * (-t212 * t297 - t246 * t298) + t3;
t369 = qJD(3) * t394;
t349 = t313 * t166 - t167 * t370 + t185 * t403 + t194 * t369 - t218 * t407 + t222 * t404;
t459 = pkin(3) * t238;
t66 = t349 + t459;
t41 = t66 + t466;
t57 = -t304 * t83 + t308 * t82;
t14 = -pkin(5) * t56 - pkin(11) * t57 + t41;
t62 = -t312 * t92 + t316 * t90;
t49 = -qJ(5) * t149 + t62;
t46 = pkin(4) * t193 + t49;
t50 = -qJ(5) * t147 + t63;
t47 = t308 * t50;
t22 = t304 * t46 + t47;
t20 = pkin(11) * t193 + t22;
t91 = t239 * pkin(3) - t111;
t75 = t147 * pkin(4) + qJD(5) + t91;
t40 = -pkin(5) * t382 - pkin(11) * t356 + t75;
t360 = t20 * t311 - t315 * t40;
t6 = t304 * t16 + t308 * t18;
t4 = pkin(11) * t138 + t6;
t1 = -t360 * qJD(6) + t311 * t14 + t315 * t4;
t296 = pkin(4) * t316 + pkin(3);
t204 = pkin(5) * t261 - pkin(11) * t262 - t296;
t273 = t310 * t316;
t402 = t310 * t312;
t226 = -t308 * t273 + t304 * t402;
t160 = t249 * t313 - t314 * t379 + t326 * t461;
t343 = g(1) * t160 + g(2) * t156 + g(3) * t211;
t463 = t298 * t343 - (-pkin(5) * t423 - pkin(11) * t480 + qJD(6) * t226 - t469) * t467 + t204 * t54;
t460 = pkin(1) * t301;
t457 = g(1) * t314;
t455 = t78 * t356;
t80 = t193 * t311 + t315 * t356;
t454 = t80 * t356;
t201 = (t353 + (t350 - t434) * t307) * qJD(3);
t117 = -qJD(4) * t154 + t201 * t316;
t419 = qJD(2) * t307;
t376 = t419 * t436;
t129 = pkin(3) * t202 - pkin(10) * t201 + t376;
t99 = qJD(2) * t329 + qJD(3) * t322;
t389 = t316 * t129 - t312 * t99;
t28 = pkin(4) * t202 - qJ(5) * t117 - qJD(4) * t427 - qJD(5) * t155 + t389;
t116 = qJD(4) * t155 + t201 * t312;
t344 = t104 * t416 - t110 * t417 + t312 * t129 + t316 * t99;
t32 = -qJ(5) * t116 - qJD(5) * t154 + t344;
t10 = t304 * t28 + t308 * t32;
t384 = t316 * t104 - t110 * t312;
t55 = pkin(4) * t211 - qJ(5) * t155 + t384;
t61 = -qJ(5) * t154 + t427;
t30 = t304 * t55 + t308 * t61;
t452 = t304 * t50;
t414 = qJD(6) * t315;
t415 = qJD(6) * t311;
t34 = t311 * t138 + t193 * t414 + t315 * t57 - t356 * t415;
t451 = t311 * t34;
t449 = pkin(5) * t203 + t448;
t443 = t147 * t193;
t442 = t149 * t193;
t440 = t211 * t311;
t438 = t217 * t312;
t437 = t262 * t315;
t422 = t317 * pkin(1) + qJ(2) * t431;
t398 = -t314 * pkin(1) + qJ(2) * t430;
t318 = qJD(1) ^ 2;
t391 = t318 * t446;
t388 = -t315 * t138 + t311 * t57;
t381 = t193 * t316;
t368 = -g(1) * t156 + g(2) * t160;
t367 = g(1) * t317 + g(2) * t314;
t365 = qJD(2) * t387;
t364 = g(2) * t430 - g(3) * t446;
t12 = t20 * t315 + t311 * t40;
t26 = pkin(11) * t211 + t30;
t113 = t308 * t154 + t155 * t304;
t109 = t246 * pkin(3) - t322;
t320 = t154 * pkin(4) + t109;
t42 = t113 * pkin(5) - t114 * pkin(11) + t320;
t359 = t26 * t315 + t311 * t42;
t358 = -t26 * t311 + t315 * t42;
t9 = t28 * t308 - t304 * t32;
t21 = t308 * t46 - t452;
t29 = -t304 * t61 + t308 * t55;
t100 = t207 * t403 + t213 * t369 + t234 * t404 + t419 * t478;
t87 = t114 * t315 + t440;
t355 = (-qJ(2) * t406 + t281) * t305 - t244 * t309;
t354 = t315 * t54 + (t311 * t382 - t415) * t467;
t346 = -pkin(10) * t138 + t193 * t91;
t342 = -g(1) * t161 - g(2) * t157 - g(3) * t212;
t183 = t254 * t304 + t255 * t308;
t340 = -t311 * t183 - t315 * t407;
t339 = -t315 * t183 + t311 * t407;
t105 = -t131 * t311 - t315 * t203;
t338 = -t252 * t311 + t262 * t414 - t105;
t106 = -t131 * t315 + t203 * t311;
t337 = -t252 * t315 - t262 * t415 - t106;
t336 = pkin(4) * t116 + t100;
t19 = -pkin(5) * t193 - t21;
t24 = t308 * t49 - t452;
t331 = -t294 * t54 + (t19 + t24) * t467;
t2 = -qJD(6) * t12 + t315 * t14 - t311 * t4;
t324 = pkin(10) * qJD(4) * t193 - t343 + t66;
t321 = t343 - t349;
t319 = -t226 * t54 + t3 * t262 + (pkin(11) * t203 - qJD(6) * t204 - t447) * t467 + t342;
t295 = -pkin(4) * t308 - pkin(5);
t282 = -pkin(1) * t412 + qJDD(2);
t251 = -qJ(2) * t435 + t289;
t225 = -t273 * t304 - t308 * t402;
t223 = t279 + (-qJ(2) * qJDD(1) - t413) * t435;
t182 = -t308 * t254 + t255 * t304;
t152 = t212 * t298 - t246 * t297;
t126 = t161 * t316 + t438;
t122 = t161 * t298 + t217 * t297;
t85 = t122 * t315 + t160 * t311;
t84 = -t122 * t311 + t160 * t315;
t77 = -t116 * t304 + t117 * t308;
t76 = t308 * t116 + t117 * t304;
t45 = qJD(6) * t87 - t202 * t315 + t311 * t77;
t44 = qJD(6) * t471 + t202 * t311 + t315 * t77;
t35 = qJD(6) * t80 + t388;
t33 = pkin(5) * t76 - pkin(11) * t77 + t336;
t25 = -pkin(5) * t211 - t29;
t23 = t304 * t49 + t47;
t8 = pkin(11) * t202 + t10;
t7 = -pkin(5) * t202 - t9;
t11 = [qJDD(1), -g(2) * t317 + t457, t367, t223 * t446 + g(1) * t248 - g(2) * t249 + (-t282 * t309 - t305 * t365) * t307 + (t251 * t446 + t309 * t460) * qJDD(1), -t224 * t446 - g(1) * t247 + g(2) * t335 + (t282 * t305 - t309 * t365) * t307 + (-t253 * t446 - t305 * t460) * qJDD(1), t413 * t473 + (-t223 * t305 + t224 * t309 + (-t251 * t305 + t253 * t309) * qJDD(1) - t367) * t307, t224 * t253 + t223 * t251 - g(1) * t398 - g(2) * t422 + (-t282 * pkin(1) - qJD(2) * t355) * t307, t139 * t212 + t201 * t203, -t139 * t211 - t140 * t212 + t201 * t476 - t202 * t203, -t139 * t246 - t201 * t239 - t212 * t238, t140 * t246 + t202 * t239 + t211 * t238, t238 * t246, g(1) * t157 - g(2) * t161 + t100 * t239 + t132 * t211 + t150 * t140 + t142 * t202 - t238 * t322 + t246 * t349 - t376 * t476, t132 * t212 + t150 * t139 + t142 * t201 + t203 * t376 + t238 * t409 + t99 * t239 + t246 * t330 + t368, t117 * t149 + t155 * t82, -t116 * t149 - t117 * t147 - t154 * t82 - t155 * t83, t117 * t193 + t138 * t155 + t149 * t202 + t211 * t82, -t116 * t193 - t138 * t154 - t147 * t202 - t211 * t83, t138 * t211 + t193 * t202, t389 * t193 + t384 * t138 + t397 * t211 + t62 * t202 + t100 * t147 + t109 * t83 + t66 * t154 + t91 * t116 + g(1) * t485 - g(2) * t126 + (-t193 * t427 - t211 * t63) * qJD(4), -g(1) * t475 - g(2) * t125 + t100 * t149 + t109 * t82 + t91 * t117 - t427 * t138 + t66 * t155 - t344 * t193 - t63 * t202 + t348 * t211, t10 * t382 - t113 * t6 - t114 * t5 - t21 * t77 - t22 * t76 - t29 * t57 + t30 * t56 - t356 * t9 - t368, t6 * t30 + t22 * t10 + t5 * t29 + t21 * t9 + t41 * t320 + t75 * t336 - g(1) * (-t248 * pkin(2) - pkin(4) * t439 - pkin(9) * t216 + t156 * t310 - t157 * t296 + t398) - g(2) * (t249 * pkin(2) + pkin(4) * t438 + pkin(9) * t217 - t160 * t310 + t161 * t296 + t422) t34 * t87 + t44 * t80, t34 * t471 - t35 * t87 - t44 * t78 - t45 * t80, t113 * t34 + t44 * t467 + t54 * t87 + t76 * t80, -t113 * t35 - t45 * t467 + t471 * t54 - t76 * t78, t113 * t54 + t467 * t76 (-qJD(6) * t359 - t311 * t8 + t315 * t33) * t467 + t358 * t54 + t2 * t113 - t360 * t76 + t7 * t78 + t25 * t35 - t3 * t471 + t19 * t45 + g(1) * t490 - g(2) * t85 -(qJD(6) * t358 + t311 * t33 + t315 * t8) * t467 - t359 * t54 - t1 * t113 - t12 * t76 + t7 * t80 + t25 * t34 + t3 * t87 + t19 * t44 - g(1) * t491 - g(2) * t84; 0, 0, 0 (t305 * t391 - t411) * t307 (qJDD(1) * t305 + t309 * t391) * t307, -t318 * t473, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t355 - t457) * t307 + t364, 0, 0, 0, 0, 0, t445 * t140 - t229 * t239 + (-t238 * t461 + t239 * t418 + t406 * t476) * t306, t445 * t139 - t230 * t239 + (-t203 * t406 + t238 * t313 + t239 * t403) * t306, 0, 0, 0, 0, 0, t254 * t138 - t470 * t147 - t193 * t487 - t83 * t407, -t255 * t138 - t470 * t149 + t193 * t486 - t82 * t407, t182 * t57 + t183 * t56 + t356 * t424 - t382 * t472, -g(1) * t431 - t5 * t182 + t6 * t183 - t75 * t229 + (-t41 * t461 + t418 * t75) * t306 - t472 * t22 - t424 * t21 + t364, 0, 0, 0, 0, 0, t182 * t35 + t340 * t54 + (qJD(6) * t339 + t311 * t472 - t315 * t470) * t467 + t424 * t78, t182 * t34 + t339 * t54 + (-qJD(6) * t340 + t311 * t470 + t315 * t472) * t467 + t424 * t80; 0, 0, 0, 0, 0, 0, 0, -t203 * t476, t203 ^ 2 - t476 ^ 2, t239 * t476 + t139, -t203 * t239 - t140, -t238, -t112 * t239 - t142 * t203 + t321, -t111 * t239 - t142 * t476 - t330 - t342, t149 * t381 + t312 * t82 (t82 - t443) * t316 + (-t83 - t442) * t312, t312 * t138 - t149 * t203 + t193 * t381, -t193 ^ 2 * t312 + t316 * t138 + t147 * t203, -t193 * t203, -pkin(3) * t83 - t112 * t147 - t137 * t193 - t62 * t203 + (t111 * t193 + t346) * t312 - t324 * t316, -pkin(3) * t82 - t112 * t149 + t193 * t426 + t63 * t203 + t312 * t324 + t316 * t346, t21 * t480 - t423 * t22 + t225 * t57 + t226 * t56 - t261 * t6 - t262 * t5 + t448 * t356 + t447 * t382 + t342, t6 * t226 - t5 * t225 - t41 * t296 - g(1) * (-t160 * t296 - t161 * t310) - g(2) * (-t156 * t296 - t157 * t310) - g(3) * (-t211 * t296 - t212 * t310) + t469 * t75 + t447 * t22 - t448 * t21, t337 * t80 + t34 * t437, t105 * t80 + t106 * t78 - (-t311 * t80 - t315 * t78) * t252 + (-t451 - t315 * t35 + (t311 * t78 - t315 * t80) * qJD(6)) * t262, t261 * t34 + t337 * t467 + t423 * t80 + t437 * t54, -t261 * t35 - t262 * t450 - t338 * t467 - t423 * t78, t261 * t54 + t423 * t467, t338 * t19 + t2 * t261 + t225 * t35 + t319 * t311 + t315 * t463 - t360 * t423 + t449 * t78, -t1 * t261 - t423 * t12 + t337 * t19 + t225 * t34 - t311 * t463 + t319 * t315 + t449 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149 * t147, -t147 ^ 2 + t149 ^ 2, t82 + t443, t442 - t83, t138, -t91 * t149 + t63 * t193 + t327 + t465, g(1) * t126 + g(2) * t485 + g(3) * t155 + t91 * t147 + t62 * t193 + t348 (t304 * t56 - t308 * t57) * pkin(4) + (t21 - t24) * t382 + (t22 - t23) * t356, t21 * t23 - t22 * t24 + (-t75 * t149 + t6 * t304 + t5 * t308 + t465) * pkin(4), t386 * t80 + t451 (t34 - t484) * t315 + (-t467 * t80 - t35) * t311, -t454 - t477, t354 + t455, -t467 * t356, -t23 * t78 + t295 * t35 + t331 * t311 - t315 * t464 + t356 * t360, t12 * t356 - t23 * t80 + t295 * t34 + t311 * t464 + t331 * t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356 ^ 2 - t382 ^ 2, t21 * t356 - t22 * t382 - t321 + t459 + t466, 0, 0, 0, 0, 0, t354 - t455, -t454 + t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80 * t78, -t78 ^ 2 + t80 ^ 2, t34 + t484, -t388 + (-qJD(6) + t467) * t80, t54, t12 * t467 - t19 * t80 - g(1) * t84 + g(2) * t491 - g(3) * (-t152 * t311 + t206) + t2, -t360 * t467 + t19 * t78 + g(1) * t85 + g(2) * t490 - g(3) * (-t152 * t315 - t440) - t1;];
tau_reg  = t11;
