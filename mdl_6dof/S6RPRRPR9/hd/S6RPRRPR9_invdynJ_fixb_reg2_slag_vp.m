% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR9_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR9_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR9_invdynJ_fixb_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:31:43
% EndTime: 2019-03-09 05:32:21
% DurationCPUTime: 22.20s
% Computational Cost: add. (45409->870), mult. (144987->1170), div. (0->0), fcn. (126040->18), ass. (0->374)
t353 = sin(pkin(12));
t355 = sin(pkin(6));
t356 = cos(pkin(12));
t361 = sin(qJ(3));
t530 = cos(pkin(7));
t446 = t361 * t530;
t546 = cos(qJ(3));
t382 = t355 * (-t353 * t446 + t356 * t546);
t280 = qJD(1) * t382;
t354 = sin(pkin(7));
t453 = qJD(3) * t546;
t430 = t354 * t453;
t548 = t430 - t280;
t425 = t530 * t546;
t497 = t355 * t356;
t407 = t425 * t497;
t308 = qJD(1) * t407;
t357 = cos(pkin(6));
t459 = t354 * t546;
t435 = t357 * t459;
t479 = qJD(1) * t355;
t456 = t353 * t479;
t244 = -qJD(1) * t435 + t361 * t456 - t308;
t237 = qJD(4) + t244;
t545 = sin(qJ(1));
t457 = t545 * t356;
t364 = cos(qJ(1));
t494 = t364 * t353;
t298 = t357 * t494 + t457;
t496 = t355 * t364;
t498 = t354 * t361;
t340 = t545 * t353;
t493 = t364 * t356;
t421 = t357 * t493 - t340;
t551 = t421 * t530;
t201 = t298 * t546 + t361 * t551 - t496 * t498;
t448 = t355 * t530;
t266 = -t421 * t354 - t364 * t448;
t351 = qJ(4) + pkin(13);
t345 = sin(t351);
t346 = cos(t351);
t153 = t201 * t346 + t266 * t345;
t202 = -t298 * t361 - t459 * t496 + t546 * t551;
t359 = sin(qJ(6));
t362 = cos(qJ(6));
t574 = t153 * t359 + t202 * t362;
t573 = t153 * t362 - t202 * t359;
t360 = sin(qJ(4));
t363 = cos(qJ(4));
t358 = -qJ(5) - pkin(10);
t449 = qJD(4) * t358;
t513 = t244 * t360;
t455 = t356 * t479;
t544 = pkin(1) * t357;
t464 = qJD(1) * t544;
t293 = qJ(2) * t455 + t353 * t464;
t384 = (t354 * t357 + t356 * t448) * pkin(9);
t229 = qJD(1) * t384 + t293;
t283 = (-pkin(9) * t353 * t354 - pkin(2) * t356 - pkin(1)) * t355;
t272 = qJD(1) * t283 + qJD(2);
t330 = t356 * t464;
t499 = t353 * t355;
t383 = t357 * pkin(2) + (-pkin(9) * t530 - qJ(2)) * t499;
t238 = qJD(1) * t383 + t330;
t413 = t238 * t425;
t143 = -t361 * t229 + t272 * t459 + t413;
t263 = t355 * (t353 * t546 + t356 * t446) + t357 * t498;
t248 = t263 * qJD(1);
t175 = pkin(3) * t248 + pkin(10) * t244;
t97 = t363 * t143 + t360 * t175;
t572 = -qJ(5) * t513 + qJD(5) * t363 + t360 * t449 - t97;
t96 = -t143 * t360 + t363 * t175;
t571 = -pkin(4) * t248 - qJD(5) * t360 - t96 + (-qJ(5) * t244 + t449) * t363;
t508 = t266 * t363;
t516 = t201 * t360;
t570 = t508 - t516;
t509 = t266 * t360;
t569 = t201 * t363 + t509;
t352 = sin(pkin(13));
t500 = t352 * t360;
t529 = cos(pkin(13));
t403 = t363 * t529 - t500;
t488 = t237 * t403;
t305 = t360 * t530 + t363 * t498;
t433 = t354 * t456;
t485 = qJD(4) * t305 + t360 * t548 + t363 * t433;
t304 = -t360 * t498 + t363 * t530;
t484 = -qJD(4) * t304 + t360 * t433 - t363 * t548;
t443 = t529 * t360;
t310 = t352 * t363 + t443;
t482 = t237 * t310;
t565 = -t201 * t345 + t266 * t346;
t531 = t571 * t352 + t529 * t572;
t445 = t530 * t238;
t144 = t546 * t229 + (t272 * t354 + t445) * t361;
t476 = qJD(4) * t360;
t426 = -t144 + (t476 + t513) * pkin(4);
t461 = t361 * t499;
t431 = qJD(3) * t461;
t313 = qJD(1) * t431;
t372 = t263 * qJDD(1);
t376 = t407 + t435;
t470 = qJD(1) * qJD(3);
t368 = t376 * t470 - t313 + t372;
t447 = t357 * t530;
t287 = -qJD(1) * t447 + t354 * t455 - qJD(3);
t185 = t248 * t363 - t287 * t360;
t176 = -t238 * t354 + t530 * t272;
t118 = pkin(3) * t244 - pkin(10) * t248 + t176;
t120 = -t287 * pkin(10) + t144;
t76 = t363 * t118 - t120 * t360;
t63 = -qJ(5) * t185 + t76;
t60 = pkin(4) * t237 + t63;
t183 = t248 * t360 + t287 * t363;
t77 = t118 * t360 + t120 * t363;
t64 = -qJ(5) * t183 + t77;
t61 = t529 * t64;
t33 = t352 * t60 + t61;
t31 = pkin(11) * t237 + t33;
t124 = t529 * t183 + t185 * t352;
t404 = -t352 * t183 + t185 * t529;
t119 = t287 * pkin(3) - t143;
t94 = t183 * pkin(4) + qJD(5) + t119;
t54 = t124 * pkin(5) - pkin(11) * t404 + t94;
t14 = t31 * t362 + t359 * t54;
t468 = qJDD(1) * t356;
t451 = t355 * t468;
t466 = -t354 * t451 + qJDD(3);
t391 = -qJDD(1) * t447 - t466;
t477 = qJD(4) * t185;
t415 = t357 * t430;
t369 = qJD(1) * t415 + qJD(3) * t308 - t313;
t550 = t369 + t372;
t108 = t360 * t550 + t363 * t391 + t477;
t471 = qJD(1) * qJD(2);
t452 = t355 * t471;
t467 = qJDD(1) * t357;
t462 = pkin(1) * t467;
t274 = qJ(2) * t451 + t353 * t462 + t356 * t452;
t212 = qJDD(1) * t384 + t274;
t328 = t356 * t462;
t429 = t353 * t452;
t213 = qJDD(1) * t383 + t328 - t429;
t268 = qJDD(1) * t283 + qJDD(2);
t478 = qJD(3) * t361;
t454 = t354 * t478;
t85 = -t361 * t212 + t213 * t425 - t229 * t453 + t268 * t459 - t272 * t454 - t445 * t478;
t80 = pkin(3) * t391 - t85;
t55 = t108 * pkin(4) + qJDD(5) + t80;
t475 = qJD(4) * t363;
t107 = t248 * t476 + t287 * t475 + t360 * t391 - t363 * t368;
t70 = -t107 * t352 + t529 * t108;
t71 = -t107 * t529 - t352 * t108;
t16 = t70 * pkin(5) - t71 * pkin(11) + t55;
t247 = t263 * qJD(3);
t262 = -t376 + t461;
t398 = t262 * qJDD(1);
t174 = qJD(1) * t247 + t398;
t173 = qJDD(4) + t174;
t84 = qJD(3) * t413 + t212 * t546 + t213 * t446 - t229 * t478 + t268 * t498 + t272 * t430;
t79 = -pkin(10) * t391 + t84;
t167 = -t354 * t213 + t530 * t268;
t92 = t174 * pkin(3) - pkin(10) * t550 + t167;
t29 = -qJD(4) * t77 - t360 * t79 + t363 * t92;
t19 = pkin(4) * t173 + qJ(5) * t107 - qJD(5) * t185 + t29;
t408 = -t118 * t475 + t120 * t476 - t360 * t92 - t363 * t79;
t25 = -qJ(5) * t108 - qJD(5) * t183 - t408;
t8 = t352 * t19 + t529 * t25;
t6 = pkin(11) * t173 + t8;
t2 = -qJD(6) * t14 + t362 * t16 - t359 * t6;
t557 = qJD(6) + t124;
t564 = t14 * t557 + t2;
t417 = t31 * t359 - t362 * t54;
t1 = -t417 * qJD(6) + t359 * t16 + t362 * t6;
t563 = t417 * t557 + t1;
t562 = -pkin(11) * t248 + t531;
t561 = t482 * pkin(5) - t488 * pkin(11) + t426;
t560 = t124 * t404;
t489 = t485 * t352 + t484 * t529;
t381 = t355 * (t353 * t425 + t356 * t361);
t279 = qJD(1) * t381;
t419 = -t279 + t454;
t397 = t357 * t457 + t494;
t267 = t397 * t354 + t545 * t448;
t559 = -t76 * t237 - t408;
t437 = t557 * t362;
t68 = qJDD(6) + t70;
t558 = -t359 * t68 - t437 * t557;
t532 = t352 * t572 - t571 * t529;
t556 = -t77 * t237 - t29;
t105 = t237 * t359 + t362 * t404;
t438 = t557 * t359;
t555 = t105 * t438;
t348 = t353 ^ 2;
t349 = t355 ^ 2;
t350 = t356 ^ 2;
t553 = t349 * (t348 + t350);
t299 = -t340 * t357 + t493;
t458 = t355 * t545;
t549 = -t354 * t458 + t397 * t530;
t204 = t299 * t361 + t546 * t549;
t400 = g(1) * t204 - g(2) * t202 + g(3) * t262;
t552 = t400 * t345;
t337 = t356 * t544;
t264 = t337 + t383;
t186 = -t264 * t354 + t530 * t283;
t134 = pkin(3) * t262 - pkin(10) * t263 + t186;
t303 = qJ(2) * t497 + t353 * t544;
t254 = t384 + t303;
t236 = t546 * t254;
t444 = t530 * t264;
t148 = t283 * t498 + t361 * t444 + t236;
t297 = t354 * t497 - t447;
t142 = -pkin(10) * t297 + t148;
t87 = t360 * t134 + t363 * t142;
t147 = -t361 * t254 + t264 * t425 + t283 * t459;
t543 = g(2) * t364;
t505 = t297 * t363;
t510 = t263 * t360;
t198 = t505 + t510;
t246 = -qJD(3) * t407 - t415 + t431;
t151 = -qJD(4) * t198 - t246 * t363;
t199 = t263 * t363 - t297 * t360;
t129 = qJD(2) * t382 + qJD(3) * t147;
t432 = qJD(2) * t354 * t499;
t164 = pkin(3) * t247 + pkin(10) * t246 + t432;
t53 = -qJD(4) * t87 - t129 * t360 + t363 * t164;
t39 = pkin(4) * t247 - qJ(5) * t151 - qJD(5) * t199 + t53;
t150 = qJD(4) * t199 - t246 * t360;
t52 = t363 * t129 + t134 * t475 - t142 * t476 + t360 * t164;
t43 = -qJ(5) * t150 - qJD(5) * t198 + t52;
t12 = t352 * t39 + t529 * t43;
t86 = t363 * t134 - t142 * t360;
t69 = pkin(4) * t262 - qJ(5) * t199 + t86;
t75 = -qJ(5) * t198 + t87;
t41 = t352 * t69 + t529 * t75;
t542 = t352 * t64;
t473 = qJD(6) * t362;
t474 = qJD(6) * t359;
t46 = -t359 * t173 - t237 * t473 - t362 * t71 + t404 * t474;
t541 = t359 * t46;
t442 = -t362 * t173 + t359 * t71;
t47 = qJD(6) * t105 + t442;
t539 = t362 * t47;
t103 = -t362 * t237 + t359 * t404;
t536 = -t103 * t473 - t359 * t47;
t344 = pkin(4) * t363 + pkin(3);
t249 = -pkin(5) * t403 - pkin(11) * t310 - t344;
t322 = t358 * t363;
t276 = -t322 * t529 + t358 * t500;
t177 = t249 * t362 - t276 * t359;
t535 = qJD(6) * t177 + t561 * t359 + t562 * t362;
t178 = t249 * t359 + t276 * t362;
t534 = -qJD(6) * t178 - t562 * t359 + t561 * t362;
t533 = t248 * pkin(5) + t532;
t528 = pkin(1) * qJDD(1);
t527 = t103 * t404;
t526 = t103 * t124;
t525 = t105 * t103;
t524 = t105 * t404;
t523 = t404 ^ 2;
t522 = t404 * t237;
t521 = t124 ^ 2;
t520 = t124 * t237;
t519 = t183 * t237;
t518 = t185 * t183;
t517 = t185 * t237;
t205 = t299 * t546 - t361 * t549;
t515 = t205 * t360;
t514 = t237 * t248;
t512 = t248 * t244;
t511 = t262 * t359;
t507 = t267 * t360;
t506 = t267 * t363;
t504 = t310 * t359;
t503 = t310 * t362;
t502 = t346 * t359;
t501 = t346 * t362;
t365 = qJD(1) ^ 2;
t495 = t357 * t365;
t227 = t352 * t304 + t305 * t529;
t210 = -t359 * t227 - t362 * t459;
t492 = qJD(6) * t210 + t419 * t359 - t489 * t362;
t396 = -t362 * t227 + t359 * t459;
t491 = qJD(6) * t396 + t489 * t359 + t419 * t362;
t490 = t484 * t352 - t485 * t529;
t487 = -t201 * t358 + t202 * t344;
t486 = -t204 * t344 - t205 * t358;
t483 = -t262 * t344 - t263 * t358;
t481 = t364 * pkin(1) + qJ(2) * t458;
t469 = qJDD(1) * t349;
t465 = g(1) * t545;
t450 = g(2) * t496 - g(3) * t357;
t7 = t529 * t19 - t352 * t25;
t441 = -t362 * t248 - t488 * t359;
t440 = t248 * t359 - t488 * t362;
t439 = t237 * t363;
t436 = 0.2e1 * t355 * t467;
t427 = -pkin(1) * t545 + qJ(2) * t496;
t424 = -pkin(5) * t346 - pkin(11) * t345;
t156 = t205 * t345 - t267 * t346;
t423 = -g(1) * t565 - g(2) * t156;
t422 = g(1) * t202 + g(2) * t204;
t37 = pkin(11) * t262 + t41;
t141 = t297 * pkin(3) - t147;
t102 = t198 * pkin(4) + t141;
t145 = t198 * t529 + t199 * t352;
t146 = -t352 * t198 + t199 * t529;
t56 = t145 * pkin(5) - t146 * pkin(11) + t102;
t21 = t359 * t56 + t362 * t37;
t20 = -t359 * t37 + t362 * t56;
t115 = t146 * t362 + t511;
t416 = (-qJ(2) * t456 + t330) * t353 - t293 * t356;
t414 = t362 * t68 + (-t124 * t359 - t474) * t557;
t411 = g(1) * t364 + g(2) * t545;
t331 = -t355 * t528 + qJDD(2);
t409 = pkin(1) * t469 - t331 * t355;
t11 = -t352 * t43 + t39 * t529;
t32 = t529 * t60 - t542;
t40 = -t352 * t75 + t529 * t69;
t406 = -pkin(10) * t173 + t119 * t237;
t30 = -t237 * pkin(5) - t32;
t342 = pkin(4) * t352 + pkin(11);
t405 = t30 * t557 - t342 * t68;
t191 = -t263 * t345 - t297 * t346;
t402 = g(1) * t156 - g(2) * t565 - g(3) * t191;
t157 = t205 * t346 + t267 * t345;
t192 = t263 * t346 - t297 * t345;
t401 = -g(1) * t157 - g(2) * t153 - g(3) * t192;
t399 = g(1) * t205 + g(2) * t201 + g(3) * t263;
t395 = t310 * t473 - t441;
t394 = -t310 * t474 - t440;
t389 = -g(1) * t458 + t450;
t388 = t400 - t80;
t378 = pkin(10) * qJD(4) * t237 - t388;
t5 = -pkin(5) * t173 - t7;
t377 = qJD(6) * t342 * t557 - t402 + t5;
t375 = -t298 * pkin(2) - pkin(9) * t266 + t427;
t374 = t299 * pkin(2) + pkin(9) * t267 + t481;
t371 = -pkin(4) * t509 - t201 * t344 - t202 * t358 + t375;
t370 = pkin(4) * t507 - t204 * t358 + t205 * t344 + t374;
t130 = qJD(2) * t381 + (t236 + (t283 * t354 + t444) * t361) * qJD(3);
t93 = t150 * pkin(4) + t130;
t343 = -pkin(4) * t529 - pkin(5);
t301 = -qJ(2) * t499 + t337;
t288 = pkin(4) * t505;
t275 = -t322 * t352 - t358 * t443;
t273 = t328 + (-qJ(2) * qJDD(1) - t471) * t499;
t258 = pkin(4) * t506;
t256 = pkin(4) * t508;
t253 = t262 * t362;
t226 = -t304 * t529 + t305 * t352;
t161 = t205 * t363 + t507;
t160 = t506 - t515;
t114 = t146 * t359 - t253;
t113 = t157 * t362 + t204 * t359;
t112 = -t157 * t359 + t204 * t362;
t101 = t173 * t262 + t237 * t247;
t99 = -t352 * t150 + t151 * t529;
t98 = t150 * t529 + t151 * t352;
t72 = pkin(4) * t185 + pkin(5) * t404 + pkin(11) * t124;
t59 = qJD(6) * t115 - t247 * t362 + t359 * t99;
t58 = t146 * t474 - t247 * t359 - t262 * t473 - t362 * t99;
t44 = t98 * pkin(5) - t99 * pkin(11) + t93;
t36 = -t262 * pkin(5) - t40;
t35 = t529 * t63 - t542;
t34 = t352 * t63 + t61;
t23 = t35 * t362 + t359 * t72;
t22 = -t35 * t359 + t362 * t72;
t10 = pkin(11) * t247 + t12;
t9 = -t247 * pkin(5) - t11;
t4 = -qJD(6) * t21 - t10 * t359 + t362 * t44;
t3 = qJD(6) * t20 + t10 * t362 + t359 * t44;
t13 = [0, 0, 0, 0, 0, qJDD(1), t465 - t543, t411, 0, 0, t348 * t469, 0.2e1 * t349 * t353 * t468, t353 * t436, t350 * t469, t356 * t436, t357 ^ 2 * qJDD(1), g(1) * t298 - g(2) * t299 + t409 * t356 + (qJDD(1) * t301 + t273 - t429) * t357, -g(1) * t340 + (-t409 + t543) * t353 + (-t303 * qJDD(1) - t274 + (t411 - t452) * t356) * t357, t471 * t553 + (-t273 * t353 + t274 * t356 + (-t301 * t353 + t303 * t356) * qJDD(1) - t411) * t355, t274 * t303 + t273 * t301 - g(1) * t427 - g(2) * t481 + (-t331 * pkin(1) - qJD(2) * t416) * t355, -t248 * t246 + t263 * t550, -t263 * t174 + t246 * t244 - t248 * t247 - t262 * t550, t246 * t287 - t369 * t297 + (t466 + (-t297 + t447) * qJDD(1)) * t263, t174 * t262 + t244 * t247, t174 * t297 + t247 * t287 + t262 * t391, t391 * t297, g(1) * t201 - g(2) * t205 + t130 * t287 - t147 * t391 + t167 * t262 + t186 * t174 + t176 * t247 + t244 * t432 - t85 * t297, t129 * t287 + t148 * t391 + t167 * t263 - t176 * t246 + t186 * t368 + t248 * t432 + t84 * t297 + t422, g(1) * t266 - g(2) * t267 - t129 * t244 + t130 * t248 + t143 * t246 - t144 * t247 - t147 * t368 - t148 * t174 - t84 * t262 - t85 * t263, -g(1) * t375 - g(2) * t374 + t144 * t129 - t143 * t130 + t85 * t147 + t84 * t148 + t167 * t186 + t176 * t432, -t107 * t199 + t151 * t185, t107 * t198 - t108 * t199 - t150 * t185 - t151 * t183, -t107 * t262 + t151 * t237 + t173 * t199 + t185 * t247, t108 * t198 + t150 * t183, -t108 * t262 - t150 * t237 - t173 * t198 - t183 * t247, t101, g(1) * t569 - g(2) * t161 + t141 * t108 + t119 * t150 + t130 * t183 + t86 * t173 + t80 * t198 + t53 * t237 + t76 * t247 + t29 * t262, g(1) * t570 - g(2) * t160 - t141 * t107 + t119 * t151 + t130 * t185 - t87 * t173 + t80 * t199 - t52 * t237 - t77 * t247 + t408 * t262, t107 * t86 - t108 * t87 - t150 * t77 - t151 * t76 - t183 * t52 - t185 * t53 + t198 * t408 - t199 * t29 - t422, -t408 * t87 + t77 * t52 + t29 * t86 + t76 * t53 + t80 * t141 + t119 * t130 - g(1) * (-pkin(3) * t201 + t202 * pkin(10) + t375) - g(2) * (t205 * pkin(3) + t204 * pkin(10) + t374) t146 * t71 + t404 * t99, -t124 * t99 - t145 * t71 - t146 * t70 - t404 * t98, t146 * t173 + t237 * t99 + t247 * t404 + t262 * t71, t124 * t98 + t145 * t70, -t124 * t247 - t145 * t173 - t237 * t98 - t262 * t70, t101, g(1) * t153 - g(2) * t157 + t102 * t70 + t11 * t237 + t124 * t93 + t145 * t55 + t173 * t40 + t247 * t32 + t262 * t7 + t94 * t98, t102 * t71 - t12 * t237 + t146 * t55 - t173 * t41 - t247 * t33 - t262 * t8 + t404 * t93 + t94 * t99 - t423, -t11 * t404 - t12 * t124 - t145 * t8 - t146 * t7 - t32 * t99 - t33 * t98 - t40 * t71 - t41 * t70 - t422, -g(1) * t371 - g(2) * t370 + t55 * t102 + t32 * t11 + t33 * t12 + t7 * t40 + t8 * t41 + t94 * t93, -t105 * t58 - t115 * t46, t103 * t58 - t105 * t59 + t114 * t46 - t115 * t47, t105 * t98 + t115 * t68 - t145 * t46 - t557 * t58, t103 * t59 + t114 * t47, -t103 * t98 - t114 * t68 - t145 * t47 - t557 * t59, t145 * t68 + t557 * t98, g(1) * t573 - g(2) * t113 + t9 * t103 + t5 * t114 + t2 * t145 + t20 * t68 + t30 * t59 + t36 * t47 + t4 * t557 - t417 * t98, -g(1) * t574 - g(2) * t112 - t1 * t145 + t9 * t105 + t5 * t115 - t14 * t98 - t21 * t68 - t3 * t557 - t30 * t58 - t36 * t46, -t1 * t114 - t103 * t3 - t105 * t4 - t115 * t2 - t14 * t59 + t20 * t46 - t21 * t47 - t417 * t58 + t423, t1 * t21 + t14 * t3 + t2 * t20 - t417 * t4 + t5 * t36 + t30 * t9 - g(1) * (-pkin(5) * t153 + pkin(11) * t565 + t371) - g(2) * (t157 * pkin(5) + t156 * pkin(11) + t370); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t353 * t495 - t468) * t355 (qJDD(1) * t353 + t356 * t495) * t355, -t365 * t553, qJDD(2) + (qJD(1) * t416 - t465 - t528) * t355 + t450, 0, 0, 0, 0, 0, 0, t530 * t174 - t279 * t287 + (-t244 * t456 + t287 * t478 - t391 * t546) * t354, -t248 * t433 + t287 * t548 + t530 * t368 + t391 * t498, -t174 * t498 - t244 * t548 + t248 * t419 - t368 * t459, t167 * t530 + t143 * t279 - t144 * t280 + (-t176 * t456 + t546 * t85 + t361 * t84 + (-t143 * t361 + t144 * t546) * qJD(3)) * t354 + t389, 0, 0, 0, 0, 0, 0, -t108 * t459 + t304 * t173 + t183 * t419 - t237 * t485, t107 * t459 - t305 * t173 + t185 * t419 + t237 * t484, t107 * t304 - t108 * t305 + t183 * t484 + t185 * t485, t119 * t419 + t29 * t304 - t305 * t408 - t459 * t80 - t484 * t77 - t485 * t76 + t389, 0, 0, 0, 0, 0, 0, t124 * t419 - t226 * t173 + t237 * t490 - t459 * t70, -t227 * t173 + t237 * t489 + t404 * t419 - t459 * t71, t124 * t489 + t226 * t71 - t227 * t70 - t404 * t490, -t7 * t226 + t8 * t227 - t94 * t279 + (t94 * t478 - t546 * t55) * t354 - t489 * t33 + t490 * t32 + t389, 0, 0, 0, 0, 0, 0, -t103 * t490 + t210 * t68 + t226 * t47 + t491 * t557, -t105 * t490 - t226 * t46 + t396 * t68 - t492 * t557, -t103 * t492 - t105 * t491 + t210 * t46 + t396 * t47, -t1 * t396 + t14 * t492 + t2 * t210 + t5 * t226 - t30 * t490 - t417 * t491 + t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t512, -t244 ^ 2 + t248 ^ 2, -t244 * t287 + t368, -t512, -t248 * t287 - t263 * t470 - t398, -t391, -t144 * t287 - t176 * t248 + t400 + t85, -t143 * t287 + t176 * t244 + t399 - t84, 0, 0, -t107 * t360 + t185 * t439 (-t107 - t519) * t363 + (-t108 - t517) * t360, t173 * t360 - t185 * t248 + t237 * t439, -t108 * t363 + t360 * t519, -t237 ^ 2 * t360 + t173 * t363 + t183 * t248, -t514, -pkin(3) * t108 - t144 * t183 - t237 * t96 - t248 * t76 + t360 * t406 - t363 * t378, pkin(3) * t107 - t144 * t185 + t237 * t97 + t248 * t77 + t360 * t378 + t363 * t406, t183 * t97 + t185 * t96 + ((-t108 + t477) * pkin(10) + t559) * t363 + ((qJD(4) * t183 - t107) * pkin(10) + t556) * t360 - t399, -t119 * t144 - t76 * t96 - t77 * t97 + t388 * pkin(3) + (-t408 * t363 - t29 * t360 + (-t360 * t77 - t363 * t76) * qJD(4) - t399) * pkin(10), t310 * t71 + t404 * t488, -t124 * t488 - t310 * t70 + t403 * t71 - t404 * t482, t173 * t310 + t237 * t488 - t248 * t404, t124 * t482 - t403 * t70, t124 * t248 + t173 * t403 - t237 * t482, -t514, t124 * t426 - t173 * t275 - t237 * t532 - t248 * t32 - t344 * t70 + t346 * t400 - t403 * t55 + t482 * t94, -t173 * t276 - t237 * t531 + t248 * t33 + t310 * t55 - t344 * t71 + t404 * t426 + t488 * t94 - t552, -t124 * t531 + t275 * t71 - t276 * t70 - t310 * t7 - t32 * t488 - t33 * t482 + t403 * t8 + t404 * t532 - t399, -g(1) * t486 - g(2) * t487 - g(3) * t483 - t7 * t275 + t8 * t276 - t32 * t532 + t33 * t531 - t55 * t344 + t426 * t94, t105 * t394 - t46 * t503, t441 * t105 + t440 * t103 + (t541 - t539 + (t103 * t359 - t105 * t362) * qJD(6)) * t310, t105 * t482 + t394 * t557 + t403 * t46 + t503 * t68, t103 * t395 + t47 * t504, -t103 * t482 - t395 * t557 + t403 * t47 - t504 * t68, -t403 * t68 + t482 * t557, t177 * t68 - t2 * t403 + t275 * t47 + t5 * t504 - g(1) * (-t204 * t501 + t205 * t359) - g(2) * (t201 * t359 + t202 * t501) - g(3) * (-t262 * t501 + t263 * t359) - t482 * t417 + t534 * t557 + t533 * t103 + t395 * t30, -t178 * t68 + t1 * t403 - t275 * t46 + t5 * t503 - g(1) * (t204 * t502 + t205 * t362) - g(2) * (t201 * t362 - t202 * t502) - g(3) * (t262 * t502 + t263 * t362) - t482 * t14 - t535 * t557 + t533 * t105 + t394 * t30, t177 * t46 - t178 * t47 + t441 * t14 - t440 * t417 - t534 * t105 - t535 * t103 + t552 + (-t1 * t359 - t2 * t362 + (-t14 * t362 - t359 * t417) * qJD(6)) * t310, t1 * t178 + t2 * t177 + t5 * t275 - g(1) * (t204 * t424 + t486) - g(2) * (-t202 * t424 + t487) - g(3) * (t262 * t424 + t483) + t533 * t30 + t535 * t14 - t534 * t417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t518, -t183 ^ 2 + t185 ^ 2, -t107 + t519, -t518, t517 - t108, t173, -g(1) * t160 - g(2) * t570 + g(3) * t198 - t119 * t185 - t556, g(1) * t161 + g(2) * t569 + g(3) * t199 + t119 * t183 - t559, 0, 0, t560, -t521 + t523, t71 + t520, -t560, -t70 + t522, t173, -t94 * t404 + t34 * t237 + (-t124 * t185 + t173 * t529) * pkin(4) + t402 + t7, t124 * t94 + t237 * t35 + (-t173 * t352 - t185 * t404) * pkin(4) - t401 - t8 (-t352 * t70 - t529 * t71) * pkin(4) + (t33 - t34) * t404 + (t35 - t32) * t124, -g(1) * t258 - g(2) * t256 + g(3) * t288 + t32 * t34 - t33 * t35 + (-t94 * t185 + t8 * t352 + t360 * t399 + t529 * t7) * pkin(4), t105 * t437 - t541 (-t46 - t526) * t362 - t555 + t536, -t524 - t558, t103 * t438 - t539, t414 + t527, -t557 * t404, -t103 * t34 - t22 * t557 + t343 * t47 + t359 * t405 - t362 * t377 + t404 * t417, -t105 * t34 + t14 * t404 + t23 * t557 - t343 * t46 + t359 * t377 + t362 * t405, t103 * t23 + t105 * t22 + (t124 * t417 - t342 * t47 + t1 + (t105 * t342 + t417) * qJD(6)) * t362 + (-t124 * t14 - t342 * t46 - t2 + (t103 * t342 - t14) * qJD(6)) * t359 + t401, t5 * t343 - t14 * t23 + t417 * t22 - t30 * t34 - g(1) * (-pkin(4) * t515 - pkin(5) * t156 + pkin(11) * t157 + t258) - g(2) * (-pkin(4) * t516 + pkin(5) * t565 + pkin(11) * t153 + t256) - g(3) * (-pkin(4) * t510 + pkin(5) * t191 + pkin(11) * t192 - t288) + (t1 * t362 - t2 * t359 + (-t14 * t359 + t362 * t417) * qJD(6)) * t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 + t522, t71 - t520, -t521 - t523, t124 * t33 + t32 * t404 - t400 + t55, 0, 0, 0, 0, 0, 0, t414 - t527, -t524 + t558 (t46 - t526) * t362 + t555 + t536, -t404 * t30 + t359 * t563 + t362 * t564 - t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t525, -t103 ^ 2 + t105 ^ 2, t103 * t557 - t46, -t525, -t442 + (-qJD(6) + t557) * t105, t68, -t30 * t105 - g(1) * t112 + g(2) * t574 - g(3) * (-t192 * t359 + t253) + t564, t30 * t103 + g(1) * t113 + g(2) * t573 - g(3) * (-t192 * t362 - t511) - t563, 0, 0;];
tau_reg  = t13;
