% Calculate vector of inverse dynamics joint torques for
% S6RPRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2,theta5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRRPR9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRRPR9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRPR9_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RPRRPR9_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:32:08
% EndTime: 2019-03-09 05:32:29
% DurationCPUTime: 16.69s
% Computational Cost: add. (20961->704), mult. (66938->975), div. (0->0), fcn. (58592->18), ass. (0->316)
t798 = sin(pkin(12));
t800 = sin(pkin(6));
t802 = cos(pkin(12));
t806 = sin(qJ(3));
t955 = cos(pkin(7));
t891 = t806 * t955;
t963 = cos(qJ(3));
t821 = t800 * (-t798 * t891 + t802 * t963);
t723 = qJD(1) * t821;
t799 = sin(pkin(7));
t899 = qJD(3) * t963;
t867 = t799 * t899;
t994 = t723 - t867;
t863 = t955 * t963;
t843 = t802 * t863;
t956 = cos(pkin(6));
t887 = t956 * t799;
t846 = t963 * t887;
t993 = t800 * t843 + t846;
t919 = qJD(1) * t800;
t902 = t798 * t919;
t976 = qJD(1) * t993 - t806 * t902;
t686 = qJD(4) - t976;
t807 = sin(qJ(1));
t810 = cos(qJ(1));
t889 = t810 * t956;
t740 = t807 * t798 - t802 * t889;
t741 = t798 * t889 + t807 * t802;
t931 = t800 * t810;
t934 = t799 * t806;
t650 = -t740 * t891 + t741 * t963 - t931 * t934;
t892 = t800 * t955;
t709 = t740 * t799 - t810 * t892;
t796 = qJ(4) + pkin(13);
t790 = sin(t796);
t791 = cos(t796);
t612 = t650 * t791 + t709 * t790;
t903 = t799 * t963;
t872 = t800 * t903;
t649 = t740 * t863 + t741 * t806 + t810 * t872;
t804 = sin(qJ(6));
t808 = cos(qJ(6));
t992 = t612 * t804 - t649 * t808;
t991 = t612 * t808 + t649 * t804;
t886 = qJD(1) * t956;
t868 = pkin(1) * t886;
t901 = t802 * t919;
t737 = qJ(2) * t901 + t798 * t868;
t820 = (t802 * t892 + t887) * pkin(9);
t678 = qJD(1) * t820 + t737;
t937 = t798 * t799;
t727 = (-pkin(2) * t802 - pkin(9) * t937 - pkin(1)) * t800;
t715 = qJD(1) * t727 + qJD(2);
t774 = t802 * t868;
t936 = t798 * t800;
t815 = t956 * pkin(2) + (-pkin(9) * t955 - qJ(2)) * t936;
t687 = qJD(1) * t815 + t774;
t845 = t687 * t863;
t604 = -t806 * t678 + t715 * t903 + t845;
t864 = t802 * t891;
t865 = t806 * t887;
t705 = t800 * (t798 * t963 + t864) + t865;
t696 = t705 * qJD(1);
t634 = pkin(3) * t696 - pkin(10) * t976;
t809 = cos(qJ(4));
t630 = t809 * t634;
t805 = sin(qJ(4));
t803 = -qJ(5) - pkin(10);
t893 = qJD(4) * t803;
t990 = -pkin(4) * t696 - t630 + (qJ(5) * t976 + t893) * t809 + (-qJD(5) + t604) * t805;
t928 = t809 * t604 + t805 * t634;
t945 = t976 * t805;
t989 = -qJ(5) * t945 - qJD(5) * t809 - t805 * t893 + t928;
t748 = t805 * t955 + t809 * t934;
t871 = t799 * t902;
t988 = qJD(4) * t748 - t805 * t994 + t809 * t871;
t747 = -t805 * t934 + t809 * t955;
t987 = -qJD(4) * t747 + t805 * t871 + t809 * t994;
t943 = t709 * t805;
t986 = t650 * t809 + t943;
t854 = t956 * t955;
t732 = -qJD(1) * t854 + t799 * t901 - qJD(3);
t640 = t696 * t805 + t809 * t732;
t642 = t696 * t809 - t732 * t805;
t797 = sin(pkin(13));
t801 = cos(pkin(13));
t848 = -t640 * t797 + t801 * t642;
t949 = t848 * t804;
t571 = -t808 * t686 + t949;
t877 = -t801 * t640 - t642 * t797;
t967 = qJD(6) - t877;
t985 = t571 * t967;
t573 = t686 * t804 + t808 * t848;
t984 = t573 * t967;
t754 = t797 * t805 - t801 * t809;
t980 = t686 * t754;
t755 = t797 * t809 + t801 * t805;
t922 = t686 * t755;
t695 = t705 * qJD(3);
t909 = qJDD(1) * t800;
t896 = t798 * t909;
t633 = qJD(1) * t695 - qJDD(1) * t993 + t806 * t896;
t978 = t798 * t863 + t802 * t806;
t632 = qJD(3) * t976 + qJDD(1) * t865 + t864 * t909 + t896 * t963;
t908 = qJDD(1) * t802;
t895 = t800 * t908;
t731 = -qJDD(1) * t854 + t799 * t895 - qJDD(3);
t915 = qJD(4) * t809;
t916 = qJD(4) * t805;
t575 = t809 * t632 - t696 * t916 - t805 * t731 - t732 * t915;
t576 = qJD(4) * t642 + t632 * t805 + t809 * t731;
t549 = -t575 * t797 - t801 * t576;
t547 = qJDD(6) - t549;
t875 = t967 * t808;
t977 = -t547 * t804 - t967 * t875;
t975 = t650 * t805 - t709 * t809;
t794 = t800 ^ 2;
t973 = t794 * (t798 ^ 2 + t802 ^ 2);
t904 = pkin(1) * t956;
t782 = t802 * t904;
t706 = t782 + t815;
t643 = -t706 * t799 + t955 * t727;
t935 = t798 * t806;
t704 = t800 * t935 - t993;
t597 = pkin(3) * t704 - pkin(10) * t705 + t643;
t933 = t800 * t802;
t739 = t799 * t933 - t854;
t746 = qJ(2) * t933 + t798 * t904;
t700 = t820 + t746;
t905 = t700 * t963 + t706 * t891 + t727 * t934;
t603 = -pkin(10) * t739 + t905;
t929 = t805 * t597 + t809 * t603;
t927 = t797 * t987 - t801 * t988;
t972 = t797 * t988 + t801 * t987;
t925 = t989 * t797 + t801 * t990;
t923 = t797 * t990 - t989 * t801;
t814 = -t806 * t700 + t706 * t863 + t727 * t903;
t647 = t705 * t805 + t739 * t809;
t648 = t705 * t809 - t739 * t805;
t607 = -t647 * t797 + t648 * t801;
t699 = t704 * t808;
t971 = -t607 * t804 + t699;
t722 = t978 * t919;
t917 = qJD(3) * t806;
t900 = t799 * t917;
t970 = t722 - t900;
t605 = t678 * t963 + t687 * t891 + t715 * t934;
t969 = -t605 + (t916 - t945) * pkin(4);
t966 = pkin(4) * t576 + qJDD(5);
t890 = t807 * t956;
t742 = -t798 * t890 + t810 * t802;
t827 = t810 * t798 + t802 * t890;
t819 = t827 * t955;
t932 = t800 * t807;
t654 = t742 * t963 + (t799 * t932 - t819) * t806;
t710 = t799 * t827 + t807 * t892;
t618 = -t654 * t805 + t710 * t809;
t965 = -g(1) * t618 + g(2) * t975 + g(3) * t647;
t631 = qJDD(4) + t633;
t635 = -t687 * t799 + t955 * t715;
t583 = -pkin(3) * t976 - pkin(10) * t696 + t635;
t585 = -pkin(10) * t732 + t605;
t556 = t583 * t805 + t585 * t809;
t866 = qJDD(1) * t904;
t910 = qJD(1) * qJD(2);
t897 = t800 * t910;
t717 = qJ(2) * t895 + t798 * t866 + t802 * t897;
t659 = qJDD(1) * t820 + t717;
t772 = t802 * t866;
t660 = qJDD(1) * t815 - t798 * t897 + t772;
t711 = qJDD(1) * t727 + qJDD(2);
t823 = qJD(3) * t845 + t659 * t963 + t660 * t891 - t678 * t917 + t711 * t934 + t715 * t867;
t558 = -pkin(10) * t731 + t823;
t625 = -t660 * t799 + t955 * t711;
t567 = pkin(3) * t633 - pkin(10) * t632 + t625;
t883 = -t805 * t558 + t809 * t567;
t817 = -qJD(4) * t556 + t883;
t509 = pkin(4) * t631 - qJ(5) * t575 - qJD(5) * t642 + t817;
t837 = -t809 * t558 - t805 * t567 - t583 * t915 + t585 * t916;
t511 = -qJ(5) * t576 - qJD(5) * t640 - t837;
t498 = t509 * t801 - t511 * t797;
t496 = -pkin(5) * t631 - t498;
t787 = pkin(4) * t797 + pkin(11);
t964 = t967 * (pkin(4) * t642 + pkin(5) * t848 - pkin(11) * t877 + qJD(6) * t787) + g(1) * (-t654 * t790 + t710 * t791) + g(2) * (-t650 * t790 + t709 * t791) + g(3) * (-t705 * t790 - t739 * t791) + t496;
t962 = pkin(1) * t794;
t961 = pkin(3) * t731;
t958 = g(1) * t807;
t550 = t575 * t801 - t576 * t797;
t913 = qJD(6) * t808;
t906 = t808 * t550 + t804 * t631 + t686 * t913;
t914 = qJD(6) * t804;
t527 = -t848 * t914 + t906;
t954 = t527 * t804;
t543 = -qJ(5) * t640 + t556;
t953 = t543 * t797;
t951 = t571 * t848;
t950 = t573 * t848;
t947 = t640 * t686;
t946 = t642 * t686;
t944 = t704 * t804;
t942 = t710 * t805;
t941 = t755 * t804;
t940 = t755 * t808;
t939 = t791 * t804;
t938 = t791 * t808;
t540 = t801 * t543;
t544 = t808 * t547;
t499 = t797 * t509 + t801 * t511;
t694 = (t846 + (t843 - t935) * t800) * qJD(3);
t610 = -qJD(4) * t647 + t694 * t809;
t592 = qJD(2) * t821 + qJD(3) * t814;
t918 = qJD(2) * t800;
t869 = t918 * t937;
t622 = pkin(3) * t695 - pkin(10) * t694 + t869;
t882 = -t592 * t805 + t809 * t622;
t521 = pkin(4) * t695 - qJ(5) * t610 - qJD(4) * t929 - qJD(5) * t648 + t882;
t609 = qJD(4) * t648 + t694 * t805;
t836 = t809 * t592 + t597 * t915 - t603 * t916 + t805 * t622;
t525 = -qJ(5) * t609 - qJD(5) * t647 + t836;
t503 = t797 * t521 + t801 * t525;
t555 = t809 * t583 - t585 * t805;
t542 = -qJ(5) * t642 + t555;
t539 = pkin(4) * t686 + t542;
t515 = t797 * t539 + t540;
t881 = t809 * t597 - t603 * t805;
t548 = pkin(4) * t704 - qJ(5) * t648 + t881;
t554 = -qJ(5) * t647 + t929;
t523 = t797 * t548 + t801 * t554;
t924 = pkin(5) * t696 - t925;
t921 = t810 * pkin(1) + qJ(2) * t932;
t912 = t731 * MDP(12);
t789 = pkin(4) * t809 + pkin(3);
t898 = t803 * t805;
t894 = -t807 * pkin(1) + qJ(2) * t931;
t811 = qJD(1) ^ 2;
t888 = t811 * t956;
t497 = pkin(11) * t631 + t499;
t862 = qJD(3) * t891;
t841 = t806 * t659 - t660 * t863 + t678 * t899 + t687 * t862 - t711 * t903 + t715 * t900;
t559 = t841 + t961;
t534 = t559 + t966;
t507 = -pkin(5) * t549 - pkin(11) * t550 + t534;
t885 = -t804 * t497 + t808 * t507;
t884 = t550 * t804 - t808 * t631;
t880 = -t808 * t696 + t804 * t980;
t879 = t696 * t804 + t808 * t980;
t876 = t686 * t809;
t653 = t742 * t806 - t807 * t872 + t819 * t963;
t861 = -g(1) * t649 + g(2) * t653;
t860 = g(1) * t810 + g(2) * t807;
t859 = qJD(2) * t886;
t858 = g(2) * t931 - g(3) * t956;
t697 = pkin(5) * t754 - pkin(11) * t755 - t789;
t856 = pkin(11) * t696 - qJD(6) * t697 - t923;
t766 = t803 * t809;
t719 = -t801 * t766 + t797 * t898;
t855 = -pkin(5) * t922 - pkin(11) * t980 + qJD(6) * t719 - t969;
t593 = t700 * t899 + t706 * t862 + t727 * t900 + t918 * t978;
t853 = t808 * t497 + t804 * t507;
t513 = pkin(11) * t686 + t515;
t584 = t732 * pkin(3) - t604;
t568 = t640 * pkin(4) + qJD(5) + t584;
t533 = -pkin(5) * t877 - pkin(11) * t848 + t568;
t505 = t513 * t808 + t533 * t804;
t852 = t513 * t804 - t533 * t808;
t519 = pkin(11) * t704 + t523;
t606 = t801 * t647 + t648 * t797;
t602 = t739 * pkin(3) - t814;
t812 = t647 * pkin(4) + t602;
t535 = t606 * pkin(5) - t607 * pkin(11) + t812;
t851 = t519 * t808 + t535 * t804;
t850 = -t519 * t804 + t535 * t808;
t502 = t521 * t801 - t525 * t797;
t514 = t539 * t801 - t953;
t522 = t548 * t801 - t554 * t797;
t580 = t607 * t808 + t944;
t847 = (-qJ(2) * t902 + t774) * t798 - t737 * t802;
t842 = t544 + (t804 * t877 - t914) * t967;
t838 = -pkin(10) * t631 + t584 * t686;
t835 = g(1) * t653 + g(2) * t649 + g(3) * t704;
t834 = -g(1) * t654 - g(2) * t650 - g(3) * t705;
t676 = t747 * t797 + t748 * t801;
t832 = -t804 * t676 - t808 * t903;
t831 = -t808 * t676 + t804 * t903;
t830 = t755 * t913 - t880;
t829 = -t755 * t914 - t879;
t828 = pkin(4) * t609 + t593;
t512 = -pkin(5) * t686 - t514;
t517 = t542 * t801 - t953;
t822 = -t787 * t547 + (t512 + t517) * t967;
t816 = pkin(10) * qJD(4) * t686 + t559 - t835;
t813 = t835 - t841;
t788 = -pkin(4) * t801 - pkin(5);
t775 = -pkin(1) * t909 + qJDD(2);
t744 = -qJ(2) * t936 + t782;
t718 = -t766 * t797 - t801 * t898;
t716 = t772 + (-qJ(2) * qJDD(1) - t910) * t936;
t675 = -t801 * t747 + t748 * t797;
t645 = t705 * t791 - t739 * t790;
t619 = t654 * t809 + t942;
t615 = t654 * t791 + t710 * t790;
t578 = t615 * t808 + t653 * t804;
t577 = -t615 * t804 + t653 * t808;
t570 = -t609 * t797 + t610 * t801;
t569 = t801 * t609 + t610 * t797;
t538 = qJD(6) * t580 + t570 * t804 - t695 * t808;
t537 = qJD(6) * t971 + t570 * t808 + t695 * t804;
t528 = qJD(6) * t573 + t884;
t526 = pkin(5) * t569 - pkin(11) * t570 + t828;
t518 = -pkin(5) * t704 - t522;
t516 = t542 * t797 + t540;
t501 = pkin(11) * t695 + t503;
t500 = -pkin(5) * t695 - t502;
t495 = -qJD(6) * t505 + t885;
t494 = -qJD(6) * t852 + t853;
t1 = [(t910 * t973 + (-t716 * t798 + t717 * t802 + (-t744 * t798 + t746 * t802) * qJDD(1) - t860) * t800) * MDP(6) + (-t498 * t607 - t499 * t606 - t502 * t848 + t503 * t877 - t514 * t570 - t515 * t569 - t522 * t550 + t523 * t549 - t861) * MDP(22) + (t527 * t971 - t528 * t580 - t537 * t571 - t538 * t573) * MDP(25) + (-t528 * t606 - t538 * t967 + t547 * t971 - t569 * t571) * MDP(27) + (-t632 * t704 - t633 * t705 + t694 * t976 - t695 * t696) * MDP(9) + (g(1) * t650 - g(2) * t654 + t593 * t732 + t625 * t704 + t643 * t633 + t635 * t695 - t731 * t814 + t739 * t841 - t869 * t976) * MDP(13) + (t527 * t580 + t537 * t573) * MDP(24) + ((-qJD(6) * t851 - t501 * t804 + t526 * t808) * t967 + t850 * t547 + t495 * t606 - t852 * t569 + t500 * t571 + t518 * t528 - t496 * t971 + t512 * t538 + g(1) * t991 - g(2) * t578) * MDP(29) + (-(qJD(6) * t850 + t501 * t808 + t526 * t804) * t967 - t851 * t547 - t494 * t606 - t505 * t569 + t500 * t573 + t518 * t527 + t496 * t580 + t512 * t537 - g(1) * t992 - g(2) * t577) * MDP(30) + (-t575 * t647 - t576 * t648 - t609 * t642 - t610 * t640) * MDP(16) + (t575 * t648 + t610 * t642) * MDP(15) + qJDD(1) * MDP(1) + (t575 * t704 + t610 * t686 + t631 * t648 + t642 * t695) * MDP(17) + (t631 * t704 + t686 * t695) * MDP(19) + (-t576 * t704 - t609 * t686 - t631 * t647 - t640 * t695) * MDP(18) + (t632 * t705 + t694 * t696) * MDP(8) + (t499 * t523 + t515 * t503 + t498 * t522 + t514 * t502 + t534 * t812 + t568 * t828 - g(1) * (-t741 * pkin(2) - pkin(4) * t943 + t649 * t803 - t650 * t789 + t894) - g(2) * (t742 * pkin(2) + pkin(4) * t942 - t653 * t803 + t654 * t789 + t921) + (g(1) * t709 - g(2) * t710) * pkin(9)) * MDP(23) + (t527 * t606 + t537 * t967 + t547 * t580 + t569 * t573) * MDP(26) + (t547 * t606 + t569 * t967) * MDP(28) + (t882 * t686 + t881 * t631 + t883 * t704 + t555 * t695 + t593 * t640 + t602 * t576 + t559 * t647 + t584 * t609 + g(1) * t986 - g(2) * t619 + (-t556 * t704 - t686 * t929) * qJD(4)) * MDP(20) + (-t717 * t956 - g(1) * t740 + g(2) * t827 + (t775 * t798 - t802 * t859) * t800 + (-t746 * t956 - t798 * t962) * qJDD(1)) * MDP(5) + (t716 * t956 + g(1) * t741 - g(2) * t742 + (-t775 * t802 - t798 * t859) * t800 + (t744 * t956 + t802 * t962) * qJDD(1)) * MDP(4) + (-g(2) * t810 + t958) * MDP(2) + (t717 * t746 + t716 * t744 - g(1) * t894 - g(2) * t921 + (-t775 * pkin(1) - qJD(2) * t847) * t800) * MDP(7) + (t592 * t732 + t625 * t705 + t643 * t632 + t635 * t694 + t696 * t869 + t731 * t905 + t739 * t823 + t861) * MDP(14) + t860 * MDP(3) + (t633 * t739 + t695 * t732 + t704 * t731) * MDP(11) + (-t632 * t739 - t694 * t732 - t705 * t731) * MDP(10) + (-g(1) * t975 - g(2) * t618 - t556 * t695 + t559 * t648 + t602 * t575 + t584 * t610 + t593 * t642 - t929 * t631 - t836 * t686 + t837 * t704) * MDP(21) + t739 * t912; -t811 * MDP(6) * t973 + (qJDD(2) + t858) * MDP(7) + (t955 * t633 - t722 * t732 + (-t731 * t963 + t732 * t917 + t902 * t976) * t799) * MDP(13) + (t955 * t632 - t723 * t732 + (-t696 * t902 + t731 * t806 + t732 * t899) * t799) * MDP(14) + (-t576 * t903 + t747 * t631 - t970 * t640 - t686 * t988) * MDP(20) + (-t575 * t903 - t748 * t631 - t970 * t642 + t686 * t987) * MDP(21) + (t549 * t676 + t550 * t675 - t848 * t927 - t877 * t972) * MDP(22) + (-g(1) * t932 - t498 * t675 + t499 * t676 + t514 * t927 - t515 * t972 - t534 * t903 - t568 * t970 + t858) * MDP(23) + (t675 * t528 + t832 * t547 + (qJD(6) * t831 + t804 * t972 - t808 * t970) * t967 - t927 * t571) * MDP(29) + (t675 * t527 + t831 * t547 + (-qJD(6) * t832 + t804 * t970 + t808 * t972) * t967 - t927 * t573) * MDP(30) + ((t798 * t888 - t908) * MDP(4) + (qJDD(1) * t798 + t802 * t888) * MDP(5) + (-pkin(1) * qJDD(1) + qJD(1) * t847 - t958) * MDP(7)) * t800; -t976 ^ 2 * MDP(9) + (t732 * t976 + t632) * MDP(10) - t633 * MDP(11) - t912 + (-t605 * t732 + t813) * MDP(13) + (-t604 * t732 - t635 * t976 - t823 - t834) * MDP(14) + (t575 * t805 + t642 * t876) * MDP(15) + ((t575 - t947) * t809 + (-t576 - t946) * t805) * MDP(16) + (t631 * t805 + t686 * t876) * MDP(17) + (-t686 ^ 2 * t805 + t631 * t809) * MDP(18) + (-pkin(3) * t576 - t605 * t640 - t630 * t686 + (t604 * t686 + t838) * t805 - t816 * t809) * MDP(20) + (-pkin(3) * t575 - t605 * t642 + t686 * t928 + t805 * t816 + t809 * t838) * MDP(21) + (-t498 * t755 - t499 * t754 + t514 * t980 - t922 * t515 + t549 * t719 + t550 * t718 - t925 * t848 + t923 * t877 + t834) * MDP(22) + (t499 * t719 - t498 * t718 - t534 * t789 - g(1) * (-t653 * t789 - t654 * t803) - g(2) * (-t649 * t789 - t650 * t803) - g(3) * (-t704 * t789 - t705 * t803) + t969 * t568 + t923 * t515 + t925 * t514) * MDP(23) + (t527 * t940 + t573 * t829) * MDP(24) + (t880 * t573 + t879 * t571 + (-t954 - t528 * t808 + (t571 * t804 - t573 * t808) * qJD(6)) * t755) * MDP(25) + (t527 * t754 + t544 * t755 + t573 * t922 + t829 * t967) * MDP(26) + (-t528 * t754 - t547 * t941 - t571 * t922 - t830 * t967) * MDP(27) + (t547 * t754 + t922 * t967) * MDP(28) + ((t697 * t808 - t719 * t804) * t547 + t495 * t754 + t718 * t528 + t496 * t941 - g(1) * (-t653 * t938 + t654 * t804) - g(2) * (-t649 * t938 + t650 * t804) - g(3) * (-t704 * t938 + t705 * t804) + (t804 * t856 - t808 * t855) * t967 + t924 * t571 - t922 * t852 + t830 * t512) * MDP(29) + (-(t697 * t804 + t719 * t808) * t547 - t494 * t754 + t718 * t527 + t496 * t940 - g(1) * (t653 * t939 + t654 * t808) - g(2) * (t649 * t939 + t650 * t808) - g(3) * (t704 * t939 + t705 * t808) + (t804 * t855 + t808 * t856) * t967 + t924 * t573 - t922 * t505 + t829 * t512) * MDP(30) + (-MDP(11) * t732 - MDP(13) * t635 - MDP(17) * t642 + MDP(18) * t640 - MDP(19) * t686 - MDP(20) * t555 + MDP(21) * t556 - MDP(8) * t976 + MDP(9) * t696) * t696; t642 * t640 * MDP(15) + (-t640 ^ 2 + t642 ^ 2) * MDP(16) + (t575 + t947) * MDP(17) + (-t576 + t946) * MDP(18) + t631 * MDP(19) + (t556 * t686 - t584 * t642 + t817 + t965) * MDP(20) + (g(1) * t619 + g(2) * t986 + g(3) * t648 + t555 * t686 + t584 * t640 + t837) * MDP(21) + ((t549 * t797 - t550 * t801) * pkin(4) + (t514 - t517) * t877 + (t515 - t516) * t848) * MDP(22) + (t514 * t516 - t515 * t517 + (t498 * t801 + t499 * t797 - t568 * t642 + t965) * pkin(4)) * MDP(23) + (t573 * t875 + t954) * MDP(24) + ((t527 - t985) * t808 + (-t528 - t984) * t804) * MDP(25) + (-t950 - t977) * MDP(26) + (t842 + t951) * MDP(27) - t967 * t848 * MDP(28) + (-t516 * t571 + t788 * t528 + t822 * t804 - t808 * t964 + t848 * t852) * MDP(29) + (t505 * t848 - t516 * t573 + t788 * t527 + t804 * t964 + t822 * t808) * MDP(30); (-t848 ^ 2 - t877 ^ 2) * MDP(22) + (t514 * t848 - t515 * t877 - t813 + t961 + t966) * MDP(23) + (t842 - t951) * MDP(29) + (-t950 + t977) * MDP(30); t573 * t571 * MDP(24) + (-t571 ^ 2 + t573 ^ 2) * MDP(25) + (t906 + t985) * MDP(26) + (-t884 + t984) * MDP(27) + t547 * MDP(28) + (t505 * t967 - t512 * t573 - g(1) * t577 + g(2) * t992 - g(3) * (-t645 * t804 + t699) + t885) * MDP(29) + (-t852 * t967 + t512 * t571 + g(1) * t578 + g(2) * t991 - g(3) * (-t645 * t808 - t944) - t853) * MDP(30) + (-MDP(26) * t949 - MDP(27) * t573 - MDP(29) * t505 + MDP(30) * t852) * qJD(6);];
tau  = t1;
