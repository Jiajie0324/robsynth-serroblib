% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,d6,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 12:06
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 12:05:52
% EndTime: 2019-05-05 12:06:05
% DurationCPUTime: 13.24s
% Computational Cost: add. (154719->371), mult. (320062->601), div. (0->0), fcn. (263808->16), ass. (0->330)
t2567 = sin(pkin(13));
t2570 = cos(pkin(13));
t2552 = g(1) * t2567 - g(2) * t2570;
t2566 = -g(3) + qJDD(1);
t2569 = sin(pkin(6));
t2572 = cos(pkin(6));
t2668 = t2552 * t2572 + t2566 * t2569;
t2568 = sin(pkin(7));
t2581 = cos(qJ(3));
t2646 = t2568 * t2581;
t2636 = qJD(2) * t2646;
t2631 = -qJD(4) + t2636;
t2629 = t2631 ^ 2;
t2571 = cos(pkin(7));
t2561 = qJD(2) * t2571 + qJD(3);
t2575 = sin(qJ(4));
t2580 = cos(qJ(4));
t2576 = sin(qJ(3));
t2647 = t2568 * t2576;
t2637 = qJD(2) * t2647;
t2527 = -t2580 * t2561 + t2575 * t2637;
t2525 = qJD(5) + t2527;
t2523 = qJD(6) + t2525;
t2667 = qJD(6) + t2523;
t2553 = -g(1) * t2570 - g(2) * t2567;
t2577 = sin(qJ(2));
t2582 = cos(qJ(2));
t2511 = -t2577 * t2553 + t2582 * t2668;
t2583 = qJD(2) ^ 2;
t2586 = t2583 * t2568 * pkin(9) + qJDD(2) * pkin(2) + t2511;
t2640 = qJDD(2) * t2568;
t2535 = qJD(3) * t2636 + t2576 * t2640;
t2560 = t2571 * qJDD(2) + qJDD(3);
t2595 = t2580 * t2535 + t2575 * t2560;
t2499 = -t2527 * qJD(4) + t2595;
t2483 = t2527 * t2631 + t2499;
t2529 = t2561 * t2575 + t2580 * t2637;
t2574 = sin(qJ(5));
t2579 = cos(qJ(5));
t2513 = t2529 * t2574 + t2579 * t2631;
t2515 = t2579 * t2529 - t2574 * t2631;
t2573 = sin(qJ(6));
t2578 = cos(qJ(6));
t2487 = t2578 * t2513 + t2515 * t2573;
t2666 = t2487 ^ 2;
t2489 = -t2513 * t2573 + t2515 * t2578;
t2665 = t2489 ^ 2;
t2664 = t2513 ^ 2;
t2663 = t2515 ^ 2;
t2662 = t2523 ^ 2;
t2661 = t2525 ^ 2;
t2660 = t2527 ^ 2;
t2659 = t2529 ^ 2;
t2658 = t2561 ^ 2;
t2656 = qJD(2) * t2561;
t2655 = qJD(2) * t2568;
t2654 = t2487 * t2489;
t2653 = t2513 * t2515;
t2652 = t2525 * t2513;
t2651 = t2527 * t2529;
t2649 = t2568 ^ 2 * t2583;
t2530 = -t2552 * t2569 + t2566 * t2572;
t2645 = t2571 * t2530;
t2643 = qJD(5) - t2525;
t2642 = qJD(6) - t2523;
t2512 = t2582 * t2553 + t2577 * t2668;
t2505 = -pkin(2) * t2583 + pkin(9) * t2640 + t2512;
t2585 = t2571 * t2586;
t2463 = t2581 * t2505 + t2530 * t2647 + t2576 * t2585;
t2534 = (-pkin(3) * t2581 - pkin(10) * t2576) * t2655;
t2454 = -pkin(3) * t2658 + pkin(10) * t2560 + t2534 * t2636 + t2463;
t2555 = qJD(3) * t2637;
t2639 = qJDD(2) * t2581;
t2584 = t2555 * pkin(3) - t2535 * pkin(10) + t2645 + (-t2581 * pkin(10) * t2656 + (t2576 * t2656 - t2639) * pkin(3) - t2586) * t2568;
t2425 = t2580 * t2454 + t2575 * t2584;
t2506 = pkin(4) * t2527 - pkin(11) * t2529;
t2630 = t2568 * t2639 - t2555;
t2592 = qJDD(4) - t2630;
t2408 = -pkin(4) * t2629 + pkin(11) * t2592 - t2527 * t2506 + t2425;
t2641 = -t2530 * t2646 - t2581 * t2585;
t2453 = -t2560 * pkin(3) - t2658 * pkin(10) + (t2534 * t2655 + t2505) * t2576 + t2641;
t2633 = t2575 * t2535 - t2580 * t2560;
t2481 = (0.2e1 * qJD(4) - t2636) * t2529 + t2633;
t2421 = t2481 * pkin(4) - pkin(11) * t2483 + t2453;
t2384 = t2579 * t2408 + t2574 * t2421;
t2383 = -t2574 * t2408 + t2579 * t2421;
t2424 = -t2454 * t2575 + t2580 * t2584;
t2588 = -t2579 * t2499 - t2574 * t2592;
t2469 = -t2513 * qJD(5) - t2588;
t2634 = t2574 * t2499 - t2579 * t2592;
t2591 = qJD(5) * t2515 + t2634;
t2635 = -t2573 * t2469 - t2578 * t2591;
t2632 = t2561 * t2636;
t2590 = t2529 * qJD(4) + qJDD(5) + t2633;
t2459 = t2590 - t2653;
t2367 = (-t2469 - t2652) * pkin(12) + t2459 * pkin(5) + t2383;
t2495 = pkin(5) * t2525 - pkin(12) * t2515;
t2370 = -pkin(5) * t2664 - pkin(12) * t2591 - t2525 * t2495 + t2384;
t2342 = t2367 * t2578 - t2370 * t2573;
t2343 = t2367 * t2573 + t2370 * t2578;
t2323 = t2342 * t2578 + t2343 * t2573;
t2324 = -t2342 * t2573 + t2343 * t2578;
t2314 = -t2323 * t2574 + t2324 * t2579;
t2407 = -t2592 * pkin(4) - t2629 * pkin(11) + t2506 * t2529 - t2424;
t2388 = pkin(5) * t2591 - pkin(12) * t2664 + t2495 * t2515 + t2407;
t2308 = t2314 * t2575 - t2388 * t2580;
t2309 = t2314 * t2580 + t2388 * t2575;
t2313 = t2323 * t2579 + t2324 * t2574;
t2627 = t2309 * t2576 - t2313 * t2581;
t2301 = -t2568 * t2308 + t2571 * t2627;
t2302 = t2309 * t2581 + t2313 * t2576;
t2628 = t2301 * t2582 + t2302 * t2577;
t2401 = -t2489 * t2642 + t2635;
t2587 = -t2578 * t2469 + t2573 * t2591;
t2403 = t2487 * t2642 + t2587;
t2375 = t2401 * t2573 + t2403 * t2578;
t2376 = t2401 * t2578 - t2403 * t2573;
t2351 = -t2375 * t2574 + t2376 * t2579;
t2432 = -t2665 - t2666;
t2344 = t2351 * t2575 - t2432 * t2580;
t2345 = t2351 * t2580 + t2432 * t2575;
t2350 = t2375 * t2579 + t2376 * t2574;
t2622 = t2345 * t2576 - t2350 * t2581;
t2318 = -t2568 * t2344 + t2571 * t2622;
t2327 = t2345 * t2581 + t2350 * t2576;
t2626 = t2318 * t2582 + t2327 * t2577;
t2354 = -t2383 * t2574 + t2384 * t2579;
t2346 = t2354 * t2575 - t2407 * t2580;
t2347 = t2354 * t2580 + t2407 * t2575;
t2353 = t2383 * t2579 + t2384 * t2574;
t2621 = t2347 * t2576 - t2353 * t2581;
t2321 = -t2568 * t2346 + t2571 * t2621;
t2330 = t2347 * t2581 + t2353 * t2576;
t2625 = t2321 * t2582 + t2330 * t2577;
t2589 = -qJDD(6) - t2590;
t2439 = -t2589 - t2654;
t2445 = -t2662 - t2666;
t2409 = t2439 * t2578 + t2445 * t2573;
t2410 = -t2439 * t2573 + t2445 * t2578;
t2381 = -t2409 * t2574 + t2410 * t2579;
t2400 = t2489 * t2667 - t2635;
t2359 = t2381 * t2575 - t2400 * t2580;
t2360 = t2381 * t2580 + t2400 * t2575;
t2380 = t2409 * t2579 + t2410 * t2574;
t2618 = t2360 * t2576 - t2380 * t2581;
t2332 = -t2568 * t2359 + t2571 * t2618;
t2341 = t2360 * t2581 + t2380 * t2576;
t2624 = t2332 * t2582 + t2341 * t2577;
t2440 = t2589 - t2654;
t2461 = -t2662 - t2665;
t2415 = t2440 * t2573 + t2461 * t2578;
t2416 = t2440 * t2578 - t2461 * t2573;
t2386 = -t2415 * t2574 + t2416 * t2579;
t2402 = -t2487 * t2667 - t2587;
t2361 = t2386 * t2575 - t2402 * t2580;
t2362 = t2386 * t2580 + t2402 * t2575;
t2385 = t2415 * t2579 + t2416 * t2574;
t2617 = t2362 * t2576 - t2385 * t2581;
t2334 = -t2568 * t2361 + t2571 * t2617;
t2348 = t2362 * t2581 + t2385 * t2576;
t2623 = t2334 * t2582 + t2348 * t2577;
t2390 = t2424 * t2580 + t2425 * t2575;
t2391 = -t2424 * t2575 + t2425 * t2580;
t2614 = t2391 * t2576 - t2453 * t2581;
t2356 = -t2568 * t2390 + t2571 * t2614;
t2382 = t2391 * t2581 + t2453 * t2576;
t2620 = t2356 * t2582 + t2382 * t2577;
t2447 = -t2515 * t2643 - t2634;
t2449 = t2513 * t2643 + t2588;
t2414 = t2447 * t2579 - t2449 * t2574;
t2470 = -t2663 - t2664;
t2396 = t2414 * t2575 - t2470 * t2580;
t2397 = t2414 * t2580 + t2470 * t2575;
t2413 = t2447 * t2574 + t2449 * t2579;
t2613 = t2397 * t2576 - t2413 * t2581;
t2358 = -t2568 * t2396 + t2571 * t2613;
t2377 = t2397 * t2581 + t2413 * t2576;
t2619 = t2358 * t2582 + t2377 * t2577;
t2476 = -t2661 - t2664;
t2436 = -t2459 * t2574 + t2476 * t2579;
t2446 = (qJD(5) + t2525) * t2515 + t2634;
t2404 = t2436 * t2575 - t2446 * t2580;
t2405 = t2436 * t2580 + t2446 * t2575;
t2435 = t2459 * t2579 + t2476 * t2574;
t2611 = t2405 * t2576 - t2435 * t2581;
t2366 = -t2568 * t2404 + t2571 * t2611;
t2389 = t2405 * t2581 + t2435 * t2576;
t2616 = t2366 * t2582 + t2389 * t2577;
t2460 = -t2590 - t2653;
t2485 = -t2661 - t2663;
t2438 = t2460 * t2579 - t2485 * t2574;
t2448 = t2469 - t2652;
t2411 = t2438 * t2575 - t2448 * t2580;
t2412 = t2438 * t2580 + t2448 * t2575;
t2437 = t2460 * t2574 + t2485 * t2579;
t2610 = t2412 * t2576 - t2437 * t2581;
t2369 = -t2568 * t2411 + t2571 * t2610;
t2392 = t2412 * t2581 + t2437 * t2576;
t2615 = t2369 * t2582 + t2392 * t2577;
t2482 = -t2529 * t2636 - t2633;
t2484 = t2527 * t2636 - t2595;
t2450 = t2482 * t2575 + t2484 * t2580;
t2451 = t2482 * t2580 - t2484 * t2575;
t2494 = -t2659 - t2660;
t2606 = t2451 * t2576 - t2494 * t2581;
t2399 = -t2568 * t2450 + t2571 * t2606;
t2431 = t2451 * t2581 + t2494 * t2576;
t2612 = t2399 * t2582 + t2431 * t2577;
t2492 = -t2568 * t2586 + t2645;
t2462 = -t2576 * t2505 - t2641;
t2605 = t2462 * t2581 + t2463 * t2576;
t2418 = -t2568 * t2492 + t2571 * t2605;
t2430 = -t2462 * t2576 + t2463 * t2581;
t2609 = t2418 * t2582 + t2430 * t2577;
t2497 = t2592 - t2651;
t2500 = -t2629 - t2660;
t2466 = t2497 * t2580 + t2500 * t2575;
t2467 = -t2497 * t2575 + t2500 * t2580;
t2604 = t2467 * t2576 - t2481 * t2581;
t2423 = -t2568 * t2466 + t2571 * t2604;
t2443 = t2467 * t2581 + t2481 * t2576;
t2608 = t2423 * t2582 + t2443 * t2577;
t2496 = -t2592 - t2651;
t2507 = -t2659 - t2629;
t2473 = t2496 * t2575 + t2507 * t2580;
t2474 = t2496 * t2580 - t2507 * t2575;
t2603 = t2474 * t2576 - t2483 * t2581;
t2427 = -t2568 * t2473 + t2571 * t2603;
t2444 = t2474 * t2581 + t2483 * t2576;
t2607 = t2427 * t2582 + t2444 * t2577;
t2564 = t2576 ^ 2;
t2565 = t2581 ^ 2;
t2541 = (-t2564 - t2565) * t2649;
t2517 = t2632 - t2535;
t2543 = t2561 * t2637;
t2518 = t2543 + t2630;
t2598 = t2517 * t2581 + t2518 * t2576;
t2478 = -t2568 * t2541 + t2571 * t2598;
t2493 = -t2517 * t2576 + t2518 * t2581;
t2602 = t2478 * t2582 + t2493 * t2577;
t2516 = t2632 + t2535;
t2524 = -t2564 * t2649 - t2658;
t2551 = t2576 * t2581 * t2649;
t2533 = t2551 - t2560;
t2597 = t2524 * t2581 + t2533 * t2576;
t2480 = -t2568 * t2516 + t2571 * t2597;
t2504 = -t2524 * t2576 + t2533 * t2581;
t2601 = t2480 * t2582 + t2504 * t2577;
t2519 = t2543 - t2630;
t2532 = t2551 + t2560;
t2536 = -t2565 * t2649 - t2658;
t2596 = t2532 * t2581 + t2536 * t2576;
t2491 = -t2568 * t2519 + t2571 * t2596;
t2509 = -t2532 * t2576 + t2536 * t2581;
t2600 = t2491 * t2582 + t2509 * t2577;
t2599 = t2511 * t2582 + t2512 * t2577;
t2593 = qJDD(2) * t2582 - t2577 * t2583;
t2550 = -qJDD(2) * t2577 - t2582 * t2583;
t2540 = t2593 * t2572;
t2539 = t2550 * t2572;
t2538 = t2593 * t2569;
t2537 = t2550 * t2569;
t2490 = t2571 * t2519 + t2568 * t2596;
t2486 = -t2511 * t2577 + t2512 * t2582;
t2479 = t2571 * t2516 + t2568 * t2597;
t2477 = t2571 * t2541 + t2568 * t2598;
t2472 = -t2569 * t2530 + t2572 * t2599;
t2471 = t2572 * t2530 + t2569 * t2599;
t2464 = -t2491 * t2577 + t2509 * t2582;
t2458 = -t2480 * t2577 + t2504 * t2582;
t2455 = -t2478 * t2577 + t2493 * t2582;
t2442 = -t2569 * t2490 + t2572 * t2600;
t2441 = t2572 * t2490 + t2569 * t2600;
t2434 = -t2569 * t2479 + t2572 * t2601;
t2433 = t2572 * t2479 + t2569 * t2601;
t2429 = -t2569 * t2477 + t2572 * t2602;
t2428 = t2572 * t2477 + t2569 * t2602;
t2426 = t2571 * t2473 + t2568 * t2603;
t2422 = t2571 * t2466 + t2568 * t2604;
t2417 = t2571 * t2492 + t2568 * t2605;
t2398 = t2571 * t2450 + t2568 * t2606;
t2395 = -t2427 * t2577 + t2444 * t2582;
t2394 = -t2423 * t2577 + t2443 * t2582;
t2393 = -t2418 * t2577 + t2430 * t2582;
t2387 = -t2399 * t2577 + t2431 * t2582;
t2379 = -t2569 * t2426 + t2572 * t2607;
t2378 = t2572 * t2426 + t2569 * t2607;
t2374 = -t2569 * t2422 + t2572 * t2608;
t2373 = t2572 * t2422 + t2569 * t2608;
t2372 = -t2569 * t2417 + t2572 * t2609;
t2371 = t2572 * t2417 + t2569 * t2609;
t2368 = t2571 * t2411 + t2568 * t2610;
t2365 = t2571 * t2404 + t2568 * t2611;
t2364 = -t2569 * t2398 + t2572 * t2612;
t2363 = t2572 * t2398 + t2569 * t2612;
t2357 = t2571 * t2396 + t2568 * t2613;
t2355 = t2571 * t2390 + t2568 * t2614;
t2352 = -t2369 * t2577 + t2392 * t2582;
t2349 = -t2366 * t2577 + t2389 * t2582;
t2340 = -t2358 * t2577 + t2377 * t2582;
t2339 = -t2356 * t2577 + t2382 * t2582;
t2338 = -t2569 * t2368 + t2572 * t2615;
t2337 = t2572 * t2368 + t2569 * t2615;
t2336 = -t2569 * t2365 + t2572 * t2616;
t2335 = t2572 * t2365 + t2569 * t2616;
t2333 = t2571 * t2361 + t2568 * t2617;
t2331 = t2571 * t2359 + t2568 * t2618;
t2329 = -t2569 * t2357 + t2572 * t2619;
t2328 = t2572 * t2357 + t2569 * t2619;
t2326 = -t2569 * t2355 + t2572 * t2620;
t2325 = t2572 * t2355 + t2569 * t2620;
t2322 = -t2334 * t2577 + t2348 * t2582;
t2320 = t2571 * t2346 + t2568 * t2621;
t2319 = -t2332 * t2577 + t2341 * t2582;
t2317 = t2571 * t2344 + t2568 * t2622;
t2316 = -t2569 * t2333 + t2572 * t2623;
t2315 = t2572 * t2333 + t2569 * t2623;
t2312 = -t2569 * t2331 + t2572 * t2624;
t2311 = t2572 * t2331 + t2569 * t2624;
t2310 = -t2321 * t2577 + t2330 * t2582;
t2307 = -t2318 * t2577 + t2327 * t2582;
t2306 = -t2569 * t2320 + t2572 * t2625;
t2305 = t2572 * t2320 + t2569 * t2625;
t2304 = -t2569 * t2317 + t2572 * t2626;
t2303 = t2572 * t2317 + t2569 * t2626;
t2300 = t2571 * t2308 + t2568 * t2627;
t2299 = -t2301 * t2577 + t2302 * t2582;
t2298 = -t2569 * t2300 + t2572 * t2628;
t2297 = t2572 * t2300 + t2569 * t2628;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2552 * t2567 + t2553 * t2570, 0, 0, 0, 0, 0, 0, -t2540 * t2567 + t2550 * t2570, -t2539 * t2567 - t2570 * t2593, 0, -t2472 * t2567 + t2486 * t2570, 0, 0, 0, 0, 0, 0, -t2442 * t2567 + t2464 * t2570, -t2434 * t2567 + t2458 * t2570, -t2429 * t2567 + t2455 * t2570, -t2372 * t2567 + t2393 * t2570, 0, 0, 0, 0, 0, 0, -t2374 * t2567 + t2394 * t2570, -t2379 * t2567 + t2395 * t2570, -t2364 * t2567 + t2387 * t2570, -t2326 * t2567 + t2339 * t2570, 0, 0, 0, 0, 0, 0, -t2336 * t2567 + t2349 * t2570, -t2338 * t2567 + t2352 * t2570, -t2329 * t2567 + t2340 * t2570, -t2306 * t2567 + t2310 * t2570, 0, 0, 0, 0, 0, 0, -t2312 * t2567 + t2319 * t2570, -t2316 * t2567 + t2322 * t2570, -t2304 * t2567 + t2307 * t2570, -t2298 * t2567 + t2299 * t2570; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2552 * t2570 + t2553 * t2567, 0, 0, 0, 0, 0, 0, t2540 * t2570 + t2550 * t2567, t2539 * t2570 - t2567 * t2593, 0, t2472 * t2570 + t2486 * t2567, 0, 0, 0, 0, 0, 0, t2442 * t2570 + t2464 * t2567, t2434 * t2570 + t2458 * t2567, t2429 * t2570 + t2455 * t2567, t2372 * t2570 + t2393 * t2567, 0, 0, 0, 0, 0, 0, t2374 * t2570 + t2394 * t2567, t2379 * t2570 + t2395 * t2567, t2364 * t2570 + t2387 * t2567, t2326 * t2570 + t2339 * t2567, 0, 0, 0, 0, 0, 0, t2336 * t2570 + t2349 * t2567, t2338 * t2570 + t2352 * t2567, t2329 * t2570 + t2340 * t2567, t2306 * t2570 + t2310 * t2567, 0, 0, 0, 0, 0, 0, t2312 * t2570 + t2319 * t2567, t2316 * t2570 + t2322 * t2567, t2304 * t2570 + t2307 * t2567, t2298 * t2570 + t2299 * t2567; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2566, 0, 0, 0, 0, 0, 0, t2538, t2537, 0, t2471, 0, 0, 0, 0, 0, 0, t2441, t2433, t2428, t2371, 0, 0, 0, 0, 0, 0, t2373, t2378, t2363, t2325, 0, 0, 0, 0, 0, 0, t2335, t2337, t2328, t2305, 0, 0, 0, 0, 0, 0, t2311, t2315, t2303, t2297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2553, 0, 0, 0, 0, 0, 0, t2550, -t2593, 0, t2486, 0, 0, 0, 0, 0, 0, t2464, t2458, t2455, t2393, 0, 0, 0, 0, 0, 0, t2394, t2395, t2387, t2339, 0, 0, 0, 0, 0, 0, t2349, t2352, t2340, t2310, 0, 0, 0, 0, 0, 0, t2319, t2322, t2307, t2299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2552, 0, 0, 0, 0, 0, 0, t2540, t2539, 0, t2472, 0, 0, 0, 0, 0, 0, t2442, t2434, t2429, t2372, 0, 0, 0, 0, 0, 0, t2374, t2379, t2364, t2326, 0, 0, 0, 0, 0, 0, t2336, t2338, t2329, t2306, 0, 0, 0, 0, 0, 0, t2312, t2316, t2304, t2298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2566, 0, 0, 0, 0, 0, 0, t2538, t2537, 0, t2471, 0, 0, 0, 0, 0, 0, t2441, t2433, t2428, t2371, 0, 0, 0, 0, 0, 0, t2373, t2378, t2363, t2325, 0, 0, 0, 0, 0, 0, t2335, t2337, t2328, t2305, 0, 0, 0, 0, 0, 0, t2311, t2315, t2303, t2297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2583, -qJDD(2), 0, t2512, 0, 0, 0, 0, 0, 0, t2509, t2504, t2493, t2430, 0, 0, 0, 0, 0, 0, t2443, t2444, t2431, t2382, 0, 0, 0, 0, 0, 0, t2389, t2392, t2377, t2330, 0, 0, 0, 0, 0, 0, t2341, t2348, t2327, t2302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2583, 0, t2511, 0, 0, 0, 0, 0, 0, t2491, t2480, t2478, t2418, 0, 0, 0, 0, 0, 0, t2423, t2427, t2399, t2356, 0, 0, 0, 0, 0, 0, t2366, t2369, t2358, t2321, 0, 0, 0, 0, 0, 0, t2332, t2334, t2318, t2301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2530, 0, 0, 0, 0, 0, 0, t2490, t2479, t2477, t2417, 0, 0, 0, 0, 0, 0, t2422, t2426, t2398, t2355, 0, 0, 0, 0, 0, 0, t2365, t2368, t2357, t2320, 0, 0, 0, 0, 0, 0, t2331, t2333, t2317, t2300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2536, t2533, t2518, t2463, 0, 0, 0, 0, 0, 0, t2467, t2474, t2451, t2391, 0, 0, 0, 0, 0, 0, t2405, t2412, t2397, t2347, 0, 0, 0, 0, 0, 0, t2360, t2362, t2345, t2309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2532, t2524, t2517, t2462, 0, 0, 0, 0, 0, 0, -t2481, -t2483, -t2494, -t2453, 0, 0, 0, 0, 0, 0, -t2435, -t2437, -t2413, -t2353, 0, 0, 0, 0, 0, 0, -t2380, -t2385, -t2350, -t2313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2519, t2516, t2541, t2492, 0, 0, 0, 0, 0, 0, t2466, t2473, t2450, t2390, 0, 0, 0, 0, 0, 0, t2404, t2411, t2396, t2346, 0, 0, 0, 0, 0, 0, t2359, t2361, t2344, t2308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2500, t2496, t2482, t2425, 0, 0, 0, 0, 0, 0, t2436, t2438, t2414, t2354, 0, 0, 0, 0, 0, 0, t2381, t2386, t2351, t2314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2497, t2507, t2484, t2424, 0, 0, 0, 0, 0, 0, -t2446, -t2448, -t2470, -t2407, 0, 0, 0, 0, 0, 0, -t2400, -t2402, -t2432, -t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2481, t2483, t2494, t2453, 0, 0, 0, 0, 0, 0, t2435, t2437, t2413, t2353, 0, 0, 0, 0, 0, 0, t2380, t2385, t2350, t2313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2476, t2460, t2447, t2384, 0, 0, 0, 0, 0, 0, t2410, t2416, t2376, t2324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2459, t2485, t2449, t2383, 0, 0, 0, 0, 0, 0, t2409, t2415, t2375, t2323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2446, t2448, t2470, t2407, 0, 0, 0, 0, 0, 0, t2400, t2402, t2432, t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2445, t2440, t2401, t2343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2439, t2461, t2403, t2342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2400, t2402, t2432, t2388;];
f_new_reg  = t1;
