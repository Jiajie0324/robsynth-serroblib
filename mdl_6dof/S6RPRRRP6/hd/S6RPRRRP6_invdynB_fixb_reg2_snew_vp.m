% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:38
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:37:14
% EndTime: 2019-05-06 01:37:41
% DurationCPUTime: 23.92s
% Computational Cost: add. (166974->765), mult. (397052->1128), div. (0->0), fcn. (307660->10), ass. (0->548)
t931 = sin(qJ(5));
t928 = sin(pkin(10));
t929 = cos(pkin(10));
t933 = sin(qJ(3));
t937 = cos(qJ(3));
t901 = (t928 * t937 + t929 * t933) * qJD(1);
t932 = sin(qJ(4));
t936 = cos(qJ(4));
t879 = -qJD(3) * t936 + t901 * t932;
t880 = qJD(3) * t932 + t901 * t936;
t935 = cos(qJ(5));
t832 = t935 * t879 + t880 * t931;
t834 = -t879 * t931 + t880 * t935;
t777 = t834 * t832;
t975 = qJDD(1) * t937;
t977 = qJDD(1) * t933;
t897 = t928 * t977 - t929 * t975;
t982 = t901 * qJD(3);
t859 = -t897 - t982;
t851 = qJDD(4) - t859;
t850 = qJDD(5) + t851;
t954 = -t850 + t777;
t1004 = t954 * t931;
t1003 = t954 * t935;
t934 = sin(qJ(1));
t938 = cos(qJ(1));
t912 = t938 * g(1) + t934 * g(2);
t1055 = -0.2e1 * qJD(2) * qJD(1) + t912;
t1049 = t954 * pkin(5);
t899 = (t928 * t933 - t929 * t937) * qJD(1);
t892 = qJD(4) + t899;
t846 = t892 * t879;
t898 = -t928 * t975 - t929 * t977;
t983 = t899 * qJD(3);
t860 = -t983 - t898;
t965 = t879 * qJD(4) - t932 * qJDD(3) - t936 * t860;
t782 = -t846 + t965;
t939 = qJD(1) ^ 2;
t1054 = -t939 * pkin(1) + qJDD(1) * qJ(2) - t1055;
t864 = t901 * t899;
t1044 = -t864 + qJDD(3);
t1053 = t1044 * t933;
t1052 = t1044 * t937;
t838 = t880 * t879;
t1047 = -t838 + t851;
t1051 = t1047 * t932;
t1050 = t1047 * t936;
t911 = t934 * g(1) - t938 * g(2);
t951 = -qJDD(2) + t911;
t964 = pkin(2) * t929 + pkin(1);
t925 = t928 ^ 2;
t926 = t929 ^ 2;
t985 = t925 + t926;
t854 = t964 * qJDD(1) + (pkin(7) * t985 + qJ(2)) * t939 + t951;
t953 = -t936 * qJDD(3) + t932 * t860;
t950 = qJD(4) * t880 + t953;
t724 = -t832 * qJD(5) - t931 * t950 - t935 * t965;
t888 = qJD(5) + t892;
t807 = t888 * t832;
t1048 = -t807 + t724;
t781 = t965 + t846;
t752 = t777 + t850;
t1006 = t752 * t931;
t831 = t834 ^ 2;
t886 = t888 ^ 2;
t786 = -t831 - t886;
t706 = t786 * t935 - t1006;
t1005 = t752 * t935;
t707 = -t786 * t931 - t1005;
t643 = t706 * t936 + t707 * t932;
t1046 = -pkin(3) * t643 - pkin(4) * t706;
t830 = t832 ^ 2;
t764 = -t886 - t830;
t680 = t764 * t931 - t1003;
t681 = t764 * t935 + t1004;
t623 = t680 * t936 + t681 * t932;
t1045 = -pkin(3) * t623 - pkin(4) * t680;
t1042 = t939 * t985;
t955 = -t931 * t965 + t935 * t950;
t694 = (qJD(5) - t888) * t834 + t955;
t783 = (qJD(4) - t892) * t880 + t953;
t1040 = t879 ^ 2;
t878 = t880 ^ 2;
t891 = t892 ^ 2;
t895 = t899 ^ 2;
t896 = t901 ^ 2;
t1039 = qJD(3) ^ 2;
t1036 = pkin(3) * t933;
t693 = -t807 - t724;
t635 = t693 * t935 - t694 * t931;
t637 = -t693 * t931 - t694 * t935;
t576 = -t635 * t932 + t637 * t936;
t735 = -t830 - t831;
t564 = t576 * t933 - t735 * t937;
t565 = t576 * t937 + t735 * t933;
t502 = -t564 * t928 + t565 * t929;
t574 = t635 * t936 + t637 * t932;
t489 = t502 * t934 - t574 * t938;
t1033 = pkin(6) * t489;
t624 = -t680 * t932 + t681 * t936;
t689 = (qJD(5) + t888) * t834 + t955;
t587 = t624 * t933 - t689 * t937;
t588 = t624 * t937 + t689 * t933;
t540 = -t587 * t928 + t588 * t929;
t509 = t540 * t934 - t623 * t938;
t1032 = pkin(6) * t509;
t644 = -t706 * t932 + t707 * t936;
t596 = -t1048 * t937 + t644 * t933;
t597 = t1048 * t933 + t644 * t937;
t547 = -t596 * t928 + t597 * t929;
t516 = t547 * t934 - t643 * t938;
t1031 = pkin(6) * t516;
t1030 = pkin(7) * t564;
t1029 = pkin(7) * t587;
t1028 = pkin(7) * t596;
t1027 = pkin(8) * t574;
t1026 = pkin(8) * t623;
t1025 = pkin(8) * t643;
t1024 = pkin(9) * t635;
t1023 = pkin(9) * t680;
t1022 = pkin(9) * t706;
t1021 = t929 * g(3);
t501 = t564 * t929 + t565 * t928;
t1020 = qJ(2) * t501;
t539 = t587 * t929 + t588 * t928;
t1019 = qJ(2) * t539;
t546 = t596 * t929 + t597 * t928;
t1018 = qJ(2) * t546;
t1017 = qJDD(1) * pkin(1);
t866 = -g(3) * t928 + t1054 * t929;
t920 = t926 * t939;
t978 = qJDD(1) * t929;
t845 = -pkin(2) * t920 + pkin(7) * t978 + t866;
t942 = -t1021 + (t964 * t939 + (-pkin(7) - qJ(2)) * qJDD(1) + t1055) * t928;
t788 = t937 * t845 + t933 * t942;
t852 = pkin(3) * t899 - pkin(8) * t901;
t749 = -pkin(3) * t1039 + qJDD(3) * pkin(8) - t852 * t899 + t788;
t756 = (-t860 + t983) * pkin(8) + (-t859 + t982) * pkin(3) - t854;
t677 = t932 * t749 - t936 * t756;
t647 = t1047 * pkin(4) + pkin(9) * t782 - t677;
t678 = t936 * t749 + t932 * t756;
t842 = pkin(4) * t892 - pkin(9) * t880;
t655 = -pkin(4) * t1040 - pkin(9) * t950 - t892 * t842 + t678;
t583 = -t935 * t647 + t931 * t655;
t584 = t931 * t647 + t935 * t655;
t531 = -t583 * t935 + t584 * t931;
t1016 = t531 * t932;
t1015 = t531 * t936;
t966 = t724 * qJ(6) + t583;
t948 = -qJ(6) * t807 - t966;
t984 = qJD(6) * t834;
t556 = t948 - 0.2e1 * t984 - t1049;
t1014 = t556 * t931;
t1013 = t556 * t935;
t787 = t845 * t933 - t937 * t942;
t748 = -qJDD(3) * pkin(3) - t1039 * pkin(8) + t852 * t901 + t787;
t672 = t950 * pkin(4) - t1040 * pkin(9) + t842 * t880 + t748;
t1012 = t672 * t931;
t1011 = t672 * t935;
t727 = -t787 * t937 + t788 * t933;
t1010 = t727 * t928;
t1009 = t727 * t929;
t1008 = t748 * t932;
t1007 = t748 * t936;
t795 = t838 + t851;
t1002 = t795 * t932;
t1001 = t795 * t936;
t1000 = t854 * t933;
t999 = t854 * t937;
t855 = qJDD(3) + t864;
t998 = t855 * t933;
t997 = t855 * t937;
t996 = t888 * t931;
t995 = t888 * t935;
t994 = t892 * t932;
t993 = t892 * t936;
t893 = t939 * qJ(2) + t1017 + t951;
t992 = t893 * t934;
t991 = t893 * t938;
t990 = t925 * t939;
t989 = t928 * t929;
t988 = -pkin(1) * t574 + qJ(2) * t502;
t987 = -pkin(1) * t623 + qJ(2) * t540;
t986 = -pkin(1) * t643 + qJ(2) * t547;
t976 = qJDD(1) * t934;
t974 = qJDD(1) * t938;
t972 = t933 * t777;
t971 = t937 * t777;
t970 = t933 * t838;
t969 = t937 * t838;
t968 = t934 * t864;
t967 = t938 * t864;
t963 = -pkin(3) * t937 - pkin(2);
t962 = -pkin(2) * t574 + pkin(7) * t565;
t961 = -pkin(2) * t623 + pkin(7) * t588;
t960 = -pkin(2) * t643 + pkin(7) * t597;
t959 = -pkin(4) * t735 + pkin(9) * t637;
t958 = -pkin(4) * t689 + pkin(9) * t681;
t957 = -pkin(4) * t1048 + pkin(9) * t707;
t956 = t893 + t1017;
t532 = t583 * t931 + t935 * t584;
t728 = t787 * t933 + t937 * t788;
t865 = t1054 * t928 + t1021;
t814 = t865 * t928 + t929 * t866;
t877 = -t911 * t934 - t938 * t912;
t543 = -pkin(3) * t574 - pkin(4) * t635;
t910 = -t934 * t939 + t974;
t952 = -pkin(6) * t910 - g(3) * t934;
t619 = -t677 * t936 + t678 * t932;
t620 = t677 * t932 + t678 * t936;
t813 = t865 * t929 - t866 * t928;
t876 = t911 * t938 - t912 * t934;
t909 = t938 * t939 + t976;
t903 = t929 * t1042;
t873 = -t903 * t934 + t929 * t974;
t949 = t903 * t938 + t929 * t976;
t723 = -qJD(5) * t834 - t955;
t797 = pkin(5) * t888 - qJ(6) * t834;
t947 = t723 * qJ(6) - 0.2e1 * qJD(6) * t832 - t888 * t797 + t584;
t946 = -pkin(1) * t501 - pkin(2) * t564 + pkin(3) * t735 - pkin(8) * t576;
t945 = -pkin(1) * t539 - pkin(2) * t587 + pkin(3) * t689 - pkin(8) * t624;
t944 = -pkin(1) * t546 - pkin(2) * t596 + pkin(3) * t1048 - pkin(8) * t644;
t609 = -t723 * pkin(5) - t830 * qJ(6) + t797 * t834 + qJDD(6) + t672;
t919 = t926 * qJDD(1);
t918 = t925 * qJDD(1);
t908 = t920 - t990;
t907 = t920 + t990;
t906 = t919 - t918;
t905 = t919 + t918;
t902 = t928 * t1042;
t894 = -pkin(6) * t909 + g(3) * t938;
t885 = -t896 - t1039;
t884 = -t896 + t1039;
t883 = t895 - t1039;
t882 = t910 * t989;
t881 = t909 * t989;
t874 = t902 * t938 + t928 * t976;
t872 = t902 * t934 - t928 * t974;
t868 = t905 * t938 - t907 * t934;
t867 = t905 * t934 + t907 * t938;
t863 = -t896 + t895;
t861 = 0.2e1 * t983 + t898;
t858 = t897 + 0.2e1 * t982;
t853 = -t1039 - t895;
t848 = (-t899 * t937 + t901 * t933) * qJD(3);
t847 = (-t899 * t933 - t901 * t937) * qJD(3);
t844 = -t878 + t891;
t843 = -t891 + t1040;
t837 = -t895 - t896;
t836 = -t878 + t1040;
t828 = t860 * t937 - t933 * t982;
t827 = t860 * t933 + t937 * t982;
t826 = -t859 * t933 + t937 * t983;
t825 = t859 * t937 + t933 * t983;
t824 = 0.2e1 * t984;
t822 = -t878 - t891;
t821 = -t885 * t933 - t997;
t820 = -t884 * t933 + t1052;
t819 = t883 * t937 - t998;
t818 = t885 * t937 - t998;
t817 = t884 * t937 + t1053;
t816 = t883 * t933 + t997;
t815 = -t891 - t1040;
t806 = t878 + t1040;
t805 = -t858 * t937 + t861 * t933;
t804 = -t897 * t937 - t898 * t933;
t803 = -t858 * t933 - t861 * t937;
t802 = -t897 * t933 + t898 * t937;
t801 = -t831 + t886;
t800 = t830 - t886;
t799 = t853 * t937 - t1053;
t798 = t853 * t933 + t1052;
t793 = (-t879 * t936 + t880 * t932) * t892;
t792 = (t879 * t932 + t880 * t936) * t892;
t791 = -t847 * t928 + t848 * t929;
t790 = t814 * t938 - t992;
t789 = t814 * t934 + t991;
t784 = -pkin(7) * t818 - t999;
t778 = (-qJD(4) - t892) * t880 - t953;
t776 = -t831 + t830;
t775 = -pkin(7) * t798 - t1000;
t774 = -t880 * t994 - t936 * t965;
t773 = -t880 * t993 + t932 * t965;
t772 = t879 * t993 + t932 * t950;
t771 = -t879 * t994 + t936 * t950;
t770 = -t827 * t928 + t828 * t929;
t769 = -t825 * t928 + t826 * t929;
t768 = -t818 * t928 + t821 * t929;
t767 = -t817 * t928 + t820 * t929;
t766 = -t816 * t928 + t819 * t929;
t765 = t818 * t929 + t821 * t928;
t763 = t793 * t937 + t851 * t933;
t762 = t793 * t933 - t851 * t937;
t761 = t843 * t936 - t1002;
t760 = -t844 * t932 + t1050;
t759 = -t843 * t932 - t1001;
t758 = -t844 * t936 - t1051;
t757 = pkin(2) * t861 + pkin(7) * t821 - t1000;
t750 = -pkin(2) * t858 + pkin(7) * t799 + t999;
t747 = -t822 * t932 - t1001;
t746 = t822 * t936 - t1002;
t744 = (-t832 * t935 + t834 * t931) * t888;
t743 = (-t832 * t931 - t834 * t935) * t888;
t742 = -t803 * t928 + t805 * t929;
t741 = -t802 * t928 + t804 * t929;
t740 = t802 * t929 + t804 * t928;
t739 = t815 * t936 - t1051;
t738 = t815 * t932 + t1050;
t737 = -t798 * t928 + t799 * t929;
t736 = t798 * t929 + t799 * t928;
t734 = t768 * t938 - t861 * t934;
t733 = t768 * t934 + t861 * t938;
t732 = t774 * t937 + t970;
t731 = t772 * t937 - t970;
t730 = t774 * t933 - t969;
t729 = t772 * t933 + t969;
t726 = t737 * t938 + t858 * t934;
t725 = t737 * t934 - t858 * t938;
t719 = t741 * t938 + t837 * t934;
t718 = t741 * t934 - t837 * t938;
t717 = -t782 * t932 - t783 * t936;
t716 = t778 * t936 + t781 * t932;
t715 = t782 * t936 - t783 * t932;
t714 = -t778 * t932 + t781 * t936;
t713 = t800 * t935 - t1006;
t712 = -t801 * t931 - t1003;
t711 = t800 * t931 + t1005;
t710 = t801 * t935 - t1004;
t709 = pkin(2) * t854 + pkin(7) * t728;
t708 = -pkin(1) * t740 - pkin(2) * t802;
t704 = t761 * t937 - t783 * t933;
t703 = t760 * t937 - t782 * t933;
t702 = t761 * t933 + t783 * t937;
t701 = t760 * t933 + t782 * t937;
t700 = t747 * t937 - t781 * t933;
t699 = t747 * t933 + t781 * t937;
t698 = -pkin(7) * t802 - t727;
t697 = -t762 * t928 + t763 * t929;
t696 = t739 * t937 - t778 * t933;
t695 = t739 * t933 + t778 * t937;
t688 = t724 * t935 - t834 * t996;
t687 = t724 * t931 + t834 * t995;
t686 = -t723 * t931 + t832 * t995;
t685 = t723 * t935 + t832 * t996;
t684 = t716 * t937 - t836 * t933;
t683 = t716 * t933 + t836 * t937;
t682 = -pkin(1) * t765 - pkin(2) * t818 + t788;
t676 = -pkin(8) * t746 + t1007;
t675 = t717 * t937 - t806 * t933;
t674 = t717 * t933 + t806 * t937;
t673 = -pkin(8) * t738 + t1008;
t671 = -t743 * t932 + t744 * t936;
t670 = -t743 * t936 - t744 * t932;
t669 = -pkin(2) * t837 + pkin(7) * t804 + t728;
t668 = -pkin(1) * t736 - pkin(2) * t798 + t787;
t667 = -t730 * t928 + t732 * t929;
t666 = -t729 * t928 + t731 * t929;
t665 = t671 * t937 + t850 * t933;
t664 = t671 * t933 - t850 * t937;
t663 = -qJ(2) * t765 - t757 * t928 + t784 * t929;
t662 = t728 * t929 - t1010;
t661 = t728 * t928 + t1009;
t660 = -pkin(5) * t1048 - qJ(6) * t752;
t659 = -qJ(2) * t736 - t750 * t928 + t775 * t929;
t658 = t662 * t938 - t854 * t934;
t657 = t662 * t934 + t854 * t938;
t656 = -pkin(3) * t746 + t678;
t654 = -pkin(3) * t738 + t677;
t651 = -t711 * t932 + t713 * t936;
t650 = -t710 * t932 + t712 * t936;
t649 = -t711 * t936 - t713 * t932;
t648 = -t710 * t936 - t712 * t932;
t641 = -t702 * t928 + t704 * t929;
t640 = -t701 * t928 + t703 * t929;
t639 = -t699 * t928 + t700 * t929;
t638 = t699 * t929 + t700 * t928;
t636 = -t1048 * t931 - t689 * t935;
t634 = t1048 * t935 - t689 * t931;
t633 = -t695 * t928 + t696 * t929;
t632 = t695 * t929 + t696 * t928;
t630 = t1011 - t1022;
t629 = -t687 * t932 + t688 * t936;
t628 = -t685 * t932 + t686 * t936;
t627 = -t687 * t936 - t688 * t932;
t626 = -t685 * t936 - t686 * t932;
t625 = -t683 * t928 + t684 * t929;
t621 = -pkin(1) * t661 - pkin(2) * t727;
t618 = t1012 - t1023;
t617 = -t674 * t928 + t675 * t929;
t616 = t674 * t929 + t675 * t928;
t615 = t629 * t937 + t972;
t614 = t628 * t937 - t972;
t613 = t629 * t933 - t971;
t612 = t628 * t933 + t971;
t611 = t639 * t938 + t746 * t934;
t610 = t639 * t934 - t746 * t938;
t608 = t633 * t938 + t738 * t934;
t607 = t633 * t934 - t738 * t938;
t606 = -t664 * t928 + t665 * t929;
t605 = t664 * t929 + t665 * t928;
t604 = t651 * t937 - t694 * t933;
t603 = t650 * t937 - t693 * t933;
t602 = t651 * t933 + t694 * t937;
t601 = t650 * t933 + t693 * t937;
t600 = -qJ(2) * t740 - t669 * t928 + t698 * t929;
t599 = t620 * t937 + t748 * t933;
t598 = t620 * t933 - t748 * t937;
t594 = -qJ(6) * t786 + t609;
t593 = -pkin(7) * t1009 - qJ(2) * t661 - t709 * t928;
t592 = -pkin(8) * t715 - t619;
t591 = t957 + t1012;
t590 = t617 * t938 + t715 * t934;
t589 = t617 * t934 - t715 * t938;
t585 = t958 - t1011;
t581 = -pkin(7) * t699 - t656 * t933 + t676 * t937;
t580 = t606 * t938 - t670 * t934;
t579 = t606 * t934 + t670 * t938;
t578 = -pkin(7) * t695 - t654 * t933 + t673 * t937;
t577 = -pkin(5) * t689 + qJ(6) * t764 - t609;
t575 = -t634 * t932 + t636 * t936;
t573 = -t634 * t936 - t636 * t932;
t571 = -pkin(2) * t746 + pkin(7) * t700 + t656 * t937 + t676 * t933;
t570 = -pkin(2) * t738 + pkin(7) * t696 + t654 * t937 + t673 * t933;
t569 = -pkin(1) * t638 - pkin(2) * t699 - pkin(3) * t781 - pkin(8) * t747 - t1008;
t568 = t575 * t937 - t776 * t933;
t567 = t575 * t933 + t776 * t937;
t566 = -pkin(1) * t632 - pkin(2) * t695 - pkin(3) * t778 - pkin(8) * t739 + t1007;
t562 = -pkin(5) * t830 + t947;
t561 = -pkin(7) * t674 + t1036 * t715 + t592 * t937;
t560 = -t613 * t928 + t615 * t929;
t559 = -t612 * t928 + t614 * t929;
t558 = t613 * t929 + t615 * t928;
t557 = t612 * t929 + t614 * t928;
t555 = t594 * t935 - t660 * t931 - t1022;
t554 = -t602 * t928 + t604 * t929;
t553 = -t601 * t928 + t603 * t929;
t552 = t602 * t929 + t604 * t928;
t551 = t601 * t929 + t603 * t928;
t550 = -t598 * t928 + t599 * t929;
t549 = t598 * t929 + t599 * t928;
t548 = qJ(6) * t1003 - t577 * t931 - t1023;
t544 = pkin(7) * t675 + t933 * t592 + t715 * t963;
t542 = t584 + t1046;
t541 = t824 + (-t693 + t807) * qJ(6) + t1049 + t966;
t537 = t594 * t931 + t660 * t935 + t957;
t536 = -qJ(6) * t694 + (-t735 - t830) * pkin(5) + t947;
t535 = t583 + t1045;
t534 = qJ(6) * t1004 + t577 * t935 + t958;
t533 = -pkin(1) * t616 - pkin(2) * t674 - pkin(3) * t806 - pkin(8) * t717 - t620;
t530 = -t591 * t932 + t630 * t936 - t1025;
t529 = -pkin(5) * t693 + t543;
t528 = t560 * t938 - t627 * t934;
t527 = t559 * t938 - t626 * t934;
t526 = t560 * t934 + t627 * t938;
t525 = t559 * t934 + t626 * t938;
t524 = -pkin(7) * t598 + (-pkin(8) * t937 + t1036) * t619;
t523 = t554 * t938 - t649 * t934;
t522 = t553 * t938 - t648 * t934;
t521 = t554 * t934 + t649 * t938;
t520 = t553 * t934 + t648 * t938;
t519 = -t585 * t932 + t618 * t936 - t1026;
t518 = -pkin(5) * t609 + qJ(6) * t562;
t517 = t547 * t938 + t643 * t934;
t515 = pkin(6) * t517;
t514 = t550 * t938 + t619 * t934;
t513 = t550 * t934 - t619 * t938;
t512 = (-t786 - t830) * pkin(5) + t947 + t1046;
t511 = -pkin(4) * t672 + pkin(9) * t532;
t510 = t540 * t938 + t623 * t934;
t508 = pkin(6) * t510;
t507 = t1045 + t824 - t948 + 0.2e1 * t1049;
t506 = -t531 - t1024;
t505 = -t567 * t928 + t568 * t929;
t504 = t567 * t929 + t568 * t928;
t503 = pkin(7) * t599 + (-pkin(8) * t933 + t963) * t619;
t499 = t532 + t959;
t498 = -qJ(2) * t638 - t571 * t928 + t581 * t929;
t497 = t562 * t935 - t1014;
t496 = t562 * t931 + t1013;
t495 = -qJ(2) * t632 - t570 * t928 + t578 * t929;
t494 = -pkin(1) * t549 - pkin(2) * t598 + pkin(3) * t748 - pkin(8) * t620;
t493 = -qJ(2) * t616 - t544 * t928 + t561 * t929;
t492 = t505 * t938 - t573 * t934;
t491 = t505 * t934 + t573 * t938;
t490 = t502 * t938 + t574 * t934;
t488 = pkin(6) * t490;
t487 = -t537 * t932 + t555 * t936 - t1025;
t486 = t532 * t936 - t1016;
t485 = t532 * t932 + t1015;
t484 = -t534 * t932 + t548 * t936 - t1026;
t483 = -t536 * t931 + t541 * t935 - t1024;
t482 = t486 * t937 + t672 * t933;
t481 = t486 * t933 - t672 * t937;
t480 = t536 * t935 + t541 * t931 + t959;
t479 = t530 * t937 - t542 * t933 - t1028;
t478 = -t591 * t936 - t630 * t932 + t944;
t477 = t519 * t937 - t535 * t933 - t1029;
t476 = -t585 * t936 - t618 * t932 + t945;
t475 = t530 * t933 + t542 * t937 + t960;
t474 = t519 * t933 + t535 * t937 + t961;
t473 = -t496 * t932 + t497 * t936;
t472 = t496 * t936 + t497 * t932;
t471 = -pkin(3) * t485 - pkin(4) * t531;
t470 = -qJ(2) * t549 - t503 * t928 + t524 * t929;
t469 = -t499 * t932 + t506 * t936 - t1027;
t468 = -pkin(9) * t496 - qJ(6) * t1013 - t518 * t931;
t467 = t473 * t937 + t609 * t933;
t466 = t473 * t933 - t609 * t937;
t465 = -t537 * t936 - t555 * t932 + t944;
t464 = t487 * t937 - t512 * t933 - t1028;
t463 = -t534 * t936 - t548 * t932 + t945;
t462 = -pkin(4) * t609 + pkin(9) * t497 - qJ(6) * t1014 + t518 * t935;
t461 = t487 * t933 + t512 * t937 + t960;
t460 = t484 * t937 - t507 * t933 - t1029;
t459 = t484 * t933 + t507 * t937 + t961;
t458 = -pkin(8) * t485 - pkin(9) * t1015 - t511 * t932;
t457 = -t481 * t928 + t482 * t929;
t456 = t481 * t929 + t482 * t928;
t455 = t469 * t937 - t543 * t933 - t1030;
t454 = -t480 * t932 + t483 * t936 - t1027;
t453 = -pkin(3) * t472 - pkin(4) * t496 - pkin(5) * t556;
t452 = -t499 * t936 - t506 * t932 + t946;
t451 = t469 * t933 + t543 * t937 + t962;
t450 = -t475 * t928 + t479 * t929 - t1018;
t449 = -t474 * t928 + t477 * t929 - t1019;
t448 = t457 * t938 + t485 * t934;
t447 = t457 * t934 - t485 * t938;
t446 = -t466 * t928 + t467 * t929;
t445 = t466 * t929 + t467 * t928;
t444 = t454 * t937 - t529 * t933 - t1030;
t443 = -t480 * t936 - t483 * t932 + t946;
t442 = t454 * t933 + t529 * t937 + t962;
t441 = -t461 * t928 + t464 * t929 - t1018;
t440 = -t459 * t928 + t460 * t929 - t1019;
t439 = -pkin(7) * t481 + t458 * t937 - t471 * t933;
t438 = t446 * t938 + t472 * t934;
t437 = t446 * t934 - t472 * t938;
t436 = -pkin(8) * t472 - t462 * t932 + t468 * t936;
t435 = -pkin(1) * t456 - pkin(2) * t481 + pkin(3) * t672 - pkin(8) * t486 + pkin(9) * t1016 - t511 * t936;
t434 = -pkin(2) * t485 + pkin(7) * t482 + t458 * t933 + t471 * t937;
t433 = -t451 * t928 + t455 * t929 - t1020;
t432 = -t442 * t928 + t444 * t929 - t1020;
t431 = -pkin(7) * t466 + t436 * t937 - t453 * t933;
t430 = -pkin(1) * t445 - pkin(2) * t466 + pkin(3) * t609 - pkin(8) * t473 - t462 * t936 - t468 * t932;
t429 = -pkin(2) * t472 + pkin(7) * t467 + t436 * t933 + t453 * t937;
t428 = -qJ(2) * t456 - t434 * t928 + t439 * t929;
t427 = -qJ(2) * t445 - t429 * t928 + t431 * t929;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t909, -t910, 0, t877, 0, 0, 0, 0, 0, 0, -t949, t874, t868, t790, 0, 0, 0, 0, 0, 0, t726, t734, t719, t658, 0, 0, 0, 0, 0, 0, t608, t611, t590, t514, 0, 0, 0, 0, 0, 0, t510, t517, t490, t448, 0, 0, 0, 0, 0, 0, t510, t517, t490, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t910, -t909, 0, t876, 0, 0, 0, 0, 0, 0, t873, t872, t867, t789, 0, 0, 0, 0, 0, 0, t725, t733, t718, t657, 0, 0, 0, 0, 0, 0, t607, t610, t589, t513, 0, 0, 0, 0, 0, 0, t509, t516, t489, t447, 0, 0, 0, 0, 0, 0, t509, t516, t489, t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t813, 0, 0, 0, 0, 0, 0, t736, t765, t740, t661, 0, 0, 0, 0, 0, 0, t632, t638, t616, t549, 0, 0, 0, 0, 0, 0, t539, t546, t501, t456, 0, 0, 0, 0, 0, 0, t539, t546, t501, t445; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t910, 0, -t909, 0, t952, -t894, -t876, -pkin(6) * t876, t882, t906 * t938 - t908 * t934, t874, -t882, t949, 0, -pkin(6) * t873 - t865 * t934 - t928 * t991, -pkin(6) * t872 - t866 * t934 - t929 * t991, -pkin(6) * t867 + t813 * t938, -pkin(6) * t789 - (pkin(1) * t934 - qJ(2) * t938) * t813, t770 * t938 + t968, t742 * t938 - t863 * t934, t767 * t938 - t898 * t934, t769 * t938 - t968, t766 * t938 - t897 * t934, qJDD(3) * t934 + t791 * t938, -pkin(6) * t725 + t659 * t938 - t668 * t934, -pkin(6) * t733 + t663 * t938 - t682 * t934, -pkin(6) * t718 + t600 * t938 - t708 * t934, -pkin(6) * t657 + t593 * t938 - t621 * t934, t667 * t938 - t773 * t934, t625 * t938 - t714 * t934, t640 * t938 - t758 * t934, t666 * t938 - t771 * t934, t641 * t938 - t759 * t934, t697 * t938 - t792 * t934, -pkin(6) * t607 + t495 * t938 - t566 * t934, -pkin(6) * t610 + t498 * t938 - t569 * t934, -pkin(6) * t589 + t493 * t938 - t533 * t934, -pkin(6) * t513 + t470 * t938 - t494 * t934, t528, t492, t522, t527, t523, t580, t449 * t938 - t476 * t934 - t1032, t450 * t938 - t478 * t934 - t1031, t433 * t938 - t452 * t934 - t1033, -pkin(6) * t447 + t428 * t938 - t435 * t934, t528, t492, t522, t527, t523, t580, t440 * t938 - t463 * t934 - t1032, t441 * t938 - t465 * t934 - t1031, t432 * t938 - t443 * t934 - t1033, -pkin(6) * t437 + t427 * t938 - t430 * t934; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t909, 0, t910, 0, t894, t952, t877, pkin(6) * t877, t881, t906 * t934 + t908 * t938, t872, -t881, -t873, 0, -pkin(6) * t949 + t865 * t938 - t928 * t992, pkin(6) * t874 + t866 * t938 - t929 * t992, pkin(6) * t868 + t813 * t934, pkin(6) * t790 - (-pkin(1) * t938 - qJ(2) * t934) * t813, t770 * t934 - t967, t742 * t934 + t863 * t938, t767 * t934 + t898 * t938, t769 * t934 + t967, t766 * t934 + t897 * t938, -qJDD(3) * t938 + t791 * t934, pkin(6) * t726 + t659 * t934 + t668 * t938, pkin(6) * t734 + t663 * t934 + t682 * t938, pkin(6) * t719 + t600 * t934 + t708 * t938, pkin(6) * t658 + t593 * t934 + t621 * t938, t667 * t934 + t773 * t938, t625 * t934 + t714 * t938, t640 * t934 + t758 * t938, t666 * t934 + t771 * t938, t641 * t934 + t759 * t938, t697 * t934 + t792 * t938, pkin(6) * t608 + t495 * t934 + t566 * t938, pkin(6) * t611 + t498 * t934 + t569 * t938, pkin(6) * t590 + t493 * t934 + t533 * t938, pkin(6) * t514 + t470 * t934 + t494 * t938, t526, t491, t520, t525, t521, t579, t449 * t934 + t476 * t938 + t508, t450 * t934 + t478 * t938 + t515, t433 * t934 + t452 * t938 + t488, pkin(6) * t448 + t428 * t934 + t435 * t938, t526, t491, t520, t525, t521, t579, t440 * t934 + t463 * t938 + t508, t441 * t934 + t465 * t938 + t515, t432 * t934 + t443 * t938 + t488, pkin(6) * t438 + t427 * t934 + t430 * t938; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t911, t912, 0, 0, t918, 0.2e1 * t928 * t978, 0, t919, 0, 0, -qJ(2) * t903 + t929 * t956, qJ(2) * t902 - t928 * t956, pkin(1) * t907 + qJ(2) * t905 + t814, pkin(1) * t893 + qJ(2) * t814, t827 * t929 + t828 * t928, t803 * t929 + t805 * t928, t817 * t929 + t820 * t928, t825 * t929 + t826 * t928, t816 * t929 + t819 * t928, t847 * t929 + t848 * t928, -pkin(1) * t858 + qJ(2) * t737 + t750 * t929 + t775 * t928, pkin(1) * t861 + qJ(2) * t768 + t757 * t929 + t784 * t928, -pkin(1) * t837 + qJ(2) * t741 + t669 * t929 + t698 * t928, pkin(1) * t854 - pkin(7) * t1010 + qJ(2) * t662 + t709 * t929, t730 * t929 + t732 * t928, t683 * t929 + t684 * t928, t701 * t929 + t703 * t928, t729 * t929 + t731 * t928, t702 * t929 + t704 * t928, t762 * t929 + t763 * t928, -pkin(1) * t738 + qJ(2) * t633 + t570 * t929 + t578 * t928, -pkin(1) * t746 + qJ(2) * t639 + t571 * t929 + t581 * t928, -pkin(1) * t715 + qJ(2) * t617 + t544 * t929 + t561 * t928, -pkin(1) * t619 + qJ(2) * t550 + t503 * t929 + t524 * t928, t558, t504, t551, t557, t552, t605, t474 * t929 + t477 * t928 + t987, t475 * t929 + t479 * t928 + t986, t451 * t929 + t455 * t928 + t988, -pkin(1) * t485 + qJ(2) * t457 + t434 * t929 + t439 * t928, t558, t504, t551, t557, t552, t605, t459 * t929 + t460 * t928 + t987, t461 * t929 + t464 * t928 + t986, t442 * t929 + t444 * t928 + t988, -pkin(1) * t472 + qJ(2) * t446 + t429 * t929 + t431 * t928;];
tauB_reg  = t1;
