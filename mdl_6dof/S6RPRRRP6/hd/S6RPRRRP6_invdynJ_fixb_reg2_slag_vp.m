% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP6_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:16:53
% EndTime: 2019-03-09 06:17:09
% DurationCPUTime: 9.34s
% Computational Cost: add. (16422->637), mult. (39136->761), div. (0->0), fcn. (30403->14), ass. (0->311)
t278 = sin(pkin(10));
t283 = sin(qJ(3));
t279 = cos(pkin(10));
t438 = cos(qJ(3));
t350 = t438 * t279;
t309 = -t278 * t283 + t350;
t471 = t309 * qJD(1);
t207 = qJD(4) - t471;
t360 = qJD(1) * qJD(2);
t420 = pkin(7) + qJ(2);
t442 = qJDD(1) * t420 + t360;
t198 = t442 * t278;
t199 = t442 * t279;
t247 = t420 * t278;
t230 = qJD(1) * t247;
t248 = t420 * t279;
t231 = qJD(1) * t248;
t345 = qJD(3) * t438;
t366 = qJD(3) * t283;
t332 = t198 * t438 + t199 * t283 - t230 * t366 + t231 * t345;
t406 = qJDD(3) * pkin(3);
t102 = t332 - t406;
t276 = pkin(10) + qJ(3);
t268 = cos(t276);
t267 = sin(t276);
t284 = sin(qJ(1));
t286 = cos(qJ(1));
t324 = g(1) * t286 + g(2) * t284;
t310 = t324 * t267;
t297 = -g(3) * t268 + t310;
t295 = -t102 + t297;
t477 = qJD(4) * pkin(8) * t207 - t295;
t476 = t471 * qJD(3);
t229 = t278 * t438 + t279 * t283;
t217 = t229 * qJD(1);
t162 = pkin(3) * t217 - pkin(8) * t471;
t214 = t283 * t231;
t166 = -t230 * t438 - t214;
t282 = sin(qJ(4));
t285 = cos(qJ(4));
t108 = t162 * t282 + t166 * t285;
t287 = -pkin(9) - pkin(8);
t351 = qJD(4) * t287;
t390 = t471 * t282;
t475 = pkin(9) * t390 + t282 * t351 - t108;
t107 = t162 * t285 - t166 * t282;
t474 = -pkin(4) * t217 - t107 + (pkin(9) * t471 + t351) * t285;
t179 = qJD(3) * t285 - t217 * t282;
t180 = qJD(3) * t282 + t217 * t285;
t281 = sin(qJ(5));
t437 = cos(qJ(5));
t122 = -t179 * t437 + t180 * t281;
t120 = t122 ^ 2;
t308 = t179 * t281 + t180 * t437;
t440 = t308 ^ 2;
t473 = -t120 + t440;
t365 = qJD(4) * t282;
t472 = t365 - t390;
t363 = qJD(5) * t281;
t470 = pkin(4) * t363;
t469 = pkin(4) * t437;
t202 = qJD(5) + t207;
t403 = t122 * t202;
t302 = t229 * qJDD(1);
t290 = t302 + t476;
t462 = qJD(3) * qJD(4) + t290;
t115 = -t282 * qJDD(3) + t217 * t365 - t285 * t462;
t364 = qJD(4) * t285;
t353 = t217 * t364 + t282 * t462;
t311 = qJDD(3) * t285 - t353;
t343 = t437 * qJD(5);
t56 = t115 * t437 - t179 * t343 + t180 * t363 - t281 * t311;
t468 = -t56 + t403;
t467 = t122 * qJ(6);
t466 = t122 * t308;
t391 = t207 * t282;
t465 = t180 * t391;
t349 = t437 * t282;
t233 = t281 * t285 + t349;
t448 = qJD(4) + qJD(5);
t170 = t448 * t233;
t464 = -t233 * t471 + t170;
t379 = t281 * t282;
t348 = t437 * t285;
t452 = t348 - t379;
t453 = qJD(4) * t437 + t343;
t369 = -t285 * t453 + t379 * t448 + t452 * t471;
t407 = qJDD(1) * pkin(1);
t266 = qJDD(2) - t407;
t463 = -g(1) * t284 + g(2) * t286;
t313 = -t266 - t463;
t399 = t308 * t202;
t57 = qJD(5) * t308 - t281 * t115 - t311 * t437;
t461 = -t57 + t399;
t219 = t278 * t366 - t279 * t345;
t307 = -t219 * t282 + t229 * t364;
t160 = -qJD(3) * pkin(3) - t166;
t116 = -pkin(4) * t179 + t160;
t277 = qJ(4) + qJ(5);
t271 = cos(t277);
t381 = t271 * t284;
t270 = sin(t277);
t382 = t270 * t286;
t189 = -t268 * t381 + t382;
t380 = t271 * t286;
t383 = t270 * t284;
t191 = t268 * t380 + t383;
t220 = t229 * qJD(3);
t358 = t278 * qJDD(1);
t321 = -qJDD(1) * t350 + t283 * t358;
t165 = qJD(1) * t220 + t321;
t159 = qJDD(4) + t165;
t352 = t198 * t283 - t199 * t438 + t230 * t345;
t105 = -t231 * t366 - t352;
t101 = qJDD(3) * pkin(8) + t105;
t259 = t279 * pkin(2) + pkin(1);
t241 = -qJD(1) * t259 + qJD(2);
t133 = -pkin(3) * t471 - pkin(8) * t217 + t241;
t167 = -t230 * t283 + t231 * t438;
t161 = qJD(3) * pkin(8) + t167;
t92 = t133 * t282 + t161 * t285;
t357 = t279 * qJDD(1);
t104 = -pkin(2) * t357 + t165 * pkin(3) - pkin(8) * t290 + t266;
t98 = t285 * t104;
t35 = -qJD(4) * t92 - t101 * t282 + t98;
t20 = pkin(4) * t159 + pkin(9) * t115 + t35;
t34 = t101 * t285 + t104 * t282 + t133 * t364 - t161 * t365;
t23 = pkin(9) * t311 + t34;
t91 = t133 * t285 - t161 * t282;
t78 = -pkin(9) * t180 + t91;
t68 = pkin(4) * t207 + t78;
t79 = pkin(9) * t179 + t92;
t3 = t20 * t281 + t23 * t437 + t343 * t68 - t363 * t79;
t422 = g(3) * t271;
t296 = g(1) * t191 - g(2) * t189 + t267 * t422 - t3;
t460 = t116 * t122 + t296;
t250 = t287 * t282;
t251 = t287 * t285;
t410 = t250 * t343 + t251 * t363 + t281 * t474 + t437 * t475;
t178 = t250 * t281 - t251 * t437;
t409 = -qJD(5) * t178 - t281 * t475 + t437 * t474;
t319 = -t207 * t91 + t34;
t414 = t207 * t92;
t459 = t35 + t414;
t458 = qJ(6) * t308;
t328 = pkin(4) * t472 - t167;
t156 = qJDD(5) + t159;
t333 = pkin(4) * t343;
t435 = pkin(4) * t281;
t456 = -t156 * t435 - t202 * t333;
t164 = -pkin(3) * t309 - pkin(8) * t229 - t259;
t176 = -t247 * t283 + t248 * t438;
t168 = t285 * t176;
t114 = t164 * t282 + t168;
t455 = -t247 * t438 - t248 * t283;
t372 = t285 * t286;
t377 = t282 * t284;
t208 = t268 * t377 + t372;
t373 = t284 * t285;
t376 = t282 * t286;
t210 = -t268 * t376 + t373;
t451 = -g(1) * t210 + g(2) * t208;
t449 = qJ(2) * qJDD(1);
t148 = t156 * pkin(5);
t412 = t56 * qJ(6);
t447 = -qJD(6) * t308 + t148 + t412;
t188 = t268 * t383 + t380;
t190 = -t268 * t382 + t381;
t423 = g(3) * t270;
t446 = -g(1) * t190 + g(2) * t188 + t267 * t423;
t340 = t20 * t437 - t281 * t23;
t75 = t437 * t79;
t38 = t281 * t68 + t75;
t4 = -qJD(5) * t38 + t340;
t291 = t4 + t446;
t445 = -t116 * t308 + t291;
t444 = t156 * t233 - t202 * t369;
t425 = g(3) * t267;
t298 = -t268 * t324 - t425;
t443 = t308 * t464 + t452 * t56;
t339 = pkin(5) * t122 + qJD(6);
t71 = t116 + t339;
t441 = -t308 * t71 + t446;
t439 = t217 ^ 2;
t436 = pkin(4) * t180;
t434 = pkin(4) * t282;
t249 = t286 * t259;
t427 = g(2) * t249;
t421 = t285 * pkin(4);
t73 = t281 * t79;
t37 = t437 * t68 - t73;
t25 = t37 - t458;
t24 = pkin(5) * t202 + t25;
t419 = -t25 + t24;
t42 = t437 * t78 - t73;
t418 = -qJ(6) * t464 + qJD(6) * t452 + t410;
t417 = -pkin(5) * t217 + qJ(6) * t369 - t233 * qJD(6) + t409;
t113 = t164 * t285 - t176 * t282;
t385 = t229 * t285;
t86 = -pkin(4) * t309 - pkin(9) * t385 + t113;
t386 = t229 * t282;
t94 = -pkin(9) * t386 + t114;
t61 = t281 * t86 + t437 * t94;
t416 = qJ(6) * t57;
t411 = -t122 * t333 - t435 * t57;
t408 = pkin(5) * t464 + t328;
t405 = t115 * t282;
t402 = t122 * t217;
t398 = t308 * t217;
t396 = t179 * t471;
t395 = t179 * t217;
t394 = t180 * t179;
t393 = t180 * t217;
t392 = t202 * t217;
t389 = t217 * t471;
t387 = t219 * t285;
t242 = pkin(5) * t270 + t434;
t384 = t242 * t268;
t378 = t282 * t159;
t143 = t285 * t159;
t110 = t282 * t311;
t371 = t179 * t364 + t110;
t368 = t242 + t420;
t274 = t278 ^ 2;
t275 = t279 ^ 2;
t367 = t274 + t275;
t362 = qJD(6) * t122;
t354 = t229 * t379;
t265 = pkin(3) + t421;
t347 = t229 * t365;
t243 = pkin(5) * t271 + t421;
t342 = t420 + t434;
t41 = -t281 * t78 - t75;
t60 = -t281 * t94 + t437 * t86;
t338 = t367 * qJD(1) ^ 2;
t134 = qJD(2) * t309 + qJD(3) * t455;
t163 = pkin(3) * t220 + pkin(8) * t219;
t336 = -t134 * t282 + t163 * t285;
t177 = t250 * t437 + t251 * t281;
t334 = t207 * t285;
t331 = 0.2e1 * t367;
t330 = t463 * t267;
t329 = t122 * t369 - t233 * t57;
t327 = pkin(3) * t268 + pkin(8) * t267;
t326 = -g(1) * t188 - g(2) * t190;
t325 = -g(1) * t189 - g(2) * t191;
t322 = t156 * t452 - t202 * t464;
t136 = pkin(4) * t386 - t455;
t320 = t282 * t92 + t285 * t91;
t237 = pkin(3) + t243;
t273 = -qJ(6) + t287;
t318 = t237 * t268 - t267 * t273;
t316 = t265 * t268 - t267 * t287;
t314 = -t268 * t422 + (g(1) * t380 + g(2) * t381) * t267;
t312 = -t207 * t472 + t143;
t51 = pkin(9) * t387 + pkin(4) * t220 + (-t168 + (pkin(9) * t229 - t164) * t282) * qJD(4) + t336;
t63 = t134 * t285 + t163 * t282 + t164 * t364 - t176 * t365;
t59 = -pkin(9) * t307 + t63;
t10 = t281 * t51 + t343 * t86 - t363 * t94 + t437 * t59;
t306 = -t347 - t387;
t305 = -pkin(8) * t159 + t160 * t207;
t240 = -qJDD(1) * t259 + qJDD(2);
t304 = t311 * t285;
t301 = t313 + t407;
t300 = t268 * t423 - t270 * t310;
t294 = t296 + t416;
t293 = t331 * t360 - t324;
t11 = -qJD(5) * t61 - t281 * t59 + t437 * t51;
t65 = -pkin(4) * t311 + t102;
t135 = qJD(2) * t229 + qJD(3) * t176;
t21 = t57 * pkin(5) + qJDD(6) + t65;
t103 = pkin(4) * t307 + t135;
t264 = pkin(5) + t469;
t213 = t471 ^ 2;
t211 = t268 * t372 + t377;
t209 = -t268 * t373 + t376;
t197 = -pkin(5) * t452 - t265;
t150 = t229 * t348 - t354;
t149 = t233 * t229;
t142 = qJ(6) * t452 + t178;
t141 = -qJ(6) * t233 + t177;
t100 = pkin(5) * t308 + t436;
t99 = pkin(5) * t149 + t136;
t95 = -t156 * t309 + t202 * t220;
t70 = -t219 * t349 - t281 * t347 - qJD(5) * t354 + (-t219 * t281 + t229 * t453) * t285;
t69 = t170 * t229 + t219 * t452;
t64 = -qJD(4) * t114 + t336;
t54 = t70 * pkin(5) + t103;
t46 = t322 + t402;
t45 = t322 - t402;
t44 = -t398 - t444;
t43 = -t398 + t444;
t40 = -qJ(6) * t149 + t61;
t39 = -pkin(5) * t309 - qJ(6) * t150 + t60;
t28 = t42 - t458;
t27 = t41 + t467;
t26 = t38 - t467;
t17 = t122 * t464 - t452 * t57;
t16 = -t233 * t56 - t308 * t369;
t15 = t122 * t70 + t149 * t57;
t14 = -t150 * t56 - t308 * t69;
t13 = -t122 * t220 - t149 * t156 - t202 * t70 + t309 * t57;
t12 = t150 * t156 - t202 * t69 + t220 * t308 + t309 * t56;
t9 = -qJ(6) * t70 - qJD(6) * t149 + t10;
t8 = t220 * pkin(5) + t69 * qJ(6) - t150 * qJD(6) + t11;
t7 = t329 + t443;
t6 = t329 - t443;
t5 = t122 * t69 + t149 * t56 - t150 * t57 - t308 * t70;
t2 = t3 - t362 - t416;
t1 = t4 + t447;
t18 = [0, 0, 0, 0, 0, qJDD(1), -t463, t324, 0, 0, t274 * qJDD(1), 0.2e1 * t278 * t357, 0, t275 * qJDD(1), 0, 0, t301 * t279, -t301 * t278, t331 * t449 + t293, t313 * pkin(1) + (t367 * t449 + t293) * qJ(2), -t217 * t219 + t229 * t290, -t229 * t165 - t217 * t220 - t219 * t471 + t290 * t309, -qJD(3) * t219 + qJDD(3) * t229, -t165 * t309 - t220 * t471, -qJD(3) * t220 + qJDD(3) * t309, 0, -qJD(3) * t135 + qJDD(3) * t455 - t165 * t259 + t220 * t241 - t240 * t309 - t268 * t463, -t134 * qJD(3) - t176 * qJDD(3) - t241 * t219 + t240 * t229 - t259 * t290 + t330, t105 * t309 + t134 * t471 + t135 * t217 - t176 * t165 + t166 * t219 - t167 * t220 + t229 * t332 - t290 * t455 - t324, t105 * t176 + t167 * t134 - t332 * t455 - t166 * t135 - t240 * t259 - g(1) * (-t259 * t284 + t286 * t420) - g(2) * (t284 * t420 + t249) -t115 * t385 + t180 * t306 (-t179 * t285 + t180 * t282) * t219 + (t304 + t405 + (-t179 * t282 - t180 * t285) * qJD(4)) * t229, t115 * t309 + t143 * t229 + t180 * t220 + t207 * t306, -t110 * t229 - t179 * t307, t179 * t220 - t207 * t307 - t229 * t378 - t309 * t311, -t159 * t309 + t207 * t220, -g(1) * t209 - g(2) * t211 + t102 * t386 + t113 * t159 - t135 * t179 + t160 * t307 + t64 * t207 + t91 * t220 - t309 * t35 + t311 * t455, -g(1) * t208 - g(2) * t210 + t102 * t385 - t114 * t159 + t115 * t455 + t135 * t180 + t160 * t306 - t207 * t63 - t220 * t92 + t309 * t34, t63 * t179 + t114 * t311 - t64 * t180 + t113 * t115 + t320 * t219 + (-t34 * t282 - t35 * t285 + (t282 * t91 - t285 * t92) * qJD(4)) * t229 - t330, -t427 - t102 * t455 + t35 * t113 + t34 * t114 + t160 * t135 + t92 * t63 + t91 * t64 + (-g(1) * t420 - g(2) * t327) * t286 + (-g(1) * (-t259 - t327) - g(2) * t420) * t284, t14, t5, t12, t15, t13, t95, t103 * t122 + t11 * t202 + t116 * t70 + t136 * t57 + t149 * t65 + t156 * t60 + t220 * t37 - t309 * t4 + t325, -t10 * t202 + t103 * t308 - t116 * t69 - t136 * t56 + t150 * t65 - t156 * t61 - t220 * t38 + t3 * t309 + t326, -t10 * t122 - t11 * t308 - t149 * t3 - t150 * t4 + t37 * t69 - t38 * t70 + t56 * t60 - t57 * t61 - t330, -t427 + t38 * t10 + t116 * t103 + t37 * t11 + t65 * t136 + t3 * t61 + t4 * t60 + (-g(1) * t342 - g(2) * t316) * t286 + (-g(1) * (-t259 - t316) - g(2) * t342) * t284, t14, t5, t12, t15, t13, t95, -t1 * t309 + t122 * t54 + t149 * t21 + t156 * t39 + t202 * t8 + t220 * t24 + t57 * t99 + t70 * t71 + t325, t150 * t21 - t156 * t40 + t2 * t309 - t202 * t9 - t220 * t26 + t308 * t54 - t56 * t99 - t69 * t71 + t326, -t1 * t150 - t122 * t9 - t149 * t2 + t24 * t69 - t26 * t70 - t308 * t8 + t39 * t56 - t40 * t57 - t330, -t427 + t1 * t39 + t2 * t40 + t21 * t99 + t24 * t8 + t26 * t9 + t71 * t54 + (-g(1) * t368 - g(2) * t318) * t286 + (-g(1) * (-t259 - t318) - g(2) * t368) * t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t357, t358, -t338, -qJ(2) * t338 - t313, 0, 0, 0, 0, 0, 0, 0.2e1 * t217 * qJD(3) + t321, t302 + 0.2e1 * t476, -t213 - t439, t166 * t217 - t167 * t471 + t240 + t463, 0, 0, 0, 0, 0, 0, t312 + t395, -t207 ^ 2 * t285 - t378 - t393 (t115 - t396) * t285 + t465 + t371, -t160 * t217 + t282 * t319 + t285 * t459 + t463, 0, 0, 0, 0, 0, 0, t45, t44, t7, -t116 * t217 + t233 * t3 - t369 * t38 - t37 * t464 + t4 * t452 + t463, 0, 0, 0, 0, 0, 0, t45, t44, t7, t1 * t452 + t2 * t233 - t217 * t71 - t24 * t464 - t26 * t369 + t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t389, -t213 + t439, t302, t389, -t321, qJDD(3), qJD(3) * t167 - t217 * t241 + t297 - t332, -t471 * t241 + (t166 + t214) * qJD(3) + t352 - t298, 0, 0, t180 * t334 - t405 (-t115 - t396) * t285 - t465 + t371, t207 * t334 + t378 - t393, -t179 * t391 + t304, t312 - t395, -t207 * t217, -pkin(3) * t353 - t107 * t207 - t91 * t217 + t167 * t179 + t305 * t282 + (t406 - t477) * t285, pkin(3) * t115 + t108 * t207 - t167 * t180 + t217 * t92 + t282 * t477 + t285 * t305, t107 * t180 - t108 * t179 + ((qJD(4) * t180 + t311) * pkin(8) + t319) * t285 + ((-qJD(4) * t179 - t115) * pkin(8) - t459) * t282 + t298, -t91 * t107 - t92 * t108 - t160 * t167 + t295 * pkin(3) + (-qJD(4) * t320 - t35 * t282 + t34 * t285 + t298) * pkin(8), t16, t6, t43, t17, t46, -t392, t116 * t464 + t122 * t328 + t156 * t177 + t202 * t409 - t217 * t37 - t265 * t57 - t452 * t65 + t314, -t116 * t369 - t156 * t178 - t202 * t410 + t217 * t38 + t233 * t65 + t265 * t56 + t308 * t328 + t300, -t122 * t410 + t177 * t56 - t178 * t57 - t233 * t4 + t3 * t452 - t308 * t409 + t369 * t37 - t38 * t464 + t298, -g(3) * t316 + t116 * t328 + t4 * t177 + t3 * t178 - t65 * t265 + t37 * t409 + t38 * t410 + t324 * (t265 * t267 + t268 * t287) t16, t6, t43, t17, t46, -t392, t122 * t408 + t141 * t156 + t197 * t57 + t202 * t417 - t21 * t452 - t217 * t24 + t464 * t71 + t314, -t142 * t156 - t197 * t56 - t202 * t418 + t21 * t233 + t217 * t26 + t308 * t408 - t369 * t71 + t300, -t1 * t233 - t122 * t418 + t141 * t56 - t142 * t57 + t2 * t452 + t24 * t369 - t26 * t464 - t308 * t417 + t298, -g(3) * t318 + t1 * t141 + t2 * t142 + t21 * t197 + t24 * t417 + t26 * t418 + t408 * t71 + t324 * (t237 * t267 + t268 * t273); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t394, -t179 ^ 2 + t180 ^ 2, -t179 * t207 - t115, t394, t180 * t207 + t311, t159, -t161 * t364 - t160 * t180 + t414 + t98 + (-qJD(4) * t133 - t101 + t425) * t282 + t451, g(1) * t211 - g(2) * t209 - t160 * t179 + t285 * t425 - t319, 0, 0, t466, t473, t468, -t466, t461, t156, -t41 * t202 + (-t122 * t180 + t156 * t437 - t202 * t363) * pkin(4) + t445, t202 * t42 - t308 * t436 + t456 + t460, t56 * t469 + t411 + (t38 + t41 + t470) * t308 + (t42 - t37) * t122, -t37 * t41 - t38 * t42 + (t3 * t281 + t4 * t437 - t116 * t180 + t282 * t425 + (-t281 * t37 + t38 * t437) * qJD(5) + t451) * pkin(4), t466, t473, t468, -t466, t461, t156, -t100 * t122 + t264 * t156 - t27 * t202 + (-t75 + (-pkin(4) * t202 - t68) * t281) * qJD(5) + t340 + t441 + t447, -t100 * t308 + t122 * t71 + t202 * t28 + t294 + t362 + t456, t264 * t56 + t411 + (t26 + t27 + t470) * t308 + (t28 - t24) * t122, t1 * t264 - t26 * t28 - t24 * t27 - t71 * t100 - g(1) * (t243 * t284 - t286 * t384) - g(2) * (-t243 * t286 - t284 * t384) + t242 * t425 + (t2 * t281 + (-t24 * t281 + t26 * t437) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t466, t473, t468, -t466, t461, t156, t38 * t202 + t445, t202 * t37 + t460, 0, 0, t466, t473, t468, -t466, t461, t156, t412 + t26 * t202 + 0.2e1 * t148 + (-t339 - t71) * t308 + t291, -pkin(5) * t440 + t202 * t25 + (qJD(6) + t71) * t122 + t294, pkin(5) * t56 - t122 * t419, t419 * t26 + (t1 + t441) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 + t399, -t56 - t403, -t120 - t440, t26 * t122 + t24 * t308 + t21 - t297;];
tau_reg  = t18;
