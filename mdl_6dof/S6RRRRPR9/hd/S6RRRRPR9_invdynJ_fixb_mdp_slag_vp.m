% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR9_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR9_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:56:28
% EndTime: 2019-03-09 22:57:10
% DurationCPUTime: 31.80s
% Computational Cost: add. (22981->868), mult. (55435->1164), div. (0->0), fcn. (45176->18), ass. (0->359)
t957 = sin(pkin(6));
t1075 = qJD(1) * t957;
t963 = sin(qJ(2));
t1042 = t963 * t1075;
t959 = cos(pkin(6));
t1074 = qJD(1) * t959;
t934 = qJD(2) + t1074;
t962 = sin(qJ(3));
t967 = cos(qJ(3));
t853 = -t1042 * t962 + t934 * t967;
t854 = t1042 * t967 + t934 * t962;
t961 = sin(qJ(4));
t966 = cos(qJ(4));
t789 = -t966 * t853 + t854 * t961;
t786 = qJD(6) + t789;
t969 = -pkin(10) - pkin(9);
t1048 = qJD(3) * t969;
t968 = cos(qJ(2));
t1094 = t967 * t968;
t1010 = pkin(2) * t963 - pkin(9) * t968;
t872 = t1010 * t1075;
t859 = t967 * t872;
t1056 = pkin(1) * t1074;
t871 = -pkin(8) * t1042 + t1056 * t968;
t1187 = -t871 * t962 + t859 + (pkin(3) * t963 - pkin(10) * t1094) * t1075 - t967 * t1048;
t1073 = qJD(1) * t968;
t1041 = t957 * t1073;
t1017 = t962 * t1041;
t1079 = t967 * t871 + t962 * t872;
t1186 = pkin(10) * t1017 + t962 * t1048 - t1079;
t956 = sin(pkin(12));
t958 = cos(pkin(12));
t960 = sin(qJ(6));
t965 = cos(qJ(6));
t888 = t956 * t960 - t965 * t958;
t1182 = t786 * t888;
t1150 = qJD(3) + qJD(4);
t890 = t961 * t962 - t966 * t967;
t825 = t1150 * t890;
t838 = t890 * t1041;
t1185 = t825 - t838;
t891 = t961 * t967 + t962 * t966;
t1081 = (-t1041 + t1150) * t891;
t1000 = t853 * t961 + t966 * t854;
t915 = -qJD(3) + t1041;
t899 = -qJD(4) + t915;
t758 = t1000 * t958 - t899 * t956;
t1124 = t758 * t960;
t756 = t1000 * t956 + t958 * t899;
t1175 = -t965 * t756 - t1124;
t1184 = t1175 * t786;
t889 = t956 * t965 + t958 * t960;
t878 = t889 * qJD(6);
t1183 = t889 * t789 + t878;
t916 = t969 * t962;
t917 = t969 * t967;
t999 = t916 * t966 + t917 * t961;
t1181 = qJD(4) * t999 + t1186 * t966 - t1187 * t961;
t1070 = qJD(3) * t962;
t874 = pkin(8) * t1041 + t963 * t1056;
t1013 = -t874 + (-t1017 + t1070) * pkin(3);
t1061 = qJD(1) * qJD(2);
t1037 = t968 * t1061;
t1059 = qJDD(1) * t963;
t1180 = t1037 + t1059;
t1170 = t789 * t956;
t1179 = pkin(5) * t1170;
t1178 = pkin(11) * t1170;
t1177 = qJ(5) * t1042 - t1181;
t1176 = t1081 * pkin(4) + qJ(5) * t1185 - qJD(5) * t891 + t1013;
t836 = pkin(9) * t934 + t874;
t998 = -pkin(2) * t968 - pkin(9) * t963 - pkin(1);
t868 = t998 * t957;
t848 = qJD(1) * t868;
t777 = -t836 * t962 + t967 * t848;
t747 = -pkin(10) * t854 + t777;
t733 = -pkin(3) * t915 + t747;
t778 = t836 * t967 + t848 * t962;
t748 = pkin(10) * t853 + t778;
t746 = t966 * t748;
t675 = t961 * t733 + t746;
t669 = -qJ(5) * t899 + t675;
t835 = -pkin(2) * t934 - t871;
t793 = -pkin(3) * t853 + t835;
t688 = pkin(4) * t789 - qJ(5) * t1000 + t793;
t632 = -t669 * t956 + t958 * t688;
t621 = pkin(5) * t789 - pkin(11) * t758 + t632;
t633 = t958 * t669 + t956 * t688;
t622 = -pkin(11) * t756 + t633;
t601 = t621 * t960 + t622 * t965;
t1067 = qJD(4) * t966;
t1068 = qJD(4) * t961;
t1014 = qJD(3) * t1042;
t1069 = qJD(3) * t967;
t1163 = t1180 * t957;
t1060 = qJDD(1) * t959;
t933 = qJDD(2) + t1060;
t781 = t934 * t1069 + t1163 * t967 + (-t1014 + t933) * t962;
t1038 = t963 * t1061;
t1016 = t957 * t1038;
t1058 = qJDD(1) * t968;
t931 = t957 * t1058;
t869 = qJDD(3) - t931 + t1016;
t1055 = pkin(1) * qJD(2) * t959;
t1024 = qJD(1) * t1055;
t1052 = pkin(1) * t1060;
t1049 = -pkin(8) * t931 - t968 * t1024 - t963 * t1052;
t980 = -pkin(8) * t1016 - t1049;
t797 = pkin(9) * t933 + t980;
t995 = t1010 * qJD(2);
t800 = (qJD(1) * t995 + qJDD(1) * t998) * t957;
t972 = -qJD(3) * t778 - t962 * t797 + t967 * t800;
t652 = pkin(3) * t869 - pkin(10) * t781 + t972;
t989 = -t848 * t1069 + t1070 * t836 - t967 * t797 - t962 * t800;
t1019 = t967 * t1014 + t934 * t1070 + t1163 * t962;
t990 = t967 * t933 - t1019;
t660 = pkin(10) * t990 - t989;
t1020 = t748 * t1067 + t733 * t1068 - t966 * t652 + t961 * t660;
t862 = qJDD(4) + t869;
t1148 = -pkin(4) * t862 + qJDD(5);
t611 = t1020 + t1148;
t678 = t853 * t1067 - t1068 * t854 + t966 * t781 + t961 * t990;
t665 = t678 * t956 - t958 * t862;
t604 = pkin(5) * t665 + t611;
t745 = t961 * t748;
t674 = t733 * t966 - t745;
t668 = pkin(4) * t899 + qJD(5) - t674;
t649 = pkin(5) * t756 + t668;
t952 = pkin(12) + qJ(6);
t946 = sin(t952);
t1139 = cos(qJ(1));
t1047 = t957 * t1139;
t1044 = t1139 * t963;
t964 = sin(qJ(1));
t1095 = t964 * t968;
t882 = t1044 * t959 + t1095;
t955 = qJ(3) + qJ(4);
t948 = sin(t955);
t949 = cos(t955);
t818 = t1047 * t949 + t882 * t948;
t1101 = t957 * t964;
t1043 = t1139 * t968;
t1096 = t963 * t964;
t884 = -t1096 * t959 + t1043;
t822 = -t1101 * t949 + t884 * t948;
t1102 = t957 * t963;
t864 = t1102 * t948 - t959 * t949;
t986 = g(1) * t822 + g(2) * t818 + g(3) * t864;
t1174 = t601 * t1000 - t1182 * t649 + t604 * t889 - t946 * t986;
t600 = t621 * t965 - t622 * t960;
t947 = cos(t952);
t1173 = -t600 * t1000 + t1183 * t649 + t604 * t888 + t947 * t986;
t1001 = t756 * t960 - t758 * t965;
t1065 = qJD(6) * t965;
t666 = t678 * t958 + t862 * t956;
t1050 = -t756 * t1065 - t960 * t665 + t965 * t666;
t1066 = qJD(6) * t960;
t615 = -t1066 * t758 + t1050;
t1034 = t965 * t665 + t960 * t666;
t616 = -qJD(6) * t1001 + t1034;
t679 = qJD(4) * t1000 + t781 * t961 - t966 * t990;
t676 = qJDD(6) + t679;
t1172 = t862 * MDP(22) - t679 * MDP(21) - t789 ^ 2 * MDP(19) + (-t789 * t899 + t678) * MDP(20) + (MDP(18) * t789 + MDP(19) * t1000 - MDP(21) * t899) * t1000 + (-t1000 * t1175 - t888 * t676) * MDP(32) + (-t1175 * t1182 - t615 * t888) * MDP(30) + (MDP(29) * t615 - MDP(30) * t616 + MDP(31) * t676) * t889 + (-MDP(31) * t1182 - MDP(32) * t1183 - MDP(33) * t1000) * t786 + (MDP(29) * t1182 + MDP(30) * t1183 + t1000 * MDP(31)) * t1001;
t1171 = t632 * t789;
t1166 = -t611 + t986;
t1165 = t1001 * t786;
t842 = t916 * t961 - t917 * t966;
t1164 = qJD(4) * t842 + t1186 * t961 + t1187 * t966;
t802 = -t1042 * t958 - t838 * t956;
t1030 = -t825 * t956 - t802;
t803 = t1042 * t956 - t838 * t958;
t1029 = -t825 * t958 - t803;
t1021 = -t733 * t1067 + t748 * t1068 - t961 * t652 - t966 * t660;
t609 = qJ(5) * t862 - qJD(5) * t899 - t1021;
t1018 = pkin(8) * t1163 + t963 * t1024 - t968 * t1052;
t1128 = t933 * pkin(2);
t798 = t1018 - t1128;
t726 = -pkin(3) * t990 + t798;
t620 = t679 * pkin(4) - t678 * qJ(5) - qJD(5) * t1000 + t726;
t597 = -t609 * t956 + t958 * t620;
t1162 = -t633 * t789 - t597;
t819 = -t948 * t1047 + t882 * t949;
t823 = t1101 * t948 + t884 * t949;
t865 = t1102 * t949 + t948 * t959;
t985 = g(1) * t823 + g(2) * t819 + g(3) * t865;
t1161 = t789 * t793 + t1021 + t985;
t727 = pkin(4) * t1000 + qJ(5) * t789;
t881 = -t1043 * t959 + t1096;
t1160 = t819 * t946 - t881 * t947;
t1159 = t819 * t947 + t881 * t946;
t950 = t958 * pkin(11);
t1158 = pkin(5) * t1000 + t789 * t950;
t1099 = t957 * t968;
t883 = t1095 * t959 + t1044;
t1149 = -g(1) * t883 - g(2) * t881;
t982 = g(3) * t1099 + t1149;
t1153 = t982 * t948;
t598 = t958 * t609 + t956 * t620;
t981 = t598 * t958 - t985;
t1090 = t1176 * t958 + t1177 * t956;
t1089 = t1176 * t956 - t1177 * t958;
t1083 = pkin(4) * t1042 + t1164;
t1138 = pkin(1) * t963;
t1078 = pkin(8) * t1099 + t959 * t1138;
t867 = pkin(9) * t959 + t1078;
t1080 = t967 * t867 + t962 * t868;
t682 = t747 * t966 - t745;
t704 = pkin(3) * t854 + t727;
t640 = t958 * t682 + t956 * t704;
t932 = pkin(3) * t1067 + qJD(5);
t1152 = t932 * t958 - t640;
t639 = -t682 * t956 + t958 * t704;
t1151 = -t932 * t956 - t639;
t681 = t747 * t961 + t746;
t1011 = pkin(3) * t1068 - t681;
t1146 = -t632 * t1000 + t1166 * t958;
t976 = t986 - t1020;
t1145 = -t1000 * t793 + t976;
t1143 = t633 * t1000 - t1166 * t956;
t879 = t1102 * t962 - t959 * t967;
t1137 = pkin(3) * t879;
t1136 = pkin(3) * t966;
t1129 = g(3) * t957;
t1127 = MDP(6) * t957;
t1126 = qJ(5) * t958;
t1125 = t597 * t956;
t1119 = t853 * t915;
t1118 = t854 * t915;
t1115 = t882 * t962;
t1114 = t891 * t956;
t1113 = t891 * t958;
t1110 = t933 * MDP(8);
t941 = pkin(3) * t961 + qJ(5);
t1109 = t941 * t958;
t1108 = t946 * t949;
t1107 = t947 * t949;
t1106 = t949 * t956;
t1105 = t949 * t958;
t1104 = t949 * t968;
t951 = t957 ^ 2;
t1103 = t951 * qJD(1) ^ 2;
t1100 = t957 * t967;
t1098 = t958 * t968;
t1097 = t959 * t968;
t1072 = qJD(2) * t963;
t1040 = t957 * t1072;
t1071 = qJD(2) * t968;
t1039 = t957 * t1071;
t829 = -qJD(3) * t879 + t1039 * t967;
t873 = t957 * t995;
t935 = pkin(8) * t1102;
t875 = (pkin(1) * t1097 - t935) * qJD(2);
t973 = -qJD(3) * t1080 + t967 * t873 - t875 * t962;
t703 = pkin(3) * t1040 - pkin(10) * t829 + t973;
t880 = t1100 * t963 + t959 * t962;
t828 = qJD(3) * t880 + t1039 * t962;
t988 = t868 * t1069 - t1070 * t867 + t962 * t873 + t967 * t875;
t710 = -pkin(10) * t828 + t988;
t1028 = -t867 * t962 + t967 * t868;
t754 = -pkin(3) * t1099 - pkin(10) * t880 + t1028;
t767 = -pkin(10) * t879 + t1080;
t987 = t754 * t1067 - t1068 * t767 + t961 * t703 + t966 * t710;
t624 = (qJ(5) * t1072 - qJD(5) * t968) * t957 + t987;
t804 = t966 * t879 + t880 * t961;
t724 = -qJD(4) * t804 - t828 * t961 + t829 * t966;
t805 = -t879 * t961 + t880 * t966;
t725 = qJD(4) * t805 + t966 * t828 + t829 * t961;
t876 = pkin(8) * t1039 + t963 * t1055;
t794 = pkin(3) * t828 + t876;
t638 = pkin(4) * t725 - qJ(5) * t724 - qJD(5) * t805 + t794;
t607 = t958 * t624 + t956 * t638;
t643 = t958 * t674 + t956 * t727;
t1085 = t961 * t754 + t966 * t767;
t692 = -qJ(5) * t1099 + t1085;
t866 = t935 + (-pkin(1) * t968 - pkin(2)) * t959;
t812 = t866 + t1137;
t713 = pkin(4) * t804 - qJ(5) * t805 + t812;
t647 = t958 * t692 + t956 * t713;
t1088 = t802 * t960 - t803 * t965 + t825 * t888 - t878 * t891;
t1087 = t1065 * t1113 - t1066 * t1114 - t965 * t802 - t803 * t960 - t825 * t889;
t1086 = pkin(5) * t1030 + t1083;
t945 = pkin(3) * t967 + pkin(2);
t815 = pkin(4) * t890 - qJ(5) * t891 - t945;
t763 = t956 * t815 + t958 * t842;
t953 = t963 ^ 2;
t1077 = -t968 ^ 2 + t953;
t1063 = qJD(2) - t934;
t1062 = -qJD(5) + t668;
t1057 = 0.2e1 * t951;
t1051 = t968 * t1103;
t942 = -pkin(5) * t958 - pkin(4);
t1046 = t962 * t1139;
t1045 = t967 * t1139;
t594 = pkin(5) * t679 - pkin(11) * t666 + t597;
t595 = -pkin(11) * t665 + t598;
t1035 = t965 * t594 - t960 * t595;
t606 = -t624 * t956 + t958 * t638;
t642 = -t674 * t956 + t958 * t727;
t646 = -t692 * t956 + t958 * t713;
t1033 = t754 * t966 - t961 * t767;
t762 = t958 * t815 - t842 * t956;
t1027 = -t957 * t1046 + t882 * t967;
t1026 = t934 + t1074;
t1025 = t933 + t1060;
t1012 = t1011 + t1179;
t1009 = -g(1) * t818 + g(2) * t822;
t1008 = g(1) * t884 + g(2) * t882;
t693 = pkin(4) * t1099 - t1033;
t743 = -pkin(11) * t1114 + t763;
t1007 = -pkin(5) * t1081 + pkin(11) * t1029 + qJD(6) * t743 - t1090;
t728 = pkin(5) * t890 - pkin(11) * t1113 + t762;
t1006 = pkin(11) * t1030 - qJD(6) * t728 - t1089;
t1004 = t960 * t594 + t965 * t595;
t785 = -t1099 * t956 + t805 * t958;
t628 = pkin(5) * t804 - pkin(11) * t785 + t646;
t784 = t1098 * t957 + t805 * t956;
t635 = -pkin(11) * t784 + t647;
t1003 = t628 * t965 - t635 * t960;
t1002 = t628 * t960 + t635 * t965;
t720 = t965 * t784 + t785 * t960;
t721 = -t784 * t960 + t785 * t965;
t997 = -t767 * t1067 - t754 * t1068 + t703 * t966 - t961 * t710;
t831 = t1100 * t964 - t884 * t962;
t886 = t950 + t1109;
t994 = qJD(6) * t886 - t1151 + t1158;
t885 = (-pkin(11) - t941) * t956;
t993 = -qJD(6) * t885 - t1152 + t1178;
t911 = t950 + t1126;
t992 = qJD(5) * t956 + qJD(6) * t911 + t1158 + t642;
t910 = (-pkin(11) - qJ(5)) * t956;
t991 = -qJD(5) * t958 - qJD(6) * t910 + t1178 + t643;
t984 = -t1045 * t957 - t1115;
t983 = -t679 * t941 + (t668 - t932) * t789;
t979 = -pkin(9) * t869 - t835 * t915;
t625 = -pkin(4) * t1040 - t997;
t971 = -pkin(9) * qJD(3) * t915 + t798 + t982;
t944 = -pkin(4) - t1136;
t908 = t942 - t1136;
t855 = t864 * pkin(4);
t832 = t1101 * t962 + t884 * t967;
t817 = t822 * pkin(4);
t816 = t818 * pkin(4);
t809 = t888 * t891;
t808 = t889 * t891;
t801 = pkin(5) * t1114 - t999;
t774 = t823 * t947 + t883 * t946;
t773 = -t823 * t946 + t883 * t947;
t712 = t1040 * t956 + t724 * t958;
t711 = -t1040 * t958 + t724 * t956;
t664 = pkin(5) * t784 + t693;
t653 = t675 - t1179;
t630 = qJD(6) * t721 + t965 * t711 + t712 * t960;
t629 = -qJD(6) * t720 - t711 * t960 + t712 * t965;
t617 = pkin(5) * t711 + t625;
t605 = -pkin(11) * t711 + t607;
t599 = pkin(5) * t725 - pkin(11) * t712 + t606;
t592 = -qJD(6) * t601 + t1035;
t591 = qJD(6) * t600 + t1004;
t1 = [((qJDD(1) * t953 + 0.2e1 * t1037 * t963) * MDP(4) + 0.2e1 * (t1058 * t963 - t1061 * t1077) * MDP(5)) * t951 + (-g(1) * t1115 - g(2) * t831 - t1080 * t869 + t866 * t781 + t798 * t880 + t835 * t829 + t876 * t854 + t988 * t915) * MDP(17) + (g(1) * t1027 - g(2) * t832 + t1028 * t869 + t798 * t879 + t835 * t828 - t876 * t853 - t866 * t990 - t973 * t915) * MDP(16) + (t828 * t915 - t879 * t869) * MDP(14) + (-t829 * t915 + t869 * t880) * MDP(13) + (t725 * t899 - t804 * t862) * MDP(21) + (-t724 * t899 + t805 * t862) * MDP(20) + ((-qJD(6) * t1002 + t599 * t965 - t605 * t960) * t786 + t1003 * t676 + t592 * t804 + t600 * t725 - t617 * t1175 + t664 * t616 + t604 * t720 + t649 * t630 + g(1) * t1159 - g(2) * t774) * MDP(34) + (t1001 * t630 + t1175 * t629 - t615 * t720 - t616 * t721) * MDP(30) + (t1175 * t725 - t616 * t804 - t630 * t786 - t676 * t720) * MDP(32) + t959 * t1110 + (t1025 * t963 + t1026 * t1071) * t1127 + (-t1001 * t725 + t615 * t804 + t629 * t786 + t676 * t721) * MDP(31) + (-t1001 * t629 + t615 * t721) * MDP(29) + (t606 * t789 + t646 * t679 + t597 * t804 + t632 * t725 + t625 * t756 + t693 * t665 + t611 * t784 + t668 * t711 - g(1) * (-t819 * t958 - t881 * t956) - g(2) * (t823 * t958 + t883 * t956)) * MDP(25) + (-t607 * t789 - t647 * t679 - t598 * t804 - t633 * t725 + t625 * t758 + t693 * t666 + t611 * t785 + t668 * t712 - g(1) * (t819 * t956 - t881 * t958) - g(2) * (-t823 * t956 + t883 * t958)) * MDP(26) + (g(1) * t819 - g(2) * t823 + t1033 * t862 + t812 * t679 + t793 * t725 + t726 * t804 + t794 * t789 - t997 * t899) * MDP(23) + (t598 * t647 + t633 * t607 + t597 * t646 + t632 * t606 + t611 * t693 + t668 * t625 - g(1) * (-t964 * pkin(1) - pkin(4) * t819 - qJ(5) * t818 + t881 * t969 - t882 * t945) - g(2) * (t1139 * pkin(1) + t823 * pkin(4) + t822 * qJ(5) - t883 * t969 + t884 * t945 + (pkin(3) * t962 + pkin(8)) * t1101)) * MDP(28) + qJDD(1) * MDP(1) + (t1000 * t794 - t1085 * t862 + t812 * t678 + t793 * t724 + t726 * t805 + t987 * t899 + t1009) * MDP(24) + ((t1025 * t968 - t1026 * t1072) * MDP(7) + (-t1072 * t915 - t869 * t968) * MDP(15) + (-t1072 * t899 - t862 * t968) * MDP(22) - g(1) * (pkin(3) * t1046 + pkin(8) * t1139) * MDP(28) + (-g(1) * t1045 - t1072 * t778 - t968 * t989) * MDP(17) + (-t1021 * t968 - t1072 * t675) * MDP(24) + (-t1072 * t789 + t679 * t968) * MDP(21) + (t1072 * t853 - t968 * t990) * MDP(14) + (t1072 * t777 - t968 * t972) * MDP(16) + (t1020 * t968 + t1072 * t674) * MDP(23) + (t1072 * t854 - t781 * t968) * MDP(13) + (t1000 * t1072 - t678 * t968) * MDP(20)) * t957 + (-t1000 * t725 - t678 * t804 - t679 * t805 - t724 * t789) * MDP(19) + (t1000 * t724 + t678 * t805) * MDP(18) + (g(1) * t964 - g(2) * t1139) * MDP(2) + (g(1) * t1139 + g(2) * t964) * MDP(3) + (-t876 * t934 - t935 * t933 - t1018 * t959 + g(1) * t882 - g(2) * t884 + (t933 * t1097 + (-t1038 + t1058) * t1057) * pkin(1)) * MDP(9) + (t781 * t880 + t829 * t854) * MDP(11) + (t676 * t804 + t725 * t786) * MDP(33) + (-(qJD(6) * t1003 + t599 * t960 + t605 * t965) * t786 - t1002 * t676 - t591 * t804 - t601 * t725 - t617 * t1001 + t664 * t615 + t604 * t721 + t649 * t629 - g(1) * t1160 - g(2) * t773) * MDP(35) + (-t597 * t785 - t598 * t784 - t606 * t758 - t607 * t756 - t632 * t712 - t633 * t711 - t646 * t666 - t647 * t665 - t1009) * MDP(27) + (-t781 * t879 - t854 * t828 + t829 * t853 + t880 * t990) * MDP(12) + (-pkin(1) * t1057 * t1180 - g(1) * t881 + g(2) * t883 - t1078 * t933 - t875 * t934 - t980 * t959) * MDP(10); (-pkin(2) * t1019 + t859 * t915 + t874 * t853 + (-t871 * t915 + t979) * t962 + (-t971 + t1128) * t967) * MDP(16) + (-pkin(2) * t781 - t1079 * t915 - t874 * t854 + t962 * t971 + t967 * t979) * MDP(17) + (t1081 * t899 - t862 * t890) * MDP(21) + t1077 * MDP(5) * t1103 + (-t665 * t763 - t666 * t762 + (-t597 * t958 - t598 * t956) * t891 - t1090 * t758 - t1089 * t756 - t1030 * t633 - t1029 * t632 - t1153) * MDP(27) - t963 * MDP(4) * t1051 + (t1001 * t1087 + t1088 * t1175 - t615 * t808 + t616 * t809) * MDP(30) + ((t728 * t965 - t743 * t960) * t676 + t592 * t890 + t801 * t616 + t604 * t808 - g(1) * (-t1107 * t883 + t884 * t946) - g(2) * (-t1107 * t881 + t882 * t946) - (t1104 * t947 + t946 * t963) * t1129 + (t1006 * t960 - t1007 * t965) * t786 - t1086 * t1175 + t1087 * t649 + t1081 * t600) * MDP(34) + (t1081 * t1175 - t1087 * t786 - t616 * t890 - t676 * t808) * MDP(32) + (t1063 * t1073 + t1059) * t1127 + t1110 + t931 * MDP(7) + (-(t728 * t960 + t743 * t965) * t676 - t591 * t890 + t801 * t615 - t604 * t809 - g(1) * (t1108 * t883 + t884 * t947) - g(2) * (t1108 * t881 + t882 * t947) - (-t1104 * t946 + t947 * t963) * t1129 + (t1006 * t965 + t1007 * t960) * t786 - t1086 * t1001 + t1088 * t649 - t1081 * t601) * MDP(35) + (-t1001 * t1088 - t615 * t809) * MDP(29) + (-t1001 * t1081 + t1088 * t786 + t615 * t890 - t676 * t809) * MDP(31) + (-t763 * t679 - t598 * t890 - t999 * t666 + t611 * t1113 - g(1) * (t1106 * t883 + t884 * t958) - g(2) * (t1106 * t881 + t882 * t958) - (-t1104 * t956 + t958 * t963) * t1129 - t1089 * t789 + t1083 * t758 + t1029 * t668 - t1081 * t633) * MDP(26) + (t762 * t679 + t597 * t890 - t999 * t665 + t611 * t1114 - g(1) * (-t1105 * t883 + t884 * t956) - g(2) * (-t1105 * t881 + t882 * t956) - (t1098 * t949 + t956 * t963) * t1129 + t1090 * t789 + t1083 * t756 + t1030 * t668 + t1081 * t632) * MDP(25) + (t1083 * t668 + t1089 * t633 + t1090 * t632 + t597 * t762 + t598 * t763 - t611 * t999 + (t1129 * t963 + t1008) * t969 + (-t1129 * t968 - t1149) * (pkin(4) * t949 + qJ(5) * t948 + t945)) * MDP(28) + (t1103 * t1138 + t874 * t934 - t1018 - t982) * MDP(9) + (-t1118 * t967 + t781 * t962) * MDP(11) + ((t781 - t1119) * t967 + (t990 + t1118) * t962) * MDP(12) + (pkin(1) * t1051 + t871 * t934 + (pkin(8) * t1061 + g(3)) * t1102 + t1008 + t1049) * MDP(10) + (-t915 * t1069 + t962 * t869 + (t1094 * t915 - t854 * t963) * t1075) * MDP(13) + (t1081 * t786 + t676 * t890) * MDP(33) + (t915 * t1070 + t869 * t967 + (-t915 * t962 * t968 - t853 * t963) * t1075) * MDP(14) + (t1013 * t789 + t1081 * t793 + t1164 * t899 - t945 * t679 + t726 * t890 + t999 * t862 - t982 * t949) * MDP(23) + (t1185 * t899 + t862 * t891) * MDP(20) + (-t1000 * t1185 + t678 * t891) * MDP(18) + (-t1000 * t1081 + t1185 * t789 - t678 * t890 - t679 * t891) * MDP(19) + (t1013 * t1000 + t1181 * t899 - t1185 * t793 - t945 * t678 + t726 * t891 - t842 * t862 + t1153) * MDP(24) + (t915 * MDP(15) - t777 * MDP(16) + t778 * MDP(17) - MDP(20) * t1000 + t789 * MDP(21) + t899 * MDP(22) - t674 * MDP(23) + t675 * MDP(24) - MDP(7) * t1063) * t1042; t1172 + (t598 * t1109 - t941 * t1125 + t611 * t944 - g(1) * (pkin(3) * t831 + qJ(5) * t823 - t817) - g(2) * (pkin(3) * t984 + t819 * qJ(5) - t816) - g(3) * (qJ(5) * t865 - t1137 - t855) + t1011 * t668 + t1152 * t633 + t1151 * t632) * MDP(28) + (-t681 * t899 + (t1068 * t899 - t789 * t854 + t862 * t966) * pkin(3) + t1145) * MDP(23) + (t1011 * t756 - t639 * t789 + t665 * t944 + t956 * t983 + t1146) * MDP(25) + (t1011 * t758 + t640 * t789 + t666 * t944 + t958 * t983 + t1143) * MDP(26) - t854 * t853 * MDP(11) + ((t885 * t965 - t886 * t960) * t676 + t908 * t616 + (t960 * t993 - t965 * t994) * t786 - t1012 * t1175 + t1173) * MDP(34) + (-(t885 * t960 + t886 * t965) * t676 + t908 * t615 + (t960 * t994 + t965 * t993) * t786 - t1012 * t1001 + t1174) * MDP(35) + (t990 - t1118) * MDP(14) + (t781 + t1119) * MDP(13) + (g(1) * t832 + g(2) * t1027 + g(3) * t880 - t777 * t915 - t835 * t853 + t989) * MDP(17) + t869 * MDP(15) + (-t853 ^ 2 + t854 ^ 2) * MDP(12) + (t639 * t758 + t640 * t756 + (-t665 * t941 - t756 * t932 - t1171) * t958 + (t666 * t941 + t758 * t932 + t1162) * t956 + t981) * MDP(27) + (-t682 * t899 + (-t1000 * t854 + t1067 * t899 - t862 * t961) * pkin(3) + t1161) * MDP(24) + (-g(1) * t831 - g(2) * t984 + g(3) * t879 - t778 * t915 - t835 * t854 + t972) * MDP(16); (-t675 * t899 + t1145) * MDP(23) + (-t674 * t899 + t1161) * MDP(24) + (-qJ(5) * t679 * t956 - pkin(4) * t665 - t675 * t756 + (t1062 * t956 - t642) * t789 + t1146) * MDP(25) + (-t679 * t1126 - pkin(4) * t666 - t675 * t758 + (t1062 * t958 + t643) * t789 + t1143) * MDP(26) + (t642 * t758 + t643 * t756 + (-qJ(5) * t665 - qJD(5) * t756 - t1171) * t958 + (qJ(5) * t666 + qJD(5) * t758 + t1162) * t956 + t981) * MDP(27) + (-t611 * pkin(4) + g(1) * t817 + g(2) * t816 + g(3) * t855 - t632 * t642 - t633 * t643 - t668 * t675 + (-t632 * t956 + t633 * t958) * qJD(5) + (-t1125 + t981) * qJ(5)) * MDP(28) + ((t910 * t965 - t911 * t960) * t676 + t942 * t616 + t653 * t1175 + (t960 * t991 - t965 * t992) * t786 + t1173) * MDP(34) + (-(t910 * t960 + t911 * t965) * t676 + t942 * t615 + t653 * t1001 + (t960 * t992 + t965 * t991) * t786 + t1174) * MDP(35) + t1172; (t758 * t789 + t665) * MDP(25) + (-t756 * t789 + t666) * MDP(26) + (-t756 ^ 2 - t758 ^ 2) * MDP(27) + (t632 * t758 + t633 * t756 + t1148 - t976) * MDP(28) + (t616 - t1165) * MDP(34) + (t615 + t1184) * MDP(35); t1001 * t1175 * MDP(29) + (t1001 ^ 2 - t1175 ^ 2) * MDP(30) + (t1050 - t1184) * MDP(31) + (-t1034 - t1165) * MDP(32) + t676 * MDP(33) + (t601 * t786 + t649 * t1001 - g(1) * t773 + g(2) * t1160 - g(3) * (-t1099 * t947 - t865 * t946) + t1035) * MDP(34) + (t600 * t786 - t649 * t1175 + g(1) * t774 + g(2) * t1159 - g(3) * (t1099 * t946 - t865 * t947) - t1004) * MDP(35) + (-MDP(31) * t1124 + MDP(32) * t1001 - MDP(34) * t601 - MDP(35) * t600) * qJD(6);];
tau  = t1;
