% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR9_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR9_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR9_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR9_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR9_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR9_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 22:55:50
% EndTime: 2019-03-09 22:56:28
% DurationCPUTime: 18.03s
% Computational Cost: add. (22873->759), mult. (55312->1041), div. (0->0), fcn. (45176->18), ass. (0->359)
t368 = cos(pkin(6));
t480 = qJD(1) * t368;
t343 = qJD(2) + t480;
t371 = sin(qJ(3));
t376 = cos(qJ(3));
t372 = sin(qJ(2));
t366 = sin(pkin(6));
t481 = qJD(1) * t366;
t451 = t372 * t481;
t262 = t343 * t376 - t371 * t451;
t263 = t343 * t371 + t376 * t451;
t370 = sin(qJ(4));
t375 = cos(qJ(4));
t199 = -t375 * t262 + t263 * t370;
t196 = qJD(6) + t199;
t377 = cos(qJ(2));
t420 = pkin(2) * t372 - pkin(9) * t377;
t281 = t420 * t481;
t268 = t376 * t281;
t464 = pkin(1) * t480;
t280 = -pkin(8) * t451 + t377 * t464;
t378 = -pkin(10) - pkin(9);
t457 = qJD(3) * t378;
t494 = t376 * t377;
t590 = -t280 * t371 + t268 + (pkin(3) * t372 - pkin(10) * t494) * t481 - t376 * t457;
t479 = qJD(1) * t377;
t450 = t366 * t479;
t429 = t371 * t450;
t484 = t376 * t280 + t371 * t281;
t589 = pkin(10) * t429 + t371 * t457 - t484;
t299 = t370 * t371 - t375 * t376;
t548 = qJD(3) + qJD(4);
t235 = t548 * t299;
t248 = t299 * t450;
t588 = t235 - t248;
t300 = t370 * t376 + t371 * t375;
t486 = (-t450 + t548) * t300;
t365 = sin(pkin(12));
t367 = cos(pkin(12));
t369 = sin(qJ(6));
t374 = cos(qJ(6));
t297 = t365 * t369 - t374 * t367;
t587 = t196 * t297;
t298 = t365 * t374 + t367 * t369;
t287 = t298 * qJD(6);
t586 = t298 * t199 + t287;
t325 = t378 * t371;
t326 = t378 * t376;
t410 = t325 * t375 + t326 * t370;
t585 = qJD(4) * t410 - t370 * t590 + t589 * t375;
t283 = pkin(8) * t450 + t372 * t464;
t476 = qJD(3) * t371;
t423 = -t283 + (-t429 + t476) * pkin(3);
t469 = qJD(1) * qJD(2);
t446 = t377 * t469;
t467 = qJDD(1) * t372;
t584 = t446 + t467;
t569 = t199 * t365;
t583 = pkin(5) * t569;
t582 = pkin(11) * t569;
t581 = qJ(5) * t451 - t585;
t580 = t486 * pkin(4) + qJ(5) * t588 - qJD(5) * t300 + t423;
t324 = -qJD(3) + t450;
t308 = -qJD(4) + t324;
t411 = t262 * t370 + t375 * t263;
t168 = -t308 * t365 + t367 * t411;
t246 = pkin(9) * t343 + t283;
t409 = -pkin(2) * t377 - pkin(9) * t372 - pkin(1);
t277 = t409 * t366;
t258 = qJD(1) * t277;
t187 = -t246 * t371 + t376 * t258;
t157 = -pkin(10) * t263 + t187;
t143 = -pkin(3) * t324 + t157;
t188 = t246 * t376 + t258 * t371;
t158 = pkin(10) * t262 + t188;
t156 = t375 * t158;
t85 = t370 * t143 + t156;
t79 = -qJ(5) * t308 + t85;
t245 = -pkin(2) * t343 - t280;
t203 = -pkin(3) * t262 + t245;
t98 = pkin(4) * t199 - qJ(5) * t411 + t203;
t42 = -t365 * t79 + t367 * t98;
t31 = pkin(5) * t199 - pkin(11) * t168 + t42;
t166 = t367 * t308 + t365 * t411;
t43 = t365 * t98 + t367 * t79;
t32 = -pkin(11) * t166 + t43;
t11 = t31 * t369 + t32 * t374;
t473 = qJD(4) * t375;
t474 = qJD(4) * t370;
t468 = qJDD(1) * t368;
t342 = qJDD(2) + t468;
t426 = qJD(3) * t451;
t475 = qJD(3) * t376;
t563 = t584 * t366;
t191 = t343 * t475 + t563 * t376 + (t342 - t426) * t371;
t466 = qJDD(1) * t377;
t340 = t366 * t466;
t447 = t372 * t469;
t428 = t366 * t447;
t278 = qJDD(3) - t340 + t428;
t463 = pkin(1) * qJD(2) * t368;
t432 = qJD(1) * t463;
t460 = pkin(1) * t468;
t458 = -pkin(8) * t340 - t372 * t460 - t377 * t432;
t391 = -pkin(8) * t428 - t458;
t207 = pkin(9) * t342 + t391;
t404 = t420 * qJD(2);
t210 = (qJD(1) * t404 + qJDD(1) * t409) * t366;
t381 = -qJD(3) * t188 - t371 * t207 + t376 * t210;
t62 = pkin(3) * t278 - pkin(10) * t191 + t381;
t400 = -t376 * t207 - t371 * t210 + t246 * t476 - t258 * t475;
t431 = t343 * t476 + t371 * t563 + t376 * t426;
t401 = t376 * t342 - t431;
t70 = pkin(10) * t401 - t400;
t436 = -t143 * t474 - t158 * t473 - t370 * t70 + t375 * t62;
t271 = qJDD(4) + t278;
t547 = -pkin(4) * t271 + qJDD(5);
t21 = -t436 + t547;
t88 = t375 * t191 + t262 * t473 - t263 * t474 + t370 * t401;
t75 = -t367 * t271 + t365 * t88;
t14 = pkin(5) * t75 + t21;
t361 = pkin(12) + qJ(6);
t355 = sin(t361);
t538 = cos(qJ(1));
t453 = t538 * t372;
t373 = sin(qJ(1));
t495 = t373 * t377;
t291 = t368 * t453 + t495;
t364 = qJ(3) + qJ(4);
t357 = sin(t364);
t358 = cos(t364);
t456 = t366 * t538;
t228 = t291 * t357 + t358 * t456;
t452 = t538 * t377;
t496 = t372 * t373;
t293 = -t368 * t496 + t452;
t500 = t366 * t373;
t232 = t293 * t357 - t358 * t500;
t501 = t366 * t372;
t273 = t357 * t501 - t368 * t358;
t397 = g(1) * t232 + g(2) * t228 + g(3) * t273;
t155 = t370 * t158;
t84 = t143 * t375 - t155;
t78 = pkin(4) * t308 + qJD(5) - t84;
t59 = pkin(5) * t166 + t78;
t579 = t11 * t411 + t14 * t298 - t355 * t397 - t587 * t59;
t10 = t31 * t374 - t32 * t369;
t356 = cos(t361);
t578 = -t10 * t411 + t14 * t297 + t356 * t397 + t586 * t59;
t412 = t166 * t369 - t168 * t374;
t89 = qJD(4) * t411 + t191 * t370 - t375 * t401;
t86 = qJDD(6) + t89;
t577 = -t196 * t587 + t298 * t86 + t411 * t412;
t104 = t374 * t166 + t168 * t369;
t576 = t104 * t411 - t196 * t586 - t297 * t86;
t471 = qJD(6) * t374;
t472 = qJD(6) * t369;
t76 = t271 * t365 + t367 * t88;
t25 = -t166 * t471 - t168 * t472 - t369 * t75 + t374 * t76;
t575 = t25 * t298 + t412 * t587;
t26 = -qJD(6) * t412 + t369 * t76 + t374 * t75;
t574 = t104 * t587 - t25 * t297 - t298 * t26 + t412 * t586;
t573 = t199 * t42;
t572 = -t21 + t397;
t571 = t104 * t196;
t570 = t196 * t412;
t566 = t411 * t199;
t252 = t325 * t370 - t326 * t375;
t565 = qJD(4) * t252 + t589 * t370 + t375 * t590;
t212 = -t248 * t365 - t367 * t451;
t564 = -t235 * t365 - t212;
t562 = -t199 ^ 2 + t411 ^ 2;
t437 = -t143 * t473 + t158 * t474 - t370 * t62 - t375 * t70;
t19 = qJ(5) * t271 - qJD(5) * t308 - t437;
t430 = pkin(8) * t563 + t372 * t432 - t377 * t460;
t527 = t342 * pkin(2);
t208 = t430 - t527;
t136 = -pkin(3) * t401 + t208;
t30 = t89 * pkin(4) - t88 * qJ(5) - qJD(5) * t411 + t136;
t7 = -t19 * t365 + t367 * t30;
t561 = -t199 * t43 - t7;
t560 = -t199 * t308 + t88;
t137 = pkin(4) * t411 + qJ(5) * t199;
t229 = t291 * t358 - t357 * t456;
t233 = t293 * t358 + t357 * t500;
t274 = t357 * t368 + t358 * t501;
t396 = g(1) * t233 + g(2) * t229 + g(3) * t274;
t559 = t199 * t203 + t396 + t437;
t359 = t367 * pkin(11);
t558 = pkin(5) * t411 + t199 * t359;
t290 = -t368 * t452 + t496;
t557 = t229 * t355 - t290 * t356;
t556 = t229 * t356 + t290 * t355;
t360 = t366 ^ 2;
t465 = 0.2e1 * t360;
t8 = t367 * t19 + t365 * t30;
t393 = t8 * t367 - t396;
t524 = t365 * t581 + t367 * t580;
t523 = t365 * t580 - t367 * t581;
t341 = pkin(3) * t473 + qJD(5);
t114 = pkin(3) * t263 + t137;
t92 = t157 * t375 - t155;
t50 = t365 * t114 + t367 * t92;
t552 = t341 * t367 - t50;
t49 = t367 * t114 - t365 * t92;
t551 = -t341 * t365 - t49;
t91 = t157 * t370 + t156;
t424 = pkin(3) * t474 - t91;
t550 = t196 * t411;
t292 = t368 * t495 + t453;
t418 = -g(1) * t292 - g(2) * t290;
t498 = t366 * t377;
t392 = g(3) * t498 + t418;
t549 = t392 * t357;
t488 = pkin(4) * t451 + t565;
t537 = pkin(1) * t372;
t483 = pkin(8) * t498 + t368 * t537;
t276 = pkin(9) * t368 + t483;
t485 = t376 * t276 + t371 * t277;
t544 = t367 * t572 - t411 * t42;
t543 = -t365 * t572 + t411 * t43;
t386 = t397 + t436;
t540 = -t411 * t203 + t386;
t539 = -t308 * t411 - t89;
t288 = -t368 * t376 + t371 * t501;
t536 = pkin(3) * t288;
t535 = pkin(3) * t375;
t528 = g(3) * t366;
t526 = t7 * t365;
t477 = qJD(2) * t377;
t448 = t366 * t477;
t239 = -qJD(3) * t288 + t376 * t448;
t282 = t366 * t404;
t344 = pkin(8) * t501;
t497 = t368 * t377;
t284 = (pkin(1) * t497 - t344) * qJD(2);
t382 = -qJD(3) * t485 + t376 * t282 - t284 * t371;
t478 = qJD(2) * t372;
t449 = t366 * t478;
t113 = pkin(3) * t449 - pkin(10) * t239 + t382;
t499 = t366 * t376;
t289 = t368 * t371 + t372 * t499;
t238 = qJD(3) * t289 + t371 * t448;
t399 = -t276 * t476 + t277 * t475 + t371 * t282 + t376 * t284;
t120 = -pkin(10) * t238 + t399;
t439 = -t276 * t371 + t376 * t277;
t164 = -pkin(3) * t498 - pkin(10) * t289 + t439;
t177 = -pkin(10) * t288 + t485;
t398 = t370 * t113 + t375 * t120 + t164 * t473 - t177 * t474;
t34 = (qJ(5) * t478 - qJD(5) * t377) * t366 + t398;
t214 = t375 * t288 + t289 * t370;
t134 = -qJD(4) * t214 - t238 * t370 + t239 * t375;
t215 = -t288 * t370 + t289 * t375;
t135 = qJD(4) * t215 + t375 * t238 + t239 * t370;
t285 = pkin(8) * t448 + t372 * t463;
t204 = pkin(3) * t238 + t285;
t48 = pkin(4) * t135 - qJ(5) * t134 - qJD(5) * t215 + t204;
t17 = t367 * t34 + t365 * t48;
t522 = pkin(5) * t564 + t488;
t53 = t365 * t137 + t367 * t84;
t490 = t370 * t164 + t375 * t177;
t102 = -qJ(5) * t498 + t490;
t275 = t344 + (-pkin(1) * t377 - pkin(2)) * t368;
t222 = t275 + t536;
t123 = pkin(4) * t214 - qJ(5) * t215 + t222;
t57 = t367 * t102 + t365 * t123;
t519 = qJ(5) * t367;
t515 = t262 * t324;
t514 = t263 * t324;
t511 = t291 * t371;
t510 = t300 * t365;
t509 = t300 * t367;
t350 = pkin(3) * t370 + qJ(5);
t506 = t350 * t367;
t505 = t355 * t358;
t504 = t356 * t358;
t503 = t358 * t377;
t502 = t360 * qJD(1) ^ 2;
t493 = -qJD(5) + t78;
t213 = -t248 * t367 + t365 * t451;
t492 = t212 * t369 - t213 * t374 + t235 * t297 - t287 * t300;
t491 = -t374 * t212 - t213 * t369 - t235 * t298 + t471 * t509 - t472 * t510;
t354 = pkin(3) * t376 + pkin(2);
t225 = pkin(4) * t299 - qJ(5) * t300 - t354;
t173 = t365 * t225 + t367 * t252;
t362 = t372 ^ 2;
t482 = -t377 ^ 2 + t362;
t470 = qJD(2) - t343;
t459 = t377 * t502;
t351 = -pkin(5) * t367 - pkin(4);
t455 = t371 * t538;
t454 = t376 * t538;
t16 = -t34 * t365 + t367 * t48;
t52 = t367 * t137 - t365 * t84;
t56 = -t102 * t365 + t367 * t123;
t442 = t164 * t375 - t370 * t177;
t172 = t367 * t225 - t252 * t365;
t438 = t291 * t376 - t366 * t455;
t435 = t343 + t480;
t433 = t342 + t468;
t425 = t424 + t583;
t138 = pkin(5) * t299 - pkin(11) * t509 + t172;
t422 = pkin(11) * t564 - qJD(6) * t138 - t523;
t153 = -pkin(11) * t510 + t173;
t421 = -pkin(5) * t486 - pkin(11) * t213 + qJD(6) * t153 - t235 * t359 - t524;
t419 = -g(1) * t228 + g(2) * t232;
t417 = g(1) * t293 + g(2) * t291;
t4 = pkin(5) * t89 - pkin(11) * t76 + t7;
t5 = -pkin(11) * t75 + t8;
t416 = t369 * t4 + t374 * t5;
t103 = pkin(4) * t498 - t442;
t195 = t215 * t367 - t365 * t498;
t38 = pkin(5) * t214 - pkin(11) * t195 + t56;
t194 = t215 * t365 + t367 * t498;
t45 = -pkin(11) * t194 + t57;
t414 = -t369 * t45 + t374 * t38;
t413 = t369 * t38 + t374 * t45;
t130 = t374 * t194 + t195 * t369;
t131 = -t194 * t369 + t195 * t374;
t408 = t113 * t375 - t370 * t120 - t164 * t474 - t177 * t473;
t241 = -t293 * t371 + t373 * t499;
t294 = (-pkin(11) - t350) * t365;
t406 = -qJD(6) * t294 - t552 + t582;
t295 = t359 + t506;
t405 = qJD(6) * t295 - t551 + t558;
t319 = (-pkin(11) - qJ(5)) * t365;
t403 = -qJD(5) * t367 - qJD(6) * t319 + t53 + t582;
t320 = t359 + t519;
t402 = qJD(5) * t365 + qJD(6) * t320 + t52 + t558;
t395 = -t366 * t454 - t511;
t394 = -t350 * t89 + (-t341 + t78) * t199;
t389 = -pkin(9) * t278 - t245 * t324;
t388 = t392 * t358;
t387 = t21 * t300 - t235 * t78 - t417;
t35 = -pkin(4) * t449 - t408;
t2 = -qJD(6) * t11 - t369 * t5 + t374 * t4;
t380 = -pkin(9) * qJD(3) * t324 + t208 + t392;
t353 = -pkin(4) - t535;
t317 = t351 - t535;
t264 = t273 * pkin(4);
t242 = t293 * t376 + t371 * t500;
t227 = t232 * pkin(4);
t226 = t228 * pkin(4);
t219 = t297 * t300;
t218 = t298 * t300;
t211 = pkin(5) * t510 - t410;
t184 = t233 * t356 + t292 * t355;
t183 = -t233 * t355 + t292 * t356;
t122 = t134 * t367 + t365 * t449;
t121 = t134 * t365 - t367 * t449;
t74 = pkin(5) * t194 + t103;
t63 = t85 - t583;
t40 = qJD(6) * t131 + t374 * t121 + t122 * t369;
t39 = -qJD(6) * t130 - t121 * t369 + t122 * t374;
t27 = pkin(5) * t121 + t35;
t15 = -pkin(11) * t121 + t17;
t9 = pkin(5) * t135 - pkin(11) * t122 + t16;
t1 = t10 * qJD(6) + t416;
t3 = [qJDD(1), g(1) * t373 - g(2) * t538, g(1) * t538 + g(2) * t373 (qJDD(1) * t362 + 0.2e1 * t372 * t446) * t360 (t372 * t466 - t469 * t482) * t465 (t372 * t433 + t435 * t477) * t366 (t377 * t433 - t435 * t478) * t366, t342 * t368, -t285 * t343 - t344 * t342 - t430 * t368 + g(1) * t291 - g(2) * t293 + (t342 * t497 + (-t447 + t466) * t465) * pkin(1), -pkin(1) * t465 * t584 - g(1) * t290 + g(2) * t292 - t284 * t343 - t483 * t342 - t391 * t368, t191 * t289 + t239 * t263, -t191 * t288 - t263 * t238 + t239 * t262 + t289 * t401, -t239 * t324 + t278 * t289 + (-t191 * t377 + t263 * t478) * t366, t238 * t324 - t288 * t278 + (t262 * t478 - t377 * t401) * t366 (-t278 * t377 - t324 * t478) * t366, -t382 * t324 + t439 * t278 - t285 * t262 - t275 * t401 + t208 * t288 + t245 * t238 + g(1) * t438 - g(2) * t242 + (t187 * t478 - t377 * t381) * t366, t399 * t324 - t485 * t278 + t285 * t263 + t275 * t191 + t208 * t289 + t245 * t239 - g(1) * t511 - g(2) * t241 + (-g(1) * t454 - t188 * t478 - t377 * t400) * t366, t134 * t411 + t215 * t88, -t134 * t199 - t135 * t411 - t214 * t88 - t215 * t89, -t134 * t308 + t215 * t271 + (-t377 * t88 + t411 * t478) * t366, t135 * t308 - t214 * t271 + (-t199 * t478 + t377 * t89) * t366 (-t271 * t377 - t308 * t478) * t366, -t408 * t308 + t442 * t271 + t204 * t199 + t222 * t89 + t136 * t214 + t203 * t135 + g(1) * t229 - g(2) * t233 + (-t377 * t436 + t478 * t84) * t366, t398 * t308 - t490 * t271 + t204 * t411 + t222 * t88 + t136 * t215 + t203 * t134 + (-t377 * t437 - t478 * t85) * t366 + t419, t16 * t199 + t56 * t89 + t7 * t214 + t42 * t135 + t35 * t166 + t103 * t75 + t21 * t194 + t78 * t121 - g(1) * (-t229 * t367 - t290 * t365) - g(2) * (t233 * t367 + t292 * t365) -t17 * t199 - t57 * t89 - t8 * t214 - t43 * t135 + t35 * t168 + t103 * t76 + t21 * t195 + t78 * t122 - g(1) * (t229 * t365 - t290 * t367) - g(2) * (-t233 * t365 + t292 * t367) -t121 * t43 - t122 * t42 - t16 * t168 - t166 * t17 - t194 * t8 - t195 * t7 - t56 * t76 - t57 * t75 - t419, t8 * t57 + t43 * t17 + t7 * t56 + t42 * t16 + t21 * t103 + t78 * t35 - g(1) * (-t373 * pkin(1) - t229 * pkin(4) - t228 * qJ(5) + t290 * t378 - t291 * t354 + (pkin(3) * t455 + pkin(8) * t538) * t366) - g(2) * (t538 * pkin(1) + t233 * pkin(4) + t232 * qJ(5) - t292 * t378 + t293 * t354 + (pkin(3) * t371 + pkin(8)) * t500) t131 * t25 - t39 * t412, -t104 * t39 - t130 * t25 - t131 * t26 + t40 * t412, t131 * t86 - t135 * t412 + t196 * t39 + t214 * t25, -t104 * t135 - t130 * t86 - t196 * t40 - t214 * t26, t135 * t196 + t214 * t86 (-qJD(6) * t413 - t15 * t369 + t374 * t9) * t196 + t414 * t86 + t2 * t214 + t10 * t135 + t27 * t104 + t74 * t26 + t14 * t130 + t59 * t40 + g(1) * t556 - g(2) * t184 -(qJD(6) * t414 + t15 * t374 + t369 * t9) * t196 - t413 * t86 - t1 * t214 - t11 * t135 - t27 * t412 + t74 * t25 + t14 * t131 + t59 * t39 - g(1) * t557 - g(2) * t183; 0, 0, 0, -t372 * t459, t482 * t502 (t470 * t479 + t467) * t366, -t451 * t470 + t340, t342, t283 * t343 + t502 * t537 - t392 - t430, pkin(1) * t459 + t280 * t343 + (pkin(8) * t469 + g(3)) * t501 + t417 + t458, t191 * t371 - t376 * t514 (t191 - t515) * t376 + (t401 + t514) * t371, -t324 * t475 + t371 * t278 + (-t263 * t372 + t324 * t494) * t481, t324 * t476 + t376 * t278 + (-t324 * t371 * t377 - t262 * t372) * t481, t324 * t451, -pkin(2) * t431 + t268 * t324 - t187 * t451 + t283 * t262 + (-t280 * t324 + t389) * t371 + (-t380 + t527) * t376, -pkin(2) * t191 + t188 * t451 - t283 * t263 - t324 * t484 + t371 * t380 + t376 * t389, t300 * t88 - t411 * t588, t199 * t588 - t299 * t88 - t300 * t89 - t411 * t486, t271 * t300 + t308 * t588 - t411 * t451, t199 * t451 - t271 * t299 + t308 * t486, t308 * t451, t136 * t299 + t423 * t199 + t486 * t203 + t410 * t271 + t308 * t565 - t354 * t89 - t84 * t451 - t388, t136 * t300 - t203 * t588 - t252 * t271 + t308 * t585 - t354 * t88 + t423 * t411 + t85 * t451 + t549, t172 * t89 - t78 * t212 - t410 * t75 + t7 * t299 + t486 * t42 - t367 * t388 + (-g(3) * t501 + t387) * t365 + t524 * t199 + t488 * t166, -t173 * t89 - t78 * t213 - t410 * t76 - t8 * t299 - t486 * t43 + t418 * t365 * t358 + t387 * t367 - (-t365 * t503 + t367 * t372) * t528 - t523 * t199 + t488 * t168, -t172 * t76 - t173 * t75 + t212 * t43 + t213 * t42 + (-t365 * t8 - t367 * t7) * t300 - (-t365 * t43 - t367 * t42) * t235 - t524 * t168 - t523 * t166 - t549, t7 * t172 + t8 * t173 - t21 * t410 + t524 * t42 + t523 * t43 + t488 * t78 + (t372 * t528 + t417) * t378 + (-t377 * t528 - t418) * (pkin(4) * t358 + qJ(5) * t357 + t354) -t219 * t25 - t412 * t492, -t104 * t492 - t218 * t25 + t219 * t26 + t412 * t491, t196 * t492 - t219 * t86 + t25 * t299 - t412 * t486, -t104 * t486 - t196 * t491 - t218 * t86 - t26 * t299, t196 * t486 + t299 * t86 (t138 * t374 - t153 * t369) * t86 + t2 * t299 + t211 * t26 + t14 * t218 - g(1) * (-t292 * t504 + t293 * t355) - g(2) * (-t290 * t504 + t291 * t355) + t491 * t59 - (t355 * t372 + t356 * t503) * t528 + (t369 * t422 - t374 * t421) * t196 + t522 * t104 + t486 * t10 -(t138 * t369 + t153 * t374) * t86 - t1 * t299 + t211 * t25 - t14 * t219 - g(1) * (t292 * t505 + t293 * t356) - g(2) * (t290 * t505 + t291 * t356) + t492 * t59 - (-t355 * t503 + t356 * t372) * t528 + (t369 * t421 + t374 * t422) * t196 - t486 * t11 - t522 * t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t263 * t262, -t262 ^ 2 + t263 ^ 2, t191 + t515, t401 - t514, t278, -g(1) * t241 - g(2) * t395 + g(3) * t288 - t188 * t324 - t245 * t263 + t381, g(1) * t242 + g(2) * t438 + g(3) * t289 - t187 * t324 - t245 * t262 + t400, t566, t562, t560, t539, t271, -t308 * t91 + (-t199 * t263 + t271 * t375 + t308 * t474) * pkin(3) + t540, -t308 * t92 + (-t263 * t411 - t271 * t370 + t308 * t473) * pkin(3) + t559, t166 * t424 - t199 * t49 + t353 * t75 + t365 * t394 + t544, t168 * t424 + t199 * t50 + t353 * t76 + t367 * t394 + t543, t166 * t50 + t168 * t49 + (-t166 * t341 - t350 * t75 - t573) * t367 + (t168 * t341 + t350 * t76 + t561) * t365 + t393, t8 * t506 - t350 * t526 + t21 * t353 - g(1) * (pkin(3) * t241 + qJ(5) * t233 - t227) - g(2) * (pkin(3) * t395 + t229 * qJ(5) - t226) - g(3) * (qJ(5) * t274 - t264 - t536) + t424 * t78 + t552 * t43 + t551 * t42, t575, t574, t577, t576, -t550 (t294 * t374 - t295 * t369) * t86 + t317 * t26 + (t369 * t406 - t374 * t405) * t196 + t425 * t104 + t578 -(t294 * t369 + t295 * t374) * t86 + t317 * t25 + (t369 * t405 + t374 * t406) * t196 - t425 * t412 + t579; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t566, t562, t560, t539, t271, -t308 * t85 + t540, -t308 * t84 + t559, -qJ(5) * t365 * t89 - pkin(4) * t75 - t166 * t85 + (t365 * t493 - t52) * t199 + t544, -t89 * t519 - pkin(4) * t76 - t168 * t85 + (t367 * t493 + t53) * t199 + t543, t166 * t53 + t168 * t52 + (-qJ(5) * t75 - qJD(5) * t166 - t573) * t367 + (qJ(5) * t76 + qJD(5) * t168 + t561) * t365 + t393, -t21 * pkin(4) + g(1) * t227 + g(2) * t226 + g(3) * t264 - t42 * t52 - t43 * t53 - t78 * t85 + (-t365 * t42 + t367 * t43) * qJD(5) + (-t526 + t393) * qJ(5), t575, t574, t577, t576, -t550 (t319 * t374 - t320 * t369) * t86 + t351 * t26 - t63 * t104 + (t369 * t403 - t374 * t402) * t196 + t578 -(t319 * t369 + t320 * t374) * t86 + t351 * t25 + t63 * t412 + (t369 * t402 + t374 * t403) * t196 + t579; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168 * t199 + t75, -t166 * t199 + t76, -t166 ^ 2 - t168 ^ 2, t166 * t43 + t168 * t42 - t386 + t547, 0, 0, 0, 0, 0, t26 - t570, t25 - t571; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412 * t104, -t104 ^ 2 + t412 ^ 2, t25 + t571, -t26 - t570, t86, t11 * t196 + t59 * t412 - g(1) * t183 + g(2) * t557 - g(3) * (-t274 * t355 - t356 * t498) + t2, t59 * t104 + g(1) * t184 + g(2) * t556 - g(3) * (-t274 * t356 + t355 * t498) - t416 + (t196 - qJD(6)) * t10;];
tau_reg  = t3;
