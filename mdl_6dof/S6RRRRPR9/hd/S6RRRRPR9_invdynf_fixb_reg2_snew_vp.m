% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 22:28
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR9_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 22:28:30
% EndTime: 2019-05-07 22:28:44
% DurationCPUTime: 14.94s
% Computational Cost: add. (196178->385), mult. (420906->584), div. (0->0), fcn. (347710->14), ass. (0->325)
t2707 = cos(pkin(6));
t2700 = qJD(1) * t2707 + qJD(2);
t2710 = sin(qJ(3));
t2715 = cos(qJ(3));
t2705 = sin(pkin(6));
t2711 = sin(qJ(2));
t2775 = qJD(1) * t2711;
t2761 = t2705 * t2775;
t2673 = t2700 * t2715 - t2710 * t2761;
t2674 = t2700 * t2710 + t2715 * t2761;
t2709 = sin(qJ(4));
t2714 = cos(qJ(4));
t2654 = -t2714 * t2673 + t2674 * t2709;
t2653 = qJD(6) + t2654;
t2790 = qJD(6) + t2653;
t2716 = cos(qJ(2));
t2762 = qJDD(1) * t2705;
t2699 = t2716 * t2762;
t2730 = qJD(2) * t2761 - t2699;
t2729 = qJDD(3) + t2730;
t2769 = t2673 * t2674;
t2644 = t2729 + t2769;
t2656 = t2673 * t2709 + t2674 * t2714;
t2766 = t2705 * t2716;
t2760 = qJD(1) * t2766;
t2691 = -qJD(3) + t2760;
t2685 = -qJD(4) + t2691;
t2704 = sin(pkin(12));
t2706 = cos(pkin(12));
t2639 = t2656 * t2704 + t2706 * t2685;
t2641 = t2656 * t2706 - t2685 * t2704;
t2708 = sin(qJ(6));
t2713 = cos(qJ(6));
t2605 = t2713 * t2639 + t2641 * t2708;
t2789 = t2605 ^ 2;
t2607 = -t2639 * t2708 + t2641 * t2713;
t2788 = t2607 ^ 2;
t2787 = t2639 ^ 2;
t2786 = t2641 ^ 2;
t2785 = t2653 ^ 2;
t2619 = t2654 ^ 2;
t2784 = t2656 ^ 2;
t2783 = t2673 ^ 2;
t2782 = t2674 ^ 2;
t2781 = t2685 ^ 2;
t2780 = t2691 ^ 2;
t2779 = t2700 ^ 2;
t2778 = -2 * qJD(5);
t2777 = t2707 * g(3);
t2776 = qJD(1) * t2705;
t2774 = t2605 * t2607;
t2773 = t2639 * t2641;
t2772 = t2641 * t2654;
t2771 = t2654 * t2639;
t2770 = t2654 * t2656;
t2768 = t2673 * t2691;
t2718 = qJD(1) ^ 2;
t2767 = t2705 ^ 2 * t2718;
t2765 = -qJD(3) - t2691;
t2764 = qJD(4) + t2685;
t2763 = qJD(6) - t2653;
t2712 = sin(qJ(1));
t2717 = cos(qJ(1));
t2694 = -g(1) * t2717 - g(2) * t2712;
t2675 = -pkin(1) * t2718 + pkin(8) * t2762 + t2694;
t2678 = (-pkin(2) * t2716 - pkin(9) * t2711) * t2776;
t2693 = t2712 * g(1) - t2717 * g(2);
t2724 = t2718 * t2705 * pkin(8) + qJDD(1) * pkin(1) + t2693;
t2723 = t2707 * t2724;
t2722 = (-t2705 * g(3) + t2723) * t2711;
t2753 = qJDD(1) * t2707 + qJDD(2);
t2720 = t2753 * pkin(9) - t2779 * pkin(2) + (t2678 * t2776 + t2675) * t2716 + t2722;
t2679 = qJD(2) * t2760 + t2711 * t2762;
t2721 = -t2699 * pkin(2) - t2679 * pkin(9) - t2777 + ((-pkin(9) * t2700 * t2716 + (qJD(2) + t2700) * t2711 * pkin(2)) * qJD(1) - t2724) * t2705;
t2593 = t2710 * t2721 + t2715 * t2720;
t2754 = t2710 * t2679 - t2715 * t2753;
t2648 = -qJD(3) * t2674 - t2754;
t2660 = -pkin(3) * t2691 - pkin(10) * t2674;
t2569 = -pkin(3) * t2783 + pkin(10) * t2648 + t2660 * t2691 + t2593;
t2592 = -t2710 * t2720 + t2715 * t2721;
t2725 = -t2715 * t2679 - t2710 * t2753;
t2649 = t2673 * qJD(3) - t2725;
t2719 = t2592 + (-t2649 - t2768) * pkin(10) + t2644 * pkin(3);
t2539 = t2714 * t2569 + t2709 * t2719;
t2618 = pkin(4) * t2654 - qJ(5) * t2656;
t2727 = qJDD(4) + t2729;
t2519 = -pkin(4) * t2781 + qJ(5) * t2727 - t2654 * t2618 + t2539;
t2755 = t2711 * t2675 - t2716 * t2723;
t2624 = -t2753 * pkin(2) - t2779 * pkin(9) + (g(3) * t2716 + t2678 * t2775) * t2705 + t2755;
t2580 = -t2648 * pkin(3) - t2783 * pkin(10) + t2674 * t2660 + t2624;
t2756 = -t2714 * t2648 + t2709 * t2649;
t2600 = qJD(4) * t2656 + t2756;
t2735 = -t2709 * t2648 - t2714 * t2649;
t2601 = -qJD(4) * t2654 - t2735;
t2758 = -t2654 * t2685 - t2601;
t2537 = t2758 * qJ(5) + (-t2656 * t2685 + t2600) * pkin(4) + t2580;
t2496 = t2706 * t2519 + t2704 * t2537 + t2639 * t2778;
t2538 = -t2709 * t2569 + t2714 * t2719;
t2594 = t2706 * t2601 + t2704 * t2727;
t2757 = t2601 * t2704 - t2706 * t2727;
t2759 = -t2708 * t2594 - t2713 * t2757;
t2573 = -t2594 - t2771;
t2574 = t2600 - t2773;
t2752 = t2700 * t2760;
t2495 = -t2704 * t2519 + t2706 * t2537 + t2641 * t2778;
t2483 = pkin(5) * t2574 + pkin(11) * t2573 + t2495;
t2610 = pkin(5) * t2654 - pkin(11) * t2641;
t2488 = -pkin(5) * t2787 - pkin(11) * t2757 - t2654 * t2610 + t2496;
t2461 = t2483 * t2713 - t2488 * t2708;
t2462 = t2483 * t2708 + t2488 * t2713;
t2447 = t2461 * t2713 + t2462 * t2708;
t2448 = -t2461 * t2708 + t2462 * t2713;
t2438 = -t2447 * t2704 + t2448 * t2706;
t2518 = -t2727 * pkin(4) - t2781 * qJ(5) + t2656 * t2618 + qJDD(5) - t2538;
t2507 = pkin(5) * t2757 - pkin(11) * t2787 + t2641 * t2610 + t2518;
t2435 = t2438 * t2709 - t2507 * t2714;
t2436 = t2438 * t2714 + t2507 * t2709;
t2432 = -t2435 * t2710 + t2436 * t2715;
t2437 = t2447 * t2706 + t2448 * t2704;
t2751 = t2432 * t2711 - t2437 * t2716;
t2474 = -t2495 * t2704 + t2496 * t2706;
t2463 = t2474 * t2709 - t2518 * t2714;
t2464 = t2474 * t2714 + t2518 * t2709;
t2450 = -t2463 * t2710 + t2464 * t2715;
t2473 = t2495 * t2706 + t2496 * t2704;
t2750 = t2450 * t2711 - t2473 * t2716;
t2529 = -t2607 * t2763 + t2759;
t2726 = -t2713 * t2594 + t2708 * t2757;
t2531 = t2605 * t2763 + t2726;
t2501 = t2529 * t2708 + t2531 * t2713;
t2502 = t2529 * t2713 - t2531 * t2708;
t2476 = -t2501 * t2704 + t2502 * t2706;
t2556 = -t2788 - t2789;
t2471 = t2476 * t2709 - t2556 * t2714;
t2472 = t2476 * t2714 + t2556 * t2709;
t2452 = -t2471 * t2710 + t2472 * t2715;
t2475 = t2501 * t2706 + t2502 * t2704;
t2749 = t2452 * t2711 - t2475 * t2716;
t2728 = -qJDD(6) - t2600;
t2552 = -t2728 - t2774;
t2565 = -t2785 - t2789;
t2524 = t2552 * t2713 + t2565 * t2708;
t2525 = -t2552 * t2708 + t2565 * t2713;
t2498 = -t2524 * t2704 + t2525 * t2706;
t2528 = t2607 * t2790 - t2759;
t2480 = t2498 * t2709 - t2528 * t2714;
t2481 = t2498 * t2714 + t2528 * t2709;
t2458 = -t2480 * t2710 + t2481 * t2715;
t2497 = t2524 * t2706 + t2525 * t2704;
t2748 = t2458 * t2711 - t2497 * t2716;
t2553 = t2728 - t2774;
t2577 = -t2785 - t2788;
t2533 = t2553 * t2708 + t2577 * t2713;
t2534 = t2553 * t2713 - t2577 * t2708;
t2504 = -t2533 * t2704 + t2534 * t2706;
t2530 = -t2605 * t2790 - t2726;
t2484 = t2504 * t2709 - t2530 * t2714;
t2485 = t2504 * t2714 + t2530 * t2709;
t2460 = -t2484 * t2710 + t2485 * t2715;
t2503 = t2533 * t2706 + t2534 * t2704;
t2747 = t2460 * t2711 - t2503 * t2716;
t2505 = t2538 * t2714 + t2539 * t2709;
t2506 = -t2538 * t2709 + t2539 * t2714;
t2479 = -t2505 * t2710 + t2506 * t2715;
t2746 = t2479 * t2711 - t2580 * t2716;
t2571 = -t2757 + t2772;
t2542 = t2571 * t2706 - t2573 * t2704;
t2586 = -t2786 - t2787;
t2520 = t2542 * t2709 - t2586 * t2714;
t2521 = t2542 * t2714 + t2586 * t2709;
t2492 = -t2520 * t2710 + t2521 * t2715;
t2541 = t2571 * t2704 + t2573 * t2706;
t2745 = t2492 * t2711 - t2541 * t2716;
t2596 = -t2619 - t2787;
t2545 = -t2574 * t2704 + t2596 * t2706;
t2570 = t2757 + t2772;
t2522 = t2545 * t2709 - t2570 * t2714;
t2523 = t2545 * t2714 + t2570 * t2709;
t2494 = -t2522 * t2710 + t2523 * t2715;
t2544 = t2574 * t2706 + t2596 * t2704;
t2744 = t2494 * t2711 - t2544 * t2716;
t2575 = -t2600 - t2773;
t2599 = -t2619 - t2786;
t2549 = t2575 * t2706 - t2599 * t2704;
t2572 = t2594 - t2771;
t2526 = t2549 * t2709 - t2572 * t2714;
t2527 = t2549 * t2714 + t2572 * t2709;
t2500 = -t2526 * t2710 + t2527 * t2715;
t2548 = t2575 * t2704 + t2599 * t2706;
t2743 = t2500 * t2711 - t2548 * t2716;
t2582 = -t2656 * t2764 - t2756;
t2584 = t2654 * t2764 + t2735;
t2550 = t2582 * t2709 + t2584 * t2714;
t2551 = t2582 * t2714 - t2584 * t2709;
t2514 = -t2550 * t2710 + t2551 * t2715;
t2602 = -t2784 - t2619;
t2742 = t2514 * t2711 - t2602 * t2716;
t2612 = t2727 - t2770;
t2615 = -t2619 - t2781;
t2578 = t2612 * t2714 + t2615 * t2709;
t2579 = -t2612 * t2709 + t2615 * t2714;
t2547 = -t2578 * t2710 + t2579 * t2715;
t2581 = (qJD(4) - t2685) * t2656 + t2756;
t2741 = t2547 * t2711 - t2581 * t2716;
t2611 = -t2727 - t2770;
t2633 = -t2781 - t2784;
t2588 = t2611 * t2709 + t2633 * t2714;
t2589 = t2611 * t2714 - t2633 * t2709;
t2558 = -t2588 * t2710 + t2589 * t2715;
t2740 = t2558 * t2711 + t2716 * t2758;
t2560 = -t2592 * t2710 + t2593 * t2715;
t2739 = t2560 * t2711 - t2624 * t2716;
t2628 = t2674 * t2765 - t2754;
t2630 = t2673 * t2765 + t2725;
t2598 = t2628 * t2715 - t2630 * t2710;
t2642 = -t2782 - t2783;
t2738 = t2598 * t2711 - t2642 * t2716;
t2650 = -t2780 - t2783;
t2609 = -t2644 * t2710 + t2650 * t2715;
t2627 = (qJD(3) - t2691) * t2674 + t2754;
t2737 = t2609 * t2711 - t2627 * t2716;
t2643 = -t2729 + t2769;
t2658 = -t2780 - t2782;
t2617 = t2643 * t2715 - t2658 * t2710;
t2629 = t2649 - t2768;
t2736 = t2617 * t2711 - t2629 * t2716;
t2651 = -g(3) * t2766 - t2755;
t2652 = t2716 * t2675 + t2722;
t2734 = t2651 * t2716 + t2652 * t2711;
t2662 = t2752 - t2679;
t2682 = t2700 * t2761;
t2663 = t2682 - t2730;
t2733 = t2662 * t2716 + t2663 * t2711;
t2702 = t2711 ^ 2;
t2670 = -t2702 * t2767 - t2779;
t2690 = t2716 * t2711 * t2767;
t2677 = t2690 - t2753;
t2732 = t2670 * t2716 + t2677 * t2711;
t2676 = t2690 + t2753;
t2703 = t2716 ^ 2;
t2680 = -t2703 * t2767 - t2779;
t2731 = t2676 * t2716 + t2680 * t2711;
t2688 = -qJDD(1) * t2712 - t2717 * t2718;
t2687 = qJDD(1) * t2717 - t2712 * t2718;
t2681 = (-t2702 - t2703) * t2767;
t2666 = -t2705 * t2724 - t2777;
t2664 = t2682 + t2730;
t2661 = t2752 + t2679;
t2659 = -t2676 * t2711 + t2680 * t2716;
t2657 = -t2670 * t2711 + t2677 * t2716;
t2635 = -t2662 * t2711 + t2663 * t2716;
t2632 = -t2705 * t2664 + t2707 * t2731;
t2631 = t2707 * t2664 + t2705 * t2731;
t2626 = -t2705 * t2661 + t2707 * t2732;
t2625 = t2707 * t2661 + t2705 * t2732;
t2623 = -t2705 * t2681 + t2707 * t2733;
t2622 = t2707 * t2681 + t2705 * t2733;
t2616 = t2643 * t2710 + t2658 * t2715;
t2614 = -t2651 * t2711 + t2652 * t2716;
t2608 = t2644 * t2715 + t2650 * t2710;
t2604 = -t2705 * t2666 + t2707 * t2734;
t2603 = t2707 * t2666 + t2705 * t2734;
t2597 = t2628 * t2710 + t2630 * t2715;
t2587 = t2617 * t2716 + t2629 * t2711;
t2585 = t2609 * t2716 + t2627 * t2711;
t2576 = t2598 * t2716 + t2642 * t2711;
t2567 = -t2705 * t2616 + t2707 * t2736;
t2566 = t2707 * t2616 + t2705 * t2736;
t2564 = -t2705 * t2608 + t2707 * t2737;
t2563 = t2707 * t2608 + t2705 * t2737;
t2559 = t2592 * t2715 + t2593 * t2710;
t2557 = t2588 * t2715 + t2589 * t2710;
t2555 = -t2705 * t2597 + t2707 * t2738;
t2554 = t2707 * t2597 + t2705 * t2738;
t2546 = t2578 * t2715 + t2579 * t2710;
t2543 = t2560 * t2716 + t2624 * t2711;
t2540 = t2558 * t2716 - t2711 * t2758;
t2532 = t2547 * t2716 + t2581 * t2711;
t2516 = -t2705 * t2559 + t2707 * t2739;
t2515 = t2707 * t2559 + t2705 * t2739;
t2513 = t2550 * t2715 + t2551 * t2710;
t2512 = -t2705 * t2557 + t2707 * t2740;
t2511 = t2707 * t2557 + t2705 * t2740;
t2510 = t2514 * t2716 + t2602 * t2711;
t2509 = -t2705 * t2546 + t2707 * t2741;
t2508 = t2707 * t2546 + t2705 * t2741;
t2499 = t2526 * t2715 + t2527 * t2710;
t2493 = t2522 * t2715 + t2523 * t2710;
t2491 = t2520 * t2715 + t2521 * t2710;
t2490 = -t2705 * t2513 + t2707 * t2742;
t2489 = t2707 * t2513 + t2705 * t2742;
t2487 = t2500 * t2716 + t2548 * t2711;
t2486 = t2494 * t2716 + t2544 * t2711;
t2482 = t2492 * t2716 + t2541 * t2711;
t2478 = t2505 * t2715 + t2506 * t2710;
t2477 = t2479 * t2716 + t2580 * t2711;
t2470 = -t2705 * t2499 + t2707 * t2743;
t2469 = t2707 * t2499 + t2705 * t2743;
t2468 = -t2705 * t2493 + t2707 * t2744;
t2467 = t2707 * t2493 + t2705 * t2744;
t2466 = -t2705 * t2491 + t2707 * t2745;
t2465 = t2707 * t2491 + t2705 * t2745;
t2459 = t2484 * t2715 + t2485 * t2710;
t2457 = t2480 * t2715 + t2481 * t2710;
t2456 = -t2705 * t2478 + t2707 * t2746;
t2455 = t2707 * t2478 + t2705 * t2746;
t2454 = t2460 * t2716 + t2503 * t2711;
t2453 = t2458 * t2716 + t2497 * t2711;
t2451 = t2471 * t2715 + t2472 * t2710;
t2449 = t2463 * t2715 + t2464 * t2710;
t2446 = t2452 * t2716 + t2475 * t2711;
t2445 = -t2705 * t2459 + t2707 * t2747;
t2444 = t2707 * t2459 + t2705 * t2747;
t2443 = -t2705 * t2457 + t2707 * t2748;
t2442 = t2707 * t2457 + t2705 * t2748;
t2441 = t2450 * t2716 + t2473 * t2711;
t2440 = -t2705 * t2451 + t2707 * t2749;
t2439 = t2707 * t2451 + t2705 * t2749;
t2434 = -t2705 * t2449 + t2707 * t2750;
t2433 = t2707 * t2449 + t2705 * t2750;
t2431 = t2435 * t2715 + t2436 * t2710;
t2430 = t2432 * t2716 + t2437 * t2711;
t2429 = -t2705 * t2431 + t2707 * t2751;
t2428 = t2707 * t2431 + t2705 * t2751;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2688, -t2687, 0, -t2693 * t2712 + t2694 * t2717, 0, 0, 0, 0, 0, 0, -t2632 * t2712 + t2659 * t2717, -t2626 * t2712 + t2657 * t2717, -t2623 * t2712 + t2635 * t2717, -t2604 * t2712 + t2614 * t2717, 0, 0, 0, 0, 0, 0, -t2564 * t2712 + t2585 * t2717, -t2567 * t2712 + t2587 * t2717, -t2555 * t2712 + t2576 * t2717, -t2516 * t2712 + t2543 * t2717, 0, 0, 0, 0, 0, 0, -t2509 * t2712 + t2532 * t2717, -t2512 * t2712 + t2540 * t2717, -t2490 * t2712 + t2510 * t2717, -t2456 * t2712 + t2477 * t2717, 0, 0, 0, 0, 0, 0, -t2468 * t2712 + t2486 * t2717, -t2470 * t2712 + t2487 * t2717, -t2466 * t2712 + t2482 * t2717, -t2434 * t2712 + t2441 * t2717, 0, 0, 0, 0, 0, 0, -t2443 * t2712 + t2453 * t2717, -t2445 * t2712 + t2454 * t2717, -t2440 * t2712 + t2446 * t2717, -t2429 * t2712 + t2430 * t2717; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2687, t2688, 0, t2693 * t2717 + t2694 * t2712, 0, 0, 0, 0, 0, 0, t2632 * t2717 + t2659 * t2712, t2626 * t2717 + t2657 * t2712, t2623 * t2717 + t2635 * t2712, t2604 * t2717 + t2614 * t2712, 0, 0, 0, 0, 0, 0, t2564 * t2717 + t2585 * t2712, t2567 * t2717 + t2587 * t2712, t2555 * t2717 + t2576 * t2712, t2516 * t2717 + t2543 * t2712, 0, 0, 0, 0, 0, 0, t2509 * t2717 + t2532 * t2712, t2512 * t2717 + t2540 * t2712, t2490 * t2717 + t2510 * t2712, t2456 * t2717 + t2477 * t2712, 0, 0, 0, 0, 0, 0, t2468 * t2717 + t2486 * t2712, t2470 * t2717 + t2487 * t2712, t2466 * t2717 + t2482 * t2712, t2434 * t2717 + t2441 * t2712, 0, 0, 0, 0, 0, 0, t2443 * t2717 + t2453 * t2712, t2445 * t2717 + t2454 * t2712, t2440 * t2717 + t2446 * t2712, t2429 * t2717 + t2430 * t2712; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2631, t2625, t2622, t2603, 0, 0, 0, 0, 0, 0, t2563, t2566, t2554, t2515, 0, 0, 0, 0, 0, 0, t2508, t2511, t2489, t2455, 0, 0, 0, 0, 0, 0, t2467, t2469, t2465, t2433, 0, 0, 0, 0, 0, 0, t2442, t2444, t2439, t2428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2718, -qJDD(1), 0, t2694, 0, 0, 0, 0, 0, 0, t2659, t2657, t2635, t2614, 0, 0, 0, 0, 0, 0, t2585, t2587, t2576, t2543, 0, 0, 0, 0, 0, 0, t2532, t2540, t2510, t2477, 0, 0, 0, 0, 0, 0, t2486, t2487, t2482, t2441, 0, 0, 0, 0, 0, 0, t2453, t2454, t2446, t2430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2718, 0, t2693, 0, 0, 0, 0, 0, 0, t2632, t2626, t2623, t2604, 0, 0, 0, 0, 0, 0, t2564, t2567, t2555, t2516, 0, 0, 0, 0, 0, 0, t2509, t2512, t2490, t2456, 0, 0, 0, 0, 0, 0, t2468, t2470, t2466, t2434, 0, 0, 0, 0, 0, 0, t2443, t2445, t2440, t2429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2631, t2625, t2622, t2603, 0, 0, 0, 0, 0, 0, t2563, t2566, t2554, t2515, 0, 0, 0, 0, 0, 0, t2508, t2511, t2489, t2455, 0, 0, 0, 0, 0, 0, t2467, t2469, t2465, t2433, 0, 0, 0, 0, 0, 0, t2442, t2444, t2439, t2428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2680, t2677, t2663, t2652, 0, 0, 0, 0, 0, 0, t2609, t2617, t2598, t2560, 0, 0, 0, 0, 0, 0, t2547, t2558, t2514, t2479, 0, 0, 0, 0, 0, 0, t2494, t2500, t2492, t2450, 0, 0, 0, 0, 0, 0, t2458, t2460, t2452, t2432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2676, t2670, t2662, t2651, 0, 0, 0, 0, 0, 0, -t2627, -t2629, -t2642, -t2624, 0, 0, 0, 0, 0, 0, -t2581, t2758, -t2602, -t2580, 0, 0, 0, 0, 0, 0, -t2544, -t2548, -t2541, -t2473, 0, 0, 0, 0, 0, 0, -t2497, -t2503, -t2475, -t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2664, t2661, t2681, t2666, 0, 0, 0, 0, 0, 0, t2608, t2616, t2597, t2559, 0, 0, 0, 0, 0, 0, t2546, t2557, t2513, t2478, 0, 0, 0, 0, 0, 0, t2493, t2499, t2491, t2449, 0, 0, 0, 0, 0, 0, t2457, t2459, t2451, t2431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2650, t2643, t2628, t2593, 0, 0, 0, 0, 0, 0, t2579, t2589, t2551, t2506, 0, 0, 0, 0, 0, 0, t2523, t2527, t2521, t2464, 0, 0, 0, 0, 0, 0, t2481, t2485, t2472, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2644, t2658, t2630, t2592, 0, 0, 0, 0, 0, 0, t2578, t2588, t2550, t2505, 0, 0, 0, 0, 0, 0, t2522, t2526, t2520, t2463, 0, 0, 0, 0, 0, 0, t2480, t2484, t2471, t2435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2627, t2629, t2642, t2624, 0, 0, 0, 0, 0, 0, t2581, -t2758, t2602, t2580, 0, 0, 0, 0, 0, 0, t2544, t2548, t2541, t2473, 0, 0, 0, 0, 0, 0, t2497, t2503, t2475, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2615, t2611, t2582, t2539, 0, 0, 0, 0, 0, 0, t2545, t2549, t2542, t2474, 0, 0, 0, 0, 0, 0, t2498, t2504, t2476, t2438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2612, t2633, t2584, t2538, 0, 0, 0, 0, 0, 0, -t2570, -t2572, -t2586, -t2518, 0, 0, 0, 0, 0, 0, -t2528, -t2530, -t2556, -t2507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2581, -t2758, t2602, t2580, 0, 0, 0, 0, 0, 0, t2544, t2548, t2541, t2473, 0, 0, 0, 0, 0, 0, t2497, t2503, t2475, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2596, t2575, t2571, t2496, 0, 0, 0, 0, 0, 0, t2525, t2534, t2502, t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2574, t2599, t2573, t2495, 0, 0, 0, 0, 0, 0, t2524, t2533, t2501, t2447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2570, t2572, t2586, t2518, 0, 0, 0, 0, 0, 0, t2528, t2530, t2556, t2507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2565, t2553, t2529, t2462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2552, t2577, t2531, t2461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2528, t2530, t2556, t2507;];
f_new_reg  = t1;
