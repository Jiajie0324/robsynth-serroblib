% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPPR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:21:54
% EndTime: 2019-05-07 04:22:23
% DurationCPUTime: 14.28s
% Computational Cost: add. (48197->550), mult. (110803->741), div. (0->0), fcn. (82186->10), ass. (0->341)
t342 = cos(pkin(10));
t338 = qJD(2) + qJD(3);
t336 = t338 ^ 2;
t344 = sin(qJ(3));
t348 = cos(qJ(3));
t349 = cos(qJ(2));
t345 = sin(qJ(2));
t403 = qJD(1) * t345;
t313 = qJD(1) * t348 * t349 - t344 * t403;
t314 = (t344 * t349 + t345 * t348) * qJD(1);
t341 = sin(pkin(10));
t295 = t313 * t341 + t314 * t342;
t443 = t295 ^ 2;
t451 = -t443 - t336;
t337 = qJDD(2) + qJDD(3);
t293 = -t313 * t342 + t314 * t341;
t415 = t295 * t293;
t452 = t415 + t337;
t463 = t452 * t341;
t194 = -t342 * t451 + t463;
t462 = t452 * t342;
t196 = t341 * t451 + t462;
t130 = t194 * t348 + t196 * t344;
t133 = t194 * t344 - t196 * t348;
t331 = t345 * qJDD(1);
t397 = qJD(1) * qJD(2);
t390 = t349 * t397;
t320 = t331 + t390;
t332 = t349 * qJDD(1);
t391 = t345 * t397;
t321 = t332 - t391;
t383 = t320 * t344 - t321 * t348;
t266 = -qJD(3) * t314 - t383;
t374 = t320 * t348 + t321 * t344;
t267 = qJD(3) * t313 + t374;
t220 = t266 * t341 + t267 * t342;
t278 = t293 * t338;
t187 = t220 - t278;
t517 = -pkin(1) * t187 + pkin(7) * (t130 * t345 + t133 * t349);
t516 = pkin(2) * t130;
t515 = pkin(8) * t130;
t514 = -pkin(2) * t187 + pkin(8) * t133;
t274 = -t443 + t336;
t453 = t337 - t415;
t473 = t341 * t453;
t198 = t274 * t342 + t473;
t469 = t342 * t453;
t202 = -t274 * t341 + t469;
t512 = t345 * (t198 * t344 - t202 * t348) - t349 * (t198 * t348 + t202 * t344);
t444 = t293 ^ 2;
t233 = -t336 - t444;
t160 = t233 * t341 + t469;
t163 = -t233 * t342 + t473;
t105 = t160 * t348 - t163 * t344;
t108 = t160 * t344 + t163 * t348;
t219 = -t266 * t342 + t267 * t341;
t279 = t338 * t295;
t457 = t219 + t279;
t511 = -pkin(1) * t457 - pkin(7) * (t105 * t345 + t108 * t349);
t273 = t444 - t336;
t200 = t273 * t341 + t462;
t204 = t273 * t342 - t463;
t508 = t345 * (t200 * t344 - t204 * t348) - t349 * (t200 * t348 + t204 * t344);
t507 = pkin(2) * t105;
t180 = t219 - t279;
t456 = t220 + t278;
t482 = -t180 * t342 + t341 * t456;
t483 = -t180 * t341 - t342 * t456;
t491 = t344 * t482 + t348 * t483;
t506 = pkin(2) * t491;
t505 = pkin(3) * t194;
t504 = pkin(8) * t105;
t503 = pkin(8) * t491;
t502 = qJ(4) * t194;
t501 = qJ(4) * t196;
t500 = -pkin(2) * t457 - pkin(8) * t108;
t449 = -t444 - t443;
t492 = -t344 * t483 + t348 * t482;
t499 = -pkin(2) * t449 + pkin(8) * t492;
t495 = pkin(7) * (-t345 * t491 + t349 * t492) - pkin(1) * t449;
t118 = pkin(3) * t483;
t494 = qJ(4) * t483;
t493 = -pkin(3) * t449 + qJ(4) * t482;
t480 = t187 * t342 - t341 * t457;
t426 = t457 * t342;
t481 = -t187 * t341 - t426;
t490 = t345 * (-t344 * t480 + t348 * t481) + t349 * (t344 * t481 + t348 * t480);
t489 = pkin(3) * t160;
t488 = qJ(4) * t160;
t487 = qJ(4) * t163;
t340 = t349 ^ 2;
t351 = qJD(1) ^ 2;
t346 = sin(qJ(1));
t440 = cos(qJ(1));
t388 = t346 * g(1) - g(2) * t440;
t369 = qJDD(1) * pkin(1) + t388;
t370 = qJD(2) * pkin(2) - pkin(8) * t403;
t269 = t321 * pkin(2) - t370 * t403 + t369 + (pkin(8) * t340 + pkin(7)) * t351;
t311 = t313 ^ 2;
t376 = pkin(3) * t338 - qJ(4) * t314;
t166 = t266 * pkin(3) + t311 * qJ(4) - t314 * t376 - qJDD(4) + t269;
t442 = 2 * qJD(5);
t484 = pkin(4) * t279 - t295 * t442 - t166;
t441 = pkin(4) + pkin(9);
t459 = qJ(5) * t187;
t343 = sin(qJ(6));
t217 = qJDD(6) + t220;
t347 = cos(qJ(6));
t262 = -t293 * t347 + t338 * t343;
t264 = t293 * t343 + t338 * t347;
t222 = t264 * t262;
t458 = t217 - t222;
t467 = t343 * t458;
t302 = t313 * t314;
t454 = t302 + t337;
t466 = t344 * t454;
t465 = t347 * t458;
t464 = t348 * t454;
t240 = pkin(4) * t293 - qJ(5) * t295;
t406 = t345 * t351;
t371 = g(1) * t440 + g(2) * t346;
t432 = qJDD(1) * pkin(7);
t316 = -pkin(1) * t351 - t371 + t432;
t412 = t316 * t345;
t257 = qJDD(2) * pkin(2) - pkin(8) * t320 - t412 + (pkin(2) * t406 + pkin(8) * t397 - g(3)) * t349;
t306 = -t345 * g(3) + t349 * t316;
t334 = t340 * t351;
t258 = -pkin(2) * t334 + t321 * pkin(8) - qJD(2) * t370 + t306;
t211 = -t257 * t348 + t258 * t344;
t309 = t338 * t313;
t253 = t267 - t309;
t150 = pkin(3) * t454 - qJ(4) * t253 - t211;
t212 = t344 * t257 + t348 * t258;
t152 = -t311 * pkin(3) + t266 * qJ(4) - t338 * t376 + t212;
t95 = 0.2e1 * qJD(4) * t295 - t150 * t342 + t152 * t341;
t75 = -pkin(4) * t337 - qJ(5) * t336 + t240 * t295 + qJDD(5) + t95;
t448 = -pkin(9) * t453 + t75;
t354 = pkin(5) * t456 + t448;
t272 = pkin(5) * t295 - pkin(9) * t338;
t352 = -t459 + t484;
t61 = -pkin(5) * t444 + t219 * t441 - t295 * t272 + t352;
t33 = t343 * t61 - t347 * t354;
t434 = t347 * t61;
t34 = t343 * t354 + t434;
t18 = -t33 * t347 + t34 * t343;
t96 = -0.2e1 * qJD(4) * t293 + t150 * t341 + t152 * t342;
t450 = t443 - t444;
t365 = (-t293 * t341 - t295 * t342) * t338;
t366 = (-t293 * t342 + t295 * t341) * t338;
t447 = t345 * (-t344 * t365 + t348 * t366) + t349 * (t344 * t366 + t348 * t365);
t410 = t338 * t342;
t367 = t219 * t341 + t293 * t410;
t411 = t338 * t341;
t379 = -t219 * t342 + t293 * t411;
t446 = t345 * (-t344 * t379 + t348 * t367) + t349 * (t344 * t367 + t348 * t379);
t378 = t220 * t342 - t295 * t411;
t380 = t220 * t341 + t295 * t410;
t445 = t345 * (-t344 * t380 + t348 * t378) + t349 * (t344 * t378 + t348 * t380);
t260 = t262 ^ 2;
t261 = t264 ^ 2;
t287 = qJD(6) + t295;
t285 = t287 ^ 2;
t312 = t314 ^ 2;
t439 = pkin(4) * t341;
t438 = pkin(4) * t342;
t358 = -pkin(4) * t336 + qJ(5) * t337 - t240 * t293 + t96;
t58 = -t219 * pkin(5) - t444 * pkin(9) + (t442 + t272) * t338 + t358;
t436 = t343 * t58;
t52 = t341 * t96 - t342 * t95;
t435 = t344 * t52;
t56 = t347 * t58;
t433 = t348 * t52;
t146 = -t211 * t348 + t212 * t344;
t431 = t146 * t345;
t154 = t217 + t222;
t430 = t154 * t343;
t429 = t154 * t347;
t428 = t166 * t341;
t427 = t166 * t342;
t419 = t269 * t344;
t418 = t269 * t348;
t417 = t287 * t343;
t416 = t287 * t347;
t299 = -t302 + t337;
t414 = t299 * t344;
t413 = t299 * t348;
t409 = t338 * t344;
t408 = t338 * t348;
t326 = t349 * t406;
t407 = t345 * (qJDD(2) + t326);
t405 = t349 * (qJDD(2) - t326);
t399 = qJD(3) + t338;
t398 = qJD(6) + t287;
t71 = t338 * t442 + t358;
t42 = t341 * t71 - t342 * t75;
t396 = pkin(3) * t42 - pkin(4) * t75 + qJ(5) * t71;
t395 = t341 * t222;
t394 = t342 * t222;
t393 = -pkin(4) * t456 - qJ(5) * t180 + t118;
t389 = qJ(5) * t341 + pkin(3);
t53 = t341 * t95 + t342 * t96;
t147 = t211 * t344 + t212 * t348;
t386 = -t219 * t347 + t337 * t343;
t305 = g(3) * t349 + t412;
t384 = t345 * t305 + t306 * t349;
t382 = -t96 - t505;
t15 = -t18 * t342 + t341 * t58;
t377 = pkin(3) * t15 + qJ(5) * t58 - t18 * t441;
t19 = t33 * t343 + t34 * t347;
t375 = t219 * t343 + t337 * t347;
t372 = -t95 + t489;
t206 = -t261 - t285;
t110 = t206 * t347 - t430;
t145 = -t262 * t398 + t375;
t81 = -t110 * t342 + t145 * t341;
t368 = pkin(3) * t81 + qJ(5) * t145 - t110 * t441 + t56;
t191 = -t285 - t260;
t103 = t191 * t343 + t465;
t140 = t264 * t398 + t386;
t72 = -t103 * t342 + t140 * t341;
t364 = pkin(3) * t72 + qJ(5) * t140 - t103 * t441 + t436;
t362 = (-qJD(3) + t338) * t314 - t383;
t361 = (-qJD(6) + t287) * t264 - t386;
t165 = -qJD(6) * t262 + t375;
t176 = -t260 - t261;
t229 = t287 * t262;
t144 = t165 + t229;
t89 = -t144 * t347 + t343 * t361;
t63 = t176 * t341 - t342 * t89;
t360 = pkin(3) * t63 + qJ(5) * t176 - t441 * t89 - t18;
t357 = -pkin(4) * t453 - qJ(5) * t233 - t489 + t75;
t356 = -pkin(4) * t451 + qJ(5) * t452 + t505 + t71;
t353 = -t219 * pkin(4) - t484;
t350 = qJD(2) ^ 2;
t339 = t345 ^ 2;
t333 = t339 * t351;
t322 = t332 - 0.2e1 * t391;
t319 = t331 + 0.2e1 * t390;
t315 = pkin(7) * t351 + t369;
t308 = -t312 + t336;
t307 = t311 - t336;
t304 = -t312 - t336;
t301 = t312 - t311;
t297 = -t336 - t311;
t268 = -t311 - t312;
t255 = -t304 * t344 - t413;
t254 = t304 * t348 - t414;
t252 = t267 + t309;
t251 = t313 * t399 + t374;
t248 = t314 * t399 + t383;
t244 = t297 * t348 - t466;
t243 = t297 * t344 + t464;
t228 = -t261 + t285;
t227 = t260 - t285;
t221 = t261 - t260;
t190 = t253 * t344 + t348 * t362;
t189 = -t253 * t348 + t344 * t362;
t164 = -qJD(6) * t264 - t386;
t157 = (-t262 * t347 + t264 * t343) * t287;
t156 = (t262 * t343 + t264 * t347) * t287;
t143 = t165 - t229;
t137 = t165 * t347 - t264 * t417;
t136 = -t165 * t343 - t264 * t416;
t135 = -t164 * t343 + t262 * t416;
t134 = -t164 * t347 - t262 * t417;
t129 = -t427 + t502;
t128 = -t156 * t341 + t217 * t342;
t127 = t156 * t342 + t217 * t341;
t116 = t227 * t347 - t430;
t115 = -t228 * t343 + t465;
t114 = -t227 * t343 - t429;
t113 = -t228 * t347 - t467;
t112 = -t428 - t488;
t111 = -t206 * t343 - t429;
t104 = t191 * t347 - t467;
t101 = -t136 * t341 + t394;
t100 = -t134 * t341 - t394;
t99 = t136 * t342 + t395;
t98 = t134 * t342 - t395;
t97 = -pkin(3) * t187 - t428 - t501;
t94 = -pkin(3) * t457 + t427 - t487;
t92 = t353 + t459;
t91 = t144 * t343 + t347 * t361;
t90 = -t140 * t347 - t143 * t343;
t88 = t140 * t343 - t143 * t347;
t86 = -t113 * t341 + t144 * t342;
t85 = -t114 * t341 + t342 * t361;
t84 = t113 * t342 + t144 * t341;
t83 = t114 * t342 + t341 * t361;
t82 = t110 * t341 + t145 * t342;
t73 = t103 * t341 + t140 * t342;
t68 = t221 * t342 - t341 * t88;
t67 = t221 * t341 + t342 * t88;
t66 = (t457 + t219) * pkin(4) + t352;
t65 = t353 + 0.2e1 * t459;
t64 = t176 * t342 + t341 * t89;
t60 = -qJ(5) * t449 + t75;
t59 = -pkin(4) * t449 + t71;
t54 = -t187 * t439 + t342 * t65 - t502;
t51 = pkin(3) * t52;
t50 = qJ(5) * t426 - t341 * t66 + t488;
t49 = pkin(5) * t89 - qJ(5) * t91;
t48 = t501 + t341 * t65 + (pkin(3) + t438) * t187;
t47 = t342 * t66 + t389 * t457 + t487;
t46 = pkin(3) * t166 + qJ(4) * t53;
t45 = -t344 * t81 + t348 * t82;
t44 = t344 * t82 + t348 * t81;
t43 = t341 * t75 + t342 * t71;
t40 = -t344 * t72 + t348 * t73;
t39 = t344 * t73 + t348 * t72;
t38 = -t52 - t494;
t37 = -t344 * t63 + t348 * t64;
t36 = t344 * t64 + t348 * t63;
t35 = t493 + t53;
t31 = pkin(5) * t145 - t111 * t441 - t436;
t30 = -t341 * t59 + t342 * t60 - t494;
t29 = pkin(5) * t140 - t104 * t441 + t56;
t28 = t341 * t60 + t342 * t59 + t493;
t27 = t348 * t53 - t435;
t26 = t344 * t53 + t433;
t25 = -qJ(4) * t42 + (qJ(5) * t342 - t439) * t92;
t24 = -t434 - t343 * t448 - qJ(5) * t111 + (-t343 * t456 + t110) * pkin(5);
t23 = pkin(5) * t103 - qJ(5) * t104 - t33;
t22 = -t344 * t42 + t348 * t43;
t21 = t344 * t43 + t348 * t42;
t20 = qJ(4) * t43 + (t389 + t438) * t92;
t16 = t18 * t341 + t342 * t58;
t13 = pkin(5) * t176 - t441 * t91 - t19;
t12 = -qJ(4) * t81 + t24 * t342 - t31 * t341;
t11 = -qJ(4) * t72 + t23 * t342 - t29 * t341;
t10 = -pkin(3) * t111 + qJ(4) * t82 + t24 * t341 + t31 * t342;
t9 = -pkin(3) * t104 + qJ(4) * t73 + t23 * t341 + t29 * t342;
t8 = -qJ(4) * t63 - t13 * t341 + t342 * t49;
t7 = pkin(5) * t18 - qJ(5) * t19;
t6 = -pkin(3) * t91 + qJ(4) * t64 + t13 * t342 + t341 * t49;
t5 = pkin(5) * t58 - t19 * t441;
t4 = -t15 * t344 + t16 * t348;
t3 = t15 * t348 + t16 * t344;
t2 = -qJ(4) * t15 - t341 * t5 + t342 * t7;
t1 = -pkin(3) * t19 + qJ(4) * t16 + t341 * t7 + t342 * t5;
t14 = [0, 0, 0, 0, 0, qJDD(1), t388, t371, 0, 0, (t320 + t390) * t345, t319 * t349 + t322 * t345, t407 + t349 * (-t333 + t350), (t321 - t391) * t349, t345 * (t334 - t350) + t405, 0, t349 * t315 + pkin(1) * t322 + pkin(7) * (t349 * (-t334 - t350) - t407), -t345 * t315 - pkin(1) * t319 + pkin(7) * (-t405 - t345 * (-t333 - t350)), pkin(1) * (t333 + t334) + (t339 + t340) * t432 + t384, pkin(1) * t315 + pkin(7) * t384, t345 * (t267 * t348 - t314 * t409) + t349 * (t267 * t344 + t314 * t408), t345 * (-t248 * t348 - t252 * t344) + t349 * (-t248 * t344 + t252 * t348), t345 * (-t308 * t344 + t464) + t349 * (t308 * t348 + t466), t345 * (-t266 * t344 - t313 * t408) + t349 * (t266 * t348 - t313 * t409), t345 * (t307 * t348 - t414) + t349 * (t307 * t344 + t413), (t345 * (t313 * t348 + t314 * t344) + t349 * (t313 * t344 - t314 * t348)) * t338, t345 * (-pkin(8) * t243 - t419) + t349 * (-pkin(2) * t248 + pkin(8) * t244 + t418) - pkin(1) * t248 + pkin(7) * (-t243 * t345 + t244 * t349), t345 * (-pkin(8) * t254 - t418) + t349 * (-pkin(2) * t251 + pkin(8) * t255 - t419) - pkin(1) * t251 + pkin(7) * (-t254 * t345 + t255 * t349), t345 * (-pkin(8) * t189 - t146) + t349 * (-pkin(2) * t268 + pkin(8) * t190 + t147) - pkin(1) * t268 + pkin(7) * (-t189 * t345 + t190 * t349), -pkin(8) * t431 + t349 * (pkin(2) * t269 + pkin(8) * t147) + pkin(1) * t269 + pkin(7) * (t147 * t349 - t431), t445, t490, -t512, t446, -t508, t447, t345 * (t112 * t348 - t344 * t94 - t504) + t349 * (t112 * t344 + t348 * t94 + t500) + t511, t345 * (t129 * t348 - t344 * t97 + t515) + t349 * (t129 * t344 + t348 * t97 + t514) + t517, t345 * (-t344 * t35 + t348 * t38 - t503) + t349 * (t344 * t38 + t348 * t35 + t499) + t495, t345 * (-pkin(8) * t26 - qJ(4) * t433 - t344 * t46) + t349 * (pkin(2) * t166 + pkin(8) * t27 - qJ(4) * t435 + t348 * t46) + pkin(1) * t166 + pkin(7) * (-t26 * t345 + t27 * t349), t447, t512, t508, t445, t490, t446, t345 * (-t28 * t344 + t30 * t348 - t503) + t349 * (t28 * t348 + t30 * t344 + t499) + t495, t345 * (-t344 * t47 + t348 * t50 + t504) + t349 * (t344 * t50 + t348 * t47 - t500) - t511, t345 * (-t344 * t48 + t348 * t54 - t515) + t349 * (t344 * t54 + t348 * t48 - t514) - t517, t345 * (-pkin(8) * t21 - t20 * t344 + t25 * t348) + t349 * (pkin(2) * t92 + pkin(8) * t22 + t20 * t348 + t25 * t344) + pkin(1) * t92 + pkin(7) * (-t21 * t345 + t22 * t349), t345 * (t101 * t348 - t344 * t99) + t349 * (t101 * t344 + t348 * t99), t345 * (-t344 * t67 + t348 * t68) + t349 * (t344 * t68 + t348 * t67), t345 * (-t344 * t84 + t348 * t86) + t349 * (t344 * t86 + t348 * t84), t345 * (t100 * t348 - t344 * t98) + t349 * (t100 * t344 + t348 * t98), t345 * (-t344 * t83 + t348 * t85) + t349 * (t344 * t85 + t348 * t83), t345 * (-t127 * t344 + t128 * t348) + t349 * (t127 * t348 + t128 * t344), t345 * (-pkin(8) * t39 + t11 * t348 - t344 * t9) + t349 * (-pkin(2) * t104 + pkin(8) * t40 + t11 * t344 + t348 * t9) - pkin(1) * t104 + pkin(7) * (-t345 * t39 + t349 * t40), t345 * (-pkin(8) * t44 - t10 * t344 + t12 * t348) + t349 * (-pkin(2) * t111 + pkin(8) * t45 + t10 * t348 + t12 * t344) - pkin(1) * t111 + pkin(7) * (-t345 * t44 + t349 * t45), t345 * (-pkin(8) * t36 - t344 * t6 + t348 * t8) + t349 * (-pkin(2) * t91 + pkin(8) * t37 + t344 * t8 + t348 * t6) - pkin(1) * t91 + pkin(7) * (-t345 * t36 + t349 * t37), t345 * (-pkin(8) * t3 - t1 * t344 + t2 * t348) + t349 * (-pkin(2) * t19 + pkin(8) * t4 + t1 * t348 + t2 * t344) - pkin(1) * t19 + pkin(7) * (-t3 * t345 + t349 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t326, t333 - t334, t331, t326, t332, qJDD(2), -t305, -t306, 0, 0, -t302, t301, t253, t302, t362, t337, pkin(2) * t243 - t211, pkin(2) * t254 - t212, pkin(2) * t189, pkin(2) * t146, t415, t450, t456, -t415, -t180, t337, t372 + t507, t382 - t516, t118 + t506, pkin(2) * t26 + t51, t337, -t456, t180, t415, t450, -t415, t393 + t506, t357 - t507, t356 + t516, pkin(2) * t21 + t396, t137, t90, t115, t135, t116, t157, pkin(2) * t39 + t364, pkin(2) * t44 + t368, pkin(2) * t36 + t360, pkin(2) * t3 + t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t301, t253, t302, t362, t337, -t211, -t212, 0, 0, t415, t450, t456, -t415, -t180, t337, t372, t382, t118, t51, t337, -t456, t180, t415, t450, -t415, t393, t357, t356, t396, t137, t90, t115, t135, t116, t157, t364, t368, t360, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t457, t187, t449, -t166, 0, 0, 0, 0, 0, 0, t449, -t457, -t187, -t92, 0, 0, 0, 0, 0, 0, t104, t111, t91, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, t453, t451, t75, 0, 0, 0, 0, 0, 0, t103, t110, t89, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t222, t221, t144, -t222, t361, t217, -t33, -t34, 0, 0;];
tauJ_reg  = t14;
