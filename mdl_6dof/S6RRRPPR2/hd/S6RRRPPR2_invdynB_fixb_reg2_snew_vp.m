% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:22:23
% EndTime: 2019-05-07 04:23:05
% DurationCPUTime: 45.18s
% Computational Cost: add. (156468->806), mult. (359073->1166), div. (0->0), fcn. (266150->10), ass. (0->572)
t1084 = sin(qJ(1));
t1088 = cos(qJ(1));
t1083 = sin(qJ(2));
t1087 = cos(qJ(2));
t1082 = sin(qJ(3));
t1086 = cos(qJ(3));
t1080 = cos(pkin(10));
t1079 = sin(pkin(10));
t1075 = qJDD(2) + qJDD(3);
t1154 = qJD(1) * t1087;
t1155 = qJD(1) * t1083;
t1034 = -t1082 * t1155 + t1086 * t1154;
t1035 = (t1082 * t1087 + t1083 * t1086) * qJD(1);
t1000 = t1034 * t1079 + t1035 * t1080;
t998 = -t1080 * t1034 + t1035 * t1079;
t1178 = t1000 * t998;
t1197 = t1178 + t1075;
t1226 = t1079 * t1197;
t1076 = qJD(2) + qJD(3);
t1186 = t1076 ^ 2;
t1187 = t1000 ^ 2;
t966 = -t1187 - t1186;
t873 = t1080 * t966 - t1226;
t1224 = t1080 * t1197;
t874 = t1079 * t966 + t1224;
t789 = t1082 * t874 - t1086 * t873;
t791 = t1082 * t873 + t1086 * t874;
t715 = t1083 * t789 - t1087 * t791;
t1121 = qJD(2) * t1154;
t1133 = qJDD(1) * t1083;
t1044 = t1121 + t1133;
t1070 = t1087 * qJDD(1);
t1124 = qJD(2) * t1155;
t1045 = t1070 - t1124;
t1117 = t1082 * t1044 - t1086 * t1045;
t1102 = qJD(3) * t1035 + t1117;
t962 = qJD(3) * t1034 + t1044 * t1086 + t1045 * t1082;
t903 = -t1079 * t1102 + t1080 * t962;
t982 = t998 * t1076;
t863 = -t982 + t903;
t679 = t1084 * t715 - t1088 * t863;
t1299 = pkin(6) * t679;
t681 = t1084 * t863 + t1088 * t715;
t1298 = pkin(6) * t681;
t902 = t1079 * t962 + t1080 * t1102;
t983 = t1076 * t1000;
t1205 = t902 + t983;
t915 = -t1178 + t1075;
t1248 = t1080 * t915;
t1188 = t998 ^ 2;
t913 = -t1186 - t1188;
t835 = t1079 * t913 + t1248;
t1249 = t1079 * t915;
t838 = -t1080 * t913 + t1249;
t753 = t1082 * t838 - t1086 * t835;
t755 = t1082 * t835 + t1086 * t838;
t684 = t1083 * t753 - t1087 * t755;
t664 = t1084 * t684 - t1088 * t1205;
t1297 = pkin(6) * t664;
t666 = t1084 * t1205 + t1088 * t684;
t1296 = pkin(6) * t666;
t712 = t1083 * t791 + t1087 * t789;
t1295 = pkin(7) * t712;
t1294 = -pkin(1) * t712 - pkin(2) * t789 + pkin(3) * t873;
t1293 = pkin(1) * t863 - pkin(7) * t715;
t973 = -t1187 + t1186;
t877 = t1080 * t973 + t1249;
t882 = t1079 * t973 - t1248;
t794 = t1082 * t882 - t1086 * t877;
t798 = t1082 * t877 + t1086 * t882;
t720 = t1083 * t794 - t1087 * t798;
t864 = -t982 - t903;
t1292 = t1084 * t720 + t1088 * t864;
t972 = t1188 - t1186;
t879 = t1079 * t972 + t1224;
t883 = t1080 * t972 - t1226;
t795 = t1082 * t883 + t1086 * t879;
t800 = t1082 * t879 - t1086 * t883;
t723 = t1083 * t795 + t1087 * t800;
t856 = t902 - t983;
t1291 = t1084 * t723 - t1088 * t856;
t1290 = -t1084 * t864 + t1088 * t720;
t1289 = t1084 * t856 + t1088 * t723;
t683 = t1083 * t755 + t1087 * t753;
t1288 = pkin(7) * t683;
t1287 = pkin(1) * t683 + pkin(2) * t753 - pkin(3) * t835;
t1286 = pkin(1) * t1205 - pkin(7) * t684;
t1285 = pkin(8) * t789;
t1195 = -t1188 - t1187;
t1233 = -t1079 * t856 + t1080 * t864;
t1234 = -t1079 * t864 - t1080 * t856;
t1252 = -t1082 * t1233 + t1086 * t1234;
t1253 = t1082 * t1234 + t1086 * t1233;
t1261 = -t1083 * t1253 + t1087 * t1252;
t1270 = t1084 * t1195 + t1088 * t1261;
t1284 = pkin(6) * t1270;
t1272 = t1084 * t1261 - t1088 * t1195;
t1283 = pkin(6) * t1272;
t1281 = pkin(2) * t863 + pkin(8) * t791;
t1280 = t1083 * t798 + t1087 * t794;
t1279 = t1083 * t800 - t1087 * t795;
t1278 = pkin(8) * t753;
t1260 = t1083 * t1252 + t1087 * t1253;
t1277 = pkin(7) * t1260;
t1275 = pkin(2) * t1205 + pkin(8) * t755;
t607 = -pkin(1) * t1260 - pkin(2) * t1253 - pkin(3) * t1233;
t1274 = -pkin(1) * t1195 + pkin(7) * t1261;
t1196 = -t1187 + t1188;
t1241 = -t1079 * t1205 + t1080 * t863;
t1172 = t1080 * t1205;
t1242 = -t1079 * t863 - t1172;
t1250 = -t1082 * t1241 + t1086 * t1242;
t1251 = t1082 * t1242 + t1086 * t1241;
t1263 = -t1083 * t1251 + t1087 * t1250;
t1273 = t1084 * t1263 + t1088 * t1196;
t1271 = -t1084 * t1196 + t1088 * t1263;
t1268 = pkin(8) * t1253;
t1267 = qJ(4) * t873;
t1266 = qJ(4) * t874;
t1264 = -pkin(2) * t1195 + pkin(8) * t1252;
t1262 = t1083 * t1250 + t1087 * t1251;
t1257 = qJ(4) * t835;
t1256 = qJ(4) * t838;
t1255 = qJ(4) * t1233;
t1254 = -pkin(3) * t1195 + qJ(4) * t1234;
t1232 = 2 * qJD(5);
t1032 = t1034 ^ 2;
t1109 = pkin(3) * t1076 - qJ(4) * t1035;
t1078 = t1087 ^ 2;
t1090 = qJD(1) ^ 2;
t1054 = t1084 * g(1) - t1088 * g(2);
t1105 = qJDD(1) * pkin(1) + t1054;
t1106 = qJD(2) * pkin(2) - pkin(8) * t1155;
t964 = t1045 * pkin(2) - t1106 * t1155 + t1105 + (pkin(8) * t1078 + pkin(7)) * t1090;
t845 = -pkin(3) * t1102 + t1032 * qJ(4) - t1035 * t1109 - qJDD(4) + t964;
t1243 = pkin(4) * t983 - t1000 * t1232 - t845;
t1064 = t1088 * t1075;
t1100 = (t1000 * t1079 - t1080 * t998) * t1076;
t1101 = (-t1000 * t1080 - t1079 * t998) * t1076;
t1193 = t1082 * t1100 + t1086 * t1101;
t1194 = -t1082 * t1101 + t1086 * t1100;
t1208 = -t1083 * t1193 + t1087 * t1194;
t1240 = t1084 * t1208 - t1064;
t1125 = t1088 * t1178;
t1141 = t1076 * t1080;
t1103 = t1079 * t902 + t1141 * t998;
t1142 = t1076 * t1079;
t1112 = -t1080 * t902 + t1142 * t998;
t1191 = t1082 * t1103 + t1086 * t1112;
t1192 = -t1082 * t1112 + t1086 * t1103;
t1210 = -t1083 * t1191 + t1087 * t1192;
t1239 = t1084 * t1210 + t1125;
t1110 = t1000 * t1141 + t1079 * t903;
t1111 = -t1000 * t1142 + t1080 * t903;
t1189 = -t1082 * t1110 + t1086 * t1111;
t1190 = t1082 * t1111 + t1086 * t1110;
t1213 = -t1083 * t1190 + t1087 * t1189;
t1238 = t1084 * t1213 - t1125;
t1126 = t1084 * t1178;
t1237 = t1088 * t1210 - t1126;
t1236 = t1088 * t1213 + t1126;
t1143 = t1075 * t1084;
t1235 = t1088 * t1208 + t1143;
t1203 = qJ(5) * t863;
t1081 = sin(qJ(6));
t900 = qJDD(6) + t903;
t1085 = cos(qJ(6));
t957 = t1076 * t1081 - t1085 * t998;
t959 = t1076 * t1085 + t1081 * t998;
t905 = t959 * t957;
t1204 = -t905 + t900;
t1223 = t1081 * t1204;
t1007 = t1034 * t1035;
t1198 = t1007 + t1075;
t1222 = t1082 * t1198;
t1218 = t1085 * t1204;
t1217 = t1086 * t1198;
t1212 = t1083 * t1189 + t1087 * t1190;
t1211 = t1083 * t1192 + t1087 * t1191;
t1209 = t1083 * t1194 + t1087 * t1193;
t1028 = t1076 * t1034;
t938 = t1028 - t962;
t1202 = t1028 + t962;
t934 = (qJD(3) - t1076) * t1035 + t1117;
t955 = t957 ^ 2;
t956 = t959 ^ 2;
t992 = qJD(6) + t1000;
t990 = t992 ^ 2;
t1033 = t1035 ^ 2;
t1185 = pkin(4) + pkin(9);
t1184 = pkin(4) * t1079;
t1183 = pkin(4) * t1080;
t1182 = t957 * t992;
t1136 = t1083 * t1090;
t1055 = g(1) * t1088 + g(2) * t1084;
t1037 = -pkin(1) * t1090 + qJDD(1) * pkin(7) - t1055;
t1137 = t1083 * t1037;
t1156 = qJD(1) * qJD(2);
t948 = qJDD(2) * pkin(2) - t1044 * pkin(8) - t1137 + (pkin(2) * t1136 + pkin(8) * t1156 - g(3)) * t1087;
t1022 = -t1083 * g(3) + t1087 * t1037;
t1072 = t1078 * t1090;
t952 = -pkin(2) * t1072 + t1045 * pkin(8) - qJD(2) * t1106 + t1022;
t893 = t1082 * t952 - t1086 * t948;
t818 = pkin(3) * t1198 + qJ(4) * t938 - t893;
t894 = t1082 * t948 + t1086 * t952;
t823 = -t1032 * pkin(3) - qJ(4) * t1102 - t1076 * t1109 + t894;
t1181 = t1079 * t818 + t1080 * t823;
t1180 = t1079 * t823 - t1080 * t818;
t1179 = qJD(4) * t998;
t1177 = t1079 * t845;
t1173 = t1080 * t845;
t920 = pkin(4) * t998 - qJ(5) * t1000;
t1107 = -pkin(4) * t1186 - t998 * t920 + t1181;
t986 = -0.2e1 * t1179;
t1097 = t1075 * qJ(5) + t1107 + t986;
t967 = pkin(5) * t1000 - pkin(9) * t1076;
t669 = -t902 * pkin(5) - t1188 * pkin(9) + (t1232 + t967) * t1076 + t1097;
t1168 = t1081 * t669;
t826 = t905 + t900;
t1167 = t1081 * t826;
t1166 = t1081 * t992;
t1153 = qJD(4) * t1000;
t989 = 0.2e1 * t1153;
t736 = t989 + t1180;
t737 = t986 + t1181;
t661 = t1079 * t737 - t1080 * t736;
t1165 = t1082 * t661;
t1164 = t1082 * t964;
t814 = t1082 * t894 - t1086 * t893;
t1163 = t1083 * t814;
t1162 = t1085 * t669;
t1161 = t1085 * t826;
t1160 = t1085 * t992;
t1159 = t1086 * t661;
t1158 = t1086 * t964;
t1157 = t1087 * t814;
t1151 = qJD(5) * t1076;
t1004 = -t1007 + t1075;
t1150 = t1004 * t1082;
t1149 = t1004 * t1086;
t1036 = t1090 * pkin(7) + t1105;
t1148 = t1036 * t1083;
t1147 = t1036 * t1087;
t1062 = t1087 * t1136;
t1052 = qJDD(2) + t1062;
t1146 = t1052 * t1083;
t1053 = qJDD(2) - t1062;
t1145 = t1053 * t1083;
t1144 = t1053 * t1087;
t1140 = t1076 * t1082;
t1139 = t1076 * t1086;
t1077 = t1083 ^ 2;
t1138 = t1077 * t1090;
t1134 = t1077 + t1078;
t1132 = qJDD(1) * t1084;
t1131 = qJDD(1) * t1088;
t1130 = -t956 - t990;
t1129 = t1079 * t905;
t1128 = t1080 * t905;
t840 = -t957 * qJD(6) + t1085 * t1075 + t1081 * t902;
t1123 = t1084 * t1007;
t1122 = t1088 * t1007;
t1120 = qJ(5) * t1079 + pkin(3);
t662 = t1079 * t736 + t1080 * t737;
t815 = t1082 * t893 + t1086 * t894;
t1118 = t1081 * t1075 - t1085 * t902;
t1021 = t1087 * g(3) + t1137;
t951 = t1021 * t1083 + t1087 * t1022;
t1013 = -t1054 * t1084 - t1088 * t1055;
t1116 = t1084 * t1062;
t1115 = t1088 * t1062;
t1049 = -t1084 * t1090 + t1131;
t1113 = -pkin(6) * t1049 - g(3) * t1084;
t1104 = t1075 * pkin(4) + qJ(5) * t1186 - t1000 * t920 - qJDD(5) - t1180;
t1099 = t989 - t1104;
t668 = -pkin(5) * t864 - pkin(9) * t915 + t1099;
t1091 = -t1203 + t1243;
t676 = -pkin(5) * t1188 - t1000 * t967 + t1185 * t902 + t1091;
t618 = t1081 * t676 - t1085 * t668;
t619 = t1081 * t668 + t1085 * t676;
t580 = t1081 * t619 - t1085 * t618;
t581 = t1081 * t618 + t1085 * t619;
t950 = t1021 * t1087 - t1022 * t1083;
t1012 = t1054 * t1088 - t1055 * t1084;
t1108 = t840 - t1182;
t699 = -0.2e1 * t1153 + t1104;
t1098 = (-qJD(6) + t992) * t959 - t1118;
t696 = t1097 + 0.2e1 * t1151;
t1092 = -t902 * pkin(4) - t1243;
t1089 = qJD(2) ^ 2;
t1060 = -t1072 - t1089;
t1059 = t1072 - t1089;
t1058 = -t1089 - t1138;
t1057 = t1089 - t1138;
t1051 = t1072 - t1138;
t1050 = t1072 + t1138;
t1048 = t1088 * t1090 + t1132;
t1047 = t1134 * qJDD(1);
t1046 = t1070 - 0.2e1 * t1124;
t1043 = 0.2e1 * t1121 + t1133;
t1041 = t1087 * t1052;
t1040 = t1134 * t1156;
t1031 = -pkin(6) * t1048 + g(3) * t1088;
t1026 = -t1033 + t1186;
t1025 = t1032 - t1186;
t1024 = t1044 * t1087 - t1077 * t1156;
t1023 = -t1045 * t1083 - t1078 * t1156;
t1020 = -t1033 - t1186;
t1019 = -t1058 * t1083 - t1144;
t1018 = -t1057 * t1083 + t1041;
t1017 = t1060 * t1087 - t1146;
t1016 = t1059 * t1087 - t1145;
t1015 = t1058 * t1087 - t1145;
t1014 = t1060 * t1083 + t1041;
t1010 = t1047 * t1088 - t1050 * t1084;
t1009 = t1047 * t1084 + t1050 * t1088;
t1008 = -t1043 * t1083 + t1046 * t1087;
t1006 = -t1033 + t1032;
t1002 = -t1186 - t1032;
t980 = t1019 * t1088 + t1043 * t1084;
t979 = t1017 * t1088 - t1046 * t1084;
t978 = t1019 * t1084 - t1043 * t1088;
t977 = t1017 * t1084 + t1046 * t1088;
t971 = (t1034 * t1086 + t1035 * t1082) * t1076;
t970 = (t1034 * t1082 - t1035 * t1086) * t1076;
t969 = -pkin(7) * t1015 - t1147;
t968 = -pkin(7) * t1014 - t1148;
t963 = -t1032 - t1033;
t961 = -pkin(1) * t1015 + t1022;
t960 = -pkin(1) * t1014 + t1021;
t944 = t1025 * t1086 - t1150;
t943 = -t1026 * t1082 + t1217;
t942 = t1025 * t1082 + t1149;
t941 = t1026 * t1086 + t1222;
t940 = -t1020 * t1082 - t1149;
t939 = t1020 * t1086 - t1150;
t933 = (qJD(3) + t1076) * t1035 + t1117;
t932 = -t1035 * t1140 + t1086 * t962;
t931 = t1035 * t1139 + t1082 * t962;
t930 = -t1034 * t1139 + t1082 * t1102;
t929 = -t1034 * t1140 - t1086 * t1102;
t928 = -t1036 * t1084 + t1088 * t951;
t927 = t1036 * t1088 + t1084 * t951;
t924 = t1002 * t1086 - t1222;
t923 = t1002 * t1082 + t1217;
t912 = -t956 + t990;
t911 = t955 - t990;
t906 = -t1083 * t970 + t1087 * t971;
t904 = t956 - t955;
t889 = -pkin(8) * t939 - t1158;
t887 = -pkin(8) * t923 - t1164;
t886 = -t1083 * t942 + t1087 * t944;
t885 = -t1083 * t941 + t1087 * t943;
t871 = -t990 - t955;
t870 = -t1083 * t939 + t1087 * t940;
t869 = t1083 * t940 + t1087 * t939;
t868 = -t1082 * t938 - t1086 * t934;
t867 = -t1082 * t1202 - t1086 * t933;
t866 = -t1082 * t934 + t1086 * t938;
t865 = -t1082 * t933 + t1086 * t1202;
t854 = -t955 - t956;
t844 = -t1083 * t931 + t1087 * t932;
t843 = -t1083 * t929 + t1087 * t930;
t842 = -t1083 * t923 + t1087 * t924;
t841 = t1083 * t924 + t1087 * t923;
t839 = -qJD(6) * t959 - t1118;
t834 = (-t1081 * t959 + t1085 * t957) * t992;
t833 = (t1081 * t957 + t1085 * t959) * t992;
t832 = -pkin(2) * t1202 + pkin(8) * t940 - t1164;
t827 = -pkin(2) * t933 + pkin(8) * t924 + t1158;
t820 = t1084 * t1202 + t1088 * t870;
t819 = t1084 * t870 - t1088 * t1202;
t813 = t1084 * t933 + t1088 * t842;
t812 = t1084 * t842 - t1088 * t933;
t810 = t840 + t1182;
t806 = (qJD(6) + t992) * t959 + t1118;
t804 = -t1085 * t840 + t1166 * t959;
t803 = -t1081 * t840 - t1160 * t959;
t802 = t1081 * t839 - t1160 * t957;
t801 = -t1085 * t839 - t1166 * t957;
t788 = pkin(2) * t964 + pkin(8) * t815;
t787 = -t1083 * t866 + t1087 * t868;
t786 = -t1083 * t865 + t1087 * t867;
t785 = t1083 * t868 + t1087 * t866;
t784 = -t1173 - t1267;
t783 = -t1079 * t833 + t1080 * t900;
t782 = t1079 * t900 + t1080 * t833;
t773 = -t1085 * t911 + t1167;
t772 = t1081 * t912 - t1218;
t771 = -t1081 * t911 - t1161;
t770 = -t1085 * t912 - t1223;
t761 = -pkin(1) * t869 - pkin(2) * t939 + t894;
t760 = -t1177 - t1257;
t759 = -t1081 * t1130 - t1161;
t758 = t1085 * t1130 - t1167;
t757 = t1084 * t963 + t1088 * t787;
t756 = t1084 * t787 - t1088 * t963;
t751 = t1085 * t871 - t1223;
t750 = t1081 * t871 + t1218;
t749 = -pkin(1) * t841 - pkin(2) * t923 + t893;
t748 = -t1079 * t803 + t1128;
t747 = -t1079 * t801 - t1128;
t746 = t1080 * t803 + t1129;
t745 = t1080 * t801 - t1129;
t744 = -pkin(8) * t866 - t814;
t741 = -pkin(2) * t963 + pkin(8) * t868 + t815;
t740 = -pkin(1) * t785 - pkin(2) * t866;
t739 = -pkin(3) * t863 - t1177 - t1266;
t738 = -pkin(7) * t869 - t1083 * t832 + t1087 * t889;
t735 = -pkin(3) * t1205 + t1173 - t1256;
t734 = t1087 * t815 - t1163;
t733 = t1083 * t815 + t1157;
t731 = t1092 + t1203;
t730 = -pkin(7) * t841 - t1083 * t827 + t1087 * t887;
t729 = t1081 * t810 + t1085 * t1098;
t728 = t1081 * t1108 + t1085 * t806;
t727 = t1081 * t1098 - t1085 * t810;
t726 = t1081 * t806 - t1085 * t1108;
t725 = -t1084 * t964 + t1088 * t734;
t724 = t1084 * t734 + t1088 * t964;
t719 = -t1079 * t770 + t1080 * t810;
t718 = -t1079 * t771 + t1080 * t1098;
t717 = t1079 * t810 + t1080 * t770;
t716 = t1079 * t1098 + t1080 * t771;
t711 = -t1082 * t782 + t1086 * t783;
t710 = t1082 * t783 + t1086 * t782;
t709 = t1079 * t758 + t1080 * t1108;
t708 = t1079 * t1108 - t1080 * t758;
t698 = t1079 * t750 + t1080 * t806;
t697 = t1079 * t806 - t1080 * t750;
t695 = -t1079 * t726 + t1080 * t904;
t694 = t1079 * t904 + t1080 * t726;
t689 = (t902 + t1205) * pkin(4) + t1091;
t688 = t1092 + 0.2e1 * t1203;
t687 = t1079 * t727 + t1080 * t854;
t686 = t1079 * t854 - t1080 * t727;
t677 = -pkin(1) * t733 - pkin(2) * t814;
t675 = -qJ(5) * t1195 + t1099;
t674 = -pkin(4) * t1195 + t696;
t673 = -t1082 * t746 + t1086 * t748;
t672 = -t1082 * t745 + t1086 * t747;
t671 = t1082 * t748 + t1086 * t746;
t670 = t1082 * t747 + t1086 * t745;
t663 = t1080 * t688 - t1184 * t863 + t1267;
t660 = qJ(5) * t1172 - t1079 * t689 + t1257;
t659 = -pkin(7) * t733 - pkin(8) * t1157 - t1083 * t788;
t658 = -t1082 * t739 + t1086 * t784 + t1285;
t657 = pkin(5) * t727 - qJ(5) * t729;
t656 = t1266 + t1079 * t688 + (pkin(3) + t1183) * t863;
t655 = -pkin(7) * t785 - t1083 * t741 + t1087 * t744;
t654 = t1080 * t689 + t1120 * t1205 + t1256;
t653 = pkin(3) * t845 + qJ(4) * t662;
t652 = -t1082 * t717 + t1086 * t719;
t651 = -t1082 * t716 + t1086 * t718;
t650 = t1082 * t719 + t1086 * t717;
t649 = t1082 * t718 + t1086 * t716;
t648 = -t1082 * t735 + t1086 * t760 + t1278;
t647 = t1082 * t784 + t1086 * t739 - t1281;
t646 = -t1083 * t710 + t1087 * t711;
t645 = -t1082 * t708 + t1086 * t709;
t644 = t1082 * t709 + t1086 * t708;
t637 = -t1079 * t699 + t1080 * t696;
t636 = t1079 * t696 + t1080 * t699;
t635 = -t1082 * t697 + t1086 * t698;
t634 = t1082 * t698 + t1086 * t697;
t633 = -t1082 * t694 + t1086 * t695;
t632 = t1082 * t695 + t1086 * t694;
t631 = -t661 - t1255;
t630 = t1082 * t760 + t1086 * t735 - t1275;
t625 = -t1082 * t686 + t1086 * t687;
t624 = t1082 * t687 + t1086 * t686;
t623 = t1254 + t662;
t622 = -t1294 + t737;
t621 = -t1083 * t671 + t1087 * t673;
t620 = -t1083 * t670 + t1087 * t672;
t616 = t1287 + t736;
t615 = pkin(4) * t966 - 0.2e1 * t1151 + 0.2e1 * t1179 + (-t1075 - t1197) * qJ(5) - t1107 + t1294;
t614 = pkin(5) * t1108 - t1185 * t759 - t1168;
t613 = -t1079 * t674 + t1080 * t675 - t1255;
t612 = pkin(5) * t806 - t1185 * t751 + t1162;
t611 = t1079 * t675 + t1080 * t674 + t1254;
t610 = t1086 * t662 - t1165;
t609 = t1082 * t662 + t1159;
t608 = pkin(4) * t915 + qJ(5) * t913 - t1287 + t699;
t606 = -qJ(4) * t636 + (qJ(5) * t1080 - t1184) * t731;
t605 = pkin(5) * t758 - qJ(5) * t759 - t619;
t604 = pkin(5) * t750 - qJ(5) * t751 - t618;
t603 = -t1083 * t650 + t1087 * t652;
t602 = -t1083 * t649 + t1087 * t651;
t601 = -t1082 * t656 + t1086 * t663 - t1285;
t600 = -pkin(4) * t864 + qJ(5) * t856 + t607;
t599 = -t1083 * t644 + t1087 * t645;
t598 = t1083 * t645 + t1087 * t644;
t597 = -t1082 * t654 + t1086 * t660 - t1278;
t596 = t1082 * t663 + t1086 * t656 + t1281;
t595 = -t1082 * t636 + t1086 * t637;
t594 = t1082 * t637 + t1086 * t636;
t593 = -t1083 * t634 + t1087 * t635;
t592 = t1083 * t635 + t1087 * t634;
t591 = -t1083 * t632 + t1087 * t633;
t590 = t1082 * t660 + t1086 * t654 + t1275;
t589 = -t1083 * t624 + t1087 * t625;
t588 = t1083 * t625 + t1087 * t624;
t587 = qJ(4) * t637 + (t1120 + t1183) * t731;
t586 = -t1083 * t647 + t1087 * t658 + t1295;
t585 = t1084 * t759 + t1088 * t599;
t584 = t1084 * t599 - t1088 * t759;
t583 = t1084 * t751 + t1088 * t593;
t582 = t1084 * t593 - t1088 * t751;
t579 = -t1083 * t630 + t1087 * t648 + t1288;
t578 = t1084 * t729 + t1088 * t589;
t577 = t1084 * t589 - t1088 * t729;
t576 = -t1082 * t623 + t1086 * t631 - t1268;
t575 = t1082 * t631 + t1086 * t623 + t1264;
t574 = -t1083 * t609 + t1087 * t610;
t573 = t1083 * t610 + t1087 * t609;
t572 = t1079 * t580 + t1080 * t669;
t571 = t1079 * t669 - t1080 * t580;
t570 = -pkin(8) * t609 - qJ(4) * t1159 - t1082 * t653;
t569 = -t1084 * t845 + t1088 * t574;
t568 = t1084 * t574 + t1088 * t845;
t567 = pkin(2) * t845 + pkin(8) * t610 - qJ(4) * t1165 + t1086 * t653;
t566 = -t1082 * t611 + t1086 * t613 - t1268;
t565 = pkin(5) * t854 - t1185 * t729 - t581;
t564 = t1082 * t613 + t1086 * t611 + t1264;
t563 = -qJ(4) * t708 - t1079 * t614 + t1080 * t605;
t562 = -qJ(4) * t697 - t1079 * t612 + t1080 * t604;
t561 = -t1083 * t594 + t1087 * t595;
t560 = t1083 * t595 + t1087 * t594;
t559 = -pkin(3) * t759 + qJ(4) * t709 + t1079 * t605 + t1080 * t614;
t558 = -pkin(3) * t751 + qJ(4) * t698 + t1079 * t604 + t1080 * t612;
t557 = -t1083 * t596 + t1087 * t601 - t1295;
t556 = -t1084 * t731 + t1088 * t561;
t555 = t1084 * t561 + t1088 * t731;
t554 = -t1083 * t590 + t1087 * t597 - t1288;
t553 = -pkin(1) * t598 - pkin(2) * t644 - pkin(3) * t708 - qJ(5) * t1108 + t1185 * t758 - t1162;
t552 = -qJ(4) * t686 - t1079 * t565 + t1080 * t657;
t551 = -pkin(1) * t592 - pkin(2) * t634 - pkin(3) * t697 - qJ(5) * t806 + t1185 * t750 - t1168;
t550 = pkin(5) * t580 - qJ(5) * t581;
t549 = -pkin(3) * t729 + qJ(4) * t687 + t1079 * t657 + t1080 * t565;
t548 = -pkin(1) * t573 - pkin(2) * t609 - pkin(3) * t661;
t547 = pkin(5) * t669 - t1185 * t581;
t546 = -pkin(8) * t594 - t1082 * t587 + t1086 * t606;
t545 = -t1083 * t575 + t1087 * t576 - t1277;
t544 = pkin(2) * t731 + pkin(8) * t595 + t1082 * t606 + t1086 * t587;
t543 = -t1082 * t571 + t1086 * t572;
t542 = t1082 * t572 + t1086 * t571;
t541 = -pkin(1) * t588 - pkin(2) * t624 - pkin(3) * t686 - qJ(5) * t854 + t1185 * t727 + t580;
t540 = -pkin(1) * t560 - pkin(2) * t594 - pkin(3) * t636 - pkin(4) * t699 - qJ(5) * t696;
t539 = -t1083 * t564 + t1087 * t566 - t1277;
t538 = -pkin(8) * t644 - t1082 * t559 + t1086 * t563;
t537 = -pkin(8) * t634 - t1082 * t558 + t1086 * t562;
t536 = -pkin(2) * t759 + pkin(8) * t645 + t1082 * t563 + t1086 * t559;
t535 = -pkin(2) * t751 + pkin(8) * t635 + t1082 * t562 + t1086 * t558;
t534 = -pkin(7) * t573 - t1083 * t567 + t1087 * t570;
t533 = -pkin(8) * t624 - t1082 * t549 + t1086 * t552;
t532 = -pkin(2) * t729 + pkin(8) * t625 + t1082 * t552 + t1086 * t549;
t531 = -t1083 * t542 + t1087 * t543;
t530 = t1083 * t543 + t1087 * t542;
t529 = -qJ(4) * t571 - t1079 * t547 + t1080 * t550;
t528 = t1084 * t581 + t1088 * t531;
t527 = t1084 * t531 - t1088 * t581;
t526 = -pkin(7) * t560 - t1083 * t544 + t1087 * t546;
t525 = -pkin(3) * t581 + qJ(4) * t572 + t1079 * t550 + t1080 * t547;
t524 = -pkin(7) * t598 - t1083 * t536 + t1087 * t538;
t523 = -pkin(7) * t592 - t1083 * t535 + t1087 * t537;
t522 = -pkin(7) * t588 - t1083 * t532 + t1087 * t533;
t521 = -pkin(1) * t530 - pkin(2) * t542 - pkin(3) * t571 - qJ(5) * t669 + t1185 * t580;
t520 = -pkin(8) * t542 - t1082 * t525 + t1086 * t529;
t519 = -pkin(2) * t581 + pkin(8) * t543 + t1082 * t529 + t1086 * t525;
t518 = -pkin(7) * t530 - t1083 * t519 + t1087 * t520;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1048, -t1049, 0, t1013, 0, 0, 0, 0, 0, 0, t979, t980, t1010, t928, 0, 0, 0, 0, 0, 0, t813, t820, t757, t725, 0, 0, 0, 0, 0, 0, t666, t681, t1270, t569, 0, 0, 0, 0, 0, 0, t1270, -t666, -t681, t556, 0, 0, 0, 0, 0, 0, t583, t585, t578, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1049, -t1048, 0, t1012, 0, 0, 0, 0, 0, 0, t977, t978, t1009, t927, 0, 0, 0, 0, 0, 0, t812, t819, t756, t724, 0, 0, 0, 0, 0, 0, t664, t679, t1272, t568, 0, 0, 0, 0, 0, 0, t1272, -t664, -t679, t555, 0, 0, 0, 0, 0, 0, t582, t584, t577, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1014, t1015, 0, -t950, 0, 0, 0, 0, 0, 0, t841, t869, t785, t733, 0, 0, 0, 0, 0, 0, -t683, -t712, t1260, t573, 0, 0, 0, 0, 0, 0, t1260, t683, t712, t560, 0, 0, 0, 0, 0, 0, t592, t598, t588, t530; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1049, 0, -t1048, 0, t1113, -t1031, -t1012, -pkin(6) * t1012, t1024 * t1088 - t1116, t1008 * t1088 - t1051 * t1084, t1018 * t1088 + t1083 * t1132, t1023 * t1088 + t1116, t1016 * t1088 + t1070 * t1084, qJDD(2) * t1084 + t1040 * t1088, -pkin(6) * t977 - t1084 * t960 + t1088 * t968, -pkin(6) * t978 - t1084 * t961 + t1088 * t969, -pkin(6) * t1009 + t1088 * t950, -pkin(6) * t927 - (pkin(1) * t1084 - pkin(7) * t1088) * t950, t1088 * t844 - t1123, -t1006 * t1084 + t1088 * t786, -t1084 * t938 + t1088 * t885, t1088 * t843 + t1123, -t1084 * t934 + t1088 * t886, t1088 * t906 + t1143, -pkin(6) * t812 - t1084 * t749 + t1088 * t730, -pkin(6) * t819 - t1084 * t761 + t1088 * t738, -pkin(6) * t756 - t1084 * t740 + t1088 * t655, -pkin(6) * t724 - t1084 * t677 + t1088 * t659, t1236, t1271, t1290, t1237, -t1289, t1235, -t1084 * t616 + t1088 * t579 - t1297, -t1084 * t622 + t1088 * t586 - t1299, -t1084 * t607 + t1088 * t545 - t1283, -pkin(6) * t568 - t1084 * t548 + t1088 * t534, t1235, -t1290, t1289, t1236, t1271, t1237, -t1084 * t600 + t1088 * t539 - t1283, -t1084 * t608 + t1088 * t554 + t1297, -t1084 * t615 + t1088 * t557 + t1299, -pkin(6) * t555 - t1084 * t540 + t1088 * t526, -t1084 * t804 + t1088 * t621, -t1084 * t728 + t1088 * t591, -t1084 * t772 + t1088 * t603, -t1084 * t802 + t1088 * t620, -t1084 * t773 + t1088 * t602, -t1084 * t834 + t1088 * t646, -pkin(6) * t582 - t1084 * t551 + t1088 * t523, -pkin(6) * t584 - t1084 * t553 + t1088 * t524, -pkin(6) * t577 - t1084 * t541 + t1088 * t522, -pkin(6) * t527 - t1084 * t521 + t1088 * t518; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1048, 0, t1049, 0, t1031, t1113, t1013, pkin(6) * t1013, t1024 * t1084 + t1115, t1008 * t1084 + t1051 * t1088, t1018 * t1084 - t1083 * t1131, t1023 * t1084 - t1115, t1016 * t1084 - t1070 * t1088, -qJDD(2) * t1088 + t1040 * t1084, pkin(6) * t979 + t1084 * t968 + t1088 * t960, pkin(6) * t980 + t1084 * t969 + t1088 * t961, pkin(6) * t1010 + t1084 * t950, pkin(6) * t928 - (-pkin(1) * t1088 - pkin(7) * t1084) * t950, t1084 * t844 + t1122, t1006 * t1088 + t1084 * t786, t1084 * t885 + t1088 * t938, t1084 * t843 - t1122, t1084 * t886 + t1088 * t934, t1084 * t906 - t1064, pkin(6) * t813 + t1084 * t730 + t1088 * t749, pkin(6) * t820 + t1084 * t738 + t1088 * t761, pkin(6) * t757 + t1084 * t655 + t1088 * t740, pkin(6) * t725 + t1084 * t659 + t1088 * t677, t1238, t1273, t1292, t1239, -t1291, t1240, t1084 * t579 + t1088 * t616 + t1296, t1084 * t586 + t1088 * t622 + t1298, t1084 * t545 + t1088 * t607 + t1284, pkin(6) * t569 + t1084 * t534 + t1088 * t548, t1240, -t1292, t1291, t1238, t1273, t1239, t1084 * t539 + t1088 * t600 + t1284, t1084 * t554 + t1088 * t608 - t1296, t1084 * t557 + t1088 * t615 - t1298, pkin(6) * t556 + t1084 * t526 + t1088 * t540, t1084 * t621 + t1088 * t804, t1084 * t591 + t1088 * t728, t1084 * t603 + t1088 * t772, t1084 * t620 + t1088 * t802, t1084 * t602 + t1088 * t773, t1084 * t646 + t1088 * t834, pkin(6) * t583 + t1084 * t523 + t1088 * t551, pkin(6) * t585 + t1084 * t524 + t1088 * t553, pkin(6) * t578 + t1084 * t522 + t1088 * t541, pkin(6) * t528 + t1084 * t518 + t1088 * t521; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1054, t1055, 0, 0, (t1044 + t1121) * t1083, t1043 * t1087 + t1046 * t1083, t1057 * t1087 + t1146, (t1045 - t1124) * t1087, t1059 * t1083 + t1144, 0, pkin(1) * t1046 + pkin(7) * t1017 + t1147, -pkin(1) * t1043 + pkin(7) * t1019 - t1148, pkin(1) * t1050 + pkin(7) * t1047 + t951, pkin(1) * t1036 + pkin(7) * t951, t1083 * t932 + t1087 * t931, t1083 * t867 + t1087 * t865, t1083 * t943 + t1087 * t941, t1083 * t930 + t1087 * t929, t1083 * t944 + t1087 * t942, t1083 * t971 + t1087 * t970, -pkin(1) * t933 + pkin(7) * t842 + t1083 * t887 + t1087 * t827, -pkin(1) * t1202 + pkin(7) * t870 + t1083 * t889 + t1087 * t832, -pkin(1) * t963 + pkin(7) * t787 + t1083 * t744 + t1087 * t741, pkin(1) * t964 + pkin(7) * t734 - pkin(8) * t1163 + t1087 * t788, t1212, t1262, -t1280, t1211, -t1279, t1209, t1083 * t648 + t1087 * t630 - t1286, t1083 * t658 + t1087 * t647 - t1293, t1083 * t576 + t1087 * t575 + t1274, pkin(1) * t845 + pkin(7) * t574 + t1083 * t570 + t1087 * t567, t1209, t1280, t1279, t1212, t1262, t1211, t1083 * t566 + t1087 * t564 + t1274, t1083 * t597 + t1087 * t590 + t1286, t1083 * t601 + t1087 * t596 + t1293, pkin(1) * t731 + pkin(7) * t561 + t1083 * t546 + t1087 * t544, t1083 * t673 + t1087 * t671, t1083 * t633 + t1087 * t632, t1083 * t652 + t1087 * t650, t1083 * t672 + t1087 * t670, t1083 * t651 + t1087 * t649, t1083 * t711 + t1087 * t710, -pkin(1) * t751 + pkin(7) * t593 + t1083 * t537 + t1087 * t535, -pkin(1) * t759 + pkin(7) * t599 + t1083 * t538 + t1087 * t536, -pkin(1) * t729 + pkin(7) * t589 + t1083 * t533 + t1087 * t532, -pkin(1) * t581 + pkin(7) * t531 + t1083 * t520 + t1087 * t519;];
tauB_reg  = t1;
