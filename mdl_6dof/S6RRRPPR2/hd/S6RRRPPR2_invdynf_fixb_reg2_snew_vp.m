% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 04:24
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:24:00
% EndTime: 2019-05-07 04:24:10
% DurationCPUTime: 9.78s
% Computational Cost: add. (39461->325), mult. (90409->390), div. (0->0), fcn. (66888->10), ass. (0->226)
t2388 = qJDD(2) + qJDD(3);
t2395 = sin(qJ(3));
t2399 = cos(qJ(3));
t2400 = cos(qJ(2));
t2447 = qJD(1) * t2400;
t2396 = sin(qJ(2));
t2448 = qJD(1) * t2396;
t2357 = t2395 * t2448 - t2399 * t2447;
t2359 = (t2395 * t2400 + t2396 * t2399) * qJD(1);
t2392 = sin(pkin(10));
t2393 = cos(pkin(10));
t2339 = t2393 * t2357 + t2359 * t2392;
t2341 = -t2357 * t2392 + t2359 * t2393;
t2441 = t2341 * t2339;
t2297 = t2388 + t2441;
t2389 = qJD(2) + qJD(3);
t2387 = t2389 ^ 2;
t2452 = t2341 ^ 2;
t2425 = -t2387 - t2452;
t2284 = t2297 * t2392 - t2393 * t2425;
t2286 = t2297 * t2393 + t2392 * t2425;
t2248 = t2284 * t2399 + t2286 * t2395;
t2251 = t2284 * t2395 - t2286 * t2399;
t2226 = t2248 * t2396 + t2251 * t2400;
t2397 = sin(qJ(1));
t2401 = cos(qJ(1));
t2427 = qJD(2) * t2447;
t2430 = t2396 * qJDD(1);
t2365 = t2427 + t2430;
t2385 = t2400 * qJDD(1);
t2428 = qJD(2) * t2448;
t2366 = t2385 - t2428;
t2421 = t2395 * t2365 - t2399 * t2366;
t2322 = -qJD(3) * t2359 - t2421;
t2414 = -t2399 * t2365 - t2395 * t2366;
t2323 = -qJD(3) * t2357 - t2414;
t2295 = t2322 * t2392 + t2323 * t2393;
t2442 = t2339 * t2389;
t2422 = -t2295 + t2442;
t2481 = t2226 * t2397 + t2401 * t2422;
t2480 = t2226 * t2401 - t2397 * t2422;
t2337 = t2339 ^ 2;
t2296 = -t2387 - t2337;
t2418 = t2388 - t2441;
t2263 = t2296 * t2392 + t2393 * t2418;
t2266 = -t2296 * t2393 + t2392 * t2418;
t2236 = t2263 * t2399 - t2266 * t2395;
t2239 = t2263 * t2395 + t2266 * t2399;
t2210 = t2236 * t2396 + t2239 * t2400;
t2294 = -t2393 * t2322 + t2323 * t2392;
t2331 = t2389 * t2341;
t2458 = t2294 + t2331;
t2479 = t2210 * t2397 + t2401 * t2458;
t2478 = t2210 * t2401 - t2397 * t2458;
t2457 = -t2337 - t2452;
t2272 = t2294 - t2331;
t2275 = t2295 + t2442;
t2469 = -t2272 * t2393 + t2275 * t2392;
t2470 = -t2272 * t2392 - t2275 * t2393;
t2472 = t2395 * t2469 + t2399 * t2470;
t2473 = -t2395 * t2470 + t2399 * t2469;
t2474 = -t2396 * t2472 + t2400 * t2473;
t2477 = t2397 * t2474 - t2401 * t2457;
t2476 = t2397 * t2457 + t2401 * t2474;
t2223 = t2248 * t2400 - t2251 * t2396;
t2207 = t2236 * t2400 - t2239 * t2396;
t2475 = t2396 * t2473 + t2400 * t2472;
t2391 = t2400 ^ 2;
t2403 = qJD(1) ^ 2;
t2374 = t2397 * g(1) - t2401 * g(2);
t2412 = qJDD(1) * pkin(1) + t2374;
t2413 = qJD(2) * pkin(2) - pkin(8) * t2448;
t2325 = t2366 * pkin(2) - t2413 * t2448 + t2412 + (pkin(8) * t2391 + pkin(7)) * t2403;
t2356 = t2357 ^ 2;
t2419 = pkin(3) * t2389 - qJ(4) * t2359;
t2269 = t2322 * pkin(3) + t2356 * qJ(4) - t2359 * t2419 - qJDD(4) + t2325;
t2471 = pkin(4) * t2331 + t2422 * qJ(5) - 0.2e1 * qJD(5) * t2341 - t2269;
t2440 = t2357 * t2359;
t2344 = t2388 - t2440;
t2394 = sin(qJ(6));
t2398 = cos(qJ(6));
t2319 = -t2398 * t2339 + t2389 * t2394;
t2455 = t2319 ^ 2;
t2321 = t2339 * t2394 + t2389 * t2398;
t2454 = t2321 ^ 2;
t2336 = qJD(6) + t2341;
t2453 = t2336 ^ 2;
t2451 = t2359 ^ 2;
t2450 = -2 * qJD(4);
t2449 = 0.2e1 * qJD(5);
t2443 = t2319 * t2321;
t2439 = t2389 * t2357;
t2438 = t2391 * t2403;
t2375 = -g(1) * t2401 - g(2) * t2397;
t2361 = -pkin(1) * t2403 + qJDD(1) * pkin(7) + t2375;
t2437 = t2396 * t2361;
t2436 = t2396 * t2403;
t2435 = qJD(3) - t2389;
t2434 = pkin(4) * t2339 - qJ(5) * t2341 + (2 * qJD(4));
t2433 = qJD(6) - t2336;
t2432 = qJD(6) + t2336;
t2314 = qJDD(2) * pkin(2) - t2365 * pkin(8) - t2437 + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2436 - g(3)) * t2400;
t2352 = -t2396 * g(3) + t2400 * t2361;
t2317 = -pkin(2) * t2438 + t2366 * pkin(8) - qJD(2) * t2413 + t2352;
t2292 = t2395 * t2314 + t2399 * t2317;
t2390 = t2396 ^ 2;
t2431 = t2390 + t2391;
t2426 = -t2453 - t2454;
t2291 = t2399 * t2314 - t2395 * t2317;
t2259 = (-t2323 - t2439) * qJ(4) + t2344 * pkin(3) + t2291;
t2260 = -t2356 * pkin(3) + t2322 * qJ(4) - t2389 * t2419 + t2292;
t2424 = -t2393 * t2259 + t2392 * t2260;
t2423 = t2398 * t2294 - t2394 * t2388;
t2410 = -t2388 * pkin(4) - t2387 * qJ(5) + qJDD(5) + t2424;
t2204 = -t2388 * pkin(9) + t2275 * pkin(5) + (pkin(9) * t2339 + t2434) * t2341 + t2410;
t2328 = pkin(5) * t2341 - pkin(9) * t2389;
t2206 = -t2337 * pkin(5) - t2341 * t2328 + (pkin(4) + pkin(9)) * t2294 + t2471;
t2417 = t2204 * t2398 - t2206 * t2394;
t2416 = t2392 * t2259 + t2393 * t2260;
t2415 = -t2394 * t2294 - t2398 * t2388;
t2411 = -qJDD(6) - t2295;
t2407 = -t2411 - t2443;
t2406 = t2319 * t2433 + t2415;
t2405 = -t2387 * pkin(4) + t2388 * qJ(5) - t2339 * t2434 + t2416;
t2402 = qJD(2) ^ 2;
t2379 = t2400 * t2436;
t2377 = -t2402 - t2438;
t2376 = -t2390 * t2403 - t2402;
t2373 = -qJDD(2) + t2379;
t2372 = qJDD(2) + t2379;
t2371 = t2431 * t2403;
t2370 = -qJDD(1) * t2397 - t2401 * t2403;
t2369 = qJDD(1) * t2401 - t2397 * t2403;
t2368 = t2431 * qJDD(1);
t2367 = t2385 - 0.2e1 * t2428;
t2364 = 0.2e1 * t2427 + t2430;
t2360 = t2403 * pkin(7) + t2412;
t2351 = -t2400 * g(3) - t2437;
t2350 = -t2387 - t2451;
t2349 = t2373 * t2400 - t2376 * t2396;
t2348 = -t2372 * t2396 + t2377 * t2400;
t2347 = t2373 * t2396 + t2376 * t2400;
t2346 = t2372 * t2400 + t2377 * t2396;
t2345 = -t2388 - t2440;
t2343 = -t2387 - t2356;
t2324 = -t2356 - t2451;
t2316 = -t2351 * t2396 + t2352 * t2400;
t2315 = t2351 * t2400 + t2352 * t2396;
t2310 = t2345 * t2399 - t2350 * t2395;
t2309 = t2345 * t2395 + t2350 * t2399;
t2308 = t2357 * t2435 + t2414;
t2307 = t2323 - t2439;
t2306 = -t2359 * t2435 - t2421;
t2305 = (qJD(3) + t2389) * t2359 + t2421;
t2303 = t2343 * t2399 - t2344 * t2395;
t2302 = t2343 * t2395 + t2344 * t2399;
t2283 = -t2453 - t2455;
t2282 = -t2309 * t2396 + t2310 * t2400;
t2281 = t2309 * t2400 + t2310 * t2396;
t2280 = t2306 * t2399 - t2308 * t2395;
t2279 = t2306 * t2395 + t2308 * t2399;
t2270 = -t2454 - t2455;
t2268 = -t2302 * t2396 + t2303 * t2400;
t2267 = t2302 * t2400 + t2303 * t2396;
t2262 = t2411 - t2443;
t2257 = -t2291 * t2395 + t2292 * t2399;
t2256 = t2291 * t2399 + t2292 * t2395;
t2255 = -t2319 * t2432 - t2415;
t2254 = -t2321 * t2433 + t2423;
t2253 = t2321 * t2432 - t2423;
t2247 = -t2279 * t2396 + t2280 * t2400;
t2246 = t2279 * t2400 + t2280 * t2396;
t2241 = t2398 * t2262 - t2394 * t2426;
t2240 = t2394 * t2262 + t2398 * t2426;
t2235 = t2398 * t2283 - t2394 * t2407;
t2234 = t2394 * t2283 + t2398 * t2407;
t2233 = t2339 * t2450 + t2416;
t2232 = t2341 * t2450 - t2424;
t2231 = -t2256 * t2396 + t2257 * t2400;
t2230 = t2256 * t2400 + t2257 * t2396;
t2229 = -t2294 * pkin(4) - t2471;
t2228 = t2398 * t2254 - t2394 * t2406;
t2227 = t2394 * t2254 + t2398 * t2406;
t2222 = t2240 * t2392 + t2255 * t2393;
t2221 = -t2240 * t2393 + t2255 * t2392;
t2216 = t2434 * t2341 + t2410;
t2215 = t2234 * t2392 + t2253 * t2393;
t2214 = -t2234 * t2393 + t2253 * t2392;
t2213 = t2389 * t2449 + t2405;
t2212 = t2227 * t2392 + t2270 * t2393;
t2211 = -t2227 * t2393 + t2270 * t2392;
t2205 = -t2294 * pkin(5) - t2337 * pkin(9) + (t2449 + t2328) * t2389 + t2405;
t2203 = -t2232 * t2392 + t2233 * t2393;
t2202 = t2232 * t2393 + t2233 * t2392;
t2201 = -t2221 * t2395 + t2222 * t2399;
t2200 = t2221 * t2399 + t2222 * t2395;
t2195 = t2213 * t2393 + t2216 * t2392;
t2194 = t2213 * t2392 - t2216 * t2393;
t2193 = -t2214 * t2395 + t2215 * t2399;
t2192 = t2214 * t2399 + t2215 * t2395;
t2191 = -t2211 * t2395 + t2212 * t2399;
t2190 = t2211 * t2399 + t2212 * t2395;
t2189 = t2204 * t2394 + t2206 * t2398;
t2187 = -t2202 * t2395 + t2203 * t2399;
t2186 = t2202 * t2399 + t2203 * t2395;
t2185 = -t2200 * t2396 + t2201 * t2400;
t2184 = t2200 * t2400 + t2201 * t2396;
t2183 = -t2194 * t2395 + t2195 * t2399;
t2182 = t2194 * t2399 + t2195 * t2395;
t2181 = -t2192 * t2396 + t2193 * t2400;
t2180 = t2192 * t2400 + t2193 * t2396;
t2179 = -t2190 * t2396 + t2191 * t2400;
t2178 = t2190 * t2400 + t2191 * t2396;
t2177 = t2398 * t2189 - t2394 * t2417;
t2176 = t2394 * t2189 + t2398 * t2417;
t2175 = -t2186 * t2396 + t2187 * t2400;
t2174 = t2186 * t2400 + t2187 * t2396;
t2173 = t2176 * t2392 + t2205 * t2393;
t2172 = -t2176 * t2393 + t2205 * t2392;
t2171 = -t2182 * t2396 + t2183 * t2400;
t2170 = t2182 * t2400 + t2183 * t2396;
t2169 = -t2172 * t2395 + t2173 * t2399;
t2168 = t2172 * t2399 + t2173 * t2395;
t2167 = -t2168 * t2396 + t2169 * t2400;
t2166 = t2168 * t2400 + t2169 * t2396;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2370, -t2369, 0, -t2374 * t2397 + t2375 * t2401, 0, 0, 0, 0, 0, 0, t2348 * t2401 - t2367 * t2397, t2349 * t2401 + t2364 * t2397, t2368 * t2401 - t2371 * t2397, t2316 * t2401 - t2360 * t2397, 0, 0, 0, 0, 0, 0, t2268 * t2401 + t2305 * t2397, t2282 * t2401 + t2307 * t2397, t2247 * t2401 + t2324 * t2397, t2231 * t2401 - t2325 * t2397, 0, 0, 0, 0, 0, 0, -t2478, t2480, t2476, t2175 * t2401 - t2269 * t2397, 0, 0, 0, 0, 0, 0, t2476, t2478, -t2480, t2171 * t2401 - t2229 * t2397, 0, 0, 0, 0, 0, 0, t2181 * t2401 + t2235 * t2397, t2185 * t2401 + t2241 * t2397, t2179 * t2401 + t2228 * t2397, t2167 * t2401 + t2177 * t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2369, t2370, 0, t2374 * t2401 + t2375 * t2397, 0, 0, 0, 0, 0, 0, t2348 * t2397 + t2367 * t2401, t2349 * t2397 - t2364 * t2401, t2368 * t2397 + t2371 * t2401, t2316 * t2397 + t2360 * t2401, 0, 0, 0, 0, 0, 0, t2268 * t2397 - t2305 * t2401, t2282 * t2397 - t2307 * t2401, t2247 * t2397 - t2324 * t2401, t2231 * t2397 + t2325 * t2401, 0, 0, 0, 0, 0, 0, -t2479, t2481, t2477, t2175 * t2397 + t2269 * t2401, 0, 0, 0, 0, 0, 0, t2477, t2479, -t2481, t2171 * t2397 + t2229 * t2401, 0, 0, 0, 0, 0, 0, t2181 * t2397 - t2235 * t2401, t2185 * t2397 - t2241 * t2401, t2179 * t2397 - t2228 * t2401, t2167 * t2397 - t2177 * t2401; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2346, t2347, 0, t2315, 0, 0, 0, 0, 0, 0, t2267, t2281, t2246, t2230, 0, 0, 0, 0, 0, 0, t2207, -t2223, t2475, t2174, 0, 0, 0, 0, 0, 0, t2475, -t2207, t2223, t2170, 0, 0, 0, 0, 0, 0, t2180, t2184, t2178, t2166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2403, -qJDD(1), 0, t2375, 0, 0, 0, 0, 0, 0, t2348, t2349, t2368, t2316, 0, 0, 0, 0, 0, 0, t2268, t2282, t2247, t2231, 0, 0, 0, 0, 0, 0, -t2210, t2226, t2474, t2175, 0, 0, 0, 0, 0, 0, t2474, t2210, -t2226, t2171, 0, 0, 0, 0, 0, 0, t2181, t2185, t2179, t2167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2403, 0, t2374, 0, 0, 0, 0, 0, 0, t2367, -t2364, t2371, t2360, 0, 0, 0, 0, 0, 0, -t2305, -t2307, -t2324, t2325, 0, 0, 0, 0, 0, 0, -t2458, t2422, -t2457, t2269, 0, 0, 0, 0, 0, 0, -t2457, t2458, -t2422, t2229, 0, 0, 0, 0, 0, 0, -t2235, -t2241, -t2228, -t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2346, t2347, 0, t2315, 0, 0, 0, 0, 0, 0, t2267, t2281, t2246, t2230, 0, 0, 0, 0, 0, 0, t2207, -t2223, t2475, t2174, 0, 0, 0, 0, 0, 0, t2475, -t2207, t2223, t2170, 0, 0, 0, 0, 0, 0, t2180, t2184, t2178, t2166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2377, t2373, t2385, t2352, 0, 0, 0, 0, 0, 0, t2303, t2310, t2280, t2257, 0, 0, 0, 0, 0, 0, -t2239, t2251, t2473, t2187, 0, 0, 0, 0, 0, 0, t2473, t2239, -t2251, t2183, 0, 0, 0, 0, 0, 0, t2193, t2201, t2191, t2169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2372, t2376, -t2430, t2351, 0, 0, 0, 0, 0, 0, t2302, t2309, t2279, t2256, 0, 0, 0, 0, 0, 0, t2236, -t2248, t2472, t2186, 0, 0, 0, 0, 0, 0, t2472, -t2236, t2248, t2182, 0, 0, 0, 0, 0, 0, t2192, t2200, t2190, t2168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2367, t2364, -t2371, -t2360, 0, 0, 0, 0, 0, 0, t2305, t2307, t2324, -t2325, 0, 0, 0, 0, 0, 0, t2458, -t2422, t2457, -t2269, 0, 0, 0, 0, 0, 0, t2457, -t2458, t2422, -t2229, 0, 0, 0, 0, 0, 0, t2235, t2241, t2228, t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2343, t2345, t2306, t2292, 0, 0, 0, 0, 0, 0, -t2266, -t2286, t2469, t2203, 0, 0, 0, 0, 0, 0, t2469, t2266, t2286, t2195, 0, 0, 0, 0, 0, 0, t2215, t2222, t2212, t2173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2344, t2350, t2308, t2291, 0, 0, 0, 0, 0, 0, t2263, -t2284, t2470, t2202, 0, 0, 0, 0, 0, 0, t2470, -t2263, t2284, t2194, 0, 0, 0, 0, 0, 0, t2214, t2221, t2211, t2172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2305, t2307, t2324, -t2325, 0, 0, 0, 0, 0, 0, t2458, -t2422, t2457, -t2269, 0, 0, 0, 0, 0, 0, t2457, -t2458, t2422, -t2229, 0, 0, 0, 0, 0, 0, t2235, t2241, t2228, t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2296, -t2297, -t2272, t2233, 0, 0, 0, 0, 0, 0, -t2272, -t2296, t2297, t2213, 0, 0, 0, 0, 0, 0, t2253, t2255, t2270, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2418, t2425, -t2275, t2232, 0, 0, 0, 0, 0, 0, -t2275, -t2418, -t2425, -t2216, 0, 0, 0, 0, 0, 0, -t2234, -t2240, -t2227, -t2176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2458, -t2422, t2457, -t2269, 0, 0, 0, 0, 0, 0, t2457, -t2458, t2422, -t2229, 0, 0, 0, 0, 0, 0, t2235, t2241, t2228, t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2457, -t2458, t2422, -t2229, 0, 0, 0, 0, 0, 0, t2235, t2241, t2228, t2177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2272, t2296, -t2297, -t2213, 0, 0, 0, 0, 0, 0, -t2253, -t2255, -t2270, -t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2275, t2418, t2425, t2216, 0, 0, 0, 0, 0, 0, t2234, t2240, t2227, t2176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2283, t2262, t2254, t2189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2407, t2426, t2406, t2417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2253, t2255, t2270, t2205;];
f_new_reg  = t1;
