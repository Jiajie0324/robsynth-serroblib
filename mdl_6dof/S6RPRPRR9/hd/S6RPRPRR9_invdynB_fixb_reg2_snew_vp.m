% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 19:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:38:09
% EndTime: 2019-05-05 19:40:31
% DurationCPUTime: 147.57s
% Computational Cost: add. (1567315->1260), mult. (5241013->2116), div. (0->0), fcn. (4541845->16), ass. (0->935)
t1379 = sin(qJ(6));
t1381 = sin(qJ(3));
t1372 = sin(pkin(12));
t1374 = sin(pkin(6));
t1584 = t1372 * t1374;
t1558 = qJD(1) * t1584;
t1378 = cos(pkin(6));
t1385 = cos(qJ(3));
t1376 = cos(pkin(12));
t1377 = cos(pkin(7));
t1578 = t1374 * t1377;
t1549 = t1376 * t1578;
t1373 = sin(pkin(7));
t1580 = t1373 * t1385;
t1649 = -t1378 * t1580 - t1385 * t1549;
t1313 = qJD(1) * t1649 + t1381 * t1558;
t1575 = t1377 * t1381;
t1581 = t1373 * t1381;
t1396 = t1378 * t1581 + (t1372 * t1385 + t1376 * t1575) * t1374;
t1315 = t1396 * qJD(1);
t1371 = sin(pkin(13));
t1375 = cos(pkin(13));
t1278 = -t1371 * t1313 + t1375 * t1315;
t1576 = t1377 * t1378;
t1579 = t1374 * t1376;
t1637 = t1373 * t1579 - t1576;
t1331 = qJD(1) * t1637 - qJD(3);
t1380 = sin(qJ(5));
t1384 = cos(qJ(5));
t1259 = t1278 * t1384 - t1331 * t1380;
t1276 = t1375 * t1313 + t1315 * t1371;
t1272 = qJD(5) + t1276;
t1383 = cos(qJ(6));
t1200 = t1259 * t1379 - t1383 * t1272;
t1202 = t1259 * t1383 + t1272 * t1379;
t1127 = t1202 * t1200;
t1565 = qJDD(1) * t1374;
t1545 = t1372 * t1565;
t1434 = qJDD(1) * t1649 + t1381 * t1545;
t1285 = -qJD(3) * t1315 - t1434;
t1394 = t1396 * qJDD(1);
t1286 = -qJD(3) * t1313 + t1394;
t1226 = t1371 * t1285 + t1375 * t1286;
t1564 = qJDD(1) * t1376;
t1543 = t1374 * t1564;
t1563 = qJDD(1) * t1378;
t1425 = t1373 * t1543 - t1377 * t1563 - qJDD(3);
t1546 = t1259 * qJD(5) + t1380 * t1226 + t1384 * t1425;
t1534 = qJDD(6) + t1546;
t1641 = -t1127 + t1534;
t1653 = t1379 * t1641;
t1257 = t1278 * t1380 + t1384 * t1331;
t1194 = t1259 * t1257;
t1538 = -t1375 * t1285 + t1286 * t1371;
t1225 = qJDD(5) + t1538;
t1640 = -t1194 + t1225;
t1652 = t1380 * t1640;
t1651 = t1383 * t1641;
t1650 = t1384 * t1640;
t1598 = t1313 * t1315;
t1399 = -t1425 - t1598;
t1605 = t1259 * t1272;
t1648 = t1546 + t1605;
t1600 = t1276 * t1278;
t1400 = -t1425 - t1600;
t1647 = t1371 * t1400;
t1646 = t1375 * t1400;
t1645 = t1381 * t1399;
t1644 = t1385 * t1399;
t1387 = qJD(1) ^ 2;
t1582 = t1373 * t1378;
t1439 = t1549 + t1582;
t1643 = t1387 * t1439;
t1368 = t1374 ^ 2;
t1370 = t1378 ^ 2;
t1553 = t1372 * t1376 * t1387;
t1642 = (t1368 + t1370) * t1374 * t1553;
t1164 = -t1257 * qJD(5) + t1384 * t1226 - t1380 * t1425;
t1075 = -t1200 * qJD(6) + t1383 * t1164 + t1379 * t1225;
t1253 = qJD(6) + t1257;
t1154 = t1253 * t1200;
t1036 = -t1154 + t1075;
t1206 = t1272 * t1257;
t1113 = -t1206 + t1164;
t1262 = t1276 * t1331;
t1639 = t1262 + t1226;
t1298 = t1313 * t1331;
t1239 = -t1298 + t1286;
t1366 = t1372 ^ 2;
t1369 = t1376 ^ 2;
t1567 = t1366 + t1369;
t1382 = sin(qJ(1));
t1386 = cos(qJ(1));
t1360 = g(1) * t1386 + g(2) * t1382;
t1337 = -pkin(1) * t1387 + qJ(2) * t1565 - t1360;
t1627 = pkin(9) * t1373;
t1440 = -pkin(2) * t1376 - t1372 * t1627;
t1638 = (t1370 * t1627 + (pkin(9) * t1376 * t1576 - t1440 * t1584) * t1374) * t1387 - t1372 * t1337;
t1599 = t1278 * t1331;
t1178 = t1538 - t1599;
t1359 = t1382 * g(1) - t1386 * g(2);
t1624 = qJ(2) * t1374;
t1435 = -t1387 * t1624 - t1359;
t1401 = qJDD(1) * pkin(1) - t1435;
t1398 = t1378 * t1401;
t1395 = -g(3) * t1584 + t1372 * t1398;
t1561 = pkin(9) * t1584;
t1536 = t1377 * t1561;
t1632 = pkin(2) * t1378;
t1437 = -t1536 + t1632;
t1562 = 0.2e1 * qJD(2) * t1374;
t1625 = pkin(9) * qJDD(1);
t1230 = t1376 * t1337 + t1439 * t1625 + (t1376 * t1562 + ((-pkin(2) * t1579 - t1373 * t1561) * t1579 - t1378 * t1437) * qJD(1)) * qJD(1) + t1395;
t1541 = t1378 * g(3) - qJDD(2);
t1316 = t1374 * t1401 + t1541;
t1533 = g(3) * t1579 - t1376 * t1398;
t1441 = -0.2e1 * qJD(2) * t1558 - t1533;
t1402 = pkin(2) * t1563 + t1441;
t1125 = t1385 * t1230 + (t1377 * t1402 + t1373 * (-pkin(2) * t1543 - t1316) - t1637 * pkin(9) * t1643 + (-t1377 * t1337 + ((-t1373 ^ 2 - t1377 ^ 2) * t1625 + pkin(2) * t1643) * t1374) * t1372) * t1381;
t1311 = t1313 ^ 2;
t1531 = -pkin(3) * t1331 - qJ(4) * t1315;
t1085 = -t1311 * pkin(3) + t1285 * qJ(4) + t1331 * t1531 + t1125;
t1390 = -t1541 + ((-pkin(1) + t1440) * qJDD(1) + t1435 + (t1372 * t1632 + (-t1376 * t1582 - t1567 * t1578) * pkin(9)) * t1387) * t1374;
t1391 = qJDD(1) * t1437 + t1441 + t1638;
t1574 = t1377 * t1385;
t1124 = t1230 * t1381 - t1390 * t1580 - t1391 * t1574;
t1393 = pkin(3) * t1399 - t1239 * qJ(4) - t1124;
t980 = -0.2e1 * qJD(4) * t1276 + t1375 * t1085 + t1371 * t1393;
t1539 = t1164 * t1379 - t1383 * t1225;
t1033 = (qJD(6) - t1253) * t1202 + t1539;
t1636 = t1285 * pkin(3) + t1311 * qJ(4) - t1315 * t1531 - qJDD(4);
t1198 = t1200 ^ 2;
t1199 = t1202 ^ 2;
t1252 = t1253 ^ 2;
t1255 = t1257 ^ 2;
t1256 = t1259 ^ 2;
t1635 = t1272 ^ 2;
t1274 = t1276 ^ 2;
t1275 = t1278 ^ 2;
t1312 = t1315 ^ 2;
t1634 = t1331 ^ 2;
t1633 = 0.2e1 * qJD(4);
t1631 = pkin(3) * t1373;
t1630 = pkin(3) * t1377;
t1629 = pkin(4) * t1371;
t1628 = pkin(5) * t1380;
t1186 = pkin(5) * t1257 - pkin(11) * t1259;
t1249 = t1377 * t1390;
t1389 = pkin(4) * t1178 - pkin(10) * t1639 - t1373 * t1391 + t1249 - t1636;
t1216 = pkin(4) * t1276 - pkin(10) * t1278;
t956 = -pkin(4) * t1634 - pkin(10) * t1425 - t1216 * t1276 + t980;
t902 = t1380 * t1389 + t1384 * t956;
t877 = -pkin(5) * t1635 + pkin(11) * t1225 - t1186 * t1257 + t902;
t1540 = t1085 * t1371 - t1375 * t1393;
t955 = t1425 * pkin(4) - t1634 * pkin(10) + (t1633 + t1216) * t1278 + t1540;
t905 = pkin(5) * t1648 - t1113 * pkin(11) + t955;
t818 = t1379 * t905 + t1383 * t877;
t901 = t1380 * t956 - t1384 * t1389;
t876 = -t1225 * pkin(5) - pkin(11) * t1635 + t1186 * t1259 + t901;
t1622 = t1379 * t876;
t1621 = t1380 * t955;
t979 = t1278 * t1633 + t1540;
t896 = t1371 * t980 - t1375 * t979;
t1620 = t1381 * t896;
t1619 = t1383 * t876;
t1618 = t1384 * t955;
t1617 = t1385 * t896;
t1069 = t1127 + t1534;
t1615 = t1069 * t1379;
t1614 = t1069 * t1383;
t1184 = -t1249 + (-qJDD(1) * t1536 + t1402 + t1638) * t1373;
t1118 = t1184 + t1636;
t1613 = t1118 * t1371;
t1612 = t1118 * t1375;
t1133 = t1194 + t1225;
t1611 = t1133 * t1380;
t1610 = t1133 * t1384;
t1208 = t1425 - t1600;
t1609 = t1208 * t1371;
t1608 = t1208 * t1375;
t1607 = t1253 * t1379;
t1606 = t1253 * t1383;
t1265 = t1425 - t1598;
t1604 = t1265 * t1381;
t1603 = t1265 * t1385;
t1602 = t1272 * t1380;
t1601 = t1272 * t1384;
t1597 = t1313 * t1385;
t1596 = t1315 * t1381;
t1595 = t1331 * t1371;
t1594 = t1331 * t1375;
t1350 = t1368 * t1553;
t1338 = t1350 + t1563;
t1593 = t1338 * t1372;
t1592 = t1338 * t1376;
t1339 = -t1350 + t1563;
t1591 = t1339 * t1372;
t1590 = t1339 * t1376;
t1589 = t1366 * t1368;
t1588 = t1368 * t1369;
t1587 = t1368 * t1387;
t1586 = t1372 * t1316;
t1583 = t1373 * t1425;
t1577 = t1376 * t1316;
t1573 = t1378 * t1387;
t1572 = t1381 * t1184;
t1571 = t1385 * t1184;
t1570 = qJD(3) - t1331;
t1566 = qJDD(1) * t1368;
t1560 = -pkin(4) * t1375 - pkin(3);
t1559 = -pkin(5) * t1384 - pkin(4);
t1557 = t1380 * t1127;
t1556 = t1384 * t1127;
t1555 = t1371 * t1194;
t1554 = t1375 * t1194;
t1552 = t1373 * t1600;
t1548 = t1374 * t1573;
t1547 = t1377 * t1600;
t1544 = t1372 * t1564;
t1542 = t1374 * t1563;
t897 = t1371 * t979 + t1375 * t980;
t817 = t1379 * t877 - t1383 * t905;
t828 = t1380 * t901 + t1384 * t902;
t1318 = -t1359 * t1382 - t1386 * t1360;
t1356 = qJDD(1) * t1386 - t1382 * t1387;
t1532 = -pkin(8) * t1356 - g(3) * t1382;
t1530 = qJD(1) * t1562 + t1337;
t1264 = -t1634 - t1311;
t1203 = t1264 * t1385 - t1645;
t1529 = pkin(9) * t1203 + t1571;
t1273 = -t1312 - t1634;
t1211 = -t1273 * t1381 + t1603;
t1528 = pkin(9) * t1211 - t1572;
t754 = t1379 * t817 + t1383 * t818;
t740 = t1380 * t876 + t1384 * t754;
t753 = t1379 * t818 - t1383 * t817;
t695 = t1371 * t740 - t1375 * t753;
t696 = t1371 * t753 + t1375 * t740;
t1507 = t1381 * t696 + t1385 * t695;
t739 = t1380 * t754 - t1384 * t876;
t668 = -t1373 * t739 + t1377 * t1507;
t672 = -t1381 * t695 + t1385 * t696;
t1527 = t1372 * t672 + t1376 * t668;
t797 = t1371 * t828 - t1375 * t955;
t798 = t1371 * t955 + t1375 * t828;
t1506 = t1381 * t798 + t1385 * t797;
t827 = t1380 * t902 - t1384 * t901;
t722 = -t1373 * t827 + t1377 * t1506;
t745 = -t1381 * t797 + t1385 * t798;
t1526 = t1372 * t745 + t1376 * t722;
t1090 = t1198 + t1199;
t1037 = -t1154 - t1075;
t945 = -t1033 * t1383 - t1037 * t1379;
t907 = -t1090 * t1380 + t1384 * t945;
t943 = -t1033 * t1379 + t1037 * t1383;
t841 = t1371 * t907 - t1375 * t943;
t842 = t1371 * t943 + t1375 * t907;
t1505 = t1381 * t842 + t1385 * t841;
t906 = t1090 * t1384 + t1380 * t945;
t756 = -t1373 * t906 + t1377 * t1505;
t772 = -t1381 * t841 + t1385 * t842;
t1525 = t1372 * t772 + t1376 * t756;
t1126 = -t1199 + t1198;
t1034 = (-qJD(6) - t1253) * t1202 - t1539;
t944 = t1034 * t1383 - t1036 * t1379;
t918 = -t1126 * t1380 + t1384 * t944;
t942 = -t1034 * t1379 - t1036 * t1383;
t845 = t1371 * t918 + t1375 * t942;
t846 = -t1371 * t942 + t1375 * t918;
t1504 = t1381 * t846 + t1385 * t845;
t917 = t1126 * t1384 + t1380 * t944;
t760 = -t1373 * t917 + t1377 * t1504;
t775 = -t1381 * t845 + t1385 * t846;
t1524 = t1372 * t775 + t1376 * t760;
t1105 = -t1252 - t1198;
t994 = t1105 * t1383 - t1653;
t926 = -t1034 * t1380 + t1384 * t994;
t993 = t1105 * t1379 + t1651;
t868 = t1371 * t926 - t1375 * t993;
t869 = t1371 * t993 + t1375 * t926;
t1503 = t1381 * t869 + t1385 * t868;
t925 = t1034 * t1384 + t1380 * t994;
t774 = -t1373 * t925 + t1377 * t1503;
t799 = -t1381 * t868 + t1385 * t869;
t1523 = t1372 * t799 + t1376 * t774;
t1123 = -t1199 - t1252;
t1001 = t1123 * t1383 - t1615;
t1002 = -t1123 * t1379 - t1614;
t931 = t1002 * t1384 + t1036 * t1380;
t872 = -t1001 * t1375 + t1371 * t931;
t873 = t1001 * t1371 + t1375 * t931;
t1502 = t1381 * t873 + t1385 * t872;
t930 = t1002 * t1380 - t1036 * t1384;
t777 = -t1373 * t930 + t1377 * t1502;
t802 = -t1381 * t872 + t1385 * t873;
t1522 = t1372 * t802 + t1376 * t777;
t1153 = -t1199 + t1252;
t1018 = -t1153 * t1383 - t1653;
t1020 = -t1153 * t1379 + t1651;
t934 = t1020 * t1384 - t1037 * t1380;
t882 = t1018 * t1375 + t1371 * t934;
t884 = -t1018 * t1371 + t1375 * t934;
t1501 = t1381 * t884 + t1385 * t882;
t932 = t1020 * t1380 + t1037 * t1384;
t785 = -t1373 * t932 + t1377 * t1501;
t812 = -t1381 * t882 + t1385 * t884;
t1521 = t1372 * t812 + t1376 * t785;
t1152 = t1198 - t1252;
t1019 = -t1152 * t1379 - t1614;
t1021 = t1152 * t1383 - t1615;
t935 = t1021 * t1384 - t1033 * t1380;
t883 = t1019 * t1375 + t1371 * t935;
t885 = -t1019 * t1371 + t1375 * t935;
t1500 = t1381 * t885 + t1385 * t883;
t933 = t1021 * t1380 + t1033 * t1384;
t786 = -t1373 * t933 + t1377 * t1500;
t813 = -t1381 * t883 + t1385 * t885;
t1520 = t1372 * t813 + t1376 * t786;
t1074 = -qJD(6) * t1202 - t1539;
t1029 = -t1074 * t1383 - t1200 * t1607;
t1030 = -t1074 * t1379 + t1200 * t1606;
t973 = t1030 * t1384 - t1557;
t913 = t1029 * t1375 + t1371 * t973;
t915 = -t1029 * t1371 + t1375 * t973;
t1498 = t1381 * t915 + t1385 * t913;
t971 = t1030 * t1380 + t1556;
t808 = -t1373 * t971 + t1377 * t1498;
t836 = -t1381 * t913 + t1385 * t915;
t1519 = t1372 * t836 + t1376 * t808;
t1031 = -t1075 * t1379 - t1202 * t1606;
t1032 = t1075 * t1383 - t1202 * t1607;
t974 = t1032 * t1384 + t1557;
t914 = t1031 * t1375 + t1371 * t974;
t916 = -t1031 * t1371 + t1375 * t974;
t1497 = t1381 * t916 + t1385 * t914;
t972 = t1032 * t1380 - t1556;
t809 = -t1373 * t972 + t1377 * t1497;
t837 = -t1381 * t914 + t1385 * t916;
t1518 = t1372 * t837 + t1376 * t809;
t1499 = t1381 * t897 + t1617;
t816 = t1373 * t1118 + t1377 * t1499;
t824 = t1385 * t897 - t1620;
t1517 = t1372 * t824 + t1376 * t816;
t1083 = (-t1200 * t1383 + t1202 * t1379) * t1253;
t1040 = t1083 * t1380 - t1384 * t1534;
t1041 = t1083 * t1384 + t1380 * t1534;
t1082 = (t1200 * t1379 + t1202 * t1383) * t1253;
t958 = t1041 * t1371 + t1082 * t1375;
t959 = t1041 * t1375 - t1082 * t1371;
t1496 = t1381 * t959 + t1385 * t958;
t849 = -t1373 * t1040 + t1377 * t1496;
t879 = -t1381 * t958 + t1385 * t959;
t1516 = t1372 * t879 + t1376 * t849;
t1112 = -t1546 + t1605;
t1114 = -t1206 - t1164;
t1026 = t1112 * t1380 + t1114 * t1384;
t1028 = t1112 * t1384 - t1114 * t1380;
t1144 = t1255 + t1256;
t981 = t1028 * t1371 + t1144 * t1375;
t982 = t1028 * t1375 - t1144 * t1371;
t1495 = t1381 * t982 + t1385 * t981;
t861 = -t1373 * t1026 + t1377 * t1495;
t898 = -t1381 * t981 + t1385 * t982;
t1515 = t1372 * t898 + t1376 * t861;
t1025 = t1113 * t1384 - t1380 * t1648;
t1027 = -t1113 * t1380 - t1384 * t1648;
t1193 = -t1256 + t1255;
t991 = t1027 * t1371 + t1193 * t1375;
t992 = t1027 * t1375 - t1193 * t1371;
t1494 = t1381 * t992 + t1385 * t991;
t865 = -t1373 * t1025 + t1377 * t1494;
t910 = -t1381 * t991 + t1385 * t992;
t1514 = t1372 * t910 + t1376 * t865;
t1159 = -t1635 - t1255;
t1071 = t1159 * t1380 + t1650;
t1072 = t1159 * t1384 - t1652;
t997 = t1072 * t1371 - t1375 * t1648;
t998 = t1072 * t1375 + t1371 * t1648;
t1493 = t1381 * t998 + t1385 * t997;
t881 = -t1373 * t1071 + t1377 * t1493;
t912 = -t1381 * t997 + t1385 * t998;
t1513 = t1372 * t912 + t1376 * t881;
t1171 = -t1256 - t1635;
t1076 = t1171 * t1384 - t1611;
t1077 = -t1171 * t1380 - t1610;
t1000 = t1077 * t1375 + t1113 * t1371;
t999 = t1077 * t1371 - t1113 * t1375;
t1490 = t1000 * t1381 + t1385 * t999;
t889 = -t1373 * t1076 + t1377 * t1490;
t921 = t1000 * t1385 - t1381 * t999;
t1512 = t1372 * t921 + t1376 * t889;
t1205 = -t1256 + t1635;
t1091 = t1205 * t1384 + t1652;
t1093 = -t1205 * t1380 + t1650;
t1009 = t1093 * t1371 + t1114 * t1375;
t1011 = t1093 * t1375 - t1114 * t1371;
t1485 = t1009 * t1385 + t1011 * t1381;
t894 = -t1373 * t1091 + t1377 * t1485;
t928 = -t1009 * t1381 + t1011 * t1385;
t1511 = t1372 * t928 + t1376 * t894;
t1204 = t1255 - t1635;
t1092 = t1204 * t1380 + t1610;
t1094 = t1204 * t1384 - t1611;
t1010 = t1094 * t1371 - t1112 * t1375;
t1012 = t1094 * t1375 + t1112 * t1371;
t1484 = t1010 * t1385 + t1012 * t1381;
t895 = -t1373 * t1092 + t1377 * t1484;
t929 = -t1010 * t1381 + t1012 * t1385;
t1510 = t1372 * t929 + t1376 * t895;
t1106 = t1257 * t1602 - t1384 * t1546;
t1107 = t1257 * t1601 + t1380 * t1546;
t1060 = t1107 * t1371 + t1554;
t1062 = t1107 * t1375 - t1555;
t1479 = t1060 * t1385 + t1062 * t1381;
t940 = -t1373 * t1106 + t1377 * t1479;
t967 = -t1060 * t1381 + t1062 * t1385;
t1509 = t1372 * t967 + t1376 * t940;
t1108 = t1164 * t1380 + t1259 * t1601;
t1109 = t1164 * t1384 - t1259 * t1602;
t1061 = t1109 * t1371 - t1554;
t1063 = t1109 * t1375 + t1555;
t1478 = t1061 * t1385 + t1063 * t1381;
t941 = -t1373 * t1108 + t1377 * t1478;
t968 = -t1061 * t1381 + t1063 * t1385;
t1508 = t1372 * t968 + t1376 * t941;
t1346 = (-t1370 - t1588) * t1387;
t1306 = t1346 * t1376 - t1593;
t1492 = qJ(2) * t1306 + t1577;
t1344 = (-t1370 - t1589) * t1387;
t1308 = -t1344 * t1372 - t1590;
t1491 = qJ(2) * t1308 - t1586;
t1131 = (-t1257 * t1384 + t1259 * t1380) * t1272;
t1095 = t1131 * t1371 - t1225 * t1375;
t1096 = t1131 * t1375 + t1225 * t1371;
t1003 = -t1095 * t1381 + t1096 * t1385;
t1130 = (-t1257 * t1380 - t1259 * t1384) * t1272;
t1475 = t1095 * t1385 + t1096 * t1381;
t962 = -t1373 * t1130 + t1377 * t1475;
t1489 = t1003 * t1372 + t1376 * t962;
t1100 = -t1178 * t1371 + t1375 * t1639;
t1102 = -t1178 * t1375 - t1371 * t1639;
t1013 = -t1100 * t1381 + t1102 * t1385;
t1217 = t1275 - t1274;
t1474 = t1100 * t1385 + t1102 * t1381;
t988 = -t1373 * t1217 + t1377 * t1474;
t1488 = t1013 * t1372 + t1376 * t988;
t1182 = -t1262 + t1226;
t1438 = -t1538 - t1599;
t1101 = -t1182 * t1375 + t1371 * t1438;
t1103 = t1182 * t1371 + t1375 * t1438;
t1014 = -t1101 * t1381 + t1103 * t1385;
t1185 = -t1274 - t1275;
t1473 = t1101 * t1385 + t1103 * t1381;
t984 = -t1373 * t1185 + t1377 * t1473;
t1487 = t1014 * t1372 + t1376 * t984;
t1471 = -t1124 * t1385 + t1125 * t1381;
t1006 = t1373 * t1184 + t1377 * t1471;
t1055 = t1124 * t1381 + t1125 * t1385;
t1486 = t1006 * t1376 + t1055 * t1372;
t1207 = -t1634 - t1274;
t1135 = t1207 * t1371 + t1646;
t1136 = t1207 * t1375 - t1647;
t1469 = t1135 * t1385 + t1136 * t1381;
t1017 = -t1373 * t1178 + t1377 * t1469;
t1059 = -t1135 * t1381 + t1136 * t1385;
t1483 = t1017 * t1376 + t1059 * t1372;
t1242 = -t1275 - t1634;
t1150 = t1242 * t1375 + t1609;
t1151 = -t1242 * t1371 + t1608;
t1465 = t1150 * t1385 + t1151 * t1381;
t1044 = -t1373 * t1639 + t1377 * t1465;
t1080 = -t1150 * t1381 + t1151 * t1385;
t1482 = t1044 * t1376 + t1080 * t1372;
t1261 = -t1275 + t1634;
t1165 = t1261 * t1375 + t1647;
t1167 = -t1261 * t1371 + t1646;
t1462 = t1165 * t1385 + t1167 * t1381;
t1050 = -t1373 * t1182 + t1377 * t1462;
t1088 = -t1165 * t1381 + t1167 * t1385;
t1481 = t1050 * t1376 + t1088 * t1372;
t1260 = t1274 - t1634;
t1166 = t1260 * t1371 - t1608;
t1168 = t1260 * t1375 + t1609;
t1461 = t1166 * t1385 + t1168 * t1381;
t1051 = -t1373 * t1438 + t1377 * t1461;
t1089 = -t1166 * t1381 + t1168 * t1385;
t1480 = t1051 * t1376 + t1089 * t1372;
t1174 = -t1276 * t1595 - t1375 * t1538;
t1175 = -t1276 * t1594 + t1371 * t1538;
t1460 = t1174 * t1385 + t1175 * t1381;
t1066 = t1377 * t1460 + t1552;
t1098 = -t1174 * t1381 + t1175 * t1385;
t1477 = t1066 * t1376 + t1098 * t1372;
t1176 = t1226 * t1371 - t1278 * t1594;
t1177 = t1226 * t1375 + t1278 * t1595;
t1459 = t1176 * t1385 + t1177 * t1381;
t1067 = t1377 * t1459 - t1552;
t1099 = -t1176 * t1381 + t1177 * t1385;
t1476 = t1067 * t1376 + t1099 * t1372;
t1195 = (t1276 * t1371 + t1278 * t1375) * t1331;
t1196 = (t1276 * t1375 - t1278 * t1371) * t1331;
t1456 = t1195 * t1385 + t1196 * t1381;
t1120 = t1377 * t1456 + t1583;
t1122 = -t1195 * t1381 + t1196 * t1385;
t1472 = t1120 * t1376 + t1122 * t1372;
t1254 = -t1311 - t1312;
t1397 = (-qJD(3) - t1331) * t1315 - t1434;
t1453 = -t1239 * t1385 + t1381 * t1397;
t1129 = -t1373 * t1254 + t1377 * t1453;
t1173 = t1239 * t1381 + t1385 * t1397;
t1470 = t1129 * t1376 + t1173 * t1372;
t1287 = t1312 - t1311;
t1234 = t1315 * t1570 + t1434;
t1238 = t1298 + t1286;
t1454 = -t1234 * t1381 + t1238 * t1385;
t1141 = -t1373 * t1287 + t1377 * t1454;
t1172 = -t1234 * t1385 - t1238 * t1381;
t1468 = t1141 * t1376 + t1172 * t1372;
t1452 = t1264 * t1381 + t1644;
t1143 = -t1373 * t1234 + t1377 * t1452;
t1467 = t1143 * t1376 + t1203 * t1372;
t1237 = -t1313 * t1570 + t1394;
t1451 = t1273 * t1385 + t1604;
t1146 = -t1373 * t1237 + t1377 * t1451;
t1466 = t1146 * t1376 + t1211 * t1372;
t1297 = -t1312 + t1634;
t1449 = t1297 * t1385 + t1645;
t1157 = -t1373 * t1239 + t1377 * t1449;
t1220 = -t1297 * t1381 + t1644;
t1464 = t1157 * t1376 + t1220 * t1372;
t1296 = t1311 - t1634;
t1450 = t1296 * t1381 - t1603;
t1158 = -t1373 * t1397 + t1377 * t1450;
t1221 = t1296 * t1385 + t1604;
t1463 = t1158 * t1376 + t1221 * t1372;
t1188 = t1285 * t1574 + (t1315 * t1373 - t1331 * t1575) * t1313;
t1231 = -t1285 * t1381 - t1331 * t1597;
t1458 = t1188 * t1376 + t1231 * t1372;
t1190 = t1286 * t1575 + (-t1313 * t1373 - t1331 * t1574) * t1315;
t1233 = t1286 * t1385 + t1331 * t1596;
t1457 = t1190 * t1376 + t1233 * t1372;
t1436 = t1331 * (t1313 * t1381 + t1315 * t1385);
t1228 = t1377 * t1436 + t1583;
t1243 = (-t1596 + t1597) * t1331;
t1455 = t1228 * t1376 + t1243 * t1372;
t1294 = t1372 * t1530 + t1533;
t1295 = t1376 * t1530 + t1395;
t1448 = -t1294 * t1376 + t1295 * t1372;
t1232 = t1294 * t1372 + t1295 * t1376;
t1352 = t1376 * t1548;
t1333 = t1352 + t1545;
t1351 = t1372 * t1548;
t1336 = -t1351 + t1543;
t1447 = t1333 * t1376 + t1336 * t1372;
t1334 = -t1352 + t1545;
t1335 = t1351 + t1543;
t1446 = -t1334 * t1376 + t1335 * t1372;
t1343 = (t1370 - t1589) * t1387;
t1445 = t1343 * t1376 + t1593;
t1444 = t1346 * t1372 + t1592;
t1443 = t1344 * t1376 - t1591;
t1345 = (-t1370 + t1588) * t1387;
t1442 = t1345 * t1372 + t1590;
t1317 = t1359 * t1386 - t1360 * t1382;
t683 = -pkin(10) * t739 + (-pkin(11) * t1384 + t1628) * t753;
t691 = -pkin(4) * t739 + pkin(5) * t876 - pkin(11) * t754;
t647 = -pkin(3) * t739 + qJ(4) * t696 + t1371 * t683 + t1375 * t691;
t650 = -qJ(4) * t695 - t1371 * t691 + t1375 * t683;
t1433 = pkin(9) * t672 + t1381 * t650 + t1385 * t647;
t751 = -pkin(11) * t943 - t753;
t724 = -pkin(10) * t906 + t1384 * t751 + t1628 * t943;
t733 = -pkin(4) * t906 - pkin(5) * t1090 - pkin(11) * t945 - t754;
t677 = -pkin(3) * t906 + qJ(4) * t842 + t1371 * t724 + t1375 * t733;
t680 = -qJ(4) * t841 - t1371 * t733 + t1375 * t724;
t1432 = pkin(9) * t772 + t1381 * t680 + t1385 * t677;
t795 = -pkin(5) * t993 + t817;
t843 = -pkin(11) * t993 + t1622;
t748 = -pkin(10) * t925 - t1380 * t795 + t1384 * t843;
t790 = -pkin(4) * t925 - pkin(5) * t1034 - pkin(11) * t994 + t1619;
t694 = -pkin(3) * t925 + qJ(4) * t869 + t1371 * t748 + t1375 * t790;
t702 = -qJ(4) * t868 - t1371 * t790 + t1375 * t748;
t1431 = pkin(9) * t799 + t1381 * t702 + t1385 * t694;
t796 = -pkin(5) * t1001 + t818;
t844 = -pkin(11) * t1001 + t1619;
t752 = -pkin(10) * t930 - t1380 * t796 + t1384 * t844;
t792 = -pkin(4) * t930 + pkin(5) * t1036 - pkin(11) * t1002 - t1622;
t698 = -pkin(3) * t930 + qJ(4) * t873 + t1371 * t752 + t1375 * t792;
t704 = -qJ(4) * t872 - t1371 * t792 + t1375 * t752;
t1430 = pkin(9) * t802 + t1381 * t704 + t1385 * t698;
t711 = qJ(4) * t798 + (-pkin(10) * t1371 + t1560) * t827;
t728 = -qJ(4) * t797 + (-pkin(10) * t1375 + t1629) * t827;
t1429 = pkin(9) * t745 + t1381 * t728 + t1385 * t711;
t805 = -pkin(10) * t1026 - t827;
t769 = qJ(4) * t982 + t1026 * t1560 + t1371 * t805;
t778 = -qJ(4) * t981 + t1026 * t1629 + t1375 * t805;
t1428 = pkin(9) * t898 + t1381 * t778 + t1385 * t769;
t870 = -pkin(4) * t1071 + t901;
t922 = -pkin(10) * t1071 + t1621;
t791 = -pkin(3) * t1071 + qJ(4) * t998 + t1371 * t922 + t1375 * t870;
t800 = -qJ(4) * t997 - t1371 * t870 + t1375 * t922;
t1427 = pkin(9) * t912 + t1381 * t800 + t1385 * t791;
t871 = -pkin(4) * t1076 + t902;
t924 = -pkin(10) * t1076 + t1618;
t793 = -pkin(3) * t1076 + qJ(4) * t1000 + t1371 * t924 + t1375 * t871;
t801 = -qJ(4) * t999 - t1371 * t871 + t1375 * t924;
t1426 = pkin(9) * t921 + t1381 * t801 + t1385 * t793;
t863 = -pkin(3) * t1185 + qJ(4) * t1103 + t897;
t875 = -qJ(4) * t1101 - t896;
t1424 = pkin(9) * t1014 + t1381 * t875 + t1385 * t863;
t664 = pkin(3) * t695 + pkin(10) * t740 + (-pkin(11) * t1380 + t1559) * t753;
t667 = t1373 * t1507 + t1377 * t739;
t631 = -pkin(2) * t667 - t1373 * t664 + t1377 * t1433;
t632 = -t1381 * t647 + t1385 * t650 + (-t1373 * t667 - t1377 * t668) * pkin(9);
t646 = -t1372 * t668 + t1376 * t672;
t1423 = qJ(2) * t646 + t1372 * t632 + t1376 * t631;
t703 = pkin(3) * t841 + pkin(10) * t907 + t1380 * t751 + t1559 * t943;
t755 = t1373 * t1505 + t1377 * t906;
t645 = -pkin(2) * t755 - t1373 * t703 + t1377 * t1432;
t649 = -t1381 * t677 + t1385 * t680 + (-t1373 * t755 - t1377 * t756) * pkin(9);
t714 = -t1372 * t756 + t1376 * t772;
t1422 = qJ(2) * t714 + t1372 * t649 + t1376 * t645;
t721 = t1373 * t1506 + t1377 * t827;
t746 = pkin(3) * t797 - pkin(4) * t955 + pkin(10) * t828;
t652 = -pkin(2) * t721 - t1373 * t746 + t1377 * t1429;
t662 = -t1381 * t711 + t1385 * t728 + (-t1373 * t721 - t1377 * t722) * pkin(9);
t685 = -t1372 * t722 + t1376 * t745;
t1421 = qJ(2) * t685 + t1372 * t662 + t1376 * t652;
t723 = pkin(3) * t868 - pkin(4) * t993 + pkin(10) * t926 + t1380 * t843 + t1384 * t795;
t773 = t1373 * t1503 + t1377 * t925;
t654 = -pkin(2) * t773 - t1373 * t723 + t1377 * t1431;
t666 = -t1381 * t694 + t1385 * t702 + (-t1373 * t773 - t1377 * t774) * pkin(9);
t736 = -t1372 * t774 + t1376 * t799;
t1420 = qJ(2) * t736 + t1372 * t666 + t1376 * t654;
t726 = pkin(3) * t872 - pkin(4) * t1001 + pkin(10) * t931 + t1380 * t844 + t1384 * t796;
t776 = t1373 * t1502 + t1377 * t930;
t659 = -pkin(2) * t776 - t1373 * t726 + t1377 * t1430;
t669 = -t1381 * t698 + t1385 * t704 + (-t1373 * t776 - t1377 * t777) * pkin(9);
t738 = -t1372 * t777 + t1376 * t802;
t1419 = qJ(2) * t738 + t1372 * t669 + t1376 * t659;
t787 = pkin(3) * t981 + pkin(4) * t1144 + pkin(10) * t1028 + t828;
t860 = t1377 * t1026 + t1373 * t1495;
t687 = -pkin(2) * t860 - t1373 * t787 + t1377 * t1428;
t699 = -t1381 * t769 + t1385 * t778 + (-t1373 * t860 - t1377 * t861) * pkin(9);
t804 = -t1372 * t861 + t1376 * t898;
t1418 = qJ(2) * t804 + t1372 * t699 + t1376 * t687;
t853 = pkin(3) * t997 - pkin(4) * t1648 + pkin(10) * t1072 - t1618;
t880 = t1377 * t1071 + t1373 * t1493;
t706 = -pkin(2) * t880 - t1373 * t853 + t1377 * t1427;
t715 = -t1381 * t791 + t1385 * t800 + (-t1373 * t880 - t1377 * t881) * pkin(9);
t821 = -t1372 * t881 + t1376 * t912;
t1417 = qJ(2) * t821 + t1372 * t715 + t1376 * t706;
t855 = pkin(3) * t999 - pkin(4) * t1113 + pkin(10) * t1077 + t1621;
t888 = t1377 * t1076 + t1373 * t1490;
t710 = -pkin(2) * t888 - t1373 * t855 + t1377 * t1426;
t716 = -t1381 * t793 + t1385 * t801 + (-t1373 * t888 - t1377 * t889) * pkin(9);
t825 = -t1372 * t889 + t1376 * t921;
t1416 = qJ(2) * t825 + t1372 * t716 + t1376 * t710;
t878 = pkin(3) * t1118 + qJ(4) * t897;
t1403 = pkin(9) * t824 - qJ(4) * t1620 + t1385 * t878;
t815 = -t1377 * t1118 + t1373 * t1499;
t718 = -pkin(2) * t815 + t1377 * t1403 - t1631 * t896;
t727 = -qJ(4) * t1617 - t1381 * t878 + (-t1373 * t815 - t1377 * t816) * pkin(9);
t758 = -t1372 * t816 + t1376 * t824;
t1415 = qJ(2) * t758 + t1372 * t727 + t1376 * t718;
t983 = t1377 * t1185 + t1373 * t1473;
t768 = -pkin(2) * t983 - t1101 * t1631 + t1377 * t1424;
t771 = -t1381 * t863 + t1385 * t875 + (-t1373 * t983 - t1377 * t984) * pkin(9);
t911 = t1014 * t1376 - t1372 * t984;
t1414 = qJ(2) * t911 + t1372 * t771 + t1376 * t768;
t1016 = t1377 * t1178 + t1373 * t1469;
t1004 = -pkin(3) * t1178 + qJ(4) * t1136 + t1612;
t1054 = -qJ(4) * t1135 - t1613;
t1410 = pkin(9) * t1059 + t1004 * t1385 + t1054 * t1381;
t952 = pkin(3) * t1135 - t979;
t820 = -pkin(2) * t1016 - t1373 * t952 + t1377 * t1410;
t852 = -t1004 * t1381 + t1054 * t1385 + (-t1016 * t1373 - t1017 * t1377) * pkin(9);
t949 = -t1017 * t1372 + t1059 * t1376;
t1413 = qJ(2) * t949 + t1372 * t852 + t1376 * t820;
t1043 = t1373 * t1465 + t1377 * t1639;
t1015 = -pkin(3) * t1639 + qJ(4) * t1151 - t1613;
t1056 = -qJ(4) * t1150 - t1612;
t1409 = pkin(9) * t1080 + t1015 * t1385 + t1056 * t1381;
t953 = pkin(3) * t1150 - t980;
t830 = -pkin(2) * t1043 - t1373 * t953 + t1377 * t1409;
t859 = -t1015 * t1381 + t1056 * t1385 + (-t1043 * t1373 - t1044 * t1377) * pkin(9);
t960 = -t1044 * t1372 + t1080 * t1376;
t1412 = qJ(2) * t960 + t1372 * t859 + t1376 * t830;
t1005 = -t1377 * t1184 + t1373 * t1471;
t927 = (-t1005 * t1373 - t1006 * t1377) * pkin(9);
t946 = -t1006 * t1372 + t1055 * t1376;
t947 = pkin(9) * t1055 * t1377 - pkin(2) * t1005;
t1411 = qJ(2) * t946 + t1372 * t927 + t1376 * t947;
t1408 = pkin(9) * t1173 + t1055;
t1073 = -t1129 * t1372 + t1173 * t1376;
t1128 = t1377 * t1254 + t1373 * t1453;
t957 = (-t1128 * t1373 - t1129 * t1377) * pkin(9) - t1471;
t964 = -pkin(2) * t1128 + t1377 * t1408;
t1407 = qJ(2) * t1073 + t1372 * t957 + t1376 * t964;
t1142 = t1377 * t1234 + t1373 * t1452;
t1039 = -t1572 + (-t1142 * t1373 - t1143 * t1377) * pkin(9);
t1097 = -t1143 * t1372 + t1203 * t1376;
t990 = -pkin(2) * t1142 + t1124 * t1373 + t1377 * t1529;
t1406 = qJ(2) * t1097 + t1039 * t1372 + t1376 * t990;
t1145 = t1377 * t1237 + t1373 * t1451;
t1042 = -t1571 + (-t1145 * t1373 - t1146 * t1377) * pkin(9);
t1104 = -t1146 * t1372 + t1211 * t1376;
t996 = -pkin(2) * t1145 + t1125 * t1373 + t1377 * t1528;
t1405 = qJ(2) * t1104 + t1042 * t1372 + t1376 * t996;
t1299 = t1334 * t1372 + t1335 * t1376;
t1404 = qJ(2) * t1299 + t1232;
t1355 = qJDD(1) * t1382 + t1386 * t1387;
t1342 = -pkin(8) * t1355 + g(3) * t1386;
t1341 = t1567 * t1587;
t1340 = (t1366 - t1369) * t1587;
t1327 = t1567 * t1548;
t1326 = (-t1366 * t1573 + t1544) * t1374;
t1325 = (-t1369 * t1573 - t1544) * t1374;
t1319 = t1377 * t1425;
t1310 = t1366 * t1542 + t1642;
t1309 = t1369 * t1542 - t1642;
t1307 = -t1343 * t1372 + t1592;
t1305 = t1345 * t1376 - t1591;
t1300 = -t1333 * t1372 + t1336 * t1376;
t1293 = -t1374 * t1333 + t1378 * t1443;
t1292 = -t1374 * t1334 + t1378 * t1445;
t1291 = t1374 * t1336 + t1378 * t1444;
t1290 = -t1374 * t1335 + t1378 * t1442;
t1289 = t1378 * t1333 + t1374 * t1443;
t1288 = -t1378 * t1336 + t1374 * t1444;
t1284 = -t1374 * t1340 + t1378 * t1447;
t1283 = t1374 * t1341 + t1378 * t1446;
t1282 = -t1378 * t1341 + t1374 * t1446;
t1247 = -t1293 * t1382 + t1308 * t1386;
t1246 = -t1291 * t1382 + t1306 * t1386;
t1245 = t1293 * t1386 + t1308 * t1382;
t1244 = t1291 * t1386 + t1306 * t1382;
t1241 = -t1283 * t1382 + t1299 * t1386;
t1240 = t1283 * t1386 + t1299 * t1382;
t1227 = t1373 * t1436 - t1319;
t1215 = t1374 * t1316 + t1378 * t1448;
t1214 = -t1378 * t1316 + t1374 * t1448;
t1213 = -t1577 + (-t1289 * t1374 - t1293 * t1378) * qJ(2);
t1212 = -t1586 + (-t1288 * t1374 - t1291 * t1378) * qJ(2);
t1192 = -pkin(1) * t1288 + t1294 * t1374 + t1378 * t1492;
t1191 = -pkin(1) * t1289 + t1295 * t1374 + t1378 * t1491;
t1189 = t1286 * t1581 + (t1313 * t1377 - t1331 * t1580) * t1315;
t1187 = t1285 * t1580 + (-t1315 * t1377 - t1331 * t1581) * t1313;
t1170 = -pkin(1) * t1282 + t1378 * t1404;
t1169 = -t1228 * t1372 + t1243 * t1376;
t1162 = (-t1282 * t1374 - t1283 * t1378) * qJ(2) - t1448;
t1156 = t1373 * t1450 + t1377 * t1397;
t1155 = t1377 * t1239 + t1373 * t1449;
t1149 = qJ(2) * t1232 * t1378 - pkin(1) * t1214;
t1148 = -t1215 * t1382 + t1232 * t1386;
t1147 = t1215 * t1386 + t1232 * t1382;
t1140 = t1377 * t1287 + t1373 * t1454;
t1139 = (-t1214 * t1374 - t1215 * t1378) * qJ(2);
t1138 = -t1190 * t1372 + t1233 * t1376;
t1137 = -t1188 * t1372 + t1231 * t1376;
t1121 = -t1374 * t1227 + t1378 * t1455;
t1119 = t1373 * t1456 - t1319;
t1117 = -t1158 * t1372 + t1221 * t1376;
t1116 = -t1157 * t1372 + t1220 * t1376;
t1087 = -t1374 * t1189 + t1378 * t1457;
t1086 = -t1374 * t1187 + t1378 * t1458;
t1081 = -t1141 * t1372 + t1172 * t1376;
t1065 = t1373 * t1459 + t1547;
t1064 = t1373 * t1460 - t1547;
t1058 = -t1374 * t1156 + t1378 * t1463;
t1057 = -t1374 * t1155 + t1378 * t1464;
t1053 = -t1374 * t1145 + t1378 * t1466;
t1052 = t1378 * t1145 + t1374 * t1466;
t1049 = t1373 * t1461 + t1377 * t1438;
t1048 = t1377 * t1182 + t1373 * t1462;
t1047 = -t1374 * t1142 + t1378 * t1467;
t1046 = t1378 * t1142 + t1374 * t1467;
t1045 = -t1120 * t1372 + t1122 * t1376;
t1022 = -t1374 * t1140 + t1378 * t1468;
t1008 = -t1374 * t1128 + t1378 * t1470;
t1007 = t1378 * t1128 + t1374 * t1470;
t995 = pkin(2) * t1146 - t1125 * t1377 + t1373 * t1528;
t989 = pkin(2) * t1143 - t1124 * t1377 + t1373 * t1529;
t987 = t1377 * t1217 + t1373 * t1474;
t986 = -t1067 * t1372 + t1099 * t1376;
t985 = -t1066 * t1372 + t1098 * t1376;
t977 = -t1374 * t1119 + t1378 * t1472;
t976 = -t1053 * t1382 + t1104 * t1386;
t975 = t1053 * t1386 + t1104 * t1382;
t970 = -t1047 * t1382 + t1097 * t1386;
t969 = t1047 * t1386 + t1097 * t1382;
t966 = -t1051 * t1372 + t1089 * t1376;
t965 = -t1050 * t1372 + t1088 * t1376;
t963 = pkin(2) * t1129 + t1373 * t1408;
t961 = t1377 * t1130 + t1373 * t1475;
t951 = -t1008 * t1382 + t1073 * t1386;
t950 = t1008 * t1386 + t1073 * t1382;
t948 = pkin(2) * t1006 + t1055 * t1627;
t939 = t1377 * t1108 + t1373 * t1478;
t938 = t1377 * t1106 + t1373 * t1479;
t937 = -t1374 * t1065 + t1378 * t1476;
t936 = -t1374 * t1064 + t1378 * t1477;
t923 = t1013 * t1376 - t1372 * t988;
t920 = -t1374 * t1049 + t1378 * t1480;
t919 = -t1374 * t1048 + t1378 * t1481;
t909 = -t1374 * t1043 + t1378 * t1482;
t908 = t1378 * t1043 + t1374 * t1482;
t899 = t1003 * t1376 - t1372 * t962;
t893 = t1377 * t1092 + t1373 * t1484;
t892 = t1377 * t1091 + t1373 * t1485;
t891 = -t1374 * t1016 + t1378 * t1483;
t890 = t1378 * t1016 + t1374 * t1483;
t887 = -t1374 * t1005 + t1378 * t1486;
t886 = t1378 * t1005 + t1374 * t1486;
t867 = -t1372 * t941 + t1376 * t968;
t866 = -t1372 * t940 + t1376 * t967;
t864 = t1377 * t1025 + t1373 * t1494;
t862 = -t1374 * t987 + t1378 * t1488;
t858 = -t1374 * t983 + t1378 * t1487;
t857 = t1374 * t1487 + t1378 * t983;
t856 = t1042 * t1376 - t1372 * t996 + (-t1052 * t1374 - t1053 * t1378) * qJ(2);
t854 = t1039 * t1376 - t1372 * t990 + (-t1046 * t1374 - t1047 * t1378) * qJ(2);
t851 = -t1382 * t909 + t1386 * t960;
t850 = t1382 * t960 + t1386 * t909;
t848 = t1377 * t1040 + t1373 * t1496;
t847 = -t1374 * t961 + t1378 * t1489;
t840 = -t1382 * t891 + t1386 * t949;
t839 = t1382 * t949 + t1386 * t891;
t838 = -pkin(1) * t1052 - t1374 * t995 + t1378 * t1405;
t835 = -pkin(1) * t1046 - t1374 * t989 + t1378 * t1406;
t834 = -t1372 * t895 + t1376 * t929;
t833 = -t1372 * t894 + t1376 * t928;
t832 = -t1382 * t887 + t1386 * t946;
t831 = t1382 * t946 + t1386 * t887;
t829 = pkin(2) * t1044 + t1373 * t1409 + t1377 * t953;
t826 = -t1372 * t964 + t1376 * t957 + (-t1007 * t1374 - t1008 * t1378) * qJ(2);
t823 = -t1374 * t939 + t1378 * t1508;
t822 = -t1374 * t938 + t1378 * t1509;
t819 = pkin(2) * t1017 + t1373 * t1410 + t1377 * t952;
t814 = -t1372 * t865 + t1376 * t910;
t811 = -t1382 * t858 + t1386 * t911;
t810 = t1382 * t911 + t1386 * t858;
t807 = t1373 * t1497 + t1377 * t972;
t806 = t1373 * t1498 + t1377 * t971;
t803 = -pkin(1) * t1007 - t1374 * t963 + t1378 * t1407;
t794 = -t1372 * t849 + t1376 * t879;
t789 = -t1374 * t893 + t1378 * t1510;
t788 = -t1374 * t892 + t1378 * t1511;
t784 = t1373 * t1500 + t1377 * t933;
t783 = t1373 * t1501 + t1377 * t932;
t782 = -t1374 * t888 + t1378 * t1512;
t781 = t1374 * t1512 + t1378 * t888;
t780 = -t1374 * t880 + t1378 * t1513;
t779 = t1374 * t1513 + t1378 * t880;
t770 = -t1374 * t864 + t1378 * t1514;
t767 = pkin(2) * t984 + t1101 * t1630 + t1373 * t1424;
t766 = -t1374 * t860 + t1378 * t1515;
t765 = t1374 * t1515 + t1378 * t860;
t764 = -t1372 * t947 + t1376 * t927 + (-t1374 * t886 - t1378 * t887) * qJ(2);
t763 = -t1372 * t809 + t1376 * t837;
t762 = -t1372 * t808 + t1376 * t836;
t761 = -pkin(1) * t886 - t1374 * t948 + t1378 * t1411;
t759 = t1373 * t1504 + t1377 * t917;
t757 = -t1374 * t848 + t1378 * t1516;
t750 = -t1382 * t782 + t1386 * t825;
t749 = t1382 * t825 + t1386 * t782;
t747 = -t1372 * t830 + t1376 * t859 + (-t1374 * t908 - t1378 * t909) * qJ(2);
t744 = -t1382 * t780 + t1386 * t821;
t743 = t1382 * t821 + t1386 * t780;
t742 = -t1372 * t786 + t1376 * t813;
t741 = -t1372 * t785 + t1376 * t812;
t737 = -t1372 * t820 + t1376 * t852 + (-t1374 * t890 - t1378 * t891) * qJ(2);
t735 = -t1382 * t766 + t1386 * t804;
t734 = t1382 * t804 + t1386 * t766;
t732 = -t1374 * t815 + t1378 * t1517;
t731 = t1374 * t1517 + t1378 * t815;
t730 = -t1374 * t807 + t1378 * t1518;
t729 = -t1374 * t806 + t1378 * t1519;
t725 = -pkin(1) * t908 - t1374 * t829 + t1378 * t1412;
t720 = -pkin(1) * t890 - t1374 * t819 + t1378 * t1413;
t719 = -t1372 * t760 + t1376 * t775;
t717 = pkin(2) * t816 + t1373 * t1403 + t1630 * t896;
t713 = -t1374 * t784 + t1378 * t1520;
t712 = -t1374 * t783 + t1378 * t1521;
t709 = pkin(2) * t889 + t1373 * t1426 + t1377 * t855;
t708 = -t1374 * t776 + t1378 * t1522;
t707 = t1374 * t1522 + t1378 * t776;
t705 = pkin(2) * t881 + t1373 * t1427 + t1377 * t853;
t701 = -t1374 * t773 + t1378 * t1523;
t700 = t1374 * t1523 + t1378 * t773;
t697 = -t1372 * t768 + t1376 * t771 + (-t1374 * t857 - t1378 * t858) * qJ(2);
t693 = -t1382 * t732 + t1386 * t758;
t692 = t1382 * t758 + t1386 * t732;
t690 = -t1374 * t759 + t1378 * t1524;
t689 = -t1374 * t755 + t1378 * t1525;
t688 = t1374 * t1525 + t1378 * t755;
t686 = pkin(2) * t861 + t1373 * t1428 + t1377 * t787;
t684 = -pkin(1) * t857 - t1374 * t767 + t1378 * t1414;
t682 = -t1382 * t708 + t1386 * t738;
t681 = t1382 * t738 + t1386 * t708;
t679 = -t1382 * t701 + t1386 * t736;
t678 = t1382 * t736 + t1386 * t701;
t676 = -t1374 * t721 + t1378 * t1526;
t675 = t1374 * t1526 + t1378 * t721;
t674 = -t1382 * t689 + t1386 * t714;
t673 = t1382 * t714 + t1386 * t689;
t671 = -t1372 * t710 + t1376 * t716 + (-t1374 * t781 - t1378 * t782) * qJ(2);
t670 = -t1372 * t706 + t1376 * t715 + (-t1374 * t779 - t1378 * t780) * qJ(2);
t665 = -t1372 * t718 + t1376 * t727 + (-t1374 * t731 - t1378 * t732) * qJ(2);
t663 = -t1372 * t687 + t1376 * t699 + (-t1374 * t765 - t1378 * t766) * qJ(2);
t661 = -pkin(1) * t781 - t1374 * t709 + t1378 * t1416;
t660 = -pkin(1) * t779 - t1374 * t705 + t1378 * t1417;
t658 = pkin(2) * t777 + t1373 * t1430 + t1377 * t726;
t657 = -t1382 * t676 + t1386 * t685;
t656 = t1382 * t685 + t1386 * t676;
t655 = -pkin(1) * t731 - t1374 * t717 + t1378 * t1415;
t653 = pkin(2) * t774 + t1373 * t1431 + t1377 * t723;
t651 = pkin(2) * t722 + t1373 * t1429 + t1377 * t746;
t648 = -pkin(1) * t765 - t1374 * t686 + t1378 * t1418;
t644 = pkin(2) * t756 + t1373 * t1432 + t1377 * t703;
t643 = -t1374 * t667 + t1378 * t1527;
t642 = t1374 * t1527 + t1378 * t667;
t641 = -t1372 * t659 + t1376 * t669 + (-t1374 * t707 - t1378 * t708) * qJ(2);
t640 = -t1372 * t654 + t1376 * t666 + (-t1374 * t700 - t1378 * t701) * qJ(2);
t639 = -t1372 * t652 + t1376 * t662 + (-t1374 * t675 - t1378 * t676) * qJ(2);
t638 = -pkin(1) * t707 - t1374 * t658 + t1378 * t1419;
t637 = -pkin(1) * t700 - t1374 * t653 + t1378 * t1420;
t636 = -t1372 * t645 + t1376 * t649 + (-t1374 * t688 - t1378 * t689) * qJ(2);
t635 = -t1382 * t643 + t1386 * t646;
t634 = t1382 * t646 + t1386 * t643;
t633 = -pkin(1) * t675 - t1374 * t651 + t1378 * t1421;
t630 = pkin(2) * t668 + t1373 * t1433 + t1377 * t664;
t629 = -pkin(1) * t688 - t1374 * t644 + t1378 * t1422;
t628 = -t1372 * t631 + t1376 * t632 + (-t1374 * t642 - t1378 * t643) * qJ(2);
t627 = -pkin(1) * t642 - t1374 * t630 + t1378 * t1423;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1355, -t1356, 0, t1318, 0, 0, 0, 0, 0, 0, t1246, t1247, t1241, t1148, 0, 0, 0, 0, 0, 0, t970, t976, t951, t832, 0, 0, 0, 0, 0, 0, t840, t851, t811, t693, 0, 0, 0, 0, 0, 0, t744, t750, t735, t657, 0, 0, 0, 0, 0, 0, t679, t682, t674, t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1356, -t1355, 0, t1317, 0, 0, 0, 0, 0, 0, t1244, t1245, t1240, t1147, 0, 0, 0, 0, 0, 0, t969, t975, t950, t831, 0, 0, 0, 0, 0, 0, t839, t850, t810, t692, 0, 0, 0, 0, 0, 0, t743, t749, t734, t656, 0, 0, 0, 0, 0, 0, t678, t681, t673, t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1288, t1289, t1282, t1214, 0, 0, 0, 0, 0, 0, t1046, t1052, t1007, t886, 0, 0, 0, 0, 0, 0, t890, t908, t857, t731, 0, 0, 0, 0, 0, 0, t779, t781, t765, t675, 0, 0, 0, 0, 0, 0, t700, t707, t688, t642; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1356, 0, -t1355, 0, t1532, -t1342, -t1317, -pkin(8) * t1317, -t1310 * t1382 + t1326 * t1386, -t1284 * t1382 + t1300 * t1386, -t1292 * t1382 + t1307 * t1386, -t1309 * t1382 + t1325 * t1386, -t1290 * t1382 + t1305 * t1386, t1327 * t1386 + t1382 * t1542, -pkin(8) * t1244 - t1192 * t1382 + t1212 * t1386, -pkin(8) * t1245 - t1191 * t1382 + t1213 * t1386, -pkin(8) * t1240 + t1162 * t1386 - t1170 * t1382, -pkin(8) * t1147 + t1139 * t1386 - t1149 * t1382, -t1087 * t1382 + t1138 * t1386, -t1022 * t1382 + t1081 * t1386, -t1057 * t1382 + t1116 * t1386, -t1086 * t1382 + t1137 * t1386, -t1058 * t1382 + t1117 * t1386, -t1121 * t1382 + t1169 * t1386, -pkin(8) * t969 - t1382 * t835 + t1386 * t854, -pkin(8) * t975 - t1382 * t838 + t1386 * t856, -pkin(8) * t950 - t1382 * t803 + t1386 * t826, -pkin(8) * t831 - t1382 * t761 + t1386 * t764, -t1382 * t937 + t1386 * t986, -t1382 * t862 + t1386 * t923, -t1382 * t919 + t1386 * t965, -t1382 * t936 + t1386 * t985, -t1382 * t920 + t1386 * t966, t1045 * t1386 - t1382 * t977, -pkin(8) * t839 - t1382 * t720 + t1386 * t737, -pkin(8) * t850 - t1382 * t725 + t1386 * t747, -pkin(8) * t810 - t1382 * t684 + t1386 * t697, -pkin(8) * t692 - t1382 * t655 + t1386 * t665, -t1382 * t823 + t1386 * t867, -t1382 * t770 + t1386 * t814, -t1382 * t788 + t1386 * t833, -t1382 * t822 + t1386 * t866, -t1382 * t789 + t1386 * t834, -t1382 * t847 + t1386 * t899, -pkin(8) * t743 - t1382 * t660 + t1386 * t670, -pkin(8) * t749 - t1382 * t661 + t1386 * t671, -pkin(8) * t734 - t1382 * t648 + t1386 * t663, -pkin(8) * t656 - t1382 * t633 + t1386 * t639, -t1382 * t730 + t1386 * t763, -t1382 * t690 + t1386 * t719, -t1382 * t712 + t1386 * t741, -t1382 * t729 + t1386 * t762, -t1382 * t713 + t1386 * t742, -t1382 * t757 + t1386 * t794, -pkin(8) * t678 - t1382 * t637 + t1386 * t640, -pkin(8) * t681 - t1382 * t638 + t1386 * t641, -pkin(8) * t673 - t1382 * t629 + t1386 * t636, -pkin(8) * t634 - t1382 * t627 + t1386 * t628; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1355, 0, t1356, 0, t1342, t1532, t1318, pkin(8) * t1318, t1310 * t1386 + t1326 * t1382, t1284 * t1386 + t1300 * t1382, t1292 * t1386 + t1307 * t1382, t1309 * t1386 + t1325 * t1382, t1290 * t1386 + t1305 * t1382, t1327 * t1382 - t1386 * t1542, pkin(8) * t1246 + t1192 * t1386 + t1212 * t1382, pkin(8) * t1247 + t1191 * t1386 + t1213 * t1382, pkin(8) * t1241 + t1162 * t1382 + t1170 * t1386, pkin(8) * t1148 + t1139 * t1382 + t1149 * t1386, t1087 * t1386 + t1138 * t1382, t1022 * t1386 + t1081 * t1382, t1057 * t1386 + t1116 * t1382, t1086 * t1386 + t1137 * t1382, t1058 * t1386 + t1117 * t1382, t1121 * t1386 + t1169 * t1382, pkin(8) * t970 + t1382 * t854 + t1386 * t835, pkin(8) * t976 + t1382 * t856 + t1386 * t838, pkin(8) * t951 + t1382 * t826 + t1386 * t803, pkin(8) * t832 + t1382 * t764 + t1386 * t761, t1382 * t986 + t1386 * t937, t1382 * t923 + t1386 * t862, t1382 * t965 + t1386 * t919, t1382 * t985 + t1386 * t936, t1382 * t966 + t1386 * t920, t1045 * t1382 + t1386 * t977, pkin(8) * t840 + t1382 * t737 + t1386 * t720, pkin(8) * t851 + t1382 * t747 + t1386 * t725, pkin(8) * t811 + t1382 * t697 + t1386 * t684, pkin(8) * t693 + t1382 * t665 + t1386 * t655, t1382 * t867 + t1386 * t823, t1382 * t814 + t1386 * t770, t1382 * t833 + t1386 * t788, t1382 * t866 + t1386 * t822, t1382 * t834 + t1386 * t789, t1382 * t899 + t1386 * t847, pkin(8) * t744 + t1382 * t670 + t1386 * t660, pkin(8) * t750 + t1382 * t671 + t1386 * t661, pkin(8) * t735 + t1382 * t663 + t1386 * t648, pkin(8) * t657 + t1382 * t639 + t1386 * t633, t1382 * t763 + t1386 * t730, t1382 * t719 + t1386 * t690, t1382 * t741 + t1386 * t712, t1382 * t762 + t1386 * t729, t1382 * t742 + t1386 * t713, t1382 * t794 + t1386 * t757, pkin(8) * t679 + t1382 * t640 + t1386 * t637, pkin(8) * t682 + t1382 * t641 + t1386 * t638, pkin(8) * t674 + t1382 * t636 + t1386 * t629, pkin(8) * t635 + t1382 * t628 + t1386 * t627; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1359, t1360, 0, 0, t1366 * t1566, t1378 * t1340 + t1374 * t1447, t1378 * t1334 + t1374 * t1445, t1369 * t1566, t1378 * t1335 + t1374 * t1442, t1370 * qJDD(1), pkin(1) * t1291 - t1294 * t1378 + t1374 * t1492, pkin(1) * t1293 - t1295 * t1378 + t1374 * t1491, pkin(1) * t1283 + t1374 * t1404, pkin(1) * t1215 + t1232 * t1624, t1378 * t1189 + t1374 * t1457, t1378 * t1140 + t1374 * t1468, t1378 * t1155 + t1374 * t1464, t1378 * t1187 + t1374 * t1458, t1378 * t1156 + t1374 * t1463, t1378 * t1227 + t1374 * t1455, pkin(1) * t1047 + t1374 * t1406 + t1378 * t989, pkin(1) * t1053 + t1374 * t1405 + t1378 * t995, pkin(1) * t1008 + t1374 * t1407 + t1378 * t963, pkin(1) * t887 + t1374 * t1411 + t1378 * t948, t1378 * t1065 + t1374 * t1476, t1374 * t1488 + t1378 * t987, t1378 * t1048 + t1374 * t1481, t1378 * t1064 + t1374 * t1477, t1378 * t1049 + t1374 * t1480, t1378 * t1119 + t1374 * t1472, pkin(1) * t891 + t1374 * t1413 + t1378 * t819, pkin(1) * t909 + t1374 * t1412 + t1378 * t829, pkin(1) * t858 + t1374 * t1414 + t1378 * t767, pkin(1) * t732 + t1374 * t1415 + t1378 * t717, t1374 * t1508 + t1378 * t939, t1374 * t1514 + t1378 * t864, t1374 * t1511 + t1378 * t892, t1374 * t1509 + t1378 * t938, t1374 * t1510 + t1378 * t893, t1374 * t1489 + t1378 * t961, pkin(1) * t780 + t1374 * t1417 + t1378 * t705, pkin(1) * t782 + t1374 * t1416 + t1378 * t709, pkin(1) * t766 + t1374 * t1418 + t1378 * t686, pkin(1) * t676 + t1374 * t1421 + t1378 * t651, t1374 * t1518 + t1378 * t807, t1374 * t1524 + t1378 * t759, t1374 * t1521 + t1378 * t783, t1374 * t1519 + t1378 * t806, t1374 * t1520 + t1378 * t784, t1374 * t1516 + t1378 * t848, pkin(1) * t701 + t1374 * t1420 + t1378 * t653, pkin(1) * t708 + t1374 * t1419 + t1378 * t658, pkin(1) * t689 + t1374 * t1422 + t1378 * t644, pkin(1) * t643 + t1374 * t1423 + t1378 * t630;];
tauB_reg  = t1;
