% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 19:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRPRR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:43:58
% EndTime: 2019-05-05 19:44:22
% DurationCPUTime: 24.95s
% Computational Cost: add. (285386->411), mult. (954753->681), div. (0->0), fcn. (827569->16), ass. (0->370)
t3062 = sin(pkin(6));
t3075 = qJD(1) ^ 2;
t3143 = t3062 * t3075;
t3061 = sin(pkin(7));
t3065 = cos(pkin(7));
t3064 = cos(pkin(12));
t3138 = qJDD(1) * t3062;
t3129 = t3064 * t3138;
t3066 = cos(pkin(6));
t3137 = qJDD(1) * t3066;
t3173 = t3061 * t3137 + t3065 * t3129;
t3127 = t3061 * t3129 - t3065 * t3137 - qJDD(3);
t3069 = sin(qJ(3));
t3073 = cos(qJ(3));
t3144 = t3062 * t3065;
t3134 = t3064 * t3144;
t3060 = sin(pkin(12));
t3148 = t3060 * t3062;
t3136 = qJD(1) * t3148;
t3146 = t3061 * t3073;
t3158 = qJD(1) * t3066;
t3006 = -qJD(1) * t3073 * t3134 + t3069 * t3136 - t3146 * t3158;
t3142 = t3065 * t3069;
t3147 = t3061 * t3069;
t3008 = (t3066 * t3147 + (t3060 * t3073 + t3064 * t3142) * t3062) * qJD(1);
t3152 = t3006 * t3008;
t2974 = -t3127 - t3152;
t3059 = sin(pkin(13));
t3063 = cos(pkin(13));
t2983 = -t3006 * t3059 + t3008 * t3063;
t3145 = t3062 * t3064;
t3135 = qJD(1) * t3145;
t3021 = t3061 * t3135 - t3065 * t3158 - qJD(3);
t3068 = sin(qJ(5));
t3072 = cos(qJ(5));
t2968 = t2983 * t3068 + t3072 * t3021;
t2966 = qJD(6) + t2968;
t3172 = qJD(6) + t2966;
t3131 = t3060 * t3138;
t3080 = t3069 * t3131 - t3073 * t3173;
t2990 = -qJD(3) * t3008 - t3080;
t2991 = -t3006 * qJD(3) + t3069 * t3173 + t3073 * t3131;
t2951 = t3059 * t2990 + t3063 * t2991;
t2981 = t3063 * t3006 + t3008 * t3059;
t3154 = t2981 * t3021;
t2932 = t2951 + t3154;
t2970 = t2983 * t3072 - t3021 * t3068;
t2979 = qJD(5) + t2981;
t3067 = sin(qJ(6));
t3071 = cos(qJ(6));
t2937 = t2970 * t3067 - t3071 * t2979;
t3171 = t2937 ^ 2;
t2939 = t2970 * t3071 + t2979 * t3067;
t3170 = t2939 ^ 2;
t3169 = t2966 ^ 2;
t3168 = t2968 ^ 2;
t3167 = t2970 ^ 2;
t3166 = t2979 ^ 2;
t3165 = t2981 ^ 2;
t3164 = t2983 ^ 2;
t3005 = t3006 ^ 2;
t3163 = t3008 ^ 2;
t3162 = t3021 ^ 2;
t3161 = -2 * qJD(4);
t3160 = pkin(9) * t3060;
t3159 = pkin(9) * qJDD(1);
t3157 = t2937 * t2939;
t3156 = t2968 * t2970;
t3155 = t2981 * t2983;
t3153 = t2983 * t3021;
t3151 = t3006 * t3021;
t3070 = sin(qJ(1));
t3074 = cos(qJ(1));
t3050 = t3070 * g(1) - g(2) * t3074;
t3027 = qJDD(1) * pkin(1) + qJ(2) * t3143 + t3050;
t3150 = t3027 * t3066;
t3056 = t3062 ^ 2;
t3149 = t3056 * t3075;
t3141 = qJD(5) - t2979;
t3140 = qJD(6) - t2966;
t3020 = (t3061 * t3066 + t3134) * qJD(1) * pkin(9);
t3051 = -g(1) * t3074 - g(2) * t3070;
t3028 = -pkin(1) * t3075 + qJ(2) * t3138 + t3051;
t3082 = -pkin(2) * t3064 - t3061 * t3160;
t3081 = t3065 * t3159 + t3082 * t3143;
t3083 = -g(3) * t3145 - 0.2e1 * qJD(2) * t3136 + t3064 * t3150;
t2955 = (qJDD(1) * pkin(2) + qJD(1) * t3020) * t3066 + (-t3062 * t3081 - t3028) * t3060 + t3083;
t3029 = (pkin(2) * t3066 - t3144 * t3160) * qJD(1);
t3132 = 0.2e1 * qJD(2) * t3135 + t3064 * t3028 + t3060 * t3150;
t2956 = (-qJD(1) * t3029 + t3061 * t3159) * t3066 + (-g(3) * t3060 + t3064 * t3081) * t3062 + t3132;
t3126 = -t3066 * g(3) + qJDD(2);
t2971 = (-t3027 + t3082 * qJDD(1) + (-t3020 * t3064 + t3029 * t3060) * qJD(1)) * t3062 + t3126;
t2911 = t2955 * t3142 + t3073 * t2956 + t2971 * t3147;
t2998 = -pkin(3) * t3021 - qJ(4) * t3008;
t2897 = -pkin(3) * t3005 + qJ(4) * t2990 + t2998 * t3021 + t2911;
t2910 = t3065 * t3073 * t2955 - t3069 * t2956 + t2971 * t3146;
t2961 = -t2991 + t3151;
t3077 = pkin(3) * t2974 + t2961 * qJ(4) + t2910;
t2850 = t3063 * t2897 + t2981 * t3161 + t3059 * t3077;
t2948 = pkin(4) * t2981 - pkin(10) * t2983;
t2847 = -pkin(4) * t3162 - pkin(10) * t3127 - t2948 * t2981 + t2850;
t2934 = -t3061 * t2955 + t3065 * t2971;
t2908 = -t2990 * pkin(3) - t3005 * qJ(4) + t3008 * t2998 + qJDD(4) + t2934;
t3139 = -t3063 * t2990 + t3059 * t2991;
t2930 = t3139 - t3153;
t3076 = t2930 * pkin(4) - pkin(10) * t2932 + t2908;
t2828 = t3072 * t2847 + t3068 * t3076;
t3133 = t3066 * t3143;
t3128 = qJDD(5) + t3139;
t2827 = -t2847 * t3068 + t3072 * t3076;
t3125 = t3059 * t2897 - t3063 * t3077;
t3091 = -t3072 * t2951 + t3068 * t3127;
t2927 = -qJD(5) * t2968 - t3091;
t3124 = -t3067 * t2927 + t3071 * t3128;
t3123 = t2979 * t2968 - t2927;
t3122 = t3068 * t2951 + t3072 * t3127;
t2936 = pkin(5) * t2968 - pkin(11) * t2970;
t2815 = -pkin(5) * t3166 + pkin(11) * t3128 - t2968 * t2936 + t2828;
t2846 = t3127 * pkin(4) - t3162 * pkin(10) + ((2 * qJD(4)) + t2948) * t2983 + t3125;
t2904 = (qJD(5) + t2979) * t2970 + t3122;
t2829 = pkin(5) * t2904 + pkin(11) * t3123 + t2846;
t2797 = -t2815 * t3067 + t2829 * t3071;
t2798 = t2815 * t3071 + t2829 * t3067;
t2775 = -t2797 * t3067 + t2798 * t3071;
t2814 = -pkin(5) * t3128 - pkin(11) * t3166 + t2936 * t2970 - t2827;
t2771 = t2775 * t3068 - t2814 * t3072;
t2772 = t2775 * t3072 + t2814 * t3068;
t2774 = t2797 * t3071 + t2798 * t3067;
t2758 = t2772 * t3059 - t2774 * t3063;
t2759 = t2772 * t3063 + t2774 * t3059;
t3119 = t2758 * t3073 + t2759 * t3069;
t2751 = -t3061 * t2771 + t3065 * t3119;
t2752 = -t2758 * t3069 + t2759 * t3073;
t3120 = t2751 * t3064 + t2752 * t3060;
t2802 = t2827 * t3072 + t2828 * t3068;
t2803 = -t2827 * t3068 + t2828 * t3072;
t2790 = t2803 * t3059 - t2846 * t3063;
t2791 = t2803 * t3063 + t2846 * t3059;
t3114 = t2790 * t3073 + t2791 * t3069;
t2766 = -t3061 * t2802 + t3065 * t3114;
t2773 = -t2790 * t3069 + t2791 * t3073;
t3118 = t2766 * t3064 + t2773 * t3060;
t2875 = -t2939 * t3140 + t3124;
t3078 = -t3071 * t2927 - t3067 * t3128;
t2877 = t2937 * t3140 + t3078;
t2842 = t2875 * t3071 - t2877 * t3067;
t2898 = -t3170 - t3171;
t2830 = t2842 * t3068 - t2898 * t3072;
t2831 = t2842 * t3072 + t2898 * t3068;
t2841 = t2875 * t3067 + t2877 * t3071;
t2804 = t2831 * t3059 - t2841 * t3063;
t2805 = t2831 * t3063 + t2841 * t3059;
t3112 = t2804 * t3073 + t2805 * t3069;
t2777 = -t3061 * t2830 + t3065 * t3112;
t2781 = -t2804 * t3069 + t2805 * t3073;
t3117 = t2777 * t3064 + t2781 * t3060;
t3079 = -qJD(5) * t2970 - qJDD(6) - t3122;
t2886 = -t3079 - t3157;
t2903 = -t3169 - t3171;
t2856 = -t2886 * t3067 + t2903 * t3071;
t2874 = t2939 * t3172 - t3124;
t2837 = t2856 * t3068 - t2874 * t3072;
t2838 = t2856 * t3072 + t2874 * t3068;
t2855 = t2886 * t3071 + t2903 * t3067;
t2810 = t2838 * t3059 - t2855 * t3063;
t2811 = t2838 * t3063 + t2855 * t3059;
t3110 = t2810 * t3073 + t2811 * t3069;
t2783 = -t3061 * t2837 + t3065 * t3110;
t2792 = -t2810 * t3069 + t2811 * t3073;
t3116 = t2783 * t3064 + t2792 * t3060;
t2887 = t3079 - t3157;
t2909 = -t3169 - t3170;
t2862 = t2887 * t3071 - t2909 * t3067;
t2876 = -t2937 * t3172 - t3078;
t2839 = t2862 * t3068 - t2876 * t3072;
t2840 = t2862 * t3072 + t2876 * t3068;
t2861 = t2887 * t3067 + t2909 * t3071;
t2812 = t2840 * t3059 - t2861 * t3063;
t2813 = t2840 * t3063 + t2861 * t3059;
t3109 = t2812 * t3073 + t2813 * t3069;
t2785 = -t3061 * t2839 + t3065 * t3109;
t2793 = -t2812 * t3069 + t2813 * t3073;
t3115 = t2785 * t3064 + t2793 * t3060;
t2849 = t2983 * t3161 - t3125;
t2824 = t2849 * t3063 + t2850 * t3059;
t2825 = -t2849 * t3059 + t2850 * t3063;
t3106 = t2824 * t3073 + t2825 * t3069;
t2796 = -t3061 * t2908 + t3065 * t3106;
t2800 = -t2824 * t3069 + t2825 * t3073;
t3113 = t2796 * t3064 + t2800 * t3060;
t2905 = -t2970 * t3141 - t3122;
t2907 = t2968 * t3141 + t3091;
t2872 = t2905 * t3068 + t2907 * t3072;
t2873 = t2905 * t3072 - t2907 * t3068;
t2920 = -t3167 - t3168;
t2851 = t2873 * t3059 - t2920 * t3063;
t2852 = t2873 * t3063 + t2920 * t3059;
t3105 = t2851 * t3073 + t2852 * t3069;
t2809 = -t3061 * t2872 + t3065 * t3105;
t2826 = -t2851 * t3069 + t2852 * t3073;
t3111 = t2809 * t3064 + t2826 * t3060;
t2914 = t3128 - t3156;
t2926 = -t3166 - t3168;
t2888 = t2914 * t3072 + t2926 * t3068;
t2889 = -t2914 * t3068 + t2926 * t3072;
t2857 = t2889 * t3059 - t2904 * t3063;
t2858 = t2889 * t3063 + t2904 * t3059;
t3103 = t2857 * t3073 + t2858 * t3069;
t2817 = -t3061 * t2888 + t3065 * t3103;
t2835 = -t2857 * t3069 + t2858 * t3073;
t3108 = t2817 * t3064 + t2835 * t3060;
t2915 = -t3128 - t3156;
t2928 = -t3166 - t3167;
t2891 = t2915 * t3068 + t2928 * t3072;
t2892 = t2915 * t3072 - t2928 * t3068;
t2859 = t2892 * t3059 + t3063 * t3123;
t2860 = t2892 * t3063 - t3059 * t3123;
t3102 = t2859 * t3073 + t2860 * t3069;
t2821 = -t3061 * t2891 + t3065 * t3102;
t2836 = -t2859 * t3069 + t2860 * t3073;
t3107 = t2821 * t3064 + t2836 * t3060;
t2935 = -t3164 - t3165;
t2931 = -t3139 - t3153;
t2933 = -t2951 + t3154;
t2900 = t2931 * t3059 + t2933 * t3063;
t2901 = t2931 * t3063 - t2933 * t3059;
t3098 = t2900 * t3073 + t2901 * t3069;
t2854 = -t3061 * t2935 + t3065 * t3098;
t2867 = -t2900 * t3069 + t2901 * t3073;
t3104 = t2854 * t3064 + t2867 * t3060;
t3097 = t2910 * t3073 + t2911 * t3069;
t2864 = -t3061 * t2934 + t3065 * t3097;
t2884 = -t2910 * t3069 + t2911 * t3073;
t3101 = t2864 * t3064 + t2884 * t3060;
t2942 = -t3162 - t3165;
t2944 = -t3127 - t3155;
t2916 = t2942 * t3059 + t2944 * t3063;
t2917 = t2942 * t3063 - t2944 * t3059;
t3095 = t2916 * t3073 + t2917 * t3069;
t2869 = -t3061 * t2930 + t3065 * t3095;
t2885 = -t2916 * t3069 + t2917 * t3073;
t3100 = t2869 * t3064 + t2885 * t3060;
t2943 = t3127 - t3155;
t2962 = -t3162 - t3164;
t2923 = t2943 * t3059 + t2962 * t3063;
t2924 = t2943 * t3063 - t2962 * t3059;
t3092 = t2923 * t3073 + t2924 * t3069;
t2879 = -t3061 * t2932 + t3065 * t3092;
t2895 = -t2923 * t3069 + t2924 * t3073;
t3099 = t2879 * t3064 + t2895 * t3060;
t2967 = -t3005 - t3163;
t2959 = (-qJD(3) - t3021) * t3008 - t3080;
t3090 = t2959 * t3069 + t2961 * t3073;
t2913 = -t3061 * t2967 + t3065 * t3090;
t2929 = t2959 * t3073 - t2961 * t3069;
t3096 = t2913 * t3064 + t2929 * t3060;
t2958 = (qJD(3) - t3021) * t3008 + t3080;
t2972 = -t3162 - t3005;
t3089 = t2972 * t3069 + t2974 * t3073;
t2919 = -t3061 * t2958 + t3065 * t3089;
t2940 = t2972 * t3073 - t2974 * t3069;
t3094 = t2919 * t3064 + t2940 * t3060;
t2960 = t2991 + t3151;
t2973 = t3127 - t3152;
t2980 = -t3162 - t3163;
t3088 = t2973 * t3069 + t2980 * t3073;
t2922 = -t3061 * t2960 + t3065 * t3088;
t2945 = t2973 * t3073 - t2980 * t3069;
t3093 = t2922 * t3064 + t2945 * t3060;
t2996 = -t3060 * t3028 + t3083;
t2997 = -g(3) * t3148 + t3132;
t3087 = t2996 * t3064 + t2997 * t3060;
t3041 = t3064 * t3133;
t3024 = t3041 - t3131;
t3040 = t3060 * t3133;
t3025 = t3040 + t3129;
t3086 = t3024 * t3064 + t3025 * t3060;
t3039 = t3064 * t3060 * t3149;
t3030 = t3039 + t3137;
t3057 = t3064 ^ 2;
t3058 = t3066 ^ 2;
t3034 = (-t3056 * t3057 - t3058) * t3075;
t3085 = t3030 * t3064 + t3034 * t3060;
t3031 = t3039 - t3137;
t3055 = t3060 ^ 2;
t3033 = (-t3055 * t3056 - t3058) * t3075;
t3084 = t3031 * t3060 + t3033 * t3064;
t3047 = -qJDD(1) * t3070 - t3074 * t3075;
t3046 = qJDD(1) * t3074 - t3070 * t3075;
t3032 = (-t3055 - t3057) * t3149;
t3026 = t3040 - t3129;
t3023 = t3041 + t3131;
t3009 = -t3062 * t3027 + t3126;
t3003 = t3031 * t3064 - t3033 * t3060;
t3002 = -t3030 * t3060 + t3034 * t3064;
t2999 = -t3024 * t3060 + t3025 * t3064;
t2995 = -t3062 * t3023 + t3066 * t3084;
t2994 = -t3062 * t3026 + t3066 * t3085;
t2993 = t3066 * t3023 + t3062 * t3084;
t2992 = t3066 * t3026 + t3062 * t3085;
t2989 = -t3062 * t3032 + t3066 * t3086;
t2988 = t3066 * t3032 + t3062 * t3086;
t2957 = -t2996 * t3060 + t2997 * t3064;
t2947 = -t3062 * t3009 + t3066 * t3087;
t2946 = t3066 * t3009 + t3062 * t3087;
t2921 = t3065 * t2960 + t3061 * t3088;
t2918 = t3065 * t2958 + t3061 * t3089;
t2912 = t3065 * t2967 + t3061 * t3090;
t2902 = -t2922 * t3060 + t2945 * t3064;
t2899 = -t2919 * t3060 + t2940 * t3064;
t2890 = -t2913 * t3060 + t2929 * t3064;
t2883 = -t3062 * t2921 + t3066 * t3093;
t2882 = t3066 * t2921 + t3062 * t3093;
t2881 = -t3062 * t2918 + t3066 * t3094;
t2880 = t3066 * t2918 + t3062 * t3094;
t2878 = t3065 * t2932 + t3061 * t3092;
t2868 = t3065 * t2930 + t3061 * t3095;
t2866 = -t3062 * t2912 + t3066 * t3096;
t2865 = t3066 * t2912 + t3062 * t3096;
t2863 = t3065 * t2934 + t3061 * t3097;
t2853 = t3065 * t2935 + t3061 * t3098;
t2848 = -t2879 * t3060 + t2895 * t3064;
t2844 = -t2869 * t3060 + t2885 * t3064;
t2843 = -t2864 * t3060 + t2884 * t3064;
t2834 = -t2854 * t3060 + t2867 * t3064;
t2833 = -t3062 * t2878 + t3066 * t3099;
t2832 = t3066 * t2878 + t3062 * t3099;
t2823 = -t3062 * t2868 + t3066 * t3100;
t2822 = t3066 * t2868 + t3062 * t3100;
t2820 = t3065 * t2891 + t3061 * t3102;
t2819 = -t3062 * t2863 + t3066 * t3101;
t2818 = t3066 * t2863 + t3062 * t3101;
t2816 = t3065 * t2888 + t3061 * t3103;
t2808 = t3065 * t2872 + t3061 * t3105;
t2807 = -t3062 * t2853 + t3066 * t3104;
t2806 = t3066 * t2853 + t3062 * t3104;
t2801 = -t2821 * t3060 + t2836 * t3064;
t2799 = -t2817 * t3060 + t2835 * t3064;
t2795 = t3065 * t2908 + t3061 * t3106;
t2794 = -t2809 * t3060 + t2826 * t3064;
t2789 = -t3062 * t2820 + t3066 * t3107;
t2788 = t3066 * t2820 + t3062 * t3107;
t2787 = -t3062 * t2816 + t3066 * t3108;
t2786 = t3066 * t2816 + t3062 * t3108;
t2784 = t3065 * t2839 + t3061 * t3109;
t2782 = t3065 * t2837 + t3061 * t3110;
t2780 = -t3062 * t2808 + t3066 * t3111;
t2779 = t3066 * t2808 + t3062 * t3111;
t2778 = -t2796 * t3060 + t2800 * t3064;
t2776 = t3065 * t2830 + t3061 * t3112;
t2770 = -t2785 * t3060 + t2793 * t3064;
t2769 = -t2783 * t3060 + t2792 * t3064;
t2768 = -t3062 * t2795 + t3066 * t3113;
t2767 = t3066 * t2795 + t3062 * t3113;
t2765 = t3065 * t2802 + t3061 * t3114;
t2764 = -t2777 * t3060 + t2781 * t3064;
t2763 = -t3062 * t2784 + t3066 * t3115;
t2762 = t3066 * t2784 + t3062 * t3115;
t2761 = -t3062 * t2782 + t3066 * t3116;
t2760 = t3066 * t2782 + t3062 * t3116;
t2757 = -t3062 * t2776 + t3066 * t3117;
t2756 = t3066 * t2776 + t3062 * t3117;
t2755 = -t2766 * t3060 + t2773 * t3064;
t2754 = -t3062 * t2765 + t3066 * t3118;
t2753 = t3066 * t2765 + t3062 * t3118;
t2750 = t3065 * t2771 + t3061 * t3119;
t2749 = -t2751 * t3060 + t2752 * t3064;
t2748 = -t3062 * t2750 + t3066 * t3120;
t2747 = t3066 * t2750 + t3062 * t3120;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3047, -t3046, 0, -t3050 * t3070 + t3051 * t3074, 0, 0, 0, 0, 0, 0, -t2994 * t3070 + t3002 * t3074, -t2995 * t3070 + t3003 * t3074, -t2989 * t3070 + t2999 * t3074, -t2947 * t3070 + t2957 * t3074, 0, 0, 0, 0, 0, 0, -t2881 * t3070 + t2899 * t3074, -t2883 * t3070 + t2902 * t3074, -t2866 * t3070 + t2890 * t3074, -t2819 * t3070 + t2843 * t3074, 0, 0, 0, 0, 0, 0, -t2823 * t3070 + t2844 * t3074, -t2833 * t3070 + t2848 * t3074, -t2807 * t3070 + t2834 * t3074, -t2768 * t3070 + t2778 * t3074, 0, 0, 0, 0, 0, 0, -t2787 * t3070 + t2799 * t3074, -t2789 * t3070 + t2801 * t3074, -t2780 * t3070 + t2794 * t3074, -t2754 * t3070 + t2755 * t3074, 0, 0, 0, 0, 0, 0, -t2761 * t3070 + t2769 * t3074, -t2763 * t3070 + t2770 * t3074, -t2757 * t3070 + t2764 * t3074, -t2748 * t3070 + t2749 * t3074; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3046, t3047, 0, t3050 * t3074 + t3051 * t3070, 0, 0, 0, 0, 0, 0, t2994 * t3074 + t3002 * t3070, t2995 * t3074 + t3003 * t3070, t2989 * t3074 + t2999 * t3070, t2947 * t3074 + t2957 * t3070, 0, 0, 0, 0, 0, 0, t2881 * t3074 + t2899 * t3070, t2883 * t3074 + t2902 * t3070, t2866 * t3074 + t2890 * t3070, t2819 * t3074 + t2843 * t3070, 0, 0, 0, 0, 0, 0, t2823 * t3074 + t2844 * t3070, t2833 * t3074 + t2848 * t3070, t2807 * t3074 + t2834 * t3070, t2768 * t3074 + t2778 * t3070, 0, 0, 0, 0, 0, 0, t2787 * t3074 + t2799 * t3070, t2789 * t3074 + t2801 * t3070, t2780 * t3074 + t2794 * t3070, t2754 * t3074 + t2755 * t3070, 0, 0, 0, 0, 0, 0, t2761 * t3074 + t2769 * t3070, t2763 * t3074 + t2770 * t3070, t2757 * t3074 + t2764 * t3070, t2748 * t3074 + t2749 * t3070; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2992, t2993, t2988, t2946, 0, 0, 0, 0, 0, 0, t2880, t2882, t2865, t2818, 0, 0, 0, 0, 0, 0, t2822, t2832, t2806, t2767, 0, 0, 0, 0, 0, 0, t2786, t2788, t2779, t2753, 0, 0, 0, 0, 0, 0, t2760, t2762, t2756, t2747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3075, -qJDD(1), 0, t3051, 0, 0, 0, 0, 0, 0, t3002, t3003, t2999, t2957, 0, 0, 0, 0, 0, 0, t2899, t2902, t2890, t2843, 0, 0, 0, 0, 0, 0, t2844, t2848, t2834, t2778, 0, 0, 0, 0, 0, 0, t2799, t2801, t2794, t2755, 0, 0, 0, 0, 0, 0, t2769, t2770, t2764, t2749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3075, 0, t3050, 0, 0, 0, 0, 0, 0, t2994, t2995, t2989, t2947, 0, 0, 0, 0, 0, 0, t2881, t2883, t2866, t2819, 0, 0, 0, 0, 0, 0, t2823, t2833, t2807, t2768, 0, 0, 0, 0, 0, 0, t2787, t2789, t2780, t2754, 0, 0, 0, 0, 0, 0, t2761, t2763, t2757, t2748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2992, t2993, t2988, t2946, 0, 0, 0, 0, 0, 0, t2880, t2882, t2865, t2818, 0, 0, 0, 0, 0, 0, t2822, t2832, t2806, t2767, 0, 0, 0, 0, 0, 0, t2786, t2788, t2779, t2753, 0, 0, 0, 0, 0, 0, t2760, t2762, t2756, t2747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3034, t3031, t3025, t2997, 0, 0, 0, 0, 0, 0, t2940, t2945, t2929, t2884, 0, 0, 0, 0, 0, 0, t2885, t2895, t2867, t2800, 0, 0, 0, 0, 0, 0, t2835, t2836, t2826, t2773, 0, 0, 0, 0, 0, 0, t2792, t2793, t2781, t2752; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3030, t3033, t3024, t2996, 0, 0, 0, 0, 0, 0, t2919, t2922, t2913, t2864, 0, 0, 0, 0, 0, 0, t2869, t2879, t2854, t2796, 0, 0, 0, 0, 0, 0, t2817, t2821, t2809, t2766, 0, 0, 0, 0, 0, 0, t2783, t2785, t2777, t2751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3026, t3023, t3032, t3009, 0, 0, 0, 0, 0, 0, t2918, t2921, t2912, t2863, 0, 0, 0, 0, 0, 0, t2868, t2878, t2853, t2795, 0, 0, 0, 0, 0, 0, t2816, t2820, t2808, t2765, 0, 0, 0, 0, 0, 0, t2782, t2784, t2776, t2750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2972, t2973, t2959, t2911, 0, 0, 0, 0, 0, 0, t2917, t2924, t2901, t2825, 0, 0, 0, 0, 0, 0, t2858, t2860, t2852, t2791, 0, 0, 0, 0, 0, 0, t2811, t2813, t2805, t2759; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2974, t2980, t2961, t2910, 0, 0, 0, 0, 0, 0, t2916, t2923, t2900, t2824, 0, 0, 0, 0, 0, 0, t2857, t2859, t2851, t2790, 0, 0, 0, 0, 0, 0, t2810, t2812, t2804, t2758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2958, t2960, t2967, t2934, 0, 0, 0, 0, 0, 0, t2930, t2932, t2935, t2908, 0, 0, 0, 0, 0, 0, t2888, t2891, t2872, t2802, 0, 0, 0, 0, 0, 0, t2837, t2839, t2830, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2942, t2943, t2931, t2850, 0, 0, 0, 0, 0, 0, t2889, t2892, t2873, t2803, 0, 0, 0, 0, 0, 0, t2838, t2840, t2831, t2772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2944, t2962, t2933, t2849, 0, 0, 0, 0, 0, 0, -t2904, t3123, -t2920, -t2846, 0, 0, 0, 0, 0, 0, -t2855, -t2861, -t2841, -t2774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2930, t2932, t2935, t2908, 0, 0, 0, 0, 0, 0, t2888, t2891, t2872, t2802, 0, 0, 0, 0, 0, 0, t2837, t2839, t2830, t2771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2926, t2915, t2905, t2828, 0, 0, 0, 0, 0, 0, t2856, t2862, t2842, t2775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2914, t2928, t2907, t2827, 0, 0, 0, 0, 0, 0, -t2874, -t2876, -t2898, -t2814; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2904, -t3123, t2920, t2846, 0, 0, 0, 0, 0, 0, t2855, t2861, t2841, t2774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2903, t2887, t2875, t2798; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2886, t2909, t2877, t2797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2874, t2876, t2898, t2814;];
f_new_reg  = t1;
