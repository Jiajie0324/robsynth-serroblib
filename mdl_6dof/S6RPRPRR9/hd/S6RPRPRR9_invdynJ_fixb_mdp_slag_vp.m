% Calculate vector of inverse dynamics joint torques for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRPRR9_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRPRR9_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR9_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RPRPRR9_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:05:32
% EndTime: 2019-03-09 04:05:51
% DurationCPUTime: 13.82s
% Computational Cost: add. (17733->705), mult. (59638->982), div. (0->0), fcn. (53102->16), ass. (0->314)
t742 = sin(pkin(6));
t746 = cos(pkin(6));
t741 = sin(pkin(7));
t753 = cos(qJ(3));
t883 = t741 * t753;
t837 = t746 * t883;
t744 = cos(pkin(12));
t745 = cos(pkin(7));
t876 = t745 * t753;
t839 = t744 * t876;
t928 = t742 * t839 + t837;
t739 = sin(pkin(13));
t743 = cos(pkin(13));
t749 = sin(qJ(3));
t788 = t739 * t753 + t743 * t749;
t680 = t788 * t741;
t682 = t788 * t745;
t740 = sin(pkin(12));
t750 = sin(qJ(1));
t754 = cos(qJ(1));
t873 = t746 * t754;
t688 = t740 * t750 - t744 * t873;
t689 = t740 * t873 + t744 * t750;
t871 = t753 * t743;
t699 = t739 * t749 - t871;
t880 = t742 * t754;
t586 = t680 * t880 + t682 * t688 + t689 * t699;
t654 = -t688 * t741 + t745 * t880;
t748 = sin(qJ(5));
t752 = cos(qJ(5));
t570 = t586 * t752 + t654 * t748;
t747 = sin(qJ(6));
t751 = cos(qJ(6));
t884 = t741 * t749;
t679 = t739 * t884 - t741 * t871;
t681 = t699 * t745;
t780 = t679 * t880 + t681 * t688 - t689 * t788;
t927 = t570 * t747 - t751 * t780;
t926 = t570 * t751 + t747 * t780;
t859 = qJD(1) * t742;
t833 = t744 * t859;
t706 = t741 * t833;
t858 = qJD(1) * t746;
t803 = t745 * t858 - t706;
t786 = qJD(3) + t803;
t877 = t745 * t749;
t651 = t742 * (t740 * t753 + t744 * t877) + t746 * t884;
t644 = t651 * qJD(1);
t834 = t740 * t859;
t919 = qJD(1) * t928 - t749 * t834;
t790 = t743 * t644 + t739 * t919;
t577 = t748 * t786 + t752 * t790;
t896 = t577 * t747;
t817 = -t644 * t739 + t743 * t919;
t920 = t817 - qJD(5);
t538 = t751 * t920 + t896;
t925 = t538 * t920;
t673 = t752 * t786;
t575 = t748 * t790 - t673;
t924 = t575 * t920;
t923 = t748 * t920;
t770 = t742 * (-t740 * t876 - t744 * t749);
t669 = qJD(1) * t770;
t878 = t744 * t753;
t670 = (-t740 * t877 + t878) * t859;
t922 = t699 * t741 * qJD(3) + t669 * t739 + t670 * t743;
t844 = qJDD(1) * t744;
t826 = t742 * t844;
t843 = qJDD(1) * t746;
t921 = t741 * t843 + t745 * t826;
t574 = qJD(6) + t575;
t918 = t586 * t748 - t654 * t752;
t737 = t742 ^ 2;
t917 = t737 * (t740 ^ 2 + t744 ^ 2);
t875 = t746 * t745;
t882 = t742 * t744;
t687 = t741 * t882 - t875;
t908 = pkin(1) * t746;
t693 = qJ(2) * t882 + t740 * t908;
t781 = t741 * t746 + t745 * t882;
t771 = t781 * pkin(9);
t647 = t771 + t693;
t728 = t744 * t908;
t886 = t740 * t742;
t766 = pkin(2) * t746 + (-pkin(9) * t745 - qJ(2)) * t886;
t652 = t728 + t766;
t887 = t740 * t741;
t674 = (-pkin(2) * t744 - pkin(9) * t887 - pkin(1)) * t742;
t804 = -t647 * t749 + t652 * t876 + t674 * t883;
t564 = -pkin(3) * t687 - qJ(4) * t651 + t804;
t885 = t740 * t749;
t650 = t742 * t885 - t928;
t635 = t753 * t647;
t835 = t652 * t877 + t674 * t884 + t635;
t567 = -qJ(4) * t650 + t835;
t517 = t739 * t564 + t743 * t567;
t515 = -pkin(10) * t687 + t517;
t609 = t743 * t650 + t651 * t739;
t610 = -t650 * t739 + t651 * t743;
t614 = -t652 * t741 + t745 * t674;
t787 = pkin(3) * t650 + t614;
t526 = pkin(4) * t609 - pkin(10) * t610 + t787;
t914 = t752 * t515 + t748 * t526;
t678 = t687 * t752;
t578 = t610 * t748 + t678;
t643 = t651 * qJD(3);
t845 = qJDD(1) * t742;
t828 = t740 * t845;
t605 = qJD(3) * t919 + t749 * t921 + t753 * t828;
t773 = t749 * t828 - t753 * t921;
t606 = qJD(1) * t643 + t773;
t562 = -t605 * t739 - t743 * t606;
t559 = qJDD(5) - t562;
t842 = pkin(1) * t858;
t684 = qJ(2) * t833 + t740 * t842;
t628 = qJD(1) * t771 + t684;
t721 = t744 * t842;
t636 = qJD(1) * t766 + t721;
t662 = qJD(1) * t674 + qJD(2);
t862 = t636 * t876 + t662 * t883;
t805 = -t749 * t628 + t862;
t560 = -t644 * qJ(4) + t805;
t542 = pkin(3) * t786 + t560;
t762 = -t749 * (t636 * t745 + t662 * t741) - t628 * t753;
t561 = qJ(4) * t919 - t762;
t879 = t743 * t561;
t509 = t739 * t542 + t879;
t507 = pkin(10) * t786 + t509;
t608 = -t636 * t741 + t745 * t662;
t573 = -pkin(3) * t919 + qJD(4) + t608;
t523 = -pkin(4) * t817 - pkin(10) * t790 + t573;
t485 = t507 * t752 + t523 * t748;
t677 = t741 * t826 - t745 * t843 - qJDD(3);
t846 = qJD(1) * qJD(2);
t829 = t742 * t846;
t713 = t744 * t829;
t841 = pkin(1) * t843;
t664 = qJ(2) * t826 + t740 * t841 + t713;
t624 = qJDD(1) * t771 + t664;
t719 = t744 * t841;
t810 = t740 * t829;
t625 = qJDD(1) * t766 + t719 - t810;
t657 = qJDD(1) * t674 + qJDD(2);
t806 = -t749 * t624 + t625 * t876 + t657 * t883;
t757 = qJD(3) * t762 + t806;
t502 = -pkin(3) * t677 - qJ(4) * t605 - qJD(4) * t644 + t757;
t855 = qJD(3) * t753;
t830 = t745 * t855;
t831 = t741 * t855;
t800 = -t753 * t624 - t625 * t877 - t636 * t830 - t657 * t884 - t662 * t831;
t856 = qJD(3) * t749;
t764 = -t628 * t856 - t800;
t505 = -qJ(4) * t606 + qJD(4) * t919 + t764;
t478 = t739 * t502 + t743 * t505;
t476 = -pkin(10) * t677 + t478;
t591 = -t625 * t741 + t745 * t657;
t556 = pkin(3) * t606 + qJDD(4) + t591;
t563 = t605 * t743 - t606 * t739;
t495 = -pkin(4) * t562 - pkin(10) * t563 + t556;
t820 = t476 * t748 - t752 * t495;
t909 = qJD(5) * t485 + t820;
t467 = -pkin(5) * t559 + t909;
t874 = t746 * t750;
t690 = -t740 * t754 - t744 * t874;
t881 = t742 * t750;
t656 = -t690 * t741 + t745 * t881;
t691 = -t740 * t874 + t744 * t754;
t765 = t680 * t881 + t682 * t690 - t691 * t699;
t571 = t656 * t752 - t748 * t765;
t761 = t680 * t746 + (t682 * t744 - t699 * t740) * t742;
t775 = g(1) * t571 + g(2) * t918 + g(3) * (-t748 * t761 - t678);
t912 = t574 * (pkin(5) * t577 + pkin(11) * t574) + t467 + t775;
t511 = t560 * t739 + t879;
t818 = t748 * t563 + t752 * t677;
t521 = qJD(5) * t577 + t818;
t519 = qJDD(6) + t521;
t733 = -pkin(3) * t743 - pkin(4);
t695 = -pkin(5) * t752 - pkin(11) * t748 + t733;
t911 = t574 * (t511 + t920 * (pkin(5) * t748 - pkin(11) * t752)) - t695 * t519;
t840 = t741 * t880;
t784 = t688 * t745 + t840;
t910 = t689 * t749 + t753 * t784;
t907 = g(1) * t750;
t906 = pkin(9) + qJ(4);
t905 = pkin(1) * qJDD(1);
t852 = qJD(5) * t748;
t520 = qJD(5) * t673 + t752 * t563 - t748 * t677 - t790 * t852;
t849 = qJD(6) * t751;
t836 = t751 * t520 + t747 * t559 - t849 * t920;
t850 = qJD(6) * t747;
t482 = -t577 * t850 + t836;
t904 = t482 * t747;
t903 = t519 * t747;
t902 = t519 * t751;
t901 = t538 * t574;
t540 = t577 * t751 - t747 * t920;
t900 = t540 * t574;
t899 = t540 * t817;
t898 = t575 * t790;
t897 = t577 * t790;
t895 = t817 * t752;
t892 = t687 * t748;
t732 = pkin(3) * t739 + pkin(10);
t889 = t732 * t747;
t888 = t732 * t751;
t553 = t739 * t561;
t755 = qJD(1) ^ 2;
t872 = t746 * t755;
t512 = t560 * t743 - t553;
t537 = pkin(3) * t644 + pkin(4) * t790 - pkin(10) * t817;
t869 = t752 * t512 + t748 * t537;
t867 = t752 * t559 - t817 * t923;
t658 = t680 * t748 - t745 * t752;
t813 = t741 * t834;
t866 = qJD(5) * t658 + t748 * t813 + t752 * t922;
t865 = -qJD(3) * t680 - t743 * t669 + t670 * t739;
t659 = t680 * t752 + t745 * t748;
t863 = qJD(5) * t659 - t748 * t922 + t752 * t813;
t861 = t754 * pkin(1) + qJ(2) * t881;
t857 = qJD(2) * t742;
t854 = qJD(5) * t574;
t853 = qJD(5) * t732;
t851 = qJD(5) * t752;
t848 = t677 * MDP(12);
t832 = t740 * t857;
t825 = -pkin(1) * t750 + qJ(2) * t880;
t705 = t741 * t832;
t824 = pkin(3) * t643 + t705;
t823 = g(2) * t880 - g(3) * t746;
t778 = t752 * t476 + t748 * t495 - t507 * t852 + t523 * t851;
t466 = pkin(11) * t559 + t778;
t477 = t502 * t743 - t739 * t505;
t475 = pkin(4) * t677 - t477;
t469 = pkin(5) * t521 - pkin(11) * t520 + t475;
t821 = -t747 * t466 + t751 * t469;
t819 = t520 * t747 - t751 * t559;
t759 = t652 * t830 + t674 * t831 + t857 * t878 + (-qJD(3) * t647 - t745 * t832) * t749;
t533 = -qJ(4) * t643 - qJD(4) * t650 + t759;
t642 = (t837 + (t839 - t885) * t742) * qJD(3);
t756 = qJD(2) * t770 + (-t635 + (-t652 * t745 - t674 * t741) * t749) * qJD(3);
t534 = -qJ(4) * t642 - qJD(4) * t651 + t756;
t499 = t533 * t739 - t743 * t534;
t508 = t743 * t542 - t553;
t516 = t564 * t743 - t739 * t567;
t816 = t574 * t751;
t815 = t920 * t752;
t807 = g(1) * t754 + g(2) * t750;
t802 = -qJD(6) * t679 + t866;
t801 = qJD(6) * t659 + t865;
t798 = t751 * t466 + t747 * t469;
t481 = -pkin(11) * t920 + t485;
t506 = -pkin(4) * t786 - t508;
t490 = t575 * pkin(5) - t577 * pkin(11) + t506;
t471 = t481 * t751 + t490 * t747;
t797 = t481 * t747 - t490 * t751;
t487 = pkin(11) * t609 + t914;
t514 = pkin(4) * t687 - t516;
t579 = t610 * t752 - t892;
t491 = pkin(5) * t578 - pkin(11) * t579 + t514;
t796 = t487 * t751 + t491 * t747;
t795 = -t487 * t747 + t491 * t751;
t500 = t533 * t743 + t534 * t739;
t597 = t642 * t739 + t743 * t643;
t600 = t642 * t743 - t643 * t739;
t531 = pkin(4) * t597 - pkin(10) * t600 + t824;
t794 = -t500 * t748 + t531 * t752;
t484 = -t507 * t748 + t523 * t752;
t792 = -t515 * t748 + t526 * t752;
t546 = t579 * t751 + t609 * t747;
t545 = t579 * t747 - t751 * t609;
t789 = (-qJ(2) * t834 + t721) * t740 - t684 * t744;
t722 = -pkin(1) * t845 + qJDD(2);
t785 = -t722 * t742 + t737 * t905;
t783 = t690 * t745 + t741 * t881;
t779 = -t574 * t849 - t903;
t777 = t752 * t500 - t515 * t852 + t526 * t851 + t748 * t531;
t776 = -t506 * t920 - t732 * t559;
t588 = -t679 * t881 - t681 * t690 - t691 * t788;
t612 = -t679 * t746 + (-t681 * t744 - t740 * t788) * t742;
t774 = g(1) * t588 + g(2) * t780 + g(3) * t612;
t772 = t688 * t877 - t689 * t753 + t749 * t840;
t768 = -t475 - t774;
t548 = t747 * t790 + t751 * t895;
t767 = -t748 * t850 + t751 * t851 - t548;
t480 = pkin(5) * t920 - t484;
t763 = -pkin(11) * t519 + (t480 + t484) * t574;
t760 = qJD(6) * t574 * t732 + t774;
t758 = -g(1) * t765 + g(2) * t586 - g(3) * t761 + (pkin(11) * t790 - qJD(6) * t695 + t869) * t574;
t734 = pkin(3) * t753 + pkin(2);
t692 = -qJ(2) * t886 + t728;
t686 = pkin(3) * t877 - t741 * t906;
t685 = pkin(3) * t884 + t745 * t906;
t663 = t719 + (-qJ(2) * qJDD(1) - t846) * t886;
t620 = t691 * t753 + t749 * t783;
t619 = -t691 * t749 + t753 * t783;
t581 = t752 * t761 - t892;
t572 = t656 * t748 + t752 * t765;
t547 = t747 * t895 - t751 * t790;
t544 = qJD(5) * t579 + t600 * t748;
t543 = -qJD(5) * t578 + t600 * t752;
t536 = t540 * t852;
t528 = t572 * t751 - t588 * t747;
t527 = -t572 * t747 - t588 * t751;
t497 = qJD(6) * t546 + t543 * t747 - t751 * t597;
t496 = -qJD(6) * t545 + t543 * t751 + t597 * t747;
t488 = -pkin(5) * t790 + t512 * t748 - t537 * t752;
t486 = -pkin(5) * t609 - t792;
t483 = qJD(6) * t540 + t819;
t479 = pkin(5) * t544 - pkin(11) * t543 + t499;
t473 = -pkin(5) * t597 + qJD(5) * t914 - t794;
t472 = pkin(11) * t597 + t777;
t465 = -qJD(6) * t471 + t821;
t464 = -t797 * qJD(6) + t798;
t1 = [t687 * t848 + (t846 * t917 + (-t663 * t740 + t664 * t744 + (-t692 * t740 + t693 * t744) * qJDD(1) - t807) * t742) * MDP(6) + (-t605 * t650 - t606 * t651 + t642 * t919 - t643 * t644) * MDP(9) + (-g(1) * t772 - g(2) * t620 + t591 * t650 + t614 * t606 + t608 * t643 - t677 * t804 - t687 * t757 - t705 * t919 + t756 * t786) * MDP(13) + (t559 * t609 - t597 * t920) * MDP(21) + (-t521 * t609 + t544 * t920 - t559 * t578 - t575 * t597) * MDP(20) + (t520 * t609 - t543 * t920 + t559 * t579 + t577 * t597) * MDP(19) + (-t794 * t920 + t792 * t559 - t820 * t609 + t484 * t597 + t499 * t575 + t514 * t521 + t475 * t578 + t506 * t544 - g(1) * t570 - g(2) * t572 + (-t485 * t609 + t914 * t920) * qJD(5)) * MDP(22) + (g(1) * t918 - g(2) * t571 + t475 * t579 - t485 * t597 + t499 * t577 + t506 * t543 + t514 * t520 - t914 * t559 - t778 * t609 + t777 * t920) * MDP(23) + (-g(1) * t654 - g(2) * t656 - t477 * t610 - t478 * t609 + t499 * t790 + t500 * t817 - t508 * t600 - t509 * t597 - t516 * t563 + t517 * t562) * MDP(15) + (t519 * t578 + t544 * t574) * MDP(28) + (-t483 * t578 - t497 * t574 - t519 * t545 - t538 * t544) * MDP(27) + (t482 * t578 + t496 * t574 + t519 * t546 + t540 * t544) * MDP(26) + (-t520 * t578 - t521 * t579 - t543 * t575 - t544 * t577) * MDP(18) + (t520 * t579 + t543 * t577) * MDP(17) + t807 * MDP(3) + (-g(2) * t754 + t907) * MDP(2) + ((-qJD(6) * t796 - t472 * t747 + t479 * t751) * t574 + t795 * t519 + t465 * t578 - t797 * t544 + t473 * t538 + t486 * t483 + t467 * t545 + t480 * t497 - g(1) * t926 - g(2) * t528) * MDP(29) + (-(qJD(6) * t795 + t472 * t751 + t479 * t747) * t574 - t796 * t519 - t464 * t578 - t471 * t544 + t473 * t540 + t486 * t482 + t467 * t546 + t480 * t496 + g(1) * t927 - g(2) * t527) * MDP(30) + (t478 * t517 + t509 * t500 + t477 * t516 - t508 * t499 + t556 * t787 + t573 * t824 - g(1) * (t685 * t880 + t686 * t688 - t689 * t734 + t825) - g(2) * (t685 * t881 + t686 * t690 + t691 * t734 + t861)) * MDP(16) + (t605 * t651 + t642 * t644) * MDP(8) + (-g(1) * t910 - g(2) * t619 + t591 * t651 + t614 * t605 + t608 * t642 + t644 * t705 + t835 * t677 + t764 * t687 - t759 * t786) * MDP(14) + (-t482 * t545 - t483 * t546 - t496 * t538 - t497 * t540) * MDP(25) + (t482 * t546 + t496 * t540) * MDP(24) + (g(1) * t689 - g(2) * t691 + t785 * t744 + (qJDD(1) * t692 + t663 - t810) * t746) * MDP(4) + (-g(1) * t688 - g(2) * t690 - t785 * t740 + (-qJDD(1) * t693 - t664 - t713) * t746) * MDP(5) + (t664 * t693 + t663 * t692 - g(1) * t825 - g(2) * t861 + (-t722 * pkin(1) - qJD(2) * t789) * t742) * MDP(7) + qJDD(1) * MDP(1) + (-t605 * t687 + t642 * t786 - t651 * t677) * MDP(10) + (t606 * t687 - t643 * t786 + t650 * t677) * MDP(11); -t755 * MDP(6) * t917 + (qJDD(2) + t823) * MDP(7) + (t745 * t606 - t669 * t786 + (-t753 * t677 - t786 * t856 + t834 * t919) * t741) * MDP(13) + (t745 * t605 + t670 * t786 + (-t644 * t834 + t749 * t677 - t786 * t855) * t741) * MDP(14) + (t562 * t680 + t563 * t679 - t790 * t865 - t817 * t922) * MDP(15) + (-t477 * t679 + t478 * t680 + t865 * t508 - t509 * t922 + t556 * t745 + t823) * MDP(16) + (t521 * t679 - t559 * t658 - t575 * t865 + t863 * t920) * MDP(22) + (t520 * t679 - t559 * t659 - t577 * t865 - t866 * t920) * MDP(23) + ((-t659 * t747 + t679 * t751) * t519 + t658 * t483 + (t747 * t802 - t751 * t801) * t574 + t863 * t538) * MDP(29) + (-(t659 * t751 + t679 * t747) * t519 + t658 * t482 + (t747 * t801 + t751 * t802) * t574 + t863 * t540) * MDP(30) + ((t740 * t872 - t844) * MDP(4) + (qJDD(1) * t740 + t744 * t872) * MDP(5) + (qJD(1) * t789 - t905 - t907) * MDP(7) + (-qJD(1) * t573 * t887 - t907) * MDP(16)) * t742; -t644 * t919 * MDP(8) + (t644 ^ 2 - t919 ^ 2) * MDP(9) + (-t786 * t919 + t605) * MDP(10) + (t644 * (qJD(3) - t706) + (t644 * t875 - t643) * qJD(1) - t773) * MDP(11) - t848 + (-g(1) * t619 + g(2) * t910 + g(3) * t650 - t608 * t644 - t762 * t803 + t806) * MDP(13) + (g(1) * t620 - g(2) * t772 + g(3) * t651 + qJD(3) * t862 - t608 * t919 + t803 * t805 + t800) * MDP(14) + ((t562 * t739 - t563 * t743) * pkin(3) + (t508 - t512) * t817 + (t509 - t511) * t790) * MDP(15) + (t508 * t511 - t509 * t512 + (t477 * t743 + t478 * t739 - t573 * t644 + (g(1) * t691 + g(2) * t689 + g(3) * t886) * t749 + (-g(1) * t783 + g(2) * t784 - g(3) * t781) * t753) * pkin(3)) * MDP(16) + (t520 * t748 - t577 * t815) * MDP(17) + ((t520 + t924) * t752 + (t577 * t920 - t521) * t748) * MDP(18) + (t559 * t748 + t815 * t920 - t897) * MDP(19) + (t852 * t920 + t867 + t898) * MDP(20) + t920 * t790 * MDP(21) + (-t484 * t790 - t511 * t575 + t733 * t521 + (-t512 * t920 + t776) * t748 + (-(-t537 - t853) * t920 + t768) * t752) * MDP(22) + (t733 * t520 - t869 * t920 + t485 * t790 - t511 * t577 + t776 * t752 + (-t853 * t920 - t768) * t748) * MDP(23) + (t482 * t748 * t751 + t540 * t767) * MDP(24) + (t538 * t548 + t540 * t547 + (-t538 * t751 - t540 * t747) * t851 + (-t904 - t483 * t751 + (t538 * t747 - t540 * t751) * qJD(6)) * t748) * MDP(25) + (-t482 * t752 + t536 + (-t899 + t902) * t748 + t767 * t574) * MDP(26) + (t483 * t752 + (-t747 * t851 + t547) * t574 + (t779 + t925) * t748) * MDP(27) + (-t519 * t752 - t574 * t923) * MDP(28) + (-t480 * t547 - t488 * t538 - t911 * t751 + t758 * t747 + (-t519 * t889 - t465 + (t480 * t747 + t538 * t732) * qJD(5) - t760 * t751) * t752 + (t480 * t849 + t467 * t747 + t797 * t817 + t732 * t483 + (t574 * t889 - t797) * qJD(5)) * t748) * MDP(29) + (-t480 * t548 - t488 * t540 + t911 * t747 + t758 * t751 + (-t519 * t888 + t464 + (t480 * t751 + t540 * t732) * qJD(5) + t760 * t747) * t752 + (-t480 * t850 + t467 * t751 + t471 * t817 + t732 * t482 + (t574 * t888 - t471) * qJD(5)) * t748) * MDP(30); (-t790 ^ 2 - t817 ^ 2) * MDP(15) + (-g(1) * t656 + g(2) * t654 + g(3) * t687 + t508 * t790 - t509 * t817 + t556) * MDP(16) + (t867 - t898) * MDP(22) - MDP(23) * t897 + t547 * t574 * MDP(29) + (t548 * t574 + t536) * MDP(30) + ((-t747 * t854 - t483) * MDP(29) + (-t751 * t854 - t482) * MDP(30) - t920 ^ 2 * MDP(23)) * t752 + (qJD(5) * t920 * MDP(22) - t559 * MDP(23) + (t779 - t925) * MDP(29) + (t574 * t850 - t899 - t902) * MDP(30)) * t748; -t575 ^ 2 * MDP(18) + (t520 - t924) * MDP(19) - t818 * MDP(20) + t559 * MDP(21) + (-t485 * t920 - t775 - t909) * MDP(22) + (g(1) * t572 - g(2) * t570 + g(3) * t581 - t484 * t920 + t506 * t575 - t778) * MDP(23) + (t540 * t816 + t904) * MDP(24) + ((t482 - t901) * t751 + (-t483 - t900) * t747) * MDP(25) + (t574 * t816 + t903) * MDP(26) + (-t574 ^ 2 * t747 + t902) * MDP(27) + (-pkin(5) * t483 - t485 * t538 + t763 * t747 - t751 * t912) * MDP(29) + (-pkin(5) * t482 - t485 * t540 + t747 * t912 + t763 * t751) * MDP(30) + (t575 * MDP(17) + (-qJD(5) - t920) * MDP(20) - t506 * MDP(22) - t540 * MDP(26) + t538 * MDP(27) - t574 * MDP(28) + t797 * MDP(29) + t471 * MDP(30) + t577 * MDP(18)) * t577; t540 * t538 * MDP(24) + (-t538 ^ 2 + t540 ^ 2) * MDP(25) + (t836 + t901) * MDP(26) + (-t819 + t900) * MDP(27) + t519 * MDP(28) + (t471 * t574 - t480 * t540 - g(1) * t527 - g(2) * t927 - g(3) * (-t581 * t747 - t612 * t751) + t821) * MDP(29) + (-t797 * t574 + t480 * t538 + g(1) * t528 - g(2) * t926 - g(3) * (-t581 * t751 + t612 * t747) - t798) * MDP(30) + (-MDP(26) * t896 - MDP(27) * t540 - MDP(29) * t471 + MDP(30) * t797) * qJD(6);];
tau  = t1;
