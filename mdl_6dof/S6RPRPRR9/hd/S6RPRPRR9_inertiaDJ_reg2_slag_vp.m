% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRR9_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_inertiaDJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:05:12
% EndTime: 2019-03-09 04:05:31
% DurationCPUTime: 8.08s
% Computational Cost: add. (18851->415), mult. (55941->758), div. (0->0), fcn. (60624->14), ass. (0->211)
t244 = cos(pkin(6));
t206 = pkin(1) * t244;
t99 = cos(pkin(12));
t155 = pkin(2) * t244 + t206 * t99;
t243 = cos(pkin(7));
t97 = sin(pkin(12));
t98 = sin(pkin(6));
t137 = (-pkin(9) * t243 - qJ(2)) * t98 * t97 + t155;
t241 = sin(pkin(7));
t277 = -pkin(2) * t99 - pkin(1);
t154 = t98 * (-pkin(9) * t241 * t97 + t277);
t284 = t137 * t243 + t154 * t241;
t103 = cos(qJ(5));
t101 = sin(qJ(5));
t240 = sin(pkin(13));
t183 = t241 * t240;
t242 = cos(pkin(13));
t185 = t242 * t241;
t262 = sin(qJ(3));
t263 = cos(qJ(3));
t71 = t183 * t263 + t185 * t262;
t160 = -t101 * t71 + t103 * t243;
t281 = qJD(5) * t160;
t70 = t183 * t262 - t185 * t263;
t67 = t70 * qJD(3);
t148 = t103 * t67 - t281;
t229 = qJD(5) * t103;
t63 = t101 * t243 + t103 * t71;
t54 = qJD(5) * t63 - t101 * t67;
t167 = t54 * t101 - t160 * t229;
t231 = qJD(5) * t101;
t283 = -t103 * t148 - t231 * t63 + t167;
t198 = t99 * t243;
t282 = t198 * t262 + t263 * t97;
t184 = t241 * t244;
t158 = t262 * t184;
t238 = qJD(3) * t98;
t222 = qJD(3) * t158 + t238 * t282;
t159 = t263 * t184;
t174 = t263 * t198;
t216 = t262 * t97;
t265 = -qJD(3) * (t174 * t98 + t159) + t216 * t238;
t127 = t222 * t242 - t240 * t265;
t131 = t282 * t98 + t158;
t133 = (t174 - t216) * t98 + t159;
t123 = t131 * t240 - t133 * t242;
t269 = qJD(5) * t123;
t272 = t101 * t127 + t103 * t269;
t199 = t98 * t241;
t161 = t199 * t99 - t243 * t244;
t46 = -t222 * t240 - t242 * t265;
t152 = -qJD(5) * t161 + t46;
t117 = t131 * t242 + t133 * t240;
t116 = t101 * t117;
t48 = qJD(5) * t116;
t266 = -t103 * t152 + t48;
t43 = -t101 * t161 + t103 * t117;
t280 = -t103 * t266 - t231 * t43;
t279 = -0.4e1 * t101;
t278 = 0.2e1 * t161;
t41 = -pkin(3) * t133 - t137 * t241 + t154 * t243;
t110 = -pkin(4) * t123 + pkin(10) * t117 - t41;
t239 = qJD(2) * t98;
t177 = t97 * t243 * t239;
t221 = t99 * t239;
t252 = qJ(2) * t98;
t130 = t97 * t206 + t99 * t252 + (t198 * t98 + t184) * pkin(9);
t39 = t263 * t130 + t262 * t284;
t37 = -qJD(3) * t39 - t263 * t177 - t262 * t221;
t112 = qJ(4) * t265 - qJD(4) * t131 + t37;
t267 = t262 * t130 - t263 * t284;
t36 = qJD(3) * t267 + t262 * t177 - t263 * t221;
t113 = -qJ(4) * t222 + qJD(4) * t133 - t36;
t19 = t112 * t240 + t113 * t242;
t276 = qJD(5) * t110 - t19;
t102 = cos(qJ(6));
t100 = sin(qJ(6));
t228 = qJD(6) * t100;
t233 = t43 * qJD(5);
t29 = t101 * t46 + t233;
t42 = t103 * t161 + t116;
t165 = -t102 * t29 + t228 * t42;
t275 = t165 * t101;
t114 = -pkin(3) * t161 - qJ(4) * t131 - t267;
t115 = qJ(4) * t133 + t39;
t22 = t114 * t242 - t115 * t240;
t21 = pkin(4) * t161 - t22;
t106 = t42 * pkin(5) - t43 * pkin(11) + t21;
t23 = t114 * t240 + t115 * t242;
t108 = -pkin(10) * t161 + t23;
t176 = t97 * qJD(2) * t199;
t57 = pkin(3) * t222 + t176;
t273 = -pkin(4) * t127 + t46 * pkin(10) + qJD(5) * t108 - t57;
t5 = t101 * t273 + t103 * t276;
t274 = -pkin(11) * t127 - qJD(6) * t106 + t5;
t271 = qJD(6) * t123 - t266;
t93 = t100 ^ 2;
t95 = t102 ^ 2;
t197 = qJD(6) * (t93 - t95);
t268 = 0.2e1 * t123 * t127;
t261 = pkin(5) * t101;
t260 = pkin(11) * t103;
t18 = -t112 * t242 + t113 * t240;
t259 = t18 * t70;
t258 = t160 * t54;
t68 = t71 * qJD(3);
t257 = t70 * t68;
t227 = qJD(6) * t102;
t17 = t100 * t271 - t102 * t127 + t43 * t227;
t205 = t102 * t229;
t235 = t101 * t102;
t31 = t100 * t43 - t102 * t123;
t256 = -t17 * t235 - t205 * t31;
t13 = -t101 * t110 + t103 * t108;
t255 = -t101 * t29 - t229 * t42;
t94 = t101 ^ 2;
t253 = -t103 ^ 2 + t94;
t16 = -t100 * t127 - t102 * t271 + t43 * t228;
t251 = t100 * t16;
t90 = pkin(3) * t240 + pkin(10);
t250 = t101 * t90;
t249 = t102 * t16;
t248 = t102 * t17;
t246 = t103 * t90;
t237 = qJD(5) * t31;
t236 = qJD(6) * t31;
t234 = t102 * t103;
t232 = qJD(5) * t100;
t230 = qJD(5) * t102;
t226 = qJD(6) * t103;
t225 = 0.2e1 * t42 * t29;
t224 = -0.2e1 * pkin(5) * qJD(6);
t91 = -pkin(3) * t242 - pkin(4);
t223 = 0.2e1 * qJD(5) * t91;
t220 = qJD(6) * t90 * t94;
t219 = t100 * t246;
t218 = t90 * t234;
t215 = t42 * t232;
t214 = t42 * t230;
t32 = t100 * t123 + t102 * t43;
t213 = t32 * t229;
t212 = t90 * t229;
t211 = t93 * t229;
t210 = t42 * t231;
t204 = t100 * t226;
t203 = t101 * t227;
t202 = t102 * t226;
t201 = t100 * t227;
t200 = t101 * t229;
t196 = t253 * qJD(5);
t195 = t94 * t201;
t194 = t32 * t203;
t193 = t100 * t205;
t192 = t241 * t263;
t191 = t241 * t262;
t190 = -pkin(5) * t103 - pkin(11) * t101;
t189 = -t260 + t261;
t11 = pkin(11) * t123 + t13;
t7 = -t100 * t11 + t102 * t106;
t8 = t100 * t106 + t102 * t11;
t188 = -t100 * t8 - t102 * t7;
t187 = t100 * t7 - t102 * t8;
t6 = t101 * t276 - t103 * t273;
t186 = -t6 * t101 - t5 * t103;
t55 = -t100 * t63 + t102 * t70;
t56 = t100 * t70 + t102 * t63;
t182 = -t100 * t56 - t102 * t55;
t181 = t100 * t55 - t102 * t56;
t153 = -t190 - t91;
t149 = t102 * t153;
t60 = -t149 - t219;
t61 = -t100 * t153 + t218;
t180 = -t100 * t61 - t102 * t60;
t179 = t100 * t60 - t102 * t61;
t178 = -0.2e1 * t244 * t239;
t173 = qJD(3) * t192;
t172 = qJD(3) * t191;
t12 = -t101 * t108 - t103 * t110;
t10 = -pkin(5) * t123 - t12;
t4 = -pkin(5) * t127 - t6;
t171 = t10 * t227 + t100 * t4;
t170 = t10 * t228 - t102 * t4;
t169 = 0.2e1 * (t97 ^ 2 + t99 ^ 2) * t98 ^ 2 * qJD(2);
t168 = -t103 * t29 + t210;
t166 = t100 * t29 + t227 * t42;
t164 = t100 * t54 - t160 * t227;
t163 = -t102 * t54 - t160 * t228;
t162 = t189 * t100;
t74 = t101 * t230 + t204;
t111 = t29 * pkin(5) + pkin(11) * t266 + t18;
t1 = -t100 * t111 + t102 * t274 + t11 * t228;
t2 = t100 * t274 + t102 * t111 - t11 * t227;
t146 = qJD(6) * t188 - t1 * t102 - t100 * t2;
t34 = -t100 * t68 + t102 * t148 - t227 * t70 + t228 * t63;
t35 = t100 * t148 + t102 * t68 - t227 * t63 - t228 * t70;
t145 = qJD(6) * t182 - t100 * t35 - t102 * t34;
t51 = -qJD(5) * t162 + qJD(6) * t149 + t74 * t90;
t52 = -t61 * qJD(6) + (t100 * t250 + t102 * t189) * qJD(5);
t144 = qJD(6) * t180 - t100 * t52 - t102 * t51;
t88 = t95 * t229;
t87 = -0.2e1 * t200;
t84 = t95 * t200;
t83 = t93 * t200;
t76 = t100 * t231 - t202;
t75 = -t100 * t229 - t203;
t73 = t101 * t228 - t205;
t64 = t101 * t197 - t193;
t50 = -t241 * (-t252 * t97 + t155) + t243 * t277 * t98;
t33 = -t101 * t269 + t103 * t127;
t30 = t32 * t231;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97 * t178, t99 * t178, t169, qJ(2) * t169, -0.2e1 * t131 * t265, -0.2e1 * t131 * t222 - 0.2e1 * t133 * t265, t265 * t278, -0.2e1 * t133 * t222, t222 * t278, 0, -0.2e1 * t133 * t176 - 0.2e1 * t161 * t37 + 0.2e1 * t222 * t50, 0.2e1 * t131 * t176 - 0.2e1 * t161 * t36 - 0.2e1 * t265 * t50, -0.2e1 * t131 * t37 - 0.2e1 * t133 * t36 - 0.2e1 * t222 * t39 - 0.2e1 * t265 * t267, 0.2e1 * t176 * t50 - 0.2e1 * t267 * t37 - 0.2e1 * t36 * t39, 0.2e1 * t117 * t46, -0.2e1 * t117 * t127 - 0.2e1 * t123 * t46, -0.2e1 * t46 * t161, t268, t127 * t278, 0, 0.2e1 * t123 * t57 + 0.2e1 * t127 * t41 + 0.2e1 * t161 * t18, 0.2e1 * t117 * t57 + 0.2e1 * t161 * t19 + 0.2e1 * t41 * t46, 0.2e1 * t117 * t18 - 0.2e1 * t123 * t19 - 0.2e1 * t127 * t23 - 0.2e1 * t22 * t46, -0.2e1 * t18 * t22 + 0.2e1 * t19 * t23 + 0.2e1 * t41 * t57, -0.2e1 * t43 * t266, 0.2e1 * t266 * t42 - 0.2e1 * t43 * t29, -0.2e1 * t123 * t266 + 0.2e1 * t127 * t43, t225, -0.2e1 * t123 * t29 - 0.2e1 * t127 * t42, t268, 0.2e1 * t12 * t127 + 0.2e1 * t123 * t6 + 0.2e1 * t18 * t42 + 0.2e1 * t21 * t29, 0.2e1 * t123 * t5 - 0.2e1 * t127 * t13 + 0.2e1 * t18 * t43 - 0.2e1 * t21 * t266, 0.2e1 * t12 * t266 - 0.2e1 * t13 * t29 + 0.2e1 * t5 * t42 - 0.2e1 * t6 * t43, 0.2e1 * t12 * t6 - 0.2e1 * t13 * t5 + 0.2e1 * t18 * t21, -0.2e1 * t32 * t16, 0.2e1 * t16 * t31 - 0.2e1 * t17 * t32, -0.2e1 * t16 * t42 + 0.2e1 * t29 * t32, 0.2e1 * t31 * t17, -0.2e1 * t17 * t42 - 0.2e1 * t29 * t31, t225, 0.2e1 * t10 * t17 + 0.2e1 * t2 * t42 + 0.2e1 * t29 * t7 + 0.2e1 * t31 * t4, 0.2e1 * t1 * t42 - 0.2e1 * t10 * t16 - 0.2e1 * t29 * t8 + 0.2e1 * t32 * t4, 0.2e1 * t1 * t31 + 0.2e1 * t16 * t7 - 0.2e1 * t17 * t8 - 0.2e1 * t2 * t32, -0.2e1 * t1 * t8 + 0.2e1 * t10 * t4 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161 * t172 + t222 * t243, t161 * t173 - t243 * t265, t131 * t172 + t133 * t173 - t191 * t222 + t192 * t265, t243 * t176 + t37 * t192 - t36 * t191 + (t191 * t267 + t192 * t39) * qJD(3), 0, 0, 0, 0, 0, 0, t127 * t243 + t161 * t68, -t161 * t67 + t243 * t46, t117 * t68 + t123 * t67 - t127 * t71 + t70 * t46, t19 * t71 - t22 * t68 - t23 * t67 + t243 * t57 + t259, 0, 0, 0, 0, 0, 0, -t123 * t54 + t127 * t160 + t70 * t29 + t68 * t42, t123 * t148 - t127 * t63 - t266 * t70 + t68 * t43, t148 * t42 + t160 * t266 - t63 * t29 + t54 * t43, -t12 * t54 - t13 * t148 + t160 * t6 + t21 * t68 - t5 * t63 + t259, 0, 0, 0, 0, 0, 0, -t160 * t17 + t29 * t55 + t31 * t54 + t35 * t42, t16 * t160 - t29 * t56 + t32 * t54 + t34 * t42, t16 * t55 - t17 * t56 + t31 * t34 - t32 * t35, -t1 * t56 + t10 * t54 - t160 * t4 + t2 * t55 - t34 * t8 + t35 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t67 * t71 + 0.2e1 * t257, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t148 * t63 + 0.2e1 * t257 - 0.2e1 * t258, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t34 * t56 + 0.2e1 * t35 * t55 - 0.2e1 * t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, 0, -t222, 0, t37, t36, 0, 0, 0, 0, t46, 0, -t127, 0, -t18, -t19 (-t127 * t240 - t242 * t46) * pkin(3) (-t18 * t242 + t19 * t240) * pkin(3), -t48 * t101 + (t101 * t152 + t233) * t103, t255 + t280, t272, t168, t33, 0, -t18 * t103 + t21 * t231 - t272 * t90 + t91 * t29, t18 * t101 - t127 * t246 + t21 * t229 + t250 * t269 - t266 * t91, -t12 * t229 - t13 * t231 + t210 * t90 + t212 * t43 - t246 * t29 - t250 * t266 + t186, t18 * t91 + ((-t13 * t101 - t12 * t103) * qJD(5) + t186) * t90, t32 * t205 + (-t228 * t32 - t249) * t101, -t194 + (-t213 + (t16 + t236) * t101) * t100 + t256, t30 + (t16 + t214) * t103 - t275, t31 * t203 + (t101 * t17 + t229 * t31) * t100 (t17 - t215) * t103 + (-t166 - t237) * t101, t168, t60 * t29 + t52 * t42 + (-t2 + (t10 * t100 + t31 * t90) * qJD(5)) * t103 + (qJD(5) * t7 + t17 * t90 + t171) * t101, -t61 * t29 + t51 * t42 + (-t1 + (t10 * t102 + t32 * t90) * qJD(5)) * t103 + (-qJD(5) * t8 - t16 * t90 - t170) * t101, t60 * t16 - t61 * t17 + t51 * t31 - t52 * t32 + t188 * t229 + (qJD(6) * t187 + t1 * t100 - t102 * t2) * t101, -t1 * t61 + t2 * t60 - t8 * t51 + t7 * t52 + (t10 * t229 + t101 * t4) * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172, -t173, 0, 0, 0, 0, 0, 0, 0, 0, -t68, t67, 0 (-t240 * t67 - t242 * t68) * pkin(3), 0, 0, 0, 0, 0, 0, -t103 * t68 + t231 * t70, t101 * t68 + t229 * t70, t283, t283 * t90 + t68 * t91, 0, 0, 0, 0, 0, 0 (-t160 * t232 - t35) * t103 + (qJD(5) * t55 + t164) * t101 (-t160 * t230 - t34) * t103 + (-qJD(5) * t56 - t163) * t101, t182 * t229 + (qJD(6) * t181 + t100 * t34 - t102 * t35) * t101, t167 * t90 - t34 * t61 + t35 * t60 - t56 * t51 + t55 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t200, -0.2e1 * t196, 0, t87, 0, 0, t101 * t223, t103 * t223, 0, 0, 0.2e1 * t84 - 0.2e1 * t195, t193 * t279 + 0.2e1 * t197 * t94, 0.2e1 * t101 * t204 + 0.2e1 * t230 * t253, 0.2e1 * t83 + 0.2e1 * t195, -0.2e1 * t100 * t196 + 0.2e1 * t101 * t202, t87, 0.2e1 * t102 * t220 - 0.2e1 * t103 * t52 + 0.2e1 * (t60 + 0.2e1 * t219) * t231, -0.2e1 * t100 * t220 - 0.2e1 * t103 * t51 + 0.2e1 * (-t61 + 0.2e1 * t218) * t231, 0.2e1 * t180 * t229 + 0.2e1 * (qJD(6) * t179 + t100 * t51 - t102 * t52) * t101, 0.2e1 * t200 * t90 ^ 2 - 0.2e1 * t51 * t61 + 0.2e1 * t52 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, t46, 0, t57, 0, 0, 0, 0, 0, 0, t33, -t272, t255 - t280, -t5 * t101 + t103 * t6 + (-t101 * t12 + t103 * t13) * qJD(5), 0, 0, 0, 0, 0, 0 (-t17 - t215) * t103 + (-t166 + t237) * t101, t30 + (t16 - t214) * t103 + t275, t194 + (t213 + (-t16 + t236) * t101) * t100 + t256 (-qJD(5) * t187 - t4) * t103 + (qJD(5) * t10 + t146) * t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101 * t148 - t54 * t103 - t160 * t231 + t229 * t63, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-qJD(5) * t181 - t54) * t103 + (t145 - t281) * t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144 * t101 + (-t103 * t179 + t253 * t90) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t83 + 0.2e1 * t84 - 0.2e1 * t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266, 0, -t29, t127, t6, t5, 0, 0, t227 * t32 - t251, -t100 * t17 - t249 + (-t100 * t32 - t102 * t31) * qJD(6), t166, t228 * t31 - t248, -t165, 0, -pkin(5) * t17 - pkin(11) * t166 + t170, pkin(5) * t16 + pkin(11) * t165 + t171 (-t251 - t248 + (t100 * t31 + t102 * t32) * qJD(6)) * pkin(11) + t146, -pkin(5) * t4 + pkin(11) * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t148, 0, 0, 0, 0, 0, 0, 0, 0, t163, t164, t145, -pkin(5) * t54 + pkin(11) * t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t229, 0, -t231, 0, -t212, t90 * t231, 0, 0, -t64, t201 * t279 - t211 + t88, t76, t64, t74, 0 (pkin(11) * t234 + (-pkin(5) * t102 + t100 * t90) * t101) * qJD(6) + (t100 * t190 - t218) * qJD(5) (t235 * t90 + t162) * qJD(6) + (t102 * t190 + t219) * qJD(5), t144, -pkin(5) * t212 + pkin(11) * t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t231, -t229, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t76, t88 + t211 (-t261 + (t93 + t95) * t260) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t201, -0.2e1 * t197, 0, -0.2e1 * t201, 0, 0, t100 * t224, t102 * t224, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, 0, -t17, t29, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, 0, t75, t231, t52, t51, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t73, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, 0, -t228, 0, -pkin(11) * t227, pkin(11) * t228, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
