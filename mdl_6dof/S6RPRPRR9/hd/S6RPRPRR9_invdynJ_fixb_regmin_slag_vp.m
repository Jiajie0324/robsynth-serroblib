% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR9_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR9_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_invdynJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:05:11
% EndTime: 2019-03-09 04:05:32
% DurationCPUTime: 9.49s
% Computational Cost: add. (17652->614), mult. (59546->873), div. (0->0), fcn. (53102->16), ass. (0->310)
t279 = sin(pkin(6));
t283 = cos(pkin(6));
t278 = sin(pkin(7));
t290 = cos(qJ(3));
t415 = t278 * t290;
t375 = t283 * t415;
t281 = cos(pkin(12));
t282 = cos(pkin(7));
t409 = t282 * t290;
t377 = t281 * t409;
t463 = t279 * t377 + t375;
t276 = sin(pkin(13));
t280 = cos(pkin(13));
t286 = sin(qJ(3));
t327 = t276 * t290 + t280 * t286;
t217 = t327 * t278;
t219 = t327 * t282;
t277 = sin(pkin(12));
t287 = sin(qJ(1));
t291 = cos(qJ(1));
t406 = t283 * t291;
t225 = t277 * t287 - t281 * t406;
t226 = t277 * t406 + t281 * t287;
t403 = t290 * t280;
t236 = t276 * t286 - t403;
t412 = t279 * t291;
t123 = t217 * t412 + t219 * t225 + t226 * t236;
t191 = -t225 * t278 + t282 * t412;
t285 = sin(qJ(5));
t289 = cos(qJ(5));
t107 = t123 * t289 + t191 * t285;
t284 = sin(qJ(6));
t288 = cos(qJ(6));
t416 = t278 * t286;
t216 = t276 * t416 - t278 * t403;
t218 = t236 * t282;
t316 = t216 * t412 + t218 * t225 - t226 * t327;
t462 = t107 * t284 - t288 * t316;
t461 = t107 * t288 + t284 * t316;
t395 = qJD(1) * t279;
t372 = t281 * t395;
t243 = t278 * t372;
t394 = qJD(1) * t283;
t341 = t282 * t394 - t243;
t324 = qJD(3) + t341;
t210 = t289 * t324;
t410 = t282 * t286;
t188 = t279 * (t277 * t290 + t281 * t410) + t283 * t416;
t181 = t188 * qJD(1);
t373 = t277 * t395;
t456 = qJD(1) * t463 - t286 * t373;
t329 = t280 * t181 + t276 * t456;
t112 = t285 * t329 - t210;
t356 = -t181 * t276 + t280 * t456;
t447 = qJD(5) - t356;
t460 = t112 * t447;
t306 = (-t277 * t409 - t281 * t286) * t279;
t206 = qJD(1) * t306;
t411 = t281 * t290;
t207 = (-t277 * t410 + t411) * t395;
t459 = t236 * t278 * qJD(3) + t206 * t276 + t207 * t280;
t382 = qJDD(1) * t281;
t365 = t279 * t382;
t381 = qJDD(1) * t283;
t458 = t278 * t381 + t282 * t365;
t355 = t447 * t289;
t383 = qJDD(1) * t279;
t367 = t277 * t383;
t142 = qJD(3) * t456 + t286 * t458 + t290 * t367;
t180 = t188 * qJD(3);
t310 = t286 * t367 - t290 * t458;
t143 = qJD(1) * t180 + t310;
t99 = -t142 * t276 - t280 * t143;
t96 = qJDD(5) - t99;
t457 = -t285 * t96 - t447 * t355;
t111 = qJD(6) + t112;
t455 = t123 * t285 - t191 * t289;
t114 = t285 * t324 + t289 * t329;
t75 = t114 * t284 - t288 * t447;
t454 = t447 * t75;
t274 = t279 ^ 2;
t452 = t274 * (t277 ^ 2 + t281 ^ 2);
t387 = qJD(6) * t284;
t388 = qJD(5) * t289;
t425 = t356 * t289;
t85 = t284 * t329 + t288 * t425;
t304 = -t285 * t387 + t288 * t388 - t85;
t449 = t304 * t111;
t417 = t277 * t286;
t187 = t279 * t417 - t463;
t147 = -t187 * t276 + t188 * t280;
t408 = t283 * t282;
t414 = t279 * t281;
t224 = t278 * t414 - t408;
t215 = t224 * t289;
t115 = t147 * t285 + t215;
t448 = -qJD(5) + t447;
t100 = t142 * t280 - t143 * t276;
t214 = t278 * t365 - t282 * t381 - qJDD(3);
t389 = qJD(5) * t285;
t57 = qJD(5) * t210 + t289 * t100 - t285 * t214 - t329 * t389;
t77 = t114 * t288 + t284 * t447;
t20 = qJD(6) * t77 + t284 * t57 - t288 * t96;
t407 = t283 * t287;
t227 = -t277 * t291 - t281 * t407;
t413 = t279 * t287;
t193 = -t227 * t278 + t282 * t413;
t228 = -t277 * t407 + t281 * t291;
t301 = t217 * t413 + t219 * t227 - t228 * t236;
t108 = t193 * t289 - t285 * t301;
t299 = t283 * t217 + (t219 * t281 - t236 * t277) * t279;
t312 = g(1) * t108 + g(2) * t455 + g(3) * (-t285 * t299 - t215);
t380 = pkin(1) * t394;
t221 = qJ(2) * t372 + t277 * t380;
t317 = t278 * t283 + t282 * t414;
t308 = t317 * pkin(9);
t165 = qJD(1) * t308 + t221;
t258 = t281 * t380;
t418 = t277 * t279;
t303 = t283 * pkin(2) + (-pkin(9) * t282 - qJ(2)) * t418;
t173 = qJD(1) * t303 + t258;
t419 = t277 * t278;
t211 = (-pkin(2) * t281 - pkin(9) * t419 - pkin(1)) * t279;
t199 = qJD(1) * t211 + qJD(2);
t298 = -(t173 * t282 + t199 * t278) * t286 - t290 * t165;
t98 = qJ(4) * t456 - t298;
t435 = t280 * t98;
t398 = t173 * t409 + t199 * t415;
t343 = -t286 * t165 + t398;
t97 = -t181 * qJ(4) + t343;
t79 = pkin(3) * t324 + t97;
t46 = t276 * t79 + t435;
t44 = pkin(10) * t324 + t46;
t145 = -t173 * t278 + t282 * t199;
t110 = -pkin(3) * t456 + qJD(4) + t145;
t60 = -pkin(4) * t356 - pkin(10) * t329 + t110;
t22 = t285 * t60 + t289 * t44;
t384 = qJD(1) * qJD(2);
t368 = t279 * t384;
t250 = t281 * t368;
t379 = pkin(1) * t381;
t201 = qJ(2) * t365 + t277 * t379 + t250;
t161 = qJDD(1) * t308 + t201;
t256 = t281 * t379;
t348 = t277 * t368;
t162 = qJDD(1) * t303 + t256 - t348;
t194 = qJDD(1) * t211 + qJDD(2);
t344 = -t286 * t161 + t162 * t409 + t194 * t415;
t294 = qJD(3) * t298 + t344;
t39 = -t214 * pkin(3) - t142 * qJ(4) - t181 * qJD(4) + t294;
t391 = qJD(3) * t290;
t369 = t282 * t391;
t370 = t278 * t391;
t332 = -t290 * t161 - t162 * t410 - t173 * t369 - t194 * t416 - t199 * t370;
t392 = qJD(3) * t286;
t300 = -t165 * t392 - t332;
t42 = -qJ(4) * t143 + qJD(4) * t456 + t300;
t15 = t276 * t39 + t280 * t42;
t13 = -pkin(10) * t214 + t15;
t128 = -t162 * t278 + t282 * t194;
t93 = pkin(3) * t143 + qJDD(4) + t128;
t32 = -pkin(4) * t99 - pkin(10) * t100 + t93;
t360 = t285 * t13 - t289 * t32;
t4 = -t96 * pkin(5) + qJD(5) * t22 + t360;
t446 = t111 * (pkin(5) * t114 + pkin(11) * t111) + t312 + t4;
t270 = -pkin(3) * t280 - pkin(4);
t232 = -pkin(5) * t289 - pkin(11) * t285 + t270;
t48 = t276 * t97 + t435;
t357 = t285 * t100 + t289 * t214;
t58 = qJD(5) * t114 + t357;
t56 = qJDD(6) + t58;
t445 = t111 * (-t48 + t447 * (pkin(5) * t285 - pkin(11) * t289)) + t232 * t56;
t378 = t278 * t412;
t320 = t225 * t282 + t378;
t444 = t226 * t286 + t290 * t320;
t315 = t289 * t13 + t285 * t32 + t60 * t388 - t389 * t44;
t3 = pkin(11) * t96 + t315;
t18 = pkin(11) * t447 + t22;
t90 = t276 * t98;
t45 = t280 * t79 - t90;
t43 = -pkin(4) * t324 - t45;
t27 = t112 * pkin(5) - t114 * pkin(11) + t43;
t338 = t18 * t284 - t27 * t288;
t14 = -t276 * t42 + t280 * t39;
t12 = pkin(4) * t214 - t14;
t6 = pkin(5) * t58 - pkin(11) * t57 + t12;
t1 = -t338 * qJD(6) + t284 * t6 + t288 * t3;
t443 = pkin(1) * t283;
t442 = g(1) * t287;
t441 = pkin(9) + qJ(4);
t49 = t280 * t97 - t90;
t74 = pkin(3) * t181 + pkin(4) * t329 - pkin(10) * t356;
t440 = t285 * t74 + t289 * t49;
t230 = qJ(2) * t414 + t277 * t443;
t184 = t308 + t230;
t265 = t281 * t443;
t189 = t265 + t303;
t342 = -t184 * t286 + t189 * t409 + t211 * t415;
t101 = -pkin(3) * t224 - qJ(4) * t188 + t342;
t172 = t290 * t184;
t374 = t189 * t410 + t211 * t416 + t172;
t104 = -qJ(4) * t187 + t374;
t54 = t276 * t101 + t280 * t104;
t52 = -pkin(10) * t224 + t54;
t146 = t280 * t187 + t188 * t276;
t151 = -t189 * t278 + t282 * t211;
t325 = pkin(3) * t187 + t151;
t63 = pkin(4) * t146 - pkin(10) * t147 + t325;
t334 = t285 * t63 + t289 * t52;
t439 = t111 * t75;
t438 = t356 * t77;
t386 = qJD(6) * t288;
t19 = -t114 * t387 + t284 * t96 + t288 * t57 + t386 * t447;
t437 = t19 * t284;
t434 = t284 * t56;
t432 = t288 * t56;
t431 = t289 * t20;
t430 = t77 * t111;
t428 = pkin(1) * qJDD(1);
t427 = t112 * t329;
t426 = t114 * t329;
t423 = t224 * t285;
t269 = pkin(3) * t276 + pkin(10);
t421 = t269 * t284;
t420 = t269 * t288;
t292 = qJD(1) ^ 2;
t405 = t283 * t292;
t195 = t217 * t285 - t282 * t289;
t352 = t278 * t373;
t402 = qJD(5) * t195 + t285 * t352 + t289 * t459;
t401 = -qJD(3) * t217 - t280 * t206 + t207 * t276;
t196 = t217 * t289 + t282 * t285;
t399 = qJD(5) * t196 - t285 * t459 + t289 * t352;
t397 = t291 * pkin(1) + qJ(2) * t413;
t393 = qJD(2) * t279;
t390 = qJD(5) * t269;
t371 = t277 * t393;
t364 = -pkin(1) * t287 + qJ(2) * t412;
t242 = t278 * t371;
t363 = pkin(3) * t180 + t242;
t361 = g(2) * t412 - g(3) * t283;
t359 = -t19 * t289 + t77 * t389;
t296 = t189 * t369 + t211 * t370 + t393 * t411 + (-qJD(3) * t184 - t282 * t371) * t286;
t70 = -t180 * qJ(4) - t187 * qJD(4) + t296;
t179 = (t375 + (t377 - t417) * t279) * qJD(3);
t293 = qJD(2) * t306 + (-t172 + (-t189 * t282 - t211 * t278) * t286) * qJD(3);
t71 = -t179 * qJ(4) - t188 * qJD(4) + t293;
t36 = t276 * t70 - t280 * t71;
t53 = t101 * t280 - t276 * t104;
t354 = t111 * t288;
t346 = g(1) * t291 + g(2) * t287;
t340 = -qJD(6) * t216 + t402;
t339 = qJD(6) * t196 + t401;
t8 = t18 * t288 + t27 * t284;
t24 = pkin(11) * t146 + t334;
t116 = t147 * t289 - t423;
t51 = pkin(4) * t224 - t53;
t28 = pkin(5) * t115 - pkin(11) * t116 + t51;
t337 = t24 * t288 + t28 * t284;
t336 = -t24 * t284 + t28 * t288;
t37 = t276 * t71 + t280 * t70;
t134 = t179 * t276 + t280 * t180;
t137 = t179 * t280 - t180 * t276;
t68 = pkin(4) * t134 - pkin(10) * t137 + t363;
t335 = -t285 * t37 + t289 * t68;
t21 = -t285 * t44 + t289 * t60;
t333 = -t285 * t52 + t289 * t63;
t83 = t116 * t288 + t146 * t284;
t82 = t116 * t284 - t288 * t146;
t328 = (-qJ(2) * t373 + t258) * t277 - t221 * t281;
t326 = t289 * t96 + (t285 * t356 - t389) * t447;
t84 = t284 * t425 - t288 * t329;
t323 = (-t284 * t388 + t84) * t111;
t259 = -pkin(1) * t383 + qJDD(2);
t322 = -t259 * t279 + t274 * t428;
t321 = -t111 * t386 - t434;
t319 = t227 * t282 + t278 * t413;
t314 = t285 * t68 + t289 * t37 + t63 * t388 - t389 * t52;
t313 = -t269 * t96 + t43 * t447;
t125 = -t216 * t413 - t218 * t227 - t228 * t327;
t149 = -t283 * t216 + (-t218 * t281 - t277 * t327) * t279;
t311 = g(1) * t125 + g(2) * t316 + g(3) * t149;
t309 = t225 * t410 - t226 * t290 + t286 * t378;
t305 = -t12 - t311;
t17 = -pkin(5) * t447 - t21;
t302 = -pkin(11) * t56 + (t17 + t21) * t111;
t2 = -qJD(6) * t8 - t284 * t3 + t288 * t6;
t297 = qJD(6) * t111 * t269 + t311;
t295 = -g(1) * t301 + g(2) * t123 - g(3) * t299 + (pkin(11) * t329 - qJD(6) * t232 + t440) * t111;
t271 = pkin(3) * t290 + pkin(2);
t229 = -qJ(2) * t418 + t265;
t223 = pkin(3) * t410 - t278 * t441;
t222 = pkin(3) * t416 + t282 * t441;
t200 = t256 + (-qJ(2) * qJDD(1) - t384) * t418;
t157 = t228 * t290 + t286 * t319;
t156 = -t228 * t286 + t290 * t319;
t118 = t289 * t299 - t423;
t109 = t193 * t285 + t289 * t301;
t81 = qJD(5) * t116 + t285 * t137;
t80 = -qJD(5) * t115 + t289 * t137;
t65 = t109 * t288 - t125 * t284;
t64 = -t109 * t284 - t125 * t288;
t34 = qJD(6) * t83 - t288 * t134 + t284 * t80;
t33 = -qJD(6) * t82 + t284 * t134 + t288 * t80;
t25 = -pkin(5) * t329 + t285 * t49 - t289 * t74;
t23 = -pkin(5) * t146 - t333;
t16 = pkin(5) * t81 - pkin(11) * t80 + t36;
t10 = -t134 * pkin(5) + qJD(5) * t334 - t335;
t9 = pkin(11) * t134 + t314;
t5 = [qJDD(1), -g(2) * t291 + t442, t346, g(1) * t226 - g(2) * t228 + t322 * t281 + (qJDD(1) * t229 + t200 - t348) * t283, -g(1) * t225 - g(2) * t227 - t322 * t277 + (-qJDD(1) * t230 - t201 - t250) * t283, t384 * t452 + (-t200 * t277 + t201 * t281 + (-t229 * t277 + t230 * t281) * qJDD(1) - t346) * t279, t201 * t230 + t200 * t229 - g(1) * t364 - g(2) * t397 + (-t259 * pkin(1) - qJD(2) * t328) * t279, t142 * t188 + t179 * t181, -t142 * t187 - t143 * t188 + t179 * t456 - t180 * t181, -t142 * t224 + t179 * t324 - t188 * t214, t143 * t224 - t180 * t324 + t187 * t214, t214 * t224, -g(1) * t309 - g(2) * t157 + t128 * t187 + t151 * t143 + t145 * t180 - t214 * t342 - t224 * t294 - t242 * t456 + t293 * t324, -g(1) * t444 - g(2) * t156 + t128 * t188 + t151 * t142 + t145 * t179 + t181 * t242 + t374 * t214 + t300 * t224 - t296 * t324, -g(1) * t191 - g(2) * t193 - t100 * t53 - t134 * t46 - t137 * t45 - t14 * t147 - t146 * t15 + t329 * t36 + t356 * t37 + t54 * t99, t15 * t54 + t46 * t37 + t14 * t53 - t45 * t36 + t93 * t325 + t110 * t363 - g(1) * (t222 * t412 + t223 * t225 - t226 * t271 + t364) - g(2) * (t222 * t413 + t223 * t227 + t228 * t271 + t397) t114 * t80 + t116 * t57, -t112 * t80 - t114 * t81 - t115 * t57 - t116 * t58, t114 * t134 + t116 * t96 + t146 * t57 + t447 * t80, -t112 * t134 - t115 * t96 - t146 * t58 - t447 * t81, t134 * t447 + t146 * t96, t335 * t447 + t333 * t96 - t360 * t146 + t21 * t134 + t36 * t112 + t51 * t58 + t12 * t115 + t43 * t81 - g(1) * t107 - g(2) * t109 + (-t146 * t22 - t334 * t447) * qJD(5), g(1) * t455 - g(2) * t108 + t36 * t114 + t12 * t116 - t22 * t134 - t315 * t146 - t314 * t447 - t334 * t96 + t43 * t80 + t51 * t57, t19 * t83 + t33 * t77, -t19 * t82 - t20 * t83 - t33 * t75 - t34 * t77, t111 * t33 + t115 * t19 + t56 * t83 + t77 * t81, -t111 * t34 - t115 * t20 - t56 * t82 - t75 * t81, t111 * t81 + t115 * t56 (-qJD(6) * t337 + t288 * t16 - t284 * t9) * t111 + t336 * t56 + t2 * t115 - t338 * t81 + t10 * t75 + t23 * t20 + t4 * t82 + t17 * t34 - g(1) * t461 - g(2) * t65 -(qJD(6) * t336 + t284 * t16 + t288 * t9) * t111 - t337 * t56 - t1 * t115 - t8 * t81 + t10 * t77 + t23 * t19 + t4 * t83 + t17 * t33 + g(1) * t462 - g(2) * t64; 0, 0, 0 (t277 * t405 - t382) * t279 (qJDD(1) * t277 + t281 * t405) * t279, -t292 * t452, qJDD(2) + (qJD(1) * t328 - t428 - t442) * t279 + t361, 0, 0, 0, 0, 0, t282 * t143 - t206 * t324 + (-t290 * t214 - t324 * t392 + t373 * t456) * t278, t282 * t142 + t207 * t324 + (-t181 * t373 + t286 * t214 - t324 * t391) * t278, t216 * t100 + t217 * t99 - t329 * t401 - t356 * t459, -t14 * t216 + t15 * t217 + t93 * t282 - t459 * t46 + t401 * t45 + (-qJD(1) * t110 * t419 - t442) * t279 + t361, 0, 0, 0, 0, 0, -t112 * t401 - t195 * t96 + t216 * t58 - t399 * t447, -t114 * t401 - t196 * t96 + t216 * t57 + t402 * t447, 0, 0, 0, 0, 0 (-t196 * t284 + t216 * t288) * t56 + t195 * t20 + t399 * t75 + (t284 * t340 - t288 * t339) * t111 -(t196 * t288 + t216 * t284) * t56 + t195 * t19 + t399 * t77 + (t284 * t339 + t288 * t340) * t111; 0, 0, 0, 0, 0, 0, 0, -t181 * t456, t181 ^ 2 - t456 ^ 2, -t324 * t456 + t142, t181 * (qJD(3) - t243) + (t181 * t408 - t180) * qJD(1) - t310, -t214, -g(1) * t156 + g(2) * t444 + g(3) * t187 - t145 * t181 - t298 * t341 + t344, g(1) * t157 - g(2) * t309 + g(3) * t188 + qJD(3) * t398 - t145 * t456 + t341 * t343 + t332 (-t100 * t280 + t276 * t99) * pkin(3) + (-t49 + t45) * t356 + (t46 - t48) * t329, t45 * t48 - t46 * t49 + (-t110 * t181 + t14 * t280 + t15 * t276 + (g(1) * t228 + g(2) * t226 + g(3) * t418) * t286 + (-g(1) * t319 + g(2) * t320 - g(3) * t317) * t290) * pkin(3), t114 * t355 + t57 * t285 (t57 - t460) * t289 + (-t114 * t447 - t58) * t285, -t426 - t457, t326 + t427, -t447 * t329, -t48 * t112 - t21 * t329 + t270 * t58 + (t447 * t49 + t313) * t285 + ((-t74 - t390) * t447 + t305) * t289, t270 * t57 + t440 * t447 + t22 * t329 - t48 * t114 + t313 * t289 + (t390 * t447 - t305) * t285, t19 * t288 * t285 + t304 * t77, t85 * t75 + t77 * t84 + (-t284 * t77 - t288 * t75) * t388 + (-t437 - t20 * t288 + (t284 * t75 - t288 * t77) * qJD(6)) * t285 (t432 - t438) * t285 + t449 + t359, t431 + t323 + (t321 - t454) * t285, t111 * t285 * t447 - t56 * t289, -t17 * t84 - t25 * t75 + t445 * t288 + t295 * t284 + (-t56 * t421 - t2 + (t17 * t284 + t269 * t75) * qJD(5) - t297 * t288) * t289 + (t17 * t386 + t338 * t356 + t269 * t20 + t4 * t284 + (t111 * t421 - t338) * qJD(5)) * t285, -t17 * t85 - t25 * t77 - t445 * t284 + t295 * t288 + (-t56 * t420 + t1 + (t17 * t288 + t269 * t77) * qJD(5) + t297 * t284) * t289 + (-t17 * t387 + t8 * t356 + t269 * t19 + t4 * t288 + (t111 * t420 - t8) * qJD(5)) * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t329 ^ 2 - t356 ^ 2, -g(1) * t193 + g(2) * t191 + g(3) * t224 + t329 * t45 - t356 * t46 + t93, 0, 0, 0, 0, 0, t326 - t427, -t426 + t457, 0, 0, 0, 0, 0, -t431 + t323 + (t321 + t454) * t285 (-t432 - t438) * t285 - t449 + t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114 * t112, -t112 ^ 2 + t114 ^ 2, t57 + t460, t114 * t448 - t357, t96, -t43 * t114 + t22 * t448 - t312 - t360, g(1) * t109 - g(2) * t107 + g(3) * t118 + t112 * t43 + t21 * t447 - t315, t354 * t77 + t437 (t19 - t439) * t288 + (-t20 - t430) * t284, t111 * t354 - t77 * t114 + t434, -t111 ^ 2 * t284 + t75 * t114 + t432, -t111 * t114, -pkin(5) * t20 + t114 * t338 - t22 * t75 + t302 * t284 - t288 * t446, -pkin(5) * t19 + t8 * t114 - t22 * t77 + t284 * t446 + t302 * t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77 * t75, -t75 ^ 2 + t77 ^ 2, t19 + t439, -t20 + t430, t56, t8 * t111 - t17 * t77 - g(1) * t64 - g(2) * t462 - g(3) * (-t118 * t284 - t149 * t288) + t2, -t338 * t111 + t17 * t75 + g(1) * t65 - g(2) * t461 - g(3) * (-t118 * t288 + t149 * t284) - t1;];
tau_reg  = t5;
