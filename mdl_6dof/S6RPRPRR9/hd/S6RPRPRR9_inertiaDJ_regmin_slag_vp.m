% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRR9_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_inertiaDJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:05:06
% EndTime: 2019-03-09 04:05:14
% DurationCPUTime: 2.76s
% Computational Cost: add. (7151->273), mult. (21856->526), div. (0->0), fcn. (23824->14), ass. (0->162)
t119 = sin(qJ(5));
t203 = -0.4e1 * t119;
t121 = cos(qJ(6));
t118 = sin(qJ(6));
t171 = qJD(6) * t118;
t122 = cos(qJ(5));
t110 = sin(pkin(13));
t114 = cos(pkin(13));
t111 = sin(pkin(12));
t113 = sin(pkin(6));
t115 = cos(pkin(12));
t120 = sin(qJ(3));
t123 = cos(qJ(3));
t116 = cos(pkin(7));
t184 = t116 * t123;
t112 = sin(pkin(7));
t117 = cos(pkin(6));
t189 = t112 * t117;
t201 = t113 * (-t111 * t120 + t115 * t184) + t123 * t189;
t185 = t115 * t120;
t188 = t112 * t120;
t70 = t117 * t188 + (t111 * t123 + t116 * t185) * t113;
t53 = t110 * t201 + t114 * t70;
t187 = t113 * t115;
t88 = t112 * t187 - t117 * t116;
t47 = -t88 * t119 + t122 * t53;
t65 = t201 * qJD(3);
t66 = t70 * qJD(3);
t50 = -t110 * t66 + t114 * t65;
t32 = qJD(5) * t47 + t119 * t50;
t46 = t119 * t53 + t88 * t122;
t132 = -t121 * t32 + t46 * t171;
t202 = t132 * t119;
t179 = qJD(2) * t113;
t160 = t111 * t179;
t147 = t116 * t160;
t177 = qJD(3) * t123;
t154 = t112 * t177;
t159 = t115 * t179;
t199 = pkin(1) * t117;
t101 = t115 * t199;
t190 = t111 * t113;
t71 = t117 * pkin(2) + t101 + (-pkin(9) * t116 - qJ(2)) * t190;
t198 = t116 * t71;
t194 = qJ(2) * t187 + t111 * t199;
t68 = (t116 * t187 + t189) * pkin(9) + t194;
t81 = (-pkin(9) * t111 * t112 - pkin(2) * t115 - pkin(1)) * t113;
t44 = t120 * (qJD(3) * t68 + t147) - t123 * t159 - t81 * t154 - t177 * t198;
t143 = t112 * t81 + t198;
t200 = -t120 * t143 - t123 * t68;
t38 = -t88 * pkin(3) - t70 * qJ(4) - t120 * t68 + t123 * t143;
t43 = qJ(4) * t201 - t200;
t23 = t110 * t38 + t114 * t43;
t21 = -t88 * pkin(10) + t23;
t54 = -t112 * t71 + t116 * t81;
t137 = -pkin(3) * t201 + t54;
t52 = t110 * t70 - t114 * t201;
t26 = t52 * pkin(4) - t53 * pkin(10) + t137;
t140 = t119 * t26 + t122 * t21;
t124 = t200 * qJD(3);
t138 = -t65 * qJ(4) - t70 * qJD(4);
t30 = -t66 * qJ(4) + qJD(4) * t201 - t44;
t18 = t114 * t30 + (-t120 * t159 - t123 * t147 + t124 + t138) * t110;
t49 = t110 * t65 + t114 * t66;
t95 = t112 * t160;
t62 = t66 * pkin(3) + t95;
t28 = t49 * pkin(4) - t50 * pkin(10) + t62;
t6 = -qJD(5) * t140 - t119 * t18 + t122 * t28;
t31 = -qJD(5) * t46 + t122 * t50;
t34 = t118 * t47 - t121 * t52;
t14 = -qJD(6) * t34 + t118 * t49 + t121 * t31;
t196 = t14 * t118;
t195 = t14 * t121;
t193 = qJD(5) * t34;
t103 = t110 * pkin(3) + pkin(10);
t192 = t103 * t119;
t191 = t103 * t122;
t186 = t114 * t123;
t183 = t118 * t103;
t182 = t121 * t122;
t108 = t121 ^ 2;
t181 = t118 ^ 2 - t108;
t107 = t119 ^ 2;
t180 = -t122 ^ 2 + t107;
t178 = qJD(3) * t112;
t176 = qJD(5) * t118;
t175 = qJD(5) * t119;
t174 = qJD(5) * t121;
t173 = qJD(5) * t122;
t172 = qJD(6) * t107;
t170 = qJD(6) * t121;
t169 = qJD(6) * t122;
t168 = -0.2e1 * pkin(5) * qJD(6);
t104 = -t114 * pkin(3) - pkin(4);
t166 = 0.2e1 * qJD(5) * t104;
t165 = t46 * t176;
t164 = t46 * t174;
t162 = t122 * t183;
t161 = t103 * t182;
t158 = t103 * t172;
t157 = t118 * t169;
t156 = t121 * t169;
t155 = t120 * t178;
t153 = t118 * t170;
t152 = t119 * t173;
t151 = t121 * t173;
t45 = (-t111 * t184 - t185) * t179 + t124;
t17 = t110 * t30 - t114 * (t138 + t45);
t22 = -t110 * t43 + t114 * t38;
t150 = t181 * qJD(6);
t149 = t180 * qJD(5);
t148 = -0.2e1 * t117 * t179;
t146 = t118 * t151;
t145 = -t122 * pkin(5) - t119 * pkin(11);
t144 = pkin(5) * t119 - pkin(11) * t122;
t11 = t52 * pkin(11) + t140;
t20 = t88 * pkin(4) - t22;
t13 = t46 * pkin(5) - t47 * pkin(11) + t20;
t8 = t121 * t11 + t118 * t13;
t35 = t118 * t52 + t121 * t47;
t142 = -t118 * t35 - t121 * t34;
t86 = (t110 * t123 + t114 * t120) * t112;
t76 = t119 * t116 + t122 * t86;
t85 = t110 * t188 - t112 * t186;
t61 = t118 * t85 + t121 * t76;
t139 = -t119 * t21 + t122 * t26;
t10 = -t52 * pkin(5) - t139;
t4 = -t49 * pkin(5) - t6;
t136 = t10 * t170 + t4 * t118;
t135 = t10 * t171 - t4 * t121;
t134 = t119 * t49 + t52 * t173;
t133 = t118 * t32 + t46 * t170;
t83 = (-t110 * t120 + t186) * t178;
t59 = qJD(5) * t76 + t119 * t83;
t75 = -t122 * t116 + t119 * t86;
t131 = t59 * t118 + t75 * t170;
t130 = -t59 * t121 + t75 * t171;
t94 = t104 + t145;
t74 = t118 * t94 + t161;
t129 = t144 * t118;
t5 = -t119 * t28 - t122 * t18 - t26 * t173 + t21 * t175;
t90 = t119 * t174 + t157;
t126 = t32 * pkin(5) - t31 * pkin(11) + t17;
t125 = -t49 * pkin(11) + t5;
t92 = t118 * t175 - t156;
t91 = -t118 * t173 - t119 * t170;
t89 = t119 * t171 - t151;
t82 = qJD(3) * t86;
t73 = t121 * t94 - t162;
t60 = -t118 * t76 + t121 * t85;
t58 = -t116 * t173 - t122 * t83 + t86 * t175;
t56 = -t74 * qJD(6) + (t119 * t183 + t121 * t144) * qJD(5);
t55 = -qJD(5) * t129 + t103 * t90 - t94 * t170;
t40 = -qJD(6) * t61 + t118 * t58 + t121 * t82;
t39 = -t118 * t82 + t121 * t58 - t85 * t170 + t76 * t171;
t37 = t122 * t49 - t52 * t175;
t33 = t35 * t175;
t15 = qJD(6) * t35 + t118 * t31 - t121 * t49;
t7 = -t118 * t11 + t121 * t13;
t2 = -qJD(6) * t8 + t118 * t125 + t121 * t126;
t1 = t11 * t171 - t118 * t126 + t121 * t125 - t13 * t170;
t3 = [0, 0, 0, t111 * t148, t115 * t148, 0.2e1 * (t111 ^ 2 + t115 ^ 2) * t113 ^ 2 * qJD(2), 0.2e1 * (t194 * t115 + (qJ(2) * t190 - t101) * t111) * t179, 0.2e1 * t70 * t65, 0.2e1 * t201 * t65 - 0.2e1 * t70 * t66, -0.2e1 * t65 * t88, 0.2e1 * t66 * t88, 0, -0.2e1 * t201 * t95 - 0.2e1 * t45 * t88 + 0.2e1 * t54 * t66, -0.2e1 * t44 * t88 + 0.2e1 * t54 * t65 + 0.2e1 * t70 * t95, 0.2e1 * t17 * t53 - 0.2e1 * t18 * t52 - 0.2e1 * t22 * t50 - 0.2e1 * t23 * t49, 0.2e1 * t137 * t62 - 0.2e1 * t22 * t17 + 0.2e1 * t23 * t18, 0.2e1 * t47 * t31, -0.2e1 * t31 * t46 - 0.2e1 * t47 * t32, 0.2e1 * t31 * t52 + 0.2e1 * t47 * t49, -0.2e1 * t32 * t52 - 0.2e1 * t46 * t49, 0.2e1 * t52 * t49, 0.2e1 * t139 * t49 + 0.2e1 * t17 * t46 + 0.2e1 * t20 * t32 + 0.2e1 * t6 * t52, -0.2e1 * t140 * t49 + 0.2e1 * t17 * t47 + 0.2e1 * t20 * t31 + 0.2e1 * t5 * t52, 0.2e1 * t35 * t14, -0.2e1 * t14 * t34 - 0.2e1 * t35 * t15, 0.2e1 * t14 * t46 + 0.2e1 * t35 * t32, -0.2e1 * t15 * t46 - 0.2e1 * t34 * t32, 0.2e1 * t46 * t32, 0.2e1 * t10 * t15 + 0.2e1 * t2 * t46 + 0.2e1 * t7 * t32 + 0.2e1 * t4 * t34, 0.2e1 * t1 * t46 + 0.2e1 * t10 * t14 - 0.2e1 * t8 * t32 + 0.2e1 * t4 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116 * t66 + t88 * t155, t116 * t65 + t88 * t154, -t86 * t49 + t85 * t50 - t83 * t52 + t82 * t53, t62 * t116 + t17 * t85 + t18 * t86 - t22 * t82 + t23 * t83, 0, 0, 0, 0, 0, t85 * t32 + t82 * t46 - t75 * t49 - t59 * t52, t85 * t31 + t82 * t47 - t76 * t49 + t58 * t52, 0, 0, 0, 0, 0, t75 * t15 + t60 * t32 + t59 * t34 + t40 * t46, t75 * t14 - t61 * t32 + t59 * t35 + t39 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t85 * t82 + 0.2e1 * t86 * t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t66, 0, t45, t44 (-t110 * t49 - t114 * t50) * pkin(3) (t110 * t18 - t114 * t17) * pkin(3), t31 * t119 + t47 * t173, -t119 * t32 + t31 * t122 + (-t119 * t47 - t122 * t46) * qJD(5), t134, t37, 0, -t49 * t192 + t104 * t32 - t17 * t122 + (t119 * t20 - t52 * t191) * qJD(5), -t49 * t191 + t104 * t31 + t17 * t119 + (t122 * t20 + t52 * t192) * qJD(5), t35 * t151 + (-t171 * t35 + t195) * t119, t142 * t173 + (-t196 - t121 * t15 + (t118 * t34 - t121 * t35) * qJD(6)) * t119, t33 + (-t14 + t164) * t122 - t202 (t15 - t165) * t122 + (-t133 - t193) * t119, -t32 * t122 + t175 * t46, t73 * t32 + t56 * t46 + (-t2 + (t10 * t118 + t103 * t34) * qJD(5)) * t122 + (qJD(5) * t7 + t103 * t15 + t136) * t119, -t74 * t32 + t55 * t46 + (-t1 + (t10 * t121 + t103 * t35) * qJD(5)) * t122 + (-qJD(5) * t8 + t103 * t14 - t135) * t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155, -t154, 0 (t110 * t83 - t114 * t82) * pkin(3), 0, 0, 0, 0, 0, -t82 * t122 + t85 * t175, t82 * t119 + t173 * t85, 0, 0, 0, 0, 0 (t176 * t75 - t40) * t122 + (qJD(5) * t60 + t131) * t119 (t174 * t75 - t39) * t122 + (-qJD(5) * t61 - t130) * t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t152, -0.2e1 * t149, 0, 0, 0, t119 * t166, t122 * t166, -0.2e1 * t107 * t153 + 0.2e1 * t108 * t152, t146 * t203 + 0.2e1 * t172 * t181, 0.2e1 * t119 * t157 + 0.2e1 * t174 * t180, -0.2e1 * t118 * t149 + 0.2e1 * t119 * t156, -0.2e1 * t152, 0.2e1 * t121 * t158 - 0.2e1 * t56 * t122 + 0.2e1 * (t73 + 0.2e1 * t162) * t175, -0.2e1 * t118 * t158 - 0.2e1 * t55 * t122 + 0.2e1 * (-t74 + 0.2e1 * t161) * t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, 0, 0, 0, t37, -t134, 0, 0, 0, 0, 0 (-t15 - t165) * t122 + (-t133 + t193) * t119, t33 + (-t14 - t164) * t122 + t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, -t32, t49, t6, t5, t170 * t35 + t196, qJD(6) * t142 - t118 * t15 + t195, t133, -t132, 0, -pkin(5) * t15 - pkin(11) * t133 + t135, -pkin(5) * t14 + pkin(11) * t132 + t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, t58, 0, 0, 0, 0, 0, t130, t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, -t175, 0, -t103 * t173, t103 * t175, -t119 * t150 + t146, t153 * t203 - t173 * t181, t92, t90, 0 (pkin(11) * t182 + (-t121 * pkin(5) + t183) * t119) * qJD(6) + (t118 * t145 - t161) * qJD(5) (t121 * t192 + t129) * qJD(6) + (t121 * t145 + t162) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t173, 0, 0, 0, 0, 0, -t90, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t153, -0.2e1 * t150, 0, 0, 0, t118 * t168, t121 * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t15, t32, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t91, t175, t56, t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, -t171, 0, -pkin(11) * t170, pkin(11) * t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
