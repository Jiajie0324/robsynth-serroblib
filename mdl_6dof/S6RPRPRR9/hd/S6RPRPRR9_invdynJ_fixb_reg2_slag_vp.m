% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR9_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR9_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR9_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_invdynJ_fixb_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:05:16
% EndTime: 2019-03-09 04:05:48
% DurationCPUTime: 18.67s
% Computational Cost: add. (42923->849), mult. (143966->1150), div. (0->0), fcn. (125706->16), ass. (0->380)
t340 = sin(pkin(12));
t342 = sin(pkin(6));
t343 = cos(pkin(12));
t348 = sin(qJ(3));
t344 = cos(pkin(7));
t352 = cos(qJ(3));
t508 = t344 * t352;
t374 = (-t340 * t508 - t343 * t348) * t342;
t255 = qJD(1) * t374;
t490 = qJD(1) * t342;
t509 = t344 * t348;
t256 = (-t340 * t509 + t343 * t352) * t490;
t339 = sin(pkin(13));
t531 = cos(pkin(13));
t385 = -t348 * t339 + t352 * t531;
t341 = sin(pkin(7));
t487 = qJD(3) * t341;
t494 = -t339 * t255 - t256 * t531 + t385 * t487;
t345 = cos(pkin(6));
t512 = t342 * t343;
t465 = t344 * t512;
t394 = t341 * t345 + t465;
t372 = qJD(1) * t394;
t463 = t340 * t490;
t222 = -t348 * t463 + t352 * t372;
t514 = t341 * t348;
t466 = t345 * t514;
t236 = t466 + (t340 * t352 + t343 * t509) * t342;
t225 = t236 * qJD(1);
t173 = -t531 * t222 + t225 * t339;
t562 = qJD(5) + t173;
t349 = sin(qJ(1));
t353 = cos(qJ(1));
t506 = t345 * t353;
t280 = t340 * t349 - t343 * t506;
t510 = t342 * t353;
t241 = -t280 * t341 + t344 * t510;
t347 = sin(qJ(5));
t351 = cos(qJ(5));
t293 = -t352 * t339 - t348 * t531;
t272 = t293 * t341;
t274 = t293 * t344;
t281 = t340 * t506 + t343 * t349;
t366 = -t272 * t510 - t274 * t280 - t281 * t385;
t134 = t241 * t347 + t351 * t366;
t271 = t385 * t341;
t273 = t385 * t344;
t157 = -t271 * t510 - t273 * t280 + t281 * t293;
t346 = sin(qJ(6));
t350 = cos(qJ(6));
t577 = t134 * t346 - t157 * t350;
t576 = t134 * t350 + t157 * t346;
t462 = t343 * t490;
t489 = qJD(1) * t345;
t416 = -t341 * t462 + t344 * t489;
t399 = qJD(3) + t416;
t472 = pkin(1) * t489;
t276 = qJ(2) * t462 + t340 * t472;
t209 = pkin(9) * t372 + t276;
t320 = t343 * t472;
t515 = t340 * t342;
t367 = pkin(2) * t345 + (-pkin(9) * t344 - qJ(2)) * t515;
t218 = qJD(1) * t367 + t320;
t516 = t340 * t341;
t263 = (-pkin(2) * t343 - pkin(9) * t516 - pkin(1)) * t342;
t249 = qJD(1) * t263 + qJD(2);
t513 = t341 * t352;
t137 = -t348 * t209 + t218 * t508 + t249 * t513;
t117 = -t225 * qJ(4) + t137;
t101 = pkin(3) * t399 + t117;
t138 = t352 * t209 + (t218 * t344 + t249 * t341) * t348;
t118 = qJ(4) * t222 + t138;
t444 = t531 * t118;
t64 = t339 * t101 + t444;
t62 = pkin(10) * t399 + t64;
t183 = -t218 * t341 + t344 * t249;
t140 = -pkin(3) * t222 + qJD(4) + t183;
t384 = t339 * t222 + t225 * t531;
t79 = pkin(4) * t173 - pkin(10) * t384 + t140;
t34 = -t347 * t62 + t351 * t79;
t474 = qJDD(1) * t345;
t450 = t344 * t474;
t475 = qJDD(1) * t343;
t451 = t342 * t475;
t268 = t341 * t451 - qJDD(3) - t450;
t424 = t344 * t451;
t459 = qJD(3) * t515;
t426 = qJD(1) * t459;
t429 = qJD(3) * t465;
t476 = qJDD(1) * t342;
t561 = qJD(1) * t429 + t340 * t476 + t487 * t489;
t181 = -qJDD(1) * t466 + (-t424 + t426) * t348 - t561 * t352;
t478 = qJD(1) * qJD(2);
t453 = t342 * t478;
t312 = t343 * t453;
t471 = pkin(1) * t474;
t251 = qJ(2) * t451 + t340 * t471 + t312;
t371 = t394 * qJDD(1);
t204 = pkin(9) * t371 + t251;
t318 = t343 * t471;
t427 = t340 * t453;
t206 = qJDD(1) * t367 + t318 - t427;
t244 = qJDD(1) * t263 + qJDD(2);
t417 = -t348 * t204 + t206 * t508 + t244 * t513;
t81 = -qJD(3) * t138 + t417;
t57 = -pkin(3) * t268 + qJ(4) * t181 - qJD(4) * t225 + t81;
t432 = t348 * t561 + t352 * t426;
t355 = -t352 * t371 + t432;
t485 = qJD(3) * t352;
t457 = t344 * t485;
t458 = t341 * t485;
t486 = qJD(3) * t348;
t365 = -t352 * t204 - t206 * t509 + t209 * t486 - t218 * t457 - t244 * t514 - t249 * t458;
t60 = -qJ(4) * t355 + t222 * qJD(4) - t365;
t27 = t339 * t57 + t531 * t60;
t25 = -pkin(10) * t268 + t27;
t481 = t351 * qJD(5);
t484 = qJD(5) * t347;
t165 = -t341 * t206 + t344 * t244;
t115 = pkin(3) * t355 + qJDD(4) + t165;
t120 = -t181 * t531 - t339 * t355;
t438 = t339 * t181 - t531 * t355;
t49 = -pkin(4) * t438 - t120 * pkin(10) + t115;
t393 = -t351 * t25 - t347 * t49 - t79 * t481 + t484 * t62;
t575 = -t34 * t562 - t393;
t407 = -qJDD(5) + t438;
t548 = qJD(5) * t562;
t563 = t173 * t562 + t548;
t574 = t347 * t407 - t351 * t563;
t35 = t347 * t79 + t351 * t62;
t573 = t173 * t35;
t439 = t347 * t384 - t351 * t399;
t547 = qJD(6) + t439;
t144 = t347 * t399 + t351 * t384;
t391 = t350 * t562;
t96 = t144 * t346 - t391;
t572 = t547 * t96;
t98 = t350 * t144 + t346 * t562;
t571 = t547 * t98;
t66 = t117 * t339 + t444;
t570 = -t66 + t562 * (pkin(5) * t347 - pkin(11) * t351);
t332 = pkin(3) * t339 + pkin(10);
t112 = t339 * t118;
t67 = t117 * t531 - t112;
t95 = pkin(3) * t225 + pkin(4) * t384 + pkin(10) * t173;
t44 = t347 * t95 + t351 * t67;
t569 = pkin(11) * t384 + t332 * t484 + t44;
t566 = t173 * t384;
t528 = t173 * t439;
t502 = t351 * t173;
t107 = t346 * t384 - t350 * t502;
t565 = -t350 * t481 + t107;
t245 = -t272 * t347 - t351 * t344;
t431 = t341 * t463;
t498 = -qJD(5) * t245 - t347 * t431 + t494 * t351;
t495 = -qJD(3) * t272 + t255 * t531 - t256 * t339;
t564 = t345 * t513 + t352 * t465;
t30 = pkin(11) * t562 + t35;
t63 = t101 * t531 - t112;
t61 = -pkin(4) * t399 - t63;
t40 = pkin(5) * t439 - t144 * pkin(11) + t61;
t12 = t30 * t350 + t346 * t40;
t26 = -t339 * t60 + t531 * t57;
t24 = pkin(4) * t268 - t26;
t405 = -t351 * t120 + t347 * t268;
t76 = qJD(5) * t439 + t405;
t440 = t347 * t120 + t351 * t268;
t77 = qJD(5) * t144 + t440;
t10 = pkin(5) * t77 + pkin(11) * t76 + t24;
t5 = -pkin(11) * t407 - t393;
t2 = -qJD(6) * t12 + t350 * t10 - t346 * t5;
t560 = t12 * t547 + t2;
t410 = t30 * t346 - t350 * t40;
t1 = -t410 * qJD(6) + t346 * t10 + t350 * t5;
t559 = t410 * t547 + t1;
t507 = t345 * t349;
t282 = -t340 * t353 - t343 * t507;
t283 = -t340 * t507 + t343 * t353;
t511 = t342 * t349;
t162 = t271 * t511 + t273 * t282 + t283 * t293;
t188 = t271 * t345 + (t273 * t343 + t293 * t340) * t342;
t379 = g(1) * t162 + g(2) * t157 + g(3) * t188;
t558 = t332 * t548 + t24 + t379;
t133 = -t241 * t351 + t347 * t366;
t106 = -t346 * t502 - t350 * t384;
t482 = qJD(6) * t350;
t415 = t347 * t482 - t106;
t557 = t415 * t98;
t556 = t562 * t96;
t436 = t562 * t347;
t555 = t144 * t436;
t554 = t173 * t399;
t336 = t340 ^ 2;
t337 = t342 ^ 2;
t338 = t343 ^ 2;
t553 = (t336 + t338) * t337;
t552 = t346 * t547;
t483 = qJD(6) * t346;
t369 = -t347 * t483 - t565;
t549 = t369 * t547;
t246 = -t272 * t351 + t344 * t347;
t497 = qJD(5) * t246 + t347 * t494 + t351 * t431;
t529 = qJD(6) * t98;
t33 = -t346 * t76 + t350 * t407 + t529;
t447 = t347 * t25 - t351 * t49;
t8 = -qJD(5) * t35 - t447;
t546 = t332 * t407 + t562 * t61;
t189 = -t272 * t345 + (-t274 * t343 + t340 * t385) * t342;
t467 = t341 * t510;
t519 = t281 * t348;
t545 = t352 * (t280 * t344 + t467) + t519;
t279 = t341 * t512 - t345 * t344;
t544 = pkin(1) * t345;
t285 = qJ(2) * t512 + t340 * t544;
t230 = pkin(9) * t394 + t285;
t327 = t343 * t544;
t237 = t327 + t367;
t145 = -t230 * t348 + t237 * t508 + t263 * t513;
t121 = -pkin(3) * t279 - qJ(4) * t236 + t145;
t217 = t352 * t230;
t146 = t237 * t509 + t263 * t514 + t217;
t469 = t348 * t515;
t235 = t469 - t564;
t128 = -qJ(4) * t235 + t146;
t72 = t339 * t121 + t531 * t128;
t70 = -pkin(10) * t279 + t72;
t190 = -t237 * t341 + t344 * t263;
t147 = pkin(3) * t235 + t190;
t184 = t235 * t531 + t236 * t339;
t185 = -t339 * t235 + t236 * t531;
t84 = pkin(4) * t184 - pkin(10) * t185 + t147;
t539 = t347 * t84 + t351 * t70;
t358 = (-t217 + (-t237 * t344 - t263 * t341) * t348) * qJD(3);
t223 = -t345 * t458 + t348 * t459 - t352 * t429;
t400 = qJ(4) * t223 - qJD(4) * t236;
t488 = qJD(2) * t342;
t461 = t340 * t488;
t430 = t344 * t461;
t460 = t343 * t488;
t129 = t237 * t457 + t263 * t458 + t352 * t460 + (-qJD(3) * t230 - t430) * t348;
t224 = t236 * qJD(3);
t91 = -qJ(4) * t224 - qJD(4) * t235 + t129;
t54 = t531 * t91 + (-t348 * t460 - t352 * t430 + t358 + t400) * t339;
t172 = -t223 * t339 + t224 * t531;
t175 = -t223 * t531 - t339 * t224;
t302 = t341 * t461;
t205 = pkin(3) * t224 + t302;
t89 = pkin(4) * t172 - pkin(10) * t175 + t205;
t16 = -qJD(5) * t539 - t347 * t54 + t351 * t89;
t543 = pkin(3) * t352;
t542 = g(1) * t349;
t541 = t98 * t96;
t540 = pkin(9) + qJ(4);
t538 = t173 * t98;
t537 = t33 * t351;
t75 = qJDD(6) + t77;
t536 = t346 * t75;
t535 = t350 * t75;
t534 = -t347 * t77 - t439 * t481;
t333 = -pkin(3) * t531 - pkin(4);
t423 = t351 * pkin(5) + t347 * pkin(11);
t288 = -t423 + t333;
t517 = t332 * t351;
t239 = t288 * t350 - t346 * t517;
t533 = qJD(6) * t239 + t346 * t570 - t350 * t569;
t240 = t288 * t346 + t350 * t517;
t532 = -qJD(6) * t240 + t346 * t569 + t350 * t570;
t530 = qJD(6) * t96;
t527 = t144 * t439;
t526 = t144 * t384;
t525 = t384 * t439;
t524 = t384 ^ 2;
t523 = t173 ^ 2;
t522 = t225 * t222;
t520 = t279 * t347;
t518 = t283 * t348;
t354 = qJD(1) ^ 2;
t505 = t345 * t354;
t504 = t347 * t350;
t197 = -t246 * t346 - t271 * t350;
t500 = qJD(6) * t197 + t346 * t495 + t350 * t498;
t198 = t246 * t350 - t271 * t346;
t499 = -qJD(6) * t198 - t346 * t498 + t350 * t495;
t468 = t341 * t511;
t473 = pkin(3) * t508;
t496 = t282 * t473 + t468 * t543;
t493 = t564 * pkin(3);
t492 = t353 * pkin(1) + qJ(2) * t511;
t477 = qJDD(1) * t337;
t470 = t98 * t481;
t455 = t346 * t481;
t449 = -pkin(1) * t349 + qJ(2) * t510;
t448 = g(2) * t510 - g(3) * t345;
t32 = -qJD(6) * t391 + t144 * t483 + t346 * t407 + t350 * t76;
t446 = t32 * t351 + t98 * t484;
t130 = qJD(2) * t374 + t358;
t53 = t339 * t91 - t531 * (t130 + t400);
t443 = -t32 + t530;
t437 = t350 * t547;
t435 = 0.2e1 * t342 * t474;
t434 = t352 * t467;
t428 = -t33 * t504 + t565 * t96;
t163 = -t272 * t511 - t274 * t282 + t283 * t385;
t243 = -t282 * t341 + t344 * t511;
t135 = t163 * t347 - t243 * t351;
t421 = g(1) * t133 + g(2) * t135;
t420 = g(1) * t157 - g(2) * t162;
t419 = -g(1) * t241 - g(2) * t243;
t418 = g(1) * t353 + g(2) * t349;
t412 = -t12 * t346 + t350 * t410;
t411 = -t12 * t350 - t346 * t410;
t37 = pkin(11) * t184 + t539;
t270 = t279 * t351;
t148 = t185 * t347 + t270;
t149 = t185 * t351 - t520;
t71 = t121 * t531 - t339 * t128;
t69 = t279 * pkin(4) - t71;
t45 = t148 * pkin(5) - t149 * pkin(11) + t69;
t18 = t346 * t45 + t350 * t37;
t17 = -t346 * t37 + t350 * t45;
t43 = -t347 * t67 + t351 * t95;
t41 = -t347 * t70 + t351 * t84;
t277 = pkin(3) * t514 + t344 * t540;
t278 = pkin(3) * t509 - t341 * t540;
t334 = pkin(2) + t543;
t406 = t277 * t511 + t282 * t278 + t283 * t334 + t492;
t105 = t149 * t350 + t184 * t346;
t402 = (-qJ(2) * t463 + t320) * t340 - t276 * t343;
t321 = -pkin(1) * t476 + qJDD(2);
t398 = pkin(1) * t477 - t321 * t342;
t397 = -t482 * t547 - t536;
t395 = t282 * t344 + t468;
t15 = t347 * t89 + t351 * t54 + t84 * t481 - t484 * t70;
t390 = (t106 - t455) * t547;
t29 = -pkin(5) * t562 - t34;
t389 = -pkin(11) * t75 + t29 * t547;
t388 = t277 * t510 + t280 * t278 - t281 * t334 + t449;
t383 = -g(1) * t511 + t448;
t382 = g(1) * t135 - g(2) * t133 - g(3) * (-t189 * t347 - t270);
t136 = t163 * t351 + t243 * t347;
t155 = t189 * t351 - t520;
t381 = -g(1) * t136 + g(2) * t134 - g(3) * t155;
t380 = -g(1) * t163 + g(2) * t366 - g(3) * t189;
t378 = -g(1) * t243 + g(2) * t241 + g(3) * t279;
t377 = t280 * t509 - t281 * t352 + t348 * t467;
t376 = t384 * t399;
t6 = pkin(5) * t407 - t8;
t375 = t382 - t6;
t370 = t163 * pkin(4) - pkin(10) * t162 + t406;
t368 = -pkin(3) * t518 + t162 * pkin(4) + pkin(10) * t163 + t496;
t364 = -pkin(3) * t469 + t188 * pkin(4) + pkin(10) * t189 + t493;
t363 = pkin(4) * t366 + pkin(10) * t157 + t388;
t361 = -t347 * t563 - t351 * t407;
t359 = pkin(11) * qJD(6) * t547 - t375;
t357 = qJD(6) * t412 + t1 * t350 - t2 * t346;
t261 = t280 * t473;
t356 = -pkin(10) * t366 + t157 * pkin(4) - t261 + (-t434 - t519) * pkin(3);
t284 = -qJ(2) * t515 + t327;
t250 = t318 + (-qJ(2) * qJDD(1) - t478) * t515;
t213 = t268 * t279;
t200 = t283 * t352 + t348 * t395;
t199 = t352 * t395 - t518;
t104 = t149 * t346 - t350 * t184;
t103 = qJD(5) * t149 + t175 * t347;
t102 = -t351 * t175 + t185 * t484 + t279 * t481;
t87 = pkin(5) * t144 + pkin(11) * t439;
t86 = t136 * t350 - t162 * t346;
t85 = -t136 * t346 - t162 * t350;
t51 = qJD(6) * t105 - t102 * t346 - t350 * t172;
t50 = t350 * t102 + t149 * t483 - t346 * t172 - t184 * t482;
t38 = -pkin(5) * t384 - t43;
t36 = -pkin(5) * t184 - t41;
t28 = pkin(5) * t103 + pkin(11) * t102 + t53;
t22 = t34 * t350 + t346 * t87;
t21 = -t34 * t346 + t350 * t87;
t14 = -pkin(5) * t172 - t16;
t13 = pkin(11) * t172 + t15;
t4 = -qJD(6) * t18 - t13 * t346 + t28 * t350;
t3 = qJD(6) * t17 + t13 * t350 + t28 * t346;
t7 = [0, 0, 0, 0, 0, qJDD(1), -g(2) * t353 + t542, t418, 0, 0, t336 * t477, 0.2e1 * t337 * t340 * t475, t340 * t435, t338 * t477, t343 * t435, t345 ^ 2 * qJDD(1), g(1) * t281 - g(2) * t283 + t398 * t343 + (qJDD(1) * t284 + t250 - t427) * t345, -g(1) * t280 - g(2) * t282 - t398 * t340 + (-qJDD(1) * t285 - t251 - t312) * t345, t478 * t553 + (-t250 * t340 + t251 * t343 + (-t284 * t340 + t285 * t343) * qJDD(1) - t418) * t342, t251 * t285 + t250 * t284 - g(1) * t449 - g(2) * t492 + (-t321 * pkin(1) - qJD(2) * t402) * t342, -t181 * t236 - t223 * t225, t181 * t235 - t223 * t222 - t225 * t224 - t236 * t355, t181 * t279 - t223 * t399 - t236 * t268, -t222 * t224 + t235 * t355, -t224 * t399 + t235 * t268 + t279 * t355, t213, -g(1) * t377 - g(2) * t200 + t130 * t399 - t145 * t268 + t165 * t235 + t183 * t224 + t190 * t355 - t222 * t302 - t81 * t279, -g(1) * t545 - g(2) * t199 - t129 * t399 + t146 * t268 + t165 * t236 - t190 * t181 - t183 * t223 + t225 * t302 - t279 * t365, t129 * t222 - t130 * t225 + t137 * t223 - t138 * t224 + t145 * t181 - t146 * t355 + t235 * t365 - t81 * t236 + t419, -t365 * t146 + t138 * t129 + t81 * t145 + t137 * t130 + t165 * t190 + t183 * t302 - g(1) * (-pkin(2) * t281 + t449) - g(2) * (pkin(2) * t283 + t492) + t419 * pkin(9), t120 * t185 + t175 * t384, -t120 * t184 - t172 * t384 - t173 * t175 + t185 * t438, -t120 * t279 + t175 * t399 - t185 * t268, t172 * t173 - t184 * t438, -t172 * t399 + t184 * t268 - t279 * t438, t213, -g(1) * t366 - g(2) * t163 + t115 * t184 + t140 * t172 - t147 * t438 + t205 * t173 - t26 * t279 - t71 * t268 - t399 * t53, t115 * t185 + t147 * t120 + t140 * t175 + t205 * t384 + t72 * t268 + t27 * t279 - t399 * t54 + t420, -t120 * t71 - t172 * t64 - t173 * t54 - t175 * t63 - t184 * t27 - t185 * t26 + t384 * t53 + t438 * t72 + t419, -g(1) * t388 - g(2) * t406 + t115 * t147 + t140 * t205 + t26 * t71 + t27 * t72 - t63 * t53 + t64 * t54, -t102 * t144 - t149 * t76, t102 * t439 - t103 * t144 + t148 * t76 - t149 * t77, -t102 * t562 + t144 * t172 - t149 * t407 - t76 * t184, t103 * t439 + t148 * t77, -t103 * t562 + t148 * t407 - t172 * t439 - t77 * t184, t172 * t562 - t184 * t407, -g(1) * t134 - g(2) * t136 + t61 * t103 + t24 * t148 + t16 * t562 + t34 * t172 + t8 * t184 - t407 * t41 + t439 * t53 + t69 * t77, -t61 * t102 + t53 * t144 + t24 * t149 - t15 * t562 - t35 * t172 + t184 * t393 + t407 * t539 - t69 * t76 + t421, t102 * t34 - t103 * t35 - t144 * t16 + t148 * t393 - t149 * t8 - t15 * t439 + t41 * t76 - t539 * t77 - t420, -g(1) * t363 - g(2) * t370 + t35 * t15 + t34 * t16 + t24 * t69 - t393 * t539 + t8 * t41 + t61 * t53, -t105 * t32 - t50 * t98, t104 * t32 - t105 * t33 + t50 * t96 - t51 * t98, t103 * t98 + t105 * t75 - t148 * t32 - t50 * t547, t104 * t33 + t51 * t96, -t103 * t96 - t104 * t75 - t148 * t33 - t51 * t547, t103 * t547 + t148 * t75, -g(1) * t576 - g(2) * t86 - t410 * t103 + t6 * t104 + t14 * t96 + t2 * t148 + t17 * t75 + t29 * t51 + t36 * t33 + t4 * t547, g(1) * t577 - g(2) * t85 - t1 * t148 - t12 * t103 + t6 * t105 + t14 * t98 - t18 * t75 - t29 * t50 - t3 * t547 - t36 * t32, -t1 * t104 - t105 * t2 - t12 * t51 + t17 * t32 - t18 * t33 - t3 * t96 - t4 * t98 - t410 * t50 - t421, t1 * t18 + t12 * t3 + t2 * t17 - t410 * t4 + t6 * t36 + t29 * t14 - g(1) * (pkin(5) * t134 + pkin(11) * t133 + t363) - g(2) * (pkin(5) * t136 + pkin(11) * t135 + t370); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t340 * t505 - t475) * t342 (qJDD(1) * t340 + t343 * t505) * t342, -t354 * t553, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t402 - t542) * t342 + t448, 0, 0, 0, 0, 0, 0, t344 * (-t352 * t424 + t432) - t255 * t399 + (-t399 * t486 + t222 * t463 + (-t268 - t450) * t352) * t341, -t344 * t181 + t256 * t399 + (-t225 * t463 + t348 * t268 - t399 * t485) * t341, -t256 * t222 + t255 * t225 + ((qJD(3) * t222 + t181) * t352 + (qJD(3) * t225 - t355) * t348) * t341, -t137 * t255 - t138 * t256 + t165 * t344 + (-t183 * t463 - t348 * t365 + t352 * t81 + (-t137 * t348 + t138 * t352) * qJD(3)) * t341 + t383, 0, 0, 0, 0, 0, 0, -t173 * t431 - t271 * t268 - t344 * t438 - t399 * t495, t344 * t120 - t272 * t268 - t384 * t431 - t399 * t494, -t120 * t271 - t173 * t494 - t272 * t438 + t384 * t495, t115 * t344 + t26 * t271 - t27 * t272 + t494 * t64 - t495 * t63 + (-qJD(1) * t140 * t516 - t542) * t342 + t448, 0, 0, 0, 0, 0, 0, t245 * t407 - t271 * t77 + t439 * t495 - t497 * t562, t144 * t495 + t246 * t407 + t271 * t76 - t498 * t562, t144 * t497 - t245 * t76 - t246 * t77 - t439 * t498, -t24 * t271 - t245 * t8 - t246 * t393 - t34 * t497 + t35 * t498 + t495 * t61 + t383, 0, 0, 0, 0, 0, 0, t197 * t75 + t245 * t33 + t497 * t96 + t499 * t547, -t198 * t75 - t245 * t32 + t497 * t98 - t500 * t547, t197 * t32 - t198 * t33 - t499 * t98 - t500 * t96, t1 * t198 + t12 * t500 + t197 * t2 + t245 * t6 + t29 * t497 - t410 * t499 + t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t522, -t222 ^ 2 + t225 ^ 2, -t222 * t399 - t181, t522, t225 * t399 - t355, -t268, -g(1) * t199 + g(2) * t545 + g(3) * t235 + t138 * t416 - t183 * t225 + t417, g(1) * t200 - g(2) * t377 + g(3) * t236 + t137 * t399 - t183 * t222 + t365, 0, 0, t566, -t523 + t524, t120 + t554, -t566, t376 + t438, -t268, t66 * t399 - t140 * t384 + (-t225 * t173 - t268 * t531) * pkin(3) - t379 + t26, t67 * t399 + t140 * t173 + (-t225 * t384 + t268 * t339) * pkin(3) - t380 - t27 (-t120 * t531 + t339 * t438) * pkin(3) + (t64 - t66) * t384 + (t67 - t63) * t173, -t64 * t67 + t63 * t66 - g(1) * t496 + g(2) * t261 - g(3) * t493 + (g(2) * t434 + t26 * t531 - t140 * t225 + t27 * t339 + (g(1) * t283 + g(2) * t281 + g(3) * t515) * t348) * pkin(3), t144 * t351 * t562 - t347 * t76 (-t76 - t528) * t351 - t555 + t534, -t526 - t574, -t351 * t77 + t436 * t439, t361 + t525, -t562 * t384, t333 * t77 - t34 * t384 + t546 * t347 - t351 * t558 - t43 * t562 - t66 * t439, -t66 * t144 - t333 * t76 + t347 * t558 + t35 * t384 + t546 * t351 + t44 * t562, t439 * t44 + t144 * t43 + (-t173 * t34 - t332 * t77 - t393 + (t144 * t332 - t34) * qJD(5)) * t351 + (-t573 - t332 * t76 - t8 + (t332 * t439 - t35) * qJD(5)) * t347 + t380, t24 * t333 - t35 * t44 - t34 * t43 - t61 * t66 - g(1) * t368 - g(2) * t356 - g(3) * t364 + (-t8 * t347 - t393 * t351 + (-t34 * t351 - t347 * t35) * qJD(5)) * t332, -t32 * t504 + t369 * t98, -t557 + (-t470 + (t32 + t530) * t347) * t346 + t428 (t535 + t538) * t347 + t549 + t446, t33 * t346 * t347 + (t415 + t455) * t96, t537 + t390 + (t397 - t556) * t347, -t351 * t75 + t436 * t547, -t29 * t106 + t239 * t75 - t38 * t96 + t532 * t547 + t380 * t346 + (-t2 + (t29 * t346 + t332 * t96) * qJD(5) - t379 * t350) * t351 + (t29 * t482 + t332 * t33 + t6 * t346 - t410 * t562) * t347, -t29 * t107 - t240 * t75 - t38 * t98 - t533 * t547 + t380 * t350 + (t1 + (t29 * t350 + t332 * t98) * qJD(5) + t379 * t346) * t351 + (-t12 * t562 - t29 * t483 - t332 * t32 + t6 * t350) * t347, t106 * t12 - t107 * t410 + t239 * t32 - t240 * t33 - t532 * t98 - t533 * t96 + t412 * t481 + (qJD(6) * t411 - t1 * t346 - t2 * t350 - t379) * t347, t1 * t240 + t2 * t239 + t6 * t347 * t332 - g(1) * (t162 * t423 + t368) - g(2) * (t157 * t423 + t356) - g(3) * (t188 * t423 + t364) + (t332 * t481 - t38) * t29 + t533 * t12 - t532 * t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t376 - t438, t120 - t554, -t523 - t524, t173 * t64 + t384 * t63 + t115 + t378, 0, 0, 0, 0, 0, 0, t361 - t525, -t526 + t574 (t76 - t528) * t351 + t555 + t534, -t384 * t61 + (t35 * t562 + t8) * t351 + t575 * t347 + t378, 0, 0, 0, 0, 0, 0, -t537 + t390 + (t397 + t556) * t347 (-t535 + t538) * t347 - t549 + t446, t557 + (t347 * t443 + t470) * t346 + t428, -t106 * t410 - t107 * t12 + (-qJD(5) * t411 - t6) * t351 + (t29 * t562 + t357) * t347 + t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t527, t144 ^ 2 - t439 ^ 2, -t405 + t528, -t527, t144 * t173 - t440, -t407, -t61 * t144 + t382 - t447 + t573, t439 * t61 - t381 - t575, 0, 0, -t32 * t346 + t437 * t98 (-t32 - t572) * t350 + (-t33 - t571) * t346, -t144 * t98 + t437 * t547 + t536, -t33 * t350 + t552 * t96, t144 * t96 - t547 * t552 + t535, -t547 * t144, -pkin(5) * t33 + t144 * t410 - t21 * t547 + t346 * t389 - t35 * t96 - t350 * t359, pkin(5) * t32 + t12 * t144 + t22 * t547 + t346 * t359 - t35 * t98 + t350 * t389, t21 * t98 + t22 * t96 + ((-t33 + t529) * pkin(11) + t559) * t350 + (pkin(11) * t443 - t560) * t346 + t381, t410 * t21 - t12 * t22 - t29 * t35 + t375 * pkin(5) + (t357 + t381) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t541, -t96 ^ 2 + t98 ^ 2, -t32 + t572, -t541, -t33 + t571, t75, -t29 * t98 - g(1) * t85 - g(2) * t577 - g(3) * (-t155 * t346 - t188 * t350) + t560, t29 * t96 + g(1) * t86 - g(2) * t576 - g(3) * (-t155 * t350 + t188 * t346) - t559, 0, 0;];
tau_reg  = t7;
