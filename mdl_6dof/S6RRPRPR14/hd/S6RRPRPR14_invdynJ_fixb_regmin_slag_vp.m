% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPR14_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR14_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR14_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR14_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR14_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR14_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:37:01
% EndTime: 2019-03-09 11:37:18
% DurationCPUTime: 7.28s
% Computational Cost: add. (6020->612), mult. (14554->786), div. (0->0), fcn. (11010->10), ass. (0->296)
t212 = sin(pkin(6));
t216 = sin(qJ(2));
t330 = qJD(1) * qJD(2);
t312 = t216 * t330;
t294 = t212 * t312;
t220 = cos(qJ(2));
t327 = qJDD(1) * t220;
t412 = -t212 * t327 + t294;
t215 = sin(qJ(4));
t341 = qJD(1) * t220;
t318 = t212 * t341;
t162 = t215 * t318;
t213 = cos(pkin(6));
t343 = qJD(1) * t213;
t193 = qJD(2) + t343;
t219 = cos(qJ(4));
t125 = t193 * t219 - t162;
t120 = qJD(6) + t125;
t223 = -pkin(2) - pkin(9);
t342 = qJD(1) * t216;
t319 = t212 * t342;
t325 = pkin(1) * t343;
t348 = -pkin(8) * t319 + t220 * t325;
t331 = qJD(3) - t348;
t332 = pkin(3) * t319 + t331;
t68 = t193 * t223 + t332;
t309 = -qJ(3) * t216 - pkin(1);
t246 = t220 * t223 + t309;
t344 = qJD(1) * t212;
t82 = t246 * t344;
t30 = t215 * t82 - t219 * t68;
t349 = qJD(5) + t30;
t311 = t220 * t330;
t328 = qJDD(1) * t216;
t248 = t311 + t328;
t240 = t248 * t212;
t131 = qJDD(4) + t240;
t122 = t219 * t131;
t123 = t193 * t215 + t219 * t318;
t171 = qJD(4) + t319;
t256 = t171 * t215;
t411 = t123 * t193 + t171 * t256 - t122;
t209 = t212 ^ 2;
t410 = 0.2e1 * t209;
t370 = t123 * t171;
t329 = qJDD(1) * t213;
t295 = qJDD(2) + t329;
t55 = qJD(4) * t123 - t412 * t215 - t219 * t295;
t409 = t55 - t370;
t368 = t125 * t171;
t56 = -qJD(4) * t162 + t215 * t295 + (qJD(4) * t193 - t412) * t219;
t408 = -t56 + t368;
t173 = t295 * qJ(3);
t281 = t215 * pkin(4) - qJ(5) * t219;
t159 = qJ(3) + t281;
t407 = -t193 * qJD(3) - t173;
t336 = qJD(4) * t219;
t337 = qJD(4) * t215;
t406 = pkin(4) * t336 + qJ(5) * t337 + t331;
t217 = sin(qJ(1));
t354 = t217 * t220;
t221 = cos(qJ(1));
t355 = t216 * t221;
t148 = t213 * t355 + t354;
t352 = t220 * t221;
t357 = t216 * t217;
t150 = -t213 * t357 + t352;
t290 = -g(1) * t150 - g(2) * t148;
t350 = pkin(5) * t125 + t349;
t31 = t215 * t68 + t219 * t82;
t27 = -qJ(5) * t171 - t31;
t392 = pkin(5) * t123;
t20 = -t27 - t392;
t397 = pkin(4) + pkin(10);
t54 = -qJDD(6) + t55;
t405 = t397 * t54 + (t20 - t31 + t392) * t120;
t187 = pkin(8) * t318;
t139 = t216 * t325 + t187;
t110 = pkin(3) * t318 + t139;
t175 = t193 * qJ(3);
t79 = t175 + t110;
t250 = -qJ(5) * t125 + t79;
t32 = pkin(4) * t123 + t250;
t351 = t223 * t131;
t404 = t171 * t32 + t351;
t214 = sin(qJ(6));
t218 = cos(qJ(6));
t71 = t123 * t214 + t171 * t218;
t19 = qJD(6) * t71 + t131 * t214 - t218 * t56;
t361 = t212 * t220;
t363 = t212 * t216;
t347 = pkin(2) * t361 + qJ(3) * t363;
t391 = pkin(9) * t220;
t106 = (-pkin(1) - t391) * t212 - t347;
t396 = pkin(1) * t216;
t201 = t213 * t396;
t398 = pkin(3) + pkin(8);
t111 = (t361 * t398 + t201) * qJD(2);
t340 = qJD(2) * t216;
t317 = t212 * t340;
t186 = pkin(2) * t317;
t374 = qJ(3) * t220;
t280 = pkin(9) * t216 - t374;
t338 = qJD(3) * t216;
t236 = qJD(2) * t280 - t338;
t81 = t212 * t236 + t186;
t195 = pkin(8) * t363;
t395 = pkin(1) * t220;
t320 = -pkin(2) - t395;
t87 = pkin(3) * t363 + t195 + (-pkin(9) + t320) * t213;
t259 = t106 * t337 - t215 * t111 - t219 * t81 - t87 * t336;
t339 = qJD(2) * t220;
t14 = -t212 * (qJ(5) * t339 + qJD(5) * t216) + t259;
t147 = -t213 * t352 + t357;
t360 = t212 * t221;
t262 = t147 * t219 + t215 * t360;
t403 = -t148 * t218 + t214 * t262;
t402 = t148 * t214 + t218 * t262;
t367 = t131 * t215;
t399 = t171 ^ 2;
t401 = t125 * t193 + t219 * t399 + t367;
t400 = t125 ^ 2;
t394 = pkin(4) * t131;
t145 = t213 * t215 + t219 * t361;
t393 = pkin(4) * t145;
t388 = g(3) * t212;
t387 = pkin(5) - t223;
t386 = t219 * t106 + t215 * t87;
t191 = pkin(2) * t319;
t108 = t280 * t344 + t191;
t385 = t219 * t108 + t215 * t110;
t69 = -t218 * t123 + t171 * t214;
t384 = t120 * t69;
t383 = t120 * t71;
t382 = t171 * t27;
t381 = t171 * t31;
t260 = t171 * t69;
t380 = t171 * t71;
t334 = qJD(6) * t218;
t335 = qJD(6) * t214;
t18 = t123 * t334 + t218 * t131 - t171 * t335 + t214 * t56;
t379 = t18 * t218;
t378 = t214 * t54;
t377 = t215 * t18;
t50 = t218 * t54;
t308 = -qJ(5) * t215 - pkin(3);
t376 = -qJD(5) * t219 - (-pkin(4) * t219 + t308) * t319 + t406;
t306 = qJD(4) * t387;
t356 = t216 * t219;
t375 = -t219 * t306 - (pkin(5) * t356 + qJ(5) * t220) * t344 - t385;
t373 = qJ(5) * t123;
t321 = t215 * t361;
t146 = t213 * t219 - t321;
t372 = qJ(5) * t146;
t369 = t125 * t123;
t127 = t131 * qJ(5);
t364 = t209 * qJD(1) ^ 2;
t362 = t212 * t217;
t359 = t214 * t219;
t358 = t215 * t216;
t353 = t218 * t219;
t346 = pkin(8) * t361 + t201;
t210 = t216 ^ 2;
t345 = -t220 ^ 2 + t210;
t333 = qJD(2) - t193;
t326 = g(3) * t363;
t324 = pkin(1) * qJD(2) * t213;
t323 = pkin(1) * t329;
t322 = t220 * t364;
t128 = -t213 * qJ(3) - t346;
t316 = t212 * t339;
t314 = g(3) * t347;
t313 = pkin(1) * t410;
t307 = -t215 * t106 + t219 * t87;
t273 = t295 * pkin(2);
t299 = qJD(1) * t324;
t296 = qJD(2) * t187 + qJDD(1) * t195 + t216 * t299 - t220 * t323;
t64 = -t273 + qJDD(3) + t296;
t37 = pkin(3) * t240 - pkin(9) * t295 + t64;
t166 = pkin(2) * t294;
t45 = t166 + (qJD(1) * t236 + qJDD(1) * t246) * t212;
t305 = -t215 * t37 - t219 * t45 - t68 * t336 + t82 * t337;
t304 = t215 * t45 - t219 * t37 + t82 * t336 + t68 * t337;
t90 = t215 * t108;
t303 = -t110 * t219 + t90;
t300 = t120 * t214;
t298 = t216 * t322;
t297 = t412 * pkin(8) - t216 * t323 - t220 * t299;
t105 = pkin(3) * t361 - t128;
t149 = t213 * t354 + t355;
t98 = -t149 * t219 + t215 * t362;
t293 = -g(1) * t262 - g(2) * t98;
t263 = -t147 * t215 + t219 * t360;
t99 = t149 * t215 + t219 * t362;
t292 = g(1) * t263 + g(2) * t99;
t291 = g(1) * t147 - g(2) * t149;
t289 = g(1) * t148 - g(2) * t150;
t288 = g(1) * t221 + g(2) * t217;
t284 = qJDD(5) + t304;
t4 = -pkin(5) * t55 - t131 * t397 + t284;
t57 = t297 + t407;
t40 = -t412 * pkin(3) - t57;
t226 = qJ(5) * t55 - qJD(5) * t125 + t40;
t7 = t397 * t56 + t226;
t287 = t214 * t4 + t218 * t7;
t161 = t387 * t219;
t286 = -qJD(6) * t161 - (pkin(10) * qJD(4) - qJD(5)) * t219 + (-t219 * t397 + t308) * t319 - t406;
t151 = pkin(10) * t215 + t159;
t285 = qJD(6) * t151 + t215 * t306 + (pkin(5) * t358 - t220 * t397) * t344 + t303;
t261 = t214 * t220 + t216 * t353;
t117 = t261 * t344;
t283 = t218 * t336 + t117;
t242 = (-t214 * t356 + t218 * t220) * t212;
t118 = qJD(1) * t242;
t282 = t214 * t336 - t118;
t17 = -t171 * t397 + t350;
t24 = t123 * t397 + t250;
t9 = t17 * t218 - t214 * t24;
t10 = t17 * t214 + t218 * t24;
t26 = pkin(5) * t146 - t363 * t397 - t307;
t249 = t105 - t372;
t34 = t145 * t397 + t249;
t278 = -t214 * t34 + t218 * t26;
t277 = t214 * t26 + t218 * t34;
t275 = -t106 * t336 + t111 * t219 - t215 * t81 - t87 * t337;
t43 = -qJ(5) * t363 - t386;
t271 = -pkin(2) * t220 + t309;
t115 = t271 * t344;
t129 = -pkin(1) * t212 - t347;
t274 = qJD(2) * (-qJD(1) * t129 - t115);
t154 = t171 * qJD(5);
t6 = -t127 - t154 + t305;
t190 = t220 * t324;
t272 = -pkin(8) * t317 + t190;
t269 = g(1) * t149 + g(2) * t147 - g(3) * t361;
t268 = t221 * pkin(1) + t150 * pkin(2) + pkin(8) * t362 + qJ(3) * t149;
t266 = -t120 * t300 - t50;
t265 = t120 * t334 - t378;
t264 = -t120 * t335 - t50;
t97 = t145 * t214 + t218 * t363;
t96 = -t145 * t218 + t214 * t363;
t255 = -qJ(3) * t339 - t338;
t113 = t212 * t255 + t186;
t58 = t166 + (qJD(1) * t255 + qJDD(1) * t271) * t212;
t253 = qJD(1) * t113 + qJDD(1) * t129 + t58;
t247 = -g(1) * t99 + g(2) * t263 - g(3) * t146;
t244 = -pkin(1) * t217 - t148 * pkin(2) + pkin(8) * t360 - qJ(3) * t147;
t140 = t346 * qJD(2);
t243 = -t140 * t193 + t289;
t241 = -t120 ^ 2 * t218 + t378;
t205 = t213 * qJD(3);
t86 = -t317 * t398 + t190 + t205;
t238 = t290 - t297;
t237 = (t333 * t341 + t328) * t212;
t2 = -qJD(6) * t10 - t214 * t7 + t218 * t4;
t235 = g(1) * t98 - g(2) * t262 + g(3) * t145 - t304;
t234 = t247 - t305;
t233 = qJD(4) * t171 * t223 - t290 + t326;
t232 = -t139 * t193 - t269 + t296;
t11 = pkin(4) * t56 + t226;
t231 = -t11 + t233;
t230 = -t233 + t40;
t94 = qJD(4) * t145 - t215 * t317;
t229 = qJ(5) * t94 - qJD(5) * t146 + t86;
t5 = -pkin(5) * t56 - t6;
t228 = t5 + (t120 * t397 + t373) * t120 + t247;
t227 = t125 * t32 + qJDD(5) - t235;
t160 = t387 * t215;
t143 = t149 * pkin(2);
t141 = t147 * pkin(2);
t137 = -qJ(3) * t318 + t191;
t130 = t213 * t320 + t195;
t119 = -t205 - t272;
t107 = -t175 - t139;
t104 = -pkin(2) * t193 + t331;
t95 = -qJD(4) * t321 + t213 * t336 - t219 * t317;
t84 = t115 * t319;
t67 = pkin(4) * t125 + t373;
t60 = t150 * t218 + t214 * t98;
t59 = -t150 * t214 + t218 * t98;
t49 = t249 + t393;
t48 = -pkin(4) * t318 + t303;
t47 = -qJ(5) * t318 - t385;
t44 = -pkin(4) * t363 - t307;
t42 = -qJD(6) * t96 + t214 * t95 + t218 * t316;
t41 = qJD(6) * t97 + t214 * t316 - t95 * t218;
t28 = -pkin(5) * t145 - t43;
t25 = -pkin(4) * t171 + t349;
t21 = pkin(4) * t95 + t229;
t16 = t397 * t95 + t229;
t15 = -pkin(4) * t316 - t275;
t13 = -pkin(5) * t95 - t14;
t12 = -pkin(5) * t94 - t316 * t397 - t275;
t8 = t284 - t394;
t1 = t9 * qJD(6) + t287;
t3 = [qJDD(1), g(1) * t217 - g(2) * t221, t288 (qJDD(1) * t210 + 0.2e1 * t216 * t311) * t209 (t216 * t327 - t330 * t345) * t410 (t193 * t339 + t216 * qJDD(2) + (t311 + 0.2e1 * t328) * t213) * t212 (-t193 * t340 + t220 * qJDD(2) + (-t312 + 0.2e1 * t327) * t213) * t212, t295 * t213 (t213 * t395 - t195) * t295 - t296 * t213 + (-t312 + t327) * t313 + t243, -t193 * t272 + t213 * t297 - t248 * t313 - t295 * t346 - t291 ((qJD(2) * t104 - qJDD(1) * t128 - t57 + (qJD(2) * t130 - t119) * qJD(1)) * t220 + (qJD(2) * t107 + qJDD(1) * t130 + t64 + (qJD(2) * t128 + t140) * qJD(1)) * t216 - t288) * t212, t130 * t295 + t64 * t213 + (t216 * t274 + t220 * t253) * t212 - t243, -t119 * t193 - t128 * t295 - t57 * t213 + (-t216 * t253 + t220 * t274) * t212 + t291, -g(1) * t244 - g(2) * t268 + t104 * t140 + t107 * t119 + t115 * t113 + t57 * t128 + t58 * t129 + t64 * t130, -t125 * t94 - t146 * t55, t123 * t94 - t125 * t95 + t145 * t55 - t146 * t56, t131 * t146 - t171 * t94 + (t125 * t339 - t216 * t55) * t212, -t131 * t145 - t171 * t95 + (-t123 * t339 - t216 * t56) * t212 (t131 * t216 + t171 * t339) * t212, t275 * t171 + t307 * t131 + t86 * t123 + t105 * t56 + t40 * t145 + t79 * t95 + (-t216 * t304 - t30 * t339) * t212 - t292, t259 * t171 - t386 * t131 + t86 * t125 - t105 * t55 + t40 * t146 - t79 * t94 + (t216 * t305 - t31 * t339) * t212 - t293, t123 * t14 + t125 * t15 + t145 * t6 + t146 * t8 - t25 * t94 + t27 * t95 + t43 * t56 - t44 * t55 + t289, -t11 * t145 - t123 * t21 + t131 * t44 + t15 * t171 - t32 * t95 - t49 * t56 + (t216 * t8 + t25 * t339) * t212 + t292, -t11 * t146 - t125 * t21 - t131 * t43 - t14 * t171 + t32 * t94 + t49 * t55 + (-t216 * t6 - t27 * t339) * t212 + t293, t11 * t49 + t32 * t21 + t6 * t43 + t27 * t14 + t8 * t44 + t25 * t15 - g(1) * (pkin(3) * t360 + pkin(4) * t263 - pkin(9) * t148 + qJ(5) * t262 + t244) - g(2) * (pkin(3) * t362 + pkin(4) * t99 + pkin(9) * t150 + qJ(5) * t98 + t268) t18 * t97 + t42 * t71, -t18 * t96 - t19 * t97 - t41 * t71 - t42 * t69, t120 * t42 + t146 * t18 - t54 * t97 - t71 * t94, -t120 * t41 - t146 * t19 + t54 * t96 + t69 * t94, -t120 * t94 - t146 * t54 (-qJD(6) * t277 + t12 * t218 - t16 * t214) * t120 - t278 * t54 + t2 * t146 - t9 * t94 + t13 * t69 + t28 * t19 + t5 * t96 + t20 * t41 - g(1) * t403 - g(2) * t60 -(qJD(6) * t278 + t12 * t214 + t16 * t218) * t120 + t277 * t54 - t1 * t146 + t10 * t94 + t13 * t71 + t28 * t18 + t5 * t97 + t20 * t42 - g(1) * t402 - g(2) * t59; 0, 0, 0, -t298, t345 * t364, t237 (-t333 * t342 + t327) * t212, t295, t364 * t396 - t232, pkin(1) * t322 + t193 * t348 - t238 + t326 ((-pkin(2) * t216 + t374) * qJDD(1) + ((-qJ(3) * qJD(2) - t107 - t139) * t216 + (-pkin(2) * qJD(2) - t104 + t331) * t220) * qJD(1)) * t212, -t137 * t318 + qJDD(3) + t232 - 0.2e1 * t273 + t84, t173 + t331 * t193 + (-g(3) * t216 + (t115 * t220 + t137 * t216) * qJD(1)) * t212 + t238 - t407, -t57 * qJ(3) - t64 * pkin(2) - t115 * t137 - t104 * t139 - g(1) * (qJ(3) * t150 - t143) - g(2) * (qJ(3) * t148 - t141) - t314 - t331 * t107, -t215 * t368 - t219 * t55 (-t56 - t368) * t219 + (t55 + t370) * t215, -t171 * t337 + t122 + (-t125 * t220 - t171 * t358) * t344, -t171 * t336 - t367 + (t123 * t220 - t171 * t356) * t344, -t171 * t318, qJ(3) * t56 + t332 * t123 + t230 * t215 + t351 * t219 + t30 * t318 + (t90 + (-t110 + t79) * t219) * t171, -qJ(3) * t55 + t385 * t171 + t31 * t318 + t332 * t125 + (-t171 * t79 - t351) * t215 + t230 * t219, -t123 * t47 - t125 * t48 + (t27 * t319 + t223 * t55 + t8 + (-t123 * t223 + t27) * qJD(4)) * t219 + (-t25 * t319 - t223 * t56 + t6 + (t125 * t223 - t25) * qJD(4)) * t215 + t269, -t376 * t123 - t159 * t56 - t171 * t48 + t231 * t215 - t219 * t404 - t25 * t318, -t376 * t125 + t159 * t55 + t171 * t47 + t215 * t404 + t231 * t219 + t27 * t318, -t27 * t47 - t25 * t48 - g(1) * (-pkin(9) * t149 - t143) - g(2) * (-pkin(9) * t147 - t141) - t314 + t376 * t32 - (t216 * t281 + t391) * t388 + (-t6 * t215 - t8 * t219 + (t215 * t25 - t219 * t27) * qJD(4)) * t223 + (t11 + t290) * t159, t214 * t377 + (t215 * t334 + t282) * t71, t117 * t71 + t118 * t69 + (-t214 * t69 + t218 * t71) * t336 + (t379 - t19 * t214 + (-t214 * t71 - t218 * t69) * qJD(6)) * t215, t18 * t219 + t282 * t120 + (t265 - t380) * t215, -t19 * t219 + t283 * t120 + (t260 + t264) * t215, -t120 * t256 - t219 * t54 -(-t151 * t214 + t161 * t218) * t54 + t2 * t219 - t160 * t19 - g(1) * (-t149 * t218 - t150 * t359) - g(2) * (-t147 * t218 - t148 * t359) + t375 * t69 - g(3) * t242 - t283 * t20 + (t214 * t286 - t218 * t285) * t120 + (-t171 * t9 + t20 * t335 - t5 * t218) * t215 (t151 * t218 + t161 * t214) * t54 - t1 * t219 - t160 * t18 - g(1) * (t149 * t214 - t150 * t353) - g(2) * (t147 * t214 - t148 * t353) + t375 * t71 + t261 * t388 + t282 * t20 + (t214 * t285 + t218 * t286) * t120 + (t10 * t171 + t20 * t334 + t5 * t214) * t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, t295 + t298, -t193 ^ 2 - t210 * t364, t107 * t193 - t269 + t64 + t84, 0, 0, 0, 0, 0, -t411, -t401, t408 * t215 + t409 * t219, t411, t401, -t193 * t32 + (-t8 - t382) * t219 + (t171 * t25 - t6) * t215 - t269, 0, 0, 0, 0, 0, t215 * t19 + (t214 * t193 + t218 * t256) * t120 + (t260 - t264) * t219, t377 + (t218 * t193 - t214 * t256) * t120 + (t265 + t380) * t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t369, -t123 ^ 2 + t400, -t409, t408, t131, -t125 * t79 + t235 + t381, t123 * t79 - t171 * t30 - t234, pkin(4) * t55 - qJ(5) * t56 + (-t27 - t31) * t125 + (t25 - t349) * t123, t123 * t67 + t227 - t381 - 0.2e1 * t394, -t123 * t32 + t125 * t67 + t171 * t349 + 0.2e1 * t127 + t154 + t234, -t6 * qJ(5) - t8 * pkin(4) - t32 * t67 - t25 * t31 - g(1) * (-pkin(4) * t98 + qJ(5) * t99) - g(2) * (pkin(4) * t262 - qJ(5) * t263) - g(3) * (t372 - t393) - t349 * t27, -t300 * t71 + t379 (-t19 - t383) * t218 + (-t18 + t384) * t214, t123 * t71 + t266, -t123 * t69 + t241, t120 * t123, qJ(5) * t19 + t9 * t123 + t228 * t214 + t218 * t405 + t350 * t69, qJ(5) * t18 - t10 * t123 - t214 * t405 + t228 * t218 + t350 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t409, t131 - t369, -t399 - t400, t227 + t382 - t394, 0, 0, 0, 0, 0, t266 - t260, t241 - t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71 * t69, -t69 ^ 2 + t71 ^ 2, t18 + t384, -t19 + t383, -t54, -g(1) * t59 + g(2) * t402 + g(3) * t96 + t10 * t120 - t20 * t71 + t2, t20 * t69 + g(1) * t60 - g(2) * t403 + g(3) * t97 - t287 + (t120 - qJD(6)) * t9;];
tau_reg  = t3;
