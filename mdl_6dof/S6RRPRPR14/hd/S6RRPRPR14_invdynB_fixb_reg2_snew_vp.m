% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR14_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR14_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR14_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR14_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR14_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR14_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:00:19
% EndTime: 2019-05-06 17:01:15
% DurationCPUTime: 45.58s
% Computational Cost: add. (100862->830), mult. (229327->1203), div. (0->0), fcn. (166987->10), ass. (0->621)
t975 = cos(qJ(2));
t1086 = qJD(1) * t975;
t967 = sin(pkin(6));
t1071 = t967 * t1086;
t968 = cos(pkin(6));
t959 = t968 * qJD(1) + qJD(2);
t970 = sin(qJ(4));
t974 = cos(qJ(4));
t912 = t1071 * t974 + t959 * t970;
t914 = -t970 * t1071 + t959 * t974;
t1121 = t914 * t912;
t971 = sin(qJ(2));
t926 = (qJD(2) * t1086 + qJDD(1) * t971) * t967;
t918 = qJDD(4) + t926;
t1165 = t1121 + t918;
t1192 = t1165 * t970;
t1149 = t914 ^ 2;
t1087 = qJD(1) * t971;
t1072 = t967 * t1087;
t947 = qJD(4) + t1072;
t941 = t947 ^ 2;
t862 = t1149 + t941;
t757 = t862 * t974 + t1192;
t1080 = qJDD(1) * t975;
t952 = qJD(2) * t1072;
t927 = t1080 * t967 - t952;
t958 = qJDD(1) * t968 + qJDD(2);
t1019 = t970 * t927 - t974 * t958;
t1082 = qJD(4) + t947;
t985 = -t1082 * t912 - t1019;
t1033 = t757 * t975 + t971 * t985;
t1191 = t1165 * t974;
t760 = t862 * t970 - t1191;
t640 = t1033 * t968 - t967 * t760;
t680 = t757 * t971 - t975 * t985;
t972 = sin(qJ(1));
t976 = cos(qJ(1));
t585 = t640 * t976 - t680 * t972;
t1269 = pkin(7) * t585;
t588 = t640 * t972 + t680 * t976;
t1268 = pkin(7) * t588;
t638 = t1033 * t967 + t968 * t760;
t1267 = pkin(8) * (t638 * t967 + t640 * t968);
t1188 = -t918 + t1121;
t1194 = t1188 * t970;
t879 = -t941 + t1149;
t763 = t879 * t974 + t1194;
t1083 = qJD(4) - t947;
t984 = t1083 * t912 + t1019;
t1031 = t763 * t975 - t971 * t984;
t1193 = t1188 * t974;
t768 = -t879 * t970 + t1193;
t648 = t1031 * t968 + t967 * t768;
t689 = t763 * t971 + t975 * t984;
t1266 = t648 * t972 + t689 * t976;
t1265 = t648 * t976 - t689 * t972;
t1264 = pkin(1) * t638;
t1263 = pkin(1) * t640;
t1259 = t1031 * t967 - t968 * t768;
t1258 = pkin(8) * t680;
t1150 = t912 ^ 2;
t850 = -t941 - t1150;
t747 = t850 * t970 - t1193;
t1255 = t747 * t971;
t1254 = t747 * t975;
t749 = t850 * t974 + t1194;
t1253 = t967 * t749;
t1251 = t968 * t749;
t1146 = -pkin(2) - pkin(9);
t1249 = t1146 * t747;
t1248 = t1146 * t749;
t1247 = -pkin(3) * t747 + qJ(3) * t749;
t977 = qJD(1) ^ 2;
t1095 = t971 * t977;
t965 = t967 ^ 2;
t1075 = t965 * t1095;
t1061 = t975 * t1075;
t925 = t958 - t1061;
t1117 = t925 * t971;
t955 = t959 ^ 2;
t1111 = t965 * t977;
t1148 = t971 ^ 2;
t956 = t1148 * t1111;
t904 = -t956 - t955;
t1023 = t904 * t975 - t1117;
t936 = t959 * t1071;
t1171 = t936 + t926;
t795 = t1023 * t968 - t1171 * t967;
t1116 = t925 * t975;
t853 = t904 * t971 + t1116;
t728 = t795 * t976 - t853 * t972;
t1246 = pkin(7) * t728;
t729 = t795 * t972 + t853 * t976;
t1245 = pkin(7) * t729;
t924 = t958 + t1061;
t1118 = t924 * t975;
t966 = t975 ^ 2;
t957 = t966 * t1111;
t931 = -t957 - t955;
t1021 = t931 * t971 + t1118;
t1073 = t959 * t1087;
t884 = -t952 + (-t1073 + t1080) * t967;
t813 = t1021 * t968 + t967 * t884;
t1119 = t924 * t971;
t869 = -t931 * t975 + t1119;
t741 = t813 * t976 - t869 * t972;
t1244 = pkin(7) * t741;
t744 = t813 * t972 + t869 * t976;
t1243 = pkin(7) * t744;
t878 = t941 - t1150;
t766 = t878 * t970 - t1191;
t1242 = t766 * t971;
t1241 = t766 * t975;
t769 = t878 * t974 + t1192;
t1239 = t967 * t769;
t1237 = t968 * t769;
t1236 = t1146 * t757;
t1235 = t1146 * t760;
t1234 = pkin(3) * t757 + qJ(3) * t760;
t807 = t1021 * t967 - t968 * t884;
t1233 = pkin(8) * (t807 * t967 + t813 * t968);
t1103 = t968 * t1171;
t793 = t1023 * t967 + t1103;
t1232 = pkin(8) * (t793 * t967 + t795 * t968);
t1231 = pkin(1) * t793;
t1230 = pkin(1) * t795;
t1229 = pkin(1) * t807;
t1228 = pkin(1) * t813;
t930 = t957 - t955;
t1020 = t930 * t971 + t1116;
t888 = -t952 + (t1073 + t1080) * t967;
t811 = t1020 * t968 - t967 * t888;
t867 = -t930 * t975 + t1117;
t1225 = t811 * t972 + t867 * t976;
t1224 = t811 * t976 - t867 * t972;
t929 = -t956 + t955;
t1022 = t929 * t975 + t1119;
t887 = -t936 + t926;
t809 = t1022 * t968 - t967 * t887;
t864 = -t929 * t971 + t1118;
t1223 = t809 * t972 - t864 * t976;
t1222 = t809 * t976 + t864 * t972;
t1114 = t947 * t974;
t845 = -qJD(4) * t912 - t1019;
t1009 = -t1114 * t914 - t845 * t970;
t1076 = t975 * t1121;
t1158 = -t1009 * t971 + t1076;
t1115 = t947 * t970;
t1057 = -t1115 * t914 + t974 * t845;
t1077 = t971 * t1121;
t1157 = t1009 * t975 + t1077;
t1184 = -t1057 * t967 + t1157 * t968;
t1221 = t1158 * t976 - t1184 * t972;
t1220 = t1158 * t972 + t1184 * t976;
t1062 = t974 * t927 + t970 * t958;
t844 = qJD(4) * t914 + t1062;
t1010 = -t1115 * t912 + t844 * t974;
t1156 = -t1010 * t971 - t1076;
t1011 = t1114 * t912 + t844 * t970;
t1155 = t1010 * t975 - t1077;
t1186 = -t1011 * t967 + t1155 * t968;
t1219 = t1156 * t976 - t1186 * t972;
t1218 = t1156 * t972 + t1186 * t976;
t889 = t947 * t914;
t797 = t844 + t889;
t1215 = pkin(4) * t797;
t1214 = pkin(8) * t853;
t1213 = pkin(8) * t869;
t1160 = -t1150 - t1149;
t1212 = pkin(3) * t1160;
t1203 = qJ(3) * t1160;
t1198 = t1160 * t971;
t1197 = t1160 * t975;
t1161 = t1149 - t1150;
t1196 = t1161 * t971;
t1195 = t1161 * t975;
t969 = sin(qJ(6));
t973 = cos(qJ(6));
t872 = -t973 * t912 + t947 * t969;
t874 = t912 * t969 + t947 * t973;
t816 = t874 * t872;
t841 = qJDD(6) + t845;
t1172 = -t816 + t841;
t1190 = t1172 * t969;
t1189 = t1172 * t973;
t1187 = t1011 * t968 + t1155 * t967;
t1185 = t1057 * t968 + t1157 * t967;
t1005 = (t912 * t970 + t914 * t974) * t947;
t1006 = (-t912 * t974 + t914 * t970) * t947;
t1099 = t968 * t975;
t1100 = t968 * t971;
t1152 = t1005 * t1099 - t1006 * t967 + t918 * t1100;
t1159 = -t1005 * t971 + t975 * t918;
t1183 = t1152 * t976 + t1159 * t972;
t1182 = -t1152 * t972 + t1159 * t976;
t1181 = qJ(3) * t1171;
t1180 = t970 * t984;
t1179 = t970 * t985;
t1176 = t974 * t984;
t1175 = t974 * t985;
t1089 = qJD(1) * t959;
t1168 = (-t968 * t977 + t1089) * t965;
t1122 = t912 * t947;
t1106 = t967 * t971;
t1139 = pkin(8) * t967;
t950 = g(1) * t972 - t976 * g(2);
t920 = qJDD(1) * pkin(1) + t1139 * t977 + t950;
t951 = g(1) * t976 + g(2) * t972;
t921 = -pkin(1) * t977 + qJDD(1) * t1139 - t951;
t852 = -g(3) * t1106 + t920 * t1100 + t975 * t921;
t1143 = pkin(2) * t975;
t1056 = -qJ(3) * t971 - t1143;
t1088 = qJD(1) * t967;
t922 = t1056 * t1088;
t1016 = -t955 * pkin(2) + t958 * qJ(3) + t922 * t1071 + t852;
t923 = pkin(3) * t1072 - pkin(9) * t959;
t982 = t927 * pkin(3) - pkin(9) * t957 + t923 * t959 + t1016;
t1164 = t982 + (t1122 - t845) * qJ(5) + t1215 - 0.2e1 * qJD(5) * t914;
t1162 = t922 * t1072 + qJDD(3);
t1154 = t1020 * t967 + t968 * t888;
t1153 = t1022 * t967 + t968 * t887;
t1105 = t967 * t975;
t1151 = t1005 * t1105 + t1006 * t968 + t918 * t1106;
t870 = t872 ^ 2;
t871 = t874 ^ 2;
t906 = qJD(6) + t914;
t903 = t906 ^ 2;
t1147 = 0.2e1 * qJD(5);
t1145 = -pkin(4) - pkin(10);
t1144 = pkin(2) * t971;
t1142 = pkin(4) * t970;
t1141 = pkin(4) * t974;
t1024 = -t887 * t975 + t888 * t971;
t933 = -t956 - t957;
t781 = t1024 * t968 - t967 * t933;
t820 = t887 * t971 + t888 * t975;
t712 = t781 * t976 + t820 * t972;
t1140 = pkin(7) * t712;
t1138 = pkin(8) * t968;
t1137 = t927 * pkin(2);
t1136 = t968 * g(3);
t1135 = qJ(3) * t975;
t739 = t816 + t841;
t1134 = t739 * t969;
t1133 = t739 * t973;
t1126 = t884 * t971;
t1125 = t884 * t975;
t1124 = t906 * t969;
t1123 = t906 * t973;
t1120 = t918 * qJ(5);
t1113 = t955 * qJ(3);
t1112 = t958 * t967;
t1060 = t959 * t1072;
t934 = pkin(2) * t1060;
t1067 = -t934 + t1136;
t1070 = qJD(3) * t1087;
t948 = -0.2e1 * t967 * t1070;
t720 = -pkin(3) * t957 - t926 * qJ(3) + t948 + t1146 * t927 + (-t920 + (-t1135 * t959 - t923 * t971) * qJD(1)) * t967 - t1067;
t1064 = -t920 * t1099 + t971 * t921;
t723 = t926 * pkin(3) - t1113 + t1146 * t958 + (-pkin(9) * t1075 + (-pkin(3) * t1089 + g(3)) * t967) * t975 + t1064 + t1162;
t645 = t974 * t720 + t970 * t723;
t857 = pkin(4) * t912 - qJ(5) * t914;
t1017 = -t941 * pkin(4) - t912 * t857 + t645;
t877 = pkin(5) * t914 - pkin(10) * t947;
t580 = t1120 - t844 * pkin(5) - t1150 * pkin(10) + (t1147 + t877) * t947 + t1017;
t1098 = t969 * t580;
t1085 = qJD(3) * t959;
t946 = 0.2e1 * t1085;
t719 = t946 + t982;
t1097 = t970 * t719;
t891 = t967 * t920 + t1136;
t1096 = t971 * t891;
t1094 = t973 * t580;
t1093 = t974 * t719;
t1092 = t975 * t891;
t1091 = -t970 * t720 + t974 * t723;
t1090 = pkin(1) * t781 + t820 * t1139;
t1081 = qJD(6) + t906;
t1079 = t970 * t816;
t1078 = t974 * t816;
t1074 = t959 * t1088;
t779 = t1024 * t967 + t968 * t933;
t1069 = -pkin(1) * t779 + t820 * t1138;
t1068 = -qJ(5) * t970 - pkin(3);
t1066 = qJ(5) * t974 - qJ(3);
t1059 = t914 * t857 + qJDD(5) - t1091;
t1007 = -t918 * pkin(4) + t1059;
t618 = t941 * qJ(5) - t1007;
t578 = t1188 * pkin(10) + (t845 + t1122) * pkin(5) - t618;
t631 = t946 + t1164;
t593 = -pkin(5) * t1150 + pkin(10) * t844 - t877 * t914 + t631;
t539 = -t973 * t578 + t593 * t969;
t1065 = -t973 * t844 + t969 * t918;
t895 = -t950 * t972 - t976 * t951;
t943 = qJDD(1) * t976 - t972 * t977;
t1058 = -pkin(7) * t943 - g(3) * t972;
t1055 = -t1096 - t1214;
t1054 = t1092 - t1213;
t540 = t578 * t969 + t593 * t973;
t508 = -t973 * t539 + t969 * t540;
t498 = -t508 * t974 + t580 * t970;
t509 = t969 * t539 + t973 * t540;
t1053 = -t498 * t975 + t509 * t971;
t989 = t1147 * t947 + t1017;
t615 = t989 + t1120;
t554 = t615 * t970 + t618 * t974;
t1052 = -t554 * t975 + t631 * t971;
t569 = t1091 * t974 + t970 * t645;
t1051 = -t569 * t975 + t719 * t971;
t1027 = t969 * t844 + t973 * t918;
t753 = -qJD(6) * t872 + t1027;
t837 = t906 * t872;
t700 = t753 + t837;
t991 = (-qJD(6) + t906) * t874 - t1065;
t626 = -t700 * t973 + t969 * t991;
t754 = -t870 - t871;
t595 = -t626 * t974 + t754 * t970;
t628 = t700 * t969 + t973 * t991;
t1050 = -t595 * t975 + t628 * t971;
t696 = t1081 * t874 + t1065;
t699 = t753 - t837;
t625 = t696 * t969 - t699 * t973;
t815 = t871 - t870;
t603 = -t625 * t974 - t815 * t970;
t627 = -t696 * t973 - t699 * t969;
t1049 = t603 * t975 + t627 * t971;
t771 = -t903 - t870;
t666 = t771 * t969 + t1189;
t613 = -t666 * t974 + t696 * t970;
t667 = t771 * t973 - t1190;
t1048 = -t613 * t975 + t667 * t971;
t806 = -t871 - t903;
t671 = t806 * t973 - t1134;
t701 = -t1081 * t872 + t1027;
t619 = -t671 * t974 + t701 * t970;
t672 = -t806 * t969 - t1133;
t1047 = -t619 * t975 + t672 * t971;
t829 = t870 - t903;
t683 = -t829 * t969 - t1133;
t621 = -t683 * t974 - t970 * t991;
t685 = t829 * t973 - t1134;
t1046 = t621 * t975 + t685 * t971;
t830 = -t871 + t903;
t682 = -t830 * t973 - t1190;
t622 = -t682 * t974 - t700 * t970;
t684 = -t830 * t969 + t1189;
t1045 = t622 * t975 + t684 * t971;
t570 = -t1091 * t970 + t974 * t645;
t694 = -t1123 * t874 - t753 * t969;
t653 = -t694 * t974 - t1079;
t695 = -t1124 * t874 + t753 * t973;
t1044 = t653 * t975 + t695 * t971;
t752 = -qJD(6) * t874 - t1065;
t692 = -t1124 * t872 - t752 * t973;
t654 = -t692 * t974 + t1079;
t693 = t1123 * t872 - t752 * t969;
t1043 = t654 * t975 + t693 * t971;
t745 = (t872 * t969 + t874 * t973) * t906;
t690 = -t745 * t974 - t841 * t970;
t746 = (-t872 * t973 + t874 * t969) * t906;
t1042 = t690 * t975 + t746 * t971;
t796 = t1082 * t914 + t1062;
t702 = t796 * t970 - t1175;
t1041 = t702 * t975 + t1196;
t703 = t797 * t970 - t1175;
t1040 = t703 * t975 + t1196;
t798 = -t844 + t889;
t704 = t798 * t970 + t1176;
t1039 = -t704 * t975 + t1198;
t804 = -t1083 * t914 - t1062;
t705 = t804 * t970 + t1176;
t1038 = -t705 * t975 + t1198;
t1037 = t796 * t971 - t1254;
t1036 = -t797 * t971 + t1254;
t761 = t946 + t1016;
t751 = -pkin(2) * t933 + t761;
t851 = g(3) * t1105 + t1064;
t987 = t851 + t1162;
t981 = -t958 * pkin(2) + t987;
t755 = (-t933 - t955) * qJ(3) + t981;
t1035 = t751 * t975 + t755 * t971;
t773 = -t981 + t1113;
t1032 = t761 * t971 + t773 * t975;
t1029 = -t798 * t971 - t1241;
t1028 = t804 * t971 + t1241;
t1026 = -t975 * t851 + t971 * t852;
t756 = t851 * t971 + t852 * t975;
t1025 = t1171 * t975 + t1126;
t894 = t950 * t976 - t951 * t972;
t1008 = (-t779 * t967 - t781 * t968) * pkin(8);
t481 = pkin(5) * t580 + t1145 * t509;
t482 = pkin(5) * t508 - qJ(5) * t509;
t499 = t508 * t970 + t580 * t974;
t462 = pkin(3) * t509 + t1146 * t499 - t974 * t481 - t970 * t482;
t470 = pkin(3) * t498 - qJ(3) * t499 + qJ(5) * t580 + t1145 * t508;
t480 = t498 * t971 + t509 * t975;
t1003 = pkin(8) * t480 + t462 * t975 + t470 * t971;
t494 = pkin(5) * t754 + t1145 * t628 - t509;
t562 = pkin(5) * t626 - qJ(5) * t628;
t596 = t626 * t970 + t754 * t974;
t479 = pkin(3) * t628 + t1146 * t596 - t974 * t494 - t970 * t562;
t484 = pkin(3) * t595 - qJ(3) * t596 + qJ(5) * t754 + t1145 * t626 - t508;
t551 = t595 * t971 + t628 * t975;
t1002 = pkin(8) * t551 + t479 * t975 + t484 * t971;
t522 = pkin(5) * t666 - qJ(5) * t667 - t539;
t534 = pkin(5) * t696 + t1145 * t667 + t1094;
t614 = t666 * t970 + t696 * t974;
t486 = pkin(3) * t667 + t1146 * t614 - t970 * t522 - t974 * t534;
t511 = pkin(3) * t613 - qJ(3) * t614 + qJ(5) * t696 + t1145 * t666 + t1098;
t567 = t613 * t971 + t667 * t975;
t1001 = pkin(8) * t567 + t486 * t975 + t511 * t971;
t523 = pkin(5) * t671 - qJ(5) * t672 - t540;
t536 = pkin(5) * t701 + t1145 * t672 - t1098;
t620 = t671 * t970 + t701 * t974;
t488 = pkin(3) * t672 + t1146 * t620 - t970 * t523 - t974 * t536;
t515 = pkin(3) * t619 - qJ(3) * t620 + qJ(5) * t701 + t1145 * t671 + t1094;
t568 = t619 * t971 + t672 * t975;
t1000 = pkin(8) * t568 + t488 * t975 + t515 * t971;
t555 = t615 * t974 - t618 * t970;
t497 = t1146 * t555 + (-t1068 + t1141) * t631;
t500 = pkin(3) * t554 + pkin(4) * t618 - qJ(3) * t555 + qJ(5) * t615;
t535 = t554 * t971 + t631 * t975;
t999 = pkin(8) * t535 + t497 * t975 + t500 * t971;
t527 = pkin(3) * t719 + t1146 * t570;
t533 = pkin(3) * t569 - qJ(3) * t570;
t557 = t569 * t971 + t719 * t975;
t998 = pkin(8) * t557 + t527 * t975 + t533 * t971;
t594 = -pkin(4) * t1160 + t615;
t597 = (-t1160 - t941) * qJ(5) + t1007;
t709 = t804 * t974 - t1180;
t529 = t1146 * t709 - t974 * t594 - t970 * t597 + t1212;
t584 = pkin(3) * t705 + pkin(4) * t984 - qJ(3) * t709 + qJ(5) * t804;
t660 = t705 * t971 + t1197;
t997 = pkin(8) * t660 + t529 * t975 + t584 * t971;
t708 = t798 * t974 - t1180;
t544 = t1146 * t708 + t1212 - t570;
t630 = pkin(3) * t704 - qJ(3) * t708;
t661 = t704 * t971 + t1197;
t996 = pkin(8) * t661 + t544 * t975 + t630 * t971;
t607 = t631 + t1215;
t549 = t1068 * t797 - t974 * t607 - t1248;
t558 = (-t850 - t941) * qJ(5) + (t1188 - t918) * pkin(4) + t1059 + t1247;
t676 = -t797 * t975 - t1255;
t995 = pkin(8) * t676 + t549 * t975 + t558 * t971;
t606 = qJ(5) * t985 - 0.2e1 * t1085 - t1164;
t553 = -t970 * t606 + (-pkin(3) - t1141) * t985 - t1235;
t559 = pkin(4) * t862 + (t1165 + t918) * qJ(5) + t989 + t1234;
t994 = t553 * t975 + t559 * t971 + t1258;
t579 = t1091 - t1247;
t591 = pkin(3) * t796 + t1093 + t1248;
t675 = t796 * t975 + t1255;
t993 = pkin(8) * t675 + t579 * t971 + t591 * t975;
t581 = -t1234 - t645;
t600 = pkin(3) * t985 - t1097 + t1235;
t992 = t581 * t971 + t600 * t975 - t1258;
t735 = t1137 + (t920 + 0.2e1 * t1070) * t967 + 0.2e1 * t1181 + t1067;
t990 = t1143 * t1171 + t735 * t971 + t1214;
t979 = -t891 + t934 + t948 - t1181;
t736 = (-t884 - t927) * pkin(2) + t979;
t988 = -qJ(3) * t1126 + t736 * t975 + t1213;
t677 = t761 * t975 - t773 * t971;
t762 = t979 - t1137;
t986 = pkin(8) * t677 + t1056 * t762;
t964 = t967 * t965;
t942 = qJDD(1) * t972 + t976 * t977;
t940 = t968 * t958;
t932 = t956 - t957;
t928 = -pkin(7) * t942 + g(3) * t976;
t890 = (t966 + t1148) * t1074;
t876 = -t1074 * t1148 + t926 * t975;
t875 = -t1074 * t966 - t927 * t971;
t856 = t1112 * t972 + t890 * t976;
t855 = -t1112 * t976 + t890 * t972;
t849 = (t964 * t975 * t977 + t1103) * t971;
t848 = (t1168 * t975 + t926 * t967) * t971;
t847 = (-t1168 * t971 + t927 * t967) * t975;
t846 = (-t964 * t1095 + (t927 - t1060) * t968) * t975;
t826 = -pkin(2) * t887 + qJ(3) * t888;
t819 = -t1171 * t971 + t1125;
t780 = t1025 * t968 - t967 * t932;
t778 = t1025 * t967 + t968 * t932;
t777 = -t849 * t972 + t876 * t976;
t776 = -t846 * t972 + t875 * t976;
t775 = t849 * t976 + t876 * t972;
t774 = t846 * t976 + t875 * t972;
t737 = (-t931 - t955) * qJ(3) + (-t924 - t958) * pkin(2) + t987;
t726 = t1026 * t968 + t967 * t891;
t725 = t1026 * t967 - t968 * t891;
t724 = -pkin(2) * t904 + qJ(3) * t925 + t761;
t714 = -t781 * t972 + t820 * t976;
t713 = -t780 * t972 + t819 * t976;
t711 = t780 * t976 + t819 * t972;
t710 = pkin(7) * t714;
t707 = -t797 * t974 - t1179;
t706 = -t796 * t974 - t1179;
t691 = -t745 * t970 + t841 * t974;
t688 = -t798 * t975 + t1242;
t687 = t804 * t975 - t1242;
t681 = -t1096 - t1233;
t678 = pkin(2) * t773 + qJ(3) * t761;
t674 = -t1092 - t1232;
t673 = t1054 * t968 + t967 * t851 - t1229;
t670 = -t703 * t971 + t1195;
t669 = -t702 * t971 + t1195;
t668 = t1055 * t968 + t967 * t852 - t1231;
t659 = -pkin(1) * t725 + t1138 * t756;
t658 = -t726 * t972 + t756 * t976;
t657 = t726 * t976 + t756 * t972;
t656 = -t694 * t970 + t1078;
t655 = -t692 * t970 - t1078;
t652 = t756 * t968 + t1069;
t650 = t1029 * t968 - t1239;
t649 = t1028 * t968 + t1239;
t647 = (-t725 * t967 - t726 * t968) * pkin(8);
t646 = t1008 - t1026;
t643 = t1032 * t968 - t967 * t762;
t642 = t1032 * t967 + t968 * t762;
t637 = -t690 * t971 + t746 * t975;
t636 = t1036 * t968 + t1253;
t635 = t1037 * t968 - t1253;
t634 = t1036 * t967 - t1251;
t633 = t1037 * t967 + t1251;
t632 = -qJ(3) * t1125 - t971 * t736 + t1233;
t629 = -t1171 * t1144 + t975 * t735 + t1232;
t624 = -t682 * t970 + t700 * t974;
t623 = -t683 * t970 + t974 * t991;
t617 = t1040 * t968 - t967 * t707;
t616 = t1041 * t968 - t967 * t706;
t612 = t1039 * t968 - t967 * t708;
t611 = t1038 * t968 - t967 * t709;
t610 = t1039 * t967 + t968 * t708;
t609 = t1038 * t967 + t968 * t709;
t608 = -t971 * t751 + t975 * t755 + t1008;
t605 = -t967 * t737 + t968 * t988 + t1229;
t604 = -t625 * t970 + t815 * t974;
t602 = -t653 * t971 + t695 * t975;
t601 = -t654 * t971 + t693 * t975;
t599 = qJ(3) * t985 + t1093 - t1236;
t598 = -t967 * t724 + t968 * t990 + t1231;
t592 = t1035 * t968 - t967 * t826 + t1069;
t590 = qJ(3) * t796 + t1097 + t1249;
t589 = t1042 * t968 - t967 * t691;
t583 = -t643 * t972 + t677 * t976;
t582 = t643 * t976 + t677 * t972;
t577 = -t636 * t972 + t676 * t976;
t576 = -t635 * t972 + t675 * t976;
t575 = t636 * t976 + t676 * t972;
t574 = t635 * t976 + t675 * t972;
t572 = -t621 * t971 + t685 * t975;
t571 = -t622 * t971 + t684 * t975;
t566 = -t612 * t972 + t661 * t976;
t565 = -t611 * t972 + t660 * t976;
t564 = t612 * t976 + t661 * t972;
t563 = t611 * t976 + t660 * t972;
t561 = t1044 * t968 - t967 * t656;
t560 = t1043 * t968 - t967 * t655;
t556 = -t603 * t971 + t627 * t975;
t552 = t974 * t606 + (-qJ(3) - t1142) * t985 + t1236;
t550 = (-t1135 + t1144) * t762 + (-t642 * t967 - t643 * t968) * pkin(8);
t548 = t1066 * t797 - t970 * t607 - t1249;
t547 = -pkin(1) * t642 - t967 * t678 + t968 * t986;
t546 = t1046 * t968 - t967 * t623;
t545 = t1045 * t968 - t967 * t624;
t543 = t1146 * t704 + t1203 - t569;
t542 = t1047 * t968 - t967 * t620;
t541 = t1047 * t967 + t968 * t620;
t538 = t1048 * t968 - t967 * t614;
t537 = t1048 * t967 + t968 * t614;
t532 = t1049 * t968 - t967 * t604;
t531 = t1050 * t968 - t967 * t596;
t530 = t1050 * t967 + t968 * t596;
t528 = t1146 * t705 - t970 * t594 + t974 * t597 + t1203;
t526 = qJ(3) * t719 + t1146 * t569;
t525 = t1051 * t968 - t967 * t570;
t524 = t1051 * t967 + t968 * t570;
t521 = t975 * t581 - t971 * t600 - t1267;
t520 = -t542 * t972 + t568 * t976;
t519 = t542 * t976 + t568 * t972;
t518 = t975 * t579 - t971 * t591 + (-t633 * t967 - t635 * t968) * pkin(8);
t517 = -t538 * t972 + t567 * t976;
t516 = t538 * t976 + t567 * t972;
t514 = -t967 * t599 + t968 * t992 - t1264;
t513 = t1052 * t968 - t967 * t555;
t512 = t1052 * t967 + t968 * t555;
t510 = -pkin(1) * t633 - t967 * t590 + t968 * t993;
t507 = -t531 * t972 + t551 * t976;
t506 = t531 * t976 + t551 * t972;
t505 = -t525 * t972 + t557 * t976;
t504 = t525 * t976 + t557 * t972;
t503 = -t971 * t553 + t975 * t559 + t1267;
t502 = -t971 * t544 + t975 * t630 + (-t610 * t967 - t612 * t968) * pkin(8);
t501 = -t971 * t549 + t975 * t558 + (-t634 * t967 - t636 * t968) * pkin(8);
t496 = t1146 * t554 + (-t1066 + t1142) * t631;
t495 = -t971 * t529 + t975 * t584 + (-t609 * t967 - t611 * t968) * pkin(8);
t493 = -t967 * t552 + t968 * t994 + t1264;
t492 = -pkin(1) * t634 - t967 * t548 + t968 * t995;
t491 = -pkin(1) * t610 - t967 * t543 + t968 * t996;
t490 = -t513 * t972 + t535 * t976;
t489 = t513 * t976 + t535 * t972;
t487 = qJ(3) * t672 + t1146 * t619 + t974 * t523 - t970 * t536;
t485 = qJ(3) * t667 + t1146 * t613 + t974 * t522 - t970 * t534;
t483 = -pkin(1) * t609 - t967 * t528 + t968 * t997;
t478 = qJ(3) * t628 + t1146 * t595 - t970 * t494 + t974 * t562;
t477 = -t971 * t527 + t975 * t533 + (-t524 * t967 - t525 * t968) * pkin(8);
t476 = -pkin(1) * t524 - t967 * t526 + t968 * t998;
t475 = t1053 * t968 - t967 * t499;
t474 = t1053 * t967 + t968 * t499;
t473 = -t971 * t488 + t975 * t515 + (-t541 * t967 - t542 * t968) * pkin(8);
t472 = -t971 * t486 + t975 * t511 + (-t537 * t967 - t538 * t968) * pkin(8);
t471 = -t971 * t497 + t975 * t500 + (-t512 * t967 - t513 * t968) * pkin(8);
t469 = -pkin(1) * t541 + t1000 * t968 - t967 * t487;
t468 = -pkin(1) * t512 - t967 * t496 + t968 * t999;
t467 = -pkin(1) * t537 + t1001 * t968 - t967 * t485;
t466 = -t971 * t479 + t975 * t484 + (-t530 * t967 - t531 * t968) * pkin(8);
t465 = -t475 * t972 + t480 * t976;
t464 = t475 * t976 + t480 * t972;
t463 = -pkin(1) * t530 + t1002 * t968 - t967 * t478;
t461 = qJ(3) * t509 + t1146 * t498 - t970 * t481 + t974 * t482;
t460 = -t971 * t462 + t975 * t470 + (-t474 * t967 - t475 * t968) * pkin(8);
t459 = -pkin(1) * t474 + t1003 * t968 - t967 * t461;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t942, -t943, 0, t895, 0, 0, 0, 0, 0, 0, -t744, -t729, t714, t658, 0, 0, 0, 0, 0, 0, t714, t744, t729, t583, 0, 0, 0, 0, 0, 0, t576, -t588, t566, t505, 0, 0, 0, 0, 0, 0, t565, t577, t588, t490, 0, 0, 0, 0, 0, 0, t517, t520, t507, t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t943, -t942, 0, t894, 0, 0, 0, 0, 0, 0, t741, t728, t712, t657, 0, 0, 0, 0, 0, 0, t712, -t741, -t728, t582, 0, 0, 0, 0, 0, 0, t574, t585, t564, t504, 0, 0, 0, 0, 0, 0, t563, t575, -t585, t489, 0, 0, 0, 0, 0, 0, t516, t519, t506, t464; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t807, t793, t779, t725, 0, 0, 0, 0, 0, 0, t779, -t807, -t793, t642, 0, 0, 0, 0, 0, 0, t633, t638, t610, t524, 0, 0, 0, 0, 0, 0, t609, t634, -t638, t512, 0, 0, 0, 0, 0, 0, t537, t541, t530, t474; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t943, 0, -t942, 0, t1058, -t928, -t894, -pkin(7) * t894, t777, t713, -t1223, t776, -t1225, t856, -t673 * t972 + t681 * t976 - t1244, -t668 * t972 + t674 * t976 - t1246, t646 * t976 - t652 * t972 - t1140, -pkin(7) * t657 + t647 * t976 - t659 * t972, t856, t1223, t1225, t777, t713, t776, -t592 * t972 + t608 * t976 - t1140, -t605 * t972 + t632 * t976 + t1244, -t598 * t972 + t629 * t976 + t1246, -pkin(7) * t582 - t547 * t972 + t550 * t976, t1221, -t616 * t972 + t669 * t976, -t1266, t1219, -t649 * t972 + t687 * t976, t1182, -pkin(7) * t574 - t510 * t972 + t518 * t976, -t514 * t972 + t521 * t976 - t1269, -pkin(7) * t564 - t491 * t972 + t502 * t976, -pkin(7) * t504 - t476 * t972 + t477 * t976, t1182, t1266, -t650 * t972 + t688 * t976, t1221, -t617 * t972 + t670 * t976, t1219, -pkin(7) * t563 - t483 * t972 + t495 * t976, -pkin(7) * t575 - t492 * t972 + t501 * t976, -t493 * t972 + t503 * t976 + t1269, -pkin(7) * t489 - t468 * t972 + t471 * t976, -t561 * t972 + t602 * t976, -t532 * t972 + t556 * t976, -t545 * t972 + t571 * t976, -t560 * t972 + t601 * t976, -t546 * t972 + t572 * t976, -t589 * t972 + t637 * t976, -pkin(7) * t516 - t467 * t972 + t472 * t976, -pkin(7) * t519 - t469 * t972 + t473 * t976, -pkin(7) * t506 - t463 * t972 + t466 * t976, -pkin(7) * t464 - t459 * t972 + t460 * t976; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t942, 0, t943, 0, t928, t1058, t895, pkin(7) * t895, t775, t711, t1222, t774, t1224, t855, t673 * t976 + t681 * t972 - t1243, t668 * t976 + t674 * t972 - t1245, t646 * t972 + t652 * t976 + t710, pkin(7) * t658 + t647 * t972 + t659 * t976, t855, -t1222, -t1224, t775, t711, t774, t592 * t976 + t608 * t972 + t710, t605 * t976 + t632 * t972 + t1243, t598 * t976 + t629 * t972 + t1245, pkin(7) * t583 + t547 * t976 + t550 * t972, t1220, t616 * t976 + t669 * t972, t1265, t1218, t649 * t976 + t687 * t972, t1183, pkin(7) * t576 + t510 * t976 + t518 * t972, t514 * t976 + t521 * t972 - t1268, pkin(7) * t566 + t491 * t976 + t502 * t972, pkin(7) * t505 + t476 * t976 + t477 * t972, t1183, -t1265, t650 * t976 + t688 * t972, t1220, t617 * t976 + t670 * t972, t1218, pkin(7) * t565 + t483 * t976 + t495 * t972, pkin(7) * t577 + t492 * t976 + t501 * t972, t493 * t976 + t503 * t972 + t1268, pkin(7) * t490 + t468 * t976 + t471 * t972, t561 * t976 + t602 * t972, t532 * t976 + t556 * t972, t545 * t976 + t571 * t972, t560 * t976 + t601 * t972, t546 * t976 + t572 * t972, t589 * t976 + t637 * t972, pkin(7) * t517 + t467 * t976 + t472 * t972, pkin(7) * t520 + t469 * t976 + t473 * t972, pkin(7) * t507 + t463 * t976 + t466 * t972, pkin(7) * t465 + t459 * t976 + t460 * t972; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t950, t951, 0, 0, t848, t778, t1153, t847, t1154, t940, t1054 * t967 - t968 * t851 + t1228, t1055 * t967 - t968 * t852 + t1230, t756 * t967 + t1090, pkin(1) * t726 + t1139 * t756, t940, -t1153, -t1154, t848, t778, t847, t1035 * t967 + t968 * t826 + t1090, t968 * t737 + t967 * t988 - t1228, t968 * t724 + t967 * t990 - t1230, pkin(1) * t643 + t968 * t678 + t967 * t986, t1185, t1041 * t967 + t968 * t706, t1259, t1187, t1028 * t967 - t1237, t1151, pkin(1) * t635 + t968 * t590 + t967 * t993, t968 * t599 + t967 * t992 + t1263, pkin(1) * t612 + t968 * t543 + t967 * t996, pkin(1) * t525 + t968 * t526 + t967 * t998, t1151, -t1259, t1029 * t967 + t1237, t1185, t1040 * t967 + t968 * t707, t1187, pkin(1) * t611 + t968 * t528 + t967 * t997, pkin(1) * t636 + t968 * t548 + t967 * t995, t968 * t552 + t967 * t994 - t1263, pkin(1) * t513 + t968 * t496 + t967 * t999, t1044 * t967 + t968 * t656, t1049 * t967 + t968 * t604, t1045 * t967 + t968 * t624, t1043 * t967 + t968 * t655, t1046 * t967 + t968 * t623, t1042 * t967 + t968 * t691, pkin(1) * t538 + t1001 * t967 + t968 * t485, pkin(1) * t542 + t1000 * t967 + t968 * t487, pkin(1) * t531 + t1002 * t967 + t968 * t478, pkin(1) * t475 + t1003 * t967 + t968 * t461;];
tauB_reg  = t1;
