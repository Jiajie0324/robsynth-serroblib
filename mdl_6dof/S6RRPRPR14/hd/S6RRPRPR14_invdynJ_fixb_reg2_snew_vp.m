% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR14_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR14_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR14_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR14_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR14_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR14_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 16:59:54
% EndTime: 2019-05-06 17:00:19
% DurationCPUTime: 9.84s
% Computational Cost: add. (27752->493), mult. (62922->648), div. (0->0), fcn. (45743->10), ass. (0->305)
t272 = sin(pkin(6));
t276 = sin(qJ(2));
t347 = qJD(1) * t276;
t334 = t272 * t347;
t255 = qJD(4) + t334;
t250 = t255 ^ 2;
t273 = cos(pkin(6));
t267 = qJD(1) * t273 + qJD(2);
t275 = sin(qJ(4));
t279 = cos(qJ(4));
t280 = cos(qJ(2));
t346 = qJD(1) * t280;
t333 = t272 * t346;
t223 = t267 * t279 - t275 * t333;
t394 = t223 ^ 2;
t197 = -t394 + t250;
t236 = (qJD(2) * t346 + qJDD(1) * t276) * t272;
t228 = qJDD(4) + t236;
t221 = t267 * t275 + t279 * t333;
t364 = t223 * t221;
t159 = -t364 + t228;
t440 = t159 * t279;
t121 = t197 * t275 - t440;
t258 = qJD(2) * t334;
t340 = qJDD(1) * t280;
t237 = t272 * t340 - t258;
t266 = qJDD(1) * t273 + qJDD(2);
t310 = t275 * t237 - t279 * t266;
t343 = qJD(4) - t255;
t142 = t343 * t221 + t310;
t441 = t159 * t275;
t458 = t273 * t121 + t272 * (t276 * t142 + t280 * (t197 * t279 + t441));
t405 = -t394 - t250;
t406 = t364 + t228;
t421 = t406 * t275;
t114 = -t279 * t405 + t421;
t342 = qJD(4) + t255;
t293 = -t342 * t221 - t310;
t457 = pkin(1) * (t114 * t280 + t276 * t293);
t352 = t276 * qJ(3);
t392 = -pkin(2) - pkin(9);
t298 = t280 * t392 - pkin(1) - t352;
t420 = t406 * t279;
t456 = pkin(8) * (t114 * t276 - t280 * t293) + t298 * (t275 * t405 + t420);
t454 = pkin(3) * t114;
t395 = t221 ^ 2;
t196 = t395 - t250;
t123 = t196 * t279 - t421;
t453 = t273 * t123;
t452 = t392 * t114;
t448 = t280 * (t196 * t275 + t420);
t176 = -t250 - t395;
t107 = -t176 * t275 - t440;
t446 = pkin(3) * t107;
t445 = t107 * t276;
t444 = t107 * t280;
t443 = t142 * t275;
t442 = t142 * t279;
t436 = t392 * t107;
t179 = pkin(4) * t221 - qJ(5) * t223;
t282 = qJD(1) ^ 2;
t277 = sin(qJ(1));
t281 = cos(qJ(1));
t331 = t277 * g(1) - g(2) * t281;
t387 = pkin(8) * t272;
t230 = qJDD(1) * pkin(1) + t282 * t387 + t331;
t233 = pkin(3) * t334 - pkin(9) * t267;
t332 = qJD(3) * t347;
t256 = -0.2e1 * t272 * t332;
t270 = t272 ^ 2;
t357 = t270 * t282;
t265 = t280 ^ 2 * t357;
t243 = t267 * pkin(2) * t334;
t384 = t273 * g(3);
t305 = -t236 * qJ(3) + t243 - t384;
t358 = t267 * t280;
t339 = qJ(3) * t358;
t96 = -pkin(3) * t265 + t256 + t392 * t237 + (-t230 + (-t233 * t276 - t339) * qJD(1)) * t272 + t305;
t320 = -pkin(2) * t280 - t352;
t348 = qJD(1) * t272;
t232 = t320 * t348;
t363 = t230 * t273;
t210 = t280 * t363;
t323 = g(1) * t281 + g(2) * t277;
t231 = -pkin(1) * t282 + qJDD(1) * t387 - t323;
t351 = t276 * t231;
t263 = t267 ^ 2;
t402 = -t266 * pkin(2) - t263 * qJ(3) + qJDD(3);
t297 = -t210 + t351 + t402;
t386 = g(3) * t280;
t252 = t280 * t276 * t357;
t408 = -t266 - t252;
t98 = t236 * pkin(3) + t408 * pkin(9) + (t386 + (-pkin(3) * t358 + t232 * t276) * qJD(1)) * t272 + t297;
t61 = t275 * t96 - t279 * t98;
t50 = -t228 * pkin(4) - t250 * qJ(5) + t223 * t179 + qJDD(5) + t61;
t434 = -pkin(10) * t159 + t50;
t390 = -pkin(4) - pkin(10);
t403 = -t395 - t394;
t432 = pkin(3) * t403;
t326 = t279 * t237 + t275 * t266;
t172 = qJD(4) * t223 + t326;
t204 = t255 * t223;
t135 = t172 + t204;
t431 = pkin(4) * t135;
t430 = qJ(3) * t403;
t274 = sin(qJ(6));
t278 = cos(qJ(6));
t190 = -t278 * t221 + t255 * t274;
t192 = t221 * t274 + t255 * t278;
t146 = t192 * t190;
t173 = -qJD(4) * t221 - t310;
t168 = qJDD(6) + t173;
t410 = -t146 + t168;
t429 = t274 * t410;
t427 = t276 * t403;
t404 = t394 - t395;
t426 = t276 * t404;
t425 = t278 * t410;
t423 = t280 * t403;
t422 = t298 * (t176 * t279 - t441);
t391 = pkin(3) + pkin(8);
t240 = -t265 - t263;
t419 = pkin(1) * (t240 * t276 - t280 * t408);
t264 = t276 ^ 2 * t357;
t214 = -t264 - t263;
t235 = -t252 + t266;
t418 = pkin(1) * (t214 * t280 - t235 * t276);
t362 = t408 * t276;
t417 = pkin(8) * (-t240 * t280 - t362);
t361 = t235 * t280;
t416 = pkin(8) * (t214 * t276 + t361);
t365 = t221 * t255;
t328 = t173 + t365;
t283 = t328 * pkin(5) + t434;
t193 = pkin(5) * t223 - pkin(10) * t255;
t345 = qJD(3) * t267;
t254 = 0.2e1 * t345;
t356 = t272 * t276;
t178 = -g(3) * t356 + t280 * t231 + t276 * t363;
t304 = -t263 * pkin(2) + t266 * qJ(3) + t232 * t333 + t178;
t290 = t237 * pkin(3) - pkin(9) * t265 + t233 * t267 + t304;
t407 = t290 + (-t173 + t365) * qJ(5) + t431 - 0.2e1 * qJD(5) * t223;
t60 = t254 + t407;
t36 = -pkin(5) * t395 + pkin(10) * t172 - t193 * t223 + t60;
t21 = t274 * t36 - t278 * t283;
t378 = t278 * t36;
t22 = t274 * t283 + t378;
t12 = -t278 * t21 + t22 * t274;
t415 = t270 * (qJD(1) * t267 - t273 * t282);
t414 = t275 * t293;
t412 = t279 * t293;
t245 = t267 * t333;
t409 = t236 + t245;
t335 = t267 * t347;
t203 = -t258 + (t335 + t340) * t272;
t401 = t272 * ((t265 - t263) * t276 + t361) + t273 * t203;
t202 = -t245 + t236;
t400 = t272 * ((-t264 + t263) * t280 - t362) + t273 * t202;
t360 = t255 * t275;
t322 = t279 * t173 - t223 * t360;
t336 = t276 * t364;
t359 = t255 * t279;
t399 = t273 * t322 + (t336 + t280 * (-t173 * t275 - t223 * t359)) * t272;
t303 = t172 * t275 + t221 * t359;
t398 = t273 * t303 + (-t336 + t280 * (t172 * t279 - t221 * t360)) * t272;
t300 = (-t221 * t279 + t223 * t275) * t255;
t355 = t272 * t280;
t397 = t273 * t300 + t228 * t356 + (t221 * t275 + t223 * t279) * t255 * t355;
t188 = t190 ^ 2;
t189 = t192 ^ 2;
t216 = qJD(6) + t223;
t213 = t216 ^ 2;
t393 = 0.2e1 * qJD(5);
t389 = pkin(4) * t275;
t388 = pkin(4) * t279;
t385 = t237 * pkin(2);
t62 = t275 * t98 + t279 * t96;
t289 = -t250 * pkin(4) + t228 * qJ(5) - t221 * t179 + t62;
t48 = t255 * t393 + t289;
t383 = -pkin(4) * t50 + qJ(5) * t48;
t34 = -t172 * pkin(5) - t395 * pkin(10) + (t393 + t193) * t255 + t289;
t381 = t274 * t34;
t95 = t254 + t290;
t380 = t275 * t95;
t136 = -t172 + t204;
t89 = t136 * t275 + t442;
t379 = t276 * t89;
t32 = t278 * t34;
t377 = t279 * t95;
t102 = t146 + t168;
t376 = t102 * t274;
t375 = t102 * t278;
t374 = t135 * t275;
t367 = t216 * t274;
t366 = t216 * t278;
t242 = -t264 - t265;
t350 = pkin(1) * (-t272 * t242 + (-t202 * t280 + t203 * t276) * t273) + (t202 * t276 + t203 * t280) * t387;
t143 = -t343 * t223 - t326;
t349 = pkin(4) * t142 + qJ(5) * t143;
t341 = qJD(6) + t216;
t338 = t275 * t146;
t337 = t279 * t146;
t330 = qJ(5) * t279 - qJ(3);
t329 = -t278 * t172 + t274 * t228;
t325 = qJ(5) * t34 + t390 * t12;
t324 = g(3) * t355 - t210;
t144 = -t189 - t213;
t69 = t144 * t278 - t376;
t317 = t274 * t172 + t278 * t228;
t88 = -t341 * t190 + t317;
t321 = qJ(5) * t88 + t390 * t69 + t32;
t205 = t272 * t230 + t384;
t13 = t274 * t21 + t278 * t22;
t29 = t275 * t62 - t279 * t61;
t319 = t275 * t61 + t279 * t62;
t308 = pkin(1) - t320;
t307 = -qJD(1) * t339 - t230;
t124 = -t213 - t188;
t66 = t124 * t274 + t425;
t83 = t341 * t192 + t329;
t302 = qJ(5) * t83 + t390 * t66 + t381;
t177 = t324 + t351;
t301 = (t177 * t276 + t178 * t280) * t272;
t118 = t254 + t304;
t113 = -t188 - t189;
t295 = (-qJD(6) + t216) * t192 - t329;
t111 = -qJD(6) * t190 + t317;
t164 = t216 * t190;
t87 = t111 + t164;
t57 = t274 * t295 - t278 * t87;
t296 = qJ(5) * t113 + t390 * t57 - t12;
t294 = -t305 + t385;
t292 = -pkin(4) * t159 - qJ(5) * t176 + t50;
t126 = (t232 * t347 + t386) * t272 + t297;
t284 = -pkin(4) * t405 + qJ(5) * t406 + t48;
t249 = t273 * t266;
t241 = t264 - t265;
t200 = -t258 + (-t335 + t340) * t272;
t175 = (t236 * t272 + t280 * t415) * t276;
t174 = (t237 * t272 - t276 * t415) * t280;
t157 = -t189 + t213;
t156 = t188 - t213;
t151 = -pkin(2) * t202 + qJ(3) * t203;
t145 = t189 - t188;
t134 = t342 * t223 + t326;
t127 = t273 * t241 + (t276 * t200 + t280 * t409) * t272;
t110 = -qJD(6) * t192 - t329;
t105 = (-t190 * t278 + t192 * t274) * t216;
t104 = (t190 * t274 + t192 * t278) * t216;
t100 = pkin(2) * t408 - qJ(3) * t240 + t126;
t99 = -pkin(2) * t214 + qJ(3) * t235 + t118;
t92 = -t135 * t279 - t414;
t91 = -t134 * t279 - t414;
t90 = t143 * t275 + t442;
t86 = t111 - t164;
t80 = t111 * t278 - t192 * t367;
t79 = -t111 * t274 - t192 * t366;
t78 = -t110 * t274 + t190 * t366;
t77 = -t110 * t278 - t190 * t367;
t76 = -t104 * t275 + t168 * t279;
t75 = t156 * t278 - t376;
t74 = -t157 * t274 + t425;
t73 = -t156 * t274 - t375;
t72 = -t157 * t278 - t429;
t71 = -pkin(2) * t126 + qJ(3) * t118;
t70 = -t144 * t274 - t375;
t67 = t124 * t278 - t429;
t64 = -t275 * t79 + t337;
t63 = -t275 * t77 - t337;
t59 = t274 * t87 + t278 * t295;
t58 = -t274 * t86 - t278 * t83;
t56 = t274 * t83 - t278 * t86;
t54 = -t275 * t72 + t279 * t87;
t53 = -t275 * t73 + t279 * t295;
t51 = t275 * t88 - t279 * t69;
t45 = t275 * t83 - t279 * t66;
t44 = t60 + t431;
t43 = qJ(5) * t293 - 0.2e1 * t345 - t407;
t42 = t145 * t279 - t275 * t56;
t41 = qJ(3) * t293 + t377 - t452;
t40 = -qJ(5) * t403 + t50;
t38 = t113 * t275 - t279 * t57;
t37 = -pkin(4) * t403 + t48;
t35 = qJ(3) * t134 + t380 - t436;
t28 = pkin(5) * t57 - qJ(5) * t59;
t26 = t275 * t48 - t279 * t50;
t25 = t279 * t43 + (-qJ(3) - t389) * t293 + t452;
t24 = t330 * t135 - t275 * t44 + t436;
t23 = t392 * t89 - t29 + t430;
t19 = pkin(5) * t88 + t390 * t70 - t381;
t18 = pkin(5) * t83 + t390 * t67 + t32;
t17 = -t275 * t37 + t279 * t40 + t392 * t90 + t430;
t16 = qJ(3) * t95 + t392 * t29;
t15 = -t378 - t274 * t434 - qJ(5) * t70 + (-t274 * t328 + t69) * pkin(5);
t14 = pkin(5) * t66 - qJ(5) * t67 - t21;
t9 = -t12 * t279 + t275 * t34;
t8 = t392 * t26 + (-t330 + t389) * t60;
t7 = pkin(5) * t113 + t390 * t59 - t13;
t6 = qJ(3) * t70 + t279 * t15 - t275 * t19 + t392 * t51;
t5 = qJ(3) * t67 + t279 * t14 - t275 * t18 + t392 * t45;
t4 = pkin(5) * t12 - qJ(5) * t13;
t3 = pkin(5) * t34 + t390 * t13;
t2 = qJ(3) * t59 - t275 * t7 + t279 * t28 + t392 * t38;
t1 = qJ(3) * t13 - t275 * t3 + t279 * t4 + t392 * t9;
t10 = [0, 0, 0, 0, 0, qJDD(1), t331, t323, 0, 0, t175, t127, t400, t174, t401, t249, (-t177 + t419) * t273 + (pkin(1) * t200 + t280 * t205 - t417) * t272, (-t178 + t418) * t273 + (-pkin(1) * t409 - t276 * t205 - t416) * t272, t301 + t350, pkin(1) * (t272 * t205 + (-t177 * t280 + t178 * t276) * t273) + pkin(8) * t301, t249, -t400, -t401, t175, t127, t174, t273 * t151 + (t280 * (-pkin(2) * t242 + t118) + (-qJ(3) * t242 + (t232 * t348 + t231) * t276 + t324 + t402) * t276) * t272 + t350, (t100 - t419) * t273 + (t280 * (t256 - t294) + t417 + t307 * t355 - t308 * t200) * t272, (t99 - t418) * t273 + (t276 * t294 + t416 + (-t307 + 0.2e1 * t332) * t356 + t308 * t409) * t272, (t71 + pkin(1) * (t118 * t276 - t126 * t280)) * t273 + (pkin(8) * (t118 * t280 + t126 * t276) - t308 * (-qJ(3) * t409 - t205 + t243 + t256 - t385)) * t272, t399, t273 * t91 + (t426 + t280 * (t134 * t275 - t412)) * t272, -t458, t398, t453 + (t276 * t143 - t448) * t272, t397, (t35 + pkin(1) * (t134 * t276 + t444)) * t273 + (t276 * (-t61 - t446) + t280 * (pkin(3) * t134 + t377) + pkin(8) * (t134 * t280 - t445) + t422) * t272, (t41 + t457) * t273 + (t276 * (-t62 - t454) + t280 * (pkin(3) * t293 - t380) - t456) * t272, (t23 + pkin(1) * (-t280 * t89 + t427)) * t273 + (pkin(3) * t379 + t280 * (-t319 + t432) + pkin(8) * (t379 + t423) + t298 * (t136 * t279 - t443)) * t272, (t16 + pkin(1) * (t276 * t95 - t280 * t29)) * t273 + (t298 * t319 + t391 * (t276 * t29 + t280 * t95)) * t272, t397, t458, -t453 + (-t276 * t136 + t448) * t272, t399, t273 * t92 + (t426 + t280 * (t374 - t412)) * t272, t398, (t17 + pkin(1) * (-t280 * t90 + t427)) * t273 + (t276 * (pkin(3) * t90 + t349) + t280 * (-t275 * t40 - t279 * t37 + t432) + pkin(8) * (t276 * t90 + t423) + t298 * (t143 * t279 - t443)) * t272, (t24 + pkin(1) * (-t135 * t276 - t444)) * t273 + (t276 * (t292 + t446) + t280 * (-pkin(3) * t135 - qJ(5) * t374 - t279 * t44) + pkin(8) * (-t135 * t280 + t445) - t422) * t272, (t25 - t457) * t273 + (t276 * (t284 + t454) + t280 * (-t275 * t43 + (-pkin(3) - t388) * t293) + t456) * t272, (t8 + pkin(1) * (-t26 * t280 + t276 * t60)) * t273 + ((t26 * t391 + t383) * t276 + (qJ(5) * t275 + t388 + t391) * t280 * t60 + t298 * (t275 * t50 + t279 * t48)) * t272, t273 * t64 + (t276 * t80 + t280 * (-t279 * t79 - t338)) * t272, t273 * t42 + (t276 * t58 + t280 * (-t145 * t275 - t279 * t56)) * t272, t273 * t54 + (t276 * t74 + t280 * (-t275 * t87 - t279 * t72)) * t272, t273 * t63 + (t276 * t78 + t280 * (-t279 * t77 + t338)) * t272, t273 * t53 + (t276 * t75 + t280 * (-t275 * t295 - t279 * t73)) * t272, t273 * t76 + (t276 * t105 + t280 * (-t104 * t279 - t168 * t275)) * t272, (t5 + pkin(1) * (t276 * t67 - t280 * t45)) * t273 + (t276 * (pkin(3) * t45 + t302) + t280 * (pkin(3) * t67 - t275 * t14 - t279 * t18) + pkin(8) * (t276 * t45 + t280 * t67) + t298 * (t275 * t66 + t279 * t83)) * t272, (t6 + pkin(1) * (t276 * t70 - t280 * t51)) * t273 + (t276 * (pkin(3) * t51 + t321) + t280 * (pkin(3) * t70 - t275 * t15 - t279 * t19) + pkin(8) * (t276 * t51 + t280 * t70) + t298 * (t275 * t69 + t279 * t88)) * t272, (t2 + pkin(1) * (t276 * t59 - t280 * t38)) * t273 + (t276 * (pkin(3) * t38 + t296) + t280 * (pkin(3) * t59 - t275 * t28 - t279 * t7) + pkin(8) * (t276 * t38 + t280 * t59) + t298 * (t113 * t279 + t275 * t57)) * t272, (t1 + pkin(1) * (t13 * t276 - t280 * t9)) * t273 + (t276 * (pkin(3) * t9 + t325) + t280 * (pkin(3) * t13 - t275 * t4 - t279 * t3) + pkin(8) * (t13 * t280 + t276 * t9) + t298 * (t12 * t275 + t279 * t34)) * t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t252, t241, t202, t252, t203, t266, -t177, -t178, 0, 0, t266, -t202, -t203, -t252, t241, t252, t151, t100, t99, t71, t322, t91, -t121, t303, t123, t300, t35, t41, t23, t16, t300, t121, -t123, t322, t92, t303, t17, t24, t25, t8, t64, t42, t54, t63, t53, t76, t5, t6, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, -t408, t214, t126, 0, 0, 0, 0, 0, 0, -t107, -t114, t89, t29, 0, 0, 0, 0, 0, 0, t90, t107, t114, t26, 0, 0, 0, 0, 0, 0, t45, t51, t38, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, t404, -t142, -t364, t143, t228, -t61, -t62, 0, 0, t228, t142, -t136, t364, t404, -t364, t349, t292, t284, t383, t80, t58, t74, t78, t75, t105, t302, t321, t296, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, t159, t405, t50, 0, 0, 0, 0, 0, 0, t66, t69, t57, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, t145, t87, -t146, t295, t168, -t21, -t22, 0, 0;];
tauJ_reg  = t10;
