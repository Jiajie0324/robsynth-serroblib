% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPR14_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR14_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR14_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR14_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:36:56
% EndTime: 2019-03-09 11:37:04
% DurationCPUTime: 2.50s
% Computational Cost: add. (2041->298), mult. (5437->516), div. (0->0), fcn. (4846->8), ass. (0->159)
t105 = sin(qJ(4));
t108 = cos(qJ(4));
t157 = qJD(4) * t108;
t102 = sin(pkin(6));
t106 = sin(qJ(2));
t109 = cos(qJ(2));
t160 = qJD(3) * t106;
t162 = qJD(2) * t106;
t139 = t102 * t162;
t80 = pkin(2) * t139;
t32 = t80 + (-t160 + (pkin(9) * t106 - qJ(3) * t109) * qJD(2)) * t102;
t103 = cos(pkin(6));
t144 = -pkin(1) * t109 - pkin(2);
t167 = t102 * t106;
t85 = pkin(8) * t167;
t38 = pkin(3) * t167 + t85 + (-pkin(9) + t144) * t103;
t111 = -pkin(2) - pkin(9);
t172 = qJ(3) * t106;
t48 = (t111 * t109 - pkin(1) - t172) * t102;
t166 = t102 * t109;
t187 = pkin(3) + pkin(8);
t184 = pkin(1) * t103;
t88 = t106 * t184;
t49 = (t187 * t166 + t88) * qJD(2);
t95 = qJD(4) * t105;
t10 = -t105 * t49 - t108 * t32 - t38 * t157 + t48 * t95;
t161 = qJD(2) * t109;
t116 = (qJ(5) * t161 + qJD(5) * t106) * t102;
t7 = t10 - t116;
t107 = cos(qJ(6));
t186 = pkin(4) + pkin(10);
t163 = t107 * t186;
t194 = pkin(8) * t166 + t88;
t171 = qJ(5) * t108;
t193 = -t105 * pkin(4) + t171;
t63 = t103 * t105 + t108 * t166;
t42 = t63 * qJD(4) - t105 * t139;
t145 = t105 * t166;
t64 = t103 * t108 - t145;
t192 = qJ(5) * t42 - qJD(5) * t64;
t101 = t108 ^ 2;
t99 = t105 ^ 2;
t135 = qJD(4) * (t101 - t99);
t104 = sin(qJ(6));
t98 = t104 ^ 2;
t174 = t107 ^ 2 - t98;
t134 = qJD(6) * t174;
t155 = qJD(5) * t105;
t181 = pkin(5) - t111;
t74 = t181 * t105;
t191 = qJD(4) * (-t105 * t186 + t171) + qJD(6) * t74 + t155;
t190 = 0.2e1 * t102;
t189 = 0.2e1 * qJD(3);
t188 = 0.2e1 * qJD(5);
t43 = -qJD(4) * t145 + t103 * t157 - t108 * t139;
t185 = pkin(4) * t43;
t6 = -pkin(5) * t43 - t7;
t183 = t104 * t6;
t182 = t107 * t6;
t180 = t105 * t38 + t108 * t48;
t81 = t161 * t184;
t93 = t103 * qJD(3);
t179 = t81 + t93;
t165 = t104 * t106;
t44 = t102 * t165 - t63 * t107;
t83 = t102 * t161;
t20 = -t44 * qJD(6) + t104 * t43 + t107 * t83;
t177 = t107 * t20;
t176 = t108 * t42;
t60 = t194 * qJD(2);
t175 = t60 * t103;
t170 = qJD(4) * t44;
t45 = t104 * t63 + t107 * t167;
t169 = qJD(4) * t45;
t164 = t104 * t186;
t159 = qJD(4) * t104;
t158 = qJD(4) * t107;
t156 = qJD(4) * t111;
t154 = qJD(6) * t104;
t153 = qJD(6) * t107;
t152 = qJD(6) * t108;
t151 = qJD(6) * t186;
t54 = -t103 * qJ(3) - t194;
t150 = pkin(4) * t157 + qJ(5) * t95 + qJD(3);
t97 = t102 ^ 2;
t149 = t97 * t161;
t148 = t64 * t159;
t147 = t64 * t158;
t146 = t111 * t167;
t143 = t107 * t157;
t142 = t104 * t152;
t141 = t105 * t153;
t140 = t107 * t152;
t138 = t104 * t153;
t137 = t105 * t157;
t136 = -t105 * t48 + t108 * t38;
t47 = pkin(3) * t166 - t54;
t133 = qJD(6) * (t101 + t99);
t132 = pkin(4) * t83;
t131 = t105 * t146;
t130 = t108 * t146;
t129 = t111 * t83;
t128 = t104 * t143;
t89 = t105 * t156;
t127 = -pkin(5) * t95 + t89;
t73 = qJ(3) - t193;
t126 = -pkin(2) * t109 - t172;
t14 = pkin(5) * t64 - t186 * t167 - t136;
t120 = -qJ(5) * t64 + t47;
t16 = t186 * t63 + t120;
t5 = t104 * t14 + t107 * t16;
t125 = t104 * t44 - t107 * t45;
t70 = pkin(10) * t105 + t73;
t75 = t181 * t108;
t34 = t104 * t75 + t107 * t70;
t11 = -t105 * t32 + t108 * t49 - t48 * t157 - t38 * t95;
t124 = t105 * t129;
t123 = t108 * t129;
t59 = pkin(8) * t139 - t81;
t21 = -qJ(5) * t167 - t180;
t119 = -t104 * t42 + t64 * t153;
t24 = -t107 * t42 - t64 * t154;
t117 = -pkin(5) * t42 - t11;
t37 = -t187 * t139 + t179;
t90 = t108 * t156;
t71 = -pkin(5) * t157 + t90;
t115 = t71 + (qJ(5) * t105 + t108 * t186) * qJD(6);
t114 = (pkin(10) * qJD(4) - qJD(5)) * t108 + t150;
t61 = t193 * qJD(4) + t155;
t22 = -pkin(4) * t167 - t136;
t9 = -t11 - t132;
t113 = -t7 * t105 - t9 * t108 + (t105 * t22 - t108 * t21) * qJD(4);
t112 = t37 + t192;
t82 = -0.2e1 * t137;
t72 = 0.2e1 * t106 * t149;
t68 = -t104 * t95 + t140;
t67 = t104 * t157 + t141;
t66 = t105 * t158 + t142;
t65 = -t105 * t154 + t143;
t58 = -qJD(5) * t108 + t150;
t56 = t144 * t103 + t85;
t55 = (-pkin(1) + t126) * t102;
t53 = (-t106 * t95 + t108 * t161) * t102;
t52 = (t105 * t161 + t106 * t157) * t102;
t51 = t59 - t93;
t50 = t80 + (-qJ(3) * t161 - t160) * t102;
t33 = -t104 * t70 + t107 * t75;
t26 = -0.2e1 * t64 * t42;
t25 = -t64 * t95 - t176;
t23 = pkin(4) * t63 + t120;
t19 = qJD(6) * t45 + t104 * t83 - t43 * t107;
t18 = -t34 * qJD(6) - t104 * t114 + t107 * t127;
t17 = -t104 * t127 - t107 * t114 - t75 * t153 + t70 * t154;
t15 = -pkin(5) * t63 - t21;
t12 = t112 + t185;
t4 = -t104 * t16 + t107 * t14;
t2 = -t104 * (pkin(10) * t43 + t179 + t185 + t192) + t107 * t117 - t5 * qJD(6) + (-t109 * t163 + t187 * t165) * t102 * qJD(2);
t1 = t16 * t154 - t14 * t153 - t104 * (-t186 * t83 + t117) - t107 * (t186 * t43 + t112);
t3 = [0, 0, 0, t72, 0.2e1 * (-t106 ^ 2 + t109 ^ 2) * t97 * qJD(2), 0.2e1 * t103 * t83, -0.2e1 * t103 * t139, 0, -0.2e1 * pkin(1) * t97 * t162 - 0.2e1 * t175, -0.2e1 * pkin(1) * t149 + 0.2e1 * t103 * t59 (t106 * t60 - t109 * t51 + (t106 * t54 + t109 * t56) * qJD(2)) * t190, 0.2e1 * t175 + 0.2e1 * (t109 * t50 - t55 * t162) * t102, -0.2e1 * t51 * t103 + 0.2e1 * (-t106 * t50 - t55 * t161) * t102, 0.2e1 * t50 * t55 + 0.2e1 * t51 * t54 + 0.2e1 * t56 * t60, t26, 0.2e1 * t42 * t63 - 0.2e1 * t43 * t64 (-t106 * t42 + t64 * t161) * t190 (-t106 * t43 - t63 * t161) * t190, t72, 0.2e1 * t37 * t63 + 0.2e1 * t47 * t43 + 0.2e1 * (t11 * t106 + t136 * t161) * t102, 0.2e1 * t37 * t64 - 0.2e1 * t47 * t42 + 0.2e1 * (t10 * t106 - t180 * t161) * t102, 0.2e1 * t21 * t43 - 0.2e1 * t22 * t42 + 0.2e1 * t63 * t7 + 0.2e1 * t64 * t9, -0.2e1 * t12 * t63 - 0.2e1 * t23 * t43 + 0.2e1 * (t106 * t9 + t161 * t22) * t102, -0.2e1 * t12 * t64 + 0.2e1 * t23 * t42 + 0.2e1 * (-t106 * t7 - t161 * t21) * t102, 0.2e1 * t12 * t23 + 0.2e1 * t21 * t7 + 0.2e1 * t22 * t9, 0.2e1 * t45 * t20, -0.2e1 * t19 * t45 - 0.2e1 * t20 * t44, 0.2e1 * t20 * t64 - 0.2e1 * t42 * t45, -0.2e1 * t19 * t64 + 0.2e1 * t42 * t44, t26, 0.2e1 * t15 * t19 + 0.2e1 * t2 * t64 - 0.2e1 * t4 * t42 + 0.2e1 * t44 * t6, 0.2e1 * t1 * t64 + 0.2e1 * t15 * t20 + 0.2e1 * t42 * t5 + 0.2e1 * t45 * t6; 0, 0, 0, 0, 0, t83, -t139, 0, -t60, t59 (t126 * qJD(2) + qJD(3) * t109) * t102, t60, -t59 + 0.2e1 * t93, -pkin(2) * t60 - qJ(3) * t51 - qJD(3) * t54, t25, t105 * t42 - t108 * t43 + (t105 * t63 - t108 * t64) * qJD(4), t53, -t52, 0, t123 + qJ(3) * t43 + qJD(3) * t63 + t37 * t105 + (t108 * t47 - t131) * qJD(4), -t124 - qJ(3) * t42 + qJD(3) * t64 + t37 * t108 + (-t105 * t47 - t130) * qJD(4) (t111 * t42 + t9) * t108 + (-t111 * t43 + t7) * t105 + ((-t111 * t63 + t21) * t108 + (t111 * t64 - t22) * t105) * qJD(4), -t123 - t12 * t105 - t73 * t43 - t58 * t63 + (-t108 * t23 + t131) * qJD(4), t124 - t12 * t108 + t73 * t42 - t58 * t64 + (t105 * t23 + t130) * qJD(4), t111 * t113 + t12 * t73 + t23 * t58, t45 * t141 + (t105 * t20 + t157 * t45) * t104, -t125 * t157 + (-t104 * t19 + t177 + (-t104 * t45 - t107 * t44) * qJD(6)) * t105 (t20 + t148) * t108 + (t119 - t169) * t105 (-t19 + t147) * t108 + (t24 + t170) * t105, t25, t18 * t64 - t19 * t74 - t33 * t42 + t44 * t71 + (-t15 * t158 + t2) * t108 + (-qJD(4) * t4 + t15 * t154 - t182) * t105, t17 * t64 - t20 * t74 + t34 * t42 + t45 * t71 + (t15 * t159 + t1) * t108 + (qJD(4) * t5 + t15 * t153 + t183) * t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189, qJ(3) * t189, t82, -0.2e1 * t135, 0, 0, 0, 0.2e1 * qJ(3) * t157 + 0.2e1 * qJD(3) * t105, -0.2e1 * qJ(3) * t95 + 0.2e1 * qJD(3) * t108, 0, -0.2e1 * t105 * t58 - 0.2e1 * t157 * t73, -0.2e1 * t108 * t58 + 0.2e1 * t73 * t95, 0.2e1 * t73 * t58, 0.2e1 * t137 * t98 + 0.2e1 * t138 * t99, 0.4e1 * t105 * t128 + 0.2e1 * t134 * t99, 0.2e1 * t104 * t135 + 0.2e1 * t105 * t140, -0.2e1 * t105 * t142 + 0.2e1 * t107 * t135, t82, 0.2e1 * (t158 * t74 + t18) * t108 + 0.2e1 * (-qJD(4) * t33 - t107 * t71 - t154 * t74) * t105, 0.2e1 * (-t159 * t74 + t17) * t108 + 0.2e1 * (qJD(4) * t34 + t104 * t71 - t153 * t74) * t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, t60, 0, 0, 0, 0, 0, t53, -t52, -t105 * t43 + t176 + (t105 * t64 - t108 * t63) * qJD(4), -t53, t52, t113, 0, 0, 0, 0, 0 (t19 + t147) * t105 + (-t24 + t170) * t108 (t20 - t148) * t105 + (t119 + t169) * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104 * t133, t107 * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t43, t83, t11, t10, pkin(4) * t42 - qJ(5) * t43 - qJD(5) * t63, -t11 - 0.2e1 * t132, -t10 + 0.2e1 * t116, -pkin(4) * t9 - qJ(5) * t7 - qJD(5) * t21, -t154 * t45 + t177, qJD(6) * t125 - t104 * t20 - t107 * t19, t24, -t119, 0, t42 * t163 + qJ(5) * t19 + qJD(5) * t44 + t183 + (t107 * t15 + t164 * t64) * qJD(6), -t42 * t164 + qJ(5) * t20 + qJD(5) * t45 + t182 + (-t104 * t15 + t163 * t64) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, -t157, 0, -t89, -t90, -t61, t89, t90, t61 * t111, t105 * t134 + t128, -0.4e1 * t105 * t138 + t157 * t174, -t66, -t68, 0, t115 * t104 - t191 * t107, t191 * t104 + t115 * t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, -t157, 0, t95, t157, t61, 0, 0, 0, 0, 0, t67, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t188, qJ(5) * t188, -0.2e1 * t138, -0.2e1 * t134, 0, 0, 0, 0.2e1 * qJ(5) * t153 + 0.2e1 * qJD(5) * t104, -0.2e1 * qJ(5) * t154 + 0.2e1 * qJD(5) * t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t83, 0, t9, 0, 0, 0, 0, 0, t24, -t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, 0, 0, t89, 0, 0, 0, 0, 0, -t66, -t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t19, -t42, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t65, -t95, t18, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t154, -t153, 0, t104 * t151, t107 * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t154, -t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
