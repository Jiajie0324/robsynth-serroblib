% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPP2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPP2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPP2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPP2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRRPP2_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:52:47
% EndTime: 2019-03-08 22:53:02
% DurationCPUTime: 8.26s
% Computational Cost: add. (5564->641), mult. (12918->770), div. (0->0), fcn. (9870->10), ass. (0->297)
t231 = cos(qJ(4));
t228 = sin(qJ(4));
t353 = qJD(3) * t228;
t229 = sin(qJ(3));
t356 = qJD(2) * t229;
t172 = t231 * t356 + t353;
t232 = cos(qJ(3));
t354 = qJD(2) * t232;
t208 = -qJD(4) + t354;
t378 = t172 * t208;
t339 = t229 * qJDD(2);
t349 = qJD(4) * t229;
t441 = qJD(2) * t349 - qJDD(3);
t82 = t228 * (qJD(3) * (qJD(4) + t354) + t339) + t441 * t231;
t449 = t82 - t378;
t448 = t82 + t378;
t343 = t231 * qJD(3);
t170 = t228 * t356 - t343;
t380 = t170 * t208;
t341 = qJD(2) * qJD(3);
t316 = t232 * t341;
t81 = -qJD(4) * t343 + (-t316 - t339) * t231 + t441 * t228;
t446 = t81 - t380;
t9 = t228 * t449 + t231 * t446;
t226 = sin(pkin(6));
t230 = sin(qJ(2));
t233 = cos(qJ(2));
t342 = qJD(1) * qJD(2);
t318 = t233 * t342;
t227 = cos(pkin(6));
t357 = qJD(1) * t227;
t384 = qJDD(2) * pkin(8);
t444 = t384 + (qJDD(1) * t230 + t318) * t226 + qJD(3) * t357;
t218 = t232 * qJDD(2);
t168 = t229 * t341 + qJDD(4) - t218;
t443 = t168 * qJ(5) - t208 * qJD(5);
t417 = pkin(3) * t232;
t182 = -pkin(9) * t229 - pkin(2) - t417;
t369 = t231 * t232;
t211 = pkin(8) * t369;
t373 = t226 * t233;
t333 = t228 * t373;
t305 = t232 * t333;
t358 = qJD(1) * t226;
t325 = t230 * t358;
t350 = qJD(4) * t228;
t442 = -qJD(1) * t305 + qJD(4) * t211 + t182 * t350 + t231 * t325;
t351 = qJD(3) * t232;
t402 = t231 * t82;
t403 = t228 * t81;
t440 = t229 * ((t170 * t228 - t172 * t231) * qJD(4) - t402 + t403) - (t170 * t231 + t172 * t228) * t351;
t439 = t82 * qJ(6) + t170 * qJD(6);
t176 = qJD(2) * pkin(8) + t325;
t323 = t229 * t357;
t119 = t176 * t232 + t323;
t109 = qJD(3) * pkin(9) + t119;
t324 = t233 * t358;
t121 = qJD(2) * t182 - t324;
t43 = -t228 * t109 + t231 * t121;
t366 = qJD(5) - t43;
t436 = 0.2e1 * t443;
t419 = t172 ^ 2;
t435 = -t208 ^ 2 - t419;
t297 = pkin(3) * t229 - pkin(9) * t232;
t175 = t297 * qJD(3);
t434 = -t175 * t231 + t442;
t433 = qJD(5) * t228 + t323;
t374 = t226 * t232;
t154 = t227 * t229 + t230 * t374;
t321 = qJD(2) * t373;
t100 = qJD(3) * t154 + t229 * t321;
t102 = t154 * t228 + t231 * t373;
t375 = t226 * t230;
t153 = -t227 * t232 + t229 * t375;
t355 = qJD(2) * t230;
t322 = t226 * t355;
t348 = qJD(4) * t231;
t99 = -qJD(3) * t153 + t232 * t321;
t23 = -qJD(4) * t333 + t154 * t348 + t228 * t99 - t231 * t322;
t432 = t100 * t170 - t102 * t168 + t153 * t82 + t23 * t208;
t420 = t170 ^ 2;
t431 = t419 - t420;
t159 = t168 * pkin(4);
t430 = t159 - qJDD(5);
t103 = t154 * t231 - t333;
t24 = -qJD(4) * t102 + t228 * t322 + t231 * t99;
t429 = t102 * t81 + t103 * t82 + t24 * t170 - t172 * t23;
t428 = t100 * t172 - t103 * t168 - t153 * t81 + t24 * t208;
t368 = t232 * t233;
t124 = (t228 * t230 + t231 * t368) * t226;
t117 = qJD(1) * t124;
t352 = qJD(3) * t229;
t427 = qJ(5) * t352 - qJD(5) * t232 - t117;
t414 = pkin(9) * t168;
t164 = t229 * t176;
t118 = t232 * t357 - t164;
t298 = qJD(3) * pkin(3) + t118;
t262 = qJ(5) * t172 + t298;
t45 = pkin(4) * t170 - t262;
t426 = t208 * t45 + t414;
t340 = qJDD(1) * t227;
t331 = -t229 * t340 - t232 * t444;
t38 = -t176 * t352 - t331;
t35 = qJDD(3) * pkin(9) + t38;
t319 = t230 * t342;
t192 = t226 * t319;
t288 = -qJDD(1) * t373 + t192;
t62 = qJD(2) * t175 + qJDD(2) * t182 + t288;
t307 = t109 * t348 + t121 * t350 + t228 * t35 - t231 * t62;
t389 = cos(pkin(10));
t309 = t389 * t233;
t225 = sin(pkin(10));
t377 = t225 * t230;
t148 = -t227 * t309 + t377;
t310 = t389 * t230;
t376 = t225 * t233;
t149 = t227 * t310 + t376;
t311 = t226 * t389;
t95 = t149 * t232 - t229 * t311;
t49 = -t148 * t231 + t228 * t95;
t150 = t227 * t376 + t310;
t151 = -t227 * t377 + t309;
t97 = t225 * t226 * t229 + t151 * t232;
t51 = -t150 * t231 + t228 * t97;
t251 = g(1) * t51 + g(2) * t49 + g(3) * t102 - t307;
t246 = t251 + t430;
t418 = pkin(4) + pkin(5);
t25 = -t170 * t418 + qJD(6) + t262;
t408 = qJ(6) * t81;
t425 = (qJD(6) + t25) * t172 + t246 - t408;
t387 = qJ(5) * t228;
t424 = -t231 * t418 - t387;
t270 = t168 * t231 + t208 * t350;
t371 = t228 * t232;
t423 = qJD(2) * (-t170 * t229 + t208 * t371) - t270;
t271 = -t168 * t228 + t208 * t348;
t37 = qJD(2) * (-t172 * t229 + t208 * t369) - t271;
t11 = t229 * (qJD(3) * t172 + t270) - t232 * (t208 * t343 - t81);
t238 = t229 * (-qJD(3) * t170 + t271) + t232 * (t208 * t353 + t82);
t416 = pkin(5) * t168;
t415 = pkin(8) * t228;
t413 = pkin(9) * t172;
t412 = pkin(9) - qJ(6);
t409 = qJ(5) * t82;
t407 = qJD(2) * pkin(2);
t199 = t208 * qJ(5);
t44 = t109 * t231 + t121 * t228;
t27 = qJ(6) * t170 + t44;
t20 = -t199 + t27;
t406 = t20 * t208;
t30 = -t199 + t44;
t405 = t208 * t30;
t404 = t208 * t44;
t94 = -t149 * t229 - t232 * t311;
t401 = t231 * t94;
t96 = -t151 * t229 + t225 * t374;
t400 = t231 * t96;
t386 = qJ(5) * t231;
t274 = -t228 * t418 + t386;
t399 = qJD(4) * t274 - (qJD(2) * t274 - t176) * t232 + t433;
t344 = qJD(6) * t231;
t174 = t297 * qJD(2);
t74 = t231 * t118 + t228 * t174;
t56 = qJ(5) * t356 + t74;
t398 = -qJ(6) * t228 * t354 - t350 * t412 - t344 - t56;
t289 = pkin(4) * t228 - t386;
t397 = qJD(4) * t289 - (qJD(2) * t289 + t176) * t232 - t433;
t188 = t412 * t231;
t73 = -t228 * t118 + t174 * t231;
t396 = qJD(4) * t188 - qJD(6) * t228 - (-qJ(6) * t369 - t229 * t418) * qJD(2) + t73;
t326 = -pkin(4) - t415;
t395 = (-qJ(6) * t351 - t175) * t231 + (qJ(6) * t350 - t344 + (-pkin(5) + t326) * qJD(3)) * t229 + t442;
t363 = t228 * t175 + t182 * t348;
t370 = t229 * t231;
t394 = (-pkin(8) * qJD(3) + qJ(6) * qJD(4)) * t370 + (qJD(6) * t229 + (-pkin(8) * qJD(4) + qJ(6) * qJD(3)) * t232) * t228 + t363 + t427;
t60 = (-t229 * t343 - t232 * t350) * pkin(8) + t363;
t393 = t60 + t427;
t392 = t326 * t352 + t434;
t391 = t60 - t117;
t390 = t352 * t415 - t434;
t388 = qJ(5) * t170;
t385 = qJDD(2) * pkin(2);
t383 = t148 * t229;
t382 = t150 * t229;
t381 = t153 * t231;
t379 = t172 * t170;
t372 = t228 * t229;
t26 = qJ(6) * t172 + t43;
t367 = qJD(5) - t26;
t364 = qJDD(1) - g(3);
t361 = pkin(2) * t373 + pkin(8) * t375;
t128 = t228 * t182 + t211;
t222 = t229 ^ 2;
t223 = t232 ^ 2;
t360 = t222 - t223;
t359 = t222 + t223;
t346 = qJD(5) * t231;
t89 = t94 * pkin(3);
t338 = pkin(4) * t401 + t94 * t387 + t89;
t90 = t96 * pkin(3);
t337 = pkin(4) * t400 + t96 * t387 + t90;
t336 = t25 * t350;
t335 = t25 * t348;
t334 = t229 * t373;
t236 = qJD(2) ^ 2;
t332 = t229 * t236 * t232;
t144 = t153 * pkin(3);
t330 = -pkin(4) * t381 - t153 * t387 - t144;
t142 = t148 * pkin(2);
t329 = -pkin(9) * t383 - t148 * t417 - t142;
t143 = t150 * pkin(2);
t328 = -pkin(9) * t382 - t150 * t417 - t143;
t327 = -g(1) * t382 - g(2) * t383 + g(3) * t334;
t320 = t208 * t356;
t315 = t233 * t341;
t50 = t148 * t228 + t231 * t95;
t313 = -t49 * pkin(4) + qJ(5) * t50;
t52 = t150 * t228 + t231 * t97;
t312 = -t51 * pkin(4) + qJ(5) * t52;
t308 = -t102 * pkin(4) + qJ(5) * t103;
t210 = pkin(8) * t371;
t127 = t182 * t231 - t210;
t304 = t176 * t351 + t229 * t444 - t232 * t340;
t303 = t226 * pkin(3) * t368 + pkin(9) * t334 + t361;
t302 = t170 * t324;
t301 = t172 * t324;
t300 = t229 * t324;
t299 = t229 * t316;
t296 = g(1) * t150 + g(2) * t148;
t295 = g(1) * t151 + g(2) * t149;
t112 = -qJ(5) * t232 + t128;
t291 = (qJD(4) * t170 - t81) * pkin(9);
t290 = pkin(4) * t231 + t387;
t29 = pkin(4) * t208 + t366;
t286 = -t228 * t30 + t231 * t29;
t285 = -t228 * t44 - t231 * t43;
t36 = -qJDD(3) * pkin(3) + t304;
t278 = qJDD(2) * t233 - t230 * t236;
t277 = pkin(8) + t289;
t5 = t307 - t430;
t125 = t288 - t385;
t235 = qJD(3) ^ 2;
t275 = -pkin(8) * t235 - t125 + t385;
t101 = -t168 * t232 - t208 * t352;
t6 = -t109 * t350 + t121 * t348 + t228 * t62 + t231 * t35;
t123 = -t231 * t375 + t305;
t68 = -t148 * t371 - t149 * t231;
t70 = -t150 * t371 - t151 * t231;
t269 = g(1) * t70 + g(2) * t68 + g(3) * t123;
t69 = -t148 * t369 + t149 * t228;
t71 = -t150 * t369 + t151 * t228;
t268 = -g(1) * t71 - g(2) * t69 - g(3) * t124;
t267 = g(1) * t96 + g(2) * t94 - g(3) * t153;
t266 = g(1) * t97 + g(2) * t95 + g(3) * t154;
t263 = -pkin(8) + t274;
t10 = t82 * pkin(4) + t81 * qJ(5) - t172 * qJD(5) + t36;
t4 = -pkin(5) * t82 + qJDD(6) - t10;
t261 = -t267 + t4;
t260 = -pkin(9) * t402 - t266;
t259 = t124 * pkin(4) + qJ(5) * t123 + t303;
t258 = t208 * t298 - t414;
t3 = t6 + t443;
t257 = t69 * pkin(4) + pkin(8) * t149 + qJ(5) * t68 + t329;
t256 = t71 * pkin(4) + pkin(8) * t151 + qJ(5) * t70 + t328;
t255 = -t168 + t379;
t22 = -t228 * t380 - t402;
t252 = pkin(9) * qJD(4) * t208 - t267;
t250 = -t10 + t252;
t249 = t252 - t36;
t248 = t81 + t380;
t177 = -t324 - t407;
t247 = -pkin(8) * qJDD(3) + (t177 + t324 - t407) * qJD(3);
t15 = t82 * t372 + (t228 * t351 + t229 * t348) * t170;
t245 = g(1) * t52 + g(2) * t50 + g(3) * t103 - t6;
t242 = t172 * t45 - t246;
t241 = -t208 * t43 + t245;
t240 = t304 * t229 + t38 * t232 + (-t118 * t232 - t119 * t229) * qJD(3) - t295;
t220 = t232 * pkin(4);
t187 = t412 * t228;
t178 = -pkin(3) - t290;
t165 = pkin(3) - t424;
t141 = t277 * t229;
t113 = -t127 + t220;
t111 = t263 * t229;
t93 = pkin(4) * t172 + t388;
t88 = qJ(6) * t372 + t112;
t83 = pkin(5) * t232 + t210 + t220 + (-qJ(6) * t229 - t182) * t231;
t63 = -t172 * t418 - t388;
t59 = (qJD(4) * t290 - t346) * t229 + t277 * t351;
t58 = -pkin(4) * t356 - t73;
t33 = (qJD(4) * t424 + t346) * t229 + t263 * t351;
t21 = -t231 * t378 - t403;
t14 = -t81 * t370 + (-t228 * t349 + t232 * t343) * t172;
t12 = t208 * t418 + t367;
t2 = t3 + t439;
t1 = -qJD(6) * t172 + t408 - t416 + t5;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t364, 0, 0, 0, 0, 0, 0, t278 * t226 (-qJDD(2) * t230 - t233 * t236) * t226, 0, -g(3) + (t227 ^ 2 + (t230 ^ 2 + t233 ^ 2) * t226 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t100 - qJDD(3) * t153 + (-t229 * t315 + t232 * t278) * t226, -qJD(3) * t99 - qJDD(3) * t154 + (-t229 * t278 - t232 * t315) * t226 (t153 * t229 + t154 * t232) * qJDD(2) + (t100 * t229 + t232 * t99 + (t153 * t232 - t154 * t229) * qJD(3)) * qJD(2), -t100 * t118 + t119 * t99 + t153 * t304 + t154 * t38 - g(3) + (-t125 * t233 + t177 * t355) * t226, 0, 0, 0, 0, 0, 0, t432, t428, -t429, -t100 * t298 + t102 * t307 + t103 * t6 + t153 * t36 - t23 * t43 + t24 * t44 - g(3), 0, 0, 0, 0, 0, 0, t432, -t429, -t428, t10 * t153 + t100 * t45 + t102 * t5 + t103 * t3 + t23 * t29 + t24 * t30 - g(3), 0, 0, 0, 0, 0, 0, t432, -t428, t429, t1 * t102 - t100 * t25 + t103 * t2 + t12 * t23 - t153 * t4 + t20 * t24 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t364 * t373 + t296, -t364 * t375 + t295, 0, 0, qJDD(2) * t222 + 0.2e1 * t299, 0.2e1 * t218 * t229 - 0.2e1 * t341 * t360, qJDD(3) * t229 + t232 * t235, qJDD(2) * t223 - 0.2e1 * t299, qJDD(3) * t232 - t229 * t235, 0, t247 * t229 + ((-g(3) * t233 + t319) * t226 + t275 + t296) * t232, t247 * t232 + (-t275 - t192) * t229 + t327, t359 * t384 + (-g(3) * t230 - t318 * t359) * t226 + t240, -t125 * pkin(2) + g(1) * t143 + g(2) * t142 - g(3) * t361 + (-t177 * t230 + (t118 * t229 - t119 * t232) * t233) * t358 + t240 * pkin(8), t14, t440, t11, t15, t238, t101, t127 * t168 - t390 * t208 + (t307 + (pkin(8) * t170 - t228 * t298) * qJD(3)) * t232 + (pkin(8) * t82 + qJD(3) * t43 + t228 * t36 - t298 * t348 - t302) * t229 + t268, -t128 * t168 + t391 * t208 + (t6 + (pkin(8) * t172 - t231 * t298) * qJD(3)) * t232 + (-pkin(8) * t81 - qJD(3) * t44 + t231 * t36 + t298 * t350 - t301) * t229 + t269, t127 * t81 - t128 * t82 - t390 * t172 - t391 * t170 + t285 * t351 + (-t228 * t6 + t231 * t307 + (t228 * t43 - t231 * t44) * qJD(4)) * t229 - t327, t6 * t128 - t307 * t127 + t298 * t300 - g(1) * t328 - g(2) * t329 - g(3) * t303 + t391 * t44 + t390 * t43 + (t229 * t36 - t298 * t351 - t295) * pkin(8), t14, t11, -t440, t101, -t238, t15, -t113 * t168 + t141 * t82 + t170 * t59 + (t353 * t45 + t5) * t232 + t392 * t208 + (-qJD(3) * t29 + t10 * t228 + t348 * t45 - t302) * t229 + t268, -t112 * t82 - t113 * t81 + t392 * t172 - t393 * t170 + t286 * t351 + (-t228 * t3 + t231 * t5 + (-t228 * t29 - t231 * t30) * qJD(4)) * t229 - t327, t112 * t168 + t141 * t81 - t172 * t59 + (-t343 * t45 - t3) * t232 - t393 * t208 + (qJD(3) * t30 - t10 * t231 + t350 * t45 + t301) * t229 - t269, t3 * t112 + t10 * t141 + t5 * t113 - g(1) * t256 - g(2) * t257 - g(3) * t259 + (t59 - t300) * t45 + t393 * t30 + t392 * t29, t14, -t440, -t11, t15, t238, t101, -t111 * t82 - t168 * t83 - t170 * t33 + (-t25 * t353 + t1) * t232 + t395 * t208 + (-qJD(3) * t12 - t228 * t4 - t302 - t335) * t229 + t268, -t111 * t81 + t168 * t88 + t172 * t33 + (t25 * t343 - t2) * t232 - t394 * t208 + (qJD(3) * t20 + t231 * t4 + t301 - t336) * t229 - t269, t81 * t83 + t82 * t88 - t395 * t172 + t394 * t170 + (-t12 * t231 + t20 * t228) * t351 + (-t1 * t231 + t2 * t228 + (t12 * t228 + t20 * t231) * qJD(4)) * t229 + t327, t2 * t88 + t1 * t83 + t4 * t111 - g(1) * (pkin(5) * t71 + qJ(6) * t382 + t256) - g(2) * (pkin(5) * t69 + qJ(6) * t383 + t257) - g(3) * (pkin(5) * t124 - qJ(6) * t334 + t259) + (t33 + t300) * t25 + t394 * t20 + t395 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t332, t360 * t236, t339, t332, t218, qJDD(3), qJD(3) * t119 - t177 * t356 - t267 - t304, -t177 * t354 + (t118 + t164) * qJD(3) + t266 + t331, 0, 0, t21, -t9, t37, t22, -t423, t320, -pkin(3) * t82 - t119 * t170 + t208 * t73 + t228 * t258 + t231 * t249 - t356 * t43, pkin(3) * t81 - t119 * t172 - t208 * t74 - t228 * t249 + t231 * t258 + t356 * t44, t170 * t74 + t172 * t73 + (t43 * t354 + t6 + (-t43 + t413) * qJD(4)) * t231 + (t291 + t307 + t404) * t228 + t260, -t36 * pkin(3) - g(1) * t90 - g(2) * t89 + g(3) * t144 + t298 * t119 - t43 * t73 - t44 * t74 + (qJD(4) * t285 + t228 * t307 + t6 * t231 - t266) * pkin(9), t21, t37, t9, t320, t423, t22, t397 * t170 + t178 * t82 - t208 * t58 - t228 * t426 + t250 * t231 + t29 * t356, t170 * t56 - t172 * t58 + (-t29 * t354 + t3 + (t29 + t413) * qJD(4)) * t231 + (t291 + t5 + t405) * t228 + t260, -t397 * t172 + t178 * t81 + t208 * t56 + t250 * t228 + t231 * t426 - t30 * t356, t10 * t178 - t30 * t56 - t29 * t58 - g(1) * t337 - g(2) * t338 - g(3) * t330 + t397 * t45 + (qJD(4) * t286 + t5 * t228 + t3 * t231 - t266) * pkin(9), t21, t9, -t37, t22, -t423, t320, -t336 - t165 * t82 - t168 * t187 + t396 * t208 - t399 * t170 + (t12 * t229 + t25 * t371) * qJD(2) + t261 * t231, t335 - t165 * t81 + t168 * t188 - t398 * t208 + t399 * t172 + (-t20 * t229 - t25 * t369) * qJD(2) + t261 * t228, t187 * t81 + t188 * t82 - t396 * t172 + t398 * t170 + (t12 * t208 - t2) * t231 + (-t1 - t406) * t228 + t266, t2 * t188 + t1 * t187 + t4 * t165 - g(1) * (pkin(5) * t400 + t412 * t97 + t337) - g(2) * (pkin(5) * t401 + t412 * t95 + t338) - g(3) * (-pkin(5) * t381 + t154 * t412 + t330) + t399 * t25 + t398 * t20 + t396 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t379, t431, -t248, -t379, -t448, t168, t172 * t298 + t251 - t404, -t170 * t298 + t241, 0, 0, t379, -t248, -t431, t168, t448, -t379, -t170 * t93 + t159 - t242 - t404, pkin(4) * t81 - t409 + (t30 - t44) * t172 + (t29 - t366) * t170, -t170 * t45 + t172 * t93 - t241 + t436, -t5 * pkin(4) - g(1) * t312 - g(2) * t313 - g(3) * t308 + t3 * qJ(5) - t29 * t44 + t30 * t366 - t45 * t93, t379, -t431, t248, -t379, -t448, t168, t170 * t63 - t208 * t27 + (pkin(5) + t418) * t168 + t425, t170 * t25 - t172 * t63 + t208 * t26 - t245 + t436 + t439, t409 - t418 * t81 + (-t20 + t27) * t172 + (-t12 + t367) * t170, t2 * qJ(5) - t1 * t418 - t12 * t27 - t25 * t63 - g(1) * (-pkin(5) * t51 + t312) - g(2) * (-pkin(5) * t49 + t313) - g(3) * (-pkin(5) * t102 + t308) + t367 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t255, -t248, t435, t242 + t405, 0, 0, 0, 0, 0, 0, t255, t435, t248, t406 - t416 - t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t449, -t446, -t419 - t420, t12 * t172 - t170 * t20 + t261;];
tau_reg  = t7;
