% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 06:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRPP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRRPP2_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:48:16
% EndTime: 2019-05-05 06:48:25
% DurationCPUTime: 9.38s
% Computational Cost: add. (13893->294), mult. (27172->326), div. (0->0), fcn. (19231->10), ass. (0->186)
t2540 = cos(qJ(3));
t2586 = t2540 * qJD(2);
t2520 = -qJD(4) + t2586;
t2495 = t2520 ^ 2;
t2536 = sin(qJ(4));
t2539 = cos(qJ(4));
t2537 = sin(qJ(3));
t2596 = qJD(2) * t2537;
t2501 = qJD(3) * t2536 + t2539 * t2596;
t2497 = t2501 ^ 2;
t2467 = t2497 + t2495;
t2499 = -qJD(3) * t2539 + t2536 * t2596;
t2470 = t2501 * t2499;
t2523 = qJD(3) * t2596;
t2582 = t2540 * qJDD(2);
t2577 = t2523 - t2582;
t2574 = -qJDD(4) - t2577;
t2551 = -t2574 + t2470;
t2424 = t2467 * t2536 - t2539 * t2551;
t2580 = qJD(3) * t2586;
t2583 = t2537 * qJDD(2);
t2553 = t2580 + t2583;
t2546 = -t2499 * qJD(4) + t2536 * qJDD(3) + t2539 * t2553;
t2587 = t2520 * t2499;
t2544 = t2546 + t2587;
t2391 = t2424 * t2537 - t2540 * t2544;
t2531 = sin(pkin(6));
t2533 = cos(pkin(6));
t2394 = t2424 * t2540 + t2544 * t2537;
t2538 = sin(qJ(2));
t2541 = cos(qJ(2));
t2628 = t2467 * t2539 + t2536 * t2551;
t2562 = t2394 * t2538 + t2541 * t2628;
t2357 = -t2531 * t2391 + t2533 * t2562;
t2371 = t2394 * t2541 - t2538 * t2628;
t2530 = sin(pkin(10));
t2532 = cos(pkin(10));
t2665 = t2357 * t2530 - t2371 * t2532;
t2664 = t2357 * t2532 + t2371 * t2530;
t2550 = -t2539 * qJDD(3) + t2536 * t2553;
t2433 = (qJD(4) + t2520) * t2501 + t2550;
t2545 = t2546 - t2587;
t2400 = t2433 * t2539 - t2545 * t2536;
t2600 = t2499 ^ 2;
t2448 = t2497 + t2600;
t2377 = t2400 * t2537 - t2448 * t2540;
t2380 = t2400 * t2540 + t2448 * t2537;
t2397 = t2433 * t2536 + t2545 * t2539;
t2569 = t2380 * t2538 - t2397 * t2541;
t2340 = -t2531 * t2377 + t2533 * t2569;
t2362 = t2380 * t2541 + t2397 * t2538;
t2650 = t2340 * t2530 - t2362 * t2532;
t2663 = t2340 * t2532 + t2362 * t2530;
t2354 = t2533 * t2391 + t2531 * t2562;
t2337 = t2533 * t2377 + t2531 * t2569;
t2548 = t2501 * qJD(4) + t2550;
t2431 = -t2501 * t2520 + t2548;
t2605 = -t2600 - t2495;
t2607 = t2470 + t2574;
t2620 = t2607 * t2536 + t2539 * t2605;
t2630 = t2540 * t2620;
t2625 = t2431 * t2537 + t2630;
t2621 = t2536 * t2605 - t2607 * t2539;
t2631 = t2538 * t2621;
t2635 = t2541 * t2625 + t2631;
t2632 = t2537 * t2620;
t2627 = -t2540 * t2431 + t2632;
t2629 = t2541 * t2621;
t2636 = t2538 * t2625 - t2629;
t2647 = -t2531 * t2627 + t2533 * t2636;
t2654 = -t2530 * t2647 + t2532 * t2635;
t2653 = t2530 * t2635 + t2532 * t2647;
t2649 = t2531 * t2636 + t2533 * t2627;
t2576 = g(1) * t2530 - g(2) * t2532;
t2554 = t2533 * t2576;
t2598 = -g(3) + qJDD(1);
t2578 = t2531 * t2598;
t2613 = t2554 + t2578;
t2608 = qJD(4) - t2520;
t2601 = qJD(3) ^ 2;
t2606 = -qJDD(3) * pkin(3) - t2601 * pkin(9);
t2604 = t2548 * pkin(4) - qJ(5) * t2544;
t2599 = -2 * qJD(5);
t2597 = t2501 * qJ(6);
t2509 = -g(1) * t2532 - g(2) * t2530;
t2455 = t2541 * t2509 + t2538 * t2613;
t2542 = qJD(2) ^ 2;
t2442 = -pkin(2) * t2542 + qJDD(2) * pkin(8) + t2455;
t2549 = -t2531 * t2576 + t2533 * t2598;
t2428 = t2540 * t2442 + t2537 * t2549;
t2502 = (-pkin(3) * t2540 - pkin(9) * t2537) * qJD(2);
t2407 = -pkin(3) * t2601 + qJDD(3) * pkin(9) + t2502 * t2586 + t2428;
t2575 = t2538 * t2509 - t2541 * t2613;
t2441 = -qJDD(2) * pkin(2) - t2542 * pkin(8) + t2575;
t2503 = 0.2e1 * t2580 + t2583;
t2543 = (t2577 + t2523) * pkin(3) - t2503 * pkin(9) + t2441;
t2376 = t2539 * t2407 + t2536 * t2543;
t2526 = t2537 ^ 2;
t2527 = t2540 ^ 2;
t2584 = t2526 + t2527;
t2579 = -pkin(4) * t2520 + t2599;
t2375 = -t2536 * t2407 + t2539 * t2543;
t2476 = t2540 * t2549;
t2427 = -t2537 * t2442 + t2476;
t2465 = pkin(4) * t2499 - qJ(5) * t2501;
t2573 = -t2574 * qJ(5) - t2499 * t2465 + t2520 * t2599 + t2376;
t2552 = t2574 * pkin(4) - t2495 * qJ(5) + qJDD(5) - t2375;
t2351 = t2574 * pkin(5) + (pkin(5) * t2499 - (2 * qJD(6)) + t2465) * t2501 + t2552 - t2545 * qJ(6);
t2360 = -t2600 * pkin(5) + t2548 * qJ(6) + 0.2e1 * qJD(6) * t2499 + (t2597 + (-pkin(4) - pkin(5)) * t2520) * t2520 + t2573;
t2332 = t2351 * t2536 + t2360 * t2539;
t2361 = t2550 * pkin(5) + t2600 * qJ(6) + t2502 * t2596 - qJDD(6) - t2427 + (pkin(5) * t2608 + t2579 + t2597) * t2501 + t2604 + t2606;
t2327 = t2332 * t2540 + t2361 * t2537;
t2331 = -t2351 * t2539 + t2360 * t2536;
t2572 = t2327 * t2538 - t2331 * t2541;
t2365 = -pkin(4) * t2495 + t2573;
t2366 = t2465 * t2501 + t2552;
t2334 = t2365 * t2539 + t2366 * t2536;
t2406 = -t2476 + (qJD(2) * t2502 + t2442) * t2537 + t2606;
t2370 = t2579 * t2501 + t2406 + t2604;
t2330 = t2334 * t2540 + t2370 * t2537;
t2333 = t2365 * t2536 - t2366 * t2539;
t2571 = t2330 * t2538 - t2333 * t2541;
t2350 = -t2375 * t2536 + t2376 * t2539;
t2336 = t2350 * t2540 + t2406 * t2537;
t2349 = t2375 * t2539 + t2376 * t2536;
t2570 = t2336 * t2538 - t2349 * t2541;
t2384 = -t2427 * t2537 + t2428 * t2540;
t2566 = t2384 * t2538 - t2441 * t2541;
t2432 = t2501 * t2608 + t2550;
t2390 = t2432 * t2537 + t2630;
t2563 = t2390 * t2538 - t2629;
t2559 = t2538 * t2455 - t2541 * t2575;
t2519 = t2537 * t2542 * t2540;
t2510 = qJDD(3) + t2519;
t2517 = -t2527 * t2542 - t2601;
t2473 = -t2510 * t2537 + t2517 * t2540;
t2504 = -0.2e1 * t2523 + t2582;
t2558 = t2473 * t2538 + t2504 * t2541;
t2511 = -qJDD(3) + t2519;
t2516 = -t2526 * t2542 - t2601;
t2474 = t2511 * t2540 - t2516 * t2537;
t2557 = t2474 * t2538 - t2503 * t2541;
t2505 = t2584 * qJDD(2);
t2508 = t2584 * t2542;
t2556 = t2505 * t2538 + t2508 * t2541;
t2555 = qJDD(2) * t2541 - t2538 * t2542;
t2507 = -qJDD(2) * t2538 - t2541 * t2542;
t2487 = t2555 * t2533;
t2486 = t2507 * t2533;
t2485 = t2555 * t2531;
t2484 = t2507 * t2531;
t2472 = t2511 * t2537 + t2516 * t2540;
t2471 = t2510 * t2540 + t2517 * t2537;
t2468 = t2505 * t2541 - t2508 * t2538;
t2464 = t2556 * t2533;
t2463 = t2556 * t2531;
t2444 = t2474 * t2541 + t2503 * t2538;
t2443 = t2473 * t2541 - t2504 * t2538;
t2420 = -t2531 * t2472 + t2533 * t2557;
t2419 = -t2531 * t2471 + t2533 * t2558;
t2418 = t2533 * t2472 + t2531 * t2557;
t2417 = t2533 * t2471 + t2531 * t2558;
t2410 = t2455 * t2541 + t2538 * t2575;
t2404 = t2531 ^ 2 * t2576 + (-t2578 + t2559) * t2533;
t2403 = t2533 ^ 2 * t2598 + (t2559 - t2554) * t2531;
t2387 = -t2432 * t2540 + t2632;
t2383 = t2427 * t2540 + t2428 * t2537;
t2374 = t2384 * t2541 + t2441 * t2538;
t2369 = t2390 * t2541 + t2631;
t2353 = -t2531 * t2383 + t2533 * t2566;
t2352 = t2533 * t2383 + t2531 * t2566;
t2348 = -t2531 * t2387 + t2533 * t2563;
t2345 = t2533 * t2387 + t2531 * t2563;
t2335 = t2350 * t2537 - t2406 * t2540;
t2329 = t2334 * t2537 - t2370 * t2540;
t2328 = t2336 * t2541 + t2349 * t2538;
t2326 = t2332 * t2537 - t2361 * t2540;
t2325 = t2330 * t2541 + t2333 * t2538;
t2324 = -t2531 * t2335 + t2533 * t2570;
t2323 = t2533 * t2335 + t2531 * t2570;
t2322 = t2327 * t2541 + t2331 * t2538;
t2321 = -t2531 * t2329 + t2533 * t2571;
t2320 = t2533 * t2329 + t2531 * t2571;
t2319 = -t2531 * t2326 + t2533 * t2572;
t2318 = t2533 * t2326 + t2531 * t2572;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2532 * t2509 - t2530 * t2576, 0, 0, 0, 0, 0, 0, -t2487 * t2530 + t2507 * t2532, -t2486 * t2530 - t2532 * t2555, 0, -t2404 * t2530 + t2410 * t2532, 0, 0, 0, 0, 0, 0, -t2419 * t2530 + t2443 * t2532, -t2420 * t2530 + t2444 * t2532, -t2464 * t2530 + t2468 * t2532, -t2353 * t2530 + t2374 * t2532, 0, 0, 0, 0, 0, 0, -t2348 * t2530 + t2369 * t2532, -t2665, t2650, -t2324 * t2530 + t2328 * t2532, 0, 0, 0, 0, 0, 0, t2654, t2650, t2665, -t2321 * t2530 + t2325 * t2532, 0, 0, 0, 0, 0, 0, t2654, t2665, -t2650, -t2319 * t2530 + t2322 * t2532; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2530 * t2509 + t2532 * t2576, 0, 0, 0, 0, 0, 0, t2487 * t2532 + t2507 * t2530, t2486 * t2532 - t2530 * t2555, 0, t2404 * t2532 + t2410 * t2530, 0, 0, 0, 0, 0, 0, t2419 * t2532 + t2443 * t2530, t2420 * t2532 + t2444 * t2530, t2464 * t2532 + t2468 * t2530, t2353 * t2532 + t2374 * t2530, 0, 0, 0, 0, 0, 0, t2348 * t2532 + t2369 * t2530, t2664, -t2663, t2324 * t2532 + t2328 * t2530, 0, 0, 0, 0, 0, 0, t2653, -t2663, -t2664, t2321 * t2532 + t2325 * t2530, 0, 0, 0, 0, 0, 0, t2653, -t2664, t2663, t2319 * t2532 + t2322 * t2530; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2598, 0, 0, 0, 0, 0, 0, t2485, t2484, 0, t2403, 0, 0, 0, 0, 0, 0, t2417, t2418, t2463, t2352, 0, 0, 0, 0, 0, 0, t2345, t2354, -t2337, t2323, 0, 0, 0, 0, 0, 0, t2649, -t2337, -t2354, t2320, 0, 0, 0, 0, 0, 0, t2649, -t2354, t2337, t2318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2509, 0, 0, 0, 0, 0, 0, t2507, -t2555, 0, t2410, 0, 0, 0, 0, 0, 0, t2443, t2444, t2468, t2374, 0, 0, 0, 0, 0, 0, t2369, t2371, -t2362, t2328, 0, 0, 0, 0, 0, 0, t2635, -t2362, -t2371, t2325, 0, 0, 0, 0, 0, 0, t2635, -t2371, t2362, t2322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2576, 0, 0, 0, 0, 0, 0, t2487, t2486, 0, t2404, 0, 0, 0, 0, 0, 0, t2419, t2420, t2464, t2353, 0, 0, 0, 0, 0, 0, t2348, t2357, -t2340, t2324, 0, 0, 0, 0, 0, 0, t2647, -t2340, -t2357, t2321, 0, 0, 0, 0, 0, 0, t2647, -t2357, t2340, t2319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2598, 0, 0, 0, 0, 0, 0, t2485, t2484, 0, t2403, 0, 0, 0, 0, 0, 0, t2417, t2418, t2463, t2352, 0, 0, 0, 0, 0, 0, t2345, t2354, -t2337, t2323, 0, 0, 0, 0, 0, 0, t2649, -t2337, -t2354, t2320, 0, 0, 0, 0, 0, 0, t2649, -t2354, t2337, t2318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2542, -qJDD(2), 0, t2455, 0, 0, 0, 0, 0, 0, t2473, t2474, t2505, t2384, 0, 0, 0, 0, 0, 0, t2390, t2394, -t2380, t2336, 0, 0, 0, 0, 0, 0, t2625, -t2380, -t2394, t2330, 0, 0, 0, 0, 0, 0, t2625, -t2394, t2380, t2327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2542, 0, -t2575, 0, 0, 0, 0, 0, 0, t2504, -t2503, t2508, -t2441, 0, 0, 0, 0, 0, 0, -t2621, t2628, t2397, -t2349, 0, 0, 0, 0, 0, 0, -t2621, t2397, -t2628, -t2333, 0, 0, 0, 0, 0, 0, -t2621, -t2628, -t2397, -t2331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, 0, 0, 0, 0, 0, 0, t2471, t2472, 0, t2383, 0, 0, 0, 0, 0, 0, t2387, t2391, -t2377, t2335, 0, 0, 0, 0, 0, 0, t2627, -t2377, -t2391, t2329, 0, 0, 0, 0, 0, 0, t2627, -t2391, t2377, t2326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2517, t2511, t2582, t2428, 0, 0, 0, 0, 0, 0, t2620, t2424, -t2400, t2350, 0, 0, 0, 0, 0, 0, t2620, -t2400, -t2424, t2334, 0, 0, 0, 0, 0, 0, t2620, -t2424, t2400, t2332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2510, t2516, -t2583, t2427, 0, 0, 0, 0, 0, 0, -t2432, -t2544, t2448, -t2406, 0, 0, 0, 0, 0, 0, -t2431, t2448, t2544, -t2370, 0, 0, 0, 0, 0, 0, -t2431, t2544, -t2448, -t2361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2504, t2503, -t2508, t2441, 0, 0, 0, 0, 0, 0, t2621, -t2628, -t2397, t2349, 0, 0, 0, 0, 0, 0, t2621, -t2397, t2628, t2333, 0, 0, 0, 0, 0, 0, t2621, t2628, t2397, t2331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2605, -t2551, -t2433, t2376, 0, 0, 0, 0, 0, 0, t2605, -t2433, t2551, t2365, 0, 0, 0, 0, 0, 0, t2605, t2551, t2433, t2360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2607, -t2467, -t2545, t2375, 0, 0, 0, 0, 0, 0, -t2607, -t2545, t2467, -t2366, 0, 0, 0, 0, 0, 0, -t2607, t2467, t2545, -t2351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2432, t2544, -t2448, t2406, 0, 0, 0, 0, 0, 0, t2431, -t2448, -t2544, t2370, 0, 0, 0, 0, 0, 0, t2431, -t2544, t2448, t2361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2605, -t2433, t2551, t2365, 0, 0, 0, 0, 0, 0, t2605, t2551, t2433, t2360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2431, -t2448, -t2544, t2370, 0, 0, 0, 0, 0, 0, t2431, -t2544, t2448, t2361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2607, t2545, -t2467, t2366, 0, 0, 0, 0, 0, 0, t2607, -t2467, -t2545, t2351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2605, t2551, t2433, t2360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2607, -t2467, -t2545, t2351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2431, t2544, -t2448, -t2361;];
f_new_reg  = t1;
