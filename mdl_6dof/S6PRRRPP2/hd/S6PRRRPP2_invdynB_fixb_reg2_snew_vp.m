% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 06:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRPP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRRPP2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:46:27
% EndTime: 2019-05-05 06:47:20
% DurationCPUTime: 47.20s
% Computational Cost: add. (62451->778), mult. (121650->1115), div. (0->0), fcn. (84985->10), ass. (0->577)
t936 = sin(qJ(3));
t1042 = qJD(2) * t936;
t935 = sin(qJ(4));
t938 = cos(qJ(4));
t888 = -t938 * qJD(3) + t1042 * t935;
t939 = cos(qJ(3));
t1041 = qJD(2) * t939;
t916 = -qJD(4) + t1041;
t1056 = t916 * t888;
t1036 = qJD(2) * qJD(3);
t1027 = t939 * t1036;
t1034 = qJDD(2) * t936;
t893 = t1027 + t1034;
t972 = -t935 * qJDD(3) - t938 * t893;
t949 = qJD(4) * t888 + t972;
t1118 = t1056 + t949;
t1022 = -t938 * qJDD(3) + t935 * t893;
t890 = qJD(3) * t935 + t1042 * t938;
t767 = (qJD(4) + t916) * t890 + t1022;
t1105 = t1118 * t938 - t767 * t935;
t1099 = t888 ^ 2;
t884 = t890 ^ 2;
t1116 = t884 + t1099;
t667 = t1118 * t935 + t767 * t938;
t609 = t1116 * t936 + t667 * t939;
t937 = sin(qJ(2));
t940 = cos(qJ(2));
t1005 = t1105 * t940 + t609 * t937;
t606 = -t1116 * t939 + t667 * t936;
t930 = sin(pkin(6));
t932 = cos(pkin(6));
t513 = t1005 * t932 - t930 * t606;
t559 = -t1105 * t937 + t609 * t940;
t929 = sin(pkin(10));
t931 = cos(pkin(10));
t465 = t513 * t931 + t559 * t929;
t1279 = qJ(1) * t465;
t1243 = t513 * t929 - t559 * t931;
t1278 = qJ(1) * t1243;
t1098 = t916 ^ 2;
t1113 = t1099 - t1098;
t835 = t890 * t888;
t1032 = qJDD(2) * t939;
t919 = t936 * t1036;
t894 = -t919 + t1032;
t885 = -qJDD(4) + t894;
t1127 = -t835 + t885;
t1145 = t1127 * t935;
t1175 = t1113 * t938 + t1145;
t1228 = t1175 * t936;
t644 = t767 * t939 + t1228;
t1144 = t1127 * t938;
t1177 = -t1113 * t935 + t1144;
t1223 = t1177 * t940;
t1227 = t1175 * t939;
t651 = t767 * t936 - t1227;
t987 = t651 * t937 - t1223;
t552 = t930 * t644 + t932 * t987;
t1224 = t1177 * t937;
t596 = t651 * t940 + t1224;
t1330 = t552 * t929 - t596 * t931;
t1329 = t552 * t931 + t596 * t929;
t510 = t1005 * t930 + t932 * t606;
t1237 = (t510 * t930 + t513 * t932) * pkin(7);
t1126 = t835 + t885;
t1146 = t1126 * t938;
t856 = t884 - t1098;
t737 = -t856 * t935 + t1146;
t640 = -t1118 * t939 + t737 * t936;
t646 = t1118 * t936 + t737 * t939;
t1147 = t1126 * t935;
t731 = -t856 * t938 - t1147;
t992 = t646 * t937 + t731 * t940;
t547 = -t930 * t640 + t932 * t992;
t591 = t646 * t940 - t731 * t937;
t1290 = t547 * t929 - t591 * t931;
t1328 = t547 * t931 + t591 * t929;
t1262 = pkin(1) * t510;
t1263 = pkin(1) * t513;
t1325 = -t932 * t644 + t930 * t987;
t1119 = t1056 - t949;
t1079 = t1119 * t935;
t1038 = qJD(4) - t916;
t766 = t1038 * t890 + t1022;
t669 = -t766 * t938 - t1079;
t832 = t884 - t1099;
t820 = t939 * t832;
t624 = t669 * t936 - t820;
t1063 = t832 * t936;
t627 = t669 * t939 + t1063;
t1193 = t1119 * t938;
t660 = -t766 * t935 + t1193;
t999 = t627 * t937 - t660 * t940;
t518 = -t930 * t624 + t932 * t999;
t566 = t627 * t940 + t660 * t937;
t1324 = t518 * t929 - t566 * t931;
t1323 = t518 * t931 + t566 * t929;
t1319 = t932 * t640 + t930 * t992;
t1235 = pkin(7) * t559;
t1114 = -t1098 - t1099;
t1174 = t1114 * t935 - t1146;
t1182 = t1174 * t937;
t1173 = t1114 * t938 + t1147;
t1183 = t1173 * t939;
t810 = qJD(4) * t890 + t1022;
t863 = t890 * t916;
t765 = t810 - t863;
t1249 = t765 * t936 + t1183;
t1268 = t1249 * t940 + t1182;
t1184 = t1173 * t936;
t1250 = -t939 * t765 + t1184;
t1181 = t1174 * t940;
t1269 = t1249 * t937 - t1181;
t1285 = -t1250 * t930 + t1269 * t932;
t1301 = t1268 * t929 + t1285 * t931;
t1312 = qJ(1) * t1301;
t1302 = t1268 * t931 - t1285 * t929;
t1311 = qJ(1) * t1302;
t1310 = t932 * t624 + t930 * t999;
t1309 = pkin(1) * t1285;
t1286 = t1250 * t932 + t1269 * t930;
t1308 = pkin(1) * t1286;
t1117 = t884 + t1098;
t1178 = -t1117 * t935 - t1144;
t1255 = t1178 * t939;
t1217 = -t1119 * t936 + t1255;
t1176 = t1117 * t938 - t1145;
t1226 = t1176 * t937;
t1238 = t1217 * t940 + t1226;
t1256 = t1178 * t936;
t1218 = t939 * t1119 + t1256;
t1225 = t1176 * t940;
t1239 = t1217 * t937 - t1225;
t1266 = -t1218 * t930 + t1239 * t932;
t1287 = t1238 * t929 + t1266 * t931;
t1305 = qJ(1) * t1287;
t1288 = t1238 * t931 - t1266 * t929;
t1304 = qJ(1) * t1288;
t1204 = pkin(8) * t609;
t1303 = pkin(2) * t1105 + t1204;
t1300 = (-t1285 * t932 - t1286 * t930) * pkin(7);
t1205 = pkin(8) * t606;
t1299 = pkin(1) * t1266;
t1267 = t1218 * t932 + t1239 * t930;
t1298 = pkin(1) * t1267;
t1297 = pkin(7) * t1268;
t1172 = pkin(2) * t606 - pkin(3) * t1116 + pkin(9) * t667;
t1284 = (-t1266 * t932 - t1267 * t930) * pkin(7);
t1283 = pkin(7) * t1238;
t1282 = pkin(8) * t1250;
t1203 = pkin(9) * t1173;
t1271 = -pkin(2) * t1250 - t1203;
t1208 = pkin(2) * t1174;
t1270 = pkin(8) * t1249 - t1208;
t1236 = pkin(2) * t1176;
t1260 = pkin(3) * t1176;
t1259 = pkin(8) * t1218;
t1165 = pkin(9) * t1105;
t1234 = pkin(9) * t1176;
t1233 = pkin(9) * t1178;
t1206 = pkin(3) * t1174;
t1248 = -qJ(5) * t1114 - t1206;
t1246 = -pkin(2) * t1218 - t1233;
t1245 = -pkin(3) * t1105 + qJ(5) * t767;
t1244 = pkin(8) * t1217 - t1236;
t1055 = t916 * t935;
t849 = t890 * t1055;
t1044 = -t938 * t949 + t849;
t824 = t936 * t835;
t1107 = t1044 * t939 + t824;
t1054 = t916 * t938;
t850 = t890 * t1054;
t1124 = t935 * t949 + t850;
t1130 = t1107 * t940 - t1124 * t937;
t825 = t939 * t835;
t1106 = t1044 * t936 - t825;
t983 = t1107 * t937 + t1124 * t940;
t1220 = -t1106 * t930 + t932 * t983;
t1133 = t1130 * t931 - t1220 * t929;
t1134 = t1130 * t929 + t1220 * t931;
t1202 = pkin(9) * t1174;
t1100 = t1106 * t932 + t930 * t983;
t1219 = qJ(5) * t1127 - t1260;
t1030 = t888 * t1055;
t1016 = -t850 - t1030;
t1029 = t888 * t1054;
t1017 = -t849 + t1029;
t1060 = t885 * t936;
t1103 = t1017 * t939 - t1060;
t1138 = -t1016 * t937 + t1103 * t940;
t866 = t939 * t885;
t1108 = t1017 * t936 + t866;
t1139 = t1016 * t940 + t1103 * t937;
t1166 = -t1108 * t930 + t1139 * t932;
t1214 = t1138 * t931 - t1166 * t929;
t1213 = t1138 * t929 + t1166 * t931;
t971 = t810 * t935 - t1029;
t1110 = t939 * t971 - t824;
t970 = t810 * t938 + t1030;
t1136 = t1110 * t940 - t937 * t970;
t1109 = t936 * t971 + t825;
t1137 = t1110 * t937 + t940 * t970;
t1168 = -t1109 * t930 + t1137 * t932;
t1212 = t1136 * t931 - t1168 * t929;
t1211 = t1136 * t929 + t1168 * t931;
t1198 = qJ(5) * t1116;
t1197 = qJ(5) * t1119;
t1196 = qJ(6) * t1118;
t1169 = t1109 * t932 + t1137 * t930;
t1167 = t1108 * t932 + t1139 * t930;
t1096 = qJD(3) ^ 2;
t1024 = g(1) * t929 - t931 * g(2);
t1047 = g(3) - qJDD(1);
t1142 = t932 * t1024 - t930 * t1047;
t901 = g(1) * t931 + g(2) * t929;
t800 = t1142 * t937 - t940 * t901;
t941 = qJD(2) ^ 2;
t787 = -t941 * pkin(2) + qJDD(2) * pkin(8) + t800;
t861 = t1024 * t930 + t1047 * t932;
t847 = t939 * t861;
t1093 = pkin(3) * t939;
t1018 = -pkin(9) * t936 - t1093;
t891 = t1018 * qJD(2);
t679 = (qJD(2) * t891 + t787) * t936 - qJDD(3) * pkin(3) - t1096 * pkin(9) + t847;
t1143 = t810 * pkin(4) - t1197 + t679;
t1039 = qJD(6) * t888;
t1040 = qJD(5) * t916;
t905 = 0.2e1 * t1040;
t1125 = -0.2e1 * t1039 + t905;
t1121 = t929 * t1047;
t1120 = t931 * t1047;
t848 = pkin(5) * t916 - qJ(6) * t890;
t1115 = t890 * t848 + qJDD(6);
t1111 = -t810 * pkin(5) + t1115;
t831 = -t1024 * t929 - t931 * t901;
t830 = t1024 * t931 - t929 * t901;
t1097 = 0.2e1 * t890;
t1095 = pkin(4) + pkin(5);
t1094 = pkin(3) * t936;
t1092 = pkin(4) * t938;
t799 = -t1142 * t940 - t937 * t901;
t701 = t799 * t937 + t800 * t940;
t1091 = pkin(7) * t701;
t1089 = t679 * t935;
t1088 = t679 * t938;
t1084 = t765 * t938;
t786 = -qJDD(2) * pkin(2) - t941 * pkin(8) + t799;
t1075 = t786 * t936;
t1074 = t786 * t939;
t915 = t936 * t941 * t939;
t902 = -t915 + qJDD(3);
t1059 = t902 * t936;
t1058 = t902 * t939;
t903 = qJDD(3) + t915;
t1057 = t903 * t936;
t925 = t936 ^ 2;
t1053 = t925 * t941;
t1049 = t937 * t861;
t1048 = t940 * t861;
t722 = t939 * t787 - t936 * t861;
t680 = -pkin(3) * t1096 + qJDD(3) * pkin(9) + t1041 * t891 + t722;
t1010 = -t894 + t919;
t1011 = t893 + t1027;
t699 = pkin(3) * t1010 - pkin(9) * t1011 + t786;
t602 = t938 * t680 + t935 * t699;
t926 = t939 ^ 2;
t1043 = t925 + t926;
t1035 = qJDD(2) * t930;
t1033 = qJDD(2) * t937;
t1031 = qJDD(2) * t940;
t1026 = qJ(5) * t935 + pkin(3);
t823 = pkin(4) * t888 - qJ(5) * t890;
t1025 = -pkin(5) * t888 - t823;
t601 = t935 * t680 - t938 * t699;
t721 = t936 * t787 + t847;
t621 = t721 * t936 + t939 * t722;
t1020 = t937 * t915;
t1019 = t940 * t915;
t620 = t721 * t939 - t722 * t936;
t896 = t1043 * qJDD(2);
t923 = t926 * t941;
t899 = t923 + t1053;
t828 = t896 * t940 - t899 * t937;
t1014 = pkin(7) * t828 + t620 * t937;
t897 = -t937 * t941 + t1031;
t1013 = -pkin(7) * t897 - t1049;
t974 = t940 * t941 + t1033;
t1012 = -pkin(7) * t974 + t1048;
t1009 = pkin(4) * t1098 + t885 * qJ(5) + t888 * t823 - t602;
t967 = t885 * pkin(4) - qJ(5) * t1098 + qJDD(5) + t601;
t944 = t885 * pkin(5) + t1196 + t967;
t537 = (-0.2e1 * qJD(6) - t1025) * t890 + t944;
t904 = -0.2e1 * t1040;
t948 = pkin(5) * t1099 + t916 * t848 + t1009;
t943 = -t810 * qJ(6) + t948;
t546 = t904 - t943 + 0.2e1 * t1039;
t474 = t537 * t935 + t546 * t938;
t583 = (-pkin(4) * t916 - 0.2e1 * qJD(5)) * t890 + t1143;
t555 = qJ(6) * t1099 - t1111 + t583;
t451 = t474 * t939 + t555 * t936;
t473 = -t537 * t938 + t546 * t935;
t1008 = t451 * t937 - t473 * t940;
t575 = t904 - t1009;
t946 = t890 * t823 + t967;
t503 = t575 * t938 + t935 * t946;
t472 = t503 * t939 + t583 * t936;
t502 = t575 * t935 - t938 * t946;
t1007 = t472 * t937 - t502 * t940;
t534 = t601 * t935 + t602 * t938;
t507 = t534 * t939 + t679 * t936;
t533 = -t601 * t938 + t602 * t935;
t1006 = t507 * t937 - t533 * t940;
t1002 = t621 * t937 - t786 * t940;
t665 = t1084 + t1079;
t625 = t665 * t939 - t1063;
t659 = -t765 * t935 + t1193;
t1001 = t625 * t937 + t659 * t940;
t633 = t766 * t936 + t1183;
t996 = t633 * t937 - t1181;
t773 = t1038 * t888 + t972;
t637 = -t773 * t936 - t1255;
t995 = t637 * t937 + t1225;
t777 = t810 + t863;
t649 = -t777 * t936 + t1227;
t989 = t649 * t937 + t1223;
t784 = (t888 * t938 - t890 * t935) * t916;
t747 = t784 * t939 - t1060;
t781 = (-t888 * t935 - t890 * t938) * t916;
t981 = t747 * t937 + t781 * t940;
t700 = t799 * t940 - t800 * t937;
t892 = 0.2e1 * t1027 + t1034;
t895 = -0.2e1 * t919 + t1032;
t822 = -t892 * t936 + t895 * t939;
t900 = t923 - t1053;
t979 = t822 * t937 + t900 * t940;
t912 = -t923 - t1096;
t843 = t912 * t939 - t1057;
t978 = t843 * t937 + t895 * t940;
t910 = -t1053 - t1096;
t845 = -t910 * t936 - t1058;
t977 = t845 * t937 - t892 * t940;
t869 = t974 * t932;
t976 = t869 * t931 + t897 * t929;
t813 = t869 * t929 - t897 * t931;
t975 = t896 * t937 + t899 * t940;
t886 = t1043 * t1036;
t973 = -qJDD(3) * t940 + t886 * t937;
t911 = t923 - t1096;
t842 = t911 * t939 - t1059;
t969 = -t1031 * t939 + t842 * t937;
t887 = t939 * t903;
t909 = -t1053 + t1096;
t844 = -t909 * t936 + t887;
t968 = -t1031 * t936 + t844 * t937;
t851 = -t1036 * t926 - t894 * t936;
t966 = t851 * t937 - t1019;
t852 = -t1036 * t925 + t893 * t939;
t965 = t852 * t937 + t1019;
t455 = -qJ(6) * t546 - t1095 * t555;
t477 = -qJ(5) * t555 - qJ(6) * t537;
t418 = -pkin(9) * t473 - t455 * t935 + t477 * t938;
t428 = -pkin(3) * t473 - qJ(5) * t546 + t1095 * t537;
t450 = t474 * t936 - t555 * t939;
t395 = -pkin(8) * t450 + t418 * t939 - t428 * t936;
t403 = -pkin(2) * t450 + pkin(3) * t555 - pkin(9) * t474 - t455 * t938 - t477 * t935;
t429 = t451 * t940 + t473 * t937;
t964 = pkin(7) * t429 + t395 * t937 + t403 * t940;
t452 = -pkin(3) * t502 + pkin(4) * t946 - qJ(5) * t575;
t456 = -pkin(9) * t502 + (pkin(4) * t935 - qJ(5) * t938) * t583;
t471 = t503 * t936 - t583 * t939;
t416 = -pkin(8) * t471 - t452 * t936 + t456 * t939;
t427 = -pkin(2) * t471 - pkin(9) * t503 + (t1026 + t1092) * t583;
t442 = t472 * t940 + t502 * t937;
t963 = pkin(7) * t442 + t416 * t937 + t427 * t940;
t505 = -t1095 * t1116 + (-t767 - t810) * qJ(6) + t948 + t1125;
t508 = qJD(6) * t1097 + t1025 * t890 - t1196 - t1198 - t944;
t447 = -t505 * t935 + t508 * t938 + t1165;
t558 = t1095 * t1118 - t1245;
t434 = t447 * t939 - t558 * t936 - t1205;
t441 = -t505 * t938 - t508 * t935 - t1172;
t962 = t434 * t937 + t441 * t940 + t1235;
t942 = qJD(5) * t1097 - t1143;
t563 = (-t765 + t863) * pkin(4) + t942;
t509 = (-t1114 - t1099) * qJ(6) + (-t765 - t810) * pkin(5) + t563 + t1115;
t677 = -qJ(5) * t765 - qJ(6) * t1126;
t480 = -t509 * t935 + t677 * t938 - t1202;
t500 = t1095 * t1126 + t1248 + t537;
t437 = t480 * t939 - t500 * t936 - t1282;
t462 = pkin(3) * t765 - t509 * t938 - t677 * t935 + t1271;
t961 = t437 * t937 + t462 * t940 + t1297;
t562 = pkin(4) * t863 + t1197 + t942;
t525 = t562 + (t1117 - t1099) * qJ(6) + t1111;
t618 = qJ(6) * t1127 + t1095 * t1119;
t481 = t525 * t938 - t618 * t935 - t1234;
t501 = -t1095 * t1117 + t1125 + t1219 + t943;
t440 = t481 * t939 - t501 * t936 - t1259;
t463 = -pkin(3) * t1119 - t525 * t935 - t618 * t938 + t1246;
t960 = t440 * t937 + t463 * t940 + t1283;
t506 = t534 * t936 - t679 * t939;
t443 = -pkin(8) * t506 + (-pkin(9) * t939 + t1094) * t533;
t458 = -pkin(2) * t506 + pkin(3) * t679 - pkin(9) * t534;
t461 = t507 * t940 + t533 * t937;
t959 = pkin(7) * t461 + t443 * t937 + t458 * t940;
t556 = pkin(4) * t1116 + t575;
t557 = t946 + t1198;
t475 = -t556 * t935 + t557 * t938 - t1165;
t578 = -pkin(4) * t1118 + t1245;
t445 = t475 * t939 - t578 * t936 + t1205;
t459 = -t556 * t938 - t557 * t935 + t1172;
t958 = t445 * t937 + t459 * t940 - t1235;
t519 = -pkin(4) * t1079 + t562 * t938 - t1234;
t521 = -pkin(4) * t1117 + t1009 + t1219 + t905;
t454 = t519 * t939 - t521 * t936 - t1259;
t482 = -t935 * t562 + (-pkin(3) - t1092) * t1119 + t1246;
t957 = t454 * t937 + t482 * t940 + t1283;
t520 = -qJ(5) * t1084 - t563 * t935 - t1202;
t526 = pkin(4) * t1126 + t1248 + t946;
t457 = t520 * t939 - t526 * t936 - t1282;
t489 = t1026 * t765 - t938 * t563 + t1271;
t956 = t457 * t937 + t489 * t940 + t1297;
t504 = -t533 - t1165;
t464 = t1094 * t1105 + t504 * t939 + t1205;
t476 = t1172 - t534;
t955 = t464 * t937 + t476 * t940 - t1235;
t567 = t601 - t1206;
t603 = t1089 - t1202;
t630 = -t766 * t939 + t1184;
t490 = -pkin(8) * t630 - t567 * t936 + t603 * t939;
t535 = -pkin(2) * t630 + pkin(3) * t766 + t1088 - t1203;
t582 = t633 * t940 + t1182;
t954 = pkin(7) * t582 + t490 * t937 + t535 * t940;
t574 = t602 + t1260;
t605 = t1088 + t1234;
t634 = t773 * t939 - t1256;
t497 = -pkin(8) * t634 - t574 * t936 + t605 * t939;
t536 = -pkin(2) * t634 - pkin(3) * t773 - t1089 + t1233;
t584 = t637 * t940 - t1226;
t953 = pkin(7) * t584 + t497 * t937 + t536 * t940;
t839 = t912 * t936 + t887;
t675 = -pkin(2) * t839 + t721;
t713 = -pkin(8) * t839 + t1075;
t788 = t843 * t940 - t895 * t937;
t952 = pkin(7) * t788 + t675 * t940 + t713 * t937;
t841 = t910 * t939 - t1059;
t676 = -pkin(2) * t841 + t722;
t714 = -pkin(8) * t841 + t1074;
t789 = t845 * t940 + t892 * t937;
t951 = pkin(7) * t789 + t676 * t940 + t714 * t937;
t590 = t621 * t940 + t786 * t937;
t947 = pkin(7) * t590 - (-pkin(2) * t940 - pkin(8) * t937) * t620;
t870 = t897 * t932;
t868 = t897 * t930;
t867 = t974 * t930;
t853 = qJDD(3) * t937 + t886 * t940;
t840 = t909 * t939 + t1057;
t838 = t911 * t936 + t1058;
t837 = t1011 * t936;
t836 = t1010 * t939;
t829 = t973 * t932;
t821 = t892 * t939 + t895 * t936;
t819 = t975 * t932;
t818 = t975 * t930;
t814 = -t870 * t929 - t931 * t974;
t812 = t870 * t931 - t929 * t974;
t809 = t852 * t940 - t1020;
t808 = t851 * t940 + t1020;
t807 = t1033 * t936 + t844 * t940;
t806 = t1032 * t937 + t842 * t940;
t779 = t822 * t940 - t900 * t937;
t750 = -t1048 + (t867 * t930 + t869 * t932) * pkin(7);
t749 = -t1049 + (-t868 * t930 - t870 * t932) * pkin(7);
t744 = t784 * t936 + t866;
t728 = -t819 * t929 + t828 * t931;
t727 = t819 * t931 + t828 * t929;
t726 = -t930 * t837 + t932 * t965;
t725 = t930 * t836 + t932 * t966;
t724 = -t930 * t840 + t932 * t968;
t723 = -t930 * t838 + t932 * t969;
t711 = -t930 * t841 + t932 * t977;
t710 = -t930 * t839 + t932 * t978;
t709 = t932 * t841 + t930 * t977;
t708 = t932 * t839 + t930 * t978;
t698 = -t930 * t821 + t932 * t979;
t697 = pkin(2) * t895 + pkin(8) * t843 - t1074;
t696 = -pkin(2) * t892 + pkin(8) * t845 + t1075;
t693 = t701 * t932;
t674 = -pkin(1) * t868 + t1012 * t932 + t930 * t799;
t673 = pkin(1) * t867 + t1013 * t932 + t930 * t800;
t672 = -t700 * t932 + t930 * t861;
t671 = -t700 * t930 - t932 * t861;
t657 = t747 * t940 - t781 * t937;
t655 = -t711 * t929 + t789 * t931;
t654 = -t710 * t929 + t788 * t931;
t653 = t711 * t931 + t789 * t929;
t652 = t710 * t931 + t788 * t929;
t643 = t777 * t939 + t1228;
t622 = t665 * t936 + t820;
t604 = pkin(2) * t899 + pkin(8) * t896 + t621;
t599 = -t930 * t744 + t932 * t981;
t597 = -pkin(2) * t786 + pkin(8) * t621;
t594 = t649 * t940 - t1224;
t589 = -pkin(1) * t671 + t1091 * t932;
t588 = -t672 * t929 + t701 * t931;
t587 = t672 * t931 + t701 * t929;
t579 = t940 * t620 + (-t818 * t930 - t819 * t932) * pkin(7);
t577 = (-t671 * t930 - t672 * t932) * pkin(7);
t564 = t625 * t940 - t659 * t937;
t554 = -t937 * t676 + t940 * t714 + (-t709 * t930 - t711 * t932) * pkin(7);
t553 = -t937 * t675 + t940 * t713 + (-t708 * t930 - t710 * t932) * pkin(7);
t550 = -t930 * t643 + t932 * t989;
t543 = -t930 * t634 + t932 * t995;
t540 = t932 * t634 + t930 * t995;
t539 = t1002 * t932 + t620 * t930;
t538 = t1002 * t930 - t620 * t932;
t532 = -t930 * t630 + t932 * t996;
t529 = t932 * t630 + t930 * t996;
t524 = -pkin(1) * t709 - t930 * t696 + t932 * t951;
t523 = -pkin(1) * t708 - t930 * t697 + t932 * t952;
t522 = -pkin(1) * t818 + t1014 * t932 - t930 * t604;
t516 = t1001 * t932 - t930 * t622;
t499 = -t539 * t929 + t590 * t931;
t498 = t539 * t931 + t590 * t929;
t494 = -t543 * t929 + t584 * t931;
t491 = t543 * t931 + t584 * t929;
t488 = -t532 * t929 + t582 * t931;
t485 = t532 * t931 + t582 * t929;
t479 = pkin(8) * t637 + t574 * t939 + t605 * t936 + t1236;
t478 = pkin(8) * t633 + t567 * t939 + t603 * t936 - t1208;
t460 = -t1204 + t936 * t504 + (-pkin(2) - t1093) * t1105;
t453 = t520 * t936 + t526 * t939 + t1270;
t449 = -(pkin(2) * t937 - pkin(8) * t940) * t620 + (-t538 * t930 - t539 * t932) * pkin(7);
t448 = t519 * t936 + t521 * t939 + t1244;
t446 = -pkin(1) * t538 - t930 * t597 + t932 * t947;
t444 = t475 * t936 + t578 * t939 - t1303;
t439 = t1006 * t932 - t930 * t506;
t438 = t1006 * t930 + t932 * t506;
t436 = t481 * t936 + t501 * t939 + t1244;
t435 = t480 * t936 + t500 * t939 + t1270;
t433 = pkin(8) * t507 + (-pkin(2) + t1018) * t533;
t432 = t447 * t936 + t558 * t939 + t1303;
t431 = t940 * t497 - t937 * t536 + (-t540 * t930 - t543 * t932) * pkin(7);
t430 = t940 * t490 - t937 * t535 + (-t529 * t930 - t532 * t932) * pkin(7);
t426 = t1007 * t932 - t930 * t471;
t425 = t1007 * t930 + t932 * t471;
t424 = -pkin(1) * t540 - t930 * t479 + t932 * t953;
t423 = -t439 * t929 + t461 * t931;
t422 = t439 * t931 + t461 * t929;
t421 = -pkin(1) * t529 - t930 * t478 + t932 * t954;
t420 = t940 * t457 - t937 * t489 + t1300;
t419 = t940 * t454 - t937 * t482 + t1284;
t417 = t940 * t464 - t937 * t476 + t1237;
t415 = t1008 * t932 - t930 * t450;
t414 = t1008 * t930 + t932 * t450;
t413 = t940 * t440 - t937 * t463 + t1284;
t412 = t940 * t437 - t937 * t462 + t1300;
t411 = t940 * t445 - t937 * t459 + t1237;
t410 = -t930 * t460 + t932 * t955 + t1262;
t409 = -t930 * t453 + t932 * t956 - t1308;
t408 = -pkin(2) * t502 + pkin(8) * t472 + t452 * t939 + t456 * t936;
t407 = -t930 * t448 + t932 * t957 - t1298;
t406 = -t426 * t929 + t442 * t931;
t405 = t426 * t931 + t442 * t929;
t404 = t940 * t434 - t937 * t441 - t1237;
t402 = -t930 * t444 + t932 * t958 + t1262;
t401 = -t930 * t436 + t932 * t960 - t1298;
t400 = -t930 * t435 + t932 * t961 - t1308;
t399 = -t415 * t929 + t429 * t931;
t398 = t415 * t931 + t429 * t929;
t397 = t940 * t443 - t937 * t458 + (-t438 * t930 - t439 * t932) * pkin(7);
t396 = -t930 * t432 + t932 * t962 - t1262;
t394 = -pkin(2) * t473 + pkin(8) * t451 + t418 * t936 + t428 * t939;
t393 = -pkin(1) * t438 - t930 * t433 + t932 * t959;
t392 = t940 * t416 - t937 * t427 + (-t425 * t930 - t426 * t932) * pkin(7);
t391 = -pkin(1) * t425 - t930 * t408 + t932 * t963;
t390 = t940 * t395 - t937 * t403 + (-t414 * t930 - t415 * t932) * pkin(7);
t389 = -pkin(1) * t414 - t930 * t394 + t932 * t964;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, 0, 0, 0, 0, 0, 0, t814, t813, 0, t588, 0, 0, 0, 0, 0, 0, t654, t655, t728, t499, 0, 0, 0, 0, 0, 0, t488, t494, t1243, t423, 0, 0, 0, 0, 0, 0, t1302, t1243, t1288, t406, 0, 0, 0, 0, 0, 0, t1302, t1288, -t1243, t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, 0, 0, 0, 0, 0, 0, t812, -t976, 0, t587, 0, 0, 0, 0, 0, 0, t652, t653, t727, t498, 0, 0, 0, 0, 0, 0, t485, t491, -t465, t422, 0, 0, 0, 0, 0, 0, t1301, -t465, t1287, t405, 0, 0, 0, 0, 0, 0, t1301, t1287, t465, t398; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1047, 0, 0, 0, 0, 0, 0, t868, -t867, 0, t671, 0, 0, 0, 0, 0, 0, t708, t709, t818, t538, 0, 0, 0, 0, 0, 0, t529, t540, -t510, t438, 0, 0, 0, 0, 0, 0, t1286, -t510, t1267, t425, 0, 0, 0, 0, 0, 0, t1286, t1267, t510, t414; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1121, -t1120, -t830, -qJ(1) * t830, 0, 0, -t813, 0, t814, t929 * t1035, -qJ(1) * t812 - t674 * t929 + t749 * t931, qJ(1) * t976 - t673 * t929 + t750 * t931, -t693 * t929 + t700 * t931, -qJ(1) * t587 + t577 * t931 - t589 * t929, -t726 * t929 + t809 * t931, -t698 * t929 + t779 * t931, -t724 * t929 + t807 * t931, -t725 * t929 + t808 * t931, -t723 * t929 + t806 * t931, -t829 * t929 + t853 * t931, -qJ(1) * t652 - t523 * t929 + t553 * t931, -qJ(1) * t653 - t524 * t929 + t554 * t931, -qJ(1) * t727 - t522 * t929 + t579 * t931, -qJ(1) * t498 - t446 * t929 + t449 * t931, t1133, -t1324, t1290, t1212, t1330, t1214, -qJ(1) * t485 - t421 * t929 + t430 * t931, -qJ(1) * t491 - t424 * t929 + t431 * t931, -t410 * t929 + t417 * t931 + t1279, -qJ(1) * t422 - t393 * t929 + t397 * t931, t1133, t1290, t1324, t1214, -t1330, t1212, -t409 * t929 + t420 * t931 - t1312, -t402 * t929 + t411 * t931 + t1279, -t407 * t929 + t419 * t931 - t1305, -qJ(1) * t405 - t391 * t929 + t392 * t931, t1133, -t516 * t929 + t564 * t931, -t1290, t1212, -t550 * t929 + t594 * t931, -t599 * t929 + t657 * t931, -t400 * t929 + t412 * t931 - t1312, -t401 * t929 + t413 * t931 - t1305, -t396 * t929 + t404 * t931 - t1279, -qJ(1) * t398 - t389 * t929 + t390 * t931; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1120, -t1121, t831, qJ(1) * t831, 0, 0, t976, 0, t812, -t931 * t1035, qJ(1) * t814 + t674 * t931 + t749 * t929, qJ(1) * t813 + t673 * t931 + t750 * t929, t693 * t931 + t700 * t929, qJ(1) * t588 + t577 * t929 + t589 * t931, t726 * t931 + t809 * t929, t698 * t931 + t779 * t929, t724 * t931 + t807 * t929, t725 * t931 + t808 * t929, t723 * t931 + t806 * t929, t829 * t931 + t853 * t929, qJ(1) * t654 + t523 * t931 + t553 * t929, qJ(1) * t655 + t524 * t931 + t554 * t929, qJ(1) * t728 + t522 * t931 + t579 * t929, qJ(1) * t499 + t446 * t931 + t449 * t929, t1134, t1323, -t1328, t1211, -t1329, t1213, qJ(1) * t488 + t421 * t931 + t430 * t929, qJ(1) * t494 + t424 * t931 + t431 * t929, t410 * t931 + t417 * t929 + t1278, qJ(1) * t423 + t393 * t931 + t397 * t929, t1134, -t1328, -t1323, t1213, t1329, t1211, t409 * t931 + t420 * t929 + t1311, t402 * t931 + t411 * t929 + t1278, t407 * t931 + t419 * t929 + t1304, qJ(1) * t406 + t391 * t931 + t392 * t929, t1134, t516 * t931 + t564 * t929, t1328, t1211, t550 * t931 + t594 * t929, t599 * t931 + t657 * t929, t400 * t931 + t412 * t929 + t1311, t401 * t931 + t413 * t929 + t1304, t396 * t931 + t404 * t929 - t1278, qJ(1) * t399 + t389 * t931 + t390 * t929; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1024, t901, 0, 0, 0, 0, t867, 0, t868, t932 * qJDD(2), pkin(1) * t870 + t1012 * t930 - t932 * t799, -pkin(1) * t869 + t1013 * t930 - t932 * t800, t701 * t930, pkin(1) * t672 + t1091 * t930, t932 * t837 + t930 * t965, t932 * t821 + t930 * t979, t932 * t840 + t930 * t968, -t932 * t836 + t930 * t966, t932 * t838 + t930 * t969, t973 * t930, pkin(1) * t710 + t932 * t697 + t930 * t952, pkin(1) * t711 + t932 * t696 + t930 * t951, pkin(1) * t819 + t1014 * t930 + t932 * t604, pkin(1) * t539 + t932 * t597 + t930 * t947, t1100, t1310, -t1319, t1169, -t1325, t1167, pkin(1) * t532 + t932 * t478 + t930 * t954, pkin(1) * t543 + t932 * t479 + t930 * t953, t932 * t460 + t930 * t955 - t1263, pkin(1) * t439 + t932 * t433 + t930 * t959, t1100, -t1319, -t1310, t1167, t1325, t1169, t932 * t453 + t930 * t956 + t1309, t932 * t444 + t930 * t958 - t1263, t932 * t448 + t930 * t957 + t1299, pkin(1) * t426 + t932 * t408 + t930 * t963, t1100, t1001 * t930 + t932 * t622, t1319, t1169, t932 * t643 + t930 * t989, t932 * t744 + t930 * t981, t932 * t435 + t930 * t961 + t1309, t932 * t436 + t930 * t960 + t1299, t932 * t432 + t930 * t962 + t1263, pkin(1) * t415 + t932 * t394 + t930 * t964;];
tauB_reg  = t1;
