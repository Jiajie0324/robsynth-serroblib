% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PPRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PPRRRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:54:31
% EndTime: 2019-03-08 18:54:40
% DurationCPUTime: 5.52s
% Computational Cost: add. (6835->535), mult. (17565->722), div. (0->0), fcn. (16079->14), ass. (0->261)
t320 = cos(pkin(6));
t178 = qJD(1) * t320 + qJD(2);
t192 = sin(pkin(12));
t194 = sin(pkin(6));
t199 = sin(qJ(3));
t195 = cos(pkin(12));
t319 = cos(pkin(7));
t258 = t195 * t319;
t249 = t199 * t258;
t342 = cos(qJ(3));
t214 = (t192 * t342 + t249) * t194;
t193 = sin(pkin(7));
t298 = t193 * t199;
t103 = qJD(1) * t214 + t178 * t298;
t198 = sin(qJ(4));
t201 = cos(qJ(4));
t247 = pkin(4) * t198 - pkin(10) * t201;
t164 = t247 * qJD(4);
t361 = -t103 + t164;
t281 = qJD(5) * t198;
t360 = qJD(3) * t281 - qJDD(4);
t318 = cos(pkin(11));
t246 = t320 * t318;
t317 = sin(pkin(11));
t212 = t192 * t317 - t195 * t246;
t260 = t194 * t318;
t204 = t193 * t212 - t260 * t319;
t134 = t192 * t246 + t195 * t317;
t355 = t193 * t260 + t212 * t319;
t88 = t134 * t342 - t355 * t199;
t45 = t198 * t88 - t201 * t204;
t245 = t320 * t317;
t213 = t192 * t318 + t195 * t245;
t259 = t194 * t317;
t205 = t193 * t213 + t259 * t319;
t135 = -t192 * t245 + t195 * t318;
t354 = -t193 * t259 + t213 * t319;
t90 = t135 * t342 - t354 * t199;
t47 = t198 * t90 - t201 * t205;
t261 = t193 * t320;
t113 = t199 * t261 + t214;
t273 = t194 * t195 * t193;
t220 = t319 * t320 - t273;
t92 = t113 * t198 - t201 * t220;
t231 = g(1) * t47 + g(2) * t45 + g(3) * t92;
t197 = sin(qJ(5));
t200 = cos(qJ(5));
t276 = t198 * qJDD(3);
t286 = qJD(3) * t201;
t105 = (qJD(4) * (qJD(5) + t286) + t276) * t197 + t360 * t200;
t300 = t192 * t194;
t269 = qJD(1) * t300;
t168 = t199 * t269;
t239 = t342 * t258;
t229 = t194 * t239;
t222 = qJD(1) * t229;
t270 = t193 * t342;
t209 = -t178 * t270 + t168 - t222;
t284 = qJD(4) * t198;
t296 = t197 * t201;
t337 = pkin(9) * t197;
t359 = t361 * t200 - t209 * t296 + t284 * t337;
t353 = -pkin(4) * t201 - pkin(10) * t198;
t169 = -pkin(3) + t353;
t280 = qJD(5) * t200;
t293 = t200 * t201;
t358 = t169 * t280 + t361 * t197 + t209 * t293;
t277 = qJD(3) * qJD(4);
t265 = t201 * t277;
t279 = t200 * qJD(4);
t104 = -qJD(5) * t279 + (-t265 - t276) * t200 + t360 * t197;
t288 = qJD(3) * t198;
t155 = t197 * t288 - t279;
t179 = -qJD(5) + t286;
t306 = t155 * t179;
t357 = -t104 + t306;
t285 = qJD(4) * t197;
t157 = t200 * t288 + t285;
t303 = t157 * t179;
t356 = t105 - t303;
t180 = pkin(9) * t293;
t130 = t197 * t169 + t180;
t352 = pkin(5) * t105 + qJDD(6);
t46 = t198 * t204 + t88 * t201;
t48 = t198 * t205 + t90 * t201;
t240 = t342 * t261;
t299 = t192 * t199;
t112 = t194 * t299 - t229 - t240;
t93 = t113 * t201 + t198 * t220;
t49 = t112 * t200 - t197 * t93;
t87 = t134 * t199 + t355 * t342;
t89 = t135 * t199 + t354 * t342;
t351 = -g(3) * t49 - g(2) * (-t197 * t46 + t200 * t87) - g(1) * (-t197 * t48 + t200 * t89);
t349 = t157 ^ 2;
t339 = pkin(5) * t155;
t338 = pkin(5) * t197;
t187 = t201 * qJDD(3);
t152 = t198 * t277 + qJDD(5) - t187;
t335 = t152 * pkin(5);
t334 = qJ(6) + pkin(10);
t100 = qJD(3) * pkin(9) + t103;
t128 = -qJD(1) * t273 + t178 * t319;
t295 = t198 * t128;
t78 = t100 * t201 + t295;
t73 = qJD(4) * pkin(10) + t78;
t94 = qJD(3) * t169 + t209;
t28 = -t197 * t73 + t200 * t94;
t26 = -qJ(6) * t157 + t28;
t24 = -pkin(5) * t179 + t26;
t333 = -t26 + t24;
t238 = pkin(5) * t198 - qJ(6) * t293;
t278 = t200 * qJD(6);
t332 = -t198 * t278 + t238 * qJD(4) + (-t180 + (qJ(6) * t198 - t169) * t197) * qJD(5) + t359;
t294 = t198 * t200;
t331 = (-pkin(9) * qJD(4) - qJ(6) * qJD(5)) * t294 + (-qJD(6) * t198 + (-pkin(9) * qJD(5) - qJ(6) * qJD(4)) * t201) * t197 + t358;
t282 = qJD(5) * t197;
t330 = (-t198 * t279 - t201 * t282) * pkin(9) + t358;
t329 = -t130 * qJD(5) + t359;
t328 = qJD(3) * pkin(3);
t175 = t320 * qJDD(1) + qJDD(2);
t126 = -qJDD(1) * t273 + t175 * t319;
t283 = qJD(4) * t201;
t315 = qJDD(3) * pkin(9);
t241 = t194 * t249;
t266 = qJD(3) * t342;
t254 = t193 * t266;
t263 = qJDD(1) * t300;
t243 = -qJD(3) * t222 - qJDD(1) * t241 - t175 * t298 - t178 * t254 - t342 * t263;
t253 = qJD(3) * t269;
t62 = -t199 * t253 - t243;
t58 = t62 + t315;
t256 = t100 * t283 - t201 * t126 + t128 * t284 + t198 * t58;
t314 = qJDD(4) * pkin(4);
t16 = t256 - t314;
t11 = t16 + t352;
t327 = t11 * t197;
t326 = t16 * t197;
t325 = t179 * t28;
t29 = t197 * t94 + t200 * t73;
t27 = -qJ(6) * t155 + t29;
t324 = t27 * t179;
t323 = t29 * t179;
t262 = qJD(5) * t334;
t163 = t247 * qJD(3);
t98 = t198 * t100;
t77 = t128 * t201 - t98;
t52 = t197 * t163 + t200 * t77;
t322 = t278 - t52 + (qJ(6) * t286 - t262) * t197;
t51 = t200 * t163 - t197 * t77;
t321 = -qJD(3) * t238 - t197 * qJD(6) - t200 * t262 - t51;
t316 = qJDD(3) * pkin(3);
t313 = t209 * t155;
t312 = t209 * t157;
t311 = t209 * t198;
t310 = t104 * qJ(6);
t309 = t104 * t197;
t308 = t105 * qJ(6);
t307 = t105 * t200;
t305 = t155 * t197;
t304 = t157 * t155;
t302 = t157 * t197;
t301 = t157 * t200;
t297 = t197 * t198;
t190 = t198 ^ 2;
t191 = t201 ^ 2;
t290 = t190 - t191;
t287 = qJD(3) * t199;
t275 = t231 * t197;
t274 = -t198 * t126 - t128 * t283 - t201 * t58;
t203 = qJD(3) ^ 2;
t272 = t198 * t203 * t201;
t271 = pkin(9) + t338;
t268 = t193 * t287;
t267 = t179 * t288;
t17 = -t100 * t284 - t274;
t15 = qJDD(4) * pkin(10) + t17;
t236 = qJD(3) * qJD(1) * t241 - qJDD(1) * t229 - t175 * t270 + t178 * t268 + t199 * t263 + t342 * t253;
t36 = qJD(3) * t164 + qJDD(3) * t169 + t236;
t6 = t200 * t15 + t197 * t36 + t94 * t280 - t73 * t282;
t257 = -qJD(6) - t339;
t252 = t198 * t265;
t251 = qJD(4) * t266;
t244 = -t197 * t29 - t200 * t28;
t50 = t112 * t197 + t200 * t93;
t183 = pkin(5) * t200 + pkin(4);
t242 = -t183 * t201 - t198 * t334;
t72 = -qJD(4) * pkin(4) - t77;
t235 = t197 * t152 - t179 * t280;
t234 = t200 * t152 + t179 * t282;
t233 = -g(1) * (t200 * t90 + t296 * t89) - g(2) * (t200 * t88 + t296 * t87) - g(3) * (t112 * t296 + t113 * t200);
t232 = -g(1) * (t197 * t90 - t293 * t89) - g(2) * (t197 * t88 - t293 * t87) - g(3) * (-t112 * t293 + t113 * t197);
t230 = g(1) * t48 + g(2) * t46 + g(3) * t93;
t228 = qJDD(3) * t342 - t199 * t203;
t227 = g(1) * t89 + g(2) * t87 + g(3) * t112;
t226 = g(1) * t90 + g(2) * t88 + g(3) * t113;
t137 = t198 * t319 + t201 * t298;
t116 = -t197 * t137 - t200 * t270;
t225 = -t200 * t137 + t197 * t270;
t224 = -t16 + t231;
t223 = t197 * t283 + t198 * t280;
t136 = t198 * t298 - t201 * t319;
t221 = -pkin(10) * t152 - t179 * t72;
t99 = t209 - t328;
t219 = -pkin(9) * qJDD(4) + (-t209 + t99 - t328) * qJD(4);
t218 = qJD(3) * t103 + t227;
t217 = -g(1) * t259 + g(2) * t260 - g(3) * t320;
t216 = -g(1) * (-t197 * t89 - t200 * t48) - g(2) * (-t197 * t87 - t200 * t46) + g(3) * t50 - t6;
t215 = t231 - t256;
t7 = -qJD(5) * t29 - t197 * t15 + t200 * t36;
t202 = qJD(4) ^ 2;
t59 = t236 - t316;
t208 = -pkin(9) * t202 + t218 + t316 - t59;
t207 = t7 + t351;
t206 = t17 * t201 + t256 * t198 + (-t198 * t78 - t201 * t77) * qJD(4) - t226;
t171 = t334 * t200;
t170 = t334 * t197;
t165 = t271 * t198;
t154 = t200 * t169;
t151 = t155 ^ 2;
t129 = -pkin(9) * t296 + t154;
t127 = pkin(5) * t223 + pkin(9) * t283;
t119 = -qJ(6) * t297 + t130;
t118 = -t152 * t201 - t179 * t284;
t115 = qJD(4) * t137 + t198 * t254;
t114 = -qJD(4) * t136 + t201 * t254;
t111 = -qJ(6) * t294 + t154 + (-pkin(5) - t337) * t201;
t110 = t112 * pkin(3);
t107 = t113 * qJD(3);
t106 = (t240 + (t239 - t299) * t194) * qJD(3);
t101 = -t151 + t349;
t86 = -t105 - t303;
t85 = -t104 - t306;
t83 = t89 * pkin(3);
t82 = t87 * pkin(3);
t80 = (-t157 * t198 + t179 * t293) * qJD(3) + t235;
t79 = (t155 * t198 - t179 * t296) * qJD(3) + t234;
t71 = qJD(5) * t225 - t197 * t114 + t200 * t268;
t70 = qJD(5) * t116 + t200 * t114 + t197 * t268;
t67 = -t179 * t305 - t307;
t66 = -t179 * t301 - t309;
t64 = t295 + (qJD(3) * t338 + t100) * t201;
t61 = t105 * t297 + t155 * t223;
t60 = -t104 * t294 + (-t197 * t281 + t201 * t279) * t157;
t53 = -t257 + t72;
t44 = -qJD(4) * t92 + t106 * t201;
t43 = qJD(4) * t93 + t106 * t198;
t38 = (t179 * t285 + t105) * t201 + (-qJD(4) * t155 - t235) * t198;
t37 = (-t179 * t279 + t104) * t201 + (qJD(4) * t157 + t234) * t198;
t25 = -t356 * t197 + t357 * t200;
t19 = (-t155 * t200 - t302) * t283 + (t309 - t307 + (-t301 + t305) * qJD(5)) * t198;
t13 = t105 * t136 + t115 * t155 + t116 * t152 - t179 * t71;
t12 = -t104 * t136 + t115 * t157 + t152 * t225 + t179 * t70;
t10 = qJD(5) * t49 + t107 * t197 + t44 * t200;
t9 = -qJD(5) * t50 + t107 * t200 - t44 * t197;
t8 = t104 * t116 + t105 * t225 - t155 * t70 - t157 * t71;
t5 = -qJD(6) * t155 - t308 + t6;
t4 = -t157 * qJD(6) + t310 + t335 + t7;
t3 = t10 * t179 - t104 * t92 - t152 * t50 + t157 * t43;
t2 = t105 * t92 + t152 * t49 + t155 * t43 - t179 * t9;
t1 = -t10 * t155 + t104 * t49 - t105 * t50 - t157 * t9;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1) - g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t175 * t320 - g(3) + (t192 ^ 2 + t195 ^ 2) * t194 ^ 2 * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t107 - qJDD(3) * t112, -qJD(3) * t106 - qJDD(3) * t113, 0, t103 * t106 + t107 * t209 + t112 * t236 + t62 * t113 + t126 * t220 - g(3), 0, 0, 0, 0, 0, 0, -t112 * t187 - t43 * qJD(4) - t92 * qJDD(4) + (-t107 * t201 + t112 * t284) * qJD(3), t112 * t276 - t44 * qJD(4) - t93 * qJDD(4) + (t107 * t198 + t112 * t283) * qJD(3) (t198 * t92 + t201 * t93) * qJDD(3) + (t198 * t43 + t201 * t44 + (-t198 * t93 + t201 * t92) * qJD(4)) * qJD(3), t107 * t99 + t112 * t59 + t17 * t93 + t256 * t92 - t43 * t77 + t44 * t78 - g(3), 0, 0, 0, 0, 0, 0, t2, t3, t1, t10 * t29 + t16 * t92 + t28 * t9 + t43 * t72 + t49 * t7 + t50 * t6 - g(3), 0, 0, 0, 0, 0, 0, t2, t3, t1, t10 * t27 + t11 * t92 + t24 * t9 + t4 * t49 + t43 * t53 + t5 * t50 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217 + t175, 0, 0, 0, 0, 0, 0, t228 * t193 (-qJDD(3) * t199 - t203 * t342) * t193, 0, t126 * t319 + (-t342 * t236 + t199 * t62 + (t103 * t342 + t199 * t209) * qJD(3)) * t193 + t217, 0, 0, 0, 0, 0, 0, -t115 * qJD(4) - t136 * qJDD(4) + (-t198 * t251 + t201 * t228) * t193, -t114 * qJD(4) - t137 * qJDD(4) + (-t198 * t228 - t201 * t251) * t193 (t136 * t198 + t137 * t201) * qJDD(3) + (t114 * t201 + t115 * t198 + (t136 * t201 - t137 * t198) * qJD(4)) * qJD(3), t78 * t114 - t77 * t115 + t256 * t136 + t17 * t137 + (t287 * t99 - t342 * t59) * t193 + t217, 0, 0, 0, 0, 0, 0, t13, t12, t8, t72 * t115 + t7 * t116 + t16 * t136 - t225 * t6 + t28 * t71 + t29 * t70 + t217, 0, 0, 0, 0, 0, 0, t13, t12, t8, t11 * t136 + t53 * t115 + t4 * t116 - t225 * t5 + t24 * t71 + t27 * t70 + t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t218 - t236 (-t209 + t168) * qJD(3) + t226 + t243, 0, 0, qJDD(3) * t190 + 0.2e1 * t252, 0.2e1 * t187 * t198 - 0.2e1 * t277 * t290, qJDD(4) * t198 + t201 * t202, qJDD(3) * t191 - 0.2e1 * t252, qJDD(4) * t201 - t198 * t202, 0, t198 * t219 + t201 * t208, -t198 * t208 + t201 * t219, t206 + (qJD(3) * t209 + t315) * (t190 + t191) -t59 * pkin(3) + g(1) * t83 + g(2) * t82 + g(3) * t110 - t99 * t103 - (t198 * t77 - t201 * t78) * t209 + t206 * pkin(9), t60, t19, t37, t61, t38, t118, t129 * t152 - t329 * t179 + (-t7 + (pkin(9) * t155 + t197 * t72) * qJD(4)) * t201 + (pkin(9) * t105 + qJD(4) * t28 + t280 * t72 + t313 + t326) * t198 + t232, -t130 * t152 + t330 * t179 + (t6 + (pkin(9) * t157 + t200 * t72) * qJD(4)) * t201 + (-pkin(9) * t104 - qJD(4) * t29 + t16 * t200 - t282 * t72 + t312) * t198 + t233, t129 * t104 - t130 * t105 - t329 * t157 - t330 * t155 + t244 * t283 + (-t197 * t6 - t200 * t7 + (t197 * t28 - t200 * t29) * qJD(5) + t227) * t198, t6 * t130 + t7 * t129 + t72 * t311 - g(1) * (t353 * t89 - t83) - g(2) * (t353 * t87 - t82) - g(3) * (t353 * t112 - t110) + t330 * t29 + t329 * t28 + (t16 * t198 + t283 * t72 - t226) * pkin(9), t60, t19, t37, t61, t38, t118, t165 * t105 + t111 * t152 + t127 * t155 + (t285 * t53 - t4) * t201 - t332 * t179 + (qJD(4) * t24 + t280 * t53 + t313 + t327) * t198 + t232, -t165 * t104 - t119 * t152 + t127 * t157 + (t279 * t53 + t5) * t201 + t331 * t179 + (-qJD(4) * t27 + t11 * t200 - t282 * t53 + t312) * t198 + t233, t111 * t104 - t119 * t105 - t332 * t157 - t331 * t155 + (-t197 * t27 - t200 * t24) * t283 + (-t197 * t5 - t200 * t4 + (t197 * t24 - t200 * t27) * qJD(5) + t227) * t198, t5 * t119 + t4 * t111 + t11 * t165 - g(1) * (t242 * t89 + t271 * t90 - t83) - g(2) * (t242 * t87 + t271 * t88 - t82) - g(3) * (t112 * t242 + t113 * t271 - t110) + (t127 + t311) * t53 + t331 * t27 + t332 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t290 * t203, t276, t272, t187, qJDD(4), qJD(4) * t78 - t288 * t99 + t215, -t99 * t286 + (t77 + t98) * qJD(4) + t230 + t274, 0, 0, t66, t25, t80, t67, t79, t267, -t28 * t288 - pkin(4) * t105 - t78 * t155 + t51 * t179 + t221 * t197 + (pkin(10) * qJD(5) * t179 + t224) * t200, t29 * t288 + pkin(4) * t104 - t78 * t157 + t326 + (-pkin(10) * t282 - t52) * t179 + t221 * t200 - t275, t52 * t155 + t51 * t157 + (t6 + t325 + (qJD(5) * t157 - t105) * pkin(10)) * t200 + (-t7 + t323 + (qJD(5) * t155 - t104) * pkin(10)) * t197 - t230, -t28 * t51 - t29 * t52 - t72 * t78 + t224 * pkin(4) + (qJD(5) * t244 - t7 * t197 + t6 * t200 - t230) * pkin(10), t66, t25, t80, t67, t79, t267, -t24 * t288 - t183 * t105 - t170 * t152 - t64 * t155 - t321 * t179 + (-t53 * t286 + (t53 + t339) * qJD(5)) * t197 + (-t11 + t231) * t200, t183 * t104 + t327 - t171 * t152 - t64 * t157 + t322 * t179 + (pkin(5) * t302 + t200 * t53) * qJD(5) + (t198 * t27 - t293 * t53) * qJD(3) - t275, -t170 * t104 - t171 * t105 - t321 * t157 - t322 * t155 + (t179 * t24 + t5) * t200 + (-t4 + t324) * t197 - t230, t5 * t171 - t4 * t170 - t11 * t183 - g(1) * (-t183 * t47 + t334 * t48) - g(2) * (-t183 * t45 + t334 * t46) - g(3) * (-t183 * t92 + t334 * t93) + (pkin(5) * t282 - t64) * t53 + t322 * t27 + t321 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, t101, t85, -t304, t86, t152, -t72 * t157 + t207 - t323, t155 * t72 + t216 - t325, 0, 0, t304, t101, t85, -t304, t86, t152, 0.2e1 * t335 + t310 - t324 + (t257 - t53) * t157 + t207, -t349 * pkin(5) + t308 - t26 * t179 + (qJD(6) + t53) * t155 + t216, t104 * pkin(5) - t155 * t333, t333 * t27 + (-t53 * t157 + t351 + t4) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t356, t357, -t151 - t349, t155 * t27 + t157 * t24 - t215 - t314 + t352;];
tau_reg  = t14;
