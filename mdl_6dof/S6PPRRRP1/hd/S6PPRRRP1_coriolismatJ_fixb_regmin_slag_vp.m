% Calculate minimal parameter regressor of coriolis matrix for
% S6PPRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x21]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PPRRRP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:54:27
% EndTime: 2019-03-08 18:54:39
% DurationCPUTime: 5.06s
% Computational Cost: add. (5727->393), mult. (15971->659), div. (0->0), fcn. (18459->12), ass. (0->305)
t319 = sin(qJ(4));
t322 = cos(qJ(4));
t377 = -t322 * pkin(4) - t319 * pkin(10);
t287 = -pkin(3) + t377;
t321 = cos(qJ(5));
t268 = t321 * t287;
t450 = t319 * t321;
t376 = -qJ(6) * t450 + t268;
t318 = sin(qJ(5));
t451 = t318 * t322;
t424 = pkin(9) * t451;
t223 = t376 - t424;
t492 = t223 / 0.2e1;
t211 = (-pkin(9) * t318 - pkin(5)) * t322 + t376;
t497 = -t211 / 0.2e1;
t398 = t492 + t497;
t320 = sin(qJ(3));
t469 = sin(pkin(6));
t396 = sin(pkin(12)) * t469;
t483 = cos(qJ(3));
t317 = sin(pkin(7));
t373 = cos(pkin(12)) * t469;
t470 = cos(pkin(7));
t471 = cos(pkin(6));
t502 = t471 * t317 + t470 * t373;
t214 = t320 * t396 - t483 * t502;
t466 = t214 * t318;
t328 = -t317 * t373 + t470 * t471;
t326 = t328 * t319;
t215 = t320 * t502 + t483 * t396;
t461 = t215 * t322;
t154 = t326 + t461;
t467 = t154 * t321;
t96 = t466 + t467;
t504 = t398 * t96;
t503 = -t211 + t223;
t312 = t318 ^ 2;
t314 = t321 ^ 2;
t299 = t314 + t312;
t501 = t299 * qJD(4);
t300 = t314 - t312;
t429 = t319 * qJD(3);
t413 = t321 * t429;
t500 = t300 * qJD(4) - 0.2e1 * t318 * t413;
t464 = t214 * t321;
t468 = t154 * t318;
t95 = -t464 + t468;
t499 = -t95 / 0.2e1;
t462 = t215 * t321;
t117 = t214 * t451 + t462;
t498 = t117 / 0.2e1;
t478 = t322 * pkin(10);
t481 = t319 * pkin(4);
t291 = -t478 + t481;
t278 = t321 * t291;
t453 = t318 * t319;
t306 = pkin(9) * t453;
t446 = t321 * t322;
t216 = t319 * pkin(5) - qJ(6) * t446 + t278 + t306;
t496 = t216 / 0.2e1;
t415 = t317 * t483;
t388 = t321 * t415;
t395 = t319 * t470;
t455 = t317 * t320;
t417 = t322 * t455;
t261 = t395 + t417;
t454 = t318 * t261;
t221 = t388 + t454;
t495 = -t221 / 0.2e1;
t389 = t318 * t415;
t448 = t321 * t261;
t222 = -t389 + t448;
t494 = -t222 / 0.2e1;
t493 = t222 / 0.2e1;
t277 = t318 * t291;
t423 = pkin(9) * t450;
t225 = -qJ(6) * t451 + t277 - t423;
t491 = t225 / 0.2e1;
t414 = t322 * t483;
t449 = t320 * t321;
t244 = (-t318 * t414 + t449) * t317;
t490 = t244 / 0.2e1;
t482 = t318 * pkin(5);
t416 = pkin(9) + t482;
t280 = t416 * t319;
t489 = t280 / 0.2e1;
t477 = -qJ(6) - pkin(10);
t288 = t477 * t318;
t488 = -t288 / 0.2e1;
t289 = t477 * t321;
t487 = t289 / 0.2e1;
t486 = -t318 / 0.2e1;
t485 = -t319 / 0.2e1;
t484 = t321 / 0.2e1;
t480 = t322 * pkin(5);
t479 = t322 * pkin(9);
t476 = pkin(5) * qJD(5);
t475 = t95 * t318;
t474 = t95 * t322;
t473 = t96 * t321;
t472 = t96 * t322;
t153 = t215 * t319 - t322 * t328;
t61 = t153 * t318;
t465 = t214 * t319;
t463 = t215 * t318;
t460 = t221 * t318;
t459 = t221 * t322;
t458 = t222 * t321;
t260 = t319 * t455 - t322 * t470;
t163 = t260 * t318;
t457 = t280 * t318;
t313 = t319 ^ 2;
t456 = t313 * t318;
t452 = t318 * t320;
t447 = t321 * t313;
t40 = (t480 / 0.2e1 + t398) * t321;
t445 = t40 * qJD(3);
t44 = t503 * t453;
t444 = t44 * qJD(3);
t443 = t96 * qJD(5);
t315 = t322 ^ 2;
t301 = t315 - t313;
t442 = qJD(4) * t318;
t441 = qJD(4) * t321;
t440 = qJD(5) * t318;
t439 = qJD(5) * t321;
t438 = qJD(5) * t322;
t437 = t154 * qJD(4);
t436 = t222 * qJD(5);
t435 = t261 * qJD(4);
t273 = t299 * t313;
t434 = t273 * qJD(3);
t275 = t301 * t318;
t433 = t275 * qJD(3);
t276 = t321 * t315 - t447;
t432 = t276 * qJD(3);
t430 = t301 * qJD(3);
t428 = t319 * qJD(4);
t427 = t322 * qJD(3);
t426 = t322 * qJD(4);
t425 = pkin(5) * t450;
t422 = pkin(9) * t446;
t421 = pkin(3) * t427;
t420 = pkin(5) * t440;
t419 = pkin(5) * t439;
t418 = -t480 / 0.2e1;
t412 = t318 * t438;
t411 = t321 * t438;
t410 = t318 * t439;
t409 = t318 * t441;
t408 = t319 * t426;
t407 = t319 * t427;
t406 = t321 * t428;
t188 = t465 / 0.2e1;
t405 = t464 / 0.2e1;
t404 = t322 * t494;
t403 = -t453 / 0.2e1;
t402 = t453 / 0.2e1;
t401 = t451 / 0.2e1;
t400 = -t450 / 0.2e1;
t399 = t450 / 0.2e1;
t397 = qJD(4) * t483;
t392 = pkin(5) * t399;
t391 = -qJD(5) + t427;
t390 = t319 * t415;
t386 = t318 * t406;
t385 = t153 * t399;
t384 = t260 * t400;
t383 = qJD(3) * t415;
t382 = -t415 / 0.2e1;
t381 = t415 / 0.2e1;
t380 = -t414 / 0.2e1;
t379 = t466 / 0.2e1 - t96 / 0.2e1;
t378 = t405 + t95 / 0.2e1;
t375 = t215 / 0.2e1 + t153 * t485;
t374 = -t289 * t485 + t497;
t118 = -t214 * t446 + t463;
t11 = -t95 * t117 + t96 * t118 - t153 * t465;
t245 = (t321 * t414 + t452) * t317;
t6 = t118 * t493 + t96 * t245 / 0.2e1 + t117 * t495 + t244 * t499 + (-t214 * t260 / 0.2e1 + t153 * t381) * t319;
t372 = t11 * qJD(1) + t6 * qJD(2);
t12 = (t154 - t473 - t475) * t153;
t356 = t460 / 0.2e1 + t458 / 0.2e1;
t362 = -t475 / 0.2e1 - t473 / 0.2e1;
t7 = (t154 / 0.2e1 + t362) * t260 + (t261 / 0.2e1 - t356) * t153;
t371 = t12 * qJD(1) + t7 * qJD(2);
t46 = (t261 - t458 - t460) * t260;
t370 = t7 * qJD(1) + t46 * qJD(2);
t49 = -t221 * t244 + t222 * t245 + t260 * t390;
t369 = t6 * qJD(1) + t49 * qJD(2);
t368 = t288 * t318 + t289 * t321;
t367 = t318 * t381;
t366 = t321 * t382;
t310 = -t321 * pkin(5) - pkin(4);
t157 = t310 * t482;
t32 = t398 * t289 + (t496 + t310 * t400 - t457 / 0.2e1) * pkin(5);
t365 = -t32 * qJD(3) + t157 * qJD(4);
t364 = t391 * t319;
t363 = t478 / 0.2e1 - t481 / 0.2e1;
t247 = t318 * t287 + t422;
t361 = t484 * t95 + t486 * t96;
t187 = -t465 / 0.2e1;
t121 = t188 + t187;
t360 = pkin(3) * t429 - t121 * qJD(1);
t351 = t363 * t318;
t219 = t277 / 0.2e1 - t351;
t359 = pkin(4) * t441 - t219 * qJD(3);
t350 = t363 * t321;
t220 = -t278 / 0.2e1 + t350;
t358 = pkin(4) * t442 - t220 * qJD(3);
t224 = -qJ(6) * t453 + t247;
t357 = (t224 / 0.2e1 + t288 * t485) * t321;
t355 = t221 * t484 + t222 * t486;
t354 = t321 * t364;
t263 = (t312 / 0.2e1 - t314 / 0.2e1) * t319;
t353 = -t263 * qJD(3) + t409;
t352 = t413 + t442;
t348 = -t459 / 0.2e1 + t260 * t403;
t347 = t404 + t384;
t346 = qJD(3) * t318 * t447 + t263 * qJD(4);
t274 = t300 * t313;
t345 = t274 * qJD(3) + 0.2e1 * t386;
t343 = t361 * t319;
t281 = t416 * t322;
t339 = -t224 * t321 / 0.2e1 + t211 * t318 / 0.2e1 + t281 / 0.2e1;
t323 = t216 * t495 + t222 * t491 + t260 * t339 + t261 * t489;
t327 = t310 * t319 * t382 + t244 * t488 + t245 * t487;
t15 = t323 + t327;
t324 = t339 * t153 + t154 * t489 + t216 * t499 + t96 * t491;
t330 = t117 * t488 + t118 * t487 + t188 * t310;
t3 = t324 + t330;
t42 = t211 * t216 + t224 * t225 + t280 * t281;
t342 = t3 * qJD(1) + t15 * qJD(2) + t42 * qJD(3);
t22 = -t398 * t222 + (t490 + t384) * pkin(5);
t4 = -t504 + (t153 * t400 + t498) * pkin(5);
t45 = t224 * t503 + t280 * t425;
t341 = -t4 * qJD(1) - t22 * qJD(2) + t45 * qJD(3);
t17 = (t474 / 0.2e1 - t118 / 0.2e1) * t321 + (-t472 / 0.2e1 + t498) * t318;
t43 = (t211 * t322 + t216 * t319) * t321 + (t224 * t322 + t225 * t319) * t318;
t59 = (t459 / 0.2e1 - t245 / 0.2e1) * t321 + (t404 + t490) * t318;
t340 = t17 * qJD(1) + t59 * qJD(2) - t43 * qJD(3);
t246 = -t268 + t424;
t151 = t246 * t319 + (-t306 + t278) * t322;
t19 = (-t468 / 0.2e1 + t378) * t319;
t72 = (t366 + t221 / 0.2e1 - t454 / 0.2e1) * t319;
t338 = -t19 * qJD(1) - t72 * qJD(2) - t151 * qJD(3);
t152 = t277 * t322 + (-t247 + t422) * t319;
t18 = (-t467 / 0.2e1 - t379) * t319;
t71 = (t367 + t493 - t448 / 0.2e1) * t319;
t337 = -t18 * qJD(1) - t71 * qJD(2) + t152 * qJD(3);
t105 = (t381 - t355) * t319;
t119 = (t211 * t321 + t224 * t318) * t319;
t27 = t188 + t343;
t336 = t27 * qJD(1) - t105 * qJD(2) - t119 * qJD(3);
t332 = (t318 * t380 + t449 / 0.2e1) * t317;
t107 = t332 + t347;
t213 = -pkin(9) * t447 - t247 * t322;
t28 = t321 * t375 + t322 * t379;
t335 = t28 * qJD(1) + t107 * qJD(2) + t213 * qJD(3);
t331 = (t321 * t380 - t452 / 0.2e1) * t317;
t108 = t331 - t348;
t212 = -pkin(9) * t456 - t246 * t322;
t29 = -t318 * t375 + t322 * t378;
t334 = t29 * qJD(1) + t108 * qJD(2) - t212 * qJD(3);
t333 = t395 / 0.2e1 + t417 / 0.2e1;
t103 = t333 - t356;
t325 = t461 / 0.2e1 + t326 / 0.2e1;
t24 = t325 + t362;
t70 = -t479 / 0.2e1 + t357 + (t418 + t374) * t318;
t329 = -t24 * qJD(1) - t103 * qJD(2) + t70 * qJD(3) - qJD(4) * t368;
t308 = t428 / 0.2e1;
t267 = (t427 - qJD(5) / 0.2e1) * t319;
t262 = t352 * pkin(5);
t259 = t263 * qJD(5);
t194 = t306 + t278 / 0.2e1 + t350;
t193 = t423 - t277 / 0.2e1 - t351;
t164 = t260 * t321;
t124 = t214 * t322;
t122 = 0.2e1 * t188;
t110 = t332 - t347;
t109 = t331 + t348;
t106 = t221 * t399 + t222 * t403 + t319 * t381;
t104 = t333 + t356;
t74 = t222 * t485 + t261 * t399 + t319 * t367;
t73 = t221 * t485 + t261 * t402 + t319 * t366;
t69 = t479 / 0.2e1 + pkin(5) * t401 + t357 + t374 * t318;
t63 = t153 * t321;
t58 = t244 * t486 + t245 * t484 + t322 * t355;
t41 = (t398 + t418) * t321;
t37 = pkin(5) * t163;
t33 = t211 * t487 - t289 * t492 + t310 * t392 + (t457 / 0.2e1 + t496) * pkin(5);
t31 = t472 / 0.2e1 + t385 + t214 * t401 + t462 / 0.2e1;
t30 = -t474 / 0.2e1 + t153 * t403 + t322 * t405 - t463 / 0.2e1;
t26 = t187 + t343;
t25 = t325 - t362;
t23 = pkin(5) * t490 + t211 * t494 + t222 * t492 + t260 * t392;
t21 = t154 * t399 + t214 * t403 + t485 * t96;
t20 = t154 * t402 + t214 * t399 + t485 * t95;
t16 = t117 * t486 + t118 * t484 + t322 * t361;
t14 = t323 - t327;
t9 = pkin(5) * t61;
t5 = t504 + (t385 + t498) * pkin(5);
t2 = t324 - t330;
t1 = t6 * qJD(3) + t7 * qJD(4);
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11 * qJD(3) + t12 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, -t215 * qJD(3), t214 * qJD(3), 0, 0, 0, 0, 0, t122 * qJD(4) - t215 * t427, t124 * qJD(4) + t215 * t429, 0, 0, 0, 0, 0 (-t117 * t322 - t214 * t456) * qJD(3) + t20 * qJD(4) + t31 * qJD(5) (t118 * t322 - t214 * t447) * qJD(3) + t21 * qJD(4) + t30 * qJD(5), t16 * qJD(4) + (-t117 * t321 - t118 * t318) * t429 (t117 * t211 + t118 * t224 - t280 * t465) * qJD(3) + t2 * qJD(4) + t5 * qJD(5) + t26 * qJD(6) + t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122 * qJD(3) - t437, t124 * qJD(3) + t153 * qJD(4), 0, 0, 0, 0, 0, t20 * qJD(3) + t61 * qJD(5) - t321 * t437, t21 * qJD(3) + t63 * qJD(5) + t318 * t437, t16 * qJD(3) - t153 * t501, t2 * qJD(3) + (t153 * t368 + t154 * t310) * qJD(4) + t9 * qJD(5) + t25 * qJD(6) + t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 * qJD(3) + t61 * qJD(4) - t443, t30 * qJD(3) + t63 * qJD(4) + t95 * qJD(5), 0, -pkin(5) * t443 + t5 * qJD(3) + t9 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(3) + t25 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * qJD(3) + t46 * qJD(4); 0, 0, 0, -qJD(3) * t455, -t383, 0, 0, 0, 0, 0 (-t319 * t397 - t320 * t427) * t317 (t320 * t429 - t322 * t397) * t317, 0, 0, 0, 0, 0 (-t244 * t322 + t313 * t389) * qJD(3) + t73 * qJD(4) + t110 * qJD(5) (t245 * t322 + t313 * t388) * qJD(3) + t74 * qJD(4) + t109 * qJD(5), t58 * qJD(4) + (-t244 * t321 - t245 * t318) * t429 (t244 * t211 + t245 * t224 + t280 * t390) * qJD(3) + t14 * qJD(4) + t23 * qJD(5) + t106 * qJD(6) + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t319 * t383 - t435, t260 * qJD(4) - t322 * t383, 0, 0, 0, 0, 0, t73 * qJD(3) + t163 * qJD(5) - t321 * t435, t74 * qJD(3) + t164 * qJD(5) + t318 * t435, t58 * qJD(3) - t260 * t501, t14 * qJD(3) + (t260 * t368 + t261 * t310) * qJD(4) + t37 * qJD(5) + t104 * qJD(6) + t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110 * qJD(3) + t163 * qJD(4) - t436, t109 * qJD(3) + t164 * qJD(4) + t221 * qJD(5), 0, -pkin(5) * t436 + t23 * qJD(3) + t37 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106 * qJD(3) + t104 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121 * qJD(4), 0, 0, 0, 0, 0, 0, -t19 * qJD(4) - t28 * qJD(5), -t18 * qJD(4) - t29 * qJD(5), t17 * qJD(4), t3 * qJD(4) - t4 * qJD(5) + t27 * qJD(6) - t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t72 * qJD(4) - t107 * qJD(5), -t71 * qJD(4) - t108 * qJD(5), t59 * qJD(4), t15 * qJD(4) - t22 * qJD(5) - t105 * qJD(6) - t369; 0, 0, 0, 0, 0, t408, t301 * qJD(4), 0, 0, 0, -pkin(3) * t428, -pkin(3) * t426, -t313 * t410 + t314 * t408, -t274 * qJD(5) - 0.2e1 * t322 * t386, -t276 * qJD(4) + t319 * t412, t275 * qJD(4) + t319 * t411, -t408, -t151 * qJD(4) - t213 * qJD(5), t152 * qJD(4) + t212 * qJD(5), -t43 * qJD(4) - t44 * qJD(5) + t273 * qJD(6), t42 * qJD(4) + t45 * qJD(5) - t119 * qJD(6); 0, 0, 0, 0, 0, t407, t430, t426, -t428, 0, -pkin(9) * t426 - t360, pkin(9) * t428 - t421, -t259 + (t314 * t429 + t409) * t322, -0.2e1 * t319 * t410 + t322 * t500, t318 * t428 - t432, t406 + t433, -t267 (t318 * t377 - t422) * qJD(4) + t194 * qJD(5) + t338 (t321 * t377 + t424) * qJD(4) + t193 * qJD(5) + t337 ((-t288 * t322 + t225) * t321 + (t289 * t322 - t216) * t318) * qJD(4) + t41 * qJD(5) + t340 (t216 * t288 - t225 * t289 + t281 * t310) * qJD(4) + t33 * qJD(5) + t69 * qJD(6) + t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t346, -t345, t318 * t364, t354, t308, t194 * qJD(4) - t247 * qJD(5) - t335, t193 * qJD(4) + t246 * qJD(5) - t334, t41 * qJD(4) + t319 * t420 - t444, t33 * qJD(4) - t224 * t476 + t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t434, t69 * qJD(4) + t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t121 * qJD(3), 0, 0, 0, 0, 0, 0, t19 * qJD(3), t18 * qJD(3), -t17 * qJD(3), -t3 * qJD(3) - t24 * qJD(6) - t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72 * qJD(3), t71 * qJD(3), -t59 * qJD(3), -t15 * qJD(3) - t103 * qJD(6) - t370; 0, 0, 0, 0, 0, -t407, -t430, 0, 0, 0, t360, t421, -t314 * t407 - t259, 0.2e1 * t318 * t354, -t411 + t432, t412 - t433, t267, t220 * qJD(5) - t338, t219 * qJD(5) - t337, t40 * qJD(5) - t340, -t32 * qJD(5) + t70 * qJD(6) - t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t410, t300 * qJD(5), 0, 0, 0, -pkin(4) * t440, -pkin(4) * t439, t299 * qJD(6), t157 * qJD(5) - qJD(6) * t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t353, t500, -t391 * t321, t391 * t318, -t429 / 0.2e1, -pkin(10) * t439 - t358, pkin(10) * t440 - t359, -t419 + t445, t289 * t476 + t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t501, t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28 * qJD(3), t29 * qJD(3), 0, t4 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107 * qJD(3), t108 * qJD(3), 0, t22 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t346, t345 (-t318 * t429 + t441) * t322, -t352 * t322, t308, -t220 * qJD(4) + t335, -t219 * qJD(4) + t334, -t40 * qJD(4) + t444, t32 * qJD(4) - qJD(6) * t425 - t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t353, -t500, t321 * t427, -t318 * t427, t429 / 0.2e1, t358, t359, -t445, -qJD(6) * t482 - t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27 * qJD(3) + t24 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * qJD(3) + t103 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t434, -t70 * qJD(4) + t319 * t419 - t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t501, -t329 + t420; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t8;
