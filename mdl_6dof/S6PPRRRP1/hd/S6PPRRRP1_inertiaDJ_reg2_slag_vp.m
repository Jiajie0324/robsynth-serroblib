% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PPRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PPRRRP1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRP1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP1_inertiaDJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 18:54:25
% EndTime: 2019-03-08 18:54:33
% DurationCPUTime: 2.74s
% Computational Cost: add. (2249->254), mult. (7015->462), div. (0->0), fcn. (7295->12), ass. (0->162)
t99 = cos(qJ(3));
t161 = qJD(3) * t99;
t92 = sin(pkin(7));
t134 = t92 * t161;
t164 = cos(pkin(7));
t98 = cos(qJ(4));
t128 = t98 * t164;
t96 = sin(qJ(3));
t176 = t92 * t96;
t95 = sin(qJ(4));
t54 = t176 * t95 - t128;
t155 = t54 * qJD(4);
t102 = t134 * t98 - t155;
t152 = t98 * qJD(4);
t55 = t164 * t95 + t176 * t98;
t154 = t55 * qJD(4);
t38 = t134 * t95 + t154;
t109 = t152 * t54 + t38 * t95;
t84 = t95 * qJD(4);
t192 = t102 * t98 - t55 * t84 + t109;
t191 = -0.4e1 * t95;
t94 = sin(qJ(5));
t87 = t94 ^ 2;
t97 = cos(qJ(5));
t89 = t97 ^ 2;
t168 = t87 - t89;
t163 = cos(pkin(12));
t113 = t164 * t163;
t165 = cos(pkin(6));
t127 = t165 * t92;
t91 = sin(pkin(12));
t93 = sin(pkin(6));
t35 = -t99 * t127 + (-t113 * t99 + t91 * t96) * t93;
t189 = t95 * qJD(6) + (pkin(9) * qJD(5) + qJ(6) * qJD(4)) * t98;
t188 = 0.2e1 * qJD(5);
t187 = pkin(9) * t94;
t186 = t97 * pkin(5);
t105 = -t163 * t92 * t93 + t164 * t165;
t36 = t96 * t127 + (t113 * t96 + t91 * t99) * t93;
t26 = t105 * t95 + t36 * t98;
t31 = t35 * qJD(3);
t16 = qJD(4) * t26 - t31 * t95;
t185 = t16 * t95;
t25 = -t105 * t98 + t36 * t95;
t184 = t25 * t16;
t32 = t36 * qJD(3);
t183 = t35 * t32;
t144 = pkin(9) * t152;
t86 = qJD(5) * t97;
t58 = t152 * t94 + t86 * t95;
t48 = pkin(5) * t58 + t144;
t181 = t48 * t94;
t180 = t48 * t97;
t179 = t54 * t38;
t171 = -qJ(6) - pkin(10);
t72 = t171 * t94;
t178 = t72 * t95;
t73 = t171 * t97;
t177 = t73 * t95;
t175 = t92 * t99;
t174 = t94 * t98;
t173 = t95 * t97;
t172 = t97 * t98;
t120 = -pkin(4) * t98 - pkin(10) * t95;
t112 = -pkin(3) + t120;
t106 = qJD(5) * t112;
t119 = pkin(4) * t95 - pkin(10) * t98;
t108 = t119 * qJD(4);
t170 = -t106 * t97 - t108 * t94;
t133 = t94 * t84;
t169 = pkin(9) * t133 + t108 * t97;
t81 = pkin(9) * t172;
t50 = t112 * t94 + t81;
t88 = t95 ^ 2;
t167 = -t98 ^ 2 + t88;
t166 = qJ(6) * t95;
t162 = qJD(3) * t96;
t160 = qJD(4) * t94;
t159 = qJD(4) * t97;
t158 = qJD(5) * t94;
t157 = qJD(5) * t95;
t156 = qJD(5) * t98;
t151 = pkin(9) * t174;
t150 = -0.2e1 * pkin(3) * qJD(4);
t148 = t94 * t175;
t147 = -0.2e1 * t158;
t146 = pkin(5) * t84;
t145 = pkin(5) * t158;
t143 = t94 * t157;
t142 = t94 * t156;
t141 = t97 * t156;
t140 = t25 * t158;
t138 = t54 * t158;
t68 = (pkin(5) * t94 + pkin(9)) * t95;
t136 = t68 * t158;
t135 = t92 * t162;
t132 = t94 * t86;
t131 = t95 * t152;
t130 = t97 * t152;
t83 = -pkin(4) - t186;
t129 = -t83 + t186;
t126 = t167 * qJD(4);
t125 = 0.2e1 * t131;
t123 = t94 * t130;
t122 = t88 * t132;
t118 = pkin(5) * t87 + t83 * t97;
t117 = t16 * t54 + t25 * t38;
t18 = -t26 * t94 + t35 * t97;
t19 = t26 * t97 + t35 * t94;
t116 = -t18 * t97 - t19 * t94;
t110 = t175 * t97 + t55 * t94;
t40 = t55 * t97 - t148;
t115 = t110 * t97 - t40 * t94;
t65 = t97 * t112;
t49 = t65 - t151;
t114 = -t49 * t97 - t50 * t94;
t14 = t16 * t94 + t25 * t86;
t15 = -t16 * t97 + t140;
t27 = t38 * t94 + t54 * t86;
t28 = -t38 * t97 + t138;
t56 = t130 - t143;
t57 = t84 * t97 + t142;
t17 = -qJD(4) * t25 - t31 * t98;
t10 = t32 * t94 - t26 * t158 + (qJD(5) * t35 + t17) * t97;
t9 = -qJD(5) * t19 - t17 * t94 + t32 * t97;
t4 = qJD(5) * t116 + t10 * t97 - t9 * t94;
t104 = t185 + t17 * t98 + (t25 * t98 - t26 * t95) * qJD(4);
t21 = qJD(5) * t110 - t102 * t97 - t135 * t94;
t22 = qJD(5) * t148 - t102 * t94 + t135 * t97 - t55 * t86;
t11 = qJD(5) * t115 - t21 * t97 - t22 * t94;
t29 = pkin(9) * t57 + t170;
t30 = -qJD(5) * t50 + t169;
t103 = qJD(5) * t114 - t29 * t97 - t30 * t94;
t100 = qJ(6) * t143 - t106 * t94 - t189 * t97 + t169;
t79 = -0.2e1 * t131;
t78 = -0.2e1 * t132;
t77 = 0.2e1 * t132;
t66 = -0.2e1 * t168 * qJD(5);
t59 = t133 - t141;
t53 = -t94 * qJD(6) + t171 * t86;
t52 = -qJD(6) * t97 - t158 * t171;
t47 = 0.2e1 * t131 * t89 - 0.2e1 * t122;
t46 = 0.2e1 * t131 * t87 + 0.2e1 * t122;
t45 = t157 * t168 - t123;
t44 = t132 * t191 - t152 * t168;
t43 = -0.2e1 * t126 * t94 + 0.2e1 * t141 * t95;
t42 = 0.2e1 * t142 * t95 + 0.2e1 * t159 * t167;
t41 = -t166 * t94 + t50;
t37 = t168 * t188 * t88 + t123 * t191;
t34 = -t97 * t166 + t65 + (-pkin(5) - t187) * t98;
t23 = (pkin(9) * qJD(4) + qJ(6) * qJD(5)) * t173 + t189 * t94 + t170;
t20 = t100 + t146;
t13 = (t155 * t94 - t22) * t98 + (-qJD(4) * t110 + t27) * t95;
t12 = (t155 * t97 - t21) * t98 + (-qJD(4) * t40 - t28) * t95;
t8 = -0.2e1 * t110 * t22 - 0.2e1 * t21 * t40 + 0.2e1 * t179;
t7 = t115 * t152 + (t21 * t94 - t22 * t97 + (-t110 * t94 - t40 * t97) * qJD(5)) * t95;
t6 = (t159 * t25 + t10) * t98 + (-qJD(4) * t19 - t15) * t95;
t5 = (t160 * t25 - t9) * t98 + (qJD(4) * t18 + t14) * t95;
t3 = 0.2e1 * t10 * t19 + 0.2e1 * t18 * t9 + 0.2e1 * t184;
t2 = t116 * t152 + (-t10 * t94 - t9 * t97 + (t18 * t94 - t19 * t97) * qJD(5)) * t95;
t1 = t10 * t40 - t110 * t9 + t18 * t22 - t19 * t21 + t117;
t24 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t31 * t36 + 0.2e1 * t183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t17 * t26 + 0.2e1 * t183 + 0.2e1 * t184, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-t31 * t96 - t32 * t99 + (t35 * t96 + t36 * t99) * qJD(3)) * t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102 * t26 + t135 * t35 + t17 * t55 - t175 * t32 + t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t128 * t154 + 0.2e1 * t179 + 0.2e1 * (t55 * (t161 * t98 - t84 * t96) - t96 * t134) * t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t31, 0, 0, 0, 0, 0, 0, 0, 0, -t32 * t98 + t35 * t84, t152 * t35 + t32 * t95, t104, -t32 * pkin(3) + pkin(9) * t104, 0, 0, 0, 0, 0, 0, t5, t6, t2, t10 * t50 + t18 * t30 - t19 * t29 + t9 * t49 + (t152 * t25 + t185) * pkin(9), 0, 0, 0, 0, 0, 0, t5, t6, t2, t10 * t41 + t16 * t68 + t18 * t20 - t19 * t23 + t25 * t48 + t34 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t134, 0, 0, 0, 0, 0, 0, 0, 0 (-t162 * t98 - t84 * t99) * t92 (-t152 * t99 + t162 * t95) * t92, t192, -pkin(3) * t135 + pkin(9) * t192, 0, 0, 0, 0, 0, 0, t13, t12, t7, pkin(9) * t109 - t110 * t30 - t21 * t50 + t22 * t49 - t40 * t29, 0, 0, 0, 0, 0, 0, t13, t12, t7, -t110 * t20 - t21 * t41 + t22 * t34 - t23 * t40 + t38 * t68 + t48 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, -0.2e1 * t126, 0, t79, 0, 0, t95 * t150, t98 * t150, 0, 0, t47, t37, t42, t46, t43, t79, 0.2e1 * t49 * t84 - 0.2e1 * t30 * t98 + 0.2e1 * (t125 * t94 + t86 * t88) * pkin(9), -0.2e1 * t50 * t84 - 0.2e1 * t29 * t98 + 0.2e1 * (t125 * t97 - t158 * t88) * pkin(9), 0.2e1 * t114 * t152 + 0.2e1 * (t29 * t94 - t30 * t97 + (t49 * t94 - t50 * t97) * qJD(5)) * t95, 0.2e1 * pkin(9) ^ 2 * t131 - 0.2e1 * t29 * t50 + 0.2e1 * t30 * t49, t47, t37, t42, t46, t43, t79, 0.2e1 * (t160 * t68 - t20) * t98 + 0.2e1 * (qJD(4) * t34 + t68 * t86 + t181) * t95, 0.2e1 * (t159 * t68 - t23) * t98 + 0.2e1 * (-qJD(4) * t41 - t136 + t180) * t95, 0.2e1 * (-t34 * t97 - t41 * t94) * t152 + 0.2e1 * (-t20 * t97 + t23 * t94 + (t34 * t94 - t41 * t97) * qJD(5)) * t95, 0.2e1 * t20 * t34 - 0.2e1 * t23 * t41 + 0.2e1 * t48 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, -t17, 0, 0, 0, 0, 0, 0, 0, 0, t15, t14, t4, -t16 * pkin(4) + pkin(10) * t4, 0, 0, 0, 0, 0, 0, t15, t14, t4, pkin(5) * t140 - t10 * t73 + t16 * t83 + t18 * t53 - t19 * t52 + t72 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t102, 0, 0, 0, 0, 0, 0, 0, 0, t28, t27, t11, -t38 * pkin(4) + pkin(10) * t11, 0, 0, 0, 0, 0, 0, t28, t27, t11, pkin(5) * t138 - t110 * t53 + t21 * t73 + t22 * t72 + t38 * t83 - t40 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t152, 0, -t84, 0, -t144, pkin(9) * t84, 0, 0, -t45, t44, t59, t45, t57, 0 (pkin(10) * t172 + (-pkin(4) * t97 + t187) * t95) * qJD(5) + (t120 * t94 - t81) * qJD(4) (pkin(9) * t173 + t119 * t94) * qJD(5) + (t120 * t97 + t151) * qJD(4), t103, -pkin(4) * t144 + pkin(10) * t103, -t45, t44, t59, t45, t57, 0, -t180 - t53 * t98 + (t174 * t83 + t178) * qJD(4) + (t118 * t95 + t68 * t94) * qJD(5), t181 - t52 * t98 + (t172 * t83 + t177) * qJD(4) + (t129 * t94 * t95 + t68 * t97) * qJD(5) (-t72 * t152 - t53 * t95 - t23 + (-t34 + t177) * qJD(5)) * t97 + (t73 * t152 + t52 * t95 - t20 + (-t41 + t178) * qJD(5)) * t94, pkin(5) * t136 + t20 * t72 + t23 * t73 + t34 * t53 - t41 * t52 + t48 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t66, 0, t78, 0, 0, pkin(4) * t147, -0.2e1 * pkin(4) * t86, 0, 0, t77, t66, 0, t78, 0, 0, t129 * t147, t118 * t188, -0.2e1 * t52 * t97 - 0.2e1 * t53 * t94 + 0.2e1 * (-t72 * t97 + t73 * t94) * qJD(5), 0.2e1 * t145 * t83 + 0.2e1 * t52 * t73 + 0.2e1 * t53 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, -t10, 0, 0, 0, 0, 0, 0, 0, 0, t9, -t10, 0, t9 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, t21, 0, 0, 0, 0, 0, 0, 0, 0, t22, t21, 0, t22 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, -t58, t84, t30, t29, 0, 0, 0, 0, t56, 0, -t58, t84, t100 + 0.2e1 * t146, t23, -t56 * pkin(5), t20 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, -t158, 0, -pkin(10) * t86, pkin(10) * t158, 0, 0, 0, 0, t86, 0, -t158, 0, t53, t52, -pkin(5) * t86, t53 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t56, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, t86, 0, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t24;
