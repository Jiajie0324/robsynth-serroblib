% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRP9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP9_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t80 = sin(qJ(3));
t75 = t80 ^ 2;
t83 = cos(qJ(3));
t77 = t83 ^ 2;
t136 = t75 + t77;
t135 = -t83 * pkin(3) - t80 * qJ(4);
t82 = cos(qJ(5));
t108 = t82 * t80;
t81 = sin(qJ(2));
t65 = t83 * t81;
t79 = sin(qJ(5));
t30 = -t81 * t108 + t79 * t65;
t134 = t30 ^ 2;
t39 = t79 * t80 + t82 * t83;
t133 = t39 ^ 2;
t132 = 0.2e1 * t39;
t50 = -pkin(2) + t135;
t131 = -0.2e1 * t50;
t130 = -0.2e1 * t81;
t129 = 0.2e1 * t81;
t84 = cos(qJ(2));
t128 = 0.2e1 * t84;
t127 = -pkin(3) - pkin(4);
t126 = pkin(2) * t80;
t125 = pkin(2) * t83;
t124 = pkin(3) * t80;
t76 = t81 ^ 2;
t123 = t76 * pkin(7);
t122 = t80 * pkin(8);
t121 = t81 * pkin(7);
t120 = t84 * pkin(5);
t110 = t80 * t84;
t51 = -t84 * pkin(2) - t81 * pkin(8) - pkin(1);
t104 = pkin(7) * t110 - t83 * t51;
t74 = t84 * pkin(3);
t23 = t74 + t104;
t11 = t84 * pkin(4) - pkin(9) * t65 + t23;
t112 = t80 * t81;
t101 = t84 * qJ(4);
t107 = t83 * t84;
t27 = pkin(7) * t107 + t80 * t51;
t22 = -t101 + t27;
t14 = pkin(9) * t112 + t22;
t119 = -t82 * t11 + t79 * t14;
t4 = t79 * t11 + t82 * t14;
t71 = t83 * pkin(8);
t53 = -t83 * pkin(9) + t71;
t96 = (pkin(8) - pkin(9)) * t80;
t19 = t79 * t53 - t82 * t96;
t118 = t19 * t84;
t21 = t82 * t53 + t79 * t96;
t117 = t21 * t84;
t116 = t30 * t39;
t32 = t39 * t81;
t115 = t32 * t30;
t42 = -t79 * t83 + t108;
t114 = t42 * t39;
t113 = t79 * t84;
t111 = t80 * t83;
t109 = t81 * t84;
t106 = t84 * t30;
t105 = t84 * t39;
t103 = t136 * pkin(8) ^ 2;
t102 = t83 * qJ(4);
t100 = t84 * qJ(6);
t99 = t19 ^ 2 + t21 ^ 2;
t98 = t80 * t109;
t97 = t76 * t111;
t95 = t19 * t32 - t21 * t30;
t94 = -t19 * t82 + t21 * t79;
t93 = -t79 * t30 - t82 * t32;
t92 = -t79 * t39 - t82 * t42;
t35 = t83 * pkin(4) - t50;
t47 = t79 * qJ(4) - t82 * t127;
t91 = t102 - t124;
t90 = t22 * t83 + t23 * t80;
t89 = t104 * t80 + t27 * t83;
t88 = t42 * t30 + t32 * t39;
t87 = 0.2e1 * t19 * t42 - 0.2e1 * t21 * t39;
t49 = t82 * qJ(4) + t79 * t127;
t57 = t81 * t102;
t18 = t57 + (t127 * t80 - pkin(7)) * t81;
t86 = pkin(7) ^ 2;
t78 = t84 ^ 2;
t69 = t76 * t86;
t64 = t77 * t76;
t63 = t82 * t84;
t62 = t75 * t76;
t59 = pkin(8) * t110;
t56 = t79 ^ 2 + t82 ^ 2;
t55 = t80 * t65;
t52 = t107 * t130;
t46 = 0.2e1 * t136 * pkin(8);
t45 = pkin(5) + t47;
t44 = -qJ(6) + t49;
t41 = (t75 - t77) * t81;
t38 = t42 ^ 2;
t34 = t42 * t84;
t29 = t32 ^ 2;
t28 = -t57 + (pkin(7) + t124) * t81;
t24 = t32 * t128;
t15 = t32 * t42;
t7 = t39 * pkin(5) - t42 * qJ(6) + t35;
t5 = t30 * pkin(5) - t32 * qJ(6) + t18;
t2 = t119 - t120;
t1 = t100 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t76, 0.2e1 * t109, 0, t78, 0, 0, pkin(1) * t128, pkin(1) * t130, 0.2e1 * (t76 + t78) * pkin(7), pkin(1) ^ 2 + t78 * t86 + t69, t64, -0.2e1 * t97, t52, t62, 0.2e1 * t98, t78, 0.2e1 * t104 * t84 + 0.2e1 * t80 * t123, 0.2e1 * t83 * t123 + 0.2e1 * t27 * t84 (t104 * t83 - t27 * t80) * t129, t104 ^ 2 + t27 ^ 2 + t69, t64, t52, 0.2e1 * t97, t78, -0.2e1 * t98, t62, 0.2e1 * t28 * t112 + 0.2e1 * t23 * t84 (-t22 * t80 + t23 * t83) * t129, -0.2e1 * t22 * t84 - 0.2e1 * t28 * t65, t22 ^ 2 + t23 ^ 2 + t28 ^ 2, t29, -0.2e1 * t115, t24, t134, -0.2e1 * t106, t78, -0.2e1 * t119 * t84 + 0.2e1 * t18 * t30, 0.2e1 * t18 * t32 - 0.2e1 * t4 * t84, 0.2e1 * t119 * t32 - 0.2e1 * t4 * t30, t119 ^ 2 + t18 ^ 2 + t4 ^ 2, t29, t24, 0.2e1 * t115, t78, 0.2e1 * t106, t134, -0.2e1 * t2 * t84 + 0.2e1 * t5 * t30, -0.2e1 * t1 * t30 + 0.2e1 * t2 * t32, 0.2e1 * t1 * t84 - 0.2e1 * t5 * t32, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, t84, 0, -t121, -t84 * pkin(7), 0, 0, t55, -t41, -t110, -t55, -t107, 0, t59 + (-pkin(7) * t83 - t126) * t81, pkin(8) * t107 + (pkin(7) * t80 - t125) * t81, t89, -pkin(2) * t121 + t89 * pkin(8), t55, -t110, t41, 0, t107, -t55, t50 * t112 - t28 * t83 + t59, t90, -t28 * t80 + (-pkin(8) * t84 - t50 * t81) * t83, t90 * pkin(8) + t28 * t50, t15, -t88, t34, t116, -t105, 0, t18 * t39 + t35 * t30 - t118, t18 * t42 + t35 * t32 - t117, t119 * t42 - t4 * t39 + t95, t119 * t19 + t18 * t35 + t4 * t21, t15, t34, t88, 0, t105, t116, t7 * t30 + t5 * t39 - t118, -t1 * t39 + t2 * t42 + t95, -t7 * t32 - t5 * t42 + t117, t1 * t21 + t2 * t19 + t5 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t75, 0.2e1 * t111, 0, t77, 0, 0, 0.2e1 * t125, -0.2e1 * t126, t46, pkin(2) ^ 2 + t103, t75, 0, -0.2e1 * t111, 0, 0, t77, t83 * t131, t46, t80 * t131, t50 ^ 2 + t103, t38, -0.2e1 * t114, 0, t133, 0, 0, t35 * t132, 0.2e1 * t35 * t42, t87, t35 ^ 2 + t99, t38, 0, 0.2e1 * t114, 0, 0, t133, t7 * t132, t87, -0.2e1 * t7 * t42, t7 ^ 2 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, -t112, -t84, -t104, -t27, 0, 0, 0, t65, 0, -t84, t112, 0, -0.2e1 * t74 - t104, t135 * t81, -0.2e1 * t101 + t27, -t23 * pkin(3) + t22 * qJ(4), 0, 0, -t32, 0, t30, -t84, -t47 * t84 + t119, -t49 * t84 + t4, -t49 * t30 + t47 * t32, t119 * t47 + t4 * t49, 0, -t32, 0, -t84, -t30, 0 (-pkin(5) - t45) * t84 + t119, -t44 * t30 + t45 * t32 (-qJ(6) + t44) * t84 - t4, t1 * t44 + t2 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t83, 0, -t122, -t71, 0, 0, 0, t80, 0, 0, -t83, 0, -t122, t91, t71, t91 * pkin(8), 0, 0, -t42, 0, t39, 0, t19, t21, -t49 * t39 + t47 * t42, t19 * t47 + t21 * t49, 0, -t42, 0, 0, -t39, 0, t19, -t44 * t39 + t45 * t42, -t21, t19 * t45 + t21 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(3), 0, 0.2e1 * qJ(4), pkin(3) ^ 2 + qJ(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t47, 0.2e1 * t49, 0, t47 ^ 2 + t49 ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t45, 0, -0.2e1 * t44, t44 ^ 2 + t45 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, t65, 0, t23, 0, 0, 0, 0, 0, 0, t63, -t113, t93, -t119 * t82 + t4 * t79, 0, 0, 0, 0, 0, 0, t63, t93, t113, t1 * t79 - t2 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t122, 0, 0, 0, 0, 0, 0, 0, 0, t92, t94, 0, 0, 0, 0, 0, 0, 0, t92, 0, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t82, t79, 0, -t47 * t82 + t49 * t79, 0, 0, 0, 0, 0, 0, -t82, 0, -t79, t44 * t79 - t45 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, t84, -t119, -t4, 0, 0, 0, t32, 0, t84, t30, 0, -t119 + 0.2e1 * t120, -t32 * pkin(5) - t30 * qJ(6), 0.2e1 * t100 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t39, 0, -t19, -t21, 0, 0, 0, t42, 0, 0, t39, 0, -t19, -pkin(5) * t42 - t39 * qJ(6), t21, -t19 * pkin(5) + t21 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t47, -t49, 0, 0, 0, 0, 0, -1, 0, 0, -0.2e1 * pkin(5) - t47, 0, -0.2e1 * qJ(6) + t49, -t45 * pkin(5) + t44 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, -t79, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, t79, t82 * pkin(5) + t79 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t84, t32, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
