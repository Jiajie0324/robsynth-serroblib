% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRP9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 08:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRP9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP9_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 08:48:15
% EndTime: 2019-05-07 08:48:22
% DurationCPUTime: 7.53s
% Computational Cost: add. (18692->288), mult. (37008->297), div. (0->0), fcn. (25204->8), ass. (0->173)
t2412 = sin(qJ(2));
t2457 = qJD(1) * t2412;
t2404 = qJD(2) * t2457;
t2416 = cos(qJ(2));
t2438 = t2416 * qJDD(1);
t2436 = t2404 - t2438;
t2433 = -qJDD(3) - t2436;
t2431 = qJDD(5) + t2433;
t2411 = sin(qJ(3));
t2415 = cos(qJ(3));
t2376 = -qJD(2) * t2415 + t2411 * t2457;
t2378 = t2411 * qJD(2) + t2415 * t2457;
t2410 = sin(qJ(5));
t2414 = cos(qJ(5));
t2344 = -t2414 * t2376 + t2378 * t2410;
t2346 = t2376 * t2410 + t2378 * t2414;
t2447 = t2344 * t2346;
t2294 = t2431 + t2447;
t2343 = t2346 ^ 2;
t2456 = qJD(1) * t2416;
t2402 = qJD(3) - t2456;
t2395 = qJD(5) - t2402;
t2461 = t2395 ^ 2;
t2472 = -t2343 - t2461;
t2263 = t2294 * t2410 - t2414 * t2472;
t2265 = t2294 * t2414 + t2410 * t2472;
t2237 = t2263 * t2411 + t2265 * t2415;
t2437 = qJD(2) * t2456;
t2439 = t2412 * qJDD(1);
t2381 = t2437 + t2439;
t2432 = -t2411 * qJDD(2) - t2415 * t2381;
t2428 = -qJD(3) * t2376 - t2432;
t2434 = -t2378 * qJD(3) + qJDD(2) * t2415 - t2411 * t2381;
t2423 = -t2410 * t2434 + t2414 * t2428;
t2422 = -t2344 * qJD(5) + t2423;
t2446 = t2344 * t2395;
t2421 = t2422 - t2446;
t2227 = t2237 * t2416 + t2412 * t2421;
t2243 = t2263 * t2415 - t2265 * t2411;
t2413 = sin(qJ(1));
t2417 = cos(qJ(1));
t2523 = t2227 * t2413 + t2243 * t2417;
t2522 = t2227 * t2417 - t2243 * t2413;
t2295 = t2431 - t2447;
t2308 = t2344 ^ 2;
t2468 = -t2461 - t2308;
t2482 = -t2295 * t2410 + t2414 * t2468;
t2484 = t2295 * t2414 + t2410 * t2468;
t2489 = t2411 * t2482 - t2415 * t2484;
t2426 = t2410 * t2428 + t2414 * t2434;
t2441 = -t2395 - qJD(5);
t2267 = -t2346 * t2441 + t2426;
t2490 = t2411 * t2484 + t2415 * t2482;
t2517 = -t2267 * t2412 + t2416 * t2490;
t2521 = t2413 * t2517 - t2417 * t2489;
t2520 = t2413 * t2489 + t2417 * t2517;
t2225 = t2237 * t2412 - t2416 * t2421;
t2516 = t2267 * t2416 + t2412 * t2490;
t2445 = t2376 * t2378;
t2333 = t2433 - t2445;
t2375 = t2378 ^ 2;
t2460 = t2402 ^ 2;
t2471 = -t2375 - t2460;
t2305 = t2333 * t2415 - t2411 * t2471;
t2444 = t2376 * t2402;
t2427 = t2428 - t2444;
t2284 = t2305 * t2416 + t2412 * t2427;
t2303 = t2333 * t2411 + t2415 * t2471;
t2515 = t2284 * t2413 - t2303 * t2417;
t2514 = t2284 * t2417 + t2303 * t2413;
t2282 = t2305 * t2412 - t2416 * t2427;
t2317 = t2428 + t2444;
t2442 = t2402 * t2378;
t2429 = t2434 + t2442;
t2466 = -t2317 * t2415 + t2411 * t2429;
t2462 = t2376 ^ 2;
t2331 = t2462 + t2375;
t2464 = t2317 * t2411 + t2415 * t2429;
t2496 = -t2331 * t2412 + t2416 * t2464;
t2507 = t2413 * t2496 - t2417 * t2466;
t2271 = t2422 + t2446;
t2424 = (-qJD(5) + t2395) * t2346 - t2426;
t2465 = t2271 * t2410 + t2414 * t2424;
t2467 = -t2271 * t2414 + t2410 * t2424;
t2479 = t2411 * t2465 - t2415 * t2467;
t2293 = t2343 + t2308;
t2480 = t2411 * t2467 + t2415 * t2465;
t2491 = t2293 * t2412 + t2416 * t2480;
t2506 = t2413 * t2491 - t2417 * t2479;
t2334 = t2433 + t2445;
t2469 = -t2460 - t2462;
t2483 = -t2334 * t2415 + t2411 * t2469;
t2430 = -t2434 + t2442;
t2481 = t2334 * t2411 + t2415 * t2469;
t2493 = t2412 * t2430 + t2416 * t2481;
t2505 = t2413 * t2493 - t2417 * t2483;
t2504 = t2413 * t2466 + t2417 * t2496;
t2503 = t2413 * t2479 + t2417 * t2491;
t2502 = t2413 * t2483 + t2417 * t2493;
t2495 = t2331 * t2416 + t2412 * t2464;
t2494 = t2412 * t2481 - t2416 * t2430;
t2492 = -t2293 * t2416 + t2412 * t2480;
t2463 = qJD(2) ^ 2;
t2459 = 2 * qJD(6);
t2458 = t2416 * g(3);
t2392 = -g(1) * t2417 - g(2) * t2413;
t2418 = qJD(1) ^ 2;
t2368 = -pkin(1) * t2418 + qJDD(1) * pkin(7) + t2392;
t2356 = -g(3) * t2412 + t2416 * t2368;
t2379 = (-pkin(2) * t2416 - pkin(8) * t2412) * qJD(1);
t2324 = -pkin(2) * t2463 + qJDD(2) * pkin(8) + t2379 * t2456 + t2356;
t2391 = t2413 * g(1) - t2417 * g(2);
t2367 = qJDD(1) * pkin(1) + t2418 * pkin(7) + t2391;
t2420 = (-t2381 - t2437) * pkin(8) + (t2436 + t2404) * pkin(2) - t2367;
t2291 = t2415 * t2324 + t2411 * t2420;
t2347 = pkin(3) * t2376 - qJ(4) * t2378;
t2256 = -pkin(3) * t2460 - t2433 * qJ(4) + 0.2e1 * qJD(4) * t2402 - t2376 * t2347 + t2291;
t2435 = -pkin(4) * t2402 - pkin(9) * t2378;
t2252 = -pkin(4) * t2462 - pkin(9) * t2434 + t2402 * t2435 + t2256;
t2290 = -t2411 * t2324 + t2415 * t2420;
t2258 = t2433 * pkin(3) - qJ(4) * t2460 + t2378 * t2347 + qJDD(4) - t2290;
t2419 = ((qJD(3) - t2402) * t2376 + t2432) * pkin(9) + t2334 * pkin(4) + t2258;
t2224 = t2414 * t2252 + t2410 * t2419;
t2406 = t2412 ^ 2;
t2407 = t2416 ^ 2;
t2440 = t2406 + t2407;
t2223 = -t2252 * t2410 + t2414 * t2419;
t2323 = t2458 - qJDD(2) * pkin(2) - t2463 * pkin(8) + (qJD(1) * t2379 + t2368) * t2412;
t2257 = -t2434 * pkin(3) + (pkin(3) * t2402 - 0.2e1 * qJD(4)) * t2378 + t2323 - t2427 * qJ(4);
t2253 = -pkin(4) * t2434 + pkin(9) * t2462 - t2378 * t2435 + t2257;
t2401 = t2416 * t2418 * t2412;
t2397 = -t2407 * t2418 - t2463;
t2396 = -t2406 * t2418 - t2463;
t2389 = -qJDD(2) + t2401;
t2388 = qJDD(2) + t2401;
t2386 = t2440 * t2418;
t2385 = -qJDD(1) * t2413 - t2417 * t2418;
t2384 = qJDD(1) * t2417 - t2413 * t2418;
t2383 = t2440 * qJDD(1);
t2382 = -0.2e1 * t2404 + t2438;
t2380 = 0.2e1 * t2437 + t2439;
t2355 = -t2412 * t2368 - t2458;
t2354 = t2389 * t2416 - t2396 * t2412;
t2353 = -t2388 * t2412 + t2397 * t2416;
t2352 = t2389 * t2412 + t2396 * t2416;
t2351 = t2388 * t2416 + t2397 * t2412;
t2319 = -t2355 * t2412 + t2356 * t2416;
t2318 = t2355 * t2416 + t2356 * t2412;
t2307 = pkin(5) * t2344 - qJ(6) * t2346;
t2255 = -t2290 * t2411 + t2291 * t2415;
t2254 = t2290 * t2415 + t2291 * t2411;
t2250 = t2255 * t2416 + t2323 * t2412;
t2249 = t2255 * t2412 - t2323 * t2416;
t2234 = t2256 * t2415 + t2258 * t2411;
t2233 = t2256 * t2411 - t2258 * t2415;
t2222 = t2234 * t2416 + t2257 * t2412;
t2221 = t2234 * t2412 - t2257 * t2416;
t2220 = (t2344 * t2441 + t2423) * qJ(6) + t2346 * t2459 + t2253 - t2267 * pkin(5);
t2215 = -pkin(5) * t2431 - qJ(6) * t2461 + t2307 * t2346 + qJDD(6) - t2223;
t2214 = -pkin(5) * t2461 + qJ(6) * t2431 - t2344 * t2307 + t2395 * t2459 + t2224;
t2209 = -t2223 * t2410 + t2224 * t2414;
t2208 = t2223 * t2414 + t2224 * t2410;
t2207 = t2214 * t2414 + t2215 * t2410;
t2206 = t2214 * t2410 - t2215 * t2414;
t2205 = t2208 * t2411 + t2209 * t2415;
t2204 = -t2208 * t2415 + t2209 * t2411;
t2203 = t2205 * t2416 + t2253 * t2412;
t2202 = t2205 * t2412 - t2253 * t2416;
t2201 = t2206 * t2411 + t2207 * t2415;
t2200 = -t2206 * t2415 + t2207 * t2411;
t2199 = t2201 * t2416 + t2220 * t2412;
t2198 = t2201 * t2412 - t2220 * t2416;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2385, -t2384, 0, -t2391 * t2413 + t2392 * t2417, 0, 0, 0, 0, 0, 0, t2353 * t2417 - t2382 * t2413, t2354 * t2417 + t2380 * t2413, t2383 * t2417 - t2386 * t2413, t2319 * t2417 - t2367 * t2413, 0, 0, 0, 0, 0, 0, t2502, t2514, t2504, t2250 * t2417 + t2254 * t2413, 0, 0, 0, 0, 0, 0, t2502, t2504, -t2514, t2222 * t2417 + t2233 * t2413, 0, 0, 0, 0, 0, 0, t2520, -t2522, t2503, t2203 * t2417 + t2204 * t2413, 0, 0, 0, 0, 0, 0, t2520, t2503, t2522, t2199 * t2417 + t2200 * t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2384, t2385, 0, t2391 * t2417 + t2392 * t2413, 0, 0, 0, 0, 0, 0, t2353 * t2413 + t2382 * t2417, t2354 * t2413 - t2380 * t2417, t2383 * t2413 + t2386 * t2417, t2319 * t2413 + t2367 * t2417, 0, 0, 0, 0, 0, 0, t2505, t2515, t2507, t2250 * t2413 - t2254 * t2417, 0, 0, 0, 0, 0, 0, t2505, t2507, -t2515, t2222 * t2413 - t2233 * t2417, 0, 0, 0, 0, 0, 0, t2521, -t2523, t2506, t2203 * t2413 - t2204 * t2417, 0, 0, 0, 0, 0, 0, t2521, t2506, t2523, t2199 * t2413 - t2200 * t2417; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2351, t2352, 0, t2318, 0, 0, 0, 0, 0, 0, t2494, t2282, t2495, t2249, 0, 0, 0, 0, 0, 0, t2494, t2495, -t2282, t2221, 0, 0, 0, 0, 0, 0, t2516, -t2225, t2492, t2202, 0, 0, 0, 0, 0, 0, t2516, t2492, t2225, t2198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2418, -qJDD(1), 0, t2392, 0, 0, 0, 0, 0, 0, t2353, t2354, t2383, t2319, 0, 0, 0, 0, 0, 0, t2493, t2284, t2496, t2250, 0, 0, 0, 0, 0, 0, t2493, t2496, -t2284, t2222, 0, 0, 0, 0, 0, 0, t2517, -t2227, t2491, t2203, 0, 0, 0, 0, 0, 0, t2517, t2491, t2227, t2199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2418, 0, t2391, 0, 0, 0, 0, 0, 0, t2382, -t2380, t2386, t2367, 0, 0, 0, 0, 0, 0, -t2483, -t2303, -t2466, -t2254, 0, 0, 0, 0, 0, 0, -t2483, -t2466, t2303, -t2233, 0, 0, 0, 0, 0, 0, -t2489, -t2243, -t2479, -t2204, 0, 0, 0, 0, 0, 0, -t2489, -t2479, t2243, -t2200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2351, t2352, 0, t2318, 0, 0, 0, 0, 0, 0, t2494, t2282, t2495, t2249, 0, 0, 0, 0, 0, 0, t2494, t2495, -t2282, t2221, 0, 0, 0, 0, 0, 0, t2516, -t2225, t2492, t2202, 0, 0, 0, 0, 0, 0, t2516, t2492, t2225, t2198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2397, t2389, t2438, t2356, 0, 0, 0, 0, 0, 0, t2481, t2305, t2464, t2255, 0, 0, 0, 0, 0, 0, t2481, t2464, -t2305, t2234, 0, 0, 0, 0, 0, 0, t2490, -t2237, t2480, t2205, 0, 0, 0, 0, 0, 0, t2490, t2480, t2237, t2201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2388, t2396, -t2439, t2355, 0, 0, 0, 0, 0, 0, -t2430, -t2427, t2331, -t2323, 0, 0, 0, 0, 0, 0, -t2430, t2331, t2427, -t2257, 0, 0, 0, 0, 0, 0, t2267, t2421, -t2293, -t2253, 0, 0, 0, 0, 0, 0, t2267, -t2293, -t2421, -t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2382, t2380, -t2386, -t2367, 0, 0, 0, 0, 0, 0, t2483, t2303, t2466, t2254, 0, 0, 0, 0, 0, 0, t2483, t2466, -t2303, t2233, 0, 0, 0, 0, 0, 0, t2489, t2243, t2479, t2204, 0, 0, 0, 0, 0, 0, t2489, t2479, -t2243, t2200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2469, t2333, t2429, t2291, 0, 0, 0, 0, 0, 0, t2469, t2429, -t2333, t2256, 0, 0, 0, 0, 0, 0, t2482, -t2265, t2465, t2209, 0, 0, 0, 0, 0, 0, t2482, t2465, t2265, t2207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2334, t2471, -t2317, t2290, 0, 0, 0, 0, 0, 0, -t2334, -t2317, -t2471, -t2258, 0, 0, 0, 0, 0, 0, -t2484, t2263, -t2467, -t2208, 0, 0, 0, 0, 0, 0, -t2484, -t2467, -t2263, -t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2430, t2427, -t2331, t2323, 0, 0, 0, 0, 0, 0, t2430, -t2331, -t2427, t2257, 0, 0, 0, 0, 0, 0, -t2267, -t2421, t2293, t2253, 0, 0, 0, 0, 0, 0, -t2267, t2293, t2421, t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2469, t2429, -t2333, t2256, 0, 0, 0, 0, 0, 0, t2482, -t2265, t2465, t2209, 0, 0, 0, 0, 0, 0, t2482, t2465, t2265, t2207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2430, -t2331, -t2427, t2257, 0, 0, 0, 0, 0, 0, -t2267, -t2421, t2293, t2253, 0, 0, 0, 0, 0, 0, -t2267, t2293, t2421, t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2334, t2317, t2471, t2258, 0, 0, 0, 0, 0, 0, t2484, -t2263, t2467, t2208, 0, 0, 0, 0, 0, 0, t2484, t2467, t2263, t2206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2468, -t2294, t2424, t2224, 0, 0, 0, 0, 0, 0, t2468, t2424, t2294, t2214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2295, t2472, -t2271, t2223, 0, 0, 0, 0, 0, 0, t2295, -t2271, -t2472, -t2215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, t2421, -t2293, -t2253, 0, 0, 0, 0, 0, 0, t2267, -t2293, -t2421, -t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2468, t2424, t2294, t2214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2267, -t2293, -t2421, -t2220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2295, t2271, t2472, t2215;];
f_new_reg  = t1;
