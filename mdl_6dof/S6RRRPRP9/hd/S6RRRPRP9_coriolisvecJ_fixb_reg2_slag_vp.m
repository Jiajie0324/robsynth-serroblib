% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRPRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRP9_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP9_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP9_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP9_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:27:15
% EndTime: 2019-03-09 17:27:33
% DurationCPUTime: 7.36s
% Computational Cost: add. (8366->590), mult. (19385->715), div. (0->0), fcn. (12523->6), ass. (0->276)
t235 = sin(qJ(2));
t237 = cos(qJ(2));
t180 = -pkin(2) * t237 - pkin(8) * t235 - pkin(1);
t151 = t180 * qJD(1);
t341 = qJD(1) * t237;
t221 = pkin(7) * t341;
t189 = qJD(2) * pkin(8) + t221;
t234 = sin(qJ(3));
t236 = cos(qJ(3));
t103 = t236 * t151 - t234 * t189;
t330 = qJD(4) - t103;
t342 = qJD(1) * t235;
t316 = t234 * t342;
t331 = t236 * qJD(2);
t164 = t316 - t331;
t314 = t236 * t342;
t338 = qJD(2) * t234;
t166 = t314 + t338;
t233 = sin(qJ(5));
t393 = cos(qJ(5));
t100 = t233 * t164 + t166 * t393;
t209 = -qJD(3) + t341;
t198 = qJD(5) + t209;
t329 = qJD(1) * qJD(2);
t301 = t237 * t329;
t334 = qJD(3) * t235;
t310 = t234 * t334;
t328 = qJD(2) * qJD(3);
t122 = qJD(1) * t310 + (-t301 - t328) * t236;
t333 = qJD(3) * t236;
t336 = qJD(2) * t237;
t255 = t234 * t336 + t235 * t333;
t123 = qJD(1) * t255 + t234 * t328;
t39 = qJD(5) * t100 - t233 * t122 - t393 * t123;
t427 = t100 * t198 - t39;
t421 = -t166 * pkin(9) + t330;
t262 = -t164 * t393 + t233 * t166;
t398 = t100 ^ 2;
t278 = t262 ^ 2 - t398;
t363 = t166 * t209;
t366 = t164 * t209;
t426 = t234 * (t123 - t363) + t236 * (t122 - t366);
t220 = pkin(7) * t342;
t232 = qJD(2) * pkin(2);
t188 = t220 - t232;
t92 = t164 * pkin(3) - t166 * qJ(4) + t188;
t74 = -pkin(4) * t164 - t92;
t21 = pkin(5) * t262 - qJ(6) * t100 + t74;
t382 = t100 * t21;
t425 = t100 * t74;
t422 = t100 * t262;
t168 = t233 * t234 + t236 * t393;
t303 = qJD(3) * t393;
t285 = t236 * t303;
t335 = qJD(3) * t234;
t106 = t168 * qJD(5) - t233 * t335 - t285;
t252 = t237 * t168;
t350 = qJD(1) * t252 + t106;
t302 = qJD(5) * t393;
t305 = t233 * t333;
t332 = qJD(5) * t233;
t107 = -t236 * t332 + t305 + (t302 - t303) * t234;
t317 = t393 * t234;
t288 = t237 * t317;
t313 = t236 * t341;
t349 = qJD(1) * t288 - t233 * t313 + t107;
t253 = t393 * t209 + t302;
t418 = t234 * qJD(4) + t221 + (-t313 + t333) * qJ(4);
t55 = pkin(5) * t100 + qJ(6) * t262;
t367 = t123 * t236;
t368 = t122 * t234;
t417 = t235 * ((t164 * t234 - t166 * t236) * qJD(3) - t367 + t368) - (t164 * t236 + t166 * t234) * t336;
t292 = t164 + t331;
t359 = t234 * t237;
t416 = qJD(1) * (-t209 * t359 + t235 * t292) + t209 * t335;
t230 = t235 ^ 2;
t268 = qJD(1) * t230 - t209 * t237;
t309 = t209 * t333;
t415 = qJD(2) * (t164 * t235 + t234 * t268) - t237 * t123 - t235 * t309;
t413 = -0.2e1 * t329;
t394 = pkin(8) - pkin(9);
t190 = t394 * t234;
t191 = t394 * t236;
t119 = t233 * t190 + t191 * t393;
t176 = t394 * t335;
t392 = pkin(7) * t234;
t319 = -pkin(3) - t392;
t356 = t236 * t237;
t249 = -pkin(9) * t356 + (-pkin(4) + t319) * t235;
t280 = pkin(2) * t235 - pkin(8) * t237;
t175 = t280 * qJD(1);
t357 = t236 * t175;
t84 = qJD(1) * t249 - t357;
t149 = t234 * t175;
t215 = qJ(4) * t342;
t358 = t235 * t236;
t91 = t149 + t215 + (-pkin(7) * t358 + pkin(9) * t359) * qJD(1);
t385 = qJD(5) * t119 - t285 * t394 + t393 * t84 + (-t176 - t91) * t233;
t104 = t234 * t151 + t189 * t236;
t254 = pkin(9) * t164 + t104;
t395 = pkin(3) + pkin(4);
t372 = -qJ(4) * t332 - t233 * t254 - t302 * t395 + t393 * t421;
t213 = t235 * t329;
t290 = pkin(3) * t213;
t174 = t280 * qJD(2);
t153 = qJD(1) * t174;
t289 = pkin(7) * t213;
t64 = -t151 * t335 + t236 * t153 - t189 * t333 + t234 * t289;
t56 = -t64 - t290;
t194 = t209 * qJ(4);
t89 = t104 - t194;
t412 = t209 * t89 + t56;
t259 = -t104 * t209 + t64;
t315 = t234 * t341;
t323 = t395 * t234;
t351 = -qJD(3) * t323 + t315 * t395 + t418;
t408 = t123 + t363;
t178 = t393 * qJ(4) - t233 * t395;
t38 = t393 * t122 - t233 * t123 - t164 * t302 + t166 * t332;
t17 = t198 * t262 - t38;
t192 = t209 * qJD(4);
t200 = qJ(4) * t213;
t246 = -t151 * t333 - t234 * t153 + t189 * t335 + t236 * t289;
t45 = -t192 + t200 - t246;
t28 = pkin(9) * t123 + t45;
t29 = t122 * pkin(9) - t213 * t395 - t64;
t61 = t209 * t395 + t421;
t72 = -t194 + t254;
t298 = -t233 * t29 - t393 * t28 - t61 * t302 + t72 * t332;
t407 = -t21 * t262 - t298;
t406 = t262 * t74 + t298;
t405 = t166 * t100 + t198 * t253 - t213 * t233;
t143 = t233 * t358 - t235 * t317;
t337 = qJD(2) * t235;
t312 = t237 * t331;
t65 = -qJD(2) * t288 + t106 * t235 + t233 * t312;
t402 = -t198 * t65 - t237 * t39 + (qJD(1) * t143 + t262) * t337;
t212 = pkin(7) * t356;
t131 = t234 * t180 + t212;
t120 = -qJ(4) * t237 + t131;
t360 = t234 * t235;
t102 = pkin(9) * t360 + t120;
t211 = pkin(7) * t359;
t229 = t237 * pkin(3);
t94 = t237 * pkin(4) + t211 + t229 + (-pkin(9) * t235 - t180) * t236;
t383 = t393 * t102 + t233 * t94;
t279 = qJD(3) * t212 - t236 * t174 + t180 * t335;
t51 = pkin(9) * t310 + qJD(2) * t249 + t279;
t217 = qJ(4) * t337;
t347 = t234 * t174 + t180 * t333;
t53 = t217 + (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t358 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t234) * t237 + t347;
t9 = -qJD(5) * t383 - t233 * t53 + t393 * t51;
t400 = t198 * t349 - (qJD(2) * t168 - t262) * t342;
t169 = -t233 * t236 + t317;
t399 = t100 * t349 - t38 * t168 + t169 * t39 - t262 * t350;
t397 = t166 ^ 2;
t396 = t198 ^ 2;
t391 = pkin(8) * t166;
t390 = pkin(8) * t209;
t388 = pkin(5) * t349 + qJ(6) * t350 - t169 * qJD(6) + t351;
t41 = t233 * t84 + t393 * t91;
t34 = -qJ(6) * t342 + t41;
t261 = t190 * t393 - t233 * t191;
t69 = qJD(5) * t261 - t176 * t393 + t305 * t394;
t387 = -t34 + t69;
t386 = pkin(5) * t342 - t385;
t384 = t41 - t69;
t379 = t166 * t92;
t18 = -t233 * t72 + t393 * t61;
t378 = t18 * t198;
t52 = t123 * pkin(3) + pkin(7) * t301 + t122 * qJ(4) - t166 * qJD(4);
t375 = t234 * t52;
t374 = t236 * t52;
t373 = -qJD(6) + t372;
t371 = t178 * qJD(5) + t233 * t421 + t393 * t254;
t364 = t166 * t164;
t362 = t188 * t234;
t361 = t188 * t236;
t225 = t234 * qJ(4);
t240 = qJD(1) ^ 2;
t355 = t237 * t240;
t239 = qJD(2) ^ 2;
t354 = t239 * t235;
t353 = t239 * t237;
t352 = qJD(6) - t18;
t348 = (t315 - t335) * pkin(3) + t418;
t110 = t166 * pkin(3) + t164 * qJ(4);
t346 = qJ(4) * t312 + qJD(4) * t358;
t343 = -t237 ^ 2 + t230;
t340 = qJD(2) * t261;
t339 = qJD(2) * t119;
t327 = t234 * t390;
t326 = t236 * t390;
t179 = -t236 * pkin(3) - pkin(2) - t225;
t325 = pkin(8) * t331;
t324 = pkin(7) * t336;
t321 = t235 * t355;
t307 = t209 * t342;
t304 = t164 ^ 2 - t397;
t299 = t371 * t100;
t297 = t233 * t28 - t393 * t29 + t72 * t302 + t61 * t332;
t296 = pkin(1) * t413;
t130 = t180 * t236 - t211;
t158 = t236 * pkin(4) - t179;
t291 = -t166 + t338;
t287 = -t119 * t39 + t261 * t38 - t262 * t69;
t284 = qJ(6) * t213;
t283 = t237 * t213;
t282 = -pkin(7) - t323;
t83 = -pkin(4) * t166 - t110;
t208 = pkin(5) * t213;
t2 = t208 + t297;
t281 = t319 * t235;
t277 = t143 * t39 + t262 * t65;
t87 = pkin(3) * t209 + t330;
t274 = -t234 * t89 + t236 * t87;
t273 = (qJD(3) * t164 - t122) * pkin(8);
t272 = -t103 * t236 - t104 * t234;
t125 = -pkin(7) * t314 + t149;
t19 = t233 * t61 + t393 * t72;
t265 = t19 * t198 - t297;
t49 = -t233 * t102 + t393 * t94;
t177 = -t233 * qJ(4) - t393 * t395;
t8 = -t102 * t332 + t233 * t51 + t94 * t302 + t393 * t53;
t260 = t39 * t168 + t262 * t349;
t206 = qJ(4) * t358;
t117 = t235 * t282 + t206;
t257 = -t198 * t371 + t297;
t248 = -t234 * t366 - t367;
t144 = t168 * t235;
t66 = qJD(2) * t252 + t107 * t235;
t247 = t100 * t65 - t143 * t38 + t144 * t39 + t262 * t66;
t31 = -pkin(4) * t123 - t52;
t78 = (-t235 * t331 - t237 * t335) * pkin(7) + t347;
t244 = t123 * t360 + t164 * t255;
t243 = -t166 * t262 - t213 * t393 - t233 * t396;
t242 = -t103 * t209 + t246;
t241 = t233 * t427 - t253 * t262 + t38 * t393;
t62 = (-t236 * t395 - t225) * t334 + t282 * t336 + t346;
t173 = pkin(5) - t177;
t172 = -qJ(6) + t178;
t163 = t198 * t342;
t137 = -t206 + (pkin(3) * t234 + pkin(7)) * t235;
t129 = (-t209 - t341) * t337;
t128 = (-t198 - t341) * t337;
t124 = pkin(7) * t316 + t357;
t121 = -t130 + t229;
t111 = pkin(8) * t367;
t109 = qJD(1) * t281 - t357;
t108 = t125 + t215;
t85 = pkin(5) * t168 - qJ(6) * t169 + t158;
t82 = -t122 - t366;
t79 = t337 * t392 - t279;
t77 = pkin(3) * t255 + qJ(4) * t310 + t324 - t346;
t75 = -t309 + (t209 * t356 + t235 * t291) * qJD(1);
t73 = qJD(2) * t281 + t279;
t71 = -t237 * qJD(4) + t217 + t78;
t60 = t143 * pkin(5) - t144 * qJ(6) + t117;
t59 = -t236 * t363 - t368;
t54 = -t122 * t358 + (-t310 + t312) * t166;
t44 = -t237 * pkin(5) - t49;
t43 = qJ(6) * t237 + t383;
t42 = t209 * t310 + t122 * t237 + (t166 * t235 + t236 * t268) * qJD(2);
t23 = -t55 + t83;
t20 = -t350 * t198 + (-qJD(2) * t169 + t100) * t342;
t15 = t198 * qJ(6) + t19;
t14 = -t198 * pkin(5) + t352;
t13 = t100 * t66 - t144 * t38;
t12 = pkin(5) * t65 - qJ(6) * t66 - qJD(6) * t144 + t62;
t11 = -t100 * t350 - t38 * t169;
t10 = t66 * t198 - t38 * t237 + (-qJD(1) * t144 - t100) * t337;
t7 = pkin(5) * t337 - t9;
t6 = -qJ(6) * t337 + qJD(6) * t237 + t8;
t5 = pkin(5) * t39 + qJ(6) * t38 - qJD(6) * t100 + t31;
t1 = qJD(6) * t198 - t284 - t298;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t283, t343 * t413, t353, -0.2e1 * t283, -t354, 0, -pkin(7) * t353 + t235 * t296, pkin(7) * t354 + t237 * t296, 0, 0, t54, t417, t42, t244, -t415, t129, -t209 * t79 - t64 * t237 + (pkin(7) * t123 + t188 * t333) * t235 + ((pkin(7) * t164 + t362) * t237 + (t103 + (t130 + t211) * qJD(1)) * t235) * qJD(2), t209 * t78 - t237 * t246 + (-pkin(7) * t122 - t188 * t335) * t235 + ((pkin(7) * t166 + t361) * t237 + (-t104 + (-t131 + t212) * qJD(1)) * t235) * qJD(2), t122 * t130 - t123 * t131 - t164 * t78 - t166 * t79 + t272 * t336 + (t234 * t246 - t236 * t64 + (t103 * t234 - t104 * t236) * qJD(3)) * t235, t103 * t79 + t104 * t78 + t64 * t130 - t246 * t131 + (t188 + t220) * t324, t54, t42, -t417, t129, t415, t244, t123 * t137 + t164 * t77 + t209 * t73 + (t338 * t92 + t56) * t237 + (t92 * t333 + t375 + (-qJD(1) * t121 - t87) * qJD(2)) * t235, -t120 * t123 - t121 * t122 - t164 * t71 + t166 * t73 + t274 * t336 + (-t234 * t45 + t236 * t56 + (-t234 * t87 - t236 * t89) * qJD(3)) * t235, t122 * t137 - t166 * t77 - t209 * t71 + (-t331 * t92 - t45) * t237 + (t92 * t335 - t374 + (qJD(1) * t120 + t89) * qJD(2)) * t235, t120 * t45 + t121 * t56 + t137 * t52 + t71 * t89 + t73 * t87 + t77 * t92, t13, -t247, t10, t277, t402, t128, t117 * t39 + t31 * t143 + t9 * t198 - t297 * t237 + t62 * t262 + t74 * t65 + (-qJD(1) * t49 - t18) * t337, t62 * t100 - t117 * t38 + t31 * t144 - t8 * t198 + t298 * t237 + t74 * t66 + (qJD(1) * t383 + t19) * t337, -t100 * t9 + t143 * t298 + t144 * t297 - t18 * t66 - t19 * t65 - t262 * t8 + t38 * t49 - t383 * t39, t117 * t31 + t18 * t9 + t19 * t8 - t297 * t49 - t298 * t383 + t62 * t74, t13, t10, t247, t128, -t402, t277, t12 * t262 + t5 * t143 - t7 * t198 - t2 * t237 + t21 * t65 + t60 * t39 + (qJD(1) * t44 + t14) * t337, -t1 * t143 + t100 * t7 + t14 * t66 + t144 * t2 - t15 * t65 - t262 * t6 - t38 * t44 - t39 * t43, t1 * t237 - t12 * t100 - t5 * t144 + t6 * t198 - t21 * t66 + t60 * t38 + (-qJD(1) * t43 - t15) * t337, t1 * t43 + t12 * t21 + t14 * t7 + t15 * t6 + t2 * t44 + t5 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t321, t343 * t240, 0, t321, 0, 0, t240 * pkin(1) * t235, pkin(1) * t355, 0, 0, t59, -t426, t75, t248, t416, t307, -pkin(2) * t123 + t124 * t209 + (t326 + t362) * qJD(3) + ((-pkin(8) * t338 - t103) * t235 + (-pkin(7) * t292 - t362) * t237) * qJD(1), pkin(2) * t122 - t125 * t209 + (-t327 + t361) * qJD(3) + ((t104 - t325) * t235 + (pkin(7) * t291 - t361) * t237) * qJD(1), t124 * t166 + t125 * t164 - t111 + (t103 * t341 - t246 + (-t103 + t391) * qJD(3)) * t236 + (t273 - t259) * t234, -t103 * t124 - t104 * t125 + (-t188 - t232) * t221 + (qJD(3) * t272 - t64 * t234 - t236 * t246) * pkin(8), t59, t75, t426, t307, -t416, t248, -t109 * t209 + t123 * t179 - t374 - t348 * t164 + (t234 * t92 + t326) * qJD(3) + (t235 * t87 + (-pkin(8) * t337 - t237 * t92) * t234) * qJD(1), t108 * t164 - t109 * t166 - t111 + (-t87 * t341 + t45 + (t87 + t391) * qJD(3)) * t236 + (t273 + t412) * t234, t108 * t209 + t122 * t179 - t375 + t348 * t166 + (-t236 * t92 + t327) * qJD(3) + (t92 * t356 + (-t89 + t325) * t235) * qJD(1), -t89 * t108 - t87 * t109 + t52 * t179 - t348 * t92 + (qJD(3) * t274 + t56 * t234 + t45 * t236) * pkin(8), t11, -t399, t20, t260, -t400, t163, t158 * t39 + t168 * t31 + t351 * t262 + t349 * t74 - t385 * t198 + (t18 - t340) * t342, -t158 * t38 + t169 * t31 - t350 * t74 + t384 * t198 + t351 * t100 + (-t19 + t339) * t342, t100 * t385 + t168 * t298 + t169 * t297 + t18 * t350 - t19 * t349 + t262 * t41 + t287, -t119 * t298 + t31 * t158 - t18 * t385 - t19 * t384 - t261 * t297 + t351 * t74, t11, t20, t399, t163, t400, t260, t168 * t5 + t39 * t85 + t388 * t262 + t349 * t21 + t386 * t198 + (-t14 - t340) * t342, -t1 * t168 - t100 * t386 - t14 * t350 - t15 * t349 + t169 * t2 + t262 * t34 + t287, -t169 * t5 + t38 * t85 + t350 * t21 + t387 * t198 - t388 * t100 + (t15 - t339) * t342, t1 * t119 - t14 * t386 + t15 * t387 - t2 * t261 + t21 * t388 + t5 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, -t304, t82, -t364, -t408, t213, -t166 * t188 + t259, t164 * t188 + t242, 0, 0, t364, t82, t304, t213, t408, -t364, -t110 * t164 + t259 + 0.2e1 * t290 - t379, pkin(3) * t122 - t123 * qJ(4) + (-t104 + t89) * t166 + (t87 - t330) * t164, t110 * t166 - t164 * t92 - 0.2e1 * t192 + 0.2e1 * t200 - t242, -t56 * pkin(3) + t45 * qJ(4) - t87 * t104 - t92 * t110 + t330 * t89, -t422, t278, -t17, t422, -t427, t213, -t177 * t213 - t262 * t83 + t257 + t425, -t83 * t100 + t178 * t213 - t198 * t372 - t406, t177 * t38 - t178 * t39 - t19 * t100 + t299 + (t18 - t372) * t262, -t177 * t297 - t178 * t298 - t18 * t371 + t19 * t372 - t74 * t83, -t422, -t17, -t278, t213, t427, t422, t173 * t213 - t23 * t262 + t208 + t257 + t382, -t15 * t100 - t172 * t39 - t173 * t38 + t299 + (-t14 - t373) * t262, t100 * t23 + (qJ(6) - t172) * t213 + (-qJD(6) + t373) * t198 - t407, t1 * t172 + t14 * t371 + t15 * t373 + t2 * t173 - t21 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t213 + t364, t82, -t209 ^ 2 - t397, t379 + t412, 0, 0, 0, 0, 0, 0, t243, -t405, t241, -t297 * t393 - t74 * t166 + t253 * t19 + (-t298 - t378) * t233, 0, 0, 0, 0, 0, 0, t243, t241, t405, -t2 * t393 - t21 * t166 + t253 * t15 + (t14 * t198 + t1) * t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t422, -t278, t17, -t422, t427, -t213, t265 - t425, t378 + t406, 0, 0, t422, t17, t278, -t213, -t427, -t422, -t262 * t55 - 0.2e1 * t208 + t265 - t382, pkin(5) * t38 - t39 * qJ(6) + (t15 - t19) * t100 + (t14 - t352) * t262, -0.2e1 * t284 + t55 * t100 + (0.2e1 * qJD(6) - t18) * t198 + t407, -t2 * pkin(5) + t1 * qJ(6) - t14 * t19 + t15 * t352 - t21 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213 + t422, t17, -t396 - t398, -t15 * t198 + t2 + t382;];
tauc_reg  = t3;
