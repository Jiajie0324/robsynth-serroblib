% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP9_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP9_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP9_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP9_inertiaDJ_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 17:27:15
% EndTime: 2019-03-09 17:27:23
% DurationCPUTime: 2.56s
% Computational Cost: add. (2679->308), mult. (6166->518), div. (0->0), fcn. (4912->6), ass. (0->144)
t112 = sin(qJ(3));
t114 = cos(qJ(3));
t190 = cos(qJ(5));
t145 = qJD(3) * t190;
t111 = sin(qJ(5));
t167 = t111 * qJD(3);
t198 = t112 * t145 - t114 * t167;
t115 = cos(qJ(2));
t171 = qJD(3) * t115;
t153 = t114 * t171;
t113 = sin(qJ(2));
t97 = t113 * qJD(2);
t197 = t112 * t97 - t153;
t102 = t112 * qJ(4);
t196 = -t114 * pkin(3) - t102;
t109 = t114 ^ 2;
t176 = t112 ^ 2 - t109;
t141 = t176 * qJD(3);
t100 = qJD(5) * t190;
t99 = qJD(5) * t111;
t35 = t100 * t112 - t114 * t99 - t198;
t135 = t114 * t145;
t180 = t111 * t112;
t63 = t114 * t190 + t180;
t34 = t63 * qJD(5) - t112 * t167 - t135;
t154 = t112 * t171;
t122 = t114 * t97 + t154;
t101 = qJD(3) * t114;
t189 = pkin(8) * t115;
t132 = pkin(2) * t113 - t189;
t67 = t132 * qJD(2);
t187 = t113 * pkin(8);
t133 = -pkin(2) * t115 - t187;
t69 = -pkin(1) + t133;
t185 = t69 * t101 + t112 * t67;
t24 = pkin(7) * t122 - t185;
t178 = t113 * t114;
t87 = qJ(4) * t178;
t44 = -t87 + (pkin(3) * t112 + pkin(7)) * t113;
t173 = qJD(3) * t112;
t182 = qJ(4) * t101 + t112 * qJD(4);
t49 = pkin(3) * t173 - t182;
t68 = -pkin(2) + t196;
t195 = qJD(2) * (-t115 * t68 + t187) - qJD(3) * t44 - t113 * t49;
t194 = 0.2e1 * qJD(4);
t193 = 2 * qJD(6);
t192 = -pkin(3) - pkin(4);
t191 = pkin(8) - pkin(9);
t188 = pkin(9) * t113;
t106 = t115 * pkin(3);
t179 = t112 * t115;
t89 = pkin(7) * t179;
t31 = pkin(4) * t115 + t106 + t89 + (-t69 - t188) * t114;
t177 = t114 * t115;
t90 = pkin(7) * t177;
t183 = t112 * t69 + t90;
t39 = -qJ(4) * t115 + t183;
t33 = t112 * t188 + t39;
t186 = t111 * t31 + t190 * t33;
t166 = t115 * qJD(2);
t156 = t114 * t166;
t170 = qJD(4) * t114;
t184 = qJ(4) * t156 + t113 * t170;
t181 = t190 * qJ(4) + t111 * t192;
t108 = t113 ^ 2;
t175 = -t115 ^ 2 + t108;
t174 = qJD(2) * t114;
t172 = qJD(3) * t113;
t169 = qJD(4) * t115;
t168 = qJD(6) * t115;
t165 = -0.2e1 * pkin(1) * qJD(2);
t164 = -0.2e1 * pkin(2) * qJD(3);
t163 = pkin(3) * t97;
t162 = pkin(8) * t173;
t161 = pkin(8) * t101;
t160 = pkin(7) * t166;
t159 = t192 * t112;
t158 = t190 * t112;
t157 = qJ(6) * t97;
t155 = t112 * t172;
t148 = t112 * t101;
t147 = t113 * t166;
t146 = qJD(2) * t190;
t144 = t114 * t69 - t89;
t142 = -t197 * pkin(7) - t114 * t67 + t69 * t173;
t13 = pkin(9) * t155 + (-pkin(9) * t177 + t192 * t113) * qJD(2) + t142;
t92 = qJ(4) * t97;
t14 = t92 + (-pkin(7) * qJD(2) + pkin(9) * qJD(3)) * t178 + (-qJD(4) + (-pkin(7) * qJD(3) + pkin(9) * qJD(2)) * t112) * t115 + t185;
t143 = t33 * t100 + t111 * t14 - t190 * t13 + t31 * t99;
t140 = t175 * qJD(2);
t139 = 0.2e1 * t147;
t60 = t114 * pkin(4) - t68;
t138 = t190 * t192;
t137 = t112 * t147;
t134 = -pkin(7) + t159;
t40 = t106 - t144;
t130 = -t112 * t39 + t114 * t40;
t128 = t191 * t158;
t45 = qJ(4) * t99 - t190 * qJD(4) - qJD(5) * t138;
t46 = t111 * qJD(4) + qJD(5) * t181;
t127 = -t46 * t115 + t143;
t126 = -t111 * t33 + t190 * t31;
t75 = t191 * t114;
t19 = -qJD(5) * t128 + t198 * t191 + t75 * t99;
t38 = t180 * t191 + t190 * t75;
t125 = -t115 * t19 - t38 * t97;
t20 = t75 * t100 + (-t135 + (-qJD(3) + qJD(5)) * t180) * t191;
t37 = t111 * t75 - t128;
t124 = -t115 * t20 + t37 * t97;
t3 = -t31 * t100 - t111 * t13 - t190 * t14 + t33 * t99;
t41 = qJD(3) * t159 + t182;
t36 = t113 * t134 + t87;
t123 = -t111 * qJ(4) + t138;
t121 = t101 * t113 + t166 * t112;
t118 = t196 * qJD(3) + t170;
t21 = -t24 + t92 - t169;
t22 = t142 - t163;
t116 = qJD(3) * t130 + t112 * t22 + t114 * t21;
t16 = (t114 * t192 - t102) * t172 + t134 * t166 + t184;
t95 = pkin(5) * t97;
t81 = -0.2e1 * t147;
t80 = pkin(8) * t153;
t66 = pkin(5) - t123;
t65 = -qJ(6) + t181;
t64 = -t111 * t114 + t158;
t52 = -t155 + t156;
t51 = t100 * t115 - t111 * t97;
t50 = -t113 * t146 - t115 * t99;
t48 = t63 * t113;
t47 = t111 * t178 - t113 * t158;
t43 = qJD(6) + t45;
t42 = 0.2e1 * t46;
t26 = pkin(5) * t63 - qJ(6) * t64 + t60;
t23 = pkin(3) * t121 + qJ(4) * t155 + t160 - t184;
t18 = t35 * t113 + t166 * t63;
t17 = t111 * t156 + t34 * t113 - t146 * t179;
t15 = pkin(5) * t47 - qJ(6) * t48 + t36;
t8 = -t115 * pkin(5) - t126;
t7 = qJ(6) * t115 + t186;
t6 = pkin(5) * t35 + qJ(6) * t34 - qJD(6) * t64 + t41;
t5 = t17 * pkin(5) - t18 * qJ(6) - t48 * qJD(6) + t16;
t2 = t95 + t143;
t1 = -t157 - t3 + t168;
t4 = [0, 0, 0, t139, -0.2e1 * t140, 0, 0, 0, t113 * t165, t115 * t165, -0.2e1 * t108 * t148 + 0.2e1 * t109 * t147, 0.2e1 * t108 * t141 - 0.4e1 * t114 * t137, 0.2e1 * t113 * t154 + 0.2e1 * t174 * t175, -0.2e1 * t112 * t140 + 0.2e1 * t113 * t153, t81, 0.2e1 * t142 * t115 + 0.2e1 * t144 * t97 + 0.2e1 * (t101 * t108 + 0.2e1 * t137) * pkin(7), -0.2e1 * t24 * t115 - 0.2e1 * t183 * t97 + 0.2e1 * (-t108 * t173 + t114 * t139) * pkin(7), 0.2e1 * (qJD(2) * t112 * t44 + t22) * t115 + 0.2e1 * (-qJD(2) * t40 + t101 * t44 + t23 * t112) * t113, 0.2e1 * t130 * t166 + 0.2e1 * (-t112 * t21 + t114 * t22 + (-t112 * t40 - t114 * t39) * qJD(3)) * t113, 0.2e1 * (-t174 * t44 - t21) * t115 + 0.2e1 * (qJD(2) * t39 - t23 * t114 + t173 * t44) * t113, 0.2e1 * t21 * t39 + 0.2e1 * t22 * t40 + 0.2e1 * t23 * t44, 0.2e1 * t48 * t18, -0.2e1 * t17 * t48 - 0.2e1 * t18 * t47, 0.2e1 * t115 * t18 - 0.2e1 * t48 * t97, -0.2e1 * t115 * t17 + 0.2e1 * t47 * t97, t81, -0.2e1 * t115 * t143 - 0.2e1 * t126 * t97 + 0.2e1 * t16 * t47 + 0.2e1 * t36 * t17, 0.2e1 * t3 * t115 + 0.2e1 * t16 * t48 + 0.2e1 * t36 * t18 + 0.2e1 * t186 * t97, -0.2e1 * t115 * t2 + 0.2e1 * t15 * t17 + 0.2e1 * t5 * t47 + 0.2e1 * t8 * t97, -0.2e1 * t1 * t47 - 0.2e1 * t17 * t7 + 0.2e1 * t18 * t8 + 0.2e1 * t2 * t48, 0.2e1 * t1 * t115 - 0.2e1 * t15 * t18 - 0.2e1 * t5 * t48 - 0.2e1 * t7 * t97, 0.2e1 * t1 * t7 + 0.2e1 * t15 * t5 + 0.2e1 * t2 * t8; 0, 0, 0, 0, 0, t166, -t97, 0, -t160, pkin(7) * t97, t112 * t156 - t113 * t141, -0.4e1 * t113 * t148 - t166 * t176, t197, t122, 0, t80 + (-pkin(2) * t114 + pkin(7) * t112) * t172 + (t112 * t133 - t90) * qJD(2) (pkin(7) * t178 + t112 * t132) * qJD(3) + (t114 * t133 + t89) * qJD(2), t80 + (t172 * t68 - t23) * t114 - t195 * t112, t116 (-t23 + (t113 * t68 + t189) * qJD(3)) * t112 + t195 * t114, pkin(8) * t116 + t23 * t68 + t44 * t49, t18 * t64 - t34 * t48, -t17 * t64 - t18 * t63 + t34 * t47 - t35 * t48, -t115 * t34 - t64 * t97, -t115 * t35 + t63 * t97, 0, t16 * t63 + t60 * t17 + t36 * t35 + t41 * t47 + t124, t16 * t64 + t60 * t18 - t36 * t34 + t41 * t48 - t125, t15 * t35 + t26 * t17 + t6 * t47 + t5 * t63 + t124, -t1 * t63 - t17 * t38 + t18 * t37 + t19 * t47 + t2 * t64 + t20 * t48 - t34 * t8 - t35 * t7, t15 * t34 - t26 * t18 - t6 * t48 - t5 * t64 + t125, t1 * t38 + t15 * t6 - t19 * t7 + t2 * t37 + t20 * t8 + t26 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t148, -0.2e1 * t141, 0, 0, 0, t112 * t164, t114 * t164, -0.2e1 * t114 * t49 + 0.2e1 * t173 * t68, 0, -0.2e1 * t101 * t68 - 0.2e1 * t112 * t49, 0.2e1 * t68 * t49, -0.2e1 * t64 * t34, 0.2e1 * t34 * t63 - 0.2e1 * t35 * t64, 0, 0, 0, 0.2e1 * t35 * t60 + 0.2e1 * t41 * t63, -0.2e1 * t34 * t60 + 0.2e1 * t41 * t64, 0.2e1 * t26 * t35 + 0.2e1 * t6 * t63, 0.2e1 * t19 * t63 + 0.2e1 * t20 * t64 - 0.2e1 * t34 * t37 - 0.2e1 * t35 * t38, 0.2e1 * t26 * t34 - 0.2e1 * t6 * t64, -0.2e1 * t19 * t38 + 0.2e1 * t20 * t37 + 0.2e1 * t26 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t121, t97, -t142, t24, -t142 + 0.2e1 * t163 (-pkin(3) * t166 - qJ(4) * t172) * t114 + (-qJ(4) * t166 + (pkin(3) * qJD(3) - qJD(4)) * t113) * t112, -t24 + 0.2e1 * t92 - 0.2e1 * t169, -pkin(3) * t22 + qJ(4) * t21 + qJD(4) * t39, 0, 0, -t18, t17, t97, -t123 * t97 + t127, t45 * t115 + t181 * t97 - t3, t66 * t97 + t127 + t95, -t17 * t65 + t18 * t66 + t43 * t47 + t46 * t48 (-qJD(6) - t43) * t115 + (qJ(6) - t65) * t97 + t3, t1 * t65 + t2 * t66 - t43 * t7 + t46 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, -t173, 0, -t161, t162, -t161, t118, -t162, t118 * pkin(8), 0, 0, t34, t35, 0, t20, -t19, t20, -t34 * t66 - t35 * t65 + t43 * t63 + t46 * t64, t19, -t19 * t65 + t20 * t66 + t37 * t46 - t38 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, qJ(4) * t194, 0, 0, 0, 0, 0, t42, -0.2e1 * t45, t42, 0, 0.2e1 * t43, -0.2e1 * t43 * t65 + 0.2e1 * t46 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, t52, 0, t22, 0, 0, 0, 0, 0, t50, -t51, t50, -t190 * t18 - t111 * t17 + (t111 * t48 - t190 * t47) * qJD(5), t51, -t2 * t190 + t1 * t111 + (t111 * t8 + t190 * t7) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, t161, 0, 0, 0, 0, 0, 0, 0, 0, t190 * t34 - t111 * t35 + (t111 * t64 - t190 * t63) * qJD(5), 0, -t20 * t190 - t19 * t111 + (t111 * t37 + t190 * t38) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t100, t99, 0, -t100, -t46 * t190 - t43 * t111 + (t111 * t66 + t190 * t65) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, -t17, -t97, -t143, t3, -0.2e1 * t95 - t143, -pkin(5) * t18 - qJ(6) * t17 - qJD(6) * t47, -0.2e1 * t157 - t3 + 0.2e1 * t168, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t35, 0, -t20, t19, -t20, pkin(5) * t34 - qJ(6) * t35 - qJD(6) * t63, -t19, -pkin(5) * t20 - qJ(6) * t19 + qJD(6) * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t45, -t46, 0 -(2 * qJD(6)) - t45, -pkin(5) * t46 - qJ(6) * t43 + qJD(6) * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t100, -t99, 0, t100, t111 * qJD(6) + (-pkin(5) * t111 + t190 * qJ(6)) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, qJ(6) * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t18, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, 0, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
