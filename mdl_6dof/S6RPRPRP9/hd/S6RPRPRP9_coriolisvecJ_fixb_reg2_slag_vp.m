% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRP9_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP9_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP9_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP9_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:29:27
% EndTime: 2019-03-09 03:29:37
% DurationCPUTime: 3.54s
% Computational Cost: add. (5389->400), mult. (11856->534), div. (0->0), fcn. (7862->6), ass. (0->209)
t167 = sin(pkin(9));
t171 = cos(qJ(3));
t243 = qJD(1) * t171;
t222 = t167 * t243;
t168 = cos(pkin(9));
t241 = qJD(3) * t168;
t127 = -t222 + t241;
t228 = t168 * t243;
t242 = qJD(3) * t167;
t128 = t228 + t242;
t169 = sin(qJ(5));
t283 = cos(qJ(5));
t74 = -t283 * t127 + t128 * t169;
t294 = t74 ^ 2;
t170 = sin(qJ(3));
t244 = qJD(1) * t170;
t158 = qJD(5) + t244;
t293 = t74 * t158;
t132 = t283 * t167 + t169 * t168;
t116 = t132 * qJD(1);
t118 = t132 * qJD(5);
t230 = t283 * t168;
t184 = -t169 * t167 + t230;
t239 = qJD(3) * t171;
t269 = t170 * t118 - t184 * t239 + t116;
t208 = qJD(1) * t230;
t229 = t167 * t244;
t221 = qJD(5) * t283;
t237 = qJD(5) * t169;
t290 = -t167 * t237 + t168 * t221;
t292 = -t169 * t229 + t170 * t208 + t290;
t267 = t170 * t116 + t118;
t186 = t169 * t127 + t283 * t128;
t284 = t186 ^ 2;
t235 = 0.2e1 * qJD(1);
t234 = pkin(8) * t168 * t170;
t181 = (pkin(4) * t171 + t234) * qJD(1);
t201 = pkin(3) * t171 + qJ(4) * t170;
t134 = t201 * qJD(1);
t172 = -pkin(1) - pkin(7);
t289 = qJD(1) * t172;
t152 = qJD(2) + t289;
t259 = t167 * t171;
t84 = t168 * t134 - t152 * t259;
t57 = t181 + t84;
t257 = t168 * t171;
t85 = t167 * t134 + t152 * t257;
t66 = pkin(8) * t229 + t85;
t280 = pkin(8) + qJ(4);
t146 = t280 * t167;
t147 = t280 * t168;
t89 = -t169 * t146 + t283 * t147;
t277 = qJD(4) * t132 + qJD(5) * t89 - t169 * t66 + t283 * t57;
t271 = t186 * t158;
t240 = qJD(3) * t170;
t210 = t283 * t240;
t193 = qJD(1) * t210;
t236 = qJD(1) * qJD(3);
t220 = t170 * t236;
t206 = t169 * t220;
t43 = qJD(5) * t186 - t167 * t193 - t168 * t206;
t291 = t43 - t271;
t105 = t132 * t171;
t226 = t169 * t240;
t63 = -t167 * t210 - t168 * t226 + t290 * t171;
t288 = t158 * t63 + t170 * t43 + (qJD(1) * t105 + t74) * t239;
t139 = pkin(3) * t170 - qJ(4) * t171 + qJ(2);
t125 = t168 * t139;
t219 = -t167 * t172 + pkin(4);
t72 = -pkin(8) * t257 + t219 * t170 + t125;
t254 = t170 * t172;
t92 = t167 * t139 + t168 * t254;
t83 = -pkin(8) * t259 + t92;
t274 = t169 * t72 + t283 * t83;
t108 = t201 * qJD(3) - t171 * qJD(4) + qJD(2);
t95 = t168 * t108;
t54 = t95 + (t219 * t171 + t234) * qJD(3);
t227 = t167 * t240;
t238 = qJD(3) * t172;
t225 = t171 * t238;
t81 = t167 * t108 + t168 * t225;
t64 = pkin(8) * t227 + t81;
t11 = -qJD(5) * t274 - t169 * t64 + t283 * t54;
t287 = t267 * t158 + (-qJD(3) * t184 - t74) * t243;
t42 = -t127 * t221 + t128 * t237 - t167 * t206 + t168 * t193;
t286 = t132 * t43 + t184 * t42 + t186 * t267 + t292 * t74;
t106 = t184 * t170;
t285 = (t106 * t243 - t170 * t186) * qJD(3) - t269 * t158 - t171 * t42;
t273 = qJD(3) * pkin(3);
t217 = -qJD(4) + t273;
t260 = t152 * t171;
t113 = -t217 - t260;
t82 = -pkin(4) * t127 + t113;
t19 = pkin(5) * t74 - qJ(6) * t186 + t82;
t282 = t19 * t186;
t281 = t186 * t74;
t24 = t169 * t57 + t283 * t66;
t21 = qJ(6) * t243 + t24;
t185 = -t283 * t146 - t169 * t147;
t55 = qJD(4) * t184 + qJD(5) * t185;
t279 = -t21 + t55;
t278 = -pkin(5) * t243 - t277;
t276 = t24 - t55;
t138 = t170 * t152;
t99 = -pkin(4) * t229 + t138;
t275 = -t267 * pkin(5) + t292 * qJ(6) + qJD(6) * t132 + t99;
t110 = (qJD(4) + t260) * qJD(3);
t90 = t108 * qJD(1);
t52 = t168 * t110 + t167 * t90;
t245 = qJD(1) * t167;
t270 = -qJD(3) * t105 + t169 * t245 - t290 * t170 - t208;
t266 = qJD(3) * t185;
t265 = qJD(3) * t89;
t264 = t127 * t167;
t263 = t127 * t168;
t262 = t128 * t167;
t261 = t128 * t168;
t174 = qJD(1) ^ 2;
t258 = t167 * t174;
t256 = t168 * t174;
t173 = qJD(3) ^ 2;
t253 = t173 * t170;
t252 = t173 * t171;
t251 = t174 * qJ(2);
t121 = t139 * qJD(1);
t122 = qJD(3) * qJ(4) + t138;
t67 = t168 * t121 - t122 * t167;
t44 = pkin(4) * t244 - pkin(8) * t128 + t67;
t68 = t167 * t121 + t168 * t122;
t48 = pkin(8) * t127 + t68;
t16 = -t169 * t48 + t283 * t44;
t250 = qJD(6) - t16;
t165 = t170 ^ 2;
t166 = t171 ^ 2;
t248 = t165 - t166;
t247 = 0.2e1 * t165 - t166;
t246 = -t173 - t174;
t233 = qJD(2) * t235;
t232 = -t284 + t294;
t231 = t171 * t174 * t170;
t160 = -pkin(4) * t168 - pkin(3);
t223 = t158 * t243;
t157 = t170 * t238;
t161 = t171 * t236;
t51 = -t167 * t110 + t168 * t90;
t37 = qJD(3) * t181 + t51;
t207 = t167 * t220;
t45 = pkin(8) * t207 + t52;
t218 = t169 * t45 + t48 * t221 + t44 * t237 - t283 * t37;
t126 = pkin(4) * t259 - t171 * t172;
t214 = -t127 + t241;
t213 = -t128 + t242;
t212 = pkin(5) * t161;
t211 = t185 * t42 - t89 * t43 - t55 * t74;
t205 = qJ(6) * t161;
t204 = t170 * t161;
t203 = -t284 - t294;
t202 = t105 * t43 + t63 * t74;
t198 = -t51 * t167 + t52 * t168;
t197 = -t167 * t68 - t168 * t67;
t196 = -t167 * t67 + t168 * t68;
t195 = t170 * t214;
t194 = qJD(1) * t214;
t114 = -pkin(4) * t227 + t157;
t17 = t169 * t44 + t283 * t48;
t192 = t158 * t17 - t218;
t31 = -t169 * t83 + t283 * t72;
t188 = -t169 * t37 - t44 * t221 + t48 * t237 - t283 * t45;
t10 = t169 * t54 + t72 * t221 - t83 * t237 + t283 * t64;
t187 = -t184 * t43 + t267 * t74;
t183 = t213 * t244;
t133 = t152 * t240;
t93 = -pkin(4) * t207 + t133;
t182 = -t113 + (t152 + t289) * t171;
t2 = -t212 + t218;
t107 = t184 * t171;
t61 = t171 * t118 - t167 * t226 + t168 * t210;
t180 = t105 * t42 - t107 * t43 - t186 * t63 + t61 * t74;
t179 = -qJ(4) * t239 + (t113 + t217) * t170;
t104 = t132 * t170;
t178 = -t104 * t42 - t106 * t43 - t186 * t270 + t269 * t74;
t177 = t74 * t240 + (-t104 * t236 - t43) * t171 + t270 * t158;
t176 = t43 + t271;
t5 = pkin(5) * t43 + qJ(6) * t42 - qJD(6) * t186 + t93;
t175 = t42 + t293;
t164 = t168 ^ 2;
t163 = t167 ^ 2;
t162 = qJ(2) * t233;
t149 = 0.2e1 * t204;
t98 = (t158 + t244) * t239;
t91 = -t167 * t254 + t125;
t80 = -t167 * t225 + t95;
t71 = -pkin(5) * t184 - qJ(6) * t132 + t160;
t47 = pkin(5) * t105 - qJ(6) * t107 + t126;
t33 = pkin(5) * t186 + qJ(6) * t74;
t29 = -t170 * pkin(5) - t31;
t28 = qJ(6) * t170 + t274;
t20 = -t42 + t293;
t18 = t292 * t158 + (qJD(3) * t132 - t186) * t243;
t15 = pkin(5) * t63 + qJ(6) * t61 - qJD(6) * t107 + t114;
t14 = t158 * qJ(6) + t17;
t13 = -t158 * pkin(5) + t250;
t12 = -t107 * t42 - t186 * t61;
t9 = -pkin(5) * t239 - t11;
t8 = -t61 * t158 - t42 * t170 + (qJD(1) * t107 + t186) * t239;
t7 = qJ(6) * t239 + qJD(6) * t170 + t10;
t6 = -t42 * t132 + t186 * t292;
t1 = qJD(6) * t158 - t188 + t205;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t233, t162, -0.2e1 * t204, 0.2e1 * t248 * t236, -t253, t149, -t252, 0, -t172 * t253 + (qJ(2) * t239 + qJD(2) * t170) * t235, -t172 * t252 + (-qJ(2) * t240 + qJD(2) * t171) * t235, 0, t162 (-t164 * t243 - t261) * t240 (-t263 + (t128 + 0.2e1 * t228) * t167) * t240 (-t247 * t168 * qJD(1) + t128 * t171) * qJD(3) (-t163 * t243 + t264) * t240 (t127 * t171 + t247 * t245) * qJD(3), t149 (qJD(1) * t80 + t51) * t170 + ((qJD(1) * t91 + t67) * t171 + (-t127 * t172 + t167 * t182) * t170) * qJD(3) (-qJD(1) * t81 - t52) * t170 + ((-qJD(1) * t92 - t68) * t171 + (t128 * t172 + t168 * t182) * t170) * qJD(3), t81 * t127 - t80 * t128 + (-t167 * t52 - t168 * t51) * t171 + ((t167 * t92 + t168 * t91) * qJD(1) - t197) * t240, t51 * t91 + t52 * t92 + t67 * t80 + t68 * t81 + (t113 - t260) * t157, t12, t180, t8, t202, -t288, t98, t93 * t105 + t11 * t158 + t114 * t74 + t126 * t43 - t218 * t170 + t82 * t63 + (qJD(1) * t31 + t16) * t239, -t10 * t158 + t93 * t107 + t114 * t186 - t126 * t42 + t188 * t170 - t82 * t61 + (-qJD(1) * t274 - t17) * t239, -t10 * t74 + t105 * t188 + t107 * t218 - t11 * t186 + t16 * t61 - t17 * t63 - t274 * t43 + t31 * t42, t10 * t17 + t11 * t16 + t114 * t82 + t126 * t93 - t188 * t274 - t218 * t31, t12, t8, -t180, t98, t288, t202, t5 * t105 + t15 * t74 - t9 * t158 - t2 * t170 + t19 * t63 + t47 * t43 + (-qJD(1) * t29 - t13) * t239, -t1 * t105 + t107 * t2 - t13 * t61 - t14 * t63 + t186 * t9 - t28 * t43 - t29 * t42 - t7 * t74, t1 * t170 - t5 * t107 - t15 * t186 + t7 * t158 + t19 * t61 + t47 * t42 + (qJD(1) * t28 + t14) * t239, t1 * t28 + t13 * t9 + t14 * t7 + t15 * t19 + t2 * t29 + t47 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t174, -t251, 0, 0, 0, 0, 0, 0, t246 * t170, t246 * t171, 0, -t251, 0, 0, 0, 0, 0, 0 (-t256 + (-t127 - t222) * qJD(3)) * t170 (t258 + (t128 - t228) * qJD(3)) * t170 (t262 + t263) * t239 + (t261 - t264) * qJD(1), t198 * t170 + t197 * qJD(1) + (t113 * t170 + (t196 - t138) * t171) * qJD(3), 0, 0, 0, 0, 0, 0, t177, -t285, t178, t104 * t218 - t106 * t188 + t270 * t16 - t269 * t17 - t93 * t171 + t82 * t240, 0, 0, 0, 0, 0, 0, t177, t178, t285, t1 * t106 + t2 * t104 - t270 * t13 - t269 * t14 - t5 * t171 + t19 * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, -t248 * t174, 0, -t231, 0, 0, -t171 * t251, t170 * t251, 0, 0, -t168 * t183 (t263 - t262 + (t163 - t164) * qJD(3)) * t244, t165 * t256 + t213 * t243, t170 * t167 * t194, -t165 * t258 + t171 * t194, -t231, -t152 * t195 + (t167 * t179 - t170 * t84 - t171 * t67) * qJD(1), t213 * t138 + (t168 * t179 + t170 * t85 + t171 * t68) * qJD(1), -t85 * t127 + t84 * t128 + (qJD(4) * t127 - t67 * t244 + t52) * t168 + (qJD(4) * t128 - t68 * t244 - t51) * t167, -t67 * t84 - t68 * t85 + (-t113 - t273) * t138 + t196 * qJD(4) + t198 * qJ(4), t6, -t286, t18, t187, -t287, -t223, -t184 * t93 + t160 * t43 - t74 * t99 + t267 * t82 - t277 * t158 + (-t16 + t266) * t243, t132 * t93 - t160 * t42 - t186 * t99 + t292 * t82 + t276 * t158 + (t17 - t265) * t243, t132 * t218 - t16 * t292 - t267 * t17 - t184 * t188 + t186 * t277 + t24 * t74 + t211, -t277 * t16 + t93 * t160 - t276 * t17 - t185 * t218 - t188 * t89 - t82 * t99, t6, t18, t286, -t223, t287, t187, -t184 * t5 + t43 * t71 - t275 * t74 + t267 * t19 + t278 * t158 + (t13 + t266) * t243, t1 * t184 + t13 * t292 + t132 * t2 - t267 * t14 - t186 * t278 + t21 * t74 + t211, -t132 * t5 + t42 * t71 + t275 * t186 - t292 * t19 + t279 * t158 + (-t14 + t265) * t243, t1 * t89 - t278 * t13 + t279 * t14 - t185 * t2 - t275 * t19 + t5 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -qJD(1) * t195, -t127 ^ 2 - t128 ^ 2, -t127 * t68 + t128 * t67 + t133, 0, 0, 0, 0, 0, 0, t176, -t175, t203, t16 * t186 + t17 * t74 + t93, 0, 0, 0, 0, 0, 0, t176, t203, t175, -t13 * t186 + t14 * t74 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, -t232, t20, -t281, -t291, t161, -t186 * t82 + t192, t158 * t16 + t74 * t82 + t188, 0, 0, t281, t20, t232, t161, t291, -t281, -t33 * t74 + t192 + 0.2e1 * t212 - t282, pkin(5) * t42 - t43 * qJ(6) + (t14 - t17) * t186 + (t13 - t250) * t74, 0.2e1 * t205 - t19 * t74 + t33 * t186 + (0.2e1 * qJD(6) - t16) * t158 - t188, -t2 * pkin(5) + t1 * qJ(6) - t13 * t17 + t14 * t250 - t19 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t161 + t281, t20, -t158 ^ 2 - t284, -t14 * t158 + t2 + t282;];
tauc_reg  = t3;
