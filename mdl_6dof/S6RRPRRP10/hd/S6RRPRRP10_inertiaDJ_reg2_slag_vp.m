% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRP10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:42:33
% EndTime: 2019-03-09 12:42:51
% DurationCPUTime: 6.54s
% Computational Cost: add. (10713->451), mult. (27903->794), div. (0->0), fcn. (28311->10), ass. (0->239)
t143 = sin(pkin(11));
t144 = sin(pkin(6));
t145 = cos(pkin(11));
t147 = sin(qJ(2));
t149 = cos(qJ(2));
t266 = cos(pkin(6));
t219 = qJD(2) * t266;
t212 = t149 * t219;
t125 = pkin(1) * t212;
t218 = t266 * qJD(3);
t186 = t218 + t125;
t177 = t143 * t186;
t277 = pkin(9) + qJ(3);
t284 = pkin(2) * t147;
t178 = -t277 * t149 + t284;
t248 = qJD(3) * t147;
t227 = t145 * t248;
t152 = t177 - (-t227 + ((pkin(8) * t143 + pkin(3)) * t147 + t178 * t145) * qJD(2)) * t144;
t176 = t145 * t186;
t230 = t143 * t248;
t253 = t145 * t147;
t241 = pkin(8) * t253;
t154 = t176 + (-t230 + (t143 * t178 - t241) * qJD(2)) * t144;
t285 = sin(qJ(4));
t224 = qJD(4) * t285;
t286 = cos(qJ(4));
t225 = qJD(4) * t286;
t221 = t266 * t143;
t238 = t144 * t253;
t173 = t221 + t238;
t254 = t144 * t149;
t234 = pkin(1) * t266;
t131 = t147 * t234;
t110 = pkin(8) * t254 + t131;
t98 = t266 * qJ(3) + t110;
t202 = -pkin(2) * t149 - qJ(3) * t147;
t99 = (-pkin(1) + t202) * t144;
t72 = -t143 * t98 + t145 * t99;
t48 = -pkin(3) * t254 - pkin(9) * t173 + t72;
t220 = t266 * t145;
t255 = t144 * t147;
t174 = t143 * t255 - t220;
t73 = t143 * t99 + t145 * t98;
t59 = -pkin(9) * t174 + t73;
t13 = t285 * t152 - t286 * t154 + t59 * t224 - t48 * t225;
t76 = t285 * t173 + t286 * t174;
t77 = t286 * t173 - t285 * t174;
t109 = -pkin(8) * t255 + t149 * t234;
t101 = -t266 * pkin(2) - t109;
t87 = pkin(3) * t174 + t101;
t155 = t76 * pkin(4) - t77 * pkin(10) + t87;
t250 = qJD(2) * t147;
t229 = t144 * t250;
t306 = -pkin(10) * t229 - qJD(5) * t155 + t13;
t148 = cos(qJ(5));
t136 = qJD(5) * t148;
t146 = sin(qJ(5));
t249 = qJD(2) * t149;
t228 = t144 * t249;
t215 = t143 * t228;
t157 = -t76 * qJD(4) - t285 * t215;
t214 = t145 * t228;
t156 = -t286 * t214 - t157;
t237 = t146 * t254;
t36 = -qJD(5) * t237 + t77 * t136 - t146 * t156 - t148 * t229;
t32 = t146 * t36;
t69 = t146 * t77 + t148 * t254;
t276 = -t69 * t136 - t32;
t264 = qJD(5) * t69;
t35 = -t146 * t229 + t148 * t156 + t264;
t135 = qJD(5) * t146;
t70 = t148 * t77 - t237;
t63 = t70 * t135;
t301 = -t148 * t35 - t63;
t305 = -t301 + t276;
t140 = t146 ^ 2;
t141 = t148 ^ 2;
t251 = t140 - t141;
t123 = t251 * qJD(5);
t107 = t143 * t224 - t145 * t225;
t114 = t286 * t143 + t285 * t145;
t268 = t148 * t70;
t269 = t148 * t36;
t272 = t146 * t69;
t273 = t146 * t35;
t304 = (qJD(5) * (-t268 + t272) - t269 + t273) * t114 + (t146 * t70 + t148 * t69) * t107;
t303 = 0.2e1 * t249;
t56 = qJD(4) * t77 + t114 * t228;
t39 = t76 * t135 - t148 * t56;
t302 = pkin(10) * t39;
t121 = t277 * t143;
t122 = t277 * t145;
t91 = t286 * t121 + t285 * t122;
t108 = t114 * qJD(4);
t233 = t286 * t145;
t113 = t285 * t143 - t233;
t261 = t107 * t146;
t40 = t76 * t136 + t146 * t56;
t299 = t108 * t69 + t113 * t36 + t114 * t40 - t76 * t261;
t133 = -pkin(3) * t145 - pkin(2);
t172 = -pkin(4) * t113 + pkin(10) * t114 - t133;
t167 = t148 * t172;
t211 = pkin(4) * t108 + pkin(10) * t107;
t74 = t113 * qJD(3) + t91 * qJD(4);
t92 = -t285 * t121 + t286 * t122;
t24 = qJD(5) * t167 + t92 * t135 - t146 * t211 + t148 * t74;
t275 = -t146 * t172 + t148 * t92;
t25 = -qJD(5) * t275 + t146 * t74 + t148 * t211;
t53 = -t146 * t92 - t167;
t297 = qJD(5) * (t146 * t53 - t148 * t275) + t146 * t24 - t148 * t25;
t246 = qJD(6) * t113;
t265 = qJ(6) * t108;
t19 = -t24 + t246 + t265;
t280 = t108 * pkin(5);
t21 = -t25 - t280;
t44 = qJ(6) * t113 + t275;
t45 = -t113 * pkin(5) - t53;
t296 = t146 * t19 - t148 * t21 + (t146 * t45 + t148 * t44) * qJD(5);
t30 = t285 * t48 + t286 * t59;
t28 = -pkin(10) * t254 + t30;
t15 = -t146 * t28 + t148 * t155;
t16 = t146 * t155 + t148 * t28;
t235 = pkin(3) * t143 + pkin(8);
t151 = -t157 * pkin(10) + t56 * pkin(4) + (t131 + (-pkin(10) * t233 + t235) * t254) * qJD(2);
t3 = t28 * t135 - t146 * t151 + t306 * t148;
t4 = -t28 * t136 + t306 * t146 + t148 * t151;
t295 = t146 * t3 - t148 * t4 + (t146 * t15 - t148 * t16) * qJD(5);
t200 = pkin(5) * t148 + qJ(6) * t146;
t294 = qJD(5) * t200 - qJD(6) * t148;
t263 = qJD(6) * t76;
t274 = qJ(6) * t56;
t1 = t263 - t3 + t274;
t287 = t56 * pkin(5);
t2 = -t4 - t287;
t7 = qJ(6) * t76 + t16;
t8 = -t76 * pkin(5) - t15;
t293 = t1 * t146 - t148 * t2 + (t146 * t8 + t148 * t7) * qJD(5);
t139 = t145 ^ 2;
t292 = 0.2e1 * t108;
t291 = 0.2e1 * t144;
t290 = 0.2e1 * qJD(2);
t289 = 0.2e1 * qJD(6);
t288 = pkin(10) * t35;
t283 = pkin(10) * t108;
t282 = pkin(10) * t113;
t281 = t1 * t148;
t279 = t148 * t3;
t75 = qJD(3) * t114 + qJD(4) * t92;
t278 = t75 * t91;
t271 = t146 * t75;
t267 = t148 * t75;
t262 = t101 * t149;
t260 = t107 * t148;
t259 = t108 * t146;
t258 = t114 * t107;
t138 = t144 ^ 2;
t142 = t149 ^ 2;
t257 = t138 * t142;
t256 = t143 * t147;
t252 = t148 * t108;
t245 = qJD(6) * t146;
t243 = 0.2e1 * t69 * t36;
t41 = 0.2e1 * t76 * t56;
t242 = -0.2e1 * pkin(4) * qJD(5);
t89 = t113 * t292;
t240 = pkin(10) * t135;
t239 = pkin(10) * t136;
t236 = t146 * t260;
t231 = t138 * t249;
t226 = t146 * t136;
t111 = t114 ^ 2;
t217 = t111 * t226;
t216 = t147 * t231;
t137 = t143 ^ 2;
t213 = 0.2e1 * (t137 + t139) * qJD(3);
t29 = -t285 * t59 + t286 * t48;
t210 = pkin(4) * t107 - t283;
t209 = pkin(4) * t114 + t282;
t205 = t146 * t7 - t148 * t8;
t204 = t35 * t69 - t36 * t70;
t203 = t36 * t76 + t56 * t69;
t201 = -qJ(3) * t149 + t284;
t199 = pkin(5) * t146 - qJ(6) * t148;
t34 = t108 * t76 + t113 * t56;
t198 = t146 * t16 + t148 * t15;
t192 = t146 * t44 - t148 * t45;
t191 = t146 * t275 + t148 * t53;
t187 = t143 * t214;
t27 = pkin(4) * t254 - t29;
t17 = t69 * pkin(5) - t70 * qJ(6) + t27;
t14 = -t286 * t152 - t285 * t154 - t48 * t224 - t59 * t225;
t10 = -pkin(4) * t229 - t14;
t5 = t36 * pkin(5) + t35 * qJ(6) - t70 * qJD(6) + t10;
t185 = t17 * t136 + t146 * t5;
t184 = t17 * t135 - t148 * t5;
t183 = t10 * t146 + t27 * t136;
t182 = t10 * t148 - t27 * t135;
t180 = t69 * t135 - t269;
t179 = (t268 + t272) * pkin(10);
t86 = t114 * t136 - t261;
t84 = -t114 * t135 - t260;
t85 = t113 * t136 + t259;
t83 = t113 * t135 - t252;
t175 = t40 * pkin(10);
t117 = -pkin(4) - t200;
t33 = -t199 * t107 + t294 * t114 + t75;
t171 = -t33 + (t114 * t117 - t282) * qJD(5);
t169 = t144 * t174;
t168 = t144 * t173;
t106 = -pkin(5) * t135 + qJ(6) * t136 + t245;
t60 = t114 * t199 + t91;
t165 = -qJD(5) * t60 + t106 * t114 + t107 * t117 + t283;
t162 = t144 * (qJD(2) * t202 + qJD(3) * t149);
t161 = -t276 * t114 - t69 * t261;
t160 = -qJD(5) * t192 + t146 * t21 + t148 * t19;
t159 = -qJD(5) * t191 - t146 * t25 - t148 * t24;
t127 = -0.2e1 * t226;
t126 = 0.2e1 * t226;
t116 = -0.2e1 * t216;
t105 = t110 * qJD(2);
t104 = pkin(8) * t229 - t125;
t90 = (t235 * t254 + t131) * qJD(2);
t79 = (t140 + t141) * t107;
t68 = -0.2e1 * t141 * t258 - 0.2e1 * t217;
t67 = -0.2e1 * t140 * t258 + 0.2e1 * t217;
t66 = t176 + (-t230 + (t143 * t201 - t241) * qJD(2)) * t144;
t65 = -t177 + (-t227 + (pkin(8) * t256 + t145 * t201) * qJD(2)) * t144;
t62 = t114 * t123 + t236;
t61 = -t251 * t107 + 0.4e1 * t114 * t226;
t51 = t111 * t123 + 0.2e1 * t114 * t236;
t43 = t113 * t86 + t114 * t259;
t42 = 0.2e1 * t113 * t84 + 0.2e1 * t114 * t252;
t31 = pkin(10) * t269;
t20 = -0.2e1 * t70 * t35;
t18 = t70 * t136 - t273;
t12 = t114 * t301 - t70 * t260;
t11 = -0.2e1 * t35 * t76 + 0.2e1 * t56 * t70;
t6 = t108 * t70 - t113 * t35 - t114 * t39 - t76 * t260;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t216 (-t147 ^ 2 + t142) * t138 * t290, t212 * t291, t116, -0.2e1 * t219 * t255, 0, -0.2e1 * t138 * pkin(1) * t250 - 0.2e1 * t105 * t266, -0.2e1 * pkin(1) * t231 + 0.2e1 * t104 * t266 (-t104 * t149 + t105 * t147 + (-t109 * t149 - t110 * t147) * qJD(2)) * t291, -0.2e1 * t104 * t110 - 0.2e1 * t105 * t109, t145 * t168 * t303, 0.2e1 * (t139 * t266 + (-t221 - 0.2e1 * t238) * t143) * t228 (-t145 * t257 + t147 * t168) * t290, t143 * t169 * t303 (t143 * t257 - t147 * t169) * t290, t116, -0.2e1 * t105 * t220 + 0.2e1 * (t105 * t256 - t65 * t149 + (t143 * t262 + t147 * t72) * qJD(2)) * t144, 0.2e1 * t105 * t221 + 0.2e1 * (t105 * t253 + t66 * t149 + (t145 * t262 - t147 * t73) * qJD(2)) * t144, -0.2e1 * t66 * t174 - 0.2e1 * t65 * t173 + 0.2e1 * (-t143 * t73 - t145 * t72) * t228, 0.2e1 * t101 * t105 + 0.2e1 * t65 * t72 + 0.2e1 * t66 * t73, -0.2e1 * t77 * t156, 0.2e1 * t156 * t76 - 0.2e1 * t77 * t56, 0.2e1 * t156 * t254 + 0.2e1 * t229 * t77, t41 (t149 * t56 - t250 * t76) * t291, t116, 0.2e1 * t87 * t56 + 0.2e1 * t90 * t76 + 0.2e1 * (-t14 * t149 + t250 * t29) * t144, -0.2e1 * t13 * t254 - 0.2e1 * t156 * t87 - 0.2e1 * t229 * t30 + 0.2e1 * t90 * t77, 0.2e1 * t13 * t76 - 0.2e1 * t14 * t77 + 0.2e1 * t156 * t29 - 0.2e1 * t30 * t56, -0.2e1 * t13 * t30 + 0.2e1 * t14 * t29 + 0.2e1 * t87 * t90, t20, 0.2e1 * t204, t11, t243, -0.2e1 * t203, t41, 0.2e1 * t10 * t69 + 0.2e1 * t15 * t56 + 0.2e1 * t27 * t36 + 0.2e1 * t4 * t76, 0.2e1 * t10 * t70 - 0.2e1 * t16 * t56 - 0.2e1 * t27 * t35 + 0.2e1 * t3 * t76, 0.2e1 * t15 * t35 - 0.2e1 * t16 * t36 + 0.2e1 * t3 * t69 - 0.2e1 * t4 * t70, 0.2e1 * t10 * t27 + 0.2e1 * t15 * t4 - 0.2e1 * t16 * t3, t20, t11, -0.2e1 * t204, t41, 0.2e1 * t203, t243, 0.2e1 * t17 * t36 - 0.2e1 * t2 * t76 + 0.2e1 * t5 * t69 - 0.2e1 * t56 * t8, -0.2e1 * t1 * t69 + 0.2e1 * t2 * t70 - 0.2e1 * t35 * t8 - 0.2e1 * t36 * t7, 0.2e1 * t1 * t76 + 0.2e1 * t17 * t35 - 0.2e1 * t5 * t70 + 0.2e1 * t56 * t7, 0.2e1 * t1 * t7 + 0.2e1 * t17 * t5 + 0.2e1 * t2 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t228, 0, -t229, 0, -t105, t104, 0, 0, t187 (-t137 + t139) * t228, t143 * t229, -t187, t145 * t229, 0, -t105 * t145 + t143 * t162, t105 * t143 + t145 * t162 (t145 * t218 + t66) * t145 + (t143 * t218 - t65) * t143, -pkin(2) * t105 + (-t143 * t72 + t145 * t73) * qJD(3) + (-t65 * t143 + t66 * t145) * qJ(3), -t77 * t107 - t114 * t156, t107 * t76 - t77 * t108 + t113 * t156 - t114 * t56 (t107 * t149 + t114 * t250) * t144, t34 (t108 * t149 - t113 * t250) * t144, 0, t87 * t108 + t90 * t113 + t133 * t56 + (t149 * t75 - t250 * t91) * t144, -t87 * t107 + t90 * t114 - t133 * t156 - t229 * t92 - t254 * t74, t29 * t107 - t30 * t108 + t13 * t113 - t14 * t114 - t156 * t91 - t92 * t56 + t74 * t76 + t75 * t77, -t13 * t92 + t133 * t90 - t14 * t91 - t29 * t75 - t30 * t74, t12, t304, t6, t161, -t299, t34, t108 * t15 + t113 * t4 + t114 * t183 + t25 * t76 - t261 * t27 + t36 * t91 + t53 * t56 + t69 * t75, -t108 * t16 + t113 * t3 + t114 * t182 + t24 * t76 - t260 * t27 - t275 * t56 - t35 * t91 + t70 * t75, t198 * t107 + t295 * t114 + t24 * t69 - t25 * t70 - t36 * t275 + t35 * t53, t10 * t91 + t15 * t25 - t16 * t24 + t27 * t75 - t275 * t3 + t4 * t53, t12, t6, -t304, t34, t299, t161, -t108 * t8 - t113 * t2 + t114 * t185 - t17 * t261 - t21 * t76 + t33 * t69 + t36 * t60 - t45 * t56, t205 * t107 - t293 * t114 - t19 * t69 + t21 * t70 - t35 * t45 - t36 * t44, t1 * t113 + t108 * t7 + t114 * t184 + t17 * t260 + t19 * t76 - t33 * t70 + t35 * t60 + t44 * t56, t1 * t44 + t17 * t33 + t19 * t7 + t2 * t45 + t21 * t8 + t5 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, qJ(3) * t213, -0.2e1 * t258, 0.2e1 * t107 * t113 - 0.2e1 * t108 * t114, 0, t89, 0, 0, t133 * t292, -0.2e1 * t133 * t107, -0.2e1 * t107 * t91 - 0.2e1 * t108 * t92 + 0.2e1 * t113 * t74 + 0.2e1 * t114 * t75, -0.2e1 * t74 * t92 + 0.2e1 * t278, t68, 0.2e1 * t51, t42, t67, -0.2e1 * t43, t89, -0.2e1 * t91 * t261 + 0.2e1 * t108 * t53 + 0.2e1 * t113 * t25 + 0.2e1 * (t136 * t91 + t271) * t114, -0.2e1 * t91 * t260 - 0.2e1 * t108 * t275 + 0.2e1 * t113 * t24 + 0.2e1 * (-t135 * t91 + t267) * t114, 0.2e1 * t191 * t107 + 0.2e1 * t297 * t114, -0.2e1 * t24 * t275 + 0.2e1 * t25 * t53 + 0.2e1 * t278, t68, t42, -0.2e1 * t51, t89, 0.2e1 * t43, t67, -0.2e1 * t60 * t261 - 0.2e1 * t108 * t45 - 0.2e1 * t113 * t21 + 0.2e1 * (t136 * t60 + t146 * t33) * t114, 0.2e1 * t192 * t107 - 0.2e1 * t296 * t114, 0.2e1 * t60 * t260 + 0.2e1 * t108 * t44 + 0.2e1 * t113 * t19 + 0.2e1 * (t135 * t60 - t148 * t33) * t114, 0.2e1 * t19 * t44 + 0.2e1 * t21 * t45 + 0.2e1 * t33 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, t214, 0, t105, 0, 0, 0, 0, 0, 0, t56, -t156, 0, t90, 0, 0, 0, 0, 0, 0, -t39, -t40, t305, -t295, 0, 0, 0, 0, 0, 0, -t39, t305, t40, t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, -t107, 0, 0, 0, 0, 0, 0, 0, 0, -t83, -t85, t79, -t297, 0, 0, 0, 0, 0, 0, -t83, t79, t85, t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t156, 0, -t56, t229, t14, t13, 0, 0, t18, t301 + t276, t40, t180, -t39, 0, -pkin(4) * t36 - t175 - t182, pkin(4) * t35 + t183 + t302, -t279 - t31 + (-t4 - t288) * t146 + (t179 - t198) * qJD(5), -pkin(4) * t10 + (-qJD(5) * t198 - t146 * t4 - t279) * pkin(10), t18, t40, t32 + t63 + (t35 + t264) * t148, 0, t39, t180, -t106 * t69 + t117 * t36 - t175 + t184, t281 - t31 + (t2 - t288) * t146 + (t179 - t205) * qJD(5), t106 * t70 + t117 * t35 - t185 - t302, -t106 * t17 + t117 * t5 + (-qJD(5) * t205 + t146 * t2 + t281) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, 0, -t108, 0, -t75, t74, 0, 0, -t62, -t61, t85, t62, -t83, 0, -t267 + t210 * t146 + (t146 * t91 - t148 * t209) * qJD(5), t271 + t210 * t148 + (t146 * t209 + t148 * t91) * qJD(5), t159, -pkin(4) * t75 + pkin(10) * t159, -t62, t85, t61, 0, t83, t62, -t146 * t165 + t148 * t171, t160, t146 * t171 + t148 * t165, pkin(10) * t160 - t106 * t60 + t117 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, -0.2e1 * t123, 0, t127, 0, 0, t146 * t242, t148 * t242, 0, 0, t126, 0, 0.2e1 * t123, 0, 0, t127, 0.2e1 * t106 * t148 + 0.2e1 * t117 * t135, 0, 0.2e1 * t106 * t146 - 0.2e1 * t117 * t136, -0.2e1 * t117 * t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, 0, -t36, t56, t4, t3, 0, 0, 0, -t35, 0, t56, t36, 0, t4 + 0.2e1 * t287, pkin(5) * t35 - qJ(6) * t36 - qJD(6) * t69, 0.2e1 * t263 - t3 + 0.2e1 * t274, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t86, t108, t25, t24, 0, 0, 0, t84, 0, t108, t86, 0, t25 + 0.2e1 * t280, t200 * t107 + (qJD(5) * t199 - t245) * t114, -t24 + 0.2e1 * t246 + 0.2e1 * t265, -pkin(5) * t21 + qJ(6) * t19 + qJD(6) * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t136, 0, 0, 0, 0, 0, 0, 0, 0, -t135, 0, t136, t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t135, 0, -t239, t240, 0, 0, 0, t136, 0, 0, t135, 0, -t239, -t294, -t240, -t294 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t289, qJ(6) * t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, -t35, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, t84, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t9;
