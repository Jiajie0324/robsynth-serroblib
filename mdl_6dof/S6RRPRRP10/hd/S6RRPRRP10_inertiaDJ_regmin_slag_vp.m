% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRP10_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:42:32
% EndTime: 2019-03-09 12:42:44
% DurationCPUTime: 3.68s
% Computational Cost: add. (7307->354), mult. (18987->638), div. (0->0), fcn. (19265->10), ass. (0->176)
t130 = cos(qJ(5));
t127 = sin(qJ(5));
t187 = qJD(5) * t127;
t123 = sin(pkin(11));
t125 = cos(pkin(11));
t128 = sin(qJ(4));
t223 = cos(qJ(4));
t101 = t223 * t123 + t128 * t125;
t124 = sin(pkin(6));
t131 = cos(qJ(2));
t190 = qJD(2) * t131;
t173 = t124 * t190;
t129 = sin(qJ(2));
t198 = t124 * t129;
t178 = t123 * t198;
t126 = cos(pkin(6));
t196 = t125 * t126;
t141 = -t178 + t196;
t195 = t125 * t129;
t199 = t123 * t126;
t142 = t124 * t195 + t199;
t66 = t128 * t141 + t223 * t142;
t49 = t66 * qJD(4) + t101 * t173;
t65 = t128 * t142 - t223 * t141;
t144 = -t130 * t49 + t65 * t187;
t232 = pkin(10) * t144;
t121 = t127 ^ 2;
t122 = t130 ^ 2;
t192 = t121 - t122;
t167 = t192 * qJD(5);
t176 = t223 * t125;
t140 = -t128 * t123 + t176;
t186 = qJD(6) * t140;
t117 = qJD(5) * t130;
t219 = pkin(9) + qJ(3);
t107 = t219 * t123;
t108 = t219 * t125;
t170 = qJD(4) * t223;
t63 = -qJD(3) * t176 + t107 * t170 + (qJD(3) * t123 + qJD(4) * t108) * t128;
t96 = t140 * qJD(4);
t97 = t101 * qJD(4);
t75 = pkin(4) * t97 - pkin(10) * t96;
t115 = -pkin(3) * t125 - pkin(2);
t76 = -pkin(4) * t140 - pkin(10) * t101 + t115;
t82 = -t128 * t107 + t223 * t108;
t21 = -t76 * t117 - t127 * t75 + t130 * t63 + t82 * t187;
t213 = qJ(6) * t97;
t16 = -t186 - t21 + t213;
t215 = t127 * t76 + t130 * t82;
t22 = -qJD(5) * t215 + t127 * t63 + t130 * t75;
t224 = t97 * pkin(5);
t17 = -t22 - t224;
t35 = -qJ(6) * t140 + t215;
t46 = -t127 * t82 + t130 * t76;
t36 = pkin(5) * t140 - t46;
t231 = t16 * t127 - t17 * t130 + (t127 * t36 + t130 * t35) * qJD(5);
t156 = pkin(5) * t130 + qJ(6) * t127;
t230 = t156 * qJD(5) - t130 * qJD(6);
t200 = qJD(6) * t65;
t214 = qJ(6) * t49;
t165 = t123 * t173;
t102 = pkin(3) * t165;
t132 = -t65 * qJD(4) + t140 * t173;
t179 = t126 * qJD(2) * pkin(1);
t20 = t49 * pkin(4) + pkin(8) * t173 - pkin(10) * t132 + t129 * t179 + t102;
t197 = t124 * t131;
t182 = pkin(8) * t197;
t222 = pkin(1) * t129;
t89 = t182 + (qJ(3) + t222) * t126;
t157 = -pkin(2) * t131 - qJ(3) * t129;
t90 = (-pkin(1) + t157) * t124;
t61 = -t123 * t89 + t125 * t90;
t42 = -pkin(3) * t197 - t142 * pkin(9) + t61;
t62 = t123 * t90 + t125 * t89;
t53 = t141 * pkin(9) + t62;
t216 = t128 * t42 + t223 * t53;
t25 = -pkin(10) * t197 + t216;
t112 = pkin(8) * t198;
t221 = pkin(1) * t131;
t74 = pkin(3) * t178 + t112 + (t115 - t221) * t126;
t32 = t65 * pkin(4) - t66 * pkin(10) + t74;
t188 = qJD(4) * t128;
t194 = t125 * t131;
t84 = (-qJD(3) * t129 + (pkin(2) * t129 - qJ(3) * t131) * qJD(2)) * t124;
t189 = qJD(3) * t126;
t191 = qJD(2) * t129;
t174 = t124 * t191;
t93 = pkin(8) * t174 - t131 * t179;
t88 = -t93 + t189;
t56 = -t123 * t88 + t125 * t84;
t40 = (pkin(3) * t129 - pkin(9) * t194) * t124 * qJD(2) + t56;
t57 = t123 * t84 + t125 * t88;
t52 = -pkin(9) * t165 + t57;
t11 = -t128 * t40 - t42 * t170 + t53 * t188 - t223 * t52;
t9 = pkin(10) * t174 - t11;
t3 = -t32 * t117 - t127 * t20 - t130 * t9 + t25 * t187;
t1 = t200 - t3 + t214;
t225 = t49 * pkin(5);
t218 = t127 * t32 + t130 * t25;
t4 = -qJD(5) * t218 - t127 * t9 + t130 * t20;
t2 = -t225 - t4;
t6 = qJ(6) * t65 + t218;
t13 = -t127 * t25 + t130 * t32;
t7 = -pkin(5) * t65 - t13;
t229 = t1 * t127 - t2 * t130 + (t127 * t7 + t130 * t6) * qJD(5);
t228 = 0.2e1 * t115;
t227 = 0.2e1 * qJD(6);
t226 = pkin(10) * t97;
t220 = pkin(10) * t140;
t177 = t127 * t197;
t29 = -qJD(5) * t177 + t66 * t117 + t127 * t132 - t130 * t174;
t58 = t127 * t66 + t130 * t197;
t217 = -t58 * t117 - t127 * t29;
t212 = t101 * t96;
t211 = t127 * t58;
t210 = t127 * t96;
t209 = t127 * t97;
t208 = t130 * t29;
t59 = t130 * t66 - t177;
t207 = t130 * t59;
t206 = t130 * t96;
t205 = t130 * t97;
t28 = t58 * qJD(5) - t127 * t174 - t130 * t132;
t204 = t28 * t127;
t64 = t101 * qJD(3) + t82 * qJD(4);
t203 = t64 * t127;
t202 = t64 * t130;
t94 = (t126 * t222 + t182) * qJD(2);
t201 = t94 * t123;
t193 = t127 * t130;
t185 = t127 * qJD(6);
t183 = -0.2e1 * pkin(4) * qJD(5);
t181 = pkin(10) * t187;
t180 = pkin(10) * t117;
t119 = t124 ^ 2;
t175 = t119 * t190;
t172 = t127 * t117;
t168 = -0.4e1 * t101 * t193;
t166 = t129 * t175;
t164 = 0.2e1 * (t123 ^ 2 + t125 ^ 2) * qJD(3);
t163 = -pkin(4) * t96 - t226;
t162 = -t128 * t53 + t223 * t42;
t161 = pkin(4) * t101 - t220;
t158 = -t127 * t6 + t130 * t7;
t155 = pkin(5) * t127 - qJ(6) * t130;
t151 = -t127 * t35 + t130 * t36;
t24 = pkin(4) * t197 - t162;
t15 = t58 * pkin(5) - t59 * qJ(6) + t24;
t12 = -t128 * t52 - t53 * t170 - t42 * t188 + t223 * t40;
t10 = -pkin(4) * t174 - t12;
t5 = t29 * pkin(5) + t28 * qJ(6) - t59 * qJD(6) + t10;
t149 = t15 * t117 + t5 * t127;
t148 = -t5 * t130 + t15 * t187;
t147 = t10 * t127 + t24 * t117;
t146 = t10 * t130 - t24 * t187;
t145 = -t130 * t28 - t59 * t187;
t34 = t65 * t117 + t127 * t49;
t73 = -t117 * t140 + t209;
t71 = t140 * t187 + t205;
t143 = -t101 * t117 - t210;
t72 = -t101 * t187 + t206;
t81 = t223 * t107 + t128 * t108;
t139 = t34 * pkin(10);
t103 = -pkin(4) - t156;
t27 = t230 * t101 + t155 * t96 + t64;
t138 = -t27 + (t101 * t103 + t220) * qJD(5);
t54 = t155 * t101 + t81;
t95 = -pkin(5) * t187 + qJ(6) * t117 + t185;
t137 = -qJD(5) * t54 + t101 * t95 - t103 * t96 + t226;
t135 = t124 * (t157 * qJD(2) + qJD(3) * t131);
t134 = t158 * qJD(5) + t1 * t130 + t2 * t127;
t133 = t151 * qJD(5) + t17 * t127 + t16 * t130;
t99 = t101 ^ 2;
t92 = t112 + (-pkin(2) - t221) * t126;
t80 = t102 + t94;
t8 = [0, 0, 0, 0.2e1 * t166, 0.2e1 * (-t129 ^ 2 + t131 ^ 2) * t119 * qJD(2), 0.2e1 * t126 * t173, -0.2e1 * t126 * t174, 0, -0.2e1 * pkin(1) * t119 * t191 - 0.2e1 * t126 * t94, -0.2e1 * pkin(1) * t175 + 0.2e1 * t93 * t126, -0.2e1 * t94 * t196 + 0.2e1 * (t129 * t201 - t56 * t131 + (t123 * t131 * t92 + t129 * t61) * qJD(2)) * t124, 0.2e1 * t94 * t199 + 0.2e1 * (t94 * t195 + t57 * t131 + (-t129 * t62 + t92 * t194) * qJD(2)) * t124, 0.2e1 * t57 * t141 - 0.2e1 * t56 * t142 + 0.2e1 * (-t123 * t62 - t125 * t61) * t173, 0.2e1 * t56 * t61 + 0.2e1 * t57 * t62 + 0.2e1 * t92 * t94, 0.2e1 * t66 * t132, -0.2e1 * t132 * t65 - 0.2e1 * t66 * t49, -0.2e1 * t132 * t197 + 0.2e1 * t174 * t66, 0.2e1 * (t131 * t49 - t65 * t191) * t124, -0.2e1 * t166, 0.2e1 * t74 * t49 + 0.2e1 * t80 * t65 + 0.2e1 * (-t12 * t131 + t162 * t191) * t124, -0.2e1 * t11 * t197 + 0.2e1 * t74 * t132 - 0.2e1 * t216 * t174 + 0.2e1 * t80 * t66, -0.2e1 * t59 * t28, 0.2e1 * t28 * t58 - 0.2e1 * t29 * t59, -0.2e1 * t28 * t65 + 0.2e1 * t49 * t59, -0.2e1 * t29 * t65 - 0.2e1 * t49 * t58, 0.2e1 * t65 * t49, 0.2e1 * t10 * t58 + 0.2e1 * t13 * t49 + 0.2e1 * t24 * t29 + 0.2e1 * t4 * t65, 0.2e1 * t10 * t59 - 0.2e1 * t218 * t49 - 0.2e1 * t24 * t28 + 0.2e1 * t3 * t65, 0.2e1 * t15 * t29 - 0.2e1 * t2 * t65 - 0.2e1 * t49 * t7 + 0.2e1 * t5 * t58, -0.2e1 * t1 * t58 + 0.2e1 * t2 * t59 - 0.2e1 * t28 * t7 - 0.2e1 * t29 * t6, 0.2e1 * t1 * t65 + 0.2e1 * t15 * t28 + 0.2e1 * t49 * t6 - 0.2e1 * t5 * t59, 0.2e1 * t1 * t6 + 0.2e1 * t15 * t5 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, t173, -t174, 0, -t94, t93, t123 * t135 - t94 * t125, t125 * t135 + t201 (t125 * t189 + t57) * t125 + (t123 * t189 - t56) * t123, -t94 * pkin(2) + (-t123 * t61 + t125 * t62) * qJD(3) + (-t56 * t123 + t57 * t125) * qJ(3), t101 * t132 + t66 * t96, -t101 * t49 + t132 * t140 - t96 * t65 - t66 * t97 (t101 * t191 - t131 * t96) * t124 (t131 * t97 + t140 * t191) * t124, 0, -t80 * t140 + t115 * t49 + t74 * t97 + (t131 * t64 - t81 * t191) * t124, t80 * t101 + t115 * t132 - t174 * t82 - t63 * t197 + t74 * t96, t101 * t145 + t59 * t206 (-t127 * t59 - t130 * t58) * t96 + (t204 - t208 + (-t207 + t211) * qJD(5)) * t101, -t101 * t144 + t140 * t28 + t206 * t65 + t59 * t97, -t101 * t34 + t140 * t29 - t210 * t65 - t58 * t97, -t140 * t49 + t65 * t97, t101 * t147 + t13 * t97 - t140 * t4 + t210 * t24 + t22 * t65 + t81 * t29 + t46 * t49 + t64 * t58, t101 * t146 - t140 * t3 + t206 * t24 + t21 * t65 - t215 * t49 - t218 * t97 - t81 * t28 + t64 * t59, t101 * t149 + t140 * t2 + t15 * t210 - t17 * t65 + t27 * t58 + t54 * t29 - t36 * t49 - t7 * t97, -t229 * t101 + t158 * t96 - t16 * t58 + t17 * t59 - t36 * t28 - t35 * t29, -t1 * t140 + t101 * t148 - t15 * t206 + t16 * t65 - t27 * t59 + t54 * t28 + t35 * t49 + t6 * t97, t1 * t35 + t15 * t27 + t16 * t6 + t17 * t7 + t2 * t36 + t5 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, qJ(3) * t164, 0.2e1 * t212, -0.2e1 * t101 * t97 + 0.2e1 * t140 * t96, 0, 0, 0, t97 * t228, t96 * t228, 0.2e1 * t122 * t212 - 0.2e1 * t172 * t99, 0.2e1 * t99 * t167 + t168 * t96, 0.2e1 * t101 * t205 - 0.2e1 * t140 * t72, -0.2e1 * t101 * t209 - 0.2e1 * t140 * t143, -0.2e1 * t140 * t97, 0.2e1 * t81 * t210 - 0.2e1 * t22 * t140 + 0.2e1 * t46 * t97 + 0.2e1 * (t117 * t81 + t203) * t101, 0.2e1 * t81 * t206 - 0.2e1 * t21 * t140 - 0.2e1 * t215 * t97 + 0.2e1 * (-t187 * t81 + t202) * t101, 0.2e1 * t54 * t210 + 0.2e1 * t17 * t140 - 0.2e1 * t36 * t97 + 0.2e1 * (t117 * t54 + t27 * t127) * t101, -0.2e1 * t231 * t101 + 0.2e1 * t151 * t96, -0.2e1 * t54 * t206 - 0.2e1 * t16 * t140 + 0.2e1 * t35 * t97 + 0.2e1 * (-t27 * t130 + t187 * t54) * t101, 0.2e1 * t16 * t35 + 0.2e1 * t17 * t36 + 0.2e1 * t27 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, t125 * t173, 0, t94, 0, 0, 0, 0, 0, t49, t132, 0, 0, 0, 0, 0, -t144, -t34, -t144, -t145 + t217, t34, t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t96, 0, 0, 0, 0, 0, t71, -t73, t71 (-t121 - t122) * t96, t73, t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, -t49, t174, t12, t11, t59 * t117 - t204, t145 + t217, t34, -t144, 0, -pkin(4) * t29 - t139 - t146, pkin(4) * t28 + t147 + t232, t103 * t29 - t95 * t58 - t139 + t148 (-t204 - t208 + (t207 + t211) * qJD(5)) * pkin(10) + t134, t103 * t28 + t95 * t59 - t149 - t232, pkin(10) * t134 + t5 * t103 - t15 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, -t97, 0, -t64, t63, -t101 * t167 + t96 * t193, qJD(5) * t168 - t192 * t96, t73, t71, 0, -t202 + t163 * t127 + (t127 * t81 - t130 * t161) * qJD(5), t203 + t163 * t130 + (t127 * t161 + t130 * t81) * qJD(5), -t127 * t137 + t130 * t138, t133, t127 * t138 + t130 * t137, pkin(10) * t133 + t27 * t103 - t54 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t172, -0.2e1 * t167, 0, 0, 0, t127 * t183, t130 * t183, 0.2e1 * t103 * t187 + 0.2e1 * t130 * t95, 0, -0.2e1 * t103 * t117 + 0.2e1 * t127 * t95, -0.2e1 * t103 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, -t29, t49, t4, t3, t4 + 0.2e1 * t225, pkin(5) * t28 - qJ(6) * t29 - qJD(6) * t58, 0.2e1 * t200 - t3 + 0.2e1 * t214, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, t143, t97, t22, t21, t22 + 0.2e1 * t224, -t156 * t96 + (qJD(5) * t155 - t185) * t101, -0.2e1 * t186 - t21 + 0.2e1 * t213, -pkin(5) * t17 + qJ(6) * t16 + qJD(6) * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t187, -t117, -t187, 0, t117, t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, -t187, 0, -t180, t181, -t180, -t230, -t181, -t230 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, qJ(6) * t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, -t28, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, t72, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t8;
