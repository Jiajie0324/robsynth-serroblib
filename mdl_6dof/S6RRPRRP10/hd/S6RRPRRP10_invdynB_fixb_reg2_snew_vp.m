% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:47:26
% EndTime: 2019-05-06 18:49:07
% DurationCPUTime: 98.60s
% Computational Cost: add. (393938->1005), mult. (897150->1541), div. (0->0), fcn. (730216->12), ass. (0->748)
t1283 = sin(qJ(1));
t1287 = cos(qJ(1));
t1277 = sin(pkin(6));
t1279 = cos(pkin(6));
t1282 = sin(qJ(2));
t1286 = cos(qJ(2));
t1276 = sin(pkin(11));
t1278 = cos(pkin(11));
t1268 = qJD(1) * t1279 + qJD(2);
t1423 = t1277 * t1282;
t1408 = qJD(1) * t1423;
t1238 = t1268 * t1278 - t1276 * t1408;
t1239 = t1268 * t1276 + t1278 * t1408;
t1281 = sin(qJ(4));
t1285 = cos(qJ(4));
t1203 = t1238 * t1281 + t1239 * t1285;
t1280 = sin(qJ(5));
t1284 = cos(qJ(5));
t1422 = t1277 * t1286;
t1407 = qJD(1) * t1422;
t1385 = -qJD(4) + t1407;
t1175 = t1284 * t1203 - t1280 * t1385;
t1201 = -t1285 * t1238 + t1239 * t1281;
t1198 = qJD(5) + t1201;
t1412 = qJDD(1) * t1282;
t1462 = qJD(1) * t1286;
t1245 = (qJD(2) * t1462 + t1412) * t1277;
t1390 = qJDD(1) * t1279 + qJDD(2);
t1213 = t1278 * t1245 + t1276 * t1390;
t1392 = t1245 * t1276 - t1278 * t1390;
t1121 = -t1201 * qJD(4) + t1285 * t1213 - t1281 * t1392;
t1413 = qJDD(1) * t1277;
t1266 = t1286 * t1413;
t1336 = qJD(2) * t1408 - t1266;
t1327 = qJDD(4) + t1336;
t1395 = t1121 * t1280 - t1284 * t1327;
t1011 = (qJD(5) - t1198) * t1175 + t1395;
t1480 = t1198 ^ 2;
t1173 = t1203 * t1280 + t1284 * t1385;
t1481 = t1173 ^ 2;
t1127 = t1481 - t1480;
t1108 = t1175 * t1173;
t1394 = t1281 * t1213 + t1285 * t1392;
t1120 = -t1203 * qJD(4) - t1394;
t1119 = qJDD(5) - t1120;
t1494 = t1108 + t1119;
t1452 = t1494 * t1280;
t982 = t1127 * t1284 - t1452;
t909 = t1011 * t1285 + t1281 * t982;
t913 = -t1011 * t1281 + t1285 * t982;
t834 = t1276 * t909 - t1278 * t913;
t1451 = t1494 * t1284;
t977 = t1127 * t1280 + t1451;
t1366 = t1282 * t834 + t1286 * t977;
t831 = t1276 * t913 + t1278 * t909;
t754 = t1277 * t831 + t1279 * t1366;
t792 = -t1282 * t977 + t1286 * t834;
t1631 = t1283 * t754 - t1287 * t792;
t1172 = t1175 ^ 2;
t1105 = t1172 - t1481;
t1415 = qJD(5) + t1198;
t1010 = t1175 * t1415 + t1395;
t1297 = -t1284 * t1121 - t1280 * t1327;
t1294 = -t1173 * qJD(5) - t1297;
t1439 = t1173 * t1198;
t1489 = -t1439 + t1294;
t1455 = t1489 * t1280;
t920 = -t1010 * t1284 - t1455;
t887 = -t1105 * t1285 + t1281 * t920;
t889 = t1105 * t1281 + t1285 * t920;
t809 = t1276 * t887 - t1278 * t889;
t914 = -t1010 * t1280 + t1284 * t1489;
t1374 = t1282 * t809 + t1286 * t914;
t808 = t1276 * t889 + t1278 * t887;
t735 = t1277 * t808 + t1279 * t1374;
t771 = -t1282 * t914 + t1286 * t809;
t1630 = t1283 * t735 - t1287 * t771;
t1629 = t1283 * t792 + t1287 * t754;
t1628 = t1283 * t771 + t1287 * t735;
t1623 = t1277 * t1366 - t1279 * t831;
t1622 = t1277 * t1374 - t1279 * t808;
t1490 = -t1439 - t1294;
t1528 = -t1011 * t1280 + t1490 * t1284;
t1493 = t1172 + t1481;
t1527 = -t1011 * t1284 - t1490 * t1280;
t1547 = -t1281 * t1493 + t1285 * t1527;
t1549 = t1281 * t1527 + t1285 * t1493;
t1568 = -t1276 * t1549 + t1278 * t1547;
t1589 = t1282 * t1528 + t1286 * t1568;
t1567 = t1276 * t1547 + t1278 * t1549;
t1591 = t1282 * t1568 - t1286 * t1528;
t1601 = -t1277 * t1567 + t1279 * t1591;
t1610 = t1283 * t1589 + t1287 * t1601;
t1621 = pkin(7) * t1610;
t1612 = -t1283 * t1601 + t1287 * t1589;
t1620 = pkin(7) * t1612;
t1615 = pkin(1) * t1601;
t1603 = t1277 * t1591 + t1279 * t1567;
t1614 = pkin(1) * t1603;
t1128 = -t1172 + t1480;
t1495 = -t1108 + t1119;
t1450 = t1495 * t1280;
t1530 = -t1128 * t1284 - t1450;
t1449 = t1495 * t1284;
t1529 = -t1128 * t1280 + t1449;
t1546 = -t1281 * t1490 + t1285 * t1529;
t1548 = t1281 * t1529 + t1285 * t1490;
t1570 = -t1276 * t1548 + t1278 * t1546;
t1590 = -t1282 * t1530 + t1286 * t1570;
t1569 = t1276 * t1546 + t1278 * t1548;
t1592 = t1282 * t1570 + t1286 * t1530;
t1600 = -t1277 * t1569 + t1279 * t1592;
t1613 = -t1283 * t1600 + t1287 * t1590;
t1611 = t1283 * t1590 + t1287 * t1600;
t1609 = (-t1277 * t1603 - t1279 * t1601) * pkin(8);
t1608 = pkin(8) * t1589;
t1602 = t1277 * t1592 + t1279 * t1569;
t1599 = qJ(3) * t1567;
t1594 = -pkin(2) * t1567 - pkin(3) * t1549 - pkin(4) * t1493 - pkin(10) * t1527;
t1593 = -pkin(2) * t1528 + qJ(3) * t1568;
t1083 = t1480 + t1172;
t955 = t1083 * t1284 + t1452;
t1588 = pkin(2) * t955;
t1587 = pkin(3) * t955;
t1586 = pkin(4) * t955;
t1585 = pkin(10) * t955;
t966 = t1083 * t1280 - t1451;
t1584 = pkin(10) * t966;
t1583 = pkin(9) * t1547;
t1582 = pkin(9) * t1549;
t1581 = t1281 * t966;
t1580 = t1282 * t955;
t1578 = t1285 * t966;
t1577 = t1286 * t955;
t1434 = t1198 * t1284;
t1123 = t1175 * t1434;
t1435 = t1198 * t1280;
t1404 = t1173 * t1435;
t1382 = t1123 + t1404;
t1122 = t1175 * t1435;
t1403 = t1173 * t1434;
t1383 = t1122 - t1403;
t1484 = t1119 * t1281 + t1285 * t1383;
t1487 = -t1285 * t1119 + t1281 * t1383;
t1509 = -t1276 * t1487 + t1278 * t1484;
t1524 = -t1282 * t1382 + t1286 * t1509;
t1508 = t1276 * t1484 + t1278 * t1487;
t1526 = t1282 * t1509 + t1286 * t1382;
t1550 = -t1277 * t1508 + t1279 * t1526;
t1574 = -t1283 * t1550 + t1287 * t1524;
t1058 = -qJD(5) * t1175 - t1395;
t1331 = -t1058 * t1284 - t1404;
t1332 = -t1058 * t1280 + t1403;
t1406 = t1281 * t1108;
t1485 = t1285 * t1332 - t1406;
t1405 = t1285 * t1108;
t1486 = t1281 * t1332 + t1405;
t1507 = -t1276 * t1486 + t1278 * t1485;
t1523 = -t1282 * t1331 + t1286 * t1507;
t1506 = t1276 * t1485 + t1278 * t1486;
t1525 = t1282 * t1507 + t1286 * t1331;
t1551 = -t1277 * t1506 + t1279 * t1525;
t1573 = -t1283 * t1551 + t1287 * t1523;
t1572 = t1283 * t1524 + t1287 * t1550;
t1571 = t1283 * t1523 + t1287 * t1551;
t1565 = pkin(10) * t1528;
t1553 = t1277 * t1525 + t1279 * t1506;
t1552 = t1277 * t1526 + t1279 * t1508;
t1488 = -t1480 - t1481;
t1512 = t1280 * t1488 + t1449;
t1545 = pkin(2) * t1512;
t1544 = pkin(3) * t1512;
t1543 = pkin(4) * t1512;
t1511 = t1284 * t1488 - t1450;
t1542 = pkin(10) * t1511;
t1541 = pkin(10) * t1512;
t1534 = t1281 * t1511;
t1533 = t1282 * t1512;
t1532 = t1285 * t1511;
t1531 = t1286 * t1512;
t1005 = -t1280 * t1294 - t1123;
t1421 = t1279 * t1282;
t1006 = t1284 * t1294 - t1122;
t1384 = t1285 * t1006 + t1406;
t1387 = t1281 * t1006 - t1405;
t1482 = t1276 * t1384 + t1278 * t1387;
t1483 = -t1276 * t1387 + t1278 * t1384;
t1505 = t1279 * t1286 * t1005 - t1277 * t1482 + t1421 * t1483;
t1510 = -t1005 * t1282 + t1286 * t1483;
t1522 = t1283 * t1510 + t1287 * t1505;
t1521 = -t1283 * t1505 + t1287 * t1510;
t1520 = 2 * qJD(6);
t1518 = qJ(6) * t1489;
t1189 = t1201 * t1385;
t1513 = t1189 + t1121;
t1504 = t1005 * t1422 + t1279 * t1482 + t1423 * t1483;
t1352 = t1385 ^ 2;
t1273 = t1277 ^ 2;
t1288 = qJD(1) ^ 2;
t1424 = t1273 * t1288;
t1430 = t1238 * t1239;
t1304 = t1336 + t1430;
t1503 = t1276 * t1304;
t1502 = t1278 * t1304;
t1433 = t1201 * t1203;
t1300 = t1327 - t1433;
t1501 = t1281 * t1300;
t1498 = t1285 * t1300;
t1224 = t1238 * t1407;
t1181 = -t1224 - t1213;
t1225 = t1239 * t1407;
t1182 = t1225 + t1392;
t1253 = t1268 * t1407;
t1216 = t1253 + t1245;
t1333 = t1385 * t1203;
t1309 = t1285 * t1333;
t1312 = t1281 * t1189;
t1117 = t1312 + t1309;
t1310 = t1285 * t1189;
t1311 = t1281 * t1333;
t1118 = t1310 - t1311;
t1039 = -t1117 * t1276 + t1118 * t1278;
t1492 = t1282 * t1039 - t1286 * t1327;
t1252 = t1268 * t1408;
t1491 = t1336 + t1252;
t1104 = pkin(5) * t1173 - qJ(6) * t1175;
t1140 = pkin(4) * t1201 - pkin(10) * t1203;
t1262 = g(1) * t1283 - t1287 * g(2);
t1472 = pkin(8) * t1277;
t1301 = qJDD(1) * pkin(1) + t1288 * t1472 + t1262;
t1417 = qJD(2) + t1268;
t1468 = t1245 * qJ(3);
t1470 = qJ(3) * t1286;
t1471 = t1279 * g(3);
t1476 = pkin(2) * t1282;
t1291 = -t1266 * pkin(2) - t1471 - t1468 + ((-t1268 * t1470 + t1417 * t1476) * qJD(1) - t1301) * t1277;
t1263 = g(1) * t1287 + g(2) * t1283;
t1241 = -pkin(1) * t1288 + pkin(8) * t1413 - t1263;
t1475 = pkin(2) * t1286;
t1386 = -qJ(3) * t1282 - t1475;
t1463 = qJD(1) * t1277;
t1242 = t1386 * t1463;
t1299 = t1279 * t1301;
t1295 = -g(3) * t1423 + t1282 * t1299;
t1293 = qJ(3) * t1390 + t1295;
t1478 = t1268 ^ 2;
t1292 = -t1478 * pkin(2) + (t1242 * t1463 + t1241) * t1286 + t1293;
t1477 = 2 * qJD(3);
t1055 = t1238 * t1477 + t1276 * t1291 + t1278 * t1292;
t1214 = -pkin(3) * t1407 - pkin(9) * t1239;
t1479 = t1238 ^ 2;
t1024 = -pkin(3) * t1479 - pkin(9) * t1392 + t1214 * t1407 + t1055;
t1411 = t1239 * t1477;
t1054 = t1276 * t1292 - t1278 * t1291 + t1411;
t1290 = pkin(3) * t1304 + pkin(9) * t1181 - t1054;
t925 = t1285 * t1024 + t1281 * t1290;
t885 = -pkin(4) * t1352 + pkin(10) * t1327 - t1201 * t1140 + t925;
t1393 = t1282 * t1241 - t1286 * t1299;
t1151 = qJDD(3) - t1390 * pkin(2) - t1478 * qJ(3) + (qJD(1) * t1242 * t1282 + g(3) * t1286) * t1277 + t1393;
t1061 = t1392 * pkin(3) - t1479 * pkin(9) + t1239 * t1214 + t1151;
t933 = -t1513 * pkin(10) + (-t1120 - t1333) * pkin(4) + t1061;
t837 = t1280 * t933 + t1284 * t885;
t1379 = t1119 * qJ(6) - t1173 * t1104 + t1198 * t1520 + t837;
t1199 = t1201 ^ 2;
t1200 = t1203 ^ 2;
t1236 = t1239 ^ 2;
t1474 = pkin(4) * t1281;
t1473 = pkin(5) * t1284;
t836 = t1280 * t885 - t1284 * t933;
t1469 = qJ(6) * t1284;
t924 = t1024 * t1281 - t1285 * t1290;
t843 = t1281 * t925 - t1285 * t924;
t1467 = t1276 * t843;
t1466 = t1278 * t843;
t884 = -t1327 * pkin(4) - t1352 * pkin(10) + t1140 * t1203 + t924;
t1465 = t1280 * t884;
t1464 = t1284 * t884;
t1448 = t1061 * t1281;
t1447 = t1061 * t1285;
t1130 = -t1327 - t1433;
t1443 = t1130 * t1281;
t1442 = t1130 * t1285;
t1441 = t1151 * t1276;
t1440 = t1151 * t1278;
t1186 = -t1336 + t1430;
t1438 = t1186 * t1276;
t1437 = t1186 * t1278;
t1436 = t1198 * t1175;
t1226 = t1277 * t1301 + t1471;
t1432 = t1226 * t1282;
t1431 = t1226 * t1286;
t1419 = t1282 * t1286;
t1397 = t1273 * t1419;
t1261 = t1288 * t1397;
t1243 = -t1261 + t1390;
t1429 = t1243 * t1282;
t1428 = t1243 * t1286;
t1244 = t1261 + t1390;
t1427 = t1244 * t1282;
t1426 = t1244 * t1286;
t1425 = t1277 * t1424;
t1418 = t1286 * t1241;
t1414 = t1493 - t1480;
t1410 = -pkin(4) * t1285 - pkin(3);
t1409 = t1268 * t1463;
t1402 = t1282 * t1433;
t1401 = t1286 * t1433;
t1400 = t1282 * t1430;
t1399 = t1286 * t1430;
t1274 = t1282 ^ 2;
t1398 = t1274 * t1424;
t1396 = qJ(6) * t1280 + pkin(4);
t844 = t1281 * t924 + t1285 * t925;
t963 = t1054 * t1276 + t1278 * t1055;
t1228 = -t1262 * t1283 - t1287 * t1263;
t1389 = t1175 * t1104 + qJDD(6) + t836;
t1260 = qJDD(1) * t1287 - t1283 * t1288;
t1388 = -pkin(7) * t1260 - g(3) * t1283;
t1235 = -t1398 - t1478;
t1204 = -t1235 * t1282 - t1428;
t1381 = pkin(8) * t1204 - t1432;
t1275 = t1286 ^ 2;
t1267 = t1275 * t1424;
t1249 = -t1267 - t1478;
t1208 = t1249 * t1286 - t1427;
t1380 = pkin(8) * t1208 + t1431;
t759 = t1280 * t837 - t1284 * t836;
t760 = t1280 * t836 + t1284 * t837;
t788 = -pkin(5) * t1480 + t1379;
t1328 = -pkin(5) * t1119 + t1389;
t796 = qJ(6) * t1480 - t1328;
t742 = -t1280 * t796 + t1284 * t788;
t1298 = -t1058 * pkin(5) - t1518 + t884;
t814 = (pkin(5) * t1198 - (2 * qJD(6))) * t1175 + t1298;
t719 = t1281 * t742 - t1285 * t814;
t720 = t1281 * t814 + t1285 * t742;
t675 = -t1276 * t719 + t1278 * t720;
t741 = t1280 * t788 + t1284 * t796;
t1378 = t1282 * t675 - t1286 * t741;
t739 = t1281 * t760 - t1285 * t884;
t740 = t1281 * t884 + t1285 * t760;
t688 = -t1276 * t739 + t1278 * t740;
t1377 = t1282 * t688 - t1286 * t759;
t890 = t1285 * t1489 - t1581;
t892 = -t1281 * t1489 - t1578;
t818 = -t1276 * t890 + t1278 * t892;
t1372 = t1282 * t818 - t1577;
t891 = -t1010 * t1285 + t1534;
t893 = t1010 * t1281 + t1532;
t819 = -t1276 * t891 + t1278 * t893;
t1371 = t1282 * t819 - t1531;
t1018 = t1173 * t1415 + t1297;
t894 = t1018 * t1285 + t1581;
t896 = -t1018 * t1281 + t1578;
t823 = -t1276 * t894 + t1278 * t896;
t1370 = t1282 * t823 + t1577;
t1012 = -t1058 + t1436;
t895 = -t1012 * t1285 + t1534;
t897 = t1012 * t1281 + t1532;
t824 = -t1276 * t895 + t1278 * t897;
t1369 = t1282 * t824 - t1531;
t765 = t1278 * t844 - t1467;
t1360 = -t1061 * t1286 + t1282 * t765;
t1084 = (0.2e1 * qJD(4) - t1407) * t1203 + t1394;
t1138 = -t1352 - t1199;
t1049 = t1138 * t1281 + t1498;
t1050 = t1138 * t1285 - t1501;
t946 = -t1049 * t1276 + t1050 * t1278;
t1359 = -t1084 * t1286 + t1282 * t946;
t1162 = -t1200 - t1352;
t1069 = t1162 * t1285 + t1443;
t1070 = -t1162 * t1281 + t1442;
t970 = -t1069 * t1276 + t1070 * t1278;
t1358 = t1282 * t970 - t1286 * t1513;
t1088 = -t1121 + t1189;
t1180 = -t1200 + t1352;
t1078 = t1180 * t1285 + t1501;
t1080 = -t1180 * t1281 + t1498;
t985 = -t1078 * t1276 + t1080 * t1278;
t1357 = t1088 * t1286 + t1282 * t985;
t1089 = t1203 * t1407 + t1394;
t1179 = t1199 - t1352;
t1079 = t1179 * t1281 - t1442;
t1081 = t1179 * t1285 + t1443;
t986 = -t1079 * t1276 + t1081 * t1278;
t1356 = t1089 * t1286 + t1282 * t986;
t1099 = -t1199 - t1200;
t992 = t1088 * t1285 - t1089 * t1281;
t994 = -t1088 * t1281 - t1089 * t1285;
t905 = -t1276 * t992 + t1278 * t994;
t1355 = -t1099 * t1286 + t1282 * t905;
t1142 = -t1200 + t1199;
t991 = -t1084 * t1281 + t1285 * t1513;
t993 = -t1084 * t1285 - t1281 * t1513;
t904 = -t1276 * t991 + t1278 * t993;
t1354 = t1142 * t1286 + t1282 * t904;
t1353 = -t1151 * t1286 + t1282 * t963;
t1351 = qJD(1) * t1268 - t1279 * t1288;
t962 = -t1054 * t1278 + t1055 * t1276;
t1183 = t1225 - t1392;
t1185 = -t1224 + t1213;
t1111 = t1183 * t1278 - t1185 * t1276;
t1205 = -t1236 + t1479;
t1350 = t1111 * t1282 + t1205 * t1286;
t1112 = -t1181 * t1276 - t1182 * t1278;
t1176 = t1236 + t1479;
t1349 = t1112 * t1282 + t1176 * t1286;
t1197 = -t1267 - t1479;
t1125 = t1197 * t1278 - t1503;
t1348 = t1125 * t1282 + t1183 * t1286;
t1222 = -t1236 - t1267;
t1146 = -t1222 * t1276 + t1437;
t1347 = t1146 * t1282 - t1185 * t1286;
t1221 = -t1236 + t1267;
t1147 = -t1221 * t1276 + t1502;
t1346 = t1147 * t1282 + t1181 * t1286;
t1220 = -t1267 + t1479;
t1148 = t1220 * t1278 + t1438;
t1345 = t1148 * t1282 + t1182 * t1286;
t1194 = g(3) * t1422 + t1393;
t1195 = t1295 + t1418;
t1344 = -t1194 * t1286 + t1195 * t1282;
t1139 = t1194 * t1282 + t1195 * t1286;
t1343 = t1216 * t1286 - t1282 * t1491;
t1217 = -t1253 + t1245;
t1218 = t1252 - t1336;
t1342 = -t1217 * t1286 + t1218 * t1282;
t1341 = t1235 * t1286 - t1429;
t1248 = t1267 - t1478;
t1340 = t1248 * t1282 + t1428;
t1247 = -t1398 + t1478;
t1339 = t1247 * t1286 + t1427;
t1338 = t1249 * t1282 + t1426;
t1227 = t1262 * t1287 - t1263 * t1283;
t1337 = t1277 * t1390;
t1073 = t1285 * t1120 - t1312;
t1074 = -t1281 * t1120 - t1310;
t973 = -t1073 * t1276 + t1074 * t1278;
t1335 = t1282 * t973 + t1401;
t1075 = t1281 * t1121 - t1309;
t1076 = t1285 * t1121 + t1311;
t974 = -t1075 * t1276 + t1076 * t1278;
t1334 = t1282 * t974 - t1401;
t1167 = t1224 * t1278 + t1276 * t1392;
t1330 = t1167 * t1282 - t1399;
t1169 = t1213 * t1278 + t1225 * t1276;
t1329 = t1169 * t1282 + t1399;
t689 = -pkin(4) * t741 - pkin(5) * t796 - qJ(6) * t788;
t691 = -pkin(10) * t741 + (pkin(5) * t1280 - t1469) * t814;
t655 = -pkin(3) * t741 + pkin(9) * t720 + t1281 * t691 + t1285 * t689;
t659 = -pkin(9) * t719 - t1281 * t689 + t1285 * t691;
t674 = t1276 * t720 + t1278 * t719;
t634 = -qJ(3) * t674 - t1276 * t655 + t1278 * t659;
t653 = -pkin(2) * t674 - pkin(3) * t719 - pkin(10) * t742 + (t1396 + t1473) * t814;
t669 = t1282 * t741 + t1286 * t675;
t1326 = pkin(8) * t669 + t1282 * t634 + t1286 * t653;
t673 = pkin(9) * t740 + (-pkin(10) * t1281 + t1410) * t759;
t681 = -pkin(9) * t739 + (-pkin(10) * t1285 + t1474) * t759;
t687 = t1276 * t740 + t1278 * t739;
t645 = -qJ(3) * t687 - t1276 * t673 + t1278 * t681;
t665 = -pkin(2) * t687 - pkin(3) * t739 + pkin(4) * t884 - pkin(10) * t760;
t677 = t1282 * t759 + t1286 * t688;
t1325 = pkin(8) * t677 + t1282 * t645 + t1286 * t665;
t777 = pkin(5) * t1414 + t1379;
t780 = qJ(6) * t1414 + t1328;
t722 = -t1280 * t777 + t1284 * t780 - t1565;
t842 = -pkin(4) * t1528 - pkin(5) * t1490 + qJ(6) * t1011;
t685 = -pkin(3) * t1528 + t1281 * t722 + t1285 * t842 + t1583;
t690 = -t1281 * t842 + t1285 * t722 - t1582;
t663 = -t1276 * t685 + t1278 * t690 - t1599;
t686 = -t1280 * t780 - t1284 * t777 + t1594;
t1324 = t1282 * t663 + t1286 * t686 + t1608;
t761 = -t1586 - qJ(6) * t1494 + (-t1083 + t1480) * pkin(5) - t1379;
t1296 = t1175 * t1520 - t1298;
t783 = -pkin(5) * t1436 + t1296 + t1518;
t762 = -pkin(5) * t1455 + t1284 * t783 - t1585;
t692 = pkin(9) * t892 + t1281 * t762 + t1285 * t761 - t1587;
t700 = -pkin(9) * t890 - t1281 * t761 + t1285 * t762;
t816 = t1276 * t892 + t1278 * t890;
t667 = -qJ(3) * t816 - t1276 * t692 + t1278 * t700;
t716 = -pkin(2) * t816 - pkin(3) * t890 + t1584 - t1280 * t783 + (-pkin(4) - t1473) * t1489;
t778 = t1286 * t818 + t1580;
t1323 = pkin(8) * t778 + t1282 * t667 + t1286 * t716;
t784 = (-t1012 - t1436) * pkin(5) + t1296;
t763 = -t1012 * t1469 - t1280 * t784 - t1541;
t766 = -t1543 + (-t1488 - t1480) * qJ(6) + (-t1495 - t1119) * pkin(5) + t1389;
t697 = pkin(9) * t897 + t1281 * t763 + t1285 * t766 - t1544;
t701 = -pkin(9) * t895 - t1281 * t766 + t1285 * t763;
t822 = t1276 * t897 + t1278 * t895;
t668 = -qJ(3) * t822 - t1276 * t697 + t1278 * t701;
t717 = -pkin(2) * t822 - pkin(3) * t895 + t1012 * t1396 - t1284 * t784 - t1542;
t782 = t1286 * t824 + t1533;
t1322 = pkin(8) * t782 + t1282 * t668 + t1286 * t717;
t751 = -t759 - t1565;
t703 = t1281 * t751 + t1410 * t1528 + t1583;
t721 = t1285 * t751 + t1474 * t1528 - t1582;
t671 = -t1276 * t703 + t1278 * t721 - t1599;
t699 = t1594 - t760;
t1321 = t1282 * t671 + t1286 * t699 + t1608;
t786 = t836 - t1543;
t849 = t1465 - t1541;
t725 = pkin(9) * t893 + t1281 * t849 + t1285 * t786 - t1544;
t734 = -pkin(9) * t891 - t1281 * t786 + t1285 * t849;
t817 = t1276 * t893 + t1278 * t891;
t679 = -qJ(3) * t817 - t1276 * t725 + t1278 * t734;
t733 = -pkin(2) * t817 - pkin(3) * t891 + pkin(4) * t1010 + t1464 - t1542;
t779 = t1286 * t819 + t1533;
t1320 = pkin(8) * t779 + t1282 * t679 + t1286 * t733;
t787 = t837 + t1586;
t850 = t1464 + t1585;
t726 = pkin(9) * t896 + t1281 * t850 + t1285 * t787 + t1587;
t738 = -pkin(9) * t894 - t1281 * t787 + t1285 * t850;
t821 = t1276 * t896 + t1278 * t894;
t680 = -qJ(3) * t821 - t1276 * t726 + t1278 * t738;
t737 = -pkin(2) * t821 - pkin(3) * t894 - pkin(4) * t1018 - t1465 - t1584;
t781 = t1286 * t823 - t1580;
t1319 = pkin(8) * t781 + t1282 * t680 + t1286 * t737;
t764 = t1276 * t844 + t1466;
t827 = -pkin(3) * t1061 + pkin(9) * t844;
t711 = -pkin(9) * t1466 - qJ(3) * t764 - t1276 * t827;
t732 = -pkin(2) * t764 - pkin(3) * t843;
t758 = t1061 * t1282 + t1286 * t765;
t1318 = pkin(8) * t758 + t1282 * t711 + t1286 * t732;
t789 = -pkin(3) * t1099 + pkin(9) * t994 + t844;
t804 = -pkin(9) * t992 - t843;
t903 = t1276 * t994 + t1278 * t992;
t727 = -qJ(3) * t903 - t1276 * t789 + t1278 * t804;
t856 = -pkin(2) * t903 - pkin(3) * t992;
t874 = t1099 * t1282 + t1286 * t905;
t1317 = pkin(8) * t874 + t1282 * t727 + t1286 * t856;
t927 = -pkin(3) * t1084 + pkin(9) * t1050 - t1447;
t945 = t1049 * t1278 + t1050 * t1276;
t959 = -pkin(9) * t1049 + t1448;
t820 = -qJ(3) * t945 - t1276 * t927 + t1278 * t959;
t840 = -pkin(2) * t945 - pkin(3) * t1049 + t924;
t922 = t1084 * t1282 + t1286 * t946;
t1316 = pkin(8) * t922 + t1282 * t820 + t1286 * t840;
t928 = -pkin(3) * t1513 + pkin(9) * t1070 + t1448;
t968 = -pkin(9) * t1069 + t1447;
t969 = t1069 * t1278 + t1070 * t1276;
t838 = -qJ(3) * t969 - t1276 * t928 + t1278 * t968;
t851 = -pkin(2) * t969 - pkin(3) * t1069 + t925;
t929 = t1282 * t1513 + t1286 * t970;
t1315 = pkin(8) * t929 + t1282 * t838 + t1286 * t851;
t1314 = t1282 * t1336;
t1313 = t1286 * t1336;
t1124 = t1197 * t1276 + t1502;
t1009 = t1276 * (t1242 * t1407 + t1293 + t1418) - t1278 * (-qJ(3) * t1253 - t1226 - t1468) + t1411 + (-t1276 * t1478 - t1278 * t1491 - t1124) * pkin(2);
t1053 = -qJ(3) * t1124 + t1441;
t1077 = t1125 * t1286 - t1183 * t1282;
t1308 = pkin(8) * t1077 + t1009 * t1286 + t1053 * t1282;
t1143 = t1222 * t1278 + t1438;
t1020 = -pkin(2) * t1143 + t1055;
t1067 = -qJ(3) * t1143 + t1440;
t1095 = t1146 * t1286 + t1185 * t1282;
t1307 = pkin(8) * t1095 + t1020 * t1286 + t1067 * t1282;
t1163 = t1217 * t1282 + t1218 * t1286;
t1306 = pkin(8) * t1163 + t1139;
t1064 = t1112 * t1286 - t1176 * t1282;
t1110 = t1181 * t1278 - t1182 * t1276;
t932 = -qJ(3) * t1110 - t962;
t1305 = pkin(8) * t1064 - t1110 * t1475 + t1282 * t932;
t939 = t1151 * t1282 + t1286 * t963;
t1302 = pkin(8) * t939 + t1386 * t962;
t1259 = qJDD(1) * t1283 + t1287 * t1288;
t1251 = -t1267 - t1398;
t1250 = -t1267 + t1398;
t1246 = -pkin(7) * t1259 + g(3) * t1287;
t1233 = t1279 * t1313;
t1232 = t1277 * t1313;
t1223 = (t1274 + t1275) * t1409;
t1215 = (t1417 * t1462 + t1412) * t1277;
t1210 = t1245 * t1286 - t1274 * t1409;
t1209 = -t1275 * t1409 + t1314;
t1207 = t1248 * t1286 - t1429;
t1206 = -t1247 * t1282 + t1426;
t1193 = (t1216 * t1279 + t1286 * t1425) * t1282;
t1192 = -t1233 + (-t1279 * t1409 - t1425) * t1419;
t1178 = (-t1238 * t1278 - t1239 * t1276) * t1407;
t1177 = (-t1238 * t1276 + t1239 * t1278) * t1407;
t1168 = t1213 * t1276 - t1225 * t1278;
t1166 = t1224 * t1276 - t1278 * t1392;
t1164 = -t1216 * t1282 - t1286 * t1491;
t1161 = -t1277 * t1491 + t1279 * t1338;
t1160 = -t1218 * t1277 + t1279 * t1340;
t1159 = -t1217 * t1277 + t1279 * t1339;
t1158 = t1277 * t1338 + t1279 * t1491;
t1157 = -t1215 * t1277 + t1279 * t1341;
t1156 = t1215 * t1279 + t1277 * t1341;
t1155 = t1286 * t1178 + t1314;
t1154 = -t1250 * t1277 + t1279 * t1343;
t1153 = -t1251 * t1277 + t1279 * t1342;
t1152 = t1251 * t1279 + t1277 * t1342;
t1145 = t1220 * t1276 - t1437;
t1144 = t1221 * t1278 + t1503;
t1137 = t1169 * t1286 - t1400;
t1136 = t1167 * t1286 + t1400;
t1115 = -t1161 * t1283 + t1208 * t1287;
t1114 = t1161 * t1287 + t1208 * t1283;
t1109 = t1183 * t1276 + t1185 * t1278;
t1103 = -t1157 * t1283 + t1204 * t1287;
t1102 = t1157 * t1287 + t1204 * t1283;
t1101 = t1226 * t1277 + t1279 * t1344;
t1100 = -t1226 * t1279 + t1277 * t1344;
t1098 = -t1177 * t1277 + t1178 * t1421 - t1233;
t1097 = t1148 * t1286 - t1182 * t1282;
t1096 = t1147 * t1286 - t1181 * t1282;
t1092 = -t1153 * t1283 + t1163 * t1287;
t1091 = t1153 * t1287 + t1163 * t1283;
t1090 = t1111 * t1286 - t1205 * t1282;
t1072 = -t1168 * t1277 + t1279 * t1329;
t1071 = -t1166 * t1277 + t1279 * t1330;
t1068 = -t1432 + (-t1158 * t1277 - t1161 * t1279) * pkin(8);
t1060 = -t1431 + (-t1156 * t1277 - t1157 * t1279) * pkin(8);
t1059 = -pkin(1) * t1158 + t1194 * t1277 + t1279 * t1380;
t1051 = -pkin(1) * t1156 + t1195 * t1277 + t1279 * t1381;
t1038 = t1117 * t1278 + t1118 * t1276;
t1037 = -pkin(2) * t1185 + qJ(3) * t1146 + t1441;
t1036 = pkin(8) * t1139 * t1279 - pkin(1) * t1100;
t1035 = -t1101 * t1283 + t1139 * t1287;
t1034 = t1101 * t1287 + t1139 * t1283;
t1033 = -t1145 * t1277 + t1279 * t1345;
t1032 = -t1144 * t1277 + t1279 * t1346;
t1031 = -t1143 * t1277 + t1279 * t1347;
t1030 = t1143 * t1279 + t1277 * t1347;
t1029 = pkin(2) * t1183 + qJ(3) * t1125 - t1440;
t1028 = t1286 * t1039 + t1282 * t1327;
t1027 = -pkin(1) * t1152 + t1279 * t1306;
t1026 = (-t1100 * t1277 - t1101 * t1279) * pkin(8);
t1025 = (-t1152 * t1277 - t1153 * t1279) * pkin(8) - t1344;
t1023 = -t1124 * t1277 + t1279 * t1348;
t1022 = t1124 * t1279 + t1277 * t1348;
t1019 = -t1109 * t1277 + t1279 * t1350;
t1008 = -t1110 * t1277 + t1279 * t1349;
t1007 = t1110 * t1279 + t1277 * t1349;
t984 = t1079 * t1278 + t1081 * t1276;
t983 = t1078 * t1278 + t1080 * t1276;
t972 = t1075 * t1278 + t1076 * t1276;
t971 = t1073 * t1278 + t1074 * t1276;
t961 = -t1031 * t1283 + t1095 * t1287;
t960 = t1031 * t1287 + t1095 * t1283;
t944 = t1286 * t974 + t1402;
t943 = t1286 * t973 - t1402;
t942 = -t1023 * t1283 + t1077 * t1287;
t941 = t1023 * t1287 + t1077 * t1283;
t940 = -pkin(2) * t1151 + qJ(3) * t963;
t938 = -t1008 * t1283 + t1064 * t1287;
t937 = t1008 * t1287 + t1064 * t1283;
t936 = -t1277 * t1038 + t1279 * t1492;
t935 = -t1089 * t1282 + t1286 * t986;
t934 = -t1088 * t1282 + t1286 * t985;
t926 = pkin(2) * t1176 + qJ(3) * t1112 + t963;
t902 = t1276 * t993 + t1278 * t991;
t881 = -t1142 * t1282 + t1286 * t904;
t876 = -t1277 * t972 + t1279 * t1334;
t875 = -t1277 * t971 + t1279 * t1335;
t873 = -t1277 * t984 + t1279 * t1356;
t872 = -t1277 * t983 + t1279 * t1357;
t863 = -t1277 * t969 + t1279 * t1358;
t862 = t1277 * t1358 + t1279 * t969;
t859 = -t1277 * t962 + t1279 * t1353;
t858 = t1277 * t1353 + t1279 * t962;
t857 = -t1020 * t1282 + t1067 * t1286 + (-t1030 * t1277 - t1031 * t1279) * pkin(8);
t855 = -t1277 * t945 + t1279 * t1359;
t854 = t1277 * t1359 + t1279 * t945;
t853 = -t1009 * t1282 + t1053 * t1286 + (-t1022 * t1277 - t1023 * t1279) * pkin(8);
t852 = -pkin(1) * t1030 - t1037 * t1277 + t1279 * t1307;
t841 = -pkin(1) * t1022 - t1029 * t1277 + t1279 * t1308;
t839 = t1110 * t1476 + t1286 * t932 + (-t1007 * t1277 - t1008 * t1279) * pkin(8);
t826 = -t1283 * t859 + t1287 * t939;
t825 = t1283 * t939 + t1287 * t859;
t815 = -pkin(2) * t1513 + qJ(3) * t970 + t1276 * t968 + t1278 * t928;
t813 = -t1283 * t863 + t1287 * t929;
t812 = t1283 * t929 + t1287 * t863;
t811 = -t1277 * t902 + t1279 * t1354;
t806 = -t1277 * t903 + t1279 * t1355;
t805 = t1277 * t1355 + t1279 * t903;
t803 = -pkin(2) * t1084 + qJ(3) * t946 + t1276 * t959 + t1278 * t927;
t795 = -t1283 * t855 + t1287 * t922;
t794 = t1283 * t922 + t1287 * t855;
t785 = -pkin(1) * t1007 - t1277 * t926 + t1279 * t1305;
t768 = -t1283 * t806 + t1287 * t874;
t767 = t1283 * t874 + t1287 * t806;
t757 = (-t1470 + t1476) * t962 + (-t1277 * t858 - t1279 * t859) * pkin(8);
t756 = -pkin(1) * t858 - t1277 * t940 + t1279 * t1302;
t750 = -t1277 * t822 + t1279 * t1369;
t749 = -t1277 * t821 + t1279 * t1370;
t748 = t1277 * t1369 + t1279 * t822;
t747 = t1277 * t1370 + t1279 * t821;
t746 = -t1277 * t817 + t1279 * t1371;
t745 = -t1277 * t816 + t1279 * t1372;
t744 = t1277 * t1371 + t1279 * t817;
t743 = t1277 * t1372 + t1279 * t816;
t724 = -pkin(2) * t1099 + qJ(3) * t905 + t1276 * t804 + t1278 * t789;
t723 = -t1282 * t851 + t1286 * t838 + (-t1277 * t862 - t1279 * t863) * pkin(8);
t718 = -t1282 * t840 + t1286 * t820 + (-t1277 * t854 - t1279 * t855) * pkin(8);
t715 = -t1283 * t750 + t1287 * t782;
t714 = -t1283 * t749 + t1287 * t781;
t713 = t1283 * t782 + t1287 * t750;
t712 = t1283 * t781 + t1287 * t749;
t710 = -t1277 * t764 + t1279 * t1360;
t709 = t1277 * t1360 + t1279 * t764;
t708 = -t1283 * t746 + t1287 * t779;
t707 = -t1283 * t745 + t1287 * t778;
t706 = t1283 * t779 + t1287 * t746;
t705 = t1283 * t778 + t1287 * t745;
t704 = -pkin(2) * t1061 - pkin(9) * t1467 + qJ(3) * t765 + t1278 * t827;
t702 = -pkin(1) * t862 - t1277 * t815 + t1279 * t1315;
t698 = -pkin(1) * t854 - t1277 * t803 + t1279 * t1316;
t684 = -t1283 * t710 + t1287 * t758;
t683 = t1283 * t758 + t1287 * t710;
t682 = -t1282 * t856 + t1286 * t727 + (-t1277 * t805 - t1279 * t806) * pkin(8);
t678 = qJ(3) * t823 + t1276 * t738 + t1278 * t726 + t1588;
t676 = qJ(3) * t819 + t1276 * t734 + t1278 * t725 - t1545;
t672 = -pkin(1) * t805 - t1277 * t724 + t1279 * t1317;
t670 = t1276 * t721 + t1278 * t703 + t1593;
t666 = qJ(3) * t824 + t1276 * t701 + t1278 * t697 - t1545;
t664 = qJ(3) * t818 + t1276 * t700 + t1278 * t692 - t1588;
t662 = t1276 * t690 + t1278 * t685 + t1593;
t661 = -t1277 * t687 + t1279 * t1377;
t660 = t1277 * t1377 + t1279 * t687;
t658 = -t1282 * t732 + t1286 * t711 + (-t1277 * t709 - t1279 * t710) * pkin(8);
t657 = -t1282 * t737 + t1286 * t680 + (-t1277 * t747 - t1279 * t749) * pkin(8);
t656 = -t1282 * t733 + t1286 * t679 + (-t1277 * t744 - t1279 * t746) * pkin(8);
t654 = -pkin(1) * t709 - t1277 * t704 + t1279 * t1318;
t652 = -t1277 * t674 + t1279 * t1378;
t651 = t1277 * t1378 + t1279 * t674;
t650 = -t1282 * t717 + t1286 * t668 + (-t1277 * t748 - t1279 * t750) * pkin(8);
t649 = -t1282 * t716 + t1286 * t667 + (-t1277 * t743 - t1279 * t745) * pkin(8);
t648 = -t1282 * t699 + t1286 * t671 + t1609;
t647 = -t1283 * t661 + t1287 * t677;
t646 = t1283 * t677 + t1287 * t661;
t644 = -pkin(1) * t747 - t1277 * t678 + t1279 * t1319;
t643 = -pkin(1) * t744 - t1277 * t676 + t1279 * t1320;
t642 = -pkin(2) * t759 + qJ(3) * t688 + t1276 * t681 + t1278 * t673;
t641 = -t1282 * t686 + t1286 * t663 + t1609;
t640 = -t1283 * t652 + t1287 * t669;
t639 = t1283 * t669 + t1287 * t652;
t638 = -t1277 * t670 + t1279 * t1321 - t1614;
t637 = -pkin(1) * t748 - t1277 * t666 + t1279 * t1322;
t636 = -pkin(1) * t743 - t1277 * t664 + t1279 * t1323;
t635 = -t1277 * t662 + t1279 * t1324 - t1614;
t633 = -pkin(2) * t741 + qJ(3) * t675 + t1276 * t659 + t1278 * t655;
t632 = -t1282 * t665 + t1286 * t645 + (-t1277 * t660 - t1279 * t661) * pkin(8);
t631 = -pkin(1) * t660 - t1277 * t642 + t1279 * t1325;
t630 = -t1282 * t653 + t1286 * t634 + (-t1277 * t651 - t1279 * t652) * pkin(8);
t629 = -pkin(1) * t651 - t1277 * t633 + t1279 * t1326;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1259, -t1260, 0, t1228, 0, 0, 0, 0, 0, 0, t1115, t1103, t1092, t1035, 0, 0, 0, 0, 0, 0, t942, t961, t938, t826, 0, 0, 0, 0, 0, 0, t795, t813, t768, t684, 0, 0, 0, 0, 0, 0, t708, t714, t1612, t647, 0, 0, 0, 0, 0, 0, t715, t1612, t707, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1260, -t1259, 0, t1227, 0, 0, 0, 0, 0, 0, t1114, t1102, t1091, t1034, 0, 0, 0, 0, 0, 0, t941, t960, t937, t825, 0, 0, 0, 0, 0, 0, t794, t812, t767, t683, 0, 0, 0, 0, 0, 0, t706, t712, t1610, t646, 0, 0, 0, 0, 0, 0, t713, t1610, t705, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1158, t1156, t1152, t1100, 0, 0, 0, 0, 0, 0, t1022, t1030, t1007, t858, 0, 0, 0, 0, 0, 0, t854, t862, t805, t709, 0, 0, 0, 0, 0, 0, t744, t747, t1603, t660, 0, 0, 0, 0, 0, 0, t748, t1603, t743, t651; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1260, 0, -t1259, 0, t1388, -t1246, -t1227, -pkin(7) * t1227, -t1193 * t1283 + t1210 * t1287, -t1154 * t1283 + t1164 * t1287, -t1159 * t1283 + t1206 * t1287, -t1192 * t1283 + t1209 * t1287, -t1160 * t1283 + t1207 * t1287, t1287 * t1223 + t1283 * t1337, -pkin(7) * t1114 - t1059 * t1283 + t1068 * t1287, -pkin(7) * t1102 - t1051 * t1283 + t1060 * t1287, -pkin(7) * t1091 + t1025 * t1287 - t1027 * t1283, -pkin(7) * t1034 + t1026 * t1287 - t1036 * t1283, -t1072 * t1283 + t1137 * t1287, -t1019 * t1283 + t1090 * t1287, -t1032 * t1283 + t1096 * t1287, -t1071 * t1283 + t1136 * t1287, -t1033 * t1283 + t1097 * t1287, -t1098 * t1283 + t1155 * t1287, -pkin(7) * t941 - t1283 * t841 + t1287 * t853, -pkin(7) * t960 - t1283 * t852 + t1287 * t857, -pkin(7) * t937 - t1283 * t785 + t1287 * t839, -pkin(7) * t825 - t1283 * t756 + t1287 * t757, -t1283 * t876 + t1287 * t944, -t1283 * t811 + t1287 * t881, -t1283 * t872 + t1287 * t934, -t1283 * t875 + t1287 * t943, -t1283 * t873 + t1287 * t935, t1028 * t1287 - t1283 * t936, -pkin(7) * t794 - t1283 * t698 + t1287 * t718, -pkin(7) * t812 - t1283 * t702 + t1287 * t723, -pkin(7) * t767 - t1283 * t672 + t1287 * t682, -pkin(7) * t683 - t1283 * t654 + t1287 * t658, t1521, t1630, t1613, t1573, t1631, t1574, -pkin(7) * t706 - t1283 * t643 + t1287 * t656, -pkin(7) * t712 - t1283 * t644 + t1287 * t657, -t1283 * t638 + t1287 * t648 - t1621, -pkin(7) * t646 - t1283 * t631 + t1287 * t632, t1521, t1613, -t1630, t1574, -t1631, t1573, -pkin(7) * t713 - t1283 * t637 + t1287 * t650, -t1283 * t635 + t1287 * t641 - t1621, -pkin(7) * t705 - t1283 * t636 + t1287 * t649, -pkin(7) * t639 - t1283 * t629 + t1287 * t630; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1259, 0, t1260, 0, t1246, t1388, t1228, pkin(7) * t1228, t1193 * t1287 + t1210 * t1283, t1154 * t1287 + t1164 * t1283, t1159 * t1287 + t1206 * t1283, t1192 * t1287 + t1209 * t1283, t1160 * t1287 + t1207 * t1283, t1283 * t1223 - t1287 * t1337, pkin(7) * t1115 + t1059 * t1287 + t1068 * t1283, pkin(7) * t1103 + t1051 * t1287 + t1060 * t1283, pkin(7) * t1092 + t1025 * t1283 + t1027 * t1287, pkin(7) * t1035 + t1026 * t1283 + t1036 * t1287, t1072 * t1287 + t1137 * t1283, t1019 * t1287 + t1090 * t1283, t1032 * t1287 + t1096 * t1283, t1071 * t1287 + t1136 * t1283, t1033 * t1287 + t1097 * t1283, t1098 * t1287 + t1155 * t1283, pkin(7) * t942 + t1283 * t853 + t1287 * t841, pkin(7) * t961 + t1283 * t857 + t1287 * t852, pkin(7) * t938 + t1283 * t839 + t1287 * t785, pkin(7) * t826 + t1283 * t757 + t1287 * t756, t1283 * t944 + t1287 * t876, t1283 * t881 + t1287 * t811, t1283 * t934 + t1287 * t872, t1283 * t943 + t1287 * t875, t1283 * t935 + t1287 * t873, t1028 * t1283 + t1287 * t936, pkin(7) * t795 + t1283 * t718 + t1287 * t698, pkin(7) * t813 + t1283 * t723 + t1287 * t702, pkin(7) * t768 + t1283 * t682 + t1287 * t672, pkin(7) * t684 + t1283 * t658 + t1287 * t654, t1522, -t1628, t1611, t1571, -t1629, t1572, pkin(7) * t708 + t1283 * t656 + t1287 * t643, pkin(7) * t714 + t1283 * t657 + t1287 * t644, t1283 * t648 + t1287 * t638 + t1620, pkin(7) * t647 + t1283 * t632 + t1287 * t631, t1522, t1611, t1628, t1572, t1629, t1571, pkin(7) * t715 + t1283 * t650 + t1287 * t637, t1283 * t641 + t1287 * t635 + t1620, pkin(7) * t707 + t1283 * t649 + t1287 * t636, pkin(7) * t640 + t1283 * t630 + t1287 * t629; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1262, t1263, 0, 0, (t1273 * t1286 * t1351 + t1245 * t1277) * t1282, t1250 * t1279 + t1277 * t1343, t1217 * t1279 + t1277 * t1339, -t1351 * t1397 - t1232, t1218 * t1279 + t1277 * t1340, t1279 * t1390, pkin(1) * t1161 - t1194 * t1279 + t1277 * t1380, pkin(1) * t1157 - t1195 * t1279 + t1277 * t1381, pkin(1) * t1153 + t1277 * t1306, pkin(1) * t1101 + t1139 * t1472, t1168 * t1279 + t1277 * t1329, t1109 * t1279 + t1277 * t1350, t1144 * t1279 + t1277 * t1346, t1166 * t1279 + t1277 * t1330, t1145 * t1279 + t1277 * t1345, t1177 * t1279 + t1178 * t1423 - t1232, pkin(1) * t1023 + t1029 * t1279 + t1277 * t1308, pkin(1) * t1031 + t1037 * t1279 + t1277 * t1307, pkin(1) * t1008 + t1277 * t1305 + t1279 * t926, pkin(1) * t859 + t1277 * t1302 + t1279 * t940, t1277 * t1334 + t1279 * t972, t1277 * t1354 + t1279 * t902, t1277 * t1357 + t1279 * t983, t1277 * t1335 + t1279 * t971, t1277 * t1356 + t1279 * t984, t1279 * t1038 + t1277 * t1492, pkin(1) * t855 + t1277 * t1316 + t1279 * t803, pkin(1) * t863 + t1277 * t1315 + t1279 * t815, pkin(1) * t806 + t1277 * t1317 + t1279 * t724, pkin(1) * t710 + t1277 * t1318 + t1279 * t704, t1504, -t1622, t1602, t1553, -t1623, t1552, pkin(1) * t746 + t1277 * t1320 + t1279 * t676, pkin(1) * t749 + t1277 * t1319 + t1279 * t678, t1277 * t1321 + t1279 * t670 + t1615, pkin(1) * t661 + t1277 * t1325 + t1279 * t642, t1504, t1602, t1622, t1552, t1623, t1553, pkin(1) * t750 + t1277 * t1322 + t1279 * t666, t1277 * t1324 + t1279 * t662 + t1615, pkin(1) * t745 + t1277 * t1323 + t1279 * t664, pkin(1) * t652 + t1277 * t1326 + t1279 * t633;];
tauB_reg  = t1;
