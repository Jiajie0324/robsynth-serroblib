% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRP10_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:42:38
% EndTime: 2019-03-09 12:43:03
% DurationCPUTime: 11.13s
% Computational Cost: add. (20723->646), mult. (54971->879), div. (0->0), fcn. (44365->10), ass. (0->293)
t270 = sin(pkin(6));
t277 = cos(qJ(2));
t361 = qJD(1) * t277;
t256 = t270 * t361;
t269 = sin(pkin(11));
t274 = sin(qJ(4));
t271 = cos(pkin(11));
t416 = cos(qJ(4));
t345 = t416 * t271;
t302 = -t274 * t269 + t345;
t193 = t302 * t256;
t340 = qJD(4) * t416;
t359 = qJD(4) * t274;
t225 = t269 * t359 - t271 * t340;
t368 = t225 + t193;
t233 = t269 * t416 + t274 * t271;
t373 = t270 * t277;
t288 = t233 * t373;
t367 = -qJD(1) * t288 + t233 * qJD(4);
t275 = sin(qJ(2));
t319 = pkin(2) * t275 - qJ(3) * t277;
t364 = qJD(1) * t270;
t217 = t319 * t364;
t362 = qJD(1) * t275;
t344 = t270 * t362;
t272 = cos(pkin(6));
t414 = pkin(1) * t277;
t352 = t272 * t414;
t218 = -pkin(8) * t344 + qJD(1) * t352;
t163 = t271 * t217 - t269 * t218;
t372 = t271 * t277;
t295 = (pkin(3) * t275 - pkin(9) * t372) * t270;
t139 = qJD(1) * t295 + t163;
t164 = t269 * t217 + t271 * t218;
t325 = t269 * t256;
t148 = -pkin(9) * t325 + t164;
t410 = pkin(9) + qJ(3);
t248 = t410 * t269;
t249 = t410 * t271;
t425 = -t416 * t248 - t274 * t249;
t396 = t302 * qJD(3) + qJD(4) * t425 - t274 * t139 - t416 * t148;
t286 = qJD(2) * t288;
t282 = qJD(1) * t286;
t363 = qJD(1) * t272;
t258 = qJD(2) + t363;
t205 = t258 * t271 - t269 * t344;
t206 = t258 * t269 + t271 * t344;
t303 = t274 * t205 + t206 * t416;
t424 = qJD(4) * t303;
t109 = t282 + t424;
t276 = cos(qJ(5));
t102 = t276 * t109;
t273 = sin(qJ(5));
t154 = -t416 * t205 + t206 * t274;
t436 = qJD(5) + t154;
t443 = t436 ^ 2;
t444 = -t273 * t443 + t102;
t442 = -pkin(10) * t344 + t396;
t415 = pkin(1) * t275;
t366 = pkin(8) * t373 + t272 * t415;
t219 = t366 * qJD(1);
t185 = pkin(3) * t325 + t219;
t441 = -t367 * pkin(4) - pkin(10) * t368 + t185;
t354 = t256 - qJD(4);
t194 = t258 * qJ(3) + t219;
t214 = (-pkin(2) * t277 - qJ(3) * t275 - pkin(1)) * t270;
t200 = qJD(1) * t214;
t142 = t271 * t194 + t269 * t200;
t110 = pkin(9) * t205 + t142;
t141 = -t194 * t269 + t271 * t200;
t96 = -pkin(3) * t256 - pkin(9) * t206 + t141;
t60 = t110 * t416 + t274 * t96;
t57 = -pkin(10) * t354 + t60;
t187 = -pkin(2) * t258 + qJD(3) - t218;
t152 = -pkin(3) * t205 + t187;
t72 = pkin(4) * t154 - pkin(10) * t303 + t152;
t26 = t273 * t72 + t276 * t57;
t16 = qJ(6) * t436 + t26;
t197 = (qJD(2) * t319 - qJD(3) * t275) * t270;
t181 = qJD(1) * t197;
t360 = qJD(2) * t275;
t343 = t270 * t360;
t322 = qJD(1) * t343;
t351 = pkin(1) * qJD(2) * t272;
t327 = qJD(1) * t351;
t211 = -pkin(8) * t322 + t277 * t327;
t182 = qJD(3) * t258 + t211;
t136 = t269 * t181 + t271 * t182;
t353 = qJD(1) * qJD(2);
t338 = t277 * t353;
t323 = t270 * t338;
t307 = t269 * t323;
t111 = -pkin(9) * t307 + t136;
t135 = t271 * t181 - t269 * t182;
t289 = qJD(2) * t295;
t97 = qJD(1) * t289 + t135;
t298 = t110 * t359 - t416 * t111 - t274 * t97 - t96 * t340;
t20 = pkin(10) * t322 - t298;
t357 = qJD(5) * t276;
t358 = qJD(5) * t273;
t212 = pkin(8) * t323 + t275 * t327;
t177 = pkin(3) * t307 + t212;
t296 = t205 * t340 - t206 * t359 - t274 * t307;
t280 = -t323 * t345 - t296;
t53 = t109 * pkin(4) + pkin(10) * t280 + t177;
t4 = -t273 * t20 + t276 * t53 - t57 * t357 - t72 * t358;
t413 = pkin(5) * t109;
t2 = -t4 - t413;
t440 = t16 * t436 - t2;
t25 = -t273 * t57 + t276 * t72;
t3 = t276 * t20 + t273 * t53 + t72 * t357 - t358 * t57;
t439 = -t25 * t436 + t3;
t305 = t26 * t436 + t4;
t438 = t154 ^ 2;
t191 = -t274 * t248 + t249 * t416;
t394 = qJD(3) * t233 + qJD(4) * t191 + t139 * t416 - t274 * t148;
t437 = t154 * t354;
t100 = t273 * t109;
t382 = t436 * t276;
t435 = t154 * t382 + t357 * t436 + t100;
t332 = t276 * t354;
t130 = t273 * t303 + t332;
t132 = -t273 * t354 + t276 * t303;
t166 = t193 * t276 + t273 * t344;
t334 = t225 * t276 + t166;
t165 = t193 * t273 - t276 * t344;
t335 = t225 * t273 + t165;
t67 = qJD(5) * t132 - t273 * t280 - t276 * t322;
t398 = t67 * t276;
t66 = qJD(5) * t332 - t273 * t322 + t276 * t280 + t303 * t358;
t399 = t66 * t273;
t434 = t334 * t130 + t335 * t132 + t233 * ((t130 * t273 - t132 * t276) * qJD(5) - t398 + t399);
t433 = t303 ^ 2;
t266 = t270 ^ 2;
t432 = -0.2e1 * t266 * t353;
t265 = -pkin(3) * t271 - pkin(2);
t174 = -pkin(4) * t302 - pkin(10) * t233 + t265;
t406 = -t174 * t357 + t191 * t358 + t441 * t273 - t442 * t276;
t395 = pkin(4) * t344 + t394;
t430 = -t132 * t436 + t67;
t429 = t130 * t303;
t428 = t256 * t303;
t381 = t303 * t132;
t427 = -t429 + t444;
t426 = t273 * t174 + t276 * t191;
t59 = -t274 * t110 + t416 * t96;
t56 = pkin(4) * t354 - t59;
t29 = t130 * pkin(5) - t132 * qJ(6) + t56;
t412 = pkin(10) * t109;
t423 = t29 * t436 - t412;
t422 = -t429 - t444;
t220 = -pkin(8) * t343 + t277 * t351;
t204 = qJD(3) * t272 + t220;
t146 = t271 * t197 - t269 * t204;
t115 = t146 + t289;
t213 = qJ(3) * t272 + t366;
t159 = -t213 * t269 + t271 * t214;
t374 = t270 * t275;
t224 = t269 * t272 + t271 * t374;
t119 = -pkin(3) * t373 - pkin(9) * t224 + t159;
t147 = t269 * t197 + t271 * t204;
t342 = qJD(2) * t373;
t324 = t269 * t342;
t134 = -pkin(9) * t324 + t147;
t160 = t271 * t213 + t269 * t214;
t223 = t269 * t374 - t272 * t271;
t138 = -pkin(9) * t223 + t160;
t35 = t274 * t115 + t119 * t340 + t416 * t134 - t138 * t359;
t33 = pkin(10) * t343 + t35;
t77 = t274 * t119 + t416 * t138;
t75 = -pkin(10) * t373 + t77;
t167 = t223 * t416 + t274 * t224;
t168 = -t274 * t223 + t224 * t416;
t259 = pkin(8) * t374;
t216 = t259 + (-pkin(2) - t414) * t272;
t172 = t223 * pkin(3) + t216;
t89 = t167 * pkin(4) - t168 * pkin(10) + t172;
t404 = t273 * t89 + t276 * t75;
t126 = qJD(4) * t167 - t302 * t342;
t127 = qJD(4) * t168 + t286;
t221 = t366 * qJD(2);
t186 = pkin(3) * t324 + t221;
t65 = t127 * pkin(4) + t126 * pkin(10) + t186;
t9 = -qJD(5) * t404 - t273 * t33 + t276 * t65;
t407 = qJD(5) * t426 + t442 * t273 + t441 * t276;
t294 = t233 * t357 - t335;
t419 = t100 * t233 + t130 * t367 + t294 * t436 - t302 * t67;
t418 = t132 ^ 2;
t268 = t277 ^ 2;
t411 = pkin(10) * t132;
t409 = -t367 * qJ(6) + qJD(6) * t302 + t406;
t408 = t367 * pkin(5) - t407;
t317 = pkin(5) * t273 - qJ(6) * t276;
t318 = pkin(5) * t276 + qJ(6) * t273;
t405 = t165 * pkin(5) - t166 * qJ(6) + t317 * t225 - (qJD(5) * t318 - qJD(6) * t276) * t233 - t395;
t91 = pkin(4) * t303 + pkin(10) * t154;
t38 = t273 * t91 + t276 * t59;
t403 = t132 * t29;
t400 = t275 * t60;
t397 = -t130 * t357 - t273 * t67;
t393 = -t273 * qJD(6) + t436 * t317 - t60;
t392 = t109 * qJ(6);
t391 = t109 * t167;
t390 = t109 * t302;
t331 = t130 * t436;
t389 = t130 * t276;
t388 = t132 * t130;
t386 = t132 * t273;
t385 = t141 * t275;
t384 = t142 * t275;
t383 = t436 * t303;
t380 = t303 * t154;
t379 = t233 * t273;
t378 = t233 * t276;
t377 = t266 * t268;
t376 = t266 * qJD(1) ^ 2;
t375 = t269 * t277;
t370 = qJD(6) - t25;
t365 = t275 ^ 2 - t268;
t356 = qJD(2) - t258;
t350 = pkin(10) * t358;
t349 = pkin(10) * t357;
t348 = t268 * t376;
t347 = t277 * t376;
t346 = t273 * t373;
t341 = t130 ^ 2 - t418;
t117 = t132 * t358;
t337 = -t276 * t66 - t117;
t24 = -t110 * t340 - t274 * t111 - t96 * t359 + t416 * t97;
t330 = t354 * t270;
t329 = t258 + t363;
t328 = qJD(2) * t271 - t205;
t326 = t277 * t345;
t321 = pkin(1) * t432;
t76 = t119 * t416 - t274 * t138;
t320 = (qJD(5) * t130 - t66) * pkin(10);
t149 = t168 * t273 + t276 * t373;
t81 = -qJD(5) * t346 - t126 * t273 + t168 * t357 - t276 * t343;
t316 = t130 * t81 + t149 * t67;
t315 = t25 * t276 + t26 * t273;
t37 = -t273 * t59 + t276 * t91;
t41 = -t273 * t75 + t276 * t89;
t123 = t174 * t276 - t191 * t273;
t308 = -t205 * t271 + t206 * t269;
t306 = t266 * t275 * t338;
t74 = pkin(4) * t373 - t76;
t8 = t273 * t65 + t276 * t33 + t89 * t357 - t358 * t75;
t301 = t328 * t364;
t300 = (qJD(2) * t269 - t206) * t364;
t299 = t436 * t56 - t412;
t36 = t115 * t416 - t119 * t359 - t274 * t134 - t138 * t340;
t293 = t233 * t358 + t334;
t292 = t277 * t300;
t291 = t273 * t331 - t398;
t21 = -pkin(4) * t322 - t24;
t150 = t168 * t276 - t346;
t80 = qJD(5) * t149 + t276 * t126 - t273 * t343;
t287 = t130 * t80 - t132 * t81 + t149 * t66 - t150 * t67;
t285 = t109 * t149 + t127 * t130 + t167 * t67 + t436 * t81;
t284 = -qJ(3) * t360 + (-pkin(2) * qJD(2) + qJD(3) - t187) * t277;
t283 = t233 * t323;
t34 = -pkin(4) * t343 - t36;
t281 = t130 * t294 + t379 * t67;
t243 = t275 * t347;
t242 = -pkin(4) - t318;
t236 = -0.2e1 * t306;
t227 = -t259 + t352;
t140 = t233 * t317 - t425;
t106 = pkin(5) * t302 - t123;
t105 = -qJ(6) * t302 + t426;
t79 = pkin(5) * t132 + qJ(6) * t130;
t63 = pkin(10) * t398;
t47 = t127 * t436 + t391;
t46 = t367 * t436 - t390;
t43 = t149 * pkin(5) - t150 * qJ(6) + t74;
t40 = -t66 + t331;
t31 = -pkin(5) * t167 - t41;
t30 = qJ(6) * t167 + t404;
t28 = -pkin(5) * t303 - t37;
t27 = qJ(6) * t303 + t38;
t22 = t132 * t382 - t399;
t19 = -t381 + t435;
t15 = -pkin(5) * t436 + t370;
t14 = -t132 * t80 - t150 * t66;
t13 = -t132 * t293 - t378 * t66;
t12 = t81 * pkin(5) + t80 * qJ(6) - t150 * qJD(6) + t34;
t11 = t109 * t150 + t127 * t132 - t167 * t66 - t436 * t80;
t10 = t102 * t233 + t132 * t367 - t293 * t436 + t302 * t66;
t7 = pkin(5) * t67 + qJ(6) * t66 - qJD(6) * t132 + t21;
t6 = -t127 * pkin(5) - t9;
t5 = qJ(6) * t127 + qJD(6) * t167 + t8;
t1 = qJD(6) * t436 + t3 + t392;
t17 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t306, t365 * t432, t329 * t342, t236, -t329 * t343, 0, -t212 * t272 - t221 * t258 + t275 * t321, -t211 * t272 - t220 * t258 + t277 * t321 (t211 * t277 + t212 * t275 + (-t218 * t277 - t219 * t275) * qJD(2) + (t220 * t277 + t221 * t275 + (-t227 * t277 - t275 * t366) * qJD(2)) * qJD(1)) * t270, t211 * t366 - t212 * t227 - t218 * t221 + t219 * t220 (qJD(1) * t224 + t206) * t271 * t342 ((-t223 * t271 - t224 * t269) * qJD(1) - t308) * t342 (t206 * t374 + (t224 * t374 - 0.2e1 * t271 * t377) * qJD(1)) * qJD(2) (qJD(1) * t223 - t205) * t324 (t205 * t374 + (-t223 * t374 + 0.2e1 * t269 * t377) * qJD(1)) * qJD(2), t236, -t221 * t205 + t212 * t223 + ((-qJD(1) * t146 - t135) * t277 + (t187 * t375 + t385 + (t159 * t275 + t216 * t375) * qJD(1)) * qJD(2)) * t270, t221 * t206 + t212 * t224 + ((qJD(1) * t147 + t136) * t277 + (t187 * t372 - t384 + (-t160 * t275 + t216 * t372) * qJD(1)) * qJD(2)) * t270, -t135 * t224 - t136 * t223 - t146 * t206 + t147 * t205 + (-t141 * t271 - t142 * t269 + (-t159 * t271 - t160 * t269) * qJD(1)) * t342, t135 * t159 + t136 * t160 + t141 * t146 + t142 * t147 + t187 * t221 + t212 * t216, -t126 * t303 - t168 * t280, -t168 * t109 + t126 * t154 - t127 * t303 + t167 * t280, t126 * t354 + (-t296 * t277 + (t303 * t275 + (-t268 * t270 * t345 + t168 * t275) * qJD(1)) * qJD(2)) * t270, t127 * t154 + t391, t127 * t354 + (t109 * t277 + (-qJD(1) * t167 - t154) * t360) * t270 (-t266 * t361 - t330) * t360, -t36 * t354 + t186 * t154 + t172 * t109 + t177 * t167 + t152 * t127 + (-t24 * t277 + (qJD(1) * t76 + t59) * t360) * t270, t35 * t354 + t186 * t303 + t172 * t296 + t177 * t168 - t152 * t126 + (-t298 * t277 + (-t400 + (t172 * t326 - t275 * t77) * qJD(1)) * qJD(2)) * t270, -t77 * t109 + t59 * t126 - t60 * t127 - t35 * t154 + t167 * t298 - t24 * t168 + t280 * t76 - t303 * t36, t152 * t186 + t172 * t177 + t24 * t76 - t298 * t77 + t35 * t60 + t36 * t59, t14, t287, t11, t316, -t285, t47, t109 * t41 + t127 * t25 + t130 * t34 + t149 * t21 + t167 * t4 + t436 * t9 + t56 * t81 + t67 * t74, -t109 * t404 - t127 * t26 + t132 * t34 + t150 * t21 - t167 * t3 - t436 * t8 - t56 * t80 - t66 * t74, -t130 * t8 - t132 * t9 - t149 * t3 - t150 * t4 + t25 * t80 - t26 * t81 - t404 * t67 + t41 * t66, t21 * t74 + t25 * t9 + t26 * t8 + t3 * t404 + t34 * t56 + t4 * t41, t14, t11, -t287, t47, t285, t316, -t109 * t31 + t12 * t130 - t127 * t15 + t149 * t7 - t167 * t2 + t29 * t81 + t43 * t67 - t436 * t6, -t1 * t149 - t130 * t5 + t132 * t6 - t15 * t80 + t150 * t2 - t16 * t81 - t30 * t67 - t31 * t66, t1 * t167 + t109 * t30 - t12 * t132 + t127 * t16 - t150 * t7 + t29 * t80 + t43 * t66 + t436 * t5, t1 * t30 + t12 * t29 + t15 * t6 + t16 * t5 + t2 * t31 + t43 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t243, t365 * t376, t356 * t256, t243, -t356 * t344, 0, t219 * t258 + t376 * t415 - t212, pkin(1) * t347 + t218 * t258 - t211, 0, 0, t271 * t292 ((-t269 ^ 2 + t271 ^ 2) * qJD(2) + t308) * t256, t271 * t348 + t275 * t300, -t328 * t325, -t269 * t348 + t275 * t301, t243, t219 * t205 - t212 * t271 + (t163 * t277 + t269 * t284 - t385) * t364, -t219 * t206 + t212 * t269 + (-t164 * t277 + t271 * t284 + t384) * t364, t163 * t206 - t164 * t205 + (qJD(3) * t205 + t141 * t256 + t136) * t271 + (qJD(3) * t206 + t142 * t256 - t135) * t269, -t212 * pkin(2) - t141 * t163 - t142 * t164 - t187 * t219 + (-t141 * t269 + t142 * t271) * qJD(3) + (-t135 * t269 + t136 * t271) * qJ(3), -t233 * t280 - t303 * t368, -t233 * t109 + t154 * t368 - t280 * t302 - t303 * t367 (qJD(2) * t233 - t303) * t344 + t368 * t354, t154 * t367 - t390 (qJD(2) * t302 + t154) * t344 + t367 * t354, t330 * t362, t265 * t109 - t177 * t302 - t185 * t154 + t367 * t152 + (qJD(2) * t425 - t59) * t344 + t394 * t354, t265 * t296 + t177 * t233 - t185 * t303 - t368 * t152 + (t400 + (-t191 * t275 + t265 * t326) * qJD(2)) * t364 + t396 * t354, -t191 * t109 - t154 * t396 - t24 * t233 + t280 * t425 - t298 * t302 + t303 * t394 - t367 * t60 + t368 * t59, -t152 * t185 + t177 * t265 - t191 * t298 + t24 * t425 - t394 * t59 + t396 * t60, t13, t434, t10, t281, -t419, t46, t123 * t109 + t130 * t395 + t21 * t379 + t25 * t367 + t294 * t56 - t302 * t4 - t407 * t436 - t425 * t67, -t109 * t426 + t132 * t395 + t21 * t378 - t26 * t367 - t293 * t56 + t3 * t302 + t406 * t436 + t425 * t66, t123 * t66 - t426 * t67 + t26 * t165 + t25 * t166 + t315 * t225 + t407 * t132 + t406 * t130 + (-t3 * t273 - t4 * t276 + (t25 * t273 - t26 * t276) * qJD(5)) * t233, t4 * t123 - t21 * t425 - t25 * t407 - t26 * t406 + t3 * t426 + t395 * t56, t13, t10, -t434, t46, t419, t281, -t106 * t109 - t130 * t405 + t140 * t67 - t15 * t367 + t2 * t302 + t29 * t294 + t379 * t7 + t408 * t436, -t105 * t67 - t106 * t66 + t335 * t16 - t334 * t15 - t408 * t132 + t409 * t130 + (-t1 * t273 + t2 * t276 + (-t15 * t273 - t16 * t276) * qJD(5)) * t233, -t1 * t302 + t105 * t109 + t132 * t405 + t140 * t66 + t16 * t367 + t29 * t293 - t378 * t7 - t409 * t436, t1 * t105 + t106 * t2 + t140 * t7 - t15 * t408 - t16 * t409 - t29 * t405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t292, t277 * t301, -t205 ^ 2 - t206 ^ 2, t141 * t206 - t142 * t205 + t212, 0, 0, 0, 0, 0, 0, t282 + 0.2e1 * t424 - t428, -t280 + t437, -t433 - t438, t154 * t60 + t303 * t59 + t177, 0, 0, 0, 0, 0, 0, t427, -t276 * t443 - t100 - t381 (-t130 * t154 + t66) * t276 + t436 * t386 + t397, t439 * t273 + t305 * t276 - t56 * t303, 0, 0, 0, 0, 0, 0, t427 -(-t386 + t389) * t154 - t337 + t397, t381 + t435, -t29 * t303 + t440 * t276 + (t15 * t436 + t1) * t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, t433 - t438, -t280 - t437, -t380, -t283 - t428, t322, -t152 * t303 - t354 * t60 + t24, t152 * t154 - t354 * t59 + t298, 0, 0, t22 (-t386 - t389) * t154 + t337 + t397, t19, t291, -t422, -t383, -pkin(4) * t67 - t60 * t130 - t25 * t303 - t21 * t276 + (-t37 - t349) * t436 + t299 * t273, pkin(4) * t66 - t60 * t132 + t26 * t303 + t21 * t273 + (t38 + t350) * t436 + t299 * t276, t38 * t130 + t37 * t132 - t63 + (-t154 * t25 + t3 + (-t25 + t411) * qJD(5)) * t276 + (t320 - t305) * t273, -t21 * pkin(4) - t25 * t37 - t26 * t38 - t56 * t60 + (-qJD(5) * t315 - t4 * t273 + t3 * t276) * pkin(10), t22, t19, t117 + (t132 * t154 + t67) * t273 + (t66 + t331) * t276, -t383, t422, t291, t15 * t303 + t242 * t67 - t7 * t276 + (t28 - t349) * t436 + t393 * t130 + t423 * t273, t27 * t130 - t28 * t132 - t63 + (t15 * t154 + t1 + (t15 + t411) * qJD(5)) * t276 + (t320 - t440) * t273, -t16 * t303 + t242 * t66 - t7 * t273 + (-t27 - t350) * t436 - t393 * t132 - t423 * t276, -t15 * t28 - t16 * t27 + t7 * t242 + t393 * t29 + (t1 * t276 + t2 * t273 + (t15 * t276 - t16 * t273) * qJD(5)) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t388, -t341, t40, -t388, -t430, t109, -t132 * t56 + t305, t130 * t56 - t439, 0, 0, t388, t40, t341, t109, t430, -t388, -t130 * t79 + t305 - t403 + 0.2e1 * t413, pkin(5) * t66 - qJ(6) * t67 + (t16 - t26) * t132 + (t15 - t370) * t130, 0.2e1 * t392 - t29 * t130 + t79 * t132 + (0.2e1 * qJD(6) - t25) * t436 + t3, -pkin(5) * t2 + qJ(6) * t1 - t15 * t26 + t16 * t370 - t29 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283 + t388 - t424, t40, -t443 - t418, t403 - t440;];
tauc_reg  = t17;
