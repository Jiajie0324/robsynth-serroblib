% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP10_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP10_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP10_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:42:37
% EndTime: 2019-03-09 12:43:02
% DurationCPUTime: 12.03s
% Computational Cost: add. (17445->703), mult. (43019->925), div. (0->0), fcn. (35379->14), ass. (0->322)
t289 = sin(pkin(6));
t298 = cos(qJ(2));
t399 = qJD(1) * qJD(2);
t379 = t298 * t399;
t295 = sin(qJ(2));
t397 = qJDD(1) * t295;
t326 = t379 + t397;
t481 = t326 * t289;
t288 = sin(pkin(11));
t290 = cos(pkin(11));
t294 = sin(qJ(4));
t463 = cos(qJ(4));
t329 = -t294 * t288 + t290 * t463;
t425 = t289 * t298;
t309 = t329 * t425;
t187 = qJD(1) * t309;
t225 = t329 * qJD(4);
t473 = t225 - t187;
t233 = t288 * t463 + t294 * t290;
t310 = t233 * t425;
t417 = -qJD(1) * t310 + t233 * qJD(4);
t380 = t295 * t399;
t361 = t289 * t380;
t396 = qJDD(1) * t298;
t267 = t289 * t396;
t395 = qJDD(4) - t267;
t318 = t361 + t395;
t381 = qJD(4) * t463;
t406 = qJD(4) * t294;
t291 = cos(pkin(6));
t398 = qJDD(1) * t291;
t269 = qJDD(2) + t398;
t432 = t269 * t288;
t166 = t290 * t481 + t432;
t325 = t380 - t396;
t411 = qJD(1) * t291;
t270 = qJD(2) + t411;
t392 = pkin(1) * qJD(2) * t291;
t365 = qJD(1) * t392;
t391 = pkin(1) * t398;
t388 = -pkin(8) * t267 - t295 * t391 - t298 * t365;
t311 = -pkin(8) * t361 - t388;
t123 = qJ(3) * t269 + qJD(3) * t270 + t311;
t349 = pkin(2) * t295 - qJ(3) * t298;
t307 = qJD(2) * t349 - qJD(3) * t295;
t342 = -pkin(2) * t298 - qJ(3) * t295 - pkin(1);
t133 = (qJD(1) * t307 + qJDD(1) * t342) * t289;
t74 = -t123 * t288 + t290 * t133;
t48 = pkin(3) * t289 * t325 - pkin(9) * t166 + t74;
t416 = t481 * t288;
t351 = t269 * t290 - t416;
t75 = t290 * t123 + t288 * t133;
t56 = pkin(9) * t351 + t75;
t410 = qJD(1) * t298;
t268 = t289 * t410;
t393 = pkin(1) * t411;
t220 = pkin(8) * t268 + t295 * t393;
t188 = qJ(3) * t270 + t220;
t210 = t342 * t289;
t192 = qJD(1) * t210;
t116 = -t188 * t288 + t290 * t192;
t412 = qJD(1) * t289;
t384 = t295 * t412;
t202 = t270 * t288 + t290 * t384;
t81 = -pkin(3) * t268 - pkin(9) * t202 + t116;
t117 = t290 * t188 + t288 * t192;
t201 = t270 * t290 - t288 * t384;
t90 = pkin(9) * t201 + t117;
t336 = -t294 * t48 - t81 * t381 + t406 * t90 - t463 * t56;
t11 = pkin(10) * t318 - t336;
t304 = t166 * t463 + t294 * t351;
t333 = t463 * t201 - t294 * t202;
t489 = qJD(4) * t333;
t300 = t304 + t489;
t372 = t294 * t166 - t463 * t351;
t332 = t294 * t201 + t202 * t463;
t471 = qJD(4) * t332;
t70 = t372 + t471;
t364 = -pkin(8) * t481 - t295 * t365 + t298 * t391;
t456 = t269 * pkin(2);
t470 = qJDD(3) - t456;
t144 = -t364 + t470;
t89 = -pkin(3) * t351 + t144;
t21 = t70 * pkin(4) - pkin(10) * t300 + t89;
t293 = sin(qJ(5));
t297 = cos(qJ(5));
t401 = t268 - qJD(4);
t43 = t294 * t81 + t463 * t90;
t40 = -pkin(10) * t401 + t43;
t404 = qJD(5) * t297;
t405 = qJD(5) * t293;
t219 = -pkin(8) * t384 + t298 * t393;
t181 = -pkin(2) * t270 + qJD(3) - t219;
t137 = -pkin(3) * t201 + t181;
t54 = -pkin(4) * t333 - pkin(10) * t332 + t137;
t377 = t293 * t11 - t297 * t21 + t40 * t404 + t54 * t405;
t69 = qJDD(5) + t70;
t466 = pkin(5) * t69;
t2 = qJDD(6) + t377 - t466;
t16 = t293 * t54 + t297 * t40;
t480 = qJD(5) - t333;
t14 = qJ(6) * t480 + t16;
t446 = t480 * t14;
t492 = -t2 + t446;
t218 = t349 * t412;
t149 = t290 * t218 - t219 * t288;
t319 = (-pkin(9) * t290 * t298 + pkin(3) * t295) * t289;
t113 = qJD(1) * t319 + t149;
t150 = t288 * t218 + t290 * t219;
t363 = t288 * t268;
t132 = -pkin(9) * t363 + t150;
t455 = pkin(9) + qJ(3);
t248 = t455 * t288;
t249 = t455 * t290;
t330 = -t248 * t463 - t294 * t249;
t491 = qJD(3) * t329 + qJD(4) * t330 - t294 * t113 - t463 * t132;
t370 = t480 ^ 2;
t487 = -pkin(10) * t384 + t491;
t179 = pkin(3) * t363 + t220;
t486 = -pkin(4) * t417 + pkin(10) * t473 + t179;
t108 = -t293 * t401 + t297 * t332;
t369 = t480 * t293;
t490 = t108 * t369;
t3 = t297 * t11 + t293 * t21 - t40 * t405 + t54 * t404;
t447 = qJ(6) * t69;
t1 = qJD(6) * t480 + t3 + t447;
t15 = -t293 * t40 + t297 * t54;
t420 = qJD(6) - t15;
t13 = -pkin(5) * t480 + t420;
t488 = t480 * t13 + t1;
t106 = t293 * t332 + t297 * t401;
t485 = t106 * t333;
t484 = t333 * t268;
t185 = -t294 * t248 + t249 * t463;
t483 = qJD(3) * t233 + qJD(4) * t185 + t113 * t463 - t294 * t132;
t482 = -qJD(5) * t401 + t300;
t437 = t480 * t297;
t66 = t293 * t69;
t479 = -t333 * t437 + t404 * t480 + t66;
t464 = cos(qJ(1));
t386 = t464 * t295;
t296 = sin(qJ(1));
t422 = t296 * t298;
t228 = t291 * t386 + t422;
t285 = pkin(11) + qJ(4);
t281 = sin(t285);
t282 = cos(t285);
t387 = t289 * t464;
t170 = t228 * t282 - t281 * t387;
t385 = t464 * t298;
t423 = t295 * t296;
t227 = -t291 * t385 + t423;
t126 = t170 * t293 - t227 * t297;
t127 = t170 * t297 + t227 * t293;
t284 = t289 ^ 2;
t394 = 0.2e1 * t284;
t478 = pkin(3) * t288;
t441 = pkin(4) * t384 + t483;
t476 = t106 * t332;
t67 = t297 * t69;
t477 = -t293 * t370 - t476 + t67;
t438 = t108 * t332;
t475 = t268 * t332;
t229 = t291 * t422 + t386;
t355 = g(1) * t229 + g(2) * t227;
t314 = -g(3) * t425 + t355;
t474 = t314 * t281;
t280 = pkin(3) * t290 + pkin(2);
t165 = -pkin(4) * t329 - pkin(10) * t233 - t280;
t418 = t293 * t165 + t297 * t185;
t472 = -t165 * t404 + t185 * t405 + t293 * t486 - t297 * t487;
t230 = -t291 * t423 + t385;
t426 = t289 * t296;
t173 = t230 * t281 - t282 * t426;
t371 = -t228 * t281 - t282 * t387;
t427 = t289 * t295;
t321 = -g(3) * (-t281 * t427 + t282 * t291) - g(2) * t371 + g(1) * t173;
t42 = -t294 * t90 + t463 * t81;
t39 = pkin(4) * t401 - t42;
t23 = t106 * pkin(5) - t108 * qJ(6) + t39;
t465 = pkin(10) * t69;
t469 = t23 * t480 - t465;
t190 = t307 * t289;
t408 = qJD(2) * t295;
t383 = t289 * t408;
t343 = -pkin(8) * t383 + t298 * t392;
t198 = qJD(3) * t291 + t343;
t125 = t288 * t190 + t290 * t198;
t407 = qJD(2) * t298;
t382 = t289 * t407;
t362 = t288 * t382;
t110 = -pkin(9) * t362 + t125;
t462 = pkin(1) * t295;
t414 = pkin(8) * t425 + t291 * t462;
t209 = qJ(3) * t291 + t414;
t146 = t290 * t209 + t288 * t210;
t223 = t288 * t427 - t291 * t290;
t112 = -pkin(9) * t223 + t146;
t124 = t290 * t190 - t198 * t288;
t94 = qJD(2) * t319 + t124;
t145 = -t209 * t288 + t290 * t210;
t224 = t288 * t291 + t290 * t427;
t97 = -pkin(3) * t425 - pkin(9) * t224 + t145;
t327 = t463 * t110 - t112 * t406 + t294 * t94 + t97 * t381;
t27 = pkin(10) * t383 + t327;
t443 = t463 * t112 + t294 * t97;
t58 = -pkin(10) * t425 + t443;
t158 = -t294 * t223 + t224 * t463;
t271 = pkin(8) * t427;
t212 = t271 + (-pkin(1) * t298 - pkin(2)) * t291;
t163 = pkin(3) * t223 + t212;
t331 = -t223 * t463 - t294 * t224;
t73 = -pkin(4) * t331 - pkin(10) * t158 + t163;
t345 = t293 * t73 + t297 * t58;
t102 = qJD(2) * t309 + qJD(4) * t331;
t103 = qJD(2) * t310 + qJD(4) * t158;
t221 = pkin(8) * t382 + t295 * t392;
t180 = pkin(3) * t362 + t221;
t49 = pkin(4) * t103 - pkin(10) * t102 + t180;
t468 = -qJD(5) * t345 - t27 * t293 + t297 * t49;
t467 = t108 ^ 2;
t35 = t293 * t482 - t297 * t318 + t332 * t404;
t454 = -t106 * t404 - t293 * t35;
t453 = qJ(6) * t417 - qJD(6) * t329 - t472;
t77 = pkin(4) * t332 - pkin(10) * t333;
t452 = t293 * t77 + t297 * t42;
t451 = -t417 * pkin(5) + t418 * qJD(5) + t293 * t487 + t486 * t297;
t155 = t187 * t293 - t297 * t384;
t156 = t187 * t297 + t293 * t384;
t347 = pkin(5) * t293 - qJ(6) * t297;
t348 = pkin(5) * t297 + qJ(6) * t293;
t450 = -t155 * pkin(5) + t156 * qJ(6) + t347 * t225 + (qJD(5) * t348 - qJD(6) * t297) * t233 + t441;
t448 = pkin(10) * qJD(5);
t445 = t480 * t16;
t34 = -t293 * t318 - t297 * t482 + t332 * t405;
t444 = t293 * t34;
t440 = -qJD(6) * t293 + t347 * t480 - t43;
t439 = t108 * t106;
t434 = t233 * t293;
t433 = t233 * t297;
t431 = t269 * t291;
t430 = t282 * t293;
t429 = t282 * t297;
t428 = t284 * qJD(1) ^ 2;
t421 = t297 * t298;
t415 = t464 * pkin(1) + pkin(8) * t426;
t286 = t295 ^ 2;
t413 = -t298 ^ 2 + t286;
t409 = qJD(2) * t290;
t403 = qJD(2) - t270;
t400 = qJ(3) * qJDD(1);
t390 = t298 * t428;
t389 = t289 * t421;
t255 = t293 * t425;
t376 = -t296 * pkin(1) + pkin(8) * t387;
t375 = t294 * t56 + t90 * t381 + t81 * t406 - t463 * t48;
t374 = -t225 * t293 + t155;
t373 = t225 * t297 - t156;
t368 = t270 + t411;
t366 = t269 + t398;
t359 = -t294 * t112 + t463 * t97;
t174 = t230 * t282 + t281 * t426;
t130 = t174 * t293 - t229 * t297;
t358 = -g(1) * t126 + g(2) * t130;
t131 = t174 * t297 + t229 * t293;
t357 = g(1) * t127 - g(2) * t131;
t356 = g(1) * t371 + g(2) * t173;
t354 = -g(1) * t227 + g(2) * t229;
t353 = g(1) * t230 + g(2) * t228;
t352 = g(1) * t228 - g(2) * t230;
t344 = -t293 * t58 + t297 * t73;
t57 = pkin(4) * t425 - t359;
t341 = pkin(4) + t348;
t340 = pkin(4) * t282 + pkin(10) * t281 + t280;
t339 = -t144 + t355;
t337 = g(1) * t464 + g(2) * t296;
t134 = t158 * t293 + t389;
t335 = t297 * t27 + t293 * t49 + t73 * t404 - t405 * t58;
t334 = t39 * t480 - t465;
t328 = -t294 * t110 - t112 * t381 - t97 * t406 + t463 * t94;
t151 = -t227 * t430 - t228 * t297;
t153 = -t229 * t430 - t230 * t297;
t196 = t255 * t282 - t297 * t427;
t323 = g(1) * t153 + g(2) * t151 + g(3) * t196;
t152 = -t227 * t429 + t228 * t293;
t154 = -t229 * t429 + t230 * t293;
t197 = (t282 * t421 + t293 * t295) * t289;
t322 = -g(1) * t154 - g(2) * t152 - g(3) * t197;
t208 = t281 * t291 + t282 * t427;
t320 = -g(1) * t174 - g(2) * t170 - g(3) * t208;
t317 = t233 * t404 - t374;
t316 = t233 * t405 - t373;
t313 = -g(3) * t427 - t353;
t312 = -qJ(3) * t408 + (qJD(3) - t181) * t298;
t308 = t314 + t364;
t167 = t208 * t293 + t389;
t306 = g(1) * t130 + g(2) * t126 + g(3) * t167 - t377;
t305 = t448 * t480 - t321;
t28 = -pkin(4) * t383 - t328;
t12 = -pkin(4) * t318 + t375;
t5 = t35 * pkin(5) + t34 * qJ(6) - t108 * qJD(6) + t12;
t303 = -t305 - t5;
t168 = t208 * t297 - t255;
t302 = -g(1) * t131 - g(2) * t127 - g(3) * t168 + t3;
t301 = t108 * t23 + qJDD(6) - t306;
t135 = t158 * t297 - t255;
t114 = t233 * t347 - t330;
t88 = pkin(5) * t329 - t165 * t297 + t185 * t293;
t87 = -qJ(6) * t329 + t418;
t62 = -qJD(5) * t255 + t102 * t293 + t158 * t404 - t297 * t383;
t61 = qJD(5) * t134 - t297 * t102 - t293 * t383;
t60 = pkin(5) * t108 + qJ(6) * t106;
t30 = t134 * pkin(5) - t135 * qJ(6) + t57;
t25 = pkin(5) * t331 - t344;
t24 = -qJ(6) * t331 + t345;
t22 = -pkin(5) * t332 + t293 * t42 - t297 * t77;
t20 = qJ(6) * t332 + t452;
t19 = t106 * t480 - t34;
t8 = t62 * pkin(5) + t61 * qJ(6) - t135 * qJD(6) + t28;
t7 = -pkin(5) * t103 - t468;
t6 = qJ(6) * t103 - qJD(6) * t331 + t335;
t4 = [qJDD(1), g(1) * t296 - g(2) * t464, t337 (qJDD(1) * t286 + 0.2e1 * t295 * t379) * t284 (t295 * t396 - t399 * t413) * t394 (t295 * t366 + t368 * t407) * t289 (t298 * t366 - t368 * t408) * t289, t431, -t221 * t270 - t271 * t269 + t364 * t291 + (t298 * t431 - t325 * t394) * pkin(1) + t352, -pkin(1) * t326 * t394 - t269 * t414 - t270 * t343 - t291 * t311 + t354, -t221 * t201 + t212 * t416 + t144 * t223 + (-t212 * t269 + t352) * t290 + (-t337 * t288 + (qJD(1) * t145 + t116) * t408 + (qJD(2) * t181 * t288 - qJD(1) * t124 - qJDD(1) * t145 - t74) * t298) * t289, t144 * t224 + t212 * t166 + t221 * t202 - t352 * t288 + (-t337 * t290 + (-qJD(1) * t146 - t117) * t408 + (qJD(1) * t125 + qJDD(1) * t146 + t181 * t409 + t75) * t298) * t289, t125 * t201 + t146 * t351 - t75 * t223 - t124 * t202 - t145 * t166 - t74 * t224 + (-t116 * t290 - t117 * t288) * t382 - t354, t75 * t146 + t117 * t125 + t74 * t145 + t116 * t124 + t144 * t212 + t181 * t221 - g(1) * (-pkin(2) * t228 - qJ(3) * t227 + t376) - g(2) * (pkin(2) * t230 + qJ(3) * t229 + t415) t102 * t332 + t158 * t300, t102 * t333 - t103 * t332 - t158 * t70 + t300 * t331, -t102 * t401 + t158 * t395 + (-t300 * t298 + (qJD(1) * t158 + t332) * t408) * t289, t103 * t401 + t331 * t395 + (t70 * t298 + (qJD(1) * t331 + t333) * t408) * t289 (-t395 * t298 + (-0.2e1 * t268 + qJD(4)) * t408) * t289, g(1) * t170 - g(2) * t174 + t137 * t103 + t163 * t70 - t180 * t333 + t318 * t359 - t328 * t401 - t331 * t89 + t375 * t425 + t383 * t42, t137 * t102 + t89 * t158 + t163 * t300 + t180 * t332 - t318 * t443 + t327 * t401 - t336 * t425 - t383 * t43 + t356, -t108 * t61 - t135 * t34, t106 * t61 - t108 * t62 + t134 * t34 - t135 * t35, t103 * t108 + t135 * t69 + t331 * t34 - t480 * t61, -t103 * t106 - t134 * t69 + t331 * t35 - t480 * t62, t103 * t480 - t331 * t69, t15 * t103 + t28 * t106 + t12 * t134 + t331 * t377 + t344 * t69 + t57 * t35 + t39 * t62 + t468 * t480 + t357, -t16 * t103 + t28 * t108 + t12 * t135 + t3 * t331 - t335 * t480 - t57 * t34 - t345 * t69 - t39 * t61 + t358, -t103 * t13 + t106 * t8 + t134 * t5 + t2 * t331 + t23 * t62 - t25 * t69 + t30 * t35 - t480 * t7 + t357, -t1 * t134 - t106 * t6 + t108 * t7 - t13 * t61 + t135 * t2 - t14 * t62 - t24 * t35 - t25 * t34 - t356, -t1 * t331 + t103 * t14 - t108 * t8 - t135 * t5 + t23 * t61 + t24 * t69 + t30 * t34 + t480 * t6 - t358, t1 * t24 + t14 * t6 + t5 * t30 + t23 * t8 + t2 * t25 + t13 * t7 - g(1) * (-pkin(4) * t170 - pkin(5) * t127 + pkin(10) * t371 - qJ(6) * t126 - t227 * t455 - t228 * t280 + t387 * t478 + t376) - g(2) * (pkin(4) * t174 + pkin(5) * t131 + pkin(10) * t173 + qJ(6) * t130 + t229 * t455 + t230 * t280 + t426 * t478 + t415); 0, 0, 0, -t295 * t390, t413 * t428 (t403 * t410 + t397) * t289, -t384 * t403 + t267, t269, t220 * t270 + t428 * t462 + t308, pkin(1) * t390 + t219 * t270 + (pkin(8) * t399 + g(3)) * t427 + t353 + t388, -pkin(2) * t416 + t220 * t201 + (t339 + t456) * t290 + ((-g(3) * t290 + t288 * t400) * t298 + (-t116 * t295 + t149 * t298 + t288 * t312) * qJD(1)) * t289, -pkin(2) * t166 - t202 * t220 - t339 * t288 + ((g(3) * t288 + t290 * t400) * t298 + (t117 * t295 - t150 * t298 + t290 * t312) * qJD(1)) * t289, t149 * t202 - t150 * t201 + (qJ(3) * t351 + qJD(3) * t201 + t116 * t268 + t75) * t290 + (qJ(3) * t166 + qJD(3) * t202 + t117 * t268 - t74) * t288 + t313, -t116 * t149 - t117 * t150 - t181 * t220 + (-t116 * t288 + t117 * t290) * qJD(3) + (-t144 + t314) * pkin(2) + (-t74 * t288 + t75 * t290 + t313) * qJ(3), t300 * t233 + t332 * t473, -t233 * t70 + t300 * t329 - t332 * t417 + t333 * t473, t233 * t318 - t332 * t384 - t401 * t473, t318 * t329 - t333 * t384 + t401 * t417, t401 * t384, t417 * t137 + t179 * t333 - t280 * t70 + t314 * t282 + t330 * t318 - t89 * t329 - t42 * t384 + t401 * t483, t473 * t137 - t179 * t332 - t185 * t318 + t89 * t233 - t280 * t300 + t43 * t384 + t401 * t491 - t474, -t108 * t316 - t34 * t433, t374 * t108 - t373 * t106 + (t444 - t297 * t35 + (t106 * t293 - t108 * t297) * qJD(5)) * t233, t108 * t417 - t316 * t480 + t329 * t34 + t433 * t69, -t106 * t417 - t317 * t480 + t329 * t35 - t434 * t69, -t329 * t69 + t417 * t480, -t39 * t155 - t330 * t35 + t377 * t329 + t417 * t15 + t441 * t106 + (t39 * qJD(5) * t233 + t165 * t69 + (-qJD(5) * t185 - t486) * t480) * t297 + (t12 * t233 - t185 * t69 + t39 * t225 + (-qJD(5) * t165 - t487) * t480) * t293 + t322, t441 * t108 + t12 * t433 - t417 * t16 + t3 * t329 - t316 * t39 + t330 * t34 - t418 * t69 + t472 * t480 + t323, t106 * t450 + t114 * t35 - t13 * t417 + t2 * t329 + t23 * t317 + t434 * t5 - t451 * t480 - t69 * t88 + t322, -t34 * t88 - t35 * t87 + t374 * t14 + t373 * t13 + t451 * t108 - t453 * t106 + t474 + (-t1 * t293 + t2 * t297 + (-t13 * t293 - t14 * t297) * qJD(5)) * t233, -t1 * t329 - t108 * t450 + t114 * t34 + t14 * t417 + t23 * t316 - t433 * t5 + t453 * t480 + t69 * t87 - t323, t1 * t87 + t5 * t114 + t2 * t88 - g(1) * (pkin(5) * t154 + qJ(6) * t153 + t230 * t455) - g(2) * (pkin(5) * t152 + qJ(6) * t151 + t228 * t455) + t450 * t23 + t453 * t14 + t451 * t13 + t355 * t340 + (-pkin(5) * t197 - qJ(6) * t196 - (t295 * t455 + t298 * t340) * t289) * g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202 * t268 - t351, t432 + (t290 * t397 + (-t201 + t409) * t410) * t289, -t201 ^ 2 - t202 ^ 2, t116 * t202 - t117 * t201 - t308 + t470, 0, 0, 0, 0, 0, t372 + 0.2e1 * t471 - t475, t304 - t484 + 0.2e1 * t489, 0, 0, 0, 0, 0, t477, -t297 * t370 - t438 - t66, t477 (t34 + t485) * t297 + t490 + t454, t438 + t479, -t332 * t23 + t488 * t293 + t297 * t492 - t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t332 * t333, t332 ^ 2 - t333 ^ 2, t484 + t304, -t372 - t475, t318, -t137 * t332 - t401 * t43 + t321 - t375, -t137 * t333 - t401 * t42 - t320 + t336, t108 * t437 - t444 (-t34 + t485) * t297 - t490 + t454, -t438 + t479, -t369 * t480 + t476 + t67, -t480 * t332, -pkin(4) * t35 - t43 * t106 - t15 * t332 + (t42 * t480 + t334) * t293 + (-t12 + (-t77 - t448) * t480 + t321) * t297, pkin(4) * t34 + t452 * t480 + t16 * t332 - t43 * t108 + t334 * t297 + (t12 + t305) * t293, t440 * t106 + t13 * t332 + t22 * t480 + t293 * t469 + t303 * t297 - t341 * t35, t106 * t20 - t108 * t22 + ((qJD(5) * t108 - t35) * pkin(10) + t488) * t297 + ((qJD(5) * t106 - t34) * pkin(10) - t492) * t293 + t320, -t440 * t108 - t14 * t332 - t20 * t480 + t303 * t293 - t297 * t469 - t34 * t341, -t13 * t22 - t14 * t20 + t440 * t23 + (t1 * t297 + t2 * t293 + (t13 * t297 - t14 * t293) * qJD(5) + t320) * pkin(10) + (-t5 + t321) * t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t439, -t106 ^ 2 + t467, t19, t108 * t480 - t35, t69, -t108 * t39 + t306 + t445, t106 * t39 + t15 * t480 - t302, -t106 * t60 - t301 + t445 + 0.2e1 * t466, pkin(5) * t34 - qJ(6) * t35 + (t14 - t16) * t108 + (t13 - t420) * t106, 0.2e1 * t447 - t106 * t23 + t108 * t60 + (0.2e1 * qJD(6) - t15) * t480 + t302, t1 * qJ(6) - t2 * pkin(5) - t23 * t60 - t13 * t16 - g(1) * (-pkin(5) * t130 + qJ(6) * t131) - g(2) * (-pkin(5) * t126 + qJ(6) * t127) - g(3) * (-pkin(5) * t167 + qJ(6) * t168) + t420 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t439 - t69, t19, -t467 - t370, t301 - t446 - t466;];
tau_reg  = t4;
