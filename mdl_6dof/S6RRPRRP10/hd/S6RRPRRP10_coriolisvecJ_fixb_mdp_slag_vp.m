% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP10_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRPRRP10_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRPRRP10_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:42:54
% EndTime: 2019-03-09 12:43:13
% DurationCPUTime: 12.81s
% Computational Cost: add. (14066->624), mult. (37010->835), div. (0->0), fcn. (29827->10), ass. (0->243)
t610 = sin(pkin(6));
t609 = sin(pkin(11));
t611 = cos(pkin(11));
t614 = sin(qJ(4));
t617 = cos(qJ(4));
t574 = t609 * t614 - t617 * t611;
t618 = cos(qJ(2));
t640 = t574 * t618;
t630 = t610 * t640;
t543 = qJD(1) * t630;
t571 = t574 * qJD(4);
t744 = t571 - t543;
t575 = t609 * t617 + t611 * t614;
t718 = t610 * t618;
t631 = t575 * t718;
t702 = -qJD(1) * t631 + t575 * qJD(4);
t697 = qJD(1) * t618;
t599 = t610 * t697;
t615 = sin(qJ(2));
t612 = cos(pkin(6));
t699 = qJD(1) * t612;
t684 = pkin(1) * t699;
t566 = pkin(8) * t599 + t615 * t684;
t600 = qJD(2) + t699;
t544 = qJ(3) * t600 + t566;
t561 = (-pkin(2) * t618 - qJ(3) * t615 - pkin(1)) * t610;
t548 = qJD(1) * t561;
t491 = -t544 * t609 + t611 * t548;
t698 = qJD(1) * t615;
t679 = t610 * t698;
t554 = t600 * t609 + t611 * t679;
t448 = -pkin(3) * t599 - pkin(9) * t554 + t491;
t656 = pkin(2) * t615 - qJ(3) * t618;
t546 = (qJD(2) * t656 - qJD(3) * t615) * t610;
t531 = qJD(1) * t546;
t686 = qJD(1) * qJD(2);
t675 = t610 * t686;
t659 = t615 * t675;
t683 = pkin(1) * qJD(2) * t612;
t665 = qJD(1) * t683;
t642 = -pkin(8) * t659 + t618 * t665;
t532 = qJD(3) * t600 + t642;
t485 = t611 * t531 - t532 * t609;
t717 = t611 * t618;
t634 = (pkin(3) * t615 - pkin(9) * t717) * t610;
t628 = qJD(2) * t634;
t449 = qJD(1) * t628 + t485;
t492 = t611 * t544 + t609 * t548;
t553 = t600 * t611 - t609 * t679;
t463 = pkin(9) * t553 + t492;
t486 = t609 * t531 + t611 * t532;
t658 = t618 * t675;
t646 = t609 * t658;
t464 = -pkin(9) * t646 + t486;
t694 = qJD(4) * t617;
t695 = qJD(4) * t614;
t639 = -t448 * t694 - t614 * t449 + t463 * t695 - t617 * t464;
t391 = pkin(10) * t659 - t639;
t627 = qJD(2) * t631;
t624 = qJD(1) * t627;
t648 = t553 * t614 + t554 * t617;
t742 = qJD(4) * t648;
t462 = t624 + t742;
t559 = pkin(8) * t658 + t615 * t665;
t527 = pkin(3) * t646 + t559;
t626 = qJD(2) * t630;
t623 = qJD(1) * t626;
t649 = t617 * t553 - t554 * t614;
t635 = t649 * qJD(4);
t621 = t635 - t623;
t411 = t462 * pkin(4) - pkin(10) * t621 + t527;
t418 = t614 * t448 + t617 * t463;
t687 = t599 - qJD(4);
t415 = -pkin(10) * t687 + t418;
t565 = -pkin(8) * t679 + t618 * t684;
t537 = -pkin(2) * t600 + qJD(3) - t565;
t502 = -pkin(3) * t553 + t537;
t427 = -pkin(4) * t649 - pkin(10) * t648 + t502;
t613 = sin(qJ(5));
t616 = cos(qJ(5));
t691 = qJD(5) * t616;
t692 = qJD(5) * t613;
t663 = t613 * t391 - t616 * t411 + t415 * t691 + t427 * t692;
t737 = pkin(5) * t462;
t380 = t663 - t737;
t394 = t415 * t616 + t427 * t613;
t750 = qJD(5) - t649;
t388 = qJ(6) * t750 + t394;
t733 = t388 * t750;
t758 = -t380 + t733;
t700 = qJD(1) * t610;
t564 = t656 * t700;
t513 = t611 * t564 - t565 * t609;
t489 = qJD(1) * t634 + t513;
t514 = t609 * t564 + t611 * t565;
t661 = t609 * t599;
t498 = -pkin(9) * t661 + t514;
t735 = pkin(9) + qJ(3);
t588 = t735 * t609;
t589 = t735 * t611;
t647 = -t588 * t617 - t589 * t614;
t680 = -qJD(3) * t574 + qJD(4) * t647 - t614 * t489 - t617 * t498;
t670 = t750 ^ 2;
t482 = -t613 * t687 + t616 * t648;
t668 = t750 * t613;
t757 = t482 * t668;
t753 = pkin(10) * t679 - t680;
t535 = pkin(3) * t661 + t566;
t756 = -t702 * pkin(4) - pkin(10) * t744 + t535;
t381 = t616 * t391 + t613 * t411 - t415 * t692 + t427 * t691;
t734 = qJ(6) * t462;
t379 = qJD(6) * t750 + t381 + t734;
t393 = -t415 * t613 + t427 * t616;
t688 = qJD(6) - t393;
t387 = -pkin(5) * t750 + t688;
t755 = t750 * t387 + t379;
t669 = t616 * t687;
t480 = t613 * t648 + t669;
t754 = t480 * t649;
t541 = -t588 * t614 + t589 * t617;
t751 = qJD(3) * t575 + qJD(4) * t541 + t489 * t617 - t614 * t498;
t452 = t613 * t462;
t725 = t750 * t616;
t749 = -t649 * t725 + t691 * t750 + t452;
t606 = t610 ^ 2;
t748 = -0.2e1 * t606 * t686;
t608 = t618 ^ 2;
t747 = MDP(5) * (t615 ^ 2 - t608);
t560 = pkin(8) * t718 + (pkin(1) * t615 + qJ(3)) * t612;
t509 = -t560 * t609 + t611 * t561;
t719 = t610 * t615;
t570 = t609 * t612 + t611 * t719;
t471 = -pkin(3) * t718 - pkin(9) * t570 + t509;
t510 = t611 * t560 + t609 * t561;
t569 = t609 * t719 - t612 * t611;
t488 = -pkin(9) * t569 + t510;
t707 = t614 * t471 + t617 * t488;
t430 = -pkin(10) * t718 + t707;
t517 = t617 * t569 + t570 * t614;
t518 = -t569 * t614 + t570 * t617;
t563 = pkin(8) * t719 + (-pkin(1) * t618 - pkin(2)) * t612;
t522 = pkin(3) * t569 + t563;
t440 = pkin(4) * t517 - pkin(10) * t518 + t522;
t746 = t616 * t430 + t613 * t440;
t705 = pkin(4) * t679 + t751;
t605 = -pkin(3) * t611 - pkin(2);
t524 = pkin(4) * t574 - pkin(10) * t575 + t605;
t704 = t613 * t524 + t616 * t541;
t693 = qJD(5) * t482;
t424 = t613 * t621 - t616 * t659 + t693;
t743 = -t524 * t691 + t541 * t692 + t613 * t756 + t616 * t753;
t417 = t617 * t448 - t614 * t463;
t414 = pkin(4) * t687 - t417;
t397 = t480 * pkin(5) - t482 * qJ(6) + t414;
t736 = pkin(10) * t462;
t741 = t397 * t750 - t736;
t740 = -t575 * t658 - t742;
t696 = qJD(2) * t615;
t678 = t610 * t696;
t645 = -pkin(8) * t678 + t618 * t683;
t552 = qJD(3) * t612 + t645;
t496 = t611 * t546 - t552 * t609;
t468 = t496 + t628;
t497 = t609 * t546 + t611 * t552;
t677 = qJD(2) * t718;
t660 = t609 * t677;
t484 = -pkin(9) * t660 + t497;
t638 = t614 * t468 + t471 * t694 + t617 * t484 - t488 * t695;
t401 = pkin(10) * t678 + t638;
t476 = -qJD(4) * t517 - t626;
t477 = qJD(4) * t518 + t627;
t567 = pkin(8) * t677 + t615 * t683;
t536 = pkin(3) * t660 + t567;
t422 = pkin(4) * t477 - pkin(10) * t476 + t536;
t739 = -qJD(5) * t746 - t401 * t613 + t422 * t616;
t738 = t482 ^ 2;
t732 = t394 * t750;
t731 = t418 * t615;
t423 = qJD(5) * t669 - t613 * t659 - t616 * t621 + t648 * t692;
t730 = t423 * t613;
t729 = t480 * t482;
t728 = t482 * t648;
t727 = t491 * t615;
t726 = t492 * t615;
t723 = t575 * t613;
t722 = t575 * t616;
t619 = qJD(1) ^ 2;
t721 = t606 * t619;
t720 = t609 * t618;
t454 = t616 * t462;
t654 = pkin(5) * t613 - qJ(6) * t616;
t716 = qJD(6) * t613 - t654 * t750 + t418;
t715 = -qJ(6) * t702 - qJD(6) * t574 + t743;
t714 = pkin(5) * t702 - qJD(5) * t704 + t753 * t613 - t616 * t756;
t515 = -t543 * t613 - t616 * t679;
t516 = -t543 * t616 + t613 * t679;
t655 = pkin(5) * t616 + qJ(6) * t613;
t713 = pkin(5) * t515 - qJ(6) * t516 + t654 * t571 - (qJD(5) * t655 - qJD(6) * t616) * t575 - t705;
t442 = pkin(4) * t648 - pkin(10) * t649;
t712 = t616 * t417 + t613 * t442;
t711 = -t613 * t424 - t480 * t691;
t685 = pkin(1) * t721;
t682 = pkin(10) * t692;
t681 = t613 * t718;
t674 = t471 * t617 - t614 * t488;
t672 = t571 * t613 + t515;
t671 = -t571 * t616 - t516;
t667 = t687 * t610;
t664 = t606 * t615 * t618 * MDP(4);
t662 = -t448 * t695 + t617 * t449 - t463 * t694 - t614 * t464;
t657 = pkin(1) * t748;
t429 = pkin(4) * t718 - t674;
t651 = -t430 * t613 + t440 * t616;
t650 = t524 * t616 - t541 * t613;
t644 = t468 * t617 - t471 * t695 - t614 * t484 - t488 * t694;
t499 = t518 * t613 + t616 * t718;
t643 = t414 * t750 - t736;
t641 = t397 * t482 + t663;
t637 = t616 * t401 + t613 * t422 - t430 * t692 + t440 * t691;
t633 = t575 * t691 - t672;
t632 = t575 * t692 - t671;
t392 = -pkin(4) * t659 - t662;
t402 = -pkin(4) * t678 - t644;
t622 = -qJ(3) * t696 + (-pkin(2) * qJD(2) + qJD(3) - t537) * t618;
t583 = -pkin(4) - t655;
t500 = t518 * t616 - t681;
t490 = t575 * t654 - t647;
t459 = -pkin(5) * t574 - t650;
t458 = qJ(6) * t574 + t704;
t434 = -qJD(5) * t681 + t476 * t613 + t518 * t691 - t616 * t678;
t433 = qJD(5) * t499 - t616 * t476 - t613 * t678;
t432 = pkin(5) * t482 + qJ(6) * t480;
t405 = pkin(5) * t499 - qJ(6) * t500 + t429;
t404 = t480 * t750 - t423;
t399 = -pkin(5) * t517 - t651;
t398 = qJ(6) * t517 + t746;
t396 = -pkin(5) * t648 + t417 * t613 - t442 * t616;
t395 = qJ(6) * t648 + t712;
t386 = pkin(5) * t434 + qJ(6) * t433 - qJD(6) * t500 + t402;
t385 = pkin(5) * t424 + qJ(6) * t423 - qJD(6) * t482 + t392;
t384 = -pkin(5) * t477 - t739;
t383 = qJ(6) * t477 + qJD(6) * t517 + t637;
t1 = [(t638 * t687 + t536 * t648 + t522 * (t553 * t694 - t554 * t695) + t527 * t518 + t502 * t476 + (-t639 * t618 + (-t731 + (-t522 * t640 - t615 * t707) * qJD(1)) * qJD(2)) * t610) * MDP(21) + (MDP(6) * t677 - MDP(7) * t678) * (t600 + t699) + (-t476 * t687 + (-t618 * t635 + (t648 * t615 + (t574 * t608 * t610 + t518 * t615) * qJD(1)) * qJD(2)) * t610) * MDP(17) + (t476 * t648 + t518 * t621) * MDP(15) + (t392 * t499 + t393 * t477 + t402 * t480 + t414 * t434 + t429 * t424 + t651 * t462 - t517 * t663 + t739 * t750) * MDP(27) + (-t381 * t517 + t392 * t500 - t394 * t477 + t402 * t482 - t414 * t433 - t429 * t423 - t462 * t746 - t637 * t750) * MDP(28) + (t462 * t517 + t477 * t750) * MDP(26) + (-t424 * t517 - t434 * t750 - t462 * t499 - t477 * t480) * MDP(25) + (-t423 * t517 - t433 * t750 + t462 * t500 + t477 * t482) * MDP(24) + (t379 * t517 + t383 * t750 - t385 * t500 - t386 * t482 + t388 * t477 + t397 * t433 + t398 * t462 + t405 * t423) * MDP(31) + (-t380 * t517 - t384 * t750 + t385 * t499 + t386 * t480 - t387 * t477 + t397 * t434 - t399 * t462 + t405 * t424) * MDP(29) + (-t518 * t462 + t476 * t649 - t477 * t648 - t517 * t621) * MDP(16) + (t477 * t687 + (t462 * t618 + (-qJD(1) * t517 + t649) * t696) * t610) * MDP(18) + (-t644 * t687 - t536 * t649 + t522 * t462 + t527 * t517 + t502 * t477 + (-t662 * t618 + (qJD(1) * t674 + t417) * t696) * t610) * MDP(20) + (t554 * t567 + t559 * t570 + ((qJD(1) * t497 + t486) * t618 + (t537 * t717 - t726 + (-t510 * t615 + t563 * t717) * qJD(1)) * qJD(2)) * t610) * MDP(12) + (-t553 * t567 + t559 * t569 + ((-qJD(1) * t496 - t485) * t618 + (t537 * t720 + t727 + (t509 * t615 + t563 * t720) * qJD(1)) * qJD(2)) * t610) * MDP(11) + 0.2e1 * t664 * t686 + (t379 * t398 + t380 * t399 + t383 * t388 + t384 * t387 + t385 * t405 + t386 * t397) * MDP(32) + (-t606 * t697 - t667) * MDP(19) * t696 + (-t485 * t570 - t486 * t569 - t496 * t554 + t497 * t553 + (-t491 * t611 - t492 * t609 + (-t509 * t611 - t510 * t609) * qJD(1)) * t677) * MDP(13) + (-t600 * t645 - t612 * t642 + t618 * t657) * MDP(10) + (-t559 * t612 - t567 * t600 + t615 * t657) * MDP(9) + t747 * t748 + (-t423 * t500 - t433 * t482) * MDP(22) + (-t379 * t499 + t380 * t500 - t383 * t480 + t384 * t482 - t387 * t433 - t388 * t434 - t398 * t424 - t399 * t423) * MDP(30) + (t423 * t499 - t424 * t500 + t433 * t480 - t434 * t482) * MDP(23) + (t485 * t509 + t486 * t510 + t491 * t496 + t492 * t497 + t537 * t567 + t559 * t563) * MDP(14); (t650 * t462 - t663 * t574 - t647 * t424 + t392 * t723 + ((-qJD(5) * t541 - t756) * t616 + (-qJD(5) * t524 + t753) * t613) * t750 + t705 * t480 + t702 * t393 + t633 * t414) * MDP(27) + (-pkin(2) * t559 - t491 * t513 - t492 * t514 - t537 * t566 + (-t491 * t609 + t492 * t611) * qJD(3) + (-t485 * t609 + t486 * t611) * qJ(3)) * MDP(14) + (MDP(6) * t599 - MDP(7) * t679) * (qJD(2) - t600) + (-t381 * t574 + t392 * t722 - t702 * t394 - t632 * t414 + t423 * t647 - t704 * t462 + t705 * t482 + t743 * t750) * MDP(28) + (t379 * t574 - t385 * t722 + t388 * t702 + t397 * t632 + t423 * t490 + t458 * t462 + t482 * t713 - t715 * t750) * MDP(31) + (-t380 * t574 + t385 * t723 - t387 * t702 + t397 * t633 + t424 * t490 - t459 * t462 - t480 * t713 + t714 * t750) * MDP(29) + (-t423 * t574 + t454 * t575 + t482 * t702 - t632 * t750) * MDP(24) + (-t424 * t574 - t452 * t575 - t480 * t702 - t633 * t750) * MDP(25) + (t462 * t574 + t702 * t750) * MDP(26) + (t605 * t462 + t527 * t574 + t535 * t649 + t702 * t502 + (qJD(2) * t647 - t417) * t679 + t751 * t687) * MDP(20) + ((-qJD(2) * t574 - t649) * t679 + t702 * t687) * MDP(18) + (-t535 * t648 + t527 * t575 + t680 * t599 + (t605 * t649 - t680) * qJD(4) - t744 * t502 + (t731 + (-t541 * t615 - t605 * t640) * qJD(2)) * t700) * MDP(21) + (t575 * t621 - t648 * t744) * MDP(15) + (-t575 * t462 - t574 * t621 - t648 * t702 - t649 * t744) * MDP(16) + (t672 * t482 - t671 * t480 + (t730 - t424 * t616 + (t480 * t613 - t482 * t616) * qJD(5)) * t575) * MDP(23) + (-t554 * t566 + t559 * t609 + (-t514 * t618 + t611 * t622 + t726) * t700) * MDP(12) + (t553 * t566 - t559 * t611 + (t513 * t618 + t609 * t622 - t727) * t700) * MDP(11) + (-t423 * t722 - t482 * t632) * MDP(22) + (t565 * t600 + t618 * t685 - t642) * MDP(10) + (-t423 * t459 - t424 * t458 - t714 * t482 + t715 * t480 + t672 * t388 + t671 * t387 + (-t379 * t613 + t380 * t616 + (-t387 * t613 - t388 * t616) * qJD(5)) * t575) * MDP(30) + (t379 * t458 + t380 * t459 + t385 * t490 - t387 * t714 - t388 * t715 - t397 * t713) * MDP(32) + (t566 * t600 + t615 * t685 - t559) * MDP(9) - t619 * t664 + MDP(19) * t667 * t698 + (t513 * t554 - t514 * t553 + (qJD(3) * t553 + t491 * t599 + t486) * t611 + (qJD(3) * t554 + t492 * t599 - t485) * t609) * MDP(13) + ((qJD(2) * t575 - t648) * t679 + t744 * t687) * MDP(17) + t721 * t747; (-t553 ^ 2 - t554 ^ 2) * MDP(13) + (t491 * t554 - t492 * t553 + t559) * MDP(14) + (t624 + 0.2e1 * t742) * MDP(20) + (-t623 + 0.2e1 * t635) * MDP(21) + (-t616 * t670 - t452 - t728) * MDP(28) + ((t423 + t754) * t616 + t757 + t711) * MDP(30) + (t728 + t749) * MDP(31) + (-t397 * t648 + t755 * t613 + t758 * t616) * MDP(32) + ((qJD(2) * t609 - t554) * MDP(11) + (qJD(2) * t611 - t553) * MDP(12) - t648 * MDP(20) - t649 * MDP(21)) * t599 + (MDP(27) + MDP(29)) * (-t480 * t648 - t613 * t670 + t454); -t649 ^ 2 * MDP(16) + (t599 * t649 - t623) * MDP(17) + t740 * MDP(18) + MDP(19) * t659 + (-t418 * t687 + t662) * MDP(20) + (-t417 * t687 - t502 * t649 + t639) * MDP(21) + (t482 * t725 - t730) * MDP(22) + ((-t423 + t754) * t616 - t757 + t711) * MDP(23) + t749 * MDP(24) + (-t668 * t750 + t454) * MDP(25) + (-pkin(4) * t424 - t418 * t480 + (-t392 + (-pkin(10) * qJD(5) - t442) * t750) * t616 + (t417 * t750 + t643) * t613) * MDP(27) + (pkin(4) * t423 + t392 * t613 - t418 * t482 + (t682 + t712) * t750 + t643 * t616) * MDP(28) + (-t385 * t616 + t424 * t583 + (-pkin(10) * t691 + t396) * t750 - t716 * t480 + t741 * t613) * MDP(29) + (t395 * t480 - t396 * t482 + ((-t424 + t693) * pkin(10) + t755) * t616 + ((qJD(5) * t480 - t423) * pkin(10) - t758) * t613) * MDP(30) + (-t385 * t613 + t423 * t583 + (-t395 - t682) * t750 + t716 * t482 - t741 * t616) * MDP(31) + (t385 * t583 - t387 * t396 - t388 * t395 - t716 * t397 + (t379 * t616 + t380 * t613 + (t387 * t616 - t388 * t613) * qJD(5)) * pkin(10)) * MDP(32) + (-MDP(15) * t649 + MDP(16) * t648 - MDP(18) * t687 - t502 * MDP(20) - t482 * MDP(24) + t480 * MDP(25) - MDP(26) * t750 - t393 * MDP(27) + t394 * MDP(28) + t387 * MDP(29) - t388 * MDP(31)) * t648; MDP(22) * t729 + (-t480 ^ 2 + t738) * MDP(23) + t404 * MDP(24) + (t482 * t750 - t424) * MDP(25) + t462 * MDP(26) + (-t414 * t482 - t663 + t732) * MDP(27) + (t393 * t750 + t414 * t480 - t381) * MDP(28) + (-t432 * t480 - t641 + t732 + 0.2e1 * t737) * MDP(29) + (pkin(5) * t423 - qJ(6) * t424 + (t388 - t394) * t482 + (t387 - t688) * t480) * MDP(30) + (0.2e1 * t734 - t397 * t480 + t432 * t482 + (0.2e1 * qJD(6) - t393) * t750 + t381) * MDP(31) + (-pkin(5) * t380 + qJ(6) * t379 - t387 * t394 + t388 * t688 - t397 * t432) * MDP(32); (t729 + t740) * MDP(29) + t404 * MDP(30) + (-t738 - t670) * MDP(31) + (t641 - t733 - t737) * MDP(32);];
tauc  = t1;
