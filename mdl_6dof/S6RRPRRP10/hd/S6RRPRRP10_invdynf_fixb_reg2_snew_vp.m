% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRP10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:51:02
% EndTime: 2019-05-06 18:51:19
% DurationCPUTime: 18.01s
% Computational Cost: add. (83126->355), mult. (189676->499), div. (0->0), fcn. (154553->12), ass. (0->280)
t2950 = sin(pkin(11));
t2952 = cos(pkin(11));
t2953 = cos(pkin(6));
t3028 = qJD(1) * t2953;
t3011 = qJD(2) + t3028;
t2951 = sin(pkin(6));
t2956 = sin(qJ(2));
t3018 = t2951 * t2956;
t3014 = qJD(1) * t3018;
t2923 = t2950 * t3011 + t2952 * t3014;
t2955 = sin(qJ(4));
t2959 = cos(qJ(4));
t2978 = t2950 * t3014 - t2952 * t3011;
t2902 = t2959 * t2923 - t2955 * t2978;
t2960 = cos(qJ(2));
t3017 = t2951 * t2960;
t3013 = qJD(1) * t3017;
t3015 = qJDD(1) * t2951;
t2929 = qJD(2) * t3013 + t2956 * t3015;
t3005 = qJDD(1) * t2953 + qJDD(2);
t2907 = t2952 * t2929 + t2950 * t3005;
t3006 = -t2929 * t2950 + t2952 * t3005;
t3008 = t2955 * t2907 - t2959 * t3006;
t2975 = qJD(4) * t2902 + qJDD(5) + t3008;
t2939 = -qJD(4) + t3013;
t2954 = sin(qJ(5));
t2958 = cos(qJ(5));
t2883 = t2902 * t2954 + t2939 * t2958;
t2885 = t2902 * t2958 - t2939 * t2954;
t3022 = t2883 * t2885;
t2821 = t2975 + t3022;
t2882 = t2885 ^ 2;
t2900 = t2923 * t2955 + t2959 * t2978;
t2899 = qJD(5) + t2900;
t3035 = t2899 ^ 2;
t3039 = -t2882 - t3035;
t2792 = t2821 * t2958 + t2954 * t3039;
t2972 = -t2959 * t2907 - t2955 * t3006;
t2854 = -t2900 * qJD(4) - t2972;
t2946 = t2960 * t3015;
t2981 = qJD(2) * t3014 - t2946;
t2977 = qJDD(4) + t2981;
t2969 = -t2883 * qJD(5) + t2958 * t2854 + t2954 * t2977;
t3021 = t2883 * t2899;
t2967 = t2969 - t3021;
t2767 = t2792 * t2955 + t2959 * t2967;
t2769 = t2792 * t2959 - t2955 * t2967;
t2741 = t2767 * t2952 + t2769 * t2950;
t2747 = t2767 * t2950 - t2769 * t2952;
t2790 = t2821 * t2954 - t2958 * t3039;
t2994 = t2747 * t2956 + t2790 * t2960;
t2719 = t2741 * t2951 + t2953 * t2994;
t2730 = t2747 * t2960 - t2790 * t2956;
t2957 = sin(qJ(1));
t2961 = cos(qJ(1));
t3074 = t2719 * t2957 - t2730 * t2961;
t3073 = t2719 * t2961 + t2730 * t2957;
t2717 = -t2741 * t2953 + t2951 * t2994;
t2812 = t2969 + t3021;
t3009 = t2854 * t2954 - t2958 * t2977;
t2974 = (-qJD(5) + t2899) * t2885 - t3009;
t3037 = -t2812 * t2958 + t2954 * t2974;
t2850 = t2883 ^ 2;
t2833 = t2882 + t2850;
t3036 = t2812 * t2954 + t2958 * t2974;
t3049 = t2833 * t2959 + t2955 * t3036;
t3050 = -t2833 * t2955 + t2959 * t3036;
t3055 = -t2950 * t3049 + t2952 * t3050;
t3059 = t2956 * t3037 + t2960 * t3055;
t3056 = t2950 * t3050 + t2952 * t3049;
t3060 = t2956 * t3055 - t2960 * t3037;
t3063 = -t2951 * t3056 + t2953 * t3060;
t3068 = -t2957 * t3063 + t2961 * t3059;
t3067 = t2957 * t3059 + t2961 * t3063;
t3064 = t2951 * t3060 + t2953 * t3056;
t2822 = t2975 - t3022;
t3038 = -t3035 - t2850;
t3043 = -t2822 * t2954 + t2958 * t3038;
t3054 = t2955 * t3043;
t3044 = t2822 * t2958 + t2954 * t3038;
t3053 = t2956 * t3044;
t3052 = t2959 * t3043;
t3051 = t2960 * t3044;
t2973 = t2923 * t2978;
t2892 = -t2973 + t2981;
t2976 = t2978 ^ 2;
t3004 = t3011 ^ 2;
t3042 = -2 * qJD(3);
t2914 = t2978 * t3013;
t2887 = t2914 - t2907;
t3034 = t2900 ^ 2;
t3033 = t2902 ^ 2;
t3032 = t2923 ^ 2;
t3031 = t2939 ^ 2;
t3030 = t2953 * g(3);
t3029 = qJD(1) * t2951;
t3027 = qJD(1) * t2956;
t3020 = t2900 * t2902;
t2962 = qJD(1) ^ 2;
t3019 = t2951 ^ 2 * t2962;
t2941 = -g(1) * t2961 - g(2) * t2957;
t2925 = -pkin(1) * t2962 + pkin(8) * t3015 + t2941;
t2926 = (-pkin(2) * t2960 - qJ(3) * t2956) * t3029;
t2940 = t2957 * g(1) - t2961 * g(2);
t2971 = t2962 * t2951 * pkin(8) + qJDD(1) * pkin(1) + t2940;
t2970 = t2953 * t2971;
t2968 = (-t2951 * g(3) + t2970) * t2956;
t2965 = -t3004 * pkin(2) + t3005 * qJ(3) + (t2926 * t3029 + t2925) * t2960 + t2968;
t3002 = qJD(1) * t3011;
t2980 = t2960 * t3002;
t2966 = -t2946 * pkin(2) - t3030 - t2929 * qJ(3) + (-qJ(3) * t2980 + (0.2e1 * qJD(2) + t3028) * pkin(2) * t3027 - t2971) * t2951;
t2827 = t2950 * t2966 + t2952 * t2965 + t2978 * t3042;
t2908 = -pkin(3) * t3013 - pkin(9) * t2923;
t2818 = -pkin(3) * t2976 + pkin(9) * t3006 + t2908 * t3013 + t2827;
t2826 = t2923 * t3042 - t2950 * t2965 + t2952 * t2966;
t2963 = pkin(3) * t2892 + t2887 * pkin(9) + t2826;
t2783 = t2959 * t2818 + t2955 * t2963;
t2866 = pkin(4) * t2900 - pkin(10) * t2902;
t2766 = -pkin(4) * t3031 + pkin(10) * t2977 - t2900 * t2866 + t2783;
t3007 = t2956 * t2925 - t2960 * t2970;
t2872 = qJDD(3) - t3005 * pkin(2) - t3004 * qJ(3) + (g(3) * t2960 + t2926 * t3027) * t2951 + t3007;
t2830 = -t3006 * pkin(3) - t2976 * pkin(9) + t2923 * t2908 + t2872;
t2839 = (qJD(4) - t2939) * t2902 + t3008;
t3010 = -t2900 * t2939 - t2854;
t2964 = pkin(4) * t2839 + pkin(10) * t3010 + t2830;
t2750 = t2958 * t2766 + t2954 * t2964;
t3016 = t2939 + qJD(4);
t2949 = t2960 ^ 2;
t3012 = t2949 * t3019;
t2749 = -t2766 * t2954 + t2958 * t2964;
t2782 = -t2818 * t2955 + t2959 * t2963;
t3003 = t2923 * t3013;
t2849 = pkin(5) * t2883 - qJ(6) * t2885;
t2732 = -pkin(5) * t3035 + qJ(6) * t2975 + 0.2e1 * qJD(6) * t2899 - t2883 * t2849 + t2750;
t2733 = -pkin(5) * t2975 - qJ(6) * t3035 + t2849 * t2885 + qJDD(6) - t2749;
t2712 = t2732 * t2958 + t2733 * t2954;
t2765 = -t2977 * pkin(4) - t3031 * pkin(10) + t2866 * t2902 - t2782;
t2979 = -qJD(5) * t2885 - t3009;
t2740 = -t2979 * pkin(5) + (pkin(5) * t2899 - 0.2e1 * qJD(6)) * t2885 + t2765 - t2967 * qJ(6);
t2703 = t2712 * t2955 - t2740 * t2959;
t2704 = t2712 * t2959 + t2740 * t2955;
t2697 = -t2703 * t2950 + t2704 * t2952;
t2711 = t2732 * t2954 - t2733 * t2958;
t3001 = t2697 * t2956 - t2711 * t2960;
t2723 = -t2749 * t2954 + t2750 * t2958;
t2709 = t2723 * t2955 - t2765 * t2959;
t2710 = t2723 * t2959 + t2765 * t2955;
t2700 = -t2709 * t2950 + t2710 * t2952;
t2722 = t2749 * t2958 + t2750 * t2954;
t3000 = t2700 * t2956 - t2722 * t2960;
t2751 = t2782 * t2959 + t2783 * t2955;
t2752 = -t2782 * t2955 + t2783 * t2959;
t2725 = -t2751 * t2950 + t2752 * t2952;
t2999 = t2725 * t2956 - t2830 * t2960;
t2808 = (qJD(5) + t2899) * t2885 + t3009;
t2768 = -t2808 * t2959 + t3054;
t2770 = t2808 * t2955 + t3052;
t2744 = -t2768 * t2950 + t2770 * t2952;
t2995 = t2744 * t2956 - t3051;
t2809 = t2899 * t2885 - t2979;
t2772 = -t2809 * t2959 + t3054;
t2774 = t2809 * t2955 + t3052;
t2748 = -t2772 * t2950 + t2774 * t2952;
t2993 = t2748 * t2956 - t3051;
t2840 = -t2902 * t3016 - t3008;
t2842 = t2900 * t3016 + t2972;
t2802 = t2840 * t2955 + t2842 * t2959;
t2803 = t2840 * t2959 - t2842 * t2955;
t2776 = -t2802 * t2950 + t2803 * t2952;
t2846 = -t3033 - t3034;
t2992 = t2776 * t2956 - t2846 * t2960;
t2859 = t2977 - t3020;
t2864 = -t3031 - t3034;
t2824 = t2859 * t2959 + t2864 * t2955;
t2825 = -t2859 * t2955 + t2864 * t2959;
t2789 = -t2824 * t2950 + t2825 * t2952;
t2991 = t2789 * t2956 - t2839 * t2960;
t2795 = -t2826 * t2950 + t2827 * t2952;
t2990 = t2795 * t2956 - t2872 * t2960;
t2858 = -t2977 - t3020;
t2879 = -t3031 - t3033;
t2834 = t2858 * t2955 + t2879 * t2959;
t2835 = t2858 * t2959 - t2879 * t2955;
t2801 = -t2834 * t2950 + t2835 * t2952;
t2989 = t2801 * t2956 + t2960 * t3010;
t2889 = -t3003 + t3006;
t2852 = -t2887 * t2950 + t2889 * t2952;
t2886 = -t2976 - t3032;
t2988 = t2852 * t2956 - t2886 * t2960;
t2898 = -t3012 - t2976;
t2856 = -t2892 * t2950 + t2898 * t2952;
t2888 = -t3003 - t3006;
t2987 = t2856 * t2956 - t2888 * t2960;
t2891 = -t2973 - t2981;
t2913 = -t3012 - t3032;
t2869 = t2891 * t2952 - t2913 * t2950;
t2890 = t2914 + t2907;
t2986 = t2869 * t2956 - t2890 * t2960;
t2895 = -g(3) * t3017 - t3007;
t2896 = t2960 * t2925 + t2968;
t2985 = t2895 * t2960 + t2896 * t2956;
t2910 = t2951 * t2980 - t2929;
t2932 = t3002 * t3018;
t2911 = t2932 - t2981;
t2984 = t2910 * t2960 + t2911 * t2956;
t2948 = t2956 ^ 2;
t2921 = -t2948 * t3019 - t3004;
t2938 = t2960 * t2956 * t3019;
t2928 = t2938 - t3005;
t2983 = t2921 * t2960 + t2928 * t2956;
t2927 = t2938 + t3005;
t2930 = -t3004 - t3012;
t2982 = t2927 * t2960 + t2930 * t2956;
t2937 = -qJDD(1) * t2957 - t2961 * t2962;
t2936 = qJDD(1) * t2961 - t2957 * t2962;
t2931 = (-t2948 - t2949) * t3019;
t2916 = -t2951 * t2971 - t3030;
t2912 = t2932 + t2981;
t2909 = t3011 * t3013 + t2929;
t2904 = -t2927 * t2956 + t2930 * t2960;
t2903 = -t2921 * t2956 + t2928 * t2960;
t2880 = -t2910 * t2956 + t2911 * t2960;
t2878 = -t2912 * t2951 + t2953 * t2982;
t2877 = t2912 * t2953 + t2951 * t2982;
t2876 = -t2909 * t2951 + t2953 * t2983;
t2875 = t2909 * t2953 + t2951 * t2983;
t2874 = -t2931 * t2951 + t2953 * t2984;
t2873 = t2931 * t2953 + t2951 * t2984;
t2868 = t2891 * t2950 + t2913 * t2952;
t2865 = -t2895 * t2956 + t2896 * t2960;
t2855 = t2892 * t2952 + t2898 * t2950;
t2851 = t2887 * t2952 + t2889 * t2950;
t2848 = -t2916 * t2951 + t2953 * t2985;
t2847 = t2916 * t2953 + t2951 * t2985;
t2845 = t2869 * t2960 + t2890 * t2956;
t2836 = t2856 * t2960 + t2888 * t2956;
t2831 = t2852 * t2960 + t2886 * t2956;
t2820 = -t2868 * t2951 + t2953 * t2986;
t2819 = t2868 * t2953 + t2951 * t2986;
t2817 = -t2855 * t2951 + t2953 * t2987;
t2816 = t2855 * t2953 + t2951 * t2987;
t2807 = -t2851 * t2951 + t2953 * t2988;
t2806 = t2851 * t2953 + t2951 * t2988;
t2800 = t2834 * t2952 + t2835 * t2950;
t2794 = t2826 * t2952 + t2827 * t2950;
t2788 = t2824 * t2952 + t2825 * t2950;
t2787 = t2795 * t2960 + t2872 * t2956;
t2784 = t2801 * t2960 - t2956 * t3010;
t2781 = t2789 * t2960 + t2839 * t2956;
t2775 = t2802 * t2952 + t2803 * t2950;
t2759 = t2776 * t2960 + t2846 * t2956;
t2758 = -t2800 * t2951 + t2953 * t2989;
t2757 = t2800 * t2953 + t2951 * t2989;
t2756 = -t2794 * t2951 + t2953 * t2990;
t2755 = t2794 * t2953 + t2951 * t2990;
t2754 = -t2788 * t2951 + t2953 * t2991;
t2753 = t2788 * t2953 + t2951 * t2991;
t2746 = t2772 * t2952 + t2774 * t2950;
t2742 = t2768 * t2952 + t2770 * t2950;
t2739 = -t2775 * t2951 + t2953 * t2992;
t2738 = t2775 * t2953 + t2951 * t2992;
t2731 = t2748 * t2960 + t3053;
t2729 = t2744 * t2960 + t3053;
t2724 = t2751 * t2952 + t2752 * t2950;
t2721 = t2725 * t2960 + t2830 * t2956;
t2720 = -t2746 * t2951 + t2953 * t2993;
t2718 = t2746 * t2953 + t2951 * t2993;
t2716 = -t2742 * t2951 + t2953 * t2995;
t2714 = t2742 * t2953 + t2951 * t2995;
t2702 = -t2724 * t2951 + t2953 * t2999;
t2701 = t2724 * t2953 + t2951 * t2999;
t2699 = t2709 * t2952 + t2710 * t2950;
t2698 = t2700 * t2960 + t2722 * t2956;
t2696 = t2703 * t2952 + t2704 * t2950;
t2695 = t2697 * t2960 + t2711 * t2956;
t2694 = -t2699 * t2951 + t2953 * t3000;
t2693 = t2699 * t2953 + t2951 * t3000;
t2692 = -t2696 * t2951 + t2953 * t3001;
t2691 = t2696 * t2953 + t2951 * t3001;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2937, -t2936, 0, -t2940 * t2957 + t2941 * t2961, 0, 0, 0, 0, 0, 0, -t2878 * t2957 + t2904 * t2961, -t2876 * t2957 + t2903 * t2961, -t2874 * t2957 + t2880 * t2961, -t2848 * t2957 + t2865 * t2961, 0, 0, 0, 0, 0, 0, -t2817 * t2957 + t2836 * t2961, -t2820 * t2957 + t2845 * t2961, -t2807 * t2957 + t2831 * t2961, -t2756 * t2957 + t2787 * t2961, 0, 0, 0, 0, 0, 0, -t2754 * t2957 + t2781 * t2961, -t2758 * t2957 + t2784 * t2961, -t2739 * t2957 + t2759 * t2961, -t2702 * t2957 + t2721 * t2961, 0, 0, 0, 0, 0, 0, -t2716 * t2957 + t2729 * t2961, -t3074, t3068, -t2694 * t2957 + t2698 * t2961, 0, 0, 0, 0, 0, 0, -t2720 * t2957 + t2731 * t2961, t3068, t3074, -t2692 * t2957 + t2695 * t2961; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2936, t2937, 0, t2940 * t2961 + t2941 * t2957, 0, 0, 0, 0, 0, 0, t2878 * t2961 + t2904 * t2957, t2876 * t2961 + t2903 * t2957, t2874 * t2961 + t2880 * t2957, t2848 * t2961 + t2865 * t2957, 0, 0, 0, 0, 0, 0, t2817 * t2961 + t2836 * t2957, t2820 * t2961 + t2845 * t2957, t2807 * t2961 + t2831 * t2957, t2756 * t2961 + t2787 * t2957, 0, 0, 0, 0, 0, 0, t2754 * t2961 + t2781 * t2957, t2758 * t2961 + t2784 * t2957, t2739 * t2961 + t2759 * t2957, t2702 * t2961 + t2721 * t2957, 0, 0, 0, 0, 0, 0, t2716 * t2961 + t2729 * t2957, t3073, t3067, t2694 * t2961 + t2698 * t2957, 0, 0, 0, 0, 0, 0, t2720 * t2961 + t2731 * t2957, t3067, -t3073, t2692 * t2961 + t2695 * t2957; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2877, t2875, t2873, t2847, 0, 0, 0, 0, 0, 0, t2816, t2819, t2806, t2755, 0, 0, 0, 0, 0, 0, t2753, t2757, t2738, t2701, 0, 0, 0, 0, 0, 0, t2714, t2717, t3064, t2693, 0, 0, 0, 0, 0, 0, t2718, t3064, -t2717, t2691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2962, -qJDD(1), 0, t2941, 0, 0, 0, 0, 0, 0, t2904, t2903, t2880, t2865, 0, 0, 0, 0, 0, 0, t2836, t2845, t2831, t2787, 0, 0, 0, 0, 0, 0, t2781, t2784, t2759, t2721, 0, 0, 0, 0, 0, 0, t2729, t2730, t3059, t2698, 0, 0, 0, 0, 0, 0, t2731, t3059, -t2730, t2695; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2962, 0, t2940, 0, 0, 0, 0, 0, 0, t2878, t2876, t2874, t2848, 0, 0, 0, 0, 0, 0, t2817, t2820, t2807, t2756, 0, 0, 0, 0, 0, 0, t2754, t2758, t2739, t2702, 0, 0, 0, 0, 0, 0, t2716, t2719, t3063, t2694, 0, 0, 0, 0, 0, 0, t2720, t3063, -t2719, t2692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2877, t2875, t2873, t2847, 0, 0, 0, 0, 0, 0, t2816, t2819, t2806, t2755, 0, 0, 0, 0, 0, 0, t2753, t2757, t2738, t2701, 0, 0, 0, 0, 0, 0, t2714, t2717, t3064, t2693, 0, 0, 0, 0, 0, 0, t2718, t3064, -t2717, t2691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2930, t2928, t2911, t2896, 0, 0, 0, 0, 0, 0, t2856, t2869, t2852, t2795, 0, 0, 0, 0, 0, 0, t2789, t2801, t2776, t2725, 0, 0, 0, 0, 0, 0, t2744, t2747, t3055, t2700, 0, 0, 0, 0, 0, 0, t2748, t3055, -t2747, t2697; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2927, t2921, t2910, t2895, 0, 0, 0, 0, 0, 0, -t2888, -t2890, -t2886, -t2872, 0, 0, 0, 0, 0, 0, -t2839, t3010, -t2846, -t2830, 0, 0, 0, 0, 0, 0, -t3044, t2790, -t3037, -t2722, 0, 0, 0, 0, 0, 0, -t3044, -t3037, -t2790, -t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2912, t2909, t2931, t2916, 0, 0, 0, 0, 0, 0, t2855, t2868, t2851, t2794, 0, 0, 0, 0, 0, 0, t2788, t2800, t2775, t2724, 0, 0, 0, 0, 0, 0, t2742, -t2741, t3056, t2699, 0, 0, 0, 0, 0, 0, t2746, t3056, t2741, t2696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2898, t2891, t2889, t2827, 0, 0, 0, 0, 0, 0, t2825, t2835, t2803, t2752, 0, 0, 0, 0, 0, 0, t2770, -t2769, t3050, t2710, 0, 0, 0, 0, 0, 0, t2774, t3050, t2769, t2704; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2892, t2913, t2887, t2826, 0, 0, 0, 0, 0, 0, t2824, t2834, t2802, t2751, 0, 0, 0, 0, 0, 0, t2768, -t2767, t3049, t2709, 0, 0, 0, 0, 0, 0, t2772, t3049, t2767, t2703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2888, t2890, t2886, t2872, 0, 0, 0, 0, 0, 0, t2839, -t3010, t2846, t2830, 0, 0, 0, 0, 0, 0, t3044, -t2790, t3037, t2722, 0, 0, 0, 0, 0, 0, t3044, t3037, t2790, t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2864, t2858, t2840, t2783, 0, 0, 0, 0, 0, 0, t3043, -t2792, t3036, t2723, 0, 0, 0, 0, 0, 0, t3043, t3036, t2792, t2712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2859, t2879, t2842, t2782, 0, 0, 0, 0, 0, 0, -t2808, -t2967, t2833, -t2765, 0, 0, 0, 0, 0, 0, -t2809, t2833, t2967, -t2740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2839, -t3010, t2846, t2830, 0, 0, 0, 0, 0, 0, t3044, -t2790, t3037, t2722, 0, 0, 0, 0, 0, 0, t3044, t3037, t2790, t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3038, -t2821, t2974, t2750, 0, 0, 0, 0, 0, 0, t3038, t2974, t2821, t2732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2822, t3039, -t2812, t2749, 0, 0, 0, 0, 0, 0, t2822, -t2812, -t3039, -t2733; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2808, t2967, -t2833, t2765, 0, 0, 0, 0, 0, 0, t2809, -t2833, -t2967, t2740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3038, t2974, t2821, t2732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2809, -t2833, -t2967, t2740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2822, t2812, t3039, t2733;];
f_new_reg  = t1;
