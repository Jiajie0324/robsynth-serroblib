% Calculate vector of inverse dynamics joint torques for
% S6RRPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP10_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRP10_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP10_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP10_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP10_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP10_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP10_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRPRRP10_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:43:02
% EndTime: 2019-03-09 12:43:31
% DurationCPUTime: 21.26s
% Computational Cost: add. (17540->797), mult. (43125->1022), div. (0->0), fcn. (35379->14), ass. (0->323)
t781 = sin(pkin(6));
t790 = cos(qJ(2));
t892 = qJD(1) * qJD(2);
t872 = t790 * t892;
t787 = sin(qJ(2));
t890 = qJDD(1) * t787;
t821 = t872 + t890;
t977 = t821 * t781;
t780 = sin(pkin(11));
t782 = cos(pkin(11));
t786 = sin(qJ(4));
t960 = cos(qJ(4));
t824 = -t786 * t780 + t782 * t960;
t929 = t781 * t790;
t801 = t824 * t929;
t679 = qJD(1) * t801;
t717 = t824 * qJD(4);
t968 = t717 - t679;
t725 = t780 * t960 + t786 * t782;
t802 = t725 * t929;
t911 = -qJD(1) * t802 + t725 * qJD(4);
t873 = t787 * t892;
t854 = t781 * t873;
t889 = qJDD(1) * t790;
t759 = t781 * t889;
t888 = qJDD(4) - t759;
t810 = t854 + t888;
t783 = cos(pkin(6));
t891 = qJDD(1) * t783;
t761 = qJDD(2) + t891;
t905 = qJD(1) * t783;
t762 = qJD(2) + t905;
t885 = pkin(1) * qJD(2) * t783;
t860 = qJD(1) * t885;
t884 = pkin(1) * t891;
t881 = -pkin(8) * t759 - t787 * t884 - t790 * t860;
t803 = -pkin(8) * t854 - t881;
t615 = qJ(3) * t761 + qJD(3) * t762 + t803;
t842 = pkin(2) * t787 - qJ(3) * t790;
t799 = qJD(2) * t842 - qJD(3) * t787;
t834 = -pkin(2) * t790 - qJ(3) * t787 - pkin(1);
t625 = (qJD(1) * t799 + qJDD(1) * t834) * t781;
t566 = -t615 * t780 + t782 * t625;
t936 = t761 * t780;
t658 = t782 * t977 + t936;
t820 = t873 - t889;
t540 = pkin(3) * t781 * t820 - pkin(9) * t658 + t566;
t567 = t782 * t615 + t780 * t625;
t910 = t977 * t780;
t845 = t761 * t782 - t910;
t548 = pkin(9) * t845 + t567;
t904 = qJD(1) * t790;
t760 = t781 * t904;
t886 = pkin(1) * t905;
t712 = pkin(8) * t760 + t787 * t886;
t680 = qJ(3) * t762 + t712;
t702 = t834 * t781;
t684 = qJD(1) * t702;
t608 = -t680 * t780 + t782 * t684;
t906 = qJD(1) * t781;
t877 = t787 * t906;
t694 = t762 * t780 + t782 * t877;
t573 = -pkin(3) * t760 - pkin(9) * t694 + t608;
t609 = t782 * t680 + t780 * t684;
t693 = t762 * t782 - t780 * t877;
t582 = pkin(9) * t693 + t609;
t874 = qJD(4) * t960;
t900 = qJD(4) * t786;
t819 = -t786 * t540 - t960 * t548 - t573 * t874 + t582 * t900;
t503 = pkin(10) * t810 - t819;
t867 = t786 * t658 - t960 * t845;
t827 = t786 * t693 + t694 * t960;
t966 = qJD(4) * t827;
t562 = t867 + t966;
t857 = pkin(8) * t977 + t787 * t860 - t790 * t884;
t951 = t761 * pkin(2);
t965 = qJDD(3) - t951;
t636 = t857 + t965;
t581 = -pkin(3) * t845 + t636;
t797 = t658 * t960 + t786 * t845;
t828 = t960 * t693 - t786 * t694;
t985 = qJD(4) * t828;
t792 = t797 + t985;
t513 = t562 * pkin(4) - pkin(10) * t792 + t581;
t535 = t786 * t573 + t960 * t582;
t894 = t760 - qJD(4);
t532 = -pkin(10) * t894 + t535;
t711 = -pkin(8) * t877 + t790 * t886;
t673 = -pkin(2) * t762 + qJD(3) - t711;
t629 = -pkin(3) * t693 + t673;
t546 = -pkin(4) * t828 - pkin(10) * t827 + t629;
t785 = sin(qJ(5));
t789 = cos(qJ(5));
t898 = qJD(5) * t789;
t899 = qJD(5) * t785;
t859 = t785 * t503 - t789 * t513 + t532 * t898 + t546 * t899;
t561 = qJDD(5) + t562;
t958 = pkin(5) * t561;
t494 = qJDD(6) + t859 - t958;
t508 = t532 * t789 + t546 * t785;
t976 = qJD(5) - t828;
t506 = qJ(6) * t976 + t508;
t946 = t506 * t976;
t989 = -t494 + t946;
t710 = t842 * t906;
t641 = t782 * t710 - t711 * t780;
t811 = (-pkin(9) * t782 * t790 + pkin(3) * t787) * t781;
t605 = qJD(1) * t811 + t641;
t642 = t780 * t710 + t782 * t711;
t856 = t780 * t760;
t624 = -pkin(9) * t856 + t642;
t950 = pkin(9) + qJ(3);
t740 = t950 * t780;
t741 = t950 * t782;
t825 = -t740 * t960 - t786 * t741;
t988 = qJD(3) * t824 + qJD(4) * t825 - t786 * t605 - t960 * t624;
t865 = t976 ^ 2;
t600 = -t785 * t894 + t789 * t827;
t864 = t976 * t785;
t987 = t600 * t864;
t986 = pkin(10) * t877 - t988;
t671 = pkin(3) * t856 + t712;
t980 = -pkin(4) * t911 + pkin(10) * t968 + t671;
t495 = t789 * t503 + t785 * t513 - t532 * t899 + t546 * t898;
t947 = qJ(6) * t561;
t493 = qJD(6) * t976 + t495 + t947;
t507 = -t532 * t785 + t546 * t789;
t895 = qJD(6) - t507;
t505 = -pkin(5) * t976 + t895;
t984 = t976 * t505 + t493;
t598 = t785 * t827 + t789 * t894;
t983 = t598 * t828;
t982 = t828 * t760;
t677 = -t786 * t740 + t741 * t960;
t979 = qJD(3) * t725 + qJD(4) * t677 + t605 * t960 - t786 * t624;
t978 = -qJD(5) * t894 + t792;
t558 = t785 * t561;
t941 = t976 * t789;
t975 = -t828 * t941 + t898 * t976 + t558;
t961 = cos(qJ(1));
t879 = t961 * t787;
t788 = sin(qJ(1));
t926 = t788 * t790;
t720 = t783 * t879 + t926;
t777 = pkin(11) + qJ(4);
t773 = sin(t777);
t774 = cos(t777);
t880 = t781 * t961;
t662 = t720 * t774 - t773 * t880;
t878 = t961 * t790;
t927 = t787 * t788;
t719 = -t783 * t878 + t927;
t618 = t662 * t785 - t719 * t789;
t619 = t662 * t789 + t719 * t785;
t974 = pkin(3) * t780;
t973 = t598 * t827;
t942 = t600 * t827;
t972 = t760 * t827;
t721 = t783 * t926 + t879;
t849 = g(1) * t721 + g(2) * t719;
t806 = -g(3) * t929 + t849;
t971 = t806 * t773;
t959 = pkin(1) * t787;
t908 = pkin(8) * t929 + t783 * t959;
t701 = qJ(3) * t783 + t908;
t637 = -t701 * t780 + t782 * t702;
t931 = t781 * t787;
t716 = t780 * t783 + t782 * t931;
t589 = -pkin(3) * t929 - pkin(9) * t716 + t637;
t638 = t782 * t701 + t780 * t702;
t715 = t780 * t931 - t783 * t782;
t604 = -pkin(9) * t715 + t638;
t916 = t786 * t589 + t960 * t604;
t550 = -pkin(10) * t929 + t916;
t650 = -t786 * t715 + t716 * t960;
t763 = pkin(8) * t931;
t704 = t763 + (-pkin(1) * t790 - pkin(2)) * t783;
t655 = pkin(3) * t715 + t704;
t826 = -t715 * t960 - t786 * t716;
t565 = -pkin(4) * t826 - pkin(10) * t650 + t655;
t970 = t789 * t550 + t785 * t565;
t914 = pkin(4) * t877 + t979;
t772 = pkin(3) * t782 + pkin(2);
t657 = -pkin(4) * t824 - pkin(10) * t725 - t772;
t913 = t785 * t657 + t789 * t677;
t967 = -t657 * t898 + t677 * t899 + t785 * t980 + t789 * t986;
t722 = -t783 * t927 + t878;
t930 = t781 * t788;
t665 = t722 * t773 - t774 * t930;
t866 = -t720 * t773 - t774 * t880;
t813 = -g(3) * (-t773 * t931 + t774 * t783) - g(2) * t866 + g(1) * t665;
t534 = t573 * t960 - t786 * t582;
t531 = pkin(4) * t894 - t534;
t515 = t598 * pkin(5) - t600 * qJ(6) + t531;
t957 = pkin(10) * t561;
t964 = t515 * t976 - t957;
t682 = t799 * t781;
t902 = qJD(2) * t787;
t876 = t781 * t902;
t835 = -pkin(8) * t876 + t790 * t885;
t690 = qJD(3) * t783 + t835;
t616 = t782 * t682 - t690 * t780;
t586 = qJD(2) * t811 + t616;
t617 = t780 * t682 + t782 * t690;
t901 = qJD(2) * t790;
t875 = t781 * t901;
t855 = t780 * t875;
t602 = -pkin(9) * t855 + t617;
t818 = t786 * t586 + t589 * t874 + t960 * t602 - t604 * t900;
t519 = pkin(10) * t876 + t818;
t594 = qJD(2) * t801 + qJD(4) * t826;
t595 = qJD(2) * t802 + qJD(4) * t650;
t713 = pkin(8) * t875 + t787 * t885;
t672 = pkin(3) * t855 + t713;
t541 = pkin(4) * t595 - pkin(10) * t594 + t672;
t963 = -qJD(5) * t970 - t519 * t785 + t541 * t789;
t962 = t600 ^ 2;
t949 = pkin(10) * qJD(5);
t948 = MDP(6) * t781;
t945 = t508 * t976;
t526 = -t785 * t810 - t789 * t978 + t827 * t899;
t944 = t526 * t785;
t943 = t600 * t598;
t938 = t725 * t785;
t937 = t725 * t789;
t935 = t761 * t783;
t934 = t774 * t785;
t933 = t774 * t789;
t776 = t781 ^ 2;
t932 = t776 * qJD(1) ^ 2;
t559 = t789 * t561;
t925 = t789 * t790;
t527 = t785 * t978 - t789 * t810 + t827 * t898;
t924 = -t785 * t527 - t598 * t898;
t923 = qJ(6) * t911 - qJD(6) * t824 - t967;
t569 = pkin(4) * t827 - pkin(10) * t828;
t922 = t789 * t534 + t785 * t569;
t921 = -pkin(5) * t911 + qJD(5) * t913 - t785 * t986 + t980 * t789;
t647 = t679 * t785 - t789 * t877;
t648 = t679 * t789 + t785 * t877;
t840 = pkin(5) * t785 - qJ(6) * t789;
t841 = pkin(5) * t789 + qJ(6) * t785;
t919 = -t647 * pkin(5) + t648 * qJ(6) + t840 * t717 + (qJD(5) * t841 - qJD(6) * t789) * t725 + t914;
t912 = -qJD(6) * t785 + t840 * t976 - t535;
t909 = t961 * pkin(1) + pkin(8) * t930;
t778 = t787 ^ 2;
t907 = -t790 ^ 2 + t778;
t903 = qJD(2) * t782;
t897 = qJD(2) - t762;
t893 = qJ(3) * qJDD(1);
t887 = 0.2e1 * t776;
t883 = t790 * t932;
t882 = t781 * t925;
t747 = t785 * t929;
t870 = -t788 * pkin(1) + pkin(8) * t880;
t869 = -t717 * t785 + t647;
t868 = t717 * t789 - t648;
t863 = t762 + t905;
t861 = t761 + t891;
t858 = -t960 * t540 + t786 * t548 + t573 * t900 + t582 * t874;
t666 = t722 * t774 + t773 * t930;
t622 = t666 * t785 - t721 * t789;
t852 = -g(1) * t618 + g(2) * t622;
t623 = t666 * t789 + t721 * t785;
t851 = g(1) * t619 - g(2) * t623;
t850 = g(1) * t866 + g(2) * t665;
t848 = -g(1) * t719 + g(2) * t721;
t847 = g(1) * t722 + g(2) * t720;
t846 = g(1) * t720 - g(2) * t722;
t844 = t589 * t960 - t786 * t604;
t837 = -t550 * t785 + t565 * t789;
t836 = t657 * t789 - t677 * t785;
t833 = pkin(4) + t841;
t832 = pkin(4) * t774 + pkin(10) * t773 + t772;
t831 = -t636 + t849;
t829 = g(1) * t961 + g(2) * t788;
t549 = pkin(4) * t929 - t844;
t626 = t650 * t785 + t882;
t823 = t531 * t976 - t957;
t822 = t586 * t960 - t589 * t900 - t786 * t602 - t604 * t874;
t817 = t789 * t519 + t785 * t541 - t550 * t899 + t565 * t898;
t643 = -t719 * t934 - t720 * t789;
t645 = -t721 * t934 - t722 * t789;
t688 = t747 * t774 - t789 * t931;
t815 = g(1) * t645 + g(2) * t643 + g(3) * t688;
t644 = -t719 * t933 + t720 * t785;
t646 = -t721 * t933 + t722 * t785;
t689 = (t774 * t925 + t785 * t787) * t781;
t814 = -g(1) * t646 - g(2) * t644 - g(3) * t689;
t700 = t773 * t783 + t774 * t931;
t812 = -g(1) * t666 - g(2) * t662 - g(3) * t700;
t809 = t725 * t898 - t869;
t808 = t725 * t899 - t868;
t805 = -g(3) * t931 - t847;
t804 = -qJ(3) * t902 + (qJD(3) - t673) * t790;
t800 = t806 - t857;
t798 = -t949 * t976 + t813;
t659 = t700 * t785 + t882;
t796 = g(1) * t622 + g(2) * t618 + g(3) * t659 - t859;
t520 = -pkin(4) * t876 - t822;
t504 = -pkin(4) * t810 + t858;
t497 = t527 * pkin(5) + t526 * qJ(6) - t600 * qJD(6) + t504;
t795 = -t497 + t798;
t660 = t700 * t789 - t747;
t794 = -g(1) * t623 - g(2) * t619 - g(3) * t660 + t495;
t793 = t515 * t600 + qJDD(6) - t796;
t627 = t650 * t789 - t747;
t606 = t725 * t840 - t825;
t580 = pkin(5) * t824 - t836;
t579 = -qJ(6) * t824 + t913;
t554 = -qJD(5) * t747 + t594 * t785 + t650 * t898 - t789 * t876;
t553 = qJD(5) * t626 - t789 * t594 - t785 * t876;
t552 = pkin(5) * t600 + qJ(6) * t598;
t522 = t626 * pkin(5) - t627 * qJ(6) + t549;
t517 = pkin(5) * t826 - t837;
t516 = -qJ(6) * t826 + t970;
t514 = -pkin(5) * t827 + t534 * t785 - t569 * t789;
t512 = qJ(6) * t827 + t922;
t511 = t598 * t976 - t526;
t500 = t554 * pkin(5) + t553 * qJ(6) - t627 * qJD(6) + t520;
t499 = -pkin(5) * t595 - t963;
t498 = qJ(6) * t595 - qJD(6) * t826 + t817;
t1 = [(t594 * t827 + t650 * t792) * MDP(15) + (-t535 * t876 + t581 * t650 + t629 * t594 + t655 * t792 + t672 * t827 - t810 * t916 + t818 * t894 - t819 * t929 + t850) * MDP(21) + (t595 * t894 + t826 * t888) * MDP(18) + ((qJDD(1) * t778 + 0.2e1 * t787 * t872) * MDP(4) + 0.2e1 * (t787 * t889 - t892 * t907) * MDP(5)) * t776 + (t493 * t516 + t506 * t498 + t497 * t522 + t515 * t500 + t494 * t517 + t505 * t499 - g(1) * (-pkin(4) * t662 - pkin(5) * t619 + pkin(10) * t866 - qJ(6) * t618 - t719 * t950 - t720 * t772 + t880 * t974 + t870) - g(2) * (pkin(4) * t666 + pkin(5) * t623 + pkin(10) * t665 + qJ(6) * t622 + t721 * t950 + t722 * t772 + t930 * t974 + t909)) * MDP(32) + (-t713 * t762 - t763 * t761 - t857 * t783 + (t790 * t935 - t820 * t887) * pkin(1) + t846) * MDP(9) + (t567 * t638 + t609 * t617 + t566 * t637 + t608 * t616 + t636 * t704 + t673 * t713 - g(1) * (-pkin(2) * t720 - qJ(3) * t719 + t870) - g(2) * (pkin(2) * t722 + qJ(3) * t721 + t909)) * MDP(14) + (-pkin(1) * t821 * t887 - t761 * t908 - t762 * t835 - t783 * t803 + t848) * MDP(10) + (t504 * t626 + t507 * t595 + t520 * t598 + t549 * t527 + t531 * t554 + t837 * t561 + t826 * t859 + t963 * t976 + t851) * MDP(27) + (t527 * t826 - t554 * t976 - t561 * t626 - t595 * t598) * MDP(25) + (t526 * t826 - t553 * t976 + t561 * t627 + t595 * t600) * MDP(24) + (-t561 * t826 + t595 * t976) * MDP(26) + (t494 * t826 + t497 * t626 - t499 * t976 + t500 * t598 - t505 * t595 + t515 * t554 - t517 * t561 + t522 * t527 + t851) * MDP(29) + (-t493 * t826 - t497 * t627 + t498 * t976 - t500 * t600 + t506 * t595 + t515 * t553 + t516 * t561 + t522 * t526 - t852) * MDP(31) + (t495 * t826 + t504 * t627 - t508 * t595 + t520 * t600 - t549 * t526 - t531 * t553 - t561 * t970 - t817 * t976 + t852) * MDP(28) + (-t650 * t562 + t594 * t828 - t595 * t827 + t792 * t826) * MDP(16) + ((-t829 * t780 + (qJD(1) * t637 + t608) * t902 + (qJD(2) * t673 * t780 - qJD(1) * t616 - qJDD(1) * t637 - t566) * t790) * MDP(11) + (-t829 * t782 + (-qJD(1) * t638 - t609) * t902 + (qJD(1) * t617 + qJDD(1) * t638 + t673 * t903 + t567) * t790) * MDP(12) + (-t792 * t790 + (qJD(1) * t650 + t827) * t902) * MDP(17) + (t562 * t790 + (qJD(1) * t826 + t828) * t902) * MDP(18) + (-t888 * t790 + (-0.2e1 * t760 + qJD(4)) * t902) * MDP(19) + (t790 * t861 - t863 * t902) * MDP(7)) * t781 + (g(1) * t662 - g(2) * t666 + t534 * t876 + t655 * t562 - t581 * t826 + t629 * t595 - t672 * t828 + t810 * t844 - t822 * t894 + t858 * t929) * MDP(20) + (t617 * t693 + t638 * t845 - t567 * t715 - t616 * t694 - t637 * t658 - t566 * t716 + (-t608 * t782 - t609 * t780) * t875 - t848) * MDP(13) + (t787 * t861 + t863 * t901) * t948 + MDP(8) * t935 + (t526 * t626 - t527 * t627 + t553 * t598 - t554 * t600) * MDP(23) + (-t526 * t627 - t553 * t600) * MDP(22) + (-t493 * t626 + t494 * t627 - t498 * t598 + t499 * t600 - t505 * t553 - t506 * t554 - t516 * t527 - t517 * t526 - t850) * MDP(30) + t829 * MDP(3) + (-t713 * t693 + t704 * t910 + t636 * t715 + (-t704 * t761 + t846) * t782) * MDP(11) + (t636 * t716 + t704 * t658 + t713 * t694 - t846 * t780) * MDP(12) + (-t594 * t894 + t650 * t888) * MDP(17) + qJDD(1) * MDP(1) + (g(1) * t788 - g(2) * t961) * MDP(2); (t836 * t561 + t859 * t824 - t825 * t527 + t504 * t938 + ((-qJD(5) * t677 - t980) * t789 + (-qJD(5) * t657 + t986) * t785) * t976 + t914 * t598 + t911 * t507 + t809 * t531 + t814) * MDP(27) + (t535 * t877 + t581 * t725 + t968 * t629 - t671 * t827 - t677 * t810 - t772 * t792 + t894 * t988 - t971) * MDP(21) + (t493 * t579 + t497 * t606 + t494 * t580 - g(1) * (pkin(5) * t646 + qJ(6) * t645 + t722 * t950) - g(2) * (pkin(5) * t644 + qJ(6) * t643 + t720 * t950) + t919 * t515 + t923 * t506 + t921 * t505 + t849 * t832 + (-pkin(5) * t689 - qJ(6) * t688 - (t787 * t950 + t790 * t832) * t781) * g(3)) * MDP(32) + (-t526 * t580 - t527 * t579 + t921 * t600 - t923 * t598 + t869 * t506 + t868 * t505 + t971 + (-t493 * t785 + t494 * t789 + (-t505 * t785 - t506 * t789) * qJD(5)) * t725) * MDP(30) + (t869 * t600 - t868 * t598 + (t944 - t527 * t789 + (t598 * t785 - t600 * t789) * qJD(5)) * t725) * MDP(23) + (-t526 * t937 - t600 * t808) * MDP(22) + (pkin(1) * t883 + t711 * t762 + (pkin(8) * t892 + g(3)) * t931 + t847 + t881) * MDP(10) + (-t877 * t897 + t759) * MDP(7) + (t810 * t824 - t828 * t877 + t894 * t911) * MDP(18) + (-t725 * t562 + t792 * t824 - t827 * t911 + t828 * t968) * MDP(16) + (-t534 * t877 - t772 * t562 - t581 * t824 + t629 * t911 + t671 * t828 + t774 * t806 + t825 * t810 + t894 * t979) * MDP(20) + (-pkin(2) * t658 - t694 * t712 - t831 * t780 + ((g(3) * t780 + t782 * t893) * t790 + (t609 * t787 - t642 * t790 + t782 * t804) * qJD(1)) * t781) * MDP(12) + (t495 * t824 + t504 * t937 - t911 * t508 + t526 * t825 - t808 * t531 - t913 * t561 + t914 * t600 + t967 * t976 + t815) * MDP(28) + (-t493 * t824 - t497 * t937 + t506 * t911 + t515 * t808 + t526 * t606 + t561 * t579 - t600 * t919 + t923 * t976 - t815) * MDP(31) + (t494 * t824 + t497 * t938 - t505 * t911 + t515 * t809 + t527 * t606 - t561 * t580 + t598 * t919 - t921 * t976 + t814) * MDP(29) + (t527 * t824 - t558 * t725 - t598 * t911 - t809 * t976) * MDP(25) + (t526 * t824 + t559 * t725 + t600 * t911 - t808 * t976) * MDP(24) + (-t561 * t824 + t911 * t976) * MDP(26) + (t641 * t694 - t642 * t693 + (qJ(3) * t845 + qJD(3) * t693 + t608 * t760 + t567) * t782 + (qJ(3) * t658 + qJD(3) * t694 + t609 * t760 - t566) * t780 + t805) * MDP(13) + (t792 * t725 + t827 * t968) * MDP(15) + (t725 * t810 - t827 * t877 - t894 * t968) * MDP(17) + t761 * MDP(8) + (t897 * t904 + t890) * t948 - t787 * MDP(4) * t883 + t894 * MDP(19) * t877 + (-t608 * t641 - t609 * t642 - t673 * t712 + (-t608 * t780 + t609 * t782) * qJD(3) + (-t636 + t806) * pkin(2) + (-t566 * t780 + t567 * t782 + t805) * qJ(3)) * MDP(14) + t907 * MDP(5) * t932 + (-pkin(2) * t910 + t712 * t693 + (t831 + t951) * t782 + ((-g(3) * t782 + t780 * t893) * t790 + (-t608 * t787 + t641 * t790 + t780 * t804) * qJD(1)) * t781) * MDP(11) + (t712 * t762 + t932 * t959 + t800) * MDP(9); (-t694 * t760 - t845) * MDP(11) + (t936 + (t782 * t890 + (-t693 + t903) * t904) * t781) * MDP(12) + (-t693 ^ 2 - t694 ^ 2) * MDP(13) + (t608 * t694 - t609 * t693 - t800 + t965) * MDP(14) + (t867 + 0.2e1 * t966 - t972) * MDP(20) + (t797 - t982 + 0.2e1 * t985) * MDP(21) + (-t789 * t865 - t558 - t942) * MDP(28) + ((t526 + t983) * t789 + t987 + t924) * MDP(30) + (t942 + t975) * MDP(31) + (-t515 * t827 + t984 * t785 + t789 * t989 - t806) * MDP(32) + (MDP(27) + MDP(29)) * (-t785 * t865 + t559 - t973); -t828 ^ 2 * MDP(16) + (t982 + t797) * MDP(17) + (-t867 - t972) * MDP(18) + t810 * MDP(19) + (-t535 * t894 + t813 - t858) * MDP(20) + (-t534 * t894 - t629 * t828 - t812 + t819) * MDP(21) + (t600 * t941 - t944) * MDP(22) + ((-t526 + t983) * t789 - t987 + t924) * MDP(23) + (-t942 + t975) * MDP(24) + (-t864 * t976 + t559 + t973) * MDP(25) + (-pkin(4) * t527 - t535 * t598 + (t534 * t976 + t823) * t785 + (-t504 + (-t569 - t949) * t976 + t813) * t789) * MDP(27) + (pkin(4) * t526 + t922 * t976 - t535 * t600 + t823 * t789 + (t504 - t798) * t785) * MDP(28) + (t514 * t976 - t527 * t833 + t912 * t598 + t785 * t964 + t795 * t789) * MDP(29) + (t512 * t598 - t514 * t600 + ((qJD(5) * t600 - t527) * pkin(10) + t984) * t789 + ((qJD(5) * t598 - t526) * pkin(10) - t989) * t785 + t812) * MDP(30) + (-t512 * t976 - t526 * t833 - t912 * t600 + t795 * t785 - t789 * t964) * MDP(31) + (-t505 * t514 - t506 * t512 + t912 * t515 + (t493 * t789 + t494 * t785 + (t505 * t789 - t506 * t785) * qJD(5) + t812) * pkin(10) + (-t497 + t813) * t833) * MDP(32) + (-MDP(15) * t828 + MDP(16) * t827 - MDP(20) * t629 - MDP(26) * t976 - MDP(27) * t507 + MDP(28) * t508 + MDP(29) * t505 - MDP(31) * t506) * t827; MDP(22) * t943 + (-t598 ^ 2 + t962) * MDP(23) + t511 * MDP(24) + (t600 * t976 - t527) * MDP(25) + t561 * MDP(26) + (-t531 * t600 + t796 + t945) * MDP(27) + (t507 * t976 + t531 * t598 - t794) * MDP(28) + (-t552 * t598 - t793 + t945 + 0.2e1 * t958) * MDP(29) + (pkin(5) * t526 - qJ(6) * t527 + (t506 - t508) * t600 + (t505 - t895) * t598) * MDP(30) + (0.2e1 * t947 - t515 * t598 + t552 * t600 + (0.2e1 * qJD(6) - t507) * t976 + t794) * MDP(31) + (t493 * qJ(6) - t494 * pkin(5) - t515 * t552 - t505 * t508 - g(1) * (-pkin(5) * t622 + qJ(6) * t623) - g(2) * (-pkin(5) * t618 + qJ(6) * t619) - g(3) * (-pkin(5) * t659 + qJ(6) * t660) + t895 * t506) * MDP(32); (t943 - t561) * MDP(29) + t511 * MDP(30) + (-t962 - t865) * MDP(31) + (t793 - t946 - t958) * MDP(32);];
tau  = t1;
