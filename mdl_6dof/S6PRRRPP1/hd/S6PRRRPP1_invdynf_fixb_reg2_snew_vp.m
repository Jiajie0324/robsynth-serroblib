% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 06:40
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRPP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP1_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPP1_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRPP1_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:40:37
% EndTime: 2019-05-05 06:40:48
% DurationCPUTime: 12.33s
% Computational Cost: add. (36346->302), mult. (73161->408), div. (0->0), fcn. (53675->12), ass. (0->229)
t2649 = sin(qJ(3));
t2702 = qJD(2) * t2649;
t2634 = qJD(3) * t2702;
t2652 = cos(qJ(3));
t2689 = t2652 * qJDD(2);
t2684 = t2634 - t2689;
t2682 = -qJDD(4) - t2684;
t2648 = sin(qJ(4));
t2651 = cos(qJ(4));
t2610 = -t2651 * qJD(3) + t2648 * t2702;
t2611 = qJD(3) * t2648 + t2651 * t2702;
t2640 = sin(pkin(11));
t2643 = cos(pkin(11));
t2586 = t2610 * t2643 + t2640 * t2611;
t2588 = -t2610 * t2640 + t2611 * t2643;
t2698 = t2586 * t2588;
t2538 = t2682 - t2698;
t2583 = t2588 ^ 2;
t2701 = qJD(2) * t2652;
t2631 = -qJD(4) + t2701;
t2706 = t2631 ^ 2;
t2713 = -t2583 - t2706;
t2509 = t2538 * t2640 + t2643 * t2713;
t2512 = t2538 * t2643 - t2640 * t2713;
t2478 = t2509 * t2648 - t2512 * t2651;
t2688 = qJD(3) * t2701;
t2690 = t2649 * qJDD(2);
t2614 = t2688 + t2690;
t2662 = -t2648 * qJDD(3) - t2651 * t2614;
t2581 = -qJD(4) * t2610 - t2662;
t2663 = t2651 * qJDD(3) - t2648 * t2614;
t2658 = -qJD(4) * t2611 + t2663;
t2657 = t2643 * t2581 + t2640 * t2658;
t2697 = t2586 * t2631;
t2656 = t2657 + t2697;
t2460 = t2478 * t2649 + t2652 * t2656;
t2642 = sin(pkin(6));
t2645 = cos(pkin(6));
t2462 = t2478 * t2652 - t2649 * t2656;
t2483 = t2509 * t2651 + t2512 * t2648;
t2650 = sin(qJ(2));
t2653 = cos(qJ(2));
t2676 = t2462 * t2650 + t2483 * t2653;
t2428 = -t2642 * t2460 + t2645 * t2676;
t2439 = t2462 * t2653 - t2483 * t2650;
t2641 = sin(pkin(10));
t2644 = cos(pkin(10));
t2760 = t2428 * t2641 - t2439 * t2644;
t2759 = t2428 * t2644 + t2439 * t2641;
t2426 = t2645 * t2460 + t2642 * t2676;
t2539 = t2682 + t2698;
t2554 = t2586 ^ 2;
t2712 = -t2706 - t2554;
t2720 = t2539 * t2640 + t2643 * t2712;
t2721 = -t2643 * t2539 + t2640 * t2712;
t2723 = t2648 * t2720 + t2651 * t2721;
t2685 = -t2581 * t2640 + t2643 * t2658;
t2696 = t2588 * t2631;
t2660 = -t2685 - t2696;
t2724 = -t2648 * t2721 + t2651 * t2720;
t2730 = t2649 * t2660 + t2652 * t2724;
t2737 = t2650 * t2723 + t2653 * t2730;
t2732 = t2649 * t2724 - t2652 * t2660;
t2738 = t2650 * t2730 - t2653 * t2723;
t2745 = -t2642 * t2732 + t2645 * t2738;
t2754 = -t2641 * t2745 + t2644 * t2737;
t2753 = t2641 * t2737 + t2644 * t2745;
t2522 = t2657 - t2697;
t2661 = t2685 - t2696;
t2710 = t2522 * t2640 + t2643 * t2661;
t2711 = -t2643 * t2522 + t2640 * t2661;
t2718 = t2648 * t2710 + t2651 * t2711;
t2528 = t2583 + t2554;
t2719 = -t2648 * t2711 + t2651 * t2710;
t2725 = -t2528 * t2649 + t2652 * t2719;
t2729 = t2650 * t2718 + t2653 * t2725;
t2726 = t2528 * t2652 + t2649 * t2719;
t2731 = t2650 * t2725 - t2653 * t2718;
t2739 = -t2642 * t2726 + t2645 * t2731;
t2748 = -t2641 * t2739 + t2644 * t2729;
t2747 = t2642 * t2738 + t2645 * t2732;
t2746 = t2641 * t2729 + t2644 * t2739;
t2740 = t2642 * t2731 + t2645 * t2726;
t2703 = -g(3) + qJDD(1);
t2687 = t2642 * t2703;
t2620 = g(1) * t2641 - g(2) * t2644;
t2693 = t2620 * t2645;
t2722 = t2687 + t2693;
t2709 = qJD(3) ^ 2;
t2708 = t2610 ^ 2;
t2707 = t2611 ^ 2;
t2705 = -2 * qJD(5);
t2704 = -2 * qJD(6);
t2695 = t2610 * t2611;
t2694 = t2610 * t2631;
t2692 = qJD(4) + t2631;
t2621 = -g(1) * t2644 - g(2) * t2641;
t2575 = t2653 * t2621 + t2650 * t2722;
t2654 = qJD(2) ^ 2;
t2563 = -pkin(2) * t2654 + qJDD(2) * pkin(8) + t2575;
t2659 = -t2642 * t2620 + t2645 * t2703;
t2552 = t2652 * t2563 + t2649 * t2659;
t2612 = (-pkin(3) * t2652 - pkin(9) * t2649) * qJD(2);
t2531 = -pkin(3) * t2709 + qJDD(3) * pkin(9) + t2612 * t2701 + t2552;
t2683 = t2650 * t2621 - t2653 * t2722;
t2562 = -qJDD(2) * pkin(2) - t2654 * pkin(8) + t2683;
t2533 = (-t2614 - t2688) * pkin(9) + (t2684 + t2634) * pkin(3) + t2562;
t2497 = t2651 * t2531 + t2648 * t2533;
t2636 = t2649 ^ 2;
t2637 = t2652 ^ 2;
t2691 = t2636 + t2637;
t2597 = -pkin(4) * t2631 - qJ(5) * t2611;
t2488 = -pkin(4) * t2708 + qJ(5) * t2658 + t2631 * t2597 + t2497;
t2496 = -t2648 * t2531 + t2651 * t2533;
t2573 = -t2682 - t2695;
t2655 = (-t2581 + t2694) * qJ(5) + t2573 * pkin(4) + t2496;
t2450 = t2643 * t2488 + t2586 * t2705 + t2640 * t2655;
t2686 = t2640 * t2488 - t2643 * t2655;
t2553 = pkin(5) * t2586 - qJ(6) * t2588;
t2441 = -pkin(5) * t2706 - qJ(6) * t2682 - t2586 * t2553 + t2631 * t2704 + t2450;
t2442 = qJDD(6) + t2682 * pkin(5) - t2706 * qJ(6) + ((2 * qJD(5)) + t2553) * t2588 + t2686;
t2422 = t2441 * t2640 - t2442 * t2643;
t2423 = t2441 * t2643 + t2442 * t2640;
t2413 = -t2422 * t2648 + t2423 * t2651;
t2596 = t2652 * t2659;
t2530 = -t2596 - qJDD(3) * pkin(3) - t2709 * pkin(9) + (qJD(2) * t2612 + t2563) * t2649;
t2498 = -t2658 * pkin(4) - t2708 * qJ(5) + t2611 * t2597 + qJDD(5) + t2530;
t2459 = -t2685 * pkin(5) + (-pkin(5) * t2631 + t2704) * t2588 + t2498 - t2656 * qJ(6);
t2411 = t2413 * t2652 + t2459 * t2649;
t2412 = t2422 * t2651 + t2423 * t2648;
t2681 = t2411 * t2650 - t2412 * t2653;
t2449 = t2588 * t2705 - t2686;
t2430 = t2449 * t2643 + t2450 * t2640;
t2431 = -t2449 * t2640 + t2450 * t2643;
t2417 = -t2430 * t2648 + t2431 * t2651;
t2415 = t2417 * t2652 + t2498 * t2649;
t2416 = t2430 * t2651 + t2431 * t2648;
t2680 = t2415 * t2650 - t2416 * t2653;
t2471 = -t2496 * t2648 + t2497 * t2651;
t2456 = t2471 * t2652 + t2530 * t2649;
t2470 = t2496 * t2651 + t2497 * t2648;
t2677 = t2456 * t2650 - t2470 * t2653;
t2556 = -t2611 * t2692 + t2663;
t2558 = t2610 * t2692 + t2662;
t2524 = t2556 * t2651 - t2558 * t2648;
t2571 = -t2707 - t2708;
t2500 = t2524 * t2652 + t2571 * t2649;
t2523 = t2556 * t2648 + t2558 * t2651;
t2672 = t2500 * t2650 - t2523 * t2653;
t2551 = -t2649 * t2563 + t2596;
t2506 = -t2551 * t2649 + t2552 * t2652;
t2671 = t2506 * t2650 - t2562 * t2653;
t2582 = -t2706 - t2708;
t2537 = -t2573 * t2648 + t2582 * t2651;
t2555 = (qJD(4) - t2631) * t2611 - t2663;
t2508 = t2537 * t2652 + t2555 * t2649;
t2536 = t2573 * t2651 + t2582 * t2648;
t2670 = t2508 * t2650 - t2536 * t2653;
t2572 = t2682 - t2695;
t2589 = -t2706 - t2707;
t2550 = t2572 * t2651 - t2589 * t2648;
t2557 = t2581 + t2694;
t2514 = t2550 * t2652 + t2557 * t2649;
t2549 = t2572 * t2648 + t2589 * t2651;
t2669 = t2514 * t2650 - t2549 * t2653;
t2668 = t2650 * t2575 - t2653 * t2683;
t2630 = t2649 * t2654 * t2652;
t2622 = qJDD(3) + t2630;
t2628 = -t2637 * t2654 - t2709;
t2593 = -t2622 * t2649 + t2628 * t2652;
t2615 = -0.2e1 * t2634 + t2689;
t2667 = t2593 * t2650 + t2615 * t2653;
t2623 = -qJDD(3) + t2630;
t2627 = -t2636 * t2654 - t2709;
t2594 = t2623 * t2652 - t2627 * t2649;
t2613 = 0.2e1 * t2688 + t2690;
t2666 = t2594 * t2650 - t2613 * t2653;
t2616 = t2691 * qJDD(2);
t2619 = t2691 * t2654;
t2665 = t2616 * t2650 + t2619 * t2653;
t2664 = qJDD(2) * t2653 - t2650 * t2654;
t2618 = -qJDD(2) * t2650 - t2653 * t2654;
t2603 = t2664 * t2645;
t2602 = t2618 * t2645;
t2601 = t2664 * t2642;
t2600 = t2618 * t2642;
t2592 = t2623 * t2649 + t2627 * t2652;
t2591 = t2622 * t2652 + t2628 * t2649;
t2590 = t2616 * t2653 - t2619 * t2650;
t2585 = t2665 * t2645;
t2584 = t2665 * t2642;
t2565 = t2594 * t2653 + t2613 * t2650;
t2564 = t2593 * t2653 - t2615 * t2650;
t2546 = -t2642 * t2592 + t2645 * t2666;
t2545 = -t2642 * t2591 + t2645 * t2667;
t2544 = t2645 * t2592 + t2642 * t2666;
t2543 = t2645 * t2591 + t2642 * t2667;
t2534 = t2575 * t2653 + t2650 * t2683;
t2526 = t2642 ^ 2 * t2620 + (-t2687 + t2668) * t2645;
t2525 = t2645 ^ 2 * t2703 + (t2668 - t2693) * t2642;
t2511 = t2550 * t2649 - t2557 * t2652;
t2507 = t2537 * t2649 - t2555 * t2652;
t2505 = t2551 * t2652 + t2552 * t2649;
t2499 = t2524 * t2649 - t2571 * t2652;
t2495 = t2506 * t2653 + t2562 * t2650;
t2494 = t2514 * t2653 + t2549 * t2650;
t2493 = t2508 * t2653 + t2536 * t2650;
t2482 = t2500 * t2653 + t2523 * t2650;
t2475 = -t2642 * t2511 + t2645 * t2669;
t2474 = t2645 * t2511 + t2642 * t2669;
t2473 = -t2642 * t2505 + t2645 * t2671;
t2472 = t2645 * t2505 + t2642 * t2671;
t2469 = -t2642 * t2507 + t2645 * t2670;
t2468 = t2645 * t2507 + t2642 * t2670;
t2458 = -t2642 * t2499 + t2645 * t2672;
t2457 = t2645 * t2499 + t2642 * t2672;
t2455 = t2471 * t2649 - t2530 * t2652;
t2438 = t2456 * t2653 + t2470 * t2650;
t2425 = -t2642 * t2455 + t2645 * t2677;
t2424 = t2645 * t2455 + t2642 * t2677;
t2414 = t2417 * t2649 - t2498 * t2652;
t2410 = t2413 * t2649 - t2459 * t2652;
t2409 = t2415 * t2653 + t2416 * t2650;
t2408 = t2411 * t2653 + t2412 * t2650;
t2407 = -t2642 * t2414 + t2645 * t2680;
t2406 = t2645 * t2414 + t2642 * t2680;
t2405 = -t2642 * t2410 + t2645 * t2681;
t2404 = t2645 * t2410 + t2642 * t2681;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2620 * t2641 + t2621 * t2644, 0, 0, 0, 0, 0, 0, -t2603 * t2641 + t2618 * t2644, -t2602 * t2641 - t2644 * t2664, 0, -t2526 * t2641 + t2534 * t2644, 0, 0, 0, 0, 0, 0, -t2545 * t2641 + t2564 * t2644, -t2546 * t2641 + t2565 * t2644, -t2585 * t2641 + t2590 * t2644, -t2473 * t2641 + t2495 * t2644, 0, 0, 0, 0, 0, 0, -t2469 * t2641 + t2493 * t2644, -t2475 * t2641 + t2494 * t2644, -t2458 * t2641 + t2482 * t2644, -t2425 * t2641 + t2438 * t2644, 0, 0, 0, 0, 0, 0, t2754, t2760, t2748, -t2407 * t2641 + t2409 * t2644, 0, 0, 0, 0, 0, 0, t2754, t2748, -t2760, -t2405 * t2641 + t2408 * t2644; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2620 * t2644 + t2621 * t2641, 0, 0, 0, 0, 0, 0, t2603 * t2644 + t2618 * t2641, t2602 * t2644 - t2641 * t2664, 0, t2526 * t2644 + t2534 * t2641, 0, 0, 0, 0, 0, 0, t2545 * t2644 + t2564 * t2641, t2546 * t2644 + t2565 * t2641, t2585 * t2644 + t2590 * t2641, t2473 * t2644 + t2495 * t2641, 0, 0, 0, 0, 0, 0, t2469 * t2644 + t2493 * t2641, t2475 * t2644 + t2494 * t2641, t2458 * t2644 + t2482 * t2641, t2425 * t2644 + t2438 * t2641, 0, 0, 0, 0, 0, 0, t2753, -t2759, t2746, t2407 * t2644 + t2409 * t2641, 0, 0, 0, 0, 0, 0, t2753, t2746, t2759, t2405 * t2644 + t2408 * t2641; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, 0, 0, 0, 0, 0, 0, t2601, t2600, 0, t2525, 0, 0, 0, 0, 0, 0, t2543, t2544, t2584, t2472, 0, 0, 0, 0, 0, 0, t2468, t2474, t2457, t2424, 0, 0, 0, 0, 0, 0, t2747, -t2426, t2740, t2406, 0, 0, 0, 0, 0, 0, t2747, t2740, t2426, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2621, 0, 0, 0, 0, 0, 0, t2618, -t2664, 0, t2534, 0, 0, 0, 0, 0, 0, t2564, t2565, t2590, t2495, 0, 0, 0, 0, 0, 0, t2493, t2494, t2482, t2438, 0, 0, 0, 0, 0, 0, t2737, -t2439, t2729, t2409, 0, 0, 0, 0, 0, 0, t2737, t2729, t2439, t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2620, 0, 0, 0, 0, 0, 0, t2603, t2602, 0, t2526, 0, 0, 0, 0, 0, 0, t2545, t2546, t2585, t2473, 0, 0, 0, 0, 0, 0, t2469, t2475, t2458, t2425, 0, 0, 0, 0, 0, 0, t2745, -t2428, t2739, t2407, 0, 0, 0, 0, 0, 0, t2745, t2739, t2428, t2405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, 0, 0, 0, 0, 0, 0, t2601, t2600, 0, t2525, 0, 0, 0, 0, 0, 0, t2543, t2544, t2584, t2472, 0, 0, 0, 0, 0, 0, t2468, t2474, t2457, t2424, 0, 0, 0, 0, 0, 0, t2747, -t2426, t2740, t2406, 0, 0, 0, 0, 0, 0, t2747, t2740, t2426, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2654, -qJDD(2), 0, t2575, 0, 0, 0, 0, 0, 0, t2593, t2594, t2616, t2506, 0, 0, 0, 0, 0, 0, t2508, t2514, t2500, t2456, 0, 0, 0, 0, 0, 0, t2730, -t2462, t2725, t2415, 0, 0, 0, 0, 0, 0, t2730, t2725, t2462, t2411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2654, 0, -t2683, 0, 0, 0, 0, 0, 0, t2615, -t2613, t2619, -t2562, 0, 0, 0, 0, 0, 0, -t2536, -t2549, -t2523, -t2470, 0, 0, 0, 0, 0, 0, -t2723, -t2483, -t2718, -t2416, 0, 0, 0, 0, 0, 0, -t2723, -t2718, t2483, -t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2659, 0, 0, 0, 0, 0, 0, t2591, t2592, 0, t2505, 0, 0, 0, 0, 0, 0, t2507, t2511, t2499, t2455, 0, 0, 0, 0, 0, 0, t2732, -t2460, t2726, t2414, 0, 0, 0, 0, 0, 0, t2732, t2726, t2460, t2410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2628, t2623, t2689, t2552, 0, 0, 0, 0, 0, 0, t2537, t2550, t2524, t2471, 0, 0, 0, 0, 0, 0, t2724, -t2478, t2719, t2417, 0, 0, 0, 0, 0, 0, t2724, t2719, t2478, t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2622, t2627, -t2690, t2551, 0, 0, 0, 0, 0, 0, -t2555, -t2557, -t2571, -t2530, 0, 0, 0, 0, 0, 0, -t2660, -t2656, t2528, -t2498, 0, 0, 0, 0, 0, 0, -t2660, t2528, t2656, -t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2615, t2613, -t2619, t2562, 0, 0, 0, 0, 0, 0, t2536, t2549, t2523, t2470, 0, 0, 0, 0, 0, 0, t2723, t2483, t2718, t2416, 0, 0, 0, 0, 0, 0, t2723, t2718, -t2483, t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2582, t2572, t2556, t2497, 0, 0, 0, 0, 0, 0, t2720, t2512, t2710, t2431, 0, 0, 0, 0, 0, 0, t2720, t2710, -t2512, t2423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2573, t2589, t2558, t2496, 0, 0, 0, 0, 0, 0, t2721, t2509, t2711, t2430, 0, 0, 0, 0, 0, 0, t2721, t2711, -t2509, t2422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2555, t2557, t2571, t2530, 0, 0, 0, 0, 0, 0, t2660, t2656, -t2528, t2498, 0, 0, 0, 0, 0, 0, t2660, -t2528, -t2656, t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2712, t2538, t2661, t2450, 0, 0, 0, 0, 0, 0, t2712, t2661, -t2538, t2441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2539, t2713, -t2522, t2449, 0, 0, 0, 0, 0, 0, -t2539, -t2522, -t2713, -t2442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2660, t2656, -t2528, t2498, 0, 0, 0, 0, 0, 0, t2660, -t2528, -t2656, t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2712, t2661, -t2538, t2441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2660, -t2528, -t2656, t2459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2539, t2522, t2713, t2442;];
f_new_reg  = t1;
