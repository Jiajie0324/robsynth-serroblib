% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRRPP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRPP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:46:56
% EndTime: 2019-03-08 22:47:24
% DurationCPUTime: 15.55s
% Computational Cost: add. (11632->719), mult. (27414->993), div. (0->0), fcn. (29995->10), ass. (0->504)
t495 = sin(qJ(3));
t498 = cos(qJ(3));
t492 = sin(pkin(6));
t496 = sin(qJ(2));
t727 = t492 * t496;
t762 = cos(pkin(6));
t410 = t495 * t727 - t498 * t762;
t789 = -t410 / 0.2e1;
t493 = cos(pkin(11));
t497 = cos(qJ(4));
t721 = t493 * t497;
t491 = sin(pkin(11));
t494 = sin(qJ(4));
t729 = t491 * t494;
t421 = -t721 + t729;
t734 = t421 * qJ(6);
t767 = t494 * pkin(4);
t722 = t493 * t494;
t728 = t491 * t497;
t423 = t722 + t728;
t768 = t423 * pkin(5);
t297 = t734 + t767 + t768;
t715 = t497 * qJ(5);
t450 = t497 * pkin(9) + t715;
t628 = (-qJ(5) - pkin(9)) * t494;
t342 = t450 * t491 - t493 * t628;
t793 = t342 / 0.2e1;
t499 = cos(qJ(2));
t726 = t492 * t499;
t663 = t494 * t726;
t627 = t762 * t495;
t665 = t498 * t727;
t411 = t627 + t665;
t735 = t411 * t497;
t332 = -t663 + t735;
t312 = t493 * t332;
t664 = t497 * t726;
t576 = t411 * t494 + t664;
t543 = t491 * t576;
t842 = -t543 + t312;
t861 = t842 / 0.2e1;
t510 = t342 * t861 - t842 * t793;
t863 = t297 * t789 + t510;
t213 = t332 * t491 + t493 * t576;
t802 = -t213 / 0.2e1;
t862 = t213 / 0.2e1;
t718 = t495 * t497;
t720 = t494 * t495;
t400 = -t491 * t720 + t493 * t718;
t790 = t400 / 0.2e1;
t786 = -t421 / 0.2e1;
t785 = t421 / 0.2e1;
t784 = -t423 / 0.2e1;
t783 = t423 / 0.2e1;
t799 = -t842 / 0.2e1;
t427 = t493 * t450;
t618 = t491 * t628;
t843 = t427 + t618;
t860 = -t843 / 0.2e1;
t794 = t843 / 0.2e1;
t558 = t728 / 0.2e1 + t722 / 0.2e1;
t528 = t627 / 0.2e1 + t665 / 0.2e1;
t819 = t213 * t783 + t421 * t799;
t507 = t528 - t819;
t267 = t410 * t421;
t736 = t410 * t423;
t539 = -t213 * t736 + t267 * t842 + t410 * t411;
t824 = t539 * qJD(1);
t859 = -qJD(5) * t507 - t824;
t508 = t528 + t819;
t858 = t508 * qJD(5) + t824;
t641 = t726 / 0.2e1;
t619 = t495 * t641;
t397 = t423 * t495;
t818 = t397 * t861 + t400 * t802;
t531 = t619 - t818;
t711 = t498 * t499;
t716 = t496 * t497;
t385 = (-t494 * t711 + t716) * t492;
t353 = t493 * t385;
t717 = t496 * t494;
t386 = (t497 * t711 + t717) * t492;
t730 = t491 * t386;
t249 = -t353 + t730;
t723 = t493 * t386;
t731 = t491 * t385;
t250 = t723 + t731;
t662 = t495 * t726;
t518 = t213 * t249 + t250 * t842 + t410 * t662;
t826 = t518 * qJD(1);
t857 = t531 * qJD(5) + t826;
t517 = t619 + t818;
t856 = -qJD(5) * t517 - t826;
t399 = t423 * t498;
t719 = t494 * t498;
t453 = t491 * t719;
t713 = t497 * t498;
t402 = t493 * t713 - t453;
t791 = -t397 / 0.2e1;
t509 = t267 * t791 + t399 * t799 + t402 * t862 - t736 * t790;
t820 = t249 * t783 + t250 * t786;
t503 = t509 + t820;
t631 = t799 + t861;
t632 = t862 + t802;
t516 = t397 * t632 + t400 * t631;
t827 = t516 * qJD(4);
t855 = t827 + qJD(3) * t503 + (t249 * t400 - t250 * t397) * qJD(2);
t500 = t509 - t820;
t854 = qJD(3) * t500 + t827;
t515 = t421 * t632 + t423 * t631;
t828 = t515 * qJD(4);
t853 = t828 + qJD(2) * t503 + (-t267 * t421 - t423 * t736) * qJD(3);
t852 = -qJD(2) * t500 + t828;
t417 = t423 ^ 2;
t844 = t421 ^ 2 + t417;
t851 = qJD(5) * t844;
t396 = t400 ^ 2;
t845 = t397 ^ 2 + t396;
t850 = qJD(5) * t845;
t594 = t397 * t421 + t400 * t423;
t849 = qJD(2) * t845 + qJD(3) * t594;
t848 = qJD(2) * t594 + qJD(3) * t844;
t617 = -pkin(3) * t498 - pkin(9) * t495;
t449 = -pkin(2) + t617;
t425 = t497 * t449;
t616 = -t495 * t715 + t425;
t771 = pkin(8) * t494;
t313 = (-pkin(4) - t771) * t498 + t616;
t294 = t491 * t313;
t672 = pkin(8) * t713;
t337 = t672 + (-qJ(5) * t495 + t449) * t494;
t724 = t493 * t337;
t201 = t724 + t294;
t847 = t201 / 0.2e1;
t846 = t297 / 0.2e1;
t739 = t402 * qJ(6);
t770 = t399 * pkin(5);
t841 = -t739 / 0.2e1 + t770 / 0.2e1;
t840 = qJD(1) * t500;
t839 = qJD(1) * t516;
t838 = qJD(1) * t517;
t595 = t342 * t423 - t421 * t843;
t830 = qJD(5) * t595;
t823 = t594 * qJD(5);
t704 = t730 / 0.2e1 - t353 / 0.2e1;
t821 = t342 * t790 + t397 * t860;
t743 = t337 * t491;
t200 = t313 * t493 - t743;
t817 = t200 * t784 + t201 * t786;
t712 = t498 * qJ(6);
t179 = t201 - t712;
t181 = pkin(5) * t498 - t200;
t816 = t179 * t785 + t181 * t784;
t487 = t494 ^ 2;
t489 = t497 ^ 2;
t461 = t489 - t487;
t675 = t495 * qJD(2);
t660 = t497 * t675;
t814 = qJD(3) * t461 - 0.2e1 * t494 * t660;
t812 = -qJD(1) * t507 + qJD(3) * t595;
t811 = qJD(1) * t515;
t810 = qJD(2) * t517 + qJD(3) * t507;
t809 = qJD(2) * t531 + qJD(3) * t508;
t808 = qJD(2) * t516 + qJD(3) * t515;
t807 = qJD(2) * t518 + qJD(3) * t539;
t806 = t179 / 0.2e1;
t805 = t181 / 0.2e1;
t804 = -t200 / 0.2e1;
t673 = pkin(8) * t719;
t336 = t616 - t673;
t733 = t491 * t336;
t224 = t724 + t733;
t797 = -t224 / 0.2e1;
t225 = t336 * t493 - t743;
t796 = t225 / 0.2e1;
t795 = t267 / 0.2e1;
t640 = t312 / 0.2e1;
t792 = -t342 / 0.2e1;
t788 = t410 / 0.2e1;
t787 = t411 / 0.2e1;
t639 = t427 / 0.2e1;
t470 = pkin(4) * t491 + qJ(6);
t782 = -t470 / 0.2e1;
t781 = t470 / 0.2e1;
t473 = -pkin(4) * t493 - pkin(5);
t780 = t473 / 0.2e1;
t779 = -t491 / 0.2e1;
t778 = t491 / 0.2e1;
t777 = -t493 / 0.2e1;
t776 = -t494 / 0.2e1;
t775 = -t495 / 0.2e1;
t774 = t495 / 0.2e1;
t773 = -t498 / 0.2e1;
t772 = t498 / 0.2e1;
t769 = t400 * pkin(5);
t766 = t495 * pkin(3);
t765 = t495 * pkin(5);
t764 = t498 * pkin(9);
t763 = pkin(4) * qJD(4);
t757 = t213 * t224;
t753 = t842 * t225;
t749 = t224 * t342;
t748 = t225 * t843;
t437 = pkin(4) * t720 + t495 * pkin(8);
t245 = pkin(5) * t397 - qJ(6) * t400 + t437;
t747 = t245 * t400;
t745 = t250 * t843;
t740 = t397 * qJ(6);
t737 = t410 * t400;
t272 = t410 * t494;
t451 = -t764 + t766;
t435 = t494 * t451;
t671 = pkin(8) * t718;
t338 = -qJ(5) * t719 + t435 - t671;
t732 = t491 * t338;
t436 = t497 * t451;
t469 = pkin(8) * t720;
t323 = pkin(4) * t495 - qJ(5) * t713 + t436 + t469;
t725 = t493 * t323;
t488 = t495 ^ 2;
t714 = t497 * t488;
t298 = t491 * t323;
t327 = t493 * t338;
t210 = t327 + t298;
t644 = -t272 / 0.2e1;
t702 = t493 * t644 + t728 * t789;
t701 = t558 * t410;
t467 = pkin(4) * t719;
t485 = t498 * pkin(8);
t438 = t485 + t467;
t490 = t498 ^ 2;
t462 = t490 - t488;
t700 = qJD(2) * t400;
t433 = t462 * t494;
t699 = qJD(2) * t433;
t434 = t490 * t497 - t714;
t698 = qJD(2) * t434;
t697 = qJD(2) * t492;
t696 = qJD(3) * t423;
t695 = qJD(3) * t494;
t694 = qJD(3) * t495;
t693 = qJD(3) * t497;
t692 = qJD(3) * t498;
t691 = qJD(3) * t499;
t690 = qJD(4) * t421;
t689 = qJD(4) * t494;
t688 = qJD(4) * t497;
t687 = qJD(4) * t498;
t686 = qJD(5) * t400;
t685 = qJD(5) * t498;
t684 = qJD(6) * t397;
t683 = qJD(6) * t423;
t682 = qJD(6) * t498;
t387 = -t425 + t673;
t231 = t387 * t495 + (-t469 + t436) * t498;
t681 = t231 * qJD(2);
t277 = (t784 + t558) * t498;
t680 = t277 * qJD(2);
t278 = -t453 / 0.2e1 + (t721 / 0.2e1 + t786) * t498;
t679 = t278 * qJD(2);
t637 = -t721 / 0.2e1;
t279 = t453 / 0.2e1 + (t637 + t786) * t498;
t678 = t279 * qJD(2);
t677 = t411 * qJD(3);
t676 = t462 * qJD(2);
t674 = t498 * qJD(2);
t670 = pkin(4) * t718;
t669 = pkin(2) * t675;
t668 = pkin(2) * t674;
t479 = t767 / 0.2e1;
t666 = t780 - pkin(5) / 0.2e1;
t478 = -pkin(4) * t497 - pkin(3);
t661 = t397 * t700;
t659 = t494 * t693;
t658 = t495 * t693;
t657 = t494 * t687;
t656 = t497 * t687;
t655 = t499 * t697;
t654 = t494 * t688;
t653 = t495 * t692;
t652 = t495 * t674;
t651 = -t753 / 0.2e1;
t650 = -t748 / 0.2e1;
t649 = t249 * t793;
t648 = -t745 / 0.2e1;
t646 = -t736 / 0.2e1;
t645 = t736 / 0.2e1;
t642 = -t726 / 0.2e1;
t636 = -t718 / 0.2e1;
t635 = t718 / 0.2e1;
t634 = -t711 / 0.2e1;
t633 = qJ(6) / 0.2e1 + t781;
t630 = -t294 / 0.2e1 - t724 / 0.2e1;
t629 = t467 / 0.2e1 + t485 / 0.2e1;
t626 = t267 * t843 - t342 * t736;
t625 = t342 * t402 - t399 * t843;
t377 = t397 * t674;
t624 = qJD(3) * t278 - t377;
t456 = pkin(4) * t635;
t465 = -qJD(4) + t674;
t623 = t494 * t658;
t621 = t410 * t636;
t620 = t495 * t642;
t615 = t724 / 0.2e1 + t733 / 0.2e1;
t188 = t495 * qJ(6) + t210;
t209 = t725 - t732;
t189 = -t209 - t765;
t246 = t438 - t739 + t770;
t502 = t179 * t795 + t188 * t861 + t189 * t862 + t245 * t787 + t246 * t788 - t736 * t805;
t293 = pkin(5) * t421 - qJ(6) * t423 + t478;
t534 = t293 * t619 + t649;
t2 = t648 + t502 - t534;
t25 = t179 * t188 + t181 * t189 + t245 * t246;
t614 = t2 * qJD(1) + t25 * qJD(2);
t254 = t670 + t740 + t769;
t26 = t179 * t225 + t181 * t224 + t245 * t254;
t511 = t181 * t861 + t757 / 0.2e1 - t213 * t806 + t254 * t788;
t568 = t249 * t780 + t250 * t781;
t5 = t651 - t511 + t568;
t613 = -t5 * qJD(1) + t26 * qJD(2);
t501 = t201 * t795 + t209 * t802 + t210 * t861 + t437 * t787 + t438 * t788 - t736 * t804;
t533 = t478 * t619 + t649;
t4 = t648 + t501 - t533;
t45 = t200 * t209 + t201 * t210 + t437 * t438;
t612 = t4 * qJD(1) + t45 * qJD(2);
t48 = -t200 * t224 + t201 * t225 + t437 * t670;
t523 = t200 * t861 - t757 / 0.2e1 + t201 * t862;
t567 = t249 * t777 + t250 * t778;
t9 = t651 + (t621 + t567) * pkin(4) + t523;
t611 = -t9 * qJD(1) + t48 * qJD(2);
t27 = -t179 * t399 + t181 * t402 - t188 * t397 + t189 * t400;
t610 = t27 * qJD(2) + t840;
t33 = -t200 * t402 - t201 * t399 - t209 * t400 - t210 * t397;
t609 = t33 * qJD(2) + t840;
t32 = (-t179 + t224) * t400 + (-t181 - t225) * t397;
t608 = t32 * qJD(2) + t839;
t38 = (-t201 + t224) * t400 + (t200 - t225) * t397;
t607 = t38 * qJD(2) + t839;
t46 = -t179 * t495 + t188 * t498 + t245 * t402 + t246 * t400;
t520 = t267 * t772 + t400 * t787 + t402 * t788;
t60 = (t423 * t642 + t799) * t495 + t520;
t606 = -t60 * qJD(1) - t46 * qJD(2);
t47 = -t181 * t495 + t189 * t498 + t245 * t399 + t246 * t397;
t521 = -t397 * t787 + t399 * t789 - t736 * t773;
t59 = (t421 * t641 + t862) * t495 + t521;
t605 = -t59 * qJD(1) + t47 * qJD(2);
t63 = t224 * t498 + t254 * t397 + t747;
t572 = t842 * t773 - t737 / 0.2e1;
t79 = t572 - t704;
t604 = -qJD(1) * t79 + qJD(2) * t63;
t64 = t225 * t498 - t245 * t397 + t254 * t400;
t561 = t731 / 0.2e1 + t723 / 0.2e1;
t571 = -t213 * t773 - t397 * t789;
t80 = t561 - t571;
t603 = -qJD(1) * t80 - qJD(2) * t64;
t65 = -t179 * t397 + t181 * t400;
t602 = qJD(2) * t65 - t838;
t75 = -t200 * t400 - t201 * t397;
t601 = qJD(2) * t75 - t838;
t570 = t842 * t772 + t737 / 0.2e1;
t78 = t570 + t704;
t86 = t179 * t498 + t747;
t600 = -qJD(1) * t78 - qJD(2) * t86;
t172 = t645 + t702;
t569 = t245 * t783 + t293 * t790;
t522 = t773 * t843 - t569;
t562 = t732 / 0.2e1 - t725 / 0.2e1;
t526 = -t765 / 0.2e1 + t562;
t57 = -t522 + t526;
t591 = qJD(1) * t172 + qJD(2) * t57;
t590 = t465 * t495;
t103 = (t494 * t641 + t332 / 0.2e1 - t735 / 0.2e1) * t495;
t388 = t449 * t494 + t672;
t232 = t435 * t498 + (-t388 + t672) * t495;
t589 = -t103 * qJD(1) + t232 * qJD(2);
t527 = (t494 * t634 + t716 / 0.2e1) * t492;
t550 = t332 * t773 + t621;
t168 = t527 + t550;
t317 = -pkin(8) * t714 - t388 * t498;
t588 = qJD(1) * t168 + qJD(2) * t317;
t169 = (-t727 / 0.2e1 + t411 * t772 + t410 * t774) * t494;
t316 = -t387 * t498 - t488 * t771;
t587 = qJD(1) * t169 - qJD(2) * t316;
t107 = t397 * t633 - t400 * t666 + t456;
t165 = t421 * t633 - t423 * t666 + t479;
t586 = qJD(2) * t107 + qJD(3) * t165;
t560 = -t397 * t778 + t400 * t777;
t239 = (t636 + t560) * pkin(4);
t559 = t421 * t779 + t423 * t777;
t269 = (t776 + t559) * pkin(4);
t581 = qJD(2) * t239 + qJD(3) * t269;
t580 = -qJD(2) * t397 - qJD(3) * t421;
t282 = t696 + t700;
t579 = t764 / 0.2e1 - t766 / 0.2e1;
t552 = t579 * t494;
t330 = t435 / 0.2e1 - t552;
t578 = pkin(3) * t693 - qJD(2) * t330;
t551 = t579 * t497;
t331 = -t436 / 0.2e1 + t551;
t577 = pkin(3) * t695 - qJD(2) * t331;
t575 = t188 * t781 + t189 * t780;
t574 = t210 * t778 + t209 * t493 / 0.2e1;
t566 = t267 * t781 - t736 * t780;
t565 = t267 * t778 - t736 * t777;
t564 = -t397 * t784 + t400 * t785;
t563 = t399 * t782 + t402 * t780;
t557 = t637 + t729 / 0.2e1;
t556 = t497 * t590;
t190 = t775 + t564;
t555 = qJD(2) * t190 + t421 * t696;
t414 = (t487 / 0.2e1 - t489 / 0.2e1) * t495;
t554 = -qJD(2) * t414 + t659;
t553 = qJD(3) * t279 + qJD(4) * t397 - t377;
t549 = t629 + t821;
t548 = qJD(2) * t494 * t714 + qJD(3) * t414;
t432 = t461 * t488;
t547 = qJD(2) * t432 + 0.2e1 * t623;
t545 = (t399 * t779 + t402 * t777) * pkin(4);
t17 = t566 + t863;
t506 = t179 * t792 + t181 * t794 + t749 / 0.2e1 + t245 * t846 + t254 * t293 / 0.2e1;
t7 = t650 - t506 + t575;
t70 = t293 * t297;
t544 = -t17 * qJD(1) - t7 * qJD(2) + t70 * qJD(3);
t514 = (t792 + t793) * t397;
t11 = (t806 + t797) * t423 + (t796 + t805) * t421 + t514 + t563;
t542 = -t11 * qJD(2) + t811;
t13 = (t847 + t797) * t423 + (t796 + t804) * t421 + t545 + t514;
t541 = -t13 * qJD(2) + t811;
t524 = t200 * t794 + t342 * t847 - t749 / 0.2e1;
t15 = t650 + (t437 * t776 + t478 * t636 + t574) * pkin(4) + t524;
t19 = (t644 + t565) * pkin(4) + t510;
t99 = t478 * t767;
t540 = -t19 * qJD(1) - t15 * qJD(2) + t99 * qJD(3);
t519 = t629 - t821;
t41 = t519 + t816 + t841;
t538 = -qJD(2) * t41 + t812;
t49 = t519 - t817;
t537 = -qJD(2) * t49 + t812;
t112 = t293 * t423 + t297 * t421;
t173 = t646 + t701;
t504 = t254 * t785 + t397 * t846 + t772 * t843 + t569;
t30 = t495 * t666 + t504 + t562;
t536 = -qJD(1) * t173 + qJD(2) * t30 + qJD(3) * t112;
t113 = t293 * t421 - t297 * t423;
t174 = (t786 + t557) * t410;
t505 = t245 * t786 + t254 * t783 + t293 * t791 + t297 * t790 - t342 * t772;
t529 = t633 * t495 + t298 / 0.2e1 + t327 / 0.2e1;
t28 = t505 + t529;
t535 = -qJD(1) * t174 - qJD(2) * t28 + qJD(3) * t113;
t368 = t490 + t396;
t525 = qJD(2) * t368 + t400 * t696 - t687;
t208 = t640 - t312 / 0.2e1;
t335 = t639 - t427 / 0.2e1;
t84 = t498 * t633 + t615 + t630;
t513 = qJD(1) * t208 - qJD(2) * t84 + qJD(3) * t335 + qJD(4) * t470;
t512 = t224 * t783 + t225 * t786 + t400 * t860 + t843 * t790;
t474 = t694 / 0.2e1;
t420 = (t674 - qJD(4) / 0.2e1) * t495;
t409 = t414 * qJD(4);
t303 = t400 * t683;
t296 = t469 + t436 / 0.2e1 + t551;
t295 = t671 - t435 / 0.2e1 - t552;
t280 = t423 * t772 + t498 * t558;
t274 = t410 * t497;
t270 = 0.2e1 * t639 + t618;
t268 = pkin(4) * t559 + t479;
t251 = qJD(3) * t417 + t423 * t700;
t238 = pkin(4) * t560 + t456;
t191 = t775 - t564;
t177 = t646 + t702;
t176 = t645 + t701;
t175 = (t557 + t785) * t410;
t171 = t527 - t550;
t170 = t576 * t773 + t495 * t644 + (t497 * t634 - t717 / 0.2e1) * t492;
t166 = t421 * t782 + t423 * t780 + t479 + t734 / 0.2e1 + t768 / 0.2e1;
t164 = t745 / 0.2e1;
t124 = t748 / 0.2e1;
t111 = 0.2e1 * t640 - t543;
t108 = -t397 * t781 + t400 * t780 + t456 + t740 / 0.2e1 + t769 / 0.2e1;
t106 = t332 * t775 + t411 * t635 + t494 * t619;
t105 = t497 * t620 + t576 * t775 + t720 * t787;
t97 = t753 / 0.2e1;
t85 = t470 * t773 - t712 / 0.2e1 + t615 - t630;
t83 = -t570 + t704;
t82 = t561 + t571;
t81 = -t572 - t704;
t62 = t423 * t620 + t774 * t842 - t520;
t61 = t213 * t775 + t421 * t619 - t521;
t58 = t522 + t526;
t50 = t549 + t817;
t42 = t549 - t816 + t841;
t31 = t473 * t775 + t504 - t526;
t29 = -t505 + t529;
t20 = pkin(4) * t565 + t410 * t479 - t510;
t18 = t566 - t863;
t16 = pkin(4) * t574 + t437 * t479 + t456 * t478 + t124 - t524;
t14 = t200 * t785 + t201 * t784 + t512 + t545;
t12 = t179 * t784 + t181 * t786 + t512 + t563;
t10 = pkin(4) * t567 + t410 * t456 - t523 + t97;
t8 = t124 + t506 + t575;
t6 = t97 + t511 + t568;
t3 = t164 + t501 + t533;
t1 = t164 + t502 + t534;
t21 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t807, 0, 0, 0, t807; 0, 0, -t496 * t697, -t655, 0, 0, 0, 0, 0 (-t495 * t691 - t496 * t674) * t492 (t496 * t675 - t498 * t691) * t492, 0, 0, 0, 0, 0 (-t385 * t498 + t488 * t663) * qJD(2) + t105 * qJD(3) + t171 * qJD(4) (t386 * t498 + t488 * t664) * qJD(2) + t106 * qJD(3) + t170 * qJD(4), t855 (-t249 * t200 + t250 * t201 + t437 * t662) * qJD(2) + t3 * qJD(3) + t10 * qJD(4) + t857 (t249 * t498 + t397 * t662) * qJD(2) + t61 * qJD(3) + t81 * qJD(4), t855 (-t250 * t498 - t400 * t662) * qJD(2) + t62 * qJD(3) + t82 * qJD(4) (t250 * t179 + t249 * t181 + t245 * t662) * qJD(2) + t1 * qJD(3) + t6 * qJD(4) + t83 * qJD(6) + t857; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t495 * t655 - t677, t410 * qJD(3) - t498 * t655, 0, 0, 0, 0, 0, qJD(2) * t105 + qJD(4) * t272 - t497 * t677, qJD(2) * t106 + qJD(4) * t274 + t494 * t677, t853, t3 * qJD(2) + (t411 * t478 + t626) * qJD(3) + t20 * qJD(4) + t858, qJD(2) * t61 + qJD(4) * t176 + t421 * t677, t853, qJD(2) * t62 + qJD(4) * t175 - t423 * t677, t1 * qJD(2) + (t293 * t411 + t626) * qJD(3) + t18 * qJD(4) + t177 * qJD(6) + t858; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t171 + qJD(3) * t272 - qJD(4) * t332, t170 * qJD(2) + t274 * qJD(3) + qJD(4) * t576, t808, t10 * qJD(2) + t20 * qJD(3) + (-t213 * t491 - t493 * t842) * t763, qJD(2) * t81 + qJD(3) * t176 - qJD(4) * t842, t808, qJD(2) * t82 + qJD(3) * t175 - qJD(4) * t213, t6 * qJD(2) + t18 * qJD(3) + (-t213 * t470 + t473 * t842) * qJD(4) + t111 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t809, 0, 0, 0, t809; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t83 + qJD(3) * t177 + qJD(4) * t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t168, -qJD(3) * t103 - qJD(4) * t169, t854, qJD(3) * t4 - qJD(4) * t9 + t856, -qJD(3) * t59 - qJD(4) * t79, t854, -qJD(3) * t60 - qJD(4) * t80, qJD(3) * t2 - qJD(4) * t5 - qJD(6) * t78 + t856; 0, 0, 0, 0, t653, t462 * qJD(3), 0, 0, 0, -pkin(2) * t694, -pkin(2) * t692, -t488 * t654 + t489 * t653, -qJD(4) * t432 - 0.2e1 * t498 * t623, -qJD(3) * t434 + t495 * t657, qJD(3) * t433 + t495 * t656, -t653, -qJD(3) * t231 - qJD(4) * t317, qJD(3) * t232 + qJD(4) * t316, qJD(3) * t33 + qJD(4) * t38 + t850, qJD(3) * t45 + qJD(4) * t48 + qJD(5) * t75, qJD(3) * t47 + qJD(4) * t63 + (-t684 + t685) * t400, qJD(3) * t27 + qJD(4) * t32 + t397 * t682 + t850, -qJD(3) * t46 - qJD(4) * t64 + qJD(6) * t368 + t397 * t685, qJD(3) * t25 + qJD(4) * t26 + qJD(5) * t65 - qJD(6) * t86; 0, 0, 0, 0, t652, t676, t692, -t694, 0, -pkin(8) * t692 - t669, pkin(8) * t694 - t668, -t409 + (t489 * t675 + t659) * t498, -0.2e1 * t495 * t654 + t498 * t814, t494 * t694 - t698, t658 + t699, -t420, -t681 + (t494 * t617 - t672) * qJD(3) + t296 * qJD(4) (t497 * t617 + t673) * qJD(3) + t295 * qJD(4) + t589 (-t209 * t423 - t210 * t421 + t625) * qJD(3) + t14 * qJD(4) + t823 + t609 (-t209 * t342 + t210 * t843 + t438 * t478) * qJD(3) + t16 * qJD(4) + t50 * qJD(5) + t612 (t246 * t421 + t293 * t399 - t342 * t495) * qJD(3) + t31 * qJD(4) + t280 * qJD(5) + t191 * qJD(6) + t605 (-t188 * t421 + t189 * t423 + t625) * qJD(3) + t12 * qJD(4) + t823 - t279 * qJD(6) + t610 (-t246 * t423 - t293 * t402 + t495 * t843) * qJD(3) + t29 * qJD(4) - t278 * qJD(5) + t303 + t606 (t188 * t843 + t189 * t342 + t246 * t293) * qJD(3) + t8 * qJD(4) + t42 * qJD(5) + t58 * qJD(6) + t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t548, -t547, t494 * t590, t556, t474, qJD(3) * t296 - qJD(4) * t388 - t588, qJD(3) * t295 + qJD(4) * t387 - t587, t14 * qJD(3) + (t397 * t493 - t400 * t491) * t763 + t607, t16 * qJD(3) + t238 * qJD(5) + (-t224 * t493 + t225 * t491) * t763 + t611, qJD(3) * t31 - qJD(4) * t224 + t604, t12 * qJD(3) + (-t397 * t473 - t400 * t470) * qJD(4) - t684 + t608, qJD(3) * t29 + qJD(4) * t225 + t603 - t682, t8 * qJD(3) + (t224 * t473 + t225 * t470) * qJD(4) + t108 * qJD(5) + t85 * qJD(6) + t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t849, qJD(3) * t50 + qJD(4) * t238 + t601, qJD(3) * t280 + t400 * t674, t849, -t624, qJD(3) * t42 + qJD(4) * t108 + t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t191 - t661, -t553, t525, qJD(3) * t58 + qJD(4) * t85 + t600; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t103, t852, -qJD(2) * t4 - qJD(4) * t19 + t859, qJD(2) * t59 - qJD(4) * t173, t852, qJD(2) * t60 - qJD(4) * t174, -qJD(2) * t2 - qJD(4) * t17 - qJD(6) * t172 + t859; 0, 0, 0, 0, -t652, -t676, 0, 0, 0, t669, t668, -t489 * t652 - t409, 0.2e1 * t494 * t556, -t656 + t698, t657 - t699, t420, qJD(4) * t331 + t681, qJD(4) * t330 - t589, -qJD(4) * t13 - t609 + t823, -qJD(4) * t15 - qJD(5) * t49 - t612, qJD(4) * t30 - qJD(5) * t277 - qJD(6) * t190 - t605, -qJD(4) * t11 - qJD(6) * t278 - t610 + t823, -qJD(4) * t28 - qJD(5) * t279 + t303 - t606, -qJD(4) * t7 - qJD(5) * t41 - qJD(6) * t57 - t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t654, t461 * qJD(4), 0, 0, 0, -pkin(3) * t689, -pkin(3) * t688, t851, qJD(4) * t99 + t830, qJD(4) * t112 - t421 * t683, t851, qJD(4) * t113 + qJD(6) * t417, qJD(4) * t70 - t293 * t683 + t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, t814, -t465 * t497, t465 * t494, -t675 / 0.2e1, -pkin(9) * t688 - t577, pkin(9) * t689 - t578 (t421 * t493 - t423 * t491) * t763 + t541, t268 * qJD(5) + (-t342 * t491 - t493 * t843) * t763 + t540, -qJD(4) * t843 + t536 (-t421 * t473 - t423 * t470) * qJD(4) - qJD(6) * t421 + t542, -qJD(4) * t342 + t535 (-t342 * t470 + t473 * t843) * qJD(4) + t166 * qJD(5) + t270 * qJD(6) + t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t848, qJD(4) * t268 + t537, -t680, t848, -t678, qJD(4) * t166 + t538; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t555, -t679 - t690, t251, qJD(4) * t270 - t293 * t696 - t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t168, qJD(2) * t169, -t808, qJD(2) * t9 + qJD(3) * t19, qJD(2) * t79 + qJD(3) * t173, -t808, qJD(2) * t80 + qJD(3) * t174, qJD(2) * t5 + qJD(3) * t17 + qJD(6) * t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t548, t547 (-t494 * t675 + t693) * t498 (-t660 - t695) * t498, t474, -qJD(3) * t331 + t588, -qJD(3) * t330 + t587, qJD(3) * t13 - t607, qJD(3) * t15 + qJD(5) * t239 - t611, -qJD(3) * t30 - t604 - t686, qJD(3) * t11 - t608, qJD(3) * t28 - qJD(5) * t397 - t603 - t682, qJD(3) * t7 - qJD(5) * t107 - qJD(6) * t84 - t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t554, -t814, t497 * t674, -t494 * t674, t675 / 0.2e1, t577, t578, -t541, qJD(5) * t269 - t540, -qJD(5) * t423 - t536, -t542, -qJD(5) * t421 - t535, -qJD(5) * t165 + qJD(6) * t335 - t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(6), t470 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t581, -t282, 0, t580, -t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t465, t513; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t810, 0, 0, 0, t810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t849, qJD(3) * t49 - qJD(4) * t239 - t601, qJD(3) * t277 - t400 * t465, -t849, t553, qJD(3) * t41 + qJD(4) * t107 - qJD(6) * t400 - t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t848, -qJD(4) * t269 - t537, qJD(4) * t423 + t680, -t848, t678 + t690, qJD(4) * t165 - t538 - t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t581, t282, 0, -t580, t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t78 + qJD(3) * t172 - qJD(4) * t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t190 + t661, t624, -t525, qJD(3) * t57 + qJD(4) * t84 - t600 + t686; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t555, t679, -t251, -qJD(4) * t335 + (qJD(3) * t293 + qJD(5)) * t423 + t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t465, -t513; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t21;
