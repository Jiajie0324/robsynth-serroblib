% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 07:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRRPR4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR4_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:46:37
% EndTime: 2019-05-05 07:46:55
% DurationCPUTime: 8.45s
% Computational Cost: add. (51192->505), mult. (103946->744), div. (0->0), fcn. (77657->14), ass. (0->312)
t280 = cos(qJ(3));
t257 = qJD(2) * t280 - qJD(4);
t357 = t257 ^ 2;
t275 = sin(qJ(4));
t279 = cos(qJ(4));
t276 = sin(qJ(3));
t321 = qJD(2) * t276;
t237 = -qJD(3) * t279 + t275 * t321;
t238 = qJD(3) * t275 + t279 * t321;
t268 = sin(pkin(12));
t270 = cos(pkin(12));
t217 = t237 * t270 + t238 * t268;
t359 = t217 ^ 2;
t177 = -t357 - t359;
t315 = qJD(2) * qJD(3);
t260 = t276 * t315;
t313 = t280 * qJDD(2);
t242 = -t260 + t313;
t236 = -qJDD(4) + t242;
t219 = -t237 * t268 + t238 * t270;
t333 = t219 * t217;
t289 = -t236 - t333;
t365 = t270 * t289;
t125 = t177 * t268 + t365;
t269 = sin(pkin(6));
t271 = cos(pkin(6));
t344 = sin(pkin(11));
t345 = cos(pkin(11));
t291 = g(1) * t344 - g(2) * t345;
t322 = -g(3) + qJDD(1);
t284 = -t269 * t291 + t271 * t322;
t283 = t276 * t284;
t246 = -g(1) * t345 - g(2) * t344;
t277 = sin(qJ(2));
t281 = cos(qJ(2));
t286 = t271 * t291;
t367 = t269 * t322 + t286;
t207 = t281 * t246 + t277 * t367;
t282 = qJD(2) ^ 2;
t196 = -t282 * pkin(2) + qJDD(2) * pkin(8) + t207;
t299 = -pkin(3) * t280 - pkin(9) * t276;
t304 = t282 * t299 + t196;
t356 = qJD(3) ^ 2;
t157 = -pkin(3) * t356 + qJDD(3) * pkin(9) + t280 * t304 + t283;
t298 = t277 * t246 - t281 * t367;
t195 = -qJDD(2) * pkin(2) - pkin(8) * t282 + t298;
t296 = -t242 + t260;
t309 = t280 * t315;
t314 = t276 * qJDD(2);
t241 = t309 + t314;
t297 = t241 + t309;
t163 = pkin(3) * t296 - pkin(9) * t297 + t195;
t119 = t275 * t157 - t163 * t279;
t292 = -t275 * qJDD(3) - t279 * t241;
t213 = -qJD(4) * t237 - t292;
t228 = t237 * t257;
t192 = t213 - t228;
t331 = t238 * t237;
t288 = -t236 - t331;
t100 = pkin(4) * t288 - qJ(5) * t192 - t119;
t120 = t157 * t279 + t163 * t275;
t225 = -pkin(4) * t257 - qJ(5) * t238;
t293 = t279 * qJDD(3) - t275 * t241;
t287 = -qJD(4) * t238 + t293;
t358 = t237 ^ 2;
t104 = -pkin(4) * t358 + qJ(5) * t287 + t225 * t257 + t120;
t300 = -0.2e1 * qJD(5) * t219 + t100 * t270 - t268 * t104;
t370 = pkin(4) * t125 + t300;
t274 = sin(qJ(6));
t278 = cos(qJ(6));
t182 = t217 * t278 + t219 * t274;
t184 = -t217 * t274 + t219 * t278;
t133 = t184 * t182;
t232 = -qJDD(6) + t236;
t362 = -t133 - t232;
t369 = t274 * t362;
t368 = t278 * t362;
t366 = t268 * t289;
t364 = t275 * t288;
t363 = t279 * t288;
t175 = t213 * t270 + t268 * t287;
t305 = t213 * t268 - t270 * t287;
t116 = -qJD(6) * t182 + t175 * t278 - t274 * t305;
t251 = -qJD(6) + t257;
t166 = t182 * t251;
t361 = t166 + t116;
t201 = t217 * t257;
t151 = -t201 + t175;
t360 = t201 + t175;
t306 = t274 * t175 + t278 * t305;
t93 = (qJD(6) + t251) * t184 + t306;
t188 = (qJD(4) + t257) * t238 - t293;
t180 = t182 ^ 2;
t181 = t184 ^ 2;
t216 = t219 ^ 2;
t235 = t238 ^ 2;
t250 = t251 ^ 2;
t320 = qJD(5) * t217;
t211 = -0.2e1 * t320;
t346 = t100 * t268 + t104 * t270;
t63 = t211 + t346;
t39 = t268 * t63 + t270 * t300;
t355 = pkin(4) * t39;
t332 = t219 * t257;
t147 = t305 + t332;
t112 = -t147 * t268 - t151 * t270;
t354 = pkin(4) * t112;
t46 = pkin(5) * t289 - pkin(10) * t151 + t300;
t197 = -pkin(5) * t257 - pkin(10) * t219;
t47 = -pkin(5) * t359 - pkin(10) * t305 + t197 * t257 + t63;
t27 = t274 * t47 - t278 * t46;
t28 = t274 * t46 + t278 * t47;
t13 = -t27 * t278 + t274 * t28;
t352 = t13 * t268;
t351 = t13 * t270;
t224 = t280 * t284;
t156 = -qJDD(3) * pkin(3) - pkin(9) * t356 + t276 * t304 - t224;
t121 = -pkin(4) * t287 - qJ(5) * t358 + t238 * t225 + qJDD(5) + t156;
t79 = pkin(5) * t305 - pkin(10) * t359 + t219 * t197 + t121;
t350 = t274 * t79;
t349 = t275 * t39;
t348 = t278 * t79;
t347 = t279 * t39;
t343 = t121 * t268;
t342 = t121 * t270;
t127 = -t133 + t232;
t341 = t127 * t274;
t340 = t127 * t278;
t339 = t156 * t275;
t338 = t156 * t279;
t171 = t236 - t333;
t337 = t171 * t268;
t336 = t171 * t270;
t203 = t236 - t331;
t335 = t203 * t275;
t334 = t203 * t279;
t330 = t251 * t274;
t329 = t251 * t278;
t328 = t257 * t268;
t327 = t257 * t270;
t326 = t257 * t275;
t325 = t257 * t279;
t256 = t276 * t282 * t280;
t248 = qJDD(3) + t256;
t324 = t276 * t248;
t247 = -t256 + qJDD(3);
t323 = t280 * t247;
t318 = qJD(4) - t257;
t312 = t280 * t133;
t311 = t280 * t333;
t310 = t280 * t331;
t14 = t27 * t274 + t278 * t28;
t40 = -t268 * t300 + t270 * t63;
t78 = t119 * t275 + t120 * t279;
t185 = t196 * t276 - t224;
t186 = t280 * t196 + t283;
t131 = t185 * t276 + t186 * t280;
t8 = t14 * t268 + t351;
t303 = pkin(4) * t8 + pkin(5) * t13;
t194 = -t216 - t357;
t135 = t194 * t270 + t337;
t302 = pkin(4) * t135 - t346;
t96 = -t166 + t116;
t55 = -t274 * t93 - t278 * t96;
t57 = t274 * t96 - t278 * t93;
t35 = t268 * t57 + t270 * t55;
t301 = pkin(4) * t35 + pkin(5) * t55;
t295 = t119 * t279 - t120 * t275;
t294 = -pkin(2) + t299;
t130 = -t250 - t180;
t90 = t130 * t274 + t368;
t91 = t130 * t278 - t369;
t53 = t268 * t91 + t270 * t90;
t290 = pkin(4) * t53 + pkin(5) * t90 - t27;
t158 = -t181 - t250;
t105 = t158 * t278 + t341;
t106 = -t158 * t274 + t340;
t64 = t105 * t270 + t106 * t268;
t285 = pkin(4) * t64 + pkin(5) * t105 - t28;
t265 = t280 ^ 2;
t264 = t276 ^ 2;
t263 = t265 * t282;
t261 = t264 * t282;
t254 = -t263 - t356;
t253 = -t261 - t356;
t245 = t261 + t263;
t244 = (t264 + t265) * qJDD(2);
t243 = -0.2e1 * t260 + t313;
t240 = 0.2e1 * t309 + t314;
t229 = t280 * t236;
t227 = -t235 + t357;
t226 = -t357 + t358;
t223 = -t253 * t276 - t323;
t222 = t254 * t280 - t324;
t221 = t235 - t358;
t220 = -t235 - t357;
t215 = -t357 - t358;
t202 = t235 + t358;
t199 = -t216 + t357;
t198 = -t357 + t359;
t193 = t237 * t318 + t292;
t191 = t213 + t228;
t189 = -t238 * t318 + t293;
t187 = t216 - t359;
t179 = -t220 * t275 + t334;
t178 = t220 * t279 + t335;
t170 = t215 * t279 - t364;
t169 = t215 * t275 + t363;
t165 = -t181 + t250;
t164 = t180 - t250;
t162 = (t217 * t270 - t219 * t268) * t257;
t161 = (t217 * t268 + t219 * t270) * t257;
t154 = -t216 - t359;
t153 = -t188 * t279 + t192 * t275;
t152 = -t188 * t275 - t192 * t279;
t146 = t305 - t332;
t145 = t175 * t270 + t219 * t328;
t144 = t175 * t268 - t219 * t327;
t143 = -t217 * t327 + t268 * t305;
t142 = -t217 * t328 - t270 * t305;
t141 = t198 * t270 + t337;
t140 = -t199 * t268 + t365;
t139 = t198 * t268 - t336;
t138 = t199 * t270 + t366;
t137 = t179 * t280 - t193 * t276;
t136 = -t194 * t268 + t336;
t134 = t170 * t280 - t189 * t276;
t132 = t181 - t180;
t126 = t177 * t270 - t366;
t124 = t153 * t280 - t202 * t276;
t123 = (t182 * t278 - t184 * t274) * t251;
t122 = (t182 * t274 + t184 * t278) * t251;
t117 = -t180 - t181;
t115 = -qJD(6) * t184 - t306;
t114 = -t147 * t270 + t151 * t268;
t113 = -t146 * t270 - t268 * t360;
t111 = -t146 * t268 + t270 * t360;
t110 = t164 * t278 + t341;
t109 = -t165 * t274 + t368;
t108 = t164 * t274 - t340;
t107 = t165 * t278 + t369;
t102 = -t135 * t275 + t136 * t279;
t101 = t135 * t279 + t136 * t275;
t92 = (qJD(6) - t251) * t184 + t306;
t89 = -qJ(5) * t135 + t342;
t88 = t116 * t278 + t184 * t330;
t87 = t116 * t274 - t184 * t329;
t86 = -t115 * t274 - t182 * t329;
t85 = t115 * t278 - t182 * t330;
t84 = -t125 * t275 + t126 * t279;
t83 = t125 * t279 + t126 * t275;
t82 = -t122 * t268 + t123 * t270;
t81 = t122 * t270 + t123 * t268;
t80 = -qJ(5) * t125 + t343;
t76 = t102 * t280 + t276 * t360;
t75 = -pkin(4) * t360 + qJ(5) * t136 + t343;
t74 = t146 * t276 + t280 * t84;
t73 = -pkin(4) * t146 + qJ(5) * t126 - t342;
t72 = t156 * t276 + t280 * t78;
t71 = -t112 * t275 + t114 * t279;
t70 = t112 * t279 + t114 * t275;
t69 = -t108 * t268 + t110 * t270;
t68 = -t107 * t268 + t109 * t270;
t67 = t108 * t270 + t110 * t268;
t66 = t107 * t270 + t109 * t268;
t65 = -t105 * t268 + t106 * t270;
t60 = t154 * t276 + t280 * t71;
t59 = -pkin(10) * t105 + t348;
t58 = -t274 * t361 - t278 * t92;
t56 = -t274 * t92 + t278 * t361;
t54 = -t268 * t90 + t270 * t91;
t52 = -t268 * t87 + t270 * t88;
t51 = -t268 * t85 + t270 * t86;
t50 = t268 * t88 + t270 * t87;
t49 = t268 * t86 + t270 * t85;
t48 = -pkin(10) * t90 + t350;
t44 = -pkin(5) * t361 + pkin(10) * t106 + t350;
t43 = -pkin(5) * t92 + pkin(10) * t91 - t348;
t42 = -t275 * t64 + t279 * t65;
t41 = t275 * t65 + t279 * t64;
t38 = -t268 * t56 + t270 * t58;
t37 = -t268 * t55 + t270 * t57;
t36 = t268 * t58 + t270 * t56;
t34 = -t275 * t53 + t279 * t54;
t33 = t275 * t54 + t279 * t53;
t32 = -pkin(4) * t121 + qJ(5) * t40;
t31 = t276 * t361 + t280 * t42;
t30 = -qJ(5) * t112 - t39;
t29 = -pkin(4) * t154 + qJ(5) * t114 + t40;
t25 = t276 * t92 + t280 * t34;
t24 = -qJ(5) * t64 - t268 * t44 + t270 * t59;
t23 = -qJ(5) * t53 - t268 * t43 + t270 * t48;
t22 = t279 * t40 - t349;
t21 = t275 * t40 + t347;
t20 = -pkin(4) * t361 + qJ(5) * t65 + t268 * t59 + t270 * t44;
t19 = t121 * t276 + t22 * t280;
t18 = -t275 * t35 + t279 * t37;
t17 = t275 * t37 + t279 * t35;
t16 = -pkin(4) * t92 + qJ(5) * t54 + t268 * t48 + t270 * t43;
t15 = t117 * t276 + t18 * t280;
t12 = -pkin(5) * t79 + pkin(10) * t14;
t11 = -pkin(10) * t55 - t13;
t10 = -pkin(5) * t117 + pkin(10) * t57 + t14;
t9 = t14 * t270 - t352;
t7 = -qJ(5) * t35 - t10 * t268 + t11 * t270;
t6 = -pkin(4) * t117 + qJ(5) * t37 + t10 * t270 + t11 * t268;
t5 = -t275 * t8 + t279 * t9;
t4 = t275 * t9 + t279 * t8;
t3 = -pkin(10) * t351 - qJ(5) * t8 - t12 * t268;
t2 = t276 * t79 + t280 * t5;
t1 = -pkin(4) * t79 - pkin(10) * t352 + qJ(5) * t9 + t12 * t270;
t26 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t322, 0, 0, 0, 0, 0, 0, (qJDD(2) * t281 - t277 * t282) * t269, (-qJDD(2) * t277 - t281 * t282) * t269, 0, t271 ^ 2 * t322 + (t277 * t207 - t281 * t298 - t286) * t269, 0, 0, 0, 0, 0, 0, t271 * (t248 * t280 + t254 * t276) + (t222 * t277 + t243 * t281) * t269, t271 * (-t247 * t276 + t253 * t280) + (t223 * t277 - t240 * t281) * t269, (t244 * t277 + t245 * t281) * t269, t271 * (-t185 * t280 + t186 * t276) + (t131 * t277 - t195 * t281) * t269, 0, 0, 0, 0, 0, 0, t271 * (t170 * t276 + t189 * t280) + (t134 * t277 - t169 * t281) * t269, t271 * (t179 * t276 + t193 * t280) + (t137 * t277 - t178 * t281) * t269, t271 * (t153 * t276 + t202 * t280) + (t124 * t277 - t152 * t281) * t269, t271 * (-t156 * t280 + t276 * t78) + (t277 * t72 + t281 * t295) * t269, 0, 0, 0, 0, 0, 0, t271 * (-t146 * t280 + t276 * t84) + (t277 * t74 - t281 * t83) * t269, t271 * (t102 * t276 - t280 * t360) + (-t101 * t281 + t277 * t76) * t269, t271 * (-t154 * t280 + t276 * t71) + (t277 * t60 - t281 * t70) * t269, t271 * (-t121 * t280 + t22 * t276) + (t19 * t277 - t21 * t281) * t269, 0, 0, 0, 0, 0, 0, t271 * (t276 * t34 - t280 * t92) + (t25 * t277 - t281 * t33) * t269, t271 * (t276 * t42 - t280 * t361) + (t277 * t31 - t281 * t41) * t269, t271 * (-t117 * t280 + t18 * t276) + (t15 * t277 - t17 * t281) * t269, t271 * (t276 * t5 - t280 * t79) + (t2 * t277 - t281 * t4) * t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t298, -t207, 0, 0, t297 * t276, t240 * t280 + t243 * t276, t324 + t280 * (-t261 + t356), -t296 * t280, t276 * (t263 - t356) + t323, 0, pkin(2) * t243 + pkin(8) * t222 - t195 * t280, -pkin(2) * t240 + pkin(8) * t223 + t195 * t276, pkin(2) * t245 + pkin(8) * t244 + t131, -pkin(2) * t195 + pkin(8) * t131, t276 * (t213 * t279 + t238 * t326) - t310, t276 * (t189 * t279 - t191 * t275) - t280 * t221, t276 * (-t227 * t275 + t363) - t280 * t192, t276 * (-t237 * t325 - t275 * t287) + t310, t276 * (t226 * t279 + t335) + t280 * t188, t229 + t276 * (t237 * t279 - t238 * t275) * t257, t276 * (-pkin(9) * t169 + t339) + t280 * (-pkin(3) * t169 + t119) - pkin(2) * t169 + pkin(8) * t134, t276 * (-pkin(9) * t178 + t338) + t280 * (-pkin(3) * t178 + t120) - pkin(2) * t178 + pkin(8) * t137, pkin(8) * t124 + t152 * t294 + t276 * t295, pkin(8) * t72 - t294 * t295, t276 * (-t144 * t275 + t145 * t279) - t311, t276 * (-t111 * t275 + t113 * t279) - t280 * t187, t276 * (-t138 * t275 + t140 * t279) - t280 * t151, t276 * (-t142 * t275 + t143 * t279) + t311, t276 * (-t139 * t275 + t141 * t279) + t280 * t147, t276 * (-t161 * t275 + t162 * t279) + t229, t276 * (-pkin(9) * t83 - t275 * t73 + t279 * t80) + t280 * (-pkin(3) * t83 - t370) - pkin(2) * t83 + pkin(8) * t74, t276 * (-pkin(9) * t101 - t275 * t75 + t279 * t89) + t280 * (-pkin(3) * t101 + t211 - t302) - pkin(2) * t101 + pkin(8) * t76, t276 * (-pkin(9) * t70 - t275 * t29 + t279 * t30) + t280 * (-pkin(3) * t70 - t354) - pkin(2) * t70 + pkin(8) * t60, t276 * (-pkin(9) * t21 - qJ(5) * t347 - t275 * t32) + t280 * (-pkin(3) * t21 - t355) - pkin(2) * t21 + pkin(8) * t19, t276 * (-t275 * t50 + t279 * t52) - t312, t276 * (-t275 * t36 + t279 * t38) - t280 * t132, t276 * (-t275 * t66 + t279 * t68) - t280 * t96, t276 * (-t275 * t49 + t279 * t51) + t312, t276 * (-t275 * t67 + t279 * t69) + t280 * t93, t276 * (-t275 * t81 + t279 * t82) + t280 * t232, t276 * (-pkin(9) * t33 - t16 * t275 + t23 * t279) + t280 * (-pkin(3) * t33 - t290) - pkin(2) * t33 + pkin(8) * t25, t276 * (-pkin(9) * t41 - t20 * t275 + t24 * t279) + t280 * (-pkin(3) * t41 - t285) - pkin(2) * t41 + pkin(8) * t31, t276 * (-pkin(9) * t17 - t275 * t6 + t279 * t7) + t280 * (-pkin(3) * t17 - t301) - pkin(2) * t17 + pkin(8) * t15, t276 * (-pkin(9) * t4 - t1 * t275 + t279 * t3) + t280 * (-pkin(3) * t4 - t303) - pkin(2) * t4 + pkin(8) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, t261 - t263, t314, t256, t313, qJDD(3), -t185, -t186, 0, 0, t213 * t275 - t238 * t325, t189 * t275 + t191 * t279, t227 * t279 + t364, -t237 * t326 + t279 * t287, t226 * t275 - t334, (t237 * t275 + t238 * t279) * t257, pkin(3) * t189 + pkin(9) * t170 - t338, pkin(3) * t193 + pkin(9) * t179 + t339, pkin(3) * t202 + pkin(9) * t153 + t78, -pkin(3) * t156 + pkin(9) * t78, t144 * t279 + t145 * t275, t111 * t279 + t113 * t275, t138 * t279 + t140 * t275, t142 * t279 + t143 * t275, t139 * t279 + t141 * t275, t161 * t279 + t162 * t275, -pkin(3) * t146 + pkin(9) * t84 + t275 * t80 + t279 * t73, -pkin(3) * t360 + pkin(9) * t102 + t275 * t89 + t279 * t75, -pkin(3) * t154 + pkin(9) * t71 + t275 * t30 + t279 * t29, -pkin(3) * t121 + pkin(9) * t22 - qJ(5) * t349 + t279 * t32, t275 * t52 + t279 * t50, t275 * t38 + t279 * t36, t275 * t68 + t279 * t66, t275 * t51 + t279 * t49, t275 * t69 + t279 * t67, t275 * t82 + t279 * t81, -pkin(3) * t92 + pkin(9) * t34 + t16 * t279 + t23 * t275, -pkin(3) * t361 + pkin(9) * t42 + t20 * t279 + t24 * t275, -pkin(3) * t117 + pkin(9) * t18 + t275 * t7 + t279 * t6, -pkin(3) * t79 + pkin(9) * t5 + t1 * t279 + t275 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t331, t221, t192, -t331, -t188, -t236, -t119, -t120, 0, 0, t333, t187, t151, -t333, -t147, -t236, t370, t302 + 0.2e1 * t320, t354, t355, t133, t132, t96, -t133, -t93, -t232, t290, t285, t301, t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, t360, t154, t121, 0, 0, 0, 0, 0, 0, t92, t361, t117, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, t132, t96, -t133, -t93, -t232, -t27, -t28, 0, 0;];
tauJ_reg  = t26;
