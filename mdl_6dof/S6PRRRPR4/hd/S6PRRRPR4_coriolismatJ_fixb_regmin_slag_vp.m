% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRRPR4_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR4_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR4_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR4_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:20:32
% EndTime: 2019-03-08 23:21:06
% DurationCPUTime: 20.84s
% Computational Cost: add. (11188->676), mult. (27165->969), div. (0->0), fcn. (30874->12), ass. (0->517)
t864 = qJD(4) + qJD(6);
t511 = cos(qJ(3));
t781 = t511 / 0.2e1;
t506 = sin(qJ(4));
t772 = -qJ(5) - pkin(9);
t461 = t772 * t506;
t510 = cos(qJ(4));
t462 = t772 * t510;
t502 = sin(pkin(12));
t504 = cos(pkin(12));
t367 = t502 * t461 - t504 * t462;
t595 = t502 * t506 - t504 * t510;
t310 = pkin(10) * t595 - t367;
t505 = sin(qJ(6));
t509 = cos(qJ(6));
t436 = t502 * t510 + t504 * t506;
t818 = t504 * t461 + t502 * t462;
t838 = -pkin(10) * t436 + t818;
t868 = t509 * t310 - t505 * t838;
t875 = t781 * t868;
t507 = sin(qJ(3));
t730 = t507 * t510;
t732 = t506 * t507;
t414 = -t502 * t730 - t504 * t732;
t416 = -t502 * t732 + t504 * t730;
t300 = -t509 * t414 + t505 * t416;
t334 = t505 * t436 + t509 * t595;
t597 = t505 * t310 + t509 * t838;
t782 = -t511 / 0.2e1;
t493 = -pkin(4) * t510 - pkin(3);
t403 = pkin(5) * t595 + t493;
t799 = -t403 / 0.2e1;
t453 = pkin(4) * t732 + t507 * pkin(8);
t344 = -pkin(5) * t414 + t453;
t805 = -t344 / 0.2e1;
t533 = t300 * t799 + t334 * t805 - t597 * t782;
t874 = t864 * t868;
t873 = t864 * t597;
t503 = sin(pkin(6));
t512 = cos(qJ(2));
t756 = t503 * t512;
t659 = t510 * t756;
t768 = cos(pkin(6));
t631 = t768 * t507;
t508 = sin(qJ(2));
t757 = t503 * t508;
t662 = t511 * t757;
t429 = t631 + t662;
t759 = t429 * t506;
t358 = t659 + t759;
t661 = t506 * t756;
t758 = t429 * t510;
t359 = -t661 + t758;
t232 = t358 * t502 - t359 * t504;
t630 = -t504 * t358 - t359 * t502;
t53 = -t505 * t232 - t509 * t630;
t872 = t53 * t782;
t428 = t507 * t757 - t511 * t768;
t297 = t436 * t428;
t715 = t509 * t297;
t298 = t595 * t428;
t740 = t505 * t298;
t560 = -t740 / 0.2e1 + t715 / 0.2e1;
t596 = t509 * t436 - t505 * t595;
t824 = t428 * t596;
t832 = t824 / 0.2e1 + t560;
t858 = t509 * t232 - t505 * t630;
t870 = qJD(3) * t832 + t858 * t864;
t714 = t509 * t298;
t741 = t505 * t297;
t561 = -t741 / 0.2e1 - t714 / 0.2e1;
t842 = t428 * t334;
t852 = -t842 / 0.2e1 + t561;
t869 = qJD(3) * t852 + t53 * t864;
t783 = -t507 / 0.2e1;
t620 = -pkin(3) * t511 - pkin(9) * t507;
t460 = -pkin(2) + t620;
t438 = t510 * t460;
t619 = -qJ(5) * t730 + t438;
t779 = pkin(8) * t506;
t343 = (-pkin(4) - t779) * t511 + t619;
t707 = t510 * t511;
t666 = pkin(8) * t707;
t402 = t460 * t506 + t666;
t362 = -qJ(5) * t732 + t402;
t755 = t504 * t362;
t216 = t502 * t343 + t755;
t731 = t506 * t511;
t669 = pkin(8) * t731;
t361 = t619 - t669;
t241 = -t361 * t502 - t755;
t821 = t216 + t241;
t851 = t842 / 0.2e1 + t561;
t867 = qJD(1) * t851;
t866 = qJD(3) * t851;
t833 = -t824 / 0.2e1 + t560;
t857 = qJD(1) * t833;
t397 = t509 * t416;
t735 = t505 * t414;
t819 = t397 + t735;
t830 = t300 ^ 2 - t819 ^ 2;
t856 = qJD(2) * t830;
t831 = t334 ^ 2 - t596 ^ 2;
t855 = qJD(3) * t831;
t853 = qJD(3) * t833;
t850 = -t232 / 0.2e1;
t849 = -t818 / 0.2e1;
t848 = t300 * t334;
t847 = t300 * t344;
t671 = t511 * qJD(2);
t846 = t300 * t671;
t690 = qJD(2) * t819;
t845 = t300 * t690;
t686 = qJD(3) * t596;
t844 = t334 * t686;
t843 = t344 * t819;
t794 = -t428 / 0.2e1;
t839 = t794 * t819;
t278 = t819 * t671;
t701 = t864 * t334;
t581 = t686 + t690;
t837 = qJD(4) * t300;
t836 = qJD(5) * t300;
t835 = qJD(5) * t334;
t834 = qJD(6) * t300;
t828 = -qJD(2) * t300 - qJD(3) * t334;
t812 = -t630 / 0.2e1;
t826 = t630 / 0.2e1;
t825 = t819 * t596;
t817 = qJD(5) * t596;
t418 = -t502 * t731 + t504 * t707;
t709 = t509 * t418;
t415 = t436 * t511;
t734 = t505 * t415;
t700 = -t734 / 0.2e1 + t709 / 0.2e1;
t498 = t506 ^ 2;
t500 = t510 ^ 2;
t477 = t500 - t498;
t673 = t507 * qJD(2);
t657 = t510 * t673;
t816 = qJD(3) * t477 - 0.2e1 * t506 * t657;
t579 = t864 * t596;
t348 = t502 * t362;
t215 = t504 * t343 - t348;
t815 = t215 / 0.2e1;
t814 = t216 / 0.2e1;
t242 = t504 * t361 - t348;
t810 = -t242 / 0.2e1;
t809 = t819 / 0.2e1;
t808 = -t334 / 0.2e1;
t807 = -t596 / 0.2e1;
t806 = t596 / 0.2e1;
t804 = t367 / 0.2e1;
t802 = t818 / 0.2e1;
t800 = -t367 / 0.2e1;
t641 = t397 / 0.2e1;
t775 = t506 * pkin(4);
t408 = pkin(5) * t436 + t775;
t798 = -t408 / 0.2e1;
t797 = -t414 / 0.2e1;
t796 = t414 / 0.2e1;
t795 = -t416 / 0.2e1;
t793 = t428 / 0.2e1;
t792 = t429 / 0.2e1;
t791 = t595 / 0.2e1;
t790 = -t595 / 0.2e1;
t789 = -t436 / 0.2e1;
t788 = t436 / 0.2e1;
t787 = t502 / 0.2e1;
t786 = -t504 / 0.2e1;
t785 = t504 / 0.2e1;
t784 = -t506 / 0.2e1;
t780 = pkin(4) * t502;
t778 = pkin(10) * t414;
t777 = pkin(10) * t416;
t774 = t507 * pkin(3);
t773 = t511 * pkin(9);
t40 = t848 / 0.2e1 + t819 * t807 - t300 * t808 - t825 / 0.2e1;
t64 = -t825 + t848;
t771 = t40 * qJD(4) + t64 * qJD(6);
t85 = -t300 * t806 - t334 * t809;
t86 = t300 * t807 + t808 * t819;
t770 = t85 * qJD(4) + t86 * qJD(6);
t769 = pkin(4) * qJD(4);
t767 = t334 * t511;
t766 = t596 * t511;
t658 = pkin(4) * t504 + pkin(5);
t422 = t505 * t780 - t509 * t658;
t765 = t422 * t511;
t423 = t505 * t658 + t509 * t780;
t764 = t423 * t511;
t315 = t428 * t506;
t141 = -pkin(5) * t511 + t215 - t777;
t753 = t505 * t141;
t464 = -t773 + t774;
t452 = t510 * t464;
t485 = pkin(8) * t732;
t352 = pkin(4) * t507 - qJ(5) * t707 + t452 + t485;
t451 = t506 * t464;
t668 = pkin(8) * t730;
t363 = -qJ(5) * t731 + t451 - t668;
t228 = t504 * t352 - t363 * t502;
t146 = pkin(5) * t507 - pkin(10) * t418 + t228;
t752 = t505 * t146;
t151 = t216 + t778;
t751 = t505 * t151;
t229 = t502 * t352 + t504 * t363;
t152 = -pkin(10) * t415 + t229;
t750 = t505 * t152;
t161 = t241 - t778;
t749 = t505 * t161;
t162 = t242 - t777;
t748 = t505 * t162;
t706 = t511 * t512;
t728 = t508 * t510;
t399 = (-t506 * t706 + t728) * t503;
t729 = t508 * t506;
t400 = (t510 * t706 + t729) * t503;
t272 = t399 * t504 - t400 * t502;
t743 = t505 * t272;
t273 = t399 * t502 + t400 * t504;
t742 = t505 * t273;
t733 = t505 * t418;
t727 = t509 * t141;
t726 = t509 * t146;
t725 = t509 * t151;
t724 = t509 * t152;
t723 = t509 * t161;
t722 = t509 * t162;
t717 = t509 * t272;
t716 = t509 * t273;
t499 = t507 ^ 2;
t708 = t510 * t499;
t660 = t507 * t756;
t60 = -t232 * t273 + t272 * t630 + t428 * t660;
t704 = t60 * qJD(1);
t61 = -t232 * t298 + t297 * t630 + t428 * t429;
t703 = t61 * qJD(1);
t396 = t509 * t415;
t302 = t396 + t733;
t305 = t709 - t734;
t76 = -t300 * t305 - t302 * t819;
t702 = t76 * qJD(2);
t483 = pkin(4) * t731;
t497 = t511 * pkin(8);
t454 = t497 + t483;
t501 = t511 ^ 2;
t478 = t501 - t499;
t125 = t300 * t507 - t302 * t511;
t699 = qJD(2) * t125;
t126 = t305 * t511 - t507 * t819;
t698 = qJD(2) * t126;
t618 = -t396 / 0.2e1 - t733 / 0.2e1;
t648 = t596 * t782;
t163 = t648 - t618;
t697 = qJD(2) * t163;
t164 = t648 + t618;
t696 = qJD(2) * t164;
t165 = -t766 / 0.2e1 + t618;
t695 = qJD(2) * t165;
t166 = -t767 / 0.2e1 + t700;
t694 = qJD(2) * t166;
t647 = t334 * t781;
t168 = -t647 + t700;
t693 = qJD(2) * t168;
t169 = -t647 - t700;
t692 = qJD(2) * t169;
t296 = t641 - t397 / 0.2e1;
t691 = qJD(2) * t296;
t449 = t478 * t506;
t689 = qJD(2) * t449;
t450 = t501 * t510 - t708;
t688 = qJD(2) * t450;
t687 = qJD(2) * t503;
t685 = qJD(3) * t403;
t684 = qJD(3) * t506;
t683 = qJD(3) * t510;
t682 = qJD(4) * t819;
t681 = qJD(4) * t506;
t680 = qJD(4) * t510;
t679 = qJD(4) * t511;
t678 = qJD(5) * t511;
t676 = qJD(6) * t403;
t675 = t429 * qJD(3);
t674 = t478 * qJD(2);
t672 = t507 * qJD(3);
t670 = t511 * qJD(3);
t667 = pkin(4) * t730;
t665 = pkin(2) * t673;
t664 = pkin(2) * t671;
t663 = t775 / 0.2e1;
t656 = t506 * t683;
t655 = t510 * t672;
t654 = t506 * t679;
t653 = t510 * t679;
t652 = t512 * t687;
t651 = t506 * t680;
t650 = t507 * t670;
t649 = t507 * t671;
t646 = -t315 / 0.2e1;
t645 = -t756 / 0.2e1;
t644 = t756 / 0.2e1;
t643 = -t730 / 0.2e1;
t642 = t730 / 0.2e1;
t640 = -t706 / 0.2e1;
t639 = t161 / 0.2e1 + t151 / 0.2e1;
t638 = -t162 / 0.2e1 + t141 / 0.2e1;
t637 = t826 + t812;
t636 = t232 / 0.2e1 + t850;
t633 = t483 / 0.2e1 + t497 / 0.2e1;
t629 = pkin(4) * t642;
t628 = -qJD(4) + t671;
t627 = -qJD(6) + t671;
t626 = t506 * t655;
t624 = t428 * t643;
t623 = t507 * t644;
t622 = t510 * t645;
t621 = t671 - qJD(4) / 0.2e1;
t517 = t228 * t826 + t229 * t850 + t297 * t815 + t298 * t814 + t453 * t792 + t454 * t793;
t523 = t493 * t507 * t645 + t272 * t849 + t273 * t800;
t2 = t517 + t523;
t49 = t215 * t228 + t216 * t229 + t453 * t454;
t617 = t2 * qJD(1) + t49 * qJD(2);
t520 = t215 * t850 - t232 * t810 + t812 * t821;
t569 = t272 * t785 + t273 * t787;
t3 = (t624 + t569) * pkin(4) + t520;
t50 = t215 * t241 + t216 * t242 + t453 * t667;
t616 = -t3 * qJD(1) + t50 * qJD(2);
t615 = t334 * t623;
t614 = t596 * t623;
t345 = pkin(5) * t415 + t454;
t66 = -t727 + t751;
t13 = (t726 - t750) * t511 + t66 * t507 - t345 * t300 - t344 * t302;
t516 = t302 * t793 + t300 * t792 + t53 * t783 + (t715 - t740) * t782;
t23 = t615 - t516;
t613 = -t23 * qJD(1) - t13 * qJD(2);
t67 = t725 + t753;
t14 = (t724 + t752) * t511 - t67 * t507 + t345 * t819 + t344 * t305;
t515 = t305 * t793 + t819 * t792 - t858 * t783 + (t714 + t741) * t781;
t24 = t614 - t515;
t612 = -t24 * qJD(1) + t14 * qJD(2);
t518 = t297 * t795 + t298 * t796 - t415 * t850 + t418 * t812;
t570 = t272 * t788 + t273 * t791;
t18 = t518 + t570;
t31 = -t215 * t418 - t216 * t415 - t228 * t416 + t229 * t414;
t611 = t18 * qJD(1) + t31 * qJD(2);
t33 = t414 * t637 + t416 * t636;
t34 = -t821 * t416 + (-t215 + t242) * t414;
t610 = t33 * qJD(1) + t34 * qJD(2);
t577 = pkin(5) * t416 + t667;
t79 = t723 - t748;
t35 = -t300 * t577 + t79 * t511 - t843;
t527 = t781 * t858 + t839;
t562 = -t742 / 0.2e1 + t717 / 0.2e1;
t41 = t527 + t562;
t609 = -qJD(1) * t41 - qJD(2) * t35;
t80 = t722 + t749;
t36 = t80 * t511 + t577 * t819 - t847;
t525 = -t300 * t794 - t872;
t563 = -t743 / 0.2e1 - t716 / 0.2e1;
t44 = t525 + t563;
t608 = -qJD(1) * t44 + qJD(2) * t36;
t524 = -t782 * t858 + t839;
t42 = t524 + t562;
t58 = -t511 * t67 - t843;
t607 = qJD(1) * t42 + qJD(2) * t58;
t526 = t300 * t793 - t872;
t43 = t526 + t563;
t57 = -t511 * t66 - t847;
t606 = qJD(1) * t43 - qJD(2) * t57;
t572 = -t232 * t796 + t630 * t795;
t73 = t623 - t572;
t81 = -t215 * t416 + t216 * t414;
t605 = -qJD(1) * t73 + qJD(2) * t81;
t38 = t436 * t636 - t595 * t637;
t604 = qJD(2) * t33 + qJD(3) * t38;
t603 = qJD(3) * t40 + t856;
t594 = qJD(2) * t40 + t855;
t593 = qJD(3) * t64 + t856;
t592 = qJD(2) * t64 + t855;
t591 = t628 * t507;
t112 = (t506 * t644 + t359 / 0.2e1 - t758 / 0.2e1) * t507;
t254 = t451 * t511 + (-t402 + t666) * t507;
t590 = -t112 * qJD(1) + t254 * qJD(2);
t113 = (t622 + t358 / 0.2e1 - t759 / 0.2e1) * t507;
t401 = -t438 + t669;
t253 = t401 * t507 + (-t485 + t452) * t511;
t589 = -t113 * qJD(1) - t253 * qJD(2);
t538 = (t506 * t640 + t728 / 0.2e1) * t503;
t549 = t359 * t782 + t624;
t196 = t538 + t549;
t347 = -pkin(8) * t708 - t402 * t511;
t588 = qJD(1) * t196 + qJD(2) * t347;
t537 = (t510 * t640 - t729 / 0.2e1) * t503;
t550 = t358 * t782 + t507 * t646;
t197 = t537 - t550;
t346 = -t401 * t511 - t499 * t779;
t587 = qJD(1) * t197 - qJD(2) * t346;
t223 = 0.2e1 * t641 + t735;
t585 = qJD(2) * t223 + t686;
t236 = -t414 * t595 + t416 * t436;
t318 = t414 ^ 2 + t416 ^ 2;
t584 = qJD(2) * t318 + qJD(3) * t236;
t360 = t436 ^ 2 + t595 ^ 2;
t583 = qJD(2) * t236 + qJD(3) * t360;
t567 = t414 * t787 + t416 * t786;
t258 = (t643 + t567) * pkin(4);
t566 = t436 * t786 - t595 * t787;
t309 = (t784 + t566) * pkin(4);
t582 = qJD(2) * t258 + qJD(3) * t309;
t578 = t834 + t837;
t576 = t773 / 0.2e1 - t774 / 0.2e1;
t552 = t576 * t506;
t356 = t451 / 0.2e1 - t552;
t575 = pkin(3) * t683 - qJD(2) * t356;
t551 = t576 * t510;
t357 = -t452 / 0.2e1 + t551;
t574 = pkin(3) * t684 - qJD(2) * t357;
t573 = t228 * t785 + t229 * t787;
t571 = -t232 * t790 + t630 * t789;
t568 = t297 * t785 + t298 * t787;
t565 = -t752 / 0.2e1 - t724 / 0.2e1;
t564 = -t750 / 0.2e1 + t726 / 0.2e1;
t559 = -qJD(3) * t86 + t845;
t558 = qJD(3) * t85 - t845;
t557 = -qJD(2) * t86 + t844;
t556 = qJD(2) * t85 - t844;
t555 = t510 * t591;
t430 = (t498 / 0.2e1 - t500 / 0.2e1) * t507;
t554 = -qJD(2) * t430 + t656;
t553 = qJD(3) * t164 - qJD(6) * t296 - t278;
t548 = qJD(2) * t506 * t708 + qJD(3) * t430;
t448 = t477 * t499;
t547 = qJD(2) * t448 + 0.2e1 * t626;
t545 = (-t415 * t787 + t418 * t786) * pkin(4);
t9 = (t814 + t241 / 0.2e1) * t436 - (t810 + t815) * t595 + (t849 + t802) * t414 + t545;
t544 = t38 * qJD(1) - t9 * qJD(2);
t116 = t334 * t408 + t403 * t596;
t514 = t300 * t798 + t577 * t808 + t596 * t805 + t799 * t819 + t875;
t531 = t422 * t783 + t564;
t5 = t514 + t531;
t543 = -t5 * qJD(2) + t116 * qJD(3) - t857;
t117 = -t334 * t403 + t408 * t596;
t513 = t577 * t807 + t798 * t819 - t533;
t530 = t423 * t783 + t565;
t6 = t513 + t530;
t542 = -t6 * qJD(2) + t117 * qJD(3) - t867;
t109 = t493 * t775;
t522 = t215 * t804 + t242 * t800 + t821 * t849;
t11 = (t453 * t784 + t493 * t643 + t573) * pkin(4) + t522;
t519 = (t800 + t804) * t630;
t15 = (t646 + t568) * pkin(4) + t519;
t541 = -t15 * qJD(1) - t11 * qJD(2) + t109 * qJD(3);
t175 = -t367 * t595 - t436 * t818;
t521 = t215 * t788 + t216 * t791 + t367 * t797 + t416 * t802;
t55 = t521 + t633;
t539 = t631 / 0.2e1 + t662 / 0.2e1;
t77 = t539 - t571;
t540 = -qJD(1) * t77 - qJD(2) * t55 + qJD(3) * t175;
t532 = t344 * t806 + t403 * t809 - t875;
t19 = -t532 + t564;
t536 = qJD(2) * t19 - t596 * t685 + t857;
t20 = -t533 + t565;
t535 = qJD(2) * t20 + t334 * t685 + t867;
t534 = qJD(3) * t163 + qJD(6) * t223 - t278 + t682;
t27 = -t764 / 0.2e1 + t639 * t509 + t638 * t505;
t51 = -t505 * t637 - t509 * t636;
t529 = qJD(1) * t51 + qJD(2) * t27 + qJD(4) * t423;
t28 = t765 / 0.2e1 + t638 * t509 - t639 * t505;
t52 = -t505 * t636 + t509 * t637;
t528 = -qJD(1) * t52 + qJD(2) * t28 - qJD(4) * t422;
t491 = -t673 / 0.2e1;
t490 = t673 / 0.2e1;
t489 = t672 / 0.2e1;
t434 = t621 * t507;
t427 = t430 * qJD(4);
t413 = (-qJD(6) / 0.2e1 + t621) * t507;
t410 = t423 * qJD(6);
t409 = t422 * qJD(6);
t328 = t485 + t452 / 0.2e1 + t551;
t327 = t668 - t451 / 0.2e1 - t552;
t317 = t428 * t510;
t308 = pkin(4) * t566 + t663;
t257 = pkin(4) * t567 + t629;
t221 = t236 * qJD(5);
t199 = t538 - t549;
t198 = t537 + t550;
t170 = t766 / 0.2e1 + t618;
t167 = t767 / 0.2e1 + t700;
t115 = t359 * t783 + t429 * t642 + t506 * t623;
t114 = t358 * t783 + t507 * t622 + t732 * t792;
t78 = t539 + t571;
t74 = t623 + t572;
t72 = qJD(3) * t168 - t846;
t62 = -t169 * qJD(3) + t300 * t628 - t834;
t56 = -t521 + t633;
t48 = -t524 + t562;
t47 = -t525 + t563;
t46 = -t526 + t563;
t45 = -t527 + t562;
t37 = t38 * qJD(4);
t32 = t33 * qJD(4);
t30 = t764 / 0.2e1 - t725 / 0.2e1 - t753 / 0.2e1 - t748 / 0.2e1 + t723 / 0.2e1;
t29 = -t765 / 0.2e1 + t751 / 0.2e1 - t727 / 0.2e1 - t722 / 0.2e1 - t749 / 0.2e1;
t26 = t614 + t515;
t25 = t615 + t516;
t22 = t532 + t564;
t21 = t533 + t565;
t17 = t518 - t570;
t16 = pkin(4) * t568 + t428 * t663 - t519;
t12 = pkin(4) * t573 + t453 * t663 + t493 * t629 - t522;
t10 = t215 * t791 + t242 * t790 + t789 * t821 + t545 + (t796 + t797) * t818;
t8 = -t513 + t530;
t7 = -t514 + t531;
t4 = pkin(4) * t569 + t428 * t629 - t520;
t1 = t517 - t523;
t39 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t60 + qJD(3) * t61, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t508 * t687, -t652, 0, 0, 0, 0, 0 (-t508 * t671 - t512 * t672) * t503 (t508 * t673 - t512 * t670) * t503, 0, 0, 0, 0, 0 (-t399 * t511 + t499 * t661) * qJD(2) + t114 * qJD(3) + t199 * qJD(4) (t400 * t511 + t499 * t659) * qJD(2) + t115 * qJD(3) + t198 * qJD(4) (-t272 * t416 + t273 * t414) * qJD(2) + t17 * qJD(3) + t32, t704 + (t272 * t215 + t273 * t216 + t453 * t660) * qJD(2) + t1 * qJD(3) + t4 * qJD(4) + t74 * qJD(5), 0, 0, 0, 0, 0 (-(t717 - t742) * t511 + t300 * t660) * qJD(2) + t25 * qJD(3) + t45 * qJD(4) + t48 * qJD(6) ((t716 + t743) * t511 + t819 * t660) * qJD(2) + t26 * qJD(3) + t47 * qJD(4) + t46 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t507 * t652 - t675, t428 * qJD(3) - t511 * t652, 0, 0, 0, 0, 0, qJD(2) * t114 + qJD(4) * t315 - t510 * t675, qJD(2) * t115 + qJD(4) * t317 + t506 * t675, t17 * qJD(2) + (-t297 * t436 - t298 * t595) * qJD(3) + t37, t703 + t1 * qJD(2) + (t297 * t818 + t298 * t367 + t429 * t493) * qJD(3) + t16 * qJD(4) + t78 * qJD(5), 0, 0, 0, 0, 0, qJD(2) * t25 + t334 * t675 + t832 * t864, qJD(2) * t26 + t596 * t675 + t852 * t864; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t199 + qJD(3) * t315 - qJD(4) * t359, qJD(2) * t198 + qJD(3) * t317 + qJD(4) * t358, t604, t4 * qJD(2) + t16 * qJD(3) + (t232 * t504 + t502 * t630) * t769, 0, 0, 0, 0, 0, t45 * qJD(2) + t870, t47 * qJD(2) + t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t74 + qJD(3) * t78, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 * qJD(2) + t870, t46 * qJD(2) + t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t113 - qJD(4) * t196, -qJD(3) * t112 - qJD(4) * t197, qJD(3) * t18 + t32, qJD(3) * t2 - qJD(4) * t3 - qJD(5) * t73 - t704, 0, 0, 0, 0, 0, -qJD(3) * t23 - qJD(4) * t41 - qJD(6) * t42, -qJD(3) * t24 - qJD(4) * t44 - qJD(6) * t43; 0, 0, 0, 0, t650, t478 * qJD(3), 0, 0, 0, -pkin(2) * t672, -pkin(2) * t670, -t499 * t651 + t500 * t650, -qJD(4) * t448 - 0.2e1 * t511 * t626, -qJD(3) * t450 + t507 * t654, qJD(3) * t449 + t507 * t653, -t650, -qJD(3) * t253 - qJD(4) * t347, qJD(3) * t254 + qJD(4) * t346, qJD(3) * t31 + qJD(4) * t34 + qJD(5) * t318, qJD(3) * t49 + qJD(4) * t50 + qJD(5) * t81 (qJD(3) * t305 - t578) * t819, qJD(3) * t76 + t830 * t864, -t126 * qJD(3) + t511 * t578, -t125 * qJD(3) + (qJD(6) * t819 + t682) * t511, -t650, -qJD(3) * t13 - qJD(4) * t35 - qJD(6) * t58 + t678 * t819, qJD(3) * t14 + qJD(4) * t36 + qJD(6) * t57 - t300 * t678; 0, 0, 0, 0, t649, t674, t670, -t672, 0, -pkin(8) * t670 - t665, pkin(8) * t672 - t664, -t427 + (t500 * t673 + t656) * t511, -0.2e1 * t507 * t651 + t511 * t816, t506 * t672 - t688, t655 + t689, -t434 (t506 * t620 - t666) * qJD(3) + t328 * qJD(4) + t589 (t510 * t620 + t669) * qJD(3) + t327 * qJD(4) + t590 (-t228 * t436 - t229 * t595 - t367 * t415 - t418 * t818) * qJD(3) + t10 * qJD(4) + t221 + t611 (t228 * t818 + t229 * t367 + t454 * t493) * qJD(3) + t12 * qJD(4) + t56 * qJD(5) + t617, t305 * t581 + t770, t702 + (-t302 * t596 - t305 * t334) * qJD(3) + t771, -qJD(4) * t169 + qJD(6) * t167 + t596 * t672 - t698, -qJD(4) * t163 + qJD(6) * t170 - t334 * t672 - t699, -t413 (t302 * t403 + t334 * t345 + t507 * t597) * qJD(3) + t7 * qJD(4) - t164 * qJD(5) + t22 * qJD(6) + t613 (t305 * t403 + t345 * t596 + t507 * t868) * qJD(3) + t8 * qJD(4) + t168 * qJD(5) + t21 * qJD(6) + t612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t548, -t547, t506 * t591, t555, t489, qJD(3) * t328 - qJD(4) * t402 - t588, qJD(3) * t327 + qJD(4) * t401 - t587, t10 * qJD(3) + (-t414 * t504 - t416 * t502) * t769 + t610, t12 * qJD(3) + t257 * qJD(5) + (t241 * t504 + t242 * t502) * t769 + t616, t558, t603, t62, -t534, t489, qJD(3) * t7 + qJD(4) * t79 + qJD(6) * t30 + t609, qJD(3) * t8 - qJD(4) * t80 + qJD(6) * t29 + t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t584, qJD(3) * t56 + qJD(4) * t257 + t605, 0, 0, 0, 0, 0, -t553, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t559, t593, t167 * qJD(3) + t300 * t627 - t837, t170 * qJD(3) - t223 * qJD(4) + t627 * t819, t489, qJD(3) * t22 + qJD(4) * t30 + qJD(5) * t296 - qJD(6) * t67 - t607, qJD(3) * t21 + qJD(4) * t29 + qJD(6) * t66 - t606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t113, qJD(2) * t112, -qJD(2) * t18 + t37, -qJD(2) * t2 - qJD(4) * t15 - qJD(5) * t77 - t703, 0, 0, 0, 0, 0, qJD(2) * t23 - t833 * t864, qJD(2) * t24 - t851 * t864; 0, 0, 0, 0, -t649, -t674, 0, 0, 0, t665, t664, -t500 * t649 - t427, 0.2e1 * t506 * t555, -t653 + t688, t654 - t689, t434, qJD(4) * t357 - t589, qJD(4) * t356 - t590, -qJD(4) * t9 + t221 - t611, -qJD(4) * t11 - qJD(5) * t55 - t617, -t305 * t690 + t770, -t702 + t771, -qJD(4) * t168 - qJD(6) * t166 + t698, -qJD(4) * t164 - qJD(6) * t165 + t699, t413, -qJD(4) * t5 - qJD(5) * t163 - qJD(6) * t19 - t613, -qJD(4) * t6 + qJD(5) * t169 - qJD(6) * t20 - t612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t651, t477 * qJD(4), 0, 0, 0, -pkin(3) * t681, -pkin(3) * t680, qJD(5) * t360, qJD(4) * t109 + qJD(5) * t175, -t701 * t596, t864 * t831, 0, 0, 0, qJD(4) * t116 + t596 * t676, qJD(4) * t117 - t334 * t676; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, t816, -t628 * t510, t628 * t506, t491, -pkin(9) * t680 - t574, pkin(9) * t681 - t575 (-t436 * t502 + t504 * t595) * t769 + t544, t308 * qJD(5) + (-t367 * t504 + t502 * t818) * t769 + t541, t556, t594, -t693 - t701, -t579 - t696, t491, t543 + t874, t542 - t873; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t583, qJD(4) * t308 + t540, 0, 0, 0, 0, 0, -t697, t692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t557, t592, -t694 - t701, -t579 - t695, t491, -t536 + t874, -t535 - t873; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t196, qJD(2) * t197, -t604, qJD(2) * t3 + qJD(3) * t15, 0, 0, 0, 0, 0, qJD(2) * t41 - qJD(6) * t51 + t853, qJD(2) * t44 + qJD(6) * t52 + t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t548, t547 (-t506 * t673 + t683) * t511 (-t657 - t684) * t511, t489, -qJD(3) * t357 + t588, -qJD(3) * t356 + t587, qJD(3) * t9 - t610, qJD(3) * t11 + qJD(5) * t258 - t616, -t558, -t603, t72, t553, t489, qJD(3) * t5 - qJD(5) * t819 - qJD(6) * t27 - t609, qJD(3) * t6 - qJD(6) * t28 - t608 + t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t554, -t816, t510 * t671, -t506 * t671, t490, t574, t575, -t544, qJD(5) * t309 - t541, -t556, -t594, t693, t696, t490, -t543 - t817, -t542 + t835; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t410, t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t582, 0, 0, 0, 0, 0, -t581, -t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t691, 0, -t410 - t529, t409 - t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t73 + qJD(3) * t77, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t584, qJD(3) * t55 - qJD(4) * t258 - t605, 0, 0, 0, 0, 0, t534, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t583, -qJD(4) * t309 - t540, 0, 0, 0, 0, 0, t579 + t697, -t692 - t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t582, 0, 0, 0, 0, 0, t581, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t42 + qJD(4) * t51 + t853, qJD(2) * t43 - qJD(4) * t52 + t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t559, -t593, qJD(3) * t166 - t846, qJD(3) * t165 + qJD(4) * t296 - t278, t489, qJD(3) * t19 + qJD(4) * t27 - qJD(5) * t223 + t607, qJD(3) * t20 + qJD(4) * t28 + t606 + t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t557, -t592, t694, t695, t490, t536 - t817, t535 + t835; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t691, 0, t529, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, -t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t39;
