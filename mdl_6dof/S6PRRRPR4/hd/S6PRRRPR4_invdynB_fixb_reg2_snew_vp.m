% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 07:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:46:55
% EndTime: 2019-05-05 07:47:47
% DurationCPUTime: 47.68s
% Computational Cost: add. (425025->1015), mult. (862627->1654), div. (0->0), fcn. (644738->14), ass. (0->727)
t1005 = cos(pkin(6));
t1002 = sin(pkin(6));
t1143 = g(3) - qJDD(1);
t1093 = t1002 * t1143;
t1001 = sin(pkin(11));
t1004 = cos(pkin(11));
t1094 = g(1) * t1001 - t1004 * g(2);
t1166 = t1005 * t1094 - t1093;
t1000 = sin(pkin(12));
t1003 = cos(pkin(12));
t1009 = sin(qJ(4));
t1013 = cos(qJ(4));
t1014 = cos(qJ(3));
t1107 = qJD(2) * t1014;
t1095 = qJD(3) * t1107;
t1010 = sin(qJ(3));
t1105 = qJDD(2) * t1010;
t966 = t1095 + t1105;
t1045 = t1013 * qJDD(3) - t1009 * t966;
t1108 = qJD(2) * t1010;
t963 = qJD(3) * t1009 + t1013 * t1108;
t1019 = qJD(4) * t963 - t1045;
t962 = -t1013 * qJD(3) + t1009 * t1108;
t904 = -t962 * qJD(4) + t1009 * qJDD(3) + t1013 * t966;
t832 = -t1000 * t1019 + t1003 * t904;
t914 = t1000 * t963 + t1003 * t962;
t987 = -qJD(4) + t1107;
t888 = t914 * t987;
t789 = t888 - t832;
t1165 = t888 + t832;
t943 = t962 * t987;
t874 = t943 - t904;
t872 = t943 + t904;
t1011 = sin(qJ(2));
t1015 = cos(qJ(2));
t974 = g(1) * t1004 + g(2) * t1001;
t893 = -t1011 * t974 - t1015 * t1166;
t894 = t1011 * t1166 - t1015 * t974;
t819 = t1011 * t893 + t1015 * t894;
t1164 = t819 * t1002;
t1008 = sin(qJ(6));
t1012 = cos(qJ(6));
t1092 = t1000 * t904 + t1003 * t1019;
t916 = -t1000 * t962 + t1003 * t963;
t845 = t1008 * t916 + t1012 * t914;
t1020 = qJD(6) * t845 + t1008 * t1092 - t1012 * t832;
t979 = -qJD(6) + t987;
t822 = t845 * t979;
t1163 = -t1020 + t822;
t1146 = t914 * t916;
t1103 = qJDD(2) * t1014;
t990 = qJD(3) * t1108;
t967 = -t990 + t1103;
t959 = -qJDD(4) + t967;
t1022 = -t959 - t1146;
t1162 = t1000 * t1022;
t1161 = t1001 * t1143;
t1160 = t1003 * t1022;
t1159 = t1004 * t1143;
t847 = -t1008 * t914 + t1012 * t916;
t1147 = t845 * t847;
t952 = -qJDD(6) + t959;
t1018 = -t952 - t1147;
t1158 = t1008 * t1018;
t1144 = t962 * t963;
t1021 = -t959 - t1144;
t1157 = t1009 * t1021;
t956 = t1002 * t1094;
t1083 = t1005 * t1143 + t956;
t1040 = t1011 * t1083;
t1156 = t1012 * t1018;
t1155 = t1013 * t1021;
t1039 = t1015 * t1083;
t923 = -t1001 * t1094 - t1004 * t974;
t869 = (qJD(4) + t987) * t963 - t1045;
t1091 = t1008 * t832 + t1012 * t1092;
t682 = (qJD(6) + t979) * t847 + t1091;
t922 = -t1001 * t974 + t1004 * t1094;
t843 = t845 ^ 2;
t844 = t847 ^ 2;
t1154 = t914 ^ 2;
t911 = t916 ^ 2;
t1153 = t962 ^ 2;
t958 = t963 ^ 2;
t978 = t979 ^ 2;
t1152 = t987 ^ 2;
t1151 = qJD(3) ^ 2;
t1150 = pkin(3) * t1010;
t1149 = pkin(3) * t1014;
t1148 = pkin(7) * t1005;
t1145 = t916 * t987;
t1016 = qJD(2) ^ 2;
t881 = -t1016 * pkin(2) + qJDD(2) * pkin(8) + t894;
t849 = -t1010 * t1083 + t1014 * t881;
t1088 = -pkin(9) * t1010 - t1149;
t964 = t1088 * qJD(2);
t803 = -pkin(3) * t1151 + qJDD(3) * pkin(9) + t1107 * t964 + t849;
t1085 = t966 + t1095;
t1086 = -t967 + t990;
t880 = -qJDD(2) * pkin(2) - t1016 * pkin(8) + t893;
t817 = pkin(3) * t1086 - pkin(9) * t1085 + t880;
t735 = t1009 * t803 - t1013 * t817;
t690 = t1021 * pkin(4) + qJ(5) * t874 - t735;
t736 = t1009 * t817 + t1013 * t803;
t937 = -pkin(4) * t987 - qJ(5) * t963;
t695 = -pkin(4) * t1153 - qJ(5) * t1019 + t987 * t937 + t736;
t609 = 0.2e1 * qJD(5) * t916 + t1000 * t695 - t1003 * t690;
t572 = t1022 * pkin(5) + pkin(10) * t789 - t609;
t610 = -0.2e1 * qJD(5) * t914 + t1000 * t690 + t1003 * t695;
t882 = -pkin(5) * t987 - pkin(10) * t916;
t576 = -pkin(5) * t1154 - pkin(10) * t1092 + t882 * t987 + t610;
t513 = t1008 * t572 + t1012 * t576;
t996 = t1010 ^ 2;
t997 = t1014 ^ 2;
t1142 = t996 + t997;
t512 = t1008 * t576 - t1012 * t572;
t461 = t1008 * t513 - t1012 * t512;
t1141 = t1000 * t461;
t936 = t1014 * t1083;
t802 = -t1151 * pkin(9) + t936 - qJDD(3) * pkin(3) + (qJD(2) * t964 + t881) * t1010;
t737 = t1019 * pkin(4) - t1153 * qJ(5) + t937 * t963 + qJDD(5) + t802;
t1140 = t1000 * t737;
t827 = t959 - t1146;
t1139 = t1000 * t827;
t1138 = t1000 * t987;
t1136 = t1003 * t461;
t1135 = t1003 * t737;
t1134 = t1003 * t827;
t1133 = t1003 * t987;
t655 = pkin(5) * t1092 - pkin(10) * t1154 + t882 * t916 + t737;
t1132 = t1008 * t655;
t751 = t952 - t1147;
t1131 = t1008 * t751;
t1130 = t1008 * t979;
t543 = t1000 * t610 - t1003 * t609;
t1129 = t1009 * t543;
t1128 = t1009 * t802;
t890 = t959 - t1144;
t1127 = t1009 * t890;
t1126 = t1009 * t987;
t1125 = t1010 * t880;
t1124 = t1010 * t959;
t986 = t1010 * t1016 * t1014;
t975 = -t986 + qJDD(3);
t1123 = t1010 * t975;
t976 = qJDD(3) + t986;
t1122 = t1010 * t976;
t1121 = t1012 * t655;
t1120 = t1012 * t751;
t1119 = t1012 * t979;
t1118 = t1013 * t543;
t1117 = t1013 * t802;
t1116 = t1013 * t890;
t1115 = t1013 * t987;
t1114 = t1014 * t880;
t1113 = t1014 * t975;
t1112 = t1016 * t996;
t1109 = qJD(2) * qJD(3);
t1106 = qJDD(2) * t1002;
t1104 = qJDD(2) * t1011;
t1102 = qJDD(2) * t1015;
t1101 = t1010 * t1147;
t1100 = t1010 * t1146;
t1099 = t1010 * t1144;
t1098 = t1014 * t1147;
t1097 = t1014 * t1146;
t1096 = t1014 * t1144;
t544 = t1000 * t609 + t1003 * t610;
t462 = t1008 * t512 + t1012 * t513;
t848 = t1010 * t881 + t936;
t757 = t1010 * t848 + t1014 * t849;
t1090 = t1011 * t986;
t1089 = t1015 * t986;
t755 = t1010 * t849 - t1014 * t848;
t969 = t1142 * qJDD(2);
t994 = t997 * t1016;
t972 = t994 + t1112;
t920 = -t1011 * t972 + t1015 * t969;
t1087 = pkin(7) * t920 - t1011 * t755;
t1043 = t1015 * t1016 + t1104;
t948 = t1043 * t1005;
t970 = -t1011 * t1016 + t1102;
t1082 = t1001 * t970 + t1004 * t948;
t908 = t1001 * t948 - t1004 * t970;
t652 = t1009 * t736 - t1013 * t735;
t653 = t1009 * t735 + t1013 * t736;
t432 = t1000 * t462 + t1136;
t433 = t1003 * t462 - t1141;
t407 = -t1009 * t432 + t1013 * t433;
t402 = t1010 * t655 + t1014 * t407;
t406 = t1009 * t433 + t1013 * t432;
t1081 = t1011 * t402 - t1015 * t406;
t686 = t1020 + t822;
t597 = -t1008 * t682 + t1012 * t686;
t599 = -t1008 * t686 - t1012 * t682;
t536 = t1000 * t599 + t1003 * t597;
t538 = -t1000 * t597 + t1003 * t599;
t478 = -t1009 * t536 + t1013 * t538;
t723 = -t843 - t844;
t466 = t1010 * t723 + t1014 * t478;
t476 = t1009 * t538 + t1013 * t536;
t1080 = t1011 * t466 - t1015 * t476;
t681 = (qJD(6) - t979) * t847 + t1091;
t598 = -t1008 * t681 + t1012 * t1163;
t600 = -t1008 * t1163 - t1012 * t681;
t537 = t1000 * t600 + t1003 * t598;
t539 = -t1000 * t598 + t1003 * t600;
t479 = -t1009 * t537 + t1013 * t539;
t760 = -t844 + t843;
t473 = -t1010 * t760 + t1014 * t479;
t477 = -t1009 * t539 - t1013 * t537;
t1079 = t1011 * t473 + t1015 * t477;
t487 = t1013 * t544 - t1129;
t481 = t1010 * t737 + t1014 * t487;
t486 = t1009 * t544 + t1118;
t1078 = t1011 * t481 - t1015 * t486;
t754 = -t978 - t843;
t679 = t1008 * t754 + t1156;
t680 = t1012 * t754 - t1158;
t594 = t1000 * t680 + t1003 * t679;
t595 = -t1000 * t679 + t1003 * t680;
t535 = -t1009 * t594 + t1013 * t595;
t508 = t1010 * t681 + t1014 * t535;
t534 = t1009 * t595 + t1013 * t594;
t1077 = t1011 * t508 - t1015 * t534;
t719 = -qJD(6) * t847 - t1091;
t674 = t1012 * t719 - t1130 * t845;
t675 = -t1008 * t719 - t1119 * t845;
t590 = t1000 * t675 + t1003 * t674;
t592 = -t1000 * t674 + t1003 * t675;
t532 = -t1009 * t590 + t1013 * t592;
t517 = t1014 * t532 - t1101;
t530 = -t1009 * t592 - t1013 * t590;
t1076 = t1011 * t517 + t1015 * t530;
t676 = -t1008 * t1020 - t1119 * t847;
t677 = -t1012 * t1020 + t1130 * t847;
t591 = t1000 * t677 + t1003 * t676;
t593 = -t1000 * t676 + t1003 * t677;
t533 = -t1009 * t591 + t1013 * t593;
t518 = t1014 * t533 + t1101;
t531 = -t1009 * t593 - t1013 * t591;
t1075 = t1011 * t518 + t1015 * t531;
t808 = -t844 - t978;
t704 = t1012 * t808 + t1131;
t705 = -t1008 * t808 + t1120;
t620 = t1000 * t705 + t1003 * t704;
t621 = -t1000 * t704 + t1003 * t705;
t555 = -t1009 * t620 + t1013 * t621;
t522 = t1010 * t1163 + t1014 * t555;
t554 = t1009 * t621 + t1013 * t620;
t1074 = t1011 * t522 - t1015 * t554;
t821 = -t844 + t978;
t710 = t1012 * t821 + t1158;
t712 = -t1008 * t821 + t1156;
t622 = t1000 * t712 + t1003 * t710;
t624 = -t1000 * t710 + t1003 * t712;
t560 = -t1009 * t622 + t1013 * t624;
t528 = -t1010 * t686 + t1014 * t560;
t558 = -t1009 * t624 - t1013 * t622;
t1073 = t1011 * t528 + t1015 * t558;
t820 = t843 - t978;
t711 = t1008 * t820 - t1120;
t713 = t1012 * t820 + t1131;
t623 = t1000 * t713 + t1003 * t711;
t625 = -t1000 * t711 + t1003 * t713;
t561 = -t1009 * t623 + t1013 * t625;
t529 = -t1010 * t682 + t1014 * t561;
t559 = -t1009 * t625 - t1013 * t623;
t1072 = t1011 * t529 + t1015 * t559;
t743 = (t1008 * t845 + t1012 * t847) * t979;
t744 = (-t1008 * t847 + t1012 * t845) * t979;
t662 = t1000 * t744 + t1003 * t743;
t663 = -t1000 * t743 + t1003 * t744;
t585 = -t1009 * t662 + t1013 * t663;
t581 = -t1010 * t952 + t1014 * t585;
t584 = -t1009 * t663 - t1013 * t662;
t1071 = t1011 * t581 + t1015 * t584;
t785 = t1092 + t1145;
t715 = -t1000 * t785 + t1003 * t789;
t717 = -t1000 * t789 - t1003 * t785;
t630 = -t1009 * t715 + t1013 * t717;
t798 = -t911 - t1154;
t605 = t1010 * t798 + t1014 * t630;
t628 = t1009 * t717 + t1013 * t715;
t1070 = t1011 * t605 - t1015 * t628;
t784 = t1092 - t1145;
t714 = -t1000 * t784 + t1003 * t1165;
t716 = -t1000 * t1165 - t1003 * t784;
t629 = -t1009 * t714 + t1013 * t716;
t856 = -t911 + t1154;
t619 = -t1010 * t856 + t1014 * t629;
t627 = -t1009 * t716 - t1013 * t714;
t1069 = t1011 * t619 + t1015 * t627;
t632 = t1010 * t802 + t1014 * t653;
t1068 = t1011 * t632 - t1015 * t652;
t838 = -t1152 - t1154;
t747 = t1000 * t838 + t1160;
t748 = t1003 * t838 - t1162;
t669 = -t1009 * t747 + t1013 * t748;
t637 = t1010 * t784 + t1014 * t669;
t668 = t1009 * t748 + t1013 * t747;
t1067 = t1011 * t637 - t1015 * t668;
t875 = -t911 - t1152;
t763 = t1003 * t875 + t1139;
t765 = -t1000 * t875 + t1134;
t692 = -t1009 * t763 + t1013 * t765;
t642 = t1010 * t1165 + t1014 * t692;
t691 = t1009 * t765 + t1013 * t763;
t1066 = t1011 * t642 - t1015 * t691;
t886 = -t911 + t1152;
t767 = t1003 * t886 + t1162;
t771 = -t1000 * t886 + t1160;
t699 = -t1009 * t767 + t1013 * t771;
t647 = -t1010 * t789 + t1014 * t699;
t697 = -t1009 * t771 - t1013 * t767;
t1065 = t1011 * t647 + t1015 * t697;
t885 = -t1152 + t1154;
t768 = t1000 * t885 - t1134;
t772 = t1003 * t885 + t1139;
t700 = -t1009 * t768 + t1013 * t772;
t648 = -t1010 * t785 + t1014 * t700;
t698 = -t1009 * t772 - t1013 * t768;
t1064 = t1011 * t648 + t1015 * t698;
t779 = -t1003 * t1092 - t1138 * t914;
t780 = t1000 * t1092 - t1133 * t914;
t708 = -t1009 * t779 + t1013 * t780;
t672 = t1014 * t708 - t1100;
t706 = -t1009 * t780 - t1013 * t779;
t1063 = t1011 * t672 + t1015 * t706;
t781 = t1000 * t832 - t1133 * t916;
t782 = t1003 * t832 + t1138 * t916;
t709 = -t1009 * t781 + t1013 * t782;
t673 = t1014 * t709 + t1100;
t707 = -t1009 * t782 - t1013 * t781;
t1062 = t1011 * t673 + t1015 * t707;
t814 = (t1000 * t914 + t1003 * t916) * t987;
t815 = (-t1000 * t916 + t1003 * t914) * t987;
t739 = -t1009 * t814 + t1013 * t815;
t732 = t1014 * t739 - t1124;
t738 = -t1009 * t815 - t1013 * t814;
t1061 = t1011 * t732 + t1015 * t738;
t793 = -t1009 * t874 - t1013 * t869;
t889 = t958 + t1153;
t746 = -t1010 * t889 + t1014 * t793;
t791 = -t1009 * t869 + t1013 * t874;
t1060 = t1011 * t746 - t1015 * t791;
t1059 = t1011 * t757 - t1015 * t880;
t870 = (-qJD(4) + t987) * t963 + t1045;
t792 = -t1009 * t872 + t1013 * t870;
t924 = -t958 + t1153;
t759 = -t1010 * t924 + t1014 * t792;
t790 = -t1009 * t870 - t1013 * t872;
t1058 = t1011 * t759 + t1015 * t790;
t910 = -t1152 - t1153;
t826 = t1013 * t910 - t1157;
t762 = -t1010 * t870 + t1014 * t826;
t825 = t1009 * t910 + t1155;
t1057 = t1011 * t762 - t1015 * t825;
t919 = -t958 - t1152;
t842 = -t1009 * t919 + t1116;
t766 = t1010 * t872 + t1014 * t842;
t841 = t1013 * t919 + t1127;
t1056 = t1011 * t766 - t1015 * t841;
t942 = -t958 + t1152;
t859 = -t1009 * t942 + t1155;
t773 = -t1010 * t874 + t1014 * t859;
t857 = -t1013 * t942 - t1157;
t1055 = t1011 * t773 + t1015 * t857;
t941 = -t1152 + t1153;
t860 = t1013 * t941 + t1127;
t774 = -t1010 * t869 + t1014 * t860;
t858 = -t1009 * t941 + t1116;
t1054 = t1011 * t774 + t1015 * t858;
t866 = t1009 * t1019 - t1115 * t962;
t806 = t1014 * t866 - t1099;
t865 = t1013 * t1019 + t1126 * t962;
t1053 = t1011 * t806 + t1015 * t865;
t868 = t1013 * t904 + t1126 * t963;
t807 = t1014 * t868 + t1099;
t867 = -t1009 * t904 + t1115 * t963;
t1052 = t1011 * t807 + t1015 * t867;
t879 = (-t1009 * t963 + t1013 * t962) * t987;
t862 = t1014 * t879 - t1124;
t878 = (-t1009 * t962 - t1013 * t963) * t987;
t1051 = t1011 * t862 + t1015 * t878;
t1050 = t1011 * t894 - t1015 * t893;
t965 = 0.2e1 * t1095 + t1105;
t968 = -0.2e1 * t990 + t1103;
t918 = -t1010 * t965 + t1014 * t968;
t973 = t994 - t1112;
t1049 = t1011 * t918 + t1015 * t973;
t984 = -t994 - t1151;
t932 = t1014 * t984 - t1122;
t1048 = t1011 * t932 + t1015 * t968;
t982 = -t1112 - t1151;
t934 = -t1010 * t982 - t1113;
t1047 = t1011 * t934 - t1015 * t965;
t1046 = t1011 * t969 + t1015 * t972;
t960 = t1142 * t1109;
t1044 = -qJDD(3) * t1015 + t1011 * t960;
t961 = t1014 * t976;
t981 = -t1112 + t1151;
t933 = -t1010 * t981 + t961;
t1042 = -t1010 * t1102 + t1011 * t933;
t983 = t994 - t1151;
t931 = t1014 * t983 - t1123;
t1041 = t1011 * t931 - t1014 * t1102;
t457 = -pkin(5) * t655 + pkin(10) * t462;
t399 = -pkin(4) * t655 - pkin(10) * t1141 + qJ(5) * t433 + t1003 * t457;
t403 = -pkin(10) * t1136 - qJ(5) * t432 - t1000 * t457;
t382 = -pkin(9) * t406 - t1009 * t399 + t1013 * t403;
t393 = -pkin(3) * t406 - pkin(4) * t432 - pkin(5) * t461;
t401 = t1010 * t407 - t1014 * t655;
t375 = -pkin(8) * t401 - t1010 * t393 + t1014 * t382;
t379 = -pkin(2) * t401 + pkin(3) * t655 - pkin(9) * t407 - t1009 * t403 - t1013 * t399;
t391 = t1011 * t406 + t1015 * t402;
t1038 = pkin(7) * t391 + t1011 * t375 + t1015 * t379;
t449 = -pkin(5) * t723 + pkin(10) * t599 + t462;
t453 = -pkin(10) * t597 - t461;
t414 = -pkin(4) * t723 + qJ(5) * t538 + t1000 * t453 + t1003 * t449;
t415 = -qJ(5) * t536 - t1000 * t449 + t1003 * t453;
t394 = -pkin(9) * t476 - t1009 * t414 + t1013 * t415;
t445 = -pkin(3) * t476 - pkin(4) * t536 - pkin(5) * t597;
t465 = t1010 * t478 - t1014 * t723;
t389 = -pkin(8) * t465 - t1010 * t445 + t1014 * t394;
t392 = -pkin(2) * t465 + pkin(3) * t723 - pkin(9) * t478 - t1009 * t415 - t1013 * t414;
t436 = t1011 * t476 + t1015 * t466;
t1037 = pkin(7) * t436 + t1011 * t389 + t1015 * t392;
t562 = -pkin(5) * t681 + pkin(10) * t680 - t1121;
t582 = -pkin(10) * t679 + t1132;
t475 = -pkin(4) * t681 + qJ(5) * t595 + t1000 * t582 + t1003 * t562;
t488 = -qJ(5) * t594 - t1000 * t562 + t1003 * t582;
t428 = -pkin(9) * t534 - t1009 * t475 + t1013 * t488;
t450 = -pkin(3) * t534 - pkin(4) * t594 - pkin(5) * t679 + t512;
t507 = t1010 * t535 - t1014 * t681;
t409 = -pkin(8) * t507 - t1010 * t450 + t1014 * t428;
t417 = -pkin(2) * t507 + pkin(3) * t681 - pkin(9) * t535 - t1009 * t488 - t1013 * t475;
t464 = t1011 * t534 + t1015 * t508;
t1036 = pkin(7) * t464 + t1011 * t409 + t1015 * t417;
t523 = -pkin(4) * t737 + qJ(5) * t544;
t440 = -pkin(9) * t486 - qJ(5) * t1118 - t1009 * t523;
t456 = -pkin(3) * t486 - pkin(4) * t543;
t480 = t1010 * t487 - t1014 * t737;
t411 = -pkin(8) * t480 - t1010 * t456 + t1014 * t440;
t421 = -pkin(2) * t480 + pkin(3) * t737 - pkin(9) * t487 + qJ(5) * t1129 - t1013 * t523;
t439 = t1011 * t486 + t1015 * t481;
t1035 = pkin(7) * t439 + t1011 * t411 + t1015 * t421;
t565 = -pkin(5) * t1163 + pkin(10) * t705 + t1132;
t601 = -pkin(10) * t704 + t1121;
t484 = -pkin(4) * t1163 + qJ(5) * t621 + t1000 * t601 + t1003 * t565;
t496 = -qJ(5) * t620 - t1000 * t565 + t1003 * t601;
t435 = -pkin(9) * t554 - t1009 * t484 + t1013 * t496;
t459 = -pkin(3) * t554 - pkin(4) * t620 - pkin(5) * t704 + t513;
t521 = t1010 * t555 - t1014 * t1163;
t412 = -pkin(8) * t521 - t1010 * t459 + t1014 * t435;
t426 = -pkin(2) * t521 + pkin(3) * t1163 - pkin(9) * t555 - t1009 * t496 - t1013 * t484;
t483 = t1011 * t554 + t1015 * t522;
t1034 = pkin(7) * t483 + t1011 * t412 + t1015 * t426;
t514 = -pkin(4) * t798 + qJ(5) * t717 + t544;
t519 = -qJ(5) * t715 - t543;
t458 = -pkin(9) * t628 - t1009 * t514 + t1013 * t519;
t579 = -pkin(3) * t628 - pkin(4) * t715;
t604 = t1010 * t630 - t1014 * t798;
t442 = -pkin(8) * t604 - t1010 * t579 + t1014 * t458;
t448 = -pkin(2) * t604 + pkin(3) * t798 - pkin(9) * t630 - t1009 * t519 - t1013 * t514;
t546 = t1011 * t628 + t1015 * t605;
t1033 = pkin(7) * t546 + t1011 * t442 + t1015 * t448;
t633 = -pkin(4) * t784 + qJ(5) * t748 - t1135;
t661 = -qJ(5) * t747 + t1140;
t545 = -pkin(9) * t668 - t1009 * t633 + t1013 * t661;
t550 = -pkin(3) * t668 - pkin(4) * t747 + t609;
t636 = t1010 * t669 - t1014 * t784;
t474 = -pkin(8) * t636 - t1010 * t550 + t1014 * t545;
t502 = -pkin(2) * t636 + pkin(3) * t784 - pkin(9) * t669 - t1009 * t661 - t1013 * t633;
t573 = t1011 * t668 + t1015 * t637;
t1032 = pkin(7) * t573 + t1011 * t474 + t1015 * t502;
t638 = -pkin(4) * t1165 + qJ(5) * t765 + t1140;
t678 = -qJ(5) * t763 + t1135;
t556 = -pkin(9) * t691 - t1009 * t638 + t1013 * t678;
t563 = -pkin(3) * t691 - pkin(4) * t763 + t610;
t641 = t1010 * t692 - t1014 * t1165;
t482 = -pkin(8) * t641 - t1010 * t563 + t1014 * t556;
t510 = -pkin(2) * t641 + pkin(3) * t1165 - pkin(9) * t692 - t1009 * t678 - t1013 * t638;
t586 = t1011 * t691 + t1015 * t642;
t1031 = pkin(7) * t586 + t1011 * t482 + t1015 * t510;
t631 = t1010 * t653 - t1014 * t802;
t542 = -pkin(8) * t631 + (-pkin(9) * t1014 + t1150) * t652;
t564 = -pkin(2) * t631 + pkin(3) * t802 - pkin(9) * t653;
t569 = t1011 * t652 + t1015 * t632;
t1030 = pkin(7) * t569 + t1011 * t542 + t1015 * t564;
t626 = -pkin(9) * t791 - t652;
t745 = t1010 * t793 + t1014 * t889;
t574 = -pkin(8) * t745 + t1014 * t626 + t1150 * t791;
t583 = -pkin(2) * t745 - pkin(3) * t889 - pkin(9) * t793 - t653;
t689 = t1011 * t791 + t1015 * t746;
t1029 = pkin(7) * t689 + t1011 * t574 + t1015 * t583;
t696 = -pkin(3) * t825 + t735;
t740 = -pkin(9) * t825 + t1128;
t761 = t1010 * t826 + t1014 * t870;
t608 = -pkin(8) * t761 - t1010 * t696 + t1014 * t740;
t654 = -pkin(2) * t761 - pkin(3) * t870 - pkin(9) * t826 + t1117;
t722 = t1011 * t825 + t1015 * t762;
t1028 = pkin(7) * t722 + t1011 * t608 + t1015 * t654;
t703 = -pkin(3) * t841 + t736;
t742 = -pkin(9) * t841 + t1117;
t764 = t1010 * t842 - t1014 * t872;
t615 = -pkin(8) * t764 - t1010 * t703 + t1014 * t742;
t656 = -pkin(2) * t764 + pkin(3) * t872 - pkin(9) * t842 - t1128;
t724 = t1011 * t841 + t1015 * t766;
t1027 = pkin(7) * t724 + t1011 * t615 + t1015 * t656;
t928 = t1010 * t984 + t961;
t799 = -pkin(2) * t928 + t848;
t839 = -pkin(8) * t928 + t1125;
t883 = -t1011 * t968 + t1015 * t932;
t1026 = pkin(7) * t883 + t1011 * t839 + t1015 * t799;
t930 = t1014 * t982 - t1123;
t800 = -pkin(2) * t930 + t849;
t840 = -pkin(8) * t930 + t1114;
t884 = t1011 * t965 + t1015 * t934;
t1025 = pkin(7) * t884 + t1011 * t840 + t1015 * t800;
t938 = -t1010 * t967 - t1109 * t997;
t1024 = t1011 * t938 - t1089;
t939 = t1014 * t966 - t1109 * t996;
t1023 = t1011 * t939 + t1089;
t728 = t1011 * t880 + t1015 * t757;
t1017 = pkin(7) * t728 + (-pkin(2) * t1015 - pkin(8) * t1011) * t755;
t949 = t970 * t1005;
t947 = t970 * t1002;
t946 = t1043 * t1002;
t944 = t1014 * t959;
t940 = qJDD(3) * t1011 + t1015 * t960;
t929 = t1014 * t981 + t1122;
t927 = t1010 * t983 + t1113;
t926 = t1085 * t1010;
t925 = t1086 * t1014;
t921 = t1044 * t1005;
t917 = t1010 * t968 + t1014 * t965;
t913 = t1046 * t1005;
t912 = t1046 * t1002;
t909 = -t1001 * t949 - t1004 * t1043;
t907 = -t1001 * t1043 + t1004 * t949;
t903 = t1015 * t939 - t1090;
t902 = t1015 * t938 + t1090;
t901 = t1010 * t1104 + t1015 * t933;
t900 = t1011 * t1103 + t1015 * t931;
t877 = -t1011 * t973 + t1015 * t918;
t864 = -t1039 + (t1002 * t946 + t1005 * t948) * pkin(7);
t863 = -t1040 + (-t1002 * t947 - t1005 * t949) * pkin(7);
t861 = t1010 * t879 + t944;
t855 = -t1001 * t913 + t1004 * t920;
t854 = t1001 * t920 + t1004 * t913;
t853 = -t1002 * t926 + t1005 * t1023;
t852 = t1002 * t925 + t1005 * t1024;
t851 = -t1002 * t929 + t1005 * t1042;
t850 = -t1002 * t927 + t1005 * t1041;
t836 = -t1002 * t930 + t1005 * t1047;
t835 = -t1002 * t928 + t1005 * t1048;
t834 = t1002 * t1047 + t1005 * t930;
t833 = t1002 * t1048 + t1005 * t928;
t816 = -t1002 * t917 + t1005 * t1049;
t813 = pkin(2) * t968 + pkin(8) * t932 - t1114;
t812 = -pkin(2) * t965 + pkin(8) * t934 + t1125;
t809 = t819 * t1005;
t805 = t1010 * t868 - t1096;
t804 = t1010 * t866 + t1096;
t797 = -pkin(1) * t947 + t1002 * t893 + t1005 * t1039 - t1043 * t1148;
t796 = pkin(1) * t946 + t1002 * t894 - t1005 * t1040 - t1148 * t970;
t795 = t1002 * t956 + (t1093 + t1050) * t1005;
t794 = t1002 * t1050 - t1005 * t1083;
t783 = -t1011 * t878 + t1015 * t862;
t778 = -t1001 * t836 + t1004 * t884;
t777 = -t1001 * t835 + t1004 * t883;
t776 = t1001 * t884 + t1004 * t836;
t775 = t1001 * t883 + t1004 * t835;
t770 = t1010 * t860 + t1014 * t869;
t769 = t1010 * t859 + t1014 * t874;
t758 = t1010 * t792 + t1014 * t924;
t750 = -t1011 * t867 + t1015 * t807;
t749 = -t1011 * t865 + t1015 * t806;
t741 = pkin(2) * t972 + pkin(8) * t969 + t757;
t734 = -t1002 * t861 + t1005 * t1051;
t733 = -pkin(2) * t880 + pkin(8) * t757;
t731 = t1010 * t739 + t944;
t730 = -t1011 * t858 + t1015 * t774;
t729 = -t1011 * t857 + t1015 * t773;
t727 = -pkin(1) * t794 + t1148 * t819;
t726 = -t1001 * t795 + t1004 * t819;
t725 = t1001 * t819 + t1004 * t795;
t721 = -t1015 * t755 + (-t1002 * t912 - t1005 * t913) * pkin(7);
t718 = (-t1002 * t794 - t1005 * t795) * pkin(7);
t702 = -t1002 * t805 + t1005 * t1052;
t701 = -t1002 * t804 + t1005 * t1053;
t693 = -t1011 * t790 + t1015 * t759;
t671 = t1010 * t709 - t1097;
t670 = t1010 * t708 + t1097;
t667 = -t1011 * t800 + t1015 * t840 + (-t1002 * t834 - t1005 * t836) * pkin(7);
t666 = -t1011 * t799 + t1015 * t839 + (-t1002 * t833 - t1005 * t835) * pkin(7);
t665 = -t1002 * t770 + t1005 * t1054;
t664 = -t1002 * t769 + t1005 * t1055;
t660 = -t1002 * t764 + t1005 * t1056;
t659 = t1002 * t1056 + t1005 * t764;
t658 = -t1002 * t755 + t1005 * t1059;
t657 = t1002 * t1059 + t1005 * t755;
t651 = -t1002 * t761 + t1005 * t1057;
t650 = t1002 * t1057 + t1005 * t761;
t649 = -t1011 * t738 + t1015 * t732;
t646 = t1010 * t700 + t1014 * t785;
t645 = t1010 * t699 + t1014 * t789;
t644 = -pkin(1) * t834 - t1002 * t812 + t1005 * t1025;
t643 = -pkin(1) * t833 - t1002 * t813 + t1005 * t1026;
t640 = -pkin(1) * t912 - t1002 * t741 + t1005 * t1087;
t639 = -t1002 * t758 + t1005 * t1058;
t635 = -t1002 * t745 + t1005 * t1060;
t634 = t1002 * t1060 + t1005 * t745;
t618 = t1010 * t629 + t1014 * t856;
t617 = -t1001 * t658 + t1004 * t728;
t616 = t1001 * t728 + t1004 * t658;
t614 = -t1001 * t660 + t1004 * t724;
t613 = t1001 * t724 + t1004 * t660;
t612 = -t1011 * t707 + t1015 * t673;
t611 = -t1011 * t706 + t1015 * t672;
t606 = -t1002 * t731 + t1005 * t1061;
t603 = -t1001 * t651 + t1004 * t722;
t602 = t1001 * t722 + t1004 * t651;
t596 = -pkin(2) * t841 + pkin(8) * t766 + t1010 * t742 + t1014 * t703;
t589 = -t1011 * t698 + t1015 * t648;
t588 = -t1011 * t697 + t1015 * t647;
t587 = -pkin(2) * t825 + pkin(8) * t762 + t1010 * t740 + t1014 * t696;
t580 = t1010 * t585 + t1014 * t952;
t578 = -t1001 * t635 + t1004 * t689;
t577 = t1001 * t689 + t1004 * t635;
t568 = pkin(8) * t746 + t1010 * t626 + (-pkin(2) - t1149) * t791;
t567 = -t1002 * t671 + t1005 * t1062;
t566 = -t1002 * t670 + t1005 * t1063;
t557 = (pkin(2) * t1011 - pkin(8) * t1015) * t755 + (-t1002 * t657 - t1005 * t658) * pkin(7);
t553 = -t1002 * t646 + t1005 * t1064;
t552 = -t1002 * t645 + t1005 * t1065;
t551 = -t1011 * t627 + t1015 * t619;
t549 = -pkin(1) * t657 - t1002 * t733 + t1005 * t1017;
t548 = -t1002 * t641 + t1005 * t1066;
t547 = t1002 * t1066 + t1005 * t641;
t541 = -t1002 * t636 + t1005 * t1067;
t540 = t1002 * t1067 + t1005 * t636;
t527 = t1010 * t561 + t1014 * t682;
t526 = t1010 * t560 + t1014 * t686;
t525 = -t1002 * t631 + t1005 * t1068;
t524 = t1002 * t1068 + t1005 * t631;
t520 = -t1011 * t584 + t1015 * t581;
t516 = t1010 * t533 - t1098;
t515 = t1010 * t532 + t1098;
t509 = pkin(8) * t632 + (-pkin(2) + t1088) * t652;
t506 = -t1002 * t618 + t1005 * t1069;
t505 = -t1011 * t656 + t1015 * t615 + (-t1002 * t659 - t1005 * t660) * pkin(7);
t504 = -t1002 * t604 + t1005 * t1070;
t503 = t1002 * t1070 + t1005 * t604;
t501 = -t1011 * t654 + t1015 * t608 + (-t1002 * t650 - t1005 * t651) * pkin(7);
t500 = -t1001 * t548 + t1004 * t586;
t499 = t1001 * t586 + t1004 * t548;
t498 = -t1001 * t541 + t1004 * t573;
t497 = t1001 * t573 + t1004 * t541;
t495 = -t1002 * t580 + t1005 * t1071;
t494 = -pkin(1) * t659 - t1002 * t596 + t1005 * t1027;
t493 = -t1001 * t525 + t1004 * t569;
t492 = t1001 * t569 + t1004 * t525;
t491 = -pkin(1) * t650 - t1002 * t587 + t1005 * t1028;
t490 = -t1011 * t559 + t1015 * t529;
t489 = -t1011 * t558 + t1015 * t528;
t485 = -t1011 * t583 + t1015 * t574 + (-t1002 * t634 - t1005 * t635) * pkin(7);
t472 = t1010 * t479 + t1014 * t760;
t471 = -pkin(2) * t691 + pkin(8) * t642 + t1010 * t556 + t1014 * t563;
t470 = -t1011 * t531 + t1015 * t518;
t469 = -t1011 * t530 + t1015 * t517;
t468 = -t1001 * t504 + t1004 * t546;
t467 = t1001 * t546 + t1004 * t504;
t463 = -pkin(2) * t668 + pkin(8) * t637 + t1010 * t545 + t1014 * t550;
t460 = -pkin(1) * t634 - t1002 * t568 + t1005 * t1029;
t455 = -t1002 * t527 + t1005 * t1072;
t454 = -t1002 * t526 + t1005 * t1073;
t452 = -t1002 * t521 + t1005 * t1074;
t451 = t1002 * t1074 + t1005 * t521;
t447 = -t1002 * t516 + t1005 * t1075;
t446 = -t1002 * t515 + t1005 * t1076;
t444 = -t1002 * t507 + t1005 * t1077;
t443 = t1002 * t1077 + t1005 * t507;
t441 = -t1011 * t564 + t1015 * t542 + (-t1002 * t524 - t1005 * t525) * pkin(7);
t438 = -pkin(2) * t628 + pkin(8) * t605 + t1010 * t458 + t1014 * t579;
t437 = -t1011 * t477 + t1015 * t473;
t434 = -pkin(1) * t524 - t1002 * t509 + t1005 * t1030;
t431 = -t1011 * t510 + t1015 * t482 + (-t1002 * t547 - t1005 * t548) * pkin(7);
t430 = -t1001 * t452 + t1004 * t483;
t429 = t1001 * t483 + t1004 * t452;
t427 = -t1011 * t502 + t1015 * t474 + (-t1002 * t540 - t1005 * t541) * pkin(7);
t425 = -t1002 * t480 + t1005 * t1078;
t424 = t1002 * t1078 + t1005 * t480;
t423 = -t1001 * t444 + t1004 * t464;
t422 = t1001 * t464 + t1004 * t444;
t420 = -t1002 * t472 + t1005 * t1079;
t419 = -t1002 * t465 + t1005 * t1080;
t418 = t1002 * t1080 + t1005 * t465;
t416 = -pkin(1) * t547 - t1002 * t471 + t1005 * t1031;
t413 = -pkin(1) * t540 - t1002 * t463 + t1005 * t1032;
t410 = -pkin(2) * t554 + pkin(8) * t522 + t1010 * t435 + t1014 * t459;
t408 = -t1011 * t448 + t1015 * t442 + (-t1002 * t503 - t1005 * t504) * pkin(7);
t405 = -t1001 * t425 + t1004 * t439;
t404 = t1001 * t439 + t1004 * t425;
t400 = -pkin(2) * t534 + pkin(8) * t508 + t1010 * t428 + t1014 * t450;
t398 = -pkin(2) * t486 + pkin(8) * t481 + t1010 * t440 + t1014 * t456;
t397 = -t1001 * t419 + t1004 * t436;
t396 = t1001 * t436 + t1004 * t419;
t395 = -pkin(1) * t503 - t1002 * t438 + t1005 * t1033;
t390 = -t1011 * t426 + t1015 * t412 + (-t1002 * t451 - t1005 * t452) * pkin(7);
t388 = -t1011 * t417 + t1015 * t409 + (-t1002 * t443 - t1005 * t444) * pkin(7);
t387 = -pkin(2) * t476 + pkin(8) * t466 + t1010 * t394 + t1014 * t445;
t386 = -t1011 * t421 + t1015 * t411 + (-t1002 * t424 - t1005 * t425) * pkin(7);
t385 = -pkin(1) * t451 - t1002 * t410 + t1005 * t1034;
t384 = -t1002 * t401 + t1005 * t1081;
t383 = t1002 * t1081 + t1005 * t401;
t381 = -pkin(1) * t443 - t1002 * t400 + t1005 * t1036;
t380 = -pkin(1) * t424 - t1002 * t398 + t1005 * t1035;
t378 = -t1001 * t384 + t1004 * t391;
t377 = t1001 * t391 + t1004 * t384;
t376 = -t1011 * t392 + t1015 * t389 + (-t1002 * t418 - t1005 * t419) * pkin(7);
t374 = -pkin(2) * t406 + pkin(8) * t402 + t1010 * t382 + t1014 * t393;
t373 = -pkin(1) * t418 - t1002 * t387 + t1005 * t1037;
t372 = -t1011 * t379 + t1015 * t375 + (-t1002 * t383 - t1005 * t384) * pkin(7);
t371 = -pkin(1) * t383 - t1002 * t374 + t1005 * t1038;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t923, 0, 0, 0, 0, 0, 0, t909, t908, 0, t726, 0, 0, 0, 0, 0, 0, t777, t778, t855, t617, 0, 0, 0, 0, 0, 0, t603, t614, t578, t493, 0, 0, 0, 0, 0, 0, t498, t500, t468, t405, 0, 0, 0, 0, 0, 0, t423, t430, t397, t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t922, 0, 0, 0, 0, 0, 0, t907, -t1082, 0, t725, 0, 0, 0, 0, 0, 0, t775, t776, t854, t616, 0, 0, 0, 0, 0, 0, t602, t613, t577, t492, 0, 0, 0, 0, 0, 0, t497, t499, t467, t404, 0, 0, 0, 0, 0, 0, t422, t429, t396, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1143, 0, 0, 0, 0, 0, 0, t947, -t946, 0, t794, 0, 0, 0, 0, 0, 0, t833, t834, t912, t657, 0, 0, 0, 0, 0, 0, t650, t659, t634, t524, 0, 0, 0, 0, 0, 0, t540, t547, t503, t424, 0, 0, 0, 0, 0, 0, t443, t451, t418, t383; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1161, -t1159, -t922, -qJ(1) * t922, 0, 0, -t908, 0, t909, t1001 * t1106, -qJ(1) * t907 - t1001 * t797 + t1004 * t863, qJ(1) * t1082 - t1001 * t796 + t1004 * t864, -t1001 * t809 - t1004 * t1050, -qJ(1) * t725 - t1001 * t727 + t1004 * t718, -t1001 * t853 + t1004 * t903, -t1001 * t816 + t1004 * t877, -t1001 * t851 + t1004 * t901, -t1001 * t852 + t1004 * t902, -t1001 * t850 + t1004 * t900, -t1001 * t921 + t1004 * t940, -qJ(1) * t775 - t1001 * t643 + t1004 * t666, -qJ(1) * t776 - t1001 * t644 + t1004 * t667, -qJ(1) * t854 - t1001 * t640 + t1004 * t721, -qJ(1) * t616 - t1001 * t549 + t1004 * t557, -t1001 * t702 + t1004 * t750, -t1001 * t639 + t1004 * t693, -t1001 * t664 + t1004 * t729, -t1001 * t701 + t1004 * t749, -t1001 * t665 + t1004 * t730, -t1001 * t734 + t1004 * t783, -qJ(1) * t602 - t1001 * t491 + t1004 * t501, -qJ(1) * t613 - t1001 * t494 + t1004 * t505, -qJ(1) * t577 - t1001 * t460 + t1004 * t485, -qJ(1) * t492 - t1001 * t434 + t1004 * t441, -t1001 * t567 + t1004 * t612, -t1001 * t506 + t1004 * t551, -t1001 * t552 + t1004 * t588, -t1001 * t566 + t1004 * t611, -t1001 * t553 + t1004 * t589, -t1001 * t606 + t1004 * t649, -qJ(1) * t497 - t1001 * t413 + t1004 * t427, -qJ(1) * t499 - t1001 * t416 + t1004 * t431, -qJ(1) * t467 - t1001 * t395 + t1004 * t408, -qJ(1) * t404 - t1001 * t380 + t1004 * t386, -t1001 * t447 + t1004 * t470, -t1001 * t420 + t1004 * t437, -t1001 * t454 + t1004 * t489, -t1001 * t446 + t1004 * t469, -t1001 * t455 + t1004 * t490, -t1001 * t495 + t1004 * t520, -qJ(1) * t422 - t1001 * t381 + t1004 * t388, -qJ(1) * t429 - t1001 * t385 + t1004 * t390, -qJ(1) * t396 - t1001 * t373 + t1004 * t376, -qJ(1) * t377 - t1001 * t371 + t1004 * t372; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1159, -t1161, t923, qJ(1) * t923, 0, 0, t1082, 0, t907, -t1004 * t1106, qJ(1) * t909 + t1001 * t863 + t1004 * t797, qJ(1) * t908 + t1001 * t864 + t1004 * t796, -t1001 * t1050 + t1004 * t809, qJ(1) * t726 + t1001 * t718 + t1004 * t727, t1001 * t903 + t1004 * t853, t1001 * t877 + t1004 * t816, t1001 * t901 + t1004 * t851, t1001 * t902 + t1004 * t852, t1001 * t900 + t1004 * t850, t1001 * t940 + t1004 * t921, qJ(1) * t777 + t1001 * t666 + t1004 * t643, qJ(1) * t778 + t1001 * t667 + t1004 * t644, qJ(1) * t855 + t1001 * t721 + t1004 * t640, qJ(1) * t617 + t1001 * t557 + t1004 * t549, t1001 * t750 + t1004 * t702, t1001 * t693 + t1004 * t639, t1001 * t729 + t1004 * t664, t1001 * t749 + t1004 * t701, t1001 * t730 + t1004 * t665, t1001 * t783 + t1004 * t734, qJ(1) * t603 + t1001 * t501 + t1004 * t491, qJ(1) * t614 + t1001 * t505 + t1004 * t494, qJ(1) * t578 + t1001 * t485 + t1004 * t460, qJ(1) * t493 + t1001 * t441 + t1004 * t434, t1001 * t612 + t1004 * t567, t1001 * t551 + t1004 * t506, t1001 * t588 + t1004 * t552, t1001 * t611 + t1004 * t566, t1001 * t589 + t1004 * t553, t1001 * t649 + t1004 * t606, qJ(1) * t498 + t1001 * t427 + t1004 * t413, qJ(1) * t500 + t1001 * t431 + t1004 * t416, qJ(1) * t468 + t1001 * t408 + t1004 * t395, qJ(1) * t405 + t1001 * t386 + t1004 * t380, t1001 * t470 + t1004 * t447, t1001 * t437 + t1004 * t420, t1001 * t489 + t1004 * t454, t1001 * t469 + t1004 * t446, t1001 * t490 + t1004 * t455, t1001 * t520 + t1004 * t495, qJ(1) * t423 + t1001 * t388 + t1004 * t381, qJ(1) * t430 + t1001 * t390 + t1004 * t385, qJ(1) * t397 + t1001 * t376 + t1004 * t373, qJ(1) * t378 + t1001 * t372 + t1004 * t371; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1094, t974, 0, 0, 0, 0, t946, 0, t947, t1005 * qJDD(2), pkin(1) * t949 - t1005 * t893 + (-pkin(7) * t1043 + t1039) * t1002, -pkin(1) * t948 - t1005 * t894 + (-pkin(7) * t970 - t1040) * t1002, t1164, pkin(1) * t795 + pkin(7) * t1164, t1002 * t1023 + t1005 * t926, t1002 * t1049 + t1005 * t917, t1002 * t1042 + t1005 * t929, t1002 * t1024 - t1005 * t925, t1002 * t1041 + t1005 * t927, t1044 * t1002, pkin(1) * t835 + t1002 * t1026 + t1005 * t813, pkin(1) * t836 + t1002 * t1025 + t1005 * t812, pkin(1) * t913 + t1002 * t1087 + t1005 * t741, pkin(1) * t658 + t1002 * t1017 + t1005 * t733, t1002 * t1052 + t1005 * t805, t1002 * t1058 + t1005 * t758, t1002 * t1055 + t1005 * t769, t1002 * t1053 + t1005 * t804, t1002 * t1054 + t1005 * t770, t1002 * t1051 + t1005 * t861, pkin(1) * t651 + t1002 * t1028 + t1005 * t587, pkin(1) * t660 + t1002 * t1027 + t1005 * t596, pkin(1) * t635 + t1002 * t1029 + t1005 * t568, pkin(1) * t525 + t1002 * t1030 + t1005 * t509, t1002 * t1062 + t1005 * t671, t1002 * t1069 + t1005 * t618, t1002 * t1065 + t1005 * t645, t1002 * t1063 + t1005 * t670, t1002 * t1064 + t1005 * t646, t1002 * t1061 + t1005 * t731, pkin(1) * t541 + t1002 * t1032 + t1005 * t463, pkin(1) * t548 + t1002 * t1031 + t1005 * t471, pkin(1) * t504 + t1002 * t1033 + t1005 * t438, pkin(1) * t425 + t1002 * t1035 + t1005 * t398, t1002 * t1075 + t1005 * t516, t1002 * t1079 + t1005 * t472, t1002 * t1073 + t1005 * t526, t1002 * t1076 + t1005 * t515, t1002 * t1072 + t1005 * t527, t1002 * t1071 + t1005 * t580, pkin(1) * t444 + t1002 * t1036 + t1005 * t400, pkin(1) * t452 + t1002 * t1034 + t1005 * t410, pkin(1) * t419 + t1002 * t1037 + t1005 * t387, pkin(1) * t384 + t1002 * t1038 + t1005 * t374;];
tauB_reg  = t1;
