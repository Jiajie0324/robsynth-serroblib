% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 07:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:48:50
% EndTime: 2019-05-05 07:49:00
% DurationCPUTime: 10.46s
% Computational Cost: add. (87770->334), mult. (178069->511), div. (0->0), fcn. (133053->14), ass. (0->283)
t2249 = sin(pkin(6));
t2307 = -g(3) + qJDD(1);
t2291 = t2249 * t2307;
t2248 = sin(pkin(11));
t2251 = cos(pkin(11));
t2224 = g(1) * t2248 - g(2) * t2251;
t2252 = cos(pkin(6));
t2298 = t2224 * t2252;
t2319 = t2291 + t2298;
t2257 = sin(qJ(3));
t2306 = qJD(2) * t2257;
t2239 = qJD(3) * t2306;
t2261 = cos(qJ(3));
t2241 = t2261 * qJDD(2);
t2292 = t2241 - t2239 - qJDD(4);
t2256 = sin(qJ(4));
t2260 = cos(qJ(4));
t2214 = -t2260 * qJD(3) + t2256 * t2306;
t2215 = qJD(3) * t2256 + t2260 * t2306;
t2300 = t2214 * t2215;
t2177 = -t2292 - t2300;
t2247 = sin(pkin(12));
t2250 = cos(pkin(12));
t2190 = t2250 * t2214 + t2215 * t2247;
t2192 = -t2214 * t2247 + t2215 * t2250;
t2303 = t2190 * t2192;
t2148 = -t2292 - t2303;
t2305 = qJD(2) * t2261;
t2236 = -qJD(4) + t2305;
t2230 = -qJD(6) + t2236;
t2318 = qJD(6) - t2230;
t2317 = qJD(3) ^ 2;
t2255 = sin(qJ(6));
t2259 = cos(qJ(6));
t2158 = t2259 * t2190 + t2192 * t2255;
t2316 = t2158 ^ 2;
t2160 = -t2190 * t2255 + t2192 * t2259;
t2315 = t2160 ^ 2;
t2314 = t2190 ^ 2;
t2313 = t2192 ^ 2;
t2312 = t2214 ^ 2;
t2311 = t2215 ^ 2;
t2310 = t2230 ^ 2;
t2309 = t2236 ^ 2;
t2308 = -2 * qJD(5);
t2304 = t2158 * t2160;
t2302 = t2190 * t2236;
t2301 = t2192 * t2236;
t2299 = t2214 * t2236;
t2297 = qJD(4) + t2236;
t2296 = qJD(6) + t2230;
t2225 = -g(1) * t2251 - g(2) * t2248;
t2258 = sin(qJ(2));
t2262 = cos(qJ(2));
t2179 = t2262 * t2225 + t2258 * t2319;
t2263 = qJD(2) ^ 2;
t2170 = -pkin(2) * t2263 + qJDD(2) * pkin(8) + t2179;
t2265 = -t2249 * t2224 + t2252 * t2307;
t2162 = t2261 * t2170 + t2257 * t2265;
t2216 = (-pkin(3) * t2261 - pkin(9) * t2257) * qJD(2);
t2137 = -pkin(3) * t2317 + qJDD(3) * pkin(9) + t2216 * t2305 + t2162;
t2286 = t2258 * t2225 - t2262 * t2319;
t2169 = -qJDD(2) * pkin(2) - t2263 * pkin(8) + t2286;
t2293 = qJD(3) * t2305;
t2294 = t2257 * qJDD(2);
t2218 = t2293 + t2294;
t2219 = t2241 - 0.2e1 * t2239;
t2141 = (-t2218 - t2293) * pkin(9) - t2219 * pkin(3) + t2169;
t2109 = t2260 * t2137 + t2256 * t2141;
t2243 = t2257 ^ 2;
t2244 = t2261 ^ 2;
t2295 = t2243 + t2244;
t2108 = -t2256 * t2137 + t2260 * t2141;
t2267 = -t2256 * qJDD(3) - t2260 * t2218;
t2185 = -qJD(4) * t2214 - t2267;
t2095 = (-t2185 + t2299) * qJ(5) + t2177 * pkin(4) + t2108;
t2201 = -pkin(4) * t2236 - qJ(5) * t2215;
t2288 = -t2260 * qJDD(3) + t2256 * t2218;
t2266 = -qJD(4) * t2215 - t2288;
t2099 = -pkin(4) * t2312 + qJ(5) * t2266 + t2236 * t2201 + t2109;
t2062 = t2247 * t2095 + t2250 * t2099 + t2190 * t2308;
t2150 = t2250 * t2185 + t2247 * t2266;
t2289 = t2185 * t2247 - t2250 * t2266;
t2290 = -t2255 * t2150 - t2259 * t2289;
t2129 = -t2150 + t2302;
t2287 = -qJDD(6) + t2292;
t2061 = t2250 * t2095 - t2247 * t2099 + t2192 * t2308;
t2051 = pkin(5) * t2148 + t2129 * pkin(10) + t2061;
t2171 = -pkin(5) * t2236 - pkin(10) * t2192;
t2053 = -pkin(5) * t2314 - pkin(10) * t2289 + t2236 * t2171 + t2062;
t2031 = t2051 * t2259 - t2053 * t2255;
t2032 = t2051 * t2255 + t2053 * t2259;
t2015 = t2031 * t2259 + t2032 * t2255;
t2016 = -t2031 * t2255 + t2032 * t2259;
t2007 = t2015 * t2250 + t2016 * t2247;
t2008 = -t2015 * t2247 + t2016 * t2250;
t2002 = -t2007 * t2256 + t2008 * t2260;
t2200 = t2261 * t2265;
t2136 = -t2200 - qJDD(3) * pkin(3) - t2317 * pkin(9) + (qJD(2) * t2216 + t2170) * t2257;
t2110 = -t2266 * pkin(4) - t2312 * qJ(5) + t2215 * t2201 + qJDD(5) + t2136;
t2079 = pkin(5) * t2289 - pkin(10) * t2314 + t2192 * t2171 + t2110;
t2000 = t2002 * t2261 + t2079 * t2257;
t2001 = t2007 * t2260 + t2008 * t2256;
t2285 = t2000 * t2258 - t2001 * t2262;
t2089 = -t2160 * t2296 + t2290;
t2264 = -t2259 * t2150 + t2255 * t2289;
t2091 = t2158 * t2296 + t2264;
t2057 = t2089 * t2255 + t2091 * t2259;
t2058 = t2089 * t2259 - t2091 * t2255;
t2039 = t2057 * t2250 + t2058 * t2247;
t2040 = -t2057 * t2247 + t2058 * t2250;
t2021 = -t2039 * t2256 + t2040 * t2260;
t2105 = -t2315 - t2316;
t2019 = t2021 * t2261 + t2105 * t2257;
t2020 = t2039 * t2260 + t2040 * t2256;
t2284 = t2019 * t2258 - t2020 * t2262;
t2043 = t2061 * t2250 + t2062 * t2247;
t2044 = -t2061 * t2247 + t2062 * t2250;
t2026 = -t2043 * t2256 + t2044 * t2260;
t2023 = t2026 * t2261 + t2110 * t2257;
t2025 = t2043 * t2260 + t2044 * t2256;
t2283 = t2023 * t2258 - t2025 * t2262;
t2116 = -t2287 - t2304;
t2117 = -t2310 - t2316;
t2086 = t2116 * t2259 + t2117 * t2255;
t2087 = -t2116 * t2255 + t2117 * t2259;
t2055 = t2086 * t2250 + t2087 * t2247;
t2056 = -t2086 * t2247 + t2087 * t2250;
t2038 = -t2055 * t2256 + t2056 * t2260;
t2088 = t2160 * t2318 - t2290;
t2030 = t2038 * t2261 + t2088 * t2257;
t2037 = t2055 * t2260 + t2056 * t2256;
t2282 = t2030 * t2258 - t2037 * t2262;
t2115 = t2287 - t2304;
t2138 = -t2310 - t2315;
t2100 = t2115 * t2255 + t2138 * t2259;
t2101 = t2115 * t2259 - t2138 * t2255;
t2063 = t2100 * t2250 + t2101 * t2247;
t2064 = -t2100 * t2247 + t2101 * t2250;
t2049 = -t2063 * t2256 + t2064 * t2260;
t2090 = -t2158 * t2318 - t2264;
t2034 = t2049 * t2261 + t2090 * t2257;
t2048 = t2063 * t2260 + t2064 * t2256;
t2281 = t2034 * t2258 - t2048 * t2262;
t2127 = -t2289 - t2301;
t2102 = t2127 * t2247 + t2129 * t2250;
t2103 = t2127 * t2250 - t2129 * t2247;
t2066 = -t2102 * t2256 + t2103 * t2260;
t2134 = -t2313 - t2314;
t2060 = t2066 * t2261 + t2134 * t2257;
t2065 = t2102 * t2260 + t2103 * t2256;
t2280 = t2060 * t2258 - t2065 * t2262;
t2078 = -t2108 * t2256 + t2109 * t2260;
t2068 = t2078 * t2261 + t2136 * t2257;
t2077 = t2108 * t2260 + t2109 * t2256;
t2279 = t2068 * t2258 - t2077 * t2262;
t2155 = -t2309 - t2314;
t2113 = t2148 * t2250 + t2155 * t2247;
t2114 = -t2148 * t2247 + t2155 * t2250;
t2085 = -t2113 * t2256 + t2114 * t2260;
t2126 = t2289 - t2301;
t2072 = t2085 * t2261 + t2126 * t2257;
t2084 = t2113 * t2260 + t2114 * t2256;
t2278 = t2072 * t2258 - t2084 * t2262;
t2147 = t2292 - t2303;
t2167 = -t2309 - t2313;
t2122 = t2147 * t2247 + t2167 * t2250;
t2124 = t2147 * t2250 - t2167 * t2247;
t2097 = -t2122 * t2256 + t2124 * t2260;
t2128 = t2150 + t2302;
t2074 = t2097 * t2261 + t2128 * t2257;
t2096 = t2122 * t2260 + t2124 * t2256;
t2277 = t2074 * t2258 - t2096 * t2262;
t2164 = -t2215 * t2297 - t2288;
t2166 = t2214 * t2297 + t2267;
t2131 = t2164 * t2260 - t2166 * t2256;
t2175 = -t2311 - t2312;
t2112 = t2131 * t2261 + t2175 * t2257;
t2130 = t2164 * t2256 + t2166 * t2260;
t2276 = t2112 * t2258 - t2130 * t2262;
t2161 = -t2170 * t2257 + t2200;
t2119 = -t2161 * t2257 + t2162 * t2261;
t2275 = t2119 * t2258 - t2169 * t2262;
t2187 = -t2309 - t2312;
t2146 = -t2177 * t2256 + t2187 * t2260;
t2163 = (qJD(4) - t2236) * t2215 + t2288;
t2121 = t2146 * t2261 + t2163 * t2257;
t2145 = t2177 * t2260 + t2187 * t2256;
t2274 = t2121 * t2258 - t2145 * t2262;
t2176 = t2292 - t2300;
t2193 = -t2309 - t2311;
t2157 = t2176 * t2260 - t2193 * t2256;
t2165 = t2185 + t2299;
t2125 = t2157 * t2261 + t2165 * t2257;
t2156 = t2176 * t2256 + t2193 * t2260;
t2273 = t2125 * t2258 - t2156 * t2262;
t2272 = t2258 * t2179 - t2262 * t2286;
t2235 = t2257 * t2263 * t2261;
t2226 = qJDD(3) + t2235;
t2233 = -t2244 * t2263 - t2317;
t2197 = -t2226 * t2257 + t2233 * t2261;
t2271 = t2197 * t2258 + t2219 * t2262;
t2227 = -qJDD(3) + t2235;
t2232 = -t2243 * t2263 - t2317;
t2198 = t2227 * t2261 - t2232 * t2257;
t2217 = 0.2e1 * t2293 + t2294;
t2270 = t2198 * t2258 - t2217 * t2262;
t2220 = t2295 * qJDD(2);
t2223 = t2295 * t2263;
t2269 = t2220 * t2258 + t2223 * t2262;
t2268 = qJDD(2) * t2262 - t2258 * t2263;
t2222 = -qJDD(2) * t2258 - t2262 * t2263;
t2207 = t2268 * t2252;
t2206 = t2222 * t2252;
t2205 = t2268 * t2249;
t2204 = t2222 * t2249;
t2196 = t2227 * t2257 + t2232 * t2261;
t2195 = t2226 * t2261 + t2233 * t2257;
t2194 = t2220 * t2262 - t2223 * t2258;
t2189 = t2269 * t2252;
t2188 = t2269 * t2249;
t2173 = t2198 * t2262 + t2217 * t2258;
t2172 = t2197 * t2262 - t2219 * t2258;
t2154 = -t2249 * t2196 + t2252 * t2270;
t2153 = -t2249 * t2195 + t2252 * t2271;
t2152 = t2252 * t2196 + t2249 * t2270;
t2151 = t2252 * t2195 + t2249 * t2271;
t2142 = t2179 * t2262 + t2258 * t2286;
t2133 = t2249 ^ 2 * t2224 + (-t2291 + t2272) * t2252;
t2132 = t2252 ^ 2 * t2307 + (t2272 - t2298) * t2249;
t2123 = t2157 * t2257 - t2165 * t2261;
t2120 = t2146 * t2257 - t2163 * t2261;
t2118 = t2161 * t2261 + t2162 * t2257;
t2111 = t2131 * t2257 - t2175 * t2261;
t2107 = t2119 * t2262 + t2169 * t2258;
t2106 = t2125 * t2262 + t2156 * t2258;
t2104 = t2121 * t2262 + t2145 * t2258;
t2094 = t2112 * t2262 + t2130 * t2258;
t2083 = -t2249 * t2123 + t2252 * t2273;
t2082 = t2252 * t2123 + t2249 * t2273;
t2081 = -t2249 * t2118 + t2252 * t2275;
t2080 = t2252 * t2118 + t2249 * t2275;
t2076 = -t2249 * t2120 + t2252 * t2274;
t2075 = t2252 * t2120 + t2249 * t2274;
t2073 = t2097 * t2257 - t2128 * t2261;
t2071 = t2085 * t2257 - t2126 * t2261;
t2070 = -t2249 * t2111 + t2252 * t2276;
t2069 = t2252 * t2111 + t2249 * t2276;
t2067 = t2078 * t2257 - t2136 * t2261;
t2059 = t2066 * t2257 - t2134 * t2261;
t2054 = t2074 * t2262 + t2096 * t2258;
t2052 = t2072 * t2262 + t2084 * t2258;
t2050 = t2068 * t2262 + t2077 * t2258;
t2047 = -t2249 * t2073 + t2252 * t2277;
t2046 = t2252 * t2073 + t2249 * t2277;
t2045 = t2060 * t2262 + t2065 * t2258;
t2042 = -t2249 * t2071 + t2252 * t2278;
t2041 = t2252 * t2071 + t2249 * t2278;
t2036 = -t2249 * t2067 + t2252 * t2279;
t2035 = t2252 * t2067 + t2249 * t2279;
t2033 = t2049 * t2257 - t2090 * t2261;
t2029 = t2038 * t2257 - t2088 * t2261;
t2028 = -t2249 * t2059 + t2252 * t2280;
t2027 = t2252 * t2059 + t2249 * t2280;
t2024 = t2034 * t2262 + t2048 * t2258;
t2022 = t2026 * t2257 - t2110 * t2261;
t2018 = t2021 * t2257 - t2105 * t2261;
t2017 = t2030 * t2262 + t2037 * t2258;
t2014 = -t2249 * t2033 + t2252 * t2281;
t2013 = t2252 * t2033 + t2249 * t2281;
t2012 = -t2249 * t2029 + t2252 * t2282;
t2011 = t2252 * t2029 + t2249 * t2282;
t2010 = t2023 * t2262 + t2025 * t2258;
t2009 = t2019 * t2262 + t2020 * t2258;
t2006 = -t2249 * t2022 + t2252 * t2283;
t2005 = t2252 * t2022 + t2249 * t2283;
t2004 = -t2249 * t2018 + t2252 * t2284;
t2003 = t2252 * t2018 + t2249 * t2284;
t1999 = t2002 * t2257 - t2079 * t2261;
t1998 = t2000 * t2262 + t2001 * t2258;
t1997 = -t2249 * t1999 + t2252 * t2285;
t1996 = t2252 * t1999 + t2249 * t2285;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2224 * t2248 + t2225 * t2251, 0, 0, 0, 0, 0, 0, -t2207 * t2248 + t2222 * t2251, -t2206 * t2248 - t2251 * t2268, 0, -t2133 * t2248 + t2142 * t2251, 0, 0, 0, 0, 0, 0, -t2153 * t2248 + t2172 * t2251, -t2154 * t2248 + t2173 * t2251, -t2189 * t2248 + t2194 * t2251, -t2081 * t2248 + t2107 * t2251, 0, 0, 0, 0, 0, 0, -t2076 * t2248 + t2104 * t2251, -t2083 * t2248 + t2106 * t2251, -t2070 * t2248 + t2094 * t2251, -t2036 * t2248 + t2050 * t2251, 0, 0, 0, 0, 0, 0, -t2042 * t2248 + t2052 * t2251, -t2047 * t2248 + t2054 * t2251, -t2028 * t2248 + t2045 * t2251, -t2006 * t2248 + t2010 * t2251, 0, 0, 0, 0, 0, 0, -t2012 * t2248 + t2017 * t2251, -t2014 * t2248 + t2024 * t2251, -t2004 * t2248 + t2009 * t2251, -t1997 * t2248 + t1998 * t2251; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2224 * t2251 + t2225 * t2248, 0, 0, 0, 0, 0, 0, t2207 * t2251 + t2222 * t2248, t2206 * t2251 - t2248 * t2268, 0, t2133 * t2251 + t2142 * t2248, 0, 0, 0, 0, 0, 0, t2153 * t2251 + t2172 * t2248, t2154 * t2251 + t2173 * t2248, t2189 * t2251 + t2194 * t2248, t2081 * t2251 + t2107 * t2248, 0, 0, 0, 0, 0, 0, t2076 * t2251 + t2104 * t2248, t2083 * t2251 + t2106 * t2248, t2070 * t2251 + t2094 * t2248, t2036 * t2251 + t2050 * t2248, 0, 0, 0, 0, 0, 0, t2042 * t2251 + t2052 * t2248, t2047 * t2251 + t2054 * t2248, t2028 * t2251 + t2045 * t2248, t2006 * t2251 + t2010 * t2248, 0, 0, 0, 0, 0, 0, t2012 * t2251 + t2017 * t2248, t2014 * t2251 + t2024 * t2248, t2004 * t2251 + t2009 * t2248, t1997 * t2251 + t1998 * t2248; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2307, 0, 0, 0, 0, 0, 0, t2205, t2204, 0, t2132, 0, 0, 0, 0, 0, 0, t2151, t2152, t2188, t2080, 0, 0, 0, 0, 0, 0, t2075, t2082, t2069, t2035, 0, 0, 0, 0, 0, 0, t2041, t2046, t2027, t2005, 0, 0, 0, 0, 0, 0, t2011, t2013, t2003, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2225, 0, 0, 0, 0, 0, 0, t2222, -t2268, 0, t2142, 0, 0, 0, 0, 0, 0, t2172, t2173, t2194, t2107, 0, 0, 0, 0, 0, 0, t2104, t2106, t2094, t2050, 0, 0, 0, 0, 0, 0, t2052, t2054, t2045, t2010, 0, 0, 0, 0, 0, 0, t2017, t2024, t2009, t1998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2224, 0, 0, 0, 0, 0, 0, t2207, t2206, 0, t2133, 0, 0, 0, 0, 0, 0, t2153, t2154, t2189, t2081, 0, 0, 0, 0, 0, 0, t2076, t2083, t2070, t2036, 0, 0, 0, 0, 0, 0, t2042, t2047, t2028, t2006, 0, 0, 0, 0, 0, 0, t2012, t2014, t2004, t1997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2307, 0, 0, 0, 0, 0, 0, t2205, t2204, 0, t2132, 0, 0, 0, 0, 0, 0, t2151, t2152, t2188, t2080, 0, 0, 0, 0, 0, 0, t2075, t2082, t2069, t2035, 0, 0, 0, 0, 0, 0, t2041, t2046, t2027, t2005, 0, 0, 0, 0, 0, 0, t2011, t2013, t2003, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2263, -qJDD(2), 0, t2179, 0, 0, 0, 0, 0, 0, t2197, t2198, t2220, t2119, 0, 0, 0, 0, 0, 0, t2121, t2125, t2112, t2068, 0, 0, 0, 0, 0, 0, t2072, t2074, t2060, t2023, 0, 0, 0, 0, 0, 0, t2030, t2034, t2019, t2000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2263, 0, -t2286, 0, 0, 0, 0, 0, 0, t2219, -t2217, t2223, -t2169, 0, 0, 0, 0, 0, 0, -t2145, -t2156, -t2130, -t2077, 0, 0, 0, 0, 0, 0, -t2084, -t2096, -t2065, -t2025, 0, 0, 0, 0, 0, 0, -t2037, -t2048, -t2020, -t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2265, 0, 0, 0, 0, 0, 0, t2195, t2196, 0, t2118, 0, 0, 0, 0, 0, 0, t2120, t2123, t2111, t2067, 0, 0, 0, 0, 0, 0, t2071, t2073, t2059, t2022, 0, 0, 0, 0, 0, 0, t2029, t2033, t2018, t1999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2233, t2227, t2241, t2162, 0, 0, 0, 0, 0, 0, t2146, t2157, t2131, t2078, 0, 0, 0, 0, 0, 0, t2085, t2097, t2066, t2026, 0, 0, 0, 0, 0, 0, t2038, t2049, t2021, t2002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2226, t2232, -t2294, t2161, 0, 0, 0, 0, 0, 0, -t2163, -t2165, -t2175, -t2136, 0, 0, 0, 0, 0, 0, -t2126, -t2128, -t2134, -t2110, 0, 0, 0, 0, 0, 0, -t2088, -t2090, -t2105, -t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2219, t2217, -t2223, t2169, 0, 0, 0, 0, 0, 0, t2145, t2156, t2130, t2077, 0, 0, 0, 0, 0, 0, t2084, t2096, t2065, t2025, 0, 0, 0, 0, 0, 0, t2037, t2048, t2020, t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2187, t2176, t2164, t2109, 0, 0, 0, 0, 0, 0, t2114, t2124, t2103, t2044, 0, 0, 0, 0, 0, 0, t2056, t2064, t2040, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2177, t2193, t2166, t2108, 0, 0, 0, 0, 0, 0, t2113, t2122, t2102, t2043, 0, 0, 0, 0, 0, 0, t2055, t2063, t2039, t2007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2163, t2165, t2175, t2136, 0, 0, 0, 0, 0, 0, t2126, t2128, t2134, t2110, 0, 0, 0, 0, 0, 0, t2088, t2090, t2105, t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2155, t2147, t2127, t2062, 0, 0, 0, 0, 0, 0, t2087, t2101, t2058, t2016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2148, t2167, t2129, t2061, 0, 0, 0, 0, 0, 0, t2086, t2100, t2057, t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2126, t2128, t2134, t2110, 0, 0, 0, 0, 0, 0, t2088, t2090, t2105, t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2117, t2115, t2089, t2032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2116, t2138, t2091, t2031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2088, t2090, t2105, t2079;];
f_new_reg  = t1;
