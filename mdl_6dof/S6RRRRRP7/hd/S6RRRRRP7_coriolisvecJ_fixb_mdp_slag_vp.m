% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP7_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRRP7_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP7_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP7_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP7_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRRP7_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:43:34
% EndTime: 2019-03-10 01:43:56
% DurationCPUTime: 14.72s
% Computational Cost: add. (14630->629), mult. (37306->837), div. (0->0), fcn. (29578->10), ass. (0->263)
t693 = sin(qJ(2));
t696 = cos(qJ(3));
t697 = cos(qJ(2));
t688 = sin(pkin(6));
t783 = qJD(1) * t693;
t758 = t688 * t783;
t689 = cos(pkin(6));
t784 = qJD(1) * t689;
t766 = pkin(1) * t784;
t634 = -pkin(8) * t758 + t697 * t766;
t713 = t688 * (pkin(2) * t693 - pkin(9) * t697);
t635 = qJD(1) * t713;
t692 = sin(qJ(3));
t738 = -t634 * t692 + t696 * t635;
t831 = -pkin(10) - pkin(9);
t759 = qJD(3) * t831;
t785 = qJD(1) * t688;
t810 = t696 * t697;
t858 = (pkin(3) * t693 - pkin(10) * t810) * t785 + t738 - t696 * t759;
t691 = sin(qJ(4));
t695 = cos(qJ(4));
t648 = t691 * t692 - t695 * t696;
t767 = qJD(3) + qJD(4);
t595 = t767 * t648;
t782 = qJD(1) * t697;
t757 = t688 * t782;
t606 = t648 * t757;
t865 = t595 - t606;
t649 = t691 * t696 + t692 * t695;
t792 = (-t757 + t767) * t649;
t694 = cos(qJ(5));
t773 = qJD(5) * t694;
t675 = qJD(2) + t784;
t728 = t692 * t758;
t619 = t675 * t696 - t728;
t620 = t675 * t692 + t696 * t758;
t720 = t695 * t619 - t620 * t691;
t854 = t720 * t694;
t864 = t773 - t854;
t690 = sin(qJ(5));
t851 = qJD(5) - t720;
t860 = t851 * t690;
t863 = pkin(5) * t860;
t729 = t692 * t757;
t789 = t696 * t634 + t692 * t635;
t569 = -pkin(10) * t729 + t789;
t650 = t692 * t759;
t668 = t831 * t692;
t669 = t831 * t696;
t718 = t668 * t695 + t669 * t691;
t862 = qJD(4) * t718 + (-t569 + t650) * t695 - t858 * t691;
t672 = t693 * t766;
t637 = pkin(8) * t757 + t672;
t778 = qJD(3) * t692;
t725 = -t637 + (-t729 + t778) * pkin(3);
t768 = qJD(1) * qJD(2);
t749 = t688 * t768;
t726 = t697 * t749;
t777 = qJD(3) * t696;
t589 = -qJD(3) * t728 + t675 * t777 + t696 * t726;
t779 = qJD(2) * t697;
t754 = t692 * t779;
t590 = (t693 * t777 + t754) * t785 + t675 * t778;
t721 = t695 * t589 - t691 * t590;
t700 = qJD(4) * t720 + t721;
t665 = -qJD(3) + t757;
t714 = -qJD(4) + t665;
t705 = t694 * t714;
t719 = t619 * t691 + t695 * t620;
t727 = t693 * t749;
t774 = qJD(5) * t690;
t474 = qJD(5) * t705 - t690 * t727 - t694 * t700 + t719 * t774;
t472 = t474 * t690;
t552 = -t690 * t714 + t694 * t719;
t699 = t690 * t700 - t694 * t727;
t475 = qJD(5) * t552 + t699;
t741 = t691 * t589 + t695 * t590;
t507 = t719 * qJD(4) + t741;
t503 = t694 * t507;
t550 = t690 * t719 + t705;
t501 = t690 * t507;
t800 = t773 * t851 + t501;
t861 = MDP(22) * t727 - t741 * MDP(21) + (t720 * t665 + t721) * MDP(20) - t720 ^ 2 * MDP(19) + (-MDP(18) * t720 + t719 * MDP(19) - MDP(21) * t665 - t851 * MDP(29)) * t719 + (t864 * t552 - t472) * MDP(25) + (-t552 * t719 - t851 * t854 + t800) * MDP(27) + (-t474 * t694 - t690 * t475 - t864 * t550 - t552 * t860) * MDP(26) + (t550 * t719 - t851 * t860 + t503) * MDP(28);
t604 = pkin(9) * t675 + t637;
t632 = (-pkin(2) * t697 - pkin(9) * t693 - pkin(1)) * t688;
t615 = qJD(1) * t632;
t565 = t604 * t696 + t615 * t692;
t539 = pkin(10) * t619 + t565;
t536 = t691 * t539;
t564 = -t604 * t692 + t696 * t615;
t538 = -pkin(10) * t620 + t564;
t487 = t538 * t695 - t536;
t775 = qJD(4) * t695;
t853 = -pkin(3) * t775 + t487;
t852 = pkin(11) * t758 - t862;
t859 = t792 * pkin(4) + t865 * pkin(11) + t725;
t636 = qJD(2) * t713;
t627 = qJD(1) * t636;
t812 = t688 * t693;
t676 = pkin(8) * t812;
t829 = pkin(1) * t697;
t638 = (t689 * t829 - t676) * qJD(2);
t628 = qJD(1) * t638;
t701 = -qJD(3) * t565 + t696 * t627 - t692 * t628;
t492 = pkin(3) * t727 - pkin(10) * t589 + t701;
t712 = -t604 * t778 + t615 * t777 + t692 * t627 + t696 * t628;
t499 = -pkin(10) * t590 + t712;
t529 = -pkin(3) * t665 + t538;
t776 = qJD(4) * t691;
t731 = -t691 * t492 - t695 * t499 - t529 * t775 + t539 * t776;
t444 = pkin(11) * t727 - t731;
t537 = t695 * t539;
t482 = t691 * t529 + t537;
t479 = -pkin(11) * t714 + t482;
t603 = -pkin(2) * t675 - t634;
t578 = -pkin(3) * t619 + t603;
t493 = -pkin(4) * t720 - pkin(11) * t719 + t578;
t457 = t479 * t694 + t493 * t690;
t629 = pkin(8) * t726 + qJD(2) * t672;
t563 = t590 * pkin(3) + t629;
t462 = t507 * pkin(4) - pkin(11) * t700 + t563;
t440 = -qJD(5) * t457 - t444 * t690 + t694 * t462;
t434 = pkin(5) * t507 + qJ(6) * t474 - qJD(6) * t552 + t440;
t439 = t694 * t444 + t690 * t462 - t479 * t774 + t493 * t773;
t436 = -qJ(6) * t475 - qJD(6) * t550 + t439;
t456 = -t479 * t690 + t694 * t493;
t447 = -qJ(6) * t552 + t456;
t446 = pkin(5) * t851 + t447;
t448 = -qJ(6) * t550 + t457;
t856 = (-t448 * t851 - t434) * t690 + (-t851 * t446 + t436) * t694;
t524 = pkin(4) * t719 - pkin(11) * t720;
t850 = -t578 * t720 + t731;
t684 = t694 * qJ(6);
t849 = -pkin(5) * t719 + t684 * t720;
t685 = t688 ^ 2;
t846 = -0.2e1 * t685 * t768;
t843 = MDP(5) * (t693 ^ 2 - t697 ^ 2);
t643 = t689 * t692 + t696 * t812;
t811 = t688 * t697;
t830 = pkin(1) * t693;
t631 = pkin(8) * t811 + (pkin(9) + t830) * t689;
t739 = -t631 * t692 + t696 * t632;
t547 = -pkin(3) * t811 - pkin(10) * t643 + t739;
t642 = -t689 * t696 + t692 * t812;
t790 = t696 * t631 + t692 * t632;
t558 = -pkin(10) * t642 + t790;
t798 = t691 * t547 + t695 * t558;
t496 = -pkin(11) * t811 + t798;
t583 = t695 * t642 + t643 * t691;
t584 = -t642 * t691 + t643 * t695;
t630 = t676 + (-pkin(2) - t829) * t689;
t588 = pkin(3) * t642 + t630;
t518 = pkin(4) * t583 - pkin(11) * t584 + t588;
t802 = t694 * t496 + t690 * t518;
t842 = t859 * t694;
t608 = t668 * t691 - t669 * t695;
t841 = qJD(4) * t608 + t650 * t691 + t858 * t695;
t511 = pkin(3) * t620 + t524;
t840 = t690 * t511 + t694 * t853;
t682 = -pkin(3) * t696 - pkin(2);
t591 = pkin(4) * t648 - pkin(11) * t649 + t682;
t839 = t591 * t773 + t690 * t859 - t694 * t852;
t730 = t695 * t492 - t691 * t499 - t529 * t776 - t539 * t775;
t445 = -pkin(4) * t727 - t730;
t481 = t695 * t529 - t536;
t478 = pkin(4) * t714 - t481;
t838 = -t445 * t694 - t456 * t719 + t478 * t774;
t837 = t445 * t690 + t457 * t719 + t478 * t773;
t834 = -t578 * t719 + t730;
t832 = t552 ^ 2;
t828 = pkin(3) * t695;
t827 = -qJ(6) - pkin(11);
t823 = t720 * t690;
t820 = t619 * t665;
t819 = t620 * t665;
t817 = t649 * t690;
t816 = t649 * t694;
t815 = t665 * t692;
t814 = t665 * t696;
t698 = qJD(1) ^ 2;
t813 = t685 * t698;
t600 = t694 * t608;
t680 = pkin(3) * t691 + pkin(11);
t809 = -qJ(6) - t680;
t807 = t446 - t447;
t581 = -t606 * t694 + t690 * t758;
t717 = qJ(6) * t595 - qJD(6) * t649;
t806 = qJ(6) * t581 - t600 * qJD(5) + t717 * t694 + t842 + ((qJ(6) * t649 - t591) * qJD(5) + t852) * t690 + t792 * pkin(5);
t580 = -t606 * t690 - t694 * t758;
t752 = t649 * t773;
t805 = (-qJD(5) * t608 + t717) * t690 + t839 + (-t752 + t580) * qJ(6);
t804 = t694 * t481 + t690 * t524;
t566 = t691 * t569;
t716 = pkin(4) * t758 - t566;
t797 = t716 + t841;
t683 = t694 * qJD(6);
t737 = qJD(5) * t809;
t795 = t683 - t840 + (qJ(6) * t720 + t737) * t690;
t509 = t694 * t511;
t794 = t694 * t737 - t509 + (-qJD(6) + t853) * t690 + t849;
t791 = t690 * t591 + t600;
t748 = qJD(5) * t827;
t788 = qJ(6) * t823 + t690 * t748 + t683 - t804;
t746 = -t481 * t690 + t694 * t524;
t787 = -qJD(6) * t690 + t694 * t748 - t746 + t849;
t755 = t688 * t779;
t781 = qJD(2) * t693;
t639 = t689 * pkin(1) * t781 + pkin(8) * t755;
t780 = qJD(2) * t696;
t770 = qJD(2) - t675;
t763 = t690 * t811;
t760 = -pkin(5) * t694 - pkin(4);
t756 = t688 * t781;
t751 = t685 * t782;
t745 = -t496 * t690 + t694 * t518;
t744 = t547 * t695 - t691 * t558;
t743 = t595 * t690 + t580;
t742 = t595 * t694 + t581;
t740 = t694 * t591 - t608 * t690;
t732 = MDP(4) * t685 * t693 * t697;
t597 = qJD(3) * t643 + t688 * t754;
t579 = pkin(3) * t597 + t639;
t486 = t538 * t691 + t537;
t724 = pkin(3) * t776 - t486;
t723 = pkin(1) * t846;
t495 = pkin(4) * t811 - t744;
t722 = -t478 * t720 - t507 * t680;
t598 = -qJD(3) * t642 + t696 * t755;
t702 = -qJD(3) * t790 + t696 * t636 - t638 * t692;
t510 = pkin(3) * t756 - pkin(10) * t598 + t702;
t711 = -t631 * t778 + t632 * t777 + t692 * t636 + t696 * t638;
t515 = -pkin(10) * t597 + t711;
t715 = t510 * t695 - t691 * t515 - t547 * t776 - t558 * t775;
t570 = t584 * t690 + t694 * t811;
t710 = t691 * t510 + t695 * t515 + t547 * t775 - t558 * t776;
t450 = pkin(11) * t756 + t710;
t522 = -qJD(4) * t583 - t597 * t691 + t598 * t695;
t523 = qJD(4) * t584 + t695 * t597 + t598 * t691;
t469 = pkin(4) * t523 - pkin(11) * t522 + t579;
t709 = t694 * t450 + t690 * t469 - t496 * t774 + t518 * t773;
t708 = -t743 + t752;
t707 = -t649 * t774 - t742;
t704 = t714 * t688;
t451 = -pkin(4) * t756 - t715;
t703 = -qJD(5) * t802 - t450 * t690 + t694 * t469;
t441 = pkin(5) * t475 + t445;
t681 = -pkin(4) - t828;
t667 = pkin(11) * t694 + t684;
t666 = t827 * t690;
t647 = t680 * t694 + t684;
t646 = t809 * t690;
t571 = t584 * t694 - t763;
t549 = t550 ^ 2;
t535 = -qJ(6) * t817 + t791;
t525 = pkin(5) * t648 - t649 * t684 + t740;
t484 = -qJD(5) * t763 + t522 * t690 + t584 * t773 - t694 * t756;
t483 = qJD(5) * t570 - t694 * t522 - t690 * t756;
t470 = t550 * pkin(5) + qJD(6) + t478;
t459 = -qJ(6) * t570 + t802;
t454 = pkin(5) * t583 - qJ(6) * t571 + t745;
t438 = -qJ(6) * t484 - qJD(6) * t570 + t709;
t437 = pkin(5) * t523 + qJ(6) * t483 - qJD(6) * t571 + t703;
t1 = [t843 * t846 + (-t704 - t751) * MDP(22) * t781 + (t436 * t459 + t448 * t438 + t434 * t454 + t446 * t437 + t441 * (pkin(5) * t570 + t495) + t470 * (pkin(5) * t484 + t451)) * MDP(33) + (-t628 * t689 - t638 * t675 + t697 * t723) * MDP(10) + (-t629 * t689 - t639 * t675 + t693 * t723) * MDP(9) + (t440 * t583 + t445 * t570 + t451 * t550 + t456 * t523 + t495 * t475 + t478 * t484 + t507 * t745 + t703 * t851) * MDP(30) + (-t439 * t583 + t445 * t571 + t451 * t552 - t457 * t523 - t495 * t474 - t478 * t483 - t507 * t802 - t709 * t851) * MDP(31) + (t507 * t583 + t523 * t851) * MDP(29) + (-t475 * t583 - t484 * t851 - t507 * t570 - t523 * t550) * MDP(28) + (-t474 * t583 - t483 * t851 + t507 * t571 + t523 * t552) * MDP(27) + (-t523 * t767 + (t720 * t781 + t507 * t697 + (t523 * t697 - t583 * t781) * qJD(1)) * t688) * MDP(21) + (-t584 * t507 + t522 * t720 - t523 * t719 - t583 * t700) * MDP(19) + (-t715 * t714 - t730 * t811 - t579 * t720 + t588 * t507 + t563 * t583 + t578 * t523 + (qJD(1) * t744 + t481) * t756) * MDP(23) + (t711 * t665 + t639 * t620 + t630 * t589 + t629 * t643 + t603 * t598 + (t712 * t697 + (-qJD(1) * t790 - t565) * t781) * t688) * MDP(17) + (-t598 * t665 + (-t589 * t697 + (qJD(1) * t643 + t620) * t781) * t688) * MDP(13) + (t597 * t665 + (t590 * t697 + (-qJD(1) * t642 + t619) * t781) * t688) * MDP(14) + (-t702 * t665 - t639 * t619 + t630 * t590 + t629 * t642 + t603 * t597 + (-t701 * t697 + (qJD(1) * t739 + t564) * t781) * t688) * MDP(16) + 0.2e1 * t732 * t768 + (MDP(6) * t755 - MDP(7) * t756) * (t675 + t784) + (t522 * t767 + (-t700 * t697 + t719 * t781 + (-t522 * t697 + t584 * t781) * qJD(1)) * t688) * MDP(20) + (t522 * t719 + t584 * t700) * MDP(18) + (t710 * t714 - t731 * t811 + t579 * t719 + t588 * t700 + t563 * t584 + t578 * t522 + (-qJD(1) * t798 - t482) * t756) * MDP(24) + (-t665 * t688 - t751) * MDP(15) * t781 + (-t589 * t642 - t590 * t643 - t597 * t620 + t598 * t619) * MDP(12) + (t589 * t643 + t598 * t620) * MDP(11) + (-t474 * t571 - t483 * t552) * MDP(25) + (t474 * t570 - t475 * t571 + t483 * t550 - t484 * t552) * MDP(26) + (-t434 * t571 - t436 * t570 - t437 * t552 - t438 * t550 + t446 * t483 - t448 * t484 + t454 * t474 - t459 * t475) * MDP(32); ((t865 * t697 + (qJD(2) * t649 - t719) * t693) * t785 - t865 * t767) * MDP(20) + (t563 * t649 - t578 * t865 + t682 * t700 + t862 * t714 + t725 * t719) * MDP(24) + (-t649 * t507 - t648 * t700 - t719 * t792 - t720 * t865) * MDP(19) + (t649 * t700 - t719 * t865) * MDP(18) + t813 * t843 + ((qJD(2) * t718 - t481) * MDP(23) + t665 * MDP(15) + (-qJD(2) * t608 + t482) * MDP(24) - t770 * MDP(7)) * t758 + (-t665 * t777 + (t665 * t810 + (qJD(2) * t692 - t620) * t693) * t785) * MDP(13) + (-t791 * t507 - t439 * t648 + t718 * t474 + t445 * t816 + (t608 * t774 - t839) * t851 + t797 * t552 - t792 * t457 + t707 * t478) * MDP(31) + (-t474 * t648 + t503 * t649 + t552 * t792 + t707 * t851) * MDP(27) + (-t475 * t648 - t501 * t649 - t550 * t792 - t708 * t851) * MDP(28) + (t507 * t648 + t792 * t851) * MDP(29) + (t740 * t507 + t440 * t648 - t718 * t475 + t445 * t817 + (-t608 * t773 + (-qJD(5) * t591 + t852) * t690 + t842) * t851 + t797 * t550 + t792 * t456 + t708 * t478) * MDP(30) + ((t792 * t697 + (-qJD(2) * t648 - t720) * t693) * t785 - t792 * t767) * MDP(21) + (t682 * t507 + t563 * t648 + t792 * t578 - t725 * t720 + (-t566 + t841) * t714) * MDP(23) + (pkin(8) * t727 + t634 * t675 + (-t689 * t768 + t813) * t829) * MDP(10) + (t637 * t675 + t813 * t830 - t629) * MDP(9) + (t474 * t525 - t475 * t535 - t806 * t552 - t805 * t550 + t743 * t448 + t742 * t446 + (-t434 * t694 - t436 * t690 + (t446 * t690 - t448 * t694) * qJD(5)) * t649) * MDP(32) - t698 * t732 + (t589 * t692 - t620 * t814) * MDP(11) + (-pkin(2) * t590 - t629 * t696 + t738 * t665 + t637 * t619 + (pkin(9) * t814 + t603 * t692) * qJD(3) + (-t564 * t693 + (-pkin(9) * t781 - t603 * t697) * t692) * t785) * MDP(16) + (t665 * t778 + (-t697 * t815 + (-t619 + t780) * t693) * t785) * MDP(14) + (-pkin(2) * t589 + t629 * t692 - t789 * t665 - t637 * t620 + (-pkin(9) * t815 + t603 * t696) * qJD(3) + (-t603 * t810 + (-pkin(9) * t780 + t565) * t693) * t785) * MDP(17) + (-t474 * t816 + t552 * t707) * MDP(25) + (t743 * t552 + t742 * t550 + (t472 - t475 * t694 + (t550 * t690 - t552 * t694) * qJD(5)) * t649) * MDP(26) + ((t589 - t820) * t696 + (-t590 + t819) * t692) * MDP(12) + (t436 * t535 + t434 * t525 + t441 * (pkin(5) * t817 - t718) + ((qJD(4) * t668 + t650) * t691 + (-qJD(4) * t669 + t858) * t695 + t708 * pkin(5) + t716) * t470 + t805 * t448 + t806 * t446) * MDP(33) + MDP(22) * t704 * t783 + t770 * MDP(6) * t757; (t436 * t647 + t434 * t646 + t441 * (t760 - t828) + (-t537 + (pkin(3) * qJD(4) - t538) * t691 + t863) * t470 + t795 * t448 + t794 * t446) * MDP(33) + (-t681 * t474 + t722 * t694 + t724 * t552 + (t680 * t774 + t840) * t851 + t837) * MDP(31) + (t681 * t475 + t722 * t690 + t724 * t550 + (-t680 * t773 + t690 * t853 - t509) * t851 + t838) * MDP(30) + (-t590 - t819) * MDP(14) + (-t486 * t714 + (t620 * t720 + t695 * t727 + t714 * t776) * pkin(3) + t834) * MDP(23) + (-t487 * t714 + (-t620 * t719 - t691 * t727 + t714 * t775) * pkin(3) + t850) * MDP(24) + MDP(15) * t727 + (-t565 * t665 - t603 * t620 + t701) * MDP(16) + (t474 * t646 - t475 * t647 - t795 * t550 - t794 * t552 + t856) * MDP(32) + (-t564 * t665 - t603 * t619 - t712) * MDP(17) + (t589 + t820) * MDP(13) - t620 * t619 * MDP(11) + (-t619 ^ 2 + t620 ^ 2) * MDP(12) + t861; (-t482 * t714 + t834) * MDP(23) + (-t481 * t714 + t850) * MDP(24) + (-pkin(4) * t475 - pkin(11) * t800 - t478 * t823 - t482 * t550 - t746 * t851 + t838) * MDP(30) + (pkin(4) * t474 + t804 * t851 - t482 * t552 - t478 * t854 + (t774 * t851 - t503) * pkin(11) + t837) * MDP(31) + (t474 * t666 - t475 * t667 - t788 * t550 - t787 * t552 + t856) * MDP(32) + (t436 * t667 + t434 * t666 + t441 * t760 + (-t482 + t863) * t470 + t788 * t448 + t787 * t446) * MDP(33) + t861; t552 * t550 * MDP(25) + (-t549 + t832) * MDP(26) + (t550 * t851 - t474) * MDP(27) + (-t699 + (-qJD(5) + t851) * t552) * MDP(28) + t507 * MDP(29) + (t457 * t851 - t478 * t552 + t440) * MDP(30) + (t456 * t851 + t478 * t550 - t439) * MDP(31) + (pkin(5) * t474 - t550 * t807) * MDP(32) + (t807 * t448 + (-t470 * t552 + t434) * pkin(5)) * MDP(33); (-t549 - t832) * MDP(32) + (t446 * t552 + t448 * t550 + t441) * MDP(33);];
tauc  = t1;
