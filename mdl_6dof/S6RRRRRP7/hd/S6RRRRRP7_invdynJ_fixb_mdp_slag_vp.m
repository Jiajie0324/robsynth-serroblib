% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP7_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP7_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP7_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP7_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP7_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP7_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP7_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRRP7_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 01:43:46
% EndTime: 2019-03-10 01:44:17
% DurationCPUTime: 23.27s
% Computational Cost: add. (17657->782), mult. (42317->1025), div. (0->0), fcn. (34137->14), ass. (0->336)
t862 = cos(qJ(3));
t863 = cos(qJ(2));
t1011 = t862 * t863;
t858 = sin(qJ(2));
t907 = pkin(2) * t858 - pkin(9) * t863;
t852 = sin(pkin(6));
t984 = qJD(1) * t852;
t775 = t907 * t984;
t764 = t862 * t775;
t945 = t858 * t984;
t853 = cos(pkin(6));
t983 = qJD(1) * t853;
t962 = pkin(1) * t983;
t774 = -pkin(8) * t945 + t863 * t962;
t857 = sin(qJ(3));
t864 = -pkin(10) - pkin(9);
t951 = qJD(3) * t864;
t1088 = -t774 * t857 + t764 + (pkin(3) * t858 - pkin(10) * t1011) * t984 - t862 * t951;
t856 = sin(qJ(4));
t861 = cos(qJ(4));
t792 = t856 * t857 - t861 * t862;
t965 = qJD(3) + qJD(4);
t730 = t965 * t792;
t982 = qJD(1) * t863;
t944 = t852 * t982;
t743 = t792 * t944;
t1097 = t730 - t743;
t793 = t856 * t862 + t857 * t861;
t994 = (-t944 + t965) * t793;
t860 = cos(qJ(5));
t833 = qJD(2) + t983;
t912 = t857 * t945;
t759 = t833 * t862 - t912;
t760 = t833 * t857 + t862 * t945;
t901 = t861 * t759 - t760 * t856;
t1084 = t901 * t860;
t973 = qJD(5) * t860;
t1096 = t1084 - t973;
t692 = qJD(5) - t901;
t855 = sin(qJ(5));
t1094 = t692 * t855;
t969 = qJD(1) * qJD(2);
t938 = t863 * t969;
t967 = qJDD(1) * t858;
t1092 = t938 + t967;
t1082 = t1092 * t852;
t968 = qJDD(1) * t853;
t832 = qJDD(2) + t968;
t978 = qJD(3) * t862;
t684 = -qJD(3) * t912 + t1082 * t862 + t857 * t832 + t833 * t978;
t980 = qJD(2) * t863;
t941 = t857 * t980;
t979 = qJD(3) * t857;
t685 = (qJD(1) * (t858 * t978 + t941) + t857 * t967) * t852 - t862 * t832 + t833 * t979;
t902 = t861 * t684 - t856 * t685;
t868 = t901 * qJD(4) + t902;
t939 = t858 * t969;
t911 = t852 * t939;
t966 = qJDD(1) * t863;
t831 = t852 * t966;
t964 = qJDD(3) - t831;
t772 = t911 + t964;
t877 = qJDD(4) + t772;
t812 = -qJD(3) + t944;
t895 = -qJD(4) + t812;
t881 = t860 * t895;
t900 = t759 * t856 + t861 * t760;
t974 = qJD(5) * t855;
t583 = qJD(5) * t881 - t855 * t877 - t860 * t868 + t900 * t974;
t580 = t583 * t855;
t668 = -t855 * t895 + t860 * t900;
t866 = t855 * t868 - t860 * t877;
t584 = qJD(5) * t668 + t866;
t929 = t856 * t684 + t861 * t685;
t609 = qJD(4) * t900 + t929;
t606 = qJDD(5) + t609;
t603 = t855 * t606;
t604 = t860 * t606;
t666 = t855 * t900 + t881;
t1095 = t877 * MDP(22) - t929 * MDP(21) + (t812 * t901 + t902) * MDP(20) - t901 ^ 2 * MDP(19) + (-MDP(18) * t901 + MDP(19) * t900 - MDP(21) * t812 - MDP(29) * t692) * t900 + (-t1096 * t668 - t580) * MDP(25) + (-t1096 * t692 - t668 * t900 + t603) * MDP(27) + (-t1094 * t692 + t666 * t900 + t604) * MDP(28) + (-t1094 * t668 + t1096 * t666 - t583 * t860 - t855 * t584) * MDP(26);
t777 = pkin(8) * t944 + t858 * t962;
t741 = pkin(9) * t833 + t777;
t897 = -pkin(2) * t863 - pkin(9) * t858 - pkin(1);
t771 = t897 * t852;
t753 = qJD(1) * t771;
t681 = t741 * t862 + t753 * t857;
t655 = pkin(10) * t759 + t681;
t652 = t856 * t655;
t680 = -t741 * t857 + t862 * t753;
t654 = -pkin(10) * t760 + t680;
t612 = t654 * t861 - t652;
t976 = qJD(4) * t861;
t1090 = -pkin(3) * t976 + t612;
t913 = t857 * t944;
t990 = t862 * t774 + t857 * t775;
t689 = -pkin(10) * t913 + t990;
t794 = t857 * t951;
t815 = t864 * t857;
t816 = t864 * t862;
t899 = t815 * t861 + t816 * t856;
t1093 = qJD(4) * t899 + (-t689 + t794) * t861 - t1088 * t856;
t909 = -t777 + (-t913 + t979) * pkin(3);
t961 = pkin(1) * qJD(2) * t853;
t917 = qJD(1) * t961;
t957 = pkin(1) * t968;
t952 = -pkin(8) * t831 - t858 * t957 - t863 * t917;
t876 = -pkin(8) * t911 - t952;
t703 = pkin(9) * t832 + t876;
t893 = t907 * qJD(2);
t705 = (qJD(1) * t893 + qJDD(1) * t897) * t852;
t870 = -qJD(3) * t681 - t857 * t703 + t862 * t705;
t592 = pkin(3) * t772 - pkin(10) * t684 + t870;
t892 = -t862 * t703 - t857 * t705 + t741 * t979 - t753 * t978;
t595 = -pkin(10) * t685 - t892;
t645 = -pkin(3) * t812 + t654;
t977 = qJD(4) * t856;
t916 = t856 * t592 + t861 * t595 + t645 * t976 - t655 * t977;
t558 = pkin(11) * t877 + t916;
t914 = pkin(8) * t1082 + t858 * t917 - t863 * t957;
t704 = -t832 * pkin(2) + t914;
t639 = t685 * pkin(3) + t704;
t563 = t609 * pkin(4) - pkin(11) * t868 + t639;
t653 = t861 * t655;
t602 = t856 * t645 + t653;
t599 = -pkin(11) * t895 + t602;
t740 = -pkin(2) * t833 - t774;
t699 = -pkin(3) * t759 + t740;
t615 = -pkin(4) * t901 - pkin(11) * t900 + t699;
t574 = t599 * t860 + t615 * t855;
t552 = -qJD(5) * t574 - t855 * t558 + t860 * t563;
t548 = pkin(5) * t606 + qJ(6) * t583 - qJD(6) * t668 + t552;
t889 = -t860 * t558 - t855 * t563 + t599 * t974 - t615 * t973;
t550 = -qJ(6) * t584 - qJD(6) * t666 - t889;
t573 = -t599 * t855 + t860 * t615;
t564 = -qJ(6) * t668 + t573;
t560 = pkin(5) * t692 + t564;
t565 = -qJ(6) * t666 + t574;
t859 = sin(qJ(1));
t1013 = t859 * t863;
t1054 = cos(qJ(1));
t947 = t1054 * t858;
t786 = t853 * t947 + t1013;
t851 = qJ(3) + qJ(4);
t845 = sin(t851);
t846 = cos(t851);
t950 = t852 * t1054;
t722 = t786 * t846 - t845 * t950;
t1019 = t852 * t859;
t1014 = t858 * t859;
t946 = t1054 * t863;
t788 = -t1014 * t853 + t946;
t726 = t1019 * t845 + t788 * t846;
t1020 = t852 * t858;
t768 = t1020 * t846 + t845 * t853;
t886 = g(1) * t726 + g(2) * t722 + g(3) * t768;
t1091 = -t886 + (-t565 * t692 - t548) * t855 + (-t560 * t692 + t550) * t860;
t1083 = pkin(11) * t945 - t1093;
t1089 = t994 * pkin(4) + pkin(11) * t1097 + t909;
t601 = t861 * t645 - t652;
t598 = pkin(4) * t895 - t601;
t1085 = t598 * t901;
t915 = -t861 * t592 + t856 * t595 + t645 * t977 + t655 * t976;
t559 = -pkin(4) * t877 + t915;
t721 = t786 * t845 + t846 * t950;
t725 = -t1019 * t846 + t788 * t845;
t767 = t1020 * t845 - t853 * t846;
t887 = g(1) * t725 + g(2) * t721 + g(3) * t767;
t878 = -t559 + t887;
t640 = pkin(4) * t900 - pkin(11) * t901;
t626 = pkin(3) * t760 + t640;
t1081 = t1090 * t860 + t855 * t626;
t1080 = g(1) * t788 + g(2) * t786;
t1017 = t852 * t863;
t785 = -t853 * t946 + t1014;
t787 = t1013 * t853 + t947;
t880 = -g(1) * t787 - g(2) * t785 + g(3) * t1017;
t1079 = -t699 * t901 + t886 - t916;
t1078 = t722 * t855 - t785 * t860;
t1030 = t785 * t855;
t1077 = t722 * t860 + t1030;
t847 = t860 * qJ(6);
t1076 = -pkin(5) * t900 + t847 * t901;
t1070 = t880 * t845;
t624 = t860 * t626;
t840 = pkin(3) * t856 + pkin(11);
t1010 = -qJ(6) - t840;
t923 = qJD(5) * t1010;
t1069 = -t860 * t923 - t1076 + t624 + (qJD(6) - t1090) * t855;
t1035 = t901 * t855;
t844 = t860 * qJD(6);
t1068 = -qJ(6) * t1035 - t855 * t923 + t1081 - t844;
t611 = t654 * t856 + t653;
t908 = pkin(3) * t977 - t611;
t1018 = t852 * t862;
t783 = t1018 * t858 + t853 * t857;
t1053 = pkin(1) * t858;
t987 = pkin(8) * t1017 + t853 * t1053;
t770 = pkin(9) * t853 + t987;
t925 = -t770 * t857 + t862 * t771;
t663 = -pkin(3) * t1017 - pkin(10) * t783 + t925;
t782 = t1020 * t857 - t853 * t862;
t991 = t862 * t770 + t857 * t771;
t674 = -pkin(10) * t782 + t991;
t1000 = t856 * t663 + t861 * t674;
t618 = -pkin(11) * t1017 + t1000;
t708 = t861 * t782 + t783 * t856;
t709 = -t782 * t856 + t783 * t861;
t1052 = pkin(3) * t782;
t834 = pkin(8) * t1020;
t769 = t834 + (-pkin(1) * t863 - pkin(2)) * t853;
t715 = t769 + t1052;
t633 = pkin(4) * t708 - pkin(11) * t709 + t715;
t1003 = t860 * t618 + t855 * t633;
t1067 = t1089 * t860;
t682 = t856 * t689;
t746 = t815 * t856 - t816 * t861;
t1066 = qJD(4) * t746 + t1088 * t861 + t794 * t856 - t682;
t687 = -t726 * t855 + t787 * t860;
t1012 = t860 * t863;
t955 = t852 * t1012;
t1065 = g(2) * t1078 - g(3) * (-t768 * t855 - t955) - g(1) * t687;
t843 = pkin(3) * t862 + pkin(2);
t720 = pkin(4) * t792 - pkin(11) * t793 - t843;
t1064 = -t1083 * t860 + t1089 * t855 + t720 * t973;
t1062 = -t573 * t900 + t598 * t974;
t1061 = t574 * t900 + t598 * t973 - t855 * t878;
t1059 = -t699 * t900 + t887 - t915;
t1055 = t668 ^ 2;
t1051 = pkin(3) * t861;
t589 = t666 * pkin(5) + qJD(6) + t598;
t1050 = pkin(4) * t589;
t1042 = g(2) * t859;
t1040 = g(3) * t852;
t854 = -qJ(6) - pkin(11);
t1039 = MDP(6) * t852;
t1033 = t759 * t812;
t1032 = t760 * t812;
t1028 = t786 * t857;
t1027 = t787 * t855;
t1026 = t793 * t855;
t1025 = t793 * t860;
t1024 = t832 * MDP(8);
t1023 = t846 * t855;
t1022 = t846 * t860;
t848 = t852 ^ 2;
t1021 = t848 * qJD(1) ^ 2;
t1016 = t853 * t863;
t1015 = t855 * t863;
t735 = t860 * t746;
t1009 = -t564 + t560;
t707 = -t743 * t860 + t855 * t945;
t898 = qJ(6) * t730 - qJD(6) * t793;
t1008 = qJ(6) * t707 - t735 * qJD(5) + t898 * t860 + t1067 + ((qJ(6) * t793 - t720) * qJD(5) + t1083) * t855 + t994 * pkin(5);
t706 = -t743 * t855 - t860 * t945;
t940 = t793 * t973;
t1007 = (-qJD(5) * t746 + t898) * t855 + t1064 + (-t940 + t706) * qJ(6);
t1006 = t860 * t601 + t855 * t640;
t999 = pkin(4) * t945 + t1066;
t841 = pkin(5) * t860 + pkin(4);
t997 = -t721 * t841 - t722 * t854;
t996 = -t725 * t841 - t726 * t854;
t993 = t855 * t720 + t735;
t992 = -t767 * t841 - t768 * t854;
t934 = qJD(5) * t854;
t989 = -t1006 + t844 + (qJ(6) * t901 + t934) * t855;
t636 = t860 * t640;
t988 = t860 * t934 - t636 + (-qJD(6) + t601) * t855 + t1076;
t942 = t852 * t980;
t779 = pkin(8) * t942 + t858 * t961;
t849 = t858 ^ 2;
t986 = -t863 ^ 2 + t849;
t981 = qJD(2) * t858;
t975 = qJD(5) * t692;
t971 = qJD(2) - t833;
t963 = 0.2e1 * t848;
t956 = t863 * t1021;
t818 = t852 * t1015;
t949 = t857 * t1054;
t948 = t862 * t1054;
t943 = t852 * t981;
t933 = qJDD(4) + t964;
t932 = -t618 * t855 + t860 * t633;
t931 = t663 * t861 - t856 * t674;
t928 = t730 * t855 + t706;
t927 = t730 * t860 + t707;
t926 = t860 * t720 - t746 * t855;
t924 = t786 * t862 - t852 * t949;
t920 = t833 + t983;
t918 = t832 + t968;
t732 = qJD(3) * t783 + t852 * t941;
t700 = pkin(3) * t732 + t779;
t906 = -g(1) * t721 + g(2) * t725;
t617 = pkin(4) * t1017 - t931;
t903 = -t840 * t606 - t1085;
t733 = -qJD(3) * t782 + t862 * t942;
t776 = t852 * t893;
t778 = (pkin(1) * t1016 - t834) * qJD(2);
t871 = -qJD(3) * t991 + t862 * t776 - t778 * t857;
t625 = pkin(3) * t943 - pkin(10) * t733 + t871;
t891 = -t770 * t979 + t771 * t978 + t857 * t776 + t862 * t778;
t630 = -pkin(10) * t732 + t891;
t896 = t625 * t861 - t856 * t630 - t663 * t977 - t674 * t976;
t690 = t709 * t855 + t955;
t736 = t1018 * t859 - t788 * t857;
t890 = t856 * t625 + t861 * t630 + t663 * t976 - t674 * t977;
t567 = pkin(11) * t943 + t890;
t637 = -qJD(4) * t708 - t732 * t856 + t733 * t861;
t638 = qJD(4) * t709 + t861 * t732 + t733 * t856;
t588 = pkin(4) * t638 - pkin(11) * t637 + t700;
t888 = t860 * t567 + t855 * t588 - t618 * t974 + t633 * t973;
t885 = -t852 * t948 - t1028;
t884 = -t928 + t940;
t883 = -t793 * t974 - t927;
t875 = -pkin(9) * t772 - t740 * t812;
t872 = -qJD(5) * t1003 - t567 * t855 + t860 * t588;
t869 = pkin(9) * qJD(3) * t812 - t704 - t880;
t555 = t584 * pkin(5) + qJDD(6) + t559;
t842 = -pkin(4) - t1051;
t814 = pkin(11) * t860 + t847;
t813 = t854 * t855;
t791 = t840 * t860 + t847;
t790 = t1010 * t855;
t737 = t1019 * t857 + t788 * t862;
t691 = t709 * t860 - t818;
t688 = t726 * t860 + t1027;
t665 = t666 ^ 2;
t651 = -qJ(6) * t1026 + t993;
t641 = pkin(5) * t792 - t793 * t847 + t926;
t608 = -qJD(5) * t818 + t637 * t855 + t709 * t973 - t860 * t943;
t607 = qJD(5) * t690 - t860 * t637 - t855 * t943;
t576 = -qJ(6) * t690 + t1003;
t571 = pkin(5) * t708 - qJ(6) * t691 + t932;
t568 = -pkin(4) * t943 - t896;
t554 = -qJ(6) * t608 - qJD(6) * t690 + t888;
t553 = pkin(5) * t638 + qJ(6) * t607 - qJD(6) * t691 + t872;
t1 = [(t550 * t576 + t565 * t554 + t548 * t571 + t560 * t553 + t555 * (pkin(5) * t690 + t617) + t589 * (pkin(5) * t608 - t896) - g(1) * (-t859 * pkin(1) - pkin(5) * t1030 + t721 * t854 - t722 * t841 + t785 * t864 - t786 * t843) - g(2) * (pkin(1) * t1054 + pkin(5) * t1027 - t725 * t854 + t726 * t841 - t787 * t864 + t788 * t843)) * MDP(33) + ((qJDD(1) * t849 + 0.2e1 * t858 * t938) * MDP(4) + 0.2e1 * (t858 * t966 - t969 * t986) * MDP(5)) * t848 + (-pkin(1) * t1092 * t963 - g(1) * t785 + g(2) * t787 - t778 * t833 - t987 * t832 - t876 * t853) * MDP(10) + (-g(1) * t1028 - g(2) * t736 + t769 * t684 + t704 * t783 + t740 * t733 + t779 * t760 - t991 * t772 + t891 * t812) * MDP(17) + (-t638 * t965 - t708 * t933) * MDP(21) + (g(1) * t924 - g(2) * t737 + t769 * t685 + t704 * t782 + t740 * t732 - t779 * t759 + t925 * t772 - t871 * t812) * MDP(16) + (t637 * t965 + t709 * t933) * MDP(20) + (g(1) * t722 - g(2) * t726 + t1017 * t915 + t601 * t943 + t715 * t609 + t699 * t638 + t639 * t708 - t700 * t901 + t877 * t931 - t895 * t896) * MDP(23) + ((-g(1) * t948 - t681 * t981 - t863 * t892) * MDP(17) + (t901 * t981 + t609 * t863 + (t638 * t863 - t708 * t981) * qJD(1)) * MDP(21) + (t680 * t981 - t863 * t870) * MDP(16) + (-t684 * t863 + t760 * t981) * MDP(13) + (-t933 * t863 + (-0.2e1 * t944 + t965) * t981) * MDP(22) + (t863 * t918 - t920 * t981) * MDP(7) + (-t772 * t863 - t812 * t981) * MDP(15) + (t685 * t863 + t759 * t981) * MDP(14) + (-t868 * t863 + t900 * t981 + (-t637 * t863 + t709 * t981) * qJD(1)) * MDP(20) + (-t981 * t1050 - g(1) * (pkin(3) * t949 + pkin(8) * t1054) - (pkin(3) * t857 + pkin(8)) * t1042) * MDP(33)) * t852 + (-t709 * t609 + t637 * t901 - t638 * t900 - t708 * t868) * MDP(19) + (g(1) * t1077 - g(2) * t688 + t552 * t708 + t559 * t690 + t568 * t666 + t573 * t638 + t617 * t584 + t598 * t608 + t932 * t606 + t872 * t692) * MDP(30) + (-g(1) * t1078 - g(2) * t687 - t1003 * t606 + t559 * t691 + t568 * t668 - t574 * t638 - t617 * t583 - t598 * t607 - t888 * t692 + t889 * t708) * MDP(31) + (-t548 * t691 - t550 * t690 - t553 * t668 - t554 * t666 + t560 * t607 - t565 * t608 + t571 * t583 - t576 * t584 - t906) * MDP(32) + (t637 * t900 + t709 * t868) * MDP(18) + (-t1000 * t877 + t1017 * t916 - t602 * t943 + t699 * t637 + t639 * t709 + t700 * t900 + t715 * t868 + t890 * t895 + t906) * MDP(24) + (-t779 * t833 - t834 * t832 - t914 * t853 + g(1) * t786 - g(2) * t788 + (t832 * t1016 + (-t939 + t966) * t963) * pkin(1)) * MDP(9) + qJDD(1) * MDP(1) + (t732 * t812 - t772 * t782) * MDP(14) + (-t733 * t812 + t772 * t783) * MDP(13) + (g(1) * t859 - g(2) * t1054) * MDP(2) + (g(1) * t1054 + t1042) * MDP(3) + t853 * t1024 + (t858 * t918 + t920 * t980) * t1039 + (-t583 * t691 - t607 * t668) * MDP(25) + (t583 * t690 - t584 * t691 + t607 * t666 - t608 * t668) * MDP(26) + (t606 * t708 + t638 * t692) * MDP(29) + (-t584 * t708 - t606 * t690 - t608 * t692 - t638 * t666) * MDP(28) + (-t583 * t708 + t606 * t691 - t607 * t692 + t638 * t668) * MDP(27) + (t684 * t783 + t733 * t760) * MDP(11) + (-t684 * t782 - t685 * t783 - t732 * t760 + t733 * t759) * MDP(12); (-t993 * t606 + t889 * t792 + t899 * t583 + t559 * t1025 - g(1) * (t1023 * t787 + t788 * t860) - g(2) * (t1023 * t785 + t786 * t860) - (-t1015 * t846 + t858 * t860) * t1040 + (t746 * t974 - t1064) * t692 + t999 * t668 - t994 * t574 + t883 * t598) * MDP(31) + (t583 * t641 - t584 * t651 - t1008 * t668 - t1007 * t666 + t928 * t565 + t927 * t560 - t1070 + (-t548 * t860 - t550 * t855 + (t560 * t855 - t565 * t860) * qJD(5)) * t793) * MDP(32) + (t606 * t792 + t692 * t994) * MDP(29) + (-t792 * t877 + t895 * t994) * MDP(21) + (pkin(1) * t956 + t774 * t833 + (pkin(8) * t969 + g(3)) * t1020 + t952 + t1080) * MDP(10) + (-t583 * t792 + t604 * t793 + t668 * t994 + t692 * t883) * MDP(27) + (t1066 * t895 - t843 * t609 + t639 * t792 + t699 * t994 - t846 * t880 + t877 * t899 - t901 * t909) * MDP(23) + (t812 * MDP(15) - t680 * MDP(16) + t681 * MDP(17) - MDP(20) * t900 - MDP(21) * t901 + MDP(22) * t895 - MDP(23) * t601 + MDP(24) * t602 - MDP(7) * t971) * t945 + (t1097 * t895 + t793 * t877) * MDP(20) + (t1093 * t895 - t1097 * t699 + t639 * t793 - t746 * t877 - t843 * t868 + t900 * t909 + t1070) * MDP(24) + (-t1097 * t901 - t793 * t609 - t792 * t868 - t900 * t994) * MDP(19) + (-t1097 * t900 + t793 * t868) * MDP(18) + (-t1032 * t862 + t684 * t857) * MDP(11) + ((t684 - t1033) * t862 + (-t685 + t1032) * t857) * MDP(12) + (-t812 * t978 + t857 * t772 + (t1011 * t812 - t760 * t858) * t984) * MDP(13) - t858 * MDP(4) * t956 + (t812 * t979 + t772 * t862 + (-t812 * t857 * t863 - t759 * t858) * t984) * MDP(14) + t1024 + (-t1025 * t583 + t668 * t883) * MDP(25) + (-t584 * t792 - t603 * t793 - t666 * t994 - t692 * t884) * MDP(28) + (-pkin(2) * t685 + t777 * t759 + t764 * t812 + (-t774 * t812 + t875) * t857 + t869 * t862) * MDP(16) + (-pkin(2) * t684 - t777 * t760 - t812 * t990 - t857 * t869 + t862 * t875) * MDP(17) + t986 * MDP(5) * t1021 + t831 * MDP(7) + (t928 * t668 + t927 * t666 + (t580 - t584 * t860 + (t666 * t855 - t668 * t860) * qJD(5)) * t793) * MDP(26) + (t926 * t606 + t552 * t792 - t899 * t584 + t559 * t1026 - g(1) * (-t1022 * t787 + t788 * t855) - g(2) * (-t1022 * t785 + t786 * t855) - (t1012 * t846 + t855 * t858) * t1040 + (-t746 * t973 + (-qJD(5) * t720 + t1083) * t855 + t1067) * t692 + t999 * t666 + t994 * t573 + t884 * t598) * MDP(30) + (t550 * t651 + t548 * t641 + t555 * (pkin(5) * t1026 - t899) + (-t682 + (qJD(4) * t815 + t794) * t856 + (-qJD(4) * t816 + t1088) * t861 + t884 * pkin(5)) * t589 + t1007 * t565 + t1008 * t560 + qJD(1) * t1050 * t1020 - t880 * (t841 * t846 - t845 * t854 + t843) + (-g(3) * t1020 - t1080) * (pkin(5) * t855 - t864)) * MDP(33) + (t1021 * t1053 + t777 * t833 - t880 - t914) * MDP(9) + (t971 * t982 + t967) * t1039; (-t611 * t895 + (t760 * t901 + t861 * t877 + t895 * t977) * pkin(3) + t1059) * MDP(23) + (-t612 * t895 + (-t760 * t900 - t856 * t877 + t895 * t976) * pkin(3) + t1079) * MDP(24) + (t550 * t791 + t548 * t790 + t555 * (-t841 - t1051) - g(1) * (pkin(3) * t736 + t996) - g(2) * (pkin(3) * t885 + t997) - g(3) * (t992 - t1052) + ((-t1035 + t974) * pkin(5) + t908) * t589 - t1068 * t565 - t1069 * t560) * MDP(33) + (-t1032 - t685) * MDP(14) + (-t842 * t583 + t903 * t860 + t908 * t668 + (t840 * t974 + t1081) * t692 + t1061) * MDP(31) + (t842 * t584 - t624 * t692 + t908 * t666 + (t1090 * t692 + t903) * t855 + (-t840 * t975 + t878) * t860 + t1062) * MDP(30) + (t684 + t1033) * MDP(13) + (t1068 * t666 + t1069 * t668 + t583 * t790 - t584 * t791 + t1091) * MDP(32) + (g(1) * t737 + g(2) * t924 + g(3) * t783 - t680 * t812 - t740 * t759 + t892) * MDP(17) + (-g(1) * t736 - g(2) * t885 + g(3) * t782 - t681 * t812 - t740 * t760 + t870) * MDP(16) - t760 * t759 * MDP(11) + (-t759 ^ 2 + t760 ^ 2) * MDP(12) + t772 * MDP(15) + t1095; (-t602 * t895 + t1059) * MDP(23) + (-t601 * t895 + t1079) * MDP(24) + (-pkin(4) * t584 - t602 * t666 - t636 * t692 + (-pkin(11) * t606 + t601 * t692 - t1085) * t855 + (-pkin(11) * t975 + t878) * t860 + t1062) * MDP(30) + (pkin(4) * t583 + t1006 * t692 - t602 * t668 - t598 * t1084 + (t692 * t974 - t604) * pkin(11) + t1061) * MDP(31) + (t583 * t813 - t584 * t814 - t989 * t666 - t988 * t668 + t1091) * MDP(32) + (t550 * t814 + t548 * t813 - t555 * t841 - g(1) * t996 - g(2) * t997 - g(3) * t992 + (pkin(5) * t1094 - t602) * t589 + t989 * t565 + t988 * t560) * MDP(33) + t1095; t668 * t666 * MDP(25) + (-t665 + t1055) * MDP(26) + (t666 * t692 - t583) * MDP(27) + (-t866 + (-qJD(5) + t692) * t668) * MDP(28) + t606 * MDP(29) + (t574 * t692 - t598 * t668 + t1065 + t552) * MDP(30) + (t573 * t692 + t598 * t666 + g(1) * t688 + g(2) * t1077 - g(3) * (-t768 * t860 + t818) + t889) * MDP(31) + (pkin(5) * t583 - t1009 * t666) * MDP(32) + (t1009 * t565 + (-t589 * t668 + t1065 + t548) * pkin(5)) * MDP(33); (-t665 - t1055) * MDP(32) + (t560 * t668 + t565 * t666 + t555 - t887) * MDP(33);];
tau  = t1;
