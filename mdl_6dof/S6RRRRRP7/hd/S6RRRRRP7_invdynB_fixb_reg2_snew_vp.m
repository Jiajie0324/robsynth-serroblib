% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 05:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:32:43
% EndTime: 2019-05-08 05:34:13
% DurationCPUTime: 52.24s
% Computational Cost: add. (460257->962), mult. (981630->1493), div. (0->0), fcn. (804037->12), ass. (0->724)
t1133 = sin(qJ(5));
t1132 = cos(pkin(6));
t1123 = qJD(1) * t1132 + qJD(2);
t1135 = sin(qJ(3));
t1140 = cos(qJ(3));
t1131 = sin(pkin(6));
t1136 = sin(qJ(2));
t1267 = t1131 * t1136;
t1250 = qJD(1) * t1267;
t1088 = t1123 * t1140 - t1135 * t1250;
t1089 = t1123 * t1135 + t1140 * t1250;
t1134 = sin(qJ(4));
t1139 = cos(qJ(4));
t1058 = t1088 * t1134 + t1089 * t1139;
t1259 = qJDD(1) * t1136;
t1141 = cos(qJ(2));
t1287 = qJD(1) * t1141;
t1095 = (qJD(2) * t1287 + t1259) * t1131;
t1234 = qJDD(1) * t1132 + qJDD(2);
t1046 = t1088 * qJD(3) + t1140 * t1095 + t1135 * t1234;
t1235 = t1095 * t1135 - t1140 * t1234;
t1176 = qJD(3) * t1089 + t1235;
t1237 = t1134 * t1046 + t1139 * t1176;
t965 = -t1058 * qJD(4) - t1237;
t964 = qJDD(5) - t965;
t1138 = cos(qJ(5));
t1266 = t1131 * t1141;
t1249 = qJD(1) * t1266;
t1115 = -qJD(3) + t1249;
t1186 = -qJD(4) + t1115;
t1033 = t1058 * t1133 + t1138 * t1186;
t1035 = t1138 * t1058 - t1133 * t1186;
t975 = t1035 * t1033;
t900 = t964 - t975;
t1300 = t1133 * t900;
t1293 = t1138 * t900;
t1260 = qJDD(1) * t1131;
t1096 = -qJD(2) * t1250 + t1141 * t1260;
t1103 = t1123 * t1250;
t1074 = -t1103 + t1096;
t1341 = t1074 * t1132;
t1340 = t900 * pkin(5);
t1179 = t1186 ^ 2;
t1240 = -qJDD(3) + t1096;
t1233 = -qJDD(4) + t1240;
t1056 = -t1139 * t1088 + t1089 * t1134;
t966 = -t1056 * qJD(4) + t1139 * t1046 - t1134 * t1176;
t913 = -t1033 * qJD(5) - t1133 * t1233 + t1138 * t966;
t1053 = qJD(5) + t1056;
t988 = t1053 * t1033;
t1339 = -t988 + t913;
t1042 = t1056 * t1186;
t1338 = t1042 + t966;
t1279 = t1056 * t1058;
t1165 = -t1233 - t1279;
t1337 = t1134 * t1165;
t1276 = t1088 * t1089;
t1185 = -t1240 + t1276;
t1336 = t1135 * t1185;
t1335 = t1139 * t1165;
t1334 = t1140 * t1185;
t1075 = t1088 * t1115;
t1017 = -t1075 - t1046;
t1015 = -t1075 + t1046;
t1104 = t1123 * t1249;
t1070 = t1104 + t1095;
t1238 = t1133 * t966 + t1138 * t1233;
t880 = (qJD(5) - t1053) * t1035 + t1238;
t1018 = (qJD(3) + t1115) * t1089 + t1235;
t1031 = t1033 ^ 2;
t1032 = t1035 ^ 2;
t1052 = t1053 ^ 2;
t1054 = t1056 ^ 2;
t1055 = t1058 ^ 2;
t1333 = t1088 ^ 2;
t1087 = t1089 ^ 2;
t1110 = t1115 ^ 2;
t1332 = t1123 ^ 2;
t955 = -t1052 - t1031;
t841 = t1133 * t955 + t1293;
t1331 = pkin(4) * t841;
t901 = t964 + t975;
t1301 = t1133 * t901;
t963 = -t1032 - t1052;
t846 = t1138 * t963 - t1301;
t1330 = pkin(4) * t846;
t1137 = sin(qJ(1));
t1142 = cos(qJ(1));
t884 = -t988 - t913;
t809 = -t1133 * t884 - t1138 * t880;
t942 = -t1031 - t1032;
t779 = t1134 * t809 - t1139 * t942;
t780 = t1134 * t942 + t1139 * t809;
t716 = -t1135 * t779 + t1140 * t780;
t807 = -t1133 * t880 + t1138 * t884;
t1218 = t1136 * t716 - t1141 * t807;
t715 = t1135 * t780 + t1140 * t779;
t644 = -t1131 * t715 + t1132 * t1218;
t684 = t1136 * t807 + t1141 * t716;
t603 = t1137 * t684 + t1142 * t644;
t1329 = pkin(7) * t603;
t842 = t1138 * t955 - t1300;
t879 = (qJD(5) + t1053) * t1035 + t1238;
t790 = t1134 * t842 - t1139 * t879;
t791 = t1134 * t879 + t1139 * t842;
t728 = -t1135 * t790 + t1140 * t791;
t1216 = t1136 * t728 - t1141 * t841;
t727 = t1135 * t791 + t1140 * t790;
t656 = -t1131 * t727 + t1132 * t1216;
t700 = t1136 * t841 + t1141 * t728;
t616 = t1137 * t700 + t1142 * t656;
t1328 = pkin(7) * t616;
t1294 = t1138 * t901;
t847 = -t1133 * t963 - t1294;
t793 = t1134 * t847 - t1139 * t1339;
t794 = t1134 * t1339 + t1139 * t847;
t731 = -t1135 * t793 + t1140 * t794;
t1215 = t1136 * t731 - t1141 * t846;
t730 = t1135 * t794 + t1140 * t793;
t663 = -t1131 * t730 + t1132 * t1215;
t703 = t1136 * t846 + t1141 * t731;
t620 = t1137 * t703 + t1142 * t663;
t1327 = pkin(7) * t620;
t1326 = pkin(9) * t715;
t1325 = pkin(9) * t727;
t1324 = pkin(9) * t730;
t1323 = pkin(10) * t779;
t1322 = pkin(10) * t790;
t1321 = pkin(10) * t793;
t1320 = pkin(11) * t807;
t1319 = pkin(11) * t841;
t1318 = pkin(11) * t846;
t1317 = pkin(2) * t1136;
t1316 = pkin(2) * t1141;
t1315 = pkin(4) * t1134;
t1314 = pkin(8) * t1131;
t1313 = pkin(8) * t1132;
t1312 = t1095 * pkin(9);
t1311 = t1132 * g(3);
t1310 = pkin(1) * t644 + t684 * t1314;
t1309 = pkin(1) * t656 + t700 * t1314;
t1308 = pkin(1) * t663 + t703 * t1314;
t1307 = -pkin(2) * t807 + pkin(9) * t716;
t1306 = -pkin(2) * t841 + pkin(9) * t728;
t1305 = -pkin(2) * t846 + pkin(9) * t731;
t1118 = g(1) * t1142 + g(2) * t1137;
t1143 = qJD(1) ^ 2;
t1091 = -pkin(1) * t1143 + pkin(8) * t1260 - t1118;
t1232 = -pkin(9) * t1136 - t1316;
t1288 = qJD(1) * t1131;
t1094 = t1232 * t1288;
t1117 = t1137 * g(1) - t1142 * g(2);
t1152 = qJDD(1) * pkin(1) + t1143 * t1314 + t1117;
t1150 = t1132 * t1152;
t1149 = -g(3) * t1267 + t1136 * t1150;
t1148 = pkin(9) * t1234 + t1149;
t1146 = -t1332 * pkin(2) + (t1094 * t1288 + t1091) * t1141 + t1148;
t1231 = -pkin(9) * t1141 + t1317;
t1289 = qJD(1) * t1123;
t1147 = -t1096 * pkin(2) - t1312 - t1311 + (t1231 * t1289 - t1152) * t1131;
t947 = t1135 * t1146 - t1140 * t1147;
t1145 = pkin(3) * t1185 + pkin(10) * t1017 - t947;
t1067 = -pkin(3) * t1115 - pkin(10) * t1089;
t948 = t1135 * t1147 + t1140 * t1146;
t893 = -pkin(3) * t1333 - pkin(10) * t1176 + t1115 * t1067 + t948;
t820 = t1134 * t1145 + t1139 * t893;
t994 = pkin(4) * t1056 - pkin(11) * t1058;
t798 = -pkin(4) * t1179 - pkin(11) * t1233 - t1056 * t994 + t820;
t1164 = t1186 * t1058;
t1236 = t1136 * t1091 - t1141 * t1150;
t1005 = -t1234 * pkin(2) - t1332 * pkin(9) + (qJD(1) * t1094 * t1136 + g(3) * t1141) * t1131 + t1236;
t929 = t1176 * pkin(3) - t1333 * pkin(10) + t1089 * t1067 + t1005;
t816 = -t1338 * pkin(11) + (-t965 - t1164) * pkin(4) + t929;
t743 = t1133 * t816 + t1138 * t798;
t1304 = -t1133 * t798 + t1138 * t816;
t1258 = t913 * qJ(6) - t1304;
t1175 = -qJ(6) * t988 - t1258;
t1286 = qJD(6) * t1035;
t697 = t1175 - 0.2e1 * t1286 + t1340;
t1303 = t1133 * t697;
t819 = t1134 * t893 - t1139 * t1145;
t797 = t1233 * pkin(4) - t1179 * pkin(11) + t1058 * t994 + t819;
t1302 = t1133 * t797;
t1299 = t1134 * t929;
t985 = t1233 - t1279;
t1298 = t1134 * t985;
t756 = t1134 * t820 - t1139 * t819;
t1297 = t1135 * t756;
t1296 = t1138 * t697;
t1295 = t1138 * t797;
t1292 = t1139 * t929;
t1291 = t1139 * t985;
t1290 = t1140 * t756;
t1285 = t1005 * t1135;
t1284 = t1005 * t1140;
t1039 = t1240 + t1276;
t1283 = t1039 * t1135;
t1282 = t1039 * t1140;
t1281 = t1053 * t1133;
t1280 = t1053 * t1138;
t1077 = t1131 * t1152 + t1311;
t1278 = t1077 * t1136;
t1277 = t1077 * t1141;
t1264 = t1141 * t1143;
t1128 = t1131 ^ 2;
t1269 = t1128 * t1136;
t1114 = t1264 * t1269;
t1092 = -t1114 + t1234;
t1275 = t1092 * t1136;
t1274 = t1092 * t1141;
t1093 = t1114 + t1234;
t1273 = t1093 * t1136;
t1272 = t1093 * t1141;
t1271 = t1115 * t1135;
t1270 = t1115 * t1140;
t1268 = t1128 * t1143;
t1265 = t1141 * t1091;
t1129 = t1136 ^ 2;
t1130 = t1141 ^ 2;
t1261 = t1129 + t1130;
t1257 = -pkin(4) * t1139 - pkin(3);
t643 = t1131 * t1218 + t1132 * t715;
t1256 = -pkin(1) * t643 + t684 * t1313;
t655 = t1131 * t1216 + t1132 * t727;
t1255 = -pkin(1) * t655 + t700 * t1313;
t662 = t1131 * t1215 + t1132 * t730;
t1254 = -pkin(1) * t662 + t703 * t1313;
t1253 = -pkin(3) * t841 + pkin(10) * t791;
t1252 = -pkin(3) * t846 + pkin(10) * t794;
t1251 = t1123 * t1288;
t1248 = t1134 * t975;
t1247 = t1139 * t975;
t1246 = t1136 * t1279;
t1245 = t1141 * t1279;
t1244 = t1136 * t1276;
t1243 = t1141 * t1276;
t1242 = t1129 * t1268;
t1241 = t1130 * t1268;
t757 = t1134 * t819 + t1139 * t820;
t870 = t1135 * t947 + t1140 * t948;
t1079 = -t1117 * t1137 - t1142 * t1118;
t1112 = qJDD(1) * t1142 - t1137 * t1143;
t1230 = -pkin(7) * t1112 - g(3) * t1137;
t1084 = -t1242 - t1332;
t1059 = -t1084 * t1136 - t1274;
t1229 = pkin(8) * t1059 - t1278;
t1100 = -t1241 - t1332;
t1064 = t1100 * t1141 - t1273;
t1228 = pkin(8) * t1064 + t1277;
t675 = t1133 * t743 + t1138 * t1304;
t676 = -t1133 * t1304 + t1138 * t743;
t869 = t1135 * t948 - t1140 * t947;
t912 = -qJD(5) * t1035 - t1238;
t982 = pkin(5) * t1053 - qJ(6) * t1035;
t1174 = t912 * qJ(6) - 0.2e1 * qJD(6) * t1033 - t1053 * t982 + t743;
t687 = -qJ(6) * t880 + (-t1031 - t942) * pkin(5) + t1174;
t1027 = 0.2e1 * t1286;
t690 = t1027 + (-t884 + t988) * qJ(6) - t1340 + t1258;
t622 = -t1133 * t687 + t1138 * t690 - t1320;
t764 = -pkin(4) * t807 - pkin(5) * t884;
t778 = pkin(10) * t780;
t596 = -pkin(3) * t807 + t1134 * t622 + t1139 * t764 + t778;
t599 = -t1134 * t764 + t1139 * t622 - t1323;
t572 = -t1135 * t596 + t1140 * t599 - t1326;
t1156 = -pkin(2) * t715 - pkin(3) * t779 + pkin(4) * t942 - pkin(11) * t809;
t595 = -t1133 * t690 - t1138 * t687 + t1156;
t1227 = t1136 * t572 + t1141 * t595;
t674 = t1027 - t1175 - t1331 - 0.2e1 * t1340;
t753 = -t912 * pkin(5) - t1031 * qJ(6) + t1035 * t982 + qJDD(6) + t797;
t717 = -pkin(5) * t879 + qJ(6) * t955 - t753;
t681 = -qJ(6) * t1293 - t1133 * t717 - t1319;
t605 = t1134 * t681 + t1139 * t674 + t1253;
t611 = -t1134 * t674 + t1139 * t681 - t1322;
t578 = -t1135 * t605 + t1140 * t611 - t1325;
t1155 = -pkin(2) * t727 - pkin(3) * t790 + pkin(4) * t879 - pkin(11) * t842;
t630 = qJ(6) * t1300 - t1138 * t717 + t1155;
t1226 = t1136 * t578 + t1141 * t630;
t680 = -t1330 + (-t1031 - t963) * pkin(5) + t1174;
t744 = -qJ(6) * t963 + t753;
t817 = -pkin(5) * t1339 - qJ(6) * t901;
t685 = -t1133 * t817 + t1138 * t744 - t1318;
t610 = t1134 * t685 + t1139 * t680 + t1252;
t614 = -t1134 * t680 + t1139 * t685 - t1321;
t580 = -t1135 * t610 + t1140 * t614 - t1324;
t1154 = -pkin(2) * t730 - pkin(3) * t793 + pkin(4) * t1339 - pkin(11) * t847;
t631 = -t1133 * t744 - t1138 * t817 + t1154;
t1225 = t1136 * t580 + t1141 * t631;
t666 = -t675 - t1320;
t613 = t1134 * t666 + t1257 * t807 + t778;
t635 = t1139 * t666 + t1315 * t807 - t1323;
t583 = -t1135 * t613 + t1140 * t635 - t1326;
t608 = t1156 - t676;
t1224 = t1136 * t583 + t1141 * t608;
t704 = -pkin(5) * t1031 + t1174;
t648 = t1138 * t704 - t1303;
t624 = t1134 * t648 - t1139 * t753;
t625 = t1134 * t753 + t1139 * t648;
t586 = -t1135 * t624 + t1140 * t625;
t647 = t1133 * t704 + t1296;
t1223 = t1136 * t586 - t1141 * t647;
t708 = -t1304 - t1331;
t755 = t1302 - t1319;
t639 = t1134 * t755 + t1139 * t708 + t1253;
t651 = -t1134 * t708 + t1139 * t755 - t1322;
t590 = -t1135 * t639 + t1140 * t651 - t1325;
t649 = t1155 + t1295;
t1222 = t1136 * t590 + t1141 * t649;
t709 = t743 - t1330;
t758 = t1295 - t1318;
t640 = t1134 * t758 + t1139 * t709 + t1252;
t652 = -t1134 * t709 + t1139 * t758 - t1321;
t591 = -t1135 * t640 + t1140 * t652 - t1324;
t650 = t1154 - t1302;
t1221 = t1136 * t591 + t1141 * t650;
t664 = t1134 * t676 - t1139 * t797;
t665 = t1134 * t797 + t1139 * t676;
t601 = -t1135 * t664 + t1140 * t665;
t1220 = t1136 * t601 - t1141 * t675;
t689 = t1140 * t757 - t1297;
t1219 = t1136 * t689 - t1141 * t929;
t808 = -t1133 * t1339 - t1138 * t879;
t974 = -t1032 + t1031;
t785 = t1134 * t808 + t1139 * t974;
t786 = -t1134 * t974 + t1139 * t808;
t724 = -t1135 * t785 + t1140 * t786;
t806 = t1133 * t879 - t1138 * t1339;
t1217 = t1136 * t724 + t1141 * t806;
t984 = -t1032 + t1052;
t862 = -t1133 * t984 + t1293;
t801 = t1134 * t862 + t1139 * t884;
t803 = -t1134 * t884 + t1139 * t862;
t739 = -t1135 * t801 + t1140 * t803;
t860 = -t1138 * t984 - t1300;
t1214 = t1136 * t739 + t1141 * t860;
t983 = t1031 - t1052;
t863 = t1138 * t983 - t1301;
t802 = t1134 * t863 + t1139 * t880;
t804 = -t1134 * t880 + t1139 * t863;
t740 = -t1135 * t802 + t1140 * t804;
t861 = -t1133 * t983 - t1294;
t1213 = t1136 * t740 + t1141 * t861;
t872 = t1033 * t1280 - t1133 * t912;
t834 = t1134 * t872 + t1247;
t836 = t1139 * t872 - t1248;
t771 = -t1135 * t834 + t1140 * t836;
t871 = -t1033 * t1281 - t1138 * t912;
t1212 = t1136 * t771 + t1141 * t871;
t874 = -t1035 * t1281 + t1138 * t913;
t835 = t1134 * t874 - t1247;
t837 = t1139 * t874 + t1248;
t772 = -t1135 * t835 + t1140 * t837;
t873 = -t1035 * t1280 - t1133 * t913;
t1211 = t1136 * t772 + t1141 * t873;
t930 = (0.2e1 * qJD(4) - t1115) * t1058 + t1237;
t853 = -t1134 * t930 + t1139 * t1338;
t855 = -t1134 * t1338 - t1139 * t930;
t783 = -t1135 * t853 + t1140 * t855;
t999 = -t1055 + t1054;
t1210 = t1136 * t783 + t1141 * t999;
t934 = -t966 + t1042;
t935 = t1058 * t1115 + t1237;
t854 = -t1134 * t935 + t1139 * t934;
t856 = -t1134 * t934 - t1139 * t935;
t784 = -t1135 * t854 + t1140 * t856;
t967 = -t1054 - t1055;
t1209 = t1136 * t784 - t1141 * t967;
t920 = (-t1033 * t1138 + t1035 * t1133) * t1053;
t864 = t1134 * t920 - t1139 * t964;
t865 = t1134 * t964 + t1139 * t920;
t800 = -t1135 * t864 + t1140 * t865;
t919 = (t1033 * t1133 + t1035 * t1138) * t1053;
t1208 = t1136 * t800 + t1141 * t919;
t991 = -t1179 - t1054;
t921 = t1134 * t991 + t1335;
t922 = t1139 * t991 - t1337;
t845 = -t1135 * t921 + t1140 * t922;
t1207 = t1136 * t845 - t1141 * t930;
t1023 = -t1055 - t1179;
t945 = t1023 * t1139 + t1298;
t946 = -t1023 * t1134 + t1291;
t868 = -t1135 * t945 + t1140 * t946;
t1206 = t1136 * t868 - t1141 * t1338;
t1038 = -t1055 + t1179;
t951 = t1038 * t1139 + t1337;
t953 = -t1038 * t1134 + t1335;
t877 = -t1135 * t951 + t1140 * t953;
t1205 = t1136 * t877 + t1141 * t934;
t1037 = t1054 - t1179;
t952 = t1037 * t1134 - t1291;
t954 = t1037 * t1139 + t1298;
t878 = -t1135 * t952 + t1140 * t954;
t1204 = t1136 * t878 + t1141 * t935;
t1203 = -t1005 * t1141 + t1136 * t870;
t1013 = (-qJD(3) + t1115) * t1089 - t1235;
t1049 = -t1110 - t1333;
t981 = t1049 * t1140 - t1336;
t1202 = t1013 * t1141 + t1136 * t981;
t1061 = -t1087 - t1110;
t993 = -t1061 * t1135 + t1282;
t1201 = -t1015 * t1141 + t1136 * t993;
t1069 = -t1087 + t1110;
t997 = -t1069 * t1135 + t1334;
t1200 = t1017 * t1141 + t1136 * t997;
t1068 = -t1110 + t1333;
t998 = t1068 * t1140 + t1283;
t1199 = t1018 * t1141 + t1136 * t998;
t1036 = t1087 + t1333;
t959 = -t1017 * t1135 - t1018 * t1140;
t1198 = t1036 * t1141 + t1136 * t959;
t1060 = -t1087 + t1333;
t958 = t1013 * t1140 - t1015 * t1135;
t1197 = t1060 * t1141 + t1136 * t958;
t1196 = -t1132 * t1143 + t1289;
t1050 = g(3) * t1266 + t1236;
t1051 = t1149 + t1265;
t1195 = -t1050 * t1141 + t1051 * t1136;
t990 = t1050 * t1136 + t1051 * t1141;
t1194 = t1070 * t1141 + t1074 * t1136;
t1072 = -t1104 + t1095;
t1073 = t1103 + t1096;
t1193 = -t1072 * t1141 + t1073 * t1136;
t1192 = t1084 * t1141 - t1275;
t1099 = t1241 - t1332;
t1191 = t1099 * t1136 + t1274;
t1098 = -t1242 + t1332;
t1190 = t1098 * t1141 + t1273;
t1189 = t1100 * t1136 + t1272;
t1078 = t1117 * t1142 - t1118 * t1137;
t1188 = t1131 * t1234;
t1184 = (-t1131 * t643 - t1132 * t644) * pkin(8);
t1183 = (-t1131 * t655 - t1132 * t656) * pkin(8);
t1182 = (-t1131 * t662 - t1132 * t663) * pkin(8);
t1160 = t1134 * t1042;
t923 = t1139 * t965 - t1160;
t1158 = t1139 * t1042;
t924 = -t1134 * t965 - t1158;
t850 = -t1135 * t923 + t1140 * t924;
t1181 = t1136 * t850 + t1245;
t1157 = t1139 * t1164;
t925 = t1134 * t966 - t1157;
t1159 = t1134 * t1164;
t926 = t1139 * t966 + t1159;
t851 = -t1135 * t925 + t1140 * t926;
t1180 = t1136 * t851 - t1245;
t1008 = t1088 * t1270 + t1135 * t1176;
t1178 = t1008 * t1136 - t1243;
t1010 = t1046 * t1140 + t1089 * t1271;
t1177 = t1010 * t1136 + t1243;
t671 = -pkin(5) * t753 + qJ(6) * t704;
t592 = -pkin(11) * t647 - qJ(6) * t1296 - t1133 * t671;
t612 = -pkin(4) * t647 - pkin(5) * t697;
t565 = -pkin(3) * t647 + pkin(10) * t625 + t1134 * t592 + t1139 * t612;
t569 = -pkin(10) * t624 - t1134 * t612 + t1139 * t592;
t585 = t1135 * t625 + t1140 * t624;
t545 = -pkin(9) * t585 - t1135 * t565 + t1140 * t569;
t561 = -pkin(2) * t585 - pkin(3) * t624 + pkin(4) * t753 - pkin(11) * t648 + qJ(6) * t1303 - t1138 * t671;
t576 = t1136 * t647 + t1141 * t586;
t1173 = pkin(8) * t576 + t1136 * t545 + t1141 * t561;
t584 = pkin(10) * t665 + (-pkin(11) * t1134 + t1257) * t675;
t593 = -pkin(10) * t664 + (-pkin(11) * t1139 + t1315) * t675;
t600 = t1135 * t665 + t1140 * t664;
t556 = -pkin(9) * t600 - t1135 * t584 + t1140 * t593;
t577 = -pkin(2) * t600 - pkin(3) * t664 + pkin(4) * t797 - pkin(11) * t676;
t589 = t1136 * t675 + t1141 * t601;
t1172 = pkin(8) * t589 + t1136 * t556 + t1141 * t577;
t688 = t1135 * t757 + t1290;
t741 = -pkin(3) * t929 + pkin(10) * t757;
t634 = -pkin(9) * t688 - pkin(10) * t1290 - t1135 * t741;
t653 = -pkin(2) * t688 - pkin(3) * t756;
t679 = t1136 * t929 + t1141 * t689;
t1171 = pkin(8) * t679 + t1136 * t634 + t1141 * t653;
t714 = -pkin(3) * t967 + pkin(10) * t856 + t757;
t725 = -pkin(10) * t854 - t756;
t782 = t1135 * t856 + t1140 * t854;
t641 = -pkin(9) * t782 - t1135 * t714 + t1140 * t725;
t751 = -pkin(2) * t782 - pkin(3) * t854;
t766 = t1136 * t967 + t1141 * t784;
t1170 = pkin(8) * t766 + t1136 * t641 + t1141 * t751;
t811 = -pkin(3) * t930 + pkin(10) * t922 - t1292;
t844 = t1135 * t922 + t1140 * t921;
t852 = -pkin(10) * t921 + t1299;
t735 = -pkin(9) * t844 - t1135 * t811 + t1140 * t852;
t752 = -pkin(2) * t844 - pkin(3) * t921 + t819;
t810 = t1136 * t930 + t1141 * t845;
t1169 = pkin(8) * t810 + t1136 * t735 + t1141 * t752;
t821 = -pkin(3) * t1338 + pkin(10) * t946 + t1299;
t859 = -pkin(10) * t945 + t1292;
t867 = t1135 * t946 + t1140 * t945;
t745 = -pkin(9) * t867 - t1135 * t821 + t1140 * t859;
t759 = -pkin(2) * t867 - pkin(3) * t945 + t820;
t823 = t1136 * t1338 + t1141 * t868;
t1168 = pkin(8) * t823 + t1136 * t745 + t1141 * t759;
t980 = t1049 * t1135 + t1334;
t892 = t1135 * (t1094 * t1249 + t1148 + t1265) - t1140 * (-pkin(9) * t1104 - t1077 - t1312) + (t1074 * t1140 - t1135 * t1332 - t980) * pkin(2);
t936 = -pkin(9) * t980 + t1285;
t939 = -t1013 * t1136 + t1141 * t981;
t1167 = pkin(8) * t939 + t1136 * t936 + t1141 * t892;
t992 = t1061 * t1140 + t1283;
t896 = -pkin(2) * t992 + t948;
t940 = -pkin(9) * t992 + t1284;
t941 = t1015 * t1136 + t1141 * t993;
t1166 = pkin(8) * t941 + t1136 * t940 + t1141 * t896;
t1024 = t1072 * t1136 + t1073 * t1141;
t1163 = pkin(8) * t1024 + t990;
t957 = t1017 * t1140 - t1018 * t1135;
t828 = -pkin(9) * t957 - t869;
t916 = -t1036 * t1136 + t1141 * t959;
t1162 = pkin(8) * t916 + t1136 * t828 - t1316 * t957;
t1030 = (-t1088 * t1140 - t1089 * t1135) * t1115;
t1161 = t1136 * t1030 + t1141 * t1240;
t838 = t1005 * t1136 + t1141 * t870;
t1153 = pkin(8) * t838 + t1232 * t869;
t978 = t1160 + t1157;
t979 = t1158 - t1159;
t915 = -t1135 * t978 + t1140 * t979;
t1151 = t1136 * t915 + t1141 * t1233;
t1127 = t1131 * t1128;
t1111 = qJDD(1) * t1137 + t1142 * t1143;
t1102 = t1261 * t1268;
t1101 = (t1129 - t1130) * t1268;
t1097 = -pkin(7) * t1111 + g(3) * t1142;
t1076 = t1261 * t1251;
t1071 = (t1259 + (qJD(2) + t1123) * t1287) * t1131;
t1066 = t1095 * t1141 - t1129 * t1251;
t1065 = -t1096 * t1136 - t1130 * t1251;
t1063 = t1099 * t1141 - t1275;
t1062 = -t1098 * t1136 + t1272;
t1048 = (t1070 * t1132 + t1127 * t1264) * t1136;
t1047 = (-t1127 * t1136 * t1143 + t1341) * t1141;
t1029 = (-t1088 * t1135 + t1089 * t1140) * t1115;
t1025 = -t1070 * t1136 + t1074 * t1141;
t1022 = t1074 * t1131 + t1132 * t1189;
t1021 = -t1073 * t1131 + t1132 * t1191;
t1020 = -t1072 * t1131 + t1132 * t1190;
t1019 = t1131 * t1189 - t1341;
t1012 = -t1071 * t1131 + t1132 * t1192;
t1011 = t1071 * t1132 + t1131 * t1192;
t1009 = t1046 * t1135 - t1089 * t1270;
t1007 = t1088 * t1271 - t1140 * t1176;
t1006 = t1141 * t1030 - t1136 * t1240;
t1004 = -t1101 * t1131 + t1132 * t1194;
t1003 = t1102 * t1131 + t1132 * t1193;
t1002 = -t1102 * t1132 + t1131 * t1193;
t996 = t1068 * t1135 - t1282;
t995 = t1069 * t1140 + t1336;
t977 = -t1022 * t1137 + t1064 * t1142;
t976 = t1022 * t1142 + t1064 * t1137;
t973 = t1010 * t1141 - t1244;
t972 = t1008 * t1141 + t1244;
t971 = -t1012 * t1137 + t1059 * t1142;
t970 = t1012 * t1142 + t1059 * t1137;
t969 = t1077 * t1131 + t1132 * t1195;
t968 = -t1077 * t1132 + t1131 * t1195;
t962 = -t1131 * t1029 + t1132 * t1161;
t961 = -t1003 * t1137 + t1024 * t1142;
t960 = t1003 * t1142 + t1024 * t1137;
t956 = t1013 * t1135 + t1015 * t1140;
t950 = -t1018 * t1136 + t1141 * t998;
t949 = -t1017 * t1136 + t1141 * t997;
t943 = -t1278 + (-t1019 * t1131 - t1022 * t1132) * pkin(8);
t938 = -t1277 + (-t1011 * t1131 - t1012 * t1132) * pkin(8);
t937 = -pkin(1) * t1019 + t1050 * t1131 + t1132 * t1228;
t928 = -t1060 * t1136 + t1141 * t958;
t927 = -pkin(1) * t1011 + t1051 * t1131 + t1132 * t1229;
t918 = -t1009 * t1131 + t1132 * t1177;
t917 = -t1007 * t1131 + t1132 * t1178;
t914 = t1135 * t979 + t1140 * t978;
t908 = -pkin(1) * t968 + t1313 * t990;
t907 = -t1137 * t969 + t1142 * t990;
t906 = t1137 * t990 + t1142 * t969;
t905 = -t1136 * t1233 + t1141 * t915;
t904 = -pkin(1) * t1002 + t1132 * t1163;
t903 = -pkin(2) * t1015 + pkin(9) * t993 + t1285;
t899 = -t1131 * t996 + t1132 * t1199;
t898 = -t1131 * t995 + t1132 * t1200;
t897 = (-t1131 * t968 - t1132 * t969) * pkin(8);
t895 = pkin(2) * t1013 + pkin(9) * t981 - t1284;
t894 = (-t1002 * t1131 - t1003 * t1132) * pkin(8) - t1195;
t890 = -t1131 * t992 + t1132 * t1201;
t889 = t1131 * t1201 + t1132 * t992;
t888 = -t1131 * t980 + t1132 * t1202;
t887 = t1131 * t1202 + t1132 * t980;
t876 = t1135 * t954 + t1140 * t952;
t875 = t1135 * t953 + t1140 * t951;
t866 = -t1131 * t956 + t1132 * t1197;
t858 = -t1131 * t957 + t1132 * t1198;
t857 = t1131 * t1198 + t1132 * t957;
t849 = t1135 * t926 + t1140 * t925;
t848 = t1135 * t924 + t1140 * t923;
t840 = -pkin(2) * t1005 + pkin(9) * t870;
t833 = -t1137 * t890 + t1142 * t941;
t832 = t1137 * t941 + t1142 * t890;
t831 = -t1131 * t914 + t1132 * t1151;
t830 = -t1137 * t888 + t1142 * t939;
t829 = t1137 * t939 + t1142 * t888;
t827 = t1141 * t851 + t1246;
t826 = t1141 * t850 - t1246;
t825 = -t1136 * t935 + t1141 * t878;
t824 = -t1136 * t934 + t1141 * t877;
t822 = pkin(2) * t1036 + pkin(9) * t959 + t870;
t813 = -t1137 * t858 + t1142 * t916;
t812 = t1137 * t916 + t1142 * t858;
t799 = t1135 * t865 + t1140 * t864;
t788 = -t1131 * t869 + t1132 * t1203;
t787 = t1131 * t1203 + t1132 * t869;
t781 = t1135 * t855 + t1140 * t853;
t777 = -t1131 * t876 + t1132 * t1204;
t776 = -t1131 * t875 + t1132 * t1205;
t775 = -t1136 * t999 + t1141 * t783;
t774 = -t1131 * t867 + t1132 * t1206;
t773 = t1131 * t1206 + t1132 * t867;
t770 = t1135 * t837 + t1140 * t835;
t769 = t1135 * t836 + t1140 * t834;
t768 = -t1131 * t849 + t1132 * t1180;
t767 = -t1131 * t848 + t1132 * t1181;
t765 = -t1136 * t919 + t1141 * t800;
t763 = -t1136 * t896 + t1141 * t940 + (-t1131 * t889 - t1132 * t890) * pkin(8);
t762 = -t1131 * t844 + t1132 * t1207;
t761 = t1131 * t1207 + t1132 * t844;
t760 = -t1136 * t892 + t1141 * t936 + (-t1131 * t887 - t1132 * t888) * pkin(8);
t754 = -pkin(1) * t889 - t1131 * t903 + t1132 * t1166;
t750 = -t1137 * t788 + t1142 * t838;
t749 = t1137 * t838 + t1142 * t788;
t748 = -pkin(1) * t887 - t1131 * t895 + t1132 * t1167;
t747 = -t1136 * t873 + t1141 * t772;
t746 = -t1136 * t871 + t1141 * t771;
t738 = t1135 * t804 + t1140 * t802;
t737 = t1135 * t803 + t1140 * t801;
t736 = t957 * t1317 + t1141 * t828 + (-t1131 * t857 - t1132 * t858) * pkin(8);
t734 = -t1137 * t774 + t1142 * t823;
t733 = t1137 * t823 + t1142 * t774;
t732 = -pkin(2) * t1338 + pkin(9) * t868 + t1135 * t859 + t1140 * t821;
t723 = t1135 * t786 + t1140 * t785;
t722 = -pkin(2) * t930 + pkin(9) * t845 + t1135 * t852 + t1140 * t811;
t721 = -t1137 * t762 + t1142 * t810;
t720 = t1137 * t810 + t1142 * t762;
t719 = -t1131 * t799 + t1132 * t1208;
t718 = t1131 * t1208 + t1132 * t799;
t712 = -t1131 * t781 + t1132 * t1210;
t711 = -t1131 * t782 + t1132 * t1209;
t710 = t1131 * t1209 + t1132 * t782;
t707 = -t1136 * t861 + t1141 * t740;
t706 = -t1136 * t860 + t1141 * t739;
t705 = -pkin(1) * t857 - t1131 * t822 + t1132 * t1162;
t696 = -t1131 * t770 + t1132 * t1211;
t695 = -t1131 * t769 + t1132 * t1212;
t694 = t1131 * t1211 + t1132 * t770;
t693 = t1131 * t1212 + t1132 * t769;
t692 = -t1136 * t806 + t1141 * t724;
t691 = t1231 * t869 + (-t1131 * t787 - t1132 * t788) * pkin(8);
t686 = -pkin(1) * t787 - t1131 * t840 + t1132 * t1153;
t678 = -t1137 * t719 + t1142 * t765;
t677 = t1137 * t765 + t1142 * t719;
t673 = -t1137 * t711 + t1142 * t766;
t672 = t1137 * t766 + t1142 * t711;
t670 = -t1131 * t738 + t1132 * t1213;
t669 = -t1131 * t737 + t1132 * t1214;
t668 = t1131 * t1213 + t1132 * t738;
t667 = t1131 * t1214 + t1132 * t737;
t660 = -t1137 * t696 + t1142 * t747;
t659 = -t1137 * t695 + t1142 * t746;
t658 = t1137 * t747 + t1142 * t696;
t657 = t1137 * t746 + t1142 * t695;
t646 = -t1131 * t723 + t1132 * t1217;
t645 = t1131 * t1217 + t1132 * t723;
t638 = -pkin(2) * t967 + pkin(9) * t784 + t1135 * t725 + t1140 * t714;
t637 = -t1136 * t759 + t1141 * t745 + (-t1131 * t773 - t1132 * t774) * pkin(8);
t636 = -t1136 * t752 + t1141 * t735 + (-t1131 * t761 - t1132 * t762) * pkin(8);
t633 = -t1131 * t688 + t1132 * t1219;
t632 = t1131 * t1219 + t1132 * t688;
t629 = -t1137 * t670 + t1142 * t707;
t628 = -t1137 * t669 + t1142 * t706;
t627 = t1137 * t707 + t1142 * t670;
t626 = t1137 * t706 + t1142 * t669;
t623 = -pkin(2) * t929 + pkin(9) * t689 - pkin(10) * t1297 + t1140 * t741;
t621 = -t1137 * t663 + t1142 * t703;
t619 = pkin(7) * t621;
t618 = -pkin(1) * t773 - t1131 * t732 + t1132 * t1168;
t617 = -t1137 * t656 + t1142 * t700;
t615 = pkin(7) * t617;
t609 = -pkin(1) * t761 - t1131 * t722 + t1132 * t1169;
t607 = -t1137 * t646 + t1142 * t692;
t606 = t1137 * t692 + t1142 * t646;
t604 = -t1137 * t644 + t1142 * t684;
t602 = pkin(7) * t604;
t598 = -t1137 * t633 + t1142 * t679;
t597 = t1137 * t679 + t1142 * t633;
t594 = -t1136 * t751 + t1141 * t641 + (-t1131 * t710 - t1132 * t711) * pkin(8);
t588 = t1135 * t652 + t1140 * t640 + t1305;
t587 = t1135 * t651 + t1140 * t639 + t1306;
t582 = -pkin(1) * t710 - t1131 * t638 + t1132 * t1170;
t581 = t1135 * t635 + t1140 * t613 + t1307;
t579 = t1135 * t614 + t1140 * t610 + t1305;
t575 = t1135 * t611 + t1140 * t605 + t1306;
t574 = -t1131 * t600 + t1132 * t1220;
t573 = t1131 * t1220 + t1132 * t600;
t571 = t1135 * t599 + t1140 * t596 + t1307;
t570 = -t1136 * t653 + t1141 * t634 + (-t1131 * t632 - t1132 * t633) * pkin(8);
t568 = -t1136 * t650 + t1141 * t591 + t1182;
t567 = -t1136 * t649 + t1141 * t590 + t1183;
t566 = -pkin(1) * t632 - t1131 * t623 + t1132 * t1171;
t564 = -t1131 * t585 + t1132 * t1223;
t563 = t1131 * t1223 + t1132 * t585;
t562 = -t1136 * t631 + t1141 * t580 + t1182;
t560 = -t1136 * t630 + t1141 * t578 + t1183;
t559 = -t1137 * t574 + t1142 * t589;
t558 = t1137 * t589 + t1142 * t574;
t557 = -t1136 * t608 + t1141 * t583 + t1184;
t555 = -t1131 * t588 + t1132 * t1221 + t1254;
t554 = -t1131 * t587 + t1132 * t1222 + t1255;
t553 = -pkin(2) * t675 + pkin(9) * t601 + t1135 * t593 + t1140 * t584;
t552 = -t1136 * t595 + t1141 * t572 + t1184;
t551 = -t1131 * t579 + t1132 * t1225 + t1254;
t550 = -t1131 * t581 + t1132 * t1224 + t1256;
t549 = -t1137 * t564 + t1142 * t576;
t548 = t1137 * t576 + t1142 * t564;
t547 = -t1131 * t575 + t1132 * t1226 + t1255;
t546 = -t1131 * t571 + t1132 * t1227 + t1256;
t544 = -pkin(2) * t647 + pkin(9) * t586 + t1135 * t569 + t1140 * t565;
t543 = -t1136 * t577 + t1141 * t556 + (-t1131 * t573 - t1132 * t574) * pkin(8);
t542 = -pkin(1) * t573 - t1131 * t553 + t1132 * t1172;
t541 = -t1136 * t561 + t1141 * t545 + (-t1131 * t563 - t1132 * t564) * pkin(8);
t540 = -pkin(1) * t563 - t1131 * t544 + t1132 * t1173;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1111, -t1112, 0, t1079, 0, 0, 0, 0, 0, 0, t977, t971, t961, t907, 0, 0, 0, 0, 0, 0, t830, t833, t813, t750, 0, 0, 0, 0, 0, 0, t721, t734, t673, t598, 0, 0, 0, 0, 0, 0, t617, t621, t604, t559, 0, 0, 0, 0, 0, 0, t617, t621, t604, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1112, -t1111, 0, t1078, 0, 0, 0, 0, 0, 0, t976, t970, t960, t906, 0, 0, 0, 0, 0, 0, t829, t832, t812, t749, 0, 0, 0, 0, 0, 0, t720, t733, t672, t597, 0, 0, 0, 0, 0, 0, t616, t620, t603, t558, 0, 0, 0, 0, 0, 0, t616, t620, t603, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1019, t1011, t1002, t968, 0, 0, 0, 0, 0, 0, t887, t889, t857, t787, 0, 0, 0, 0, 0, 0, t761, t773, t710, t632, 0, 0, 0, 0, 0, 0, t655, t662, t643, t573, 0, 0, 0, 0, 0, 0, t655, t662, t643, t563; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1112, 0, -t1111, 0, t1230, -t1097, -t1078, -pkin(7) * t1078, -t1048 * t1137 + t1066 * t1142, -t1004 * t1137 + t1025 * t1142, -t1020 * t1137 + t1062 * t1142, -t1047 * t1137 + t1065 * t1142, -t1021 * t1137 + t1063 * t1142, t1142 * t1076 + t1137 * t1188, -pkin(7) * t976 - t1137 * t937 + t1142 * t943, -pkin(7) * t970 - t1137 * t927 + t1142 * t938, -pkin(7) * t960 - t1137 * t904 + t1142 * t894, -pkin(7) * t906 - t1137 * t908 + t1142 * t897, -t1137 * t918 + t1142 * t973, -t1137 * t866 + t1142 * t928, -t1137 * t898 + t1142 * t949, -t1137 * t917 + t1142 * t972, -t1137 * t899 + t1142 * t950, t1006 * t1142 - t1137 * t962, -pkin(7) * t829 - t1137 * t748 + t1142 * t760, -pkin(7) * t832 - t1137 * t754 + t1142 * t763, -pkin(7) * t812 - t1137 * t705 + t1142 * t736, -pkin(7) * t749 - t1137 * t686 + t1142 * t691, -t1137 * t768 + t1142 * t827, -t1137 * t712 + t1142 * t775, -t1137 * t776 + t1142 * t824, -t1137 * t767 + t1142 * t826, -t1137 * t777 + t1142 * t825, -t1137 * t831 + t1142 * t905, -pkin(7) * t720 - t1137 * t609 + t1142 * t636, -pkin(7) * t733 - t1137 * t618 + t1142 * t637, -pkin(7) * t672 - t1137 * t582 + t1142 * t594, -pkin(7) * t597 - t1137 * t566 + t1142 * t570, t660, t607, t628, t659, t629, t678, -t1137 * t554 + t1142 * t567 - t1328, -t1137 * t555 + t1142 * t568 - t1327, -t1137 * t550 + t1142 * t557 - t1329, -pkin(7) * t558 - t1137 * t542 + t1142 * t543, t660, t607, t628, t659, t629, t678, -t1137 * t547 + t1142 * t560 - t1328, -t1137 * t551 + t1142 * t562 - t1327, -t1137 * t546 + t1142 * t552 - t1329, -pkin(7) * t548 - t1137 * t540 + t1142 * t541; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1111, 0, t1112, 0, t1097, t1230, t1079, pkin(7) * t1079, t1048 * t1142 + t1066 * t1137, t1004 * t1142 + t1025 * t1137, t1020 * t1142 + t1062 * t1137, t1047 * t1142 + t1065 * t1137, t1021 * t1142 + t1063 * t1137, t1137 * t1076 - t1142 * t1188, pkin(7) * t977 + t1137 * t943 + t1142 * t937, pkin(7) * t971 + t1137 * t938 + t1142 * t927, pkin(7) * t961 + t1137 * t894 + t1142 * t904, pkin(7) * t907 + t1137 * t897 + t1142 * t908, t1137 * t973 + t1142 * t918, t1137 * t928 + t1142 * t866, t1137 * t949 + t1142 * t898, t1137 * t972 + t1142 * t917, t1137 * t950 + t1142 * t899, t1006 * t1137 + t1142 * t962, pkin(7) * t830 + t1137 * t760 + t1142 * t748, pkin(7) * t833 + t1137 * t763 + t1142 * t754, pkin(7) * t813 + t1137 * t736 + t1142 * t705, pkin(7) * t750 + t1137 * t691 + t1142 * t686, t1137 * t827 + t1142 * t768, t1137 * t775 + t1142 * t712, t1137 * t824 + t1142 * t776, t1137 * t826 + t1142 * t767, t1137 * t825 + t1142 * t777, t1137 * t905 + t1142 * t831, pkin(7) * t721 + t1137 * t636 + t1142 * t609, pkin(7) * t734 + t1137 * t637 + t1142 * t618, pkin(7) * t673 + t1137 * t594 + t1142 * t582, pkin(7) * t598 + t1137 * t570 + t1142 * t566, t658, t606, t626, t657, t627, t677, t1137 * t567 + t1142 * t554 + t615, t1137 * t568 + t1142 * t555 + t619, t1137 * t557 + t1142 * t550 + t602, pkin(7) * t559 + t1137 * t543 + t1142 * t542, t658, t606, t626, t657, t627, t677, t1137 * t560 + t1142 * t547 + t615, t1137 * t562 + t1142 * t551 + t619, t1137 * t552 + t1142 * t546 + t602, pkin(7) * t549 + t1137 * t541 + t1142 * t540; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1117, t1118, 0, 0, (t1128 * t1141 * t1196 + t1095 * t1131) * t1136, t1101 * t1132 + t1131 * t1194, t1072 * t1132 + t1131 * t1190, (t1096 * t1131 - t1196 * t1269) * t1141, t1073 * t1132 + t1131 * t1191, t1132 * t1234, pkin(1) * t1022 - t1050 * t1132 + t1131 * t1228, pkin(1) * t1012 - t1051 * t1132 + t1131 * t1229, pkin(1) * t1003 + t1131 * t1163, pkin(1) * t969 + t1314 * t990, t1009 * t1132 + t1131 * t1177, t1131 * t1197 + t1132 * t956, t1131 * t1200 + t1132 * t995, t1007 * t1132 + t1131 * t1178, t1131 * t1199 + t1132 * t996, t1132 * t1029 + t1131 * t1161, pkin(1) * t888 + t1131 * t1167 + t1132 * t895, pkin(1) * t890 + t1131 * t1166 + t1132 * t903, pkin(1) * t858 + t1131 * t1162 + t1132 * t822, pkin(1) * t788 + t1131 * t1153 + t1132 * t840, t1131 * t1180 + t1132 * t849, t1131 * t1210 + t1132 * t781, t1131 * t1205 + t1132 * t875, t1131 * t1181 + t1132 * t848, t1131 * t1204 + t1132 * t876, t1131 * t1151 + t1132 * t914, pkin(1) * t762 + t1131 * t1169 + t1132 * t722, pkin(1) * t774 + t1131 * t1168 + t1132 * t732, pkin(1) * t711 + t1131 * t1170 + t1132 * t638, pkin(1) * t633 + t1131 * t1171 + t1132 * t623, t694, t645, t667, t693, t668, t718, t1131 * t1222 + t1132 * t587 + t1309, t1131 * t1221 + t1132 * t588 + t1308, t1131 * t1224 + t1132 * t581 + t1310, pkin(1) * t574 + t1131 * t1172 + t1132 * t553, t694, t645, t667, t693, t668, t718, t1131 * t1226 + t1132 * t575 + t1309, t1131 * t1225 + t1132 * t579 + t1308, t1131 * t1227 + t1132 * t571 + t1310, pkin(1) * t564 + t1131 * t1173 + t1132 * t544;];
tauB_reg  = t1;
