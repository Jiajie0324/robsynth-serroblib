% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6PRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6PRRPRR1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:54:17
% EndTime: 2019-03-08 21:54:27
% DurationCPUTime: 6.33s
% Computational Cost: add. (11116->463), mult. (28675->634), div. (0->0), fcn. (22877->12), ass. (0->250)
t193 = sin(qJ(3));
t304 = -qJ(4) - pkin(8);
t235 = qJD(3) * t304;
t196 = cos(qJ(3));
t254 = t196 * qJD(4);
t152 = t193 * t235 + t254;
t153 = -t193 * qJD(4) + t196 * t235;
t187 = sin(pkin(12));
t189 = cos(pkin(12));
t162 = t187 * t196 + t189 * t193;
t197 = cos(qJ(2));
t188 = sin(pkin(6));
t266 = qJD(1) * t188;
t242 = t197 * t266;
t284 = t187 * t152 - t189 * t153 - t162 * t242;
t221 = t187 * t193 - t189 * t196;
t283 = t189 * t152 + t187 * t153 + t221 * t242;
t209 = t162 * qJD(3);
t344 = -pkin(9) * t209 + t283;
t210 = qJD(3) * t221;
t343 = pkin(9) * t210 - t284;
t194 = sin(qJ(2));
t246 = t194 * t266;
t260 = qJD(3) * t193;
t342 = pkin(3) * t260 - t246;
t181 = pkin(3) * t189 + pkin(4);
t192 = sin(qJ(5));
t312 = pkin(3) * t187;
t313 = cos(qJ(5));
t151 = t192 * t181 + t313 * t312;
t261 = qJD(2) * t196;
t243 = t189 * t261;
t263 = qJD(2) * t193;
t157 = -t187 * t263 + t243;
t310 = pkin(9) * t157;
t167 = qJD(2) * pkin(8) + t246;
t233 = qJ(4) * qJD(2) + t167;
t190 = cos(pkin(6));
t265 = qJD(1) * t193;
t241 = t190 * t265;
t121 = t196 * t233 + t241;
t115 = t189 * t121;
t271 = t190 * t196;
t177 = qJD(1) * t271;
t120 = -t193 * t233 + t177;
t73 = -t120 * t187 - t115;
t206 = t73 - t310;
t320 = t162 * qJD(2);
t309 = pkin(9) * t320;
t113 = t187 * t121;
t75 = t189 * t120 - t113;
t62 = t75 - t309;
t285 = t151 * qJD(5) - t192 * t62 + t313 * t206;
t116 = qJD(3) * pkin(3) + t120;
t70 = t189 * t116 - t113;
t55 = qJD(3) * pkin(4) - t309 + t70;
t71 = t187 * t116 + t115;
t61 = t71 + t310;
t30 = t192 * t55 + t313 * t61;
t341 = -t30 - t285;
t191 = sin(qJ(6));
t195 = cos(qJ(6));
t251 = qJD(3) + qJD(5);
t28 = pkin(10) * t251 + t30;
t103 = t313 * t157 - t192 * t320;
t182 = -t196 * pkin(3) - pkin(2);
t146 = qJD(2) * t182 + qJD(4) - t242;
t108 = -t157 * pkin(4) + t146;
t212 = -t192 * t157 - t313 * t320;
t42 = -pkin(5) * t103 + pkin(10) * t212 + t108;
t223 = t191 * t28 - t195 * t42;
t329 = qJD(6) - t103;
t340 = t329 * t223;
t227 = pkin(4) * t209 + t342;
t144 = qJD(3) * t320;
t252 = qJD(2) * qJD(3);
t238 = t193 * t252;
t172 = t187 * t238;
t237 = t196 * t252;
t145 = t189 * t237 - t172;
t240 = qJD(5) * t313;
t258 = qJD(5) * t192;
t211 = -t192 * t144 + t313 * t145 + t157 * t240 - t258 * t320;
t321 = t103 * t251;
t339 = t211 - t321;
t280 = t103 ^ 2;
t281 = t212 ^ 2;
t338 = -t280 + t281;
t12 = t191 * t42 + t195 * t28;
t264 = qJD(2) * t188;
t239 = qJD(1) * t264;
t229 = t197 * t239;
t268 = qJD(3) * t177 + t196 * t229;
t105 = -t167 * t260 + t268;
t85 = (-qJ(4) * t260 + t254) * qJD(2) + t105;
t129 = t167 * t196 + t241;
t259 = qJD(3) * t196;
t86 = -t129 * qJD(3) + (-qJ(4) * t259 + (-qJD(4) - t242) * t193) * qJD(2);
t43 = -t187 * t85 + t189 * t86;
t219 = -pkin(9) * t145 + t43;
t44 = t187 * t86 + t189 * t85;
t41 = -pkin(9) * t144 + t44;
t200 = -t192 * t219 - t55 * t240 + t61 * t258 - t313 * t41;
t154 = pkin(3) * t238 + t194 * t239;
t107 = pkin(4) * t144 + t154;
t234 = t313 * t144 + t192 * t145;
t330 = qJD(5) * t212;
t60 = t234 - t330;
t22 = pkin(5) * t60 - pkin(10) * t211 + t107;
t3 = -qJD(6) * t12 + t191 * t200 + t195 * t22;
t323 = t329 * t12 + t3;
t256 = qJD(6) * t195;
t333 = t103 * t195;
t232 = t195 * t251;
t257 = qJD(6) * t191;
t38 = -qJD(6) * t232 - t195 * t211 - t212 * t257;
t35 = t38 * t191;
t89 = t191 * t251 - t195 * t212;
t337 = -t35 + (t256 - t333) * t89;
t287 = t89 * t212;
t52 = t191 * t60;
t300 = t256 * t329 + t52;
t336 = -t329 * t333 + t287 + t300;
t169 = t304 * t193;
t170 = t304 * t196;
t124 = t189 * t169 + t170 * t187;
t95 = -pkin(9) * t162 + t124;
t125 = t187 * t169 - t189 * t170;
t96 = -pkin(9) * t221 + t125;
t303 = t343 * t192 + t95 * t240 - t96 * t258 + t344 * t313;
t87 = -t191 * t212 - t232;
t297 = t212 * t87;
t335 = t329 * t212;
t205 = t313 * t221;
t67 = t162 * t258 + t192 * t209 + t251 * t205;
t112 = t313 * t162 - t192 * t221;
t68 = t112 * qJD(5) - t192 * t210 + t313 * t209;
t334 = t68 * pkin(5) + t67 * pkin(10) + t227;
t277 = t103 * t212;
t332 = t223 * t212;
t255 = t212 * qJD(3);
t331 = -t255 - t234;
t29 = -t192 * t61 + t313 * t55;
t27 = -pkin(5) * t251 - t29;
t236 = t192 * t41 - t313 * t219;
t8 = qJD(5) * t30 + t236;
t316 = t8 * t191 + t27 * t256;
t328 = -t12 * t212 + t316;
t327 = -t108 * t103 + t200;
t217 = -t195 * t38 - t89 * t257;
t289 = t195 * t87;
t292 = t191 * t89;
t222 = t289 + t292;
t282 = qJD(6) * t89;
t39 = t191 * t211 + t282;
t301 = -t191 * t39 - t87 * t256;
t326 = t103 * t222 + t217 + t301;
t325 = t108 * t212 - t236;
t64 = -pkin(5) * t212 - pkin(10) * t103;
t2 = -qJD(6) * t223 + t191 * t22 - t195 * t200;
t324 = t2 + t340;
t51 = t192 * t95 + t313 * t96;
t302 = t51 * qJD(5) + t344 * t192 - t343 * t313;
t150 = t313 * t181 - t192 * t312;
t137 = t150 * qJD(5);
t33 = t192 * t206 + t313 * t62;
t286 = t137 - t33;
t23 = t27 * t257;
t322 = t8 * t195 - t23;
t54 = t195 * t60;
t215 = t257 * t329 - t54;
t319 = t320 ^ 2;
t198 = qJD(3) ^ 2;
t50 = t192 * t96 - t313 * t95;
t318 = t8 * t50;
t274 = t188 * t194;
t160 = -t193 * t274 + t271;
t161 = t190 * t193 + t196 * t274;
t98 = t160 * t189 - t161 * t187;
t99 = t160 * t187 + t161 * t189;
t218 = -t192 * t99 + t313 * t98;
t317 = t8 * t218;
t111 = t192 * t162 + t205;
t134 = pkin(4) * t221 + t182;
t48 = t111 * pkin(5) - t112 * pkin(10) + t134;
t25 = -t191 * t51 + t195 * t48;
t315 = qJD(6) * t25 + t334 * t191 + t303 * t195;
t26 = t191 * t48 + t195 * t51;
t314 = -qJD(6) * t26 - t303 * t191 + t334 * t195;
t311 = pkin(3) * t193;
t1 = t2 * t195;
t305 = t89 * t87;
t298 = qJD(2) * pkin(2);
t296 = t111 * t60;
t295 = t191 * t27;
t293 = t191 * t87;
t291 = t191 * t329;
t290 = t195 * t67;
t288 = t195 * t89;
t37 = t39 * t195;
t276 = t320 * t157;
t275 = t167 * t193;
t273 = t188 * t197;
t199 = qJD(2) ^ 2;
t272 = t188 * t199;
t270 = t198 * t193;
t269 = t198 * t196;
t185 = t193 ^ 2;
t186 = t196 ^ 2;
t267 = t185 - t186;
t262 = qJD(2) * t194;
t183 = pkin(3) * t263;
t249 = t194 * t272;
t248 = t193 * t199 * t196;
t245 = t188 * t262;
t244 = t197 * t264;
t126 = pkin(4) * t320 + t183;
t231 = t193 * t244;
t230 = t196 * t244;
t228 = t193 * t237;
t168 = -t242 - t298;
t226 = -t168 - t242;
t224 = t12 * t191 - t195 * t223;
t220 = t103 * t291 - t215;
t57 = t192 * t98 + t313 * t99;
t46 = -t191 * t57 - t195 * t273;
t214 = t191 * t273 - t195 * t57;
t148 = pkin(10) + t151;
t207 = -t103 * t27 - t137 * t329 - t148 * t60;
t204 = qJD(3) * (-t226 - t298);
t203 = -qJD(6) * t224 - t3 * t191 + t1;
t106 = -t167 * t259 + (-qJD(3) * t190 - t244) * t265;
t128 = t177 - t275;
t202 = t105 * t196 - t106 * t193 + (-t128 * t196 - t129 * t193) * qJD(3);
t155 = t157 ^ 2;
t147 = -pkin(5) - t150;
t119 = -qJD(3) * t161 - t231;
t118 = qJD(3) * t160 + t230;
t74 = t118 * t189 + t119 * t187;
t72 = -t118 * t187 + t119 * t189;
t45 = t126 + t64;
t18 = t57 * qJD(5) + t192 * t74 - t313 * t72;
t17 = t218 * qJD(5) + t192 * t72 + t313 * t74;
t16 = t191 * t64 + t195 * t29;
t15 = -t191 * t29 + t195 * t64;
t14 = t191 * t45 + t195 * t33;
t13 = -t191 * t33 + t195 * t45;
t10 = qJD(6) * t214 - t191 * t17 + t195 * t245;
t9 = qJD(6) * t46 + t195 * t17 + t191 * t245;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249, -t197 * t272, 0, 0, 0, 0, 0, 0, 0, 0, -t196 * t249 + (t119 - t231) * qJD(3), t193 * t249 + (-t118 - t230) * qJD(3) (t118 * t196 - t119 * t193 + (-t160 * t196 - t161 * t193) * qJD(3)) * qJD(2), t105 * t161 + t106 * t160 + t129 * t118 + t128 * t119 + (t168 - t242) * t245, 0, 0, 0, 0, 0, 0, t72 * qJD(3) + (-t144 * t197 - t157 * t262) * t188, -t74 * qJD(3) + (-t145 * t197 + t262 * t320) * t188, -t144 * t99 - t145 * t98 + t157 * t74 - t320 * t72, t43 * t98 + t44 * t99 + t70 * t72 + t71 * t74 + (t146 * t262 - t154 * t197) * t188, 0, 0, 0, 0, 0, 0, -t18 * t251 + (-t103 * t262 - t197 * t60) * t188, -t17 * t251 + (-t197 * t211 - t212 * t262) * t188, t103 * t17 - t18 * t212 - t211 * t218 - t57 * t60, t30 * t17 - t29 * t18 - t317 - t200 * t57 + (-t107 * t197 + t108 * t262) * t188, 0, 0, 0, 0, 0, 0, t10 * t329 + t18 * t87 - t218 * t39 + t46 * t60, t18 * t89 + t214 * t60 + t218 * t38 - t329 * t9, -t10 * t89 + t214 * t39 + t38 * t46 - t87 * t9, -t10 * t223 + t12 * t9 + t18 * t27 - t2 * t214 + t3 * t46 - t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t228, -0.2e1 * t267 * t252, t269, -0.2e1 * t228, -t270, 0, -pkin(8) * t269 + t193 * t204, pkin(8) * t270 + t196 * t204 (-t185 - t186) * t229 + t202 ((t128 * t193 - t129 * t196) * t197 + (-t168 - t298) * t194) * t266 + t202 * pkin(8), t145 * t162 - t210 * t320, -t162 * t144 - t145 * t221 + (-t157 * t221 - t162 * t320) * qJD(3), -t221 * t198, t144 * t221 - t157 * t209, -t162 * t198, 0, t182 * t144 + t154 * t221 + t157 * t246 + (t146 * t162 - t157 * t311 - t284) * qJD(3), -t320 * t246 + t182 * t145 + t154 * t162 + (-t146 * t221 + t311 * t320 - t283) * qJD(3), -t125 * t144 - t44 * t221 - t124 * t145 - t43 * t162 + t284 * t320 + t283 * t157 + (-t162 * t71 + t221 * t70) * qJD(3), t43 * t124 + t44 * t125 + t342 * t146 + t154 * t182 + t283 * t71 - t284 * t70, t112 * t211 + t212 * t67, -t103 * t67 - t111 * t211 - t112 * t60 + t212 * t68, -t67 * t251, -t103 * t68 + t296, -t68 * t251, 0, -t103 * t227 + t107 * t111 + t108 * t68 + t134 * t60 - t302 * t251, t107 * t112 - t108 * t67 + t134 * t211 - t212 * t227 - t303 * t251, t103 * t303 + t111 * t200 + t8 * t112 + t211 * t50 - t212 * t302 + t29 * t67 - t30 * t68 - t51 * t60, t107 * t134 + t227 * t108 - t200 * t51 - t302 * t29 + t303 * t30 + t318, t112 * t217 - t67 * t288, t222 * t67 + (t35 - t37 + (-t288 + t293) * qJD(6)) * t112, -t38 * t111 - t112 * t215 - t290 * t329 + t89 * t68, -t301 * t112 - t67 * t293, -t39 * t111 - t112 * t300 + t67 * t291 - t87 * t68, t329 * t68 + t296, t3 * t111 + t316 * t112 - t223 * t68 + t25 * t60 - t67 * t295 + t302 * t87 + t314 * t329 + t50 * t39, -t2 * t111 + t322 * t112 - t12 * t68 - t26 * t60 - t27 * t290 + t302 * t89 - t315 * t329 - t50 * t38, t25 * t38 - t26 * t39 - t314 * t89 - t315 * t87 + t224 * t67 + (-t2 * t191 - t3 * t195 + (-t12 * t195 - t191 * t223) * qJD(6)) * t112, t315 * t12 + t2 * t26 - t223 * t314 + t3 * t25 + t302 * t27 + t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t248, t267 * t199, 0, t248, 0, 0, t226 * t263, -t168 * t261 + (t128 + t275) * qJD(3) - t268, 0, 0, -t276, -t155 + t319, -t172 + (-t157 + t243) * qJD(3), t276, 0, 0, -qJD(3) * t73 - t146 * t320 + t157 * t183 + t43, qJD(3) * t75 - t146 * t157 - t183 * t320 - t44 (t71 + t73) * t320 + (t70 - t75) * t157 + (-t144 * t187 - t145 * t189) * pkin(3), -t70 * t73 - t71 * t75 + (-t146 * t263 + t187 * t44 + t189 * t43) * pkin(3), t277, t338, t339, -t277, t331, 0, -t285 * qJD(3) + t341 * qJD(5) + t126 * t103 + t325, t126 * t212 - t286 * t251 + t327, -t150 * t211 - t151 * t60 + t341 * t212 + (t286 + t29) * t103, -t108 * t126 - t8 * t150 - t151 * t200 - t285 * t29 + t286 * t30, t337, t326, t336, t87 * t291 - t37, t220 - t297, t335, -t332 - t13 * t329 + t147 * t39 + t23 + t285 * t87 + (-qJD(6) * t148 * t329 - t8) * t195 + t207 * t191, -t147 * t38 + (t148 * t257 + t14) * t329 + t285 * t89 + t207 * t195 + t328, t13 * t89 + t14 * t87 + t1 + (-t103 * t223 - t137 * t87 - t148 * t39 + (t148 * t89 + t223) * qJD(6)) * t195 + (t103 * t12 + t137 * t89 - t148 * t38 - t3 + (t148 * t87 - t12) * qJD(6)) * t191, t8 * t147 + t285 * t27 + (t137 * t195 - t14) * t12 - (-t137 * t191 - t13) * t223 + t203 * t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t144, -t172 + (t157 + t243) * qJD(3), -t155 - t319, -t157 * t71 + t320 * t70 + t154, 0, 0, 0, 0, 0, 0, t234 - t255 - 0.2e1 * t330, t211 + t321, -t280 - t281, -t103 * t30 - t212 * t29 + t107, 0, 0, 0, 0, 0, 0, t220 + t297, -t195 * t329 ^ 2 + t287 - t52 (t289 - t292) * t103 - t217 + t301, t324 * t191 + t323 * t195 + t212 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t277, t338, t339, -t277, t331, 0, t30 * qJD(3) + t325, t251 * t29 + t327, 0, 0, t337, t326, t336, t293 * t329 - t37, -t291 * t329 - t297 + t54, t335, -pkin(5) * t39 - pkin(10) * t300 - t103 * t295 - t15 * t329 - t30 * t87 - t322 - t332, pkin(5) * t38 + pkin(10) * t215 + t16 * t329 - t27 * t333 - t30 * t89 + t328, t15 * t89 + t16 * t87 + t1 + (t340 + (-t39 + t282) * pkin(10)) * t195 + ((qJD(6) * t87 - t38) * pkin(10) - t323) * t191, -t8 * pkin(5) + pkin(10) * t203 - t12 * t16 + t15 * t223 - t27 * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t305, -t87 ^ 2 + t89 ^ 2, t329 * t87 - t38, -t305, t329 * t89 - t39, t60, -t27 * t89 + t323, t27 * t87 - t324, 0, 0;];
tauc_reg  = t4;
