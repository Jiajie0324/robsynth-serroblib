% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 04:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRPRR1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR1_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:17:31
% EndTime: 2019-05-05 04:17:46
% DurationCPUTime: 6.88s
% Computational Cost: add. (38972->501), mult. (86491->749), div. (0->0), fcn. (66070->14), ass. (0->298)
t355 = 2 * qJD(4);
t268 = sin(pkin(12));
t270 = cos(pkin(12));
t279 = cos(qJ(3));
t275 = sin(qJ(3));
t312 = qJD(2) * t275;
t237 = qJD(2) * t270 * t279 - t268 * t312;
t238 = (t268 * t279 + t270 * t275) * qJD(2);
t221 = t237 * t238;
t343 = qJDD(3) + t221;
t354 = t268 * t343;
t353 = t270 * t343;
t273 = sin(qJ(6));
t274 = sin(qJ(5));
t278 = cos(qJ(5));
t212 = t237 * t274 + t238 * t278;
t306 = qJD(2) * qJD(3);
t296 = t279 * t306;
t305 = t275 * qJDD(2);
t243 = t296 + t305;
t297 = t275 * t306;
t304 = t279 * qJDD(2);
t287 = -t297 + t304;
t222 = -t243 * t268 + t270 * t287;
t223 = t270 * t243 + t268 * t287;
t291 = -t278 * t222 + t274 * t223;
t159 = -qJD(5) * t212 - t291;
t158 = qJDD(6) - t159;
t265 = qJD(3) + qJD(5);
t277 = cos(qJ(6));
t191 = t212 * t273 - t277 * t265;
t193 = t212 * t277 + t265 * t273;
t168 = t193 * t191;
t345 = t158 - t168;
t352 = t273 * t345;
t210 = -t278 * t237 + t238 * t274;
t181 = t212 * t210;
t264 = qJDD(3) + qJDD(5);
t344 = -t181 + t264;
t351 = t274 * t344;
t350 = t277 * t345;
t349 = t278 * t344;
t334 = sin(pkin(11));
t335 = cos(pkin(11));
t247 = -g(1) * t335 - g(2) * t334;
t276 = sin(qJ(2));
t280 = cos(qJ(2));
t269 = sin(pkin(6));
t271 = cos(pkin(6));
t286 = g(1) * t334 - g(2) * t335;
t314 = -g(3) + qJDD(1);
t347 = t269 * t314 + t271 * t286;
t214 = t280 * t247 + t276 * t347;
t282 = qJD(2) ^ 2;
t201 = -t282 * pkin(2) + qJDD(2) * pkin(8) + t214;
t228 = -t269 * t286 + t271 * t314;
t185 = t275 * t201 - t279 * t228;
t315 = t279 * t282;
t255 = t275 * t315;
t249 = qJDD(3) + t255;
t165 = (-t243 + t296) * qJ(4) + t249 * pkin(3) - t185;
t298 = qJ(4) * t312;
t248 = qJD(3) * pkin(3) - t298;
t319 = t275 * t228;
t166 = t319 + (-t248 - t298) * qJD(3) + (-pkin(3) * t315 + qJ(4) * qJDD(2) + t201) * t279;
t121 = -t270 * t165 + t268 * t166 + t238 * t355;
t309 = t237 * qJD(3);
t290 = -t223 + t309;
t348 = pkin(9) * t290 - t121;
t178 = pkin(5) * t210 - pkin(10) * t212;
t342 = t265 ^ 2;
t283 = pkin(4) * t343 + t348;
t122 = t268 * t165 + t270 * t166 + t237 * t355;
t227 = qJD(3) * pkin(4) - pkin(9) * t238;
t235 = t237 ^ 2;
t103 = -pkin(4) * t235 + pkin(9) * t222 - qJD(3) * t227 + t122;
t317 = t278 * t103;
t59 = t274 * t283 + t317;
t49 = -pkin(5) * t342 + t264 * pkin(10) - t210 * t178 + t59;
t289 = t276 * t247 - t280 * t347;
t200 = -qJDD(2) * pkin(2) - t282 * pkin(8) + t289;
t341 = t279 ^ 2;
t263 = t341 * t282;
t180 = -t287 * pkin(3) - qJ(4) * t263 + t248 * t312 + qJDD(4) + t200;
t133 = -t222 * pkin(4) - t235 * pkin(9) + t238 * t227 + t180;
t160 = -qJD(5) * t210 + t222 * t274 + t223 * t278;
t205 = t265 * t210;
t143 = t160 - t205;
t76 = t133 - t143 * pkin(10) + (t212 * t265 - t159) * pkin(5);
t38 = t273 * t49 - t277 * t76;
t39 = t273 * t76 + t277 * t49;
t22 = t273 * t38 + t277 * t39;
t207 = qJD(6) + t210;
t292 = t273 * t160 - t277 * t264;
t114 = (qJD(6) - t207) * t193 + t292;
t189 = t191 ^ 2;
t190 = t193 ^ 2;
t206 = t207 ^ 2;
t208 = t210 ^ 2;
t209 = t212 ^ 2;
t236 = t238 ^ 2;
t340 = pkin(5) * t274;
t58 = t103 * t274 - t278 * t283;
t48 = -t264 * pkin(5) - pkin(10) * t342 + t178 * t212 + t58;
t339 = -pkin(5) * t48 + pkin(10) * t22;
t32 = t274 * t59 - t278 * t58;
t338 = t268 * t32;
t337 = t270 * t32;
t45 = t273 * t48;
t77 = -t121 * t270 + t122 * t268;
t336 = t275 * t77;
t46 = t277 * t48;
t125 = t158 + t168;
t333 = t125 * t273;
t332 = t125 * t277;
t331 = t133 * t274;
t330 = t133 * t278;
t176 = t181 + t264;
t329 = t176 * t274;
t328 = t176 * t278;
t327 = t180 * t268;
t326 = t180 * t270;
t325 = t207 * t273;
t324 = t207 * t277;
t217 = qJDD(3) - t221;
t323 = t217 * t268;
t322 = t217 * t270;
t321 = t265 * t274;
t320 = t265 * t278;
t318 = t275 * t249;
t250 = qJDD(3) - t255;
t316 = t279 * t250;
t311 = qJD(3) * t238;
t307 = qJD(6) + t207;
t288 = -t277 * t160 - t273 * t264;
t119 = t191 * t307 + t288;
t155 = -t190 - t206;
t91 = -t155 * t273 - t332;
t303 = pkin(5) * t119 + pkin(10) * t91 + t45;
t116 = -t193 * t307 - t292;
t148 = -t206 - t189;
t86 = t148 * t277 - t352;
t302 = pkin(5) * t116 + pkin(10) * t86 - t46;
t301 = t274 * t168;
t300 = t278 * t168;
t299 = -pkin(5) * t278 - pkin(4);
t33 = t274 * t58 + t278 * t59;
t147 = t189 + t190;
t130 = -qJD(6) * t191 - t288;
t173 = t207 * t191;
t118 = t130 + t173;
t72 = -t114 * t277 + t118 * t273;
t294 = pkin(5) * t147 + pkin(10) * t72 + t22;
t78 = t121 * t268 + t270 * t122;
t186 = t279 * t201 + t319;
t145 = t185 * t275 + t279 * t186;
t21 = t273 * t39 - t277 * t38;
t196 = t222 + t311;
t244 = -0.2e1 * t297 + t304;
t285 = (-qJD(5) + t265) * t212 - t291;
t281 = qJD(3) ^ 2;
t266 = t275 ^ 2;
t262 = t266 * t282;
t254 = -t263 - t281;
t253 = -t262 - t281;
t246 = t262 + t263;
t245 = (t266 + t341) * qJDD(2);
t242 = 0.2e1 * t296 + t305;
t231 = -t236 - t281;
t230 = -t236 + t281;
t229 = t235 - t281;
t225 = -t253 * t275 - t316;
t224 = t254 * t279 - t318;
t215 = -t281 - t235;
t203 = -t209 + t342;
t202 = t208 - t342;
t199 = -t209 - t342;
t197 = t223 + t309;
t195 = -t222 + t311;
t194 = -t235 - t236;
t188 = -t231 * t268 - t322;
t187 = t231 * t270 - t323;
t183 = t215 * t270 - t354;
t182 = t215 * t268 + t353;
t179 = t209 - t208;
t174 = -t342 - t208;
t172 = -t190 + t206;
t171 = t189 - t206;
t170 = (-t210 * t278 + t212 * t274) * t265;
t169 = (-t210 * t274 - t212 * t278) * t265;
t167 = t190 - t189;
t164 = t196 * t270 - t268 * t290;
t163 = t196 * t268 + t270 * t290;
t157 = -t208 - t209;
t156 = -t187 * t275 + t188 * t279;
t154 = t202 * t278 - t329;
t153 = -t203 * t274 + t349;
t152 = t202 * t274 + t328;
t151 = t203 * t278 + t351;
t150 = -t199 * t274 - t328;
t149 = t199 * t278 - t329;
t144 = t160 + t205;
t139 = (qJD(5) + t265) * t212 + t291;
t138 = t160 * t278 - t212 * t321;
t137 = t160 * t274 + t212 * t320;
t136 = -t159 * t274 + t210 * t320;
t135 = t159 * t278 + t210 * t321;
t134 = -t182 * t275 + t183 * t279;
t132 = t174 * t278 - t351;
t131 = t174 * t274 + t349;
t129 = -qJD(6) * t193 - t292;
t128 = (-t191 * t277 + t193 * t273) * t207;
t127 = (-t191 * t273 - t193 * t277) * t207;
t123 = -t163 * t275 + t164 * t279;
t117 = t130 - t173;
t111 = t130 * t277 - t193 * t325;
t110 = t130 * t273 + t193 * t324;
t109 = -t129 * t273 + t191 * t324;
t108 = t129 * t277 + t191 * t325;
t107 = -t149 * t268 + t150 * t270;
t106 = t149 * t270 + t150 * t268;
t105 = t128 * t278 + t158 * t274;
t104 = t128 * t274 - t158 * t278;
t102 = -pkin(9) * t149 + t330;
t101 = t171 * t277 - t333;
t100 = -t172 * t273 + t350;
t99 = t171 * t273 + t332;
t98 = t172 * t277 + t352;
t97 = t144 * t274 + t278 * t285;
t96 = -t139 * t278 - t143 * t274;
t95 = -t144 * t278 + t274 * t285;
t94 = -t139 * t274 + t143 * t278;
t92 = -pkin(9) * t131 + t331;
t90 = t155 * t277 - t333;
t88 = -t131 * t268 + t132 * t270;
t87 = t131 * t270 + t132 * t268;
t85 = t148 * t273 + t350;
t83 = t111 * t278 + t301;
t82 = t109 * t278 - t301;
t81 = t111 * t274 - t300;
t80 = t109 * t274 + t300;
t79 = -pkin(4) * t143 + pkin(9) * t150 + t331;
t74 = -pkin(4) * t139 + pkin(9) * t132 - t330;
t73 = t116 * t277 - t117 * t273;
t71 = t116 * t273 + t117 * t277;
t70 = -t114 * t273 - t118 * t277;
t68 = -t106 * t275 + t107 * t279;
t67 = t101 * t278 - t114 * t274;
t66 = t100 * t278 + t118 * t274;
t65 = t101 * t274 + t114 * t278;
t64 = t100 * t274 - t118 * t278;
t63 = -t119 * t274 + t278 * t91;
t62 = t119 * t278 + t274 * t91;
t61 = -t116 * t274 + t278 * t86;
t60 = t116 * t278 + t274 * t86;
t57 = -t268 * t95 + t270 * t97;
t56 = t268 * t97 + t270 * t95;
t54 = t167 * t274 + t278 * t73;
t53 = -t167 * t278 + t274 * t73;
t52 = -t147 * t274 + t278 * t72;
t51 = t147 * t278 + t274 * t72;
t50 = -t275 * t87 + t279 * t88;
t44 = t279 * t78 - t336;
t43 = -pkin(10) * t90 + t46;
t42 = -pkin(10) * t85 + t45;
t41 = -t268 * t62 + t270 * t63;
t40 = t268 * t63 + t270 * t62;
t35 = -t268 * t60 + t270 * t61;
t34 = t268 * t61 + t270 * t60;
t31 = -t275 * t56 + t279 * t57;
t30 = -t268 * t51 + t270 * t52;
t29 = t268 * t52 + t270 * t51;
t28 = -pkin(4) * t133 + pkin(9) * t33;
t27 = -pkin(9) * t95 - t32;
t26 = -pkin(5) * t90 + t39;
t25 = -pkin(5) * t85 + t38;
t24 = -pkin(4) * t157 + pkin(9) * t97 + t33;
t23 = -t275 * t40 + t279 * t41;
t19 = -t275 * t34 + t279 * t35;
t18 = t270 * t33 - t338;
t17 = t268 * t33 + t337;
t16 = -t275 * t29 + t279 * t30;
t15 = -pkin(10) * t70 - t21;
t14 = t22 * t278 + t274 * t48;
t13 = t22 * t274 - t278 * t48;
t12 = -pkin(9) * t62 - t26 * t274 + t278 * t43;
t11 = -pkin(9) * t60 - t25 * t274 + t278 * t42;
t10 = -pkin(4) * t90 + pkin(9) * t63 + t26 * t278 + t274 * t43;
t9 = -pkin(4) * t85 + pkin(9) * t61 + t25 * t278 + t274 * t42;
t8 = -pkin(9) * t51 + t15 * t278 + t340 * t70;
t7 = pkin(9) * t52 + t274 * t15 + t299 * t70;
t6 = -t17 * t275 + t18 * t279;
t5 = -t13 * t268 + t14 * t270;
t4 = t13 * t270 + t14 * t268;
t3 = -pkin(9) * t13 + (-pkin(10) * t278 + t340) * t21;
t2 = pkin(9) * t14 + (-pkin(10) * t274 + t299) * t21;
t1 = -t275 * t4 + t279 * t5;
t20 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t314, 0, 0, 0, 0, 0, 0, (qJDD(2) * t280 - t276 * t282) * t269, (-qJDD(2) * t276 - t280 * t282) * t269, 0, t271 * t228 + (t214 * t276 - t280 * t289) * t269, 0, 0, 0, 0, 0, 0, t271 * (t249 * t279 + t254 * t275) + (t224 * t276 + t244 * t280) * t269, t271 * (-t250 * t275 + t253 * t279) + (t225 * t276 - t242 * t280) * t269, (t245 * t276 + t246 * t280) * t269, t271 * (-t185 * t279 + t186 * t275) + (t145 * t276 - t200 * t280) * t269, 0, 0, 0, 0, 0, 0, t271 * (t182 * t279 + t183 * t275) + (t134 * t276 - t195 * t280) * t269, t271 * (t187 * t279 + t188 * t275) + (t156 * t276 - t197 * t280) * t269, t271 * (t163 * t279 + t164 * t275) + (t123 * t276 - t194 * t280) * t269, t271 * (t275 * t78 + t279 * t77) + (-t180 * t280 + t276 * t44) * t269, 0, 0, 0, 0, 0, 0, t271 * (t275 * t88 + t279 * t87) + (-t139 * t280 + t276 * t50) * t269, t271 * (t106 * t279 + t107 * t275) + (-t143 * t280 + t276 * t68) * t269, t271 * (t275 * t57 + t279 * t56) + (-t157 * t280 + t276 * t31) * t269, t271 * (t17 * t279 + t18 * t275) + (-t133 * t280 + t276 * t6) * t269, 0, 0, 0, 0, 0, 0, t271 * (t275 * t35 + t279 * t34) + (t19 * t276 - t280 * t85) * t269, t271 * (t275 * t41 + t279 * t40) + (t23 * t276 - t280 * t90) * t269, t271 * (t275 * t30 + t279 * t29) + (t16 * t276 - t280 * t70) * t269, t271 * (t275 * t5 + t279 * t4) + (t1 * t276 - t21 * t280) * t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t289, -t214, 0, 0, (t243 + t296) * t275, t242 * t279 + t244 * t275, t318 + t279 * (-t262 + t281), t244 * t279, t275 * (t263 - t281) + t316, 0, pkin(2) * t244 + pkin(8) * t224 - t200 * t279, -pkin(2) * t242 + pkin(8) * t225 + t200 * t275, pkin(2) * t246 + pkin(8) * t245 + t145, -pkin(2) * t200 + pkin(8) * t145, t275 * (t223 * t270 - t268 * t311) + t279 * (t223 * t268 + t270 * t311), t275 * (-t195 * t270 - t197 * t268) + t279 * (-t195 * t268 + t197 * t270), t275 * (-t230 * t268 + t353) + t279 * (t230 * t270 + t354), t275 * (-t222 * t268 - t270 * t309) + t279 * (t222 * t270 - t268 * t309), t275 * (t229 * t270 - t323) + t279 * (t229 * t268 + t322), (t275 * (t237 * t270 + t238 * t268) + t279 * (t237 * t268 - t238 * t270)) * qJD(3), t275 * (-qJ(4) * t182 + t327) + t279 * (-pkin(3) * t195 + qJ(4) * t183 - t326) - pkin(2) * t195 + pkin(8) * t134, t275 * (-qJ(4) * t187 + t326) + t279 * (-pkin(3) * t197 + qJ(4) * t188 + t327) - pkin(2) * t197 + pkin(8) * t156, t275 * (-qJ(4) * t163 - t77) + t279 * (-pkin(3) * t194 + qJ(4) * t164 + t78) - pkin(2) * t194 + pkin(8) * t123, -qJ(4) * t336 + t279 * (-pkin(3) * t180 + qJ(4) * t78) - pkin(2) * t180 + pkin(8) * t44, t275 * (-t137 * t268 + t138 * t270) + t279 * (t137 * t270 + t138 * t268), t275 * (-t268 * t94 + t270 * t96) + t279 * (t268 * t96 + t270 * t94), t275 * (-t151 * t268 + t153 * t270) + t279 * (t151 * t270 + t153 * t268), t275 * (-t135 * t268 + t136 * t270) + t279 * (t135 * t270 + t136 * t268), t275 * (-t152 * t268 + t154 * t270) + t279 * (t152 * t270 + t154 * t268), t275 * (-t169 * t268 + t170 * t270) + t279 * (t169 * t270 + t170 * t268), t275 * (-qJ(4) * t87 - t268 * t74 + t270 * t92) + t279 * (-pkin(3) * t139 + qJ(4) * t88 + t268 * t92 + t270 * t74) - pkin(2) * t139 + pkin(8) * t50, t275 * (-qJ(4) * t106 + t102 * t270 - t268 * t79) + t279 * (-pkin(3) * t143 + qJ(4) * t107 + t102 * t268 + t270 * t79) - pkin(2) * t143 + pkin(8) * t68, t275 * (-qJ(4) * t56 - t24 * t268 + t27 * t270) + t279 * (-pkin(3) * t157 + qJ(4) * t57 + t24 * t270 + t268 * t27) - pkin(2) * t157 + pkin(8) * t31, t275 * (-pkin(9) * t337 - qJ(4) * t17 - t268 * t28) + t279 * (-pkin(3) * t133 - pkin(9) * t338 + qJ(4) * t18 + t270 * t28) - pkin(2) * t133 + pkin(8) * t6, t275 * (-t268 * t81 + t270 * t83) + t279 * (t268 * t83 + t270 * t81), t275 * (-t268 * t53 + t270 * t54) + t279 * (t268 * t54 + t270 * t53), t275 * (-t268 * t64 + t270 * t66) + t279 * (t268 * t66 + t270 * t64), t275 * (-t268 * t80 + t270 * t82) + t279 * (t268 * t82 + t270 * t80), t275 * (-t268 * t65 + t270 * t67) + t279 * (t268 * t67 + t270 * t65), t275 * (-t104 * t268 + t105 * t270) + t279 * (t104 * t270 + t105 * t268), t275 * (-qJ(4) * t34 + t11 * t270 - t268 * t9) + t279 * (-pkin(3) * t85 + qJ(4) * t35 + t11 * t268 + t270 * t9) - pkin(2) * t85 + pkin(8) * t19, t275 * (-qJ(4) * t40 - t10 * t268 + t12 * t270) + t279 * (-pkin(3) * t90 + qJ(4) * t41 + t10 * t270 + t12 * t268) - pkin(2) * t90 + pkin(8) * t23, t275 * (-qJ(4) * t29 - t268 * t7 + t270 * t8) + t279 * (-pkin(3) * t70 + qJ(4) * t30 + t268 * t8 + t270 * t7) - pkin(2) * t70 + pkin(8) * t16, t275 * (-qJ(4) * t4 - t2 * t268 + t270 * t3) + t279 * (-pkin(3) * t21 + qJ(4) * t5 + t2 * t270 + t268 * t3) - pkin(2) * t21 + pkin(8) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t255, -t263 + t262, t305, t255, t304, qJDD(3), -t185, -t186, 0, 0, -t221, t236 - t235, -t290, t221, t196, qJDD(3), pkin(3) * t182 - t121, pkin(3) * t187 - t122, pkin(3) * t163, pkin(3) * t77, t181, t179, t144, -t181, t285, t264, pkin(3) * t87 + pkin(4) * t131 - t58, pkin(3) * t106 - t317 - t274 * t348 + (-t274 * t343 + t149) * pkin(4), pkin(3) * t56 + pkin(4) * t95, pkin(3) * t17 + pkin(4) * t32, t110, t71, t98, t108, t99, t127, pkin(3) * t34 + pkin(4) * t60 + t302, pkin(3) * t40 + pkin(4) * t62 + t303, pkin(3) * t29 + pkin(4) * t51 + t294, pkin(3) * t4 + pkin(4) * t13 + t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t195, t197, t194, t180, 0, 0, 0, 0, 0, 0, t139, t143, t157, t133, 0, 0, 0, 0, 0, 0, t85, t90, t70, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, t179, t144, -t181, t285, t264, -t58, -t59, 0, 0, t110, t71, t98, t108, t99, t127, t302, t303, t294, t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, t167, t118, -t168, -t114, t158, -t38, -t39, 0, 0;];
tauJ_reg  = t20;
