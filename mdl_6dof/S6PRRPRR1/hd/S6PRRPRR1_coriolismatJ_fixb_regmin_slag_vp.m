% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRPRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 21:54:10
% EndTime: 2019-03-08 21:54:27
% DurationCPUTime: 10.79s
% Computational Cost: add. (8544->456), mult. (19266->678), div. (0->0), fcn. (23562->12), ass. (0->369)
t355 = cos(qJ(6));
t348 = sin(pkin(12));
t350 = cos(pkin(12));
t353 = sin(qJ(3));
t356 = cos(qJ(3));
t319 = -t348 * t353 + t350 * t356;
t320 = t348 * t356 + t350 * t353;
t352 = sin(qJ(5));
t571 = cos(qJ(5));
t278 = -t571 * t319 + t352 * t320;
t555 = t278 ^ 2;
t316 = t571 * t320;
t534 = t352 * t319;
t595 = t316 + t534;
t617 = t595 ^ 2;
t618 = t617 - t555;
t635 = t618 * t355;
t638 = t635 * qJD(2);
t611 = t355 * t278;
t626 = t611 / 0.2e1;
t627 = -t611 / 0.2e1;
t632 = t627 + t626;
t639 = qJD(6) * t632;
t642 = t638 + t639;
t476 = qJD(3) + qJD(5);
t351 = sin(qJ(6));
t565 = -qJ(4) - pkin(8);
t330 = t565 * t353;
t331 = t565 * t356;
t292 = t348 * t330 - t350 * t331;
t230 = -t319 * pkin(9) - t292;
t623 = t571 * t230;
t594 = t350 * t330 + t348 * t331;
t606 = -t320 * pkin(9) + t594;
t624 = t352 * t606;
t633 = -t623 + t624;
t641 = t633 * t351;
t640 = t633 * t355;
t636 = t618 * t351;
t637 = t636 * qJD(2);
t622 = t571 * t606;
t589 = -t622 / 0.2e1;
t422 = t623 / 0.2e1;
t601 = t595 * qJD(2);
t458 = t278 * t601;
t420 = t316 / 0.2e1;
t593 = t420 + t534 / 0.2e1;
t634 = qJD(6) * t593 + t458;
t625 = t352 * t230;
t132 = t622 + t625;
t349 = sin(pkin(6));
t357 = cos(qJ(2));
t551 = t349 * t357;
t293 = t320 * t551;
t463 = t571 * t293;
t294 = t319 * t551;
t535 = t352 * t294;
t379 = t535 / 0.2e1 + t463 / 0.2e1;
t451 = -t551 / 0.2e1;
t609 = t595 * t451;
t620 = t609 + t379;
t631 = qJD(1) * t620;
t630 = qJD(2) * t620;
t621 = t609 - t379;
t629 = qJD(2) * t621;
t628 = t618 * qJD(2);
t354 = sin(qJ(2));
t552 = t349 * t354;
t561 = cos(pkin(6));
t317 = t353 * t552 - t356 * t561;
t318 = t353 * t561 + t356 * t552;
t240 = t348 * t317 - t350 * t318;
t610 = t571 * t240;
t421 = t610 / 0.2e1;
t613 = t351 * t595;
t447 = t613 / 0.2e1;
t567 = t595 * pkin(5);
t568 = t278 * pkin(10);
t173 = t567 + t568;
t430 = -t350 * t317 - t348 * t318;
t597 = t571 * t430;
t612 = t352 * t240;
t138 = t597 + t612;
t598 = t352 * t430;
t619 = -t610 + t598;
t616 = -t278 / 0.2e1;
t582 = t278 / 0.2e1;
t615 = -t595 / 0.2e1;
t614 = t595 / 0.2e1;
t588 = -t597 / 0.2e1;
t569 = pkin(10) * t595;
t484 = t278 * qJD(5);
t607 = -t278 * qJD(3) - t484;
t605 = qJD(2) * t278;
t604 = qJD(4) * t278;
t602 = t593 * qJD(2);
t600 = 0.2e1 * t595;
t346 = t351 ^ 2;
t347 = t355 ^ 2;
t335 = t347 - t346;
t599 = t335 * t476;
t167 = 0.2e1 * t627;
t470 = t350 * pkin(3) + pkin(4);
t570 = pkin(3) * t348;
t313 = t352 * t570 - t571 * t470;
t307 = -pkin(5) + t313;
t596 = t307 + t313;
t314 = t352 * t470 + t570 * t571;
t308 = pkin(10) + t314;
t578 = -t307 / 0.2e1;
t433 = t313 / 0.2e1 + t578;
t362 = (-t308 / 0.2e1 + t314 / 0.2e1) * t595 + t433 * t278;
t592 = -t569 / 0.2e1 + t362;
t462 = t571 * t294;
t536 = t352 * t293;
t517 = t536 / 0.2e1 - t462 / 0.2e1;
t432 = t346 / 0.2e1 - t347 / 0.2e1;
t150 = t432 * t595;
t545 = t351 * t355;
t460 = qJD(2) * t545;
t591 = t150 * t476 + t460 * t617;
t586 = -t240 / 0.2e1;
t577 = -t320 / 0.2e1;
t576 = t348 / 0.2e1;
t575 = -t351 / 0.2e1;
t574 = t351 / 0.2e1;
t573 = -t355 / 0.2e1;
t572 = t355 / 0.2e1;
t345 = t353 * pkin(3);
t564 = qJD(3) * pkin(3);
t548 = t351 * t619;
t95 = t355 * t551 + t548;
t563 = t95 * t278;
t532 = t355 * t619;
t96 = -t351 * t551 + t532;
t562 = t96 * t278;
t557 = t351 * t132;
t556 = t355 * t132;
t436 = t586 + t240 / 0.2e1;
t34 = t320 * t436;
t553 = t34 * qJD(2);
t192 = t462 - t536;
t547 = t351 * t192;
t155 = t351 * t278;
t531 = t355 * t192;
t529 = t355 * t595;
t402 = t617 + t555;
t62 = t402 * t351;
t526 = t62 * qJD(2);
t64 = t402 * t355;
t524 = t64 * qJD(2);
t65 = -t349 ^ 2 * t357 * t354 - t240 * t294 - t293 * t430;
t523 = t65 * qJD(1);
t434 = 0.2e1 * t614;
t162 = t434 * t355;
t485 = t595 * qJD(3);
t518 = t162 * qJD(5) + t355 * t485;
t143 = (t616 + t582) * t545;
t515 = qJD(2) * t143;
t340 = -t356 * pkin(3) - pkin(2);
t300 = -t319 * pkin(4) + t340;
t513 = qJD(2) * t300;
t512 = qJD(2) * t354;
t511 = qJD(2) * t356;
t510 = qJD(3) * t351;
t509 = qJD(3) * t355;
t508 = qJD(4) * t595;
t507 = qJD(5) * t351;
t506 = qJD(5) * t355;
t505 = qJD(6) * t351;
t344 = qJD(6) * t355;
t504 = t150 * qJD(2);
t503 = t613 * qJD(2);
t435 = t614 + t615;
t153 = t435 * t351;
t502 = t153 * qJD(2);
t154 = t434 * t351;
t501 = t154 * qJD(2);
t500 = t155 * qJD(2);
t157 = 0.2e1 * t616 * t351;
t147 = t157 * qJD(2);
t161 = t435 * t355;
t499 = t161 * qJD(2);
t498 = t162 * qJD(2);
t497 = t611 * qJD(2);
t166 = 0.2e1 * t626;
t496 = t166 * qJD(2);
t495 = t167 * qJD(2);
t172 = t335 * t617;
t494 = t172 * qJD(2);
t204 = 0.2e1 * t420 + t534;
t492 = t204 * qJD(2);
t378 = (t319 * t576 + t350 * t577) * pkin(3);
t228 = -t345 / 0.2e1 + t378;
t491 = t228 * qJD(2);
t275 = t420 - t316 / 0.2e1;
t488 = t275 * qJD(2);
t487 = t275 * qJD(5);
t481 = t595 * qJD(5);
t288 = t319 ^ 2 + t320 ^ 2;
t480 = t288 * qJD(2);
t304 = t314 * qJD(5);
t336 = -t353 ^ 2 + t356 ^ 2;
t479 = t336 * qJD(2);
t478 = t353 * qJD(3);
t477 = t356 * qJD(3);
t474 = pkin(2) * t353 * qJD(2);
t473 = pkin(2) * t511;
t471 = t351 * t552;
t461 = t347 * t601;
t459 = qJD(6) * t278 * t595;
t457 = t595 * t605;
t456 = t349 * t512;
t455 = qJD(2) * t551;
t337 = t351 * t344;
t454 = t353 * t511;
t453 = t355 * t601;
t128 = t138 * t574;
t129 = t138 * t572;
t452 = t552 / 0.2e1;
t450 = t551 / 0.2e1;
t449 = t548 / 0.2e1;
t448 = -t547 / 0.2e1;
t446 = t278 * t575;
t445 = -t613 / 0.2e1;
t443 = -t531 / 0.2e1;
t301 = t320 * pkin(4) + t345;
t429 = t476 * t355;
t427 = t595 * t460;
t425 = t278 * t450;
t424 = t278 * t451;
t419 = pkin(5) / 0.2e1 + t433;
t418 = t278 * pkin(5) - t569;
t416 = -0.2e1 * t427;
t415 = 0.2e1 * t427;
t414 = t351 * t429;
t413 = t476 * t545;
t134 = t301 + t173;
t363 = t300 + t418;
t35 = -t355 * t363 + t641;
t377 = t633 * t595;
t1 = t134 * t611 - t35 * t595 + t351 * t377;
t364 = t619 * t614;
t360 = t351 * t364 + t615 * t95;
t387 = t463 + t535;
t375 = t387 * t355;
t365 = t375 / 0.2e1;
t7 = t365 + t360;
t412 = t7 * qJD(1) + t1 * qJD(2);
t3 = t173 * t611 + (-t35 + t641) * t595;
t393 = (-t95 / 0.2e1 + t449) * t595;
t5 = t365 + t393;
t411 = t5 * qJD(1) + t3 * qJD(2);
t376 = t387 * t351;
t366 = -t376 / 0.2e1;
t392 = (-t96 / 0.2e1 + t532 / 0.2e1) * t595;
t10 = t366 + t392;
t36 = t351 * t363 + t640;
t4 = -t173 * t155 + (-t36 + t640) * t595;
t410 = t10 * qJD(1) + t4 * qJD(2);
t359 = t355 * t364 + t615 * t96;
t12 = t366 + t359;
t2 = -t134 * t155 + t355 * t377 - t36 * t595;
t409 = t12 * qJD(1) + t2 * qJD(2);
t358 = t569 / 0.2e1 + pkin(5) * t616 + t362;
t13 = t351 * t358;
t408 = t13 * qJD(2);
t21 = t132 * t613 + t35 * t278;
t388 = -t138 * t615 + t452;
t30 = t443 - t563 / 0.2e1 - t388 * t351;
t407 = qJD(1) * t30 - qJD(2) * t21;
t22 = -t132 * t529 - t36 * t278;
t29 = t448 + t562 / 0.2e1 + t388 * t355;
t406 = qJD(1) * t29 - qJD(2) * t22;
t390 = t294 * t576 - t293 * t350 / 0.2e1;
t27 = (t353 * t450 + t390) * pkin(3);
t87 = t340 * t345;
t405 = -t27 * qJD(1) + t87 * qJD(2);
t404 = t34 * qJD(1);
t90 = t301 * t278 + t300 * t595;
t403 = t90 * qJD(2) + t631;
t400 = -t307 * t278 - t308 * t595;
t101 = -t424 - t517;
t91 = -t278 * t300 + t301 * t595;
t399 = t101 * qJD(1) + t91 * qJD(2);
t141 = t292 * t319 - t320 * t594;
t391 = t319 * t586 + t430 * t577;
t88 = t452 - t391;
t398 = -t88 * qJD(1) + t141 * qJD(2);
t397 = t595 * (-qJD(6) - t605);
t396 = t204 * qJD(5) + t485;
t394 = t568 / 0.2e1 + t567 / 0.2e1;
t389 = t308 * t582 + t595 * t578;
t99 = t425 - t517;
t386 = -t99 * qJD(1) + t278 * t513;
t385 = -t513 * t595 - t631;
t382 = t607 * t595;
t381 = t173 / 0.2e1 + t394;
t374 = t134 / 0.2e1 + t389;
t38 = t589 + t622 / 0.2e1;
t54 = t588 + t597 / 0.2e1 + t436 * t352;
t373 = -qJD(1) * t54 - qJD(2) * t38 - qJD(3) * t313;
t37 = t422 - t623 / 0.2e1;
t53 = t421 - t610 / 0.2e1;
t372 = qJD(1) * t53 + qJD(2) * t37 + qJD(3) * t314;
t205 = t419 * t351;
t25 = t381 * t355;
t371 = pkin(5) * t507 + qJD(2) * t25 + qJD(3) * t205;
t206 = t419 * t355;
t23 = t381 * t351;
t370 = pkin(5) * t506 - qJD(2) * t23 + qJD(3) * t206;
t16 = t355 * t358;
t369 = -qJD(2) * t16 - t314 * t510;
t17 = t351 * t374;
t368 = -qJD(2) * t17 - t307 * t509;
t19 = t355 * t374;
t367 = qJD(2) * t19 - t307 * t510;
t333 = t335 * qJD(6);
t303 = t313 * qJD(5);
t299 = t351 * t304;
t229 = -0.2e1 * t595 * t337;
t227 = t345 / 0.2e1 + t378;
t208 = pkin(5) * t573 + t572 * t596;
t207 = pkin(5) * t575 + t574 * t596;
t183 = t416 + t599;
t182 = t415 - t599;
t181 = -t375 / 0.2e1;
t180 = t376 / 0.2e1;
t171 = t476 * t593;
t160 = t447 + t445;
t159 = 0.2e1 * t447;
t158 = -t155 / 0.2e1 - t446;
t149 = t161 * qJD(5);
t146 = t158 * qJD(6);
t145 = t157 * qJD(6);
t144 = t150 * qJD(6);
t142 = t167 * t351;
t140 = t147 - t505;
t119 = t413 - t504;
t118 = -t414 + t504;
t102 = -t424 + t517;
t100 = t425 + t517;
t89 = t452 + t391;
t60 = t432 * t278 + t346 * t582 + t347 * t616;
t56 = 0.2e1 * t421 - t598;
t55 = -t612 + 0.2e1 * t588;
t52 = t138 * t573 - t129;
t51 = -0.2e1 * t129;
t50 = t138 * t575 - t128;
t49 = -0.2e1 * t128;
t48 = -t532 / 0.2e1 + t619 * t573;
t43 = t574 * t619 + t449;
t40 = 0.2e1 * t422 - t624;
t39 = -t625 + 0.2e1 * t589;
t33 = t34 * qJD(3);
t32 = -t562 / 0.2e1 - t595 * t129 + t448 + t355 * t452;
t31 = t563 / 0.2e1 - t138 * t445 + t443 - t471 / 0.2e1;
t28 = pkin(3) * t390 + t345 * t451;
t26 = t173 * t572 - t355 * t394 - t557;
t24 = t173 * t575 + t351 * t394 - t556;
t20 = -t557 / 0.2e1 + t132 * t575 + t134 * t572 - t389 * t355;
t18 = -t556 / 0.2e1 + t132 * t573 + t134 * t575 + t389 * t351;
t15 = pkin(5) * t626 + t592 * t355 + t641;
t14 = -pkin(5) * t446 + t592 * t351 - t640;
t11 = t180 + t359;
t9 = t180 + t392;
t8 = t181 + t360;
t6 = t181 + t393;
t41 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t456, -t455, 0, 0, 0, 0, 0 (-t354 * t511 - t357 * t478) * t349 (t353 * t512 - t357 * t477) * t349 (t293 * t320 + t294 * t319) * qJD(2) - t33, t523 + (t294 * t292 - t293 * t594 + t340 * t552) * qJD(2) + t28 * qJD(3) + t89 * qJD(4), 0, 0, 0, 0, 0, t278 * t456 + t476 * t621, t102 * qJD(3) + t100 * qJD(5) + t456 * t595, 0, 0, 0, 0, 0 ((t355 * t552 - t547) * t278 + t595 * t376) * qJD(2) + t8 * qJD(3) + t6 * qJD(5) + t32 * qJD(6) (-(t471 + t531) * t278 + t595 * t375) * qJD(2) + t11 * qJD(3) + t9 * qJD(5) + t31 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318 * qJD(3) - t353 * t455, t317 * qJD(3) - t356 * t455, -t553, t28 * qJD(2) + (t240 * t350 + t348 * t430) * t564, 0, 0, 0, 0, 0, -qJD(3) * t619 + qJD(5) * t56 + t629, qJD(2) * t102 - qJD(3) * t138 + qJD(5) * t55, 0, 0, 0, 0, 0, t8 * qJD(2) + t48 * qJD(5) + t50 * qJD(6) - t509 * t619, t11 * qJD(2) + t43 * qJD(5) + t52 * qJD(6) + t510 * t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t56 - qJD(5) * t619 + t629, qJD(2) * t100 + qJD(3) * t55 - qJD(5) * t138, 0, 0, 0, 0, 0, t6 * qJD(2) + t48 * qJD(3) + t49 * qJD(6) - t506 * t619, t9 * qJD(2) + t43 * qJD(3) + t51 * qJD(6) + t507 * t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t32 + qJD(3) * t50 + qJD(5) * t49 - qJD(6) * t96, qJD(2) * t31 + qJD(3) * t52 + qJD(5) * t51 + qJD(6) * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -qJD(3) * t27 - qJD(4) * t88 - t523, 0, 0, 0, 0, 0, t476 * t620, qJD(3) * t101 + qJD(5) * t99, 0, 0, 0, 0, 0, qJD(3) * t7 + t5 * qJD(5) - qJD(6) * t29, qJD(3) * t12 + qJD(5) * t10 - qJD(6) * t30; 0, 0, 0, 0, t353 * t477, t336 * qJD(3), 0, 0, 0, -pkin(2) * t478, -pkin(2) * t477, t288 * qJD(4), qJD(3) * t87 + qJD(4) * t141, t382, -t476 * t618, 0, 0, 0, t90 * qJD(3) + t300 * t481, t91 * qJD(3) - t300 * t484, -t337 * t617 + t347 * t382, -0.2e1 * t351 * t529 * t607 - t172 * qJD(6), -t351 * t459 + t476 * t635, -t355 * t459 - t476 * t636 (t481 + t485) * t278, t1 * qJD(3) + qJD(4) * t62 + t3 * qJD(5) + qJD(6) * t22, t2 * qJD(3) + qJD(4) * t64 + t4 * qJD(5) + qJD(6) * t21; 0, 0, 0, 0, t454, t479, t477, -t478, 0, -pkin(8) * t477 - t474, pkin(8) * t478 - t473 (-t319 * t350 - t320 * t348) * t564 - t404, t227 * qJD(4) + (-t292 * t350 + t348 * t594) * t564 + t405, -t457, -t628, t607, -t396, 0, -qJD(3) * t633 + qJD(5) * t40 + t403, -qJD(3) * t132 + qJD(5) * t39 + t399, t142 * qJD(5) - t144 - (t351 * t509 + t461) * t278, t60 * qJD(5) + t229 - (qJD(3) * t335 + t416) * t278, t159 * qJD(5) + t351 * t485 + t642, t146 + t518 - t637, t634 (t351 * t400 - t640) * qJD(3) + t14 * qJD(5) + t20 * qJD(6) + t412 (t355 * t400 + t641) * qJD(3) + t15 * qJD(5) + t18 * qJD(6) + t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t480, t227 * qJD(3) + t398, 0, 0, 0, 0, 0, t487, 0, 0, 0, 0, 0, 0, t146 - t149 + t526, t160 * qJD(5) + t524 + t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t458, -t628, t607, -t204 * qJD(3) - t481, 0, t40 * qJD(3) + t275 * qJD(4) - qJD(5) * t633 - t385, t39 * qJD(3) - qJD(5) * t132 - t386, t142 * qJD(3) - t144 + (-t351 * t506 - t461) * t278, t60 * qJD(3) + t229 + (-qJD(5) * t335 + t415) * t278, t159 * qJD(3) + t351 * t481 + t642, t162 * qJD(3) + t355 * t481 - t637, t634, t14 * qJD(3) - t161 * qJD(4) + (t351 * t418 - t640) * qJD(5) + t26 * qJD(6) + t411, t15 * qJD(3) + t160 * qJD(4) + (t355 * t418 + t641) * qJD(5) + t24 * qJD(6) + t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t591, -t414 * t600 - t494, t351 * t397 + t476 * t632, t158 * qJD(3) + t355 * t397, t171, qJD(3) * t20 + qJD(4) * t158 + qJD(5) * t26 - qJD(6) * t36 - t406, qJD(3) * t18 + qJD(4) * t632 + qJD(5) * t24 + qJD(6) * t35 - t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, qJD(2) * t27, 0, 0, 0, 0, 0, -qJD(5) * t53 - t630, -qJD(2) * t101 + qJD(5) * t54, 0, 0, 0, 0, 0, -qJD(2) * t7, -qJD(2) * t12; 0, 0, 0, 0, -t454, -t479, 0, 0, 0, t474, t473, t404, qJD(4) * t228 - t405, t457, t628, 0, -t487, 0, -qJD(5) * t37 - t403 - t508, qJD(5) * t38 - t399 + t604, qJD(5) * t143 + t347 * t457 - t144, -t278 * t415 + t229, -qJD(5) * t153 + qJD(6) * t166 - t638, t145 - t149 + t637, -t634, qJD(5) * t13 - qJD(6) * t19 - t355 * t508 - t412, qJD(4) * t613 + qJD(5) * t16 + qJD(6) * t17 - t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304, t303, t337, t333, 0, 0, 0, -t304 * t355 + t307 * t505, t307 * t344 + t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t491, 0, 0, 0, 0, 0, -t601, t605, 0, 0, 0, 0, 0, -t453, t503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t488, 0, -t304 - t372, t303 - t373, t337 + t515, t333, -t502, -t499, 0, t207 * qJD(6) - t314 * t429 + t408, qJD(6) * t208 + t299 - t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, t183, t344 + t496, t140, -t602, qJD(5) * t207 - t308 * t344 - t367, qJD(5) * t208 + t308 * t505 - t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t480, -qJD(3) * t228 - t398, 0, 0, 0, 0, 0, t396, t607, 0, 0, 0, 0, 0, t145 + t518 - t526, -qJD(3) * t613 - qJD(5) * t154 + qJD(6) * t167 - t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t491, 0, 0, 0, 0, 0, t601, -t605, 0, 0, 0, 0, 0, t453, -t503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t492, -t605, 0, 0, 0, 0, 0, t498, -t501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, -t344 + t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t53 - t630, -qJD(2) * t99 - qJD(3) * t54, 0, 0, 0, 0, 0, -qJD(2) * t5, -qJD(2) * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t458, t628, 0, t275 * qJD(3), 0, qJD(3) * t37 - qJD(4) * t204 + t385, -qJD(3) * t38 + t386 + t604, -qJD(3) * t143 + t347 * t458 - t144, t278 * t416 + t229, qJD(3) * t153 + qJD(6) * t611 - t638, qJD(3) * t161 - qJD(6) * t155 + t637, -t634, -qJD(3) * t13 - qJD(4) * t162 - qJD(6) * t25 - t411, -qJD(3) * t16 + qJD(4) * t154 + qJD(6) * t23 - t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t488, 0, t372, t373, t337 - t515, t333, t502, t499, 0, -qJD(6) * t205 + t314 * t509 - t408, -qJD(6) * t206 + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t492, t605, 0, 0, 0, 0, 0, -t498, t501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t337, t333, 0, 0, 0, -pkin(5) * t505, -pkin(5) * t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, t183, t344 + t497, -t500 - t505, -t602, -pkin(10) * t344 - t371, pkin(10) * t505 - t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t29, qJD(2) * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t591, t413 * t600 + t494, -qJD(3) * t166 - qJD(5) * t611 + t351 * t458, -qJD(3) * t157 + qJD(5) * t155 + t355 * t458, t171, qJD(3) * t19 - qJD(4) * t157 + qJD(5) * t25 + t406, -qJD(3) * t17 - qJD(4) * t167 - qJD(5) * t23 + t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, t182, -t496, -t147, t602, qJD(5) * t205 + t367, qJD(5) * t206 + t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t147, -t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, t182, -t497, t500, t602, t371, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t41;
