% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 09:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 08:58:35
% EndTime: 2019-05-08 09:00:04
% DurationCPUTime: 53.29s
% Computational Cost: add. (537464->951), mult. (1071841->1466), div. (0->0), fcn. (809972->12), ass. (0->655)
t1155 = sin(qJ(6));
t1158 = sin(qJ(3));
t1159 = sin(qJ(2));
t1164 = cos(qJ(3));
t1165 = cos(qJ(2));
t1118 = (t1158 * t1165 + t1159 * t1164) * qJD(1);
t1225 = qJD(2) * t1165;
t1188 = qJD(1) * t1225;
t1204 = qJDD(1) * t1159;
t1126 = t1188 + t1204;
t1149 = t1165 * qJDD(1);
t1227 = qJD(1) * t1159;
t1195 = qJD(2) * t1227;
t1127 = t1149 - t1195;
t1184 = t1158 * t1126 - t1164 * t1127;
t1056 = -t1118 * qJD(3) - t1184;
t1053 = qJDD(4) - t1056;
t1052 = qJDD(5) + t1053;
t1169 = qJDD(6) + t1052;
t1157 = sin(qJ(4));
t1163 = cos(qJ(4));
t1209 = qJD(2) + qJD(3);
t1087 = t1157 * t1118 - t1163 * t1209;
t1088 = t1163 * t1118 + t1157 * t1209;
t1156 = sin(qJ(5));
t1162 = cos(qJ(5));
t1038 = t1162 * t1087 + t1088 * t1156;
t1040 = -t1087 * t1156 + t1088 * t1162;
t1161 = cos(qJ(6));
t988 = t1161 * t1038 + t1040 * t1155;
t990 = -t1038 * t1155 + t1040 * t1161;
t918 = t990 * t988;
t1254 = t1169 - t918;
t1266 = t1155 * t1254;
t993 = t1040 * t1038;
t1255 = t1052 - t993;
t1265 = t1156 * t1255;
t1049 = t1088 * t1087;
t1253 = -t1049 + t1053;
t1264 = t1157 * t1253;
t1116 = -t1164 * t1165 * qJD(1) + t1158 * t1227;
t1078 = t1118 * t1116;
t1201 = qJDD(2) + qJDD(3);
t1252 = -t1078 + t1201;
t1263 = t1158 * t1252;
t1262 = t1161 * t1254;
t1261 = t1162 * t1255;
t1260 = t1163 * t1253;
t1259 = t1164 * t1252;
t1057 = -t1116 * qJD(3) + t1164 * t1126 + t1158 * t1127;
t1107 = t1209 * t1116;
t1258 = t1057 - t1107;
t1200 = t1209 ^ 2;
t1006 = -t1087 * qJD(4) + t1163 * t1057 + t1157 * t1201;
t1173 = -t1157 * t1057 + t1163 * t1201;
t1170 = t1088 * qJD(4) - t1173;
t1185 = t1156 * t1006 + t1162 * t1170;
t921 = -qJD(5) * t1040 - t1185;
t922 = -t1038 * qJD(5) + t1162 * t1006 - t1156 * t1170;
t821 = -qJD(6) * t988 + t1155 * t921 + t1161 * t922;
t1112 = qJD(4) + t1116;
t1110 = qJD(5) + t1112;
t1105 = qJD(6) + t1110;
t964 = t1105 * t988;
t1257 = t821 - t964;
t1013 = t1110 * t1038;
t884 = -t1013 - t922;
t1256 = -t1013 + t922;
t1067 = t1112 * t1087;
t984 = -t1067 - t1006;
t982 = -t1067 + t1006;
t1187 = t1155 * t922 - t1161 * t921;
t797 = (qJD(6) - t1105) * t990 + t1187;
t885 = (qJD(5) - t1110) * t1040 + t1185;
t985 = (-t1112 + qJD(4)) * t1088 - t1173;
t1154 = t1165 ^ 2;
t1160 = sin(qJ(1));
t1166 = cos(qJ(1));
t1136 = t1160 * g(1) - t1166 * g(2);
t1175 = qJDD(1) * pkin(1) + t1136;
t1176 = qJD(2) * pkin(2) - pkin(8) * t1227;
t1251 = qJD(1) ^ 2;
t1059 = t1127 * pkin(2) - t1176 * t1227 + (pkin(8) * t1154 + pkin(7)) * t1251 + t1175;
t986 = t988 ^ 2;
t987 = t990 ^ 2;
t1250 = t1038 ^ 2;
t1037 = t1040 ^ 2;
t1249 = t1087 ^ 2;
t1085 = t1088 ^ 2;
t1104 = t1105 ^ 2;
t1108 = t1110 ^ 2;
t1111 = t1112 ^ 2;
t1114 = t1116 ^ 2;
t1115 = t1118 ^ 2;
t1248 = pkin(3) * t1158;
t1247 = t1165 * g(3);
t1186 = t1209 * t1118;
t937 = -t1258 * pkin(9) + (-t1056 + t1186) * pkin(3) - t1059;
t1076 = pkin(3) * t1116 - pkin(9) * t1118;
t1137 = g(1) * t1166 + g(2) * t1160;
t1174 = qJDD(1) * pkin(7) - t1137;
t1171 = -pkin(1) * t1251 + t1174;
t1099 = -t1159 * g(3) + t1165 * t1171;
t1151 = t1154 * t1251;
t1048 = -pkin(2) * t1151 + t1127 * pkin(8) - qJD(2) * t1176 + t1099;
t1168 = -t1159 * t1174 - t1247 - t1126 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * t1225 + (pkin(2) * t1165 + pkin(1)) * t1227) * qJD(1);
t996 = t1164 * t1048 + t1158 * t1168;
t943 = -pkin(3) * t1200 + pkin(9) * t1201 - t1116 * t1076 + t996;
t861 = t1157 * t943 - t1163 * t937;
t824 = pkin(4) * t1253 + pkin(10) * t984 - t861;
t1060 = pkin(4) * t1112 - pkin(10) * t1088;
t862 = t1157 * t937 + t1163 * t943;
t835 = -pkin(4) * t1249 - pkin(10) * t1170 - t1112 * t1060 + t862;
t753 = t1156 * t835 - t1162 * t824;
t716 = pkin(5) * t1255 + pkin(11) * t884 - t753;
t1007 = pkin(5) * t1110 - pkin(11) * t1040;
t754 = t1156 * t824 + t1162 * t835;
t721 = -pkin(5) * t1250 + pkin(11) * t921 - t1007 * t1110 + t754;
t654 = t1155 * t716 + t1161 * t721;
t995 = t1048 * t1158 - t1164 * t1168;
t942 = -t1201 * pkin(3) - t1200 * pkin(9) + t1076 * t1118 + t995;
t863 = t1170 * pkin(4) - t1249 * pkin(10) + t1060 * t1088 + t942;
t780 = -t921 * pkin(5) - pkin(11) * t1250 + t1007 * t1040 + t863;
t1246 = t1155 * t780;
t894 = t1169 + t918;
t1245 = t1155 * t894;
t653 = t1155 * t721 - t1161 * t716;
t615 = t1155 * t654 - t1161 * t653;
t1244 = t1156 * t615;
t1243 = t1156 * t863;
t947 = t1052 + t993;
t1242 = t1156 * t947;
t690 = t1156 * t754 - t1162 * t753;
t1241 = t1157 * t690;
t1240 = t1157 * t942;
t998 = t1049 + t1053;
t1239 = t1157 * t998;
t925 = t1158 * t996 - t1164 * t995;
t1238 = t1159 * t925;
t1237 = t1161 * t780;
t1236 = t1161 * t894;
t1235 = t1162 * t615;
t1234 = t1162 * t863;
t1233 = t1162 * t947;
t1232 = t1163 * t690;
t1231 = t1163 * t942;
t1230 = t1163 * t998;
t1229 = t1165 * t925;
t1228 = qJD(1) * qJD(2);
t1153 = t1159 ^ 2;
t1226 = t1251 * t1153;
t1224 = t1059 * t1158;
t1223 = t1059 * t1164;
t1073 = t1078 + t1201;
t1222 = t1073 * t1158;
t1221 = t1073 * t1164;
t1220 = t1105 * t1155;
t1219 = t1105 * t1161;
t1218 = t1110 * t1156;
t1217 = t1110 * t1162;
t1216 = t1112 * t1157;
t1215 = t1112 * t1163;
t1119 = pkin(7) * t1251 + t1175;
t1214 = t1119 * t1159;
t1213 = t1119 * t1165;
t1143 = t1165 * t1251 * t1159;
t1134 = qJDD(2) + t1143;
t1212 = t1134 * t1159;
t1135 = qJDD(2) - t1143;
t1211 = t1135 * t1159;
t1210 = t1135 * t1165;
t1205 = t1153 + t1154;
t1203 = qJDD(1) * t1160;
t1202 = qJDD(1) * t1166;
t1199 = t1158 * t918;
t1198 = t1164 * t918;
t1197 = -pkin(3) * t1164 - pkin(2);
t1194 = t1158 * t993;
t1193 = t1164 * t993;
t1192 = t1158 * t1049;
t1191 = t1164 * t1049;
t1190 = t1160 * t1078;
t1189 = t1166 * t1078;
t616 = t1155 * t653 + t1161 * t654;
t691 = t1156 * t753 + t1162 * t754;
t926 = t1158 * t995 + t1164 * t996;
t1098 = t1159 * t1171 + t1247;
t1047 = t1098 * t1159 + t1165 * t1099;
t1090 = -t1136 * t1160 - t1166 * t1137;
t1183 = t1160 * t1143;
t1182 = t1166 * t1143;
t1131 = -t1160 * t1251 + t1202;
t1181 = -pkin(6) * t1131 - g(3) * t1160;
t1180 = t1158 * t1107;
t1179 = t1158 * t1186;
t1178 = t1164 * t1107;
t1177 = t1164 * t1186;
t798 = t1157 * t862 - t1163 * t861;
t799 = t1157 * t861 + t1163 * t862;
t1046 = t1098 * t1165 - t1099 * t1159;
t1089 = t1136 * t1166 - t1137 * t1160;
t1024 = qJD(2) * t1118 - t1184;
t1167 = qJD(2) ^ 2;
t1141 = -t1151 - t1167;
t1140 = t1151 - t1167;
t1139 = -t1167 - t1226;
t1138 = t1167 - t1226;
t1133 = t1151 - t1226;
t1132 = t1151 + t1226;
t1130 = t1166 * t1251 + t1203;
t1129 = t1205 * qJDD(1);
t1128 = t1149 - 0.2e1 * t1195;
t1125 = 0.2e1 * t1188 + t1204;
t1123 = t1165 * t1134;
t1122 = t1205 * t1228;
t1113 = -pkin(6) * t1130 + g(3) * t1166;
t1103 = t1200 - t1115;
t1102 = t1114 - t1200;
t1101 = t1126 * t1165 - t1153 * t1228;
t1100 = -t1127 * t1159 - t1154 * t1228;
t1097 = -t1115 - t1200;
t1096 = -t1139 * t1159 - t1210;
t1095 = -t1138 * t1159 + t1123;
t1094 = t1141 * t1165 - t1212;
t1093 = t1140 * t1165 - t1211;
t1092 = t1139 * t1165 - t1211;
t1091 = t1141 * t1159 + t1123;
t1083 = t1129 * t1166 - t1132 * t1160;
t1082 = t1129 * t1160 + t1132 * t1166;
t1079 = -t1125 * t1159 + t1128 * t1165;
t1077 = -t1115 + t1114;
t1072 = -t1200 - t1114;
t1071 = t1096 * t1166 + t1125 * t1160;
t1070 = t1094 * t1166 - t1128 * t1160;
t1069 = t1096 * t1160 - t1125 * t1166;
t1068 = t1094 * t1160 + t1128 * t1166;
t1066 = -t1085 + t1111;
t1065 = -t1111 + t1249;
t1064 = -t1178 + t1179;
t1063 = -t1180 - t1177;
t1062 = -pkin(7) * t1092 - t1213;
t1061 = -pkin(7) * t1091 - t1214;
t1058 = -t1114 - t1115;
t1055 = -pkin(1) * t1092 + t1099;
t1054 = -pkin(1) * t1091 + t1098;
t1044 = -t1085 + t1249;
t1035 = -t1085 - t1111;
t1033 = t1102 * t1164 - t1222;
t1032 = -t1103 * t1158 + t1259;
t1031 = t1102 * t1158 + t1221;
t1030 = t1103 * t1164 + t1263;
t1029 = -t1097 * t1158 - t1221;
t1028 = t1097 * t1164 - t1222;
t1026 = -t1057 - t1107;
t1022 = (0.2e1 * qJD(3) + qJD(2)) * t1118 + t1184;
t1021 = -t1111 - t1249;
t1020 = t1164 * t1057 - t1179;
t1019 = t1158 * t1057 + t1177;
t1018 = -t1158 * t1056 + t1178;
t1017 = t1164 * t1056 + t1180;
t1016 = t1047 * t1166 - t1119 * t1160;
t1015 = t1047 * t1160 + t1119 * t1166;
t1012 = t1072 * t1164 - t1263;
t1011 = t1072 * t1158 + t1259;
t1010 = -t1037 + t1108;
t1009 = -t1108 + t1250;
t1008 = t1085 + t1249;
t1003 = (t1087 * t1157 + t1088 * t1163) * t1112;
t1002 = (-t1087 * t1163 + t1088 * t1157) * t1112;
t1001 = -t1063 * t1159 + t1064 * t1165;
t1000 = -t1037 - t1108;
t992 = -pkin(8) * t1028 - t1223;
t991 = -t1037 + t1250;
t980 = (-qJD(4) - t1112) * t1088 + t1173;
t979 = -pkin(8) * t1011 - t1224;
t978 = -t1031 * t1159 + t1033 * t1165;
t977 = -t1030 * t1159 + t1032 * t1165;
t976 = t1006 * t1163 - t1088 * t1216;
t975 = -t1087 * t1216 + t1163 * t1170;
t974 = -t1006 * t1157 - t1088 * t1215;
t973 = t1087 * t1215 + t1157 * t1170;
t972 = -t1108 - t1250;
t971 = -t1028 * t1159 + t1029 * t1165;
t970 = t1028 * t1165 + t1029 * t1159;
t969 = t1024 * t1164 - t1026 * t1158;
t968 = -t1022 * t1164 - t1158 * t1258;
t967 = t1024 * t1158 + t1026 * t1164;
t966 = -t1022 * t1158 + t1164 * t1258;
t963 = -t987 + t1104;
t962 = t986 - t1104;
t961 = t1002 * t1164 + t1053 * t1158;
t960 = t1002 * t1158 - t1053 * t1164;
t959 = -t1066 * t1163 - t1264;
t958 = t1065 * t1163 - t1239;
t957 = -t1065 * t1157 - t1230;
t956 = -t1066 * t1157 + t1260;
t955 = -t1019 * t1159 + t1020 * t1165;
t954 = -t1017 * t1159 + t1018 * t1165;
t953 = (-t1038 * t1162 + t1040 * t1156) * t1110;
t952 = (-t1038 * t1156 - t1040 * t1162) * t1110;
t951 = -t1011 * t1159 + t1012 * t1165;
t950 = t1011 * t1165 + t1012 * t1159;
t949 = -t987 - t1104;
t945 = -t1035 * t1157 - t1230;
t944 = t1035 * t1163 - t1239;
t940 = -t1037 - t1250;
t939 = t1021 * t1163 - t1264;
t938 = t1021 * t1157 + t1260;
t936 = -pkin(2) * t1258 + pkin(8) * t1029 - t1224;
t933 = t1164 * t976 + t1192;
t932 = t1164 * t973 - t1192;
t931 = t1158 * t976 - t1191;
t930 = t1158 * t973 + t1191;
t929 = -pkin(2) * t1022 + pkin(8) * t1012 + t1223;
t928 = t1160 * t1258 + t1166 * t971;
t927 = t1160 * t971 - t1166 * t1258;
t924 = t1022 * t1160 + t1166 * t951;
t923 = -t1022 * t1166 + t1160 * t951;
t917 = -t987 + t986;
t916 = t1009 * t1162 - t1242;
t915 = -t1010 * t1156 + t1261;
t914 = t1009 * t1156 + t1233;
t913 = t1010 * t1162 + t1265;
t912 = -t1157 * t980 - t1163 * t982;
t911 = -t1157 * t984 - t1163 * t985;
t910 = -t1157 * t982 + t1163 * t980;
t909 = -t1157 * t985 + t1163 * t984;
t908 = -t1104 - t986;
t907 = -t1000 * t1156 - t1233;
t906 = t1000 * t1162 - t1242;
t905 = pkin(2) * t1059 + pkin(8) * t926;
t904 = -t1159 * t967 + t1165 * t969;
t903 = -t1159 * t966 + t1165 * t968;
t902 = t1159 * t969 + t1165 * t967;
t901 = -t1158 * t985 + t1164 * t958;
t900 = -t1158 * t984 + t1164 * t956;
t899 = t1158 * t958 + t1164 * t985;
t898 = t1158 * t956 + t1164 * t984;
t897 = (t1155 * t990 - t1161 * t988) * t1105;
t896 = (-t1155 * t988 - t1161 * t990) * t1105;
t892 = -t1159 * t960 + t1165 * t961;
t891 = t1158 * t982 + t1164 * t945;
t890 = t1158 * t945 - t1164 * t982;
t889 = t1162 * t972 - t1265;
t888 = t1156 * t972 + t1261;
t887 = -t1158 * t980 + t1164 * t939;
t886 = t1158 * t939 + t1164 * t980;
t880 = (qJD(5) + t1110) * t1040 + t1185;
t879 = -pkin(1) * t970 - pkin(2) * t1028 + t996;
t878 = -t1040 * t1218 + t1162 * t922;
t877 = t1040 * t1217 + t1156 * t922;
t876 = t1038 * t1217 - t1156 * t921;
t875 = t1038 * t1218 + t1162 * t921;
t874 = -t1044 * t1158 + t1164 * t910;
t873 = t1044 * t1164 + t1158 * t910;
t872 = -t1157 * t952 + t1163 * t953;
t871 = -t1157 * t953 - t1163 * t952;
t870 = t1058 * t1160 + t1166 * t904;
t869 = -t1058 * t1166 + t1160 * t904;
t868 = -pkin(9) * t944 + t1231;
t867 = -t1008 * t1158 + t1164 * t911;
t866 = t1008 * t1164 + t1158 * t911;
t865 = -pkin(1) * t950 - pkin(2) * t1011 + t995;
t864 = -pkin(9) * t938 + t1240;
t860 = -t986 - t987;
t859 = -pkin(8) * t967 - t925;
t858 = t1052 * t1158 + t1164 * t872;
t857 = -t1052 * t1164 + t1158 * t872;
t856 = -t1159 * t931 + t1165 * t933;
t855 = -t1159 * t930 + t1165 * t932;
t854 = -pkin(2) * t1058 + pkin(8) * t969 + t926;
t853 = -pkin(1) * t902 - pkin(2) * t967;
t852 = -pkin(7) * t970 - t1159 * t936 + t1165 * t992;
t851 = t1161 * t962 - t1245;
t850 = -t1155 * t963 + t1262;
t849 = t1155 * t962 + t1236;
t848 = t1161 * t963 + t1266;
t847 = -t1155 * t949 - t1236;
t846 = t1161 * t949 - t1245;
t845 = t1165 * t926 - t1238;
t844 = t1159 * t926 + t1229;
t843 = -pkin(7) * t950 - t1159 * t929 + t1165 * t979;
t842 = -t1157 * t914 + t1163 * t916;
t841 = -t1157 * t913 + t1163 * t915;
t840 = -t1157 * t916 - t1163 * t914;
t839 = -t1157 * t915 - t1163 * t913;
t838 = -t1059 * t1160 + t1166 * t845;
t837 = t1059 * t1166 + t1160 * t845;
t836 = -pkin(3) * t944 + t862;
t834 = -pkin(3) * t938 + t861;
t832 = -t1157 * t906 + t1163 * t907;
t831 = t1157 * t907 + t1163 * t906;
t830 = t1161 * t908 - t1266;
t829 = t1155 * t908 + t1262;
t828 = -t1159 * t899 + t1165 * t901;
t827 = -t1159 * t898 + t1165 * t900;
t826 = -t1156 * t896 + t1162 * t897;
t825 = t1156 * t897 + t1162 * t896;
t820 = -qJD(6) * t990 - t1187;
t819 = -t1159 * t890 + t1165 * t891;
t818 = t1159 * t891 + t1165 * t890;
t817 = -t1157 * t888 + t1163 * t889;
t816 = t1157 * t889 + t1163 * t888;
t815 = -t1159 * t886 + t1165 * t887;
t814 = t1159 * t887 + t1165 * t886;
t813 = -pkin(10) * t906 + t1234;
t812 = -t1156 * t884 - t1162 * t885;
t811 = -t1156 * t1256 - t1162 * t880;
t810 = -t1156 * t885 + t1162 * t884;
t809 = -t1156 * t880 + t1162 * t1256;
t808 = -t1157 * t877 + t1163 * t878;
t807 = -t1157 * t878 - t1163 * t877;
t806 = -t1157 * t875 + t1163 * t876;
t805 = -t1157 * t876 - t1163 * t875;
t804 = -t1159 * t873 + t1165 * t874;
t803 = -pkin(10) * t888 + t1243;
t802 = -t1159 * t866 + t1165 * t867;
t801 = t1159 * t867 + t1165 * t866;
t800 = -pkin(1) * t844 - pkin(2) * t925;
t796 = -t821 - t964;
t792 = (qJD(6) + t1105) * t990 + t1187;
t791 = t1161 * t821 - t1220 * t990;
t790 = t1155 * t821 + t1219 * t990;
t789 = -t1155 * t820 + t1219 * t988;
t788 = t1161 * t820 + t1220 * t988;
t787 = -t1159 * t857 + t1165 * t858;
t786 = t1164 * t808 + t1194;
t785 = t1164 * t806 - t1194;
t784 = t1158 * t808 - t1193;
t783 = t1158 * t806 + t1193;
t782 = t1160 * t944 + t1166 * t819;
t781 = t1160 * t819 - t1166 * t944;
t779 = t1160 * t938 + t1166 * t815;
t778 = t1160 * t815 - t1166 * t938;
t777 = -t1158 * t885 + t1164 * t842;
t776 = -t1158 * t884 + t1164 * t841;
t775 = t1158 * t842 + t1164 * t885;
t774 = t1158 * t841 + t1164 * t884;
t773 = t1158 * t1256 + t1164 * t832;
t772 = t1158 * t832 - t1164 * t1256;
t771 = -t1156 * t849 + t1162 * t851;
t770 = -t1156 * t848 + t1162 * t850;
t769 = t1156 * t851 + t1162 * t849;
t768 = t1156 * t850 + t1162 * t848;
t767 = t1158 * t942 + t1164 * t799;
t766 = t1158 * t799 - t1164 * t942;
t765 = -t1156 * t846 + t1162 * t847;
t764 = t1156 * t847 + t1162 * t846;
t763 = t1158 * t880 + t1164 * t817;
t762 = t1158 * t817 - t1164 * t880;
t761 = -pkin(4) * t1256 + pkin(10) * t907 + t1243;
t760 = t1160 * t909 + t1166 * t802;
t759 = t1160 * t802 - t1166 * t909;
t758 = -pkin(4) * t880 + pkin(10) * t889 - t1234;
t757 = -pkin(9) * t909 - t798;
t756 = -pkin(7) * t844 - pkin(8) * t1229 - t1159 * t905;
t755 = -pkin(7) * t902 - t1159 * t854 + t1165 * t859;
t751 = -t1156 * t829 + t1162 * t830;
t750 = t1156 * t830 + t1162 * t829;
t749 = -pkin(8) * t890 - t1158 * t836 + t1164 * t868;
t748 = -t1157 * t825 + t1163 * t826;
t747 = -t1157 * t826 - t1163 * t825;
t746 = -pkin(8) * t886 - t1158 * t834 + t1164 * t864;
t745 = t1158 * t1169 + t1164 * t748;
t744 = t1158 * t748 - t1164 * t1169;
t743 = -pkin(11) * t846 + t1237;
t742 = -t1157 * t810 + t1163 * t812;
t741 = -t1157 * t809 + t1163 * t811;
t740 = -t1157 * t811 - t1163 * t809;
t739 = t1157 * t812 + t1163 * t810;
t738 = -pkin(2) * t944 + pkin(8) * t891 + t1158 * t868 + t1164 * t836;
t737 = -pkin(11) * t829 + t1246;
t736 = -pkin(1) * t818 - pkin(2) * t890 + pkin(3) * t982 - pkin(9) * t945 - t1240;
t735 = -pkin(2) * t938 + pkin(8) * t887 + t1158 * t864 + t1164 * t834;
t734 = -t1158 * t991 + t1164 * t741;
t733 = t1158 * t741 + t1164 * t991;
t732 = -pkin(1) * t814 - pkin(2) * t886 - pkin(3) * t980 - pkin(9) * t939 + t1231;
t731 = t1158 * t940 + t1164 * t742;
t730 = t1158 * t742 - t1164 * t940;
t729 = -t1155 * t796 - t1161 * t797;
t728 = -t1155 * t1257 - t1161 * t792;
t727 = -t1155 * t797 + t1161 * t796;
t726 = -t1155 * t792 + t1161 * t1257;
t725 = -t1156 * t790 + t1162 * t791;
t724 = -t1156 * t788 + t1162 * t789;
t723 = t1156 * t791 + t1162 * t790;
t722 = t1156 * t789 + t1162 * t788;
t719 = -t1159 * t784 + t1165 * t786;
t718 = -t1159 * t783 + t1165 * t785;
t717 = -pkin(8) * t866 + t1164 * t757 + t1248 * t909;
t713 = -t1159 * t775 + t1165 * t777;
t712 = -t1159 * t774 + t1165 * t776;
t711 = -t1159 * t772 + t1165 * t773;
t710 = t1159 * t773 + t1165 * t772;
t709 = -t1157 * t769 + t1163 * t771;
t708 = -t1157 * t768 + t1163 * t770;
t707 = -t1157 * t771 - t1163 * t769;
t706 = -t1157 * t770 - t1163 * t768;
t705 = -t1159 * t766 + t1165 * t767;
t704 = t1159 * t767 + t1165 * t766;
t703 = pkin(8) * t867 + t1158 * t757 + t1197 * t909;
t702 = -t1157 * t764 + t1163 * t765;
t701 = t1157 * t765 + t1163 * t764;
t700 = -t1159 * t762 + t1165 * t763;
t699 = t1159 * t763 + t1165 * t762;
t698 = -pkin(3) * t739 - pkin(4) * t810;
t697 = -pkin(3) * t831 - pkin(4) * t906 + t754;
t696 = -pkin(5) * t1257 + pkin(11) * t847 + t1246;
t695 = -pkin(3) * t816 - pkin(4) * t888 + t753;
t694 = -pkin(5) * t792 + pkin(11) * t830 - t1237;
t693 = -pkin(1) * t801 - pkin(2) * t866 - pkin(3) * t1008 - pkin(9) * t911 - t799;
t692 = -pkin(9) * t831 - t1157 * t761 + t1163 * t813;
t689 = t1160 * t831 + t1166 * t711;
t688 = t1160 * t711 - t1166 * t831;
t687 = -pkin(9) * t816 - t1157 * t758 + t1163 * t803;
t686 = -t1157 * t750 + t1163 * t751;
t685 = t1157 * t751 + t1163 * t750;
t684 = -pkin(8) * t766 + (-pkin(9) * t1164 + t1248) * t798;
t683 = -t1159 * t744 + t1165 * t745;
t682 = t1160 * t816 + t1166 * t700;
t681 = t1160 * t700 - t1166 * t816;
t680 = t1160 * t798 + t1166 * t705;
t679 = t1160 * t705 - t1166 * t798;
t678 = -t1158 * t797 + t1164 * t709;
t677 = -t1158 * t796 + t1164 * t708;
t676 = t1158 * t709 + t1164 * t797;
t675 = t1158 * t708 + t1164 * t796;
t674 = -pkin(4) * t863 + pkin(10) * t691;
t673 = t1158 * t1257 + t1164 * t702;
t672 = t1158 * t702 - t1164 * t1257;
t671 = -t1159 * t733 + t1165 * t734;
t670 = -pkin(10) * t810 - t690;
t669 = -t1159 * t730 + t1165 * t731;
t668 = t1159 * t731 + t1165 * t730;
t667 = -t1156 * t727 + t1162 * t729;
t666 = -t1156 * t726 + t1162 * t728;
t665 = t1156 * t729 + t1162 * t727;
t664 = t1156 * t728 + t1162 * t726;
t663 = -t1157 * t723 + t1163 * t725;
t662 = -t1157 * t722 + t1163 * t724;
t661 = -t1157 * t725 - t1163 * t723;
t660 = -t1157 * t724 - t1163 * t722;
t659 = t1158 * t792 + t1164 * t686;
t658 = t1158 * t686 - t1164 * t792;
t657 = -pkin(4) * t940 + pkin(10) * t812 + t691;
t656 = pkin(8) * t767 + (-pkin(9) * t1158 + t1197) * t798;
t655 = -pkin(7) * t818 - t1159 * t738 + t1165 * t749;
t651 = -pkin(7) * t814 - t1159 * t735 + t1165 * t746;
t650 = t1164 * t663 + t1199;
t649 = t1164 * t662 - t1199;
t648 = t1158 * t663 - t1198;
t647 = t1158 * t662 + t1198;
t646 = -pkin(1) * t704 - pkin(2) * t766 + pkin(3) * t942 - pkin(9) * t799;
t645 = -pkin(7) * t801 - t1159 * t703 + t1165 * t717;
t644 = t1160 * t739 + t1166 * t669;
t643 = t1160 * t669 - t1166 * t739;
t642 = -pkin(10) * t764 - t1156 * t696 + t1162 * t743;
t641 = t1163 * t691 - t1241;
t640 = t1157 * t691 + t1232;
t639 = -pkin(10) * t750 - t1156 * t694 + t1162 * t737;
t638 = t1158 * t863 + t1164 * t641;
t637 = t1158 * t641 - t1164 * t863;
t636 = -pkin(8) * t772 - t1158 * t697 + t1164 * t692;
t635 = -pkin(4) * t1257 + pkin(10) * t765 + t1156 * t743 + t1162 * t696;
t634 = -pkin(1) * t710 - pkin(2) * t772 + pkin(3) * t1256 - pkin(9) * t832 - t1157 * t813 - t1163 * t761;
t633 = -t1159 * t676 + t1165 * t678;
t632 = -t1159 * t675 + t1165 * t677;
t631 = -t1159 * t672 + t1165 * t673;
t630 = t1159 * t673 + t1165 * t672;
t629 = -pkin(8) * t762 - t1158 * t695 + t1164 * t687;
t628 = -pkin(4) * t792 + pkin(10) * t751 + t1156 * t737 + t1162 * t694;
t627 = -pkin(1) * t699 - pkin(2) * t762 + pkin(3) * t880 - pkin(9) * t817 - t1157 * t803 - t1163 * t758;
t626 = -pkin(2) * t831 + pkin(8) * t773 + t1158 * t692 + t1164 * t697;
t625 = -pkin(2) * t816 + pkin(8) * t763 + t1158 * t687 + t1164 * t695;
t624 = -t1157 * t665 + t1163 * t667;
t623 = -t1157 * t664 + t1163 * t666;
t622 = -t1157 * t666 - t1163 * t664;
t621 = t1157 * t667 + t1163 * t665;
t620 = -t1159 * t658 + t1165 * t659;
t619 = t1159 * t659 + t1165 * t658;
t618 = -t1158 * t917 + t1164 * t623;
t617 = t1158 * t623 + t1164 * t917;
t614 = t1158 * t860 + t1164 * t624;
t613 = t1158 * t624 - t1164 * t860;
t612 = -pkin(3) * t701 - pkin(4) * t764 - pkin(5) * t846 + t654;
t611 = -t1159 * t648 + t1165 * t650;
t610 = -t1159 * t647 + t1165 * t649;
t609 = -pkin(3) * t640 - pkin(4) * t690;
t608 = -pkin(5) * t780 + pkin(11) * t616;
t607 = -pkin(3) * t685 - pkin(4) * t750 - pkin(5) * t829 + t653;
t606 = t1160 * t701 + t1166 * t631;
t605 = t1160 * t631 - t1166 * t701;
t604 = -pkin(9) * t739 - t1157 * t657 + t1163 * t670;
t603 = -pkin(7) * t704 - t1159 * t656 + t1165 * t684;
t602 = -pkin(11) * t727 - t615;
t601 = -pkin(5) * t860 + pkin(11) * t729 + t616;
t600 = t1160 * t685 + t1166 * t620;
t599 = t1160 * t620 - t1166 * t685;
t598 = -pkin(9) * t640 - pkin(10) * t1232 - t1157 * t674;
t597 = -t1159 * t637 + t1165 * t638;
t596 = t1159 * t638 + t1165 * t637;
t595 = -pkin(3) * t621 - pkin(4) * t665 - pkin(5) * t727;
t594 = -pkin(8) * t730 - t1158 * t698 + t1164 * t604;
t593 = -pkin(9) * t701 - t1157 * t635 + t1163 * t642;
t592 = -pkin(1) * t668 - pkin(2) * t730 + pkin(3) * t940 - pkin(9) * t742 - t1157 * t670 - t1163 * t657;
t591 = -pkin(2) * t739 + pkin(8) * t731 + t1158 * t604 + t1164 * t698;
t590 = -pkin(7) * t710 - t1159 * t626 + t1165 * t636;
t589 = -pkin(9) * t685 - t1157 * t628 + t1163 * t639;
t588 = -t1159 * t617 + t1165 * t618;
t587 = t1162 * t616 - t1244;
t586 = t1156 * t616 + t1235;
t585 = -t1159 * t613 + t1165 * t614;
t584 = t1159 * t614 + t1165 * t613;
t583 = -pkin(7) * t699 - t1159 * t625 + t1165 * t629;
t582 = t1160 * t640 + t1166 * t597;
t581 = t1160 * t597 - t1166 * t640;
t580 = t1160 * t621 + t1166 * t585;
t579 = t1160 * t585 - t1166 * t621;
t578 = -pkin(10) * t665 - t1156 * t601 + t1162 * t602;
t577 = -pkin(4) * t860 + pkin(10) * t667 + t1156 * t602 + t1162 * t601;
t576 = -pkin(1) * t630 - pkin(2) * t672 + pkin(3) * t1257 - pkin(9) * t702 - t1157 * t642 - t1163 * t635;
t575 = -pkin(8) * t672 - t1158 * t612 + t1164 * t593;
t574 = -pkin(8) * t637 - t1158 * t609 + t1164 * t598;
t573 = -pkin(2) * t701 + pkin(8) * t673 + t1158 * t593 + t1164 * t612;
t572 = -pkin(1) * t619 - pkin(2) * t658 + pkin(3) * t792 - pkin(9) * t686 - t1157 * t639 - t1163 * t628;
t571 = -pkin(8) * t658 - t1158 * t607 + t1164 * t589;
t570 = -pkin(1) * t596 - pkin(2) * t637 + pkin(3) * t863 - pkin(9) * t641 + pkin(10) * t1241 - t1163 * t674;
t569 = -pkin(2) * t685 + pkin(8) * t659 + t1158 * t589 + t1164 * t607;
t568 = -t1157 * t586 + t1163 * t587;
t567 = t1157 * t587 + t1163 * t586;
t566 = -pkin(7) * t668 - t1159 * t591 + t1165 * t594;
t565 = -pkin(2) * t640 + pkin(8) * t638 + t1158 * t598 + t1164 * t609;
t564 = -pkin(10) * t586 - pkin(11) * t1235 - t1156 * t608;
t563 = t1158 * t780 + t1164 * t568;
t562 = t1158 * t568 - t1164 * t780;
t561 = -pkin(4) * t780 + pkin(10) * t587 - pkin(11) * t1244 + t1162 * t608;
t560 = -pkin(3) * t567 - pkin(4) * t586 - pkin(5) * t615;
t559 = -pkin(9) * t621 - t1157 * t577 + t1163 * t578;
t558 = -pkin(7) * t630 - t1159 * t573 + t1165 * t575;
t557 = -t1159 * t562 + t1165 * t563;
t556 = t1159 * t563 + t1165 * t562;
t555 = -pkin(7) * t619 - t1159 * t569 + t1165 * t571;
t554 = -pkin(7) * t596 - t1159 * t565 + t1165 * t574;
t553 = -pkin(8) * t613 - t1158 * t595 + t1164 * t559;
t552 = -pkin(1) * t584 - pkin(2) * t613 + pkin(3) * t860 - pkin(9) * t624 - t1157 * t578 - t1163 * t577;
t551 = -pkin(2) * t621 + pkin(8) * t614 + t1158 * t559 + t1164 * t595;
t550 = t1160 * t567 + t1166 * t557;
t549 = t1160 * t557 - t1166 * t567;
t548 = -pkin(9) * t567 - t1157 * t561 + t1163 * t564;
t547 = -pkin(7) * t584 - t1159 * t551 + t1165 * t553;
t546 = -pkin(8) * t562 - t1158 * t560 + t1164 * t548;
t545 = -pkin(1) * t556 - pkin(2) * t562 + pkin(3) * t780 - pkin(9) * t568 - t1157 * t564 - t1163 * t561;
t544 = -pkin(2) * t567 + pkin(8) * t563 + t1158 * t548 + t1164 * t560;
t543 = -pkin(7) * t556 - t1159 * t544 + t1165 * t546;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1130, -t1131, 0, t1090, 0, 0, 0, 0, 0, 0, t1070, t1071, t1083, t1016, 0, 0, 0, 0, 0, 0, t924, t928, t870, t838, 0, 0, 0, 0, 0, 0, t779, t782, t760, t680, 0, 0, 0, 0, 0, 0, t682, t689, t644, t582, 0, 0, 0, 0, 0, 0, t600, t606, t580, t550; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1131, -t1130, 0, t1089, 0, 0, 0, 0, 0, 0, t1068, t1069, t1082, t1015, 0, 0, 0, 0, 0, 0, t923, t927, t869, t837, 0, 0, 0, 0, 0, 0, t778, t781, t759, t679, 0, 0, 0, 0, 0, 0, t681, t688, t643, t581, 0, 0, 0, 0, 0, 0, t599, t605, t579, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1091, t1092, 0, -t1046, 0, 0, 0, 0, 0, 0, t950, t970, t902, t844, 0, 0, 0, 0, 0, 0, t814, t818, t801, t704, 0, 0, 0, 0, 0, 0, t699, t710, t668, t596, 0, 0, 0, 0, 0, 0, t619, t630, t584, t556; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1131, 0, -t1130, 0, t1181, -t1113, -t1089, -pkin(6) * t1089, t1101 * t1166 - t1183, t1079 * t1166 - t1133 * t1160, t1095 * t1166 + t1159 * t1203, t1100 * t1166 + t1183, t1093 * t1166 + t1149 * t1160, qJDD(2) * t1160 + t1122 * t1166, -pkin(6) * t1068 - t1054 * t1160 + t1061 * t1166, -pkin(6) * t1069 - t1055 * t1160 + t1062 * t1166, -pkin(6) * t1082 + t1046 * t1166, -pkin(6) * t1015 - (pkin(1) * t1160 - pkin(7) * t1166) * t1046, t1166 * t955 + t1190, -t1077 * t1160 + t1166 * t903, -t1026 * t1160 + t1166 * t977, t1166 * t954 - t1190, t1024 * t1160 + t1166 * t978, t1166 * t1001 + t1160 * t1201, -pkin(6) * t923 - t1160 * t865 + t1166 * t843, -pkin(6) * t927 - t1160 * t879 + t1166 * t852, -pkin(6) * t869 - t1160 * t853 + t1166 * t755, -pkin(6) * t837 - t1160 * t800 + t1166 * t756, -t1160 * t974 + t1166 * t856, -t1160 * t912 + t1166 * t804, -t1160 * t959 + t1166 * t827, -t1160 * t975 + t1166 * t855, -t1160 * t957 + t1166 * t828, -t1003 * t1160 + t1166 * t892, -pkin(6) * t778 - t1160 * t732 + t1166 * t651, -pkin(6) * t781 - t1160 * t736 + t1166 * t655, -pkin(6) * t759 - t1160 * t693 + t1166 * t645, -pkin(6) * t679 - t1160 * t646 + t1166 * t603, -t1160 * t807 + t1166 * t719, -t1160 * t740 + t1166 * t671, -t1160 * t839 + t1166 * t712, -t1160 * t805 + t1166 * t718, -t1160 * t840 + t1166 * t713, -t1160 * t871 + t1166 * t787, -pkin(6) * t681 - t1160 * t627 + t1166 * t583, -pkin(6) * t688 - t1160 * t634 + t1166 * t590, -pkin(6) * t643 - t1160 * t592 + t1166 * t566, -pkin(6) * t581 - t1160 * t570 + t1166 * t554, -t1160 * t661 + t1166 * t611, -t1160 * t622 + t1166 * t588, -t1160 * t706 + t1166 * t632, -t1160 * t660 + t1166 * t610, -t1160 * t707 + t1166 * t633, -t1160 * t747 + t1166 * t683, -pkin(6) * t599 - t1160 * t572 + t1166 * t555, -pkin(6) * t605 - t1160 * t576 + t1166 * t558, -pkin(6) * t579 - t1160 * t552 + t1166 * t547, -pkin(6) * t549 - t1160 * t545 + t1166 * t543; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1130, 0, t1131, 0, t1113, t1181, t1090, pkin(6) * t1090, t1101 * t1160 + t1182, t1079 * t1160 + t1133 * t1166, t1095 * t1160 - t1159 * t1202, t1100 * t1160 - t1182, t1093 * t1160 - t1149 * t1166, -qJDD(2) * t1166 + t1122 * t1160, pkin(6) * t1070 + t1054 * t1166 + t1061 * t1160, pkin(6) * t1071 + t1055 * t1166 + t1062 * t1160, pkin(6) * t1083 + t1046 * t1160, pkin(6) * t1016 - (-pkin(1) * t1166 - pkin(7) * t1160) * t1046, t1160 * t955 - t1189, t1077 * t1166 + t1160 * t903, t1026 * t1166 + t1160 * t977, t1160 * t954 + t1189, -t1024 * t1166 + t1160 * t978, t1160 * t1001 - t1166 * t1201, pkin(6) * t924 + t1160 * t843 + t1166 * t865, pkin(6) * t928 + t1160 * t852 + t1166 * t879, pkin(6) * t870 + t1160 * t755 + t1166 * t853, pkin(6) * t838 + t1160 * t756 + t1166 * t800, t1160 * t856 + t1166 * t974, t1160 * t804 + t1166 * t912, t1160 * t827 + t1166 * t959, t1160 * t855 + t1166 * t975, t1160 * t828 + t1166 * t957, t1003 * t1166 + t1160 * t892, pkin(6) * t779 + t1160 * t651 + t1166 * t732, pkin(6) * t782 + t1160 * t655 + t1166 * t736, pkin(6) * t760 + t1160 * t645 + t1166 * t693, pkin(6) * t680 + t1160 * t603 + t1166 * t646, t1160 * t719 + t1166 * t807, t1160 * t671 + t1166 * t740, t1160 * t712 + t1166 * t839, t1160 * t718 + t1166 * t805, t1160 * t713 + t1166 * t840, t1160 * t787 + t1166 * t871, pkin(6) * t682 + t1160 * t583 + t1166 * t627, pkin(6) * t689 + t1160 * t590 + t1166 * t634, pkin(6) * t644 + t1160 * t566 + t1166 * t592, pkin(6) * t582 + t1160 * t554 + t1166 * t570, t1160 * t611 + t1166 * t661, t1160 * t588 + t1166 * t622, t1160 * t632 + t1166 * t706, t1160 * t610 + t1166 * t660, t1160 * t633 + t1166 * t707, t1160 * t683 + t1166 * t747, pkin(6) * t600 + t1160 * t555 + t1166 * t572, pkin(6) * t606 + t1160 * t558 + t1166 * t576, pkin(6) * t580 + t1160 * t547 + t1166 * t552, pkin(6) * t550 + t1160 * t543 + t1166 * t545; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1136, t1137, 0, 0, (t1126 + t1188) * t1159, t1125 * t1165 + t1128 * t1159, t1138 * t1165 + t1212, (t1127 - t1195) * t1165, t1140 * t1159 + t1210, 0, pkin(1) * t1128 + pkin(7) * t1094 + t1213, -pkin(1) * t1125 + pkin(7) * t1096 - t1214, pkin(1) * t1132 + pkin(7) * t1129 + t1047, pkin(1) * t1119 + pkin(7) * t1047, t1019 * t1165 + t1020 * t1159, t1159 * t968 + t1165 * t966, t1030 * t1165 + t1032 * t1159, t1017 * t1165 + t1018 * t1159, t1031 * t1165 + t1033 * t1159, t1063 * t1165 + t1064 * t1159, -pkin(1) * t1022 + pkin(7) * t951 + t1159 * t979 + t1165 * t929, -pkin(1) * t1258 + pkin(7) * t971 + t1159 * t992 + t1165 * t936, -pkin(1) * t1058 + pkin(7) * t904 + t1159 * t859 + t1165 * t854, pkin(1) * t1059 + pkin(7) * t845 - pkin(8) * t1238 + t1165 * t905, t1159 * t933 + t1165 * t931, t1159 * t874 + t1165 * t873, t1159 * t900 + t1165 * t898, t1159 * t932 + t1165 * t930, t1159 * t901 + t1165 * t899, t1159 * t961 + t1165 * t960, -pkin(1) * t938 + pkin(7) * t815 + t1159 * t746 + t1165 * t735, -pkin(1) * t944 + pkin(7) * t819 + t1159 * t749 + t1165 * t738, -pkin(1) * t909 + pkin(7) * t802 + t1159 * t717 + t1165 * t703, -pkin(1) * t798 + pkin(7) * t705 + t1159 * t684 + t1165 * t656, t1159 * t786 + t1165 * t784, t1159 * t734 + t1165 * t733, t1159 * t776 + t1165 * t774, t1159 * t785 + t1165 * t783, t1159 * t777 + t1165 * t775, t1159 * t858 + t1165 * t857, -pkin(1) * t816 + pkin(7) * t700 + t1159 * t629 + t1165 * t625, -pkin(1) * t831 + pkin(7) * t711 + t1159 * t636 + t1165 * t626, -pkin(1) * t739 + pkin(7) * t669 + t1159 * t594 + t1165 * t591, -pkin(1) * t640 + pkin(7) * t597 + t1159 * t574 + t1165 * t565, t1159 * t650 + t1165 * t648, t1159 * t618 + t1165 * t617, t1159 * t677 + t1165 * t675, t1159 * t649 + t1165 * t647, t1159 * t678 + t1165 * t676, t1159 * t745 + t1165 * t744, -pkin(1) * t685 + pkin(7) * t620 + t1159 * t571 + t1165 * t569, -pkin(1) * t701 + pkin(7) * t631 + t1159 * t575 + t1165 * t573, -pkin(1) * t621 + pkin(7) * t585 + t1159 * t553 + t1165 * t551, -pkin(1) * t567 + pkin(7) * t557 + t1159 * t546 + t1165 * t544;];
tauB_reg  = t1;
