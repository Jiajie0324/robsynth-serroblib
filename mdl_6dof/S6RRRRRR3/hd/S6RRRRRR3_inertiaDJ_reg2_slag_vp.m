% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR3_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:42:39
% EndTime: 2019-03-10 03:43:02
% DurationCPUTime: 9.42s
% Computational Cost: add. (19091->503), mult. (41463->816), div. (0->0), fcn. (40803->10), ass. (0->264)
t228 = sin(qJ(2));
t398 = sin(qJ(3));
t403 = -pkin(8) - pkin(7);
t321 = t403 * t398;
t424 = t228 * t321;
t230 = cos(qJ(2));
t351 = t398 * t230;
t401 = cos(qJ(3));
t195 = t228 * t401 + t351;
t229 = cos(qJ(4));
t223 = qJD(4) * t229;
t227 = sin(qJ(4));
t339 = t401 * qJD(3);
t342 = qJD(3) * t398;
t352 = t398 * t228;
t406 = qJD(2) * t352 + t228 * t342 - t230 * (qJD(2) * t401 + t339);
t262 = t227 * t406;
t248 = -t195 * t223 + t262;
t397 = sin(qJ(5));
t336 = t397 * qJD(4);
t341 = qJD(5) * t397;
t423 = t336 + t341;
t400 = cos(qJ(5));
t337 = t400 * qJD(5);
t422 = t400 * qJD(4) + t337;
t421 = qJD(2) + qJD(3);
t322 = t403 * t401;
t198 = t228 * t322;
t420 = t403 * t351 + t198;
t361 = t398 * pkin(2);
t315 = t361 + pkin(9);
t311 = pkin(10) + t315;
t293 = t229 * t311;
t294 = t227 * t311;
t419 = t397 * t293 + t400 * t294;
t402 = -pkin(10) - pkin(9);
t320 = t402 * t400;
t350 = t397 * t229;
t156 = t227 * t320 + t402 * t350;
t194 = t400 * t227 + t350;
t319 = t402 * t397;
t196 = t227 * t319;
t353 = t400 * t229;
t158 = -t402 * t353 + t196;
t418 = t158 * qJD(5);
t224 = t227 ^ 2;
t225 = t229 ^ 2;
t370 = t224 - t225;
t408 = t370 * qJD(4);
t417 = -0.4e1 * t195;
t143 = t400 * t293 - t397 * t294;
t363 = t401 * pkin(2);
t218 = -t363 - pkin(3);
t222 = pkin(2) * t342;
t373 = t218 * t223 + t227 * t222;
t415 = t224 + t225;
t355 = t401 * t230;
t193 = t352 - t355;
t220 = -t230 * pkin(2) - pkin(1);
t284 = t193 * pkin(3) - t195 * pkin(9) + t220;
t404 = -qJD(2) * (t230 * t321 + t198) - t420 * qJD(3);
t414 = -qJD(4) * t284 + t404;
t152 = t421 * t195;
t307 = t403 * t355;
t272 = -t307 + t424;
t369 = qJD(2) * t228;
t357 = pkin(2) * t369;
t413 = t152 * pkin(3) + pkin(9) * t406 - qJD(4) * t272 + t357;
t261 = t229 * t406;
t366 = qJD(4) * t227;
t412 = t195 * t366 + t261;
t296 = qJD(4) * t315;
t329 = pkin(2) * t339;
t309 = t227 * t329;
t411 = -t229 * t296 - t309;
t308 = t229 * t329;
t410 = t227 * t296 - t308;
t291 = t218 * t366 - t229 * t222;
t118 = t152 * t227 + t193 * t223;
t409 = -t152 * t229 + t193 * t366;
t368 = qJD(2) * t230;
t113 = -qJD(3) * t307 - t322 * t368 + t421 * t424;
t71 = -pkin(4) * t248 + t113;
t208 = t227 * t336;
t407 = t227 * t341 - t229 * t422 + t208;
t255 = t406 * t397;
t256 = t406 * t400;
t318 = t195 * t353;
t324 = -t227 * t256 - t229 * t255 + (qJD(4) + qJD(5)) * t318;
t381 = t195 * t227;
t405 = -t381 * t423 + t324;
t323 = t227 * t422 + t229 * t423;
t399 = cos(qJ(6));
t396 = t152 * pkin(5);
t395 = t194 * pkin(11);
t394 = t229 * pkin(4);
t226 = sin(qJ(6));
t216 = t397 * t227;
t312 = t216 - t353;
t287 = t399 * t312;
t148 = t194 * t226 + t287;
t37 = pkin(5) * t405 + t71;
t295 = t226 * t312;
t340 = qJD(6) * t399;
t79 = -qJD(6) * t295 + t194 * t340 - t226 * t407 + t323 * t399;
t126 = pkin(4) * t381 - t420;
t376 = t194 * t195;
t96 = pkin(5) * t376 + t126;
t393 = t37 * t148 + t96 * t79;
t149 = t194 * t399 - t295;
t365 = qJD(6) * t226;
t78 = qJD(6) * t287 + t194 * t365 + t226 * t323 + t399 * t407;
t392 = t37 * t149 - t96 * t78;
t391 = -t126 * t407 + t71 * t194;
t106 = -t227 * t272 + t229 * t284;
t380 = t195 * t229;
t237 = t193 * pkin(4) - pkin(10) * t380 + t106;
t80 = t397 * t237;
t107 = t227 * t284 + t229 * t272;
t93 = -pkin(10) * t381 + t107;
t52 = t400 * t93 + t80;
t221 = pkin(4) * t366;
t131 = pkin(5) * t323 + t221;
t124 = t222 + t131;
t219 = -pkin(3) - t394;
t162 = pkin(5) * t312 + t219;
t161 = -t363 + t162;
t390 = t124 * t148 + t161 * t79;
t389 = t124 * t149 - t161 * t78;
t388 = pkin(2) * qJD(3);
t387 = t126 * t323 + t71 * t312;
t386 = t131 * t148 + t162 * t79;
t385 = t131 * t149 - t162 * t78;
t382 = t420 * t113;
t151 = t420 * t223;
t379 = t113 * t227 - t151;
t199 = t222 + t221;
t203 = t218 - t394;
t378 = t199 * t312 + t203 * t323;
t377 = t199 * t194 - t203 * t407;
t375 = t219 * t323 + t312 * t221;
t374 = t194 * t221 - t219 * t407;
t364 = -0.2e1 * pkin(1) * qJD(2);
t122 = 0.2e1 * t193 * t152;
t362 = t400 * pkin(4);
t360 = t397 * pkin(4);
t359 = pkin(3) * t366;
t358 = pkin(3) * t223;
t356 = pkin(5) * t365;
t150 = t420 * t366;
t345 = t227 * t223;
t344 = t228 * t368;
t132 = -t195 * t216 + t318;
t81 = t400 * t237;
t51 = -t397 * t93 + t81;
t275 = t193 * pkin(5) - t132 * pkin(11) + t51;
t270 = t399 * t275;
t42 = -pkin(11) * t376 + t52;
t18 = -t226 * t42 + t270;
t273 = t226 * t275;
t19 = t399 * t42 + t273;
t48 = t227 * t414 + t229 * t413;
t232 = t152 * pkin(4) + pkin(10) * t412 + t48;
t47 = -t227 * t413 + t229 * t414;
t233 = pkin(10) * t248 - t47;
t12 = -qJD(5) * t80 + t232 * t400 - t233 * t397 - t337 * t93;
t60 = t195 * t323 - t227 * t255 + t229 * t256;
t231 = t60 * pkin(11) + t12 + t396;
t11 = -qJD(5) * t81 - t397 * t232 - t400 * t233 + t341 * t93;
t239 = -pkin(11) * t405 - t11;
t3 = -qJD(6) * t270 - t226 * t231 - t399 * t239 + t365 * t42;
t238 = -t226 * t239 + t399 * t231;
t4 = -qJD(6) * t19 + t238;
t343 = t3 * t148 - t4 * t149 + t18 * t78 - t19 * t79;
t335 = t11 * t312 - t12 * t194 - t52 * t323 + t407 * t51;
t334 = -0.2e1 * t356;
t188 = t312 * pkin(11);
t119 = -t188 + t143;
t264 = t407 * pkin(11);
t292 = qJD(4) * t311;
t259 = -t227 * t292 + t308;
t260 = -t229 * t292 - t309;
t83 = -qJD(5) * t143 - t397 * t259 + t400 * t260;
t234 = t264 + t83;
t245 = -t419 - t395;
t240 = t399 * t245;
t303 = t323 * pkin(11);
t82 = qJD(5) * t419 - t400 * t259 - t397 * t260;
t247 = t303 + t82;
t26 = -qJD(6) * t240 + t119 * t365 - t226 * t234 + t247 * t399;
t242 = t226 * t245;
t27 = -qJD(6) * t242 - t119 * t340 + t226 * t247 + t234 * t399;
t74 = -t226 * t119 + t240;
t75 = t119 * t399 + t242;
t333 = t26 * t148 - t27 * t149 + t74 * t78 - t75 * t79;
t130 = -t188 + t158;
t301 = qJD(4) * t319;
t302 = qJD(4) * t320;
t236 = -t227 * t301 + t229 * t302 + t264 - t418;
t258 = t156 - t395;
t250 = t399 * t258;
t111 = -qJD(5) * t156 - t227 * t302 - t229 * t301;
t251 = -t303 - t111;
t34 = -qJD(6) * t250 + t130 * t365 - t226 * t236 - t251 * t399;
t252 = t226 * t258;
t35 = -qJD(6) * t252 - t130 * t340 - t226 * t251 + t236 * t399;
t91 = -t226 * t130 + t250;
t92 = t130 * t399 + t252;
t332 = t34 * t148 - t35 * t149 + t91 * t78 - t92 * t79;
t331 = -t113 * t229 - t150;
t330 = -t143 * t323 - t83 * t194 + t82 * t312 - t407 * t419;
t328 = pkin(4) * t337;
t327 = pkin(4) * t341;
t326 = pkin(5) * t340;
t112 = -t418 + (t229 * t320 - t196) * qJD(4);
t325 = t111 * t312 - t112 * t194 + t156 * t407 - t158 * t323;
t191 = t195 ^ 2;
t317 = t191 * t345;
t316 = t362 + pkin(5);
t314 = t399 * t397;
t313 = t399 * t376;
t298 = t227 * t315;
t297 = t229 * t315;
t290 = t399 * t316;
t286 = t415 * t401;
t95 = t132 * t399 - t226 * t376;
t17 = -t48 * t227 - t47 * t229 + (-t106 * t229 - t107 * t227) * qJD(4);
t140 = -qJD(6) * t290 - t399 * t328 + (qJD(6) * t397 + t341) * t226 * pkin(4);
t263 = t195 * t406;
t257 = t227 * t261;
t241 = (qJD(5) + qJD(6)) * (-t226 * t400 - t314) * pkin(4);
t235 = -qJD(6) * t273 - t340 * t42 + t238;
t207 = -0.2e1 * t345;
t206 = 0.2e1 * t345;
t192 = -0.2e1 * t408;
t183 = pkin(4) * t314 + t226 * t316;
t182 = -t226 * t360 + t290;
t180 = t286 * t388;
t141 = t241 - t356;
t123 = -0.2e1 * t194 * t407;
t121 = 0.2e1 * t312 * t323;
t103 = t195 * t408 + t257;
t94 = t132 * t226 + t313;
t89 = -t152 * t312 - t193 * t323;
t88 = t194 * t152 - t193 * t407;
t87 = t345 * t417 + t370 * t406;
t86 = -0.2e1 * t194 * t323 + 0.2e1 * t312 * t407;
t76 = t194 * t327 - t312 * t328 - t323 * t360 + t362 * t407;
t62 = -0.2e1 * t149 * t78;
t61 = 0.2e1 * t148 * t79;
t56 = -t148 * t152 - t193 * t79;
t55 = t149 * t152 - t193 * t78;
t41 = t312 * t405 + t323 * t376;
t40 = -t132 * t407 - t60 * t194;
t36 = 0.2e1 * t148 * t78 - 0.2e1 * t149 * t79;
t33 = (t399 * t78 - t226 * t79 + (-t148 * t399 + t149 * t226) * qJD(6)) * pkin(5);
t25 = t140 * t148 - t141 * t149 + t182 * t78 - t183 * t79;
t24 = qJD(6) * t95 - t226 * t60 + t399 * t405;
t23 = qJD(6) * t313 + t132 * t365 + t226 * t405 + t399 * t60;
t20 = -t132 * t323 - t194 * t405 + t312 * t60 + t376 * t407;
t14 = t148 * t24 + t79 * t94;
t13 = -t149 * t23 - t78 * t95;
t5 = t148 * t23 - t149 * t24 + t78 * t94 - t79 * t95;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t344, 0.2e1 * (-t228 ^ 2 + t230 ^ 2) * qJD(2), 0, -0.2e1 * t344, 0, 0, t228 * t364, t230 * t364, 0, 0, -0.2e1 * t263, -0.2e1 * t195 * t152 + 0.2e1 * t193 * t406, 0, t122, 0, 0, 0.2e1 * t152 * t220 + 0.2e1 * t193 * t357, 0.2e1 * t195 * t357 - 0.2e1 * t220 * t406, 0.2e1 * t113 * t195 - 0.2e1 * t152 * t272 + 0.2e1 * t193 * t404 + 0.2e1 * t406 * t420, 0.2e1 * t220 * t357 - 0.2e1 * t272 * t404 - 0.2e1 * t382, -0.2e1 * t225 * t263 - 0.2e1 * t317, 0.2e1 * t191 * t408 - t257 * t417, 0.2e1 * t152 * t380 - 0.2e1 * t193 * t412, -0.2e1 * t224 * t263 + 0.2e1 * t317, -0.2e1 * t152 * t381 + 0.2e1 * t193 * t248, t122, 0.2e1 * t106 * t152 + 0.2e1 * t113 * t381 - 0.2e1 * t151 * t195 + 0.2e1 * t48 * t193 + 0.2e1 * t262 * t420, -0.2e1 * t107 * t152 + 0.2e1 * t113 * t380 + 0.2e1 * t150 * t195 + 0.2e1 * t47 * t193 + 0.2e1 * t261 * t420, 0.2e1 * t106 * t412 + 0.2e1 * t107 * t248 - 0.2e1 * t48 * t380 + 0.2e1 * t47 * t381, 0.2e1 * t106 * t48 - 0.2e1 * t107 * t47 - 0.2e1 * t382, -0.2e1 * t132 * t60, -0.2e1 * t132 * t405 + 0.2e1 * t376 * t60, 0.2e1 * t132 * t152 - 0.2e1 * t193 * t60, 0.2e1 * t376 * t405, -0.2e1 * t152 * t376 - 0.2e1 * t193 * t405, t122, 0.2e1 * t12 * t193 + 0.2e1 * t126 * t405 + 0.2e1 * t51 * t152 + 0.2e1 * t376 * t71, 0.2e1 * t11 * t193 - 0.2e1 * t126 * t60 + 0.2e1 * t132 * t71 - 0.2e1 * t152 * t52, 0.2e1 * t11 * t376 - 0.2e1 * t12 * t132 - 0.2e1 * t405 * t52 + 0.2e1 * t51 * t60, -0.2e1 * t11 * t52 + 0.2e1 * t12 * t51 + 0.2e1 * t126 * t71, -0.2e1 * t95 * t23, 0.2e1 * t23 * t94 - 0.2e1 * t24 * t95, 0.2e1 * t152 * t95 - 0.2e1 * t193 * t23, 0.2e1 * t94 * t24, -0.2e1 * t152 * t94 - 0.2e1 * t193 * t24, t122, 0.2e1 * t152 * t18 + 0.2e1 * t193 * t4 + 0.2e1 * t24 * t96 + 0.2e1 * t37 * t94, -0.2e1 * t152 * t19 + 0.2e1 * t193 * t3 - 0.2e1 * t23 * t96 + 0.2e1 * t37 * t95, 0.2e1 * t18 * t23 - 0.2e1 * t19 * t24 + 0.2e1 * t3 * t94 - 0.2e1 * t4 * t95, 0.2e1 * t18 * t4 - 0.2e1 * t19 * t3 + 0.2e1 * t37 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t368, 0, -t369, 0, -pkin(7) * t368, pkin(7) * t369, 0, 0, 0, 0, -t406, 0, -t152, 0, -t113, t404, -t152 * t361 - t193 * t329 + t195 * t222 + t363 * t406, -t113 * t363 - t222 * t420 + t272 * t329 - t361 * t404, -t103, t87, t118, t103, -t409, 0, -t152 * t298 + t193 * t411 + t195 * t373 - t218 * t262 + t331, -t152 * t297 + t193 * t410 - t195 * t291 - t218 * t261 + t379, t17, -t47 * t297 - t48 * t298 + t113 * t218 + (-t106 * t297 - t107 * t298) * qJD(4) + (-t420 * t398 + (-t106 * t227 + t107 * t229) * t401) * t388, t40, t20, t88, t41, t89, 0, -t152 * t419 + t83 * t193 + t199 * t376 + t203 * t405 + t387, t132 * t199 - t143 * t152 + t193 * t82 - t203 * t60 + t391, -t83 * t132 - t143 * t405 + t376 * t82 - t419 * t60 + t335, -t11 * t143 - t12 * t419 + t126 * t199 + t203 * t71 + t51 * t83 - t52 * t82, t13, t5, t55, t14, t56, 0, t124 * t94 + t152 * t74 + t161 * t24 + t193 * t27 + t393, t124 * t95 - t152 * t75 - t161 * t23 + t193 * t26 + t392, t23 * t74 - t24 * t75 + t26 * t94 - t27 * t95 + t343, t124 * t96 + t161 * t37 + t18 * t27 - t19 * t26 - t3 * t75 + t4 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t222, -0.2e1 * t329, 0, 0, t206, t192, 0, t207, 0, 0, 0.2e1 * t291, 0.2e1 * t373, 0.2e1 * t180, 0.2e1 * (t315 * t363 * t415 + t218 * t361) * qJD(3), t123, t86, 0, t121, 0, 0, 0.2e1 * t378, 0.2e1 * t377, 0.2e1 * t330, -0.2e1 * t143 * t82 + 0.2e1 * t199 * t203 - 0.2e1 * t419 * t83, t62, t36, 0, t61, 0, 0, 0.2e1 * t390, 0.2e1 * t389, 0.2e1 * t333, 0.2e1 * t124 * t161 - 0.2e1 * t26 * t75 + 0.2e1 * t27 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t406, 0, -t152, 0, -t113, t404, 0, 0, -t103, t87, t118, t103, -t409, 0, pkin(3) * t248 - pkin(9) * t118 + t331, pkin(3) * t412 + pkin(9) * t409 + t379, t17, -pkin(3) * t113 + pkin(9) * t17, t40, t20, t88, t41, t89, 0, t112 * t193 + t156 * t152 + t219 * t405 + t221 * t376 + t387, t111 * t193 + t132 * t221 - t152 * t158 - t219 * t60 + t391, t111 * t376 - t112 * t132 + t156 * t60 - t158 * t405 + t335, -t11 * t158 - t111 * t52 + t112 * t51 + t12 * t156 + t126 * t221 + t219 * t71, t13, t5, t55, t14, t56, 0, t131 * t94 + t152 * t91 + t162 * t24 + t193 * t35 + t393, t131 * t95 - t152 * t92 - t162 * t23 + t193 * t34 + t392, t23 * t91 - t24 * t92 + t34 * t94 - t35 * t95 + t343, t131 * t96 + t162 * t37 + t18 * t35 - t19 * t34 - t3 * t92 + t4 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t222, -t329, 0, 0, t206, t192, 0, t207, 0, 0, t291 - t359, -t358 + t373, t180 (-pkin(3) * t398 + pkin(9) * t286) * t388, t123, t86, 0, t121, 0, 0, t375 + t378, t374 + t377, t325 + t330, -t111 * t143 - t112 * t419 + t156 * t83 - t158 * t82 + t199 * t219 + t203 * t221, t62, t36, 0, t61, 0, 0, t386 + t390, t385 + t389, t332 + t333, t124 * t162 + t131 * t161 - t26 * t92 + t27 * t91 - t34 * t75 + t35 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, t192, 0, t207, 0, 0, -0.2e1 * t359, -0.2e1 * t358, 0, 0, t123, t86, 0, t121, 0, 0, 0.2e1 * t375, 0.2e1 * t374, 0.2e1 * t325, -0.2e1 * t111 * t158 + 0.2e1 * t112 * t156 + 0.2e1 * t219 * t221, t62, t36, 0, t61, 0, 0, 0.2e1 * t386, 0.2e1 * t385, 0.2e1 * t332, 0.2e1 * t131 * t162 - 0.2e1 * t34 * t92 + 0.2e1 * t35 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, 0, t248, t152, t48, t47, 0, 0, 0, 0, -t60, 0, -t405, t152, t152 * t362 - t193 * t327 + t12 (-t152 * t397 - t193 * t337) * pkin(4) + t11 (t397 * (t195 * t208 - t324) + t60 * t400 + (-t400 * t376 + (t381 * t397 + t132) * t397) * qJD(5)) * pkin(4) (-t397 * t11 + t400 * t12 + (-t397 * t51 + t400 * t52) * qJD(5)) * pkin(4), 0, 0, -t23, 0, -t24, t152, t141 * t193 + t182 * t152 + t235, t140 * t193 - t152 * t183 + t3, t140 * t94 - t141 * t95 + t182 * t23 - t183 * t24, -t140 * t19 + t141 * t18 + t182 * t4 - t183 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t223, 0, -t366, 0, t411, t410, 0, 0, 0, 0, -t407, 0, -t323, 0, t83, t82, t76 (-t397 * t82 + t400 * t83 + (t143 * t400 + t397 * t419) * qJD(5)) * pkin(4), 0, 0, -t78, 0, -t79, 0, t27, t26, t25, -t140 * t75 + t141 * t74 + t182 * t27 - t183 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t223, 0, -t366, 0, -pkin(9) * t223, pkin(9) * t366, 0, 0, 0, 0, -t407, 0, -t323, 0, t112, t111, t76 (-t397 * t111 + t400 * t112 + (-t156 * t397 + t158 * t400) * qJD(5)) * pkin(4), 0, 0, -t78, 0, -t79, 0, t35, t34, t25, -t140 * t92 + t141 * t91 + t182 * t35 - t183 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t327, -0.2e1 * t328, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t141, 0.2e1 * t140, 0, -0.2e1 * t140 * t183 + 0.2e1 * t141 * t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, 0, -t405, t152, t12, t11, 0, 0, 0, 0, -t23, 0, -t24, t152, -t193 * t356 + t396 * t399 + t235 (-t152 * t226 - t193 * t340) * pkin(5) + t3 (t399 * t23 - t226 * t24 + (t226 * t95 - t399 * t94) * qJD(6)) * pkin(5) (t399 * t4 - t226 * t3 + (-t18 * t226 + t19 * t399) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t407, 0, -t323, 0, t83, t82, 0, 0, 0, 0, -t78, 0, -t79, 0, t27, t26, t33 (t399 * t27 - t226 * t26 + (-t226 * t74 + t399 * t75) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t407, 0, -t323, 0, t112, t111, 0, 0, 0, 0, -t78, 0, -t79, 0, t35, t34, t33 (t399 * t35 - t226 * t34 + (-t226 * t91 + t399 * t92) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327, -t328, 0, 0, 0, 0, 0, 0, 0, 0, t241 + t334, -t326 + t140, 0 (t399 * t141 - t140 * t226 + (-t182 * t226 + t183 * t399) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t334, -0.2e1 * t326, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, 0, -t24, t152, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t78, 0, -t79, 0, t27, t26, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t78, 0, -t79, 0, t35, t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t140, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, -t326, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
