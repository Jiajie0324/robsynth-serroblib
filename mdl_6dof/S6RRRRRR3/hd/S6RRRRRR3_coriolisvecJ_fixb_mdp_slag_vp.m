% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% MDP [38x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRR3_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRRR3_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(38,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR3_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR3_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR3_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [38 1]), ...
  'S6RRRRRR3_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [38x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:43:01
% EndTime: 2019-03-10 03:43:24
% DurationCPUTime: 14.00s
% Computational Cost: add. (13884->613), mult. (32462->802), div. (0->0), fcn. (25170->10), ass. (0->274)
t773 = sin(qJ(2));
t904 = cos(qJ(3));
t834 = qJD(1) * t904;
t772 = sin(qJ(3));
t777 = cos(qJ(2));
t878 = t772 * t777;
t711 = -qJD(1) * t878 - t773 * t834;
t766 = qJD(2) + qJD(3);
t771 = sin(qJ(4));
t776 = cos(qJ(4));
t679 = -t711 * t771 - t776 * t766;
t770 = sin(qJ(5));
t775 = cos(qJ(5));
t800 = t711 * t776 - t766 * t771;
t609 = t775 * t679 - t770 * t800;
t774 = cos(qJ(6));
t769 = sin(qJ(6));
t801 = t679 * t770 + t775 * t800;
t894 = t801 * t769;
t544 = -t774 * t609 + t894;
t731 = t773 * t904 + t878;
t672 = t766 * t731;
t655 = t672 * qJD(1);
t803 = t609 * t769 + t774 * t801;
t948 = t655 * MDP(36) + (-t544 ^ 2 + t803 ^ 2) * MDP(33) + t544 * MDP(32) * t803;
t906 = pkin(7) + pkin(8);
t748 = t906 * t777;
t738 = qJD(1) * t748;
t715 = t772 * t738;
t746 = t906 * t773;
t736 = qJD(1) * t746;
t667 = -t736 * t904 - t715;
t833 = qJD(3) * t904;
t944 = -pkin(2) * t833 + t667;
t907 = qJD(4) + qJD(5);
t852 = qJD(1) * t773;
t936 = -t772 * t852 + t777 * t834;
t947 = t907 - t936;
t656 = -pkin(3) * t711 - pkin(9) * t936;
t637 = pkin(2) * t852 + t656;
t946 = -t776 * t637 + t771 * t944;
t654 = t936 * t766;
t849 = qJD(4) * t776;
t850 = qJD(4) * t771;
t600 = t776 * t654 + t711 * t850 + t766 * t849;
t601 = -qJD(4) * t800 + t654 * t771;
t847 = qJD(5) * t775;
t848 = qJD(5) * t770;
t524 = t775 * t600 - t770 * t601 - t679 * t847 + t800 * t848;
t782 = qJD(5) * t801 - t600 * t770 - t775 * t601;
t845 = qJD(6) * t774;
t841 = t774 * t524 - t609 * t845 + t769 * t782;
t846 = qJD(6) * t769;
t481 = t801 * t846 + t841;
t704 = qJD(4) - t936;
t694 = qJD(5) + t704;
t825 = t524 * t769 - t774 * t782;
t783 = qJD(6) * t803 - t825;
t690 = qJD(6) + t694;
t932 = t690 * t803;
t933 = t544 * t690;
t945 = t655 * MDP(29) + (-t609 ^ 2 + t801 ^ 2) * MDP(26) + (t609 * t694 + t524) * MDP(27) + (-t694 * t801 + t782) * MDP(28) - t609 * MDP(25) * t801 + (t783 - t932) * MDP(35) + (t481 - t933) * MDP(34) + t948;
t762 = -pkin(2) * t777 - pkin(1);
t744 = t762 * qJD(1);
t634 = -pkin(3) * t936 + pkin(9) * t711 + t744;
t718 = t904 * t738;
t897 = qJD(2) * pkin(2);
t719 = -t736 + t897;
t661 = t772 * t719 + t718;
t641 = pkin(9) * t766 + t661;
t580 = t776 * t634 - t641 * t771;
t554 = pkin(10) * t800 + t580;
t537 = pkin(4) * t704 + t554;
t581 = t634 * t771 + t641 * t776;
t555 = -pkin(10) * t679 + t581;
t551 = t775 * t555;
t511 = t537 * t770 + t551;
t935 = pkin(11) * t609;
t499 = t511 - t935;
t496 = t499 * t846;
t660 = t719 * t904 - t715;
t640 = -t766 * pkin(3) - t660;
t602 = t679 * pkin(4) + t640;
t538 = t609 * pkin(5) + t602;
t925 = -t538 * t544 + t496;
t880 = t770 * t776;
t730 = t771 * t775 + t880;
t927 = t947 * t730;
t728 = t770 * t771 - t775 * t776;
t864 = t947 * t728;
t941 = t771 * t637 + t776 * t944;
t844 = qJD(1) * qJD(2);
t832 = t773 * t844;
t588 = pkin(2) * t832 + pkin(3) * t655 - pkin(9) * t654;
t584 = t776 * t588;
t840 = qJD(2) * t906;
t814 = qJD(1) * t840;
t720 = t773 * t814;
t721 = t777 * t814;
t851 = qJD(3) * t772;
t592 = t719 * t833 - t720 * t904 - t772 * t721 - t738 * t851;
t785 = -qJD(4) * t581 - t592 * t771 + t584;
t492 = pkin(4) * t655 - pkin(10) * t600 + t785;
t794 = t771 * t588 + t776 * t592 + t634 * t849 - t641 * t850;
t497 = -pkin(10) * t601 + t794;
t827 = t775 * t492 - t770 * t497;
t784 = -qJD(5) * t511 + t827;
t473 = pkin(5) * t655 - pkin(11) * t524 + t784;
t815 = -t770 * t492 - t775 * t497 - t537 * t847 + t555 * t848;
t474 = pkin(11) * t782 - t815;
t828 = t774 * t473 - t769 * t474;
t924 = t538 * t803 + t828;
t885 = t936 * t776;
t813 = -t711 * pkin(4) - pkin(10) * t885;
t758 = pkin(2) * t772 + pkin(9);
t898 = -pkin(10) - t758;
t830 = qJD(4) * t898;
t940 = -t776 * t830 + t813 - t946;
t821 = t776 * t656 - t660 * t771;
t905 = -pkin(9) - pkin(10);
t839 = qJD(4) * t905;
t939 = -t776 * t839 + t813 + t821;
t886 = t936 * t771;
t843 = pkin(10) * t886;
t938 = -t771 * t830 - t843 + t941;
t861 = t771 * t656 + t776 * t660;
t937 = -t771 * t839 - t843 + t861;
t934 = pkin(11) * t801;
t663 = t774 * t728 + t730 * t769;
t871 = -qJD(6) * t663 - t769 * t927 - t774 * t864;
t664 = -t728 * t769 + t730 * t774;
t930 = qJD(6) * t664 - t769 * t864 + t774 * t927;
t666 = -t772 * t736 + t718;
t812 = pkin(2) * t851 - t666;
t798 = -t772 * t773 + t777 * t904;
t671 = t766 * t798;
t890 = t671 * t771;
t926 = t731 * t849 + t890;
t923 = t602 * t609 + t815;
t922 = t602 * t801 + t784;
t919 = -0.2e1 * t844;
t918 = MDP(5) * (t773 ^ 2 - t777 ^ 2);
t647 = t730 * t731;
t659 = -pkin(3) * t798 - pkin(9) * t731 + t762;
t652 = t776 * t659;
t683 = -t772 * t746 + t748 * t904;
t883 = t731 * t776;
t570 = -pkin(4) * t798 - pkin(10) * t883 - t683 * t771 + t652;
t675 = t776 * t683;
t859 = t771 * t659 + t675;
t884 = t731 * t771;
t585 = -pkin(10) * t884 + t859;
t867 = t770 * t570 + t775 * t585;
t763 = pkin(4) * t850;
t917 = pkin(5) * t927 + t763;
t916 = t927 * pkin(11);
t915 = t940 * t775;
t723 = t898 * t771;
t765 = t776 * pkin(10);
t724 = t758 * t776 + t765;
t858 = t770 * t723 + t775 * t724;
t914 = t939 * t775;
t745 = t905 * t771;
t747 = pkin(9) * t776 + t765;
t857 = t770 * t745 + t775 * t747;
t691 = pkin(4) * t886;
t913 = -t691 + t812;
t912 = -t745 * t847 + t747 * t848 + t770 * t939 + t775 * t937;
t911 = -t723 * t847 + t724 * t848 + t770 * t940 + t938 * t775;
t910 = -t711 * pkin(5) - pkin(11) * t864;
t909 = -t904 * t746 - t772 * t748;
t908 = qJD(1) * t731;
t902 = pkin(11) * t730;
t900 = t728 * pkin(5);
t899 = t776 * pkin(4);
t549 = t770 * t555;
t510 = t775 * t537 - t549;
t498 = t510 + t934;
t494 = pkin(5) * t694 + t498;
t896 = t494 * t774;
t895 = t600 * t771;
t892 = t655 * t770;
t891 = t655 * t776;
t889 = t671 * t776;
t888 = t679 * t704;
t887 = t800 * t704;
t882 = t769 * t655;
t881 = t770 * t774;
t879 = t771 * t655;
t778 = qJD(2) ^ 2;
t877 = t773 * t778;
t876 = t774 * t499;
t875 = t774 * t655;
t874 = t777 * t778;
t779 = qJD(1) ^ 2;
t873 = t777 * t779;
t872 = t775 * t554 - t549;
t866 = t913 + t917;
t617 = t691 + t661;
t863 = -t617 + t917;
t856 = t763 + t913;
t842 = t773 * t897;
t761 = -pkin(3) - t899;
t836 = t731 * t850;
t628 = t640 * t849;
t829 = pkin(1) * t919;
t599 = pkin(3) * t672 - pkin(9) * t671 + t842;
t595 = t776 * t599;
t737 = t773 * t840;
t739 = t777 * t840;
t613 = qJD(3) * t909 - t904 * t737 - t772 * t739;
t505 = -pkin(10) * t889 + pkin(4) * t672 - t613 * t771 + t595 + (-t675 + (pkin(10) * t731 - t659) * t771) * qJD(4);
t793 = t771 * t599 + t776 * t613 + t659 * t849 - t683 * t850;
t514 = -pkin(10) * t926 + t793;
t826 = t775 * t505 - t514 * t770;
t824 = -t554 * t770 - t551;
t823 = t775 * t570 - t585 * t770;
t820 = t775 * t723 - t724 * t770;
t819 = t775 * t745 - t747 * t770;
t818 = t704 * t776;
t817 = qJD(6) * t494 + t474;
t593 = t719 * t851 - t772 * t720 + t904 * t721 + t738 * t833;
t760 = -pkin(2) * t904 - pkin(3);
t811 = -t617 + t763;
t810 = -t581 * t711 + t593 * t771 + t628;
t722 = t728 * pkin(11);
t621 = -t722 + t858;
t809 = qJD(5) * t858 + qJD(6) * t621 - t770 * t938 + t910 + t915;
t639 = -t722 + t857;
t808 = qJD(5) * t857 + qJD(6) * t639 - t770 * t937 + t910 + t914;
t620 = t820 - t902;
t807 = -qJD(6) * t620 + t911 + t916;
t638 = t819 - t902;
t806 = -qJD(6) * t638 + t912 + t916;
t480 = t769 * t494 + t876;
t802 = -t640 * t936 - t655 * t758;
t648 = t728 * t731;
t586 = t774 * t647 - t648 * t769;
t587 = -t647 * t769 - t648 * t774;
t635 = pkin(4) * t884 - t909;
t799 = t580 * t711 - t593 * t776 + t640 * t850;
t796 = -t836 + t889;
t532 = pkin(4) * t601 + t593;
t743 = t760 - t899;
t795 = t711 * t744 - t593;
t614 = -t772 * t737 + t739 * t904 - t746 * t851 + t748 * t833;
t792 = t770 * t505 + t775 * t514 + t570 * t847 - t585 * t848;
t479 = -t499 * t769 + t896;
t493 = -pkin(5) * t782 + t532;
t789 = t479 * t711 + t493 * t663 + t538 * t930;
t788 = -t480 * t711 + t493 * t664 + t538 * t871;
t787 = t510 * t711 + t532 * t728 + t602 * t927;
t786 = -t511 * t711 + t532 * t730 - t602 * t864;
t560 = pkin(4) * t926 + t614;
t781 = -t744 * t936 - t592;
t780 = (-t481 * t663 + t544 * t871 + t664 * t783 + t803 * t930) * MDP(33) + (t481 * t664 - t803 * t871) * MDP(32) + (-t524 * t728 + t609 * t864 + t730 * t782 + t801 * t927) * MDP(26) + (t655 * t664 + t690 * t871 - t711 * t803) * MDP(34) + (t544 * t711 - t655 * t663 - t690 * t930) * MDP(35) + (t524 * t730 + t801 * t864) * MDP(25) + ((t600 - t888) * t776 + (-t601 + t887) * t771) * MDP(19) + (t655 * t730 - t694 * t864 - t711 * t801) * MDP(27) + (-t609 * t711 - t655 * t728 - t694 * t927) * MDP(28) + (-t800 * t818 + t895) * MDP(18) + (-t704 ^ 2 * t771 - t679 * t711 + t891) * MDP(21) + (t704 * t818 - t711 * t800 + t879) * MDP(20) + t654 * MDP(13) + (t711 ^ 2 - t936 ^ 2) * MDP(12) + (MDP(11) * t936 + t704 * MDP(22) + t694 * MDP(29) + t690 * MDP(36)) * t711 + (-t936 * MDP(13) + (-t711 - t908) * MDP(14)) * t766;
t759 = pkin(4) * t775 + pkin(5);
t687 = t761 + t900;
t686 = t743 + t900;
t622 = t655 * t798;
t589 = t647 * pkin(5) + t635;
t579 = -pkin(4) * t800 - pkin(5) * t801;
t530 = t671 * t880 - t770 * t836 - t848 * t884 + (t883 * t907 + t890) * t775;
t529 = -t647 * t907 - t728 * t671;
t520 = -pkin(11) * t647 + t867;
t515 = -pkin(5) * t798 + pkin(11) * t648 + t823;
t509 = t530 * pkin(5) + t560;
t501 = t872 + t934;
t500 = t824 + t935;
t487 = qJD(6) * t587 + t529 * t769 + t774 * t530;
t486 = -qJD(6) * t586 + t529 * t774 - t530 * t769;
t477 = -pkin(11) * t530 + t792;
t476 = pkin(5) * t672 - pkin(11) * t529 - qJD(5) * t867 + t826;
t1 = [(t601 * t798 - t672 * t679 - t704 * t926 - t731 * t879) * MDP(21) + ((-t679 * t776 + t771 * t800) * t671 + (-t895 - t601 * t776 + (t679 * t771 + t776 * t800) * qJD(4)) * t731) * MDP(19) + (t600 * t883 - t796 * t800) * MDP(18) + (-t600 * t798 + t655 * t883 - t672 * t800 + t704 * t796) * MDP(20) + (-t480 * t672 + t589 * t481 + t538 * t486 + t493 * t587 - t496 * t798 - t509 * t803 + (-(-qJD(6) * t520 + t476) * t690 - t515 * t655 + t473 * t798) * t769 + (-(qJD(6) * t515 + t477) * t690 - t520 * t655 + t817 * t798) * t774) * MDP(38) + (-t481 * t798 + t486 * t690 + t587 * t655 - t672 * t803) * MDP(34) + (-t511 * t672 + t635 * t524 + t602 * t529 - t532 * t648 - t560 * t801 - t655 * t867 - t694 * t792 - t798 * t815) * MDP(31) + (-t524 * t798 + t529 * t694 - t648 * t655 - t672 * t801) * MDP(27) + (MDP(13) * t671 - MDP(14) * t672 - MDP(16) * t614 - MDP(17) * t613) * t766 + ((t476 * t774 - t477 * t769) * t690 + (t515 * t774 - t520 * t769) * t655 - t828 * t798 + t479 * t672 - t509 * t544 - t589 * t783 + t493 * t586 + t538 * t487 + ((-t515 * t769 - t520 * t774) * t690 + t480 * t798) * qJD(6)) * MDP(37) + (-t487 * t690 + t544 * t672 - t586 * t655 - t783 * t798) * MDP(35) + (-t481 * t586 + t486 * t544 + t487 * t803 + t587 * t783) * MDP(33) + (t654 * t798 - t655 * t731 + t671 * t936 + t672 * t711) * MDP(12) + (t655 * t762 + t672 * t744 + (-qJD(1) * t798 - t936) * t842) * MDP(16) + (t481 * t587 - t486 * t803) * MDP(32) + (-t524 * t648 - t529 * t801) * MDP(25) + (-t530 * t694 - t609 * t672 - t647 * t655 - t782 * t798) * MDP(28) + (-t524 * t647 - t529 * t609 + t530 * t801 - t648 * t782) * MDP(26) + (-t581 * t672 + t593 * t883 - t600 * t909 - t614 * t800 + t640 * t796 - t655 * t859 - t704 * t793 + t794 * t798) * MDP(24) + ((-t683 * t849 + t595) * t704 + t652 * t655 - (-t641 * t849 + t584) * t798 + t580 * t672 + t614 * t679 - t909 * t601 + t731 * t628 + ((-qJD(4) * t659 - t613) * t704 - t683 * t655 - (-qJD(4) * t634 - t592) * t798 + t593 * t731 + t640 * t671) * t771) * MDP(23) + (t826 * t694 + t823 * t655 - t827 * t798 + t510 * t672 + t560 * t609 - t635 * t782 + t532 * t647 + t602 * t530 + (t511 * t798 - t694 * t867) * qJD(5)) * MDP(30) - MDP(7) * t877 + (pkin(7) * t877 + t777 * t829) * MDP(10) + (-pkin(7) * t874 + t773 * t829) * MDP(9) + MDP(6) * t874 + (t654 * t731 - t671 * t711) * MDP(11) + (t672 * t704 - t622) * MDP(22) + (t672 * t694 - t622) * MDP(29) + (t672 * t690 - t622) * MDP(36) + 0.2e1 * t777 * MDP(4) * t832 + (t654 * t762 + t671 * t744 + (-t711 + t908) * t842) * MDP(17) + t918 * t919; (t760 * t601 + t802 * t771 + t812 * t679 + (-t758 * t849 + t946) * t704 + t799) * MDP(23) + (t666 * t766 + (-t766 * t851 + t852 * t936) * pkin(2) + t795) * MDP(16) + (t760 * t600 + t802 * t776 - t812 * t800 + (t758 * t850 + t941) * t704 + t810) * MDP(24) + t780 + (t667 * t766 + (t711 * t852 - t766 * t833) * pkin(2) + t781) * MDP(17) + (t743 * t524 - t858 * t655 + t694 * t911 - t801 * t856 + t786) * MDP(31) + t779 * t918 + ((t620 * t774 - t621 * t769) * t655 - t686 * t783 + (t769 * t807 - t774 * t809) * t690 - t866 * t544 + t789) * MDP(37) + (-(t620 * t769 + t621 * t774) * t655 + t686 * t481 + (t769 * t809 + t774 * t807) * t690 - t866 * t803 + t788) * MDP(38) + (t820 * t655 - t743 * t782 + (-t724 * t847 + (-qJD(5) * t723 + t938) * t770 - t915) * t694 + t856 * t609 + t787) * MDP(30) - t773 * MDP(4) * t873 + (MDP(9) * t773 * t779 + MDP(10) * t873) * pkin(1); ((t638 * t774 - t639 * t769) * t655 - t687 * t783 + (t769 * t806 - t774 * t808) * t690 - t863 * t544 + t789) * MDP(37) + (-(t638 * t769 + t639 * t774) * t655 + t687 * t481 + (t769 * t808 + t774 * t806) * t690 - t863 * t803 + t788) * MDP(38) + (-pkin(3) * t601 - t821 * t704 - t661 * t679 - t640 * t886 + (-t704 * t849 - t879) * pkin(9) + t799) * MDP(23) + (-pkin(3) * t600 + t861 * t704 + t661 * t800 - t640 * t885 + (t704 * t850 - t891) * pkin(9) + t810) * MDP(24) + t780 + (t819 * t655 - t761 * t782 + (-t747 * t847 + (-qJD(5) * t745 + t937) * t770 - t914) * t694 + t811 * t609 + t787) * MDP(30) + (t660 * t766 + t781) * MDP(17) + (t661 * t766 + t795) * MDP(16) + (t761 * t524 - t857 * t655 + t694 * t912 - t801 * t811 + t786) * MDP(31); (-t679 ^ 2 + t800 ^ 2) * MDP(19) + (t581 * t704 + t640 * t800 + t785) * MDP(23) + (-t824 * t694 + (t609 * t800 + t655 * t775 - t694 * t848) * pkin(4) + t922) * MDP(30) + (t872 * t694 + (-t694 * t847 - t800 * t801 - t892) * pkin(4) + t923) * MDP(31) - t800 * t679 * MDP(18) + (t579 * t803 + (-t759 * t655 - t473 + (t500 - (-qJD(5) - qJD(6)) * t770 * pkin(4)) * t690) * t769 + (-pkin(4) * t892 + (-pkin(4) * t847 - qJD(6) * t759 + t501) * t690 - t817) * t774 + t925) * MDP(38) + (t600 + t888) * MDP(20) + (t759 * t875 - (t500 * t774 - t501 * t769) * t690 + t579 * t544 + (-t770 * t882 + (-t769 * t775 - t881) * t690 * qJD(5)) * pkin(4) + ((-pkin(4) * t881 - t759 * t769) * t690 - t480) * qJD(6) + t924) * MDP(37) + (t580 * t704 + t640 * t679 - t794) * MDP(24) + t655 * MDP(22) + (-t601 - t887) * MDP(21) + t945; (t511 * t694 + t922) * MDP(30) + (t510 * t694 + t923) * MDP(31) + (-(-t498 * t769 - t876) * t690 - t480 * qJD(6) + (-t544 * t801 - t690 * t846 + t875) * pkin(5) + t924) * MDP(37) + ((-t499 * t690 - t473) * t769 + (t498 * t690 - t817) * t774 + (-t690 * t845 - t801 * t803 - t882) * pkin(5) + t925) * MDP(38) + t945; (t841 - t933) * MDP(34) + (-t825 - t932) * MDP(35) + (t480 * t690 + t924) * MDP(37) + (-t769 * t473 - t774 * t474 + t479 * t690 + t925) * MDP(38) + (MDP(34) * t894 + MDP(35) * t803 - MDP(37) * t480 - MDP(38) * t896) * qJD(6) + t948;];
tauc  = t1;
