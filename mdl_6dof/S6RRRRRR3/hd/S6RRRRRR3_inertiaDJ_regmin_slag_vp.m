% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR3_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR3_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR3_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR3_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:42:38
% EndTime: 2019-03-10 03:42:48
% DurationCPUTime: 3.26s
% Computational Cost: add. (7266->319), mult. (16545->512), div. (0->0), fcn. (16499->10), ass. (0->216)
t192 = sin(qJ(3));
t193 = sin(qJ(2));
t197 = cos(qJ(3));
t198 = cos(qJ(2));
t158 = t192 * t198 + t197 * t193;
t196 = cos(qJ(4));
t185 = qJD(4) * t196;
t156 = t192 * t193 - t197 * t198;
t291 = qJD(2) + qJD(3);
t117 = t291 * t156;
t191 = sin(qJ(4));
t261 = t191 * t117;
t204 = t158 * t185 - t261;
t190 = sin(qJ(5));
t195 = cos(qJ(5));
t157 = t190 * t196 + t195 * t191;
t99 = t157 * t158;
t182 = -t198 * pkin(2) - pkin(1);
t108 = t156 * pkin(3) - t158 * pkin(9) + t182;
t289 = pkin(7) + pkin(8);
t171 = t289 * t193;
t173 = t289 * t198;
t124 = -t192 * t171 + t197 * t173;
t119 = t196 * t124;
t257 = t191 * t108 + t119;
t178 = t192 * pkin(2) + pkin(9);
t280 = -pkin(10) - t178;
t149 = t280 * t191;
t186 = t196 * pkin(10);
t150 = t196 * t178 + t186;
t254 = t190 * t149 + t195 * t150;
t288 = -pkin(9) - pkin(10);
t170 = t288 * t191;
t172 = t196 * pkin(9) + t186;
t253 = t190 * t170 + t195 * t172;
t246 = qJD(4) * t191;
t259 = t196 * t117;
t292 = -t158 * t246 - t259;
t188 = t196 ^ 2;
t251 = t191 ^ 2 - t188;
t215 = t251 * qJD(4);
t290 = qJD(4) + qJD(5);
t155 = t190 * t191 - t195 * t196;
t115 = t290 * t155;
t287 = t115 * pkin(11);
t118 = t291 * t158;
t286 = t118 * pkin(5);
t285 = t156 * pkin(4);
t284 = t156 * pkin(5);
t283 = t157 * pkin(11);
t282 = t195 * pkin(4);
t281 = t197 * pkin(2);
t189 = sin(qJ(6));
t194 = cos(qJ(6));
t110 = t194 * t155 + t189 * t157;
t245 = qJD(5) * t190;
t263 = t158 * t196;
t264 = t158 * t191;
t38 = -t245 * t264 + (t263 * t290 - t261) * t195 + t292 * t190;
t231 = qJD(2) * t289;
t163 = t193 * t231;
t212 = t198 * t231;
t83 = qJD(3) * t124 - t192 * t163 + t197 * t212;
t48 = t204 * pkin(4) + t83;
t23 = t38 * pkin(5) + t48;
t111 = -t189 * t155 + t194 * t157;
t116 = t290 * t157;
t51 = qJD(6) * t111 - t189 * t115 + t194 * t116;
t123 = t197 * t171 + t192 * t173;
t91 = pkin(4) * t264 + t123;
t67 = t99 * pkin(5) + t91;
t279 = t23 * t110 + t67 * t51;
t50 = -qJD(6) * t110 - t194 * t115 - t189 * t116;
t278 = t23 * t111 + t67 * t50;
t277 = t91 * t116 + t48 * t155;
t276 = -t91 * t115 + t48 * t157;
t218 = t196 * t108 - t191 * t124;
t54 = -pkin(10) * t263 + t218 + t285;
t64 = -pkin(10) * t264 + t257;
t63 = t195 * t64;
t275 = t190 * t54 + t63;
t181 = -t196 * pkin(4) - pkin(3);
t130 = t155 * pkin(5) + t181;
t129 = t130 - t281;
t248 = qJD(3) * t192;
t184 = pkin(2) * t248;
t183 = pkin(4) * t246;
t98 = t116 * pkin(5) + t183;
t90 = t184 + t98;
t274 = t90 * t110 + t129 * t51;
t273 = t90 * t111 + t129 * t50;
t272 = t98 * t110 + t130 * t51;
t271 = t98 * t111 + t130 * t50;
t29 = -t99 * pkin(11) + t275;
t270 = t194 * t29;
t269 = t123 * t185 + t83 * t191;
t166 = t184 + t183;
t169 = t181 - t281;
t268 = t169 * t116 + t166 * t155;
t267 = -t169 * t115 + t166 * t157;
t266 = t118 * t190;
t265 = t158 * t117;
t262 = t189 * t190;
t260 = t191 * t118;
t258 = t196 * t118;
t256 = t181 * t116 + t155 * t183;
t255 = -t181 * t115 + t157 * t183;
t180 = -pkin(3) - t281;
t252 = t180 * t185 + t191 * t184;
t250 = qJD(2) * t193;
t249 = qJD(2) * t198;
t247 = qJD(3) * t197;
t244 = qJD(5) * t195;
t243 = qJD(6) * t189;
t242 = qJD(6) * t194;
t241 = -0.2e1 * pkin(1) * qJD(2);
t240 = pkin(3) * t246;
t239 = pkin(3) * t185;
t238 = pkin(2) * t250;
t237 = pkin(2) * t247;
t236 = pkin(4) * t245;
t235 = pkin(4) * t244;
t234 = pkin(5) * t243;
t233 = pkin(5) * t242;
t37 = t155 * t117 - t290 * t99;
t77 = t118 * pkin(3) + t117 * pkin(9) + t238;
t82 = t197 * t163 + t171 * t247 + t173 * t248 + t192 * t212;
t222 = t191 * t82 + t196 * t77;
t19 = pkin(10) * t259 + t118 * pkin(4) + (-t119 + (pkin(10) * t158 - t108) * t191) * qJD(4) + t222;
t30 = -t108 * t185 + t124 * t246 - t191 * t77 + t196 * t82;
t25 = -pkin(10) * t204 - t30;
t224 = t195 * t19 - t190 * t25;
t8 = -t275 * qJD(5) + t224;
t5 = -t37 * pkin(11) + t286 + t8;
t7 = -t190 * t19 - t195 * t25 - t54 * t244 + t64 * t245;
t6 = -t38 * pkin(11) - t7;
t232 = -t189 * t6 + t194 * t5;
t230 = qJD(4) * t288;
t227 = t191 * t185;
t100 = t155 * t158;
t223 = -t190 * t64 + t195 * t54;
t26 = t100 * pkin(11) + t223 + t284;
t226 = -t26 - t284;
t225 = -qJD(6) * t26 - t6;
t221 = qJD(4) * t280;
t179 = pkin(5) + t282;
t220 = qJD(6) * (-pkin(5) - t179);
t219 = -0.4e1 * t191 * t263;
t217 = t195 * t149 - t190 * t150;
t216 = t195 * t170 - t190 * t172;
t214 = t191 * t237;
t213 = t196 * t237;
t211 = t189 * t26 + t270;
t86 = t217 - t283;
t148 = t155 * pkin(11);
t87 = -t148 + t254;
t210 = t189 * t87 - t194 * t86;
t209 = t189 * t86 + t194 * t87;
t95 = t216 - t283;
t96 = -t148 + t253;
t208 = t189 * t96 - t194 * t95;
t207 = t189 * t95 + t194 * t96;
t66 = -t194 * t100 - t189 * t99;
t65 = -t189 * t100 + t194 * t99;
t206 = t156 * t178 - t158 * t180;
t205 = t180 * t246 - t184 * t196;
t202 = t156 * t246 - t258;
t127 = t191 * t221 + t213;
t128 = t196 * t221 - t214;
t55 = -t195 * t127 - t190 * t128 - t149 * t244 + t150 * t245;
t164 = t191 * t230;
t165 = t196 * t230;
t80 = -t195 * t164 - t190 * t165 - t170 * t244 + t172 * t245;
t2 = -qJD(6) * t211 + t232;
t56 = -t254 * qJD(5) - t190 * t127 + t195 * t128;
t81 = -t253 * qJD(5) - t190 * t164 + t195 * t165;
t201 = (t190 * t243 + (-t194 * t195 + t262) * qJD(5)) * pkin(4);
t200 = (-t190 * t242 + (-t189 * t195 - t190 * t194) * qJD(5)) * pkin(4);
t199 = -t117 * t180 - t118 * t178 + (-t156 * t197 + t158 * t192) * qJD(3) * pkin(2);
t175 = 0.2e1 * t227;
t154 = -0.2e1 * t215;
t153 = t158 ^ 2;
t113 = t123 * t246;
t112 = t116 * pkin(11);
t106 = -t179 * t243 + t200;
t105 = -t179 * t242 + t201;
t89 = -0.2e1 * t157 * t115;
t88 = 0.2e1 * t156 * t118;
t85 = t156 * t185 + t260;
t74 = -t158 * t215 - t191 * t259;
t62 = -t116 * t156 - t155 * t118;
t61 = -t115 * t156 + t157 * t118;
t60 = qJD(4) * t219 + t251 * t117;
t59 = 0.2e1 * t115 * t155 - 0.2e1 * t157 * t116;
t58 = t81 + t287;
t57 = -t112 - t80;
t43 = t56 + t287;
t42 = -t112 - t55;
t39 = 0.2e1 * t111 * t50;
t35 = -t110 * t118 - t51 * t156;
t34 = t111 * t118 + t50 * t156;
t31 = -t257 * qJD(4) + t222;
t28 = t29 * t243;
t27 = t100 * t115 + t37 * t157;
t22 = -0.2e1 * t50 * t110 - 0.2e1 * t111 * t51;
t21 = -qJD(6) * t207 - t189 * t57 + t194 * t58;
t20 = qJD(6) * t208 - t189 * t58 - t194 * t57;
t14 = -qJD(6) * t209 - t189 * t42 + t194 * t43;
t13 = qJD(6) * t210 - t189 * t43 - t194 * t42;
t12 = qJD(6) * t66 + t189 * t37 + t194 * t38;
t11 = -qJD(6) * t65 - t189 * t38 + t194 * t37;
t10 = t100 * t116 + t115 * t99 - t37 * t155 - t157 * t38;
t9 = t11 * t111 + t66 * t50;
t3 = -t11 * t110 - t111 * t12 - t50 * t65 - t66 * t51;
t1 = -t189 * t5 + t194 * t225 + t28;
t4 = [0, 0, 0, 0.2e1 * t193 * t249, 0.2e1 * (-t193 ^ 2 + t198 ^ 2) * qJD(2), 0, 0, 0, t193 * t241, t198 * t241, -0.2e1 * t265, 0.2e1 * t117 * t156 - 0.2e1 * t158 * t118, 0, 0, 0, 0.2e1 * t182 * t118 + 0.2e1 * t156 * t238, -0.2e1 * t182 * t117 + 0.2e1 * t158 * t238, -0.2e1 * t153 * t227 - 0.2e1 * t188 * t265, -t117 * t219 + 0.2e1 * t153 * t215, 0.2e1 * t156 * t292 + 0.2e1 * t158 * t258, -0.2e1 * t156 * t204 - 0.2e1 * t158 * t260, t88, 0.2e1 * t118 * t218 + 0.2e1 * t123 * t204 + 0.2e1 * t31 * t156 + 0.2e1 * t83 * t264, -0.2e1 * t118 * t257 + 0.2e1 * t123 * t292 + 0.2e1 * t30 * t156 + 0.2e1 * t83 * t263, -0.2e1 * t100 * t37, 0.2e1 * t100 * t38 - 0.2e1 * t37 * t99, -0.2e1 * t100 * t118 + 0.2e1 * t37 * t156, -0.2e1 * t99 * t118 - 0.2e1 * t38 * t156, t88, 0.2e1 * t118 * t223 + 0.2e1 * t8 * t156 + 0.2e1 * t91 * t38 + 0.2e1 * t48 * t99, -0.2e1 * t48 * t100 - 0.2e1 * t275 * t118 + 0.2e1 * t7 * t156 + 0.2e1 * t91 * t37, 0.2e1 * t66 * t11, -0.2e1 * t11 * t65 - 0.2e1 * t66 * t12, 0.2e1 * t11 * t156 + 0.2e1 * t66 * t118, -0.2e1 * t65 * t118 - 0.2e1 * t12 * t156, t88, 0.2e1 * t2 * t156 + 0.2e1 * (-t189 * t29 + t194 * t26) * t118 + 0.2e1 * t23 * t65 + 0.2e1 * t67 * t12, 0.2e1 * t1 * t156 + 0.2e1 * t67 * t11 - 0.2e1 * t118 * t211 + 0.2e1 * t23 * t66; 0, 0, 0, 0, 0, t249, -t250, 0, -pkin(7) * t249, pkin(7) * t250, 0, 0, -t117, -t118, 0, -t83, t82, t74, t60, t85, -t202, 0, t113 + (-qJD(4) * t206 - t83) * t196 + t199 * t191, t196 * t199 + t206 * t246 + t269, t27, t10, t61, t62, 0, t118 * t217 + t56 * t156 + t166 * t99 + t169 * t38 + t277, -t166 * t100 - t118 * t254 + t55 * t156 + t169 * t37 + t276, t9, t3, t34, t35, 0, -t118 * t210 + t129 * t12 + t14 * t156 + t90 * t65 + t279, t129 * t11 - t118 * t209 + t13 * t156 + t90 * t66 + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t184, -0.2e1 * t237, t175, t154, 0, 0, 0, 0.2e1 * t205, 0.2e1 * t252, t89, t59, 0, 0, 0, 0.2e1 * t268, 0.2e1 * t267, t39, t22, 0, 0, 0, 0.2e1 * t274, 0.2e1 * t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117, -t118, 0, -t83, t82, t74, t60, t85, -t202, 0, t113 + (pkin(3) * t117 - pkin(9) * t118) * t191 + (-t83 + (-pkin(3) * t158 - pkin(9) * t156) * qJD(4)) * t196, -pkin(3) * t292 + pkin(9) * t202 + t269, t27, t10, t61, t62, 0, t118 * t216 + t81 * t156 + t181 * t38 + t183 * t99 + t277, -t100 * t183 - t118 * t253 + t80 * t156 + t181 * t37 + t276, t9, t3, t34, t35, 0, -t118 * t208 + t130 * t12 + t21 * t156 + t98 * t65 + t279, t130 * t11 - t118 * t207 + t20 * t156 + t98 * t66 + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t184, -t237, t175, t154, 0, 0, 0, t205 - t240, -t239 + t252, t89, t59, 0, 0, 0, t256 + t268, t255 + t267, t39, t22, 0, 0, 0, t272 + t274, t271 + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t154, 0, 0, 0, -0.2e1 * t240, -0.2e1 * t239, t89, t59, 0, 0, 0, 0.2e1 * t256, 0.2e1 * t255, t39, t22, 0, 0, 0, 0.2e1 * t272, 0.2e1 * t271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t292, -t204, t118, t31, t30, 0, 0, t37, -t38, t118, t118 * t282 + (-t63 + (-t54 - t285) * t190) * qJD(5) + t224 (-t156 * t244 - t266) * pkin(4) + t7, 0, 0, t11, -t12, t118, t106 * t156 + (-pkin(4) * t262 + t194 * t179) * t118 + t2, t105 * t156 + t28 + (-t179 * t118 - t5) * t189 + (-pkin(4) * t266 + t225) * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t185, -t246, 0, -t178 * t185 - t214, t178 * t246 - t213, 0, 0, -t115, -t116, 0, t56, t55, 0, 0, t50, -t51, 0, t14, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t185, -t246, 0, -pkin(9) * t185, pkin(9) * t246, 0, 0, -t115, -t116, 0, t81, t80, 0, 0, t50, -t51, 0, t21, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t236, -0.2e1 * t235, 0, 0, 0, 0, 0, 0.2e1 * t106, 0.2e1 * t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t38, t118, t8, t7, 0, 0, t11, -t12, t118, t194 * t286 + (t189 * t226 - t270) * qJD(6) + t232, t28 + (-t5 - t286) * t189 + (qJD(6) * t226 - t6) * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t116, 0, t56, t55, 0, 0, t50, -t51, 0, t14, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t116, 0, t81, t80, 0, 0, t50, -t51, 0, t21, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236, -t235, 0, 0, 0, 0, 0, t189 * t220 + t200, t194 * t220 + t201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t234, -0.2e1 * t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, t118, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t51, 0, t14, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t51, 0, t21, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t234, -t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
