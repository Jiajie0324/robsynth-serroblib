% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 14:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:48:24
% EndTime: 2019-05-05 14:48:55
% DurationCPUTime: 32.81s
% Computational Cost: add. (77990->730), mult. (175184->1050), div. (0->0), fcn. (125591->10), ass. (0->513)
t881 = sin(pkin(10));
t883 = cos(pkin(10));
t887 = sin(qJ(4));
t890 = cos(qJ(4));
t905 = t881 * t890 + t883 * t887;
t841 = t905 * qJD(1);
t886 = sin(qJ(5));
t889 = cos(qJ(5));
t819 = qJD(4) * t886 + t841 * t889;
t940 = qJD(1) * t883;
t947 = t881 * t887;
t839 = qJD(1) * t947 - t890 * t940;
t937 = t839 * qJD(4);
t996 = t905 * qJDD(1);
t792 = t996 - t937;
t918 = -t889 * qJDD(4) + t886 * t792;
t833 = qJD(5) + t839;
t933 = qJD(5) + t833;
t692 = t819 * t933 + t918;
t817 = -t889 * qJD(4) + t841 * t886;
t904 = -t886 * qJDD(4) - t889 * t792;
t898 = qJD(5) * t817 + t904;
t952 = t817 * t833;
t999 = -t952 - t898;
t969 = t999 * t886;
t599 = -t692 * t889 - t969;
t816 = t819 ^ 2;
t986 = t817 ^ 2;
t761 = t816 - t986;
t571 = t599 * t887 - t761 * t890;
t573 = t599 * t890 + t761 * t887;
t505 = t571 * t881 - t573 * t883;
t593 = -t692 * t886 + t889 * t999;
t882 = sin(pkin(9));
t884 = cos(pkin(9));
t472 = t505 * t882 + t593 * t884;
t474 = t505 * t884 - t593 * t882;
t888 = sin(qJ(1));
t891 = cos(qJ(1));
t1110 = t472 * t891 + t888 * t474;
t1109 = t888 * t472 - t474 * t891;
t985 = t833 ^ 2;
t769 = t986 - t985;
t765 = t819 * t817;
t931 = qJDD(1) * t883;
t837 = qJDD(1) * t947 - t890 * t931;
t936 = t841 * qJD(4);
t790 = -t837 - t936;
t781 = qJDD(5) - t790;
t1002 = t765 + t781;
t966 = t1002 * t886;
t664 = t769 * t889 - t966;
t693 = (qJD(5) - t833) * t819 + t918;
t587 = t664 * t887 + t693 * t890;
t591 = t664 * t890 - t693 * t887;
t523 = t587 * t881 - t591 * t883;
t965 = t1002 * t889;
t659 = t769 * t886 + t965;
t491 = t523 * t882 + t659 * t884;
t495 = t523 * t884 - t659 * t882;
t1108 = t491 * t891 + t888 * t495;
t1107 = t888 * t491 - t495 * t891;
t998 = -t952 + t898;
t1042 = -t693 * t886 + t998 * t889;
t1001 = t816 + t986;
t1041 = -t693 * t889 - t998 * t886;
t1063 = -t1001 * t887 + t1041 * t890;
t1064 = t1001 * t890 + t1041 * t887;
t1073 = t1063 * t883 - t1064 * t881;
t1092 = t1042 * t882 + t1073 * t884;
t1093 = -t1042 * t884 + t1073 * t882;
t1098 = t1092 * t888 + t1093 * t891;
t1106 = pkin(6) * t1098;
t1099 = t1092 * t891 - t1093 * t888;
t1105 = pkin(6) * t1099;
t1104 = qJ(2) * t1093;
t1103 = pkin(1) * t1093 - pkin(2) * t1042 + qJ(3) * t1073;
t1072 = t1063 * t881 + t1064 * t883;
t1102 = -pkin(1) * t1072 + qJ(2) * t1092;
t1101 = t571 * t883 + t573 * t881;
t1100 = t587 * t883 + t591 * t881;
t1096 = qJ(3) * t1072;
t1095 = -pkin(2) * t1072 - pkin(3) * t1064 - pkin(4) * t1001 - pkin(8) * t1041;
t770 = -t816 + t985;
t1003 = -t765 + t781;
t964 = t1003 * t886;
t1025 = -t770 * t889 - t964;
t963 = t1003 * t889;
t1024 = -t770 * t886 + t963;
t1035 = t1024 * t890 - t887 * t998;
t1036 = t1024 * t887 + t890 * t998;
t1062 = t1035 * t883 - t1036 * t881;
t1074 = -t1025 * t882 + t1062 * t884;
t1075 = t1025 * t884 + t1062 * t882;
t1091 = t1074 * t891 - t1075 * t888;
t1090 = t1074 * t888 + t1075 * t891;
t735 = t985 + t816;
t633 = t735 * t889 + t966;
t1089 = pkin(2) * t633;
t1088 = pkin(3) * t633;
t1087 = pkin(4) * t633;
t1086 = pkin(8) * t633;
t649 = t735 * t886 - t965;
t1085 = pkin(8) * t649;
t1084 = pkin(7) * t1063;
t1083 = pkin(7) * t1064;
t1082 = t633 * t882;
t1081 = t633 * t884;
t1080 = t649 * t887;
t1079 = t649 * t890;
t1070 = pkin(8) * t1042;
t1061 = t1035 * t881 + t1036 * t883;
t733 = -qJD(5) * t819 - t918;
t949 = t833 * t889;
t926 = t817 * t949;
t902 = -t733 * t886 + t926;
t929 = t887 * t765;
t991 = t890 * t902 - t929;
t928 = t890 * t765;
t992 = t887 * t902 + t928;
t1012 = -t881 * t992 + t883 * t991;
t950 = t833 * t886;
t927 = t817 * t950;
t901 = -t733 * t889 - t927;
t1037 = t1012 * t884 - t882 * t901;
t1039 = t1012 * t882 + t884 * t901;
t1060 = t1037 * t891 - t1039 * t888;
t1059 = t1037 * t888 + t1039 * t891;
t766 = t819 * t950;
t911 = t766 - t926;
t990 = t781 * t887 + t890 * t911;
t993 = -t890 * t781 + t887 * t911;
t1014 = -t881 * t993 + t883 * t990;
t767 = t819 * t949;
t910 = t767 + t927;
t1038 = t1014 * t884 - t882 * t910;
t1040 = t1014 * t882 + t884 * t910;
t1058 = t1038 * t891 - t1040 * t888;
t1057 = t1038 * t888 + t1040 * t891;
t997 = -t985 - t986;
t1018 = t886 * t997 + t963;
t1056 = pkin(2) * t1018;
t1055 = pkin(3) * t1018;
t1054 = pkin(4) * t1018;
t1017 = t889 * t997 - t964;
t1053 = pkin(8) * t1017;
t1052 = pkin(8) * t1018;
t1049 = t1017 * t887;
t1048 = t1017 * t890;
t1047 = t1018 * t882;
t1046 = t1018 * t884;
t859 = g(1) * t891 + t888 * g(2);
t984 = qJD(1) ^ 2;
t848 = -pkin(1) * t984 - t859;
t858 = g(1) * t888 - t891 * g(2);
t903 = qJDD(1) * pkin(1) + t858;
t795 = t882 * t848 - t884 * t903;
t945 = t884 * t848;
t796 = t882 * t903 + t945;
t919 = t795 * t882 + t884 * t796;
t728 = t795 * t884 - t796 * t882;
t944 = t888 * t728;
t652 = t891 * t919 + t944;
t962 = t728 * t891;
t651 = t888 * t919 - t962;
t932 = qJDD(1) * t882;
t851 = t884 * t984 + t932;
t930 = qJDD(1) * t884;
t935 = t882 * t984;
t852 = t930 - t935;
t801 = -t888 * t851 + t891 * t852;
t878 = g(3) - qJDD(2);
t825 = qJ(2) * t851 - t878 * t884;
t908 = -qJ(2) * t852 - t878 * t882;
t1043 = -pkin(6) * t801 + t888 * t825 + t891 * t908;
t690 = t886 * t898 - t767;
t691 = -t889 * t898 - t766;
t912 = t890 * t691 + t929;
t913 = t887 * t691 - t928;
t988 = -t881 * t913 + t883 * t912;
t1019 = -t690 * t882 + t884 * t988;
t1021 = t884 * t690 + t882 * t988;
t1034 = t1019 * t891 - t1021 * t888;
t1033 = t1019 * t888 + t1021 * t891;
t1032 = 2 * qJD(6);
t1030 = qJ(6) * t999;
t794 = t841 * t839;
t995 = qJDD(4) - t794;
t1029 = t887 * t995;
t1027 = t890 * t995;
t876 = t883 ^ 2;
t870 = t876 * t984;
t875 = t881 ^ 2;
t939 = t984 * t875;
t854 = t870 + t939;
t1000 = t891 * t851 + t888 * t852;
t1020 = pkin(6) * t1000 + t825 * t891 - t888 * t908;
t994 = t984 * (t875 + t876);
t846 = t883 * t994;
t808 = -t846 * t882 + t883 * t930;
t810 = t846 * t884 + t882 * t931;
t748 = t808 * t891 - t888 * t810;
t1015 = t888 * t808 + t810 * t891;
t1013 = t881 * t990 + t883 * t993;
t1011 = t881 * t991 + t883 * t992;
t895 = qJDD(1) * qJ(3) + t796;
t982 = 2 * qJD(3);
t758 = t883 * (-pkin(2) * t984 + t895) - t881 * t878 + t940 * t982;
t736 = -pkin(3) * t870 + pkin(7) * t931 + t758;
t946 = t883 * t878;
t894 = -t946 + (-t945 - t882 * t858 + (-pkin(1) * t882 - pkin(7) - qJ(3)) * qJDD(1) + (-(2 * qJD(3)) + (pkin(3) * t883 + pkin(2)) * qJD(1)) * qJD(1)) * t881;
t655 = t890 * t736 + t887 * t894;
t782 = pkin(4) * t839 - pkin(8) * t841;
t983 = qJD(4) ^ 2;
t608 = -pkin(4) * t983 + qJDD(4) * pkin(8) - t782 * t839 + t655;
t880 = qJDD(1) * pkin(2);
t778 = -t984 * qJ(3) + qJDD(3) + t795 - t880;
t756 = -pkin(3) * t931 - pkin(7) * t854 + t778;
t626 = (-t792 + t937) * pkin(8) + (-t790 + t936) * pkin(4) + t756;
t546 = t889 * t608 + t886 * t626;
t759 = pkin(5) * t817 - qJ(6) * t819;
t909 = t781 * qJ(6) + t1032 * t833 - t817 * t759 + t546;
t987 = t881 * t912 + t883 * t913;
t835 = t839 ^ 2;
t836 = t841 ^ 2;
t981 = pkin(4) * t887;
t980 = pkin(5) * t889;
t979 = qJ(6) * t889;
t654 = t887 * t736 - t890 * t894;
t568 = -t654 * t890 + t655 * t887;
t978 = t568 * t881;
t977 = t568 * t883;
t607 = -qJDD(4) * pkin(4) - t983 * pkin(8) + t841 * t782 + t654;
t976 = t607 * t886;
t975 = t607 * t889;
t961 = t756 * t887;
t960 = t756 * t890;
t957 = t778 * t882;
t956 = t778 * t884;
t787 = qJDD(4) + t794;
t954 = t787 * t887;
t953 = t787 * t890;
t951 = t833 * t819;
t948 = t881 * t883;
t545 = t886 * t608 - t889 * t626;
t941 = t1001 - t985;
t925 = t882 * t794;
t924 = t884 * t794;
t923 = -pkin(4) * t890 - pkin(3);
t922 = t881 * t931;
t921 = qJ(6) * t886 + pkin(4);
t920 = -t778 + t880;
t569 = t654 * t887 + t890 * t655;
t757 = t946 + ((-pkin(2) * qJD(1) + t982) * qJD(1) + t895) * t881;
t685 = t757 * t881 + t883 * t758;
t813 = -t858 * t888 - t891 * t859;
t915 = t819 * t759 + qJDD(6) + t545;
t857 = qJDD(1) * t891 - t888 * t984;
t914 = -pkin(6) * t857 - g(3) * t888;
t477 = -t545 * t889 + t546 * t886;
t478 = t545 * t886 + t546 * t889;
t684 = t757 * t883 - t758 * t881;
t820 = t851 * t948;
t821 = t884 * t922 - t935 * t948;
t907 = t820 * t891 + t888 * t821;
t906 = t888 * t820 - t821 * t891;
t812 = t858 * t891 - t888 * t859;
t900 = -t781 * pkin(5) + t915;
t897 = -t733 * pkin(5) - t1030 + t607;
t896 = t1032 * t819 - t897;
t868 = t876 * qJDD(1);
t867 = t875 * qJDD(1);
t856 = t888 * qJDD(1) + t891 * t984;
t855 = t870 - t939;
t850 = t868 - t867;
t849 = t868 + t867;
t845 = t881 * t994;
t834 = -pkin(6) * t856 + g(3) * t891;
t829 = -t836 - t983;
t828 = -t836 + t983;
t827 = t835 - t983;
t809 = t845 * t884 + t881 * t932;
t806 = t845 * t882 - t881 * t930;
t800 = t850 * t884 - t855 * t882;
t799 = t849 * t884 - t854 * t882;
t798 = t850 * t882 + t855 * t884;
t797 = t849 * t882 + t854 * t884;
t793 = t835 - t836;
t791 = t996 - 0.2e1 * t937;
t789 = t837 + 0.2e1 * t936;
t784 = -t983 - t835;
t777 = (-t839 * t890 + t841 * t887) * qJD(4);
t776 = (-t839 * t887 - t841 * t890) * qJD(4);
t763 = -t835 - t836;
t755 = t792 * t890 - t887 * t936;
t754 = t792 * t887 + t890 * t936;
t753 = -t790 * t887 + t890 * t937;
t752 = t790 * t890 + t887 * t937;
t749 = -t888 * t806 + t809 * t891;
t747 = t806 * t891 + t888 * t809;
t744 = -t829 * t887 - t953;
t743 = -t828 * t887 + t1027;
t742 = t827 * t890 - t954;
t741 = t829 * t890 - t954;
t740 = t828 * t890 + t1029;
t739 = t827 * t887 + t953;
t738 = -t888 * t797 + t799 * t891;
t737 = t797 * t891 + t888 * t799;
t721 = -t789 * t890 - t791 * t887;
t720 = -t837 * t890 + t887 * t996;
t719 = -t789 * t887 + t791 * t890;
t718 = -t837 * t887 - t890 * t996;
t717 = t784 * t890 - t1029;
t716 = t784 * t887 + t1027;
t713 = pkin(1) * t878 + qJ(2) * t919;
t703 = -t776 * t881 + t777 * t883;
t702 = qJDD(4) * t882 + t703 * t884;
t701 = -qJDD(4) * t884 + t703 * t882;
t700 = t817 * t933 + t904;
t694 = -t733 + t951;
t679 = -pkin(7) * t741 + t960;
t678 = -t754 * t881 + t755 * t883;
t677 = -t752 * t881 + t753 * t883;
t676 = -t741 * t881 + t744 * t883;
t675 = -t740 * t881 + t743 * t883;
t674 = -t739 * t881 + t742 * t883;
t673 = t741 * t883 + t744 * t881;
t668 = -qJ(2) * t806 - t758 * t882 + t883 * t956;
t667 = -qJ(2) * t808 - t757 * t882 + t881 * t956;
t666 = qJ(2) * t809 + t758 * t884 + t883 * t957;
t665 = -qJ(2) * t810 + t757 * t884 + t881 * t957;
t656 = -pkin(7) * t716 + t961;
t646 = t675 * t884 + t882 * t996;
t645 = t674 * t884 - t837 * t882;
t644 = t675 * t882 - t884 * t996;
t643 = t674 * t882 + t837 * t884;
t642 = -qJ(2) * t797 + t684 * t884;
t641 = qJ(2) * t799 + t684 * t882;
t640 = -t719 * t881 + t721 * t883;
t639 = -t718 * t881 + t720 * t883;
t638 = t718 * t883 + t720 * t881;
t637 = -pkin(3) * t791 + pkin(7) * t744 + t961;
t632 = -t716 * t881 + t717 * t883;
t631 = t716 * t883 + t717 * t881;
t630 = t678 * t884 + t925;
t629 = t677 * t884 - t925;
t628 = t678 * t882 - t924;
t627 = t677 * t882 + t924;
t625 = t685 * t884 + t957;
t624 = t685 * t882 - t956;
t621 = t676 * t884 + t791 * t882;
t620 = t676 * t882 - t791 * t884;
t611 = -pkin(3) * t789 + pkin(7) * t717 - t960;
t610 = t640 * t884 - t793 * t882;
t609 = t640 * t882 + t793 * t884;
t606 = t632 * t884 + t789 * t882;
t605 = t632 * t882 - t789 * t884;
t602 = t639 * t884 + t763 * t882;
t601 = t639 * t882 - t763 * t884;
t592 = -pkin(2) * t638 - pkin(3) * t718;
t583 = t694 * t887 + t1048;
t582 = -t700 * t887 + t1079;
t581 = -t694 * t890 + t1049;
t580 = t700 * t890 + t1080;
t577 = t692 * t887 + t1048;
t576 = -t887 * t999 - t1079;
t575 = -t692 * t890 + t1049;
t574 = t890 * t999 - t1080;
t563 = -pkin(2) * t673 - pkin(3) * t741 + t655;
t562 = -t888 * t624 + t625 * t891;
t561 = t624 * t891 + t888 * t625;
t560 = -t888 * t620 + t621 * t891;
t559 = t620 * t891 + t888 * t621;
t554 = -pkin(3) * t756 + pkin(7) * t569;
t553 = t975 + t1086;
t552 = t976 - t1052;
t547 = -pkin(7) * t718 - t568;
t544 = -pkin(2) * t631 - pkin(3) * t716 + t654;
t543 = -t888 * t605 + t606 * t891;
t542 = t605 * t891 + t888 * t606;
t541 = -qJ(2) * t624 - (pkin(2) * t882 - qJ(3) * t884) * t684;
t540 = -qJ(3) * t673 - t637 * t881 + t679 * t883;
t539 = -pkin(3) * t763 + pkin(7) * t720 + t569;
t538 = -t888 * t601 + t602 * t891;
t537 = t601 * t891 + t888 * t602;
t536 = (pkin(5) * t833 - (2 * qJD(6))) * t819 + t897;
t535 = -pkin(4) * t1042 - pkin(5) * t998 + qJ(6) * t693;
t526 = -qJ(3) * t631 - t611 * t881 + t656 * t883;
t525 = qJ(6) * t985 - t900;
t520 = -pkin(5) * t985 + t909;
t519 = t546 + t1087;
t518 = qJ(2) * t625 - (-pkin(2) * t884 - qJ(3) * t882 - pkin(1)) * t684;
t517 = t545 - t1054;
t516 = -t581 * t881 + t583 * t883;
t515 = -t580 * t881 + t582 * t883;
t514 = t581 * t883 + t583 * t881;
t513 = t580 * t883 + t582 * t881;
t512 = -t575 * t881 + t577 * t883;
t511 = -t574 * t881 + t576 * t883;
t510 = t575 * t883 + t577 * t881;
t509 = t574 * t883 + t576 * t881;
t508 = (-t694 - t951) * pkin(5) + t896;
t507 = -pkin(5) * t951 + t1030 + t896;
t504 = qJ(6) * t941 + t900;
t503 = t569 * t883 - t978;
t502 = t569 * t881 + t977;
t501 = pkin(5) * t941 + t909;
t488 = t503 * t884 + t756 * t882;
t487 = t503 * t882 - t756 * t884;
t486 = t516 * t884 + t1047;
t485 = t515 * t884 - t1082;
t484 = t516 * t882 - t1046;
t483 = t515 * t882 + t1081;
t482 = t512 * t884 + t1047;
t481 = t511 * t884 + t1082;
t480 = t512 * t882 - t1046;
t479 = t511 * t882 - t1081;
t476 = -t1054 + (-t997 - t985) * qJ(6) + (-t1003 - t781) * pkin(5) + t915;
t471 = -t508 * t886 - t694 * t979 - t1052;
t470 = -t1087 - qJ(6) * t1002 + (-t735 + t985) * pkin(5) - t909;
t469 = -pkin(5) * t969 + t507 * t889 - t1086;
t464 = -pkin(2) * t502 - pkin(3) * t568;
t463 = -qJ(2) * t620 + t540 * t884 - t563 * t882;
t462 = -qJ(3) * t638 - t539 * t881 + t547 * t883;
t461 = t478 * t890 + t607 * t887;
t460 = t478 * t887 - t607 * t890;
t459 = -t477 - t1070;
t458 = t520 * t889 - t525 * t886;
t457 = t520 * t886 + t525 * t889;
t456 = -pkin(1) * t673 + qJ(2) * t621 + t540 * t882 + t563 * t884;
t455 = -qJ(2) * t605 + t526 * t884 - t544 * t882;
t454 = -pkin(7) * t580 - t519 * t887 + t553 * t890;
t453 = -pkin(7) * t575 - t517 * t887 + t552 * t890;
t452 = -pkin(1) * t631 + qJ(2) * t606 + t526 * t882 + t544 * t884;
t451 = -pkin(7) * t977 - qJ(3) * t502 - t554 * t881;
t450 = -pkin(2) * t513 - pkin(3) * t580 - pkin(4) * t700 - t1085 - t976;
t449 = pkin(7) * t582 + t519 * t890 + t553 * t887 + t1088;
t448 = -pkin(2) * t510 - pkin(3) * t575 + pkin(4) * t692 - t1053 + t975;
t447 = -t888 * t487 + t488 * t891;
t446 = t487 * t891 + t888 * t488;
t445 = pkin(7) * t577 + t517 * t890 + t552 * t887 - t1055;
t444 = -qJ(2) * t601 + t462 * t884 - t592 * t882;
t443 = -t888 * t484 + t486 * t891;
t442 = -t888 * t483 + t485 * t891;
t441 = t484 * t891 + t888 * t486;
t440 = t483 * t891 + t888 * t485;
t439 = -t501 * t886 + t504 * t889 - t1070;
t438 = -t888 * t480 + t482 * t891;
t437 = -t888 * t479 + t481 * t891;
t436 = t480 * t891 + t888 * t482;
t435 = t479 * t891 + t888 * t481;
t434 = t458 * t890 + t536 * t887;
t433 = t458 * t887 - t536 * t890;
t432 = t1042 * t981 + t459 * t890 - t1083;
t431 = -pkin(1) * t638 + qJ(2) * t602 + t462 * t882 + t592 * t884;
t426 = t1042 * t923 + t887 * t459 + t1084;
t425 = -pkin(2) * t514 - pkin(3) * t581 - t889 * t508 + t694 * t921 - t1053;
t424 = -pkin(2) * t509 - pkin(3) * t574 + t1085 - t886 * t507 + (-pkin(4) - t980) * t999;
t423 = -pkin(7) * t581 + t471 * t890 - t476 * t887;
t422 = -t460 * t881 + t461 * t883;
t421 = t460 * t883 + t461 * t881;
t420 = -pkin(8) * t457 + (pkin(5) * t886 - t979) * t536;
t419 = -pkin(7) * t574 + t469 * t890 - t470 * t887;
t418 = t1095 - t478;
t417 = -pkin(4) * t457 - pkin(5) * t525 - qJ(6) * t520;
t416 = pkin(7) * t583 + t471 * t887 + t476 * t890 - t1055;
t415 = pkin(7) * t576 + t469 * t887 + t470 * t890 - t1088;
t414 = t439 * t890 - t535 * t887 - t1083;
t413 = -pkin(3) * t1042 + t439 * t887 + t535 * t890 + t1084;
t412 = -t501 * t889 - t504 * t886 + t1095;
t411 = -pkin(7) * t460 + (-pkin(8) * t890 + t981) * t477;
t410 = t422 * t884 + t477 * t882;
t409 = t422 * t882 - t477 * t884;
t408 = -qJ(2) * t487 + t451 * t884 - t464 * t882;
t407 = -t433 * t881 + t434 * t883;
t406 = t433 * t883 + t434 * t881;
t405 = -qJ(3) * t513 - t449 * t881 + t454 * t883;
t404 = -qJ(3) * t510 - t445 * t881 + t453 * t883;
t403 = pkin(7) * t461 + (-pkin(8) * t887 + t923) * t477;
t402 = -pkin(1) * t502 + qJ(2) * t488 + t451 * t882 + t464 * t884;
t401 = -pkin(2) * t421 - pkin(3) * t460 + pkin(4) * t607 - pkin(8) * t478;
t400 = -t426 * t881 + t432 * t883 - t1096;
t399 = t407 * t884 + t457 * t882;
t398 = t407 * t882 - t457 * t884;
t397 = -qJ(3) * t514 - t416 * t881 + t423 * t883;
t396 = -qJ(3) * t509 - t415 * t881 + t419 * t883;
t395 = -qJ(2) * t483 + t405 * t884 - t450 * t882;
t394 = -qJ(2) * t480 + t404 * t884 - t448 * t882;
t393 = -t413 * t881 + t414 * t883 - t1096;
t392 = -t888 * t409 + t410 * t891;
t391 = t409 * t891 + t888 * t410;
t390 = -pkin(7) * t433 - t417 * t887 + t420 * t890;
t389 = -pkin(1) * t513 + qJ(2) * t485 + t405 * t882 + t450 * t884;
t388 = -pkin(1) * t510 + qJ(2) * t482 + t404 * t882 + t448 * t884;
t387 = -pkin(3) * t457 + pkin(7) * t434 + t417 * t890 + t420 * t887;
t386 = t400 * t884 - t418 * t882 - t1104;
t385 = -pkin(2) * t406 - pkin(3) * t433 - pkin(8) * t458 + (t921 + t980) * t536;
t384 = -qJ(2) * t484 + t397 * t884 - t425 * t882;
t383 = -qJ(2) * t479 + t396 * t884 - t424 * t882;
t382 = t400 * t882 + t418 * t884 + t1102;
t381 = -pkin(1) * t514 + qJ(2) * t486 + t397 * t882 + t425 * t884;
t380 = -qJ(3) * t421 - t403 * t881 + t411 * t883;
t379 = -pkin(1) * t509 + qJ(2) * t481 + t396 * t882 + t424 * t884;
t378 = -t888 * t398 + t399 * t891;
t377 = t398 * t891 + t888 * t399;
t376 = t393 * t884 - t412 * t882 - t1104;
t375 = t393 * t882 + t412 * t884 + t1102;
t374 = -qJ(2) * t409 + t380 * t884 - t401 * t882;
t373 = -qJ(3) * t406 - t387 * t881 + t390 * t883;
t372 = -pkin(1) * t421 + qJ(2) * t410 + t380 * t882 + t401 * t884;
t371 = -qJ(2) * t398 + t373 * t884 - t385 * t882;
t370 = -pkin(1) * t406 + qJ(2) * t399 + t373 * t882 + t385 * t884;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t856, -t857, 0, t813, 0, 0, 0, 0, 0, 0, -t1000, -t801, 0, t652, 0, 0, 0, 0, 0, 0, -t1015, t749, t738, t562, 0, 0, 0, 0, 0, 0, t543, t560, t538, t447, 0, 0, 0, 0, 0, 0, t438, t442, t1099, t392, 0, 0, 0, 0, 0, 0, t443, t1099, t437, t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t857, -t856, 0, t812, 0, 0, 0, 0, 0, 0, t801, -t1000, 0, t651, 0, 0, 0, 0, 0, 0, t748, t747, t737, t561, 0, 0, 0, 0, 0, 0, t542, t559, t537, t446, 0, 0, 0, 0, 0, 0, t436, t440, t1098, t391, 0, 0, 0, 0, 0, 0, t441, t1098, t435, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t878, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t684, 0, 0, 0, 0, 0, 0, t631, t673, t638, t502, 0, 0, 0, 0, 0, 0, t510, t513, t1072, t421, 0, 0, 0, 0, 0, 0, t514, t1072, t509, t406; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t857, 0, -t856, 0, t914, -t834, -t812, -pkin(6) * t812, 0, 0, t801, 0, -t1000, 0, t1043, t1020, -t651, -pkin(6) * t651 + qJ(2) * t962 - t888 * t713, -t906, -t888 * t798 + t800 * t891, t749, t906, t1015, 0, -pkin(6) * t748 - t888 * t665 + t667 * t891, -pkin(6) * t747 - t888 * t666 + t668 * t891, -pkin(6) * t737 - t888 * t641 + t642 * t891, -pkin(6) * t561 - t888 * t518 + t541 * t891, -t888 * t628 + t630 * t891, -t888 * t609 + t610 * t891, -t888 * t644 + t646 * t891, -t888 * t627 + t629 * t891, -t888 * t643 + t645 * t891, -t888 * t701 + t702 * t891, -pkin(6) * t542 - t888 * t452 + t455 * t891, -pkin(6) * t559 - t888 * t456 + t463 * t891, -pkin(6) * t537 - t888 * t431 + t444 * t891, -pkin(6) * t446 - t888 * t402 + t408 * t891, t1034, t1109, t1091, t1060, t1107, t1058, -pkin(6) * t436 - t888 * t388 + t394 * t891, -pkin(6) * t440 - t888 * t389 + t395 * t891, -t888 * t382 + t386 * t891 - t1106, -pkin(6) * t391 - t888 * t372 + t374 * t891, t1034, t1091, -t1109, t1058, -t1107, t1060, -pkin(6) * t441 - t888 * t381 + t384 * t891, -t888 * t375 + t376 * t891 - t1106, -pkin(6) * t435 - t888 * t379 + t383 * t891, -pkin(6) * t377 - t888 * t370 + t371 * t891; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t856, 0, t857, 0, t834, t914, t813, pkin(6) * t813, 0, 0, t1000, 0, t801, 0, -t1020, t1043, t652, pkin(6) * t652 + qJ(2) * t944 + t713 * t891, t907, t798 * t891 + t888 * t800, t747, -t907, -t748, 0, -pkin(6) * t1015 + t665 * t891 + t888 * t667, pkin(6) * t749 + t666 * t891 + t888 * t668, pkin(6) * t738 + t641 * t891 + t888 * t642, pkin(6) * t562 + t518 * t891 + t888 * t541, t628 * t891 + t888 * t630, t609 * t891 + t888 * t610, t644 * t891 + t888 * t646, t627 * t891 + t888 * t629, t643 * t891 + t888 * t645, t701 * t891 + t888 * t702, pkin(6) * t543 + t452 * t891 + t888 * t455, pkin(6) * t560 + t456 * t891 + t888 * t463, pkin(6) * t538 + t431 * t891 + t888 * t444, pkin(6) * t447 + t402 * t891 + t888 * t408, t1033, -t1110, t1090, t1059, -t1108, t1057, pkin(6) * t438 + t388 * t891 + t888 * t394, pkin(6) * t442 + t389 * t891 + t888 * t395, t382 * t891 + t888 * t386 + t1105, pkin(6) * t392 + t372 * t891 + t888 * t374, t1033, t1090, t1110, t1057, t1108, t1059, pkin(6) * t443 + t381 * t891 + t888 * t384, t375 * t891 + t888 * t376 + t1105, pkin(6) * t437 + t379 * t891 + t888 * t383, pkin(6) * t378 + t370 * t891 + t888 * t371; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t858, t859, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t852 - t795, -pkin(1) * t851 - t796, 0, -pkin(1) * t728, t867, 0.2e1 * t922, 0, t868, 0, 0, pkin(1) * t808 - qJ(3) * t846 + t883 * t920, pkin(1) * t806 + qJ(3) * t845 - t881 * t920, pkin(1) * t797 + pkin(2) * t854 + qJ(3) * t849 + t685, pkin(1) * t624 - pkin(2) * t778 + qJ(3) * t685, t754 * t883 + t755 * t881, t719 * t883 + t721 * t881, t740 * t883 + t743 * t881, t752 * t883 + t753 * t881, t739 * t883 + t742 * t881, t776 * t883 + t777 * t881, pkin(1) * t605 - pkin(2) * t789 + qJ(3) * t632 + t611 * t883 + t656 * t881, pkin(1) * t620 - pkin(2) * t791 + qJ(3) * t676 + t637 * t883 + t679 * t881, pkin(1) * t601 - pkin(2) * t763 + qJ(3) * t639 + t539 * t883 + t547 * t881, pkin(1) * t487 - pkin(2) * t756 - pkin(7) * t978 + qJ(3) * t503 + t554 * t883, t987, t1101, t1061, t1011, t1100, t1013, pkin(1) * t480 + qJ(3) * t512 + t445 * t883 + t453 * t881 - t1056, pkin(1) * t483 + qJ(3) * t515 + t449 * t883 + t454 * t881 + t1089, t426 * t883 + t432 * t881 + t1103, pkin(1) * t409 - pkin(2) * t477 + qJ(3) * t422 + t403 * t883 + t411 * t881, t987, t1061, -t1101, t1013, -t1100, t1011, pkin(1) * t484 + qJ(3) * t516 + t416 * t883 + t423 * t881 - t1056, t413 * t883 + t414 * t881 + t1103, pkin(1) * t479 + qJ(3) * t511 + t415 * t883 + t419 * t881 - t1089, pkin(1) * t398 - pkin(2) * t457 + qJ(3) * t407 + t387 * t883 + t390 * t881;];
tauB_reg  = t1;
