% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPP3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPP3_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:36:58
% EndTime: 2019-03-09 04:37:06
% DurationCPUTime: 2.61s
% Computational Cost: add. (1459->255), mult. (3350->395), div. (0->0), fcn. (2441->6), ass. (0->146)
t94 = cos(qJ(3));
t149 = t94 * qJD(3);
t93 = cos(qJ(4));
t83 = qJD(4) * t93;
t91 = sin(qJ(4));
t92 = sin(qJ(3));
t36 = t149 * t91 + t83 * t92;
t85 = t91 ^ 2;
t139 = t85 * t149;
t87 = t93 ^ 2;
t70 = t87 * t149;
t33 = t70 + t139;
t90 = -pkin(4) - qJ(6);
t177 = t90 * t92;
t176 = t36 * pkin(4);
t160 = t85 - t87;
t157 = t91 * qJ(5);
t114 = -pkin(4) * t93 - t157;
t81 = qJD(5) * t93;
t175 = qJD(4) * t114 + t81;
t109 = t90 * t93 - t157;
t52 = t160 * qJD(4);
t171 = pkin(8) * t94;
t118 = pkin(3) * t92 - t171;
t105 = t118 * qJD(3);
t172 = pkin(8) * t92;
t119 = -pkin(3) * t94 - t172;
t76 = -cos(pkin(9)) * pkin(1) - pkin(2);
t41 = t119 + t76;
t163 = t105 * t91 + t41 * t83;
t153 = qJD(4) * t94;
t134 = t91 * t153;
t80 = t92 * qJD(3);
t35 = t80 * t93 + t134;
t75 = sin(pkin(9)) * pkin(1) + pkin(7);
t6 = t35 * t75 - t163;
t51 = -pkin(3) + t114;
t147 = qJ(5) * qJD(4);
t126 = t92 * t147;
t127 = qJ(5) * t149;
t142 = -t126 * t91 + t127 * t93 + t81 * t92;
t120 = t142 - t176;
t49 = t75 * t149;
t8 = t49 - t120;
t174 = qJD(4) * (t51 * t92 + t171) - t8;
t86 = t92 ^ 2;
t159 = -t94 ^ 2 + t86;
t124 = t159 * qJD(3);
t132 = t93 * t153;
t20 = -0.2e1 * t124 * t91 + 0.2e1 * t132 * t92;
t173 = pkin(5) + pkin(8);
t152 = qJD(6) * t91;
t103 = -t152 * t92 + t142;
t3 = qJ(6) * t36 - t103 + t176 + t49;
t170 = t3 * t91;
t169 = t3 * t93;
t167 = t91 * t92;
t166 = t91 * t94;
t165 = t92 * t93;
t164 = t93 * t94;
t46 = t75 * t164;
t15 = t41 * t91 + t46;
t162 = pkin(4) * t167 + t75 * t92;
t161 = t33 * pkin(8);
t158 = qJ(5) * t93;
t156 = qJD(3) * t91;
t155 = qJD(3) * t93;
t82 = qJD(4) * t91;
t154 = qJD(4) * t92;
t151 = qJD(6) * t94;
t150 = t91 * qJD(5);
t148 = t94 * qJD(5);
t146 = qJ(5) * qJD(5);
t145 = pkin(5) * t164;
t144 = -0.2e1 * pkin(3) * qJD(4);
t45 = t75 * t166;
t143 = 0.2e1 * t80;
t141 = pkin(4) * t80;
t140 = pkin(8) * t82;
t40 = -pkin(3) + t109;
t137 = t40 * t83;
t136 = t75 * t82;
t135 = t91 * t154;
t131 = t91 * t83;
t130 = t92 * t149;
t129 = t75 * t80;
t128 = t93 * t149;
t14 = t41 * t93 - t45;
t125 = t75 * t93 - qJ(5);
t123 = -t105 * t93 - t129 * t91 + t132 * t75 + t41 * t82;
t122 = t86 * t131;
t121 = t91 * t128;
t11 = qJ(5) * t94 - t15;
t10 = -pkin(5) * t167 - t11;
t84 = t94 * pkin(4);
t9 = t94 * qJ(6) + t45 + t84 + (pkin(5) * t92 - t41) * t93;
t116 = t10 * t93 + t9 * t91;
t115 = -t10 * t91 + t9 * t93;
t12 = -t14 + t84;
t113 = t11 * t93 - t12 * t91;
t112 = t11 * t91 + t12 * t93;
t111 = -t14 * t93 - t15 * t91;
t110 = t14 * t91 - t15 * t93;
t108 = qJ(6) * t91 - t158;
t107 = -t93 * qJD(6) - t150;
t77 = pkin(4) * t82;
t21 = qJD(4) * t108 + t107 + t77;
t106 = -t21 * t93 + t40 * t82;
t13 = t108 * t92 + t162;
t104 = -qJD(4) * t13 - t149 * t40;
t101 = -pkin(5) * t135 + t123;
t4 = (qJD(5) + t136) * t94 + t125 * t80 - t163;
t5 = t123 - t141;
t100 = qJD(4) * t112 - t4 * t93 + t5 * t91;
t99 = qJD(4) * t111 + t123 * t91 - t6 * t93;
t47 = t173 * t82;
t78 = pkin(8) * t83;
t48 = pkin(5) * t83 + t78;
t57 = t173 * t91;
t58 = t173 * t93;
t98 = -t47 * t93 + t48 * t91 + (t57 * t93 - t58 * t91) * qJD(4);
t26 = -t158 * t92 + t162;
t32 = -t147 * t93 - t150 + t77;
t97 = -qJD(4) * t26 - t32 * t92 + (-t51 * t94 + t172) * qJD(3);
t96 = qJ(5) * t143 - 0.2e1 * t148 - t6;
t95 = 0.2e1 * qJD(5);
t67 = -0.2e1 * t130;
t66 = -0.2e1 * t131;
t65 = 0.2e1 * t131;
t54 = t87 * t130;
t53 = t85 * t130;
t44 = -0.2e1 * t52;
t37 = -t80 * t91 + t132;
t34 = -t128 + t135;
t28 = 0.2e1 * t54 - 0.2e1 * t122;
t27 = 0.2e1 * t53 + 0.2e1 * t122;
t25 = t154 * t160 - t121;
t23 = t134 * t92 + t155 * t159;
t22 = 0.4e1 * t131 * t92 + t139 - t70;
t19 = 0.2e1 * t23;
t18 = -0.2e1 * t121 * t92 + t52 * t86;
t17 = 0.2e1 * t18;
t16 = 0.2e1 * t53 + 0.2e1 * t54 - 0.2e1 * t130;
t2 = -t148 + (-pkin(5) * t165 - t45) * qJD(4) + (-pkin(5) * t166 - t125 * t92) * qJD(3) + t163;
t1 = t151 + (t145 + t177) * qJD(3) + t101;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t130, -0.2e1 * t124, 0, t67, 0, 0, t76 * t143, 0.2e1 * t76 * t149, 0, 0, t28, t17, t19, t27, t20, t67, 0.2e1 * t86 * t75 * t83 + 0.2e1 * t123 * t94 + 0.2e1 * (t14 + 0.2e1 * t45) * t80, -0.2e1 * t86 * t136 - 0.2e1 * t6 * t94 + 0.2e1 * (-t15 + 0.2e1 * t46) * t80, 0.2e1 * t111 * t149 + 0.2e1 * (qJD(4) * t110 + t123 * t93 + t6 * t91) * t92, 0.2e1 * t130 * t75 ^ 2 - 0.2e1 * t123 * t14 - 0.2e1 * t15 * t6, t67, -0.2e1 * t23, -t20, t28, t17, t27, 0.2e1 * t112 * t149 + 0.2e1 * (qJD(4) * t113 + t4 * t91 + t5 * t93) * t92, 0.2e1 * (-t156 * t26 - t5) * t94 + 0.2e1 * (qJD(3) * t12 - t26 * t83 - t8 * t91) * t92, 0.2e1 * (-t155 * t26 + t4) * t94 + 0.2e1 * (-qJD(3) * t11 + t26 * t82 - t8 * t93) * t92, 0.2e1 * t11 * t4 + 0.2e1 * t12 * t5 + 0.2e1 * t26 * t8, t67, -t20, t19, t27, -0.2e1 * t18, t28, 0.2e1 * t115 * t149 + 0.2e1 * (-qJD(4) * t116 + t1 * t93 - t2 * t91) * t92, 0.2e1 * (-t13 * t155 - t2) * t94 + 0.2e1 * (qJD(3) * t10 + t13 * t82 - t169) * t92, 0.2e1 * (t13 * t156 + t1) * t94 + 0.2e1 * (-qJD(3) * t9 + t13 * t83 + t170) * t92, 0.2e1 * t1 * t9 + 0.2e1 * t10 * t2 + 0.2e1 * t13 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99 * t92 + (-t110 * t94 + t159 * t75) * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0 (-qJD(3) * t113 - t8) * t94 + (qJD(3) * t26 + t100) * t92, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(3) * t116 - t3) * t94 + (qJD(3) * t13 + qJD(4) * t115 + t1 * t91 + t2 * t93) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, 0, -t80, 0, -t49, t129, 0, 0, -t25, -t22, -t37, t25, t35, 0 (pkin(8) * t164 + (-pkin(3) * t93 + t75 * t91) * t92) * qJD(4) + (t119 * t91 - t46) * qJD(3) (t118 * t91 + t165 * t75) * qJD(4) + (t119 * t93 + t45) * qJD(3), t99, -pkin(3) * t49 + pkin(8) * t99, 0, t37, -t35, -t25, -t22, t25, t100, -t174 * t93 + t91 * t97, t174 * t91 + t93 * t97, pkin(8) * t100 + t26 * t32 + t8 * t51, 0, -t35, -t37, t25, t22, -t25 (t57 * t149 + t48 * t92 + t2 + (-t58 * t92 + t9) * qJD(4)) * t93 + (-t58 * t149 + t47 * t92 + t1 + (-t57 * t92 - t10) * qJD(4)) * t91, -t170 + t47 * t94 + t104 * t93 + (qJD(3) * t58 + t106) * t92, -t169 + t48 * t94 + (-qJD(3) * t57 + t137) * t92 + (t21 * t92 - t104) * t91, t1 * t57 - t10 * t47 + t13 * t21 + t2 * t58 + t3 * t40 + t48 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, -t149, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t37, t33, -pkin(3) * t80 + t161, 0, 0, 0, 0, 0, 0, t33, t35, t37, -t32 * t94 + t51 * t80 + t161, 0, 0, 0, 0, 0, 0, t33, t37, -t35 (-t21 + (t57 * t91 + t58 * t93) * qJD(3)) * t94 + (qJD(3) * t40 + t98) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t44, 0, t66, 0, 0, t91 * t144, t93 * t144, 0, 0, 0, 0, 0, t65, t44, t66, 0, 0.2e1 * t32 * t93 - 0.2e1 * t51 * t82, -0.2e1 * t32 * t91 - 0.2e1 * t51 * t83, 0.2e1 * t51 * t32, 0, 0, 0, t66, 0.2e1 * t52, t65, 0.2e1 * t98, -0.2e1 * t21 * t91 - 0.2e1 * t137, 0.2e1 * t106, 0.2e1 * t21 * t40 - 0.2e1 * t47 * t58 + 0.2e1 * t48 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, 0, -t36, t80, -t123, t6, 0, 0, t80, t34, t36, 0, 0, 0 (-pkin(4) * t149 - t126) * t93 + (-t127 + (pkin(4) * qJD(4) - qJD(5)) * t92) * t91, t123 - 0.2e1 * t141, t96, -pkin(4) * t5 - qJ(5) * t4 - qJD(5) * t11, t80, t36, -t34, 0, 0, 0, t109 * t149 + ((-t90 * t91 - t158) * qJD(4) + t107) * t92, -pkin(5) * t36 + t96, -0.2e1 * t151 + (-t145 - 0.2e1 * t177) * qJD(3) - t101, qJ(5) * t2 + qJD(5) * t10 - qJD(6) * t9 + t1 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t34, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t34, t120, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, t36 * t90 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, -t82, 0, -t78, t140, 0, 0, 0, -t83, t82, 0, 0, 0, t175, t78, -t140, t175 * pkin(8), 0, t82, t83, 0, 0, 0, qJD(4) * t109 - t152 + t81, -t47, -t48, -qJ(5) * t47 + qJD(5) * t58 - qJD(6) * t57 + t48 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0.2e1 * t146, 0, 0, 0, 0, 0, 0, 0, t95, 0.2e1 * qJD(6), -0.2e1 * qJD(6) * t90 + 0.2e1 * t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t80, 0, t5, 0, 0, 0, 0, 0, 0, -t34, 0, -t80, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, t78, 0, 0, 0, 0, 0, 0, t83, 0, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t80, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t82, 0, 0, -t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
