% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPP3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRPP3_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:37:06
% EndTime: 2019-03-09 04:37:18
% DurationCPUTime: 6.78s
% Computational Cost: add. (5147->576), mult. (10431->646), div. (0->0), fcn. (6548->10), ass. (0->274)
t197 = cos(qJ(3));
t322 = qJD(1) * t197;
t161 = -qJD(4) + t322;
t194 = sin(qJ(3));
t181 = t197 * qJDD(1);
t312 = qJD(1) * qJD(3);
t115 = t194 * t312 + qJDD(4) - t181;
t196 = cos(qJ(4));
t335 = t196 * t115;
t193 = sin(qJ(4));
t316 = qJD(4) * t194;
t293 = t193 * t316;
t313 = t196 * qJD(3);
t294 = t197 * t313;
t389 = t293 - t294;
t234 = t161 * t389 + t194 * t335;
t321 = qJD(3) * t193;
t323 = qJD(1) * t196;
t121 = t194 * t323 + t321;
t320 = qJD(3) * t194;
t286 = t197 * t312;
t310 = t194 * qJDD(1);
t386 = qJD(1) * t316 - qJDD(3);
t57 = -qJD(4) * t313 + (-t286 - t310) * t196 + t386 * t193;
t390 = -t121 * t320 - t197 * t57;
t396 = t234 + t390;
t344 = t161 * t121;
t324 = qJD(1) * t194;
t119 = t193 * t324 - t313;
t345 = t119 * t161;
t58 = ((qJD(4) + t322) * qJD(3) + t310) * t193 + t386 * t196;
t395 = (t58 - t344) * t193 + (t57 - t345) * t196;
t183 = t194 * pkin(8);
t185 = t197 * pkin(3);
t298 = -pkin(2) - t185;
t253 = t298 - t183;
t191 = cos(pkin(9));
t372 = pkin(1) * t191;
t227 = t253 - t372;
t216 = t227 * qJD(1);
t190 = sin(pkin(9));
t169 = pkin(1) * t190 + pkin(7);
t139 = t169 * qJD(1);
t137 = t169 * qJDD(1);
t391 = -qJD(2) * qJD(3) - t137;
t300 = -t194 * qJDD(2) + t197 * t391;
t51 = -t139 * t320 - t300;
t394 = -qJDD(3) * pkin(8) - qJD(4) * t216 - t51;
t33 = t58 + t344;
t362 = pkin(4) + qJ(6);
t287 = t362 * t115;
t315 = qJD(4) * t196;
t292 = t194 * t315;
t319 = qJD(3) * t197;
t296 = t193 * t319;
t229 = t292 + t296;
t388 = t119 * t320 - t197 * t58;
t187 = qJ(1) + pkin(9);
t176 = cos(t187);
t340 = t176 * t194;
t175 = sin(t187);
t342 = t175 * t194;
t387 = g(1) * t340 + g(2) * t342;
t314 = t194 * qJD(2);
t96 = t197 * t139 + t314;
t78 = qJD(3) * pkin(8) + t96;
t37 = t193 * t78 - t196 * t216;
t247 = t121 * pkin(5) + t37;
t331 = qJD(5) + t247;
t348 = pkin(1) * qJDD(1);
t113 = t119 ^ 2;
t114 = t121 ^ 2;
t288 = -t114 + t113;
t158 = t161 ^ 2;
t385 = -t114 - t158;
t105 = t115 * qJ(5);
t149 = qJD(5) * t161;
t384 = t149 - t105;
t317 = qJD(4) * t193;
t383 = -t193 * qJD(5) - t314 + (-t193 * t322 + t317) * pkin(4);
t382 = -t234 + t390;
t291 = t161 * t315;
t338 = t193 * t194;
t91 = t115 * t338;
t304 = -t161 * t296 - t194 * t291 + t91;
t381 = -t304 + t388;
t10 = t304 + t388;
t266 = g(1) * t176 + g(2) * t175;
t380 = -pkin(5) * t58 + qJDD(6);
t86 = t119 * t293;
t379 = -t196 * (t119 * t319 + t194 * t58) + t86;
t337 = t193 * t197;
t27 = (-t119 * t194 + t161 * t337) * qJD(1) - t161 * t317 - t335;
t334 = t196 * t197;
t28 = (-t121 * t194 + t161 * t334) * qJD(1) + t193 * t115 - t291;
t376 = 0.2e1 * t105;
t375 = pkin(5) + pkin(8);
t373 = t57 * pkin(5);
t371 = pkin(4) * t115;
t370 = pkin(8) * t115;
t369 = g(1) * t175;
t366 = g(2) * t176;
t365 = g(3) * t194;
t364 = g(3) * t197;
t363 = t119 * pkin(5);
t336 = t194 * t196;
t361 = -t119 * t294 - t58 * t336;
t254 = -qJ(5) * t196 + qJ(6) * t193;
t360 = t254 * qJD(4) - t196 * qJD(6) - (t254 * qJD(1) + t139) * t197 + t383;
t359 = qJ(5) * t58;
t38 = t193 * t216 + t196 * t78;
t30 = t161 * qJ(5) - t38;
t358 = t161 * t30;
t357 = t161 * t37;
t356 = t161 * t38;
t353 = t57 * t193;
t352 = -qJ(5) * t315 - (-qJ(5) * t323 + t139) * t197 + t383;
t170 = -pkin(2) - t372;
t326 = t185 + t183;
t107 = t170 - t326;
t267 = pkin(3) * t194 - pkin(8) * t197;
t128 = t267 * qJD(3);
t351 = t107 * t315 + t193 * t128;
t124 = t169 * t334;
t65 = t193 * t107 + t124;
t308 = pkin(5) * t337;
t125 = t267 * qJD(1);
t118 = t194 * t139;
t95 = t197 * qJD(2) - t118;
t56 = t193 * t125 + t196 * t95;
t350 = -t375 * t317 - (qJ(5) * t194 - t308) * qJD(1) - t56;
t143 = t375 * t196;
t307 = pkin(5) * t334;
t55 = t196 * t125 - t193 * t95;
t349 = qJD(4) * t143 - (-t362 * t194 + t307) * qJD(1) + t55;
t347 = t119 * qJ(5);
t346 = t119 * t121;
t343 = t169 * t193;
t341 = t175 * t197;
t339 = t176 * t197;
t333 = t197 * qJ(6);
t332 = -qJD(5) - t37;
t24 = t38 - t363;
t330 = -qJD(6) - t24;
t329 = t387 * t193;
t328 = t387 * t196;
t327 = pkin(4) * t338 - qJ(5) * t336;
t188 = t194 ^ 2;
t189 = t197 ^ 2;
t325 = t188 - t189;
t140 = qJD(1) * t170;
t318 = qJD(4) * t121;
t138 = qJDD(1) * t170;
t85 = t121 * t292;
t309 = t121 * t296 - t57 * t338 + t85;
t77 = -qJD(3) * pkin(3) - t95;
t223 = -t121 * qJ(5) + t77;
t22 = t362 * t119 + t223;
t303 = t22 * t317;
t302 = t22 * t315;
t123 = t169 * t337;
t200 = qJD(1) ^ 2;
t301 = t194 * t200 * t197;
t198 = cos(qJ(1));
t299 = t198 * pkin(1) + t176 * pkin(2) + t175 * pkin(7);
t52 = t197 * qJDD(2) - t139 * t319 + t194 * t391;
t49 = -qJDD(3) * pkin(3) - t52;
t208 = qJ(5) * t57 - qJD(5) * t121 + t49;
t3 = qJD(6) * t119 + t362 * t58 + t208;
t297 = -t3 - t364;
t289 = t161 * t324;
t195 = sin(qJ(1));
t284 = -t195 * pkin(1) + t176 * pkin(7);
t283 = -t193 * qJ(5) - pkin(3);
t282 = -pkin(4) - t343;
t87 = t175 * t337 + t176 * t196;
t88 = t175 * t334 - t176 * t193;
t281 = -t87 * pkin(4) + qJ(5) * t88;
t89 = -t175 * t196 + t176 * t337;
t90 = t175 * t193 + t176 * t334;
t280 = -t89 * pkin(4) + qJ(5) * t90;
t59 = qJD(1) * t128 + t227 * qJDD(1);
t279 = -t193 * t59 + t394 * t196 + t78 * t317;
t7 = t394 * t193 + t196 * t59 - t78 * t315;
t278 = t169 * t196 - qJ(5);
t277 = qJD(4) * t119 - t57;
t64 = t107 * t196 - t123;
t273 = pkin(4) * t229 + qJ(5) * t293 + t169 * t319;
t272 = pkin(4) * t334 + qJ(5) * t337 + t326;
t271 = t194 * t286;
t270 = g(1) * t87 - g(2) * t89;
t269 = g(1) * t88 - g(2) * t90;
t61 = qJ(5) * t197 - t65;
t268 = qJD(4) * t124 + t107 * t317 - t196 * t128;
t265 = g(1) * t195 - g(2) * t198;
t264 = -qJDD(5) + t7;
t263 = t277 * pkin(8);
t262 = (-t58 + t318) * pkin(8);
t15 = t362 * t161 + t331;
t19 = qJD(6) - t30 - t363;
t261 = t15 * t196 - t19 * t193;
t260 = t15 * t193 + t19 * t196;
t29 = pkin(4) * t161 - t332;
t259 = t193 * t30 + t196 * t29;
t258 = t193 * t29 - t196 * t30;
t257 = -t193 * t38 + t196 * t37;
t256 = t193 * t37 + t196 * t38;
t255 = pkin(3) * t339 + pkin(8) * t340 + t299;
t4 = t279 + t384;
t248 = pkin(4) * t196 - t283;
t246 = -qJ(6) * t338 - t327;
t245 = pkin(8) * qJD(4) * t161 - t364;
t8 = pkin(4) * t58 + t208;
t237 = t245 - t8;
t236 = t86 + t361;
t235 = t245 - t49;
t233 = -t88 * pkin(4) - t87 * qJ(5) + t284;
t232 = t362 * t196 - t283;
t231 = -qJD(1) * t140 + t266;
t228 = t253 * t369;
t226 = -t161 * t77 - t370;
t36 = pkin(4) * t119 + t223;
t225 = t161 * t36 + t370;
t224 = t90 * pkin(4) + qJ(5) * t89 + t255;
t199 = qJD(3) ^ 2;
t222 = t169 * t199 + 0.2e1 * t138 + t366;
t221 = t115 - t346;
t220 = g(1) * t89 + g(2) * t87 + g(3) * t338 + t7;
t219 = 0.2e1 * t140 * qJD(3) - qJDD(3) * t169;
t218 = -t266 * t197 - t365;
t16 = -t196 * t344 - t353;
t17 = -t193 * t345 - t58 * t196;
t215 = -qJDD(5) + t220;
t213 = g(1) * t90 + g(2) * t88 + g(3) * t336 + t279;
t212 = t57 + t345;
t1 = qJD(6) * t161 - t264 - t287 - t373;
t2 = -t4 + t380;
t211 = t261 * qJD(4) + t1 * t193 + t2 * t196;
t5 = -t264 - t371;
t210 = t259 * qJD(4) + t5 * t193 - t4 * t196;
t209 = t257 * qJD(4) - t7 * t193 - t196 * t279;
t207 = -t52 * t194 + t51 * t197 + (-t194 * t96 - t197 * t95) * qJD(3);
t206 = t121 * t36 - t215;
t13 = -t121 * t389 - t57 * t336;
t14 = t229 * t119 + t58 * t338;
t205 = t121 * t22 - t215 - t373;
t204 = -t119 * t22 - t213 + t380;
t184 = t197 * pkin(4);
t148 = g(1) * t342;
t146 = pkin(8) * t339;
t144 = pkin(8) * t341;
t142 = t375 * t193;
t141 = t194 * t169;
t136 = qJDD(3) * t197 - t194 * t199;
t135 = qJDD(3) * t194 + t197 * t199;
t73 = t141 + t327;
t67 = -t115 * t197 - t161 * t320;
t66 = pkin(4) * t121 + t347;
t63 = t141 - t246;
t62 = t184 - t64;
t50 = -pkin(5) * t338 - t61;
t45 = -pkin(4) * t324 - t55;
t44 = -qJ(5) * t324 - t56;
t42 = t362 * t121 + t347;
t39 = t333 + t123 + t184 + (pkin(5) * t194 - t107) * t196;
t34 = (-qJ(5) * t319 - qJD(5) * t194) * t196 + t273;
t26 = t320 * t343 - t268;
t25 = (-t194 * t313 - t197 * t317) * t169 + t351;
t21 = t282 * t320 + t268;
t20 = (t169 * t317 + qJD(5)) * t197 + t278 * t320 - t351;
t18 = t254 * t319 + (qJD(6) * t193 + (qJ(6) * qJD(4) - qJD(5)) * t196) * t194 + t273;
t12 = -t197 * qJD(5) + (-pkin(5) * t336 - t123) * qJD(4) + (-t278 * t194 - t308) * qJD(3) + t351;
t11 = -pkin(5) * t293 + qJD(6) * t197 + (t307 + (-qJ(6) + t282) * t194) * qJD(3) + t268;
t6 = [0, 0, 0, 0, 0, qJDD(1), t265, g(1) * t198 + g(2) * t195, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t191 * t348 - t366 + t369, -0.2e1 * t190 * t348 + t266, 0 (t265 + (t190 ^ 2 + t191 ^ 2) * t348) * pkin(1), qJDD(1) * t188 + 0.2e1 * t271, 0.2e1 * t181 * t194 - 0.2e1 * t312 * t325, t135, qJDD(1) * t189 - 0.2e1 * t271, t136, 0, t219 * t194 + (-t222 + t369) * t197, t194 * t222 + t197 * t219 - t148 (t188 + t189) * t137 + t207 - t266, t138 * t170 - g(1) * (-pkin(2) * t175 + t284) - g(2) * t299 + t207 * t169, t13, t236 - t309, -t382, t14, -t10, t67, t115 * t64 - t161 * t26 + (-t7 + (t119 * t169 + t193 * t77) * qJD(3)) * t197 + (-qJD(3) * t37 + t169 * t58 + t193 * t49 + t315 * t77) * t194 + t269, -t115 * t65 + t161 * t25 + (-t279 + (t121 * t169 + t196 * t77) * qJD(3)) * t197 + (-qJD(3) * t38 - t169 * t57 + t196 * t49 - t317 * t77) * t194 - t270, -t119 * t25 - t121 * t26 + t57 * t64 - t58 * t65 + t148 + t257 * t319 + (-qJD(4) * t256 + t193 * t279 - t196 * t7 - t366) * t194, -t279 * t65 + t38 * t25 + t7 * t64 - t37 * t26 - g(1) * t284 - g(2) * t255 - t228 + (t194 * t49 + t319 * t77) * t169, t67, t382, t10, t13, t86 + (-t119 * t196 - t121 * t193) * t319 + (t353 + (-t58 - t318) * t196) * t194, t14, t119 * t20 + t121 * t21 - t57 * t62 + t58 * t61 + t148 + t259 * t319 + (-qJD(4) * t258 + t193 * t4 + t196 * t5 - t366) * t194, t115 * t62 - t119 * t34 - t161 * t21 - t58 * t73 + (-t321 * t36 - t5) * t197 + (qJD(3) * t29 - t193 * t8 - t315 * t36) * t194 - t269, -t115 * t61 - t121 * t34 + t161 * t20 + t57 * t73 + (-t313 * t36 + t4) * t197 + (-qJD(3) * t30 - t196 * t8 + t317 * t36) * t194 + t270, -g(1) * t233 - g(2) * t224 + t30 * t20 + t29 * t21 + t36 * t34 + t4 * t61 + t5 * t62 + t8 * t73 - t228, t67, t10, -t382, t14, t309 - t379, t13, t11 * t121 - t119 * t12 - t39 * t57 - t50 * t58 + t148 + t261 * t319 + (-qJD(4) * t260 + t1 * t196 - t193 * t2 - t366) * t194, t115 * t50 - t12 * t161 - t121 * t18 + t57 * t63 + (-t22 * t313 - t2) * t197 + (qJD(3) * t19 - t196 * t3 + t303) * t194 + t270, t11 * t161 - t115 * t39 + t119 * t18 + t58 * t63 + (t22 * t321 + t1) * t197 + (-qJD(3) * t15 + t193 * t3 + t302) * t194 + t269, t3 * t63 + t22 * t18 + t1 * t39 + t15 * t11 + t2 * t50 + t19 * t12 - g(1) * (-qJ(6) * t88 + t233) - g(2) * (pkin(5) * t340 + qJ(6) * t90 + t224) - (-t194 * t375 + t298) * t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t136, -t135, 0, t51 * t194 + t52 * t197 - g(3) + (-t194 * t95 + t197 * t96) * qJD(3), 0, 0, 0, 0, 0, 0, t381, -t396, t85 + (t121 * t319 + t194 * t277) * t193 + t361, -g(3) + (qJD(3) * t256 - t49) * t197 + (qJD(3) * t77 + t209) * t194, 0, 0, 0, 0, 0, 0, t309 + t379, -t381, t396, -g(3) + (qJD(3) * t258 - t8) * t197 + (qJD(3) * t36 + t210) * t194, 0, 0, 0, 0, 0, 0, t236 + t309, t396, t161 * t229 + t388 - t91, -g(3) + (qJD(3) * t260 - t3) * t197 + (qJD(3) * t22 + t211) * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t301, t325 * t200, t310, t301, t181, qJDD(3), qJD(3) * t96 + t194 * t231 - t364 + t52, t365 + (t95 + t118) * qJD(3) + t231 * t197 + t300, 0, 0, t16, -t395, t28, t17, -t27, t289, -pkin(3) * t58 - t119 * t96 + t161 * t55 + t226 * t193 + t196 * t235 + t324 * t37 + t328, pkin(3) * t57 - t121 * t96 - t161 * t56 - t235 * t193 + t196 * t226 + t324 * t38 - t329, t119 * t56 + t121 * t55 + (t262 - t279 - t357) * t196 + (t263 - t7 + t356) * t193 + t218, -t49 * pkin(3) - t38 * t56 + t37 * t55 - t77 * t96 - g(1) * (-pkin(3) * t340 + t146) - g(2) * (-pkin(3) * t342 + t144) - g(3) * t326 + t209 * pkin(8), t289, -t28, t27, t16, -t395, t17, -t119 * t44 - t121 * t45 + (-t161 * t29 + t262 - t4) * t196 + (t263 + t5 - t358) * t193 + t218, -t119 * t352 + t161 * t45 + t193 * t225 - t196 * t237 + t248 * t58 - t29 * t324 - t328, -t121 * t352 - t161 * t44 + t193 * t237 + t196 * t225 - t248 * t57 + t30 * t324 + t329, t210 * pkin(8) - g(1) * t146 - g(2) * t144 - g(3) * t272 - t29 * t45 - t30 * t44 + t352 * t36 + (t266 * t194 - t8) * t248, t289, t27, t28, t17, t395, t16, -t365 - t142 * t57 - t143 * t58 + t349 * t121 - t350 * t119 + (-qJD(1) * t261 - t266) * t197 + t211, -t302 - t232 * t57 + t115 * t143 + t297 * t193 - t350 * t161 - t360 * t121 + (-t19 * t194 + t22 * t334) * qJD(1) + t329, t303 - t232 * t58 - t115 * t142 + t297 * t196 + t349 * t161 + t360 * t119 + (t15 * t194 - t22 * t337) * qJD(1) + t328, -t3 * t232 + t1 * t142 + t2 * t143 - g(1) * (pkin(5) * t339 + t146) - g(2) * (pkin(5) * t341 + t144) - g(3) * (t196 * t333 + t272) + t360 * t22 + t350 * t19 + t349 * t15 + (-g(3) * pkin(5) + t266 * t232) * t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t346, -t288, -t212, -t346, -t33, t115, -t121 * t77 + t220 - t356, t119 * t77 + t213 + t357, 0, 0, t115, t212, t33, t346, -t288, -t346, pkin(4) * t57 - t359 + (-t30 - t38) * t121 + (t29 + t332) * t119, t119 * t66 + t206 + t356 - 0.2e1 * t371, -t119 * t36 + t121 * t66 + t161 * t332 - t149 - t213 + t376, -t5 * pkin(4) - g(1) * t280 - g(2) * t281 + g(3) * t327 - t4 * qJ(5) - t29 * t38 + t30 * t332 - t36 * t66, t115, t33, -t212, -t346, t288, t346, -t359 + t362 * t57 + (t19 + t330) * t121 + (t15 - t331) * t119, t121 * t42 - t161 * t247 - 0.2e1 * t149 + t204 + t376, -t119 * t42 + (-0.2e1 * qJD(6) - t24) * t161 + 0.2e1 * t287 - t205, -t1 * t362 + t2 * qJ(5) - t22 * t42 - g(1) * (-qJ(6) * t89 + t280) - g(2) * (-qJ(6) * t87 + t281) - g(3) * t246 + t331 * t19 + t330 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t212, t221, t385, t206 - t358 - t371, 0, 0, 0, 0, 0, 0, -t212, t385, -t221 (qJD(6) + t19) * t161 - t287 + t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t115 + t346, -t113 - t158, -t15 * t161 + t204 - t384;];
tau_reg  = t6;
