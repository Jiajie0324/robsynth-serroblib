% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP12_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP12_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRRP12_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t74 = sin(qJ(2));
t68 = t74 ^ 2;
t77 = cos(qJ(2));
t70 = t77 ^ 2;
t130 = t68 + t70;
t125 = -0.2e1 * t74;
t72 = sin(qJ(5));
t73 = sin(qJ(4));
t75 = cos(qJ(5));
t76 = cos(qJ(4));
t38 = t72 * t76 + t75 * t73;
t40 = -t72 * t73 + t75 * t76;
t129 = (t38 * t72 + t40 * t75) * pkin(4);
t36 = t38 ^ 2;
t37 = t40 ^ 2;
t128 = t36 + t37;
t78 = -pkin(2) - pkin(8);
t119 = -pkin(9) + t78;
t45 = t119 * t73;
t99 = t119 * t76;
t22 = t72 * t45 - t75 * t99;
t24 = t75 * t45 + t72 * t99;
t94 = -t22 * t40 + t24 * t38;
t105 = t76 * t77;
t109 = t73 * t77;
t27 = -t75 * t105 + t72 * t109;
t127 = t27 ^ 2;
t54 = t73 * pkin(4) + qJ(3);
t126 = 0.2e1 * t54;
t124 = 0.2e1 * t77;
t123 = 0.2e1 * qJ(3);
t122 = t74 * pkin(4);
t121 = t74 * pkin(5);
t120 = t75 * pkin(4);
t63 = t74 * pkin(7);
t47 = t74 * pkin(3) + t63;
t42 = t76 * t47;
t96 = -t74 * qJ(3) - pkin(1);
t34 = t78 * t77 + t96;
t98 = pkin(9) * t77 - t34;
t11 = t98 * t73 + t122 + t42;
t111 = t73 * t47;
t15 = -t98 * t76 + t111;
t4 = t72 * t11 + t75 * t15;
t117 = t22 * t74;
t115 = t24 * t74;
t29 = t38 * t77;
t114 = t29 * t27;
t18 = t38 * t27;
t113 = t40 * t29;
t112 = t40 * t38;
t110 = t73 * t74;
t108 = t74 * t27;
t32 = t74 * t38;
t33 = t74 * t40;
t107 = t74 * t77;
t106 = t76 * t73;
t104 = t130 * pkin(7) ^ 2;
t65 = t77 * pkin(7);
t48 = t77 * pkin(3) + t65;
t67 = t73 ^ 2;
t69 = t76 ^ 2;
t50 = t67 + t69;
t103 = t77 * qJ(3);
t102 = -0.2e1 * t107;
t101 = t22 ^ 2 + t24 ^ 2;
t59 = t74 * qJ(6);
t1 = t59 + t4;
t100 = t73 * t105;
t31 = pkin(4) * t105 + t48;
t97 = -t22 * t29 + t24 * t27;
t95 = -t75 * t11 + t72 * t15;
t93 = t18 + t113;
t2 = t95 - t121;
t92 = t1 * t38 - t2 * t40;
t91 = t4 * t38 - t40 * t95;
t90 = -t74 * pkin(2) + t103;
t89 = pkin(5) * t40 + t38 * qJ(6);
t19 = -t73 * t34 + t42;
t20 = t76 * t34 + t111;
t5 = t19 * t76 + t20 * t73;
t88 = t40 * t27 + t29 * t38;
t60 = t72 * pkin(4);
t53 = t60 + qJ(6);
t57 = pkin(5) + t120;
t87 = t38 * t53 + t57 * t40;
t85 = t74 * t78 + t103;
t84 = 0.2e1 * t94;
t81 = 0.2e1 * pkin(5);
t80 = qJ(3) ^ 2;
t79 = 0.2e1 * qJ(6);
t56 = t76 * t74;
t52 = 0.2e1 * t107;
t46 = -t77 * pkin(2) + t96;
t44 = 0.2e1 * t130 * pkin(7);
t43 = t50 * t78;
t26 = t29 ^ 2;
t25 = t29 * t125;
t16 = t38 * pkin(5) - t40 * qJ(6) + t54;
t6 = -t27 * pkin(5) + t29 * qJ(6) + t31;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68, t52, 0, t70, 0, 0, pkin(1) * t124, pkin(1) * t125, t44, pkin(1) ^ 2 + t104, 0, 0, 0, t68, t52, t70, t44, t46 * t124, t46 * t125, t46 ^ 2 + t104, t67 * t70, 0.2e1 * t70 * t106, t73 * t102, t69 * t70, t76 * t102, t68, 0.2e1 * t48 * t105 + 0.2e1 * t19 * t74, -0.2e1 * t48 * t109 - 0.2e1 * t20 * t74 (t19 * t73 - t20 * t76) * t124, t19 ^ 2 + t20 ^ 2 + t48 ^ 2, t26, -0.2e1 * t114, t25, t127, 0.2e1 * t108, t68, -0.2e1 * t31 * t27 - 0.2e1 * t74 * t95, -0.2e1 * t31 * t29 - 0.2e1 * t4 * t74, 0.2e1 * t4 * t27 - 0.2e1 * t29 * t95, t31 ^ 2 + t4 ^ 2 + t95 ^ 2, t26, t25, 0.2e1 * t114, t68, -0.2e1 * t108, t127, -0.2e1 * t2 * t74 - 0.2e1 * t6 * t27, 0.2e1 * t1 * t27 - 0.2e1 * t2 * t29, 0.2e1 * t1 * t74 + 0.2e1 * t6 * t29, t1 ^ 2 + t2 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t77, 0, -t63, -t65, 0, 0, 0, -t74, -t77, 0, 0, 0, t90, t63, t65, t90 * pkin(7), -t100 (t67 - t69) * t77, t56, t100, -t110, 0, t48 * t73 + t85 * t76, t48 * t76 - t85 * t73, -t5, t48 * qJ(3) + t5 * t78, -t113, t88, t33, -t18, -t32, 0, -t54 * t27 + t31 * t38 - t117, -t54 * t29 + t31 * t40 - t115, -t91 + t97, t22 * t95 + t4 * t24 + t31 * t54, -t113, t33, -t88, 0, t32, -t18, -t16 * t27 + t6 * t38 - t117, -t92 + t97, t16 * t29 - t6 * t40 + t115, t1 * t24 + t6 * t16 + t2 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t123, pkin(2) ^ 2 + t80, t69, -0.2e1 * t106, 0, t67, 0, 0, t73 * t123, t76 * t123, -0.2e1 * t43, t50 * t78 ^ 2 + t80, t37, -0.2e1 * t112, 0, t36, 0, 0, t38 * t126, t40 * t126, -t84, t54 ^ 2 + t101, t37, 0, 0.2e1 * t112, 0, 0, t36, 0.2e1 * t16 * t38, -t84, -0.2e1 * t16 * t40, t16 ^ 2 + t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, 0, t63, 0, 0, 0, 0, 0, 0, t56, -t110, 0, t5, 0, 0, 0, 0, 0, 0, t33, -t32, t93, t91, 0, 0, 0, 0, 0, 0, t33, t93, t32, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t50, t43, 0, 0, 0, 0, 0, 0, 0, 0, -t128, t94, 0, 0, 0, 0, 0, 0, 0, -t128, 0, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, 0, -t105, t74, t19, -t20, 0, 0, 0, 0, -t29, 0, t27, t74, t74 * t120 - t95, -t72 * t122 - t4 (t27 * t72 + t29 * t75) * pkin(4) (t4 * t72 - t75 * t95) * pkin(4), 0, -t29, 0, t74, -t27, 0 (pkin(5) + t57) * t74 - t95, t53 * t27 + t57 * t29, t53 * t74 + t1, t1 * t53 - t2 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t73, 0, t76 * t78, -t73 * t78, 0, 0, 0, 0, t40, 0, -t38, 0, -t22, -t24, -t129 (-t22 * t75 + t24 * t72) * pkin(4), 0, t40, 0, 0, t38, 0, -t22, -t87, t24, -t22 * t57 + t24 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t73, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t38, 0, t129, 0, 0, 0, 0, 0, 0, t40, 0, t38, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t120, -0.2e1 * t60, 0 (t72 ^ 2 + t75 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t57, 0, 0.2e1 * t53, t53 ^ 2 + t57 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, t27, t74, -t95, -t4, 0, 0, 0, -t29, 0, t74, -t27, 0, -t95 + 0.2e1 * t121, pkin(5) * t29 + t27 * qJ(6), 0.2e1 * t59 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, 0, -t22, -t24, 0, 0, 0, t40, 0, 0, t38, 0, -t22, -t89, t24, -t22 * pkin(5) + t24 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t38, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t38, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t120, -t60, 0, 0, 0, 0, 0, 1, 0, 0, t81 + t120, 0, t79 + t60, t57 * pkin(5) + t53 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t81, 0, t79, pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, -t29, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
