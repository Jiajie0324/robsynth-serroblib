% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP12_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP12_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP12_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP12_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP12_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRRP12_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:53:40
% EndTime: 2019-03-09 12:53:59
% DurationCPUTime: 10.46s
% Computational Cost: add. (10925->711), mult. (22272->826), div. (0->0), fcn. (14091->10), ass. (0->350)
t267 = cos(qJ(2));
t385 = qJD(1) * qJD(2);
t356 = t267 * t385;
t264 = sin(qJ(2));
t383 = t264 * qJDD(1);
t299 = t356 + t383;
t164 = qJDD(4) + t299;
t157 = qJDD(5) + t164;
t262 = sin(qJ(5));
t263 = sin(qJ(4));
t266 = cos(qJ(4));
t464 = cos(qJ(5));
t167 = t262 * t266 + t464 * t263;
t400 = qJD(1) * t264;
t220 = qJD(4) + t400;
t206 = qJD(5) + t220;
t358 = t464 * qJD(5);
t366 = t266 * t400;
t388 = qJD(5) * t262;
t391 = qJD(4) * t263;
t427 = t262 * t263;
t407 = -t262 * t391 - t263 * t388 + (t464 * qJD(4) + t358) * t266 + t464 * t366 - t400 * t427;
t330 = t157 * t167 + t407 * t206;
t399 = qJD(1) * t267;
t387 = t263 * qJD(2);
t165 = -t266 * t399 - t387;
t359 = t263 * t399;
t394 = qJD(2) * t266;
t166 = -t359 + t394;
t98 = -t464 * t165 + t166 * t262;
t500 = -t98 * t399 + t330;
t307 = t262 * t165 + t464 * t166;
t499 = qJD(2) * t307 + t330;
t367 = t464 * t266;
t168 = t367 - t427;
t476 = qJD(4) + qJD(5);
t106 = t476 * t167;
t408 = t167 * t400 + t106;
t329 = t157 * t168 - t206 * t408;
t498 = -qJD(2) * t98 + t329;
t389 = qJD(4) * t267;
t363 = t263 * t389;
t364 = t264 * t394;
t296 = t363 + t364;
t382 = t267 * qJDD(1);
t390 = qJD(4) * t266;
t371 = qJD(2) * t390 + t263 * qJDD(2) + t266 * t382;
t276 = qJD(1) * t296 - t371;
t384 = qJD(1) * qJD(4);
t92 = -t263 * ((-qJD(4) + t400) * qJD(2) - t382) + (t267 * t384 - qJDD(2)) * t266;
t34 = qJD(5) * t307 - t262 * t92 - t464 * t276;
t302 = t34 * t167 + t407 * t98;
t492 = -t206 * t307 + t34;
t466 = pkin(2) + pkin(8);
t455 = pkin(9) + t466;
t177 = t455 * t263;
t178 = t455 * t266;
t110 = -t464 * t177 - t262 * t178;
t261 = qJ(4) + qJ(5);
t246 = cos(t261);
t265 = sin(qJ(1));
t268 = cos(qJ(1));
t323 = g(1) * t268 + g(2) * t265;
t457 = g(3) * t264;
t472 = t323 * t267 + t457;
t497 = -t110 * t157 - t246 * t472;
t465 = pkin(3) + pkin(7);
t238 = pkin(7) * t399;
t174 = pkin(3) * t399 + t238;
t258 = qJD(2) * qJ(3);
t147 = t258 + t174;
t108 = -pkin(4) * t165 + t147;
t40 = pkin(5) * t98 - qJ(6) * t307 + t108;
t496 = t40 * t98;
t495 = t108 * t98;
t493 = t98 * t307;
t237 = pkin(7) * t400;
t488 = qJD(3) + t237;
t467 = t307 ^ 2;
t487 = -t98 ^ 2 + t467;
t33 = -t165 * t358 + t166 * t388 - t262 * t276 + t464 * t92;
t486 = t206 * t98 - t33;
t57 = pkin(5) * t307 + qJ(6) * t98;
t163 = qJD(4) * t178;
t331 = t455 * t391;
t425 = t263 * t264;
t313 = pkin(4) * t267 - pkin(9) * t425;
t242 = pkin(2) * t400;
t436 = qJ(3) * t267;
t320 = pkin(8) * t264 - t436;
t134 = qJD(1) * t320 + t242;
t90 = -t134 * t263 + t266 * t174;
t72 = qJD(1) * t313 + t90;
t91 = t266 * t134 + t263 * t174;
t78 = pkin(9) * t366 + t91;
t451 = -t110 * qJD(5) + (t331 - t72) * t464 + (t163 + t78) * t262;
t357 = t264 * t385;
t219 = pkin(2) * t357;
t392 = qJD(3) * t264;
t285 = qJD(2) * t320 - t392;
t247 = t264 * qJ(3);
t354 = -pkin(1) - t247;
t298 = -t466 * t267 + t354;
t73 = qJD(1) * t285 + qJDD(1) * t298 + t219;
t120 = t298 * qJD(1);
t386 = pkin(3) * t400 + t488;
t128 = -t466 * qJD(2) + t386;
t76 = t120 * t266 + t128 * t263;
t218 = pkin(7) * t356;
t234 = pkin(7) * t383;
t355 = qJDD(3) + t218 + t234;
t95 = t299 * pkin(3) - t466 * qJDD(2) + t355;
t26 = -qJD(4) * t76 - t263 * t73 + t266 * t95;
t483 = t220 * t76 + t26;
t395 = qJD(2) * t264;
t173 = t465 * t395;
t235 = pkin(7) * t382;
t256 = qJDD(2) * qJ(3);
t257 = qJD(2) * qJD(3);
t370 = t235 + t256 + t257;
t340 = pkin(3) * t382 + t370;
t96 = -qJD(1) * t173 + t340;
t482 = qJD(4) * t220 * t466 + t96;
t229 = t263 * pkin(4) + qJ(3);
t252 = t267 * pkin(2);
t404 = t252 + t247;
t462 = pkin(8) * t267;
t332 = t404 + t462;
t158 = -pkin(1) - t332;
t196 = t465 * t264;
t169 = t263 * t196;
t105 = t266 * t158 + t169;
t141 = t157 * qJ(6);
t184 = t206 * qJD(6);
t479 = t141 + t184;
t269 = -pkin(9) - pkin(8);
t424 = t263 * t265;
t381 = pkin(4) * t424;
t421 = t264 * t265;
t478 = t267 * t381 + t269 * t421;
t422 = t263 * t268;
t223 = pkin(4) * t422;
t411 = t268 * t269;
t477 = t267 * t223 + t264 * t411;
t233 = pkin(4) * t266 + pkin(3);
t406 = pkin(4) * t390 + t233 * t400 + t488;
t143 = t157 * pkin(5);
t475 = t143 - qJDD(6);
t306 = t262 * t177 - t464 * t178;
t60 = t306 * qJD(5) - t464 * t163 + t262 * t331;
t474 = -t110 * t34 + t306 * t33 - t60 * t98;
t245 = sin(t261);
t419 = t264 * t268;
t129 = t245 * t265 - t246 * t419;
t131 = t245 * t268 + t246 * t421;
t255 = g(3) * t267;
t15 = pkin(4) * t164 + pkin(9) * t92 + t26;
t379 = t128 * t390 + t263 * t95 + t266 * t73;
t25 = -t120 * t391 + t379;
t18 = pkin(9) * t276 + t25;
t75 = -t120 * t263 + t266 * t128;
t65 = -pkin(9) * t166 + t75;
t56 = pkin(4) * t220 + t65;
t66 = pkin(9) * t165 + t76;
t351 = -t464 * t15 + t262 * t18 + t66 * t358 + t56 * t388;
t290 = g(1) * t129 - g(2) * t131 + t246 * t255 - t351;
t274 = t307 * t40 - t290 - t475;
t473 = -t108 * t307 + t290;
t11 = -t168 * t33 - t307 * t408;
t241 = pkin(2) * t395;
t117 = t241 + t285;
t393 = qJD(2) * t267;
t175 = t465 * t393;
t346 = -t117 * t263 + t266 * t175;
t353 = pkin(9) * t267 - t158;
t42 = t313 * qJD(2) + (t353 * t266 - t169) * qJD(4) + t346;
t170 = t266 * t196;
t80 = pkin(4) * t264 + t353 * t263 + t170;
t415 = t266 * t267;
t87 = -pkin(9) * t415 + t105;
t449 = t262 * t80 + t464 * t87;
t51 = t266 * t117 - t158 * t391 + t263 * t175 + t196 * t390;
t45 = pkin(9) * t296 + t51;
t9 = -qJD(5) * t449 - t262 * t45 + t464 * t42;
t3 = t262 * t15 + t464 * t18 + t56 * t358 - t66 * t388;
t1 = t3 + t479;
t2 = t351 - t475;
t441 = t262 * t66;
t27 = t464 * t56 - t441;
t409 = qJD(6) - t27;
t22 = -t206 * pkin(5) + t409;
t378 = t464 * t66;
t28 = t262 * t56 + t378;
t23 = t206 * qJ(6) + t28;
t369 = -g(1) * t419 - g(2) * t421 + t255;
t470 = t1 * t167 - t168 * t2 + t408 * t22 + t407 * t23 + t369;
t469 = t167 * t3 - t168 * t351 - t408 * t27 + t407 * t28 + t369;
t468 = -t167 * t33 + t168 * t34 + t307 * t407 - t408 * t98;
t463 = pkin(2) * t264;
t461 = g(1) * t265;
t458 = g(2) * t268;
t454 = pkin(5) * t407 + qJ(6) * t408 - qJD(6) * t168 + t406;
t38 = t262 * t72 + t464 * t78;
t35 = qJ(6) * t399 + t38;
t453 = t60 - t35;
t452 = t60 - t38;
t450 = pkin(5) * t399 - t451;
t445 = t206 * t28;
t443 = t220 * t75;
t440 = t263 * t75;
t439 = t266 * t92;
t31 = t464 * t65 - t441;
t438 = pkin(4) * t358 + qJD(6) - t31;
t437 = pkin(7) * qJDD(2);
t434 = qJDD(2) * pkin(2);
t431 = t164 * t263;
t430 = t165 * t266;
t429 = t166 * t165;
t426 = t263 * t165;
t423 = t263 * t267;
t420 = t264 * t266;
t272 = qJD(1) ^ 2;
t418 = t264 * t272;
t417 = t265 * t266;
t416 = t265 * t267;
t142 = t266 * t164;
t414 = t266 * t268;
t413 = t267 * t268;
t412 = t267 * t269;
t410 = t466 * t164;
t374 = t264 * t417;
t405 = pkin(4) * t374 + t223;
t197 = t465 * t267;
t403 = t268 * pkin(1) + t265 * pkin(7);
t259 = t264 ^ 2;
t260 = t267 ^ 2;
t402 = t259 - t260;
t401 = t259 + t260;
t397 = qJD(2) * t165;
t396 = qJD(2) * t166;
t380 = g(3) * t415;
t376 = t165 * t420;
t375 = t263 * t419;
t373 = t264 * t414;
t253 = t268 * pkin(7);
t372 = t268 * t233 + t265 * t412 + t253;
t222 = pkin(4) * t415;
t146 = t222 + t197;
t365 = t264 * t387;
t362 = t266 * t389;
t360 = t206 * t399;
t350 = -qJD(2) * pkin(2) + qJD(3);
t130 = t245 * t419 + t246 * t265;
t349 = -t129 * pkin(5) + qJ(6) * t130;
t132 = -t245 * t421 + t246 * t268;
t348 = t131 * pkin(5) - qJ(6) * t132;
t347 = qJD(1) * t105 + t76;
t345 = -qJD(1) * t197 - t147;
t344 = t220 + t400;
t342 = pkin(2) * t413 + qJ(3) * t419 + t403;
t341 = -t234 - t369;
t339 = t267 * t367;
t338 = t464 * t395;
t337 = t264 * t356;
t215 = qJ(3) * t416;
t336 = -pkin(2) * t421 + t215;
t217 = qJ(3) * t413;
t335 = -pkin(2) * t419 + t217;
t30 = t262 * t65 + t378;
t334 = pkin(4) * t388 - t30;
t226 = g(1) * t416;
t333 = -g(2) * t413 + t226;
t328 = t371 * t263;
t327 = t401 * qJDD(1) * pkin(7);
t271 = qJD(2) ^ 2;
t326 = pkin(7) * t271 + t458;
t325 = -g(1) * t131 - g(2) * t129;
t324 = -g(1) * t132 - g(2) * t130;
t135 = t262 * t423 - t339;
t68 = t106 * t267 - t262 * t365 + t266 * t338;
t322 = -t135 * t34 - t68 * t98;
t321 = pkin(5) * t245 - qJ(6) * t246;
t316 = t166 * t266 + t426;
t176 = t237 + t350;
t190 = -t238 - t258;
t315 = t176 * t267 + t190 * t264;
t314 = t220 * t263;
t312 = t354 - t252;
t311 = pkin(4) * t425 + t404 - t412;
t47 = -t262 * t87 + t464 * t80;
t308 = -0.2e1 * pkin(1) * t385 - t437;
t8 = t262 * t42 + t80 * t358 - t87 * t388 + t464 * t45;
t148 = t312 * qJD(1);
t305 = t148 * t400 + qJDD(3) - t341;
t304 = -t220 * t390 - t431;
t303 = (-pkin(5) * t246 - qJ(6) * t245) * t267;
t301 = -qJ(3) * t393 - t392;
t297 = 0.2e1 * qJDD(1) * pkin(1) - t326;
t293 = t266 * t357 - t371;
t181 = -pkin(1) - t404;
t292 = t437 + (-qJD(1) * t181 - t148) * qJD(2);
t289 = g(1) * t130 - g(2) * t132 - t245 * t255 - t3;
t136 = t167 * t267;
t67 = t263 * t338 + (t423 * t476 + t364) * t262 - t476 * t339;
t287 = -t135 * t33 + t136 * t34 + t307 * t68 - t67 * t98;
t286 = pkin(4) * t375 + t265 * t233 - t267 * t411 + t342;
t284 = (-t229 * t264 - pkin(1) - t252) * t461;
t283 = -t11 - t302;
t282 = -t135 * t157 - t206 * t68 + t264 * t34 + t98 * t393;
t139 = t241 + t301;
t93 = qJD(1) * t301 + qJDD(1) * t312 + t219;
t281 = qJD(1) * t139 + qJDD(1) * t181 + t326 + t93;
t111 = -pkin(4) * t363 + (-pkin(7) - t233) * t395;
t279 = t206 * t27 + t289;
t125 = pkin(7) * t357 - t370;
t133 = t355 - t434;
t277 = qJD(2) * t315 - t125 * t267 + t133 * t264;
t275 = t157 * t306 - t245 * t472;
t55 = t371 * pkin(4) + t111 * qJD(1) + t340;
t232 = -t464 * pkin(4) - pkin(5);
t228 = pkin(4) * t262 + qJ(6);
t212 = t267 * t418;
t194 = pkin(4) * t373;
t185 = t402 * t272;
t183 = qJDD(2) * t267 - t264 * t271;
t182 = qJDD(2) * t264 + t267 * t271;
t171 = -qJ(3) * t399 + t242;
t160 = qJDD(1) * t260 - 0.2e1 * t337;
t159 = qJDD(1) * t259 + 0.2e1 * t337;
t152 = -t263 * t421 + t414;
t151 = t374 + t422;
t150 = t375 + t417;
t149 = t373 - t424;
t116 = 0.2e1 * t264 * t382 - 0.2e1 * t402 * t385;
t104 = -t158 * t263 + t170;
t103 = t157 * t264 + t206 * t393;
t94 = pkin(5) * t167 - qJ(6) * t168 + t229;
t69 = -pkin(5) * t135 + qJ(6) * t136 + t146;
t52 = -qJD(4) * t105 + t346;
t50 = pkin(4) * t166 + t57;
t46 = -t264 * pkin(5) - t47;
t44 = qJ(6) * t264 + t449;
t29 = -t307 * t399 + t329;
t19 = -pkin(5) * t68 - qJ(6) * t67 + qJD(6) * t136 + t111;
t12 = t136 * t33 + t307 * t67;
t10 = -t136 * t157 + t206 * t67 - t264 * t33 + t307 * t393;
t7 = -pkin(5) * t393 - t9;
t6 = qJ(6) * t393 + qJD(6) * t264 + t8;
t5 = t34 * pkin(5) + t33 * qJ(6) - qJD(6) * t307 + t55;
t4 = [0, 0, 0, 0, 0, qJDD(1), -t458 + t461, t323, 0, 0, t159, t116, t182, t160, t183, 0, t264 * t308 + t267 * t297 + t226, t308 * t267 + (-t297 - t461) * t264, -t323 + 0.2e1 * t327, -g(1) * (-pkin(1) * t265 + t253) - g(2) * t403 + (t401 * pkin(7) ^ 2 + pkin(1) ^ 2) * qJDD(1), 0, -t182, -t183, t159, t116, t160, t327 + t277 - t323, t264 * t292 + t267 * t281 - t226, t292 * t267 + (-t281 + t461) * t264, pkin(7) * t277 - g(1) * t253 - g(2) * t342 + t148 * t139 + t93 * t181 - t312 * t461, t92 * t423 + (-t362 + t365) * t166, t316 * t395 + (-t293 * t263 + t439 + (-t430 + (t166 - t359) * t263) * qJD(4)) * t267 (t220 * t387 - t92) * t264 + (t304 + t396) * t267, t165 * t296 - t276 * t415 (t344 * t394 - t371) * t264 + (t344 * t391 - t142 + t397) * t267, t164 * t264 + t220 * t393, t52 * t220 + t104 * t164 + t173 * t165 + t197 * t371 - g(1) * t152 - g(2) * t150 + (t345 * t394 + t26) * t264 + (t75 * qJD(2) + t96 * t266 + t345 * t391) * t267, g(1) * t151 - g(2) * t149 - t105 * t164 - t166 * t173 - t197 * t92 - t220 * t51 + (t147 * t387 - t25) * t264 + (-qJD(2) * t76 - t147 * t390 - t96 * t263) * t267, t51 * t165 - t105 * t371 - t52 * t166 + t104 * t92 + t226 + (t266 * t347 - t440) * t395 + (-t458 - t25 * t266 + t26 * t263 + (t263 * t347 + t266 * t75) * qJD(4)) * t267, t25 * t105 + t76 * t51 + t26 * t104 + t75 * t52 + t96 * t197 - t147 * t173 - g(1) * (pkin(3) * t268 + t253) - g(2) * (pkin(8) * t413 + t342) + (-g(1) * (t312 - t462) - g(2) * pkin(3)) * t265, t12, t287, t10, t322, -t282, t103, -t108 * t68 + t111 * t98 - t135 * t55 + t146 * t34 + t157 * t47 + t206 * t9 - t264 * t351 + t27 * t393 + t324, t108 * t67 + t111 * t307 - t136 * t55 - t146 * t33 - t157 * t449 - t206 * t8 - t264 * t3 - t28 * t393 - t325, t135 * t3 - t136 * t351 - t27 * t67 + t28 * t68 - t307 * t9 + t33 * t47 - t34 * t449 - t8 * t98 + t333, -g(1) * t372 - g(2) * t286 + t108 * t111 + t55 * t146 + t27 * t9 + t28 * t8 + t3 * t449 - t351 * t47 - t284, t12, t10, -t287, t103, t282, t322, -t135 * t5 - t157 * t46 + t19 * t98 - t2 * t264 - t206 * t7 - t22 * t393 + t34 * t69 - t40 * t68 + t324, t1 * t135 - t136 * t2 + t22 * t67 + t23 * t68 + t307 * t7 - t33 * t46 - t34 * t44 - t6 * t98 + t333, t1 * t264 + t136 * t5 + t157 * t44 - t19 * t307 + t206 * t6 + t23 * t393 + t33 * t69 - t40 * t67 + t325, t1 * t44 + t23 * t6 + t5 * t69 + t40 * t19 + t2 * t46 + t22 * t7 - g(1) * (pkin(5) * t132 + qJ(6) * t131 + t372) - g(2) * (pkin(5) * t130 + qJ(6) * t129 + t286) - t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t212, t185, t383, t212, t382, qJDD(2), pkin(1) * t418 + t341, t457 - t235 + (pkin(1) * t272 + t323) * t267, 0, 0, qJDD(2), -t383, -t382, -t212, t185, t212 (t436 - t463) * qJDD(1) + ((-t190 - t258) * t264 + (-t176 + t350) * t267) * qJD(1), -t171 * t399 + t305 - 0.2e1 * t434, t235 + 0.2e1 * t256 + 0.2e1 * t257 + (qJD(1) * t171 - g(3)) * t264 + (qJD(1) * t148 - t323) * t267, -pkin(7) * qJD(1) * t315 - t133 * pkin(2) - g(1) * t335 - g(2) * t336 - g(3) * t404 - t125 * qJ(3) - t190 * qJD(3) - t148 * t171, -t166 * t314 - t439, -t371 * t266 + t92 * t263 - t316 * qJD(4) + (t263 * t362 + (-t426 + (-t166 + t394) * t266) * t264) * qJD(1), -t220 * t391 + t142 + (-t166 * t267 - t220 * t425) * qJD(1), t328 - t165 * t390 + (-t263 * t296 - t376) * qJD(1) (-t165 * t267 - t220 * t420) * qJD(1) + t304, -t220 * t399, qJ(3) * t371 - t90 * t220 - t75 * t399 - t386 * t165 + (qJD(4) * t147 - t410 + (t147 - t258) * t400) * t266 + (-t457 + (-qJ(3) * t384 - t323) * t267 + t482) * t263, t76 * t399 - qJ(3) * t92 + t220 * t91 + t386 * t166 + (-t147 * t220 + t410) * t263 + (-t472 + t482) * t266, -t91 * t165 + t90 * t166 + (-t76 * t400 - t466 * t92 - t26 + (-t165 * t466 - t76) * qJD(4)) * t266 + (-t466 * t293 - t25 + t75 * t400 + (t75 - (t166 + t359) * t466) * qJD(4)) * t263 - t369, -g(1) * t217 - g(2) * t215 - g(3) * t332 + t96 * qJ(3) + t386 * t147 - t75 * t90 - t76 * t91 + (-t25 * t263 - t26 * t266 - (t266 * t76 - t440) * qJD(4) + t323 * t264) * t466, t11, -t468, t29, t302, -t500, -t360, t407 * t108 + t167 * t55 + t451 * t206 + t229 * t34 - t27 * t399 + t406 * t98 + t275, -t408 * t108 + t168 * t55 - t452 * t206 - t229 * t33 + t28 * t399 + t307 * t406 + t497, -t307 * t451 + t38 * t98 - t469 + t474, t3 * t110 - t351 * t306 + t55 * t229 - g(1) * (t335 + t477) - g(2) * (t336 + t478) - g(3) * t311 + t452 * t28 + t451 * t27 + t406 * t108, t11, t29, t468, -t360, t500, t302, t167 * t5 - t450 * t206 + t22 * t399 + t34 * t94 + t407 * t40 + t454 * t98 + t275, t307 * t450 + t35 * t98 - t470 + t474, -t168 * t5 + t453 * t206 - t23 * t399 - t454 * t307 + t33 * t94 + t408 * t40 - t497, t1 * t110 + t5 * t94 - t2 * t306 - g(1) * (t217 + t477) - g(2) * (t215 + t478) - g(3) * (t264 * t321 + t311) + t454 * t40 + t453 * t23 + t450 * t22 + t323 * (-t267 * t321 + t463); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, qJDD(2) + t212, -t259 * t272 - t271, qJD(2) * t190 + t218 + t305 - t434, 0, 0, 0, 0, 0, 0, -t220 * t314 + t142 + t397, -t220 ^ 2 * t266 - t396 - t431, -t328 + t439 + (t166 * t263 + t430) * qJD(4) + (t376 + (t363 + (t166 + t394) * t264) * t263) * qJD(1), -qJD(2) * t147 + t483 * t266 + (t25 - t443) * t263 + t369, 0, 0, 0, 0, 0, 0, t498, -t499, t283, -qJD(2) * t108 + t469, 0, 0, 0, 0, 0, 0, t498, t283, t499, -qJD(2) * t40 + t470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t429, -t165 ^ 2 + t166 ^ 2, -t165 * t220 - t92, t429, t166 * t220 + t276, t164, -g(1) * t149 - g(2) * t151 - t147 * t166 + t380 + t483, g(1) * t150 - g(2) * t152 - t147 * t165 + t443 + (qJD(4) * t120 - t255) * t263 - t379, 0, 0, t493, t487, t486, -t493, -t492, t157, t30 * t206 + (t464 * t157 - t166 * t98 - t206 * t388) * pkin(4) + t473, t495 + t31 * t206 + (-t157 * t262 - t166 * t307 - t206 * t358) * pkin(4) + t289, -t27 * t98 - t30 * t307 + t28 * t307 + t31 * t98 + (t464 * t33 - t262 * t34 + (t262 * t307 - t464 * t98) * qJD(5)) * pkin(4), -t28 * t31 + t27 * t30 - g(1) * t194 - g(2) * t405 + (g(1) * t424 + t380 - t351 * t464 - t108 * t166 + t3 * t262 + (-t262 * t27 + t464 * t28) * qJD(5)) * pkin(4), t493, t486, -t487, t157, t492, -t493, -t157 * t232 - t206 * t334 - t50 * t98 - t274, -t228 * t34 - t232 * t33 + (t23 + t334) * t307 + (t22 - t438) * t98, t157 * t228 + t206 * t438 + t307 * t50 - t289 + t479 - t496, t1 * t228 + t2 * t232 - t40 * t50 - g(1) * (t194 + t349 - t381) - g(2) * (t348 + t405) - g(3) * (-t222 + t303) + t438 * t23 + t334 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t493, t487, t486, -t493, -t492, t157, t445 + t473, t279 + t495, 0, 0, t493, t486, -t487, t157, t492, -t493, -t57 * t98 + t143 - t274 + t445, pkin(5) * t33 - qJ(6) * t34 + (t23 - t28) * t307 + (t22 - t409) * t98, t307 * t57 + 0.2e1 * t141 + 0.2e1 * t184 - t279 - t496, -t2 * pkin(5) - g(1) * t349 - g(2) * t348 - g(3) * t303 + t1 * qJ(6) - t22 * t28 + t23 * t409 - t40 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157 + t493, t486, -t206 ^ 2 - t467, -t206 * t23 + t274;];
tau_reg  = t4;
