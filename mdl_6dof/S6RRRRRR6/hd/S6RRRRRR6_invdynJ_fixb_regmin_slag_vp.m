% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tau_reg [6x38]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRR6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR6_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 04:21:51
% EndTime: 2019-03-10 04:22:28
% DurationCPUTime: 19.75s
% Computational Cost: add. (23073->757), mult. (54616->1051), div. (0->0), fcn. (45635->18), ass. (0->381)
t376 = cos(pkin(6));
t509 = qJD(1) * t376;
t353 = qJD(2) + t509;
t380 = sin(qJ(3));
t386 = cos(qJ(3));
t381 = sin(qJ(2));
t375 = sin(pkin(6));
t510 = qJD(1) * t375;
t470 = t381 * t510;
t273 = t353 * t386 - t380 * t470;
t274 = t353 * t380 + t386 * t470;
t379 = sin(qJ(4));
t385 = cos(qJ(4));
t205 = -t385 * t273 + t274 * t379;
t589 = qJD(5) + qJD(6);
t648 = t205 + t589;
t387 = cos(qJ(2));
t431 = pkin(2) * t381 - pkin(9) * t387;
t292 = t431 * t510;
t278 = t386 * t292;
t487 = pkin(1) * t509;
t291 = -pkin(8) * t470 + t387 * t487;
t577 = pkin(9) + pkin(10);
t476 = qJD(3) * t577;
t525 = t386 * t387;
t647 = -t291 * t380 + t278 + (pkin(3) * t381 - pkin(10) * t525) * t510 + t386 * t476;
t508 = qJD(1) * t387;
t469 = t375 * t508;
t440 = t380 * t469;
t513 = t386 * t291 + t380 * t292;
t646 = pkin(10) * t440 - t380 * t476 - t513;
t377 = sin(qJ(6));
t378 = sin(qJ(5));
t383 = cos(qJ(6));
t384 = cos(qJ(5));
t307 = t377 * t378 - t383 * t384;
t645 = t648 * t307;
t530 = t377 * t384;
t309 = t378 * t383 + t530;
t644 = t648 * t309;
t308 = t379 * t380 - t385 * t386;
t590 = qJD(3) + qJD(4);
t243 = t590 * t308;
t256 = t308 * t469;
t517 = -t243 + t256;
t310 = t379 * t386 + t380 * t385;
t516 = (-t469 + t590) * t310;
t499 = qJD(5) * t384;
t622 = t205 * t384;
t643 = t499 + t622;
t491 = qJDD(1) * t387;
t351 = t375 * t491;
t494 = qJD(1) * qJD(2);
t465 = t381 * t494;
t439 = t375 * t465;
t289 = qJDD(3) - t351 + t439;
t281 = qJDD(4) + t289;
t294 = pkin(8) * t469 + t381 * t487;
t254 = pkin(9) * t353 + t294;
t417 = -pkin(2) * t387 - pkin(9) * t381 - pkin(1);
t288 = t417 * t375;
t269 = qJD(1) * t288;
t189 = -t254 * t380 + t386 * t269;
t156 = -pkin(10) * t274 + t189;
t335 = -qJD(3) + t469;
t143 = -pkin(3) * t335 + t156;
t190 = t254 * t386 + t269 * t380;
t157 = pkin(10) * t273 + t190;
t502 = qJD(4) * t385;
t503 = qJD(4) * t379;
t493 = qJDD(1) * t376;
t352 = qJDD(2) + t493;
t437 = qJD(3) * t470;
t504 = qJD(3) * t386;
t464 = t387 * t494;
t492 = qJDD(1) * t381;
t640 = t464 + t492;
t612 = t640 * t375;
t193 = t353 * t504 + t612 * t386 + (t352 - t437) * t380;
t486 = pkin(1) * qJD(2) * t376;
t443 = qJD(1) * t486;
t481 = pkin(1) * t493;
t477 = -pkin(8) * t351 - t381 * t481 - t387 * t443;
t401 = -pkin(8) * t439 - t477;
t213 = pkin(9) * t352 + t401;
t414 = t431 * qJD(2);
t215 = (qJD(1) * t414 + qJDD(1) * t417) * t375;
t391 = -qJD(3) * t190 - t380 * t213 + t386 * t215;
t65 = pkin(3) * t289 - pkin(10) * t193 + t391;
t505 = qJD(3) * t380;
t410 = -t386 * t213 - t380 * t215 + t254 * t505 - t269 * t504;
t442 = t353 * t505 + t380 * t612 + t386 * t437;
t411 = t386 * t352 - t442;
t70 = pkin(10) * t411 - t410;
t447 = -t143 * t503 - t157 * t502 - t379 * t70 + t385 * t65;
t23 = -pkin(4) * t281 - t447;
t575 = cos(qJ(1));
t471 = t575 * t387;
t382 = sin(qJ(1));
t527 = t381 * t382;
t303 = -t376 * t527 + t471;
t374 = qJ(3) + qJ(4);
t366 = sin(t374);
t368 = cos(t374);
t534 = t375 * t382;
t238 = -t303 * t366 + t368 * t534;
t474 = t375 * t575;
t535 = t375 * t381;
t472 = t575 * t381;
t526 = t382 * t387;
t301 = t376 * t472 + t526;
t544 = t301 * t366;
t610 = g(3) * (-t366 * t535 + t368 * t376) + g(2) * (-t368 * t474 - t544) + g(1) * t238;
t642 = t23 + t610;
t337 = t577 * t380;
t339 = t577 * t386;
t418 = -t337 * t385 - t339 * t379;
t641 = qJD(4) * t418 - t379 * t647 + t646 * t385;
t434 = -t294 + (-t440 + t505) * pkin(3);
t623 = t205 * t378;
t639 = pkin(12) * t623;
t151 = t379 * t157;
t97 = t156 * t385 - t151;
t624 = -pkin(3) * t502 + t97;
t638 = -pkin(4) * t516 + pkin(11) * t517 - t434;
t616 = -pkin(11) * t470 + t641;
t218 = -t256 * t378 - t384 * t470;
t613 = t378 * t243 + t218;
t500 = qJD(5) * t378;
t637 = (t500 + t623) * pkin(5);
t419 = t273 * t379 + t385 * t274;
t636 = pkin(5) * t419 + pkin(12) * t622;
t321 = -qJD(4) + t335;
t172 = -t321 * t378 + t384 * t419;
t93 = t385 * t193 + t273 * t502 - t274 * t503 + t379 * t411;
t458 = -t384 * t281 + t378 * t93;
t56 = qJD(5) * t172 + t458;
t12 = pkin(5) * t56 + t23;
t253 = -pkin(2) * t353 - t291;
t209 = -pkin(3) * t273 + t253;
t100 = pkin(4) * t205 - pkin(11) * t419 + t209;
t152 = t385 * t157;
t80 = t379 * t143 + t152;
t75 = -pkin(11) * t321 + t80;
t41 = t384 * t100 - t378 * t75;
t32 = -pkin(12) * t172 + t41;
t495 = -qJD(5) - t205;
t25 = -pkin(5) * t495 + t32;
t170 = t384 * t321 + t378 * t419;
t42 = t100 * t378 + t384 * t75;
t33 = -pkin(12) * t170 + t42;
t564 = t33 * t383;
t14 = t25 * t377 + t564;
t373 = qJ(5) + qJ(6);
t365 = sin(t373);
t79 = t143 * t385 - t151;
t74 = pkin(4) * t321 - t79;
t61 = pkin(5) * t170 + t74;
t635 = t12 * t309 + t14 * t419 + t365 * t610 - t61 * t645;
t13 = t25 * t383 - t33 * t377;
t367 = cos(t373);
t634 = t12 * t307 - t13 * t419 - t367 * t610 + t61 * t644;
t55 = t378 * t281 - t321 * t499 + t384 * t93 - t419 * t500;
t53 = t55 * t378;
t633 = t172 * t643 + t53;
t199 = qJD(6) - t495;
t420 = t170 * t377 - t383 * t172;
t94 = qJD(4) * t419 + t193 * t379 - t385 * t411;
t86 = qJDD(5) + t94;
t85 = qJDD(6) + t86;
t632 = -t199 * t645 + t309 * t85 + t419 * t420;
t107 = t383 * t170 + t172 * t377;
t631 = t107 * t419 - t199 * t644 - t307 * t85;
t497 = qJD(6) * t383;
t498 = qJD(6) * t377;
t18 = -t170 * t497 - t172 * t498 - t377 * t56 + t383 * t55;
t630 = t18 * t309 + t420 * t645;
t629 = -t172 * t419 + t378 * t86 - t495 * t643;
t617 = t495 * t378;
t82 = t384 * t86;
t628 = t170 * t419 - t495 * t617 + t82;
t394 = qJD(6) * t420 - t377 * t55 - t383 * t56;
t627 = t107 * t645 - t18 * t307 + t309 * t394 + t644 * t420;
t626 = -t170 * t643 + t172 * t617 - t378 * t56 + t55 * t384;
t625 = t205 * t74;
t619 = t419 * t205;
t618 = t420 * t107;
t260 = -t337 * t379 + t339 * t385;
t615 = qJD(4) * t260 + t646 * t379 + t385 * t647;
t614 = -t310 * t499 + t613;
t219 = -t256 * t384 + t378 * t470;
t453 = t243 * t384 + t219;
t611 = -t205 ^ 2 + t419 ^ 2;
t609 = -t107 ^ 2 + t420 ^ 2;
t138 = pkin(4) * t419 + pkin(11) * t205;
t608 = t107 * t199 + t18;
t239 = t303 * t368 + t366 * t534;
t302 = t376 * t526 + t472;
t186 = t239 * t367 + t302 * t365;
t285 = t366 * t376 + t368 * t535;
t31 = t33 * t498;
t532 = t375 * t387;
t236 = t301 * t368 - t366 * t474;
t300 = -t376 * t471 + t527;
t601 = t236 * t367 + t300 * t365;
t607 = t107 * t61 + g(1) * t186 + g(2) * t601 - g(3) * (-t285 * t367 + t365 * t532) + t31;
t606 = -t205 * t321 + t93;
t185 = -t239 * t365 + t302 * t367;
t448 = -t143 * t502 + t157 * t503 - t379 * t65 - t385 * t70;
t22 = pkin(11) * t281 - t448;
t441 = -pkin(8) * t612 - t381 * t443 + t387 * t481;
t568 = t352 * pkin(2);
t214 = -t441 - t568;
t137 = -pkin(3) * t411 + t214;
t30 = t94 * pkin(4) - t93 * pkin(11) + t137;
t7 = -qJD(5) * t42 - t378 * t22 + t384 * t30;
t4 = pkin(5) * t86 - pkin(12) * t55 + t7;
t415 = -t100 * t499 - t384 * t22 - t378 * t30 + t500 * t75;
t5 = -pkin(12) * t56 - t415;
t2 = -qJD(6) * t14 - t377 * t5 + t383 * t4;
t602 = t236 * t365 - t300 * t367;
t605 = t61 * t420 - g(1) * t185 + g(2) * t602 - g(3) * (-t285 * t365 - t367 * t532) + t2;
t604 = -t199 * t420 + t394;
t603 = g(1) * t239 + g(2) * t236 + g(3) * t285 + t205 * t209 + t448;
t600 = t236 * t378 - t300 * t384;
t599 = t236 * t384 + t300 * t378;
t370 = t375 ^ 2;
t490 = 0.2e1 * t370;
t96 = t156 * t379 + t152;
t436 = pkin(3) * t503 - t96;
t595 = t199 * t419;
t594 = t495 * t419;
t225 = t309 * t310;
t533 = t375 * t386;
t298 = t376 * t380 + t381 * t533;
t574 = pkin(1) * t381;
t512 = pkin(8) * t532 + t376 * t574;
t287 = pkin(9) * t376 + t512;
t452 = -t287 * t380 + t386 * t288;
t168 = -pkin(3) * t532 - pkin(10) * t298 + t452;
t297 = -t376 * t386 + t380 * t535;
t514 = t386 * t287 + t380 * t288;
t177 = -pkin(10) * t297 + t514;
t520 = t379 * t168 + t385 * t177;
t105 = -pkin(11) * t532 + t520;
t220 = t385 * t297 + t298 * t379;
t221 = -t297 * t379 + t298 * t385;
t354 = pkin(8) * t535;
t286 = t354 + (-pkin(1) * t387 - pkin(2)) * t376;
t229 = pkin(3) * t297 + t286;
t125 = pkin(4) * t220 - pkin(11) * t221 + t229;
t524 = t384 * t105 + t378 * t125;
t593 = t638 * t384;
t518 = pkin(4) * t470 + t615;
t364 = -pkin(3) * t386 - pkin(2);
t234 = pkin(4) * t308 - pkin(11) * t310 + t364;
t592 = -t234 * t499 + t260 * t500 + t378 * t638 - t384 * t616;
t118 = pkin(3) * t274 + t138;
t591 = t378 * t118 + t384 * t624;
t588 = -t41 * t419 + t74 * t500;
t584 = t378 * t642 + t42 * t419 + t74 * t499;
t580 = -t419 * t209 + t447 - t610;
t579 = -t321 * t419 - t94;
t462 = qJD(6) * t25 + t5;
t578 = t377 * t4 + t383 * t462;
t576 = -pkin(11) - pkin(12);
t573 = pkin(3) * t385;
t569 = g(3) * t375;
t361 = pkin(3) * t379 + pkin(11);
t566 = -pkin(12) - t361;
t563 = -pkin(5) * t614 + t518;
t558 = t436 + t637;
t557 = t378 * t138 + t384 * t79;
t550 = t273 * t335;
t549 = t274 * t335;
t543 = t301 * t380;
t542 = t310 * t378;
t541 = t310 * t384;
t540 = t365 * t368;
t539 = t367 * t368;
t538 = t368 * t378;
t537 = t368 * t387;
t536 = t370 * qJD(1) ^ 2;
t531 = t376 * t387;
t528 = t378 * t387;
t248 = t384 * t260;
t523 = t218 * t377 - t219 * t383 - t225 * t589 + t307 * t243;
t466 = t310 * t500;
t522 = -t243 * t530 - t498 * t542 + (t541 * t589 - t613) * t383 + (-t466 - t219) * t377;
t515 = t378 * t234 + t248;
t506 = qJD(2) * t387;
t467 = t375 * t506;
t296 = pkin(8) * t467 + t381 * t486;
t371 = t381 ^ 2;
t511 = -t387 ^ 2 + t371;
t507 = qJD(2) * t381;
t501 = qJD(5) * t495;
t496 = qJD(2) - t353;
t488 = g(1) * t575;
t480 = t387 * t536;
t479 = t375 * t528;
t478 = t384 * t532;
t363 = -pkin(5) * t384 - pkin(4);
t475 = qJD(5) * t576;
t473 = t386 * t575;
t468 = t375 * t507;
t460 = qJD(5) * t566;
t457 = -t105 * t378 + t384 * t125;
t456 = t168 * t385 - t379 * t177;
t451 = t301 * t386 - t380 * t474;
t446 = t353 + t509;
t444 = t352 + t493;
t435 = t637 - t80;
t245 = qJD(3) * t298 + t380 * t467;
t210 = pkin(3) * t245 + t296;
t228 = t384 * t234;
t139 = pkin(5) * t308 - pkin(12) * t541 - t260 * t378 + t228;
t433 = -pkin(12) * t614 - qJD(6) * t139 + t592;
t155 = -pkin(12) * t542 + t515;
t432 = t248 * qJD(5) + qJD(6) * t155 + t593 - t453 * pkin(12) + (-(pkin(12) * t310 - t234) * qJD(5) + t616) * t378 - t516 * pkin(5);
t430 = -g(1) * t303 - g(2) * t301;
t305 = t566 * t378;
t429 = -qJD(6) * t305 - t378 * t460 + t591 + t639;
t116 = t384 * t118;
t369 = t384 * pkin(12);
t306 = t361 * t384 + t369;
t428 = qJD(6) * t306 - t378 * t624 - t384 * t460 + t116 + t636;
t336 = t576 * t378;
t427 = -qJD(6) * t336 - t378 * t475 + t557 + t639;
t134 = t384 * t138;
t338 = pkin(11) * t384 + t369;
t426 = qJD(6) * t338 - t378 * t79 - t384 * t475 + t134 + t636;
t104 = pkin(4) * t532 - t456;
t423 = -t361 * t86 + t625;
t201 = t221 * t384 - t479;
t39 = pkin(5) * t220 - pkin(12) * t201 + t457;
t200 = t221 * t378 + t478;
t44 = -pkin(12) * t200 + t524;
t422 = -t377 * t44 + t383 * t39;
t421 = t377 * t39 + t383 * t44;
t130 = t383 * t200 + t201 * t377;
t131 = -t200 * t377 + t201 * t383;
t246 = -qJD(3) * t297 + t386 * t467;
t293 = t375 * t414;
t295 = (pkin(1) * t531 - t354) * qJD(2);
t392 = -qJD(3) * t514 + t386 * t293 - t295 * t380;
t117 = pkin(3) * t468 - pkin(10) * t246 + t392;
t409 = -t287 * t505 + t288 * t504 + t380 * t293 + t386 * t295;
t122 = -pkin(10) * t245 + t409;
t416 = t117 * t385 - t379 * t122 - t168 * t503 - t177 * t502;
t408 = t379 * t117 + t385 * t122 + t168 * t502 - t177 * t503;
t35 = pkin(11) * t468 + t408;
t135 = -qJD(4) * t220 - t245 * t379 + t246 * t385;
t136 = qJD(4) * t221 + t385 * t245 + t246 * t379;
t60 = pkin(4) * t136 - pkin(11) * t135 + t210;
t412 = -t105 * t500 + t125 * t499 + t384 * t35 + t378 * t60;
t405 = -t453 - t466;
t402 = -g(1) * t302 - g(2) * t300 + g(3) * t532;
t400 = -pkin(9) * t289 - t253 * t335;
t399 = t402 * t368;
t36 = -pkin(4) * t468 - t416;
t395 = -qJD(5) * t524 - t35 * t378 + t384 * t60;
t390 = -pkin(9) * qJD(3) * t335 + t214 + t402;
t362 = -pkin(4) - t573;
t331 = t363 - t573;
t250 = t303 * t386 + t380 * t534;
t249 = -t303 * t380 + t382 * t533;
t226 = t307 * t310;
t217 = pkin(5) * t542 - t418;
t197 = t239 * t384 + t302 * t378;
t196 = -t239 * t378 + t302 * t384;
t92 = -qJD(5) * t479 + t135 * t378 + t221 * t499 - t384 * t468;
t91 = -qJD(5) * t200 + t135 * t384 + t378 * t468;
t71 = pkin(5) * t200 + t104;
t27 = qJD(6) * t131 + t377 * t91 + t383 * t92;
t26 = -qJD(6) * t130 - t377 * t92 + t383 * t91;
t24 = pkin(5) * t92 + t36;
t9 = -pkin(12) * t92 + t412;
t8 = pkin(5) * t136 - pkin(12) * t91 + t395;
t1 = -t31 + t578;
t3 = [qJDD(1), g(1) * t382 - g(2) * t575, g(2) * t382 + t488 (qJDD(1) * t371 + 0.2e1 * t381 * t464) * t370 (t381 * t491 - t494 * t511) * t490 (t381 * t444 + t446 * t506) * t375 (t387 * t444 - t446 * t507) * t375, t352 * t376, -t296 * t353 - t354 * t352 + t441 * t376 + g(1) * t301 - g(2) * t303 + (t352 * t531 + (-t465 + t491) * t490) * pkin(1), -pkin(1) * t490 * t640 - g(1) * t300 + g(2) * t302 - t295 * t353 - t512 * t352 - t401 * t376, t193 * t298 + t246 * t274, -t193 * t297 - t274 * t245 + t246 * t273 + t298 * t411, -t246 * t335 + t289 * t298 + (-t193 * t387 + t274 * t507) * t375, t245 * t335 - t297 * t289 + (t273 * t507 - t387 * t411) * t375 (-t289 * t387 - t335 * t507) * t375, -t392 * t335 + t452 * t289 - t296 * t273 - t286 * t411 + t214 * t297 + t253 * t245 + g(1) * t451 - g(2) * t250 + (t189 * t507 - t387 * t391) * t375, t409 * t335 - t514 * t289 + t296 * t274 + t286 * t193 + t214 * t298 + t253 * t246 - g(1) * t543 - g(2) * t249 + (-g(1) * t473 - t190 * t507 - t387 * t410) * t375, t135 * t419 + t221 * t93, -t135 * t205 - t136 * t419 - t220 * t93 - t221 * t94, -t135 * t321 + t221 * t281 + (-t387 * t93 + t419 * t507) * t375, t136 * t321 - t220 * t281 + (-t205 * t507 + t387 * t94) * t375 (-t281 * t387 - t321 * t507) * t375, -t416 * t321 + t456 * t281 + t210 * t205 + t229 * t94 + t137 * t220 + t209 * t136 + g(1) * t236 - g(2) * t239 + (-t387 * t447 + t507 * t79) * t375, t408 * t321 - t520 * t281 + t210 * t419 + t229 * t93 + t137 * t221 + t209 * t135 - g(1) * t544 - g(2) * t238 + (-t368 * t488 - t387 * t448 - t507 * t80) * t375, t172 * t91 + t201 * t55, -t170 * t91 - t172 * t92 - t200 * t55 - t201 * t56, t136 * t172 + t201 * t86 + t220 * t55 - t495 * t91, -t136 * t170 - t200 * t86 - t220 * t56 + t495 * t92, -t136 * t495 + t220 * t86, g(1) * t599 - g(2) * t197 + t104 * t56 + t41 * t136 + t36 * t170 + t23 * t200 + t7 * t220 - t395 * t495 + t457 * t86 + t74 * t92, -g(1) * t600 - g(2) * t196 + t104 * t55 - t42 * t136 + t36 * t172 + t23 * t201 + t415 * t220 + t412 * t495 - t524 * t86 + t74 * t91, t131 * t18 - t26 * t420, -t107 * t26 - t130 * t18 + t131 * t394 + t27 * t420, t131 * t85 - t136 * t420 + t18 * t220 + t199 * t26, -t107 * t136 - t130 * t85 - t199 * t27 + t220 * t394, t136 * t199 + t220 * t85 (-qJD(6) * t421 - t377 * t9 + t383 * t8) * t199 + t422 * t85 + t2 * t220 + t13 * t136 + t24 * t107 - t71 * t394 + t12 * t130 + t61 * t27 + g(1) * t601 - g(2) * t186 -(qJD(6) * t422 + t377 * t8 + t383 * t9) * t199 - t421 * t85 - t1 * t220 - t14 * t136 - t24 * t420 + t71 * t18 + t12 * t131 + t61 * t26 - g(1) * t602 - g(2) * t185; 0, 0, 0, -t381 * t480, t511 * t536 (t496 * t508 + t492) * t375, -t470 * t496 + t351, t352, t294 * t353 + t536 * t574 - t402 + t441, pkin(1) * t480 + t291 * t353 + (pkin(8) * t494 + g(3)) * t535 - t430 + t477, t193 * t380 - t386 * t549 (t193 - t550) * t386 + (t411 + t549) * t380, -t335 * t504 + t289 * t380 + (-t274 * t381 + t335 * t525) * t510, t335 * t505 + t289 * t386 + (-t335 * t380 * t387 - t273 * t381) * t510, t335 * t470, -pkin(2) * t442 + t278 * t335 - t189 * t470 + t294 * t273 + (-t291 * t335 + t400) * t380 + (-t390 + t568) * t386, -pkin(2) * t193 + t190 * t470 - t294 * t274 - t335 * t513 + t380 * t390 + t386 * t400, t310 * t93 + t419 * t517, -t205 * t517 - t308 * t93 - t310 * t94 - t419 * t516, t281 * t310 - t321 * t517 - t419 * t470, t205 * t470 - t281 * t308 + t321 * t516, t321 * t470, t137 * t308 + t434 * t205 + t516 * t209 + t418 * t281 + t321 * t615 + t364 * t94 - t79 * t470 - t399, t137 * t310 + t517 * t209 - t260 * t281 + t321 * t641 + t364 * t93 + t402 * t366 + t434 * t419 + t80 * t470, t172 * t405 + t541 * t55, t613 * t172 + t453 * t170 + (-t53 - t384 * t56 + (t170 * t378 - t172 * t384) * qJD(5)) * t310, t172 * t516 + t308 * t55 - t405 * t495 + t541 * t86, -t516 * t170 - t308 * t56 - t495 * t614 - t86 * t542, t308 * t86 - t495 * t516, -t74 * t218 + t228 * t86 - t418 * t56 + t7 * t308 + t516 * t41 + t593 * t495 + t518 * t170 + ((t260 * t495 + t310 * t74) * qJD(5) - t399) * t384 + (-g(3) * t535 + t23 * t310 - t74 * t243 - t260 * t86 - (-qJD(5) * t234 - t616) * t495 + t430) * t378, -t515 * t86 + t415 * t308 - t418 * t55 + t23 * t541 - g(1) * (t302 * t538 + t303 * t384) - g(2) * (t300 * t538 + t301 * t384) - t516 * t42 - (-t368 * t528 + t381 * t384) * t569 - t592 * t495 + t518 * t172 + t405 * t74, -t18 * t226 - t420 * t523, -t107 * t523 - t18 * t225 - t226 * t394 + t420 * t522, t18 * t308 + t199 * t523 - t226 * t85 - t420 * t516, -t107 * t516 - t199 * t522 - t225 * t85 + t308 * t394, t199 * t516 + t308 * t85 (t139 * t383 - t155 * t377) * t85 + t2 * t308 - t217 * t394 + t12 * t225 - g(1) * (-t302 * t539 + t303 * t365) - g(2) * (-t300 * t539 + t301 * t365) + t522 * t61 - (t365 * t381 + t367 * t537) * t569 + (t377 * t433 - t383 * t432) * t199 + t516 * t13 + t563 * t107 -(t139 * t377 + t155 * t383) * t85 - t1 * t308 + t217 * t18 - t12 * t226 - g(1) * (t302 * t540 + t303 * t367) - g(2) * (t300 * t540 + t301 * t367) + t523 * t61 - (-t365 * t537 + t367 * t381) * t569 + (t377 * t432 + t383 * t433) * t199 - t516 * t14 - t563 * t420; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274 * t273, -t273 ^ 2 + t274 ^ 2, t193 + t550, t411 - t549, t289, -t190 * t335 - t253 * t274 - g(1) * t249 - g(2) * (-t375 * t473 - t543) + g(3) * t297 + t391, g(1) * t250 + g(2) * t451 + g(3) * t298 - t189 * t335 - t253 * t273 + t410, t619, t611, t606, t579, t281, -t321 * t96 + (-t205 * t274 + t281 * t385 + t321 * t503) * pkin(3) + t580, -t321 * t97 + (-t274 * t419 - t281 * t379 + t321 * t502) * pkin(3) + t603, t633, t626, t629, t628, t594, t116 * t495 + t362 * t56 + t436 * t170 + (-t495 * t624 + t423) * t378 + (t361 * t501 - t642) * t384 + t588, t362 * t55 + t423 * t384 + t436 * t172 - (t361 * t500 + t591) * t495 + t584, t630, t627, t632, t631, -t595 (t305 * t383 - t306 * t377) * t85 - t331 * t394 + (t377 * t429 - t383 * t428) * t199 + t558 * t107 + t634 -(t305 * t377 + t306 * t383) * t85 + t331 * t18 + (t377 * t428 + t383 * t429) * t199 - t558 * t420 + t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t619, t611, t606, t579, t281, -t321 * t80 + t580, -t321 * t79 + t603, t633, t626, t629, t628, t594, -pkin(4) * t56 + t134 * t495 - t80 * t170 + (-pkin(11) * t86 - t495 * t79 + t625) * t378 + (pkin(11) * t501 - t642) * t384 + t588, -pkin(4) * t55 - t557 * t495 - t80 * t172 + t74 * t622 + (-t495 * t500 - t82) * pkin(11) + t584, t630, t627, t632, t631, -t595 (t336 * t383 - t338 * t377) * t85 - t363 * t394 + (t377 * t427 - t383 * t426) * t199 + t435 * t107 + t634 -(t336 * t377 + t338 * t383) * t85 + t363 * t18 + (t377 * t426 + t383 * t427) * t199 - t435 * t420 + t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172 * t170, -t170 ^ 2 + t172 ^ 2, -t170 * t495 + t55, -t458 + (-qJD(5) - t495) * t172, t86, -t42 * t495 - t74 * t172 - g(1) * t196 + g(2) * t600 - g(3) * (-t285 * t378 - t478) + t7, -t41 * t495 + t74 * t170 + g(1) * t197 + g(2) * t599 - g(3) * (-t285 * t384 + t479) + t415, -t618, t609, t608, t604, t85 -(-t32 * t377 - t564) * t199 + (-t107 * t172 - t199 * t498 + t383 * t85) * pkin(5) + t605 (-t199 * t33 - t4) * t377 + (t199 * t32 - t462) * t383 + (t172 * t420 - t199 * t497 - t377 * t85) * pkin(5) + t607; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t618, t609, t608, t604, t85, t14 * t199 + t605, t13 * t199 - t578 + t607;];
tau_reg  = t3;
