% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% MDP [38x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRR6_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRRR6_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1),zeros(38,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR6_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR6_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR6_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [38 1]), ...
  'S6RRRRRR6_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [38x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 04:22:08
% EndTime: 2019-03-10 04:22:43
% DurationCPUTime: 21.74s
% Computational Cost: add. (19536->736), mult. (48946->983), div. (0->0), fcn. (40265->12), ass. (0->301)
t1029 = qJD(5) + qJD(6);
t867 = cos(pkin(6));
t971 = qJD(1) * t867;
t852 = qJD(2) + t971;
t871 = sin(qJ(3));
t876 = cos(qJ(3));
t872 = sin(qJ(2));
t866 = sin(pkin(6));
t972 = qJD(1) * t866;
t943 = t872 * t972;
t787 = t852 * t876 - t871 * t943;
t788 = t852 * t871 + t876 * t943;
t870 = sin(qJ(4));
t875 = cos(qJ(4));
t734 = -t875 * t787 + t788 * t870;
t1069 = t1029 + t734;
t877 = cos(qJ(2));
t1001 = t876 * t877;
t955 = pkin(1) * t971;
t804 = -pkin(8) * t943 + t877 * t955;
t891 = (pkin(2) * t872 - pkin(9) * t877) * t866;
t805 = qJD(1) * t891;
t922 = -t804 * t871 + t876 * t805;
t1026 = pkin(9) + pkin(10);
t946 = qJD(3) * t1026;
t1068 = (pkin(3) * t872 - pkin(10) * t1001) * t972 + t922 + t876 * t946;
t970 = qJD(1) * t877;
t942 = t866 * t970;
t912 = t871 * t942;
t978 = t876 * t804 + t871 * t805;
t1067 = pkin(10) * t912 - t871 * t946 - t978;
t868 = sin(qJ(6));
t869 = sin(qJ(5));
t873 = cos(qJ(6));
t874 = cos(qJ(5));
t816 = t868 * t869 - t873 * t874;
t1065 = t1069 * t816;
t1030 = qJD(3) + qJD(4);
t817 = t870 * t871 - t875 * t876;
t760 = t1030 * t817;
t771 = t817 * t942;
t982 = -t760 + t771;
t819 = t870 * t876 + t871 * t875;
t1042 = (-t1030 + t942) * t819;
t1002 = t868 * t874;
t818 = t869 * t873 + t1002;
t1066 = t1069 * t818;
t1049 = t734 * t874;
t962 = qJD(5) * t874;
t1064 = t1049 + t962;
t844 = t1026 * t871;
t846 = t1026 * t876;
t893 = -t844 * t875 - t846 * t870;
t1063 = qJD(4) * t893 + t1067 * t875 - t1068 * t870;
t849 = t872 * t955;
t807 = pkin(8) * t942 + t849;
t967 = qJD(3) * t871;
t908 = -t807 + (-t912 + t967) * pkin(3);
t1050 = t734 * t869;
t1062 = pkin(12) * t1050;
t769 = pkin(9) * t852 + t807;
t802 = (-pkin(2) * t877 - pkin(9) * t872 - pkin(1)) * t866;
t783 = qJD(1) * t802;
t723 = t769 * t876 + t783 * t871;
t696 = pkin(10) * t787 + t723;
t690 = t870 * t696;
t722 = -t769 * t871 + t876 * t783;
t695 = -pkin(10) * t788 + t722;
t622 = t695 * t875 - t690;
t964 = qJD(4) * t875;
t1045 = -pkin(3) * t964 + t622;
t1061 = t1042 * pkin(4) + pkin(11) * t982 - t908;
t1044 = -pkin(11) * t943 + t1063;
t742 = -t771 * t869 - t874 * t943;
t1041 = t760 * t869 + t742;
t963 = qJD(5) * t869;
t1060 = (t1050 + t963) * pkin(5);
t894 = t787 * t870 + t875 * t788;
t1059 = pkin(5) * t894 + pkin(12) * t1049;
t677 = pkin(4) * t894 + pkin(11) * t734;
t658 = pkin(3) * t788 + t677;
t1058 = t1045 * t869 - t874 * t658;
t956 = qJD(1) * qJD(2);
t937 = t866 * t956;
t911 = t872 * t937;
t909 = qJD(3) * t943;
t910 = t877 * t937;
t966 = qJD(3) * t876;
t755 = t852 * t966 - t871 * t909 + t876 * t910;
t806 = qJD(2) * t891;
t795 = qJD(1) * t806;
t1023 = pkin(1) * t877;
t1004 = t866 * t872;
t853 = pkin(8) * t1004;
t808 = (t1023 * t867 - t853) * qJD(2);
t796 = qJD(1) * t808;
t879 = -qJD(3) * t723 + t876 * t795 - t871 * t796;
t627 = pkin(3) * t911 - pkin(10) * t755 + t879;
t889 = -t769 * t967 + t783 * t966 + t871 * t795 + t876 * t796;
t947 = t852 * t967 + t871 * t910 + t876 * t909;
t636 = -pkin(10) * t947 + t889;
t842 = -qJD(3) + t942;
t682 = -pkin(3) * t842 + t695;
t965 = qJD(4) * t870;
t913 = -t875 * t627 + t870 * t636 + t682 * t965 + t696 * t964;
t563 = -pkin(4) * t911 + t913;
t832 = -qJD(4) + t842;
t711 = -t832 * t869 + t874 * t894;
t653 = t875 * t755 + t787 * t964 - t788 * t965 - t870 * t947;
t929 = t653 * t869 - t874 * t911;
t603 = qJD(5) * t711 + t929;
t553 = pkin(5) * t603 + t563;
t610 = t682 * t875 - t690;
t607 = pkin(4) * t832 - t610;
t709 = t874 * t832 + t869 * t894;
t592 = pkin(5) * t709 + t607;
t1057 = -t1065 * t592 + t553 * t818;
t1056 = t1066 * t592 + t553 * t816;
t654 = qJD(4) * t894 + t755 * t870 + t875 * t947;
t646 = t869 * t654;
t957 = -qJD(5) - t734;
t1033 = t957 * t962 - t646;
t1046 = t957 * t869;
t691 = t875 * t696;
t611 = t870 * t682 + t691;
t608 = -pkin(11) * t832 + t611;
t768 = -pkin(2) * t852 - t804;
t738 = -pkin(3) * t787 + t768;
t628 = pkin(4) * t734 - pkin(11) * t894 + t738;
t577 = -t608 * t869 + t874 * t628;
t568 = -pkin(12) * t711 + t577;
t564 = -pkin(5) * t957 + t568;
t1020 = t564 * t873;
t578 = t608 * t874 + t628 * t869;
t569 = -pkin(12) * t709 + t578;
t549 = -t569 * t868 + t1020;
t1019 = t569 * t873;
t550 = t564 * t868 + t1019;
t602 = t874 * t653 - t832 * t962 + t869 * t911 - t894 * t963;
t960 = qJD(6) * t873;
t949 = t873 * t602 - t868 * t603 - t709 * t960;
t961 = qJD(6) * t868;
t557 = -t711 * t961 + t949;
t895 = t709 * t868 - t873 * t711;
t932 = t602 * t868 + t873 * t603;
t558 = -qJD(6) * t895 + t932;
t600 = t602 * t869;
t1018 = t711 * t868;
t638 = t873 * t709 + t1018;
t648 = t874 * t654;
t729 = qJD(6) - t957;
t1055 = -(-t894 * MDP(18) + MDP(19) * t734 + t832 * MDP(20) - t738 * MDP(24)) * t734 + MDP(22) * t911 + t653 * MDP(20) + (MDP(19) * t894 - MDP(21) * t832 - MDP(23) * t738 - MDP(27) * t711 + MDP(28) * t709 + MDP(29) * t957 - MDP(30) * t577 + MDP(31) * t578 + MDP(35) * t638 - MDP(37) * t549 + MDP(38) * t550) * t894 + (-t1049 * t957 - t1033) * MDP(27) + (-t1046 * t957 + t648) * MDP(28) + t557 * t818 * MDP(32) + (t1064 * t711 + t600) * MDP(25) + (t1046 * t711 - t1064 * t709 + t602 * t874 - t869 * t603) * MDP(26) + (t1065 * t638 - t557 * t816 - t818 * t558) * MDP(33) + (MDP(32) * t1065 + MDP(33) * t1066 + MDP(34) * t894) * t895 + (MDP(34) * t818 - MDP(35) * t816 - MDP(21)) * t654 + (-MDP(34) * t1065 - MDP(35) * t1066 - MDP(36) * t894) * t729;
t1054 = t592 * t638;
t1053 = t592 * t895;
t1052 = t638 * t729;
t1051 = t729 * t895;
t774 = -t844 * t870 + t846 * t875;
t1043 = qJD(4) * t774 + t1067 * t870 + t1068 * t875;
t884 = t819 * t962 - t1041;
t743 = -t771 * t874 + t869 * t943;
t926 = t760 * t874 + t743;
t1039 = t654 * MDP(36) + (-t638 ^ 2 + t895 ^ 2) * MDP(33) - t638 * MDP(32) * t895;
t863 = t866 ^ 2;
t1038 = -0.2e1 * t863 * t956;
t1035 = MDP(5) * (t872 ^ 2 - t877 ^ 2);
t750 = t818 * t819;
t621 = t695 * t870 + t691;
t907 = pkin(3) * t965 - t621;
t1003 = t866 * t877;
t811 = t1004 * t876 + t867 * t871;
t1024 = pkin(1) * t872;
t801 = pkin(8) * t1003 + (pkin(9) + t1024) * t867;
t923 = -t801 * t871 + t876 * t802;
t707 = -pkin(3) * t1003 - pkin(10) * t811 + t923;
t810 = t1004 * t871 - t867 * t876;
t979 = t876 * t801 + t871 * t802;
t716 = -pkin(10) * t810 + t979;
t985 = t870 * t707 + t875 * t716;
t633 = -pkin(11) * t1003 + t985;
t747 = t875 * t810 + t811 * t870;
t748 = -t810 * t870 + t811 * t875;
t800 = t853 + (-pkin(2) - t1023) * t867;
t754 = pkin(3) * t810 + t800;
t665 = pkin(4) * t747 - pkin(11) * t748 + t754;
t993 = t874 * t633 + t869 * t665;
t1034 = t1061 * t874;
t983 = pkin(4) * t943 + t1043;
t861 = -pkin(3) * t876 - pkin(2);
t756 = pkin(4) * t817 - pkin(11) * t819 + t861;
t1032 = -t1044 * t874 + t1061 * t869 - t756 * t962 + t774 * t963;
t1031 = t1045 * t874 + t869 * t658;
t1025 = -pkin(11) - pkin(12);
t1022 = pkin(3) * t875;
t858 = pkin(3) * t870 + pkin(11);
t1021 = -pkin(12) - t858;
t1011 = t787 * t842;
t1010 = t788 * t842;
t1009 = t819 * t869;
t1008 = t819 * t874;
t1007 = t842 * t871;
t1006 = t842 * t876;
t878 = qJD(1) ^ 2;
t1005 = t863 * t878;
t765 = t874 * t774;
t997 = t563 * t869 + t607 * t962;
t995 = t874 * t610 + t869 * t677;
t992 = -t1029 * t750 + t742 * t868 - t743 * t873 + t816 * t760;
t939 = t819 * t963;
t991 = -t760 * t1002 - t961 * t1009 + (t1008 * t1029 - t1041) * t873 + (-t939 - t743) * t868;
t986 = pkin(5) * t884 + t983;
t980 = t869 * t756 + t765;
t977 = t1060 + t907;
t797 = pkin(8) * t910 + qJD(2) * t849;
t940 = qJD(2) * t1003;
t969 = qJD(2) * t872;
t809 = t867 * pkin(1) * t969 + pkin(8) * t940;
t968 = qJD(2) * t876;
t958 = qJD(2) - t852;
t950 = t869 * t1003;
t860 = -pkin(5) * t874 - pkin(4);
t945 = qJD(5) * t1025;
t944 = t863 * t970;
t941 = t866 * t969;
t936 = qJD(5) * t1021;
t914 = -t870 * t627 - t875 * t636 - t682 * t964 + t696 * t965;
t562 = pkin(11) * t911 - t914;
t721 = pkin(3) * t947 + t797;
t583 = t654 * pkin(4) - t653 * pkin(11) + t721;
t547 = -qJD(5) * t578 - t562 * t869 + t874 * t583;
t543 = pkin(5) * t654 - pkin(12) * t602 + t547;
t546 = t874 * t562 + t869 * t583 - t608 * t963 + t628 * t962;
t544 = -pkin(12) * t603 + t546;
t935 = t873 * t543 - t868 * t544;
t567 = t569 * t961;
t934 = t868 * t543 - t567;
t933 = -t563 * t874 + t607 * t963;
t931 = -t610 * t869 + t874 * t677;
t930 = -t633 * t869 + t874 * t665;
t928 = t707 * t875 - t870 * t716;
t924 = t874 * t756 - t774 * t869;
t918 = qJD(6) * t564 + t544;
t916 = MDP(4) * t863 * t872 * t877;
t762 = qJD(3) * t811 + t871 * t940;
t739 = pkin(3) * t762 + t809;
t906 = t1060 - t611;
t905 = pkin(1) * t1038;
t632 = pkin(4) * t1003 - t928;
t862 = t874 * pkin(12);
t815 = t858 * t874 + t862;
t904 = qJD(6) * t815 - t874 * t936 - t1058 + t1059;
t845 = pkin(11) * t874 + t862;
t903 = qJD(6) * t845 - t874 * t945 + t1059 + t931;
t814 = t1021 * t869;
t902 = -qJD(6) * t814 - t869 * t936 + t1031 + t1062;
t843 = t1025 * t869;
t901 = -qJD(6) * t843 - t869 * t945 + t1062 + t995;
t694 = -pkin(12) * t1009 + t980;
t900 = t765 * qJD(5) + qJD(6) * t694 + t1034 - t926 * pkin(12) + (-(pkin(12) * t819 - t756) * qJD(5) + t1044) * t869 + t1042 * pkin(5);
t678 = pkin(5) * t817 - pkin(12) * t1008 + t924;
t899 = pkin(12) * t884 - qJD(6) * t678 + t1032;
t731 = t748 * t874 - t950;
t575 = pkin(5) * t747 - pkin(12) * t731 + t930;
t730 = t1003 * t874 + t748 * t869;
t580 = -pkin(12) * t730 + t993;
t898 = t575 * t873 - t580 * t868;
t897 = t575 * t868 + t580 * t873;
t896 = t607 * t734 - t654 * t858;
t670 = t873 * t730 + t731 * t868;
t671 = -t730 * t868 + t731 * t873;
t763 = -qJD(3) * t810 + t876 * t940;
t880 = -qJD(3) * t979 + t876 * t806 - t808 * t871;
t657 = pkin(3) * t941 - pkin(10) * t763 + t880;
t888 = -t801 * t967 + t802 * t966 + t871 * t806 + t876 * t808;
t662 = -pkin(10) * t762 + t888;
t892 = t657 * t875 - t870 * t662 - t707 * t965 - t716 * t964;
t887 = t870 * t657 + t875 * t662 + t707 * t964 - t716 * t965;
t571 = pkin(11) * t941 + t887;
t675 = -qJD(4) * t747 - t762 * t870 + t763 * t875;
t676 = qJD(4) * t748 + t875 * t762 + t763 * t870;
t591 = pkin(4) * t676 - pkin(11) * t675 + t739;
t886 = t874 * t571 + t869 * t591 - t633 * t963 + t665 * t962;
t883 = -t926 - t939;
t572 = -pkin(4) * t941 - t892;
t881 = -qJD(5) * t993 - t571 * t869 + t874 * t591;
t541 = -qJD(6) * t550 + t935;
t859 = -pkin(4) - t1022;
t839 = t860 - t1022;
t751 = t816 * t819;
t741 = pkin(5) * t1009 - t893;
t642 = t654 * t817;
t620 = t654 * t747;
t618 = -qJD(5) * t950 + t675 * t869 + t748 * t962 - t874 * t941;
t617 = -qJD(5) * t730 + t675 * t874 + t869 * t941;
t604 = pkin(5) * t730 + t632;
t566 = qJD(6) * t671 + t617 * t868 + t873 * t618;
t565 = -qJD(6) * t670 + t617 * t873 - t618 * t868;
t559 = pkin(5) * t618 + t572;
t548 = -pkin(12) * t618 + t886;
t545 = pkin(5) * t676 - pkin(12) * t617 + t881;
t540 = t918 * t873 + t934;
t1 = [((-qJD(6) * t897 + t545 * t873 - t548 * t868) * t729 + t898 * t654 + t541 * t747 + t549 * t676 + t559 * t638 + t604 * t558 + t553 * t670 + t592 * t566) * MDP(37) + (MDP(6) * t940 - MDP(7) * t941) * (t852 + t971) + (-t653 * t747 - t654 * t748 - t675 * t734 - t676 * t894) * MDP(19) + (t653 * t748 + t675 * t894) * MDP(18) + (t887 * t832 + t739 * t894 + t754 * t653 + t721 * t748 + t738 * t675 + (-t914 * t877 + (-qJD(1) * t985 - t611) * t969) * t866) * MDP(24) + (-t675 * t832 + (-t653 * t877 + (qJD(1) * t748 + t894) * t969) * t866) * MDP(20) + (t755 * t811 + t763 * t788) * MDP(11) + (-t603 * t747 + t618 * t957 - t654 * t730 - t676 * t709) * MDP(28) + (t602 * t747 - t617 * t957 + t654 * t731 + t676 * t711) * MDP(27) + (-t676 * t957 + t620) * MDP(29) + (-t546 * t747 + t563 * t731 + t572 * t711 - t578 * t676 + t632 * t602 + t607 * t617 - t654 * t993 + t886 * t957) * MDP(31) + (t547 * t747 + t563 * t730 + t572 * t709 + t577 * t676 + t632 * t603 + t607 * t618 + t654 * t930 - t881 * t957) * MDP(30) + (-(qJD(6) * t898 + t545 * t868 + t548 * t873) * t729 - t897 * t654 - t540 * t747 - t550 * t676 - t559 * t895 + t604 * t557 + t553 * t671 + t592 * t565) * MDP(38) + (t557 * t747 + t565 * t729 + t654 * t671 - t676 * t895) * MDP(34) + (t557 * t671 - t565 * t895) * MDP(32) + (-t557 * t670 - t558 * t671 - t565 * t638 + t566 * t895) * MDP(33) + (-t558 * t747 - t566 * t729 - t638 * t676 - t654 * t670) * MDP(35) + t1035 * t1038 + (t676 * t729 + t620) * MDP(36) + (-t602 * t730 - t603 * t731 - t617 * t709 - t618 * t711) * MDP(26) + (t602 * t731 + t617 * t711) * MDP(25) + (-t842 * t866 - t944) * MDP(15) * t969 + (-t832 * t866 - t944) * MDP(22) * t969 + (-t796 * t867 - t808 * t852 + t877 * t905) * MDP(10) + (-t797 * t867 - t809 * t852 + t872 * t905) * MDP(9) + (t888 * t842 + t809 * t788 + t800 * t755 + t797 * t811 + t768 * t763 + (t889 * t877 + (-qJD(1) * t979 - t723) * t969) * t866) * MDP(17) + (-t763 * t842 + (-t755 * t877 + (qJD(1) * t811 + t788) * t969) * t866) * MDP(13) + (t762 * t842 + (t947 * t877 + (-qJD(1) * t810 + t787) * t969) * t866) * MDP(14) + (t676 * t832 + (t654 * t877 + (-qJD(1) * t747 - t734) * t969) * t866) * MDP(21) + (-t880 * t842 - t809 * t787 + t800 * t947 + t797 * t810 + t768 * t762 + (-t879 * t877 + (qJD(1) * t923 + t722) * t969) * t866) * MDP(16) + (-t892 * t832 + t739 * t734 + t754 * t654 + t721 * t747 + t738 * t676 + (t913 * t877 + (qJD(1) * t928 + t610) * t969) * t866) * MDP(23) + 0.2e1 * t916 * t956 + (-t755 * t810 - t788 * t762 + t763 * t787 - t811 * t947) * MDP(12); (-t982 * MDP(20) - t1042 * MDP(21) + t1043 * MDP(23) + MDP(24) * t1063) * t832 + (t1041 * t711 + t926 * t709 + (-t600 - t603 * t874 + (t709 * t869 - t711 * t874) * qJD(5)) * t819) * MDP(26) + t958 * MDP(6) * t942 + (-t1042 * t729 + t642) * MDP(36) + (t924 * t654 + t547 * t817 - t893 * t603 + t563 * t1009 - (-t774 * t962 + (-qJD(5) * t756 - t1044) * t869 - t1034) * t957 + t983 * t709 - t1042 * t577 + t884 * t607) * MDP(30) + (-t1042 * t738 + t861 * t654 + t721 * t817 + t908 * t734) * MDP(23) + (t1042 * t894 - t653 * t817 - t654 * t819 - t734 * t982) * MDP(19) + (t563 * t1008 - t1032 * t957 + t1042 * t578 - t546 * t817 - t602 * t893 + t883 * t607 - t980 * t654 + t983 * t711) * MDP(31) + (t1042 * t709 - t603 * t817 - t646 * t819 + t884 * t957) * MDP(28) + (-t1042 * t711 + t602 * t817 + t648 * t819 - t883 * t957) * MDP(27) + (t1042 * t957 + t642) * MDP(29) + (-(t678 * t868 + t694 * t873) * t654 - t540 * t817 + t741 * t557 - t553 * t751 + (t868 * t900 + t873 * t899) * t729 - t986 * t895 + t992 * t592 + t1042 * t550) * MDP(38) + (t1042 * t895 + t557 * t817 - t654 * t751 + t729 * t992) * MDP(34) + ((t678 * t873 - t694 * t868) * t654 + t541 * t817 + t741 * t558 + t553 * t750 + (t868 * t899 - t873 * t900) * t729 + t986 * t638 + t991 * t592 - t1042 * t549) * MDP(37) + (t1042 * t638 - t558 * t817 - t654 * t750 - t729 * t991) * MDP(35) + (t861 * t653 + t721 * t819 + t982 * t738 + t894 * t908) * MDP(24) + (t653 * t819 + t894 * t982) * MDP(18) + (t842 * MDP(15) + t832 * MDP(22) - t958 * MDP(7) + (qJD(2) * t819 - t894) * MDP(20) + (-qJD(2) * t774 + t611) * MDP(24) + (-qJD(2) * t817 + t734) * MDP(21) + (qJD(2) * t893 - t610) * MDP(23)) * t943 + (-t557 * t751 - t895 * t992) * MDP(32) + (-t557 * t750 + t558 * t751 - t638 * t992 + t895 * t991) * MDP(33) + t1005 * t1035 + (pkin(8) * t911 + t804 * t852 + (-t867 * t956 + t1005) * t1023) * MDP(10) + (t1005 * t1024 + t807 * t852 - t797) * MDP(9) + ((t755 - t1011) * t876 + (-t947 + t1010) * t871) * MDP(12) + (t1008 * t602 + t711 * t883) * MDP(25) + (-t1006 * t788 + t755 * t871) * MDP(11) + (-pkin(2) * t947 - t797 * t876 + t922 * t842 + t807 * t787 + (pkin(9) * t1006 + t768 * t871) * qJD(3) + (-t722 * t872 + (-pkin(9) * t969 - t768 * t877) * t871) * t972) * MDP(16) + (t842 * t967 + (-t877 * t1007 + (-t787 + t968) * t872) * t972) * MDP(14) + (-pkin(2) * t755 + t797 * t871 - t978 * t842 - t807 * t788 + (-pkin(9) * t1007 + t768 * t876) * qJD(3) + (-t768 * t1001 + (-pkin(9) * t968 + t723) * t872) * t972) * MDP(17) + (-t842 * t966 + (t842 * t1001 + (qJD(2) * t871 - t788) * t872) * t972) * MDP(13) - t878 * t916; (-t722 * t842 - t768 * t787 - t889) * MDP(17) + (-t723 * t842 - t768 * t788 + t879) * MDP(16) + (t859 * t603 + t896 * t869 + t907 * t709 - (-t858 * t962 + t1058) * t957 + t933) * MDP(30) + t1055 + (-t622 * t832 + (-t788 * t894 + t832 * t964 - t870 * t911) * pkin(3) + t914) * MDP(24) + (t859 * t602 + t896 * t874 + t907 * t711 - (t858 * t963 + t1031) * t957 + t997) * MDP(31) + (-t787 ^ 2 + t788 ^ 2) * MDP(12) - t788 * t787 * MDP(11) + (t755 + t1011) * MDP(13) + (-t947 - t1010) * MDP(14) + (-t621 * t832 + (-t734 * t788 + t832 * t965 + t875 * t911) * pkin(3) - t913) * MDP(23) + MDP(15) * t911 + ((t814 * t873 - t815 * t868) * t654 + t839 * t558 + (t868 * t902 - t873 * t904) * t729 + t977 * t638 + t1056) * MDP(37) + (-(t814 * t868 + t815 * t873) * t654 + t839 * t557 + (t868 * t904 + t873 * t902) * t729 - t977 * t895 + t1057) * MDP(38); (-t611 * t832 - t913) * MDP(23) + t1055 + (-t610 * t832 + t914) * MDP(24) + (-pkin(4) * t603 + pkin(11) * t1033 + t1050 * t607 - t611 * t709 + t931 * t957 + t933) * MDP(30) + ((t843 * t873 - t845 * t868) * t654 + t860 * t558 + (t868 * t901 - t873 * t903) * t729 + t906 * t638 + t1056) * MDP(37) + (-(t843 * t868 + t845 * t873) * t654 + t860 * t557 + (t868 * t903 + t873 * t901) * t729 - t906 * t895 + t1057) * MDP(38) + (-pkin(4) * t602 - t995 * t957 - t611 * t711 + t607 * t1049 + (-t957 * t963 - t648) * pkin(11) + t997) * MDP(31); t711 * t709 * MDP(25) + (-t709 ^ 2 + t711 ^ 2) * MDP(26) + (-t709 * t957 + t602) * MDP(27) + (-t929 + (-qJD(5) - t957) * t711) * MDP(28) + t654 * MDP(29) + (-t578 * t957 - t607 * t711 + t547) * MDP(30) + (-t577 * t957 + t607 * t709 - t546) * MDP(31) + (t557 + t1052) * MDP(34) + (-t558 - t1051) * MDP(35) + (-(-t568 * t868 - t1019) * t729 + t1053 + (-t638 * t711 + t654 * t873 - t729 * t961) * pkin(5) + t541) * MDP(37) + (t1054 + t567 + (-t569 * t729 - t543) * t868 + (t568 * t729 - t918) * t873 + (-t654 * t868 + t711 * t895 - t729 * t960) * pkin(5)) * MDP(38) + t1039; (t949 + t1052) * MDP(34) + (-t932 - t1051) * MDP(35) + (t550 * t729 + t1053 + t935) * MDP(37) + (-t873 * t544 + t549 * t729 + t1054 - t934) * MDP(38) + (-MDP(34) * t1018 + MDP(35) * t895 - MDP(37) * t550 - MDP(38) * t1020) * qJD(6) + t1039;];
tauc  = t1;
