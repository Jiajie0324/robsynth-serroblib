% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 11:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 11:27:14
% EndTime: 2019-05-08 11:27:30
% DurationCPUTime: 16.30s
% Computational Cost: add. (203425->386), mult. (430771->586), div. (0->0), fcn. (357422->14), ass. (0->327)
t2698 = sin(pkin(6));
t2710 = cos(qJ(2));
t2764 = t2698 * t2710;
t2758 = qJD(1) * t2764;
t2685 = -qJD(3) + t2758;
t2728 = -qJD(4) + t2685;
t2727 = t2728 ^ 2;
t2699 = cos(pkin(6));
t2694 = qJD(1) * t2699 + qJD(2);
t2703 = sin(qJ(3));
t2709 = cos(qJ(3));
t2704 = sin(qJ(2));
t2772 = qJD(1) * t2704;
t2759 = t2698 * t2772;
t2668 = t2694 * t2709 - t2703 * t2759;
t2669 = t2694 * t2703 + t2709 * t2759;
t2702 = sin(qJ(4));
t2708 = cos(qJ(4));
t2649 = -t2708 * t2668 + t2669 * t2702;
t2648 = qJD(5) + t2649;
t2647 = qJD(6) + t2648;
t2787 = qJD(6) + t2647;
t2760 = qJDD(1) * t2698;
t2693 = t2710 * t2760;
t2729 = qJD(2) * t2759 - t2693;
t2725 = qJDD(3) + t2729;
t2767 = t2668 * t2669;
t2638 = t2725 + t2767;
t2674 = qJD(2) * t2758 + t2704 * t2760;
t2752 = qJDD(1) * t2699 + qJDD(2);
t2753 = t2703 * t2674 - t2709 * t2752;
t2642 = -qJD(3) * t2669 - t2753;
t2722 = -t2709 * t2674 - t2703 * t2752;
t2643 = t2668 * qJD(3) - t2722;
t2734 = -t2702 * t2642 - t2708 * t2643;
t2598 = -t2649 * qJD(4) - t2734;
t2584 = t2649 * t2728 + t2598;
t2651 = t2668 * t2702 + t2669 * t2708;
t2701 = sin(qJ(5));
t2707 = cos(qJ(5));
t2633 = t2651 * t2701 + t2707 * t2728;
t2635 = t2707 * t2651 - t2701 * t2728;
t2700 = sin(qJ(6));
t2706 = cos(qJ(6));
t2602 = t2706 * t2633 + t2635 * t2700;
t2786 = t2602 ^ 2;
t2604 = -t2633 * t2700 + t2635 * t2706;
t2785 = t2604 ^ 2;
t2784 = t2633 ^ 2;
t2783 = t2635 ^ 2;
t2782 = t2647 ^ 2;
t2781 = t2648 ^ 2;
t2780 = t2649 ^ 2;
t2779 = t2651 ^ 2;
t2778 = t2668 ^ 2;
t2777 = t2669 ^ 2;
t2776 = t2685 ^ 2;
t2775 = t2694 ^ 2;
t2774 = t2699 * g(3);
t2773 = qJD(1) * t2698;
t2771 = t2602 * t2604;
t2770 = t2633 * t2635;
t2769 = t2648 * t2633;
t2768 = t2649 * t2651;
t2766 = t2668 * t2685;
t2712 = qJD(1) ^ 2;
t2765 = t2698 ^ 2 * t2712;
t2763 = -qJD(3) - t2685;
t2762 = qJD(5) - t2648;
t2761 = qJD(6) - t2647;
t2705 = sin(qJ(1));
t2711 = cos(qJ(1));
t2688 = -g(1) * t2711 - g(2) * t2705;
t2670 = -pkin(1) * t2712 + pkin(8) * t2760 + t2688;
t2673 = (-pkin(2) * t2710 - pkin(9) * t2704) * t2773;
t2687 = t2705 * g(1) - t2711 * g(2);
t2720 = t2712 * t2698 * pkin(8) + qJDD(1) * pkin(1) + t2687;
t2718 = t2699 * t2720;
t2716 = (-t2698 * g(3) + t2718) * t2704;
t2714 = t2752 * pkin(9) - t2775 * pkin(2) + (t2673 * t2773 + t2670) * t2710 + t2716;
t2715 = -t2693 * pkin(2) - t2674 * pkin(9) - t2774 + ((-pkin(9) * t2694 * t2710 + (qJD(2) + t2694) * t2704 * pkin(2)) * qJD(1) - t2720) * t2698;
t2592 = t2703 * t2715 + t2709 * t2714;
t2655 = -pkin(3) * t2685 - pkin(10) * t2669;
t2571 = -pkin(3) * t2778 + pkin(10) * t2642 + t2655 * t2685 + t2592;
t2591 = -t2703 * t2714 + t2709 * t2715;
t2713 = t2591 + (-t2643 - t2766) * pkin(10) + t2638 * pkin(3);
t2539 = t2708 * t2571 + t2702 * t2713;
t2615 = pkin(4) * t2649 - pkin(11) * t2651;
t2723 = qJDD(4) + t2725;
t2527 = -pkin(4) * t2727 + pkin(11) * t2723 - t2649 * t2615 + t2539;
t2754 = t2704 * t2670 - t2710 * t2718;
t2620 = -t2752 * pkin(2) - t2775 * pkin(9) + (g(3) * t2710 + t2673 * t2772) * t2698 + t2754;
t2581 = -t2642 * pkin(3) - t2778 * pkin(10) + t2669 * t2655 + t2620;
t2755 = -t2708 * t2642 + t2702 * t2643;
t2582 = (0.2e1 * qJD(4) - t2685) * t2651 + t2755;
t2537 = t2582 * pkin(4) - pkin(11) * t2584 + t2581;
t2500 = t2707 * t2527 + t2701 * t2537;
t2499 = -t2701 * t2527 + t2707 * t2537;
t2538 = -t2571 * t2702 + t2708 * t2713;
t2717 = -t2707 * t2598 - t2701 * t2723;
t2576 = -t2633 * qJD(5) - t2717;
t2756 = t2701 * t2598 - t2707 * t2723;
t2726 = qJD(5) * t2635 + t2756;
t2757 = -t2700 * t2576 - t2706 * t2726;
t2751 = t2694 * t2758;
t2724 = t2651 * qJD(4) + qJDD(5) + t2755;
t2572 = t2724 - t2770;
t2484 = (-t2576 - t2769) * pkin(12) + t2572 * pkin(5) + t2499;
t2607 = pkin(5) * t2648 - pkin(12) * t2635;
t2486 = -pkin(5) * t2784 - pkin(12) * t2726 - t2648 * t2607 + t2500;
t2461 = t2484 * t2706 - t2486 * t2700;
t2462 = t2484 * t2700 + t2486 * t2706;
t2445 = t2461 * t2706 + t2462 * t2700;
t2446 = -t2461 * t2700 + t2462 * t2706;
t2438 = -t2445 * t2701 + t2446 * t2707;
t2526 = -t2723 * pkin(4) - t2727 * pkin(11) + t2615 * t2651 - t2538;
t2503 = pkin(5) * t2726 - pkin(12) * t2784 + t2607 * t2635 + t2526;
t2435 = t2438 * t2702 - t2503 * t2708;
t2436 = t2438 * t2708 + t2503 * t2702;
t2430 = -t2435 * t2703 + t2436 * t2709;
t2437 = t2445 * t2707 + t2446 * t2701;
t2750 = t2430 * t2704 - t2437 * t2710;
t2474 = -t2499 * t2701 + t2500 * t2707;
t2467 = t2474 * t2702 - t2526 * t2708;
t2468 = t2474 * t2708 + t2526 * t2702;
t2448 = -t2467 * t2703 + t2468 * t2709;
t2473 = t2499 * t2707 + t2500 * t2701;
t2749 = t2448 * t2704 - t2473 * t2710;
t2520 = -t2604 * t2761 + t2757;
t2719 = -t2706 * t2576 + t2700 * t2726;
t2522 = t2602 * t2761 + t2719;
t2493 = t2520 * t2700 + t2522 * t2706;
t2494 = t2520 * t2706 - t2522 * t2700;
t2472 = -t2493 * t2701 + t2494 * t2707;
t2554 = -t2785 - t2786;
t2469 = t2472 * t2702 - t2554 * t2708;
t2470 = t2472 * t2708 + t2554 * t2702;
t2450 = -t2469 * t2703 + t2470 * t2709;
t2471 = t2493 * t2707 + t2494 * t2701;
t2748 = t2450 * t2704 - t2471 * t2710;
t2721 = -qJDD(6) - t2724;
t2550 = -t2721 - t2771;
t2567 = -t2782 - t2786;
t2528 = t2550 * t2706 + t2567 * t2700;
t2529 = -t2550 * t2700 + t2567 * t2706;
t2498 = -t2528 * t2701 + t2529 * t2707;
t2519 = t2604 * t2787 - t2757;
t2479 = t2498 * t2702 - t2519 * t2708;
t2480 = t2498 * t2708 + t2519 * t2702;
t2456 = -t2479 * t2703 + t2480 * t2709;
t2497 = t2528 * t2707 + t2529 * t2701;
t2747 = t2456 * t2704 - t2497 * t2710;
t2551 = t2721 - t2771;
t2578 = -t2782 - t2785;
t2533 = t2551 * t2700 + t2578 * t2706;
t2534 = t2551 * t2706 - t2578 * t2700;
t2502 = -t2533 * t2701 + t2534 * t2707;
t2521 = -t2602 * t2787 - t2719;
t2481 = t2502 * t2702 - t2521 * t2708;
t2482 = t2502 * t2708 + t2521 * t2702;
t2460 = -t2481 * t2703 + t2482 * t2709;
t2501 = t2533 * t2707 + t2534 * t2701;
t2746 = t2460 * t2704 - t2501 * t2710;
t2504 = t2538 * t2708 + t2539 * t2702;
t2505 = -t2538 * t2702 + t2539 * t2708;
t2478 = -t2504 * t2703 + t2505 * t2709;
t2745 = t2478 * t2704 - t2581 * t2710;
t2560 = -t2635 * t2762 - t2756;
t2562 = t2633 * t2762 + t2717;
t2531 = t2560 * t2707 - t2562 * t2701;
t2588 = -t2783 - t2784;
t2511 = t2531 * t2702 - t2588 * t2708;
t2512 = t2531 * t2708 + t2588 * t2702;
t2490 = -t2511 * t2703 + t2512 * t2709;
t2530 = t2560 * t2701 + t2562 * t2707;
t2744 = t2490 * t2704 - t2530 * t2710;
t2594 = -t2781 - t2784;
t2543 = -t2572 * t2701 + t2594 * t2707;
t2559 = (qJD(5) + t2648) * t2635 + t2756;
t2517 = t2543 * t2702 - t2559 * t2708;
t2518 = t2543 * t2708 + t2559 * t2702;
t2492 = -t2517 * t2703 + t2518 * t2709;
t2542 = t2572 * t2707 + t2594 * t2701;
t2743 = t2492 * t2704 - t2542 * t2710;
t2573 = -t2724 - t2770;
t2597 = -t2781 - t2783;
t2547 = t2573 * t2707 - t2597 * t2701;
t2561 = t2576 - t2769;
t2523 = t2547 * t2702 - t2561 * t2708;
t2524 = t2547 * t2708 + t2561 * t2702;
t2496 = -t2523 * t2703 + t2524 * t2709;
t2546 = t2573 * t2701 + t2597 * t2707;
t2742 = t2496 * t2704 - t2546 * t2710;
t2583 = -t2651 * t2685 - t2755;
t2585 = t2649 * t2685 + t2734;
t2548 = t2583 * t2702 + t2585 * t2708;
t2549 = t2583 * t2708 - t2585 * t2702;
t2514 = -t2548 * t2703 + t2549 * t2709;
t2599 = -t2779 - t2780;
t2741 = t2514 * t2704 - t2599 * t2710;
t2609 = t2723 - t2768;
t2612 = -t2727 - t2780;
t2579 = t2609 * t2708 + t2612 * t2702;
t2580 = -t2609 * t2702 + t2612 * t2708;
t2545 = -t2579 * t2703 + t2580 * t2709;
t2740 = t2545 * t2704 - t2582 * t2710;
t2608 = -t2723 - t2768;
t2629 = -t2779 - t2727;
t2589 = t2608 * t2702 + t2629 * t2708;
t2590 = t2608 * t2708 - t2629 * t2702;
t2556 = -t2589 * t2703 + t2590 * t2709;
t2739 = t2556 * t2704 - t2584 * t2710;
t2558 = -t2591 * t2703 + t2592 * t2709;
t2738 = t2558 * t2704 - t2620 * t2710;
t2624 = t2669 * t2763 - t2753;
t2626 = t2668 * t2763 + t2722;
t2596 = t2624 * t2709 - t2626 * t2703;
t2636 = -t2777 - t2778;
t2737 = t2596 * t2704 - t2636 * t2710;
t2644 = -t2776 - t2778;
t2606 = -t2638 * t2703 + t2644 * t2709;
t2623 = (qJD(3) - t2685) * t2669 + t2753;
t2736 = t2606 * t2704 - t2623 * t2710;
t2637 = -t2725 + t2767;
t2653 = -t2776 - t2777;
t2614 = t2637 * t2709 - t2653 * t2703;
t2625 = t2643 - t2766;
t2735 = t2614 * t2704 - t2625 * t2710;
t2645 = -g(3) * t2764 - t2754;
t2646 = t2710 * t2670 + t2716;
t2733 = t2645 * t2710 + t2646 * t2704;
t2657 = t2751 - t2674;
t2677 = t2694 * t2759;
t2658 = t2677 - t2729;
t2732 = t2657 * t2710 + t2658 * t2704;
t2696 = t2704 ^ 2;
t2665 = -t2696 * t2765 - t2775;
t2684 = t2710 * t2704 * t2765;
t2672 = t2684 - t2752;
t2731 = t2665 * t2710 + t2672 * t2704;
t2671 = t2684 + t2752;
t2697 = t2710 ^ 2;
t2675 = -t2697 * t2765 - t2775;
t2730 = t2671 * t2710 + t2675 * t2704;
t2682 = -qJDD(1) * t2705 - t2711 * t2712;
t2681 = qJDD(1) * t2711 - t2705 * t2712;
t2676 = (-t2696 - t2697) * t2765;
t2661 = -t2698 * t2720 - t2774;
t2659 = t2677 + t2729;
t2656 = t2751 + t2674;
t2654 = -t2671 * t2704 + t2675 * t2710;
t2652 = -t2665 * t2704 + t2672 * t2710;
t2630 = -t2657 * t2704 + t2658 * t2710;
t2628 = -t2698 * t2659 + t2699 * t2730;
t2627 = t2699 * t2659 + t2698 * t2730;
t2622 = -t2698 * t2656 + t2699 * t2731;
t2621 = t2699 * t2656 + t2698 * t2731;
t2619 = -t2698 * t2676 + t2699 * t2732;
t2618 = t2699 * t2676 + t2698 * t2732;
t2613 = t2637 * t2703 + t2653 * t2709;
t2611 = -t2645 * t2704 + t2646 * t2710;
t2605 = t2638 * t2709 + t2644 * t2703;
t2601 = -t2698 * t2661 + t2699 * t2733;
t2600 = t2699 * t2661 + t2698 * t2733;
t2595 = t2624 * t2703 + t2626 * t2709;
t2587 = t2614 * t2710 + t2625 * t2704;
t2586 = t2606 * t2710 + t2623 * t2704;
t2577 = t2596 * t2710 + t2636 * t2704;
t2569 = -t2698 * t2613 + t2699 * t2735;
t2568 = t2699 * t2613 + t2698 * t2735;
t2566 = -t2698 * t2605 + t2699 * t2736;
t2565 = t2699 * t2605 + t2698 * t2736;
t2557 = t2591 * t2709 + t2592 * t2703;
t2555 = t2589 * t2709 + t2590 * t2703;
t2553 = -t2698 * t2595 + t2699 * t2737;
t2552 = t2699 * t2595 + t2698 * t2737;
t2544 = t2579 * t2709 + t2580 * t2703;
t2541 = t2558 * t2710 + t2620 * t2704;
t2540 = t2556 * t2710 + t2584 * t2704;
t2532 = t2545 * t2710 + t2582 * t2704;
t2516 = -t2698 * t2557 + t2699 * t2738;
t2515 = t2699 * t2557 + t2698 * t2738;
t2513 = t2548 * t2709 + t2549 * t2703;
t2510 = -t2698 * t2555 + t2699 * t2739;
t2509 = t2699 * t2555 + t2698 * t2739;
t2508 = t2514 * t2710 + t2599 * t2704;
t2507 = -t2698 * t2544 + t2699 * t2740;
t2506 = t2699 * t2544 + t2698 * t2740;
t2495 = t2523 * t2709 + t2524 * t2703;
t2491 = t2517 * t2709 + t2518 * t2703;
t2489 = t2511 * t2709 + t2512 * t2703;
t2488 = -t2698 * t2513 + t2699 * t2741;
t2487 = t2699 * t2513 + t2698 * t2741;
t2485 = t2496 * t2710 + t2546 * t2704;
t2483 = t2492 * t2710 + t2542 * t2704;
t2477 = t2504 * t2709 + t2505 * t2703;
t2476 = t2490 * t2710 + t2530 * t2704;
t2475 = t2478 * t2710 + t2581 * t2704;
t2466 = -t2698 * t2495 + t2699 * t2742;
t2465 = t2699 * t2495 + t2698 * t2742;
t2464 = -t2698 * t2491 + t2699 * t2743;
t2463 = t2699 * t2491 + t2698 * t2743;
t2459 = t2481 * t2709 + t2482 * t2703;
t2458 = -t2698 * t2489 + t2699 * t2744;
t2457 = t2699 * t2489 + t2698 * t2744;
t2455 = t2479 * t2709 + t2480 * t2703;
t2454 = -t2698 * t2477 + t2699 * t2745;
t2453 = t2699 * t2477 + t2698 * t2745;
t2452 = t2460 * t2710 + t2501 * t2704;
t2451 = t2456 * t2710 + t2497 * t2704;
t2449 = t2469 * t2709 + t2470 * t2703;
t2447 = t2467 * t2709 + t2468 * t2703;
t2444 = -t2698 * t2459 + t2699 * t2746;
t2443 = t2699 * t2459 + t2698 * t2746;
t2442 = t2448 * t2710 + t2473 * t2704;
t2441 = t2450 * t2710 + t2471 * t2704;
t2440 = -t2698 * t2455 + t2699 * t2747;
t2439 = t2699 * t2455 + t2698 * t2747;
t2434 = -t2698 * t2447 + t2699 * t2749;
t2433 = t2699 * t2447 + t2698 * t2749;
t2432 = -t2698 * t2449 + t2699 * t2748;
t2431 = t2699 * t2449 + t2698 * t2748;
t2429 = t2435 * t2709 + t2436 * t2703;
t2428 = t2430 * t2710 + t2437 * t2704;
t2427 = -t2698 * t2429 + t2699 * t2750;
t2426 = t2699 * t2429 + t2698 * t2750;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2682, -t2681, 0, -t2687 * t2705 + t2688 * t2711, 0, 0, 0, 0, 0, 0, -t2628 * t2705 + t2654 * t2711, -t2622 * t2705 + t2652 * t2711, -t2619 * t2705 + t2630 * t2711, -t2601 * t2705 + t2611 * t2711, 0, 0, 0, 0, 0, 0, -t2566 * t2705 + t2586 * t2711, -t2569 * t2705 + t2587 * t2711, -t2553 * t2705 + t2577 * t2711, -t2516 * t2705 + t2541 * t2711, 0, 0, 0, 0, 0, 0, -t2507 * t2705 + t2532 * t2711, -t2510 * t2705 + t2540 * t2711, -t2488 * t2705 + t2508 * t2711, -t2454 * t2705 + t2475 * t2711, 0, 0, 0, 0, 0, 0, -t2464 * t2705 + t2483 * t2711, -t2466 * t2705 + t2485 * t2711, -t2458 * t2705 + t2476 * t2711, -t2434 * t2705 + t2442 * t2711, 0, 0, 0, 0, 0, 0, -t2440 * t2705 + t2451 * t2711, -t2444 * t2705 + t2452 * t2711, -t2432 * t2705 + t2441 * t2711, -t2427 * t2705 + t2428 * t2711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2681, t2682, 0, t2687 * t2711 + t2688 * t2705, 0, 0, 0, 0, 0, 0, t2628 * t2711 + t2654 * t2705, t2622 * t2711 + t2652 * t2705, t2619 * t2711 + t2630 * t2705, t2601 * t2711 + t2611 * t2705, 0, 0, 0, 0, 0, 0, t2566 * t2711 + t2586 * t2705, t2569 * t2711 + t2587 * t2705, t2553 * t2711 + t2577 * t2705, t2516 * t2711 + t2541 * t2705, 0, 0, 0, 0, 0, 0, t2507 * t2711 + t2532 * t2705, t2510 * t2711 + t2540 * t2705, t2488 * t2711 + t2508 * t2705, t2454 * t2711 + t2475 * t2705, 0, 0, 0, 0, 0, 0, t2464 * t2711 + t2483 * t2705, t2466 * t2711 + t2485 * t2705, t2458 * t2711 + t2476 * t2705, t2434 * t2711 + t2442 * t2705, 0, 0, 0, 0, 0, 0, t2440 * t2711 + t2451 * t2705, t2444 * t2711 + t2452 * t2705, t2432 * t2711 + t2441 * t2705, t2427 * t2711 + t2428 * t2705; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2627, t2621, t2618, t2600, 0, 0, 0, 0, 0, 0, t2565, t2568, t2552, t2515, 0, 0, 0, 0, 0, 0, t2506, t2509, t2487, t2453, 0, 0, 0, 0, 0, 0, t2463, t2465, t2457, t2433, 0, 0, 0, 0, 0, 0, t2439, t2443, t2431, t2426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2712, -qJDD(1), 0, t2688, 0, 0, 0, 0, 0, 0, t2654, t2652, t2630, t2611, 0, 0, 0, 0, 0, 0, t2586, t2587, t2577, t2541, 0, 0, 0, 0, 0, 0, t2532, t2540, t2508, t2475, 0, 0, 0, 0, 0, 0, t2483, t2485, t2476, t2442, 0, 0, 0, 0, 0, 0, t2451, t2452, t2441, t2428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2712, 0, t2687, 0, 0, 0, 0, 0, 0, t2628, t2622, t2619, t2601, 0, 0, 0, 0, 0, 0, t2566, t2569, t2553, t2516, 0, 0, 0, 0, 0, 0, t2507, t2510, t2488, t2454, 0, 0, 0, 0, 0, 0, t2464, t2466, t2458, t2434, 0, 0, 0, 0, 0, 0, t2440, t2444, t2432, t2427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2627, t2621, t2618, t2600, 0, 0, 0, 0, 0, 0, t2565, t2568, t2552, t2515, 0, 0, 0, 0, 0, 0, t2506, t2509, t2487, t2453, 0, 0, 0, 0, 0, 0, t2463, t2465, t2457, t2433, 0, 0, 0, 0, 0, 0, t2439, t2443, t2431, t2426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2675, t2672, t2658, t2646, 0, 0, 0, 0, 0, 0, t2606, t2614, t2596, t2558, 0, 0, 0, 0, 0, 0, t2545, t2556, t2514, t2478, 0, 0, 0, 0, 0, 0, t2492, t2496, t2490, t2448, 0, 0, 0, 0, 0, 0, t2456, t2460, t2450, t2430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2671, t2665, t2657, t2645, 0, 0, 0, 0, 0, 0, -t2623, -t2625, -t2636, -t2620, 0, 0, 0, 0, 0, 0, -t2582, -t2584, -t2599, -t2581, 0, 0, 0, 0, 0, 0, -t2542, -t2546, -t2530, -t2473, 0, 0, 0, 0, 0, 0, -t2497, -t2501, -t2471, -t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2659, t2656, t2676, t2661, 0, 0, 0, 0, 0, 0, t2605, t2613, t2595, t2557, 0, 0, 0, 0, 0, 0, t2544, t2555, t2513, t2477, 0, 0, 0, 0, 0, 0, t2491, t2495, t2489, t2447, 0, 0, 0, 0, 0, 0, t2455, t2459, t2449, t2429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2644, t2637, t2624, t2592, 0, 0, 0, 0, 0, 0, t2580, t2590, t2549, t2505, 0, 0, 0, 0, 0, 0, t2518, t2524, t2512, t2468, 0, 0, 0, 0, 0, 0, t2480, t2482, t2470, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2638, t2653, t2626, t2591, 0, 0, 0, 0, 0, 0, t2579, t2589, t2548, t2504, 0, 0, 0, 0, 0, 0, t2517, t2523, t2511, t2467, 0, 0, 0, 0, 0, 0, t2479, t2481, t2469, t2435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2623, t2625, t2636, t2620, 0, 0, 0, 0, 0, 0, t2582, t2584, t2599, t2581, 0, 0, 0, 0, 0, 0, t2542, t2546, t2530, t2473, 0, 0, 0, 0, 0, 0, t2497, t2501, t2471, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2612, t2608, t2583, t2539, 0, 0, 0, 0, 0, 0, t2543, t2547, t2531, t2474, 0, 0, 0, 0, 0, 0, t2498, t2502, t2472, t2438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2609, t2629, t2585, t2538, 0, 0, 0, 0, 0, 0, -t2559, -t2561, -t2588, -t2526, 0, 0, 0, 0, 0, 0, -t2519, -t2521, -t2554, -t2503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2582, t2584, t2599, t2581, 0, 0, 0, 0, 0, 0, t2542, t2546, t2530, t2473, 0, 0, 0, 0, 0, 0, t2497, t2501, t2471, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2594, t2573, t2560, t2500, 0, 0, 0, 0, 0, 0, t2529, t2534, t2494, t2446; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2572, t2597, t2562, t2499, 0, 0, 0, 0, 0, 0, t2528, t2533, t2493, t2445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2559, t2561, t2588, t2526, 0, 0, 0, 0, 0, 0, t2519, t2521, t2554, t2503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2567, t2551, t2520, t2462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2550, t2578, t2522, t2461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2519, t2521, t2554, t2503;];
f_new_reg  = t1;
