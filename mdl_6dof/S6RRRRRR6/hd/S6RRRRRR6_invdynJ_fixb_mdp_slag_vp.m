% Calculate vector of inverse dynamics joint torques for
% S6RRRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% MDP [38x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRR6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRR6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(38,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR6_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [38 1]), ...
  'S6RRRRRR6_invdynJ_fixb_mdp_slag_vp: MDP has to be [38x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 04:22:28
% EndTime: 2019-03-10 04:23:10
% DurationCPUTime: 31.30s
% Computational Cost: add. (23197->878), mult. (54759->1174), div. (0->0), fcn. (45635->18), ass. (0->378)
t1248 = qJD(5) + qJD(6);
t1029 = sin(qJ(4));
t1035 = cos(qJ(4));
t1026 = cos(pkin(6));
t1178 = qJD(1) * t1026;
t1003 = qJD(2) + t1178;
t1036 = cos(qJ(3));
t1030 = sin(qJ(3));
t1025 = sin(pkin(6));
t1031 = sin(qJ(2));
t1160 = t1025 * t1031;
t1117 = t1030 * t1160;
t923 = -qJD(1) * t1117 + t1003 * t1036;
t1158 = t1025 * t1036;
t1114 = t1031 * t1158;
t924 = qJD(1) * t1114 + t1003 * t1030;
t854 = t1029 * t924 - t1035 * t923;
t1291 = t1248 + t854;
t1037 = cos(qJ(2));
t1148 = t1036 * t1037;
t1174 = qJD(3) * t1036;
t1179 = qJD(1) * t1025;
t1243 = pkin(9) + pkin(10);
t1074 = pkin(2) * t1031 - pkin(9) * t1037;
t942 = t1074 * t1179;
t928 = t1036 * t942;
t1156 = t1026 * t1037;
t1139 = pkin(1) * t1156;
t1092 = qJD(1) * t1139;
t1124 = qJD(1) * t1160;
t941 = -pkin(8) * t1124 + t1092;
t1290 = -t1030 * t941 + t928 + (pkin(3) * t1031 - pkin(10) * t1148) * t1179 + t1243 * t1174;
t1152 = t1030 * t1037;
t1116 = t1025 * t1152;
t1089 = qJD(1) * t1116;
t1208 = t1030 * t942 + t1036 * t941;
t987 = t1243 * t1030;
t1289 = pkin(10) * t1089 - qJD(3) * t987 - t1208;
t1033 = cos(qJ(6));
t1034 = cos(qJ(5));
t1027 = sin(qJ(6));
t1028 = sin(qJ(5));
t1155 = t1027 * t1028;
t957 = -t1033 * t1034 + t1155;
t1287 = t1291 * t957;
t1249 = qJD(3) + qJD(4);
t958 = t1029 * t1030 - t1035 * t1036;
t892 = t1249 * t958;
t1157 = t1025 * t1037;
t1123 = qJD(1) * t1157;
t905 = t958 * t1123;
t1212 = -t892 + t905;
t960 = t1029 * t1036 + t1030 * t1035;
t1211 = (-t1123 + t1249) * t960;
t1154 = t1027 * t1034;
t959 = t1028 * t1033 + t1154;
t1288 = t1291 * t959;
t1170 = qJD(5) * t1034;
t1266 = t1034 * t854;
t1286 = -t1170 - t1266;
t1024 = qJ(3) + qJ(4);
t1016 = sin(t1024);
t1018 = cos(t1024);
t1241 = cos(qJ(1));
t1130 = t1025 * t1241;
t1128 = t1241 * t1031;
t1032 = sin(qJ(1));
t1149 = t1032 * t1037;
t951 = t1026 * t1128 + t1149;
t1183 = t951 * t1016;
t1159 = t1025 * t1032;
t1127 = t1241 * t1037;
t1151 = t1031 * t1032;
t953 = -t1026 * t1151 + t1127;
t887 = -t1016 * t953 + t1018 * t1159;
t1260 = g(3) * (-t1016 * t1160 + t1018 * t1026) + g(2) * (-t1018 * t1130 - t1183) + g(1) * t887;
t1172 = qJD(4) * t1035;
t1173 = qJD(4) * t1029;
t1234 = pkin(1) * t1031;
t1007 = t1026 * t1234;
t944 = pkin(8) * t1123 + qJD(1) * t1007;
t903 = pkin(9) * t1003 + t944;
t1065 = -pkin(2) * t1037 - pkin(9) * t1031 - pkin(1);
t938 = t1065 * t1025;
t918 = qJD(1) * t938;
t839 = t1030 * t918 + t1036 * t903;
t1144 = qJDD(1) * t1026;
t1002 = qJDD(2) + t1144;
t1122 = qJD(2) * t1160;
t1090 = qJD(1) * t1122;
t1142 = qJDD(1) * t1037;
t1001 = t1025 * t1142;
t1131 = pkin(1) * t1144;
t1132 = -pkin(8) * t1001 - qJD(2) * t1092 - t1031 * t1131;
t1049 = -pkin(8) * t1090 - t1132;
t862 = pkin(9) * t1002 + t1049;
t1063 = t1074 * qJD(2);
t864 = (qJD(1) * t1063 + qJDD(1) * t1065) * t1025;
t1041 = -qJD(3) * t839 - t1030 * t862 + t1036 * t864;
t1121 = qJD(2) * t1157;
t1086 = t1036 * t1121;
t1143 = qJDD(1) * t1031;
t1112 = t1025 * t1143;
t842 = qJD(1) * t1086 + qJD(3) * t923 + t1030 * t1002 + t1036 * t1112;
t939 = qJDD(3) - t1001 + t1090;
t713 = pkin(3) * t939 - pkin(10) * t842 + t1041;
t1087 = qJD(2) * t1116;
t1095 = qJD(1) * t1087 + qJD(3) * t924 + t1030 * t1112;
t1054 = t1036 * t1002 - t1095;
t1175 = qJD(3) * t1030;
t1060 = -t1030 * t864 - t1036 * t862 - t918 * t1174 + t1175 * t903;
t718 = pkin(10) * t1054 - t1060;
t838 = -t1030 * t903 + t1036 * t918;
t805 = -pkin(10) * t924 + t838;
t985 = -qJD(3) + t1123;
t792 = -pkin(3) * t985 + t805;
t806 = pkin(10) * t923 + t839;
t1096 = t1029 * t718 - t1035 * t713 + t806 * t1172 + t792 * t1173;
t931 = qJDD(4) + t939;
t671 = -pkin(4) * t931 + t1096;
t1285 = t671 + t1260;
t989 = t1243 * t1036;
t908 = t1029 * t989 + t1035 * t987;
t1284 = -qJD(4) * t908 - t1029 * t1290 + t1289 * t1035;
t1084 = -t944 + (-t1089 + t1175) * pkin(3);
t1066 = t1029 * t923 + t1035 * t924;
t971 = -qJD(4) + t985;
t1067 = t1028 * t971 - t1034 * t1066;
t819 = t1028 * t1066 + t1034 * t971;
t1068 = t1027 * t819 + t1033 * t1067;
t1181 = -qJD(5) - t854;
t1280 = t1028 * t1181;
t801 = t1035 * t806;
t728 = t1029 * t792 + t801;
t723 = -pkin(11) * t971 + t728;
t902 = -pkin(2) * t1003 - t941;
t858 = -pkin(3) * t923 + t902;
t749 = pkin(4) * t854 - pkin(11) * t1066 + t858;
t689 = -t1028 * t723 + t1034 * t749;
t680 = pkin(12) * t1067 + t689;
t673 = -pkin(5) * t1181 + t680;
t1190 = t1033 * t673;
t690 = t1028 * t749 + t1034 * t723;
t681 = -pkin(12) * t819 + t690;
t661 = -t1027 * t681 + t1190;
t1189 = t1033 * t681;
t662 = t1027 * t673 + t1189;
t1168 = qJD(6) * t1033;
t1171 = qJD(5) * t1028;
t742 = t1029 * t1054 + t1035 * t842 + t923 * t1172 - t1173 * t924;
t703 = t1028 * t931 + t1034 * t742 - t1066 * t1171 - t971 * t1170;
t704 = -qJD(5) * t1067 + t1028 * t742 - t1034 * t931;
t1134 = -t1027 * t704 + t1033 * t703 - t819 * t1168;
t1169 = qJD(6) * t1027;
t666 = t1067 * t1169 + t1134;
t1109 = t1027 * t703 + t1033 * t704;
t667 = -qJD(6) * t1068 + t1109;
t701 = t703 * t1028;
t702 = t703 * t1034;
t743 = qJD(4) * t1066 + t1029 * t842 - t1035 * t1054;
t735 = qJDD(5) + t743;
t731 = t1034 * t735;
t734 = qJDD(6) + t735;
t1196 = t1027 * t1067;
t756 = t1033 * t819 - t1196;
t848 = qJD(6) - t1181;
t1283 = t931 * MDP(22) - t743 * MDP(21) + (MDP(19) * t1066 - MDP(21) * t971 - MDP(23) * t858 + MDP(27) * t1067 + MDP(28) * t819 + MDP(29) * t1181 - MDP(30) * t689 + MDP(31) * t690 + MDP(35) * t756 - MDP(37) * t661 + MDP(38) * t662) * t1066 + t742 * MDP(20) + (t1067 * t1286 + t701) * MDP(25) + t666 * t959 * MDP(32) + (t1028 * t735 + t1181 * t1286) * MDP(27) + (t1287 * t756 - t666 * t957 - t959 * t667) * MDP(33) + (MDP(34) * t959 - MDP(35) * t957) * t734 + (-MDP(34) * t1287 - MDP(35) * t1288 - MDP(36) * t1066) * t848 + (MDP(32) * t1287 + MDP(33) * t1288 + MDP(34) * t1066) * t1068 + (-t1028 * t704 - t1067 * t1280 + t1286 * t819 + t702) * MDP(26) + (-t1181 * t1280 + t731) * MDP(28) - (-MDP(18) * t1066 + MDP(19) * t854 + MDP(20) * t971 - MDP(24) * t858) * t854;
t1267 = t1028 * t854;
t1282 = pkin(12) * t1267;
t1281 = -t1211 * pkin(4) + pkin(11) * t1212 - t1084;
t1268 = -pkin(11) * t1124 + t1284;
t1150 = t1031 * t1034;
t1115 = t1025 * t1150;
t867 = -qJD(1) * t1115 - t1028 * t905;
t1261 = t1028 * t892 + t867;
t1279 = (t1171 + t1267) * pkin(5);
t1278 = pkin(5) * t1066 + pkin(12) * t1266;
t1023 = qJ(5) + qJ(6);
t1017 = cos(t1023);
t660 = pkin(5) * t704 + t671;
t800 = t1029 * t806;
t727 = t1035 * t792 - t800;
t722 = pkin(4) * t971 - t727;
t709 = pkin(5) * t819 + t722;
t1277 = -t1017 * t1260 + t1288 * t709 + t660 * t957;
t1015 = sin(t1023);
t1276 = t1015 * t1260 - t1287 * t709 + t660 * t959;
t1272 = t722 * t854;
t1271 = t756 * t848;
t1265 = t1068 * t848;
t1264 = t1170 * t960 - t1261;
t909 = -t1029 * t987 + t1035 * t989;
t1263 = qJD(4) * t909 + t1289 * t1029 + t1035 * t1290;
t1136 = pkin(3) * t1172;
t746 = t1035 * t805 - t800;
t1262 = t746 - t1136;
t1119 = t1028 * t1160;
t868 = qJD(1) * t1119 - t1034 * t905;
t1104 = t1034 * t892 + t868;
t787 = pkin(4) * t1066 + pkin(11) * t854;
t885 = -t1016 * t1130 + t1018 * t951;
t950 = -t1026 * t1127 + t1151;
t1257 = t1015 * t950 + t1017 * t885;
t679 = t681 * t1169;
t888 = t1016 * t1159 + t1018 * t953;
t952 = t1026 * t1149 + t1128;
t835 = t1015 * t952 + t1017 * t888;
t935 = t1016 * t1026 + t1018 * t1160;
t1259 = t709 * t756 + g(1) * t835 + g(2) * t1257 - g(3) * (t1015 * t1157 - t1017 * t935) + t679;
t1258 = t1015 * t885 - t1017 * t950;
t1256 = t1028 * t885 - t1034 * t950;
t1255 = t1028 * t950 + t1034 * t885;
t834 = -t1015 * t888 + t1017 * t952;
t1254 = t709 * t1068 - g(3) * (-t1015 * t935 - t1017 * t1157) + g(2) * t1258 - g(1) * t834;
t1253 = t734 * MDP(36) + (t1068 ^ 2 - t756 ^ 2) * MDP(33) - t756 * MDP(32) * t1068;
t1250 = t1281 * t1034;
t1213 = pkin(4) * t1124 + t1263;
t745 = t1029 * t805 + t801;
t1083 = pkin(3) * t1173 - t745;
t1014 = -pkin(3) * t1036 - pkin(2);
t883 = pkin(4) * t958 - pkin(11) * t960 + t1014;
t1247 = t1028 * t1281 - t1034 * t1268 - t883 * t1170 + t1171 * t909;
t1245 = t960 * t1248;
t1242 = -pkin(11) - pkin(12);
t1233 = pkin(3) * t1035;
t1232 = g(3) * t1025;
t1231 = t1002 * pkin(2);
t1011 = pkin(3) * t1029 + pkin(11);
t1230 = -pkin(12) - t1011;
t1229 = t923 * t985;
t1228 = t924 * t985;
t1223 = t1028 * t787 + t1034 * t727;
t767 = pkin(3) * t924 + t787;
t1221 = t1028 * t767 + t1034 * t746;
t1146 = pkin(8) * t1157 + t1007;
t937 = pkin(9) * t1026 + t1146;
t1105 = -t1030 * t937 + t1036 * t938;
t948 = t1026 * t1030 + t1114;
t817 = -pkin(3) * t1157 - pkin(10) * t948 + t1105;
t1209 = t1030 * t938 + t1036 * t937;
t947 = -t1026 * t1036 + t1117;
t826 = -pkin(10) * t947 + t1209;
t1215 = t1029 * t817 + t1035 * t826;
t754 = -pkin(11) * t1157 + t1215;
t869 = t1029 * t948 + t1035 * t947;
t870 = -t1029 * t947 + t1035 * t948;
t1004 = pkin(8) * t1160;
t936 = t1004 + (-pkin(1) * t1037 - pkin(2)) * t1026;
t878 = pkin(3) * t947 + t936;
t774 = pkin(4) * t869 - pkin(11) * t870 + t878;
t1220 = t1028 * t774 + t1034 * t754;
t1219 = t1027 * t867 - t1033 * t868 - t1245 * t959 + t957 * t892;
t1184 = t1034 * t960;
t1218 = -t1027 * t868 - t892 * t1154 - t1155 * t1245 + (t1184 * t1248 - t1261) * t1033;
t1216 = pkin(5) * t1264 + t1213;
t897 = t1034 * t909;
t1210 = t1028 * t883 + t897;
t1207 = t1083 + t1279;
t1202 = MDP(6) * t1025;
t1201 = qJD(5) * t1181;
t1200 = t1002 * MDP(8);
t1097 = -t1029 * t713 - t1035 * t718 - t792 * t1172 + t806 * t1173;
t670 = pkin(11) * t931 - t1097;
t1094 = -pkin(8) * t1112 - qJD(2) * t944 + t1037 * t1131;
t863 = -t1094 - t1231;
t786 = -pkin(3) * t1054 + t863;
t678 = t743 * pkin(4) - t742 * pkin(11) + t786;
t655 = -qJD(5) * t690 - t1028 * t670 + t1034 * t678;
t652 = pkin(5) * t735 - pkin(12) * t703 + t655;
t1197 = t1027 * t652;
t1191 = t1028 * t960;
t1182 = t951 * t1030;
t946 = pkin(8) * t1121 + qJD(2) * t1007;
t1180 = qJD(1) * qJD(2);
t1177 = qJD(2) * t1031;
t1176 = qJD(2) * t1037;
t1165 = t1015 * t1018;
t1164 = t1017 * t1018;
t1163 = t1018 * t1028;
t1162 = t1018 * t1037;
t1020 = t1025 ^ 2;
t1161 = t1020 * qJD(1) ^ 2;
t1153 = t1028 * t1037;
t1147 = qJD(2) - t1003;
t1021 = t1031 ^ 2;
t1145 = -t1037 ^ 2 + t1021;
t1141 = 0.2e1 * t1020;
t1140 = g(1) * t1241;
t986 = t1242 * t1028;
t1013 = -pkin(5) * t1034 - pkin(4);
t1129 = t1036 * t1241;
t1125 = qJD(1) * t1176;
t1120 = t1037 * t1161;
t1118 = t1025 * t1153;
t1113 = t1034 * t1157;
t955 = t1230 * t1028;
t1057 = -t1028 * t678 - t1034 * t670 - t749 * t1170 + t1171 * t723;
t653 = -pkin(12) * t704 - t1057;
t1111 = qJD(6) * t673 + t653;
t1110 = -t1027 * t653 + t1033 * t652;
t1107 = -t1028 * t754 + t1034 * t774;
t1103 = -t1029 * t826 + t1035 * t817;
t1101 = -t1030 * t1130 + t1036 * t951;
t1093 = t1003 + t1178;
t1091 = t1002 + t1144;
t894 = qJD(3) * t948 + t1087;
t859 = pkin(3) * t894 + t946;
t1082 = t1279 - t728;
t1081 = -g(1) * t953 - g(2) * t951;
t765 = t1034 * t767;
t1019 = t1034 * pkin(12);
t956 = t1011 * t1034 + t1019;
t1080 = qJD(6) * t956 - t1028 * t1262 - t1170 * t1230 + t1278 + t765;
t783 = t1034 * t787;
t988 = pkin(11) * t1034 + t1019;
t1079 = qJD(6) * t988 - t1028 * t727 - t1242 * t1170 + t1278 + t783;
t1078 = -t1034 * t1136 - t1248 * t955 + t1221 + t1282;
t1077 = -t1248 * t986 + t1223 + t1282;
t804 = -pkin(12) * t1191 + t1210;
t1076 = t897 * qJD(5) + qJD(6) * t804 + t1250 - t1104 * pkin(12) + (-(pkin(12) * t960 - t883) * qJD(5) + t1268) * t1028 - t1211 * pkin(5);
t877 = t1034 * t883;
t788 = pkin(5) * t958 - pkin(12) * t1184 - t1028 * t909 + t877;
t1075 = pkin(12) * t1264 - qJD(6) * t788 + t1247;
t753 = pkin(4) * t1157 - t1103;
t1072 = t1028 * t1285 + t722 * t1170;
t1071 = -t1011 * t735 + t1272;
t850 = t1034 * t870 - t1118;
t687 = pkin(5) * t869 - pkin(12) * t850 + t1107;
t849 = t1028 * t870 + t1113;
t692 = -pkin(12) * t849 + t1220;
t1070 = -t1027 * t692 + t1033 * t687;
t1069 = t1027 * t687 + t1033 * t692;
t779 = t1027 * t850 + t1033 * t849;
t780 = -t1027 * t849 + t1033 * t850;
t943 = t1025 * t1063;
t945 = (-t1004 + t1139) * qJD(2);
t1040 = -qJD(3) * t1209 - t1030 * t945 + t1036 * t943;
t895 = -qJD(3) * t947 + t1086;
t766 = pkin(3) * t1122 - pkin(10) * t895 + t1040;
t1059 = t1030 * t943 + t1036 * t945 + t938 * t1174 - t1175 * t937;
t771 = -pkin(10) * t894 + t1059;
t1064 = -t1029 * t771 + t1035 * t766 - t826 * t1172 - t817 * t1173;
t1058 = t1029 * t766 + t1035 * t771 + t817 * t1172 - t1173 * t826;
t683 = pkin(11) * t1122 + t1058;
t784 = -qJD(4) * t869 - t1029 * t894 + t1035 * t895;
t785 = qJD(4) * t870 + t1029 * t895 + t1035 * t894;
t708 = pkin(4) * t785 - pkin(11) * t784 + t859;
t1056 = t1028 * t708 + t1034 * t683 + t774 * t1170 - t1171 * t754;
t1053 = -t1171 * t960 - t1104;
t1050 = -g(1) * t952 - g(2) * t950 + g(3) * t1157;
t1048 = -pkin(9) * t939 - t902 * t985;
t1047 = t1050 * t1018;
t684 = -pkin(4) * t1122 - t1064;
t1046 = g(1) * t888 + g(2) * t885 + g(3) * t935 + t1097;
t1045 = -t1260 - t1096;
t650 = -qJD(6) * t662 + t1110;
t1042 = -qJD(5) * t1220 - t1028 * t683 + t1034 * t708;
t1039 = -pkin(9) * qJD(3) * t985 + t1050 + t863;
t1012 = -pkin(4) - t1233;
t981 = t1013 - t1233;
t899 = t1030 * t1159 + t1036 * t953;
t898 = -t1030 * t953 + t1032 * t1158;
t875 = t957 * t960;
t874 = t959 * t960;
t866 = pkin(5) * t1191 + t908;
t846 = t1028 * t952 + t1034 * t888;
t845 = -t1028 * t888 + t1034 * t952;
t741 = -qJD(2) * t1115 - qJD(5) * t1118 + t1028 * t784 + t1170 * t870;
t740 = qJD(2) * t1119 - qJD(5) * t849 + t1034 * t784;
t720 = t722 * t1171;
t719 = pkin(5) * t849 + t753;
t675 = qJD(6) * t780 + t1027 * t740 + t1033 * t741;
t674 = -qJD(6) * t779 - t1027 * t741 + t1033 * t740;
t672 = pkin(5) * t741 + t684;
t657 = -pkin(12) * t741 + t1056;
t656 = pkin(5) * t785 - pkin(12) * t740 + t1042;
t649 = t1033 * t1111 + t1197 - t679;
t1 = [(-t1068 * t785 + t666 * t869 + t674 * t848 + t734 * t780) * MDP(34) + (t1068 * t675 - t666 * t779 - t667 * t780 - t674 * t756) * MDP(33) + (-t1068 * t674 + t666 * t780) * MDP(32) + (g(1) * t885 - g(2) * t888 - t1064 * t971 + t1103 * t931 + t878 * t743 + t858 * t785 + t786 * t869 + t859 * t854) * MDP(23) + (g(2) * t1032 + t1140) * MDP(3) + (-t945 * t1003 - t1146 * t1002 - t1049 * t1026 - g(1) * t950 + g(2) * t952 + (-t1125 - t1143) * pkin(1) * t1141) * MDP(10) + (t1067 * t741 - t703 * t849 - t704 * t850 - t740 * t819) * MDP(26) + (-t1067 * t740 + t703 * t850) * MDP(25) + (-t1067 * t785 - t1181 * t740 + t703 * t869 + t735 * t850) * MDP(27) + (t1181 * t741 - t704 * t869 - t735 * t849 - t785 * t819) * MDP(28) + (-t1181 * t785 + t735 * t869) * MDP(29) + (g(1) * t1032 - g(2) * t1241) * MDP(2) + (-t946 * t1003 - t1004 * t1002 + t1094 * t1026 + g(1) * t951 - g(2) * t953 + (t1002 * t1156 + (-qJD(1) * t1177 + t1142) * t1141) * pkin(1)) * MDP(9) + (g(1) * t1101 - g(2) * t899 - t1040 * t985 - t936 * t1054 + t1105 * t939 + t863 * t947 + t902 * t894 - t946 * t923) * MDP(16) + (-g(1) * t1182 - g(2) * t898 + t1059 * t985 - t1209 * t939 + t936 * t842 + t863 * t948 + t902 * t895 + t946 * t924) * MDP(17) + (-t895 * t985 + t939 * t948) * MDP(13) + (-t784 * t971 + t870 * t931) * MDP(20) + (t785 * t971 - t869 * t931) * MDP(21) + (t894 * t985 - t947 * t939) * MDP(14) + ((qJDD(1) * t1021 + 0.2e1 * t1031 * t1125) * MDP(4) + 0.2e1 * (t1031 * t1142 - t1145 * t1180) * MDP(5)) * t1020 + ((-t1018 * t1140 - t1037 * t1097 - t1177 * t728) * MDP(24) + (t1037 * t743 - t1177 * t854) * MDP(21) + (-t1037 * t1054 + t1177 * t923) * MDP(14) + (-t1037 * t1041 + t1177 * t838) * MDP(16) + (t1037 * t1096 + t1177 * t727) * MDP(23) + (-t1037 * t842 + t1177 * t924) * MDP(13) + (-t1037 * t742 + t1066 * t1177) * MDP(20) + (-g(1) * t1129 - t1037 * t1060 - t1177 * t839) * MDP(17) + (t1037 * t1091 - t1093 * t1177) * MDP(7) + (-t1037 * t939 - t1177 * t985) * MDP(15) + (-t1037 * t931 - t1177 * t971) * MDP(22)) * t1025 + (-t1066 * t785 - t742 * t869 - t743 * t870 - t784 * t854) * MDP(19) + (t1066 * t784 + t742 * t870) * MDP(18) + (t1054 * t948 - t842 * t947 - t924 * t894 + t895 * t923) * MDP(12) + (t1031 * t1091 + t1093 * t1176) * t1202 + t1026 * t1200 + (-g(1) * t1183 - g(2) * t887 + t1058 * t971 + t1066 * t859 - t1215 * t931 + t878 * t742 + t858 * t784 + t786 * t870) * MDP(24) + (t842 * t948 + t895 * t924) * MDP(11) + (t734 * t869 + t785 * t848) * MDP(36) + (-t667 * t869 - t675 * t848 - t734 * t779 - t756 * t785) * MDP(35) + qJDD(1) * MDP(1) + ((-qJD(6) * t1069 - t1027 * t657 + t1033 * t656) * t848 + t1070 * t734 + t650 * t869 + t661 * t785 + t672 * t756 + t719 * t667 + t660 * t779 + t709 * t675 + g(1) * t1257 - g(2) * t835) * MDP(37) + (-(qJD(6) * t1070 + t1027 * t656 + t1033 * t657) * t848 - t1069 * t734 - t649 * t869 - t662 * t785 - t672 * t1068 + t719 * t666 + t660 * t780 + t709 * t674 - g(1) * t1258 - g(2) * t834) * MDP(38) + (g(1) * t1255 - g(2) * t846 - t1042 * t1181 + t1107 * t735 + t655 * t869 + t671 * t849 + t684 * t819 + t689 * t785 + t753 * t704 + t722 * t741) * MDP(30) + (-g(1) * t1256 - g(2) * t845 + t1056 * t1181 + t1057 * t869 - t684 * t1067 - t1220 * t735 + t671 * t850 - t690 * t785 + t753 * t703 + t722 * t740) * MDP(31); (-(t1027 * t788 + t1033 * t804) * t734 - t649 * t958 + t866 * t666 - t660 * t875 - g(1) * (t1017 * t953 + t1165 * t952) - g(2) * (t1017 * t951 + t1165 * t950) + (t1027 * t1076 + t1033 * t1075) * t848 - t1216 * t1068 + t1219 * t709 - t1211 * t662 - (-t1015 * t1162 + t1017 * t1031) * t1232) * MDP(38) + (-t1068 * t1219 - t666 * t875) * MDP(32) + (-t1068 * t1211 + t1219 * t848 + t666 * t958 - t734 * t875) * MDP(34) + (t1068 * t1218 - t1219 * t756 - t666 * t874 + t667 * t875) * MDP(33) + t1145 * MDP(5) * t1161 + t1200 + (-t1053 * t1067 + t702 * t960) * MDP(25) + (-t1210 * t735 + t1057 * t958 + t908 * t703 + t671 * t1184 - g(1) * (t1034 * t953 + t1163 * t952) - g(2) * (t1034 * t951 + t1163 * t950) - t1247 * t1181 - t1213 * t1067 - t1211 * t690 - (-t1018 * t1153 + t1150) * t1232 + t1053 * t722) * MDP(31) + (-t1053 * t1181 - t1067 * t1211 + t1184 * t735 + t703 * t958) * MDP(27) + (-t1181 * t1211 + t735 * t958) * MDP(29) + (t1211 * t848 + t734 * t958) * MDP(36) + ((-t1027 * t804 + t1033 * t788) * t734 + t650 * t958 + t866 * t667 + t660 * t874 - g(1) * (t1015 * t953 - t1164 * t952) - g(2) * (t1015 * t951 - t1164 * t950) + (t1027 * t1075 - t1033 * t1076) * t848 + t1216 * t756 + t1218 * t709 + t1211 * t661 - (t1015 * t1031 + t1017 * t1162) * t1232) * MDP(37) + (t1211 * t971 - t931 * t958) * MDP(21) + (-t1212 * t971 + t931 * t960) * MDP(20) + (-pkin(2) * t1095 + t928 * t985 + t944 * t923 + (-t941 * t985 + t1048) * t1030 + (-t1039 + t1231) * t1036) * MDP(16) + (-pkin(2) * t842 + t1030 * t1039 + t1036 * t1048 - t1208 * t985 - t944 * t924) * MDP(17) + (t1003 * t944 + t1161 * t1234 - t1050 + t1094) * MDP(9) + ((t842 - t1229) * t1036 + (t1054 + t1228) * t1030) * MDP(12) + (t985 * t1175 + t1036 * t939 + (-t1031 * t923 - t1152 * t985) * t1179) * MDP(14) + (-t985 * t1174 + t1030 * t939 + (-t1031 * t924 + t1148 * t985) * t1179) * MDP(13) + (pkin(1) * t1120 + t1003 * t941 + (pkin(8) * t1180 + g(3)) * t1160 - t1081 + t1132) * MDP(10) + (-t1211 * t756 - t1218 * t848 - t667 * t958 - t734 * t874) * MDP(35) + (t655 * t958 + t908 * t704 - t722 * t867 + t877 * t735 + t1250 * t1181 + t1213 * t819 + t1211 * t689 + ((t1181 * t909 + t722 * t960) * qJD(5) - t1047) * t1034 + (-g(3) * t1160 + t671 * t960 - t722 * t892 - t909 * t735 - (-qJD(5) * t883 - t1268) * t1181 + t1081) * t1028) * MDP(30) + (-t1261 * t1067 + t1104 * t819 + (-t701 - t1034 * t704 + (t1028 * t819 + t1034 * t1067) * qJD(5)) * t960) * MDP(26) + (t1014 * t743 + t1084 * t854 + t1211 * t858 + t1263 * t971 + t786 * t958 - t908 * t931 - t1047) * MDP(23) + (t1181 * t1264 - t735 * t1191 - t1211 * t819 - t704 * t958) * MDP(28) + t1001 * MDP(7) + (qJD(1) * t1037 * t1147 + t1143) * t1202 + (t1066 * t1212 + t742 * t960) * MDP(18) + (-t1066 * t1211 - t1212 * t854 - t742 * t958 - t743 * t960) * MDP(19) + (t985 * MDP(15) - t838 * MDP(16) + t839 * MDP(17) - MDP(20) * t1066 + t854 * MDP(21) + t971 * MDP(22) - t727 * MDP(23) + t728 * MDP(24) - MDP(7) * t1147) * t1124 + (t1030 * t842 - t1036 * t1228) * MDP(11) - t1031 * MDP(4) * t1120 + (t1014 * t742 + t1050 * t1016 + t1084 * t1066 + t1212 * t858 + t1284 * t971 + t786 * t960 - t909 * t931) * MDP(24); (t1012 * t703 - (t1011 * t1171 + t1221) * t1181 - t1083 * t1067 + (t1136 * t1181 + t1071) * t1034 + t1072) * MDP(31) + ((-t1027 * t956 + t1033 * t955) * t734 + t981 * t667 + (t1027 * t1078 - t1033 * t1080) * t848 + t1207 * t756 + t1277) * MDP(37) + (-(t1027 * t955 + t1033 * t956) * t734 + t981 * t666 + (t1027 * t1080 + t1033 * t1078) * t848 - t1207 * t1068 + t1276) * MDP(38) + (t842 + t1229) * MDP(13) + (-t839 * t985 - t902 * t924 - g(1) * t898 - g(2) * (-t1025 * t1129 - t1182) + g(3) * t947 + t1041) * MDP(16) + (t1012 * t704 + t765 * t1181 + t720 + t1083 * t819 + (-t1181 * t1262 + t1071) * t1028 + (t1011 * t1201 - t1285) * t1034) * MDP(30) + (-t746 * t971 + (-t1029 * t931 - t1066 * t924 + t1172 * t971) * pkin(3) + t1046) * MDP(24) - t924 * t923 * MDP(11) + (g(1) * t899 + g(2) * t1101 + g(3) * t948 - t838 * t985 - t902 * t923 + t1060) * MDP(17) + t939 * MDP(15) + (-t923 ^ 2 + t924 ^ 2) * MDP(12) + (-t745 * t971 + (t1035 * t931 + t1173 * t971 - t854 * t924) * pkin(3) + t1045) * MDP(23) + (t1054 - t1228) * MDP(14) + t1283; ((-t1027 * t988 + t1033 * t986) * t734 + t1013 * t667 + (t1027 * t1077 - t1033 * t1079) * t848 + t1082 * t756 + t1277) * MDP(37) + (-(t1027 * t986 + t1033 * t988) * t734 + t1013 * t666 + (t1027 * t1079 + t1033 * t1077) * t848 - t1082 * t1068 + t1276) * MDP(38) + (-pkin(4) * t703 - t1223 * t1181 + t728 * t1067 + t722 * t1266 + (-t1171 * t1181 - t731) * pkin(11) + t1072) * MDP(31) + (-pkin(4) * t704 - t728 * t819 + t783 * t1181 + t720 + (-pkin(11) * t735 - t1181 * t727 + t1272) * t1028 + (pkin(11) * t1201 - t1285) * t1034) * MDP(30) + (-t727 * t971 + t1046) * MDP(24) + (-t728 * t971 + t1045) * MDP(23) + t1283; -t1067 * t819 * MDP(25) + (t1067 ^ 2 - t819 ^ 2) * MDP(26) + (-t1181 * t819 + t703) * MDP(27) + (t1067 * t1181 - t704) * MDP(28) + t735 * MDP(29) + (-t690 * t1181 + t722 * t1067 - g(1) * t845 + g(2) * t1256 - g(3) * (-t1028 * t935 - t1113) + t655) * MDP(30) + (-t689 * t1181 + t722 * t819 + g(1) * t846 + g(2) * t1255 - g(3) * (-t1034 * t935 + t1118) + t1057) * MDP(31) + (t666 + t1271) * MDP(34) + (-t667 - t1265) * MDP(35) + (-(-t1027 * t680 - t1189) * t848 + (t1033 * t734 + t1067 * t756 - t1169 * t848) * pkin(5) + t650 + t1254) * MDP(37) + ((-t681 * t848 - t652) * t1027 + (t680 * t848 - t1111) * t1033 + (-t1027 * t734 - t1067 * t1068 - t1168 * t848) * pkin(5) + t1259) * MDP(38) + t1253; (t1134 + t1271) * MDP(34) + (-t1109 - t1265) * MDP(35) + (t662 * t848 + t1110 + t1254) * MDP(37) + (-t1033 * t653 + t661 * t848 - t1197 + t1259) * MDP(38) + (MDP(34) * t1196 + MDP(35) * t1068 - MDP(37) * t662 - MDP(38) * t1190) * qJD(6) + t1253;];
tau  = t1;
