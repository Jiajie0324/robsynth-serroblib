% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR8_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:52:22
% EndTime: 2019-03-09 18:52:33
% DurationCPUTime: 3.76s
% Computational Cost: add. (7882->389), mult. (20786->706), div. (0->0), fcn. (21133->12), ass. (0->203)
t166 = sin(pkin(12));
t175 = cos(qJ(3));
t171 = sin(qJ(3));
t247 = cos(pkin(12));
t197 = t247 * t171;
t140 = t166 * t175 + t197;
t170 = sin(qJ(5));
t173 = cos(qJ(6));
t169 = sin(qJ(6));
t174 = cos(qJ(5));
t233 = t169 * t174;
t143 = t170 * t173 + t233;
t95 = t143 * t140;
t168 = cos(pkin(6));
t167 = sin(pkin(6));
t176 = cos(qJ(2));
t236 = t167 * t176;
t216 = pkin(8) * t236;
t172 = sin(qJ(2));
t260 = pkin(1) * t172;
t125 = t216 + (pkin(9) + t260) * t168;
t126 = (-pkin(2) * t176 - pkin(9) * t172 - pkin(1)) * t167;
t229 = t175 * t125 + t171 * t126;
t218 = qJD(5) + qJD(6);
t262 = 2 * qJD(5);
t237 = t167 * t172;
t209 = t175 * t237;
t135 = t168 * t171 + t209;
t210 = t171 * t237;
t235 = t168 * t175;
t184 = -t210 + t235;
t93 = t135 * t166 - t247 * t184;
t261 = pkin(5) * t93;
t259 = pkin(1) * t176;
t196 = t247 * t175;
t238 = t166 * t171;
t139 = -t196 + t238;
t258 = pkin(5) * t139;
t257 = pkin(5) * t173;
t256 = pkin(9) * t167;
t158 = pkin(3) * t166 + pkin(10);
t255 = pkin(11) + t158;
t254 = -qJ(4) - pkin(9);
t194 = -t171 * t125 + t175 * t126;
t74 = -pkin(3) * t236 - t135 * qJ(4) + t194;
t81 = qJ(4) * t184 + t229;
t48 = t166 * t74 + t247 * t81;
t42 = -pkin(10) * t236 + t48;
t155 = pkin(8) * t237;
t161 = -pkin(3) * t175 - pkin(2);
t100 = pkin(3) * t210 + t155 + (t161 - t259) * t168;
t94 = t247 * t135 + t166 * t184;
t59 = t93 * pkin(4) - t94 * pkin(10) + t100;
t26 = t170 * t59 + t174 * t42;
t226 = qJD(2) * t176;
t203 = t167 * t226;
t109 = qJD(3) * t184 + t175 * t203;
t227 = qJD(2) * t172;
t204 = t167 * t227;
t129 = (pkin(2) * t172 - pkin(9) * t176) * t167 * qJD(2);
t130 = -t168 * pkin(1) * t226 + pkin(8) * t204;
t67 = -t229 * qJD(3) + t175 * t129 + t171 * t130;
t44 = pkin(3) * t204 - qJ(4) * t109 - qJD(4) * t135 + t67;
t225 = qJD(3) * t171;
t208 = qJD(3) * t209 + t168 * t225 + t171 * t203;
t224 = qJD(3) * t175;
t66 = t125 * t225 - t126 * t224 - t171 * t129 + t175 * t130;
t49 = -t208 * qJ(4) + t184 * qJD(4) - t66;
t24 = t166 * t44 + t247 * t49;
t80 = t247 * t109 - t166 * t208;
t83 = t170 * t94 + t174 * t236;
t52 = -qJD(5) * t83 + t170 * t204 + t174 * t80;
t253 = t170 * t52;
t19 = -pkin(11) * t83 + t26;
t252 = t173 * t19;
t242 = t140 * t170;
t103 = pkin(4) * t139 - pkin(10) * t140 + t161;
t149 = t254 * t175;
t111 = -t247 * t149 + t254 * t238;
t106 = t174 * t111;
t76 = t170 * t103 + t106;
t68 = -pkin(11) * t242 + t76;
t251 = t173 * t68;
t23 = -t166 * t49 + t247 * t44;
t21 = -pkin(4) * t204 - t23;
t250 = t21 * t170;
t249 = t21 * t174;
t248 = t52 * t174;
t131 = (t168 * t260 + t216) * qJD(2);
t246 = t131 * t171;
t134 = qJD(3) * t196 - t166 * t225;
t245 = t134 * t170;
t244 = t134 * t174;
t136 = t255 * t170;
t243 = t136 * t169;
t241 = t140 * t174;
t240 = t158 * t170;
t239 = t158 * t174;
t234 = t169 * t170;
t231 = t170 * t174;
t230 = t173 * t174;
t165 = t174 ^ 2;
t228 = t170 ^ 2 - t165;
t223 = qJD(3) * t176;
t222 = qJD(5) * t170;
t221 = qJD(5) * t174;
t220 = qJD(6) * t169;
t219 = qJD(6) * t173;
t217 = -0.2e1 * pkin(2) * qJD(3);
t159 = -t247 * pkin(3) - pkin(4);
t215 = t159 * t262;
t214 = pkin(5) * t222;
t162 = pkin(3) * t225;
t213 = pkin(5) * t220;
t212 = pkin(5) * t219;
t211 = t170 * t236;
t79 = t109 * t166 + t247 * t208;
t85 = t208 * pkin(3) + t131;
t177 = t79 * pkin(4) - t80 * pkin(10) + t85;
t22 = pkin(10) * t204 + t24;
t9 = -t26 * qJD(5) - t170 * t22 + t174 * t177;
t5 = pkin(5) * t79 - pkin(11) * t52 + t9;
t53 = -qJD(5) * t211 + t170 * t80 - t174 * t204 + t94 * t221;
t8 = -t170 * t177 - t174 * t22 - t59 * t221 + t42 * t222;
t7 = -pkin(11) * t53 - t8;
t207 = -t169 * t7 + t173 * t5;
t163 = t167 ^ 2;
t206 = t163 * t226;
t205 = t140 * t222;
t202 = t170 * t221;
t133 = t140 * qJD(3);
t186 = pkin(4) * t133 - pkin(10) * t134 + t162;
t199 = qJD(3) * t254;
t132 = t175 * qJD(4) + t171 * t199;
t178 = -t171 * qJD(4) + t175 * t199;
t91 = t247 * t132 + t166 * t178;
t200 = -t170 * t91 + t174 * t186;
t29 = -pkin(11) * t244 + pkin(5) * t133 + (-t106 + (pkin(11) * t140 - t103) * t170) * qJD(5) + t200;
t182 = t140 * t221 + t245;
t37 = -t103 * t221 + t111 * t222 - t170 * t186 - t174 * t91;
t32 = -pkin(11) * t182 - t37;
t201 = -t169 * t32 + t173 * t29;
t25 = -t170 * t42 + t174 * t59;
t75 = t174 * t103 - t111 * t170;
t195 = -0.4e1 * t140 * t231;
t90 = t166 * t132 - t247 * t178;
t110 = -t149 * t166 - t254 * t197;
t193 = t228 * qJD(5);
t192 = t172 * t206;
t47 = -t166 * t81 + t247 * t74;
t107 = -t173 * t221 - t174 * t219 + t218 * t234;
t191 = t107 * t93 - t143 * t79;
t84 = t174 * t94 - t211;
t18 = -pkin(11) * t84 + t25 + t261;
t11 = t169 * t18 + t252;
t65 = -pkin(11) * t241 + t258 + t75;
t34 = t169 * t65 + t251;
t61 = t169 * t84 + t173 * t83;
t62 = -t169 * t83 + t173 * t84;
t190 = -t170 * t84 - t174 * t83;
t189 = t107 * t139 - t133 * t143;
t188 = -t133 * t158 + t134 * t159;
t137 = t255 * t174;
t102 = t137 * t173 - t243;
t187 = t139 * t158 - t140 * t159;
t142 = -t230 + t234;
t41 = pkin(4) * t236 - t47;
t1 = -t169 * t5 - t173 * t7 - t18 * t219 + t19 * t220;
t185 = t170 * t79 + t93 * t221;
t60 = t174 * t79 - t93 * t222;
t12 = -t169 * t29 - t173 * t32 - t65 * t219 + t68 * t220;
t183 = t133 * t170 + t139 * t221;
t181 = -t205 + t244;
t180 = t171 * t223 + t175 * t227;
t179 = t171 * t227 - t175 * t223;
t144 = -t174 * pkin(5) + t159;
t138 = t140 ^ 2;
t124 = t155 + (-pkin(2) - t259) * t168;
t108 = t218 * t143;
t105 = 0.2e1 * t139 * t133;
t101 = -t136 * t173 - t137 * t169;
t99 = t133 * t174 - t139 * t222;
t96 = t142 * t140;
t89 = pkin(5) * t242 + t110;
t73 = -t108 * t139 - t133 * t142;
t71 = -t102 * qJD(6) + (-t255 * t230 + t243) * qJD(5);
t70 = t143 * qJD(5) * t255 + t136 * t219 + t137 * t220;
t69 = pkin(5) * t182 + t90;
t63 = 0.2e1 * t93 * t79;
t55 = t134 * t233 - t169 * t205 - t220 * t242 + (t218 * t241 + t245) * t173;
t54 = -t142 * t134 - t218 * t95;
t51 = t133 * t93 + t139 * t79;
t43 = -t108 * t93 - t142 * t79;
t38 = -t76 * qJD(5) + t200;
t33 = -t169 * t68 + t173 * t65;
t30 = t83 * pkin(5) + t41;
t16 = qJD(6) * t62 + t169 * t52 + t173 * t53;
t15 = -qJD(6) * t61 - t169 * t53 + t173 * t52;
t14 = t53 * pkin(5) + t21;
t13 = -qJD(6) * t34 + t201;
t10 = -t169 * t19 + t173 * t18;
t2 = -qJD(6) * t11 + t207;
t3 = [0, 0, 0, 0.2e1 * t192, 0.2e1 * (-t172 ^ 2 + t176 ^ 2) * t163 * qJD(2), 0.2e1 * t168 * t203, -0.2e1 * t168 * t204, 0, -0.2e1 * pkin(1) * t163 * t227 - 0.2e1 * t131 * t168, -0.2e1 * pkin(1) * t206 + 0.2e1 * t130 * t168, 0.2e1 * t135 * t109, 0.2e1 * t109 * t184 - 0.2e1 * t135 * t208, 0.2e1 * (-t109 * t176 + t135 * t227) * t167, 0.2e1 * t184 * t204 + 0.2e1 * t208 * t236, -0.2e1 * t192, -0.2e1 * t131 * t235 + 0.2e1 * t124 * t208 + 0.2e1 * (-t67 * t176 + (qJD(2) * t194 + t246) * t172) * t167, 0.2e1 * t124 * t109 + 0.2e1 * t131 * t135 + 0.2e1 * (-t66 * t176 - t227 * t229) * t167, -0.2e1 * t23 * t94 - 0.2e1 * t24 * t93 - 0.2e1 * t47 * t80 - 0.2e1 * t48 * t79, 0.2e1 * t100 * t85 + 0.2e1 * t23 * t47 + 0.2e1 * t24 * t48, 0.2e1 * t84 * t52, -0.2e1 * t52 * t83 - 0.2e1 * t53 * t84, 0.2e1 * t52 * t93 + 0.2e1 * t79 * t84, -0.2e1 * t53 * t93 - 0.2e1 * t79 * t83, t63, 0.2e1 * t21 * t83 + 0.2e1 * t25 * t79 + 0.2e1 * t41 * t53 + 0.2e1 * t9 * t93, 0.2e1 * t21 * t84 - 0.2e1 * t26 * t79 + 0.2e1 * t41 * t52 + 0.2e1 * t8 * t93, 0.2e1 * t62 * t15, -0.2e1 * t15 * t61 - 0.2e1 * t16 * t62, 0.2e1 * t15 * t93 + 0.2e1 * t62 * t79, -0.2e1 * t16 * t93 - 0.2e1 * t61 * t79, t63, 0.2e1 * t10 * t79 + 0.2e1 * t14 * t61 + 0.2e1 * t16 * t30 + 0.2e1 * t2 * t93, 0.2e1 * t1 * t93 - 0.2e1 * t11 * t79 + 0.2e1 * t14 * t62 + 0.2e1 * t15 * t30; 0, 0, 0, 0, 0, t203, -t204, 0, -t131, t130, t109 * t171 + t135 * t224, -t171 * t208 + t109 * t175 + (-t135 * t171 + t175 * t184) * qJD(3), t179 * t167, t180 * t167, 0, -pkin(2) * t208 + t124 * t225 - t131 * t175 - t179 * t256, -pkin(2) * t109 + t124 * t224 - t180 * t256 + t246, t110 * t80 - t111 * t79 - t133 * t48 - t134 * t47 - t139 * t24 - t140 * t23 + t90 * t94 - t91 * t93, t100 * t162 - t110 * t23 + t111 * t24 + t161 * t85 - t47 * t90 + t48 * t91, t84 * t244 + (-t222 * t84 + t248) * t140, t190 * t134 + (-t253 - t174 * t53 + (t170 * t83 - t174 * t84) * qJD(5)) * t140, t84 * t133 + t52 * t139 + t140 * t60 + t93 * t244, -t83 * t133 - t53 * t139 - t140 * t185 - t93 * t245, t51, t41 * t245 + t110 * t53 + t133 * t25 + t139 * t9 + t38 * t93 + t75 * t79 + t83 * t90 + (t221 * t41 + t250) * t140, t41 * t244 + t110 * t52 - t133 * t26 + t139 * t8 + t37 * t93 - t76 * t79 + t84 * t90 + (-t222 * t41 + t249) * t140, -t15 * t96 + t54 * t62, -t15 * t95 + t16 * t96 - t54 * t61 - t55 * t62, t133 * t62 + t139 * t15 + t54 * t93 - t79 * t96, -t133 * t61 - t139 * t16 - t55 * t93 - t79 * t95, t51, t10 * t133 + t13 * t93 + t139 * t2 + t14 * t95 + t16 * t89 + t30 * t55 + t33 * t79 + t61 * t69, t1 * t139 - t11 * t133 + t12 * t93 - t14 * t96 + t15 * t89 + t30 * t54 - t34 * t79 + t62 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t171 * t224, 0.2e1 * (-t171 ^ 2 + t175 ^ 2) * qJD(3), 0, 0, 0, t171 * t217, t175 * t217, 0.2e1 * t110 * t134 - 0.2e1 * t111 * t133 - 0.2e1 * t139 * t91 + 0.2e1 * t140 * t90, 0.2e1 * t110 * t90 + 0.2e1 * t111 * t91 + 0.2e1 * t161 * t162, 0.2e1 * t134 * t140 * t165 - 0.2e1 * t138 * t202, t138 * t228 * t262 + t134 * t195, 0.2e1 * t133 * t241 + 0.2e1 * t139 * t181, -0.2e1 * t133 * t242 - 0.2e1 * t139 * t182, t105, 0.2e1 * t110 * t182 + 0.2e1 * t75 * t133 + 0.2e1 * t38 * t139 + 0.2e1 * t90 * t242, 0.2e1 * t110 * t181 - 0.2e1 * t76 * t133 + 0.2e1 * t37 * t139 + 0.2e1 * t90 * t241, -0.2e1 * t96 * t54, -0.2e1 * t54 * t95 + 0.2e1 * t55 * t96, -0.2e1 * t133 * t96 + 0.2e1 * t139 * t54, -0.2e1 * t133 * t95 - 0.2e1 * t139 * t55, t105, 0.2e1 * t13 * t139 + 0.2e1 * t133 * t33 + 0.2e1 * t55 * t89 + 0.2e1 * t69 * t95, 0.2e1 * t12 * t139 - 0.2e1 * t133 * t34 + 0.2e1 * t54 * t89 - 0.2e1 * t69 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, -t208, t204, t67, t66 (-t166 * t79 - t247 * t80) * pkin(3) (t166 * t24 + t247 * t23) * pkin(3), t221 * t84 + t253, qJD(5) * t190 - t170 * t53 + t248, t185, t60, 0, -t79 * t240 + t159 * t53 - t249 + (t170 * t41 - t93 * t239) * qJD(5), -t79 * t239 + t159 * t52 + t250 + (t174 * t41 + t93 * t240) * qJD(5), -t107 * t62 + t143 * t15, t107 * t61 - t108 * t62 - t142 * t15 - t143 * t16, -t191, t43, 0, t101 * t79 + t108 * t30 + t14 * t142 + t144 * t16 + t214 * t61 + t71 * t93, -t102 * t79 - t107 * t30 + t14 * t143 + t144 * t15 + t214 * t62 + t70 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t224, -t225, 0, -pkin(9) * t224, pkin(9) * t225 (-t133 * t166 - t247 * t134) * pkin(3) (t166 * t91 - t247 * t90) * pkin(3), t134 * t231 - t140 * t193, qJD(5) * t195 - t134 * t228, t183, t99, 0, -t174 * t90 + t188 * t170 + (t110 * t170 - t174 * t187) * qJD(5), t170 * t90 + t188 * t174 + (t110 * t174 + t170 * t187) * qJD(5), t107 * t96 + t143 * t54, t107 * t95 + t108 * t96 - t142 * t54 - t143 * t55, -t189, t73, 0, t101 * t133 + t108 * t89 + t139 * t71 + t142 * t69 + t144 * t55 + t214 * t95, -t102 * t133 - t107 * t89 + t139 * t70 + t143 * t69 + t144 * t54 - t214 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t202, -0.2e1 * t193, 0, 0, 0, t170 * t215, t174 * t215, -0.2e1 * t143 * t107, 0.2e1 * t107 * t142 - 0.2e1 * t108 * t143, 0, 0, 0, 0.2e1 * t108 * t144 + 0.2e1 * t142 * t214, -0.2e1 * t107 * t144 + 0.2e1 * t143 * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, 0, 0, 0, 0, t60, -t185, 0, 0, 0, 0, 0, t43, t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162, 0, 0, 0, 0, 0, t99, -t183, 0, 0, 0, 0, 0, t73, t189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t53, t79, t9, t8, 0, 0, t15, -t16, t79, t79 * t257 + (-t252 + (-t18 - t261) * t169) * qJD(6) + t207 (-t169 * t79 - t219 * t93) * pkin(5) + t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, -t182, t133, t38, t37, 0, 0, t54, -t55, t133, t133 * t257 + (-t251 + (-t65 - t258) * t169) * qJD(6) + t201 (-t133 * t169 - t139 * t219) * pkin(5) + t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, -t222, 0, -t158 * t221, t158 * t222, 0, 0, -t107, -t108, 0, t71, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t222, -t221, 0, 0, 0, 0, 0, -t108, t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t213, -0.2e1 * t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, -t16, t79, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t55, t133, t13, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, -t108, 0, t71, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t213, -t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
