% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR8_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPRR8_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:52:49
% EndTime: 2019-03-09 18:53:14
% DurationCPUTime: 16.91s
% Computational Cost: add. (14825->648), mult. (38596->877), div. (0->0), fcn. (31541->12), ass. (0->280)
t719 = sin(pkin(6));
t729 = cos(qJ(2));
t802 = qJD(1) * t729;
t782 = t719 * t802;
t875 = qJD(3) - t782;
t724 = sin(qJ(3));
t725 = sin(qJ(2));
t728 = cos(qJ(3));
t804 = qJD(1) * t719;
t783 = t725 * t804;
t721 = cos(pkin(6));
t803 = qJD(1) * t721;
t790 = pkin(1) * t803;
t662 = -pkin(8) * t783 + t729 * t790;
t743 = (pkin(2) * t725 - pkin(9) * t729) * t719;
t663 = qJD(1) * t743;
t765 = -t662 * t724 + t728 * t663;
t847 = -qJ(4) - pkin(9);
t776 = qJD(3) * t847;
t822 = t728 * t729;
t874 = -(pkin(3) * t725 - qJ(4) * t822) * t804 - t765 - qJD(4) * t724 + t728 * t776;
t760 = t724 * t782;
t808 = t728 * t662 + t724 * t663;
t873 = -qJ(4) * t760 - qJD(4) * t728 - t724 * t776 + t808;
t718 = sin(pkin(12));
t720 = cos(pkin(12));
t679 = t718 * t724 - t720 * t728;
t627 = t679 * t782;
t673 = t679 * qJD(3);
t872 = t627 - t673;
t680 = t718 * t728 + t720 * t724;
t807 = t875 * t680;
t813 = t718 * t874 - t873 * t720;
t707 = qJD(2) + t803;
t643 = -t707 * t728 + t724 * t783;
t645 = t707 * t724 + t728 * t783;
t767 = -t720 * t643 - t645 * t718;
t852 = qJD(5) + qJD(6);
t871 = t767 - t852;
t704 = t725 * t790;
t665 = pkin(8) * t782 + t704;
t799 = qJD(3) * t724;
t870 = -t665 + (-t760 + t799) * pkin(3);
t869 = -t807 * pkin(4) + pkin(10) * t872 - t870;
t863 = -pkin(10) * t783 + t813;
t723 = sin(qJ(5));
t727 = cos(qJ(5));
t607 = -t627 * t723 - t727 * t783;
t862 = t673 * t723 + t607;
t632 = pkin(9) * t707 + t665;
t660 = (-pkin(2) * t729 - pkin(9) * t725 - pkin(1)) * t719;
t639 = qJD(1) * t660;
t586 = -t632 * t724 + t728 * t639;
t564 = -qJ(4) * t645 + t586;
t549 = pkin(3) * t875 + t564;
t587 = t632 * t728 + t639 * t724;
t565 = -qJ(4) * t643 + t587;
t556 = t718 * t565;
t489 = t549 * t720 - t556;
t483 = -pkin(4) * t875 - t489;
t745 = -t643 * t718 + t720 * t645;
t573 = t723 * t745 - t727 * t875;
t475 = pkin(5) * t573 + t483;
t726 = cos(qJ(6));
t575 = t723 * t875 + t727 * t745;
t722 = sin(qJ(6));
t838 = t575 * t722;
t517 = t726 * t573 + t838;
t868 = t475 * t517;
t746 = t573 * t722 - t726 * t575;
t867 = t475 * t746;
t853 = qJD(5) - t767;
t590 = qJD(6) + t853;
t866 = t517 * t590;
t865 = t573 * t853;
t864 = t590 * t746;
t815 = t873 * t718 + t720 * t874;
t796 = qJD(5) * t727;
t736 = t680 * t796 - t862;
t608 = -t627 * t727 + t723 * t783;
t769 = t673 * t727 + t608;
t824 = t722 * t727;
t684 = t723 * t726 + t824;
t810 = t871 * t684;
t797 = qJD(5) * t723;
t837 = t767 * t723;
t861 = t797 - t837;
t764 = t853 * t727;
t757 = qJD(3) * t783;
t791 = qJD(1) * qJD(2);
t777 = t719 * t791;
t758 = t729 * t777;
t798 = qJD(3) * t728;
t617 = t707 * t798 - t724 * t757 + t728 * t758;
t786 = t707 * t799 + t724 * t758 + t728 * t757;
t566 = t617 * t718 + t720 * t786;
t823 = t723 * t566;
t860 = -t853 * t764 - t823;
t859 = t566 * MDP(31) + (-t517 ^ 2 + t746 ^ 2) * MDP(28) - t517 * MDP(27) * t746;
t715 = t719 ^ 2;
t858 = -0.2e1 * t715 * t791;
t857 = MDP(5) * (t725 ^ 2 - t729 ^ 2);
t613 = t684 * t680;
t827 = t719 * t725;
t675 = t721 * t724 + t728 * t827;
t826 = t719 * t729;
t850 = pkin(1) * t725;
t659 = pkin(8) * t826 + (pkin(9) + t850) * t721;
t766 = -t659 * t724 + t728 * t660;
t570 = -pkin(3) * t826 - qJ(4) * t675 + t766;
t674 = -t721 * t728 + t724 * t827;
t809 = t728 * t659 + t724 * t660;
t581 = -qJ(4) * t674 + t809;
t515 = t718 * t570 + t720 * t581;
t510 = -pkin(10) * t826 + t515;
t610 = t720 * t674 + t675 * t718;
t611 = -t674 * t718 + t675 * t720;
t708 = pkin(8) * t827;
t849 = pkin(1) * t729;
t658 = t708 + (-pkin(2) - t849) * t721;
t734 = pkin(3) * t674 + t658;
t539 = pkin(4) * t610 - pkin(10) * t611 + t734;
t820 = t727 * t510 + t723 * t539;
t855 = t869 * t727;
t814 = pkin(4) * t783 - t815;
t784 = -pkin(3) * t728 - pkin(2);
t618 = pkin(4) * t679 - pkin(10) * t680 + t784;
t700 = t847 * t724;
t701 = t847 * t728;
t630 = t700 * t718 - t701 * t720;
t854 = -t618 * t796 + t630 * t797 + t723 * t869 - t863 * t727;
t683 = t722 * t723 - t726 * t727;
t811 = t871 * t683;
t851 = -t566 * t684 - t590 * t811;
t567 = t720 * t617 - t718 * t786;
t759 = t725 * t777;
t502 = t727 * t567 + t723 * t759 - t745 * t797 + t796 * t875;
t770 = t567 * t723 - t727 * t759;
t503 = qJD(5) * t575 + t770;
t772 = t502 * t722 + t726 * t503;
t449 = -qJD(6) * t746 + t772;
t712 = pkin(3) * t718 + pkin(10);
t848 = pkin(11) + t712;
t825 = t720 * t565;
t490 = t718 * t549 + t825;
t484 = pkin(10) * t875 + t490;
t631 = -pkin(2) * t707 - t662;
t594 = pkin(3) * t643 + qJD(4) + t631;
t506 = -pkin(4) * t767 - pkin(10) * t745 + t594;
t465 = -t484 * t723 + t727 * t506;
t453 = -pkin(11) * t575 + t465;
t450 = pkin(5) * t853 + t453;
t846 = t450 * t726;
t466 = t484 * t727 + t506 * t723;
t454 = -pkin(11) * t573 + t466;
t845 = t454 * t726;
t844 = t502 * t723;
t843 = t517 * t745;
t842 = t746 * t745;
t840 = t573 * t745;
t839 = t575 * t745;
t836 = t643 * t875;
t835 = t645 * t875;
t832 = t680 * t723;
t831 = t680 * t727;
t830 = t875 * t724;
t829 = t875 * t728;
t730 = qJD(1) ^ 2;
t828 = t715 * t730;
t560 = t727 * t566;
t620 = t727 * t630;
t664 = qJD(2) * t743;
t652 = qJD(1) * t664;
t666 = (t721 * t849 - t708) * qJD(2);
t653 = qJD(1) * t666;
t731 = -qJD(3) * t587 + t728 * t652 - t724 * t653;
t491 = pkin(3) * t759 - qJ(4) * t617 - qJD(4) * t645 + t731;
t741 = -t632 * t799 + t639 * t798 + t724 * t652 + t728 * t653;
t498 = -qJ(4) * t786 - t643 * qJD(4) + t741;
t464 = t718 * t491 + t720 * t498;
t497 = t564 * t720 - t556;
t530 = pkin(3) * t645 + pkin(4) * t745 - pkin(10) * t767;
t821 = t727 * t497 + t723 * t530;
t780 = qJD(2) * t826;
t624 = -qJD(3) * t674 + t728 * t780;
t732 = -qJD(3) * t809 + t728 * t664 - t666 * t724;
t801 = qJD(2) * t725;
t781 = t719 * t801;
t511 = pkin(3) * t781 - qJ(4) * t624 - qJD(4) * t675 + t732;
t623 = qJD(3) * t675 + t724 * t780;
t740 = -t659 * t799 + t660 * t798 + t724 * t664 + t728 * t666;
t521 = -qJ(4) * t623 - qJD(4) * t674 + t740;
t473 = t718 * t511 + t720 * t521;
t818 = t607 * t722 - t608 * t726 - t613 * t852 + t683 * t673;
t779 = t680 * t797;
t795 = qJD(6) * t722;
t817 = -t673 * t824 - t795 * t832 + (t831 * t852 - t862) * t726 + (-t779 - t608) * t722;
t816 = pkin(5) * t736 + t814;
t812 = t723 * t618 + t620;
t654 = pkin(8) * t758 + qJD(2) * t704;
t667 = t721 * pkin(1) * t801 + pkin(8) * t780;
t800 = qJD(2) * t728;
t794 = qJD(6) * t726;
t793 = qJD(2) - t707;
t788 = t723 * t826;
t787 = t726 * t502 - t722 * t503 - t573 * t794;
t713 = -pkin(3) * t720 - pkin(4);
t775 = qJD(5) * t848;
t461 = pkin(10) * t759 + t464;
t583 = pkin(3) * t786 + t654;
t479 = t566 * pkin(4) - t567 * pkin(10) + t583;
t443 = -qJD(5) * t466 - t461 * t723 + t727 * t479;
t439 = pkin(5) * t566 - pkin(11) * t502 + t443;
t442 = t727 * t461 + t723 * t479 - t484 * t797 + t506 * t796;
t440 = -pkin(11) * t503 + t442;
t774 = t726 * t439 - t722 * t440;
t452 = t454 * t795;
t773 = t722 * t439 - t452;
t463 = t491 * t720 - t718 * t498;
t771 = -t510 * t723 + t727 * t539;
t472 = t511 * t720 - t718 * t521;
t496 = t564 * t718 + t825;
t514 = t570 * t720 - t718 * t581;
t768 = t727 * t618 - t630 * t723;
t629 = -t720 * t700 - t701 * t718;
t762 = qJD(6) * t450 + t440;
t761 = MDP(4) * t715 * t725 * t729;
t756 = pkin(3) * t623 + t667;
t755 = pkin(5) * t861 - t496;
t754 = pkin(1) * t858;
t753 = -t683 * t566 + t590 * t810;
t509 = pkin(4) * t826 - t514;
t529 = t727 * t530;
t678 = t848 * t727;
t752 = pkin(5) * t745 + qJD(6) * t678 - t497 * t723 + t529 + (-pkin(11) * t767 + t775) * t727;
t677 = t848 * t723;
t751 = -pkin(11) * t837 + qJD(6) * t677 + t723 * t775 + t821;
t554 = -pkin(11) * t832 + t812;
t750 = t620 * qJD(5) + qJD(6) * t554 + t855 - t769 * pkin(11) + (-(pkin(11) * t680 - t618) * qJD(5) + t863) * t723 - t807 * pkin(5);
t545 = pkin(5) * t679 - pkin(11) * t831 + t768;
t749 = pkin(11) * t736 - qJD(6) * t545 + t854;
t446 = t450 * t722 + t845;
t592 = t611 * t727 - t788;
t458 = pkin(5) * t610 - pkin(11) * t592 + t771;
t591 = t611 * t723 + t727 * t826;
t467 = -pkin(11) * t591 + t820;
t748 = t458 * t726 - t467 * t722;
t747 = t458 * t722 + t467 * t726;
t542 = t726 * t591 + t592 * t722;
t543 = -t591 * t722 + t592 * t726;
t744 = -t853 * t861 + t560;
t470 = pkin(10) * t781 + t473;
t579 = t720 * t623 + t624 * t718;
t580 = -t623 * t718 + t624 * t720;
t487 = pkin(4) * t579 - pkin(10) * t580 + t756;
t739 = t727 * t470 + t723 * t487 - t510 * t797 + t539 * t796;
t448 = -t575 * t795 + t787;
t737 = t483 * t853 - t712 * t566;
t735 = -t769 - t779;
t469 = -pkin(4) * t781 - t472;
t460 = -pkin(4) * t759 - t463;
t733 = -qJD(5) * t820 - t470 * t723 + t727 * t487;
t437 = -qJD(6) * t446 + t774;
t693 = -pkin(5) * t727 + t713;
t614 = t683 * t680;
t603 = pkin(5) * t832 + t629;
t547 = t566 * t679;
t538 = t566 * t610;
t525 = -qJD(5) * t788 + t580 * t723 + t611 * t796 - t727 * t781;
t524 = -qJD(5) * t591 + t580 * t727 + t723 * t781;
t481 = pkin(5) * t591 + t509;
t457 = qJD(6) * t543 + t524 * t722 + t726 * t525;
t456 = -qJD(6) * t542 + t524 * t726 - t525 * t722;
t451 = pkin(5) * t525 + t469;
t447 = pkin(5) * t503 + t460;
t445 = -t454 * t722 + t846;
t444 = -pkin(11) * t525 + t739;
t441 = pkin(5) * t579 - pkin(11) * t524 + t733;
t436 = t762 * t726 + t773;
t1 = [((-qJD(6) * t747 + t441 * t726 - t444 * t722) * t590 + t748 * t566 + t437 * t610 + t445 * t579 + t451 * t517 + t481 * t449 + t447 * t542 + t475 * t457) * MDP(32) + (t463 * t514 + t464 * t515 + t489 * t472 + t490 * t473 + t583 * t734 + t594 * t756) * MDP(19) + (-t715 * t802 + t719 * t875) * MDP(15) * t801 + (-(qJD(6) * t748 + t441 * t722 + t444 * t726) * t590 - t747 * t566 - t436 * t610 - t446 * t579 - t451 * t746 + t481 * t448 + t447 * t543 + t475 * t456) * MDP(33) + (t448 * t610 + t456 * t590 + t543 * t566 - t579 * t746) * MDP(29) + (-t448 * t542 - t449 * t543 - t456 * t517 + t457 * t746) * MDP(28) + (t448 * t543 - t456 * t746) * MDP(27) + (-t442 * t610 + t460 * t592 - t466 * t579 + t469 * t575 + t483 * t524 + t509 * t502 - t566 * t820 - t739 * t853) * MDP(26) + (t443 * t610 + t460 * t591 + t465 * t579 + t469 * t573 + t483 * t525 + t509 * t503 + t566 * t771 + t733 * t853) * MDP(25) + (-t503 * t610 - t525 * t853 - t566 * t591 - t573 * t579) * MDP(23) + (t502 * t610 + t524 * t853 + t566 * t592 + t575 * t579) * MDP(22) + (t579 * t853 + t538) * MDP(24) + (-t740 * t875 + t667 * t645 + t658 * t617 + t654 * t675 + t631 * t624 + (t741 * t729 + (-qJD(1) * t809 - t587) * t801) * t719) * MDP(17) + (t624 * t875 + (-t617 * t729 + (qJD(1) * t675 + t645) * t801) * t719) * MDP(13) + (-t623 * t875 + (t786 * t729 + (-qJD(1) * t674 - t643) * t801) * t719) * MDP(14) + (t732 * t875 + t667 * t643 + t658 * t786 + t654 * t674 + t631 * t623 + (-t731 * t729 + (qJD(1) * t766 + t586) * t801) * t719) * MDP(16) + t857 * t858 + (-t617 * t674 - t645 * t623 - t624 * t643 - t675 * t786) * MDP(12) + 0.2e1 * t761 * t791 + (-t653 * t721 - t666 * t707 + t729 * t754) * MDP(10) + (-t654 * t721 - t667 * t707 + t725 * t754) * MDP(9) + (MDP(6) * t780 - MDP(7) * t781) * (t707 + t803) + (-t463 * t611 - t464 * t610 - t472 * t745 + t473 * t767 - t489 * t580 - t490 * t579 - t514 * t567 - t515 * t566) * MDP(18) + (t617 * t675 + t624 * t645) * MDP(11) + (-t449 * t610 - t457 * t590 - t517 * t579 - t542 * t566) * MDP(30) + (-t502 * t591 - t503 * t592 - t524 * t573 - t525 * t575) * MDP(21) + (t502 * t592 + t524 * t575) * MDP(20) + (t579 * t590 + t538) * MDP(31); (-t463 * t629 + t464 * t630 + t815 * t489 + t813 * t490 + t583 * t784 + t594 * t870) * MDP(19) + ((t545 * t726 - t554 * t722) * t566 + t437 * t679 + t603 * t449 + t447 * t613 + (t722 * t749 - t726 * t750) * t590 + t816 * t517 + t817 * t475 + t807 * t445) * MDP(32) + (-t449 * t679 - t517 * t807 - t566 * t613 - t590 * t817) * MDP(30) + (t590 * t807 + t547) * MDP(31) + (-(t545 * t722 + t554 * t726) * t566 - t436 * t679 + t603 * t448 - t447 * t614 + (t722 * t750 + t726 * t749) * t590 - t816 * t746 + t818 * t475 - t807 * t446) * MDP(33) + (t448 * t679 - t566 * t614 + t590 * t818 - t746 * t807) * MDP(29) + (-t448 * t614 - t746 * t818) * MDP(27) + (-t448 * t613 + t449 * t614 - t517 * t818 + t746 * t817) * MDP(28) + (t502 * t679 + t560 * t680 + t575 * t807 + t735 * t853) * MDP(22) + (-t503 * t679 - t573 * t807 - t680 * t823 - t736 * t853) * MDP(23) + (t807 * t853 + t547) * MDP(24) + (-t442 * t679 + t460 * t831 - t807 * t466 + t735 * t483 + t629 * t502 - t812 * t566 + t814 * t575 + t853 * t854) * MDP(26) + (-t463 * t680 - t464 * t679 - t489 * t872 - t807 * t490 - t630 * t566 + t567 * t629 - t815 * t745 + t813 * t767) * MDP(18) + (t875 * t798 + (-t875 * t822 + (qJD(2) * t724 - t645) * t725) * t804) * MDP(13) + (-MDP(15) * t875 - MDP(7) * t793) * t783 + (-pkin(2) * t786 - t654 * t728 - t765 * t875 - t665 * t643 + (-pkin(9) * t829 + t631 * t724) * qJD(3) + (-t586 * t725 + (-pkin(9) * t801 - t631 * t729) * t724) * t804) * MDP(16) + (-t875 * t799 + (t729 * t830 + (t643 + t800) * t725) * t804) * MDP(14) + (-pkin(2) * t617 + t654 * t724 + t808 * t875 - t665 * t645 + (pkin(9) * t830 + t631 * t728) * qJD(3) + (-t631 * t822 + (-pkin(9) * t800 + t587) * t725) * t804) * MDP(17) + t828 * t857 + (t502 * t831 + t575 * t735) * MDP(20) + (pkin(8) * t759 + t662 * t707 + (-t721 * t791 + t828) * t849) * MDP(10) + (t665 * t707 + t828 * t850 - t654) * MDP(9) - t730 * t761 + t793 * MDP(6) * t782 + (t862 * t575 + t769 * t573 + (-t844 - t503 * t727 + (t573 * t723 - t575 * t727) * qJD(5)) * t680) * MDP(21) + (t617 * t724 + t645 * t829) * MDP(11) + ((t617 - t836) * t728 + (-t786 - t835) * t724) * MDP(12) + (t768 * t566 + t443 * t679 + t629 * t503 + t460 * t832 + (-t630 * t796 + (-qJD(5) * t618 - t863) * t723 - t855) * t853 + t814 * t573 + t807 * t465 + t736 * t483) * MDP(25); t645 * t643 * MDP(11) + (-t643 ^ 2 + t645 ^ 2) * MDP(12) + (t617 + t836) * MDP(13) + (-t786 + t835) * MDP(14) + MDP(15) * t759 + (t587 * t875 - t631 * t645 + t731) * MDP(16) + (t586 * t875 + t631 * t643 - t741) * MDP(17) + (-t496 * t745 + (-t566 * t718 - t567 * t720) * pkin(3) + (t489 - t497) * t767) * MDP(18) + (t489 * t496 - t490 * t497 + (t463 * t720 + t464 * t718 - t594 * t645) * pkin(3)) * MDP(19) + (t575 * t764 + t844) * MDP(20) + ((t502 - t865) * t727 + (-t575 * t853 - t503) * t723) * MDP(21) + (-t839 - t860) * MDP(22) + (t744 + t840) * MDP(23) + (-t460 * t727 - t496 * t573 + t713 * t503 + (-t712 * t796 - t529) * t853 + (t497 * t853 + t737) * t723) * MDP(25) + (t460 * t723 - t496 * t575 + t713 * t502 + (t712 * t797 + t821) * t853 + t737 * t727) * MDP(26) + (t448 * t684 - t746 * t811) * MDP(27) + (-t448 * t683 - t449 * t684 - t517 * t811 - t746 * t810) * MDP(28) + (t842 - t851) * MDP(29) + (t753 + t843) * MDP(30) + ((-t677 * t726 - t678 * t722) * t566 + t693 * t449 + t447 * t683 + (t722 * t751 - t726 * t752) * t590 + t755 * t517 - t810 * t475) * MDP(32) + (-(-t677 * t722 + t678 * t726) * t566 + t693 * t448 + t447 * t684 + (t722 * t752 + t726 * t751) * t590 - t755 * t746 + t811 * t475) * MDP(33) + (MDP(18) * t490 - MDP(24) * t853 - MDP(25) * t465 + MDP(26) * t466 - MDP(31) * t590 - MDP(32) * t445 + MDP(33) * t446) * t745; (-t745 ^ 2 - t767 ^ 2) * MDP(18) + (t489 * t745 - t490 * t767 + t583) * MDP(19) + (t744 - t840) * MDP(25) + (-t839 + t860) * MDP(26) + (t753 - t843) * MDP(32) + (t842 + t851) * MDP(33); t575 * t573 * MDP(20) + (-t573 ^ 2 + t575 ^ 2) * MDP(21) + (t502 + t865) * MDP(22) + (-t770 + (-qJD(5) + t853) * t575) * MDP(23) + t566 * MDP(24) + (t466 * t853 - t483 * t575 + t443) * MDP(25) + (t465 * t853 + t483 * t573 - t442) * MDP(26) + (t448 + t866) * MDP(29) + (-t449 - t864) * MDP(30) + (-(-t453 * t722 - t845) * t590 + t867 + (-t517 * t575 + t566 * t726 - t590 * t795) * pkin(5) + t437) * MDP(32) + (t868 + t452 + (-t454 * t590 - t439) * t722 + (t453 * t590 - t762) * t726 + (-t566 * t722 + t575 * t746 - t590 * t794) * pkin(5)) * MDP(33) + t859; (t787 + t866) * MDP(29) + (-t772 - t864) * MDP(30) + (t446 * t590 + t774 + t867) * MDP(32) + (-t726 * t440 + t445 * t590 - t773 + t868) * MDP(33) + (-MDP(29) * t838 + MDP(30) * t746 - MDP(32) * t446 - MDP(33) * t846) * qJD(6) + t859;];
tauc  = t1;
