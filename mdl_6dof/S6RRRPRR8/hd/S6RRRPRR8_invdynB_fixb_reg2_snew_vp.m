% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 12:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 12:26:20
% EndTime: 2019-05-07 12:28:09
% DurationCPUTime: 84.47s
% Computational Cost: add. (917374->1117), mult. (2025073->1818), div. (0->0), fcn. (1665145->14), ass. (0->806)
t1258 = sin(pkin(6));
t1260 = cos(pkin(6));
t1422 = qJD(1) * t1260;
t1365 = qJD(2) + t1422;
t1321 = qJD(1) * t1365;
t1299 = t1258 * t1321;
t1261 = sin(qJ(6));
t1263 = sin(qJ(3));
t1268 = cos(qJ(3));
t1264 = sin(qJ(2));
t1394 = t1258 * t1264;
t1381 = qJD(1) * t1394;
t1217 = -t1263 * t1381 + t1268 * t1365;
t1218 = t1263 * t1365 + t1268 * t1381;
t1257 = sin(pkin(12));
t1259 = cos(pkin(12));
t1183 = t1257 * t1217 + t1259 * t1218;
t1269 = cos(qJ(2));
t1393 = t1258 * t1269;
t1243 = qJD(1) * t1393 - qJD(3);
t1262 = sin(qJ(5));
t1267 = cos(qJ(5));
t1153 = t1183 * t1262 + t1267 * t1243;
t1155 = t1183 * t1267 - t1243 * t1262;
t1266 = cos(qJ(6));
t1088 = t1266 * t1153 + t1155 * t1261;
t1090 = -t1153 * t1261 + t1155 * t1266;
t1013 = t1090 * t1088;
t1421 = qJD(1) * t1269;
t1369 = qJD(2) * t1421;
t1383 = t1264 * qJDD(1);
t1225 = (t1369 + t1383) * t1258;
t1357 = qJDD(1) * t1260 + qJDD(2);
t1359 = t1263 * t1225 - t1268 * t1357;
t1166 = -qJD(3) * t1218 - t1359;
t1167 = t1217 * qJD(3) + t1268 * t1225 + t1263 * t1357;
t1361 = -t1259 * t1166 + t1167 * t1257;
t1107 = qJDD(5) + t1361;
t1302 = qJDD(6) + t1107;
t1445 = -t1013 + t1302;
t1453 = t1261 * t1445;
t1092 = t1155 * t1153;
t1443 = -t1092 + t1107;
t1452 = t1262 * t1443;
t1451 = t1266 * t1445;
t1450 = t1267 * t1443;
t1181 = -t1259 * t1217 + t1218 * t1257;
t1178 = qJD(5) + t1181;
t1108 = t1178 * t1153;
t1110 = t1166 * t1257 + t1167 * t1259;
t1384 = qJDD(1) * t1258;
t1386 = -qJD(2) * t1381 + t1269 * t1384;
t1367 = -qJDD(3) + t1386;
t1368 = t1153 * qJD(5) - t1267 * t1110 + t1262 * t1367;
t996 = -t1108 + t1368;
t1405 = t1183 * t1243;
t1069 = t1361 - t1405;
t1356 = t1365 ^ 2;
t1406 = t1181 * t1183;
t1305 = -t1367 - t1406;
t1449 = t1257 * t1305;
t1448 = t1259 * t1305;
t1404 = t1217 * t1218;
t1304 = -t1367 + t1404;
t1447 = t1263 * t1304;
t1446 = t1268 * t1304;
t1172 = qJD(6) + t1178;
t1054 = t1172 * t1088;
t1362 = t1262 * t1110 + t1267 * t1367;
t1039 = -qJD(5) * t1155 - t1362;
t1279 = qJD(6) * t1088 - t1039 * t1261 + t1266 * t1368;
t1444 = -t1054 - t1279;
t1162 = t1181 * t1243;
t1072 = t1110 + t1162;
t1200 = t1217 * t1243;
t1139 = -t1200 - t1167;
t1137 = -t1200 + t1167;
t997 = t1368 + t1108;
t1254 = t1258 ^ 2;
t1442 = (qJD(1) * (t1260 ^ 2 + t1254) + qJD(2) * t1260) * t1258;
t1364 = -t1266 * t1039 - t1261 * t1368;
t886 = (qJD(6) - t1172) * t1090 + t1364;
t992 = (qJD(5) - t1178) * t1155 + t1362;
t1134 = (qJD(3) + t1243) * t1218 + t1359;
t1441 = qJD(1) ^ 2;
t1086 = t1088 ^ 2;
t1087 = t1090 ^ 2;
t1440 = t1153 ^ 2;
t1152 = t1155 ^ 2;
t1171 = t1172 ^ 2;
t1177 = t1178 ^ 2;
t1179 = t1181 ^ 2;
t1180 = t1183 ^ 2;
t1439 = t1217 ^ 2;
t1216 = t1218 ^ 2;
t1221 = t1243 ^ 2;
t1438 = 2 * qJD(4);
t1437 = pkin(2) * t1264;
t1436 = pkin(2) * t1269;
t1435 = pkin(4) * t1257;
t1434 = pkin(8) * t1258;
t1433 = t1260 * g(3);
t1115 = pkin(4) * t1181 - pkin(10) * t1183;
t1265 = sin(qJ(1));
t1270 = cos(qJ(1));
t1245 = g(1) * t1270 + t1265 * g(2);
t1222 = -pkin(1) * t1441 + pkin(8) * t1384 - t1245;
t1244 = t1265 * g(1) - t1270 * g(2);
t1276 = qJDD(1) * pkin(1) + t1434 * t1441 + t1244;
t1275 = t1260 * t1276;
t1174 = -g(3) * t1394 + t1269 * t1222 + t1264 * t1275;
t1355 = -pkin(9) * t1264 - t1436;
t1303 = t1441 * t1355;
t1273 = t1254 * t1269 * t1303 - pkin(2) * t1356 + pkin(9) * t1357 + t1174;
t1297 = t1269 * t1321;
t1298 = t1264 * t1321;
t1274 = -t1433 - t1225 * pkin(9) - t1386 * pkin(2) + (pkin(2) * t1298 - pkin(9) * t1297 - t1276) * t1258;
t1049 = t1263 * t1274 + t1268 * t1273;
t1192 = -pkin(3) * t1243 - qJ(4) * t1218;
t1001 = -pkin(3) * t1439 + qJ(4) * t1166 + t1192 * t1243 + t1049;
t1048 = t1263 * t1273 - t1268 * t1274;
t1272 = pkin(3) * t1304 + qJ(4) * t1139 - t1048;
t901 = -0.2e1 * qJD(4) * t1181 + t1259 * t1001 + t1257 * t1272;
t864 = -pkin(4) * t1221 - pkin(10) * t1367 - t1181 * t1115 + t901;
t1360 = t1264 * t1222 - t1269 * t1275;
t1126 = -t1357 * pkin(2) - t1356 * pkin(9) + (t1269 * g(3) + t1303 * t1394) * t1258 + t1360;
t1030 = -t1166 * pkin(3) - t1439 * qJ(4) + t1218 * t1192 + qJDD(4) + t1126;
t924 = pkin(4) * t1069 - pkin(10) * t1072 + t1030;
t818 = t1262 * t864 - t1267 * t924;
t765 = t1443 * pkin(5) + pkin(11) * t996 - t818;
t1099 = pkin(5) * t1178 - pkin(11) * t1155;
t819 = t1262 * t924 + t1267 * t864;
t777 = -pkin(5) * t1440 + pkin(11) * t1039 - t1099 * t1178 + t819;
t713 = t1261 * t765 + t1266 * t777;
t1366 = t1257 * t1001 - t1259 * t1272;
t863 = t1367 * pkin(4) - t1221 * pkin(10) + (t1438 + t1115) * t1183 + t1366;
t833 = -t1039 * pkin(5) - pkin(11) * t1440 + t1155 * t1099 + t863;
t1432 = t1261 * t833;
t959 = t1013 + t1302;
t1431 = t1261 * t959;
t712 = t1261 * t777 - t1266 * t765;
t662 = t1261 * t713 - t1266 * t712;
t1430 = t1262 * t662;
t1429 = t1262 * t863;
t900 = t1183 * t1438 + t1366;
t822 = t1257 * t901 - t1259 * t900;
t1428 = t1263 * t822;
t1427 = t1266 * t833;
t1426 = t1266 * t959;
t1425 = t1267 * t662;
t1424 = t1267 * t863;
t1423 = t1268 * t822;
t1020 = t1092 + t1107;
t1420 = t1020 * t1262;
t1419 = t1020 * t1267;
t1418 = t1030 * t1257;
t1417 = t1030 * t1259;
t1104 = t1367 - t1406;
t1416 = t1104 * t1257;
t1415 = t1104 * t1259;
t1414 = t1126 * t1263;
t1413 = t1126 * t1268;
t1157 = t1367 + t1404;
t1412 = t1157 * t1263;
t1411 = t1157 * t1268;
t1410 = t1172 * t1261;
t1409 = t1172 * t1266;
t1408 = t1178 * t1262;
t1407 = t1178 * t1267;
t1395 = t1254 * t1441;
t1242 = t1269 * t1264 * t1395;
t1223 = -t1242 + t1357;
t1403 = t1223 * t1264;
t1402 = t1223 * t1269;
t1224 = t1242 + t1357;
t1401 = t1224 * t1264;
t1400 = t1224 * t1269;
t1399 = t1243 * t1257;
t1398 = t1243 * t1259;
t1397 = t1243 * t1263;
t1396 = t1243 * t1268;
t1392 = t1260 * t1264;
t1202 = t1258 * t1276 + t1433;
t1391 = t1264 * t1202;
t1390 = t1269 * t1202;
t1255 = t1264 ^ 2;
t1256 = t1269 ^ 2;
t1385 = t1255 + t1256;
t1382 = -pkin(4) * t1259 - pkin(3);
t1379 = t1257 * t1013;
t1378 = t1259 * t1013;
t1377 = t1257 * t1092;
t1376 = t1259 * t1092;
t1375 = t1264 * t1406;
t1374 = t1269 * t1406;
t1373 = t1264 * t1404;
t1372 = t1269 * t1404;
t1371 = t1255 * t1395;
t1370 = t1256 * t1395;
t823 = t1257 * t900 + t1259 * t901;
t663 = t1261 * t712 + t1266 * t713;
t962 = t1048 * t1263 + t1268 * t1049;
t1204 = -t1244 * t1265 - t1270 * t1245;
t1240 = qJDD(1) * t1270 - t1265 * t1441;
t1354 = -pkin(7) * t1240 - g(3) * t1265;
t1353 = t1264 * t1367;
t1352 = t1269 * t1367;
t1212 = -t1371 - t1356;
t1184 = -t1212 * t1264 - t1402;
t1351 = pkin(8) * t1184 - t1391;
t1229 = -t1356 - t1370;
t1189 = t1229 * t1269 - t1401;
t1350 = pkin(8) * t1189 + t1390;
t744 = t1262 * t819 - t1267 * t818;
t745 = t1262 * t818 + t1267 * t819;
t627 = t1267 * t663 - t1430;
t618 = t1257 * t627 - t1259 * t833;
t619 = t1257 * t833 + t1259 * t627;
t595 = -t1263 * t618 + t1268 * t619;
t626 = t1262 * t663 + t1425;
t1349 = t1264 * t595 - t1269 * t626;
t721 = t1257 * t745 - t1259 * t863;
t722 = t1257 * t863 + t1259 * t745;
t665 = -t1263 * t721 + t1268 * t722;
t1348 = t1264 * t665 - t1269 * t744;
t890 = -t1054 + t1279;
t815 = -t1261 * t886 + t1266 * t890;
t817 = -t1261 * t890 - t1266 * t886;
t743 = -t1262 * t815 + t1267 * t817;
t954 = -t1086 - t1087;
t733 = t1257 * t743 - t1259 * t954;
t734 = t1257 * t954 + t1259 * t743;
t667 = -t1263 * t733 + t1268 * t734;
t741 = t1262 * t817 + t1267 * t815;
t1347 = t1264 * t667 - t1269 * t741;
t1012 = -t1087 + t1086;
t885 = (qJD(6) + t1172) * t1090 + t1364;
t814 = -t1261 * t885 + t1266 * t1444;
t816 = -t1261 * t1444 - t1266 * t885;
t742 = -t1262 * t814 + t1267 * t816;
t735 = t1012 * t1259 + t1257 * t742;
t736 = -t1012 * t1257 + t1259 * t742;
t669 = -t1263 * t735 + t1268 * t736;
t740 = -t1262 * t816 - t1267 * t814;
t1346 = t1264 * t669 + t1269 * t740;
t991 = -t1171 - t1086;
t893 = t1261 * t991 + t1451;
t894 = t1266 * t991 - t1453;
t821 = -t1262 * t893 + t1267 * t894;
t759 = t1257 * t821 - t1259 * t885;
t760 = t1257 * t885 + t1259 * t821;
t702 = -t1263 * t759 + t1268 * t760;
t820 = t1262 * t894 + t1267 * t893;
t1345 = t1264 * t702 - t1269 * t820;
t1023 = -t1087 - t1171;
t913 = t1023 * t1266 - t1431;
t914 = -t1023 * t1261 - t1426;
t839 = -t1262 * t913 + t1267 * t914;
t766 = t1257 * t839 - t1259 * t1444;
t767 = t1257 * t1444 + t1259 * t839;
t709 = -t1263 * t766 + t1268 * t767;
t838 = t1262 * t914 + t1267 * t913;
t1344 = t1264 * t709 - t1269 * t838;
t1051 = -t1087 + t1171;
t918 = t1051 * t1266 + t1453;
t920 = -t1051 * t1261 + t1451;
t845 = -t1262 * t918 + t1267 * t920;
t770 = t1257 * t845 + t1259 * t890;
t772 = -t1257 * t890 + t1259 * t845;
t719 = -t1263 * t770 + t1268 * t772;
t843 = -t1262 * t920 - t1267 * t918;
t1343 = t1264 * t719 + t1269 * t843;
t1050 = t1086 - t1171;
t919 = t1050 * t1261 + t1426;
t921 = t1050 * t1266 - t1431;
t846 = -t1262 * t919 + t1267 * t921;
t771 = t1257 * t846 + t1259 * t886;
t773 = -t1257 * t886 + t1259 * t846;
t720 = -t1263 * t771 + t1268 * t773;
t844 = -t1262 * t921 - t1267 * t919;
t1342 = t1264 * t720 + t1269 * t844;
t927 = -qJD(6) * t1090 - t1364;
t879 = t1088 * t1410 + t1266 * t927;
t880 = t1088 * t1409 - t1261 * t927;
t810 = -t1262 * t879 + t1267 * t880;
t782 = t1257 * t810 + t1378;
t784 = t1259 * t810 - t1379;
t727 = -t1263 * t782 + t1268 * t784;
t808 = -t1262 * t880 - t1267 * t879;
t1341 = t1264 * t727 + t1269 * t808;
t881 = t1090 * t1409 - t1261 * t1279;
t882 = -t1090 * t1410 - t1266 * t1279;
t811 = -t1262 * t881 + t1267 * t882;
t783 = t1257 * t811 - t1378;
t785 = t1259 * t811 + t1379;
t728 = -t1263 * t783 + t1268 * t785;
t809 = -t1262 * t882 - t1267 * t881;
t1340 = t1264 * t728 + t1269 * t809;
t963 = (-t1088 * t1261 - t1090 * t1266) * t1172;
t964 = (-t1088 * t1266 + t1090 * t1261) * t1172;
t876 = -t1262 * t963 + t1267 * t964;
t860 = t1257 * t876 - t1259 * t1302;
t861 = t1257 * t1302 + t1259 * t876;
t781 = -t1263 * t860 + t1268 * t861;
t875 = -t1262 * t964 - t1267 * t963;
t1339 = t1264 * t781 + t1269 * t875;
t1044 = t1152 + t1440;
t912 = -t1262 * t996 - t1267 * t992;
t868 = t1044 * t1259 + t1257 * t912;
t869 = -t1044 * t1257 + t1259 * t912;
t793 = -t1263 * t868 + t1268 * t869;
t910 = -t1262 * t992 + t1267 * t996;
t1338 = t1264 * t793 - t1269 * t910;
t1091 = -t1152 + t1440;
t993 = (-qJD(5) - t1178) * t1155 - t1362;
t911 = t1262 * t997 + t1267 * t993;
t873 = t1091 * t1259 + t1257 * t911;
t874 = -t1091 * t1257 + t1259 * t911;
t801 = -t1263 * t873 + t1268 * t874;
t909 = -t1262 * t993 + t1267 * t997;
t1337 = t1264 * t801 + t1269 * t909;
t1060 = -t1177 - t1440;
t948 = t1060 * t1267 - t1452;
t877 = t1257 * t948 + t1259 * t993;
t878 = -t1257 * t993 + t1259 * t948;
t807 = -t1263 * t877 + t1268 * t878;
t947 = t1060 * t1262 + t1450;
t1336 = t1264 * t807 - t1269 * t947;
t1078 = -t1152 - t1177;
t953 = -t1078 * t1262 - t1419;
t883 = t1257 * t953 + t1259 * t997;
t884 = -t1257 * t997 + t1259 * t953;
t813 = -t1263 * t883 + t1268 * t884;
t952 = t1078 * t1267 - t1420;
t1335 = t1264 * t813 - t1269 * t952;
t1103 = -t1152 + t1177;
t971 = -t1103 * t1262 + t1450;
t902 = t1257 * t971 + t1259 * t996;
t904 = -t1257 * t996 + t1259 * t971;
t828 = -t1263 * t902 + t1268 * t904;
t969 = -t1103 * t1267 - t1452;
t1334 = t1264 * t828 + t1269 * t969;
t1102 = -t1177 + t1440;
t972 = t1102 * t1267 - t1420;
t903 = t1257 * t972 + t1259 * t992;
t905 = -t1257 * t992 + t1259 * t972;
t829 = -t1263 * t903 + t1268 * t905;
t970 = -t1102 * t1262 - t1419;
t1333 = t1264 * t829 + t1269 * t970;
t988 = -t1039 * t1262 + t1153 * t1407;
t942 = t1257 * t988 + t1376;
t944 = t1259 * t988 - t1377;
t856 = -t1263 * t942 + t1268 * t944;
t987 = -t1039 * t1267 - t1153 * t1408;
t1332 = t1264 * t856 + t1269 * t987;
t990 = -t1155 * t1408 - t1267 * t1368;
t943 = t1257 * t990 - t1376;
t945 = t1259 * t990 + t1377;
t857 = -t1263 * t943 + t1268 * t945;
t989 = -t1155 * t1407 + t1262 * t1368;
t1331 = t1264 * t857 + t1269 * t989;
t1026 = (t1153 * t1262 + t1155 * t1267) * t1178;
t1027 = (-t1153 * t1267 + t1155 * t1262) * t1178;
t977 = t1027 * t1257 - t1107 * t1259;
t978 = t1027 * t1259 + t1107 * t1257;
t892 = -t1263 * t977 + t1268 * t978;
t1330 = t1026 * t1269 + t1264 * t892;
t747 = t1268 * t823 - t1428;
t1329 = -t1030 * t1269 + t1264 * t747;
t1112 = -t1221 - t1179;
t1028 = t1112 * t1257 + t1448;
t1029 = t1112 * t1259 - t1449;
t939 = -t1028 * t1263 + t1029 * t1268;
t1328 = -t1069 * t1269 + t1264 * t939;
t1070 = t1361 + t1405;
t1160 = t1179 - t1221;
t1057 = t1160 * t1257 - t1415;
t1059 = t1160 * t1259 + t1416;
t968 = -t1057 * t1263 + t1059 * t1268;
t1327 = t1070 * t1269 + t1264 * t968;
t1144 = -t1180 - t1221;
t1046 = t1144 * t1259 + t1416;
t1047 = -t1144 * t1257 + t1415;
t957 = -t1046 * t1263 + t1047 * t1268;
t1326 = -t1072 * t1269 + t1264 * t957;
t1074 = -t1110 + t1162;
t1161 = -t1180 + t1221;
t1056 = t1161 * t1259 + t1449;
t1058 = -t1161 * t1257 + t1448;
t967 = -t1056 * t1263 + t1058 * t1268;
t1325 = t1074 * t1269 + t1264 * t967;
t1079 = -t1179 - t1180;
t980 = -t1070 * t1257 + t1074 * t1259;
t982 = -t1070 * t1259 - t1074 * t1257;
t899 = -t1263 * t980 + t1268 * t982;
t1324 = -t1079 * t1269 + t1264 * t899;
t1116 = -t1180 + t1179;
t979 = -t1069 * t1257 + t1072 * t1259;
t981 = -t1069 * t1259 - t1072 * t1257;
t898 = -t1263 * t979 + t1268 * t981;
t1323 = t1116 * t1269 + t1264 * t898;
t1322 = -t1126 * t1269 + t1264 * t962;
t1320 = t1254 * t1264 * t1369;
t961 = -t1048 * t1268 + t1049 * t1263;
t1135 = (-qJD(3) + t1243) * t1218 - t1359;
t1067 = t1135 * t1268 - t1137 * t1263;
t1185 = -t1216 + t1439;
t1319 = t1067 * t1264 + t1185 * t1269;
t1068 = -t1134 * t1268 - t1139 * t1263;
t1156 = t1216 + t1439;
t1318 = t1068 * t1264 + t1156 * t1269;
t1170 = -t1221 - t1439;
t1098 = t1170 * t1268 - t1447;
t1317 = t1098 * t1264 + t1135 * t1269;
t1186 = -t1216 - t1221;
t1114 = -t1186 * t1263 + t1411;
t1316 = t1114 * t1264 - t1137 * t1269;
t1194 = -t1216 + t1221;
t1119 = -t1194 * t1263 + t1446;
t1315 = t1119 * t1264 + t1139 * t1269;
t1193 = -t1221 + t1439;
t1120 = t1193 * t1268 + t1412;
t1314 = t1120 * t1264 + t1134 * t1269;
t1173 = g(3) * t1393 + t1360;
t1313 = -t1269 * t1173 + t1264 * t1174;
t1111 = t1173 * t1264 + t1174 * t1269;
t1233 = t1258 * t1297;
t1196 = t1233 + t1225;
t1232 = t1258 * t1298;
t1199 = -t1232 + t1386;
t1312 = t1196 * t1269 + t1199 * t1264;
t1197 = -t1233 + t1225;
t1198 = t1232 + t1386;
t1311 = -t1197 * t1269 + t1198 * t1264;
t1310 = t1212 * t1269 - t1403;
t1228 = -t1356 + t1370;
t1309 = t1228 * t1264 + t1402;
t1227 = t1356 - t1371;
t1308 = t1227 * t1269 + t1401;
t1307 = t1229 * t1264 + t1400;
t1203 = t1244 * t1270 - t1265 * t1245;
t1306 = t1258 * t1357;
t1061 = -t1181 * t1399 - t1259 * t1361;
t1062 = -t1181 * t1398 + t1257 * t1361;
t975 = -t1061 * t1263 + t1062 * t1268;
t1301 = t1264 * t975 + t1374;
t1063 = t1110 * t1257 - t1183 * t1398;
t1064 = t1110 * t1259 + t1183 * t1399;
t976 = -t1063 * t1263 + t1064 * t1268;
t1300 = t1264 * t976 - t1374;
t1129 = -t1166 * t1263 + t1217 * t1396;
t1296 = t1129 * t1264 - t1372;
t1131 = t1167 * t1268 + t1218 * t1397;
t1295 = t1131 * t1264 + t1372;
t654 = -pkin(5) * t833 + pkin(11) * t663;
t599 = -pkin(10) * t626 - pkin(11) * t1425 - t1262 * t654;
t611 = -pkin(4) * t626 - pkin(5) * t662;
t579 = -pkin(3) * t626 + qJ(4) * t619 + t1257 * t599 + t1259 * t611;
t584 = -qJ(4) * t618 - t1257 * t611 + t1259 * t599;
t594 = t1263 * t619 + t1268 * t618;
t572 = -pkin(9) * t594 - t1263 * t579 + t1268 * t584;
t580 = -pkin(2) * t594 - pkin(3) * t618 + pkin(4) * t833 - pkin(10) * t627 + pkin(11) * t1430 - t1267 * t654;
t589 = t1264 * t626 + t1269 * t595;
t1294 = pkin(8) * t589 + t1264 * t572 + t1269 * t580;
t648 = -pkin(5) * t954 + pkin(11) * t817 + t663;
t653 = -pkin(11) * t815 - t662;
t612 = -pkin(10) * t741 - t1262 * t648 + t1267 * t653;
t698 = -pkin(4) * t741 - pkin(5) * t815;
t597 = -pkin(3) * t741 + qJ(4) * t734 + t1257 * t612 + t1259 * t698;
t601 = -qJ(4) * t733 - t1257 * t698 + t1259 * t612;
t666 = t1263 * t734 + t1268 * t733;
t586 = -pkin(9) * t666 - t1263 * t597 + t1268 * t601;
t600 = -pkin(2) * t666 - pkin(3) * t733 + pkin(4) * t954 - pkin(10) * t743 - t1262 * t653 - t1267 * t648;
t646 = t1264 * t741 + t1269 * t667;
t1293 = pkin(8) * t646 + t1264 * t586 + t1269 * t600;
t748 = -pkin(5) * t885 + pkin(11) * t894 - t1427;
t761 = -pkin(11) * t893 + t1432;
t674 = -pkin(10) * t820 - t1262 * t748 + t1267 * t761;
t676 = -pkin(4) * t820 - pkin(5) * t893 + t712;
t624 = -pkin(3) * t820 + qJ(4) * t760 + t1257 * t674 + t1259 * t676;
t632 = -qJ(4) * t759 - t1257 * t676 + t1259 * t674;
t701 = t1263 * t760 + t1268 * t759;
t592 = -pkin(9) * t701 - t1263 * t624 + t1268 * t632;
t634 = -pkin(2) * t701 - pkin(3) * t759 + pkin(4) * t885 - pkin(10) * t821 - t1262 * t761 - t1267 * t748;
t682 = t1264 * t820 + t1269 * t702;
t1292 = pkin(8) * t682 + t1264 * t592 + t1269 * t634;
t749 = -pkin(5) * t1444 + pkin(11) * t914 + t1432;
t768 = -pkin(11) * t913 + t1427;
t677 = -pkin(10) * t838 - t1262 * t749 + t1267 * t768;
t681 = -pkin(4) * t838 - pkin(5) * t913 + t713;
t629 = -pkin(3) * t838 + qJ(4) * t767 + t1257 * t677 + t1259 * t681;
t633 = -qJ(4) * t766 - t1257 * t681 + t1259 * t677;
t708 = t1263 * t767 + t1268 * t766;
t596 = -pkin(9) * t708 - t1263 * t629 + t1268 * t633;
t636 = -pkin(2) * t708 - pkin(3) * t766 + pkin(4) * t1444 - pkin(10) * t839 - t1262 * t768 - t1267 * t749;
t689 = t1264 * t838 + t1269 * t709;
t1291 = pkin(8) * t689 + t1264 * t596 + t1269 * t636;
t637 = qJ(4) * t722 + (-pkin(10) * t1257 + t1382) * t744;
t649 = -qJ(4) * t721 + (-pkin(10) * t1259 + t1435) * t744;
t664 = t1263 * t722 + t1268 * t721;
t602 = -pkin(9) * t664 - t1263 * t637 + t1268 * t649;
t628 = -pkin(2) * t664 - pkin(3) * t721 + pkin(4) * t863 - pkin(10) * t745;
t640 = t1264 * t744 + t1269 * t665;
t1290 = pkin(8) * t640 + t1264 * t602 + t1269 * t628;
t724 = -pkin(10) * t910 - t744;
t684 = qJ(4) * t869 + t1257 * t724 + t1382 * t910;
t691 = -qJ(4) * t868 + t1259 * t724 + t1435 * t910;
t792 = t1263 * t869 + t1268 * t868;
t638 = -pkin(9) * t792 - t1263 * t684 + t1268 * t691;
t673 = -pkin(2) * t792 - pkin(3) * t868 - pkin(4) * t1044 - pkin(10) * t912 - t745;
t755 = t1264 * t910 + t1269 * t793;
t1289 = pkin(8) * t755 + t1264 * t638 + t1269 * t673;
t778 = -pkin(4) * t947 + t818;
t835 = -pkin(10) * t947 + t1429;
t699 = -pkin(3) * t947 + qJ(4) * t878 + t1257 * t835 + t1259 * t778;
t710 = -qJ(4) * t877 - t1257 * t778 + t1259 * t835;
t806 = t1263 * t878 + t1268 * t877;
t645 = -pkin(9) * t806 - t1263 * t699 + t1268 * t710;
t715 = -pkin(2) * t806 - pkin(3) * t877 - pkin(4) * t993 - pkin(10) * t948 + t1424;
t769 = t1264 * t947 + t1269 * t807;
t1288 = pkin(8) * t769 + t1264 * t645 + t1269 * t715;
t779 = -pkin(4) * t952 + t819;
t836 = -pkin(10) * t952 + t1424;
t703 = -pkin(3) * t952 + qJ(4) * t884 + t1257 * t836 + t1259 * t779;
t714 = -qJ(4) * t883 - t1257 * t779 + t1259 * t836;
t812 = t1263 * t884 + t1268 * t883;
t647 = -pkin(9) * t812 - t1263 * t703 + t1268 * t714;
t716 = -pkin(2) * t812 - pkin(3) * t883 - pkin(4) * t997 - pkin(10) * t953 - t1429;
t775 = t1264 * t952 + t1269 * t813;
t1287 = pkin(8) * t775 + t1264 * t647 + t1269 * t716;
t746 = t1263 * t823 + t1423;
t795 = -pkin(3) * t1030 + qJ(4) * t823;
t680 = -pkin(9) * t746 - qJ(4) * t1423 - t1263 * t795;
t705 = -pkin(2) * t746 - pkin(3) * t822;
t739 = t1030 * t1264 + t1269 * t747;
t1286 = pkin(8) * t739 + t1264 * t680 + t1269 * t705;
t774 = -pkin(3) * t1079 + qJ(4) * t982 + t823;
t788 = -qJ(4) * t980 - t822;
t897 = t1263 * t982 + t1268 * t980;
t700 = -pkin(9) * t897 - t1263 * t774 + t1268 * t788;
t850 = -pkin(2) * t897 - pkin(3) * t980;
t867 = t1079 * t1264 + t1269 * t899;
t1285 = pkin(8) * t867 + t1264 * t700 + t1269 * t850;
t915 = -pkin(3) * t1069 + qJ(4) * t1029 - t1417;
t938 = t1028 * t1268 + t1029 * t1263;
t946 = -qJ(4) * t1028 + t1418;
t802 = -pkin(9) * t938 - t1263 * t915 + t1268 * t946;
t825 = -pkin(2) * t938 - pkin(3) * t1028 + t900;
t908 = t1069 * t1264 + t1269 * t939;
t1284 = pkin(8) * t908 + t1264 * t802 + t1269 * t825;
t917 = -pkin(3) * t1072 + qJ(4) * t1047 + t1418;
t951 = -qJ(4) * t1046 + t1417;
t956 = t1046 * t1268 + t1047 * t1263;
t824 = -pkin(9) * t956 - t1263 * t917 + t1268 * t951;
t837 = -pkin(2) * t956 - pkin(3) * t1046 + t901;
t925 = t1072 * t1264 + t1269 * t957;
t1283 = pkin(8) * t925 + t1264 * t824 + t1269 * t837;
t1097 = t1170 * t1263 + t1446;
t1002 = -pkin(2) * t1097 + t1048;
t1033 = -pkin(9) * t1097 + t1414;
t1036 = t1098 * t1269 - t1135 * t1264;
t1282 = pkin(8) * t1036 + t1002 * t1269 + t1033 * t1264;
t1113 = t1186 * t1268 + t1412;
t1005 = -pkin(2) * t1113 + t1049;
t1041 = -pkin(9) * t1113 + t1413;
t1042 = t1114 * t1269 + t1137 * t1264;
t1281 = pkin(8) * t1042 + t1005 * t1269 + t1041 * t1264;
t1145 = t1197 * t1264 + t1198 * t1269;
t1280 = pkin(8) * t1145 + t1111;
t1022 = t1068 * t1269 - t1156 * t1264;
t1066 = -t1134 * t1263 + t1139 * t1268;
t926 = -pkin(9) * t1066 - t961;
t1278 = pkin(8) * t1022 - t1066 * t1436 + t1264 * t926;
t936 = t1126 * t1264 + t1269 * t962;
t1277 = pkin(8) * t936 + t1355 * t961;
t1239 = t1265 * qJDD(1) + t1270 * t1441;
t1231 = t1385 * t1395;
t1230 = (t1255 - t1256) * t1395;
t1226 = -pkin(7) * t1239 + g(3) * t1270;
t1206 = t1260 * t1352;
t1205 = t1258 * t1352;
t1201 = t1385 * t1299;
t1195 = (t1383 + (0.2e1 * qJD(2) + t1422) * t1421) * t1258;
t1191 = t1269 * t1225 - t1255 * t1299;
t1190 = -t1256 * t1299 - t1264 * t1386;
t1188 = t1228 * t1269 - t1403;
t1187 = -t1227 * t1264 + t1400;
t1169 = (t1260 * t1225 + t1421 * t1442) * t1264;
t1168 = (-qJD(1) * t1264 * t1442 + t1260 * t1386) * t1269;
t1150 = (-t1217 * t1268 - t1218 * t1263) * t1243;
t1149 = (-t1217 * t1263 + t1218 * t1268) * t1243;
t1146 = -t1196 * t1264 + t1199 * t1269;
t1143 = t1258 * t1199 + t1260 * t1307;
t1142 = -t1258 * t1198 + t1260 * t1309;
t1141 = -t1258 * t1197 + t1260 * t1308;
t1140 = -t1260 * t1199 + t1258 * t1307;
t1133 = -t1258 * t1195 + t1260 * t1310;
t1132 = t1260 * t1195 + t1258 * t1310;
t1130 = t1167 * t1263 - t1218 * t1396;
t1128 = t1166 * t1268 + t1217 * t1397;
t1127 = t1269 * t1150 - t1353;
t1125 = -t1258 * t1230 + t1260 * t1312;
t1124 = t1258 * t1231 + t1260 * t1311;
t1123 = -t1260 * t1231 + t1258 * t1311;
t1118 = t1193 * t1263 - t1411;
t1117 = t1194 * t1268 + t1447;
t1096 = (t1181 * t1259 - t1183 * t1257) * t1243;
t1095 = (t1181 * t1257 + t1183 * t1259) * t1243;
t1094 = -t1265 * t1143 + t1189 * t1270;
t1093 = t1143 * t1270 + t1265 * t1189;
t1085 = t1131 * t1269 - t1373;
t1084 = t1129 * t1269 + t1373;
t1083 = -t1265 * t1133 + t1184 * t1270;
t1082 = t1133 * t1270 + t1265 * t1184;
t1081 = t1258 * t1202 + t1260 * t1313;
t1080 = -t1260 * t1202 + t1258 * t1313;
t1077 = -t1149 * t1258 + t1150 * t1392 + t1206;
t1076 = -t1265 * t1124 + t1145 * t1270;
t1075 = t1124 * t1270 + t1265 * t1145;
t1065 = t1135 * t1263 + t1137 * t1268;
t1053 = t1120 * t1269 - t1134 * t1264;
t1052 = t1119 * t1269 - t1139 * t1264;
t1043 = -t1391 + (-t1140 * t1258 - t1143 * t1260) * pkin(8);
t1035 = -t1390 + (-t1132 * t1258 - t1133 * t1260) * pkin(8);
t1034 = -pkin(1) * t1140 + t1258 * t1173 + t1260 * t1350;
t1032 = t1067 * t1269 - t1185 * t1264;
t1031 = -pkin(1) * t1132 + t1258 * t1174 + t1260 * t1351;
t1025 = -t1258 * t1130 + t1260 * t1295;
t1024 = -t1258 * t1128 + t1260 * t1296;
t1018 = -t1095 * t1263 + t1096 * t1268;
t1017 = t1095 * t1268 + t1096 * t1263;
t1016 = pkin(8) * t1111 * t1260 - pkin(1) * t1080;
t1015 = -t1265 * t1081 + t1111 * t1270;
t1014 = t1081 * t1270 + t1265 * t1111;
t1011 = t1269 * t1018 - t1353;
t1010 = -pkin(1) * t1123 + t1260 * t1280;
t1009 = -pkin(2) * t1137 + pkin(9) * t1114 + t1414;
t1008 = -t1258 * t1118 + t1260 * t1314;
t1007 = -t1258 * t1117 + t1260 * t1315;
t1006 = (-t1080 * t1258 - t1081 * t1260) * pkin(8);
t1004 = pkin(2) * t1135 + pkin(9) * t1098 - t1413;
t1003 = (-t1123 * t1258 - t1124 * t1260) * pkin(8) - t1313;
t1000 = -t1258 * t1113 + t1260 * t1316;
t999 = t1260 * t1113 + t1258 * t1316;
t986 = -t1258 * t1097 + t1260 * t1317;
t985 = t1260 * t1097 + t1258 * t1317;
t974 = t1063 * t1268 + t1064 * t1263;
t973 = t1061 * t1268 + t1062 * t1263;
t966 = t1057 * t1268 + t1059 * t1263;
t965 = t1056 * t1268 + t1058 * t1263;
t955 = -t1258 * t1065 + t1260 * t1319;
t950 = -t1258 * t1066 + t1260 * t1318;
t949 = t1260 * t1066 + t1258 * t1318;
t941 = t1269 * t976 + t1375;
t940 = t1269 * t975 - t1375;
t937 = -pkin(2) * t1126 + pkin(9) * t962;
t935 = -t1265 * t1000 + t1042 * t1270;
t934 = t1000 * t1270 + t1265 * t1042;
t933 = -t1017 * t1258 + t1018 * t1392 + t1206;
t932 = -t1070 * t1264 + t1269 * t968;
t931 = -t1074 * t1264 + t1269 * t967;
t930 = t1036 * t1270 - t1265 * t986;
t929 = t1265 * t1036 + t1270 * t986;
t916 = pkin(2) * t1156 + pkin(9) * t1068 + t962;
t907 = t1022 * t1270 - t1265 * t950;
t906 = t1265 * t1022 + t1270 * t950;
t896 = t1263 * t981 + t1268 * t979;
t891 = t1263 * t978 + t1268 * t977;
t872 = -t1116 * t1264 + t1269 * t898;
t871 = -t1258 * t974 + t1260 * t1300;
t870 = -t1258 * t973 + t1260 * t1301;
t866 = -t1258 * t961 + t1260 * t1322;
t865 = t1258 * t1322 + t1260 * t961;
t859 = -t1258 * t966 + t1260 * t1327;
t858 = -t1258 * t965 + t1260 * t1325;
t855 = t1263 * t945 + t1268 * t943;
t854 = t1263 * t944 + t1268 * t942;
t853 = -t1026 * t1264 + t1269 * t892;
t852 = -t1258 * t956 + t1260 * t1326;
t851 = t1258 * t1326 + t1260 * t956;
t849 = -t1258 * t938 + t1260 * t1328;
t848 = t1258 * t1328 + t1260 * t938;
t847 = -t1264 * t1005 + t1269 * t1041 + (-t1000 * t1260 - t1258 * t999) * pkin(8);
t842 = -t1264 * t1002 + t1269 * t1033 + (-t1258 * t985 - t1260 * t986) * pkin(8);
t841 = -t1264 * t989 + t1269 * t857;
t840 = -t1264 * t987 + t1269 * t856;
t834 = -pkin(1) * t999 - t1258 * t1009 + t1260 * t1281;
t832 = -t1265 * t866 + t1270 * t936;
t831 = t1265 * t936 + t1270 * t866;
t830 = -pkin(1) * t985 - t1258 * t1004 + t1260 * t1282;
t827 = t1263 * t905 + t1268 * t903;
t826 = t1263 * t904 + t1268 * t902;
t805 = -t1258 * t896 + t1260 * t1323;
t804 = -t1265 * t852 + t1270 * t925;
t803 = t1265 * t925 + t1270 * t852;
t800 = t1263 * t874 + t1268 * t873;
t799 = -t1258 * t897 + t1260 * t1324;
t798 = t1258 * t1324 + t1260 * t897;
t797 = -pkin(2) * t1072 + pkin(9) * t957 + t1263 * t951 + t1268 * t917;
t796 = t1066 * t1437 + t1269 * t926 + (-t1258 * t949 - t1260 * t950) * pkin(8);
t794 = -t1258 * t891 + t1260 * t1330;
t791 = -pkin(2) * t1069 + pkin(9) * t939 + t1263 * t946 + t1268 * t915;
t790 = -t1264 * t970 + t1269 * t829;
t789 = -t1264 * t969 + t1269 * t828;
t787 = -t1265 * t849 + t1270 * t908;
t786 = t1265 * t908 + t1270 * t849;
t780 = t1263 * t861 + t1268 * t860;
t762 = -pkin(1) * t949 - t1258 * t916 + t1260 * t1278;
t758 = -t1258 * t855 + t1260 * t1331;
t757 = -t1258 * t854 + t1260 * t1332;
t756 = -t1264 * t909 + t1269 * t801;
t754 = -t1265 * t799 + t1270 * t867;
t753 = t1265 * t867 + t1270 * t799;
t752 = (-pkin(9) * t1269 + t1437) * t961 + (-t1258 * t865 - t1260 * t866) * pkin(8);
t751 = -t1264 * t875 + t1269 * t781;
t750 = -pkin(1) * t865 - t1258 * t937 + t1260 * t1277;
t738 = -t1258 * t827 + t1260 * t1333;
t737 = -t1258 * t826 + t1260 * t1334;
t732 = -t1258 * t812 + t1260 * t1335;
t731 = t1258 * t1335 + t1260 * t812;
t730 = -t1258 * t806 + t1260 * t1336;
t729 = t1258 * t1336 + t1260 * t806;
t726 = t1263 * t785 + t1268 * t783;
t725 = t1263 * t784 + t1268 * t782;
t723 = -t1258 * t800 + t1260 * t1337;
t718 = t1263 * t773 + t1268 * t771;
t717 = t1263 * t772 + t1268 * t770;
t707 = -t1258 * t792 + t1260 * t1338;
t706 = t1258 * t1338 + t1260 * t792;
t704 = -t1258 * t780 + t1260 * t1339;
t697 = -pkin(2) * t1079 + pkin(9) * t899 + t1263 * t788 + t1268 * t774;
t696 = -t1264 * t837 + t1269 * t824 + (-t1258 * t851 - t1260 * t852) * pkin(8);
t695 = -t1264 * t844 + t1269 * t720;
t694 = -t1264 * t843 + t1269 * t719;
t693 = -t1264 * t809 + t1269 * t728;
t692 = -t1264 * t808 + t1269 * t727;
t690 = -t1264 * t825 + t1269 * t802 + (-t1258 * t848 - t1260 * t849) * pkin(8);
t688 = -t1265 * t732 + t1270 * t775;
t687 = t1265 * t775 + t1270 * t732;
t686 = -t1265 * t730 + t1270 * t769;
t685 = t1265 * t769 + t1270 * t730;
t683 = -pkin(1) * t851 - t1258 * t797 + t1260 * t1283;
t679 = -t1258 * t746 + t1260 * t1329;
t678 = t1258 * t1329 + t1260 * t746;
t675 = -pkin(2) * t1030 + pkin(9) * t747 - qJ(4) * t1428 + t1268 * t795;
t672 = -t1265 * t707 + t1270 * t755;
t671 = t1265 * t755 + t1270 * t707;
t670 = -pkin(1) * t848 - t1258 * t791 + t1260 * t1284;
t668 = t1263 * t736 + t1268 * t735;
t661 = -t1264 * t850 + t1269 * t700 + (-t1258 * t798 - t1260 * t799) * pkin(8);
t660 = -t1258 * t726 + t1260 * t1340;
t659 = -t1258 * t725 + t1260 * t1341;
t658 = -t1258 * t718 + t1260 * t1342;
t657 = -t1258 * t717 + t1260 * t1343;
t656 = -t1265 * t679 + t1270 * t739;
t655 = t1265 * t739 + t1270 * t679;
t652 = -t1258 * t708 + t1260 * t1344;
t651 = t1258 * t1344 + t1260 * t708;
t650 = -t1264 * t740 + t1269 * t669;
t644 = -pkin(2) * t952 + pkin(9) * t813 + t1263 * t714 + t1268 * t703;
t643 = -t1258 * t701 + t1260 * t1345;
t642 = t1258 * t1345 + t1260 * t701;
t641 = -pkin(2) * t947 + pkin(9) * t807 + t1263 * t710 + t1268 * t699;
t639 = -pkin(1) * t798 - t1258 * t697 + t1260 * t1285;
t635 = -pkin(2) * t910 + pkin(9) * t793 + t1263 * t691 + t1268 * t684;
t631 = -t1265 * t652 + t1270 * t689;
t630 = t1265 * t689 + t1270 * t652;
t625 = -t1258 * t668 + t1260 * t1346;
t623 = -t1265 * t643 + t1270 * t682;
t622 = t1265 * t682 + t1270 * t643;
t621 = -t1258 * t666 + t1260 * t1347;
t620 = t1258 * t1347 + t1260 * t666;
t617 = -t1258 * t664 + t1260 * t1348;
t616 = t1258 * t1348 + t1260 * t664;
t615 = -t1264 * t716 + t1269 * t647 + (-t1258 * t731 - t1260 * t732) * pkin(8);
t614 = -t1264 * t715 + t1269 * t645 + (-t1258 * t729 - t1260 * t730) * pkin(8);
t613 = -t1264 * t705 + t1269 * t680 + (-t1258 * t678 - t1260 * t679) * pkin(8);
t610 = -pkin(1) * t678 - t1258 * t675 + t1260 * t1286;
t609 = -t1265 * t621 + t1270 * t646;
t608 = t1265 * t646 + t1270 * t621;
t607 = -t1264 * t673 + t1269 * t638 + (-t1258 * t706 - t1260 * t707) * pkin(8);
t606 = -t1265 * t617 + t1270 * t640;
t605 = t1265 * t640 + t1270 * t617;
t604 = -pkin(1) * t731 - t1258 * t644 + t1260 * t1287;
t603 = -pkin(1) * t729 - t1258 * t641 + t1260 * t1288;
t598 = -pkin(2) * t744 + pkin(9) * t665 + t1263 * t649 + t1268 * t637;
t593 = -pkin(2) * t838 + pkin(9) * t709 + t1263 * t633 + t1268 * t629;
t591 = -pkin(2) * t820 + pkin(9) * t702 + t1263 * t632 + t1268 * t624;
t590 = -pkin(1) * t706 - t1258 * t635 + t1260 * t1289;
t588 = -t1264 * t636 + t1269 * t596 + (-t1258 * t651 - t1260 * t652) * pkin(8);
t587 = -t1264 * t634 + t1269 * t592 + (-t1258 * t642 - t1260 * t643) * pkin(8);
t585 = -pkin(2) * t741 + pkin(9) * t667 + t1263 * t601 + t1268 * t597;
t583 = -t1264 * t628 + t1269 * t602 + (-t1258 * t616 - t1260 * t617) * pkin(8);
t582 = -t1258 * t594 + t1260 * t1349;
t581 = t1258 * t1349 + t1260 * t594;
t578 = -pkin(1) * t651 - t1258 * t593 + t1260 * t1291;
t577 = -pkin(1) * t642 - t1258 * t591 + t1260 * t1292;
t576 = -pkin(1) * t616 - t1258 * t598 + t1260 * t1290;
t575 = -t1265 * t582 + t1270 * t589;
t574 = t1265 * t589 + t1270 * t582;
t573 = -t1264 * t600 + t1269 * t586 + (-t1258 * t620 - t1260 * t621) * pkin(8);
t571 = -pkin(1) * t620 - t1258 * t585 + t1260 * t1293;
t570 = -pkin(2) * t626 + pkin(9) * t595 + t1263 * t584 + t1268 * t579;
t569 = -t1264 * t580 + t1269 * t572 + (-t1258 * t581 - t1260 * t582) * pkin(8);
t568 = -pkin(1) * t581 - t1258 * t570 + t1260 * t1294;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1239, -t1240, 0, t1204, 0, 0, 0, 0, 0, 0, t1094, t1083, t1076, t1015, 0, 0, 0, 0, 0, 0, t930, t935, t907, t832, 0, 0, 0, 0, 0, 0, t787, t804, t754, t656, 0, 0, 0, 0, 0, 0, t686, t688, t672, t606, 0, 0, 0, 0, 0, 0, t623, t631, t609, t575; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1240, -t1239, 0, t1203, 0, 0, 0, 0, 0, 0, t1093, t1082, t1075, t1014, 0, 0, 0, 0, 0, 0, t929, t934, t906, t831, 0, 0, 0, 0, 0, 0, t786, t803, t753, t655, 0, 0, 0, 0, 0, 0, t685, t687, t671, t605, 0, 0, 0, 0, 0, 0, t622, t630, t608, t574; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1140, t1132, t1123, t1080, 0, 0, 0, 0, 0, 0, t985, t999, t949, t865, 0, 0, 0, 0, 0, 0, t848, t851, t798, t678, 0, 0, 0, 0, 0, 0, t729, t731, t706, t616, 0, 0, 0, 0, 0, 0, t642, t651, t620, t581; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1240, 0, -t1239, 0, t1354, -t1226, -t1203, -pkin(7) * t1203, -t1265 * t1169 + t1191 * t1270, -t1265 * t1125 + t1146 * t1270, -t1265 * t1141 + t1187 * t1270, -t1265 * t1168 + t1190 * t1270, -t1265 * t1142 + t1188 * t1270, t1270 * t1201 + t1265 * t1306, -pkin(7) * t1093 - t1265 * t1034 + t1043 * t1270, -pkin(7) * t1082 - t1265 * t1031 + t1035 * t1270, -pkin(7) * t1075 + t1003 * t1270 - t1265 * t1010, -pkin(7) * t1014 + t1006 * t1270 - t1265 * t1016, -t1265 * t1025 + t1085 * t1270, t1032 * t1270 - t1265 * t955, -t1265 * t1007 + t1052 * t1270, -t1265 * t1024 + t1084 * t1270, -t1265 * t1008 + t1053 * t1270, -t1265 * t1077 + t1127 * t1270, -pkin(7) * t929 - t1265 * t830 + t1270 * t842, -pkin(7) * t934 - t1265 * t834 + t1270 * t847, -pkin(7) * t906 - t1265 * t762 + t1270 * t796, -pkin(7) * t831 - t1265 * t750 + t1270 * t752, -t1265 * t871 + t1270 * t941, -t1265 * t805 + t1270 * t872, -t1265 * t858 + t1270 * t931, -t1265 * t870 + t1270 * t940, -t1265 * t859 + t1270 * t932, t1011 * t1270 - t1265 * t933, -pkin(7) * t786 - t1265 * t670 + t1270 * t690, -pkin(7) * t803 - t1265 * t683 + t1270 * t696, -pkin(7) * t753 - t1265 * t639 + t1270 * t661, -pkin(7) * t655 - t1265 * t610 + t1270 * t613, -t1265 * t758 + t1270 * t841, -t1265 * t723 + t1270 * t756, -t1265 * t737 + t1270 * t789, -t1265 * t757 + t1270 * t840, -t1265 * t738 + t1270 * t790, -t1265 * t794 + t1270 * t853, -pkin(7) * t685 - t1265 * t603 + t1270 * t614, -pkin(7) * t687 - t1265 * t604 + t1270 * t615, -pkin(7) * t671 - t1265 * t590 + t1270 * t607, -pkin(7) * t605 - t1265 * t576 + t1270 * t583, -t1265 * t660 + t1270 * t693, -t1265 * t625 + t1270 * t650, -t1265 * t657 + t1270 * t694, -t1265 * t659 + t1270 * t692, -t1265 * t658 + t1270 * t695, -t1265 * t704 + t1270 * t751, -pkin(7) * t622 - t1265 * t577 + t1270 * t587, -pkin(7) * t630 - t1265 * t578 + t1270 * t588, -pkin(7) * t608 - t1265 * t571 + t1270 * t573, -pkin(7) * t574 - t1265 * t568 + t1270 * t569; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1239, 0, t1240, 0, t1226, t1354, t1204, pkin(7) * t1204, t1169 * t1270 + t1265 * t1191, t1125 * t1270 + t1265 * t1146, t1141 * t1270 + t1265 * t1187, t1168 * t1270 + t1265 * t1190, t1142 * t1270 + t1265 * t1188, t1265 * t1201 - t1270 * t1306, pkin(7) * t1094 + t1034 * t1270 + t1265 * t1043, pkin(7) * t1083 + t1031 * t1270 + t1265 * t1035, pkin(7) * t1076 + t1265 * t1003 + t1010 * t1270, pkin(7) * t1015 + t1265 * t1006 + t1016 * t1270, t1025 * t1270 + t1265 * t1085, t1265 * t1032 + t1270 * t955, t1007 * t1270 + t1265 * t1052, t1024 * t1270 + t1265 * t1084, t1008 * t1270 + t1265 * t1053, t1077 * t1270 + t1265 * t1127, pkin(7) * t930 + t1265 * t842 + t1270 * t830, pkin(7) * t935 + t1265 * t847 + t1270 * t834, pkin(7) * t907 + t1265 * t796 + t1270 * t762, pkin(7) * t832 + t1265 * t752 + t1270 * t750, t1265 * t941 + t1270 * t871, t1265 * t872 + t1270 * t805, t1265 * t931 + t1270 * t858, t1265 * t940 + t1270 * t870, t1265 * t932 + t1270 * t859, t1265 * t1011 + t1270 * t933, pkin(7) * t787 + t1265 * t690 + t1270 * t670, pkin(7) * t804 + t1265 * t696 + t1270 * t683, pkin(7) * t754 + t1265 * t661 + t1270 * t639, pkin(7) * t656 + t1265 * t613 + t1270 * t610, t1265 * t841 + t1270 * t758, t1265 * t756 + t1270 * t723, t1265 * t789 + t1270 * t737, t1265 * t840 + t1270 * t757, t1265 * t790 + t1270 * t738, t1265 * t853 + t1270 * t794, pkin(7) * t686 + t1265 * t614 + t1270 * t603, pkin(7) * t688 + t1265 * t615 + t1270 * t604, pkin(7) * t672 + t1265 * t607 + t1270 * t590, pkin(7) * t606 + t1265 * t583 + t1270 * t576, t1265 * t693 + t1270 * t660, t1265 * t650 + t1270 * t625, t1265 * t694 + t1270 * t657, t1265 * t692 + t1270 * t659, t1265 * t695 + t1270 * t658, t1265 * t751 + t1270 * t704, pkin(7) * t623 + t1265 * t587 + t1270 * t577, pkin(7) * t631 + t1265 * t588 + t1270 * t578, pkin(7) * t609 + t1265 * t573 + t1270 * t571, pkin(7) * t575 + t1265 * t569 + t1270 * t568; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1244, t1245, 0, 0, t1225 * t1394 + t1320, t1260 * t1230 + t1258 * t1312, t1260 * t1197 + t1258 * t1308, t1386 * t1393 - t1320, t1260 * t1198 + t1258 * t1309, t1260 * t1357, pkin(1) * t1143 - t1260 * t1173 + t1258 * t1350, pkin(1) * t1133 - t1260 * t1174 + t1258 * t1351, pkin(1) * t1124 + t1258 * t1280, pkin(1) * t1081 + t1111 * t1434, t1260 * t1130 + t1258 * t1295, t1260 * t1065 + t1258 * t1319, t1260 * t1117 + t1258 * t1315, t1260 * t1128 + t1258 * t1296, t1260 * t1118 + t1258 * t1314, t1149 * t1260 + t1150 * t1394 + t1205, pkin(1) * t986 + t1260 * t1004 + t1258 * t1282, pkin(1) * t1000 + t1260 * t1009 + t1258 * t1281, pkin(1) * t950 + t1258 * t1278 + t1260 * t916, pkin(1) * t866 + t1258 * t1277 + t1260 * t937, t1258 * t1300 + t1260 * t974, t1258 * t1323 + t1260 * t896, t1258 * t1325 + t1260 * t965, t1258 * t1301 + t1260 * t973, t1258 * t1327 + t1260 * t966, t1017 * t1260 + t1018 * t1394 + t1205, pkin(1) * t849 + t1258 * t1284 + t1260 * t791, pkin(1) * t852 + t1258 * t1283 + t1260 * t797, pkin(1) * t799 + t1258 * t1285 + t1260 * t697, pkin(1) * t679 + t1258 * t1286 + t1260 * t675, t1258 * t1331 + t1260 * t855, t1258 * t1337 + t1260 * t800, t1258 * t1334 + t1260 * t826, t1258 * t1332 + t1260 * t854, t1258 * t1333 + t1260 * t827, t1258 * t1330 + t1260 * t891, pkin(1) * t730 + t1258 * t1288 + t1260 * t641, pkin(1) * t732 + t1258 * t1287 + t1260 * t644, pkin(1) * t707 + t1258 * t1289 + t1260 * t635, pkin(1) * t617 + t1258 * t1290 + t1260 * t598, t1258 * t1340 + t1260 * t726, t1258 * t1346 + t1260 * t668, t1258 * t1343 + t1260 * t717, t1258 * t1341 + t1260 * t725, t1258 * t1342 + t1260 * t718, t1258 * t1339 + t1260 * t780, pkin(1) * t643 + t1258 * t1292 + t1260 * t591, pkin(1) * t652 + t1258 * t1291 + t1260 * t593, pkin(1) * t621 + t1258 * t1293 + t1260 * t585, pkin(1) * t582 + t1258 * t1294 + t1260 * t570;];
tauB_reg  = t1;
