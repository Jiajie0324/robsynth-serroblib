% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR8_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR8_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR8_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR8_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR8_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR8_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR8_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRPRR8_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:53:01
% EndTime: 2019-03-09 18:53:36
% DurationCPUTime: 26.94s
% Computational Cost: add. (17989->797), mult. (43918->1081), div. (0->0), fcn. (36378->18), ass. (0->353)
t869 = sin(pkin(6));
t881 = cos(qJ(2));
t982 = qJD(1) * t881;
t954 = t869 * t982;
t1096 = qJD(3) - t954;
t880 = cos(qJ(3));
t1005 = t880 * t881;
t876 = sin(qJ(2));
t922 = pkin(2) * t876 - pkin(9) * t881;
t984 = qJD(1) * t869;
t792 = t922 * t984;
t778 = t880 * t792;
t955 = t876 * t984;
t871 = cos(pkin(6));
t983 = qJD(1) * t871;
t966 = pkin(1) * t983;
t791 = -pkin(8) * t955 + t881 * t966;
t875 = sin(qJ(3));
t1050 = qJ(4) + pkin(9);
t945 = qJD(3) * t1050;
t1095 = -t778 - (pkin(3) * t876 - qJ(4) * t1005) * t984 - t880 * t945 + (t791 - qJD(4)) * t875;
t927 = t875 * t954;
t989 = t880 * t791 + t875 * t792;
t1094 = -qJ(4) * t927 - qJD(4) * t880 + t875 * t945 + t989;
t868 = sin(pkin(12));
t870 = cos(pkin(12));
t812 = t868 * t875 - t870 * t880;
t757 = t812 * t954;
t802 = t812 * qJD(3);
t1093 = t757 - t802;
t813 = t868 * t880 + t870 * t875;
t988 = t1096 * t813;
t994 = -t1094 * t870 + t1095 * t868;
t971 = qJD(1) * qJD(2);
t948 = t881 * t971;
t969 = qJDD(1) * t876;
t1092 = t948 + t969;
t794 = pkin(8) * t954 + t876 * t966;
t979 = qJD(3) * t875;
t1091 = -t794 + (-t927 + t979) * pkin(3);
t1069 = qJD(5) + qJD(6);
t848 = qJD(2) + t983;
t928 = t875 * t955;
t772 = -t848 * t880 + t928;
t774 = t848 * t875 + t880 * t955;
t937 = -t870 * t772 - t774 * t868;
t1090 = t1069 - t937;
t1089 = -t988 * pkin(4) + pkin(10) * t1093 - t1091;
t1086 = -pkin(10) * t955 + t994;
t874 = sin(qJ(5));
t879 = cos(qJ(5));
t730 = -t757 * t874 - t879 * t955;
t1082 = t802 * t874 + t730;
t910 = -t772 * t868 + t870 * t774;
t684 = t1096 * t874 + t879 * t910;
t873 = sin(qJ(6));
t1039 = t684 * t873;
t682 = -t1096 * t879 + t874 * t910;
t878 = cos(qJ(6));
t625 = t878 * t682 + t1039;
t1071 = qJD(5) - t937;
t707 = qJD(6) + t1071;
t1088 = t625 * t707;
t911 = t682 * t873 - t878 * t684;
t1087 = t707 * t911;
t996 = t1094 * t868 + t1095 * t870;
t976 = qJD(5) * t879;
t898 = t813 * t976 - t1082;
t1011 = t873 * t879;
t817 = t874 * t878 + t1011;
t991 = t1090 * t817;
t1085 = t1092 * t869;
t1084 = t1071 * t682;
t1038 = t937 * t874;
t977 = qJD(5) * t874;
t1083 = t1038 - t977;
t731 = -t757 * t879 + t874 * t955;
t939 = t802 * t879 + t731;
t970 = qJDD(1) * t871;
t847 = qJDD(2) + t970;
t978 = qJD(3) * t880;
t701 = -qJD(3) * t928 + t1085 * t880 + t875 * t847 + t848 * t978;
t980 = qJD(2) * t881;
t951 = t875 * t980;
t702 = (qJD(1) * (t876 * t978 + t951) + t875 * t969) * t869 - t880 * t847 + t848 * t979;
t652 = -t701 * t868 - t870 * t702;
t649 = qJDD(5) - t652;
t934 = t1071 * t879;
t1081 = -t1071 * t934 - t649 * t874;
t1016 = t869 * t881;
t882 = cos(qJ(1));
t1015 = t869 * t882;
t877 = sin(qJ(1));
t1007 = t877 * t881;
t1008 = t876 * t882;
t806 = t1008 * t871 + t1007;
t864 = qJ(3) + pkin(12);
t859 = sin(t864);
t860 = cos(t864);
t744 = t1015 * t859 - t806 * t860;
t1003 = t881 * t882;
t1009 = t876 * t877;
t805 = -t1003 * t871 + t1009;
t867 = qJ(5) + qJ(6);
t861 = sin(t867);
t862 = cos(t867);
t1076 = t744 * t862 - t805 * t861;
t762 = pkin(9) * t848 + t794;
t909 = -pkin(2) * t881 - pkin(9) * t876 - pkin(1);
t788 = t909 * t869;
t766 = qJD(1) * t788;
t700 = t762 * t880 + t766 * t875;
t676 = -qJ(4) * t772 + t700;
t1014 = t870 * t676;
t699 = -t762 * t875 + t880 * t766;
t675 = -qJ(4) * t774 + t699;
t663 = pkin(3) * t1096 + t675;
t607 = t868 * t663 + t1014;
t602 = pkin(10) * t1096 + t607;
t761 = -pkin(2) * t848 - t791;
t711 = pkin(3) * t772 + qJD(4) + t761;
t614 = -pkin(4) * t937 - pkin(10) * t910 + t711;
t576 = t602 * t879 + t614 * t874;
t567 = -pkin(11) * t682 + t576;
t975 = qJD(6) * t873;
t565 = t567 * t975;
t670 = t868 * t676;
t606 = t663 * t870 - t670;
t601 = -pkin(4) * t1096 - t606;
t587 = pkin(5) * t682 + t601;
t1018 = t869 * t877;
t808 = -t1009 * t871 + t1003;
t746 = t1018 * t859 + t808 * t860;
t807 = t1007 * t871 + t1008;
t696 = t746 * t862 + t807 * t861;
t1019 = t869 * t876;
t785 = t1019 * t860 + t859 * t871;
t1080 = t587 * t625 + g(1) * t696 - g(2) * t1076 - g(3) * (t1016 * t861 - t785 * t862) + t565;
t1079 = t744 * t874 + t805 * t879;
t1078 = t744 * t879 - t805 * t874;
t1077 = t744 * t861 + t805 * t862;
t695 = -t746 * t861 + t807 * t862;
t1075 = t587 * t911 - g(3) * (-t1016 * t862 - t785 * t861) - g(2) * t1077 - g(1) * t695;
t645 = qJDD(6) + t649;
t1074 = t645 * MDP(31) + (-t625 ^ 2 + t911 ^ 2) * MDP(28) - t625 * MDP(27) * t911;
t863 = t869 ^ 2;
t967 = 0.2e1 * t863;
t735 = t817 * t813;
t1017 = t869 * t880;
t804 = t1017 * t876 + t871 * t875;
t1062 = pkin(1) * t876;
t987 = pkin(8) * t1016 + t1062 * t871;
t787 = pkin(9) * t871 + t987;
t936 = -t787 * t875 + t880 * t788;
t679 = -pkin(3) * t1016 - qJ(4) * t804 + t936;
t803 = t1019 * t875 - t871 * t880;
t990 = t880 * t787 + t875 * t788;
t690 = -qJ(4) * t803 + t990;
t623 = t868 * t679 + t870 * t690;
t618 = -pkin(10) * t1016 + t623;
t733 = t870 * t803 + t804 * t868;
t734 = -t803 * t868 + t804 * t870;
t849 = pkin(8) * t1019;
t786 = t849 + (-pkin(1) * t881 - pkin(2)) * t871;
t892 = pkin(3) * t803 + t786;
t654 = pkin(4) * t733 - pkin(10) * t734 + t892;
t1001 = t879 * t618 + t874 * t654;
t1072 = t1089 * t879;
t995 = pkin(4) * t955 - t996;
t858 = pkin(3) * t880 + pkin(2);
t741 = pkin(4) * t812 - pkin(10) * t813 - t858;
t832 = t1050 * t875;
t833 = t1050 * t880;
t760 = -t832 * t868 + t833 * t870;
t1070 = -t1086 * t879 + t1089 * t874 - t741 * t976 + t760 * t977;
t1068 = g(1) * t882 + g(2) * t877;
t1067 = pkin(3) * t702 + qJDD(4);
t1004 = t880 * t882;
t1029 = t806 * t875;
t753 = t1017 * t877 - t808 * t875;
t1066 = g(3) * t803 - g(1) * t753 - g(2) * (-t1004 * t869 - t1029);
t653 = t701 * t870 - t702 * t868;
t968 = qJDD(1) * t881;
t846 = t869 * t968;
t949 = t876 * t971;
t926 = t869 * t949;
t790 = qJDD(3) - t846 + t926;
t597 = t1096 * t976 + t879 * t653 + t874 * t790 - t910 * t977;
t940 = t653 * t874 - t879 * t790;
t598 = qJD(5) * t684 + t940;
t942 = t597 * t873 + t878 * t598;
t557 = -qJD(6) * t911 + t942;
t816 = t873 * t874 - t878 * t879;
t992 = t1090 * t816;
t1063 = -t645 * t817 + t707 * t992;
t1061 = pkin(2) * t847;
t1052 = g(3) * t869;
t855 = pkin(3) * t868 + pkin(10);
t1051 = pkin(11) + t855;
t1049 = MDP(6) * t869;
t575 = -t602 * t874 + t879 * t614;
t566 = -pkin(11) * t684 + t575;
t563 = pkin(5) * t1071 + t566;
t1048 = t563 * t878;
t1047 = t567 * t878;
t1046 = t597 * t874;
t1045 = t625 * t910;
t1044 = t911 * t910;
t1041 = t682 * t910;
t1040 = t684 * t910;
t1037 = t772 * t1096;
t1036 = t774 * t1096;
t1028 = t813 * t874;
t1027 = t813 * t879;
t1026 = t847 * MDP(8);
t1025 = t860 * t861;
t1024 = t860 * t862;
t1023 = t860 * t874;
t1022 = t860 * t879;
t1021 = t860 * t881;
t1020 = t863 * qJD(1) ^ 2;
t1013 = t871 * t881;
t965 = pkin(1) * qJD(2) * t871;
t930 = qJD(1) * t965;
t963 = pkin(1) * t970;
t957 = -pkin(8) * t846 - t876 * t963 - t881 * t930;
t891 = -pkin(8) * t926 - t957;
t719 = pkin(9) * t847 + t891;
t907 = t922 * qJD(2);
t726 = (qJD(1) * t907 + qJDD(1) * t909) * t869;
t887 = -qJD(3) * t700 - t875 * t719 + t880 * t726;
t588 = pkin(3) * t790 - qJ(4) * t701 - qJD(4) * t774 + t887;
t905 = -t880 * t719 - t875 * t726 + t762 * t979 - t766 * t978;
t591 = -qJ(4) * t702 - qJD(4) * t772 - t905;
t562 = t868 * t588 + t870 * t591;
t560 = pkin(10) * t790 + t562;
t929 = pkin(8) * t1085 + t876 * t930 - t881 * t963;
t720 = t929 - t1061;
t659 = t720 + t1067;
t577 = -pkin(4) * t652 - pkin(10) * t653 + t659;
t550 = -qJD(5) * t576 - t874 * t560 + t879 * t577;
t547 = pkin(5) * t649 - pkin(11) * t597 + t550;
t1012 = t873 * t547;
t1010 = t874 * t881;
t641 = t879 * t649;
t748 = t879 * t760;
t1006 = t879 * t881;
t611 = t675 * t870 - t670;
t639 = pkin(3) * t774 + pkin(4) * t910 - pkin(10) * t937;
t1002 = t879 * t611 + t874 * t639;
t952 = t869 * t980;
t752 = -qJD(3) * t803 + t880 * t952;
t793 = t869 * t907;
t795 = (pkin(1) * t1013 - t849) * qJD(2);
t888 = -qJD(3) * t990 + t880 * t793 - t795 * t875;
t981 = qJD(2) * t876;
t953 = t869 * t981;
t619 = pkin(3) * t953 - qJ(4) * t752 - qJD(4) * t804 + t888;
t751 = qJD(3) * t804 + t869 * t951;
t904 = -t787 * t979 + t788 * t978 + t875 * t793 + t880 * t795;
t629 = -qJ(4) * t751 - qJD(4) * t803 + t904;
t584 = t868 * t619 + t870 * t629;
t999 = -t1069 * t735 + t730 * t873 - t731 * t878 + t816 * t802;
t950 = t813 * t977;
t998 = -t802 * t1011 - t975 * t1028 + (t1027 * t1069 - t1082) * t878 + (-t950 - t731) * t873;
t997 = pkin(5) * t898 + t995;
t993 = t874 * t741 + t748;
t796 = pkin(8) * t952 + t876 * t965;
t865 = t876 ^ 2;
t986 = -t881 ^ 2 + t865;
t974 = qJD(6) * t878;
t973 = qJD(2) - t848;
t962 = t881 * t1020;
t961 = t869 * t1010;
t960 = t869 * t1006;
t959 = t878 * t597 - t873 * t598 - t682 * t974;
t856 = -pkin(3) * t870 - pkin(4);
t944 = qJD(5) * t1051;
t903 = -t879 * t560 - t874 * t577 + t602 * t977 - t614 * t976;
t548 = -pkin(11) * t598 - t903;
t943 = t878 * t547 - t873 * t548;
t561 = t588 * t870 - t868 * t591;
t941 = -t618 * t874 + t879 * t654;
t583 = t619 * t870 - t868 * t629;
t610 = t675 * t868 + t1014;
t622 = t679 * t870 - t868 * t690;
t938 = t879 * t741 - t760 * t874;
t935 = -t875 * t1015 + t806 * t880;
t759 = t870 * t832 + t833 * t868;
t933 = t848 + t983;
t932 = qJD(6) * t563 + t548;
t931 = t847 + t970;
t924 = pkin(3) * t751 + t796;
t923 = -pkin(5) * t1083 - t610;
t921 = -g(1) * t805 + g(2) * t807;
t920 = g(1) * t808 + g(2) * t806;
t919 = -t816 * t645 - t707 * t991;
t617 = pkin(4) * t1016 - t622;
t638 = t879 * t639;
t811 = t1051 * t879;
t917 = pkin(5) * t910 + qJD(6) * t811 - t611 * t874 + t638 + (-pkin(11) * t937 + t944) * t879;
t810 = t1051 * t874;
t916 = -pkin(11) * t1038 + qJD(6) * t810 + t874 * t944 + t1002;
t668 = -pkin(11) * t1028 + t993;
t915 = t748 * qJD(5) + qJD(6) * t668 + t1072 - t939 * pkin(11) + (-(pkin(11) * t813 - t741) * qJD(5) + t1086) * t874 - t988 * pkin(5);
t661 = pkin(5) * t812 - pkin(11) * t1027 + t938;
t914 = pkin(11) * t898 - qJD(6) * t661 + t1070;
t554 = t563 * t873 + t1047;
t709 = t734 * t879 - t961;
t571 = pkin(5) * t733 - pkin(11) * t709 + t941;
t708 = t734 * t874 + t960;
t578 = -pkin(11) * t708 + t1001;
t913 = t571 * t878 - t578 * t873;
t912 = t571 * t873 + t578 * t878;
t657 = t878 * t708 + t709 * t873;
t658 = -t708 * t873 + t709 * t878;
t908 = t1071 * t1083 + t641;
t559 = -pkin(4) * t790 - t561;
t581 = pkin(10) * t953 + t584;
t688 = t870 * t751 + t752 * t868;
t689 = -t751 * t868 + t752 * t870;
t605 = pkin(4) * t688 - pkin(10) * t689 + t924;
t902 = t879 * t581 + t874 * t605 - t618 * t977 + t654 * t976;
t556 = -t684 * t975 + t959;
t900 = t1071 * t601 - t855 * t649;
t899 = g(1) * (t1018 * t860 - t808 * t859) + g(2) * (-t1015 * t860 - t806 * t859) + g(3) * (-t1019 * t859 + t860 * t871);
t897 = -t939 - t950;
t894 = -g(1) * t807 - g(2) * t805 + g(3) * t1016;
t580 = -pkin(4) * t953 - t583;
t890 = -pkin(9) * t790 + t1096 * t761;
t889 = -qJD(5) * t1001 - t581 * t874 + t879 * t605;
t545 = -qJD(6) * t554 + t943;
t886 = qJD(5) * t1071 * t855 + t559 + t899;
t885 = -t894 - t929;
t884 = -pkin(9) * qJD(3) * t1096 - t720 - t894;
t824 = -pkin(5) * t879 + t856;
t754 = t1018 * t875 + t808 * t880;
t736 = t816 * t813;
t725 = pkin(5) * t1028 + t759;
t705 = t746 * t879 + t807 * t874;
t704 = -t746 * t874 + t807 * t879;
t634 = -qJD(5) * t961 + t689 * t874 + t734 * t976 - t879 * t953;
t633 = -qJD(5) * t708 + t689 * t879 + t874 * t953;
t599 = pkin(5) * t708 + t617;
t570 = qJD(6) * t658 + t633 * t873 + t878 * t634;
t569 = -qJD(6) * t657 + t633 * t878 - t634 * t873;
t564 = pkin(5) * t634 + t580;
t555 = pkin(5) * t598 + t559;
t553 = -t567 * t873 + t1048;
t552 = -pkin(11) * t634 + t902;
t551 = pkin(5) * t688 - pkin(11) * t633 + t889;
t544 = t878 * t932 + t1012 - t565;
t1 = [(-t1071 * t634 - t598 * t733 - t649 * t708 - t682 * t688) * MDP(23) + (t1071 * t633 + t597 * t733 + t649 * t709 + t684 * t688) * MDP(22) + (t1071 * t688 + t649 * t733) * MDP(24) + (t562 * t623 + t607 * t584 + t561 * t622 + t606 * t583 + t659 * t892 + t711 * t924 - g(1) * (-pkin(1) * t877 - t1050 * t805 - t806 * t858) - g(2) * (pkin(1) * t882 + t1050 * t807 + t808 * t858)) * MDP(19) + (-t561 * t734 - t562 * t733 - t583 * t910 + t584 * t937 - t606 * t689 - t607 * t688 - t622 * t653 + t623 * t652 - t921) * MDP(18) + t1068 * MDP(3) + (-t796 * t848 - t849 * t847 - t929 * t871 + g(1) * t806 - g(2) * t808 + (t847 * t1013 + (-t949 + t968) * t967) * pkin(1)) * MDP(9) + ((-qJD(6) * t912 + t551 * t878 - t552 * t873) * t707 + t913 * t645 + t545 * t733 + t553 * t688 + t564 * t625 + t599 * t557 + t555 * t657 + t587 * t570 - g(1) * t1076 - g(2) * t696) * MDP(32) + (-(qJD(6) * t913 + t551 * t873 + t552 * t878) * t707 - t912 * t645 - t544 * t733 - t554 * t688 - t564 * t911 + t599 * t556 + t555 * t658 + t587 * t569 + g(1) * t1077 - g(2) * t695) * MDP(33) + (-g(1) * t1078 - g(2) * t705 + t889 * t1071 + t550 * t733 + t559 * t708 + t575 * t688 + t580 * t682 + t617 * t598 + t601 * t634 + t941 * t649) * MDP(25) + (g(1) * t1079 - g(2) * t704 - t1001 * t649 - t902 * t1071 + t559 * t709 - t576 * t688 + t580 * t684 + t617 * t597 + t601 * t633 + t903 * t733) * MDP(26) + ((t702 * t881 - t772 * t981) * MDP(14) + (t699 * t981 - t881 * t887) * MDP(16) + (-t701 * t881 + t774 * t981) * MDP(13) - t1068 * (pkin(3) * t875 + pkin(8)) * MDP(19) + (-g(1) * t1004 - t700 * t981 - t881 * t905) * MDP(17) + (t881 * t931 - t933 * t981) * MDP(7) + (t1096 * t981 - t790 * t881) * MDP(15)) * t869 + (g(1) * t935 - g(2) * t754 + t1096 * t888 + t786 * t702 + t720 * t803 + t761 * t751 + t796 * t772 + t936 * t790) * MDP(16) + (-g(1) * t1029 - g(2) * t753 - t1096 * t904 + t786 * t701 + t720 * t804 + t761 * t752 + t796 * t774 - t990 * t790) * MDP(17) + (-t1096 * t751 - t790 * t803) * MDP(14) + (t1096 * t752 + t790 * t804) * MDP(13) + (t556 * t733 + t569 * t707 + t645 * t658 - t688 * t911) * MDP(29) + (-t556 * t657 - t557 * t658 - t569 * t625 + t570 * t911) * MDP(28) + (t556 * t658 - t569 * t911) * MDP(27) + (t876 * t968 - t971 * t986) * MDP(5) * t967 + (t876 * t931 + t933 * t980) * t1049 + (qJDD(1) * t865 + 0.2e1 * t876 * t948) * t863 * MDP(4) + t871 * t1026 + (g(1) * t877 - g(2) * t882) * MDP(2) + (-t701 * t803 - t702 * t804 - t751 * t774 - t752 * t772) * MDP(12) + (t701 * t804 + t752 * t774) * MDP(11) + (-pkin(1) * t1092 * t967 - t795 * t848 - t987 * t847 - t891 * t871 + t921) * MDP(10) + (t645 * t733 + t688 * t707) * MDP(31) + (-t557 * t733 - t570 * t707 - t625 * t688 - t645 * t657) * MDP(30) + (-t597 * t708 - t598 * t709 - t633 * t682 - t634 * t684) * MDP(21) + (t597 * t709 + t633 * t684) * MDP(20) + qJDD(1) * MDP(1); ((t661 * t878 - t668 * t873) * t645 + t545 * t812 + t725 * t557 + t555 * t735 - g(1) * (-t1024 * t807 + t808 * t861) - g(2) * (-t1024 * t805 + t806 * t861) - (t1021 * t862 + t861 * t876) * t1052 + (t873 * t914 - t878 * t915) * t707 + t997 * t625 + t998 * t587 + t988 * t553) * MDP(32) - t1096 * MDP(15) * t955 + (t1071 * t988 + t649 * t812) * MDP(24) + (-t1028 * t649 - t1071 * t898 - t598 * t812 - t682 * t988) * MDP(23) + (-t993 * t649 + t903 * t812 + t759 * t597 + t559 * t1027 - g(1) * (t1023 * t807 + t808 * t879) - g(2) * (t1023 * t805 + t806 * t879) - (-t1010 * t860 + t876 * t879) * t1052 + t1070 * t1071 + t995 * t684 - t988 * t576 + t897 * t601) * MDP(26) + (pkin(1) * t962 + t791 * t848 + (pkin(8) * t971 + g(3)) * t1019 + t920 + t957) * MDP(10) + (-t557 * t812 - t625 * t988 - t645 * t735 - t707 * t998) * MDP(30) + (t1036 * t880 + t701 * t875) * MDP(11) + ((t701 - t1037) * t880 + (-t1036 - t702) * t875) * MDP(12) + (t645 * t812 + t707 * t988) * MDP(31) + (-g(3) * t1019 - t1093 * t606 - t561 * t813 - t562 * t812 - t988 * t607 + t652 * t760 + t653 * t759 - t996 * t910 + t994 * t937 - t920) * MDP(18) + (t938 * t649 + t550 * t812 + t759 * t598 + t559 * t1028 - g(1) * (-t1022 * t807 + t808 * t874) - g(2) * (-t1022 * t805 + t806 * t874) - (t1006 * t860 + t874 * t876) * t1052 + (-t760 * t976 + (-qJD(5) * t741 - t1086) * t874 - t1072) * t1071 + t995 * t682 + t988 * t575 + t898 * t601) * MDP(25) + (t1027 * t597 + t684 * t897) * MDP(20) + (t1082 * t684 + t939 * t682 + (-t1046 - t598 * t879 + (t682 * t874 - t684 * t879) * qJD(5)) * t813) * MDP(21) + t1026 + (t1020 * t1062 + t794 * t848 + t885) * MDP(9) + (t1096 * t978 + t790 * t875 + (-t1005 * t1096 - t774 * t876) * t984) * MDP(13) + (-t1096 * t979 + t790 * t880 + (t1096 * t875 * t881 + t772 * t876) * t984) * MDP(14) + (-pkin(2) * t701 + t1096 * t989 + t700 * t955 - t794 * t774 - t875 * t884 + t880 * t890) * MDP(17) + (-t699 * t955 - pkin(2) * t702 - t794 * t772 - t778 * t1096 + (t1096 * t791 + t890) * t875 + t884 * t880) * MDP(16) + (-t955 * t973 + t846) * MDP(7) + (-(t661 * t873 + t668 * t878) * t645 - t544 * t812 + t725 * t556 - t555 * t736 - g(1) * (t1025 * t807 + t808 * t862) - g(2) * (t1025 * t805 + t806 * t862) - (-t1021 * t861 + t862 * t876) * t1052 + (t873 * t915 + t878 * t914) * t707 - t997 * t911 + t999 * t587 - t988 * t554) * MDP(33) + (t556 * t812 - t645 * t736 + t707 * t999 - t911 * t988) * MDP(29) + (-t556 * t736 - t911 * t999) * MDP(27) + (-t556 * t735 + t557 * t736 - t625 * t999 + t911 * t998) * MDP(28) + (t1071 * t897 + t597 * t812 + t641 * t813 + t684 * t988) * MDP(22) - t876 * MDP(4) * t962 + (t973 * t982 + t969) * t1049 + t986 * MDP(5) * t1020 + (t562 * t760 - t561 * t759 - t659 * t858 - g(1) * (t1050 * t808 - t807 * t858) - g(2) * (t1050 * t806 - t805 * t858) - (t1050 * t876 + t858 * t881) * t1052 + t1091 * t711 + t994 * t607 + t996 * t606) * MDP(19); t774 * t772 * MDP(11) + (-t772 ^ 2 + t774 ^ 2) * MDP(12) + (t701 + t1037) * MDP(13) + (-t702 + t1036) * MDP(14) + t790 * MDP(15) + (t1096 * t700 - t761 * t774 + t1066 + t887) * MDP(16) + (g(1) * t754 + g(2) * t935 + g(3) * t804 + t1096 * t699 + t761 * t772 + t905) * MDP(17) + (-t610 * t910 + (t652 * t868 - t653 * t870) * pkin(3) + (t606 - t611) * t937) * MDP(18) + (t606 * t610 - t607 * t611 + (t561 * t870 + t562 * t868 - t711 * t774 + t1066) * pkin(3)) * MDP(19) + (t684 * t934 + t1046) * MDP(20) + ((t597 - t1084) * t879 + (-t1071 * t684 - t598) * t874) * MDP(21) + (-t1040 - t1081) * MDP(22) + (t908 + t1041) * MDP(23) + (t856 * t598 - t610 * t682 - t638 * t1071 + (t1071 * t611 + t900) * t874 - t886 * t879) * MDP(25) + (t1002 * t1071 + t856 * t597 - t610 * t684 + t874 * t886 + t879 * t900) * MDP(26) + (t556 * t817 + t911 * t992) * MDP(27) + (-t556 * t816 - t557 * t817 + t625 * t992 + t911 * t991) * MDP(28) + (t1044 - t1063) * MDP(29) + (t919 + t1045) * MDP(30) + ((-t810 * t878 - t811 * t873) * t645 + t824 * t557 + t555 * t816 + (t873 * t916 - t878 * t917) * t707 + t923 * t625 + t991 * t587 - t899 * t862) * MDP(32) + (-(-t810 * t873 + t811 * t878) * t645 + t824 * t556 + t555 * t817 + (t873 * t917 + t878 * t916) * t707 - t923 * t911 - t992 * t587 + t899 * t861) * MDP(33) + (MDP(18) * t607 - MDP(24) * t1071 - MDP(25) * t575 + MDP(26) * t576 - MDP(31) * t707 - MDP(32) * t553 + MDP(33) * t554) * t910; (-t910 ^ 2 - t937 ^ 2) * MDP(18) + (t606 * t910 - t607 * t937 - t1061 + t1067 - t885) * MDP(19) + (t908 - t1041) * MDP(25) + (-t1040 + t1081) * MDP(26) + (t919 - t1045) * MDP(32) + (t1044 + t1063) * MDP(33); t684 * t682 * MDP(20) + (-t682 ^ 2 + t684 ^ 2) * MDP(21) + (t597 + t1084) * MDP(22) + (-t940 + (-qJD(5) + t1071) * t684) * MDP(23) + t649 * MDP(24) + (t576 * t1071 - t601 * t684 - g(1) * t704 - g(2) * t1079 - g(3) * (-t785 * t874 - t960) + t550) * MDP(25) + (t575 * t1071 + t601 * t682 + g(1) * t705 - g(2) * t1078 - g(3) * (-t785 * t879 + t961) + t903) * MDP(26) + (t556 + t1088) * MDP(29) + (-t557 - t1087) * MDP(30) + (-(-t566 * t873 - t1047) * t707 + (-t625 * t684 + t645 * t878 - t707 * t975) * pkin(5) + t545 + t1075) * MDP(32) + ((-t567 * t707 - t547) * t873 + (t566 * t707 - t932) * t878 + (-t645 * t873 + t684 * t911 - t707 * t974) * pkin(5) + t1080) * MDP(33) + t1074; (t959 + t1088) * MDP(29) + (-t942 - t1087) * MDP(30) + (t554 * t707 + t1075 + t943) * MDP(32) + (-t878 * t548 + t553 * t707 - t1012 + t1080) * MDP(33) + (-MDP(29) * t1039 + MDP(30) * t911 - MDP(32) * t554 - MDP(33) * t1048) * qJD(6) + t1074;];
tau  = t1;
