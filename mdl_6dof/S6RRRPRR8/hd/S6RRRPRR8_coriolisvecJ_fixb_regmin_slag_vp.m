% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauc_reg [6x33]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR8_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR8_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:52:22
% EndTime: 2019-03-09 18:52:49
% DurationCPUTime: 10.83s
% Computational Cost: add. (14731->552), mult. (38488->773), div. (0->0), fcn. (31541->12), ass. (0->277)
t283 = sin(pkin(6));
t293 = cos(qJ(2));
t365 = qJD(1) * t293;
t345 = t283 * t365;
t435 = qJD(3) - t345;
t288 = sin(qJ(3));
t289 = sin(qJ(2));
t292 = cos(qJ(3));
t367 = qJD(1) * t283;
t346 = t289 * t367;
t285 = cos(pkin(6));
t366 = qJD(1) * t285;
t353 = pkin(1) * t366;
t226 = -pkin(8) * t346 + t293 * t353;
t307 = (pkin(2) * t289 - pkin(9) * t293) * t283;
t227 = qJD(1) * t307;
t328 = -t226 * t288 + t292 * t227;
t408 = -qJ(4) - pkin(9);
t335 = qJD(3) * t408;
t375 = t292 * t293;
t434 = (pkin(3) * t289 - qJ(4) * t375) * t367 + t328 + t288 * qJD(4) - t292 * t335;
t324 = t288 * t345;
t370 = t292 * t226 + t288 * t227;
t433 = qJ(4) * t324 + t292 * qJD(4) + t288 * t335 - t370;
t282 = sin(pkin(12));
t284 = cos(pkin(12));
t243 = t282 * t288 - t284 * t292;
t191 = t243 * t345;
t237 = t243 * qJD(3);
t432 = t191 - t237;
t244 = t282 * t292 + t284 * t288;
t369 = t435 * t244;
t399 = -t282 * t434 + t433 * t284;
t271 = qJD(2) + t366;
t207 = -t271 * t292 + t288 * t346;
t209 = t271 * t288 + t292 * t346;
t330 = -t284 * t207 - t209 * t282;
t412 = qJD(5) + qJD(6);
t431 = t330 - t412;
t268 = t289 * t353;
t229 = pkin(8) * t345 + t268;
t362 = qJD(3) * t288;
t430 = -t229 + (-t324 + t362) * pkin(3);
t426 = -pkin(10) * t346 + t399;
t429 = -t369 * pkin(4) + pkin(10) * t432 - t430;
t287 = sin(qJ(5));
t291 = cos(qJ(5));
t171 = -t191 * t287 - t291 * t346;
t423 = t237 * t287 + t171;
t309 = -t207 * t282 + t284 * t209;
t137 = t287 * t309 - t291 * t435;
t196 = pkin(9) * t271 + t229;
t224 = (-pkin(2) * t293 - pkin(9) * t289 - pkin(1)) * t283;
t203 = qJD(1) * t224;
t150 = -t196 * t288 + t292 * t203;
t128 = -qJ(4) * t209 + t150;
t114 = pkin(3) * t435 + t128;
t151 = t196 * t292 + t203 * t288;
t129 = -qJ(4) * t207 + t151;
t121 = t282 * t129;
t54 = t114 * t284 - t121;
t48 = -pkin(4) * t435 - t54;
t40 = pkin(5) * t137 + t48;
t139 = t287 * t435 + t291 * t309;
t286 = sin(qJ(6));
t290 = cos(qJ(6));
t82 = t290 * t137 + t139 * t286;
t428 = t40 * t82;
t310 = t137 * t286 - t290 * t139;
t427 = t310 * t82;
t400 = t433 * t282 + t284 * t434;
t413 = qJD(5) - t330;
t425 = t137 * t413;
t359 = qJD(5) * t291;
t341 = t244 * t359;
t424 = -t341 + t423;
t172 = -t191 * t291 + t287 * t346;
t331 = t237 * t291 + t172;
t377 = t286 * t291;
t248 = t287 * t290 + t377;
t372 = t431 * t248;
t360 = qJD(5) * t287;
t392 = t330 * t287;
t422 = t360 - t392;
t327 = t413 * t291;
t322 = qJD(3) * t346;
t354 = qJD(1) * qJD(2);
t338 = t283 * t354;
t323 = t293 * t338;
t361 = qJD(3) * t292;
t181 = t271 * t361 - t288 * t322 + t292 * t323;
t349 = t271 * t362 + t288 * t323 + t292 * t322;
t130 = t181 * t282 + t284 * t349;
t376 = t287 * t130;
t421 = -t413 * t327 - t376;
t420 = t310 ^ 2 - t82 ^ 2;
t378 = t284 * t129;
t55 = t282 * t114 + t378;
t49 = pkin(10) * t435 + t55;
t195 = -pkin(2) * t271 - t226;
t158 = pkin(3) * t207 + qJD(4) + t195;
t71 = -pkin(4) * t330 - pkin(10) * t309 + t158;
t30 = -t287 * t49 + t291 * t71;
t18 = -pkin(11) * t139 + t30;
t15 = pkin(5) * t413 + t18;
t31 = t287 * t71 + t291 * t49;
t19 = -pkin(11) * t137 + t31;
t405 = t19 * t290;
t11 = t15 * t286 + t405;
t131 = t284 * t181 - t282 * t349;
t321 = t289 * t338;
t67 = t291 * t131 + t287 * t321 - t309 * t360 + t359 * t435;
t228 = qJD(2) * t307;
t216 = qJD(1) * t228;
t380 = t283 * t289;
t272 = pkin(8) * t380;
t410 = pkin(1) * t293;
t230 = (t285 * t410 - t272) * qJD(2);
t217 = qJD(1) * t230;
t296 = -qJD(3) * t151 + t292 * t216 - t288 * t217;
t56 = pkin(3) * t321 - qJ(4) * t181 - qJD(4) * t209 + t296;
t303 = -t196 * t362 + t203 * t361 + t288 * t216 + t292 * t217;
t63 = -qJ(4) * t349 - t207 * qJD(4) + t303;
t29 = t282 * t56 + t284 * t63;
t26 = pkin(10) * t321 + t29;
t218 = pkin(8) * t323 + qJD(2) * t268;
t147 = pkin(3) * t349 + t218;
t44 = t130 * pkin(4) - t131 * pkin(10) + t147;
t8 = -qJD(5) * t31 - t287 * t26 + t291 * t44;
t4 = pkin(5) * t130 - pkin(11) * t67 + t8;
t332 = t287 * t131 - t291 * t321;
t68 = qJD(5) * t139 + t332;
t7 = t291 * t26 + t287 * t44 + t71 * t359 - t360 * t49;
t5 = -pkin(11) * t68 + t7;
t2 = -qJD(6) * t11 - t286 * t5 + t290 * t4;
t419 = t40 * t310 + t2;
t357 = qJD(6) * t290;
t358 = qJD(6) * t286;
t13 = -t137 * t357 - t139 * t358 - t286 * t68 + t290 * t67;
t154 = qJD(6) + t413;
t418 = t154 * t82 + t13;
t297 = qJD(6) * t310 - t286 * t67 - t290 * t68;
t417 = -t154 * t310 + t297;
t401 = pkin(4) * t346 + t400;
t238 = -t285 * t292 + t288 * t380;
t239 = t285 * t288 + t292 * t380;
t174 = t284 * t238 + t239 * t282;
t175 = -t238 * t282 + t239 * t284;
t222 = t272 + (-pkin(2) - t410) * t285;
t299 = t238 * pkin(3) + t222;
t104 = pkin(4) * t174 - pkin(10) * t175 + t299;
t379 = t283 * t293;
t223 = pkin(8) * t379 + (pkin(1) * t289 + pkin(9)) * t285;
t329 = -t223 * t288 + t292 * t224;
t134 = -pkin(3) * t379 - qJ(4) * t239 + t329;
t371 = t292 * t223 + t288 * t224;
t145 = -qJ(4) * t238 + t371;
t80 = t282 * t134 + t284 * t145;
t75 = -pkin(10) * t379 + t80;
t398 = t287 * t104 + t291 * t75;
t177 = t248 * t244;
t415 = t429 * t291;
t347 = -pkin(3) * t292 - pkin(2);
t182 = pkin(4) * t243 - pkin(10) * t244 + t347;
t264 = t408 * t288;
t265 = t408 * t292;
t194 = t264 * t282 - t265 * t284;
t414 = -t182 * t359 + t194 * t360 + t429 * t287 - t291 * t426;
t247 = t286 * t287 - t290 * t291;
t373 = t431 * t247;
t411 = -t248 * t130 - t154 * t373;
t17 = t19 * t358;
t337 = qJD(6) * t15 + t5;
t1 = t286 * t4 + t290 * t337 - t17;
t276 = pkin(3) * t282 + pkin(10);
t409 = pkin(11) + t276;
t62 = t128 * t284 - t121;
t95 = pkin(3) * t209 + pkin(4) * t309 - pkin(10) * t330;
t407 = t287 * t95 + t291 * t62;
t343 = qJD(2) * t379;
t188 = -qJD(3) * t238 + t292 * t343;
t295 = -qJD(3) * t371 + t292 * t228 - t288 * t230;
t364 = qJD(2) * t289;
t344 = t283 * t364;
t76 = pkin(3) * t344 - qJ(4) * t188 - qJD(4) * t239 + t295;
t187 = qJD(3) * t239 + t288 * t343;
t302 = -t223 * t362 + t224 * t361 + t288 * t228 + t292 * t230;
t86 = -qJ(4) * t187 - qJD(4) * t238 + t302;
t38 = t282 * t76 + t284 * t86;
t406 = t309 * t82;
t404 = t67 * t287;
t403 = t310 * t309;
t402 = -pkin(5) * t424 + t401;
t396 = t171 * t286 - t172 * t290 - t177 * t412 + t247 * t237;
t342 = t244 * t360;
t385 = t244 * t291;
t386 = t244 * t287;
t395 = -t237 * t377 - t358 * t386 + (t385 * t412 - t423) * t290 + (-t342 - t172) * t286;
t394 = t137 * t309;
t393 = t139 * t309;
t391 = t194 * t130;
t390 = t207 * t435;
t389 = t209 * t435;
t383 = t435 * t288;
t382 = t435 * t292;
t279 = t283 ^ 2;
t381 = t279 * qJD(1) ^ 2;
t125 = t291 * t130;
t184 = t291 * t194;
t374 = t287 * t182 + t184;
t231 = t285 * pkin(1) * t364 + pkin(8) * t343;
t368 = t289 ^ 2 - t293 ^ 2;
t363 = qJD(2) * t292;
t356 = qJD(2) - t271;
t351 = t289 * t381;
t350 = t287 * t379;
t277 = -pkin(3) * t284 - pkin(4);
t339 = t279 * t354;
t28 = -t282 * t63 + t284 * t56;
t37 = -t282 * t86 + t284 * t76;
t334 = qJD(5) * t409;
t333 = t291 * t104 - t287 * t75;
t61 = t128 * t282 + t378;
t79 = t134 * t284 - t282 * t145;
t193 = -t284 * t264 - t265 * t282;
t326 = t271 + t366;
t325 = 0.2e1 * t339;
t320 = pkin(5) * t422 - t61;
t319 = pkin(3) * t187 + t231;
t180 = t291 * t182;
t110 = pkin(5) * t243 - pkin(11) * t385 - t194 * t287 + t180;
t318 = -pkin(11) * t424 - qJD(6) * t110 + t414;
t119 = -pkin(11) * t386 + t374;
t317 = t184 * qJD(5) + qJD(6) * t119 + t415 - t331 * pkin(11) + (-(pkin(11) * t244 - t182) * qJD(5) + t426) * t287 - t369 * pkin(5);
t316 = -0.2e1 * pkin(1) * t339;
t242 = t409 * t291;
t94 = t291 * t95;
t315 = pkin(5) * t309 + qJD(6) * t242 - t287 * t62 + t94 + (-pkin(11) * t330 + t334) * t291;
t241 = t409 * t287;
t314 = -pkin(11) * t392 + qJD(6) * t241 + t287 * t334 + t407;
t313 = -t247 * t130 + t154 * t372;
t74 = pkin(4) * t379 - t79;
t156 = t175 * t291 - t350;
t23 = pkin(5) * t174 - pkin(11) * t156 + t333;
t155 = t175 * t287 + t291 * t379;
t32 = -pkin(11) * t155 + t398;
t312 = t23 * t290 - t286 * t32;
t311 = t23 * t286 + t290 * t32;
t107 = t290 * t155 + t156 * t286;
t108 = -t155 * t286 + t156 * t290;
t308 = -t413 * t422 + t125;
t35 = pkin(10) * t344 + t38;
t143 = t284 * t187 + t188 * t282;
t144 = -t187 * t282 + t188 * t284;
t52 = pkin(4) * t143 - pkin(10) * t144 + t319;
t305 = t104 * t359 + t287 * t52 + t291 * t35 - t360 * t75;
t304 = -t276 * t130 + t413 * t48;
t300 = -t331 - t342;
t34 = -pkin(4) * t344 - t37;
t25 = -pkin(4) * t321 - t28;
t298 = -qJD(5) * t398 - t287 * t35 + t291 * t52;
t257 = -pkin(5) * t291 + t277;
t178 = t247 * t244;
t167 = pkin(5) * t386 + t193;
t112 = t130 * t243;
t103 = t130 * t174;
t90 = -qJD(5) * t350 + t144 * t287 + t175 * t359 - t291 * t344;
t89 = -qJD(5) * t155 + t291 * t144 + t287 * t344;
t46 = pkin(5) * t155 + t74;
t22 = qJD(6) * t108 + t286 * t89 + t290 * t90;
t21 = -qJD(6) * t107 - t286 * t90 + t290 * t89;
t16 = pkin(5) * t90 + t34;
t12 = pkin(5) * t68 + t25;
t10 = t15 * t290 - t19 * t286;
t9 = -pkin(11) * t90 + t305;
t6 = pkin(5) * t143 - pkin(11) * t89 + t298;
t3 = [0, 0, 0, t289 * t293 * t325, -t368 * t325, t326 * t343, -t326 * t344, 0, -t218 * t285 - t231 * t271 + t289 * t316, -t217 * t285 - t230 * t271 + t293 * t316, t181 * t239 + t188 * t209, -t181 * t238 - t209 * t187 - t188 * t207 - t239 * t349, t188 * t435 + (-t181 * t293 + (qJD(1) * t239 + t209) * t364) * t283, -t187 * t435 + (t349 * t293 + (-qJD(1) * t238 - t207) * t364) * t283 (-t279 * t365 + t283 * t435) * t364, t295 * t435 + t231 * t207 + t222 * t349 + t218 * t238 + t195 * t187 + (-t296 * t293 + (qJD(1) * t329 + t150) * t364) * t283, -t302 * t435 + t231 * t209 + t222 * t181 + t218 * t239 + t195 * t188 + (t303 * t293 + (-qJD(1) * t371 - t151) * t364) * t283, -t130 * t80 - t131 * t79 - t143 * t55 - t144 * t54 - t174 * t29 - t175 * t28 - t309 * t37 + t330 * t38, t147 * t299 + t158 * t319 + t28 * t79 + t29 * t80 + t54 * t37 + t55 * t38, t139 * t89 + t156 * t67, -t137 * t89 - t139 * t90 - t155 * t67 - t156 * t68, t130 * t156 + t139 * t143 + t174 * t67 + t413 * t89, -t130 * t155 - t137 * t143 - t174 * t68 - t413 * t90, t143 * t413 + t103, t130 * t333 + t34 * t137 + t30 * t143 + t25 * t155 + t8 * t174 + t298 * t413 + t48 * t90 + t74 * t68, -t130 * t398 + t34 * t139 - t31 * t143 + t25 * t156 - t7 * t174 - t305 * t413 + t48 * t89 + t74 * t67, t108 * t13 - t21 * t310, -t107 * t13 + t108 * t297 - t21 * t82 + t22 * t310, t108 * t130 + t13 * t174 - t143 * t310 + t154 * t21, -t107 * t130 - t143 * t82 - t154 * t22 + t174 * t297, t143 * t154 + t103 (-qJD(6) * t311 - t286 * t9 + t290 * t6) * t154 + t312 * t130 + t2 * t174 + t10 * t143 + t16 * t82 - t46 * t297 + t12 * t107 + t40 * t22 -(qJD(6) * t312 + t286 * t6 + t290 * t9) * t154 - t311 * t130 - t1 * t174 - t11 * t143 - t16 * t310 + t46 * t13 + t12 * t108 + t40 * t21; 0, 0, 0, -t293 * t351, t368 * t381, t356 * t345, -t356 * t346, 0, pkin(1) * t351 + t229 * t271 - t218, pkin(8) * t321 + t226 * t271 + (-t285 * t354 + t381) * t410, t181 * t288 + t209 * t382 (t181 - t390) * t292 + (-t349 - t389) * t288, t435 * t361 + (-t435 * t375 + (qJD(2) * t288 - t209) * t289) * t367, -t435 * t362 + (t293 * t383 + (t207 + t363) * t289) * t367, -t435 * t346, -pkin(2) * t349 - t218 * t292 - t328 * t435 - t229 * t207 + (-pkin(9) * t382 + t195 * t288) * qJD(3) + (-t150 * t289 + (-pkin(9) * t364 - t195 * t293) * t288) * t367, -pkin(2) * t181 + t218 * t288 + t370 * t435 - t229 * t209 + (pkin(9) * t383 + t195 * t292) * qJD(3) + (-t195 * t375 + (-pkin(9) * t363 + t151) * t289) * t367, t131 * t193 - t243 * t29 - t244 * t28 + t400 * t309 + t399 * t330 - t369 * t55 - t432 * t54 - t391, t147 * t347 + t158 * t430 - t28 * t193 + t29 * t194 + t399 * t55 - t400 * t54, t139 * t300 + t385 * t67, t423 * t139 + t331 * t137 + (-t404 - t291 * t68 + (t137 * t287 - t139 * t291) * qJD(5)) * t244, t125 * t244 + t139 * t369 + t243 * t67 + t300 * t413, -t369 * t137 - t243 * t68 - t244 * t376 + t413 * t424, t369 * t413 + t112, t180 * t130 + t193 * t68 + t8 * t243 + (-t171 + t341) * t48 + t369 * t30 + (-t194 * t359 - t415) * t413 + t401 * t137 + (-t391 - t48 * t237 + t25 * t244 + (-qJD(5) * t182 - t426) * t413) * t287, -t374 * t130 + t401 * t139 + t193 * t67 - t7 * t243 + t25 * t385 + t300 * t48 - t369 * t31 + t413 * t414, -t13 * t178 - t310 * t396, -t13 * t177 - t178 * t297 + t310 * t395 - t396 * t82, t13 * t243 - t130 * t178 + t154 * t396 - t310 * t369, -t130 * t177 - t154 * t395 + t243 * t297 - t369 * t82, t154 * t369 + t112 (t110 * t290 - t119 * t286) * t130 + t2 * t243 - t167 * t297 + t12 * t177 + t402 * t82 + t395 * t40 + (t286 * t318 - t290 * t317) * t154 + t369 * t10 -(t110 * t286 + t119 * t290) * t130 - t1 * t243 + t167 * t13 - t12 * t178 - t402 * t310 + t396 * t40 + (t286 * t317 + t290 * t318) * t154 - t369 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209 * t207, -t207 ^ 2 + t209 ^ 2, t181 + t390, -t349 + t389, t321, t151 * t435 - t195 * t209 + t296, t150 * t435 + t195 * t207 - t303 (-t130 * t282 - t131 * t284) * pkin(3) + (-t62 + t54) * t330 + (t55 - t61) * t309, t54 * t61 - t55 * t62 + (-t158 * t209 + t28 * t284 + t282 * t29) * pkin(3), t139 * t327 + t404 (t67 - t425) * t291 + (-t139 * t413 - t68) * t287, -t393 - t421, t308 + t394, -t413 * t309, -t61 * t137 - t30 * t309 - t25 * t291 + t277 * t68 + (-t276 * t359 - t94) * t413 + (t413 * t62 + t304) * t287, -t61 * t139 + t31 * t309 + t25 * t287 + t277 * t67 + (t276 * t360 + t407) * t413 + t304 * t291, t13 * t248 - t310 * t373, -t13 * t247 + t248 * t297 - t310 * t372 - t373 * t82, t403 - t411, t313 + t406, -t154 * t309 (-t241 * t290 - t242 * t286) * t130 - t257 * t297 + t12 * t247 - t10 * t309 + t320 * t82 - t372 * t40 + (t286 * t314 - t290 * t315) * t154 -(-t241 * t286 + t242 * t290) * t130 + t257 * t13 + t12 * t248 + t11 * t309 - t320 * t310 + t373 * t40 + (t286 * t315 + t290 * t314) * t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t309 ^ 2 - t330 ^ 2, t309 * t54 - t330 * t55 + t147, 0, 0, 0, 0, 0, t308 - t394, -t393 + t421, 0, 0, 0, 0, 0, t313 - t406, t403 + t411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139 * t137, -t137 ^ 2 + t139 ^ 2, t67 + t425, -t332 + (-qJD(5) + t413) * t139, t130, -t139 * t48 + t31 * t413 + t8, t137 * t48 + t30 * t413 - t7, -t427, t420, t418, t417, t130 -(-t18 * t286 - t405) * t154 + (t130 * t290 - t139 * t82 - t154 * t358) * pkin(5) + t419, t428 + t17 + (-t154 * t19 - t4) * t286 + (t154 * t18 - t337) * t290 + (-t130 * t286 + t139 * t310 - t154 * t357) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t427, t420, t418, t417, t130, t11 * t154 + t419, t10 * t154 - t1 + t428;];
tauc_reg  = t3;
