% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x33]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR8_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR8_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR8_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR8_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR8_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR8_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:52:26
% EndTime: 2019-03-09 18:53:01
% DurationCPUTime: 16.47s
% Computational Cost: add. (17890->689), mult. (43805->964), div. (0->0), fcn. (36378->18), ass. (0->347)
t325 = sin(pkin(6));
t337 = cos(qJ(2));
t437 = qJD(1) * t337;
t410 = t325 * t437;
t543 = qJD(3) - t410;
t332 = sin(qJ(2));
t377 = pkin(2) * t332 - pkin(9) * t337;
t439 = qJD(1) * t325;
t248 = t377 * t439;
t336 = cos(qJ(3));
t234 = t336 * t248;
t411 = t332 * t439;
t327 = cos(pkin(6));
t438 = qJD(1) * t327;
t421 = pkin(1) * t438;
t247 = -pkin(8) * t411 + t337 * t421;
t331 = sin(qJ(3));
t497 = qJ(4) + pkin(9);
t399 = qJD(3) * t497;
t452 = t336 * t337;
t542 = -t234 - (pkin(3) * t332 - qJ(4) * t452) * t439 - t336 * t399 + (t247 - qJD(4)) * t331;
t385 = t331 * t410;
t443 = t336 * t247 + t331 * t248;
t541 = -qJ(4) * t385 - t336 * qJD(4) + t331 * t399 + t443;
t324 = sin(pkin(12));
t326 = cos(pkin(12));
t268 = t324 * t331 - t326 * t336;
t213 = t268 * t410;
t258 = t268 * qJD(3);
t540 = t213 - t258;
t269 = t324 * t336 + t326 * t331;
t442 = t543 * t269;
t448 = t324 * t542 - t541 * t326;
t304 = qJD(2) + t438;
t386 = t331 * t411;
t228 = -t304 * t336 + t386;
t230 = t304 * t331 + t336 * t411;
t394 = -t326 * t228 - t230 * t324;
t513 = qJD(5) + qJD(6);
t539 = t394 - t513;
t426 = qJD(1) * qJD(2);
t404 = t337 * t426;
t424 = qJDD(1) * t332;
t538 = t404 + t424;
t250 = pkin(8) * t410 + t332 * t421;
t434 = qJD(3) * t331;
t537 = -t250 + (-t385 + t434) * pkin(3);
t534 = -pkin(10) * t411 + t448;
t536 = -t442 * pkin(4) + t540 * pkin(10) - t537;
t330 = sin(qJ(5));
t335 = cos(qJ(5));
t186 = -t213 * t330 - t335 * t411;
t531 = t258 * t330 + t186;
t368 = -t228 * t324 + t326 * t230;
t138 = t330 * t368 - t335 * t543;
t140 = t330 * t543 + t335 * t368;
t329 = sin(qJ(6));
t334 = cos(qJ(6));
t369 = t138 * t329 - t334 * t140;
t82 = t334 * t138 + t140 * t329;
t535 = t369 * t82;
t514 = qJD(5) - t394;
t533 = t138 * t514;
t449 = t541 * t324 + t326 * t542;
t431 = qJD(5) * t335;
t532 = -t269 * t431 + t531;
t187 = -t213 * t335 + t330 * t411;
t395 = t258 * t335 + t187;
t458 = t329 * t335;
t273 = t330 * t334 + t458;
t445 = t539 * t273;
t530 = t538 * t325;
t432 = qJD(5) * t330;
t483 = t394 * t330;
t529 = t432 - t483;
t391 = t514 * t335;
t425 = qJDD(1) * t327;
t303 = qJDD(2) + t425;
t433 = qJD(3) * t336;
t157 = -qJD(3) * t386 + t331 * t303 + t304 * t433 + t336 * t530;
t435 = qJD(2) * t337;
t407 = t331 * t435;
t158 = -t336 * t303 + t304 * t434 + t325 * (qJD(1) * (t332 * t433 + t407) + t331 * t424);
t108 = -t157 * t324 - t326 * t158;
t105 = qJDD(5) - t108;
t457 = t330 * t105;
t528 = -t514 * t391 - t457;
t527 = t369 ^ 2 - t82 ^ 2;
t429 = qJD(6) * t334;
t430 = qJD(6) * t329;
t109 = t157 * t326 - t158 * t324;
t423 = qJDD(1) * t337;
t302 = t325 * t423;
t405 = t332 * t426;
t384 = t325 * t405;
t246 = qJDD(3) - t302 + t384;
t54 = t335 * t109 + t330 * t246 - t368 * t432 + t431 * t543;
t396 = t330 * t109 - t335 * t246;
t55 = qJD(5) * t140 + t396;
t13 = -t138 * t429 - t140 * t430 - t329 * t55 + t334 * t54;
t163 = qJD(6) + t514;
t526 = t163 * t82 + t13;
t338 = cos(qJ(1));
t450 = t337 * t338;
t333 = sin(qJ(1));
t455 = t332 * t333;
t264 = -t327 * t455 + t450;
t320 = qJ(3) + pkin(12);
t315 = sin(t320);
t316 = cos(t320);
t464 = t325 * t333;
t202 = t264 * t316 + t315 * t464;
t453 = t333 * t337;
t454 = t332 * t338;
t263 = t327 * t453 + t454;
t323 = qJ(5) + qJ(6);
t317 = sin(t323);
t318 = cos(t323);
t152 = t202 * t318 + t263 * t317;
t218 = pkin(9) * t304 + t250;
t367 = -pkin(2) * t337 - pkin(9) * t332 - pkin(1);
t244 = t367 * t325;
t222 = qJD(1) * t244;
t155 = -t218 * t331 + t336 * t222;
t131 = -qJ(4) * t230 + t155;
t119 = pkin(3) * t543 + t131;
t156 = t218 * t336 + t222 * t331;
t132 = -qJ(4) * t228 + t156;
t460 = t326 * t132;
t64 = t324 * t119 + t460;
t59 = pkin(10) * t543 + t64;
t217 = -pkin(2) * t304 - t247;
t167 = pkin(3) * t228 + qJD(4) + t217;
t71 = -pkin(4) * t394 - pkin(10) * t368 + t167;
t33 = t330 * t71 + t335 * t59;
t24 = -pkin(11) * t138 + t33;
t22 = t24 * t430;
t465 = t325 * t332;
t241 = t315 * t327 + t316 * t465;
t126 = t324 * t132;
t63 = t119 * t326 - t126;
t58 = -pkin(4) * t543 - t63;
t44 = pkin(5) * t138 + t58;
t462 = t325 * t337;
t262 = t327 * t454 + t453;
t461 = t325 * t338;
t200 = -t262 * t316 + t315 * t461;
t261 = -t327 * t450 + t455;
t521 = t200 * t318 - t261 * t317;
t525 = t44 * t82 + g(1) * t152 - g(2) * t521 - g(3) * (-t241 * t318 + t317 * t462) + t22;
t151 = -t202 * t317 + t263 * t318;
t32 = -t330 * t59 + t335 * t71;
t23 = -pkin(11) * t140 + t32;
t20 = pkin(5) * t514 + t23;
t494 = t24 * t334;
t11 = t20 * t329 + t494;
t420 = pkin(1) * qJD(2) * t327;
t388 = qJD(1) * t420;
t418 = pkin(1) * t425;
t413 = -pkin(8) * t302 - t332 * t418 - t337 * t388;
t349 = -pkin(8) * t384 - t413;
t175 = pkin(9) * t303 + t349;
t364 = t377 * qJD(2);
t182 = (qJD(1) * t364 + qJDD(1) * t367) * t325;
t345 = -qJD(3) * t156 - t331 * t175 + t336 * t182;
t45 = pkin(3) * t246 - qJ(4) * t157 - qJD(4) * t230 + t345;
t360 = -t336 * t175 - t331 * t182 + t218 * t434 - t222 * t433;
t48 = -qJ(4) * t158 - qJD(4) * t228 - t360;
t19 = t324 * t45 + t326 * t48;
t17 = pkin(10) * t246 + t19;
t387 = pkin(8) * t530 + t332 * t388 - t337 * t418;
t506 = pkin(2) * t303;
t176 = t387 - t506;
t512 = pkin(3) * t158 + qJDD(4);
t115 = t176 + t512;
t34 = -pkin(4) * t108 - pkin(10) * t109 + t115;
t7 = -qJD(5) * t33 - t330 * t17 + t335 * t34;
t4 = pkin(5) * t105 - pkin(11) * t54 + t7;
t365 = -t335 * t17 - t330 * t34 - t71 * t431 + t432 * t59;
t5 = -pkin(11) * t55 - t365;
t2 = -qJD(6) * t11 - t329 * t5 + t334 * t4;
t522 = t200 * t317 + t261 * t318;
t524 = t44 * t369 - g(1) * t151 - g(2) * t522 - g(3) * (-t241 * t317 - t318 * t462) + t2;
t346 = qJD(6) * t369 - t329 * t54 - t334 * t55;
t523 = -t163 * t369 + t346;
t520 = t200 * t330 + t261 * t335;
t519 = t200 * t335 - t261 * t330;
t319 = t325 ^ 2;
t422 = 0.2e1 * t319;
t490 = pkin(4) * t411 - t449;
t259 = -t327 * t336 + t331 * t465;
t463 = t325 * t336;
t260 = t327 * t331 + t332 * t463;
t189 = t326 * t259 + t260 * t324;
t190 = -t259 * t324 + t260 * t326;
t305 = pkin(8) * t465;
t242 = t305 + (-pkin(1) * t337 - pkin(2)) * t327;
t350 = t259 * pkin(3) + t242;
t110 = pkin(4) * t189 - pkin(10) * t190 + t350;
t507 = pkin(1) * t332;
t441 = pkin(8) * t462 + t327 * t507;
t243 = pkin(9) * t327 + t441;
t393 = -t243 * t331 + t336 * t244;
t135 = -pkin(3) * t462 - qJ(4) * t260 + t393;
t444 = t336 * t243 + t331 * t244;
t146 = -qJ(4) * t259 + t444;
t80 = t324 * t135 + t326 * t146;
t75 = -pkin(10) * t462 + t80;
t489 = t330 * t110 + t335 * t75;
t191 = t273 * t269;
t517 = t536 * t335;
t314 = pkin(3) * t336 + pkin(2);
t197 = pkin(4) * t268 - pkin(10) * t269 - t314;
t288 = t497 * t331;
t289 = t497 * t336;
t216 = -t288 * t324 + t289 * t326;
t516 = -t197 * t431 + t216 * t432 + t536 * t330 - t534 * t335;
t515 = g(1) * t338 + g(2) * t333;
t209 = -t264 * t331 + t333 * t463;
t451 = t336 * t338;
t474 = t262 * t331;
t511 = g(3) * t259 - g(2) * (-t325 * t451 - t474) - g(1) * t209;
t101 = qJDD(6) + t105;
t272 = t329 * t330 - t334 * t335;
t446 = t539 * t272;
t510 = -t273 * t101 - t163 * t446;
t401 = qJD(6) * t20 + t5;
t509 = t329 * t4 + t401 * t334;
t500 = g(3) * t325;
t311 = pkin(3) * t324 + pkin(10);
t498 = pkin(11) + t311;
t68 = t131 * t326 - t126;
t96 = pkin(3) * t230 + pkin(4) * t368 - pkin(10) * t394;
t496 = t330 * t96 + t335 * t68;
t408 = t325 * t435;
t208 = -qJD(3) * t259 + t336 * t408;
t249 = t325 * t364;
t459 = t327 * t337;
t251 = (pkin(1) * t459 - t305) * qJD(2);
t344 = -qJD(3) * t444 + t336 * t249 - t331 * t251;
t436 = qJD(2) * t332;
t409 = t325 * t436;
t76 = pkin(3) * t409 - qJ(4) * t208 - qJD(4) * t260 + t344;
t207 = qJD(3) * t260 + t325 * t407;
t359 = -t243 * t434 + t244 * t433 + t331 * t249 + t336 * t251;
t86 = -qJ(4) * t207 - qJD(4) * t259 + t359;
t41 = t324 * t76 + t326 * t86;
t495 = t368 * t82;
t493 = t54 * t330;
t492 = t369 * t368;
t491 = -t532 * pkin(5) + t490;
t487 = t186 * t329 - t187 * t334 - t191 * t513 + t272 * t258;
t406 = t269 * t432;
t472 = t269 * t335;
t473 = t269 * t330;
t486 = -t258 * t458 - t430 * t473 + (t472 * t513 - t531) * t334 + (-t406 - t187) * t329;
t485 = t138 * t368;
t484 = t140 * t368;
t482 = t228 * t543;
t481 = t230 * t543;
t470 = t316 * t317;
t469 = t316 * t318;
t468 = t316 * t330;
t467 = t316 * t337;
t466 = t319 * qJD(1) ^ 2;
t456 = t330 * t337;
t97 = t335 * t105;
t204 = t335 * t216;
t447 = t330 * t197 + t204;
t252 = pkin(8) * t408 + t332 * t420;
t321 = t332 ^ 2;
t440 = -t337 ^ 2 + t321;
t428 = qJD(2) - t304;
t417 = t337 * t466;
t416 = t325 * t456;
t415 = t335 * t462;
t312 = -pkin(3) * t326 - pkin(4);
t18 = -t324 * t48 + t326 * t45;
t40 = -t324 * t86 + t326 * t76;
t398 = qJD(5) * t498;
t397 = t335 * t110 - t330 * t75;
t67 = t131 * t324 + t460;
t79 = t135 * t326 - t324 * t146;
t392 = t262 * t336 - t331 * t461;
t215 = t326 * t288 + t289 * t324;
t390 = t304 + t438;
t389 = t303 + t425;
t382 = pkin(5) * t529 - t67;
t381 = pkin(3) * t207 + t252;
t194 = t335 * t197;
t117 = pkin(5) * t268 - pkin(11) * t472 - t216 * t330 + t194;
t380 = -t532 * pkin(11) - qJD(6) * t117 + t516;
t124 = -pkin(11) * t473 + t447;
t379 = t204 * qJD(5) + qJD(6) * t124 + t517 - t395 * pkin(11) + (-(pkin(11) * t269 - t197) * qJD(5) + t534) * t330 - t442 * pkin(5);
t378 = -t272 * t101 + t445 * t163;
t376 = -g(1) * t261 + g(2) * t263;
t375 = g(1) * t264 + g(2) * t262;
t267 = t498 * t335;
t95 = t335 * t96;
t374 = pkin(5) * t368 + qJD(6) * t267 - t330 * t68 + t95 + (-pkin(11) * t394 + t398) * t335;
t266 = t498 * t330;
t373 = -pkin(11) * t483 + qJD(6) * t266 + t330 * t398 + t496;
t74 = pkin(4) * t462 - t79;
t165 = t190 * t335 - t416;
t28 = pkin(5) * t189 - pkin(11) * t165 + t397;
t164 = t190 * t330 + t415;
t35 = -pkin(11) * t164 + t489;
t371 = t28 * t334 - t329 * t35;
t370 = t28 * t329 + t334 * t35;
t113 = t334 * t164 + t165 * t329;
t114 = -t164 * t329 + t165 * t334;
t16 = -pkin(4) * t246 - t18;
t366 = -t514 * t529 + t97;
t38 = pkin(10) * t409 + t41;
t144 = t326 * t207 + t208 * t324;
t145 = -t207 * t324 + t208 * t326;
t62 = pkin(4) * t144 - pkin(10) * t145 + t381;
t362 = t110 * t431 + t330 * t62 + t335 * t38 - t432 * t75;
t361 = -t311 * t105 + t514 * t58;
t357 = g(1) * (-t264 * t315 + t316 * t464) + g(2) * (-t262 * t315 - t316 * t461) + g(3) * (-t315 * t465 + t316 * t327);
t356 = -t395 - t406;
t37 = -pkin(4) * t409 - t40;
t352 = -g(1) * t263 - g(2) * t261 + g(3) * t462;
t351 = -g(3) * t465 - t375;
t348 = -pkin(9) * t246 + t217 * t543;
t347 = -qJD(5) * t489 - t330 * t38 + t335 * t62;
t343 = qJD(5) * t311 * t514 + t16 + t357;
t342 = -t352 - t387;
t341 = -pkin(9) * qJD(3) * t543 - t176 - t352;
t280 = -pkin(5) * t335 + t312;
t210 = t264 * t336 + t331 * t464;
t192 = t272 * t269;
t181 = pkin(5) * t473 + t215;
t161 = t202 * t335 + t263 * t330;
t160 = -t202 * t330 + t263 * t335;
t91 = -qJD(5) * t416 + t145 * t330 + t190 * t431 - t335 * t409;
t90 = -qJD(5) * t164 + t335 * t145 + t330 * t409;
t56 = pkin(5) * t164 + t74;
t27 = qJD(6) * t114 + t329 * t90 + t334 * t91;
t26 = -qJD(6) * t113 - t329 * t91 + t334 * t90;
t21 = pkin(5) * t91 + t37;
t12 = pkin(5) * t55 + t16;
t10 = t20 * t334 - t24 * t329;
t9 = -pkin(11) * t91 + t362;
t8 = pkin(5) * t144 - pkin(11) * t90 + t347;
t1 = -t22 + t509;
t3 = [qJDD(1), g(1) * t333 - g(2) * t338, t515 (qJDD(1) * t321 + 0.2e1 * t332 * t404) * t319 (t332 * t423 - t426 * t440) * t422 (t332 * t389 + t390 * t435) * t325 (t337 * t389 - t390 * t436) * t325, t303 * t327, -t252 * t304 - t305 * t303 - t387 * t327 + g(1) * t262 - g(2) * t264 + (t303 * t459 + (-t405 + t423) * t422) * pkin(1), -pkin(1) * t422 * t538 - t251 * t304 - t441 * t303 - t349 * t327 + t376, t157 * t260 + t208 * t230, -t157 * t259 - t158 * t260 - t207 * t230 - t208 * t228, t208 * t543 + t260 * t246 + (-t157 * t337 + t230 * t436) * t325, -t207 * t543 - t259 * t246 + (t158 * t337 - t228 * t436) * t325 (-t246 * t337 + t436 * t543) * t325, t344 * t543 + t393 * t246 + t252 * t228 + t242 * t158 + t176 * t259 + t217 * t207 + g(1) * t392 - g(2) * t210 + (t155 * t436 - t337 * t345) * t325, -t359 * t543 - t444 * t246 + t252 * t230 + t242 * t157 + t176 * t260 + t217 * t208 - g(1) * t474 - g(2) * t209 + (-g(1) * t451 - t156 * t436 - t337 * t360) * t325, t108 * t80 - t109 * t79 - t144 * t64 - t145 * t63 - t18 * t190 - t189 * t19 - t368 * t40 + t394 * t41 - t376, t19 * t80 + t64 * t41 + t18 * t79 + t63 * t40 + t115 * t350 + t167 * t381 - g(1) * (-t333 * pkin(1) - t261 * t497 - t262 * t314) - g(2) * (pkin(1) * t338 + t263 * t497 + t264 * t314) - t515 * t325 * (pkin(3) * t331 + pkin(8)) t140 * t90 + t165 * t54, -t138 * t90 - t140 * t91 - t164 * t54 - t165 * t55, t105 * t165 + t140 * t144 + t189 * t54 + t514 * t90, -t105 * t164 - t138 * t144 - t189 * t55 - t514 * t91, t105 * t189 + t144 * t514, -g(1) * t519 - g(2) * t161 + t397 * t105 + t37 * t138 + t32 * t144 + t16 * t164 + t7 * t189 + t347 * t514 + t74 * t55 + t58 * t91, g(1) * t520 - g(2) * t160 - t489 * t105 + t37 * t140 - t33 * t144 + t16 * t165 + t365 * t189 - t362 * t514 + t74 * t54 + t58 * t90, t114 * t13 - t26 * t369, -t113 * t13 + t114 * t346 - t26 * t82 + t27 * t369, t101 * t114 + t13 * t189 - t144 * t369 + t163 * t26, -t101 * t113 - t144 * t82 - t163 * t27 + t189 * t346, t101 * t189 + t144 * t163 (-qJD(6) * t370 - t329 * t9 + t334 * t8) * t163 + t371 * t101 + t2 * t189 + t10 * t144 + t21 * t82 - t56 * t346 + t12 * t113 + t44 * t27 - g(1) * t521 - g(2) * t152 -(qJD(6) * t371 + t329 * t8 + t334 * t9) * t163 - t370 * t101 - t1 * t189 - t11 * t144 - t21 * t369 + t56 * t13 + t12 * t114 + t44 * t26 + g(1) * t522 - g(2) * t151; 0, 0, 0, -t332 * t417, t440 * t466 (t428 * t437 + t424) * t325, -t411 * t428 + t302, t303, t250 * t304 + t466 * t507 + t342, pkin(1) * t417 + t247 * t304 + (pkin(8) * t426 + g(3)) * t465 + t375 + t413, t157 * t331 + t336 * t481 (t157 - t482) * t336 + (-t158 - t481) * t331, t543 * t433 + t331 * t246 + (-t230 * t332 - t452 * t543) * t439, -t543 * t434 + t336 * t246 + (t331 * t337 * t543 + t228 * t332) * t439, -t543 * t411, -t155 * t411 - pkin(2) * t158 - t250 * t228 - t234 * t543 + (t247 * t543 + t348) * t331 + t341 * t336, -pkin(2) * t157 + t156 * t411 - t250 * t230 - t331 * t341 + t336 * t348 + t443 * t543, t108 * t216 + t109 * t215 - t18 * t269 - t19 * t268 - t449 * t368 + t448 * t394 - t442 * t64 - t540 * t63 + t351, t19 * t216 - t18 * t215 - t115 * t314 - g(1) * (-t263 * t314 + t264 * t497) - g(2) * (-t261 * t314 + t262 * t497) + t448 * t64 + t449 * t63 - (t314 * t337 + t332 * t497) * t500 + t537 * t167, t140 * t356 + t472 * t54, t531 * t140 + t395 * t138 + (-t493 - t335 * t55 + (t138 * t330 - t140 * t335) * qJD(5)) * t269, t140 * t442 + t268 * t54 + t269 * t97 + t356 * t514, -t442 * t138 - t268 * t55 - t269 * t457 + t532 * t514, t105 * t268 + t442 * t514, t194 * t105 - t58 * t186 + t215 * t55 + t7 * t268 + t442 * t32 - t517 * t514 + t490 * t138 + ((-t216 * t514 + t269 * t58) * qJD(5) - t352 * t316) * t335 + (-t216 * t105 + t16 * t269 - t58 * t258 + (-qJD(5) * t197 - t534) * t514 + t351) * t330, -t447 * t105 + t365 * t268 + t215 * t54 + t16 * t472 - g(1) * (t263 * t468 + t264 * t335) - g(2) * (t261 * t468 + t262 * t335) - t442 * t33 - (-t316 * t456 + t332 * t335) * t500 + t516 * t514 + t490 * t140 + t356 * t58, -t13 * t192 - t369 * t487, -t13 * t191 - t192 * t346 + t369 * t486 - t487 * t82, -t101 * t192 + t13 * t268 + t163 * t487 - t369 * t442, -t101 * t191 - t163 * t486 + t268 * t346 - t442 * t82, t101 * t268 + t163 * t442 (t117 * t334 - t124 * t329) * t101 + t2 * t268 - t181 * t346 + t12 * t191 - g(1) * (-t263 * t469 + t264 * t317) - g(2) * (-t261 * t469 + t262 * t317) + t491 * t82 + t486 * t44 - (t317 * t332 + t318 * t467) * t500 + (t329 * t380 - t334 * t379) * t163 + t442 * t10 -(t117 * t329 + t124 * t334) * t101 - t1 * t268 + t181 * t13 - t12 * t192 - g(1) * (t263 * t470 + t264 * t318) - g(2) * (t261 * t470 + t262 * t318) - t491 * t369 + t487 * t44 - (-t317 * t467 + t318 * t332) * t500 + (t329 * t379 + t334 * t380) * t163 - t442 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t230 * t228, -t228 ^ 2 + t230 ^ 2, t157 + t482, -t158 + t481, t246, t156 * t543 - t217 * t230 + t345 + t511, g(1) * t210 + g(2) * t392 + g(3) * t260 + t155 * t543 + t217 * t228 + t360 (t108 * t324 - t109 * t326) * pkin(3) + (-t68 + t63) * t394 + (t64 - t67) * t368, t63 * t67 - t64 * t68 + (-t167 * t230 + t18 * t326 + t19 * t324 + t511) * pkin(3), t140 * t391 + t493 (t54 - t533) * t335 + (-t140 * t514 - t55) * t330, -t484 - t528, t366 + t485, -t514 * t368, -t67 * t138 - t95 * t514 - t32 * t368 + t312 * t55 + (t514 * t68 + t361) * t330 - t343 * t335, -t67 * t140 + t312 * t54 + t33 * t368 + t330 * t343 + t335 * t361 + t496 * t514, t13 * t273 - t369 * t446, -t13 * t272 + t273 * t346 - t369 * t445 - t446 * t82, t492 - t510, t378 + t495, -t163 * t368 (-t266 * t334 - t267 * t329) * t101 - t280 * t346 + t12 * t272 - t10 * t368 + t382 * t82 - t445 * t44 + (t329 * t373 - t334 * t374) * t163 - t357 * t318 -(-t266 * t329 + t267 * t334) * t101 + t280 * t13 + t12 * t273 + t11 * t368 - t382 * t369 + t446 * t44 + (t329 * t374 + t334 * t373) * t163 + t357 * t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t368 ^ 2 - t394 ^ 2, t368 * t63 - t394 * t64 - t342 - t506 + t512, 0, 0, 0, 0, 0, t366 - t485, -t484 + t528, 0, 0, 0, 0, 0, t378 - t495, t492 + t510; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140 * t138, -t138 ^ 2 + t140 ^ 2, t54 + t533, -t396 + (-qJD(5) + t514) * t140, t105, t33 * t514 - t58 * t140 - g(1) * t160 - g(2) * t520 - g(3) * (-t241 * t330 - t415) + t7, t32 * t514 + t58 * t138 + g(1) * t161 - g(2) * t519 - g(3) * (-t241 * t335 + t416) + t365, -t535, t527, t526, t523, t101 -(-t23 * t329 - t494) * t163 + (t101 * t334 - t140 * t82 - t163 * t430) * pkin(5) + t524 (-t163 * t24 - t4) * t329 + (t163 * t23 - t401) * t334 + (-t101 * t329 + t140 * t369 - t163 * t429) * pkin(5) + t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t535, t527, t526, t523, t101, t11 * t163 + t524, t10 * t163 - t509 + t525;];
tau_reg  = t3;
