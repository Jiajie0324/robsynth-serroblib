% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 00:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR12_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR12_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRPR12_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 00:52:51
% EndTime: 2019-05-06 00:53:06
% DurationCPUTime: 16.38s
% Computational Cost: add. (117893->419), mult. (370179->630), div. (0->0), fcn. (316998->14), ass. (0->351)
t3165 = sin(pkin(12));
t3167 = sin(pkin(6));
t3173 = sin(qJ(3));
t3177 = cos(qJ(3));
t3168 = cos(pkin(12));
t3169 = cos(pkin(7));
t3271 = t3168 * t3169;
t3166 = sin(pkin(7));
t3170 = cos(pkin(6));
t3274 = t3166 * t3170;
t3128 = (t3173 * t3274 + (t3165 * t3177 + t3173 * t3271) * t3167) * qJD(1);
t3265 = qJDD(1) * t3167;
t3257 = t3165 * t3265;
t3254 = t3169 * t3265;
t3264 = qJDD(1) * t3170;
t3300 = t3166 * t3264 + t3168 * t3254;
t3204 = t3173 * t3257 - t3177 * t3300;
t3098 = qJD(3) * t3128 + qJDD(4) + t3204;
t3270 = t3169 * t3170;
t3273 = t3167 * t3168;
t3206 = t3166 * t3273 - t3270;
t3136 = qJD(1) * t3206 - qJD(3);
t3172 = sin(qJ(4));
t3176 = cos(qJ(4));
t3113 = t3128 * t3172 + t3176 * t3136;
t3115 = t3128 * t3176 - t3136 * t3172;
t3279 = t3115 * t3113;
t3054 = t3098 + t3279;
t3275 = t3165 * t3167;
t3295 = t3167 * t3271 + t3274;
t3126 = (t3173 * t3275 - t3177 * t3295) * qJD(1);
t3125 = qJD(4) + t3126;
t3124 = t3125 ^ 2;
t3291 = t3115 ^ 2;
t3258 = -t3124 - t3291;
t3035 = t3054 * t3176 + t3172 * t3258;
t3313 = t3035 * t3173;
t3312 = t3035 * t3177;
t3033 = t3054 * t3172 - t3176 * t3258;
t3311 = t3166 * t3033;
t3310 = t3169 * t3033;
t3112 = t3113 ^ 2;
t3068 = -t3124 - t3112;
t3193 = t3098 - t3279;
t3032 = -t3068 * t3176 + t3172 * t3193;
t3309 = t3032 * t3173;
t3308 = t3032 * t3177;
t3102 = -t3126 * qJD(3) + t3173 * t3300 + t3177 * t3257;
t3200 = -qJDD(1) * t3206 + qJDD(3);
t3192 = t3176 * t3102 + t3172 * t3200;
t3269 = qJD(4) - t3125;
t3050 = t3113 * t3269 - t3192;
t3307 = t3050 * t3172;
t3306 = t3050 * t3176;
t3029 = t3068 * t3172 + t3176 * t3193;
t3305 = t3166 * t3029;
t3304 = t3169 * t3029;
t3297 = -t3112 - t3291;
t3303 = t3173 * t3297;
t3302 = t3177 * t3297;
t3174 = sin(qJ(1));
t3178 = cos(qJ(1));
t3159 = t3174 * g(1) - t3178 * g(2);
t3179 = qJD(1) ^ 2;
t3272 = t3167 * t3179;
t3202 = -qJ(2) * t3272 - t3159;
t3286 = pkin(9) * t3165;
t3207 = -pkin(2) * t3168 - t3166 * t3286;
t3251 = -t3170 * g(3) + qJDD(2);
t3161 = t3165 ^ 2;
t3163 = t3168 ^ 2;
t3296 = -t3161 - t3163;
t3184 = ((-pkin(1) + t3207) * qJDD(1) + t3202) * t3167 + (t3165 * t3170 * pkin(2) + (t3167 * t3169 * t3296 - t3168 * t3274) * pkin(9)) * t3272 + t3251;
t3262 = t3166 * t3275;
t3186 = (pkin(2) * t3273 * t3275 + (t3170 * t3295 + t3262 * t3275) * pkin(9)) * qJD(1);
t3199 = qJDD(1) * pkin(1) - t3202;
t3196 = t3170 * t3199;
t3191 = (-t3167 * g(3) + t3196) * t3168;
t3160 = -t3178 * g(1) - t3174 * g(2);
t3205 = t3179 * pkin(1) - t3160;
t3263 = pkin(2) * t3264;
t3301 = t3169 * (t3263 + t3191 + ((-pkin(9) * t3169 - qJ(2)) * t3265 + t3205) * t3165 + (-0.2e1 * qJD(2) * t3275 + t3186) * qJD(1)) + t3166 * t3184;
t3190 = -t3113 * qJD(4) + t3192;
t3280 = t3113 * t3125;
t3049 = t3190 - t3280;
t3171 = sin(qJ(6));
t3175 = cos(qJ(6));
t3198 = qJ(2) * t3265 - t3205;
t3285 = qJD(1) * qJD(2);
t3111 = -g(3) * t3275 + t3165 * t3196 + t3168 * t3198 + 0.2e1 * t3273 * t3285;
t3164 = t3170 ^ 2;
t3074 = t3295 * qJDD(1) * pkin(9) + (-t3164 * pkin(2) + (t3207 * t3273 + t3270 * t3286) * t3167) * t3179 + t3111;
t3024 = t3177 * t3074 + t3173 * t3301;
t3099 = pkin(3) * t3126 - pkin(10) * t3128;
t3288 = t3136 ^ 2;
t3010 = -pkin(3) * t3288 + pkin(10) * t3200 - t3126 * t3099 + t3024;
t3052 = -t3166 * (-g(3) * t3273 - t3165 * t3198 + t3168 * t3196 - t3254 * t3286 + t3263) + t3169 * t3184 + (0.2e1 * qJD(2) * t3262 - t3166 * t3186) * qJD(1);
t3077 = (qJD(3) - t3136) * t3128 + t3204;
t3278 = t3126 * t3136;
t3249 = -t3102 - t3278;
t3021 = pkin(3) * t3077 + pkin(10) * t3249 + t3052;
t2977 = -t3172 * t3010 + t3176 * t3021;
t3203 = -t3098 * pkin(4) - t3124 * qJ(5) + qJDD(5) - t2977;
t3185 = -t3098 * pkin(11) + t3203 + (t3190 + t3280) * pkin(5);
t3248 = t3172 * t3102 - t3176 * t3200;
t3067 = qJD(4) * t3115 + t3248;
t3245 = t3173 * t3074 - t3177 * t3301;
t3009 = -t3200 * pkin(3) - t3288 * pkin(10) + t3128 * t3099 + t3245;
t3195 = t3067 * pkin(4) - qJ(5) * t3049 + t3009;
t3189 = -t3112 * pkin(5) + t3067 * pkin(11) + t3195;
t3089 = pkin(5) * t3115 - pkin(11) * t3125;
t3253 = pkin(4) * t3125 - (2 * qJD(5));
t3246 = -t3089 + t3253;
t3076 = pkin(4) * t3113 - qJ(5) * t3115;
t3252 = pkin(11) * t3113 + t3076;
t3180 = -t3171 * t3189 + t3175 * t3185 + (-t3171 * t3246 + t3175 * t3252) * t3115;
t3086 = -t3175 * t3113 + t3125 * t3171;
t3294 = t3086 ^ 2;
t3088 = t3113 * t3171 + t3125 * t3175;
t3293 = t3088 ^ 2;
t3109 = qJD(6) + t3115;
t3292 = t3109 ^ 2;
t3290 = t3126 ^ 2;
t3289 = t3128 ^ 2;
t3287 = 2 * qJD(5);
t3281 = t3088 * t3086;
t3277 = t3128 * t3126;
t3162 = t3167 ^ 2;
t3276 = t3162 * t3179;
t3268 = qJD(4) + t3125;
t3267 = qJD(6) - t3109;
t3266 = qJD(6) + t3109;
t3260 = t3170 * t3272;
t3259 = -t3292 - t3293;
t3255 = t3168 * t3265;
t3250 = t3175 * t3067 - t3171 * t3098;
t2929 = t3175 * t3189 + t3171 * t3185 + (t3171 * t3252 + t3175 * t3246) * t3115;
t2916 = t3171 * t2929 + t3175 * t3180;
t2978 = t3176 * t3010 + t3172 * t3021;
t3197 = -t3124 * pkin(4) + t3098 * qJ(5) - t3113 * t3076 + t2978;
t2959 = -t3067 * pkin(5) - t3112 * pkin(11) + (t3287 + t3089) * t3125 + t3197;
t2909 = -t2916 * t3176 + t2959 * t3172;
t2910 = t2916 * t3172 + t2959 * t3176;
t2917 = t2929 * t3175 - t3171 * t3180;
t3243 = t2910 * t3173 - t2917 * t3177;
t2900 = -t3166 * t2909 + t3169 * t3243;
t2903 = t2910 * t3177 + t2917 * t3173;
t3244 = t2900 * t3168 + t2903 * t3165;
t2964 = t3125 * t3287 + t3197;
t2967 = t3115 * t3076 + t3203;
t2940 = t2964 * t3172 - t2967 * t3176;
t2941 = t2964 * t3176 + t2967 * t3172;
t2976 = t3115 * t3253 + t3195;
t3237 = t2941 * t3173 - t2976 * t3177;
t2919 = -t3166 * t2940 + t3169 * t3237;
t2925 = t2941 * t3177 + t2976 * t3173;
t3242 = t2919 * t3168 + t2925 * t3165;
t2952 = t2977 * t3176 + t2978 * t3172;
t2953 = -t2977 * t3172 + t2978 * t3176;
t3236 = t2953 * t3173 - t3009 * t3177;
t2923 = -t3166 * t2952 + t3169 * t3236;
t2946 = t2953 * t3177 + t3009 * t3173;
t3241 = t2923 * t3168 + t2946 * t3165;
t3018 = -t3088 * t3267 + t3250;
t3215 = -t3171 * t3067 - t3175 * t3098;
t3201 = t3086 * t3267 + t3215;
t2979 = t3171 * t3018 + t3175 * t3201;
t3039 = -t3293 - t3294;
t2965 = -t2979 * t3176 + t3039 * t3172;
t2966 = t2979 * t3172 + t3039 * t3176;
t2980 = t3018 * t3175 - t3171 * t3201;
t3235 = t2966 * t3173 - t2980 * t3177;
t2927 = -t3166 * t2965 + t3169 * t3235;
t2951 = t2966 * t3177 + t2980 * t3173;
t3240 = t2927 * t3168 + t2951 * t3165;
t3042 = -t3292 - t3294;
t3188 = -qJDD(6) - t3190;
t3187 = -t3188 - t3281;
t3000 = t3171 * t3042 + t3175 * t3187;
t3017 = t3088 * t3266 - t3250;
t2972 = -t3000 * t3176 + t3017 * t3172;
t2973 = t3000 * t3172 + t3017 * t3176;
t3001 = t3042 * t3175 - t3171 * t3187;
t3232 = t2973 * t3173 - t3001 * t3177;
t2935 = -t3166 * t2972 + t3169 * t3232;
t2956 = t2973 * t3177 + t3001 * t3173;
t3239 = t2935 * t3168 + t2956 * t3165;
t3028 = t3188 - t3281;
t3005 = t3171 * t3028 + t3175 * t3259;
t3019 = -t3086 * t3266 - t3215;
t2974 = -t3005 * t3176 + t3019 * t3172;
t2975 = t3005 * t3172 + t3019 * t3176;
t3006 = t3028 * t3175 - t3171 * t3259;
t3231 = t2975 * t3173 - t3006 * t3177;
t2937 = -t3166 * t2974 + t3169 * t3231;
t2958 = t2975 * t3177 + t3006 * t3173;
t3238 = t2937 * t3168 + t2958 * t3165;
t3044 = t3115 * t3269 + t3248;
t3011 = -t3044 * t3172 + t3306;
t3013 = -t3044 * t3176 - t3307;
t3225 = t3013 * t3173 - t3302;
t2970 = -t3166 * t3011 + t3169 * t3225;
t2998 = t3013 * t3177 + t3303;
t3234 = t2970 * t3168 + t2998 * t3165;
t3091 = t3125 * t3115;
t3046 = -t3067 + t3091;
t3012 = t3046 * t3172 + t3306;
t3014 = t3046 * t3176 - t3307;
t3224 = t3014 * t3173 - t3302;
t2971 = -t3166 * t3012 + t3169 * t3224;
t2999 = t3014 * t3177 + t3303;
t3233 = t2971 * t3168 + t2999 * t3165;
t3223 = t3024 * t3173 - t3177 * t3245;
t2982 = -t3166 * t3052 + t3169 * t3223;
t2997 = t3024 * t3177 + t3173 * t3245;
t3230 = t2982 * t3168 + t2997 * t3165;
t3043 = t3115 * t3268 + t3248;
t3221 = -t3043 * t3177 - t3309;
t2987 = t3169 * t3221 - t3305;
t3003 = t3043 * t3173 - t3308;
t3229 = t2987 * t3168 + t3003 * t3165;
t3045 = t3067 + t3091;
t3220 = t3045 * t3177 + t3309;
t2988 = t3169 * t3220 + t3305;
t3004 = -t3045 * t3173 + t3308;
t3228 = t2988 * t3168 + t3004 * t3165;
t3048 = -t3113 * t3268 + t3192;
t3219 = t3048 * t3177 + t3313;
t2991 = t3169 * t3219 - t3311;
t3007 = -t3048 * t3173 + t3312;
t3227 = t2991 * t3168 + t3007 * t3165;
t3218 = -t3049 * t3177 - t3313;
t2992 = t3169 * t3218 + t3311;
t3008 = t3049 * t3173 - t3312;
t3226 = t2992 * t3168 + t3008 * t3165;
t3085 = -t3289 - t3290;
t3078 = (-qJD(3) - t3136) * t3128 - t3204;
t3080 = -t3102 + t3278;
t3214 = t3078 * t3173 + t3080 * t3177;
t3027 = -t3166 * t3085 + t3169 * t3214;
t3051 = t3078 * t3177 - t3080 * t3173;
t3222 = t3027 * t3168 + t3051 * t3165;
t3093 = -t3288 - t3290;
t3095 = t3200 - t3277;
t3213 = t3093 * t3173 + t3095 * t3177;
t3038 = -t3166 * t3077 + t3169 * t3213;
t3058 = t3093 * t3177 - t3095 * t3173;
t3217 = t3038 * t3168 + t3058 * t3165;
t3094 = -t3200 - t3277;
t3096 = -t3288 - t3289;
t3212 = t3094 * t3173 + t3096 * t3177;
t3041 = t3166 * t3249 + t3169 * t3212;
t3061 = t3094 * t3177 - t3096 * t3173;
t3216 = t3041 * t3168 + t3061 * t3165;
t3110 = t3191 + ((-qJ(2) * qJDD(1) - 0.2e1 * t3285) * t3167 + t3205) * t3165;
t3211 = t3110 * t3168 + t3111 * t3165;
t3151 = t3168 * t3260;
t3138 = t3151 - t3257;
t3150 = t3165 * t3260;
t3139 = t3150 + t3255;
t3210 = t3138 * t3168 + t3139 * t3165;
t3149 = t3168 * t3165 * t3276;
t3141 = t3149 + t3264;
t3145 = (-t3162 * t3163 - t3164) * t3179;
t3209 = t3141 * t3168 + t3145 * t3165;
t3142 = t3149 - t3264;
t3144 = (-t3161 * t3162 - t3164) * t3179;
t3208 = t3142 * t3165 + t3144 * t3168;
t3157 = -qJDD(1) * t3174 - t3178 * t3179;
t3156 = qJDD(1) * t3178 - t3174 * t3179;
t3143 = t3296 * t3276;
t3140 = t3150 - t3255;
t3137 = t3151 + t3257;
t3129 = -t3167 * t3199 + t3251;
t3121 = t3142 * t3168 - t3144 * t3165;
t3120 = -t3141 * t3165 + t3145 * t3168;
t3117 = -t3138 * t3165 + t3139 * t3168;
t3106 = -t3167 * t3137 + t3170 * t3208;
t3105 = -t3167 * t3140 + t3170 * t3209;
t3104 = t3170 * t3137 + t3167 * t3208;
t3103 = t3170 * t3140 + t3167 * t3209;
t3101 = -t3167 * t3143 + t3170 * t3210;
t3100 = t3170 * t3143 + t3167 * t3210;
t3075 = -t3110 * t3165 + t3111 * t3168;
t3063 = -t3167 * t3129 + t3170 * t3211;
t3062 = t3170 * t3129 + t3167 * t3211;
t3040 = t3166 * t3212 - t3169 * t3249;
t3037 = t3169 * t3077 + t3166 * t3213;
t3026 = t3169 * t3085 + t3166 * t3214;
t3022 = -t3041 * t3165 + t3061 * t3168;
t3016 = -t3038 * t3165 + t3058 * t3168;
t3002 = -t3027 * t3165 + t3051 * t3168;
t2996 = -t3167 * t3040 + t3170 * t3216;
t2995 = t3170 * t3040 + t3167 * t3216;
t2994 = -t3167 * t3037 + t3170 * t3217;
t2993 = t3170 * t3037 + t3167 * t3217;
t2990 = t3166 * t3218 - t3310;
t2989 = t3166 * t3219 + t3310;
t2986 = t3166 * t3220 - t3304;
t2985 = t3166 * t3221 + t3304;
t2984 = -t3167 * t3026 + t3170 * t3222;
t2983 = t3170 * t3026 + t3167 * t3222;
t2981 = t3169 * t3052 + t3166 * t3223;
t2969 = t3169 * t3012 + t3166 * t3224;
t2968 = t3169 * t3011 + t3166 * t3225;
t2963 = -t2992 * t3165 + t3008 * t3168;
t2962 = -t2991 * t3165 + t3007 * t3168;
t2961 = -t2988 * t3165 + t3004 * t3168;
t2960 = -t2987 * t3165 + t3003 * t3168;
t2957 = -t2982 * t3165 + t2997 * t3168;
t2955 = -t2971 * t3165 + t2999 * t3168;
t2954 = -t2970 * t3165 + t2998 * t3168;
t2950 = -t3167 * t2990 + t3170 * t3226;
t2949 = -t3167 * t2989 + t3170 * t3227;
t2948 = t3170 * t2990 + t3167 * t3226;
t2947 = t3170 * t2989 + t3167 * t3227;
t2945 = -t3167 * t2986 + t3170 * t3228;
t2944 = -t3167 * t2985 + t3170 * t3229;
t2943 = t3170 * t2986 + t3167 * t3228;
t2942 = t3170 * t2985 + t3167 * t3229;
t2939 = -t3167 * t2981 + t3170 * t3230;
t2938 = t3170 * t2981 + t3167 * t3230;
t2936 = t3169 * t2974 + t3166 * t3231;
t2934 = t3169 * t2972 + t3166 * t3232;
t2933 = -t3167 * t2969 + t3170 * t3233;
t2932 = -t3167 * t2968 + t3170 * t3234;
t2931 = t3170 * t2969 + t3167 * t3233;
t2930 = t3170 * t2968 + t3167 * t3234;
t2926 = t3169 * t2965 + t3166 * t3235;
t2924 = -t2937 * t3165 + t2958 * t3168;
t2922 = t3169 * t2952 + t3166 * t3236;
t2921 = -t2935 * t3165 + t2956 * t3168;
t2920 = -t2927 * t3165 + t2951 * t3168;
t2918 = t3169 * t2940 + t3166 * t3237;
t2915 = -t2923 * t3165 + t2946 * t3168;
t2914 = -t3167 * t2936 + t3170 * t3238;
t2913 = t3170 * t2936 + t3167 * t3238;
t2912 = -t3167 * t2934 + t3170 * t3239;
t2911 = t3170 * t2934 + t3167 * t3239;
t2908 = -t3167 * t2926 + t3170 * t3240;
t2907 = t3170 * t2926 + t3167 * t3240;
t2906 = -t2919 * t3165 + t2925 * t3168;
t2905 = -t3167 * t2922 + t3170 * t3241;
t2904 = t3170 * t2922 + t3167 * t3241;
t2902 = -t3167 * t2918 + t3170 * t3242;
t2901 = t3170 * t2918 + t3167 * t3242;
t2899 = t3169 * t2909 + t3166 * t3243;
t2898 = -t2900 * t3165 + t2903 * t3168;
t2897 = -t3167 * t2899 + t3170 * t3244;
t2896 = t3170 * t2899 + t3167 * t3244;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3157, -t3156, 0, -t3159 * t3174 + t3160 * t3178, 0, 0, 0, 0, 0, 0, -t3105 * t3174 + t3120 * t3178, -t3106 * t3174 + t3121 * t3178, -t3101 * t3174 + t3117 * t3178, -t3063 * t3174 + t3075 * t3178, 0, 0, 0, 0, 0, 0, -t2994 * t3174 + t3016 * t3178, -t2996 * t3174 + t3022 * t3178, -t2984 * t3174 + t3002 * t3178, -t2939 * t3174 + t2957 * t3178, 0, 0, 0, 0, 0, 0, -t2944 * t3174 + t2960 * t3178, -t2950 * t3174 + t2963 * t3178, -t2933 * t3174 + t2955 * t3178, -t2905 * t3174 + t2915 * t3178, 0, 0, 0, 0, 0, 0, -t2932 * t3174 + t2954 * t3178, -t2945 * t3174 + t2961 * t3178, -t2949 * t3174 + t2962 * t3178, -t2902 * t3174 + t2906 * t3178, 0, 0, 0, 0, 0, 0, -t2912 * t3174 + t2921 * t3178, -t2914 * t3174 + t2924 * t3178, -t2908 * t3174 + t2920 * t3178, -t2897 * t3174 + t2898 * t3178; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3156, t3157, 0, t3159 * t3178 + t3160 * t3174, 0, 0, 0, 0, 0, 0, t3105 * t3178 + t3120 * t3174, t3106 * t3178 + t3121 * t3174, t3101 * t3178 + t3117 * t3174, t3063 * t3178 + t3075 * t3174, 0, 0, 0, 0, 0, 0, t2994 * t3178 + t3016 * t3174, t2996 * t3178 + t3022 * t3174, t2984 * t3178 + t3002 * t3174, t2939 * t3178 + t2957 * t3174, 0, 0, 0, 0, 0, 0, t2944 * t3178 + t2960 * t3174, t2950 * t3178 + t2963 * t3174, t2933 * t3178 + t2955 * t3174, t2905 * t3178 + t2915 * t3174, 0, 0, 0, 0, 0, 0, t2932 * t3178 + t2954 * t3174, t2945 * t3178 + t2961 * t3174, t2949 * t3178 + t2962 * t3174, t2902 * t3178 + t2906 * t3174, 0, 0, 0, 0, 0, 0, t2912 * t3178 + t2921 * t3174, t2914 * t3178 + t2924 * t3174, t2908 * t3178 + t2920 * t3174, t2897 * t3178 + t2898 * t3174; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3103, t3104, t3100, t3062, 0, 0, 0, 0, 0, 0, t2993, t2995, t2983, t2938, 0, 0, 0, 0, 0, 0, t2942, t2948, t2931, t2904, 0, 0, 0, 0, 0, 0, t2930, t2943, t2947, t2901, 0, 0, 0, 0, 0, 0, t2911, t2913, t2907, t2896; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3179, -qJDD(1), 0, t3160, 0, 0, 0, 0, 0, 0, t3120, t3121, t3117, t3075, 0, 0, 0, 0, 0, 0, t3016, t3022, t3002, t2957, 0, 0, 0, 0, 0, 0, t2960, t2963, t2955, t2915, 0, 0, 0, 0, 0, 0, t2954, t2961, t2962, t2906, 0, 0, 0, 0, 0, 0, t2921, t2924, t2920, t2898; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3179, 0, t3159, 0, 0, 0, 0, 0, 0, t3105, t3106, t3101, t3063, 0, 0, 0, 0, 0, 0, t2994, t2996, t2984, t2939, 0, 0, 0, 0, 0, 0, t2944, t2950, t2933, t2905, 0, 0, 0, 0, 0, 0, t2932, t2945, t2949, t2902, 0, 0, 0, 0, 0, 0, t2912, t2914, t2908, t2897; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3103, t3104, t3100, t3062, 0, 0, 0, 0, 0, 0, t2993, t2995, t2983, t2938, 0, 0, 0, 0, 0, 0, t2942, t2948, t2931, t2904, 0, 0, 0, 0, 0, 0, t2930, t2943, t2947, t2901, 0, 0, 0, 0, 0, 0, t2911, t2913, t2907, t2896; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3145, t3142, t3139, t3111, 0, 0, 0, 0, 0, 0, t3058, t3061, t3051, t2997, 0, 0, 0, 0, 0, 0, t3003, t3008, t2999, t2946, 0, 0, 0, 0, 0, 0, t2998, t3004, t3007, t2925, 0, 0, 0, 0, 0, 0, t2956, t2958, t2951, t2903; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3141, t3144, t3138, t3110, 0, 0, 0, 0, 0, 0, t3038, t3041, t3027, t2982, 0, 0, 0, 0, 0, 0, t2987, t2992, t2971, t2923, 0, 0, 0, 0, 0, 0, t2970, t2988, t2991, t2919, 0, 0, 0, 0, 0, 0, t2935, t2937, t2927, t2900; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3140, t3137, t3143, t3129, 0, 0, 0, 0, 0, 0, t3037, t3040, t3026, t2981, 0, 0, 0, 0, 0, 0, t2985, t2990, t2969, t2922, 0, 0, 0, 0, 0, 0, t2968, t2986, t2989, t2918, 0, 0, 0, 0, 0, 0, t2934, t2936, t2926, t2899; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3093, t3094, t3078, t3024, 0, 0, 0, 0, 0, 0, -t3032, -t3035, t3014, t2953, 0, 0, 0, 0, 0, 0, t3013, t3032, t3035, t2941, 0, 0, 0, 0, 0, 0, t2973, t2975, t2966, t2910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3095, t3096, t3080, -t3245, 0, 0, 0, 0, 0, 0, -t3043, -t3049, -t3297, -t3009, 0, 0, 0, 0, 0, 0, -t3297, t3045, t3048, -t2976, 0, 0, 0, 0, 0, 0, -t3001, -t3006, -t2980, -t2917; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3077, -t3249, t3085, t3052, 0, 0, 0, 0, 0, 0, t3029, -t3033, t3012, t2952, 0, 0, 0, 0, 0, 0, t3011, -t3029, t3033, t2940, 0, 0, 0, 0, 0, 0, t2972, t2974, t2965, t2909; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3068, -t3054, t3046, t2978, 0, 0, 0, 0, 0, 0, -t3044, -t3068, t3054, t2964, 0, 0, 0, 0, 0, 0, t3017, t3019, t3039, t2959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3193, t3258, t3050, t2977, 0, 0, 0, 0, 0, 0, t3050, -t3193, -t3258, -t2967, 0, 0, 0, 0, 0, 0, -t3000, -t3005, -t2979, -t2916; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3043, t3049, t3297, t3009, 0, 0, 0, 0, 0, 0, t3297, -t3045, -t3048, t2976, 0, 0, 0, 0, 0, 0, t3001, t3006, t2980, t2917; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3297, -t3045, -t3048, t2976, 0, 0, 0, 0, 0, 0, t3001, t3006, t2980, t2917; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3044, t3068, -t3054, -t2964, 0, 0, 0, 0, 0, 0, -t3017, -t3019, -t3039, -t2959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3050, t3193, t3258, t2967, 0, 0, 0, 0, 0, 0, t3000, t3005, t2979, t2916; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3042, t3028, t3018, t2929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3187, t3259, t3201, t3180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3017, t3019, t3039, t2959;];
f_new_reg  = t1;
