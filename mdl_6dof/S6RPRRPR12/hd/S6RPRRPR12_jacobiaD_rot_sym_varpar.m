% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RPRRPR12
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RPRRPR12_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d6,theta2]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 01:43
% Revision: ee6bc4d0f60ba4b3bab3f447780ef990a2753b00 (2019-10-09)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RPRRPR12_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR12_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR12_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RPRRPR12_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRPR12_jacobiaD_rot_sym_varpar: pkin has to be [12x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:25
	% EndTime: 2019-10-10 01:43:25
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:25
	% EndTime: 2019-10-10 01:43:25
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:25
	% EndTime: 2019-10-10 01:43:25
	% DurationCPUTime: 0.31s
	% Computational Cost: add. (137->30), mult. (614->95), div. (108->12), fcn. (792->9), ass. (0->49)
	t86 = sin(pkin(6));
	t79 = t86 ^ 2;
	t88 = cos(pkin(6));
	t81 = 0.1e1 / t88 ^ 2;
	t90 = cos(qJ(1));
	t84 = t90 ^ 2;
	t77 = t79 * t81 * t84 + 0.1e1;
	t89 = sin(qJ(1));
	t83 = t89 ^ 2;
	t108 = 0.1e1 / t77 ^ 2 * t83;
	t112 = t108 * t81;
	t103 = t90 * t86;
	t76 = atan2(t103, t88);
	t72 = sin(t76);
	t73 = cos(t76);
	t58 = t72 * t103 + t73 * t88;
	t55 = 0.1e1 / t58;
	t85 = sin(pkin(12));
	t105 = t89 * t85;
	t87 = cos(pkin(12));
	t99 = t88 * t105 - t87 * t90;
	t65 = 0.1e1 / t99;
	t80 = 0.1e1 / t88;
	t56 = 0.1e1 / t58 ^ 2;
	t66 = 0.1e1 / t99 ^ 2;
	t111 = t56 * t89;
	t104 = t89 * t87;
	t70 = t88 * t104 + t85 * t90;
	t110 = t66 * t70;
	t106 = t88 * t90;
	t69 = -t85 * t106 - t104;
	t109 = t69 * t70;
	t107 = t79 * t80;
	t102 = qJD(1) * t90;
	t74 = 0.1e1 / t77;
	t101 = (t74 - 0.1e1) * t86;
	t100 = -0.2e1 * t80 * t112;
	t68 = t87 * t106 - t105;
	t51 = (-t73 * t74 * t90 * t107 + t72 * t101) * t89;
	t78 = t86 * t79;
	t67 = t65 * t66;
	t64 = t70 ^ 2;
	t63 = t69 * qJD(1);
	t62 = t68 * qJD(1);
	t61 = t64 * t66 + 0.1e1;
	t57 = t55 * t56;
	t54 = t56 * t79 * t83 + 0.1e1;
	t50 = qJD(1) * t51;
	t1 = [(-t74 * t80 * t86 + t78 * t100) * t102, 0, 0, 0, 0, 0; (0.2e1 * (t51 * t111 - t55 * t90) / t54 ^ 2 * (-t50 * t57 * t83 + t102 * t111) * t79 + ((0.2e1 * t51 * t57 * t89 - t56 * t90) * t50 + (-t89 * t55 + ((-t51 + (-t78 * t112 - t101) * t89 * t72) * t90 - (t84 * t79 ^ 2 * t100 + (-t108 + (0.2e1 * t83 - t84) * t74) * t107) * t89 * t73) * t56) * qJD(1)) / t54) * t86, 0, 0, 0, 0, 0; 0.2e1 * (t66 * t109 + t65 * t68) / t61 ^ 2 * (t63 * t64 * t67 + t62 * t110) + (-t69 * t62 * t66 + (-0.2e1 * t67 * t109 - t68 * t66) * t63 + (-t99 * t110 + t70 * t65) * qJD(1)) / t61, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:26
	% EndTime: 2019-10-10 01:43:26
	% DurationCPUTime: 0.60s
	% Computational Cost: add. (994->58), mult. (3107->139), div. (132->12), fcn. (4021->13), ass. (0->80)
	t183 = sin(pkin(7));
	t184 = sin(pkin(6));
	t185 = cos(pkin(12));
	t186 = cos(pkin(7));
	t187 = cos(pkin(6));
	t173 = -t184 * t185 * t183 + t187 * t186;
	t191 = cos(qJ(1));
	t211 = t191 * t185;
	t182 = sin(pkin(12));
	t189 = sin(qJ(1));
	t214 = t189 * t182;
	t174 = -t187 * t211 + t214;
	t216 = t184 * t191;
	t204 = -t174 * t183 + t186 * t216;
	t157 = atan2(t204, t173);
	t152 = sin(t157);
	t153 = cos(t157);
	t138 = t152 * t204 + t153 * t173;
	t135 = 0.1e1 / t138;
	t188 = sin(qJ(3));
	t190 = cos(qJ(3));
	t200 = t187 * t214 - t211;
	t212 = t191 * t182;
	t213 = t189 * t185;
	t201 = t187 * t213 + t212;
	t217 = t184 * t189;
	t209 = t183 * t217;
	t202 = -t186 * t201 + t209;
	t151 = t202 * t188 - t190 * t200;
	t145 = 0.1e1 / t151;
	t230 = t204 ^ 2;
	t170 = 0.1e1 / t173;
	t136 = 0.1e1 / t138 ^ 2;
	t146 = 0.1e1 / t151 ^ 2;
	t171 = 0.1e1 / t173 ^ 2;
	t229 = -0.2e1 * t170 * t171;
	t175 = -t187 * t212 - t213;
	t167 = t175 * qJD(1);
	t166 = t174 * qJD(1);
	t210 = qJD(1) * t184;
	t206 = t191 * t210;
	t199 = t166 * t186 + t183 * t206;
	t139 = t151 * qJD(3) + t167 * t188 - t199 * t190;
	t215 = t186 * t190;
	t218 = t200 * t188;
	t150 = -t190 * t209 + t201 * t215 - t218;
	t144 = t150 ^ 2;
	t143 = t144 * t146 + 0.1e1;
	t225 = t146 * t150;
	t140 = t167 * t190 + t199 * t188 + (t202 * t190 + t218) * qJD(3);
	t226 = t140 * t145 * t146;
	t228 = (t139 * t225 - t144 * t226) / t143 ^ 2;
	t168 = t201 * qJD(1);
	t207 = t189 * t210;
	t159 = -t168 * t183 - t186 * t207;
	t156 = t230 * t171 + 0.1e1;
	t154 = 0.1e1 / t156;
	t198 = t152 + (t153 * t170 * t204 - t152) * t154;
	t130 = t198 * t159;
	t227 = t130 * t135 * t136;
	t208 = t183 * t216;
	t203 = t174 * t186 + t208;
	t149 = t175 * t190 + t203 * t188;
	t224 = t149 * t150;
	t223 = t154 * t170;
	t155 = 0.1e1 / t156 ^ 2;
	t222 = t155 * t204;
	t158 = t166 * t183 - t186 * t206;
	t221 = t158 * t136;
	t163 = -t183 * t201 - t186 * t217;
	t220 = t159 * t163;
	t219 = t175 * t188;
	t205 = t183 * t207;
	t169 = t200 * qJD(1);
	t160 = t163 ^ 2;
	t148 = -t203 * t190 + t219;
	t141 = 0.1e1 / t143;
	t134 = t160 * t136 + 0.1e1;
	t131 = t198 * t163;
	t1 = [t220 * t222 * t229 + t158 * t223, 0, 0, 0, 0, 0; 0.2e1 * (-t131 * t136 * t163 - t135 * t204) / t134 ^ 2 * (-t160 * t227 + t163 * t221) + (t159 * t135 + (-t130 * t204 + t131 * t158) * t136 + (-0.2e1 * t131 * t227 + t198 * t221 + (t152 * t171 * t222 + (0.2e1 * t223 + (t230 * t229 - t170) * t155) * t153) * t136 * t220) * t163) / t134, 0, 0, 0, 0, 0; 0.2e1 * (-t145 * t148 + t146 * t224) * t228 + ((-t168 * t215 + t169 * t188 + t190 * t205) * t145 + 0.2e1 * t224 * t226 + (-t148 * t140 - (t169 * t190 + (t168 * t186 - t205) * t188) * t150 - t149 * t139) * t146 + (t149 * t145 - (t174 * t215 + t190 * t208 - t219) * t225) * qJD(3)) * t141, 0, -0.2e1 * t228 + 0.2e1 * (t139 * t146 * t141 + (-t141 * t226 - t146 * t228) * t150) * t150, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:26
	% EndTime: 2019-10-10 01:43:28
	% DurationCPUTime: 1.93s
	% Computational Cost: add. (4837->111), mult. (15324->224), div. (448->12), fcn. (19446->15), ass. (0->108)
	t347 = sin(pkin(12));
	t352 = cos(pkin(6));
	t320 = t352 * t347;
	t350 = cos(pkin(12));
	t353 = sin(qJ(1));
	t355 = cos(qJ(1));
	t276 = t320 * t355 + t350 * t353;
	t287 = sin(qJ(3));
	t348 = sin(pkin(7));
	t349 = sin(pkin(6));
	t318 = t349 * t348;
	t311 = t355 * t318;
	t283 = t287 * t311;
	t322 = t352 * t350;
	t275 = -t322 * t355 + t347 * t353;
	t351 = cos(pkin(7));
	t326 = t275 * t351;
	t354 = cos(qJ(3));
	t362 = -t276 * t354 + t287 * t326 + t283;
	t304 = t354 * t311;
	t324 = t351 * t354;
	t361 = -t275 * t324 - t304;
	t249 = t276 * t287 - t361;
	t317 = t349 * t347;
	t319 = t351 * t349;
	t359 = t350 * t319 + t352 * t348;
	t295 = -t287 * t317 + t359 * t354;
	t246 = atan2(-t249, -t295);
	t241 = sin(t246);
	t242 = cos(t246);
	t222 = -t241 * t249 - t242 * t295;
	t220 = 0.1e1 / t222 ^ 2;
	t277 = -t353 * t320 + t355 * t350;
	t300 = t322 * t353 + t347 * t355;
	t298 = t300 * t351;
	t308 = t353 * t318;
	t303 = t354 * t308;
	t358 = -t277 * t287 - t354 * t298 + t303;
	t248 = t358 ^ 2;
	t218 = t248 * t220 + 0.1e1;
	t255 = t277 * t354 + (-t298 + t308) * t287;
	t272 = t276 * qJD(1);
	t297 = qJD(1) * t326;
	t228 = -qJD(1) * t304 + qJD(3) * t255 - t272 * t287 - t297 * t354;
	t339 = t228 * t220;
	t219 = 0.1e1 / t222;
	t247 = t249 ^ 2;
	t262 = 0.1e1 / t295 ^ 2;
	t245 = t247 * t262 + 0.1e1;
	t243 = 0.1e1 / t245;
	t261 = 0.1e1 / t295;
	t265 = t359 * t287 + t354 * t317;
	t257 = t265 * qJD(3);
	t335 = t257 * t262;
	t273 = t300 * qJD(1);
	t274 = t277 * qJD(1);
	t357 = qJD(1) * t303 + t362 * qJD(3) - t273 * t324 - t274 * t287;
	t314 = t249 * t335 - t261 * t357;
	t213 = t314 * t243;
	t316 = t241 * t295 - t242 * t249;
	t209 = t213 * t316 + t241 * t357 + t242 * t257;
	t360 = t209 * t220;
	t345 = t219 * t360;
	t331 = 0.2e1 * (-t248 * t345 - t339 * t358) / t218 ^ 2;
	t231 = t287 * (qJD(1) * t308 - qJD(3) * t276 - t273 * t351) + t274 * t354 + t361 * qJD(3);
	t309 = t353 * t319;
	t267 = t300 * t348 + t309;
	t286 = sin(qJ(4));
	t288 = cos(qJ(4));
	t240 = t255 * t288 + t267 * t286;
	t234 = 0.1e1 / t240;
	t235 = 0.1e1 / t240 ^ 2;
	t356 = -0.2e1 * t358;
	t229 = qJD(1) * t283 + t358 * qJD(3) - t272 * t354 + t287 * t297;
	t266 = -t275 * t348 + t319 * t355;
	t258 = t266 * qJD(1);
	t223 = qJD(4) * t240 + t229 * t286 - t258 * t288;
	t239 = t255 * t286 - t267 * t288;
	t233 = t239 ^ 2;
	t227 = t233 * t235 + 0.1e1;
	t338 = t235 * t239;
	t332 = qJD(4) * t239;
	t224 = t229 * t288 + t258 * t286 - t332;
	t340 = t224 * t234 * t235;
	t344 = (t223 * t338 - t233 * t340) / t227 ^ 2;
	t334 = t261 * t335;
	t342 = (-t249 * t262 * t357 + t247 * t334) / t245 ^ 2;
	t341 = t220 * t358;
	t337 = t249 * t261;
	t336 = t249 * t265;
	t330 = -0.2e1 * t344;
	t329 = -0.2e1 * t342;
	t328 = t261 * t342;
	t327 = t239 * t340;
	t325 = t345 * t356;
	t238 = t266 * t286 + t288 * t362;
	t237 = -t266 * t288 + t286 * t362;
	t313 = -t286 * t234 + t288 * t338;
	t312 = -t261 * t362 + t262 * t336;
	t306 = -t241 + (-t242 * t337 + t241) * t243;
	t259 = -qJD(1) * t309 - t273 * t348;
	t256 = t295 * qJD(3);
	t225 = 0.1e1 / t227;
	t216 = 0.1e1 / t218;
	t214 = t312 * t243;
	t210 = t214 * t316 + t241 * t362 + t242 * t265;
	t208 = t312 * t329 + (0.2e1 * t334 * t336 + t231 * t261 + (t249 * t256 - t257 * t362 - t265 * t357) * t262) * t243;
	t1 = [-t328 * t356 + (t228 * t261 - t335 * t358) * t243, 0, t208, 0, 0, 0; t249 * t219 * t331 + (t357 * t219 + t249 * t360 + (t306 * t228 - ((t213 * t243 * t337 + t329) * t241 + (0.2e1 * t249 * t328 - t213 + (t213 - t314) * t243) * t242) * t358) * t341) * t216 - (-t341 * t331 + (-t339 + t325) * t216) * t306 * t358, 0, (-t210 * t341 - t219 * t255) * t331 + (t210 * t325 + t229 * t219 + (-t255 * t209 - t210 * t228 - (-(-t208 * t249 + t214 * t357 + t256 + (t214 * t295 + t362) * t213) * t242 - (t208 * t295 - t214 * t257 - t231 + (t214 * t249 - t265) * t213) * t241) * t358) * t220) * t216, 0, 0, 0; 0.2e1 * (-t234 * t237 + t238 * t338) * t344 + ((qJD(4) * t238 - t231 * t286 - t259 * t288) * t234 + 0.2e1 * t238 * t327 + (-t237 * t224 - (-qJD(4) * t237 - t231 * t288 + t259 * t286) * t239 - t238 * t223) * t235) * t225, 0, -t313 * t358 * t330 + (t313 * t228 - ((-qJD(4) * t234 - 0.2e1 * t327) * t288 + (t223 * t288 + (t224 - t332) * t286) * t235) * t358) * t225, t330 + 0.2e1 * (t223 * t235 * t225 + (-t225 * t340 - t235 * t344) * t239) * t239, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:26
	% EndTime: 2019-10-10 01:43:30
	% DurationCPUTime: 4.29s
	% Computational Cost: add. (11423->140), mult. (34278->290), div. (691->12), fcn. (44248->15), ass. (0->136)
	t317 = cos(pkin(6));
	t401 = sin(pkin(12));
	t404 = cos(qJ(1));
	t358 = t404 * t401;
	t315 = cos(pkin(12));
	t403 = sin(qJ(1));
	t366 = t403 * t315;
	t338 = t317 * t366 + t358;
	t303 = t338 * qJD(1);
	t313 = t403 * t401;
	t367 = t404 * t315;
	t307 = -t317 * t313 + t367;
	t304 = t307 * qJD(1);
	t316 = cos(pkin(7));
	t319 = sin(qJ(3));
	t321 = cos(qJ(3));
	t314 = sin(pkin(6));
	t402 = sin(pkin(7));
	t365 = t314 * t402;
	t355 = t403 * t365;
	t347 = qJD(1) * t355;
	t356 = t404 * t365;
	t353 = -t317 * t367 + t313;
	t411 = t353 * t316;
	t331 = t411 + t356;
	t339 = -t317 * t358 - t366;
	t407 = -t339 * t319 + t331 * t321;
	t263 = t407 * qJD(3) - (-t303 * t316 + t347) * t319 - t304 * t321;
	t381 = t339 * t321;
	t287 = t331 * t319 + t381;
	t318 = sin(qJ(4));
	t320 = cos(qJ(4));
	t380 = t314 * t316;
	t332 = t353 * t402 - t404 * t380;
	t272 = t287 * t318 + t332 * t320;
	t360 = t403 * t380;
	t341 = qJD(1) * t360 + t303 * t402;
	t249 = t272 * qJD(4) - t263 * t320 + t341 * t318;
	t273 = t287 * t320 - t332 * t318;
	t419 = t273 * qJD(4) + t263 * t318 + t341 * t320;
	t416 = -t338 * t316 + t355;
	t378 = qJD(3) * t319;
	t379 = t316 * t321;
	t261 = (t319 * t411 + t381) * qJD(3) - t303 * t379 - t304 * t319 + t321 * t347 + t356 * t378;
	t364 = t402 * t317;
	t298 = (t315 * t316 * t319 + t401 * t321) * t314 + t319 * t364;
	t305 = -t315 * t365 + t317 * t316;
	t280 = t298 * t320 + t305 * t318;
	t297 = t321 * t364 + (t315 * t379 - t401 * t319) * t314;
	t292 = t297 * qJD(3);
	t264 = t280 * qJD(4) + t292 * t318;
	t279 = t298 * t318 - t305 * t320;
	t277 = 0.1e1 / t279 ^ 2;
	t413 = t264 * t277;
	t276 = 0.1e1 / t279;
	t388 = t272 * t277;
	t350 = t276 * t407 - t297 * t388;
	t412 = t318 * t350;
	t410 = t331 * qJD(1);
	t409 = t416 * t321;
	t255 = atan2(t272, t279);
	t250 = sin(t255);
	t251 = cos(t255);
	t245 = t250 * t272 + t251 * t279;
	t242 = 0.1e1 / t245;
	t288 = t307 * t319 - t409;
	t281 = 0.1e1 / t288;
	t243 = 0.1e1 / t245 ^ 2;
	t282 = 0.1e1 / t288 ^ 2;
	t406 = 0.2e1 * t272;
	t289 = t307 * t321 + t416 * t319;
	t330 = t338 * t402 + t360;
	t329 = t330 * t320;
	t274 = t289 * t318 - t329;
	t405 = 0.2e1 * t274;
	t267 = t274 ^ 2;
	t241 = t267 * t243 + 0.1e1;
	t302 = t339 * qJD(1);
	t260 = t409 * qJD(3) + t302 * t321 - t307 * t378 + t410 * t319;
	t275 = t289 * t320 + t330 * t318;
	t328 = t332 * qJD(1);
	t246 = t275 * qJD(4) + t260 * t318 + t320 * t328;
	t395 = t246 * t243;
	t266 = t272 ^ 2;
	t254 = t266 * t277 + 0.1e1;
	t252 = 0.1e1 / t254;
	t352 = -t264 * t388 + t276 * t419;
	t234 = t352 * t252;
	t357 = -t250 * t279 + t251 * t272;
	t230 = t357 * t234 + t250 * t419 + t251 * t264;
	t244 = t242 * t243;
	t399 = t230 * t244;
	t400 = (-t267 * t399 + t274 * t395) / t241 ^ 2;
	t377 = qJD(4) * t318;
	t247 = qJD(4) * t329 + t260 * t320 - t289 * t377 - t318 * t328;
	t268 = t275 ^ 2;
	t258 = t268 * t282 + 0.1e1;
	t387 = t275 * t282;
	t259 = t289 * qJD(3) + t302 * t319 - t410 * t321;
	t283 = t281 * t282;
	t391 = t259 * t283;
	t398 = (t247 * t387 - t268 * t391) / t258 ^ 2;
	t390 = t276 * t413;
	t397 = (-t266 * t390 + t388 * t419) / t254 ^ 2;
	t396 = t243 * t274;
	t394 = t250 * t274;
	t393 = t251 * t274;
	t392 = t259 * t282;
	t389 = t272 * t276;
	t386 = t275 * t289;
	t385 = t281 * t288;
	t384 = t288 * t318;
	t376 = qJD(4) * t320;
	t375 = 0.2e1 * t400;
	t374 = -0.2e1 * t397;
	t373 = t244 * t405;
	t372 = -0.2e1 * t275 * t407;
	t371 = t281 * t398;
	t370 = t276 * t397;
	t369 = t243 * t394;
	t368 = t243 * t393;
	t363 = t390 * t406;
	t351 = t273 * t276 - t280 * t388;
	t343 = -t250 + (-t251 * t389 + t250) * t252;
	t293 = t298 * qJD(3);
	t265 = -t279 * qJD(4) + t292 * t320;
	t256 = 0.1e1 / t258;
	t239 = 0.1e1 / t241;
	t238 = t252 * t412;
	t236 = t351 * t252;
	t233 = t343 * t274;
	t232 = (t250 * t407 + t251 * t297) * t318 + t357 * t238;
	t231 = t357 * t236 + t250 * t273 + t251 * t280;
	t228 = t351 * t374 + (t280 * t363 - t249 * t276 + (-t264 * t273 - t265 * t272 - t280 * t419) * t277) * t252;
	t227 = t374 * t412 + (t350 * t376 + (t297 * t363 - t261 * t276 + (-t264 * t407 + t272 * t293 - t297 * t419) * t277) * t318) * t252;
	t1 = [t370 * t405 + (-t246 * t276 + t274 * t413) * t252, 0, t227, t228, 0, 0; -0.2e1 * t272 * t242 * t400 + (t419 * t242 + (-t272 * t230 - t233 * t246) * t243) * t239 + (t233 * t243 * t375 + (0.2e1 * t233 * t399 - (t234 * t252 * t389 + t374) * t369 - (t370 * t406 - t234 + (t234 - t352) * t252) * t368 - t343 * t395) * t239) * t274, 0, (t232 * t396 + t242 * t384) * t375 + (-t232 * t395 + (-t259 * t318 - t288 * t376) * t242 + (t232 * t373 + t243 * t384) * t230 - (t297 * t376 + t227 * t272 + t238 * t419 - t293 * t318 + (-t238 * t279 + t318 * t407) * t234) * t368 - (t407 * t376 - t227 * t279 - t238 * t264 - t261 * t318 + (-t238 * t272 - t297 * t318) * t234) * t369) * t239, (t231 * t396 - t242 * t275) * t375 + (t231 * t230 * t373 + t247 * t242 + (-t275 * t230 - t231 * t246 - (t228 * t272 + t236 * t419 + t265 + (-t236 * t279 + t273) * t234) * t393 - (-t228 * t279 - t236 * t264 - t249 + (-t236 * t272 - t280) * t234) * t394) * t243) * t239, 0, 0; t282 * t372 * t398 - 0.2e1 * t273 * t371 + (t407 * t247 * t282 - t249 * t281 - t261 * t387 - t273 * t392 + t372 * t391) * t256, 0, 0.2e1 * (t282 * t386 + t320 * t385) * t398 + (t377 * t385 + (-t247 * t289 - t260 * t275) * t282 + (0.2e1 * t283 * t386 + (t282 * t288 - t281) * t320) * t259) * t256, t371 * t405 + (-t246 * t281 + t274 * t392) * t256, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 01:43:27
	% EndTime: 2019-10-10 01:43:31
	% DurationCPUTime: 4.60s
	% Computational Cost: add. (13786->169), mult. (41237->336), div. (726->12), fcn. (53008->17), ass. (0->149)
	t402 = sin(pkin(12));
	t407 = cos(pkin(6));
	t415 = cos(qJ(1));
	t405 = cos(pkin(12));
	t411 = sin(qJ(1));
	t463 = t411 * t405;
	t432 = t402 * t415 + t407 * t463;
	t390 = t432 * qJD(1);
	t473 = t402 * t411;
	t395 = t405 * t415 - t407 * t473;
	t391 = t395 * qJD(1);
	t403 = sin(pkin(7));
	t406 = cos(pkin(7));
	t410 = sin(qJ(3));
	t414 = cos(qJ(3));
	t404 = sin(pkin(6));
	t470 = t404 * t411;
	t447 = qJD(1) * t470;
	t465 = t407 * t415;
	t394 = t402 * t465 + t463;
	t433 = t405 * t465 - t473;
	t430 = t433 * t406;
	t469 = t404 * t415;
	t452 = t403 * t469;
	t435 = -t430 + t452;
	t496 = t394 * t410 + t435 * t414;
	t348 = qJD(3) * t496 - (-t390 * t406 + t403 * t447) * t410 - t391 * t414;
	t475 = t394 * t414;
	t506 = t435 * t410;
	t372 = -t475 + t506;
	t384 = t433 * t403 + t406 * t469;
	t409 = sin(qJ(4));
	t413 = cos(qJ(4));
	t360 = t372 * t413 + t384 * t409;
	t379 = t390 * t403 + t406 * t447;
	t328 = t360 * qJD(4) + t348 * t409 + t379 * t413;
	t423 = t372 * t409;
	t359 = -t384 * t413 + t423;
	t498 = -t403 * t470 + t432 * t406;
	t373 = t395 * t410 + t414 * t498;
	t505 = t379 * t409;
	t374 = t395 * t414 - t410 * t498;
	t386 = t432 * t403 + t406 * t470;
	t361 = t374 * t409 - t386 * t413;
	t408 = sin(qJ(6));
	t412 = cos(qJ(6));
	t440 = t361 * t412 - t373 * t408;
	t501 = t440 * qJD(6);
	t467 = t406 * t410;
	t471 = t403 * t407;
	t383 = (t402 * t414 + t405 * t467) * t404 + t410 * t471;
	t472 = t403 * t404;
	t392 = -t405 * t472 + t406 * t407;
	t368 = -t383 * t409 + t392 * t413;
	t466 = t406 * t414;
	t382 = t414 * t471 + (-t402 * t410 + t405 * t466) * t404;
	t375 = t382 * qJD(3);
	t352 = t368 * qJD(4) + t375 * t413;
	t369 = t383 * t413 + t392 * t409;
	t366 = 0.1e1 / t369 ^ 2;
	t500 = t352 * t366;
	t365 = 0.1e1 / t369;
	t481 = t360 * t366;
	t436 = t365 * t496 - t382 * t481;
	t499 = t413 * t436;
	t342 = atan2(t360, t369);
	t337 = sin(t342);
	t338 = cos(t342);
	t320 = t337 * t360 + t338 * t369;
	t317 = 0.1e1 / t320;
	t479 = t373 * t412;
	t336 = t361 * t408 + t479;
	t330 = 0.1e1 / t336;
	t318 = 0.1e1 / t320 ^ 2;
	t331 = 0.1e1 / t336 ^ 2;
	t495 = 0.2e1 * t360;
	t362 = t374 * t413 + t386 * t409;
	t494 = 0.2e1 * t362;
	t355 = t362 ^ 2;
	t314 = t318 * t355 + 0.1e1;
	t389 = t394 * qJD(1);
	t344 = qJD(1) * t506 - t373 * qJD(3) - t389 * t414;
	t377 = t384 * qJD(1);
	t460 = qJD(4) * t409;
	t325 = t377 * t409 - t374 * t460 + (qJD(4) * t386 + t344) * t413;
	t487 = t325 * t318;
	t354 = t360 ^ 2;
	t341 = t354 * t366 + 0.1e1;
	t339 = 0.1e1 / t341;
	t327 = t505 + qJD(4) * t423 + (-qJD(4) * t384 - t348) * t413;
	t439 = -t327 * t365 - t352 * t481;
	t308 = t439 * t339;
	t442 = -t337 * t369 + t338 * t360;
	t303 = t442 * t308 - t337 * t327 + t338 * t352;
	t319 = t317 * t318;
	t492 = t303 * t319;
	t493 = (-t355 * t492 + t362 * t487) / t314 ^ 2;
	t324 = t362 * qJD(4) + t344 * t409 - t377 * t413;
	t461 = qJD(1) * t414;
	t444 = t461 * t472;
	t343 = t374 * qJD(3) - t389 * t410 - t415 * t444 + t430 * t461;
	t315 = t336 * qJD(6) - t324 * t412 + t343 * t408;
	t329 = t440 ^ 2;
	t323 = t329 * t331 + 0.1e1;
	t486 = t331 * t440;
	t316 = t324 * t408 + t343 * t412 + t501;
	t489 = t316 * t330 * t331;
	t491 = (-t315 * t486 - t329 * t489) / t323 ^ 2;
	t483 = t365 * t500;
	t490 = (-t327 * t481 - t354 * t483) / t341 ^ 2;
	t488 = t318 * t362;
	t485 = t337 * t362;
	t484 = t338 * t362;
	t482 = t360 * t365;
	t480 = t373 * t409;
	t478 = t373 * t413;
	t464 = t408 * t440;
	t462 = t412 * t330;
	t459 = 0.2e1 * t493;
	t458 = 0.2e1 * t491;
	t457 = -0.2e1 * t490;
	t456 = t319 * t494;
	t455 = t365 * t490;
	t454 = t318 * t485;
	t453 = t318 * t484;
	t446 = -0.2e1 * t440 * t489;
	t445 = t483 * t495;
	t443 = -qJD(6) * t480 + t344;
	t441 = t359 * t412 + t408 * t496;
	t334 = t359 * t408 - t412 * t496;
	t438 = -t331 * t464 + t462;
	t437 = -t359 * t365 - t368 * t481;
	t428 = -t337 + (-t338 * t482 + t337) * t339;
	t427 = qJD(4) * t478 + qJD(6) * t374 + t343 * t409;
	t422 = -t390 * t466 - t391 * t410 + t411 * t444 + (t410 * t452 - t433 * t467 - t475) * qJD(3);
	t376 = t383 * qJD(3);
	t351 = -t369 * qJD(4) - t375 * t409;
	t350 = t374 * t412 - t408 * t480;
	t349 = t374 * t408 + t409 * t479;
	t321 = 0.1e1 / t323;
	t312 = 0.1e1 / t314;
	t311 = t339 * t499;
	t309 = t437 * t339;
	t307 = t428 * t362;
	t305 = (t337 * t496 + t338 * t382) * t413 + t442 * t311;
	t304 = t442 * t309 - t337 * t359 + t338 * t368;
	t301 = t437 * t457 + (t368 * t445 - t328 * t365 + (t327 * t368 - t351 * t360 + t352 * t359) * t366) * t339;
	t300 = t457 * t499 + (-t436 * t460 + (t382 * t445 - t422 * t365 + (t327 * t382 - t352 * t496 + t360 * t376) * t366) * t413) * t339;
	t1 = [t455 * t494 + (-t325 * t365 + t362 * t500) * t339, 0, t300, t301, 0, 0; -0.2e1 * t360 * t317 * t493 + ((-t359 * qJD(4) + t348 * t413 - t505) * t317 + (-t303 * t360 - t307 * t325) * t318) * t312 + (t307 * t318 * t459 + (0.2e1 * t307 * t492 - (t308 * t339 * t482 + t457) * t454 - (t455 * t495 - t308 + (t308 - t439) * t339) * t453 - t428 * t487) * t312) * t362, 0, (t305 * t488 + t317 * t478) * t459 + (-t305 * t487 + (-t343 * t413 + t373 * t460) * t317 + (t305 * t456 + t318 * t478) * t303 - (-t382 * t460 + t300 * t360 - t311 * t327 - t376 * t413 + (-t311 * t369 + t413 * t496) * t308) * t453 - (-t496 * t460 - t300 * t369 - t311 * t352 - t422 * t413 + (-t311 * t360 - t382 * t413) * t308) * t454) * t312, (t304 * t488 + t317 * t361) * t459 + (t304 * t303 * t456 - t324 * t317 + (t361 * t303 - t304 * t325 - (t301 * t360 - t309 * t327 + t351 + (-t309 * t369 - t359) * t308) * t484 - (-t301 * t369 - t309 * t352 - t328 + (-t309 * t360 - t368) * t308) * t485) * t318) * t312, 0, 0; (t330 * t441 - t334 * t486) * t458 + ((t334 * qJD(6) - t328 * t412 + t408 * t422) * t330 + t334 * t446 + (t441 * t316 + (t441 * qJD(6) + t328 * t408 + t412 * t422) * t440 - t334 * t315) * t331) * t321, 0, (-t330 * t349 - t350 * t486) * t458 + (t350 * t446 + t443 * t330 * t408 + t427 * t462 + (t412 * t440 * t443 - t350 * t315 - t349 * t316 - t427 * t464) * t331) * t321, t438 * t362 * t458 + (-t438 * t325 + ((qJD(6) * t330 + t446) * t408 + (-t315 * t408 + (t316 + t501) * t412) * t331) * t362) * t321, 0, -0.2e1 * t491 - 0.2e1 * (t315 * t331 * t321 - (-t321 * t489 - t331 * t491) * t440) * t440;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end