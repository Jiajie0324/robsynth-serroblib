% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR2_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR2_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR2_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR2_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:35:48
% EndTime: 2019-03-10 03:35:56
% DurationCPUTime: 2.92s
% Computational Cost: add. (6665->288), mult. (14854->453), div. (0->0), fcn. (15169->10), ass. (0->203)
t140 = sin(qJ(4));
t141 = sin(qJ(3));
t237 = cos(qJ(4));
t186 = qJD(4) * t237;
t188 = t237 * t141;
t238 = cos(qJ(3));
t247 = (qJD(3) * (t238 * t140 + t188) + t141 * t186) * pkin(2);
t139 = sin(qJ(5));
t143 = cos(qJ(6));
t138 = sin(qJ(6));
t144 = cos(qJ(5));
t211 = t138 * t144;
t107 = t143 * t139 + t211;
t142 = sin(qJ(2));
t145 = cos(qJ(2));
t108 = t141 * t145 + t238 * t142;
t157 = t141 * t142 - t238 * t145;
t84 = t237 * t108 - t140 * t157;
t53 = t107 * t84;
t134 = qJD(5) * t144;
t193 = t84 * t134;
t245 = -qJD(2) - qJD(3);
t147 = t245 * t108;
t151 = t237 * t157;
t204 = qJD(4) * t140;
t87 = t245 * t157;
t36 = -qJD(4) * t151 - t108 * t204 + t140 * t147 + t237 * t87;
t218 = t139 * t36;
t246 = t193 + t218;
t137 = t144 ^ 2;
t208 = t139 ^ 2 - t137;
t179 = t208 * qJD(5);
t244 = qJD(5) + qJD(6);
t242 = pkin(7) + pkin(8);
t241 = -pkin(10) - pkin(11);
t37 = t84 * qJD(4) + t140 * t87 - t237 * t147;
t240 = t37 * pkin(5);
t83 = t140 * t108 + t151;
t239 = t83 * pkin(5);
t236 = pkin(5) * t143;
t119 = t242 * t142;
t121 = t242 * t145;
t190 = qJD(2) * t242;
t109 = t142 * t190;
t110 = t145 * t190;
t156 = t238 * t109 + t141 * t110;
t185 = t238 * qJD(3);
t205 = qJD(3) * t141;
t146 = t147 * pkin(9) - t119 * t185 - t121 * t205 - t156;
t154 = t141 * t119 - t238 * t121;
t60 = t154 * qJD(3) + t141 * t109 - t238 * t110;
t148 = -t87 * pkin(9) + t60;
t155 = t238 * t119 + t141 * t121;
t73 = -t108 * pkin(9) - t155;
t74 = -pkin(9) * t157 - t154;
t17 = -t140 * t148 - t237 * t146 - t73 * t186 + t74 * t204;
t203 = qJD(5) * t139;
t207 = qJD(2) * t142;
t133 = pkin(2) * t207;
t76 = -pkin(3) * t147 + t133;
t23 = t37 * pkin(4) - t36 * pkin(10) + t76;
t131 = -t145 * pkin(2) - pkin(1);
t97 = pkin(3) * t157 + t131;
t50 = t83 * pkin(4) - t84 * pkin(10) + t97;
t52 = t140 * t73 + t237 * t74;
t7 = -t50 * t134 - t139 * t23 + t144 * t17 + t52 * t203;
t6 = -pkin(11) * t246 - t7;
t235 = t143 * t6;
t234 = t144 * pkin(5);
t233 = t84 * t36;
t129 = t238 * pkin(2) + pkin(3);
t101 = pkin(2) * t188 + t140 * t129 + pkin(10);
t232 = -pkin(11) - t101;
t127 = t140 * pkin(3) + pkin(10);
t231 = -pkin(11) - t127;
t106 = t138 * t139 - t143 * t144;
t18 = t140 * t146 - t237 * t148 + t74 * t186 + t73 * t204;
t12 = t246 * pkin(5) + t18;
t216 = t139 * t84;
t51 = t140 * t74 - t237 * t73;
t35 = pkin(5) * t216 + t51;
t86 = t244 * t107;
t230 = t12 * t106 + t35 * t86;
t85 = t244 * t106;
t229 = t12 * t107 - t35 * t85;
t45 = t51 * t134;
t228 = t18 * t139 + t45;
t48 = t144 * t52;
t227 = t139 * t50 + t48;
t132 = pkin(5) * t203;
t80 = t129 * t204 + t247;
t68 = t132 + t80;
t125 = t140 * t141 * pkin(2);
t100 = -t237 * t129 - pkin(4) + t125;
t96 = t100 - t234;
t226 = t68 * t106 + t96 * t86;
t225 = t68 * t107 - t96 * t85;
t224 = t100 * t134 + t80 * t139;
t197 = pkin(3) * t204;
t113 = t132 + t197;
t128 = -t237 * pkin(3) - pkin(4);
t117 = t128 - t234;
t223 = t113 * t106 + t117 * t86;
t222 = t113 * t107 - t117 * t85;
t130 = -pkin(4) - t234;
t221 = t106 * t132 + t130 * t86;
t220 = t107 * t132 - t130 * t85;
t24 = -pkin(11) * t216 + t227;
t219 = t138 * t24;
t178 = pkin(2) * t185;
t79 = -t129 * t186 - t237 * t178 + (qJD(3) + qJD(4)) * t125;
t217 = t139 * t79;
t215 = t143 * t24;
t214 = t144 * t36;
t213 = t144 * t79;
t212 = t144 * t84;
t210 = t139 * t144;
t209 = t128 * t134 + t139 * t197;
t206 = qJD(2) * t145;
t202 = qJD(6) * t138;
t201 = -0.2e1 * pkin(1) * qJD(2);
t200 = pkin(4) * t203;
t199 = pkin(4) * t134;
t198 = pkin(2) * t205;
t196 = pkin(5) * t202;
t195 = qJD(6) * t236;
t194 = t84 * t203;
t44 = t51 * t203;
t47 = t144 * t50;
t19 = -pkin(11) * t212 - t139 * t52 + t239 + t47;
t192 = -t19 - t239;
t184 = t139 * t17 + t144 * t23;
t5 = -pkin(11) * t214 + t240 + (-t48 + (pkin(11) * t84 - t50) * t139) * qJD(5) + t184;
t191 = -t138 * t6 + t143 * t5;
t189 = qJD(5) * t241;
t187 = t139 * t134;
t94 = t100 * t203;
t183 = -t80 * t144 + t94;
t182 = qJD(5) * t232;
t181 = qJD(5) * t231;
t180 = -0.4e1 * t84 * t210;
t177 = pkin(3) * t186;
t175 = t18 * t84 + t51 * t36;
t174 = t36 * t83 + t84 * t37;
t173 = t100 * t84 - t101 * t83;
t172 = t127 * t83 - t128 * t84;
t171 = -t143 * t19 + t219;
t170 = t138 * t19 + t215;
t88 = t232 * t139;
t135 = t144 * pkin(11);
t89 = t144 * t101 + t135;
t169 = t138 * t89 - t143 * t88;
t168 = t138 * t88 + t143 * t89;
t167 = t139 * t177;
t166 = t144 * t177;
t103 = t231 * t139;
t104 = t144 * t127 + t135;
t165 = t143 * t103 - t138 * t104;
t164 = t138 * t103 + t143 * t104;
t118 = t241 * t139;
t120 = t144 * pkin(10) + t135;
t163 = t143 * t118 - t138 * t120;
t162 = t138 * t118 + t143 * t120;
t114 = t128 * t203;
t161 = -t144 * t197 + t114;
t159 = t194 - t214;
t158 = -t144 * t37 + t83 * t203;
t152 = t131 * t108;
t150 = t100 * t36 - t101 * t37 + t79 * t83 + t80 * t84;
t149 = -t127 * t37 + t128 * t36 + (t140 * t84 - t237 * t83) * qJD(4) * pkin(3);
t124 = 0.2e1 * t187;
t112 = t144 * t189;
t111 = t139 * t189;
t105 = -0.2e1 * t179;
t93 = t144 * t181 - t167;
t92 = t139 * t181 + t166;
t82 = t84 ^ 2;
t66 = -0.2e1 * t107 * t85;
t59 = qJD(3) * t155 + t156;
t58 = -qJD(6) * t162 - t138 * t111 + t143 * t112;
t57 = -qJD(6) * t163 - t143 * t111 - t138 * t112;
t56 = t144 * t182 + t217;
t55 = t139 * t182 - t213;
t54 = t106 * t84;
t49 = 0.2e1 * t85 * t106 - 0.2e1 * t107 * t86;
t39 = -qJD(6) * t164 - t138 * t92 + t143 * t93;
t38 = -qJD(6) * t165 - t138 * t93 - t143 * t92;
t34 = 0.2e1 * t83 * t37;
t33 = t83 * t134 + t139 * t37;
t29 = -t106 * t37 - t86 * t83;
t28 = t107 * t37 - t85 * t83;
t27 = -t179 * t84 + t36 * t210;
t26 = -qJD(6) * t168 - t138 * t55 + t143 * t56;
t25 = qJD(6) * t169 - t138 * t56 - t143 * t55;
t20 = qJD(5) * t180 - t208 * t36;
t14 = t36 * t211 - t138 * t194 - t202 * t216 + (t244 * t212 + t218) * t143;
t13 = -t106 * t36 - t244 * t53;
t9 = t13 * t107 + t54 * t85;
t8 = -t227 * qJD(5) + t184;
t3 = -t13 * t106 - t107 * t14 + t85 * t53 + t54 * t86;
t2 = -qJD(6) * t170 + t191;
t1 = qJD(6) * t171 - t138 * t5 - t235;
t4 = [0, 0, 0, 0.2e1 * t142 * t206, 0.2e1 * (-t142 ^ 2 + t145 ^ 2) * qJD(2), 0, 0, 0, t142 * t201, t145 * t201, 0.2e1 * t108 * t87, 0.2e1 * t108 * t147 - 0.2e1 * t157 * t87, 0, 0, 0, 0.2e1 * qJD(3) * t152 + 0.2e1 * (pkin(2) * t142 * t157 + t152) * qJD(2), 0.2e1 * t108 * t133 + 0.2e1 * t131 * t87, 0.2e1 * t233, -0.2e1 * t174, 0, 0, 0, 0.2e1 * t97 * t37 + 0.2e1 * t76 * t83, 0.2e1 * t97 * t36 + 0.2e1 * t76 * t84, 0.2e1 * t137 * t233 - 0.2e1 * t82 * t187, 0.2e1 * t82 * t179 + t36 * t180, 0.2e1 * t144 * t174 - 0.2e1 * t83 * t194, -0.2e1 * t139 * t174 - 0.2e1 * t83 * t193, t34, 0.2e1 * t84 * t45 + 0.2e1 * t47 * t37 + 0.2e1 * t8 * t83 + 0.2e1 * (-t52 * t37 + t175) * t139, 0.2e1 * t175 * t144 - 0.2e1 * t227 * t37 - 0.2e1 * t84 * t44 + 0.2e1 * t7 * t83, -0.2e1 * t54 * t13, -0.2e1 * t13 * t53 + 0.2e1 * t54 * t14, 0.2e1 * t13 * t83 - 0.2e1 * t54 * t37, -0.2e1 * t14 * t83 - 0.2e1 * t53 * t37, t34, 0.2e1 * t12 * t53 + 0.2e1 * t35 * t14 - 0.2e1 * t171 * t37 + 0.2e1 * t2 * t83, 0.2e1 * t1 * t83 - 0.2e1 * t12 * t54 + 0.2e1 * t35 * t13 - 0.2e1 * t170 * t37; 0, 0, 0, 0, 0, t206, -t207, 0, -pkin(7) * t206, pkin(7) * t207, 0, 0, t87, t147, 0, t60, t59, 0, 0, t36, -t37, 0, -t18, t17, t27, t20, t33, -t158, 0, t44 + (t173 * qJD(5) - t18) * t144 + t150 * t139, t144 * t150 - t173 * t203 + t228, t9, t3, t28, t29, 0, t96 * t14 - t169 * t37 + t26 * t83 + t68 * t53 + t230, t96 * t13 - t168 * t37 + t25 * t83 - t68 * t54 + t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t198, -0.2e1 * t178, 0, 0, 0, 0, 0, -0.2e1 * t80, 0.2e1 * t79, t124, t105, 0, 0, 0, 0.2e1 * t183, 0.2e1 * t224, t66, t49, 0, 0, 0, 0.2e1 * t226, 0.2e1 * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, t147, 0, t60, t59, 0, 0, t36, -t37, 0, -t18, t17, t27, t20, t33, -t158, 0, t44 + (-t172 * qJD(5) - t18) * t144 + t149 * t139, t144 * t149 + t172 * t203 + t228, t9, t3, t28, t29, 0, t113 * t53 + t117 * t14 + t165 * t37 + t39 * t83 + t230, -t113 * t54 + t117 * t13 - t164 * t37 + t38 * t83 + t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, -t178, 0, 0, 0, 0, 0 (-pkin(3) - t129) * t204 - t247, -t177 + t79, t124, t105, 0, 0, 0, t114 + t94 + (-t80 - t197) * t144, t209 + t224, t66, t49, 0, 0, 0, t223 + t226, t222 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t197, -0.2e1 * t177, t124, t105, 0, 0, 0, 0.2e1 * t161, 0.2e1 * t209, t66, t49, 0, 0, 0, 0.2e1 * t223, 0.2e1 * t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t37, 0, -t18, t17, t27, t20, t33, -t158, 0, t44 + (-pkin(4) * t36 - pkin(10) * t37) * t139 + (-t18 + (-pkin(4) * t84 - pkin(10) * t83) * qJD(5)) * t144, pkin(4) * t159 + pkin(10) * t158 + t228, t9, t3, t28, t29, 0, t130 * t14 + t53 * t132 + t163 * t37 + t58 * t83 + t230, t130 * t13 - t132 * t54 - t162 * t37 + t57 * t83 + t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, t79, t124, t105, 0, 0, 0, t183 - t200, -t199 + t224, t66, t49, 0, 0, 0, t221 + t226, t220 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, -t177, t124, t105, 0, 0, 0, t161 - t200, -t199 + t209, t66, t49, 0, 0, 0, t221 + t223, t220 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, t105, 0, 0, 0, -0.2e1 * t200, -0.2e1 * t199, t66, t49, 0, 0, 0, 0.2e1 * t221, 0.2e1 * t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, -t246, t37, t8, t7, 0, 0, t13, -t14, t37, t37 * t236 + (t192 * t138 - t215) * qJD(6) + t191, -t235 + (-t5 - t240) * t138 + (t192 * t143 + t219) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, -t203, 0, -t101 * t134 + t217, t101 * t203 + t213, 0, 0, -t85, -t86, 0, t26, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, -t203, 0, -t127 * t134 - t167, t127 * t203 - t166, 0, 0, -t85, -t86, 0, t39, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, -t203, 0, -pkin(10) * t134, pkin(10) * t203, 0, 0, -t85, -t86, 0, t58, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t196, -0.2e1 * t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, -t14, t37, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, -t86, 0, t26, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, -t86, 0, t39, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, -t86, 0, t58, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t196, -t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
