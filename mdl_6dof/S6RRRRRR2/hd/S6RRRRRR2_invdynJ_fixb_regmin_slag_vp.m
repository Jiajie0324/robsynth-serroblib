% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tau_reg [6x38]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRRR2_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR2_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR2_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR2_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR2_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR2_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:35:53
% EndTime: 2019-03-10 03:36:16
% DurationCPUTime: 11.07s
% Computational Cost: add. (15629->566), mult. (36245->744), div. (0->0), fcn. (28775->18), ass. (0->324)
t320 = cos(qJ(3));
t314 = sin(qJ(3));
t315 = sin(qJ(2));
t426 = qJD(1) * t315;
t399 = t314 * t426;
t321 = cos(qJ(2));
t425 = qJD(1) * t321;
t220 = t320 * t425 - t399;
t221 = -t314 * t425 - t320 * t426;
t313 = sin(qJ(4));
t319 = cos(qJ(4));
t179 = t319 * t220 + t221 * t313;
t494 = qJD(5) + qJD(6);
t524 = -t179 + t494;
t311 = sin(qJ(6));
t312 = sin(qJ(5));
t317 = cos(qJ(6));
t318 = cos(qJ(5));
t234 = t311 * t312 - t317 * t318;
t523 = t524 * t234;
t443 = t311 * t318;
t236 = t312 * t317 + t443;
t522 = t524 * t236;
t419 = qJD(5) * t318;
t514 = t179 * t318;
t521 = t419 - t514;
t310 = qJ(2) + qJ(3);
t303 = qJ(4) + t310;
t287 = sin(t303);
t316 = sin(qJ(1));
t322 = cos(qJ(1));
t370 = g(1) * t322 + g(2) * t316;
t520 = t370 * t287;
t515 = t179 * t312;
t411 = pkin(11) * t515;
t421 = qJD(4) * t319;
t484 = pkin(7) + pkin(8);
t264 = t484 * t321;
t245 = qJD(1) * t264;
t226 = t320 * t245;
t262 = t484 * t315;
t243 = qJD(1) * t262;
t469 = qJD(2) * pkin(2);
t228 = -t243 + t469;
t357 = -t228 * t314 - t226;
t478 = pkin(9) * t220;
t158 = -t357 + t478;
t150 = t313 * t158;
t216 = t221 * pkin(9);
t222 = t314 * t245;
t384 = t320 * t228 - t222;
t157 = t216 + t384;
t98 = t157 * t319 - t150;
t516 = -pkin(3) * t421 + t98;
t383 = t243 * t314 - t226;
t164 = t383 - t478;
t430 = -t320 * t243 - t222;
t165 = t216 + t430;
t291 = pkin(2) * t320 + pkin(3);
t422 = qJD(4) * t313;
t439 = t313 * t314;
t432 = t164 * t313 + t165 * t319 - t291 * t421 - (-t314 * t422 + (t319 * t320 - t439) * qJD(3)) * pkin(2);
t358 = t220 * t313 - t319 * t221;
t132 = pkin(4) * t358 - pkin(10) * t179;
t482 = pkin(3) * t221;
t116 = t132 - t482;
t294 = pkin(2) * t426;
t111 = t116 + t294;
t519 = -t318 * t111 + t312 * t432;
t420 = qJD(5) * t312;
t498 = (t420 - t515) * pkin(5);
t373 = pkin(5) * t358 - pkin(11) * t514;
t305 = qJDD(2) + qJDD(3);
t297 = qJDD(4) + t305;
t306 = qJD(2) + qJD(3);
t144 = pkin(3) * t306 + t157;
t412 = t321 * qJDD(1);
t415 = qJD(1) * qJD(2);
t396 = t321 * t415;
t413 = t315 * qJDD(1);
t349 = -t396 - t413;
t414 = qJD(1) * qJD(3);
t507 = -t321 * t414 + t349;
t159 = -t306 * t399 + t314 * t412 - t320 * t507;
t192 = qJDD(2) * pkin(2) + t349 * t484;
t397 = t315 * t415;
t348 = -t397 + t412;
t193 = t484 * t348;
t336 = qJD(3) * t357 + t320 * t192 - t314 * t193;
t70 = t305 * pkin(3) - t159 * pkin(9) + t336;
t424 = qJD(3) * t314;
t218 = t245 * t424;
t377 = -qJD(3) * t228 - t193;
t79 = -t218 + (pkin(9) * t507 + t192) * t314 + ((-t315 * t414 + t348) * pkin(9) - t377) * t320;
t378 = -t144 * t422 - t158 * t421 - t313 * t79 + t319 * t70;
t24 = -pkin(4) * t297 - t378;
t298 = qJD(4) + t306;
t162 = t298 * t312 + t318 * t358;
t235 = t314 * t315 - t320 * t321;
t237 = t314 * t321 + t315 * t320;
t191 = t306 * t237;
t327 = qJD(1) * t191;
t325 = -t235 * qJDD(1) - t327;
t81 = t319 * t159 + t220 * t421 + t221 * t422 + t313 * t325;
t388 = -t318 * t297 + t312 * t81;
t61 = qJD(5) * t162 + t388;
t11 = pkin(5) * t61 + t24;
t293 = -t321 * pkin(2) - pkin(1);
t260 = t293 * qJD(1);
t194 = -t220 * pkin(3) + t260;
t108 = -pkin(4) * t179 - pkin(10) * t358 + t194;
t151 = t319 * t158;
t94 = t313 * t144 + t151;
t91 = pkin(10) * t298 + t94;
t51 = t318 * t108 - t312 * t91;
t38 = -pkin(11) * t162 + t51;
t416 = -qJD(5) + t179;
t34 = -pkin(5) * t416 + t38;
t160 = -t318 * t298 + t312 * t358;
t52 = t108 * t312 + t318 * t91;
t39 = -pkin(11) * t160 + t52;
t467 = t317 * t39;
t13 = t311 * t34 + t467;
t288 = cos(t303);
t309 = qJ(5) + qJ(6);
t299 = sin(t309);
t474 = g(3) * t299;
t93 = t144 * t319 - t150;
t90 = -pkin(4) * t298 - t93;
t66 = pkin(5) * t160 + t90;
t329 = t11 * t236 + t13 * t358 + t288 * t474 - t299 * t520 - t523 * t66;
t12 = -t311 * t39 + t317 * t34;
t301 = cos(t309);
t473 = g(3) * t301;
t334 = t11 * t234 - t12 * t358 - t288 * t473 + t301 * t520 + t522 * t66;
t518 = -t318 * t116 + t312 * t516;
t60 = t312 * t297 + t298 * t419 + t318 * t81 - t358 * t420;
t58 = t60 * t312;
t33 = t162 * t521 + t58;
t169 = qJD(6) - t416;
t360 = t160 * t311 - t317 * t162;
t82 = qJD(4) * t358 + t313 * t159 - t319 * t325;
t80 = qJDD(5) + t82;
t77 = qJDD(6) + t80;
t19 = -t169 * t523 + t236 * t77 + t358 * t360;
t101 = t317 * t160 + t162 * t311;
t20 = t101 * t358 - t169 * t522 - t234 * t77;
t417 = qJD(6) * t317;
t418 = qJD(6) * t311;
t17 = -t160 * t417 - t162 * t418 - t311 * t61 + t317 * t60;
t6 = t17 * t236 + t360 * t523;
t32 = -t162 * t358 + t312 * t80 - t416 * t521;
t509 = t416 * t312;
t31 = t160 * t358 + t318 * t80 - t416 * t509;
t338 = qJD(6) * t360 - t311 * t60 - t317 * t61;
t1 = t101 * t523 - t17 * t234 + t236 * t338 + t522 * t360;
t8 = -t160 * t521 + t162 * t509 - t312 * t61 + t60 * t318;
t468 = t179 * t90;
t475 = g(3) * t288;
t517 = t24 + t475;
t451 = t358 * t179;
t510 = t360 * t101;
t73 = -t179 ^ 2 + t358 ^ 2;
t506 = -t101 ^ 2 + t360 ^ 2;
t505 = t101 * t169 + t17;
t445 = t301 * t316;
t446 = t299 * t322;
t201 = -t288 * t445 + t446;
t444 = t301 * t322;
t447 = t299 * t316;
t203 = t288 * t444 + t447;
t37 = t39 * t418;
t504 = g(1) * t203 - g(2) * t201 + t66 * t101 + t287 * t473 + t37;
t64 = -t179 * t298 + t81;
t200 = t288 * t447 + t444;
t202 = -t288 * t446 + t445;
t485 = (qJD(4) * t144 + t79) * t319 - t158 * t422 + t313 * t70;
t23 = t297 * pkin(10) + t485;
t206 = pkin(3) * t235 + t293;
t281 = pkin(2) * t397;
t139 = pkin(3) * t327 + qJDD(1) * t206 + t281;
t30 = t82 * pkin(4) - t81 * pkin(10) + t139;
t29 = t318 * t30;
t3 = t80 * pkin(5) - t60 * pkin(11) - qJD(5) * t52 - t312 * t23 + t29;
t354 = t108 * t419 + t318 * t23 + t312 * t30 - t420 * t91;
t4 = -pkin(11) * t61 + t354;
t404 = t317 * t3 - t311 * t4;
t503 = -g(1) * t202 + g(2) * t200 - qJD(6) * t13 + t287 * t474 + t66 * t360 + t404;
t502 = -t169 * t360 + t338;
t280 = g(3) * t287;
t331 = -t194 * t179 + t288 * t370 + t280 - t485;
t97 = t157 * t313 + t151;
t375 = pkin(3) * t422 - t97;
t457 = t169 * t358;
t456 = t416 * t358;
t187 = -t235 * t313 + t237 * t319;
t133 = t236 * t187;
t438 = t314 * t319;
t431 = t164 * t319 - t165 * t313 + t291 * t422 + (t314 * t421 + (t313 * t320 + t438) * qJD(3)) * pkin(2);
t429 = -t314 * t262 + t320 * t264;
t497 = t312 * t111 + t318 * t432;
t496 = t312 * t116 + t318 * t516;
t495 = qJDD(1) * t293;
t87 = t90 * t420;
t490 = t318 * t520 - t51 * t358 + t87;
t489 = t312 * t517 + t52 * t358 + t90 * t419;
t339 = -t194 * t358 + t378 - t475 + t520;
t65 = t298 * t358 - t82;
t483 = -pkin(10) - pkin(11);
t480 = pkin(3) * t319;
t479 = pkin(5) * t318;
t428 = pkin(2) * t438 + t313 * t291;
t215 = pkin(10) + t428;
t472 = -pkin(11) - t215;
t289 = pkin(3) * t313 + pkin(10);
t471 = -pkin(11) - t289;
t462 = t498 + t431;
t461 = t498 + t375;
t460 = t312 * t132 + t318 * t93;
t186 = t319 * t235 + t237 * t313;
t190 = t306 * t235;
t112 = -qJD(4) * t186 - t319 * t190 - t313 * t191;
t458 = t112 * t318;
t450 = t187 * t312;
t449 = t187 * t318;
t448 = t221 * t220;
t442 = t312 * t112;
t441 = t312 * t316;
t440 = t312 * t322;
t437 = t316 * t318;
t382 = -t320 * t262 - t264 * t314;
t172 = -pkin(9) * t237 + t382;
t173 = -pkin(9) * t235 + t429;
t129 = t172 * t313 + t173 * t319;
t122 = t318 * t129;
t435 = t318 * t322;
t127 = pkin(4) * t186 - pkin(10) * t187 + t206;
t433 = t312 * t127 + t122;
t307 = t315 ^ 2;
t427 = -t321 ^ 2 + t307;
t423 = qJD(3) * t320;
t296 = t315 * t469;
t406 = qJD(5) * pkin(10) * t416;
t292 = -pkin(4) - t479;
t403 = qJD(2) * t484;
t402 = qJD(5) * t483;
t401 = t187 * t420;
t400 = t187 * t419;
t181 = pkin(3) * t191 + t296;
t394 = qJD(6) * t34 + t4;
t392 = qJD(5) * t472;
t391 = qJD(5) * t471;
t386 = -qJD(5) * t108 - t23;
t381 = -pkin(2) * t439 + t291 * t319;
t374 = t498 - t94;
t214 = -pkin(4) - t381;
t372 = -t419 * t91 + t29;
t371 = -pkin(10) * t80 - t468;
t369 = g(1) * t316 - g(2) * t322;
t195 = t472 * t312;
t368 = -qJD(6) * t195 - t312 * t392 - t411 + t497;
t304 = t318 * pkin(11);
t196 = t215 * t318 + t304;
t367 = qJD(6) * t196 - t318 * t392 + t373 - t519;
t231 = t471 * t312;
t366 = -qJD(6) * t231 - t312 * t391 - t411 + t496;
t232 = t289 * t318 + t304;
t365 = qJD(6) * t232 - t318 * t391 + t373 - t518;
t261 = t483 * t312;
t364 = -qJD(6) * t261 - t312 * t402 - t411 + t460;
t131 = t318 * t132;
t263 = pkin(10) * t318 + t304;
t363 = qJD(6) * t263 - t312 * t93 - t318 * t402 + t131 + t373;
t362 = -t215 * t80 - t468;
t361 = -t289 * t80 - t468;
t359 = t172 * t319 - t173 * t313;
t355 = -0.2e1 * pkin(1) * t415 - pkin(7) * qJDD(2);
t353 = t400 + t442;
t352 = -t401 + t458;
t244 = t315 * t403;
t246 = t321 * t403;
t347 = -t320 * t244 - t314 * t246 - t262 * t423 - t264 * t424;
t120 = -pkin(9) * t191 + t347;
t335 = -qJD(3) * t429 + t314 * t244 - t320 * t246;
t121 = t190 * pkin(9) + t335;
t42 = qJD(4) * t359 + t319 * t120 + t313 * t121;
t113 = qJD(4) * t187 - t313 * t190 + t319 * t191;
t49 = pkin(4) * t113 - pkin(10) * t112 + t181;
t350 = t127 * t419 - t129 * t420 + t312 * t49 + t318 * t42;
t323 = qJD(2) ^ 2;
t343 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t323 + t369;
t324 = qJD(1) ^ 2;
t342 = pkin(1) * t324 - pkin(7) * qJDD(1) + t370;
t340 = -t318 * t517 + t490;
t43 = qJD(4) * t129 + t313 * t120 - t319 * t121;
t332 = -t312 * t520 + t489;
t300 = sin(t310);
t302 = cos(t310);
t330 = g(3) * t300 - t314 * t192 - t260 * t220 + t302 * t370 + t377 * t320 + t218;
t326 = -g(3) * t302 + t260 * t221 + t300 * t370 + t336;
t290 = -pkin(4) - t480;
t253 = t292 - t480;
t217 = t281 + t495;
t212 = t288 * t435 + t441;
t211 = -t288 * t440 + t437;
t210 = -t288 * t437 + t440;
t209 = t288 * t441 + t435;
t204 = t214 - t479;
t199 = t294 - t482;
t163 = -t220 ^ 2 + t221 ^ 2;
t138 = -t221 * t306 + t325;
t137 = -t220 * t306 + t159;
t134 = t234 * t187;
t119 = t318 * t127;
t89 = pkin(5) * t450 - t359;
t53 = -pkin(11) * t450 + t433;
t48 = t318 * t49;
t46 = pkin(5) * t186 - pkin(11) * t449 - t129 * t312 + t119;
t27 = t112 * t443 - t311 * t401 - t418 * t450 + (t449 * t494 + t442) * t317;
t26 = -t234 * t112 - t133 * t494;
t25 = pkin(5) * t353 + t43;
t7 = -pkin(11) * t353 + t350;
t5 = -pkin(11) * t458 + t113 * pkin(5) - t312 * t42 + t48 + (-t122 + (pkin(11) * t187 - t127) * t312) * qJD(5);
t2 = [qJDD(1), t369, t370, qJDD(1) * t307 + 0.2e1 * t315 * t396, 0.2e1 * t315 * t412 - 0.2e1 * t415 * t427, qJDD(2) * t315 + t321 * t323, qJDD(2) * t321 - t315 * t323, 0, t315 * t355 + t321 * t343, -t315 * t343 + t321 * t355, t159 * t237 + t190 * t221, -t159 * t235 - t190 * t220 + t221 * t191 + t237 * t325, -t190 * t306 + t237 * t305, -t191 * t306 - t235 * t305, 0, -t220 * t296 + t369 * t302 + t382 * t305 + t335 * t306 + (t217 + t495) * t235 + 0.2e1 * t260 * t191, t293 * t159 - t260 * t190 + t217 * t237 - t221 * t296 - t300 * t369 - t305 * t429 - t306 * t347, t112 * t358 + t187 * t81, t112 * t179 - t113 * t358 - t186 * t81 - t187 * t82, t112 * t298 + t187 * t297, -t113 * t298 - t186 * t297, 0, t194 * t113 + t139 * t186 - t179 * t181 + t206 * t82 + t288 * t369 + t297 * t359 - t43 * t298, t194 * t112 - t129 * t297 + t139 * t187 + t181 * t358 + t206 * t81 - t287 * t369 - t42 * t298, t162 * t352 + t449 * t60 (-t160 * t318 - t162 * t312) * t112 + (-t58 - t318 * t61 + (t160 * t312 - t162 * t318) * qJD(5)) * t187, t162 * t113 + t60 * t186 - t352 * t416 + t449 * t80, -t160 * t113 - t61 * t186 + t353 * t416 - t450 * t80, -t113 * t416 + t186 * t80 -(-t129 * t419 + t48) * t416 + t119 * t80 + t372 * t186 + t51 * t113 + t43 * t160 - t359 * t61 + t90 * t400 - g(1) * t210 - g(2) * t212 + (-(-qJD(5) * t127 - t42) * t416 - t129 * t80 + t386 * t186 + t24 * t187 + t90 * t112) * t312, t350 * t416 - t433 * t80 - t354 * t186 - t52 * t113 + t43 * t162 - t359 * t60 + t90 * t458 - g(1) * t209 - g(2) * t211 + (t24 * t318 - t87) * t187, -t134 * t17 - t26 * t360, -t101 * t26 - t133 * t17 - t134 * t338 + t27 * t360, -t113 * t360 - t134 * t77 + t169 * t26 + t17 * t186, -t101 * t113 - t133 * t77 - t169 * t27 + t186 * t338, t113 * t169 + t186 * t77 (-t311 * t7 + t317 * t5) * t169 + (-t311 * t53 + t317 * t46) * t77 + t404 * t186 + t12 * t113 + t25 * t101 - t89 * t338 + t11 * t133 + t66 * t27 - g(1) * t201 - g(2) * t203 + ((-t311 * t46 - t317 * t53) * t169 - t13 * t186) * qJD(6), -g(1) * t200 - g(2) * t202 - t25 * t360 - t11 * t134 - t13 * t113 + t89 * t17 + t37 * t186 + t66 * t26 + (-(-qJD(6) * t53 + t5) * t169 - t46 * t77 - t3 * t186) * t311 + (-(qJD(6) * t46 + t7) * t169 - t53 * t77 - t394 * t186) * t317; 0, 0, 0, -t315 * t324 * t321, t427 * t324, t413, t412, qJDD(2), -g(3) * t321 + t315 * t342, g(3) * t315 + t321 * t342, t448, t163, t137, t138, t305, -t383 * t306 + (t220 * t426 + t305 * t320 - t306 * t424) * pkin(2) + t326, t430 * t306 + (t221 * t426 - t305 * t314 - t306 * t423) * pkin(2) + t330, -t451, t73, t64, t65, t297, t179 * t199 + t297 * t381 - t298 * t431 + t339, -t199 * t358 - t297 * t428 + t298 * t432 + t331, t33, t8, t32, t31, t456, t214 * t61 + t362 * t312 + t431 * t160 - (-t215 * t419 + t519) * t416 + t340, t214 * t60 + t362 * t318 + t431 * t162 - (t215 * t420 + t497) * t416 + t332, t6, t1, t19, t20, -t457 (t195 * t317 - t196 * t311) * t77 - t204 * t338 + (t311 * t368 - t317 * t367) * t169 + t462 * t101 + t334 -(t195 * t311 + t196 * t317) * t77 + t204 * t17 + (t311 * t367 + t317 * t368) * t169 - t462 * t360 + t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t448, t163, t137, t138, t305, -t306 * t357 + t326, t306 * t384 + t330, -t451, t73, t64, t65, t297, t97 * t298 + (-t179 * t221 + t297 * t319 - t298 * t422) * pkin(3) + t339, t98 * t298 + (t221 * t358 - t297 * t313 - t298 * t421) * pkin(3) + t331, t33, t8, t32, t31, t456, t290 * t61 + t361 * t312 + t375 * t160 - (-t289 * t419 + t518) * t416 + t340, t290 * t60 + t361 * t318 + t375 * t162 - (t289 * t420 + t496) * t416 + t332, t6, t1, t19, t20, -t457 (t231 * t317 - t232 * t311) * t77 - t253 * t338 + (t311 * t366 - t317 * t365) * t169 + t461 * t101 + t334 -(t231 * t311 + t232 * t317) * t77 + t253 * t17 + (t311 * t365 + t317 * t366) * t169 - t461 * t360 + t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t451, t73, t64, t65, t297, t298 * t94 + t339, t93 * t298 + t331, t33, t8, t32, t31, t456, -pkin(4) * t61 + t131 * t416 - t94 * t160 + (-t416 * t93 + t371) * t312 + (-t517 + t406) * t318 + t490, -pkin(4) * t60 - t460 * t416 - t94 * t162 + t371 * t318 + (-t520 - t406) * t312 + t489, t6, t1, t19, t20, -t457 (t261 * t317 - t263 * t311) * t77 - t292 * t338 + (t311 * t364 - t317 * t363) * t169 + t374 * t101 + t334 -(t261 * t311 + t263 * t317) * t77 + t292 * t17 + (t311 * t363 + t317 * t364) * t169 - t374 * t360 + t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162 * t160, -t160 ^ 2 + t162 ^ 2, -t160 * t416 + t60, -t388 + (-qJD(5) - t416) * t162, t80, -g(1) * t211 + g(2) * t209 - t90 * t162 - t52 * t416 + (t386 + t280) * t312 + t372, g(1) * t212 - g(2) * t210 + t160 * t90 + t280 * t318 - t416 * t51 - t354, -t510, t506, t505, t502, t77 -(-t311 * t38 - t467) * t169 + (-t101 * t162 - t169 * t418 + t317 * t77) * pkin(5) + t503 (-t169 * t39 - t3) * t311 + (t169 * t38 - t394) * t317 + (t162 * t360 - t169 * t417 - t311 * t77) * pkin(5) + t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t510, t506, t505, t502, t77, t13 * t169 + t503, t12 * t169 - t311 * t3 - t317 * t394 + t504;];
tau_reg  = t2;
