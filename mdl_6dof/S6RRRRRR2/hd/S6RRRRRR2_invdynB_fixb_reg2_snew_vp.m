% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 08:32
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 08:29:13
% EndTime: 2019-05-08 08:30:33
% DurationCPUTime: 53.49s
% Computational Cost: add. (490564->961), mult. (1059299->1481), div. (0->0), fcn. (819624->12), ass. (0->655)
t1154 = cos(qJ(2));
t1136 = t1154 * qJDD(1);
t1148 = sin(qJ(2));
t1226 = qJD(1) * t1148;
t1190 = qJD(2) * t1226;
t1112 = t1136 - t1190;
t1143 = t1154 ^ 2;
t1157 = qJD(1) ^ 2;
t1149 = sin(qJ(1));
t1155 = cos(qJ(1));
t1121 = t1149 * g(1) - t1155 * g(2);
t1171 = qJDD(1) * pkin(1) + t1121;
t1172 = qJD(2) * pkin(2) - pkin(8) * t1226;
t1048 = t1112 * pkin(2) - t1172 * t1226 + t1171 + (pkin(8) * t1143 + pkin(7)) * t1157;
t1144 = sin(qJ(6));
t1147 = sin(qJ(3));
t1153 = cos(qJ(3));
t1225 = qJD(1) * t1154;
t1102 = -t1147 * t1226 + t1153 * t1225;
t1103 = (t1147 * t1154 + t1148 * t1153) * qJD(1);
t1146 = sin(qJ(4));
t1152 = cos(qJ(4));
t1070 = t1102 * t1146 + t1103 * t1152;
t1183 = qJD(2) * t1225;
t1198 = qJDD(1) * t1148;
t1111 = t1183 + t1198;
t1178 = t1147 * t1111 - t1153 * t1112;
t1045 = -qJD(3) * t1103 - t1178;
t1046 = qJD(3) * t1102 + t1153 * t1111 + t1147 * t1112;
t1179 = -t1152 * t1045 + t1146 * t1046;
t964 = -qJD(4) * t1070 - t1179;
t963 = qJDD(5) - t964;
t1168 = qJDD(6) + t963;
t1141 = qJD(2) + qJD(3);
t1135 = qJD(4) + t1141;
t1145 = sin(qJ(5));
t1151 = cos(qJ(5));
t1039 = t1070 * t1145 - t1151 * t1135;
t1041 = t1070 * t1151 + t1135 * t1145;
t1150 = cos(qJ(6));
t990 = t1150 * t1039 + t1041 * t1144;
t992 = -t1039 * t1144 + t1041 * t1150;
t925 = t992 * t990;
t1252 = t1168 - t925;
t1263 = t1144 * t1252;
t994 = t1041 * t1039;
t1253 = t963 - t994;
t1262 = t1145 * t1253;
t1068 = -t1152 * t1102 + t1103 * t1146;
t1010 = t1070 * t1068;
t1195 = qJDD(2) + qJDD(3);
t1181 = qJDD(4) + t1195;
t1251 = -t1010 + t1181;
t1261 = t1146 * t1251;
t1076 = t1102 * t1103;
t1248 = t1076 + t1195;
t1260 = t1147 * t1248;
t1259 = t1150 * t1252;
t1258 = t1151 * t1253;
t1257 = t1152 * t1251;
t1256 = t1153 * t1248;
t1055 = t1135 * t1068;
t1169 = qJD(4) * t1068 - t1045 * t1146 - t1046 * t1152;
t1255 = t1169 + t1055;
t1100 = t1102 ^ 2;
t1174 = pkin(3) * t1141 - pkin(9) * t1103;
t955 = t1045 * pkin(3) + t1100 * pkin(9) - t1103 * t1174 + t1048;
t1180 = -t1145 * t1169 - t1151 * t1181;
t930 = -qJD(5) * t1041 - t1180;
t931 = -t1039 * qJD(5) + t1145 * t1181 - t1151 * t1169;
t837 = -qJD(6) * t990 + t1144 * t930 + t1150 * t931;
t1064 = qJD(5) + t1068;
t1062 = qJD(6) + t1064;
t959 = t1062 * t990;
t1254 = t837 - t959;
t1001 = t1064 * t1039;
t899 = -t1001 - t931;
t900 = -t931 + t1001;
t1097 = t1141 * t1102;
t1021 = -t1046 + t1097;
t1250 = t1046 + t1097;
t1138 = t1143 * t1157;
t1156 = qJD(2) ^ 2;
t1129 = -t1138 - t1156;
t1182 = t1144 * t931 - t1150 * t930;
t806 = (qJD(6) - t1062) * t992 + t1182;
t895 = (qJD(5) - t1064) * t1041 + t1180;
t946 = (qJD(4) - t1135) * t1070 + t1179;
t1022 = (qJD(3) - t1141) * t1103 + t1178;
t1122 = g(1) * t1155 + g(2) * t1149;
t1166 = pkin(1) * t1157 - qJDD(1) * pkin(7) + t1122;
t1165 = t1148 * t1166;
t1161 = qJDD(2) * pkin(2) - t1111 * pkin(8) + t1165;
t1244 = t1148 * g(3);
t1162 = -pkin(2) * t1138 + t1112 * pkin(8) - qJD(2) * t1172 - t1244;
t1204 = t1148 * t1157;
t1227 = qJD(1) * qJD(2);
t1170 = pkin(2) * t1204 + pkin(8) * t1227 - g(3);
t986 = t1147 * t1162 - t1153 * t1161 + (-t1147 * t1166 - t1153 * t1170) * t1154;
t988 = t990 ^ 2;
t989 = t992 ^ 2;
t1247 = t1039 ^ 2;
t1038 = t1041 ^ 2;
t1061 = t1062 ^ 2;
t1063 = t1064 ^ 2;
t1066 = t1068 ^ 2;
t1067 = t1070 ^ 2;
t1101 = t1103 ^ 2;
t1246 = t1135 ^ 2;
t1140 = t1141 ^ 2;
t1245 = pkin(4) * t1146;
t1006 = pkin(4) * t1068 - pkin(10) * t1070;
t1158 = pkin(3) * t1248 + pkin(9) * t1021 - t986;
t1164 = t1154 * t1166;
t987 = t1153 * (-t1164 + t1162) + t1147 * (t1154 * t1170 + t1161);
t929 = -t1100 * pkin(3) + t1045 * pkin(9) - t1141 * t1174 + t987;
t851 = t1146 * t1158 + t1152 * t929;
t827 = -pkin(4) * t1246 + pkin(10) * t1181 - t1068 * t1006 + t851;
t838 = t1255 * pkin(10) + (t1070 * t1135 - t964) * pkin(4) - t955;
t758 = t1145 * t827 - t1151 * t838;
t710 = pkin(5) * t1253 + pkin(11) * t899 - t758;
t759 = t1145 * t838 + t1151 * t827;
t996 = pkin(5) * t1064 - pkin(11) * t1041;
t726 = -pkin(5) * t1247 + pkin(11) * t930 - t1064 * t996 + t759;
t664 = t1144 * t710 + t1150 * t726;
t850 = t1146 * t929 - t1152 * t1158;
t826 = -t1181 * pkin(4) - t1246 * pkin(10) + t1006 * t1070 + t850;
t767 = -t930 * pkin(5) - pkin(11) * t1247 + t1041 * t996 + t826;
t1243 = t1144 * t767;
t873 = t1168 + t925;
t1242 = t1144 * t873;
t663 = t1144 * t726 - t1150 * t710;
t614 = t1144 * t664 - t1150 * t663;
t1241 = t1145 * t614;
t1240 = t1145 * t826;
t914 = t963 + t994;
t1239 = t1145 * t914;
t1238 = t1146 * t955;
t772 = t1146 * t851 - t1152 * t850;
t1237 = t1147 * t772;
t918 = t1147 * t987 - t1153 * t986;
t1236 = t1148 * t918;
t1235 = t1150 * t767;
t1234 = t1150 * t873;
t1233 = t1151 * t614;
t1232 = t1151 * t826;
t1231 = t1151 * t914;
t1230 = t1152 * t955;
t1229 = t1153 * t772;
t1228 = t1154 * t918;
t1004 = t1010 + t1181;
t1224 = t1004 * t1146;
t1223 = t1004 * t1152;
t1222 = t1048 * t1147;
t1221 = t1048 * t1153;
t1220 = t1062 * t1144;
t1219 = t1062 * t1150;
t1218 = t1064 * t1145;
t1217 = t1064 * t1151;
t1073 = -t1076 + t1195;
t1216 = t1073 * t1147;
t1215 = t1073 * t1153;
t1104 = t1157 * pkin(7) + t1171;
t1214 = t1104 * t1148;
t1213 = t1104 * t1154;
t1131 = t1154 * t1204;
t1119 = qJDD(2) + t1131;
t1212 = t1119 * t1148;
t1120 = qJDD(2) - t1131;
t1211 = t1120 * t1148;
t1210 = t1120 * t1154;
t1209 = t1135 * t1146;
t1208 = t1135 * t1152;
t1207 = t1141 * t1147;
t1206 = t1141 * t1153;
t1142 = t1148 ^ 2;
t1205 = t1142 * t1157;
t1199 = t1142 + t1143;
t1197 = qJDD(1) * t1149;
t1196 = qJDD(1) * t1155;
t1194 = t1146 * t925;
t1193 = t1152 * t925;
t1192 = -pkin(4) * t1152 - pkin(3);
t1189 = t1146 * t994;
t1188 = t1152 * t994;
t1187 = t1149 * t1010;
t1186 = t1155 * t1010;
t1185 = t1149 * t1076;
t1184 = t1155 * t1076;
t615 = t1144 * t663 + t1150 * t664;
t773 = t1146 * t850 + t1152 * t851;
t919 = t1147 * t986 + t1153 * t987;
t1090 = t1154 * g(3) - t1165;
t1091 = -t1164 - t1244;
t1033 = t1090 * t1148 + t1154 * t1091;
t1082 = -t1121 * t1149 - t1155 * t1122;
t1177 = t1149 * t1131;
t1176 = t1155 * t1131;
t1116 = -t1149 * t1157 + t1196;
t1173 = -pkin(6) * t1116 - g(3) * t1149;
t690 = t1145 * t759 - t1151 * t758;
t691 = t1145 * t758 + t1151 * t759;
t1032 = t1090 * t1154 - t1091 * t1148;
t1081 = t1121 * t1155 - t1122 * t1149;
t1128 = t1138 - t1156;
t1127 = -t1156 - t1205;
t1126 = t1156 - t1205;
t1118 = t1138 - t1205;
t1117 = t1138 + t1205;
t1115 = t1155 * t1157 + t1197;
t1114 = t1199 * qJDD(1);
t1113 = t1136 - 0.2e1 * t1190;
t1110 = 0.2e1 * t1183 + t1198;
t1108 = t1154 * t1119;
t1107 = t1199 * t1227;
t1099 = -pkin(6) * t1115 + g(3) * t1155;
t1095 = -t1101 + t1140;
t1094 = t1100 - t1140;
t1093 = t1111 * t1154 - t1142 * t1227;
t1092 = -t1112 * t1148 - t1143 * t1227;
t1089 = -t1101 - t1140;
t1088 = -t1127 * t1148 - t1210;
t1087 = -t1126 * t1148 + t1108;
t1086 = t1129 * t1154 - t1212;
t1085 = t1128 * t1154 - t1211;
t1084 = t1127 * t1154 - t1211;
t1083 = t1129 * t1148 + t1108;
t1079 = t1114 * t1155 - t1117 * t1149;
t1078 = t1114 * t1149 + t1117 * t1155;
t1077 = -t1110 * t1148 + t1113 * t1154;
t1075 = -t1101 + t1100;
t1071 = -t1140 - t1100;
t1060 = t1088 * t1155 + t1110 * t1149;
t1059 = t1086 * t1155 - t1113 * t1149;
t1058 = t1088 * t1149 - t1110 * t1155;
t1057 = t1086 * t1149 + t1113 * t1155;
t1054 = -t1067 + t1246;
t1053 = t1066 - t1246;
t1052 = (t1102 * t1153 + t1103 * t1147) * t1141;
t1051 = (t1102 * t1147 - t1103 * t1153) * t1141;
t1050 = -pkin(7) * t1084 - t1213;
t1049 = -pkin(7) * t1083 - t1214;
t1047 = -t1100 - t1101;
t1044 = -pkin(1) * t1084 + t1091;
t1043 = -pkin(1) * t1083 + t1090;
t1042 = -t1067 - t1246;
t1028 = t1094 * t1153 - t1216;
t1027 = -t1095 * t1147 + t1256;
t1026 = t1094 * t1147 + t1215;
t1025 = t1095 * t1153 + t1260;
t1024 = -t1089 * t1147 - t1215;
t1023 = t1089 * t1153 - t1216;
t1017 = (qJD(3) + t1141) * t1103 + t1178;
t1016 = t1046 * t1153 - t1103 * t1207;
t1015 = t1046 * t1147 + t1103 * t1206;
t1014 = -t1045 * t1147 - t1102 * t1206;
t1013 = t1045 * t1153 - t1102 * t1207;
t1012 = t1033 * t1155 - t1104 * t1149;
t1011 = t1033 * t1149 + t1104 * t1155;
t1009 = -t1067 + t1066;
t1008 = t1071 * t1153 - t1260;
t1007 = t1071 * t1147 + t1256;
t1002 = -t1246 - t1066;
t1000 = -t1038 + t1063;
t999 = -t1063 + t1247;
t998 = (-t1068 * t1152 + t1070 * t1146) * t1135;
t997 = (-t1068 * t1146 - t1070 * t1152) * t1135;
t995 = -t1051 * t1148 + t1052 * t1154;
t993 = -t1038 + t1247;
t985 = -t1066 - t1067;
t983 = -pkin(8) * t1023 - t1221;
t982 = -t1038 - t1063;
t981 = -pkin(8) * t1007 - t1222;
t980 = -t1026 * t1148 + t1028 * t1154;
t979 = -t1025 * t1148 + t1027 * t1154;
t978 = t1053 * t1152 - t1224;
t977 = -t1054 * t1146 + t1257;
t976 = t1053 * t1146 + t1223;
t975 = t1054 * t1152 + t1261;
t974 = -t1042 * t1146 - t1223;
t973 = t1042 * t1152 - t1224;
t972 = -t1023 * t1148 + t1024 * t1154;
t971 = t1023 * t1154 + t1024 * t1148;
t970 = -t1063 - t1247;
t969 = -t1021 * t1147 - t1022 * t1153;
t968 = -t1017 * t1153 - t1147 * t1250;
t967 = t1021 * t1153 - t1022 * t1147;
t966 = -t1017 * t1147 + t1153 * t1250;
t958 = -t989 + t1061;
t957 = t988 - t1061;
t956 = t1038 + t1247;
t954 = -t1015 * t1148 + t1016 * t1154;
t953 = -t1013 * t1148 + t1014 * t1154;
t952 = -t1007 * t1148 + t1008 * t1154;
t951 = t1007 * t1154 + t1008 * t1148;
t950 = t1002 * t1152 - t1261;
t949 = t1002 * t1146 + t1257;
t948 = (t1039 * t1145 + t1041 * t1151) * t1064;
t947 = (-t1039 * t1151 + t1041 * t1145) * t1064;
t945 = -t1055 + t1169;
t941 = (qJD(4) + t1135) * t1070 + t1179;
t940 = -pkin(2) * t1250 + pkin(8) * t1024 - t1222;
t939 = -t989 - t1061;
t938 = -t1147 * t997 + t1153 * t998;
t937 = t1147 * t998 + t1153 * t997;
t936 = -t1070 * t1209 - t1152 * t1169;
t935 = t1070 * t1208 - t1146 * t1169;
t934 = t1068 * t1208 - t1146 * t964;
t933 = t1068 * t1209 + t1152 * t964;
t932 = -pkin(2) * t1017 + pkin(8) * t1008 + t1221;
t924 = t1149 * t1250 + t1155 * t972;
t923 = t1149 * t972 - t1155 * t1250;
t922 = -t989 + t988;
t917 = t1017 * t1149 + t1155 * t952;
t916 = -t1017 * t1155 + t1149 * t952;
t912 = -t1061 - t988;
t911 = -t1147 * t976 + t1153 * t978;
t910 = -t1147 * t975 + t1153 * t977;
t909 = t1147 * t978 + t1153 * t976;
t908 = t1147 * t977 + t1153 * t975;
t907 = -t1147 * t973 + t1153 * t974;
t906 = t1147 * t974 + t1153 * t973;
t905 = pkin(2) * t1048 + pkin(8) * t919;
t904 = -t1148 * t967 + t1154 * t969;
t903 = -t1148 * t966 + t1154 * t968;
t902 = t1148 * t969 + t1154 * t967;
t901 = -pkin(9) * t973 - t1230;
t896 = (-qJD(5) - t1064) * t1041 - t1180;
t894 = (t1144 * t992 - t1150 * t990) * t1062;
t893 = (-t1144 * t990 - t1150 * t992) * t1062;
t892 = -t1041 * t1218 + t1151 * t931;
t891 = -t1039 * t1218 - t1151 * t930;
t890 = -t1041 * t1217 - t1145 * t931;
t889 = t1039 * t1217 - t1145 * t930;
t888 = -t988 - t989;
t887 = -pkin(1) * t971 - pkin(2) * t1023 + t987;
t886 = -pkin(9) * t949 - t1238;
t885 = t1146 * t963 + t1152 * t947;
t884 = t1146 * t947 - t1152 * t963;
t883 = -t1000 * t1151 - t1262;
t882 = t1151 * t999 - t1239;
t881 = -t1145 * t999 - t1231;
t880 = -t1000 * t1145 + t1258;
t879 = t1047 * t1149 + t1155 * t904;
t878 = -t1047 * t1155 + t1149 * t904;
t877 = -t1147 * t949 + t1153 * t950;
t876 = t1147 * t950 + t1153 * t949;
t875 = -pkin(1) * t951 + t1147 * t1091 + t1153 * t1090 + (t1147 * (t1112 + t1190) - t1153 * (-t1111 + t1183)) * pkin(8) + (-t1153 * t1119 + t1129 * t1147 - t1007) * pkin(2);
t871 = -t1146 * t945 - t1152 * t946;
t870 = t1146 * t1255 - t1152 * t941;
t869 = -t1146 * t946 + t1152 * t945;
t868 = -t1146 * t941 - t1152 * t1255;
t867 = -pkin(8) * t967 - t918;
t866 = -t1145 * t982 - t1231;
t865 = t1151 * t982 - t1239;
t864 = -t1148 * t937 + t1154 * t938;
t863 = -t1147 * t935 + t1153 * t936;
t862 = -t1147 * t933 + t1153 * t934;
t861 = t1147 * t936 + t1153 * t935;
t860 = t1147 * t934 + t1153 * t933;
t859 = t1151 * t970 - t1262;
t858 = t1145 * t970 + t1258;
t857 = t1152 * t892 + t1189;
t856 = t1152 * t889 - t1189;
t855 = t1146 * t892 - t1188;
t854 = t1146 * t889 + t1188;
t853 = -pkin(2) * t1047 + pkin(8) * t969 + t919;
t852 = -pkin(1) * t902 - pkin(2) * t967;
t848 = -pkin(7) * t971 - t1148 * t940 + t1154 * t983;
t847 = t1154 * t919 - t1236;
t846 = t1148 * t919 + t1228;
t845 = pkin(3) * t1255 + pkin(9) * t974 - t1238;
t844 = -pkin(7) * t951 - t1148 * t932 + t1154 * t981;
t843 = -pkin(3) * t941 + pkin(9) * t950 + t1230;
t842 = t1150 * t957 - t1242;
t841 = -t1144 * t958 + t1259;
t840 = t1144 * t957 + t1234;
t839 = t1150 * t958 + t1263;
t836 = -qJD(6) * t992 - t1182;
t833 = -t1048 * t1149 + t1155 * t847;
t832 = t1048 * t1155 + t1149 * t847;
t831 = -t1148 * t909 + t1154 * t911;
t830 = -t1148 * t908 + t1154 * t910;
t829 = -t1144 * t939 - t1234;
t828 = t1150 * t939 - t1242;
t824 = -t1148 * t906 + t1154 * t907;
t823 = t1148 * t907 + t1154 * t906;
t822 = -t1145 * t896 + t1151 * t900;
t821 = -t1145 * t899 - t1151 * t895;
t820 = t1145 * t900 + t1151 * t896;
t819 = -t1145 * t895 + t1151 * t899;
t818 = -t1145 * t893 + t1151 * t894;
t817 = -t1145 * t894 - t1151 * t893;
t816 = t1150 * t912 - t1263;
t815 = t1144 * t912 + t1259;
t814 = -t1146 * t895 + t1152 * t882;
t813 = -t1146 * t899 + t1152 * t880;
t812 = t1146 * t882 + t1152 * t895;
t811 = t1146 * t880 + t1152 * t899;
t810 = -t837 - t959;
t805 = (qJD(6) + t1062) * t992 + t1182;
t804 = -t1147 * t884 + t1153 * t885;
t803 = t1147 * t885 + t1153 * t884;
t802 = t1150 * t837 - t1220 * t992;
t801 = t1144 * t837 + t1219 * t992;
t800 = -t1144 * t836 + t1219 * t990;
t799 = t1150 * t836 + t1220 * t990;
t798 = -t1146 * t900 + t1152 * t866;
t797 = t1146 * t866 + t1152 * t900;
t796 = -t1146 * t896 + t1152 * t859;
t795 = t1146 * t859 + t1152 * t896;
t794 = -t1148 * t876 + t1154 * t877;
t793 = t1148 * t877 + t1154 * t876;
t792 = -t1146 * t993 + t1152 * t820;
t791 = t1146 * t820 + t1152 * t993;
t790 = -pkin(1) * t846 - pkin(2) * t918;
t789 = -t1146 * t956 + t1152 * t821;
t788 = t1146 * t821 + t1152 * t956;
t787 = t1146 * t1168 + t1152 * t818;
t786 = t1146 * t818 - t1152 * t1168;
t785 = -t1147 * t869 + t1153 * t871;
t784 = -t1147 * t868 + t1153 * t870;
t783 = t1147 * t871 + t1153 * t869;
t782 = t1147 * t870 + t1153 * t868;
t781 = -t1149 * t1255 + t1155 * t824;
t780 = t1149 * t824 + t1155 * t1255;
t779 = -t1148 * t861 + t1154 * t863;
t778 = -t1148 * t860 + t1154 * t862;
t777 = -t1147 * t855 + t1153 * t857;
t776 = -t1147 * t854 + t1153 * t856;
t775 = t1147 * t857 + t1153 * t855;
t774 = t1147 * t856 + t1153 * t854;
t771 = t1149 * t941 + t1155 * t794;
t770 = t1149 * t794 - t1155 * t941;
t769 = -pkin(10) * t865 + t1232;
t768 = -pkin(10) * t858 + t1240;
t766 = -pkin(7) * t846 - pkin(8) * t1228 - t1148 * t905;
t765 = pkin(3) * t955 + pkin(9) * t773;
t764 = -t1145 * t840 + t1151 * t842;
t763 = -t1145 * t839 + t1151 * t841;
t762 = -t1145 * t842 - t1151 * t840;
t761 = -t1145 * t841 - t1151 * t839;
t760 = -pkin(8) * t906 - t1147 * t845 + t1153 * t901;
t757 = -pkin(7) * t902 - t1148 * t853 + t1154 * t867;
t756 = -t1145 * t828 + t1151 * t829;
t755 = t1145 * t829 + t1151 * t828;
t754 = -pkin(8) * t876 - t1147 * t843 + t1153 * t886;
t753 = -t1145 * t815 + t1151 * t816;
t752 = t1145 * t816 + t1151 * t815;
t751 = pkin(2) * t1255 + pkin(8) * t907 + t1147 * t901 + t1153 * t845;
t750 = -pkin(9) * t869 - t772;
t749 = -t1147 * t812 + t1153 * t814;
t748 = -t1147 * t811 + t1153 * t813;
t747 = t1147 * t814 + t1153 * t812;
t746 = t1147 * t813 + t1153 * t811;
t745 = -t1144 * t810 - t1150 * t806;
t744 = -t1144 * t1254 - t1150 * t805;
t743 = -t1144 * t806 + t1150 * t810;
t742 = -t1144 * t805 + t1150 * t1254;
t741 = -t1148 * t803 + t1154 * t804;
t740 = -t1145 * t801 + t1151 * t802;
t739 = -t1145 * t802 - t1151 * t801;
t738 = -t1145 * t799 + t1151 * t800;
t737 = -t1145 * t800 - t1151 * t799;
t736 = -pkin(3) * t985 + pkin(9) * t871 + t773;
t735 = -t1147 * t797 + t1153 * t798;
t734 = t1147 * t798 + t1153 * t797;
t733 = -pkin(2) * t941 + pkin(8) * t877 + t1147 * t886 + t1153 * t843;
t732 = -t1147 * t795 + t1153 * t796;
t731 = t1147 * t796 + t1153 * t795;
t730 = -t1147 * t791 + t1153 * t792;
t729 = t1147 * t792 + t1153 * t791;
t728 = -pkin(1) * t823 - pkin(2) * t906 - pkin(3) * t973 + t851;
t727 = -pkin(4) * t865 + t759;
t725 = -pkin(4) * t858 + t758;
t723 = -t1147 * t788 + t1153 * t789;
t722 = t1147 * t789 + t1153 * t788;
t721 = -pkin(11) * t828 + t1235;
t720 = -t1147 * t786 + t1153 * t787;
t719 = t1147 * t787 + t1153 * t786;
t718 = -t1148 * t783 + t1154 * t785;
t717 = -t1148 * t782 + t1154 * t784;
t716 = t1148 * t785 + t1154 * t783;
t715 = t1152 * t740 + t1194;
t714 = t1152 * t738 - t1194;
t713 = t1146 * t740 - t1193;
t712 = t1146 * t738 + t1193;
t711 = -pkin(11) * t815 + t1243;
t707 = t1149 * t985 + t1155 * t718;
t706 = t1149 * t718 - t1155 * t985;
t705 = -t1148 * t775 + t1154 * t777;
t704 = -t1148 * t774 + t1154 * t776;
t703 = -pkin(1) * t793 - pkin(2) * t876 - pkin(3) * t949 + t850;
t702 = -t1146 * t806 + t1152 * t764;
t701 = -t1146 * t810 + t1152 * t763;
t700 = t1146 * t764 + t1152 * t806;
t699 = t1146 * t763 + t1152 * t810;
t698 = t1153 * t773 - t1237;
t697 = t1147 * t773 + t1229;
t696 = t1146 * t1254 + t1152 * t756;
t695 = t1146 * t756 - t1152 * t1254;
t694 = t1146 * t805 + t1152 * t753;
t693 = t1146 * t753 - t1152 * t805;
t692 = -pkin(5) * t1254 + pkin(11) * t829 + t1243;
t689 = -pkin(5) * t805 + pkin(11) * t816 - t1235;
t688 = -t1148 * t747 + t1154 * t749;
t687 = -t1148 * t746 + t1154 * t748;
t686 = -pkin(1) * t716 - pkin(2) * t783 - pkin(3) * t869;
t685 = -t1145 * t743 + t1151 * t745;
t684 = -t1145 * t742 + t1151 * t744;
t683 = -t1145 * t744 - t1151 * t742;
t682 = t1145 * t745 + t1151 * t743;
t681 = -t1148 * t734 + t1154 * t735;
t680 = t1148 * t735 + t1154 * t734;
t679 = t1146 * t826 + t1152 * t691;
t678 = t1146 * t691 - t1152 * t826;
t677 = -t1148 * t731 + t1154 * t732;
t676 = t1148 * t732 + t1154 * t731;
t675 = -pkin(10) * t819 - t690;
t674 = -t1148 * t729 + t1154 * t730;
t673 = -pkin(7) * t823 - t1148 * t751 + t1154 * t760;
t672 = -t1146 * t922 + t1152 * t684;
t671 = t1146 * t684 + t1152 * t922;
t670 = -t1148 * t722 + t1154 * t723;
t669 = t1148 * t723 + t1154 * t722;
t668 = t1146 * t888 + t1152 * t685;
t667 = t1146 * t685 - t1152 * t888;
t666 = -t1148 * t719 + t1154 * t720;
t665 = -pkin(9) * t797 - t1146 * t727 + t1152 * t769;
t662 = t1149 * t865 + t1155 * t681;
t661 = t1149 * t681 - t1155 * t865;
t659 = -pkin(9) * t795 - t1146 * t725 + t1152 * t768;
t658 = -t1147 * t713 + t1153 * t715;
t657 = -t1147 * t712 + t1153 * t714;
t656 = t1147 * t715 + t1153 * t713;
t655 = t1147 * t714 + t1153 * t712;
t654 = t1149 * t858 + t1155 * t677;
t653 = t1149 * t677 - t1155 * t858;
t652 = -pkin(7) * t793 - t1148 * t733 + t1154 * t754;
t651 = -pkin(8) * t783 - t1147 * t736 + t1153 * t750;
t650 = -t1147 * t700 + t1153 * t702;
t649 = -t1147 * t699 + t1153 * t701;
t648 = t1147 * t702 + t1153 * t700;
t647 = t1147 * t701 + t1153 * t699;
t646 = -pkin(3) * t865 + pkin(9) * t798 + t1146 * t769 + t1152 * t727;
t645 = -pkin(2) * t985 + pkin(8) * t785 + t1147 * t750 + t1153 * t736;
t644 = -t1148 * t697 + t1154 * t698;
t643 = t1148 * t698 + t1154 * t697;
t642 = -pkin(3) * t858 + pkin(9) * t796 + t1146 * t768 + t1152 * t725;
t641 = -t1147 * t695 + t1153 * t696;
t640 = t1147 * t696 + t1153 * t695;
t639 = t1149 * t819 + t1155 * t670;
t638 = t1149 * t670 - t1155 * t819;
t637 = -pkin(8) * t697 - pkin(9) * t1229 - t1147 * t765;
t636 = -t1149 * t955 + t1155 * t644;
t635 = t1149 * t644 + t1155 * t955;
t634 = pkin(2) * t955 + pkin(8) * t698 - pkin(9) * t1237 + t1153 * t765;
t633 = -t1147 * t693 + t1153 * t694;
t632 = t1147 * t694 + t1153 * t693;
t631 = -pkin(4) * t682 - pkin(5) * t743;
t630 = -pkin(9) * t788 + t1152 * t675 + t1245 * t819;
t629 = pkin(9) * t789 + t1146 * t675 + t1192 * t819;
t628 = -pkin(4) * t755 - pkin(5) * t828 + t664;
t627 = -pkin(10) * t755 - t1145 * t692 + t1151 * t721;
t626 = -pkin(4) * t752 - pkin(5) * t815 + t663;
t625 = -pkin(10) * t752 - t1145 * t689 + t1151 * t711;
t624 = -t1147 * t678 + t1153 * t679;
t623 = t1147 * t679 + t1153 * t678;
t622 = -t1147 * t671 + t1153 * t672;
t621 = t1147 * t672 + t1153 * t671;
t620 = -pkin(1) * t680 - pkin(2) * t734 - pkin(3) * t797 - pkin(4) * t900 - pkin(10) * t866 - t1240;
t619 = -t1147 * t667 + t1153 * t668;
t618 = t1147 * t668 + t1153 * t667;
t617 = -pkin(1) * t676 - pkin(2) * t731 - pkin(3) * t795 - pkin(4) * t896 - pkin(10) * t859 + t1232;
t616 = -pkin(1) * t643 - pkin(2) * t697 - pkin(3) * t772;
t613 = -t1148 * t656 + t1154 * t658;
t612 = -t1148 * t655 + t1154 * t657;
t611 = -t1148 * t648 + t1154 * t650;
t610 = -t1148 * t647 + t1154 * t649;
t609 = -pkin(9) * t678 + (-pkin(10) * t1152 + t1245) * t690;
t608 = -t1148 * t640 + t1154 * t641;
t607 = t1148 * t641 + t1154 * t640;
t606 = -pkin(5) * t767 + pkin(11) * t615;
t605 = -pkin(11) * t743 - t614;
t604 = -t1148 * t632 + t1154 * t633;
t603 = t1148 * t633 + t1154 * t632;
t602 = -pkin(5) * t888 + pkin(11) * t745 + t615;
t601 = -pkin(8) * t734 - t1147 * t646 + t1153 * t665;
t600 = -pkin(8) * t731 - t1147 * t642 + t1153 * t659;
t599 = -pkin(1) * t669 - pkin(2) * t722 - pkin(3) * t788 - pkin(4) * t956 - pkin(10) * t821 - t691;
t598 = t1149 * t755 + t1155 * t608;
t597 = t1149 * t608 - t1155 * t755;
t596 = -pkin(2) * t865 + pkin(8) * t735 + t1147 * t665 + t1153 * t646;
t595 = -pkin(7) * t716 - t1148 * t645 + t1154 * t651;
t594 = -pkin(2) * t858 + pkin(8) * t732 + t1147 * t659 + t1153 * t642;
t593 = t1149 * t752 + t1155 * t604;
t592 = t1149 * t604 - t1155 * t752;
t591 = pkin(9) * t679 + (-pkin(10) * t1146 + t1192) * t690;
t590 = -pkin(8) * t722 - t1147 * t629 + t1153 * t630;
t589 = -pkin(7) * t643 - t1148 * t634 + t1154 * t637;
t588 = -pkin(2) * t819 + pkin(8) * t723 + t1147 * t630 + t1153 * t629;
t587 = -t1148 * t623 + t1154 * t624;
t586 = t1148 * t624 + t1154 * t623;
t585 = -pkin(9) * t695 - t1146 * t628 + t1152 * t627;
t584 = -t1148 * t621 + t1154 * t622;
t583 = -pkin(9) * t693 - t1146 * t626 + t1152 * t625;
t582 = -t1148 * t618 + t1154 * t619;
t581 = t1148 * t619 + t1154 * t618;
t580 = t1151 * t615 - t1241;
t579 = t1145 * t615 + t1233;
t578 = -pkin(3) * t755 + pkin(9) * t696 + t1146 * t627 + t1152 * t628;
t577 = -pkin(3) * t752 + pkin(9) * t694 + t1146 * t625 + t1152 * t626;
t576 = t1149 * t690 + t1155 * t587;
t575 = t1149 * t587 - t1155 * t690;
t574 = t1146 * t767 + t1152 * t580;
t573 = t1146 * t580 - t1152 * t767;
t572 = t1149 * t682 + t1155 * t582;
t571 = t1149 * t582 - t1155 * t682;
t570 = -pkin(1) * t607 - pkin(2) * t640 - pkin(3) * t695 + pkin(4) * t1254 - pkin(10) * t756 - t1145 * t721 - t1151 * t692;
t569 = -pkin(10) * t682 - t1145 * t602 + t1151 * t605;
t568 = -pkin(4) * t579 - pkin(5) * t614;
t567 = -pkin(7) * t680 - t1148 * t596 + t1154 * t601;
t566 = -pkin(1) * t603 - pkin(2) * t632 - pkin(3) * t693 + pkin(4) * t805 - pkin(10) * t753 - t1145 * t711 - t1151 * t689;
t565 = -pkin(7) * t676 - t1148 * t594 + t1154 * t600;
t564 = -pkin(8) * t623 - t1147 * t591 + t1153 * t609;
t563 = -pkin(1) * t586 - pkin(2) * t623 - pkin(3) * t678 + pkin(4) * t826 - pkin(10) * t691;
t562 = -pkin(2) * t690 + pkin(8) * t624 + t1147 * t609 + t1153 * t591;
t561 = -pkin(7) * t669 - t1148 * t588 + t1154 * t590;
t560 = -pkin(9) * t667 - t1146 * t631 + t1152 * t569;
t559 = -pkin(10) * t579 - pkin(11) * t1233 - t1145 * t606;
t558 = -t1147 * t573 + t1153 * t574;
t557 = t1147 * t574 + t1153 * t573;
t556 = -pkin(8) * t640 - t1147 * t578 + t1153 * t585;
t555 = -pkin(3) * t682 + pkin(9) * t668 + t1146 * t569 + t1152 * t631;
t554 = -pkin(2) * t755 + pkin(8) * t641 + t1147 * t585 + t1153 * t578;
t553 = -pkin(8) * t632 - t1147 * t577 + t1153 * t583;
t552 = -pkin(2) * t752 + pkin(8) * t633 + t1147 * t583 + t1153 * t577;
t551 = -pkin(1) * t581 - pkin(2) * t618 - pkin(3) * t667 + pkin(4) * t888 - pkin(10) * t685 - t1145 * t605 - t1151 * t602;
t550 = -t1148 * t557 + t1154 * t558;
t549 = t1148 * t558 + t1154 * t557;
t548 = -pkin(7) * t586 - t1148 * t562 + t1154 * t564;
t547 = -pkin(9) * t573 - t1146 * t568 + t1152 * t559;
t546 = -pkin(8) * t618 - t1147 * t555 + t1153 * t560;
t545 = -pkin(2) * t682 + pkin(8) * t619 + t1147 * t560 + t1153 * t555;
t544 = -pkin(7) * t607 - t1148 * t554 + t1154 * t556;
t543 = t1149 * t579 + t1155 * t550;
t542 = t1149 * t550 - t1155 * t579;
t541 = -pkin(7) * t603 - t1148 * t552 + t1154 * t553;
t540 = -pkin(3) * t579 + pkin(9) * t574 + t1146 * t559 + t1152 * t568;
t539 = -pkin(1) * t549 - pkin(2) * t557 - pkin(3) * t573 + pkin(4) * t767 - pkin(10) * t580 + pkin(11) * t1241 - t1151 * t606;
t538 = -pkin(7) * t581 - t1148 * t545 + t1154 * t546;
t537 = -pkin(8) * t557 - t1147 * t540 + t1153 * t547;
t536 = -pkin(2) * t579 + pkin(8) * t558 + t1147 * t547 + t1153 * t540;
t535 = -pkin(7) * t549 - t1148 * t536 + t1154 * t537;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1115, -t1116, 0, t1082, 0, 0, 0, 0, 0, 0, t1059, t1060, t1079, t1012, 0, 0, 0, 0, 0, 0, t917, t924, t879, t833, 0, 0, 0, 0, 0, 0, t771, t781, t707, t636, 0, 0, 0, 0, 0, 0, t654, t662, t639, t576, 0, 0, 0, 0, 0, 0, t593, t598, t572, t543; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1116, -t1115, 0, t1081, 0, 0, 0, 0, 0, 0, t1057, t1058, t1078, t1011, 0, 0, 0, 0, 0, 0, t916, t923, t878, t832, 0, 0, 0, 0, 0, 0, t770, t780, t706, t635, 0, 0, 0, 0, 0, 0, t653, t661, t638, t575, 0, 0, 0, 0, 0, 0, t592, t597, t571, t542; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1083, t1084, 0, -t1032, 0, 0, 0, 0, 0, 0, t951, t971, t902, t846, 0, 0, 0, 0, 0, 0, t793, t823, t716, t643, 0, 0, 0, 0, 0, 0, t676, t680, t669, t586, 0, 0, 0, 0, 0, 0, t603, t607, t581, t549; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1116, 0, -t1115, 0, t1173, -t1099, -t1081, -pkin(6) * t1081, t1093 * t1155 - t1177, t1077 * t1155 - t1118 * t1149, t1087 * t1155 + t1148 * t1197, t1092 * t1155 + t1177, t1085 * t1155 + t1136 * t1149, qJDD(2) * t1149 + t1107 * t1155, -pkin(6) * t1057 - t1043 * t1149 + t1049 * t1155, -pkin(6) * t1058 - t1044 * t1149 + t1050 * t1155, -pkin(6) * t1078 + t1032 * t1155, -pkin(6) * t1011 - (pkin(1) * t1149 - pkin(7) * t1155) * t1032, t1155 * t954 - t1185, -t1075 * t1149 + t1155 * t903, -t1021 * t1149 + t1155 * t979, t1155 * t953 + t1185, -t1022 * t1149 + t1155 * t980, t1149 * t1195 + t1155 * t995, -pkin(6) * t916 - t1149 * t875 + t1155 * t844, -pkin(6) * t923 - t1149 * t887 + t1155 * t848, -pkin(6) * t878 - t1149 * t852 + t1155 * t757, -pkin(6) * t832 - t1149 * t790 + t1155 * t766, t1155 * t779 + t1187, -t1009 * t1149 + t1155 * t717, -t1149 * t945 + t1155 * t830, t1155 * t778 - t1187, -t1149 * t946 + t1155 * t831, t1149 * t1181 + t1155 * t864, -pkin(6) * t770 - t1149 * t703 + t1155 * t652, -pkin(6) * t780 - t1149 * t728 + t1155 * t673, -pkin(6) * t706 - t1149 * t686 + t1155 * t595, -pkin(6) * t635 - t1149 * t616 + t1155 * t589, -t1149 * t890 + t1155 * t705, -t1149 * t822 + t1155 * t674, -t1149 * t883 + t1155 * t687, -t1149 * t891 + t1155 * t704, -t1149 * t881 + t1155 * t688, -t1149 * t948 + t1155 * t741, -pkin(6) * t653 - t1149 * t617 + t1155 * t565, -pkin(6) * t661 - t1149 * t620 + t1155 * t567, -pkin(6) * t638 - t1149 * t599 + t1155 * t561, -pkin(6) * t575 - t1149 * t563 + t1155 * t548, -t1149 * t739 + t1155 * t613, -t1149 * t683 + t1155 * t584, -t1149 * t761 + t1155 * t610, -t1149 * t737 + t1155 * t612, -t1149 * t762 + t1155 * t611, -t1149 * t817 + t1155 * t666, -pkin(6) * t592 - t1149 * t566 + t1155 * t541, -pkin(6) * t597 - t1149 * t570 + t1155 * t544, -pkin(6) * t571 - t1149 * t551 + t1155 * t538, -pkin(6) * t542 - t1149 * t539 + t1155 * t535; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1115, 0, t1116, 0, t1099, t1173, t1082, pkin(6) * t1082, t1093 * t1149 + t1176, t1077 * t1149 + t1118 * t1155, t1087 * t1149 - t1148 * t1196, t1092 * t1149 - t1176, t1085 * t1149 - t1136 * t1155, -qJDD(2) * t1155 + t1107 * t1149, pkin(6) * t1059 + t1043 * t1155 + t1049 * t1149, pkin(6) * t1060 + t1044 * t1155 + t1050 * t1149, pkin(6) * t1079 + t1032 * t1149, pkin(6) * t1012 - (-pkin(1) * t1155 - pkin(7) * t1149) * t1032, t1149 * t954 + t1184, t1075 * t1155 + t1149 * t903, t1021 * t1155 + t1149 * t979, t1149 * t953 - t1184, t1022 * t1155 + t1149 * t980, t1149 * t995 - t1155 * t1195, pkin(6) * t917 + t1149 * t844 + t1155 * t875, pkin(6) * t924 + t1149 * t848 + t1155 * t887, pkin(6) * t879 + t1149 * t757 + t1155 * t852, pkin(6) * t833 + t1149 * t766 + t1155 * t790, t1149 * t779 - t1186, t1009 * t1155 + t1149 * t717, t1149 * t830 + t1155 * t945, t1149 * t778 + t1186, t1149 * t831 + t1155 * t946, t1149 * t864 - t1155 * t1181, pkin(6) * t771 + t1149 * t652 + t1155 * t703, pkin(6) * t781 + t1149 * t673 + t1155 * t728, pkin(6) * t707 + t1149 * t595 + t1155 * t686, pkin(6) * t636 + t1149 * t589 + t1155 * t616, t1149 * t705 + t1155 * t890, t1149 * t674 + t1155 * t822, t1149 * t687 + t1155 * t883, t1149 * t704 + t1155 * t891, t1149 * t688 + t1155 * t881, t1149 * t741 + t1155 * t948, pkin(6) * t654 + t1149 * t565 + t1155 * t617, pkin(6) * t662 + t1149 * t567 + t1155 * t620, pkin(6) * t639 + t1149 * t561 + t1155 * t599, pkin(6) * t576 + t1149 * t548 + t1155 * t563, t1149 * t613 + t1155 * t739, t1149 * t584 + t1155 * t683, t1149 * t610 + t1155 * t761, t1149 * t612 + t1155 * t737, t1149 * t611 + t1155 * t762, t1149 * t666 + t1155 * t817, pkin(6) * t593 + t1149 * t541 + t1155 * t566, pkin(6) * t598 + t1149 * t544 + t1155 * t570, pkin(6) * t572 + t1149 * t538 + t1155 * t551, pkin(6) * t543 + t1149 * t535 + t1155 * t539; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1121, t1122, 0, 0, (t1111 + t1183) * t1148, t1110 * t1154 + t1113 * t1148, t1126 * t1154 + t1212, (t1112 - t1190) * t1154, t1128 * t1148 + t1210, 0, pkin(1) * t1113 + pkin(7) * t1086 + t1213, -pkin(1) * t1110 + pkin(7) * t1088 - t1214, pkin(1) * t1117 + pkin(7) * t1114 + t1033, pkin(1) * t1104 + pkin(7) * t1033, t1015 * t1154 + t1016 * t1148, t1148 * t968 + t1154 * t966, t1025 * t1154 + t1027 * t1148, t1013 * t1154 + t1014 * t1148, t1026 * t1154 + t1028 * t1148, t1051 * t1154 + t1052 * t1148, -pkin(1) * t1017 + pkin(7) * t952 + t1148 * t981 + t1154 * t932, -pkin(1) * t1250 + pkin(7) * t972 + t1148 * t983 + t1154 * t940, -pkin(1) * t1047 + pkin(7) * t904 + t1148 * t867 + t1154 * t853, pkin(1) * t1048 + pkin(7) * t847 - pkin(8) * t1236 + t1154 * t905, t1148 * t863 + t1154 * t861, t1148 * t784 + t1154 * t782, t1148 * t910 + t1154 * t908, t1148 * t862 + t1154 * t860, t1148 * t911 + t1154 * t909, t1148 * t938 + t1154 * t937, -pkin(1) * t941 + pkin(7) * t794 + t1148 * t754 + t1154 * t733, pkin(1) * t1255 + pkin(7) * t824 + t1148 * t760 + t1154 * t751, -pkin(1) * t985 + pkin(7) * t718 + t1148 * t651 + t1154 * t645, pkin(1) * t955 + pkin(7) * t644 + t1148 * t637 + t1154 * t634, t1148 * t777 + t1154 * t775, t1148 * t730 + t1154 * t729, t1148 * t748 + t1154 * t746, t1148 * t776 + t1154 * t774, t1148 * t749 + t1154 * t747, t1148 * t804 + t1154 * t803, -pkin(1) * t858 + pkin(7) * t677 + t1148 * t600 + t1154 * t594, -pkin(1) * t865 + pkin(7) * t681 + t1148 * t601 + t1154 * t596, -pkin(1) * t819 + pkin(7) * t670 + t1148 * t590 + t1154 * t588, -pkin(1) * t690 + pkin(7) * t587 + t1148 * t564 + t1154 * t562, t1148 * t658 + t1154 * t656, t1148 * t622 + t1154 * t621, t1148 * t649 + t1154 * t647, t1148 * t657 + t1154 * t655, t1148 * t650 + t1154 * t648, t1148 * t720 + t1154 * t719, -pkin(1) * t752 + pkin(7) * t604 + t1148 * t553 + t1154 * t552, -pkin(1) * t755 + pkin(7) * t608 + t1148 * t556 + t1154 * t554, -pkin(1) * t682 + pkin(7) * t582 + t1148 * t546 + t1154 * t545, -pkin(1) * t579 + pkin(7) * t550 + t1148 * t537 + t1154 * t536;];
tauB_reg  = t1;
