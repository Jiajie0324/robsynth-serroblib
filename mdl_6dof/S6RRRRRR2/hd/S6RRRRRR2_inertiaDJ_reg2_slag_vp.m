% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:35:48
% EndTime: 2019-03-10 03:36:07
% DurationCPUTime: 7.60s
% Computational Cost: add. (18208->444), mult. (38932->722), div. (0->0), fcn. (39391->10), ass. (0->233)
t183 = sin(qJ(4));
t327 = sin(qJ(3));
t329 = cos(qJ(4));
t244 = t329 * t327;
t330 = cos(qJ(3));
t346 = (qJD(3) * (t183 * t330 + t244) + qJD(4) * t244) * pkin(2);
t184 = sin(qJ(2));
t333 = -pkin(8) - pkin(7);
t248 = t333 * t330;
t186 = cos(qJ(2));
t273 = t327 * t186;
t119 = t184 * t248 + t273 * t333;
t221 = -t184 * t330 - t273;
t204 = pkin(9) * t221 + t119;
t247 = t333 * t327;
t149 = t184 * t247;
t277 = t330 * t186;
t121 = -t277 * t333 + t149;
t274 = t327 * t184;
t222 = t274 - t277;
t208 = -pkin(9) * t222 + t121;
t63 = t183 * t208 - t204 * t329;
t288 = t330 * pkin(2);
t173 = t288 + pkin(3);
t263 = t330 * qJD(3);
t253 = pkin(2) * t263;
t266 = qJD(4) * t329;
t267 = qJD(3) * t327;
t102 = -t173 * t266 - t329 * t253 + (qJD(4) * t327 + t267) * t183 * pkin(2);
t182 = sin(qJ(5));
t179 = t182 ^ 2;
t185 = cos(qJ(5));
t180 = t185 ^ 2;
t342 = t179 + t180;
t255 = t342 * t102;
t231 = qJD(2) * t247;
t232 = qJD(2) * t248;
t335 = -t186 * (qJD(2) * t330 + t263) + qJD(2) * t274 + t184 * t267;
t343 = t121 * qJD(3);
t193 = pkin(9) * t335 - t184 * t231 + t186 * t232 - t343;
t213 = t221 * qJD(3);
t198 = qJD(2) * t221 + t213;
t75 = -qJD(3) * t119 - t184 * t232 - t186 * t231;
t195 = pkin(9) * t198 - t75;
t188 = t63 * qJD(4) - t183 * t193 - t329 * t195;
t211 = t329 * t222;
t110 = -t183 * t221 + t211;
t214 = t183 * t222;
t111 = -t221 * t329 - t214;
t175 = -t186 * pkin(2) - pkin(1);
t127 = pkin(3) * t222 + t175;
t200 = t110 * pkin(4) - t111 * pkin(10) + t127;
t345 = -qJD(5) * t200 + t188;
t196 = t183 * t204 + t208 * t329;
t293 = qJD(4) * t183;
t50 = qJD(4) * t211 - t183 * t198 - t221 * t293 + t329 * t335;
t51 = -qJD(4) * t214 - t183 * t335 - t198 * t329 - t221 * t266;
t325 = t184 * pkin(2);
t98 = -pkin(3) * t213 + (-pkin(3) * t221 + t325) * qJD(2);
t344 = -t51 * pkin(4) - t50 * pkin(10) + qJD(5) * t196 - t98;
t296 = t179 - t180;
t337 = t296 * qJD(5);
t328 = cos(qJ(6));
t261 = t328 * qJD(6);
t341 = qJD(5) * t328 + t261;
t177 = qJD(5) * t185;
t312 = t182 * t50;
t340 = t111 * t177 - t312;
t291 = qJD(5) * t182;
t272 = t111 * t291;
t310 = t185 * t50;
t224 = t272 + t310;
t275 = t328 * t185;
t181 = sin(qJ(6));
t302 = t181 * t182;
t339 = t275 - t302;
t35 = -t182 * t196 + t185 * t200;
t36 = t182 * t200 + t185 * t196;
t338 = -t182 * t35 + t185 * t36;
t336 = qJD(5) + qJD(6);
t332 = -pkin(11) - pkin(10);
t331 = t51 * pkin(5);
t326 = pkin(3) * t183;
t324 = t185 * pkin(5);
t25 = qJD(4) * t196 + t183 * t195 - t193 * t329;
t323 = t63 * t25;
t136 = pkin(2) * t244 + t173 * t183;
t132 = pkin(10) + t136;
t322 = -pkin(11) - t132;
t171 = pkin(10) + t326;
t321 = -pkin(11) - t171;
t276 = t328 * t182;
t147 = t181 * t185 + t276;
t114 = t336 * t147;
t20 = pkin(5) * t340 + t25;
t304 = t111 * t182;
t44 = pkin(5) * t304 + t63;
t320 = t114 * t44 - t20 * t339;
t113 = -t185 * t341 + t302 * t336;
t319 = -t113 * t44 + t147 * t20;
t318 = t177 * t63 + t182 * t25;
t286 = t327 * pkin(2);
t135 = t173 * t329 - t183 * t286;
t131 = -pkin(4) - t135;
t126 = t131 - t324;
t103 = t173 * t293 + t346;
t176 = pkin(5) * t291;
t89 = t176 + t103;
t317 = t114 * t126 - t339 * t89;
t316 = -t113 * t126 + t147 * t89;
t315 = pkin(3) * qJD(4);
t314 = t111 * t50;
t309 = t63 * t103;
t282 = pkin(3) * t293;
t151 = t176 + t282;
t287 = t329 * pkin(3);
t172 = -t287 - pkin(4);
t155 = t172 - t324;
t308 = t114 * t155 - t151 * t339;
t307 = -t113 * t155 + t147 * t151;
t306 = t103 * t182 + t131 * t177;
t305 = t102 * t182;
t303 = t111 * t185;
t301 = t185 * t102;
t174 = -pkin(4) - t324;
t300 = t114 * t174 - t176 * t339;
t299 = -t113 * t174 + t147 * t176;
t251 = pkin(3) * t266;
t134 = t342 * t251;
t298 = t172 * t177 + t182 * t282;
t295 = qJD(2) * t184;
t294 = qJD(2) * t186;
t290 = qJD(6) * t181;
t289 = -0.2e1 * pkin(1) * qJD(2);
t43 = 0.2e1 * t110 * t51;
t285 = pkin(4) * t291;
t284 = pkin(4) * t177;
t283 = pkin(2) * t295;
t281 = pkin(5) * t290;
t280 = t182 * t310;
t279 = t181 * t332;
t278 = t111 * t302;
t56 = t63 * t291;
t270 = t182 * t177;
t269 = t184 * t294;
t191 = t110 * pkin(5) - pkin(11) * t303 + t35;
t189 = t328 * t191;
t29 = -pkin(11) * t304 + t36;
t16 = -t181 * t29 + t189;
t190 = t181 * t191;
t17 = t29 * t328 + t190;
t11 = t182 * t345 - t185 * t344;
t187 = pkin(11) * t224 + t11 + t331;
t10 = t182 * t344 + t185 * t345;
t192 = -pkin(11) * t340 - t10;
t3 = -qJD(6) * t189 - t181 * t187 - t192 * t328 + t29 * t290;
t4 = -qJD(6) * t190 - t181 * t192 + t187 * t328 - t261 * t29;
t268 = t113 * t16 - t114 * t17 - t147 * t4 - t3 * t339;
t265 = t182 * t321;
t264 = t322 * t182;
t260 = qJD(5) * t322;
t259 = qJD(5) * t321;
t178 = t185 * pkin(11);
t117 = t132 * t185 + t178;
t219 = -t182 * t260 + t301;
t220 = t185 * t260 + t305;
t229 = t328 * t264;
t32 = -qJD(6) * t229 + t117 * t290 - t181 * t220 + t219 * t328;
t78 = t117 * t328 + t181 * t264;
t33 = -qJD(6) * t78 + t181 * t219 + t220 * t328;
t77 = -t181 * t117 + t229;
t258 = t113 * t77 - t114 * t78 - t147 * t33 - t32 * t339;
t142 = t171 * t185 + t178;
t228 = t328 * t265;
t104 = -t142 * t181 + t228;
t243 = t181 * t265;
t105 = t142 * t328 + t243;
t239 = t185 * t251;
t209 = t182 * t259 + t239;
t240 = t182 * t251;
t210 = t185 * t259 - t240;
t52 = -qJD(6) * t228 + t142 * t290 - t181 * t210 - t209 * t328;
t53 = -qJD(6) * t243 - t142 * t261 - t181 * t209 + t210 * t328;
t257 = t104 * t113 - t105 * t114 - t147 * t53 - t339 * t52;
t156 = pkin(10) * t185 + t178;
t246 = t332 * t328;
t237 = t182 * t246;
t118 = -t181 * t156 + t237;
t249 = t182 * t279;
t120 = t156 * t328 + t249;
t73 = t156 * t290 - t177 * t279 - t237 * t336;
t74 = -t120 * qJD(6) + (t185 * t246 - t249) * qJD(5);
t256 = t113 * t118 - t114 * t120 - t147 * t74 - t339 * t73;
t124 = t131 * t291;
t254 = -t103 * t185 + t124;
t252 = pkin(2) * t267;
t250 = pkin(5) * t261;
t109 = t111 ^ 2;
t245 = t109 * t270;
t242 = t182 * t36 + t185 * t35;
t235 = t102 * t110 + t103 * t111;
t234 = t110 * t132 - t111 * t131;
t233 = t110 * t171 - t111 * t172;
t152 = t172 * t291;
t227 = -t185 * t282 + t152;
t226 = t110 * t291 - t185 * t51;
t223 = t342 * t329;
t217 = (-t110 * t329 + t111 * t183) * qJD(4);
t215 = t175 * t221;
t212 = -t131 * t50 - t132 * t51 + t235;
t5 = -qJD(5) * t242 - t10 * t185 - t11 * t182;
t202 = pkin(3) * t217 - t171 * t51 - t172 * t50;
t163 = -0.2e1 * t270;
t162 = 0.2e1 * t270;
t145 = -0.2e1 * t337;
t87 = -0.2e1 * t147 * t113;
t86 = -0.2e1 * t339 * t114;
t76 = -t343 + (t186 * t248 - t149) * qJD(2);
t66 = t111 * t275 - t278;
t65 = t147 * t111;
t60 = -0.2e1 * t113 * t339 - 0.2e1 * t114 * t147;
t49 = (t328 * t113 - t114 * t181 + (t147 * t181 + t328 * t339) * qJD(6)) * pkin(5);
t42 = t110 * t177 + t182 * t51;
t38 = -t110 * t114 + t339 * t51;
t37 = -t110 * t113 + t147 * t51;
t34 = t111 * t337 + t280;
t27 = -0.4e1 * t111 * t270 + t296 * t50;
t22 = -t50 * t276 - t181 * t272 - qJD(6) * t278 + (t111 * t341 - t181 * t50) * t185;
t21 = t111 * t114 + t339 * t50;
t15 = t114 * t65 - t22 * t339;
t14 = -t113 * t66 - t147 * t21;
t6 = t113 * t65 - t114 * t66 - t147 * t22 - t21 * t339;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t269, 0.2e1 * (-t184 ^ 2 + t186 ^ 2) * qJD(2), 0, -0.2e1 * t269, 0, 0, t184 * t289, t186 * t289, 0, 0, 0.2e1 * t221 * t335, -0.2e1 * t198 * t221 + 0.2e1 * t222 * t335, 0, -0.2e1 * t222 * t198, 0, 0, -0.2e1 * qJD(3) * t215 + 0.2e1 * (t222 * t325 - t215) * qJD(2), -0.2e1 * t175 * t335 - 0.2e1 * t221 * t283, 0.2e1 * t119 * t335 + 0.2e1 * t121 * t198 + 0.2e1 * t221 * t76 + 0.2e1 * t222 * t75, 0.2e1 * t119 * t76 - 0.2e1 * t121 * t75 + 0.2e1 * t175 * t283, -0.2e1 * t314, 0.2e1 * t110 * t50 - 0.2e1 * t111 * t51, 0, t43, 0, 0, 0.2e1 * t110 * t98 + 0.2e1 * t127 * t51, 0.2e1 * t111 * t98 - 0.2e1 * t127 * t50, 0.2e1 * t110 * t188 + 0.2e1 * t25 * t111 - 0.2e1 * t196 * t51 - 0.2e1 * t63 * t50, 0.2e1 * t127 * t98 - 0.2e1 * t188 * t196 + 0.2e1 * t323, -0.2e1 * t180 * t314 - 0.2e1 * t245, 0.2e1 * t109 * t337 + 0.4e1 * t111 * t280, -0.2e1 * t110 * t224 + 0.2e1 * t303 * t51, -0.2e1 * t179 * t314 + 0.2e1 * t245, -0.2e1 * t110 * t340 - 0.2e1 * t304 * t51, t43, 0.2e1 * t11 * t110 + 0.2e1 * t111 * t318 - 0.2e1 * t312 * t63 + 0.2e1 * t35 * t51, -0.2e1 * t63 * t310 + 0.2e1 * t10 * t110 - 0.2e1 * t36 * t51 + 0.2e1 * (t25 * t185 - t56) * t111, 0.2e1 * t242 * t50 + 0.2e1 * (-qJD(5) * t338 + t10 * t182 - t11 * t185) * t111, -0.2e1 * t10 * t36 + 0.2e1 * t11 * t35 + 0.2e1 * t323, -0.2e1 * t66 * t21, 0.2e1 * t21 * t65 - 0.2e1 * t22 * t66, -0.2e1 * t110 * t21 + 0.2e1 * t51 * t66, 0.2e1 * t65 * t22, -0.2e1 * t110 * t22 - 0.2e1 * t51 * t65, t43, 0.2e1 * t110 * t4 + 0.2e1 * t16 * t51 + 0.2e1 * t20 * t65 + 0.2e1 * t22 * t44, 0.2e1 * t110 * t3 - 0.2e1 * t17 * t51 + 0.2e1 * t20 * t66 - 0.2e1 * t21 * t44, 0.2e1 * t16 * t21 - 0.2e1 * t17 * t22 + 0.2e1 * t3 * t65 - 0.2e1 * t4 * t66, 0.2e1 * t16 * t4 - 0.2e1 * t17 * t3 + 0.2e1 * t20 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294, 0, -t295, 0, -pkin(7) * t294, pkin(7) * t295, 0, 0, 0, 0, -t335, 0, t198, 0, t76, t75, t198 * t286 - t221 * t252 - t222 * t253 + t288 * t335 (-t75 * t327 + t330 * t76 + (-t119 * t327 + t121 * t330) * qJD(3)) * pkin(2), 0, 0, -t50, 0, -t51, 0, -t25, t188, t135 * t50 - t136 * t51 + t235, -t102 * t196 - t25 * t135 - t136 * t188 + t309, -t34, t27, t42, t34, -t226, 0, t56 + (-qJD(5) * t234 - t25) * t185 + t212 * t182, t185 * t212 + t234 * t291 + t318, t5, -t102 * t338 + t131 * t25 + t132 * t5 + t309, t14, t6, t37, t15, t38, 0, t110 * t33 + t126 * t22 + t51 * t77 + t65 * t89 + t320, t110 * t32 - t126 * t21 - t51 * t78 + t66 * t89 + t319, t21 * t77 - t22 * t78 + t32 * t65 - t33 * t66 + t268, t126 * t20 + t16 * t33 - t17 * t32 - t3 * t78 + t4 * t77 + t44 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t252, -0.2e1 * t253, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t103, 0.2e1 * t102, 0, -0.2e1 * t102 * t136 - 0.2e1 * t103 * t135, t162, t145, 0, t163, 0, 0, 0.2e1 * t254, 0.2e1 * t306, -0.2e1 * t255, 0.2e1 * t103 * t131 - 0.2e1 * t132 * t255, t87, t60, 0, t86, 0, 0, 0.2e1 * t317, 0.2e1 * t316, 0.2e1 * t258, 0.2e1 * t126 * t89 - 0.2e1 * t32 * t78 + 0.2e1 * t33 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t335, 0, t198, 0, t76, t75, 0, 0, 0, 0, -t50, 0, -t51, 0, -t25, t188 (-t183 * t51 + t329 * t50 + t217) * pkin(3), -t188 * t326 + t196 * t251 - t25 * t287 + t282 * t63, -t34, t27, t42, t34, -t226, 0, t56 + (-qJD(5) * t233 - t25) * t185 + t202 * t182, t185 * t202 + t233 * t291 + t318, t5, t25 * t172 + (t63 * t183 + t329 * t338) * t315 + t5 * t171, t14, t6, t37, t15, t38, 0, t104 * t51 + t110 * t53 + t151 * t65 + t155 * t22 + t320, -t105 * t51 + t110 * t52 + t151 * t66 - t155 * t21 + t319, t104 * t21 - t105 * t22 + t52 * t65 - t53 * t66 + t268, t104 * t4 - t105 * t3 + t151 * t44 + t155 * t20 + t16 * t53 - t17 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t252, -t253, 0, 0, 0, 0, 0, 0, 0, 0 (-pkin(3) - t173) * t293 - t346, -t251 + t102, 0 (-t329 * t103 - t102 * t183 + (-t135 * t183 + t136 * t329) * qJD(4)) * pkin(3), t162, t145, 0, t163, 0, 0, t124 + t152 + (-t103 - t282) * t185, t298 + t306, t134 - t255, t103 * t172 - t171 * t255 + (t131 * t183 + t132 * t223) * t315, t87, t60, 0, t86, 0, 0, t308 + t317, t307 + t316, t257 + t258, t104 * t33 - t105 * t32 + t126 * t151 + t155 * t89 - t52 * t78 + t53 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t282, -0.2e1 * t251, 0, 0, t162, t145, 0, t163, 0, 0, 0.2e1 * t227, 0.2e1 * t298, 0.2e1 * t134, 0.2e1 * (t171 * t223 + t172 * t183) * t315, t87, t60, 0, t86, 0, 0, 0.2e1 * t308, 0.2e1 * t307, 0.2e1 * t257, 0.2e1 * t104 * t53 - 0.2e1 * t105 * t52 + 0.2e1 * t151 * t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, 0, -t51, 0, -t25, t188, 0, 0, -t34, t27, t42, t34, -t226, 0, t56 + (pkin(4) * t50 - pkin(10) * t51) * t182 + (-t25 + (-pkin(4) * t111 - pkin(10) * t110) * qJD(5)) * t185, pkin(4) * t224 + pkin(10) * t226 + t318, t5, -pkin(4) * t25 + pkin(10) * t5, t14, t6, t37, t15, t38, 0, t110 * t74 + t118 * t51 + t174 * t22 + t176 * t65 + t320, t110 * t73 - t120 * t51 - t174 * t21 + t176 * t66 + t319, t118 * t21 - t120 * t22 + t65 * t73 - t66 * t74 + t268, t118 * t4 - t120 * t3 + t16 * t74 - t17 * t73 + t174 * t20 + t176 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, t102, 0, 0, t162, t145, 0, t163, 0, 0, t254 - t285, -t284 + t306, -t255, -pkin(4) * t103 - pkin(10) * t255, t87, t60, 0, t86, 0, 0, t300 + t317, t299 + t316, t256 + t258, t118 * t33 - t120 * t32 + t126 * t176 + t174 * t89 - t73 * t78 + t74 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t282, -t251, 0, 0, t162, t145, 0, t163, 0, 0, t227 - t285, -t284 + t298, t134 (-pkin(4) * t183 + pkin(10) * t223) * t315, t87, t60, 0, t86, 0, 0, t300 + t308, t299 + t307, t256 + t257, t104 * t74 - t105 * t73 + t118 * t53 - t120 * t52 + t151 * t174 + t155 * t176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162, t145, 0, t163, 0, 0, -0.2e1 * t285, -0.2e1 * t284, 0, 0, t87, t60, 0, t86, 0, 0, 0.2e1 * t300, 0.2e1 * t299, 0.2e1 * t256, 0.2e1 * t118 * t74 - 0.2e1 * t120 * t73 + 0.2e1 * t174 * t176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t224, 0, -t340, t51, t11, t10, 0, 0, 0, 0, -t21, 0, -t22, t51, -t110 * t281 + t328 * t331 + t4 (-t110 * t261 - t181 * t51) * pkin(5) + t3 (t328 * t21 - t181 * t22 + (t181 * t66 - t328 * t65) * qJD(6)) * pkin(5) (t328 * t4 - t181 * t3 + (-t16 * t181 + t17 * t328) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, 0, -t291, 0, -t132 * t177 + t305, t132 * t291 + t301, 0, 0, 0, 0, -t113, 0, -t114, 0, t33, t32, t49 (t328 * t33 - t181 * t32 + (-t181 * t77 + t328 * t78) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, 0, -t291, 0, -t171 * t177 - t240, t171 * t291 - t239, 0, 0, 0, 0, -t113, 0, -t114, 0, t53, t52, t49 (t328 * t53 - t181 * t52 + (-t104 * t181 + t105 * t328) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, 0, -t291, 0, -pkin(10) * t177, pkin(10) * t291, 0, 0, 0, 0, -t113, 0, -t114, 0, t74, t73, t49 (t328 * t74 - t181 * t73 + (-t118 * t181 + t120 * t328) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t281, -0.2e1 * t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, 0, -t22, t51, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113, 0, -t114, 0, t33, t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113, 0, -t114, 0, t53, t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113, 0, -t114, 0, t74, t73, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t281, -t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
