% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:40
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPRP4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPRP4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 08:39:41
% EndTime: 2019-03-09 08:39:55
% DurationCPUTime: 4.86s
% Computational Cost: add. (5425->476), mult. (13421->618), div. (0->0), fcn. (8947->6), ass. (0->249)
t203 = cos(qJ(2));
t289 = qJD(1) * t203;
t182 = qJD(5) + t289;
t198 = sin(pkin(9));
t202 = sin(qJ(2));
t290 = qJD(1) * t202;
t267 = t198 * t290;
t199 = cos(pkin(9));
t278 = t199 * qJD(2);
t139 = -t267 + t278;
t265 = t199 * t290;
t286 = qJD(2) * t198;
t140 = t265 + t286;
t201 = sin(qJ(5));
t327 = cos(qJ(5));
t87 = -t201 * t139 + t327 * t140;
t314 = t87 * t182;
t269 = t203 * t327;
t245 = qJD(1) * t269;
t228 = qJD(2) * t245;
t277 = qJD(1) * qJD(2);
t259 = t203 * t277;
t243 = t199 * t259;
t45 = qJD(5) * t87 - t198 * t228 + t201 * t243;
t347 = t45 - t314;
t196 = t202 ^ 2;
t197 = t203 ^ 2;
t251 = qJD(1) * (t196 - 0.2e1 * t197);
t346 = (t139 * t202 - t198 * t251) * qJD(2);
t329 = t87 ^ 2;
t194 = t198 ^ 2;
t195 = t199 ^ 2;
t312 = t139 * t199;
t345 = (qJD(2) * (t194 - t195) - t140 * t198 + t312) * t289;
t284 = qJD(2) * t203;
t344 = (t198 * (t140 + 0.2e1 * t265) - t312) * t284;
t260 = qJD(5) * t327;
t279 = qJD(5) * t201;
t127 = t198 * t260 - t199 * t279;
t264 = t199 * t289;
t297 = -t198 * t245 + t201 * t264 - t127;
t143 = t201 * t198 + t327 * t199;
t126 = t143 * qJD(5);
t215 = t203 * t143;
t296 = qJD(1) * t215 + t126;
t313 = qJ(3) * t202;
t156 = -pkin(2) * t203 - pkin(1) - t313;
t132 = t156 * qJD(1);
t187 = pkin(7) * t289;
t165 = qJD(2) * qJ(3) + t187;
t92 = t132 * t199 - t198 * t165;
t74 = pkin(3) * t289 + qJD(4) - t92;
t43 = pkin(4) * t289 - pkin(8) * t140 + t74;
t93 = t198 * t132 + t199 * t165;
t77 = -qJ(4) * t289 + t93;
t50 = -pkin(8) * t139 + t77;
t17 = -t201 * t50 + t327 * t43;
t303 = t199 * t203;
t276 = pkin(8) * t303;
t328 = -pkin(3) - pkin(4);
t235 = pkin(2) * t202 - qJ(3) * t203;
t124 = qJD(2) * t235 - t202 * qJD(3);
t114 = t124 * qJD(1);
t186 = pkin(7) * t290;
t153 = (qJD(3) - t186) * qJD(2);
t71 = t114 * t199 - t198 * t153;
t40 = (t328 * t202 - t276) * t277 - t71;
t258 = t202 * t277;
t72 = t198 * t114 + t199 * t153;
t272 = qJ(4) * t258 + t72;
t41 = (pkin(8) * t286 - qJD(4)) * t289 + t272;
t223 = -t201 * t40 - t43 * t260 + t279 * t50 - t327 * t41;
t343 = -t17 * t182 - t223;
t213 = t245 + t260;
t222 = t327 * t139 + t201 * t140;
t341 = t222 ^ 2;
t340 = -0.2e1 * t277;
t324 = -pkin(8) + qJ(3);
t161 = t324 * t198;
t162 = t324 * t199;
t102 = t201 * t161 + t327 * t162;
t268 = t327 * t198;
t282 = qJD(3) * t199;
t271 = -pkin(7) * t198 - pkin(3);
t212 = -t276 + (-pkin(4) + t271) * t202;
t147 = t235 * qJD(1);
t305 = t199 * t147;
t61 = qJD(1) * t212 - t305;
t128 = t198 * t147;
t184 = qJ(4) * t290;
t304 = t199 * t202;
t307 = t198 * t203;
t219 = -pkin(7) * t304 + pkin(8) * t307;
t75 = qJD(1) * t219 + t128 + t184;
t321 = -qJD(3) * t268 + qJD(5) * t102 + t327 * t61 + (t282 - t75) * t201;
t266 = t198 * t289;
t281 = qJD(4) * t198;
t295 = qJ(4) * t264 - t187;
t252 = -t328 * t266 + t281 - t295;
t339 = t182 * t222;
t137 = t140 ^ 2;
t337 = -t139 ^ 2 - t137;
t280 = qJD(4) * t203;
t285 = qJD(2) * t202;
t336 = qJ(4) * t285 - t280;
t144 = -t201 * t199 + t268;
t119 = t144 * t202;
t261 = qJD(2) * t327;
t263 = t203 * t278;
t65 = t126 * t202 + t201 * t263 - t261 * t307;
t334 = -t182 * t65 - t203 * t45 + (-qJD(1) * t119 + t222) * t285;
t333 = qJD(1) * (t182 * t269 - t201 * t285) + t140 * t87 + t182 * t260;
t178 = pkin(7) * t307;
t193 = t203 * pkin(3);
t78 = pkin(4) * t203 + t178 + t193 + (-pkin(8) * t202 - t156) * t199;
t179 = pkin(7) * t303;
t111 = t198 * t156 + t179;
t104 = -qJ(4) * t203 + t111;
t308 = t198 * t202;
t90 = pkin(8) * t308 + t104;
t318 = t201 * t78 + t327 * t90;
t306 = t199 * t124;
t54 = qJD(2) * t212 - t306;
t116 = t198 * t124;
t55 = qJD(2) * t219 + t116 + t336;
t9 = -qJD(5) * t318 - t201 * t55 + t327 * t54;
t331 = t297 * t182 + (qJD(2) * t143 - t222) * t290;
t168 = t198 * t259;
t44 = t139 * t260 + t140 * t279 - t201 * t168 - t199 * t228;
t330 = t143 * t44 - t144 * t45 + t222 * t296 + t297 * t87;
t200 = qJD(2) * pkin(2);
t155 = qJD(3) + t186 - t200;
t68 = -t139 * pkin(3) - t140 * qJ(4) + t155;
t48 = pkin(4) * t139 - t68;
t16 = pkin(5) * t222 - qJ(6) * t87 + t48;
t326 = t16 * t87;
t325 = t87 * t222;
t24 = t201 * t61 + t327 * t75;
t21 = -qJ(6) * t290 + t24;
t221 = t327 * t161 - t201 * t162;
t58 = qJD(3) * t143 + qJD(5) * t221;
t323 = -t21 + t58;
t322 = pkin(5) * t290 - t321;
t320 = t24 - t58;
t319 = pkin(5) * t297 - qJ(6) * t296 + qJD(6) * t144 - t252;
t316 = t202 * t74;
t315 = t202 * t77;
t310 = t182 * t201;
t205 = qJD(1) ^ 2;
t309 = t197 * t205;
t301 = t203 * t205;
t204 = qJD(2) ^ 2;
t300 = t204 * t202;
t299 = t204 * t203;
t298 = qJD(6) - t17;
t294 = -qJ(4) * t263 - qJD(4) * t304;
t291 = t196 - t197;
t288 = qJD(2) * t221;
t287 = qJD(2) * t102;
t283 = qJD(3) * t140;
t154 = -t199 * pkin(3) - t198 * qJ(4) - pkin(2);
t275 = pkin(7) * t285;
t274 = -t329 + t341;
t273 = t198 * t309;
t270 = pkin(3) * t198 + pkin(7);
t257 = t201 * t41 + t50 * t260 + t43 * t279 - t327 * t40;
t256 = -t155 - t200;
t255 = pkin(1) * t340;
t110 = t156 * t199 - t178;
t129 = t199 * pkin(4) - t154;
t250 = -t139 + t278;
t249 = -t140 + t286;
t109 = pkin(3) * t266 - t295;
t248 = t109 + t281;
t181 = pkin(7) * t259;
t62 = pkin(3) * t168 - qJ(4) * t243 - t140 * qJD(4) + t181;
t247 = -t102 * t45 + t221 * t44 - t222 * t58;
t244 = qJ(6) * t258;
t242 = t203 * t258;
t241 = t328 * t198 - pkin(7);
t180 = pkin(5) * t258;
t2 = t180 + t257;
t240 = t202 * t271;
t239 = t341 + t329;
t238 = -t140 * t289 + t168;
t236 = -t119 * t45 + t222 * t65;
t232 = pkin(4) * t168 + t62;
t230 = qJD(1) * t250;
t229 = qJD(1) * t249;
t107 = -pkin(7) * t265 + t128;
t99 = -t199 * t275 + t116;
t227 = -t139 * t198 * t284 + t194 * t242;
t18 = t201 * t43 + t327 * t50;
t226 = t18 * t182 - t257;
t30 = -t201 * t90 + t327 * t78;
t8 = t201 * t54 + t78 * t260 - t279 * t90 + t327 * t55;
t220 = t45 * t143 - t222 * t297;
t216 = t230 * t307;
t175 = qJ(4) * t304;
t103 = t202 * t241 + t175;
t211 = t44 + t339;
t120 = t143 * t202;
t66 = qJD(2) * t215 + t127 * t202;
t210 = -t119 * t44 - t120 * t45 - t222 * t66 - t65 * t87;
t73 = t241 * t284 - t294;
t5 = pkin(5) * t45 + qJ(6) * t44 - qJD(6) * t87 - t232;
t209 = -t201 * t45 - t213 * t222 + t87 * t310 + t327 * t44;
t207 = -t182 * t279 - t140 * t222 + (-t202 * t261 - t203 * t310) * qJD(1);
t206 = -t45 - t314;
t177 = t202 * t301;
t167 = qJD(3) * t266;
t166 = -0.2e1 * t242;
t152 = t182 * t290;
t122 = t139 * t289;
t121 = t139 * t282;
t117 = t202 * t270 - t175;
t115 = (-t182 - t289) * t285;
t106 = pkin(7) * t267 + t305;
t105 = -t110 + t193;
t100 = -t122 + t243;
t98 = t198 * t275 + t306;
t97 = qJD(1) * t240 - t305;
t96 = t107 + t184;
t95 = t270 * t284 + t294;
t91 = (t140 * t199 + t195 * t290) * t284;
t89 = t229 * t303;
t82 = qJD(2) * t240 - t306;
t81 = t199 * t309 + t202 * t229;
t79 = (t140 * t202 + t199 * t251) * qJD(2);
t70 = t99 + t336;
t60 = pkin(5) * t143 - qJ(6) * t144 + t129;
t57 = -pkin(3) * t258 - t71;
t49 = -qJD(1) * t280 + t272;
t35 = -pkin(5) * t119 - qJ(6) * t120 + t103;
t32 = pkin(5) * t87 + qJ(6) * t222;
t27 = -t203 * pkin(5) - t30;
t26 = qJ(6) * t203 + t318;
t20 = -t44 + t339;
t19 = -t296 * t182 + (-qJD(2) * t144 + t87) * t290;
t15 = t182 * qJ(6) + t18;
t14 = -t182 * pkin(5) + t298;
t13 = pkin(5) * t65 - qJ(6) * t66 - qJD(6) * t120 + t73;
t12 = -t120 * t44 + t66 * t87;
t11 = t66 * t182 - t44 * t203 + (-qJD(1) * t120 - t87) * t285;
t10 = -t44 * t144 - t296 * t87;
t7 = pkin(5) * t285 - t9;
t6 = -qJ(6) * t285 + qJD(6) * t203 + t8;
t1 = qJD(6) * t182 - t223 - t244;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t242, t291 * t340, t299, t166, -t300, 0, -pkin(7) * t299 + t202 * t255, pkin(7) * t300 + t203 * t255, 0, 0, t91, -t344, t79, t227, t346, t166 (-qJD(1) * t98 - t71) * t203 + ((-pkin(7) * t139 + t155 * t198) * t203 + (t92 + (t110 + 0.2e1 * t178) * qJD(1)) * t202) * qJD(2) (qJD(1) * t99 + t72) * t203 + ((pkin(7) * t140 + t155 * t199) * t203 + (-t93 + (-t111 + 0.2e1 * t179) * qJD(1)) * t202) * qJD(2), t139 * t99 - t140 * t98 + (-t198 * t72 - t199 * t71) * t202 + (-t198 * t93 - t199 * t92 + (-t110 * t199 - t111 * t198) * qJD(1)) * t284, t110 * t71 + t111 * t72 + t92 * t98 + t93 * t99 + (t155 + t186) * pkin(7) * t284, t91, t79, t344, t166, -t346, t227, t62 * t308 - t139 * t95 + (qJD(1) * t82 + t57) * t203 + (t68 * t307 - t316 + (-t105 * t202 + t117 * t307) * qJD(1)) * qJD(2), t139 * t70 + t140 * t82 + (-t198 * t49 + t199 * t57) * t202 + (-t198 * t77 + t199 * t74 + (-t104 * t198 + t105 * t199) * qJD(1)) * t284, -t62 * t304 - t140 * t95 + (-qJD(1) * t70 - t49) * t203 + (-t68 * t303 + t315 + (t104 * t202 - t117 * t303) * qJD(1)) * qJD(2), t104 * t49 + t105 * t57 + t117 * t62 + t68 * t95 + t70 * t77 + t74 * t82, t12, t210, t11, t236, t334, t115, t103 * t45 + t119 * t232 + t182 * t9 - t203 * t257 + t48 * t65 + t73 * t222 + (-qJD(1) * t30 - t17) * t285, -t103 * t44 - t120 * t232 - t182 * t8 + t203 * t223 + t48 * t66 + t73 * t87 + (qJD(1) * t318 + t18) * t285, -t119 * t223 + t120 * t257 - t17 * t66 - t18 * t65 - t222 * t8 + t30 * t44 - t318 * t45 - t87 * t9, -t103 * t232 + t17 * t9 + t18 * t8 - t223 * t318 - t257 * t30 + t48 * t73, t12, t11, -t210, t115, -t334, t236, -t119 * t5 + t13 * t222 + t16 * t65 - t182 * t7 - t2 * t203 + t35 * t45 + (qJD(1) * t27 + t14) * t285, t1 * t119 + t120 * t2 + t14 * t66 - t15 * t65 - t222 * t6 - t26 * t45 - t27 * t44 + t7 * t87, t1 * t203 - t120 * t5 - t13 * t87 - t16 * t66 + t182 * t6 + t35 * t44 + (-qJD(1) * t26 - t15) * t285, t1 * t26 + t13 * t16 + t14 * t7 + t15 * t6 + t2 * t27 + t35 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, t291 * t205, 0, t177, 0, 0, t205 * pkin(1) * t202, pkin(1) * t301, 0, 0, t89, -t345, t81, -t216, t250 * t290 - t273, t177, t167 + ((-qJ(3) * t286 - t92) * t202 + (-pkin(7) * t250 + t198 * t256 + t106) * t203) * qJD(1) ((-qJ(3) * t278 + t93) * t202 + (-t107 + t249 * pkin(7) + (qJD(3) + t256) * t199) * t203) * qJD(1), t106 * t140 - t107 * t139 + t121 + (t289 * t92 + t72) * t199 + (t289 * t93 + t283 - t71) * t198, -t106 * t92 - t107 * t93 + (-t198 * t92 + t199 * t93) * qJD(3) + (-t198 * t71 + t199 * t72) * qJ(3) + t256 * t187, t89, t81, t345, t177, -t202 * t230 + t273, -t216, -t199 * t62 + t167 + t248 * t139 + (t316 - t203 * t97 + (-t203 * t68 + (t154 * t203 - t313) * qJD(2)) * t198) * qJD(1), -t139 * t96 - t140 * t97 + t121 + (-t289 * t74 + t49) * t199 + (t289 * t77 + t283 + t57) * t198, -t198 * t62 + t248 * t140 + (-t315 + t203 * t96 + (qJ(3) * t285 + (-qJD(2) * t154 - qJD(3) + t68) * t203) * t199) * qJD(1), -t109 * t68 + t154 * t62 - t74 * t97 - t77 * t96 + (qJ(3) * t49 + qJD(3) * t77) * t199 + (qJ(3) * t57 + qJD(3) * t74 - qJD(4) * t68) * t198, t10, t330, t19, t220, t331, t152, t129 * t45 - t143 * t232 + t252 * t222 - t297 * t48 - t321 * t182 + (t17 - t288) * t290, -t129 * t44 - t144 * t232 + t252 * t87 - t296 * t48 + t320 * t182 + (-t18 + t287) * t290, t143 * t223 + t144 * t257 + t296 * t17 + t297 * t18 + t222 * t24 + t321 * t87 + t247, -t102 * t223 - t129 * t232 - t321 * t17 - t320 * t18 - t221 * t257 + t252 * t48, t10, t19, -t330, t152, -t331, t220, t143 * t5 + t45 * t60 - t319 * t222 + t322 * t182 - t297 * t16 + (-t14 - t288) * t290, -t1 * t143 - t296 * t14 + t144 * t2 + t297 * t15 + t21 * t222 - t322 * t87 + t247, -t144 * t5 + t44 * t60 + t319 * t87 + t323 * t182 + t296 * t16 + (t15 - t287) * t290, t1 * t102 - t322 * t14 + t323 * t15 - t319 * t16 - t2 * t221 + t5 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238, t100, t337, -t139 * t93 + t140 * t92 + t181, 0, 0, 0, 0, 0, 0, t238, t337, -t100, -t139 * t77 - t140 * t74 + t62, 0, 0, 0, 0, 0, 0, t206, t211, t239, -t17 * t87 - t18 * t222 + t232, 0, 0, 0, 0, 0, 0, t206, t239, -t211, t14 * t87 - t15 * t222 - t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t139 * t140 - t258, t122 + t243, -t137 - t309, t140 * t68 + (-pkin(3) * t285 + t203 * t77) * qJD(1) - t71, 0, 0, 0, 0, 0, 0, t207, -t333, t209, -t48 * t140 + t213 * t18 + t201 * t343 - t257 * t327, 0, 0, 0, 0, 0, 0, t207, t209, t333, -t2 * t327 - t16 * t140 + t213 * t15 + (t14 * t182 + t1) * t201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t325, -t274, t20, -t325, -t347, -t258, -t48 * t87 + t226, t222 * t48 - t343, 0, 0, t325, t20, t274, -t258, t347, -t325, -t222 * t32 - 0.2e1 * t180 + t226 - t326, pkin(5) * t44 - qJ(6) * t45 + (t15 - t18) * t87 + (t14 - t298) * t222, -0.2e1 * t244 - t16 * t222 + t32 * t87 + (0.2e1 * qJD(6) - t17) * t182 - t223, -pkin(5) * t2 + qJ(6) * t1 - t14 * t18 + t298 * t15 - t16 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t258 + t325, t20, -t182 ^ 2 - t329, -t15 * t182 + t2 + t326;];
tauc_reg  = t3;
