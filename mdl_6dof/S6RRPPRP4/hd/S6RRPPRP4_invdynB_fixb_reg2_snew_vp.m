% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:22:18
% EndTime: 2019-05-06 09:22:55
% DurationCPUTime: 31.93s
% Computational Cost: add. (54486->683), mult. (120766->898), div. (0->0), fcn. (81095->8), ass. (0->505)
t971 = sin(qJ(2));
t1035 = qJD(1) * t971;
t968 = sin(pkin(9));
t969 = cos(pkin(9));
t923 = -t969 * qJD(2) + t1035 * t968;
t925 = t968 * qJD(2) + t1035 * t969;
t970 = sin(qJ(5));
t973 = cos(qJ(5));
t868 = -t973 * t923 + t925 * t970;
t974 = cos(qJ(2));
t1031 = t974 * qJD(1);
t953 = qJD(5) + t1031;
t1057 = t868 * t953;
t1029 = qJD(1) * qJD(2);
t1017 = t974 * t1029;
t1028 = qJDD(1) * t971;
t932 = t1017 + t1028;
t1011 = -t969 * qJDD(2) + t932 * t968;
t896 = qJDD(2) * t968 + t932 * t969;
t766 = -t868 * qJD(5) + t1011 * t970 + t973 * t896;
t1115 = t766 - t1057;
t870 = t923 * t970 + t925 * t973;
t788 = t870 * t868;
t1026 = qJDD(1) * t974;
t956 = t971 * t1029;
t933 = -t956 + t1026;
t926 = qJDD(5) + t933;
t1121 = t788 + t926;
t1077 = t1121 * t973;
t1096 = t953 ^ 2;
t867 = t870 ^ 2;
t815 = -t867 - t1096;
t698 = t815 * t970 + t1077;
t1078 = t1121 * t970;
t701 = t815 * t973 - t1078;
t623 = t698 * t969 - t701 * t968;
t601 = t1115 * t971 + t623 * t974;
t621 = t698 * t968 + t701 * t969;
t972 = sin(qJ(1));
t975 = cos(qJ(1));
t549 = t601 * t972 - t621 * t975;
t1296 = pkin(6) * t549;
t551 = t601 * t975 + t621 * t972;
t1295 = pkin(6) * t551;
t904 = t923 * t1031;
t1119 = t896 + t904;
t1052 = t923 * t925;
t987 = t933 - t1052;
t1060 = t987 * t969;
t921 = t925 ^ 2;
t966 = t974 ^ 2;
t976 = qJD(1) ^ 2;
t961 = t966 * t976;
t872 = t961 + t921;
t795 = t872 * t968 + t1060;
t744 = t1119 * t971 + t795 * t974;
t1061 = t987 * t968;
t776 = t872 * t969 - t1061;
t687 = t744 * t972 + t776 * t975;
t1294 = pkin(6) * t687;
t689 = t744 * t975 - t776 * t972;
t1293 = pkin(6) * t689;
t599 = -t1115 * t974 + t623 * t971;
t1292 = pkin(7) * t599;
t1291 = -pkin(1) * t599 + pkin(2) * t1115 - qJ(3) * t623;
t1290 = -pkin(1) * t621 + pkin(7) * t601;
t1098 = t868 ^ 2;
t836 = t1098 - t1096;
t719 = t836 * t970 + t1077;
t722 = t836 * t973 - t1078;
t654 = t719 * t968 + t722 * t969;
t1013 = -t973 * t1011 + t970 * t896;
t726 = (qJD(5) - t953) * t870 + t1013;
t611 = t654 * t974 + t726 * t971;
t650 = t719 * t969 - t722 * t968;
t1289 = t611 * t972 + t650 * t975;
t1288 = t611 * t975 - t650 * t972;
t725 = (qJD(5) + t953) * t870 + t1013;
t657 = t1115 * t973 - t725 * t970;
t661 = t1115 * t970 + t725 * t973;
t591 = t657 * t968 - t661 * t969;
t785 = t867 - t1098;
t576 = t591 * t974 - t785 * t971;
t587 = t657 * t969 + t661 * t968;
t1287 = t576 * t972 + t587 * t975;
t1286 = t576 * t975 - t587 * t972;
t742 = -t1119 * t974 + t795 * t971;
t1284 = pkin(7) * t742;
t1117 = t1057 + t766;
t1170 = t1117 * t970 - t726 * t973;
t1171 = -t1117 * t973 - t726 * t970;
t1198 = t1170 * t968 - t1171 * t969;
t1199 = t1170 * t969 + t1171 * t968;
t752 = t867 + t1098;
t1228 = t1199 * t974 + t752 * t971;
t1258 = t1198 * t972 + t1228 * t975;
t1283 = pkin(6) * t1258;
t1259 = -t1198 * t975 + t1228 * t972;
t1282 = pkin(6) * t1259;
t1281 = qJ(3) * t621;
t1276 = pkin(1) * t742 + qJ(3) * t795;
t1093 = pkin(3) + pkin(4);
t1275 = -pkin(2) * t621 - qJ(4) * t698 - t1093 * t701;
t1274 = -pkin(1) * t776 - pkin(7) * t744;
t1272 = t654 * t971 - t726 * t974;
t1064 = t1119 * t968;
t905 = t925 * t1031;
t852 = t1011 - t905;
t1066 = t852 * t969;
t762 = -t1066 - t1064;
t1097 = t923 ^ 2;
t875 = t921 - t1097;
t740 = t762 * t974 + t875 * t971;
t757 = t1119 * t969 - t852 * t968;
t1271 = t740 * t972 - t757 * t975;
t1270 = t740 * t975 + t757 * t972;
t897 = t961 - t1097;
t798 = t897 * t969 - t1061;
t851 = t1011 + t905;
t747 = t798 * t974 + t851 * t971;
t794 = t897 * t968 + t1060;
t1269 = t747 * t972 - t794 * t975;
t1268 = t747 * t975 + t794 * t972;
t1120 = -t896 + t904;
t1173 = t1120 * t969 - t851 * t968;
t1114 = t921 + t1097;
t1172 = -t1120 * t968 - t851 * t969;
t1204 = -t1114 * t971 + t1172 * t974;
t1226 = t1173 * t972 + t1204 * t975;
t1267 = pkin(6) * t1226;
t1227 = -t1173 * t975 + t1204 * t972;
t1266 = pkin(6) * t1227;
t1229 = t1199 * t971 - t752 * t974;
t1265 = pkin(7) * t1229;
t1262 = -pkin(1) * t1229 + pkin(2) * t752 - qJ(3) * t1199;
t1261 = -pkin(1) * t1198 + pkin(7) * t1228;
t1260 = t591 * t971 + t785 * t974;
t1122 = -t788 + t926;
t1075 = t1122 * t973;
t837 = -t867 + t1096;
t1174 = -t837 * t970 + t1075;
t1076 = t1122 * t970;
t1175 = -t837 * t973 - t1076;
t1196 = -t1174 * t968 - t1175 * t969;
t1197 = t1174 * t969 - t1175 * t968;
t1230 = -t1117 * t971 + t1197 * t974;
t1257 = t1196 * t975 + t1230 * t972;
t1256 = -t1196 * t972 + t1230 * t975;
t1254 = pkin(2) * t776;
t1253 = pkin(8) * t698;
t1252 = pkin(8) * t701;
t1012 = t933 + t1052;
t1058 = t1012 * t969;
t1116 = -t1097 - t961;
t1134 = t1116 * t968 - t1058;
t1059 = t1012 * t968;
t1133 = t1116 * t969 + t1059;
t1168 = t1133 * t974 + t852 * t971;
t1200 = t1134 * t972 + t1168 * t975;
t1250 = pkin(6) * t1200;
t1201 = -t1134 * t975 + t1168 * t972;
t1249 = pkin(6) * t1201;
t1248 = pkin(7) * t1204;
t1205 = t1114 * t974 + t1172 * t971;
t1247 = pkin(7) * t1205;
t1246 = qJ(3) * t776;
t1240 = qJ(3) * t1198;
t1235 = -pkin(1) * t1205 - pkin(2) * t1114 - qJ(3) * t1172;
t532 = -pkin(2) * t1198 - qJ(4) * t1170 + t1093 * t1171;
t1234 = t798 * t971 - t851 * t974;
t1233 = t762 * t971 - t875 * t974;
t1231 = t1117 * t974 + t1197 * t971;
t1112 = -t1096 - t1098;
t1131 = t1112 * t973 - t1076;
t1132 = t1112 * t970 + t1075;
t1160 = t1131 * t968 - t1132 * t969;
t1224 = pkin(1) * t1160;
t1169 = t1133 * t971 - t974 * t852;
t1223 = pkin(7) * t1169;
t1220 = qJ(3) * t1160;
t1161 = t1131 * t969 + t1132 * t968;
t1219 = qJ(3) * t1161;
t1218 = qJ(3) * t1173;
t1217 = t1160 * t972;
t1216 = t1160 * t975;
t1215 = t1161 * t971;
t1214 = t1161 * t974;
t1211 = -pkin(1) * t1169 - qJ(3) * t1133;
t1210 = -pkin(2) * t1160 - qJ(4) * t1131 + t1093 * t1132;
t1209 = -pkin(1) * t1134 + pkin(7) * t1168;
t1208 = -pkin(8) * t1170 - t1093 * t752;
t1207 = -pkin(8) * t1171 - qJ(4) * t752;
t900 = -t921 + t961;
t1140 = -t900 * t969 + t1059;
t1139 = -t900 * t968 - t1058;
t1162 = -t1120 * t971 + t1139 * t974;
t1203 = t1140 * t975 + t1162 * t972;
t1202 = -t1140 * t972 + t1162 * t975;
t1192 = pkin(2) * t1134;
t1191 = pkin(8) * t1131;
t1190 = pkin(8) * t1132;
t1181 = qJ(3) * t1134;
t1044 = t953 * t970;
t1022 = t868 * t1044;
t1043 = t953 * t973;
t831 = t870 * t1043;
t998 = t831 + t1022;
t1021 = t868 * t1043;
t830 = t870 * t1044;
t999 = t830 - t1021;
t1100 = -t968 * t999 - t969 * t998;
t1099 = -t968 * t998 + t969 * t999;
t1135 = t1099 * t974 - t926 * t971;
t1167 = t1100 * t975 + t1135 * t972;
t1166 = -t1100 * t972 + t1135 * t975;
t765 = -qJD(5) * t870 - t1013;
t989 = -t765 * t973 - t1022;
t990 = -t765 * t970 + t1021;
t1102 = -t968 * t990 - t969 * t989;
t1024 = t971 * t788;
t1101 = -t968 * t989 + t969 * t990;
t1136 = t1101 * t974 + t1024;
t1165 = t1102 * t975 + t1136 * t972;
t1164 = -t1102 * t972 + t1136 * t975;
t1163 = t1120 * t974 + t1139 * t971;
t1158 = pkin(3) * t852;
t1155 = qJ(6) * t1115;
t1138 = t1099 * t971 + t974 * t926;
t1023 = t974 * t788;
t1137 = t1101 * t971 - t1023;
t1049 = t933 * t971;
t985 = (t923 * t969 - t925 * t968) * t1031;
t1105 = t974 * t985 - t1049;
t984 = (-t923 * t968 - t925 * t969) * t1031;
t1130 = t1105 * t972 + t975 * t984;
t1129 = t1105 * t975 - t972 * t984;
t1020 = t971 * t1052;
t980 = t1011 * t968 - t904 * t969;
t1106 = t974 * t980 - t1020;
t981 = t1011 * t969 + t904 * t968;
t1128 = t1106 * t972 + t975 * t981;
t1127 = t1106 * t975 - t972 * t981;
t944 = g(1) * t975 + g(2) * t972;
t914 = -pkin(1) * t976 + qJDD(1) * pkin(7) - t944;
t1091 = pkin(2) * t974;
t997 = -qJ(3) * t971 - t1091;
t930 = t997 * qJD(1);
t1118 = (qJD(1) * t930 + t914) * t971;
t943 = t972 * g(1) - t975 * g(2);
t913 = qJDD(1) * pkin(1) + t976 * pkin(7) + t943;
t996 = t932 + t1017;
t805 = -t996 * qJ(3) + (-t933 + t956) * pkin(2) - t913;
t1095 = qJD(2) ^ 2;
t891 = -g(3) * t971 + t974 * t914;
t819 = -pkin(2) * t1095 + qJDD(2) * qJ(3) + t1031 * t930 + t891;
t1038 = t968 * t805 + t969 * t819;
t873 = pkin(3) * t923 - qJ(4) * t925;
t1113 = -t933 * qJ(4) - 0.2e1 * qJD(4) * t1031 - t923 * t873 + t1038;
t916 = t974 * t933;
t1111 = t971 * t985 + t916;
t1040 = t971 * t914;
t1051 = t923 * t974;
t1086 = t974 * g(3);
t994 = -qJDD(2) * pkin(2) - t1095 * qJ(3) + qJDD(3) + t1086;
t983 = t896 * qJ(4) - t1158 - t994;
t1110 = -qJD(1) * (qJ(4) * t1051 - t930 * t971) + t1040 - t983;
t825 = t896 * t969 + t905 * t968;
t1000 = t974 * t825 + t1020;
t824 = -t896 * t968 + t905 * t969;
t1109 = t1000 * t972 + t975 * t824;
t714 = -t766 * t970 - t831;
t715 = t766 * t973 - t830;
t646 = -t714 * t968 + t715 * t969;
t1002 = t974 * t646 - t1024;
t643 = -t714 * t969 - t715 * t968;
t1108 = t1002 * t972 + t975 * t643;
t1019 = t925 * t1051;
t1107 = t971 * t980 + t1019;
t1104 = t1000 * t975 - t824 * t972;
t1103 = t1002 * t975 - t643 * t972;
t1094 = 2 * qJD(6);
t1092 = pkin(2) * t971;
t1090 = pkin(3) * t969;
t1089 = pkin(5) * t970;
t1088 = pkin(5) * t973;
t1087 = t765 * pkin(5);
t818 = t994 + t1118;
t1074 = t818 * t968;
t1073 = t818 * t969;
t1054 = t913 * t971;
t1053 = t913 * t974;
t952 = t974 * t976 * t971;
t940 = -t952 + qJDD(2);
t1048 = t940 * t971;
t1047 = t940 * t974;
t941 = qJDD(2) + t952;
t1046 = t941 * t971;
t1045 = t953 * t870;
t965 = t971 ^ 2;
t1042 = t965 * t976;
t1032 = qJD(4) * t925;
t700 = -0.2e1 * t1032 + t1110;
t993 = pkin(4) * t1031 - pkin(8) * t925;
t674 = pkin(4) * t1011 + pkin(8) * t1097 - t925 * t993 + t700;
t1041 = t970 * t674;
t1039 = t973 * t674;
t1033 = qJD(3) * t925;
t912 = 0.2e1 * t1033;
t1037 = -t969 * t805 + t968 * t819;
t1005 = t925 * t873 + qJDD(4) + t1037;
t986 = t933 * pkin(3) + t1005;
t982 = -qJ(4) * t961 + t986;
t647 = pkin(4) * t1012 + pkin(8) * t1120 + t912 + t982;
t1034 = qJD(3) * t923;
t910 = -0.2e1 * t1034;
t992 = t910 + t1113;
t682 = -pkin(3) * t961 + t992;
t667 = -pkin(4) * t1097 + pkin(8) * t1011 - t1031 * t993 + t682;
t584 = t970 * t647 + t973 * t667;
t1036 = t965 + t966;
t1027 = qJDD(1) * t972;
t1025 = qJDD(1) * t975;
t737 = t912 + t1037;
t738 = t910 + t1038;
t1016 = qJ(4) * t968 + pkin(2);
t1015 = -qJ(6) * t973 + qJ(4);
t583 = -t973 * t647 + t970 * t667;
t1014 = t1114 - t961;
t890 = t1040 + t1086;
t808 = t890 * t971 + t974 * t891;
t882 = -t943 * t972 - t975 * t944;
t1009 = t972 * t952;
t1008 = t975 * t952;
t1006 = qJ(6) * t970 + t1093;
t937 = -t972 * t976 + t1025;
t1004 = -pkin(6) * t937 - g(3) * t972;
t1003 = t971 * t646 + t1023;
t1001 = t971 * t825 - t1019;
t784 = pkin(5) * t868 - qJ(6) * t870;
t995 = t926 * qJ(6) + t953 * t1094 - t868 * t784 + t584;
t541 = -t583 * t973 + t584 * t970;
t542 = t970 * t583 + t973 * t584;
t665 = -t737 * t969 + t738 * t968;
t666 = t737 * t968 + t738 * t969;
t807 = t890 * t974 - t891 * t971;
t881 = t943 * t975 - t944 * t972;
t565 = t926 * pkin(5) + qJ(6) * t1096 - t870 * t784 - qJDD(6) - t583;
t978 = -pkin(5) * t1045 + t1094 * t870 + t674;
t977 = t978 + t1155;
t950 = -t961 - t1095;
t949 = t961 - t1095;
t948 = -t1042 - t1095;
t947 = -t1042 + t1095;
t939 = t961 - t1042;
t938 = t961 + t1042;
t936 = t975 * t976 + t1027;
t935 = t1036 * qJDD(1);
t934 = -0.2e1 * t956 + t1026;
t931 = 0.2e1 * t1017 + t1028;
t928 = t974 * t941;
t927 = t1036 * t1029;
t909 = 0.2e1 * t1032;
t906 = -pkin(6) * t936 + g(3) * t975;
t895 = -t1029 * t965 + t932 * t974;
t894 = -t1029 * t966 - t1049;
t889 = -t948 * t971 - t1047;
t888 = -t947 * t971 + t928;
t887 = t950 * t974 - t1046;
t886 = t949 * t974 - t1048;
t885 = t948 * t974 - t1048;
t884 = t950 * t971 + t928;
t878 = t935 * t975 - t938 * t972;
t877 = t935 * t972 + t938 * t975;
t874 = -t931 * t971 + t934 * t974;
t835 = t889 * t975 + t931 * t972;
t834 = t887 * t975 - t934 * t972;
t833 = t889 * t972 - t931 * t975;
t832 = t887 * t972 + t934 * t975;
t827 = -pkin(7) * t885 - t1053;
t826 = -pkin(7) * t884 - t1054;
t817 = -pkin(1) * t885 + t891;
t816 = -pkin(1) * t884 + t890;
t783 = t808 * t975 - t913 * t972;
t782 = t808 * t972 + t913 * t975;
t741 = t1073 + t1246;
t724 = -t765 + t1045;
t709 = t1074 - t1181;
t695 = -pkin(2) * t1173 - pkin(3) * t1120 + qJ(4) * t851;
t686 = -t1110 + t909 - t1158;
t685 = t909 - t1118 + (t1119 + t904) * qJ(4) + t983;
t684 = -t982 - 0.2e1 * t1033;
t683 = t738 + t1254;
t679 = t737 - t1192;
t669 = qJ(4) * t1014 + t912 + t986;
t668 = pkin(3) * t1014 + t992;
t640 = pkin(2) * t1119 - t1074 - t1276;
t630 = pkin(2) * t852 + t1073 + t1211;
t629 = -qJ(4) * t1066 - t686 * t968 - t1181;
t628 = t666 * t974 + t818 * t971;
t627 = t666 * t971 - t818 * t974;
t626 = -pkin(3) * t1064 + t685 * t969 - t1246;
t625 = -t1192 + t912 + (-t1116 - t961) * qJ(4) + (t1012 + t933) * pkin(3) + t1005;
t620 = -t665 - t1218;
t615 = -t1254 + qJ(4) * t987 + 0.2e1 * t1034 + (-t872 + t961) * pkin(3) - t1113;
t614 = t682 * t969 - t684 * t968;
t613 = t682 * t968 + t684 * t969;
t608 = -t724 * t971 + t1214;
t606 = t724 * t974 + t1215;
t604 = -t683 * t971 + t741 * t974 - t1284;
t603 = t1016 * t852 - t969 * t686 + t1211;
t602 = -t725 * t971 + t1214;
t600 = t725 * t974 + t1215;
t598 = -t679 * t971 + t709 * t974 - t1223;
t597 = -t968 * t685 + (-pkin(2) - t1090) * t1119 + t1276;
t596 = qJ(4) * t1115 - t1039 - t1252;
t595 = t977 + t1087;
t594 = qJ(4) * t725 - t1041 - t1190;
t593 = t1235 - t666;
t582 = t614 * t974 + t700 * t971;
t581 = t614 * t971 - t700 * t974;
t580 = -t668 * t968 + t669 * t969 - t1218;
t579 = t1092 * t1173 + t620 * t974 - t1247;
t578 = t628 * t975 + t665 * t972;
t577 = t628 * t972 - t665 * t975;
t574 = t1093 * t1115 + t1041 + t1253;
t573 = -pkin(1) * t627 + pkin(2) * t818 - qJ(3) * t666;
t568 = t977 + (t765 - t724) * pkin(5);
t567 = t1087 + t978 + 0.2e1 * t1155;
t566 = t1093 * t725 - t1039 - t1191;
t564 = -pkin(5) * t1096 + t995;
t563 = -qJ(3) * t613 + (pkin(3) * t968 - qJ(4) * t969) * t700;
t562 = t608 * t975 + t1217;
t560 = t608 * t972 - t1216;
t558 = -t625 * t971 + t629 * t974 - t1223;
t557 = -t668 * t969 - t669 * t968 + t1235;
t556 = qJ(6) * t752 - t565;
t555 = (t752 - t1096) * pkin(5) + t995;
t554 = -pkin(2) * t613 - pkin(3) * t684 - qJ(4) * t682;
t553 = -t615 * t971 + t626 * t974 + t1284;
t552 = t602 * t975 + t1217;
t550 = t602 * t972 - t1216;
t548 = -pkin(7) * t627 + (-qJ(3) * t974 + t1092) * t665;
t547 = t580 * t974 - t695 * t971 - t1247;
t546 = t582 * t975 + t613 * t972;
t545 = t582 * t972 - t613 * t975;
t544 = t1015 * t724 - t970 * t568 - t1190;
t543 = t1252 + t973 * t567 + (-qJ(4) - t1089) * t1115;
t540 = t1006 * t724 - t973 * t568 - t1191;
t535 = -t1253 - t970 * t567 + (-t1088 - t1093) * t1115;
t534 = -t1275 - t584;
t533 = -pkin(8) * t541 - qJ(4) * t674;
t531 = t564 * t973 - t565 * t970;
t530 = t564 * t970 + t565 * t973;
t529 = t1210 - t583;
t528 = -pkin(1) * t581 - qJ(3) * t614 + (t1016 + t1090) * t700;
t527 = -t574 * t968 + t596 * t969 + t1281;
t526 = t1207 - t541;
t525 = pkin(5) * t1122 + qJ(6) * t1112 + t1210 + t565;
t524 = -t566 * t968 + t594 * t969 - t1220;
t523 = -pkin(8) * t542 - t1093 * t674;
t522 = t1208 - t542;
t521 = -pkin(5) * t1117 - qJ(6) * t726 + t532;
t520 = qJ(6) * t1121 + (-t815 - t1096) * pkin(5) + t995 + t1275;
t519 = -t555 * t970 + t556 * t973 + t1207;
t518 = -t574 * t969 - t596 * t968 - t1291;
t517 = -t973 * t555 - t970 * t556 + t1208;
t516 = -pkin(7) * t581 - t554 * t971 + t563 * t974;
t515 = -pkin(1) * t600 - pkin(2) * t725 - t566 * t969 - t594 * t968 - t1219;
t514 = t541 * t968 + t542 * t969;
t513 = -t541 * t969 + t542 * t968;
t512 = t514 * t974 + t674 * t971;
t511 = t514 * t971 - t674 * t974;
t510 = -t540 * t968 + t544 * t969 - t1220;
t509 = -t535 * t968 + t543 * t969 - t1281;
t508 = t530 * t968 + t531 * t969;
t507 = -t530 * t969 + t531 * t968;
t506 = -pkin(8) * t530 + (-t1015 - t1089) * t595;
t505 = -pkin(1) * t606 - pkin(2) * t724 - t540 * t969 - t544 * t968 - t1219;
t504 = t527 * t974 - t534 * t971 + t1292;
t503 = -t535 * t969 - t543 * t968 + t1291;
t502 = t508 * t974 + t595 * t971;
t501 = t508 * t971 - t595 * t974;
t500 = -pkin(7) * t600 + t524 * t974 - t529 * t971;
t499 = -pkin(8) * t531 + (-t1006 - t1088) * t595;
t498 = -t522 * t968 + t526 * t969 - t1240;
t497 = -t522 * t969 - t526 * t968 + t1262;
t496 = -pkin(7) * t606 + t510 * t974 - t525 * t971;
t495 = -t517 * t968 + t519 * t969 - t1240;
t494 = t512 * t975 + t513 * t972;
t493 = t512 * t972 - t513 * t975;
t492 = t509 * t974 - t520 * t971 - t1292;
t491 = -qJ(3) * t513 - t523 * t968 + t533 * t969;
t490 = -t517 * t969 - t519 * t968 + t1262;
t489 = -pkin(2) * t513 - qJ(4) * t542 + t1093 * t541;
t488 = t498 * t974 - t532 * t971 - t1265;
t487 = t502 * t975 + t507 * t972;
t486 = t502 * t972 - t507 * t975;
t485 = t495 * t974 - t521 * t971 - t1265;
t484 = -pkin(1) * t511 + pkin(2) * t674 - qJ(3) * t514 - t523 * t969 - t533 * t968;
t483 = -pkin(2) * t507 + pkin(5) * t565 - qJ(4) * t531 + qJ(6) * t564 + t1093 * t530;
t482 = -qJ(3) * t507 - t499 * t968 + t506 * t969;
t481 = -pkin(1) * t501 + pkin(2) * t595 - qJ(3) * t508 - t499 * t969 - t506 * t968;
t480 = -pkin(7) * t511 - t489 * t971 + t491 * t974;
t479 = -pkin(7) * t501 + t482 * t974 - t483 * t971;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t936, -t937, 0, t882, 0, 0, 0, 0, 0, 0, t834, t835, t878, t783, 0, 0, 0, 0, 0, 0, t1200, t689, t1226, t578, 0, 0, 0, 0, 0, 0, t1200, t1226, -t689, t546, 0, 0, 0, 0, 0, 0, t552, -t551, t1258, t494, 0, 0, 0, 0, 0, 0, t562, t1258, t551, t487; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t937, -t936, 0, t881, 0, 0, 0, 0, 0, 0, t832, t833, t877, t782, 0, 0, 0, 0, 0, 0, t1201, t687, t1227, t577, 0, 0, 0, 0, 0, 0, t1201, t1227, -t687, t545, 0, 0, 0, 0, 0, 0, t550, -t549, t1259, t493, 0, 0, 0, 0, 0, 0, t560, t1259, t549, t486; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t884, t885, 0, -t807, 0, 0, 0, 0, 0, 0, t1169, t742, t1205, t627, 0, 0, 0, 0, 0, 0, t1169, t1205, -t742, t581, 0, 0, 0, 0, 0, 0, t600, -t599, t1229, t511, 0, 0, 0, 0, 0, 0, t606, t1229, t599, t501; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t937, 0, -t936, 0, t1004, -t906, -t881, -pkin(6) * t881, t895 * t975 - t1009, t874 * t975 - t939 * t972, t1027 * t971 + t888 * t975, t894 * t975 + t1009, t1026 * t972 + t886 * t975, qJDD(2) * t972 + t927 * t975, -pkin(6) * t832 - t816 * t972 + t826 * t975, -pkin(6) * t833 - t817 * t972 + t827 * t975, -pkin(6) * t877 + t807 * t975, -pkin(6) * t782 - (pkin(1) * t972 - pkin(7) * t975) * t807, t1104, t1270, t1202, t1127, -t1268, t1129, t598 * t975 - t630 * t972 - t1249, t604 * t975 - t640 * t972 - t1294, t579 * t975 - t593 * t972 - t1266, -pkin(6) * t577 + t548 * t975 - t573 * t972, t1104, t1202, -t1270, t1129, t1268, t1127, t558 * t975 - t603 * t972 - t1249, t547 * t975 - t557 * t972 - t1266, t553 * t975 - t597 * t972 + t1294, -pkin(6) * t545 + t516 * t975 - t528 * t972, t1103, t1286, t1256, t1164, t1288, t1166, -pkin(6) * t550 + t500 * t975 - t515 * t972, t504 * t975 - t518 * t972 + t1296, t488 * t975 - t497 * t972 - t1282, -pkin(6) * t493 + t480 * t975 - t484 * t972, t1103, t1256, -t1286, t1166, -t1288, t1164, -pkin(6) * t560 + t496 * t975 - t505 * t972, t485 * t975 - t490 * t972 - t1282, t492 * t975 - t503 * t972 - t1296, -pkin(6) * t486 + t479 * t975 - t481 * t972; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t936, 0, t937, 0, t906, t1004, t882, pkin(6) * t882, t895 * t972 + t1008, t874 * t972 + t939 * t975, -t1025 * t971 + t888 * t972, t894 * t972 - t1008, -t1025 * t974 + t886 * t972, -qJDD(2) * t975 + t927 * t972, pkin(6) * t834 + t816 * t975 + t826 * t972, pkin(6) * t835 + t817 * t975 + t827 * t972, pkin(6) * t878 + t807 * t972, pkin(6) * t783 - (-pkin(1) * t975 - pkin(7) * t972) * t807, t1109, t1271, t1203, t1128, -t1269, t1130, t598 * t972 + t630 * t975 + t1250, t604 * t972 + t640 * t975 + t1293, t579 * t972 + t593 * t975 + t1267, pkin(6) * t578 + t548 * t972 + t573 * t975, t1109, t1203, -t1271, t1130, t1269, t1128, t558 * t972 + t603 * t975 + t1250, t547 * t972 + t557 * t975 + t1267, t553 * t972 + t597 * t975 - t1293, pkin(6) * t546 + t516 * t972 + t528 * t975, t1108, t1287, t1257, t1165, t1289, t1167, pkin(6) * t552 + t500 * t972 + t515 * t975, t504 * t972 + t518 * t975 - t1295, t488 * t972 + t497 * t975 + t1283, pkin(6) * t494 + t480 * t972 + t484 * t975, t1108, t1257, -t1287, t1167, -t1289, t1165, pkin(6) * t562 + t496 * t972 + t505 * t975, t485 * t972 + t490 * t975 + t1283, t492 * t972 + t503 * t975 + t1295, pkin(6) * t487 + t479 * t972 + t481 * t975; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t943, t944, 0, 0, t996 * t971, t931 * t974 + t934 * t971, t947 * t974 + t1046, -t1017 * t971 + t916, t949 * t971 + t1047, 0, pkin(1) * t934 + pkin(7) * t887 + t1053, -pkin(1) * t931 + pkin(7) * t889 - t1054, pkin(1) * t938 + pkin(7) * t935 + t808, pkin(1) * t913 + pkin(7) * t808, t1001, t1233, t1163, t1107, -t1234, t1111, t679 * t974 + t709 * t971 + t1209, t683 * t974 + t741 * t971 - t1274, t1248 + t971 * t620 + (-pkin(1) - t1091) * t1173, pkin(7) * t628 + (-pkin(1) + t997) * t665, t1001, t1163, -t1233, t1111, t1234, t1107, t625 * t974 + t629 * t971 + t1209, -pkin(1) * t1173 + t580 * t971 + t695 * t974 + t1248, t615 * t974 + t626 * t971 + t1274, -pkin(1) * t613 + pkin(7) * t582 + t554 * t974 + t563 * t971, t1003, t1260, t1231, t1137, t1272, t1138, pkin(7) * t602 + t524 * t971 + t529 * t974 - t1224, t527 * t971 + t534 * t974 - t1290, t498 * t971 + t532 * t974 + t1261, -pkin(1) * t513 + pkin(7) * t512 + t489 * t974 + t491 * t971, t1003, t1231, -t1260, t1138, -t1272, t1137, pkin(7) * t608 + t510 * t971 + t525 * t974 - t1224, t495 * t971 + t521 * t974 + t1261, t509 * t971 + t520 * t974 + t1290, -pkin(1) * t507 + pkin(7) * t502 + t482 * t971 + t483 * t974;];
tauB_reg  = t1;
