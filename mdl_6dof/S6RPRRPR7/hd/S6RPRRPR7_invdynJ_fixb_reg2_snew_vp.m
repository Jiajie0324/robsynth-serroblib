% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 23:03
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRPR7_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 23:01:52
% EndTime: 2019-05-05 23:02:07
% DurationCPUTime: 6.51s
% Computational Cost: add. (36859->463), mult. (80344->650), div. (0->0), fcn. (57705->10), ass. (0->304)
t380 = 2 * qJD(5);
t279 = sin(pkin(10));
t282 = sin(qJ(4));
t286 = cos(qJ(4));
t287 = cos(qJ(3));
t330 = qJD(1) * t287;
t283 = sin(qJ(3));
t331 = qJD(1) * t283;
t249 = -t282 * t330 - t286 * t331;
t250 = -t282 * t331 + t286 * t330;
t280 = cos(pkin(10));
t223 = -t280 * t249 + t250 * t279;
t225 = t279 * t249 + t280 * t250;
t187 = t225 * t223;
t274 = qJDD(3) + qJDD(4);
t372 = -t187 + t274;
t379 = t279 * t372;
t378 = t280 * t372;
t281 = sin(qJ(6));
t325 = qJD(1) * qJD(3);
t315 = t287 * t325;
t323 = t283 * qJDD(1);
t256 = -t315 - t323;
t270 = t287 * qJDD(1);
t316 = t283 * t325;
t257 = t270 - t316;
t308 = -t286 * t256 + t282 * t257;
t209 = -qJD(4) * t250 - t308;
t210 = t249 * qJD(4) + t282 * t256 + t286 * t257;
t309 = -t280 * t209 + t210 * t279;
t169 = qJDD(6) + t309;
t275 = qJD(3) + qJD(4);
t285 = cos(qJ(6));
t206 = t225 * t281 - t285 * t275;
t208 = t225 * t285 + t275 * t281;
t173 = t208 * t206;
t373 = t169 - t173;
t377 = t281 * t373;
t231 = t249 * t250;
t371 = t231 + t274;
t376 = t282 * t371;
t375 = t285 * t373;
t374 = t286 * t371;
t349 = t225 * t275;
t147 = t309 + t349;
t183 = pkin(5) * t223 - pkin(9) * t225;
t368 = t275 ^ 2;
t290 = qJD(1) ^ 2;
t335 = t287 * t290;
t284 = sin(qJ(1));
t288 = cos(qJ(1));
t314 = t284 * g(1) - t288 * g(2);
t303 = qJDD(2) - t314;
t334 = t290 * qJ(2);
t294 = t303 - t334;
t367 = pkin(7) + pkin(1);
t241 = -qJDD(1) * t367 + t294;
t337 = t287 * t241;
t198 = qJDD(3) * pkin(3) - t257 * pkin(8) + t337 + (-pkin(3) * t335 - pkin(8) * t325 + g(3)) * t283;
t233 = t287 * g(3) - t283 * t241;
t296 = qJD(3) * pkin(3) - pkin(8) * t330;
t277 = t283 ^ 2;
t340 = t277 * t290;
t199 = -pkin(3) * t340 + t256 * pkin(8) - qJD(3) * t296 - t233;
t167 = t282 * t198 + t286 * t199;
t247 = t249 ^ 2;
t301 = pkin(4) * t275 - qJ(5) * t250;
t128 = -t247 * pkin(4) + t209 * qJ(5) - t275 * t301 + t167;
t166 = -t286 * t198 + t282 * t199;
t345 = t249 * t275;
t192 = -t210 + t345;
t291 = pkin(4) * t371 + qJ(5) * t192 - t166;
t78 = -0.2e1 * qJD(5) * t223 + t280 * t128 + t279 * t291;
t54 = -pkin(5) * t368 + pkin(9) * t274 - t183 * t223 + t78;
t324 = qJD(2) * qJD(1);
t271 = 0.2e1 * t324;
t171 = t279 * t209 + t280 * t210;
t350 = t223 * t275;
t302 = t171 - t350;
t369 = t209 * pkin(4) + t247 * qJ(5) - t250 * t301 - qJDD(5);
t276 = qJDD(1) * qJ(2);
t304 = t288 * g(1) + t284 * g(2);
t299 = -t276 + t304;
t370 = -t256 * pkin(3) - (pkin(8) * t277 + t367) * t290 + t296 * t330 - t299;
t81 = t147 * pkin(5) - t302 * pkin(9) + t271 - t369 + t370;
t39 = t281 * t54 - t285 * t81;
t40 = t281 * t81 + t285 * t54;
t22 = t281 * t39 + t285 * t40;
t311 = t279 * t128 - t280 * t291;
t77 = t225 * t380 + t311;
t219 = qJD(6) + t223;
t310 = t281 * t171 - t285 * t274;
t119 = (qJD(6) - t219) * t208 + t310;
t204 = t206 ^ 2;
t205 = t208 ^ 2;
t218 = t219 ^ 2;
t220 = t223 ^ 2;
t221 = t225 ^ 2;
t248 = t250 ^ 2;
t366 = pkin(5) * t279;
t53 = -t274 * pkin(5) - t368 * pkin(9) + (t380 + t183) * t225 + t311;
t50 = t281 * t53;
t42 = t279 * t78 - t280 * t77;
t364 = t282 * t42;
t51 = t285 * t53;
t363 = t286 * t42;
t362 = qJDD(1) * pkin(1);
t115 = -t166 * t286 + t167 * t282;
t361 = t115 * t287;
t130 = t169 + t173;
t360 = t130 * t281;
t359 = t130 * t285;
t321 = -0.2e1 * t324;
t200 = t321 - t370;
t140 = t200 + t369;
t358 = t140 * t279;
t357 = t140 * t280;
t181 = t187 + t274;
t356 = t181 * t279;
t355 = t181 * t280;
t354 = t200 * t282;
t353 = t200 * t286;
t352 = t219 * t281;
t351 = t219 * t285;
t228 = -t231 + t274;
t348 = t228 * t282;
t347 = t228 * t286;
t344 = t275 * t279;
t343 = t275 * t280;
t342 = t275 * t282;
t341 = t275 * t286;
t278 = t287 ^ 2;
t339 = t278 * t290;
t318 = t283 * t335;
t338 = t283 * (qJDD(3) + t318);
t336 = t287 * (qJDD(3) - t318);
t332 = t277 + t278;
t326 = qJD(6) + t219;
t14 = t22 * t279 - t280 * t53;
t322 = pkin(4) * t14 - pkin(5) * t53 + pkin(9) * t22;
t320 = t279 * t173;
t319 = t280 * t173;
t317 = -pkin(5) * t280 - pkin(4);
t43 = t279 * t77 + t280 * t78;
t300 = -t285 * t171 - t281 * t274;
t124 = t206 * t326 + t300;
t164 = -t205 - t218;
t94 = -t164 * t281 - t359;
t63 = t124 * t280 + t279 * t94;
t313 = pkin(4) * t63 + pkin(5) * t124 + pkin(9) * t94 + t50;
t120 = -t208 * t326 - t310;
t156 = -t218 - t204;
t89 = t156 * t285 - t377;
t58 = t120 * t280 + t279 * t89;
t312 = pkin(4) * t58 + pkin(5) * t120 + pkin(9) * t89 - t51;
t116 = t166 * t282 + t286 * t167;
t212 = -t221 - t368;
t158 = t212 * t280 - t356;
t306 = pkin(4) * t158 - t78;
t146 = t204 + t205;
t138 = -qJD(6) * t206 - t300;
t178 = t219 * t206;
t123 = t138 + t178;
t75 = -t119 * t285 + t123 * t281;
t48 = t146 * t280 + t279 * t75;
t305 = pkin(4) * t48 + pkin(5) * t146 + pkin(9) * t75 + t22;
t21 = t281 * t40 - t285 * t39;
t232 = t283 * g(3) + t337;
t196 = t287 * t232 - t283 * t233;
t179 = -t368 - t220;
t135 = t179 * t279 + t378;
t298 = pkin(4) * t135 - t77;
t297 = t210 + t345;
t295 = -t309 + t349;
t293 = (-qJD(4) + t275) * t250 - t308;
t289 = qJD(3) ^ 2;
t259 = t332 * qJDD(1);
t258 = t270 - 0.2e1 * t316;
t255 = 0.2e1 * t315 + t323;
t246 = -t294 + t362;
t240 = -t248 + t368;
t239 = t247 - t368;
t238 = t290 * t367 + t299 + t321;
t236 = -t248 - t368;
t235 = -t338 + t287 * (-t289 - t339);
t234 = t283 * (-t289 - t340) + t336;
t230 = t248 - t247;
t226 = -t368 - t247;
t214 = -t221 + t368;
t213 = t220 - t368;
t211 = -t247 - t248;
t195 = -t236 * t282 - t347;
t194 = t236 * t286 - t348;
t188 = (qJD(4) + t275) * t250 + t308;
t186 = t226 * t286 - t376;
t185 = t226 * t282 + t374;
t184 = t221 - t220;
t177 = -t205 + t218;
t176 = t204 - t218;
t175 = (-t223 * t280 + t225 * t279) * t275;
t174 = (-t223 * t279 - t225 * t280) * t275;
t172 = t205 - t204;
t168 = -t220 - t221;
t163 = t213 * t280 - t356;
t162 = -t214 * t279 + t378;
t161 = t213 * t279 + t355;
t160 = t214 * t280 + t379;
t159 = -t212 * t279 - t355;
t155 = t194 * t287 + t195 * t283;
t154 = -t192 * t282 + t286 * t293;
t153 = t192 * t286 + t282 * t293;
t151 = -t171 - t350;
t144 = t171 * t280 - t225 * t344;
t143 = t171 * t279 + t225 * t343;
t142 = t223 * t343 + t279 * t309;
t141 = t223 * t344 - t280 * t309;
t139 = t185 * t287 + t186 * t283;
t137 = -qJD(6) * t208 - t310;
t136 = t179 * t280 - t379;
t133 = (-t206 * t285 + t208 * t281) * t219;
t132 = (-t206 * t281 - t208 * t285) * t219;
t122 = t138 - t178;
t114 = t138 * t285 - t208 * t352;
t113 = t138 * t281 + t208 * t351;
t112 = -t137 * t281 + t206 * t351;
t111 = t137 * t285 + t206 * t352;
t110 = -t158 * t282 + t159 * t286;
t109 = t158 * t286 + t159 * t282;
t108 = t153 * t287 + t154 * t283;
t107 = t133 * t280 + t169 * t279;
t106 = t133 * t279 - t169 * t280;
t105 = -t151 * t279 + t280 * t295;
t104 = -t147 * t280 - t279 * t302;
t103 = t151 * t280 + t279 * t295;
t102 = -t147 * t279 + t280 * t302;
t101 = pkin(4) * t103;
t100 = t176 * t285 - t360;
t99 = -t177 * t281 + t375;
t98 = t176 * t281 + t359;
t97 = t177 * t285 + t377;
t96 = -qJ(5) * t158 - t357;
t95 = -qJ(5) * t135 - t358;
t93 = t164 * t285 - t360;
t91 = -t135 * t282 + t136 * t286;
t90 = t135 * t286 + t136 * t282;
t88 = t156 * t281 + t375;
t86 = t114 * t280 + t320;
t85 = t112 * t280 - t320;
t84 = t114 * t279 - t319;
t83 = t112 * t279 + t319;
t82 = -pkin(4) * t302 + qJ(5) * t159 - t358;
t79 = -pkin(4) * t147 + qJ(5) * t136 + t357;
t74 = t120 * t285 - t122 * t281;
t73 = -t119 * t281 - t123 * t285;
t72 = t120 * t281 + t122 * t285;
t70 = t116 * t283 + t361;
t69 = t100 * t280 - t119 * t279;
t68 = t123 * t279 + t280 * t99;
t67 = t100 * t279 + t119 * t280;
t66 = -t123 * t280 + t279 * t99;
t65 = t109 * t287 + t110 * t283;
t64 = -t124 * t279 + t280 * t94;
t61 = -t103 * t282 + t105 * t286;
t60 = t103 * t286 + t105 * t282;
t59 = -t120 * t279 + t280 * t89;
t56 = t172 * t279 + t280 * t74;
t55 = -t172 * t280 + t279 * t74;
t49 = -t146 * t279 + t280 * t75;
t46 = t283 * t91 + t287 * t90;
t45 = -pkin(9) * t93 + t51;
t44 = -pkin(9) * t88 + t50;
t41 = pkin(4) * t42;
t36 = pkin(4) * t140 + qJ(5) * t43;
t35 = -t282 * t63 + t286 * t64;
t34 = t282 * t64 + t286 * t63;
t33 = t283 * t61 + t287 * t60;
t32 = -t282 * t58 + t286 * t59;
t31 = t282 * t59 + t286 * t58;
t30 = -qJ(5) * t103 - t42;
t29 = -t282 * t48 + t286 * t49;
t28 = t282 * t49 + t286 * t48;
t27 = -pkin(4) * t168 + qJ(5) * t105 + t43;
t26 = -pkin(5) * t93 + t40;
t25 = -pkin(5) * t88 + t39;
t24 = t286 * t43 - t364;
t23 = t282 * t43 + t363;
t19 = t283 * t35 + t287 * t34;
t18 = t283 * t32 + t287 * t31;
t17 = -pkin(9) * t73 - t21;
t16 = t28 * t287 + t283 * t29;
t15 = t22 * t280 + t279 * t53;
t12 = -qJ(5) * t63 - t26 * t279 + t280 * t45;
t11 = -qJ(5) * t58 - t25 * t279 + t280 * t44;
t10 = -pkin(4) * t93 + qJ(5) * t64 + t26 * t280 + t279 * t45;
t9 = -pkin(4) * t88 + qJ(5) * t59 + t25 * t280 + t279 * t44;
t8 = -qJ(5) * t48 + t17 * t280 + t366 * t73;
t7 = t23 * t287 + t24 * t283;
t6 = qJ(5) * t49 + t279 * t17 + t317 * t73;
t5 = -t14 * t282 + t15 * t286;
t4 = t14 * t286 + t15 * t282;
t3 = -qJ(5) * t14 + (-pkin(9) * t280 + t366) * t21;
t2 = qJ(5) * t15 + (-pkin(9) * t279 + t317) * t21;
t1 = t283 * t5 + t287 * t4;
t13 = [0, 0, 0, 0, 0, qJDD(1), t314, t304, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t303 - 0.2e1 * t362, t271 + 0.2e1 * t276 - t304, pkin(1) * t246 + qJ(2) * (-t290 * pkin(1) + t271 - t299), (t257 - t316) * t287, -t255 * t287 - t258 * t283, t336 - t283 * (t289 - t339), (-t256 + t315) * t283, t287 * (-t289 + t340) - t338, 0, qJ(2) * t255 - t234 * t367 - t283 * t238, qJ(2) * t258 - t235 * t367 - t287 * t238, t259 * t367 - t332 * t334 - t196, -qJ(2) * t238 - t196 * t367, t287 * (t210 * t286 - t250 * t342) - t283 * (t210 * t282 + t250 * t341), t287 * (-t188 * t286 - t282 * t297) - t283 * (-t188 * t282 + t286 * t297), t287 * (-t240 * t282 + t374) - t283 * (t240 * t286 + t376), t287 * (-t209 * t282 - t249 * t341) - t283 * (t209 * t286 - t249 * t342), t287 * (t239 * t286 - t348) - t283 * (t239 * t282 + t347), (t287 * (t249 * t286 + t250 * t282) - t283 * (t249 * t282 - t250 * t286)) * t275, t287 * (-pkin(8) * t185 - t354) - t283 * (-pkin(3) * t188 + pkin(8) * t186 + t353) + qJ(2) * t188 - t367 * t139, t287 * (-pkin(8) * t194 - t353) - t283 * (-pkin(3) * t297 + pkin(8) * t195 - t354) + qJ(2) * t297 - t367 * t155, t287 * (-pkin(8) * t153 - t115) - t283 * (-pkin(3) * t211 + pkin(8) * t154 + t116) + qJ(2) * t211 - t367 * t108, -pkin(8) * t361 - t283 * (pkin(3) * t200 + pkin(8) * t116) - qJ(2) * t200 - t367 * t70, t287 * (-t143 * t282 + t144 * t286) - t283 * (t143 * t286 + t144 * t282), t287 * (-t102 * t282 + t104 * t286) - t283 * (t102 * t286 + t104 * t282), t287 * (-t160 * t282 + t162 * t286) - t283 * (t160 * t286 + t162 * t282), t287 * (-t141 * t282 + t142 * t286) - t283 * (t141 * t286 + t142 * t282), t287 * (-t161 * t282 + t163 * t286) - t283 * (t161 * t286 + t163 * t282), t287 * (-t174 * t282 + t175 * t286) - t283 * (t174 * t286 + t175 * t282), t287 * (-pkin(8) * t90 - t282 * t79 + t286 * t95) - t283 * (-pkin(3) * t147 + pkin(8) * t91 + t282 * t95 + t286 * t79) + qJ(2) * t147 - t367 * t46, t287 * (-pkin(8) * t109 - t282 * t82 + t286 * t96) - t283 * (-pkin(3) * t302 + pkin(8) * t110 + t282 * t96 + t286 * t82) + qJ(2) * t302 - t367 * t65, t287 * (-pkin(8) * t60 - t27 * t282 + t286 * t30) - t283 * (-pkin(3) * t168 + pkin(8) * t61 + t27 * t286 + t282 * t30) + qJ(2) * t168 - t367 * t33, t287 * (-pkin(8) * t23 - qJ(5) * t363 - t282 * t36) - t283 * (pkin(3) * t140 + pkin(8) * t24 - qJ(5) * t364 + t286 * t36) - qJ(2) * t140 - t367 * t7, t287 * (-t282 * t84 + t286 * t86) - t283 * (t282 * t86 + t286 * t84), t287 * (-t282 * t55 + t286 * t56) - t283 * (t282 * t56 + t286 * t55), t287 * (-t282 * t66 + t286 * t68) - t283 * (t282 * t68 + t286 * t66), t287 * (-t282 * t83 + t286 * t85) - t283 * (t282 * t85 + t286 * t83), t287 * (-t282 * t67 + t286 * t69) - t283 * (t282 * t69 + t286 * t67), t287 * (-t106 * t282 + t107 * t286) - t283 * (t106 * t286 + t107 * t282), t287 * (-pkin(8) * t31 + t11 * t286 - t282 * t9) - t283 * (-pkin(3) * t88 + pkin(8) * t32 + t11 * t282 + t286 * t9) + qJ(2) * t88 - t367 * t18, t287 * (-pkin(8) * t34 - t10 * t282 + t12 * t286) - t283 * (-pkin(3) * t93 + pkin(8) * t35 + t10 * t286 + t12 * t282) + qJ(2) * t93 - t367 * t19, t287 * (-pkin(8) * t28 - t282 * t6 + t286 * t8) - t283 * (-pkin(3) * t73 + pkin(8) * t29 + t282 * t8 + t286 * t6) + qJ(2) * t73 - t367 * t16, t287 * (-pkin(8) * t4 - t2 * t282 + t286 * t3) - t283 * (-pkin(3) * t21 + pkin(8) * t5 + t2 * t286 + t282 * t3) + qJ(2) * t21 - t367 * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t290, -t246, 0, 0, 0, 0, 0, 0, t234, t235, -t259, t196, 0, 0, 0, 0, 0, 0, t139, t155, t108, t70, 0, 0, 0, 0, 0, 0, t46, t65, t33, t7, 0, 0, 0, 0, 0, 0, t18, t19, t16, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, (-t277 + t278) * t290, t270, -t318, -t323, qJDD(3), t232, t233, 0, 0, -t231, t230, -t192, t231, t293, t274, pkin(3) * t185 - t166, pkin(3) * t194 - t167, pkin(3) * t153, pkin(3) * t115, t187, t184, -t151, -t187, t295, t274, pkin(3) * t90 + t298, pkin(3) * t109 + t306, pkin(3) * t60 + t101, pkin(3) * t23 + t41, t113, t72, t97, t111, t98, t132, pkin(3) * t31 + t312, pkin(3) * t34 + t313, pkin(3) * t28 + t305, pkin(3) * t4 + t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t231, t230, -t192, t231, t293, t274, -t166, -t167, 0, 0, t187, t184, -t151, -t187, t295, t274, t298, t306, t101, t41, t113, t72, t97, t111, t98, t132, t312, t313, t305, t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, t302, t168, -t140, 0, 0, 0, 0, 0, 0, t88, t93, t73, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, t172, t123, -t173, -t119, t169, -t39, -t40, 0, 0;];
tauJ_reg  = t13;
