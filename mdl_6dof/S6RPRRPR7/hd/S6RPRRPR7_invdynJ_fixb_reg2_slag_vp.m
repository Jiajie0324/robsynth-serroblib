% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR7_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:21:08
% EndTime: 2019-03-09 05:21:18
% DurationCPUTime: 6.01s
% Computational Cost: add. (13502->569), mult. (27287->686), div. (0->0), fcn. (19203->14), ass. (0->295)
t235 = sin(qJ(6));
t239 = cos(qJ(6));
t226 = qJD(3) + qJD(4);
t234 = sin(pkin(10));
t240 = cos(qJ(4));
t236 = sin(qJ(4));
t237 = sin(qJ(3));
t323 = qJD(1) * t237;
t305 = t236 * t323;
t241 = cos(qJ(3));
t322 = qJD(1) * t241;
t153 = t240 * t322 - t305;
t145 = t153 * qJ(5);
t244 = -pkin(1) - pkin(7);
t185 = qJD(1) * t244 + qJD(2);
t141 = -pkin(8) * t323 + t185 * t237;
t126 = t236 * t141;
t142 = -pkin(8) * t322 + t241 * t185;
t128 = qJD(3) * pkin(3) + t142;
t94 = t240 * t128 - t126;
t82 = -t145 + t94;
t76 = pkin(4) * t226 + t82;
t354 = cos(pkin(10));
t163 = t236 * t241 + t237 * t240;
t151 = t163 * qJD(1);
t352 = qJ(5) * t151;
t343 = t141 * t240;
t95 = t128 * t236 + t343;
t83 = t95 - t352;
t77 = t354 * t83;
t47 = t234 * t76 + t77;
t45 = pkin(9) * t226 + t47;
t106 = t354 * t151 + t153 * t234;
t177 = pkin(3) * t323 + qJD(1) * qJ(2);
t121 = pkin(4) * t151 + qJD(5) + t177;
t260 = -t234 * t151 + t153 * t354;
t61 = pkin(5) * t106 - pkin(9) * t260 + t121;
t20 = -t235 * t45 + t239 * t61;
t392 = qJD(6) + t106;
t400 = t20 * t392;
t21 = t235 * t61 + t239 * t45;
t399 = t21 * t392;
t246 = qJD(1) ^ 2;
t242 = cos(qJ(1));
t222 = g(2) * t242;
t238 = sin(qJ(1));
t328 = g(1) * t238 - t222;
t398 = -t246 * qJ(2) - t328;
t397 = t106 * t260;
t233 = qJ(3) + qJ(4);
t215 = pkin(10) + t233;
t200 = sin(t215);
t201 = cos(t215);
t396 = g(3) * t200 + t201 * t222;
t314 = qJD(1) * qJD(3);
t303 = t241 * t314;
t312 = t237 * qJDD(1);
t395 = t303 + t312;
t311 = t241 * qJDD(1);
t394 = t237 * t314 - t311;
t298 = t239 * t392;
t117 = t226 * t163;
t285 = t236 * t312 - t240 * t311;
t87 = qJD(1) * t117 + t285;
t263 = -qJD(4) * t305 - t236 * t394;
t297 = t226 * t241;
t88 = (qJD(1) * t297 + t312) * t240 + t263;
t59 = -t234 * t87 + t354 * t88;
t58 = qJDD(6) + t59;
t366 = t235 * t58;
t393 = -t298 * t392 - t366;
t228 = qJDD(1) * qJ(2);
t164 = -t236 * t237 + t240 * t241;
t113 = t163 * t234 - t354 * t164;
t60 = -t234 * t88 - t354 * t87;
t319 = qJD(4) * t236;
t321 = qJD(3) * t237;
t118 = -t236 * t321 - t237 * t319 + t240 * t297;
t73 = t354 * t117 + t118 * t234;
t391 = -t113 * t60 - t260 * t73;
t224 = qJDD(3) + qJDD(4);
t390 = -t113 * t224 - t226 * t73;
t183 = qJDD(1) * t244 + qJDD(2);
t165 = t241 * t183;
t102 = qJDD(3) * pkin(3) + pkin(8) * t394 - t185 * t321 + t165;
t320 = qJD(3) * t241;
t109 = -pkin(8) * t395 + t237 * t183 + t185 * t320;
t49 = -qJD(4) * t95 + t240 * t102 - t236 * t109;
t30 = t224 * pkin(4) + t87 * qJ(5) - t153 * qJD(5) + t49;
t318 = qJD(4) * t240;
t295 = -t236 * t102 - t240 * t109 - t128 * t318 + t141 * t319;
t32 = -qJ(5) * t88 - qJD(5) * t151 - t295;
t10 = -t234 * t32 + t354 * t30;
t11 = t234 * t30 + t354 * t32;
t259 = t163 * t354 + t234 * t164;
t261 = -t234 * t117 + t118 * t354;
t367 = t234 * t83;
t46 = t354 * t76 - t367;
t389 = -t10 * t113 + t11 * t259 + t261 * t47 - t46 * t73 - t328;
t316 = qJD(6) * t239;
t44 = -t226 * pkin(5) - t46;
t8 = -pkin(5) * t224 - t10;
t388 = t8 * t235 + t44 * t316;
t288 = g(1) * t242 + g(2) * t238;
t386 = t288 * t201;
t231 = t237 ^ 2;
t232 = t241 ^ 2;
t326 = t231 + t232;
t299 = t326 * t183;
t373 = pkin(8) - t244;
t169 = t373 * t237;
t170 = t373 * t241;
t120 = -t240 * t169 - t236 * t170;
t289 = pkin(5) * t200 - t201 * pkin(9);
t229 = qJD(1) * qJD(2);
t309 = 0.2e1 * t229;
t385 = 0.2e1 * t228 + t309 - t288;
t384 = t106 * t261 + t259 * t59;
t383 = -t224 * t259 - t226 * t261;
t243 = -pkin(8) - pkin(7);
t380 = pkin(4) * t153;
t216 = sin(t233);
t379 = pkin(4) * t216;
t217 = cos(t233);
t378 = pkin(4) * t217;
t189 = g(3) * t201;
t205 = g(3) * t216;
t376 = g(3) * t237;
t129 = pkin(3) * t395 + t228 + t229;
t68 = pkin(4) * t88 + qJDD(5) + t129;
t19 = pkin(5) * t59 - pkin(9) * t60 + t68;
t9 = pkin(9) * t224 + t11;
t2 = qJD(6) * t20 + t235 * t19 + t239 * t9;
t1 = t2 * t239;
t220 = t237 * pkin(3);
t18 = t239 * t19;
t3 = -qJD(6) * t21 - t235 * t9 + t18;
t375 = t3 * t235;
t89 = -t239 * t226 + t235 * t260;
t91 = t226 * t235 + t239 * t260;
t374 = t91 * t89;
t300 = -t239 * t224 + t235 * t60;
t38 = qJD(6) * t91 + t300;
t372 = -t235 * t38 - t89 * t316;
t371 = pkin(3) * qJD(4);
t370 = t260 * t89;
t369 = t106 * t44;
t368 = t20 * t239;
t365 = t235 * t73;
t364 = t235 * t89;
t363 = t235 * t91;
t55 = t239 * t58;
t362 = t239 * t73;
t361 = t239 * t89;
t360 = t239 * t91;
t317 = qJD(6) * t235;
t37 = -t235 * t224 - t226 * t316 - t239 * t60 + t260 * t317;
t359 = t37 * t235;
t358 = t38 * t239;
t357 = t91 * t260;
t99 = -t142 * t236 - t343;
t255 = t99 + t352;
t301 = t354 * t236;
t100 = t240 * t142 - t126;
t84 = -t145 + t100;
t356 = -t234 * t84 + t255 * t354 + (t234 * t240 + t301) * t371;
t338 = t234 * t236;
t140 = (t240 * t354 - t338) * t371;
t53 = t234 * t255 + t354 * t84;
t355 = t140 - t53;
t353 = pkin(1) * qJDD(1);
t351 = t392 * t260;
t350 = t260 ^ 2;
t349 = t260 * t226;
t347 = t106 ^ 2;
t346 = t106 * t226;
t345 = t106 * t235;
t342 = t153 * t151;
t341 = t200 * t238;
t340 = t201 * t238;
t339 = t217 * t238;
t337 = t235 * t238;
t336 = t235 * t242;
t335 = t238 * t239;
t334 = t239 * t242;
t204 = qJ(2) + t220;
t332 = -t117 * t226 + t164 * t224;
t331 = pkin(5) * t340 + pkin(9) * t341;
t207 = pkin(3) * t240 + pkin(4);
t144 = pkin(3) * t301 + t234 * t207;
t330 = (t309 + t228) * qJ(2);
t329 = t242 * pkin(1) + t238 * qJ(2);
t327 = t231 - t232;
t245 = qJD(3) ^ 2;
t325 = -t245 - t246;
t324 = qJD(1) * t177;
t186 = pkin(3) * t320 + qJD(2);
t313 = qJDD(3) * t237;
t310 = g(1) * t340;
t308 = t241 * t246 * t237;
t42 = t44 * t317;
t307 = g(1) * t341 - t200 * t222 + t189;
t202 = pkin(4) * t234 + pkin(9);
t306 = qJD(6) * t392 * t202;
t219 = t242 * qJ(2);
t302 = -t238 * pkin(1) + t219;
t296 = t326 * qJDD(1);
t294 = qJDD(2) - t353;
t293 = qJD(6) * t259 + qJD(1);
t292 = -t8 - t310;
t291 = t237 * t303;
t130 = pkin(4) * t163 + t204;
t104 = pkin(4) * t118 + t186;
t290 = -pkin(5) * t201 - pkin(9) * t200;
t284 = -t106 * t46 + t260 * t47;
t138 = pkin(9) + t144;
t283 = -t138 * t58 + t369;
t282 = -t202 * t58 + t369;
t281 = -t21 * t235 - t368;
t280 = t20 * t235 - t21 * t239;
t279 = -t358 - t359;
t119 = t169 * t236 - t170 * t240;
t254 = -qJ(5) * t164 + t119;
t98 = -qJ(5) * t163 + t120;
t65 = t234 * t254 + t354 * t98;
t66 = pkin(5) * t259 + pkin(9) * t113 + t130;
t34 = t235 * t66 + t239 * t65;
t33 = -t235 * t65 + t239 * t66;
t278 = -t361 + t363;
t277 = t361 + t363;
t276 = t360 + t364;
t275 = -t117 * t153 - t164 * t87;
t274 = t118 * t151 + t163 * t88;
t273 = t21 * t260 + t235 * t310 + t388;
t272 = -t118 * t226 - t163 * t224;
t167 = t220 + t379;
t225 = -qJ(5) + t243;
t271 = t242 * t167 + t238 * t225 + t302;
t270 = -t20 * t260 + t239 * t396 + t42;
t269 = -t106 * t368 - t21 * t345 + t1 - t307;
t268 = t55 + (-t317 - t345) * t392;
t266 = -t379 - t289;
t265 = -qJD(6) * t61 + t189 - t9;
t264 = t238 * t167 - t242 * t225 + t329;
t262 = -t239 * t37 - t317 * t91;
t258 = 0.2e1 * qJ(2) * t314 + qJDD(3) * t244;
t159 = t373 * t321;
t160 = qJD(3) * t170;
t79 = t236 * t159 - t240 * t160 + t169 * t319 - t170 * t318;
t63 = pkin(5) * t260 + pkin(9) * t106 + t380;
t143 = -pkin(3) * t338 + t207 * t354;
t256 = t106 * t121 - t11 + t307;
t253 = -t121 * t260 + t10 - t310 + t396;
t252 = t281 * qJD(6) + t1 - t375;
t251 = -t117 * t94 + t118 * t95 - t163 * t295 + t164 * t49 - t328;
t250 = g(3) * t217 + t177 * t151 + t216 * t328 + t295;
t80 = -qJD(4) * t120 + t240 * t159 + t236 * t160;
t249 = -t244 * t245 + t385;
t248 = t117 * qJ(5) - t164 * qJD(5) + t80;
t247 = -g(1) * t339 - t177 * t153 + t217 * t222 + t205 + t49;
t214 = qJDD(3) * t241;
t211 = pkin(3) * t322;
t203 = -pkin(4) * t354 - pkin(5);
t168 = pkin(3) * t241 + t378;
t137 = -pkin(5) - t143;
t136 = t200 * t334 - t337;
t135 = t200 * t336 + t335;
t134 = t200 * t335 + t336;
t133 = -t200 * t337 + t334;
t124 = t211 + t380;
t92 = -t151 ^ 2 + t153 ^ 2;
t71 = t153 * t226 + (-t226 * t322 - t312) * t240 - t263;
t64 = t234 * t98 - t254 * t354;
t62 = t211 + t63;
t57 = -qJ(5) * t118 - qJD(5) * t163 + t79;
t51 = t354 * t82 - t367;
t50 = t234 * t82 + t77;
t41 = t60 + t346;
t40 = -t59 + t349;
t39 = -t347 + t350;
t35 = pkin(5) * t261 + pkin(9) * t73 + t104;
t27 = t234 * t248 + t354 * t57;
t26 = t234 * t57 - t248 * t354;
t25 = t235 * t62 + t239 * t53;
t24 = -t235 * t53 + t239 * t62;
t23 = t235 * t63 + t239 * t51;
t22 = -t235 * t51 + t239 * t63;
t15 = t364 * t392 - t358;
t14 = t298 * t91 - t359;
t13 = -t357 - t393;
t12 = t268 + t370;
t6 = -qJD(6) * t34 - t235 * t27 + t239 * t35;
t5 = qJD(6) * t33 + t235 * t35 + t239 * t27;
t4 = -t106 * t277 + t262 + t372;
t7 = [0, 0, 0, 0, 0, qJDD(1), t328, t288, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t328 - 0.2e1 * t353, t385, -pkin(1) * t294 - g(1) * t302 - g(2) * t329 + t330, qJDD(1) * t232 - 0.2e1 * t291, -0.2e1 * t237 * t311 + 0.2e1 * t314 * t327, -t237 * t245 + t214, qJDD(1) * t231 + 0.2e1 * t291, -t241 * t245 - t313, 0, t237 * t249 + t241 * t258, -t237 * t258 + t241 * t249, -t244 * t296 - t299 + t328, -g(1) * (t238 * t244 + t219) - g(2) * (pkin(7) * t242 + t329) + t244 * t299 + t330, t275, t117 * t151 - t118 * t153 + t163 * t87 - t164 * t88, t332, t274, t272, 0, t177 * t118 + t119 * t224 + t129 * t163 + t186 * t151 + t204 * t88 - t216 * t288 + t80 * t226, -t177 * t117 - t120 * t224 + t129 * t164 + t186 * t153 - t204 * t87 - t217 * t288 - t79 * t226, t119 * t87 - t120 * t88 - t151 * t79 - t153 * t80 - t251, -t295 * t120 + t95 * t79 + t49 * t119 + t94 * t80 + t129 * t204 + t177 * t186 - g(1) * (t242 * t220 + t219 + (-pkin(1) + t243) * t238) - g(2) * (t220 * t238 - t242 * t243 + t329) t391, t106 * t73 + t113 * t59 - t259 * t60 - t260 * t261, t390, t384, t383, 0, t104 * t106 + t121 * t261 + t130 * t59 - t200 * t288 - t64 * t224 - t26 * t226 + t259 * t68, t104 * t260 - t113 * t68 - t121 * t73 + t130 * t60 - t65 * t224 - t27 * t226 - t386, -t106 * t27 + t26 * t260 - t59 * t65 + t60 * t64 - t389, -g(1) * t271 - g(2) * t264 - t10 * t64 + t121 * t104 + t11 * t65 + t68 * t130 - t46 * t26 + t47 * t27, -t113 * t262 - t360 * t73, t277 * t73 - (t359 - t358 + (-t360 + t364) * qJD(6)) * t113, -t113 * t55 - t37 * t259 + t91 * t261 + (t113 * t317 - t362) * t392, t113 * t372 - t364 * t73, t113 * t366 - t38 * t259 - t89 * t261 + (t113 * t316 + t365) * t392, t259 * t58 + t261 * t392, -g(1) * t136 - g(2) * t134 - t113 * t388 + t20 * t261 + t3 * t259 + t26 * t89 + t33 * t58 - t44 * t365 + t64 * t38 + t392 * t6, -t44 * t362 + g(1) * t135 - g(2) * t133 - t5 * t392 - t2 * t259 - t21 * t261 + t26 * t91 - t34 * t58 - t64 * t37 - (t8 * t239 - t42) * t113, t33 * t37 - t34 * t38 - t5 * t89 - t6 * t91 - t281 * t73 + t386 - (qJD(6) * t280 - t2 * t235 - t3 * t239) * t113, t2 * t34 + t21 * t5 + t3 * t33 + t20 * t6 + t8 * t64 + t44 * t26 - g(1) * (t242 * t289 + t271) - g(2) * (t238 * t289 + t264); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t246, t398 + t294, 0, 0, 0, 0, 0, 0, t237 * t325 + t214, t241 * t325 - t313, -t296, t299 + t398, 0, 0, 0, 0, 0, 0, -qJD(1) * t151 + t332, -qJD(1) * t153 + t272, -t274 - t275, t251 - t324, 0, 0, 0, 0, 0, 0, -qJD(1) * t106 + t390, -qJD(1) * t260 + t383, -t384 - t391, -qJD(1) * t121 + t389, 0, 0, 0, 0, 0, 0, -t259 * t366 + t113 * t38 + t73 * t89 + (-t235 * t261 - t239 * t293) * t392, -t259 * t55 - t113 * t37 + t73 * t91 + (t235 * t293 - t239 * t261) * t392, t278 * t261 + t276 * qJD(1) + (qJD(6) * t276 + t279) * t259, qJD(1) * t281 + t8 * t113 + t252 * t259 - t261 * t280 + t44 * t73 - t328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t308, -t327 * t246, t311, -t308, -t312, qJDD(3), t241 * t398 + t165 + t376, g(3) * t241 + (-t183 - t398) * t237, 0, 0, t342, t92, -t285, -t342, t71, t224, -t99 * t226 + (-t151 * t322 + t224 * t240 - t226 * t319) * pkin(3) + t247, t100 * t226 + (-t153 * t322 - t224 * t236 - t226 * t318) * pkin(3) + t250 (t95 + t99) * t153 + (t100 - t94) * t151 + (-t236 * t88 + t240 * t87 + (-t151 * t240 + t153 * t236) * qJD(4)) * pkin(3), -t95 * t100 - t94 * t99 + (t376 - t236 * t295 + t240 * t49 + (-t236 * t94 + t240 * t95) * qJD(4) + (-t328 - t324) * t241) * pkin(3), t397, t39, t41, -t397, t40, t224, -t124 * t106 + t143 * t224 - t226 * t356 + t253, -t124 * t260 - t144 * t224 - t226 * t355 + t256, -t106 * t355 - t143 * t60 - t144 * t59 + t260 * t356 + t284, g(3) * t167 + t10 * t143 + t11 * t144 - t121 * t124 - t168 * t328 + t355 * t47 - t356 * t46, t14, t4, t13, t15, t12, -t351, t137 * t38 + t356 * t89 + t292 * t239 + t283 * t235 + (-t138 * t316 - t140 * t235 - t24) * t392 + t270, -t137 * t37 + t356 * t91 + t283 * t239 - t396 * t235 + (t138 * t317 - t140 * t239 + t25) * t392 + t273, t24 * t91 + t25 * t89 + (-t138 * t38 - t140 * t89 + (t138 * t91 - t20) * qJD(6)) * t239 + (-t138 * t37 + t140 * t91 - t3 + (t138 * t89 - t21) * qJD(6)) * t235 + t269, t8 * t137 - t21 * t25 - t20 * t24 - g(1) * (t168 * t238 + t331) - g(3) * (-t220 + t266) + t356 * t44 - t280 * t140 - (-t168 + t290) * t222 + t252 * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t342, t92, -t285, -t342, t71, t224, t95 * t226 + t247, t226 * t94 + t250, 0, 0, t397, t39, t41, -t397, t40, t224, t50 * t226 + (-t106 * t153 + t224 * t354) * pkin(4) + t253, t51 * t226 + (-t153 * t260 - t224 * t234) * pkin(4) + t256, t51 * t106 - t50 * t260 + (-t234 * t59 - t354 * t60) * pkin(4) + t284, t46 * t50 - t47 * t51 + (t10 * t354 + t11 * t234 - t121 * t153 - t217 * t328 + t205) * pkin(4), t14, t4, t13, t15, t12, -t351, -t22 * t392 + t203 * t38 - t50 * t89 + t282 * t235 + (t292 - t306) * t239 + t270, t23 * t392 - t203 * t37 - t50 * t91 + t282 * t239 + (-t396 + t306) * t235 + t273, t22 * t91 + t23 * t89 - t375 + t279 * t202 + (t202 * t276 + t281) * qJD(6) + t269, t8 * t203 - t21 * t23 - t20 * t22 - t44 * t50 - g(1) * (pkin(4) * t339 + t331) - g(3) * t266 - (t290 - t378) * t222 + t252 * t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 + t349, t60 - t346, -t347 - t350, t106 * t47 + t260 * t46 - t288 + t68, 0, 0, 0, 0, 0, 0, t268 - t370, -t357 + t393, t106 * t278 - t262 + t372, -t44 * t260 + (t3 + t399) * t239 + (t2 - t400) * t235 - t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t374, -t89 ^ 2 + t91 ^ 2, t392 * t89 - t37, -t374, -t300 + (-qJD(6) + t392) * t91, t58, -g(1) * t133 - g(2) * t135 + t235 * t265 - t316 * t45 - t44 * t91 + t18 + t399, g(1) * t134 - g(2) * t136 + t400 + t44 * t89 + (qJD(6) * t45 - t19) * t235 + t265 * t239, 0, 0;];
tau_reg  = t7;
