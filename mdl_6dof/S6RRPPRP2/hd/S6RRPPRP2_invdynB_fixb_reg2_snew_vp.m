% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 09:13
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:12:03
% EndTime: 2019-05-06 09:12:31
% DurationCPUTime: 26.08s
% Computational Cost: add. (55666->663), mult. (130337->897), div. (0->0), fcn. (89418->8), ass. (0->491)
t877 = sin(pkin(9));
t878 = cos(pkin(9));
t884 = cos(qJ(2));
t881 = sin(qJ(2));
t946 = qJD(1) * t881;
t837 = -t878 * t884 * qJD(1) + t877 * t946;
t839 = (t877 * t884 + t878 * t881) * qJD(1);
t966 = t839 * t837;
t1037 = qJDD(2) + t966;
t1053 = t1037 * t877;
t886 = qJD(2) ^ 2;
t998 = t839 ^ 2;
t817 = t998 + t886;
t708 = t817 * t878 + t1053;
t1052 = t1037 * t878;
t714 = -t817 * t877 + t1052;
t658 = t708 * t881 - t714 * t884;
t939 = qJD(1) * qJD(2);
t928 = t884 * t939;
t937 = qJDD(1) * t881;
t849 = t928 + t937;
t868 = t884 * qJDD(1);
t929 = t881 * t939;
t912 = -t868 + t929;
t787 = t878 * t849 - t877 * t912;
t827 = t837 * qJD(2);
t746 = -t827 + t787;
t882 = sin(qJ(1));
t885 = cos(qJ(1));
t617 = t658 * t882 - t746 * t885;
t1099 = pkin(6) * t617;
t619 = t658 * t885 + t746 * t882;
t1098 = pkin(6) * t619;
t651 = t708 * t884 + t714 * t881;
t1097 = pkin(7) * t651;
t1096 = -pkin(1) * t651 - pkin(2) * t708;
t1095 = pkin(1) * t746 - pkin(7) * t658;
t1009 = t827 + t787;
t769 = t966 - qJDD(2);
t1065 = t769 * t877;
t818 = t998 - t886;
t704 = t818 * t878 + t1065;
t1064 = t769 * t878;
t710 = -t818 * t877 + t1064;
t654 = t704 * t881 - t710 * t884;
t1094 = -t1009 * t885 + t654 * t882;
t1093 = t1009 * t882 + t654 * t885;
t999 = t837 ^ 2;
t813 = t999 - t886;
t706 = t813 * t877 + t1052;
t713 = -t813 * t878 + t1053;
t656 = t706 * t881 + t713 * t884;
t786 = t849 * t877 + t878 * t912;
t945 = qJD(2) * t839;
t742 = t786 - t945;
t1092 = t656 * t882 - t742 * t885;
t1091 = t656 * t885 + t742 * t882;
t1038 = t786 + t945;
t768 = -t886 - t999;
t691 = t768 * t877 - t1064;
t694 = -t768 * t878 - t1065;
t630 = t691 * t881 + t694 * t884;
t606 = t1038 * t885 + t630 * t882;
t1090 = pkin(6) * t606;
t612 = -t1038 * t882 + t630 * t885;
t1089 = pkin(6) * t612;
t1006 = -t999 - t998;
t1062 = t1009 * t877 - t742 * t878;
t1063 = -t1009 * t878 - t742 * t877;
t1069 = t1062 * t884 - t1063 * t881;
t1080 = t1006 * t882 + t1069 * t885;
t1088 = pkin(6) * t1080;
t1081 = -t1006 * t885 + t1069 * t882;
t1087 = pkin(6) * t1081;
t1068 = t1062 * t881 + t1063 * t884;
t1085 = pkin(7) * t1068;
t1084 = qJ(3) * t708;
t1083 = qJ(3) * t714;
t561 = -pkin(1) * t1068 - pkin(2) * t1063;
t1082 = -pkin(1) * t1006 + pkin(7) * t1069;
t1079 = t704 * t884 + t710 * t881;
t1078 = t706 * t884 - t713 * t881;
t627 = t691 * t884 - t694 * t881;
t1077 = pkin(7) * t627;
t1075 = qJ(3) * t1063;
t1074 = -pkin(1) * t627 - pkin(2) * t691;
t1073 = pkin(1) * t1038 + pkin(7) * t630;
t1072 = -pkin(2) * t1006 + qJ(3) * t1062;
t1007 = -t998 + t999;
t1049 = -t1038 * t877 + t746 * t878;
t975 = t746 * t877;
t976 = t1038 * t878;
t1054 = -t975 - t976;
t1060 = -t1049 * t881 + t1054 * t884;
t1071 = t1007 * t885 + t1060 * t882;
t1070 = -t1007 * t882 + t1060 * t885;
t1061 = t1049 * t884 + t1054 * t881;
t880 = sin(qJ(5));
t883 = cos(qJ(5));
t799 = qJD(2) * t880 - t883 * t837;
t801 = qJD(2) * t883 + t837 * t880;
t740 = t801 * t799;
t782 = qJDD(5) + t787;
t1033 = t740 - t782;
t1057 = pkin(5) * t1033;
t1056 = qJ(3) * t691;
t1055 = qJ(3) * t694;
t1017 = qJ(4) * t746;
t1036 = 2 * qJD(4);
t997 = pkin(3) + pkin(8);
t979 = t1033 * t883;
t956 = t880 * t1033;
t875 = t884 ^ 2;
t887 = qJD(1) ^ 2;
t858 = t882 * g(1) - t885 * g(2);
t904 = qJDD(1) * pkin(1) + t858;
t737 = (qJ(3) * t875 + pkin(7)) * t887 - pkin(2) * t912 - qJDD(3) - (qJD(2) * pkin(2) - qJ(3) * t946) * t946 + t904;
t1024 = pkin(3) * t945 - t1036 * t839 - t737;
t913 = t878 * t787 - t877 * t945;
t915 = t877 * t787 + t878 * t945;
t1001 = -t881 * t915 + t884 * t913;
t930 = t885 * t966;
t1023 = t1001 * t882 - t930;
t931 = t882 * t966;
t1022 = t1001 * t885 + t931;
t902 = t786 * t877 + t827 * t878;
t914 = -t878 * t786 + t827 * t877;
t1003 = -t881 * t914 + t884 * t902;
t1021 = t1003 * t882 + t930;
t1020 = t1003 * t885 - t931;
t899 = (-t837 * t877 - t839 * t878) * qJD(2);
t900 = (-t837 * t878 + t839 * t877) * qJD(2);
t1004 = -t881 * t899 + t884 * t900;
t867 = t882 * qJDD(2);
t1019 = t1004 * t885 + t867;
t934 = qJDD(2) * t885;
t1018 = t1004 * t882 - t934;
t797 = t799 ^ 2;
t831 = qJD(5) + t839;
t829 = t831 ^ 2;
t698 = -t829 - t797;
t634 = t698 * t880 - t979;
t635 = t698 * t883 + t956;
t1016 = pkin(4) * t634 - qJ(4) * t635;
t798 = t801 ^ 2;
t716 = -t798 - t829;
t689 = t740 + t782;
t981 = t689 * t880;
t639 = t716 * t883 - t981;
t980 = t689 * t883;
t640 = -t880 * t716 - t980;
t1015 = pkin(4) * t639 - qJ(4) * t640;
t702 = -qJD(5) * t799 + qJDD(2) * t883 + t786 * t880;
t765 = t831 * t799;
t1014 = t702 - t765;
t812 = pkin(4) * t839 - qJD(2) * pkin(8);
t944 = qJD(3) * t837;
t822 = -0.2e1 * t944;
t1011 = t822 + (t1036 + t812) * qJD(2);
t938 = qJD(4) * qJD(2);
t1010 = 0.2e1 * t944 - 0.2e1 * t938;
t870 = t875 * t887;
t864 = -t870 - t886;
t943 = qJD(3) * t839;
t825 = 0.2e1 * t943;
t767 = pkin(3) * t837 - qJ(4) * t839;
t954 = t881 * t887;
t859 = g(1) * t885 + g(2) * t882;
t843 = -pkin(1) * t887 + qJDD(1) * pkin(7) - t859;
t955 = t881 * t843;
t729 = qJDD(2) * pkin(2) - t849 * qJ(3) - t955 + (pkin(2) * t954 + qJ(3) * t939 - g(3)) * t884;
t809 = -t881 * g(3) + t884 * t843;
t730 = pkin(2) * t864 + t868 * qJ(3) + t809;
t948 = -t878 * t729 + t877 * t730;
t903 = qJDD(2) * pkin(3) + t886 * qJ(4) - t839 * t767 - qJDD(4) - t948;
t898 = t825 - t903;
t569 = pkin(4) * t1009 + pkin(8) * t769 + t898;
t888 = -t1017 + t1024;
t587 = -pkin(4) * t999 + t786 * t997 - t839 * t812 + t888;
t523 = -t883 * t569 + t880 * t587;
t1008 = qJ(6) * t765 + 0.2e1 * qJD(6) * t801 + t1057 + t523;
t524 = t880 * t569 + t883 * t587;
t919 = t880 * qJDD(2) - t883 * t786;
t701 = -qJD(5) * t801 - t919;
t751 = pkin(5) * t831 - qJ(6) * t801;
t901 = t701 * qJ(6) - 0.2e1 * qJD(6) * t799 - t831 * t751 + t524;
t1005 = t881 * t900 + t884 * t899;
t1002 = t881 * t902 + t884 * t914;
t1000 = t881 * t913 + t884 * t915;
t996 = pkin(3) * t878;
t673 = t702 + t765;
t897 = (-qJD(5) + t831) * t801 - t919;
t598 = -t673 * t883 + t880 * t897;
t697 = -t797 - t798;
t563 = -t598 * t878 + t697 * t877;
t564 = t598 * t877 + t697 * t878;
t509 = -t563 * t881 + t564 * t884;
t600 = t880 * t673 + t883 * t897;
t482 = t509 * t882 - t600 * t885;
t995 = pkin(6) * t482;
t669 = (qJD(5) + t831) * t801 + t919;
t577 = -t634 * t878 + t669 * t877;
t578 = t634 * t877 + t669 * t878;
t521 = -t577 * t881 + t578 * t884;
t495 = t521 * t882 - t635 * t885;
t994 = pkin(6) * t495;
t583 = t1014 * t877 - t639 * t878;
t584 = t1014 * t878 + t639 * t877;
t527 = -t583 * t881 + t584 * t884;
t499 = t527 * t882 - t640 * t885;
t993 = pkin(6) * t499;
t508 = t563 * t884 + t564 * t881;
t992 = pkin(7) * t508;
t520 = t577 * t884 + t578 * t881;
t991 = pkin(7) * t520;
t526 = t583 * t884 + t584 * t881;
t990 = pkin(7) * t526;
t989 = qJ(3) * t563;
t988 = qJ(3) * t577;
t987 = qJ(3) * t583;
t491 = -qJ(6) * t702 - t1008;
t984 = t491 * t883;
t642 = t825 + t948;
t949 = t877 * t729 + t878 * t730;
t643 = t822 + t949;
t570 = -t642 * t878 + t643 * t877;
t983 = t570 * t881;
t982 = t570 * t884;
t978 = t737 * t877;
t977 = t737 * t878;
t968 = t831 * t880;
t967 = t831 * t883;
t842 = t887 * pkin(7) + t904;
t965 = t842 * t881;
t964 = t842 * t884;
t850 = t868 - 0.2e1 * t929;
t963 = t850 * t884;
t865 = t884 * t954;
t856 = qJDD(2) + t865;
t962 = t856 * t881;
t857 = qJDD(2) - t865;
t961 = t857 * t881;
t960 = t857 * t884;
t874 = t881 ^ 2;
t959 = t874 * t887;
t958 = t880 * t491;
t908 = t886 * pkin(3) + t837 * t767 - t949;
t896 = qJDD(2) * qJ(4) - t908;
t892 = -t786 * pkin(4) - pkin(8) * t999 + t896;
t579 = t892 + t1011;
t957 = t880 * t579;
t953 = t883 * t579;
t952 = -pkin(1) * t600 + pkin(7) * t509;
t951 = -pkin(1) * t635 + pkin(7) * t521;
t950 = -pkin(1) * t640 + pkin(7) * t527;
t947 = t874 + t875;
t936 = qJDD(1) * t882;
t935 = qJDD(1) * t885;
t933 = t877 * t740;
t932 = t878 * t740;
t927 = qJ(4) * t877 + pkin(2);
t926 = -pkin(2) * t600 + qJ(3) * t564;
t925 = -pkin(2) * t635 + qJ(3) * t578;
t924 = -pkin(2) * t640 + qJ(3) * t584;
t539 = pkin(4) * t598 - qJ(4) * t600;
t571 = t642 * t877 + t878 * t643;
t808 = t884 * g(3) + t955;
t733 = t808 * t881 + t884 * t809;
t796 = -t858 * t882 - t885 * t859;
t918 = t882 * t865;
t917 = t885 * t865;
t853 = -t882 * t887 + t935;
t916 = -pkin(6) * t853 - g(3) * t882;
t469 = -t523 * t883 + t524 * t880;
t470 = t880 * t523 + t883 * t524;
t732 = t808 * t884 - t809 * t881;
t795 = t858 * t885 - t859 * t882;
t907 = pkin(4) * t669 - t635 * t997;
t906 = pkin(4) * t1014 - t640 * t997;
t905 = pkin(4) * t697 - t600 * t997;
t615 = -0.2e1 * t943 + t903;
t895 = -pkin(1) * t508 - pkin(2) * t563 - qJ(4) * t697 + t598 * t997;
t894 = -pkin(1) * t520 - pkin(2) * t577 - qJ(4) * t669 + t634 * t997;
t893 = -pkin(1) * t526 - pkin(2) * t583 - qJ(4) * t1014 + t639 * t997;
t613 = t822 + t896 + 0.2e1 * t938;
t890 = -t701 * pkin(5) - t797 * qJ(6) + t801 * t751 + qJDD(6) + t892;
t541 = t890 + t1011;
t889 = -t786 * pkin(3) - t1024;
t863 = t870 - t886;
t862 = -t886 - t959;
t861 = t886 - t959;
t855 = t870 - t959;
t854 = t870 + t959;
t852 = t885 * t887 + t936;
t851 = t947 * qJDD(1);
t848 = 0.2e1 * t928 + t937;
t846 = t884 * t856;
t845 = t947 * t939;
t832 = -pkin(6) * t852 + g(3) * t885;
t811 = t849 * t884 - t874 * t939;
t810 = -t875 * t939 + t881 * t912;
t807 = -t862 * t881 - t960;
t806 = -t861 * t881 + t846;
t805 = t864 * t884 - t962;
t804 = t863 * t884 - t961;
t803 = t862 * t884 - t961;
t802 = t864 * t881 + t846;
t790 = t851 * t885 - t854 * t882;
t789 = t851 * t882 + t854 * t885;
t788 = -t848 * t881 + t963;
t760 = t807 * t885 + t848 * t882;
t759 = t805 * t885 - t850 * t882;
t758 = t807 * t882 - t848 * t885;
t757 = t805 * t882 + t850 * t885;
t755 = -t798 + t829;
t754 = t797 - t829;
t753 = -pkin(7) * t803 - t964;
t752 = -pkin(7) * t802 - t965;
t750 = -pkin(1) * t803 + t809;
t749 = -pkin(1) * t802 + t808;
t735 = t798 - t797;
t696 = t733 * t885 - t842 * t882;
t695 = t733 * t882 + t842 * t885;
t686 = (t799 * t883 - t801 * t880) * t831;
t685 = (t799 * t880 + t801 * t883) * t831;
t667 = -t702 * t883 + t801 * t968;
t666 = -t702 * t880 - t801 * t967;
t665 = t701 * t880 - t799 * t967;
t664 = -t701 * t883 - t799 * t968;
t663 = -t977 + t1084;
t650 = -t685 * t877 + t782 * t878;
t649 = t685 * t878 + t782 * t877;
t648 = -t754 * t883 + t981;
t647 = t755 * t880 + t979;
t646 = -t754 * t880 - t980;
t645 = -t755 * t883 + t956;
t644 = -t978 - t1056;
t626 = -pkin(2) * t746 - t1083 - t978;
t625 = t889 + t1017;
t624 = -t666 * t877 + t932;
t623 = -t664 * t877 - t932;
t622 = t666 * t878 + t933;
t621 = t664 * t878 - t933;
t620 = -pkin(2) * t1038 - t1055 + t977;
t614 = -pkin(5) * t1014 - qJ(6) * t689;
t602 = (t786 + t1038) * pkin(3) + t888;
t601 = t889 + 0.2e1 * t1017;
t599 = t1014 * t880 + t669 * t883;
t597 = -t1014 * t883 + t669 * t880;
t593 = -qJ(4) * t1006 + t898;
t592 = -pkin(3) * t1006 + t613;
t591 = -t645 * t877 + t673 * t878;
t590 = -t646 * t877 + t878 * t897;
t589 = t645 * t878 + t673 * t877;
t588 = t646 * t878 + t877 * t897;
t581 = -t649 * t881 + t650 * t884;
t580 = t649 * t884 + t650 * t881;
t568 = -t597 * t877 + t735 * t878;
t567 = t597 * t878 + t735 * t877;
t560 = -t1096 + t643;
t559 = pkin(2) * t737 + qJ(3) * t571;
t558 = -pkin(3) * t975 + t601 * t878 - t1084;
t557 = -t622 * t881 + t624 * t884;
t556 = -t621 * t881 + t623 * t884;
t555 = t622 * t884 + t624 * t881;
t554 = t621 * t884 + t623 * t881;
t553 = qJ(4) * t976 - t602 * t877 + t1056;
t552 = t581 * t885 - t686 * t882;
t551 = t581 * t882 + t686 * t885;
t550 = t1074 + t642;
t549 = -t570 - t1075;
t548 = t1083 + t877 * t601 + (pkin(2) + t996) * t746;
t547 = t613 * t878 - t615 * t877;
t546 = t613 * t877 + t615 * t878;
t545 = t1038 * t927 + t878 * t602 + t1055;
t544 = -t626 * t881 + t663 * t884 + t1097;
t543 = pkin(3) * t1009 + qJ(4) * t742 + t561;
t542 = t1072 + t571;
t540 = -pkin(3) * t817 + (-qJDD(2) - t1037) * qJ(4) + t908 + t1010 + t1096;
t538 = t557 * t885 - t667 * t882;
t537 = t556 * t885 - t665 * t882;
t536 = t557 * t882 + t667 * t885;
t535 = t556 * t882 + t665 * t885;
t534 = -t620 * t881 + t644 * t884 - t1077;
t533 = -qJ(6) * t716 + t541;
t532 = -t589 * t881 + t591 * t884;
t531 = -t588 * t881 + t590 * t884;
t530 = t589 * t884 + t591 * t881;
t529 = t588 * t884 + t590 * t881;
t528 = -pkin(3) * t769 + qJ(4) * t768 - t1074 + t615;
t518 = t571 * t884 - t983;
t517 = t571 * t881 + t982;
t516 = -pkin(5) * t673 + t539;
t515 = -t567 * t881 + t568 * t884;
t514 = t567 * t884 + t568 * t881;
t513 = -t592 * t877 + t593 * t878 - t1075;
t512 = -pkin(5) * t669 + qJ(6) * t698 - qJD(2) * t812 + t1010 - t890;
t511 = t518 * t885 - t737 * t882;
t510 = t518 * t882 + t737 * t885;
t506 = t532 * t885 - t647 * t882;
t505 = t531 * t885 - t648 * t882;
t504 = t532 * t882 + t647 * t885;
t503 = t531 * t882 + t648 * t885;
t502 = t592 * t878 + t593 * t877 + t1072;
t501 = t906 - t957;
t500 = t527 * t885 + t640 * t882;
t498 = pkin(6) * t500;
t497 = t907 + t953;
t496 = t521 * t885 + t635 * t882;
t494 = pkin(6) * t496;
t493 = -pkin(5) * t797 + t901;
t492 = -qJ(3) * t546 + (-pkin(3) * t877 + qJ(4) * t878) * t625;
t489 = -t546 * t881 + t547 * t884;
t488 = t546 * t884 + t547 * t881;
t487 = t515 * t885 - t599 * t882;
t486 = t515 * t882 + t599 * t885;
t485 = -pkin(1) * t517 - pkin(2) * t570;
t484 = -t524 + t1015;
t483 = t509 * t885 + t600 * t882;
t481 = pkin(6) * t483;
t480 = -t523 + t1016;
t479 = -t548 * t881 + t558 * t884 - t1097;
t478 = (t673 + t702) * qJ(6) + t1008;
t477 = qJ(6) * t897 + (-t697 - t797) * pkin(5) + t901;
t476 = qJ(3) * t547 + (t927 + t996) * t625;
t475 = -t545 * t881 + t553 * t884 + t1077;
t474 = t489 * t885 - t625 * t882;
t473 = t489 * t882 + t625 * t885;
t472 = -t542 * t881 + t549 * t884 - t1085;
t471 = (t716 + t797) * pkin(5) - t901 + t1015;
t468 = -t880 * t533 - t883 * t614 + t906;
t467 = -qJ(6) * t956 - t883 * t512 + t907;
t466 = -pkin(5) * t541 + qJ(6) * t493;
t465 = t1016 + t491 - t1057;
t464 = -pkin(7) * t517 - qJ(3) * t982 - t559 * t881;
t463 = t469 * t877 + t579 * t878;
t462 = -t469 * t878 + t579 * t877;
t461 = -t502 * t881 + t513 * t884 - t1085;
t460 = t893 - t953;
t459 = t493 * t883 - t958;
t458 = t493 * t880 + t984;
t457 = t894 - t957;
t456 = -pkin(1) * t488 - pkin(2) * t546 - pkin(3) * t615 - qJ(4) * t613;
t455 = -t470 + t905;
t454 = t484 * t878 - t501 * t877 - t987;
t453 = t480 * t878 - t497 * t877 - t988;
t452 = -t533 * t883 + t614 * t880 + t893;
t451 = t458 * t877 + t541 * t878;
t450 = -t458 * t878 + t541 * t877;
t449 = t484 * t877 + t501 * t878 + t924;
t448 = -qJ(6) * t979 + t512 * t880 + t894;
t447 = t480 * t877 + t497 * t878 + t925;
t446 = pkin(4) * t469 - qJ(4) * t470;
t445 = -t883 * t477 - t880 * t478 + t905;
t444 = -t455 * t877 + t539 * t878 - t989;
t443 = pkin(4) * t579 - t470 * t997;
t442 = -t468 * t877 + t471 * t878 - t987;
t441 = -pkin(7) * t488 - t476 * t881 + t492 * t884;
t440 = t469 + t895;
t439 = t465 * t878 - t467 * t877 - t988;
t438 = t455 * t878 + t539 * t877 + t926;
t437 = t468 * t878 + t471 * t877 + t924;
t436 = t465 * t877 + t467 * t878 + t925;
t435 = -t462 * t881 + t463 * t884;
t434 = t462 * t884 + t463 * t881;
t433 = -t445 * t877 + t516 * t878 - t989;
t432 = t477 * t880 - t478 * t883 + t895;
t431 = t445 * t878 + t516 * t877 + t926;
t430 = pkin(4) * t458 + pkin(5) * t491 - qJ(4) * t459;
t429 = t435 * t885 + t470 * t882;
t428 = t435 * t882 - t470 * t885;
t427 = -t450 * t881 + t451 * t884;
t426 = t450 * t884 + t451 * t881;
t425 = -t449 * t881 + t454 * t884 - t990;
t424 = -t447 * t881 + t453 * t884 - t991;
t423 = pkin(4) * t541 + qJ(6) * t958 - t459 * t997 - t883 * t466;
t422 = t427 * t885 + t459 * t882;
t421 = t427 * t882 - t459 * t885;
t420 = -t438 * t881 + t444 * t884 - t992;
t419 = -t437 * t881 + t442 * t884 - t990;
t418 = -t436 * t881 + t439 * t884 - t991;
t417 = -qJ(3) * t462 - t443 * t877 + t446 * t878;
t416 = -pkin(1) * t434 - pkin(2) * t462 - qJ(4) * t579 + t469 * t997;
t415 = -pkin(2) * t470 + qJ(3) * t463 + t443 * t878 + t446 * t877;
t414 = -t431 * t881 + t433 * t884 - t992;
t413 = -qJ(3) * t450 - t423 * t877 + t430 * t878;
t412 = -pkin(1) * t426 - pkin(2) * t450 - qJ(4) * t541 + qJ(6) * t984 + t458 * t997 + t880 * t466;
t411 = -pkin(2) * t459 + qJ(3) * t451 + t423 * t878 + t430 * t877;
t410 = -pkin(7) * t434 - t415 * t881 + t417 * t884;
t409 = -pkin(7) * t426 - t411 * t881 + t413 * t884;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t852, -t853, 0, t796, 0, 0, 0, 0, 0, 0, t759, t760, t790, t696, 0, 0, 0, 0, 0, 0, -t612, t619, t1080, t511, 0, 0, 0, 0, 0, 0, t1080, t612, -t619, t474, 0, 0, 0, 0, 0, 0, t496, t500, t483, t429, 0, 0, 0, 0, 0, 0, t496, t500, t483, t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t853, -t852, 0, t795, 0, 0, 0, 0, 0, 0, t757, t758, t789, t695, 0, 0, 0, 0, 0, 0, -t606, t617, t1081, t510, 0, 0, 0, 0, 0, 0, t1081, t606, -t617, t473, 0, 0, 0, 0, 0, 0, t495, t499, t482, t428, 0, 0, 0, 0, 0, 0, t495, t499, t482, t421; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t802, t803, 0, -t732, 0, 0, 0, 0, 0, 0, t627, -t651, t1068, t517, 0, 0, 0, 0, 0, 0, t1068, -t627, t651, t488, 0, 0, 0, 0, 0, 0, t520, t526, t508, t434, 0, 0, 0, 0, 0, 0, t520, t526, t508, t426; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t853, 0, -t852, 0, t916, -t832, -t795, -pkin(6) * t795, t811 * t885 - t918, t788 * t885 - t855 * t882, t806 * t885 + t881 * t936, t810 * t885 + t918, t804 * t885 + t868 * t882, t845 * t885 + t867, -pkin(6) * t757 - t749 * t882 + t752 * t885, -pkin(6) * t758 - t750 * t882 + t753 * t885, -pkin(6) * t789 + t732 * t885, -pkin(6) * t695 - (pkin(1) * t882 - pkin(7) * t885) * t732, t1022, t1070, t1093, t1020, -t1091, t1019, t534 * t885 - t550 * t882 + t1090, t544 * t885 - t560 * t882 - t1099, t472 * t885 - t561 * t882 - t1087, -pkin(6) * t510 + t464 * t885 - t485 * t882, t1019, -t1093, t1091, t1022, t1070, t1020, t461 * t885 - t543 * t882 - t1087, t475 * t885 - t528 * t882 - t1090, t479 * t885 - t540 * t882 + t1099, -pkin(6) * t473 + t441 * t885 - t456 * t882, t538, t487, t506, t537, t505, t552, t424 * t885 - t457 * t882 - t994, t425 * t885 - t460 * t882 - t993, t420 * t885 - t440 * t882 - t995, -pkin(6) * t428 + t410 * t885 - t416 * t882, t538, t487, t506, t537, t505, t552, t418 * t885 - t448 * t882 - t994, t419 * t885 - t452 * t882 - t993, t414 * t885 - t432 * t882 - t995, -pkin(6) * t421 + t409 * t885 - t412 * t882; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t852, 0, t853, 0, t832, t916, t796, pkin(6) * t796, t811 * t882 + t917, t788 * t882 + t855 * t885, t806 * t882 - t881 * t935, t810 * t882 - t917, t804 * t882 - t868 * t885, t845 * t882 - t934, pkin(6) * t759 + t749 * t885 + t752 * t882, pkin(6) * t760 + t750 * t885 + t753 * t882, pkin(6) * t790 + t732 * t882, pkin(6) * t696 - (-pkin(1) * t885 - pkin(7) * t882) * t732, t1023, t1071, t1094, t1021, -t1092, t1018, t534 * t882 + t550 * t885 - t1089, t544 * t882 + t560 * t885 + t1098, t472 * t882 + t561 * t885 + t1088, pkin(6) * t511 + t464 * t882 + t485 * t885, t1018, -t1094, t1092, t1023, t1071, t1021, t461 * t882 + t543 * t885 + t1088, t475 * t882 + t528 * t885 + t1089, t479 * t882 + t540 * t885 - t1098, pkin(6) * t474 + t441 * t882 + t456 * t885, t536, t486, t504, t535, t503, t551, t424 * t882 + t457 * t885 + t494, t425 * t882 + t460 * t885 + t498, t420 * t882 + t440 * t885 + t481, pkin(6) * t429 + t410 * t882 + t416 * t885, t536, t486, t504, t535, t503, t551, t418 * t882 + t448 * t885 + t494, t419 * t882 + t452 * t885 + t498, t414 * t882 + t432 * t885 + t481, pkin(6) * t422 + t409 * t882 + t412 * t885; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t858, t859, 0, 0, (t849 + t928) * t881, t848 * t884 + t850 * t881, t861 * t884 + t962, t963, t863 * t881 + t960, 0, pkin(1) * t850 + pkin(7) * t805 + t964, -pkin(1) * t848 + pkin(7) * t807 - t965, pkin(1) * t854 + pkin(7) * t851 + t733, pkin(1) * t842 + pkin(7) * t733, t1000, t1061, -t1079, t1002, t1078, t1005, t620 * t884 + t644 * t881 - t1073, t626 * t884 + t663 * t881 - t1095, t542 * t884 + t549 * t881 + t1082, pkin(1) * t737 + pkin(7) * t518 - qJ(3) * t983 + t559 * t884, t1005, t1079, -t1078, t1000, t1061, t1002, t502 * t884 + t513 * t881 + t1082, t545 * t884 + t553 * t881 + t1073, t548 * t884 + t558 * t881 + t1095, pkin(1) * t625 + pkin(7) * t489 + t476 * t884 + t492 * t881, t555, t514, t530, t554, t529, t580, t447 * t884 + t453 * t881 + t951, t449 * t884 + t454 * t881 + t950, t438 * t884 + t444 * t881 + t952, -pkin(1) * t470 + pkin(7) * t435 + t415 * t884 + t417 * t881, t555, t514, t530, t554, t529, t580, t436 * t884 + t439 * t881 + t951, t437 * t884 + t442 * t881 + t950, t431 * t884 + t433 * t881 + t952, -pkin(1) * t459 + pkin(7) * t427 + t411 * t884 + t413 * t881;];
tauB_reg  = t1;
