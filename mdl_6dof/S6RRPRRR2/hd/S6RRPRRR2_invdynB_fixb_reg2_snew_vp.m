% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 19:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:57:05
% EndTime: 2019-05-06 19:58:05
% DurationCPUTime: 51.34s
% Computational Cost: add. (420486->961), mult. (974905->1479), div. (0->0), fcn. (749040->12), ass. (0->660)
t1126 = cos(qJ(2));
t1109 = t1126 * qJDD(1);
t1121 = sin(qJ(2));
t1201 = qJD(1) * t1121;
t1162 = qJD(2) * t1201;
t1083 = t1109 - t1162;
t1115 = t1126 ^ 2;
t1129 = qJD(1) ^ 2;
t1143 = qJD(2) * pkin(2) - qJ(3) * t1201;
t1122 = sin(qJ(1));
t1127 = cos(qJ(1));
t1092 = t1122 * g(1) - t1127 * g(2);
t1144 = qJDD(1) * pkin(1) + t1092;
t1005 = t1083 * pkin(2) - t1143 * t1201 - qJDD(3) + t1144 + (qJ(3) * t1115 + pkin(7)) * t1129;
t1116 = sin(pkin(11));
t1117 = cos(pkin(11));
t1200 = qJD(1) * t1126;
t1073 = -t1116 * t1201 + t1117 * t1200;
t1074 = t1116 * t1200 + t1117 * t1201;
t1046 = t1073 * t1074;
t1225 = qJDD(2) + t1046;
t1239 = t1116 * t1225;
t1238 = t1117 * t1225;
t1118 = sin(qJ(6));
t1120 = sin(qJ(4));
t1125 = cos(qJ(4));
t1038 = t1073 * t1120 + t1074 * t1125;
t1155 = qJD(2) * t1200;
t1171 = qJDD(1) * t1121;
t1082 = t1155 + t1171;
t1048 = t1117 * t1082 + t1116 * t1083;
t1150 = t1082 * t1116 - t1117 * t1083;
t1151 = t1120 * t1048 + t1125 * t1150;
t955 = -qJD(4) * t1038 - t1151;
t954 = qJDD(5) - t955;
t1140 = qJDD(6) + t954;
t1113 = qJD(2) + qJD(4);
t1119 = sin(qJ(5));
t1124 = cos(qJ(5));
t1006 = t1038 * t1119 - t1124 * t1113;
t1008 = t1038 * t1124 + t1113 * t1119;
t1123 = cos(qJ(6));
t959 = t1123 * t1006 + t1008 * t1118;
t961 = -t1006 * t1118 + t1008 * t1123;
t893 = t961 * t959;
t1228 = t1140 - t893;
t1237 = t1118 * t1228;
t967 = t1008 * t1006;
t1229 = t954 - t967;
t1236 = t1119 * t1229;
t1167 = qJDD(2) + qJDD(4);
t1036 = -t1125 * t1073 + t1074 * t1120;
t981 = t1038 * t1036;
t1227 = -t981 + t1167;
t1235 = t1120 * t1227;
t1234 = t1123 * t1228;
t1233 = t1124 * t1229;
t1232 = t1125 * t1227;
t1023 = t1113 * t1036;
t1141 = qJD(4) * t1036 - t1048 * t1125 + t1120 * t1150;
t1231 = t1141 + t1023;
t1071 = t1073 ^ 2;
t1147 = qJD(2) * pkin(3) - pkin(8) * t1074;
t935 = -pkin(3) * t1150 + t1071 * pkin(8) - t1074 * t1147 + t1005;
t1152 = -t1119 * t1141 - t1124 * t1167;
t909 = -qJD(5) * t1008 - t1152;
t910 = -t1006 * qJD(5) + t1119 * t1167 - t1124 * t1141;
t816 = -qJD(6) * t959 + t1118 * t909 + t1123 * t910;
t1033 = qJD(5) + t1036;
t1031 = qJD(6) + t1033;
t929 = t1031 * t959;
t1230 = t816 - t929;
t974 = t1033 * t1006;
t882 = -t974 - t910;
t881 = -t974 + t910;
t1199 = qJD(2) * t1073;
t1014 = -t1048 + t1199;
t1111 = t1115 * t1129;
t1128 = qJD(2) ^ 2;
t1100 = -t1111 - t1128;
t1153 = t1118 * t910 - t1123 * t909;
t783 = (qJD(6) - t1031) * t961 + t1153;
t878 = (qJD(5) - t1033) * t1008 + t1152;
t921 = (qJD(4) - t1113) * t1038 + t1151;
t957 = t959 ^ 2;
t958 = t961 ^ 2;
t1224 = t1006 ^ 2;
t1004 = t1008 ^ 2;
t1030 = t1031 ^ 2;
t1032 = t1033 ^ 2;
t1034 = t1036 ^ 2;
t1035 = t1038 ^ 2;
t1072 = t1074 ^ 2;
t1223 = t1113 ^ 2;
t1222 = pkin(4) * t1120;
t1221 = t1121 * g(3);
t1134 = -pkin(2) * t1111 + t1083 * qJ(3) - qJD(2) * t1143 - t1221;
t1093 = g(1) * t1127 + g(2) * t1122;
t1139 = -pkin(1) * t1129 + qJDD(1) * pkin(7) - t1093;
t1136 = t1126 * t1139;
t1131 = t1136 + t1134;
t1137 = t1121 * t1139;
t1133 = qJDD(2) * pkin(2) - t1082 * qJ(3) - t1137;
t1176 = t1121 * t1129;
t1202 = qJD(1) * qJD(2);
t1142 = pkin(2) * t1176 + qJ(3) * t1202 - g(3);
t1132 = t1126 * t1142 + t1133;
t1197 = qJD(3) * t1074;
t1130 = pkin(3) * t1225 + pkin(8) * t1014 - t1116 * t1131 + t1117 * t1132 - 0.2e1 * t1197;
t937 = 0.2e1 * qJD(3) * t1073 + t1116 * t1132 + t1117 * t1131;
t898 = -t1071 * pkin(3) - pkin(8) * t1150 - qJD(2) * t1147 + t937;
t822 = t1120 * t1130 + t1125 * t898;
t979 = pkin(4) * t1036 - pkin(9) * t1038;
t798 = -pkin(4) * t1223 + pkin(9) * t1167 - t1036 * t979 + t822;
t819 = t1231 * pkin(9) + (t1038 * t1113 - t955) * pkin(4) - t935;
t732 = t1119 * t798 - t1124 * t819;
t682 = pkin(5) * t1229 + pkin(10) * t882 - t732;
t733 = t1119 * t819 + t1124 * t798;
t968 = pkin(5) * t1033 - pkin(10) * t1008;
t697 = -pkin(5) * t1224 + pkin(10) * t909 - t1033 * t968 + t733;
t637 = t1118 * t682 + t1123 * t697;
t821 = t1120 * t898 - t1125 * t1130;
t743 = t1120 * t822 - t1125 * t821;
t1220 = t1116 * t743;
t1219 = t1117 * t743;
t797 = -t1167 * pkin(4) - t1223 * pkin(9) + t1038 * t979 + t821;
t740 = -t909 * pkin(5) - pkin(10) * t1224 + t1008 * t968 + t797;
t1218 = t1118 * t740;
t847 = t1140 + t893;
t1217 = t1118 * t847;
t636 = t1118 * t697 - t1123 * t682;
t588 = t1118 * t637 - t1123 * t636;
t1216 = t1119 * t588;
t1215 = t1119 * t797;
t895 = t954 + t967;
t1214 = t1119 * t895;
t1213 = t1120 * t935;
t977 = t981 + t1167;
t1212 = t1120 * t977;
t1166 = 0.2e1 * t1197;
t936 = t1116 * t1134 - t1117 * t1133 + t1166 + (t1116 * t1139 - t1117 * t1142) * t1126;
t866 = t1116 * t937 - t1117 * t936;
t1211 = t1121 * t866;
t1210 = t1123 * t740;
t1209 = t1123 * t847;
t1208 = t1124 * t588;
t1207 = t1124 * t797;
t1206 = t1124 * t895;
t1205 = t1125 * t935;
t1204 = t1125 * t977;
t1203 = t1126 * t866;
t1198 = qJD(2) * t1074;
t1196 = t1005 * t1116;
t1195 = t1005 * t1117;
t1194 = t1031 * t1118;
t1193 = t1031 * t1123;
t1192 = t1033 * t1119;
t1191 = t1033 * t1124;
t1042 = qJDD(2) - t1046;
t1190 = t1042 * t1116;
t1189 = t1042 * t1117;
t1188 = t1073 * t1116;
t1187 = t1073 * t1117;
t1186 = t1074 * t1116;
t1185 = t1074 * t1117;
t1076 = t1129 * pkin(7) + t1144;
t1184 = t1076 * t1121;
t1183 = t1076 * t1126;
t1101 = t1126 * t1176;
t1090 = qJDD(2) + t1101;
t1182 = t1090 * t1121;
t1091 = qJDD(2) - t1101;
t1181 = t1091 * t1121;
t1180 = t1091 * t1126;
t1179 = t1113 * t1120;
t1178 = t1113 * t1125;
t1114 = t1121 ^ 2;
t1177 = t1114 * t1129;
t1172 = t1114 + t1115;
t1170 = qJDD(1) * t1122;
t1169 = qJDD(1) * t1127;
t1168 = qJDD(2) * t1127;
t1165 = t1120 * t893;
t1164 = t1125 * t893;
t1163 = -pkin(4) * t1125 - pkin(3);
t1161 = t1120 * t967;
t1160 = t1125 * t967;
t1159 = t1122 * t981;
t1158 = t1127 * t981;
t1157 = t1122 * t1046;
t1156 = t1127 * t1046;
t867 = t1116 * t936 + t1117 * t937;
t589 = t1118 * t636 + t1123 * t637;
t744 = t1120 * t821 + t1125 * t822;
t1061 = t1126 * g(3) + t1137;
t1062 = t1136 - t1221;
t1000 = t1061 * t1121 + t1126 * t1062;
t1054 = -t1092 * t1122 - t1127 * t1093;
t1149 = t1122 * t1101;
t1148 = t1127 * t1101;
t1087 = -t1122 * t1129 + t1169;
t1146 = -pkin(6) * t1087 - g(3) * t1122;
t664 = t1119 * t733 - t1124 * t732;
t665 = t1119 * t732 + t1124 * t733;
t999 = t1061 * t1126 - t1062 * t1121;
t1053 = t1092 * t1127 - t1093 * t1122;
t1012 = -t1150 + t1198;
t1108 = t1122 * qJDD(2);
t1099 = t1111 - t1128;
t1098 = -t1128 - t1177;
t1097 = t1128 - t1177;
t1089 = t1111 - t1177;
t1088 = t1111 + t1177;
t1086 = t1127 * t1129 + t1170;
t1085 = t1172 * qJDD(1);
t1084 = t1109 - 0.2e1 * t1162;
t1081 = 0.2e1 * t1155 + t1171;
t1079 = t1126 * t1090;
t1078 = t1172 * t1202;
t1070 = -pkin(6) * t1086 + g(3) * t1127;
t1067 = -t1072 - t1128;
t1066 = -t1072 + t1128;
t1065 = t1071 - t1128;
t1064 = t1082 * t1126 - t1114 * t1202;
t1063 = -t1083 * t1121 - t1115 * t1202;
t1060 = -t1098 * t1121 - t1180;
t1059 = -t1097 * t1121 + t1079;
t1058 = t1100 * t1126 - t1182;
t1057 = t1099 * t1126 - t1181;
t1056 = t1098 * t1126 - t1181;
t1055 = t1100 * t1121 + t1079;
t1051 = t1085 * t1127 - t1088 * t1122;
t1050 = t1085 * t1122 + t1088 * t1127;
t1049 = -t1081 * t1121 + t1084 * t1126;
t1045 = t1071 - t1072;
t1040 = -t1128 - t1071;
t1029 = (t1186 + t1187) * qJD(2);
t1028 = (-t1185 + t1188) * qJD(2);
t1027 = t1060 * t1127 + t1081 * t1122;
t1026 = t1058 * t1127 - t1084 * t1122;
t1025 = t1060 * t1122 - t1081 * t1127;
t1024 = t1058 * t1122 + t1084 * t1127;
t1021 = -t1035 + t1223;
t1020 = t1034 - t1223;
t1019 = -pkin(7) * t1056 - t1183;
t1018 = -pkin(7) * t1055 - t1184;
t1017 = -t1035 - t1223;
t1016 = -pkin(1) * t1056 + t1062;
t1015 = -pkin(1) * t1055 + t1061;
t1013 = t1048 + t1199;
t1010 = t1150 + t1198;
t1009 = -t1071 - t1072;
t997 = -qJD(2) * t1186 + t1048 * t1117;
t996 = qJD(2) * t1185 + t1048 * t1116;
t995 = -qJD(2) * t1187 + t1116 * t1150;
t994 = -qJD(2) * t1188 - t1117 * t1150;
t991 = -t1067 * t1116 - t1189;
t990 = -t1066 * t1116 + t1238;
t989 = t1065 * t1117 - t1190;
t988 = t1067 * t1117 - t1190;
t987 = t1066 * t1117 + t1239;
t986 = t1065 * t1116 + t1189;
t985 = t1000 * t1127 - t1076 * t1122;
t984 = t1000 * t1122 + t1076 * t1127;
t983 = t1040 * t1117 - t1239;
t982 = t1040 * t1116 + t1238;
t980 = -t1035 + t1034;
t975 = -t1223 - t1034;
t973 = -t1004 + t1032;
t972 = -t1032 + t1224;
t971 = -t1028 * t1121 + t1029 * t1126;
t970 = (-t1036 * t1125 + t1038 * t1120) * t1113;
t969 = (-t1036 * t1120 - t1038 * t1125) * t1113;
t966 = -t1004 + t1224;
t965 = t1012 * t1117 - t1014 * t1116;
t964 = -t1010 * t1117 - t1013 * t1116;
t963 = t1012 * t1116 + t1014 * t1117;
t962 = -t1010 * t1116 + t1013 * t1117;
t951 = -qJ(3) * t988 - t1195;
t950 = -t1034 - t1035;
t949 = -t1121 * t996 + t1126 * t997;
t948 = -t1121 * t994 + t1126 * t995;
t947 = -t1121 * t988 + t1126 * t991;
t946 = -t1121 * t987 + t1126 * t990;
t945 = -t1121 * t986 + t1126 * t989;
t944 = t1121 * t991 + t1126 * t988;
t943 = -t1004 - t1032;
t942 = -qJ(3) * t982 - t1196;
t941 = t1020 * t1125 - t1212;
t940 = -t1021 * t1120 + t1232;
t939 = t1020 * t1120 + t1204;
t938 = t1021 * t1125 + t1235;
t934 = -t1017 * t1120 - t1204;
t933 = t1017 * t1125 - t1212;
t931 = -t1032 - t1224;
t928 = -t958 + t1030;
t927 = t957 - t1030;
t926 = t1004 + t1224;
t925 = -t1023 + t1141;
t920 = (qJD(4) + t1113) * t1038 + t1151;
t919 = -t1038 * t1179 - t1125 * t1141;
t918 = t1038 * t1178 - t1120 * t1141;
t917 = t1036 * t1178 - t1120 * t955;
t916 = t1036 * t1179 + t1125 * t955;
t915 = -t1121 * t982 + t1126 * t983;
t914 = t1121 * t983 + t1126 * t982;
t913 = -pkin(2) * t1013 + qJ(3) * t991 - t1196;
t912 = t1125 * t975 - t1235;
t911 = t1120 * t975 + t1232;
t906 = -pkin(2) * t1010 + qJ(3) * t983 + t1195;
t905 = t1013 * t1122 + t1127 * t947;
t904 = -t1013 * t1127 + t1122 * t947;
t903 = (-t1006 * t1124 + t1008 * t1119) * t1033;
t902 = (t1006 * t1119 + t1008 * t1124) * t1033;
t901 = -t958 - t1030;
t900 = -t1116 * t969 + t1117 * t970;
t899 = t1116 * t970 + t1117 * t969;
t892 = -t958 + t957;
t891 = t1010 * t1122 + t1127 * t915;
t890 = -t1121 * t963 + t1126 * t965;
t889 = -t1121 * t962 + t1126 * t964;
t888 = -t1010 * t1127 + t1122 * t915;
t887 = t1121 * t965 + t1126 * t963;
t884 = -t1030 - t957;
t879 = (-qJD(5) - t1033) * t1008 - t1152;
t877 = -t1008 * t1192 + t1124 * t910;
t876 = -t1008 * t1191 - t1119 * t910;
t875 = t1006 * t1191 - t1119 * t909;
t874 = -t1006 * t1192 - t1124 * t909;
t873 = t1009 * t1122 + t1127 * t890;
t872 = -t1009 * t1127 + t1122 * t890;
t871 = -t1116 * t939 + t1117 * t941;
t870 = -t1116 * t938 + t1117 * t940;
t869 = t1116 * t941 + t1117 * t939;
t868 = t1116 * t940 + t1117 * t938;
t865 = -pkin(8) * t933 - t1205;
t864 = -t1116 * t933 + t1117 * t934;
t863 = t1116 * t934 + t1117 * t933;
t862 = (t1118 * t961 - t1123 * t959) * t1031;
t861 = (-t1118 * t959 - t1123 * t961) * t1031;
t860 = t1120 * t954 + t1125 * t903;
t859 = t1120 * t903 - t1125 * t954;
t858 = t1124 * t972 - t1214;
t857 = -t1119 * t973 + t1233;
t856 = -t1119 * t972 - t1206;
t855 = -t1124 * t973 - t1236;
t854 = -t1120 * t925 - t1125 * t921;
t853 = t1120 * t1231 - t1125 * t920;
t852 = -t1120 * t921 + t1125 * t925;
t851 = -t1120 * t920 - t1125 * t1231;
t850 = -pkin(8) * t911 - t1213;
t849 = -t957 - t958;
t845 = -t1116 * t918 + t1117 * t919;
t844 = -t1116 * t916 + t1117 * t917;
t843 = t1116 * t919 + t1117 * t918;
t842 = t1116 * t917 + t1117 * t916;
t841 = -pkin(1) * t887 - pkin(2) * t963;
t840 = -pkin(1) * t944 - pkin(2) * t988 + t937;
t839 = pkin(2) * t1005 + qJ(3) * t867;
t838 = -t1119 * t943 - t1206;
t837 = t1124 * t943 - t1214;
t836 = -t1116 * t911 + t1117 * t912;
t835 = t1116 * t912 + t1117 * t911;
t834 = t1124 * t931 - t1236;
t833 = t1119 * t931 + t1233;
t832 = t1125 * t877 + t1161;
t831 = t1125 * t875 - t1161;
t830 = t1120 * t877 - t1160;
t829 = t1120 * t875 + t1160;
t828 = -pkin(1) * t914 + t1116 * t1062 + t1117 * t1061 + t1166 + (t1116 * (t1083 + t1162) - t1117 * (-t1082 + t1155)) * qJ(3) + (-t1117 * t1090 + t1100 * t1116 - t982) * pkin(2);
t827 = -qJ(3) * t963 - t866;
t826 = -t1121 * t899 + t1126 * t900;
t825 = -pkin(7) * t944 - t1121 * t913 + t1126 * t951;
t824 = pkin(3) * t1231 + pkin(8) * t934 - t1213;
t823 = -pkin(2) * t1009 + qJ(3) * t965 + t867;
t815 = -qJD(6) * t961 - t1153;
t814 = -pkin(3) * t920 + pkin(8) * t912 + t1205;
t813 = t1123 * t927 - t1217;
t812 = -t1118 * t928 + t1234;
t811 = t1118 * t927 + t1209;
t810 = t1123 * t928 + t1237;
t809 = -pkin(7) * t914 - t1121 * t906 + t1126 * t942;
t808 = -t1118 * t901 - t1209;
t807 = t1123 * t901 - t1217;
t806 = -t1119 * t882 - t1124 * t878;
t805 = -t1119 * t881 + t1124 * t879;
t804 = -t1119 * t878 + t1124 * t882;
t803 = -t1119 * t879 - t1124 * t881;
t802 = -t1121 * t869 + t1126 * t871;
t801 = -t1121 * t868 + t1126 * t870;
t800 = t1126 * t867 - t1211;
t799 = t1121 * t867 + t1203;
t795 = -t1121 * t863 + t1126 * t864;
t794 = t1121 * t864 + t1126 * t863;
t793 = -t1120 * t878 + t1125 * t858;
t792 = -t1120 * t882 + t1125 * t857;
t791 = t1120 * t858 + t1125 * t878;
t790 = t1120 * t857 + t1125 * t882;
t789 = t1123 * t884 - t1237;
t788 = t1118 * t884 + t1234;
t787 = -t816 - t929;
t782 = (qJD(6) + t1031) * t961 + t1153;
t781 = -t1119 * t861 + t1124 * t862;
t780 = -t1119 * t862 - t1124 * t861;
t779 = t1123 * t816 - t1194 * t961;
t778 = t1118 * t816 + t1193 * t961;
t777 = -t1118 * t815 + t1193 * t959;
t776 = t1123 * t815 + t1194 * t959;
t775 = -t1005 * t1122 + t1127 * t800;
t774 = t1005 * t1127 + t1122 * t800;
t773 = -t1116 * t859 + t1117 * t860;
t772 = t1116 * t860 + t1117 * t859;
t771 = t1120 * t881 + t1125 * t838;
t770 = t1120 * t838 - t1125 * t881;
t769 = -t1120 * t879 + t1125 * t834;
t768 = t1120 * t834 + t1125 * t879;
t767 = -t1116 * t852 + t1117 * t854;
t766 = -t1116 * t851 + t1117 * t853;
t765 = t1116 * t854 + t1117 * t852;
t764 = t1116 * t853 + t1117 * t851;
t763 = -t1120 * t966 + t1125 * t805;
t762 = t1120 * t805 + t1125 * t966;
t761 = -t1121 * t843 + t1126 * t845;
t760 = -t1121 * t842 + t1126 * t844;
t759 = -t1120 * t926 + t1125 * t806;
t758 = t1120 * t806 + t1125 * t926;
t757 = -t1121 * t835 + t1126 * t836;
t756 = t1121 * t836 + t1126 * t835;
t755 = -t1122 * t1231 + t1127 * t795;
t754 = t1122 * t795 + t1127 * t1231;
t753 = t1120 * t1140 + t1125 * t781;
t752 = t1120 * t781 - t1125 * t1140;
t751 = -t1116 * t830 + t1117 * t832;
t750 = -t1116 * t829 + t1117 * t831;
t749 = t1116 * t832 + t1117 * t830;
t748 = t1116 * t831 + t1117 * t829;
t747 = -pkin(1) * t799 - pkin(2) * t866;
t746 = t1122 * t920 + t1127 * t757;
t745 = t1122 * t757 - t1127 * t920;
t742 = -pkin(9) * t837 + t1207;
t741 = -pkin(9) * t833 + t1215;
t739 = -t1119 * t811 + t1124 * t813;
t738 = -t1119 * t810 + t1124 * t812;
t737 = -t1119 * t813 - t1124 * t811;
t736 = -t1119 * t812 - t1124 * t810;
t735 = -qJ(3) * t863 - t1116 * t824 + t1117 * t865;
t734 = pkin(3) * t935 + pkin(8) * t744;
t731 = -pkin(7) * t887 - t1121 * t823 + t1126 * t827;
t730 = -t1119 * t807 + t1124 * t808;
t729 = t1119 * t808 + t1124 * t807;
t728 = -qJ(3) * t835 - t1116 * t814 + t1117 * t850;
t727 = pkin(2) * t1231 + qJ(3) * t864 + t1116 * t865 + t1117 * t824;
t726 = -t1116 * t791 + t1117 * t793;
t725 = -t1116 * t790 + t1117 * t792;
t724 = t1116 * t793 + t1117 * t791;
t723 = t1116 * t792 + t1117 * t790;
t722 = -pkin(7) * t799 - qJ(3) * t1203 - t1121 * t839;
t721 = -t1119 * t788 + t1124 * t789;
t720 = t1119 * t789 + t1124 * t788;
t719 = -pkin(8) * t852 - t743;
t718 = -t1118 * t787 - t1123 * t783;
t717 = -t1118 * t1230 - t1123 * t782;
t716 = -t1118 * t783 + t1123 * t787;
t715 = -t1118 * t782 + t1123 * t1230;
t714 = -t1119 * t778 + t1124 * t779;
t713 = -t1119 * t776 + t1124 * t777;
t712 = -t1119 * t779 - t1124 * t778;
t711 = -t1119 * t777 - t1124 * t776;
t710 = -t1121 * t772 + t1126 * t773;
t709 = -t1116 * t770 + t1117 * t771;
t708 = t1116 * t771 + t1117 * t770;
t707 = -t1116 * t768 + t1117 * t769;
t706 = t1116 * t769 + t1117 * t768;
t705 = -t1121 * t765 + t1126 * t767;
t704 = -t1121 * t764 + t1126 * t766;
t703 = t1121 * t767 + t1126 * t765;
t702 = -t1116 * t762 + t1117 * t763;
t701 = t1116 * t763 + t1117 * t762;
t700 = -pkin(2) * t920 + qJ(3) * t836 + t1116 * t850 + t1117 * t814;
t699 = -pkin(3) * t950 + pkin(8) * t854 + t744;
t698 = -pkin(4) * t837 + t733;
t696 = -pkin(4) * t833 + t732;
t694 = -t1116 * t758 + t1117 * t759;
t693 = t1116 * t759 + t1117 * t758;
t692 = t1122 * t950 + t1127 * t705;
t691 = t1122 * t705 - t1127 * t950;
t690 = -pkin(1) * t794 - pkin(2) * t863 - pkin(3) * t933 + t822;
t689 = t1125 * t714 + t1165;
t688 = t1125 * t713 - t1165;
t687 = t1120 * t714 - t1164;
t686 = t1120 * t713 + t1164;
t685 = -pkin(10) * t807 + t1210;
t684 = -t1116 * t752 + t1117 * t753;
t683 = t1116 * t753 + t1117 * t752;
t679 = -t1121 * t749 + t1126 * t751;
t678 = -t1121 * t748 + t1126 * t750;
t677 = -pkin(10) * t788 + t1218;
t676 = -t1120 * t783 + t1125 * t739;
t675 = -t1120 * t787 + t1125 * t738;
t674 = t1120 * t739 + t1125 * t783;
t673 = t1120 * t738 + t1125 * t787;
t672 = t1120 * t1230 + t1125 * t730;
t671 = t1120 * t730 - t1125 * t1230;
t670 = -pkin(1) * t756 - pkin(2) * t835 - pkin(3) * t911 + t821;
t669 = t1117 * t744 - t1220;
t668 = t1116 * t744 + t1219;
t667 = t1120 * t782 + t1125 * t721;
t666 = t1120 * t721 - t1125 * t782;
t663 = -pkin(5) * t1230 + pkin(10) * t808 + t1218;
t662 = -pkin(5) * t782 + pkin(10) * t789 - t1210;
t661 = -pkin(1) * t703 - pkin(2) * t765 - pkin(3) * t852;
t660 = -t1121 * t724 + t1126 * t726;
t659 = -t1121 * t723 + t1126 * t725;
t658 = -t1119 * t716 + t1124 * t718;
t657 = -t1119 * t715 + t1124 * t717;
t656 = t1119 * t718 + t1124 * t716;
t655 = -t1119 * t717 - t1124 * t715;
t654 = -t1121 * t708 + t1126 * t709;
t653 = t1121 * t709 + t1126 * t708;
t652 = -t1121 * t706 + t1126 * t707;
t651 = t1121 * t707 + t1126 * t706;
t650 = -pkin(9) * t804 - t664;
t649 = -t1121 * t701 + t1126 * t702;
t648 = t1120 * t797 + t1125 * t665;
t647 = t1120 * t665 - t1125 * t797;
t646 = -t1120 * t892 + t1125 * t657;
t645 = t1120 * t657 + t1125 * t892;
t644 = -pkin(7) * t794 - t1121 * t727 + t1126 * t735;
t643 = t1120 * t849 + t1125 * t658;
t642 = t1120 * t658 - t1125 * t849;
t641 = -t1121 * t693 + t1126 * t694;
t640 = t1121 * t694 + t1126 * t693;
t639 = t1122 * t837 + t1127 * t654;
t638 = t1122 * t654 - t1127 * t837;
t634 = t1122 * t833 + t1127 * t652;
t633 = t1122 * t652 - t1127 * t833;
t632 = -t1116 * t687 + t1117 * t689;
t631 = -t1116 * t686 + t1117 * t688;
t630 = t1116 * t689 + t1117 * t687;
t629 = t1116 * t688 + t1117 * t686;
t628 = -pkin(8) * t770 - t1120 * t698 + t1125 * t742;
t627 = -pkin(8) * t768 - t1120 * t696 + t1125 * t741;
t626 = -t1121 * t683 + t1126 * t684;
t625 = -qJ(3) * t765 - t1116 * t699 + t1117 * t719;
t624 = -pkin(7) * t756 - t1121 * t700 + t1126 * t728;
t623 = -t1116 * t674 + t1117 * t676;
t622 = -t1116 * t673 + t1117 * t675;
t621 = t1116 * t676 + t1117 * t674;
t620 = t1116 * t675 + t1117 * t673;
t619 = -pkin(2) * t950 + qJ(3) * t767 + t1116 * t719 + t1117 * t699;
t618 = -pkin(3) * t837 + pkin(8) * t771 + t1120 * t742 + t1125 * t698;
t617 = -pkin(3) * t833 + pkin(8) * t769 + t1120 * t741 + t1125 * t696;
t616 = t1122 * t804 + t1127 * t641;
t615 = t1122 * t641 - t1127 * t804;
t614 = -t1116 * t671 + t1117 * t672;
t613 = t1116 * t672 + t1117 * t671;
t612 = -t1121 * t668 + t1126 * t669;
t611 = t1121 * t669 + t1126 * t668;
t610 = -t1116 * t666 + t1117 * t667;
t609 = t1116 * t667 + t1117 * t666;
t608 = -pkin(8) * t1219 - qJ(3) * t668 - t1116 * t734;
t607 = -t1122 * t935 + t1127 * t612;
t606 = t1122 * t612 + t1127 * t935;
t605 = -pkin(4) * t656 - pkin(5) * t716;
t604 = pkin(2) * t935 - pkin(8) * t1220 + qJ(3) * t669 + t1117 * t734;
t603 = -pkin(8) * t758 + t1125 * t650 + t1222 * t804;
t602 = pkin(8) * t759 + t1120 * t650 + t1163 * t804;
t601 = -pkin(4) * t729 - pkin(5) * t807 + t637;
t600 = -pkin(9) * t729 - t1119 * t663 + t1124 * t685;
t599 = -pkin(4) * t720 - pkin(5) * t788 + t636;
t598 = -pkin(9) * t720 - t1119 * t662 + t1124 * t677;
t597 = -t1116 * t647 + t1117 * t648;
t596 = t1116 * t648 + t1117 * t647;
t595 = -t1116 * t645 + t1117 * t646;
t594 = t1116 * t646 + t1117 * t645;
t593 = -pkin(1) * t653 - pkin(2) * t708 - pkin(3) * t770 + pkin(4) * t881 - pkin(9) * t838 - t1215;
t592 = -t1116 * t642 + t1117 * t643;
t591 = t1116 * t643 + t1117 * t642;
t590 = -pkin(1) * t651 - pkin(2) * t706 - pkin(3) * t768 - pkin(4) * t879 - pkin(9) * t834 + t1207;
t587 = -t1121 * t630 + t1126 * t632;
t586 = -t1121 * t629 + t1126 * t631;
t585 = -pkin(1) * t611 - pkin(2) * t668 - pkin(3) * t743;
t584 = -t1121 * t621 + t1126 * t623;
t583 = -t1121 * t620 + t1126 * t622;
t582 = -t1121 * t613 + t1126 * t614;
t581 = t1121 * t614 + t1126 * t613;
t580 = -pkin(5) * t740 + pkin(10) * t589;
t579 = -pkin(8) * t647 + (-pkin(9) * t1125 + t1222) * t664;
t578 = -pkin(10) * t716 - t588;
t577 = -t1121 * t609 + t1126 * t610;
t576 = t1121 * t610 + t1126 * t609;
t575 = -pkin(5) * t849 + pkin(10) * t718 + t589;
t574 = -qJ(3) * t708 - t1116 * t618 + t1117 * t628;
t573 = -qJ(3) * t706 - t1116 * t617 + t1117 * t627;
t572 = -pkin(1) * t640 - pkin(2) * t693 - pkin(3) * t758 - pkin(4) * t926 - pkin(9) * t806 - t665;
t571 = -pkin(7) * t703 - t1121 * t619 + t1126 * t625;
t570 = t1122 * t729 + t1127 * t582;
t569 = t1122 * t582 - t1127 * t729;
t568 = -pkin(2) * t837 + qJ(3) * t709 + t1116 * t628 + t1117 * t618;
t567 = -pkin(2) * t833 + qJ(3) * t707 + t1116 * t627 + t1117 * t617;
t566 = t1122 * t720 + t1127 * t577;
t565 = t1122 * t577 - t1127 * t720;
t564 = pkin(8) * t648 + (-pkin(9) * t1120 + t1163) * t664;
t563 = -qJ(3) * t693 - t1116 * t602 + t1117 * t603;
t562 = -pkin(2) * t804 + qJ(3) * t694 + t1116 * t603 + t1117 * t602;
t561 = -t1121 * t596 + t1126 * t597;
t560 = t1121 * t597 + t1126 * t596;
t559 = -t1121 * t594 + t1126 * t595;
t558 = -pkin(8) * t671 - t1120 * t601 + t1125 * t600;
t557 = -pkin(7) * t611 - t1121 * t604 + t1126 * t608;
t556 = -t1121 * t591 + t1126 * t592;
t555 = t1121 * t592 + t1126 * t591;
t554 = -pkin(8) * t666 - t1120 * t599 + t1125 * t598;
t553 = t1124 * t589 - t1216;
t552 = t1119 * t589 + t1208;
t551 = -pkin(3) * t729 + pkin(8) * t672 + t1120 * t600 + t1125 * t601;
t550 = t1120 * t740 + t1125 * t553;
t549 = t1120 * t553 - t1125 * t740;
t548 = -pkin(3) * t720 + pkin(8) * t667 + t1120 * t598 + t1125 * t599;
t547 = t1122 * t664 + t1127 * t561;
t546 = t1122 * t561 - t1127 * t664;
t545 = t1122 * t656 + t1127 * t556;
t544 = t1122 * t556 - t1127 * t656;
t543 = -pkin(9) * t656 - t1119 * t575 + t1124 * t578;
t542 = -pkin(1) * t581 - pkin(2) * t613 - pkin(3) * t671 + pkin(4) * t1230 - pkin(9) * t730 - t1119 * t685 - t1124 * t663;
t541 = -pkin(4) * t552 - pkin(5) * t588;
t540 = -pkin(7) * t653 - t1121 * t568 + t1126 * t574;
t539 = -pkin(7) * t651 - t1121 * t567 + t1126 * t573;
t538 = -pkin(1) * t576 - pkin(2) * t609 - pkin(3) * t666 + pkin(4) * t782 - pkin(9) * t721 - t1119 * t677 - t1124 * t662;
t537 = -qJ(3) * t596 - t1116 * t564 + t1117 * t579;
t536 = -pkin(1) * t560 - pkin(2) * t596 - pkin(3) * t647 + pkin(4) * t797 - pkin(9) * t665;
t535 = -pkin(7) * t640 - t1121 * t562 + t1126 * t563;
t534 = -pkin(2) * t664 + qJ(3) * t597 + t1116 * t579 + t1117 * t564;
t533 = -pkin(8) * t642 - t1120 * t605 + t1125 * t543;
t532 = -pkin(9) * t552 - pkin(10) * t1208 - t1119 * t580;
t531 = -t1116 * t549 + t1117 * t550;
t530 = t1116 * t550 + t1117 * t549;
t529 = -pkin(3) * t656 + pkin(8) * t643 + t1120 * t543 + t1125 * t605;
t528 = -qJ(3) * t613 - t1116 * t551 + t1117 * t558;
t527 = -pkin(2) * t729 + qJ(3) * t614 + t1116 * t558 + t1117 * t551;
t526 = -qJ(3) * t609 - t1116 * t548 + t1117 * t554;
t525 = -pkin(2) * t720 + qJ(3) * t610 + t1116 * t554 + t1117 * t548;
t524 = -pkin(1) * t555 - pkin(2) * t591 - pkin(3) * t642 + pkin(4) * t849 - pkin(9) * t658 - t1119 * t578 - t1124 * t575;
t523 = -t1121 * t530 + t1126 * t531;
t522 = t1121 * t531 + t1126 * t530;
t521 = -pkin(8) * t549 - t1120 * t541 + t1125 * t532;
t520 = -pkin(7) * t560 - t1121 * t534 + t1126 * t537;
t519 = -qJ(3) * t591 - t1116 * t529 + t1117 * t533;
t518 = -pkin(2) * t656 + qJ(3) * t592 + t1116 * t533 + t1117 * t529;
t517 = -pkin(7) * t581 - t1121 * t527 + t1126 * t528;
t516 = t1122 * t552 + t1127 * t523;
t515 = t1122 * t523 - t1127 * t552;
t514 = -pkin(7) * t576 - t1121 * t525 + t1126 * t526;
t513 = -pkin(3) * t552 + pkin(8) * t550 + t1120 * t532 + t1125 * t541;
t512 = -pkin(1) * t522 - pkin(2) * t530 - pkin(3) * t549 + pkin(4) * t740 - pkin(9) * t553 + pkin(10) * t1216 - t1124 * t580;
t511 = -pkin(7) * t555 - t1121 * t518 + t1126 * t519;
t510 = -qJ(3) * t530 - t1116 * t513 + t1117 * t521;
t509 = -pkin(2) * t552 + qJ(3) * t531 + t1116 * t521 + t1117 * t513;
t508 = -pkin(7) * t522 - t1121 * t509 + t1126 * t510;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1086, -t1087, 0, t1054, 0, 0, 0, 0, 0, 0, t1026, t1027, t1051, t985, 0, 0, 0, 0, 0, 0, t891, t905, t873, t775, 0, 0, 0, 0, 0, 0, t746, t755, t692, t607, 0, 0, 0, 0, 0, 0, t634, t639, t616, t547, 0, 0, 0, 0, 0, 0, t566, t570, t545, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1087, -t1086, 0, t1053, 0, 0, 0, 0, 0, 0, t1024, t1025, t1050, t984, 0, 0, 0, 0, 0, 0, t888, t904, t872, t774, 0, 0, 0, 0, 0, 0, t745, t754, t691, t606, 0, 0, 0, 0, 0, 0, t633, t638, t615, t546, 0, 0, 0, 0, 0, 0, t565, t569, t544, t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1055, t1056, 0, -t999, 0, 0, 0, 0, 0, 0, t914, t944, t887, t799, 0, 0, 0, 0, 0, 0, t756, t794, t703, t611, 0, 0, 0, 0, 0, 0, t651, t653, t640, t560, 0, 0, 0, 0, 0, 0, t576, t581, t555, t522; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1087, 0, -t1086, 0, t1146, -t1070, -t1053, -pkin(6) * t1053, t1064 * t1127 - t1149, t1049 * t1127 - t1089 * t1122, t1059 * t1127 + t1121 * t1170, t1063 * t1127 + t1149, t1057 * t1127 + t1109 * t1122, t1078 * t1127 + t1108, -pkin(6) * t1024 - t1015 * t1122 + t1018 * t1127, -pkin(6) * t1025 - t1016 * t1122 + t1019 * t1127, -pkin(6) * t1050 + t1127 * t999, -pkin(6) * t984 - (pkin(1) * t1122 - pkin(7) * t1127) * t999, t1127 * t949 - t1157, -t1045 * t1122 + t1127 * t889, -t1014 * t1122 + t1127 * t946, t1127 * t948 + t1157, t1012 * t1122 + t1127 * t945, t1127 * t971 + t1108, -pkin(6) * t888 - t1122 * t828 + t1127 * t809, -pkin(6) * t904 - t1122 * t840 + t1127 * t825, -pkin(6) * t872 - t1122 * t841 + t1127 * t731, -pkin(6) * t774 - t1122 * t747 + t1127 * t722, t1127 * t761 + t1159, -t1122 * t980 + t1127 * t704, -t1122 * t925 + t1127 * t801, t1127 * t760 - t1159, -t1122 * t921 + t1127 * t802, t1122 * t1167 + t1127 * t826, -pkin(6) * t745 - t1122 * t670 + t1127 * t624, -pkin(6) * t754 - t1122 * t690 + t1127 * t644, -pkin(6) * t691 - t1122 * t661 + t1127 * t571, -pkin(6) * t606 - t1122 * t585 + t1127 * t557, -t1122 * t876 + t1127 * t679, -t1122 * t803 + t1127 * t649, -t1122 * t855 + t1127 * t659, -t1122 * t874 + t1127 * t678, -t1122 * t856 + t1127 * t660, -t1122 * t902 + t1127 * t710, -pkin(6) * t633 - t1122 * t590 + t1127 * t539, -pkin(6) * t638 - t1122 * t593 + t1127 * t540, -pkin(6) * t615 - t1122 * t572 + t1127 * t535, -pkin(6) * t546 - t1122 * t536 + t1127 * t520, -t1122 * t712 + t1127 * t587, -t1122 * t655 + t1127 * t559, -t1122 * t736 + t1127 * t583, -t1122 * t711 + t1127 * t586, -t1122 * t737 + t1127 * t584, -t1122 * t780 + t1127 * t626, -pkin(6) * t565 - t1122 * t538 + t1127 * t514, -pkin(6) * t569 - t1122 * t542 + t1127 * t517, -pkin(6) * t544 - t1122 * t524 + t1127 * t511, -pkin(6) * t515 - t1122 * t512 + t1127 * t508; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1086, 0, t1087, 0, t1070, t1146, t1054, pkin(6) * t1054, t1064 * t1122 + t1148, t1049 * t1122 + t1089 * t1127, t1059 * t1122 - t1121 * t1169, t1063 * t1122 - t1148, t1057 * t1122 - t1109 * t1127, t1078 * t1122 - t1168, pkin(6) * t1026 + t1015 * t1127 + t1018 * t1122, pkin(6) * t1027 + t1016 * t1127 + t1019 * t1122, pkin(6) * t1051 + t1122 * t999, pkin(6) * t985 - (-pkin(1) * t1127 - pkin(7) * t1122) * t999, t1122 * t949 + t1156, t1045 * t1127 + t1122 * t889, t1014 * t1127 + t1122 * t946, t1122 * t948 - t1156, -t1012 * t1127 + t1122 * t945, t1122 * t971 - t1168, pkin(6) * t891 + t1122 * t809 + t1127 * t828, pkin(6) * t905 + t1122 * t825 + t1127 * t840, pkin(6) * t873 + t1122 * t731 + t1127 * t841, pkin(6) * t775 + t1122 * t722 + t1127 * t747, t1122 * t761 - t1158, t1122 * t704 + t1127 * t980, t1122 * t801 + t1127 * t925, t1122 * t760 + t1158, t1122 * t802 + t1127 * t921, t1122 * t826 - t1127 * t1167, pkin(6) * t746 + t1122 * t624 + t1127 * t670, pkin(6) * t755 + t1122 * t644 + t1127 * t690, pkin(6) * t692 + t1122 * t571 + t1127 * t661, pkin(6) * t607 + t1122 * t557 + t1127 * t585, t1122 * t679 + t1127 * t876, t1122 * t649 + t1127 * t803, t1122 * t659 + t1127 * t855, t1122 * t678 + t1127 * t874, t1122 * t660 + t1127 * t856, t1122 * t710 + t1127 * t902, pkin(6) * t634 + t1122 * t539 + t1127 * t590, pkin(6) * t639 + t1122 * t540 + t1127 * t593, pkin(6) * t616 + t1122 * t535 + t1127 * t572, pkin(6) * t547 + t1122 * t520 + t1127 * t536, t1122 * t587 + t1127 * t712, t1122 * t559 + t1127 * t655, t1122 * t583 + t1127 * t736, t1122 * t586 + t1127 * t711, t1122 * t584 + t1127 * t737, t1122 * t626 + t1127 * t780, pkin(6) * t566 + t1122 * t514 + t1127 * t538, pkin(6) * t570 + t1122 * t517 + t1127 * t542, pkin(6) * t545 + t1122 * t511 + t1127 * t524, pkin(6) * t516 + t1122 * t508 + t1127 * t512; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1092, t1093, 0, 0, (t1082 + t1155) * t1121, t1081 * t1126 + t1084 * t1121, t1097 * t1126 + t1182, (t1083 - t1162) * t1126, t1099 * t1121 + t1180, 0, pkin(1) * t1084 + pkin(7) * t1058 + t1183, -pkin(1) * t1081 + pkin(7) * t1060 - t1184, pkin(1) * t1088 + pkin(7) * t1085 + t1000, pkin(1) * t1076 + pkin(7) * t1000, t1121 * t997 + t1126 * t996, t1121 * t964 + t1126 * t962, t1121 * t990 + t1126 * t987, t1121 * t995 + t1126 * t994, t1121 * t989 + t1126 * t986, t1028 * t1126 + t1029 * t1121, -pkin(1) * t1010 + pkin(7) * t915 + t1121 * t942 + t1126 * t906, -pkin(1) * t1013 + pkin(7) * t947 + t1121 * t951 + t1126 * t913, -pkin(1) * t1009 + pkin(7) * t890 + t1121 * t827 + t1126 * t823, pkin(1) * t1005 + pkin(7) * t800 - qJ(3) * t1211 + t1126 * t839, t1121 * t845 + t1126 * t843, t1121 * t766 + t1126 * t764, t1121 * t870 + t1126 * t868, t1121 * t844 + t1126 * t842, t1121 * t871 + t1126 * t869, t1121 * t900 + t1126 * t899, -pkin(1) * t920 + pkin(7) * t757 + t1121 * t728 + t1126 * t700, pkin(1) * t1231 + pkin(7) * t795 + t1121 * t735 + t1126 * t727, -pkin(1) * t950 + pkin(7) * t705 + t1121 * t625 + t1126 * t619, pkin(1) * t935 + pkin(7) * t612 + t1121 * t608 + t1126 * t604, t1121 * t751 + t1126 * t749, t1121 * t702 + t1126 * t701, t1121 * t725 + t1126 * t723, t1121 * t750 + t1126 * t748, t1121 * t726 + t1126 * t724, t1121 * t773 + t1126 * t772, -pkin(1) * t833 + pkin(7) * t652 + t1121 * t573 + t1126 * t567, -pkin(1) * t837 + pkin(7) * t654 + t1121 * t574 + t1126 * t568, -pkin(1) * t804 + pkin(7) * t641 + t1121 * t563 + t1126 * t562, -pkin(1) * t664 + pkin(7) * t561 + t1121 * t537 + t1126 * t534, t1121 * t632 + t1126 * t630, t1121 * t595 + t1126 * t594, t1121 * t622 + t1126 * t620, t1121 * t631 + t1126 * t629, t1121 * t623 + t1126 * t621, t1121 * t684 + t1126 * t683, -pkin(1) * t720 + pkin(7) * t577 + t1121 * t526 + t1126 * t525, -pkin(1) * t729 + pkin(7) * t582 + t1121 * t528 + t1126 * t527, -pkin(1) * t656 + pkin(7) * t556 + t1121 * t519 + t1126 * t518, -pkin(1) * t552 + pkin(7) * t523 + t1121 * t510 + t1126 * t509;];
tauB_reg  = t1;
