% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 19:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRRR2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR2_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:56:15
% EndTime: 2019-05-06 19:57:05
% DurationCPUTime: 16.72s
% Computational Cost: add. (130228->686), mult. (301942->994), div. (0->0), fcn. (231990->12), ass. (0->427)
t395 = cos(qJ(2));
t378 = t395 * qJDD(1);
t390 = sin(qJ(2));
t443 = qJD(1) * qJD(2);
t433 = t390 * t443;
t365 = t378 - t433;
t384 = t395 ^ 2;
t397 = qJD(1) ^ 2;
t454 = qJD(1) * t390;
t414 = qJD(2) * pkin(2) - qJ(3) * t454;
t391 = sin(qJ(1));
t490 = cos(qJ(1));
t430 = g(1) * t391 - t490 * g(2);
t416 = qJDD(1) * pkin(1) + t430;
t316 = pkin(2) * t365 - t414 * t454 - qJDD(3) + t416 + (qJ(3) * t384 + pkin(7)) * t397;
t385 = sin(pkin(11));
t386 = cos(pkin(11));
t453 = qJD(1) * t395;
t358 = -t385 * t454 + t386 * t453;
t359 = t385 * t453 + t386 * t454;
t344 = t358 * t359;
t494 = qJDD(2) + t344;
t507 = t385 * t494;
t506 = t386 * t494;
t387 = sin(qJ(6));
t389 = sin(qJ(4));
t394 = cos(qJ(4));
t337 = t358 * t389 + t359 * t394;
t382 = qJD(2) + qJD(4);
t388 = sin(qJ(5));
t393 = cos(qJ(5));
t317 = t337 * t388 - t393 * t382;
t319 = t337 * t393 + t382 * t388;
t392 = cos(qJ(6));
t287 = t392 * t317 + t319 * t387;
t289 = -t317 * t387 + t319 * t392;
t239 = t289 * t287;
t377 = t390 * qJDD(1);
t432 = t395 * t443;
t364 = t377 + t432;
t345 = -t364 * t385 + t386 * t365;
t346 = t386 * t364 + t385 * t365;
t426 = -t394 * t345 + t346 * t389;
t283 = -qJD(4) * t337 - t426;
t282 = qJDD(5) - t283;
t281 = qJDD(6) + t282;
t499 = -t239 + t281;
t505 = t387 * t499;
t293 = t319 * t317;
t497 = t282 - t293;
t504 = t388 * t497;
t335 = -t394 * t358 + t359 * t389;
t306 = t337 * t335;
t442 = qJDD(2) + qJDD(4);
t496 = -t306 + t442;
t503 = t389 * t496;
t502 = t392 * t499;
t501 = t393 * t497;
t500 = t394 * t496;
t356 = t358 ^ 2;
t421 = qJD(2) * pkin(3) - pkin(8) * t359;
t272 = pkin(3) * t345 + pkin(8) * t356 - t359 * t421 + t316;
t355 = qJD(2) * t358;
t324 = t346 - t355;
t380 = t384 * t397;
t487 = t390 * g(3);
t403 = -pkin(2) * t380 + t365 * qJ(3) - qJD(2) * t414 - t487;
t417 = g(1) * t490 + t391 * g(2);
t483 = qJDD(1) * pkin(7);
t407 = -t397 * pkin(1) - t417 + t483;
t405 = t395 * t407;
t400 = t405 + t403;
t406 = t390 * t407;
t402 = qJDD(2) * pkin(2) - t364 * qJ(3) - t406;
t458 = t390 * t397;
t409 = pkin(2) * t458 + qJ(3) * t443 - g(3);
t401 = t395 * t409 + t402;
t448 = qJD(3) * t359;
t441 = -0.2e1 * t448;
t399 = -pkin(8) * t324 - t385 * t400 + t386 * t401 + t441;
t398 = pkin(3) * t494 + t399;
t274 = 0.2e1 * qJD(3) * t358 + t385 * t401 + t386 * t400;
t243 = -t356 * pkin(3) + t345 * pkin(8) - qJD(2) * t421 + t274;
t457 = t394 * t243;
t187 = t389 * t398 + t457;
t304 = pkin(4) * t335 - pkin(9) * t337;
t492 = t382 ^ 2;
t167 = -pkin(4) * t492 + pkin(9) * t442 - t335 * t304 + t187;
t419 = t345 * t389 + t346 * t394;
t284 = -qJD(4) * t335 + t419;
t328 = t382 * t335;
t260 = t284 - t328;
t184 = -t260 * pkin(9) + (t337 * t382 - t283) * pkin(4) - t272;
t117 = t167 * t388 - t393 * t184;
t118 = t393 * t167 + t388 * t184;
t69 = t388 * t117 + t393 * t118;
t411 = -t393 * t284 - t388 * t442;
t249 = -t317 * qJD(5) - t411;
t427 = t284 * t388 - t393 * t442;
t413 = qJD(5) * t319 + t427;
t181 = -t287 * qJD(6) + t392 * t249 - t387 * t413;
t332 = qJD(5) + t335;
t330 = qJD(6) + t332;
t266 = t330 * t287;
t498 = -t266 + t181;
t299 = t332 * t317;
t234 = t299 + t249;
t396 = qJD(2) ^ 2;
t495 = -t380 - t396;
t428 = t249 * t387 + t392 * t413;
t151 = (qJD(6) - t330) * t289 + t428;
t230 = (qJD(5) - t332) * t319 + t427;
t285 = t287 ^ 2;
t286 = t289 ^ 2;
t493 = t317 ^ 2;
t315 = t319 ^ 2;
t329 = t330 ^ 2;
t331 = t332 ^ 2;
t333 = t335 ^ 2;
t334 = t337 ^ 2;
t357 = t359 ^ 2;
t83 = pkin(5) * t497 - pkin(10) * t234 - t117;
t294 = pkin(5) * t332 - pkin(10) * t319;
t93 = -pkin(5) * t493 - pkin(10) * t413 - t332 * t294 + t118;
t49 = t387 * t93 - t392 * t83;
t50 = t387 * t83 + t392 * t93;
t27 = t387 * t50 - t392 * t49;
t491 = pkin(5) * t27;
t489 = pkin(4) * t389;
t154 = t266 + t181;
t105 = -t151 * t387 - t154 * t392;
t488 = pkin(5) * t105;
t486 = t27 * t388;
t485 = t27 * t393;
t186 = t243 * t389 - t394 * t398;
t166 = -t442 * pkin(4) - t492 * pkin(9) + t304 * t337 + t186;
t484 = -pkin(4) * t166 + pkin(9) * t69;
t125 = pkin(5) * t413 - pkin(10) * t493 + t294 * t319 + t166;
t482 = t125 * t387;
t481 = t125 * t392;
t128 = -t186 * t394 + t187 * t389;
t480 = t128 * t385;
t479 = t128 * t386;
t202 = t239 + t281;
t478 = t202 * t387;
t477 = t202 * t392;
t273 = t385 * t403 - t386 * t402 + 0.2e1 * t448 + (t385 * t407 - t386 * t409) * t395;
t222 = -t273 * t386 + t274 * t385;
t476 = t222 * t390;
t241 = t282 + t293;
t475 = t241 * t388;
t474 = t241 * t393;
t473 = t272 * t389;
t472 = t272 * t394;
t302 = t306 + t442;
t471 = t302 * t389;
t470 = t302 * t394;
t469 = t316 * t385;
t468 = t316 * t386;
t467 = t330 * t387;
t466 = t330 * t392;
t465 = t332 * t388;
t464 = t332 * t393;
t341 = qJDD(2) - t344;
t463 = t341 * t385;
t462 = t341 * t386;
t461 = t382 * t389;
t460 = t382 * t394;
t162 = t388 * t166;
t372 = t395 * t458;
t367 = qJDD(2) + t372;
t459 = t390 * t367;
t163 = t393 * t166;
t456 = t395 * (qJDD(2) - t372);
t452 = qJD(2) * t359;
t451 = qJD(2) * t385;
t450 = qJD(2) * t386;
t447 = qJD(4) + t382;
t445 = qJD(5) + t332;
t440 = t389 * t239;
t439 = t394 * t239;
t438 = t389 * t293;
t437 = t394 * t293;
t279 = -t315 - t331;
t200 = -t279 * t388 - t474;
t235 = t317 * t445 + t411;
t436 = pkin(4) * t235 + pkin(9) * t200 + t162;
t268 = -t331 - t493;
t195 = t268 * t393 - t504;
t231 = -t319 * t445 - t427;
t435 = pkin(4) * t231 + pkin(9) * t195 - t163;
t434 = -pkin(4) * t394 - pkin(3);
t28 = t387 * t49 + t392 * t50;
t205 = -t285 - t286;
t107 = -t151 * t392 + t154 * t387;
t21 = -pkin(5) * t205 + pkin(10) * t107 + t28;
t23 = -pkin(10) * t105 - t27;
t62 = -t105 * t388 + t107 * t393;
t429 = -pkin(4) * t205 + pkin(9) * t62 + t393 * t21 + t388 * t23;
t129 = t186 * t389 + t394 * t187;
t223 = t273 * t385 + t386 * t274;
t348 = t395 * g(3) + t406;
t349 = t405 - t487;
t425 = t390 * t348 + t395 * t349;
t236 = -t329 - t285;
t156 = t236 * t387 + t502;
t157 = t236 * t392 - t505;
t111 = -t156 * t388 + t157 * t393;
t150 = (qJD(6) + t330) * t289 + t428;
t64 = -pkin(5) * t150 + pkin(10) * t157 - t481;
t81 = -pkin(10) * t156 + t482;
t424 = -pkin(4) * t150 + pkin(9) * t111 + t388 * t81 + t393 * t64;
t244 = -t286 - t329;
t173 = t244 * t392 - t478;
t174 = -t244 * t387 - t477;
t114 = -t173 * t388 + t174 * t393;
t66 = -pkin(5) * t498 + pkin(10) * t174 + t482;
t85 = -pkin(10) * t173 + t481;
t423 = -pkin(4) * t498 + pkin(9) * t114 + t388 * t85 + t393 * t66;
t172 = -t230 * t393 + t234 * t388;
t263 = t315 + t493;
t422 = pkin(4) * t263 + pkin(9) * t172 + t69;
t68 = -t117 * t393 + t118 * t388;
t418 = pkin(5) * t156 - t49;
t16 = t28 * t393 - t486;
t26 = -pkin(5) * t125 + pkin(10) * t28;
t415 = -pkin(4) * t125 + pkin(9) * t16 - pkin(10) * t486 + t393 * t26;
t322 = t345 + t452;
t412 = pkin(5) * t173 - t50;
t410 = (-qJD(4) + t382) * t337 - t426;
t383 = t390 ^ 2;
t379 = t383 * t397;
t366 = t378 - 0.2e1 * t433;
t363 = t377 + 0.2e1 * t432;
t361 = pkin(7) * t397 + t416;
t352 = -t357 - t396;
t351 = -t357 + t396;
t350 = t356 - t396;
t339 = -t396 - t356;
t327 = -t334 + t492;
t326 = t333 - t492;
t325 = -t334 - t492;
t323 = t346 + t355;
t321 = -t345 + t452;
t320 = -t356 - t357;
t310 = -t352 * t385 - t462;
t309 = t352 * t386 - t463;
t308 = t339 * t386 - t507;
t307 = t339 * t385 + t506;
t305 = t334 - t333;
t300 = -t492 - t333;
t298 = -t315 + t331;
t297 = -t331 + t493;
t296 = (-t335 * t394 + t337 * t389) * t382;
t295 = (-t335 * t389 - t337 * t394) * t382;
t292 = t315 - t493;
t291 = t322 * t386 + t324 * t385;
t290 = t322 * t385 - t324 * t386;
t280 = -t333 - t334;
t278 = t326 * t394 - t471;
t277 = -t327 * t389 + t500;
t276 = t326 * t389 + t470;
t275 = t327 * t394 + t503;
t271 = -t325 * t389 - t470;
t270 = t325 * t394 - t471;
t265 = -t286 + t329;
t264 = t285 - t329;
t261 = t284 + t328;
t259 = -t335 * t447 + t419;
t256 = t337 * t447 + t426;
t255 = t284 * t394 - t337 * t461;
t254 = t284 * t389 + t337 * t460;
t253 = -t283 * t389 + t335 * t460;
t252 = t283 * t394 + t335 * t461;
t251 = t300 * t394 - t503;
t250 = t300 * t389 + t500;
t246 = (-t317 * t393 + t319 * t388) * t332;
t245 = (-t317 * t388 - t319 * t393) * t332;
t238 = t286 - t285;
t233 = -t299 + t249;
t227 = t249 * t393 - t319 * t465;
t226 = t249 * t388 + t319 * t464;
t225 = t317 * t464 + t388 * t413;
t224 = t317 * t465 - t393 * t413;
t221 = -pkin(8) * t270 - t472;
t220 = -t270 * t385 + t271 * t386;
t219 = t270 * t386 + t271 * t385;
t218 = (-t287 * t392 + t289 * t387) * t330;
t217 = (-t287 * t387 - t289 * t392) * t330;
t216 = t246 * t394 + t282 * t389;
t215 = t246 * t389 - t282 * t394;
t214 = t297 * t393 - t475;
t213 = -t298 * t388 + t501;
t212 = t297 * t388 + t474;
t211 = t298 * t393 + t504;
t210 = t261 * t389 + t394 * t410;
t209 = -t256 * t394 - t260 * t389;
t208 = -t261 * t394 + t389 * t410;
t207 = -t256 * t389 + t260 * t394;
t206 = -pkin(8) * t250 - t473;
t199 = t279 * t393 - t475;
t197 = -t250 * t385 + t251 * t386;
t196 = t250 * t386 + t251 * t385;
t194 = t268 * t388 + t501;
t192 = t227 * t394 + t438;
t191 = t225 * t394 - t438;
t190 = t227 * t389 - t437;
t189 = t225 * t389 + t437;
t188 = -pkin(3) * t259 + pkin(8) * t271 - t473;
t180 = -qJD(6) * t289 - t428;
t179 = -pkin(3) * t256 + pkin(8) * t251 + t472;
t178 = t264 * t392 - t478;
t177 = -t265 * t387 + t502;
t176 = t264 * t387 + t477;
t175 = t265 * t392 + t505;
t171 = t231 * t393 - t233 * t388;
t170 = -t230 * t388 - t234 * t393;
t169 = t231 * t388 + t233 * t393;
t161 = t214 * t394 - t230 * t389;
t160 = t213 * t394 + t234 * t389;
t159 = t214 * t389 + t230 * t394;
t158 = t213 * t389 - t234 * t394;
t147 = -t217 * t388 + t218 * t393;
t146 = t217 * t393 + t218 * t388;
t145 = t181 * t392 - t289 * t467;
t144 = t181 * t387 + t289 * t466;
t143 = -t180 * t387 + t287 * t466;
t142 = t180 * t392 + t287 * t467;
t141 = t200 * t394 - t235 * t389;
t140 = t200 * t389 + t235 * t394;
t139 = t195 * t394 - t231 * t389;
t138 = t195 * t389 + t231 * t394;
t137 = -t208 * t385 + t210 * t386;
t136 = t208 * t386 + t210 * t385;
t135 = t171 * t394 + t292 * t389;
t134 = t171 * t389 - t292 * t394;
t133 = t172 * t394 - t263 * t389;
t132 = t172 * t389 + t263 * t394;
t131 = t147 * t394 + t281 * t389;
t130 = t147 * t389 - t281 * t394;
t127 = -pkin(9) * t199 + t163;
t126 = -pkin(9) * t194 + t162;
t123 = -t176 * t388 + t178 * t393;
t122 = -t175 * t388 + t177 * t393;
t121 = t176 * t393 + t178 * t388;
t120 = t175 * t393 + t177 * t388;
t119 = pkin(3) * t272 + pkin(8) * t129;
t113 = t173 * t393 + t174 * t388;
t110 = t156 * t393 + t157 * t388;
t108 = -pkin(8) * t208 - t128;
t106 = -t150 * t392 - t387 * t498;
t104 = -t150 * t387 + t392 * t498;
t103 = -t144 * t388 + t145 * t393;
t102 = -t142 * t388 + t143 * t393;
t101 = t144 * t393 + t145 * t388;
t100 = t142 * t393 + t143 * t388;
t99 = -t140 * t385 + t141 * t386;
t98 = t140 * t386 + t141 * t385;
t97 = -t138 * t385 + t139 * t386;
t96 = t138 * t386 + t139 * t385;
t95 = -pkin(3) * t280 + pkin(8) * t210 + t129;
t94 = -pkin(4) * t199 + t118;
t92 = -pkin(4) * t194 + t117;
t91 = -t132 * t385 + t133 * t386;
t90 = t132 * t386 + t133 * t385;
t89 = t103 * t394 + t440;
t88 = t102 * t394 - t440;
t87 = t103 * t389 - t439;
t86 = t102 * t389 + t439;
t79 = t123 * t394 - t151 * t389;
t78 = t122 * t394 + t154 * t389;
t77 = t123 * t389 + t151 * t394;
t76 = t122 * t389 - t154 * t394;
t75 = t114 * t394 + t389 * t498;
t74 = t114 * t389 - t394 * t498;
t73 = t129 * t386 - t480;
t72 = t129 * t385 + t479;
t71 = t111 * t394 + t150 * t389;
t70 = t111 * t389 - t150 * t394;
t61 = -t104 * t388 + t106 * t393;
t60 = t105 * t393 + t107 * t388;
t59 = t104 * t393 + t106 * t388;
t57 = -pkin(9) * t170 - t68;
t56 = t166 * t389 + t394 * t69;
t55 = -t166 * t394 + t389 * t69;
t54 = t238 * t389 + t394 * t61;
t53 = -t238 * t394 + t389 * t61;
t52 = t205 * t389 + t394 * t62;
t51 = -t205 * t394 + t389 * t62;
t47 = -pkin(8) * t140 + t127 * t394 - t389 * t94;
t46 = -pkin(8) * t138 + t126 * t394 - t389 * t92;
t45 = -pkin(3) * t199 + pkin(8) * t141 + t127 * t389 + t394 * t94;
t44 = -pkin(3) * t194 + pkin(8) * t139 + t126 * t389 + t394 * t92;
t43 = -t385 * t74 + t386 * t75;
t42 = t385 * t75 + t386 * t74;
t41 = -t385 * t70 + t386 * t71;
t40 = t385 * t71 + t386 * t70;
t39 = -pkin(4) * t60 - t488;
t38 = -pkin(8) * t132 + t170 * t489 + t394 * t57;
t37 = pkin(8) * t133 + t170 * t434 + t389 * t57;
t36 = -pkin(4) * t113 - t412;
t35 = -pkin(9) * t113 - t388 * t66 + t393 * t85;
t34 = -pkin(4) * t110 - t418;
t33 = -pkin(9) * t110 - t388 * t64 + t393 * t81;
t32 = -t385 * t55 + t386 * t56;
t31 = t385 * t56 + t386 * t55;
t30 = -t385 * t51 + t386 * t52;
t29 = t385 * t52 + t386 * t51;
t24 = -pkin(8) * t55 + (-pkin(9) * t394 + t489) * t68;
t19 = pkin(8) * t56 + (-pkin(9) * t389 + t434) * t68;
t18 = -pkin(8) * t74 + t35 * t394 - t36 * t389;
t17 = -pkin(8) * t70 + t33 * t394 - t34 * t389;
t15 = t28 * t388 + t485;
t13 = -pkin(3) * t113 + pkin(8) * t75 + t35 * t389 + t36 * t394;
t12 = t125 * t389 + t16 * t394;
t11 = -t125 * t394 + t16 * t389;
t10 = -pkin(3) * t110 + pkin(8) * t71 + t33 * t389 + t34 * t394;
t9 = -pkin(9) * t60 - t21 * t388 + t23 * t393;
t8 = -pkin(4) * t15 - t491;
t7 = -pkin(8) * t51 - t389 * t39 + t394 * t9;
t6 = -pkin(9) * t15 - pkin(10) * t485 - t26 * t388;
t5 = -t11 * t385 + t12 * t386;
t4 = t11 * t386 + t12 * t385;
t3 = -pkin(3) * t60 + pkin(8) * t52 + t389 * t9 + t39 * t394;
t2 = -pkin(8) * t11 - t389 * t8 + t394 * t6;
t1 = -pkin(3) * t15 + pkin(8) * t12 + t389 * t6 + t394 * t8;
t14 = [0, 0, 0, 0, 0, qJDD(1), t430, t417, 0, 0, (t364 + t432) * t390, t363 * t395 + t366 * t390, t459 + t395 * (-t379 + t396), (t365 - t433) * t395, t390 * (t380 - t396) + t456, 0, t395 * t361 + pkin(1) * t366 + pkin(7) * (t395 * t495 - t459), -t390 * t361 - pkin(1) * t363 + pkin(7) * (-t456 - t390 * (-t379 - t396)), pkin(1) * (t379 + t380) + (t383 + t384) * t483 + t425, pkin(1) * t361 + pkin(7) * t425, t390 * (t346 * t386 - t359 * t451) + t395 * (t346 * t385 + t359 * t450), t390 * (-t321 * t386 - t323 * t385) + t395 * (-t321 * t385 + t323 * t386), t390 * (-t351 * t385 + t506) + t395 * (t351 * t386 + t507), t390 * (-t345 * t385 - t358 * t450) + t395 * (t345 * t386 - t358 * t451), t390 * (t350 * t386 - t463) + t395 * (t350 * t385 + t462), (t390 * (t358 * t386 + t359 * t385) + t395 * (t358 * t385 - t359 * t386)) * qJD(2), t390 * (-qJ(3) * t307 - t469) + t395 * (-pkin(2) * t321 + qJ(3) * t308 + t468) - pkin(1) * t321 + pkin(7) * (-t307 * t390 + t308 * t395), t390 * (-qJ(3) * t309 - t468) + t395 * (-pkin(2) * t323 + qJ(3) * t310 - t469) - pkin(1) * t323 + pkin(7) * (-t309 * t390 + t310 * t395), t390 * (-qJ(3) * t290 - t222) + t395 * (-pkin(2) * t320 + qJ(3) * t291 + t223) - pkin(1) * t320 + pkin(7) * (-t290 * t390 + t291 * t395), -qJ(3) * t476 + t395 * (pkin(2) * t316 + qJ(3) * t223) + pkin(1) * t316 + pkin(7) * (t223 * t395 - t476), t390 * (-t254 * t385 + t255 * t386) + t395 * (t254 * t386 + t255 * t385), t390 * (-t207 * t385 + t209 * t386) + t395 * (t207 * t386 + t209 * t385), t390 * (-t275 * t385 + t277 * t386) + t395 * (t275 * t386 + t277 * t385), t390 * (-t252 * t385 + t253 * t386) + t395 * (t252 * t386 + t253 * t385), t390 * (-t276 * t385 + t278 * t386) + t395 * (t276 * t386 + t278 * t385), t390 * (-t295 * t385 + t296 * t386) + t395 * (t295 * t386 + t296 * t385), t390 * (-qJ(3) * t196 - t179 * t385 + t206 * t386) + t395 * (-pkin(2) * t256 + qJ(3) * t197 + t179 * t386 + t206 * t385) - pkin(1) * t256 + pkin(7) * (-t196 * t390 + t197 * t395), t390 * (-qJ(3) * t219 - t188 * t385 + t221 * t386) + t395 * (-pkin(2) * t259 + qJ(3) * t220 + t188 * t386 + t221 * t385) - pkin(1) * t259 + pkin(7) * (-t219 * t390 + t220 * t395), t390 * (-qJ(3) * t136 + t108 * t386 - t385 * t95) + t395 * (-pkin(2) * t280 + qJ(3) * t137 + t108 * t385 + t386 * t95) - pkin(1) * t280 + pkin(7) * (-t136 * t390 + t137 * t395), t390 * (-pkin(8) * t479 - qJ(3) * t72 - t119 * t385) + t395 * (pkin(2) * t272 - pkin(8) * t480 + qJ(3) * t73 + t119 * t386) + pkin(1) * t272 + pkin(7) * (-t390 * t72 + t395 * t73), t390 * (-t190 * t385 + t192 * t386) + t395 * (t190 * t386 + t192 * t385), t390 * (-t134 * t385 + t135 * t386) + t395 * (t134 * t386 + t135 * t385), t390 * (-t158 * t385 + t160 * t386) + t395 * (t158 * t386 + t160 * t385), t390 * (-t189 * t385 + t191 * t386) + t395 * (t189 * t386 + t191 * t385), t390 * (-t159 * t385 + t161 * t386) + t395 * (t159 * t386 + t161 * t385), t390 * (-t215 * t385 + t216 * t386) + t395 * (t215 * t386 + t216 * t385), t390 * (-qJ(3) * t96 - t385 * t44 + t386 * t46) + t395 * (-pkin(2) * t194 + qJ(3) * t97 + t385 * t46 + t386 * t44) - pkin(1) * t194 + pkin(7) * (-t390 * t96 + t395 * t97), t390 * (-qJ(3) * t98 - t385 * t45 + t386 * t47) + t395 * (-pkin(2) * t199 + qJ(3) * t99 + t385 * t47 + t386 * t45) - pkin(1) * t199 + pkin(7) * (-t390 * t98 + t395 * t99), t390 * (-qJ(3) * t90 - t37 * t385 + t38 * t386) + t395 * (-pkin(2) * t170 + qJ(3) * t91 + t37 * t386 + t38 * t385) - pkin(1) * t170 + pkin(7) * (-t390 * t90 + t395 * t91), t390 * (-qJ(3) * t31 - t19 * t385 + t24 * t386) + t395 * (-pkin(2) * t68 + qJ(3) * t32 + t19 * t386 + t24 * t385) - pkin(1) * t68 + pkin(7) * (-t31 * t390 + t32 * t395), t390 * (-t385 * t87 + t386 * t89) + t395 * (t385 * t89 + t386 * t87), t390 * (-t385 * t53 + t386 * t54) + t395 * (t385 * t54 + t386 * t53), t390 * (-t385 * t76 + t386 * t78) + t395 * (t385 * t78 + t386 * t76), t390 * (-t385 * t86 + t386 * t88) + t395 * (t385 * t88 + t386 * t86), t390 * (-t385 * t77 + t386 * t79) + t395 * (t385 * t79 + t386 * t77), t390 * (-t130 * t385 + t131 * t386) + t395 * (t130 * t386 + t131 * t385), t390 * (-qJ(3) * t40 - t10 * t385 + t17 * t386) + t395 * (-pkin(2) * t110 + qJ(3) * t41 + t10 * t386 + t17 * t385) - pkin(1) * t110 + pkin(7) * (-t390 * t40 + t395 * t41), t390 * (-qJ(3) * t42 - t13 * t385 + t18 * t386) + t395 * (-pkin(2) * t113 + qJ(3) * t43 + t13 * t386 + t18 * t385) - pkin(1) * t113 + pkin(7) * (-t390 * t42 + t395 * t43), t390 * (-qJ(3) * t29 - t3 * t385 + t386 * t7) + t395 * (-pkin(2) * t60 + qJ(3) * t30 + t3 * t386 + t385 * t7) - pkin(1) * t60 + pkin(7) * (-t29 * t390 + t30 * t395), t390 * (-qJ(3) * t4 - t1 * t385 + t2 * t386) + t395 * (-pkin(2) * t15 + qJ(3) * t5 + t1 * t386 + t2 * t385) - pkin(1) * t15 + pkin(7) * (-t390 * t4 + t395 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t372, t379 - t380, t377, t372, t378, qJDD(2), -t348, -t349, 0, 0, -t344, -t356 + t357, t324, t344, t322, qJDD(2), -t385 * t349 - t386 * t348 + t441 + (-t385 * (t365 + t433) + t386 * (-t364 + t432)) * qJ(3) + (t386 * t367 - t385 * t495 + t307) * pkin(2), pkin(2) * t309 - t274, pkin(2) * t290, pkin(2) * t222, t306, t305, t261, -t306, t410, t442, pkin(2) * t196 + pkin(3) * t250 - t186, pkin(2) * t219 - t457 - t389 * t399 + (-t389 * t494 + t270) * pkin(3), pkin(2) * t136 + pkin(3) * t208, pkin(2) * t72 + pkin(3) * t128, t226, t169, t211, t224, t212, t245, pkin(2) * t96 + pkin(3) * t138 + t435, pkin(2) * t98 + pkin(3) * t140 + t436, pkin(2) * t90 + pkin(3) * t132 + t422, pkin(2) * t31 + pkin(3) * t55 + t484, t101, t59, t120, t100, t121, t146, pkin(2) * t40 + pkin(3) * t70 + t424, pkin(2) * t42 + pkin(3) * t74 + t423, pkin(2) * t29 + pkin(3) * t51 + t429, pkin(2) * t4 + pkin(3) * t11 + t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t321, t323, t320, -t316, 0, 0, 0, 0, 0, 0, t256, t259, t280, -t272, 0, 0, 0, 0, 0, 0, t194, t199, t170, t68, 0, 0, 0, 0, 0, 0, t110, t113, t60, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t306, t305, t261, -t306, t410, t442, -t186, -t187, 0, 0, t226, t169, t211, t224, t212, t245, t435, t436, t422, t484, t101, t59, t120, t100, t121, t146, t424, t423, t429, t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293, t292, t234, -t293, -t230, t282, -t117, -t118, 0, 0, t239, t238, t154, -t239, -t151, t281, t418, t412, t488, t491; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239, t238, t154, -t239, -t151, t281, -t49, -t50, 0, 0;];
tauJ_reg  = t14;
