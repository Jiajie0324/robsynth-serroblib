% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x33]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR2_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR2_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR2_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR2_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:19:09
% EndTime: 2019-03-09 13:19:27
% DurationCPUTime: 6.46s
% Computational Cost: add. (9569->413), mult. (24584->562), div. (0->0), fcn. (19899->10), ass. (0->245)
t238 = sin(pkin(11));
t239 = cos(pkin(11));
t243 = sin(qJ(2));
t246 = cos(qJ(2));
t208 = -t238 * t243 + t239 * t246;
t198 = t208 * qJD(1);
t209 = t238 * t246 + t239 * t243;
t200 = t209 * qJD(1);
t242 = sin(qJ(4));
t346 = cos(qJ(4));
t152 = t346 * t198 - t200 * t242;
t350 = qJD(5) + qJD(6);
t397 = -t152 + t350;
t296 = -qJD(5) + t152;
t141 = qJD(6) - t296;
t240 = sin(qJ(6));
t241 = sin(qJ(5));
t244 = cos(qJ(6));
t245 = cos(qJ(5));
t214 = t240 * t245 + t241 * t244;
t295 = qJD(1) * qJD(2);
t282 = t246 * t295;
t283 = t243 * t295;
t190 = -t238 * t283 + t239 * t282;
t199 = t209 * qJD(2);
t254 = qJD(1) * t199;
t259 = -t242 * t198 - t346 * t200;
t250 = qJD(4) * t259 - t242 * t190 - t346 * t254;
t213 = t240 * t241 - t244 * t245;
t395 = t397 * t213;
t396 = -t395 * t141 - t214 * t250;
t394 = t397 * t214;
t299 = qJD(5) * t245;
t372 = t152 * t245;
t393 = t299 - t372;
t340 = -qJ(3) - pkin(7);
t220 = t340 * t243;
t215 = qJD(1) * t220;
t221 = t340 * t246;
t216 = qJD(1) * t221;
t309 = t239 * t216;
t158 = -t215 * t238 + t309;
t344 = pkin(8) * t198;
t137 = t158 - t344;
t203 = t238 * t216;
t159 = t239 * t215 + t203;
t343 = pkin(8) * t200;
t138 = t159 - t343;
t229 = pkin(2) * t239 + pkin(3);
t345 = pkin(2) * t238;
t353 = t346 * t229 - t242 * t345;
t376 = t353 * qJD(4) - t242 * t137 - t346 * t138;
t104 = -pkin(4) * t259 - pkin(9) * t152;
t302 = qJD(1) * t243;
t172 = pkin(2) * t302 + pkin(3) * t200;
t82 = t104 + t172;
t392 = -t376 * t241 - t245 * t82;
t373 = t152 * t241;
t391 = pkin(10) * t373;
t235 = qJD(2) + qJD(4);
t317 = t259 * t235;
t390 = t250 - t317;
t270 = -t394 * t141 + t213 * t250;
t133 = -t245 * t235 - t241 * t259;
t136 = t235 * t241 - t245 * t259;
t76 = t244 * t133 + t136 * t240;
t334 = t259 * t76;
t389 = t270 - t334;
t300 = qJD(5) * t241;
t388 = (t300 - t373) * pkin(5);
t387 = -pkin(5) * t259 - pkin(10) * t372;
t278 = qJD(2) * t340;
t195 = qJD(3) * t246 + t243 * t278;
t178 = t195 * qJD(1);
t196 = -qJD(3) * t243 + t246 * t278;
t179 = t196 * qJD(1);
t132 = -t178 * t238 + t239 * t179;
t113 = -pkin(8) * t190 + t132;
t135 = t239 * t178 + t238 * t179;
t114 = -pkin(8) * t254 + t135;
t335 = qJD(2) * pkin(2);
t207 = t215 + t335;
t154 = t239 * t207 + t203;
t123 = qJD(2) * pkin(3) + t154 - t343;
t155 = t238 * t207 - t309;
t129 = t155 + t344;
t284 = qJD(4) * t346;
t301 = qJD(4) * t242;
t28 = -t346 * t113 + t242 * t114 + t123 * t301 + t129 * t284;
t99 = t346 * t190 + t198 * t284 - t200 * t301 - t242 * t254;
t331 = t241 * t99;
t56 = qJD(5) * t136 + t331;
t13 = pkin(5) * t56 + t28;
t67 = t346 * t123 - t242 * t129;
t63 = -t235 * pkin(4) - t67;
t46 = t133 * pkin(5) + t63;
t68 = t242 * t123 + t346 * t129;
t64 = pkin(9) * t235 + t68;
t292 = -pkin(2) * t246 - pkin(1);
t265 = t292 * qJD(1);
t219 = qJD(3) + t265;
t162 = -pkin(3) * t198 + t219;
t72 = -pkin(4) * t152 + pkin(9) * t259 + t162;
t32 = -t241 * t64 + t245 * t72;
t23 = -pkin(10) * t136 + t32;
t17 = -pkin(5) * t296 + t23;
t33 = t241 * t72 + t245 * t64;
t24 = -pkin(10) * t133 + t33;
t332 = t24 * t244;
t7 = t17 * t240 + t332;
t386 = t13 * t214 - t7 * t259 - t395 * t46;
t6 = t17 * t244 - t24 * t240;
t385 = t13 * t213 + t6 * t259 + t394 * t46;
t55 = t235 * t299 + t245 * t99 + t259 * t300;
t384 = -t393 * t133 - t241 * t56 + t55 * t245;
t53 = t55 * t241;
t383 = t393 * t136 + t53;
t297 = qJD(6) * t244;
t298 = qJD(6) * t240;
t14 = -t133 * t297 - t136 * t298 - t240 * t56 + t244 * t55;
t263 = t133 * t240 - t244 * t136;
t382 = t14 * t214 + t395 * t263;
t333 = t259 * t263;
t381 = -t333 + t396;
t319 = t136 * t259;
t96 = t241 * t250;
t326 = -t296 * t299 - t96;
t380 = t296 * t372 + t319 + t326;
t251 = qJD(6) * t263 - t240 * t55 - t244 * t56;
t379 = -t14 * t213 + t214 * t251 + t394 * t263 + t395 * t76;
t377 = t263 * t76;
t314 = t152 * t235;
t375 = t99 - t314;
t320 = t133 * t259;
t374 = t141 * t259;
t369 = t259 * t152;
t368 = t296 * t259;
t367 = t263 ^ 2 - t76 ^ 2;
t366 = -t152 ^ 2 + t259 ^ 2;
t21 = t24 * t298;
t365 = t46 * t76 + t21;
t364 = t141 * t76 + t14;
t361 = t162 * t259 - t28;
t249 = -t242 * t113 - t346 * t114 - t123 * t284 + t129 * t301;
t227 = pkin(2) * t283;
t163 = pkin(3) * t254 + t227;
t40 = -pkin(4) * t250 - t99 * pkin(9) + t163;
t39 = t245 * t40;
t252 = -qJD(5) * t33 + t241 * t249 + t39;
t2 = -pkin(5) * t250 - pkin(10) * t55 + t252;
t261 = t241 * t40 - t245 * t249 + t72 * t299 - t300 * t64;
t3 = -pkin(10) * t56 + t261;
t291 = t244 * t2 - t240 * t3;
t360 = -qJD(6) * t7 + t46 * t263 + t291;
t279 = -t28 * t245 + t63 * t300;
t359 = t32 * t259 + t279;
t358 = t28 * t241 - t33 * t259 + t63 * t299;
t357 = -t141 * t263 + t251;
t356 = -t162 * t152 + t249;
t355 = -0.2e1 * t295;
t255 = t242 * t229 + t346 * t345;
t323 = t255 * qJD(4) + t346 * t137 - t242 * t138;
t98 = t245 * t250;
t354 = -t296 * t300 + t98;
t157 = t242 * t208 + t346 * t209;
t105 = t214 * t157;
t202 = t208 * qJD(2);
t258 = t346 * t208 - t242 * t209;
t107 = t258 * qJD(4) - t242 * t199 + t346 * t202;
t308 = t245 * t107;
t256 = -t157 * t300 + t308;
t164 = t239 * t220 + t221 * t238;
t144 = -pkin(8) * t209 + t164;
t165 = t238 * t220 - t239 * t221;
t145 = pkin(8) * t208 + t165;
t352 = t346 * t144 - t242 * t145;
t351 = t241 * t82 - t376 * t245;
t349 = -pkin(9) - pkin(10);
t342 = t245 * pkin(5);
t194 = pkin(9) + t255;
t341 = -pkin(10) - t194;
t95 = t242 * t144 + t346 * t145;
t88 = t245 * t95;
t181 = -pkin(3) * t208 + t292;
t89 = -pkin(4) * t258 - pkin(9) * t157 + t181;
t336 = t241 * t89 + t88;
t325 = t323 + t388;
t322 = t241 * t104 + t245 * t67;
t321 = t107 * t241;
t318 = t136 * t241;
t311 = t157 * t241;
t310 = t157 * t245;
t248 = qJD(1) ^ 2;
t306 = t246 * t248;
t247 = qJD(2) ^ 2;
t305 = t247 * t243;
t304 = t247 * t246;
t143 = t239 * t195 + t238 * t196;
t303 = t243 ^ 2 - t246 ^ 2;
t233 = t243 * t335;
t290 = qJD(5) * t349;
t287 = t157 * t299;
t173 = pkin(3) * t199 + t233;
t281 = qJD(6) * t17 + t3;
t277 = qJD(5) * t341;
t275 = t245 * t104 - t241 * t67;
t274 = pkin(1) * t355;
t142 = -t195 * t238 + t239 * t196;
t272 = t296 * t241;
t271 = t388 - t68;
t166 = t341 * t241;
t269 = -qJD(6) * t166 - t241 * t277 + t351 - t391;
t234 = t245 * pkin(10);
t167 = t194 * t245 + t234;
t268 = qJD(6) * t167 - t245 * t277 + t387 - t392;
t222 = t349 * t241;
t267 = -qJD(6) * t222 - t241 * t290 + t322 - t391;
t223 = pkin(9) * t245 + t234;
t266 = qJD(6) * t223 - t245 * t290 + t275 + t387;
t264 = -t63 * t152 + t194 * t250;
t193 = -pkin(4) - t353;
t262 = -t296 * t373 - t354;
t116 = -pkin(8) * t202 + t142;
t117 = -pkin(8) * t199 + t143;
t36 = qJD(4) * t352 + t242 * t116 + t346 * t117;
t108 = t157 * qJD(4) + t346 * t199 + t242 * t202;
t45 = pkin(4) * t108 - pkin(9) * t107 + t173;
t260 = t241 * t45 + t245 * t36 + t89 * t299 - t300 * t95;
t257 = t287 + t321;
t37 = t95 * qJD(4) - t346 * t116 + t242 * t117;
t231 = -pkin(4) - t342;
t174 = t193 - t342;
t106 = t213 * t157;
t87 = t245 * t89;
t65 = t250 * t258;
t60 = pkin(5) * t311 - t352;
t44 = t245 * t45;
t34 = -pkin(10) * t311 + t336;
t30 = -pkin(5) * t258 - pkin(10) * t310 - t241 * t95 + t87;
t19 = -t298 * t311 + (t310 * t350 + t321) * t244 + t256 * t240;
t18 = -t105 * t350 - t213 * t107;
t16 = pkin(5) * t257 + t37;
t5 = -pkin(10) * t257 + t260;
t4 = -pkin(10) * t308 + pkin(5) * t108 - t241 * t36 + t44 + (-t88 + (pkin(10) * t157 - t89) * t241) * qJD(5);
t1 = [0, 0, 0, 0.2e1 * t243 * t282, t303 * t355, t304, -t305, 0, -pkin(7) * t304 + t243 * t274, pkin(7) * t305 + t246 * t274, -t132 * t209 + t135 * t208 - t142 * t200 + t143 * t198 - t154 * t202 - t155 * t199 - t164 * t190 - t165 * t254, t132 * t164 + t135 * t165 + t154 * t142 + t155 * t143 + (t219 + t265) * t233, -t107 * t259 + t157 * t99, t107 * t152 + t108 * t259 + t157 * t250 + t258 * t99, t107 * t235, -t108 * t235, 0, t108 * t162 - t152 * t173 - t163 * t258 - t181 * t250 - t235 * t37, t107 * t162 + t157 * t163 - t173 * t259 + t181 * t99 - t235 * t36, t136 * t256 + t310 * t55 (-t133 * t245 - t318) * t107 + (-t53 - t245 * t56 + (t133 * t241 - t136 * t245) * qJD(5)) * t157, t108 * t136 - t157 * t98 - t256 * t296 - t258 * t55, -t108 * t133 + t157 * t96 + t257 * t296 + t258 * t56, -t108 * t296 + t65 -(-t299 * t95 + t44) * t296 - t87 * t250 - (-t299 * t64 + t39) * t258 + t32 * t108 + t37 * t133 - t352 * t56 + t63 * t287 + (-(-qJD(5) * t89 - t36) * t296 + t95 * t250 - (-qJD(5) * t72 + t249) * t258 + t28 * t157 + t63 * t107) * t241, -t33 * t108 + t37 * t136 - t157 * t279 + t250 * t336 + t258 * t261 + t260 * t296 + t63 * t308 - t352 * t55, -t106 * t14 - t18 * t263, -t105 * t14 - t106 * t251 - t18 * t76 + t19 * t263, t106 * t250 - t108 * t263 - t14 * t258 + t141 * t18, t105 * t250 - t108 * t76 - t141 * t19 - t251 * t258, t108 * t141 + t65 (-t240 * t5 + t244 * t4) * t141 - (-t240 * t34 + t244 * t30) * t250 - t291 * t258 + t6 * t108 + t16 * t76 - t60 * t251 + t13 * t105 + t46 * t19 + ((-t240 * t30 - t244 * t34) * t141 + t7 * t258) * qJD(6), -t13 * t106 - t7 * t108 + t60 * t14 - t21 * t258 - t16 * t263 + t46 * t18 + (-(-qJD(6) * t34 + t4) * t141 + t30 * t250 + t2 * t258) * t240 + (-(qJD(6) * t30 + t5) * t141 + t34 * t250 + t281 * t258) * t244; 0, 0, 0, -t243 * t306, t303 * t248, 0, 0, 0, t248 * pkin(1) * t243, pkin(1) * t306 (t155 + t158) * t200 + (-t159 + t154) * t198 + (-t239 * t190 - t238 * t254) * pkin(2), -t154 * t158 - t155 * t159 + (t132 * t239 + t135 * t238 - t219 * t302) * pkin(2), t369, t366, t375, t390, 0, t152 * t172 - t235 * t323 + t361, t172 * t259 - t235 * t376 + t356, t383, t296 * t318 + t384, t380, t262 - t320, -t368, t193 * t56 + t264 * t241 + t323 * t133 - (-t194 * t299 + t392) * t296 + t359, t193 * t55 + t264 * t245 + t323 * t136 - (t194 * t300 + t351) * t296 + t358, t382, t379, t381, t389, t374 -(t166 * t244 - t167 * t240) * t250 - t174 * t251 + t325 * t76 + (t240 * t269 - t244 * t268) * t141 + t385 (t166 * t240 + t167 * t244) * t250 + t174 * t14 - t325 * t263 + (t240 * t268 + t244 * t269) * t141 + t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198 ^ 2 - t200 ^ 2, t154 * t200 - t155 * t198 + t227, 0, 0, 0, 0, 0, -t250 - t317, t99 + t314, 0, 0, 0, 0, 0, t262 + t320, -t245 * t296 ^ 2 + t319 + t96, 0, 0, 0, 0, 0, t270 + t334, -t333 - t396; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t369, t366, t375, t390, 0, t235 * t68 + t361, t67 * t235 + t356, t383, t136 * t272 + t384, t380, -t272 * t296 - t320 - t98, -t368, -pkin(4) * t56 - pkin(9) * t326 - t68 * t133 + t275 * t296 - t373 * t63 + t359, -pkin(4) * t55 + pkin(9) * t354 - t68 * t136 - t296 * t322 - t372 * t63 + t358, t382, t379, t381, t389, t374 -(t222 * t244 - t223 * t240) * t250 - t231 * t251 + t271 * t76 + (t240 * t267 - t244 * t266) * t141 + t385 (t222 * t240 + t223 * t244) * t250 + t231 * t14 - t271 * t263 + (t240 * t266 + t244 * t267) * t141 + t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136 * t133, -t133 ^ 2 + t136 ^ 2, -t133 * t296 + t55, -t331 + (-qJD(5) - t296) * t136, -t250, -t136 * t63 - t296 * t33 + t252, t133 * t63 - t296 * t32 - t261, -t377, t367, t364, t357, -t250 -(-t23 * t240 - t332) * t141 + (-t136 * t76 - t141 * t298 - t244 * t250) * pkin(5) + t360 (-t24 * t141 - t2) * t240 + (t23 * t141 - t281) * t244 + (t136 * t263 - t141 * t297 + t240 * t250) * pkin(5) + t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t377, t367, t364, t357, -t250, t141 * t7 + t360, t141 * t6 - t240 * t2 - t244 * t281 + t365;];
tauc_reg  = t1;
