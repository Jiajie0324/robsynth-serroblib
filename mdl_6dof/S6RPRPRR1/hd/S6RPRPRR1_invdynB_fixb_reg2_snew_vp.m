% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 18:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:15:13
% EndTime: 2019-05-05 18:15:42
% DurationCPUTime: 29.21s
% Computational Cost: add. (208865->880), mult. (464841->1358), div. (0->0), fcn. (334396->12), ass. (0->601)
t933 = sin(qJ(1));
t1013 = qJD(1) ^ 2;
t937 = cos(qJ(1));
t899 = g(1) * t937 + g(2) * t933;
t884 = -pkin(1) * t1013 - t899;
t926 = sin(pkin(10));
t928 = cos(pkin(10));
t898 = g(1) * t933 - t937 * g(2);
t946 = qJDD(1) * pkin(1) + t898;
t835 = t926 * t884 - t928 * t946;
t836 = t928 * t884 + t926 * t946;
t955 = t835 * t926 + t928 * t836;
t764 = t835 * t928 - t836 * t926;
t995 = t764 * t937;
t700 = t933 * t955 - t995;
t996 = t764 * t933;
t701 = t937 * t955 + t996;
t888 = qJDD(1) * t926 + t1013 * t928;
t889 = qJDD(1) * t928 - t1013 * t926;
t840 = -t888 * t933 + t937 * t889;
t923 = g(3) - qJDD(2);
t862 = qJ(2) * t888 - t923 * t928;
t948 = -qJ(2) * t889 - t923 * t926;
t1035 = -pkin(6) * t840 + t862 * t933 + t937 * t948;
t925 = sin(pkin(11));
t927 = cos(pkin(11));
t936 = cos(qJ(3));
t932 = sin(qJ(3));
t980 = qJD(1) * t932;
t872 = qJD(1) * t927 * t936 - t925 * t980;
t947 = t925 * t936 + t927 * t932;
t873 = t947 * qJD(1);
t931 = sin(qJ(5));
t935 = cos(qJ(5));
t813 = -t935 * t872 + t873 * t931;
t921 = qJD(3) + qJD(5);
t805 = t921 * t813;
t971 = qJD(1) * qJD(3);
t957 = t936 * t971;
t970 = qJDD(1) * t932;
t886 = t957 + t970;
t958 = t932 * t971;
t969 = qJDD(1) * t936;
t945 = t958 - t969;
t838 = t927 * t886 - t925 * t945;
t953 = t886 * t925 + t927 * t945;
t943 = qJD(5) * t813 - t838 * t935 + t931 * t953;
t1034 = t943 + t805;
t834 = t872 * t873;
t1018 = qJDD(3) + t834;
t1033 = t1018 * t925;
t1032 = t1018 * t927;
t815 = t872 * t931 + t873 * t935;
t756 = t815 * t813;
t920 = qJDD(3) + qJDD(5);
t1021 = -t756 + t920;
t1031 = t1021 * t931;
t1030 = t1021 * t935;
t930 = sin(qJ(6));
t934 = cos(qJ(6));
t784 = t815 * t930 - t934 * t921;
t786 = t815 * t934 + t921 * t930;
t736 = t786 * t784;
t954 = t931 * t838 + t935 * t953;
t724 = -qJD(5) * t815 - t954;
t944 = qJDD(6) - t724;
t1022 = -t736 + t944;
t1029 = t1022 * t930;
t1028 = t1022 * t934;
t1019 = t937 * t888 + t889 * t933;
t1027 = pkin(6) * t1019 + t862 * t937 - t933 * t948;
t678 = -t784 * qJD(6) + t930 * t920 - t934 * t943;
t810 = qJD(6) + t813;
t746 = t810 * t784;
t643 = -t746 + t678;
t956 = -t934 * t920 - t930 * t943;
t640 = (qJD(6) - t810) * t786 + t956;
t694 = (qJD(5) - t921) * t815 + t954;
t817 = -pkin(2) * t1013 + qJDD(1) * pkin(7) + t836;
t794 = t932 * t817 + t936 * t923;
t1016 = -t794 + (-t886 + t957) * qJ(4);
t782 = t784 ^ 2;
t783 = t786 ^ 2;
t809 = t810 ^ 2;
t811 = t813 ^ 2;
t812 = t815 ^ 2;
t870 = t872 ^ 2;
t871 = t873 ^ 2;
t1015 = t921 ^ 2;
t1014 = t936 ^ 2;
t1012 = 2 * qJD(4);
t1011 = pkin(5) * t931;
t974 = t936 * t1013;
t905 = t932 * t974;
t896 = qJDD(3) + t905;
t940 = t896 * pkin(3) + t1016;
t918 = t1014 * t1013;
t796 = t936 * t817 - t932 * t923;
t895 = qJD(3) * pkin(3) - qJ(4) * t980;
t942 = -qJ(4) * t945 - qJD(3) * t895 + t796;
t941 = -pkin(3) * t918 + t942;
t676 = t872 * t1012 + t925 * t940 + t927 * t941;
t858 = qJD(3) * pkin(4) - pkin(8) * t873;
t649 = -pkin(4) * t870 - pkin(8) * t953 - qJD(3) * t858 + t676;
t966 = t873 * t1012;
t675 = t925 * t941 - t927 * t940 + t966;
t978 = qJD(3) * t872;
t792 = -t838 + t978;
t939 = pkin(4) * t1018 + pkin(8) * t792 - t675;
t568 = t649 * t931 - t935 * t939;
t569 = t935 * t649 + t931 * t939;
t510 = -t568 * t935 + t569 * t931;
t1010 = t510 * t925;
t1009 = t510 * t927;
t753 = pkin(5) * t813 - pkin(9) * t815;
t541 = -t920 * pkin(5) - pkin(9) * t1015 + t753 * t815 + t568;
t1008 = t541 * t930;
t1007 = t541 * t934;
t594 = -t675 * t927 + t676 * t925;
t1006 = t594 * t932;
t1005 = t594 * t936;
t658 = t736 + t944;
t1004 = t658 * t930;
t1003 = t658 * t934;
t816 = -qJDD(1) * pkin(2) - t1013 * pkin(7) + t835;
t761 = t945 * pkin(3) - qJ(4) * t918 + t895 * t980 + qJDD(4) + t816;
t683 = pkin(4) * t953 - t870 * pkin(8) + t873 * t858 + t761;
t1002 = t683 * t931;
t1001 = t683 * t935;
t750 = t756 + t920;
t1000 = t750 * t931;
t999 = t750 * t935;
t998 = t761 * t925;
t997 = t761 * t927;
t994 = t810 * t930;
t993 = t810 * t934;
t992 = t816 * t932;
t991 = t816 * t936;
t829 = qJDD(3) - t834;
t990 = t829 * t925;
t989 = t829 * t927;
t887 = -0.2e1 * t958 + t969;
t988 = t887 * t936;
t985 = t896 * t932;
t897 = qJDD(3) - t905;
t984 = t897 * t932;
t983 = t897 * t936;
t982 = t921 * t931;
t981 = t921 * t935;
t542 = -pkin(5) * t1015 + pkin(9) * t920 - t753 * t813 + t569;
t581 = t1034 * pkin(9) + (t815 * t921 - t724) * pkin(5) + t683;
t508 = t934 * t542 + t930 * t581;
t922 = t932 ^ 2;
t979 = t1013 * t922;
t977 = qJD(3) * t873;
t976 = qJD(3) * t925;
t975 = qJD(3) * t927;
t968 = qJDD(3) * t928;
t967 = t922 + t1014;
t965 = t931 * t736;
t964 = t935 * t736;
t963 = t926 * t756;
t962 = t928 * t756;
t961 = t926 * t834;
t960 = t928 * t834;
t959 = -pkin(5) * t935 - pkin(4);
t507 = t542 * t930 - t934 * t581;
t511 = t568 * t931 + t935 * t569;
t595 = t675 * t925 + t927 * t676;
t732 = t794 * t932 + t936 * t796;
t847 = -t898 * t933 - t937 * t899;
t951 = t926 * t905;
t950 = t928 * t905;
t892 = qJDD(1) * t937 - t1013 * t933;
t949 = -pkin(6) * t892 - g(3) * t933;
t451 = -t507 * t934 + t508 * t930;
t452 = t507 * t930 + t508 * t934;
t731 = t794 * t936 - t796 * t932;
t846 = t898 * t937 - t899 * t933;
t790 = -t953 + t977;
t938 = qJD(3) ^ 2;
t914 = t926 * qJDD(3);
t904 = -t918 - t938;
t903 = t918 - t938;
t902 = -t938 - t979;
t901 = t938 - t979;
t894 = t918 - t979;
t893 = t918 + t979;
t891 = qJDD(1) * t933 + t1013 * t937;
t890 = t967 * qJDD(1);
t885 = 0.2e1 * t957 + t970;
t882 = t936 * t896;
t881 = t967 * t971;
t869 = -pkin(6) * t891 + g(3) * t937;
t865 = -t871 - t938;
t864 = -t871 + t938;
t863 = t870 - t938;
t857 = t886 * t936 - t922 * t971;
t856 = -t1014 * t971 + t932 * t945;
t855 = t881 * t928 + t914;
t854 = t881 * t926 - t968;
t853 = -t902 * t932 - t983;
t852 = -t901 * t932 + t882;
t851 = t904 * t936 - t985;
t850 = t903 * t936 - t984;
t849 = t902 * t936 - t984;
t848 = t904 * t932 + t882;
t845 = t890 * t928 - t893 * t926;
t844 = t890 * t926 + t893 * t928;
t839 = -t885 * t932 + t988;
t832 = -t871 + t870;
t827 = -t938 - t870;
t825 = t857 * t928 - t951;
t824 = t856 * t928 + t951;
t823 = t857 * t926 + t950;
t822 = t856 * t926 - t950;
t821 = t852 * t928 + t926 * t970;
t820 = t850 * t928 + t926 * t969;
t819 = t852 * t926 - t928 * t970;
t818 = t850 * t926 - t928 * t969;
t807 = (t872 * t927 + t873 * t925) * qJD(3);
t806 = (t872 * t925 - t873 * t927) * qJD(3);
t803 = t853 * t928 + t885 * t926;
t802 = t851 * t928 - t887 * t926;
t801 = t853 * t926 - t885 * t928;
t800 = t851 * t926 + t887 * t928;
t799 = -t812 + t1015;
t798 = t811 - t1015;
t797 = -t812 - t1015;
t795 = t839 * t928 - t894 * t926;
t793 = t839 * t926 + t894 * t928;
t791 = t838 + t978;
t788 = t953 + t977;
t787 = -t870 - t871;
t779 = t838 * t927 - t873 * t976;
t778 = t838 * t925 + t873 * t975;
t777 = -t872 * t975 + t925 * t953;
t776 = -t872 * t976 - t927 * t953;
t775 = -t865 * t925 - t989;
t774 = -t864 * t925 + t1032;
t773 = t863 * t927 - t990;
t772 = t865 * t927 - t990;
t771 = t864 * t927 + t1033;
t770 = t863 * t925 + t989;
t769 = -t844 * t933 + t845 * t937;
t768 = t844 * t937 + t845 * t933;
t767 = -pkin(7) * t849 + t991;
t766 = -pkin(7) * t848 + t992;
t760 = -pkin(2) * t849 + t796;
t759 = -pkin(2) * t848 + t794;
t758 = t827 * t927 - t1033;
t757 = t827 * t925 + t1032;
t755 = pkin(1) * t923 + qJ(2) * t955;
t754 = -t812 + t811;
t748 = -t1015 - t811;
t745 = -t783 + t809;
t744 = t782 - t809;
t743 = -t806 * t932 + t807 * t936;
t742 = (-t813 * t935 + t815 * t931) * t921;
t741 = (-t813 * t931 - t815 * t935) * t921;
t740 = -t801 * t933 + t803 * t937;
t739 = -t800 * t933 + t802 * t937;
t738 = t801 * t937 + t803 * t933;
t737 = t800 * t937 + t802 * t933;
t735 = -t783 + t782;
t734 = t743 * t928 + t914;
t733 = t743 * t926 - t968;
t729 = t790 * t927 - t792 * t925;
t728 = -t788 * t927 - t791 * t925;
t727 = t790 * t925 + t792 * t927;
t726 = -t788 * t925 + t791 * t927;
t721 = -t811 - t812;
t720 = -t778 * t932 + t779 * t936;
t719 = -t776 * t932 + t777 * t936;
t718 = -t772 * t932 + t775 * t936;
t717 = -t771 * t932 + t774 * t936;
t716 = -t770 * t932 + t773 * t936;
t715 = t772 * t936 + t775 * t932;
t714 = -t783 - t809;
t713 = t798 * t935 - t1000;
t712 = -t799 * t931 + t1030;
t711 = t798 * t931 + t999;
t710 = t799 * t935 + t1031;
t709 = -t797 * t931 - t999;
t708 = t797 * t935 - t1000;
t707 = -qJ(2) * t844 + t731 * t928;
t706 = qJ(2) * t845 + t731 * t926;
t705 = -qJ(4) * t772 + t997;
t704 = -t809 - t782;
t703 = t732 * t928 + t816 * t926;
t702 = t732 * t926 - t816 * t928;
t699 = t782 + t783;
t698 = -t805 + t943;
t693 = (qJD(5) + t921) * t815 + t954;
t692 = -qJ(4) * t757 + t998;
t691 = t720 * t928 - t961;
t690 = t719 * t928 + t961;
t689 = t720 * t926 + t960;
t688 = t719 * t926 - t960;
t687 = -t815 * t982 - t935 * t943;
t686 = t815 * t981 - t931 * t943;
t685 = -t724 * t931 + t813 * t981;
t684 = t724 * t935 + t813 * t982;
t682 = -t757 * t932 + t758 * t936;
t681 = t757 * t936 + t758 * t932;
t680 = t748 * t935 - t1031;
t679 = t748 * t931 + t1030;
t677 = -qJD(6) * t786 - t956;
t674 = (-t784 * t934 + t786 * t930) * t810;
t673 = (t784 * t930 + t786 * t934) * t810;
t672 = t718 * t928 + t791 * t926;
t671 = t717 * t928 - t792 * t926;
t670 = t716 * t928 + t790 * t926;
t669 = t718 * t926 - t791 * t928;
t668 = t717 * t926 + t792 * t928;
t667 = t716 * t926 - t790 * t928;
t665 = -pkin(3) * t791 + qJ(4) * t775 + t998;
t664 = -t741 * t925 + t742 * t927;
t663 = t741 * t927 + t742 * t925;
t662 = -qJ(2) * t801 - t760 * t926 + t767 * t928;
t661 = -qJ(2) * t800 - t759 * t926 + t766 * t928;
t660 = -pkin(3) * t788 + qJ(4) * t758 - t997;
t656 = -t727 * t932 + t729 * t936;
t655 = -t726 * t932 + t728 * t936;
t654 = t727 * t936 + t729 * t932;
t653 = t682 * t928 + t788 * t926;
t652 = t682 * t926 - t788 * t928;
t651 = -pkin(1) * t849 + qJ(2) * t803 + t760 * t928 + t767 * t926;
t650 = -pkin(1) * t848 + qJ(2) * t802 + t759 * t928 + t766 * t926;
t648 = t655 * t928 - t832 * t926;
t647 = t655 * t926 + t832 * t928;
t644 = -t746 - t678;
t641 = (-qJD(6) - t810) * t786 - t956;
t639 = t678 * t934 - t786 * t994;
t638 = -t678 * t930 - t786 * t993;
t637 = -t677 * t930 + t784 * t993;
t636 = -t677 * t934 - t784 * t994;
t633 = -t711 * t925 + t713 * t927;
t632 = -t710 * t925 + t712 * t927;
t631 = t711 * t927 + t713 * t925;
t630 = t710 * t927 + t712 * t925;
t629 = t656 * t928 + t787 * t926;
t628 = t656 * t926 - t787 * t928;
t627 = -t708 * t925 + t709 * t927;
t626 = t708 * t927 + t709 * t925;
t625 = -pkin(8) * t708 + t1001;
t624 = t674 * t935 + t931 * t944;
t623 = t674 * t931 - t935 * t944;
t622 = -t702 * t933 + t703 * t937;
t621 = t702 * t937 + t703 * t933;
t620 = t744 * t934 - t1004;
t619 = -t745 * t930 + t1028;
t618 = -t744 * t930 - t1003;
t617 = -t745 * t934 - t1029;
t616 = -t694 * t935 - t698 * t931;
t615 = t1034 * t931 - t693 * t935;
t614 = -t694 * t931 + t698 * t935;
t613 = -t1034 * t935 - t693 * t931;
t612 = -t686 * t925 + t687 * t927;
t611 = -t684 * t925 + t685 * t927;
t610 = t686 * t927 + t687 * t925;
t609 = t684 * t927 + t685 * t925;
t608 = -pkin(2) * t654 - pkin(3) * t727;
t607 = -pkin(8) * t679 + t1002;
t606 = -t714 * t930 - t1003;
t605 = t714 * t934 - t1004;
t604 = -t679 * t925 + t680 * t927;
t603 = t679 * t927 + t680 * t925;
t602 = t704 * t934 - t1029;
t601 = t704 * t930 + t1028;
t600 = -qJ(2) * t702 - (pkin(2) * t926 - pkin(7) * t928) * t731;
t599 = t639 * t935 + t965;
t598 = t637 * t935 - t965;
t597 = t639 * t931 - t964;
t596 = t637 * t931 + t964;
t593 = -pkin(2) * t715 - pkin(3) * t772 + t676;
t592 = -t669 * t933 + t672 * t937;
t591 = t669 * t937 + t672 * t933;
t590 = -t663 * t932 + t664 * t936;
t589 = t590 * t928 + t920 * t926;
t588 = t590 * t926 - t920 * t928;
t587 = -pkin(2) * t681 + t925 * t942 - t927 * t1016 + t966 + (-t927 * qJDD(3) - t947 * t974 - t757) * pkin(3);
t586 = -t652 * t933 + t653 * t937;
t585 = t652 * t937 + t653 * t933;
t584 = -pkin(3) * t761 + qJ(4) * t595;
t583 = pkin(4) * t1034 + pkin(8) * t709 + t1002;
t582 = -pkin(7) * t715 - t665 * t932 + t705 * t936;
t580 = qJ(2) * t703 - (-pkin(2) * t928 - pkin(7) * t926 - pkin(1)) * t731;
t577 = -qJ(4) * t727 - t594;
t576 = -pkin(4) * t693 + pkin(8) * t680 - t1001;
t575 = -t640 * t934 - t644 * t930;
t574 = t641 * t934 - t643 * t930;
t573 = -t640 * t930 + t644 * t934;
t572 = -t641 * t930 - t643 * t934;
t571 = -pkin(7) * t681 - t660 * t932 + t692 * t936;
t570 = -pkin(3) * t787 + qJ(4) * t729 + t595;
t566 = -t631 * t932 + t633 * t936;
t565 = -t630 * t932 + t632 * t936;
t564 = -t628 * t933 + t629 * t937;
t563 = t628 * t937 + t629 * t933;
t562 = -t626 * t932 + t627 * t936;
t561 = t626 * t936 + t627 * t932;
t560 = t620 * t935 - t640 * t931;
t559 = t619 * t935 - t644 * t931;
t558 = t620 * t931 + t640 * t935;
t557 = t619 * t931 + t644 * t935;
t556 = -t623 * t925 + t624 * t927;
t555 = t623 * t927 + t624 * t925;
t554 = t606 * t935 + t643 * t931;
t553 = t606 * t931 - t643 * t935;
t552 = t602 * t935 - t641 * t931;
t551 = t602 * t931 + t641 * t935;
t550 = -t614 * t925 + t616 * t927;
t549 = -t613 * t925 + t615 * t927;
t548 = t614 * t927 + t616 * t925;
t547 = t613 * t927 + t615 * t925;
t546 = t574 * t935 - t735 * t931;
t545 = t574 * t931 + t735 * t935;
t544 = -t610 * t932 + t612 * t936;
t543 = -t609 * t932 + t611 * t936;
t539 = t575 * t935 - t699 * t931;
t538 = t575 * t931 + t699 * t935;
t537 = -t603 * t932 + t604 * t936;
t536 = t603 * t936 + t604 * t932;
t535 = t566 * t928 - t694 * t926;
t534 = t565 * t928 - t698 * t926;
t533 = t566 * t926 + t694 * t928;
t532 = t565 * t926 + t698 * t928;
t531 = -t1034 * t926 + t562 * t928;
t530 = t1034 * t928 + t562 * t926;
t529 = t544 * t928 + t963;
t528 = t543 * t928 - t963;
t527 = t544 * t926 - t962;
t526 = t543 * t926 + t962;
t525 = -t597 * t925 + t599 * t927;
t524 = -t596 * t925 + t598 * t927;
t523 = t597 * t927 + t599 * t925;
t522 = t596 * t927 + t598 * t925;
t521 = t595 * t936 - t1006;
t520 = t595 * t932 + t1005;
t519 = t521 * t928 + t761 * t926;
t518 = t521 * t926 - t761 * t928;
t517 = t537 * t928 + t693 * t926;
t516 = t537 * t926 - t693 * t928;
t515 = -pkin(9) * t605 + t1007;
t514 = -pkin(9) * t601 + t1008;
t513 = -qJ(2) * t669 + t582 * t928 - t593 * t926;
t512 = -qJ(4) * t626 - t583 * t925 + t625 * t927;
t509 = -pkin(2) * t520 - pkin(3) * t594;
t506 = -t558 * t925 + t560 * t927;
t505 = -t557 * t925 + t559 * t927;
t504 = t558 * t927 + t560 * t925;
t503 = t557 * t927 + t559 * t925;
t502 = -pkin(1) * t715 + qJ(2) * t672 + t582 * t926 + t593 * t928;
t501 = -qJ(2) * t652 + t571 * t928 - t587 * t926;
t500 = -qJ(4) * t603 - t576 * t925 + t607 * t927;
t499 = pkin(3) * t1034 + qJ(4) * t627 + t583 * t927 + t625 * t925;
t498 = -pkin(4) * t683 + pkin(8) * t511;
t497 = -t555 * t932 + t556 * t936;
t496 = -pkin(7) * t654 - t570 * t932 + t577 * t936;
t495 = -t553 * t925 + t554 * t927;
t494 = t553 * t927 + t554 * t925;
t493 = -t551 * t925 + t552 * t927;
t492 = t551 * t927 + t552 * t925;
t491 = -t548 * t932 + t550 * t936;
t490 = -t547 * t932 + t549 * t936;
t489 = t548 * t936 + t550 * t932;
t488 = -t545 * t925 + t546 * t927;
t487 = t545 * t927 + t546 * t925;
t486 = -pkin(3) * t693 + qJ(4) * t604 + t576 * t927 + t607 * t925;
t485 = -pkin(1) * t681 + qJ(2) * t653 + t571 * t926 + t587 * t928;
t484 = t490 * t928 - t754 * t926;
t483 = t490 * t926 + t754 * t928;
t482 = -t538 * t925 + t539 * t927;
t481 = t538 * t927 + t539 * t925;
t480 = -pkin(8) * t614 - t510;
t479 = t491 * t928 + t721 * t926;
t478 = t491 * t926 - t721 * t928;
t477 = t497 * t928 - t673 * t926;
t476 = t497 * t926 + t673 * t928;
t475 = -t530 * t933 + t531 * t937;
t474 = t530 * t937 + t531 * t933;
t473 = -pkin(5) * t605 + t508;
t472 = -pkin(5) * t601 + t507;
t471 = -pkin(4) * t721 + pkin(8) * t616 + t511;
t470 = -t523 * t932 + t525 * t936;
t469 = -t522 * t932 + t524 * t936;
t468 = -pkin(2) * t561 - pkin(3) * t626 - pkin(4) * t708 + t569;
t467 = -pkin(7) * t520 - qJ(4) * t1005 - t584 * t932;
t466 = -t518 * t933 + t519 * t937;
t465 = t518 * t937 + t519 * t933;
t464 = -t516 * t933 + t517 * t937;
t463 = t516 * t937 + t517 * t933;
t462 = -pkin(2) * t536 - pkin(3) * t603 - pkin(4) * t679 + t568;
t461 = t470 * t928 - t638 * t926;
t460 = t469 * t928 - t636 * t926;
t459 = t470 * t926 + t638 * t928;
t458 = t469 * t926 + t636 * t928;
t457 = -qJ(2) * t628 + t496 * t928 - t608 * t926;
t456 = -pkin(1) * t654 + qJ(2) * t629 + t496 * t926 + t608 * t928;
t455 = t511 * t927 - t1010;
t454 = t511 * t925 + t1009;
t453 = -pkin(2) * t489 - pkin(3) * t548 - pkin(4) * t614;
t450 = -t504 * t932 + t506 * t936;
t449 = -t503 * t932 + t505 * t936;
t448 = -t494 * t932 + t495 * t936;
t447 = t494 * t936 + t495 * t932;
t446 = -t492 * t932 + t493 * t936;
t445 = t492 * t936 + t493 * t932;
t444 = -t487 * t932 + t488 * t936;
t443 = t450 * t928 - t618 * t926;
t442 = t449 * t928 - t617 * t926;
t441 = t450 * t926 + t618 * t928;
t440 = t449 * t926 + t617 * t928;
t439 = -t481 * t932 + t482 * t936;
t438 = t481 * t936 + t482 * t932;
t437 = -t478 * t933 + t479 * t937;
t436 = t478 * t937 + t479 * t933;
t435 = -pkin(9) * t573 - t451;
t434 = -pkin(7) * t561 - t499 * t932 + t512 * t936;
t433 = t448 * t928 + t605 * t926;
t432 = t448 * t926 - t605 * t928;
t431 = t446 * t928 + t601 * t926;
t430 = t446 * t926 - t601 * t928;
t429 = t452 * t935 + t541 * t931;
t428 = t452 * t931 - t541 * t935;
t427 = t444 * t928 - t572 * t926;
t426 = t444 * t926 + t572 * t928;
t425 = -pkin(8) * t553 - t473 * t931 + t515 * t935;
t424 = -pkin(8) * t551 - t472 * t931 + t514 * t935;
t423 = -pkin(7) * t536 - t486 * t932 + t500 * t936;
t422 = t439 * t928 + t573 * t926;
t421 = t439 * t926 - t573 * t928;
t420 = -pkin(4) * t605 + pkin(8) * t554 + t473 * t935 + t515 * t931;
t419 = -pkin(4) * t601 + pkin(8) * t552 + t472 * t935 + t514 * t931;
t418 = -qJ(4) * t548 - t471 * t925 + t480 * t927;
t417 = -qJ(2) * t518 + t467 * t928 - t509 * t926;
t416 = -pkin(3) * t721 + qJ(4) * t550 + t471 * t927 + t480 * t925;
t415 = -pkin(8) * t538 + t1011 * t573 + t435 * t935;
t414 = -t454 * t932 + t455 * t936;
t413 = t454 * t936 + t455 * t932;
t412 = -pkin(1) * t520 + qJ(2) * t519 + t467 * t926 + t509 * t928;
t411 = -pkin(8) * t1009 - qJ(4) * t454 - t498 * t925;
t410 = t414 * t928 + t683 * t926;
t409 = t414 * t926 - t683 * t928;
t408 = pkin(8) * t539 + t931 * t435 + t573 * t959;
t407 = -pkin(3) * t683 - pkin(8) * t1010 + qJ(4) * t455 + t498 * t927;
t406 = -qJ(2) * t530 + t434 * t928 - t468 * t926;
t405 = -pkin(2) * t447 - pkin(3) * t494 - pkin(4) * t553 + pkin(5) * t643 - pkin(9) * t606 - t1008;
t404 = -pkin(1) * t561 + qJ(2) * t531 + t434 * t926 + t468 * t928;
t403 = -t432 * t933 + t433 * t937;
t402 = t432 * t937 + t433 * t933;
t401 = -pkin(2) * t445 - pkin(3) * t492 - pkin(4) * t551 - pkin(5) * t641 - pkin(9) * t602 + t1007;
t400 = -t430 * t933 + t431 * t937;
t399 = t430 * t937 + t431 * t933;
t398 = -qJ(2) * t516 + t423 * t928 - t462 * t926;
t397 = -t428 * t925 + t429 * t927;
t396 = t428 * t927 + t429 * t925;
t395 = -pkin(1) * t536 + qJ(2) * t517 + t423 * t926 + t462 * t928;
t394 = -t421 * t933 + t422 * t937;
t393 = t421 * t937 + t422 * t933;
t392 = -pkin(8) * t428 + (-pkin(9) * t935 + t1011) * t451;
t391 = -pkin(2) * t413 - pkin(3) * t454 - pkin(4) * t510;
t390 = -pkin(2) * t438 - pkin(3) * t481 - pkin(4) * t538 - pkin(5) * t699 - pkin(9) * t575 - t452;
t389 = -qJ(4) * t494 - t420 * t925 + t425 * t927;
t388 = -qJ(4) * t492 - t419 * t925 + t424 * t927;
t387 = -pkin(3) * t605 + qJ(4) * t495 + t420 * t927 + t425 * t925;
t386 = -pkin(3) * t601 + qJ(4) * t493 + t419 * t927 + t424 * t925;
t385 = -pkin(7) * t489 - t416 * t932 + t418 * t936;
t384 = -t409 * t933 + t410 * t937;
t383 = t409 * t937 + t410 * t933;
t382 = pkin(8) * t429 + (-pkin(9) * t931 + t959) * t451;
t381 = -qJ(4) * t481 - t408 * t925 + t415 * t927;
t380 = -pkin(3) * t573 + qJ(4) * t482 + t408 * t927 + t415 * t925;
t379 = -t396 * t932 + t397 * t936;
t378 = t396 * t936 + t397 * t932;
t377 = -qJ(2) * t478 + t385 * t928 - t453 * t926;
t376 = -pkin(1) * t489 + qJ(2) * t479 + t385 * t926 + t453 * t928;
t375 = -pkin(7) * t413 - t407 * t932 + t411 * t936;
t374 = t379 * t928 + t451 * t926;
t373 = t379 * t926 - t451 * t928;
t372 = -pkin(7) * t447 - t387 * t932 + t389 * t936;
t371 = -pkin(7) * t445 - t386 * t932 + t388 * t936;
t370 = -qJ(4) * t396 - t382 * t925 + t392 * t927;
t369 = -pkin(7) * t438 - t380 * t932 + t381 * t936;
t368 = -pkin(2) * t378 - pkin(3) * t396 - pkin(4) * t428 + pkin(5) * t541 - pkin(9) * t452;
t367 = -qJ(2) * t409 + t375 * t928 - t391 * t926;
t366 = -pkin(3) * t451 + qJ(4) * t397 + t382 * t927 + t392 * t925;
t365 = -qJ(2) * t432 + t372 * t928 - t405 * t926;
t364 = -qJ(2) * t430 + t371 * t928 - t401 * t926;
t363 = -t373 * t933 + t374 * t937;
t362 = t373 * t937 + t374 * t933;
t361 = -pkin(1) * t447 + qJ(2) * t433 + t372 * t926 + t405 * t928;
t360 = -pkin(1) * t413 + qJ(2) * t410 + t375 * t926 + t391 * t928;
t359 = -pkin(1) * t445 + qJ(2) * t431 + t371 * t926 + t401 * t928;
t358 = -qJ(2) * t421 + t369 * t928 - t390 * t926;
t357 = -pkin(1) * t438 + qJ(2) * t422 + t369 * t926 + t390 * t928;
t356 = -pkin(7) * t378 - t366 * t932 + t370 * t936;
t355 = -qJ(2) * t373 + t356 * t928 - t368 * t926;
t354 = -pkin(1) * t378 + qJ(2) * t374 + t356 * t926 + t368 * t928;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t891, -t892, 0, t847, 0, 0, 0, 0, 0, 0, -t1019, -t840, 0, t701, 0, 0, 0, 0, 0, 0, t739, t740, t769, t622, 0, 0, 0, 0, 0, 0, t586, t592, t564, t466, 0, 0, 0, 0, 0, 0, t464, t475, t437, t384, 0, 0, 0, 0, 0, 0, t400, t403, t394, t363; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t892, -t891, 0, t846, 0, 0, 0, 0, 0, 0, t840, -t1019, 0, t700, 0, 0, 0, 0, 0, 0, t737, t738, t768, t621, 0, 0, 0, 0, 0, 0, t585, t591, t563, t465, 0, 0, 0, 0, 0, 0, t463, t474, t436, t383, 0, 0, 0, 0, 0, 0, t399, t402, t393, t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t923, 0, 0, 0, 0, 0, 0, t848, t849, 0, -t731, 0, 0, 0, 0, 0, 0, t681, t715, t654, t520, 0, 0, 0, 0, 0, 0, t536, t561, t489, t413, 0, 0, 0, 0, 0, 0, t445, t447, t438, t378; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t892, 0, -t891, 0, t949, -t869, -t846, -pkin(6) * t846, 0, 0, t840, 0, -t1019, 0, t1035, t1027, -t700, -pkin(6) * t700 + qJ(2) * t995 - t755 * t933, -t823 * t933 + t825 * t937, -t793 * t933 + t795 * t937, -t819 * t933 + t821 * t937, -t822 * t933 + t824 * t937, -t818 * t933 + t820 * t937, -t854 * t933 + t855 * t937, -pkin(6) * t737 - t650 * t933 + t661 * t937, -pkin(6) * t738 - t651 * t933 + t662 * t937, -pkin(6) * t768 - t706 * t933 + t707 * t937, -pkin(6) * t621 - t580 * t933 + t600 * t937, -t689 * t933 + t691 * t937, -t647 * t933 + t648 * t937, -t668 * t933 + t671 * t937, -t688 * t933 + t690 * t937, -t667 * t933 + t670 * t937, -t733 * t933 + t734 * t937, -pkin(6) * t585 - t485 * t933 + t501 * t937, -pkin(6) * t591 - t502 * t933 + t513 * t937, -pkin(6) * t563 - t456 * t933 + t457 * t937, -pkin(6) * t465 - t412 * t933 + t417 * t937, -t527 * t933 + t529 * t937, -t483 * t933 + t484 * t937, -t532 * t933 + t534 * t937, -t526 * t933 + t528 * t937, -t533 * t933 + t535 * t937, -t588 * t933 + t589 * t937, -pkin(6) * t463 - t395 * t933 + t398 * t937, -pkin(6) * t474 - t404 * t933 + t406 * t937, -pkin(6) * t436 - t376 * t933 + t377 * t937, -pkin(6) * t383 - t360 * t933 + t367 * t937, -t459 * t933 + t461 * t937, -t426 * t933 + t427 * t937, -t440 * t933 + t442 * t937, -t458 * t933 + t460 * t937, -t441 * t933 + t443 * t937, -t476 * t933 + t477 * t937, -pkin(6) * t399 - t359 * t933 + t364 * t937, -pkin(6) * t402 - t361 * t933 + t365 * t937, -pkin(6) * t393 - t357 * t933 + t358 * t937, -pkin(6) * t362 - t354 * t933 + t355 * t937; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t891, 0, t892, 0, t869, t949, t847, pkin(6) * t847, 0, 0, t1019, 0, t840, 0, -t1027, t1035, t701, pkin(6) * t701 + qJ(2) * t996 + t755 * t937, t823 * t937 + t825 * t933, t793 * t937 + t795 * t933, t819 * t937 + t821 * t933, t822 * t937 + t824 * t933, t818 * t937 + t820 * t933, t854 * t937 + t855 * t933, pkin(6) * t739 + t650 * t937 + t661 * t933, pkin(6) * t740 + t651 * t937 + t662 * t933, pkin(6) * t769 + t706 * t937 + t707 * t933, pkin(6) * t622 + t580 * t937 + t600 * t933, t689 * t937 + t691 * t933, t647 * t937 + t648 * t933, t668 * t937 + t671 * t933, t688 * t937 + t690 * t933, t667 * t937 + t670 * t933, t733 * t937 + t734 * t933, pkin(6) * t586 + t485 * t937 + t501 * t933, pkin(6) * t592 + t502 * t937 + t513 * t933, pkin(6) * t564 + t456 * t937 + t457 * t933, pkin(6) * t466 + t412 * t937 + t417 * t933, t527 * t937 + t529 * t933, t483 * t937 + t484 * t933, t532 * t937 + t534 * t933, t526 * t937 + t528 * t933, t533 * t937 + t535 * t933, t588 * t937 + t589 * t933, pkin(6) * t464 + t395 * t937 + t398 * t933, pkin(6) * t475 + t404 * t937 + t406 * t933, pkin(6) * t437 + t376 * t937 + t377 * t933, pkin(6) * t384 + t360 * t937 + t367 * t933, t459 * t937 + t461 * t933, t426 * t937 + t427 * t933, t440 * t937 + t442 * t933, t458 * t937 + t460 * t933, t441 * t937 + t443 * t933, t476 * t937 + t477 * t933, pkin(6) * t400 + t359 * t937 + t364 * t933, pkin(6) * t403 + t361 * t937 + t365 * t933, pkin(6) * t394 + t357 * t937 + t358 * t933, pkin(6) * t363 + t354 * t937 + t355 * t933; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t898, t899, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t889 - t835, -pkin(1) * t888 - t836, 0, -pkin(1) * t764, (t886 + t957) * t932, t885 * t936 + t887 * t932, t901 * t936 + t985, t988, t903 * t932 + t983, 0, pkin(1) * t800 + pkin(2) * t887 + pkin(7) * t851 - t991, pkin(1) * t801 - pkin(2) * t885 + pkin(7) * t853 + t992, pkin(1) * t844 + pkin(2) * t893 + pkin(7) * t890 + t732, pkin(1) * t702 - pkin(2) * t816 + pkin(7) * t732, t778 * t936 + t779 * t932, t726 * t936 + t728 * t932, t771 * t936 + t774 * t932, t776 * t936 + t777 * t932, t770 * t936 + t773 * t932, t806 * t936 + t807 * t932, pkin(1) * t652 - pkin(2) * t788 + pkin(7) * t682 + t660 * t936 + t692 * t932, pkin(1) * t669 - pkin(2) * t791 + pkin(7) * t718 + t665 * t936 + t705 * t932, pkin(1) * t628 - pkin(2) * t787 + pkin(7) * t656 + t570 * t936 + t577 * t932, pkin(1) * t518 - pkin(2) * t761 + pkin(7) * t521 - qJ(4) * t1006 + t584 * t936, t610 * t936 + t612 * t932, t547 * t936 + t549 * t932, t630 * t936 + t632 * t932, t609 * t936 + t611 * t932, t631 * t936 + t633 * t932, t663 * t936 + t664 * t932, pkin(1) * t516 - pkin(2) * t693 + pkin(7) * t537 + t486 * t936 + t500 * t932, pkin(1) * t530 + pkin(2) * t1034 + pkin(7) * t562 + t499 * t936 + t512 * t932, pkin(1) * t478 - pkin(2) * t721 + pkin(7) * t491 + t416 * t936 + t418 * t932, pkin(1) * t409 - pkin(2) * t683 + pkin(7) * t414 + t407 * t936 + t411 * t932, t523 * t936 + t525 * t932, t487 * t936 + t488 * t932, t503 * t936 + t505 * t932, t522 * t936 + t524 * t932, t504 * t936 + t506 * t932, t555 * t936 + t556 * t932, pkin(1) * t430 - pkin(2) * t601 + pkin(7) * t446 + t386 * t936 + t388 * t932, pkin(1) * t432 - pkin(2) * t605 + pkin(7) * t448 + t387 * t936 + t389 * t932, pkin(1) * t421 - pkin(2) * t573 + pkin(7) * t439 + t380 * t936 + t381 * t932, pkin(1) * t373 - pkin(2) * t451 + pkin(7) * t379 + t366 * t936 + t370 * t932;];
tauB_reg  = t1;
