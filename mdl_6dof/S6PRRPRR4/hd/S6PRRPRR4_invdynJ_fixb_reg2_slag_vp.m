% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:14:35
% EndTime: 2019-03-08 22:14:50
% DurationCPUTime: 8.86s
% Computational Cost: add. (7858->630), mult. (17410->813), div. (0->0), fcn. (13221->12), ass. (0->312)
t235 = cos(pkin(6));
t239 = sin(qJ(3));
t243 = cos(qJ(3));
t233 = sin(pkin(6));
t240 = sin(qJ(2));
t392 = t233 * t240;
t140 = -t235 * t243 + t239 * t392;
t391 = t233 * t243;
t351 = t240 * t391;
t141 = t235 * t239 + t351;
t238 = sin(qJ(5));
t242 = cos(qJ(5));
t293 = t140 * t242 - t141 * t238;
t244 = cos(qJ(2));
t406 = sin(pkin(11));
t330 = t406 * t244;
t234 = cos(pkin(11));
t389 = t234 * t240;
t136 = t235 * t389 + t330;
t88 = t136 * t239 + t234 * t391;
t89 = -t234 * t233 * t239 + t136 * t243;
t38 = t238 * t89 - t242 * t88;
t331 = t406 * t240;
t388 = t234 * t244;
t138 = -t235 * t331 + t388;
t332 = t233 * t406;
t90 = t138 * t239 - t243 * t332;
t91 = t138 * t243 + t239 * t332;
t42 = t238 * t91 - t242 * t90;
t281 = -g(1) * t42 - g(2) * t38 + g(3) * t293;
t245 = -pkin(3) - pkin(4);
t378 = qJD(1) * t233;
t345 = t240 * t378;
t163 = qJD(2) * pkin(8) + t345;
t360 = qJDD(1) * t235;
t371 = qJD(3) * t243;
t363 = qJD(1) * qJD(2);
t339 = t244 * t363;
t359 = qJDD(1) * t240;
t377 = qJD(1) * t235;
t438 = qJDD(2) * pkin(8) + (t339 + t359) * t233 + qJD(3) * t377;
t54 = -t163 * t371 - t239 * t438 + t243 * t360;
t290 = -qJDD(4) + t54;
t220 = t239 * qJDD(2);
t362 = qJD(2) * qJD(3);
t336 = t243 * t362;
t437 = -t336 - t220;
t31 = pkin(9) * t437 + t245 * qJDD(3) - t290;
t337 = t239 * t362;
t356 = t243 * qJDD(2);
t227 = qJDD(3) * qJ(4);
t228 = qJD(3) * qJD(4);
t349 = t239 * t360 + t243 * t438;
t373 = qJD(3) * t239;
t53 = -t163 * t373 + t349;
t46 = t227 + t228 + t53;
t32 = (t337 - t356) * pkin(9) + t46;
t369 = qJD(5) * t242;
t370 = qJD(5) * t238;
t346 = t245 * qJD(3);
t148 = t239 * t163;
t109 = t243 * t377 - t148;
t376 = qJD(2) * t239;
t94 = pkin(9) * t376 + t109;
t445 = qJD(4) - t94;
t76 = t346 + t445;
t229 = qJD(3) * qJ(4);
t342 = t239 * t377;
t263 = t342 + (-pkin(9) * qJD(2) + t163) * t243;
t80 = t229 + t263;
t329 = t238 * t32 - t242 * t31 + t80 * t369 + t76 * t370;
t354 = qJDD(3) - qJDD(5);
t4 = pkin(5) * t354 + t329;
t272 = -t281 - t4;
t384 = t242 * t243;
t387 = t238 * t239;
t153 = t384 + t387;
t143 = t153 * qJD(2);
t40 = t238 * t88 + t242 * t89;
t44 = t238 * t90 + t242 * t91;
t74 = t140 * t238 + t141 * t242;
t282 = g(1) * t44 + g(2) * t40 + g(3) * t74;
t284 = -t238 * t31 - t242 * t32 - t76 * t369 + t370 * t80;
t191 = t244 * t378;
t236 = qJD(2) * pkin(2);
t164 = -t191 - t236;
t374 = qJD(2) * t243;
t111 = -pkin(3) * t374 - qJ(4) * t376 + t164;
t95 = pkin(4) * t374 - t111;
t447 = t95 * t143 + t282 + t284;
t146 = -t238 * t374 + t242 * t376;
t446 = -t95 * t146 - t281 - t329;
t237 = sin(qJ(6));
t241 = cos(qJ(6));
t355 = qJD(3) - qJD(5);
t313 = t241 * t355;
t100 = t146 * t237 + t313;
t435 = qJD(6) + t143;
t428 = t435 * t100;
t102 = t241 * t146 - t237 * t355;
t427 = t435 * t102;
t309 = t239 * t346;
t221 = t239 * qJD(4);
t380 = qJ(4) * t371 + t221;
t300 = t309 + t380 + t345;
t36 = t238 * t76 + t242 * t80;
t30 = -pkin(10) * t355 + t36;
t50 = pkin(5) * t143 - pkin(10) * t146 + t95;
t14 = t237 * t50 + t241 * t30;
t340 = t240 * t363;
t180 = t233 * t340;
t390 = t233 * t244;
t189 = qJDD(1) * t390;
t232 = qJDD(2) * pkin(2);
t115 = t180 - t189 - t232;
t273 = pkin(3) * t356 - qJ(4) * t437 + qJD(2) * t221 - t115;
t267 = pkin(4) * t356 + t273;
t361 = qJD(2) * qJD(5);
t335 = t243 * t361;
t274 = -t238 * t356 - t361 * t387 + (t220 - t335) * t242;
t271 = t238 * t371 + t239 * t369;
t61 = qJD(2) * t271 + qJDD(2) * t153 - t238 * t335 - t242 * t337;
t12 = -t274 * pkin(10) + t61 * pkin(5) + (-pkin(10) * t384 + (-pkin(10) * t238 + t245) * t239) * t362 + t267;
t3 = -pkin(10) * t354 - t284;
t2 = -qJD(6) * t14 + t241 * t12 - t237 * t3;
t444 = -t14 * t435 - t2;
t296 = t237 * t30 - t241 * t50;
t1 = -t296 * qJD(6) + t237 * t12 + t241 * t3;
t443 = t296 * t435 + t1;
t276 = t153 * qJD(3);
t253 = qJD(2) * t276 + t274;
t366 = qJD(6) * t237;
t21 = qJD(6) * t313 + t146 * t366 + t237 * t354 - t241 * t253;
t368 = qJD(6) * t102;
t22 = t237 * t253 + t241 * t354 + t368;
t442 = t237 * (t22 + t427) + t241 * (t21 + t428);
t108 = t153 * t390;
t422 = pkin(8) - pkin(9);
t159 = t422 * t373;
t178 = t422 * t239;
t179 = t422 * t243;
t292 = t242 * t178 - t179 * t238;
t310 = qJD(3) * t179;
t418 = -qJD(1) * t108 + qJD(5) * t292 - t242 * t159 + t238 * t310;
t86 = qJD(5) * t153 - t238 * t373 - t242 * t371;
t372 = qJD(3) * t242;
t87 = -t239 * t372 - t243 * t370 + t271;
t439 = t87 * pkin(5) + t86 * pkin(10) + t300;
t436 = qJD(4) - t109;
t57 = qJDD(6) + t61;
t410 = t241 * t57;
t429 = t435 ^ 2;
t434 = -t100 * t146 + t237 * t429 - t410;
t413 = t22 * t241;
t433 = t237 * t428 - t413;
t412 = t237 * t57;
t432 = -t102 * t146 + t241 * t429 + t412;
t414 = t21 * t237;
t431 = t241 * t427 - t414;
t104 = t178 * t238 + t179 * t242;
t308 = t239 * t191;
t350 = t243 * t390;
t312 = t238 * t350;
t417 = -qJD(1) * t312 + qJD(5) * t104 - t238 * t159 + (t308 - t310) * t242;
t35 = -t238 * t80 + t242 * t76;
t29 = pkin(5) * t355 - t35;
t430 = t29 * t435;
t165 = -qJ(4) * t238 + t242 * t245;
t126 = t242 * qJD(4) + qJD(5) * t165;
t48 = t238 * t263 + t242 * t94;
t408 = t126 - t48;
t166 = t242 * qJ(4) + t238 * t245;
t407 = qJD(5) * t166 + t445 * t238 + t242 * t263;
t291 = -t146 * t355 - t61;
t110 = t163 * t243 + t342;
t99 = t110 + t229;
t96 = -qJD(3) * pkin(3) + t436;
t154 = -t238 * t243 + t239 * t242;
t426 = -g(1) * t91 - g(2) * t89 - g(3) * t141 - (t109 + t148) * qJD(3) + t349;
t425 = t355 ^ 2;
t203 = g(3) * t392;
t230 = t239 ^ 2;
t231 = t243 ^ 2;
t357 = qJDD(2) * t231;
t358 = qJDD(2) * t230;
t424 = -t203 + (-t230 - t231) * t233 * t339 + (t357 + t358) * pkin(8);
t222 = t239 * qJ(4);
t168 = -t243 * pkin(3) - pkin(2) - t222;
t149 = t243 * pkin(4) - t168;
t66 = pkin(5) * t153 - pkin(10) * t154 + t149;
t33 = -t104 * t237 + t241 * t66;
t421 = qJD(6) * t33 + t439 * t237 + t241 * t418;
t34 = t104 * t241 + t237 * t66;
t420 = -qJD(6) * t34 - t237 * t418 + t439 * t241;
t246 = qJD(3) ^ 2;
t419 = pkin(8) * t246;
t416 = t296 * t146;
t415 = t14 * t146;
t411 = t237 * t86;
t409 = t241 * t86;
t405 = pkin(8) * qJDD(3);
t404 = qJDD(3) * pkin(3);
t403 = t100 * t237;
t402 = t100 * t241;
t401 = t102 * t100;
t400 = t102 * t237;
t399 = t102 * t241;
t398 = t435 * t146;
t135 = t235 * t388 - t331;
t397 = t135 * t243;
t137 = -t235 * t330 - t389;
t396 = t137 * t243;
t395 = t146 * t143;
t394 = t154 * t237;
t393 = t154 * t241;
t383 = qJD(3) * t308 + t243 * t180;
t381 = pkin(2) * t390 + pkin(8) * t392;
t379 = -t230 + t231;
t375 = qJD(2) * t240;
t367 = qJD(6) * t435;
t365 = qJD(6) * t241;
t353 = g(3) * t390;
t352 = t239 * t390;
t129 = t135 * pkin(2);
t348 = pkin(3) * t397 + t135 * t222 + t129;
t130 = t137 * pkin(2);
t347 = pkin(3) * t396 + t137 * t222 + t130;
t344 = t233 * t375;
t343 = qJD(2) * t390;
t341 = t143 ^ 2 - t146 ^ 2;
t334 = -t88 * pkin(3) + qJ(4) * t89;
t333 = -t90 * pkin(3) + qJ(4) * t91;
t328 = t164 - t236;
t326 = -t140 * pkin(3) + qJ(4) * t141;
t322 = t35 * t355;
t321 = t36 * t355;
t316 = qJD(2) * t168 + t111;
t315 = t143 * t355;
t311 = pkin(3) * t350 + qJ(4) * t352 + t381;
t307 = t239 * t343;
t306 = -t88 * pkin(4) + t334;
t305 = -t90 * pkin(4) + t333;
t304 = t239 * t336;
t77 = t146 * pkin(5) + t143 * pkin(10);
t303 = g(1) * t137 + g(2) * t135;
t302 = -g(1) * t138 - g(2) * t136;
t301 = -t140 * pkin(4) + t326;
t298 = t14 * t237 - t241 * t296;
t297 = -t14 * t241 - t237 * t296;
t247 = qJD(2) ^ 2;
t289 = qJDD(2) * t244 - t240 * t247;
t288 = t203 - t302;
t211 = qJ(4) * t374;
t128 = t245 * t376 + t211;
t58 = -t237 * t74 + t241 * t390;
t59 = t237 * t390 + t241 * t74;
t286 = t154 * t365 - t411;
t285 = -t154 * t366 - t409;
t283 = -pkin(10) * t57 + t430;
t107 = -t242 * t352 + t312;
t62 = t154 * t135;
t64 = t154 * t137;
t278 = g(1) * t64 + g(2) * t62 - g(3) * t107;
t277 = -g(1) * t90 - g(2) * t88 - g(3) * t140;
t270 = pkin(4) * t397 + t136 * t422 + t348;
t269 = pkin(4) * t396 + t138 * t422 + t347;
t268 = -t303 - t353;
t266 = pkin(4) * t350 - pkin(9) * t392 + t311;
t158 = -pkin(10) + t166;
t264 = -t126 * t435 - t158 * t57 - t430;
t261 = t115 - t232 + t303 + t419;
t260 = pkin(10) * t367 - t272;
t259 = -t277 + t54;
t258 = t158 * t367 + t272;
t257 = -qJD(6) * t298 + t1 * t241 - t2 * t237;
t256 = qJD(3) * t110 + t259;
t56 = pkin(3) * t337 - t273;
t255 = -qJDD(2) * t168 + t268 - t419 - t56;
t254 = qJD(3) * t143 + t274;
t93 = qJD(3) * t141 + t307;
t252 = -t247 * t351 - t140 * qJDD(3) + qJDD(2) * t350 + (-t93 - t307) * qJD(3);
t49 = -t290 - t404;
t251 = t49 * t239 + t46 * t243 + (-t239 * t99 + t243 * t96) * qJD(3) + t302;
t250 = -t54 * t239 + t53 * t243 + (-t109 * t243 - t110 * t239) * qJD(3) + t302;
t92 = -qJD(3) * t140 + t243 * t343;
t249 = t140 * t220 + t141 * t356 + t92 * t374 + (t239 * t93 + (t140 * t243 - t141 * t239) * qJD(3)) * qJD(2);
t197 = t239 * t247 * t243;
t171 = t379 * t247;
t170 = qJDD(3) * t243 - t239 * t246;
t169 = qJDD(3) * t239 + t243 * t246;
t157 = pkin(5) - t165;
t156 = pkin(3) * t376 - t211;
t151 = -0.2e1 * t304 + t357;
t150 = 0.2e1 * t304 + t358;
t145 = t237 * t376 + t241 * t372;
t142 = -t237 * t372 + t241 * t376;
t133 = pkin(3) * t373 - t380;
t120 = t239 * t356 + t362 * t379;
t65 = t153 * t137;
t63 = t153 * t135;
t60 = t128 - t77;
t45 = qJD(2) * t309 + t267;
t24 = t92 * qJD(3) + t141 * qJDD(3) + (t239 * t289 + t244 * t336) * t233;
t20 = qJD(5) * t293 + t93 * t238 + t92 * t242;
t19 = qJD(5) * t74 + t92 * t238 - t93 * t242;
t18 = t237 * t77 + t241 * t35;
t17 = -t237 * t35 + t241 * t77;
t16 = t237 * t60 + t241 * t48;
t15 = -t237 * t48 + t241 * t60;
t10 = qJD(6) * t58 + t20 * t241 - t237 * t344;
t9 = -qJD(6) * t59 - t20 * t237 - t241 * t344;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1) - g(3), 0, 0, 0, 0, 0, 0, t289 * t233 (-qJDD(2) * t240 - t244 * t247) * t233, 0, -g(3) + (t235 ^ 2 + (t240 ^ 2 + t244 ^ 2) * t233 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t252, -t24, t249, -t109 * t93 + t110 * t92 - t54 * t140 + t53 * t141 - g(3) + (-t115 * t244 + t164 * t375) * t233, 0, 0, 0, 0, 0, 0, t252, t249, t24, t49 * t140 + t46 * t141 + t99 * t92 + t96 * t93 - g(3) + (t111 * t375 - t244 * t56) * t233, 0, 0, 0, 0, 0, 0, t19 * t355 - t293 * t354 + (-t143 * t375 + t244 * t61) * t233, t20 * t355 + t74 * t354 + (t244 * t274 + (-t240 * t146 + t244 * t276) * qJD(2)) * t233, -t20 * t143 + t19 * t146 - t254 * t293 - t74 * t61, -t19 * t35 + t20 * t36 - t284 * t74 - t329 * t293 - g(3) + (t244 * t45 - t375 * t95) * t233, 0, 0, 0, 0, 0, 0, t100 * t19 - t22 * t293 + t435 * t9 + t57 * t58, -t10 * t435 + t102 * t19 + t21 * t293 - t57 * t59, -t10 * t100 - t102 * t9 + t21 * t58 - t22 * t59, t1 * t59 + t10 * t14 + t19 * t29 + t2 * t58 - t293 * t4 - t296 * t9 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t189 + t268, -t233 * t359 + t288, 0, 0, t150, 0.2e1 * t120, t169, t151, t170, 0 (qJD(3) * t328 - t405) * t239 + (-t261 - t353) * t243 + t383 (-t405 + (t328 + t191) * qJD(3)) * t243 + ((g(3) * t244 - t340) * t233 + t261) * t239, t250 + t424, -t115 * pkin(2) - g(1) * t130 - g(2) * t129 - g(3) * t381 + (-t164 * t240 + (t109 * t239 - t110 * t243) * t244) * t378 + t250 * pkin(8), t150, t169, -0.2e1 * t120, 0, -t170, t151 (qJD(3) * t316 - t405) * t239 + (-qJD(2) * t133 + t255) * t243 + t383, t251 + t424 (t405 + (-t316 - t191) * qJD(3)) * t243 + ((-t133 + t345) * qJD(2) + t255) * t239, t56 * t168 + t111 * t133 - g(1) * t347 - g(2) * t348 - g(3) * t311 + (-t111 * t240 + (-t239 * t96 - t243 * t99) * t244) * t378 + t251 * pkin(8), -t146 * t86 + t154 * t253, t86 * t143 - t146 * t87 - t153 * t253 - t154 * t61, -t154 * t354 + t355 * t86, t143 * t87 + t153 * t61, t153 * t354 + t355 * t87, 0, -g(1) * t65 - g(2) * t63 - g(3) * t108 + t143 * t300 + t149 * t61 + t45 * t153 - t292 * t354 + t355 * t417 + t95 * t87, t104 * t354 + t146 * t300 + t149 * t253 + t45 * t154 + t355 * t418 - t95 * t86 - t278, -t104 * t61 - t143 * t418 + t146 * t417 + t153 * t284 + t154 * t329 - t254 * t292 + t35 * t86 - t36 * t87 + t288, -g(1) * t269 - g(2) * t270 - g(3) * t266 - t104 * t284 + t45 * t149 - t292 * t329 + t300 * t95 - t35 * t417 + t36 * t418, t102 * t285 - t21 * t393 (t400 + t402) * t86 + (t414 - t413 + (-t399 + t403) * qJD(6)) * t154, t102 * t87 - t21 * t153 + t285 * t435 + t393 * t57, t100 * t286 + t22 * t394, -t100 * t87 - t22 * t153 - t286 * t435 - t394 * t57, t153 * t57 + t435 * t87, t33 * t57 + t2 * t153 - t296 * t87 - t292 * t22 - t29 * t411 - g(1) * (-t138 * t237 + t241 * t65) - g(2) * (-t136 * t237 + t241 * t63) - g(3) * (t108 * t241 - t237 * t392) + (t237 * t4 + t29 * t365) * t154 + t420 * t435 + t417 * t100, -t34 * t57 - t1 * t153 - t14 * t87 + t292 * t21 - t29 * t409 - g(1) * (-t138 * t241 - t237 * t65) - g(2) * (-t136 * t241 - t237 * t63) - g(3) * (-t108 * t237 - t241 * t392) + (t241 * t4 - t29 * t366) * t154 - t421 * t435 + t417 * t102, t21 * t33 - t22 * t34 + t298 * t86 - t420 * t102 - t421 * t100 + (qJD(6) * t297 - t1 * t237 - t2 * t241) * t154 + t278, t1 * t34 + t2 * t33 - t4 * t292 - g(1) * (pkin(5) * t65 - pkin(10) * t64 + t269) - g(2) * (pkin(5) * t63 - pkin(10) * t62 + t270) - g(3) * (pkin(5) * t108 + pkin(10) * t107 + t266) + t417 * t29 + t421 * t14 - t420 * t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, -t171, t220, t197, t356, qJDD(3), -t164 * t376 + t256, -t164 * t374 - t426, 0, 0, -t197, t220, t171, qJDD(3), -t356, t197, 0.2e1 * t404 - qJDD(4) + (-t111 * t239 + t156 * t243) * qJD(2) + t256 (-t239 * pkin(3) + qJ(4) * t243) * qJDD(2), 0.2e1 * t227 + 0.2e1 * t228 + (t111 * t243 + t156 * t239) * qJD(2) + t426, -t49 * pkin(3) - g(1) * t333 - g(2) * t334 - g(3) * t326 + t46 * qJ(4) - t96 * t110 - t111 * t156 + t436 * t99, -t395, t341, t315 - t254, t395, -t291, t354, -t128 * t143 - t165 * t354 + t355 * t407 - t446, -t128 * t146 + t166 * t354 + t355 * t408 - t447, -t166 * t61 - t165 * t254 + (-t36 + t407) * t146 + (t35 - t408) * t143, -g(1) * t305 - g(2) * t306 - g(3) * t301 - t95 * t128 - t165 * t329 - t166 * t284 - t35 * t407 + t36 * t408, -t431, t442, -t432, -t433, t434, t398, t100 * t407 - t15 * t435 + t157 * t22 + t237 * t264 - t241 * t258 - t416, t102 * t407 - t157 * t21 + t16 * t435 + t237 * t258 + t241 * t264 - t415, t100 * t16 + t102 * t15 + (-t100 * t126 - t296 * t143 - t158 * t22 - t1 + (t102 * t158 - t296) * qJD(6)) * t241 + (t102 * t126 + t14 * t143 - t158 * t21 + t2 + (t100 * t158 + t14) * qJD(6)) * t237 + t282, t4 * t157 - t14 * t16 + t296 * t15 - g(1) * (pkin(5) * t42 - pkin(10) * t44 + t305) - g(2) * (pkin(5) * t38 - pkin(10) * t40 + t306) - g(3) * (-pkin(5) * t293 - pkin(10) * t74 + t301) + t407 * t29 - t297 * t126 + t257 * t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(3) - t197, t220, -t230 * t247 - t246, -qJD(3) * t99 + t111 * t376 + qJDD(4) - t259 - t404, 0, 0, 0, 0, 0, 0, -t143 * t376 - t238 * t425 - t242 * t354, -t146 * t376 + t238 * t354 - t242 * t425, t291 * t238 + (-qJD(5) * t143 - t274) * t242, -t95 * t376 + (-t329 - t321) * t242 + (-t284 + t322) * t238 + t277, 0, 0, 0, 0, 0, 0, -t242 * t22 + (-t237 * t369 - t142) * t435 + (-t100 * t355 - t365 * t435 - t412) * t238, t242 * t21 + (-t241 * t369 + t145) * t435 + (-t102 * t355 + t366 * t435 - t410) * t238, t100 * t145 + t102 * t142 + (t400 - t402) * t369 + (-t414 - t413 + (t399 + t403) * qJD(6)) * t238, t296 * t142 - t14 * t145 + (-qJD(5) * t297 - t4) * t242 + (-t29 * t355 + t257) * t238 + t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -t341, -t315 + t253, -t395, t291, -t354, -t321 + t446, -t322 + t447, 0, 0, t431, -t442, t432, t433, -t434, -t398, -pkin(5) * t22 - t100 * t36 - t17 * t435 + t237 * t283 - t241 * t260 + t416, pkin(5) * t21 - t102 * t36 + t18 * t435 + t237 * t260 + t241 * t283 + t415, t100 * t18 + t102 * t17 + ((-t22 + t368) * pkin(10) + t443) * t241 + ((qJD(6) * t100 - t21) * pkin(10) + t444) * t237 - t282, t296 * t17 - t14 * t18 - t29 * t36 + t272 * pkin(5) + (t257 - t282) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, -t100 ^ 2 + t102 ^ 2, -t21 + t428, -t401, -t22 + t427, t57, -t29 * t102 - g(1) * (t137 * t241 - t237 * t44) - g(2) * (t135 * t241 - t237 * t40) - g(3) * t58 - t444, t29 * t100 - g(1) * (-t137 * t237 - t241 * t44) - g(2) * (-t135 * t237 - t241 * t40) + g(3) * t59 - t443, 0, 0;];
tau_reg  = t5;
