% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPRR4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRR4_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:14:28
% EndTime: 2019-03-08 22:14:37
% DurationCPUTime: 2.63s
% Computational Cost: add. (2698->253), mult. (6467->445), div. (0->0), fcn. (6136->10), ass. (0->152)
t93 = cos(qJ(2));
t151 = qJD(2) * t93;
t85 = sin(pkin(6));
t135 = t85 * t151;
t90 = sin(qJ(2));
t161 = t85 * t90;
t86 = cos(pkin(6));
t89 = sin(qJ(3));
t92 = cos(qJ(3));
t46 = t89 * t161 - t86 * t92;
t34 = -t46 * qJD(3) + t92 * t135;
t47 = t92 * t161 + t86 * t89;
t35 = t47 * qJD(3) + t89 * t135;
t99 = t34 * t92 + t35 * t89 + (t46 * t92 - t47 * t89) * qJD(3);
t170 = cos(qJ(5));
t125 = qJD(3) * t170;
t118 = t92 * t125;
t144 = t89 * qJD(3);
t88 = sin(qJ(5));
t158 = t88 * t89;
t55 = t170 * t92 + t158;
t32 = t55 * qJD(5) - t88 * t144 - t118;
t124 = qJD(5) * t170;
t80 = t92 * qJD(3);
t133 = t88 * t80;
t148 = qJD(5) * t88;
t33 = -t92 * t148 + t133 + (t124 - t125) * t89;
t143 = t89 * qJD(4);
t154 = qJ(4) * t92;
t175 = pkin(3) + pkin(4);
t38 = (-t175 * t89 + t154) * qJD(3) + t143;
t181 = t33 * pkin(5) + t32 * pkin(10) + t38;
t87 = sin(qJ(6));
t83 = t87 ^ 2;
t91 = cos(qJ(6));
t84 = t91 ^ 2;
t155 = t83 - t84;
t64 = t155 * qJD(6);
t180 = 0.2e1 * t64;
t179 = t83 + t84;
t174 = pkin(8) - pkin(9);
t66 = t174 * t92;
t37 = t174 * t158 + t170 * t66;
t60 = t174 * t144;
t18 = t37 * qJD(5) - t174 * t118 - t88 * t60;
t127 = t170 * t89;
t56 = -t88 * t92 + t127;
t119 = t170 * t175;
t61 = -t88 * qJ(4) - t119;
t58 = pkin(5) - t61;
t62 = t170 * qJ(4) - t88 * t175;
t59 = -pkin(10) + t62;
t177 = -t18 + (t55 * t59 - t56 * t58) * qJD(6);
t176 = 0.2e1 * qJD(4);
t26 = -t46 * t170 + t47 * t88;
t27 = t47 * t170 + t46 * t88;
t9 = t27 * qJD(5) - t35 * t170 + t34 * t88;
t173 = t26 * t9;
t43 = t88 * qJD(4) + t62 * qJD(5);
t169 = t26 * t43;
t36 = -t174 * t127 + t88 * t66;
t168 = t36 * t18;
t167 = t36 * t43;
t166 = t43 * t87;
t165 = t43 * t91;
t164 = t56 * t32;
t163 = t56 * t87;
t162 = t56 * t91;
t160 = t85 * t93;
t159 = t87 * t33;
t157 = t91 * t32;
t156 = t91 * t33;
t153 = t89 * qJ(4);
t152 = qJD(2) * t90;
t150 = qJD(5) * t26;
t149 = qJD(5) * t36;
t146 = qJD(6) * t87;
t145 = qJD(6) * t91;
t142 = 0.2e1 * t55 * t33;
t141 = -0.2e1 * pkin(2) * qJD(3);
t140 = -0.2e1 * pkin(5) * qJD(6);
t139 = pkin(8) * t144;
t138 = pkin(8) * t80;
t137 = t9 * t170;
t136 = t85 * t152;
t134 = t87 * t145;
t132 = t89 * t80;
t131 = t18 * t170;
t130 = t43 * t170;
t129 = t87 * t170;
t128 = t91 * t170;
t42 = qJ(4) * t148 - t170 * qJD(4) + qJD(5) * t119;
t25 = t179 * t42;
t126 = 0.4e1 * t87 * t162;
t123 = qJD(6) * (pkin(5) + t58);
t122 = qJD(6) * t170;
t121 = t85 ^ 2 * t90 * t151;
t53 = t56 ^ 2;
t120 = t53 * t134;
t117 = pkin(5) * t32 - pkin(10) * t33;
t116 = pkin(5) * t56 + pkin(10) * t55;
t115 = t26 * t18 + t9 * t36;
t114 = -t92 * pkin(3) - t153;
t52 = t175 * t92 + pkin(2) + t153;
t98 = t55 * pkin(5) - t56 * pkin(10) + t52;
t95 = t91 * t98;
t13 = -t87 * t37 + t95;
t14 = t91 * t37 + t87 * t98;
t113 = t13 * t91 + t14 * t87;
t112 = t13 * t87 - t14 * t91;
t19 = t91 * t160 - t27 * t87;
t20 = t87 * t160 + t27 * t91;
t111 = t19 * t91 + t20 * t87;
t110 = t19 * t87 - t20 * t91;
t109 = t42 * t55 + t43 * t56;
t107 = t56 * t145 - t87 * t32;
t106 = -t56 * t146 - t157;
t105 = t170 * t56 + t55 * t88;
t104 = t179 * t170;
t101 = t114 * qJD(3) + t92 * qJD(4);
t100 = 0.2e1 * t47 * t34 + 0.2e1 * t46 * t35 - 0.2e1 * t121;
t17 = -t174 * t133 + t170 * t60 + t149;
t3 = -qJD(6) * t95 + t37 * t146 + t91 * t17 - t87 * t181;
t4 = -t14 * qJD(6) + t87 * t17 + t181 * t91;
t1 = -t113 * qJD(6) - t3 * t91 - t4 * t87;
t10 = t34 * t170 + t35 * t88 - t150;
t5 = -t20 * qJD(6) - t10 * t87 - t91 * t136;
t6 = t19 * qJD(6) + t10 * t91 - t87 * t136;
t2 = -t111 * qJD(6) - t5 * t87 + t6 * t91;
t97 = -qJD(6) * t36 - t32 * t58 - t33 * t59 + t109;
t96 = t99 * pkin(8);
t94 = t170 * t32 - t88 * t33 + (-t170 * t55 + t56 * t88) * qJD(5);
t70 = -0.2e1 * t132;
t69 = 0.2e1 * t132;
t68 = -0.2e1 * t134;
t67 = 0.2e1 * t134;
t65 = (-t89 ^ 2 + t92 ^ 2) * qJD(3);
t63 = -pkin(2) + t114;
t54 = -0.2e1 * t64;
t50 = t87 * t122 + t91 * t148;
t49 = -t91 * t122 + t87 * t148;
t48 = t104 * qJD(5);
t45 = -t143 + (pkin(3) * t89 - t154) * qJD(3);
t40 = (-t93 * t144 - t92 * t152) * t85;
t39 = (t89 * t152 - t93 * t80) * t85;
t22 = t55 * t145 + t159;
t21 = t55 * t146 - t156;
t15 = t87 * t157 + t56 * t64;
t12 = qJD(6) * t126 - t155 * t32;
t8 = -t26 * t146 + t9 * t91;
t7 = t26 * t145 + t9 * t87;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t27 * t10 - 0.2e1 * t121 + 0.2e1 * t173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t19 * t5 + 0.2e1 * t20 * t6 + 0.2e1 * t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t136, -t135, 0, 0, 0, 0, 0, 0, 0, 0, t40, t39, t99, -pkin(2) * t136 + t96, 0, 0, 0, 0, 0, 0, t40, t99, -t39 (t63 * t152 - t45 * t93) * t85 + t96, 0, 0, 0, 0, 0, 0 (-t55 * t152 + t33 * t93) * t85 (-t56 * t152 - t32 * t93) * t85, -t10 * t55 - t26 * t32 - t27 * t33 + t9 * t56, t10 * t37 - t27 * t17 + (-t52 * t152 + t38 * t93) * t85 + t115, 0, 0, 0, 0, 0, 0, t107 * t26 + t9 * t163 + t19 * t33 + t5 * t55, t106 * t26 + t9 * t162 - t20 * t33 - t6 * t55, t111 * t32 + (qJD(6) * t110 - t5 * t91 - t6 * t87) * t56, t5 * t13 + t6 * t14 + t19 * t4 - t20 * t3 + t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0.2e1 * t65, 0, t70, 0, 0, t89 * t141, t92 * t141, 0, 0, t69, 0, -0.2e1 * t65, 0, 0, t70, 0.2e1 * t63 * t144 - 0.2e1 * t45 * t92, 0, -0.2e1 * t45 * t89 - 0.2e1 * t63 * t80, 0.2e1 * t63 * t45, -0.2e1 * t164, 0.2e1 * t32 * t55 - 0.2e1 * t56 * t33, 0, t142, 0, 0, 0.2e1 * t52 * t33 + 0.2e1 * t38 * t55, -0.2e1 * t52 * t32 + 0.2e1 * t38 * t56, 0.2e1 * t17 * t55 + 0.2e1 * t18 * t56 - 0.2e1 * t36 * t32 - 0.2e1 * t37 * t33, -0.2e1 * t37 * t17 + 0.2e1 * t52 * t38 + 0.2e1 * t168, -0.2e1 * t84 * t164 - 0.2e1 * t120, t32 * t126 + t53 * t180, 0.2e1 * t106 * t55 + 0.2e1 * t56 * t156, -0.2e1 * t83 * t164 + 0.2e1 * t120, -0.2e1 * t107 * t55 - 0.2e1 * t56 * t159, t142, 0.2e1 * t107 * t36 + 0.2e1 * t13 * t33 + 0.2e1 * t18 * t163 + 0.2e1 * t4 * t55, 0.2e1 * t106 * t36 - 0.2e1 * t14 * t33 + 0.2e1 * t18 * t162 + 0.2e1 * t3 * t55, 0.2e1 * t113 * t32 + 0.2e1 * (qJD(6) * t112 + t3 * t87 - t4 * t91) * t56, 0.2e1 * t13 * t4 - 0.2e1 * t14 * t3 + 0.2e1 * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t34, 0, 0, 0, 0, 0, 0, 0, 0, -t35, 0, t34, -t35 * pkin(3) + t34 * qJ(4) + t47 * qJD(4), 0, 0, 0, 0, 0, 0, t9, t10, 0, t10 * t62 - t27 * t42 - t9 * t61 + t169, 0, 0, 0, 0, 0, 0, t8, -t7, -t2, t110 * t42 + t2 * t59 + t9 * t58 + t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t144, 0, -t138, t139, 0, 0, 0, t80, 0, 0, t144, 0, -t138, t101, -t139, t101 * pkin(8), 0, 0, t32, 0, t33, 0, t18, -t17, t61 * t32 - t62 * t33 + t109, -t17 * t62 - t18 * t61 - t37 * t42 + t167, t15, t12, -t22, -t15, t21, 0, -t177 * t91 + t97 * t87, t177 * t87 + t97 * t91, -t1, t1 * t59 + t112 * t42 + t18 * t58 + t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, qJ(4) * t176, 0, 0, 0, 0, 0, 0, 0.2e1 * t43, -0.2e1 * t42, 0, -0.2e1 * t62 * t42 - 0.2e1 * t61 * t43, t67, t54, 0, t68, 0, 0, -0.2e1 * t58 * t146 + 0.2e1 * t165, -0.2e1 * t145 * t58 - 0.2e1 * t166, 0.2e1 * t25, -0.2e1 * t25 * t59 + 0.2e1 * t58 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137 + t10 * t88 + (t170 * t27 + t26 * t88) * qJD(5), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137 + (t128 * t20 - t129 * t19) * qJD(5) + (t2 + t150) * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t138, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t131 - t17 * t88 + (t170 * t37 + t36 * t88) * qJD(5), 0, 0, 0, 0, 0, 0, -t105 * t145 + t87 * t94, t105 * t146 + t91 * t94, 0, -t131 + (t128 * t14 - t129 * t13) * qJD(5) + (t1 + t149) * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, t124, 0, -t130 - t42 * t88 + (t170 * t62 - t61 * t88) * qJD(5), 0, 0, 0, 0, 0, 0, t50, -t49, -t48, -t130 - t88 * t25 + (t104 * t59 + t58 * t88) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (-t170 + t104) * t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9, -t10, 0, 0, 0, 0, 0, 0, 0, 0, -t8, t7, t2, -t9 * pkin(5) + pkin(10) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, -t33, 0, -t18, t17, 0, 0, -t15, -t12, t22, t15, -t21, 0, -t18 * t91 + t117 * t87 + (-t116 * t91 + t36 * t87) * qJD(6), t18 * t87 + t117 * t91 + (t116 * t87 + t36 * t91) * qJD(6), t1, -t18 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t42, 0, 0, t68, t180, 0, t67, 0, 0, t123 * t87 - t165, t123 * t91 + t166, -t25, -t43 * pkin(5) - pkin(10) * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t124, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t49, t48 (-pkin(5) * t88 + pkin(10) * t104) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t54, 0, t68, 0, 0, t87 * t140, t91 * t140, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, -t107, t33, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, 0, t146, 0, -t145 * t59 + t87 * t42, t146 * t59 + t91 * t42, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t124 * t87 - t145 * t88, -t124 * t91 + t146 * t88, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, 0, -t146, 0, -pkin(10) * t145, pkin(10) * t146, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t11;
