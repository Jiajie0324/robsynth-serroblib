% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 05:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 05:11:04
% EndTime: 2019-05-05 05:11:46
% DurationCPUTime: 37.68s
% Computational Cost: add. (105663->843), mult. (212950->1298), div. (0->0), fcn. (144534->12), ass. (0->616)
t821 = qJD(3) ^ 2;
t815 = sin(qJ(3));
t805 = t815 ^ 2;
t822 = qJD(2) ^ 2;
t946 = t805 * t822;
t781 = t821 + t946;
t819 = cos(qJ(3));
t939 = t819 * t822;
t787 = t815 * t939;
t779 = qJDD(3) - t787;
t951 = t779 * t815;
t723 = t781 * t819 + t951;
t809 = sin(pkin(6));
t811 = cos(pkin(6));
t940 = t819 * t779;
t729 = -t781 * t815 + t940;
t926 = qJD(2) * qJD(3);
t911 = t819 * t926;
t923 = qJDD(2) * t815;
t768 = 0.2e1 * t911 + t923;
t816 = sin(qJ(2));
t820 = cos(qJ(2));
t861 = t729 * t816 + t768 * t820;
t617 = -t809 * t723 + t811 * t861;
t677 = t729 * t820 - t768 * t816;
t808 = sin(pkin(11));
t810 = cos(pkin(11));
t567 = t617 * t810 + t677 * t808;
t1021 = qJ(1) * t567;
t571 = t617 * t808 - t677 * t810;
t1020 = qJ(1) * t571;
t614 = t811 * t723 + t809 * t861;
t1019 = pkin(7) * (t614 * t809 + t617 * t811);
t1018 = pkin(1) * t614;
t1017 = pkin(1) * t617;
t806 = t819 ^ 2;
t945 = t806 * t822;
t783 = -t821 + t945;
t719 = t783 * t815 + t940;
t727 = -t783 * t819 + t951;
t920 = qJDD(2) * t820;
t846 = t727 * t816 + t819 * t920;
t632 = t809 * t719 + t811 * t846;
t921 = qJDD(2) * t819;
t683 = t727 * t820 - t816 * t921;
t1015 = t632 * t808 - t683 * t810;
t1014 = t632 * t810 + t683 * t808;
t795 = t815 * t926;
t770 = -0.2e1 * t795 + t921;
t956 = t770 * t815;
t701 = t768 * t819 + t956;
t955 = t770 * t819;
t959 = t768 * t815;
t704 = -t955 + t959;
t776 = (-t805 + t806) * t822;
t863 = t704 * t816 - t776 * t820;
t604 = t809 * t701 + t811 * t863;
t665 = t704 * t820 + t776 * t816;
t1013 = t604 * t808 - t665 * t810;
t1012 = t604 * t810 + t665 * t808;
t1011 = pkin(7) * t677;
t1004 = -t811 * t701 + t809 * t863;
t1003 = -t811 * t719 + t809 * t846;
t1002 = pkin(8) * t729;
t814 = sin(qJ(5));
t818 = cos(qJ(5));
t752 = (t814 * t815 + t818 * t819) * qJD(2);
t769 = t911 + t923;
t900 = -t795 + t921;
t663 = -t752 * qJD(5) + t818 * t769 - t814 * t900;
t802 = qJD(3) - qJD(5);
t960 = t752 * t802;
t644 = t960 + t663;
t999 = 2 * qJD(4);
t998 = pkin(2) * t723;
t997 = pkin(8) * t723;
t813 = sin(qJ(6));
t928 = qJD(2) * t819;
t929 = qJD(2) * t815;
t754 = -t814 * t928 + t818 * t929;
t817 = cos(qJ(6));
t713 = t754 * t813 + t817 * t802;
t715 = t754 * t817 - t802 * t813;
t658 = t715 * t713;
t903 = t814 * t769 + t818 * t900;
t662 = -qJD(5) * t754 - t903;
t830 = qJDD(6) - t662;
t983 = -t658 + t830;
t992 = t813 * t983;
t991 = t817 * t983;
t990 = t769 + t911;
t907 = g(1) * t808 - t810 * g(2);
t937 = g(3) - qJDD(1);
t989 = -t809 * t937 + t811 * t907;
t988 = t808 * t937;
t987 = t810 * t937;
t801 = -qJDD(3) + qJDD(5);
t961 = t752 * t754;
t856 = t801 - t961;
t986 = t814 * t856;
t777 = g(1) * t810 + g(2) * t808;
t680 = -t820 * t777 + t816 * t989;
t670 = -t822 * pkin(2) + qJDD(2) * pkin(8) + t680;
t979 = pkin(3) * t819;
t893 = -qJ(4) * t815 - t979;
t766 = t893 * qJD(2);
t902 = qJD(2) * t766 + t670;
t985 = t815 * t902;
t984 = t818 * t856;
t744 = qJD(6) + t752;
t675 = t744 * t713;
t914 = t713 * qJD(6) - t817 * t663 - t813 * t801;
t563 = t914 + t675;
t737 = t809 * t907 + t811 * t937;
t933 = -t819 * t670 + t815 * t737;
t888 = qJDD(3) * qJ(4) + qJD(3) * t999 + t766 * t928 - t933;
t904 = t813 * t663 - t817 * t801;
t558 = (qJD(6) - t744) * t715 + t904;
t710 = -t810 * t777 - t808 * t907;
t709 = -t808 * t777 + t810 * t907;
t711 = t713 ^ 2;
t712 = t715 ^ 2;
t742 = t744 ^ 2;
t750 = t752 ^ 2;
t751 = t754 ^ 2;
t982 = t802 ^ 2;
t981 = pkin(3) + pkin(4);
t778 = qJDD(3) + t787;
t762 = t819 * t778;
t784 = -t821 - t945;
t720 = t784 * t815 + t762;
t980 = pkin(2) * t720;
t978 = pkin(7) * t809;
t977 = pkin(7) * t811;
t976 = pkin(8) * t720;
t952 = t778 * t815;
t726 = t784 * t819 - t952;
t862 = t726 * t816 + t770 * t820;
t616 = -t809 * t720 + t811 * t862;
t676 = t726 * t820 - t770 * t816;
t566 = t616 * t810 + t676 * t808;
t975 = qJ(1) * t566;
t930 = t805 + t806;
t772 = t930 * qJDD(2);
t775 = t930 * t822;
t858 = t772 * t816 + t775 * t820;
t697 = t858 * t811;
t706 = t772 * t820 - t775 * t816;
t638 = t697 * t810 + t706 * t808;
t974 = qJ(1) * t638;
t973 = qJDD(3) * pkin(3);
t591 = -t821 * pkin(3) + t888;
t853 = -qJD(3) * pkin(4) - pkin(9) * t929;
t565 = -pkin(4) * t945 - pkin(9) * t900 + qJD(3) * t853 + t591;
t733 = t819 * t737;
t919 = qJDD(4) + t733;
t889 = qJ(4) * t821 - t919;
t823 = -t981 * qJDD(3) + (-t769 + t911) * pkin(9) + (-pkin(4) * t939 + t902) * t815 - t889;
t489 = t565 * t814 - t818 * t823;
t695 = pkin(5) * t752 - pkin(10) * t754;
t464 = -t801 * pkin(5) - pkin(10) * t982 + t695 * t754 + t489;
t972 = t464 * t813;
t971 = t464 * t817;
t626 = t670 * t815 + t733;
t533 = t626 * t819 + t815 * t933;
t970 = t533 * t816;
t589 = t658 + t830;
t969 = t589 * t813;
t968 = t589 * t817;
t895 = t816 * t777 + t820 * t989;
t844 = qJDD(2) * pkin(2) + t822 * pkin(8) + t895;
t967 = t844 * t815;
t966 = t844 * t819;
t688 = -t801 - t961;
t965 = t688 * t814;
t964 = t688 * t818;
t963 = t744 * t813;
t962 = t744 * t817;
t948 = t802 * t814;
t947 = t802 * t818;
t826 = t900 * pkin(3) + qJ(4) * t990 + t844;
t824 = -pkin(4) * t900 + pkin(9) * t945 - t853 * t929 - t826;
t850 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t929;
t572 = t850 + t824;
t943 = t814 * t572;
t942 = t816 * t737;
t941 = t818 * t572;
t938 = t820 * t737;
t490 = t818 * t565 + t814 * t823;
t465 = -pkin(5) * t982 + pkin(10) * t801 - t695 * t752 + t490;
t792 = t929 * t999;
t899 = pkin(3) * t795;
t492 = t792 - t824 - t644 * pkin(10) + (-t754 * t802 - t662) * pkin(5) - t899;
t412 = t817 * t465 + t813 * t492;
t936 = pkin(1) * t616 + t676 * t978;
t935 = pkin(1) * t697 + t706 * t978;
t934 = pkin(2) * t770 + pkin(8) * t726;
t932 = pkin(2) * t775 + pkin(8) * t772;
t931 = t775 - t821;
t924 = qJDD(2) * t809;
t922 = qJDD(2) * t816;
t918 = t814 * t658;
t917 = t818 * t658;
t916 = t816 * t961;
t915 = t820 * t961;
t613 = t811 * t720 + t809 * t862;
t910 = -pkin(1) * t613 + t676 * t977;
t696 = t858 * t809;
t909 = -pkin(1) * t696 + t706 * t977;
t908 = pkin(5) * t814 + qJ(4);
t411 = t465 * t813 - t817 * t492;
t364 = t411 * t813 + t817 * t412;
t534 = t626 * t815 - t819 * t933;
t901 = pkin(5) * t818 + t981;
t898 = t816 * t787;
t897 = t820 * t787;
t892 = pkin(3) * t815 - qJ(4) * t819;
t773 = -t816 * t822 + t920;
t891 = -pkin(7) * t773 - t942;
t855 = t820 * t822 + t922;
t890 = -pkin(7) * t855 + t938;
t353 = t364 * t814 - t464 * t818;
t354 = t364 * t818 + t464 * t814;
t322 = t353 * t815 + t354 * t819;
t363 = -t411 * t817 + t412 * t813;
t887 = t322 * t816 + t363 * t820;
t424 = -t489 * t818 + t490 * t814;
t425 = t489 * t814 + t490 * t818;
t367 = t424 * t815 + t425 * t819;
t886 = t367 * t816 - t572 * t820;
t562 = -t675 + t914;
t485 = -t558 * t817 - t562 * t813;
t609 = t711 + t712;
t451 = t485 * t814 + t609 * t818;
t452 = t485 * t818 - t609 * t814;
t393 = t451 * t815 + t452 * t819;
t483 = -t558 * t813 + t562 * t817;
t885 = t393 * t816 + t483 * t820;
t560 = (-qJD(6) - t744) * t715 - t904;
t486 = t560 * t817 + t563 * t813;
t657 = -t712 + t711;
t462 = -t486 * t814 - t657 * t818;
t463 = t486 * t818 - t657 * t814;
t397 = -t462 * t815 + t463 * t819;
t484 = t560 * t813 - t563 * t817;
t884 = t397 * t816 + t484 * t820;
t629 = -t742 - t711;
t516 = t629 * t817 - t992;
t467 = t516 * t814 + t560 * t818;
t468 = t516 * t818 - t560 * t814;
t403 = t467 * t815 + t468 * t819;
t515 = t629 * t813 + t991;
t883 = t403 * t816 + t515 * t820;
t654 = -t712 - t742;
t519 = -t654 * t813 - t968;
t469 = t519 * t814 + t563 * t818;
t470 = t519 * t818 - t563 * t814;
t406 = t469 * t815 + t470 * t819;
t518 = t654 * t817 - t969;
t882 = t406 * t816 + t518 * t820;
t674 = -t712 + t742;
t530 = -t674 * t813 + t991;
t474 = -t530 * t814 - t562 * t818;
t476 = t530 * t818 - t562 * t814;
t415 = -t474 * t815 + t476 * t819;
t528 = t674 * t817 + t992;
t881 = t415 * t816 + t528 * t820;
t673 = t711 - t742;
t531 = t673 * t817 - t969;
t475 = -t531 * t814 - t558 * t818;
t477 = t531 * t818 - t558 * t814;
t416 = -t475 * t815 + t477 * t819;
t529 = t673 * t813 + t968;
t880 = t416 * t816 + t529 * t820;
t605 = -qJD(6) * t715 - t904;
t548 = -t605 * t813 + t713 * t962;
t509 = -t548 * t814 - t917;
t511 = t548 * t818 - t918;
t443 = -t509 * t815 + t511 * t819;
t547 = t605 * t817 + t713 * t963;
t879 = t443 * t816 + t547 * t820;
t550 = -t715 * t963 - t817 * t914;
t510 = -t550 * t814 + t917;
t512 = t550 * t818 + t918;
t444 = -t510 * t815 + t512 * t819;
t549 = t715 * t962 - t813 * t914;
t878 = t444 * t816 + t549 * t820;
t598 = (-t713 * t817 + t715 * t813) * t744;
t537 = -t598 * t814 + t818 * t830;
t538 = t598 * t818 + t814 * t830;
t472 = -t537 * t815 + t538 * t819;
t597 = (-t713 * t813 - t715 * t817) * t744;
t877 = t472 * t816 + t597 * t820;
t640 = (qJD(5) - t802) * t754 + t903;
t541 = t640 * t814 - t644 * t818;
t543 = -t640 * t818 - t644 * t814;
t480 = -t541 * t815 + t543 * t819;
t698 = t751 - t750;
t876 = t480 * t816 + t698 * t820;
t645 = -t960 + t663;
t829 = (-qJD(5) - t802) * t754 - t903;
t542 = -t645 * t818 + t814 * t829;
t544 = t645 * t814 + t818 * t829;
t481 = t542 * t815 + t544 * t819;
t666 = -t750 - t751;
t875 = t481 * t816 + t666 * t820;
t581 = pkin(3) * t931 + t888;
t828 = t919 + t985;
t582 = qJ(4) * t931 + t828 - t973;
t497 = -t581 * t815 + t582 * t819;
t765 = t892 * qJDD(2);
t874 = t497 * t816 + t765 * t820;
t594 = t889 + t973 - t985;
t507 = t591 * t819 - t594 * t815;
t599 = t850 - t826;
t873 = t507 * t816 - t599 * t820;
t681 = -t982 - t750;
t611 = t681 * t814 + t984;
t612 = t681 * t818 - t986;
t523 = t611 * t815 + t612 * t819;
t872 = t523 * t816 + t640 * t820;
t871 = t534 * t816 + t820 * t844;
t825 = t792 + t826;
t585 = (t770 - t795) * pkin(3) + t825;
t535 = qJ(4) * t955 - t585 * t815 - t976;
t540 = -t980 + (-t784 - t821) * qJ(4) + (-qJDD(3) - t778) * pkin(3) + t828;
t870 = t535 * t816 + t540 * t820;
t731 = -t751 - t982;
t646 = t731 * t818 + t965;
t647 = -t731 * t814 + t964;
t546 = t646 * t815 + t647 * t819;
t869 = t546 * t816 + t644 * t820;
t739 = -t751 + t982;
t650 = -t739 * t818 - t986;
t652 = -t739 * t814 + t984;
t553 = -t650 * t815 + t652 * t819;
t868 = t553 * t816 + t645 * t820;
t738 = t750 - t982;
t651 = -t738 * t814 + t964;
t653 = t738 * t818 + t965;
t554 = -t651 * t815 + t653 * t819;
t867 = t554 * t816 + t820 * t829;
t592 = t626 - t980;
t620 = -t967 - t976;
t866 = t592 * t820 + t620 * t816;
t671 = (-t752 * t814 - t754 * t818) * t802;
t672 = (t752 * t818 - t754 * t814) * t802;
t596 = -t671 * t815 + t672 * t819;
t865 = t596 * t816 + t801 * t820;
t607 = -t680 * t816 - t820 * t895;
t608 = t680 * t820 - t816 * t895;
t747 = t855 * t811;
t859 = t747 * t810 + t773 * t808;
t693 = t747 * t808 - t773 * t810;
t761 = t930 * t926;
t854 = -qJDD(3) * t820 + t761 * t816;
t622 = -t662 * t818 + t752 * t948;
t623 = -t662 * t814 - t752 * t947;
t526 = -t622 * t815 + t623 * t819;
t852 = t526 * t816 - t915;
t624 = -t663 * t814 + t754 * t947;
t625 = t663 * t818 + t754 * t948;
t527 = -t624 * t815 + t625 * t819;
t851 = t527 * t816 + t915;
t849 = (-t613 * t809 - t616 * t811) * pkin(7);
t848 = (-t696 * t809 - t697 * t811) * pkin(7);
t782 = t821 - t946;
t728 = -t782 * t815 + t762;
t845 = t728 * t816 - t815 * t920;
t734 = -t806 * t926 - t815 * t900;
t843 = t734 * t816 - t897;
t735 = t769 * t819 - t805 * t926;
t842 = t735 * t816 + t897;
t307 = -pkin(9) * t354 + (pkin(10) * t814 + t901) * t363;
t311 = -pkin(9) * t353 + (-pkin(10) * t818 + t908) * t363;
t321 = -t353 * t819 + t354 * t815;
t294 = -pkin(8) * t321 - t307 * t815 + t311 * t819;
t304 = -pkin(2) * t321 - pkin(5) * t464 + pkin(10) * t364 - qJ(4) * t354 + t353 * t981;
t316 = t322 * t820 - t363 * t816;
t841 = pkin(7) * t316 + t294 * t816 + t304 * t820;
t357 = -pkin(10) * t483 - t363;
t329 = -pkin(9) * t452 - t814 * t357 + t483 * t901;
t331 = -pkin(9) * t451 + t818 * t357 + t483 * t908;
t392 = -t451 * t819 + t452 * t815;
t309 = -pkin(8) * t392 - t329 * t815 + t331 * t819;
t320 = -pkin(2) * t392 + pkin(5) * t609 + pkin(10) * t485 - qJ(4) * t452 + t451 * t981 + t364;
t371 = t393 * t820 - t483 * t816;
t840 = pkin(7) * t371 + t309 * t816 + t320 * t820;
t384 = -pkin(5) * t515 + t411;
t428 = -pkin(10) * t515 + t972;
t343 = -pkin(9) * t468 - t384 * t818 - t428 * t814 + t515 * t981;
t348 = -pkin(9) * t467 + qJ(4) * t515 - t384 * t814 + t428 * t818;
t402 = -t467 * t819 + t468 * t815;
t314 = -pkin(8) * t402 - t343 * t815 + t348 * t819;
t337 = -pkin(2) * t402 + pkin(5) * t560 + pkin(10) * t516 - qJ(4) * t468 + t467 * t981 - t971;
t378 = t403 * t820 - t515 * t816;
t839 = pkin(7) * t378 + t314 * t816 + t337 * t820;
t385 = -pkin(5) * t518 + t412;
t429 = -pkin(10) * t518 + t971;
t344 = -pkin(9) * t470 - t385 * t818 - t429 * t814 + t518 * t981;
t349 = -pkin(9) * t469 + qJ(4) * t518 - t385 * t814 + t429 * t818;
t405 = -t469 * t819 + t470 * t815;
t315 = -pkin(8) * t405 - t344 * t815 + t349 * t819;
t340 = -pkin(2) * t405 + pkin(5) * t563 + pkin(10) * t519 - qJ(4) * t470 + t469 * t981 + t972;
t380 = t406 * t820 - t518 * t816;
t838 = pkin(7) * t380 + t315 * t816 + t340 * t820;
t366 = -t424 * t819 + t425 * t815;
t327 = -pkin(2) * t366 - qJ(4) * t425 + t424 * t981;
t382 = -pkin(9) * t425 - t572 * t981;
t395 = -pkin(9) * t424 - qJ(4) * t572;
t330 = -pkin(8) * t366 - t382 * t815 + t395 * t819;
t362 = t367 * t820 + t572 * t816;
t837 = pkin(7) * t362 + t327 * t820 + t330 * t816;
t383 = -pkin(9) * t544 + t666 * t981 - t425;
t389 = -pkin(9) * t542 + qJ(4) * t666 - t424;
t479 = -t542 * t819 + t544 * t815;
t347 = -pkin(8) * t479 - t383 * t815 + t389 * t819;
t390 = -pkin(2) * t479 - qJ(4) * t544 + t542 * t981;
t456 = t481 * t820 - t666 * t816;
t836 = pkin(7) * t456 + t347 * t816 + t390 * t820;
t455 = -pkin(9) * t612 + t640 * t981 - t941;
t482 = -pkin(9) * t611 + qJ(4) * t640 - t943;
t522 = -t611 * t819 + t612 * t815;
t381 = -pkin(8) * t522 - t455 * t815 + t482 * t819;
t394 = -pkin(2) * t522 - qJ(4) * t612 + t611 * t981 - t489;
t495 = t523 * t820 - t640 * t816;
t835 = pkin(7) * t495 + t381 * t816 + t394 * t820;
t459 = -pkin(9) * t647 + t644 * t981 + t943;
t491 = -pkin(9) * t646 + qJ(4) * t644 - t941;
t545 = -t646 * t819 + t647 * t815;
t388 = -pkin(8) * t545 - t459 * t815 + t491 * t819;
t407 = -pkin(2) * t545 - qJ(4) * t647 + t646 * t981 - t490;
t498 = t546 * t820 - t644 * t816;
t834 = pkin(7) * t498 + t388 * t816 + t407 * t820;
t506 = t591 * t815 + t594 * t819;
t436 = -pkin(2) * t506 - pkin(3) * t594 - qJ(4) * t591;
t440 = -pkin(8) * t506 + t599 * t892;
t473 = t507 * t820 + t599 * t816;
t833 = pkin(7) * t473 + t436 * t820 + t440 * t816;
t584 = qJ(4) * t768 + t825 - t899;
t536 = -pkin(3) * t959 + t584 * t819 - t997;
t539 = -t998 - qJ(4) * t779 + (-t781 + t821) * pkin(3) - t888;
t832 = t536 * t816 + t539 * t820 + t1011;
t593 = -t933 + t998;
t621 = -t966 + t997;
t831 = t593 * t820 + t621 * t816 - t1011;
t505 = t534 * t820 - t816 * t844;
t827 = pkin(7) * t505 - (-pkin(2) * t820 - pkin(8) * t816) * t533;
t748 = t773 * t811;
t746 = t773 * t809;
t745 = t855 * t809;
t736 = qJDD(3) * t816 + t761 * t820;
t722 = t782 * t819 + t952;
t718 = t990 * t815;
t717 = (t900 - t795) * t819;
t708 = t854 * t811;
t707 = t854 * t809;
t694 = -t748 * t808 - t810 * t855;
t692 = t748 * t810 - t808 * t855;
t686 = t735 * t820 - t898;
t685 = t734 * t820 + t898;
t684 = t728 * t820 + t815 * t922;
t656 = -t708 * t808 + t736 * t810;
t655 = t708 * t810 + t736 * t808;
t649 = -t938 + (t745 * t809 + t747 * t811) * pkin(7);
t648 = -t942 + (-t746 * t809 - t748 * t811) * pkin(7);
t639 = -t697 * t808 + t706 * t810;
t637 = -t809 * t718 + t811 * t842;
t636 = -t809 * t717 + t811 * t843;
t635 = t811 * t718 + t809 * t842;
t634 = t811 * t717 + t809 * t843;
t633 = -t809 * t722 + t811 * t845;
t630 = t811 * t722 + t809 * t845;
t628 = qJ(1) * t639;
t602 = t934 + t966;
t601 = -pkin(2) * t768 - t1002 - t967;
t600 = t608 * t811;
t595 = t671 * t819 + t672 * t815;
t587 = -pkin(1) * t746 - t809 * t895 + t811 * t890;
t586 = pkin(1) * t745 + t809 * t680 + t811 * t891;
t583 = t596 * t820 - t801 * t816;
t580 = -t637 * t808 + t686 * t810;
t579 = -t636 * t808 + t685 * t810;
t578 = t637 * t810 + t686 * t808;
t577 = t636 * t810 + t685 * t808;
t576 = -t633 * t808 + t684 * t810;
t575 = t633 * t810 + t684 * t808;
t574 = -t607 * t811 + t809 * t737;
t573 = -t607 * t809 - t811 * t737;
t569 = -t616 * t808 + t676 * t810;
t564 = qJ(1) * t569;
t552 = t651 * t819 + t653 * t815;
t551 = t650 * t819 + t652 * t815;
t525 = t624 * t819 + t625 * t815;
t524 = t622 * t819 + t623 * t815;
t521 = t1002 + t815 * t584 + (pkin(2) + t979) * t768;
t520 = qJ(4) * t956 + t585 * t819 + t934;
t517 = t534 + t932;
t514 = t527 * t820 - t916;
t513 = t526 * t820 + t916;
t508 = pkin(2) * t844 + pkin(8) * t534;
t504 = -pkin(1) * t573 + t608 * t977;
t503 = t554 * t820 - t816 * t829;
t502 = t553 * t820 - t645 * t816;
t501 = -t574 * t808 + t608 * t810;
t500 = t574 * t810 + t608 * t808;
t499 = -t809 * t595 + t811 * t865;
t496 = t820 * t533 + t848;
t494 = (-t573 * t809 - t574 * t811) * pkin(7);
t493 = t581 * t819 + t582 * t815 + t932;
t478 = t541 * t819 + t543 * t815;
t471 = t537 * t819 + t538 * t815;
t466 = t820 * t497 - t816 * t765 + t848;
t460 = t480 * t820 - t698 * t816;
t458 = -t816 * t593 + t820 * t621 + t1019;
t457 = -t816 * t592 + t820 * t620 + t849;
t454 = -t809 * t552 + t811 * t867;
t453 = -t809 * t551 + t811 * t868;
t450 = -t809 * t525 + t811 * t851;
t449 = -t809 * t524 + t811 * t852;
t448 = -t809 * t545 + t811 * t869;
t447 = t811 * t545 + t809 * t869;
t446 = t533 * t809 + t811 * t871;
t445 = -t533 * t811 + t809 * t871;
t442 = t510 * t819 + t512 * t815;
t441 = t509 * t819 + t511 * t815;
t439 = -t601 * t809 + t811 * t831 + t1018;
t438 = -t602 * t809 + t811 * t866 + t910;
t437 = t472 * t820 - t597 * t816;
t435 = -t517 * t809 + t811 * t970 + t909;
t434 = -t809 * t522 + t811 * t872;
t433 = t811 * t522 + t809 * t872;
t432 = t820 * t535 - t816 * t540 + t849;
t431 = t820 * t536 - t816 * t539 - t1019;
t430 = pkin(8) * t507 + (-pkin(2) + t893) * t599;
t427 = -t809 * t506 + t811 * t873;
t426 = t811 * t506 + t809 * t873;
t423 = t444 * t820 - t549 * t816;
t422 = t443 * t820 - t547 * t816;
t421 = -t493 * t809 + t811 * t874 + t909;
t420 = -t446 * t808 + t505 * t810;
t419 = t446 * t810 + t505 * t808;
t418 = -t448 * t808 + t498 * t810;
t417 = t448 * t810 + t498 * t808;
t414 = t475 * t819 + t477 * t815;
t413 = t474 * t819 + t476 * t815;
t409 = -t520 * t809 + t811 * t870 + t910;
t408 = -t521 * t809 + t811 * t832 - t1018;
t404 = -t809 * t478 + t811 * t876;
t401 = -t809 * t479 + t811 * t875;
t400 = t811 * t479 + t809 * t875;
t399 = -t434 * t808 + t495 * t810;
t398 = t434 * t810 + t495 * t808;
t396 = t462 * t819 + t463 * t815;
t391 = -t809 * t471 + t811 * t877;
t387 = t416 * t820 - t529 * t816;
t386 = t415 * t820 - t528 * t816;
t379 = pkin(2) * t644 + pkin(8) * t546 + t459 * t819 + t491 * t815;
t377 = -t427 * t808 + t473 * t810;
t376 = t427 * t810 + t473 * t808;
t375 = pkin(2) * t640 + pkin(8) * t523 + t455 * t819 + t482 * t815;
t374 = t397 * t820 - t484 * t816;
t373 = -t809 * t442 + t811 * t878;
t372 = -t809 * t441 + t811 * t879;
t370 = -t401 * t808 + t456 * t810;
t369 = t401 * t810 + t456 * t808;
t368 = -(pkin(2) * t816 - pkin(8) * t820) * t533 + (-t445 * t809 - t446 * t811) * pkin(7);
t365 = -pkin(1) * t445 - t508 * t809 + t811 * t827;
t361 = -t809 * t414 + t811 * t880;
t360 = -t809 * t413 + t811 * t881;
t359 = -t809 * t405 + t811 * t882;
t358 = t811 * t405 + t809 * t882;
t356 = -t809 * t402 + t811 * t883;
t355 = t811 * t402 + t809 * t883;
t352 = -t809 * t396 + t811 * t884;
t351 = -t809 * t392 + t811 * t885;
t350 = t811 * t392 + t809 * t885;
t346 = -t816 * t436 + t820 * t440 + (-t426 * t809 - t427 * t811) * pkin(7);
t345 = pkin(2) * t666 + pkin(8) * t481 + t383 * t819 + t389 * t815;
t342 = t820 * t388 - t816 * t407 + (-t447 * t809 - t448 * t811) * pkin(7);
t341 = -pkin(1) * t426 - t430 * t809 + t811 * t833;
t339 = -t359 * t808 + t380 * t810;
t338 = t359 * t810 + t380 * t808;
t336 = t820 * t381 - t816 * t394 + (-t433 * t809 - t434 * t811) * pkin(7);
t335 = -t809 * t366 + t811 * t886;
t334 = t811 * t366 + t809 * t886;
t333 = -t356 * t808 + t378 * t810;
t332 = t356 * t810 + t378 * t808;
t328 = -pkin(2) * t572 + pkin(8) * t367 + t382 * t819 + t395 * t815;
t326 = -t351 * t808 + t371 * t810;
t325 = t351 * t810 + t371 * t808;
t324 = -pkin(1) * t447 - t379 * t809 + t811 * t834;
t323 = -pkin(1) * t433 - t375 * t809 + t811 * t835;
t319 = -t335 * t808 + t362 * t810;
t318 = t335 * t810 + t362 * t808;
t317 = t820 * t347 - t816 * t390 + (-t400 * t809 - t401 * t811) * pkin(7);
t313 = pkin(2) * t518 + pkin(8) * t406 + t344 * t819 + t349 * t815;
t312 = pkin(2) * t515 + pkin(8) * t403 + t343 * t819 + t348 * t815;
t310 = -pkin(1) * t400 - t345 * t809 + t811 * t836;
t308 = pkin(2) * t483 + pkin(8) * t393 + t329 * t819 + t331 * t815;
t306 = -t809 * t321 + t811 * t887;
t305 = t811 * t321 + t809 * t887;
t303 = t820 * t315 - t816 * t340 + (-t358 * t809 - t359 * t811) * pkin(7);
t302 = t820 * t314 - t816 * t337 + (-t355 * t809 - t356 * t811) * pkin(7);
t301 = -t816 * t327 + t820 * t330 + (-t334 * t809 - t335 * t811) * pkin(7);
t300 = -pkin(1) * t334 - t328 * t809 + t811 * t837;
t299 = -t306 * t808 + t316 * t810;
t298 = t306 * t810 + t316 * t808;
t297 = t820 * t309 - t816 * t320 + (-t350 * t809 - t351 * t811) * pkin(7);
t296 = -pkin(1) * t358 - t313 * t809 + t811 * t838;
t295 = -pkin(1) * t355 - t312 * t809 + t811 * t839;
t293 = pkin(2) * t363 + pkin(8) * t322 + t307 * t819 + t311 * t815;
t292 = -pkin(1) * t350 - t308 * t809 + t811 * t840;
t291 = t820 * t294 - t816 * t304 + (-t305 * t809 - t306 * t811) * pkin(7);
t290 = -pkin(1) * t305 - t293 * t809 + t811 * t841;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, t694, t693, 0, t501, 0, 0, 0, 0, 0, 0, t569, t571, t639, t420, 0, 0, 0, 0, 0, 0, t569, t639, -t571, t377, 0, 0, 0, 0, 0, 0, t399, t418, t370, t319, 0, 0, 0, 0, 0, 0, t333, t339, t326, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t709, 0, 0, 0, 0, 0, 0, t692, -t859, 0, t500, 0, 0, 0, 0, 0, 0, t566, -t567, t638, t419, 0, 0, 0, 0, 0, 0, t566, t638, t567, t376, 0, 0, 0, 0, 0, 0, t398, t417, t369, t318, 0, 0, 0, 0, 0, 0, t332, t338, t325, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t937, 0, 0, 0, 0, 0, 0, t746, -t745, 0, t573, 0, 0, 0, 0, 0, 0, t613, -t614, t696, t445, 0, 0, 0, 0, 0, 0, t613, t696, t614, t426, 0, 0, 0, 0, 0, 0, t433, t447, t400, t334, 0, 0, 0, 0, 0, 0, t355, t358, t350, t305; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t988, -t987, -t709, -qJ(1) * t709, 0, 0, -t693, 0, t694, t808 * t924, -qJ(1) * t692 - t587 * t808 + t648 * t810, qJ(1) * t859 - t586 * t808 + t649 * t810, -t600 * t808 + t607 * t810, -qJ(1) * t500 + t494 * t810 - t504 * t808, t580, t1013, t576, t579, t1015, t656, -t438 * t808 + t457 * t810 - t975, -t439 * t808 + t458 * t810 + t1021, -t435 * t808 + t496 * t810 - t974, -qJ(1) * t419 - t365 * t808 + t368 * t810, t580, t576, -t1013, t656, -t1015, t579, -t409 * t808 + t432 * t810 - t975, -t421 * t808 + t466 * t810 - t974, -t408 * t808 + t431 * t810 - t1021, -qJ(1) * t376 - t341 * t808 + t346 * t810, -t450 * t808 + t514 * t810, -t404 * t808 + t460 * t810, -t453 * t808 + t502 * t810, -t449 * t808 + t513 * t810, -t454 * t808 + t503 * t810, -t499 * t808 + t583 * t810, -qJ(1) * t398 - t323 * t808 + t336 * t810, -qJ(1) * t417 - t324 * t808 + t342 * t810, -qJ(1) * t369 - t310 * t808 + t317 * t810, -qJ(1) * t318 - t300 * t808 + t301 * t810, -t373 * t808 + t423 * t810, -t352 * t808 + t374 * t810, -t360 * t808 + t386 * t810, -t372 * t808 + t422 * t810, -t361 * t808 + t387 * t810, -t391 * t808 + t437 * t810, -qJ(1) * t332 - t295 * t808 + t302 * t810, -qJ(1) * t338 - t296 * t808 + t303 * t810, -qJ(1) * t325 - t292 * t808 + t297 * t810, -qJ(1) * t298 - t290 * t808 + t291 * t810; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t987, -t988, t710, qJ(1) * t710, 0, 0, t859, 0, t692, -t810 * t924, qJ(1) * t694 + t587 * t810 + t648 * t808, qJ(1) * t693 + t586 * t810 + t649 * t808, t600 * t810 + t607 * t808, qJ(1) * t501 + t494 * t808 + t504 * t810, t578, -t1012, t575, t577, -t1014, t655, t438 * t810 + t457 * t808 + t564, t439 * t810 + t458 * t808 + t1020, t435 * t810 + t496 * t808 + t628, qJ(1) * t420 + t365 * t810 + t368 * t808, t578, t575, t1012, t655, t1014, t577, t409 * t810 + t432 * t808 + t564, t421 * t810 + t466 * t808 + t628, t408 * t810 + t431 * t808 - t1020, qJ(1) * t377 + t341 * t810 + t346 * t808, t450 * t810 + t514 * t808, t404 * t810 + t460 * t808, t453 * t810 + t502 * t808, t449 * t810 + t513 * t808, t454 * t810 + t503 * t808, t499 * t810 + t583 * t808, qJ(1) * t399 + t323 * t810 + t336 * t808, qJ(1) * t418 + t324 * t810 + t342 * t808, qJ(1) * t370 + t310 * t810 + t317 * t808, qJ(1) * t319 + t300 * t810 + t301 * t808, t373 * t810 + t423 * t808, t352 * t810 + t374 * t808, t360 * t810 + t386 * t808, t372 * t810 + t422 * t808, t361 * t810 + t387 * t808, t391 * t810 + t437 * t808, qJ(1) * t333 + t295 * t810 + t302 * t808, qJ(1) * t339 + t296 * t810 + t303 * t808, qJ(1) * t326 + t292 * t810 + t297 * t808, qJ(1) * t299 + t290 * t810 + t291 * t808; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t907, t777, 0, 0, 0, 0, t745, 0, t746, t811 * qJDD(2), pkin(1) * t748 + t809 * t890 + t811 * t895, -pkin(1) * t747 - t811 * t680 + t809 * t891, t608 * t809, pkin(1) * t574 + t608 * t978, t635, -t1004, t630, t634, -t1003, t707, t602 * t811 + t809 * t866 + t936, t601 * t811 + t809 * t831 - t1017, t517 * t811 + t809 * t970 + t935, pkin(1) * t446 + t508 * t811 + t809 * t827, t635, t630, t1004, t707, t1003, t634, t520 * t811 + t809 * t870 + t936, t493 * t811 + t809 * t874 + t935, t521 * t811 + t809 * t832 + t1017, pkin(1) * t427 + t430 * t811 + t809 * t833, t811 * t525 + t809 * t851, t811 * t478 + t809 * t876, t811 * t551 + t809 * t868, t811 * t524 + t809 * t852, t811 * t552 + t809 * t867, t811 * t595 + t809 * t865, pkin(1) * t434 + t375 * t811 + t809 * t835, pkin(1) * t448 + t379 * t811 + t809 * t834, pkin(1) * t401 + t345 * t811 + t809 * t836, pkin(1) * t335 + t328 * t811 + t809 * t837, t811 * t442 + t809 * t878, t811 * t396 + t809 * t884, t811 * t413 + t809 * t881, t811 * t441 + t809 * t879, t811 * t414 + t809 * t880, t811 * t471 + t809 * t877, pkin(1) * t356 + t312 * t811 + t809 * t839, pkin(1) * t359 + t313 * t811 + t809 * t838, pkin(1) * t351 + t308 * t811 + t809 * t840, pkin(1) * t306 + t293 * t811 + t809 * t841;];
tauB_reg  = t1;
