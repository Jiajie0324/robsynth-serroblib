% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 16:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:34:28
% EndTime: 2019-05-05 16:35:02
% DurationCPUTime: 35.50s
% Computational Cost: add. (65830->736), mult. (146201->1051), div. (0->0), fcn. (96770->10), ass. (0->514)
t859 = sin(pkin(10));
t861 = cos(pkin(10));
t869 = cos(qJ(3));
t866 = sin(qJ(3));
t916 = qJD(1) * t866;
t806 = -t861 * t869 * qJD(1) + t859 * t916;
t808 = (t859 * t869 + t861 * t866) * qJD(1);
t928 = t808 * t806;
t1004 = qJDD(3) + t928;
t1020 = t1004 * t859;
t871 = qJD(3) ^ 2;
t954 = t808 ^ 2;
t787 = t954 + t871;
t670 = t787 * t861 + t1020;
t1019 = t1004 * t861;
t676 = -t787 * t859 + t1019;
t599 = t670 * t866 - t676 * t869;
t860 = sin(pkin(9));
t862 = cos(pkin(9));
t912 = qJD(1) * qJD(3);
t901 = t869 * t912;
t910 = qJDD(1) * t866;
t822 = t901 + t910;
t902 = t866 * t912;
t909 = qJDD(1) * t869;
t881 = t902 - t909;
t752 = t861 * t822 - t859 * t881;
t796 = t806 * qJD(3);
t967 = -t796 + t752;
t549 = t599 * t860 - t862 * t967;
t555 = t599 * t862 + t860 * t967;
t867 = sin(qJ(1));
t870 = cos(qJ(1));
t476 = t549 * t870 + t555 * t867;
t1079 = pkin(6) * t476;
t477 = t549 * t867 - t555 * t870;
t1078 = pkin(6) * t477;
t1005 = qJDD(3) - t928;
t1018 = t1005 * t859;
t788 = t954 - t871;
t672 = t788 * t861 - t1018;
t1017 = t1005 * t861;
t677 = t788 * t859 + t1017;
t597 = t672 * t866 + t677 * t869;
t966 = t796 + t752;
t547 = t597 * t860 - t862 * t966;
t553 = t597 * t862 + t860 * t966;
t1077 = t547 * t870 + t553 * t867;
t1076 = t547 * t867 - t553 * t870;
t1075 = qJ(2) * t549;
t1074 = -pkin(1) * t549 + pkin(2) * t967 - pkin(7) * t599;
t592 = t670 * t869 + t676 * t866;
t1073 = -pkin(1) * t592 - qJ(2) * t555;
t955 = t806 ^ 2;
t783 = t955 - t871;
t668 = t783 * t859 + t1019;
t675 = -t783 * t861 + t1020;
t595 = t668 * t866 + t675 * t869;
t751 = t822 * t859 + t861 * t881;
t915 = qJD(3) * t808;
t695 = t751 - t915;
t545 = t595 * t860 - t695 * t862;
t551 = t595 * t862 + t695 * t860;
t1072 = t545 * t870 + t551 * t867;
t1071 = t545 * t867 - t551 * t870;
t1007 = t751 + t915;
t729 = -t871 - t955;
t648 = t729 * t859 + t1017;
t651 = -t729 * t861 + t1018;
t565 = t648 * t866 + t651 * t869;
t529 = t1007 * t862 + t565 * t860;
t531 = -t1007 * t860 + t565 * t862;
t468 = t529 * t870 + t531 * t867;
t1070 = pkin(6) * t468;
t469 = t529 * t867 - t531 * t870;
t1069 = pkin(6) * t469;
t1067 = pkin(7) * t592;
t1028 = -t695 * t861 + t859 * t966;
t1029 = -t695 * t859 - t861 * t966;
t1033 = t1028 * t869 - t1029 * t866;
t963 = -t955 - t954;
t1046 = t1033 * t862 + t860 * t963;
t1047 = t1033 * t860 - t862 * t963;
t1054 = t1046 * t867 + t1047 * t870;
t1066 = pkin(6) * t1054;
t1055 = t1046 * t870 - t1047 * t867;
t1065 = pkin(6) * t1055;
t1063 = -pkin(2) * t592 - pkin(3) * t670;
t1062 = qJ(2) * t529;
t1061 = qJ(2) * t1047;
t1060 = pkin(1) * t529 + pkin(2) * t1007 + pkin(7) * t565;
t1059 = pkin(1) * t1047 - pkin(2) * t963 + pkin(7) * t1033;
t562 = t648 * t869 - t651 * t866;
t1058 = pkin(1) * t562 + qJ(2) * t531;
t1032 = t1028 * t866 + t1029 * t869;
t1057 = -pkin(1) * t1032 + qJ(2) * t1046;
t1056 = t672 * t869 - t677 * t866;
t1051 = pkin(7) * t1032;
t1050 = qJ(4) * t670;
t1049 = qJ(4) * t676;
t490 = -pkin(2) * t1032 - pkin(3) * t1029;
t1045 = t668 * t869 - t675 * t866;
t1014 = -t1007 * t859 + t861 * t967;
t940 = t967 * t859;
t941 = t1007 * t861;
t1021 = -t940 - t941;
t1026 = -t1014 * t866 + t1021 * t869;
t964 = -t954 + t955;
t1034 = t1026 * t862 - t860 * t964;
t1035 = t1026 * t860 + t862 * t964;
t1044 = t1034 * t870 - t1035 * t867;
t1043 = t1034 * t867 + t1035 * t870;
t1041 = pkin(7) * t562;
t1039 = qJ(4) * t1029;
t1038 = -pkin(2) * t562 - pkin(3) * t648;
t1036 = -pkin(3) * t963 + qJ(4) * t1028;
t1027 = t1014 * t869 + t1021 * t866;
t1023 = qJ(4) * t648;
t1022 = qJ(4) * t651;
t835 = g(1) * t870 + g(2) * t867;
t872 = qJD(1) ^ 2;
t820 = -pkin(1) * t872 - t835;
t834 = g(1) * t867 - t870 * g(2);
t884 = qJDD(1) * pkin(1) + t834;
t749 = t820 * t860 - t862 * t884;
t750 = t862 * t820 + t860 * t884;
t898 = t749 * t860 + t862 * t750;
t658 = t749 * t862 - t750 * t860;
t943 = t658 * t867;
t578 = t870 * t898 + t943;
t942 = t658 * t870;
t1006 = -t867 * t898 + t942;
t824 = qJDD(1) * t860 + t862 * t872;
t825 = qJDD(1) * t862 - t860 * t872;
t754 = -t824 * t867 + t870 * t825;
t856 = g(3) - qJDD(2);
t782 = qJ(2) * t824 - t856 * t862;
t888 = -qJ(2) * t825 - t856 * t860;
t1003 = -pkin(6) * t754 + t782 * t867 + t870 * t888;
t904 = t860 * t928;
t882 = t751 * t859 + t796 * t861;
t890 = -t861 * t751 + t796 * t859;
t959 = -t866 * t890 + t869 * t882;
t972 = t862 * t959 - t904;
t903 = t862 * t928;
t975 = t860 * t959 + t903;
t1002 = -t867 * t975 + t870 * t972;
t1001 = t867 * t972 + t870 * t975;
t889 = t861 * t752 - t859 * t915;
t891 = t859 * t752 + t861 * t915;
t957 = -t866 * t891 + t869 * t889;
t973 = t862 * t957 + t904;
t976 = t860 * t957 - t903;
t1000 = -t867 * t976 + t870 * t973;
t999 = t867 * t973 + t870 * t976;
t908 = qJDD(3) * t862;
t879 = (-t806 * t859 - t808 * t861) * qJD(3);
t880 = (-t806 * t861 + t808 * t859) * qJD(3);
t960 = -t866 * t879 + t869 * t880;
t974 = t860 * t960 - t908;
t846 = t860 * qJDD(3);
t977 = t862 * t960 + t846;
t998 = t867 * t977 + t870 * t974;
t997 = -t867 * t974 + t870 * t977;
t993 = qJ(5) * t967;
t865 = sin(qJ(6));
t868 = cos(qJ(6));
t765 = qJD(3) * t865 - t868 * t806;
t767 = qJD(3) * t868 + t806 * t865;
t693 = t767 * t765;
t744 = qJDD(6) + t752;
t968 = -t693 + t744;
t981 = t865 * t968;
t980 = t868 * t968;
t965 = t870 * t824 + t825 * t867;
t978 = pkin(6) * t965 + t782 * t870 - t867 * t888;
t961 = t866 * t880 + t869 * t879;
t958 = t866 * t882 + t869 * t890;
t956 = t866 * t889 + t869 * t891;
t763 = t765 ^ 2;
t764 = t767 ^ 2;
t800 = qJD(6) + t808;
t798 = t800 ^ 2;
t953 = 2 * qJD(5);
t952 = pkin(4) + pkin(8);
t951 = pkin(4) * t861;
t913 = qJD(4) * t808;
t795 = 0.2e1 * t913;
t718 = -pkin(2) * t872 + qJDD(1) * pkin(7) + t750;
t703 = t718 * t866 + t869 * t856;
t841 = t869 * t872 * t866;
t832 = qJDD(3) + t841;
t645 = (-t822 + t901) * qJ(4) + t832 * pkin(3) - t703;
t705 = t869 * t718 - t866 * t856;
t831 = qJD(3) * pkin(3) - qJ(4) * t916;
t855 = t869 ^ 2;
t850 = t855 * t872;
t647 = -pkin(3) * t850 - qJ(4) * t881 - qJD(3) * t831 + t705;
t918 = -t861 * t645 + t859 * t647;
t556 = t795 + t918;
t914 = qJD(4) * t806;
t792 = -0.2e1 * t914;
t919 = t859 * t645 + t861 * t647;
t557 = t792 + t919;
t481 = -t556 * t861 + t557 * t859;
t950 = t481 * t866;
t949 = t481 * t869;
t778 = pkin(5) * t808 - qJD(3) * pkin(8);
t727 = pkin(4) * t806 - qJ(5) * t808;
t886 = -t871 * pkin(4) - t727 * t806 + t919;
t876 = qJDD(3) * qJ(5) + t792 + t886;
t491 = -t751 * pkin(5) - t955 * pkin(8) + (t953 + t778) * qJD(3) + t876;
t948 = t491 * t865;
t947 = t491 * t868;
t644 = t693 + t744;
t946 = t644 * t868;
t717 = -qJDD(1) * pkin(2) - t872 * pkin(7) + t749;
t655 = t881 * pkin(3) - qJ(4) * t850 + t831 * t916 + qJDD(4) + t717;
t945 = t655 * t859;
t944 = t655 * t861;
t939 = t717 * t866;
t938 = t717 * t869;
t931 = t765 * t800;
t930 = t800 * t865;
t929 = t800 * t868;
t823 = -0.2e1 * t902 + t909;
t927 = t823 * t869;
t924 = t832 * t866;
t833 = qJDD(3) - t841;
t923 = t833 * t866;
t922 = t833 * t869;
t854 = t866 ^ 2;
t921 = t854 * t872;
t920 = t865 * t644;
t917 = t854 + t855;
t911 = qJD(5) * qJD(3);
t907 = -t764 - t798;
t906 = t859 * t693;
t905 = t861 * t693;
t664 = -t765 * qJD(6) + t868 * qJDD(3) + t865 * t751;
t900 = qJ(5) * t859 + pkin(3);
t899 = pkin(4) * qJD(3) - (2 * qJD(5));
t482 = t556 * t859 + t861 * t557;
t625 = t703 * t866 + t869 * t705;
t762 = -t834 * t867 - t870 * t835;
t895 = qJDD(3) * t865 - t868 * t751;
t894 = t860 * t841;
t893 = t862 * t841;
t828 = qJDD(1) * t870 - t867 * t872;
t892 = -pkin(6) * t828 - g(3) * t867;
t883 = qJDD(3) * pkin(4) + t871 * qJ(5) - t808 * t727 - qJDD(5) - t918;
t878 = t795 - t883;
t489 = pkin(5) * t966 - pkin(8) * t1005 + t878;
t874 = t751 * pkin(4) + t655 - t993;
t500 = -pkin(5) * t955 + pkin(8) * t751 + (-t778 + t899) * t808 + t874;
t439 = -t489 * t868 + t500 * t865;
t440 = t489 * t865 + t500 * t868;
t399 = -t439 * t868 + t440 * t865;
t400 = t865 * t439 + t440 * t868;
t624 = t703 * t869 - t705 * t866;
t761 = t834 * t870 - t835 * t867;
t885 = t664 - t931;
t519 = -0.2e1 * t913 + t883;
t877 = (-qJD(6) + t800) * t767 - t895;
t518 = t876 + 0.2e1 * t911;
t873 = -t808 * t953 + t874;
t840 = -t850 - t871;
t839 = t850 - t871;
t838 = -t871 - t921;
t837 = t871 - t921;
t830 = t850 - t921;
t829 = t850 + t921;
t827 = qJDD(1) * t867 + t870 * t872;
t826 = t917 * qJDD(1);
t821 = 0.2e1 * t901 + t910;
t818 = t869 * t832;
t817 = t917 * t912;
t801 = -pkin(6) * t827 + g(3) * t870;
t777 = t822 * t869 - t854 * t912;
t776 = -t855 * t912 + t866 * t881;
t775 = t817 * t862 + t846;
t774 = t817 * t860 - t908;
t773 = -t838 * t866 - t922;
t772 = -t837 * t866 + t818;
t771 = t840 * t869 - t924;
t770 = t839 * t869 - t923;
t769 = t838 * t869 - t923;
t768 = t840 * t866 + t818;
t759 = t826 * t862 - t829 * t860;
t758 = t826 * t860 + t829 * t862;
t753 = -t821 * t866 + t927;
t726 = t777 * t862 - t894;
t725 = t776 * t862 + t894;
t724 = t777 * t860 + t893;
t723 = t776 * t860 - t893;
t722 = t772 * t862 + t860 * t910;
t721 = t770 * t862 + t860 * t909;
t720 = t772 * t860 - t862 * t910;
t719 = t770 * t860 - t862 * t909;
t711 = t773 * t862 + t821 * t860;
t710 = t771 * t862 - t823 * t860;
t709 = t773 * t860 - t821 * t862;
t708 = t771 * t860 + t823 * t862;
t707 = -t764 + t798;
t706 = t763 - t798;
t704 = t753 * t862 - t830 * t860;
t702 = t753 * t860 + t830 * t862;
t690 = t764 - t763;
t667 = -t758 * t867 + t759 * t870;
t666 = t758 * t870 + t759 * t867;
t663 = -qJD(6) * t767 - t895;
t662 = -pkin(7) * t769 + t938;
t661 = -pkin(7) * t768 + t939;
t660 = -t798 - t763;
t654 = -pkin(2) * t769 + t705;
t653 = -pkin(2) * t768 + t703;
t652 = -t763 - t764;
t646 = pkin(1) * t856 + qJ(2) * t898;
t637 = (t765 * t868 - t767 * t865) * t800;
t636 = (t765 * t865 + t767 * t868) * t800;
t633 = -t709 * t867 + t711 * t870;
t632 = -t708 * t867 + t710 * t870;
t631 = t709 * t870 + t711 * t867;
t630 = t708 * t870 + t710 * t867;
t613 = t664 + t931;
t609 = (qJD(6) + t800) * t767 + t895;
t607 = -t664 * t868 + t767 * t930;
t606 = -t664 * t865 - t767 * t929;
t605 = t663 * t865 - t765 * t929;
t604 = -t663 * t868 - t765 * t930;
t591 = -t636 * t859 + t744 * t861;
t590 = t636 * t861 + t744 * t859;
t589 = -t706 * t868 + t920;
t588 = t707 * t865 - t980;
t587 = -t706 * t865 - t946;
t586 = -t707 * t868 - t981;
t585 = -qJ(2) * t758 + t624 * t862;
t584 = qJ(2) * t759 + t624 * t860;
t583 = t944 + t1050;
t582 = t625 * t862 + t717 * t860;
t581 = t625 * t860 - t717 * t862;
t580 = -t865 * t907 - t946;
t579 = t868 * t907 - t920;
t576 = t945 - t1023;
t575 = t660 * t868 - t981;
t574 = t865 * t660 + t980;
t561 = -t606 * t859 + t905;
t560 = -t604 * t859 - t905;
t559 = t606 * t861 + t906;
t558 = t604 * t861 - t906;
t542 = -pkin(3) * t967 - t1049 + t945;
t541 = t808 * t899 + t874;
t540 = -qJ(2) * t709 - t654 * t860 + t662 * t862;
t539 = -qJ(2) * t708 - t653 * t860 + t661 * t862;
t538 = -pkin(3) * t1007 - t1022 - t944;
t527 = -pkin(1) * t769 + qJ(2) * t711 + t654 * t862 + t662 * t860;
t526 = -pkin(1) * t768 + qJ(2) * t710 + t653 * t862 + t661 * t860;
t525 = t865 * t613 + t868 * t877;
t524 = t609 * t868 + t865 * t885;
t523 = -t613 * t868 + t865 * t877;
t522 = t609 * t865 - t868 * t885;
t521 = (t1007 + t915) * pkin(4) + t873;
t520 = -pkin(4) * t915 - t873 + t993;
t517 = -t586 * t859 + t613 * t861;
t516 = -t587 * t859 + t861 * t877;
t515 = t586 * t861 + t613 * t859;
t514 = t587 * t861 + t859 * t877;
t509 = t579 * t859 + t861 * t885;
t508 = -t579 * t861 + t859 * t885;
t507 = -t590 * t866 + t591 * t869;
t506 = t574 * t859 + t609 * t861;
t505 = -t574 * t861 + t609 * t859;
t499 = -t522 * t859 + t690 * t861;
t498 = t522 * t861 + t690 * t859;
t497 = -qJ(5) * t963 + t878;
t496 = -pkin(4) * t963 + t518;
t495 = -t581 * t867 + t582 * t870;
t494 = t581 * t870 + t582 * t867;
t493 = t523 * t859 + t652 * t861;
t492 = -t523 * t861 + t652 * t859;
t488 = -t559 * t866 + t561 * t869;
t487 = -t558 * t866 + t560 * t869;
t486 = -pkin(4) * t940 + t520 * t861 - t1050;
t485 = t507 * t862 - t637 * t860;
t484 = t507 * t860 + t637 * t862;
t483 = -qJ(2) * t581 - (pkin(2) * t860 - pkin(7) * t862) * t624;
t480 = -t1063 + t557;
t479 = qJ(5) * t941 - t521 * t859 + t1023;
t474 = t1049 + t520 * t859 + (pkin(3) + t951) * t967;
t473 = t1038 + t556;
t472 = pkin(4) * t966 + qJ(5) * t695 + t490;
t471 = t1007 * t900 + t521 * t861 + t1022;
t466 = pkin(5) * t523 - qJ(5) * t525;
t465 = -pkin(3) * t655 + qJ(4) * t482;
t464 = -t542 * t866 + t583 * t869 + t1067;
t463 = qJ(2) * t582 - (-pkin(2) * t862 - pkin(7) * t860 - pkin(1)) * t624;
t462 = t488 * t862 - t607 * t860;
t461 = t487 * t862 - t605 * t860;
t460 = t488 * t860 + t607 * t862;
t459 = t487 * t860 + t605 * t862;
t458 = -t481 - t1039;
t457 = t518 * t861 - t519 * t859;
t456 = t518 * t859 + t519 * t861;
t455 = -pkin(4) * t787 + 0.2e1 * t914 - 0.2e1 * t911 + (-qJDD(3) - t1004) * qJ(5) - t886 + t1063;
t454 = -t515 * t866 + t517 * t869;
t453 = -t514 * t866 + t516 * t869;
t452 = -t538 * t866 + t576 * t869 - t1041;
t451 = t1036 + t482;
t450 = -t508 * t866 + t509 * t869;
t449 = t508 * t869 + t509 * t866;
t448 = -t505 * t866 + t506 * t869;
t447 = t505 * t869 + t506 * t866;
t442 = pkin(4) * t1005 + qJ(5) * t729 - t1038 + t519;
t441 = -t498 * t866 + t499 * t869;
t438 = -t492 * t866 + t493 * t869;
t437 = t492 * t869 + t493 * t866;
t435 = t454 * t862 - t588 * t860;
t434 = t453 * t862 - t589 * t860;
t433 = t454 * t860 + t588 * t862;
t432 = t453 * t860 + t589 * t862;
t431 = t450 * t862 + t580 * t860;
t430 = t450 * t860 - t580 * t862;
t429 = -t496 * t859 + t497 * t861 - t1039;
t428 = t448 * t862 + t575 * t860;
t427 = t448 * t860 - t575 * t862;
t426 = pkin(5) * t885 - t580 * t952 - t948;
t425 = pkin(5) * t609 - t575 * t952 + t947;
t424 = t496 * t861 + t497 * t859 + t1036;
t423 = t482 * t869 - t950;
t422 = t482 * t866 + t949;
t421 = t441 * t862 - t524 * t860;
t420 = t441 * t860 + t524 * t862;
t419 = t423 * t862 + t655 * t860;
t418 = t423 * t860 - t655 * t862;
t417 = t438 * t862 + t525 * t860;
t416 = t438 * t860 - t525 * t862;
t415 = -qJ(4) * t456 + (pkin(4) * t859 - qJ(5) * t861) * t541;
t414 = -t474 * t866 + t486 * t869 - t1067;
t413 = pkin(5) * t579 - qJ(5) * t580 - t440;
t412 = pkin(5) * t574 - qJ(5) * t575 - t439;
t411 = -t471 * t866 + t479 * t869 + t1041;
t410 = -t456 * t866 + t457 * t869;
t409 = t456 * t869 + t457 * t866;
t408 = t464 * t862 - t480 * t860 - t1075;
t407 = qJ(4) * t457 + (-t900 - t951) * t541;
t406 = -pkin(2) * t422 - pkin(3) * t481;
t405 = t464 * t860 + t480 * t862 - t1073;
t404 = t452 * t862 - t473 * t860 + t1062;
t403 = t410 * t862 + t541 * t860;
t402 = t410 * t860 - t541 * t862;
t401 = -t451 * t866 + t458 * t869 - t1051;
t398 = t452 * t860 + t473 * t862 - t1058;
t397 = -t430 * t867 + t431 * t870;
t396 = t430 * t870 + t431 * t867;
t395 = -t427 * t867 + t428 * t870;
t394 = t427 * t870 + t428 * t867;
t393 = -pkin(2) * t449 - pkin(3) * t508 - qJ(5) * t885 + t579 * t952 - t947;
t392 = t399 * t859 + t491 * t861;
t391 = -t399 * t861 + t491 * t859;
t390 = -pkin(2) * t447 - pkin(3) * t505 - qJ(5) * t609 + t574 * t952 - t948;
t389 = -pkin(7) * t422 - qJ(4) * t949 - t465 * t866;
t388 = t414 * t862 - t455 * t860 + t1075;
t387 = -t418 * t867 + t419 * t870;
t386 = t418 * t870 + t419 * t867;
t385 = -t424 * t866 + t429 * t869 - t1051;
t384 = -t416 * t867 + t417 * t870;
t383 = t416 * t870 + t417 * t867;
t382 = t414 * t860 + t455 * t862 + t1073;
t381 = t411 * t862 - t442 * t860 - t1062;
t380 = pkin(5) * t652 - t525 * t952 - t400;
t379 = t401 * t862 - t490 * t860 - t1061;
t378 = -qJ(4) * t508 + t413 * t861 - t426 * t859;
t377 = t411 * t860 + t442 * t862 + t1058;
t376 = -qJ(4) * t505 + t412 * t861 - t425 * t859;
t375 = -pkin(2) * t409 - pkin(3) * t456 - pkin(4) * t519 - qJ(5) * t518;
t374 = t401 * t860 + t490 * t862 + t1057;
t373 = -pkin(3) * t580 + qJ(4) * t509 + t413 * t859 + t426 * t861;
t372 = -pkin(3) * t575 + qJ(4) * t506 + t412 * t859 + t425 * t861;
t371 = t385 * t862 - t472 * t860 - t1061;
t370 = -t402 * t867 + t403 * t870;
t369 = t402 * t870 + t403 * t867;
t368 = pkin(5) * t399 - qJ(5) * t400;
t367 = -qJ(4) * t492 - t380 * t859 + t466 * t861;
t366 = t385 * t860 + t472 * t862 + t1057;
t365 = -pkin(2) * t437 - pkin(3) * t492 - qJ(5) * t652 + t523 * t952 + t399;
t364 = -pkin(3) * t525 + qJ(4) * t493 + t380 * t861 + t466 * t859;
t363 = pkin(5) * t491 - t400 * t952;
t362 = -pkin(7) * t409 - t407 * t866 + t415 * t869;
t361 = -t391 * t866 + t392 * t869;
t360 = t391 * t869 + t392 * t866;
t359 = -qJ(2) * t418 + t389 * t862 - t406 * t860;
t358 = -pkin(1) * t422 + qJ(2) * t419 + t389 * t860 + t406 * t862;
t357 = t361 * t862 + t400 * t860;
t356 = t361 * t860 - t400 * t862;
t355 = -pkin(7) * t449 - t373 * t866 + t378 * t869;
t354 = -pkin(7) * t447 - t372 * t866 + t376 * t869;
t353 = -pkin(7) * t437 - t364 * t866 + t367 * t869;
t352 = -qJ(2) * t402 + t362 * t862 - t375 * t860;
t351 = -qJ(2) * t430 + t355 * t862 - t393 * t860;
t350 = -qJ(4) * t391 - t363 * t859 + t368 * t861;
t349 = -qJ(2) * t427 + t354 * t862 - t390 * t860;
t348 = -pkin(1) * t409 + qJ(2) * t403 + t362 * t860 + t375 * t862;
t347 = -pkin(1) * t449 + qJ(2) * t431 + t355 * t860 + t393 * t862;
t346 = -pkin(1) * t447 + qJ(2) * t428 + t354 * t860 + t390 * t862;
t345 = -pkin(2) * t360 - pkin(3) * t391 - qJ(5) * t491 + t399 * t952;
t344 = -pkin(3) * t400 + qJ(4) * t392 + t363 * t861 + t368 * t859;
t343 = -t356 * t867 + t357 * t870;
t342 = t356 * t870 + t357 * t867;
t341 = -qJ(2) * t416 + t353 * t862 - t365 * t860;
t340 = -pkin(1) * t437 + qJ(2) * t417 + t353 * t860 + t365 * t862;
t339 = -pkin(7) * t360 - t344 * t866 + t350 * t869;
t338 = -qJ(2) * t356 + t339 * t862 - t345 * t860;
t337 = -pkin(1) * t360 + qJ(2) * t357 + t339 * t860 + t345 * t862;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t827, -t828, 0, t762, 0, 0, 0, 0, 0, 0, -t965, -t754, 0, t578, 0, 0, 0, 0, 0, 0, t632, t633, t667, t495, 0, 0, 0, 0, 0, 0, t469, -t477, t1055, t387, 0, 0, 0, 0, 0, 0, t1055, -t469, t477, t370, 0, 0, 0, 0, 0, 0, t395, t397, t384, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t828, -t827, 0, t761, 0, 0, 0, 0, 0, 0, t754, -t965, 0, -t1006, 0, 0, 0, 0, 0, 0, t630, t631, t666, t494, 0, 0, 0, 0, 0, 0, -t468, t476, t1054, t386, 0, 0, 0, 0, 0, 0, t1054, t468, -t476, t369, 0, 0, 0, 0, 0, 0, t394, t396, t383, t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t856, 0, 0, 0, 0, 0, 0, t768, t769, 0, -t624, 0, 0, 0, 0, 0, 0, t562, -t592, t1032, t422, 0, 0, 0, 0, 0, 0, t1032, -t562, t592, t409, 0, 0, 0, 0, 0, 0, t447, t449, t437, t360; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t828, 0, -t827, 0, t892, -t801, -t761, -pkin(6) * t761, 0, 0, t754, 0, -t965, 0, t1003, t978, t1006, pkin(6) * t1006 + qJ(2) * t942 - t646 * t867, -t724 * t867 + t726 * t870, -t702 * t867 + t704 * t870, -t720 * t867 + t722 * t870, -t723 * t867 + t725 * t870, -t719 * t867 + t721 * t870, -t774 * t867 + t775 * t870, -pkin(6) * t630 - t526 * t867 + t539 * t870, -pkin(6) * t631 - t527 * t867 + t540 * t870, -pkin(6) * t666 - t584 * t867 + t585 * t870, -pkin(6) * t494 - t463 * t867 + t483 * t870, t1000, t1044, -t1076, t1002, t1071, t997, -t398 * t867 + t404 * t870 + t1070, -t405 * t867 + t408 * t870 - t1079, -t374 * t867 + t379 * t870 - t1066, -pkin(6) * t386 - t358 * t867 + t359 * t870, t997, t1076, -t1071, t1000, t1044, t1002, -t366 * t867 + t371 * t870 - t1066, -t377 * t867 + t381 * t870 - t1070, -t382 * t867 + t388 * t870 + t1079, -pkin(6) * t369 - t348 * t867 + t352 * t870, -t460 * t867 + t462 * t870, -t420 * t867 + t421 * t870, -t433 * t867 + t435 * t870, -t459 * t867 + t461 * t870, -t432 * t867 + t434 * t870, -t484 * t867 + t485 * t870, -pkin(6) * t394 - t346 * t867 + t349 * t870, -pkin(6) * t396 - t347 * t867 + t351 * t870, -pkin(6) * t383 - t340 * t867 + t341 * t870, -pkin(6) * t342 - t337 * t867 + t338 * t870; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t827, 0, t828, 0, t801, t892, t762, pkin(6) * t762, 0, 0, t965, 0, t754, 0, -t978, t1003, t578, pkin(6) * t578 + qJ(2) * t943 + t646 * t870, t724 * t870 + t726 * t867, t702 * t870 + t704 * t867, t720 * t870 + t722 * t867, t723 * t870 + t725 * t867, t719 * t870 + t721 * t867, t774 * t870 + t775 * t867, pkin(6) * t632 + t526 * t870 + t539 * t867, pkin(6) * t633 + t527 * t870 + t540 * t867, pkin(6) * t667 + t584 * t870 + t585 * t867, pkin(6) * t495 + t463 * t870 + t483 * t867, t999, t1043, t1077, t1001, -t1072, t998, t398 * t870 + t404 * t867 + t1069, t405 * t870 + t408 * t867 - t1078, t374 * t870 + t379 * t867 + t1065, pkin(6) * t387 + t358 * t870 + t359 * t867, t998, -t1077, t1072, t999, t1043, t1001, t366 * t870 + t371 * t867 + t1065, t377 * t870 + t381 * t867 - t1069, t382 * t870 + t388 * t867 + t1078, pkin(6) * t370 + t348 * t870 + t352 * t867, t460 * t870 + t462 * t867, t420 * t870 + t421 * t867, t433 * t870 + t435 * t867, t459 * t870 + t461 * t867, t432 * t870 + t434 * t867, t484 * t870 + t485 * t867, pkin(6) * t395 + t346 * t870 + t349 * t867, pkin(6) * t397 + t347 * t870 + t351 * t867, pkin(6) * t384 + t340 * t870 + t341 * t867, pkin(6) * t343 + t337 * t870 + t338 * t867; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t834, t835, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t825 - t749, -pkin(1) * t824 - t750, 0, -pkin(1) * t658, (t822 + t901) * t866, t821 * t869 + t823 * t866, t837 * t869 + t924, t927, t839 * t866 + t922, 0, pkin(1) * t708 + pkin(2) * t823 + pkin(7) * t771 - t938, pkin(1) * t709 - pkin(2) * t821 + pkin(7) * t773 + t939, pkin(1) * t758 + pkin(2) * t829 + pkin(7) * t826 + t625, pkin(1) * t581 - pkin(2) * t717 + pkin(7) * t625, t956, t1027, -t1056, t958, t1045, t961, t538 * t869 + t576 * t866 - t1060, t542 * t869 + t583 * t866 - t1074, t451 * t869 + t458 * t866 + t1059, pkin(1) * t418 - pkin(2) * t655 + pkin(7) * t423 - qJ(4) * t950 + t465 * t869, t961, t1056, -t1045, t956, t1027, t958, t424 * t869 + t429 * t866 + t1059, t471 * t869 + t479 * t866 + t1060, t474 * t869 + t486 * t866 + t1074, pkin(1) * t402 - pkin(2) * t541 + pkin(7) * t410 + t407 * t869 + t415 * t866, t559 * t869 + t561 * t866, t498 * t869 + t499 * t866, t515 * t869 + t517 * t866, t558 * t869 + t560 * t866, t514 * t869 + t516 * t866, t590 * t869 + t591 * t866, pkin(1) * t427 - pkin(2) * t575 + pkin(7) * t448 + t372 * t869 + t376 * t866, pkin(1) * t430 - pkin(2) * t580 + pkin(7) * t450 + t373 * t869 + t378 * t866, pkin(1) * t416 - pkin(2) * t525 + pkin(7) * t438 + t364 * t869 + t367 * t866, pkin(1) * t356 - pkin(2) * t400 + pkin(7) * t361 + t344 * t869 + t350 * t866;];
tauB_reg  = t1;
