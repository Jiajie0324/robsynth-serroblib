% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPPR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR2_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:42:39
% EndTime: 2019-03-09 02:42:43
% DurationCPUTime: 1.41s
% Computational Cost: add. (1729->142), mult. (3534->242), div. (0->0), fcn. (3288->8), ass. (0->94)
t103 = sin(pkin(10));
t104 = cos(pkin(10));
t55 = sin(qJ(3));
t57 = cos(qJ(3));
t43 = t103 * t57 + t104 * t55;
t39 = t43 * qJD(3);
t42 = t103 * t55 - t104 * t57;
t40 = t42 * qJD(3);
t119 = -0.2e1 * t39 * t43 + 0.2e1 * t42 * t40;
t114 = pkin(4) + pkin(8);
t82 = sin(pkin(9)) * pkin(1) + pkin(7);
t77 = qJ(4) + t82;
t72 = t57 * t77;
t73 = t55 * t77;
t22 = t103 * t72 + t104 * t73;
t60 = t43 * pkin(5) + t22;
t100 = t43 * qJD(5);
t99 = t55 * qJD(3);
t92 = pkin(3) * t99;
t68 = t40 * qJ(5) - t100 + t92;
t118 = -qJD(6) * t60 - t114 * t39 - t68;
t54 = sin(qJ(6));
t51 = t54 ^ 2;
t56 = cos(qJ(6));
t52 = t56 ^ 2;
t86 = (t51 - t52) * qJD(6);
t110 = t42 * t39;
t33 = t43 * t40;
t117 = -0.2e1 * t33 + 0.2e1 * t110;
t29 = -0.2e1 * t33;
t116 = 0.2e1 * qJD(3);
t115 = 0.2e1 * qJD(5);
t112 = t39 * t54;
t111 = t39 * t56;
t108 = t42 * t54;
t36 = t51 * t39;
t37 = t52 * t39;
t102 = qJD(6) * t54;
t101 = qJD(6) * t56;
t98 = t57 * qJD(3);
t97 = 0.2e1 * t110;
t25 = t43 * t112;
t96 = t54 * t111;
t50 = -cos(pkin(9)) * pkin(1) - pkin(2);
t95 = t50 * t116;
t47 = t103 * pkin(3) + qJ(5);
t94 = t47 * t115;
t91 = t43 * t101;
t93 = -t40 * t108 + t42 * t91 + t25;
t90 = t55 * t98;
t89 = t54 * t101;
t41 = t42 ^ 2;
t85 = t41 * t89;
t44 = -t57 * pkin(3) + t50;
t70 = -t43 * qJ(5) + t44;
t12 = t114 * t42 + t70;
t4 = -t54 * t12 + t56 * t60;
t5 = t56 * t12 + t54 * t60;
t84 = t4 * t56 + t5 * t54;
t83 = -t4 * t54 + t5 * t56;
t49 = -t104 * pkin(3) - pkin(4);
t71 = qJD(3) * t77;
t63 = t57 * qJD(4) - t55 * t71;
t64 = -t55 * qJD(4) - t57 * t71;
t13 = t103 * t63 - t104 * t64;
t14 = t103 * t64 + t104 * t63;
t23 = -t103 * t73 + t104 * t72;
t81 = t13 * t22 + t14 * t23;
t79 = -qJD(5) * t42 - t39 * t47;
t78 = -t40 * t47 + t100;
t20 = t42 * t101 + t112;
t76 = t42 * t102 - t111;
t21 = -t40 * t54 + t91;
t75 = t43 * t102 + t40 * t56;
t74 = qJD(3) * t82;
t46 = -pkin(8) + t49;
t8 = -t39 * pkin(5) + t14;
t69 = t8 + (t42 * t47 - t43 * t46) * qJD(6);
t67 = t13 * t42 + t14 * t43 + t22 * t39 - t23 * t40;
t15 = -t42 * pkin(5) + t23;
t66 = -qJD(6) * t15 + t40 * t46 - t79;
t58 = -t40 * pkin(5) + t13;
t2 = t12 * t102 + t118 * t56 - t54 * t58;
t3 = -t12 * t101 + t118 * t54 + t56 * t58;
t1 = t83 * qJD(6) - t2 * t54 + t3 * t56;
t65 = -t84 * qJD(6) - t2 * t56 - t3 * t54;
t62 = 0.2e1 * t13 * t43 - 0.2e1 * t14 * t42 - 0.2e1 * t22 * t40 - 0.2e1 * t23 * t39;
t27 = t42 * t37;
t24 = t42 * t36;
t17 = -t36 - t37;
t16 = t42 * pkin(4) + t70;
t10 = t39 * pkin(4) + t68;
t9 = -t42 * t86 + t96;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t90 (-t55 ^ 2 + t57 ^ 2) * t116, 0, -0.2e1 * t90, 0, 0, t55 * t95, t57 * t95, 0, 0, t29, t119, 0, t97, 0, 0, 0.2e1 * t39 * t44 + 0.2e1 * t42 * t92, -0.2e1 * t40 * t44 + 0.2e1 * t43 * t92, t62, 0.2e1 * t44 * t92 + 0.2e1 * t81, 0, 0, 0, t29, t119, t97, t62, -0.2e1 * t10 * t42 - 0.2e1 * t16 * t39, -0.2e1 * t10 * t43 + 0.2e1 * t16 * t40, 0.2e1 * t10 * t16 + 0.2e1 * t81, 0.2e1 * t24 + 0.2e1 * t85, -0.2e1 * t41 * t86 + 0.4e1 * t42 * t96, 0.2e1 * t93, 0.2e1 * t27 - 0.2e1 * t85, 0.2e1 * t43 * t111 - 0.2e1 * t75 * t42, t29, -0.2e1 * t8 * t56 * t42 + 0.2e1 * t76 * t15 + 0.2e1 * t3 * t43 - 0.2e1 * t4 * t40, 0.2e1 * t8 * t108 + 0.2e1 * t20 * t15 + 0.2e1 * t2 * t43 + 0.2e1 * t5 * t40, 0.2e1 * t83 * t39 + 0.2e1 * t65 * t42, 0.2e1 * t15 * t8 - 0.2e1 * t2 * t5 + 0.2e1 * t3 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, 0, 0, 0, 0, 0, -t21 * t42 - t25 + t93, 0, t1 * t42 - t15 * t40 + t84 * t39 + t8 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t24 + 0.2e1 * t27 - 0.2e1 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, -t99, 0, -t57 * t74, t55 * t74, 0, 0, 0, 0, -t40, 0, -t39, 0, -t13, -t14 (-t103 * t39 + t104 * t40) * pkin(3) (t103 * t14 - t104 * t13) * pkin(3), 0, t40, t39, 0, 0, 0, -t40 * t49 + t79, t13, t14, qJD(5) * t23 + t13 * t49 + t14 * t47, t9, -0.4e1 * t42 * t89 - t36 + t37, -t75, -t9, -t21, 0, t69 * t54 - t66 * t56, t66 * t54 + t69 * t56, -t1, t15 * qJD(5) + t1 * t46 + t8 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t98, 0, 0, 0, 0, 0, 0, 0, 0, -t39, t40, 0 (-t103 * t40 - t104 * t39) * pkin(3), 0, 0, 0, 0, 0, 0, 0, t39, -t40, t39 * t49 + t78, 0, 0, 0, 0, 0, 0, t21, -t75, t17 (t51 + t52) * t46 * t39 + t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, t94, -0.2e1 * t89, 0.2e1 * t86, 0, 0.2e1 * t89, 0, 0, 0.2e1 * qJD(5) * t54 + 0.2e1 * t47 * t101, 0.2e1 * qJD(5) * t56 - 0.2e1 * t47 * t102, 0, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, -t40, 0, t92, 0, 0, 0, 0, 0, 0, 0, -t39, t40, t10, 0, 0, 0, 0, 0, 0, -t21, t75, -t17, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, 0, 0, t13, 0, 0, 0, 0, 0, 0, -t75, -t21, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t76, -t40, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, -t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, 0, -t101, 0, -t46 * t102, -t46 * t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, t102, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, -t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t6;
