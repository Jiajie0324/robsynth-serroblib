% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:13
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRP4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP4_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:13:01
% EndTime: 2019-03-09 03:13:06
% DurationCPUTime: 1.69s
% Computational Cost: add. (1208->175), mult. (2442->279), div. (0->0), fcn. (1790->6), ass. (0->118)
t68 = sin(qJ(5));
t63 = t68 ^ 2;
t70 = cos(qJ(5));
t65 = t70 ^ 2;
t126 = t63 + t65;
t69 = sin(qJ(3));
t58 = t69 * qJD(3);
t32 = t126 * t58;
t55 = sin(pkin(9)) * pkin(1) + pkin(7);
t133 = pkin(4) + t55;
t71 = cos(qJ(3));
t72 = -pkin(3) - pkin(8);
t129 = t71 * t72;
t123 = t69 * qJ(4);
t56 = -cos(pkin(9)) * pkin(1) - pkin(2);
t80 = t56 - t123;
t25 = t80 + t129;
t38 = t133 * t69;
t139 = t25 * t70 + t38 * t68;
t59 = t71 * qJD(3);
t94 = t133 * t59;
t76 = -qJD(5) * t139 + t70 * t94;
t117 = t69 * qJD(4);
t57 = pkin(3) * t58;
t97 = t57 - t117;
t140 = -t68 * t97 + t76;
t127 = t63 - t65;
t66 = t71 ^ 2;
t98 = qJD(3) * (t69 ^ 2 - t66);
t42 = t127 * qJD(5);
t120 = qJD(5) * t68;
t60 = qJD(5) * t70;
t124 = qJ(4) * t71;
t87 = pkin(8) * t69 - t124;
t73 = qJD(3) * t87 + t97;
t5 = t120 * t25 - t38 * t60 - t68 * t94 - t70 * t73;
t6 = -t68 * t73 + t76;
t10 = -t25 * t68 + t38 * t70;
t85 = t10 * t68 - t139 * t70;
t2 = -qJD(5) * t85 - t5 * t68 + t6 * t70;
t116 = t69 * qJD(6);
t113 = qJ(6) * qJD(3);
t99 = t71 * t113;
t3 = -t5 + t99 + t116;
t134 = t71 * pkin(5);
t79 = t68 * t87;
t4 = (t79 - t134) * qJD(3) - t140;
t8 = qJ(6) * t69 + t139;
t9 = -pkin(5) * t69 - t10;
t91 = t68 * t9 + t70 * t8;
t1 = qJD(5) * t91 + t3 * t68 - t4 * t70;
t138 = 0.2e1 * qJD(4);
t137 = 0.2e1 * qJD(6);
t88 = -pkin(5) * t68 + qJ(6) * t70;
t30 = qJD(5) * t88 + t68 * qJD(6);
t89 = pkin(5) * t70 + qJ(6) * t68;
t7 = t30 * t71 + (-t89 - t133) * t58;
t136 = t7 * t68;
t135 = t71 * pkin(3);
t27 = qJD(5) * t89 - t70 * qJD(6) + qJD(4);
t132 = t27 * t71;
t29 = t133 * t58;
t131 = t29 * t68;
t130 = t69 * t72;
t128 = t72 * t32;
t39 = t133 * t71;
t122 = qJD(3) * t68;
t121 = qJD(3) * t70;
t119 = qJD(5) * t71;
t118 = qJD(5) * t72;
t115 = t71 * qJD(4);
t114 = qJ(4) * qJD(5);
t112 = qJD(3) * qJ(4);
t111 = 0.2e1 * qJD(3) * t56;
t109 = t68 * t119;
t108 = t68 * t118;
t107 = t70 * t119;
t106 = t70 * t118;
t105 = t69 * t59;
t104 = t55 * t58;
t103 = t70 * t58;
t102 = t70 * t59;
t101 = t68 * t60;
t100 = t55 * t59;
t48 = 0.2e1 * t105;
t96 = t68 * t103;
t95 = t66 * t101;
t90 = t68 * t8 - t70 * t9;
t86 = t10 * t70 + t139 * t68;
t41 = qJ(4) - t88;
t83 = t41 * t71 + t130;
t82 = -t124 - t130;
t78 = t112 * t71 + t117;
t77 = pkin(5) * t58 - qJ(6) * t119;
t75 = t69 * t113 + (pkin(5) * qJD(5) - qJD(6)) * t71;
t74 = t115 + (-t123 - t135) * qJD(3);
t62 = qJ(4) * t138;
t51 = -0.2e1 * t101;
t50 = 0.2e1 * t101;
t49 = -0.2e1 * t105;
t46 = t72 * t102;
t40 = -0.2e1 * t98;
t37 = t80 - t135;
t36 = -t58 * t68 + t107;
t35 = t59 * t68 + t60 * t69;
t34 = t103 + t109;
t33 = t120 * t69 - t102;
t31 = -t57 + t78;
t21 = -0.2e1 * t105 * t65 - 0.2e1 * t95;
t20 = -0.2e1 * t105 * t63 + 0.2e1 * t95;
t19 = -t119 * t127 - t96;
t18 = t109 * t69 + t70 * t98;
t17 = 0.4e1 * t101 * t71 - t127 * t58;
t15 = -0.2e1 * t107 * t69 + 0.2e1 * t68 * t98;
t14 = -t42 * t66 - 0.2e1 * t71 * t96;
t13 = t71 * t89 + t39;
t12 = (0.1e1 - t126) * t48;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t40, 0, t49, 0, 0, t69 * t111, t71 * t111, 0, 0, 0, 0, 0, t48, t40, t49, 0, -0.2e1 * t31 * t71 - 0.2e1 * t37 * t58, 0.2e1 * t31 * t69 - 0.2e1 * t37 * t59, -0.2e1 * t37 * t31, t20, 0.2e1 * t14, t15, t21, 0.2e1 * t18, t48, 0.2e1 * (-t121 * t39 + t6) * t69 + 0.2e1 * (qJD(3) * t10 - t120 * t39 - t29 * t70) * t71, 0.2e1 * (t122 * t39 + t5) * t69 + 0.2e1 * (-qJD(3) * t139 - t39 * t60 + t131) * t71, -0.2e1 * t85 * t58 + 0.2e1 * (qJD(5) * t86 + t5 * t70 + t6 * t68) * t71, 0.2e1 * t10 * t6 - 0.2e1 * t139 * t5 - 0.2e1 * t29 * t39, t20, t15, -0.2e1 * t14, t48, -0.2e1 * t18, t21, 0.2e1 * (-t121 * t13 - t4) * t69 + 0.2e1 * (-qJD(3) * t9 - t120 * t13 + t7 * t70) * t71, 0.2e1 * t91 * t58 + 0.2e1 * (qJD(5) * t90 - t3 * t70 - t4 * t68) * t71, 0.2e1 * (-t122 * t13 + t3) * t69 + 0.2e1 * (qJD(3) * t8 + t13 * t60 + t136) * t71, 0.2e1 * t13 * t7 + 0.2e1 * t3 * t8 + 0.2e1 * t4 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(3) * t86 - t29) * t69 + (qJD(3) * t39 - t2) * t71, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(3) * t90 + t7) * t69 + (qJD(3) * t13 - t1) * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t58, 0, -t100, t104, 0, 0, 0, -t59, t58, 0, 0, 0, t74, t100, -t104, t74 * t55, -t19, t17, -t33, t19, -t35, 0, -t131 + t46 + (-t112 * t69 + t115) * t70 + (t39 * t70 + t68 * t82) * qJD(5) (qJD(5) * t82 - t29) * t70 + (-t115 - qJD(5) * t39 + (t123 - t129) * qJD(3)) * t68, -t2, -t29 * qJ(4) + t39 * qJD(4) + t2 * t72, -t19, -t33, -t17, 0, t35, t19, t136 + t46 + (-t41 * t58 + t132) * t70 + (t13 * t70 - t68 * t83) * qJD(5), -t1 (qJD(5) * t83 - t7) * t70 + (qJD(5) * t13 + t132 + (-t41 * t69 + t129) * qJD(3)) * t68, t1 * t72 + t13 * t27 + t7 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, -t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t59, t31, 0, 0, 0, 0, 0, 0, t35, -t33, -t32, t78 + t128, 0, 0, 0, 0, 0, 0, t35, -t32, t33, t27 * t69 + t41 * t59 + t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, t62, t51, 0.2e1 * t42, 0, t50, 0, 0, 0.2e1 * qJD(4) * t68 + 0.2e1 * t114 * t70, 0.2e1 * qJD(4) * t70 - 0.2e1 * t114 * t68, 0, t62, t51, 0, -0.2e1 * t42, 0, 0, t50, 0.2e1 * t27 * t68 + 0.2e1 * t41 * t60, 0, 0.2e1 * t120 * t41 - 0.2e1 * t27 * t70, 0.2e1 * t41 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, 0, t100, 0, 0, 0, 0, 0, 0, -t33, -t35, 0, t2, 0, 0, 0, 0, 0, 0, -t33, 0, t35, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, t34, t59, t6, t5, 0, 0, 0, -t36, 0, t59, -t34, 0 (-t79 + 0.2e1 * t134) * qJD(3) + t140, -t68 * t77 + t70 * t75, -t5 + 0.2e1 * t99 + 0.2e1 * t116, -pkin(5) * t4 + qJ(6) * t3 + qJD(6) * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t36, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t36, t68 * t75 + t70 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, 0, -t60, 0, -t108, -t106, 0, 0, 0, -t120, 0, 0, t60, 0, -t108, -t30, t106, t30 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, -t60, 0, 0, 0, 0, 0, 0, 0, 0, -t120, 0, t60, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, qJ(6) * t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, -t36, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, 0, t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t11;
