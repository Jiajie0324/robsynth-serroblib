% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:45
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:44:34
% EndTime: 2019-05-05 17:44:58
% DurationCPUTime: 18.36s
% Computational Cost: add. (31122->651), mult. (62363->867), div. (0->0), fcn. (35882->8), ass. (0->467)
t771 = sin(qJ(3));
t829 = qJD(1) * t771;
t746 = qJD(5) + t829;
t743 = t746 ^ 2;
t770 = sin(qJ(5));
t773 = cos(qJ(5));
t774 = cos(qJ(3));
t828 = qJD(1) * t774;
t712 = qJD(3) * t770 + t773 * t828;
t876 = t712 ^ 2;
t677 = t876 - t743;
t714 = qJD(3) * t773 - t770 * t828;
t654 = t714 * t712;
t825 = qJD(1) * qJD(3);
t752 = t774 * t825;
t823 = qJDD(1) * t771;
t721 = t752 + t823;
t704 = qJDD(5) + t721;
t888 = t654 + t704;
t835 = t773 * t888;
t554 = t677 * t770 + t835;
t686 = t746 * t714;
t810 = t771 * t825;
t822 = qJDD(1) * t774;
t722 = -t810 + t822;
t804 = t770 * qJDD(3) + t773 * t722;
t787 = qJD(5) * t714 + t804;
t576 = -t686 + t787;
t484 = t554 * t771 - t576 * t774;
t837 = t770 * t888;
t559 = t677 * t773 - t837;
t766 = sin(pkin(9));
t767 = cos(pkin(9));
t441 = t484 * t766 - t559 * t767;
t445 = t484 * t767 + t559 * t766;
t772 = sin(qJ(1));
t775 = cos(qJ(1));
t969 = t441 * t775 + t445 * t772;
t968 = t441 * t772 - t445 * t775;
t761 = t771 ^ 2;
t777 = qJD(1) ^ 2;
t755 = t761 * t777;
t776 = qJD(3) ^ 2;
t740 = -t755 - t776;
t816 = t771 * t774 * t777;
t733 = qJDD(3) - t816;
t833 = t774 * t733;
t670 = t740 * t771 + t833;
t720 = 0.2e1 * t752 + t823;
t597 = t670 * t766 + t720 * t767;
t601 = t670 * t767 - t720 * t766;
t517 = t597 * t775 + t601 * t772;
t967 = pkin(6) * t517;
t522 = t597 * t772 - t601 * t775;
t966 = pkin(6) * t522;
t762 = t774 ^ 2;
t757 = t762 * t777;
t742 = -t757 - t776;
t732 = qJDD(3) + t816;
t846 = t732 * t771;
t669 = -t742 * t774 + t846;
t723 = -0.2e1 * t810 + t822;
t596 = t669 * t766 - t723 * t767;
t600 = t669 * t767 + t723 * t766;
t516 = t596 * t775 + t600 * t772;
t965 = pkin(6) * t516;
t519 = t596 * t772 - t600 * t775;
t964 = pkin(6) * t519;
t703 = t714 ^ 2;
t820 = t743 + t703;
t542 = t770 * t820 - t835;
t963 = pkin(2) * t542;
t962 = qJ(2) * t597;
t530 = t773 * t820 + t837;
t961 = t530 * t771;
t960 = t530 * t774;
t959 = t542 * t766;
t958 = t542 * t767;
t873 = pkin(3) + pkin(8);
t957 = t542 * t873;
t954 = t873 * t530;
t953 = pkin(1) * t597 + pkin(7) * t670;
t845 = t733 * t771;
t662 = -t740 * t774 + t845;
t952 = -pkin(1) * t662 + qJ(2) * t601;
t951 = t554 * t774 + t576 * t771;
t950 = -pkin(4) * t530 - qJ(4) * t542;
t739 = -t755 + t776;
t834 = t774 * t732;
t664 = -t739 * t771 + t834;
t620 = t664 * t766 - t767 * t823;
t624 = t664 * t767 + t766 * t823;
t949 = t620 * t775 + t624 * t772;
t948 = t620 * t772 - t624 * t775;
t947 = qJ(2) * t596;
t679 = -t703 + t743;
t889 = -t654 + t704;
t858 = t889 * t773;
t919 = t770 * t679 - t858;
t946 = t766 * t919;
t945 = t767 * t919;
t604 = t770 * t889;
t920 = -t679 * t773 - t604;
t944 = t771 * t920;
t943 = t774 * t920;
t942 = pkin(1) * t596 + pkin(7) * t669;
t660 = t742 * t771 + t834;
t941 = pkin(1) * t660 + qJ(2) * t600;
t741 = t757 - t776;
t667 = -t741 * t774 + t845;
t623 = t667 * t766 + t767 * t822;
t627 = t667 * t767 - t766 * t822;
t940 = t623 * t775 + t627 * t772;
t939 = t623 * t772 - t627 * t775;
t937 = pkin(2) * t660;
t885 = -t876 - t743;
t906 = t773 * t885 - t604;
t936 = pkin(2) * t906;
t607 = -t876 - t703;
t935 = pkin(4) * t607;
t934 = pkin(7) * t660;
t932 = qJ(4) * t607;
t792 = t773 * qJDD(3) - t770 * t722;
t634 = -qJD(5) * t712 + t792;
t685 = t712 * t746;
t580 = t634 - t685;
t931 = qJ(6) * t580;
t930 = t607 * t771;
t929 = t607 * t774;
t651 = t703 - t876;
t928 = t651 * t771;
t927 = t651 * t774;
t926 = t766 * t906;
t925 = t767 * t906;
t899 = t770 * t885 + t858;
t924 = t771 * t899;
t923 = t774 * t899;
t922 = t873 * t899;
t921 = t873 * t906;
t737 = g(1) * t775 + g(2) * t772;
t718 = -pkin(1) * t777 - t737;
t736 = g(1) * t772 - t775 * g(2);
t791 = qJDD(1) * pkin(1) + t736;
t636 = t766 * t718 - t767 * t791;
t637 = t767 * t718 + t766 * t791;
t806 = t636 * t766 + t767 * t637;
t549 = t636 * t767 - t637 * t766;
t866 = t549 * t772;
t468 = t775 * t806 + t866;
t865 = t549 * t775;
t918 = -t772 * t806 + t865;
t725 = qJDD(1) * t766 + t767 * t777;
t726 = qJDD(1) * t767 - t766 * t777;
t644 = -t725 * t772 + t775 * t726;
t763 = g(3) - qJDD(2);
t684 = qJ(2) * t725 - t763 * t767;
t794 = -qJ(2) * t726 - t763 * t766;
t917 = -pkin(6) * t644 + t684 * t772 + t775 * t794;
t916 = pkin(4) * t899 - qJ(4) * t906;
t786 = (t712 * t773 - t714 * t770) * t746;
t839 = t746 * t773;
t672 = t714 * t839;
t840 = t746 * t770;
t817 = t712 * t840;
t798 = t672 + t817;
t881 = t774 * t704 - t771 * t798;
t900 = -t766 * t786 + t767 * t881;
t902 = t766 * t881 + t767 * t786;
t915 = -t772 * t902 + t775 * t900;
t914 = t772 * t900 + t775 * t902;
t799 = -t712 * t839 - t770 * t787;
t789 = t773 * t787 - t817;
t818 = t774 * t654;
t879 = -t771 * t789 - t818;
t901 = -t766 * t799 + t767 * t879;
t903 = t766 * t879 + t767 * t799;
t913 = -t772 * t903 + t775 * t901;
t912 = t772 * t901 + t775 * t903;
t910 = pkin(2) * t662;
t909 = pkin(7) * t662;
t907 = t721 + t752;
t887 = t775 * t725 + t726 * t772;
t904 = pkin(6) * t887 + t684 * t775 - t772 * t794;
t573 = -t634 * t773 + t714 * t840;
t572 = -t634 * t770 - t672;
t790 = -t572 * t771 + t818;
t880 = -t573 * t766 + t767 * t790;
t883 = t767 * t573 + t766 * t790;
t898 = -t772 * t883 + t775 * t880;
t897 = t772 * t880 + t775 * t883;
t886 = t741 * t771 + t833;
t884 = pkin(5) * t787 - t931;
t882 = t771 * t704 + t774 * t798;
t819 = t771 * t654;
t878 = t774 * t789 - t819;
t875 = -2 * qJD(4);
t874 = 2 * qJD(6);
t872 = pkin(3) * t774;
t871 = pkin(5) * t770;
t870 = pkin(5) * t773;
t830 = t761 + t762;
t727 = t830 * qJDD(1);
t730 = t755 + t757;
t648 = t727 * t766 + t730 * t767;
t649 = t727 * t767 - t730 * t766;
t566 = t648 * t775 + t649 * t772;
t869 = pkin(6) * t566;
t868 = qJ(2) * t648;
t867 = qJ(4) * t771;
t575 = t686 + t787;
t863 = t575 * t770;
t862 = t575 * t773;
t827 = -qJD(5) + t746;
t583 = t712 * t827 + t792;
t859 = t583 * t773;
t615 = -qJDD(1) * pkin(2) - t777 * pkin(7) + t636;
t857 = t615 * t771;
t856 = t615 * t774;
t852 = t720 * t771;
t849 = t723 * t774;
t735 = pkin(4) * t829 - qJD(3) * pkin(8);
t797 = -t867 - t872;
t717 = t797 * qJD(1);
t616 = -pkin(2) * t777 + qJDD(1) * pkin(7) + t637;
t831 = -t774 * t616 + t771 * t763;
t785 = t776 * pkin(3) - t717 * t828 + t831;
t782 = qJDD(3) * qJ(4) - t785;
t780 = t722 * pkin(4) - pkin(8) * t757 + t782;
t506 = ((2 * qJD(4)) + t735) * qJD(3) + t780;
t838 = t770 * t506;
t836 = t773 * t506;
t783 = -t722 * pkin(3) - qJ(4) * t907 + t615;
t808 = pkin(3) * qJD(3) + t875;
t503 = -pkin(4) * t757 - t722 * pkin(8) + (-t735 + t808) * t829 + t783;
t588 = t771 * t616 + t774 * t763;
t788 = -qJDD(3) * pkin(3) - t776 * qJ(4) + t717 * t829 + qJDD(4) + t588;
t507 = -t732 * pkin(8) + (t721 - t752) * pkin(4) + t788;
t433 = t773 * t503 + t770 * t507;
t832 = -t770 * t503 + t773 * t507;
t826 = qJD(5) + t746;
t824 = qJD(4) * qJD(3);
t815 = pkin(1) * t648 + pkin(2) * t730 + pkin(7) * t727;
t809 = qJ(6) * t770 + pkin(4);
t807 = qJ(6) * t773 - qJ(4);
t511 = t588 * t771 - t774 * t831;
t656 = -t736 * t772 - t775 * t737;
t803 = t766 * t816;
t802 = t767 * t816;
t729 = qJDD(1) * t775 - t772 * t777;
t801 = -pkin(6) * t729 - g(3) * t772;
t800 = t774 * t572 + t819;
t796 = pkin(3) * t771 - qJ(4) * t774;
t643 = pkin(5) * t712 - qJ(6) * t714;
t795 = t704 * qJ(6) - t712 * t643 + t746 * t874 + t433;
t386 = t770 * t433 + t773 * t832;
t387 = t773 * t433 - t770 * t832;
t510 = t588 * t774 + t771 * t831;
t793 = t739 * t774 + t846;
t655 = t736 * t775 - t737 * t772;
t784 = -t704 * pkin(5) - t743 * qJ(6) + t643 * t714 + qJDD(6) - t832;
t781 = -t712 * t826 + t792;
t539 = t782 + 0.2e1 * t824;
t779 = t829 * t875 + t783;
t758 = -0.2e1 * t824;
t778 = -qJD(3) * t735 + t714 * t874 + t758 - t780 - t884;
t731 = -t755 + t757;
t728 = qJDD(1) * t772 + t775 * t777;
t715 = t796 * qJDD(1);
t707 = t830 * t825;
t688 = -pkin(6) * t728 + g(3) * t775;
t676 = t721 * t774 - t761 * t825;
t675 = -t722 * t771 - t762 * t825;
t674 = qJDD(3) * t766 + t707 * t767;
t673 = -qJDD(3) * t767 + t707 * t766;
t659 = t907 * t771;
t658 = (t722 - t810) * t774;
t641 = qJ(2) * t649;
t640 = t849 - t852;
t639 = t720 * t774 + t723 * t771;
t631 = t676 * t767 - t803;
t630 = t675 * t767 + t803;
t629 = t676 * t766 + t802;
t628 = t675 * t766 - t802;
t589 = t640 * t767 - t731 * t766;
t587 = t640 * t766 + t731 * t767;
t585 = -t673 * t772 + t674 * t775;
t584 = t673 * t775 + t674 * t772;
t579 = t634 + t685;
t578 = t714 * t827 - t804;
t577 = t714 * t826 + t804;
t574 = t770 * t583;
t567 = -t648 * t772 + t649 * t775;
t563 = pkin(6) * t567;
t560 = t856 + t909;
t555 = t857 - t934;
t545 = -t831 + t910;
t544 = t588 - t937;
t538 = pkin(1) * t763 + qJ(2) * t806;
t537 = -t629 * t772 + t631 * t775;
t536 = -t628 * t772 + t630 * t775;
t535 = t629 * t775 + t631 * t772;
t534 = t628 * t775 + t630 * t772;
t529 = t808 * t829 + t783;
t528 = qJ(4) * t730 + t788;
t527 = pkin(3) * t730 + t539;
t514 = (-t723 + t810) * pkin(3) + t779;
t513 = -pkin(3) * t810 + qJ(4) * t720 - t779;
t512 = -t587 * t772 + t589 * t775;
t509 = t587 * t775 + t589 * t772;
t502 = t578 * t773 + t574;
t501 = t770 * t781 + t862;
t500 = -t576 * t773 + t574;
t499 = -t580 * t770 - t862;
t498 = t578 * t770 - t859;
t497 = -t773 * t781 + t863;
t496 = -t576 * t770 - t859;
t495 = t580 * t773 - t863;
t494 = pkin(3) * t732 + qJ(4) * t742 - t788 + t937;
t487 = -t910 + pkin(3) * t740 + t758 + (-qJDD(3) - t733) * qJ(4) + t785;
t486 = t583 * t774 - t944;
t485 = t579 * t774 - t944;
t482 = t774 * t781 - t961;
t481 = t577 * t774 + t924;
t480 = t771 * t781 + t960;
t479 = t577 * t771 - t923;
t478 = t510 * t767 - t868;
t477 = t510 * t766 + t641;
t476 = -t580 * t774 + t961;
t475 = t575 * t774 + t924;
t474 = -t580 * t771 - t960;
t473 = t575 * t771 - t923;
t472 = -pkin(3) * t852 + t513 * t774 - t909;
t471 = -qJ(4) * t849 - t514 * t771 + t934;
t470 = t511 * t767 + t615 * t766;
t469 = t511 * t766 - t615 * t767;
t466 = -t495 * t771 - t927;
t465 = -t497 * t771 + t927;
t464 = t539 * t774 + t771 * t788;
t463 = t539 * t771 - t774 * t788;
t454 = t496 * t771 + t929;
t453 = t498 * t771 + t929;
t452 = -t496 * t774 + t930;
t451 = -t498 * t774 + t930;
t450 = -t527 * t771 + t528 * t774;
t449 = -t545 * t766 + t560 * t767 + t962;
t448 = -t544 * t766 + t555 * t767 + t947;
t447 = t486 * t767 - t946;
t446 = t485 * t767 - t946;
t443 = t486 * t766 + t945;
t442 = t485 * t766 + t945;
t439 = t482 * t767 + t959;
t438 = t481 * t767 + t926;
t437 = t482 * t766 - t958;
t436 = t481 * t766 - t925;
t435 = t545 * t767 + t560 * t766 - t952;
t434 = t544 * t767 + t555 * t766 - t941;
t431 = t450 * t767 - t715 * t766 - t868;
t430 = t450 * t766 + t715 * t767 + t641;
t429 = t476 * t767 - t959;
t428 = t475 * t767 + t926;
t427 = t476 * t766 + t958;
t426 = t475 * t766 - t925;
t424 = (pkin(5) * t746 - (2 * qJD(6))) * t714 + t506 + t884;
t423 = pkin(4) * t498 - qJ(4) * t502;
t422 = t464 * t767 + t529 * t766;
t421 = t464 * t766 - t529 * t767;
t420 = t466 * t767 - t499 * t766;
t419 = t465 * t767 - t501 * t766;
t418 = t466 * t766 + t499 * t767;
t417 = t465 * t766 + t501 * t767;
t416 = t454 * t767 + t500 * t766;
t415 = t453 * t767 + t502 * t766;
t414 = t454 * t766 - t500 * t767;
t413 = t453 * t766 - t502 * t767;
t412 = (-t577 - t686) * pkin(5) + t778;
t411 = -pkin(5) * t686 + t778 + t931;
t409 = -t743 * pkin(5) + t795;
t408 = -t469 * t772 + t470 * t775;
t407 = t469 * t775 + t470 * t772;
t406 = -pkin(2) * t463 + pkin(3) * t788 - qJ(4) * t539;
t405 = t471 * t767 - t494 * t766 - t947;
t404 = pkin(4) * t781 - t838 - t957;
t403 = t472 * t767 - t487 * t766 - t962;
t402 = pkin(4) * t575 + t836 - t921;
t401 = -pkin(7) * t463 + t529 * t796;
t400 = -qJ(6) * t607 + t784;
t399 = t471 * t766 + t494 * t767 + t941;
t398 = t472 * t766 + t487 * t767 + t952;
t397 = (-t607 - t743) * pkin(5) + t795;
t396 = pkin(4) * t496 - pkin(5) * t583 - qJ(4) * t500 - qJ(6) * t576;
t395 = -qJ(2) * t469 - (pkin(2) * t766 - pkin(7) * t767) * t510;
t394 = -t433 + t950;
t393 = t832 + t916;
t392 = -t437 * t772 + t439 * t775;
t391 = -t436 * t772 + t438 * t775;
t390 = t437 * t775 + t439 * t772;
t389 = t436 * t775 + t438 * t772;
t388 = -pkin(2) * t480 - qJ(4) * t781 - t836 - t954;
t385 = -t427 * t772 + t429 * t775;
t384 = -t426 * t772 + t428 * t775;
t383 = t427 * t775 + t429 * t772;
t382 = t426 * t775 + t428 * t772;
t381 = -pkin(2) * t473 - qJ(4) * t575 - t838 + t922;
t380 = qJ(2) * t470 - (-pkin(2) * t767 - pkin(7) * t766 - pkin(1)) * t510;
t379 = -t421 * t772 + t422 * t775;
t378 = t421 * t775 + t422 * t772;
t377 = pkin(5) * t889 + qJ(6) * t885 - t784 + t916;
t376 = pkin(5) * t703 + qJ(6) * t888 + t795 - t950;
t375 = -t773 * t412 + t577 * t809 - t921;
t374 = -t770 * t411 + (-pkin(4) - t870) * t580 + t957;
t373 = t386 * t771 + t506 * t774;
t372 = -t386 * t774 + t506 * t771;
t371 = -t414 * t772 + t416 * t775;
t370 = -t413 * t772 + t415 * t775;
t369 = t414 * t775 + t416 * t772;
t368 = t413 * t775 + t415 * t772;
t367 = t773 * t409 + t770 * t784;
t366 = t770 * t409 - t773 * t784;
t365 = -pkin(2) * t479 + t770 * t412 + t577 * t807 + t922;
t364 = -pkin(2) * t474 - t773 * t411 + (qJ(4) + t871) * t580 + t954;
t363 = -t502 * t873 - t387 + t935;
t362 = -pkin(7) * t480 + t394 * t774 - t404 * t771;
t361 = t366 * t771 + t424 * t774;
t360 = -t366 * t774 + t424 * t771;
t359 = -pkin(7) * t473 + t393 * t774 - t402 * t771;
t358 = -qJ(2) * t421 + t401 * t767 - t406 * t766;
t357 = -pkin(2) * t451 + t498 * t873 + t386 - t932;
t356 = pkin(4) * t386 - qJ(4) * t387;
t355 = -t773 * t397 - t770 * t400 - t500 * t873 + t935;
t354 = pkin(4) * t506 - t387 * t873;
t353 = t373 * t767 + t387 * t766;
t352 = t373 * t766 - t387 * t767;
t351 = -pkin(1) * t463 + qJ(2) * t422 + t401 * t766 + t406 * t767;
t350 = -pkin(2) * t452 + t770 * t397 - t773 * t400 + t496 * t873 - t932;
t349 = -pkin(7) * t451 - t363 * t771 + t423 * t774;
t348 = -pkin(7) * t479 - t375 * t771 + t377 * t774;
t347 = -pkin(7) * t474 - t374 * t771 + t376 * t774;
t346 = t361 * t767 + t367 * t766;
t345 = t361 * t766 - t367 * t767;
t344 = -pkin(7) * t452 - t355 * t771 + t396 * t774;
t343 = -qJ(2) * t437 + t362 * t767 - t388 * t766;
t342 = -qJ(2) * t426 + t359 * t767 - t381 * t766;
t341 = -pkin(2) * t372 - qJ(4) * t506 + t386 * t873;
t340 = -pkin(1) * t480 + qJ(2) * t439 + t362 * t766 + t388 * t767;
t339 = -pkin(1) * t473 + qJ(2) * t428 + t359 * t766 + t381 * t767;
t338 = pkin(4) * t366 - pkin(5) * t784 - qJ(4) * t367 + qJ(6) * t409;
t337 = -t873 * t367 + (t809 + t870) * t424;
t336 = -t352 * t772 + t353 * t775;
t335 = t352 * t775 + t353 * t772;
t334 = -qJ(2) * t436 + t348 * t767 - t365 * t766;
t333 = -qJ(2) * t427 + t347 * t767 - t364 * t766;
t332 = -pkin(1) * t479 + qJ(2) * t438 + t348 * t766 + t365 * t767;
t331 = -qJ(2) * t413 + t349 * t767 - t357 * t766;
t330 = -pkin(1) * t474 + qJ(2) * t429 + t347 * t766 + t364 * t767;
t329 = -pkin(1) * t451 + qJ(2) * t415 + t349 * t766 + t357 * t767;
t328 = -pkin(7) * t372 - t354 * t771 + t356 * t774;
t327 = -pkin(2) * t360 + t873 * t366 + (t807 - t871) * t424;
t326 = -qJ(2) * t414 + t344 * t767 - t350 * t766;
t325 = -t345 * t772 + t346 * t775;
t324 = t345 * t775 + t346 * t772;
t323 = -pkin(1) * t452 + qJ(2) * t416 + t344 * t766 + t350 * t767;
t322 = -pkin(7) * t360 - t337 * t771 + t338 * t774;
t321 = -qJ(2) * t352 + t328 * t767 - t341 * t766;
t320 = -pkin(1) * t372 + qJ(2) * t353 + t328 * t766 + t341 * t767;
t319 = -qJ(2) * t345 + t322 * t767 - t327 * t766;
t318 = -pkin(1) * t360 + qJ(2) * t346 + t322 * t766 + t327 * t767;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t728, -t729, 0, t656, 0, 0, 0, 0, 0, 0, -t887, -t644, 0, t468, 0, 0, 0, 0, 0, 0, t519, t522, t567, t408, 0, 0, 0, 0, 0, 0, t567, -t519, -t522, t379, 0, 0, 0, 0, 0, 0, t384, t392, t370, t336, 0, 0, 0, 0, 0, 0, t391, t371, t385, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t729, -t728, 0, t655, 0, 0, 0, 0, 0, 0, t644, -t887, 0, -t918, 0, 0, 0, 0, 0, 0, -t516, -t517, t566, t407, 0, 0, 0, 0, 0, 0, t566, t516, t517, t378, 0, 0, 0, 0, 0, 0, t382, t390, t368, t335, 0, 0, 0, 0, 0, 0, t389, t369, t383, t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t763, 0, 0, 0, 0, 0, 0, t660, -t662, 0, -t510, 0, 0, 0, 0, 0, 0, 0, -t660, t662, t463, 0, 0, 0, 0, 0, 0, t473, t480, t451, t372, 0, 0, 0, 0, 0, 0, t479, t452, t474, t360; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t729, 0, -t728, 0, t801, -t688, -t655, -pkin(6) * t655, 0, 0, t644, 0, -t887, 0, t917, t904, t918, pkin(6) * t918 + qJ(2) * t865 - t538 * t772, t537, t512, -t948, t536, t939, t585, -t434 * t772 + t448 * t775 + t965, -t435 * t772 + t449 * t775 + t967, -t477 * t772 + t478 * t775 - t869, -pkin(6) * t407 - t380 * t772 + t395 * t775, t585, t948, -t939, t537, t512, t536, -t430 * t772 + t431 * t775 - t869, -t399 * t772 + t405 * t775 - t965, -t398 * t772 + t403 * t775 - t967, -pkin(6) * t378 - t351 * t772 + t358 * t775, t898, -t417 * t772 + t419 * t775, -t443 * t772 + t447 * t775, t913, -t968, t915, -pkin(6) * t382 - t339 * t772 + t342 * t775, -pkin(6) * t390 - t340 * t772 + t343 * t775, -pkin(6) * t368 - t329 * t772 + t331 * t775, -pkin(6) * t335 - t320 * t772 + t321 * t775, t898, -t442 * t772 + t446 * t775, -t418 * t772 + t420 * t775, t915, t968, t913, -pkin(6) * t389 - t332 * t772 + t334 * t775, -pkin(6) * t369 - t323 * t772 + t326 * t775, -pkin(6) * t383 - t330 * t772 + t333 * t775, -pkin(6) * t324 - t318 * t772 + t319 * t775; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t728, 0, t729, 0, t688, t801, t656, pkin(6) * t656, 0, 0, t887, 0, t644, 0, -t904, t917, t468, pkin(6) * t468 + qJ(2) * t866 + t538 * t775, t535, t509, t949, t534, -t940, t584, t434 * t775 + t448 * t772 + t964, t435 * t775 + t449 * t772 + t966, t477 * t775 + t478 * t772 + t563, pkin(6) * t408 + t380 * t775 + t395 * t772, t584, -t949, t940, t535, t509, t534, t430 * t775 + t431 * t772 + t563, t399 * t775 + t405 * t772 - t964, t398 * t775 + t403 * t772 - t966, pkin(6) * t379 + t351 * t775 + t358 * t772, t897, t417 * t775 + t419 * t772, t443 * t775 + t447 * t772, t912, t969, t914, pkin(6) * t384 + t339 * t775 + t342 * t772, pkin(6) * t392 + t340 * t775 + t343 * t772, pkin(6) * t370 + t329 * t775 + t331 * t772, pkin(6) * t336 + t320 * t775 + t321 * t772, t897, t442 * t775 + t446 * t772, t418 * t775 + t420 * t772, t914, -t969, t912, pkin(6) * t391 + t332 * t775 + t334 * t772, pkin(6) * t371 + t323 * t775 + t326 * t772, pkin(6) * t385 + t330 * t775 + t333 * t772, pkin(6) * t325 + t318 * t775 + t319 * t772; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t736, t737, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t726 - t636, -pkin(1) * t725 - t637, 0, -pkin(1) * t549, t659, t639, t793, t658, t886, 0, pkin(2) * t723 - t856 - t942, -pkin(2) * t720 + t857 - t953, t511 + t815, pkin(1) * t469 - pkin(2) * t615 + pkin(7) * t511, 0, -t793, -t886, t659, t639, t658, t527 * t774 + t528 * t771 + t815, t774 * t514 + (-pkin(2) - t867) * t723 + t942, t771 * t513 + (pkin(2) + t872) * t720 + t953, pkin(1) * t421 + pkin(7) * t464 + (-pkin(2) + t797) * t529, t800, t497 * t774 + t928, t583 * t771 + t943, t878, -t951, t882, pkin(1) * t426 + pkin(7) * t475 + t393 * t771 + t402 * t774 - t936, pkin(1) * t437 + pkin(7) * t482 + t394 * t771 + t404 * t774 - t963, pkin(1) * t413 - pkin(2) * t502 + pkin(7) * t453 + t363 * t774 + t423 * t771, pkin(1) * t352 - pkin(2) * t387 + pkin(7) * t373 + t354 * t774 + t356 * t771, t800, t579 * t771 + t943, t495 * t774 - t928, t882, t951, t878, pkin(1) * t436 + pkin(7) * t481 + t375 * t774 + t377 * t771 - t936, pkin(1) * t414 - pkin(2) * t500 + pkin(7) * t454 + t355 * t774 + t396 * t771, pkin(1) * t427 + pkin(7) * t476 + t374 * t774 + t376 * t771 + t963, pkin(1) * t345 - pkin(2) * t367 + pkin(7) * t361 + t337 * t774 + t338 * t771;];
tauB_reg  = t1;
