% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRRPRR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR6_inertiaDJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:27:38
% EndTime: 2019-03-08 22:27:55
% DurationCPUTime: 6.19s
% Computational Cost: add. (7998->447), mult. (22580->822), div. (0->0), fcn. (23655->14), ass. (0->206)
t100 = sin(pkin(13));
t103 = cos(pkin(13));
t235 = pkin(10) + qJ(4);
t244 = cos(qJ(5));
t175 = t235 * t244;
t243 = sin(qJ(5));
t193 = t243 * qJD(4);
t194 = t244 * qJD(4);
t195 = qJD(5) * t243;
t87 = t235 * t103;
t253 = (-qJD(5) * t175 - t193) * t100 + t103 * t194 - t87 * t195;
t101 = sin(pkin(7));
t106 = sin(qJ(3));
t223 = t101 * t106;
t226 = cos(pkin(7));
t162 = t100 * t223 - t103 * t226;
t191 = t106 * t226;
t182 = pkin(2) * t191;
t138 = t226 * qJ(4) + t182;
t109 = cos(qJ(3));
t225 = qJ(4) * t106;
t161 = -pkin(3) * t109 - t225;
t150 = -pkin(2) + t161;
t220 = t103 * t109;
t52 = t103 * t138 + (pkin(9) * t220 + t100 * t150) * t101;
t116 = -pkin(10) * t162 + t52;
t133 = t100 * t138;
t241 = pkin(9) * t100;
t221 = t103 * t106;
t72 = t100 * t226 + t101 * t221;
t118 = t133 + t72 * pkin(10) - (t103 * (-pkin(2) - t225) + (-pkin(3) * t103 - pkin(4) - t241) * t109) * t101;
t21 = t244 * t116 - t243 * t118;
t142 = t244 * t162;
t54 = t243 * t72 + t142;
t55 = -t243 * t162 + t244 * t72;
t190 = t109 * t226;
t140 = -pkin(2) * t190 + pkin(9) * t223;
t68 = -t226 * pkin(3) + t140;
t59 = pkin(4) * t162 + t68;
t121 = t54 * pkin(5) - t55 * pkin(11) + t59;
t217 = qJD(3) * t106;
t200 = t101 * t217;
t242 = pkin(3) * t106;
t160 = -qJ(4) * t109 + t242;
t216 = qJD(3) * t109;
t199 = t101 * t216;
t179 = t103 * t199;
t187 = t226 * qJD(4);
t215 = qJD(4) * t106;
t69 = t140 * qJD(3);
t112 = t100 * (t187 - t69) - t103 * (qJD(3) * t160 - t215) * t101 + pkin(10) * t179 - pkin(4) * t200;
t188 = qJD(3) * t226;
t171 = t109 * t188;
t134 = pkin(2) * t171 + t187;
t130 = t103 * t134;
t201 = t100 * t215;
t209 = pkin(9) * t221;
t115 = t130 + (-t201 + (-t209 + (-t235 * t109 + t242) * t100) * qJD(3)) * t101;
t255 = t243 * t116 + t244 * t118;
t7 = t255 * qJD(5) + t243 * t112 - t244 * t115;
t256 = -pkin(11) * t200 - qJD(6) * t121 + t7;
t202 = t244 * t103;
t79 = t243 * t100 - t202;
t80 = t244 * t100 + t243 * t103;
t93 = -pkin(4) * t103 - pkin(3);
t143 = pkin(5) * t79 - pkin(11) * t80 + t93;
t254 = -qJD(6) * t143 - t253;
t107 = sin(qJ(2));
t110 = cos(qJ(2));
t189 = t110 * t226;
t252 = -t106 * t107 + t109 * t189;
t105 = sin(qJ(6));
t97 = t105 ^ 2;
t108 = cos(qJ(6));
t98 = t108 ^ 2;
t233 = t97 - t98;
t192 = qJD(6) * t233;
t102 = sin(pkin(6));
t218 = qJD(2) * t102;
t198 = t107 * t218;
t181 = t101 * t198;
t104 = cos(pkin(6));
t42 = t104 * t199 + (t252 * qJD(3) + (-t107 * t191 + t109 * t110) * qJD(2)) * t102;
t139 = -t100 * t42 + t103 * t181;
t141 = t106 * t189 + t107 * t109;
t62 = t102 * t141 + t104 * t223;
t71 = -t102 * t110 * t101 + t104 * t226;
t46 = -t100 * t62 + t103 * t71;
t47 = t100 * t71 + t103 * t62;
t27 = t243 * t47 - t244 * t46;
t31 = t100 * t181 + t103 * t42;
t251 = qJD(5) * t27 - t243 * t139 - t244 * t31;
t196 = qJD(5) * t244;
t73 = t100 * t195 - t103 * t196;
t74 = t80 * qJD(5);
t178 = pkin(5) * t74 + pkin(11) * t73;
t214 = qJD(6) * t105;
t174 = t235 * t243;
t65 = -t100 * t174 + t244 * t87;
t14 = -t105 * t178 + t254 * t108 + t65 * t214;
t213 = qJD(6) * t108;
t15 = t254 * t105 + t108 * t178 - t65 * t213;
t34 = -t105 * t65 + t108 * t143;
t35 = t105 * t143 + t108 * t65;
t250 = t105 * t14 - t108 * t15 + (t105 * t34 - t108 * t35) * qJD(6);
t28 = t243 * t46 + t244 * t47;
t222 = t101 * t109;
t61 = -t252 * t102 - t104 * t222;
t16 = -t105 * t28 + t108 * t61;
t17 = t105 * t61 + t108 * t28;
t41 = t104 * t200 + (t141 * qJD(3) + (t106 * t110 + t107 * t190) * qJD(2)) * t102;
t3 = -t41 * t105 + t108 * t251 - t61 * t213 + t28 * t214;
t4 = t105 * t251 + t41 * t108 - t28 * t213 - t61 * t214;
t249 = t105 * t3 - t108 * t4 + (t105 * t16 - t108 * t17) * qJD(6);
t180 = t100 * t199;
t132 = qJD(5) * t142 + t243 * t180 + t72 * t195;
t203 = pkin(4) * t100 + pkin(9);
t36 = qJD(5) * t55 + t80 * t199;
t114 = t132 * pkin(11) + t36 * pkin(5) + (t182 + (-pkin(11) * t202 + t203) * t222) * qJD(3);
t19 = -pkin(11) * t222 + t21;
t1 = -t105 * t114 + t256 * t108 + t19 * t214;
t10 = -t105 * t19 + t108 * t121;
t11 = t105 * t121 + t108 * t19;
t2 = t256 * t105 + t108 * t114 - t19 * t213;
t248 = t1 * t105 - t108 * t2 + (t10 * t105 - t108 * t11) * qJD(6);
t247 = 0.2e1 * t74;
t99 = t109 ^ 2;
t246 = 0.2e1 * t101;
t245 = 0.2e1 * qJD(3);
t12 = t28 * qJD(5) - t244 * t139 + t243 * t31;
t240 = t27 * t12;
t29 = t61 * t41;
t76 = pkin(9) * t222 + t182;
t70 = t76 * qJD(3);
t239 = t61 * t70;
t53 = t103 * t193 + t87 * t196 + (-qJD(5) * t174 + t194) * t100;
t64 = t100 * t175 + t243 * t87;
t238 = t64 * t53;
t237 = t80 * t73;
t95 = t101 ^ 2;
t236 = t95 * t99;
t123 = -t244 * t179 + t132;
t204 = t105 * t222;
t24 = -qJD(6) * t204 - t105 * t123 - t108 * t200 + t55 * t213;
t48 = t105 * t55 + t108 * t222;
t234 = -t105 * t24 - t48 * t213;
t23 = qJD(6) * t48 - t105 * t200 + t108 * t123;
t232 = t105 * t23;
t231 = t105 * t48;
t230 = t108 * t24;
t49 = t108 * t55 - t204;
t229 = t108 * t49;
t228 = t108 * t73;
t227 = t72 * t100;
t224 = t100 * t109;
t212 = 0.2e1 * t54 * t36;
t211 = t79 * t247;
t210 = -0.2e1 * pkin(5) * qJD(6);
t208 = t105 * t228;
t207 = t95 * t216;
t206 = t80 * t214;
t205 = t80 * t213;
t197 = t105 * t213;
t186 = t95 * t198;
t77 = t80 ^ 2;
t185 = t77 * t197;
t184 = t106 * t207;
t94 = t100 ^ 2;
t96 = t103 ^ 2;
t183 = 0.2e1 * (t94 + t96) * qJD(4);
t177 = pkin(5) * t73 - pkin(11) * t74;
t176 = pkin(5) * t80 + pkin(11) * t79;
t18 = pkin(5) * t222 + t255;
t8 = -t21 * qJD(5) - t244 * t112 - t243 * t115;
t6 = -pkin(5) * t200 - t8;
t172 = -t18 * t73 + t6 * t80;
t168 = t12 * t64 + t27 * t53;
t167 = t12 * t80 - t27 * t73;
t166 = t80 * t36 - t73 * t54;
t165 = t36 * t79 + t54 * t74;
t164 = t53 * t80 - t64 * t73;
t163 = t73 * t79 - t74 * t80;
t159 = t10 * t108 + t105 * t11;
t44 = -t100 * t134 + (-t103 * t215 + (t103 * t160 + t106 * t241) * qJD(3)) * t101;
t45 = t130 + (-t201 + (t100 * t160 - t209) * qJD(3)) * t101;
t157 = -t44 * t100 + t45 * t103;
t155 = t105 * t17 + t108 * t16;
t153 = t105 * t35 + t108 * t34;
t151 = t100 * t179;
t149 = -t108 * t23 - t49 * t214;
t148 = t105 * t36 + t54 * t213;
t147 = -t108 * t36 + t54 * t214;
t146 = t105 * t74 + t79 * t213;
t145 = t101 * t162;
t144 = t103 * t162;
t131 = t101 * (qJD(3) * t161 + qJD(4) * t109);
t128 = -qJD(6) * t159 - t1 * t108 - t105 * t2;
t127 = -qJD(6) * t155 - t105 * t4 - t108 * t3;
t126 = -qJD(6) * t153 - t105 * t15 - t108 * t14;
t125 = -t100 * t139 + t31 * t103;
t83 = -0.2e1 * t184;
t63 = (t203 * t222 + t182) * qJD(3);
t58 = t108 * t74 - t79 * t214;
t51 = -t133 + (-pkin(9) * t224 + t103 * t150) * t101;
t39 = t80 * t192 + t208;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t71 * t181 + 0.2e1 * t42 * t62 + 0.2e1 * t29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t139 * t46 + 0.2e1 * t47 * t31 + 0.2e1 * t29, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t251 * t28 + 0.2e1 * t240 + 0.2e1 * t29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t16 * t4 - 0.2e1 * t17 * t3 + 0.2e1 * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, -t110 * t218, 0, 0, 0, 0, 0, 0, 0, 0, -t109 * t186 + t71 * t200 - t41 * t226, t106 * t186 + t71 * t199 - t42 * t226 (t106 * t41 + t109 * t42 + (-t106 * t62 + t109 * t61) * qJD(3)) * t101, -pkin(2) * t186 + t140 * t41 + t42 * t76 - t62 * t69 + t239, 0, 0, 0, 0, 0, 0, -t139 * t222 + t41 * t162 + (t106 * t46 + t61 * t224) * t101 * qJD(3), t41 * t72 + (t109 * t31 + (-t106 * t47 + t61 * t220) * qJD(3)) * t101, -t139 * t72 - t31 * t162 + (-t100 * t47 - t103 * t46) * t199, t139 * t51 + t31 * t52 + t41 * t68 + t46 * t44 + t47 * t45 + t239, 0, 0, 0, 0, 0, 0, t36 * t61 + t41 * t54 + (t109 * t12 - t27 * t217) * t101, -t123 * t61 - t200 * t28 - t222 * t251 + t41 * t55, t12 * t55 - t123 * t27 + t251 * t54 - t28 * t36, t12 * t255 - t21 * t251 - t27 * t8 - t28 * t7 + t41 * t59 + t61 * t63, 0, 0, 0, 0, 0, 0, t12 * t48 + t16 * t36 + t24 * t27 + t4 * t54, t12 * t49 - t17 * t36 - t23 * t27 + t3 * t54, t16 * t23 - t17 * t24 + t3 * t48 - t4 * t49, -t1 * t17 + t10 * t4 - t11 * t3 + t12 * t18 + t16 * t2 + t27 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t184 (-t106 ^ 2 + t99) * t95 * t245, t171 * t246, t83, -0.2e1 * t188 * t223, 0, -0.2e1 * t95 * pkin(2) * t217 - 0.2e1 * t70 * t226, -0.2e1 * pkin(2) * t207 + 0.2e1 * t69 * t226 (t106 * t70 - t109 * t69 + (-t106 * t76 + t109 * t140) * qJD(3)) * t246, 0.2e1 * t140 * t70 - 0.2e1 * t69 * t76, 0.2e1 * t72 * t179, 0.2e1 * (-t144 - t227) * t199 (-t103 * t236 + t72 * t223) * t245, 0.2e1 * t100 * t145 * t216 (t100 * t236 - t106 * t145) * t245, t83, 0.2e1 * t70 * t162 + 0.2e1 * (-t44 * t109 + (t106 * t51 + t68 * t224) * qJD(3)) * t101, 0.2e1 * t70 * t72 + 0.2e1 * (t109 * t45 + (-t106 * t52 + t68 * t220) * qJD(3)) * t101, -0.2e1 * t44 * t72 - 0.2e1 * t45 * t162 + 0.2e1 * (-t100 * t52 - t103 * t51) * t199, 0.2e1 * t44 * t51 + 0.2e1 * t45 * t52 + 0.2e1 * t68 * t70, -0.2e1 * t55 * t123, 0.2e1 * t123 * t54 - 0.2e1 * t55 * t36 (t132 * t109 + (-t99 * t101 * t202 + t55 * t106) * qJD(3)) * t246, t212 (t109 * t36 - t54 * t217) * t246, t83, 0.2e1 * t36 * t59 + 0.2e1 * t54 * t63 + 0.2e1 * (-t109 * t8 - t217 * t255) * t101, 0.2e1 * t63 * t55 - 0.2e1 * t59 * t132 + 0.2e1 * (-t7 * t109 + (t109 * t202 * t59 - t106 * t21) * qJD(3)) * t101, -0.2e1 * t123 * t255 - 0.2e1 * t21 * t36 + 0.2e1 * t7 * t54 - 0.2e1 * t8 * t55, -0.2e1 * t21 * t7 - 0.2e1 * t255 * t8 + 0.2e1 * t59 * t63, -0.2e1 * t49 * t23, 0.2e1 * t23 * t48 - 0.2e1 * t24 * t49, -0.2e1 * t23 * t54 + 0.2e1 * t36 * t49, 0.2e1 * t48 * t24, -0.2e1 * t24 * t54 - 0.2e1 * t36 * t48, t212, 0.2e1 * t10 * t36 + 0.2e1 * t18 * t24 + 0.2e1 * t2 * t54 + 0.2e1 * t48 * t6, 0.2e1 * t1 * t54 - 0.2e1 * t11 * t36 - 0.2e1 * t18 * t23 + 0.2e1 * t49 * t6, 0.2e1 * t1 * t48 + 0.2e1 * t10 * t23 - 0.2e1 * t11 * t24 - 0.2e1 * t2 * t49, -0.2e1 * t1 * t11 + 0.2e1 * t10 * t2 + 0.2e1 * t18 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t42, 0, 0, 0, 0, 0, 0, 0, 0, -t41 * t103, t41 * t100, t125, -t41 * pkin(3) + (-t100 * t46 + t103 * t47) * qJD(4) + t125 * qJ(4), 0, 0, 0, 0, 0, 0, t41 * t79 + t61 * t74, t41 * t80 - t61 * t73, t251 * t79 - t28 * t74 + t167, -t251 * t65 + t253 * t28 + t41 * t93 + t168, 0, 0, 0, 0, 0, 0, t105 * t167 + t16 * t74 + t205 * t27 + t4 * t79, t108 * t167 - t17 * t74 - t206 * t27 + t3 * t79, t155 * t73 + t249 * t80, -t14 * t17 + t15 * t16 - t3 * t35 + t34 * t4 + t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, 0, -t200, 0, -t70, t69, 0, 0, t151 (-t94 + t96) * t199, t100 * t200, -t151, t103 * t200, 0, t100 * t131 - t103 * t70, t100 * t70 + t103 * t131 (-t144 + t227) * qJD(4) + t157, -pkin(3) * t70 + (-t100 * t51 + t103 * t52) * qJD(4) + t157 * qJ(4), -t123 * t80 - t55 * t73, t123 * t79 - t55 * t74 - t166 (t109 * t73 + t80 * t217) * t101, t165 (t109 * t74 - t79 * t217) * t101, 0, t36 * t93 + t59 * t74 + t63 * t79 + (t109 * t53 - t64 * t217) * t101, -t123 * t93 - t200 * t65 + t222 * t253 - t59 * t73 + t63 * t80, -t123 * t64 - t21 * t74 - t253 * t54 - t255 * t73 - t65 * t36 + t53 * t55 + t7 * t79 - t8 * t80, t21 * t253 + t255 * t53 + t63 * t93 - t8 * t64 - t7 * t65, -t49 * t206 + (-t23 * t80 - t49 * t73) * t108 (t105 * t49 + t108 * t48) * t73 + (t232 - t230 + (-t229 + t231) * qJD(6)) * t80, t108 * t166 - t206 * t54 - t23 * t79 + t49 * t74, t48 * t205 + (t24 * t80 - t48 * t73) * t105, -t105 * t166 - t205 * t54 - t24 * t79 - t48 * t74, t165, t10 * t74 + t105 * t172 + t15 * t54 + t18 * t205 + t2 * t79 + t24 * t64 + t34 * t36 + t48 * t53, t1 * t79 + t108 * t172 - t11 * t74 + t14 * t54 - t18 * t206 - t23 * t64 - t35 * t36 + t49 * t53, t14 * t48 - t15 * t49 + t159 * t73 + t23 * t34 - t24 * t35 + t248 * t80, -t1 * t35 + t10 * t15 - t11 * t14 + t18 * t53 + t2 * t34 + t6 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, qJ(4) * t183, -0.2e1 * t237, 0.2e1 * t163, 0, t211, 0, 0, t93 * t247, -0.2e1 * t93 * t73, -0.2e1 * t253 * t79 - 0.2e1 * t65 * t74 + 0.2e1 * t164, 0.2e1 * t253 * t65 + 0.2e1 * t238, -0.2e1 * t98 * t237 - 0.2e1 * t185, 0.2e1 * t192 * t77 + 0.4e1 * t208 * t80, -0.2e1 * t108 * t163 - 0.2e1 * t206 * t79, -0.2e1 * t97 * t237 + 0.2e1 * t185, 0.2e1 * t105 * t163 - 0.2e1 * t205 * t79, t211, 0.2e1 * t105 * t164 + 0.2e1 * t15 * t79 + 0.2e1 * t205 * t64 + 0.2e1 * t34 * t74, 0.2e1 * t108 * t164 + 0.2e1 * t14 * t79 - 0.2e1 * t206 * t64 - 0.2e1 * t35 * t74, 0.2e1 * t153 * t73 + 0.2e1 * t250 * t80, -0.2e1 * t14 * t35 + 0.2e1 * t15 * t34 + 0.2e1 * t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, t179, 0, t70, 0, 0, 0, 0, 0, 0, t36, -t123, 0, t63, 0, 0, 0, 0, 0, 0, -t147, -t148, -t149 + t234, -t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t73, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t146 (t97 + t98) * t73, -t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, t251, 0, 0, 0, 0, 0, 0, 0, 0, -t108 * t12 + t214 * t27, t105 * t12 + t213 * t27, t127, -pkin(5) * t12 + pkin(11) * t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123, 0, -t36, t200, t8, t7, 0, 0, t213 * t49 - t232, t149 + t234, t148, t214 * t48 - t230, -t147, 0, -pkin(5) * t24 - pkin(11) * t148 - t108 * t6 + t18 * t214, pkin(5) * t23 + pkin(11) * t147 + t105 * t6 + t18 * t213 (-t232 - t230 + (t229 + t231) * qJD(6)) * pkin(11) + t128, -pkin(5) * t6 + pkin(11) * t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, 0, -t74, 0, -t53, -t253, 0, 0, -t39, -0.4e1 * t80 * t197 + t233 * t73, t146, t39, t58, 0, -t108 * t53 + t177 * t105 + (t105 * t64 - t108 * t176) * qJD(6), t105 * t53 + t177 * t108 + (t105 * t176 + t108 * t64) * qJD(6), t126, -pkin(5) * t53 + pkin(11) * t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t197, -0.2e1 * t192, 0, -0.2e1 * t197, 0, 0, t105 * t210, t108 * t210, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, 0, -t24, t36, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206 - t228, 0, t105 * t73 - t205, t74, t15, t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t214, -t213, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, 0, -t214, 0, -pkin(11) * t213, pkin(11) * t214, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
