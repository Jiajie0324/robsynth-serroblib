% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6PRRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tau_reg [6x29]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRR6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR6_invdynJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:27:42
% EndTime: 2019-03-08 22:28:04
% DurationCPUTime: 11.09s
% Computational Cost: add. (8686->606), mult. (22363->895), div. (0->0), fcn. (19718->18), ass. (0->302)
t252 = sin(pkin(6));
t255 = cos(pkin(7));
t263 = cos(qJ(3));
t264 = cos(qJ(2));
t378 = t263 * t264;
t259 = sin(qJ(3));
t260 = sin(qJ(2));
t382 = t259 * t260;
t298 = -t255 * t382 + t378;
t181 = t298 * t252;
t362 = qJD(3) * t263;
t340 = t255 * t362;
t251 = sin(pkin(7));
t363 = qJD(3) * t259;
t343 = t251 * t363;
t434 = -pkin(2) * t340 + pkin(9) * t343 + qJD(1) * t181;
t309 = pkin(3) * t259 - qJ(4) * t263;
t269 = qJD(3) * t309 - qJD(4) * t259;
t388 = t252 * t260;
t347 = qJD(1) * t388;
t433 = (t269 - t347) * t251;
t432 = -qJD(4) * t255 + t434;
t250 = sin(pkin(13));
t253 = cos(pkin(13));
t402 = t432 * t250 + t433 * t253;
t401 = t433 * t250 - t432 * t253;
t257 = sin(qJ(6));
t261 = cos(qJ(6));
t354 = qJDD(2) * t255;
t236 = qJDD(3) + t354;
t216 = t253 * t236;
t356 = qJD(2) * qJD(3);
t337 = t263 * t356;
t353 = qJDD(2) * t259;
t293 = t337 + t353;
t276 = t251 * t293;
t138 = t250 * t276 - t216;
t392 = t250 * t236;
t139 = t253 * t276 + t392;
t258 = sin(qJ(5));
t262 = cos(qJ(5));
t367 = qJD(2) * t255;
t237 = qJD(3) + t367;
t368 = qJD(2) * t251;
t346 = t259 * t368;
t175 = t237 * t253 - t250 * t346;
t176 = t237 * t250 + t253 * t346;
t304 = t175 * t258 + t176 * t262;
t43 = qJD(5) * t304 + t262 * t138 + t258 * t139;
t41 = qJDD(6) + t43;
t107 = -t262 * t175 + t176 * t258;
t105 = qJD(6) + t107;
t428 = t105 ^ 2;
t431 = -t428 * t257 + t261 * t41;
t287 = (-pkin(10) * t253 * t263 + pkin(4) * t259) * t251;
t430 = -qJD(3) * t287 - t402;
t342 = t251 * t362;
t320 = t250 * t342;
t429 = -pkin(10) * t320 + t401;
t366 = qJD(2) * t263;
t345 = t251 * t366;
t226 = -qJD(5) + t345;
t427 = t107 * t226;
t205 = t250 * t258 - t262 * t253;
t390 = t251 * t263;
t279 = t205 * t390;
t152 = qJD(2) * t279;
t201 = t205 * qJD(5);
t374 = t152 - t201;
t256 = cos(pkin(6));
t370 = qJD(1) * t256;
t348 = t251 * t370;
t369 = qJD(1) * t264;
t413 = pkin(9) * t251;
t426 = qJDD(2) * t413 + (qJD(2) * t369 + qJDD(1) * t260) * t252 + qJD(3) * t348;
t380 = t260 * t263;
t381 = t259 * t264;
t300 = t255 * t380 + t381;
t180 = t300 * t252;
t341 = t255 * t363;
t375 = pkin(2) * t341 + pkin(9) * t342 - qJD(1) * t180;
t206 = t250 * t262 + t253 * t258;
t280 = t206 * t390;
t373 = -qJD(2) * t280 + t206 * qJD(5);
t82 = t261 * t226 + t257 * t304;
t425 = t304 * t82;
t84 = -t226 * t257 + t261 * t304;
t424 = t304 * t84;
t360 = qJD(5) * t262;
t361 = qJD(5) * t258;
t384 = t255 * t259;
t372 = pkin(2) * t384 + pkin(9) * t390;
t183 = qJ(4) * t255 + t372;
t310 = -pkin(3) * t263 - qJ(4) * t259;
t184 = (-pkin(2) + t310) * t251;
t112 = -t183 * t250 + t253 * t184;
t391 = t251 * t259;
t198 = t250 * t255 + t253 * t391;
t75 = -pkin(4) * t390 - pkin(10) * t198 + t112;
t113 = t253 * t183 + t250 * t184;
t196 = t250 * t391 - t253 * t255;
t86 = -pkin(10) * t196 + t113;
t423 = -t430 * t258 + t429 * t262 + t75 * t360 - t361 * t86;
t409 = t258 * t75 + t262 * t86;
t422 = qJD(5) * t409 + t429 * t258 + t430 * t262;
t421 = t226 * t304;
t412 = pkin(10) + qJ(4);
t224 = t412 * t250;
t225 = t412 * t253;
t303 = -t224 * t262 - t225 * t258;
t204 = pkin(9) * t368 + t347;
t215 = qJD(2) * pkin(2) + t252 * t369;
t114 = -t259 * t204 + t263 * (t215 * t255 + t348);
t191 = t309 * t368;
t76 = -t250 * t114 + t253 * t191;
t58 = qJD(2) * t287 + t76;
t322 = t250 * t345;
t77 = t253 * t114 + t250 * t191;
t62 = -pkin(10) * t322 + t77;
t420 = -qJD(4) * t205 + qJD(5) * t303 - t258 * t58 - t262 * t62;
t150 = -t224 * t258 + t225 * t262;
t419 = qJD(4) * t206 + qJD(5) * t150 - t258 * t62 + t262 * t58;
t417 = t255 * t378 - t382;
t142 = -t252 * t417 - t256 * t390;
t140 = t142 * t261;
t299 = t255 * t381 + t380;
t143 = t252 * t299 + t256 * t391;
t387 = t252 * t264;
t197 = -t251 * t387 + t255 * t256;
t97 = -t143 * t250 + t197 * t253;
t98 = t143 * t253 + t197 * t250;
t48 = t258 * t97 + t262 * t98;
t418 = -t257 * t48 + t140;
t376 = pkin(4) * t320 + t375;
t416 = -pkin(3) * t236 + qJDD(4);
t235 = qJDD(1) * t387;
t344 = qJD(2) * t388;
t318 = qJD(1) * t344;
t182 = qJDD(2) * pkin(2) + t235 - t318;
t355 = qJDD(1) * t256;
t336 = t251 * t355;
t273 = t182 * t384 - t204 * t363 + t215 * t340 + t259 * t336 + t263 * t426;
t39 = qJ(4) * t236 + qJD(4) * t237 + t273;
t232 = t255 * t355;
t65 = t232 + (qJD(2) * t269 + qJDD(2) * t310 - t182) * t251;
t24 = -t250 * t39 + t253 * t65;
t338 = t259 * t356;
t352 = qJDD(2) * t263;
t292 = t338 - t352;
t275 = t292 * t251;
t17 = pkin(4) * t275 - pkin(10) * t139 + t24;
t233 = t255 * t370;
t129 = t233 + (qJD(2) * t310 - t215) * t251;
t115 = t263 * t204 + t215 * t384 + t259 * t348;
t96 = qJ(4) * t237 + t115;
t51 = t253 * t129 - t250 * t96;
t37 = -pkin(4) * t345 - pkin(10) * t176 + t51;
t52 = t250 * t129 + t253 * t96;
t44 = pkin(10) * t175 + t52;
t19 = t258 * t37 + t262 * t44;
t25 = t250 * t65 + t253 * t39;
t21 = -pkin(10) * t138 + t25;
t268 = -qJD(5) * t19 + t262 * t17 - t258 * t21;
t234 = t251 * t352;
t187 = t251 * t338 + qJDD(5) - t234;
t42 = -t258 * t138 + t262 * t139 + t175 * t360 - t176 * t361;
t23 = qJD(6) * t84 - t261 * t187 + t257 * t42;
t400 = sin(pkin(12));
t331 = t400 * t264;
t254 = cos(pkin(12));
t386 = t254 * t260;
t199 = t256 * t386 + t331;
t332 = t400 * t260;
t385 = t254 * t264;
t282 = -t256 * t385 + t332;
t271 = t282 * t259;
t389 = t252 * t254;
t351 = t251 * t389;
t100 = t199 * t263 - t255 * t271 - t259 * t351;
t200 = -t256 * t332 + t385;
t283 = t256 * t331 + t386;
t333 = t252 * t400;
t316 = t251 * t333;
t102 = t200 * t263 + (-t255 * t283 + t316) * t259;
t144 = t251 * t282 - t255 * t389;
t145 = t251 * t283 + t255 * t333;
t247 = pkin(13) + qJ(5);
t244 = sin(t247);
t245 = cos(t247);
t294 = g(1) * (-t102 * t244 + t145 * t245) + g(2) * (-t100 * t244 + t144 * t245) + g(3) * (-t143 * t244 + t197 * t245);
t4 = -pkin(5) * t187 - t268;
t415 = t105 * (pkin(5) * t304 + pkin(11) * t105) + t294 + t4;
t297 = t258 * t17 + t262 * t21 + t37 * t360 - t361 * t44;
t3 = pkin(11) * t187 + t297;
t12 = -pkin(11) * t226 + t19;
t93 = -pkin(3) * t237 + qJD(4) - t114;
t66 = -pkin(4) * t175 + t93;
t28 = pkin(5) * t107 - pkin(11) * t304 + t66;
t308 = t12 * t257 - t261 * t28;
t383 = t255 * t263;
t301 = -t182 * t383 + t204 * t362 + t215 * t341 + t259 * t426 - t263 * t336;
t45 = t301 + t416;
t30 = pkin(4) * t138 + t45;
t8 = pkin(5) * t43 - pkin(11) * t42 + t30;
t1 = -t308 * qJD(6) + t257 * t8 + t261 * t3;
t411 = -pkin(5) * t343 + t422;
t408 = t105 * t82;
t407 = t105 * t84;
t358 = qJD(6) * t261;
t359 = qJD(6) * t257;
t22 = t257 * t187 - t226 * t358 + t261 * t42 - t304 * t359;
t406 = t22 * t257;
t405 = t257 * t41;
t403 = pkin(5) * t346 + t419;
t399 = t142 * t257;
t398 = t206 * t257;
t397 = t206 * t261;
t396 = t244 * t251;
t395 = t245 * t257;
t394 = t245 * t261;
t246 = t251 ^ 2;
t265 = qJD(2) ^ 2;
t393 = t246 * t265;
t379 = t260 * t265;
t377 = qJDD(1) - g(3);
t248 = t259 ^ 2;
t371 = -t263 ^ 2 + t248;
t365 = qJD(3) * t250;
t364 = qJD(3) * t253;
t357 = qJD(3) - t237;
t350 = t257 * t390;
t243 = -pkin(4) * t253 - pkin(3);
t339 = qJ(4) * t352;
t327 = t105 * t261;
t326 = t237 + t367;
t325 = t236 + t354;
t324 = t246 * t252 * t379;
t92 = pkin(4) * t322 + t115;
t321 = t251 * t344;
t130 = t262 * t196 + t198 * t258;
t131 = -t196 * t258 + t198 * t262;
t238 = pkin(9) * t391;
t186 = t238 + (-pkin(2) * t263 - pkin(3)) * t255;
t135 = t196 * pkin(4) + t186;
t46 = pkin(5) * t130 - pkin(11) * t131 + t135;
t319 = -pkin(11) * t343 - qJD(6) * t46 - t423;
t32 = -pkin(11) * t390 + t409;
t79 = -qJD(3) * t279 - qJD(5) * t130;
t80 = qJD(3) * t280 + qJD(5) * t131;
t315 = -pkin(5) * t80 + pkin(11) * t79 + qJD(6) * t32 - t376;
t314 = g(1) * t200 + g(2) * t199;
t137 = pkin(5) * t205 - pkin(11) * t206 + t243;
t312 = pkin(11) * t346 - qJD(6) * t137 - t420;
t311 = -t373 * pkin(5) + t374 * pkin(11) + qJD(6) * t150 + t92;
t6 = t12 * t261 + t257 * t28;
t18 = -t258 * t44 + t262 * t37;
t306 = -t258 * t86 + t262 * t75;
t47 = t258 * t98 - t262 * t97;
t305 = t261 * t48 + t399;
t103 = t131 * t257 + t261 * t390;
t272 = t283 * t263;
t101 = t200 * t259 + t255 * t272 - t263 * t316;
t270 = t282 * t263;
t99 = t199 * t259 + t255 * t270 + t263 * t351;
t291 = g(1) * t101 + g(2) * t99 + g(3) * t142;
t290 = -g(1) * t102 - g(2) * t100 - g(3) * t143;
t120 = t199 * t383 - t271;
t122 = t200 * t383 - t259 * t283;
t289 = g(1) * t122 + g(2) * t120 + g(3) * t180;
t121 = -t199 * t384 - t270;
t123 = -t200 * t384 - t272;
t288 = g(1) * t123 + g(2) * t121 + g(3) * t181;
t127 = -t152 * t257 - t261 * t346;
t285 = -t201 * t257 + t206 * t358 - t127;
t128 = -t152 * t261 + t257 * t346;
t284 = -t201 * t261 - t206 * t359 - t128;
t281 = t291 - t45;
t278 = -qJ(4) * t363 + (qJD(4) - t93) * t263;
t277 = -g(3) * t388 - t314;
t11 = pkin(5) * t226 - t18;
t274 = -pkin(11) * t41 + (t11 + t18) * t105;
t2 = -qJD(6) * t6 - t257 * t3 + t261 * t8;
t266 = t291 - t301;
t164 = -t251 * t215 + t233;
t141 = -t182 * t251 + t232;
t126 = t181 * t245 + t388 * t396;
t104 = t131 * t261 - t350;
t91 = t256 * t342 + (t298 * qJD(2) + qJD(3) * t417) * t252;
t90 = t256 * t343 + (qJD(2) * t300 + qJD(3) * t299) * t252;
t89 = t143 * t245 + t197 * t244;
t74 = t123 * t245 + t200 * t396;
t73 = t121 * t245 + t199 * t396;
t71 = t250 * t321 + t253 * t91;
t70 = -t250 * t91 + t253 * t321;
t56 = t102 * t245 + t145 * t244;
t54 = t100 * t245 + t144 * t244;
t35 = -qJD(6) * t350 + t131 * t358 + t257 * t79 - t261 * t343;
t34 = -qJD(6) * t103 + t257 * t343 + t261 * t79;
t31 = pkin(5) * t390 - t306;
t16 = qJD(5) * t48 + t258 * t71 - t262 * t70;
t15 = -qJD(5) * t47 + t258 * t70 + t262 * t71;
t5 = [t377, 0 (qJDD(2) * t264 - t379) * t252 (-qJDD(2) * t260 - t264 * t265) * t252, 0, 0, 0, 0, 0, -t142 * t236 + t197 * t275 - t237 * t90 - t263 * t324, -t143 * t236 + t197 * t276 - t237 * t91 + t259 * t324, t138 * t142 - t175 * t90 + (-t97 * t352 + (-t263 * t70 + t363 * t97) * qJD(2)) * t251, t139 * t142 + t176 * t90 + (t98 * t352 + (t263 * t71 - t363 * t98) * qJD(2)) * t251, -t138 * t98 - t139 * t97 + t175 * t71 - t176 * t70, t142 * t45 + t24 * t97 + t25 * t98 + t51 * t70 + t52 * t71 + t90 * t93 - g(3), 0, 0, 0, 0, 0, t107 * t90 + t142 * t43 + t16 * t226 - t187 * t47, t142 * t42 + t15 * t226 - t187 * t48 + t304 * t90, 0, 0, 0, 0, 0 (-qJD(6) * t305 - t257 * t15 + t90 * t261) * t105 + t418 * t41 + t16 * t82 + t47 * t23 -(qJD(6) * t418 + t261 * t15 + t90 * t257) * t105 - t305 * t41 + t16 * t84 + t47 * t22; 0, qJDD(2), g(1) * t283 + g(2) * t282 - g(3) * t387 + t235, -t377 * t388 + t314 (qJDD(2) * t248 + 0.2e1 * t259 * t337) * t246, 0.2e1 * (t259 * t352 - t356 * t371) * t246 (t259 * t325 + t326 * t362) * t251 (t263 * t325 - t326 * t363) * t251, t236 * t255 (pkin(2) * t383 - t238) * t236 - t301 * t255 + (-t141 * t263 + t164 * t363) * t251 - t375 * t237 + (-pkin(2) * t292 + t263 * t318) * t246 - t288, -t372 * t236 - t273 * t255 + (t141 * t259 + t164 * t362) * t251 + t434 * t237 + (-pkin(2) * t293 - t259 * t318) * t246 + t289, t186 * t138 + t45 * t196 - t375 * t175 - t288 * t253 + ((qJD(2) * t112 + t51) * t363 + t277 * t250 + (-qJD(2) * t402 - qJDD(2) * t112 + t365 * t93 - t24) * t263) * t251, t186 * t139 + t45 * t198 + t375 * t176 + t288 * t250 + ((-qJD(2) * t113 - t52) * t363 + t277 * t253 + (qJD(2) * t401 + qJDD(2) * t113 + t364 * t93 + t25) * t263) * t251, -t112 * t139 - t113 * t138 - t196 * t25 - t198 * t24 - t402 * t176 + t401 * t175 + (-t250 * t52 - t253 * t51) * t342 - t289, t25 * t113 + t24 * t112 + t45 * t186 - g(1) * (-pkin(2) * t283 + t123 * pkin(3) + t122 * qJ(4) + t200 * t413) - g(2) * (-pkin(2) * t282 + t121 * pkin(3) + t120 * qJ(4) + t199 * t413) - g(3) * (t181 * pkin(3) + t180 * qJ(4) + (pkin(2) * t264 + t260 * t413) * t252) + t375 * t93 + t401 * t52 + t402 * t51, t131 * t42 + t304 * t79, -t107 * t79 - t130 * t42 - t131 * t43 - t304 * t80, t131 * t187 - t79 * t226 + (-t263 * t42 + t304 * t363) * t251, -t130 * t187 + t80 * t226 + (-t107 * t363 + t263 * t43) * t251 (-t187 * t263 - t226 * t363) * t251, t306 * t187 + t135 * t43 + t30 * t130 + t66 * t80 - g(1) * t74 - g(2) * t73 - g(3) * t126 + (t18 * t363 - t263 * t268) * t251 + t422 * t226 + t376 * t107, -t409 * t187 + t135 * t42 + t30 * t131 + t66 * t79 + t288 * t244 + (-t19 * t363 + t245 * t277 + t263 * t297) * t251 + t423 * t226 + t376 * t304, t104 * t22 + t34 * t84, -t103 * t22 - t104 * t23 - t34 * t82 - t35 * t84, t104 * t41 + t105 * t34 + t130 * t22 + t80 * t84, -t103 * t41 - t105 * t35 - t130 * t23 - t80 * t82, t105 * t80 + t130 * t41 (-t257 * t32 + t261 * t46) * t41 + t2 * t130 - t308 * t80 + t31 * t23 + t4 * t103 + t11 * t35 - g(1) * (t122 * t257 + t261 * t74) - g(2) * (t120 * t257 + t261 * t73) - g(3) * (t126 * t261 + t180 * t257) + t411 * t82 + (t257 * t319 - t261 * t315) * t105 -(t257 * t46 + t261 * t32) * t41 - t1 * t130 - t6 * t80 + t31 * t22 + t4 * t104 + t11 * t34 - g(1) * (t122 * t261 - t257 * t74) - g(2) * (t120 * t261 - t257 * t73) - g(3) * (-t126 * t257 + t180 * t261) + t411 * t84 + (t257 * t315 + t261 * t319) * t105; 0, 0, 0, 0, -t259 * t263 * t393, t371 * t393 (t357 * t366 + t353) * t251, -t346 * t357 + t234, t236, t115 * t237 - t164 * t346 + t266, t114 * t237 - t164 * t345 - t273 - t290, -pkin(3) * t138 + t115 * t175 + t281 * t253 + (t250 * t339 + (t250 * t278 - t259 * t51 + t263 * t76) * qJD(2)) * t251, -pkin(3) * t139 - t115 * t176 - t281 * t250 + (t253 * t339 + (t253 * t278 + t259 * t52 - t263 * t77) * qJD(2)) * t251, -t175 * t77 + t176 * t76 + (-qJ(4) * t138 + qJD(4) * t175 + t345 * t51 + t25) * t253 + (qJ(4) * t139 + qJD(4) * t176 + t345 * t52 - t24) * t250 + t290, -t93 * t115 - t51 * t76 - t52 * t77 + (-t250 * t51 + t253 * t52) * qJD(4) + t281 * pkin(3) + (-t24 * t250 + t25 * t253 + t290) * qJ(4), t42 * t206 + t304 * t374, -t107 * t374 - t205 * t42 - t206 * t43 - t304 * t373, t206 * t187 - t226 * t374 - t304 * t346, t107 * t346 - t205 * t187 + t226 * t373, t226 * t346, -t92 * t107 - t18 * t346 + t187 * t303 + t30 * t205 + t226 * t419 + t243 * t43 + t291 * t245 + t373 * t66, -t150 * t187 + t19 * t346 + t30 * t206 + t226 * t420 + t243 * t42 - t291 * t244 - t92 * t304 + t374 * t66, t22 * t397 + t284 * t84, t127 * t84 + t128 * t82 - (-t257 * t84 - t261 * t82) * t201 + (-t406 - t23 * t261 + (t257 * t82 - t261 * t84) * qJD(6)) * t206, t105 * t284 + t205 * t22 + t373 * t84 + t397 * t41, -t105 * t285 - t205 * t23 - t373 * t82 - t398 * t41, t105 * t373 + t41 * t205 (t137 * t261 - t150 * t257) * t41 + t2 * t205 - t303 * t23 + t4 * t398 - g(1) * (-t101 * t394 + t102 * t257) - g(2) * (t100 * t257 - t394 * t99) - g(3) * (-t142 * t394 + t143 * t257) + t403 * t82 - t373 * t308 + (t257 * t312 - t261 * t311) * t105 + t285 * t11 -(t137 * t257 + t150 * t261) * t41 - t1 * t205 - t303 * t22 + t4 * t397 - g(1) * (t101 * t395 + t102 * t261) - g(2) * (t100 * t261 + t395 * t99) - g(3) * (t142 * t395 + t143 * t261) + t403 * t84 - t373 * t6 + (t257 * t311 + t261 * t312) * t105 + t284 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t216 + (t250 * t353 + (-t176 + t365) * t366) * t251, t392 + (t253 * t353 + (-t175 + t364) * t366) * t251, -t175 ^ 2 - t176 ^ 2, -t175 * t52 + t176 * t51 - t266 + t416, 0, 0, 0, 0, 0, t43 - t421, t42 + t427, 0, 0, 0, 0, 0, -t425 + t431, -t261 * t428 - t405 - t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304 * t107, -t107 ^ 2 + t304 ^ 2, t42 - t427, -t43 - t421, t187, -t19 * t226 - t304 * t66 + t268 - t294, g(1) * t56 + g(2) * t54 + g(3) * t89 + t107 * t66 - t18 * t226 - t297, t327 * t84 + t406 (t22 - t408) * t261 + (-t23 - t407) * t257, t105 * t327 + t405 - t424, t425 + t431, -t105 * t304, -pkin(5) * t23 - t19 * t82 + t274 * t257 - t261 * t415 + t304 * t308, -pkin(5) * t22 - t19 * t84 + t257 * t415 + t274 * t261 + t6 * t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84 * t82, -t82 ^ 2 + t84 ^ 2, t22 + t408, -t23 + t407, t41, t6 * t105 - t11 * t84 - g(1) * (t101 * t261 - t257 * t56) - g(2) * (-t257 * t54 + t261 * t99) - g(3) * (-t257 * t89 + t140) + t2, -t308 * t105 + t11 * t82 - g(1) * (-t101 * t257 - t261 * t56) - g(2) * (-t257 * t99 - t261 * t54) - g(3) * (-t261 * t89 - t399) - t1;];
tau_reg  = t5;
