% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 05:48
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 05:45:07
% EndTime: 2019-05-05 05:46:29
% DurationCPUTime: 78.92s
% Computational Cost: add. (740834->1161), mult. (1619694->1947), div. (0->0), fcn. (1335400->16), ass. (0->850)
t1126 = sin(qJ(6));
t1124 = cos(pkin(7));
t1111 = qJD(2) * t1124 + qJD(3);
t1118 = sin(pkin(13));
t1122 = cos(pkin(13));
t1120 = sin(pkin(7));
t1128 = sin(qJ(3));
t1293 = t1120 * t1128;
t1277 = qJD(2) * t1293;
t1075 = t1111 * t1122 - t1118 * t1277;
t1076 = t1111 * t1118 + t1122 * t1277;
t1127 = sin(qJ(5));
t1131 = cos(qJ(5));
t1030 = t1075 * t1127 + t1076 * t1131;
t1283 = qJDD(2) * t1128;
t1132 = cos(qJ(3));
t1310 = qJD(2) * t1132;
t1082 = (qJD(3) * t1310 + t1283) * t1120;
t1110 = qJDD(2) * t1124 + qJDD(3);
t1049 = t1082 * t1122 + t1118 * t1110;
t1265 = t1082 * t1118 - t1122 * t1110;
t1266 = t1049 * t1127 + t1131 * t1265;
t943 = -qJD(5) * t1030 - t1266;
t1148 = qJDD(6) - t943;
t1292 = t1120 * t1132;
t1276 = qJD(2) * t1292;
t1104 = -qJD(5) + t1276;
t1130 = cos(qJ(6));
t997 = t1030 * t1126 + t1130 * t1104;
t999 = t1030 * t1130 - t1104 * t1126;
t929 = t999 * t997;
t1343 = t1148 - t929;
t1348 = t1126 * t1343;
t1347 = t1130 * t1343;
t1129 = sin(qJ(2));
t1133 = cos(qJ(2));
t1125 = cos(pkin(6));
t1121 = sin(pkin(6));
t1326 = g(3) - qJDD(1);
t1268 = t1121 * t1326;
t1123 = cos(pkin(12));
t1113 = t1123 * g(2);
t1119 = sin(pkin(12));
t1269 = g(1) * t1119 - t1113;
t1143 = t1125 * t1269 - t1268;
t1264 = g(1) * t1123 + g(2) * t1119;
t1038 = -t1129 * t1264 - t1133 * t1143;
t1134 = qJD(2) ^ 2;
t1327 = pkin(9) * t1120;
t1142 = qJDD(2) * pkin(2) + t1134 * t1327 - t1038;
t1095 = t1121 * t1269;
t1259 = t1125 * t1326 + t1095;
t1346 = -t1120 * t1259 + t1124 * t1142;
t1028 = -t1131 * t1075 + t1076 * t1127;
t1016 = t1028 * t1104;
t1146 = qJD(5) * t1028 - t1049 * t1131 + t1127 * t1265;
t1345 = t1146 - t1016;
t1285 = qJDD(2) * t1120;
t1083 = -qJD(3) * t1277 + t1132 * t1285;
t1078 = -qJDD(5) + t1083;
t884 = -t997 * qJD(6) - t1126 * t1078 - t1130 * t1146;
t1025 = qJD(6) + t1028;
t952 = t1025 * t997;
t841 = -t952 + t884;
t1039 = t1129 * t1143 - t1133 * t1264;
t979 = t1038 * t1129 + t1039 * t1133;
t1344 = t979 * t1121;
t1115 = t1120 ^ 2;
t1294 = t1115 * t1134;
t1303 = t1075 * t1076;
t1149 = -t1083 + t1303;
t1342 = t1118 * t1149;
t1341 = t1119 * t1326;
t1340 = t1122 * t1149;
t1339 = t1123 * t1326;
t1305 = t1028 * t1030;
t1145 = -t1078 - t1305;
t1338 = t1127 * t1145;
t1178 = t1129 * t1259;
t1337 = t1131 * t1145;
t1177 = t1133 * t1259;
t1060 = t1075 * t1276;
t1012 = -t1049 - t1060;
t1061 = t1076 * t1276;
t1008 = t1061 + t1265;
t1093 = t1111 * t1277;
t1055 = t1083 - t1093;
t1094 = t1111 * t1276;
t1052 = t1094 + t1082;
t1267 = t1130 * t1078 - t1126 * t1146;
t838 = (qJD(6) - t1025) * t999 + t1267;
t907 = (qJD(5) + t1104) * t1030 + t1266;
t1063 = -t1119 * t1269 - t1123 * t1264;
t1032 = -t1134 * pkin(2) + pkin(9) * t1285 + t1039;
t931 = t1132 * t1032 + t1128 * t1346;
t995 = t997 ^ 2;
t996 = t999 ^ 2;
t1023 = t1025 ^ 2;
t1026 = t1028 ^ 2;
t1027 = t1030 ^ 2;
t1335 = t1075 ^ 2;
t1072 = t1076 ^ 2;
t1334 = t1104 ^ 2;
t1333 = t1111 ^ 2;
t1332 = 2 * qJD(4);
t1331 = pkin(3) * t1128;
t1330 = pkin(3) * t1132;
t1329 = pkin(5) * t1127;
t1328 = pkin(8) * t1125;
t1263 = -qJ(4) * t1128 - t1330;
t1311 = qJD(2) * t1120;
t1079 = t1263 * t1311;
t1138 = t1110 * qJ(4) + t1079 * t1276 + t931;
t1137 = -pkin(3) * t1333 + t1138;
t986 = t1120 * t1142 + t1124 * t1259;
t1140 = -qJ(4) * t1052 - t986;
t1139 = -pkin(3) * t1055 + t1140;
t1282 = t1076 * t1332;
t827 = t1118 * t1137 - t1122 * t1139 + t1282;
t1136 = pkin(4) * t1149 + pkin(10) * t1012 - t827;
t1050 = -pkin(4) * t1276 - pkin(10) * t1076;
t828 = t1075 * t1332 + t1118 * t1139 + t1122 * t1137;
t793 = -pkin(4) * t1335 - pkin(10) * t1265 + t1050 * t1276 + t828;
t703 = t1127 * t1136 + t1131 * t793;
t958 = pkin(5) * t1028 - pkin(11) * t1030;
t686 = -pkin(5) * t1334 - pkin(11) * t1078 - t1028 * t958 + t703;
t1286 = t1346 * t1132;
t914 = qJDD(4) - t1110 * pkin(3) - t1333 * qJ(4) + (t1079 * t1311 + t1032) * t1128 - t1286;
t852 = pkin(4) * t1265 - t1335 * pkin(10) + t1050 * t1076 + t914;
t754 = t1345 * pkin(11) + (-t1030 * t1104 - t943) * pkin(5) + t852;
t630 = t1126 * t754 + t1130 * t686;
t702 = t1127 * t793 - t1131 * t1136;
t621 = t1127 * t703 - t1131 * t702;
t1325 = t1118 * t621;
t1324 = t1118 * t914;
t1323 = t1122 * t621;
t1322 = t1122 * t914;
t685 = t1078 * pkin(5) - pkin(11) * t1334 + t1030 * t958 + t702;
t1321 = t1126 * t685;
t868 = t1148 + t929;
t1320 = t1126 * t868;
t1319 = t1127 * t852;
t949 = t1078 - t1305;
t1318 = t1127 * t949;
t1317 = t1128 * t986;
t1316 = t1130 * t685;
t1315 = t1130 * t868;
t1314 = t1131 * t852;
t1313 = t1131 * t949;
t1312 = t1132 * t986;
t1013 = t1083 + t1303;
t1309 = t1013 * t1118;
t1308 = t1013 * t1122;
t1307 = t1025 * t1126;
t1306 = t1025 * t1130;
t1116 = t1128 ^ 2;
t1117 = t1132 ^ 2;
t1278 = t1111 * t1311;
t1059 = (t1116 + t1117) * t1278;
t1304 = t1059 * t1129;
t1290 = t1128 * t1132;
t1270 = t1115 * t1290;
t1103 = t1134 * t1270;
t1080 = -t1103 + t1110;
t1302 = t1080 * t1128;
t1301 = t1080 * t1132;
t1081 = t1103 + t1110;
t1300 = t1081 * t1128;
t1299 = t1081 * t1132;
t1298 = t1083 * t1128;
t1297 = t1104 * t1127;
t1296 = t1104 * t1131;
t1295 = t1120 * t1294;
t1291 = t1120 * t1133;
t1284 = qJDD(2) * t1121;
t1281 = t1127 * t929;
t1280 = t1131 * t929;
t1279 = -pkin(5) * t1131 - pkin(4);
t1275 = t1128 * t1305;
t1274 = t1132 * t1305;
t1273 = t1128 * t1303;
t1272 = t1132 * t1303;
t1271 = t1116 * t1294;
t745 = t1118 * t827 + t1122 * t828;
t629 = t1126 * t686 - t1130 * t754;
t622 = t1127 * t702 + t1131 * t703;
t1071 = -t1271 - t1333;
t1031 = -t1071 * t1128 - t1301;
t1262 = pkin(9) * t1031 - t1317;
t1109 = t1117 * t1294;
t1086 = -t1109 - t1333;
t1037 = t1086 * t1132 - t1300;
t1261 = pkin(9) * t1037 + t1312;
t1260 = g(2) * t1119 ^ 2 + t1113 * t1123;
t744 = t1118 * t828 - t1122 * t827;
t584 = t1126 * t630 - t1130 * t629;
t585 = t1126 * t629 + t1130 * t630;
t553 = t1127 * t585 - t1131 * t685;
t554 = t1127 * t685 + t1131 * t585;
t509 = -t1118 * t553 + t1122 * t554;
t1258 = t1128 * t509 - t1132 * t584;
t576 = t1122 * t622 - t1325;
t1257 = t1128 * t576 - t1132 * t852;
t842 = -t952 - t884;
t748 = -t1126 * t842 - t1130 * t838;
t889 = t995 + t996;
t712 = t1127 * t748 + t1131 * t889;
t713 = -t1127 * t889 + t1131 * t748;
t626 = -t1118 * t712 + t1122 * t713;
t746 = -t1126 * t838 + t1130 * t842;
t1256 = t1128 * t626 - t1132 * t746;
t840 = (-qJD(6) - t1025) * t999 - t1267;
t749 = -t1126 * t841 + t1130 * t840;
t928 = -t996 + t995;
t722 = t1127 * t749 + t1131 * t928;
t723 = -t1127 * t928 + t1131 * t749;
t639 = -t1118 * t722 + t1122 * t723;
t747 = -t1126 * t840 - t1130 * t841;
t1255 = t1128 * t639 + t1132 * t747;
t905 = -t1023 - t995;
t785 = t1130 * t905 - t1348;
t724 = t1127 * t785 + t1131 * t840;
t725 = -t1127 * t840 + t1131 * t785;
t647 = -t1118 * t724 + t1122 * t725;
t784 = t1126 * t905 + t1347;
t1254 = t1128 * t647 - t1132 * t784;
t917 = -t996 - t1023;
t795 = -t1126 * t917 - t1315;
t726 = t1127 * t795 - t1131 * t841;
t727 = t1127 * t841 + t1131 * t795;
t652 = -t1118 * t726 + t1122 * t727;
t794 = t1130 * t917 - t1320;
t1253 = t1128 * t652 - t1132 * t794;
t948 = -t996 + t1023;
t807 = -t1126 * t948 + t1347;
t738 = t1127 * t807 + t1131 * t842;
t740 = -t1127 * t842 + t1131 * t807;
t663 = -t1118 * t738 + t1122 * t740;
t805 = -t1130 * t948 - t1348;
t1252 = t1128 * t663 + t1132 * t805;
t947 = t995 - t1023;
t808 = t1130 * t947 - t1320;
t739 = t1127 * t808 + t1131 * t838;
t741 = -t1127 * t838 + t1131 * t808;
t664 = -t1118 * t739 + t1122 * t741;
t806 = -t1126 * t947 - t1315;
t1251 = t1128 * t664 + t1132 * t806;
t883 = -qJD(6) * t999 - t1267;
t830 = -t1126 * t883 + t1306 * t997;
t774 = t1127 * t830 + t1280;
t776 = t1131 * t830 - t1281;
t695 = -t1118 * t774 + t1122 * t776;
t829 = -t1130 * t883 - t1307 * t997;
t1250 = t1128 * t695 + t1132 * t829;
t832 = t1130 * t884 - t1307 * t999;
t775 = t1127 * t832 - t1280;
t777 = t1131 * t832 + t1281;
t696 = -t1118 * t775 + t1122 * t777;
t831 = -t1126 * t884 - t1306 * t999;
t1249 = t1128 * t696 + t1132 * t831;
t873 = (t1126 * t999 - t1130 * t997) * t1025;
t813 = t1127 * t873 - t1131 * t1148;
t814 = t1127 * t1148 + t1131 * t873;
t729 = -t1118 * t813 + t1122 * t814;
t872 = (t1126 * t997 + t1130 * t999) * t1025;
t1248 = t1128 * t729 + t1132 * t872;
t911 = t1016 + t1146;
t815 = -t1127 * t907 + t1131 * t911;
t817 = -t1127 * t911 - t1131 * t907;
t732 = -t1118 * t815 + t1122 * t817;
t925 = -t1026 - t1027;
t1247 = t1128 * t732 - t1132 * t925;
t906 = (qJD(5) - t1104) * t1030 + t1266;
t816 = -t1127 * t906 - t1131 * t1345;
t818 = t1127 * t1345 - t1131 * t906;
t733 = -t1118 * t816 + t1122 * t818;
t959 = -t1027 + t1026;
t1246 = t1128 * t733 + t1132 * t959;
t1245 = t1128 * t745 - t1132 * t914;
t957 = -t1334 - t1026;
t876 = t1127 * t957 + t1337;
t877 = t1131 * t957 - t1338;
t773 = -t1118 * t876 + t1122 * t877;
t1244 = t1128 * t773 - t1132 * t906;
t987 = -t1027 - t1334;
t890 = t1131 * t987 + t1318;
t891 = -t1127 * t987 + t1313;
t798 = -t1118 * t890 + t1122 * t891;
t1243 = t1128 * t798 + t1132 * t1345;
t1007 = -t1027 + t1334;
t901 = t1007 * t1131 + t1338;
t903 = -t1007 * t1127 + t1337;
t811 = -t1118 * t901 + t1122 * t903;
t1242 = t1128 * t811 + t1132 * t911;
t1006 = t1026 - t1334;
t902 = t1006 * t1127 - t1313;
t904 = t1006 * t1131 + t1318;
t812 = -t1118 * t902 + t1122 * t904;
t1241 = t1128 * t812 + t1132 * t907;
t930 = t1032 * t1128 - t1286;
t1240 = t1128 * t931 - t1132 * t930;
t863 = t1128 * t930 + t1132 * t931;
t508 = t1118 * t554 + t1122 * t553;
t476 = -t1120 * t508 + t1124 * t1258;
t495 = t1128 * t584 + t1132 * t509;
t1239 = t1129 * t495 + t1133 * t476;
t575 = t1118 * t622 + t1323;
t517 = -t1120 * t575 + t1124 * t1257;
t572 = t1128 * t852 + t1132 * t576;
t1238 = t1129 * t572 + t1133 * t517;
t625 = t1118 * t713 + t1122 * t712;
t564 = -t1120 * t625 + t1124 * t1256;
t601 = t1128 * t746 + t1132 * t626;
t1237 = t1129 * t601 + t1133 * t564;
t638 = t1118 * t723 + t1122 * t722;
t574 = -t1120 * t638 + t1124 * t1255;
t605 = -t1128 * t747 + t1132 * t639;
t1236 = t1129 * t605 + t1133 * t574;
t646 = t1118 * t725 + t1122 * t724;
t578 = -t1120 * t646 + t1124 * t1254;
t616 = t1128 * t784 + t1132 * t647;
t1235 = t1129 * t616 + t1133 * t578;
t651 = t1118 * t727 + t1122 * t726;
t583 = -t1120 * t651 + t1124 * t1253;
t617 = t1128 * t794 + t1132 * t652;
t1234 = t1129 * t617 + t1133 * t583;
t661 = t1118 * t740 + t1122 * t738;
t588 = -t1120 * t661 + t1124 * t1252;
t619 = -t1128 * t805 + t1132 * t663;
t1233 = t1129 * t619 + t1133 * t588;
t662 = t1118 * t741 + t1122 * t739;
t589 = -t1120 * t662 + t1124 * t1251;
t620 = -t1128 * t806 + t1132 * t664;
t1232 = t1129 * t620 + t1133 * t589;
t693 = t1118 * t776 + t1122 * t774;
t608 = -t1120 * t693 + t1124 * t1250;
t674 = -t1128 * t829 + t1132 * t695;
t1231 = t1129 * t674 + t1133 * t608;
t694 = t1118 * t777 + t1122 * t775;
t609 = -t1120 * t694 + t1124 * t1249;
t675 = -t1128 * t831 + t1132 * t696;
t1230 = t1129 * t675 + t1133 * t609;
t728 = t1118 * t814 + t1122 * t813;
t628 = -t1120 * t728 + t1124 * t1248;
t688 = -t1128 * t872 + t1132 * t729;
t1229 = t1129 * t688 + t1133 * t628;
t730 = t1118 * t817 + t1122 * t815;
t634 = -t1120 * t730 + t1124 * t1247;
t704 = t1128 * t925 + t1132 * t732;
t1228 = t1129 * t704 + t1133 * t634;
t731 = t1118 * t818 + t1122 * t816;
t642 = -t1120 * t731 + t1124 * t1246;
t716 = -t1128 * t959 + t1132 * t733;
t1227 = t1129 * t716 + t1133 * t642;
t649 = -t1120 * t744 + t1124 * t1245;
t714 = t1128 * t914 + t1132 * t745;
t1226 = t1129 * t714 + t1133 * t649;
t772 = t1118 * t877 + t1122 * t876;
t681 = -t1120 * t772 + t1124 * t1244;
t750 = t1128 * t906 + t1132 * t773;
t1225 = t1129 * t750 + t1133 * t681;
t797 = t1118 * t891 + t1122 * t890;
t690 = -t1120 * t797 + t1124 * t1243;
t758 = -t1128 * t1345 + t1132 * t798;
t1224 = t1129 * t758 + t1133 * t690;
t809 = t1118 * t903 + t1122 * t901;
t699 = -t1120 * t809 + t1124 * t1242;
t759 = -t1128 * t911 + t1132 * t811;
t1223 = t1129 * t759 + t1133 * t699;
t810 = t1118 * t904 + t1122 * t902;
t700 = -t1120 * t810 + t1124 * t1241;
t760 = -t1128 * t907 + t1132 * t812;
t1222 = t1129 * t760 + t1133 * t700;
t896 = -t1028 * t1297 + t1131 * t943;
t897 = -t1028 * t1296 - t1127 * t943;
t803 = -t1118 * t896 + t1122 * t897;
t1183 = t1128 * t803 + t1274;
t801 = t1118 * t897 + t1122 * t896;
t710 = -t1120 * t801 + t1124 * t1183;
t769 = t1132 * t803 - t1275;
t1221 = t1129 * t769 + t1133 * t710;
t898 = -t1030 * t1296 - t1127 * t1146;
t899 = t1030 * t1297 - t1131 * t1146;
t804 = -t1118 * t898 + t1122 * t899;
t1182 = t1128 * t804 - t1274;
t802 = t1118 * t899 + t1122 * t898;
t711 = -t1120 * t802 + t1124 * t1182;
t770 = t1132 * t804 + t1275;
t1220 = t1129 * t770 + t1133 * t711;
t940 = (t1028 * t1127 + t1030 * t1131) * t1104;
t941 = (t1028 * t1131 - t1030 * t1127) * t1104;
t866 = -t1118 * t940 + t1122 * t941;
t1196 = t1078 * t1132 + t1128 * t866;
t865 = t1118 * t941 + t1122 * t940;
t762 = -t1120 * t865 + t1124 * t1196;
t851 = -t1078 * t1128 + t1132 * t866;
t1219 = t1129 * t851 + t1133 * t762;
t825 = t1120 * t986 + t1124 * t1240;
t1218 = t1129 * t863 + t1133 * t825;
t1000 = t1072 + t1335;
t934 = -t1008 * t1122 - t1012 * t1118;
t1206 = t1000 * t1132 + t1128 * t934;
t932 = -t1008 * t1118 + t1012 * t1122;
t834 = -t1120 * t932 + t1124 * t1206;
t887 = -t1000 * t1128 + t1132 * t934;
t1217 = t1129 * t887 + t1133 * t834;
t1034 = -t1072 + t1335;
t1010 = t1061 - t1265;
t1011 = t1049 - t1060;
t935 = t1010 * t1122 - t1011 * t1118;
t1200 = t1034 * t1132 + t1128 * t935;
t933 = t1010 * t1118 + t1011 * t1122;
t845 = -t1120 * t933 + t1124 * t1200;
t912 = -t1034 * t1128 + t1132 * t935;
t1216 = t1129 * t912 + t1133 * t845;
t1024 = -t1109 - t1335;
t946 = t1024 * t1122 - t1342;
t1204 = t1010 * t1132 + t1128 * t946;
t945 = t1024 * t1118 + t1340;
t849 = -t1120 * t945 + t1124 * t1204;
t900 = -t1010 * t1128 + t1132 * t946;
t1215 = t1129 * t900 + t1133 * t849;
t1058 = -t1072 - t1109;
t965 = -t1058 * t1118 + t1308;
t1203 = -t1011 * t1132 + t1128 * t965;
t962 = t1058 * t1122 + t1309;
t860 = -t1120 * t962 + t1124 * t1203;
t918 = t1011 * t1128 + t1132 * t965;
t1214 = t1129 * t918 + t1133 * t860;
t1057 = -t1072 + t1109;
t966 = -t1057 * t1118 + t1340;
t1202 = t1012 * t1132 + t1128 * t966;
t963 = t1057 * t1122 + t1342;
t861 = -t1120 * t963 + t1124 * t1202;
t919 = -t1012 * t1128 + t1132 * t966;
t1213 = t1129 * t919 + t1133 * t861;
t1056 = -t1109 + t1335;
t967 = t1056 * t1122 + t1309;
t1205 = t1008 * t1132 + t1128 * t967;
t964 = t1056 * t1118 - t1308;
t862 = -t1120 * t964 + t1124 * t1205;
t920 = -t1008 * t1128 + t1132 * t967;
t1212 = t1129 * t920 + t1133 * t862;
t992 = t1060 * t1122 + t1118 * t1265;
t1181 = t1128 * t992 - t1272;
t991 = t1060 * t1118 - t1122 * t1265;
t894 = -t1120 * t991 + t1124 * t1181;
t953 = t1132 * t992 + t1273;
t1211 = t1129 * t953 + t1133 * t894;
t994 = t1049 * t1122 + t1061 * t1118;
t1180 = t1128 * t994 + t1272;
t993 = t1049 * t1118 - t1061 * t1122;
t895 = -t1120 * t993 + t1124 * t1180;
t954 = t1132 * t994 - t1273;
t1210 = t1129 * t954 + t1133 * t895;
t1004 = (-t1075 * t1118 + t1076 * t1122) * t1276;
t1005 = (-t1075 * t1122 - t1076 * t1118) * t1276;
t1069 = t1124 * t1132 * t1083;
t922 = t1005 * t1124 * t1128 - t1004 * t1120 + t1069;
t975 = t1005 * t1132 - t1298;
t1209 = t1129 * t975 + t1133 * t922;
t1092 = -t1109 - t1271;
t1053 = -t1094 + t1082;
t1054 = t1083 + t1093;
t1191 = -t1053 * t1132 + t1054 * t1128;
t972 = -t1120 * t1092 + t1124 * t1191;
t988 = t1053 * t1128 + t1054 * t1132;
t1208 = t1129 * t988 + t1133 * t972;
t1091 = -t1109 + t1271;
t1192 = t1052 * t1132 + t1055 * t1128;
t973 = -t1120 * t1091 + t1124 * t1192;
t989 = -t1052 * t1128 + t1055 * t1132;
t1207 = t1129 * t989 + t1133 * t973;
t1051 = (t1283 + (qJD(3) + t1111) * t1310) * t1120;
t1190 = t1071 * t1132 - t1302;
t977 = -t1120 * t1051 + t1124 * t1190;
t1201 = t1031 * t1129 + t1133 * t977;
t1084 = -t1271 + t1333;
t1035 = -t1084 * t1128 + t1299;
t1188 = t1084 * t1132 + t1300;
t983 = -t1120 * t1053 + t1124 * t1188;
t1199 = t1035 * t1129 + t1133 * t983;
t1085 = t1109 - t1333;
t1036 = t1085 * t1132 - t1302;
t1189 = t1085 * t1128 + t1301;
t984 = -t1120 * t1054 + t1124 * t1189;
t1198 = t1036 * t1129 + t1133 * t984;
t1187 = t1086 * t1128 + t1299;
t985 = t1120 * t1055 + t1124 * t1187;
t1197 = t1037 * t1129 + t1133 * t985;
t1195 = qJD(2) * t1111 - t1124 * t1134;
t1018 = t1069 + (-t1124 * t1278 - t1295) * t1290;
t1040 = -t1117 * t1278 - t1298;
t1194 = t1018 * t1133 + t1040 * t1129;
t1021 = (t1052 * t1124 + t1132 * t1295) * t1128;
t1041 = t1082 * t1132 - t1116 * t1278;
t1193 = t1021 * t1133 + t1041 * t1129;
t978 = t1133 * t1038 - t1129 * t1039;
t1185 = qJDD(2) * t1129 + t1133 * t1134;
t1089 = t1185 * t1125;
t1101 = qJDD(2) * t1133 - t1129 * t1134;
t1186 = t1089 * t1123 + t1101 * t1119;
t1046 = t1089 * t1119 - t1101 * t1123;
t486 = pkin(10) * t554 + (-pkin(11) * t1127 + t1279) * t584;
t496 = -pkin(10) * t553 + (-pkin(11) * t1131 + t1329) * t584;
t458 = -qJ(4) * t508 - t1118 * t486 + t1122 * t496;
t481 = -pkin(3) * t508 - pkin(4) * t553 + pkin(5) * t685 - pkin(11) * t585;
t1160 = pkin(9) * t495 + t1128 * t458 + t1132 * t481;
t457 = -pkin(3) * t584 + qJ(4) * t509 + t1118 * t496 + t1122 * t486;
t475 = t1120 * t1258 + t1124 * t508;
t441 = -pkin(2) * t475 - t1120 * t457 + t1124 * t1160;
t446 = -t1128 * t481 + t1132 * t458 + (-t1120 * t475 - t1124 * t476) * pkin(9);
t459 = -t1129 * t476 + t1133 * t495;
t1176 = pkin(8) * t459 + t1129 * t446 + t1133 * t441;
t566 = -pkin(11) * t746 - t584;
t527 = pkin(10) * t713 + t1127 * t566 + t1279 * t746;
t535 = -pkin(10) * t712 + t1131 * t566 + t1329 * t746;
t494 = -qJ(4) * t625 - t1118 * t527 + t1122 * t535;
t521 = -pkin(3) * t625 - pkin(4) * t712 - pkin(5) * t889 - pkin(11) * t748 - t585;
t1159 = pkin(9) * t601 + t1128 * t494 + t1132 * t521;
t491 = -pkin(3) * t746 + qJ(4) * t626 + t1118 * t535 + t1122 * t527;
t563 = t1120 * t1256 + t1124 * t625;
t456 = -pkin(2) * t563 - t1120 * t491 + t1124 * t1159;
t469 = -t1128 * t521 + t1132 * t494 + (-t1120 * t563 - t1124 * t564) * pkin(9);
t524 = -t1129 * t564 + t1133 * t601;
t1175 = pkin(8) * t524 + t1129 * t469 + t1133 * t456;
t615 = -pkin(4) * t852 + pkin(10) * t622;
t518 = -pkin(10) * t1323 - qJ(4) * t575 - t1118 * t615;
t539 = -pkin(3) * t575 - pkin(4) * t621;
t1156 = pkin(9) * t572 + t1128 * t518 + t1132 * t539;
t515 = -pkin(3) * t852 - pkin(10) * t1325 + qJ(4) * t576 + t1122 * t615;
t516 = t1120 * t1257 + t1124 * t575;
t462 = -pkin(2) * t516 - t1120 * t515 + t1124 * t1156;
t470 = -t1128 * t539 + t1132 * t518 + (-t1120 * t516 - t1124 * t517) * pkin(9);
t497 = -t1129 * t517 + t1133 * t572;
t1174 = pkin(8) * t497 + t1129 * t470 + t1133 * t462;
t613 = -pkin(5) * t784 + t629;
t653 = -pkin(11) * t784 + t1321;
t546 = -pkin(4) * t784 + pkin(10) * t725 + t1127 * t653 + t1131 * t613;
t556 = -pkin(10) * t724 - t1127 * t613 + t1131 * t653;
t500 = -qJ(4) * t646 - t1118 * t546 + t1122 * t556;
t560 = -pkin(3) * t646 - pkin(4) * t724 - pkin(5) * t840 - pkin(11) * t785 + t1316;
t1158 = pkin(9) * t616 + t1128 * t500 + t1132 * t560;
t498 = -pkin(3) * t784 + qJ(4) * t647 + t1118 * t556 + t1122 * t546;
t577 = t1120 * t1254 + t1124 * t646;
t464 = -pkin(2) * t577 - t1120 * t498 + t1124 * t1158;
t472 = -t1128 * t560 + t1132 * t500 + (-t1120 * t577 - t1124 * t578) * pkin(9);
t536 = -t1129 * t578 + t1133 * t616;
t1173 = pkin(8) * t536 + t1129 * t472 + t1133 * t464;
t614 = -pkin(5) * t794 + t630;
t654 = -pkin(11) * t794 + t1316;
t547 = -pkin(4) * t794 + pkin(10) * t727 + t1127 * t654 + t1131 * t614;
t558 = -pkin(10) * t726 - t1127 * t614 + t1131 * t654;
t501 = -qJ(4) * t651 - t1118 * t547 + t1122 * t558;
t565 = -pkin(3) * t651 - pkin(4) * t726 + pkin(5) * t841 - pkin(11) * t795 - t1321;
t1157 = pkin(9) * t617 + t1128 * t501 + t1132 * t565;
t499 = -pkin(3) * t794 + qJ(4) * t652 + t1118 * t558 + t1122 * t547;
t582 = t1120 * t1253 + t1124 * t651;
t466 = -pkin(2) * t582 - t1120 * t499 + t1124 * t1157;
t473 = -t1128 * t565 + t1132 * t501 + (-t1120 * t582 - t1124 * t583) * pkin(9);
t538 = -t1129 * t583 + t1133 * t617;
t1172 = pkin(8) * t538 + t1129 * t473 + t1133 * t466;
t604 = -pkin(4) * t925 + pkin(10) * t817 + t622;
t612 = -pkin(10) * t815 - t621;
t542 = -qJ(4) * t730 - t1118 * t604 + t1122 * t612;
t682 = -pkin(3) * t730 - pkin(4) * t815;
t1155 = pkin(9) * t704 + t1128 * t542 + t1132 * t682;
t541 = -pkin(3) * t925 + qJ(4) * t732 + t1118 * t612 + t1122 * t604;
t633 = t1120 * t1247 + t1124 * t730;
t493 = -pkin(2) * t633 - t1120 * t541 + t1124 * t1155;
t505 = -t1128 * t682 + t1132 * t542 + (-t1120 * t633 - t1124 * t634) * pkin(9);
t596 = -t1129 * t634 + t1133 * t704;
t1171 = pkin(8) * t596 + t1129 * t505 + t1133 * t493;
t742 = -pkin(4) * t906 + pkin(10) * t877 - t1314;
t764 = -pkin(10) * t876 + t1319;
t632 = -qJ(4) * t772 - t1118 * t742 + t1122 * t764;
t640 = -pkin(3) * t772 - pkin(4) * t876 + t702;
t1154 = pkin(9) * t750 + t1128 * t632 + t1132 * t640;
t618 = -pkin(3) * t906 + qJ(4) * t773 + t1118 * t764 + t1122 * t742;
t680 = t1120 * t1244 + t1124 * t772;
t520 = -pkin(2) * t680 - t1120 * t618 + t1124 * t1154;
t537 = -t1128 * t640 + t1132 * t632 + (-t1120 * t680 - t1124 * t681) * pkin(9);
t623 = -t1129 * t681 + t1133 * t750;
t1170 = pkin(8) * t623 + t1129 * t537 + t1133 * t520;
t751 = pkin(4) * t1345 + pkin(10) * t891 + t1319;
t771 = -pkin(10) * t890 + t1314;
t650 = -qJ(4) * t797 - t1118 * t751 + t1122 * t771;
t659 = -pkin(3) * t797 - pkin(4) * t890 + t703;
t1153 = pkin(9) * t758 + t1128 * t650 + t1132 * t659;
t631 = pkin(3) * t1345 + qJ(4) * t798 + t1118 * t771 + t1122 * t751;
t689 = t1120 * t1243 + t1124 * t797;
t529 = -pkin(2) * t689 - t1120 * t631 + t1124 * t1153;
t545 = -t1128 * t659 + t1132 * t650 + (-t1120 * t689 - t1124 * t690) * pkin(9);
t645 = -t1129 * t690 + t1133 * t758;
t1169 = pkin(8) * t645 + t1129 * t545 + t1133 * t529;
t1144 = pkin(9) * t714 + t1263 * t744;
t648 = t1120 * t1245 + t1124 * t744;
t715 = -pkin(3) * t914 + qJ(4) * t745;
t551 = -pkin(2) * t648 - t1120 * t715 + t1124 * t1144;
t555 = (-qJ(4) * t1132 + t1331) * t744 + (-t1120 * t648 - t1124 * t649) * pkin(9);
t600 = -t1129 * t649 + t1133 * t714;
t1168 = pkin(8) * t600 + t1129 * t555 + t1133 * t551;
t721 = -qJ(4) * t932 - t744;
t1147 = pkin(9) * t887 + t1128 * t721 - t1330 * t932;
t707 = pkin(3) * t1000 + qJ(4) * t934 + t745;
t833 = t1120 * t1206 + t1124 * t932;
t603 = -pkin(2) * t833 - t1120 * t707 + t1124 * t1147;
t635 = t932 * t1331 + t1132 * t721 + (-t1120 * t833 - t1124 * t834) * pkin(9);
t763 = -t1129 * t834 + t1133 * t887;
t1167 = pkin(8) * t763 + t1129 * t635 + t1133 * t603;
t780 = t1118 * t1138 - t1122 * t1140 + t1282 + (t1055 * t1122 - t1118 * t1333 - t945) * pkin(3);
t850 = -qJ(4) * t945 + t1324;
t1152 = pkin(9) * t900 + t1128 * t850 + t1132 * t780;
t819 = pkin(3) * t1010 + qJ(4) * t946 - t1322;
t848 = t1120 * t1204 + t1124 * t945;
t637 = -pkin(2) * t848 - t1120 * t819 + t1124 * t1152;
t667 = -t1128 * t780 + t1132 * t850 + (-t1120 * t848 - t1124 * t849) * pkin(9);
t767 = -t1129 * t849 + t1133 * t900;
t1166 = pkin(8) * t767 + t1129 * t667 + t1133 * t637;
t789 = -pkin(3) * t962 + t828;
t853 = -qJ(4) * t962 + t1322;
t1151 = pkin(9) * t918 + t1128 * t853 + t1132 * t789;
t837 = -pkin(3) * t1011 + qJ(4) * t965 + t1324;
t857 = t1120 * t1203 + t1124 * t962;
t658 = -pkin(2) * t857 - t1120 * t837 + t1124 * t1151;
t677 = -t1128 * t789 + t1132 * t853 + (-t1120 * t857 - t1124 * t860) * pkin(9);
t786 = -t1129 * t860 + t1133 * t918;
t1165 = pkin(8) * t786 + t1129 * t677 + t1133 * t658;
t824 = t1120 * t1240 - t1124 * t986;
t743 = (-t1120 * t824 - t1124 * t825) * pkin(9);
t755 = -t1129 * t825 + t1133 * t863;
t756 = pkin(9) * t1124 * t863 - pkin(2) * t824;
t1164 = pkin(8) * t755 + t1129 * t743 + t1133 * t756;
t970 = t1124 * t1092 + t1120 * t1191;
t781 = (-t1120 * t970 - t1124 * t972) * pkin(9) - t1240;
t1150 = pkin(9) * t988 + t863;
t792 = -pkin(2) * t970 + t1124 * t1150;
t915 = -t1129 * t972 + t1133 * t988;
t1163 = pkin(8) * t915 + t1129 * t781 + t1133 * t792;
t976 = t1124 * t1051 + t1120 * t1190;
t821 = -pkin(2) * t976 + t1120 * t931 + t1124 * t1262;
t864 = -t1312 + (-t1120 * t976 - t1124 * t977) * pkin(9);
t927 = t1031 * t1133 - t1129 * t977;
t1162 = pkin(8) * t927 + t1129 * t864 + t1133 * t821;
t982 = -t1124 * t1055 + t1120 * t1187;
t836 = -pkin(2) * t982 + t1120 * t930 + t1124 * t1261;
t871 = -t1317 + (-t1120 * t982 - t1124 * t985) * pkin(9);
t938 = t1037 * t1133 - t1129 * t985;
t1161 = pkin(8) * t938 + t1129 * t871 + t1133 * t836;
t1090 = t1101 * t1125;
t1088 = t1101 * t1121;
t1087 = t1185 * t1121;
t1068 = t1083 * t1292;
t1047 = -t1090 * t1119 - t1123 * t1185;
t1045 = t1090 * t1123 - t1119 * t1185;
t1033 = t1110 * t1120 * t1129 + t1059 * t1133;
t1020 = (t1115 * t1132 * t1195 + t1082 * t1120) * t1128;
t1019 = -t1195 * t1270 + t1068;
t1003 = -t1177 + (t1087 * t1121 + t1089 * t1125) * pkin(8);
t1002 = -t1178 + (-t1088 * t1121 - t1090 * t1125) * pkin(8);
t1001 = t1125 * t1304 + (-t1121 * t1124 - t1125 * t1291) * t1110;
t981 = t1124 * t1054 + t1120 * t1189;
t980 = t1124 * t1053 + t1120 * t1188;
t974 = t979 * t1125;
t971 = t1124 * t1091 + t1120 * t1192;
t969 = -t1021 * t1129 + t1041 * t1133;
t968 = -t1018 * t1129 + t1040 * t1133;
t961 = -pkin(1) * t1088 + t1121 * t1038 + t1125 * t1177 - t1185 * t1328;
t960 = pkin(1) * t1087 + t1121 * t1039 - t1101 * t1328 - t1125 * t1178;
t956 = t1121 * t1095 + (t1268 - t978) * t1125;
t955 = -t1121 * t978 - t1125 * t1259;
t937 = t1036 * t1133 - t1129 * t984;
t936 = t1035 * t1133 - t1129 * t983;
t924 = -t1121 * t1020 + t1125 * t1193;
t923 = -t1121 * t1019 + t1125 * t1194;
t921 = t1004 * t1124 + t1005 * t1293 + t1068;
t916 = -t1129 * t973 + t1133 * t989;
t893 = t1120 * t1180 + t1124 * t993;
t892 = t1120 * t1181 + t1124 * t991;
t888 = -pkin(1) * t955 + t1328 * t979;
t886 = -t1119 * t956 + t1123 * t979;
t885 = t1119 * t979 + t1123 * t956;
t882 = -t1121 * t982 + t1125 * t1197;
t881 = -t1121 * t981 + t1125 * t1198;
t880 = -t1121 * t980 + t1125 * t1199;
t879 = t1121 * t1197 + t1125 * t982;
t878 = (-t1121 * t955 - t1125 * t956) * pkin(8);
t875 = -t1121 * t976 + t1125 * t1201;
t874 = t1121 * t1201 + t1125 * t976;
t870 = -t1129 * t922 + t1133 * t975;
t859 = t1120 * t1205 + t1124 * t964;
t858 = t1120 * t1202 + t1124 * t963;
t856 = -t1121 * t971 + t1125 * t1207;
t855 = -t1121 * t970 + t1125 * t1208;
t854 = t1121 * t1208 + t1125 * t970;
t847 = -t1129 * t895 + t1133 * t954;
t846 = -t1129 * t894 + t1133 * t953;
t844 = t1120 * t1200 + t1124 * t933;
t835 = pkin(2) * t985 + t1120 * t1261 - t1124 * t930;
t823 = -t1119 * t882 + t1123 * t938;
t822 = t1119 * t938 + t1123 * t882;
t820 = pkin(2) * t977 + t1120 * t1262 - t1124 * t931;
t800 = -t1119 * t875 + t1123 * t927;
t799 = t1119 * t927 + t1123 * t875;
t796 = -t1121 * t921 + t1125 * t1209;
t791 = pkin(2) * t972 + t1120 * t1150;
t788 = -t1129 * t862 + t1133 * t920;
t787 = -t1129 * t861 + t1133 * t919;
t783 = -t1119 * t855 + t1123 * t915;
t782 = t1119 * t915 + t1123 * t855;
t768 = -t1129 * t845 + t1133 * t912;
t766 = -t1121 * t893 + t1125 * t1210;
t765 = -t1121 * t892 + t1125 * t1211;
t761 = t1120 * t1196 + t1124 * t865;
t757 = pkin(2) * t825 + t1327 * t863;
t737 = -t1121 * t859 + t1125 * t1212;
t736 = -t1121 * t858 + t1125 * t1213;
t735 = -t1121 * t857 + t1125 * t1214;
t734 = t1121 * t1214 + t1125 * t857;
t720 = -t1121 * t848 + t1125 * t1215;
t719 = -t1121 * t844 + t1125 * t1216;
t718 = t1121 * t1215 + t1125 * t848;
t717 = -t1129 * t762 + t1133 * t851;
t709 = t1120 * t1182 + t1124 * t802;
t708 = t1120 * t1183 + t1124 * t801;
t706 = -t1121 * t833 + t1125 * t1217;
t705 = t1121 * t1217 + t1125 * t833;
t698 = t1120 * t1241 + t1124 * t810;
t697 = t1120 * t1242 + t1124 * t809;
t692 = -t1121 * t824 + t1125 * t1218;
t691 = t1121 * t1218 + t1125 * t824;
t687 = -t1129 * t836 + t1133 * t871 + (-t1121 * t879 - t1125 * t882) * pkin(8);
t683 = -t1129 * t821 + t1133 * t864 + (-t1121 * t874 - t1125 * t875) * pkin(8);
t679 = -t1119 * t735 + t1123 * t786;
t678 = t1119 * t786 + t1123 * t735;
t676 = -pkin(1) * t879 - t1121 * t835 + t1125 * t1161;
t673 = -t1119 * t720 + t1123 * t767;
t672 = t1119 * t767 + t1123 * t720;
t671 = -pkin(1) * t874 - t1121 * t820 + t1125 * t1162;
t670 = -t1129 * t711 + t1133 * t770;
t669 = -t1129 * t710 + t1133 * t769;
t668 = -t1121 * t761 + t1125 * t1219;
t666 = -t1119 * t706 + t1123 * t763;
t665 = t1119 * t763 + t1123 * t706;
t660 = -t1129 * t792 + t1133 * t781 + (-t1121 * t854 - t1125 * t855) * pkin(8);
t657 = pkin(2) * t860 + t1120 * t1151 + t1124 * t837;
t656 = -t1129 * t700 + t1133 * t760;
t655 = -t1129 * t699 + t1133 * t759;
t644 = -t1119 * t692 + t1123 * t755;
t643 = t1119 * t755 + t1123 * t692;
t641 = t1120 * t1246 + t1124 * t731;
t636 = pkin(2) * t849 + t1120 * t1152 + t1124 * t819;
t627 = t1120 * t1248 + t1124 * t728;
t624 = -pkin(1) * t854 - t1121 * t791 + t1125 * t1163;
t611 = -t1121 * t709 + t1125 * t1220;
t610 = -t1121 * t708 + t1125 * t1221;
t607 = t1120 * t1249 + t1124 * t694;
t606 = t1120 * t1250 + t1124 * t693;
t602 = pkin(2) * t834 + t1120 * t1147 + t1124 * t707;
t599 = -t1129 * t642 + t1133 * t716;
t598 = -t1121 * t698 + t1125 * t1222;
t597 = -t1121 * t697 + t1125 * t1223;
t595 = -t1121 * t689 + t1125 * t1224;
t594 = t1121 * t1224 + t1125 * t689;
t593 = -t1129 * t628 + t1133 * t688;
t592 = -t1121 * t680 + t1125 * t1225;
t591 = t1121 * t1225 + t1125 * t680;
t590 = -t1129 * t756 + t1133 * t743 + (-t1121 * t691 - t1125 * t692) * pkin(8);
t587 = t1120 * t1251 + t1124 * t662;
t586 = t1120 * t1252 + t1124 * t661;
t581 = -pkin(1) * t691 - t1121 * t757 + t1125 * t1164;
t580 = -t1129 * t609 + t1133 * t675;
t579 = -t1129 * t608 + t1133 * t674;
t573 = t1120 * t1255 + t1124 * t638;
t571 = -t1121 * t648 + t1125 * t1226;
t570 = t1121 * t1226 + t1125 * t648;
t569 = -t1121 * t641 + t1125 * t1227;
t568 = -t1119 * t595 + t1123 * t645;
t567 = t1119 * t645 + t1123 * t595;
t562 = -t1121 * t633 + t1125 * t1228;
t561 = t1121 * t1228 + t1125 * t633;
t559 = -t1129 * t658 + t1133 * t677 + (-t1121 * t734 - t1125 * t735) * pkin(8);
t557 = -t1121 * t627 + t1125 * t1229;
t552 = -t1129 * t637 + t1133 * t667 + (-t1121 * t718 - t1125 * t720) * pkin(8);
t550 = pkin(2) * t649 + t1120 * t1144 + t1124 * t715;
t549 = -t1119 * t592 + t1123 * t623;
t548 = t1119 * t623 + t1123 * t592;
t544 = -t1129 * t589 + t1133 * t620;
t543 = -t1129 * t588 + t1133 * t619;
t540 = -pkin(1) * t734 - t1121 * t657 + t1125 * t1165;
t534 = -t1129 * t603 + t1133 * t635 + (-t1121 * t705 - t1125 * t706) * pkin(8);
t533 = -t1121 * t607 + t1125 * t1230;
t532 = -t1121 * t606 + t1125 * t1231;
t531 = -pkin(1) * t718 - t1121 * t636 + t1125 * t1166;
t530 = -t1129 * t574 + t1133 * t605;
t528 = pkin(2) * t690 + t1120 * t1153 + t1124 * t631;
t526 = -t1119 * t571 + t1123 * t600;
t525 = t1119 * t600 + t1123 * t571;
t523 = -t1119 * t562 + t1123 * t596;
t522 = t1119 * t596 + t1123 * t562;
t519 = pkin(2) * t681 + t1120 * t1154 + t1124 * t618;
t514 = -pkin(1) * t705 - t1121 * t602 + t1125 * t1167;
t513 = -t1121 * t587 + t1125 * t1232;
t512 = -t1121 * t586 + t1125 * t1233;
t511 = -t1121 * t582 + t1125 * t1234;
t510 = t1121 * t1234 + t1125 * t582;
t507 = -t1121 * t577 + t1125 * t1235;
t506 = t1121 * t1235 + t1125 * t577;
t504 = -t1121 * t573 + t1125 * t1236;
t503 = -t1121 * t563 + t1125 * t1237;
t502 = t1121 * t1237 + t1125 * t563;
t492 = pkin(2) * t634 + t1120 * t1155 + t1124 * t541;
t490 = -t1119 * t511 + t1123 * t538;
t489 = t1119 * t538 + t1123 * t511;
t488 = -t1119 * t507 + t1123 * t536;
t487 = t1119 * t536 + t1123 * t507;
t485 = -t1129 * t529 + t1133 * t545 + (-t1121 * t594 - t1125 * t595) * pkin(8);
t484 = -t1129 * t551 + t1133 * t555 + (-t1121 * t570 - t1125 * t571) * pkin(8);
t483 = -t1119 * t503 + t1123 * t524;
t482 = t1119 * t524 + t1123 * t503;
t480 = -t1129 * t520 + t1133 * t537 + (-t1121 * t591 - t1125 * t592) * pkin(8);
t479 = -t1121 * t516 + t1125 * t1238;
t478 = t1121 * t1238 + t1125 * t516;
t477 = -pkin(1) * t570 - t1121 * t550 + t1125 * t1168;
t474 = -pkin(1) * t594 - t1121 * t528 + t1125 * t1169;
t471 = -pkin(1) * t591 - t1121 * t519 + t1125 * t1170;
t468 = -t1119 * t479 + t1123 * t497;
t467 = t1119 * t497 + t1123 * t479;
t465 = pkin(2) * t583 + t1120 * t1157 + t1124 * t499;
t463 = pkin(2) * t578 + t1120 * t1158 + t1124 * t498;
t461 = pkin(2) * t517 + t1120 * t1156 + t1124 * t515;
t460 = -t1129 * t493 + t1133 * t505 + (-t1121 * t561 - t1125 * t562) * pkin(8);
t455 = pkin(2) * t564 + t1120 * t1159 + t1124 * t491;
t454 = -pkin(1) * t561 - t1121 * t492 + t1125 * t1171;
t453 = -t1121 * t475 + t1125 * t1239;
t452 = t1121 * t1239 + t1125 * t475;
t451 = -t1129 * t466 + t1133 * t473 + (-t1121 * t510 - t1125 * t511) * pkin(8);
t450 = -t1129 * t464 + t1133 * t472 + (-t1121 * t506 - t1125 * t507) * pkin(8);
t449 = -t1119 * t453 + t1123 * t459;
t448 = t1119 * t459 + t1123 * t453;
t447 = -t1129 * t456 + t1133 * t469 + (-t1121 * t502 - t1125 * t503) * pkin(8);
t445 = -t1129 * t462 + t1133 * t470 + (-t1121 * t478 - t1125 * t479) * pkin(8);
t444 = -pkin(1) * t510 - t1121 * t465 + t1125 * t1172;
t443 = -pkin(1) * t506 - t1121 * t463 + t1125 * t1173;
t442 = -pkin(1) * t478 - t1121 * t461 + t1125 * t1174;
t440 = pkin(2) * t476 + t1120 * t1160 + t1124 * t457;
t439 = -pkin(1) * t502 - t1121 * t455 + t1125 * t1175;
t438 = -t1129 * t441 + t1133 * t446 + (-t1121 * t452 - t1125 * t453) * pkin(8);
t437 = -pkin(1) * t452 - t1121 * t440 + t1125 * t1176;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, 0, 0, 0, 0, 0, 0, t1047, t1046, 0, t886, 0, 0, 0, 0, 0, 0, t823, t800, t783, t644, 0, 0, 0, 0, 0, 0, t673, t679, t666, t526, 0, 0, 0, 0, 0, 0, t549, t568, t523, t468, 0, 0, 0, 0, 0, 0, t488, t490, t483, t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1260, 0, 0, 0, 0, 0, 0, t1045, -t1186, 0, t885, 0, 0, 0, 0, 0, 0, t822, t799, t782, t643, 0, 0, 0, 0, 0, 0, t672, t678, t665, t525, 0, 0, 0, 0, 0, 0, t548, t567, t522, t467, 0, 0, 0, 0, 0, 0, t487, t489, t482, t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1326, 0, 0, 0, 0, 0, 0, t1088, -t1087, 0, t955, 0, 0, 0, 0, 0, 0, t879, t874, t854, t691, 0, 0, 0, 0, 0, 0, t718, t734, t705, t570, 0, 0, 0, 0, 0, 0, t591, t594, t561, t478, 0, 0, 0, 0, 0, 0, t506, t510, t502, t452; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1341, -t1339, t1260, qJ(1) * t1260, 0, 0, -t1046, 0, t1047, t1119 * t1284, -qJ(1) * t1045 + t1002 * t1123 - t1119 * t961, qJ(1) * t1186 + t1003 * t1123 - t1119 * t960, -t1119 * t974 + t1123 * t978, -qJ(1) * t885 - t1119 * t888 + t1123 * t878, -t1119 * t924 + t1123 * t969, -t1119 * t856 + t1123 * t916, -t1119 * t880 + t1123 * t936, -t1119 * t923 + t1123 * t968, -t1119 * t881 + t1123 * t937, -t1001 * t1119 + t1033 * t1123, -qJ(1) * t822 - t1119 * t676 + t1123 * t687, -qJ(1) * t799 - t1119 * t671 + t1123 * t683, -qJ(1) * t782 - t1119 * t624 + t1123 * t660, -qJ(1) * t643 - t1119 * t581 + t1123 * t590, -t1119 * t766 + t1123 * t847, -t1119 * t719 + t1123 * t768, -t1119 * t736 + t1123 * t787, -t1119 * t765 + t1123 * t846, -t1119 * t737 + t1123 * t788, -t1119 * t796 + t1123 * t870, -qJ(1) * t672 - t1119 * t531 + t1123 * t552, -qJ(1) * t678 - t1119 * t540 + t1123 * t559, -qJ(1) * t665 - t1119 * t514 + t1123 * t534, -qJ(1) * t525 - t1119 * t477 + t1123 * t484, -t1119 * t611 + t1123 * t670, -t1119 * t569 + t1123 * t599, -t1119 * t597 + t1123 * t655, -t1119 * t610 + t1123 * t669, -t1119 * t598 + t1123 * t656, -t1119 * t668 + t1123 * t717, -qJ(1) * t548 - t1119 * t471 + t1123 * t480, -qJ(1) * t567 - t1119 * t474 + t1123 * t485, -qJ(1) * t522 - t1119 * t454 + t1123 * t460, -qJ(1) * t467 - t1119 * t442 + t1123 * t445, -t1119 * t533 + t1123 * t580, -t1119 * t504 + t1123 * t530, -t1119 * t512 + t1123 * t543, -t1119 * t532 + t1123 * t579, -t1119 * t513 + t1123 * t544, -t1119 * t557 + t1123 * t593, -qJ(1) * t487 - t1119 * t443 + t1123 * t450, -qJ(1) * t489 - t1119 * t444 + t1123 * t451, -qJ(1) * t482 - t1119 * t439 + t1123 * t447, -qJ(1) * t448 - t1119 * t437 + t1123 * t438; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1339, -t1341, t1063, qJ(1) * t1063, 0, 0, t1186, 0, t1045, -t1123 * t1284, qJ(1) * t1047 + t1002 * t1119 + t1123 * t961, qJ(1) * t1046 + t1003 * t1119 + t1123 * t960, t1119 * t978 + t1123 * t974, qJ(1) * t886 + t1119 * t878 + t1123 * t888, t1119 * t969 + t1123 * t924, t1119 * t916 + t1123 * t856, t1119 * t936 + t1123 * t880, t1119 * t968 + t1123 * t923, t1119 * t937 + t1123 * t881, t1001 * t1123 + t1033 * t1119, qJ(1) * t823 + t1119 * t687 + t1123 * t676, qJ(1) * t800 + t1119 * t683 + t1123 * t671, qJ(1) * t783 + t1119 * t660 + t1123 * t624, qJ(1) * t644 + t1119 * t590 + t1123 * t581, t1119 * t847 + t1123 * t766, t1119 * t768 + t1123 * t719, t1119 * t787 + t1123 * t736, t1119 * t846 + t1123 * t765, t1119 * t788 + t1123 * t737, t1119 * t870 + t1123 * t796, qJ(1) * t673 + t1119 * t552 + t1123 * t531, qJ(1) * t679 + t1119 * t559 + t1123 * t540, qJ(1) * t666 + t1119 * t534 + t1123 * t514, qJ(1) * t526 + t1119 * t484 + t1123 * t477, t1119 * t670 + t1123 * t611, t1119 * t599 + t1123 * t569, t1119 * t655 + t1123 * t597, t1119 * t669 + t1123 * t610, t1119 * t656 + t1123 * t598, t1119 * t717 + t1123 * t668, qJ(1) * t549 + t1119 * t480 + t1123 * t471, qJ(1) * t568 + t1119 * t485 + t1123 * t474, qJ(1) * t523 + t1119 * t460 + t1123 * t454, qJ(1) * t468 + t1119 * t445 + t1123 * t442, t1119 * t580 + t1123 * t533, t1119 * t530 + t1123 * t504, t1119 * t543 + t1123 * t512, t1119 * t579 + t1123 * t532, t1119 * t544 + t1123 * t513, t1119 * t593 + t1123 * t557, qJ(1) * t488 + t1119 * t450 + t1123 * t443, qJ(1) * t490 + t1119 * t451 + t1123 * t444, qJ(1) * t483 + t1119 * t447 + t1123 * t439, qJ(1) * t449 + t1119 * t438 + t1123 * t437; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1269, t1264, 0, 0, 0, 0, t1087, 0, t1088, t1125 * qJDD(2), pkin(1) * t1090 - t1125 * t1038 + (-pkin(8) * t1185 + t1177) * t1121, -pkin(1) * t1089 - t1125 * t1039 + (-pkin(8) * t1101 - t1178) * t1121, t1344, pkin(1) * t956 + pkin(8) * t1344, t1125 * t1020 + t1121 * t1193, t1121 * t1207 + t1125 * t971, t1121 * t1199 + t1125 * t980, t1125 * t1019 + t1121 * t1194, t1121 * t1198 + t1125 * t981, t1121 * t1304 + (-t1121 * t1291 + t1124 * t1125) * t1110, pkin(1) * t882 + t1121 * t1161 + t1125 * t835, pkin(1) * t875 + t1121 * t1162 + t1125 * t820, pkin(1) * t855 + t1121 * t1163 + t1125 * t791, pkin(1) * t692 + t1121 * t1164 + t1125 * t757, t1121 * t1210 + t1125 * t893, t1121 * t1216 + t1125 * t844, t1121 * t1213 + t1125 * t858, t1121 * t1211 + t1125 * t892, t1121 * t1212 + t1125 * t859, t1121 * t1209 + t1125 * t921, pkin(1) * t720 + t1121 * t1166 + t1125 * t636, pkin(1) * t735 + t1121 * t1165 + t1125 * t657, pkin(1) * t706 + t1121 * t1167 + t1125 * t602, pkin(1) * t571 + t1121 * t1168 + t1125 * t550, t1121 * t1220 + t1125 * t709, t1121 * t1227 + t1125 * t641, t1121 * t1223 + t1125 * t697, t1121 * t1221 + t1125 * t708, t1121 * t1222 + t1125 * t698, t1121 * t1219 + t1125 * t761, pkin(1) * t592 + t1121 * t1170 + t1125 * t519, pkin(1) * t595 + t1121 * t1169 + t1125 * t528, pkin(1) * t562 + t1121 * t1171 + t1125 * t492, pkin(1) * t479 + t1121 * t1174 + t1125 * t461, t1121 * t1230 + t1125 * t607, t1121 * t1236 + t1125 * t573, t1121 * t1233 + t1125 * t586, t1121 * t1231 + t1125 * t606, t1121 * t1232 + t1125 * t587, t1121 * t1229 + t1125 * t627, pkin(1) * t507 + t1121 * t1173 + t1125 * t463, pkin(1) * t511 + t1121 * t1172 + t1125 * t465, pkin(1) * t503 + t1121 * t1175 + t1125 * t455, pkin(1) * t453 + t1121 * t1176 + t1125 * t440;];
tauB_reg  = t1;
