% Calculate minimal parameter regressor of coriolis matrix for
% S6RPRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6RPRPRP6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:19:49
% EndTime: 2019-03-09 03:19:56
% DurationCPUTime: 3.49s
% Computational Cost: add. (5589->324), mult. (10345->427), div. (0->0), fcn. (11473->6), ass. (0->261)
t201 = sin(qJ(5));
t199 = sin(pkin(9));
t343 = pkin(7) + qJ(2);
t182 = t343 * t199;
t350 = cos(qJ(3));
t172 = t350 * t182;
t200 = cos(pkin(9));
t183 = t343 * t200;
t202 = sin(qJ(3));
t297 = t202 * t183;
t119 = t172 + t297;
t175 = t350 * t199 + t202 * t200;
t345 = t175 * pkin(4);
t82 = t119 + t345;
t366 = t201 * t82;
t203 = cos(qJ(5));
t78 = t203 * t82;
t189 = t350 * t200;
t296 = t202 * t199;
t173 = -t189 + t296;
t353 = pkin(3) + pkin(8);
t365 = t353 * t173;
t273 = qJD(5) * t201;
t257 = pkin(5) * t273;
t344 = t175 * pkin(5);
t191 = -t200 * pkin(2) - pkin(1);
t305 = t175 * qJ(4);
t222 = t191 - t305;
t69 = t222 + t365;
t237 = qJ(6) * t173 + t69;
t47 = -t237 * t201 + t78;
t33 = t47 + t344;
t252 = -t47 / 0.2e1 + t33 / 0.2e1;
t253 = t344 / 0.2e1;
t221 = t253 + t252;
t212 = t221 * t201;
t358 = qJD(1) * t212;
t364 = t257 + t358;
t92 = t201 * t175;
t287 = t92 * qJD(1);
t363 = t287 + t273;
t96 = t203 * t173;
t236 = 0.2e1 * t201 * t96;
t362 = t175 / 0.2e1;
t332 = t33 * t201;
t48 = t237 * t203 + t366;
t228 = -t48 * t203 + t332;
t23 = t228 * t175;
t361 = -qJ(6) - t353;
t354 = t47 / 0.2e1;
t360 = t354 + t253;
t169 = t173 ^ 2;
t356 = t175 ^ 2;
t359 = -t356 - t169;
t259 = t356 - t169;
t357 = qJD(5) * t212;
t168 = t296 / 0.2e1 - t189 / 0.2e1;
t322 = qJ(6) * t175;
t346 = t173 * pkin(5);
t248 = t350 * t183;
t298 = t202 * t182;
t120 = t248 - t298;
t347 = t173 * pkin(4);
t84 = t120 - t347;
t80 = t84 * t203;
t323 = qJ(4) * t173;
t81 = t353 * t175 + t323;
t40 = -t346 + t80 + (-t81 - t322) * t201;
t355 = t40 / 0.2e1;
t177 = t361 * t201;
t352 = -t177 / 0.2e1;
t198 = t203 ^ 2;
t351 = t198 / 0.2e1;
t349 = pkin(3) * t173;
t348 = pkin(5) * t203;
t328 = t48 * t201;
t331 = t33 * t203;
t342 = -t331 / 0.2e1 - t328 / 0.2e1;
t341 = -t33 + t47;
t340 = pkin(5) * qJD(5);
t306 = t173 * t201;
t258 = pkin(5) * t306;
t249 = -pkin(4) - t348;
t67 = t249 * t173 + t120;
t6 = t67 * t258 + t341 * t48;
t338 = qJD(1) * t6;
t8 = t341 * t96;
t337 = qJD(1) * t8;
t335 = t201 * t81;
t74 = t203 * t81;
t79 = t84 * t201;
t51 = t203 * t322 + t74 + t79;
t66 = t249 * t175 - t119;
t3 = t33 * t40 + t48 * t51 + t66 * t67;
t333 = t3 * qJD(1);
t330 = t40 * t201;
t329 = t40 * t203;
t327 = t51 * t201;
t326 = t51 * t203;
t7 = -t23 + (t326 - t330) * t173;
t325 = t7 * qJD(1);
t10 = t221 * t203;
t321 = qJD(1) * t10;
t17 = -t67 * t173 + (t328 + t331) * t175;
t320 = qJD(1) * t17;
t190 = pkin(5) * t201 + qJ(4);
t240 = -t173 * t190 / 0.2e1;
t178 = t361 * t203;
t302 = t178 * t203;
t304 = t177 * t201;
t205 = (t304 / 0.2e1 + t302 / 0.2e1) * t175 + t240;
t220 = t330 / 0.2e1 - t326 / 0.2e1;
t20 = t205 + t220;
t319 = qJD(1) * t20;
t22 = t228 * t173;
t318 = qJD(1) * t22;
t317 = qJD(1) * t23;
t52 = t201 * t69 - t78;
t25 = t175 * t52 + t84 * t96;
t316 = qJD(1) * t25;
t53 = t203 * t69 + t366;
t26 = -t175 * t53 + t84 * t306;
t315 = qJD(1) * t26;
t229 = pkin(3) * t175 + t323;
t91 = t222 + t349;
t54 = -t173 * t229 - t175 * t91;
t314 = qJD(1) * t54;
t55 = t173 * t91 - t175 * t229;
t313 = qJD(1) * t55;
t58 = t119 * t175 - t120 * t173;
t312 = qJD(1) * t58;
t64 = t359 * t201;
t311 = qJD(1) * t64;
t75 = t259 * t201;
t310 = qJD(1) * t75;
t76 = t259 * t203;
t309 = qJD(1) * t76;
t308 = qJD(3) * t96;
t307 = qJD(5) * t92;
t303 = t178 * t201;
t18 = -t175 * t335 + (t52 + t78) * t173;
t301 = t18 * qJD(1);
t19 = -t74 * t175 + (t53 - t366) * t173;
t300 = t19 * qJD(1);
t197 = t201 ^ 2;
t299 = t197 * t173;
t147 = t197 * t175;
t148 = t198 * t175;
t295 = t203 * t177;
t24 = t91 * t229;
t294 = t24 * qJD(1);
t238 = t351 + t197 / 0.2e1;
t59 = t238 * t175 + t147 / 0.2e1 + t148 / 0.2e1;
t293 = t59 * qJD(1);
t292 = t229 * qJD(1);
t282 = t197 + t198;
t65 = t282 * t175 * t173;
t291 = t65 * qJD(1);
t72 = -t238 * t173 - t168;
t290 = t72 * qJD(1);
t77 = t359 * t203;
t289 = t77 * qJD(1);
t288 = t259 * qJD(1);
t286 = t96 * qJD(1);
t97 = -t147 - t148;
t285 = t97 * qJD(1);
t98 = t282 * t169;
t284 = t98 * qJD(1);
t184 = t199 ^ 2 + t200 ^ 2;
t187 = t197 - t198;
t281 = qJD(1) * t201;
t280 = qJD(2) * t173;
t279 = qJD(3) * qJ(4);
t278 = qJD(3) * t119;
t277 = qJD(3) * t201;
t276 = qJD(4) * t175;
t275 = qJD(4) * t201;
t274 = qJD(4) * t203;
t272 = qJD(5) * t203;
t271 = qJD(5) * t353;
t270 = t359 * qJD(1);
t105 = t120 * qJD(3);
t269 = t168 * qJD(1);
t268 = t356 * qJD(1);
t267 = t173 * qJD(1);
t158 = t173 * qJD(3);
t266 = t173 * qJD(4);
t265 = t175 * qJD(1);
t160 = t175 * qJD(2);
t162 = t175 * qJD(3);
t179 = t184 * qJ(2);
t264 = t179 * qJD(1);
t181 = -0.1e1 / 0.2e1 - t238;
t263 = t181 * qJD(3);
t262 = t184 * qJD(1);
t261 = t282 * qJD(3);
t260 = t203 * qJD(3);
t256 = pkin(5) * t272;
t255 = t348 / 0.2e1;
t254 = -t344 / 0.2e1;
t251 = t91 * t265;
t247 = t356 * t281;
t246 = t201 * t158;
t245 = t201 * t260;
t244 = t175 * t273;
t243 = t175 * t272;
t118 = t173 * t265;
t117 = t173 * t162;
t242 = t201 * t267;
t241 = t201 * t272;
t143 = t203 * t265;
t235 = qJD(5) * t168 + t118;
t234 = qJD(1) * t191 + qJD(2);
t233 = qJD(5) + t265;
t232 = pkin(4) / 0.2e1 + t255;
t231 = qJD(3) * t236;
t230 = t172 / 0.2e1 + t297 / 0.2e1;
t1 = t252 * t177 + (t355 + t201 * t240 - t67 * t203 / 0.2e1) * pkin(5);
t68 = t190 * t348;
t227 = -qJD(1) * t1 + qJD(3) * t68;
t226 = t305 - t365;
t107 = t302 + t304;
t219 = t295 / 0.2e1 - t303 / 0.2e1;
t206 = t219 * t173 + t342;
t13 = t232 * t175 + t206 + t230;
t225 = qJD(1) * t13 - qJD(3) * t107;
t209 = -t298 / 0.2e1 + t248 / 0.2e1;
t16 = -t347 / 0.2e1 + (t178 * t362 - t51 / 0.2e1) * t201 + (t175 * t352 - t346 / 0.2e1 - t40 / 0.2e1) * t203 + t209;
t224 = qJD(1) * t16 + qJD(3) * t190;
t223 = t233 * t201;
t218 = t353 * t362 + t323 / 0.2e1;
t207 = t218 * t203;
t57 = t74 / 0.2e1 + t207;
t217 = qJ(4) * t277 - t57 * qJD(1);
t56 = (t81 / 0.2e1 + t218) * t201;
t216 = -qJ(4) * t260 - t56 * qJD(1);
t138 = t173 * t351;
t94 = t138 - t299 / 0.2e1;
t215 = -qJD(1) * t94 + t245;
t214 = t173 * t223;
t213 = t242 + t260;
t211 = t169 * t203 * t281 + qJD(3) * t94;
t99 = t187 * t169;
t210 = qJD(1) * t99 + t231;
t208 = qJD(1) * t236 - qJD(3) * t187;
t180 = 0.1e1 / 0.2e1 - t238;
t144 = t168 * qJD(3);
t123 = -t143 - t272;
t121 = t213 * pkin(5);
t89 = t94 * qJD(5);
t73 = t138 + t299 / 0.2e1 - t168;
t32 = -t79 - t74 / 0.2e1 + t207;
t31 = t80 - t335 / 0.2e1 + t218 * t201;
t21 = t205 - t220;
t15 = t327 / 0.2e1 + t329 / 0.2e1 - t219 * t175 - t232 * t173 + t209;
t14 = -t345 / 0.2e1 + t203 * t254 + t206 - t230;
t12 = t328 / 0.2e1 + t342 + t360 * t203;
t11 = -t332 / 0.2e1 + t360 * t201;
t5 = (t252 + t254) * t201;
t2 = t177 * t354 + t33 * t352 + t190 * t258 / 0.2e1 + t67 * t255 + pkin(5) * t355;
t4 = [0, 0, 0, 0, 0, t184 * qJD(2), t179 * qJD(2), -t117, -t259 * qJD(3), 0, 0, 0, t191 * t162, -t191 * t158, -qJD(2) * t359, qJD(3) * t54 + t175 * t266, qJD(3) * t55 + qJD(4) * t356, qJD(2) * t58 + qJD(3) * t24 - t276 * t91, t117 * t197 + t169 * t241, -qJD(5) * t99 + t175 * t231, qJD(3) * t75 + t173 * t243, qJD(3) * t76 - t173 * t244, -t117, -qJD(2) * t77 + qJD(3) * t18 + qJD(5) * t26 + t356 * t275, qJD(2) * t64 + qJD(3) * t19 + qJD(5) * t25 + t274 * t356, qJD(3) * t7 - qJD(4) * t65 + qJD(5) * t8 + qJD(6) * t98, qJD(2) * t17 + qJD(3) * t3 + qJD(4) * t23 + qJD(5) * t6 - qJD(6) * t22; 0, 0, 0, 0, 0, t262, t264, 0, 0, 0, 0, 0, 0, 0, -t270, 0, 0, t312, 0, 0, 0, 0, 0, -t289, t311, 0, qJD(3) * t21 + qJD(5) * t12 + qJD(6) * t73 + t320; 0, 0, 0, 0, 0, 0, 0, -t118, -t288, -t158, -t162, 0, t191 * t265 - t105, -t191 * t267 + t278 (-t305 + t349) * qJD(3) - t266, t105 + t314, -t278 + t313, t294 + (-pkin(3) * t120 - qJ(4) * t119) * qJD(3) + t120 * qJD(4), t89 + (t197 * t267 + t245) * t175 (t148 - t147) * qJD(3) + (-qJD(5) + t265) * t236, -t173 * t260 + t310, t246 + t309, -t235, t301 + (-t203 * t226 - t366) * qJD(3) - t96 * qJD(4) + t31 * qJD(5), -t82 * t260 + t300 + t32 * qJD(5) + (qJD(3) * t226 + t266) * t201, t325 + (-t327 - t329 + (t295 - t303) * t175) * qJD(3) + t5 * qJD(5), t333 + t21 * qJD(2) + (t177 * t51 + t178 * t40 + t190 * t66) * qJD(3) + t15 * qJD(4) + t2 * qJD(5) + t14 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t158, t118, t268, t105 - t251, 0, 0, 0, 0, 0, t247 - t308, t203 * t268 + t246, -t291, qJD(3) * t15 + qJD(5) * t11 + t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, -t210, t233 * t96, -t214, -t144, qJD(3) * t31 - qJD(5) * t53 + t315, qJD(3) * t32 + qJD(5) * t52 + t316, qJD(3) * t5 - t173 * t256 + t337, qJD(2) * t12 + qJD(3) * t2 + qJD(4) * t11 - t48 * t340 + t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t284, qJD(2) * t73 + qJD(3) * t14 - t318; 0, 0, 0, 0, 0, -t262, -t264, 0, 0, 0, 0, 0, t162, -t158, t270, -t162, t158, qJD(3) * t229 - t276 - t312, 0, 0, 0, 0, 0, -t243 + t246 + t289, t307 + t308 - t311, -t97 * qJD(3), -qJD(3) * t20 - qJD(4) * t59 - qJD(5) * t10 - qJD(6) * t72 - t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, -t267, 0, -t265, t267, t292, 0, 0, 0, 0, 0, t242, t286, -t285, -t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, 0, 0, 0, 0, 0, 0, 0, 0, -t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, t363, 0, -t256 - t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t290; 0, 0, 0, 0, 0, 0, 0, t118, t288, 0, 0, 0, -t234 * t175, t234 * t173, 0, t160 - t314, -t280 - t313, -qJD(2) * t229 - t294, -t118 * t197 + t89, -0.2e1 * t203 * t214, -t244 - t310, -t243 - t309, t235, qJD(5) * t56 - t201 * t280 - t301, -qJD(2) * t96 + qJD(5) * t57 - t300, qJD(2) * t97 - t325 + t357, qJD(2) * t20 + qJD(4) * t16 - qJD(5) * t1 + qJD(6) * t13 - t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, t267, 0, t265, -t267, -t292, 0, 0, 0, 0, 0, -t242, -t286, t285, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), qJ(4) * qJD(4), -t241, t187 * qJD(5), 0, 0, 0, qJ(4) * t272 + t275, -qJ(4) * t273 + t274, qJD(6) * t282, qJD(4) * t190 + qJD(5) * t68 - qJD(6) * t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t279, 0, 0, 0, 0, 0, t277, t260, 0, qJD(6) * t180 + t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t208, -t223, t123, t269, t201 * t271 - t216, t203 * t271 - t217, t364, -t177 * t340 + t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t261, qJD(4) * t180 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t118, -t268, t160 + t251, 0, 0, 0, 0, 0, -t247 - t307 (-qJD(5) * t175 - t268) * t203, t291, qJD(2) * t59 - qJD(3) * t16 - t317 - t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, 0, 0, 0, 0, 0, 0, 0, 0, t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t279, 0, 0, 0, 0, 0, -t277, -t260, 0, qJD(6) * t181 - t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t363, -t233 * t203, 0, -t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, t210 (-t203 * t267 + t277) * t175, t213 * t175, -t144, -qJD(3) * t56 + qJD(4) * t92 + t160 * t203 - t315, -qJD(2) * t92 - qJD(3) * t57 + t175 * t274 - t316, -qJD(3) * t212 - t337, qJD(2) * t10 + qJD(3) * t1 + qJD(4) * t212 - qJD(6) * t258 - t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, -t287, 0, t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, t208, t201 * t265, t143, -t269, t216, t217, -t358, -qJD(6) * t348 - t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t287, t143, 0, t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284, qJD(2) * t72 - qJD(3) * t13 + t173 * t257 + t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t261, -qJD(4) * t181 - t225 + t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t4;
