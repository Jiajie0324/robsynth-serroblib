% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:54:37
% EndTime: 2019-05-05 17:54:59
% DurationCPUTime: 21.07s
% Computational Cost: add. (50962->642), mult. (124102->889), div. (0->0), fcn. (90206->8), ass. (0->470)
t837 = qJD(3) ^ 2;
t828 = sin(pkin(9));
t829 = cos(pkin(9));
t832 = sin(qJ(3));
t835 = cos(qJ(3));
t862 = t828 * t835 + t829 * t832;
t799 = t862 * qJD(1);
t942 = t799 ^ 2;
t776 = t942 + t837;
t902 = t828 * t832;
t797 = (-t829 * t835 + t902) * qJD(1);
t905 = t799 * t797;
t977 = qJDD(3) + t905;
t986 = t977 * t832;
t683 = t776 * t835 + t986;
t985 = t977 * t835;
t689 = -t776 * t832 + t985;
t619 = t683 * t829 + t689 * t828;
t1011 = qJ(2) * t619;
t626 = t683 * t828 - t689 * t829;
t1010 = qJ(2) * t626;
t777 = t942 - t837;
t736 = t905 - qJDD(3);
t992 = t736 * t832;
t679 = t777 * t835 + t992;
t991 = t736 * t835;
t685 = -t777 * t832 + t991;
t622 = t679 * t828 - t685 * t829;
t833 = sin(qJ(1));
t1009 = t622 * t833;
t836 = cos(qJ(1));
t1008 = t622 * t836;
t943 = t797 ^ 2;
t772 = t943 - t837;
t681 = t772 * t832 + t985;
t688 = -t772 * t835 + t986;
t624 = t681 * t828 + t688 * t829;
t1007 = t624 * t833;
t1006 = t624 * t836;
t1005 = t626 * t833;
t1004 = t626 * t836;
t1003 = -pkin(1) * t619 - pkin(2) * t683;
t1001 = pkin(7) * t683;
t1000 = pkin(7) * t689;
t999 = t679 * t829 + t685 * t828;
t998 = t681 * t829 - t688 * t828;
t734 = -t837 - t943;
t659 = t734 * t832 - t991;
t662 = -t734 * t835 - t992;
t593 = t659 * t829 - t662 * t828;
t997 = qJ(2) * t593;
t596 = t659 * t828 + t662 * t829;
t996 = qJ(2) * t596;
t995 = t596 * t833;
t994 = t596 * t836;
t993 = -pkin(1) * t593 - pkin(2) * t659;
t831 = sin(qJ(5));
t834 = cos(qJ(5));
t766 = qJD(3) * t831 - t834 * t797;
t768 = qJD(3) * t834 + t797 * t831;
t709 = t768 * t766;
t784 = t797 * qJD(3);
t953 = t862 * qJDD(1);
t745 = t953 - t784;
t732 = qJDD(5) + t745;
t970 = t709 - t732;
t989 = pkin(5) * t970;
t988 = pkin(7) * t659;
t987 = pkin(7) * t662;
t704 = -t784 + t745;
t962 = qJ(4) * t704;
t812 = g(1) * t836 + g(2) * t833;
t838 = qJD(1) ^ 2;
t969 = -pkin(1) * t838 + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t812;
t811 = t833 * g(1) - t836 * g(2);
t867 = -qJDD(2) + t811;
t824 = t828 ^ 2;
t825 = t829 ^ 2;
t893 = t824 + t825;
t940 = pkin(2) * t829;
t735 = t838 * (pkin(7) * t893 + qJ(2)) + (pkin(1) + t940) * qJDD(1) + t867;
t889 = t799 * qJD(3);
t978 = pkin(3) * t889 - 0.2e1 * qJD(4) * t799 - t735;
t941 = pkin(3) + pkin(8);
t954 = -t943 - t942;
t976 = pkin(1) * t954;
t975 = pkin(2) * t954;
t899 = t831 * t970;
t974 = t833 * t954;
t955 = -t942 + t943;
t973 = t833 * t955;
t972 = t836 * t954;
t971 = t836 * t955;
t920 = t970 * t834;
t851 = (-t797 * t832 - t799 * t835) * qJD(3);
t852 = (-t797 * t835 + t799 * t832) * qJD(3);
t948 = -t828 * t851 + t829 * t852;
t968 = t833 * qJDD(3) + t836 * t948;
t878 = t836 * t905;
t864 = t835 * t745 - t832 * t889;
t866 = t832 * t745 + t835 * t889;
t945 = -t828 * t866 + t829 * t864;
t967 = t833 * t945 - t878;
t886 = qJDD(1) * t829;
t795 = qJDD(1) * t902 - t835 * t886;
t743 = t795 + t889;
t855 = t743 * t832 + t784 * t835;
t865 = -t835 * t743 + t784 * t832;
t947 = -t828 * t865 + t829 * t855;
t966 = t833 * t947 + t878;
t965 = -qJDD(3) * t836 + t833 * t948;
t879 = t833 * t905;
t964 = t836 * t945 + t879;
t963 = t836 * t947 - t879;
t764 = t766 ^ 2;
t788 = qJD(5) + t799;
t786 = t788 ^ 2;
t677 = -t786 - t764;
t597 = t677 * t831 - t920;
t598 = t677 * t834 + t899;
t961 = pkin(4) * t597 - qJ(4) * t598;
t765 = t768 ^ 2;
t691 = -t765 - t786;
t657 = t709 + t732;
t922 = t657 * t831;
t609 = t691 * t834 - t922;
t921 = t657 * t834;
t610 = -t831 * t691 - t921;
t960 = pkin(4) * t609 - qJ(4) * t610;
t673 = -qJD(5) * t766 + qJDD(3) * t834 + t743 * t831;
t720 = t788 * t766;
t959 = t673 - t720;
t703 = t784 + t745;
t771 = pkin(4) * t799 - qJD(3) * pkin(8);
t841 = -t962 + t978;
t551 = -pkin(4) * t943 + t743 * t941 - t799 * t771 + t841;
t932 = t829 * g(3);
t715 = -t932 + (-pkin(7) * qJDD(1) + t838 * t940 - t969) * t828;
t752 = -g(3) * t828 + t829 * t969;
t819 = t825 * t838;
t719 = -pkin(2) * t819 + pkin(7) * t886 + t752;
t647 = -t835 * t715 + t832 * t719;
t731 = pkin(3) * t797 - qJ(4) * t799;
t856 = -qJDD(3) * pkin(3) - t837 * qJ(4) + t799 * t731 + qJDD(4) + t647;
t554 = pkin(4) * t703 + pkin(8) * t736 + t856;
t894 = -t831 * t551 + t834 * t554;
t956 = qJ(6) * t720 + 0.2e1 * qJD(6) * t768 - t894 + t989;
t498 = t834 * t551 + t831 * t554;
t869 = t831 * qJDD(3) - t834 * t743;
t672 = -qJD(5) * t768 - t869;
t712 = pkin(5) * t788 - qJ(6) * t768;
t853 = t672 * qJ(6) - 0.2e1 * qJD(6) * t766 - t788 * t712 + t498;
t951 = t838 * t893;
t949 = t828 * t852 + t829 * t851;
t946 = t828 * t855 + t829 * t865;
t944 = t828 * t864 + t829 * t866;
t939 = pkin(3) * t835;
t641 = t673 + t720;
t849 = (-qJD(5) + t788) * t768 - t869;
t562 = -t641 * t834 + t831 * t849;
t669 = -t764 - t765;
t530 = -t562 * t835 + t669 * t832;
t531 = t562 * t832 + t669 * t835;
t479 = -t530 * t828 + t531 * t829;
t564 = t831 * t641 + t834 * t849;
t446 = t479 * t833 - t564 * t836;
t938 = pkin(6) * t446;
t637 = (qJD(5) + t788) * t768 + t869;
t537 = -t597 * t835 + t637 * t832;
t538 = t597 * t832 + t637 * t835;
t487 = -t537 * t828 + t538 * t829;
t461 = t487 * t833 - t598 * t836;
t937 = pkin(6) * t461;
t543 = -t609 * t835 + t832 * t959;
t544 = t609 * t832 + t835 * t959;
t490 = -t543 * t828 + t544 * t829;
t465 = t490 * t833 - t610 * t836;
t936 = pkin(6) * t465;
t935 = pkin(7) * t530;
t934 = pkin(7) * t537;
t933 = pkin(7) * t543;
t478 = t530 * t829 + t531 * t828;
t931 = qJ(2) * t478;
t486 = t537 * t829 + t538 * t828;
t930 = qJ(2) * t486;
t489 = t543 * t829 + t544 * t828;
t929 = qJ(2) * t489;
t926 = qJDD(1) * pkin(1);
t463 = -qJ(6) * t673 - t956;
t925 = t463 * t834;
t648 = t832 * t715 + t835 * t719;
t579 = -t647 * t835 + t648 * t832;
t924 = t579 * t828;
t923 = t579 * t829;
t701 = t743 + t889;
t919 = t701 * t835;
t918 = t704 * t832;
t915 = t735 * t832;
t914 = t735 * t835;
t909 = t788 * t831;
t908 = t788 * t834;
t789 = t838 * qJ(2) + t867 + t926;
t907 = t789 * t833;
t906 = t789 * t836;
t904 = t824 * t838;
t903 = t828 * t829;
t901 = t831 * t463;
t860 = t837 * pkin(3) + t797 * t731 - t648;
t848 = qJDD(3) * qJ(4) - t860;
t844 = -t743 * pkin(4) - pkin(8) * t943 + t848;
t870 = (0.2e1 * qJD(4) + t771) * qJD(3);
t557 = t870 + t844;
t900 = t831 * t557;
t898 = t834 * t557;
t897 = -pkin(1) * t564 + qJ(2) * t479;
t896 = -pkin(1) * t598 + qJ(2) * t487;
t895 = -pkin(1) * t610 + qJ(2) * t490;
t887 = qJD(4) * qJD(3);
t885 = qJDD(1) * t833;
t884 = qJDD(1) * t836;
t881 = t832 * t709;
t880 = t835 * t709;
t876 = qJ(4) * t832 + pkin(2);
t875 = -pkin(2) * t564 + pkin(7) * t531;
t874 = -pkin(2) * t598 + pkin(7) * t538;
t873 = -pkin(2) * t610 + pkin(7) * t544;
t872 = t789 + t926;
t506 = pkin(4) * t562 - qJ(4) * t564;
t580 = t647 * t832 + t835 * t648;
t751 = t828 * t969 + t932;
t676 = t751 * t828 + t829 * t752;
t763 = -t811 * t833 - t836 * t812;
t810 = -t833 * t838 + t884;
t868 = -pkin(6) * t810 - g(3) * t833;
t441 = t498 * t831 + t834 * t894;
t442 = t834 * t498 - t831 * t894;
t675 = t751 * t829 - t752 * t828;
t762 = t811 * t836 - t812 * t833;
t809 = t836 * t838 + t885;
t859 = pkin(4) * t637 - t598 * t941;
t858 = pkin(4) * t959 - t610 * t941;
t857 = pkin(4) * t669 - t564 * t941;
t803 = t829 * t951;
t759 = -t803 * t833 + t829 * t884;
t854 = t803 * t836 + t829 * t885;
t847 = -pkin(1) * t478 - pkin(2) * t530 - qJ(4) * t669 + t562 * t941;
t846 = -pkin(1) * t486 - pkin(2) * t537 - qJ(4) * t637 + t597 * t941;
t845 = -pkin(1) * t489 - pkin(2) * t543 - qJ(4) * t959 + t609 * t941;
t604 = t848 + 0.2e1 * t887;
t843 = -t672 * pkin(5) - t764 * qJ(6) + t768 * t712 + qJDD(6) + t844;
t512 = t870 + t843;
t842 = -t743 * pkin(3) - t978;
t822 = -0.2e1 * t887;
t818 = t825 * qJDD(1);
t817 = t824 * qJDD(1);
t808 = t819 - t904;
t807 = t819 + t904;
t806 = t818 - t817;
t805 = t818 + t817;
t802 = t828 * t951;
t790 = -pkin(6) * t809 + g(3) * t836;
t770 = t810 * t903;
t769 = t809 * t903;
t760 = t802 * t836 + t828 * t885;
t758 = t802 * t833 - t828 * t884;
t754 = t805 * t836 - t807 * t833;
t753 = t805 * t833 + t807 * t836;
t744 = t953 - 0.2e1 * t784;
t742 = t795 + 0.2e1 * t889;
t717 = -t765 + t786;
t716 = t764 - t786;
t705 = t765 - t764;
t702 = -t743 + t889;
t668 = t703 * t832 - t795 * t835;
t667 = -t742 * t835 - t744 * t832;
t666 = t702 * t835 + t832 * t953;
t665 = -t703 * t835 - t795 * t832;
t664 = -t742 * t832 + t744 * t835;
t663 = t702 * t832 - t835 * t953;
t654 = (t766 * t834 - t768 * t831) * t788;
t653 = (t766 * t831 + t768 * t834) * t788;
t650 = t676 * t836 - t907;
t649 = t676 * t833 + t906;
t645 = -t914 + t1001;
t644 = -t918 - t919;
t643 = -t701 * t832 + t704 * t835;
t635 = -t915 - t988;
t634 = -t673 * t834 + t768 * t909;
t633 = -t673 * t831 - t768 * t908;
t632 = t672 * t831 - t766 * t908;
t631 = -t672 * t834 - t766 * t909;
t618 = -t653 * t832 + t732 * t835;
t617 = t653 * t835 + t732 * t832;
t616 = -t716 * t834 + t922;
t615 = t717 * t831 + t920;
t614 = -t716 * t831 - t921;
t613 = -t717 * t834 + t899;
t612 = -pkin(2) * t744 - t1000 - t915;
t611 = -pkin(2) * t742 + t914 - t987;
t603 = -t665 * t828 + t668 * t829;
t602 = -t664 * t828 + t667 * t829;
t601 = -t663 * t828 + t666 * t829;
t600 = t665 * t829 + t668 * t828;
t599 = t663 * t829 + t666 * t828;
t592 = t842 + t962;
t588 = t744 * t833 + t1004;
t587 = -t744 * t836 + t1005;
t586 = -t633 * t832 + t880;
t585 = -t631 * t832 - t880;
t584 = t633 * t835 + t881;
t583 = t631 * t835 - t881;
t582 = -t704 * t833 - t1004;
t581 = t704 * t836 - t1005;
t578 = -pkin(5) * t959 - qJ(6) * t657;
t577 = t742 * t833 - t994;
t576 = -t742 * t836 - t995;
t575 = -qJ(4) * t954 + t856;
t574 = -pkin(3) * t954 + t604;
t573 = t603 * t836 + t974;
t572 = t601 * t836 + t974;
t571 = t603 * t833 - t972;
t570 = t601 * t833 - t972;
t569 = (t701 + t743) * pkin(3) + t841;
t568 = t842 + 0.2e1 * t962;
t567 = -t701 * t833 + t994;
t566 = t701 * t836 + t995;
t565 = -t643 * t828 + t644 * t829;
t563 = t637 * t834 + t831 * t959;
t561 = t637 * t831 - t834 * t959;
t556 = pkin(2) * t735 + pkin(7) * t580;
t555 = -pkin(1) * t599 - pkin(2) * t663;
t550 = -t613 * t832 + t641 * t835;
t549 = -t614 * t832 + t835 * t849;
t548 = t613 * t835 + t641 * t832;
t547 = t614 * t835 + t832 * t849;
t541 = -pkin(7) * t663 - t579;
t540 = -t617 * t828 + t618 * t829;
t539 = t617 * t829 + t618 * t828;
t535 = -t561 * t832 + t705 * t835;
t534 = t561 * t835 + t705 * t832;
t533 = -t1003 + t648;
t532 = -pkin(1) * t600 - pkin(2) * t665 + pkin(3) * t703 + qJ(4) * t795;
t528 = t604 * t835 + t832 * t856;
t527 = t604 * t832 - t835 * t856;
t526 = pkin(7) * t666 + t580 - t975;
t525 = t647 + t993;
t524 = -pkin(3) * t918 + t568 * t835 - t1001;
t523 = qJ(4) * t919 - t569 * t832 + t988;
t522 = -t584 * t828 + t586 * t829;
t521 = -t583 * t828 + t585 * t829;
t520 = t584 * t829 + t586 * t828;
t519 = t583 * t829 + t585 * t828;
t518 = t540 * t836 - t654 * t833;
t517 = t540 * t833 + t654 * t836;
t516 = -t612 * t828 + t645 * t829 + t1011;
t515 = t1000 + t832 * t568 + (pkin(2) + t939) * t704;
t514 = t580 * t829 - t924;
t513 = t580 * t828 + t923;
t511 = t835 * t569 + t701 * t876 + t987;
t510 = -pkin(3) * t776 + t822 + (-qJDD(3) - t977) * qJ(4) + t860 + t1003;
t509 = -t611 * t828 + t635 * t829 - t997;
t508 = t514 * t836 - t735 * t833;
t507 = t514 * t833 + t735 * t836;
t505 = -qJ(6) * t691 + t512;
t504 = -pkin(3) * t736 + qJ(4) * t734 - t856 - t993;
t503 = t522 * t836 - t634 * t833;
t502 = t521 * t836 - t632 * t833;
t501 = t522 * t833 + t634 * t836;
t500 = t521 * t833 + t632 * t836;
t499 = -pkin(7) * t665 - t574 * t832 + t575 * t835;
t495 = -t548 * t828 + t550 * t829;
t494 = -t547 * t828 + t549 * t829;
t493 = t548 * t829 + t550 * t828;
t492 = t547 * t829 + t549 * t828;
t491 = pkin(7) * t668 + t574 * t835 + t575 * t832 - t975;
t484 = -pkin(5) * t641 + t506;
t483 = -t534 * t828 + t535 * t829;
t482 = t534 * t829 + t535 * t828;
t481 = -pkin(5) * t637 + qJ(6) * t677 - qJD(3) * t771 + t822 - t843;
t480 = -pkin(1) * t513 - pkin(2) * t579;
t476 = -t527 * t828 + t528 * t829;
t475 = t527 * t829 + t528 * t828;
t474 = -pkin(7) * t527 + (-pkin(3) * t832 + qJ(4) * t835) * t592;
t473 = t858 - t900;
t472 = t495 * t836 - t615 * t833;
t471 = t494 * t836 - t616 * t833;
t470 = t495 * t833 + t615 * t836;
t469 = t494 * t833 + t616 * t836;
t468 = t859 + t898;
t467 = -pkin(5) * t764 + t853;
t466 = t490 * t836 + t610 * t833;
t464 = pkin(6) * t466;
t462 = t487 * t836 + t598 * t833;
t460 = pkin(6) * t462;
t458 = -qJ(2) * t599 - t526 * t828 + t541 * t829;
t457 = t476 * t836 - t592 * t833;
t456 = t476 * t833 + t592 * t836;
t455 = -t498 + t960;
t454 = pkin(7) * t528 + (t876 + t939) * t592;
t453 = t483 * t836 - t563 * t833;
t452 = t483 * t833 + t563 * t836;
t451 = t894 + t961;
t450 = -pkin(7) * t923 - qJ(2) * t513 - t556 * t828;
t449 = (t641 + t673) * qJ(6) + t956;
t448 = -t515 * t828 + t524 * t829 - t1011;
t447 = t479 * t836 + t564 * t833;
t445 = pkin(6) * t447;
t444 = qJ(6) * t849 + (-t669 - t764) * pkin(5) + t853;
t443 = -t511 * t828 + t523 * t829 + t997;
t440 = (t691 + t764) * pkin(5) - t853 + t960;
t439 = -t831 * t505 - t834 * t578 + t858;
t438 = -pkin(5) * t512 + qJ(6) * t467;
t437 = -qJ(6) * t899 - t834 * t481 + t859;
t436 = t463 + t961 - t989;
t435 = -qJ(2) * t600 - t491 * t828 + t499 * t829;
t434 = t441 * t832 + t557 * t835;
t433 = -t441 * t835 + t557 * t832;
t432 = -pkin(1) * t475 - pkin(2) * t527 + pkin(3) * t856 - qJ(4) * t604;
t431 = t467 * t834 - t901;
t430 = t467 * t831 + t925;
t429 = t845 - t898;
t428 = t846 - t900;
t427 = -t442 + t857;
t426 = t455 * t835 - t473 * t832 - t933;
t425 = t451 * t835 - t468 * t832 - t934;
t424 = t430 * t832 + t512 * t835;
t423 = -t430 * t835 + t512 * t832;
t422 = t455 * t832 + t473 * t835 + t873;
t421 = -t505 * t834 + t578 * t831 + t845;
t420 = t451 * t832 + t468 * t835 + t874;
t419 = -qJ(6) * t920 + t481 * t831 + t846;
t418 = pkin(4) * t441 - qJ(4) * t442;
t417 = -qJ(2) * t475 - t454 * t828 + t474 * t829;
t416 = pkin(4) * t557 - t442 * t941;
t415 = -t834 * t444 - t831 * t449 + t857;
t414 = -t427 * t832 + t506 * t835 - t935;
t413 = -t439 * t832 + t440 * t835 - t933;
t412 = t441 + t847;
t411 = -t433 * t828 + t434 * t829;
t410 = t433 * t829 + t434 * t828;
t409 = t436 * t835 - t437 * t832 - t934;
t408 = t427 * t835 + t506 * t832 + t875;
t407 = t439 * t835 + t440 * t832 + t873;
t406 = t436 * t832 + t437 * t835 + t874;
t405 = -t415 * t832 + t484 * t835 - t935;
t404 = t444 * t831 - t449 * t834 + t847;
t403 = t415 * t835 + t484 * t832 + t875;
t402 = t411 * t836 + t442 * t833;
t401 = t411 * t833 - t442 * t836;
t400 = pkin(4) * t430 + pkin(5) * t463 - qJ(4) * t431;
t399 = -t423 * t828 + t424 * t829;
t398 = t423 * t829 + t424 * t828;
t397 = -t422 * t828 + t426 * t829 - t929;
t396 = -t420 * t828 + t425 * t829 - t930;
t395 = pkin(4) * t512 + qJ(6) * t901 - t431 * t941 - t834 * t438;
t394 = t399 * t836 + t431 * t833;
t393 = t399 * t833 - t431 * t836;
t392 = -t408 * t828 + t414 * t829 - t931;
t391 = -pkin(7) * t433 - t416 * t832 + t418 * t835;
t390 = -t407 * t828 + t413 * t829 - t929;
t389 = -t406 * t828 + t409 * t829 - t930;
t388 = -pkin(1) * t410 - pkin(2) * t433 - qJ(4) * t557 + t441 * t941;
t387 = -pkin(2) * t442 + pkin(7) * t434 + t416 * t835 + t418 * t832;
t386 = -t403 * t828 + t405 * t829 - t931;
t385 = -pkin(7) * t423 - t395 * t832 + t400 * t835;
t384 = -pkin(1) * t398 - pkin(2) * t423 - qJ(4) * t512 + qJ(6) * t925 + t430 * t941 + t831 * t438;
t383 = -pkin(2) * t431 + pkin(7) * t424 + t395 * t835 + t400 * t832;
t382 = -qJ(2) * t410 - t387 * t828 + t391 * t829;
t381 = -qJ(2) * t398 - t383 * t828 + t385 * t829;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t809, -t810, 0, t763, 0, 0, 0, 0, 0, 0, -t854, t760, t754, t650, 0, 0, 0, 0, 0, 0, t577, t588, t572, t508, 0, 0, 0, 0, 0, 0, t573, t567, t582, t457, 0, 0, 0, 0, 0, 0, t462, t466, t447, t402, 0, 0, 0, 0, 0, 0, t462, t466, t447, t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t810, -t809, 0, t762, 0, 0, 0, 0, 0, 0, t759, t758, t753, t649, 0, 0, 0, 0, 0, 0, t576, t587, t570, t507, 0, 0, 0, 0, 0, 0, t571, t566, t581, t456, 0, 0, 0, 0, 0, 0, t461, t465, t446, t401, 0, 0, 0, 0, 0, 0, t461, t465, t446, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t675, 0, 0, 0, 0, 0, 0, t593, -t619, t599, t513, 0, 0, 0, 0, 0, 0, t600, -t593, t619, t475, 0, 0, 0, 0, 0, 0, t486, t489, t478, t410, 0, 0, 0, 0, 0, 0, t486, t489, t478, t398; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t810, 0, -t809, 0, t868, -t790, -t762, -pkin(6) * t762, t770, t806 * t836 - t808 * t833, t760, -t770, t854, 0, -pkin(6) * t759 - t751 * t833 - t828 * t906, -pkin(6) * t758 - t752 * t833 - t829 * t906, -pkin(6) * t753 + t675 * t836, -pkin(6) * t649 - (pkin(1) * t833 - qJ(2) * t836) * t675, t964, t602 * t836 - t973, t833 * t953 + t1008, t963, -t795 * t833 - t1006, t968, -pkin(6) * t576 + t509 * t836 - t525 * t833, -pkin(6) * t587 + t516 * t836 - t533 * t833, -pkin(6) * t570 + t458 * t836 - t555 * t833, -pkin(6) * t507 + t450 * t836 - t480 * t833, t968, -t703 * t833 - t1008, -t702 * t833 + t1006, t964, t565 * t836 - t973, t963, -pkin(6) * t571 + t435 * t836 - t532 * t833, -pkin(6) * t566 + t443 * t836 - t504 * t833, -pkin(6) * t581 + t448 * t836 - t510 * t833, -pkin(6) * t456 + t417 * t836 - t432 * t833, t503, t453, t472, t502, t471, t518, t396 * t836 - t428 * t833 - t937, t397 * t836 - t429 * t833 - t936, t392 * t836 - t412 * t833 - t938, -pkin(6) * t401 + t382 * t836 - t388 * t833, t503, t453, t472, t502, t471, t518, t389 * t836 - t419 * t833 - t937, t390 * t836 - t421 * t833 - t936, t386 * t836 - t404 * t833 - t938, -pkin(6) * t393 + t381 * t836 - t384 * t833; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t809, 0, t810, 0, t790, t868, t763, pkin(6) * t763, t769, t806 * t833 + t808 * t836, t758, -t769, -t759, 0, -pkin(6) * t854 + t751 * t836 - t828 * t907, pkin(6) * t760 + t752 * t836 - t829 * t907, pkin(6) * t754 + t675 * t833, pkin(6) * t650 - (-pkin(1) * t836 - qJ(2) * t833) * t675, t967, t602 * t833 + t971, -t836 * t953 + t1009, t966, t795 * t836 - t1007, t965, pkin(6) * t577 + t509 * t833 + t525 * t836, pkin(6) * t588 + t516 * t833 + t533 * t836, pkin(6) * t572 + t458 * t833 + t555 * t836, pkin(6) * t508 + t450 * t833 + t480 * t836, t965, t703 * t836 - t1009, t702 * t836 + t1007, t967, t565 * t833 + t971, t966, pkin(6) * t573 + t435 * t833 + t532 * t836, pkin(6) * t567 + t443 * t833 + t504 * t836, pkin(6) * t582 + t448 * t833 + t510 * t836, pkin(6) * t457 + t417 * t833 + t432 * t836, t501, t452, t470, t500, t469, t517, t396 * t833 + t428 * t836 + t460, t397 * t833 + t429 * t836 + t464, t392 * t833 + t412 * t836 + t445, pkin(6) * t402 + t382 * t833 + t388 * t836, t501, t452, t470, t500, t469, t517, t389 * t833 + t419 * t836 + t460, t390 * t833 + t421 * t836 + t464, t386 * t833 + t404 * t836 + t445, pkin(6) * t394 + t381 * t833 + t384 * t836; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t811, t812, 0, 0, t817, 0.2e1 * t828 * t886, 0, t818, 0, 0, -qJ(2) * t803 + t829 * t872, qJ(2) * t802 - t828 * t872, pkin(1) * t807 + qJ(2) * t805 + t676, pkin(1) * t789 + qJ(2) * t676, t944, t664 * t829 + t667 * t828, -t999, t946, t998, t949, -pkin(1) * t742 + t611 * t829 + t635 * t828 - t996, -pkin(1) * t744 + t612 * t829 + t645 * t828 + t1010, qJ(2) * t601 + t526 * t829 + t541 * t828 - t976, pkin(1) * t735 - pkin(7) * t924 + qJ(2) * t514 + t556 * t829, t949, t999, -t998, t944, t643 * t829 + t644 * t828, t946, qJ(2) * t603 + t491 * t829 + t499 * t828 - t976, pkin(1) * t701 + t511 * t829 + t523 * t828 + t996, pkin(1) * t704 + t515 * t829 + t524 * t828 - t1010, pkin(1) * t592 + qJ(2) * t476 + t454 * t829 + t474 * t828, t520, t482, t493, t519, t492, t539, t420 * t829 + t425 * t828 + t896, t422 * t829 + t426 * t828 + t895, t408 * t829 + t414 * t828 + t897, -pkin(1) * t442 + qJ(2) * t411 + t387 * t829 + t391 * t828, t520, t482, t493, t519, t492, t539, t406 * t829 + t409 * t828 + t896, t407 * t829 + t413 * t828 + t895, t403 * t829 + t405 * t828 + t897, -pkin(1) * t431 + qJ(2) * t399 + t383 * t829 + t385 * t828;];
tauB_reg  = t1;
