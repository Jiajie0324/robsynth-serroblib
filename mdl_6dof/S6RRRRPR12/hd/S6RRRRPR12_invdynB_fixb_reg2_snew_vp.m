% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 00:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR12_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR12_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR12_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 00:33:39
% EndTime: 2019-05-08 00:37:27
% DurationCPUTime: 220.05s
% Computational Cost: add. (2323896->1288), mult. (5763938->2151), div. (0->0), fcn. (4928727->16), ass. (0->945)
t1444 = sin(pkin(7));
t1447 = cos(pkin(7));
t1448 = cos(pkin(6));
t1697 = qJD(1) * t1448;
t1435 = qJD(2) + t1697;
t1434 = t1435 ^ 2;
t1445 = sin(pkin(6));
t1452 = sin(qJ(2));
t1457 = cos(qJ(2));
t1453 = sin(qJ(1));
t1458 = cos(qJ(1));
t1431 = t1453 * g(1) - t1458 * g(2);
t1528 = qJDD(1) * pkin(1) + t1431;
t1502 = t1448 * t1528;
t1705 = pkin(10) * t1452;
t1529 = -pkin(2) * t1457 - t1444 * t1705;
t1518 = t1445 * t1529;
t1432 = g(1) * t1458 + t1453 * g(2);
t1717 = qJD(1) ^ 2;
t1704 = t1717 * pkin(1);
t1520 = t1432 + t1704;
t1621 = qJDD(1) * t1448 + qJDD(2);
t1596 = t1621 * pkin(2);
t1706 = pkin(10) * t1447;
t1642 = -pkin(9) - t1706;
t1646 = qJDD(1) * t1452;
t1655 = t1447 * t1457;
t1707 = pkin(10) * t1444;
t1708 = pkin(9) * t1448;
t1465 = t1434 * t1707 + t1452 * t1520 + t1457 * t1502 + t1596 + (-t1457 * g(3) + t1642 * t1646 + ((-qJD(2) + t1435) * pkin(10) * t1655 + qJD(1) * (-t1452 * t1518 + t1457 * t1708)) * qJD(1)) * t1445;
t1660 = t1445 * t1452;
t1640 = qJD(1) * t1660;
t1433 = qJD(2) * t1640;
t1441 = t1452 ^ 2;
t1442 = t1457 ^ 2;
t1647 = t1441 + t1442;
t1651 = qJD(2) + t1435;
t1664 = t1435 * t1452;
t1698 = qJD(1) * t1445;
t1703 = t1448 * g(3);
t1467 = t1433 * pkin(2) - t1703 + ((-pkin(1) + t1529) * qJDD(1) + (pkin(2) * t1664 - pkin(9) * t1698 + (-t1651 * t1457 * t1444 - t1447 * t1647 * t1698) * pkin(10)) * qJD(1) - t1431) * t1445;
t1258 = t1444 * t1465 - t1447 * t1467;
t1451 = sin(qJ(3));
t1456 = cos(qJ(3));
t1659 = t1445 * t1457;
t1639 = qJD(1) * t1659;
t1619 = t1447 * t1639;
t1661 = t1444 * t1456;
t1393 = -t1435 * t1661 + t1451 * t1640 - t1456 * t1619;
t1645 = qJDD(1) * t1457;
t1613 = t1445 * t1645 - t1433;
t1473 = t1444 * t1621 + t1447 * t1613;
t1696 = qJD(1) * t1457;
t1521 = qJD(2) * t1696 + t1646;
t1486 = t1521 * t1445;
t1470 = t1451 * t1473 + t1456 * t1486;
t1349 = -t1393 * qJD(3) + t1470;
t1620 = t1444 * t1639;
t1658 = t1447 * t1435;
t1410 = -qJD(3) + t1620 - t1658;
t1375 = t1393 * t1410;
t1306 = t1375 + t1349;
t1739 = -t1306 * pkin(11) - t1258;
t1443 = sin(pkin(13));
t1662 = t1444 * t1451;
t1395 = t1435 * t1662 + (t1451 * t1655 + t1452 * t1456) * t1698;
t1450 = sin(qJ(4));
t1455 = cos(qJ(4));
t1371 = -t1450 * t1395 - t1410 * t1455;
t1372 = t1395 * t1455 - t1410 * t1450;
t1446 = cos(pkin(13));
t1321 = -t1446 * t1371 + t1372 * t1443;
t1323 = t1443 * t1371 + t1446 * t1372;
t1257 = t1323 * t1321;
t1475 = t1451 * t1486 - t1456 * t1473;
t1348 = -t1395 * qJD(3) - t1475;
t1347 = qJDD(4) - t1348;
t1722 = -t1257 + t1347;
t1734 = t1443 * t1722;
t1733 = t1446 * t1722;
t1449 = sin(qJ(6));
t1388 = qJD(4) + t1393;
t1454 = cos(qJ(6));
t1286 = t1323 * t1449 - t1454 * t1388;
t1288 = t1323 * t1454 + t1388 * t1449;
t1221 = t1288 * t1286;
t1479 = -t1444 * t1613 + t1447 * t1621 + qJDD(3);
t1622 = t1349 * t1450 - t1455 * t1479;
t1278 = -qJD(4) * t1372 - t1622;
t1279 = t1371 * qJD(4) + t1455 * t1349 + t1450 * t1479;
t1624 = -t1446 * t1278 + t1279 * t1443;
t1612 = qJDD(6) + t1624;
t1723 = -t1221 + t1612;
t1732 = t1449 * t1723;
t1325 = t1371 * t1372;
t1721 = t1325 + t1347;
t1731 = t1450 * t1721;
t1730 = t1454 * t1723;
t1729 = t1455 * t1721;
t1728 = t1444 * t1467 + t1447 * t1465;
t1681 = t1323 * t1388;
t1174 = t1624 + t1681;
t1440 = t1445 ^ 2;
t1726 = t1440 * t1452;
t1672 = t1395 * t1393;
t1474 = t1479 - t1672;
t1725 = t1451 * t1474;
t1724 = t1456 * t1474;
t1206 = t1278 * t1443 + t1279 * t1446;
t1291 = t1388 * t1321;
t1177 = t1206 - t1291;
t1339 = t1388 * t1371;
t1249 = t1339 - t1279;
t1248 = t1339 + t1279;
t1315 = qJD(6) + t1321;
t1236 = t1315 * t1286;
t1629 = t1286 * qJD(6) - t1454 * t1206 - t1449 * t1347;
t1121 = t1629 + t1236;
t1625 = t1206 * t1449 - t1454 * t1347;
t1116 = (qJD(6) - t1315) * t1288 + t1625;
t1245 = (qJD(4) - t1388) * t1372 + t1622;
t1284 = t1286 ^ 2;
t1285 = t1288 ^ 2;
t1314 = t1315 ^ 2;
t1318 = t1321 ^ 2;
t1319 = t1323 ^ 2;
t1716 = t1371 ^ 2;
t1370 = t1372 ^ 2;
t1715 = t1388 ^ 2;
t1389 = t1393 ^ 2;
t1390 = t1395 ^ 2;
t1714 = t1410 ^ 2;
t1713 = 2 * qJD(5);
t1712 = pkin(3) * t1451;
t1711 = pkin(3) * t1456;
t1710 = pkin(5) * t1443;
t1709 = pkin(9) * t1445;
t1255 = pkin(5) * t1321 - pkin(12) * t1323;
t1360 = pkin(3) * t1393 - pkin(11) * t1395;
t1436 = g(3) * t1660;
t1487 = qJDD(1) * t1709 - t1432;
t1654 = t1448 * t1452;
t1320 = t1457 * t1487 + t1452 * t1502 - t1436 - pkin(2) * t1434 + t1473 * pkin(10) + (-pkin(1) * t1696 + (t1658 * t1705 + (pkin(9) * t1654 + t1457 * t1518) * qJD(1)) * t1445) * qJD(1);
t1652 = t1456 * t1320;
t1462 = pkin(11) * t1479 - t1393 * t1360 + t1451 * t1728 + t1652;
t1461 = -pkin(3) * t1714 + t1462;
t1669 = t1410 * t1395;
t1623 = -t1348 - t1669;
t1463 = t1623 * pkin(3) + t1739;
t1092 = t1450 * t1463 + t1455 * t1461;
t1333 = pkin(4) * t1388 - qJ(5) * t1372;
t1044 = -pkin(4) * t1716 + qJ(5) * t1278 - t1333 * t1388 + t1092;
t1091 = t1450 * t1461 - t1455 * t1463;
t1460 = pkin(4) * t1721 + qJ(5) * t1249 - t1091;
t1627 = t1044 * t1443 - t1446 * t1460;
t945 = -t1347 * pkin(5) - t1715 * pkin(12) + (t1713 + t1255) * t1323 + t1627;
t1702 = t1449 * t945;
t955 = t1323 * t1713 + t1627;
t956 = -0.2e1 * qJD(5) * t1321 + t1446 * t1044 + t1443 * t1460;
t875 = t1443 * t956 - t1446 * t955;
t1701 = t1450 * t875;
t1700 = t1454 * t945;
t1699 = t1455 * t875;
t1201 = t1320 * t1451 - t1456 * t1728;
t1181 = -t1479 * pkin(3) - t1714 * pkin(11) + t1360 * t1395 + t1201;
t1110 = -t1278 * pkin(4) - t1716 * qJ(5) + t1333 * t1372 + qJDD(5) + t1181;
t1009 = pkin(5) * t1174 - pkin(12) * t1177 + t1110;
t946 = -pkin(5) * t1715 + pkin(12) * t1347 - t1255 * t1321 + t956;
t886 = t1449 * t1009 + t1454 * t946;
t1695 = t1110 * t1443;
t1694 = t1110 * t1446;
t1140 = t1221 + t1612;
t1693 = t1140 * t1449;
t1692 = t1140 * t1454;
t1691 = t1181 * t1450;
t1690 = t1181 * t1455;
t1216 = t1257 + t1347;
t1689 = t1216 * t1443;
t1688 = t1216 * t1446;
t1687 = t1258 * t1451;
t1686 = t1258 * t1456;
t1267 = -t1325 + t1347;
t1685 = t1267 * t1450;
t1684 = t1267 * t1455;
t1683 = t1315 * t1449;
t1682 = t1315 * t1454;
t1334 = -t1479 - t1672;
t1680 = t1334 * t1451;
t1679 = t1334 * t1456;
t1678 = t1347 * t1451;
t1677 = t1388 * t1443;
t1676 = t1388 * t1446;
t1675 = t1388 * t1450;
t1674 = t1388 * t1455;
t1673 = t1393 * t1456;
t1480 = t1709 * t1717 + t1528;
t1405 = t1445 * t1480 + t1703;
t1671 = t1405 * t1452;
t1670 = t1405 * t1457;
t1653 = t1452 * t1717;
t1630 = t1457 * t1653;
t1430 = t1440 * t1630;
t1412 = t1430 + t1621;
t1668 = t1412 * t1452;
t1667 = t1412 * t1457;
t1413 = -t1430 + t1621;
t1666 = t1413 * t1452;
t1665 = t1413 * t1457;
t1663 = t1440 * t1717;
t1657 = t1447 * t1451;
t1656 = t1447 * t1456;
t1650 = qJD(3) - t1410;
t1643 = -pkin(5) * t1446 - pkin(4);
t1641 = t1435 * t1698;
t1638 = t1441 * t1663;
t1637 = t1442 * t1663;
t1636 = t1443 * t1221;
t1635 = t1446 * t1221;
t1634 = t1451 * t1257;
t1633 = t1456 * t1257;
t1632 = t1451 * t1325;
t1631 = t1456 * t1325;
t876 = t1443 * t955 + t1446 * t956;
t885 = -t1454 * t1009 + t1449 * t946;
t1628 = -t1435 + t1697;
t998 = t1091 * t1450 + t1455 * t1092;
t1407 = -t1431 * t1453 - t1458 * t1432;
t1429 = qJDD(1) * t1458 - t1453 * t1717;
t1618 = -pkin(8) * t1429 - g(3) * t1453;
t1411 = -t1638 - t1434;
t1380 = -t1411 * t1452 - t1665;
t1617 = pkin(9) * t1380 - t1671;
t1417 = -t1434 - t1637;
t1384 = t1417 * t1457 - t1668;
t1616 = pkin(9) * t1384 + t1670;
t1346 = -t1714 - t1389;
t1275 = t1346 * t1456 - t1725;
t1615 = pkin(10) * t1275 + t1686;
t1355 = -t1390 - t1714;
t1282 = -t1355 * t1451 + t1679;
t1614 = pkin(10) * t1282 - t1687;
t840 = t1449 * t886 - t1454 * t885;
t841 = t1449 * t885 + t1454 * t886;
t808 = t1443 * t841 - t1446 * t945;
t809 = t1443 * t945 + t1446 * t841;
t768 = -t1450 * t808 + t1455 * t809;
t1611 = t1451 * t768 - t1456 * t840;
t767 = t1450 * t809 + t1455 * t808;
t737 = -t1444 * t767 + t1447 * t1611;
t756 = t1451 * t840 + t1456 * t768;
t1610 = t1452 * t756 + t1457 * t737;
t827 = t1455 * t876 - t1701;
t1583 = -t1110 * t1456 + t1451 * t827;
t826 = t1450 * t876 + t1699;
t776 = -t1444 * t826 + t1447 * t1583;
t822 = t1110 * t1451 + t1456 * t827;
t1609 = t1452 * t822 + t1457 * t776;
t1120 = -t1236 + t1629;
t1018 = -t1116 * t1449 + t1120 * t1454;
t1020 = -t1116 * t1454 - t1120 * t1449;
t1188 = t1284 + t1285;
t988 = t1020 * t1443 + t1188 * t1446;
t989 = t1020 * t1446 - t1188 * t1443;
t909 = -t1450 * t988 + t1455 * t989;
t1594 = -t1018 * t1456 + t1451 * t909;
t908 = t1450 * t989 + t1455 * t988;
t839 = -t1444 * t908 + t1447 * t1594;
t873 = t1018 * t1451 + t1456 * t909;
t1608 = t1452 * t873 + t1457 * t839;
t1117 = (-qJD(6) - t1315) * t1288 - t1625;
t1017 = -t1117 * t1449 + t1121 * t1454;
t1019 = t1117 * t1454 + t1121 * t1449;
t1220 = -t1285 + t1284;
t990 = t1019 * t1443 + t1220 * t1446;
t991 = t1019 * t1446 - t1220 * t1443;
t922 = -t1450 * t990 + t1455 * t991;
t1595 = t1017 * t1456 + t1451 * t922;
t921 = t1450 * t991 + t1455 * t990;
t843 = -t1444 * t921 + t1447 * t1595;
t874 = -t1017 * t1451 + t1456 * t922;
t1607 = t1452 * t874 + t1457 * t843;
t1193 = -t1314 - t1284;
t1067 = t1193 * t1449 + t1730;
t1068 = t1193 * t1454 - t1732;
t1000 = t1068 * t1443 + t1117 * t1446;
t1001 = t1068 * t1446 - t1117 * t1443;
t929 = -t1000 * t1450 + t1001 * t1455;
t1587 = -t1067 * t1456 + t1451 * t929;
t928 = t1000 * t1455 + t1001 * t1450;
t846 = -t1444 * t928 + t1447 * t1587;
t890 = t1067 * t1451 + t1456 * t929;
t1606 = t1452 * t890 + t1457 * t846;
t1195 = -t1285 - t1314;
t1074 = t1195 * t1454 - t1693;
t1075 = -t1195 * t1449 - t1692;
t1002 = t1075 * t1443 + t1121 * t1446;
t1003 = t1075 * t1446 - t1121 * t1443;
t935 = -t1002 * t1450 + t1003 * t1455;
t1586 = -t1074 * t1456 + t1451 * t935;
t934 = t1002 * t1455 + t1003 * t1450;
t850 = -t1444 * t934 + t1447 * t1586;
t891 = t1074 * t1451 + t1456 * t935;
t1605 = t1452 * t891 + t1457 * t850;
t1235 = -t1285 + t1314;
t1102 = -t1235 * t1454 - t1732;
t1104 = -t1235 * t1449 + t1730;
t1013 = t1104 * t1443 + t1120 * t1446;
t1015 = t1104 * t1446 - t1120 * t1443;
t938 = -t1013 * t1450 + t1015 * t1455;
t1585 = t1102 * t1456 + t1451 * t938;
t936 = t1013 * t1455 + t1015 * t1450;
t854 = -t1444 * t936 + t1447 * t1585;
t901 = -t1102 * t1451 + t1456 * t938;
t1604 = t1452 * t901 + t1457 * t854;
t1234 = t1284 - t1314;
t1103 = -t1234 * t1449 - t1692;
t1105 = t1234 * t1454 - t1693;
t1014 = t1105 * t1443 + t1116 * t1446;
t1016 = t1105 * t1446 - t1116 * t1443;
t939 = -t1014 * t1450 + t1016 * t1455;
t1584 = t1103 * t1456 + t1451 * t939;
t937 = t1014 * t1455 + t1016 * t1450;
t855 = -t1444 * t937 + t1447 * t1584;
t902 = -t1103 * t1451 + t1456 * t939;
t1603 = t1452 * t902 + t1457 * t855;
t1152 = -qJD(6) * t1288 - t1625;
t1111 = -t1152 * t1454 - t1286 * t1683;
t1112 = -t1152 * t1449 + t1286 * t1682;
t1058 = t1112 * t1443 + t1635;
t1060 = t1112 * t1446 - t1636;
t978 = -t1058 * t1450 + t1060 * t1455;
t1582 = t1111 * t1456 + t1451 * t978;
t976 = t1058 * t1455 + t1060 * t1450;
t882 = -t1444 * t976 + t1447 * t1582;
t948 = -t1111 * t1451 + t1456 * t978;
t1602 = t1452 * t948 + t1457 * t882;
t1113 = -t1288 * t1682 + t1449 * t1629;
t1114 = -t1288 * t1683 - t1454 * t1629;
t1059 = t1114 * t1443 - t1635;
t1061 = t1114 * t1446 + t1636;
t979 = -t1059 * t1450 + t1061 * t1455;
t1581 = t1113 * t1456 + t1451 * t979;
t977 = t1059 * t1455 + t1061 * t1450;
t883 = -t1444 * t977 + t1447 * t1581;
t949 = -t1113 * t1451 + t1456 * t979;
t1601 = t1452 * t949 + t1457 * t883;
t1580 = -t1181 * t1456 + t1451 * t998;
t997 = -t1091 * t1455 + t1092 * t1450;
t904 = -t1444 * t997 + t1447 * t1580;
t967 = t1181 * t1451 + t1456 * t998;
t1600 = t1452 * t967 + t1457 * t904;
t1200 = -t1318 - t1319;
t1175 = t1624 - t1681;
t1179 = -t1206 - t1291;
t1087 = -t1175 * t1443 + t1179 * t1446;
t1089 = -t1175 * t1446 - t1179 * t1443;
t996 = -t1087 * t1450 + t1089 * t1455;
t1579 = -t1200 * t1456 + t1451 * t996;
t994 = t1087 * t1455 + t1089 * t1450;
t911 = -t1444 * t994 + t1447 * t1579;
t980 = t1200 * t1451 + t1456 * t996;
t1599 = t1452 * t980 + t1457 * t911;
t1256 = -t1319 + t1318;
t1086 = -t1174 * t1443 + t1177 * t1446;
t1088 = -t1174 * t1446 - t1177 * t1443;
t995 = -t1086 * t1450 + t1088 * t1455;
t1578 = t1256 * t1456 + t1451 * t995;
t993 = t1086 * t1455 + t1088 * t1450;
t917 = -t1444 * t993 + t1447 * t1578;
t987 = -t1256 * t1451 + t1456 * t995;
t1598 = t1452 * t987 + t1457 * t917;
t1160 = (-t1286 * t1454 + t1288 * t1449) * t1315;
t1108 = t1160 * t1443 - t1446 * t1612;
t1109 = t1160 * t1446 + t1443 * t1612;
t1010 = t1108 * t1455 + t1109 * t1450;
t1011 = -t1108 * t1450 + t1109 * t1455;
t1159 = (t1286 * t1449 + t1288 * t1454) * t1315;
t1577 = t1011 * t1451 + t1159 * t1456;
t920 = -t1010 * t1444 + t1447 * t1577;
t975 = t1011 * t1456 - t1159 * t1451;
t1597 = t1452 * t975 + t1457 * t920;
t1237 = -t1715 - t1318;
t1154 = t1237 * t1443 + t1733;
t1155 = t1237 * t1446 - t1734;
t1063 = -t1154 * t1450 + t1155 * t1455;
t1023 = t1063 * t1456 + t1174 * t1451;
t1062 = t1154 * t1455 + t1155 * t1450;
t1574 = t1063 * t1451 - t1174 * t1456;
t958 = -t1062 * t1444 + t1447 * t1574;
t1593 = t1023 * t1452 + t1457 * t958;
t1270 = -t1319 - t1715;
t1167 = t1270 * t1446 - t1689;
t1168 = -t1270 * t1443 - t1688;
t1079 = -t1167 * t1450 + t1168 * t1455;
t1030 = t1079 * t1456 + t1177 * t1451;
t1078 = t1167 * t1455 + t1168 * t1450;
t1572 = t1079 * t1451 - t1177 * t1456;
t963 = -t1078 * t1444 + t1447 * t1572;
t1592 = t1030 * t1452 + t1457 * t963;
t1290 = -t1319 + t1715;
t1184 = t1290 * t1446 + t1734;
t1186 = -t1290 * t1443 + t1733;
t1097 = -t1184 * t1450 + t1186 * t1455;
t1033 = t1097 * t1456 - t1179 * t1451;
t1095 = t1184 * t1455 + t1186 * t1450;
t1570 = t1097 * t1451 + t1179 * t1456;
t971 = -t1095 * t1444 + t1447 * t1570;
t1591 = t1033 * t1452 + t1457 * t971;
t1289 = t1318 - t1715;
t1185 = t1289 * t1443 + t1688;
t1187 = t1289 * t1446 - t1689;
t1098 = -t1185 * t1450 + t1187 * t1455;
t1034 = t1098 * t1456 - t1175 * t1451;
t1096 = t1185 * t1455 + t1187 * t1450;
t1569 = t1098 * t1451 + t1175 * t1456;
t972 = -t1096 * t1444 + t1447 * t1569;
t1590 = t1034 * t1452 + t1457 * t972;
t1169 = t1321 * t1677 - t1446 * t1624;
t1170 = t1321 * t1676 + t1443 * t1624;
t1082 = -t1169 * t1450 + t1170 * t1455;
t1053 = t1082 * t1456 - t1634;
t1080 = t1169 * t1455 + t1170 * t1450;
t1527 = t1082 * t1451 + t1633;
t983 = -t1080 * t1444 + t1447 * t1527;
t1589 = t1053 * t1452 + t1457 * t983;
t1171 = t1206 * t1443 + t1323 * t1676;
t1172 = t1206 * t1446 - t1323 * t1677;
t1083 = -t1171 * t1450 + t1172 * t1455;
t1054 = t1083 * t1456 + t1634;
t1081 = t1171 * t1455 + t1172 * t1450;
t1526 = t1083 * t1451 - t1633;
t984 = -t1081 * t1444 + t1447 * t1526;
t1588 = t1054 * t1452 + t1457 * t984;
t1222 = (-t1321 * t1443 - t1323 * t1446) * t1388;
t1223 = (-t1321 * t1446 + t1323 * t1443) * t1388;
t1148 = t1222 * t1455 + t1223 * t1450;
t1149 = -t1222 * t1450 + t1223 * t1455;
t1341 = t1347 * t1656;
t1049 = -t1148 * t1444 + t1149 * t1657 - t1341;
t1137 = t1149 * t1456 + t1678;
t1576 = t1049 * t1457 + t1137 * t1452;
t1164 = -t1245 * t1450 + t1249 * t1455;
t1166 = -t1245 * t1455 - t1249 * t1450;
t1280 = t1370 + t1716;
t1561 = t1166 * t1451 + t1280 * t1456;
t1056 = -t1164 * t1444 + t1447 * t1561;
t1138 = t1166 * t1456 - t1280 * t1451;
t1575 = t1056 * t1457 + t1138 * t1452;
t1246 = (-qJD(4) - t1388) * t1372 - t1622;
t1163 = t1246 * t1450 + t1248 * t1455;
t1165 = t1246 * t1455 - t1248 * t1450;
t1324 = -t1370 + t1716;
t1562 = t1165 * t1451 + t1324 * t1456;
t1065 = -t1163 * t1444 + t1447 * t1562;
t1146 = t1165 * t1456 - t1324 * t1451;
t1573 = t1065 * t1457 + t1146 * t1452;
t1295 = -t1715 - t1716;
t1209 = t1295 * t1450 + t1729;
t1210 = t1295 * t1455 - t1731;
t1557 = t1210 * t1451 + t1246 * t1456;
t1094 = -t1209 * t1444 + t1447 * t1557;
t1151 = t1210 * t1456 - t1246 * t1451;
t1571 = t1094 * t1457 + t1151 * t1452;
t1476 = t1448 * t1480;
t1496 = t1435 * t1444 + t1619;
t1481 = qJD(1) * t1496;
t1202 = t1652 + (t1447 * (-g(3) * t1659 + t1457 * t1476 + t1596) + t1444 * (-pkin(2) * t1613 - t1405) + (t1447 * (-qJD(2) * t1619 + t1435 * t1496) + t1444 * (-qJD(2) * t1620 - t1481 * t1659)) * pkin(10) + (t1447 * t1520 + (pkin(2) * t1481 + (-t1444 ^ 2 * pkin(10) + t1447 * t1642) * qJDD(1)) * t1445) * t1452) * t1451;
t1558 = -t1201 * t1456 + t1202 * t1451;
t1101 = t1258 * t1444 + t1447 * t1558;
t1136 = t1201 * t1451 + t1202 * t1456;
t1568 = t1101 * t1457 + t1136 * t1452;
t1311 = -t1370 - t1715;
t1213 = t1311 * t1455 - t1685;
t1214 = -t1311 * t1450 - t1684;
t1555 = t1214 * t1451 - t1248 * t1456;
t1107 = -t1213 * t1444 + t1447 * t1555;
t1156 = t1214 * t1456 + t1248 * t1451;
t1567 = t1107 * t1457 + t1156 * t1452;
t1338 = -t1370 + t1715;
t1226 = t1338 * t1455 + t1731;
t1228 = -t1338 * t1450 + t1729;
t1552 = t1228 * t1451 + t1249 * t1456;
t1124 = -t1226 * t1444 + t1447 * t1552;
t1161 = t1228 * t1456 - t1249 * t1451;
t1566 = t1124 * t1457 + t1161 * t1452;
t1337 = -t1715 + t1716;
t1227 = t1337 * t1450 + t1684;
t1229 = t1337 * t1455 - t1685;
t1551 = t1229 * t1451 + t1245 * t1456;
t1125 = -t1227 * t1444 + t1447 * t1551;
t1162 = t1229 * t1456 - t1245 * t1451;
t1565 = t1125 * t1457 + t1162 * t1452;
t1241 = t1278 * t1455 - t1371 * t1675;
t1242 = -t1278 * t1450 - t1371 * t1674;
t1525 = t1242 * t1451 - t1631;
t1144 = -t1241 * t1444 + t1447 * t1525;
t1196 = t1242 * t1456 + t1632;
t1564 = t1144 * t1457 + t1196 * t1452;
t1243 = t1279 * t1450 + t1372 * t1674;
t1244 = t1279 * t1455 - t1372 * t1675;
t1524 = t1244 * t1451 + t1631;
t1145 = -t1243 * t1444 + t1447 * t1524;
t1197 = t1244 * t1456 - t1632;
t1563 = t1145 * t1457 + t1197 * t1452;
t1271 = (t1371 * t1450 - t1372 * t1455) * t1388;
t1272 = (t1371 * t1455 + t1372 * t1450) * t1388;
t1190 = -t1271 * t1444 + t1272 * t1657 - t1341;
t1238 = t1272 * t1456 + t1678;
t1560 = t1190 * t1457 + t1238 * t1452;
t1331 = -t1389 - t1390;
t1307 = -t1375 + t1349;
t1471 = (-qJD(3) - t1410) * t1395 - t1475;
t1544 = -t1307 * t1456 + t1451 * t1471;
t1199 = -t1331 * t1444 + t1447 * t1544;
t1240 = t1307 * t1451 + t1456 * t1471;
t1559 = t1199 * t1457 + t1240 * t1452;
t1362 = t1390 - t1389;
t1302 = t1395 * t1650 + t1475;
t1545 = -t1302 * t1451 + t1306 * t1456;
t1212 = -t1362 * t1444 + t1447 * t1545;
t1239 = -t1302 * t1456 - t1306 * t1451;
t1556 = t1212 * t1457 + t1239 * t1452;
t1540 = t1346 * t1451 + t1724;
t1219 = -t1302 * t1444 + t1447 * t1540;
t1554 = t1219 * t1457 + t1275 * t1452;
t1305 = -t1393 * t1650 + t1470;
t1543 = t1355 * t1456 + t1680;
t1225 = -t1305 * t1444 + t1447 * t1543;
t1553 = t1225 * t1457 + t1282 * t1452;
t1374 = -t1390 + t1714;
t1541 = t1374 * t1456 + t1725;
t1232 = -t1307 * t1444 + t1447 * t1541;
t1293 = -t1374 * t1451 + t1724;
t1550 = t1232 * t1457 + t1293 * t1452;
t1373 = t1389 - t1714;
t1542 = t1373 * t1451 - t1679;
t1233 = -t1444 * t1471 + t1447 * t1542;
t1294 = t1373 * t1456 + t1680;
t1549 = t1233 * t1457 + t1294 * t1452;
t1263 = t1348 * t1656 + (t1395 * t1444 - t1410 * t1657) * t1393;
t1300 = -t1348 * t1451 - t1410 * t1673;
t1548 = t1263 * t1457 + t1300 * t1452;
t1265 = t1349 * t1657 + (-t1393 * t1444 - t1410 * t1656) * t1395;
t1301 = t1349 * t1456 + t1451 * t1669;
t1547 = t1265 * t1457 + t1301 * t1452;
t1519 = t1410 * (t1393 * t1451 + t1395 * t1456);
t1299 = -t1444 * t1479 + t1447 * t1519;
t1330 = (-t1395 * t1451 + t1673) * t1410;
t1546 = t1299 * t1457 + t1330 * t1452;
t1477 = t1487 - t1704;
t1378 = t1452 * t1477 + (t1445 * g(3) - t1476) * t1457;
t1379 = t1452 * t1476 + t1457 * t1477 - t1436;
t1539 = -t1378 * t1457 + t1379 * t1452;
t1332 = t1378 * t1452 + t1379 * t1457;
t1421 = t1435 * t1639;
t1400 = t1421 + t1486;
t1420 = t1435 * t1640;
t1403 = -t1420 + t1613;
t1538 = t1400 * t1457 + t1403 * t1452;
t1401 = -t1421 + t1486;
t1402 = t1420 + t1613;
t1537 = -t1401 * t1457 + t1402 * t1452;
t1536 = t1411 * t1457 - t1666;
t1415 = t1434 - t1638;
t1535 = t1415 * t1457 + t1668;
t1534 = t1417 * t1452 + t1667;
t1416 = -t1434 + t1637;
t1533 = t1416 * t1452 + t1665;
t1406 = t1431 * t1458 - t1453 * t1432;
t1530 = t1445 * t1621;
t748 = qJ(5) * t809 + (-pkin(12) * t1443 + t1643) * t840;
t762 = -qJ(5) * t808 + (-pkin(12) * t1446 + t1710) * t840;
t723 = -pkin(11) * t767 - t1450 * t748 + t1455 * t762;
t745 = -pkin(3) * t767 - pkin(4) * t808 + pkin(5) * t945 - pkin(12) * t841;
t1508 = pkin(10) * t756 + t1451 * t723 + t1456 * t745;
t720 = -pkin(3) * t840 + pkin(11) * t768 + t1450 * t762 + t1455 * t748;
t736 = t1444 * t1611 + t1447 * t767;
t706 = -pkin(2) * t736 - t1444 * t720 + t1447 * t1508;
t709 = -t1451 * t745 + t1456 * t723 + (-t1444 * t736 - t1447 * t737) * pkin(10);
t724 = -t1452 * t737 + t1457 * t756;
t1517 = pkin(9) * t724 + t1452 * t709 + t1457 * t706;
t823 = -pkin(12) * t1018 - t840;
t790 = qJ(5) * t989 + t1018 * t1643 + t1443 * t823;
t800 = -qJ(5) * t988 + t1018 * t1710 + t1446 * t823;
t755 = -pkin(11) * t908 - t1450 * t790 + t1455 * t800;
t785 = -pkin(3) * t908 - pkin(4) * t988 - pkin(5) * t1188 - pkin(12) * t1020 - t841;
t1507 = pkin(10) * t873 + t1451 * t755 + t1456 * t785;
t754 = -pkin(3) * t1018 + pkin(11) * t909 + t1450 * t800 + t1455 * t790;
t838 = t1444 * t1594 + t1447 * t908;
t722 = -pkin(2) * t838 - t1444 * t754 + t1447 * t1507;
t735 = -t1451 * t785 + t1456 * t755 + (-t1444 * t838 - t1447 * t839) * pkin(10);
t798 = -t1452 * t839 + t1457 * t873;
t1516 = pkin(9) * t798 + t1452 * t735 + t1457 * t722;
t864 = -pkin(4) * t1110 + qJ(5) * t876;
t777 = -pkin(11) * t826 - qJ(5) * t1699 - t1450 * t864;
t796 = -pkin(3) * t826 - pkin(4) * t875;
t1504 = pkin(10) * t822 + t1451 * t777 + t1456 * t796;
t774 = -pkin(3) * t1110 + pkin(11) * t827 - qJ(5) * t1701 + t1455 * t864;
t775 = t1444 * t1583 + t1447 * t826;
t726 = -pkin(2) * t775 - t1444 * t774 + t1447 * t1504;
t730 = -t1451 * t796 + t1456 * t777 + (-t1444 * t775 - t1447 * t776) * pkin(10);
t759 = -t1452 * t776 + t1457 * t822;
t1515 = pkin(9) * t759 + t1452 * t730 + t1457 * t726;
t869 = -pkin(5) * t1067 + t885;
t905 = -pkin(12) * t1067 + t1702;
t810 = -pkin(4) * t1067 + qJ(5) * t1001 + t1443 * t905 + t1446 * t869;
t818 = -qJ(5) * t1000 - t1443 * t869 + t1446 * t905;
t765 = -pkin(11) * t928 - t1450 * t810 + t1455 * t818;
t830 = -pkin(3) * t928 - pkin(4) * t1000 - pkin(5) * t1117 - pkin(12) * t1068 + t1700;
t1506 = pkin(10) * t890 + t1451 * t765 + t1456 * t830;
t763 = -pkin(3) * t1067 + pkin(11) * t929 + t1450 * t818 + t1455 * t810;
t845 = t1444 * t1587 + t1447 * t928;
t732 = -pkin(2) * t845 - t1444 * t763 + t1447 * t1506;
t741 = -t1451 * t830 + t1456 * t765 + (-t1444 * t845 - t1447 * t846) * pkin(10);
t807 = -t1452 * t846 + t1457 * t890;
t1514 = pkin(9) * t807 + t1452 * t741 + t1457 * t732;
t870 = -pkin(5) * t1074 + t886;
t906 = -pkin(12) * t1074 + t1700;
t812 = -pkin(4) * t1074 + qJ(5) * t1003 + t1443 * t906 + t1446 * t870;
t821 = -qJ(5) * t1002 - t1443 * t870 + t1446 * t906;
t766 = -pkin(11) * t934 - t1450 * t812 + t1455 * t821;
t833 = -pkin(3) * t934 - pkin(4) * t1002 - pkin(5) * t1121 - pkin(12) * t1075 - t1702;
t1505 = pkin(10) * t891 + t1451 * t766 + t1456 * t833;
t764 = -pkin(3) * t1074 + pkin(11) * t935 + t1450 * t821 + t1455 * t812;
t849 = t1444 * t1586 + t1447 * t934;
t734 = -pkin(2) * t849 - t1444 * t764 + t1447 * t1505;
t743 = -t1451 * t833 + t1456 * t766 + (-t1444 * t849 - t1447 * t850) * pkin(10);
t813 = -t1452 * t850 + t1457 * t891;
t1513 = pkin(9) * t813 + t1452 * t743 + t1457 * t734;
t860 = -pkin(4) * t1200 + qJ(5) * t1089 + t876;
t862 = -qJ(5) * t1087 - t875;
t801 = -pkin(11) * t994 - t1450 * t860 + t1455 * t862;
t952 = -pkin(3) * t994 - pkin(4) * t1087;
t1503 = pkin(10) * t980 + t1451 * t801 + t1456 * t952;
t799 = -pkin(3) * t1200 + pkin(11) * t996 + t1450 * t862 + t1455 * t860;
t910 = t1444 * t1579 + t1447 * t994;
t753 = -pkin(2) * t910 - t1444 * t799 + t1447 * t1503;
t769 = -t1451 * t952 + t1456 * t801 + (-t1444 * t910 - t1447 * t911) * pkin(10);
t863 = -t1452 * t911 + t1457 * t980;
t1512 = pkin(9) * t863 + t1452 * t769 + t1457 * t753;
t898 = -pkin(3) * t1062 - pkin(4) * t1154 + t955;
t1032 = -qJ(5) * t1154 + t1695;
t999 = -pkin(4) * t1174 + qJ(5) * t1155 - t1694;
t899 = -pkin(11) * t1062 + t1032 * t1455 - t1450 * t999;
t1498 = pkin(10) * t1023 + t1451 * t899 + t1456 * t898;
t887 = -pkin(3) * t1174 + pkin(11) * t1063 + t1032 * t1450 + t1455 * t999;
t957 = t1062 * t1447 + t1444 * t1574;
t787 = -pkin(2) * t957 - t1444 * t887 + t1447 * t1498;
t803 = -t1451 * t898 + t1456 * t899 + (-t1444 * t957 - t1447 * t958) * pkin(10);
t900 = t1023 * t1457 - t1452 * t958;
t1511 = pkin(9) * t900 + t1452 * t803 + t1457 * t787;
t907 = -pkin(3) * t1078 - pkin(4) * t1167 + t956;
t1006 = -pkin(4) * t1177 + qJ(5) * t1168 + t1695;
t1040 = -qJ(5) * t1167 + t1694;
t913 = -pkin(11) * t1078 - t1006 * t1450 + t1040 * t1455;
t1497 = pkin(10) * t1030 + t1451 * t913 + t1456 * t907;
t895 = -pkin(3) * t1177 + pkin(11) * t1079 + t1006 * t1455 + t1040 * t1450;
t962 = t1078 * t1447 + t1444 * t1572;
t795 = -pkin(2) * t962 - t1444 * t895 + t1447 * t1497;
t811 = -t1451 * t907 + t1456 * t913 + (-t1444 * t962 - t1447 * t963) * pkin(10);
t926 = t1030 * t1457 - t1452 * t963;
t1510 = pkin(9) * t926 + t1452 * t811 + t1457 * t795;
t1482 = pkin(10) * t967 + (-pkin(11) * t1451 - t1711) * t997;
t903 = t1444 * t1580 + t1447 * t997;
t968 = -pkin(3) * t1181 + pkin(11) * t998;
t816 = -pkin(2) * t903 - t1444 * t968 + t1447 * t1482;
t817 = (-pkin(11) * t1456 + t1712) * t997 + (-t1444 * t903 - t1447 * t904) * pkin(10);
t861 = -t1452 * t904 + t1457 * t967;
t1509 = pkin(9) * t861 + t1452 * t817 + t1457 * t816;
t1004 = -t1056 * t1452 + t1138 * t1457;
t1055 = t1164 * t1447 + t1444 * t1561;
t966 = -pkin(11) * t1164 - t997;
t1485 = pkin(10) * t1138 - t1164 * t1711 + t1451 * t966;
t959 = pkin(3) * t1280 + pkin(11) * t1166 + t998;
t857 = -pkin(2) * t1055 - t1444 * t959 + t1447 * t1485;
t884 = t1164 * t1712 + t1456 * t966 + (-t1055 * t1444 - t1056 * t1447) * pkin(10);
t1501 = pkin(9) * t1004 + t1452 * t884 + t1457 * t857;
t1029 = -t1094 * t1452 + t1151 * t1457;
t1066 = pkin(3) * t1246 + pkin(11) * t1210 - t1690;
t1093 = t1209 * t1447 + t1444 * t1557;
t1045 = t1450 * t1462 - t1455 * t1739 + (-t1450 * t1714 - t1455 * t1623 - t1209) * pkin(3);
t1127 = -pkin(11) * t1209 + t1691;
t1490 = pkin(10) * t1151 + t1045 * t1456 + t1127 * t1451;
t893 = -pkin(2) * t1093 - t1066 * t1444 + t1447 * t1490;
t925 = -t1045 * t1451 + t1127 * t1456 + (-t1093 * t1444 - t1094 * t1447) * pkin(10);
t1500 = pkin(9) * t1029 + t1452 * t925 + t1457 * t893;
t1031 = -t1107 * t1452 + t1156 * t1457;
t1071 = -pkin(3) * t1248 + pkin(11) * t1214 + t1691;
t1106 = t1213 * t1447 + t1444 * t1555;
t1050 = -pkin(3) * t1213 + t1092;
t1130 = -pkin(11) * t1213 + t1690;
t1489 = pkin(10) * t1156 + t1050 * t1456 + t1130 * t1451;
t897 = -pkin(2) * t1106 - t1071 * t1444 + t1447 * t1489;
t927 = -t1050 * t1451 + t1130 * t1456 + (-t1106 * t1444 - t1107 * t1447) * pkin(10);
t1499 = pkin(9) * t1031 + t1452 * t927 + t1457 * t897;
t1100 = -t1258 * t1447 + t1444 * t1558;
t1005 = (-t1100 * t1444 - t1101 * t1447) * pkin(10);
t1024 = -t1101 * t1452 + t1136 * t1457;
t1025 = -pkin(2) * t1100 + t1136 * t1706;
t1495 = pkin(9) * t1024 + t1005 * t1452 + t1025 * t1457;
t1198 = t1331 * t1447 + t1444 * t1544;
t1037 = (-t1198 * t1444 - t1199 * t1447) * pkin(10) - t1558;
t1488 = pkin(10) * t1240 + t1136;
t1042 = -pkin(2) * t1198 + t1447 * t1488;
t1147 = -t1199 * t1452 + t1240 * t1457;
t1494 = pkin(9) * t1147 + t1037 * t1452 + t1042 * t1457;
t1218 = t1302 * t1447 + t1444 * t1540;
t1070 = -pkin(2) * t1218 + t1201 * t1444 + t1447 * t1615;
t1115 = -t1687 + (-t1218 * t1444 - t1219 * t1447) * pkin(10);
t1180 = -t1219 * t1452 + t1275 * t1457;
t1493 = pkin(9) * t1180 + t1070 * t1457 + t1115 * t1452;
t1224 = t1305 * t1447 + t1444 * t1543;
t1073 = -pkin(2) * t1224 + t1202 * t1444 + t1447 * t1614;
t1126 = -t1686 + (-t1224 * t1444 - t1225 * t1447) * pkin(10);
t1183 = -t1225 * t1452 + t1282 * t1457;
t1492 = pkin(9) * t1183 + t1073 * t1457 + t1126 * t1452;
t1363 = t1401 * t1452 + t1402 * t1457;
t1491 = pkin(9) * t1363 + t1332;
t1399 = (t1651 * t1696 + t1646) * t1445;
t1439 = t1445 * t1440;
t1428 = t1453 * qJDD(1) + t1458 * t1717;
t1419 = t1647 * t1663;
t1418 = (t1441 - t1442) * t1663;
t1414 = -pkin(8) * t1428 + g(3) * t1458;
t1404 = t1647 * t1641;
t1397 = (-t1441 * t1435 * qJD(1) + t1457 * t1521) * t1445;
t1396 = -t1442 * t1641 - t1452 * t1613;
t1383 = t1416 * t1457 - t1666;
t1382 = -t1415 * t1452 + t1667;
t1377 = t1399 * t1654 + t1439 * t1630;
t1376 = (-t1439 * t1653 + (-t1433 + (-qJD(1) * t1664 + t1645) * t1445) * t1448) * t1457;
t1364 = -t1400 * t1452 + t1403 * t1457;
t1359 = t1403 * t1445 + t1448 * t1534;
t1358 = -t1402 * t1445 + t1448 * t1533;
t1357 = -t1401 * t1445 + t1448 * t1535;
t1356 = -t1403 * t1448 + t1445 * t1534;
t1354 = -t1399 * t1445 + t1448 * t1536;
t1353 = t1399 * t1448 + t1445 * t1536;
t1352 = -t1418 * t1445 + t1448 * t1538;
t1351 = t1419 * t1445 + t1448 * t1537;
t1350 = -t1419 * t1448 + t1445 * t1537;
t1340 = t1347 * t1661;
t1329 = -t1453 * t1359 + t1384 * t1458;
t1328 = t1359 * t1458 + t1453 * t1384;
t1317 = -t1453 * t1354 + t1380 * t1458;
t1316 = t1354 * t1458 + t1453 * t1380;
t1309 = t1405 * t1445 + t1448 * t1539;
t1308 = -t1405 * t1448 + t1445 * t1539;
t1298 = t1444 * t1519 + t1447 * t1479;
t1297 = -t1453 * t1351 + t1363 * t1458;
t1296 = t1351 * t1458 + t1453 * t1363;
t1281 = -t1671 + (-t1356 * t1445 - t1359 * t1448) * pkin(9);
t1274 = -t1670 + (-t1353 * t1445 - t1354 * t1448) * pkin(9);
t1273 = -pkin(1) * t1356 + t1378 * t1445 + t1448 * t1616;
t1269 = -pkin(1) * t1353 + t1379 * t1445 + t1448 * t1617;
t1264 = t1349 * t1662 + (t1393 * t1447 - t1410 * t1661) * t1395;
t1262 = t1348 * t1661 + (-t1395 * t1447 - t1410 * t1662) * t1393;
t1261 = -pkin(1) * t1308 + t1332 * t1708;
t1260 = -t1453 * t1309 + t1332 * t1458;
t1259 = t1309 * t1458 + t1453 * t1332;
t1254 = -pkin(1) * t1350 + t1448 * t1491;
t1253 = -t1299 * t1452 + t1330 * t1457;
t1252 = (-t1308 * t1445 - t1309 * t1448) * pkin(9);
t1251 = (-t1350 * t1445 - t1351 * t1448) * pkin(9) - t1539;
t1231 = t1444 * t1542 + t1447 * t1471;
t1230 = t1307 * t1447 + t1444 * t1541;
t1211 = t1362 * t1447 + t1444 * t1545;
t1208 = -t1265 * t1452 + t1301 * t1457;
t1207 = -t1263 * t1452 + t1300 * t1457;
t1194 = -t1298 * t1445 + t1448 * t1546;
t1192 = -t1233 * t1452 + t1294 * t1457;
t1191 = -t1232 * t1452 + t1293 * t1457;
t1189 = t1271 * t1447 + t1272 * t1662 - t1340;
t1158 = -t1264 * t1445 + t1448 * t1547;
t1157 = -t1262 * t1445 + t1448 * t1548;
t1150 = -t1212 * t1452 + t1239 * t1457;
t1143 = t1243 * t1447 + t1444 * t1524;
t1142 = t1241 * t1447 + t1444 * t1525;
t1135 = -t1190 * t1452 + t1238 * t1457;
t1134 = -t1231 * t1445 + t1448 * t1549;
t1133 = -t1230 * t1445 + t1448 * t1550;
t1132 = -t1224 * t1445 + t1448 * t1553;
t1131 = t1224 * t1448 + t1445 * t1553;
t1129 = -t1218 * t1445 + t1448 * t1554;
t1128 = t1218 * t1448 + t1445 * t1554;
t1123 = t1227 * t1447 + t1444 * t1551;
t1122 = t1226 * t1447 + t1444 * t1552;
t1099 = -t1211 * t1445 + t1448 * t1556;
t1085 = -t1198 * t1445 + t1448 * t1559;
t1084 = t1198 * t1448 + t1445 * t1559;
t1077 = -t1145 * t1452 + t1197 * t1457;
t1076 = -t1144 * t1452 + t1196 * t1457;
t1072 = pkin(2) * t1225 - t1202 * t1447 + t1444 * t1614;
t1069 = pkin(2) * t1219 - t1201 * t1447 + t1444 * t1615;
t1064 = t1163 * t1447 + t1444 * t1562;
t1057 = -t1189 * t1445 + t1448 * t1560;
t1052 = -t1453 * t1132 + t1183 * t1458;
t1051 = t1132 * t1458 + t1453 * t1183;
t1048 = t1148 * t1447 + t1149 * t1662 - t1340;
t1047 = -t1453 * t1129 + t1180 * t1458;
t1046 = t1129 * t1458 + t1453 * t1180;
t1041 = pkin(2) * t1199 + t1444 * t1488;
t1039 = -t1125 * t1452 + t1162 * t1457;
t1038 = -t1124 * t1452 + t1161 * t1457;
t1028 = -t1453 * t1085 + t1147 * t1458;
t1027 = t1085 * t1458 + t1453 * t1147;
t1026 = pkin(2) * t1101 + t1136 * t1707;
t1022 = -t1143 * t1445 + t1448 * t1563;
t1021 = -t1142 * t1445 + t1448 * t1564;
t1012 = -t1065 * t1452 + t1146 * t1457;
t992 = -t1049 * t1452 + t1137 * t1457;
t986 = -t1123 * t1445 + t1448 * t1565;
t985 = -t1122 * t1445 + t1448 * t1566;
t982 = t1081 * t1447 + t1444 * t1526;
t981 = t1080 * t1447 + t1444 * t1527;
t974 = -t1106 * t1445 + t1448 * t1567;
t973 = t1106 * t1448 + t1445 * t1567;
t970 = t1096 * t1447 + t1444 * t1569;
t969 = t1095 * t1447 + t1444 * t1570;
t965 = -t1093 * t1445 + t1448 * t1571;
t964 = t1093 * t1448 + t1445 * t1571;
t961 = -t1100 * t1445 + t1448 * t1568;
t960 = t1100 * t1448 + t1445 * t1568;
t953 = -t1064 * t1445 + t1448 * t1573;
t951 = -t1055 * t1445 + t1448 * t1575;
t950 = t1055 * t1448 + t1445 * t1575;
t947 = -t1048 * t1445 + t1448 * t1576;
t943 = -t1073 * t1452 + t1126 * t1457 + (-t1131 * t1445 - t1132 * t1448) * pkin(9);
t942 = t1054 * t1457 - t1452 * t984;
t941 = t1053 * t1457 - t1452 * t983;
t940 = -t1070 * t1452 + t1115 * t1457 + (-t1128 * t1445 - t1129 * t1448) * pkin(9);
t933 = t1034 * t1457 - t1452 * t972;
t932 = t1033 * t1457 - t1452 * t971;
t931 = t1031 * t1458 - t1453 * t974;
t930 = t1453 * t1031 + t1458 * t974;
t924 = t1029 * t1458 - t1453 * t965;
t923 = t1453 * t1029 + t1458 * t965;
t919 = t1010 * t1447 + t1444 * t1577;
t918 = -pkin(1) * t1131 - t1072 * t1445 + t1448 * t1492;
t916 = t1444 * t1578 + t1447 * t993;
t915 = t1024 * t1458 - t1453 * t961;
t914 = t1453 * t1024 + t1458 * t961;
t912 = -pkin(1) * t1128 - t1069 * t1445 + t1448 * t1493;
t896 = pkin(2) * t1107 + t1071 * t1447 + t1444 * t1489;
t894 = t1037 * t1457 - t1042 * t1452 + (-t1084 * t1445 - t1085 * t1448) * pkin(9);
t892 = pkin(2) * t1094 + t1066 * t1447 + t1444 * t1490;
t889 = t1004 * t1458 - t1453 * t951;
t888 = t1453 * t1004 + t1458 * t951;
t881 = t1444 * t1581 + t1447 * t977;
t880 = t1444 * t1582 + t1447 * t976;
t879 = -t1445 * t982 + t1448 * t1588;
t878 = -t1445 * t981 + t1448 * t1589;
t877 = -pkin(1) * t1084 - t1041 * t1445 + t1448 * t1494;
t872 = -t1445 * t970 + t1448 * t1590;
t871 = -t1445 * t969 + t1448 * t1591;
t868 = -t1452 * t917 + t1457 * t987;
t867 = -t1452 * t920 + t1457 * t975;
t866 = -t1445 * t962 + t1448 * t1592;
t865 = t1445 * t1592 + t1448 * t962;
t859 = -t1445 * t957 + t1448 * t1593;
t858 = t1445 * t1593 + t1448 * t957;
t856 = pkin(2) * t1056 + t1444 * t1485 + t1447 * t959;
t853 = t1444 * t1584 + t1447 * t937;
t852 = t1444 * t1585 + t1447 * t936;
t851 = t1005 * t1457 - t1025 * t1452 + (-t1445 * t960 - t1448 * t961) * pkin(9);
t848 = -t1452 * t883 + t1457 * t949;
t847 = -t1452 * t882 + t1457 * t948;
t844 = -pkin(1) * t960 - t1026 * t1445 + t1448 * t1495;
t842 = t1444 * t1595 + t1447 * t921;
t837 = -t1453 * t866 + t1458 * t926;
t836 = t1453 * t926 + t1458 * t866;
t835 = -t1445 * t916 + t1448 * t1598;
t834 = -t1445 * t919 + t1448 * t1597;
t832 = -t1445 * t910 + t1448 * t1599;
t831 = t1445 * t1599 + t1448 * t910;
t829 = -t1445 * t903 + t1448 * t1600;
t828 = t1445 * t1600 + t1448 * t903;
t825 = -t1453 * t859 + t1458 * t900;
t824 = t1453 * t900 + t1458 * t859;
t820 = -t1452 * t855 + t1457 * t902;
t819 = -t1452 * t854 + t1457 * t901;
t815 = pkin(2) * t904 + t1444 * t1482 + t1447 * t968;
t814 = -t1452 * t897 + t1457 * t927 + (-t1445 * t973 - t1448 * t974) * pkin(9);
t806 = -t1452 * t893 + t1457 * t925 + (-t1445 * t964 - t1448 * t965) * pkin(9);
t805 = -t1445 * t881 + t1448 * t1601;
t804 = -t1445 * t880 + t1448 * t1602;
t802 = -t1452 * t843 + t1457 * t874;
t797 = -pkin(1) * t973 - t1445 * t896 + t1448 * t1499;
t794 = pkin(2) * t963 + t1444 * t1497 + t1447 * t895;
t793 = -t1453 * t832 + t1458 * t863;
t792 = t1453 * t863 + t1458 * t832;
t791 = -pkin(1) * t964 - t1445 * t892 + t1448 * t1500;
t789 = -t1453 * t829 + t1458 * t861;
t788 = t1453 * t861 + t1458 * t829;
t786 = pkin(2) * t958 + t1444 * t1498 + t1447 * t887;
t784 = -t1452 * t857 + t1457 * t884 + (-t1445 * t950 - t1448 * t951) * pkin(9);
t783 = -t1445 * t853 + t1448 * t1603;
t782 = -t1445 * t852 + t1448 * t1604;
t781 = -t1445 * t849 + t1448 * t1605;
t780 = t1445 * t1605 + t1448 * t849;
t779 = -t1445 * t845 + t1448 * t1606;
t778 = t1445 * t1606 + t1448 * t845;
t773 = -t1445 * t842 + t1448 * t1607;
t772 = -pkin(1) * t950 - t1445 * t856 + t1448 * t1501;
t771 = -t1445 * t838 + t1448 * t1608;
t770 = t1445 * t1608 + t1448 * t838;
t761 = -t1453 * t781 + t1458 * t813;
t760 = t1453 * t813 + t1458 * t781;
t758 = -t1453 * t779 + t1458 * t807;
t757 = t1453 * t807 + t1458 * t779;
t752 = pkin(2) * t911 + t1444 * t1503 + t1447 * t799;
t751 = -t1453 * t771 + t1458 * t798;
t750 = t1453 * t798 + t1458 * t771;
t749 = -t1452 * t795 + t1457 * t811 + (-t1445 * t865 - t1448 * t866) * pkin(9);
t747 = -t1452 * t787 + t1457 * t803 + (-t1445 * t858 - t1448 * t859) * pkin(9);
t746 = -t1452 * t816 + t1457 * t817 + (-t1445 * t828 - t1448 * t829) * pkin(9);
t744 = -pkin(1) * t828 - t1445 * t815 + t1448 * t1509;
t742 = -pkin(1) * t865 - t1445 * t794 + t1448 * t1510;
t740 = -t1445 * t775 + t1448 * t1609;
t739 = t1445 * t1609 + t1448 * t775;
t738 = -pkin(1) * t858 - t1445 * t786 + t1448 * t1511;
t733 = pkin(2) * t850 + t1444 * t1505 + t1447 * t764;
t731 = pkin(2) * t846 + t1444 * t1506 + t1447 * t763;
t729 = -t1452 * t753 + t1457 * t769 + (-t1445 * t831 - t1448 * t832) * pkin(9);
t728 = -t1453 * t740 + t1458 * t759;
t727 = t1453 * t759 + t1458 * t740;
t725 = pkin(2) * t776 + t1444 * t1504 + t1447 * t774;
t721 = pkin(2) * t839 + t1444 * t1507 + t1447 * t754;
t719 = -pkin(1) * t831 - t1445 * t752 + t1448 * t1512;
t718 = -t1445 * t736 + t1448 * t1610;
t717 = t1445 * t1610 + t1448 * t736;
t716 = -t1452 * t734 + t1457 * t743 + (-t1445 * t780 - t1448 * t781) * pkin(9);
t715 = -t1452 * t732 + t1457 * t741 + (-t1445 * t778 - t1448 * t779) * pkin(9);
t714 = -t1452 * t722 + t1457 * t735 + (-t1445 * t770 - t1448 * t771) * pkin(9);
t713 = -pkin(1) * t780 - t1445 * t733 + t1448 * t1513;
t712 = -pkin(1) * t778 - t1445 * t731 + t1448 * t1514;
t711 = -t1453 * t718 + t1458 * t724;
t710 = t1453 * t724 + t1458 * t718;
t708 = -t1452 * t726 + t1457 * t730 + (-t1445 * t739 - t1448 * t740) * pkin(9);
t707 = -pkin(1) * t770 - t1445 * t721 + t1448 * t1516;
t705 = pkin(2) * t737 + t1444 * t1508 + t1447 * t720;
t704 = -pkin(1) * t739 - t1445 * t725 + t1448 * t1515;
t703 = -t1452 * t706 + t1457 * t709 + (-t1445 * t717 - t1448 * t718) * pkin(9);
t702 = -pkin(1) * t717 - t1445 * t705 + t1448 * t1517;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1428, -t1429, 0, t1407, 0, 0, 0, 0, 0, 0, t1329, t1317, t1297, t1260, 0, 0, 0, 0, 0, 0, t1047, t1052, t1028, t915, 0, 0, 0, 0, 0, 0, t924, t931, t889, t789, 0, 0, 0, 0, 0, 0, t825, t837, t793, t728, 0, 0, 0, 0, 0, 0, t758, t761, t751, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1429, -t1428, 0, t1406, 0, 0, 0, 0, 0, 0, t1328, t1316, t1296, t1259, 0, 0, 0, 0, 0, 0, t1046, t1051, t1027, t914, 0, 0, 0, 0, 0, 0, t923, t930, t888, t788, 0, 0, 0, 0, 0, 0, t824, t836, t792, t727, 0, 0, 0, 0, 0, 0, t757, t760, t750, t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1356, t1353, t1350, t1308, 0, 0, 0, 0, 0, 0, t1128, t1131, t1084, t960, 0, 0, 0, 0, 0, 0, t964, t973, t950, t828, 0, 0, 0, 0, 0, 0, t858, t865, t831, t739, 0, 0, 0, 0, 0, 0, t778, t780, t770, t717; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1429, 0, -t1428, 0, t1618, -t1414, -t1406, -pkin(8) * t1406, -t1453 * t1377 + t1397 * t1458, -t1453 * t1352 + t1364 * t1458, -t1453 * t1357 + t1382 * t1458, -t1453 * t1376 + t1396 * t1458, -t1453 * t1358 + t1383 * t1458, t1458 * t1404 + t1453 * t1530, -pkin(8) * t1328 - t1453 * t1273 + t1281 * t1458, -pkin(8) * t1316 - t1453 * t1269 + t1274 * t1458, -pkin(8) * t1296 + t1251 * t1458 - t1453 * t1254, -pkin(8) * t1259 + t1252 * t1458 - t1453 * t1261, -t1453 * t1158 + t1208 * t1458, -t1453 * t1099 + t1150 * t1458, -t1453 * t1133 + t1191 * t1458, -t1453 * t1157 + t1207 * t1458, -t1453 * t1134 + t1192 * t1458, -t1453 * t1194 + t1253 * t1458, -pkin(8) * t1046 - t1453 * t912 + t1458 * t940, -pkin(8) * t1051 - t1453 * t918 + t1458 * t943, -pkin(8) * t1027 - t1453 * t877 + t1458 * t894, -pkin(8) * t914 - t1453 * t844 + t1458 * t851, -t1453 * t1022 + t1077 * t1458, t1012 * t1458 - t1453 * t953, t1038 * t1458 - t1453 * t985, -t1453 * t1021 + t1076 * t1458, t1039 * t1458 - t1453 * t986, -t1453 * t1057 + t1135 * t1458, -pkin(8) * t923 - t1453 * t791 + t1458 * t806, -pkin(8) * t930 - t1453 * t797 + t1458 * t814, -pkin(8) * t888 - t1453 * t772 + t1458 * t784, -pkin(8) * t788 - t1453 * t744 + t1458 * t746, -t1453 * t879 + t1458 * t942, -t1453 * t835 + t1458 * t868, -t1453 * t871 + t1458 * t932, -t1453 * t878 + t1458 * t941, -t1453 * t872 + t1458 * t933, -t1453 * t947 + t1458 * t992, -pkin(8) * t824 - t1453 * t738 + t1458 * t747, -pkin(8) * t836 - t1453 * t742 + t1458 * t749, -pkin(8) * t792 - t1453 * t719 + t1458 * t729, -pkin(8) * t727 - t1453 * t704 + t1458 * t708, -t1453 * t805 + t1458 * t848, -t1453 * t773 + t1458 * t802, -t1453 * t782 + t1458 * t819, -t1453 * t804 + t1458 * t847, -t1453 * t783 + t1458 * t820, -t1453 * t834 + t1458 * t867, -pkin(8) * t757 - t1453 * t712 + t1458 * t715, -pkin(8) * t760 - t1453 * t713 + t1458 * t716, -pkin(8) * t750 - t1453 * t707 + t1458 * t714, -pkin(8) * t710 - t1453 * t702 + t1458 * t703; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1428, 0, t1429, 0, t1414, t1618, t1407, pkin(8) * t1407, t1377 * t1458 + t1453 * t1397, t1352 * t1458 + t1453 * t1364, t1357 * t1458 + t1453 * t1382, t1376 * t1458 + t1453 * t1396, t1358 * t1458 + t1453 * t1383, t1453 * t1404 - t1458 * t1530, pkin(8) * t1329 + t1273 * t1458 + t1453 * t1281, pkin(8) * t1317 + t1269 * t1458 + t1453 * t1274, pkin(8) * t1297 + t1453 * t1251 + t1254 * t1458, pkin(8) * t1260 + t1453 * t1252 + t1261 * t1458, t1158 * t1458 + t1453 * t1208, t1099 * t1458 + t1453 * t1150, t1133 * t1458 + t1453 * t1191, t1157 * t1458 + t1453 * t1207, t1134 * t1458 + t1453 * t1192, t1194 * t1458 + t1453 * t1253, pkin(8) * t1047 + t1453 * t940 + t1458 * t912, pkin(8) * t1052 + t1453 * t943 + t1458 * t918, pkin(8) * t1028 + t1453 * t894 + t1458 * t877, pkin(8) * t915 + t1453 * t851 + t1458 * t844, t1022 * t1458 + t1453 * t1077, t1453 * t1012 + t1458 * t953, t1453 * t1038 + t1458 * t985, t1021 * t1458 + t1453 * t1076, t1453 * t1039 + t1458 * t986, t1057 * t1458 + t1453 * t1135, pkin(8) * t924 + t1453 * t806 + t1458 * t791, pkin(8) * t931 + t1453 * t814 + t1458 * t797, pkin(8) * t889 + t1453 * t784 + t1458 * t772, pkin(8) * t789 + t1453 * t746 + t1458 * t744, t1453 * t942 + t1458 * t879, t1453 * t868 + t1458 * t835, t1453 * t932 + t1458 * t871, t1453 * t941 + t1458 * t878, t1453 * t933 + t1458 * t872, t1453 * t992 + t1458 * t947, pkin(8) * t825 + t1453 * t747 + t1458 * t738, pkin(8) * t837 + t1453 * t749 + t1458 * t742, pkin(8) * t793 + t1453 * t729 + t1458 * t719, pkin(8) * t728 + t1453 * t708 + t1458 * t704, t1453 * t848 + t1458 * t805, t1453 * t802 + t1458 * t773, t1453 * t819 + t1458 * t782, t1453 * t847 + t1458 * t804, t1453 * t820 + t1458 * t783, t1453 * t867 + t1458 * t834, pkin(8) * t758 + t1453 * t715 + t1458 * t712, pkin(8) * t761 + t1453 * t716 + t1458 * t713, pkin(8) * t751 + t1453 * t714 + t1458 * t707, pkin(8) * t711 + t1453 * t703 + t1458 * t702; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1431, t1432, 0, 0, (t1646 + (qJD(2) - t1628) * t1696) * t1726, t1418 * t1448 + t1445 * t1538, t1401 * t1448 + t1445 * t1535, (qJD(1) * t1628 * t1726 + t1445 * t1613) * t1457, t1402 * t1448 + t1445 * t1533, t1448 * t1621, pkin(1) * t1359 - t1378 * t1448 + t1445 * t1616, pkin(1) * t1354 - t1379 * t1448 + t1445 * t1617, pkin(1) * t1351 + t1445 * t1491, pkin(1) * t1309 + t1332 * t1709, t1264 * t1448 + t1445 * t1547, t1211 * t1448 + t1445 * t1556, t1230 * t1448 + t1445 * t1550, t1262 * t1448 + t1445 * t1548, t1231 * t1448 + t1445 * t1549, t1298 * t1448 + t1445 * t1546, pkin(1) * t1129 + t1069 * t1448 + t1445 * t1493, pkin(1) * t1132 + t1072 * t1448 + t1445 * t1492, pkin(1) * t1085 + t1041 * t1448 + t1445 * t1494, pkin(1) * t961 + t1026 * t1448 + t1445 * t1495, t1143 * t1448 + t1445 * t1563, t1064 * t1448 + t1445 * t1573, t1122 * t1448 + t1445 * t1566, t1142 * t1448 + t1445 * t1564, t1123 * t1448 + t1445 * t1565, t1189 * t1448 + t1445 * t1560, pkin(1) * t965 + t1445 * t1500 + t1448 * t892, pkin(1) * t974 + t1445 * t1499 + t1448 * t896, pkin(1) * t951 + t1445 * t1501 + t1448 * t856, pkin(1) * t829 + t1445 * t1509 + t1448 * t815, t1445 * t1588 + t1448 * t982, t1445 * t1598 + t1448 * t916, t1445 * t1591 + t1448 * t969, t1445 * t1589 + t1448 * t981, t1445 * t1590 + t1448 * t970, t1048 * t1448 + t1445 * t1576, pkin(1) * t859 + t1445 * t1511 + t1448 * t786, pkin(1) * t866 + t1445 * t1510 + t1448 * t794, pkin(1) * t832 + t1445 * t1512 + t1448 * t752, pkin(1) * t740 + t1445 * t1515 + t1448 * t725, t1445 * t1601 + t1448 * t881, t1445 * t1607 + t1448 * t842, t1445 * t1604 + t1448 * t852, t1445 * t1602 + t1448 * t880, t1445 * t1603 + t1448 * t853, t1445 * t1597 + t1448 * t919, pkin(1) * t779 + t1445 * t1514 + t1448 * t731, pkin(1) * t781 + t1445 * t1513 + t1448 * t733, pkin(1) * t771 + t1445 * t1516 + t1448 * t721, pkin(1) * t718 + t1445 * t1517 + t1448 * t705;];
tauB_reg  = t1;
