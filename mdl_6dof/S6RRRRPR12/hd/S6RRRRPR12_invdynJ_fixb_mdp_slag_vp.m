% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR12_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRPR12_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 23:45:38
% EndTime: 2019-03-09 23:46:28
% DurationCPUTime: 37.26s
% Computational Cost: add. (34006->932), mult. (97005->1278), div. (0->0), fcn. (82285->18), ass. (0->401)
t1026 = sin(pkin(7));
t1037 = cos(qJ(3));
t1178 = t1026 * t1037;
t1146 = qJD(3) * t1178;
t1027 = sin(pkin(6));
t1029 = cos(pkin(7));
t1038 = cos(qJ(2));
t1169 = t1037 * t1038;
t1033 = sin(qJ(3));
t1034 = sin(qJ(2));
t1172 = t1033 * t1034;
t1074 = -t1029 * t1172 + t1169;
t947 = t1074 * t1027;
t934 = qJD(1) * t947;
t1278 = t1146 - t934;
t1174 = t1029 * t1033;
t1179 = t1026 * t1033;
t1007 = pkin(10) * t1179;
t1173 = t1029 * t1037;
t1244 = pkin(2) * t1173 - t1007;
t1224 = cos(pkin(6));
t1158 = pkin(1) * t1224;
t1012 = t1038 * t1158;
t1003 = qJD(1) * t1012;
t1225 = pkin(10) * t1029;
t1096 = t1027 * (-pkin(9) - t1225);
t1082 = t1034 * t1096;
t912 = qJD(1) * t1082 + t1003;
t1011 = t1034 * t1158;
t1047 = t1038 * t1096 - t1011;
t913 = t1047 * qJD(1);
t1226 = pkin(10) * t1026;
t1081 = pkin(2) * t1034 - t1038 * t1226;
t1063 = t1081 * t1027;
t951 = qJD(1) * t1063;
t1277 = t1244 * qJD(3) - t1037 * t912 - t913 * t1174 - t951 * t1179;
t839 = -t1026 * t913 + t1029 * t951;
t1170 = t1034 * t1037;
t1171 = t1033 * t1038;
t1076 = t1029 * t1170 + t1171;
t946 = t1076 * t1027;
t933 = qJD(1) * t946;
t1276 = pkin(3) * t933 - pkin(11) * t934 + t839 - (pkin(3) * t1033 - pkin(11) * t1037) * t1026 * qJD(3);
t1177 = t1027 * t1034;
t1142 = t1026 * t1177;
t1112 = qJD(1) * t1142;
t1275 = pkin(11) * t1112 - t1277;
t1032 = sin(qJ(4));
t1036 = cos(qJ(4));
t1108 = t1036 * t1142;
t967 = t1029 * t1032 + t1036 * t1179;
t1207 = -qJD(1) * t1108 - qJD(4) * t967 - t1032 * t1278;
t1109 = t1032 * t1142;
t966 = -t1036 * t1029 + t1032 * t1179;
t1206 = -qJD(1) * t1109 - qJD(4) * t966 + t1036 * t1278;
t1147 = qJD(3) * t1179;
t1255 = t1147 - t933;
t1274 = t1276 * t1036;
t1137 = t1027 * t1172;
t1111 = qJD(1) * t1137;
t1134 = t1224 * qJD(1);
t1094 = t1134 + qJD(2);
t1067 = t1026 * t1094;
t1176 = t1027 * t1038;
t1138 = t1029 * t1176;
t1273 = qJD(1) * t1138 + t1067;
t1251 = t1037 * t1273 - t1111;
t881 = qJD(4) - t1251;
t1184 = qJD(4) * t1036;
t957 = (-pkin(3) * t1037 - pkin(11) * t1033 - pkin(2)) * t1026;
t1272 = t1032 * t1276 + t1275 * t1036 - t957 * t1184;
t1031 = sin(qJ(6));
t1035 = cos(qJ(6));
t1022 = qJ(4) + pkin(13);
t1019 = sin(t1022);
t1020 = cos(t1022);
t1039 = cos(qJ(1));
t1175 = t1027 * t1039;
t1140 = t1026 * t1175;
t1135 = t1039 * t1224;
t1236 = sin(qJ(1));
t968 = t1034 * t1236 - t1038 * t1135;
t969 = t1034 * t1135 + t1038 * t1236;
t849 = t1033 * t1140 - t1037 * t969 + t1174 * t968;
t916 = -t1026 * t968 + t1029 * t1175;
t800 = t1019 * t916 + t1020 * t849;
t846 = t1033 * t969 + t1037 * t1140 + t1173 * t968;
t1271 = t1031 * t800 + t1035 * t846;
t1270 = -t1031 * t846 + t1035 * t800;
t1168 = pkin(2) * t1174 + pkin(10) * t1178;
t956 = pkin(11) * t1029 + t1168;
t1205 = t1032 * t957 + t1036 * t956;
t1269 = t1255 * pkin(4) - t1206 * qJ(5) - qJD(4) * t1205 - qJD(5) * t967 + t1032 * t1275 - t1274;
t1185 = qJD(4) * t1032;
t1268 = -qJ(5) * t1207 + qJD(5) * t966 + t1185 * t956 + t1272;
t1030 = -qJ(5) - pkin(11);
t1153 = t1030 * t1032;
t1194 = t1032 * t1251;
t1056 = pkin(9) * t1176 + t1011;
t875 = pkin(10) * t1273 + t1056 * qJD(1);
t1050 = pkin(2) * t1224 + t1082;
t882 = qJD(2) * pkin(2) + qJD(1) * t1050 + t1003;
t1077 = -pkin(2) * t1038 - t1034 * t1226 - pkin(1);
t940 = t1077 * t1027;
t929 = qJD(1) * t940;
t779 = -t1033 * t875 + t1037 * (t1026 * t929 + t1029 * t882);
t1075 = t1029 * t1171 + t1170;
t1055 = t1075 * t1027;
t1060 = t1033 * t1067;
t885 = qJD(1) * t1055 + t1060;
t811 = pkin(3) * t885 - pkin(11) * t1251;
t1214 = t1032 * t811 + t1036 * t779;
t1267 = -qJ(5) * t1194 - qJD(4) * t1153 - qJD(5) * t1036 + t1214;
t810 = t1036 * t811;
t1266 = qJ(5) * t1036 * t1251 - pkin(4) * t885 + t1030 * t1184 - t810 + (-qJD(5) + t779) * t1032;
t1193 = t1032 * t916;
t1265 = t1036 * t849 + t1193;
t1021 = t1027 ^ 2;
t1264 = 0.2e1 * pkin(1) * t1021;
t1263 = t1207 * pkin(4);
t1025 = sin(pkin(13));
t1028 = cos(pkin(13));
t1262 = -t1025 * t1207 - t1028 * t1206;
t979 = t1025 * t1032 - t1028 * t1036;
t808 = t979 * t1251;
t965 = t979 * qJD(4);
t1261 = -t808 + t965;
t1211 = t1025 * t1206 - t1028 * t1207;
t980 = t1025 * t1036 + t1028 * t1032;
t1203 = t881 * t980;
t1141 = t1026 * t1176;
t936 = qJD(1) * t1141 - t1029 * t1094 - qJD(3);
t1084 = t1032 * t936 - t1036 * t885;
t825 = t1032 * t885 + t1036 * t936;
t1128 = t1025 * t1084 - t1028 * t825;
t1245 = qJD(6) - t1128;
t1092 = -t1025 * t825 - t1028 * t1084;
t1197 = t1031 * t1092;
t734 = -t1035 * t881 + t1197;
t1257 = t1245 * t734;
t736 = t1031 * t881 + t1035 * t1092;
t1256 = t1245 * t736;
t1145 = qJD(3) * t1174;
t1247 = pkin(2) * t1145 + pkin(10) * t1146 - t1033 * t912 + t1173 * t913;
t1166 = qJDD(1) * t1034;
t1132 = t1027 * t1166;
t1148 = qJD(2) * t1176;
t1254 = qJD(1) * t1148 + t1132;
t1150 = qJD(1) * t1177;
t1253 = pkin(3) * t1150 + t1037 * t951;
t1120 = t1035 * t1245;
t1129 = t1224 * qJDD(1);
t1006 = t1129 + qJDD(2);
t1165 = qJDD(1) * t1038;
t1131 = t1027 * t1165;
t1100 = t1029 * t1131;
t796 = -qJD(2) * t1029 * t1111 + qJD(3) * t1251 + t1006 * t1179 + t1033 * t1100 + t1037 * t1254;
t1149 = qJD(2) * t1177;
t1107 = qJD(1) * t1149;
t889 = t1006 * t1029 + qJDD(3) + (t1107 - t1131) * t1026;
t728 = t1032 * t889 + t1036 * t796 - t936 * t1184 - t1185 * t885;
t729 = -qJD(4) * t1084 + t1032 * t796 - t1036 * t889;
t686 = -t1025 * t728 - t1028 * t729;
t685 = qJDD(6) - t686;
t1198 = t1031 * t685;
t1252 = -t1120 * t1245 - t1198;
t1042 = qJD(2) * t1076 + qJD(3) * t1075;
t797 = qJD(3) * t1060 - t1006 * t1178 + t1027 * (qJD(1) * t1042 + t1033 * t1166) - t1037 * t1100;
t1250 = t1032 * t849 - t1036 * t916;
t1218 = t1268 * t1025 + t1028 * t1269;
t1217 = t1025 * t1269 - t1268 * t1028;
t1210 = t1025 * t1267 + t1028 * t1266;
t1208 = t1025 * t1266 - t1028 * t1267;
t1204 = t1026 * t1253 + t1247;
t1133 = t1224 * t1026;
t1102 = t1033 * t1133;
t907 = t1102 + t1055;
t963 = -t1029 * t1224 + t1141;
t843 = t1032 * t907 + t963 * t1036;
t844 = -t1032 * t963 + t1036 * t907;
t785 = -t1025 * t843 + t1028 * t844;
t1101 = t1037 * t1133;
t1136 = t1029 * t1169;
t906 = -t1027 * t1136 - t1101 + t1137;
t898 = t906 * t1035;
t1246 = -t1031 * t785 + t898;
t780 = t1037 * t875 + t882 * t1174 + t929 * t1179;
t1243 = -t780 + (t1185 - t1194) * pkin(4);
t1188 = qJD(1) * qJD(2);
t1242 = -t1034 * t1188 + t1165;
t1241 = pkin(4) * t729 + qJDD(5);
t1155 = t1027 * t1236;
t1114 = t1026 * t1155;
t1113 = t1224 * t1236;
t970 = -t1039 * t1034 - t1038 * t1113;
t971 = -t1034 * t1113 + t1038 * t1039;
t851 = t971 * t1037 + (t1029 * t970 + t1114) * t1033;
t918 = -t970 * t1026 + t1029 * t1155;
t805 = -t1032 * t851 + t1036 * t918;
t1240 = -g(1) * t805 - g(2) * t1250 + g(3) * t843;
t1016 = pkin(4) * t1025 + pkin(12);
t1144 = qJD(3) * t1173;
t1187 = qJD(3) * t1033;
t1115 = pkin(1) * t1129;
t994 = t1003 * qJD(2);
t1157 = pkin(9) * t1131 + t1034 * t1115 + t994;
t1052 = -pkin(9) * t1107 + t1157;
t817 = (t1027 * t1029 * t1242 + t1006 * t1026) * pkin(10) + t1052;
t1057 = -t1011 * t1188 + t1038 * t1115;
t1151 = t1038 * t1188;
t1066 = -t1151 - t1166;
t1058 = t1066 * pkin(9);
t821 = t1006 * pkin(2) + (t1066 * t1225 + t1058) * t1027 + t1057;
t854 = (qJDD(1) * t1077 + t1081 * t1188) * t1027;
t705 = t1037 * t817 + t882 * t1144 + t929 * t1146 + t821 * t1174 + t854 * t1179 - t1187 * t875;
t694 = pkin(11) * t889 + t705;
t770 = -t1026 * t821 + t1029 * t854;
t701 = pkin(3) * t797 - pkin(11) * t796 + t770;
t818 = -t1026 * t882 + t1029 * t929;
t748 = -pkin(3) * t1251 - pkin(11) * t885 + t818;
t753 = -pkin(11) * t936 + t780;
t711 = t1032 * t748 + t1036 * t753;
t653 = -qJD(4) * t711 - t1032 * t694 + t1036 * t701;
t793 = qJDD(4) + t797;
t647 = pkin(4) * t793 - qJ(5) * t728 + qJD(5) * t1084 + t653;
t1069 = -t1032 * t701 - t1036 * t694 - t748 * t1184 + t1185 * t753;
t651 = -qJ(5) * t729 - qJD(5) * t825 - t1069;
t638 = -t1025 * t651 + t1028 * t647;
t636 = -pkin(5) * t793 - t638;
t1239 = (-pkin(4) * t1084 + pkin(5) * t1092 - pkin(12) * t1128 + qJD(6) * t1016) * t1245 + g(1) * (-t1019 * t851 + t1020 * t918) + g(2) * (t1019 * t849 - t1020 * t916) + g(3) * (-t1019 * t907 - t1020 * t963) + t636;
t1059 = g(1) * t971 + g(2) * t969 + g(3) * t1177;
t850 = t1033 * t971 - t1037 * t1114 - t1173 * t970;
t1073 = g(1) * t850 + g(2) * t846 + g(3) * t906;
t697 = -qJ(5) * t825 + t711;
t1200 = t1025 * t697;
t710 = -t1032 * t753 + t1036 * t748;
t696 = qJ(5) * t1084 + t710;
t689 = pkin(4) * t881 + t696;
t661 = t1028 * t689 - t1200;
t659 = -pkin(5) * t881 - t661;
t1018 = pkin(4) * t1036 + pkin(3);
t895 = pkin(5) * t979 - pkin(12) * t980 - t1018;
t995 = t1030 * t1036;
t927 = t1025 * t1153 - t1028 * t995;
t1237 = t659 * qJD(6) * t980 + t1020 * t1073 - (-pkin(5) * t1203 - pkin(12) * t1261 + qJD(6) * t927 - t1243) * t1245 + t895 * t685;
t1040 = qJD(1) ^ 2;
t1235 = pkin(3) * t889;
t837 = qJD(3) * t1101 + ((t1136 - t1172) * qJD(3) + t1074 * qJD(2)) * t1027;
t768 = -qJD(2) * t1108 + qJD(4) * t844 + t1032 * t837;
t1233 = pkin(4) * t768;
t1232 = pkin(4) * t843;
t1223 = t734 * t1092;
t1222 = t736 * t1092;
t1221 = t825 * t881;
t1220 = t1084 * t881;
t639 = t1025 * t647 + t1028 * t651;
t911 = t1012 + t1050;
t833 = -t1026 * t911 + t1029 * t940;
t775 = pkin(3) * t906 - pkin(11) * t907 + t833;
t900 = (t1133 + t1138) * pkin(10) + t1056;
t1161 = t1037 * t900 + t911 * t1174 + t940 * t1179;
t783 = -pkin(11) * t963 + t1161;
t1213 = t1032 * t775 + t1036 * t783;
t1004 = qJD(2) * t1012;
t914 = qJD(2) * t1082 + t1004;
t915 = t1047 * qJD(2);
t952 = qJD(2) * t1063;
t1053 = t1037 * t914 + t911 * t1144 + t940 * t1146 + t915 * t1174 + t952 * t1179 - t1187 * t900;
t1110 = qJD(2) * t1142;
t732 = pkin(11) * t1110 + t1053;
t836 = qJD(3) * t1102 + t1027 * t1042;
t840 = -t1026 * t915 + t1029 * t952;
t740 = pkin(3) * t836 - pkin(11) * t837 + t840;
t1046 = -qJD(4) * t1213 - t1032 * t732 + t1036 * t740;
t769 = qJD(2) * t1109 - qJD(4) * t843 + t1036 * t837;
t655 = pkin(4) * t836 - qJ(5) * t769 - qJD(5) * t844 + t1046;
t1068 = t1032 * t740 + t1036 * t732 + t775 * t1184 - t1185 * t783;
t658 = -qJ(5) * t768 - qJD(5) * t843 + t1068;
t643 = t1025 * t655 + t1028 * t658;
t691 = t1028 * t697;
t662 = t1025 * t689 + t691;
t1124 = -t1032 * t783 + t1036 * t775;
t704 = pkin(4) * t906 - qJ(5) * t844 + t1124;
t709 = -qJ(5) * t843 + t1213;
t670 = t1025 * t704 + t1028 * t709;
t1219 = -pkin(5) * t1255 - t1218;
t878 = -t1025 * t966 + t1028 * t967;
t852 = t1031 * t878 + t1035 * t1178;
t1216 = -qJD(6) * t852 + t1031 * t1255 - t1035 * t1262;
t1139 = t1031 * t1178;
t1182 = qJD(6) * t1035;
t1215 = -qJD(6) * t1139 - t1031 * t1262 - t1035 * t1255 + t1182 * t878;
t1122 = -t1032 * t956 + t1036 * t957;
t824 = -pkin(4) * t1178 - qJ(5) * t967 + t1122;
t831 = -qJ(5) * t966 + t1205;
t761 = t1025 * t824 + t1028 * t831;
t1209 = pkin(5) * t885 - t1210;
t1202 = qJD(4) * t881;
t1201 = t1006 * MDP(8);
t687 = -t1025 * t729 + t1028 * t728;
t1162 = t1031 * t793 + t1035 * t687 + t881 * t1182;
t1183 = qJD(6) * t1031;
t665 = -t1092 * t1183 + t1162;
t1199 = t1031 * t665;
t1195 = t1031 * t906;
t1192 = t1032 * t918;
t1191 = t1035 * t980;
t1186 = qJD(3) * t1037;
t1181 = t1019 * t1026;
t1180 = t1021 * t1040;
t1023 = t1034 ^ 2;
t1167 = -t1038 ^ 2 + t1023;
t891 = t1033 * t900;
t1154 = pkin(3) * t963 + t891;
t1143 = t1038 * t1180;
t637 = pkin(12) * t793 + t639;
t706 = -t1033 * t817 - t882 * t1145 - t929 * t1147 + t821 * t1173 + t854 * t1178 - t875 * t1186;
t695 = -t706 - t1235;
t671 = t695 + t1241;
t645 = -pkin(5) * t686 - pkin(12) * t687 + t671;
t1127 = -t1031 * t637 + t1035 * t645;
t1126 = t1031 * t687 - t1035 * t793;
t766 = -t1031 * t808 - t1035 * t885;
t1125 = t1031 * t965 + t766;
t767 = t1031 * t885 - t1035 * t808;
t1121 = t1035 * t965 + t767;
t1119 = t1036 * t881;
t1116 = t1033 * t914 + t911 * t1145 + t940 * t1147 + t900 * t1186;
t1104 = -g(1) * t846 + g(2) * t850;
t1103 = t1027 * t1040 * t1224;
t955 = t1007 + (-pkin(2) * t1037 - pkin(3)) * t1029;
t1054 = pkin(4) * t966 + t955;
t877 = t1025 * t967 + t1028 * t966;
t781 = pkin(5) * t877 - pkin(12) * t878 + t1054;
t1099 = -pkin(12) * t1255 - qJD(6) * t781 - t1217;
t750 = -pkin(12) * t1178 + t761;
t1097 = -pkin(5) * t1211 - pkin(12) * t1262 + qJD(6) * t750 - t1204 + t1263;
t1093 = 0.2e1 * t1134 + qJD(2);
t642 = -t1025 * t658 + t1028 * t655;
t669 = -t1025 * t709 + t1028 * t704;
t760 = -t1025 * t831 + t1028 * t824;
t1090 = t1026 * t940 + t1029 * t911;
t1089 = t1026 * t952 + t1029 * t915;
t1088 = t1031 * t645 + t1035 * t637;
t660 = pkin(12) * t881 + t662;
t752 = pkin(3) * t936 - t779;
t730 = pkin(4) * t825 + qJD(5) + t752;
t680 = -pkin(5) * t1128 - pkin(12) * t1092 + t730;
t649 = t1031 * t680 + t1035 * t660;
t1087 = t1031 * t660 - t1035 * t680;
t668 = pkin(12) * t906 + t670;
t782 = -t1037 * t1090 + t1154;
t784 = t1025 * t844 + t1028 * t843;
t690 = pkin(5) * t784 - pkin(12) * t785 + t1232 + t782;
t1086 = t1031 * t690 + t1035 * t668;
t1085 = -t1031 * t668 + t1035 * t690;
t743 = t1035 * t785 + t1195;
t1083 = t1035 * t685 + (t1031 * t1128 - t1183) * t1245;
t1079 = -pkin(11) * t793 + t752 * t881;
t1072 = -g(1) * t851 + g(2) * t849 - g(3) * t907;
t871 = -t1033 * t968 + t1173 * t969;
t873 = t1033 * t970 + t1173 * t971;
t1071 = g(1) * t873 + g(2) * t871 + g(3) * t946;
t872 = -t1037 * t968 - t1174 * t969;
t874 = t1037 * t970 - t1174 * t971;
t1070 = -g(1) * t874 - g(2) * t872 - g(3) * t947;
t1065 = t1027 * (t1129 + t1006);
t1064 = -t1183 * t980 - t1121;
t664 = t1028 * t696 - t1200;
t1051 = -t1016 * t685 + (t659 + t664) * t1245;
t1049 = t1202 * t956 - t1070;
t1048 = pkin(11) * t1202 - t1073 + t695;
t1044 = t1073 + t706;
t1043 = t1094 * t1056;
t733 = -t915 * t1173 + (-pkin(3) * t1149 - t1037 * t952) * t1026 + t1116;
t1041 = t636 * t980 - t659 * t965 - t927 * t685 + (pkin(12) * t885 - qJD(6) * t895 - t1208) * t1245 + t1072;
t1017 = -pkin(4) * t1028 - pkin(5);
t926 = -t1025 * t995 - t1028 * t1153;
t866 = t1019 * t1142 + t1020 * t947;
t853 = t1035 * t878 - t1139;
t835 = -t1019 * t963 + t1020 * t907;
t823 = t1020 * t874 + t1181 * t971;
t822 = t1020 * t872 + t1181 * t969;
t806 = t1036 * t851 + t1192;
t802 = t1019 * t918 + t1020 * t851;
t749 = pkin(5) * t1178 - t760;
t745 = t1031 * t850 + t1035 * t802;
t744 = -t1031 * t802 + t1035 * t850;
t722 = -t1025 * t768 + t1028 * t769;
t721 = t1025 * t769 + t1028 * t768;
t682 = qJD(6) * t743 + t1031 * t722 - t836 * t1035;
t681 = qJD(6) * t1246 + t1031 * t836 + t1035 * t722;
t667 = -pkin(5) * t906 - t669;
t666 = qJD(6) * t736 + t1126;
t663 = t1025 * t696 + t691;
t656 = pkin(5) * t721 - pkin(12) * t722 + t1233 + t733;
t641 = pkin(12) * t836 + t643;
t640 = -pkin(5) * t836 - t642;
t635 = -qJD(6) * t649 + t1127;
t634 = -t1087 * qJD(6) + t1088;
t1 = [(-qJD(2) * t1043 + (-pkin(9) * t1177 + t1012) * t1006 + (t1027 * t1058 + t1057) * t1224 + g(1) * t969 - g(2) * t971 + t1242 * t1264) * MDP(9) + (-(-pkin(9) * t1149 + t1004) * t1094 - t1056 * t1006 - t1052 * t1224 - g(1) * t968 - g(2) * t970 + t1066 * t1264) * MDP(10) + (t1245 * t721 + t685 * t784) * MDP(31) + (t1245 * t681 + t665 * t784 + t685 * t743 + t721 * t736) * MDP(29) + (-t1084 * t836 + t728 * t906 + t769 * t881 + t793 * t844) * MDP(20) + (t1084 * t768 - t728 * t843 - t729 * t844 - t769 * t825) * MDP(19) + (-t1084 * t769 + t728 * t844) * MDP(18) + (t639 * t670 + t662 * t643 + t638 * t669 + t661 * t642 + t671 * (t1154 + t1232) + t730 * (-pkin(3) * t1110 + t1116 + t1233) - g(1) * (-pkin(1) * t1236 - t969 * pkin(2) + pkin(4) * t1193 + pkin(9) * t1175 + t849 * t1018 + t1030 * t846) - g(2) * (t1039 * pkin(1) + t971 * pkin(2) + pkin(4) * t1192 + pkin(9) * t1155 + t851 * t1018 - t850 * t1030) + (-t1089 * t730 - t1090 * t671) * t1037 + (-g(1) * t916 - g(2) * t918) * pkin(10)) * MDP(26) + ((-qJD(6) * t1086 - t1031 * t641 + t1035 * t656) * t1245 + t1085 * t685 + t635 * t784 - t1087 * t721 + t640 * t734 + t667 * t666 - t636 * t1246 + t659 * t682 - g(1) * t1270 - g(2) * t745) * MDP(32) + (-(qJD(6) * t1085 + t1031 * t656 + t1035 * t641) * t1245 - t1086 * t685 - t634 * t784 - t649 * t721 + t640 * t736 + t667 * t665 + t636 * t743 + t659 * t681 + g(1) * t1271 - g(2) * t744) * MDP(33) + (t1251 * t837 - t796 * t906 - t797 * t907 - t836 * t885) * MDP(12) + (t1116 * t936 - t891 * t889 - t706 * t963 + t779 * t1110 - t840 * t1251 + t833 * t797 + t770 * t906 + t818 * t836 - g(1) * t849 - g(2) * t851 + (-t1089 * t936 + t1090 * t889) * t1037) * MDP(16) + (t1110 * t1251 + t797 * t963 + t836 * t936 - t889 * t906) * MDP(14) + (-t729 * t906 - t768 * t881 - t793 * t843 - t825 * t836) * MDP(21) + (t1034 * t1065 + t1093 * t1148) * MDP(6) + (t793 * t906 + t836 * t881) * MDP(22) + (t1038 * t1065 - t1093 * t1149) * MDP(7) + (t796 * t907 + t837 * t885) * MDP(11) + (-t1245 * t682 + t1246 * t685 - t666 * t784 - t721 * t734) * MDP(30) + (t1246 * t665 - t666 * t743 - t681 * t734 - t682 * t736) * MDP(28) + t1224 * t1201 + (g(1) * t1236 - g(2) * t1039) * MDP(2) + (g(1) * t1039 + g(2) * t1236) * MDP(3) + (-t1092 * t642 + t1128 * t643 - t638 * t785 - t639 * t784 - t661 * t722 - t662 * t721 - t669 * t687 + t670 * t686 - t1104) * MDP(25) + (-t1110 * t936 - t889 * t963) * MDP(15) + (t1110 * t885 - t796 * t963 - t837 * t936 + t889 * t907) * MDP(13) + (t665 * t743 + t681 * t736) * MDP(27) + qJDD(1) * MDP(1) + (t1053 * t936 - t1110 * t780 - t1161 * t889 + t705 * t963 + t770 * t907 + t833 * t796 + t818 * t837 + t840 * t885 + t1104) * MDP(17) + (g(1) * t1250 - g(2) * t805 - t1068 * t881 + t1069 * t906 - t733 * t1084 - t1213 * t793 + t695 * t844 - t711 * t836 + t782 * t728 + t752 * t769) * MDP(24) + (0.2e1 * (t1034 * t1165 - t1167 * t1188) * MDP(5) + (qJDD(1) * t1023 + 0.2e1 * t1034 * t1151) * MDP(4)) * t1021 + (-g(1) * t1265 - g(2) * t806 + t1046 * t881 + t1124 * t793 + t653 * t906 + t695 * t843 + t710 * t836 + t782 * t729 + t733 * t825 + t752 * t768) * MDP(23); (t639 * t761 + t638 * t760 + t671 * t1054 - g(1) * (pkin(2) * t970 + t1018 * t874 - t1030 * t873) - g(2) * (-pkin(2) * t968 + t1018 * t872 - t1030 * t871) - g(3) * (pkin(2) * t1176 + t1018 * t947 - t1030 * t946) + (t1247 - t1263) * t730 + t1217 * t662 + t1218 * t661 + (t1253 * t730 - t1059 * (pkin(4) * t1032 + pkin(10))) * t1026) * MDP(26) + (-t1218 * t1092 + t1217 * t1128 - t1211 * t662 + t1262 * t661 - t638 * t878 - t639 * t877 + t686 * t761 - t687 * t760 - t1071) * MDP(25) + ((-t1031 * t750 + t1035 * t781) * t685 + t635 * t877 + t749 * t666 + t636 * t852 - g(1) * (t1031 * t873 + t1035 * t823) - g(2) * (t1031 * t871 + t1035 * t822) - g(3) * (t1031 * t946 + t1035 * t866) + (t1031 * t1099 - t1035 * t1097) * t1245 + t1219 * t734 + t1215 * t659 - t1211 * t1087) * MDP(32) + (-t1211 * t734 - t1215 * t1245 - t666 * t877 - t685 * t852) * MDP(30) + (t1211 * t736 + t1216 * t1245 + t665 * t877 + t685 * t853) * MDP(29) + (-(t1031 * t781 + t1035 * t750) * t685 - t634 * t877 + t749 * t665 + t636 * t853 - g(1) * (-t1031 * t823 + t1035 * t873) - g(2) * (-t1031 * t822 + t1035 * t871) - g(3) * (-t1031 * t866 + t1035 * t946) + (t1031 * t1097 + t1035 * t1099) * t1245 + t1219 * t736 + t1216 * t659 - t1211 * t649) * MDP(33) + (t1211 * t1245 + t685 * t877) * MDP(31) + (-t1084 * t1206 + t728 * t967) * MDP(18) + (t793 * t967 + t1084 * t933 + t1206 * t881 + (-t1037 * t728 - t1084 * t1187) * t1026) * MDP(20) + (-t1084 * t1207 - t1206 * t825 - t728 * t966 - t729 * t967) * MDP(19) + (pkin(1) * t1034 * t1180 - pkin(9) * t1254 - g(1) * t970 + g(2) * t968 - g(3) * t1176 + qJD(1) * t1043 + t1057) * MDP(9) + (-t1205 * t793 + t955 * t728 + t695 * t967 + t711 * t933 + t1272 * t881 - t1204 * t1084 + t1206 * t752 + t1049 * t1032 + (-t1036 * t1059 - t1037 * t1069 - t1187 * t711) * t1026) * MDP(24) + (t1244 * t889 + t706 * t1029 + t839 * t1251 - t818 * t933 + t1247 * t936 + (-t779 * t1150 + t818 * t1187 - pkin(2) * t797 + (t936 * t951 - t770) * t1037) * t1026 + t1070) * MDP(16) + (-t1029 * t797 - t933 * t936 + (t1037 * t889 - t1150 * t1251 + t1187 * t936) * t1026) * MDP(14) + (-t1251 * t934 + t885 * t933 + (-t1033 * t797 + t1037 * t796 + (-t1033 * t885 + t1037 * t1251) * qJD(3)) * t1026) * MDP(12) + (t1216 * t736 + t665 * t853) * MDP(27) + (t1029 * t889 + t1112 * t936) * MDP(15) + t1201 + (pkin(1) * t1143 + (-pkin(9) * t1150 + t1003) * t1134 + t994 + t1059 - t1157) * MDP(10) + (t1029 * t796 + t934 * t936 + (t1033 * t889 - t1150 * t885 - t1186 * t936) * t1026) * MDP(13) + (t1034 * t1103 + t1131) * MDP(7) + (-t1038 * t1103 + t1132) * MDP(6) + (-t885 * t934 + (t1033 * t796 + t1186 * t885) * t1026) * MDP(11) + (-t881 * t933 + (-t1037 * t793 + t1187 * t881) * t1026) * MDP(22) + (-t1215 * t736 - t1216 * t734 - t665 * t852 - t666 * t853) * MDP(28) + (-t793 * t966 + t825 * t933 + t1207 * t881 + (t1037 * t729 - t1187 * t825) * t1026) * MDP(21) - t1034 * MDP(4) * t1143 + t1167 * MDP(5) * t1180 + (t1122 * t793 + t955 * t729 + t695 * t966 - t710 * t933 + ((-qJD(4) * t957 + t1275) * t1032 - t1274) * t881 + t1204 * t825 - t1207 * t752 - t1049 * t1036 + (-t1032 * t1059 - t653 * t1037 + t1187 * t710) * t1026) * MDP(23) + (-t1168 * t889 - t705 * t1029 - t839 * t885 - t818 * t934 + t1277 * t936 + (-pkin(2) * t796 + t1033 * t770 + t1150 * t780 + t1186 * t818) * t1026 + t1071) * MDP(17); -t1251 ^ 2 * MDP(12) + (t1251 * t936 + t796) * MDP(13) - t797 * MDP(14) + t889 * MDP(15) + (-t780 * t936 + t1044) * MDP(16) + (-t1251 * t818 - t779 * t936 - t1072 - t705) * MDP(17) + (t1032 * t728 - t1084 * t1119) * MDP(18) + ((t728 - t1221) * t1036 + (-t729 + t1220) * t1032) * MDP(19) + (t1032 * t793 + t1119 * t881) * MDP(20) + (-t1032 * t881 ^ 2 + t1036 * t793) * MDP(21) + (-pkin(3) * t729 - t780 * t825 - t810 * t881 + (t779 * t881 + t1079) * t1032 - t1048 * t1036) * MDP(23) + (-pkin(3) * t728 + t1032 * t1048 + t1036 * t1079 + t1084 * t780 + t1214 * t881) * MDP(24) + (-t1210 * t1092 + t1208 * t1128 - t1203 * t662 + t1261 * t661 - t638 * t980 - t639 * t979 + t686 * t927 + t687 * t926 + t1072) * MDP(25) + (t639 * t927 - t638 * t926 - t671 * t1018 - g(1) * (-t1018 * t850 - t1030 * t851) - g(2) * (-t1018 * t846 + t1030 * t849) - g(3) * (-t1018 * t906 - t1030 * t907) + t1243 * t730 + t1208 * t662 + t1210 * t661) * MDP(26) + (t1064 * t736 + t1191 * t665) * MDP(27) + (t1125 * t736 + t1121 * t734 + (-t1199 - t1035 * t666 + (t1031 * t734 - t1035 * t736) * qJD(6)) * t980) * MDP(28) + (t1064 * t1245 + t1191 * t685 + t1203 * t736 + t665 * t979) * MDP(29) + (-t980 * t1198 - t666 * t979 - t1203 * t734 + (-t1182 * t980 + t1125) * t1245) * MDP(30) + (t1203 * t1245 + t685 * t979) * MDP(31) + (t1041 * t1031 + t1035 * t1237 - t1087 * t1203 + t1209 * t734 + t635 * t979 - t659 * t766 + t926 * t666) * MDP(32) + (-t1031 * t1237 + t1041 * t1035 - t1203 * t649 + t1209 * t736 - t634 * t979 - t659 * t767 + t926 * t665) * MDP(33) + (-MDP(11) * t1251 + MDP(12) * t885 - MDP(14) * t936 - MDP(16) * t818 + MDP(20) * t1084 + MDP(21) * t825 - MDP(22) * t881 - MDP(23) * t710 + MDP(24) * t711) * t885; -t1084 * t825 * MDP(18) + (t1084 ^ 2 - t825 ^ 2) * MDP(19) + (t728 + t1221) * MDP(20) + (-t729 - t1220) * MDP(21) + t793 * MDP(22) + (t1084 * t752 + t711 * t881 + t1240 + t653) * MDP(23) + (g(1) * t806 - g(2) * t1265 + g(3) * t844 + t710 * t881 + t752 * t825 + t1069) * MDP(24) + ((t1025 * t686 - t1028 * t687) * pkin(4) + (t661 - t664) * t1128 + (t662 - t663) * t1092) * MDP(25) + (t661 * t663 - t662 * t664 + (t639 * t1025 + t638 * t1028 + t1084 * t730 + t1240) * pkin(4)) * MDP(26) + (t1120 * t736 + t1199) * MDP(27) + ((t665 - t1257) * t1035 + (-t666 - t1256) * t1031) * MDP(28) + (-t1222 - t1252) * MDP(29) + (t1083 + t1223) * MDP(30) - t1245 * t1092 * MDP(31) + (t1017 * t666 + t1051 * t1031 - t1035 * t1239 + t1087 * t1092 - t663 * t734) * MDP(32) + (t1017 * t665 + t1031 * t1239 + t1051 * t1035 + t649 * t1092 - t663 * t736) * MDP(33); (-t1092 ^ 2 - t1128 ^ 2) * MDP(25) + (t1092 * t661 - t1128 * t662 - t1044 - t1235 + t1241) * MDP(26) + (t1083 - t1223) * MDP(32) + (-t1222 + t1252) * MDP(33); t736 * t734 * MDP(27) + (-t734 ^ 2 + t736 ^ 2) * MDP(28) + (t1162 + t1257) * MDP(29) + (-t1126 + t1256) * MDP(30) + t685 * MDP(31) + (t649 * t1245 - t659 * t736 - g(1) * t744 - g(2) * t1271 - g(3) * (-t1031 * t835 + t898) + t1127) * MDP(32) + (-t1087 * t1245 + t659 * t734 + g(1) * t745 - g(2) * t1270 - g(3) * (-t1035 * t835 - t1195) - t1088) * MDP(33) + (-MDP(29) * t1197 - MDP(30) * t736 - MDP(32) * t649 + MDP(33) * t1087) * qJD(6);];
tau  = t1;
