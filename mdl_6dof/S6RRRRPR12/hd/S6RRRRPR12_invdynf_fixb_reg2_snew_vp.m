% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 00:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR12_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR12_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR12_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 00:42:02
% EndTime: 2019-05-08 00:42:30
% DurationCPUTime: 28.84s
% Computational Cost: add. (418224->420), mult. (1037982->672), div. (0->0), fcn. (887747->16), ass. (0->365)
t3108 = sin(pkin(7));
t3111 = cos(pkin(7));
t3109 = sin(pkin(6));
t3116 = sin(qJ(2));
t3121 = cos(qJ(2));
t3112 = cos(pkin(6));
t3117 = sin(qJ(1));
t3122 = cos(qJ(1));
t3096 = t3117 * g(1) - t3122 * g(2);
t3123 = qJD(1) ^ 2;
t3132 = pkin(9) * t3109 * t3123 + qJDD(1) * pkin(1) + t3096;
t3129 = t3112 * t3132;
t3097 = -g(1) * t3122 - g(2) * t3117;
t3187 = qJDD(1) * t3109;
t3131 = -pkin(1) * t3123 + pkin(9) * t3187 + t3097;
t3051 = -t3116 * t3131 + (-t3109 * g(3) + t3129) * t3121;
t3207 = qJD(1) * t3109;
t3184 = t3121 * t3207;
t3083 = qJD(2) * t3184 + t3116 * t3187;
t3101 = t3112 * qJDD(1) + qJDD(2);
t3208 = pkin(10) * t3108;
t3134 = (-pkin(2) * t3121 - t3116 * t3208) * t3207;
t3102 = qJD(1) * t3112 + qJD(2);
t3192 = t3111 * t3102;
t3186 = pkin(10) * t3192;
t3210 = t3102 ^ 2;
t3125 = t3101 * pkin(2) + (-t3083 * t3111 + t3108 * t3210) * pkin(10) + (-t3116 * t3134 + t3121 * t3186) * t3207 + t3051;
t3070 = -t3112 * g(3) - t3109 * t3132;
t3193 = t3109 * t3116;
t3185 = qJD(1) * t3193;
t3084 = -qJD(2) * t3185 + t3121 * t3187;
t3176 = t3111 * t3184;
t3127 = -t3083 * t3208 - t3084 * pkin(2) + (-pkin(10) * t3111 * t3185 + pkin(2) * t3102) * t3185 - (t3102 * t3108 + t3176) * pkin(10) * t3184 + t3070;
t3223 = t3108 * t3127 + t3111 * t3125;
t3120 = cos(qJ(3));
t3115 = sin(qJ(3));
t3191 = t3111 * t3115;
t3195 = t3108 * t3115;
t3064 = t3102 * t3195 + (t3116 * t3120 + t3121 * t3191) * t3207;
t3076 = t3108 * t3184 - qJD(3) - t3192;
t3114 = sin(qJ(4));
t3119 = cos(qJ(4));
t3048 = t3064 * t3114 + t3119 * t3076;
t3050 = t3064 * t3119 - t3076 * t3114;
t3107 = sin(pkin(13));
t3110 = cos(pkin(13));
t3020 = t3110 * t3048 + t3050 * t3107;
t3018 = qJD(6) + t3020;
t3222 = qJD(6) + t3018;
t3022 = -t3048 * t3107 + t3050 * t3110;
t3194 = t3108 * t3120;
t3062 = -t3102 * t3194 + t3115 * t3185 - t3120 * t3176;
t3060 = qJD(4) + t3062;
t3113 = sin(qJ(6));
t3118 = cos(qJ(6));
t3001 = t3022 * t3113 - t3118 * t3060;
t3221 = t3001 ^ 2;
t3003 = t3022 * t3118 + t3060 * t3113;
t3220 = t3003 ^ 2;
t3219 = t3018 ^ 2;
t3218 = t3020 ^ 2;
t3217 = t3022 ^ 2;
t3216 = t3048 ^ 2;
t3215 = t3050 ^ 2;
t3214 = t3060 ^ 2;
t3213 = t3062 ^ 2;
t3212 = t3064 ^ 2;
t3211 = t3076 ^ 2;
t3209 = -2 * qJD(5);
t3206 = t3001 * t3003;
t3205 = t3020 * t3022;
t3204 = t3022 * t3060;
t3203 = t3048 * t3050;
t3202 = t3060 * t3020;
t3201 = t3060 * t3048;
t3200 = t3062 * t3064;
t3199 = t3062 * t3076;
t3198 = t3064 * t3076;
t3197 = t3084 * t3111;
t3196 = t3109 ^ 2 * t3123;
t3190 = qJD(4) - t3060;
t3189 = qJD(6) - t3018;
t3188 = t3116 * t3129 + t3121 * t3131;
t3019 = -t3210 * pkin(2) + (t3101 * t3108 + t3197) * pkin(10) + (-t3116 * g(3) + (t3116 * t3186 + t3121 * t3134) * qJD(1)) * t3109 + t3188;
t2970 = t3120 * t3019 + t3115 * t3223;
t3043 = pkin(3) * t3062 - pkin(11) * t3064;
t3135 = -t3084 * t3108 + t3101 * t3111 + qJDD(3);
t2959 = -pkin(3) * t3211 + pkin(11) * t3135 - t3062 * t3043 + t2970;
t2990 = -t3108 * t3125 + t3111 * t3127;
t3175 = -t3064 * qJD(3) - t3115 * t3083 + t3101 * t3194 + t3120 * t3197;
t3006 = -t3175 - t3198;
t3035 = -t3062 * qJD(3) + t3120 * t3083 + t3084 * t3191 + t3101 * t3195;
t3178 = -t3035 - t3199;
t2961 = pkin(3) * t3006 + pkin(11) * t3178 + t2990;
t2923 = t3119 * t2959 + t3114 * t2961;
t3179 = t3114 * t3035 - t3119 * t3135;
t2997 = -qJD(4) * t3050 - t3179;
t3028 = pkin(4) * t3060 - qJ(5) * t3050;
t2907 = -pkin(4) * t3216 + qJ(5) * t2997 - t3028 * t3060 + t2923;
t2922 = -t3114 * t2959 + t3119 * t2961;
t3136 = qJDD(4) - t3175;
t2991 = t3136 - t3203;
t3130 = -t3119 * t3035 - t3114 * t3135;
t2998 = -t3048 * qJD(4) - t3130;
t3128 = (-t2998 - t3201) * qJ(5) + t2991 * pkin(4) + t2922;
t2872 = t3110 * t2907 + t3020 * t3209 + t3107 * t3128;
t3183 = t3107 * t2907 - t3110 * t3128;
t2971 = t2997 * t3107 + t2998 * t3110;
t3182 = -t2971 + t3202;
t3181 = -t3113 * t2971 + t3118 * t3136;
t3180 = -t3110 * t2997 + t2998 * t3107;
t3177 = t3102 * t3184;
t3174 = t3115 * t3019 - t3120 * t3223;
t3173 = -qJDD(6) - t3180;
t2989 = pkin(5) * t3020 - pkin(12) * t3022;
t2868 = -pkin(5) * t3214 + pkin(12) * t3136 - t3020 * t2989 + t2872;
t2958 = -t3135 * pkin(3) - t3211 * pkin(11) + t3064 * t3043 + t3174;
t2930 = -t2997 * pkin(4) - t3216 * qJ(5) + t3050 * t3028 + qJDD(5) + t2958;
t2953 = t3180 + t3204;
t2896 = pkin(5) * t2953 + pkin(12) * t3182 + t2930;
t2851 = -t2868 * t3113 + t2896 * t3118;
t2852 = t2868 * t3118 + t2896 * t3113;
t2837 = -t2851 * t3113 + t2852 * t3118;
t2867 = -t3136 * pkin(5) - t3214 * pkin(12) + ((2 * qJD(5)) + t2989) * t3022 + t3183;
t2824 = t2837 * t3107 - t2867 * t3110;
t2825 = t2837 * t3110 + t2867 * t3107;
t2812 = t2824 * t3119 + t2825 * t3114;
t2813 = -t2824 * t3114 + t2825 * t3119;
t2836 = t2851 * t3118 + t2852 * t3113;
t3171 = t2813 * t3115 - t2836 * t3120;
t2807 = -t3108 * t2812 + t3111 * t3171;
t2810 = t2813 * t3120 + t2836 * t3115;
t3172 = t2807 * t3121 + t2810 * t3116;
t2871 = t3022 * t3209 - t3183;
t2849 = t2871 * t3110 + t2872 * t3107;
t2850 = -t2871 * t3107 + t2872 * t3110;
t2828 = t2849 * t3119 + t2850 * t3114;
t2829 = -t2849 * t3114 + t2850 * t3119;
t3169 = t2829 * t3115 - t2930 * t3120;
t2817 = -t3108 * t2828 + t3111 * t3169;
t2827 = t2829 * t3120 + t2930 * t3115;
t3170 = t2817 * t3121 + t2827 * t3116;
t2932 = -t3003 * t3189 + t3181;
t3133 = -t3118 * t2971 - t3113 * t3136;
t2934 = t3001 * t3189 + t3133;
t2898 = t2932 * t3118 - t2934 * t3113;
t2963 = -t3220 - t3221;
t2885 = t2898 * t3107 - t2963 * t3110;
t2886 = t2898 * t3110 + t2963 * t3107;
t2858 = t2885 * t3119 + t2886 * t3114;
t2859 = -t2885 * t3114 + t2886 * t3119;
t2897 = t2932 * t3113 + t2934 * t3118;
t3164 = t2859 * t3115 - t2897 * t3120;
t2835 = -t3108 * t2858 + t3111 * t3164;
t2848 = t2859 * t3120 + t2897 * t3115;
t3168 = t2835 * t3121 + t2848 * t3116;
t2941 = -t3173 - t3206;
t2964 = -t3219 - t3221;
t2913 = -t2941 * t3113 + t2964 * t3118;
t2931 = t3003 * t3222 - t3181;
t2891 = t2913 * t3107 - t2931 * t3110;
t2892 = t2913 * t3110 + t2931 * t3107;
t2863 = t2891 * t3119 + t2892 * t3114;
t2864 = -t2891 * t3114 + t2892 * t3119;
t2912 = t2941 * t3118 + t2964 * t3113;
t3162 = t2864 * t3115 - t2912 * t3120;
t2839 = -t3108 * t2863 + t3111 * t3162;
t2853 = t2864 * t3120 + t2912 * t3115;
t3167 = t2839 * t3121 + t2853 * t3116;
t2942 = t3173 - t3206;
t2965 = -t3219 - t3220;
t2915 = t2942 * t3118 - t2965 * t3113;
t2933 = -t3001 * t3222 - t3133;
t2893 = t2915 * t3107 - t2933 * t3110;
t2894 = t2915 * t3110 + t2933 * t3107;
t2865 = t2893 * t3119 + t2894 * t3114;
t2866 = -t2893 * t3114 + t2894 * t3119;
t2914 = t2942 * t3113 + t2965 * t3118;
t3161 = t2866 * t3115 - t2914 * t3120;
t2841 = -t3108 * t2865 + t3111 * t3161;
t2854 = t2866 * t3120 + t2914 * t3115;
t3166 = t2841 * t3121 + t2854 * t3116;
t2889 = t2922 * t3119 + t2923 * t3114;
t2890 = -t2922 * t3114 + t2923 * t3119;
t3157 = t2890 * t3115 - t2958 * t3120;
t2857 = -t3108 * t2889 + t3111 * t3157;
t2881 = t2890 * t3120 + t2958 * t3115;
t3165 = t2857 * t3121 + t2881 * t3116;
t2954 = -t3180 + t3204;
t2956 = -t2971 - t3202;
t2920 = t2954 * t3107 + t2956 * t3110;
t2921 = t2954 * t3110 - t2956 * t3107;
t2887 = t2920 * t3119 + t2921 * t3114;
t2888 = -t2920 * t3114 + t2921 * t3119;
t2968 = -t3217 - t3218;
t3158 = t2888 * t3115 - t2968 * t3120;
t2861 = -t3108 * t2887 + t3111 * t3158;
t2884 = t2888 * t3120 + t2968 * t3115;
t3163 = t2861 * t3121 + t2884 * t3116;
t2976 = t3136 - t3205;
t2983 = -t3214 - t3218;
t2945 = t2976 * t3110 + t2983 * t3107;
t2946 = -t2976 * t3107 + t2983 * t3110;
t2910 = t2945 * t3119 + t2946 * t3114;
t2911 = -t2945 * t3114 + t2946 * t3119;
t3155 = t2911 * t3115 - t2953 * t3120;
t2874 = -t3108 * t2910 + t3111 * t3155;
t2899 = t2911 * t3120 + t2953 * t3115;
t3160 = t2874 * t3121 + t2899 * t3116;
t2977 = -t3136 - t3205;
t2993 = -t3214 - t3217;
t2950 = t2977 * t3107 + t2993 * t3110;
t2951 = t2977 * t3110 - t2993 * t3107;
t2916 = t2950 * t3119 + t2951 * t3114;
t2917 = -t2950 * t3114 + t2951 * t3119;
t3154 = t2917 * t3115 + t3120 * t3182;
t2878 = -t3108 * t2916 + t3111 * t3154;
t2902 = t2917 * t3120 - t3115 * t3182;
t3159 = t2878 * t3121 + t2902 * t3116;
t2986 = -t3050 * t3190 - t3179;
t2988 = t3048 * t3190 + t3130;
t2948 = t2986 * t3114 + t2988 * t3119;
t2949 = t2986 * t3119 - t2988 * t3114;
t2999 = -t3215 - t3216;
t3150 = t2949 * t3115 - t2999 * t3120;
t2909 = -t3108 * t2948 + t3111 * t3150;
t2940 = t2949 * t3120 + t2999 * t3115;
t3156 = t2909 * t3121 + t2940 * t3116;
t3005 = -t3214 - t3216;
t2972 = t2991 * t3119 + t3005 * t3114;
t2973 = -t2991 * t3114 + t3005 * t3119;
t2985 = (qJD(4) + t3060) * t3050 + t3179;
t3147 = t2973 * t3115 - t2985 * t3120;
t2925 = -t3108 * t2972 + t3111 * t3147;
t2944 = t2973 * t3120 + t2985 * t3115;
t3153 = t2925 * t3121 + t2944 * t3116;
t3148 = t2970 * t3115 - t3120 * t3174;
t2927 = -t3108 * t2990 + t3111 * t3148;
t2939 = t2970 * t3120 + t3115 * t3174;
t3152 = t2927 * t3121 + t2939 * t3116;
t2992 = -t3136 - t3203;
t3014 = -t3214 - t3215;
t2974 = t2992 * t3114 + t3014 * t3119;
t2975 = t2992 * t3119 - t3014 * t3114;
t2987 = t2998 - t3201;
t3146 = t2975 * t3115 - t2987 * t3120;
t2929 = -t3108 * t2974 + t3111 * t3146;
t2947 = t2975 * t3120 + t2987 * t3115;
t3151 = t2929 * t3121 + t2947 * t3116;
t3026 = -t3212 - t3213;
t3007 = t3175 - t3198;
t3009 = -t3035 + t3199;
t3143 = t3007 * t3115 + t3009 * t3120;
t2967 = -t3108 * t3026 + t3111 * t3143;
t2984 = t3007 * t3120 - t3009 * t3115;
t3149 = t2967 * t3121 + t2984 * t3116;
t3030 = t3135 - t3200;
t3034 = -t3211 - t3213;
t3141 = t3030 * t3120 + t3034 * t3115;
t2979 = -t3108 * t3006 + t3111 * t3141;
t2994 = -t3030 * t3115 + t3034 * t3120;
t3145 = t2979 * t3121 + t2994 * t3116;
t3029 = -t3135 - t3200;
t3040 = -t3211 - t3212;
t3142 = t3029 * t3115 + t3040 * t3120;
t2981 = t3108 * t3178 + t3111 * t3142;
t3000 = t3029 * t3120 - t3040 * t3115;
t3144 = t2981 * t3121 + t3000 * t3116;
t3052 = -g(3) * t3193 + t3188;
t3140 = t3051 * t3121 + t3052 * t3116;
t3067 = t3177 - t3083;
t3087 = t3102 * t3185;
t3068 = t3084 + t3087;
t3139 = t3067 * t3121 + t3068 * t3116;
t3105 = t3116 ^ 2;
t3077 = -t3105 * t3196 - t3210;
t3095 = t3121 * t3116 * t3196;
t3082 = t3095 - t3101;
t3138 = t3077 * t3121 + t3082 * t3116;
t3081 = t3095 + t3101;
t3106 = t3121 ^ 2;
t3085 = -t3106 * t3196 - t3210;
t3137 = t3081 * t3121 + t3085 * t3116;
t3094 = -qJDD(1) * t3117 - t3122 * t3123;
t3093 = qJDD(1) * t3122 - t3117 * t3123;
t3086 = (-t3105 - t3106) * t3196;
t3069 = -t3084 + t3087;
t3066 = t3177 + t3083;
t3055 = -t3081 * t3116 + t3085 * t3121;
t3053 = -t3077 * t3116 + t3082 * t3121;
t3045 = -t3067 * t3116 + t3068 * t3121;
t3042 = -t3109 * t3069 + t3112 * t3137;
t3041 = t3112 * t3069 + t3109 * t3137;
t3039 = -t3109 * t3066 + t3112 * t3138;
t3038 = t3112 * t3066 + t3109 * t3138;
t3037 = -t3109 * t3086 + t3112 * t3139;
t3036 = t3112 * t3086 + t3109 * t3139;
t3027 = -t3051 * t3116 + t3052 * t3121;
t3011 = -t3109 * t3070 + t3112 * t3140;
t3010 = t3112 * t3070 + t3109 * t3140;
t2980 = t3108 * t3142 - t3111 * t3178;
t2978 = t3111 * t3006 + t3108 * t3141;
t2966 = t3111 * t3026 + t3108 * t3143;
t2962 = -t2981 * t3116 + t3000 * t3121;
t2957 = -t2979 * t3116 + t2994 * t3121;
t2943 = -t2967 * t3116 + t2984 * t3121;
t2938 = -t3109 * t2980 + t3112 * t3144;
t2937 = t3112 * t2980 + t3109 * t3144;
t2936 = -t3109 * t2978 + t3112 * t3145;
t2935 = t3112 * t2978 + t3109 * t3145;
t2928 = t3111 * t2974 + t3108 * t3146;
t2926 = t3111 * t2990 + t3108 * t3148;
t2924 = t3111 * t2972 + t3108 * t3147;
t2919 = -t3109 * t2966 + t3112 * t3149;
t2918 = t3112 * t2966 + t3109 * t3149;
t2908 = t3111 * t2948 + t3108 * t3150;
t2903 = -t2929 * t3116 + t2947 * t3121;
t2901 = -t2925 * t3116 + t2944 * t3121;
t2900 = -t2927 * t3116 + t2939 * t3121;
t2895 = -t2909 * t3116 + t2940 * t3121;
t2883 = -t3109 * t2928 + t3112 * t3151;
t2882 = t3112 * t2928 + t3109 * t3151;
t2880 = -t3109 * t2924 + t3112 * t3153;
t2879 = t3112 * t2924 + t3109 * t3153;
t2877 = t3111 * t2916 + t3108 * t3154;
t2876 = -t3109 * t2926 + t3112 * t3152;
t2875 = t3112 * t2926 + t3109 * t3152;
t2873 = t3111 * t2910 + t3108 * t3155;
t2870 = -t3109 * t2908 + t3112 * t3156;
t2869 = t3112 * t2908 + t3109 * t3156;
t2862 = -t2878 * t3116 + t2902 * t3121;
t2860 = t3111 * t2887 + t3108 * t3158;
t2856 = t3111 * t2889 + t3108 * t3157;
t2855 = -t2874 * t3116 + t2899 * t3121;
t2847 = -t3109 * t2877 + t3112 * t3159;
t2846 = t3112 * t2877 + t3109 * t3159;
t2845 = -t2861 * t3116 + t2884 * t3121;
t2844 = -t2857 * t3116 + t2881 * t3121;
t2843 = -t3109 * t2873 + t3112 * t3160;
t2842 = t3112 * t2873 + t3109 * t3160;
t2840 = t3111 * t2865 + t3108 * t3161;
t2838 = t3111 * t2863 + t3108 * t3162;
t2834 = t3111 * t2858 + t3108 * t3164;
t2833 = -t3109 * t2860 + t3112 * t3163;
t2832 = t3112 * t2860 + t3109 * t3163;
t2831 = -t3109 * t2856 + t3112 * t3165;
t2830 = t3112 * t2856 + t3109 * t3165;
t2826 = -t2841 * t3116 + t2854 * t3121;
t2823 = -t2839 * t3116 + t2853 * t3121;
t2822 = -t2835 * t3116 + t2848 * t3121;
t2821 = -t3109 * t2840 + t3112 * t3166;
t2820 = t3112 * t2840 + t3109 * t3166;
t2819 = -t3109 * t2838 + t3112 * t3167;
t2818 = t3112 * t2838 + t3109 * t3167;
t2816 = t3111 * t2828 + t3108 * t3169;
t2815 = -t3109 * t2834 + t3112 * t3168;
t2814 = t3112 * t2834 + t3109 * t3168;
t2811 = -t2817 * t3116 + t2827 * t3121;
t2809 = -t3109 * t2816 + t3112 * t3170;
t2808 = t3112 * t2816 + t3109 * t3170;
t2806 = t3111 * t2812 + t3108 * t3171;
t2805 = -t2807 * t3116 + t2810 * t3121;
t2804 = -t3109 * t2806 + t3112 * t3172;
t2803 = t3112 * t2806 + t3109 * t3172;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3094, -t3093, 0, -t3096 * t3117 + t3097 * t3122, 0, 0, 0, 0, 0, 0, -t3042 * t3117 + t3055 * t3122, -t3039 * t3117 + t3053 * t3122, -t3037 * t3117 + t3045 * t3122, -t3011 * t3117 + t3027 * t3122, 0, 0, 0, 0, 0, 0, -t2936 * t3117 + t2957 * t3122, -t2938 * t3117 + t2962 * t3122, -t2919 * t3117 + t2943 * t3122, -t2876 * t3117 + t2900 * t3122, 0, 0, 0, 0, 0, 0, -t2880 * t3117 + t2901 * t3122, -t2883 * t3117 + t2903 * t3122, -t2870 * t3117 + t2895 * t3122, -t2831 * t3117 + t2844 * t3122, 0, 0, 0, 0, 0, 0, -t2843 * t3117 + t2855 * t3122, -t2847 * t3117 + t2862 * t3122, -t2833 * t3117 + t2845 * t3122, -t2809 * t3117 + t2811 * t3122, 0, 0, 0, 0, 0, 0, -t2819 * t3117 + t2823 * t3122, -t2821 * t3117 + t2826 * t3122, -t2815 * t3117 + t2822 * t3122, -t2804 * t3117 + t2805 * t3122; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3093, t3094, 0, t3096 * t3122 + t3097 * t3117, 0, 0, 0, 0, 0, 0, t3042 * t3122 + t3055 * t3117, t3039 * t3122 + t3053 * t3117, t3037 * t3122 + t3045 * t3117, t3011 * t3122 + t3027 * t3117, 0, 0, 0, 0, 0, 0, t2936 * t3122 + t2957 * t3117, t2938 * t3122 + t2962 * t3117, t2919 * t3122 + t2943 * t3117, t2876 * t3122 + t2900 * t3117, 0, 0, 0, 0, 0, 0, t2880 * t3122 + t2901 * t3117, t2883 * t3122 + t2903 * t3117, t2870 * t3122 + t2895 * t3117, t2831 * t3122 + t2844 * t3117, 0, 0, 0, 0, 0, 0, t2843 * t3122 + t2855 * t3117, t2847 * t3122 + t2862 * t3117, t2833 * t3122 + t2845 * t3117, t2809 * t3122 + t2811 * t3117, 0, 0, 0, 0, 0, 0, t2819 * t3122 + t2823 * t3117, t2821 * t3122 + t2826 * t3117, t2815 * t3122 + t2822 * t3117, t2804 * t3122 + t2805 * t3117; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3041, t3038, t3036, t3010, 0, 0, 0, 0, 0, 0, t2935, t2937, t2918, t2875, 0, 0, 0, 0, 0, 0, t2879, t2882, t2869, t2830, 0, 0, 0, 0, 0, 0, t2842, t2846, t2832, t2808, 0, 0, 0, 0, 0, 0, t2818, t2820, t2814, t2803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3123, -qJDD(1), 0, t3097, 0, 0, 0, 0, 0, 0, t3055, t3053, t3045, t3027, 0, 0, 0, 0, 0, 0, t2957, t2962, t2943, t2900, 0, 0, 0, 0, 0, 0, t2901, t2903, t2895, t2844, 0, 0, 0, 0, 0, 0, t2855, t2862, t2845, t2811, 0, 0, 0, 0, 0, 0, t2823, t2826, t2822, t2805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3123, 0, t3096, 0, 0, 0, 0, 0, 0, t3042, t3039, t3037, t3011, 0, 0, 0, 0, 0, 0, t2936, t2938, t2919, t2876, 0, 0, 0, 0, 0, 0, t2880, t2883, t2870, t2831, 0, 0, 0, 0, 0, 0, t2843, t2847, t2833, t2809, 0, 0, 0, 0, 0, 0, t2819, t2821, t2815, t2804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3041, t3038, t3036, t3010, 0, 0, 0, 0, 0, 0, t2935, t2937, t2918, t2875, 0, 0, 0, 0, 0, 0, t2879, t2882, t2869, t2830, 0, 0, 0, 0, 0, 0, t2842, t2846, t2832, t2808, 0, 0, 0, 0, 0, 0, t2818, t2820, t2814, t2803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3085, t3082, t3068, t3052, 0, 0, 0, 0, 0, 0, t2994, t3000, t2984, t2939, 0, 0, 0, 0, 0, 0, t2944, t2947, t2940, t2881, 0, 0, 0, 0, 0, 0, t2899, t2902, t2884, t2827, 0, 0, 0, 0, 0, 0, t2853, t2854, t2848, t2810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3081, t3077, t3067, t3051, 0, 0, 0, 0, 0, 0, t2979, t2981, t2967, t2927, 0, 0, 0, 0, 0, 0, t2925, t2929, t2909, t2857, 0, 0, 0, 0, 0, 0, t2874, t2878, t2861, t2817, 0, 0, 0, 0, 0, 0, t2839, t2841, t2835, t2807; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3069, t3066, t3086, t3070, 0, 0, 0, 0, 0, 0, t2978, t2980, t2966, t2926, 0, 0, 0, 0, 0, 0, t2924, t2928, t2908, t2856, 0, 0, 0, 0, 0, 0, t2873, t2877, t2860, t2816, 0, 0, 0, 0, 0, 0, t2838, t2840, t2834, t2806; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3034, t3029, t3007, t2970, 0, 0, 0, 0, 0, 0, t2973, t2975, t2949, t2890, 0, 0, 0, 0, 0, 0, t2911, t2917, t2888, t2829, 0, 0, 0, 0, 0, 0, t2864, t2866, t2859, t2813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3030, t3040, t3009, -t3174, 0, 0, 0, 0, 0, 0, -t2985, -t2987, -t2999, -t2958, 0, 0, 0, 0, 0, 0, -t2953, t3182, -t2968, -t2930, 0, 0, 0, 0, 0, 0, -t2912, -t2914, -t2897, -t2836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3006, -t3178, t3026, t2990, 0, 0, 0, 0, 0, 0, t2972, t2974, t2948, t2889, 0, 0, 0, 0, 0, 0, t2910, t2916, t2887, t2828, 0, 0, 0, 0, 0, 0, t2863, t2865, t2858, t2812; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3005, t2992, t2986, t2923, 0, 0, 0, 0, 0, 0, t2946, t2951, t2921, t2850, 0, 0, 0, 0, 0, 0, t2892, t2894, t2886, t2825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2991, t3014, t2988, t2922, 0, 0, 0, 0, 0, 0, t2945, t2950, t2920, t2849, 0, 0, 0, 0, 0, 0, t2891, t2893, t2885, t2824; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2985, t2987, t2999, t2958, 0, 0, 0, 0, 0, 0, t2953, -t3182, t2968, t2930, 0, 0, 0, 0, 0, 0, t2912, t2914, t2897, t2836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2983, t2977, t2954, t2872, 0, 0, 0, 0, 0, 0, t2913, t2915, t2898, t2837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2976, t2993, t2956, t2871, 0, 0, 0, 0, 0, 0, -t2931, -t2933, -t2963, -t2867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2953, -t3182, t2968, t2930, 0, 0, 0, 0, 0, 0, t2912, t2914, t2897, t2836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2964, t2942, t2932, t2852; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2941, t2965, t2934, t2851; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2931, t2933, t2963, t2867;];
f_new_reg  = t1;
