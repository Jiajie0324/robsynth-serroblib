% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRP2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP2_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:45:13
% EndTime: 2019-03-09 11:45:23
% DurationCPUTime: 3.52s
% Computational Cost: add. (7198->250), mult. (15473->425), div. (0->0), fcn. (15714->8), ass. (0->155)
t116 = sin(qJ(5));
t114 = t116 ^ 2;
t118 = cos(qJ(5));
t115 = t118 ^ 2;
t180 = cos(pkin(10));
t149 = t180 * pkin(2) + pkin(3);
t179 = sin(pkin(10));
t159 = t179 * pkin(2);
t198 = sin(qJ(4));
t199 = cos(qJ(4));
t208 = -t199 * t149 + t198 * t159;
t75 = t208 * qJD(4);
t210 = (-t114 - t115) * t75;
t207 = (t114 - t115) * qJD(5);
t117 = sin(qJ(2));
t192 = -qJ(3) - pkin(7);
t100 = t192 * t117;
t119 = cos(qJ(2));
t101 = t192 * t119;
t66 = t180 * t100 + t179 * t101;
t91 = t180 * t117 + t179 * t119;
t55 = -t91 * pkin(8) + t66;
t128 = t179 * t117 - t180 * t119;
t67 = t179 * t100 - t180 * t101;
t56 = -t128 * pkin(8) + t67;
t38 = t198 * t56 - t199 * t55;
t62 = t199 * t128 + t198 * t91;
t63 = -t198 * t128 + t199 * t91;
t110 = -t119 * pkin(2) - pkin(1);
t74 = t128 * pkin(3) + t110;
t122 = -t62 * pkin(4) + t63 * pkin(9) - t74;
t121 = t118 * t122;
t39 = t198 * t55 + t199 * t56;
t18 = -t116 * t39 - t121;
t190 = -t116 * t122 + t118 * t39;
t137 = t116 * t18 - t118 * t190;
t112 = qJD(5) * t116;
t152 = qJD(2) * t179;
t153 = qJD(2) * t180;
t134 = -t117 * t152 + t119 * t153;
t175 = t117 * t153 + t119 * t152;
t43 = t62 * qJD(4) - t199 * t134 + t198 * t175;
t44 = t63 * qJD(4) + t198 * t134 + t199 * t175;
t172 = qJD(2) * t117;
t167 = pkin(2) * t172;
t70 = t175 * pkin(3) + t167;
t124 = t44 * pkin(4) + t43 * pkin(9) + t70;
t154 = qJD(2) * t192;
t85 = t119 * qJD(3) + t117 * t154;
t86 = -t117 * qJD(3) + t119 * t154;
t52 = -t179 * t85 + t180 * t86;
t123 = -t134 * pkin(8) + t52;
t53 = t179 * t86 + t180 * t85;
t46 = -t175 * pkin(8) + t53;
t14 = t38 * qJD(4) - t198 * t123 - t199 * t46;
t5 = qJD(5) * t121 + t39 * t112 - t116 * t124 + t118 * t14;
t6 = -qJD(5) * t190 + t116 * t14 + t118 * t124;
t206 = qJD(5) * t137 + t5 * t116 - t6 * t118;
t10 = t62 * qJ(6) + t190;
t11 = -t62 * pkin(5) - t18;
t140 = t10 * t118 + t11 * t116;
t176 = t62 * qJD(6);
t181 = t44 * qJ(6);
t3 = t176 - t5 + t181;
t200 = t44 * pkin(5);
t4 = -t200 - t6;
t205 = qJD(5) * t140 + t3 * t116 - t4 * t118;
t204 = -0.2e1 * t207;
t203 = 0.2e1 * qJD(6);
t202 = pkin(9) * t44;
t201 = pkin(9) * t62;
t15 = t39 * qJD(4) - t199 * t123 + t198 * t46;
t197 = t38 * t15;
t84 = t198 * t149 + t199 * t159;
t76 = t84 * qJD(4);
t196 = t38 * t76;
t81 = pkin(9) + t84;
t195 = t44 * t81;
t194 = t62 * t81;
t193 = t75 * t62;
t113 = qJD(5) * t118;
t35 = t38 * t113;
t191 = t15 * t116 + t35;
t189 = t210 * t81;
t88 = -pkin(5) * t112 + qJ(6) * t113 + t116 * qJD(6);
t60 = t76 - t88;
t188 = -t60 + t88;
t187 = t210 * pkin(9);
t80 = -pkin(4) + t208;
t186 = t80 * t113 + t76 * t116;
t185 = t114 * t43;
t41 = t115 * t43;
t182 = t118 * t43;
t23 = (pkin(5) * t116 - qJ(6) * t118) * t63 + t38;
t178 = qJD(5) * t23;
t173 = qJ(6) * qJD(5);
t171 = qJD(2) * t119;
t32 = 0.2e1 * t62 * t44;
t170 = -0.2e1 * pkin(1) * qJD(2);
t169 = pkin(4) * t112;
t168 = pkin(4) * t113;
t166 = pkin(9) * t112;
t165 = pkin(9) * t113;
t164 = t116 * t182;
t161 = t63 * t112;
t160 = t63 * t113;
t22 = t23 * t112;
t34 = t38 * t112;
t158 = t116 * t113;
t157 = t117 * t171;
t155 = t80 * t112 - t76 * t118;
t151 = pkin(5) * qJD(5) - qJD(6);
t61 = t63 ^ 2;
t150 = t61 * t158;
t129 = qJ(6) * t43 + t151 * t63;
t136 = -pkin(5) * t43 + t63 * t173;
t7 = t136 * t116 + t129 * t118 + t15;
t148 = t23 * t43 - t63 * t7;
t145 = t15 * t63 - t38 * t43;
t144 = t43 * t62 - t63 * t44;
t143 = t76 * t63 + t193;
t142 = -t63 * t80 + t194;
t141 = -t118 * pkin(5) - t116 * qJ(6);
t139 = t10 * t116 - t11 * t118;
t138 = t116 * t190 + t118 * t18;
t135 = t161 + t182;
t30 = t62 * t113 + t116 * t44;
t28 = t62 * t112 - t118 * t44;
t98 = -pkin(4) + t141;
t133 = -t43 * t98 - t63 * t88 - t202;
t131 = -t7 + (t63 * t98 - t201) * qJD(5);
t65 = t141 + t80;
t130 = -t7 + (t63 * t65 - t194) * qJD(5);
t127 = -t43 * t65 + t60 * t63 + t193 - t195;
t126 = -t43 * t80 + t143 - t195;
t87 = t141 * qJD(5) + t118 * qJD(6);
t1 = -t139 * qJD(5) + t4 * t116 + t3 * t118;
t2 = -t138 * qJD(5) - t6 * t116 - t5 * t118;
t104 = -0.2e1 * t158;
t103 = 0.2e1 * t158;
t90 = t98 * t112;
t64 = t65 * t112;
t50 = t81 * t113 - t116 * t75;
t49 = t81 * t112 + t118 * t75;
t47 = 0.2e1 * t210;
t31 = -t116 * t43 + t160;
t27 = -0.2e1 * t63 * t41 - 0.2e1 * t150;
t26 = -0.2e1 * t63 * t185 + 0.2e1 * t150;
t25 = t41 + t185;
t24 = t207 * t63 + t164;
t17 = 0.2e1 * t63 * t164 + t61 * t207;
t16 = 0.4e1 * t63 * t158 - t185 + t41;
t9 = -t144 * t116 + t62 * t160;
t8 = -0.2e1 * t144 * t118 - 0.2e1 * t62 * t161;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, 0.2e1 * (-t117 ^ 2 + t119 ^ 2) * qJD(2), 0, -0.2e1 * t157, 0, 0, t117 * t170, t119 * t170, 0, 0, 0.2e1 * t91 * t134, -0.2e1 * t134 * t128 - 0.2e1 * t91 * t175, 0, 0.2e1 * t128 * t175, 0, 0, 0.2e1 * t110 * t175 + 0.2e1 * t128 * t167, 0.2e1 * t110 * t134 + 0.2e1 * t91 * t167, -0.2e1 * t53 * t128 - 0.2e1 * t66 * t134 - 0.2e1 * t67 * t175 - 0.2e1 * t52 * t91, 0.2e1 * t110 * t167 + 0.2e1 * t66 * t52 + 0.2e1 * t67 * t53, -0.2e1 * t63 * t43, 0.2e1 * t144, 0, t32, 0, 0, 0.2e1 * t74 * t44 + 0.2e1 * t70 * t62, -0.2e1 * t74 * t43 + 0.2e1 * t70 * t63, 0.2e1 * t14 * t62 - 0.2e1 * t39 * t44 + 0.2e1 * t145, -0.2e1 * t39 * t14 + 0.2e1 * t74 * t70 + 0.2e1 * t197, t27, 0.2e1 * t17, t8, t26, -0.2e1 * t9, t32, 0.2e1 * t145 * t116 + 0.2e1 * t18 * t44 + 0.2e1 * t35 * t63 + 0.2e1 * t6 * t62, 0.2e1 * t118 * t145 - 0.2e1 * t190 * t44 - 0.2e1 * t34 * t63 + 0.2e1 * t5 * t62, 0.2e1 * t138 * t43 + 0.2e1 * t206 * t63, 0.2e1 * t18 * t6 - 0.2e1 * t190 * t5 + 0.2e1 * t197, t27, t8, -0.2e1 * t17, t32, 0.2e1 * t9, t26, -0.2e1 * t11 * t44 - 0.2e1 * t116 * t148 + 0.2e1 * t160 * t23 - 0.2e1 * t4 * t62, 0.2e1 * t139 * t43 - 0.2e1 * t205 * t63, 0.2e1 * t10 * t44 + 0.2e1 * t118 * t148 + 0.2e1 * t22 * t63 + 0.2e1 * t3 * t62, 0.2e1 * t10 * t3 + 0.2e1 * t11 * t4 + 0.2e1 * t23 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t171, 0, -t172, 0, -pkin(7) * t171, pkin(7) * t172, 0, 0, 0, 0, t134, 0, -t175, 0, t52, -t53 (-t180 * t134 - t179 * t175) * pkin(2) (t179 * t53 + t180 * t52) * pkin(2), 0, 0, -t43, 0, -t44, 0, -t15, t14, -t208 * t43 - t84 * t44 + t143, -t14 * t84 + t15 * t208 - t39 * t75 + t196, -t24, -t16, t30, t24, -t28, 0, t34 + (-qJD(5) * t142 - t15) * t118 + t126 * t116, t142 * t112 + t118 * t126 + t191, t2, t137 * t75 + t15 * t80 + t2 * t81 + t196, -t24, t30, t16, 0, t28, t24, t116 * t127 + t118 * t130 + t22, t1, t130 * t116 + (-t127 - t178) * t118, t1 * t81 - t140 * t75 + t23 * t60 + t7 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t76, 0.2e1 * t75, 0, 0.2e1 * t208 * t76 - 0.2e1 * t84 * t75, t103, t204, 0, t104, 0, 0, 0.2e1 * t155, 0.2e1 * t186, t47, 0.2e1 * t80 * t76 + 0.2e1 * t189, t103, 0, -t204, 0, 0, t104, -0.2e1 * t60 * t118 + 0.2e1 * t64, t47, -0.2e1 * t113 * t65 - 0.2e1 * t60 * t116, 0.2e1 * t65 * t60 + 0.2e1 * t189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t134, 0, t167, 0, 0, 0, 0, 0, 0, t44, -t43, 0, t70, 0, 0, 0, 0, 0, 0, -t28, -t30, t25, -t206, 0, 0, 0, 0, 0, 0, -t28, t25, t30, t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, 0, -t44, 0, -t15, t14, 0, 0, -t24, -t16, t30, t24, -t28, 0, t34 + (pkin(4) * t43 - t202) * t116 + (-t15 + (-pkin(4) * t63 - t201) * qJD(5)) * t118, pkin(4) * t135 + pkin(9) * t28 + t191, t2, -t15 * pkin(4) + pkin(9) * t2, -t24, t30, t16, 0, t28, t24, t116 * t133 + t118 * t131 + t22, t1, t131 * t116 + (-t133 - t178) * t118, pkin(9) * t1 - t23 * t88 + t7 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t75, 0, 0, t103, t204, 0, t104, 0, 0, t155 - t169, -t168 + t186, t210, -t76 * pkin(4) + t187, t103, 0, -t204, 0, 0, t104, t188 * t118 + t64 + t90, t210, t188 * t116 + (-t65 - t98) * t113, t60 * t98 - t65 * t88 + t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, t204, 0, t104, 0, 0, -0.2e1 * t169, -0.2e1 * t168, 0, 0, t103, 0, -t204, 0, 0, t104, 0.2e1 * t88 * t118 + 0.2e1 * t90, 0, -0.2e1 * t113 * t98 + 0.2e1 * t88 * t116, -0.2e1 * t98 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, 0, -t31, t44, t6, t5, 0, 0, 0, -t135, 0, t44, t31, 0, t6 + 0.2e1 * t200, t116 * t129 - t118 * t136, 0.2e1 * t176 - t5 + 0.2e1 * t181, -t4 * pkin(5) + t3 * qJ(6) + t10 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, -t112, 0, -t50, t49, 0, 0, 0, t113, 0, 0, t112, 0, -t50, t87, -t49 (pkin(5) * t75 - t173 * t81) * t116 + (-qJ(6) * t75 - t151 * t81) * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t112, -t113, 0, 0, 0, 0, 0, 0, 0, 0, -t112, 0, t113, t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, -t112, 0, -t165, t166, 0, 0, 0, t113, 0, 0, t112, 0, -t165, t87, -t166, t87 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203, qJ(6) * t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t135, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t12;
