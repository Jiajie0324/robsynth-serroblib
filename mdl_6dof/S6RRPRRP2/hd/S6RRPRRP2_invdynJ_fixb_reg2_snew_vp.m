% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 17:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRRP2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP2_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:25:10
% EndTime: 2019-05-06 17:25:44
% DurationCPUTime: 17.79s
% Computational Cost: add. (56377->603), mult. (131527->807), div. (0->0), fcn. (98955->10), ass. (0->370)
t356 = sin(pkin(10));
t357 = cos(pkin(10));
t364 = cos(qJ(2));
t360 = sin(qJ(2));
t429 = qJD(1) * t360;
t328 = qJD(1) * t357 * t364 - t356 * t429;
t329 = (t356 * t364 + t357 * t360) * qJD(1);
t359 = sin(qJ(4));
t363 = cos(qJ(4));
t304 = -t363 * t328 + t329 * t359;
t301 = qJD(5) + t304;
t478 = t301 ^ 2;
t306 = t328 * t359 + t329 * t363;
t353 = qJD(2) + qJD(4);
t358 = sin(qJ(5));
t362 = cos(qJ(5));
t286 = t306 * t358 - t362 * t353;
t479 = t286 ^ 2;
t260 = t479 - t478;
t348 = t360 * qJDD(1);
t421 = qJD(1) * qJD(2);
t411 = t364 * t421;
t337 = t348 + t411;
t349 = t364 * qJDD(1);
t412 = t360 * t421;
t338 = t349 - t412;
t316 = -t337 * t356 + t357 * t338;
t317 = t357 * t337 + t356 * t338;
t407 = -t363 * t316 + t359 * t317;
t245 = -qJD(4) * t306 - t407;
t244 = qJDD(5) - t245;
t288 = t306 * t362 + t353 * t358;
t445 = t288 * t286;
t497 = t244 + t445;
t458 = t497 * t358;
t162 = -t260 * t362 + t458;
t264 = t301 * t288;
t246 = -t304 * qJD(4) + t359 * t316 + t363 * t317;
t420 = qJDD(2) + qJDD(4);
t408 = -t358 * t246 + t362 * t420;
t387 = qJD(5) * t288 - t408;
t186 = -t264 + t387;
t103 = t162 * t363 + t186 * t359;
t99 = t162 * t359 - t186 * t363;
t557 = t360 * (t103 * t357 - t356 * t99) + t364 * (t103 * t356 + t357 * t99);
t383 = -t362 * t246 - t358 * t420;
t378 = -t286 * qJD(5) - t383;
t446 = t286 * t301;
t490 = -t446 + t378;
t460 = t490 * t358;
t496 = t264 + t387;
t119 = -t496 * t362 - t460;
t284 = t288 ^ 2;
t493 = t284 - t479;
t84 = t119 * t359 - t363 * t493;
t86 = t119 * t363 + t359 * t493;
t554 = t360 * (t356 * t84 - t357 * t86) - t364 * (t356 * t86 + t357 * t84);
t494 = -t284 - t478;
t139 = -t362 * t494 + t458;
t551 = pkin(1) * t139;
t550 = pkin(2) * t139;
t549 = pkin(3) * t139;
t548 = pkin(4) * t139;
t547 = pkin(9) * t139;
t457 = t497 * t362;
t141 = t358 * t494 + t457;
t546 = pkin(9) * t141;
t498 = t244 - t445;
t456 = t498 * t358;
t488 = -t478 - t479;
t501 = t362 * t488 - t456;
t520 = t359 * t496 + t363 * t501;
t521 = t359 * t501 - t363 * t496;
t532 = t356 * t520 + t357 * t521;
t545 = qJ(3) * t532;
t544 = t141 * t359;
t543 = t141 * t363;
t542 = pkin(2) * t532 + pkin(3) * t521;
t455 = t498 * t362;
t502 = t358 * t488 + t455;
t533 = -t356 * t521 + t357 * t520;
t541 = -pkin(2) * t502 + qJ(3) * t533;
t540 = pkin(7) * (-t360 * t532 + t364 * t533) - pkin(1) * t502;
t489 = t446 + t378;
t261 = -t284 + t478;
t522 = -t261 * t358 + t455;
t534 = t359 * t489 + t363 * t522;
t535 = t359 * t522 - t363 * t489;
t539 = t360 * (-t356 * t535 + t357 * t534) + t364 * (t356 * t534 + t357 * t535);
t537 = pkin(8) * t521;
t159 = t260 * t358 + t457;
t536 = -pkin(3) * t502 + pkin(8) * t520;
t528 = pkin(4) * t502;
t527 = pkin(9) * t501;
t526 = pkin(9) * t502;
t523 = t362 * t261 + t456;
t355 = t364 ^ 2;
t366 = qJD(1) ^ 2;
t390 = qJD(2) * pkin(2) - qJ(3) * t429;
t361 = sin(qJ(1));
t476 = cos(qJ(1));
t409 = g(1) * t361 - t476 * g(2);
t391 = qJDD(1) * pkin(1) + t409;
t285 = pkin(2) * t338 - t390 * t429 - qJDD(3) + t391 + (qJ(3) * t355 + pkin(7)) * t366;
t459 = t490 * t362;
t115 = -t496 * t358 + t459;
t492 = t284 + t479;
t519 = pkin(4) * t492;
t518 = -qJ(6) * t358 - pkin(4);
t517 = qJ(6) * t490;
t315 = t328 * t329;
t487 = qJDD(2) + t315;
t516 = t356 * t487;
t515 = t357 * t487;
t512 = t359 * t492;
t274 = t306 * t304;
t495 = -t274 + t420;
t510 = t359 * t495;
t506 = t363 * t492;
t504 = t363 * t495;
t326 = t328 ^ 2;
t397 = qJD(2) * pkin(3) - pkin(8) * t329;
t231 = pkin(3) * t316 + pkin(8) * t326 - t329 * t397 + t285;
t444 = t301 * t358;
t256 = t288 * t444;
t443 = t301 * t362;
t416 = t286 * t443;
t398 = t256 - t416;
t481 = t244 * t359 + t363 * t398;
t484 = -t363 * t244 + t359 * t398;
t500 = t360 * (-t356 * t484 + t357 * t481) + t364 * (t356 * t481 + t357 * t484);
t389 = t358 * t387 + t416;
t418 = t359 * t445;
t482 = t363 * t389 - t418;
t417 = t363 * t445;
t483 = t359 * t389 + t417;
t499 = t360 * (-t356 * t483 + t357 * t482) + t364 * (t356 * t482 + t357 * t483);
t392 = g(1) * t476 + t361 * g(2);
t468 = qJDD(1) * pkin(7);
t334 = -t366 * pkin(1) - t392 + t468;
t351 = t355 * t366;
t474 = t360 * g(3);
t371 = -pkin(2) * t351 + t338 * qJ(3) - qJD(2) * t390 - t474;
t435 = t360 * t366;
t380 = pkin(2) * t435 + qJ(3) * t421 - g(3);
t437 = t360 * t334;
t382 = qJDD(2) * pkin(2) - t337 * qJ(3) - t437;
t423 = qJD(3) * t329;
t232 = t356 * t371 - t357 * t382 + (t356 * t334 - t357 * t380) * t364 + 0.2e1 * t423;
t428 = qJD(2) * t328;
t293 = -t317 + t428;
t486 = t293 * pkin(8);
t367 = pkin(3) * t487 - t232 + t486;
t433 = t364 * t334;
t369 = t371 + t433;
t370 = t364 * t380 + t382;
t233 = 0.2e1 * qJD(3) * t328 + t356 * t370 + t357 * t369;
t200 = -t326 * pkin(3) + t316 * pkin(8) - qJD(2) * t397 + t233;
t434 = t363 * t200;
t127 = t359 * t367 + t434;
t271 = pkin(4) * t304 - pkin(9) * t306;
t477 = t353 ^ 2;
t110 = -pkin(4) * t477 + pkin(9) * t420 - t304 * t271 + t127;
t442 = t304 * t353;
t393 = t246 - t442;
t124 = -t393 * pkin(9) + (t306 * t353 - t245) * pkin(4) - t231;
t72 = t110 * t358 - t362 * t124;
t73 = t362 * t110 + t358 * t124;
t35 = t358 * t72 + t362 * t73;
t365 = qJD(2) ^ 2;
t491 = -t351 - t365;
t249 = pkin(5) * t286 - qJ(6) * t288;
t403 = -t244 * qJ(6) + t286 * t249 - t73;
t485 = -pkin(5) * (t494 + t478) + qJ(6) * t497 - t403;
t180 = t362 * t378 - t256;
t400 = t363 * t180 + t418;
t401 = t359 * t180 - t417;
t480 = t360 * (-t356 * t401 + t357 * t400) + t364 * (t356 * t400 + t357 * t401);
t302 = t304 ^ 2;
t303 = t306 ^ 2;
t327 = t329 ^ 2;
t475 = pkin(4) * t359;
t126 = t200 * t359 - t363 * t367;
t77 = -t126 * t363 + t127 * t359;
t473 = t356 * t77;
t472 = t357 * t77;
t109 = -t420 * pkin(4) - t477 * pkin(9) + t271 * t306 + t126;
t471 = -pkin(4) * t109 + pkin(9) * t35;
t469 = qJ(6) * t362;
t171 = -t232 * t357 + t233 * t356;
t467 = t171 * t360;
t462 = t489 * t358;
t461 = t489 * t362;
t454 = t231 * t359;
t453 = t231 * t363;
t269 = t274 + t420;
t450 = t269 * t359;
t449 = t269 * t363;
t448 = t285 * t356;
t447 = t285 * t357;
t310 = qJDD(2) - t315;
t441 = t310 * t356;
t440 = t310 * t357;
t439 = t353 * t359;
t438 = t353 * t363;
t105 = t358 * t109;
t343 = t364 * t435;
t340 = qJDD(2) + t343;
t436 = t360 * t340;
t106 = t362 * t109;
t432 = t364 * (qJDD(2) - t343);
t427 = qJD(2) * t329;
t426 = qJD(2) * t356;
t425 = qJD(2) * t357;
t422 = qJD(6) * t301;
t419 = -0.2e1 * t423;
t193 = (qJD(5) + t301) * t286 + t383;
t415 = pkin(4) * t193 + t105 - t546;
t414 = -pkin(4) * t496 - t106 + t527;
t413 = -pkin(4) * t363 - pkin(3);
t78 = t126 * t359 + t363 * t127;
t172 = t232 * t356 + t357 * t233;
t319 = t364 * g(3) + t437;
t320 = t433 - t474;
t406 = t360 * t319 + t364 * t320;
t118 = -t186 * t362 + t462;
t297 = 0.2e1 * t422;
t394 = t297 - t403;
t42 = (t492 - t478) * pkin(5) + t394;
t56 = -t244 * pkin(5) - qJ(6) * t478 + t249 * t288 + qJDD(6) + t72;
t44 = qJ(6) * t492 + t56;
t405 = pkin(9) * t118 + t358 * t44 + t362 * t42 + t519;
t188 = (-qJD(5) + t301) * t288 + t408;
t120 = t188 * t362 + t462;
t404 = pkin(9) * t120 + t35 + t519;
t55 = -pkin(5) * t478 + t394;
t402 = -pkin(5) * t56 + qJ(6) * t55;
t399 = t286 * t444 - t362 * t387;
t395 = -pkin(5) * t489 - qJ(6) * t186;
t34 = t358 * t73 - t362 * t72;
t376 = t387 * pkin(5) + t109 - t517;
t375 = 0.2e1 * qJD(6) * t288 - t376;
t47 = -pkin(5) * t264 + t375 + t517;
t388 = pkin(4) * t490 + pkin(5) * t459 + t358 * t47 + t546;
t291 = t316 + t427;
t48 = (-t496 - t264) * pkin(5) + t375;
t386 = t362 * t48 + t496 * t518 + t527;
t384 = (-t286 * t358 - t288 * t362) * t301;
t381 = (-qJD(4) + t353) * t306 - t407;
t28 = t358 * t56 + t362 * t55;
t68 = (pkin(5) * t301 - 0.2e1 * qJD(6)) * t288 + t376;
t379 = pkin(9) * t28 + (-pkin(5) * t362 + t518) * t68;
t373 = pkin(5) * t498 + qJ(6) * t488 - t56;
t354 = t360 ^ 2;
t350 = t354 * t366;
t339 = t349 - 0.2e1 * t412;
t336 = t348 + 0.2e1 * t411;
t333 = pkin(7) * t366 + t391;
t323 = -t327 - t365;
t322 = -t327 + t365;
t321 = t326 - t365;
t308 = -t365 - t326;
t296 = -t303 + t477;
t295 = t302 - t477;
t294 = -t303 - t477;
t292 = t428 + t317;
t290 = -t316 + t427;
t289 = -t326 - t327;
t278 = -t323 * t356 - t440;
t277 = t323 * t357 - t441;
t276 = t308 * t357 - t516;
t275 = t308 * t356 + t515;
t273 = -t302 + t303;
t267 = -t477 - t302;
t258 = (-t304 * t363 + t306 * t359) * t353;
t257 = (-t304 * t359 - t306 * t363) * t353;
t248 = t291 * t357 - t293 * t356;
t247 = t291 * t356 + t293 * t357;
t240 = -t302 - t303;
t237 = t295 * t363 - t450;
t236 = -t296 * t359 + t504;
t235 = t295 * t359 + t449;
t234 = t296 * t363 + t510;
t230 = -t294 * t359 - t449;
t229 = t294 * t363 - t450;
t220 = -t246 - t442;
t216 = (qJD(4) + t353) * t306 + t407;
t214 = t246 * t363 - t306 * t439;
t213 = t246 * t359 + t306 * t438;
t212 = -t245 * t359 + t304 * t438;
t211 = t245 * t363 + t304 * t439;
t210 = t267 * t363 - t510;
t209 = t267 * t359 + t504;
t179 = t288 * t443 + t358 * t378;
t170 = -pkin(8) * t229 - t453;
t169 = -t229 * t356 + t230 * t357;
t168 = t229 * t357 + t230 * t356;
t155 = -t220 * t359 + t363 * t381;
t154 = -t216 * t363 - t359 * t393;
t153 = t220 * t363 + t359 * t381;
t152 = -t216 * t359 + t363 * t393;
t151 = -pkin(8) * t209 - t454;
t144 = -t209 * t356 + t210 * t357;
t143 = t209 * t357 + t210 * t356;
t128 = -pkin(3) * t393 + pkin(8) * t230 - t454;
t121 = -pkin(3) * t216 + pkin(8) * t210 + t453;
t116 = t188 * t358 - t461;
t114 = -t186 * t358 - t461;
t95 = -t193 * t359 - t543;
t93 = t193 * t363 - t544;
t91 = -t359 * t490 + t543;
t89 = t363 * t490 + t544;
t88 = -t153 * t356 + t155 * t357;
t87 = t153 * t357 + t155 * t356;
t82 = t120 * t363 - t512;
t81 = t118 * t363 - t512;
t80 = t120 * t359 + t506;
t79 = t118 * t359 + t506;
t76 = t106 + t547;
t75 = t105 - t526;
t74 = pkin(3) * t231 + pkin(8) * t78;
t69 = -pkin(4) * t114 - t395;
t66 = -pkin(8) * t153 - t77;
t64 = -t356 * t93 + t357 * t95;
t62 = t356 * t95 + t357 * t93;
t60 = -t356 * t89 + t357 * t91;
t58 = t356 * t91 + t357 * t89;
t57 = -pkin(3) * t240 + pkin(8) * t155 + t78;
t54 = t73 + t548;
t53 = t72 - t528;
t52 = -t356 * t80 + t357 * t82;
t51 = -t356 * t79 + t357 * t81;
t50 = t356 * t82 + t357 * t80;
t49 = t356 * t81 + t357 * t79;
t40 = t357 * t78 - t473;
t39 = t356 * t78 + t472;
t38 = -t373 - t528;
t37 = -t358 * t48 - t469 * t496 - t526;
t36 = -pkin(5) * t460 + t362 * t47 - t547;
t32 = -0.2e1 * t422 - t485 - t548;
t31 = -pkin(9) * t116 - t34;
t30 = t109 * t359 + t35 * t363;
t29 = -t109 * t363 + t35 * t359;
t27 = t358 * t55 - t362 * t56;
t25 = -pkin(8) * t93 - t359 * t54 + t363 * t76;
t24 = -t359 * t53 + t363 * t75 - t537;
t23 = pkin(8) * t95 + t359 * t76 + t363 * t54 + t549;
t22 = t359 * t75 + t363 * t53 + t536;
t21 = -pkin(9) * t114 - t358 * t42 + t362 * t44;
t20 = -pkin(8) * t80 + t116 * t475 + t31 * t363;
t19 = t28 * t363 + t359 * t68;
t18 = t28 * t359 - t363 * t68;
t17 = pkin(8) * t82 + t116 * t413 + t359 * t31;
t16 = -t359 * t38 + t363 * t37 - t537;
t15 = -pkin(8) * t89 - t32 * t359 + t36 * t363;
t14 = -pkin(9) * t27 + (pkin(5) * t358 - t469) * t68;
t13 = t359 * t37 + t363 * t38 + t536;
t12 = pkin(8) * t91 + t32 * t363 + t359 * t36 - t549;
t11 = -t29 * t356 + t30 * t357;
t10 = t29 * t357 + t30 * t356;
t9 = -pkin(8) * t79 + t21 * t363 - t359 * t69;
t8 = -pkin(4) * t27 - t402;
t7 = -pkin(3) * t114 + pkin(8) * t81 + t21 * t359 + t363 * t69;
t6 = -pkin(8) * t29 + (-pkin(9) * t363 + t475) * t34;
t5 = -t18 * t356 + t19 * t357;
t4 = t18 * t357 + t19 * t356;
t3 = pkin(8) * t30 + (-pkin(9) * t359 + t413) * t34;
t2 = -pkin(8) * t18 + t14 * t363 - t359 * t8;
t1 = -pkin(3) * t27 + pkin(8) * t19 + t14 * t359 + t363 * t8;
t26 = [0, 0, 0, 0, 0, qJDD(1), t409, t392, 0, 0, (t337 + t411) * t360, t336 * t364 + t339 * t360, t436 + t364 * (-t350 + t365), (t338 - t412) * t364, t360 * (t351 - t365) + t432, 0, t364 * t333 + pkin(1) * t339 + pkin(7) * (t364 * t491 - t436), -t360 * t333 - pkin(1) * t336 + pkin(7) * (-t432 - t360 * (-t350 - t365)), pkin(1) * (t350 + t351) + (t354 + t355) * t468 + t406, pkin(1) * t333 + pkin(7) * t406, t360 * (t317 * t357 - t329 * t426) + t364 * (t317 * t356 + t329 * t425), t360 * (-t290 * t357 - t292 * t356) + t364 * (-t290 * t356 + t292 * t357), t360 * (-t322 * t356 + t515) + t364 * (t322 * t357 + t516), t360 * (-t316 * t356 - t328 * t425) + t364 * (t316 * t357 - t328 * t426), t360 * (t321 * t357 - t441) + t364 * (t321 * t356 + t440), (t360 * (t328 * t357 + t329 * t356) + t364 * (t328 * t356 - t329 * t357)) * qJD(2), t360 * (-qJ(3) * t275 - t448) + t364 * (-pkin(2) * t290 + qJ(3) * t276 + t447) - pkin(1) * t290 + pkin(7) * (-t275 * t360 + t276 * t364), t360 * (-qJ(3) * t277 - t447) + t364 * (-pkin(2) * t292 + qJ(3) * t278 - t448) - pkin(1) * t292 + pkin(7) * (-t277 * t360 + t278 * t364), t360 * (-qJ(3) * t247 - t171) + t364 * (-pkin(2) * t289 + qJ(3) * t248 + t172) - pkin(1) * t289 + pkin(7) * (-t247 * t360 + t248 * t364), -qJ(3) * t467 + t364 * (pkin(2) * t285 + qJ(3) * t172) + pkin(1) * t285 + pkin(7) * (t172 * t364 - t467), t360 * (-t213 * t356 + t214 * t357) + t364 * (t213 * t357 + t214 * t356), t360 * (-t152 * t356 + t154 * t357) + t364 * (t152 * t357 + t154 * t356), t360 * (-t234 * t356 + t236 * t357) + t364 * (t234 * t357 + t236 * t356), t360 * (-t211 * t356 + t212 * t357) + t364 * (t211 * t357 + t212 * t356), t360 * (-t235 * t356 + t237 * t357) + t364 * (t235 * t357 + t237 * t356), t360 * (-t257 * t356 + t258 * t357) + t364 * (t257 * t357 + t258 * t356), t360 * (-qJ(3) * t143 - t121 * t356 + t151 * t357) + t364 * (-pkin(2) * t216 + qJ(3) * t144 + t121 * t357 + t151 * t356) - pkin(1) * t216 + pkin(7) * (-t143 * t360 + t144 * t364), t360 * (-qJ(3) * t168 - t128 * t356 + t170 * t357) + t364 * (-pkin(2) * t393 + qJ(3) * t169 + t128 * t357 + t170 * t356) - pkin(1) * t393 + pkin(7) * (-t168 * t360 + t169 * t364), t360 * (-qJ(3) * t87 - t356 * t57 + t357 * t66) + t364 * (-pkin(2) * t240 + qJ(3) * t88 + t356 * t66 + t357 * t57) - pkin(1) * t240 + pkin(7) * (-t360 * t87 + t364 * t88), t360 * (-pkin(8) * t472 - qJ(3) * t39 - t356 * t74) + t364 * (pkin(2) * t231 - pkin(8) * t473 + qJ(3) * t40 + t357 * t74) + pkin(1) * t231 + pkin(7) * (-t360 * t39 + t364 * t40), t480, -t554, t539, t499, -t557, t500, t360 * (-t22 * t356 + t24 * t357 - t545) + t364 * (t22 * t357 + t24 * t356 + t541) + t540, t360 * (-qJ(3) * t62 - t23 * t356 + t25 * t357) + t364 * (qJ(3) * t64 + t23 * t357 + t25 * t356 + t550) + t551 + pkin(7) * (-t360 * t62 + t364 * t64), t360 * (-qJ(3) * t50 - t17 * t356 + t20 * t357) + t364 * (-pkin(2) * t116 + qJ(3) * t52 + t17 * t357 + t20 * t356) - pkin(1) * t116 + pkin(7) * (-t360 * t50 + t364 * t52), t360 * (-qJ(3) * t10 - t3 * t356 + t357 * t6) + t364 * (-pkin(2) * t34 + qJ(3) * t11 + t3 * t357 + t356 * t6) - pkin(1) * t34 + pkin(7) * (-t10 * t360 + t11 * t364), t480, t539, t554, t500, t557, t499, t360 * (-t13 * t356 + t16 * t357 - t545) + t364 * (t13 * t357 + t16 * t356 + t541) + t540, t360 * (-qJ(3) * t49 - t356 * t7 + t357 * t9) + t364 * (-pkin(2) * t114 + qJ(3) * t51 + t356 * t9 + t357 * t7) - pkin(1) * t114 + pkin(7) * (-t360 * t49 + t364 * t51), t360 * (-qJ(3) * t58 - t12 * t356 + t15 * t357) + t364 * (qJ(3) * t60 + t12 * t357 + t15 * t356 - t550) - t551 + pkin(7) * (-t360 * t58 + t364 * t60), t360 * (-qJ(3) * t4 - t1 * t356 + t2 * t357) + t364 * (-pkin(2) * t27 + qJ(3) * t5 + t1 * t357 + t2 * t356) - pkin(1) * t27 + pkin(7) * (-t360 * t4 + t364 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t343, t350 - t351, t348, t343, t349, qJDD(2), -t319, -t320, 0, 0, -t315, t327 - t326, -t293, t315, t291, qJDD(2), -t356 * t320 - t357 * t319 + t419 + (-t356 * (t338 + t412) + t357 * (-t337 + t411)) * qJ(3) + (t357 * t340 - t356 * t491 + t275) * pkin(2), pkin(2) * t277 - t233, pkin(2) * t247, pkin(2) * t171, t274, t273, -t220, -t274, t381, t420, pkin(2) * t143 + pkin(3) * t209 - t126, pkin(2) * t168 - t434 - t359 * (-t356 * t369 + t357 * t370 + t419 + t486) + (-t359 * t487 + t229) * pkin(3), pkin(2) * t87 + pkin(3) * t153, pkin(2) * t39 + pkin(3) * t77, t179, t115, t523, t399, t159, t384, t414 + t542, pkin(2) * t62 + pkin(3) * t93 + t415, pkin(2) * t50 + pkin(3) * t80 + t404, pkin(2) * t10 + pkin(3) * t29 + t471, t179, t523, -t115, t384, -t159, t399, t386 + t542, pkin(2) * t49 + pkin(3) * t79 + t405, pkin(2) * t58 + pkin(3) * t89 + t388, pkin(2) * t4 + pkin(3) * t18 + t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t290, t292, t289, -t285, 0, 0, 0, 0, 0, 0, t216, t393, t240, -t231, 0, 0, 0, 0, 0, 0, t502, -t139, t116, t34, 0, 0, 0, 0, 0, 0, t502, t114, t139, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t274, t273, -t220, -t274, t381, t420, -t126, -t127, 0, 0, t179, t115, t523, t399, t159, t384, t414, t415, t404, t471, t179, t523, -t115, t384, -t159, t399, t386, t405, t388, t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, t493, t489, -t445, -t186, t244, -t72, -t73, 0, 0, t445, t489, -t493, t244, t186, -t445, t373, t395, t297 + t485, t402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t498, t489, t494, t56;];
tauJ_reg  = t26;
