% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 04:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:33:04
% EndTime: 2019-05-05 04:33:46
% DurationCPUTime: 39.86s
% Computational Cost: add. (324247->1012), mult. (708828->1649), div. (0->0), fcn. (530632->14), ass. (0->722)
t989 = cos(qJ(3));
t1087 = qJD(2) * t989;
t985 = sin(qJ(3));
t1088 = qJD(2) * t985;
t975 = sin(pkin(12));
t978 = cos(pkin(12));
t930 = -t978 * t1087 + t1088 * t975;
t932 = t1087 * t975 + t1088 * t978;
t884 = t932 * t930;
t1124 = qJDD(3) - t884;
t1136 = t1124 * t975;
t1135 = t1124 * t978;
t1081 = qJD(2) * qJD(3);
t1068 = t985 * t1081;
t966 = t989 * qJDD(2);
t1053 = -t966 + t1068;
t1067 = t989 * t1081;
t1079 = qJDD(2) * t985;
t940 = t1067 + t1079;
t1061 = t978 * t1053 + t940 * t975;
t883 = qJDD(5) + t1061;
t1014 = qJDD(6) + t883;
t984 = sin(qJ(5));
t988 = cos(qJ(5));
t897 = -t988 * qJD(3) + t932 * t984;
t899 = qJD(3) * t984 + t932 * t988;
t983 = sin(qJ(6));
t987 = cos(qJ(6));
t840 = t987 * t897 + t899 * t983;
t843 = -t897 * t983 + t899 * t987;
t764 = t843 * t840;
t1125 = t1014 - t764;
t1134 = t1125 * t983;
t1133 = t1125 * t987;
t846 = t899 * t897;
t1128 = -t846 + t883;
t1132 = t1128 * t984;
t1131 = t1128 * t988;
t976 = sin(pkin(11));
t979 = cos(pkin(11));
t1066 = g(1) * t976 - t979 * g(2);
t1090 = g(3) - qJDD(1);
t977 = sin(pkin(6));
t980 = cos(pkin(6));
t1130 = t980 * t1066 - t977 * t1090;
t1085 = qJD(3) * t932;
t847 = t1061 + t1085;
t923 = qJD(5) + t930;
t919 = qJD(6) + t923;
t809 = t919 * t840;
t886 = -t1053 * t975 + t978 * t940;
t1062 = -t988 * qJDD(3) + t984 * t886;
t824 = -qJD(5) * t899 - t1062;
t825 = -t897 * qJD(5) + t984 * qJDD(3) + t988 * t886;
t995 = qJD(6) * t840 - t824 * t983 - t825 * t987;
t1129 = -t809 - t995;
t862 = t923 * t897;
t769 = -t862 - t825;
t768 = -t862 + t825;
t1127 = t976 * t1090;
t1126 = t979 * t1090;
t1122 = qJD(2) ^ 2;
t959 = t985 * t1122 * t989;
t949 = qJDD(3) + t959;
t947 = g(1) * t979 + g(2) * t976;
t893 = -t1066 * t976 - t979 * t947;
t765 = (qJD(5) - t923) * t899 + t1062;
t1063 = -t987 * t824 + t983 * t825;
t662 = (qJD(6) - t919) * t843 + t1063;
t892 = t1066 * t979 - t976 * t947;
t835 = t840 ^ 2;
t836 = t843 ^ 2;
t1123 = t897 ^ 2;
t896 = t899 ^ 2;
t918 = t919 ^ 2;
t922 = t923 ^ 2;
t924 = t930 ^ 2;
t925 = t932 ^ 2;
t1121 = 2 * qJD(4);
t1120 = pkin(4) * t975;
t986 = sin(qJ(2));
t990 = cos(qJ(2));
t863 = -t1130 * t990 - t986 * t947;
t864 = t1130 * t986 - t990 * t947;
t794 = t863 * t986 + t864 * t990;
t1119 = pkin(7) * t794;
t914 = t1066 * t977 + t1090 * t980;
t993 = -pkin(2) * t1122 + qJDD(2) * pkin(8) + t864;
t814 = -t985 * t914 + t989 * t993;
t948 = qJD(3) * pkin(3) - qJ(4) * t1088;
t972 = t989 ^ 2;
t969 = t972 * t1122;
t778 = -pkin(3) * t969 - qJ(4) * t1053 - qJD(3) * t948 + t814;
t813 = t989 * t914 + t985 * t993;
t992 = -t813 + (t1067 - t940) * qJ(4) + t949 * pkin(3);
t681 = -0.2e1 * qJD(4) * t930 + t978 * t778 + t975 * t992;
t867 = pkin(4) * t930 - pkin(9) * t932;
t991 = qJD(3) ^ 2;
t647 = -pkin(4) * t991 + qJDD(3) * pkin(9) - t867 * t930 + t681;
t1084 = t930 * qJD(3);
t1060 = -t886 + t1084;
t855 = -qJDD(2) * pkin(2) - t1122 * pkin(8) + t863;
t798 = t1053 * pkin(3) - qJ(4) * t969 + t1088 * t948 + qJDD(4) + t855;
t711 = pkin(4) * t847 + t1060 * pkin(9) + t798;
t605 = t984 * t647 - t988 * t711;
t557 = pkin(5) * t1128 + pkin(10) * t769 - t605;
t606 = t988 * t647 + t984 * t711;
t854 = pkin(5) * t923 - pkin(10) * t899;
t563 = -pkin(5) * t1123 + pkin(10) * t824 - t854 * t923 + t606;
t502 = -t987 * t557 + t563 * t983;
t503 = t983 * t557 + t987 * t563;
t440 = -t502 * t987 + t503 * t983;
t1118 = t440 * t984;
t1117 = t440 * t988;
t1064 = t975 * t778 - t978 * t992;
t680 = t1121 * t932 + t1064;
t608 = -t680 * t978 + t681 * t975;
t1116 = t608 * t985;
t1115 = t608 * t989;
t646 = -qJDD(3) * pkin(4) - t991 * pkin(9) + (t1121 + t867) * t932 + t1064;
t616 = -t824 * pkin(5) - pkin(10) * t1123 + t899 * t854 + t646;
t1114 = t616 * t983;
t1113 = t616 * t987;
t1112 = t646 * t984;
t1111 = t646 * t988;
t734 = t1014 + t764;
t1110 = t734 * t983;
t1109 = t734 * t987;
t796 = t846 + t883;
t1108 = t796 * t984;
t1107 = t796 * t988;
t1106 = t798 * t975;
t1105 = t798 * t978;
t1104 = t855 * t985;
t1103 = t855 * t989;
t872 = qJDD(3) + t884;
t1102 = t872 * t975;
t1101 = t872 * t978;
t1100 = t919 * t983;
t1099 = t919 * t987;
t1098 = t923 * t984;
t1097 = t923 * t988;
t941 = t966 - 0.2e1 * t1068;
t900 = t941 * t989;
t1096 = t949 * t985;
t950 = qJDD(3) - t959;
t1095 = t950 * t985;
t1094 = t950 * t989;
t1092 = t986 * t914;
t1091 = t990 * t914;
t971 = t985 ^ 2;
t1089 = t971 + t972;
t1086 = t1122 * t971;
t1080 = qJDD(2) * t977;
t1078 = qJDD(2) * t986;
t1077 = qJDD(2) * t990;
t1076 = qJDD(3) * t990;
t1075 = t975 * t764;
t1074 = t978 * t764;
t1073 = t975 * t846;
t1072 = t978 * t846;
t1071 = t986 * t884;
t1070 = t990 * t884;
t1069 = -pkin(4) * t978 - pkin(3);
t441 = t502 * t983 + t987 * t503;
t609 = t680 * t975 + t978 * t681;
t729 = t813 * t985 + t989 * t814;
t1059 = t986 * t959;
t1058 = t990 * t959;
t728 = t813 * t989 - t814 * t985;
t942 = t1089 * qJDD(2);
t945 = t969 + t1086;
t890 = t942 * t990 - t945 * t986;
t1056 = pkin(7) * t890 + t728 * t986;
t943 = -t1122 * t986 + t1077;
t1055 = -pkin(7) * t943 - t1092;
t1017 = t1122 * t990 + t1078;
t1054 = -pkin(7) * t1017 + t1091;
t409 = t441 * t988 - t1118;
t404 = t409 * t975 - t616 * t978;
t405 = t409 * t978 + t616 * t975;
t376 = -t404 * t985 + t405 * t989;
t408 = t441 * t984 + t1117;
t1052 = t376 * t986 - t408 * t990;
t666 = -t809 + t995;
t585 = -t662 * t983 + t666 * t987;
t587 = -t662 * t987 - t666 * t983;
t519 = -t585 * t984 + t587 * t988;
t717 = -t835 - t836;
t504 = t519 * t975 - t717 * t978;
t505 = t519 * t978 + t717 * t975;
t443 = -t504 * t985 + t505 * t989;
t517 = t585 * t988 + t587 * t984;
t1051 = t443 * t986 - t517 * t990;
t528 = t605 * t984 + t606 * t988;
t508 = t528 * t975 - t646 * t978;
t509 = t528 * t978 + t646 * t975;
t445 = -t508 * t985 + t509 * t989;
t527 = -t605 * t988 + t606 * t984;
t1050 = t445 * t986 - t527 * t990;
t661 = (qJD(6) + t919) * t843 + t1063;
t586 = t1129 * t987 - t661 * t983;
t588 = -t1129 * t983 - t661 * t987;
t520 = -t586 * t984 + t588 * t988;
t763 = -t836 + t835;
t512 = t520 * t975 + t763 * t978;
t513 = t520 * t978 - t763 * t975;
t447 = -t512 * t985 + t513 * t989;
t518 = -t586 * t988 - t588 * t984;
t1049 = t447 * t986 + t518 * t990;
t740 = -t918 - t835;
t650 = t740 * t983 + t1133;
t651 = t740 * t987 - t1134;
t573 = -t650 * t984 + t651 * t988;
t531 = t573 * t975 - t661 * t978;
t532 = t573 * t978 + t661 * t975;
t476 = -t531 * t985 + t532 * t989;
t572 = t650 * t988 + t651 * t984;
t1048 = t476 * t986 - t572 * t990;
t784 = -t836 - t918;
t674 = t784 * t987 - t1110;
t677 = -t784 * t983 - t1109;
t598 = -t674 * t984 + t677 * t988;
t537 = -t1129 * t978 + t598 * t975;
t538 = t1129 * t975 + t598 * t978;
t480 = -t537 * t985 + t538 * t989;
t595 = t674 * t988 + t677 * t984;
t1047 = t480 * t986 - t595 * t990;
t802 = -t836 + t918;
t683 = t802 * t987 + t1134;
t685 = -t802 * t983 + t1133;
t614 = -t683 * t984 + t685 * t988;
t541 = t614 * t975 + t666 * t978;
t543 = t614 * t978 - t666 * t975;
t484 = -t541 * t985 + t543 * t989;
t612 = -t683 * t988 - t685 * t984;
t1046 = t484 * t986 + t612 * t990;
t801 = t835 - t918;
t684 = t801 * t983 + t1109;
t686 = t801 * t987 - t1110;
t615 = -t684 * t984 + t686 * t988;
t542 = t615 * t975 + t662 * t978;
t544 = t615 * t978 - t662 * t975;
t485 = -t542 * t985 + t544 * t989;
t613 = -t684 * t988 - t686 * t984;
t1045 = t485 * t986 + t613 * t990;
t703 = -qJD(6) * t843 - t1063;
t654 = t1100 * t840 + t703 * t987;
t655 = t1099 * t840 - t703 * t983;
t580 = -t654 * t984 + t655 * t988;
t551 = t580 * t975 + t1074;
t553 = t580 * t978 - t1075;
t496 = -t551 * t985 + t553 * t989;
t578 = -t654 * t988 - t655 * t984;
t1044 = t496 * t986 + t578 * t990;
t656 = t1099 * t843 - t983 * t995;
t657 = -t1100 * t843 - t987 * t995;
t581 = -t656 * t984 + t657 * t988;
t552 = t581 * t975 - t1074;
t554 = t581 * t978 + t1075;
t497 = -t552 * t985 + t554 * t989;
t579 = -t656 * t988 - t657 * t984;
t1043 = t497 * t986 + t579 * t990;
t530 = t609 * t989 - t1116;
t1042 = t530 * t986 - t798 * t990;
t725 = (-t840 * t983 - t843 * t987) * t919;
t726 = (-t840 * t987 + t843 * t983) * t919;
t642 = -t725 * t984 + t726 * t988;
t628 = -t1014 * t978 + t642 * t975;
t629 = t1014 * t975 + t642 * t978;
t547 = -t628 * t985 + t629 * t989;
t641 = -t725 * t988 - t726 * t984;
t1041 = t547 * t986 + t641 * t990;
t689 = -t765 * t988 - t769 * t984;
t808 = t896 + t1123;
t643 = t689 * t975 + t808 * t978;
t644 = t689 * t978 - t808 * t975;
t567 = -t643 * t985 + t644 * t989;
t687 = -t765 * t984 + t769 * t988;
t1040 = t567 * t986 - t687 * t990;
t767 = (-qJD(5) - t923) * t899 - t1062;
t690 = t767 * t988 - t768 * t984;
t844 = -t896 + t1123;
t652 = t690 * t975 + t844 * t978;
t653 = t690 * t978 - t844 * t975;
t577 = -t652 * t985 + t653 * t989;
t688 = -t767 * t984 - t768 * t988;
t1039 = t577 * t986 + t688 * t990;
t822 = -t922 - t1123;
t724 = t822 * t988 - t1132;
t659 = t724 * t975 + t767 * t978;
t660 = t724 * t978 - t767 * t975;
t584 = -t659 * t985 + t660 * t989;
t723 = t822 * t984 + t1131;
t1038 = t584 * t986 - t723 * t990;
t834 = -t896 - t922;
t731 = -t834 * t984 - t1107;
t669 = t731 * t975 - t768 * t978;
t670 = t731 * t978 + t768 * t975;
t591 = -t669 * t985 + t670 * t989;
t730 = t834 * t988 - t1108;
t1037 = t591 * t986 - t730 * t990;
t857 = -t896 + t922;
t738 = -t857 * t984 + t1131;
t672 = t738 * t975 + t769 * t978;
t675 = t738 * t978 - t769 * t975;
t599 = -t672 * t985 + t675 * t989;
t736 = -t857 * t988 - t1132;
t1036 = t599 * t986 + t736 * t990;
t856 = -t922 + t1123;
t739 = t856 * t988 - t1108;
t673 = t739 * t975 + t765 * t978;
t676 = t739 * t978 - t765 * t975;
t600 = -t673 * t985 + t676 * t989;
t737 = -t856 * t984 - t1107;
t1035 = t600 * t986 + t737 * t990;
t758 = t1097 * t897 - t824 * t984;
t713 = t758 * t975 + t1072;
t715 = t758 * t978 - t1073;
t632 = -t713 * t985 + t715 * t989;
t757 = -t1098 * t897 - t824 * t988;
t1034 = t632 * t986 + t757 * t990;
t760 = -t1098 * t899 + t825 * t988;
t714 = t760 * t975 - t1072;
t716 = t760 * t978 + t1073;
t633 = -t714 * t985 + t716 * t989;
t759 = -t1097 * t899 - t825 * t984;
t1033 = t633 * t986 + t759 * t990;
t788 = (-t897 * t988 + t899 * t984) * t923;
t741 = t788 * t975 - t883 * t978;
t742 = t788 * t978 + t883 * t975;
t668 = -t741 * t985 + t742 * t989;
t787 = (t897 * t984 + t899 * t988) * t923;
t1032 = t668 * t986 + t787 * t990;
t774 = -t1060 * t978 - t847 * t975;
t776 = t1060 * t975 - t847 * t978;
t693 = -t774 * t985 + t776 * t989;
t880 = -t925 + t924;
t1031 = t693 * t986 + t880 * t990;
t849 = -t1061 + t1085;
t851 = -t886 - t1084;
t775 = t849 * t975 + t851 * t978;
t777 = t849 * t978 - t851 * t975;
t694 = -t775 * t985 + t777 * t989;
t845 = -t924 - t925;
t1030 = t694 * t986 - t845 * t990;
t870 = -t991 - t924;
t799 = t870 * t975 + t1135;
t800 = t870 * t978 - t1136;
t720 = -t799 * t985 + t800 * t989;
t1029 = t720 * t986 - t847 * t990;
t1028 = t729 * t986 - t855 * t990;
t915 = t924 - t991;
t828 = t915 * t975 + t1101;
t831 = t915 * t978 - t1102;
t746 = -t828 * t985 + t831 * t989;
t1027 = t746 * t986 - t849 * t990;
t916 = -t925 + t991;
t829 = t916 * t978 + t1136;
t832 = -t916 * t975 + t1135;
t747 = -t829 * t985 + t832 * t989;
t1026 = t747 * t986 + t851 * t990;
t917 = -t925 - t991;
t830 = t917 * t978 - t1102;
t833 = -t917 * t975 - t1101;
t748 = -t830 * t985 + t833 * t989;
t1025 = t1060 * t990 + t748 * t986;
t793 = t863 * t990 - t864 * t986;
t939 = 0.2e1 * t1067 + t1079;
t888 = -t939 * t985 + t900;
t946 = t969 - t1086;
t1024 = t888 * t986 + t946 * t990;
t958 = -t969 - t991;
t907 = t958 * t989 - t1096;
t1023 = t907 * t986 + t941 * t990;
t956 = -t991 - t1086;
t909 = -t956 * t985 - t1094;
t1022 = t909 * t986 - t939 * t990;
t928 = t1017 * t980;
t1021 = t928 * t979 + t943 * t976;
t878 = t928 * t976 - t943 * t979;
t1020 = t942 * t986 + t945 * t990;
t860 = (-t930 * t975 - t932 * t978) * qJD(3);
t861 = (-t930 * t978 + t932 * t975) * qJD(3);
t786 = -t860 * t985 + t861 * t989;
t1019 = t786 * t986 - t1076;
t937 = t1089 * t1081;
t1018 = t937 * t986 - t1076;
t837 = -t1061 * t978 + t1084 * t975;
t838 = t1061 * t975 + t1084 * t978;
t755 = -t837 * t985 + t838 * t989;
t1016 = t755 * t986 + t1070;
t839 = t1085 * t978 + t886 * t975;
t842 = -t1085 * t975 + t886 * t978;
t756 = -t839 * t985 + t842 * t989;
t1015 = t756 * t986 - t1070;
t957 = t969 - t991;
t906 = t957 * t989 - t1095;
t1013 = t906 * t986 - t966 * t990;
t938 = t989 * t949;
t955 = t991 - t1086;
t908 = -t955 * t985 + t938;
t1012 = -t1077 * t985 + t908 * t986;
t911 = t1053 * t985 - t1081 * t972;
t1011 = t911 * t986 - t1058;
t912 = -t1081 * t971 + t940 * t989;
t1010 = t912 * t986 + t1058;
t436 = -pkin(5) * t616 + pkin(10) * t441;
t377 = -pkin(9) * t408 - pkin(10) * t1117 - t436 * t984;
t389 = -pkin(4) * t408 - pkin(5) * t440;
t357 = -pkin(3) * t408 + qJ(4) * t405 + t377 * t975 + t389 * t978;
t365 = -qJ(4) * t404 + t377 * t978 - t389 * t975;
t375 = t404 * t989 + t405 * t985;
t350 = -pkin(8) * t375 - t357 * t985 + t365 * t989;
t358 = -pkin(2) * t375 - pkin(3) * t404 + pkin(4) * t616 - pkin(9) * t409 + pkin(10) * t1118 - t436 * t988;
t367 = t376 * t990 + t408 * t986;
t1009 = pkin(7) * t367 + t350 * t986 + t358 * t990;
t431 = -pkin(5) * t717 + pkin(10) * t587 + t441;
t435 = -pkin(10) * t585 - t440;
t390 = -pkin(9) * t517 - t431 * t984 + t435 * t988;
t477 = -pkin(4) * t517 - pkin(5) * t585;
t373 = -pkin(3) * t517 + qJ(4) * t505 + t390 * t975 + t477 * t978;
t379 = -qJ(4) * t504 + t390 * t978 - t477 * t975;
t442 = t504 * t989 + t505 * t985;
t364 = -pkin(8) * t442 - t373 * t985 + t379 * t989;
t374 = -pkin(2) * t442 - pkin(3) * t504 + pkin(4) * t717 - pkin(9) * t519 - t431 * t988 - t435 * t984;
t420 = t443 * t990 + t517 * t986;
t1008 = pkin(7) * t420 + t364 * t986 + t374 * t990;
t525 = -pkin(5) * t661 + pkin(10) * t651 - t1113;
t545 = -pkin(10) * t650 + t1114;
t448 = -pkin(9) * t572 - t525 * t984 + t545 * t988;
t455 = -pkin(4) * t572 - pkin(5) * t650 + t502;
t401 = -pkin(3) * t572 + qJ(4) * t532 + t448 * t975 + t455 * t978;
t407 = -qJ(4) * t531 + t448 * t978 - t455 * t975;
t475 = t531 * t989 + t532 * t985;
t370 = -pkin(8) * t475 - t401 * t985 + t407 * t989;
t410 = -pkin(2) * t475 - pkin(3) * t531 + pkin(4) * t661 - pkin(9) * t573 - t525 * t988 - t545 * t984;
t451 = t476 * t990 + t572 * t986;
t1007 = pkin(7) * t451 + t370 * t986 + t410 * t990;
t526 = -pkin(5) * t1129 + pkin(10) * t677 + t1114;
t549 = -pkin(10) * t674 + t1113;
t453 = -pkin(9) * t595 - t526 * t984 + t549 * t988;
t458 = -pkin(4) * t595 - pkin(5) * t674 + t503;
t406 = -pkin(3) * t595 + qJ(4) * t538 + t453 * t975 + t458 * t978;
t411 = -qJ(4) * t537 + t453 * t978 - t458 * t975;
t479 = t537 * t989 + t538 * t985;
t372 = -pkin(8) * t479 - t406 * t985 + t411 * t989;
t413 = -pkin(2) * t479 - pkin(3) * t537 + pkin(4) * t1129 - pkin(9) * t598 - t526 * t988 - t549 * t984;
t456 = t480 * t990 + t595 * t986;
t1006 = pkin(7) * t456 + t372 * t986 + t413 * t990;
t416 = qJ(4) * t509 + (-pkin(9) * t975 + t1069) * t527;
t434 = -qJ(4) * t508 + (-pkin(9) * t978 + t1120) * t527;
t444 = t508 * t989 + t509 * t985;
t384 = -pkin(8) * t444 - t416 * t985 + t434 * t989;
t412 = -pkin(2) * t444 - pkin(3) * t508 + pkin(4) * t646 - pkin(9) * t528;
t426 = t445 * t990 + t527 * t986;
t1005 = pkin(7) * t426 + t384 * t986 + t412 * t990;
t514 = -pkin(9) * t687 - t527;
t467 = qJ(4) * t644 + t1069 * t687 + t975 * t514;
t474 = -qJ(4) * t643 + t1120 * t687 + t514 * t978;
t566 = t643 * t989 + t644 * t985;
t415 = -pkin(8) * t566 - t467 * t985 + t474 * t989;
t454 = -pkin(2) * t566 - pkin(3) * t643 - pkin(4) * t808 - pkin(9) * t689 - t528;
t533 = t567 * t990 + t687 * t986;
t1004 = pkin(7) * t533 + t415 * t986 + t454 * t990;
t562 = -pkin(4) * t723 + t605;
t617 = -pkin(9) * t723 + t1112;
t481 = -pkin(3) * t723 + qJ(4) * t660 + t562 * t978 + t617 * t975;
t498 = -qJ(4) * t659 - t562 * t975 + t617 * t978;
t583 = t659 * t989 + t660 * t985;
t429 = -pkin(8) * t583 - t481 * t985 + t498 * t989;
t492 = -pkin(2) * t583 - pkin(3) * t659 - pkin(4) * t767 - pkin(9) * t724 + t1111;
t548 = t584 * t990 + t723 * t986;
t1003 = pkin(7) * t548 + t429 * t986 + t492 * t990;
t565 = -pkin(4) * t730 + t606;
t618 = -pkin(9) * t730 + t1111;
t486 = -pkin(3) * t730 + qJ(4) * t670 + t565 * t978 + t618 * t975;
t500 = -qJ(4) * t669 - t565 * t975 + t618 * t978;
t590 = t669 * t989 + t670 * t985;
t430 = -pkin(8) * t590 - t486 * t985 + t500 * t989;
t499 = -pkin(2) * t590 - pkin(3) * t669 + pkin(4) * t768 - pkin(9) * t731 - t1112;
t550 = t591 * t990 + t730 * t986;
t1002 = pkin(7) * t550 + t430 * t986 + t499 * t990;
t529 = t609 * t985 + t1115;
t582 = -pkin(3) * t798 + qJ(4) * t609;
t463 = -pkin(8) * t529 - qJ(4) * t1115 - t582 * t985;
t491 = -pkin(2) * t529 - pkin(3) * t608;
t524 = t530 * t990 + t798 * t986;
t1001 = pkin(7) * t524 + t463 * t986 + t491 * t990;
t564 = -pkin(3) * t845 + qJ(4) * t777 + t609;
t571 = -qJ(4) * t775 - t608;
t692 = t775 * t989 + t777 * t985;
t490 = -pkin(8) * t692 - t564 * t985 + t571 * t989;
t636 = -pkin(2) * t692 - pkin(3) * t775;
t658 = t694 * t990 + t845 * t986;
t1000 = pkin(7) * t658 + t490 * t986 + t636 * t990;
t696 = -pkin(3) * t847 + qJ(4) * t800 - t1105;
t718 = -qJ(4) * t799 + t1106;
t719 = t799 * t989 + t800 * t985;
t589 = -pkin(8) * t719 - t696 * t985 + t718 * t989;
t607 = -pkin(2) * t719 - pkin(3) * t799 + t680;
t695 = t720 * t990 + t847 * t986;
t999 = pkin(7) * t695 + t589 * t986 + t607 * t990;
t705 = pkin(3) * t1060 + qJ(4) * t833 + t1106;
t732 = -qJ(4) * t830 + t1105;
t745 = t830 * t989 + t833 * t985;
t604 = -pkin(8) * t745 - t705 * t985 + t732 * t989;
t619 = -pkin(2) * t745 - pkin(3) * t830 + t681;
t708 = -t1060 * t986 + t748 * t990;
t998 = pkin(7) * t708 + t604 * t986 + t619 * t990;
t903 = t958 * t985 + t938;
t782 = -pkin(2) * t903 + t813;
t811 = -pkin(8) * t903 + t1104;
t858 = t907 * t990 - t941 * t986;
t997 = pkin(7) * t858 + t782 * t990 + t811 * t986;
t905 = t956 * t989 - t1095;
t783 = -pkin(2) * t905 + t814;
t812 = -pkin(8) * t905 + t1103;
t859 = t909 * t990 + t939 * t986;
t996 = pkin(7) * t859 + t783 * t990 + t812 * t986;
t700 = t729 * t990 + t855 * t986;
t994 = pkin(7) * t700 - (-pkin(2) * t990 - pkin(8) * t986) * t728;
t964 = t986 * qJDD(3);
t929 = t943 * t980;
t927 = t943 * t977;
t926 = t1017 * t977;
t913 = t937 * t990 + t964;
t904 = t955 * t989 + t1096;
t902 = t957 * t985 + t1094;
t901 = (t940 + t1067) * t985;
t891 = t1018 * t980;
t887 = t939 * t989 + t941 * t985;
t882 = t1020 * t980;
t881 = t1020 * t977;
t879 = -t1017 * t979 - t929 * t976;
t877 = -t1017 * t976 + t929 * t979;
t869 = t912 * t990 - t1059;
t868 = t911 * t990 + t1059;
t866 = t1078 * t985 + t908 * t990;
t865 = t906 * t990 + t966 * t986;
t853 = t888 * t990 - t946 * t986;
t827 = -t1091 + (t926 * t977 + t928 * t980) * pkin(7);
t826 = -t1092 + (-t927 * t977 - t929 * t980) * pkin(7);
t821 = -t882 * t976 + t890 * t979;
t820 = t882 * t979 + t890 * t976;
t819 = t1010 * t980 - t977 * t901;
t818 = t1011 * t980 - t977 * t900;
t817 = t1012 * t980 - t977 * t904;
t816 = t1013 * t980 - t977 * t902;
t806 = t1022 * t980 - t977 * t905;
t805 = t1023 * t980 - t977 * t903;
t804 = t1022 * t977 + t980 * t905;
t803 = t1023 * t977 + t980 * t903;
t792 = t1024 * t980 - t977 * t887;
t791 = pkin(2) * t941 + pkin(8) * t907 - t1103;
t790 = -pkin(2) * t939 + pkin(8) * t909 + t1104;
t789 = t794 * t980;
t785 = t860 * t989 + t861 * t985;
t781 = t786 * t990 + t964;
t780 = -pkin(1) * t927 + t1054 * t980 + t977 * t863;
t779 = pkin(1) * t926 + t1055 * t980 + t977 * t864;
t762 = -t793 * t980 + t977 * t914;
t761 = -t793 * t977 - t980 * t914;
t754 = t839 * t989 + t842 * t985;
t753 = t837 * t989 + t838 * t985;
t752 = -t806 * t976 + t859 * t979;
t751 = -t805 * t976 + t858 * t979;
t750 = t806 * t979 + t859 * t976;
t749 = t805 * t979 + t858 * t976;
t744 = t829 * t989 + t832 * t985;
t743 = t828 * t989 + t831 * t985;
t722 = t756 * t990 + t1071;
t721 = t755 * t990 - t1071;
t712 = pkin(2) * t945 + pkin(8) * t942 + t729;
t707 = t747 * t990 - t851 * t986;
t706 = t746 * t990 + t849 * t986;
t702 = -pkin(2) * t855 + pkin(8) * t729;
t701 = t1019 * t980 - t977 * t785;
t699 = -pkin(1) * t761 + t1119 * t980;
t698 = -t762 * t976 + t794 * t979;
t697 = t762 * t979 + t794 * t976;
t691 = t774 * t989 + t776 * t985;
t682 = t990 * t728 + (-t881 * t977 - t882 * t980) * pkin(7);
t678 = (-t761 * t977 - t762 * t980) * pkin(7);
t671 = t693 * t990 - t880 * t986;
t667 = t741 * t989 + t742 * t985;
t649 = t1015 * t980 - t977 * t754;
t648 = t1016 * t980 - t977 * t753;
t640 = t1025 * t980 - t977 * t745;
t639 = t1026 * t980 - t977 * t744;
t638 = t1027 * t980 - t977 * t743;
t637 = t1025 * t977 + t980 * t745;
t635 = -t986 * t783 + t990 * t812 + (-t804 * t977 - t806 * t980) * pkin(7);
t634 = -t986 * t782 + t990 * t811 + (-t803 * t977 - t805 * t980) * pkin(7);
t631 = t714 * t989 + t716 * t985;
t630 = t713 * t989 + t715 * t985;
t627 = t1028 * t980 + t728 * t977;
t626 = t1028 * t977 - t728 * t980;
t625 = t668 * t990 - t787 * t986;
t624 = t1029 * t980 - t977 * t719;
t623 = t1029 * t977 + t980 * t719;
t622 = -pkin(1) * t804 - t977 * t790 + t980 * t996;
t621 = -pkin(1) * t803 - t977 * t791 + t980 * t997;
t620 = -pkin(1) * t881 + t1056 * t980 - t977 * t712;
t611 = t633 * t990 - t759 * t986;
t610 = t632 * t990 - t757 * t986;
t603 = t1031 * t980 - t977 * t691;
t602 = t1030 * t980 - t977 * t692;
t601 = t1030 * t977 + t980 * t692;
t597 = t673 * t989 + t676 * t985;
t596 = t672 * t989 + t675 * t985;
t594 = -t640 * t976 + t708 * t979;
t593 = t640 * t979 + t708 * t976;
t592 = pkin(2) * t1060 + pkin(8) * t748 + t705 * t989 + t732 * t985;
t576 = t652 * t989 + t653 * t985;
t575 = -t627 * t976 + t700 * t979;
t574 = t627 * t979 + t700 * t976;
t570 = -pkin(2) * t847 + pkin(8) * t720 + t696 * t989 + t718 * t985;
t569 = -t624 * t976 + t695 * t979;
t568 = t624 * t979 + t695 * t976;
t560 = t1032 * t980 - t977 * t667;
t559 = t600 * t990 - t737 * t986;
t558 = t599 * t990 - t736 * t986;
t546 = t628 * t989 + t629 * t985;
t540 = -t602 * t976 + t658 * t979;
t539 = t602 * t979 + t658 * t976;
t536 = t577 * t990 - t688 * t986;
t535 = t1033 * t980 - t977 * t631;
t534 = t1034 * t980 - t977 * t630;
t523 = -(pkin(2) * t986 - pkin(8) * t990) * t728 + (-t626 * t977 - t627 * t980) * pkin(7);
t522 = t547 * t990 - t641 * t986;
t521 = -pkin(1) * t626 - t977 * t702 + t980 * t994;
t516 = t1035 * t980 - t977 * t597;
t515 = t1036 * t980 - t977 * t596;
t511 = t1037 * t980 - t977 * t590;
t510 = t1037 * t977 + t980 * t590;
t507 = t1038 * t980 - t977 * t583;
t506 = t1038 * t977 + t980 * t583;
t495 = t552 * t989 + t554 * t985;
t494 = t551 * t989 + t553 * t985;
t493 = t1039 * t980 - t977 * t576;
t489 = t1040 * t980 - t977 * t566;
t488 = t1040 * t977 + t980 * t566;
t487 = -pkin(2) * t845 + pkin(8) * t694 + t564 * t989 + t571 * t985;
t483 = t542 * t989 + t544 * t985;
t482 = t541 * t989 + t543 * t985;
t478 = t990 * t604 - t986 * t619 + (-t637 * t977 - t640 * t980) * pkin(7);
t473 = t1041 * t980 - t977 * t546;
t472 = t990 * t589 - t986 * t607 + (-t623 * t977 - t624 * t980) * pkin(7);
t471 = -t511 * t976 + t550 * t979;
t470 = t511 * t979 + t550 * t976;
t469 = t497 * t990 - t579 * t986;
t468 = t496 * t990 - t578 * t986;
t466 = t485 * t990 - t613 * t986;
t465 = t484 * t990 - t612 * t986;
t464 = -pkin(1) * t637 - t977 * t592 + t980 * t998;
t462 = t1042 * t980 - t977 * t529;
t461 = t1042 * t977 + t980 * t529;
t460 = -t507 * t976 + t548 * t979;
t459 = t507 * t979 + t548 * t976;
t457 = -pkin(2) * t798 + pkin(8) * t530 - qJ(4) * t1116 + t582 * t989;
t452 = -pkin(1) * t623 - t977 * t570 + t980 * t999;
t450 = -t489 * t976 + t533 * t979;
t449 = t489 * t979 + t533 * t976;
t446 = t512 * t989 + t513 * t985;
t439 = t990 * t490 - t986 * t636 + (-t601 * t977 - t602 * t980) * pkin(7);
t438 = -t462 * t976 + t524 * t979;
t437 = t462 * t979 + t524 * t976;
t433 = t1043 * t980 - t977 * t495;
t432 = t1044 * t980 - t977 * t494;
t428 = t1045 * t980 - t977 * t483;
t427 = t1046 * t980 - t977 * t482;
t425 = -pkin(2) * t730 + pkin(8) * t591 + t486 * t989 + t500 * t985;
t424 = t447 * t990 - t518 * t986;
t423 = -pkin(2) * t723 + pkin(8) * t584 + t481 * t989 + t498 * t985;
t422 = t1047 * t980 - t977 * t479;
t421 = t1047 * t977 + t980 * t479;
t419 = t1048 * t980 - t977 * t475;
t418 = t1048 * t977 + t980 * t475;
t417 = -pkin(1) * t601 + t1000 * t980 - t977 * t487;
t414 = -pkin(2) * t687 + pkin(8) * t567 + t467 * t989 + t474 * t985;
t403 = -t422 * t976 + t456 * t979;
t402 = t422 * t979 + t456 * t976;
t400 = t1050 * t980 - t977 * t444;
t399 = t1050 * t977 + t980 * t444;
t398 = t1049 * t980 - t977 * t446;
t397 = t1051 * t980 - t977 * t442;
t396 = t1051 * t977 + t980 * t442;
t395 = -t419 * t976 + t451 * t979;
t394 = t419 * t979 + t451 * t976;
t393 = t990 * t430 - t986 * t499 + (-t510 * t977 - t511 * t980) * pkin(7);
t392 = t990 * t429 - t986 * t492 + (-t506 * t977 - t507 * t980) * pkin(7);
t391 = t990 * t463 - t986 * t491 + (-t461 * t977 - t462 * t980) * pkin(7);
t388 = -pkin(1) * t461 + t1001 * t980 - t977 * t457;
t387 = t990 * t415 - t986 * t454 + (-t488 * t977 - t489 * t980) * pkin(7);
t386 = -t400 * t976 + t426 * t979;
t385 = t400 * t979 + t426 * t976;
t383 = -t397 * t976 + t420 * t979;
t382 = t397 * t979 + t420 * t976;
t381 = -pkin(1) * t510 + t1002 * t980 - t977 * t425;
t380 = -pkin(1) * t506 + t1003 * t980 - t977 * t423;
t378 = -pkin(2) * t527 + pkin(8) * t445 + t416 * t989 + t434 * t985;
t371 = -pkin(2) * t595 + pkin(8) * t480 + t406 * t989 + t411 * t985;
t369 = -pkin(1) * t488 + t1004 * t980 - t977 * t414;
t368 = -pkin(2) * t572 + pkin(8) * t476 + t401 * t989 + t407 * t985;
t366 = t990 * t372 - t986 * t413 + (-t421 * t977 - t422 * t980) * pkin(7);
t363 = -pkin(2) * t517 + pkin(8) * t443 + t373 * t989 + t379 * t985;
t362 = t990 * t370 - t986 * t410 + (-t418 * t977 - t419 * t980) * pkin(7);
t361 = t990 * t384 - t986 * t412 + (-t399 * t977 - t400 * t980) * pkin(7);
t360 = t1052 * t980 - t977 * t375;
t359 = t1052 * t977 + t980 * t375;
t356 = -pkin(1) * t399 + t1005 * t980 - t977 * t378;
t355 = -pkin(1) * t421 + t1006 * t980 - t977 * t371;
t354 = -pkin(1) * t418 + t1007 * t980 - t977 * t368;
t353 = -t360 * t976 + t367 * t979;
t352 = t360 * t979 + t367 * t976;
t351 = t990 * t364 - t986 * t374 + (-t396 * t977 - t397 * t980) * pkin(7);
t349 = -pkin(2) * t408 + pkin(8) * t376 + t357 * t989 + t365 * t985;
t348 = -pkin(1) * t396 + t1008 * t980 - t977 * t363;
t347 = t990 * t350 - t986 * t358 + (-t359 * t977 - t360 * t980) * pkin(7);
t346 = -pkin(1) * t359 + t1009 * t980 - t977 * t349;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t893, 0, 0, 0, 0, 0, 0, t879, t878, 0, t698, 0, 0, 0, 0, 0, 0, t751, t752, t821, t575, 0, 0, 0, 0, 0, 0, t569, t594, t540, t438, 0, 0, 0, 0, 0, 0, t460, t471, t450, t386, 0, 0, 0, 0, 0, 0, t395, t403, t383, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t892, 0, 0, 0, 0, 0, 0, t877, -t1021, 0, t697, 0, 0, 0, 0, 0, 0, t749, t750, t820, t574, 0, 0, 0, 0, 0, 0, t568, t593, t539, t437, 0, 0, 0, 0, 0, 0, t459, t470, t449, t385, 0, 0, 0, 0, 0, 0, t394, t402, t382, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1090, 0, 0, 0, 0, 0, 0, t927, -t926, 0, t761, 0, 0, 0, 0, 0, 0, t803, t804, t881, t626, 0, 0, 0, 0, 0, 0, t623, t637, t601, t461, 0, 0, 0, 0, 0, 0, t506, t510, t488, t399, 0, 0, 0, 0, 0, 0, t418, t421, t396, t359; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1127, -t1126, -t892, -qJ(1) * t892, 0, 0, -t878, 0, t879, t976 * t1080, -qJ(1) * t877 - t780 * t976 + t826 * t979, qJ(1) * t1021 - t779 * t976 + t827 * t979, -t789 * t976 + t793 * t979, -qJ(1) * t697 + t678 * t979 - t699 * t976, -t819 * t976 + t869 * t979, -t792 * t976 + t853 * t979, -t817 * t976 + t866 * t979, -t818 * t976 + t868 * t979, -t816 * t976 + t865 * t979, -t891 * t976 + t913 * t979, -qJ(1) * t749 - t621 * t976 + t634 * t979, -qJ(1) * t750 - t622 * t976 + t635 * t979, -qJ(1) * t820 - t620 * t976 + t682 * t979, -qJ(1) * t574 - t521 * t976 + t523 * t979, -t649 * t976 + t722 * t979, -t603 * t976 + t671 * t979, -t639 * t976 + t707 * t979, -t648 * t976 + t721 * t979, -t638 * t976 + t706 * t979, -t701 * t976 + t781 * t979, -qJ(1) * t568 - t452 * t976 + t472 * t979, -qJ(1) * t593 - t464 * t976 + t478 * t979, -qJ(1) * t539 - t417 * t976 + t439 * t979, -qJ(1) * t437 - t388 * t976 + t391 * t979, -t535 * t976 + t611 * t979, -t493 * t976 + t536 * t979, -t515 * t976 + t558 * t979, -t534 * t976 + t610 * t979, -t516 * t976 + t559 * t979, -t560 * t976 + t625 * t979, -qJ(1) * t459 - t380 * t976 + t392 * t979, -qJ(1) * t470 - t381 * t976 + t393 * t979, -qJ(1) * t449 - t369 * t976 + t387 * t979, -qJ(1) * t385 - t356 * t976 + t361 * t979, -t433 * t976 + t469 * t979, -t398 * t976 + t424 * t979, -t427 * t976 + t465 * t979, -t432 * t976 + t468 * t979, -t428 * t976 + t466 * t979, -t473 * t976 + t522 * t979, -qJ(1) * t394 - t354 * t976 + t362 * t979, -qJ(1) * t402 - t355 * t976 + t366 * t979, -qJ(1) * t382 - t348 * t976 + t351 * t979, -qJ(1) * t352 - t346 * t976 + t347 * t979; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1126, -t1127, t893, qJ(1) * t893, 0, 0, t1021, 0, t877, -t979 * t1080, qJ(1) * t879 + t780 * t979 + t826 * t976, qJ(1) * t878 + t779 * t979 + t827 * t976, t789 * t979 + t793 * t976, qJ(1) * t698 + t678 * t976 + t699 * t979, t819 * t979 + t869 * t976, t792 * t979 + t853 * t976, t817 * t979 + t866 * t976, t818 * t979 + t868 * t976, t816 * t979 + t865 * t976, t891 * t979 + t913 * t976, qJ(1) * t751 + t621 * t979 + t634 * t976, qJ(1) * t752 + t622 * t979 + t635 * t976, qJ(1) * t821 + t620 * t979 + t682 * t976, qJ(1) * t575 + t521 * t979 + t523 * t976, t649 * t979 + t722 * t976, t603 * t979 + t671 * t976, t639 * t979 + t707 * t976, t648 * t979 + t721 * t976, t638 * t979 + t706 * t976, t701 * t979 + t781 * t976, qJ(1) * t569 + t452 * t979 + t472 * t976, qJ(1) * t594 + t464 * t979 + t478 * t976, qJ(1) * t540 + t417 * t979 + t439 * t976, qJ(1) * t438 + t388 * t979 + t391 * t976, t535 * t979 + t611 * t976, t493 * t979 + t536 * t976, t515 * t979 + t558 * t976, t534 * t979 + t610 * t976, t516 * t979 + t559 * t976, t560 * t979 + t625 * t976, qJ(1) * t460 + t380 * t979 + t392 * t976, qJ(1) * t471 + t381 * t979 + t393 * t976, qJ(1) * t450 + t369 * t979 + t387 * t976, qJ(1) * t386 + t356 * t979 + t361 * t976, t433 * t979 + t469 * t976, t398 * t979 + t424 * t976, t427 * t979 + t465 * t976, t432 * t979 + t468 * t976, t428 * t979 + t466 * t976, t473 * t979 + t522 * t976, qJ(1) * t395 + t354 * t979 + t362 * t976, qJ(1) * t403 + t355 * t979 + t366 * t976, qJ(1) * t383 + t348 * t979 + t351 * t976, qJ(1) * t353 + t346 * t979 + t347 * t976; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1066, t947, 0, 0, 0, 0, t926, 0, t927, t980 * qJDD(2), pkin(1) * t929 + t1054 * t977 - t980 * t863, -pkin(1) * t928 + t1055 * t977 - t980 * t864, t794 * t977, pkin(1) * t762 + t1119 * t977, t1010 * t977 + t980 * t901, t1024 * t977 + t980 * t887, t1012 * t977 + t980 * t904, t1011 * t977 + t980 * t900, t1013 * t977 + t980 * t902, t1018 * t977, pkin(1) * t805 + t980 * t791 + t977 * t997, pkin(1) * t806 + t980 * t790 + t977 * t996, pkin(1) * t882 + t1056 * t977 + t980 * t712, pkin(1) * t627 + t980 * t702 + t977 * t994, t1015 * t977 + t980 * t754, t1031 * t977 + t980 * t691, t1026 * t977 + t980 * t744, t1016 * t977 + t980 * t753, t1027 * t977 + t980 * t743, t1019 * t977 + t980 * t785, pkin(1) * t624 + t980 * t570 + t977 * t999, pkin(1) * t640 + t980 * t592 + t977 * t998, pkin(1) * t602 + t1000 * t977 + t980 * t487, pkin(1) * t462 + t1001 * t977 + t980 * t457, t1033 * t977 + t980 * t631, t1039 * t977 + t980 * t576, t1036 * t977 + t980 * t596, t1034 * t977 + t980 * t630, t1035 * t977 + t980 * t597, t1032 * t977 + t980 * t667, pkin(1) * t507 + t1003 * t977 + t980 * t423, pkin(1) * t511 + t1002 * t977 + t980 * t425, pkin(1) * t489 + t1004 * t977 + t980 * t414, pkin(1) * t400 + t1005 * t977 + t980 * t378, t1043 * t977 + t980 * t495, t1049 * t977 + t980 * t446, t1046 * t977 + t980 * t482, t1044 * t977 + t980 * t494, t1045 * t977 + t980 * t483, t1041 * t977 + t980 * t546, pkin(1) * t419 + t1007 * t977 + t980 * t368, pkin(1) * t422 + t1006 * t977 + t980 * t371, pkin(1) * t397 + t1008 * t977 + t980 * t363, pkin(1) * t360 + t1009 * t977 + t980 * t349;];
tauB_reg  = t1;
