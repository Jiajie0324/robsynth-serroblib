% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6PRRPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 04:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6PRRPRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:34:38
% EndTime: 2019-05-05 04:34:46
% DurationCPUTime: 9.00s
% Computational Cost: add. (64774->330), mult. (141776->508), div. (0->0), fcn. (106481->14), ass. (0->283)
t2229 = sin(pkin(6));
t2232 = cos(pkin(6));
t2228 = sin(pkin(11));
t2231 = cos(pkin(11));
t2272 = g(1) * t2228 - g(2) * t2231;
t2294 = -g(3) + qJDD(1);
t2305 = t2229 * t2294 + t2232 * t2272;
t2227 = sin(pkin(12));
t2230 = cos(pkin(12));
t2241 = cos(qJ(3));
t2292 = qJD(2) * t2241;
t2237 = sin(qJ(3));
t2293 = qJD(2) * t2237;
t2193 = t2227 * t2293 - t2230 * t2292;
t2188 = qJD(5) + t2193;
t2185 = qJD(6) + t2188;
t2304 = qJD(6) + t2185;
t2244 = qJD(2) ^ 2;
t2217 = t2237 * t2244 * t2241;
t2209 = qJDD(3) + t2217;
t2195 = t2227 * t2292 + t2230 * t2293;
t2236 = sin(qJ(5));
t2240 = cos(qJ(5));
t2175 = -t2240 * qJD(3) + t2195 * t2236;
t2177 = qJD(3) * t2236 + t2195 * t2240;
t2235 = sin(qJ(6));
t2239 = cos(qJ(6));
t2149 = t2239 * t2175 + t2177 * t2235;
t2303 = t2149 ^ 2;
t2151 = -t2175 * t2235 + t2177 * t2239;
t2302 = t2151 ^ 2;
t2301 = t2175 ^ 2;
t2300 = t2177 ^ 2;
t2299 = t2185 ^ 2;
t2298 = t2188 ^ 2;
t2297 = t2193 ^ 2;
t2296 = t2195 ^ 2;
t2295 = -2 * qJD(4);
t2291 = qJD(3) * t2193;
t2290 = qJD(3) * t2195;
t2289 = t2149 * t2151;
t2288 = t2175 * t2177;
t2287 = t2188 * t2175;
t2286 = t2193 * t2195;
t2224 = t2241 ^ 2;
t2285 = t2224 * t2244;
t2284 = qJD(5) - t2188;
t2283 = qJD(6) - t2185;
t2183 = -t2229 * t2272 + t2232 * t2294;
t2207 = -g(1) * t2231 - g(2) * t2228;
t2238 = sin(qJ(2));
t2242 = cos(qJ(2));
t2164 = t2242 * t2207 + t2238 * t2305;
t2246 = -t2244 * pkin(2) + qJDD(2) * pkin(8) + t2164;
t2141 = t2237 * t2183 + t2241 * t2246;
t2221 = t2241 * qJDD(2);
t2280 = qJD(3) * t2293;
t2201 = t2221 - t2280;
t2208 = qJD(3) * pkin(3) - qJ(4) * t2293;
t2126 = -pkin(3) * t2285 + qJ(4) * t2201 - qJD(3) * t2208 + t2141;
t2140 = t2241 * t2183 - t2237 * t2246;
t2279 = qJD(3) * t2292;
t2281 = t2237 * qJDD(2);
t2200 = t2279 + t2281;
t2245 = t2140 + (-t2200 + t2279) * qJ(4) + t2209 * pkin(3);
t2090 = t2230 * t2126 + t2193 * t2295 + t2227 * t2245;
t2165 = pkin(4) * t2193 - pkin(9) * t2195;
t2243 = qJD(3) ^ 2;
t2075 = -pkin(4) * t2243 + qJDD(3) * pkin(9) - t2165 * t2193 + t2090;
t2271 = t2238 * t2207 - t2242 * t2305;
t2159 = -qJDD(2) * pkin(2) - t2244 * pkin(8) + t2271;
t2131 = -t2201 * pkin(3) - qJ(4) * t2285 + t2208 * t2293 + qJDD(4) + t2159;
t2273 = t2200 * t2227 - t2230 * t2201;
t2153 = t2273 + t2290;
t2171 = t2200 * t2230 + t2201 * t2227;
t2277 = -t2171 + t2291;
t2100 = pkin(4) * t2153 + pkin(9) * t2277 + t2131;
t2061 = t2240 * t2075 + t2236 * t2100;
t2223 = t2237 ^ 2;
t2282 = t2223 + t2224;
t2060 = -t2236 * t2075 + t2240 * t2100;
t2276 = t2227 * t2126 - t2230 * t2245;
t2251 = -t2236 * qJDD(3) - t2240 * t2171;
t2145 = -qJD(5) * t2175 - t2251;
t2274 = -t2240 * qJDD(3) + t2236 * t2171;
t2248 = qJD(5) * t2177 + t2274;
t2275 = -t2235 * t2145 - t2239 * t2248;
t2270 = qJDD(5) + t2273;
t2129 = t2270 - t2288;
t2044 = (-t2145 - t2287) * pkin(10) + t2129 * pkin(5) + t2060;
t2158 = pkin(5) * t2188 - pkin(10) * t2177;
t2045 = -pkin(5) * t2301 - pkin(10) * t2248 - t2188 * t2158 + t2061;
t2020 = t2044 * t2239 - t2045 * t2235;
t2021 = t2044 * t2235 + t2045 * t2239;
t2004 = t2020 * t2239 + t2021 * t2235;
t2005 = -t2020 * t2235 + t2021 * t2239;
t1997 = -t2004 * t2236 + t2005 * t2240;
t2074 = -qJDD(3) * pkin(4) - t2243 * pkin(9) + ((2 * qJD(4)) + t2165) * t2195 + t2276;
t2064 = pkin(5) * t2248 - pkin(10) * t2301 + t2177 * t2158 + t2074;
t1994 = t1997 * t2227 - t2064 * t2230;
t1995 = t1997 * t2230 + t2064 * t2227;
t1989 = -t1994 * t2237 + t1995 * t2241;
t1996 = t2004 * t2240 + t2005 * t2236;
t2269 = t1989 * t2238 - t1996 * t2242;
t2082 = -t2151 * t2283 + t2275;
t2247 = -t2239 * t2145 + t2235 * t2248;
t2084 = t2149 * t2283 + t2247;
t2052 = t2082 * t2235 + t2084 * t2239;
t2053 = t2082 * t2239 - t2084 * t2235;
t2031 = -t2052 * t2236 + t2053 * t2240;
t2101 = -t2302 - t2303;
t2022 = t2031 * t2227 - t2101 * t2230;
t2023 = t2031 * t2230 + t2101 * t2227;
t2007 = -t2022 * t2237 + t2023 * t2241;
t2030 = t2052 * t2240 + t2053 * t2236;
t2268 = t2007 * t2238 - t2030 * t2242;
t2034 = -t2060 * t2236 + t2061 * t2240;
t2026 = t2034 * t2227 - t2074 * t2230;
t2027 = t2034 * t2230 + t2074 * t2227;
t2009 = -t2026 * t2237 + t2027 * t2241;
t2033 = t2060 * t2240 + t2061 * t2236;
t2267 = t2009 * t2238 - t2033 * t2242;
t2249 = -qJDD(6) - t2270;
t2110 = -t2249 - t2289;
t2112 = -t2299 - t2303;
t2076 = t2110 * t2239 + t2112 * t2235;
t2077 = -t2110 * t2235 + t2112 * t2239;
t2049 = -t2076 * t2236 + t2077 * t2240;
t2081 = t2151 * t2304 - t2275;
t2037 = t2049 * t2227 - t2081 * t2230;
t2038 = t2049 * t2230 + t2081 * t2227;
t2015 = -t2037 * t2237 + t2038 * t2241;
t2048 = t2076 * t2240 + t2077 * t2236;
t2266 = t2015 * t2238 - t2048 * t2242;
t2111 = t2249 - t2289;
t2127 = -t2299 - t2302;
t2087 = t2111 * t2235 + t2127 * t2239;
t2088 = t2111 * t2239 - t2127 * t2235;
t2057 = -t2087 * t2236 + t2088 * t2240;
t2083 = -t2149 * t2304 - t2247;
t2040 = t2057 * t2227 - t2083 * t2230;
t2041 = t2057 * t2230 + t2083 * t2227;
t2017 = -t2040 * t2237 + t2041 * t2241;
t2056 = t2087 * t2240 + t2088 * t2236;
t2265 = t2017 * t2238 - t2056 * t2242;
t2089 = t2195 * t2295 - t2276;
t2062 = t2089 * t2230 + t2090 * t2227;
t2063 = -t2089 * t2227 + t2090 * t2230;
t2036 = -t2062 * t2237 + t2063 * t2241;
t2264 = t2036 * t2238 - t2131 * t2242;
t2118 = -t2177 * t2284 - t2274;
t2120 = t2175 * t2284 + t2251;
t2092 = t2118 * t2240 - t2120 * t2236;
t2138 = -t2300 - t2301;
t2071 = t2092 * t2227 - t2138 * t2230;
t2072 = t2092 * t2230 + t2138 * t2227;
t2047 = -t2071 * t2237 + t2072 * t2241;
t2091 = t2118 * t2236 + t2120 * t2240;
t2263 = t2047 * t2238 - t2091 * t2242;
t2143 = -t2298 - t2301;
t2105 = -t2129 * t2236 + t2143 * t2240;
t2117 = (qJD(5) + t2188) * t2177 + t2274;
t2079 = t2105 * t2227 - t2117 * t2230;
t2080 = t2105 * t2230 + t2117 * t2227;
t2051 = -t2079 * t2237 + t2080 * t2241;
t2104 = t2129 * t2240 + t2143 * t2236;
t2262 = t2051 * t2238 - t2104 * t2242;
t2130 = -t2270 - t2288;
t2148 = -t2298 - t2300;
t2109 = t2130 * t2240 - t2148 * t2236;
t2119 = t2145 - t2287;
t2085 = t2109 * t2227 - t2119 * t2230;
t2086 = t2109 * t2230 + t2119 * t2227;
t2055 = -t2085 * t2237 + t2086 * t2241;
t2108 = t2130 * t2236 + t2148 * t2240;
t2261 = t2055 * t2238 - t2108 * t2242;
t2154 = -t2273 + t2290;
t2156 = -t2171 - t2291;
t2124 = t2154 * t2227 + t2156 * t2230;
t2125 = t2154 * t2230 - t2156 * t2227;
t2094 = -t2124 * t2237 + t2125 * t2241;
t2152 = -t2296 - t2297;
t2260 = t2094 * t2238 - t2152 * t2242;
t2166 = -t2243 - t2297;
t2167 = qJDD(3) - t2286;
t2132 = t2166 * t2227 + t2167 * t2230;
t2133 = t2166 * t2230 - t2167 * t2227;
t2103 = -t2132 * t2237 + t2133 * t2241;
t2259 = t2103 * t2238 - t2153 * t2242;
t2107 = -t2140 * t2237 + t2141 * t2241;
t2258 = t2107 * t2238 - t2159 * t2242;
t2168 = -qJDD(3) - t2286;
t2184 = -t2243 - t2296;
t2146 = t2168 * t2227 + t2184 * t2230;
t2147 = t2168 * t2230 - t2184 * t2227;
t2114 = -t2146 * t2237 + t2147 * t2241;
t2257 = t2114 * t2238 + t2242 * t2277;
t2256 = t2164 * t2238 - t2242 * t2271;
t2216 = -t2243 - t2285;
t2180 = -t2209 * t2237 + t2216 * t2241;
t2202 = t2221 - 0.2e1 * t2280;
t2255 = t2180 * t2238 + t2202 * t2242;
t2210 = -qJDD(3) + t2217;
t2215 = -t2223 * t2244 - t2243;
t2181 = t2210 * t2241 - t2215 * t2237;
t2199 = 0.2e1 * t2279 + t2281;
t2254 = t2181 * t2238 - t2199 * t2242;
t2203 = t2282 * qJDD(2);
t2206 = t2282 * t2244;
t2253 = t2203 * t2238 + t2206 * t2242;
t2252 = qJDD(2) * t2242 - t2238 * t2244;
t2205 = -qJDD(2) * t2238 - t2242 * t2244;
t2192 = t2252 * t2232;
t2191 = t2205 * t2232;
t2190 = t2252 * t2229;
t2189 = t2205 * t2229;
t2179 = t2210 * t2237 + t2215 * t2241;
t2178 = t2209 * t2241 + t2216 * t2237;
t2173 = t2203 * t2242 - t2206 * t2238;
t2170 = t2253 * t2232;
t2169 = t2253 * t2229;
t2161 = t2181 * t2242 + t2199 * t2238;
t2160 = t2180 * t2242 - t2202 * t2238;
t2137 = -t2229 * t2179 + t2232 * t2254;
t2136 = -t2229 * t2178 + t2232 * t2255;
t2135 = t2232 * t2179 + t2229 * t2254;
t2134 = t2232 * t2178 + t2229 * t2255;
t2128 = t2164 * t2242 + t2238 * t2271;
t2116 = -t2229 * t2183 + t2232 * t2256;
t2115 = t2232 * t2183 + t2229 * t2256;
t2113 = t2146 * t2241 + t2147 * t2237;
t2106 = t2140 * t2241 + t2141 * t2237;
t2102 = t2132 * t2241 + t2133 * t2237;
t2097 = t2114 * t2242 - t2238 * t2277;
t2096 = t2107 * t2242 + t2159 * t2238;
t2095 = t2103 * t2242 + t2153 * t2238;
t2093 = t2124 * t2241 + t2125 * t2237;
t2078 = t2094 * t2242 + t2152 * t2238;
t2070 = -t2229 * t2113 + t2232 * t2257;
t2069 = t2232 * t2113 + t2229 * t2257;
t2068 = -t2229 * t2106 + t2232 * t2258;
t2067 = t2232 * t2106 + t2229 * t2258;
t2066 = -t2229 * t2102 + t2232 * t2259;
t2065 = t2232 * t2102 + t2229 * t2259;
t2059 = -t2229 * t2093 + t2232 * t2260;
t2058 = t2232 * t2093 + t2229 * t2260;
t2054 = t2085 * t2241 + t2086 * t2237;
t2050 = t2079 * t2241 + t2080 * t2237;
t2046 = t2071 * t2241 + t2072 * t2237;
t2043 = t2055 * t2242 + t2108 * t2238;
t2042 = t2051 * t2242 + t2104 * t2238;
t2039 = t2047 * t2242 + t2091 * t2238;
t2035 = t2062 * t2241 + t2063 * t2237;
t2032 = t2036 * t2242 + t2131 * t2238;
t2029 = -t2229 * t2054 + t2232 * t2261;
t2028 = t2232 * t2054 + t2229 * t2261;
t2025 = -t2229 * t2050 + t2232 * t2262;
t2024 = t2232 * t2050 + t2229 * t2262;
t2019 = -t2229 * t2046 + t2232 * t2263;
t2018 = t2232 * t2046 + t2229 * t2263;
t2016 = t2040 * t2241 + t2041 * t2237;
t2014 = t2037 * t2241 + t2038 * t2237;
t2013 = -t2229 * t2035 + t2232 * t2264;
t2012 = t2232 * t2035 + t2229 * t2264;
t2011 = t2017 * t2242 + t2056 * t2238;
t2010 = t2015 * t2242 + t2048 * t2238;
t2008 = t2026 * t2241 + t2027 * t2237;
t2006 = t2022 * t2241 + t2023 * t2237;
t2003 = t2009 * t2242 + t2033 * t2238;
t2002 = -t2229 * t2016 + t2232 * t2265;
t2001 = t2232 * t2016 + t2229 * t2265;
t2000 = t2007 * t2242 + t2030 * t2238;
t1999 = -t2229 * t2014 + t2232 * t2266;
t1998 = t2232 * t2014 + t2229 * t2266;
t1993 = -t2229 * t2008 + t2232 * t2267;
t1992 = t2232 * t2008 + t2229 * t2267;
t1991 = -t2229 * t2006 + t2232 * t2268;
t1990 = t2232 * t2006 + t2229 * t2268;
t1988 = t1994 * t2241 + t1995 * t2237;
t1987 = t1989 * t2242 + t1996 * t2238;
t1986 = -t2229 * t1988 + t2232 * t2269;
t1985 = t2232 * t1988 + t2229 * t2269;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2231 * t2207 - t2228 * t2272, 0, 0, 0, 0, 0, 0, -t2192 * t2228 + t2205 * t2231, -t2191 * t2228 - t2231 * t2252, 0, -t2116 * t2228 + t2128 * t2231, 0, 0, 0, 0, 0, 0, -t2136 * t2228 + t2160 * t2231, -t2137 * t2228 + t2161 * t2231, -t2170 * t2228 + t2173 * t2231, -t2068 * t2228 + t2096 * t2231, 0, 0, 0, 0, 0, 0, -t2066 * t2228 + t2095 * t2231, -t2070 * t2228 + t2097 * t2231, -t2059 * t2228 + t2078 * t2231, -t2013 * t2228 + t2032 * t2231, 0, 0, 0, 0, 0, 0, -t2025 * t2228 + t2042 * t2231, -t2029 * t2228 + t2043 * t2231, -t2019 * t2228 + t2039 * t2231, -t1993 * t2228 + t2003 * t2231, 0, 0, 0, 0, 0, 0, -t1999 * t2228 + t2010 * t2231, -t2002 * t2228 + t2011 * t2231, -t1991 * t2228 + t2000 * t2231, -t1986 * t2228 + t1987 * t2231; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2228 * t2207 + t2231 * t2272, 0, 0, 0, 0, 0, 0, t2192 * t2231 + t2205 * t2228, t2191 * t2231 - t2228 * t2252, 0, t2116 * t2231 + t2128 * t2228, 0, 0, 0, 0, 0, 0, t2136 * t2231 + t2160 * t2228, t2137 * t2231 + t2161 * t2228, t2170 * t2231 + t2173 * t2228, t2068 * t2231 + t2096 * t2228, 0, 0, 0, 0, 0, 0, t2066 * t2231 + t2095 * t2228, t2070 * t2231 + t2097 * t2228, t2059 * t2231 + t2078 * t2228, t2013 * t2231 + t2032 * t2228, 0, 0, 0, 0, 0, 0, t2025 * t2231 + t2042 * t2228, t2029 * t2231 + t2043 * t2228, t2019 * t2231 + t2039 * t2228, t1993 * t2231 + t2003 * t2228, 0, 0, 0, 0, 0, 0, t1999 * t2231 + t2010 * t2228, t2002 * t2231 + t2011 * t2228, t1991 * t2231 + t2000 * t2228, t1986 * t2231 + t1987 * t2228; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2294, 0, 0, 0, 0, 0, 0, t2190, t2189, 0, t2115, 0, 0, 0, 0, 0, 0, t2134, t2135, t2169, t2067, 0, 0, 0, 0, 0, 0, t2065, t2069, t2058, t2012, 0, 0, 0, 0, 0, 0, t2024, t2028, t2018, t1992, 0, 0, 0, 0, 0, 0, t1998, t2001, t1990, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2207, 0, 0, 0, 0, 0, 0, t2205, -t2252, 0, t2128, 0, 0, 0, 0, 0, 0, t2160, t2161, t2173, t2096, 0, 0, 0, 0, 0, 0, t2095, t2097, t2078, t2032, 0, 0, 0, 0, 0, 0, t2042, t2043, t2039, t2003, 0, 0, 0, 0, 0, 0, t2010, t2011, t2000, t1987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2272, 0, 0, 0, 0, 0, 0, t2192, t2191, 0, t2116, 0, 0, 0, 0, 0, 0, t2136, t2137, t2170, t2068, 0, 0, 0, 0, 0, 0, t2066, t2070, t2059, t2013, 0, 0, 0, 0, 0, 0, t2025, t2029, t2019, t1993, 0, 0, 0, 0, 0, 0, t1999, t2002, t1991, t1986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2294, 0, 0, 0, 0, 0, 0, t2190, t2189, 0, t2115, 0, 0, 0, 0, 0, 0, t2134, t2135, t2169, t2067, 0, 0, 0, 0, 0, 0, t2065, t2069, t2058, t2012, 0, 0, 0, 0, 0, 0, t2024, t2028, t2018, t1992, 0, 0, 0, 0, 0, 0, t1998, t2001, t1990, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2244, -qJDD(2), 0, t2164, 0, 0, 0, 0, 0, 0, t2180, t2181, t2203, t2107, 0, 0, 0, 0, 0, 0, t2103, t2114, t2094, t2036, 0, 0, 0, 0, 0, 0, t2051, t2055, t2047, t2009, 0, 0, 0, 0, 0, 0, t2015, t2017, t2007, t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t2244, 0, -t2271, 0, 0, 0, 0, 0, 0, t2202, -t2199, t2206, -t2159, 0, 0, 0, 0, 0, 0, -t2153, t2277, -t2152, -t2131, 0, 0, 0, 0, 0, 0, -t2104, -t2108, -t2091, -t2033, 0, 0, 0, 0, 0, 0, -t2048, -t2056, -t2030, -t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2183, 0, 0, 0, 0, 0, 0, t2178, t2179, 0, t2106, 0, 0, 0, 0, 0, 0, t2102, t2113, t2093, t2035, 0, 0, 0, 0, 0, 0, t2050, t2054, t2046, t2008, 0, 0, 0, 0, 0, 0, t2014, t2016, t2006, t1988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2216, t2210, t2221, t2141, 0, 0, 0, 0, 0, 0, t2133, t2147, t2125, t2063, 0, 0, 0, 0, 0, 0, t2080, t2086, t2072, t2027, 0, 0, 0, 0, 0, 0, t2038, t2041, t2023, t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, t2215, -t2281, t2140, 0, 0, 0, 0, 0, 0, t2132, t2146, t2124, t2062, 0, 0, 0, 0, 0, 0, t2079, t2085, t2071, t2026, 0, 0, 0, 0, 0, 0, t2037, t2040, t2022, t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2202, t2199, -t2206, t2159, 0, 0, 0, 0, 0, 0, t2153, -t2277, t2152, t2131, 0, 0, 0, 0, 0, 0, t2104, t2108, t2091, t2033, 0, 0, 0, 0, 0, 0, t2048, t2056, t2030, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2168, t2154, t2090, 0, 0, 0, 0, 0, 0, t2105, t2109, t2092, t2034, 0, 0, 0, 0, 0, 0, t2049, t2057, t2031, t1997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2167, t2184, t2156, t2089, 0, 0, 0, 0, 0, 0, -t2117, -t2119, -t2138, -t2074, 0, 0, 0, 0, 0, 0, -t2081, -t2083, -t2101, -t2064; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2153, -t2277, t2152, t2131, 0, 0, 0, 0, 0, 0, t2104, t2108, t2091, t2033, 0, 0, 0, 0, 0, 0, t2048, t2056, t2030, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2143, t2130, t2118, t2061, 0, 0, 0, 0, 0, 0, t2077, t2088, t2053, t2005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2129, t2148, t2120, t2060, 0, 0, 0, 0, 0, 0, t2076, t2087, t2052, t2004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2117, t2119, t2138, t2074, 0, 0, 0, 0, 0, 0, t2081, t2083, t2101, t2064; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2112, t2111, t2082, t2021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2110, t2127, t2084, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2081, t2083, t2101, t2064;];
f_new_reg  = t1;
