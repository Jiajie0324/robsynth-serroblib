% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 21:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 21:30:31
% EndTime: 2019-05-06 21:30:44
% DurationCPUTime: 13.74s
% Computational Cost: add. (158143->377), mult. (414970->581), div. (0->0), fcn. (336481->14), ass. (0->323)
t2653 = sin(pkin(12));
t2654 = sin(pkin(6));
t2655 = cos(pkin(12));
t2660 = sin(qJ(2));
t2665 = cos(qJ(2));
t2617 = (t2653 * t2665 + t2655 * t2660) * t2654 * qJD(1);
t2656 = cos(pkin(6));
t2647 = qJD(1) * t2656 + qJD(2);
t2659 = sin(qJ(4));
t2664 = cos(qJ(4));
t2599 = t2617 * t2659 - t2664 * t2647;
t2598 = qJD(5) + t2599;
t2596 = qJD(6) + t2598;
t2738 = qJD(6) + t2596;
t2714 = t2654 * t2665;
t2708 = qJD(1) * t2714;
t2710 = qJDD(1) * t2654;
t2626 = qJD(2) * t2708 + t2660 * t2710;
t2715 = t2654 * t2660;
t2709 = qJD(1) * t2715;
t2627 = -qJD(2) * t2709 + t2665 * t2710;
t2594 = t2655 * t2626 + t2653 * t2627;
t2615 = t2653 * t2709 - t2655 * t2708;
t2719 = t2615 * t2647;
t2575 = t2594 - t2719;
t2601 = t2617 * t2664 + t2647 * t2659;
t2613 = qJD(4) + t2615;
t2658 = sin(qJ(5));
t2663 = cos(qJ(5));
t2581 = t2601 * t2658 - t2663 * t2613;
t2583 = t2601 * t2663 + t2613 * t2658;
t2657 = sin(qJ(6));
t2662 = cos(qJ(6));
t2545 = t2662 * t2581 + t2583 * t2657;
t2737 = t2545 ^ 2;
t2547 = -t2581 * t2657 + t2583 * t2662;
t2736 = t2547 ^ 2;
t2735 = t2581 ^ 2;
t2734 = t2583 ^ 2;
t2733 = t2596 ^ 2;
t2732 = t2598 ^ 2;
t2731 = t2599 ^ 2;
t2730 = t2601 ^ 2;
t2729 = t2613 ^ 2;
t2728 = t2615 ^ 2;
t2727 = t2617 ^ 2;
t2726 = t2647 ^ 2;
t2725 = -2 * qJD(3);
t2724 = t2545 * t2547;
t2723 = t2581 * t2583;
t2722 = t2598 * t2581;
t2721 = t2599 * t2601;
t2720 = t2615 * t2617;
t2718 = t2617 * t2647;
t2661 = sin(qJ(1));
t2666 = cos(qJ(1));
t2638 = t2661 * g(1) - g(2) * t2666;
t2667 = qJD(1) ^ 2;
t2622 = pkin(8) * t2654 * t2667 + qJDD(1) * pkin(1) + t2638;
t2717 = t2622 * t2656;
t2716 = t2654 ^ 2 * t2667;
t2713 = qJD(4) - t2613;
t2712 = qJD(5) - t2598;
t2711 = qJD(6) - t2596;
t2639 = -g(1) * t2666 - g(2) * t2661;
t2623 = -pkin(1) * t2667 + pkin(8) * t2710 + t2639;
t2586 = -g(3) * t2715 + t2665 * t2623 + t2660 * t2717;
t2674 = pkin(2) * t2647 - qJ(3) * t2709;
t2652 = t2665 ^ 2;
t2707 = t2652 * t2716;
t2558 = -pkin(2) * t2707 + t2627 * qJ(3) - t2647 * t2674 + t2586;
t2646 = t2656 * qJDD(1) + qJDD(2);
t2700 = -t2660 * t2623 + t2665 * t2717;
t2706 = t2660 * t2716;
t2669 = t2646 * pkin(2) - t2626 * qJ(3) + (pkin(2) * t2706 + (qJ(3) * qJD(1) * t2647 - g(3)) * t2654) * t2665 + t2700;
t2518 = t2655 * t2558 + t2615 * t2725 + t2653 * t2669;
t2592 = pkin(3) * t2615 - pkin(9) * t2617;
t2504 = -pkin(3) * t2726 + pkin(9) * t2646 - t2592 * t2615 + t2518;
t2606 = -t2656 * g(3) - t2654 * t2622;
t2571 = -t2627 * pkin(2) - qJ(3) * t2707 + t2674 * t2709 + qJDD(3) + t2606;
t2699 = -t2653 * t2626 + t2627 * t2655;
t2573 = -t2699 + t2718;
t2668 = t2573 * pkin(3) - pkin(9) * t2575 + t2571;
t2484 = t2664 * t2504 + t2659 * t2668;
t2572 = pkin(4) * t2599 - pkin(10) * t2601;
t2697 = qJDD(4) - t2699;
t2468 = -pkin(4) * t2729 + pkin(10) * t2697 - t2599 * t2572 + t2484;
t2704 = t2653 * t2558 - t2655 * t2669;
t2503 = -t2646 * pkin(3) - t2726 * pkin(9) + ((2 * qJD(3)) + t2592) * t2617 + t2704;
t2701 = t2659 * t2594 - t2664 * t2646;
t2536 = (qJD(4) + t2613) * t2601 + t2701;
t2679 = -t2664 * t2594 - t2659 * t2646;
t2565 = -qJD(4) * t2599 - t2679;
t2702 = t2613 * t2599 - t2565;
t2478 = pkin(4) * t2536 + pkin(10) * t2702 + t2503;
t2439 = t2663 * t2468 + t2658 * t2478;
t2438 = -t2658 * t2468 + t2663 * t2478;
t2483 = -t2659 * t2504 + t2664 * t2668;
t2671 = -t2663 * t2565 - t2658 * t2697;
t2529 = -t2581 * qJD(5) - t2671;
t2703 = t2658 * t2565 - t2663 * t2697;
t2675 = qJD(5) * t2583 + t2703;
t2705 = -t2657 * t2529 - t2662 * t2675;
t2698 = t2647 * t2708;
t2673 = qJD(4) * t2601 + qJDD(5) + t2701;
t2522 = t2673 - t2723;
t2428 = (-t2529 - t2722) * pkin(11) + t2522 * pkin(5) + t2438;
t2557 = pkin(5) * t2598 - pkin(11) * t2583;
t2429 = -pkin(5) * t2735 - pkin(11) * t2675 - t2598 * t2557 + t2439;
t2402 = t2428 * t2662 - t2429 * t2657;
t2403 = t2428 * t2657 + t2429 * t2662;
t2390 = t2402 * t2662 + t2403 * t2657;
t2391 = -t2402 * t2657 + t2403 * t2662;
t2383 = -t2390 * t2658 + t2391 * t2663;
t2467 = -t2697 * pkin(4) - t2729 * pkin(10) + t2601 * t2572 - t2483;
t2442 = pkin(5) * t2675 - pkin(11) * t2735 + t2583 * t2557 + t2467;
t2379 = t2383 * t2664 + t2442 * t2659;
t2382 = t2390 * t2663 + t2391 * t2658;
t2374 = t2379 * t2653 - t2382 * t2655;
t2375 = t2379 * t2655 + t2382 * t2653;
t2696 = t2374 * t2665 + t2375 * t2660;
t2463 = -t2547 * t2711 + t2705;
t2670 = -t2662 * t2529 + t2657 * t2675;
t2465 = t2545 * t2711 + t2670;
t2430 = t2463 * t2657 + t2465 * t2662;
t2431 = t2463 * t2662 - t2465 * t2657;
t2415 = -t2430 * t2658 + t2431 * t2663;
t2489 = -t2736 - t2737;
t2409 = t2415 * t2664 + t2489 * t2659;
t2414 = t2430 * t2663 + t2431 * t2658;
t2393 = t2409 * t2653 - t2414 * t2655;
t2394 = t2409 * t2655 + t2414 * t2653;
t2695 = t2393 * t2665 + t2394 * t2660;
t2421 = -t2438 * t2658 + t2439 * t2663;
t2407 = t2421 * t2664 + t2467 * t2659;
t2420 = t2438 * t2663 + t2439 * t2658;
t2396 = t2407 * t2653 - t2420 * t2655;
t2397 = t2407 * t2655 + t2420 * t2653;
t2694 = t2396 * t2665 + t2397 * t2660;
t2672 = -qJDD(6) - t2673;
t2498 = -t2672 - t2724;
t2505 = -t2733 - t2737;
t2474 = t2498 * t2662 + t2505 * t2657;
t2475 = -t2498 * t2657 + t2505 * t2662;
t2437 = -t2474 * t2658 + t2475 * t2663;
t2462 = t2547 * t2738 - t2705;
t2425 = t2437 * t2664 + t2462 * t2659;
t2436 = t2474 * t2663 + t2475 * t2658;
t2404 = t2425 * t2653 - t2436 * t2655;
t2405 = t2425 * t2655 + t2436 * t2653;
t2693 = t2404 * t2665 + t2405 * t2660;
t2499 = t2672 - t2724;
t2526 = -t2733 - t2736;
t2481 = t2499 * t2657 + t2526 * t2662;
t2482 = t2499 * t2662 - t2526 * t2657;
t2441 = -t2481 * t2658 + t2482 * t2663;
t2464 = -t2545 * t2738 - t2670;
t2427 = t2441 * t2664 + t2464 * t2659;
t2440 = t2481 * t2663 + t2482 * t2658;
t2410 = t2427 * t2653 - t2440 * t2655;
t2411 = t2427 * t2655 + t2440 * t2653;
t2692 = t2410 * t2665 + t2411 * t2660;
t2507 = -t2583 * t2712 - t2703;
t2509 = t2581 * t2712 + t2671;
t2480 = t2507 * t2663 - t2509 * t2658;
t2533 = -t2734 - t2735;
t2460 = t2480 * t2664 + t2533 * t2659;
t2479 = t2507 * t2658 + t2509 * t2663;
t2432 = t2460 * t2653 - t2479 * t2655;
t2433 = t2460 * t2655 + t2479 * t2653;
t2691 = t2432 * t2665 + t2433 * t2660;
t2448 = -t2483 * t2659 + t2484 * t2664;
t2434 = t2448 * t2653 - t2503 * t2655;
t2435 = t2448 * t2655 + t2503 * t2653;
t2690 = t2434 * t2665 + t2435 * t2660;
t2535 = -t2732 - t2735;
t2491 = -t2522 * t2658 + t2535 * t2663;
t2506 = (qJD(5) + t2598) * t2583 + t2703;
t2471 = t2491 * t2664 + t2506 * t2659;
t2490 = t2522 * t2663 + t2535 * t2658;
t2445 = t2471 * t2653 - t2490 * t2655;
t2446 = t2471 * t2655 + t2490 * t2653;
t2689 = t2445 * t2665 + t2446 * t2660;
t2523 = -t2673 - t2723;
t2544 = -t2732 - t2734;
t2497 = t2523 * t2663 - t2544 * t2658;
t2508 = t2529 - t2722;
t2473 = t2497 * t2664 + t2508 * t2659;
t2496 = t2523 * t2658 + t2544 * t2663;
t2451 = t2473 * t2653 - t2496 * t2655;
t2452 = t2473 * t2655 + t2496 * t2653;
t2688 = t2451 * t2665 + t2452 * t2660;
t2517 = t2617 * t2725 - t2704;
t2485 = t2517 * t2655 + t2518 * t2653;
t2486 = -t2517 * t2653 + t2518 * t2655;
t2687 = t2485 * t2665 + t2486 * t2660;
t2537 = -t2601 * t2713 - t2701;
t2539 = t2599 * t2713 + t2679;
t2511 = t2537 * t2664 - t2539 * t2659;
t2556 = -t2730 - t2731;
t2487 = t2511 * t2653 - t2556 * t2655;
t2488 = t2511 * t2655 + t2556 * t2653;
t2686 = t2487 * t2665 + t2488 * t2660;
t2548 = t2697 - t2721;
t2562 = -t2729 - t2731;
t2525 = -t2548 * t2659 + t2562 * t2664;
t2494 = t2525 * t2653 - t2536 * t2655;
t2495 = t2525 * t2655 + t2536 * t2653;
t2685 = t2494 * t2665 + t2495 * t2660;
t2549 = -t2697 - t2721;
t2568 = -t2729 - t2730;
t2531 = t2549 * t2664 - t2568 * t2659;
t2500 = t2531 * t2653 + t2655 * t2702;
t2501 = t2531 * t2655 - t2653 * t2702;
t2684 = t2500 * t2665 + t2501 * t2660;
t2574 = t2699 + t2718;
t2576 = -t2594 - t2719;
t2540 = t2574 * t2653 + t2576 * t2655;
t2541 = t2574 * t2655 - t2576 * t2653;
t2683 = t2540 * t2665 + t2541 * t2660;
t2587 = -t2726 - t2728;
t2588 = t2646 - t2720;
t2551 = t2587 * t2653 + t2588 * t2655;
t2552 = t2587 * t2655 - t2588 * t2653;
t2682 = t2551 * t2665 + t2552 * t2660;
t2589 = -t2646 - t2720;
t2597 = -t2726 - t2727;
t2560 = t2589 * t2653 + t2597 * t2655;
t2561 = t2589 * t2655 - t2597 * t2653;
t2681 = t2560 * t2665 + t2561 * t2660;
t2585 = -g(3) * t2714 + t2700;
t2680 = t2585 * t2665 + t2586 * t2660;
t2603 = t2698 - t2626;
t2631 = t2647 * t2709;
t2604 = t2627 + t2631;
t2678 = t2603 * t2665 + t2604 * t2660;
t2651 = t2660 ^ 2;
t2614 = -t2651 * t2716 - t2726;
t2637 = t2665 * t2706;
t2625 = t2637 - t2646;
t2677 = t2614 * t2665 + t2625 * t2660;
t2624 = t2637 + t2646;
t2628 = -t2726 - t2707;
t2676 = t2624 * t2665 + t2628 * t2660;
t2636 = -qJDD(1) * t2661 - t2666 * t2667;
t2635 = qJDD(1) * t2666 - t2661 * t2667;
t2629 = (-t2651 - t2652) * t2716;
t2605 = -t2627 + t2631;
t2602 = t2698 + t2626;
t2595 = -t2624 * t2660 + t2628 * t2665;
t2590 = -t2614 * t2660 + t2625 * t2665;
t2580 = -t2727 - t2728;
t2577 = -t2603 * t2660 + t2604 * t2665;
t2570 = -t2654 * t2605 + t2656 * t2676;
t2569 = t2656 * t2605 + t2654 * t2676;
t2567 = -t2654 * t2602 + t2656 * t2677;
t2566 = t2656 * t2602 + t2654 * t2677;
t2564 = -t2654 * t2629 + t2656 * t2678;
t2563 = t2656 * t2629 + t2654 * t2678;
t2550 = -t2585 * t2660 + t2586 * t2665;
t2543 = -t2654 * t2606 + t2656 * t2680;
t2542 = t2656 * t2606 + t2654 * t2680;
t2532 = -t2560 * t2660 + t2561 * t2665;
t2530 = t2549 * t2659 + t2568 * t2664;
t2524 = t2548 * t2664 + t2562 * t2659;
t2521 = -t2551 * t2660 + t2552 * t2665;
t2516 = -t2654 * t2575 + t2656 * t2681;
t2515 = t2656 * t2575 + t2654 * t2681;
t2514 = -t2540 * t2660 + t2541 * t2665;
t2513 = -t2654 * t2573 + t2656 * t2682;
t2512 = t2656 * t2573 + t2654 * t2682;
t2510 = t2537 * t2659 + t2539 * t2664;
t2493 = -t2654 * t2580 + t2656 * t2683;
t2492 = t2656 * t2580 + t2654 * t2683;
t2472 = t2497 * t2659 - t2508 * t2664;
t2470 = t2491 * t2659 - t2506 * t2664;
t2469 = -t2500 * t2660 + t2501 * t2665;
t2461 = -t2494 * t2660 + t2495 * t2665;
t2459 = t2480 * t2659 - t2533 * t2664;
t2458 = -t2487 * t2660 + t2488 * t2665;
t2457 = -t2654 * t2530 + t2656 * t2684;
t2456 = t2656 * t2530 + t2654 * t2684;
t2455 = -t2654 * t2524 + t2656 * t2685;
t2454 = t2656 * t2524 + t2654 * t2685;
t2453 = -t2485 * t2660 + t2486 * t2665;
t2450 = -t2654 * t2571 + t2656 * t2687;
t2449 = t2656 * t2571 + t2654 * t2687;
t2447 = t2483 * t2664 + t2484 * t2659;
t2444 = -t2654 * t2510 + t2656 * t2686;
t2443 = t2656 * t2510 + t2654 * t2686;
t2426 = t2441 * t2659 - t2464 * t2664;
t2424 = t2437 * t2659 - t2462 * t2664;
t2423 = -t2451 * t2660 + t2452 * t2665;
t2422 = -t2445 * t2660 + t2446 * t2665;
t2419 = -t2654 * t2472 + t2656 * t2688;
t2418 = t2656 * t2472 + t2654 * t2688;
t2417 = -t2434 * t2660 + t2435 * t2665;
t2416 = -t2432 * t2660 + t2433 * t2665;
t2413 = -t2654 * t2470 + t2656 * t2689;
t2412 = t2656 * t2470 + t2654 * t2689;
t2408 = t2415 * t2659 - t2489 * t2664;
t2406 = t2421 * t2659 - t2467 * t2664;
t2401 = -t2654 * t2459 + t2656 * t2691;
t2400 = t2656 * t2459 + t2654 * t2691;
t2399 = -t2654 * t2447 + t2656 * t2690;
t2398 = t2656 * t2447 + t2654 * t2690;
t2395 = -t2410 * t2660 + t2411 * t2665;
t2392 = -t2404 * t2660 + t2405 * t2665;
t2389 = -t2654 * t2426 + t2656 * t2692;
t2388 = t2656 * t2426 + t2654 * t2692;
t2387 = -t2654 * t2424 + t2656 * t2693;
t2386 = t2656 * t2424 + t2654 * t2693;
t2385 = -t2396 * t2660 + t2397 * t2665;
t2384 = -t2393 * t2660 + t2394 * t2665;
t2381 = -t2654 * t2406 + t2656 * t2694;
t2380 = t2656 * t2406 + t2654 * t2694;
t2378 = t2383 * t2659 - t2442 * t2664;
t2377 = -t2654 * t2408 + t2656 * t2695;
t2376 = t2656 * t2408 + t2654 * t2695;
t2373 = -t2374 * t2660 + t2375 * t2665;
t2372 = -t2654 * t2378 + t2656 * t2696;
t2371 = t2656 * t2378 + t2654 * t2696;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2636, -t2635, 0, -t2638 * t2661 + t2639 * t2666, 0, 0, 0, 0, 0, 0, -t2570 * t2661 + t2595 * t2666, -t2567 * t2661 + t2590 * t2666, -t2564 * t2661 + t2577 * t2666, -t2543 * t2661 + t2550 * t2666, 0, 0, 0, 0, 0, 0, -t2513 * t2661 + t2521 * t2666, -t2516 * t2661 + t2532 * t2666, -t2493 * t2661 + t2514 * t2666, -t2450 * t2661 + t2453 * t2666, 0, 0, 0, 0, 0, 0, -t2455 * t2661 + t2461 * t2666, -t2457 * t2661 + t2469 * t2666, -t2444 * t2661 + t2458 * t2666, -t2399 * t2661 + t2417 * t2666, 0, 0, 0, 0, 0, 0, -t2413 * t2661 + t2422 * t2666, -t2419 * t2661 + t2423 * t2666, -t2401 * t2661 + t2416 * t2666, -t2381 * t2661 + t2385 * t2666, 0, 0, 0, 0, 0, 0, -t2387 * t2661 + t2392 * t2666, -t2389 * t2661 + t2395 * t2666, -t2377 * t2661 + t2384 * t2666, -t2372 * t2661 + t2373 * t2666; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2635, t2636, 0, t2638 * t2666 + t2639 * t2661, 0, 0, 0, 0, 0, 0, t2570 * t2666 + t2595 * t2661, t2567 * t2666 + t2590 * t2661, t2564 * t2666 + t2577 * t2661, t2543 * t2666 + t2550 * t2661, 0, 0, 0, 0, 0, 0, t2513 * t2666 + t2521 * t2661, t2516 * t2666 + t2532 * t2661, t2493 * t2666 + t2514 * t2661, t2450 * t2666 + t2453 * t2661, 0, 0, 0, 0, 0, 0, t2455 * t2666 + t2461 * t2661, t2457 * t2666 + t2469 * t2661, t2444 * t2666 + t2458 * t2661, t2399 * t2666 + t2417 * t2661, 0, 0, 0, 0, 0, 0, t2413 * t2666 + t2422 * t2661, t2419 * t2666 + t2423 * t2661, t2401 * t2666 + t2416 * t2661, t2381 * t2666 + t2385 * t2661, 0, 0, 0, 0, 0, 0, t2387 * t2666 + t2392 * t2661, t2389 * t2666 + t2395 * t2661, t2377 * t2666 + t2384 * t2661, t2372 * t2666 + t2373 * t2661; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2569, t2566, t2563, t2542, 0, 0, 0, 0, 0, 0, t2512, t2515, t2492, t2449, 0, 0, 0, 0, 0, 0, t2454, t2456, t2443, t2398, 0, 0, 0, 0, 0, 0, t2412, t2418, t2400, t2380, 0, 0, 0, 0, 0, 0, t2386, t2388, t2376, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2667, -qJDD(1), 0, t2639, 0, 0, 0, 0, 0, 0, t2595, t2590, t2577, t2550, 0, 0, 0, 0, 0, 0, t2521, t2532, t2514, t2453, 0, 0, 0, 0, 0, 0, t2461, t2469, t2458, t2417, 0, 0, 0, 0, 0, 0, t2422, t2423, t2416, t2385, 0, 0, 0, 0, 0, 0, t2392, t2395, t2384, t2373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2667, 0, t2638, 0, 0, 0, 0, 0, 0, t2570, t2567, t2564, t2543, 0, 0, 0, 0, 0, 0, t2513, t2516, t2493, t2450, 0, 0, 0, 0, 0, 0, t2455, t2457, t2444, t2399, 0, 0, 0, 0, 0, 0, t2413, t2419, t2401, t2381, 0, 0, 0, 0, 0, 0, t2387, t2389, t2377, t2372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2569, t2566, t2563, t2542, 0, 0, 0, 0, 0, 0, t2512, t2515, t2492, t2449, 0, 0, 0, 0, 0, 0, t2454, t2456, t2443, t2398, 0, 0, 0, 0, 0, 0, t2412, t2418, t2400, t2380, 0, 0, 0, 0, 0, 0, t2386, t2388, t2376, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2628, t2625, t2604, t2586, 0, 0, 0, 0, 0, 0, t2552, t2561, t2541, t2486, 0, 0, 0, 0, 0, 0, t2495, t2501, t2488, t2435, 0, 0, 0, 0, 0, 0, t2446, t2452, t2433, t2397, 0, 0, 0, 0, 0, 0, t2405, t2411, t2394, t2375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2624, t2614, t2603, t2585, 0, 0, 0, 0, 0, 0, t2551, t2560, t2540, t2485, 0, 0, 0, 0, 0, 0, t2494, t2500, t2487, t2434, 0, 0, 0, 0, 0, 0, t2445, t2451, t2432, t2396, 0, 0, 0, 0, 0, 0, t2404, t2410, t2393, t2374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2605, t2602, t2629, t2606, 0, 0, 0, 0, 0, 0, t2573, t2575, t2580, t2571, 0, 0, 0, 0, 0, 0, t2524, t2530, t2510, t2447, 0, 0, 0, 0, 0, 0, t2470, t2472, t2459, t2406, 0, 0, 0, 0, 0, 0, t2424, t2426, t2408, t2378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2587, t2589, t2574, t2518, 0, 0, 0, 0, 0, 0, t2525, t2531, t2511, t2448, 0, 0, 0, 0, 0, 0, t2471, t2473, t2460, t2407, 0, 0, 0, 0, 0, 0, t2425, t2427, t2409, t2379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2588, t2597, t2576, t2517, 0, 0, 0, 0, 0, 0, -t2536, t2702, -t2556, -t2503, 0, 0, 0, 0, 0, 0, -t2490, -t2496, -t2479, -t2420, 0, 0, 0, 0, 0, 0, -t2436, -t2440, -t2414, -t2382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2573, t2575, t2580, t2571, 0, 0, 0, 0, 0, 0, t2524, t2530, t2510, t2447, 0, 0, 0, 0, 0, 0, t2470, t2472, t2459, t2406, 0, 0, 0, 0, 0, 0, t2424, t2426, t2408, t2378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2562, t2549, t2537, t2484, 0, 0, 0, 0, 0, 0, t2491, t2497, t2480, t2421, 0, 0, 0, 0, 0, 0, t2437, t2441, t2415, t2383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2548, t2568, t2539, t2483, 0, 0, 0, 0, 0, 0, -t2506, -t2508, -t2533, -t2467, 0, 0, 0, 0, 0, 0, -t2462, -t2464, -t2489, -t2442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2536, -t2702, t2556, t2503, 0, 0, 0, 0, 0, 0, t2490, t2496, t2479, t2420, 0, 0, 0, 0, 0, 0, t2436, t2440, t2414, t2382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2535, t2523, t2507, t2439, 0, 0, 0, 0, 0, 0, t2475, t2482, t2431, t2391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2522, t2544, t2509, t2438, 0, 0, 0, 0, 0, 0, t2474, t2481, t2430, t2390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2506, t2508, t2533, t2467, 0, 0, 0, 0, 0, 0, t2462, t2464, t2489, t2442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2505, t2499, t2463, t2403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2498, t2526, t2465, t2402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2462, t2464, t2489, t2442;];
f_new_reg  = t1;
