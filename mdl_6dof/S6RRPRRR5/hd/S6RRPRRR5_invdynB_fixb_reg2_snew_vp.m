% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 21:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 21:27:19
% EndTime: 2019-05-06 21:28:44
% DurationCPUTime: 81.24s
% Computational Cost: add. (775730->1111), mult. (2034070->1813), div. (0->0), fcn. (1649365->14), ass. (0->802)
t1221 = sin(pkin(12));
t1223 = cos(pkin(12));
t1222 = sin(pkin(6));
t1233 = cos(qJ(2));
t1345 = t1222 * t1233;
t1331 = qJD(1) * t1345;
t1228 = sin(qJ(2));
t1346 = t1222 * t1228;
t1332 = qJD(1) * t1346;
t1175 = t1221 * t1332 - t1223 * t1331;
t1177 = t1221 * t1331 + t1223 * t1332;
t1135 = t1177 * t1175;
t1224 = cos(pkin(6));
t1212 = qJDD(1) * t1224 + qJDD(2);
t1396 = -t1135 + t1212;
t1411 = t1221 * t1396;
t1410 = t1223 * t1396;
t1225 = sin(qJ(6));
t1336 = qJDD(1) * t1228;
t1370 = qJD(1) * t1233;
t1184 = (qJD(2) * t1370 + t1336) * t1222;
t1337 = qJDD(1) * t1222;
t1185 = -qJD(2) * t1332 + t1233 * t1337;
t1136 = t1223 * t1184 + t1221 * t1185;
t1213 = qJD(1) * t1224 + qJD(2);
t1227 = sin(qJ(4));
t1232 = cos(qJ(4));
t1152 = t1177 * t1232 + t1213 * t1227;
t1319 = t1152 * qJD(4) + t1227 * t1136 - t1232 * t1212;
t1073 = qJDD(5) + t1319;
t1261 = qJDD(6) + t1073;
t1171 = qJD(4) + t1175;
t1226 = sin(qJ(5));
t1231 = cos(qJ(5));
t1111 = t1152 * t1226 - t1231 * t1171;
t1113 = t1152 * t1231 + t1171 * t1226;
t1230 = cos(qJ(6));
t1043 = t1230 * t1111 + t1113 * t1225;
t1045 = -t1111 * t1225 + t1113 * t1230;
t962 = t1045 * t1043;
t1402 = -t962 + t1261;
t1409 = t1225 * t1402;
t1048 = t1113 * t1111;
t1398 = -t1048 + t1073;
t1408 = t1226 * t1398;
t1150 = t1177 * t1227 - t1232 * t1213;
t1097 = t1152 * t1150;
t1314 = t1184 * t1221 - t1223 * t1185;
t1310 = qJDD(4) + t1314;
t1397 = -t1097 + t1310;
t1407 = t1227 * t1397;
t1406 = t1230 * t1402;
t1405 = t1231 * t1398;
t1404 = t1232 * t1397;
t1358 = t1152 * t1171;
t1403 = t1319 + t1358;
t1146 = qJD(5) + t1150;
t1067 = t1146 * t1111;
t1078 = -t1150 * qJD(4) + t1232 * t1136 + t1227 * t1212;
t994 = -t1111 * qJD(5) + t1231 * t1078 + t1226 * t1310;
t944 = -t1067 - t994;
t945 = -t994 + t1067;
t1218 = t1222 ^ 2;
t1235 = qJD(1) ^ 2;
t1371 = qJD(1) * t1213;
t1401 = t1218 * (-t1224 * t1235 + t1371);
t1193 = t1213 * t1332;
t1158 = t1185 - t1193;
t1400 = t1224 * t1158;
t1141 = qJD(6) + t1146;
t1012 = t1141 * t1043;
t1316 = t1226 * t1078 - t1231 * t1310;
t993 = -qJD(5) * t1113 - t1316;
t1242 = qJD(6) * t1043 - t1225 * t993 - t1230 * t994;
t1399 = -t1012 - t1242;
t1118 = t1171 * t1150;
t1028 = -t1118 + t1078;
t1162 = t1213 * t1175;
t1395 = -t1162 + t1136;
t1194 = t1213 * t1331;
t1155 = t1194 + t1184;
t1229 = sin(qJ(1));
t1234 = cos(qJ(1));
t1207 = g(1) * t1234 + g(2) * t1229;
t1181 = -pkin(1) * t1235 + pkin(8) * t1337 - t1207;
t1206 = t1229 * g(1) - t1234 * g(2);
t1386 = pkin(8) * t1222;
t1240 = qJDD(1) * pkin(1) + t1235 * t1386 + t1206;
t1239 = t1224 * t1240;
t1122 = -g(3) * t1346 + t1233 * t1181 + t1228 * t1239;
t1259 = -pkin(2) * t1213 + qJ(3) * t1332;
t1220 = t1233 ^ 2;
t1348 = t1218 * t1235;
t1323 = t1220 * t1348;
t1064 = -pkin(2) * t1323 + t1185 * qJ(3) + t1213 * t1259 + t1122;
t1315 = -t1228 * t1181 + t1233 * t1239;
t1343 = t1228 * t1235;
t1322 = t1218 * t1343;
t1238 = t1212 * pkin(2) - t1184 * qJ(3) + (pkin(2) * t1322 + (qJ(3) * t1371 - g(3)) * t1222) * t1233 + t1315;
t972 = -0.2e1 * qJD(3) * t1175 + t1223 * t1064 + t1221 * t1238;
t1318 = t1225 * t994 - t1230 * t993;
t835 = (qJD(6) - t1141) * t1045 + t1318;
t940 = (qJD(5) - t1146) * t1113 + t1316;
t1041 = t1043 ^ 2;
t1042 = t1045 ^ 2;
t1394 = t1111 ^ 2;
t1110 = t1113 ^ 2;
t1140 = t1141 ^ 2;
t1144 = t1146 ^ 2;
t1147 = t1150 ^ 2;
t1148 = t1152 ^ 2;
t1393 = t1171 ^ 2;
t1173 = t1175 ^ 2;
t1174 = t1177 ^ 2;
t1392 = t1213 ^ 2;
t1391 = 0.2e1 * qJD(3);
t1390 = pkin(2) * t1222;
t1389 = pkin(2) * t1224;
t1388 = pkin(3) * t1221;
t1387 = pkin(4) * t1227;
t1095 = pkin(4) * t1150 - pkin(10) * t1152;
t1163 = t1224 * g(3) + t1222 * t1240;
t1090 = t1185 * pkin(2) + qJ(3) * t1323 + t1259 * t1332 - qJDD(3) + t1163;
t1355 = t1177 * t1213;
t1098 = t1314 + t1355;
t1237 = t1098 * pkin(3) - pkin(9) * t1395 - t1090;
t1130 = pkin(3) * t1175 - pkin(9) * t1177;
t934 = -pkin(3) * t1392 + pkin(9) * t1212 - t1130 * t1175 + t972;
t878 = t1227 * t1237 + t1232 * t934;
t842 = -pkin(4) * t1393 + pkin(10) * t1310 - t1150 * t1095 + t878;
t1317 = t1221 * t1064 - t1223 * t1238;
t933 = -t1212 * pkin(3) - t1392 * pkin(9) + (t1391 + t1130) * t1177 + t1317;
t866 = pkin(4) * t1403 - t1028 * pkin(10) + t933;
t775 = t1226 * t842 - t1231 * t866;
t731 = pkin(5) * t1398 + pkin(11) * t944 - t775;
t1063 = pkin(5) * t1146 - pkin(11) * t1113;
t776 = t1226 * t866 + t1231 * t842;
t739 = -pkin(5) * t1394 + pkin(11) * t993 - t1063 * t1146 + t776;
t662 = t1225 * t731 + t1230 * t739;
t877 = t1227 * t934 - t1232 * t1237;
t841 = -t1310 * pkin(4) - t1393 * pkin(10) + t1095 * t1152 + t877;
t781 = -t993 * pkin(5) - pkin(11) * t1394 + t1063 * t1113 + t841;
t1385 = t1225 * t781;
t914 = t962 + t1261;
t1384 = t1225 * t914;
t661 = t1225 * t739 - t1230 * t731;
t614 = t1225 * t662 - t1230 * t661;
t1383 = t1226 * t614;
t1382 = t1226 * t841;
t982 = t1048 + t1073;
t1381 = t1226 * t982;
t1380 = t1227 * t933;
t971 = t1177 * t1391 + t1317;
t889 = t1221 * t972 - t1223 * t971;
t1379 = t1228 * t889;
t1378 = t1230 * t781;
t1377 = t1230 * t914;
t1376 = t1231 * t614;
t1375 = t1231 * t841;
t1374 = t1231 * t982;
t1373 = t1232 * t933;
t1372 = t1233 * t889;
t1054 = t1097 + t1310;
t1368 = t1054 * t1227;
t1367 = t1054 * t1232;
t1366 = t1090 * t1221;
t1365 = t1090 * t1223;
t1125 = t1135 + t1212;
t1364 = t1125 * t1221;
t1363 = t1125 * t1223;
t1362 = t1141 * t1225;
t1361 = t1141 * t1230;
t1360 = t1146 * t1226;
t1359 = t1146 * t1231;
t1357 = t1171 * t1227;
t1356 = t1171 * t1232;
t1205 = t1233 * t1322;
t1182 = t1205 + t1212;
t1354 = t1182 * t1228;
t1353 = t1182 * t1233;
t1183 = -t1205 + t1212;
t1352 = t1183 * t1228;
t1351 = t1183 * t1233;
t1350 = t1213 * t1221;
t1349 = t1213 * t1223;
t1347 = t1222 * t1212;
t1344 = t1228 * t1163;
t1342 = t1233 * t1163;
t1219 = t1228 ^ 2;
t1338 = t1219 + t1220;
t1335 = -pkin(3) * t1223 - pkin(2);
t1334 = -pkin(4) * t1232 - pkin(3);
t1333 = t1222 * t1371;
t1330 = t1227 * t962;
t1329 = t1232 * t962;
t1328 = t1227 * t1048;
t1327 = t1232 * t1048;
t1326 = t1221 * t1097;
t1325 = t1223 * t1097;
t1324 = t1219 * t1348;
t1321 = t1222 * t1135;
t1320 = t1224 * t1135;
t890 = t1221 * t971 + t1223 * t972;
t615 = t1225 * t661 + t1230 * t662;
t788 = t1227 * t877 + t1232 * t878;
t1166 = -t1206 * t1229 - t1234 * t1207;
t1204 = qJDD(1) * t1234 - t1229 * t1235;
t1313 = -pkin(7) * t1204 - g(3) * t1229;
t1172 = -t1392 - t1324;
t1127 = -t1172 * t1228 - t1351;
t1312 = pkin(8) * t1127 - t1344;
t1189 = -t1392 - t1323;
t1139 = t1189 * t1233 - t1354;
t1311 = pkin(8) * t1139 + t1342;
t701 = t1226 * t776 - t1231 * t775;
t702 = t1226 * t775 + t1231 * t776;
t787 = t1227 * t878 - t1232 * t877;
t587 = t1231 * t615 - t1383;
t582 = t1227 * t781 + t1232 * t587;
t586 = t1226 * t615 + t1376;
t550 = t1221 * t582 - t1223 * t586;
t551 = t1221 * t586 + t1223 * t582;
t1309 = t1228 * t551 + t1233 * t550;
t839 = -t1012 + t1242;
t762 = -t1225 * t835 + t1230 * t839;
t764 = -t1225 * t839 - t1230 * t835;
t690 = -t1226 * t762 + t1231 * t764;
t902 = -t1041 - t1042;
t673 = t1227 * t902 + t1232 * t690;
t688 = t1226 * t764 + t1231 * t762;
t629 = t1221 * t673 - t1223 * t688;
t630 = t1221 * t688 + t1223 * t673;
t1308 = t1228 * t630 + t1233 * t629;
t671 = t1227 * t841 + t1232 * t702;
t633 = t1221 * t671 - t1223 * t701;
t634 = t1221 * t701 + t1223 * t671;
t1307 = t1228 * t634 + t1233 * t633;
t834 = (qJD(6) + t1141) * t1045 + t1318;
t761 = -t1225 * t834 + t1230 * t1399;
t763 = -t1225 * t1399 - t1230 * t834;
t689 = -t1226 * t761 + t1231 * t763;
t961 = -t1042 + t1041;
t680 = -t1227 * t961 + t1232 * t689;
t687 = -t1226 * t763 - t1231 * t761;
t635 = t1221 * t680 + t1223 * t687;
t636 = -t1221 * t687 + t1223 * t680;
t1306 = t1228 * t636 + t1233 * t635;
t939 = -t1140 - t1041;
t853 = t1225 * t939 + t1406;
t854 = t1230 * t939 - t1409;
t773 = -t1226 * t853 + t1231 * t854;
t714 = t1227 * t834 + t1232 * t773;
t772 = t1226 * t854 + t1231 * t853;
t668 = t1221 * t714 - t1223 * t772;
t669 = t1221 * t772 + t1223 * t714;
t1305 = t1228 * t669 + t1233 * t668;
t874 = -qJD(6) * t1045 - t1318;
t830 = t1043 * t1362 + t1230 * t874;
t831 = t1043 * t1361 - t1225 * t874;
t759 = -t1226 * t830 + t1231 * t831;
t742 = t1232 * t759 - t1330;
t757 = -t1226 * t831 - t1231 * t830;
t675 = t1221 * t742 + t1223 * t757;
t677 = -t1221 * t757 + t1223 * t742;
t1304 = t1228 * t677 + t1233 * t675;
t832 = t1045 * t1361 - t1225 * t1242;
t833 = -t1045 * t1362 - t1230 * t1242;
t760 = -t1226 * t832 + t1231 * t833;
t743 = t1232 * t760 + t1330;
t758 = -t1226 * t833 - t1231 * t832;
t676 = t1221 * t743 + t1223 * t758;
t678 = -t1221 * t758 + t1223 * t743;
t1303 = t1228 * t678 + t1233 * t676;
t987 = -t1042 - t1140;
t871 = t1230 * t987 - t1384;
t872 = -t1225 * t987 - t1377;
t780 = -t1226 * t871 + t1231 * t872;
t727 = t1227 * t1399 + t1232 * t780;
t779 = t1226 * t872 + t1231 * t871;
t682 = t1221 * t727 - t1223 * t779;
t683 = t1221 * t779 + t1223 * t727;
t1302 = t1228 * t683 + t1233 * t682;
t1011 = -t1042 + t1140;
t879 = t1011 * t1230 + t1409;
t881 = -t1011 * t1225 + t1406;
t791 = -t1226 * t879 + t1231 * t881;
t736 = -t1227 * t839 + t1232 * t791;
t789 = -t1226 * t881 - t1231 * t879;
t691 = t1221 * t736 + t1223 * t789;
t693 = -t1221 * t789 + t1223 * t736;
t1301 = t1228 * t693 + t1233 * t691;
t1010 = t1041 - t1140;
t880 = t1010 * t1225 + t1377;
t882 = t1010 * t1230 - t1384;
t792 = -t1226 * t880 + t1231 * t882;
t737 = -t1227 * t835 + t1232 * t792;
t790 = -t1226 * t882 - t1231 * t880;
t692 = t1221 * t737 + t1223 * t790;
t694 = -t1221 * t790 + t1223 * t737;
t1300 = t1228 * t694 + t1233 * t692;
t919 = (-t1043 * t1225 - t1045 * t1230) * t1141;
t920 = (-t1043 * t1230 + t1045 * t1225) * t1141;
t847 = -t1226 * t919 + t1231 * t920;
t819 = t1227 * t1261 + t1232 * t847;
t846 = -t1226 * t920 - t1231 * t919;
t755 = t1221 * t819 + t1223 * t846;
t756 = -t1221 * t846 + t1223 * t819;
t1299 = t1228 * t756 + t1233 * t755;
t1001 = t1110 + t1394;
t870 = -t1226 * t944 - t1231 * t940;
t817 = -t1001 * t1227 + t1232 * t870;
t868 = -t1226 * t940 + t1231 * t944;
t765 = t1221 * t817 - t1223 * t868;
t766 = t1221 * t868 + t1223 * t817;
t1298 = t1228 * t766 + t1233 * t765;
t767 = t1221 * t788 - t1223 * t933;
t768 = t1221 * t933 + t1223 * t788;
t1297 = t1228 * t768 + t1233 * t767;
t1047 = -t1110 + t1394;
t941 = (-qJD(5) - t1146) * t1113 - t1316;
t869 = t1226 * t945 + t1231 * t941;
t827 = -t1047 * t1227 + t1232 * t869;
t867 = -t1226 * t941 + t1231 * t945;
t770 = t1221 * t827 + t1223 * t867;
t771 = -t1221 * t867 + t1223 * t827;
t1296 = t1228 * t771 + t1233 * t770;
t1018 = -t1144 - t1394;
t904 = t1018 * t1231 - t1408;
t845 = -t1227 * t941 + t1232 * t904;
t903 = t1018 * t1226 + t1405;
t785 = t1221 * t845 - t1223 * t903;
t786 = t1221 * t903 + t1223 * t845;
t1295 = t1228 * t786 + t1233 * t785;
t1040 = -t1110 - t1144;
t912 = -t1040 * t1226 - t1374;
t850 = -t1227 * t945 + t1232 * t912;
t911 = t1040 * t1231 - t1381;
t799 = t1221 * t850 - t1223 * t911;
t800 = t1221 * t911 + t1223 * t850;
t1294 = t1228 * t800 + t1233 * t799;
t1066 = -t1110 + t1144;
t930 = -t1066 * t1226 + t1405;
t859 = -t1227 * t944 + t1232 * t930;
t928 = -t1066 * t1231 - t1408;
t804 = t1221 * t859 + t1223 * t928;
t806 = -t1221 * t928 + t1223 * t859;
t1293 = t1228 * t806 + t1233 * t804;
t1065 = -t1144 + t1394;
t931 = t1065 * t1231 - t1381;
t860 = -t1227 * t940 + t1232 * t931;
t929 = -t1065 * t1226 - t1374;
t805 = t1221 * t860 + t1223 * t929;
t807 = -t1221 * t929 + t1223 * t860;
t1292 = t1228 * t807 + t1233 * t805;
t936 = t1111 * t1359 - t1226 * t993;
t898 = t1232 * t936 - t1328;
t935 = -t1111 * t1360 - t1231 * t993;
t821 = t1221 * t898 + t1223 * t935;
t823 = -t1221 * t935 + t1223 * t898;
t1291 = t1228 * t823 + t1233 * t821;
t938 = -t1113 * t1360 + t1231 * t994;
t899 = t1232 * t938 + t1328;
t937 = -t1113 * t1359 - t1226 * t994;
t822 = t1221 * t899 + t1223 * t937;
t824 = -t1221 * t937 + t1223 * t899;
t1290 = t1228 * t824 + t1233 * t822;
t996 = (-t1111 * t1231 + t1113 * t1226) * t1146;
t947 = t1073 * t1227 + t1232 * t996;
t995 = (t1111 * t1226 + t1113 * t1231) * t1146;
t887 = t1221 * t947 + t1223 * t995;
t888 = -t1221 * t995 + t1223 * t947;
t1289 = t1228 * t888 + t1233 * t887;
t1288 = t1228 * t890 + t1372;
t1062 = t1147 + t1148;
t1027 = -t1319 + t1358;
t1029 = -t1118 - t1078;
t951 = t1027 * t1232 - t1029 * t1227;
t900 = t1062 * t1223 + t1221 * t951;
t901 = -t1062 * t1221 + t1223 * t951;
t1287 = t1228 * t901 + t1233 * t900;
t1096 = -t1148 + t1147;
t950 = -t1028 * t1227 - t1232 * t1403;
t905 = t1096 * t1223 + t1221 * t950;
t906 = -t1096 * t1221 + t1223 * t950;
t1286 = t1228 * t906 + t1233 * t905;
t1072 = -t1393 - t1147;
t985 = t1072 * t1232 - t1407;
t909 = t1221 * t985 - t1223 * t1403;
t910 = t1221 * t1403 + t1223 * t985;
t1285 = t1228 * t910 + t1233 * t909;
t1085 = -t1148 - t1393;
t998 = -t1085 * t1227 - t1367;
t916 = -t1028 * t1223 + t1221 * t998;
t917 = t1028 * t1221 + t1223 * t998;
t1284 = t1228 * t917 + t1233 * t916;
t1117 = -t1148 + t1393;
t1007 = -t1117 * t1227 + t1404;
t923 = t1007 * t1221 + t1029 * t1223;
t925 = t1007 * t1223 - t1029 * t1221;
t1283 = t1228 * t925 + t1233 * t923;
t1116 = t1147 - t1393;
t1008 = t1116 * t1232 - t1368;
t924 = t1008 * t1221 - t1027 * t1223;
t926 = t1008 * t1223 + t1027 * t1221;
t1282 = t1228 * t926 + t1233 * t924;
t1022 = t1150 * t1356 + t1227 * t1319;
t973 = t1022 * t1221 + t1325;
t975 = t1022 * t1223 - t1326;
t1281 = t1228 * t975 + t1233 * t973;
t1024 = t1078 * t1232 - t1152 * t1357;
t974 = t1024 * t1221 - t1325;
t976 = t1024 * t1223 + t1326;
t1280 = t1228 * t976 + t1233 * t974;
t1052 = (-t1150 * t1232 + t1152 * t1227) * t1171;
t1014 = t1221 * t1052 - t1223 * t1310;
t1015 = t1223 * t1052 + t1221 * t1310;
t1278 = t1014 * t1233 + t1015 * t1228;
t1032 = -t1098 * t1221 + t1223 * t1395;
t1034 = -t1098 * t1223 - t1221 * t1395;
t1277 = t1032 * t1233 + t1034 * t1228;
t1103 = t1162 + t1136;
t1260 = -t1314 + t1355;
t1033 = -t1103 * t1223 + t1221 * t1260;
t1035 = t1103 * t1221 + t1223 * t1260;
t1276 = t1033 * t1233 + t1035 * t1228;
t1123 = -t1392 - t1173;
t1057 = t1123 * t1221 + t1410;
t1058 = t1123 * t1223 - t1411;
t1275 = t1057 * t1233 + t1058 * t1228;
t1145 = -t1174 - t1392;
t1070 = t1145 * t1223 - t1364;
t1071 = -t1145 * t1221 - t1363;
t1274 = t1070 * t1233 + t1071 * t1228;
t1160 = -t1174 + t1392;
t1079 = t1160 * t1223 + t1411;
t1081 = -t1160 * t1221 + t1410;
t1273 = t1079 * t1233 + t1081 * t1228;
t1159 = t1173 - t1392;
t1080 = t1159 * t1221 + t1363;
t1082 = t1159 * t1223 - t1364;
t1272 = t1080 * t1233 + t1082 * t1228;
t1091 = t1175 * t1350 - t1223 * t1314;
t1092 = t1175 * t1349 + t1221 * t1314;
t1271 = t1091 * t1233 + t1092 * t1228;
t1093 = t1136 * t1221 + t1177 * t1349;
t1094 = t1136 * t1223 - t1177 * t1350;
t1270 = t1093 * t1233 + t1094 * t1228;
t1114 = (-t1175 * t1221 - t1177 * t1223) * t1213;
t1115 = (-t1175 * t1223 + t1177 * t1221) * t1213;
t1269 = t1114 * t1233 + t1115 * t1228;
t1121 = g(3) * t1345 - t1315;
t1268 = -t1233 * t1121 + t1228 * t1122;
t1056 = t1121 * t1228 + t1122 * t1233;
t1267 = t1155 * t1233 + t1158 * t1228;
t1156 = -t1194 + t1184;
t1157 = t1185 + t1193;
t1266 = -t1156 * t1233 + t1157 * t1228;
t1265 = t1172 * t1233 - t1352;
t1187 = t1392 - t1324;
t1264 = t1187 * t1233 + t1354;
t1263 = t1189 * t1228 + t1353;
t1188 = -t1392 + t1323;
t1262 = t1188 * t1228 + t1351;
t1165 = t1206 * t1234 - t1207 * t1229;
t604 = -pkin(5) * t781 + pkin(11) * t615;
t552 = -pkin(10) * t586 - pkin(11) * t1376 - t1226 * t604;
t567 = -pkin(4) * t586 - pkin(5) * t614;
t581 = t1227 * t587 - t1232 * t781;
t542 = -pkin(9) * t581 - t1227 * t567 + t1232 * t552;
t547 = -pkin(3) * t581 + pkin(4) * t781 - pkin(10) * t587 + pkin(11) * t1383 - t1231 * t604;
t529 = -pkin(2) * t581 + qJ(3) * t551 + t1221 * t542 + t1223 * t547;
t531 = -qJ(3) * t550 - t1221 * t547 + t1223 * t542;
t545 = -t1228 * t550 + t1233 * t551;
t1258 = pkin(8) * t545 + t1228 * t531 + t1233 * t529;
t597 = -pkin(5) * t902 + pkin(11) * t764 + t615;
t601 = -pkin(11) * t762 - t614;
t569 = -pkin(10) * t688 - t1226 * t597 + t1231 * t601;
t653 = -pkin(4) * t688 - pkin(5) * t762;
t672 = t1227 * t690 - t1232 * t902;
t554 = -pkin(9) * t672 - t1227 * t653 + t1232 * t569;
t563 = -pkin(3) * t672 + pkin(4) * t902 - pkin(10) * t690 - t1226 * t601 - t1231 * t597;
t544 = -pkin(2) * t672 + qJ(3) * t630 + t1221 * t554 + t1223 * t563;
t546 = -qJ(3) * t629 - t1221 * t563 + t1223 * t554;
t592 = -t1228 * t629 + t1233 * t630;
t1257 = pkin(8) * t592 + t1228 * t546 + t1233 * t544;
t705 = -pkin(5) * t834 + pkin(11) * t854 - t1378;
t732 = -pkin(11) * t853 + t1385;
t639 = -pkin(10) * t772 - t1226 * t705 + t1231 * t732;
t640 = -pkin(4) * t772 - pkin(5) * t853 + t661;
t713 = t1227 * t773 - t1232 * t834;
t590 = -pkin(9) * t713 - t1227 * t640 + t1232 * t639;
t602 = -pkin(3) * t713 + pkin(4) * t834 - pkin(10) * t773 - t1226 * t732 - t1231 * t705;
t559 = -pkin(2) * t713 + qJ(3) * t669 + t1221 * t590 + t1223 * t602;
t561 = -qJ(3) * t668 - t1221 * t602 + t1223 * t590;
t616 = -t1228 * t668 + t1233 * t669;
t1256 = pkin(8) * t616 + t1228 * t561 + t1233 * t559;
t642 = -pkin(4) * t779 - pkin(5) * t871 + t662;
t706 = -pkin(5) * t1399 + pkin(11) * t872 + t1385;
t744 = -pkin(11) * t871 + t1378;
t643 = -pkin(10) * t779 - t1226 * t706 + t1231 * t744;
t726 = t1227 * t780 - t1232 * t1399;
t591 = -pkin(9) * t726 - t1227 * t642 + t1232 * t643;
t609 = -pkin(3) * t726 + pkin(4) * t1399 - pkin(10) * t780 - t1226 * t744 - t1231 * t706;
t560 = -pkin(2) * t726 + qJ(3) * t683 + t1221 * t591 + t1223 * t609;
t565 = -qJ(3) * t682 - t1221 * t609 + t1223 * t591;
t632 = -t1228 * t682 + t1233 * t683;
t1255 = pkin(8) * t632 + t1228 * t565 + t1233 * t560;
t670 = t1227 * t702 - t1232 * t841;
t600 = -pkin(9) * t670 + (-pkin(10) * t1232 + t1387) * t701;
t618 = -pkin(3) * t670 + pkin(4) * t841 - pkin(10) * t702;
t562 = -pkin(2) * t670 + qJ(3) * t634 + t1221 * t600 + t1223 * t618;
t568 = -qJ(3) * t633 - t1221 * t618 + t1223 * t600;
t593 = -t1228 * t633 + t1233 * t634;
t1254 = pkin(8) * t593 + t1228 * t568 + t1233 * t562;
t674 = -pkin(10) * t868 - t701;
t816 = t1001 * t1232 + t1227 * t870;
t651 = -pkin(9) * t816 + t1232 * t674 + t1387 * t868;
t654 = -pkin(3) * t816 - pkin(4) * t1001 - pkin(10) * t870 - t702;
t595 = -pkin(2) * t816 + qJ(3) * t766 + t1221 * t651 + t1223 * t654;
t596 = -qJ(3) * t765 - t1221 * t654 + t1223 * t651;
t695 = -t1228 * t765 + t1233 * t766;
t1253 = pkin(8) * t695 + t1228 * t596 + t1233 * t595;
t745 = -pkin(4) * t903 + t775;
t784 = -pkin(10) * t903 + t1382;
t844 = t1227 * t904 + t1232 * t941;
t664 = -pkin(9) * t844 - t1227 * t745 + t1232 * t784;
t711 = -pkin(3) * t844 - pkin(4) * t941 - pkin(10) * t904 + t1375;
t612 = -pkin(2) * t844 + qJ(3) * t786 + t1221 * t664 + t1223 * t711;
t622 = -qJ(3) * t785 - t1221 * t711 + t1223 * t664;
t708 = -t1228 * t785 + t1233 * t786;
t1252 = pkin(8) * t708 + t1228 * t622 + t1233 * t612;
t746 = -pkin(4) * t911 + t776;
t793 = -pkin(10) * t911 + t1375;
t849 = t1227 * t912 + t1232 * t945;
t667 = -pkin(9) * t849 - t1227 * t746 + t1232 * t793;
t716 = -pkin(3) * t849 - pkin(4) * t945 - pkin(10) * t912 - t1382;
t613 = -pkin(2) * t849 + qJ(3) * t800 + t1221 * t667 + t1223 * t716;
t623 = -qJ(3) * t799 - t1221 * t716 + t1223 * t667;
t712 = -t1228 * t799 + t1233 * t800;
t1251 = pkin(8) * t712 + t1228 * t623 + t1233 * t613;
t652 = qJ(3) * t768 + (-pkin(9) * t1221 + t1335) * t787;
t663 = -qJ(3) * t767 + (-pkin(9) * t1223 + t1388) * t787;
t696 = -t1228 * t767 + t1233 * t768;
t1250 = pkin(8) * t696 + t1228 * t663 + t1233 * t652;
t949 = t1027 * t1227 + t1029 * t1232;
t769 = -pkin(9) * t949 - t787;
t707 = qJ(3) * t901 + t1221 * t769 + t1335 * t949;
t710 = -qJ(3) * t900 + t1223 * t769 + t1388 * t949;
t815 = -t1228 * t900 + t1233 * t901;
t1249 = pkin(8) * t815 + t1228 * t710 + t1233 * t707;
t984 = t1072 * t1227 + t1404;
t825 = -pkin(3) * t984 + t877;
t883 = -pkin(9) * t984 + t1380;
t728 = -pkin(2) * t984 + qJ(3) * t910 + t1221 * t883 + t1223 * t825;
t749 = -qJ(3) * t909 - t1221 * t825 + t1223 * t883;
t829 = -t1228 * t909 + t1233 * t910;
t1248 = pkin(8) * t829 + t1228 * t749 + t1233 * t728;
t997 = t1085 * t1232 - t1368;
t828 = -pkin(3) * t997 + t878;
t886 = -pkin(9) * t997 + t1373;
t733 = -pkin(2) * t997 + qJ(3) * t917 + t1221 * t886 + t1223 * t828;
t752 = -qJ(3) * t916 - t1221 * t828 + t1223 * t886;
t843 = -t1228 * t916 + t1233 * t917;
t1247 = pkin(8) * t843 + t1228 * t752 + t1233 * t733;
t1109 = -t1173 - t1174;
t848 = -pkin(2) * t1109 + qJ(3) * t1035 + t890;
t863 = -qJ(3) * t1033 - t889;
t956 = -t1033 * t1228 + t1035 * t1233;
t1246 = pkin(8) * t956 + t1228 * t863 + t1233 * t848;
t1002 = -qJ(3) * t1057 - t1366;
t963 = -pkin(2) * t1098 + qJ(3) * t1058 + t1365;
t980 = -t1057 * t1228 + t1058 * t1233;
t1245 = pkin(8) * t980 + t1002 * t1228 + t1233 * t963;
t1000 = -t1070 * t1228 + t1071 * t1233;
t1009 = -qJ(3) * t1070 - t1365;
t969 = -pkin(2) * t1395 + qJ(3) * t1071 - t1366;
t1244 = pkin(8) * t1000 + t1009 * t1228 + t1233 * t969;
t1104 = t1156 * t1228 + t1157 * t1233;
t1243 = pkin(8) * t1104 + t1056;
t808 = t1233 * t890 - t1379;
t873 = pkin(2) * t1090 + qJ(3) * t890;
t1241 = pkin(8) * t808 - qJ(3) * t1379 + t1233 * t873;
t1217 = t1222 * t1218;
t1203 = qJDD(1) * t1229 + t1234 * t1235;
t1196 = t1224 * t1212;
t1191 = t1338 * t1348;
t1190 = (t1219 - t1220) * t1348;
t1186 = -pkin(7) * t1203 + g(3) * t1234;
t1161 = t1338 * t1333;
t1154 = (t1336 + (qJD(2) + t1213) * t1370) * t1222;
t1153 = t1184 * t1233 - t1219 * t1333;
t1149 = -t1185 * t1228 - t1220 * t1333;
t1138 = t1188 * t1233 - t1352;
t1137 = -t1187 * t1228 + t1353;
t1134 = t1174 - t1173;
t1120 = (t1217 * t1233 * t1235 + t1155 * t1224) * t1228;
t1119 = (-t1217 * t1343 + t1400) * t1233;
t1105 = -t1155 * t1228 + t1158 * t1233;
t1089 = t1222 * t1158 + t1224 * t1263;
t1088 = -t1222 * t1157 + t1224 * t1262;
t1087 = -t1222 * t1156 + t1224 * t1264;
t1086 = t1222 * t1263 - t1400;
t1084 = -t1222 * t1154 + t1224 * t1265;
t1083 = t1224 * t1154 + t1222 * t1265;
t1076 = -t1222 * t1190 + t1224 * t1267;
t1075 = t1222 * t1191 + t1224 * t1266;
t1074 = -t1224 * t1191 + t1222 * t1266;
t1051 = (-t1150 * t1227 - t1152 * t1232) * t1171;
t1050 = -t1089 * t1229 + t1139 * t1234;
t1049 = t1089 * t1234 + t1139 * t1229;
t1046 = -t1114 * t1228 + t1115 * t1233;
t1039 = -t1084 * t1229 + t1127 * t1234;
t1038 = t1084 * t1234 + t1127 * t1229;
t1037 = t1222 * t1163 + t1224 * t1268;
t1036 = -t1224 * t1163 + t1222 * t1268;
t1031 = t1224 * t1269 - t1347;
t1023 = t1078 * t1227 + t1152 * t1356;
t1021 = t1150 * t1357 - t1232 * t1319;
t1020 = -t1093 * t1228 + t1094 * t1233;
t1019 = -t1091 * t1228 + t1092 * t1233;
t1017 = -t1075 * t1229 + t1104 * t1234;
t1016 = t1075 * t1234 + t1104 * t1229;
t1006 = t1116 * t1227 + t1367;
t1005 = t1117 * t1232 + t1407;
t1004 = -t1080 * t1228 + t1082 * t1233;
t1003 = -t1079 * t1228 + t1081 * t1233;
t999 = -t1344 + (-t1086 * t1222 - t1089 * t1224) * pkin(8);
t991 = -t1342 + (-t1083 * t1222 - t1084 * t1224) * pkin(8);
t989 = t1224 * t1270 - t1321;
t988 = t1224 * t1271 + t1321;
t986 = -pkin(1) * t1086 + t1222 * t1121 + t1224 * t1311;
t979 = -pkin(1) * t1083 + t1222 * t1122 + t1224 * t1312;
t968 = -t1222 * t1260 + t1224 * t1272;
t967 = -t1222 * t1103 + t1224 * t1273;
t966 = pkin(8) * t1056 * t1224 - pkin(1) * t1036;
t965 = -t1037 * t1229 + t1056 * t1234;
t964 = t1037 * t1234 + t1056 * t1229;
t960 = -t1222 * t1395 + t1224 * t1274;
t959 = t1222 * t1274 + t1224 * t1395;
t958 = -pkin(1) * t1074 + t1224 * t1243;
t957 = (-t1036 * t1222 - t1037 * t1224) * pkin(8);
t955 = -t1032 * t1228 + t1034 * t1233;
t954 = -t1222 * t1098 + t1224 * t1275;
t953 = t1224 * t1098 + t1222 * t1275;
t952 = (-t1074 * t1222 - t1075 * t1224) * pkin(8) - t1268;
t948 = t1028 * t1232 - t1227 * t1403;
t946 = -t1073 * t1232 + t1227 * t996;
t927 = pkin(2) * t1070 - t972;
t922 = pkin(2) * t1057 - t971;
t921 = -t1014 * t1228 + t1015 * t1233;
t918 = -t1222 * t1134 + t1224 * t1277;
t908 = -t1222 * t1109 + t1224 * t1276;
t907 = t1224 * t1109 + t1222 * t1276;
t897 = t1227 * t938 - t1327;
t896 = t1227 * t936 + t1327;
t895 = -t1228 * t974 + t1233 * t976;
t894 = -t1228 * t973 + t1233 * t975;
t893 = t1000 * t1234 - t1229 * t960;
t892 = t1000 * t1229 + t1234 * t960;
t891 = -t1222 * t1051 + t1224 * t1278;
t885 = -t1229 * t954 + t1234 * t980;
t884 = t1229 * t980 + t1234 * t954;
t862 = -t1222 * t1023 + t1224 * t1280;
t861 = -t1222 * t1021 + t1224 * t1281;
t858 = t1227 * t931 + t1232 * t940;
t857 = t1227 * t930 + t1232 * t944;
t856 = -t1228 * t924 + t1233 * t926;
t855 = -t1228 * t923 + t1233 * t925;
t852 = -t1229 * t908 + t1234 * t956;
t851 = t1229 * t956 + t1234 * t908;
t826 = t1047 * t1232 + t1227 * t869;
t820 = -t1228 * t905 + t1233 * t906;
t818 = t1227 * t847 - t1232 * t1261;
t814 = -t1222 * t1006 + t1224 * t1282;
t813 = -t1222 * t1005 + t1224 * t1283;
t812 = -t1222 * t997 + t1224 * t1284;
t811 = t1222 * t1284 + t1224 * t997;
t810 = -t1222 * t984 + t1224 * t1285;
t809 = t1222 * t1285 + t1224 * t984;
t803 = t1233 * t1009 - t1228 * t969 + (-t1222 * t959 - t1224 * t960) * pkin(8);
t802 = pkin(2) * t916 - pkin(3) * t1028 + pkin(9) * t998 + t1380;
t801 = -t1228 * t887 + t1233 * t888;
t798 = t1222 * t1090 + t1224 * t1288;
t797 = -t1224 * t1090 + t1222 * t1288;
t796 = pkin(2) * t909 - pkin(3) * t1403 + pkin(9) * t985 - t1373;
t795 = t1233 * t1002 - t1228 * t963 + (-t1222 * t953 - t1224 * t954) * pkin(8);
t794 = -t1222 * t948 + t1224 * t1286;
t783 = -t1222 * t949 + t1224 * t1287;
t782 = t1222 * t1287 + t1224 * t949;
t778 = -pkin(1) * t959 - t1222 * t927 + t1224 * t1244;
t777 = -pkin(1) * t953 - t1222 * t922 + t1224 * t1245;
t774 = -t1222 * t946 + t1224 * t1289;
t754 = -t1228 * t822 + t1233 * t824;
t753 = -t1228 * t821 + t1233 * t823;
t751 = -t1229 * t812 + t1234 * t843;
t750 = t1229 * t843 + t1234 * t812;
t748 = -t1229 * t810 + t1234 * t829;
t747 = t1229 * t829 + t1234 * t810;
t741 = t1227 * t760 - t1329;
t740 = t1227 * t759 + t1329;
t735 = t1227 * t792 + t1232 * t835;
t734 = t1227 * t791 + t1232 * t839;
t725 = pkin(2) * t900 + pkin(3) * t1062 + pkin(9) * t951 + t788;
t724 = -t1228 * t805 + t1233 * t807;
t723 = -t1228 * t804 + t1233 * t806;
t722 = -t1222 * t897 + t1224 * t1290;
t721 = -t1222 * t896 + t1224 * t1291;
t720 = -t1229 * t783 + t1234 * t815;
t719 = t1229 * t815 + t1234 * t783;
t718 = -t1229 * t798 + t1234 * t808;
t717 = t1229 * t808 + t1234 * t798;
t715 = -t1228 * t848 + t1233 * t863 + (-t1222 * t907 - t1224 * t908) * pkin(8);
t709 = -pkin(1) * t907 - t1033 * t1390 + t1224 * t1246;
t704 = -t1222 * t858 + t1224 * t1292;
t703 = -t1222 * t857 + t1224 * t1293;
t700 = -t1228 * t770 + t1233 * t771;
t699 = -t1222 * t849 + t1224 * t1294;
t698 = t1222 * t1294 + t1224 * t849;
t697 = pkin(2) * t767 - pkin(3) * t933 + pkin(9) * t788;
t686 = -t1222 * t844 + t1224 * t1295;
t685 = t1222 * t1295 + t1224 * t844;
t684 = -t1228 * t755 + t1233 * t756;
t681 = -qJ(3) * t1372 - t1228 * t873 + (-t1222 * t797 - t1224 * t798) * pkin(8);
t679 = t1227 * t689 + t1232 * t961;
t666 = -t1222 * t826 + t1224 * t1296;
t665 = -pkin(1) * t797 + t1224 * t1241 - t1390 * t889;
t659 = -t1222 * t816 + t1224 * t1298;
t658 = t1222 * t1298 + t1224 * t816;
t657 = -t1222 * t818 + t1224 * t1299;
t656 = -t1222 * t787 + t1224 * t1297;
t655 = t1222 * t1297 + t1224 * t787;
t650 = -t1229 * t699 + t1234 * t712;
t649 = t1229 * t712 + t1234 * t699;
t648 = pkin(2) * t799 - pkin(3) * t911 + pkin(9) * t850 + t1227 * t793 + t1232 * t746;
t647 = pkin(2) * t785 - pkin(3) * t903 + pkin(9) * t845 + t1227 * t784 + t1232 * t745;
t646 = -t1229 * t686 + t1234 * t708;
t645 = t1229 * t708 + t1234 * t686;
t644 = -t1228 * t733 + t1233 * t752 + (-t1222 * t811 - t1224 * t812) * pkin(8);
t641 = -t1228 * t728 + t1233 * t749 + (-t1222 * t809 - t1224 * t810) * pkin(8);
t638 = -t1228 * t692 + t1233 * t694;
t637 = -t1228 * t691 + t1233 * t693;
t631 = -pkin(1) * t811 - t1222 * t802 + t1224 * t1247;
t628 = -pkin(1) * t809 - t1222 * t796 + t1224 * t1248;
t627 = -t1228 * t676 + t1233 * t678;
t626 = -t1228 * t675 + t1233 * t677;
t625 = -t1229 * t659 + t1234 * t695;
t624 = t1229 * t695 + t1234 * t659;
t621 = pkin(2) * t765 + pkin(9) * t817 + t1227 * t674 + t1334 * t868;
t620 = -t1229 * t656 + t1234 * t696;
t619 = t1229 * t696 + t1234 * t656;
t617 = -t1228 * t707 + t1233 * t710 + (-t1222 * t782 - t1224 * t783) * pkin(8);
t611 = -t1222 * t735 + t1224 * t1300;
t610 = -t1222 * t734 + t1224 * t1301;
t608 = -t1222 * t726 + t1224 * t1302;
t607 = t1222 * t1302 + t1224 * t726;
t606 = -t1222 * t741 + t1224 * t1303;
t605 = -t1222 * t740 + t1224 * t1304;
t603 = -pkin(1) * t782 - t1222 * t725 + t1224 * t1249;
t599 = -t1222 * t713 + t1224 * t1305;
t598 = t1222 * t1305 + t1224 * t713;
t594 = -t1228 * t635 + t1233 * t636;
t589 = -t1229 * t608 + t1234 * t632;
t588 = t1229 * t632 + t1234 * t608;
t585 = -t1222 * t679 + t1224 * t1306;
t584 = -t1222 * t670 + t1224 * t1307;
t583 = t1222 * t1307 + t1224 * t670;
t580 = -t1222 * t672 + t1224 * t1308;
t579 = t1222 * t1308 + t1224 * t672;
t578 = -t1229 * t599 + t1234 * t616;
t577 = t1229 * t616 + t1234 * t599;
t576 = -t1228 * t652 + t1233 * t663 + (-t1222 * t655 - t1224 * t656) * pkin(8);
t575 = pkin(2) * t682 - pkin(3) * t779 + pkin(9) * t727 + t1227 * t643 + t1232 * t642;
t574 = pkin(2) * t633 + pkin(9) * t671 + (-pkin(10) * t1227 + t1334) * t701;
t573 = -pkin(1) * t655 - t1222 * t697 + t1224 * t1250;
t572 = pkin(2) * t668 - pkin(3) * t772 + pkin(9) * t714 + t1227 * t639 + t1232 * t640;
t571 = -t1228 * t613 + t1233 * t623 + (-t1222 * t698 - t1224 * t699) * pkin(8);
t570 = -t1228 * t612 + t1233 * t622 + (-t1222 * t685 - t1224 * t686) * pkin(8);
t566 = -pkin(1) * t698 - t1222 * t648 + t1224 * t1251;
t564 = -pkin(1) * t685 - t1222 * t647 + t1224 * t1252;
t558 = -t1229 * t584 + t1234 * t593;
t557 = t1229 * t593 + t1234 * t584;
t556 = -t1229 * t580 + t1234 * t592;
t555 = t1229 * t592 + t1234 * t580;
t553 = -t1228 * t595 + t1233 * t596 + (-t1222 * t658 - t1224 * t659) * pkin(8);
t549 = -pkin(1) * t658 - t1222 * t621 + t1224 * t1253;
t548 = pkin(2) * t629 - pkin(3) * t688 + pkin(9) * t673 + t1227 * t569 + t1232 * t653;
t543 = -t1228 * t560 + t1233 * t565 + (-t1222 * t607 - t1224 * t608) * pkin(8);
t541 = -t1228 * t559 + t1233 * t561 + (-t1222 * t598 - t1224 * t599) * pkin(8);
t540 = -t1222 * t581 + t1224 * t1309;
t539 = t1222 * t1309 + t1224 * t581;
t538 = -t1228 * t562 + t1233 * t568 + (-t1222 * t583 - t1224 * t584) * pkin(8);
t537 = -pkin(1) * t607 - t1222 * t575 + t1224 * t1255;
t536 = -pkin(1) * t598 - t1222 * t572 + t1224 * t1256;
t535 = -pkin(1) * t583 - t1222 * t574 + t1224 * t1254;
t534 = pkin(2) * t550 - pkin(3) * t586 + pkin(9) * t582 + t1227 * t552 + t1232 * t567;
t533 = -t1229 * t540 + t1234 * t545;
t532 = t1229 * t545 + t1234 * t540;
t530 = -t1228 * t544 + t1233 * t546 + (-t1222 * t579 - t1224 * t580) * pkin(8);
t528 = -pkin(1) * t579 - t1222 * t548 + t1224 * t1257;
t527 = -t1228 * t529 + t1233 * t531 + (-t1222 * t539 - t1224 * t540) * pkin(8);
t526 = -pkin(1) * t539 - t1222 * t534 + t1224 * t1258;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1203, -t1204, 0, t1166, 0, 0, 0, 0, 0, 0, t1050, t1039, t1017, t965, 0, 0, 0, 0, 0, 0, t885, t893, t852, t718, 0, 0, 0, 0, 0, 0, t748, t751, t720, t620, 0, 0, 0, 0, 0, 0, t646, t650, t625, t558, 0, 0, 0, 0, 0, 0, t578, t589, t556, t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1204, -t1203, 0, t1165, 0, 0, 0, 0, 0, 0, t1049, t1038, t1016, t964, 0, 0, 0, 0, 0, 0, t884, t892, t851, t717, 0, 0, 0, 0, 0, 0, t747, t750, t719, t619, 0, 0, 0, 0, 0, 0, t645, t649, t624, t557, 0, 0, 0, 0, 0, 0, t577, t588, t555, t532; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1086, t1083, t1074, t1036, 0, 0, 0, 0, 0, 0, t953, t959, t907, t797, 0, 0, 0, 0, 0, 0, t809, t811, t782, t655, 0, 0, 0, 0, 0, 0, t685, t698, t658, t583, 0, 0, 0, 0, 0, 0, t598, t607, t579, t539; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1204, 0, -t1203, 0, t1313, -t1186, -t1165, -pkin(7) * t1165, -t1120 * t1229 + t1153 * t1234, -t1076 * t1229 + t1105 * t1234, -t1087 * t1229 + t1137 * t1234, -t1119 * t1229 + t1149 * t1234, -t1088 * t1229 + t1138 * t1234, t1161 * t1234 + t1229 * t1347, -pkin(7) * t1049 - t1229 * t986 + t1234 * t999, -pkin(7) * t1038 - t1229 * t979 + t1234 * t991, -pkin(7) * t1016 - t1229 * t958 + t1234 * t952, -pkin(7) * t964 - t1229 * t966 + t1234 * t957, t1020 * t1234 - t1229 * t989, -t1229 * t918 + t1234 * t955, t1003 * t1234 - t1229 * t967, t1019 * t1234 - t1229 * t988, t1004 * t1234 - t1229 * t968, -t1031 * t1229 + t1046 * t1234, -pkin(7) * t884 - t1229 * t777 + t1234 * t795, -pkin(7) * t892 - t1229 * t778 + t1234 * t803, -pkin(7) * t851 - t1229 * t709 + t1234 * t715, -pkin(7) * t717 - t1229 * t665 + t1234 * t681, -t1229 * t862 + t1234 * t895, -t1229 * t794 + t1234 * t820, -t1229 * t813 + t1234 * t855, -t1229 * t861 + t1234 * t894, -t1229 * t814 + t1234 * t856, -t1229 * t891 + t1234 * t921, -pkin(7) * t747 - t1229 * t628 + t1234 * t641, -pkin(7) * t750 - t1229 * t631 + t1234 * t644, -pkin(7) * t719 - t1229 * t603 + t1234 * t617, -pkin(7) * t619 - t1229 * t573 + t1234 * t576, -t1229 * t722 + t1234 * t754, -t1229 * t666 + t1234 * t700, -t1229 * t703 + t1234 * t723, -t1229 * t721 + t1234 * t753, -t1229 * t704 + t1234 * t724, -t1229 * t774 + t1234 * t801, -pkin(7) * t645 - t1229 * t564 + t1234 * t570, -pkin(7) * t649 - t1229 * t566 + t1234 * t571, -pkin(7) * t624 - t1229 * t549 + t1234 * t553, -pkin(7) * t557 - t1229 * t535 + t1234 * t538, -t1229 * t606 + t1234 * t627, -t1229 * t585 + t1234 * t594, -t1229 * t610 + t1234 * t637, -t1229 * t605 + t1234 * t626, -t1229 * t611 + t1234 * t638, -t1229 * t657 + t1234 * t684, -pkin(7) * t577 - t1229 * t536 + t1234 * t541, -pkin(7) * t588 - t1229 * t537 + t1234 * t543, -pkin(7) * t555 - t1229 * t528 + t1234 * t530, -pkin(7) * t532 - t1229 * t526 + t1234 * t527; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1203, 0, t1204, 0, t1186, t1313, t1166, pkin(7) * t1166, t1120 * t1234 + t1153 * t1229, t1076 * t1234 + t1105 * t1229, t1087 * t1234 + t1137 * t1229, t1119 * t1234 + t1149 * t1229, t1088 * t1234 + t1138 * t1229, t1161 * t1229 - t1234 * t1347, pkin(7) * t1050 + t1229 * t999 + t1234 * t986, pkin(7) * t1039 + t1229 * t991 + t1234 * t979, pkin(7) * t1017 + t1229 * t952 + t1234 * t958, pkin(7) * t965 + t1229 * t957 + t1234 * t966, t1020 * t1229 + t1234 * t989, t1229 * t955 + t1234 * t918, t1003 * t1229 + t1234 * t967, t1019 * t1229 + t1234 * t988, t1004 * t1229 + t1234 * t968, t1031 * t1234 + t1046 * t1229, pkin(7) * t885 + t1229 * t795 + t1234 * t777, pkin(7) * t893 + t1229 * t803 + t1234 * t778, pkin(7) * t852 + t1229 * t715 + t1234 * t709, pkin(7) * t718 + t1229 * t681 + t1234 * t665, t1229 * t895 + t1234 * t862, t1229 * t820 + t1234 * t794, t1229 * t855 + t1234 * t813, t1229 * t894 + t1234 * t861, t1229 * t856 + t1234 * t814, t1229 * t921 + t1234 * t891, pkin(7) * t748 + t1229 * t641 + t1234 * t628, pkin(7) * t751 + t1229 * t644 + t1234 * t631, pkin(7) * t720 + t1229 * t617 + t1234 * t603, pkin(7) * t620 + t1229 * t576 + t1234 * t573, t1229 * t754 + t1234 * t722, t1229 * t700 + t1234 * t666, t1229 * t723 + t1234 * t703, t1229 * t753 + t1234 * t721, t1229 * t724 + t1234 * t704, t1229 * t801 + t1234 * t774, pkin(7) * t646 + t1229 * t570 + t1234 * t564, pkin(7) * t650 + t1229 * t571 + t1234 * t566, pkin(7) * t625 + t1229 * t553 + t1234 * t549, pkin(7) * t558 + t1229 * t538 + t1234 * t535, t1229 * t627 + t1234 * t606, t1229 * t594 + t1234 * t585, t1229 * t637 + t1234 * t610, t1229 * t626 + t1234 * t605, t1229 * t638 + t1234 * t611, t1229 * t684 + t1234 * t657, pkin(7) * t578 + t1229 * t541 + t1234 * t536, pkin(7) * t589 + t1229 * t543 + t1234 * t537, pkin(7) * t556 + t1229 * t530 + t1234 * t528, pkin(7) * t533 + t1229 * t527 + t1234 * t526; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1206, t1207, 0, 0, (t1184 * t1222 + t1233 * t1401) * t1228, t1224 * t1190 + t1222 * t1267, t1224 * t1156 + t1222 * t1264, (t1185 * t1222 - t1228 * t1401) * t1233, t1224 * t1157 + t1222 * t1262, t1196, pkin(1) * t1089 - t1224 * t1121 + t1222 * t1311, pkin(1) * t1084 - t1224 * t1122 + t1222 * t1312, pkin(1) * t1075 + t1222 * t1243, pkin(1) * t1037 + t1056 * t1386, t1222 * t1270 + t1320, t1224 * t1134 + t1222 * t1277, t1224 * t1103 + t1222 * t1273, t1222 * t1271 - t1320, t1222 * t1272 + t1224 * t1260, t1222 * t1269 + t1196, pkin(1) * t954 + t1222 * t1245 + t1224 * t922, pkin(1) * t960 + t1222 * t1244 + t1224 * t927, pkin(1) * t908 + t1033 * t1389 + t1222 * t1246, pkin(1) * t798 + t1222 * t1241 + t1389 * t889, t1224 * t1023 + t1222 * t1280, t1222 * t1286 + t1224 * t948, t1224 * t1005 + t1222 * t1283, t1224 * t1021 + t1222 * t1281, t1224 * t1006 + t1222 * t1282, t1224 * t1051 + t1222 * t1278, pkin(1) * t810 + t1222 * t1248 + t1224 * t796, pkin(1) * t812 + t1222 * t1247 + t1224 * t802, pkin(1) * t783 + t1222 * t1249 + t1224 * t725, pkin(1) * t656 + t1222 * t1250 + t1224 * t697, t1222 * t1290 + t1224 * t897, t1222 * t1296 + t1224 * t826, t1222 * t1293 + t1224 * t857, t1222 * t1291 + t1224 * t896, t1222 * t1292 + t1224 * t858, t1222 * t1289 + t1224 * t946, pkin(1) * t686 + t1222 * t1252 + t1224 * t647, pkin(1) * t699 + t1222 * t1251 + t1224 * t648, pkin(1) * t659 + t1222 * t1253 + t1224 * t621, pkin(1) * t584 + t1222 * t1254 + t1224 * t574, t1222 * t1303 + t1224 * t741, t1222 * t1306 + t1224 * t679, t1222 * t1301 + t1224 * t734, t1222 * t1304 + t1224 * t740, t1222 * t1300 + t1224 * t735, t1222 * t1299 + t1224 * t818, pkin(1) * t599 + t1222 * t1256 + t1224 * t572, pkin(1) * t608 + t1222 * t1255 + t1224 * t575, pkin(1) * t580 + t1222 * t1257 + t1224 * t548, pkin(1) * t540 + t1222 * t1258 + t1224 * t534;];
tauB_reg  = t1;
