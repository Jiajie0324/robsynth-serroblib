% Calculate vector of inverse dynamics joint torques for
% S6RRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR5_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRR5_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR5_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR5_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRPRRR5_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:47:19
% EndTime: 2019-03-09 13:47:44
% DurationCPUTime: 18.36s
% Computational Cost: add. (15184->780), mult. (42524->1064), div. (0->0), fcn. (35967->16), ass. (0->336)
t798 = sin(pkin(12));
t799 = sin(pkin(6));
t805 = sin(qJ(2));
t912 = qJD(1) * t805;
t887 = t799 * t912;
t800 = cos(pkin(12));
t810 = cos(qJ(2));
t932 = t810 * t800;
t891 = t799 * t932;
t729 = qJD(1) * t891 - t798 * t887;
t725 = qJD(4) - t729;
t841 = t798 * t810 + t800 * t805;
t829 = qJD(1) * t841;
t732 = t799 * t829;
t803 = sin(qJ(5));
t808 = cos(qJ(5));
t809 = cos(qJ(4));
t674 = t729 * t803 * t809 - t808 * t732;
t906 = qJD(4) * t809;
t1004 = -t803 * t906 + t674;
t933 = t808 * t809;
t675 = t729 * t933 + t732 * t803;
t804 = sin(qJ(4));
t904 = qJD(5) * t803;
t817 = -t804 * t904 + t808 * t906 - t675;
t801 = cos(pkin(6));
t977 = pkin(1) * t801;
t784 = t810 * t977;
t779 = qJD(1) * t784;
t971 = pkin(8) + qJ(3);
t881 = t971 * t799;
t859 = t805 * t881;
t718 = -qJD(1) * t859 + t779;
t941 = t801 * t805;
t783 = pkin(1) * t941;
t944 = t799 * t810;
t719 = (t944 * t971 + t783) * qJD(1);
t942 = t800 * t719;
t652 = t718 * t798 + t942;
t1005 = t652 - t725 * (pkin(4) * t804 - pkin(10) * t809);
t913 = qJD(1) * t801;
t864 = qJD(2) + t913;
t816 = -t809 * t732 - t804 * t864;
t639 = -t808 * t725 - t803 * t816;
t807 = cos(qJ(6));
t641 = t725 * t803 - t808 * t816;
t802 = sin(qJ(6));
t962 = t641 * t802;
t579 = t807 * t639 + t962;
t767 = t809 * t864;
t701 = t732 * t804 - t767;
t699 = qJD(5) + t701;
t696 = qJD(6) + t699;
t1003 = t579 * t696;
t844 = t639 * t802 - t807 * t641;
t1002 = t696 * t844;
t902 = qJD(6) * t802;
t937 = t804 * t808;
t938 = t803 * t804;
t982 = qJD(5) + qJD(6);
t924 = -t902 * t938 + (t937 * t982 - t1004) * t807 + t817 * t802;
t903 = qJD(5) * t808;
t1001 = t804 * t903 - t1004;
t1000 = t701 + t982;
t790 = pkin(2) * t810 + pkin(1);
t847 = t790 * qJDD(1);
t911 = qJD(2) * t805;
t886 = t799 * t911;
t858 = qJD(1) * t886;
t896 = pkin(2) * t858 + qJDD(3);
t999 = t799 * t847 - t896;
t900 = qJD(1) * qJD(2);
t880 = t810 * t900;
t688 = -t798 * t858 + (qJDD(1) * t841 + t800 * t880) * t799;
t899 = qJDD(1) * t801;
t781 = qJDD(2) + t899;
t608 = -qJD(4) * t816 + t804 * t688 - t809 * t781;
t605 = qJDD(5) + t608;
t604 = qJDD(6) + t605;
t755 = t802 * t803 - t807 * t808;
t739 = t755 * t804;
t756 = t802 * t808 + t803 * t807;
t738 = t756 * t804;
t925 = t674 * t802 - t675 * t807 - t738 * t982 - t755 * t906;
t998 = t604 * t739 - t696 * t925;
t806 = sin(qJ(1));
t934 = t806 * t810;
t811 = cos(qJ(1));
t935 = t805 * t811;
t747 = -t801 * t934 - t935;
t931 = t810 * t811;
t936 = t805 * t806;
t838 = t801 * t931 - t936;
t997 = -g(1) * t747 - g(2) * t838;
t823 = t801 * pkin(2) - t859;
t704 = qJD(2) * pkin(2) + qJD(1) * t823 + t779;
t634 = t798 * t704 + t942;
t623 = pkin(9) * t864 + t634;
t856 = t790 * t799;
t744 = -qJD(1) * t856 + qJD(3);
t649 = -pkin(3) * t729 - pkin(9) * t732 + t744;
t568 = t809 * t623 + t804 * t649;
t555 = pkin(10) * t725 + t568;
t708 = t798 * t719;
t633 = t800 * t704 - t708;
t622 = -pkin(3) * t864 - t633;
t562 = t701 * pkin(4) + pkin(10) * t816 + t622;
t534 = t555 * t808 + t562 * t803;
t527 = -pkin(11) * t639 + t534;
t525 = t527 * t902;
t567 = -t804 * t623 + t649 * t809;
t554 = -pkin(4) * t725 - t567;
t542 = pkin(5) * t639 + t554;
t736 = t841 * t801;
t753 = t798 * t805 - t932;
t842 = -t736 * t806 - t753 * t811;
t945 = t799 * t806;
t680 = t804 * t945 + t809 * t842;
t834 = t753 * t801;
t694 = t806 * t834 - t811 * t841;
t797 = qJ(5) + qJ(6);
t792 = sin(t797);
t793 = cos(t797);
t602 = t680 * t793 - t694 * t792;
t735 = t841 * t799;
t714 = t735 * t809 + t801 * t804;
t946 = t799 * t805;
t734 = t798 * t946 - t891;
t843 = t736 * t811 - t753 * t806;
t943 = t799 * t811;
t677 = -t804 * t943 + t809 * t843;
t691 = -t806 * t841 - t811 * t834;
t993 = t677 * t793 - t691 * t792;
t996 = t542 * t579 + g(1) * t602 + g(2) * t993 - g(3) * (-t714 * t793 - t734 * t792) + t525;
t601 = -t680 * t792 - t694 * t793;
t994 = t677 * t792 + t691 * t793;
t995 = t542 * t844 - g(3) * (-t714 * t792 + t734 * t793) + g(2) * t994 - g(1) * t601;
t992 = t677 * t803 + t691 * t808;
t991 = t677 * t808 - t691 * t803;
t990 = t604 * MDP(31) + (-t579 ^ 2 + t844 ^ 2) * MDP(28) - t579 * MDP(27) * t844;
t989 = t639 * t725;
t717 = t784 + t823;
t916 = pkin(8) * t944 + t783;
t726 = qJ(3) * t944 + t916;
t666 = t798 * t717 + t800 * t726;
t651 = pkin(9) * t801 + t666;
t673 = pkin(3) * t734 - pkin(9) * t735 - t856;
t927 = t809 * t651 + t804 * t673;
t577 = pkin(10) * t734 + t927;
t665 = t717 * t800 - t798 * t726;
t650 = -pkin(3) * t801 - t665;
t713 = t735 * t804 - t801 * t809;
t588 = pkin(4) * t713 - pkin(10) * t714 + t650;
t928 = t808 * t577 + t803 * t588;
t908 = qJD(4) * t804;
t787 = pkin(2) * t798 + pkin(9);
t950 = t787 * t803;
t986 = -t1005 * t808 + t908 * t950;
t794 = t799 ^ 2;
t978 = pkin(1) * t794;
t984 = t801 * t916 + t805 * t978;
t653 = t718 * t800 - t708;
t669 = pkin(2) * t887 + pkin(3) * t732 - pkin(9) * t729;
t926 = t809 * t653 + t804 * t669;
t570 = pkin(10) * t732 + t926;
t788 = -pkin(2) * t800 - pkin(3);
t751 = -pkin(4) * t809 - pkin(10) * t804 + t788;
t983 = t1005 * t803 + t808 * t570 - t751 * t903;
t607 = qJD(4) * t767 + t809 * t688 - t732 * t908 + t804 * t781;
t897 = qJDD(1) * t810;
t877 = t799 * t897;
t763 = t800 * t877;
t828 = t841 * qJD(2);
t898 = qJDD(1) * t805;
t879 = t798 * t898;
t686 = qJDD(4) - t763 + (qJD(1) * t828 + t879) * t799;
t547 = qJD(5) * t641 + t607 * t803 - t808 * t686;
t546 = t808 * t607 + t803 * t686 + t725 * t903 + t816 * t904;
t874 = t546 * t802 + t807 * t547;
t517 = -qJD(6) * t844 + t874;
t980 = 0.2e1 * t794;
t812 = qJD(1) ^ 2;
t979 = pkin(10) + pkin(11);
t972 = g(3) * t810;
t533 = -t555 * t803 + t808 * t562;
t526 = -pkin(11) * t641 + t533;
t521 = pkin(5) * t699 + t526;
t970 = t521 * t807;
t969 = t527 * t807;
t968 = t546 * t803;
t966 = t605 * t808;
t965 = t639 * t699;
t964 = t641 * t699;
t963 = t641 * t729;
t866 = t699 * t808;
t957 = t701 * t725;
t956 = t701 * t732;
t955 = t701 * t803;
t954 = t816 * t725;
t953 = t816 * t732;
t867 = t725 * t804;
t952 = t729 * t804;
t951 = t781 * MDP(8);
t949 = t792 * t809;
t948 = t793 * t809;
t947 = t794 * t812;
t893 = pkin(1) * t897;
t778 = t801 * t893;
t894 = qJD(2) * t977;
t861 = qJD(1) * t894;
t876 = qJD(2) * t971;
t910 = qJD(3) * t805;
t628 = -t805 * t861 + pkin(2) * t781 + t778 + (-t971 * t898 + (-t810 * t876 - t910) * qJD(1)) * t799;
t821 = qJD(3) * t810 - t805 * t876;
t889 = pkin(8) * t877 + qJDD(1) * t783 + t810 * t861;
t644 = (qJ(3) * t897 + qJD(1) * t821) * t799 + t889;
t566 = t798 * t628 + t800 * t644;
t560 = pkin(9) * t781 + t566;
t687 = t763 + (-qJD(2) * t829 - t879) * t799;
t589 = -pkin(3) * t687 - pkin(9) * t688 - t999;
t833 = t809 * t560 + t804 * t589 - t623 * t908 + t649 * t906;
t519 = pkin(10) * t686 + t833;
t565 = t628 * t800 - t798 * t644;
t559 = -pkin(3) * t781 - t565;
t531 = pkin(4) * t608 - pkin(10) * t607 + t559;
t510 = -qJD(5) * t534 - t803 * t519 + t808 * t531;
t507 = pkin(5) * t605 - pkin(11) * t546 + t510;
t940 = t802 * t507;
t939 = t803 * t605;
t627 = -pkin(4) * t816 + pkin(10) * t701;
t930 = t808 * t567 + t803 * t627;
t923 = t809 * t686 + t725 * t952;
t922 = t1000 * t755;
t921 = t1000 * t756;
t647 = t804 * t653;
t569 = -pkin(4) * t732 - t669 * t809 + t647;
t920 = pkin(5) * t1001 + t787 * t906 - t569;
t758 = t787 * t933;
t917 = t803 * t751 + t758;
t795 = t805 ^ 2;
t915 = -t810 ^ 2 + t795;
t909 = qJD(4) * t787;
t907 = qJD(4) * t808;
t905 = qJD(5) * t699;
t901 = qJD(6) * t807;
t892 = t810 * t947;
t890 = t807 * t546 - t802 * t547 - t639 * t901;
t888 = qJD(5) * t979;
t882 = t799 * t801 * t812;
t878 = t799 * t898;
t831 = -t808 * t519 - t803 * t531 + t555 * t904 - t562 * t903;
t508 = -pkin(11) * t547 - t831;
t875 = t807 * t507 - t802 * t508;
t873 = -t577 * t803 + t808 * t588;
t871 = -t804 * t651 + t673 * t809;
t780 = t810 * t894;
t705 = t799 * t821 + t780;
t706 = -t799 * t910 + (-t810 * t881 - t783) * qJD(2);
t625 = t705 * t798 - t800 * t706;
t869 = t809 * t725;
t865 = qJD(6) * t521 + t508;
t863 = qJD(2) + 0.2e1 * t913;
t862 = t781 + t899;
t860 = t804 * t560 - t809 * t589 + t623 * t906 + t649 * t908;
t857 = -t568 + (t904 + t955) * pkin(5);
t854 = g(1) * t811 + g(2) * t806;
t853 = g(1) * t806 - g(2) * t811;
t852 = -t738 * t604 - t696 * t924;
t700 = -pkin(11) * t938 + t917;
t851 = pkin(5) * t952 - pkin(11) * t675 + qJD(6) * t700 - t570 * t803 - (pkin(5) * t804 - pkin(11) * t933) * qJD(4) - (-t758 + (pkin(11) * t804 - t751) * t803) * qJD(5) - t986;
t741 = t808 * t751;
t689 = -pkin(11) * t937 + t741 + (-pkin(5) - t950) * t809;
t850 = -qJD(6) * t689 - (-t804 * t907 - t809 * t904) * t787 + t983 + t1001 * pkin(11);
t619 = t808 * t627;
t774 = t979 * t808;
t849 = -pkin(5) * t816 + qJD(6) * t774 - t567 * t803 + t619 + (pkin(11) * t701 + t888) * t808;
t773 = t979 * t803;
t848 = pkin(11) * t955 + qJD(6) * t773 + t803 * t888 + t930;
t514 = t521 * t802 + t969;
t672 = t714 * t808 + t734 * t803;
t530 = pkin(5) * t713 - pkin(11) * t672 + t873;
t671 = t714 * t803 - t734 * t808;
t535 = -pkin(11) * t671 + t928;
t846 = t530 * t807 - t535 * t802;
t845 = t530 * t802 + t535 * t807;
t591 = t807 * t671 + t672 * t802;
t592 = -t671 * t802 + t672 * t807;
t626 = t705 * t800 + t706 * t798;
t730 = t799 * t828;
t731 = t753 * t799 * qJD(2);
t670 = pkin(2) * t886 + pkin(3) * t730 + pkin(9) * t731;
t840 = -t804 * t626 - t651 * t906 + t670 * t809 - t673 * t908;
t576 = -pkin(4) * t734 - t871;
t839 = t804 * t843 + t809 * t943;
t837 = -t699 * t903 - t939;
t520 = -pkin(4) * t686 + t860;
t836 = -pkin(10) * t605 + t554 * t699;
t832 = t809 * t626 - t651 * t908 + t804 * t670 + t673 * t906;
t539 = pkin(10) * t730 + t832;
t663 = qJD(4) * t714 - t731 * t804;
t664 = -qJD(4) * t713 - t731 * t809;
t552 = pkin(4) * t663 - pkin(10) * t664 + t625;
t830 = t808 * t539 + t803 * t552 - t577 * t904 + t588 * t903;
t516 = -t641 * t902 + t890;
t827 = t622 * t725 - t787 * t686;
t679 = -t804 * t842 + t809 * t945;
t826 = g(1) * t679 - g(2) * t839 - g(3) * t713;
t825 = -g(1) * t842 - g(2) * t843 - g(3) * t735;
t824 = g(1) * t694 + g(2) * t691 - g(3) * t734;
t819 = -t559 - t824;
t540 = -pkin(4) * t730 - t840;
t815 = t787 * t905 + t824;
t814 = -qJD(5) * t928 - t539 * t803 + t808 * t552;
t505 = -qJD(6) * t514 + t875;
t813 = pkin(10) * t905 + t520 + t826;
t791 = -pkin(5) * t808 - pkin(4);
t748 = -t801 * t936 + t931;
t746 = -t801 * t935 - t934;
t743 = (pkin(5) * t803 + t787) * t804;
t742 = pkin(2) * t941 - t881;
t629 = t641 * t908;
t610 = t680 * t808 - t694 * t803;
t609 = -t680 * t803 - t694 * t808;
t575 = -qJD(5) * t671 + t664 * t808 + t730 * t803;
t574 = qJD(5) * t672 + t664 * t803 - t730 * t808;
t573 = t844 * t908;
t549 = pkin(5) * t671 + t576;
t524 = qJD(6) * t592 + t807 * t574 + t575 * t802;
t523 = -qJD(6) * t591 - t574 * t802 + t575 * t807;
t522 = pkin(5) * t574 + t540;
t515 = pkin(5) * t547 + t520;
t513 = -t527 * t802 + t970;
t512 = -pkin(11) * t574 + t830;
t511 = pkin(5) * t663 - pkin(11) * t575 + t814;
t504 = t865 * t807 - t525 + t940;
t1 = [(qJDD(1) * t795 + 0.2e1 * t805 * t880) * t794 * MDP(4) + (t516 * t713 + t523 * t696 + t592 * t604 - t663 * t844) * MDP(29) + (t516 * t592 - t523 * t844) * MDP(27) + (-t516 * t591 - t517 * t592 - t523 * t579 + t524 * t844) * MDP(28) + (g(1) * t677 - g(2) * t680 + t559 * t713 + t567 * t730 + t650 * t608 + t622 * t663 + t625 * t701 + t686 * t871 + t725 * t840 - t734 * t860) * MDP(18) + (-g(1) * t839 - g(2) * t679 + t559 * t714 - t568 * t730 + t650 * t607 + t622 * t664 - t625 * t816 - t686 * t927 - t725 * t832 - t734 * t833) * MDP(19) + (t607 * t734 + t664 * t725 + t686 * t714 - t730 * t816) * MDP(15) + (-t607 * t713 - t608 * t714 + t663 * t816 - t664 * t701) * MDP(14) + (t607 * t714 - t664 * t816) * MDP(13) + (-(-pkin(8) * t886 + t780) * t864 - t916 * t781 - (-pkin(8) * t858 + t889) * t801 + g(1) * t838 - g(2) * t747 + 0.2e1 * (-t880 - t898) * t978) * MDP(10) + (t893 * t980 + (-pkin(8) * t946 + t784) * t781 + (-pkin(8) * t878 + t778) * t801 - g(1) * t746 - g(2) * t748 - t916 * qJD(2) ^ 2 - 0.2e1 * t984 * t900) * MDP(9) + (t566 * t666 + t634 * t626 + t565 * t665 - t633 * t625 - g(1) * (-t742 * t811 - t790 * t806) - g(2) * (-t742 * t806 + t790 * t811)) * MDP(12) + (g(1) * t991 - g(2) * t610 + t510 * t713 + t520 * t671 + t533 * t663 + t540 * t639 + t576 * t547 + t554 * t574 + t873 * t605 + t814 * t699) * MDP(25) + (-g(1) * t992 - g(2) * t609 + t520 * t672 - t534 * t663 + t540 * t641 + t576 * t546 + t554 * t575 - t928 * t605 - t830 * t699 + t831 * t713) * MDP(26) + ((-qJD(6) * t845 + t511 * t807 - t512 * t802) * t696 + t846 * t604 + t505 * t713 + t513 * t663 + t522 * t579 + t549 * t517 + t515 * t591 + t542 * t524 + g(1) * t993 - g(2) * t602) * MDP(32) + (-(qJD(6) * t846 + t511 * t802 + t512 * t807) * t696 - t845 * t604 - t504 * t713 - t514 * t663 - t522 * t844 + t549 * t516 + t515 * t592 + t542 * t523 - g(1) * t994 - g(2) * t601) * MDP(33) + ((t810 * t862 - t863 * t911) * MDP(7) + (qJD(2) * t810 * t863 + t805 * t862) * MDP(6) + (pkin(2) * t744 * t911 + t790 * t999) * MDP(12) - t854 * MDP(11)) * t799 + t853 * MDP(2) + t854 * MDP(3) + t801 * t951 + (-t565 * t735 - t566 * t734 + t625 * t732 + t626 * t729 + t633 * t731 - t634 * t730 - t665 * t688 + t666 * t687) * MDP(11) + (-t608 * t734 - t663 * t725 - t686 * t713 - t701 * t730) * MDP(16) + (t686 * t734 + t725 * t730) * MDP(17) + (-t547 * t713 - t574 * t699 - t605 * t671 - t639 * t663) * MDP(23) + (t546 * t713 + t575 * t699 + t605 * t672 + t641 * t663) * MDP(22) + (t605 * t713 + t663 * t699) * MDP(24) + (-t517 * t713 - t524 * t696 - t579 * t663 - t591 * t604) * MDP(30) + (t604 * t713 + t663 * t696) * MDP(31) + (-t546 * t671 - t547 * t672 - t574 * t641 - t575 * t639) * MDP(21) + (t546 * t672 + t575 * t641) * MDP(20) + qJDD(1) * MDP(1) + (t805 * t897 - t900 * t915) * MDP(5) * t980; -t805 * MDP(4) * t892 + (pkin(1) * t892 + (-pkin(8) * t887 + t779) * t913 + g(1) * t748 - g(2) * t746 + g(3) * t946 + t779 * qJD(2) - t889) * MDP(10) + (-t917 * t605 - t569 * t641 - t554 * t675 + t983 * t699 + t825 * t808 + (-t831 + (t554 * t808 + t641 * t787) * qJD(4) + t815 * t803) * t809 + (-t554 * t904 + t520 * t808 + t534 * t729 + t787 * t546 + (t787 * t866 - t534) * qJD(4)) * t804) * MDP(26) + (-t516 * t739 - t844 * t925) * MDP(27) + (-t516 * t738 + t517 * t739 - t579 * t925 + t844 * t924) * MDP(28) + (t607 * t804 - t816 * t869) * MDP(13) + (-(t689 * t802 + t700 * t807) * t604 + t504 * t809 + t743 * t516 - t515 * t739 - g(1) * (-t694 * t949 + t793 * t842) - g(2) * (-t691 * t949 + t793 * t843) - g(3) * (t734 * t949 + t735 * t793) + (t802 * t851 + t807 * t850) * t696 - t920 * t844 + t925 * t542 - t514 * t867) * MDP(33) + (t517 * t809 - t579 * t867 + t852) * MDP(30) + (t546 * t937 + t641 * t817) * MDP(20) + (t633 * t652 - t634 * t653 + (t566 * t798 + t565 * t800 + (-t744 * t912 - t972) * t799 + t997) * pkin(2)) * MDP(12) + (t778 + (-pkin(8) * t898 - t972) * t799 + t984 * t812 + t997) * MDP(9) + ((t607 - t957) * t809 + (-t608 + t954) * t804) * MDP(14) + (t639 * t675 + t641 * t674 + (-t639 * t808 - t641 * t803) * t906 + (-t968 - t547 * t808 + (t639 * t803 - t641 * t808) * qJD(5)) * t804) * MDP(21) + (-t546 * t809 + t629 + (-t963 + t966) * t804 + t817 * t699) * MDP(22) + (t686 * t804 + t725 * t869 + t953) * MDP(15) + (-t516 * t809 + t844 * t952 - t573 - t998) * MDP(29) + (-t810 * t882 + t878) * MDP(6) + (t805 * t882 + t877) * MDP(7) + ((t689 * t807 - t700 * t802) * t604 - t505 * t809 + t743 * t517 + t515 * t738 - g(1) * (t694 * t948 + t792 * t842) - g(2) * (t691 * t948 + t792 * t843) - g(3) * (-t734 * t948 + t735 * t792) + (t802 * t850 - t807 * t851) * t696 + t920 * t579 + t924 * t542 + t513 * t867) * MDP(32) + (-t554 * t674 - t569 * t639 + t741 * t605 + t986 * t699 + ((-qJD(5) * t751 + t570) * t699 + t825) * t803 + (-t787 * t939 - t510 + (t554 * t803 + t639 * t787) * qJD(4) - t815 * t808) * t809 + (t520 * t803 + t533 * t725 + t787 * t547 + t554 * t903) * t804) * MDP(25) + (t547 * t809 + t1004 * t699 + (t837 - t989) * t804) * MDP(23) + t951 + (t788 * t607 + t926 * t725 + t568 * t732 + t652 * t816 + t827 * t809 + (t725 * t909 - t819) * t804) * MDP(19) + (-t567 * t732 + t788 * t608 + t647 * t725 - t652 * t701 + t827 * t804 + ((-t669 - t909) * t725 + t819) * t809) * MDP(18) + ((t634 - t652) * t732 + (t633 - t653) * t729 + (t687 * t798 - t688 * t800) * pkin(2)) * MDP(11) + (-t725 * t908 + t923 + t956) * MDP(16) - t725 * t732 * MDP(17) + t915 * MDP(5) * t947 + (-t605 * t809 + t699 * t867) * MDP(24) + (-t604 * t809 + t696 * t867) * MDP(31); (-t729 ^ 2 - t732 ^ 2) * MDP(11) + (t923 - t956) * MDP(18) + MDP(19) * t953 + t674 * t699 * MDP(25) + (t675 * t699 + t629) * MDP(26) + t852 * MDP(32) + (-t573 + t998) * MDP(33) + ((-qJD(4) * t699 * t803 - t547) * MDP(25) + (-t699 * t907 - t546) * MDP(26) - t517 * MDP(32) - t516 * MDP(33) - t725 ^ 2 * MDP(19)) * t809 + (-t686 * MDP(19) + (t837 + t989) * MDP(25) + (t699 * t904 - t963 - t966) * MDP(26) + t844 * t729 * MDP(33) + (-MDP(18) * qJD(4) + MDP(32) * t579) * t725) * t804 + (-g(3) * t801 + t633 * t732 - t634 * t729 + t896 + (-t847 - t853) * t799) * MDP(12); -t701 ^ 2 * MDP(14) + (t607 + t957) * MDP(15) + (-t608 - t954) * MDP(16) + t686 * MDP(17) + (t568 * t725 - t826 - t860) * MDP(18) + (g(1) * t680 + g(2) * t677 + g(3) * t714 + t567 * t725 + t622 * t701 - t833) * MDP(19) + (t641 * t866 + t968) * MDP(20) + ((t546 - t965) * t808 + (-t547 - t964) * t803) * MDP(21) + (t699 * t866 + t939) * MDP(22) + (-t699 ^ 2 * t803 + t966) * MDP(23) + (-pkin(4) * t547 - t568 * t639 - t619 * t699 + (t567 * t699 + t836) * t803 - t813 * t808) * MDP(25) + (-pkin(4) * t546 - t568 * t641 + t699 * t930 + t803 * t813 + t808 * t836) * MDP(26) + (t516 * t756 + t844 * t922) * MDP(27) + (-t516 * t755 - t517 * t756 + t579 * t922 + t844 * t921) * MDP(28) + (t604 * t756 - t696 * t922) * MDP(29) + (-t604 * t755 - t696 * t921) * MDP(30) + ((-t773 * t807 - t774 * t802) * t604 + t791 * t517 + t515 * t755 + (t802 * t848 - t807 * t849) * t696 + t857 * t579 + t921 * t542 - t826 * t793) * MDP(32) + (-(-t773 * t802 + t774 * t807) * t604 + t791 * t516 + t515 * t756 + (t802 * t849 + t807 * t848) * t696 - t857 * t844 - t922 * t542 + t826 * t792) * MDP(33) - (MDP(13) * t701 - MDP(14) * t816 - t622 * MDP(18) - MDP(22) * t641 + t639 * MDP(23) - t699 * MDP(24) - t533 * MDP(25) + MDP(26) * t534 + MDP(29) * t844 + t579 * MDP(30) - t696 * MDP(31) - t513 * MDP(32) + t514 * MDP(33)) * t816; t641 * t639 * MDP(20) + (-t639 ^ 2 + t641 ^ 2) * MDP(21) + (t546 + t965) * MDP(22) + (-t547 + t964) * MDP(23) + t605 * MDP(24) + (-g(1) * t609 + g(2) * t992 + g(3) * t671 + t534 * t699 - t554 * t641 + t510) * MDP(25) + (g(1) * t610 + g(2) * t991 + g(3) * t672 + t533 * t699 + t554 * t639 + t831) * MDP(26) + (t516 + t1003) * MDP(29) + (-t517 - t1002) * MDP(30) + (-(-t526 * t802 - t969) * t696 + (-t579 * t641 + t604 * t807 - t696 * t902) * pkin(5) + t505 + t995) * MDP(32) + ((-t527 * t696 - t507) * t802 + (t526 * t696 - t865) * t807 + (-t604 * t802 + t641 * t844 - t696 * t901) * pkin(5) + t996) * MDP(33) + t990; (t890 + t1003) * MDP(29) + (-t874 - t1002) * MDP(30) + (t514 * t696 + t875 + t995) * MDP(32) + (-t807 * t508 + t513 * t696 - t940 + t996) * MDP(33) + (-MDP(29) * t962 + MDP(30) * t844 - MDP(32) * t514 - MDP(33) * t970) * qJD(6) + t990;];
tau  = t1;
