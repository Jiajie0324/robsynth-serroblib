% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:46:57
% EndTime: 2019-03-09 13:47:41
% DurationCPUTime: 27.19s
% Computational Cost: add. (36445->933), mult. (101867->1242), div. (0->0), fcn. (84048->16), ass. (0->412)
t369 = sin(pkin(12));
t370 = sin(pkin(6));
t379 = cos(qJ(2));
t568 = cos(pkin(12));
t471 = t379 * t568;
t446 = t370 * t471;
t375 = sin(qJ(2));
t514 = qJD(1) * t375;
t492 = t370 * t514;
t281 = -qJD(1) * t446 + t369 * t492;
t275 = qJD(4) + t281;
t371 = cos(pkin(6));
t354 = t371 * t379 * pkin(1);
t346 = qJD(1) * t354;
t583 = pkin(8) + qJ(3);
t484 = t583 * t375;
t452 = t370 * t484;
t266 = -qJD(1) * t452 + t346;
t540 = t371 * t375;
t353 = pkin(1) * t540;
t542 = t370 * t379;
t267 = (t542 * t583 + t353) * qJD(1);
t470 = t568 * t267;
t186 = t266 * t369 + t470;
t374 = sin(qJ(4));
t378 = cos(qJ(4));
t633 = -t186 + t275 * (pkin(4) * t374 - pkin(10) * t378);
t313 = -t379 * t369 - t375 * t568;
t398 = qJD(1) * t313;
t285 = t370 * t398;
t377 = cos(qJ(5));
t373 = sin(qJ(5));
t536 = t373 * t378;
t211 = -t281 * t536 + t377 * t285;
t510 = qJD(4) * t378;
t630 = -t373 * t510 + t211;
t592 = cos(qJ(6));
t482 = t592 * qJD(6);
t632 = (t592 * qJD(5) + t482) * t377;
t508 = qJD(5) * t377;
t631 = -t374 * t508 + t630;
t529 = t377 * t378;
t212 = -t281 * t529 - t285 * t373;
t509 = qJD(5) * t373;
t629 = -t374 * t509 + t377 * t510 - t212;
t359 = -pkin(2) * t568 - pkin(3);
t444 = t378 * pkin(4) + t374 * pkin(10);
t310 = -t444 + t359;
t358 = pkin(2) * t369 + pkin(9);
t511 = qJD(4) * t374;
t254 = t369 * t267;
t187 = t266 * t568 - t254;
t206 = pkin(2) * t492 - pkin(3) * t285 + pkin(9) * t281;
t114 = t378 * t187 + t374 * t206;
t93 = -pkin(10) * t285 + t114;
t573 = -t377 * t93 + t310 * t508 + (-t377 * t511 - t378 * t509) * t358 + t633 * t373;
t548 = t358 * t373;
t628 = t373 * t93 + t377 * t633 + t511 * t548;
t318 = t358 * t529;
t550 = t281 * t374;
t627 = pkin(5) * t550 + pkin(11) * t212 + (pkin(5) * t374 - pkin(11) * t529) * qJD(4) + (-t318 + (pkin(11) * t374 - t310) * t373) * qJD(5) + t628;
t626 = t631 * pkin(11) + t573;
t381 = -pkin(11) - pkin(10);
t493 = qJD(5) * t381;
t515 = qJD(1) * t371;
t458 = qJD(2) + t515;
t246 = -t285 * t374 - t378 * t458;
t553 = t246 * t373;
t393 = t378 * t285 - t374 * t458;
t159 = -pkin(4) * t393 + pkin(10) * t246;
t405 = t371 * pkin(2) - t452;
t249 = qJD(2) * pkin(2) + qJD(1) * t405 + t346;
t167 = t369 * t249 + t470;
t155 = pkin(9) * t458 + t167;
t362 = pkin(2) * t379 + pkin(1);
t301 = -qJD(1) * t362 * t370 + qJD(3);
t181 = pkin(3) * t281 + pkin(9) * t285 + t301;
t90 = -t374 * t155 + t181 * t378;
t64 = t373 * t159 + t377 * t90;
t625 = -pkin(11) * t553 + t373 * t493 - t64;
t63 = t377 * t159 - t373 * t90;
t624 = pkin(5) * t393 - t63 + (-pkin(11) * t246 + t493) * t377;
t172 = -t275 * t377 - t373 * t393;
t174 = t275 * t373 - t377 * t393;
t372 = sin(qJ(6));
t104 = t592 * t172 + t174 * t372;
t424 = -t372 * t172 + t592 * t174;
t567 = t104 * t424;
t463 = t275 * t374;
t623 = t393 * t463;
t315 = t372 * t377 + t592 * t373;
t600 = qJD(5) + qJD(6);
t258 = t600 * t315;
t453 = t592 * t510;
t522 = -t592 * t212 - t258 * t374 + t630 * t372 + t377 * t453;
t507 = qJD(6) * t372;
t537 = t373 * t374;
t521 = -t592 * t211 + t629 * t372 + t373 * t453 + t374 * t632 - t507 * t537;
t244 = qJD(5) + t246;
t323 = qJDD(1) * t446;
t397 = qJD(2) * t313;
t504 = qJDD(1) * t375;
t477 = t369 * t504;
t223 = -t323 + (-qJD(1) * t397 + t477) * t370;
t222 = qJDD(4) + t223;
t445 = qJD(2) * t471;
t506 = qJD(1) * qJD(2);
t479 = t375 * t506;
t450 = t370 * t479;
t224 = -t369 * t450 + (qJD(1) * t445 - qJDD(1) * t313) * t370;
t436 = t362 * qJDD(1);
t502 = pkin(2) * t450 + qJDD(3);
t265 = -t370 * t436 + t502;
t118 = pkin(3) * t223 - pkin(9) * t224 + t265;
t505 = qJDD(1) * t371;
t348 = qJDD(2) + t505;
t499 = pkin(1) * t505;
t345 = t379 * t499;
t480 = t371 * t506;
t455 = pkin(1) * t480;
t417 = -t375 * t455 + t345;
t473 = qJD(2) * t583;
t512 = qJD(3) * t375;
t160 = pkin(2) * t348 + (-qJDD(1) * t484 + (-t379 * t473 - t512) * qJD(1)) * t370 + t417;
t402 = qJD(3) * t379 - t375 * t473;
t503 = qJDD(1) * t379;
t476 = t370 * t503;
t495 = pkin(8) * t476 + t375 * t499 + t379 * t455;
t176 = (qJ(3) * t503 + qJD(1) * t402) * t370 + t495;
t89 = t369 * t160 + t568 * t176;
t83 = pkin(9) * t348 + t89;
t32 = t374 * t118 - t155 * t511 + t181 * t510 + t378 * t83;
t29 = pkin(10) * t222 + t32;
t137 = -t378 * (qJD(4) * t458 + t224) - t285 * t511 - t374 * t348;
t138 = -qJD(4) * t393 + t374 * t224 - t378 * t348;
t88 = t568 * t160 - t369 * t176;
t82 = -pkin(3) * t348 - t88;
t43 = pkin(4) * t138 + pkin(10) * t137 + t82;
t91 = t155 * t378 + t181 * t374;
t78 = pkin(10) * t275 + t91;
t166 = t249 * t568 - t254;
t154 = -pkin(3) * t458 - t166;
t85 = t246 * pkin(4) + pkin(10) * t393 + t154;
t426 = -t377 * t29 - t373 * t43 - t85 * t508 + t509 * t78;
t45 = -t373 * t78 + t377 * t85;
t622 = -t45 * t244 - t426;
t459 = -t378 * t118 + t155 * t510 + t181 * t511 + t374 * t83;
t620 = t275 * t91 - t459;
t619 = t511 + t550;
t618 = -t104 ^ 2 + t424 ^ 2;
t239 = qJD(6) + t244;
t496 = -t373 * t137 + t275 * t509 - t393 * t508;
t429 = t222 * t377 - t496;
t69 = t377 * t137 - t373 * t222 - t275 * t508 - t393 * t509;
t24 = t172 * t482 + t174 * t507 - t372 * t429 + t592 * t69;
t617 = t104 * t239 - t24;
t38 = -pkin(11) * t174 + t45;
t31 = pkin(5) * t244 + t38;
t46 = t373 * t85 + t377 * t78;
t39 = -pkin(11) * t172 + t46;
t135 = qJDD(5) + t138;
t9 = -qJD(5) * t46 - t373 * t29 + t377 * t43;
t6 = pkin(5) * t135 + pkin(11) * t69 + t9;
t7 = pkin(11) * t429 - t426;
t1 = t31 * t482 + t372 * t6 - t39 * t507 + t592 * t7;
t376 = sin(qJ(1));
t380 = cos(qJ(1));
t534 = t375 * t369;
t419 = t471 - t534;
t519 = t313 * t371;
t237 = t376 * t519 + t380 * t419;
t543 = t370 * t376;
t218 = t237 * t378 + t374 * t543;
t399 = t371 * t419;
t236 = t313 * t380 - t376 * t399;
t368 = qJ(5) + qJ(6);
t363 = sin(t368);
t364 = cos(t368);
t130 = t218 * t364 - t236 * t363;
t289 = t313 * t370;
t260 = -t289 * t378 + t371 * t374;
t288 = t370 * t534 - t446;
t232 = -t376 * t419 + t380 * t519;
t541 = t370 * t380;
t214 = -t232 * t378 - t374 * t541;
t233 = t376 * t313 + t380 * t399;
t613 = t214 * t364 - t233 * t363;
t77 = -pkin(4) * t275 - t90;
t62 = pkin(5) * t172 + t77;
t616 = t62 * t104 + g(1) * t130 + g(2) * t613 - g(3) * (-t260 * t364 - t288 * t363) - t1;
t25 = qJD(6) * t424 - t372 * t69 - t592 * t429;
t615 = -t104 * t463 + t25 * t378;
t614 = t214 * t363 + t233 * t364;
t612 = t214 * t373 + t233 * t377;
t611 = t214 * t377 - t233 * t373;
t365 = t370 ^ 2;
t609 = 0.2e1 * t365;
t608 = -t46 * t244 - t9;
t607 = -t275 * t90 + t32;
t606 = t172 * t275;
t605 = t281 * t458;
t604 = t629 * t244;
t603 = t429 * t378;
t253 = t373 * t310 + t318;
t485 = t583 * t370;
t602 = (-t379 * t485 - t353) * qJD(2) - t370 * t512;
t517 = pkin(8) * t542 + t353;
t294 = t517 * qJD(2);
t139 = -t218 * t373 - t236 * t377;
t208 = t260 * t373 - t288 * t377;
t599 = -g(1) * t139 + g(2) * t612 + g(3) * t208;
t129 = -t218 * t363 - t236 * t364;
t500 = t592 * t39;
t13 = t372 * t31 + t500;
t2 = -qJD(6) * t13 - t372 * t7 + t592 * t6;
t598 = -t62 * t424 - g(1) * t129 + g(2) * t614 - g(3) * (-t260 * t363 + t288 * t364) + t2;
t597 = t174 * t631 + t69 * t537;
t596 = t239 * t424 - t25;
t134 = qJDD(6) + t135;
t539 = t372 * t373;
t423 = t592 * t377 - t539;
t296 = t423 * t374;
t595 = -t134 * t296 - t239 * t522;
t295 = t315 * t374;
t594 = t24 * t295 - t424 * t521;
t593 = t285 ^ 2;
t382 = qJD(1) ^ 2;
t591 = pkin(1) * t370;
t590 = pkin(5) * t373;
t530 = t376 * t379;
t532 = t375 * t380;
t304 = -t371 * t530 - t532;
t588 = g(1) * t304;
t587 = g(1) * t376;
t585 = g(3) * t379;
t584 = t222 * pkin(4);
t298 = t377 * t310;
t535 = t374 * t377;
t225 = -pkin(11) * t535 + t298 + (-pkin(5) - t548) * t378;
t245 = -pkin(11) * t537 + t253;
t141 = t592 * t225 - t372 * t245;
t582 = t141 * qJD(6) + t627 * t372 + t626 * t592;
t142 = t372 * t225 + t592 * t245;
t581 = -t142 * qJD(6) - t626 * t372 + t627 * t592;
t576 = t372 * t39;
t572 = -t253 * qJD(5) + t628;
t337 = t381 * t373;
t338 = t381 * t377;
t271 = t592 * t337 + t372 * t338;
t571 = t271 * qJD(6) + t624 * t372 + t625 * t592;
t272 = t372 * t337 - t592 * t338;
t570 = -t272 * qJD(6) - t625 * t372 + t624 * t592;
t113 = -t374 * t187 + t206 * t378;
t92 = pkin(4) * t285 - t113;
t569 = -pkin(5) * t631 + t358 * t510 - t92;
t264 = t354 + t405;
t277 = qJ(3) * t542 + t517;
t203 = t369 * t264 + t568 * t277;
t183 = pkin(9) * t371 + t203;
t351 = pkin(2) * t542;
t518 = -t288 * pkin(3) + t351;
t448 = -pkin(9) * t289 + t518;
t210 = -t448 - t591;
t117 = t378 * t183 + t374 * t210;
t102 = pkin(10) * t288 + t117;
t202 = t264 * t568 - t369 * t277;
t182 = -t371 * pkin(3) - t202;
t259 = -t289 * t374 - t371 * t378;
t115 = t259 * pkin(4) - t260 * pkin(10) + t182;
t54 = t377 * t102 + t373 * t115;
t565 = t135 * t377;
t564 = t172 * t244;
t563 = t174 * t172;
t562 = t174 * t244;
t561 = t174 * t281;
t560 = t222 * t374;
t555 = t246 * t281;
t554 = t246 * t285;
t552 = t393 * t246;
t551 = t393 * t285;
t549 = t285 * t281;
t547 = t363 * t378;
t546 = t364 * t378;
t545 = t365 * t382;
t544 = t370 * t375;
t538 = t373 * t135;
t533 = t375 * t376;
t527 = t379 * t380;
t525 = -t374 * t138 - t246 * t510;
t524 = -t315 * t246 - t258;
t523 = -t423 * t246 + t600 * t539 - t632;
t366 = t375 ^ 2;
t367 = t379 ^ 2;
t516 = t366 - t367;
t513 = qJD(2) * t375;
t498 = t379 * t545;
t497 = t371 * t527;
t494 = pkin(9) + t590;
t491 = t370 * t513;
t486 = t370 * t371 * t382;
t481 = pkin(1) * t609;
t478 = t379 * t506;
t475 = g(2) * t541 - g(3) * t371;
t469 = t174 * t511 + t378 * t69;
t53 = -t102 * t373 + t377 * t115;
t116 = -t374 * t183 + t210 * t378;
t467 = t232 * t374 - t378 * t541;
t347 = qJD(2) * t354;
t250 = t370 * t402 + t347;
t157 = t250 * t369 - t568 * t602;
t299 = pkin(2) * t540 - t485;
t465 = -t299 * t376 + t380 * t362;
t462 = t275 * t378;
t461 = t244 * t377;
t460 = pkin(2) * t491;
t457 = qJD(2) + 0.2e1 * t515;
t456 = t348 + t505;
t454 = t375 * t498;
t451 = t375 * t478;
t449 = -t91 + (t509 + t553) * pkin(5);
t447 = -t522 * t104 - t296 * t25;
t217 = t237 * t374 - t378 * t543;
t442 = -g(1) * t467 - g(2) * t217;
t441 = g(1) * t233 - g(2) * t236;
t440 = g(1) * t380 + g(2) * t376;
t439 = -t295 * t134 - t521 * t239;
t438 = t237 * pkin(3) + t465;
t435 = -t373 * t46 - t377 * t45;
t434 = t373 * t45 - t377 * t46;
t209 = t260 * t377 + t288 * t373;
t433 = -t299 * t380 - t362 * t376;
t361 = pkin(5) * t377 + pkin(4);
t432 = t361 * t378 - t374 * t381;
t333 = pkin(2) * t497;
t431 = -pkin(2) * t533 + t233 * pkin(3) + t333;
t430 = t285 * t458;
t158 = t250 * t568 + t602 * t369;
t283 = t369 * t491 - t370 * t445;
t284 = t370 * t397;
t207 = -pkin(3) * t284 + pkin(9) * t283 + t460;
t59 = -t374 * t158 - t183 * t510 + t207 * t378 - t210 * t511;
t428 = t378 * t222 - t275 * t619;
t101 = -pkin(4) * t288 - t116;
t42 = pkin(5) * t259 - pkin(11) * t209 + t53;
t47 = -pkin(11) * t208 + t54;
t19 = -t372 * t47 + t592 * t42;
t20 = t372 * t42 + t592 * t47;
t427 = pkin(3) * t232 + t433;
t30 = t459 - t584;
t425 = t630 * t244;
t121 = -t372 * t208 + t592 * t209;
t422 = -t244 * t508 - t538;
t420 = -pkin(10) * t135 + t244 * t77;
t58 = t378 * t158 - t183 * t511 + t374 * t207 + t210 * t510;
t51 = -pkin(10) * t284 + t58;
t200 = qJD(4) * t260 - t283 * t374;
t201 = -qJD(4) * t259 - t283 * t378;
t75 = pkin(4) * t200 - pkin(10) * t201 + t157;
t16 = -t102 * t509 + t115 * t508 + t373 * t75 + t377 * t51;
t416 = -g(1) * t543 + t475;
t415 = -t478 - t504;
t414 = t154 * t275 - t222 * t358;
t413 = g(1) * t217 - g(2) * t467 + g(3) * t259;
t412 = -g(1) * t218 - g(2) * t214 - g(3) * t260;
t411 = -g(1) * t237 + g(2) * t232 + g(3) * t289;
t410 = g(1) * t236 + g(2) * t233 - g(3) * t288;
t409 = t24 * t378 + t424 * t619;
t408 = -pkin(9) * t236 + t438;
t407 = t429 * t377;
t403 = -pkin(9) * t232 + t431;
t401 = -t30 + t413;
t52 = pkin(4) * t284 - t59;
t400 = t415 * pkin(8);
t394 = pkin(9) * t233 + t427;
t392 = -t172 * t629 + t374 * t407;
t391 = pkin(2) * t304 + t236 * pkin(3);
t17 = -qJD(5) * t54 - t373 * t51 + t377 * t75;
t389 = pkin(10) * qJD(5) * t244 - t401;
t388 = pkin(9) * t237 + t391;
t387 = qJD(4) * t275 * t358 + t410 + t82;
t386 = qJD(5) * t435 - t9 * t373 - t377 * t426;
t322 = t348 * t371;
t316 = -t351 - t591;
t308 = -pkin(8) * t544 + t354;
t305 = -t371 * t533 + t527;
t303 = -t371 * t532 - t530;
t302 = -t497 + t533;
t300 = (t358 + t590) * t374;
t293 = -pkin(8) * t491 + t347;
t292 = t517 * qJD(1);
t291 = -pkin(8) * t492 + t346;
t276 = t281 ^ 2;
t252 = -t358 * t536 + t298;
t242 = t370 * t400 + t417;
t241 = -pkin(8) * t450 + t495;
t140 = t218 * t377 - t236 * t373;
t120 = t592 * t208 + t209 * t372;
t100 = -qJD(5) * t208 + t201 * t377 - t284 * t373;
t99 = qJD(5) * t209 + t201 * t373 + t284 * t377;
t72 = pkin(5) * t208 + t101;
t36 = t121 * qJD(6) + t372 * t100 + t592 * t99;
t35 = -t592 * t100 + t208 * t482 + t209 * t507 + t372 * t99;
t34 = pkin(5) * t99 + t52;
t18 = -pkin(5) * t429 + t30;
t15 = t592 * t38 - t576;
t14 = -t372 * t38 - t500;
t12 = t592 * t31 - t576;
t11 = -pkin(11) * t99 + t16;
t10 = pkin(5) * t200 - pkin(11) * t100 + t17;
t4 = -t20 * qJD(6) + t592 * t10 - t372 * t11;
t3 = t19 * qJD(6) + t372 * t10 + t592 * t11;
t5 = [0, 0, 0, 0, 0, qJDD(1), -g(2) * t380 + t587, t440, 0, 0 (qJDD(1) * t366 + 0.2e1 * t451) * t365 (t375 * t503 - t506 * t516) * t609 (qJD(2) * t379 * t457 + t375 * t456) * t370 (qJDD(1) * t367 - 0.2e1 * t451) * t365 (t379 * t456 - t457 * t513) * t370, t322, -t294 * t458 + t308 * t348 + t242 * t371 - g(1) * t303 - g(2) * t305 + (-t479 + t503) * t481, -g(1) * t302 - g(2) * t304 - t241 * t371 - t293 * t458 - t348 * t517 + t415 * t481 ((-qJD(2) * t291 + qJDD(1) * t517 + t241 + (-qJD(2) * t308 + t293) * qJD(1)) * t379 + (-t292 * qJD(2) - qJDD(1) * t308 - t242) * t375 - t440) * t370, t241 * t517 + t292 * t293 + t242 * t308 - t291 * t294 + t365 * qJDD(1) * pkin(1) ^ 2 - g(1) * (-pkin(1) * t376 + pkin(8) * t541) - g(2) * (pkin(1) * t380 + pkin(8) * t543) -t224 * t289 + t283 * t285, t223 * t289 - t224 * t288 + t281 * t283 - t284 * t285, t224 * t371 - t283 * t458 - t289 * t348, t223 * t288 - t281 * t284, -t223 * t371 + t284 * t458 - t288 * t348, t322, -g(1) * t232 - g(2) * t237 - t157 * t458 + t202 * t348 + t316 * t223 + t265 * t288 + t281 * t460 - t301 * t284 + t88 * t371, -t158 * t458 - t203 * t348 + t316 * t224 - t265 * t289 - t301 * t283 - t285 * t460 - t89 * t371 + t441, -t157 * t285 - t158 * t281 + t166 * t283 + t167 * t284 - t202 * t224 - t203 * t223 - t288 * t89 + t289 * t88 - t370 * t440, -g(1) * t433 - g(2) * t465 - t166 * t157 + t167 * t158 + t88 * t202 + t89 * t203 + t265 * t316 + t301 * t460, -t137 * t260 - t201 * t393, t137 * t259 - t138 * t260 + t200 * t393 - t201 * t246, -t137 * t288 + t201 * t275 + t222 * t260 + t284 * t393, t138 * t259 + t200 * t246, -t138 * t288 - t200 * t275 - t222 * t259 + t246 * t284, t222 * t288 - t275 * t284, g(1) * t214 - g(2) * t218 + t116 * t222 + t138 * t182 + t154 * t200 + t157 * t246 + t259 * t82 + t275 * t59 - t284 * t90 - t288 * t459, -t117 * t222 - t137 * t182 + t154 * t201 - t157 * t393 + t260 * t82 - t275 * t58 + t284 * t91 - t288 * t32 - t442, t116 * t137 - t117 * t138 - t200 * t91 - t201 * t90 - t246 * t58 - t259 * t32 + t260 * t459 + t393 * t59 - t441, -g(1) * t394 - g(2) * t408 - t116 * t459 + t32 * t117 + t154 * t157 + t82 * t182 + t91 * t58 + t90 * t59, t100 * t174 - t209 * t69, -t100 * t172 - t174 * t99 + t69 * t208 + t209 * t429, t100 * t244 + t135 * t209 + t174 * t200 - t259 * t69, t172 * t99 - t208 * t429, -t208 * t135 - t172 * t200 - t99 * t244 + t259 * t429, t135 * t259 + t200 * t244, g(1) * t611 - g(2) * t140 - t101 * t429 + t53 * t135 + t17 * t244 + t52 * t172 + t45 * t200 + t30 * t208 + t9 * t259 + t77 * t99, -g(1) * t612 - g(2) * t139 + t77 * t100 - t101 * t69 - t54 * t135 - t16 * t244 + t52 * t174 - t46 * t200 + t30 * t209 + t426 * t259, -t45 * t100 - t16 * t172 - t17 * t174 + t208 * t426 - t9 * t209 + t429 * t54 - t46 * t99 + t53 * t69 + t442, -t426 * t54 + t46 * t16 + t9 * t53 + t45 * t17 + t30 * t101 + t77 * t52 - g(1) * (-pkin(4) * t214 + pkin(10) * t467 + t394) - g(2) * (pkin(4) * t218 + pkin(10) * t217 + t408) -t121 * t24 - t35 * t424, t104 * t35 + t120 * t24 - t121 * t25 - t36 * t424, t121 * t134 + t200 * t424 - t239 * t35 - t24 * t259, t104 * t36 + t120 * t25, -t104 * t200 - t120 * t134 - t239 * t36 - t25 * t259, t134 * t259 + t200 * t239, g(1) * t613 - g(2) * t130 + t34 * t104 + t12 * t200 + t18 * t120 + t19 * t134 + t2 * t259 + t4 * t239 + t72 * t25 + t62 * t36, -g(1) * t614 - g(2) * t129 - t1 * t259 + t18 * t121 - t13 * t200 - t20 * t134 - t3 * t239 - t72 * t24 + t34 * t424 - t62 * t35, -t1 * t120 - t104 * t3 + t12 * t35 - t121 * t2 - t13 * t36 + t19 * t24 - t20 * t25 - t4 * t424 + t442, t1 * t20 + t13 * t3 + t2 * t19 + t12 * t4 + t18 * t72 + t62 * t34 - g(1) * (-t214 * t361 + t233 * t494 - t381 * t467 + t427) - g(2) * (-t217 * t381 + t218 * t361 - t236 * t494 + t438); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t454, t516 * t545, t370 * t504 - t379 * t486, t454, t375 * t486 + t476, t348, t345 + t292 * t458 - t588 + g(2) * t302 + (-t480 + t545) * t375 * pkin(1) + (t400 - t585) * t370, pkin(1) * t498 + t291 * t458 + g(1) * t305 - g(2) * t303 + (pkin(8) * t506 + g(3)) * t544 - t495, 0, 0, -t549, -t276 + t593, t224 + t605, t549, t323 - t430 + (qJD(2) * t398 - t477) * t370, t348, t186 * t458 + t301 * t285 + (-t281 * t492 + t348 * t568) * pkin(2) - t410 + t88, t187 * t458 + t301 * t281 + (t285 * t492 - t348 * t369) * pkin(2) - t411 - t89 -(t167 - t186) * t285 + (-t166 + t187) * t281 + (-t223 * t369 - t224 * t568) * pkin(2), -g(2) * t333 + t166 * t186 - t167 * t187 + (t89 * t369 + t88 * t568 - t588 + g(2) * t533 + (-t301 * t514 - t585) * t370) * pkin(2), -t137 * t374 - t393 * t462 (-t137 - t555) * t378 + t623 + t525, t275 * t462 - t551 + t560, -t138 * t378 + t246 * t463, t428 - t554, t275 * t285, -t113 * t275 + t138 * t359 - t186 * t246 + t285 * t90 + t374 * t414 - t378 * t387, t114 * t275 - t137 * t359 + t186 * t393 - t285 * t91 + t374 * t387 + t378 * t414, -t113 * t393 + t114 * t246 + (-t138 * t358 - t281 * t90 + t32 + (-t358 * t393 - t90) * qJD(4)) * t378 + (-t137 * t358 - t281 * t91 + t459 + (t246 * t358 - t91) * qJD(4)) * t374 + t411, t82 * t359 - t91 * t114 - t90 * t113 - t154 * t186 - g(1) * t388 - g(2) * t403 - g(3) * t448 + (t32 * t378 + t459 * t374 + (-t374 * t91 - t378 * t90) * qJD(4)) * t358, t174 * t629 - t535 * t69, t392 + t597 (t561 + t565) * t374 + t604 + t469, -t172 * t631 - t429 * t537, -t603 + t425 + (t422 - t606) * t374, -t135 * t378 + t244 * t463, t252 * t135 - t92 * t172 - t77 * t211 + t572 * t244 + t411 * t373 + (-t9 + (t172 * t358 + t373 * t77) * qJD(4) - t410 * t377) * t378 + (t275 * t45 + t30 * t373 - t358 * t429 + t508 * t77) * t374, -t253 * t135 - t92 * t174 - t77 * t212 - t573 * t244 + t411 * t377 + (-t426 + (t174 * t358 + t377 * t77) * qJD(4) + t410 * t373) * t378 + (-t275 * t46 + t30 * t377 - t358 * t69 - t509 * t77) * t374, t253 * t429 + t252 * t69 + t46 * t211 + t45 * t212 - t572 * t174 - t573 * t172 + t435 * t510 + (qJD(5) * t434 + t373 * t426 - t9 * t377 - t410) * t374, -t426 * t253 + t9 * t252 - t77 * t92 - g(1) * (t236 * t444 + t388) - g(2) * (t233 * t444 + t403) - g(3) * (-t288 * t444 + t448) + t573 * t46 + t572 * t45 + (t30 * t374 + t510 * t77) * t358, -t24 * t296 + t424 * t522, t447 + t594, t409 - t595, t104 * t521 + t25 * t295, t439 + t615, -t134 * t378 + t239 * t463, t141 * t134 - t2 * t378 + t300 * t25 + t18 * t295 - g(1) * (t236 * t546 + t237 * t363) - g(2) * (-t232 * t363 + t233 * t546) - g(3) * (-t288 * t546 - t289 * t363) + t521 * t62 + t581 * t239 + t12 * t463 + t569 * t104, -t142 * t134 + t1 * t378 - t300 * t24 + t18 * t296 - g(1) * (-t236 * t547 + t237 * t364) - g(2) * (-t232 * t364 - t233 * t547) - g(3) * (t288 * t547 - t289 * t364) + t522 * t62 - t582 * t239 - t13 * t463 + t569 * t424, -t1 * t295 - t104 * t582 - t12 * t522 - t13 * t521 + t141 * t24 - t142 * t25 - t2 * t296 - t374 * t410 - t424 * t581, t1 * t142 + t2 * t141 + t18 * t300 - g(1) * (t236 * t432 + t237 * t494 + t391) - g(2) * (-t232 * t494 + t233 * t432 + t431) - g(3) * (-t288 * t432 - t289 * t494 + t518) + t569 * t62 + t582 * t13 + t581 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t430 + t223, t224 - t605, -t276 - t593, -t166 * t285 + t167 * t281 + (-t436 - t587) * t370 + t475 + t502, 0, 0, 0, 0, 0, 0, t428 + t554, -t275 ^ 2 * t378 - t551 - t560 (t137 - t555) * t378 - t623 + t525, t154 * t285 + t607 * t374 + t620 * t378 + t416, 0, 0, 0, 0, 0, 0, t603 + t425 + (t422 + t606) * t374 (t561 - t565) * t374 - t604 + t469, t392 - t597, t211 * t45 - t212 * t46 + (-qJD(4) * t434 - t30) * t378 + (t275 * t77 + t386) * t374 + t416, 0, 0, 0, 0, 0, 0, t439 - t615, t409 + t595, t447 - t594, t1 * t296 - t12 * t521 + t13 * t522 - t18 * t378 - t2 * t295 + t463 * t62 + t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t552, -t246 ^ 2 + t393 ^ 2, t246 * t275 - t137, t552, -t275 * t393 - t138, t222, t154 * t393 + t413 + t620, t154 * t246 - t412 - t607, 0, 0, t174 * t461 - t373 * t69 (-t69 - t564) * t377 + (t429 - t562) * t373, t174 * t393 + t244 * t461 + t538, t373 * t564 + t407, -t244 ^ 2 * t373 - t172 * t393 + t565, t244 * t393, -pkin(4) * t496 - t63 * t244 + t45 * t393 - t91 * t172 + t420 * t373 + (-t389 + t584) * t377, pkin(4) * t69 - t174 * t91 + t244 * t64 + t373 * t389 + t377 * t420 - t393 * t46, t64 * t172 + t63 * t174 + ((qJD(5) * t174 + t429) * pkin(10) + t622) * t377 + ((qJD(5) * t172 - t69) * pkin(10) + t608) * t373 + t412, -t45 * t63 - t46 * t64 - t77 * t91 + t401 * pkin(4) + (t386 + t412) * pkin(10), -t24 * t315 - t424 * t523, t104 * t523 - t24 * t423 - t25 * t315 + t424 * t524, t134 * t315 - t239 * t523 + t393 * t424, -t104 * t524 - t25 * t423, -t104 * t393 + t134 * t423 + t239 * t524, t239 * t393, t104 * t449 + t12 * t393 + t134 * t271 - t18 * t423 + t239 * t570 - t25 * t361 + t364 * t413 - t524 * t62, -t13 * t393 - t134 * t272 + t18 * t315 - t239 * t571 + t24 * t361 - t363 * t413 + t424 * t449 - t523 * t62, t1 * t423 - t104 * t571 + t12 * t523 + t13 * t524 - t2 * t315 + t24 * t271 - t25 * t272 - t424 * t570 + t412, t1 * t272 + t2 * t271 - t18 * t361 - g(1) * (-t217 * t361 - t218 * t381) - g(2) * (-t214 * t381 + t361 * t467) - g(3) * (-t259 * t361 - t260 * t381) + t449 * t62 + t571 * t13 + t570 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t563, -t172 ^ 2 + t174 ^ 2, -t69 + t564, -t563, t429 + t562, t135, -t77 * t174 + t599 - t608, g(1) * t140 + g(2) * t611 + g(3) * t209 + t77 * t172 - t622, 0, 0, t567, t618, t617, -t567, t596, t134, -t14 * t239 + (-t104 * t174 + t134 * t592 - t239 * t507) * pkin(5) + t598, t15 * t239 + (-t134 * t372 - t174 * t424 - t239 * t482) * pkin(5) + t616, t13 * t424 + t15 * t104 - t12 * t104 + t14 * t424 + (t592 * t24 - t25 * t372 + (-t104 * t592 + t372 * t424) * qJD(6)) * pkin(5), -t12 * t14 - t13 * t15 + (t1 * t372 + t2 * t592 - t62 * t174 + (-t12 * t372 + t13 * t592) * qJD(6) + t599) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t567, t618, t617, -t567, t596, t134, t13 * t239 + t598, t12 * t239 + t616, 0, 0;];
tau_reg  = t5;
