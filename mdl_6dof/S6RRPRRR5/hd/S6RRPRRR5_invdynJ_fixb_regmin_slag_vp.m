% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x33]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR5_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR5_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR5_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR5_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:46:52
% EndTime: 2019-03-09 13:47:19
% DurationCPUTime: 12.02s
% Computational Cost: add. (15085->663), mult. (42411->932), div. (0->0), fcn. (35967->16), ass. (0->337)
t294 = sin(pkin(12));
t295 = sin(pkin(6));
t301 = sin(qJ(2));
t412 = qJD(1) * t301;
t389 = t295 * t412;
t296 = cos(pkin(12));
t306 = cos(qJ(2));
t424 = t306 * t296;
t392 = t295 * t424;
t225 = qJD(1) * t392 - t294 * t389;
t221 = qJD(4) - t225;
t342 = t294 * t306 + t296 * t301;
t327 = qJD(1) * t342;
t228 = t295 * t327;
t299 = sin(qJ(5));
t304 = cos(qJ(5));
t305 = cos(qJ(4));
t170 = t225 * t299 * t305 - t304 * t228;
t407 = qJD(4) * t305;
t502 = -t299 * t407 + t170;
t425 = t304 * t305;
t171 = t225 * t425 + t228 * t299;
t300 = sin(qJ(4));
t405 = qJD(5) * t299;
t315 = -t300 * t405 + t304 * t407 - t171;
t297 = cos(pkin(6));
t472 = pkin(1) * t297;
t280 = t306 * t472;
t275 = qJD(1) * t280;
t468 = pkin(8) + qJ(3);
t382 = t468 * t301;
t360 = t295 * t382;
t214 = -qJD(1) * t360 + t275;
t431 = t297 * t301;
t279 = pkin(1) * t431;
t434 = t295 * t306;
t215 = (t434 * t468 + t279) * qJD(1);
t432 = t296 * t215;
t148 = t214 * t294 + t432;
t503 = -t148 + t221 * (pkin(4) * t300 - pkin(10) * t305);
t413 = qJD(1) * t297;
t364 = qJD(2) + t413;
t314 = -t305 * t228 - t300 * t364;
t135 = -t304 * t221 - t299 * t314;
t137 = t221 * t299 - t304 * t314;
t298 = sin(qJ(6));
t303 = cos(qJ(6));
t345 = t135 * t298 - t303 * t137;
t76 = t303 * t135 + t137 * t298;
t501 = t345 * t76;
t403 = qJD(6) * t298;
t429 = t300 * t304;
t430 = t299 * t300;
t478 = qJD(5) + qJD(6);
t460 = -t403 * t430 + (t429 * t478 - t502) * t303 + t315 * t298;
t404 = qJD(5) * t304;
t500 = t300 * t404 - t502;
t263 = t305 * t364;
t197 = t228 * t300 - t263;
t499 = t197 + t478;
t286 = pkin(2) * t306 + pkin(1);
t348 = t286 * qJDD(1);
t411 = qJD(2) * t301;
t388 = t295 * t411;
t359 = qJD(1) * t388;
t397 = pkin(2) * t359 + qJDD(3);
t498 = t295 * t348 - t397;
t408 = qJD(4) * t300;
t441 = t225 * t300;
t497 = -t408 + t441;
t496 = t345 ^ 2 - t76 ^ 2;
t302 = sin(qJ(1));
t426 = t302 * t306;
t307 = cos(qJ(1));
t427 = t301 * t307;
t243 = -t297 * t426 - t427;
t423 = t306 * t307;
t428 = t301 * t302;
t338 = t297 * t423 - t428;
t495 = -g(1) * t243 - g(2) * t338;
t402 = qJD(6) * t303;
t401 = qJD(1) * qJD(2);
t381 = t306 * t401;
t184 = -t294 * t359 + (qJDD(1) * t342 + t296 * t381) * t295;
t400 = qJDD(1) * t297;
t277 = qJDD(2) + t400;
t103 = qJD(4) * t263 + t305 * t184 - t228 * t408 + t300 * t277;
t398 = qJDD(1) * t306;
t378 = t295 * t398;
t259 = t296 * t378;
t326 = t342 * qJD(2);
t399 = qJDD(1) * t301;
t380 = t294 * t399;
t182 = qJDD(4) - t259 + (qJD(1) * t326 + t380) * t295;
t43 = t304 * t103 + t299 * t182 + t221 * t404 + t314 * t405;
t44 = qJD(5) * t137 + t103 * t299 - t304 * t182;
t13 = -t135 * t402 - t137 * t403 - t298 * t44 + t303 * t43;
t195 = qJD(5) + t197;
t192 = qJD(6) + t195;
t494 = t192 * t76 + t13;
t231 = t342 * t295;
t210 = t231 * t305 + t297 * t300;
t321 = t297 * pkin(2) - t360;
t200 = qJD(2) * pkin(2) + qJD(1) * t321 + t275;
t130 = t294 * t200 + t432;
t119 = pkin(9) * t364 + t130;
t356 = t286 * t295;
t240 = -qJD(1) * t356 + qJD(3);
t145 = -pkin(3) * t225 - pkin(9) * t228 + t240;
t65 = t305 * t119 + t300 * t145;
t52 = pkin(10) * t221 + t65;
t204 = t294 * t215;
t129 = t296 * t200 - t204;
t118 = -pkin(3) * t364 - t129;
t59 = t197 * pkin(4) + pkin(10) * t314 + t118;
t31 = t299 * t59 + t304 * t52;
t24 = -pkin(11) * t135 + t31;
t22 = t24 * t403;
t436 = t295 * t301;
t230 = t294 * t436 - t392;
t293 = qJ(5) + qJ(6);
t288 = sin(t293);
t289 = cos(t293);
t64 = -t300 * t119 + t145 * t305;
t51 = -pkin(4) * t221 - t64;
t39 = pkin(5) * t135 + t51;
t232 = t342 * t297;
t249 = t294 * t301 - t424;
t344 = t232 * t307 - t249 * t302;
t433 = t295 * t307;
t173 = -t300 * t433 + t305 * t344;
t330 = t297 * t249;
t187 = -t302 * t342 - t307 * t330;
t489 = t173 * t289 - t187 * t288;
t343 = -t232 * t302 - t249 * t307;
t435 = t295 * t302;
t176 = t300 * t435 + t305 * t343;
t190 = t302 * t330 - t307 * t342;
t98 = t176 * t289 - t190 * t288;
t493 = t39 * t76 + g(1) * t98 + g(2) * t489 - g(3) * (-t210 * t289 - t230 * t288) + t22;
t30 = -t299 * t52 + t304 * t59;
t23 = -pkin(11) * t137 + t30;
t18 = pkin(5) * t195 + t23;
t464 = t24 * t303;
t11 = t18 * t298 + t464;
t104 = -qJD(4) * t314 + t300 * t184 - t305 * t277;
t101 = qJDD(5) + t104;
t394 = pkin(1) * t398;
t274 = t297 * t394;
t395 = qJD(2) * t472;
t361 = qJD(1) * t395;
t374 = qJD(2) * t468;
t410 = qJD(3) * t301;
t124 = -t301 * t361 + pkin(2) * t277 + t274 + (-qJDD(1) * t382 + (-t306 * t374 - t410) * qJD(1)) * t295;
t318 = qJD(3) * t306 - t301 * t374;
t391 = pkin(8) * t378 + qJDD(1) * t279 + t306 * t361;
t140 = (qJ(3) * t398 + qJD(1) * t318) * t295 + t391;
t63 = t294 * t124 + t296 * t140;
t57 = pkin(9) * t277 + t63;
t183 = t259 + (-qJD(2) * t327 - t380) * t295;
t86 = -pkin(3) * t183 - pkin(9) * t184 - t498;
t332 = -t119 * t408 + t145 * t407 + t300 * t86 + t305 * t57;
t16 = pkin(10) * t182 + t332;
t62 = t124 * t296 - t294 * t140;
t56 = -pkin(3) * t277 - t62;
t28 = pkin(4) * t104 - pkin(10) * t103 + t56;
t7 = -qJD(5) * t31 - t299 * t16 + t304 * t28;
t4 = pkin(5) * t101 - pkin(11) * t43 + t7;
t337 = -t304 * t16 - t299 * t28 - t59 * t404 + t405 * t52;
t5 = -pkin(11) * t44 - t337;
t2 = -qJD(6) * t11 - t298 * t5 + t303 * t4;
t490 = t173 * t288 + t187 * t289;
t97 = -t176 * t288 - t190 * t289;
t492 = t39 * t345 - g(1) * t97 + g(2) * t490 - g(3) * (-t210 * t288 + t230 * t289) + t2;
t311 = qJD(6) * t345 - t298 * t43 - t303 * t44;
t367 = t221 * t300;
t491 = -t305 * t311 - t367 * t76;
t488 = t173 * t299 + t187 * t304;
t487 = t173 * t304 - t187 * t299;
t486 = -t192 * t345 + t311;
t283 = pkin(2) * t294 + pkin(9);
t440 = t283 * t299;
t485 = t304 * t503 + t408 * t440;
t484 = t135 * t221;
t252 = t298 * t304 + t299 * t303;
t234 = t252 * t300;
t482 = t315 * t195;
t415 = pkin(8) * t434 + t279;
t290 = t295 ^ 2;
t473 = pkin(1) * t290;
t480 = t297 * t415 + t301 * t473;
t284 = -pkin(2) * t296 - pkin(3);
t247 = -pkin(4) * t305 - pkin(10) * t300 + t284;
t149 = t214 * t296 - t204;
t165 = pkin(2) * t389 + pkin(3) * t228 - pkin(9) * t225;
t421 = t305 * t149 + t300 * t165;
t67 = pkin(10) * t228 + t421;
t479 = -t247 * t404 - t299 * t503 + t304 * t67;
t100 = qJDD(6) + t101;
t251 = t298 * t299 - t303 * t304;
t235 = t251 * t300;
t461 = t170 * t298 - t171 * t303 - t234 * t478 - t251 * t407;
t477 = t100 * t235 - t192 * t461;
t377 = qJD(6) * t18 + t5;
t476 = t298 * t4 + t303 * t377;
t475 = 0.2e1 * t290;
t308 = qJD(1) ^ 2;
t474 = pkin(10) + pkin(11);
t470 = g(3) * t306;
t213 = t280 + t321;
t222 = qJ(3) * t434 + t415;
t162 = t294 * t213 + t296 * t222;
t147 = pkin(9) * t297 + t162;
t169 = pkin(3) * t230 - pkin(9) * t231 - t356;
t422 = t305 * t147 + t300 * t169;
t74 = pkin(10) * t230 + t422;
t161 = t213 * t296 - t294 * t222;
t146 = -pkin(3) * t297 - t161;
t209 = t231 * t300 - t297 * t305;
t85 = pkin(4) * t209 - pkin(10) * t210 + t146;
t466 = t299 * t85 + t304 * t74;
t463 = t299 * t43;
t462 = t305 * t44;
t143 = t300 * t149;
t66 = -pkin(4) * t228 - t165 * t305 + t143;
t459 = pkin(5) * t500 + t283 * t407 - t66;
t123 = -pkin(4) * t314 + pkin(10) * t197;
t458 = t299 * t123 + t304 * t64;
t456 = t101 * t299;
t455 = t101 * t304;
t454 = t135 * t195;
t453 = t137 * t195;
t452 = t137 * t225;
t451 = t182 * t300;
t366 = t195 * t304;
t446 = t197 * t221;
t445 = t197 * t228;
t444 = t197 * t299;
t443 = t314 * t221;
t442 = t314 * t228;
t439 = t288 * t305;
t438 = t289 * t305;
t437 = t290 * t308;
t420 = t499 * t251;
t419 = t499 * t252;
t254 = t283 * t425;
t416 = t299 * t247 + t254;
t291 = t301 ^ 2;
t414 = -t306 ^ 2 + t291;
t409 = qJD(4) * t283;
t406 = qJD(5) * t195;
t393 = t306 * t437;
t390 = qJD(5) * t474;
t385 = t295 * t297 * t308;
t383 = t468 * t295;
t379 = t295 * t399;
t375 = -t299 * t74 + t304 * t85;
t373 = t137 * t408 - t305 * t43;
t371 = -t300 * t147 + t169 * t305;
t276 = t306 * t395;
t201 = t295 * t318 + t276;
t202 = -t295 * t410 + (-t306 * t383 - t279) * qJD(2);
t121 = t201 * t294 - t296 * t202;
t368 = t221 * t305;
t365 = t119 * t407 + t145 * t408 + t300 * t57 - t305 * t86;
t363 = qJD(2) + 0.2e1 * t413;
t362 = t277 + t400;
t358 = -t65 + (t405 + t444) * pkin(5);
t357 = -t234 * t100 - t192 * t460;
t354 = g(1) * t307 + g(2) * t302;
t353 = g(1) * t302 - g(2) * t307;
t196 = -pkin(11) * t430 + t416;
t352 = pkin(5) * t441 - pkin(11) * t171 + qJD(6) * t196 - t299 * t67 - (pkin(5) * t300 - pkin(11) * t425) * qJD(4) - (-t254 + (pkin(11) * t300 - t247) * t299) * qJD(5) - t485;
t237 = t304 * t247;
t185 = -pkin(11) * t429 + t237 + (-pkin(5) - t440) * t305;
t351 = -qJD(6) * t185 - (-t304 * t408 - t305 * t405) * t283 + t479 + t500 * pkin(11);
t269 = t474 * t299;
t350 = pkin(11) * t444 + qJD(6) * t269 + t299 * t390 + t458;
t115 = t304 * t123;
t270 = t474 * t304;
t349 = -pkin(5) * t314 + qJD(6) * t270 - t299 * t64 + t115 + (pkin(11) * t197 + t390) * t304;
t168 = t210 * t304 + t230 * t299;
t27 = pkin(5) * t209 - pkin(11) * t168 + t375;
t167 = t210 * t299 - t230 * t304;
t32 = -pkin(11) * t167 + t466;
t347 = t27 * t303 - t298 * t32;
t346 = t27 * t298 + t303 * t32;
t88 = t303 * t167 + t168 * t298;
t89 = -t167 * t298 + t168 * t303;
t122 = t201 * t296 + t202 * t294;
t226 = t295 * t326;
t227 = t249 * t295 * qJD(2);
t166 = pkin(2) * t388 + pkin(3) * t226 + pkin(9) * t227;
t341 = -t300 * t122 - t147 * t407 + t166 * t305 - t169 * t408;
t340 = t305 * t182 + t221 * t497;
t73 = -pkin(4) * t230 - t371;
t17 = -pkin(4) * t182 + t365;
t339 = t300 * t344 + t305 * t433;
t328 = t305 * t122 - t147 * t408 + t300 * t166 + t169 * t407;
t36 = pkin(10) * t226 + t328;
t159 = qJD(4) * t210 - t227 * t300;
t160 = -qJD(4) * t209 - t227 * t305;
t49 = pkin(4) * t159 - pkin(10) * t160 + t121;
t336 = t299 * t49 + t304 * t36 + t85 * t404 - t405 * t74;
t335 = t502 * t195;
t334 = -t195 * t404 - t456;
t333 = -pkin(10) * t101 + t195 * t51;
t329 = -t13 * t305 + t345 * t497;
t325 = t118 * t221 - t283 * t182;
t175 = -t300 * t343 + t305 * t435;
t324 = g(1) * t175 - g(2) * t339 - g(3) * t209;
t323 = -g(1) * t343 - g(2) * t344 - g(3) * t231;
t322 = g(1) * t190 + g(2) * t187 - g(3) * t230;
t317 = -t322 - t56;
t37 = -pkin(4) * t226 - t341;
t313 = -qJD(5) * t466 - t299 * t36 + t304 * t49;
t312 = t283 * t406 + t322;
t310 = pkin(10) * t406 + t17 + t324;
t287 = -pkin(5) * t304 - pkin(4);
t244 = -t297 * t428 + t423;
t242 = -t297 * t427 - t426;
t239 = (pkin(5) * t299 + t283) * t300;
t238 = pkin(2) * t431 - t383;
t106 = t176 * t304 - t190 * t299;
t105 = -t176 * t299 - t190 * t304;
t72 = -qJD(5) * t167 + t160 * t304 + t226 * t299;
t71 = qJD(5) * t168 + t160 * t299 - t226 * t304;
t46 = pkin(5) * t167 + t73;
t21 = qJD(6) * t89 + t298 * t72 + t303 * t71;
t20 = -qJD(6) * t88 - t298 * t71 + t303 * t72;
t19 = pkin(5) * t71 + t37;
t12 = pkin(5) * t44 + t17;
t10 = t18 * t303 - t24 * t298;
t9 = -pkin(11) * t71 + t336;
t8 = pkin(5) * t159 - pkin(11) * t72 + t313;
t1 = -t22 + t476;
t3 = [qJDD(1), t353, t354 (qJDD(1) * t291 + 0.2e1 * t301 * t381) * t290 (t301 * t398 - t401 * t414) * t475 (qJD(2) * t306 * t363 + t301 * t362) * t295 (t306 * t362 - t363 * t411) * t295, t277 * t297, t394 * t475 + (-pkin(8) * t436 + t280) * t277 + (-pkin(8) * t379 + t274) * t297 - g(1) * t242 - g(2) * t244 - t415 * qJD(2) ^ 2 - 0.2e1 * t480 * t401 -(-pkin(8) * t388 + t276) * t364 - t415 * t277 - (-pkin(8) * t359 + t391) * t297 + g(1) * t338 - g(2) * t243 + 0.2e1 * (-t381 - t399) * t473, t121 * t228 + t122 * t225 + t129 * t227 - t130 * t226 - t161 * t184 + t162 * t183 - t230 * t63 - t231 * t62 - t295 * t354, t63 * t162 + t130 * t122 + t62 * t161 - t129 * t121 - g(1) * (-t238 * t307 - t286 * t302) - g(2) * (-t238 * t302 + t286 * t307) + (pkin(2) * t240 * t411 + t286 * t498) * t295, t103 * t210 - t160 * t314, -t103 * t209 - t104 * t210 + t159 * t314 - t160 * t197, t103 * t230 + t160 * t221 + t182 * t210 - t226 * t314, -t104 * t230 - t159 * t221 - t182 * t209 - t197 * t226, t182 * t230 + t221 * t226, g(1) * t173 - g(2) * t176 + t146 * t104 + t118 * t159 + t121 * t197 + t182 * t371 + t56 * t209 + t221 * t341 + t64 * t226 - t230 * t365, -g(1) * t339 - g(2) * t175 + t146 * t103 + t118 * t160 - t121 * t314 - t182 * t422 + t56 * t210 - t221 * t328 - t65 * t226 - t230 * t332, t137 * t72 + t168 * t43, -t135 * t72 - t137 * t71 - t167 * t43 - t168 * t44, t101 * t168 + t137 * t159 + t195 * t72 + t209 * t43, -t101 * t167 - t135 * t159 - t195 * t71 - t209 * t44, t101 * t209 + t159 * t195, g(1) * t487 - g(2) * t106 + t375 * t101 + t37 * t135 + t30 * t159 + t17 * t167 + t313 * t195 + t7 * t209 + t73 * t44 + t51 * t71, -g(1) * t488 - g(2) * t105 - t466 * t101 + t37 * t137 - t31 * t159 + t17 * t168 - t336 * t195 + t337 * t209 + t73 * t43 + t51 * t72, t13 * t89 - t20 * t345, -t13 * t88 - t20 * t76 + t21 * t345 + t311 * t89, t100 * t89 + t13 * t209 - t159 * t345 + t192 * t20, -t100 * t88 - t159 * t76 - t192 * t21 + t209 * t311, t100 * t209 + t159 * t192 (-qJD(6) * t346 - t298 * t9 + t303 * t8) * t192 + t347 * t100 + t2 * t209 + t10 * t159 + t19 * t76 - t46 * t311 + t12 * t88 + t39 * t21 + g(1) * t489 - g(2) * t98 -(qJD(6) * t347 + t298 * t8 + t303 * t9) * t192 - t346 * t100 - t1 * t209 - t11 * t159 - t19 * t345 + t46 * t13 + t12 * t89 + t39 * t20 - g(1) * t490 - g(2) * t97; 0, 0, 0, -t301 * t393, t414 * t437, -t306 * t385 + t379, t301 * t385 + t378, t277, t274 + (-pkin(8) * t399 - t470) * t295 + t480 * t308 + t495, pkin(1) * t393 + (-pkin(8) * t389 + t275) * t413 + g(1) * t244 - g(2) * t242 + g(3) * t436 + t275 * qJD(2) - t391 (t130 - t148) * t228 + (t129 - t149) * t225 + (t183 * t294 - t184 * t296) * pkin(2), t129 * t148 - t130 * t149 + (t63 * t294 + t62 * t296 + (-t240 * t412 - t470) * t295 + t495) * pkin(2), t103 * t300 - t314 * t368 (t103 - t446) * t305 + (-t104 + t443) * t300, t221 * t368 + t442 + t451, t340 + t445, -t221 * t228, t284 * t104 + t143 * t221 - t148 * t197 - t64 * t228 + t325 * t300 + ((-t165 - t409) * t221 + t317) * t305, t284 * t103 + t421 * t221 + t65 * t228 + t148 * t314 + t325 * t305 + (t221 * t409 - t317) * t300, t137 * t315 + t429 * t43, t135 * t171 + t137 * t170 + (-t135 * t304 - t137 * t299) * t407 + (-t463 - t304 * t44 + (t135 * t299 - t137 * t304) * qJD(5)) * t300 (-t452 + t455) * t300 + t482 + t373, t462 + t335 + (t334 - t484) * t300, -t101 * t305 + t195 * t367, t237 * t101 - t66 * t135 - t51 * t170 + t485 * t195 + ((-qJD(5) * t247 + t67) * t195 + t323) * t299 + (-t101 * t440 - t7 + (t135 * t283 + t299 * t51) * qJD(4) - t312 * t304) * t305 + (t17 * t299 + t221 * t30 + t283 * t44 + t404 * t51) * t300, -t416 * t101 - t66 * t137 - t51 * t171 + t479 * t195 + t323 * t304 + (-t337 + (t137 * t283 + t304 * t51) * qJD(4) + t312 * t299) * t305 + (-t51 * t405 + t17 * t304 + t31 * t225 + t283 * t43 + (t283 * t366 - t31) * qJD(4)) * t300, -t13 * t235 - t345 * t461, -t13 * t234 - t235 * t311 + t345 * t460 - t461 * t76, t329 - t477, t357 + t491, -t100 * t305 + t192 * t367 (t185 * t303 - t196 * t298) * t100 - t2 * t305 - t239 * t311 + t12 * t234 - g(1) * (t190 * t438 + t288 * t343) - g(2) * (t187 * t438 + t288 * t344) - g(3) * (-t230 * t438 + t231 * t288) + t459 * t76 + t460 * t39 + (t298 * t351 - t303 * t352) * t192 + t10 * t367 -(t185 * t298 + t196 * t303) * t100 + t1 * t305 + t239 * t13 - t12 * t235 - g(1) * (-t190 * t439 + t289 * t343) - g(2) * (-t187 * t439 + t289 * t344) - g(3) * (t230 * t439 + t231 * t289) - t459 * t345 + t461 * t39 + (t298 * t352 + t303 * t351) * t192 - t11 * t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t225 ^ 2 - t228 ^ 2, -g(3) * t297 + t129 * t228 - t130 * t225 + (-t348 - t353) * t295 + t397, 0, 0, 0, 0, 0, t340 - t445, -t221 ^ 2 * t305 + t442 - t451, 0, 0, 0, 0, 0, -t462 + t335 + (t334 + t484) * t300 (-t452 - t455) * t300 - t482 + t373, 0, 0, 0, 0, 0, t357 - t491, t329 + t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314 * t197, -t197 ^ 2 + t314 ^ 2, t103 + t446, -t104 - t443, t182, t118 * t314 + t221 * t65 - t324 - t365, g(1) * t176 + g(2) * t173 + g(3) * t210 + t118 * t197 + t221 * t64 - t332, t137 * t366 + t463 (t43 - t454) * t304 + (-t44 - t453) * t299, t137 * t314 + t195 * t366 + t456, -t195 ^ 2 * t299 - t135 * t314 + t455, t195 * t314, -pkin(4) * t44 - t115 * t195 - t65 * t135 + t30 * t314 + (t64 * t195 + t333) * t299 - t310 * t304, -pkin(4) * t43 - t65 * t137 + t195 * t458 + t299 * t310 + t304 * t333 - t31 * t314, t13 * t252 + t345 * t420, -t13 * t251 + t252 * t311 + t345 * t419 + t420 * t76, t100 * t252 - t192 * t420 - t314 * t345, -t100 * t251 - t192 * t419 - t314 * t76, t192 * t314 (-t269 * t303 - t270 * t298) * t100 - t287 * t311 + t12 * t251 + t10 * t314 + t358 * t76 + t419 * t39 + (t298 * t350 - t303 * t349) * t192 - t324 * t289 -(-t269 * t298 + t270 * t303) * t100 + t287 * t13 + t12 * t252 - t11 * t314 - t358 * t345 - t420 * t39 + (t298 * t349 + t303 * t350) * t192 + t324 * t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137 * t135, -t135 ^ 2 + t137 ^ 2, t43 + t454, -t44 + t453, t101, -g(1) * t105 + g(2) * t488 + g(3) * t167 - t51 * t137 + t31 * t195 + t7, g(1) * t106 + g(2) * t487 + g(3) * t168 + t51 * t135 + t30 * t195 + t337, -t501, t496, t494, t486, t100 -(-t23 * t298 - t464) * t192 + (t100 * t303 - t137 * t76 - t192 * t403) * pkin(5) + t492 (-t192 * t24 - t4) * t298 + (t192 * t23 - t377) * t303 + (-t100 * t298 + t137 * t345 - t192 * t402) * pkin(5) + t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t501, t496, t494, t486, t100, t11 * t192 + t492, t10 * t192 - t476 + t493;];
tau_reg  = t3;
