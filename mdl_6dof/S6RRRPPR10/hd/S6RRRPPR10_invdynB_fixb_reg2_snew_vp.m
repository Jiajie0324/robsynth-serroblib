% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR10_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:06:18
% EndTime: 2019-05-07 07:07:49
% DurationCPUTime: 80.29s
% Computational Cost: add. (316560->980), mult. (694689->1536), div. (0->0), fcn. (547517->12), ass. (0->718)
t1138 = sin(qJ(1));
t1142 = cos(qJ(1));
t1132 = sin(pkin(6));
t1134 = cos(pkin(6));
t1137 = sin(qJ(2));
t1141 = cos(qJ(2));
t1277 = t1132 * t1141;
t1116 = qJD(1) * t1277 - qJD(3);
t1112 = t1116 ^ 2;
t1136 = sin(qJ(3));
t1140 = cos(qJ(3));
t1305 = qJD(1) * t1134;
t1252 = qJD(2) + t1305;
t1278 = t1132 * t1137;
t1264 = qJD(1) * t1278;
t1088 = t1136 * t1252 + t1140 * t1264;
t1333 = t1088 ^ 2;
t1041 = t1333 + t1112;
t1268 = qJDD(1) * t1132;
t1097 = -qJD(2) * t1264 + t1141 * t1268;
t1091 = -qJDD(3) + t1097;
t1086 = t1136 * t1264 - t1140 * t1252;
t1290 = t1086 * t1088;
t1156 = t1091 - t1290;
t1346 = t1156 * t1140;
t944 = t1041 * t1136 + t1346;
t1267 = t1137 * qJDD(1);
t1304 = qJD(1) * t1141;
t1096 = (qJD(2) * t1304 + t1267) * t1132;
t1123 = qJDD(1) * t1134 + qJDD(2);
t1192 = t1140 * t1096 + t1136 * t1123;
t1272 = qJD(3) - t1116;
t986 = t1086 * t1272 - t1192;
t1211 = t1137 * t944 + t1141 * t986;
t1347 = t1156 * t1136;
t943 = t1041 * t1140 - t1347;
t824 = t1132 * t943 + t1134 * t1211;
t879 = -t1137 * t986 + t1141 * t944;
t755 = t1138 * t879 + t1142 * t824;
t1413 = pkin(7) * t755;
t758 = t1138 * t824 - t1142 * t879;
t1412 = pkin(7) * t758;
t822 = t1132 * t1211 - t1134 * t943;
t1411 = pkin(8) * (t1132 * t822 + t1134 * t824);
t1410 = pkin(1) * t822;
t1409 = pkin(1) * t824;
t1407 = pkin(8) * t879;
t1083 = t1086 ^ 2;
t1034 = -t1112 - t1083;
t1155 = t1091 + t1290;
t1348 = t1140 * t1155;
t936 = t1034 * t1136 - t1348;
t1404 = pkin(2) * t936;
t1403 = pkin(2) * t943;
t1402 = pkin(9) * t936;
t1349 = t1136 * t1155;
t938 = t1034 * t1140 + t1349;
t1401 = pkin(9) * t938;
t1400 = pkin(9) * t943;
t1399 = pkin(9) * t944;
t1398 = t1132 * t936;
t1058 = -t1333 + t1112;
t950 = t1058 * t1140 - t1349;
t1396 = t1132 * t950;
t1059 = t1112 - t1083;
t952 = t1059 * t1136 + t1346;
t1395 = t1132 * t952;
t1394 = t1134 * t936;
t1392 = t1134 * t950;
t1391 = t1134 * t952;
t1390 = t1137 * t938;
t953 = t1058 * t1136 + t1348;
t1389 = t1137 * t953;
t956 = t1059 * t1140 - t1347;
t1388 = t1137 * t956;
t1387 = t1141 * t938;
t1386 = t1141 * t953;
t1385 = t1141 * t956;
t1332 = -2 * qJD(4);
t1011 = -t1333 - t1083;
t1384 = pkin(2) * t1011;
t1381 = t1011 * t1137;
t1380 = t1011 * t1141;
t1067 = t1086 * t1116;
t1159 = qJD(3) * t1086 - t1192;
t985 = t1067 - t1159;
t1250 = t1136 * t1096 - t1140 * t1123;
t1180 = qJD(3) * t1088 + t1250;
t1329 = pkin(2) * t1141;
t1248 = -pkin(9) * t1137 - t1329;
t1306 = qJD(1) * t1132;
t1095 = t1248 * t1306;
t1249 = t1252 ^ 2;
t1119 = g(1) * t1142 + g(2) * t1138;
t1143 = qJD(1) ^ 2;
t1092 = -pkin(1) * t1143 + pkin(8) * t1268 - t1119;
t1118 = t1138 * g(1) - t1142 * g(2);
t1326 = pkin(8) * t1132;
t1153 = qJDD(1) * pkin(1) + t1143 * t1326 + t1118;
t1151 = t1134 * t1153;
t1251 = t1137 * t1092 - t1141 * t1151;
t963 = (qJD(1) * t1095 * t1137 + g(3) * t1141) * t1132 - t1123 * pkin(2) - t1249 * pkin(9) + t1251;
t1145 = t1180 * pkin(3) - qJ(4) * t985 + t963;
t1379 = t1088 * t1332 + t1145;
t1281 = t1116 * t1140;
t1147 = -t1086 * t1281 + t1136 * t1180;
t1261 = t1137 * t1290;
t1339 = t1141 * t1147 - t1261;
t1282 = t1116 * t1136;
t1244 = -t1086 * t1282 - t1140 * t1180;
t1260 = t1141 * t1290;
t1341 = t1137 * t1147 + t1260;
t1358 = -t1132 * t1244 + t1134 * t1341;
t1378 = -t1138 * t1358 + t1142 * t1339;
t1026 = t1140 * t1159;
t1243 = t1088 * t1282 - t1026;
t1337 = t1141 * t1243 + t1261;
t1024 = t1136 * t1159;
t1245 = -t1088 * t1281 - t1024;
t1340 = t1137 * t1243 - t1260;
t1359 = -t1132 * t1245 + t1134 * t1340;
t1377 = -t1138 * t1359 + t1142 * t1337;
t1376 = t1138 * t1339 + t1142 * t1358;
t1375 = t1138 * t1337 + t1142 * t1359;
t1374 = -2 * qJD(5);
t1131 = sin(pkin(11));
t1133 = cos(pkin(11));
t1051 = -t1133 * t1086 - t1116 * t1131;
t1053 = t1086 * t1131 - t1116 * t1133;
t1003 = t1053 * t1051;
t1345 = -t1003 - t1159;
t1373 = t1131 * t1345;
t1372 = t1133 * t1345;
t1135 = sin(qJ(6));
t1028 = qJDD(6) - t1159;
t1139 = cos(qJ(6));
t992 = t1139 * t1051 + t1053 * t1135;
t994 = -t1051 * t1135 + t1053 * t1139;
t909 = t994 * t992;
t1355 = t1028 - t909;
t1371 = t1135 * t1355;
t1343 = -t1333 + t1083;
t1370 = t1137 * t1343;
t1367 = t1139 * t1355;
t1366 = t1141 * t1343;
t1363 = -t1159 - t1067;
t1270 = t1133 * t1091 - t1131 * t1180;
t1294 = t1051 * t1088;
t1362 = t1270 - t1294;
t1038 = pkin(3) * t1086 - qJ(4) * t1088;
t1146 = -g(3) * t1278 + t1137 * t1151;
t964 = t1123 * pkin(9) - t1249 * pkin(2) + (t1095 * t1306 + t1092) * t1141 + t1146;
t1201 = t1252 * qJD(1);
t1181 = t1137 * t1201;
t1182 = t1141 * t1201;
t1325 = t1134 * g(3);
t965 = -t1097 * pkin(2) - t1096 * pkin(9) - t1325 + (pkin(2) * t1181 - pkin(9) * t1182 - t1153) * t1132;
t1323 = -t1136 * t964 + t1140 * t965;
t1188 = t1091 * pkin(3) - t1112 * qJ(4) + t1088 * t1038 + qJDD(4) - t1323;
t766 = pkin(4) * t1363 + t1155 * qJ(5) + t1188;
t1056 = pkin(4) * t1088 + qJ(5) * t1116;
t1255 = -pkin(3) * t1116 + t1332;
t776 = -t1083 * pkin(4) + t1250 * qJ(5) + (qJ(5) * qJD(3) - t1056 + t1255) * t1088 + t1145;
t1344 = t1053 * t1374 - t1131 * t776 + t1133 * t766;
t701 = t1051 * t1374 + t1131 * t766 + t1133 * t776;
t635 = -t1131 * t1344 + t1133 * t701;
t1361 = t1132 * t1340 + t1134 * t1245;
t1360 = t1132 * t1341 + t1134 * t1244;
t634 = t1131 * t701 + t1133 * t1344;
t1177 = (t1086 * t1136 + t1088 * t1140) * t1116;
t1178 = (t1086 * t1140 - t1088 * t1136) * t1116;
t1335 = -t1132 * t1177 + (t1091 * t1141 + t1137 * t1178) * t1134;
t1338 = -t1091 * t1137 + t1141 * t1178;
t1357 = t1138 * t1338 + t1142 * t1335;
t1356 = -t1138 * t1335 + t1142 * t1338;
t1128 = t1132 ^ 2;
t1279 = t1128 * t1143;
t1354 = t1128 * (-t1134 * t1143 + t1201);
t1336 = t1091 * t1277 + t1134 * t1177 + t1178 * t1278;
t990 = t992 ^ 2;
t991 = t994 ^ 2;
t1050 = t1051 ^ 2;
t1334 = t1053 ^ 2;
t1081 = qJD(6) + t1088;
t1078 = t1081 ^ 2;
t1331 = pkin(3) + qJ(5);
t1330 = pkin(2) * t1137;
t1328 = pkin(3) * t1136;
t1327 = pkin(3) * t1140;
t1322 = t1091 * qJ(4);
t678 = pkin(5) * t1345 + pkin(10) * t1362 + t1344;
t1000 = t1091 * t1131 + t1133 * t1180;
t1013 = pkin(5) * t1088 - pkin(10) * t1053;
t682 = -pkin(5) * t1050 + pkin(10) * t1000 - t1013 * t1088 + t701;
t626 = t1135 * t682 - t1139 * t678;
t627 = t1135 * t678 + t1139 * t682;
t591 = t1135 * t627 - t1139 * t626;
t1321 = t1131 * t591;
t888 = t1136 * t965 + t1140 * t964;
t1154 = t1112 * pkin(3) + t1086 * t1038 - t888;
t775 = -t1322 + qJDD(5) - t1180 * pkin(4) - t1083 * qJ(5) + (t1332 - t1056) * t1116 - t1154;
t1319 = t1131 * t775;
t930 = t1003 - t1159;
t1318 = t1131 * t930;
t1317 = t1133 * t591;
t1315 = t1133 * t775;
t1314 = t1133 * t930;
t736 = -t1000 * pkin(5) - t1050 * pkin(10) + t1053 * t1013 + t775;
t1313 = t1135 * t736;
t867 = t1028 + t909;
t1312 = t1135 * t867;
t1311 = t1136 * t963;
t1310 = t1139 * t736;
t1309 = t1139 * t867;
t1308 = t1140 * t963;
t1068 = t1116 * t1088;
t978 = -t1068 + t1180;
t1307 = t1140 * t978;
t1293 = t1053 * t1088;
t1292 = t1081 * t1135;
t1291 = t1081 * t1139;
t1289 = t1088 * t1131;
t1288 = t1088 * t1133;
t1115 = t1141 * t1137 * t1279;
t1093 = -t1115 + t1123;
t1286 = t1093 * t1137;
t1285 = t1093 * t1141;
t1094 = t1115 + t1123;
t1284 = t1094 * t1137;
t1283 = t1094 * t1141;
t1280 = t1123 * t1132;
t1070 = t1132 * t1153 + t1325;
t1275 = t1137 * t1070;
t1274 = t1141 * t1070;
t1273 = -qJD(3) - t1116;
t1271 = qJD(6) + t1081;
t1129 = t1137 ^ 2;
t1130 = t1141 ^ 2;
t1269 = t1129 + t1130;
t1266 = t1136 * t909;
t1265 = t1140 * t909;
t1263 = t1136 * t1003;
t1262 = t1140 * t1003;
t1259 = t1129 * t1279;
t1258 = t1130 * t1279;
t1257 = -t1333 - t1334;
t1256 = qJ(4) * t1136 + pkin(2);
t592 = t1135 * t626 + t1139 * t627;
t784 = -t1136 * t1323 + t1140 * t888;
t1253 = -t1139 * t1000 - t1135 * t1270;
t1072 = -t1118 * t1138 - t1142 * t1119;
t1114 = qJDD(1) * t1142 - t1138 * t1143;
t1247 = -pkin(7) * t1114 - g(3) * t1138;
t1242 = -t1270 - t1294;
t1079 = -t1259 - t1249;
t1037 = -t1079 * t1137 - t1285;
t1240 = pkin(8) * t1037 - t1275;
t1101 = -t1249 - t1258;
t1048 = t1101 * t1141 - t1284;
t1239 = pkin(8) * t1048 + t1274;
t1161 = (-qJD(6) + t1081) * t994 - t1253;
t1200 = t1135 * t1000 - t1139 * t1270;
t849 = -qJD(6) * t992 + t1200;
t948 = t1081 * t992;
t806 = t849 + t948;
t1238 = t1135 * t1161 - t1139 * t806;
t931 = -t991 - t1078;
t1237 = -t1139 * t931 + t1312;
t893 = -t1078 - t990;
t1236 = t1135 * t893 + t1367;
t783 = t1136 * t888 + t1140 * t1323;
t564 = t1131 * t592 + t1317;
t562 = t1136 * t564 + t1140 * t736;
t565 = t1133 * t592 - t1321;
t1235 = t1137 * t562 - t1141 * t565;
t630 = t1136 * t634 + t1140 * t775;
t1234 = t1137 * t630 - t1141 * t635;
t723 = t1135 * t806 + t1139 * t1161;
t659 = t1131 * t723 + t1133 * t1238;
t850 = -t990 - t991;
t644 = t1136 * t659 + t1140 * t850;
t661 = -t1131 * t1238 + t1133 * t723;
t1233 = t1137 * t644 - t1141 * t661;
t802 = t1271 * t994 + t1253;
t805 = t849 - t948;
t721 = -t1135 * t802 + t1139 * t805;
t722 = -t1135 * t805 - t1139 * t802;
t658 = -t1131 * t722 - t1133 * t721;
t908 = t991 - t990;
t651 = -t1136 * t658 + t1140 * t908;
t660 = t1131 * t721 - t1133 * t722;
t1232 = t1137 * t651 + t1141 * t660;
t778 = t1139 * t893 - t1371;
t712 = t1131 * t778 + t1133 * t1236;
t674 = t1136 * t712 + t1140 * t802;
t713 = -t1131 * t1236 + t1133 * t778;
t1231 = t1137 * t674 - t1141 * t713;
t808 = -t1135 * t931 - t1309;
t719 = t1131 * t808 - t1133 * t1237;
t807 = -t1271 * t992 + t1200;
t684 = t1136 * t719 + t1140 * t807;
t720 = t1131 * t1237 + t1133 * t808;
t1230 = t1137 * t684 - t1141 * t720;
t946 = t990 - t1078;
t819 = t1135 * t946 + t1309;
t821 = t1139 * t946 - t1312;
t730 = -t1131 * t821 - t1133 * t819;
t690 = -t1136 * t730 + t1140 * t1161;
t732 = t1131 * t819 - t1133 * t821;
t1229 = t1137 * t690 + t1141 * t732;
t947 = -t991 + t1078;
t818 = t1139 * t947 + t1371;
t820 = -t1135 * t947 + t1367;
t729 = -t1131 * t820 - t1133 * t818;
t691 = -t1136 * t729 + t1140 * t806;
t731 = t1131 * t818 - t1133 * t820;
t1228 = t1137 * t691 + t1141 * t731;
t848 = -qJD(6) * t994 - t1253;
t796 = t1139 * t848 + t1292 * t992;
t797 = -t1135 * t848 + t1291 * t992;
t714 = -t1131 * t797 - t1133 * t796;
t705 = -t1136 * t714 - t1265;
t716 = t1131 * t796 - t1133 * t797;
t1227 = t1137 * t705 + t1141 * t716;
t798 = t1135 * t849 + t1291 * t994;
t799 = t1139 * t849 - t1292 * t994;
t715 = -t1131 * t799 - t1133 * t798;
t706 = -t1136 * t715 + t1265;
t717 = t1131 * t798 - t1133 * t799;
t1226 = t1137 * t706 + t1141 * t717;
t1148 = 0.2e1 * qJD(4) * t1116 + t1154;
t831 = -t1148 - t1322;
t742 = t1136 * t1188 + t1140 * t831;
t839 = t1088 * t1255 + t1145;
t1225 = t1137 * t742 - t1141 * t839;
t872 = (-t1135 * t992 - t1139 * t994) * t1081;
t873 = (t1135 * t994 - t1139 * t992) * t1081;
t767 = -t1131 * t873 - t1133 * t872;
t762 = t1028 * t1140 - t1136 * t767;
t768 = t1131 * t872 - t1133 * t873;
t1224 = t1137 * t762 + t1141 * t768;
t1179 = t1000 + t1293;
t841 = t1131 * t1179 + t1133 * t1362;
t940 = -t1050 - t1334;
t782 = t1136 * t841 + t1140 * t940;
t843 = -t1131 * t1362 + t1133 * t1179;
t1223 = t1137 * t782 - t1141 * t843;
t1222 = t1137 * t784 - t1141 * t963;
t957 = -t1333 - t1050;
t857 = t1131 * t957 + t1372;
t923 = -t1000 + t1293;
t786 = t1136 * t857 + t1140 * t923;
t858 = t1133 * t957 - t1373;
t1221 = t1137 * t786 - t1141 * t858;
t1002 = -t1050 + t1334;
t840 = t1131 * t923 - t1133 * t1242;
t792 = t1002 * t1140 - t1136 * t840;
t842 = t1131 * t1242 + t1133 * t923;
t1220 = t1137 * t792 + t1141 * t842;
t869 = t1133 * t1257 - t1318;
t795 = t1136 * t869 + t1140 * t1242;
t871 = -t1131 * t1257 - t1314;
t1219 = t1137 * t795 - t1141 * t871;
t1020 = t1050 - t1333;
t883 = -t1020 * t1131 - t1314;
t812 = -t1136 * t883 + t1140 * t1179;
t885 = -t1020 * t1133 + t1318;
t1218 = t1137 * t812 + t1141 * t885;
t1021 = t1333 - t1334;
t882 = -t1021 * t1133 - t1373;
t813 = -t1136 * t882 - t1140 * t1362;
t884 = t1021 * t1131 - t1372;
t1217 = t1137 * t813 + t1141 * t884;
t910 = -t1000 * t1133 - t1051 * t1289;
t861 = -t1136 * t910 - t1262;
t911 = t1000 * t1131 - t1051 * t1288;
t1216 = t1137 * t861 + t1141 * t911;
t912 = -t1053 * t1288 + t1131 * t1270;
t862 = -t1136 * t912 + t1262;
t913 = t1053 * t1289 + t1133 * t1270;
t1215 = t1137 * t862 + t1141 * t913;
t934 = (t1051 * t1131 + t1053 * t1133) * t1088;
t895 = -t1136 * t934 - t1026;
t935 = (t1051 * t1133 - t1053 * t1131) * t1088;
t1214 = t1137 * t895 + t1141 * t935;
t980 = -t1088 * t1272 - t1250;
t1213 = t1141 * t980 + t1390;
t1212 = t1141 * t978 - t1390;
t983 = t1086 * t1273 + t1192;
t1209 = t1141 * t983 + t1389;
t1208 = -t1141 * t1363 - t1389;
t979 = t1088 * t1273 - t1250;
t1207 = -t1141 * t979 - t1388;
t981 = -t1068 - t1180;
t1206 = t1141 * t981 + t1388;
t900 = t1136 * t983 + t1140 * t979;
t1205 = t1137 * t900 - t1380;
t903 = t1136 * t1363 + t1140 * t981;
t1204 = t1137 * t903 - t1380;
t901 = -t1136 * t985 + t1140 * t980;
t1203 = t1137 * t901 + t1366;
t902 = t1136 * t986 - t1307;
t1202 = t1137 * t902 + t1366;
t1035 = g(3) * t1277 + t1251;
t1036 = t1141 * t1092 + t1146;
t1199 = -t1141 * t1035 + t1137 * t1036;
t941 = t1035 * t1137 + t1036 * t1141;
t1105 = t1132 * t1182;
t1063 = t1105 + t1096;
t1104 = t1132 * t1181;
t1066 = t1097 - t1104;
t1198 = t1063 * t1141 + t1066 * t1137;
t1064 = -t1105 + t1096;
t1065 = t1097 + t1104;
t1197 = -t1064 * t1141 + t1065 * t1137;
t1196 = t1079 * t1141 - t1286;
t1100 = -t1249 + t1258;
t1195 = t1100 * t1137 + t1285;
t1099 = t1249 - t1259;
t1194 = t1099 * t1141 + t1284;
t1193 = t1101 * t1137 + t1283;
t1071 = t1118 * t1142 - t1119 * t1138;
t1183 = t1132 * t1201;
t583 = -pkin(5) * t736 + pkin(10) * t592;
t544 = pkin(4) * t736 + pkin(10) * t1321 - t1133 * t583 - t1331 * t565;
t545 = pkin(4) * t564 + pkin(5) * t591 - qJ(4) * t565;
t561 = t1136 * t736 - t1140 * t564;
t533 = -pkin(9) * t561 - t1136 * t544 + t1140 * t545;
t537 = -pkin(2) * t561 + pkin(10) * t1317 - qJ(4) * t736 + t1131 * t583 + t1331 * t564;
t550 = t1137 * t565 + t1141 * t562;
t1176 = pkin(8) * t550 + t1137 * t533 + t1141 * t537;
t578 = -pkin(5) * t850 + pkin(10) * t723 + t592;
t580 = -pkin(10) * t1238 - t591;
t552 = pkin(4) * t850 - t1131 * t580 - t1133 * t578 - t1331 * t661;
t601 = pkin(4) * t659 + pkin(5) * t1238 - qJ(4) * t661;
t643 = t1136 * t850 - t1140 * t659;
t549 = -pkin(9) * t643 - t1136 * t552 + t1140 * t601;
t551 = -pkin(2) * t643 - qJ(4) * t850 + t1131 * t578 - t1133 * t580 + t1331 * t659;
t605 = t1137 * t661 + t1141 * t644;
t1175 = pkin(8) * t605 + t1137 * t549 + t1141 * t551;
t663 = -pkin(5) * t802 + pkin(10) * t778 - t1310;
t685 = -pkin(10) * t1236 + t1313;
t593 = pkin(4) * t802 - t1131 * t685 - t1133 * t663 - t1331 * t713;
t594 = pkin(4) * t712 + pkin(5) * t1236 - qJ(4) * t713 - t626;
t673 = t1136 * t802 - t1140 * t712;
t558 = -pkin(9) * t673 - t1136 * t593 + t1140 * t594;
t577 = -pkin(2) * t673 - qJ(4) * t802 + t1131 * t663 - t1133 * t685 + t1331 * t712;
t633 = t1137 * t713 + t1141 * t674;
t1174 = pkin(8) * t633 + t1137 * t558 + t1141 * t577;
t598 = pkin(4) * t775 - t1331 * t635;
t600 = pkin(4) * t634 - qJ(4) * t635;
t629 = t1136 * t775 - t1140 * t634;
t560 = -pkin(9) * t629 - t1136 * t598 + t1140 * t600;
t573 = -pkin(2) * t629 - qJ(4) * t775 + t1331 * t634;
t597 = t1137 * t635 + t1141 * t630;
t1173 = pkin(8) * t597 + t1137 * t560 + t1141 * t573;
t669 = -pkin(5) * t807 + pkin(10) * t808 + t1313;
t695 = pkin(10) * t1237 + t1310;
t595 = pkin(4) * t807 - t1131 * t695 - t1133 * t669 - t1331 * t720;
t596 = pkin(4) * t719 - pkin(5) * t1237 - qJ(4) * t720 - t627;
t683 = t1136 * t807 - t1140 * t719;
t563 = -pkin(9) * t683 - t1136 * t595 + t1140 * t596;
t584 = -pkin(2) * t683 - qJ(4) * t807 + t1131 * t669 - t1133 * t695 + t1331 * t719;
t639 = t1137 * t720 + t1141 * t684;
t1172 = pkin(8) * t639 + t1137 * t563 + t1141 * t584;
t621 = pkin(4) * t940 - t1331 * t843 - t635;
t746 = pkin(4) * t841 - qJ(4) * t843;
t781 = t1136 * t940 - t1140 * t841;
t602 = -pkin(9) * t781 - t1136 * t621 + t1140 * t746;
t610 = -pkin(2) * t781 - qJ(4) * t940 + t1331 * t841 + t634;
t724 = t1137 * t843 + t1141 * t782;
t1171 = pkin(8) * t724 + t1137 * t602 + t1141 * t610;
t667 = pkin(4) * t857 - qJ(4) * t858 + t1344;
t686 = pkin(4) * t923 - t1331 * t858 + t1315;
t785 = t1136 * t923 - t1140 * t857;
t613 = -pkin(9) * t785 - t1136 * t686 + t1140 * t667;
t662 = -pkin(2) * t785 - qJ(4) * t923 + t1331 * t857 - t1319;
t738 = t1137 * t858 + t1141 * t786;
t1170 = pkin(8) * t738 + t1137 * t613 + t1141 * t662;
t670 = pkin(4) * t869 - qJ(4) * t871 - t701;
t694 = pkin(4) * t1242 - t1331 * t871 - t1319;
t794 = t1136 * t1242 - t1140 * t869;
t616 = -pkin(9) * t794 - t1136 * t694 + t1140 * t670;
t668 = -pkin(2) * t794 - qJ(4) * t1242 + t1331 * t869 - t1315;
t744 = t1137 * t871 + t1141 * t795;
t1169 = pkin(8) * t744 + t1137 * t616 + t1141 * t668;
t741 = t1136 * t831 - t1140 * t1188;
t675 = -pkin(2) * t741 + pkin(3) * t1188 - qJ(4) * t831;
t676 = -pkin(9) * t741 + (-qJ(4) * t1140 + t1328) * t839;
t709 = t1137 * t839 + t1141 * t742;
t1168 = pkin(8) * t709 + t1137 * t676 + t1141 * t675;
t793 = -pkin(3) * t1011 + t831;
t801 = -qJ(4) * t1011 + t1188;
t896 = t1136 * t979 - t1140 * t983;
t702 = -pkin(9) * t896 - t1136 * t793 + t1140 * t801;
t809 = -pkin(2) * t896 + pkin(3) * t983 - qJ(4) * t979;
t851 = t1141 * t900 + t1381;
t1167 = pkin(8) * t851 + t1137 * t702 + t1141 * t809;
t790 = (t978 - t1068) * pkin(3) + t1379;
t743 = qJ(4) * t1307 - t1136 * t790 + t1402;
t754 = -pkin(3) * t1155 + qJ(4) * t1034 - t1188 + t1404;
t877 = -t1137 * t978 - t1387;
t1166 = pkin(8) * t877 + t1137 * t743 + t1141 * t754;
t789 = pkin(3) * t1068 - qJ(4) * t986 - t1379;
t745 = t1140 * t789 + t1328 * t986 - t1400;
t759 = -t1403 - pkin(3) * t1041 + (t1156 + t1091) * qJ(4) + t1148;
t1165 = t1137 * t745 + t1141 * t759 - t1407;
t827 = -t1323 - t1404;
t870 = t1311 - t1402;
t876 = -t1137 * t980 + t1387;
t1164 = pkin(8) * t876 + t1137 * t870 + t1141 * t827;
t830 = t888 + t1403;
t878 = t1308 + t1400;
t1163 = t1137 * t878 + t1141 * t830 + t1407;
t1004 = t1064 * t1137 + t1065 * t1141;
t1162 = pkin(8) * t1004 + t941;
t899 = t1136 * t981 - t1140 * t1363;
t747 = -pkin(9) * t899 - t783;
t852 = t1141 * t903 + t1381;
t1160 = pkin(8) * t852 + t1137 * t747 - t1329 * t899;
t763 = t1137 * t963 + t1141 * t784;
t1157 = pkin(8) * t763 + t1248 * t783;
t1150 = t1132 * t1279 + t1134 * t1183;
t1113 = qJDD(1) * t1138 + t1142 * t1143;
t1103 = t1269 * t1279;
t1102 = (t1129 - t1130) * t1279;
t1098 = -pkin(7) * t1113 + g(3) * t1142;
t1069 = t1252 * t1269 * t1306;
t1062 = (t1267 + (0.2e1 * qJD(2) + t1305) * t1304) * t1132;
t1055 = t1141 * t1096 - t1129 * t1183;
t1054 = -t1137 * t1097 - t1130 * t1183;
t1047 = t1100 * t1141 - t1286;
t1046 = -t1099 * t1137 + t1283;
t1033 = (t1134 * t1096 + t1141 * t1150) * t1137;
t1032 = (t1134 * t1097 - t1137 * t1150) * t1141;
t1005 = -t1063 * t1137 + t1066 * t1141;
t999 = t1132 * t1066 + t1134 * t1193;
t998 = -t1132 * t1065 + t1134 * t1195;
t997 = -t1132 * t1064 + t1134 * t1194;
t996 = -t1134 * t1066 + t1132 * t1193;
t977 = -t1132 * t1062 + t1134 * t1196;
t976 = t1134 * t1062 + t1132 * t1196;
t962 = -t1132 * t1102 + t1134 * t1198;
t961 = t1132 * t1103 + t1134 * t1197;
t960 = -t1134 * t1103 + t1132 * t1197;
t933 = t1048 * t1142 - t1138 * t999;
t932 = t1048 * t1138 + t1142 * t999;
t918 = t1037 * t1142 - t1138 * t977;
t917 = t1037 * t1138 + t1142 * t977;
t915 = t1132 * t1070 + t1134 * t1199;
t914 = -t1134 * t1070 + t1132 * t1199;
t905 = t1004 * t1142 - t1138 * t961;
t904 = t1004 * t1138 + t1142 * t961;
t898 = -t1136 * t978 - t1140 * t986;
t897 = t1136 * t980 + t1140 * t985;
t894 = t1140 * t934 - t1024;
t892 = -t1137 * t981 + t1385;
t891 = t1137 * t979 - t1385;
t890 = t1137 * t1363 - t1386;
t889 = -t1137 * t983 + t1386;
t881 = -t1275 + (-t1132 * t996 - t1134 * t999) * pkin(8);
t875 = -t1274 + (-t1132 * t976 - t1134 * t977) * pkin(8);
t874 = -pkin(1) * t996 + t1132 * t1035 + t1134 * t1239;
t865 = t1141 * t902 - t1370;
t864 = t1141 * t901 - t1370;
t863 = -pkin(1) * t976 + t1132 * t1036 + t1134 * t1240;
t860 = t1140 * t912 + t1263;
t859 = t1140 * t910 - t1263;
t847 = pkin(8) * t1134 * t941 - pkin(1) * t914;
t846 = -t1138 * t915 + t1142 * t941;
t845 = t1138 * t941 + t1142 * t915;
t844 = -pkin(1) * t960 + t1134 * t1162;
t837 = pkin(2) * t986 + t1311 + t1399;
t836 = t1134 * t1206 - t1395;
t835 = t1134 * t1207 + t1395;
t834 = t1134 * t1208 - t1396;
t833 = t1134 * t1209 + t1396;
t832 = (-t1132 * t914 - t1134 * t915) * pkin(8);
t829 = pkin(2) * t980 - t1308 + t1401;
t828 = (-t1132 * t960 - t1134 * t961) * pkin(8) - t1199;
t826 = -t1137 * t935 + t1141 * t895;
t817 = t1134 * t1212 + t1398;
t816 = t1134 * t1213 - t1398;
t815 = t1132 * t1212 - t1394;
t814 = t1132 * t1213 + t1394;
t811 = -t1136 * t1362 + t1140 * t882;
t810 = t1136 * t1179 + t1140 * t883;
t791 = t1002 * t1136 + t1140 * t840;
t788 = -t1137 * t913 + t1141 * t862;
t787 = -t1137 * t911 + t1141 * t861;
t780 = -t1132 * t898 + t1134 * t1202;
t779 = -t1132 * t897 + t1134 * t1203;
t772 = -t1132 * t899 + t1134 * t1204;
t771 = -t1132 * t896 + t1134 * t1205;
t770 = t1132 * t1204 + t1134 * t899;
t769 = t1132 * t1205 + t1134 * t896;
t764 = -pkin(2) * t963 + pkin(9) * t784;
t761 = t1028 * t1136 + t1140 * t767;
t760 = -t1132 * t894 + t1134 * t1214;
t753 = -t1137 * t884 + t1141 * t813;
t752 = -t1137 * t885 + t1141 * t812;
t751 = -t1138 * t817 + t1142 * t877;
t750 = -t1138 * t816 + t1142 * t876;
t749 = t1138 * t877 + t1142 * t817;
t748 = t1138 * t876 + t1142 * t816;
t740 = -t1132 * t860 + t1134 * t1215;
t739 = -t1132 * t859 + t1134 * t1216;
t737 = pkin(9) * t903 - t1384 + t784;
t735 = -t1137 * t842 + t1141 * t792;
t734 = -t1399 + t1136 * t789 - (pkin(2) + t1327) * t986;
t733 = t1140 * t790 + t1256 * t978 - t1401;
t728 = -t1138 * t772 + t1142 * t852;
t727 = -t1138 * t771 + t1142 * t851;
t726 = t1138 * t852 + t1142 * t772;
t725 = t1138 * t851 + t1142 * t771;
t711 = -t1132 * t783 + t1134 * t1222;
t710 = t1132 * t1222 + t1134 * t783;
t708 = -t1132 * t811 + t1134 * t1217;
t707 = -t1132 * t810 + t1134 * t1218;
t704 = t1140 * t715 + t1266;
t703 = t1140 * t714 - t1266;
t699 = -t1137 * t768 + t1141 * t762;
t698 = -t1132 * t794 + t1134 * t1219;
t697 = t1132 * t1219 + t1134 * t794;
t696 = pkin(9) * t900 + t1136 * t801 + t1140 * t793 - t1384;
t693 = -t1132 * t785 + t1134 * t1221;
t692 = t1132 * t1221 + t1134 * t785;
t689 = t1136 * t806 + t1140 * t729;
t688 = t1136 * t1161 + t1140 * t730;
t687 = -t1132 * t791 + t1134 * t1220;
t681 = -t1132 * t781 + t1134 * t1223;
t680 = t1132 * t1223 + t1134 * t781;
t679 = -t1137 * t830 + t1141 * t878 - t1411;
t672 = -t1137 * t827 + t1141 * t870 + (-t1132 * t814 - t1134 * t816) * pkin(8);
t671 = -t1132 * t837 + t1134 * t1163 - t1410;
t666 = -t1138 * t711 + t1142 * t763;
t665 = t1138 * t763 + t1142 * t711;
t664 = -pkin(1) * t814 - t1132 * t829 + t1134 * t1164;
t657 = -t1132 * t761 + t1134 * t1224;
t656 = pkin(9) * t742 + (-t1256 - t1327) * t839;
t655 = -t1132 * t741 + t1134 * t1225;
t654 = t1132 * t1225 + t1134 * t741;
t653 = -t1138 * t698 + t1142 * t744;
t652 = t1138 * t744 + t1142 * t698;
t650 = t1136 * t908 + t1140 * t658;
t649 = t899 * t1330 + t1141 * t747 + (-t1132 * t770 - t1134 * t772) * pkin(8);
t648 = -t1137 * t717 + t1141 * t706;
t647 = -t1137 * t716 + t1141 * t705;
t646 = -t1138 * t693 + t1142 * t738;
t645 = t1138 * t738 + t1142 * t693;
t642 = -t1137 * t731 + t1141 * t691;
t641 = -t1137 * t732 + t1141 * t690;
t640 = -t1137 * t759 + t1141 * t745 + t1411;
t638 = -t1137 * t754 + t1141 * t743 + (-t1132 * t815 - t1134 * t817) * pkin(8);
t637 = -t1138 * t681 + t1142 * t724;
t636 = t1138 * t724 + t1142 * t681;
t632 = -pkin(1) * t770 - t1132 * t737 + t1134 * t1160;
t631 = -t1137 * t809 + t1141 * t702 + (-t1132 * t769 - t1134 * t771) * pkin(8);
t628 = -t1132 * t734 + t1134 * t1165 + t1410;
t624 = -pkin(1) * t815 - t1132 * t733 + t1134 * t1166;
t623 = -t1138 * t655 + t1142 * t709;
t622 = t1138 * t709 + t1142 * t655;
t620 = -t1132 * t704 + t1134 * t1226;
t619 = -t1132 * t703 + t1134 * t1227;
t618 = (-pkin(9) * t1141 + t1330) * t783 + (-t1132 * t710 - t1134 * t711) * pkin(8);
t617 = -pkin(1) * t710 - t1132 * t764 + t1134 * t1157;
t615 = -t1132 * t689 + t1134 * t1228;
t614 = -t1132 * t688 + t1134 * t1229;
t612 = -t1132 * t683 + t1134 * t1230;
t611 = t1132 * t1230 + t1134 * t683;
t609 = -pkin(1) * t769 - t1132 * t696 + t1134 * t1167;
t608 = -pkin(2) * t871 + pkin(9) * t795 + t1136 * t670 + t1140 * t694;
t607 = -pkin(2) * t858 + pkin(9) * t786 + t1136 * t667 + t1140 * t686;
t606 = -t1137 * t660 + t1141 * t651;
t604 = -t1132 * t673 + t1134 * t1231;
t603 = t1132 * t1231 + t1134 * t673;
t599 = -pkin(2) * t843 + pkin(9) * t782 + t1136 * t746 + t1140 * t621;
t589 = -t1132 * t650 + t1134 * t1232;
t588 = -t1138 * t612 + t1142 * t639;
t587 = t1138 * t639 + t1142 * t612;
t586 = -t1132 * t643 + t1134 * t1233;
t585 = t1132 * t1233 + t1134 * t643;
t582 = -t1138 * t604 + t1142 * t633;
t581 = t1138 * t633 + t1142 * t604;
t579 = -t1137 * t675 + t1141 * t676 + (-t1132 * t654 - t1134 * t655) * pkin(8);
t576 = -t1137 * t668 + t1141 * t616 + (-t1132 * t697 - t1134 * t698) * pkin(8);
t575 = -t1137 * t662 + t1141 * t613 + (-t1132 * t692 - t1134 * t693) * pkin(8);
t574 = -pkin(1) * t654 - t1132 * t656 + t1134 * t1168;
t572 = -t1132 * t629 + t1134 * t1234;
t571 = t1132 * t1234 + t1134 * t629;
t570 = -t1138 * t586 + t1142 * t605;
t569 = t1138 * t605 + t1142 * t586;
t568 = -pkin(1) * t697 - t1132 * t608 + t1134 * t1169;
t567 = -t1137 * t610 + t1141 * t602 + (-t1132 * t680 - t1134 * t681) * pkin(8);
t566 = -pkin(1) * t692 - t1132 * t607 + t1134 * t1170;
t559 = -pkin(2) * t720 + pkin(9) * t684 + t1136 * t596 + t1140 * t595;
t557 = -t1138 * t572 + t1142 * t597;
t556 = t1138 * t597 + t1142 * t572;
t555 = -pkin(2) * t713 + pkin(9) * t674 + t1136 * t594 + t1140 * t593;
t554 = -pkin(2) * t635 + pkin(9) * t630 + t1136 * t600 + t1140 * t598;
t553 = -pkin(1) * t680 - t1132 * t599 + t1134 * t1171;
t548 = -t1137 * t584 + t1141 * t563 + (-t1132 * t611 - t1134 * t612) * pkin(8);
t547 = -pkin(2) * t661 + pkin(9) * t644 + t1136 * t601 + t1140 * t552;
t546 = -t1137 * t577 + t1141 * t558 + (-t1132 * t603 - t1134 * t604) * pkin(8);
t543 = -t1132 * t561 + t1134 * t1235;
t542 = t1132 * t1235 + t1134 * t561;
t541 = -t1137 * t573 + t1141 * t560 + (-t1132 * t571 - t1134 * t572) * pkin(8);
t540 = -pkin(1) * t611 - t1132 * t559 + t1134 * t1172;
t539 = -pkin(1) * t603 - t1132 * t555 + t1134 * t1174;
t538 = -pkin(1) * t571 - t1132 * t554 + t1134 * t1173;
t536 = -t1137 * t551 + t1141 * t549 + (-t1132 * t585 - t1134 * t586) * pkin(8);
t535 = -t1138 * t543 + t1142 * t550;
t534 = t1138 * t550 + t1142 * t543;
t532 = -pkin(1) * t585 - t1132 * t547 + t1134 * t1175;
t531 = -pkin(2) * t565 + pkin(9) * t562 + t1136 * t545 + t1140 * t544;
t530 = -t1137 * t537 + t1141 * t533 + (-t1132 * t542 - t1134 * t543) * pkin(8);
t529 = -pkin(1) * t542 - t1132 * t531 + t1134 * t1176;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1113, -t1114, 0, t1072, 0, 0, 0, 0, 0, 0, t933, t918, t905, t846, 0, 0, 0, 0, 0, 0, t750, -t758, t728, t666, 0, 0, 0, 0, 0, 0, t727, t751, t758, t623, 0, 0, 0, 0, 0, 0, t646, t653, t637, t557, 0, 0, 0, 0, 0, 0, t582, t588, t570, t535; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1114, -t1113, 0, t1071, 0, 0, 0, 0, 0, 0, t932, t917, t904, t845, 0, 0, 0, 0, 0, 0, t748, t755, t726, t665, 0, 0, 0, 0, 0, 0, t725, t749, -t755, t622, 0, 0, 0, 0, 0, 0, t645, t652, t636, t556, 0, 0, 0, 0, 0, 0, t581, t587, t569, t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t996, t976, t960, t914, 0, 0, 0, 0, 0, 0, t814, t822, t770, t710, 0, 0, 0, 0, 0, 0, t769, t815, -t822, t654, 0, 0, 0, 0, 0, 0, t692, t697, t680, t571, 0, 0, 0, 0, 0, 0, t603, t611, t585, t542; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1114, 0, -t1113, 0, t1247, -t1098, -t1071, -pkin(7) * t1071, -t1033 * t1138 + t1055 * t1142, t1005 * t1142 - t1138 * t962, t1046 * t1142 - t1138 * t997, -t1032 * t1138 + t1054 * t1142, t1047 * t1142 - t1138 * t998, t1069 * t1142 + t1138 * t1280, -pkin(7) * t932 - t1138 * t874 + t1142 * t881, -pkin(7) * t917 - t1138 * t863 + t1142 * t875, -pkin(7) * t904 - t1138 * t844 + t1142 * t828, -pkin(7) * t845 - t1138 * t847 + t1142 * t832, t1377, -t1138 * t779 + t1142 * t864, -t1138 * t834 + t1142 * t890, t1378, -t1138 * t835 + t1142 * t891, t1356, -pkin(7) * t748 - t1138 * t664 + t1142 * t672, -t1138 * t671 + t1142 * t679 - t1413, -pkin(7) * t726 - t1138 * t632 + t1142 * t649, -pkin(7) * t665 - t1138 * t617 + t1142 * t618, t1356, -t1138 * t833 + t1142 * t889, -t1138 * t836 + t1142 * t892, t1377, -t1138 * t780 + t1142 * t865, t1378, -pkin(7) * t725 - t1138 * t609 + t1142 * t631, -pkin(7) * t749 - t1138 * t624 + t1142 * t638, -t1138 * t628 + t1142 * t640 + t1413, -pkin(7) * t622 - t1138 * t574 + t1142 * t579, -t1138 * t740 + t1142 * t788, -t1138 * t687 + t1142 * t735, -t1138 * t708 + t1142 * t753, -t1138 * t739 + t1142 * t787, -t1138 * t707 + t1142 * t752, -t1138 * t760 + t1142 * t826, -pkin(7) * t645 - t1138 * t566 + t1142 * t575, -pkin(7) * t652 - t1138 * t568 + t1142 * t576, -pkin(7) * t636 - t1138 * t553 + t1142 * t567, -pkin(7) * t556 - t1138 * t538 + t1142 * t541, -t1138 * t620 + t1142 * t648, -t1138 * t589 + t1142 * t606, -t1138 * t615 + t1142 * t642, -t1138 * t619 + t1142 * t647, -t1138 * t614 + t1142 * t641, -t1138 * t657 + t1142 * t699, -pkin(7) * t581 - t1138 * t539 + t1142 * t546, -pkin(7) * t587 - t1138 * t540 + t1142 * t548, -pkin(7) * t569 - t1138 * t532 + t1142 * t536, -pkin(7) * t534 - t1138 * t529 + t1142 * t530; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1113, 0, t1114, 0, t1098, t1247, t1072, pkin(7) * t1072, t1033 * t1142 + t1055 * t1138, t1005 * t1138 + t1142 * t962, t1046 * t1138 + t1142 * t997, t1032 * t1142 + t1054 * t1138, t1047 * t1138 + t1142 * t998, t1069 * t1138 - t1142 * t1280, pkin(7) * t933 + t1138 * t881 + t1142 * t874, pkin(7) * t918 + t1138 * t875 + t1142 * t863, pkin(7) * t905 + t1138 * t828 + t1142 * t844, pkin(7) * t846 + t1138 * t832 + t1142 * t847, t1375, t1138 * t864 + t1142 * t779, t1138 * t890 + t1142 * t834, t1376, t1138 * t891 + t1142 * t835, t1357, pkin(7) * t750 + t1138 * t672 + t1142 * t664, t1138 * t679 + t1142 * t671 - t1412, pkin(7) * t728 + t1138 * t649 + t1142 * t632, pkin(7) * t666 + t1138 * t618 + t1142 * t617, t1357, t1138 * t889 + t1142 * t833, t1138 * t892 + t1142 * t836, t1375, t1138 * t865 + t1142 * t780, t1376, pkin(7) * t727 + t1138 * t631 + t1142 * t609, pkin(7) * t751 + t1138 * t638 + t1142 * t624, t1138 * t640 + t1142 * t628 + t1412, pkin(7) * t623 + t1138 * t579 + t1142 * t574, t1138 * t788 + t1142 * t740, t1138 * t735 + t1142 * t687, t1138 * t753 + t1142 * t708, t1138 * t787 + t1142 * t739, t1138 * t752 + t1142 * t707, t1138 * t826 + t1142 * t760, pkin(7) * t646 + t1138 * t575 + t1142 * t566, pkin(7) * t653 + t1138 * t576 + t1142 * t568, pkin(7) * t637 + t1138 * t567 + t1142 * t553, pkin(7) * t557 + t1138 * t541 + t1142 * t538, t1138 * t648 + t1142 * t620, t1138 * t606 + t1142 * t589, t1138 * t642 + t1142 * t615, t1138 * t647 + t1142 * t619, t1138 * t641 + t1142 * t614, t1138 * t699 + t1142 * t657, pkin(7) * t582 + t1138 * t546 + t1142 * t539, pkin(7) * t588 + t1138 * t548 + t1142 * t540, pkin(7) * t570 + t1138 * t536 + t1142 * t532, pkin(7) * t535 + t1138 * t530 + t1142 * t529; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1118, t1119, 0, 0, (t1132 * t1096 + t1141 * t1354) * t1137, t1134 * t1102 + t1132 * t1198, t1134 * t1064 + t1132 * t1194, (t1132 * t1097 - t1137 * t1354) * t1141, t1134 * t1065 + t1132 * t1195, t1134 * t1123, pkin(1) * t999 - t1134 * t1035 + t1132 * t1239, pkin(1) * t977 - t1134 * t1036 + t1132 * t1240, pkin(1) * t961 + t1132 * t1162, pkin(1) * t915 + t1326 * t941, t1361, t1132 * t1203 + t1134 * t897, t1132 * t1208 + t1392, t1360, t1132 * t1207 - t1391, t1336, pkin(1) * t816 + t1132 * t1164 + t1134 * t829, t1132 * t1163 + t1134 * t837 + t1409, pkin(1) * t772 + t1132 * t1160 + t1134 * t737, pkin(1) * t711 + t1132 * t1157 + t1134 * t764, t1336, t1132 * t1209 - t1392, t1132 * t1206 + t1391, t1361, t1132 * t1202 + t1134 * t898, t1360, pkin(1) * t771 + t1132 * t1167 + t1134 * t696, pkin(1) * t817 + t1132 * t1166 + t1134 * t733, t1132 * t1165 + t1134 * t734 - t1409, pkin(1) * t655 + t1132 * t1168 + t1134 * t656, t1132 * t1215 + t1134 * t860, t1132 * t1220 + t1134 * t791, t1132 * t1217 + t1134 * t811, t1132 * t1216 + t1134 * t859, t1132 * t1218 + t1134 * t810, t1132 * t1214 + t1134 * t894, pkin(1) * t693 + t1132 * t1170 + t1134 * t607, pkin(1) * t698 + t1132 * t1169 + t1134 * t608, pkin(1) * t681 + t1132 * t1171 + t1134 * t599, pkin(1) * t572 + t1132 * t1173 + t1134 * t554, t1132 * t1226 + t1134 * t704, t1132 * t1232 + t1134 * t650, t1132 * t1228 + t1134 * t689, t1132 * t1227 + t1134 * t703, t1132 * t1229 + t1134 * t688, t1132 * t1224 + t1134 * t761, pkin(1) * t604 + t1132 * t1174 + t1134 * t555, pkin(1) * t612 + t1132 * t1172 + t1134 * t559, pkin(1) * t586 + t1132 * t1175 + t1134 * t547, pkin(1) * t543 + t1132 * t1176 + t1134 * t531;];
tauB_reg  = t1;
