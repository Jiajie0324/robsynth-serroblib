% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:09
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR10_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:09:18
% EndTime: 2019-05-07 07:09:29
% DurationCPUTime: 10.93s
% Computational Cost: add. (67365->365), mult. (148096->501), div. (0->0), fcn. (116905->12), ass. (0->294)
t2613 = sin(pkin(6));
t2618 = sin(qJ(2));
t2683 = t2613 * t2618;
t2674 = qJD(1) * t2683;
t2603 = qJD(2) * t2674;
t2622 = cos(qJ(2));
t2675 = qJDD(1) * t2622;
t2665 = t2613 * t2675 - t2603;
t2637 = -qJDD(3) + t2665;
t2617 = sin(qJ(3));
t2621 = cos(qJ(3));
t2615 = cos(pkin(6));
t2670 = qJD(1) * t2615 + qJD(2);
t2575 = t2617 * t2674 - t2621 * t2670;
t2577 = t2617 * t2670 + t2621 * t2674;
t2688 = t2575 * t2577;
t2536 = t2637 + t2688;
t2573 = t2575 ^ 2;
t2682 = t2613 * t2622;
t2673 = qJD(1) * t2682;
t2599 = -qJD(3) + t2673;
t2595 = t2599 ^ 2;
t2543 = -t2595 - t2573;
t2496 = t2536 * t2617 + t2543 * t2621;
t2719 = t2496 * t2618;
t2718 = t2496 * t2622;
t2633 = t2637 - t2688;
t2574 = t2577 ^ 2;
t2702 = -t2574 - t2595;
t2503 = t2617 * t2702 - t2621 * t2633;
t2717 = t2503 * t2618;
t2716 = t2503 * t2622;
t2495 = t2536 * t2621 - t2543 * t2617;
t2715 = t2613 * t2495;
t2500 = t2617 * t2633 + t2621 * t2702;
t2714 = t2613 * t2500;
t2713 = t2615 * t2495;
t2712 = t2615 * t2500;
t2676 = qJDD(1) * t2613;
t2586 = qJD(2) * t2673 + t2618 * t2676;
t2608 = t2615 * qJDD(1) + qJDD(2);
t2638 = t2621 * t2586 + t2617 * t2608;
t2680 = qJD(3) + t2599;
t2520 = t2575 * t2680 - t2638;
t2711 = t2520 * t2617;
t2710 = t2520 * t2621;
t2624 = qJD(1) ^ 2;
t2709 = t2613 * t2624;
t2703 = -t2573 - t2574;
t2708 = t2618 * t2703;
t2707 = t2622 * t2703;
t2634 = qJD(3) * t2575 - t2638;
t2706 = -t2575 * t2599 + t2634;
t2666 = t2670 ^ 2;
t2614 = cos(pkin(11));
t2694 = sin(pkin(11));
t2554 = -t2614 * t2575 - t2599 * t2694;
t2556 = t2575 * t2694 - t2614 * t2599;
t2616 = sin(qJ(6));
t2620 = cos(qJ(6));
t2523 = t2620 * t2554 + t2556 * t2616;
t2701 = t2523 ^ 2;
t2525 = -t2554 * t2616 + t2556 * t2620;
t2700 = t2525 ^ 2;
t2553 = t2554 ^ 2;
t2699 = t2556 ^ 2;
t2572 = qJD(6) + t2577;
t2698 = t2572 ^ 2;
t2697 = -2 * qJD(4);
t2696 = -2 * qJD(5);
t2695 = t2615 * g(3);
t2693 = (-pkin(2) * t2622 - pkin(9) * t2618) * t2709;
t2692 = t2523 * t2525;
t2689 = t2554 * t2556;
t2686 = t2577 * t2554;
t2685 = t2577 * t2556;
t2684 = t2613 ^ 2 * t2624;
t2681 = qJD(3) - t2599;
t2679 = qJD(6) - t2572;
t2678 = qJD(6) + t2572;
t2619 = sin(qJ(1));
t2623 = cos(qJ(1));
t2602 = -g(1) * t2623 - g(2) * t2619;
t2582 = -pkin(1) * t2624 + pkin(8) * t2676 + t2602;
t2601 = t2619 * g(1) - t2623 * g(2);
t2629 = qJDD(1) * pkin(1) + pkin(8) * t2709 + t2601;
t2626 = t2615 * t2629;
t2677 = t2622 * t2582 + t2618 * t2626;
t2509 = t2608 * pkin(9) - t2666 * pkin(2) + (-g(3) * t2618 + t2622 * t2693) * t2613 + t2677;
t2664 = qJD(1) * t2670;
t2635 = t2618 * t2664;
t2636 = t2622 * t2664;
t2510 = t2603 * pkin(2) - t2586 * pkin(9) - t2695 + (-pkin(9) * t2636 + (t2635 - t2675) * pkin(2) - t2629) * t2613;
t2478 = -t2617 * t2509 + t2621 * t2510;
t2547 = pkin(3) * t2575 - qJ(4) * t2577;
t2461 = pkin(3) * t2637 - t2595 * qJ(4) + t2577 * t2547 + qJDD(4) - t2478;
t2428 = -pkin(4) * t2520 + qJ(5) * t2536 + t2461;
t2667 = t2617 * t2586 - t2621 * t2608;
t2542 = qJD(3) * t2577 + t2667;
t2557 = pkin(4) * t2577 + qJ(5) * t2599;
t2668 = t2618 * t2582 - t2622 * t2626;
t2508 = -t2608 * pkin(2) - t2666 * pkin(9) + (g(3) * t2622 + t2618 * t2693) * t2613 + t2668;
t2625 = t2542 * pkin(3) + qJ(4) * t2706 + t2508;
t2671 = -pkin(3) * t2599 + t2697;
t2435 = -t2573 * pkin(4) + t2542 * qJ(5) + (-t2557 + t2671) * t2577 + t2625;
t2410 = t2694 * t2428 + t2614 * t2435 + t2554 * t2696;
t2672 = -t2574 - t2699;
t2528 = t2614 * t2542 + t2637 * t2694;
t2529 = t2542 * t2694 - t2614 * t2637;
t2669 = t2620 * t2528 - t2616 * t2529;
t2632 = -t2529 - t2686;
t2628 = -t2634 - t2689;
t2631 = t2614 * t2428 - t2435 * t2694 + t2556 * t2696;
t2399 = pkin(5) * t2628 + pkin(10) * t2632 + t2631;
t2533 = pkin(5) * t2577 - pkin(10) * t2556;
t2402 = -pkin(5) * t2553 + pkin(10) * t2528 - t2533 * t2577 + t2410;
t2383 = t2399 * t2620 - t2402 * t2616;
t2384 = t2399 * t2616 + t2402 * t2620;
t2376 = -t2383 * t2616 + t2384 * t2620;
t2662 = t2383 * t2620 + t2384 * t2616;
t2369 = t2376 * t2694 + t2614 * t2662;
t2479 = t2621 * t2509 + t2617 * t2510;
t2627 = -t2595 * pkin(3) - qJ(4) * t2637 - t2575 * t2547 + t2479;
t2434 = qJDD(5) - t2542 * pkin(4) - t2573 * qJ(5) + (t2697 - t2557) * t2599 + t2627;
t2421 = -t2528 * pkin(5) - t2553 * pkin(10) + t2556 * t2533 + t2434;
t2368 = t2369 * t2617 + t2421 * t2621;
t2370 = t2614 * t2376 - t2662 * t2694;
t2663 = t2368 * t2618 - t2370 * t2622;
t2388 = t2410 * t2694 + t2614 * t2631;
t2386 = t2388 * t2617 + t2434 * t2621;
t2389 = t2614 * t2410 - t2631 * t2694;
t2661 = t2386 * t2618 - t2389 * t2622;
t2448 = -t2525 * t2679 + t2669;
t2643 = -t2616 * t2528 - t2620 * t2529;
t2450 = t2523 * t2679 + t2643;
t2419 = t2448 * t2620 - t2450 * t2616;
t2652 = t2448 * t2616 + t2450 * t2620;
t2395 = t2419 * t2694 + t2614 * t2652;
t2465 = -t2700 - t2701;
t2392 = t2395 * t2617 + t2465 * t2621;
t2396 = t2614 * t2419 - t2652 * t2694;
t2660 = t2392 * t2618 - t2396 * t2622;
t2630 = qJDD(6) - t2634;
t2470 = t2630 - t2692;
t2480 = -t2698 - t2701;
t2437 = -t2470 * t2616 + t2480 * t2620;
t2651 = t2470 * t2620 + t2480 * t2616;
t2414 = t2437 * t2694 + t2614 * t2651;
t2447 = t2525 * t2678 - t2669;
t2398 = t2414 * t2617 + t2447 * t2621;
t2415 = t2614 * t2437 - t2651 * t2694;
t2659 = t2398 * t2618 - t2415 * t2622;
t2471 = -t2630 - t2692;
t2493 = -t2698 - t2700;
t2451 = t2471 * t2620 - t2493 * t2616;
t2650 = t2471 * t2616 + t2493 * t2620;
t2417 = t2451 * t2694 + t2614 * t2650;
t2449 = -t2523 * t2678 - t2643;
t2404 = t2417 * t2617 + t2449 * t2621;
t2418 = t2614 * t2451 - t2650 * t2694;
t2658 = t2404 * t2618 - t2418 * t2622;
t2460 = t2599 * t2697 + t2627;
t2424 = t2460 * t2621 + t2461 * t2617;
t2462 = t2577 * t2671 + t2625;
t2657 = t2424 * t2618 - t2462 * t2622;
t2489 = t2528 + t2685;
t2463 = t2489 * t2694 + t2614 * t2632;
t2498 = -t2553 - t2699;
t2439 = t2463 * t2617 + t2498 * t2621;
t2464 = t2614 * t2489 - t2632 * t2694;
t2656 = t2439 * t2618 - t2464 * t2622;
t2441 = -t2478 * t2617 + t2479 * t2621;
t2655 = t2441 * t2618 - t2508 * t2622;
t2504 = -t2574 - t2553;
t2468 = t2504 * t2694 + t2614 * t2628;
t2488 = -t2528 + t2685;
t2443 = t2468 * t2617 + t2488 * t2621;
t2469 = t2614 * t2504 - t2628 * t2694;
t2654 = t2443 * t2618 - t2469 * t2622;
t2492 = t2634 - t2689;
t2472 = t2492 * t2694 + t2614 * t2672;
t2490 = t2529 - t2686;
t2445 = t2472 * t2617 + t2490 * t2621;
t2473 = t2614 * t2492 - t2672 * t2694;
t2653 = t2445 * t2618 - t2473 * t2622;
t2515 = -t2577 * t2680 - t2667;
t2483 = t2515 * t2621 - t2711;
t2649 = t2483 * t2618 - t2707;
t2564 = t2599 * t2577;
t2516 = -t2542 - t2564;
t2484 = t2516 * t2621 - t2711;
t2648 = t2484 * t2618 - t2707;
t2513 = t2577 * t2681 + t2667;
t2647 = -t2513 * t2622 + t2719;
t2514 = t2542 - t2564;
t2646 = t2514 * t2622 - t2719;
t2645 = t2622 * t2706 - t2717;
t2517 = -t2575 * t2681 + t2638;
t2644 = t2517 * t2622 + t2717;
t2544 = -g(3) * t2682 - t2668;
t2545 = -g(3) * t2683 + t2677;
t2642 = t2544 * t2622 + t2545 * t2618;
t2560 = t2613 * t2636 - t2586;
t2589 = t2613 * t2635;
t2561 = t2589 + t2665;
t2641 = t2560 * t2622 + t2561 * t2618;
t2611 = t2618 ^ 2;
t2570 = -t2611 * t2684 - t2666;
t2598 = t2622 * t2618 * t2684;
t2584 = t2598 - t2608;
t2640 = t2570 * t2622 + t2584 * t2618;
t2583 = t2598 + t2608;
t2612 = t2622 ^ 2;
t2587 = -t2612 * t2684 - t2666;
t2639 = t2583 * t2622 + t2587 * t2618;
t2597 = -qJDD(1) * t2619 - t2623 * t2624;
t2596 = qJDD(1) * t2623 - t2619 * t2624;
t2588 = (-t2611 - t2612) * t2684;
t2565 = -t2613 * t2629 - t2695;
t2562 = t2589 - t2665;
t2559 = t2670 * t2673 + t2586;
t2552 = -t2583 * t2618 + t2587 * t2622;
t2546 = -t2570 * t2618 + t2584 * t2622;
t2530 = -t2560 * t2618 + t2561 * t2622;
t2527 = -t2613 * t2562 + t2615 * t2639;
t2526 = t2615 * t2562 + t2613 * t2639;
t2512 = -t2613 * t2559 + t2615 * t2640;
t2511 = t2615 * t2559 + t2613 * t2640;
t2507 = -t2613 * t2588 + t2615 * t2641;
t2506 = t2615 * t2588 + t2613 * t2641;
t2499 = -t2544 * t2618 + t2545 * t2622;
t2486 = -t2613 * t2565 + t2615 * t2642;
t2485 = t2615 * t2565 + t2613 * t2642;
t2482 = t2516 * t2617 + t2710;
t2481 = t2515 * t2617 + t2710;
t2477 = -t2517 * t2618 + t2716;
t2476 = -t2618 * t2706 - t2716;
t2475 = -t2514 * t2618 - t2718;
t2474 = t2513 * t2618 + t2718;
t2467 = t2484 * t2622 + t2708;
t2466 = t2483 * t2622 + t2708;
t2459 = t2615 * t2644 + t2714;
t2458 = t2615 * t2645 - t2714;
t2457 = t2613 * t2644 - t2712;
t2456 = t2613 * t2645 + t2712;
t2455 = t2615 * t2646 - t2715;
t2454 = t2615 * t2647 + t2715;
t2453 = t2613 * t2646 + t2713;
t2452 = t2613 * t2647 - t2713;
t2444 = -t2472 * t2621 + t2490 * t2617;
t2442 = -t2468 * t2621 + t2488 * t2617;
t2440 = t2478 * t2621 + t2479 * t2617;
t2438 = -t2463 * t2621 + t2498 * t2617;
t2432 = -t2613 * t2482 + t2615 * t2648;
t2431 = -t2613 * t2481 + t2615 * t2649;
t2430 = t2615 * t2482 + t2613 * t2648;
t2429 = t2615 * t2481 + t2613 * t2649;
t2426 = t2441 * t2622 + t2508 * t2618;
t2425 = t2445 * t2622 + t2473 * t2618;
t2423 = t2460 * t2617 - t2461 * t2621;
t2422 = t2443 * t2622 + t2469 * t2618;
t2420 = t2439 * t2622 + t2464 * t2618;
t2413 = -t2613 * t2440 + t2615 * t2655;
t2412 = t2615 * t2440 + t2613 * t2655;
t2411 = t2424 * t2622 + t2462 * t2618;
t2408 = -t2613 * t2444 + t2615 * t2653;
t2407 = t2615 * t2444 + t2613 * t2653;
t2406 = -t2613 * t2442 + t2615 * t2654;
t2405 = t2615 * t2442 + t2613 * t2654;
t2403 = -t2417 * t2621 + t2449 * t2617;
t2401 = -t2613 * t2438 + t2615 * t2656;
t2400 = t2615 * t2438 + t2613 * t2656;
t2397 = -t2414 * t2621 + t2447 * t2617;
t2394 = -t2613 * t2423 + t2615 * t2657;
t2393 = t2615 * t2423 + t2613 * t2657;
t2391 = -t2395 * t2621 + t2465 * t2617;
t2390 = t2404 * t2622 + t2418 * t2618;
t2387 = t2398 * t2622 + t2415 * t2618;
t2385 = -t2388 * t2621 + t2434 * t2617;
t2382 = -t2613 * t2403 + t2615 * t2658;
t2381 = t2615 * t2403 + t2613 * t2658;
t2380 = t2392 * t2622 + t2396 * t2618;
t2379 = -t2613 * t2397 + t2615 * t2659;
t2378 = t2615 * t2397 + t2613 * t2659;
t2377 = t2386 * t2622 + t2389 * t2618;
t2374 = -t2613 * t2391 + t2615 * t2660;
t2373 = t2615 * t2391 + t2613 * t2660;
t2372 = -t2613 * t2385 + t2615 * t2661;
t2371 = t2615 * t2385 + t2613 * t2661;
t2367 = -t2369 * t2621 + t2421 * t2617;
t2366 = t2368 * t2622 + t2370 * t2618;
t2365 = -t2613 * t2367 + t2615 * t2663;
t2364 = t2615 * t2367 + t2613 * t2663;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2597, -t2596, 0, -t2601 * t2619 + t2602 * t2623, 0, 0, 0, 0, 0, 0, -t2527 * t2619 + t2552 * t2623, -t2512 * t2619 + t2546 * t2623, -t2507 * t2619 + t2530 * t2623, -t2486 * t2619 + t2499 * t2623, 0, 0, 0, 0, 0, 0, -t2454 * t2619 + t2474 * t2623, -t2458 * t2619 + t2476 * t2623, -t2432 * t2619 + t2467 * t2623, -t2413 * t2619 + t2426 * t2623, 0, 0, 0, 0, 0, 0, -t2431 * t2619 + t2466 * t2623, -t2455 * t2619 + t2475 * t2623, -t2459 * t2619 + t2477 * t2623, -t2394 * t2619 + t2411 * t2623, 0, 0, 0, 0, 0, 0, -t2406 * t2619 + t2422 * t2623, -t2408 * t2619 + t2425 * t2623, -t2401 * t2619 + t2420 * t2623, -t2372 * t2619 + t2377 * t2623, 0, 0, 0, 0, 0, 0, -t2379 * t2619 + t2387 * t2623, -t2382 * t2619 + t2390 * t2623, -t2374 * t2619 + t2380 * t2623, -t2365 * t2619 + t2366 * t2623; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2596, t2597, 0, t2601 * t2623 + t2602 * t2619, 0, 0, 0, 0, 0, 0, t2527 * t2623 + t2552 * t2619, t2512 * t2623 + t2546 * t2619, t2507 * t2623 + t2530 * t2619, t2486 * t2623 + t2499 * t2619, 0, 0, 0, 0, 0, 0, t2454 * t2623 + t2474 * t2619, t2458 * t2623 + t2476 * t2619, t2432 * t2623 + t2467 * t2619, t2413 * t2623 + t2426 * t2619, 0, 0, 0, 0, 0, 0, t2431 * t2623 + t2466 * t2619, t2455 * t2623 + t2475 * t2619, t2459 * t2623 + t2477 * t2619, t2394 * t2623 + t2411 * t2619, 0, 0, 0, 0, 0, 0, t2406 * t2623 + t2422 * t2619, t2408 * t2623 + t2425 * t2619, t2401 * t2623 + t2420 * t2619, t2372 * t2623 + t2377 * t2619, 0, 0, 0, 0, 0, 0, t2379 * t2623 + t2387 * t2619, t2382 * t2623 + t2390 * t2619, t2374 * t2623 + t2380 * t2619, t2365 * t2623 + t2366 * t2619; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2526, t2511, t2506, t2485, 0, 0, 0, 0, 0, 0, t2452, t2456, t2430, t2412, 0, 0, 0, 0, 0, 0, t2429, t2453, t2457, t2393, 0, 0, 0, 0, 0, 0, t2405, t2407, t2400, t2371, 0, 0, 0, 0, 0, 0, t2378, t2381, t2373, t2364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2624, -qJDD(1), 0, t2602, 0, 0, 0, 0, 0, 0, t2552, t2546, t2530, t2499, 0, 0, 0, 0, 0, 0, t2474, t2476, t2467, t2426, 0, 0, 0, 0, 0, 0, t2466, t2475, t2477, t2411, 0, 0, 0, 0, 0, 0, t2422, t2425, t2420, t2377, 0, 0, 0, 0, 0, 0, t2387, t2390, t2380, t2366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2624, 0, t2601, 0, 0, 0, 0, 0, 0, t2527, t2512, t2507, t2486, 0, 0, 0, 0, 0, 0, t2454, t2458, t2432, t2413, 0, 0, 0, 0, 0, 0, t2431, t2455, t2459, t2394, 0, 0, 0, 0, 0, 0, t2406, t2408, t2401, t2372, 0, 0, 0, 0, 0, 0, t2379, t2382, t2374, t2365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2526, t2511, t2506, t2485, 0, 0, 0, 0, 0, 0, t2452, t2456, t2430, t2412, 0, 0, 0, 0, 0, 0, t2429, t2453, t2457, t2393, 0, 0, 0, 0, 0, 0, t2405, t2407, t2400, t2371, 0, 0, 0, 0, 0, 0, t2378, t2381, t2373, t2364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2587, t2584, t2561, t2545, 0, 0, 0, 0, 0, 0, t2496, -t2503, t2484, t2441, 0, 0, 0, 0, 0, 0, t2483, -t2496, t2503, t2424, 0, 0, 0, 0, 0, 0, t2443, t2445, t2439, t2386, 0, 0, 0, 0, 0, 0, t2398, t2404, t2392, t2368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2583, t2570, t2560, t2544, 0, 0, 0, 0, 0, 0, -t2513, t2706, -t2703, -t2508, 0, 0, 0, 0, 0, 0, -t2703, t2514, t2517, -t2462, 0, 0, 0, 0, 0, 0, -t2469, -t2473, -t2464, -t2389, 0, 0, 0, 0, 0, 0, -t2415, -t2418, -t2396, -t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2562, t2559, t2588, t2565, 0, 0, 0, 0, 0, 0, -t2495, t2500, t2482, t2440, 0, 0, 0, 0, 0, 0, t2481, t2495, -t2500, t2423, 0, 0, 0, 0, 0, 0, t2442, t2444, t2438, t2385, 0, 0, 0, 0, 0, 0, t2397, t2403, t2391, t2367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2543, t2633, t2516, t2479, 0, 0, 0, 0, 0, 0, t2515, -t2543, -t2633, t2460, 0, 0, 0, 0, 0, 0, t2488, t2490, t2498, t2434, 0, 0, 0, 0, 0, 0, t2447, t2449, t2465, t2421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2536, t2702, t2520, t2478, 0, 0, 0, 0, 0, 0, t2520, t2536, -t2702, -t2461, 0, 0, 0, 0, 0, 0, -t2468, -t2472, -t2463, -t2388, 0, 0, 0, 0, 0, 0, -t2414, -t2417, -t2395, -t2369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2513, -t2706, t2703, t2508, 0, 0, 0, 0, 0, 0, t2703, -t2514, -t2517, t2462, 0, 0, 0, 0, 0, 0, t2469, t2473, t2464, t2389, 0, 0, 0, 0, 0, 0, t2415, t2418, t2396, t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2703, -t2514, -t2517, t2462, 0, 0, 0, 0, 0, 0, t2469, t2473, t2464, t2389, 0, 0, 0, 0, 0, 0, t2415, t2418, t2396, t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2515, t2543, t2633, -t2460, 0, 0, 0, 0, 0, 0, -t2488, -t2490, -t2498, -t2434, 0, 0, 0, 0, 0, 0, -t2447, -t2449, -t2465, -t2421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2520, -t2536, t2702, t2461, 0, 0, 0, 0, 0, 0, t2468, t2472, t2463, t2388, 0, 0, 0, 0, 0, 0, t2414, t2417, t2395, t2369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2504, t2492, t2489, t2410, 0, 0, 0, 0, 0, 0, t2437, t2451, t2419, t2376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2628, t2672, t2632, t2631, 0, 0, 0, 0, 0, 0, t2651, t2650, t2652, t2662; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2488, t2490, t2498, t2434, 0, 0, 0, 0, 0, 0, t2447, t2449, t2465, t2421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2480, t2471, t2448, t2384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2470, t2493, t2450, t2383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2447, t2449, t2465, t2421;];
f_new_reg  = t1;
