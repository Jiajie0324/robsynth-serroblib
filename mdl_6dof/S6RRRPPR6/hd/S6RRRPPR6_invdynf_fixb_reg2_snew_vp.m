% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 05:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 05:37:27
% EndTime: 2019-05-07 05:37:42
% DurationCPUTime: 15.86s
% Computational Cost: add. (68353->364), mult. (152798->482), div. (0->0), fcn. (122972->12), ass. (0->275)
t2910 = cos(qJ(2));
t2901 = sin(pkin(6));
t2906 = sin(qJ(2));
t2975 = t2901 * t2906;
t2966 = qJD(1) * t2975;
t2967 = qJDD(1) * t2901;
t2968 = -qJD(2) * t2966 + t2910 * t2967;
t2962 = -qJDD(3) + t2968;
t2903 = cos(pkin(6));
t2896 = qJD(1) * t2903 + qJD(2);
t2905 = sin(qJ(3));
t2909 = cos(qJ(3));
t2865 = -t2896 * t2909 + t2905 * t2966;
t2866 = t2896 * t2905 + t2909 * t2966;
t2900 = sin(pkin(11));
t2902 = cos(pkin(11));
t2846 = t2902 * t2865 + t2866 * t2900;
t2848 = -t2865 * t2900 + t2866 * t2902;
t2981 = t2846 * t2848;
t2796 = t2962 + t2981;
t2845 = t2846 ^ 2;
t2974 = t2901 * t2910;
t2965 = qJD(1) * t2974;
t2886 = -qJD(3) + t2965;
t2882 = t2886 ^ 2;
t2801 = -t2882 - t2845;
t2761 = t2796 * t2902 - t2801 * t2900;
t2762 = t2796 * t2900 + t2801 * t2902;
t2727 = t2761 * t2909 - t2762 * t2905;
t2728 = t2761 * t2905 + t2762 * t2909;
t2874 = qJD(2) * t2965 + t2906 * t2967;
t2956 = qJDD(1) * t2903 + qJDD(2);
t2927 = -t2909 * t2874 - t2905 * t2956;
t2836 = -t2865 * qJD(3) - t2927;
t2957 = t2905 * t2874 - t2909 * t2956;
t2929 = -qJD(3) * t2866 - t2957;
t2799 = t2836 * t2900 - t2902 * t2929;
t2832 = t2886 * t2848;
t3001 = t2799 - t2832;
t2944 = t2728 * t2906 - t2910 * t3001;
t2694 = t2901 * t2727 + t2903 * t2944;
t2718 = t2728 * t2910 + t2906 * t3001;
t2907 = sin(qJ(1));
t2911 = cos(qJ(1));
t3036 = t2694 * t2907 - t2718 * t2911;
t3035 = t2694 * t2911 + t2718 * t2907;
t2930 = t2962 - t2981;
t2992 = t2848 ^ 2;
t2963 = -t2882 - t2992;
t2768 = t2900 * t2930 + t2902 * t2963;
t2771 = t2900 * t2963 - t2902 * t2930;
t2736 = t2768 * t2909 - t2771 * t2905;
t2739 = t2768 * t2905 + t2771 * t2909;
t2924 = t2902 * t2836 + t2900 * t2929;
t2980 = t2846 * t2886;
t2919 = t2924 + t2980;
t2941 = t2739 * t2906 + t2910 * t2919;
t2699 = t2901 * t2736 + t2903 * t2941;
t2724 = t2739 * t2910 - t2906 * t2919;
t3034 = t2699 * t2907 - t2724 * t2911;
t3033 = t2699 * t2911 + t2724 * t2907;
t2692 = -t2903 * t2727 + t2901 * t2944;
t2697 = -t2903 * t2736 + t2901 * t2941;
t3000 = -t2845 - t2992;
t2998 = t2924 - t2980;
t3002 = -t2799 - t2832;
t3007 = t2900 * t2998 + t2902 * t3002;
t3008 = t2900 * t3002 - t2902 * t2998;
t3014 = -t2905 * t3008 + t2909 * t3007;
t3015 = t2906 * t3000 + t2910 * t3014;
t3013 = t2905 * t3007 + t2909 * t3008;
t3016 = t2906 * t3014 - t2910 * t3000;
t3019 = -t2901 * t3013 + t2903 * t3016;
t3026 = -t2907 * t3019 + t2911 * t3015;
t3025 = t2907 * t3015 + t2911 * t3019;
t3020 = t2901 * t3016 + t2903 * t3013;
t2979 = t2865 * t2866;
t2830 = -t2962 - t2979;
t2989 = t2896 ^ 2;
t2999 = -t2956 * pkin(2) - t2989 * pkin(9);
t2904 = sin(qJ(6));
t2908 = cos(qJ(6));
t2889 = -g(1) * t2911 - g(2) * t2907;
t2912 = qJD(1) ^ 2;
t2870 = -pkin(1) * t2912 + pkin(8) * t2967 + t2889;
t2888 = t2907 * g(1) - t2911 * g(2);
t2925 = t2912 * t2901 * pkin(8) + qJDD(1) * pkin(1) + t2888;
t2923 = t2903 * t2925;
t2958 = t2906 * t2870 - t2910 * t2923;
t2839 = -g(3) * t2974 - t2958;
t2873 = (-pkin(2) * t2910 - pkin(9) * t2906) * t2901 * qJD(1);
t2853 = -pkin(3) * t2886 - qJ(4) * t2866;
t2991 = t2865 ^ 2;
t2996 = -t2929 * pkin(3) - t2991 * qJ(4) + t2866 * t2853 + qJDD(4);
t2997 = t2799 * pkin(4) - qJ(5) * t2919;
t2915 = -t2845 * pkin(5) + t2799 * pkin(10) + t2873 * t2966 - t2839 + t2996 + t2997 + t2999;
t2970 = t2910 * t2870 + t2906 * t2923;
t2985 = qJD(1) * t2873;
t2811 = t2956 * pkin(9) - t2989 * pkin(2) + (-g(3) * t2906 + t2910 * t2985) * t2901 + t2970;
t2986 = t2903 * g(3);
t2812 = -t2986 - t2874 * pkin(9) - t2968 * pkin(2) + ((pkin(2) * t2906 - pkin(9) * t2910) * t2896 * qJD(1) - t2925) * t2901;
t2772 = -t2905 * t2811 + t2909 * t2812;
t2978 = t2865 * t2886;
t2747 = (-t2836 + t2978) * qJ(4) + t2830 * pkin(3) + t2772;
t2773 = t2909 * t2811 + t2905 * t2812;
t2756 = -pkin(3) * t2991 + qJ(4) * t2929 + t2886 * t2853 + t2773;
t2960 = -t2902 * t2747 + t2900 * t2756;
t2928 = pkin(4) * t2962 - t2882 * qJ(5) + qJDD(5) + t2960;
t2916 = pkin(5) * t2998 + pkin(10) * t2962 + t2928;
t2973 = pkin(4) * t2846 - qJ(5) * t2848 + (2 * qJD(4));
t2953 = pkin(10) * t2846 + t2973;
t2828 = pkin(5) * t2848 + pkin(10) * t2886;
t2987 = -2 * qJD(5);
t2961 = -pkin(4) * t2886 + t2987;
t2954 = -t2828 + t2961;
t2913 = -t2904 * t2915 + t2908 * t2916 + (-t2904 * t2954 + t2908 * t2953) * t2848;
t2824 = -t2908 * t2846 - t2886 * t2904;
t2995 = t2824 ^ 2;
t2826 = t2846 * t2904 - t2886 * t2908;
t2994 = t2826 ^ 2;
t2844 = qJD(6) + t2848;
t2993 = t2844 ^ 2;
t2990 = t2866 ^ 2;
t2988 = -2 * qJD(4);
t2982 = t2826 * t2824;
t2976 = t2901 ^ 2 * t2912;
t2972 = qJD(6) - t2844;
t2971 = qJD(6) + t2844;
t2969 = t2886 + qJD(3);
t2964 = -t2993 - t2994;
t2959 = t2908 * t2799 + t2904 * t2962;
t2955 = t2896 * t2965;
t2674 = t2908 * t2915 + t2904 * t2916 + (t2904 * t2953 + t2908 * t2954) * t2848;
t2659 = t2904 * t2674 + t2908 * t2913;
t2939 = t2900 * t2747 + t2902 * t2756;
t2921 = -t2882 * pkin(4) - qJ(5) * t2962 - t2846 * t2973 + t2939;
t2691 = -t2799 * pkin(5) - t2845 * pkin(10) + (t2987 - t2828) * t2886 + t2921;
t2656 = -t2659 * t2902 + t2691 * t2900;
t2657 = t2659 * t2900 + t2691 * t2902;
t2651 = -t2656 * t2905 + t2657 * t2909;
t2660 = t2674 * t2908 - t2904 * t2913;
t2952 = t2651 * t2906 - t2660 * t2910;
t2700 = t2886 * t2987 + t2921;
t2701 = t2848 * t2973 + t2928;
t2677 = t2700 * t2900 - t2701 * t2902;
t2678 = t2700 * t2902 + t2701 * t2900;
t2664 = -t2677 * t2905 + t2678 * t2909;
t2810 = (g(3) * t2910 + t2906 * t2985) * t2901 + t2958 + t2999;
t2764 = t2810 + t2996;
t2722 = t2848 * t2961 + t2764 + t2997;
t2951 = t2664 * t2906 - t2722 * t2910;
t2716 = t2848 * t2988 - t2960;
t2717 = t2846 * t2988 + t2939;
t2689 = t2716 * t2902 + t2717 * t2900;
t2690 = -t2716 * t2900 + t2717 * t2902;
t2671 = -t2689 * t2905 + t2690 * t2909;
t2950 = t2671 * t2906 - t2764 * t2910;
t2752 = -t2826 * t2972 + t2959;
t2936 = -t2904 * t2799 + t2908 * t2962;
t2926 = t2824 * t2972 + t2936;
t2720 = t2904 * t2752 + t2908 * t2926;
t2767 = -t2994 - t2995;
t2706 = -t2720 * t2902 + t2767 * t2900;
t2707 = t2720 * t2900 + t2767 * t2902;
t2680 = -t2706 * t2905 + t2707 * t2909;
t2721 = t2752 * t2908 - t2904 * t2926;
t2949 = t2680 * t2906 - t2721 * t2910;
t2774 = -t2993 - t2995;
t2922 = -qJDD(6) - t2924;
t2917 = -t2922 - t2982;
t2730 = t2904 * t2774 + t2908 * t2917;
t2751 = t2826 * t2971 - t2959;
t2708 = -t2730 * t2902 + t2751 * t2900;
t2709 = t2730 * t2900 + t2751 * t2902;
t2686 = -t2708 * t2905 + t2709 * t2909;
t2731 = t2774 * t2908 - t2904 * t2917;
t2948 = t2686 * t2906 - t2731 * t2910;
t2758 = t2922 - t2982;
t2734 = t2904 * t2758 + t2908 * t2964;
t2753 = -t2824 * t2971 - t2936;
t2710 = -t2734 * t2902 + t2753 * t2900;
t2711 = t2734 * t2900 + t2753 * t2902;
t2688 = -t2710 * t2905 + t2711 * t2909;
t2735 = t2758 * t2908 - t2904 * t2964;
t2947 = t2688 * t2906 - t2735 * t2910;
t2741 = -t2772 * t2905 + t2773 * t2909;
t2940 = t2741 * t2906 - t2810 * t2910;
t2816 = -t2866 * t2969 - t2957;
t2818 = t2865 * t2969 + t2927;
t2776 = t2816 * t2909 - t2818 * t2905;
t2827 = -t2990 - t2991;
t2938 = t2776 * t2906 - t2827 * t2910;
t2837 = -t2882 - t2991;
t2791 = -t2830 * t2905 + t2837 * t2909;
t2815 = (qJD(3) - t2886) * t2866 + t2957;
t2937 = t2791 * t2906 - t2815 * t2910;
t2829 = t2962 - t2979;
t2851 = -t2882 - t2990;
t2803 = t2829 * t2909 - t2851 * t2905;
t2817 = t2836 + t2978;
t2935 = t2803 * t2906 - t2817 * t2910;
t2840 = -g(3) * t2975 + t2970;
t2934 = t2839 * t2910 + t2840 * t2906;
t2855 = t2955 - t2874;
t2877 = t2896 * t2966;
t2856 = t2877 + t2968;
t2933 = t2855 * t2910 + t2856 * t2906;
t2898 = t2906 ^ 2;
t2863 = -t2898 * t2976 - t2989;
t2885 = t2910 * t2906 * t2976;
t2872 = t2885 - t2956;
t2932 = t2863 * t2910 + t2872 * t2906;
t2871 = t2885 + t2956;
t2899 = t2910 ^ 2;
t2875 = -t2899 * t2976 - t2989;
t2931 = t2871 * t2910 + t2875 * t2906;
t2884 = -qJDD(1) * t2907 - t2911 * t2912;
t2883 = qJDD(1) * t2911 - t2907 * t2912;
t2876 = (-t2898 - t2899) * t2976;
t2859 = -t2901 * t2925 - t2986;
t2857 = t2877 - t2968;
t2854 = t2955 + t2874;
t2852 = -t2871 * t2906 + t2875 * t2910;
t2850 = -t2863 * t2906 + t2872 * t2910;
t2823 = -t2855 * t2906 + t2856 * t2910;
t2820 = -t2901 * t2857 + t2903 * t2931;
t2819 = t2903 * t2857 + t2901 * t2931;
t2814 = -t2901 * t2854 + t2903 * t2932;
t2813 = t2903 * t2854 + t2901 * t2932;
t2809 = -t2901 * t2876 + t2903 * t2933;
t2808 = t2903 * t2876 + t2901 * t2933;
t2802 = t2829 * t2905 + t2851 * t2909;
t2800 = -t2839 * t2906 + t2840 * t2910;
t2790 = t2830 * t2909 + t2837 * t2905;
t2789 = -t2901 * t2859 + t2903 * t2934;
t2788 = t2903 * t2859 + t2901 * t2934;
t2775 = t2816 * t2905 + t2818 * t2909;
t2766 = t2803 * t2910 + t2817 * t2906;
t2765 = t2791 * t2910 + t2815 * t2906;
t2759 = t2776 * t2910 + t2827 * t2906;
t2755 = -t2901 * t2802 + t2903 * t2935;
t2754 = t2903 * t2802 + t2901 * t2935;
t2749 = -t2901 * t2790 + t2903 * t2937;
t2748 = t2903 * t2790 + t2901 * t2937;
t2740 = t2772 * t2909 + t2773 * t2905;
t2733 = -t2901 * t2775 + t2903 * t2938;
t2732 = t2903 * t2775 + t2901 * t2938;
t2725 = t2741 * t2910 + t2810 * t2906;
t2703 = -t2901 * t2740 + t2903 * t2940;
t2702 = t2903 * t2740 + t2901 * t2940;
t2687 = t2710 * t2909 + t2711 * t2905;
t2685 = t2708 * t2909 + t2709 * t2905;
t2679 = t2706 * t2909 + t2707 * t2905;
t2676 = t2688 * t2910 + t2735 * t2906;
t2675 = t2686 * t2910 + t2731 * t2906;
t2672 = t2680 * t2910 + t2721 * t2906;
t2670 = t2689 * t2909 + t2690 * t2905;
t2669 = t2671 * t2910 + t2764 * t2906;
t2668 = -t2901 * t2687 + t2903 * t2947;
t2667 = t2903 * t2687 + t2901 * t2947;
t2666 = -t2901 * t2685 + t2903 * t2948;
t2665 = t2903 * t2685 + t2901 * t2948;
t2663 = t2677 * t2909 + t2678 * t2905;
t2662 = -t2901 * t2679 + t2903 * t2949;
t2661 = t2903 * t2679 + t2901 * t2949;
t2658 = t2664 * t2910 + t2722 * t2906;
t2655 = -t2901 * t2670 + t2903 * t2950;
t2654 = t2903 * t2670 + t2901 * t2950;
t2653 = -t2901 * t2663 + t2903 * t2951;
t2652 = t2903 * t2663 + t2901 * t2951;
t2650 = t2656 * t2909 + t2657 * t2905;
t2649 = t2651 * t2910 + t2660 * t2906;
t2648 = -t2901 * t2650 + t2903 * t2952;
t2647 = t2903 * t2650 + t2901 * t2952;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2884, -t2883, 0, -t2888 * t2907 + t2889 * t2911, 0, 0, 0, 0, 0, 0, -t2820 * t2907 + t2852 * t2911, -t2814 * t2907 + t2850 * t2911, -t2809 * t2907 + t2823 * t2911, -t2789 * t2907 + t2800 * t2911, 0, 0, 0, 0, 0, 0, -t2749 * t2907 + t2765 * t2911, -t2755 * t2907 + t2766 * t2911, -t2733 * t2907 + t2759 * t2911, -t2703 * t2907 + t2725 * t2911, 0, 0, 0, 0, 0, 0, -t3036, t3034, t3026, -t2655 * t2907 + t2669 * t2911, 0, 0, 0, 0, 0, 0, t3026, t3036, -t3034, -t2653 * t2907 + t2658 * t2911, 0, 0, 0, 0, 0, 0, -t2666 * t2907 + t2675 * t2911, -t2668 * t2907 + t2676 * t2911, -t2662 * t2907 + t2672 * t2911, -t2648 * t2907 + t2649 * t2911; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2883, t2884, 0, t2888 * t2911 + t2889 * t2907, 0, 0, 0, 0, 0, 0, t2820 * t2911 + t2852 * t2907, t2814 * t2911 + t2850 * t2907, t2809 * t2911 + t2823 * t2907, t2789 * t2911 + t2800 * t2907, 0, 0, 0, 0, 0, 0, t2749 * t2911 + t2765 * t2907, t2755 * t2911 + t2766 * t2907, t2733 * t2911 + t2759 * t2907, t2703 * t2911 + t2725 * t2907, 0, 0, 0, 0, 0, 0, t3035, -t3033, t3025, t2655 * t2911 + t2669 * t2907, 0, 0, 0, 0, 0, 0, t3025, -t3035, t3033, t2653 * t2911 + t2658 * t2907, 0, 0, 0, 0, 0, 0, t2666 * t2911 + t2675 * t2907, t2668 * t2911 + t2676 * t2907, t2662 * t2911 + t2672 * t2907, t2648 * t2911 + t2649 * t2907; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2819, t2813, t2808, t2788, 0, 0, 0, 0, 0, 0, t2748, t2754, t2732, t2702, 0, 0, 0, 0, 0, 0, t2692, -t2697, t3020, t2654, 0, 0, 0, 0, 0, 0, t3020, -t2692, t2697, t2652, 0, 0, 0, 0, 0, 0, t2665, t2667, t2661, t2647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2912, -qJDD(1), 0, t2889, 0, 0, 0, 0, 0, 0, t2852, t2850, t2823, t2800, 0, 0, 0, 0, 0, 0, t2765, t2766, t2759, t2725, 0, 0, 0, 0, 0, 0, t2718, -t2724, t3015, t2669, 0, 0, 0, 0, 0, 0, t3015, -t2718, t2724, t2658, 0, 0, 0, 0, 0, 0, t2675, t2676, t2672, t2649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2912, 0, t2888, 0, 0, 0, 0, 0, 0, t2820, t2814, t2809, t2789, 0, 0, 0, 0, 0, 0, t2749, t2755, t2733, t2703, 0, 0, 0, 0, 0, 0, t2694, -t2699, t3019, t2655, 0, 0, 0, 0, 0, 0, t3019, -t2694, t2699, t2653, 0, 0, 0, 0, 0, 0, t2666, t2668, t2662, t2648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2819, t2813, t2808, t2788, 0, 0, 0, 0, 0, 0, t2748, t2754, t2732, t2702, 0, 0, 0, 0, 0, 0, t2692, -t2697, t3020, t2654, 0, 0, 0, 0, 0, 0, t3020, -t2692, t2697, t2652, 0, 0, 0, 0, 0, 0, t2665, t2667, t2661, t2647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2875, t2872, t2856, t2840, 0, 0, 0, 0, 0, 0, t2791, t2803, t2776, t2741, 0, 0, 0, 0, 0, 0, t2728, -t2739, t3014, t2671, 0, 0, 0, 0, 0, 0, t3014, -t2728, t2739, t2664, 0, 0, 0, 0, 0, 0, t2686, t2688, t2680, t2651; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2871, t2863, t2855, t2839, 0, 0, 0, 0, 0, 0, -t2815, -t2817, -t2827, -t2810, 0, 0, 0, 0, 0, 0, -t3001, -t2919, -t3000, -t2764, 0, 0, 0, 0, 0, 0, -t3000, t3001, t2919, -t2722, 0, 0, 0, 0, 0, 0, -t2731, -t2735, -t2721, -t2660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2857, t2854, t2876, t2859, 0, 0, 0, 0, 0, 0, t2790, t2802, t2775, t2740, 0, 0, 0, 0, 0, 0, -t2727, t2736, t3013, t2670, 0, 0, 0, 0, 0, 0, t3013, t2727, -t2736, t2663, 0, 0, 0, 0, 0, 0, t2685, t2687, t2679, t2650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2837, t2829, t2816, t2773, 0, 0, 0, 0, 0, 0, t2762, -t2771, t3007, t2690, 0, 0, 0, 0, 0, 0, t3007, -t2762, t2771, t2678, 0, 0, 0, 0, 0, 0, t2709, t2711, t2707, t2657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2830, t2851, t2818, t2772, 0, 0, 0, 0, 0, 0, -t2761, t2768, t3008, t2689, 0, 0, 0, 0, 0, 0, t3008, t2761, -t2768, t2677, 0, 0, 0, 0, 0, 0, t2708, t2710, t2706, t2656; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2815, t2817, t2827, t2810, 0, 0, 0, 0, 0, 0, t3001, t2919, t3000, t2764, 0, 0, 0, 0, 0, 0, t3000, -t3001, -t2919, t2722, 0, 0, 0, 0, 0, 0, t2731, t2735, t2721, t2660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2801, t2930, t3002, t2717, 0, 0, 0, 0, 0, 0, t3002, -t2801, -t2930, t2700, 0, 0, 0, 0, 0, 0, t2751, t2753, t2767, t2691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2796, t2963, -t2998, t2716, 0, 0, 0, 0, 0, 0, -t2998, t2796, -t2963, -t2701, 0, 0, 0, 0, 0, 0, -t2730, -t2734, -t2720, -t2659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3001, t2919, t3000, t2764, 0, 0, 0, 0, 0, 0, t3000, -t3001, -t2919, t2722, 0, 0, 0, 0, 0, 0, t2731, t2735, t2721, t2660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3000, -t3001, -t2919, t2722, 0, 0, 0, 0, 0, 0, t2731, t2735, t2721, t2660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3002, t2801, t2930, -t2700, 0, 0, 0, 0, 0, 0, -t2751, -t2753, -t2767, -t2691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2998, -t2796, t2963, t2701, 0, 0, 0, 0, 0, 0, t2730, t2734, t2720, t2659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2774, t2758, t2752, t2674; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2917, t2964, t2926, t2913; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2751, t2753, t2767, t2691;];
f_new_reg  = t1;
