% Calculate vector of inverse dynamics joint torques for
% S6RRRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPPR6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPPR6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR6_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRPPR6_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:54:18
% EndTime: 2019-03-09 15:54:40
% DurationCPUTime: 16.63s
% Computational Cost: add. (11054->718), mult. (27477->943), div. (0->0), fcn. (21939->14), ass. (0->313)
t728 = sin(qJ(3));
t723 = sin(pkin(6));
t733 = cos(qJ(2));
t841 = qJD(1) * t733;
t810 = t723 * t841;
t786 = t728 * t810;
t838 = qJD(3) * t728;
t916 = t786 - t838;
t729 = sin(qJ(2));
t782 = pkin(2) * t729 - pkin(9) * t733;
t843 = qJD(1) * t723;
t645 = t782 * t843;
t732 = cos(qJ(3));
t628 = t732 * t645;
t811 = t729 * t843;
t725 = cos(pkin(6));
t842 = qJD(1) * t725;
t824 = pkin(1) * t842;
t644 = -pkin(8) * t811 + t733 * t824;
t726 = -qJ(4) - pkin(9);
t802 = qJD(3) * t726;
t860 = t732 * t733;
t915 = -t628 - (pkin(3) * t729 - qJ(4) * t860) * t843 + t732 * t802 + (t644 - qJD(4)) * t728;
t847 = t732 * t644 + t728 * t645;
t914 = -qJ(4) * t786 - qJD(4) * t732 - t728 * t802 + t847;
t829 = qJD(1) * qJD(2);
t805 = t733 * t829;
t827 = qJDD(1) * t729;
t913 = t805 + t827;
t678 = -qJD(3) + t810;
t722 = sin(pkin(11));
t724 = cos(pkin(11));
t837 = qJD(3) * t732;
t869 = t724 * t732;
t846 = t722 * t916 + t724 * t837 - t810 * t869;
t699 = qJD(2) + t842;
t787 = t728 * t811;
t622 = -t732 * t699 + t787;
t624 = t699 * t728 + t732 * t811;
t570 = t724 * t622 + t624 * t722;
t912 = pkin(5) * t570;
t731 = cos(qJ(6));
t727 = sin(qJ(6));
t880 = t678 * t727;
t540 = -t731 * t570 - t880;
t765 = -t622 * t722 + t724 * t624;
t901 = qJD(6) + t765;
t911 = t540 * t901;
t910 = t570 * t678;
t542 = t570 * t727 - t678 * t731;
t795 = t901 * t542;
t852 = t722 * t915 - t914 * t724;
t661 = t722 * t732 + t724 * t728;
t851 = t678 * t661;
t909 = t913 * t723;
t647 = pkin(8) * t810 + t729 * t824;
t908 = -pkin(3) * t916 - t647;
t730 = sin(qJ(1));
t862 = t730 * t733;
t734 = cos(qJ(1));
t863 = t729 * t734;
t657 = t725 * t863 + t862;
t719 = qJ(3) + pkin(11);
t715 = sin(t719);
t716 = cos(t719);
t871 = t723 * t734;
t590 = t657 * t715 + t716 * t871;
t858 = t733 * t734;
t864 = t729 * t730;
t656 = -t725 * t858 + t864;
t907 = t590 * t727 + t656 * t731;
t906 = t590 * t731 - t656 * t727;
t828 = qJDD(1) * t725;
t698 = qJDD(2) + t828;
t839 = qJD(2) * t733;
t807 = t728 * t839;
t558 = -t732 * t698 + t699 * t838 + t723 * (qJD(1) * (t729 * t837 + t807) + t728 * t827);
t905 = t765 ^ 2;
t904 = pkin(5) * t765;
t903 = t727 * t901;
t855 = t914 * t722 + t724 * t915;
t853 = qJ(5) * t811 - t852;
t872 = t723 * t733;
t896 = pkin(1) * t729;
t845 = pkin(8) * t872 + t725 * t896;
t636 = pkin(9) * t725 + t845;
t764 = -pkin(2) * t733 - pkin(9) * t729 - pkin(1);
t637 = t764 * t723;
t850 = t732 * t636 + t728 * t637;
t902 = -t846 * qJ(5) - qJD(5) * t661 + t908;
t658 = t725 * t862 + t863;
t750 = -g(1) * t658 - g(2) * t656 + g(3) * t872;
t609 = pkin(9) * t699 + t647;
t613 = qJD(1) * t637;
t556 = t609 * t732 + t613 * t728;
t535 = -qJ(4) * t622 + t556;
t531 = t722 * t535;
t555 = -t609 * t728 + t732 * t613;
t534 = -qJ(4) * t624 + t555;
t499 = t534 * t724 - t531;
t833 = -qJD(5) + t499;
t875 = t723 * t729;
t819 = t728 * t875;
t868 = t725 * t732;
t654 = t819 - t868;
t808 = t723 * t839;
t599 = -qJD(3) * t654 + t732 * t808;
t873 = t723 * t732;
t655 = t725 * t728 + t729 * t873;
t760 = t782 * qJD(2);
t646 = t723 * t760;
t700 = pkin(8) * t875;
t867 = t725 * t733;
t648 = (pkin(1) * t867 - t700) * qJD(2);
t744 = -qJD(3) * t850 + t732 * t646 - t648 * t728;
t840 = qJD(2) * t729;
t809 = t723 * t840;
t506 = pkin(3) * t809 - qJ(4) * t599 - qJD(4) * t655 + t744;
t598 = qJD(3) * t655 + t723 * t807;
t755 = -t636 * t838 + t637 * t837 + t728 * t646 + t732 * t648;
t511 = -qJ(4) * t598 - qJD(4) * t654 + t755;
t475 = t722 * t506 + t724 * t511;
t472 = -t723 * (qJ(5) * t840 - qJD(5) * t733) - t475;
t529 = -pkin(3) * t678 + t534;
t870 = t724 * t535;
t496 = t722 * t529 + t870;
t492 = qJ(5) * t678 - t496;
t480 = -t492 - t912;
t498 = t534 * t722 + t870;
t557 = -qJD(3) * t787 + t728 * t698 + t699 * t837 + t732 * t909;
t524 = t557 * t724 - t558 * t722;
t522 = qJDD(6) + t524;
t712 = -pkin(3) * t724 - pkin(4);
t708 = -pkin(10) + t712;
t900 = t708 * t522 + (t480 - t498 + t912) * t901;
t608 = -pkin(2) * t699 - t644;
t568 = pkin(3) * t622 + qJD(4) + t608;
t737 = -qJ(5) * t765 + t568;
t502 = pkin(4) * t570 + t737;
t659 = -t725 * t864 + t858;
t874 = t723 * t730;
t594 = t659 * t715 - t716 * t874;
t633 = t715 * t875 - t716 * t725;
t826 = qJDD(1) * t733;
t696 = t723 * t826;
t806 = t729 * t829;
t785 = t723 * t806;
t639 = qJDD(3) - t696 + t785;
t823 = pkin(1) * qJD(2) * t725;
t790 = qJD(1) * t823;
t822 = pkin(1) * t828;
t813 = -pkin(8) * t696 - t729 * t822 - t733 * t790;
t747 = -pkin(8) * t785 - t813;
t578 = pkin(9) * t698 + t747;
t580 = (qJD(1) * t760 + qJDD(1) * t764) * t723;
t743 = -qJD(3) * t556 - t728 * t578 + t732 * t580;
t478 = pkin(3) * t639 - qJ(4) * t557 - qJD(4) * t624 + t743;
t756 = -t732 * t578 - t728 * t580 + t609 * t838 - t613 * t837;
t483 = -qJ(4) * t558 - qJD(4) * t622 - t756;
t465 = t478 * t724 - t722 * t483;
t772 = qJDD(5) - t465;
t899 = -g(1) * t594 - g(2) * t590 - g(3) * t633 + t502 * t765 + t772;
t897 = pkin(4) + pkin(10);
t895 = pkin(4) * t639;
t894 = g(3) * t723;
t893 = MDP(6) * t723;
t523 = t557 * t722 + t724 * t558;
t835 = qJD(6) * t731;
t814 = t727 * t523 + t570 * t835 + t731 * t639;
t836 = qJD(6) * t727;
t487 = t678 * t836 + t814;
t892 = t487 * t731;
t891 = t498 * t765;
t890 = t522 * t727;
t889 = t540 * t570;
t888 = t542 * t570;
t887 = t622 * t678;
t886 = t624 * t678;
t883 = t657 * t728;
t882 = t659 * t728;
t660 = t722 * t728 - t869;
t881 = t660 * t727;
t879 = t698 * MDP(8);
t878 = t715 * t727;
t877 = t715 * t731;
t718 = t723 ^ 2;
t876 = t718 * qJD(1) ^ 2;
t866 = t726 * t729;
t865 = t727 * t733;
t517 = t731 * t522;
t861 = t731 * t733;
t859 = t732 * t734;
t466 = t722 * t478 + t724 * t483;
t797 = -t636 * t728 + t732 * t637;
t538 = -pkin(3) * t872 - qJ(4) * t655 + t797;
t548 = -qJ(4) * t654 + t850;
t510 = t722 * t538 + t724 * t548;
t857 = pkin(5) * t851 - t853;
t856 = -pkin(4) * t851 + t902;
t854 = pkin(4) * t811 - t855;
t713 = pkin(3) * t732 + pkin(2);
t849 = -t656 * t713 - t657 * t726;
t848 = -t658 * t713 - t659 * t726;
t649 = pkin(8) * t808 + t729 * t823;
t720 = t729 ^ 2;
t844 = -t733 ^ 2 + t720;
t834 = qJD(2) - t699;
t832 = -t833 + t904;
t825 = 0.2e1 * t718;
t821 = t733 * t876;
t820 = t723 * t865;
t818 = t728 * t874;
t817 = t730 * t873;
t816 = t723 * t861;
t815 = t723 * t859;
t685 = t728 * t871;
t460 = pkin(5) * t524 - t639 * t897 + t772;
t788 = pkin(8) * t909 + t729 * t790 - t733 * t822;
t579 = -pkin(2) * t698 + t788;
t527 = pkin(3) * t558 + qJDD(4) + t579;
t736 = -qJ(5) * t524 - qJD(5) * t765 + t527;
t463 = t523 * t897 + t736;
t801 = t731 * t460 - t727 * t463;
t474 = t506 * t724 - t722 * t511;
t800 = -t731 * t523 + t639 * t727;
t495 = t529 * t724 - t531;
t509 = t538 * t724 - t722 * t548;
t799 = t727 * t811 - t731 * t851;
t798 = t727 * t851 + t731 * t811;
t796 = t657 * t732 - t685;
t682 = t726 * t728;
t683 = t726 * t732;
t606 = -t724 * t682 - t683 * t722;
t794 = t901 * t731;
t793 = t699 + t842;
t792 = t698 + t828;
t791 = t897 * t875;
t789 = t639 * qJ(5) - qJD(5) * t678 + t466;
t783 = pkin(3) * t598 + t649;
t780 = g(1) * t656 - g(2) * t658;
t779 = g(1) * t659 + g(2) * t657;
t505 = pkin(4) * t872 - t509;
t777 = qJD(5) - t495;
t763 = -qJ(5) * t661 - t713;
t574 = t660 * t897 + t763;
t776 = -pkin(5) * t846 - qJD(1) * t791 + qJD(6) * t574 + t855;
t583 = pkin(5) * t661 + t606;
t775 = -qJD(6) * t583 + t851 * t897 - t902;
t774 = pkin(3) * t624 + qJ(5) * t570;
t773 = pkin(4) * t716 + qJ(5) * t715;
t771 = t734 * pkin(1) + pkin(3) * t818 + pkin(8) * t874 - t658 * t726 + t659 * t713;
t770 = t727 * t460 + t731 * t463;
t479 = t678 * t897 + t777 + t904;
t489 = t570 * t897 + t737;
t467 = t479 * t731 - t489 * t727;
t468 = t479 * t727 + t489 * t731;
t588 = -t654 * t722 + t655 * t724;
t490 = pkin(5) * t588 + pkin(10) * t872 + t505;
t587 = t724 * t654 + t655 * t722;
t635 = t700 + (-pkin(1) * t733 - pkin(2)) * t725;
t748 = pkin(3) * t654 + t635;
t742 = -qJ(5) * t588 + t748;
t501 = t587 * t897 + t742;
t768 = t490 * t731 - t501 * t727;
t767 = t490 * t727 + t501 * t731;
t607 = t682 * t722 - t683 * t724;
t504 = qJ(5) * t872 - t510;
t565 = t587 * t731 + t820;
t593 = -t657 * t716 + t715 * t871;
t761 = -t815 - t883;
t758 = -pkin(1) * t730 + pkin(3) * t685 + pkin(8) * t871 + t656 * t726 - t657 * t713;
t595 = t659 * t716 + t715 * t874;
t634 = t715 * t725 + t716 * t875;
t754 = -g(1) * t595 + g(2) * t593 - g(3) * t634;
t753 = t660 * t836 - t799;
t752 = t660 * t835 - t798;
t749 = g(3) * t875 + t779;
t746 = -pkin(9) * t639 - t608 * t678;
t547 = -t598 * t722 + t599 * t724;
t745 = -qJ(5) * t547 - qJD(5) * t588 + t783;
t740 = pkin(9) * qJD(3) * t678 - t579 - t750;
t739 = -t523 * t607 + t524 * t606 - t749;
t461 = -pkin(5) * t523 + t789;
t738 = t461 + (-qJD(6) * t708 + t765 * t897 + t774) * t901 + t754;
t469 = pkin(4) * t523 + t736;
t709 = pkin(3) * t722 + qJ(5);
t706 = pkin(3) * t868;
t680 = pkin(3) * t817;
t664 = t713 * t872;
t601 = t659 * t732 + t818;
t600 = t817 - t882;
t589 = pkin(4) * t660 + t763;
t584 = -pkin(5) * t660 + t607;
t566 = t587 * t727 - t816;
t561 = t594 * t727 + t658 * t731;
t560 = t594 * t731 - t658 * t727;
t546 = t724 * t598 + t599 * t722;
t525 = pkin(4) * t587 + t742;
t516 = pkin(4) * t765 + t774;
t513 = qJD(6) * t565 + t546 * t727 + t731 * t809;
t512 = -t731 * t546 - qJD(6) * t816 + (qJD(6) * t587 + t809) * t727;
t493 = -pkin(5) * t587 - t504;
t491 = pkin(4) * t678 + t777;
t488 = qJD(6) * t542 + t800;
t484 = pkin(4) * t546 + t745;
t476 = t546 * t897 + t745;
t473 = -pkin(4) * t809 - t474;
t471 = -pkin(5) * t546 - t472;
t470 = pkin(5) * t547 - qJD(2) * t791 - t474;
t464 = t772 - t895;
t458 = -t468 * qJD(6) + t801;
t457 = qJD(6) * t467 + t770;
t1 = [(-t649 * t699 - t700 * t698 - t788 * t725 + g(1) * t657 - g(2) * t659 + (t698 * t867 + (-t806 + t826) * t825) * pkin(1)) * MDP(9) + (t469 * t525 + t502 * t484 - t789 * t504 + t492 * t472 + t464 * t505 + t491 * t473 - g(1) * (pkin(4) * t593 - qJ(5) * t590 + t758) - g(2) * (pkin(4) * t595 + qJ(5) * t594 + t771)) * MDP(23) + (g(1) * t590 - g(2) * t594 - t469 * t588 + t472 * t678 - t484 * t765 - t502 * t547 - t504 * t639 - t524 * t525) * MDP(22) + (t464 * t588 + t472 * t570 + t473 * t765 + t491 * t547 + t492 * t546 + t504 * t523 + t505 * t524 - t587 * t789 + t780) * MDP(20) + ((t558 * t733 - t622 * t840) * MDP(14) + (-t492 * t840 - t733 * t789) * MDP(22) + (t555 * t840 - t733 * t743) * MDP(16) + (-t557 * t733 + t624 * t840) * MDP(13) + (-t464 * t733 + t491 * t840) * MDP(21) + (-g(1) * t859 - t556 * t840 - t733 * t756) * MDP(17) + (-t639 * t733 - t678 * t840) * MDP(15) + (t733 * t792 - t793 * t840) * MDP(7)) * t723 + (-t488 * t588 - t512 * t901 + t522 * t565 - t540 * t547) * MDP(27) + (t487 * t588 + t513 * t901 + t522 * t566 + t542 * t547) * MDP(26) + (t522 * t588 + t547 * t901) * MDP(28) + (-pkin(1) * t825 * t913 - t648 * t699 - t845 * t698 - t747 * t725 - t780) * MDP(10) + (-(qJD(6) * t768 + t470 * t727 + t476 * t731) * t901 - t767 * t522 - t457 * t588 - t468 * t547 + t471 * t542 + t493 * t487 + t461 * t566 + t480 * t513 + g(1) * t906 - g(2) * t560) * MDP(30) + ((-qJD(6) * t767 + t470 * t731 - t476 * t727) * t901 + t768 * t522 + t458 * t588 + t467 * t547 + t471 * t540 + t493 * t488 - t461 * t565 + t480 * t512 + g(1) * t907 - g(2) * t561) * MDP(29) + (-t465 * t588 - t466 * t587 - t474 * t765 - t475 * t570 - t495 * t547 - t496 * t546 - t509 * t524 - t510 * t523 + t780) * MDP(18) + (t487 * t565 - t488 * t566 - t512 * t542 - t513 * t540) * MDP(25) + (t487 * t566 + t513 * t542) * MDP(24) + qJDD(1) * MDP(1) + (-g(1) * t758 - g(2) * t771 + t465 * t509 + t466 * t510 + t495 * t474 + t496 * t475 + t527 * t748 + t568 * t783) * MDP(19) + (t557 * t655 + t599 * t624) * MDP(11) + (-t557 * t654 - t558 * t655 - t598 * t624 - t599 * t622) * MDP(12) + (g(1) * t730 - g(2) * t734) * MDP(2) + (g(1) * t734 + g(2) * t730) * MDP(3) + (g(1) * t593 + g(2) * t595 - t469 * t587 - t473 * t678 - t484 * t570 - t502 * t546 + t505 * t639 - t523 * t525) * MDP(21) + (t598 * t678 - t639 * t654) * MDP(14) + (-t599 * t678 + t639 * t655) * MDP(13) + ((qJDD(1) * t720 + 0.2e1 * t729 * t805) * MDP(4) + 0.2e1 * (t729 * t826 - t829 * t844) * MDP(5)) * t718 + t725 * t879 + (t729 * t792 + t793 * t839) * t893 + (g(1) * t796 - g(2) * t601 + t635 * t558 + t579 * t654 + t608 * t598 + t649 * t622 + t797 * t639 - t744 * t678) * MDP(16) + (-g(1) * t883 - g(2) * t600 + t635 * t557 + t579 * t655 + t608 * t599 + t649 * t624 - t850 * t639 + t755 * t678) * MDP(17); (t487 * t881 + t542 * t752) * MDP(24) + t879 - t729 * MDP(4) * t821 + (t557 * t728 - t732 * t886) * MDP(11) + ((t557 + t887) * t732 + (-t558 + t886) * t728) * MDP(12) + (-t469 * t660 - t491 * t811 + t502 * t851 - t523 * t589 - t570 * t856 + t606 * t639 - t678 * t854 + t716 * t750) * MDP(21) + (t647 * t699 + t876 * t896 - t750 - t788) * MDP(9) + (t469 * t589 + t789 * t607 + t464 * t606 - g(1) * (-t658 * t773 + t848) - g(2) * (-t656 * t773 + t849) - g(3) * t664 - (t733 * t773 - t866) * t894 + t856 * t502 + t853 * t492 + t854 * t491) * MDP(23) + (t464 * t661 + t491 * t846 - t492 * t851 + t570 * t853 - t660 * t789 + t765 * t854 + t739) * MDP(20) + (t487 * t661 + t522 * t881 + t542 * t846 + t752 * t901) * MDP(26) + ((-t574 * t727 + t583 * t731) * t522 + t458 * t661 + t584 * t488 - t461 * t731 * t660 - g(1) * (-t658 * t878 + t659 * t731) - g(2) * (-t656 * t878 + t657 * t731) - (t715 * t865 + t729 * t731) * t894 + (t727 * t775 - t731 * t776) * t901 + t857 * t540 + t846 * t467 + t753 * t480) * MDP(29) + (-(t574 * t731 + t583 * t727) * t522 - t457 * t661 + t584 * t487 + t461 * t881 - g(1) * (-t658 * t877 - t659 * t727) - g(2) * (-t656 * t877 - t657 * t727) - (t715 * t861 - t727 * t729) * t894 + (t727 * t776 + t731 * t775) * t901 + t857 * t542 - t846 * t468 + t752 * t480) * MDP(30) + (t522 * t661 + t846 * t901) * MDP(28) + (-t488 * t661 + t517 * t660 - t540 * t846 - t753 * t901) * MDP(27) + (t678 * t838 + t639 * t732 + (-t678 * t728 * t733 + t622 * t729) * t843) * MDP(14) + (-pkin(2) * t557 + t556 * t811 - t647 * t624 - t678 * t847 - t728 * t740 + t732 * t746) * MDP(17) + (-t811 * t834 + t696) * MDP(7) + (pkin(1) * t821 + t644 * t699 + (pkin(8) * t829 + g(3)) * t875 + t779 + t813) * MDP(10) + (-t555 * t811 - pkin(2) * t558 - t647 * t622 + t628 * t678 + (-t644 * t678 + t746) * t728 + t740 * t732) * MDP(16) + (-t678 * t837 + t728 * t639 + (-t624 * t729 + t678 * t860) * t843) * MDP(13) + (-t465 * t661 - t466 * t660 - t495 * t846 + t496 * t851 - t570 * t852 - t765 * t855 + t739) * MDP(18) + (-t469 * t661 + t492 * t811 - t502 * t846 - t524 * t589 + t607 * t639 + t678 * t853 - t715 * t750 - t765 * t856) * MDP(22) + (t466 * t607 - t465 * t606 - t527 * t713 - g(1) * t848 - g(2) * t849 - g(3) * (-t723 * t866 + t664) + t908 * t568 + t852 * t496 + t855 * t495) * MDP(19) + t678 * MDP(15) * t811 + (t799 * t542 + t798 * t540 + (t892 - t488 * t727 + (-t540 * t731 - t542 * t727) * qJD(6)) * t660) * MDP(25) + t844 * MDP(5) * t876 + (t834 * t841 + t827) * t893; t624 * t622 * MDP(11) + (-t622 ^ 2 + t624 ^ 2) * MDP(12) + (t557 - t887) * MDP(13) + (-t558 - t886) * MDP(14) + t639 * MDP(15) + (-g(1) * t600 - g(2) * t761 + g(3) * t654 - t556 * t678 - t608 * t624 + t743) * MDP(16) + (g(1) * t601 + g(2) * t796 + g(3) * t655 - t555 * t678 + t608 * t622 + t756) * MDP(17) + (t496 * t765 - t891 + (-t523 * t722 - t524 * t724) * pkin(3) + (-t495 + t499) * t570) * MDP(18) + (-g(1) * t680 - g(3) * t706 + t495 * t498 - t496 * t499 + (g(2) * t815 + t465 * t724 + t466 * t722 - t568 * t624 + t728 * t749) * pkin(3)) * MDP(19) + (-t492 * t765 - t523 * t709 + t524 * t712 - t891 + (t491 + t833) * t570) * MDP(20) + (t498 * t678 + t516 * t570 + (-pkin(4) + t712) * t639 + t899) * MDP(21) + (-t502 * t570 + t516 * t765 + t639 * t709 + t678 * t833 + t754 + t789) * MDP(22) + (t789 * t709 + t464 * t712 - t502 * t516 - t491 * t498 - g(1) * (-pkin(3) * t882 - pkin(4) * t594 + qJ(5) * t595 + t680) - g(2) * (pkin(3) * t761 - pkin(4) * t590 - qJ(5) * t593) - g(3) * (-pkin(3) * t819 - pkin(4) * t633 + qJ(5) * t634 + t706) + t833 * t492) * MDP(23) + (-t727 * t795 + t892) * MDP(24) + ((-t488 - t795) * t731 + (-t487 + t911) * t727) * MDP(25) + (-t901 * t903 + t517 + t888) * MDP(26) + (-t794 * t901 - t889 - t890) * MDP(27) + t901 * t570 * MDP(28) + (t467 * t570 + t709 * t488 + t832 * t540 + t738 * t727 + t731 * t900) * MDP(29) + (-t468 * t570 + t709 * t487 + t832 * t542 - t727 * t900 + t738 * t731) * MDP(30); (t495 * t765 + t496 * t570 + t527 + t750) * MDP(19) + (t678 * t765 - t523) * MDP(21) + (-t524 - t910) * MDP(22) + (-t491 * t765 - t492 * t570 + t469 + t750) * MDP(23) + (t889 - t890) * MDP(29) + (-t517 + t888) * MDP(30) + (-MDP(29) * t794 + MDP(30) * t903) * t901 + (MDP(18) + MDP(20)) * (-t570 ^ 2 - t905); (t524 - t910) * MDP(20) + (-t570 * t765 + t639) * MDP(21) + (-t678 ^ 2 - t905) * MDP(22) + (-t492 * t678 - t895 + t899) * MDP(23) + (t540 * t678 + t517) * MDP(29) + (t542 * t678 - t890) * MDP(30) - (MDP(29) * t727 + MDP(30) * t731) * t901 ^ 2; t542 * t540 * MDP(24) + (-t540 ^ 2 + t542 ^ 2) * MDP(25) + (t814 + t911) * MDP(26) + (-t800 + t795) * MDP(27) + t522 * MDP(28) + (t468 * t901 - t480 * t542 - g(1) * t560 - g(2) * t906 - g(3) * (t633 * t731 + t820) + t801) * MDP(29) + (t467 * t901 + t480 * t540 + g(1) * t561 + g(2) * t907 - g(3) * (-t633 * t727 + t816) - t770) * MDP(30) + (MDP(26) * t880 - MDP(27) * t542 - MDP(29) * t468 - MDP(30) * t467) * qJD(6);];
tau  = t1;
