% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPR6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR6_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:53:58
% EndTime: 2019-03-09 15:54:18
% DurationCPUTime: 9.59s
% Computational Cost: add. (10967->626), mult. (27379->845), div. (0->0), fcn. (21939->14), ass. (0->313)
t272 = sin(qJ(3));
t267 = sin(pkin(6));
t277 = cos(qJ(2));
t379 = qJD(1) * t277;
t352 = t267 * t379;
t331 = t272 * t352;
t376 = qJD(3) * t272;
t456 = t331 - t376;
t273 = sin(qJ(2));
t324 = pkin(2) * t273 - pkin(9) * t277;
t381 = qJD(1) * t267;
t189 = t324 * t381;
t276 = cos(qJ(3));
t172 = t276 * t189;
t353 = t273 * t381;
t269 = cos(pkin(6));
t380 = qJD(1) * t269;
t365 = pkin(1) * t380;
t188 = -pkin(8) * t353 + t277 * t365;
t270 = -qJ(4) - pkin(9);
t344 = qJD(3) * t270;
t394 = t276 * t277;
t455 = t276 * t344 - t172 - (pkin(3) * t273 - qJ(4) * t394) * t381 + (-qJD(4) + t188) * t272;
t385 = t276 * t188 + t272 * t189;
t454 = qJ(4) * t331 + qJD(4) * t276 + t272 * t344 - t385;
t370 = qJD(1) * qJD(2);
t347 = t277 * t370;
t368 = qJDD(1) * t273;
t453 = t347 + t368;
t266 = sin(pkin(11));
t268 = cos(pkin(11));
t375 = qJD(3) * t276;
t403 = t268 * t276;
t384 = t266 * t456 + t268 * t375 - t352 * t403;
t271 = sin(qJ(6));
t275 = cos(qJ(6));
t243 = qJD(2) + t380;
t332 = t272 * t353;
t166 = -t276 * t243 + t332;
t168 = t243 * t272 + t276 * t353;
t310 = -t166 * t266 + t268 * t168;
t440 = qJD(6) + t310;
t340 = t440 ^ 2;
t369 = qJDD(1) * t269;
t242 = qJDD(2) + t369;
t448 = t453 * t267;
t101 = -qJD(3) * t332 + t272 * t242 + t243 * t375 + t448 * t276;
t377 = qJD(2) * t277;
t349 = t272 * t377;
t102 = -t276 * t242 + t243 * t376 + t267 * (qJD(1) * (t273 * t375 + t349) + t272 * t368);
t68 = t101 * t268 - t102 * t266;
t66 = qJDD(6) + t68;
t295 = -t271 * t66 - t275 * t340;
t114 = t268 * t166 + t168 * t266;
t452 = pkin(5) * t114;
t222 = -qJD(3) + t352;
t84 = -t275 * t114 - t222 * t271;
t451 = t440 * t84;
t420 = t266 * t455 + t454 * t268;
t339 = t440 * t271;
t61 = t275 * t66;
t450 = t440 * t339 - t61;
t449 = t114 * t222;
t205 = t266 * t276 + t268 * t272;
t147 = t205 * t352;
t196 = t205 * qJD(3);
t389 = t147 - t196;
t191 = pkin(8) * t352 + t273 * t365;
t447 = -pkin(3) * t456 - t191;
t274 = sin(qJ(1));
t396 = t274 * t277;
t278 = cos(qJ(1));
t397 = t273 * t278;
t201 = t269 * t397 + t396;
t263 = qJ(3) + pkin(11);
t259 = sin(t263);
t260 = cos(t263);
t404 = t267 * t278;
t134 = t201 * t259 + t260 * t404;
t392 = t277 * t278;
t398 = t273 * t274;
t200 = -t269 * t392 + t398;
t446 = t134 * t271 + t200 * t275;
t445 = t134 * t275 - t200 * t271;
t444 = t310 ^ 2;
t262 = t267 ^ 2;
t366 = 0.2e1 * t262;
t443 = pkin(5) * t310;
t422 = t454 * t266 - t268 * t455;
t421 = qJ(5) * t353 - t420;
t153 = pkin(9) * t243 + t191;
t309 = -pkin(2) * t277 - pkin(9) * t273 - pkin(1);
t181 = t309 * t267;
t157 = qJD(1) * t181;
t100 = t153 * t276 + t157 * t272;
t79 = -qJ(4) * t166 + t100;
t75 = t266 * t79;
t99 = -t153 * t272 + t276 * t157;
t78 = -qJ(4) * t168 + t99;
t43 = t268 * t78 - t75;
t391 = -qJD(5) + t43;
t405 = t267 * t277;
t434 = pkin(1) * t273;
t383 = pkin(8) * t405 + t269 * t434;
t180 = pkin(9) * t269 + t383;
t388 = t276 * t180 + t272 * t181;
t441 = -t384 * qJ(5) - qJD(5) * t205 + t447;
t202 = t269 * t396 + t397;
t294 = -g(1) * t202 - g(2) * t200 + g(3) * t405;
t439 = t440 - qJD(6);
t408 = t267 * t273;
t360 = t272 * t408;
t402 = t269 * t276;
t198 = t360 - t402;
t350 = t267 * t377;
t143 = -qJD(3) * t198 + t276 * t350;
t406 = t267 * t276;
t199 = t269 * t272 + t273 * t406;
t305 = t324 * qJD(2);
t190 = t267 * t305;
t244 = pkin(8) * t408;
t401 = t269 * t277;
t192 = (pkin(1) * t401 - t244) * qJD(2);
t288 = -qJD(3) * t388 + t276 * t190 - t192 * t272;
t378 = qJD(2) * t273;
t351 = t267 * t378;
t50 = pkin(3) * t351 - qJ(4) * t143 - qJD(4) * t199 + t288;
t142 = qJD(3) * t199 + t267 * t349;
t300 = -t180 * t376 + t181 * t375 + t272 * t190 + t276 * t192;
t55 = -qJ(4) * t142 - qJD(4) * t198 + t300;
t19 = t266 * t50 + t268 * t55;
t16 = -t267 * (qJ(5) * t378 - qJD(5) * t277) - t19;
t427 = t268 * t79;
t73 = -pkin(3) * t222 + t78;
t40 = t266 * t73 + t427;
t36 = qJ(5) * t222 - t40;
t24 = -t36 - t452;
t256 = -pkin(3) * t268 - pkin(4);
t252 = -pkin(10) + t256;
t42 = t266 * t78 + t427;
t438 = t252 * t66 + (t24 - t42 + t452) * t440;
t203 = -t269 * t398 + t392;
t407 = t267 * t274;
t138 = t203 * t259 - t260 * t407;
t177 = t259 * t408 - t260 * t269;
t367 = qJDD(1) * t277;
t240 = t267 * t367;
t348 = t273 * t370;
t330 = t267 * t348;
t183 = qJDD(3) - t240 + t330;
t364 = pkin(1) * qJD(2) * t269;
t334 = qJD(1) * t364;
t363 = pkin(1) * t369;
t355 = -pkin(8) * t240 - t273 * t363 - t277 * t334;
t291 = -pkin(8) * t330 - t355;
t122 = pkin(9) * t242 + t291;
t124 = (qJD(1) * t305 + qJDD(1) * t309) * t267;
t287 = -qJD(3) * t100 - t272 * t122 + t276 * t124;
t22 = pkin(3) * t183 - qJ(4) * t101 - qJD(4) * t168 + t287;
t301 = -t276 * t122 - t272 * t124 + t153 * t376 - t157 * t375;
t27 = -qJ(4) * t102 - qJD(4) * t166 - t301;
t9 = t22 * t268 - t266 * t27;
t319 = qJDD(5) - t9;
t152 = -pkin(2) * t243 - t188;
t112 = pkin(3) * t166 + qJD(4) + t152;
t281 = -qJ(5) * t310 + t112;
t46 = pkin(4) * t114 + t281;
t437 = -g(1) * t138 - g(2) * t134 - g(3) * t177 + t310 * t46 + t319;
t435 = pkin(4) + pkin(10);
t433 = pkin(4) * t183;
t432 = g(3) * t267;
t10 = t266 * t22 + t268 * t27;
t342 = -t180 * t272 + t276 * t181;
t82 = -pkin(3) * t405 - qJ(4) * t199 + t342;
t92 = -qJ(4) * t198 + t388;
t54 = t266 * t82 + t268 * t92;
t431 = t389 * pkin(5) - t421;
t430 = t114 * t84;
t86 = t114 * t271 - t222 * t275;
t429 = t114 * t86;
t428 = t310 * t42;
t373 = qJD(6) * t275;
t374 = qJD(6) * t271;
t67 = t101 * t266 + t268 * t102;
t31 = t114 * t373 + t275 * t183 + t222 * t374 + t271 * t67;
t425 = t275 * t31;
t424 = -t389 * pkin(4) + t441;
t423 = pkin(4) * t353 + t422;
t419 = t166 * t222;
t418 = t168 * t222;
t415 = t201 * t272;
t414 = t203 * t272;
t204 = t266 * t272 - t403;
t413 = t204 * t271;
t412 = t204 * t275;
t411 = t259 * t271;
t410 = t259 * t275;
t409 = t262 * qJD(1) ^ 2;
t400 = t270 * t273;
t399 = t271 * t277;
t395 = t275 * t277;
t393 = t276 * t278;
t390 = -t391 + t443;
t257 = pkin(3) * t276 + pkin(2);
t387 = -t200 * t257 - t201 * t270;
t386 = -t202 * t257 - t203 * t270;
t193 = pkin(8) * t350 + t273 * t364;
t264 = t273 ^ 2;
t382 = -t277 ^ 2 + t264;
t372 = qJD(2) - t243;
t362 = t277 * t409;
t361 = t267 * t399;
t359 = t272 * t407;
t358 = t274 * t406;
t357 = t267 * t395;
t356 = t267 * t393;
t229 = t272 * t404;
t18 = -t266 * t55 + t268 * t50;
t39 = t268 * t73 - t75;
t53 = -t266 * t92 + t268 * t82;
t343 = t183 * t271 - t275 * t67;
t341 = t201 * t276 - t229;
t226 = t270 * t272;
t227 = t270 * t276;
t150 = -t268 * t226 - t227 * t266;
t338 = t183 * qJ(5) - qJD(5) * t222 + t10;
t337 = t243 + t380;
t336 = t242 + t369;
t335 = t435 * t408;
t333 = t448 * pkin(8) + t273 * t334 - t277 * t363;
t328 = pkin(3) * t142 + t193;
t49 = pkin(4) * t405 - t53;
t327 = qJD(5) - t39;
t308 = -qJ(5) * t205 - t257;
t118 = t435 * t204 + t308;
t326 = -t384 * pkin(5) - qJD(1) * t335 + qJD(6) * t118 - t422;
t127 = pkin(5) * t205 + t150;
t325 = -qJD(6) * t127 + t389 * t435 - t441;
t322 = g(1) * t200 - g(2) * t202;
t321 = g(1) * t203 + g(2) * t201;
t4 = pkin(5) * t68 - t435 * t183 + t319;
t123 = -pkin(2) * t242 + t333;
t71 = pkin(3) * t102 + qJDD(4) + t123;
t280 = -qJ(5) * t68 - qJD(5) * t310 + t71;
t7 = t435 * t67 + t280;
t320 = t271 * t4 + t275 * t7;
t317 = pkin(3) * t168 + qJ(5) * t114;
t316 = pkin(4) * t260 + qJ(5) * t259;
t23 = t435 * t222 + t327 + t443;
t33 = t435 * t114 + t281;
t11 = t23 * t275 - t271 * t33;
t12 = t23 * t271 + t275 * t33;
t132 = -t198 * t266 + t199 * t268;
t34 = pkin(5) * t132 + pkin(10) * t405 + t49;
t131 = t268 * t198 + t199 * t266;
t179 = t244 + (-pkin(1) * t277 - pkin(2)) * t269;
t292 = pkin(3) * t198 + t179;
t286 = -qJ(5) * t132 + t292;
t45 = t435 * t131 + t286;
t314 = -t271 * t45 + t275 * t34;
t313 = t271 * t34 + t275 * t45;
t312 = t278 * pkin(1) + pkin(3) * t359 + pkin(8) * t407 - t202 * t270 + t203 * t257;
t311 = -t114 ^ 2 - t444;
t151 = t226 * t266 - t227 * t268;
t48 = qJ(5) * t405 - t54;
t109 = t131 * t275 + t361;
t137 = -t201 * t260 + t259 * t404;
t306 = -t356 - t415;
t303 = -pkin(1) * t274 + pkin(3) * t229 + pkin(8) * t404 + t200 * t270 - t201 * t257;
t139 = t203 * t260 + t259 * t407;
t178 = t259 * t269 + t260 * t408;
t299 = -g(1) * t139 + g(2) * t137 - g(3) * t178;
t129 = -t275 * t147 + t271 * t353;
t298 = -t196 * t275 + t204 * t374 - t129;
t130 = t147 * t271 + t275 * t353;
t297 = t196 * t271 + t204 * t373 - t130;
t293 = g(3) * t408 + t321;
t290 = -pkin(9) * t183 - t152 * t222;
t91 = -t142 * t266 + t143 * t268;
t289 = -qJ(5) * t91 - qJD(5) * t132 + t328;
t2 = -qJD(6) * t12 - t271 * t7 + t275 * t4;
t284 = pkin(9) * qJD(3) * t222 - t123 - t294;
t283 = t150 * t68 - t151 * t67 - t293;
t5 = -pkin(5) * t67 + t338;
t282 = t5 + (-qJD(6) * t252 + t310 * t435 + t317) * t440 + t299;
t13 = pkin(4) * t67 + t280;
t253 = pkin(3) * t266 + qJ(5);
t250 = pkin(3) * t402;
t224 = pkin(3) * t358;
t208 = t257 * t405;
t145 = t203 * t276 + t359;
t144 = t358 - t414;
t133 = pkin(4) * t204 + t308;
t128 = -pkin(5) * t204 + t151;
t110 = t131 * t271 - t357;
t105 = t138 * t271 + t202 * t275;
t104 = t138 * t275 - t202 * t271;
t90 = t268 * t142 + t143 * t266;
t69 = pkin(4) * t131 + t286;
t60 = pkin(4) * t310 + t317;
t57 = qJD(6) * t109 + t271 * t90 + t275 * t351;
t56 = -qJD(6) * t357 - t275 * t90 + (qJD(6) * t131 + t351) * t271;
t37 = -pkin(5) * t131 - t48;
t35 = pkin(4) * t222 + t327;
t32 = qJD(6) * t86 + t343;
t28 = pkin(4) * t90 + t289;
t20 = t435 * t90 + t289;
t17 = -pkin(4) * t351 - t18;
t15 = -pkin(5) * t90 - t16;
t14 = pkin(5) * t91 - qJD(2) * t335 - t18;
t8 = t319 - t433;
t1 = t11 * qJD(6) + t320;
t3 = [qJDD(1), g(1) * t274 - g(2) * t278, g(1) * t278 + g(2) * t274 (qJDD(1) * t264 + 0.2e1 * t273 * t347) * t262 (t273 * t367 - t370 * t382) * t366 (t273 * t336 + t337 * t377) * t267 (t277 * t336 - t337 * t378) * t267, t242 * t269, -t193 * t243 - t244 * t242 - t333 * t269 + g(1) * t201 - g(2) * t203 + (t242 * t401 + (-t348 + t367) * t366) * pkin(1), -pkin(1) * t366 * t453 - t192 * t243 - t383 * t242 - t291 * t269 - t322, t101 * t199 + t143 * t168, -t101 * t198 - t102 * t199 - t142 * t168 - t143 * t166, -t143 * t222 + t183 * t199 + (-t101 * t277 + t168 * t378) * t267, t142 * t222 - t183 * t198 + (t102 * t277 - t166 * t378) * t267 (-t183 * t277 - t222 * t378) * t267, -t288 * t222 + t342 * t183 + t193 * t166 + t179 * t102 + t123 * t198 + t152 * t142 + g(1) * t341 - g(2) * t145 + (-t277 * t287 + t378 * t99) * t267, t300 * t222 - t388 * t183 + t193 * t168 + t179 * t101 + t123 * t199 + t152 * t143 - g(1) * t415 - g(2) * t144 + (-g(1) * t393 - t100 * t378 - t277 * t301) * t267, -t10 * t131 - t114 * t19 - t132 * t9 - t18 * t310 - t39 * t91 - t40 * t90 - t53 * t68 - t54 * t67 + t322, -g(1) * t303 - g(2) * t312 + t10 * t54 + t112 * t328 + t39 * t18 + t40 * t19 + t292 * t71 + t9 * t53, t114 * t16 - t131 * t338 + t132 * t8 + t17 * t310 + t35 * t91 + t36 * t90 + t48 * t67 + t49 * t68 + t322, g(1) * t137 + g(2) * t139 - t114 * t28 - t13 * t131 - t17 * t222 + t183 * t49 - t46 * t90 - t67 * t69 + (-t277 * t8 + t35 * t378) * t267, g(1) * t134 - g(2) * t138 - t310 * t28 - t13 * t132 + t16 * t222 - t183 * t48 - t46 * t91 - t68 * t69 + (-t277 * t338 - t36 * t378) * t267, t13 * t69 + t46 * t28 - t338 * t48 + t36 * t16 + t8 * t49 + t35 * t17 - g(1) * (pkin(4) * t137 - qJ(5) * t134 + t303) - g(2) * (pkin(4) * t139 + qJ(5) * t138 + t312) t110 * t31 + t57 * t86, t109 * t31 - t110 * t32 - t56 * t86 - t57 * t84, t110 * t66 + t132 * t31 + t440 * t57 + t86 * t91, t109 * t66 - t132 * t32 - t440 * t56 - t84 * t91, t132 * t66 + t440 * t91 (-qJD(6) * t313 + t14 * t275 - t20 * t271) * t440 + t314 * t66 + t2 * t132 + t11 * t91 + t15 * t84 + t37 * t32 - t5 * t109 + t24 * t56 + g(1) * t446 - g(2) * t105 -(qJD(6) * t314 + t14 * t271 + t20 * t275) * t440 - t313 * t66 - t1 * t132 - t12 * t91 + t15 * t86 + t37 * t31 + t5 * t110 + t24 * t57 + g(1) * t445 - g(2) * t104; 0, 0, 0, -t273 * t362, t382 * t409 (t372 * t379 + t368) * t267, -t353 * t372 + t240, t242, t191 * t243 + t409 * t434 - t294 - t333, pkin(1) * t362 + t188 * t243 + (pkin(8) * t370 + g(3)) * t408 + t321 + t355, t101 * t272 - t276 * t418 (t101 + t419) * t276 + (-t102 + t418) * t272, -t222 * t375 + t183 * t272 + (-t168 * t273 + t222 * t394) * t381, t222 * t376 + t183 * t276 + (-t222 * t272 * t277 + t166 * t273) * t381, t222 * t353, -t99 * t353 - pkin(2) * t102 - t191 * t166 + t172 * t222 + (-t188 * t222 + t290) * t272 + t284 * t276, -pkin(2) * t101 + t100 * t353 - t191 * t168 - t222 * t385 - t272 * t284 + t276 * t290, -t10 * t204 - t114 * t420 - t205 * t9 + t310 * t422 - t384 * t39 + t389 * t40 + t283, t10 * t151 - t9 * t150 - t71 * t257 - g(1) * t386 - g(2) * t387 - g(3) * (-t267 * t400 + t208) + t420 * t40 - t422 * t39 + t447 * t112, t114 * t421 - t204 * t338 + t205 * t8 + t310 * t423 + t35 * t384 - t36 * t389 + t283, -t114 * t424 - t13 * t204 - t133 * t67 + t150 * t183 - t222 * t423 + t260 * t294 - t35 * t353 + t389 * t46, -t13 * t205 - t133 * t68 + t151 * t183 + t222 * t421 - t259 * t294 - t310 * t424 + t353 * t36 - t384 * t46, t13 * t133 + t338 * t151 + t8 * t150 - g(1) * (-t202 * t316 + t386) - g(2) * (-t200 * t316 + t387) - g(3) * t208 + t424 * t46 + t421 * t36 + t423 * t35 - (t277 * t316 - t400) * t432, t297 * t86 + t31 * t413, t129 * t86 + t130 * t84 + (-t271 * t84 + t275 * t86) * t196 + (-t271 * t32 + t425 + (-t271 * t86 - t275 * t84) * qJD(6)) * t204, t205 * t31 + t297 * t440 + t384 * t86 + t413 * t66, -t205 * t32 - t298 * t440 - t384 * t84 + t412 * t66, t205 * t66 + t384 * t440 (-t118 * t271 + t127 * t275) * t66 + t2 * t205 + t128 * t32 - t5 * t412 - g(1) * (-t202 * t411 + t203 * t275) - g(2) * (-t200 * t411 + t201 * t275) + t431 * t84 - (t259 * t399 + t273 * t275) * t432 + (t271 * t325 - t275 * t326) * t440 + t384 * t11 + t298 * t24 -(t118 * t275 + t127 * t271) * t66 - t1 * t205 + t128 * t31 + t5 * t413 - g(1) * (-t202 * t410 - t203 * t271) - g(2) * (-t200 * t410 - t201 * t271) + t431 * t86 - (t259 * t395 - t271 * t273) * t432 - t384 * t12 + (t271 * t326 + t275 * t325) * t440 + t297 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168 * t166, -t166 ^ 2 + t168 ^ 2, t101 - t419, -t102 - t418, t183, -g(1) * t144 - g(2) * t306 + g(3) * t198 - t100 * t222 - t152 * t168 + t287, g(1) * t145 + g(2) * t341 + g(3) * t199 + t152 * t166 - t99 * t222 + t301, t310 * t40 - t428 + (-t266 * t67 - t268 * t68) * pkin(3) + (t43 - t39) * t114, -g(1) * t224 - g(3) * t250 + t39 * t42 - t40 * t43 + (g(2) * t356 + t10 * t266 - t112 * t168 + t9 * t268 + t272 * t293) * pkin(3), -t253 * t67 + t256 * t68 - t310 * t36 - t428 + (t35 + t391) * t114, t114 * t60 + t222 * t42 + (-pkin(4) + t256) * t183 + t437, -t114 * t46 + t183 * t253 + t222 * t391 + t310 * t60 + t299 + t338, t338 * t253 + t8 * t256 - t46 * t60 - t35 * t42 - g(1) * (-pkin(3) * t414 - pkin(4) * t138 + qJ(5) * t139 + t224) - g(2) * (pkin(3) * t306 - pkin(4) * t134 - qJ(5) * t137) - g(3) * (-pkin(3) * t360 - pkin(4) * t177 + qJ(5) * t178 + t250) + t391 * t36, -t339 * t86 + t425 (-t440 * t86 - t32) * t275 + (-t31 + t451) * t271, t429 - t450, t295 - t430, t440 * t114, t11 * t114 + t253 * t32 + t282 * t271 + t275 * t438 + t390 * t84, -t114 * t12 + t253 * t31 - t271 * t438 + t282 * t275 + t390 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, t114 * t40 + t310 * t39 + t294 + t71, t311, t222 * t310 - t67, -t68 - t449, -t114 * t36 - t310 * t35 + t13 + t294, 0, 0, 0, 0, 0, t295 + t430, t429 + t450; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 - t449, -t114 * t310 + t183, -t222 ^ 2 - t444, -t222 * t36 - t433 + t437, 0, 0, 0, 0, 0, t222 * t84 - t271 * t340 + t61, t222 * t86 + t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86 * t84, -t84 ^ 2 + t86 ^ 2, t31 + t451, t439 * t86 - t343, t66, t12 * t440 - t24 * t86 - g(1) * t104 - g(2) * t445 - g(3) * (t177 * t275 + t361) + t2, t24 * t84 + g(1) * t105 + g(2) * t446 - g(3) * (-t177 * t271 + t357) - t320 + t439 * t11;];
tau_reg  = t3;
