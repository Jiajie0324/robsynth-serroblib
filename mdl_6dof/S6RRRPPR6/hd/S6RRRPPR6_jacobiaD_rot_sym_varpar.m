% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPPR6
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPPR6_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:26
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPPR6_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR6_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR6_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPPR6_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR6_jacobiaD_rot_sym_varpar: pkin has to be [11x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:56
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:56
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:56
	% DurationCPUTime: 0.41s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:57
	% DurationCPUTime: 1.13s
	% Computational Cost: add. (1479->91), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->91)
	t171 = sin(qJ(2));
	t172 = sin(qJ(1));
	t225 = cos(pkin(6));
	t195 = t172 * t225;
	t193 = t171 * t195;
	t174 = cos(qJ(2));
	t175 = cos(qJ(1));
	t209 = t175 * t174;
	t157 = -t193 + t209;
	t170 = sin(qJ(3));
	t173 = cos(qJ(3));
	t169 = sin(pkin(6));
	t213 = t169 * t172;
	t185 = -t157 * t170 + t173 * t213;
	t227 = t185 * qJD(3);
	t194 = t175 * t225;
	t192 = t174 * t194;
	t210 = t172 * t171;
	t153 = -t192 + t210;
	t212 = t169 * t174;
	t147 = atan2(-t153, -t212);
	t145 = sin(t147);
	t146 = cos(t147);
	t151 = t153 ^ 2;
	t165 = 0.1e1 / t169 ^ 2;
	t167 = 0.1e1 / t174 ^ 2;
	t150 = t151 * t165 * t167 + 0.1e1;
	t148 = 0.1e1 / t150;
	t164 = 0.1e1 / t169;
	t166 = 0.1e1 / t174;
	t199 = t153 * t164 * t166;
	t226 = (t146 * t199 - t145) * t148 + t145;
	t129 = -t145 * t153 - t146 * t212;
	t126 = 0.1e1 / t129;
	t144 = t157 * t173 + t170 * t213;
	t138 = 0.1e1 / t144;
	t127 = 0.1e1 / t129 ^ 2;
	t139 = 0.1e1 / t144 ^ 2;
	t182 = -t171 * t194 - t172 * t174;
	t183 = -t175 * t171 - t174 * t195;
	t135 = -t183 * qJD(1) - t182 * qJD(2);
	t207 = qJD(2) * t171;
	t196 = t167 * t207;
	t184 = t135 * t166 + t153 * t196;
	t215 = t148 * t164;
	t118 = t184 * t215;
	t188 = t145 * t212 - t146 * t153;
	t200 = t146 * t169 * t171;
	t114 = qJD(2) * t200 + t188 * t118 - t145 * t135;
	t224 = t114 * t126 * t127;
	t214 = t167 * t171;
	t187 = t153 * t214 - t166 * t182;
	t119 = t187 * t215;
	t115 = t188 * t119 + t145 * t182 + t200;
	t223 = t115 * t183;
	t134 = t182 * qJD(1) + t183 * qJD(2);
	t208 = qJD(1) * t169;
	t197 = t175 * t208;
	t124 = t144 * qJD(3) + t134 * t170 - t173 * t197;
	t137 = t185 ^ 2;
	t132 = t137 * t139 + 0.1e1;
	t218 = t139 * t185;
	t125 = t134 * t173 + t170 * t197 + t227;
	t220 = t125 * t138 * t139;
	t222 = (-t124 * t218 - t137 * t220) / t132 ^ 2;
	t168 = t166 * t167;
	t221 = (t135 * t153 * t167 + t151 * t168 * t207) * t165 / t150 ^ 2;
	t191 = qJD(2) * t225 + qJD(1);
	t206 = qJD(2) * t174;
	t133 = -qJD(1) * t192 - t175 * t206 + t191 * t210;
	t219 = t133 * t127;
	t217 = t145 * t183;
	t216 = t146 * t183;
	t211 = t169 * t175;
	t152 = t183 ^ 2;
	t122 = t152 * t127 + 0.1e1;
	t205 = 0.2e1 * (-t152 * t224 + t183 * t219) / t122 ^ 2;
	t204 = 0.2e1 * t224;
	t203 = 0.2e1 * t222;
	t202 = -0.2e1 * t221;
	t201 = t185 * t220;
	t198 = t172 * t208;
	t189 = t170 * t138 + t173 * t218;
	t186 = -t170 * t182 + t173 * t211;
	t142 = t170 * t211 + t173 * t182;
	t136 = -qJD(1) * t193 - t172 * t207 + t191 * t209;
	t130 = 0.1e1 / t132;
	t120 = 0.1e1 / t122;
	t117 = t226 * t183;
	t113 = (t187 * t202 + (t135 * t214 + t136 * t166 + (-t182 * t214 + (0.2e1 * t168 * t171 ^ 2 + t166) * t153) * qJD(2)) * t148) * t164;
	t1 = [(-t183 * t166 * t202 + (-t133 * t166 - t183 * t196) * t148) * t164, t113, 0, 0, 0, 0; t153 * t126 * t205 + (-t135 * t126 + (t114 * t153 + t117 * t133) * t127) * t120 - ((t117 * t204 - t226 * t219) * t120 + (t117 * t205 + ((t118 * t148 * t199 + t202) * t217 + (0.2e1 * t199 * t221 - t118 + (-t184 * t164 + t118) * t148) * t216) * t120) * t127) * t183, (-t126 * t157 - t127 * t223) * t205 + (-t204 * t223 + t134 * t126 + (-t157 * t114 + t115 * t133 + (t169 * t206 - t113 * t153 - t119 * t135 + (t119 * t212 + t182) * t118) * t216 + (t118 * t119 * t153 - t136 + (t113 * t174 + (-qJD(2) * t119 - t118) * t171) * t169) * t217) * t127) * t120, 0, 0, 0, 0; (t138 * t186 - t142 * t218) * t203 + ((t142 * qJD(3) - t136 * t170 + t173 * t198) * t138 - 0.2e1 * t142 * t201 + (t186 * t125 + (t186 * qJD(3) - t136 * t173 - t170 * t198) * t185 - t142 * t124) * t139) * t130, -t189 * t183 * t203 + (t189 * t133 - ((-qJD(3) * t138 + 0.2e1 * t201) * t173 + (t124 * t173 + (t125 + t227) * t170) * t139) * t183) * t130, -0.2e1 * t222 - 0.2e1 * (t124 * t139 * t130 - (-t130 * t220 - t139 * t222) * t185) * t185, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:57
	% DurationCPUTime: 1.03s
	% Computational Cost: add. (1788->92), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->92)
	t179 = sin(qJ(2));
	t180 = sin(qJ(1));
	t232 = cos(pkin(6));
	t202 = t180 * t232;
	t200 = t179 * t202;
	t181 = cos(qJ(2));
	t182 = cos(qJ(1));
	t216 = t182 * t181;
	t163 = -t200 + t216;
	t174 = qJ(3) + pkin(11);
	t170 = sin(t174);
	t171 = cos(t174);
	t178 = sin(pkin(6));
	t220 = t178 * t180;
	t192 = -t163 * t170 + t171 * t220;
	t234 = qJD(3) * t192;
	t201 = t182 * t232;
	t199 = t181 * t201;
	t217 = t180 * t179;
	t159 = -t199 + t217;
	t219 = t178 * t181;
	t153 = atan2(-t159, -t219);
	t151 = sin(t153);
	t152 = cos(t153);
	t157 = t159 ^ 2;
	t173 = 0.1e1 / t178 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t156 = t157 * t173 * t176 + 0.1e1;
	t154 = 0.1e1 / t156;
	t172 = 0.1e1 / t178;
	t175 = 0.1e1 / t181;
	t206 = t159 * t172 * t175;
	t233 = (t152 * t206 - t151) * t154 + t151;
	t135 = -t151 * t159 - t152 * t219;
	t132 = 0.1e1 / t135;
	t150 = t163 * t171 + t170 * t220;
	t144 = 0.1e1 / t150;
	t133 = 0.1e1 / t135 ^ 2;
	t145 = 0.1e1 / t150 ^ 2;
	t189 = -t179 * t201 - t180 * t181;
	t190 = -t182 * t179 - t181 * t202;
	t141 = -qJD(1) * t190 - qJD(2) * t189;
	t214 = qJD(2) * t179;
	t203 = t176 * t214;
	t191 = t141 * t175 + t159 * t203;
	t222 = t154 * t172;
	t124 = t191 * t222;
	t195 = t151 * t219 - t152 * t159;
	t207 = t152 * t178 * t179;
	t120 = qJD(2) * t207 + t124 * t195 - t151 * t141;
	t231 = t120 * t132 * t133;
	t221 = t176 * t179;
	t194 = t159 * t221 - t175 * t189;
	t125 = t194 * t222;
	t121 = t125 * t195 + t151 * t189 + t207;
	t230 = t121 * t190;
	t140 = qJD(1) * t189 + qJD(2) * t190;
	t215 = qJD(1) * t178;
	t204 = t182 * t215;
	t129 = qJD(3) * t150 + t140 * t170 - t171 * t204;
	t143 = t192 ^ 2;
	t138 = t143 * t145 + 0.1e1;
	t225 = t145 * t192;
	t130 = t140 * t171 + t170 * t204 + t234;
	t228 = t130 * t144 * t145;
	t229 = (-t129 * t225 - t143 * t228) / t138 ^ 2;
	t177 = t175 * t176;
	t227 = (t141 * t159 * t176 + t157 * t177 * t214) * t173 / t156 ^ 2;
	t198 = qJD(2) * t232 + qJD(1);
	t213 = qJD(2) * t181;
	t139 = -qJD(1) * t199 - t182 * t213 + t198 * t217;
	t226 = t139 * t133;
	t224 = t151 * t190;
	t223 = t152 * t190;
	t218 = t178 * t182;
	t158 = t190 ^ 2;
	t128 = t158 * t133 + 0.1e1;
	t212 = 0.2e1 * (-t158 * t231 + t190 * t226) / t128 ^ 2;
	t211 = 0.2e1 * t231;
	t210 = 0.2e1 * t229;
	t209 = -0.2e1 * t227;
	t208 = t192 * t228;
	t205 = t180 * t215;
	t196 = t170 * t144 + t171 * t225;
	t193 = -t170 * t189 + t171 * t218;
	t148 = t170 * t218 + t171 * t189;
	t142 = -qJD(1) * t200 - t180 * t214 + t198 * t216;
	t136 = 0.1e1 / t138;
	t126 = 0.1e1 / t128;
	t123 = t233 * t190;
	t119 = (t194 * t209 + (t141 * t221 + t142 * t175 + (-t189 * t221 + (0.2e1 * t177 * t179 ^ 2 + t175) * t159) * qJD(2)) * t154) * t172;
	t1 = [(-t190 * t175 * t209 + (-t139 * t175 - t190 * t203) * t154) * t172, t119, 0, 0, 0, 0; t159 * t132 * t212 + (-t141 * t132 + (t120 * t159 + t123 * t139) * t133) * t126 - ((t123 * t211 - t233 * t226) * t126 + (t123 * t212 + ((t124 * t154 * t206 + t209) * t224 + (0.2e1 * t206 * t227 - t124 + (-t172 * t191 + t124) * t154) * t223) * t126) * t133) * t190, (-t132 * t163 - t133 * t230) * t212 + (-t211 * t230 + t140 * t132 + (-t163 * t120 + t121 * t139 + (t178 * t213 - t119 * t159 - t125 * t141 + (t125 * t219 + t189) * t124) * t223 + (t124 * t125 * t159 - t142 + (t119 * t181 + (-qJD(2) * t125 - t124) * t179) * t178) * t224) * t133) * t126, 0, 0, 0, 0; (t144 * t193 - t148 * t225) * t210 + ((qJD(3) * t148 - t142 * t170 + t171 * t205) * t144 - 0.2e1 * t148 * t208 + (t193 * t130 + (qJD(3) * t193 - t142 * t171 - t170 * t205) * t192 - t148 * t129) * t145) * t136, -t196 * t190 * t210 + (t196 * t139 - ((-qJD(3) * t144 + 0.2e1 * t208) * t171 + (t129 * t171 + (t130 + t234) * t170) * t145) * t190) * t136, -0.2e1 * t229 - 0.2e1 * (t129 * t145 * t136 - (-t136 * t228 - t145 * t229) * t192) * t192, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:58
	% DurationCPUTime: 1.77s
	% Computational Cost: add. (7177->123), mult. (11003->252), div. (691->12), fcn. (14028->11), ass. (0->106)
	t210 = cos(pkin(6));
	t212 = sin(qJ(1));
	t213 = cos(qJ(2));
	t269 = cos(qJ(1));
	t234 = t269 * qJD(2);
	t235 = t269 * qJD(1);
	t209 = sin(pkin(6));
	t240 = t209 * t269;
	t211 = sin(qJ(2));
	t253 = t212 * t211;
	t241 = t210 * t253;
	t251 = qJD(2) * t211;
	t274 = -qJD(1) * t241 - t212 * t251 + (t210 * t234 + t235) * t213 - qJD(3) * t240;
	t208 = qJ(3) + pkin(11);
	t206 = sin(t208);
	t207 = cos(t208);
	t239 = t269 * t211;
	t252 = t212 * t213;
	t221 = -t210 * t239 - t252;
	t177 = -t206 * t221 + t207 * t240;
	t256 = t209 * t211;
	t187 = t206 * t256 - t210 * t207;
	t164 = atan2(-t177, t187);
	t159 = sin(t164);
	t160 = cos(t164);
	t154 = -t159 * t177 + t160 * t187;
	t152 = 0.1e1 / t154 ^ 2;
	t238 = t269 * t213;
	t195 = t238 - t241;
	t255 = t209 * t212;
	t225 = -t195 * t206 + t207 * t255;
	t175 = t225 ^ 2;
	t150 = t175 * t152 + 0.1e1;
	t222 = -t210 * t252 - t239;
	t169 = t221 * qJD(1) + t222 * qJD(2);
	t183 = t195 * t207 + t206 * t255;
	t229 = t209 * t235;
	t155 = t183 * qJD(3) + t169 * t206 - t207 * t229;
	t264 = t155 * t152;
	t174 = t177 ^ 2;
	t185 = 0.1e1 / t187 ^ 2;
	t163 = t174 * t185 + 0.1e1;
	t161 = 0.1e1 / t163;
	t237 = qJD(1) * t255;
	t250 = qJD(3) * t207;
	t157 = t274 * t206 - t207 * t237 - t221 * t250;
	t188 = t210 * t206 + t207 * t256;
	t254 = t209 * t213;
	t236 = qJD(2) * t254;
	t172 = t188 * qJD(3) + t206 * t236;
	t184 = 0.1e1 / t187;
	t259 = t177 * t185;
	t227 = -t157 * t184 + t172 * t259;
	t143 = t227 * t161;
	t228 = -t159 * t187 - t160 * t177;
	t139 = t228 * t143 - t159 * t157 + t160 * t172;
	t151 = 0.1e1 / t154;
	t153 = t151 * t152;
	t267 = t139 * t153;
	t249 = 0.2e1 * (-t175 * t267 - t225 * t264) / t150 ^ 2;
	t273 = t172 * t185;
	t231 = t210 * t238;
	t192 = t231 - t253;
	t223 = -t184 * t192 + t254 * t259;
	t272 = t206 * t223;
	t158 = (qJD(3) * t221 + t237) * t206 + t274 * t207;
	t189 = 0.1e1 / t222;
	t190 = 0.1e1 / t222 ^ 2;
	t271 = -0.2e1 * t177;
	t270 = -0.2e1 * t225;
	t261 = t184 * t273;
	t266 = (t157 * t259 - t174 * t261) / t163 ^ 2;
	t265 = t152 * t225;
	t263 = t159 * t225;
	t262 = t160 * t225;
	t260 = t177 * t184;
	t258 = t183 * t190;
	t257 = t222 * t206;
	t248 = -0.2e1 * t266;
	t156 = t225 * qJD(3) + t169 * t207 + t206 * t229;
	t176 = t183 ^ 2;
	t167 = t176 * t190 + 0.1e1;
	t168 = -qJD(1) * t231 - t213 * t234 + (qJD(2) * t210 + qJD(1)) * t253;
	t191 = t189 * t190;
	t247 = 0.2e1 * (-t176 * t191 * t168 + t156 * t258) / t167 ^ 2;
	t246 = t153 * t270;
	t245 = 0.2e1 * t183 * t191;
	t244 = t184 * t266;
	t243 = t152 * t263;
	t242 = t152 * t262;
	t233 = t261 * t271;
	t179 = -t206 * t240 - t207 * t221;
	t226 = -t179 * t184 + t188 * t259;
	t220 = -t159 + (t160 * t260 + t159) * t161;
	t173 = -t187 * qJD(3) + t207 * t236;
	t170 = t222 * qJD(1) + t221 * qJD(2);
	t165 = 0.1e1 / t167;
	t148 = 0.1e1 / t150;
	t147 = t161 * t272;
	t144 = t226 * t161;
	t142 = t220 * t225;
	t141 = (-t159 * t192 + t160 * t254) * t206 + t228 * t147;
	t140 = t228 * t144 - t159 * t179 + t160 * t188;
	t138 = t226 * t248 + (t188 * t233 - t158 * t184 + (t157 * t188 + t172 * t179 + t173 * t177) * t185) * t161;
	t136 = t248 * t272 + (t223 * t250 + (t233 * t254 - t170 * t184 + (t172 * t192 + (t157 * t213 - t177 * t251) * t209) * t185) * t206) * t161;
	t1 = [t244 * t270 + (-t155 * t184 - t225 * t273) * t161, t136, t138, 0, 0, 0; t177 * t151 * t249 + (-t157 * t151 + (t139 * t177 + t142 * t155) * t152) * t148 - (-t142 * t152 * t249 + (-0.2e1 * t142 * t267 + (-t143 * t161 * t260 + t248) * t243 + (t244 * t271 - t143 + (t143 - t227) * t161) * t242 - t220 * t264) * t148) * t225, (-t141 * t265 - t151 * t257) * t249 + (-t141 * t264 + (t168 * t206 + t222 * t250) * t151 + (t141 * t246 - t152 * t257) * t139 + (-t136 * t177 - t147 * t157 + (-t206 * t251 + t213 * t250) * t209 + (-t147 * t187 - t192 * t206) * t143) * t242 + (-t192 * t250 - t136 * t187 - t147 * t172 - t170 * t206 + (t147 * t177 - t206 * t254) * t143) * t243) * t148, (-t140 * t265 - t151 * t183) * t249 + (t140 * t139 * t246 + t156 * t151 + (-t183 * t139 - t140 * t155 + (-t138 * t177 - t144 * t157 + t173 + (-t144 * t187 - t179) * t143) * t262 + (-t138 * t187 - t144 * t172 - t158 + (t144 * t177 - t188) * t143) * t263) * t152) * t148, 0, 0, 0; (-t179 * t189 + t192 * t258) * t247 + (t158 * t189 + t192 * t168 * t245 + (-t192 * t156 - t168 * t179 - t170 * t183) * t190) * t165, (t189 * t207 * t222 + t195 * t258) * t247 + (qJD(3) * t189 * t257 + (-t156 * t195 - t169 * t183) * t190 + (t195 * t245 + (t190 * t222 - t189) * t207) * t168) * t165, t225 * t189 * t247 + (t168 * t190 * t225 + t155 * t189) * t165, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:25:56
	% EndTime: 2019-10-10 11:25:58
	% DurationCPUTime: 2.09s
	% Computational Cost: add. (8428->151), mult. (13478->298), div. (726->12), fcn. (17045->13), ass. (0->129)
	t271 = sin(qJ(1));
	t274 = cos(qJ(1));
	t268 = cos(pkin(6));
	t291 = qJD(2) * t268 + qJD(1);
	t270 = sin(qJ(2));
	t318 = t271 * t270;
	t300 = t268 * t318;
	t267 = sin(pkin(6));
	t308 = qJD(3) * t267;
	t312 = qJD(2) * t270;
	t273 = cos(qJ(2));
	t314 = t274 * t273;
	t345 = -qJD(1) * t300 - t271 * t312 - t274 * t308 + t291 * t314;
	t254 = -t300 + t314;
	t266 = qJ(3) + pkin(11);
	t264 = sin(t266);
	t265 = cos(t266);
	t322 = t267 * t271;
	t242 = t254 * t264 - t265 * t322;
	t272 = cos(qJ(6));
	t315 = t274 * t270;
	t317 = t271 * t273;
	t253 = t268 * t317 + t315;
	t269 = sin(qJ(6));
	t325 = t253 * t269;
	t287 = t242 * t272 - t325;
	t344 = t287 * qJD(6);
	t252 = t268 * t315 + t317;
	t320 = t267 * t274;
	t238 = t252 * t265 - t264 * t320;
	t323 = t267 * t270;
	t250 = t268 * t264 + t265 * t323;
	t225 = atan2(-t238, t250);
	t212 = sin(t225);
	t213 = cos(t225);
	t203 = -t212 * t238 + t213 * t250;
	t201 = 0.1e1 / t203 ^ 2;
	t243 = t254 * t265 + t264 * t322;
	t236 = t243 ^ 2;
	t197 = t201 * t236 + 0.1e1;
	t230 = -t252 * qJD(1) - t253 * qJD(2);
	t313 = qJD(1) * t267;
	t297 = t274 * t313;
	t310 = qJD(3) * t264;
	t208 = t264 * t297 - t254 * t310 + (t271 * t308 + t230) * t265;
	t333 = t208 * t201;
	t235 = t238 ^ 2;
	t247 = 0.1e1 / t250 ^ 2;
	t224 = t235 * t247 + 0.1e1;
	t218 = 0.1e1 / t224;
	t292 = t345 * t265;
	t298 = t271 * t313;
	t210 = -t252 * t310 + t264 * t298 + t292;
	t249 = -t264 * t323 + t268 * t265;
	t311 = qJD(2) * t273;
	t296 = t267 * t311;
	t234 = t249 * qJD(3) + t265 * t296;
	t246 = 0.1e1 / t250;
	t327 = t238 * t247;
	t286 = -t210 * t246 + t234 * t327;
	t191 = t286 * t218;
	t289 = -t212 * t250 - t213 * t238;
	t186 = t289 * t191 - t212 * t210 + t213 * t234;
	t200 = 0.1e1 / t203;
	t202 = t200 * t201;
	t338 = t186 * t202;
	t307 = 0.2e1 * (-t236 * t338 + t243 * t333) / t197 ^ 2;
	t343 = t234 * t247;
	t299 = t268 * t314;
	t251 = t299 - t318;
	t321 = t267 * t273;
	t283 = -t246 * t251 + t321 * t327;
	t342 = t265 * t283;
	t324 = t253 * t272;
	t223 = t242 * t269 + t324;
	t215 = 0.1e1 / t223;
	t216 = 0.1e1 / t223 ^ 2;
	t341 = -0.2e1 * t238;
	t340 = 0.2e1 * t243;
	t207 = t243 * qJD(3) + t230 * t264 - t265 * t297;
	t229 = -qJD(1) * t299 - t274 * t311 + t291 * t318;
	t198 = t223 * qJD(6) - t207 * t272 - t229 * t269;
	t214 = t287 ^ 2;
	t206 = t214 * t216 + 0.1e1;
	t330 = t216 * t287;
	t199 = t207 * t269 - t229 * t272 + t344;
	t335 = t199 * t215 * t216;
	t337 = (-t198 * t330 - t214 * t335) / t206 ^ 2;
	t329 = t246 * t343;
	t336 = (t210 * t327 - t235 * t329) / t224 ^ 2;
	t334 = t201 * t243;
	t332 = t212 * t243;
	t331 = t213 * t243;
	t328 = t238 * t246;
	t326 = t253 * t265;
	t319 = t269 * t287;
	t316 = t272 * t215;
	t309 = qJD(3) * t265;
	t306 = 0.2e1 * t337;
	t305 = -0.2e1 * t336;
	t304 = t202 * t340;
	t303 = t246 * t336;
	t302 = t201 * t332;
	t301 = t201 * t331;
	t294 = -0.2e1 * t287 * t335;
	t293 = t329 * t341;
	t290 = -qJD(6) * t253 * t264 + t230;
	t237 = t252 * t264 + t265 * t320;
	t288 = -t237 * t272 - t251 * t269;
	t221 = -t237 * t269 + t251 * t272;
	t285 = -t216 * t319 + t316;
	t284 = t237 * t246 + t249 * t327;
	t282 = -t212 + (t213 * t328 + t212) * t218;
	t209 = t252 * t309 + t345 * t264 - t265 * t298;
	t281 = qJD(6) * t254 - t229 * t264 + t253 * t309;
	t233 = -t250 * qJD(3) - t264 * t296;
	t231 = -t253 * qJD(1) - t252 * qJD(2);
	t227 = t254 * t272 - t264 * t325;
	t226 = t254 * t269 + t264 * t324;
	t204 = 0.1e1 / t206;
	t195 = 0.1e1 / t197;
	t194 = t218 * t342;
	t192 = t284 * t218;
	t190 = t282 * t243;
	t188 = (-t212 * t251 + t213 * t321) * t265 + t289 * t194;
	t187 = t289 * t192 + t212 * t237 + t213 * t249;
	t185 = t284 * t305 + (t249 * t293 + t209 * t246 + (t210 * t249 + t233 * t238 - t234 * t237) * t247) * t218;
	t183 = t305 * t342 + (-t283 * t310 + (t293 * t321 - t231 * t246 + (t234 * t251 + (t210 * t273 - t238 * t312) * t267) * t247) * t265) * t218;
	t1 = [t303 * t340 + (-t208 * t246 + t243 * t343) * t218, t183, t185, 0, 0, 0; t238 * t200 * t307 + (((qJD(3) * t252 - t298) * t264 - t292) * t200 + (t186 * t238 - t190 * t208) * t201) * t195 + (t190 * t201 * t307 + (0.2e1 * t190 * t338 - (-t191 * t218 * t328 + t305) * t302 - (t303 * t341 - t191 + (t191 - t286) * t218) * t301 - t282 * t333) * t195) * t243, (t188 * t334 + t200 * t326) * t307 + (-t188 * t333 + (t229 * t265 + t253 * t310) * t200 + (t188 * t304 + t201 * t326) * t186 - (-t183 * t238 - t194 * t210 + (-t265 * t312 - t273 * t310) * t267 + (-t194 * t250 - t251 * t265) * t191) * t301 - (t251 * t310 - t183 * t250 - t194 * t234 - t231 * t265 + (t194 * t238 - t265 * t321) * t191) * t302) * t195, (t187 * t334 + t200 * t242) * t307 + (t187 * t186 * t304 - t207 * t200 + (t242 * t186 - t187 * t208 - (-t185 * t238 - t192 * t210 + t233 + (-t192 * t250 + t237) * t191) * t331 - (-t185 * t250 - t192 * t234 + t209 + (t192 * t238 - t249) * t191) * t332) * t201) * t195, 0, 0, 0; (t215 * t288 - t221 * t330) * t306 + ((t221 * qJD(6) + t209 * t272 + t231 * t269) * t215 + t221 * t294 + (t288 * t199 + (t288 * qJD(6) - t209 * t269 + t231 * t272) * t287 - t221 * t198) * t216) * t204, (-t215 * t226 - t227 * t330) * t306 + (t227 * t294 + t290 * t215 * t269 + t281 * t316 + (t272 * t287 * t290 - t227 * t198 - t226 * t199 - t281 * t319) * t216) * t204, t285 * t243 * t306 + (-t285 * t208 + ((qJD(6) * t215 + t294) * t269 + (-t198 * t269 + (t199 + t344) * t272) * t216) * t243) * t204, 0, 0, -0.2e1 * t337 - 0.2e1 * (t198 * t216 * t204 - (-t204 * t335 - t216 * t337) * t287) * t287;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end