% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 05:37
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRPPR6_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR6_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR6_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR6_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 05:33:43
% EndTime: 2019-05-07 05:34:20
% DurationCPUTime: 20.08s
% Computational Cost: add. (90109->651), mult. (200695->896), div. (0->0), fcn. (161785->12), ass. (0->406)
t378 = cos(qJ(2));
t370 = sin(pkin(6));
t446 = qJD(1) * t370;
t429 = t378 * t446;
t357 = -qJD(3) + t429;
t355 = t357 ^ 2;
t372 = cos(pkin(6));
t364 = qJD(1) * t372 + qJD(2);
t374 = sin(qJ(3));
t377 = cos(qJ(3));
t375 = sin(qJ(2));
t445 = qJD(1) * t375;
t430 = t370 * t445;
t334 = -t364 * t377 + t374 * t430;
t336 = t364 * t374 + t377 * t430;
t369 = sin(pkin(11));
t371 = cos(pkin(11));
t313 = t371 * t334 + t336 * t369;
t502 = t313 ^ 2;
t251 = -t355 - t502;
t428 = qJD(2) * t446;
t440 = qJDD(1) * t370;
t345 = -t375 * t428 + t378 * t440;
t339 = -qJDD(3) + t345;
t315 = -t334 * t369 + t336 * t371;
t466 = t315 * t313;
t391 = t339 + t466;
t530 = t371 * t391;
t176 = t251 * t369 - t530;
t531 = t369 * t391;
t178 = t251 * t371 + t531;
t112 = t176 * t374 - t178 * t377;
t344 = t375 * t440 + t378 * t428;
t419 = qJDD(1) * t372 + qJDD(2);
t297 = -t334 * qJD(3) + t377 * t344 + t374 * t419;
t421 = -t374 * t344 + t377 * t419;
t404 = qJD(3) * t336 - t421;
t249 = t297 * t369 + t371 * t404;
t292 = t357 * t315;
t521 = t249 - t292;
t598 = pkin(1) * (t112 * t375 + t378 * t521);
t109 = t176 * t377 + t178 * t374;
t597 = -pkin(8) * (t112 * t378 - t375 * t521) - pkin(1) * t109;
t501 = t315 ^ 2;
t518 = -t501 - t355;
t392 = t339 - t466;
t525 = t392 * t369;
t185 = t371 * t518 + t525;
t524 = t392 * t371;
t188 = t369 * t518 - t524;
t126 = t185 * t374 + t188 * t377;
t250 = t371 * t297 - t369 * t404;
t293 = t313 * t357;
t520 = t293 + t250;
t595 = pkin(1) * (t126 * t375 + t378 * t520);
t594 = pkin(2) * t109;
t593 = pkin(9) * t109;
t123 = t185 * t377 - t188 * t374;
t592 = -pkin(8) * (t126 * t378 - t375 * t520) - pkin(1) * t123;
t591 = -pkin(2) * t521 - pkin(9) * t112;
t290 = -t501 + t355;
t192 = t290 * t371 - t531;
t195 = t290 * t369 + t530;
t130 = t192 * t377 - t195 * t374;
t219 = t293 - t250;
t588 = t372 * t130 - (-t378 * t219 + t375 * (t192 * t374 + t195 * t377)) * t370;
t289 = t502 - t355;
t194 = t289 * t369 - t524;
t198 = t289 * t371 + t525;
t132 = t194 * t377 + t198 * t374;
t522 = -t249 - t292;
t587 = t372 * t132 - (t375 * (t194 * t374 - t198 * t377) + t378 * t522) * t370;
t585 = pkin(2) * t123;
t584 = pkin(9) * t123;
t583 = -pkin(2) * t520 - pkin(9) * t126;
t552 = t219 * t371 + t369 * t522;
t553 = -t219 * t369 + t371 * t522;
t562 = t374 * t553 + t377 * t552;
t578 = pkin(2) * t562;
t492 = pkin(3) * t176;
t577 = pkin(9) * t562;
t576 = qJ(4) * t176;
t575 = qJ(4) * t178;
t516 = -t502 - t501;
t561 = -t374 * t552 + t377 * t553;
t574 = -pkin(2) * t516 + pkin(9) * t561;
t517 = t501 - t502;
t534 = -t369 * t521 + t371 * t520;
t480 = t521 * t371;
t554 = -t369 * t520 - t480;
t563 = t374 * t554 + t377 * t534;
t573 = t372 * t563 + (t375 * (-t374 * t534 + t377 * t554) - t378 * t517) * t370;
t572 = pkin(1) * (t375 * t561 - t378 * t516);
t569 = pkin(8) * (t375 * t516 + t378 * t561) - pkin(1) * t562;
t498 = -2 * qJD(5);
t568 = pkin(3) * t185;
t493 = pkin(3) * t552;
t567 = qJ(4) * t185;
t566 = qJ(4) * t188;
t565 = qJ(4) * t552;
t564 = -pkin(3) * t516 + qJ(4) * t553;
t559 = qJ(5) * t520;
t417 = -pkin(2) * t378 - pkin(9) * t375;
t343 = t417 * t446;
t379 = qJD(1) ^ 2;
t494 = sin(qJ(1));
t495 = cos(qJ(1));
t400 = g(1) * t495 + g(2) * t494;
t340 = -t379 * pkin(1) + pkin(8) * t440 - t400;
t399 = g(1) * t494 - g(2) * t495;
t455 = t370 * t379;
t387 = qJDD(1) * pkin(1) + pkin(8) * t455 + t399;
t383 = t372 * t387;
t422 = t375 * t340 - t378 * t383;
t499 = t364 ^ 2;
t262 = t370 * (g(3) * t378 + t343 * t445) - t419 * pkin(2) - t499 * pkin(9) + t422;
t319 = -pkin(3) * t357 - qJ(4) * t336;
t500 = t334 ^ 2;
t180 = t404 * pkin(3) - t500 * qJ(4) + t336 * t319 + qJDD(4) + t262;
t380 = t249 * pkin(4) + t180 - t559;
t555 = t315 * t498 + t380;
t373 = sin(qJ(6));
t376 = cos(qJ(6));
t279 = -t376 * t313 - t357 * t373;
t281 = t313 * t373 - t357 * t376;
t225 = t281 * t279;
t246 = qJDD(6) + t250;
t523 = -t225 + t246;
t545 = t373 * t523;
t542 = t376 * t523;
t462 = t357 * t369;
t413 = t371 * t250 + t315 * t462;
t461 = t357 * t371;
t415 = t369 * t250 - t315 * t461;
t433 = t378 * t466;
t506 = t374 * t413 + t377 * t415;
t537 = t372 * t506 + (t375 * (-t374 * t415 + t377 * t413) - t433) * t370;
t405 = t249 * t369 - t313 * t461;
t414 = -t371 * t249 - t313 * t462;
t507 = t374 * t405 + t377 * t414;
t536 = t372 * t507 + (t375 * (-t374 * t414 + t377 * t405) + t433) * t370;
t456 = t370 * t378;
t326 = t339 * t456;
t402 = (t313 * t369 + t315 * t371) * t357;
t403 = (t313 * t371 - t315 * t369) * t357;
t457 = t370 * t375;
t508 = t374 * t403 + t377 * t402;
t535 = t372 * t508 + t326 + (-t374 * t402 + t377 * t403) * t457;
t366 = t370 ^ 2;
t447 = qJD(1) * t364;
t532 = t366 * (-t372 * t379 + t447);
t463 = t336 * t334;
t390 = -t339 - t463;
t529 = t374 * t390;
t527 = t377 * t390;
t465 = t334 * t357;
t271 = -t297 + t465;
t300 = g(3) * t456 + t422;
t381 = -g(3) * t457 + t375 * t383;
t301 = t378 * t340 + t381;
t519 = t375 * t300 + t378 * t301;
t263 = t419 * pkin(9) - t499 * pkin(2) + (t343 * t446 + t340) * t378 + t381;
t488 = t372 * g(3);
t264 = -t345 * pkin(2) - t344 * pkin(9) - t488 + ((pkin(2) * t375 - pkin(9) * t378) * t447 - t387) * t370;
t189 = t374 * t263 - t377 * t264;
t153 = t390 * pkin(3) + qJ(4) * t271 - t189;
t190 = t377 * t263 + t374 * t264;
t166 = -pkin(3) * t500 - qJ(4) * t404 + t357 * t319 + t190;
t425 = -t371 * t153 + t369 * t166;
t398 = t339 * pkin(4) - t355 * qJ(5) + qJDD(5) + t425;
t254 = pkin(4) * t313 - qJ(5) * t315;
t441 = (2 * qJD(4)) + t254;
t66 = t339 * pkin(10) - t219 * pkin(5) + (pkin(10) * t313 + t441) * t315 + t398;
t283 = pkin(5) * t315 + pkin(10) * t357;
t426 = -pkin(4) * t357 + t498;
t73 = (-t283 + t426) * t315 + t380 + t249 * pkin(10) - t502 * pkin(5);
t41 = t373 * t73 - t376 * t66;
t42 = t373 * t66 + t376 * t73;
t24 = t373 * t42 - t376 * t41;
t444 = qJD(4) * t313;
t303 = -0.2e1 * t444;
t449 = t369 * t153 + t371 * t166;
t409 = -t355 * pkin(4) - t313 * t254 + t449;
t389 = -t339 * qJ(5) + t303 + t409;
t68 = -t249 * pkin(5) - t502 * pkin(10) + (t498 - t283) * t357 + t389;
t21 = -t24 * t371 + t369 * t68;
t497 = pkin(4) + pkin(10);
t514 = pkin(3) * t21 + qJ(5) * t68 - t24 * t497;
t438 = t357 * t498;
t513 = -t568 - pkin(4) * t518 - qJ(5) * (t392 + t339) + t409 + t438;
t182 = -t279 * qJD(6) + t373 * t249 - t376 * t339;
t308 = qJD(6) + t315;
t471 = t279 * t308;
t163 = t182 + t471;
t424 = t376 * t249 + t373 * t339;
t394 = (-qJD(6) + t308) * t281 + t424;
t101 = -t163 * t376 + t373 * t394;
t277 = t279 ^ 2;
t278 = t281 ^ 2;
t183 = -t277 - t278;
t76 = -t101 * t371 + t183 * t369;
t512 = pkin(3) * t76 + qJ(5) * t183 - t101 * t497 - t24;
t306 = t308 ^ 2;
t199 = -t306 - t277;
t118 = t373 * t199 + t542;
t159 = (qJD(6) + t308) * t281 - t424;
t487 = t373 * t68;
t82 = -t118 * t371 + t159 * t369;
t511 = pkin(3) * t82 + qJ(5) * t159 - t118 * t497 + t487;
t439 = -t278 - t306;
t173 = t225 + t246;
t454 = t373 * t173;
t121 = t376 * t439 - t454;
t408 = t182 - t471;
t485 = t376 * t68;
t84 = -t121 * t371 + t369 * t408;
t510 = pkin(3) * t84 + qJ(5) * t408 - t121 * t497 + t485;
t333 = t336 ^ 2;
t443 = qJD(4) * t315;
t94 = t425 + 0.2e1 * t443;
t95 = t303 + t449;
t57 = t369 * t95 - t371 * t94;
t496 = pkin(3) * t57;
t491 = pkin(4) * t369;
t490 = pkin(4) * t371;
t489 = pkin(8) * t370;
t486 = t374 * t57;
t484 = t377 * t57;
t483 = t173 * t376;
t482 = t180 * t369;
t481 = t180 * t371;
t473 = t262 * t374;
t472 = t262 * t377;
t284 = t339 - t463;
t470 = t284 * t374;
t469 = t284 * t377;
t468 = t308 * t373;
t467 = t308 * t376;
t460 = t357 * t374;
t459 = t357 * t377;
t458 = t366 * t379;
t356 = t378 * t375 * t458;
t342 = t356 + t419;
t452 = t375 * t342;
t341 = -t356 + t419;
t450 = t378 * t341;
t437 = t369 * t225;
t436 = t371 * t225;
t367 = t375 ^ 2;
t435 = t367 * t458;
t368 = t378 ^ 2;
t434 = t368 * t458;
t432 = t378 * t463;
t349 = t364 * t429;
t431 = t349 + t344;
t427 = qJ(5) * t369 + pkin(3);
t58 = t369 * t94 + t371 * t95;
t128 = t189 * t374 + t377 * t190;
t420 = t441 * t315;
t418 = -t449 + t568;
t25 = t373 * t41 + t376 * t42;
t412 = t189 * t377 - t190 * t374;
t410 = -pkin(1) + t417;
t269 = t297 + t465;
t74 = t389 + t438;
t75 = t420 + t398;
t44 = t369 * t74 - t371 * t75;
t401 = pkin(3) * t44 - pkin(4) * t75 + qJ(5) * t74;
t397 = pkin(4) * t219 + qJ(5) * t522 + t493;
t393 = (-qJD(3) - t357) * t336 + t421;
t384 = pkin(4) * t391 - qJ(5) * t251 + t398 - t492;
t348 = t364 * t430;
t347 = (t367 - t368) * t458;
t346 = -t434 - t499;
t330 = -t435 - t499;
t325 = t370 * t387 + t488;
t324 = t345 - t348;
t323 = t345 + t348;
t322 = -t349 + t344;
t321 = -t333 + t355;
t320 = -t355 + t500;
t318 = -t333 - t355;
t317 = t333 - t500;
t305 = -0.2e1 * t443;
t304 = 0.2e1 * t444;
t298 = -t355 - t500;
t282 = t333 + t500;
t276 = (t334 * t374 + t336 * t377) * t357;
t267 = (-qJD(3) + t357) * t336 + t421;
t266 = t297 * t374 - t336 * t459;
t265 = -t334 * t460 - t377 * t404;
t258 = t320 * t374 - t469;
t257 = t321 * t377 + t529;
t253 = -t318 * t374 + t469;
t252 = t318 * t377 + t470;
t238 = -t278 + t306;
t237 = t277 - t306;
t231 = t298 * t377 - t529;
t230 = t298 * t374 + t527;
t224 = t278 - t277;
t210 = -t271 * t374 + t377 * t393;
t208 = t267 * t374 + t269 * t377;
t181 = -qJD(6) * t281 + t424;
t175 = (-t279 * t376 + t281 * t373) * t308;
t174 = (t279 * t373 + t281 * t376) * t308;
t168 = -pkin(2) * t269 + pkin(9) * t253 + t473;
t167 = pkin(2) * t267 + pkin(9) * t231 - t472;
t157 = -t182 * t373 - t281 * t467;
t156 = t181 * t373 - t279 * t467;
t155 = -t182 * t376 + t281 * t468;
t154 = -t181 * t376 - t279 * t468;
t142 = -t174 * t369 + t246 * t371;
t141 = t174 * t371 + t246 * t369;
t136 = t238 * t373 - t542;
t135 = -t237 * t373 - t483;
t134 = -t237 * t376 + t454;
t133 = -t238 * t376 - t545;
t122 = -t373 * t439 - t483;
t120 = t481 - t567;
t119 = t199 * t376 - t545;
t117 = t482 - t576;
t116 = -t157 * t369 + t436;
t115 = -t154 * t369 - t436;
t114 = t157 * t371 + t437;
t113 = t154 * t371 - t437;
t108 = -pkin(2) * t262 + pkin(9) * t128;
t107 = -pkin(3) * t520 + t482 - t566;
t106 = t315 * t426 + t380;
t105 = pkin(2) * t282 + pkin(9) * t210 + t128;
t104 = -pkin(3) * t521 - t481 + t575;
t103 = t373 * t163 + t376 * t394;
t102 = t159 * t376 + t373 * t408;
t100 = t159 * t373 - t376 * t408;
t99 = -t133 * t369 + t163 * t371;
t98 = -t135 * t369 + t371 * t394;
t97 = t133 * t371 + t163 * t369;
t96 = t135 * t371 + t369 * t394;
t86 = t141 * t377 + t142 * t374;
t85 = t121 * t369 + t371 * t408;
t83 = t118 * t369 + t159 * t371;
t81 = -t100 * t369 + t224 * t371;
t80 = t100 * t371 + t224 * t369;
t79 = (t521 - t292) * pkin(4) + t555;
t78 = pkin(4) * t292 - t555 + t559;
t77 = t101 * t369 + t183 * t371;
t72 = t114 * t377 + t116 * t374;
t71 = t113 * t377 + t115 * t374;
t70 = -qJ(5) * t516 + t75;
t69 = -pkin(4) * t516 + t74;
t67 = t371 * t78 - t491 * t520 + t567;
t64 = qJ(5) * t480 - t369 * t79 + t576;
t63 = pkin(5) * t101 - qJ(5) * t103;
t62 = t566 + t369 * t78 + (pkin(3) + t490) * t520;
t61 = t371 * t79 + t427 * t521 - t575;
t60 = t374 * t99 + t377 * t97;
t59 = t374 * t98 + t377 * t96;
t56 = -t374 * t84 + t377 * t85;
t55 = t374 * t85 + t377 * t84;
t54 = -t374 * t82 + t377 * t83;
t53 = t374 * t83 + t377 * t82;
t52 = t374 * t81 + t377 * t80;
t51 = t107 * t377 + t120 * t374 + t583;
t50 = -pkin(3) * t180 + qJ(4) * t58;
t49 = -t374 * t76 + t377 * t77;
t48 = t374 * t77 + t377 * t76;
t47 = t104 * t377 + t117 * t374 + t591;
t46 = -t57 - t565;
t45 = t369 * t75 + t371 * t74;
t43 = t564 + t58;
t39 = pkin(5) * t408 - t122 * t497 - t487;
t38 = pkin(5) * t159 - t119 * t497 + t485;
t37 = -t369 * t69 + t371 * t70 - t565;
t36 = t369 * t70 + t371 * t69 + t564;
t35 = t377 * t58 - t486;
t34 = t374 * t58 + t484;
t33 = pkin(5) * t121 - qJ(5) * t122 - t42;
t32 = pkin(5) * t118 - qJ(5) * t119 - t41;
t31 = -qJ(4) * t44 + (-qJ(5) * t371 + t491) * t106;
t30 = t374 * t67 + t377 * t62 - t583;
t29 = t374 * t64 + t377 * t61 - t591;
t28 = -t374 * t44 + t377 * t45;
t27 = t374 * t45 + t377 * t44;
t26 = qJ(4) * t45 + (-t427 - t490) * t106;
t23 = t374 * t46 + t377 * t43 + t574;
t22 = t24 * t369 + t371 * t68;
t20 = pkin(5) * t183 - t103 * t497 - t25;
t19 = t36 * t377 + t37 * t374 + t574;
t18 = -qJ(4) * t84 + t33 * t371 - t369 * t39;
t17 = -qJ(4) * t82 + t32 * t371 - t369 * t38;
t16 = -pkin(2) * t180 + pkin(9) * t35 - qJ(4) * t486 + t377 * t50;
t15 = -pkin(3) * t122 + qJ(4) * t85 + t33 * t369 + t371 * t39;
t14 = -pkin(3) * t119 + qJ(4) * t83 + t32 * t369 + t371 * t38;
t13 = -qJ(4) * t76 - t20 * t369 + t371 * t63;
t12 = pkin(5) * t24 - qJ(5) * t25;
t11 = -pkin(3) * t103 + qJ(4) * t77 + t20 * t371 + t369 * t63;
t10 = pkin(5) * t68 - t25 * t497;
t9 = -t21 * t374 + t22 * t377;
t8 = t21 * t377 + t22 * t374;
t7 = -pkin(2) * t106 + pkin(9) * t28 + t26 * t377 + t31 * t374;
t6 = -pkin(2) * t122 + pkin(9) * t56 + t15 * t377 + t18 * t374;
t5 = -pkin(2) * t119 + pkin(9) * t54 + t14 * t377 + t17 * t374;
t4 = -pkin(2) * t103 + pkin(9) * t49 + t11 * t377 + t13 * t374;
t3 = -qJ(4) * t21 - t10 * t369 + t12 * t371;
t2 = -pkin(3) * t25 + qJ(4) * t22 + t10 * t371 + t12 * t369;
t1 = -pkin(2) * t25 + pkin(9) * t9 + t2 * t377 + t3 * t374;
t40 = [0, 0, 0, 0, 0, qJDD(1), t399, t400, 0, 0, (t344 * t370 + t378 * t532) * t375, t372 * t347 + (t375 * t324 + t378 * t431) * t370, t372 * t322 + (t452 + t378 * (-t435 + t499)) * t370, (t345 * t370 - t375 * t532) * t378, t372 * t323 + (t375 * (t434 - t499) + t450) * t370, t372 * t419, (-t300 + pkin(1) * (t342 * t378 + t346 * t375)) * t372 + (t378 * t325 + pkin(1) * t324 + pkin(8) * (t346 * t378 - t452)) * t370, -t325 * t457 - t372 * t301 + pkin(1) * (-t370 * t431 + (t330 * t378 - t341 * t375) * t372) + (-t330 * t375 - t450) * t489, pkin(1) * ((-t322 * t378 + t323 * t375) * t372 - (-t367 - t368) * t366 * t455) + (t322 * t375 + t323 * t378) * t489 + t519 * t370, pkin(1) * (t370 * t325 + (-t300 * t378 + t301 * t375) * t372) + t519 * t489, t372 * t266 + (t375 * (t297 * t377 + t336 * t460) - t432) * t370, t372 * t208 + (t375 * (t267 * t377 - t269 * t374) - t378 * t317) * t370, t372 * t257 + (t375 * (-t321 * t374 + t527) + t378 * t271) * t370, t372 * t265 + (t375 * (-t334 * t459 + t374 * t404) + t432) * t370, t372 * t258 + (t375 * (t320 * t377 + t470) - t378 * t393) * t370, t372 * t276 + t326 + (t334 * t377 - t336 * t374) * t357 * t457, (t167 + pkin(1) * (t231 * t375 + t267 * t378)) * t372 + (t375 * (-pkin(9) * t230 + t473) + t378 * (-pkin(2) * t230 + t189) - pkin(1) * t230 + pkin(8) * (t231 * t378 - t267 * t375)) * t370, (t168 + pkin(1) * (t253 * t375 - t269 * t378)) * t372 + (t375 * (-pkin(9) * t252 + t472) + t378 * (-pkin(2) * t252 + t190) - pkin(1) * t252 + pkin(8) * (t253 * t378 + t269 * t375)) * t370, (t105 + pkin(1) * (t210 * t375 + t282 * t378)) * t372 + (t375 * t412 + pkin(8) * (t210 * t378 - t282 * t375) + t410 * (t271 * t377 + t374 * t393)) * t370, (t108 + pkin(1) * (t128 * t375 - t262 * t378)) * t372 + (pkin(8) * (t128 * t378 + t262 * t375) - t410 * t412) * t370, t537, t573, t588, t536, t587, t535, (t47 - t598) * t372 + (t375 * (-t104 * t374 + t117 * t377 - t593) + t378 * (-t492 + t94 - t594) + t597) * t370, (t51 - t595) * t372 + (t375 * (-t107 * t374 + t120 * t377 - t584) + t378 * (t303 - t418 - t585) + t592) * t370, (t23 + t572) * t372 + (t375 * (-t374 * t43 + t377 * t46 - t577) + t378 * (-t493 - t578) + t569) * t370, (t16 + pkin(1) * (-t180 * t378 + t35 * t375)) * t372 + (t375 * (-pkin(9) * t34 - qJ(4) * t484 - t374 * t50) + t378 * (-pkin(2) * t34 - t496) - pkin(1) * t34 + pkin(8) * (t180 * t375 + t35 * t378)) * t370, t535, -t588, -t587, t537, t573, t536, (t19 + t572) * t372 + (t375 * (-t36 * t374 + t37 * t377 - t577) + t378 * (-t397 - t578) + t569) * t370, (t29 + t598) * t372 + (t375 * (-t374 * t61 + t377 * t64 + t593) + t378 * (-t315 * t254 + t305 - t384 + t594) - t597) * t370, (t30 + t595) * t372 + (t375 * (-t374 * t62 + t377 * t67 + t584) + t378 * (t304 - t513 + t585) - t592) * t370, (t7 + pkin(1) * (-t106 * t378 + t28 * t375)) * t372 + (t375 * (-pkin(9) * t27 - t26 * t374 + t31 * t377) + t378 * (-pkin(2) * t27 - t401) - pkin(1) * t27 + pkin(8) * (t106 * t375 + t28 * t378)) * t370, t372 * t72 + (t375 * (-t114 * t374 + t116 * t377) + t378 * t155) * t370, t372 * t52 + (t375 * (-t374 * t80 + t377 * t81) + t378 * t102) * t370, t372 * t60 + (t375 * (-t374 * t97 + t377 * t99) + t378 * t136) * t370, t372 * t71 + (t375 * (-t113 * t374 + t115 * t377) + t378 * t156) * t370, t372 * t59 + (t375 * (-t374 * t96 + t377 * t98) + t378 * t134) * t370, t372 * t86 + (t375 * (-t141 * t374 + t142 * t377) - t378 * t175) * t370, (t5 + pkin(1) * (-t119 * t378 + t375 * t54)) * t372 + (t375 * (-pkin(9) * t53 - t14 * t374 + t17 * t377) + t378 * (-pkin(2) * t53 - t511) - pkin(1) * t53 + pkin(8) * (t119 * t375 + t378 * t54)) * t370, (t6 + pkin(1) * (-t122 * t378 + t375 * t56)) * t372 + (t375 * (-pkin(9) * t55 - t15 * t374 + t18 * t377) + t378 * (-pkin(2) * t55 - t510) - pkin(1) * t55 + pkin(8) * (t122 * t375 + t378 * t56)) * t370, (t4 + pkin(1) * (-t103 * t378 + t375 * t49)) * t372 + (t375 * (-pkin(9) * t48 - t11 * t374 + t13 * t377) + t378 * (-pkin(2) * t48 - t512) - pkin(1) * t48 + pkin(8) * (t103 * t375 + t378 * t49)) * t370, (t1 + pkin(1) * (-t25 * t378 + t375 * t9)) * t372 + (t375 * (-pkin(9) * t8 - t2 * t374 + t3 * t377) + t378 * (-pkin(2) * t8 - t514) - pkin(1) * t8 + pkin(8) * (t25 * t375 + t378 * t9)) * t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, t347, t322, t356, t323, t419, -t300, -t301, 0, 0, t266, t208, t257, t265, t258, t276, t167, t168, t105, t108, t506, t563, t130, t507, t132, t508, t47, t51, t23, t16, t508, -t130, -t132, t506, t563, t507, t19, t29, t30, t7, t72, t52, t60, t71, t59, t86, t5, t6, t4, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t463, t317, -t271, -t463, t393, -t339, -t189, -t190, 0, 0, t466, t517, -t219, -t466, t522, -t339, t305 - t425 + t492, t304 + t418, t493, t496, -t339, t219, -t522, t466, t517, -t466, t397, t420 + t384, t303 + t513, t401, -t155, -t102, -t136, -t156, -t134, t175, t511, t510, t512, t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t521, t520, t516, t180, 0, 0, 0, 0, 0, 0, t516, -t521, -t520, t106, 0, 0, 0, 0, 0, 0, t119, t122, t103, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, -t391, t518, t75, 0, 0, 0, 0, 0, 0, t118, t121, t101, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t225, t224, t163, -t225, t394, t246, -t41, -t42, 0, 0;];
tauJ_reg  = t40;
