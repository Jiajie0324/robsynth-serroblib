% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR2_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR2_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR2_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR2_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR2_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR2_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:02:40
% EndTime: 2019-03-09 05:03:00
% DurationCPUTime: 12.62s
% Computational Cost: add. (13704->660), mult. (29538->849), div. (0->0), fcn. (20585->18), ass. (0->313)
t293 = sin(qJ(6));
t294 = sin(qJ(4));
t297 = cos(qJ(4));
t379 = t297 * qJD(3);
t295 = sin(qJ(3));
t391 = qJD(1) * t295;
t225 = t294 * t391 - t379;
t388 = qJD(3) * t294;
t227 = t297 * t391 + t388;
t288 = sin(pkin(11));
t290 = cos(pkin(11));
t353 = t225 * t290 + t288 * t227;
t450 = cos(qJ(6));
t326 = t450 * t353;
t336 = -t225 * t288 + t290 * t227;
t380 = qJD(6) * t293;
t298 = cos(qJ(3));
t378 = qJD(1) * qJD(3);
t361 = t298 * t378;
t376 = t295 * qJDD(1);
t383 = qJD(4) * t295;
t461 = qJD(1) * t383 - qJDD(3);
t139 = -qJD(4) * t379 + (-t361 - t376) * t297 + t461 * t294;
t390 = qJD(1) * t298;
t140 = t294 * (qJD(3) * (qJD(4) + t390) + t376) + t461 * t297;
t68 = -t288 * t139 + t140 * t290;
t69 = -t139 * t290 - t140 * t288;
t17 = qJD(6) * t326 + t293 * t68 + t336 * t380 - t450 * t69;
t254 = -qJD(4) + t390;
t249 = -qJD(6) + t254;
t77 = t293 * t336 + t326;
t429 = t249 * t77;
t477 = -t17 - t429;
t437 = t77 ^ 2;
t467 = -t293 * t353 + t336 * t450;
t438 = t467 ^ 2;
t476 = -t437 + t438;
t436 = t77 * t467;
t289 = sin(pkin(10));
t263 = pkin(1) * t289 + pkin(7);
t242 = t263 * qJD(1);
t193 = qJD(2) * t295 + t242 * t298;
t171 = qJD(3) * pkin(8) + t193;
t347 = pkin(3) * t298 + pkin(8) * t295;
t331 = -pkin(2) - t347;
t291 = cos(pkin(10));
t449 = pkin(1) * t291;
t213 = t331 - t449;
t174 = t213 * qJD(1);
t103 = -t171 * t294 + t297 * t174;
t88 = -qJ(5) * t227 + t103;
t81 = -pkin(4) * t254 + t88;
t104 = t171 * t297 + t174 * t294;
t89 = -qJ(5) * t225 + t104;
t84 = t288 * t89;
t40 = t290 * t81 - t84;
t460 = pkin(9) * t336;
t31 = -pkin(5) * t254 + t40 - t460;
t428 = t290 * t89;
t41 = t288 * t81 + t428;
t469 = pkin(9) * t353;
t35 = t41 - t469;
t362 = qJD(6) * t450;
t278 = t298 * qJDD(1);
t216 = t295 * t378 + qJDD(4) - t278;
t240 = t263 * qJDD(1);
t464 = -qJD(2) * qJD(3) - t240;
t371 = -t295 * qJDD(2) + t298 * t464;
t387 = qJD(3) * t295;
t126 = -t242 * t387 - t371;
t116 = qJDD(3) * pkin(8) + t126;
t346 = pkin(3) * t295 - pkin(8) * t298;
t231 = t346 * qJD(3);
t141 = qJD(1) * t231 + qJDD(1) * t213;
t129 = t297 * t141;
t45 = -qJD(4) * t104 - t116 * t294 + t129;
t28 = pkin(4) * t216 + qJ(5) * t139 - qJD(5) * t227 + t45;
t382 = qJD(4) * t297;
t384 = qJD(4) * t294;
t44 = t297 * t116 + t294 * t141 - t171 * t384 + t174 * t382;
t30 = -qJ(5) * t140 - qJD(5) * t225 + t44;
t8 = t290 * t28 - t288 * t30;
t6 = pkin(5) * t216 - pkin(9) * t69 + t8;
t9 = t288 * t28 + t290 * t30;
t7 = -pkin(9) * t68 + t9;
t1 = t293 * t6 + t31 * t362 - t35 * t380 + t450 * t7;
t284 = qJ(4) + pkin(11);
t279 = qJ(6) + t284;
t261 = sin(t279);
t262 = cos(t279);
t285 = qJ(1) + pkin(10);
t273 = cos(t285);
t271 = sin(t285);
t408 = t271 * t298;
t155 = t261 * t273 - t262 * t408;
t406 = t273 * t298;
t157 = t261 * t271 + t262 * t406;
t439 = g(3) * t295;
t224 = t295 * t242;
t192 = t298 * qJD(2) - t224;
t170 = -qJD(3) * pkin(3) - t192;
t135 = t225 * pkin(4) + qJD(5) + t170;
t82 = pkin(5) * t353 + t135;
t475 = g(1) * t157 - g(2) * t155 + t262 * t439 + t82 * t77 - t1;
t230 = t346 * qJD(1);
t133 = -t192 * t294 + t297 * t230;
t400 = t297 * t298;
t330 = pkin(4) * t295 - qJ(5) * t400;
t292 = -qJ(5) - pkin(8);
t356 = qJD(4) * t292;
t474 = -qJD(1) * t330 - qJD(5) * t294 + t297 * t356 - t133;
t134 = t297 * t192 + t294 * t230;
t369 = t294 * t390;
t381 = qJD(5) * t297;
t473 = -qJ(5) * t369 - t294 * t356 + t134 - t381;
t386 = qJD(3) * t298;
t127 = t298 * qJDD(2) - t242 * t386 + t295 * t464;
t117 = -qJDD(3) * pkin(3) - t127;
t282 = g(3) * t298;
t345 = g(1) * t273 + g(2) * t271;
t313 = -t345 * t295 + t282;
t311 = -t117 - t313;
t472 = pkin(8) * qJD(4) * t254 + t311;
t18 = qJD(6) * t467 + t293 * t69 + t450 * t68;
t426 = t467 * t249;
t471 = -t18 - t426;
t218 = t288 * t297 + t290 * t294;
t206 = t218 * qJD(4);
t458 = t218 * t298;
t395 = -qJD(1) * t458 + t206;
t217 = t288 * t294 - t290 * t297;
t454 = qJD(4) * t217;
t462 = t217 * t390 - t454;
t154 = t261 * t408 + t262 * t273;
t156 = -t261 * t406 + t262 * t271;
t11 = t293 * t31 + t35 * t450;
t2 = -qJD(6) * t11 - t293 * t7 + t450 * t6;
t470 = -g(1) * t156 + g(2) * t154 + t261 * t439 - t467 * t82 + t2;
t424 = t473 * t288 + t290 * t474;
t423 = t288 * t474 - t473 * t290;
t468 = t353 * t336;
t466 = -pkin(5) * t391 - pkin(9) * t462 + t424;
t465 = pkin(9) * t395 - t423;
t364 = t295 * t382;
t366 = t294 * t386;
t463 = t364 + t366;
t459 = t103 * t254 + t44;
t420 = pkin(1) * qJDD(1);
t348 = -t193 + (-t369 + t384) * pkin(4);
t229 = t263 * t400;
t149 = t294 * t213 + t229;
t402 = t294 * t298;
t182 = t271 * t402 + t273 * t297;
t184 = t271 * t297 - t273 * t402;
t455 = -g(1) * t184 + g(2) * t182;
t365 = t298 * t379;
t320 = -t294 * t383 + t365;
t401 = t295 * t297;
t453 = t216 * t401 - t254 * t320;
t451 = pkin(5) * t68;
t448 = pkin(4) * t288;
t447 = pkin(4) * t294;
t446 = pkin(4) * t297;
t444 = g(1) * t271;
t440 = g(2) * t273;
t244 = t292 * t294;
t245 = t292 * t297;
t152 = t290 * t244 + t245 * t288;
t122 = -pkin(9) * t218 + t152;
t153 = t288 * t244 - t290 * t245;
t123 = -pkin(9) * t217 + t153;
t58 = t122 * t450 - t293 * t123;
t435 = qJD(6) * t58 + t293 * t466 - t465 * t450;
t59 = t293 * t122 + t123 * t450;
t434 = -qJD(6) * t59 + t465 * t293 + t450 * t466;
t190 = t218 * t295;
t191 = t217 * t295;
t114 = -t293 * t190 - t191 * t450;
t118 = t206 * t295 + t288 * t366 - t290 * t365;
t318 = t295 * t454;
t319 = qJD(3) * t458;
t307 = t318 - t319;
t42 = t118 * t450 + t190 * t362 - t191 * t380 - t293 * t307;
t433 = -t114 * t18 + t42 * t77;
t113 = t190 * t450 - t191 * t293;
t212 = qJDD(6) + t216;
t43 = qJD(6) * t114 - t293 * t118 - t307 * t450;
t432 = -t113 * t212 + t43 * t249;
t431 = t118 * t353 + t191 * t68;
t409 = t263 * t294;
t393 = t297 * t231 + t387 * t409;
t57 = -t295 * t381 + t330 * qJD(3) + (-t229 + (qJ(5) * t295 - t213) * t294) * qJD(4) + t393;
t396 = t213 * t382 + t294 * t231;
t63 = (-qJ(5) * qJD(4) - qJD(3) * t263) * t401 + (-qJD(5) * t295 + (-qJ(5) * qJD(3) - qJD(4) * t263) * t298) * t294 + t396;
t33 = t288 * t57 + t290 * t63;
t143 = -t293 * t217 + t218 * t450;
t430 = qJD(6) * t143 + t293 * t462 + t395 * t450;
t47 = t290 * t88 - t84;
t427 = t298 * t68;
t425 = t217 * t362 + t218 * t380 + t293 * t395 - t450 * t462;
t264 = pkin(4) * t290 + pkin(5);
t198 = t264 * t450 - t293 * t448;
t46 = -t288 * t88 - t428;
t36 = t46 + t469;
t37 = t47 - t460;
t422 = t198 * qJD(6) - t293 * t36 - t37 * t450;
t199 = t293 * t264 + t448 * t450;
t421 = -t199 * qJD(6) + t293 * t37 - t36 * t450;
t418 = t104 * t254;
t417 = t135 * t295;
t416 = t336 * t254;
t415 = t353 * t254;
t414 = t336 ^ 2;
t413 = t225 * t254;
t411 = t227 * t225;
t410 = t227 * t254;
t407 = t273 * t294;
t283 = -pkin(9) + t292;
t405 = t283 * t295;
t404 = t292 * t295;
t403 = t294 * t295;
t399 = -t190 * t216 - t307 * t254;
t398 = -t140 * t401 - t225 * t365;
t196 = t297 * t213;
t119 = -qJ(5) * t401 + t196 + (-pkin(4) - t409) * t298;
t132 = -qJ(5) * t403 + t149;
t62 = t288 * t119 + t290 * t132;
t397 = pkin(5) * t395 + t348;
t202 = pkin(4) * t403 + t295 * t263;
t286 = t295 ^ 2;
t287 = t298 ^ 2;
t392 = t286 - t287;
t265 = -pkin(2) - t449;
t243 = qJD(1) * t265;
t389 = qJD(3) * t225;
t385 = qJD(4) * t225;
t241 = qJDD(1) * t265;
t301 = qJD(1) ^ 2;
t372 = t295 * t301 * t298;
t151 = pkin(4) * t463 + t263 * t386;
t299 = cos(qJ(1));
t370 = t299 * pkin(1) + t273 * pkin(2) + t271 * pkin(7);
t269 = pkin(3) + t446;
t368 = t227 * t386;
t367 = t254 * t388;
t363 = t254 * t391;
t296 = sin(qJ(1));
t359 = -pkin(1) * t296 + t273 * pkin(7);
t272 = cos(t284);
t233 = pkin(5) * t272 + t446;
t358 = t17 * t298 + t387 * t467;
t32 = -t288 * t63 + t290 * t57;
t355 = -t298 * t69 + t336 * t387;
t61 = t290 * t119 - t132 * t288;
t354 = t139 * t298 + t227 * t387;
t352 = -t139 + t385;
t350 = t227 * t364;
t349 = t295 * t361;
t344 = g(1) * t296 - g(2) * t299;
t343 = -t113 * t17 + t43 * t467;
t342 = -t114 * t212 - t249 * t42;
t341 = t353 ^ 2;
t340 = t295 * t353;
t339 = -t103 * t297 - t104 * t294;
t338 = t103 * t294 - t104 * t297;
t337 = -t118 * t254 + t191 * t216;
t228 = pkin(3) + t233;
t335 = t228 * t298 - t405;
t333 = t269 * t298 - t404;
t50 = -pkin(5) * t298 + pkin(9) * t191 + t61;
t51 = -pkin(9) * t190 + t62;
t21 = -t293 * t51 + t450 * t50;
t22 = t293 * t50 + t450 * t51;
t328 = t18 * t298 - t387 * t77;
t325 = -t216 * t294 + t254 * t382;
t321 = -qJD(1) * t243 + t345;
t317 = -pkin(8) * t216 - t170 * t254;
t300 = qJD(3) ^ 2;
t316 = t263 * t300 + 0.2e1 * t241 + t440;
t315 = 0.2e1 * qJD(3) * t243 - qJDD(3) * t263;
t312 = -t298 * t345 - t439;
t67 = pkin(4) * t140 + qJDD(5) + t117;
t310 = qJD(4) * t339 - t45 * t294 + t44 * t297;
t309 = t126 * t298 - t127 * t295 + (-t192 * t298 - t193 * t295) * qJD(3);
t304 = t67 + t313;
t303 = t69 * t190 - t307 * t336;
t270 = sin(t284);
t247 = t295 * t444;
t236 = qJDD(3) * t298 - t295 * t300;
t235 = qJDD(3) * t295 + t298 * t300;
t232 = pkin(5) * t270 + t447;
t185 = t271 * t294 + t273 * t400;
t183 = -t271 * t400 + t407;
t175 = pkin(5) * t217 - t269;
t164 = t270 * t271 + t272 * t406;
t163 = -t270 * t406 + t271 * t272;
t162 = t270 * t273 - t272 * t408;
t161 = t270 * t408 + t272 * t273;
t150 = -t216 * t298 - t254 * t387;
t148 = -t263 * t402 + t196;
t142 = t217 * t450 + t218 * t293;
t136 = pkin(5) * t190 + t202;
t98 = pkin(4) * t227 + pkin(5) * t336;
t91 = -qJD(4) * t149 + t393;
t90 = (-t295 * t379 - t298 * t384) * t263 + t396;
t83 = -pkin(5) * t307 + t151;
t38 = t67 + t451;
t20 = pkin(9) * t307 + t33;
t19 = pkin(5) * t387 + pkin(9) * t118 + t32;
t10 = -t293 * t35 + t31 * t450;
t4 = -qJD(6) * t22 + t19 * t450 - t293 * t20;
t3 = qJD(6) * t21 + t293 * t19 + t20 * t450;
t5 = [0, 0, 0, 0, 0, qJDD(1), t344, g(1) * t299 + g(2) * t296, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0.2e1 * t291 * t420 - t440 + t444, -0.2e1 * t289 * t420 + t345, 0 (t344 + (t289 ^ 2 + t291 ^ 2) * t420) * pkin(1), qJDD(1) * t286 + 0.2e1 * t349, 0.2e1 * t278 * t295 - 0.2e1 * t378 * t392, t235, qJDD(1) * t287 - 0.2e1 * t349, t236, 0, t315 * t295 + (-t316 + t444) * t298, t295 * t316 + t298 * t315 - t247 (t286 + t287) * t240 + t309 - t345, t241 * t265 - g(1) * (-pkin(2) * t271 + t359) - g(2) * t370 + t309 * t263, -t139 * t401 + t227 * t320, -t350 + (-t368 + (t139 + t385) * t295) * t294 + t398, t354 + t453, t140 * t403 + t225 * t463 (t140 + t367) * t298 + (t325 - t389) * t295, t150, -g(1) * t183 - g(2) * t185 + t148 * t216 - t254 * t91 + (-t45 + (t170 * t294 + t225 * t263) * qJD(3)) * t298 + (qJD(3) * t103 + t117 * t294 + t140 * t263 + t170 * t382) * t295, -g(1) * t182 - g(2) * t184 - t149 * t216 + t254 * t90 + (t44 + (t170 * t297 + t227 * t263) * qJD(3)) * t298 + (-qJD(3) * t104 + t117 * t297 - t139 * t263 - t170 * t384) * t295, t139 * t148 - t140 * t149 - t225 * t90 - t227 * t91 + t247 + t339 * t386 + (qJD(4) * t338 - t294 * t44 - t297 * t45 - t440) * t295, t44 * t149 + t104 * t90 + t45 * t148 + t103 * t91 - g(1) * t359 - g(2) * (t273 * t347 + t370) - t331 * t444 + (t117 * t295 + t170 * t386) * t263, -t118 * t336 - t191 * t69, -t303 + t431, -t337 + t355, t68 * t190 - t307 * t353, -qJD(3) * t340 + t399 + t427, t150, -t32 * t254 + t61 * t216 - t8 * t298 + t151 * t353 + t202 * t68 + t67 * t190 - g(1) * t162 - g(2) * t164 - t454 * t417 + (t135 * t458 + t40 * t295) * qJD(3), -g(1) * t161 - g(2) * t163 - t118 * t135 + t151 * t336 - t191 * t67 + t202 * t69 - t216 * t62 + t254 * t33 + t298 * t9 - t387 * t41, -t33 * t353 - t62 * t68 - t9 * t190 - t32 * t336 - t61 * t69 + t8 * t191 + t40 * t118 + t247 - t41 * t319 + (t41 * t454 - t440) * t295, t9 * t62 + t41 * t33 + t8 * t61 + t40 * t32 + t67 * t202 + t135 * t151 - g(1) * (pkin(4) * t407 + t359) - g(2) * (t269 * t406 - t273 * t404 + t370) + (-g(1) * (-pkin(2) - t333) - g(2) * t447) * t271, -t114 * t17 - t42 * t467, -t343 + t433, -t342 + t358, t113 * t18 + t43 * t77, t328 + t432, -t212 * t298 - t249 * t387, -g(1) * t155 - g(2) * t157 + t10 * t387 + t113 * t38 + t136 * t18 - t2 * t298 + t21 * t212 - t249 * t4 + t43 * t82 + t77 * t83, -g(1) * t154 - g(2) * t156 + t1 * t298 - t11 * t387 + t114 * t38 - t136 * t17 - t212 * t22 + t249 * t3 - t42 * t82 + t467 * t83, -t1 * t113 + t10 * t42 - t11 * t43 - t114 * t2 + t17 * t21 - t18 * t22 - t295 * t440 - t3 * t77 - t4 * t467 + t247, t1 * t22 + t11 * t3 + t2 * t21 + t10 * t4 + t38 * t136 + t82 * t83 - g(1) * (t232 * t273 + t359) - g(2) * (t228 * t406 - t273 * t405 + t370) + (-g(1) * (-pkin(2) - t335) - g(2) * t232) * t271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2) - g(3), 0, 0, 0, 0, 0, 0, t236, -t235, 0, t126 * t295 + t127 * t298 - g(3) + (-t192 * t295 + t193 * t298) * qJD(3), 0, 0, 0, 0, 0, 0 (-t140 + t367) * t298 + (t325 + t389) * t295, t354 - t453, t350 + (t295 * t352 + t368) * t294 + t398, -g(3) + (-qJD(3) * t338 - t117) * t298 + (qJD(3) * t170 + t310) * t295, 0, 0, 0, 0, 0, 0, t353 * t387 + t399 - t427, t337 + t355, t303 + t431, -t41 * t118 - t8 * t190 - t9 * t191 - t67 * t298 - g(3) + t40 * t318 + (-t40 * t458 + t417) * qJD(3), 0, 0, 0, 0, 0, 0, -t328 + t432, t342 + t358, t343 + t433, t1 * t114 - t10 * t43 - t11 * t42 - t113 * t2 - t298 * t38 + t387 * t82 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t372, t392 * t301, t376, t372, t278, qJDD(3), qJD(3) * t193 + t295 * t321 + t127 - t282, t439 + (t192 + t224) * qJD(3) + t321 * t298 + t371, 0, 0, -t139 * t294 - t297 * t410 (-t139 + t413) * t297 + (-t140 + t410) * t294 (-t227 * t295 + t254 * t400) * qJD(1) - t325, -t140 * t297 - t294 * t413, t254 * t384 + t216 * t297 + (t225 * t295 - t254 * t402) * qJD(1), t363, -pkin(3) * t140 - t103 * t391 + t133 * t254 - t193 * t225 + t317 * t294 + t297 * t472, pkin(3) * t139 + t104 * t391 - t134 * t254 - t193 * t227 - t294 * t472 + t317 * t297, t133 * t227 + t134 * t225 + ((qJD(4) * t227 - t140) * pkin(8) + t459) * t297 + (pkin(8) * t352 + t418 - t45) * t294 + t312, -t103 * t133 - t104 * t134 - t170 * t193 + t311 * pkin(3) + (t310 + t312) * pkin(8), t218 * t69 + t336 * t462, -t69 * t217 - t218 * t68 - t336 * t395 - t353 * t462, t216 * t218 - t254 * t462 - t336 * t391, t68 * t217 + t353 * t395, qJD(1) * t340 - t217 * t216 + t254 * t395, t363, t135 * t395 + t152 * t216 + t67 * t217 - t254 * t424 - t269 * t68 - t272 * t313 + t348 * t353 - t391 * t40, t135 * t462 - t153 * t216 + t218 * t67 + t254 * t423 - t269 * t69 + t270 * t313 + t336 * t348 + t391 * t41, -t152 * t69 - t153 * t68 - t9 * t217 - t8 * t218 - t336 * t424 - t353 * t423 - t395 * t41 - t40 * t462 + t312, -g(3) * t333 + t135 * t348 + t8 * t152 + t9 * t153 - t67 * t269 + t40 * t424 + t41 * t423 + t345 * (t269 * t295 + t292 * t298) -t143 * t17 - t425 * t467, t142 * t17 - t143 * t18 + t425 * t77 - t430 * t467, t143 * t212 + t249 * t425 - t391 * t467, t142 * t18 + t430 * t77, -t142 * t212 + t249 * t430 + t391 * t77, t249 * t391, -t10 * t391 + t142 * t38 + t175 * t18 + t212 * t58 - t249 * t434 - t262 * t313 + t397 * t77 + t430 * t82, t11 * t391 + t143 * t38 - t17 * t175 - t212 * t59 + t249 * t435 + t261 * t313 + t397 * t467 - t425 * t82, -t1 * t142 + t10 * t425 - t11 * t430 - t143 * t2 + t17 * t58 - t18 * t59 - t434 * t467 - t435 * t77 + t312, -g(3) * t335 + t1 * t59 + t10 * t434 + t11 * t435 + t38 * t175 + t2 * t58 + t397 * t82 + t345 * (t228 * t295 + t283 * t298); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t411, -t225 ^ 2 + t227 ^ 2, -t139 - t413, -t411, -t140 - t410, t216, -t171 * t382 - t418 - t170 * t227 + t129 + (-qJD(4) * t174 - t116 + t439) * t294 + t455, g(1) * t185 - g(2) * t183 + g(3) * t401 + t170 * t225 - t459, 0, 0, t468, -t341 + t414, t69 - t415, -t468, -t68 - t416, t216, t270 * t439 - g(1) * t163 + g(2) * t161 - t135 * t336 + t46 * t254 + (t290 * t216 - t227 * t353) * pkin(4) + t8, t272 * t439 + g(1) * t164 - g(2) * t162 + t135 * t353 - t254 * t47 + (-t216 * t288 - t227 * t336) * pkin(4) - t9 (-t288 * t68 - t290 * t69) * pkin(4) + (t41 + t46) * t336 + (t47 - t40) * t353, -t40 * t46 - t41 * t47 + (g(3) * t403 - t135 * t227 + t9 * t288 + t8 * t290 + t455) * pkin(4), t436, t476, t477, -t436, t471, t212, t198 * t212 - t249 * t421 - t98 * t77 + t470, -t199 * t212 + t249 * t422 - t467 * t98 + t475, t17 * t198 - t18 * t199 + (t11 - t421) * t467 + (-t10 - t422) * t77, t1 * t199 + t2 * t198 - t82 * t98 - g(1) * (-t232 * t406 + t233 * t271) - g(2) * (-t232 * t408 - t233 * t273) + t232 * t439 + t422 * t11 + t421 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 - t416, t69 + t415, -t341 - t414, t336 * t40 + t353 * t41 + t304, 0, 0, 0, 0, 0, 0, t18 - t426, -t17 + t429, -t437 - t438, t10 * t467 + t11 * t77 + t304 + t451; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t436, t476, t477, -t436, t471, t212, -t11 * t249 + t470, -t10 * t249 + t475, 0, 0;];
tau_reg  = t5;
