% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR2_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:02:34
% EndTime: 2019-03-09 05:02:44
% DurationCPUTime: 4.07s
% Computational Cost: add. (5365->330), mult. (12395->587), div. (0->0), fcn. (11259->10), ass. (0->165)
t122 = sin(qJ(4));
t124 = cos(qJ(4));
t211 = sin(pkin(11));
t212 = cos(pkin(11));
t154 = t211 * t122 - t212 * t124;
t170 = qJD(4) * t211;
t171 = qJD(4) * t212;
t80 = -t122 * t170 + t124 * t171;
t86 = t212 * t122 + t211 * t124;
t123 = sin(qJ(3));
t125 = cos(qJ(3));
t197 = t125 * qJD(3);
t200 = qJD(4) * t124;
t231 = t122 * t197 + t123 * t200;
t230 = -0.4e1 * t123;
t205 = t122 * t171 + t124 * t170;
t165 = t212 * pkin(4) + pkin(5);
t192 = t211 * pkin(4);
t227 = sin(qJ(6));
t228 = cos(qJ(6));
t76 = t228 * t165 - t227 * t192;
t180 = t124 * t197;
t201 = qJD(4) * t122;
t81 = t123 * t201 - t180;
t217 = -qJ(5) - pkin(8);
t58 = t86 * t217;
t138 = -t86 * pkin(9) + t58;
t59 = t154 * t217;
t47 = -pkin(9) * t154 + t59;
t22 = t227 * t138 + t228 * t47;
t118 = t122 ^ 2;
t120 = t124 ^ 2;
t169 = qJD(4) * (t118 - t120);
t119 = t123 ^ 2;
t203 = -t125 ^ 2 + t119;
t168 = t203 * qJD(3);
t117 = t123 * qJD(3);
t229 = t117 * t154 - t125 * t205;
t226 = pkin(3) * t123;
t225 = pkin(8) * t125;
t224 = t123 * pkin(4);
t223 = t123 * pkin(8);
t222 = t124 * pkin(3);
t221 = t125 * pkin(3);
t172 = qJD(3) * t211;
t163 = t125 * t172;
t173 = qJD(3) * t212;
t164 = t125 * t173;
t145 = -t122 * t164 - t123 * t80 - t124 * t163;
t206 = t86 * t123;
t72 = t154 * t123;
t42 = -t227 * t206 - t228 * t72;
t43 = t122 * t163 + t205 * t123 - t124 * t164;
t16 = t42 * qJD(6) - t228 * t145 - t227 * t43;
t157 = t228 * t206;
t41 = -t227 * t72 + t157;
t220 = t41 * t16;
t179 = qJD(6) * t227;
t15 = qJD(6) * t157 - t227 * t145 - t72 * t179 + t228 * t43;
t219 = t42 * t15;
t218 = t72 * t43;
t54 = -t227 * t154 + t228 * t86;
t26 = t54 * qJD(6) + t228 * t205 + t227 * t80;
t148 = t228 * t154;
t53 = t227 * t86 + t148;
t215 = t15 * t53 - t42 * t26;
t113 = sin(pkin(10)) * pkin(1) + pkin(7);
t210 = t122 * t113;
t178 = -pkin(4) - t210;
t208 = t124 * t123;
t114 = -cos(pkin(10)) * pkin(1) - pkin(2);
t150 = t114 - t221;
t144 = t150 - t223;
t75 = t124 * t144;
t44 = -qJ(5) * t208 + t178 * t125 + t75;
t209 = t122 * t123;
t207 = t124 * t125;
t89 = t113 * t207;
t56 = t122 * t144 + t89;
t50 = -qJ(5) * t209 + t56;
t24 = t211 * t44 + t212 * t50;
t214 = t43 * t154 + t72 * t205;
t143 = qJD(4) * t144;
t159 = -t225 + t226;
t151 = t159 * qJD(3);
t213 = -t122 * t151 - t124 * t143;
t100 = t123 * t113;
t78 = pkin(4) * t209 + t100;
t202 = qJD(4) * t113;
t199 = qJD(4) * t125;
t198 = t124 * qJD(5);
t196 = -0.2e1 * pkin(3) * qJD(4);
t195 = 0.2e1 * qJD(3) * t114;
t116 = pkin(4) * t201;
t90 = t113 * t197;
t57 = pkin(4) * t231 + t90;
t193 = t125 * t210;
t115 = -t124 * pkin(4) - pkin(3);
t191 = t118 * t197;
t189 = t119 * t202;
t187 = t122 * t199;
t185 = t124 * t199;
t184 = t122 * t200;
t183 = t123 * t197;
t182 = t113 * t117;
t181 = t123 * t198;
t177 = qJD(4) * t217;
t167 = t122 * t180;
t166 = t119 * t184;
t160 = -t221 - t223;
t25 = qJD(6) * t148 + t86 * t179 + t227 * t205 - t228 * t80;
t158 = -t16 * t54 + t25 * t41;
t55 = t75 - t193;
t156 = -t122 * t56 - t124 * t55;
t155 = t122 * t55 - t124 * t56;
t152 = t53 * t117 - t125 * t26;
t129 = -t181 + (-t89 + (-t217 * t123 - t150) * t122) * qJD(4) + (t217 * t207 + (-t178 + t222) * t123) * qJD(3);
t134 = (-qJ(5) * qJD(4) - qJD(3) * t113) * t208 + (-qJD(5) * t123 + (-qJ(5) * qJD(3) - t202) * t125) * t122 - t213;
t132 = t212 * t134;
t11 = t211 * t129 + t132;
t126 = pkin(9) * t145 + t11;
t131 = t211 * t134;
t10 = t212 * t129 - t131;
t127 = pkin(5) * t117 + t43 * pkin(9) + t10;
t23 = -t211 * t50 + t212 * t44;
t140 = -t125 * pkin(5) + t72 * pkin(9) + t23;
t137 = t228 * t140;
t20 = -t206 * pkin(9) + t24;
t1 = -qJD(6) * t137 - t228 * t126 - t227 * t127 + t20 * t179;
t82 = t124 * t117 + t187;
t147 = -qJD(5) * t122 + t124 * t177;
t146 = t122 * t177 + t198;
t142 = t206 * t145;
t30 = t113 * t82 + t213;
t31 = -t56 * qJD(4) + (t122 * t100 + t124 * t159) * qJD(3);
t141 = qJD(4) * t156 - t122 * t31 - t124 * t30;
t77 = t227 * t165 + t228 * t192;
t139 = -t86 * t145 + t80 * t206;
t136 = t228 * t138;
t7 = t227 * t140 + t228 * t20;
t46 = t212 * t146 + t211 * t147;
t45 = -t211 * t146 + t212 * t147;
t133 = -t80 * pkin(9) + t45;
t130 = -t205 * pkin(9) + t46;
t128 = -t113 * t185 + t124 * t151 - t181 + (-t143 + t182) * t122 + t81 * qJ(5);
t2 = -t7 * qJD(6) - t227 * t126 + t228 * t127;
t110 = t120 * t197;
t106 = -0.2e1 * t183;
t99 = t120 * t183;
t98 = t118 * t183;
t84 = t122 * t117 - t185;
t67 = t77 * qJD(6);
t66 = t76 * qJD(6);
t65 = pkin(5) * t154 + t115;
t61 = t205 * pkin(5) + t116;
t60 = t123 * t169 - t167;
t51 = t206 * pkin(5) + t78;
t49 = t86 * t117 - t125 * t80;
t27 = -pkin(5) * t145 + t57;
t21 = -t227 * t47 + t136;
t18 = t54 * t117 + t125 * t25;
t9 = -qJD(6) * t22 - t227 * t130 + t228 * t133;
t8 = -qJD(6) * t136 - t228 * t130 - t227 * t133 + t47 * t179;
t6 = -t227 * t20 + t137;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t183, -0.2e1 * t168, 0, t106, 0, 0, t123 * t195, t125 * t195, 0, 0, 0.2e1 * t99 - 0.2e1 * t166, 0.2e1 * t119 * t169 + t167 * t230, 0.2e1 * t123 * t187 + 0.2e1 * t124 * t168, 0.2e1 * t98 + 0.2e1 * t166, -0.2e1 * t122 * t168 + 0.2e1 * t123 * t185, t106, 0.2e1 * t124 * t189 - 0.2e1 * t125 * t31 + 0.2e1 * (t55 + 0.2e1 * t193) * t117, -0.2e1 * t122 * t189 - 0.2e1 * t125 * t30 + 0.2e1 * (-t56 + 0.2e1 * t89) * t117, 0.2e1 * t156 * t197 + 0.2e1 * (qJD(4) * t155 + t122 * t30 - t124 * t31) * t123, 0.2e1 * t113 ^ 2 * t183 - 0.2e1 * t56 * t30 + 0.2e1 * t55 * t31, 0.2e1 * t218, -0.2e1 * t72 * t145 + 0.2e1 * t206 * t43, -0.2e1 * t117 * t72 + 0.2e1 * t125 * t43, -0.2e1 * t142, -0.2e1 * t206 * t117 - 0.2e1 * t125 * t145, t106, -0.2e1 * t10 * t125 + 0.2e1 * t117 * t23 - 0.2e1 * t145 * t78 + 0.2e1 * t206 * t57, 0.2e1 * t11 * t125 - 0.2e1 * t117 * t24 - 0.2e1 * t78 * t43 - 0.2e1 * t57 * t72, 0.2e1 * t10 * t72 - 0.2e1 * t11 * t206 + 0.2e1 * t145 * t24 + 0.2e1 * t23 * t43, 0.2e1 * t10 * t23 + 0.2e1 * t11 * t24 + 0.2e1 * t57 * t78, -0.2e1 * t219, 0.2e1 * t41 * t15 - 0.2e1 * t42 * t16, 0.2e1 * t117 * t42 + 0.2e1 * t125 * t15, 0.2e1 * t220, -0.2e1 * t41 * t117 + 0.2e1 * t125 * t16, t106, 0.2e1 * t117 * t6 - 0.2e1 * t125 * t2 + 0.2e1 * t51 * t16 + 0.2e1 * t27 * t41, -0.2e1 * t1 * t125 - 0.2e1 * t117 * t7 - 0.2e1 * t51 * t15 + 0.2e1 * t27 * t42, 0.2e1 * t1 * t41 + 0.2e1 * t15 * t6 - 0.2e1 * t16 * t7 - 0.2e1 * t2 * t42, -0.2e1 * t1 * t7 + 0.2e1 * t2 * t6 + 0.2e1 * t27 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141 * t123 + (t113 * t203 - t125 * t155) * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t206 - t11 * t72 + t117 * t78 - t57 * t125 + t145 * t23 - t24 * t43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t42 + t117 * t51 - t125 * t27 - t7 * t15 - t6 * t16 - t2 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t98 + 0.2e1 * t99 - 0.2e1 * t183, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t142 - 0.2e1 * t183 + 0.2e1 * t218, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t183 - 0.2e1 * t219 + 0.2e1 * t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, 0, -t117, 0, -t90, t182, 0, 0, -t60, t184 * t230 + t110 - t191, t84, t60, t82, 0 (pkin(8) * t207 + (t210 - t222) * t123) * qJD(4) + (t122 * t160 - t89) * qJD(3) (t113 * t208 + t122 * t159) * qJD(4) + (t124 * t160 + t193) * qJD(3), t141, -pkin(3) * t90 + pkin(8) * t141, -t43 * t86 - t72 * t80, -t139 + t214, t49, -t145 * t154 + t205 * t206, -t229, 0, -t115 * t145 + t116 * t206 + t117 * t58 - t45 * t125 + t154 * t57 + t205 * t78, -t115 * t43 - t116 * t72 - t117 * t59 + t125 * t46 + t57 * t86 + t78 * t80, -t10 * t86 - t11 * t154 + t145 * t59 - t205 * t24 - t206 * t46 - t23 * t80 + t58 * t43 + t45 * t72, t10 * t58 + t11 * t59 + t115 * t57 + t116 * t78 + t23 * t45 + t24 * t46, -t15 * t54 - t25 * t42, t158 + t215, t18, t16 * t53 + t26 * t41, -t152, 0, t117 * t21 - t125 * t9 + t65 * t16 + t51 * t26 + t27 * t53 + t61 * t41, -t117 * t22 - t125 * t8 - t65 * t15 - t51 * t25 + t27 * t54 + t61 * t42, t1 * t53 + t15 * t21 - t16 * t22 - t2 * t54 + t25 * t6 - t26 * t7 + t41 * t8 - t42 * t9, -t1 * t22 + t2 * t21 + t27 * t65 + t51 * t61 + t6 * t9 - t7 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117, -t197, 0, 0, 0, 0, 0, 0, 0, 0, -t82, t84, t110 + t191 (-t226 + (t118 + t120) * t225) * qJD(3), 0, 0, 0, 0, 0, 0, t229, t49, t139 + t214, -pkin(4) * t187 + t115 * t117 + t145 * t58 - t206 * t45 - t43 * t59 - t72 * t46, 0, 0, 0, 0, 0, 0, t152, t18, -t158 + t215, t117 * t65 - t125 * t61 - t15 * t22 - t16 * t21 - t41 * t9 - t42 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t184, -0.2e1 * t169, 0, -0.2e1 * t184, 0, 0, t122 * t196, t124 * t196, 0, 0, 0.2e1 * t86 * t80, -0.2e1 * t154 * t80 - 0.2e1 * t205 * t86, 0, 0.2e1 * t154 * t205, 0, 0, 0.2e1 * t115 * t205 + 0.2e1 * t116 * t154, 0.2e1 * t115 * t80 + 0.2e1 * t116 * t86, -0.2e1 * t154 * t46 - 0.2e1 * t205 * t59 - 0.2e1 * t45 * t86 - 0.2e1 * t58 * t80, 0.2e1 * t115 * t116 + 0.2e1 * t45 * t58 + 0.2e1 * t46 * t59, -0.2e1 * t54 * t25, 0.2e1 * t25 * t53 - 0.2e1 * t26 * t54, 0, 0.2e1 * t53 * t26, 0, 0, 0.2e1 * t26 * t65 + 0.2e1 * t53 * t61, -0.2e1 * t25 * t65 + 0.2e1 * t54 * t61, 0.2e1 * t21 * t25 - 0.2e1 * t22 * t26 + 0.2e1 * t53 * t8 - 0.2e1 * t54 * t9, 0.2e1 * t21 * t9 - 0.2e1 * t22 * t8 + 0.2e1 * t61 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t81, 0, -t231, t117, t31, t30, 0, 0, 0, 0, -t43, 0, t145, t117, t212 * t128 + 0.2e1 * t173 * t224 - t131, -t211 * t128 - 0.2e1 * t172 * t224 - t132 (t211 * t145 + t212 * t43) * pkin(4) (t212 * t10 + t211 * t11) * pkin(4), 0, 0, -t15, 0, -t16, t117, t117 * t76 + t67 * t125 + t2, -t117 * t77 + t66 * t125 + t1, t15 * t76 - t16 * t77 - t41 * t66 + t42 * t67, -t1 * t77 + t2 * t76 - t6 * t67 + t66 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t231, t81, 0, 0, 0, 0, 0, 0, 0, 0, t145, t43, 0 (t145 * t212 - t43 * t211) * pkin(4), 0, 0, 0, 0, 0, 0, -t16, t15, 0, -t15 * t77 - t16 * t76 + t41 * t67 + t42 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t200, 0, -t201, 0, -pkin(8) * t200, pkin(8) * t201, 0, 0, 0, 0, t80, 0, -t205, 0, t45, -t46 (-t211 * t205 - t212 * t80) * pkin(4) (t211 * t46 + t212 * t45) * pkin(4), 0, 0, -t25, 0, -t26, 0, t9, t8, t25 * t76 - t26 * t77 - t53 * t66 + t54 * t67, -t21 * t67 + t22 * t66 + t76 * t9 - t77 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t67, -0.2e1 * t66, 0, 0.2e1 * t66 * t77 - 0.2e1 * t67 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, -t43, 0, t57, 0, 0, 0, 0, 0, 0, t16, -t15, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, t80, 0, t116, 0, 0, 0, 0, 0, 0, t26, -t25, 0, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, 0, -t16, t117, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, 0, -t26, 0, t9, t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, -t66, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
