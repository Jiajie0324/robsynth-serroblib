% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRRPR4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:10:21
% EndTime: 2019-03-09 05:10:39
% DurationCPUTime: 8.64s
% Computational Cost: add. (17885->479), mult. (47360->628), div. (0->0), fcn. (38137->10), ass. (0->251)
t235 = sin(pkin(10));
t237 = cos(pkin(10));
t349 = sin(qJ(3));
t351 = cos(qJ(3));
t262 = t349 * t235 - t351 * t237;
t195 = t262 * qJD(1);
t261 = -t351 * t235 - t349 * t237;
t196 = t261 * qJD(1);
t239 = sin(qJ(4));
t350 = cos(qJ(4));
t167 = -t350 * t195 + t196 * t239;
t163 = qJD(6) - t167;
t234 = sin(pkin(11));
t236 = cos(pkin(11));
t238 = sin(qJ(6));
t240 = cos(qJ(6));
t207 = t234 * t240 + t236 * t238;
t246 = t195 * qJD(3);
t288 = qJD(4) * t350;
t299 = qJD(4) * t239;
t289 = qJD(3) * t349;
t290 = qJD(3) * t351;
t302 = (t235 * t290 + t237 * t289) * qJD(1);
t243 = t195 * t299 + t196 * t288 + t239 * t246 - t350 * t302;
t309 = t240 * t236;
t360 = -t234 * t238 + t309;
t361 = t360 * qJD(6);
t304 = t360 * t167 - t361;
t407 = -t163 * t304 - t207 * t243;
t199 = t207 * qJD(6);
t305 = t207 * t167 - t199;
t233 = qJD(3) + qJD(4);
t265 = -t239 * t195 - t350 * t196;
t150 = t233 * t234 + t236 * t265;
t248 = t350 * t262;
t244 = qJD(3) * t248;
t264 = -qJD(1) * t244 - t195 * t288 + t196 * t299 - t239 * t302;
t159 = t234 * t265;
t362 = t233 * t236 - t159;
t268 = t240 * t362;
t331 = t264 * t234;
t37 = t238 * (qJD(6) * t150 + t331) - qJD(6) * t268 - t264 * t309;
t93 = t240 * t150 + t238 * t362;
t406 = t305 * t93 - t360 * t37;
t94 = -t238 * t150 + t268;
t404 = t94 ^ 2;
t402 = t94 * t163;
t401 = t93 ^ 2;
t367 = t264 * t207;
t38 = qJD(6) * t93 + t367;
t281 = -t207 * t38 - t304 * t94;
t400 = t281 + t406;
t399 = -t37 * t207 - t304 * t93;
t345 = pkin(7) + qJ(2);
t214 = t345 * t235;
t209 = qJD(1) * t214;
t216 = t345 * t237;
t210 = qJD(1) * t216;
t263 = t349 * t209 - t351 * t210;
t153 = -t195 * pkin(8) - t263;
t147 = t350 * t153;
t295 = t349 * t210;
t173 = -t351 * t209 - t295;
t152 = t196 * pkin(8) + t173;
t148 = qJD(3) * pkin(3) + t152;
t88 = t239 * t148 + t147;
t82 = t233 * qJ(5) + t88;
t226 = -t237 * pkin(2) - pkin(1);
t211 = t226 * qJD(1) + qJD(2);
t175 = t195 * pkin(3) + t211;
t89 = -pkin(4) * t167 - qJ(5) * t265 + t175;
t54 = -t234 * t82 + t236 * t89;
t30 = -pkin(5) * t167 - pkin(9) * t150 + t54;
t55 = t234 * t89 + t236 * t82;
t39 = pkin(9) * t362 + t55;
t12 = t238 * t30 + t240 * t39;
t291 = qJD(2) * t349;
t277 = qJD(1) * t291;
t292 = qJD(2) * t351;
t278 = qJD(1) * t292;
t258 = -t209 * t290 - t235 * t277 + t237 * t278;
t144 = -t210 * t289 + t258;
t132 = -t302 * pkin(8) + t144;
t133 = pkin(8) * t246 + t209 * t289 - t210 * t290 - t235 * t278 - t237 * t277;
t284 = t239 * t132 - t350 * t133;
t45 = qJD(4) * t88 + t284;
t29 = pkin(5) * t331 + t45;
t146 = t239 * t153;
t87 = t350 * t148 - t146;
t81 = -t233 * pkin(4) + qJD(5) - t87;
t71 = -pkin(5) * t362 + t81;
t398 = t12 * t265 + t29 * t207 - t304 * t71;
t336 = t93 * t265;
t397 = -t336 + t407;
t272 = t238 * t39 - t240 * t30;
t282 = -t350 * t132 - t239 * t133 - t148 * t288 + t153 * t299;
t42 = qJD(5) * t233 - t282;
t287 = t302 * pkin(3);
t53 = -pkin(4) * t243 - qJ(5) * t264 - qJD(5) * t265 + t287;
t22 = t234 * t53 + t236 * t42;
t13 = -pkin(9) * t331 + t22;
t21 = -t234 * t42 + t236 * t53;
t310 = t236 * t264;
t8 = -pkin(5) * t243 - pkin(9) * t310 + t21;
t3 = -qJD(6) * t272 + t240 * t13 + t238 * t8;
t4 = -qJD(6) * t12 - t238 * t13 + t240 * t8;
t396 = t305 * t12 - t4 * t207 - t304 * t272 + t3 * t360;
t382 = t167 * t234;
t395 = pkin(5) * t382;
t394 = pkin(9) * t382;
t318 = t167 * t233;
t393 = t264 - t318;
t276 = t305 * t163 - t243 * t360;
t339 = t265 * t94;
t392 = t276 - t339;
t325 = t265 ^ 2;
t383 = t167 ^ 2;
t391 = -t383 + t325;
t381 = t167 * t236;
t390 = pkin(5) * t265 - pkin(9) * t381;
t19 = t22 * t236;
t389 = t54 * t381 + t19;
t387 = t305 * t94 - t360 * t38;
t386 = t265 * t272 - t29 * t360 - t305 * t71;
t105 = t234 * t310;
t384 = -t150 * t381 + t105;
t365 = t265 * t167;
t324 = t265 * t233;
t377 = t243 + t324;
t375 = t167 * t55 - t21;
t122 = pkin(4) * t265 - qJ(5) * t167;
t270 = t234 * t362;
t374 = t167 * t270 - t105;
t373 = -t175 * t167 + t282;
t116 = t236 ^ 2 * t264;
t269 = t236 * t362;
t326 = t150 * t234;
t257 = t269 - t326;
t313 = t234 ^ 2 * t264;
t372 = -t167 * t257 + t116 - t313;
t252 = qJD(3) * t261;
t254 = qJD(3) * t262;
t256 = t239 * t262;
t131 = -qJD(4) * t256 - t239 * t254 - t350 * t252 - t261 * t288;
t171 = -t239 * t261 + t248;
t79 = t243 * t171;
t368 = -t131 * t167 - t79;
t95 = t152 * t239 + t147;
t279 = pkin(3) * t299 - t95;
t327 = t150 * t265;
t366 = t163 * t265;
t364 = t265 * t362;
t115 = t234 * t243;
t363 = -t167 * t381 + t115;
t359 = t45 * t234 + t265 * t55;
t356 = -t45 * t236 - t54 * t265;
t355 = -t175 * t265 - t284;
t353 = t196 ^ 2;
t352 = qJD(3) ^ 2;
t348 = pkin(3) * t196;
t347 = t236 * pkin(5);
t228 = t236 * pkin(9);
t346 = t93 * t94;
t156 = -t214 * t290 - t216 * t289 - t235 * t291 + t237 * t292;
t137 = pkin(8) * t252 + t156;
t177 = -t351 * t214 - t349 * t216;
t160 = pkin(8) * t261 + t177;
t179 = -t349 * t214 + t351 * t216;
t161 = -pkin(8) * t262 + t179;
t242 = pkin(8) * t254 + t214 * t289 - t216 * t290 - t235 * t292 - t237 * t291;
t58 = t350 * t137 + t160 * t288 - t161 * t299 + t239 * t242;
t130 = qJD(4) * t248 - t239 * t252 - t261 * t299 + t244;
t172 = -t261 * t350 - t256;
t249 = pkin(3) * t252;
t64 = t131 * pkin(4) + t130 * qJ(5) - t172 * qJD(5) - t249;
t26 = t234 * t64 + t236 * t58;
t96 = t350 * t152 - t146;
t99 = t122 - t348;
t61 = t234 * t99 + t236 * t96;
t112 = -t350 * t160 + t161 * t239;
t338 = t45 * t112;
t224 = pkin(3) * t239 + qJ(5);
t200 = (-pkin(9) - t224) * t234;
t201 = t224 * t236 + t228;
t169 = t200 * t240 - t201 * t238;
t220 = pkin(3) * t288 + qJD(5);
t60 = -t234 * t96 + t236 * t99;
t36 = t390 + t60;
t47 = t61 - t394;
t335 = qJD(6) * t169 + t220 * t360 - t238 * t36 - t240 * t47;
t170 = t200 * t238 + t201 * t240;
t334 = -qJD(6) * t170 - t207 * t220 + t238 * t47 - t240 * t36;
t213 = (-pkin(9) - qJ(5)) * t234;
t215 = qJ(5) * t236 + t228;
t176 = t213 * t240 - t215 * t238;
t65 = t236 * t122 - t234 * t87;
t40 = t390 + t65;
t66 = t234 * t122 + t236 * t87;
t50 = t66 - t394;
t333 = qJD(5) * t360 + qJD(6) * t176 - t238 * t40 - t240 * t50;
t178 = t213 * t238 + t215 * t240;
t332 = -qJD(5) * t207 - qJD(6) * t178 + t238 * t50 - t240 * t40;
t330 = t130 * t234;
t329 = t130 * t236;
t315 = t172 * t234;
t314 = t196 * t195;
t183 = pkin(3) * t262 + t226;
t107 = t171 * pkin(4) - t172 * qJ(5) + t183;
t113 = t239 * t160 + t350 * t161;
t68 = t234 * t107 + t236 * t113;
t117 = t236 * t243;
t303 = -t167 * t382 - t117;
t301 = t235 ^ 2 + t237 ^ 2;
t300 = qJD(3) * t196;
t25 = -t234 * t58 + t236 * t64;
t286 = t301 * qJD(1) ^ 2;
t67 = t236 * t107 - t113 * t234;
t227 = -t350 * pkin(3) - pkin(4);
t280 = t279 - t395;
t274 = -t21 * t234 + t19;
t273 = t234 * t54 - t236 * t55;
t46 = pkin(5) * t171 - t172 * t228 + t67;
t57 = -pkin(9) * t315 + t68;
t23 = -t238 * t57 + t240 * t46;
t24 = t238 * t46 + t240 * t57;
t271 = t112 * t264 + t172 * t45;
t266 = 0.2e1 * t301 * qJD(2) * qJD(1);
t260 = -t130 * t81 + t271;
t259 = -t130 * t167 - t171 * t264 + t172 * t243;
t255 = -pkin(4) * t264 + qJ(5) * t243 - (-qJD(5) + t81) * t167;
t251 = t261 * qJD(2);
t247 = t224 * t243 + t227 * t264 + (t220 - t81) * t167;
t245 = qJD(1) * t251;
t59 = qJD(4) * t113 + t239 * t137 - t350 * t242;
t225 = -pkin(4) - t347;
t212 = t227 - t347;
t192 = t195 ^ 2;
t157 = -t179 * qJD(3) + t251;
t145 = qJD(3) * t263 + t245;
t126 = t360 * t172;
t125 = t207 * t172;
t74 = pkin(5) * t315 + t112;
t72 = t88 + t395;
t49 = -t130 * t207 + t172 * t361;
t48 = t130 * t360 + t172 * t199;
t35 = -pkin(5) * t330 + t59;
t20 = pkin(9) * t330 + t26;
t14 = pkin(5) * t131 + pkin(9) * t329 + t25;
t6 = -qJD(6) * t24 + t240 * t14 - t238 * t20;
t5 = qJD(6) * t23 + t238 * t14 + t240 * t20;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t266, qJ(2) * t266 (t195 * t261 + t196 * t262) * qJD(3), t262 ^ 2 * qJD(3) * qJD(1) + t195 * t254 - t196 * t252 + t261 * t302, -t262 * t352, -t195 * t252 + t302 * t262, t261 * t352, 0, t226 * t302 + (-t211 * t261 + t157) * qJD(3), -t156 * qJD(3) - t211 * t254 - t226 * t246, -t144 * t262 + t145 * t261 - t156 * t195 + t157 * t196 - t263 * t252 - t179 * t302 + (qJD(1) * t177 + t173) * t254, t144 * t179 + t145 * t177 - t156 * t263 + t157 * t173, -t130 * t265 + t172 * t264, -t131 * t265 + t259, -t130 * t233, t368, -t131 * t233, 0, t175 * t131 + t167 * t249 + t171 * t287 - t183 * t243 - t59 * t233, -t175 * t130 + t172 * t287 + t183 * t264 - t58 * t233 - t249 * t265, t113 * t243 + t130 * t87 - t131 * t88 + t167 * t58 + t171 * t282 + t265 * t59 + t271, -t113 * t282 - t175 * t249 + t183 * t287 + t88 * t58 - t87 * t59 + t338, t172 * t116 - t150 * t329, -0.2e1 * t172 * t105 - t130 * t257, t150 * t131 - t236 * t259, t130 * t270 + t172 * t313, t131 * t362 + t234 * t259, t368, t54 * t131 - t167 * t25 + t21 * t171 + t234 * t260 - t243 * t67 - t362 * t59, -t55 * t131 + t59 * t150 + t167 * t26 - t22 * t171 + t236 * t260 + t243 * t68, -t25 * t150 - t26 * t159 + (t130 * t54 - t172 * t21 + t233 * t26 - t264 * t67) * t236 + (t130 * t55 - t172 * t22 - t264 * t68) * t234, t21 * t67 + t22 * t68 + t25 * t54 + t26 * t55 + t59 * t81 + t338, -t126 * t37 - t48 * t93, t125 * t37 - t126 * t38 - t48 * t94 - t49 * t93, -t126 * t243 + t131 * t93 - t163 * t48 - t171 * t37, t125 * t38 - t49 * t94, t125 * t243 + t131 * t94 - t163 * t49 - t171 * t38, t131 * t163 - t79, t125 * t29 - t131 * t272 + t163 * t6 + t171 * t4 - t23 * t243 - t35 * t94 + t38 * t74 + t49 * t71, -t12 * t131 + t126 * t29 - t163 * t5 - t171 * t3 + t24 * t243 + t35 * t93 - t37 * t74 - t48 * t71, -t12 * t49 - t125 * t3 - t126 * t4 + t23 * t37 - t24 * t38 - t272 * t48 + t5 * t94 - t6 * t93, t12 * t5 + t23 * t4 + t24 * t3 - t272 * t6 + t29 * t74 + t35 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t286, -qJ(2) * t286, 0, 0, 0, 0, 0, 0, -t300 + t302, -0.2e1 * t246, -t192 - t353, -t173 * t196 - t195 * t263, 0, 0, 0, 0, 0, 0, -t243 + t324, t264 + t318, -t383 - t325, -t88 * t167 + t265 * t87 + t287, 0, 0, 0, 0, 0, 0, t303 + t364, -t327 + t363, -t313 - t116 + (-t269 - t326) * t167, t167 * t273 + t21 * t236 + t22 * t234 - t265 * t81, 0, 0, 0, 0, 0, 0, t276 + t339, -t336 - t407, t281 - t406, -t12 * t304 + t3 * t207 - t265 * t71 - t272 * t305 + t360 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314, -t192 + t353, 0, t314, -t300 - t302, 0, t211 * t196 + t245, t211 * t195 + (t295 + t173) * qJD(3) - t258, 0, 0, -t365, t391, t393, t365, t377, 0, -t167 * t348 + t95 * t233 + (-t147 + (-pkin(3) * t233 - t148) * t239) * qJD(4) + t355, t96 * t233 + (t196 * t265 - t233 * t288) * pkin(3) + t373, t88 * t265 - t96 * t167 + t87 * t167 - t95 * t265 + (-t350 * t264 + t243 * t239 + (t167 * t350 + t239 * t265) * qJD(4)) * pkin(3), t87 * t95 - t88 * t96 + (-t350 * t45 + t175 * t196 - t239 * t282 + (-t239 * t87 + t350 * t88) * qJD(4)) * pkin(3), t384, t372, -t327 - t363, t374, t303 - t364, t365, t167 * t60 + t234 * t247 - t279 * t362 + t356, t150 * t279 - t167 * t61 + t236 * t247 + t359, t220 * t269 - t61 * t362 + t60 * t150 + (t150 * t220 + t375) * t234 + t389, -t220 * t273 + t224 * t274 + t45 * t227 + t279 * t81 - t54 * t60 - t55 * t61, t399, t400, t397, t387, t392, -t366, t334 * t163 - t169 * t243 + t212 * t38 - t280 * t94 + t386, -t335 * t163 + t170 * t243 - t212 * t37 + t280 * t93 + t398, t169 * t37 - t170 * t38 - t334 * t93 + t335 * t94 + t396, t335 * t12 + t4 * t169 + t3 * t170 + t29 * t212 - t272 * t334 + t280 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, t391, t393, t365, t377, 0 (-qJD(4) + t233) * t88 + t355, t233 * t87 + t373, 0, 0, t384, t372, t236 * t383 - t115 - t327, t374, -t234 * t383 - t117 - t364, t365, t167 * t65 + t234 * t255 + t362 * t88 + t356, -t88 * t150 - t167 * t66 + t236 * t255 + t359, qJD(5) * t269 - t66 * t362 + t65 * t150 + (qJD(5) * t150 + t375) * t234 + t389, -t45 * pkin(4) + qJ(5) * t274 - qJD(5) * t273 - t54 * t65 - t55 * t66 - t81 * t88, t399, t400, t397, t387, t392, -t366, t332 * t163 - t176 * t243 + t225 * t38 + t72 * t94 + t386, -t333 * t163 + t178 * t243 - t225 * t37 - t72 * t93 + t398, t176 * t37 - t178 * t38 - t332 * t93 + t333 * t94 + t396, t333 * t12 + t4 * t176 + t3 * t178 + t29 * t225 - t272 * t332 - t71 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150 * t167 + t331, -t167 * t362 + t310, -t150 ^ 2 - t362 ^ 2, t150 * t54 - t362 * t55 + t45, 0, 0, 0, 0, 0, 0, t93 * t163 + t38, -t37 + t402, -t401 - t404, -t12 * t94 - t272 * t93 + t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t346, t401 - t404, -t37 - t402, t346, -t367 + (-qJD(6) + t163) * t93, -t243, t12 * t163 - t71 * t93 + t4, -t163 * t272 - t71 * t94 - t3, 0, 0;];
tauc_reg  = t1;
