% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 22:31
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:31:16
% EndTime: 2019-05-05 22:31:25
% DurationCPUTime: 9.46s
% Computational Cost: add. (90227->329), mult. (220850->471), div. (0->0), fcn. (178065->12), ass. (0->257)
t2241 = cos(pkin(10));
t2251 = qJD(1) ^ 2;
t2245 = sin(qJ(1));
t2249 = cos(qJ(1));
t2224 = t2245 * g(1) - t2249 * g(2);
t2262 = -qJDD(2) + t2224;
t2239 = sin(pkin(10));
t2235 = t2239 ^ 2;
t2236 = t2241 ^ 2;
t2273 = t2235 + t2236;
t2199 = (pkin(7) * t2273 + qJ(2)) * t2251 + (pkin(2) * t2241 + pkin(1)) * qJDD(1) + t2262;
t2233 = t2241 * qJDD(1);
t2244 = sin(qJ(3));
t2248 = cos(qJ(3));
t2272 = t2239 * qJDD(1);
t2182 = t2248 * t2233 - t2244 * t2272;
t2260 = t2239 * t2248 + t2241 * t2244;
t2216 = t2260 * qJD(1);
t2278 = t2216 * qJD(3);
t2203 = t2182 - t2278;
t2215 = (-t2239 * t2244 + t2241 * t2248) * qJD(1);
t2213 = t2215 ^ 2;
t2263 = qJD(3) * pkin(3) - pkin(8) * t2216;
t2155 = t2203 * pkin(3) + t2213 * pkin(8) - t2216 * t2263 + t2199;
t2221 = t2273 * t2251;
t2243 = sin(qJ(4));
t2247 = cos(qJ(4));
t2193 = -t2247 * t2215 + t2216 * t2243;
t2192 = qJD(6) + t2193;
t2303 = qJD(6) + t2192;
t2302 = t2260 * qJDD(1);
t2195 = t2215 * t2243 + t2216 * t2247;
t2237 = qJD(3) + qJD(4);
t2238 = sin(pkin(11));
t2240 = cos(pkin(11));
t2184 = t2195 * t2238 - t2240 * t2237;
t2186 = t2195 * t2240 + t2237 * t2238;
t2242 = sin(qJ(6));
t2246 = cos(qJ(6));
t2159 = t2246 * t2184 + t2186 * t2242;
t2298 = t2159 ^ 2;
t2161 = -t2184 * t2242 + t2186 * t2246;
t2297 = t2161 ^ 2;
t2296 = t2184 ^ 2;
t2295 = t2186 ^ 2;
t2294 = t2192 ^ 2;
t2170 = t2193 ^ 2;
t2293 = t2195 ^ 2;
t2292 = t2216 ^ 2;
t2291 = t2237 ^ 2;
t2290 = -2 * qJD(5);
t2287 = t2239 * g(3);
t2286 = t2241 * g(3);
t2285 = t2159 * t2161;
t2284 = t2184 * t2186;
t2283 = t2186 * t2193;
t2282 = t2193 * t2184;
t2281 = t2193 * t2195;
t2280 = t2215 * qJD(3);
t2279 = t2215 * t2216;
t2277 = t2236 * t2251;
t2276 = t2241 * t2251;
t2275 = qJD(4) - t2237;
t2274 = qJD(6) - t2192;
t2225 = -g(1) * t2249 - g(2) * t2245;
t2268 = -pkin(1) * t2251 + qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t2225;
t2259 = qJDD(1) * pkin(7) + t2268;
t2255 = pkin(2) * t2276 - t2259;
t2270 = pkin(2) * t2277;
t2163 = t2248 * (t2241 * t2259 - t2270 - t2287) + t2244 * (t2239 * t2255 - t2286);
t2135 = -t2213 * pkin(3) + t2203 * pkin(8) - qJD(3) * t2263 + t2163;
t2162 = t2244 * t2270 + (-t2248 * g(3) - t2244 * t2259) * t2241 + (t2244 * g(3) + t2248 * t2255) * t2239;
t2200 = qJDD(3) + t2279;
t2205 = t2302 + t2280;
t2254 = (-t2205 + t2280) * pkin(8) + t2200 * pkin(3) + t2162;
t2108 = t2247 * t2135 + t2243 * t2254;
t2271 = qJDD(3) + qJDD(4);
t2169 = pkin(4) * t2193 - qJ(5) * t2195;
t2097 = -pkin(4) * t2291 + qJ(5) * t2271 - t2193 * t2169 + t2108;
t2264 = -t2247 * t2203 + t2243 * t2205;
t2157 = qJD(4) * t2195 + t2264;
t2261 = -t2243 * t2203 - t2247 * t2205;
t2158 = -qJD(4) * t2193 - t2261;
t2266 = t2237 * t2193 - t2158;
t2100 = t2266 * qJ(5) + (t2195 * t2237 + t2157) * pkin(4) - t2155;
t2071 = t2240 * t2097 + t2238 * t2100 + t2184 * t2290;
t2107 = -t2243 * t2135 + t2247 * t2254;
t2154 = t2240 * t2158 + t2238 * t2271;
t2265 = t2158 * t2238 - t2240 * t2271;
t2267 = -t2242 * t2154 - t2246 * t2265;
t2124 = -t2154 - t2282;
t2125 = t2157 - t2284;
t2070 = -t2238 * t2097 + t2240 * t2100 + t2186 * t2290;
t2257 = -qJDD(6) - t2157;
t2256 = -t2246 * t2154 + t2242 * t2265;
t2096 = -t2271 * pkin(4) - t2291 * qJ(5) + t2195 * t2169 + qJDD(5) - t2107;
t2250 = qJD(3) ^ 2;
t2226 = t2239 * t2276;
t2223 = -qJDD(1) * t2245 - t2249 * t2251;
t2222 = qJDD(1) * t2249 - t2245 * t2251;
t2220 = t2273 * qJDD(1);
t2219 = t2241 * t2221;
t2218 = t2239 * t2221;
t2212 = qJDD(1) * pkin(1) + t2251 * qJ(2) + t2262;
t2208 = -t2250 - t2292;
t2207 = t2241 * t2268 - t2287;
t2206 = -t2239 * t2268 - t2286;
t2204 = t2302 + 0.2e1 * t2280;
t2202 = -t2182 + 0.2e1 * t2278;
t2201 = -qJDD(3) + t2279;
t2198 = -t2250 - t2213;
t2189 = -t2291 - t2293;
t2187 = -t2213 - t2292;
t2178 = t2201 * t2248 - t2208 * t2244;
t2177 = t2201 * t2244 + t2208 * t2248;
t2176 = -t2206 * t2239 + t2207 * t2241;
t2175 = t2206 * t2241 + t2207 * t2239;
t2174 = t2182 * t2248 + t2244 * t2302;
t2173 = t2182 * t2244 - t2248 * t2302;
t2172 = t2198 * t2248 - t2200 * t2244;
t2171 = t2198 * t2244 + t2200 * t2248;
t2168 = -t2271 - t2281;
t2167 = t2271 - t2281;
t2166 = -t2170 - t2291;
t2164 = pkin(5) * t2193 - pkin(9) * t2186;
t2156 = -t2293 - t2170;
t2152 = -t2170 - t2295;
t2151 = -t2177 * t2239 + t2178 * t2241;
t2150 = t2177 * t2241 + t2178 * t2239;
t2148 = t2168 * t2247 - t2189 * t2243;
t2147 = t2168 * t2243 + t2189 * t2247;
t2146 = -t2170 - t2296;
t2144 = -t2295 - t2296;
t2143 = -t2173 * t2239 + t2174 * t2241;
t2142 = t2173 * t2241 + t2174 * t2239;
t2141 = t2193 * t2275 + t2261;
t2139 = -t2195 * t2275 - t2264;
t2138 = (qJD(4) + t2237) * t2195 + t2264;
t2137 = -t2171 * t2239 + t2172 * t2241;
t2136 = t2171 * t2241 + t2172 * t2239;
t2134 = t2166 * t2247 - t2167 * t2243;
t2133 = t2166 * t2243 + t2167 * t2247;
t2129 = -t2294 - t2297;
t2128 = -t2162 * t2244 + t2163 * t2248;
t2127 = t2162 * t2248 + t2163 * t2244;
t2126 = -t2157 - t2284;
t2123 = t2154 - t2282;
t2122 = -t2265 + t2283;
t2121 = t2265 + t2283;
t2120 = -t2294 - t2298;
t2119 = -t2147 * t2244 + t2148 * t2248;
t2118 = t2147 * t2248 + t2148 * t2244;
t2117 = -t2297 - t2298;
t2116 = t2139 * t2247 - t2141 * t2243;
t2115 = t2139 * t2243 + t2141 * t2247;
t2114 = t2257 - t2285;
t2113 = -t2257 - t2285;
t2112 = -t2133 * t2244 + t2134 * t2248;
t2111 = t2133 * t2248 + t2134 * t2244;
t2110 = t2126 * t2240 - t2152 * t2238;
t2109 = t2126 * t2238 + t2152 * t2240;
t2106 = -t2125 * t2238 + t2146 * t2240;
t2105 = t2125 * t2240 + t2146 * t2238;
t2104 = -t2127 * t2239 + t2128 * t2241;
t2103 = t2127 * t2241 + t2128 * t2239;
t2102 = t2122 * t2240 - t2124 * t2238;
t2101 = t2122 * t2238 + t2124 * t2240;
t2094 = t2159 * t2274 + t2256;
t2093 = -t2159 * t2303 - t2256;
t2092 = -t2161 * t2274 + t2267;
t2091 = t2161 * t2303 - t2267;
t2090 = t2114 * t2246 - t2129 * t2242;
t2089 = t2114 * t2242 + t2129 * t2246;
t2088 = -t2118 * t2239 + t2119 * t2241;
t2087 = t2118 * t2241 + t2119 * t2239;
t2086 = t2110 * t2247 + t2123 * t2243;
t2085 = t2110 * t2243 - t2123 * t2247;
t2084 = t2106 * t2247 + t2121 * t2243;
t2083 = t2106 * t2243 - t2121 * t2247;
t2082 = -t2113 * t2242 + t2120 * t2246;
t2081 = t2113 * t2246 + t2120 * t2242;
t2080 = t2102 * t2247 + t2144 * t2243;
t2079 = t2102 * t2243 - t2144 * t2247;
t2078 = -t2115 * t2244 + t2116 * t2248;
t2077 = t2115 * t2248 + t2116 * t2244;
t2076 = -t2111 * t2239 + t2112 * t2241;
t2075 = t2111 * t2241 + t2112 * t2239;
t2074 = -t2107 * t2243 + t2108 * t2247;
t2073 = t2107 * t2247 + t2108 * t2243;
t2072 = pkin(5) * t2265 - pkin(9) * t2296 + t2186 * t2164 + t2096;
t2069 = t2092 * t2246 - t2094 * t2242;
t2068 = t2092 * t2242 + t2094 * t2246;
t2067 = -t2089 * t2238 + t2090 * t2240;
t2066 = t2089 * t2240 + t2090 * t2238;
t2065 = -t2085 * t2244 + t2086 * t2248;
t2064 = t2085 * t2248 + t2086 * t2244;
t2063 = -t2083 * t2244 + t2084 * t2248;
t2062 = t2083 * t2248 + t2084 * t2244;
t2061 = -t2081 * t2238 + t2082 * t2240;
t2060 = t2081 * t2240 + t2082 * t2238;
t2059 = -t2079 * t2244 + t2080 * t2248;
t2058 = t2079 * t2248 + t2080 * t2244;
t2057 = -pkin(5) * t2296 - pkin(9) * t2265 - t2193 * t2164 + t2071;
t2056 = -t2077 * t2239 + t2078 * t2241;
t2055 = t2077 * t2241 + t2078 * t2239;
t2054 = pkin(5) * t2125 + pkin(9) * t2124 + t2070;
t2053 = -t2073 * t2244 + t2074 * t2248;
t2052 = t2073 * t2248 + t2074 * t2244;
t2051 = t2067 * t2247 + t2093 * t2243;
t2050 = t2067 * t2243 - t2093 * t2247;
t2049 = t2061 * t2247 + t2091 * t2243;
t2048 = t2061 * t2243 - t2091 * t2247;
t2047 = -t2070 * t2238 + t2071 * t2240;
t2046 = t2070 * t2240 + t2071 * t2238;
t2045 = -t2068 * t2238 + t2069 * t2240;
t2044 = t2068 * t2240 + t2069 * t2238;
t2043 = -t2064 * t2239 + t2065 * t2241;
t2042 = t2064 * t2241 + t2065 * t2239;
t2041 = -t2062 * t2239 + t2063 * t2241;
t2040 = t2062 * t2241 + t2063 * t2239;
t2039 = -t2058 * t2239 + t2059 * t2241;
t2038 = t2058 * t2241 + t2059 * t2239;
t2037 = t2045 * t2247 + t2117 * t2243;
t2036 = t2045 * t2243 - t2117 * t2247;
t2035 = t2047 * t2247 + t2096 * t2243;
t2034 = t2047 * t2243 - t2096 * t2247;
t2033 = t2054 * t2242 + t2057 * t2246;
t2032 = t2054 * t2246 - t2057 * t2242;
t2031 = -t2052 * t2239 + t2053 * t2241;
t2030 = t2052 * t2241 + t2053 * t2239;
t2029 = -t2050 * t2244 + t2051 * t2248;
t2028 = t2050 * t2248 + t2051 * t2244;
t2027 = -t2048 * t2244 + t2049 * t2248;
t2026 = t2048 * t2248 + t2049 * t2244;
t2025 = -t2036 * t2244 + t2037 * t2248;
t2024 = t2036 * t2248 + t2037 * t2244;
t2023 = -t2034 * t2244 + t2035 * t2248;
t2022 = t2034 * t2248 + t2035 * t2244;
t2021 = -t2032 * t2242 + t2033 * t2246;
t2020 = t2032 * t2246 + t2033 * t2242;
t2019 = -t2028 * t2239 + t2029 * t2241;
t2018 = t2028 * t2241 + t2029 * t2239;
t2017 = -t2026 * t2239 + t2027 * t2241;
t2016 = t2026 * t2241 + t2027 * t2239;
t2015 = -t2024 * t2239 + t2025 * t2241;
t2014 = t2024 * t2241 + t2025 * t2239;
t2013 = -t2022 * t2239 + t2023 * t2241;
t2012 = t2022 * t2241 + t2023 * t2239;
t2011 = -t2020 * t2238 + t2021 * t2240;
t2010 = t2020 * t2240 + t2021 * t2238;
t2009 = t2011 * t2247 + t2072 * t2243;
t2008 = t2011 * t2243 - t2072 * t2247;
t2007 = -t2008 * t2244 + t2009 * t2248;
t2006 = t2008 * t2248 + t2009 * t2244;
t2005 = -t2006 * t2239 + t2007 * t2241;
t2004 = t2006 * t2241 + t2007 * t2239;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2223, -t2222, 0, -t2224 * t2245 + t2225 * t2249, 0, 0, 0, 0, 0, 0, -t2219 * t2249 - t2233 * t2245, t2218 * t2249 + t2245 * t2272, t2220 * t2249 - t2221 * t2245, t2176 * t2249 - t2212 * t2245, 0, 0, 0, 0, 0, 0, t2137 * t2249 + t2202 * t2245, t2151 * t2249 + t2204 * t2245, t2143 * t2249 + t2187 * t2245, t2104 * t2249 - t2199 * t2245, 0, 0, 0, 0, 0, 0, t2076 * t2249 + t2138 * t2245, t2088 * t2249 - t2245 * t2266, t2056 * t2249 + t2156 * t2245, t2031 * t2249 - t2155 * t2245, 0, 0, 0, 0, 0, 0, t2041 * t2249 + t2105 * t2245, t2043 * t2249 + t2109 * t2245, t2039 * t2249 + t2101 * t2245, t2013 * t2249 + t2046 * t2245, 0, 0, 0, 0, 0, 0, t2017 * t2249 + t2060 * t2245, t2019 * t2249 + t2066 * t2245, t2015 * t2249 + t2044 * t2245, t2005 * t2249 + t2010 * t2245; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2222, t2223, 0, t2224 * t2249 + t2225 * t2245, 0, 0, 0, 0, 0, 0, -t2219 * t2245 + t2233 * t2249, t2218 * t2245 - t2249 * t2272, t2220 * t2245 + t2221 * t2249, t2176 * t2245 + t2212 * t2249, 0, 0, 0, 0, 0, 0, t2137 * t2245 - t2202 * t2249, t2151 * t2245 - t2204 * t2249, t2143 * t2245 - t2187 * t2249, t2104 * t2245 + t2199 * t2249, 0, 0, 0, 0, 0, 0, t2076 * t2245 - t2138 * t2249, t2088 * t2245 + t2249 * t2266, t2056 * t2245 - t2156 * t2249, t2031 * t2245 + t2155 * t2249, 0, 0, 0, 0, 0, 0, t2041 * t2245 - t2105 * t2249, t2043 * t2245 - t2109 * t2249, t2039 * t2245 - t2101 * t2249, t2013 * t2245 - t2046 * t2249, 0, 0, 0, 0, 0, 0, t2017 * t2245 - t2060 * t2249, t2019 * t2245 - t2066 * t2249, t2015 * t2245 - t2044 * t2249, t2005 * t2245 - t2010 * t2249; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2175, 0, 0, 0, 0, 0, 0, t2136, t2150, t2142, t2103, 0, 0, 0, 0, 0, 0, t2075, t2087, t2055, t2030, 0, 0, 0, 0, 0, 0, t2040, t2042, t2038, t2012, 0, 0, 0, 0, 0, 0, t2016, t2018, t2014, t2004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2251, -qJDD(1), 0, t2225, 0, 0, 0, 0, 0, 0, -t2219, t2218, t2220, t2176, 0, 0, 0, 0, 0, 0, t2137, t2151, t2143, t2104, 0, 0, 0, 0, 0, 0, t2076, t2088, t2056, t2031, 0, 0, 0, 0, 0, 0, t2041, t2043, t2039, t2013, 0, 0, 0, 0, 0, 0, t2017, t2019, t2015, t2005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2251, 0, t2224, 0, 0, 0, 0, 0, 0, t2233, -t2272, t2221, t2212, 0, 0, 0, 0, 0, 0, -t2202, -t2204, -t2187, t2199, 0, 0, 0, 0, 0, 0, -t2138, t2266, -t2156, t2155, 0, 0, 0, 0, 0, 0, -t2105, -t2109, -t2101, -t2046, 0, 0, 0, 0, 0, 0, -t2060, -t2066, -t2044, -t2010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2175, 0, 0, 0, 0, 0, 0, t2136, t2150, t2142, t2103, 0, 0, 0, 0, 0, 0, t2075, t2087, t2055, t2030, 0, 0, 0, 0, 0, 0, t2040, t2042, t2038, t2012, 0, 0, 0, 0, 0, 0, t2016, t2018, t2014, t2004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2277, t2226, t2233, t2207, 0, 0, 0, 0, 0, 0, t2172, t2178, t2174, t2128, 0, 0, 0, 0, 0, 0, t2112, t2119, t2078, t2053, 0, 0, 0, 0, 0, 0, t2063, t2065, t2059, t2023, 0, 0, 0, 0, 0, 0, t2027, t2029, t2025, t2007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2226, -t2235 * t2251, -t2272, t2206, 0, 0, 0, 0, 0, 0, t2171, t2177, t2173, t2127, 0, 0, 0, 0, 0, 0, t2111, t2118, t2077, t2052, 0, 0, 0, 0, 0, 0, t2062, t2064, t2058, t2022, 0, 0, 0, 0, 0, 0, t2026, t2028, t2024, t2006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2233, t2272, -t2221, -t2212, 0, 0, 0, 0, 0, 0, t2202, t2204, t2187, -t2199, 0, 0, 0, 0, 0, 0, t2138, -t2266, t2156, -t2155, 0, 0, 0, 0, 0, 0, t2105, t2109, t2101, t2046, 0, 0, 0, 0, 0, 0, t2060, t2066, t2044, t2010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2198, t2201, t2182, t2163, 0, 0, 0, 0, 0, 0, t2134, t2148, t2116, t2074, 0, 0, 0, 0, 0, 0, t2084, t2086, t2080, t2035, 0, 0, 0, 0, 0, 0, t2049, t2051, t2037, t2009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2200, t2208, -t2302, t2162, 0, 0, 0, 0, 0, 0, t2133, t2147, t2115, t2073, 0, 0, 0, 0, 0, 0, t2083, t2085, t2079, t2034, 0, 0, 0, 0, 0, 0, t2048, t2050, t2036, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2202, t2204, t2187, -t2199, 0, 0, 0, 0, 0, 0, t2138, -t2266, t2156, -t2155, 0, 0, 0, 0, 0, 0, t2105, t2109, t2101, t2046, 0, 0, 0, 0, 0, 0, t2060, t2066, t2044, t2010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2166, t2168, t2139, t2108, 0, 0, 0, 0, 0, 0, t2106, t2110, t2102, t2047, 0, 0, 0, 0, 0, 0, t2061, t2067, t2045, t2011; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2167, t2189, t2141, t2107, 0, 0, 0, 0, 0, 0, -t2121, -t2123, -t2144, -t2096, 0, 0, 0, 0, 0, 0, -t2091, -t2093, -t2117, -t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2138, -t2266, t2156, -t2155, 0, 0, 0, 0, 0, 0, t2105, t2109, t2101, t2046, 0, 0, 0, 0, 0, 0, t2060, t2066, t2044, t2010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2146, t2126, t2122, t2071, 0, 0, 0, 0, 0, 0, t2082, t2090, t2069, t2021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2125, t2152, t2124, t2070, 0, 0, 0, 0, 0, 0, t2081, t2089, t2068, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2121, t2123, t2144, t2096, 0, 0, 0, 0, 0, 0, t2091, t2093, t2117, t2072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2120, t2114, t2092, t2033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2113, t2129, t2094, t2032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2091, t2093, t2117, t2072;];
f_new_reg  = t1;
