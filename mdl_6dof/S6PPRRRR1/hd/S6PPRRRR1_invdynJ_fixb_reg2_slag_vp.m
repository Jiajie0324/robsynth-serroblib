% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PPRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PPRRRR1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PPRRRR1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PPRRRR1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PPRRRR1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRRRR1_invdynJ_fixb_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:01:37
% EndTime: 2019-03-08 19:01:49
% DurationCPUTime: 7.11s
% Computational Cost: add. (11174->595), mult. (27818->830), div. (0->0), fcn. (25221->18), ass. (0->288)
t349 = cos(pkin(6));
t194 = qJD(1) * t349 + qJD(2);
t210 = sin(pkin(13));
t212 = sin(pkin(6));
t217 = sin(qJ(3));
t213 = cos(pkin(13));
t348 = cos(pkin(7));
t284 = t213 * t348;
t270 = t217 * t284;
t368 = cos(qJ(3));
t233 = (t210 * t368 + t270) * t212;
t211 = sin(pkin(7));
t323 = t211 * t217;
t121 = qJD(1) * t233 + t194 * t323;
t216 = sin(qJ(4));
t314 = qJD(4) * t216;
t268 = pkin(4) * t314 - t121;
t372 = pkin(10) + pkin(9);
t298 = qJD(4) * t372;
t180 = t216 * t298;
t325 = t210 * t212;
t295 = qJD(1) * t325;
t183 = t217 * t295;
t255 = t368 * t284;
t245 = t212 * t255;
t238 = qJD(1) * t245;
t297 = t211 * t368;
t226 = -t194 * t297 + t183 - t238;
t215 = sin(qJ(5));
t219 = cos(qJ(4));
t367 = cos(qJ(5));
t296 = t367 * t219;
t250 = -t215 * t216 + t296;
t185 = t372 * t216;
t186 = t372 * t219;
t251 = -t185 * t367 - t215 * t186;
t322 = t215 * t219;
t360 = qJD(5) * t251 - t180 * t367 + t250 * t226 - t298 * t322;
t276 = qJD(4) * t296;
t305 = qJD(4) + qJD(5);
t280 = t215 * t305;
t292 = qJD(5) * t367;
t136 = t216 * t280 - t219 * t292 - t276;
t174 = t216 * t367 + t322;
t137 = t305 * t174;
t382 = pkin(5) * t137 + pkin(11) * t136 + t268;
t347 = cos(pkin(12));
t264 = t349 * t347;
t346 = sin(pkin(12));
t156 = t210 * t264 + t213 * t346;
t231 = t210 * t346 - t213 * t264;
t286 = t212 * t347;
t378 = t211 * t286 + t231 * t348;
t102 = t156 * t368 - t217 * t378;
t134 = t211 * t231 - t286 * t348;
t209 = qJ(4) + qJ(5);
t204 = sin(t209);
t205 = cos(t209);
t60 = -t102 * t204 + t134 * t205;
t263 = t349 * t346;
t157 = -t210 * t263 + t213 * t347;
t232 = t210 * t347 + t213 * t263;
t285 = t212 * t346;
t377 = -t211 * t285 + t232 * t348;
t104 = t157 * t368 - t217 * t377;
t135 = t211 * t232 + t285 * t348;
t62 = -t104 * t204 + t135 * t205;
t287 = t211 * t349;
t133 = t217 * t287 + t233;
t300 = t212 * t213 * t211;
t155 = t348 * t349 - t300;
t94 = -t133 * t204 + t155 * t205;
t381 = g(1) * t62 + g(2) * t60 + g(3) * t94;
t214 = sin(qJ(6));
t218 = cos(qJ(6));
t309 = qJD(6) * t218;
t116 = qJD(3) * pkin(9) + t121;
t283 = pkin(10) * qJD(3) + t116;
t152 = -qJD(1) * t300 + t194 * t348;
t321 = t216 * t152;
t82 = t219 * t283 + t321;
t353 = t215 * t82;
t146 = t219 * t152;
t81 = -t216 * t283 + t146;
t80 = qJD(4) * pkin(4) + t81;
t41 = t367 * t80 - t353;
t39 = -pkin(5) * t305 - t41;
t304 = qJDD(4) + qJDD(5);
t188 = t349 * qJDD(1) + qJDD(2);
t151 = -qJDD(1) * t300 + t188 * t348;
t142 = t219 * t151;
t344 = qJDD(3) * pkin(9);
t257 = t212 * t270;
t293 = qJD(3) * t368;
t277 = t211 * t293;
t290 = qJDD(1) * t325;
t259 = -qJD(3) * t238 - qJDD(1) * t257 - t188 * t323 - t194 * t277 - t368 * t290;
t275 = qJD(3) * t295;
t76 = -t217 * t275 - t259;
t73 = t76 + t344;
t28 = qJDD(4) * pkin(4) + t142 + (-pkin(10) * qJDD(3) - t73) * t216 - t82 * qJD(4);
t308 = qJD(3) * qJD(4);
t291 = t216 * t308;
t306 = t219 * qJDD(3);
t313 = qJD(4) * t219;
t302 = t216 * t151 + t152 * t313 + t219 * t73;
t31 = -t116 * t314 + t302;
t30 = (-t291 + t306) * pkin(10) + t31;
t288 = t215 * t30 - t367 * t28;
t301 = t367 * t82;
t42 = t215 * t80 + t301;
t8 = -qJD(5) * t42 - t288;
t6 = -pkin(5) * t304 - t8;
t380 = t6 * t214 + t39 * t309;
t148 = -t215 * t185 + t186 * t367;
t350 = t148 * qJD(5) + t174 * t226 - t215 * t180 + t276 * t372;
t101 = t156 * t217 + t368 * t378;
t103 = t157 * t217 + t368 * t377;
t256 = t368 * t287;
t324 = t210 * t217;
t132 = t212 * t324 - t245 - t256;
t242 = g(1) * t103 + g(2) * t101 + g(3) * t132;
t379 = t242 * t204;
t127 = t132 * t218;
t333 = t155 * t219;
t105 = -t133 * t216 + t333;
t106 = t133 * t219 + t155 * t216;
t52 = t215 * t105 + t106 * t367;
t45 = -t214 * t52 + t127;
t40 = pkin(11) * t305 + t42;
t366 = pkin(4) * t219;
t202 = pkin(3) + t366;
t114 = -qJD(3) * t202 + t226;
t316 = qJD(3) * t216;
t161 = -qJD(3) * t296 + t215 * t316;
t163 = t174 * qJD(3);
t78 = t161 * pkin(5) - t163 * pkin(11) + t114;
t17 = t214 * t78 + t218 * t40;
t260 = t214 * t40 - t218 * t78;
t376 = t17 * t218 + t214 * t260;
t375 = t174 * qJDD(3);
t373 = qJD(3) * t305;
t111 = -t250 * t373 - t375;
t307 = t216 * qJDD(3);
t262 = -qJDD(3) * t296 + t215 * t307;
t112 = qJD(3) * t137 + t262;
t315 = qJD(3) * t217;
t294 = t211 * t315;
t254 = qJD(3) * qJD(1) * t257 - qJDD(1) * t245 - t188 * t297 + t194 * t294 + t217 * t290 + t368 * t275;
t66 = pkin(4) * t291 - qJDD(3) * t202 + t254;
t29 = pkin(5) * t112 + pkin(11) * t111 + t66;
t312 = qJD(5) * t215;
t7 = t215 * t28 + t80 * t292 + t367 * t30 - t82 * t312;
t5 = pkin(11) * t304 + t7;
t2 = -t260 * qJD(6) + t214 * t29 + t218 * t5;
t1 = t2 * t218;
t331 = t161 * t218;
t356 = t17 * t214;
t374 = -t161 * t356 + t260 * t331 + t1;
t145 = t218 * t163 + t214 * t305;
t68 = qJD(6) * t145 - t214 * t111 - t218 * t304;
t130 = -pkin(5) * t250 - pkin(11) * t174 - t202;
t88 = t130 * t218 - t148 * t214;
t365 = qJD(6) * t88 + t382 * t214 + t218 * t360;
t89 = t130 * t214 + t148 * t218;
t364 = -qJD(6) * t89 - t214 * t360 + t382 * t218;
t43 = t215 * t81 + t301;
t363 = t42 - t43;
t362 = -t101 * t202 + t102 * t372;
t361 = -t103 * t202 + t104 * t372;
t359 = qJD(3) * pkin(3);
t357 = t161 * t39;
t279 = t218 * t305;
t310 = qJD(6) * t214;
t67 = -qJD(6) * t279 + t218 * t111 + t163 * t310 - t214 * t304;
t352 = t67 * t214;
t351 = t68 * t218;
t345 = qJDD(3) * pkin(3);
t108 = qJDD(6) + t112;
t343 = t108 * t218;
t342 = t116 * t216;
t341 = t132 * t214;
t340 = t136 * t214;
t339 = t136 * t218;
t143 = t163 * t214 - t279;
t158 = qJD(6) + t161;
t338 = t143 * t158;
t337 = t143 * t214;
t336 = t145 * t143;
t335 = t145 * t158;
t334 = t145 * t218;
t332 = t158 * t163;
t330 = t163 * t161;
t329 = t174 * t214;
t328 = t174 * t218;
t327 = t205 * t214;
t326 = t205 * t218;
t320 = -t132 * t202 + t133 * t372;
t207 = t216 ^ 2;
t208 = t219 ^ 2;
t319 = t207 - t208;
t115 = t226 - t359;
t317 = qJD(3) * t115;
t311 = qJD(6) * t158;
t222 = qJD(3) ^ 2;
t299 = t216 * t222 * t219;
t35 = t39 * t310;
t289 = t163 * t260 + t35;
t281 = t158 * t218;
t278 = pkin(4) * t292;
t274 = t219 * t291;
t273 = pkin(4) * t312 - t43;
t272 = qJD(4) * t293;
t128 = pkin(5) * t163 + pkin(11) * t161;
t267 = -pkin(5) * t205 - pkin(11) * t204;
t266 = g(1) * t104 + g(2) * t102;
t261 = -t218 * t260 + t356;
t200 = pkin(4) * t215 + pkin(11);
t258 = -t108 * t200 + t357;
t46 = t218 * t52 + t341;
t84 = t116 * t219 + t321;
t253 = t105 * t367 - t215 * t106;
t159 = -t216 * t323 + t219 * t348;
t160 = t216 * t348 + t219 * t323;
t252 = t159 * t367 - t215 * t160;
t119 = t215 * t159 + t160 * t367;
t249 = t174 * t309 - t340;
t248 = -t174 * t310 - t339;
t61 = t102 * t205 + t134 * t204;
t63 = t104 * t205 + t135 * t204;
t95 = t133 * t205 + t155 * t204;
t246 = g(1) * t63 + g(2) * t61 + g(3) * t95;
t244 = qJDD(3) * t368 - t217 * t222;
t243 = t17 * t163 + t214 * t381 + t380;
t241 = g(3) * t133 + t266;
t240 = -t381 - t6;
t109 = -t214 * t119 - t218 * t297;
t239 = -t218 * t119 + t214 * t297;
t237 = -pkin(9) * qJDD(4) + (t115 - t226 - t359) * qJD(4);
t3 = -qJD(6) * t17 - t214 * t5 + t218 * t29;
t236 = -qJD(6) * t261 - t3 * t214;
t235 = -g(1) * t285 + g(2) * t286 - g(3) * t349;
t234 = qJD(3) * t121 + t242;
t230 = -t114 * t163 - t288 - t381;
t229 = t114 * t161 + t246 - t7;
t221 = qJD(4) ^ 2;
t74 = t254 - t345;
t225 = -pkin(9) * t221 + t234 + t345 - t74;
t224 = t236 - t246;
t32 = -t84 * qJD(4) - t216 * t73 + t142;
t83 = t146 - t342;
t223 = -t32 * t216 + t31 * t219 + (-t216 * t84 - t219 * t83) * qJD(4) - t241;
t201 = -pkin(4) * t367 - pkin(5);
t153 = pkin(4) * t333;
t139 = -qJD(4) * t160 - t216 * t277;
t138 = qJD(4) * t159 + t219 * t277;
t126 = t135 * t366;
t125 = t134 * t366;
t124 = t133 * qJD(3);
t123 = (t256 + (t255 - t324) * t212) * qJD(3);
t117 = pkin(4) * t316 + t128;
t113 = -t161 ^ 2 + t163 ^ 2;
t93 = t94 * pkin(5);
t86 = t163 * t305 - t174 * t373 - t262;
t85 = t375 + (qJD(3) * t250 + t161) * t305;
t65 = qJD(4) * t105 + t123 * t219;
t64 = -qJD(4) * t106 - t123 * t216;
t59 = t62 * pkin(5);
t58 = t60 * pkin(5);
t54 = qJD(5) * t119 + t215 * t138 - t139 * t367;
t53 = qJD(5) * t252 + t138 * t367 + t215 * t139;
t48 = t108 * t214 - t145 * t163 + t158 * t281;
t47 = -t158 ^ 2 * t214 + t143 * t163 + t343;
t44 = t367 * t81 - t353;
t38 = t158 * t337 - t351;
t37 = t145 * t281 - t352;
t34 = qJD(6) * t239 - t214 * t53 + t218 * t294;
t33 = qJD(6) * t109 + t214 * t294 + t218 * t53;
t23 = t128 * t214 + t218 * t41;
t22 = t128 * t218 - t214 * t41;
t19 = t117 * t214 + t218 * t44;
t18 = t117 * t218 - t214 * t44;
t13 = qJD(5) * t52 + t215 * t65 - t367 * t64;
t12 = qJD(5) * t253 + t215 * t64 + t367 * t65;
t11 = (-t67 - t338) * t218 + (-t68 - t335) * t214;
t10 = -qJD(6) * t46 - t214 * t12 + t124 * t218;
t9 = qJD(6) * t45 + t218 * t12 + t124 * t214;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1) - g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t188 * t349 - g(3) + (t210 ^ 2 + t213 ^ 2) * t212 ^ 2 * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(3) * t124 - qJDD(3) * t132, -qJD(3) * t123 - qJDD(3) * t133, 0, t121 * t123 + t124 * t226 + t132 * t254 + t133 * t76 + t151 * t155 - g(3), 0, 0, 0, 0, 0, 0, -t132 * t306 + qJD(4) * t64 + qJDD(4) * t105 + (-t124 * t219 + t132 * t314) * qJD(3), t132 * t307 - qJD(4) * t65 - qJDD(4) * t106 + (t124 * t216 + t132 * t313) * qJD(3) (-t105 * t216 + t106 * t219) * qJDD(3) + (-t216 * t64 + t219 * t65 + (-t105 * t219 - t106 * t216) * qJD(4)) * qJD(3), t105 * t32 + t106 * t31 + t115 * t124 + t132 * t74 + t64 * t83 + t65 * t84 - g(3), 0, 0, 0, 0, 0, 0, t132 * t112 + t124 * t161 - t13 * t305 + t253 * t304, -t132 * t111 - t12 * t305 + t124 * t163 - t304 * t52, t111 * t253 - t112 * t52 - t12 * t161 + t13 * t163, t114 * t124 + t12 * t42 - t13 * t41 + t132 * t66 + t253 * t8 + t52 * t7 - g(3), 0, 0, 0, 0, 0, 0, t10 * t158 + t108 * t45 + t13 * t143 - t253 * t68, -t108 * t46 + t13 * t145 - t158 * t9 + t253 * t67, -t10 * t145 - t143 * t9 + t45 * t67 - t46 * t68, -t10 * t260 + t13 * t39 + t17 * t9 + t2 * t46 - t253 * t6 + t3 * t45 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235 + t188, 0, 0, 0, 0, 0, 0, t244 * t211 (-qJDD(3) * t217 - t222 * t368) * t211, 0, t151 * t348 + (-t368 * t254 + t217 * t76 + (t121 * t368 + t217 * t226) * qJD(3)) * t211 + t235, 0, 0, 0, 0, 0, 0, t139 * qJD(4) + t159 * qJDD(4) + (-t216 * t272 + t219 * t244) * t211, -t138 * qJD(4) - t160 * qJDD(4) + (-t216 * t244 - t219 * t272) * t211 (-t159 * t216 + t160 * t219) * qJDD(3) + (t138 * t219 - t139 * t216 + (-t159 * t219 - t160 * t216) * qJD(4)) * qJD(3), t84 * t138 + t83 * t139 + t32 * t159 + t31 * t160 + (t115 * t315 - t368 * t74) * t211 + t235, 0, 0, 0, 0, 0, 0, -t54 * t305 + t252 * t304 + (-t112 * t368 + t161 * t315) * t211, -t53 * t305 - t119 * t304 + (t111 * t368 + t163 * t315) * t211, t111 * t252 - t112 * t119 - t161 * t53 + t163 * t54, t8 * t252 + t7 * t119 - t41 * t54 + t42 * t53 + (t114 * t315 - t368 * t66) * t211 + t235, 0, 0, 0, 0, 0, 0, t108 * t109 + t143 * t54 + t158 * t34 - t252 * t68, t108 * t239 + t145 * t54 - t158 * t33 + t252 * t67, t109 * t67 - t143 * t33 - t145 * t34 + t239 * t68, t3 * t109 + t17 * t33 - t2 * t239 - t252 * t6 - t260 * t34 + t39 * t54 + t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t234 - t254 (-t226 + t183) * qJD(3) + t241 + t259, 0, 0, qJDD(3) * t207 + 0.2e1 * t274, 0.2e1 * t216 * t306 - 0.2e1 * t308 * t319, qJDD(4) * t216 + t219 * t221, qJDD(3) * t208 - 0.2e1 * t274, qJDD(4) * t219 - t216 * t221, 0, t216 * t237 + t219 * t225, -t216 * t225 + t219 * t237, t223 + (qJD(3) * t226 + t344) * (t207 + t208) -t115 * t121 - (t216 * t83 - t219 * t84) * t226 + (t242 - t74) * pkin(3) + t223 * pkin(9), -t111 * t174 - t136 * t163, -t111 * t250 - t112 * t174 + t136 * t161 - t137 * t163, -t136 * t305 + t174 * t304, -t112 * t250 + t137 * t161, -t137 * t305 + t250 * t304, 0, -t202 * t112 + t114 * t137 + t161 * t268 + t205 * t242 - t250 * t66 + t251 * t304 - t305 * t350, t202 * t111 - t114 * t136 - t148 * t304 + t163 * t268 + t66 * t174 - t305 * t360 - t379, t111 * t251 - t112 * t148 + t136 * t41 - t137 * t42 - t161 * t360 + t163 * t350 - t174 * t8 + t250 * t7 - t241, -g(1) * t361 - g(2) * t362 - g(3) * t320 + t114 * t268 + t7 * t148 - t66 * t202 + t251 * t8 - t350 * t41 + t360 * t42, t145 * t248 - t328 * t67 (t143 * t218 + t145 * t214) * t136 + (t352 - t351 + (-t334 + t337) * qJD(6)) * t174, t108 * t328 + t137 * t145 + t158 * t248 + t250 * t67, t143 * t249 + t329 * t68, -t108 * t329 - t137 * t143 - t158 * t249 + t250 * t68, -t108 * t250 + t137 * t158, t88 * t108 - t3 * t250 - t260 * t137 - t251 * t68 - t39 * t340 - g(1) * (-t103 * t326 + t104 * t214) - g(2) * (-t101 * t326 + t102 * t214) - g(3) * (-t132 * t326 + t133 * t214) + t380 * t174 + t364 * t158 + t350 * t143, -t89 * t108 + t2 * t250 - t17 * t137 + t251 * t67 - t39 * t339 - g(1) * (t103 * t327 + t104 * t218) - g(2) * (t101 * t327 + t102 * t218) - g(3) * (t132 * t327 + t133 * t218) + (t6 * t218 - t35) * t174 - t365 * t158 + t350 * t145, t67 * t88 - t68 * t89 - t364 * t145 - t365 * t143 + t261 * t136 + t379 + (-qJD(6) * t376 - t2 * t214 - t218 * t3) * t174, t2 * t89 + t3 * t88 - t6 * t251 - g(1) * (t103 * t267 + t361) - g(2) * (t101 * t267 + t362) - g(3) * (t132 * t267 + t320) + t350 * t39 + t365 * t17 - t364 * t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t319 * t222, t307, t299, t306, qJDD(4), -g(3) * t105 + t142 + (-g(1) * t135 - g(2) * t134) * t219 + (t266 - t73 - t317) * t216, -t219 * t317 - g(1) * (-t104 * t219 - t135 * t216) - g(2) * (-t102 * t219 - t134 * t216) + g(3) * t106 + (t83 + t342) * qJD(4) - t302, 0, 0, t330, t113, t85, -t330, t86, t304, t43 * qJD(4) - t363 * qJD(5) + (-qJD(5) * t280 - t161 * t316 + t304 * t367) * pkin(4) + t230, t44 * t305 + (-t163 * t316 - t215 * t304 - t292 * t305) * pkin(4) + t229, t363 * t163 + (-t41 + t44) * t161 + (t367 * t111 - t112 * t215 + (-t161 * t367 + t163 * t215) * qJD(5)) * pkin(4), -g(1) * t126 - g(2) * t125 - g(3) * t153 + t41 * t43 - t42 * t44 + (t8 * t367 + t7 * t215 + (-t215 * t41 + t367 * t42) * qJD(5) + (-qJD(3) * t114 + t241) * t216) * pkin(4), t37, t11, t48, t38, t47, -t332, -t18 * t158 + t201 * t68 + t273 * t143 + (-t158 * t278 + t258) * t214 + (-t200 * t311 + t240) * t218 + t289, -t201 * t67 + t258 * t218 + t273 * t145 + (t200 * t310 - t218 * t278 + t19) * t158 + t243, t19 * t143 + t18 * t145 + (-t143 * t278 - t200 * t68 + (t145 * t200 + t260) * qJD(6)) * t218 + (t145 * t278 - t200 * t67 - t3 + (t143 * t200 - t17) * qJD(6)) * t214 - t246 + t374, t6 * t201 - t17 * t19 + t260 * t18 - t39 * t43 - g(1) * (pkin(11) * t63 + t126 + t59) - g(2) * (pkin(11) * t61 + t125 + t58) - g(3) * (pkin(11) * t95 + t153 + t93) + (t241 * t216 + (t215 * t39 + t367 * t376) * qJD(5)) * pkin(4) + (t236 + t1) * t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, t113, t85, -t330, t86, t304, t42 * qJD(4) + t230, t305 * t41 + t229, 0, 0, t37, t11, t48, t38, t47, -t332, -pkin(5) * t68 - t143 * t42 - t158 * t22 + (-pkin(11) * t108 + t357) * t214 + (-pkin(11) * t311 + t240) * t218 + t289, t39 * t331 + pkin(5) * t67 - t145 * t42 + t158 * t23 + (t158 * t310 - t343) * pkin(11) + t243, t143 * t23 + t145 * t22 + (-t352 - t351 + (t334 + t337) * qJD(6)) * pkin(11) + t224 + t374, -t6 * pkin(5) - g(1) * t59 - g(2) * t58 - g(3) * t93 + t260 * t22 - t17 * t23 - t39 * t42 + (t224 + t1) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t336, -t143 ^ 2 + t145 ^ 2, -t67 + t338, -t336, t335 - t68, t108, t17 * t158 - t39 * t145 - g(1) * (t103 * t218 - t214 * t63) - g(2) * (t101 * t218 - t214 * t61) - g(3) * (-t214 * t95 + t127) + t3, -t260 * t158 + t39 * t143 - g(1) * (-t103 * t214 - t218 * t63) - g(2) * (-t101 * t214 - t218 * t61) - g(3) * (-t218 * t95 - t341) - t2, 0, 0;];
tau_reg  = t4;
