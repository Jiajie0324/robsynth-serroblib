% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 06:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRRPRR8_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:20:14
% EndTime: 2019-05-05 06:20:30
% DurationCPUTime: 6.43s
% Computational Cost: add. (24939->451), mult. (54238->664), div. (0->0), fcn. (41217->14), ass. (0->298)
t245 = sin(pkin(7));
t252 = sin(qJ(3));
t311 = qJD(2) * t252;
t297 = t245 * t311;
t231 = qJD(3) * t297;
t248 = cos(pkin(7));
t240 = qJD(2) * t248 + qJD(3);
t298 = t240 * t311;
t256 = cos(qJ(3));
t307 = qJDD(2) * t256;
t183 = -t231 + (-t298 + t307) * t245;
t241 = t245 ^ 2;
t258 = qJD(2) ^ 2;
t327 = t241 * t258;
t301 = t256 * t327;
t222 = t252 * t301;
t239 = qJDD(2) * t248 + qJDD(3);
t204 = t222 + t239;
t236 = t240 ^ 2;
t238 = t256 ^ 2 * t327;
t210 = -t238 - t236;
t273 = t204 * t256 + t210 * t252;
t138 = t245 * t183 + t248 * t273;
t332 = t204 * t252;
t170 = -t210 * t256 + t332;
t246 = sin(pkin(6));
t249 = cos(pkin(6));
t253 = sin(qJ(2));
t257 = cos(qJ(2));
t377 = t246 * (t138 * t257 - t170 * t253) + t249 * (-t248 * t183 + t245 * t273);
t237 = t252 ^ 2 * t327;
t189 = -t237 - t236;
t205 = -t222 + t239;
t275 = t189 * t256 - t205 * t252;
t310 = qJD(2) * t256;
t206 = (qJD(3) * t310 + qJDD(2) * t252) * t245;
t296 = t245 * t310;
t216 = t240 * t296;
t354 = t206 + t216;
t130 = -t245 * t354 + t248 * t275;
t331 = t205 * t256;
t161 = t189 * t252 + t331;
t376 = t246 * (t130 * t257 - t161 * t253) + t249 * (t245 * t275 + t248 * t354);
t375 = pkin(2) * t130;
t374 = pkin(2) * t138;
t371 = pkin(9) * t161;
t370 = pkin(9) * t170;
t369 = qJ(4) * t354;
t250 = sin(qJ(6));
t251 = sin(qJ(5));
t255 = cos(qJ(5));
t196 = t240 * t255 - t251 * t296;
t225 = qJD(5) + t297;
t254 = cos(qJ(6));
t175 = t196 * t250 - t254 * t225;
t177 = t196 * t254 + t225 * t250;
t141 = t177 * t175;
t207 = t245 * t307 - t231;
t291 = t255 * t207 + t251 * t239;
t155 = -qJD(5) * t196 - t291;
t154 = qJDD(6) - t155;
t356 = -t141 + t154;
t364 = t250 * t356;
t194 = t240 * t251 + t255 * t296;
t167 = t196 * t194;
t200 = qJDD(5) + t206;
t355 = -t167 + t200;
t363 = t251 * t355;
t362 = t254 * t356;
t361 = t255 * t355;
t244 = sin(pkin(12));
t247 = cos(pkin(12));
t227 = -g(1) * t247 - g(2) * t244;
t243 = -g(3) + qJDD(1);
t226 = g(1) * t244 - g(2) * t247;
t328 = t226 * t249;
t359 = t243 * t246 + t328;
t171 = -t227 * t253 + t257 * t359;
t345 = pkin(9) * t245;
t163 = qJDD(2) * pkin(2) + t258 * t345 + t171;
t271 = -t226 * t246 + t243 * t249;
t360 = t248 * t163 + t245 * t271;
t313 = t360 * t256;
t270 = -t239 * pkin(3) - t236 * qJ(4) + qJDD(4) - t313;
t262 = -t239 * pkin(10) + t270;
t353 = -t216 + t206;
t358 = pkin(4) * t353 + t262;
t165 = pkin(5) * t194 - pkin(11) * t196;
t348 = t225 ^ 2;
t172 = t257 * t227 + t253 * t359;
t164 = -t258 * pkin(2) + qJDD(2) * t345 + t172;
t316 = t252 * qJ(4);
t346 = pkin(3) * t256;
t287 = -t316 - t346;
t312 = qJD(2) * t245;
t202 = t287 * t312;
t289 = t202 * t312 + t164;
t260 = (-pkin(10) * t301 + t289) * t252;
t203 = pkin(4) * t297 - pkin(10) * t240;
t295 = qJD(4) * t311;
t228 = -0.2e1 * t245 * t295;
t186 = t248 * t271;
t214 = t240 * pkin(3) * t297;
t290 = -t206 * qJ(4) + t186 + t214;
t304 = qJ(4) * t240 * t256;
t347 = -pkin(3) - pkin(10);
t81 = -pkin(4) * t238 + t228 + t347 * t207 + (-t163 + (-t203 * t252 - t304) * qJD(2)) * t245 + t290;
t259 = t251 * t260 + t255 * t81;
t45 = t251 * t358 + t259;
t39 = -pkin(5) * t348 + t200 * pkin(11) - t194 * t165 + t45;
t156 = -t194 * qJD(5) - t251 * t207 + t255 * t239;
t333 = t194 * t225;
t268 = t156 - t333;
t110 = t256 * t164 + t252 * t360;
t92 = -t236 * pkin(3) + t239 * qJ(4) + 0.2e1 * qJD(4) * t240 + t202 * t296 + t110;
t73 = t207 * pkin(4) - pkin(10) * t238 + t240 * t203 + t92;
t50 = -t268 * pkin(11) + (t196 * t225 - t155) * pkin(5) + t73;
t24 = t250 * t39 - t254 * t50;
t25 = t250 * t50 + t254 * t39;
t14 = t250 * t24 + t254 * t25;
t357 = t241 * (qJD(2) * t240 - t248 * t258);
t190 = qJD(6) + t194;
t292 = t250 * t156 - t254 * t200;
t95 = (qJD(6) - t190) * t177 + t292;
t182 = -t231 + (t298 + t307) * t245;
t352 = t245 * ((t238 - t236) * t252 + t331) + t248 * t182;
t350 = t245 * ((-t237 + t236) * t256 + t332) + t248 * t353;
t173 = t175 ^ 2;
t174 = t177 ^ 2;
t188 = t190 ^ 2;
t192 = t194 ^ 2;
t193 = t196 ^ 2;
t344 = t207 * pkin(3);
t44 = t251 * t81 - t255 * (t260 + t358);
t38 = -t200 * pkin(5) - pkin(11) * t348 + t165 * t196 + t44;
t343 = -pkin(5) * t38 + pkin(11) * t14;
t13 = -t24 * t254 + t25 * t250;
t342 = t13 * t256;
t35 = t250 * t38;
t341 = t251 * t73;
t36 = t254 * t38;
t340 = t255 * t73;
t107 = t141 + t154;
t339 = t107 * t250;
t338 = t107 * t254;
t151 = t167 + t200;
t337 = t151 * t251;
t336 = t151 * t255;
t335 = t190 * t250;
t334 = t190 * t254;
t330 = t225 * t251;
t329 = t225 * t255;
t323 = t245 * t252;
t322 = t245 * t256;
t315 = t252 * t183;
t212 = -t237 - t238;
t276 = t182 * t252 - t256 * t353;
t126 = -t245 * t212 + t248 * t276;
t144 = t182 * t256 + t252 * t353;
t314 = pkin(2) * t126 + t144 * t345;
t308 = qJD(6) + t190;
t277 = -t254 * t156 - t250 * t200;
t100 = t175 * t308 + t277;
t137 = -t174 - t188;
t78 = -t137 * t250 - t338;
t306 = pkin(5) * t100 + pkin(11) * t78 + t35;
t123 = -t188 - t173;
t72 = t123 * t254 - t364;
t97 = -t177 * t308 - t292;
t305 = pkin(5) * t97 + pkin(11) * t72 - t36;
t303 = t251 * t141;
t302 = t255 * t141;
t300 = t252 * t167;
t299 = pkin(5) * t255 + pkin(4);
t294 = pkin(5) * t251 + qJ(4);
t118 = t173 + t174;
t116 = -qJD(6) * t175 - t277;
t153 = t190 * t175;
t99 = t116 + t153;
t58 = t250 * t99 - t254 * t95;
t293 = pkin(5) * t118 + pkin(11) * t58 + t14;
t142 = t245 * t163 - t186;
t7 = t14 * t251 - t255 * t38;
t288 = t13 * t252 - t256 * t7;
t26 = t251 * t45 - t255 * t44;
t27 = t251 * t44 + t255 * t45;
t286 = t252 * t73 - t256 * t26;
t41 = t118 * t255 + t251 * t58;
t56 = -t250 * t95 - t254 * t99;
t285 = t252 * t56 - t256 * t41;
t47 = t251 * t72 + t255 * t97;
t71 = t123 * t250 + t362;
t284 = t252 * t71 - t256 * t47;
t51 = t100 * t255 + t251 * t78;
t77 = t137 * t254 - t339;
t283 = t252 * t77 - t256 * t51;
t104 = t252 * t289 + t270;
t282 = -t104 * t256 + t252 * t92;
t135 = -t156 - t333;
t261 = (-qJD(5) + t225) * t196 - t291;
t101 = t135 * t255 + t251 * t261;
t147 = -t192 - t193;
t281 = -t101 * t256 + t147 * t252;
t109 = t252 * t164 - t313;
t280 = -t109 * t256 + t110 * t252;
t68 = t109 * t252 + t110 * t256;
t159 = -t348 - t192;
t113 = t159 * t251 + t361;
t131 = (qJD(5) + t225) * t196 + t291;
t279 = -t113 * t256 + t131 * t252;
t168 = -t193 - t348;
t119 = t168 * t255 - t337;
t278 = -t119 * t256 + t252 * t268;
t267 = -qJD(2) * t304 - t163;
t263 = -t290 + t344;
t219 = t248 * t239;
t211 = t237 - t238;
t179 = -t193 + t348;
t178 = t192 - t348;
t166 = t193 - t192;
t158 = (t206 * t245 + t256 * t357) * t252;
t157 = (t207 * t245 - t252 * t357) * t256;
t149 = -t174 + t188;
t148 = t173 - t188;
t146 = -pkin(3) * t353 + qJ(4) * t182;
t145 = (-t194 * t255 + t196 * t251) * t225;
t140 = t174 - t173;
t128 = t156 * t255 - t196 * t330;
t127 = -t155 * t251 + t194 * t329;
t125 = t248 * t211 + (t256 * t354 + t315) * t245;
t122 = t178 * t255 - t337;
t121 = -t179 * t251 + t361;
t120 = -t168 * t251 - t336;
t115 = -qJD(6) * t177 - t292;
t114 = t159 * t255 - t363;
t112 = (-t175 * t254 + t177 * t250) * t190;
t111 = (-t175 * t250 - t177 * t254) * t190;
t105 = -t142 + t214 + t228 - t344 - t369;
t103 = -t131 * t255 - t251 * t268;
t102 = -t135 * t251 + t255 * t261;
t98 = t116 - t153;
t91 = t116 * t254 - t177 * t335;
t90 = t116 * t250 + t177 * t334;
t89 = -t115 * t250 + t175 * t334;
t88 = t115 * t254 + t175 * t335;
t87 = t112 * t255 + t154 * t251;
t86 = t148 * t254 - t339;
t85 = -t149 * t250 + t362;
t84 = t148 * t250 + t338;
t83 = t149 * t254 + t364;
t82 = t119 * t252 + t256 * t268;
t80 = -pkin(3) * t204 - qJ(4) * t210 + t104;
t79 = t113 * t252 + t131 * t256;
t75 = -pkin(3) * t189 + qJ(4) * t205 + t92;
t69 = t101 * t252 + t147 * t256;
t67 = t255 * t91 + t303;
t66 = t255 * t89 - t303;
t65 = t249 * (t248 * t212 + t245 * t276) + (t126 * t257 + t144 * t253) * t246;
t64 = -t245 * t120 + t248 * t278;
t63 = -t245 * t114 + t248 * t279;
t62 = t245 * t142 + t248 * t280;
t61 = -pkin(3) * t104 + qJ(4) * t92;
t60 = t104 * t252 + t256 * t92;
t59 = -t250 * t98 + t254 * t97;
t57 = t250 * t97 + t254 * t98;
t54 = -t251 * t95 + t255 * t86;
t53 = t251 * t99 + t255 * t85;
t52 = -t100 * t251 + t255 * t78;
t48 = -t251 * t97 + t255 * t72;
t46 = -t245 * t102 + t248 * t281;
t43 = t140 * t251 + t255 * t59;
t42 = -t118 * t251 + t255 * t58;
t40 = -t245 * t105 + t248 * t282;
t34 = qJ(4) * t268 + t119 * t347 + t340;
t33 = qJ(4) * t131 + t113 * t347 + t341;
t32 = t252 * t51 + t256 * t77;
t31 = t252 * t47 + t256 * t71;
t30 = -pkin(11) * t77 + t36;
t29 = -pkin(11) * t71 + t35;
t28 = t252 * t41 + t256 * t56;
t21 = -t245 * t52 + t248 * t283;
t20 = -t245 * t48 + t248 * t284;
t19 = t252 * t26 + t256 * t73;
t18 = -pkin(5) * t77 + t25;
t17 = -pkin(5) * t71 + t24;
t16 = qJ(4) * t147 + t101 * t347 - t26;
t15 = -t245 * t42 + t248 * t285;
t11 = qJ(4) * t73 + t26 * t347;
t10 = -t245 * t27 + t248 * t286;
t9 = -pkin(11) * t56 - t13;
t8 = t14 * t255 + t251 * t38;
t6 = qJ(4) * t77 - t251 * t18 + t255 * t30 + t347 * t51;
t5 = qJ(4) * t71 - t251 * t17 + t255 * t29 + t347 * t47;
t4 = t255 * t9 + t294 * t56 + t347 * t41;
t3 = t252 * t7 + t342;
t2 = -t245 * t8 + t248 * t288;
t1 = t347 * t7 + (-pkin(11) * t255 + t294) * t13;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t243, 0, 0, 0, 0, 0, 0, (qJDD(2) * t257 - t253 * t258) * t246, (-qJDD(2) * t253 - t257 * t258) * t246, 0, t249 ^ 2 * t243 + (t171 * t257 + t172 * t253 - t328) * t246, 0, 0, 0, 0, 0, 0, t377, t376, t65, t249 * (-t248 * t142 + t245 * t280) + (t253 * t68 + t257 * t62) * t246, 0, 0, 0, 0, 0, 0, t65, -t377, -t376, t249 * (t248 * t105 + t245 * t282) + (t253 * t60 + t257 * t40) * t246, 0, 0, 0, 0, 0, 0, t249 * (t248 * t114 + t245 * t279) + (t253 * t79 + t257 * t63) * t246, t249 * (t248 * t120 + t245 * t278) + (t253 * t82 + t257 * t64) * t246, t249 * (t248 * t102 + t245 * t281) + (t253 * t69 + t257 * t46) * t246, t249 * (t245 * t286 + t248 * t27) + (t10 * t257 + t19 * t253) * t246, 0, 0, 0, 0, 0, 0, t249 * (t245 * t284 + t248 * t48) + (t20 * t257 + t253 * t31) * t246, t249 * (t245 * t283 + t248 * t52) + (t21 * t257 + t253 * t32) * t246, t249 * (t245 * t285 + t248 * t42) + (t15 * t257 + t253 * t28) * t246, t249 * (t245 * t288 + t248 * t8) + (t2 * t257 + t253 * t3) * t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t171, -t172, 0, 0, t158, t125, t350, t157, t352, t219, t374 - t248 * t109 + (t142 * t256 - t370) * t245, t375 - t248 * t110 + (-t142 * t252 - t371) * t245, t245 * t68 + t314, pkin(2) * t62 + t345 * t68, t219, -t350, -t352, t158, t125, t157, (-qJ(4) * t212 + t104) * t323 + (-pkin(3) * t212 + t92) * t322 + t248 * t146 + t314, -t374 + t248 * t80 + (-qJ(4) * t315 + t256 * (-pkin(3) * t183 + t228 - t263) + t370 + t267 * t322) * t245, -t375 + t248 * t75 + (t252 * (t263 + t369) + t354 * t346 + t371 + (-t267 + 0.2e1 * t295) * t323) * t245, pkin(2) * t40 + t248 * t61 + (pkin(9) * t60 + t105 * t287) * t245, t248 * t128 + (t300 + t256 * (-t156 * t251 - t196 * t329)) * t245, t248 * t103 + (t252 * t166 + t256 * (t131 * t251 - t255 * t268)) * t245, t248 * t121 + (-t252 * t135 + t256 * (-t179 * t255 - t363)) * t245, t248 * t127 + (-t300 + t256 * (-t155 * t255 - t194 * t330)) * t245, t248 * t122 + (t252 * t261 + t256 * (-t178 * t251 - t336)) * t245, t200 * t323 + t248 * t145 + (t194 * t251 + t196 * t255) * t225 * t322, pkin(2) * t63 + t248 * t33 + (t252 * (pkin(4) * t113 - qJ(4) * t114 - t44) + t256 * (pkin(4) * t131 + t114 * t347 + t340) + pkin(9) * t79) * t245, (-qJ(4) * t120 - t251 * t262 + (-t251 * t353 + t119) * pkin(4) - t259) * t323 + (pkin(4) * t268 + t120 * t347 - t341) * t322 + t248 * t34 + pkin(2) * t64 + t82 * t345, pkin(2) * t46 + t248 * t16 + (t252 * (pkin(4) * t101 - qJ(4) * t102) + t256 * (pkin(4) * t147 + t102 * t347 - t27) + pkin(9) * t69) * t245, pkin(2) * t10 + t248 * t11 + (t252 * (pkin(4) * t26 - qJ(4) * t27) + t256 * (pkin(4) * t73 + t27 * t347) + pkin(9) * t19) * t245, t248 * t67 + (t252 * t90 + t256 * (-t251 * t91 + t302)) * t245, t248 * t43 + (t252 * t57 + t256 * (t140 * t255 - t251 * t59)) * t245, t248 * t53 + (t252 * t83 + t256 * (-t251 * t85 + t255 * t99)) * t245, t248 * t66 + (t252 * t88 + t256 * (-t251 * t89 - t302)) * t245, t248 * t54 + (t252 * t84 + t256 * (-t251 * t86 - t255 * t95)) * t245, t248 * t87 + (t252 * t111 + t256 * (-t112 * t251 + t154 * t255)) * t245, pkin(2) * t20 + t248 * t5 + (t252 * (pkin(4) * t47 - qJ(4) * t48 + t305) + t256 * (pkin(4) * t71 - t255 * t17 - t251 * t29 + t347 * t48) + pkin(9) * t31) * t245, pkin(2) * t21 + t248 * t6 + (t252 * (pkin(4) * t51 - qJ(4) * t52 + t306) + t256 * (pkin(4) * t77 - t255 * t18 - t251 * t30 + t347 * t52) + pkin(9) * t32) * t245, pkin(2) * t15 + t248 * t4 + (t252 * (pkin(4) * t41 - qJ(4) * t42 + t293) + t256 * (-t251 * t9 + t299 * t56 + t347 * t42) + pkin(9) * t28) * t245, pkin(2) * t2 + t248 * t1 + (t252 * (pkin(4) * t7 + t343) + pkin(9) * t3 + (t256 * t347 - t316) * t8 + (pkin(11) * t251 + t299) * t342) * t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t222, t211, t353, t222, t182, t239, -t109, -t110, 0, 0, t239, -t353, -t182, -t222, t211, t222, t146, t80, t75, t61, t128, t103, t121, t127, t122, t145, t33, t34, t16, t11, t67, t43, t53, t66, t54, t87, t5, t6, t4, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t353, t204, t189, t104, 0, 0, 0, 0, 0, 0, t113, t119, t101, t26, 0, 0, 0, 0, 0, 0, t47, t51, t41, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t167, t166, -t135, -t167, t261, t200, -t44, -t45, 0, 0, t90, t57, t83, t88, t84, t111, t305, t306, t293, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t140, t99, -t141, -t95, t154, -t24, -t25, 0, 0;];
tauJ_reg  = t12;
