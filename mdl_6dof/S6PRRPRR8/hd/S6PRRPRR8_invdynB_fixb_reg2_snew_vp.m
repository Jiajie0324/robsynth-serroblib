% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 06:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRRPRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:20:30
% EndTime: 2019-05-05 06:21:36
% DurationCPUTime: 59.10s
% Computational Cost: add. (246921->973), mult. (537661->1551), div. (0->0), fcn. (409577->14), ass. (0->724)
t970 = cos(qJ(3));
t972 = qJD(2) ^ 2;
t1114 = t970 * t972;
t959 = sin(pkin(7));
t956 = t959 ^ 2;
t1097 = t956 * t1114;
t966 = sin(qJ(3));
t1083 = t966 * t1097;
t962 = cos(pkin(7));
t949 = qJDD(2) * t962 + qJDD(3);
t912 = t949 - t1083;
t1133 = t912 * t966;
t950 = t962 * qJD(2) + qJD(3);
t946 = t950 ^ 2;
t1129 = t956 * t972;
t1161 = t966 ^ 2;
t947 = t1161 * t1129;
t894 = -t947 - t946;
t1016 = t894 * t970 - t1133;
t1105 = qJD(2) * t970;
t913 = (qJD(3) * t1105 + qJDD(2) * t966) * t959;
t1092 = t959 * t1105;
t927 = t950 * t1092;
t1167 = t927 + t913;
t797 = t1016 * t962 - t1167 * t959;
t1132 = t912 * t970;
t850 = t894 * t966 + t1132;
t967 = sin(qJ(2));
t971 = cos(qJ(2));
t1028 = t797 * t971 - t850 * t967;
t1124 = t962 * t1167;
t795 = t1016 * t959 + t1124;
t960 = sin(pkin(6));
t963 = cos(pkin(6));
t680 = t1028 * t963 - t960 * t795;
t746 = t797 * t967 + t850 * t971;
t958 = sin(pkin(12));
t961 = cos(pkin(12));
t622 = t680 * t961 - t746 * t958;
t1229 = qJ(1) * t622;
t623 = t680 * t958 + t746 * t961;
t1228 = qJ(1) * t623;
t911 = t949 + t1083;
t1134 = t911 * t970;
t957 = t970 ^ 2;
t948 = t957 * t1129;
t917 = -t948 - t946;
t1014 = t917 * t966 + t1134;
t1106 = qJD(2) * t966;
t1094 = t950 * t1106;
t1102 = qJDD(2) * t970;
t1093 = t959 * t1106;
t943 = qJD(3) * t1093;
t885 = -t943 + (-t1094 + t1102) * t959;
t817 = t1014 * t962 + t959 * t885;
t1135 = t911 * t966;
t864 = -t917 * t970 + t1135;
t1023 = t817 * t971 - t864 * t967;
t811 = t1014 * t959 - t962 * t885;
t697 = t1023 * t963 - t960 * t811;
t760 = t817 * t967 + t864 * t971;
t638 = t697 * t961 - t760 * t958;
t1227 = qJ(1) * t638;
t641 = t697 * t958 + t760 * t961;
t1226 = qJ(1) * t641;
t691 = t1023 * t960 + t963 * t811;
t1225 = pkin(8) * (t691 * t960 + t697 * t963);
t678 = t1028 * t960 + t963 * t795;
t1224 = pkin(8) * (t678 * t960 + t680 * t963);
t1223 = pkin(1) * t678;
t1222 = pkin(1) * t680;
t1221 = pkin(1) * t691;
t1220 = pkin(1) * t697;
t916 = t948 - t946;
t1013 = t916 * t966 + t1132;
t884 = -t943 + (t1094 + t1102) * t959;
t815 = t1013 * t962 - t959 * t884;
t862 = -t916 * t970 + t1133;
t1025 = t815 * t971 - t862 * t967;
t809 = t1013 * t959 + t962 * t884;
t695 = t1025 * t963 - t960 * t809;
t758 = t815 * t967 + t862 * t971;
t1219 = t695 * t958 + t758 * t961;
t1218 = t695 * t961 - t758 * t958;
t915 = -t947 + t946;
t1015 = t915 * t970 + t1135;
t883 = -t927 + t913;
t813 = t1015 * t962 - t959 * t883;
t859 = -t915 * t966 + t1134;
t1027 = t813 * t971 + t859 * t967;
t807 = t1015 * t959 + t962 * t883;
t693 = t1027 * t963 - t960 * t807;
t756 = t813 * t967 - t859 * t971;
t1217 = t693 * t958 + t756 * t961;
t1216 = t693 * t961 - t756 * t958;
t1213 = pkin(8) * t746;
t1212 = pkin(8) * t760;
t1203 = t1025 * t960 + t963 * t809;
t1202 = t1027 * t960 + t963 * t807;
t1201 = pkin(9) * (t811 * t959 + t817 * t962);
t1200 = pkin(9) * (t795 * t959 + t797 * t962);
t1199 = pkin(2) * t795;
t1198 = pkin(2) * t797;
t1197 = pkin(2) * t811;
t1196 = pkin(2) * t817;
t1185 = pkin(9) * t850;
t1184 = pkin(9) * t864;
t965 = sin(qJ(5));
t969 = cos(qJ(5));
t900 = t1092 * t969 + t950 * t965;
t902 = -t1092 * t965 + t950 * t969;
t857 = t902 * t900;
t907 = qJDD(5) + t913;
t1168 = -t857 + t907;
t1175 = t1168 * t965;
t1174 = t1168 * t969;
t937 = qJD(5) + t1093;
t964 = sin(qJ(6));
t968 = cos(qJ(6));
t870 = t902 * t964 - t968 * t937;
t872 = t902 * t968 + t937 * t964;
t820 = t872 * t870;
t914 = t1102 * t959 - t943;
t1084 = t969 * t914 + t965 * t949;
t842 = -qJD(5) * t902 - t1084;
t981 = qJDD(6) - t842;
t1169 = -t820 + t981;
t1173 = t1169 * t964;
t1172 = t1169 * t968;
t1155 = pkin(9) * t959;
t1112 = g(3) - qJDD(1);
t1086 = t960 * t1112;
t1120 = t963 * t971;
t938 = g(1) * t958 - t961 * g(2);
t939 = g(1) * t961 + g(2) * t958;
t866 = t971 * t1086 - t938 * t1120 - t939 * t967;
t852 = qJDD(2) * pkin(2) + t1155 * t972 - t866;
t903 = t1112 * t963 + t938 * t960;
t1171 = -t852 * t962 + t903 * t959;
t1170 = qJ(4) * t1167;
t843 = -t900 * qJD(5) - t965 * t914 + t969 * t949;
t768 = -t870 * qJD(6) + t968 * t843 + t964 * t907;
t895 = qJD(6) + t900;
t839 = t895 * t870;
t727 = -t839 + t768;
t1166 = (qJD(2) * t950 - t962 * t972) * t956;
t1107 = qJD(2) * t959;
t867 = -t971 * t939 + (t963 * t938 - t1086) * t967;
t853 = -t972 * pkin(2) + qJDD(2) * t1155 + t867;
t1158 = pkin(3) * t970;
t1080 = -qJ(4) * t966 - t1158;
t909 = t1080 * t1107;
t1081 = t1107 * t909 + t853;
t1165 = t1081 * t966;
t1164 = t958 * t1112;
t1163 = t961 * t1112;
t1137 = t900 * t937;
t1009 = t843 - t1137;
t1085 = t964 * t843 - t968 * t907;
t724 = (qJD(6) - t895) * t872 + t1085;
t868 = t870 ^ 2;
t869 = t872 ^ 2;
t893 = t895 ^ 2;
t898 = t900 ^ 2;
t899 = t902 ^ 2;
t1162 = t937 ^ 2;
t1160 = -pkin(3) - pkin(10);
t1159 = pkin(3) * t966;
t1157 = pkin(8) * t960;
t1156 = pkin(8) * t963;
t1154 = pkin(9) * t962;
t1153 = t914 * pkin(3);
t1152 = t949 * pkin(3);
t1017 = -t883 * t970 + t884 * t966;
t923 = -t947 - t948;
t786 = t1017 * t962 - t959 * t923;
t824 = t883 * t966 + t884 * t970;
t1031 = t786 * t971 + t824 * t967;
t784 = t1017 * t959 + t962 * t923;
t658 = t1031 * t963 - t960 * t784;
t737 = -t786 * t967 + t824 * t971;
t595 = t658 * t961 + t737 * t958;
t1151 = qJ(1) * t595;
t1150 = qJ(4) * t970;
t891 = t962 * t903;
t1082 = t950 * t1093;
t925 = pkin(3) * t1082;
t1108 = t891 - t925;
t910 = pkin(4) * t1093 - pkin(10) * t950;
t1091 = qJD(4) * t1106;
t940 = -0.2e1 * t959 * t1091;
t702 = -pkin(4) * t948 - t913 * qJ(4) + t940 + t1160 * t914 + (-t852 + (-t1150 * t950 - t910 * t966) * qJD(2)) * t959 - t1108;
t1109 = t1171 * t970;
t1090 = qJDD(4) + t1109;
t1008 = t946 * qJ(4) - t1090;
t974 = t1160 * t949 + t883 * pkin(4) + (-pkin(10) * t1097 + t1081) * t966 - t1008;
t604 = t702 * t965 - t969 * t974;
t855 = pkin(5) * t900 - pkin(11) * t902;
t580 = -t907 * pkin(5) - pkin(11) * t1162 + t855 * t902 + t604;
t1149 = t580 * t964;
t1148 = t580 * t968;
t751 = t820 + t981;
t1147 = t751 * t964;
t1146 = t751 * t968;
t837 = t857 + t907;
t1145 = t837 * t965;
t1144 = t837 * t969;
t1142 = t885 * t966;
t1141 = t885 * t970;
t1095 = t950 * t1107;
t886 = (t957 + t1161) * t1095;
t1140 = t886 * t967;
t1139 = t895 * t964;
t1138 = t895 * t968;
t1131 = t937 * t965;
t1130 = t937 * t969;
t754 = -t1171 * t966 + t970 * t853;
t723 = -t946 * pkin(3) + t949 * qJ(4) + 0.2e1 * qJD(4) * t950 + t909 * t1092 + t754;
t684 = t914 * pkin(4) - pkin(10) * t948 + t950 * t910 + t723;
t1119 = t965 * t684;
t821 = t959 * t852 + t891;
t1118 = t966 * t821;
t1117 = t967 * t903;
t1116 = t969 * t684;
t1115 = t970 * t821;
t1113 = t971 * t903;
t605 = t969 * t702 + t965 * t974;
t581 = -pkin(5) * t1162 + pkin(11) * t907 - t855 * t900 + t605;
t615 = -t1009 * pkin(11) + (t902 * t937 - t842) * pkin(5) + t684;
t534 = t968 * t581 + t964 * t615;
t1111 = pkin(1) * t658 + t737 * t1157;
t1110 = pkin(2) * t786 + t824 * t1155;
t1103 = qJDD(2) * t960;
t1101 = t965 * t820;
t1100 = t969 * t820;
t1099 = t966 * t857;
t1098 = t970 * t857;
t1096 = pkin(5) * t969 + pkin(4);
t656 = t1031 * t960 + t963 * t784;
t1089 = -pkin(1) * t656 + t737 * t1156;
t1088 = -pkin(2) * t784 + t824 * t1154;
t1087 = pkin(5) * t965 + qJ(4);
t533 = t581 * t964 - t968 * t615;
t475 = t533 * t964 + t968 * t534;
t888 = -t938 * t958 - t961 * t939;
t932 = qJDD(2) * t971 - t967 * t972;
t1079 = -pkin(8) * t932 - t1117;
t1010 = qJDD(2) * t967 + t971 * t972;
t1078 = -pkin(8) * t1010 + t1113;
t1077 = -t1118 - t1185;
t1076 = t1115 - t1184;
t454 = t475 * t965 - t580 * t969;
t474 = -t533 * t968 + t534 * t964;
t1074 = -t454 * t970 + t474 * t966;
t455 = t475 * t969 + t580 * t965;
t419 = t1074 * t962 - t959 * t455;
t431 = t454 * t966 + t474 * t970;
t1075 = t419 * t971 + t431 * t967;
t538 = -t969 * t604 + t965 * t605;
t1066 = -t538 * t970 + t684 * t966;
t539 = t965 * t604 + t969 * t605;
t467 = t1066 * t962 - t959 * t539;
t518 = t538 * t966 + t684 * t970;
t1073 = t467 * t971 + t518 * t967;
t728 = -t839 - t768;
t631 = -t724 * t968 - t728 * t964;
t769 = t868 + t869;
t589 = t631 * t965 + t769 * t969;
t629 = -t724 * t964 + t728 * t968;
t1060 = -t589 * t970 + t629 * t966;
t590 = t631 * t969 - t769 * t965;
t506 = t1060 * t962 - t959 * t590;
t540 = t589 * t966 + t629 * t970;
t1072 = t506 * t971 + t540 * t967;
t726 = (-qJD(6) - t895) * t872 - t1085;
t632 = t726 * t968 - t727 * t964;
t819 = -t869 + t868;
t600 = -t632 * t965 - t819 * t969;
t630 = t726 * t964 + t727 * t968;
t1058 = t600 * t970 + t630 * t966;
t601 = t632 * t969 - t819 * t965;
t511 = t1058 * t962 - t959 * t601;
t544 = -t600 * t966 + t630 * t970;
t1071 = t511 * t971 + t544 * t967;
t780 = -t893 - t868;
t682 = t780 * t968 - t1173;
t608 = t682 * t965 + t726 * t969;
t681 = t780 * t964 + t1172;
t1056 = -t608 * t970 + t681 * t966;
t609 = t682 * t969 - t726 * t965;
t521 = t1056 * t962 - t959 * t609;
t556 = t608 * t966 + t681 * t970;
t1070 = t521 * t971 + t556 * t967;
t804 = -t869 - t893;
t690 = -t804 * t964 - t1146;
t616 = t690 * t965 - t727 * t969;
t689 = t804 * t968 - t1147;
t1054 = -t616 * t970 + t689 * t966;
t617 = t690 * t969 + t727 * t965;
t524 = t1054 * t962 - t959 * t617;
t563 = t616 * t966 + t689 * t970;
t1069 = t524 * t971 + t563 * t967;
t835 = -t869 + t893;
t709 = -t835 * t964 + t1172;
t625 = -t709 * t965 - t728 * t969;
t707 = t835 * t968 + t1173;
t1053 = t625 * t970 + t707 * t966;
t627 = t709 * t969 - t728 * t965;
t528 = t1053 * t962 - t959 * t627;
t570 = -t625 * t966 + t707 * t970;
t1068 = t528 * t971 + t570 * t967;
t834 = t868 - t893;
t710 = t834 * t968 - t1147;
t626 = -t710 * t965 - t724 * t969;
t708 = t834 * t964 + t1146;
t1052 = t626 * t970 + t708 * t966;
t628 = t710 * t969 - t724 * t965;
t529 = t1052 * t962 - t959 * t628;
t571 = -t626 * t966 + t708 * t970;
t1067 = t529 * t971 + t571 * t967;
t767 = -qJD(6) * t872 - t1085;
t718 = t1138 * t870 - t767 * t964;
t661 = -t718 * t965 - t1100;
t717 = t1139 * t870 + t767 * t968;
t1046 = t661 * t970 + t717 * t966;
t663 = t718 * t969 - t1101;
t551 = t1046 * t962 - t959 * t663;
t592 = -t661 * t966 + t717 * t970;
t1065 = t551 * t971 + t592 * t967;
t720 = -t1139 * t872 + t768 * t968;
t662 = -t720 * t965 + t1100;
t719 = t1138 * t872 + t768 * t964;
t1045 = t662 * t970 + t719 * t966;
t664 = t720 * t969 + t1101;
t552 = t1045 * t962 - t959 * t664;
t593 = -t662 * t966 + t719 * t970;
t1064 = t552 * t971 + t593 * t967;
t711 = -pkin(3) * t923 + t723;
t976 = t1090 + t1165;
t714 = -t1152 + (-t923 - t946) * qJ(4) + t976;
t1042 = t711 * t970 + t714 * t966;
t828 = -pkin(3) * t883 + qJ(4) * t884;
t560 = t1042 * t962 - t959 * t828 + t1088;
t1004 = (-t784 * t959 - t786 * t962) * pkin(9);
t569 = -t966 * t711 + t970 * t714 + t1004;
t1063 = t560 * t971 + t569 * t967;
t736 = t1008 + t1152 - t1165;
t1040 = t723 * t966 + t736 * t970;
t975 = -t821 + t925 + t940 - t1170;
t745 = t975 - t1153;
t584 = t1040 * t962 - t959 * t745;
t633 = t723 * t970 - t736 * t966;
t1062 = t584 * t971 + t633 * t967;
t762 = (-t870 * t968 + t872 * t964) * t895;
t715 = -t762 * t965 + t969 * t981;
t761 = (-t870 * t964 - t872 * t968) * t895;
t1041 = t715 * t970 + t761 * t966;
t716 = t762 * t969 + t965 * t981;
t586 = t1041 * t962 - t959 * t716;
t648 = -t715 * t966 + t761 * t970;
t1061 = t586 * t971 + t648 * t967;
t753 = t966 * t853 + t1109;
t1036 = -t970 * t753 + t966 * t754;
t591 = t1004 - t1036;
t665 = t753 * t966 + t754 * t970;
t603 = t665 * t962 + t1088;
t1059 = t591 * t967 + t603 * t971;
t802 = -t843 - t1137;
t980 = (-qJD(5) + t937) * t902 - t1084;
t730 = t802 * t969 + t965 * t980;
t833 = -t898 - t899;
t1039 = -t730 * t970 + t833 * t966;
t732 = -t802 * t965 + t969 * t980;
t607 = t1039 * t962 - t959 * t732;
t672 = t730 * t966 + t833 * t970;
t1057 = t607 * t971 + t672 * t967;
t798 = (qJD(5) + t937) * t902 + t1084;
t731 = -t1009 * t969 + t798 * t965;
t856 = t899 - t898;
t1038 = t731 * t970 + t856 * t966;
t733 = -t1009 * t965 - t798 * t969;
t611 = t1038 * t962 - t959 * t733;
t687 = -t731 * t966 + t856 * t970;
t1055 = t611 * t971 + t687 * t967;
t643 = t1036 * t962 + t959 * t821;
t1051 = t643 * t971 + t665 * t967;
t848 = -t1162 - t898;
t763 = t848 * t965 + t1174;
t1035 = -t763 * t970 + t798 * t966;
t764 = t848 * t969 - t1175;
t645 = t1035 * t962 - t959 * t764;
t699 = t763 * t966 + t798 * t970;
t1050 = t645 * t971 + t699 * t967;
t858 = -t899 - t1162;
t772 = t858 * t969 - t1145;
t1034 = t1009 * t966 - t772 * t970;
t773 = -t858 * t965 - t1144;
t650 = t1034 * t962 - t959 * t773;
t706 = t1009 * t970 + t772 * t966;
t1049 = t650 * t971 + t706 * t967;
t880 = -t899 + t1162;
t776 = -t880 * t969 - t1175;
t1033 = t776 * t970 - t802 * t966;
t778 = -t880 * t965 + t1174;
t653 = t1033 * t962 - t959 * t778;
t712 = -t776 * t966 - t802 * t970;
t1048 = t653 * t971 + t712 * t967;
t879 = t898 - t1162;
t777 = -t879 * t965 - t1144;
t1032 = t777 * t970 + t966 * t980;
t779 = t879 * t969 - t1145;
t654 = t1032 * t962 - t959 * t779;
t713 = -t777 * t966 + t970 * t980;
t1047 = t654 * t971 + t713 * t967;
t789 = -t1131 * t900 - t842 * t969;
t1007 = t789 * t970 - t1099;
t790 = t1130 * t900 - t842 * t965;
t675 = t1007 * t962 - t959 * t790;
t748 = -t789 * t966 - t1098;
t1044 = t675 * t971 + t748 * t967;
t791 = -t1130 * t902 - t843 * t965;
t1006 = t791 * t970 + t1099;
t792 = -t1131 * t902 + t843 * t969;
t676 = t1006 * t962 - t959 * t792;
t749 = -t791 * t966 + t1098;
t1043 = t676 * t971 + t749 * t967;
t826 = (t900 * t965 + t902 * t969) * t937;
t1021 = t826 * t970 + t907 * t966;
t827 = (-t900 * t969 + t902 * t965) * t937;
t740 = t1021 * t962 - t959 * t827;
t788 = -t826 * t966 + t907 * t970;
t1037 = t740 * t971 + t788 * t967;
t1018 = t1167 * t970 + t1142;
t922 = t947 - t948;
t787 = t1018 * t962 - t959 * t922;
t825 = -t1167 * t966 + t1141;
t1030 = t787 * t971 + t825 * t967;
t955 = t959 * t956;
t844 = (-t955 * t966 * t972 + (t914 - t1082) * t962) * t970;
t873 = -t1095 * t957 - t914 * t966;
t1020 = t844 * t971 + t873 * t967;
t847 = (t1114 * t955 + t1124) * t966;
t874 = -t1095 * t1161 + t913 * t970;
t1019 = t847 * t971 + t874 * t967;
t805 = t866 * t971 - t867 * t967;
t806 = t866 * t967 + t867 * t971;
t920 = t1010 * t963;
t1012 = t920 * t961 + t932 * t958;
t877 = t920 * t958 - t932 * t961;
t887 = t938 * t961 - t939 * t958;
t1005 = (-t656 * t960 - t658 * t963) * pkin(8);
t399 = t1160 * t454 + (-pkin(11) * t969 + t1087) * t474;
t418 = t1074 * t959 + t962 * t455;
t400 = t1160 * t455 + (pkin(11) * t965 + t1096) * t474;
t414 = pkin(4) * t454 - pkin(5) * t580 + pkin(11) * t475 - qJ(4) * t455;
t989 = pkin(9) * t431 + t400 * t970 + t414 * t966;
t382 = -pkin(2) * t418 - t959 * t399 + t962 * t989;
t384 = -t966 * t400 + t970 * t414 + (-t418 * t959 - t419 * t962) * pkin(9);
t398 = -t419 * t967 + t431 * t971;
t1003 = pkin(8) * t398 + t382 * t971 + t384 * t967;
t463 = -pkin(11) * t629 - t474;
t432 = t1087 * t629 + t1160 * t589 + t969 * t463;
t505 = t1060 * t959 + t962 * t590;
t433 = t1096 * t629 + t1160 * t590 - t965 * t463;
t440 = pkin(4) * t589 + pkin(5) * t769 + pkin(11) * t631 - qJ(4) * t590 + t475;
t988 = pkin(9) * t540 + t433 * t970 + t440 * t966;
t396 = -pkin(2) * t505 - t959 * t432 + t962 * t988;
t401 = -t966 * t433 + t970 * t440 + (-t505 * t959 - t506 * t962) * pkin(9);
t464 = -t506 * t967 + t540 * t971;
t1002 = pkin(8) * t464 + t396 * t971 + t401 * t967;
t514 = -pkin(5) * t681 + t533;
t547 = -pkin(11) * t681 + t1149;
t443 = qJ(4) * t681 + t1160 * t608 - t965 * t514 + t969 * t547;
t520 = t1056 * t959 + t962 * t609;
t444 = pkin(4) * t681 + t1160 * t609 - t969 * t514 - t965 * t547;
t481 = pkin(4) * t608 + pkin(5) * t726 + pkin(11) * t682 - qJ(4) * t609 - t1148;
t987 = pkin(9) * t556 + t444 * t970 + t481 * t966;
t403 = -pkin(2) * t520 - t959 * t443 + t962 * t987;
t415 = -t966 * t444 + t970 * t481 + (-t520 * t959 - t521 * t962) * pkin(9);
t483 = -t521 * t967 + t556 * t971;
t1001 = pkin(8) * t483 + t403 * t971 + t415 * t967;
t515 = -pkin(5) * t689 + t534;
t548 = -pkin(11) * t689 + t1148;
t445 = qJ(4) * t689 + t1160 * t616 - t965 * t515 + t969 * t548;
t523 = t1054 * t959 + t962 * t617;
t446 = pkin(4) * t689 + t1160 * t617 - t969 * t515 - t965 * t548;
t485 = pkin(4) * t616 - pkin(5) * t727 + pkin(11) * t690 - qJ(4) * t617 + t1149;
t986 = pkin(9) * t563 + t446 * t970 + t485 * t966;
t405 = -pkin(2) * t523 - t959 * t445 + t962 * t986;
t416 = -t966 * t446 + t970 * t485 + (-t523 * t959 - t524 * t962) * pkin(9);
t486 = -t524 * t967 + t563 * t971;
t1000 = pkin(8) * t486 + t405 * t971 + t416 * t967;
t466 = t1066 * t959 + t962 * t539;
t469 = qJ(4) * t684 + t1160 * t538;
t470 = pkin(4) * t684 + t1160 * t539;
t484 = pkin(4) * t538 - qJ(4) * t539;
t985 = pkin(9) * t518 + t470 * t970 + t484 * t966;
t407 = -pkin(2) * t466 - t959 * t469 + t962 * t985;
t413 = -t966 * t470 + t970 * t484 + (-t466 * t959 - t467 * t962) * pkin(9);
t442 = -t467 * t967 + t518 * t971;
t999 = pkin(8) * t442 + t407 * t971 + t413 * t967;
t507 = qJ(4) * t833 + t1160 * t730 - t538;
t606 = t1039 * t959 + t962 * t732;
t508 = pkin(4) * t833 + t1160 * t732 - t539;
t635 = pkin(4) * t730 - qJ(4) * t732;
t984 = pkin(9) * t672 + t508 * t970 + t635 * t966;
t435 = -pkin(2) * t606 - t959 * t507 + t962 * t984;
t453 = -t966 * t508 + t970 * t635 + (-t606 * t959 - t607 * t962) * pkin(9);
t554 = -t607 * t967 + t672 * t971;
t998 = pkin(8) * t554 + t435 * t971 + t453 * t967;
t574 = qJ(4) * t798 + t1160 * t763 + t1119;
t644 = t1035 * t959 + t962 * t764;
t555 = pkin(4) * t763 - qJ(4) * t764 - t604;
t575 = pkin(4) * t798 + t1160 * t764 + t1116;
t983 = pkin(9) * t699 + t555 * t966 + t575 * t970;
t457 = -pkin(2) * t644 - t959 * t574 + t962 * t983;
t471 = t970 * t555 - t966 * t575 + (-t644 * t959 - t645 * t962) * pkin(9);
t576 = -t645 * t967 + t699 * t971;
t997 = pkin(8) * t576 + t457 * t971 + t471 * t967;
t577 = qJ(4) * t1009 + t1160 * t772 + t1116;
t649 = t1034 * t959 + t962 * t773;
t557 = pkin(4) * t772 - qJ(4) * t773 - t605;
t578 = pkin(4) * t1009 + t1160 * t773 - t1119;
t982 = pkin(9) * t706 + t557 * t966 + t578 * t970;
t462 = -pkin(2) * t649 - t959 * t577 + t962 * t982;
t477 = t970 * t557 - t966 * t578 + (-t649 * t959 - t650 * t962) * pkin(9);
t582 = -t650 * t967 + t706 * t971;
t996 = pkin(8) * t582 + t462 * t971 + t477 * t967;
t583 = t1040 * t959 + t962 * t745;
t634 = pkin(3) * t736 + qJ(4) * t723;
t977 = pkin(9) * t633 + t1080 * t745;
t492 = -pkin(2) * t583 - t959 * t634 + t962 * t977;
t504 = (-t1150 + t1159) * t745 + (-t583 * t959 - t584 * t962) * pkin(9);
t537 = -t584 * t967 + t633 * t971;
t995 = pkin(8) * t537 + t492 * t971 + t504 * t967;
t642 = t1036 * t959 - t962 * t821;
t553 = (-t642 * t959 - t643 * t962) * pkin(9);
t564 = -t643 * t967 + t665 * t971;
t565 = -pkin(2) * t642 + t1154 * t665;
t994 = pkin(8) * t564 + t553 * t967 + t565 * t971;
t688 = -pkin(3) * t894 + qJ(4) * t912 + t723;
t721 = t1153 + (t852 + 0.2e1 * t1091) * t959 + 0.2e1 * t1170 + t1108;
t979 = t1158 * t1167 + t721 * t966 + t1185;
t568 = -t959 * t688 + t962 * t979 + t1199;
t614 = -t1167 * t1159 + t970 * t721 + t1200;
t993 = t568 * t971 + t614 * t967 + t1213;
t700 = (-t917 - t946) * qJ(4) + (-t911 - t949) * pkin(3) + t976;
t722 = (-t885 - t914) * pkin(3) + t975;
t978 = -qJ(4) * t1142 + t722 * t970 + t1184;
t573 = -t959 * t700 + t962 * t978 + t1197;
t618 = -qJ(4) * t1141 - t966 * t722 + t1201;
t992 = t573 * t971 + t618 * t967 + t1212;
t637 = t1077 * t962 + t959 * t754 - t1199;
t666 = -t1115 - t1200;
t991 = t637 * t971 + t666 * t967 - t1213;
t647 = t1076 * t962 + t959 * t753 - t1197;
t671 = -t1118 - t1201;
t990 = t647 * t971 + t671 * t967 - t1212;
t921 = t932 * t963;
t919 = t932 * t960;
t918 = t1010 * t960;
t878 = -t1010 * t961 - t921 * t958;
t876 = -t1010 * t958 + t921 * t961;
t854 = t949 * t959 * t967 + t886 * t971;
t846 = (t1166 * t970 + t913 * t959) * t966;
t845 = (-t1166 * t966 + t914 * t959) * t970;
t832 = -t1113 + (t918 * t960 + t920 * t963) * pkin(8);
t831 = -t1117 + (-t919 * t960 - t921 * t963) * pkin(8);
t830 = t963 * t1140 + (-t1120 * t959 - t960 * t962) * t949;
t829 = t960 * t1140 + (-t959 * t960 * t971 + t962 * t963) * t949;
t793 = t806 * t963;
t785 = t1018 * t959 + t962 * t922;
t783 = -t847 * t967 + t874 * t971;
t782 = -t844 * t967 + t873 * t971;
t775 = -pkin(1) * t919 + t1078 * t963 + t960 * t866;
t774 = pkin(1) * t918 + t1079 * t963 + t960 * t867;
t771 = -t805 * t963 + t960 * t903;
t770 = -t805 * t960 - t963 * t903;
t766 = -t830 * t958 + t854 * t961;
t765 = t830 * t961 + t854 * t958;
t744 = t1019 * t963 - t960 * t846;
t743 = t1020 * t963 - t960 * t845;
t742 = t1019 * t960 + t963 * t846;
t741 = t1020 * t960 + t963 * t845;
t739 = t1021 * t959 + t962 * t827;
t738 = -t787 * t967 + t825 * t971;
t705 = -pkin(1) * t770 + t1156 * t806;
t704 = -t771 * t958 + t806 * t961;
t703 = t771 * t961 + t806 * t958;
t683 = (-t770 * t960 - t771 * t963) * pkin(8);
t674 = t1006 * t959 + t962 * t792;
t673 = t1007 * t959 + t962 * t790;
t670 = -t744 * t958 + t783 * t961;
t669 = -t743 * t958 + t782 * t961;
t668 = t744 * t961 + t783 * t958;
t667 = t743 * t961 + t782 * t958;
t660 = -t740 * t967 + t788 * t971;
t659 = t1030 * t963 - t960 * t785;
t657 = t1030 * t960 + t963 * t785;
t652 = t1032 * t959 + t962 * t779;
t651 = t1033 * t959 + t962 * t778;
t646 = t1076 * t959 - t962 * t753 + t1196;
t636 = t1077 * t959 - t962 * t754 + t1198;
t620 = -t676 * t967 + t749 * t971;
t619 = -t675 * t967 + t748 * t971;
t610 = t1038 * t959 + t962 * t733;
t602 = t665 * t959 + t1110;
t599 = t1037 * t963 - t960 * t739;
t598 = -t659 * t958 + t738 * t961;
t597 = -t658 * t958 + t737 * t961;
t596 = t659 * t961 + t738 * t958;
t594 = qJ(1) * t597;
t588 = -t654 * t967 + t713 * t971;
t587 = -t653 * t967 + t712 * t971;
t585 = t1041 * t959 + t962 * t716;
t572 = t962 * t700 + t959 * t978 - t1196;
t567 = t962 * t688 + t959 * t979 - t1198;
t566 = pkin(2) * t643 + t1155 * t665;
t562 = t1043 * t963 - t960 * t674;
t561 = t1044 * t963 - t960 * t673;
t559 = t1042 * t959 + t962 * t828 + t1110;
t558 = -t611 * t967 + t687 * t971;
t550 = t1045 * t959 + t962 * t664;
t549 = t1046 * t959 + t962 * t663;
t546 = t1047 * t963 - t960 * t652;
t545 = t1048 * t963 - t960 * t651;
t543 = -t586 * t967 + t648 * t971;
t542 = t1049 * t963 - t960 * t649;
t541 = t1049 * t960 + t963 * t649;
t536 = t1050 * t963 - t960 * t644;
t535 = t1050 * t960 + t963 * t644;
t531 = t1051 * t963 - t960 * t642;
t530 = t1051 * t960 + t963 * t642;
t527 = t1052 * t959 + t962 * t628;
t526 = t1053 * t959 + t962 * t627;
t525 = -t967 * t647 + t971 * t671 - t1225;
t522 = t1055 * t963 - t960 * t610;
t519 = -t967 * t637 + t971 * t666 - t1224;
t517 = t1057 * t963 - t960 * t606;
t516 = t1057 * t960 + t963 * t606;
t513 = -t552 * t967 + t593 * t971;
t512 = -t551 * t967 + t592 * t971;
t510 = t1058 * t959 + t962 * t601;
t509 = -t960 * t646 + t963 * t990 - t1221;
t503 = -t960 * t636 + t963 * t991 - t1223;
t502 = t1061 * t963 - t960 * t585;
t501 = -t542 * t958 + t582 * t961;
t500 = t542 * t961 + t582 * t958;
t499 = -t967 * t573 + t971 * t618 + t1225;
t498 = t1062 * t963 - t960 * t583;
t497 = t1062 * t960 + t963 * t583;
t496 = t971 * t591 - t967 * t603 + t1005;
t495 = -t536 * t958 + t576 * t961;
t494 = t536 * t961 + t576 * t958;
t493 = -t967 * t568 + t971 * t614 + t1224;
t491 = pkin(2) * t584 + t962 * t634 + t959 * t977;
t490 = -t529 * t967 + t571 * t971;
t489 = -t528 * t967 + t570 * t971;
t488 = -t531 * t958 + t564 * t961;
t487 = t531 * t961 + t564 * t958;
t482 = -t967 * t560 + t971 * t569 + t1005;
t480 = t1059 * t963 - t960 * t602 + t1089;
t479 = -t517 * t958 + t554 * t961;
t478 = t517 * t961 + t554 * t958;
t476 = -t960 * t572 + t963 * t992 + t1221;
t473 = t1064 * t963 - t960 * t550;
t472 = t1065 * t963 - t960 * t549;
t468 = -t960 * t567 + t963 * t993 + t1223;
t465 = -t511 * t967 + t544 * t971;
t461 = pkin(2) * t650 + t962 * t577 + t959 * t982;
t460 = -t498 * t958 + t537 * t961;
t459 = t498 * t961 + t537 * t958;
t458 = t1063 * t963 - t960 * t559 + t1089;
t456 = pkin(2) * t645 + t962 * t574 + t959 * t983;
t452 = t1067 * t963 - t960 * t527;
t451 = t1068 * t963 - t960 * t526;
t450 = t1069 * t963 - t960 * t523;
t449 = t1069 * t960 + t963 * t523;
t448 = t1070 * t963 - t960 * t520;
t447 = t1070 * t960 + t963 * t520;
t441 = t971 * t553 - t967 * t565 + (-t530 * t960 - t531 * t963) * pkin(8);
t439 = t1071 * t963 - t960 * t510;
t438 = t1072 * t963 - t960 * t505;
t437 = t1072 * t960 + t963 * t505;
t436 = -pkin(1) * t530 - t960 * t566 + t963 * t994;
t434 = pkin(2) * t607 + t962 * t507 + t959 * t984;
t430 = -t450 * t958 + t486 * t961;
t429 = t450 * t961 + t486 * t958;
t428 = -t448 * t958 + t483 * t961;
t427 = t448 * t961 + t483 * t958;
t426 = t1073 * t963 - t960 * t466;
t425 = t1073 * t960 + t963 * t466;
t424 = -t967 * t492 + t971 * t504 + (-t497 * t960 - t498 * t963) * pkin(8);
t423 = -t438 * t958 + t464 * t961;
t422 = t438 * t961 + t464 * t958;
t421 = -t967 * t462 + t971 * t477 + (-t541 * t960 - t542 * t963) * pkin(8);
t420 = -t967 * t457 + t971 * t471 + (-t535 * t960 - t536 * t963) * pkin(8);
t417 = -pkin(1) * t497 - t960 * t491 + t963 * t995;
t412 = -pkin(1) * t541 - t960 * t461 + t963 * t996;
t411 = -pkin(1) * t535 - t960 * t456 + t963 * t997;
t410 = -t426 * t958 + t442 * t961;
t409 = t426 * t961 + t442 * t958;
t408 = -t967 * t435 + t971 * t453 + (-t516 * t960 - t517 * t963) * pkin(8);
t406 = pkin(2) * t467 + t962 * t469 + t959 * t985;
t404 = pkin(2) * t524 + t962 * t445 + t959 * t986;
t402 = pkin(2) * t521 + t962 * t443 + t959 * t987;
t397 = -pkin(1) * t516 - t960 * t434 + t963 * t998;
t395 = pkin(2) * t506 + t962 * t432 + t959 * t988;
t394 = t1075 * t963 - t960 * t418;
t393 = t1075 * t960 + t963 * t418;
t392 = -t967 * t405 + t971 * t416 + (-t449 * t960 - t450 * t963) * pkin(8);
t391 = -t967 * t403 + t971 * t415 + (-t447 * t960 - t448 * t963) * pkin(8);
t390 = -t967 * t407 + t971 * t413 + (-t425 * t960 - t426 * t963) * pkin(8);
t389 = -t394 * t958 + t398 * t961;
t388 = t394 * t961 + t398 * t958;
t387 = -pkin(1) * t449 + t1000 * t963 - t960 * t404;
t386 = -t967 * t396 + t971 * t401 + (-t437 * t960 - t438 * t963) * pkin(8);
t385 = -pkin(1) * t447 + t1001 * t963 - t960 * t402;
t383 = -pkin(1) * t425 - t960 * t406 + t963 * t999;
t381 = pkin(2) * t419 + t962 * t399 + t959 * t989;
t380 = -pkin(1) * t437 + t1002 * t963 - t960 * t395;
t379 = -t967 * t382 + t971 * t384 + (-t393 * t960 - t394 * t963) * pkin(8);
t378 = -pkin(1) * t393 + t1003 * t963 - t960 * t381;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, 0, 0, 0, 0, 0, 0, t878, t877, 0, t704, 0, 0, 0, 0, 0, 0, -t641, -t623, t597, t488, 0, 0, 0, 0, 0, 0, t597, t641, t623, t460, 0, 0, 0, 0, 0, 0, t495, t501, t479, t410, 0, 0, 0, 0, 0, 0, t428, t430, t423, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t887, 0, 0, 0, 0, 0, 0, t876, -t1012, 0, t703, 0, 0, 0, 0, 0, 0, t638, t622, t595, t487, 0, 0, 0, 0, 0, 0, t595, -t638, -t622, t459, 0, 0, 0, 0, 0, 0, t494, t500, t478, t409, 0, 0, 0, 0, 0, 0, t427, t429, t422, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1112, 0, 0, 0, 0, 0, 0, t919, -t918, 0, t770, 0, 0, 0, 0, 0, 0, t691, t678, t656, t530, 0, 0, 0, 0, 0, 0, t656, -t691, -t678, t497, 0, 0, 0, 0, 0, 0, t535, t541, t516, t425, 0, 0, 0, 0, 0, 0, t447, t449, t437, t393; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1164, -t1163, -t887, -qJ(1) * t887, 0, 0, -t877, 0, t878, t958 * t1103, -qJ(1) * t876 - t775 * t958 + t831 * t961, qJ(1) * t1012 - t774 * t958 + t832 * t961, -t793 * t958 + t805 * t961, -qJ(1) * t703 + t683 * t961 - t705 * t958, t670, t598, -t1217, t669, -t1219, t766, -t509 * t958 + t525 * t961 - t1227, -t503 * t958 + t519 * t961 - t1229, -t480 * t958 + t496 * t961 - t1151, -qJ(1) * t487 - t436 * t958 + t441 * t961, t766, t1217, t1219, t670, t598, t669, -t458 * t958 + t482 * t961 - t1151, -t476 * t958 + t499 * t961 + t1227, -t468 * t958 + t493 * t961 + t1229, -qJ(1) * t459 - t417 * t958 + t424 * t961, -t562 * t958 + t620 * t961, -t522 * t958 + t558 * t961, -t545 * t958 + t587 * t961, -t561 * t958 + t619 * t961, -t546 * t958 + t588 * t961, -t599 * t958 + t660 * t961, -qJ(1) * t494 - t411 * t958 + t420 * t961, -qJ(1) * t500 - t412 * t958 + t421 * t961, -qJ(1) * t478 - t397 * t958 + t408 * t961, -qJ(1) * t409 - t383 * t958 + t390 * t961, -t473 * t958 + t513 * t961, -t439 * t958 + t465 * t961, -t451 * t958 + t489 * t961, -t472 * t958 + t512 * t961, -t452 * t958 + t490 * t961, -t502 * t958 + t543 * t961, -qJ(1) * t427 - t385 * t958 + t391 * t961, -qJ(1) * t429 - t387 * t958 + t392 * t961, -qJ(1) * t422 - t380 * t958 + t386 * t961, -qJ(1) * t388 - t378 * t958 + t379 * t961; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1163, -t1164, t888, qJ(1) * t888, 0, 0, t1012, 0, t876, -t961 * t1103, qJ(1) * t878 + t775 * t961 + t831 * t958, qJ(1) * t877 + t774 * t961 + t832 * t958, t793 * t961 + t805 * t958, qJ(1) * t704 + t683 * t958 + t705 * t961, t668, t596, t1216, t667, t1218, t765, t509 * t961 + t525 * t958 - t1226, t503 * t961 + t519 * t958 - t1228, t480 * t961 + t496 * t958 + t594, qJ(1) * t488 + t436 * t961 + t441 * t958, t765, -t1216, -t1218, t668, t596, t667, t458 * t961 + t482 * t958 + t594, t476 * t961 + t499 * t958 + t1226, t468 * t961 + t493 * t958 + t1228, qJ(1) * t460 + t417 * t961 + t424 * t958, t562 * t961 + t620 * t958, t522 * t961 + t558 * t958, t545 * t961 + t587 * t958, t561 * t961 + t619 * t958, t546 * t961 + t588 * t958, t599 * t961 + t660 * t958, qJ(1) * t495 + t411 * t961 + t420 * t958, qJ(1) * t501 + t412 * t961 + t421 * t958, qJ(1) * t479 + t397 * t961 + t408 * t958, qJ(1) * t410 + t383 * t961 + t390 * t958, t473 * t961 + t513 * t958, t439 * t961 + t465 * t958, t451 * t961 + t489 * t958, t472 * t961 + t512 * t958, t452 * t961 + t490 * t958, t502 * t961 + t543 * t958, qJ(1) * t428 + t385 * t961 + t391 * t958, qJ(1) * t430 + t387 * t961 + t392 * t958, qJ(1) * t423 + t380 * t961 + t386 * t958, qJ(1) * t389 + t378 * t961 + t379 * t958; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t938, t939, 0, 0, 0, 0, t918, 0, t919, t963 * qJDD(2), pkin(1) * t921 + t1078 * t960 - t963 * t866, -pkin(1) * t920 + t1079 * t960 - t963 * t867, t806 * t960, pkin(1) * t771 + t1157 * t806, t742, t657, t1202, t741, t1203, t829, t963 * t646 + t960 * t990 + t1220, t963 * t636 + t960 * t991 + t1222, t1059 * t960 + t963 * t602 + t1111, pkin(1) * t531 + t963 * t566 + t960 * t994, t829, -t1202, -t1203, t742, t657, t741, t1063 * t960 + t963 * t559 + t1111, t963 * t572 + t960 * t992 - t1220, t963 * t567 + t960 * t993 - t1222, pkin(1) * t498 + t963 * t491 + t960 * t995, t1043 * t960 + t963 * t674, t1055 * t960 + t963 * t610, t1048 * t960 + t963 * t651, t1044 * t960 + t963 * t673, t1047 * t960 + t963 * t652, t1037 * t960 + t963 * t739, pkin(1) * t536 + t963 * t456 + t960 * t997, pkin(1) * t542 + t963 * t461 + t960 * t996, pkin(1) * t517 + t963 * t434 + t960 * t998, pkin(1) * t426 + t963 * t406 + t960 * t999, t1064 * t960 + t963 * t550, t1071 * t960 + t963 * t510, t1068 * t960 + t963 * t526, t1065 * t960 + t963 * t549, t1067 * t960 + t963 * t527, t1061 * t960 + t963 * t585, pkin(1) * t448 + t1001 * t960 + t963 * t402, pkin(1) * t450 + t1000 * t960 + t963 * t404, pkin(1) * t438 + t1002 * t960 + t963 * t395, pkin(1) * t394 + t1003 * t960 + t963 * t381;];
tauB_reg  = t1;
