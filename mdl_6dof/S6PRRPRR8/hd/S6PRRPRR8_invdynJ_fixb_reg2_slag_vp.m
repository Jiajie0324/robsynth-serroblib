% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRPRR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 22:40:46
% EndTime: 2019-03-08 22:41:12
% DurationCPUTime: 15.62s
% Computational Cost: add. (11785->800), mult. (29770->1072), div. (0->0), fcn. (24611->14), ass. (0->378)
t265 = sin(pkin(7));
t272 = sin(qJ(3));
t421 = qJD(3) * t272;
t389 = t265 * t421;
t245 = pkin(3) * t389;
t276 = cos(qJ(3));
t472 = qJ(4) * t276;
t345 = pkin(10) * t272 - t472;
t419 = qJD(4) * t272;
t293 = qJD(3) * t345 - t419;
t273 = sin(qJ(2));
t266 = sin(pkin(6));
t428 = qJD(1) * t266;
t394 = t273 * t428;
t364 = t265 * t394;
t528 = t265 * t293 + t245 - t364;
t268 = cos(pkin(7));
t442 = t273 * t276;
t277 = cos(qJ(2));
t443 = t272 * t277;
t326 = t268 * t442 + t443;
t171 = t326 * t266;
t151 = qJD(1) * t171;
t447 = t268 * t272;
t258 = pkin(2) * t447;
t453 = t265 * t276;
t499 = pkin(4) + pkin(9);
t527 = (t453 * t499 + t258) * qJD(3) - t151;
t451 = t266 * t273;
t400 = t272 * t451;
t366 = t268 * t400;
t420 = qJD(3) * t276;
t387 = t268 * t420;
t393 = t277 * t428;
t526 = pkin(2) * t387 + qJD(1) * t366 - t276 * t393;
t455 = t265 * t272;
t254 = pkin(9) * t455;
t396 = -pkin(2) * t276 - pkin(3);
t128 = pkin(4) * t455 + t254 + (-pkin(10) + t396) * t268;
t278 = -pkin(3) - pkin(10);
t473 = qJ(4) * t272;
t329 = t276 * t278 - t473;
t142 = (-pkin(2) + t329) * t265;
t271 = sin(qJ(5));
t275 = cos(qJ(5));
t417 = qJD(5) * t275;
t418 = qJD(5) * t271;
t476 = t128 * t417 - t142 * t418 + t271 * t527 + t275 * t528;
t259 = t268 * qJD(4);
t437 = -t389 * t499 + t259 + t526;
t409 = qJD(2) * qJD(3);
t383 = t272 * t409;
t358 = t265 * t383;
t405 = qJDD(2) * t276;
t525 = t265 * t405 - t358;
t218 = qJD(2) * pkin(2) + t393;
t269 = cos(pkin(6));
t427 = qJD(1) * t269;
t395 = t265 * t427;
t446 = t268 * t276;
t432 = t218 * t446 + t276 * t395;
t524 = qJD(4) - t432;
t407 = qJDD(2) * t268;
t251 = qJDD(3) + t407;
t237 = t251 * qJ(4);
t425 = qJD(2) * t268;
t252 = qJD(3) + t425;
t240 = t252 * qJD(4);
t450 = t266 * t277;
t250 = qJDD(1) * t450;
t390 = qJD(2) * t451;
t360 = qJD(1) * t390;
t176 = qJDD(2) * pkin(2) + t250 - t360;
t426 = qJD(2) * t265;
t205 = pkin(9) * t426 + t394;
t408 = qJDD(1) * t269;
t381 = t265 * t408;
t422 = qJD(2) * t277;
t518 = pkin(9) * qJDD(2) * t265 + (qJD(1) * t422 + qJDD(1) * t273) * t266 + qJD(3) * t395;
t331 = -t176 * t447 + t205 * t421 - t218 * t387 - t272 * t381 - t276 * t518;
t31 = -t237 - t240 + t331;
t22 = pkin(4) * t525 - t31;
t379 = t271 * t405;
t416 = qJD(5) * t276;
t385 = t275 * t416;
t386 = t271 * t421;
t440 = t275 * t251;
t79 = t252 * t418 - t440 + (t379 + (t385 - t386) * qJD(2)) * t265;
t423 = qJD(2) * t276;
t391 = t265 * t423;
t361 = t271 * t391;
t80 = -qJD(5) * t361 + t271 * t251 + (qJD(5) * t252 + t525) * t275;
t12 = pkin(5) * t80 + pkin(11) * t79 + t22;
t270 = sin(qJ(6));
t274 = cos(qJ(6));
t382 = t276 * t409;
t406 = qJDD(2) * t272;
t306 = t382 + t406;
t508 = t306 * t265;
t290 = qJDD(5) + t508;
t459 = t218 * t268;
t330 = -t176 * t446 + t205 * t420 + t272 * t518 - t276 * t381 + t421 * t459;
t299 = qJDD(4) + t330;
t21 = pkin(4) * t508 + t251 * t278 + t299;
t248 = t268 * t408;
t431 = pkin(3) * t358 + t248;
t43 = (qJD(2) * t293 + qJDD(2) * t329 - t176) * t265 + t431;
t439 = (pkin(4) * t426 + t205) * t272 + t524;
t60 = t252 * t278 + t439;
t249 = t268 * t427;
t97 = t249 + (qJD(2) * t329 - t218) * t265;
t324 = -t21 * t271 - t275 * t43 - t417 * t60 + t418 * t97;
t3 = pkin(11) * t290 - t324;
t424 = qJD(2) * t272;
t392 = t265 * t424;
t344 = qJD(5) + t392;
t35 = t271 * t60 + t275 * t97;
t26 = pkin(11) * t344 + t35;
t458 = t252 * t271;
t173 = t275 * t391 + t458;
t175 = t252 * t275 - t361;
t241 = t252 * qJ(4);
t101 = t272 * (t395 + t459) + t205 * t276;
t86 = pkin(4) * t391 + t101;
t71 = t241 + t86;
t41 = pkin(5) * t173 - pkin(11) * t175 + t71;
t341 = t26 * t270 - t274 * t41;
t1 = -t341 * qJD(6) + t270 * t12 + t274 * t3;
t161 = qJD(6) + t173;
t523 = t161 * t341 + t1;
t388 = t265 * t420;
t522 = -pkin(11) * t388 - t476;
t200 = t268 * t271 + t275 * t453;
t136 = qJD(5) * t200 - t265 * t386;
t401 = t271 * t453;
t137 = -qJD(5) * t401 + t268 * t417 - t275 * t389;
t521 = pkin(5) * t137 + pkin(11) * t136 + t437;
t354 = pkin(5) * t275 + pkin(11) * t271;
t520 = qJD(5) * t354 - (-t205 + (-pkin(4) - t354) * t426) * t272 + t524;
t415 = qJD(5) * t278;
t247 = pkin(3) * t392;
t147 = t345 * t426 + t247;
t54 = t147 * t275 + t271 * t86;
t519 = -pkin(11) * t391 + t275 * t415 - t54;
t34 = -t271 * t97 + t275 * t60;
t517 = -t34 * t344 - t324;
t325 = t268 * t443 + t442;
t130 = t266 * t325 + t269 * t455;
t194 = -t265 * t450 + t268 * t269;
t261 = t265 ^ 2;
t279 = qJD(2) ^ 2;
t441 = t273 * t279;
t367 = t261 * t266 * t441;
t77 = -qJD(2) * t366 - qJD(3) * t400 + (t266 * t422 + (t265 * t269 + t268 * t450) * qJD(3)) * t276;
t516 = -t130 * t251 + t194 * t508 - t252 * t77 + t272 * t367;
t515 = t71 * qJD(5) + t278 * qJDD(5) + t265 * (t278 * t306 + t424 * t71);
t474 = sin(pkin(12));
t374 = t474 * t273;
t267 = cos(pkin(12));
t448 = t267 * t277;
t195 = t269 * t448 - t374;
t373 = t474 * t277;
t449 = t267 * t273;
t196 = t269 * t449 + t373;
t452 = t266 * t267;
t403 = t265 * t452;
t88 = t195 * t447 + t196 * t276 - t272 * t403;
t197 = -t269 * t373 - t449;
t198 = -t269 * t374 + t448;
t375 = t266 * t474;
t356 = t265 * t375;
t90 = t198 * t276 + (t197 * t268 + t356) * t272;
t503 = -g(1) * t90 - g(2) * t88 - g(3) * t130;
t505 = qJD(5) * t344;
t514 = -t278 * t505 + t22 + t503;
t14 = t26 * t274 + t270 * t41;
t2 = -qJD(6) * t14 + t12 * t274 - t270 * t3;
t513 = -t14 * t161 - t2;
t509 = t175 * t344;
t512 = -t80 + t509;
t319 = t274 * t344;
t111 = t175 * t270 - t319;
t511 = t111 * t344;
t510 = t173 * t344;
t507 = t128 * t271 + t142 * t275;
t434 = -pkin(9) * t389 + t526;
t113 = t175 * t274 + t270 * t344;
t414 = qJD(6) * t113;
t38 = -t270 * t79 - t274 * t290 + t414;
t353 = -g(1) * t198 - g(2) * t196;
t203 = pkin(9) * t453 + t258;
t506 = qJD(3) * t203;
t346 = -pkin(3) * t276 - t473;
t110 = t249 + (qJD(2) * t346 - t218) * t265;
t504 = t110 * t392 + qJDD(4);
t376 = -t21 * t275 + t271 * t43;
t6 = -qJD(5) * t35 - t376;
t105 = t195 * t276 - t196 * t447;
t107 = t197 * t276 - t198 * t447;
t399 = t276 * t450;
t172 = -t366 + t399;
t303 = g(1) * t107 + g(2) * t105 + g(3) * t172;
t433 = -t151 + t506;
t502 = -t252 * t433 - t303;
t129 = -t268 * t399 - t269 * t453 + t400;
t305 = t383 - t405;
t76 = t269 * t389 + (qJD(2) * t326 + qJD(3) * t325) * t266;
t500 = t194 * t265 * t305 - t129 * t251 - t252 * t76 - t276 * t367;
t475 = -qJD(5) * t507 - t271 * t528 + t275 * t527;
t87 = -t195 * t446 + t196 * t272 + t276 * t403;
t498 = pkin(10) * t87;
t89 = -t197 * t446 + t198 * t272 - t276 * t356;
t497 = pkin(10) * t89;
t64 = pkin(11) * t455 + t507;
t181 = -qJ(4) * t268 - t203;
t141 = pkin(4) * t453 - t181;
t201 = t268 * t275 - t401;
t72 = pkin(5) * t200 - pkin(11) * t201 + t141;
t27 = -t270 * t64 + t274 * t72;
t494 = qJD(6) * t27 + t270 * t521 - t274 * t522;
t28 = t270 * t72 + t274 * t64;
t493 = -qJD(6) * t28 + t270 * t522 + t274 * t521;
t492 = pkin(3) * t251;
t491 = pkin(10) * t129;
t223 = pkin(5) * t271 - pkin(11) * t275 + qJ(4);
t445 = t271 * t278;
t162 = t223 * t274 - t270 * t445;
t487 = qJD(6) * t162 + t270 * t520 + t274 * t519;
t163 = t223 * t270 + t274 * t445;
t486 = -qJD(6) * t163 - t270 * t519 + t274 * t520;
t413 = qJD(6) * t270;
t37 = -qJD(6) * t319 + t175 * t413 - t270 * t290 + t274 * t79;
t483 = t270 * t37;
t75 = qJDD(6) + t80;
t482 = t270 * t75;
t481 = t274 * t38;
t480 = t274 * t75;
t479 = t275 * t37;
t478 = t275 * t38;
t477 = -pkin(5) * t388 - t475;
t471 = t111 * t161;
t470 = t111 * t270;
t469 = t111 * t274;
t468 = t113 * t111;
t467 = t113 * t161;
t466 = t113 * t270;
t465 = t113 * t274;
t464 = t175 * t173;
t462 = t196 * t265;
t461 = t198 * t265;
t457 = t261 * t279;
t456 = t265 * t271;
t454 = t265 * t275;
t444 = t272 * t274;
t438 = qJDD(1) - g(3);
t436 = -t259 - t434;
t435 = -g(1) * t461 - g(2) * t462;
t402 = t265 * t451;
t430 = pkin(2) * t450 + pkin(9) * t402;
t263 = t272 ^ 2;
t264 = t276 ^ 2;
t429 = t263 - t264;
t412 = qJD(6) * t274;
t411 = qJD(6) * t275;
t100 = t205 * t272 - t432;
t410 = qJD(4) + t100;
t404 = g(3) * t451;
t398 = t265 * t444;
t82 = t87 * pkin(3);
t378 = qJ(4) * t88 - t82;
t83 = t89 * pkin(3);
t377 = qJ(4) * t90 - t83;
t125 = t129 * pkin(3);
t371 = qJ(4) * t130 - t125;
t370 = t161 * t274;
t369 = qJD(2) * (qJD(3) - t252);
t368 = t251 + t407;
t365 = t35 * t392;
t363 = t265 * t390;
t362 = t275 * t392;
t357 = t272 * t382;
t104 = t195 * t272 + t196 * t446;
t191 = t195 * pkin(2);
t352 = pkin(3) * t105 + qJ(4) * t104 + t191;
t106 = t197 * t272 + t198 * t446;
t192 = t197 * pkin(2);
t351 = pkin(3) * t107 + qJ(4) * t106 + t192;
t155 = t270 * t271 * t392 - t274 * t391;
t349 = t270 * t418 + t155;
t156 = (t270 * t276 + t271 * t444) * t426;
t348 = -t274 * t418 - t156;
t343 = t14 * t270 - t274 * t341;
t342 = -t14 * t274 - t270 * t341;
t92 = t129 * t271 + t194 * t275;
t46 = t130 * t274 - t270 * t92;
t47 = t130 * t270 + t274 * t92;
t53 = -t147 * t271 + t275 * t86;
t69 = t128 * t275 - t142 * t271;
t338 = t129 * t275 - t194 * t271;
t337 = t272 * t360;
t336 = t276 * t360;
t182 = (-pkin(2) + t346) * t265;
t335 = qJD(3) * (-qJD(2) * t182 - t110);
t334 = qJD(3) * (t252 + t425);
t332 = pkin(3) * t172 + qJ(4) * t171 + t430;
t328 = -t161 * t412 - t482;
t327 = -t161 * t413 + t480;
t139 = t201 * t274 + t270 * t455;
t25 = -pkin(5) * t344 - t34;
t322 = -pkin(11) * t75 + t161 * t25;
t318 = t275 * t344;
t316 = t344 * t113;
t149 = t245 + (-qJ(4) * t420 - t419) * t265;
t55 = (-pkin(3) * t405 - qJ(4) * t306 - qJD(2) * t419 - t176) * t265 + t431;
t315 = qJD(2) * t149 + qJDD(2) * t182 + t55;
t132 = -t195 * t265 - t268 * t452;
t133 = -t197 * t265 + t268 * t375;
t314 = -g(1) * (-t133 * t271 + t275 * t89) - g(2) * (-t132 * t271 + t275 * t87) - g(3) * t338;
t50 = t132 * t275 + t271 * t87;
t52 = t133 * t275 + t271 * t89;
t313 = -g(1) * t52 - g(2) * t50 - g(3) * t92;
t115 = -t171 * t275 + t271 * t402;
t65 = t104 * t275 - t196 * t456;
t67 = t106 * t275 - t198 * t456;
t309 = -g(1) * t67 - g(2) * t65 + g(3) * t115;
t308 = g(1) * t89 + g(2) * t87 + g(3) * t129;
t304 = g(1) * t106 + g(2) * t104 + g(3) * t171;
t302 = pkin(10) * t105 + t352;
t301 = pkin(10) * t107 + t351;
t4 = -pkin(5) * t290 - t6;
t300 = t314 - t4;
t297 = t344 * t426;
t294 = pkin(4) * t402 + pkin(10) * t172 + t332;
t123 = (t276 * t369 + t406) * t265;
t292 = t353 * t499 * t265;
t287 = pkin(11) * qJD(6) * t161 - t300;
t286 = -qJD(6) * t343 + t1 * t274 - t2 * t270;
t285 = t308 - t330;
t284 = t503 - t331;
t283 = t101 * t252 + t285;
t282 = -t272 * t297 - t505;
t281 = t271 * t282 + t275 * t290;
t280 = ((t129 * t272 + t130 * t276) * qJDD(2) + (t272 * t76 + t276 * t77 + (t129 * t276 - t130 * t272) * qJD(3)) * qJD(2)) * t265;
t227 = t272 * t276 * t457;
t219 = t251 * t268;
t202 = pkin(2) * t446 - t254;
t199 = t429 * t457;
t188 = -qJ(4) * t391 + t247;
t183 = t268 * t396 + t254;
t180 = (qJDD(2) * t264 - 0.2e1 * t357) * t261;
t179 = (qJDD(2) * t263 + 0.2e1 * t357) * t261;
t158 = -t218 * t265 + t249;
t154 = t252 * t270 - t274 * t362;
t153 = t252 * t274 + t270 * t362;
t138 = t201 * t270 - t398;
t126 = 0.2e1 * (t272 * t405 - t409 * t429) * t261;
t122 = (t272 * t369 - t405) * t265;
t121 = -t176 * t265 + t248;
t116 = t171 * t271 + t275 * t402;
t99 = pkin(5) * t175 + pkin(11) * t173;
t94 = (t272 * t368 + t276 * t334) * t265;
t93 = (t272 * t334 - t276 * t368) * t265;
t84 = -t101 - t241;
t81 = -pkin(3) * t252 + t410;
t68 = t106 * t271 + t198 * t454;
t66 = t104 * t271 + t196 * t454;
t63 = -pkin(5) * t455 - t69;
t59 = qJD(6) * t139 - t136 * t270 - t274 * t388;
t58 = -qJD(6) * t398 + t136 * t274 + t201 * t413 - t270 * t388;
t44 = -pkin(5) * t391 - t53;
t36 = t299 - t492;
t33 = qJD(5) * t338 + t271 * t76 + t275 * t363;
t32 = qJD(5) * t92 + t271 * t363 - t275 * t76;
t16 = t270 * t99 + t274 * t34;
t15 = -t270 * t34 + t274 * t99;
t10 = qJD(6) * t46 + t270 * t77 + t274 * t33;
t9 = -qJD(6) * t47 - t270 * t33 + t274 * t77;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t438, 0, 0, 0, 0, 0, 0 (qJDD(2) * t277 - t441) * t266 (-qJDD(2) * t273 - t277 * t279) * t266, 0, -g(3) + (t269 ^ 2 + (t273 ^ 2 + t277 ^ 2) * t266 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t500, t516, t280, t100 * t76 + t101 * t77 + t121 * t194 + t129 * t330 - t130 * t331 + t158 * t363 - g(3), 0, 0, 0, 0, 0, 0, t280, -t500, -t516, t110 * t363 + t129 * t36 - t130 * t31 + t194 * t55 + t76 * t81 - t77 * t84 - g(3), 0, 0, 0, 0, 0, 0, t130 * t80 + t77 * t173 + t290 * t338 - t32 * t344, -t130 * t79 + t175 * t77 - t290 * t92 - t33 * t344, -t173 * t33 + t175 * t32 + t338 * t79 - t80 * t92, t130 * t22 - t32 * t34 - t324 * t92 + t33 * t35 + t338 * t6 + t71 * t77 - g(3), 0, 0, 0, 0, 0, 0, t111 * t32 + t161 * t9 - t338 * t38 + t46 * t75, -t10 * t161 + t113 * t32 + t338 * t37 - t47 * t75, -t10 * t111 - t113 * t9 + t37 * t46 - t38 * t47, t1 * t47 + t10 * t14 + t2 * t46 + t25 * t32 - t338 * t4 - t341 * t9 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -g(1) * t197 - g(2) * t195 - g(3) * t450 + t250, -t438 * t451 - t353, 0, 0, t179, t126, t94, t180, -t93, t219, t202 * t251 - t268 * t330 + (-t121 * t276 + t158 * t421) * t265 + (-pkin(2) * t305 + t336) * t261 + t502, -t203 * t251 + t268 * t331 + (t121 * t272 + t158 * t420) * t265 - t434 * t252 + (-pkin(2) * t306 - t337) * t261 + t304 (-t404 + (qJD(3) * t100 + qJDD(2) * t203 - t331) * t276 + (-qJD(3) * t101 - qJDD(2) * t202 + t330) * t272 + ((-qJD(3) * t202 + t434) * t276 + (t433 - t506) * t272) * qJD(2)) * t265 + t435, -t331 * t203 - t330 * t202 - g(1) * t192 - g(2) * t191 - g(3) * t430 + (-pkin(2) * t121 + pkin(9) * t353 - t158 * t394) * t265 + t434 * t101 + t433 * t100, t219, -t94, t93, t179, t126, t180 (-t404 + (qJD(3) * t81 - qJDD(2) * t181 - t31) * t276 + (qJD(3) * t84 + qJDD(2) * t183 + t36) * t272 + ((qJD(3) * t183 - t436) * t276 + (qJD(3) * t181 + t433) * t272) * qJD(2)) * t265 + t435, -t261 * t336 + t183 * t251 + t268 * t36 + (t272 * t335 + t276 * t315) * t265 - t502, t261 * t337 - t181 * t251 - t268 * t31 - t436 * t252 + (-t272 * t315 + t276 * t335) * t265 - t304, t55 * t182 + t31 * t181 + t36 * t183 - g(1) * (pkin(9) * t461 + t351) - g(2) * (pkin(9) * t462 + t352) - g(3) * t332 + t436 * t84 + t433 * t81 + (t149 - t364) * t110, -t136 * t175 - t201 * t79, t136 * t173 - t137 * t175 + t200 * t79 - t201 * t80, -t136 * qJD(5) + t201 * qJDD(5) + ((qJD(2) * t201 + t175) * t420 + (-qJD(2) * t136 + qJDD(2) * t201 - t79) * t272) * t265, t137 * t173 + t200 * t80, -t137 * qJD(5) - t200 * qJDD(5) + ((-qJD(2) * t200 - t173) * t420 + (-qJD(2) * t137 - qJDD(2) * t200 - t80) * t272) * t265 (qJD(3) * t416 + (qJDD(5) + (0.2e1 * t382 + t406) * t265) * t272) * t265, -g(1) * t68 - g(2) * t66 - g(3) * t116 + t69 * qJDD(5) + t71 * t137 + t141 * t80 + t22 * t200 + t437 * t173 + t475 * qJD(5) + ((qJD(2) * t69 + t34) * t420 + (qJD(2) * t475 + qJDD(2) * t69 + t6) * t272) * t265, -t507 * qJDD(5) - t71 * t136 - t141 * t79 + t22 * t201 + t437 * t175 - t476 * qJD(5) + ((-qJD(2) * t507 - t35) * t420 + (-qJD(2) * t476 - qJDD(2) * t507 + t324) * t272) * t265 + t309, t136 * t34 - t137 * t35 - t173 * t476 - t175 * t475 + t200 * t324 - t201 * t6 - t507 * t80 + t69 * t79 - t303, -g(1) * t301 - g(2) * t302 - g(3) * t294 + t141 * t22 - t324 * t507 + t34 * t475 + t35 * t476 + t437 * t71 + t6 * t69 + t292, -t113 * t58 - t139 * t37, t111 * t58 - t113 * t59 + t138 * t37 - t139 * t38, t113 * t137 + t139 * t75 - t161 * t58 - t200 * t37, t111 * t59 + t138 * t38, -t111 * t137 - t138 * t75 - t161 * t59 - t200 * t38, t137 * t161 + t200 * t75, t27 * t75 + t2 * t200 - t341 * t137 + t63 * t38 + t4 * t138 + t25 * t59 - g(1) * (t107 * t270 + t274 * t68) - g(2) * (t105 * t270 + t274 * t66) - g(3) * (t116 * t274 + t172 * t270) + t493 * t161 + t477 * t111, -t28 * t75 - t1 * t200 - t14 * t137 - t63 * t37 + t4 * t139 - t25 * t58 - g(1) * (t107 * t274 - t270 * t68) - g(2) * (t105 * t274 - t270 * t66) - g(3) * (-t116 * t270 + t172 * t274) - t494 * t161 + t477 * t113, -t1 * t138 - t111 * t494 - t113 * t493 - t139 * t2 - t14 * t59 + t27 * t37 - t28 * t38 - t341 * t58 - t309, t1 * t28 + t2 * t27 + t4 * t63 - g(1) * (pkin(5) * t68 - pkin(11) * t67 + t301) - g(2) * (pkin(5) * t66 - pkin(11) * t65 + t302) - g(3) * (pkin(5) * t116 + pkin(11) * t115 + t294) + t292 + t477 * t25 + t494 * t14 - t493 * t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t227, t199, t123, t227, -t122, t251, -t158 * t392 + t283, -t100 * t252 - t158 * t391 - t284, 0, 0, t251, -t123, t122, -t227, t199, t227 ((-pkin(3) * t272 + t472) * qJDD(2) + ((-qJ(4) * qJD(3) - t101 - t84) * t272 + (-pkin(3) * qJD(3) + t410 - t81) * t276) * qJD(2)) * t265, -t188 * t391 - t283 - 0.2e1 * t492 + t504, 0.2e1 * t237 + t240 + t410 * t252 + (t110 * t276 + t188 * t272) * t426 + t284, -pkin(3) * t36 - g(1) * t377 - g(2) * t378 - g(3) * t371 - qJ(4) * t31 - t101 * t81 - t110 * t188 - t410 * t84, -t271 * t509 - t275 * t79 (-t80 - t509) * t275 + (t79 + t510) * t271, -t175 * t391 + t281, t173 * t318 + t271 * t80, -t271 * qJDD(5) + (t173 * t423 - t271 * t306) * t265 + t282 * t275, -t276 * t297, qJ(4) * t80 + t439 * t173 + t271 * t514 + t275 * t515 - t34 * t391 - t53 * t344, -qJ(4) * t79 + t439 * t175 - t271 * t515 + t275 * t514 + t54 * t344 + t35 * t391, t173 * t54 + t175 * t53 + (-t365 + t278 * t79 - t6 + (-t173 * t278 - t35) * qJD(5)) * t275 + (t34 * t392 - t278 * t80 + t324 + (t175 * t278 + t34) * qJD(5)) * t271 + t308, t22 * qJ(4) - t35 * t54 - t34 * t53 - g(1) * (t377 - t497) - g(2) * (t378 - t498) - g(3) * (t371 - t491) + t439 * t71 + (-t324 * t271 + t6 * t275 + (-t271 * t34 + t275 * t35) * qJD(5)) * t278, -t274 * t479 + (-t270 * t411 + t348) * t113, t111 * t156 + t113 * t155 + (t466 + t469) * t418 + (t483 - t481 + (-t465 + t470) * qJD(6)) * t275, -t271 * t37 + t348 * t161 + (t316 + t327) * t275, t270 * t478 + (t274 * t411 - t349) * t111, -t271 * t38 + t349 * t161 + (t328 - t511) * t275, t161 * t318 + t271 * t75, -t44 * t111 - t25 * t155 + t162 * t75 + t486 * t161 + t308 * t270 + (t2 + (t111 * t278 - t25 * t270) * qJD(5) + t503 * t274) * t271 + (t25 * t412 + t4 * t270 - t278 * t38 - t341 * t344) * t275, -t44 * t113 - t25 * t156 - t163 * t75 - t487 * t161 + t308 * t274 + (-t1 + (t113 * t278 - t25 * t274) * qJD(5) - t503 * t270) * t271 + (-t14 * t344 - t25 * t413 + t4 * t274 + t278 * t37) * t275, -t341 * t156 + t14 * t155 + t162 * t37 - t163 * t38 - t486 * t113 - t487 * t111 + t343 * t418 + (qJD(6) * t342 - t1 * t270 - t2 * t274 - t503) * t275, t1 * t163 + t2 * t162 - t4 * t275 * t278 - g(1) * (-t83 - t497) - g(2) * (-t82 - t498) - g(3) * (-t125 - t491) + (t271 * t415 - t44) * t25 + t487 * t14 - t486 * t341 + t503 * t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, t227 + t251, -t252 ^ 2 - t263 * t457, t252 * t84 - t285 - t492 + t504, 0, 0, 0, 0, 0, 0, -t173 * t252 + t281, -t271 * t290 - t252 * t175 + (-t344 * t392 - t505) * t275 (t79 - t510) * t275 + t512 * t271, -t252 * t71 + (t344 * t35 + t6) * t275 + t517 * t271 - t308, 0, 0, 0, 0, 0, 0, -t478 + (-t270 * t417 - t153) * t161 + (t328 + t511) * t271, t479 + (-t274 * t417 + t154) * t161 + (t316 - t327) * t271, t111 * t154 + t113 * t153 + (t466 - t469) * t417 + (-t483 - t481 + (t465 + t470) * qJD(6)) * t271, t341 * t153 - t14 * t154 + (-qJD(5) * t342 - t4) * t275 + (t25 * t344 + t286) * t271 - t308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t464, -t173 ^ 2 + t175 ^ 2, t440 + (t173 - t458) * qJD(5) + (-t379 + (-t385 + (qJD(3) * t271 + t173) * t272) * qJD(2)) * t265, -t464, t512, t290, -t175 * t71 + t314 + t365 - t376, t173 * t71 - t313 - t517, 0, 0, t113 * t370 - t483 (-t37 - t471) * t274 + (-t38 - t467) * t270, -t113 * t175 + t161 * t370 + t482, t161 * t470 - t481, -t161 ^ 2 * t270 + t111 * t175 + t480, -t161 * t175, -pkin(5) * t38 - t111 * t35 - t15 * t161 + t175 * t341 + t270 * t322 - t274 * t287, pkin(5) * t37 - t113 * t35 + t14 * t175 + t16 * t161 + t270 * t287 + t274 * t322, t111 * t16 + t113 * t15 + ((-t38 + t414) * pkin(11) + t523) * t274 + ((qJD(6) * t111 - t37) * pkin(11) + t513) * t270 + t313, t341 * t15 - t14 * t16 - t25 * t35 + t300 * pkin(5) + (t286 + t313) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t468, -t111 ^ 2 + t113 ^ 2, -t37 + t471, -t468, t467 - t38, t75, -t25 * t113 - g(1) * (-t270 * t52 + t274 * t90) - g(2) * (-t270 * t50 + t274 * t88) - g(3) * t46 - t513, t25 * t111 - g(1) * (-t270 * t90 - t274 * t52) - g(2) * (-t270 * t88 - t274 * t50) + g(3) * t47 - t523, 0, 0;];
tau_reg  = t5;
