% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:14:42
% EndTime: 2019-03-09 07:15:06
% DurationCPUTime: 14.80s
% Computational Cost: add. (28007->727), mult. (66466->919), div. (0->0), fcn. (52280->18), ass. (0->333)
t327 = cos(pkin(11));
t491 = cos(qJ(3));
t400 = t491 * t327;
t298 = qJD(1) * t400;
t326 = sin(pkin(11));
t332 = sin(qJ(3));
t429 = t332 * t326;
t398 = qJD(1) * t429;
t256 = -t298 + t398;
t331 = sin(qJ(4));
t334 = cos(qJ(5));
t330 = sin(qJ(5));
t335 = cos(qJ(4));
t433 = t330 * t335;
t273 = t331 * t334 + t433;
t165 = t273 * t256;
t357 = t273 * qJD(4);
t345 = t273 * qJD(5) + t357;
t344 = t165 + t345;
t269 = t326 * t491 + t332 * t327;
t258 = t269 * qJD(1);
t411 = t335 * qJD(3);
t216 = t258 * t331 - t411;
t218 = qJD(3) * t331 + t258 * t335;
t370 = -t216 * t330 + t334 * t218;
t434 = t330 * t331;
t505 = t334 * t335 - t434;
t418 = qJD(3) * t332;
t397 = t326 * t418;
t389 = qJDD(1) * t491;
t408 = t327 * qJDD(1);
t402 = qJD(3) * t298 + t326 * t389 + t332 * t408;
t195 = qJD(1) * t397 - t402;
t416 = qJD(4) * t331;
t140 = -qJD(4) * t411 - t331 * qJDD(3) + t335 * t195 + t258 * t416;
t417 = qJD(4) * t218;
t141 = -t335 * qJDD(3) - t195 * t331 + t417;
t413 = qJD(5) * t334;
t414 = qJD(5) * t330;
t64 = t334 * t140 + t330 * t141 + t216 * t413 + t218 * t414;
t534 = -t344 * t370 - t505 * t64;
t190 = pkin(3) * t258 + pkin(8) * t256;
t475 = pkin(7) + qJ(2);
t289 = t475 * t327;
t271 = qJD(1) * t289;
t255 = t332 * t271;
t288 = t475 * t326;
t270 = qJD(1) * t288;
t200 = -t270 * t491 - t255;
t131 = t335 * t190 - t200 * t331;
t337 = -pkin(9) - pkin(8);
t401 = qJD(4) * t337;
t533 = -pkin(4) * t258 - t131 + (-pkin(9) * t256 + t401) * t335;
t132 = t331 * t190 + t335 * t200;
t448 = t256 * t331;
t532 = pkin(9) * t448 - t331 * t401 + t132;
t150 = t334 * t216 + t218 * t330;
t329 = sin(qJ(6));
t490 = cos(qJ(6));
t516 = -t329 * t150 + t370 * t490;
t83 = t490 * t150 + t329 * t370;
t476 = t83 * t516;
t407 = qJD(4) + qJD(5);
t415 = qJD(4) * t335;
t421 = -t505 * t256 - t334 * t415 - t335 * t413 + t407 * t434;
t245 = qJD(4) + t256;
t410 = qJD(1) * qJD(2);
t493 = qJDD(1) * t475 + t410;
t238 = t493 * t326;
t239 = t493 * t327;
t394 = qJD(3) * t491;
t130 = -t491 * t238 - t332 * t239 + t270 * t418 - t271 * t394;
t126 = -qJDD(3) * pkin(3) - t130;
t323 = pkin(11) + qJ(3);
t312 = sin(t323);
t313 = cos(t323);
t333 = sin(qJ(1));
t336 = cos(qJ(1));
t376 = g(1) * t336 + g(2) * t333;
t353 = -g(3) * t313 + t312 * t376;
t349 = -t126 + t353;
t531 = -pkin(8) * qJD(4) * t245 + t349;
t522 = t516 ^ 2 - t83 ^ 2;
t240 = qJD(5) + t245;
t303 = pkin(2) * t327 + pkin(1);
t283 = -qJD(1) * t303 + qJD(2);
t161 = pkin(3) * t256 - pkin(8) * t258 + t283;
t201 = -t332 * t270 + t271 * t491;
t189 = qJD(3) * pkin(8) + t201;
t112 = t335 * t161 - t189 * t331;
t95 = -pkin(9) * t218 + t112;
t74 = pkin(4) * t245 + t95;
t113 = t161 * t331 + t189 * t335;
t96 = -pkin(9) * t216 + t113;
t90 = t330 * t96;
t47 = t334 * t74 - t90;
t512 = pkin(10) * t370;
t37 = t47 - t512;
t35 = pkin(5) * t240 + t37;
t92 = t334 * t96;
t48 = t330 * t74 + t92;
t526 = pkin(10) * t150;
t38 = t48 - t526;
t468 = t329 * t38;
t12 = t35 * t490 - t468;
t405 = t490 * t38;
t13 = t329 * t35 + t405;
t530 = -t12 * t83 + t13 * t516;
t364 = -t330 * t140 + t141 * t334 - t216 * t414 + t218 * t413;
t393 = qJD(6) * t490;
t412 = qJD(6) * t329;
t23 = t150 * t393 + t329 * t364 + t370 * t412 + t490 * t64;
t234 = qJD(6) + t240;
t520 = t234 * t83 - t23;
t261 = t269 * qJD(3);
t409 = t326 * qJDD(1);
t373 = -t327 * t389 + t332 * t409;
t196 = qJD(1) * t261 + t373;
t187 = qJDD(4) + t196;
t184 = qJDD(5) + t187;
t282 = -qJDD(1) * t303 + qJDD(2);
t128 = pkin(3) * t196 + pkin(8) * t195 + t282;
t118 = t335 * t128;
t404 = t332 * t238 - t491 * t239 + t270 * t394;
t129 = -t271 * t418 - t404;
t125 = qJDD(3) * pkin(8) + t129;
t45 = -qJD(4) * t113 - t125 * t331 + t118;
t29 = pkin(4) * t187 + pkin(9) * t140 + t45;
t44 = t335 * t125 + t331 * t128 + t161 * t415 - t189 * t416;
t34 = -pkin(9) * t141 + t44;
t9 = -qJD(5) * t48 + t334 * t29 - t330 * t34;
t6 = pkin(5) * t184 + pkin(10) * t64 + t9;
t8 = t330 * t29 + t334 * t34 + t74 * t413 - t96 * t414;
t7 = -pkin(10) * t364 + t8;
t1 = t329 * t6 + t35 * t393 - t38 * t412 + t490 * t7;
t325 = qJ(4) + qJ(5);
t319 = qJ(6) + t325;
t307 = sin(t319);
t308 = cos(t319);
t442 = t313 * t333;
t220 = t307 * t336 - t308 * t442;
t441 = t313 * t336;
t222 = t307 * t333 + t308 * t441;
t479 = g(3) * t312;
t188 = -qJD(3) * pkin(3) - t200;
t142 = t216 * pkin(4) + t188;
t88 = t150 * pkin(5) + t142;
t519 = g(1) * t222 - g(2) * t220 + t308 * t479 + t88 * t83 - t1;
t291 = t337 * t331;
t292 = t337 * t335;
t215 = t330 * t291 - t334 * t292;
t466 = -qJD(5) * t215 + t532 * t330 + t533 * t334;
t527 = t291 * t413 + t533 * t330 - t532 * t334;
t24 = qJD(6) * t516 - t329 * t64 + t490 * t364;
t498 = t234 * t516 - t24;
t2 = -qJD(6) * t13 - t329 * t7 + t490 * t6;
t219 = t307 * t442 + t308 * t336;
t221 = -t307 * t441 + t308 * t333;
t500 = -g(1) * t221 + g(2) * t219 + t307 * t479 - t516 * t88 + t2;
t435 = t330 * t292;
t488 = pkin(10) * t273;
t525 = (t435 - t488) * qJD(5) + t527 + (-t165 - t357) * pkin(10);
t524 = -pkin(5) * t258 + pkin(10) * t421 + t466;
t457 = t150 * t370;
t425 = t273 * t412 + t329 * t344 - t393 * t505 + t421 * t490;
t203 = t273 * t490 + t329 * t505;
t424 = qJD(6) * t203 - t329 * t421 + t344 * t490;
t463 = qJDD(1) * pkin(1);
t523 = -g(1) * t333 + g(2) * t336;
t365 = -qJDD(2) + t463 - t523;
t260 = -t327 * t394 + t397;
t446 = t260 * t331;
t360 = t269 * t415 - t446;
t521 = -t150 ^ 2 + t370 ^ 2;
t518 = t150 * t240 - t64;
t318 = cos(t325);
t438 = t318 * t333;
t317 = sin(t325);
t439 = t317 * t336;
t229 = -t313 * t438 + t439;
t437 = t318 * t336;
t440 = t317 * t333;
t231 = t313 * t437 + t440;
t517 = g(1) * t231 - g(2) * t229 + t142 * t150 + t318 * t479 - t8;
t154 = -pkin(4) * t448 + t201;
t477 = t331 * pkin(4);
t515 = t477 * qJD(4) - t154;
t372 = -t112 * t245 + t44;
t461 = t113 * t245;
t511 = t45 + t461;
t385 = t245 * t331;
t510 = t218 * t385;
t362 = t400 - t429;
t194 = -pkin(3) * t362 - pkin(8) * t269 - t303;
t213 = -t332 * t288 + t289 * t491;
t204 = t335 * t213;
t139 = t331 * t194 + t204;
t507 = -t491 * t288 - t332 * t289;
t426 = t335 * t336;
t432 = t331 * t333;
t246 = t313 * t432 + t426;
t428 = t333 * t335;
t431 = t331 * t336;
t248 = -t313 * t431 + t428;
t504 = -g(1) * t248 + g(2) * t246;
t502 = qJ(2) * qJDD(1);
t228 = t313 * t440 + t437;
t230 = -t313 * t439 + t438;
t501 = -g(1) * t230 + g(2) * t228 + t317 * t479;
t499 = -t142 * t370 + t501 + t9;
t173 = qJDD(6) + t184;
t497 = t173 * t203 - t234 * t425;
t496 = t240 * t370 - t364;
t495 = t184 * t273 - t240 * t421;
t351 = -t376 * t313 - t479;
t202 = t273 * t329 - t490 * t505;
t494 = t202 * t23 - t424 * t516;
t492 = t258 ^ 2;
t489 = pkin(4) * t335;
t290 = t336 * t303;
t481 = g(2) * t290;
t214 = t334 * t291 + t435;
t170 = t214 - t488;
t171 = pkin(10) * t505 + t215;
t119 = t170 * t490 - t329 * t171;
t474 = qJD(6) * t119 + t329 * t524 + t490 * t525;
t120 = t329 * t170 + t171 * t490;
t473 = -qJD(6) * t120 - t329 * t525 + t490 * t524;
t51 = t334 * t95 - t90;
t471 = t258 * t83;
t470 = t258 * t516;
t138 = t335 * t194 - t213 * t331;
t443 = t269 * t335;
t101 = -pkin(4) * t362 - pkin(9) * t443 + t138;
t444 = t269 * t331;
t115 = -pkin(9) * t444 + t139;
t68 = t330 * t101 + t334 * t115;
t467 = t292 * t414 + t527;
t309 = pkin(4) * t334 + pkin(5);
t50 = -t330 * t95 - t92;
t39 = t50 + t526;
t40 = t51 - t512;
t436 = t329 * t330;
t465 = -t329 * t39 - t490 * t40 + t309 * t393 + (-t330 * t412 + (t334 * t490 - t436) * qJD(5)) * pkin(4);
t399 = t490 * t330;
t464 = t329 * t40 - t490 * t39 - t309 * t412 + (-t330 * t393 + (-t329 * t334 - t399) * qJD(5)) * pkin(4);
t460 = t140 * t331;
t459 = t141 * t335;
t458 = t150 * t258;
t456 = t370 * t258;
t453 = t187 * t331;
t452 = t216 * t256;
t451 = t216 * t258;
t450 = t218 * t216;
t449 = t218 * t258;
t447 = t258 * t256;
t445 = t260 * t335;
t135 = t331 * t141;
t172 = t335 * t187;
t423 = -t216 * t415 - t135;
t422 = pkin(5) * t344 + t515;
t284 = pkin(5) * t317 + t477;
t420 = t284 + t475;
t321 = t326 ^ 2;
t322 = t327 ^ 2;
t419 = t321 + t322;
t310 = pkin(3) + t489;
t396 = t269 * t416;
t285 = pkin(5) * t318 + t489;
t392 = t475 + t477;
t388 = t419 * qJD(1) ^ 2;
t67 = t334 * t101 - t115 * t330;
t162 = t362 * qJD(2) + qJD(3) * t507;
t191 = pkin(3) * t261 + pkin(8) * t260;
t387 = -t162 * t331 + t335 * t191;
t384 = t245 * t335;
t383 = 0.2e1 * t419;
t382 = -t203 * t24 + t425 * t83;
t381 = t523 * t312;
t380 = pkin(4) * t416 - t154;
t379 = -t202 * t173 - t234 * t424;
t378 = t150 * t421 - t273 * t364;
t377 = pkin(3) * t313 + pkin(8) * t312;
t374 = t184 * t505 - t240 * t344;
t164 = pkin(4) * t444 - t507;
t371 = t112 * t335 + t113 * t331;
t279 = pkin(3) + t285;
t324 = -pkin(10) + t337;
t369 = t279 * t313 - t312 * t324;
t367 = t310 * t313 - t312 * t337;
t363 = t172 + (-t416 - t448) * t245;
t179 = t505 * t269;
t49 = -pkin(5) * t362 - pkin(10) * t179 + t67;
t178 = t273 * t269;
t52 = -pkin(10) * t178 + t68;
t25 = -t329 * t52 + t49 * t490;
t26 = t329 * t49 + t490 * t52;
t123 = -t329 * t178 + t179 * t490;
t359 = -t396 - t445;
t57 = pkin(9) * t445 + pkin(4) * t261 + (-t204 + (pkin(9) * t269 - t194) * t331) * qJD(4) + t387;
t69 = t335 * t162 + t331 * t191 + t194 * t415 - t213 * t416;
t66 = -pkin(9) * t360 + t69;
t16 = t101 * t413 - t115 * t414 + t330 * t57 + t334 * t66;
t358 = -pkin(8) * t187 + t188 * t245;
t354 = t365 + t463;
t71 = t141 * pkin(4) + t126;
t17 = -qJD(5) * t68 - t330 * t66 + t334 * t57;
t348 = t383 * t410 - t376;
t163 = qJD(2) * t269 + qJD(3) * t213;
t127 = pkin(4) * t360 + t163;
t254 = pkin(4) * t399 + t329 * t309;
t253 = -pkin(4) * t436 + t309 * t490;
t252 = t256 ^ 2;
t249 = t313 * t426 + t432;
t247 = -t313 * t428 + t431;
t237 = -pkin(5) * t505 - t310;
t124 = pkin(4) * t218 + pkin(5) * t370;
t122 = t178 * t490 + t179 * t329;
t121 = pkin(5) * t178 + t164;
t79 = -t260 * t433 - t330 * t396 - t414 * t444 + (t407 * t443 - t446) * t334;
t78 = t260 * t505 + t269 * t345;
t70 = -qJD(4) * t139 + t387;
t60 = t79 * pkin(5) + t127;
t32 = qJD(6) * t123 - t329 * t78 + t490 * t79;
t31 = t178 * t393 + t179 * t412 + t329 * t79 + t490 * t78;
t30 = pkin(5) * t364 + t71;
t15 = t37 * t490 - t468;
t14 = -t329 * t37 - t405;
t11 = -pkin(10) * t79 + t16;
t10 = pkin(5) * t261 + pkin(10) * t78 + t17;
t4 = -qJD(6) * t26 + t10 * t490 - t329 * t11;
t3 = qJD(6) * t25 + t329 * t10 + t11 * t490;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t523, t376, 0, 0, t321 * qJDD(1), 0.2e1 * t326 * t408, 0, t322 * qJDD(1), 0, 0, t354 * t327, -t354 * t326, t383 * t502 + t348, pkin(1) * t365 + (t419 * t502 + t348) * qJ(2), -t195 * t269 - t258 * t260, -t195 * t362 - t196 * t269 + t256 * t260 - t258 * t261, -qJD(3) * t260 + qJDD(3) * t269, -t196 * t362 + t256 * t261, -qJD(3) * t261 + qJDD(3) * t362, 0, -qJD(3) * t163 + qJDD(3) * t507 - t196 * t303 + t261 * t283 - t282 * t362 - t313 * t523, -qJD(3) * t162 - qJDD(3) * t213 + t195 * t303 - t260 * t283 + t269 * t282 + t381, t129 * t362 - t130 * t269 - t162 * t256 + t163 * t258 + t195 * t507 - t196 * t213 + t200 * t260 - t201 * t261 - t376, t129 * t213 + t201 * t162 + t130 * t507 - t200 * t163 - t282 * t303 - g(1) * (-t303 * t333 + t336 * t475) - g(2) * (t333 * t475 + t290) -t140 * t443 + t218 * t359 (t216 * t335 + t218 * t331) * t260 + (t460 - t459 + (t216 * t331 - t218 * t335) * qJD(4)) * t269, t140 * t362 + t172 * t269 + t218 * t261 + t245 * t359, t135 * t269 + t216 * t360, t141 * t362 - t187 * t444 - t216 * t261 - t245 * t360, -t187 * t362 + t245 * t261, -g(1) * t247 - g(2) * t249 + t112 * t261 + t126 * t444 + t138 * t187 - t141 * t507 + t163 * t216 + t188 * t360 + t245 * t70 - t362 * t45, -g(1) * t246 - g(2) * t248 - t113 * t261 + t126 * t443 - t139 * t187 + t140 * t507 + t163 * t218 + t188 * t359 - t245 * t69 + t362 * t44, t138 * t140 - t139 * t141 - t216 * t69 - t218 * t70 + t371 * t260 + (-t331 * t44 - t335 * t45 + (t112 * t331 - t113 * t335) * qJD(4)) * t269 - t381, -t481 + t112 * t70 + t113 * t69 - t126 * t507 + t45 * t138 + t44 * t139 + t188 * t163 + (-g(1) * t475 - g(2) * t377) * t336 + (-g(1) * (-t303 - t377) - g(2) * t475) * t333, -t179 * t64 - t370 * t78, t78 * t150 + t64 * t178 - t179 * t364 - t370 * t79, t179 * t184 - t240 * t78 + t261 * t370 + t362 * t64, t150 * t79 + t178 * t364, -t150 * t261 - t178 * t184 - t79 * t240 + t362 * t364, -t184 * t362 + t240 * t261, -g(1) * t229 - g(2) * t231 + t127 * t150 + t142 * t79 + t164 * t364 + t17 * t240 + t71 * t178 + t67 * t184 + t47 * t261 - t362 * t9, -g(1) * t228 - g(2) * t230 + t127 * t370 - t142 * t78 - t16 * t240 - t164 * t64 + t179 * t71 - t184 * t68 - t261 * t48 + t362 * t8, -t16 * t150 - t17 * t370 - t8 * t178 - t9 * t179 - t364 * t68 + t47 * t78 - t48 * t79 + t67 * t64 - t381, -t481 + t142 * t127 + t48 * t16 + t71 * t164 + t47 * t17 + t9 * t67 + t8 * t68 + (-g(1) * t392 - g(2) * t367) * t336 + (-g(1) * (-t303 - t367) - g(2) * t392) * t333, -t123 * t23 - t31 * t516, t122 * t23 - t123 * t24 + t31 * t83 - t32 * t516, t123 * t173 + t23 * t362 - t234 * t31 + t261 * t516, t122 * t24 + t32 * t83, -t122 * t173 - t234 * t32 + t24 * t362 - t261 * t83, -t173 * t362 + t234 * t261, -g(1) * t220 - g(2) * t222 + t12 * t261 + t121 * t24 + t122 * t30 + t173 * t25 - t2 * t362 + t234 * t4 + t32 * t88 + t60 * t83, -g(1) * t219 - g(2) * t221 + t1 * t362 - t121 * t23 + t123 * t30 - t13 * t261 - t173 * t26 - t234 * t3 - t31 * t88 + t516 * t60, -t1 * t122 + t12 * t31 - t123 * t2 - t13 * t32 + t23 * t25 - t24 * t26 - t3 * t83 - t4 * t516 - t381, -t481 + t1 * t26 + t12 * t4 + t30 * t121 + t13 * t3 + t2 * t25 + t88 * t60 + (-g(1) * t420 - g(2) * t369) * t336 + (-g(1) * (-t303 - t369) - g(2) * t420) * t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t408, t409, -t388, -qJ(2) * t388 - t365, 0, 0, 0, 0, 0, 0, 0.2e1 * t258 * qJD(3) + t373 (-t256 - t398) * qJD(3) + t402, -t252 - t492, t200 * t258 + t201 * t256 + t282 + t523, 0, 0, 0, 0, 0, 0, t363 - t451, -t245 ^ 2 * t335 - t449 - t453 (t140 - t452) * t335 + t510 + t423, -t188 * t258 + t372 * t331 + t335 * t511 + t523, 0, 0, 0, 0, 0, 0, t374 - t458, -t456 - t495, t378 - t534, -t142 * t258 + t8 * t273 - t344 * t47 - t421 * t48 + t505 * t9 + t523, 0, 0, 0, 0, 0, 0, t379 - t471, -t470 - t497, t382 - t494, t1 * t203 - t12 * t424 - t13 * t425 - t2 * t202 - t258 * t88 + t523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t447, -t252 + t492 (t256 - t398) * qJD(3) + t402, -t447, -t373, qJDD(3), qJD(3) * t201 - t258 * t283 + t130 + t353, t256 * t283 + (t200 + t255) * qJD(3) + t404 - t351, 0, 0, t218 * t384 - t460 (-t140 - t452) * t335 - t510 + t423, t245 * t384 - t449 + t453, t216 * t385 - t459, t363 + t451, -t245 * t258, -pkin(3) * t141 - t112 * t258 - t131 * t245 - t201 * t216 + t358 * t331 + t335 * t531, pkin(3) * t140 + t113 * t258 + t132 * t245 - t201 * t218 - t331 * t531 + t358 * t335, t131 * t218 + t132 * t216 + ((-t141 + t417) * pkin(8) + t372) * t335 + ((qJD(4) * t216 - t140) * pkin(8) - t511) * t331 + t351, -t112 * t131 - t113 * t132 - t188 * t201 + t349 * pkin(3) + (-qJD(4) * t371 - t45 * t331 + t44 * t335 + t351) * pkin(8), -t273 * t64 - t370 * t421, t378 + t534, -t456 + t495, t150 * t344 - t364 * t505, t374 + t458, -t240 * t258, t344 * t142 + t150 * t515 + t214 * t184 + t466 * t240 - t47 * t258 - t310 * t364 + t353 * t318 - t505 * t71, -t142 * t421 - t184 * t215 - t240 * t467 + t258 * t48 + t273 * t71 + t310 * t64 - t317 * t353 + t370 * t380, -t150 * t467 + t214 * t64 - t215 * t364 - t9 * t273 - t344 * t48 - t370 * t466 + t421 * t47 + t505 * t8 + t351, -g(3) * t367 + t142 * t380 + t9 * t214 + t8 * t215 - t71 * t310 + t466 * t47 + t467 * t48 + t376 * (t310 * t312 + t313 * t337) -t203 * t23 - t425 * t516, t382 + t494, -t470 + t497, t202 * t24 + t424 * t83, t379 + t471, -t234 * t258, t119 * t173 - t12 * t258 + t202 * t30 + t234 * t473 + t237 * t24 + t308 * t353 + t422 * t83 + t424 * t88, -t120 * t173 + t13 * t258 + t203 * t30 - t23 * t237 - t234 * t474 - t307 * t353 + t422 * t516 - t425 * t88, -t1 * t202 + t119 * t23 + t12 * t425 - t120 * t24 - t13 * t424 - t2 * t203 - t473 * t516 - t474 * t83 + t351, -g(3) * t369 + t1 * t120 + t2 * t119 + t12 * t473 + t13 * t474 + t30 * t237 + t422 * t88 + t376 * (t279 * t312 + t313 * t324); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t450, -t216 ^ 2 + t218 ^ 2, t216 * t245 - t140, -t450, t218 * t245 - t141, t187, -t189 * t415 + t461 - t188 * t218 + t118 + (-qJD(4) * t161 - t125 + t479) * t331 + t504, g(1) * t249 - g(2) * t247 + t188 * t216 + t335 * t479 - t372, 0, 0, t457, t521, t518, -t457, t496, t184, -t240 * t50 + (-t150 * t218 + t184 * t334 - t240 * t414) * pkin(4) + t499, t240 * t51 + (-t184 * t330 - t218 * t370 - t240 * t413) * pkin(4) + t517, t48 * t370 + t51 * t150 - t47 * t150 + t50 * t370 + (t334 * t64 - t330 * t364 + (-t150 * t334 + t330 * t370) * qJD(5)) * pkin(4), -t47 * t50 - t48 * t51 + (t8 * t330 + t9 * t334 - t142 * t218 + t331 * t479 + (-t330 * t47 + t334 * t48) * qJD(5) + t504) * pkin(4), t476, t522, t520, -t476, t498, t173, -t124 * t83 + t253 * t173 + t234 * t464 + t500, -t124 * t516 - t254 * t173 - t234 * t465 + t519, t23 * t253 - t24 * t254 - t464 * t516 - t465 * t83 + t530, t1 * t254 + t2 * t253 - t88 * t124 - g(1) * (-t284 * t441 + t285 * t333) - g(2) * (-t284 * t442 - t285 * t336) + t284 * t479 + t465 * t13 + t464 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t457, t521, t518, -t457, t496, t184, t240 * t48 + t499, t240 * t47 + t517, 0, 0, t476, t522, t520, -t476, t498, t173, -t14 * t234 + (t173 * t490 - t234 * t412 - t370 * t83) * pkin(5) + t500, t15 * t234 + (-t173 * t329 - t234 * t393 - t370 * t516) * pkin(5) + t519, t14 * t516 + t15 * t83 + (t490 * t23 - t24 * t329 + (t329 * t516 - t490 * t83) * qJD(6)) * pkin(5) + t530, -t12 * t14 - t13 * t15 + (t1 * t329 + t2 * t490 - t88 * t370 + (-t12 * t329 + t13 * t490) * qJD(6) + t501) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t476, t522, t520, -t476, t498, t173, t13 * t234 + t500, t12 * t234 + t519, 0, 0;];
tau_reg  = t5;
