% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRR6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR6_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t108 = cos(qJ(3));
t76 = sin(pkin(11));
t97 = pkin(7) + qJ(2);
t61 = t97 * t76;
t77 = cos(pkin(11));
t62 = t97 * t77;
t81 = sin(qJ(3));
t36 = t108 * t61 + t81 * t62;
t121 = t36 ^ 2;
t52 = -t108 * t77 + t81 * t76;
t49 = t52 ^ 2;
t79 = sin(qJ(5));
t80 = sin(qJ(4));
t83 = cos(qJ(5));
t84 = cos(qJ(4));
t57 = t79 * t80 - t83 * t84;
t69 = -t84 * pkin(4) - pkin(3);
t42 = t57 * pkin(5) + t69;
t120 = 0.2e1 * t42;
t119 = -0.2e1 * t52;
t118 = 0.2e1 * t52;
t67 = -t77 * pkin(2) - pkin(1);
t117 = 0.2e1 * t67;
t116 = 0.2e1 * t69;
t115 = 0.2e1 * t77;
t114 = -pkin(9) - pkin(8);
t113 = t52 * pkin(4);
t112 = t52 * pkin(5);
t78 = sin(qJ(6));
t111 = t78 * pkin(5);
t110 = t79 * pkin(4);
t82 = cos(qJ(6));
t70 = t82 * pkin(5);
t54 = t108 * t76 + t81 * t77;
t59 = t79 * t84 + t83 * t80;
t26 = t59 * t54;
t30 = t52 * pkin(3) - t54 * pkin(8) + t67;
t38 = t108 * t62 - t81 * t61;
t18 = t84 * t30 - t80 * t38;
t98 = t84 * t54;
t10 = -pkin(9) * t98 + t113 + t18;
t99 = t84 * t38;
t11 = t99 + (-pkin(9) * t54 + t30) * t80;
t100 = t83 * t11;
t7 = t79 * t10 + t100;
t5 = -t26 * pkin(10) + t7;
t109 = t82 * t5;
t71 = t83 * pkin(4);
t102 = t80 * t54;
t28 = -t79 * t102 + t83 * t98;
t17 = -t78 * t26 + t82 * t28;
t33 = t82 * t57 + t78 * t59;
t107 = t17 * t33;
t106 = t28 * t57;
t35 = -t78 * t57 + t82 * t59;
t105 = t35 * t52;
t104 = t59 * t52;
t103 = t80 * t52;
t101 = t80 * t84;
t72 = t76 ^ 2;
t73 = t77 ^ 2;
t96 = t72 + t73;
t74 = t80 ^ 2;
t75 = t84 ^ 2;
t95 = t74 + t75;
t94 = t54 * t119;
t93 = t82 * t110;
t92 = t80 * t98;
t6 = t83 * t10 - t79 * t11;
t4 = -t28 * pkin(10) + t112 + t6;
t1 = t82 * t4 - t78 * t5;
t63 = t114 * t80;
t64 = t114 * t84;
t40 = t83 * t63 + t79 * t64;
t68 = t71 + pkin(5);
t45 = -t78 * t110 + t82 * t68;
t22 = pkin(4) * t102 + t36;
t91 = -pkin(3) * t54 - pkin(8) * t52;
t2 = t78 * t4 + t109;
t19 = t80 * t30 + t99;
t90 = t18 * t84 + t19 * t80;
t89 = -t18 * t80 + t19 * t84;
t41 = t79 * t63 - t83 * t64;
t56 = t59 ^ 2;
t55 = t57 ^ 2;
t50 = t54 ^ 2;
t47 = t84 * t52;
t46 = t78 * t68 + t93;
t39 = t57 * t52;
t32 = t35 ^ 2;
t31 = t33 ^ 2;
t25 = -t57 * pkin(10) + t41;
t24 = -t59 * pkin(10) + t40;
t21 = t33 * t52;
t20 = t59 * t26;
t15 = t82 * t26 + t78 * t28;
t14 = t26 * pkin(5) + t22;
t13 = t78 * t24 + t82 * t25;
t12 = t82 * t24 - t78 * t25;
t8 = t35 * t15;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t72, t76 * t115, 0, t73, 0, 0, pkin(1) * t115, -0.2e1 * pkin(1) * t76, 0.2e1 * t96 * qJ(2), t96 * qJ(2) ^ 2 + pkin(1) ^ 2, t50, t94, 0, t49, 0, 0, t52 * t117, t54 * t117, 0.2e1 * t36 * t54 - 0.2e1 * t38 * t52, t38 ^ 2 + t67 ^ 2 + t121, t75 * t50, -0.2e1 * t50 * t101, t98 * t118, t74 * t50, t80 * t94, t49, 0.2e1 * t36 * t102 + 0.2e1 * t18 * t52, -0.2e1 * t19 * t52 + 0.2e1 * t36 * t98, -0.2e1 * t90 * t54, t18 ^ 2 + t19 ^ 2 + t121, t28 ^ 2, -0.2e1 * t28 * t26, t28 * t118, t26 ^ 2, -t26 * t118, t49, 0.2e1 * t22 * t26 + 0.2e1 * t6 * t52, 0.2e1 * t22 * t28 - 0.2e1 * t7 * t52, -0.2e1 * t7 * t26 - 0.2e1 * t6 * t28, t22 ^ 2 + t6 ^ 2 + t7 ^ 2, t17 ^ 2, -0.2e1 * t17 * t15, t17 * t118, t15 ^ 2, t15 * t119, t49, 0.2e1 * t1 * t52 + 0.2e1 * t14 * t15, 0.2e1 * t14 * t17 - 0.2e1 * t2 * t52, -0.2e1 * t1 * t17 - 0.2e1 * t2 * t15, t1 ^ 2 + t14 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, t76, 0, -pkin(1), 0, 0, 0, 0, 0, 0, t52, t54, 0, t67, 0, 0, 0, 0, 0, 0, t47, -t103, -t95 * t54, t90, 0, 0, 0, 0, 0, 0, -t39, -t104, -t20 + t106, -t6 * t57 + t7 * t59, 0, 0, 0, 0, 0, 0, -t21, -t105, -t8 + t107, -t1 * t33 + t2 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56 + t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 + t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, 0, -t36, -t38, 0, 0, t92 (-t74 + t75) * t54, t103, -t92, t47, 0, -t36 * t84 + t80 * t91, t36 * t80 + t84 * t91, t89, -t36 * pkin(3) + pkin(8) * t89, t28 * t59, -t20 - t106, t104, t26 * t57, -t39, 0, t22 * t57 + t69 * t26 + t40 * t52, t22 * t59 + t69 * t28 - t41 * t52, -t41 * t26 - t40 * t28 - t7 * t57 - t6 * t59, t22 * t69 + t6 * t40 + t7 * t41, t17 * t35, -t8 - t107, t105, t15 * t33, -t21, 0, t12 * t52 + t14 * t33 + t42 * t15, -t13 * t52 + t14 * t35 + t42 * t17, -t1 * t35 - t12 * t17 - t13 * t15 - t2 * t33, t1 * t12 + t2 * t13 + t14 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57 * t40 + t59 * t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33 * t12 + t35 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t74, 0.2e1 * t101, 0, t75, 0, 0, 0.2e1 * pkin(3) * t84, -0.2e1 * pkin(3) * t80, 0.2e1 * t95 * pkin(8), t95 * pkin(8) ^ 2 + pkin(3) ^ 2, t56, -0.2e1 * t59 * t57, 0, t55, 0, 0, t57 * t116, t59 * t116, -0.2e1 * t40 * t59 - 0.2e1 * t41 * t57, t40 ^ 2 + t41 ^ 2 + t69 ^ 2, t32, -0.2e1 * t35 * t33, 0, t31, 0, 0, t33 * t120, t35 * t120, -0.2e1 * t12 * t35 - 0.2e1 * t13 * t33, t12 ^ 2 + t13 ^ 2 + t42 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, -t102, t52, t18, -t19, 0, 0, 0, 0, t28, 0, -t26, t52, t52 * t71 + t6, -t100 + (-t10 - t113) * t79 (-t26 * t79 - t28 * t83) * pkin(4) (t6 * t83 + t7 * t79) * pkin(4), 0, 0, t17, 0, -t15, t52, t45 * t52 + t1, -t46 * t52 - t2, -t46 * t15 - t45 * t17, t1 * t45 + t2 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, -t80, 0, 0, 0, 0, 0, 0, 0, 0, -t57, -t59, 0 (-t57 * t83 + t59 * t79) * pkin(4), 0, 0, 0, 0, 0, 0, -t33, -t35, 0, -t33 * t45 + t35 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t84, 0, -t80 * pkin(8), -t84 * pkin(8), 0, 0, 0, 0, t59, 0, -t57, 0, t40, -t41 (-t57 * t79 - t59 * t83) * pkin(4) (t40 * t83 + t41 * t79) * pkin(4), 0, 0, t35, 0, -t33, 0, t12, -t13, -t46 * t33 - t45 * t35, t12 * t45 + t13 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t71, -0.2e1 * t110, 0 (t79 ^ 2 + t83 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t45, -0.2e1 * t46, 0, t45 ^ 2 + t46 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, t52, t6, -t7, 0, 0, 0, 0, t17, 0, -t15, t52, t52 * t70 + t1, -t109 + (-t4 - t112) * t78 (-t15 * t78 - t17 * t82) * pkin(5) (t1 * t82 + t2 * t78) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57, -t59, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t35, 0 (-t33 * t82 + t35 * t78) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t57, 0, t40, -t41, 0, 0, 0, 0, t35, 0, -t33, 0, t12, -t13 (-t33 * t78 - t35 * t82) * pkin(5) (t12 * t82 + t13 * t78) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t71, -t110, 0, 0, 0, 0, 0, 0, 0, 1, t45 + t70, -t93 + (-pkin(5) - t68) * t78, 0 (t45 * t82 + t46 * t78) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t70, -0.2e1 * t111, 0 (t78 ^ 2 + t82 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, -t15, t52, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t35, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, 0, t12, -t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t45, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t70, -t111, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
