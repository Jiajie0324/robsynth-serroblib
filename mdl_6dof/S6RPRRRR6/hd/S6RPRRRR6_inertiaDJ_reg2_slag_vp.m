% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR6_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:14:34
% EndTime: 2019-03-09 07:14:51
% DurationCPUTime: 6.34s
% Computational Cost: add. (12695->386), mult. (27817->664), div. (0->0), fcn. (28594->10), ass. (0->171)
t130 = sin(qJ(4));
t125 = t130 ^ 2;
t131 = cos(qJ(4));
t126 = t131 ^ 2;
t250 = (t125 - t126) * qJD(4);
t244 = cos(qJ(5));
t204 = t244 * qJD(5);
t261 = -qJD(4) * t244 - t204;
t127 = sin(pkin(11));
t128 = cos(pkin(11));
t242 = sin(qJ(3));
t245 = cos(qJ(3));
t106 = t127 * t242 - t128 * t245;
t168 = t106 * qJD(3);
t107 = t127 * t245 + t128 * t242;
t222 = qJD(4) * t131;
t210 = t107 * t222;
t252 = -t130 * t168 + t210;
t247 = -pkin(9) - pkin(8);
t195 = t247 * t244;
t179 = t130 * t195;
t241 = sin(qJ(5));
t214 = t241 * t131;
t78 = t214 * t247 + t179;
t108 = t130 * t244 + t214;
t236 = pkin(7) + qJ(2);
t256 = t236 * t245;
t260 = qJD(2) * t242 + qJD(3) * t256;
t257 = t236 * t242;
t259 = -qJD(2) * t245 + qJD(3) * t257;
t258 = -0.4e1 * t107;
t55 = -t127 * t259 + t128 * t260;
t47 = pkin(4) * t252 + t55;
t139 = -t127 * t260 - t128 * t259;
t120 = -pkin(2) * t128 - pkin(1);
t172 = pkin(3) * t106 - pkin(8) * t107 + t120;
t255 = -qJD(4) * t172 - t139;
t152 = -t127 * t257 + t128 * t256;
t99 = t107 * qJD(3);
t254 = -t99 * pkin(3) - pkin(8) * t168 + qJD(4) * t152;
t159 = t131 * t168;
t223 = qJD(4) * t130;
t211 = t107 * t223;
t253 = -t159 - t211;
t251 = t106 * t223 - t131 * t99;
t175 = t106 * t222 + t130 * t99;
t154 = t241 * t168;
t155 = t244 * t168;
t215 = t244 * t131;
t194 = t107 * t215;
t200 = -t130 * t155 - t131 * t154 + (qJD(4) + qJD(5)) * t194;
t202 = t241 * qJD(4);
t208 = qJD(5) * t241;
t227 = t107 * t130;
t249 = -(t202 + t208) * t227 + t200;
t114 = t131 * t202;
t196 = -t130 * t261 + t131 * t208 + t114;
t248 = 0.2e1 * t99;
t246 = t99 * pkin(5);
t243 = cos(qJ(6));
t129 = sin(qJ(6));
t240 = pkin(4) * t129;
t121 = t241 * t130;
t182 = t121 - t215;
t73 = t108 * t243 - t129 * t182;
t190 = t130 * t202;
t76 = t130 * t208 + t131 * t261 + t190;
t37 = qJD(6) * t73 - t129 * t76 + t196 * t243;
t173 = t243 * t182;
t72 = t108 * t129 + t173;
t239 = t72 * t37;
t221 = qJD(6) * t129;
t36 = qJD(6) * t173 + t108 * t221 + t129 * t196 + t243 * t76;
t238 = t73 * t36;
t77 = t127 * t256 + t128 * t257;
t237 = t77 * t55;
t32 = t107 * t196 - t130 * t154 + t131 * t155;
t231 = t108 * t107;
t63 = -t107 * t121 + t194;
t46 = -t129 * t231 + t243 * t63;
t12 = qJD(6) * t46 - t129 * t32 + t243 * t249;
t184 = t243 * t231;
t45 = t129 * t63 + t184;
t235 = -t12 * t73 + t36 * t45;
t234 = -t108 * t249 + t231 * t76;
t226 = t107 * t131;
t49 = -t130 * t152 + t131 * t172;
t137 = t106 * pkin(4) - pkin(9) * t226 + t49;
t34 = t241 * t137;
t50 = t130 * t172 + t131 * t152;
t41 = -pkin(9) * t227 + t50;
t21 = t244 * t41 + t34;
t230 = t108 * t76;
t109 = t247 * t121;
t79 = -t215 * t247 + t109;
t220 = -0.2e1 * pkin(3) * qJD(4);
t75 = t106 * t248;
t219 = t244 * pkin(4);
t218 = pkin(4) * t223;
t217 = pkin(5) * t221;
t122 = -t131 * pkin(4) - pkin(3);
t209 = t130 * t222;
t207 = qJD(6) * t243;
t201 = -0.2e1 * t217;
t199 = pkin(4) * t204;
t198 = pkin(4) * t208;
t197 = pkin(5) * t207;
t103 = t107 ^ 2;
t193 = t103 * t209;
t192 = t219 + pkin(5);
t191 = t243 * t241;
t189 = 0.2e1 * (t127 ^ 2 + t128 ^ 2) * qJD(2);
t35 = t244 * t137;
t20 = -t241 * t41 + t35;
t11 = qJD(6) * t184 + t129 * t249 + t221 * t63 + t243 * t32;
t183 = -t11 * t72 + t37 * t46;
t181 = t106 * t36 - t73 * t99;
t180 = t106 * t76 - t108 * t99;
t25 = t130 * t255 - t131 * t254;
t133 = t99 * pkin(4) - pkin(9) * t253 + t25;
t24 = t130 * t254 + t131 * t255;
t134 = -pkin(9) * t252 - t24;
t7 = -qJD(5) * t34 + t133 * t244 - t134 * t241 - t204 * t41;
t132 = t32 * pkin(10) + t246 + t7;
t6 = -qJD(5) * t35 - t133 * t241 - t134 * t244 + t208 * t41;
t140 = -pkin(10) * t249 - t6;
t169 = pkin(5) * t106 - pkin(10) * t63 + t20;
t153 = t243 * t169;
t16 = -pkin(10) * t231 + t21;
t1 = -qJD(6) * t153 - t129 * t132 - t140 * t243 + t16 * t221;
t174 = t243 * t192;
t56 = pkin(4) * t227 + t77;
t166 = -0.2e1 * t168;
t165 = t182 * t196;
t52 = -qJD(4) * t179 - qJD(5) * t78 - t247 * t114;
t162 = t125 * t168;
t161 = t126 * t168;
t158 = t106 * t168;
t157 = t129 * t169;
t156 = t130 * t159;
t151 = -t25 * t130 - t131 * t24 + (-t130 * t50 - t131 * t49) * qJD(4);
t67 = -qJD(6) * t174 - t243 * t199 + (qJD(6) * t241 + t208) * t240;
t149 = t182 * t32 - t196 * t63;
t147 = -t108 * pkin(10) + t78;
t9 = t16 * t243 + t157;
t144 = t129 * t147;
t143 = -pkin(10) * t196 - t52;
t142 = t243 * t147;
t141 = (qJD(5) + qJD(6)) * (-t129 * t244 - t191) * pkin(4);
t138 = -t129 * t140 + t132 * t243;
t53 = -t79 * qJD(5) + (t131 * t195 - t109) * qJD(4);
t136 = t76 * pkin(10) + t53;
t135 = -qJD(6) * t157 - t16 * t207 + t138;
t98 = pkin(4) * t191 + t129 * t192;
t97 = -t240 * t241 + t174;
t90 = pkin(5) * t182 + t122;
t68 = t141 - t217;
t66 = pkin(5) * t196 + t218;
t62 = -pkin(10) * t182 + t79;
t54 = t107 * t250 + t156;
t48 = -t106 * t196 - t182 * t99;
t44 = pkin(5) * t231 + t56;
t43 = t243 * t62 + t144;
t42 = -t129 * t62 + t142;
t23 = -t106 * t37 - t72 * t99;
t18 = pkin(5) * t249 + t47;
t14 = -qJD(6) * t144 - t129 * t143 + t136 * t243 - t207 * t62;
t13 = -qJD(6) * t142 - t129 * t136 - t143 * t243 + t221 * t62;
t8 = -t129 * t16 + t153;
t2 = -qJD(6) * t9 + t138;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189, qJ(2) * t189, t107 * t166, -0.2e1 * t107 * t99 + 0.2e1 * t158, 0, t75, 0, 0, t120 * t248, t120 * t166, 0.2e1 * t55 * t107 - 0.2e1 * t152 * t99 + 0.2e1 * (-qJD(3) * t77 - t139) * t106, 0.2e1 * t139 * t152 + 0.2e1 * t237, -0.2e1 * t107 * t161 - 0.2e1 * t193, 0.2e1 * t103 * t250 - t156 * t258, -0.2e1 * t106 * t211 - 0.2e1 * t131 * t158 + 0.2e1 * t226 * t99, -0.2e1 * t107 * t162 + 0.2e1 * t193, -0.2e1 * t106 * t210 + 0.2e1 * t130 * t158 - 0.2e1 * t227 * t99, t75, 0.2e1 * t25 * t106 + 0.2e1 * t55 * t227 + 0.2e1 * t252 * t77 + 0.2e1 * t49 * t99, 0.2e1 * t24 * t106 + 0.2e1 * t55 * t226 + 0.2e1 * t253 * t77 - 0.2e1 * t50 * t99, -0.2e1 * t25 * t226 + 0.2e1 * t24 * t227 - 0.2e1 * t252 * t50 - 0.2e1 * t253 * t49, -0.2e1 * t24 * t50 + 0.2e1 * t25 * t49 + 0.2e1 * t237, -0.2e1 * t63 * t32, 0.2e1 * t231 * t32 - 0.2e1 * t249 * t63, -0.2e1 * t106 * t32 + 0.2e1 * t63 * t99, 0.2e1 * t231 * t249, -0.2e1 * t106 * t249 - 0.2e1 * t231 * t99, t75, 0.2e1 * t7 * t106 + 0.2e1 * t20 * t99 + 0.2e1 * t231 * t47 + 0.2e1 * t249 * t56, 0.2e1 * t106 * t6 - 0.2e1 * t21 * t99 - 0.2e1 * t32 * t56 + 0.2e1 * t47 * t63, 0.2e1 * t20 * t32 - 0.2e1 * t21 * t249 + 0.2e1 * t231 * t6 - 0.2e1 * t7 * t63, 0.2e1 * t20 * t7 - 0.2e1 * t21 * t6 + 0.2e1 * t47 * t56, -0.2e1 * t46 * t11, 0.2e1 * t11 * t45 - 0.2e1 * t12 * t46, -0.2e1 * t106 * t11 + 0.2e1 * t46 * t99, 0.2e1 * t45 * t12, -0.2e1 * t106 * t12 - 0.2e1 * t45 * t99, t75, 0.2e1 * t106 * t2 + 0.2e1 * t12 * t44 + 0.2e1 * t18 * t45 + 0.2e1 * t8 * t99, 0.2e1 * t1 * t106 - 0.2e1 * t11 * t44 + 0.2e1 * t18 * t46 - 0.2e1 * t9 * t99, 0.2e1 * t1 * t45 + 0.2e1 * t11 * t8 - 0.2e1 * t12 * t9 - 0.2e1 * t2 * t46, -0.2e1 * t1 * t9 + 0.2e1 * t18 * t44 + 0.2e1 * t2 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, -t168, 0, 0, 0, 0, 0, 0, 0, 0, -t251, -t175 (t125 + t126) * t168, -t24 * t130 + t25 * t131 + (-t130 * t49 + t131 * t50) * qJD(4), 0, 0, 0, 0, 0, 0, t48, t180, -t149 + t234, -t108 * t6 - t182 * t7 - t196 * t20 - t21 * t76, 0, 0, 0, 0, 0, 0, t23, t181, t183 + t235, -t1 * t73 - t2 * t72 - t36 * t9 - t37 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t165 - 0.2e1 * t230, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t238 + 0.2e1 * t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, 0, -t99, 0, -t55, -t139, 0, 0, -t54, t209 * t258 - t161 + t162, t175, t54, -t251, 0, -pkin(3) * t252 - pkin(8) * t175 - t55 * t131 + t77 * t223, -pkin(3) * t253 + pkin(8) * t251 + t55 * t130 + t77 * t222, t151, -t55 * pkin(3) + pkin(8) * t151, -t108 * t32 - t63 * t76, t149 + t234, -t180, t182 * t249 + t196 * t231, t48, 0, t53 * t106 + t122 * t249 + t182 * t47 + t196 * t56 + t218 * t231 + t78 * t99, t106 * t52 + t108 * t47 - t122 * t32 + t218 * t63 - t56 * t76 - t79 * t99, -t7 * t108 + t182 * t6 - t196 * t21 + t20 * t76 + t231 * t52 - t249 * t79 + t78 * t32 - t53 * t63, t122 * t47 + t20 * t53 - t21 * t52 + t218 * t56 - t6 * t79 + t7 * t78, -t11 * t73 - t36 * t46, -t183 + t235, -t181, t12 * t72 + t37 * t45, t23, 0, t106 * t14 + t12 * t90 + t18 * t72 + t37 * t44 + t42 * t99 + t45 * t66, t106 * t13 - t11 * t90 + t18 * t73 - t36 * t44 - t43 * t99 + t46 * t66, t1 * t72 + t11 * t42 - t12 * t43 + t13 * t45 - t14 * t46 - t2 * t73 + t36 * t8 - t37 * t9, -t1 * t43 - t13 * t9 + t14 * t8 + t18 * t90 + t2 * t42 + t44 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108 * t52 - t182 * t53 - t196 * t78 - t76 * t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13 * t73 - t14 * t72 - t36 * t43 - t37 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t209, -0.2e1 * t250, 0, -0.2e1 * t209, 0, 0, t130 * t220, t131 * t220, 0, 0, -0.2e1 * t230, -0.2e1 * t108 * t196 + 0.2e1 * t182 * t76, 0, 0.2e1 * t165, 0, 0, 0.2e1 * t122 * t196 + 0.2e1 * t182 * t218, 0.2e1 * t108 * t218 - 0.2e1 * t122 * t76, -0.2e1 * t108 * t53 + 0.2e1 * t182 * t52 - 0.2e1 * t196 * t79 + 0.2e1 * t76 * t78, 0.2e1 * t122 * t218 - 0.2e1 * t52 * t79 + 0.2e1 * t53 * t78, -0.2e1 * t238, 0.2e1 * t36 * t72 - 0.2e1 * t37 * t73, 0, 0.2e1 * t239, 0, 0, 0.2e1 * t37 * t90 + 0.2e1 * t66 * t72, -0.2e1 * t36 * t90 + 0.2e1 * t66 * t73, 0.2e1 * t13 * t72 - 0.2e1 * t14 * t73 + 0.2e1 * t36 * t42 - 0.2e1 * t37 * t43, -0.2e1 * t13 * t43 + 0.2e1 * t14 * t42 + 0.2e1 * t66 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t253, 0, -t252, t99, t25, t24, 0, 0, 0, 0, -t32, 0, -t249, t99, -t106 * t198 + t219 * t99 + t7 (-t106 * t204 - t241 * t99) * pkin(4) + t6 (t244 * t32 + t241 * (t107 * t190 - t200) + (-t244 * t231 + (t227 * t241 + t63) * t241) * qJD(5)) * pkin(4) (-t241 * t6 + t244 * t7 + (-t20 * t241 + t21 * t244) * qJD(5)) * pkin(4), 0, 0, -t11, 0, -t12, t99, t68 * t106 + t97 * t99 + t135, t106 * t67 - t98 * t99 + t1, t11 * t97 - t12 * t98 + t45 * t67 - t46 * t68, -t1 * t98 + t2 * t97 - t67 * t9 + t68 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t223, -t222, 0, 0, 0, 0, 0, 0, 0, 0, -t196, t76, 0 (-t76 * t241 - t196 * t244 + (t108 * t244 + t182 * t241) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, -t37, t36, 0, -t36 * t98 - t37 * t97 - t67 * t73 - t68 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t222, 0, -t223, 0, -pkin(8) * t222, pkin(8) * t223, 0, 0, 0, 0, -t76, 0, -t196, 0, t53, t52 (t244 * t76 - t241 * t196 + (t108 * t241 - t182 * t244) * qJD(5)) * pkin(4) (-t241 * t52 + t244 * t53 + (-t241 * t78 + t244 * t79) * qJD(5)) * pkin(4), 0, 0, -t36, 0, -t37, 0, t14, t13, t36 * t97 - t37 * t98 + t67 * t72 - t68 * t73, -t13 * t98 + t14 * t97 + t42 * t68 - t43 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t198, -0.2e1 * t199, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t68, 0.2e1 * t67, 0, -0.2e1 * t67 * t98 + 0.2e1 * t68 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, -t249, t99, t7, t6, 0, 0, 0, 0, -t11, 0, -t12, t99, -t106 * t217 + t243 * t246 + t135 (-t106 * t207 - t129 * t99) * pkin(5) + t1 (t243 * t11 - t12 * t129 + (t129 * t46 - t243 * t45) * qJD(6)) * pkin(5) (t243 * t2 - t1 * t129 + (-t129 * t8 + t243 * t9) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t196, t76, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t36, 0 (-t243 * t37 - t129 * t36 + (t129 * t72 + t243 * t73) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, 0, -t196, 0, t53, t52, 0, 0, 0, 0, -t36, 0, -t37, 0, t14, t13 (t243 * t36 - t129 * t37 + (t129 * t73 - t243 * t72) * qJD(6)) * pkin(5) (t243 * t14 - t129 * t13 + (-t129 * t42 + t243 * t43) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, -t199, 0, 0, 0, 0, 0, 0, 0, 0, t141 + t201, -t197 + t67, 0 (t243 * t68 - t129 * t67 + (-t129 * t97 + t243 * t98) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t201, -0.2e1 * t197, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, -t12, t99, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, -t37, 0, t14, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, t67, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t217, -t197, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
