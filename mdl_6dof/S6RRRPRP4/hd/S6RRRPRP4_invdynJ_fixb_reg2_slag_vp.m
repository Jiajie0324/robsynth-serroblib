% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRP4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP4_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:46:04
% EndTime: 2019-03-09 16:46:20
% DurationCPUTime: 8.88s
% Computational Cost: add. (11236->666), mult. (24639->753), div. (0->0), fcn. (17335->10), ass. (0->349)
t240 = sin(qJ(3));
t241 = sin(qJ(2));
t244 = cos(qJ(2));
t453 = cos(qJ(3));
t173 = t240 * t244 + t453 * t241;
t388 = qJD(1) * t173;
t481 = qJD(5) + t388;
t347 = t481 ^ 2;
t239 = sin(qJ(5));
t243 = cos(qJ(5));
t234 = qJD(2) + qJD(3);
t455 = pkin(8) + pkin(7);
t184 = t455 * t241;
t175 = qJD(1) * t184;
t438 = qJD(2) * pkin(2);
t170 = -t175 + t438;
t150 = t453 * t170;
t185 = t455 * t244;
t176 = qJD(1) * t185;
t401 = t240 * t176;
t123 = -t150 + t401;
t381 = qJD(4) + t123;
t443 = t388 * pkin(4);
t382 = t443 + t381;
t456 = pkin(3) + pkin(9);
t84 = -t456 * t234 + t382;
t364 = t453 * t244;
t334 = qJD(1) * t364;
t387 = qJD(1) * t241;
t363 = t240 * t387;
t161 = -t334 + t363;
t441 = t244 * pkin(2);
t221 = pkin(1) + t441;
t183 = t221 * qJD(1);
t281 = -qJ(4) * t388 - t183;
t87 = t456 * t161 + t281;
t41 = t239 * t84 + t243 * t87;
t33 = qJ(6) * t481 + t41;
t350 = t481 * t33;
t437 = t481 * t41;
t137 = -t243 * t161 + t234 * t239;
t345 = t481 * t137;
t139 = t161 * t239 + t234 * t243;
t471 = t481 * t139;
t233 = qJDD(2) + qJDD(3);
t132 = t234 * t173;
t353 = qJDD(1) * t453;
t205 = t244 * t353;
t378 = t241 * qJDD(1);
t320 = t240 * t378 - t205;
t251 = t132 * qJD(1) + t320;
t384 = qJD(5) * t243;
t385 = qJD(5) * t239;
t71 = -t161 * t384 - t243 * t233 + t234 * t385 - t239 * t251;
t72 = qJD(5) * t139 + t239 * t233 - t243 * t251;
t10 = (t72 + t471) * t243 - (t71 + t345) * t239;
t400 = t240 * t241;
t324 = t234 * t400;
t377 = t244 * qJDD(1);
t337 = t234 * t334 + t240 * t377 + t241 * t353;
t105 = qJD(1) * t324 - t337;
t99 = -qJDD(5) + t105;
t94 = t243 * t99;
t486 = -t239 * t347 - t94;
t484 = t234 * t388;
t483 = t239 * t471;
t172 = -t364 + t400;
t435 = t243 * t71;
t67 = t72 * t239;
t480 = t172 * ((t137 * t243 + t139 * t239) * qJD(5) + t67 + t435) + (t137 * t239 - t139 * t243) * t132;
t167 = t453 * t176;
t124 = t240 * t170 + t167;
t444 = t161 * pkin(4);
t104 = t124 - t444;
t227 = t234 * qJ(4);
t92 = t227 + t104;
t53 = t137 * pkin(5) - t139 * qJ(6) + t92;
t379 = qJD(1) * qJD(2);
t354 = t244 * t379;
t135 = qJDD(2) * pkin(2) + t455 * (-t354 - t378);
t355 = t241 * t379;
t136 = t455 * (-t355 + t377);
t356 = qJD(3) * t453;
t386 = qJD(3) * t240;
t338 = -t240 * t135 - t453 * t136 - t170 * t356 + t176 * t386;
t222 = t233 * qJ(4);
t467 = -t234 * qJD(4) - t222;
t54 = t338 + t467;
t28 = -pkin(4) * t251 - t54;
t7 = t72 * pkin(5) + t71 * qJ(6) - t139 * qJD(6) + t28;
t479 = -t7 * t239 - t53 * t384;
t478 = t28 * t239 + t92 * t384;
t130 = t137 * t384;
t402 = t239 * t456;
t477 = t130 * t456 + t72 * t402;
t476 = -t243 * t7 + t53 * t385;
t474 = t72 - t471;
t473 = -t234 * t137 + t486;
t298 = -t173 * qJ(4) - t221;
t106 = t456 * t172 + t298;
t141 = t453 * t184 + t185 * t240;
t116 = pkin(4) * t173 + t141;
t470 = t243 * t106 + t239 * t116;
t128 = -t175 * t240 + t167;
t373 = pkin(2) * t386;
t469 = t128 - t373;
t322 = -pkin(5) * t243 - qJ(6) * t239;
t297 = -pkin(4) + t322;
t468 = pkin(5) * t384 + qJ(6) * t385 - t243 * qJD(6) - t297 * t388 + qJD(4) + t401;
t365 = t453 * t175;
t129 = -t365 - t401;
t339 = pkin(2) * t356;
t202 = t339 + qJD(4);
t393 = -t202 + t129;
t238 = qJ(2) + qJ(3);
t228 = sin(t238);
t229 = cos(t238);
t391 = t229 * pkin(3) + t228 * qJ(4);
t252 = -t484 - t320;
t230 = t239 * pkin(5);
t428 = qJ(6) * t243;
t466 = -t428 + t230;
t242 = sin(qJ(1));
t245 = cos(qJ(1));
t327 = g(1) * t245 + g(2) * t242;
t465 = qJDD(1) * t221;
t374 = t453 * pkin(2);
t220 = -t374 - pkin(3);
t211 = -pkin(9) + t220;
t342 = t239 * t373;
t413 = t211 * t239;
t464 = -t211 * t130 - t137 * t342 - t72 * t413;
t210 = pkin(2) * t355;
t292 = t105 * qJ(4) - qJD(4) * t388 + t210;
t427 = qJDD(1) * pkin(1);
t19 = -pkin(2) * t377 - pkin(3) * t252 + pkin(9) * t251 + t292 - t427;
t62 = t453 * t135 - t240 * t136 - t170 * t386 - t176 * t356;
t300 = qJDD(4) - t62;
t27 = -t105 * pkin(4) - t456 * t233 + t300;
t352 = t239 * t19 - t243 * t27 + t87 * t384 + t84 * t385;
t463 = -t352 + t437;
t357 = qJD(2) * t453;
t131 = t324 + (-t356 - t357) * t244;
t424 = t132 * t243;
t293 = t172 * t385 - t424;
t414 = t172 * t243;
t462 = -t131 * t137 + t173 * t72 + t293 * t481 + t99 * t414;
t142 = -t240 * t184 + t453 * t185;
t326 = g(1) * t242 - g(2) * t245;
t301 = t455 * t357;
t335 = qJD(2) * t240 * t455;
t88 = t184 * t356 + t185 * t386 + t241 * t301 + t244 * t335;
t461 = t142 * t233 + t228 * t326 - t88 * t234;
t399 = t242 * t243;
t403 = t239 * t245;
t153 = t228 * t403 + t399;
t398 = t243 * t245;
t404 = t239 * t242;
t155 = -t228 * t404 + t398;
t217 = g(3) * t229;
t376 = t243 * t19 + t239 * t27 + t84 * t384;
t460 = -g(1) * t153 + g(2) * t155 + (-qJD(5) * t87 + t217) * t239 + t376;
t225 = t241 * t438;
t291 = t131 * qJ(4) - t173 * qJD(4) + t225;
t49 = t456 * t132 + t291;
t89 = qJD(3) * t142 - t241 * t335 + t244 * t301;
t70 = -t131 * pkin(4) + t89;
t14 = -qJD(5) * t470 - t239 * t49 + t243 * t70;
t458 = t139 ^ 2;
t457 = t388 ^ 2;
t454 = pkin(5) * t99;
t452 = pkin(2) * t240;
t451 = pkin(2) * t241;
t450 = pkin(3) * t233;
t449 = pkin(5) * t161;
t446 = g(2) * t455;
t216 = g(3) * t228;
t445 = g(3) * t244;
t214 = t229 * pkin(9);
t3 = qJDD(6) + t352 + t454;
t2 = t3 * t243;
t4 = -t385 * t87 + t376;
t440 = t4 * t239;
t120 = pkin(3) * t388 + qJ(4) * t161;
t156 = t388 * pkin(9);
t100 = t120 + t156;
t56 = t243 * t100 + t239 * t104;
t439 = qJ(6) * t99;
t93 = t239 * t99;
t436 = t243 * t33;
t434 = t456 * t71;
t433 = t456 * t99;
t26 = t28 * t243;
t432 = -t130 - t67;
t431 = t339 + t365 + t468;
t430 = -t150 + t468;
t109 = t128 - t444;
t115 = pkin(2) * t387 + t120;
t90 = t115 + t156;
t52 = t239 * t109 + t243 * t90;
t429 = pkin(7) * qJDD(1);
t426 = t124 * t234;
t425 = t132 * t239;
t423 = t139 * t137;
t421 = t481 * t161;
t420 = t161 * t132;
t419 = t161 * t388;
t417 = t388 * t239;
t416 = t388 * t243;
t415 = t172 * t239;
t412 = t228 * t242;
t411 = t228 * t243;
t410 = t228 * t245;
t409 = t229 * t242;
t408 = t229 * t243;
t407 = t229 * t245;
t406 = t234 * t139;
t405 = t234 * t161;
t397 = t245 * t455;
t40 = -t239 * t87 + t243 * t84;
t396 = qJD(6) - t40;
t186 = qJ(4) * t409;
t375 = t229 * t230;
t395 = t242 * t375 + t186;
t188 = qJ(4) * t407;
t394 = t245 * t375 + t188;
t392 = t443 - t393;
t236 = t241 ^ 2;
t237 = t244 ^ 2;
t390 = t236 - t237;
t389 = t236 + t237;
t383 = qJD(5) * t456;
t372 = t229 * t399;
t371 = t229 * t398;
t249 = qJD(1) ^ 2;
t370 = t241 * t249 * t244;
t369 = -g(1) * t371 - g(2) * t372 - g(3) * t411;
t189 = t245 * t221;
t368 = pkin(3) * t407 + qJ(4) * t410 + t189;
t367 = t214 + t391;
t366 = -g(1) * t410 - g(2) * t412 + t217;
t362 = t211 * t384;
t361 = t243 * t383;
t360 = t137 ^ 2 - t458;
t359 = -t161 ^ 2 + t457;
t1 = qJD(6) * t481 + t4 - t439;
t32 = -pkin(5) * t481 + t396;
t358 = -t32 * t388 - t1;
t349 = t481 * t92;
t348 = t245 * pkin(4) + t397;
t343 = -t2 + t366;
t341 = t243 * t373;
t340 = -t40 * t385 + t366;
t336 = t228 * t230 + t367;
t333 = t241 * t354;
t332 = -g(1) * t409 + g(2) * t407;
t330 = -pkin(3) * t228 - t451;
t152 = -t228 * t398 + t404;
t154 = t228 * t399 + t403;
t329 = -g(1) * t154 - g(2) * t152;
t328 = -g(1) * t155 - g(2) * t153;
t181 = qJ(4) + t466;
t319 = t239 * t33 - t243 * t32;
t318 = t239 * t32 + t436;
t317 = t239 * t41 + t243 * t40;
t316 = -t239 * t40 + t243 * t41;
t313 = -t161 * t32 + t53 * t416 - t479;
t312 = t242 * pkin(4) + pkin(9) * t407 + t368;
t51 = t109 * t243 - t239 * t90;
t310 = t161 * t40 + t92 * t416 + t478;
t55 = -t100 * t239 + t104 * t243;
t309 = -t105 * t173 - t131 * t388;
t64 = -t106 * t239 + t116 * t243;
t114 = -pkin(3) * t234 + t381;
t118 = -t227 - t124;
t307 = t114 * t161 - t118 * t388;
t306 = -t123 * t161 - t124 * t388;
t305 = t131 * t234 - t173 * t233;
t304 = t132 * t234 + t172 * t233;
t299 = t93 + (-t384 - t416) * t481;
t296 = -t221 - t391;
t295 = -0.2e1 * pkin(1) * t379 - pkin(7) * qJDD(2);
t294 = t172 * t384 + t425;
t290 = -t161 * t41 + t26 + t369;
t13 = -t106 * t385 + t116 * t384 + t239 * t70 + t243 * t49;
t287 = -t139 * t373 + t211 * t71;
t286 = -t62 + t366;
t285 = g(1) * t407 + g(2) * t409 + t216 + t338;
t284 = t40 * t417 - t340 - t440;
t282 = t105 * t172 + t131 * t161 - t132 * t388;
t31 = -t137 * t161 + t299;
t278 = t327 * t456;
t277 = -t229 * t327 - t216;
t276 = g(1) * t152 - g(2) * t154 + g(3) * t408 - t352;
t275 = t141 * t233 + t89 * t234 + t332;
t248 = qJD(2) ^ 2;
t273 = -pkin(7) * t248 + t326 + 0.2e1 * t427;
t272 = pkin(1) * t249 + t327 - t429;
t271 = t161 * t33 + t53 * t417 - t369 + t476;
t270 = t129 * t161 - t388 * t469;
t269 = -t183 * t161 + t285;
t268 = t183 * t388 - t286;
t112 = t161 * pkin(3) + t281;
t266 = t112 * t388 + qJDD(4) + t286;
t265 = -t112 * t161 - t285 - t467;
t264 = qJD(5) * t318 + t1 * t239 - t2;
t263 = qJD(5) * t316 - t243 * t352 + t440;
t262 = t137 * t293 - t72 * t414;
t261 = -t141 * t105 + t88 * t161 + t388 * t89 - t327;
t260 = (-t137 * t388 + t71) * t243 + t483 + t432;
t259 = t139 * t53 + qJDD(6) - t276;
t78 = -t234 * t363 + t337 + t405;
t258 = (-g(1) * (t296 - t214) - t446) * t242;
t257 = (-qJD(5) * t211 * t481 + t277) * t239 - t211 * t94;
t256 = (t383 * t481 + t277) * t239 + t243 * t433;
t253 = -g(1) * t188 - g(2) * t186 - g(3) * t367 + t228 * t278;
t213 = qJ(4) + t452;
t169 = t181 + t452;
t158 = t210 - t465;
t151 = t161 * qJ(6);
t121 = pkin(3) * t172 + t298;
t117 = -t172 * pkin(4) + t142;
t91 = pkin(5) * t139 + qJ(6) * t137;
t80 = t252 + t484;
t79 = t251 - t484;
t77 = t105 - t405;
t76 = t172 * t297 + t142;
t74 = pkin(3) * t132 + t291;
t69 = -t132 * pkin(4) - t88;
t59 = t300 - t450;
t58 = -pkin(5) * t173 - t64;
t57 = qJ(6) * t173 + t470;
t50 = -t131 * t481 - t173 * t99;
t45 = -t55 + t449;
t44 = -t151 + t56;
t43 = -t51 + t449;
t42 = -t151 + t52;
t37 = -t71 + t345;
t35 = -t465 + t292 + (t400 * qJDD(1) - t205 + t484) * pkin(3);
t29 = t139 * t161 + t486;
t22 = t137 * t416 - t432;
t21 = t243 * t345 + t67;
t20 = -t435 - t483;
t16 = t139 * t294 - t71 * t415;
t15 = (qJD(5) * t466 - qJD(6) * t239) * t172 + t297 * t132 - t88;
t12 = -t139 * t131 - t71 * t173 + t294 * t481 - t99 * t415;
t9 = t131 * pkin(5) - t14;
t8 = -qJ(6) * t131 + qJD(6) * t173 + t13;
t5 = [0, 0, 0, 0, 0, qJDD(1), t326, t327, 0, 0, qJDD(1) * t236 + 0.2e1 * t333, 0.2e1 * t241 * t377 - 0.2e1 * t379 * t390, qJDD(2) * t241 + t244 * t248, qJDD(1) * t237 - 0.2e1 * t333, qJDD(2) * t244 - t241 * t248, 0, t241 * t295 + t244 * t273, -t241 * t273 + t244 * t295, 0.2e1 * t389 * t429 - t327, -g(1) * (-pkin(1) * t242 + pkin(7) * t245) - g(2) * (pkin(1) * t245 + pkin(7) * t242) + (pkin(7) ^ 2 * t389 + pkin(1) ^ 2) * qJDD(1), t309, t173 * t252 + t282, -t305, -t172 * t252 + t420, -t304, 0, -t183 * t132 + t158 * t172 + t161 * t225 - t221 * t251 - t275, t221 * t105 + t183 * t131 + t158 * t173 + t225 * t388 - t461, -t123 * t131 - t124 * t132 + t142 * t252 + t172 * t338 - t62 * t173 + t261, -t338 * t142 - t124 * t88 - t62 * t141 + t123 * t89 - t158 * t221 - t183 * t225 - g(1) * (-t242 * t221 + t397) - g(2) * (t242 * t455 + t189) 0, t305, t304, t309, -t173 * t251 + t282, t172 * t251 + t420, -t114 * t131 + t118 * t132 - t142 * t251 + t54 * t172 + t59 * t173 + t261, -t112 * t132 + t121 * t252 - t74 * t161 - t35 * t172 + t275, t121 * t105 + t112 * t131 - t35 * t173 - t388 * t74 + t461, t35 * t121 + t112 * t74 - t54 * t142 + t118 * t88 + t59 * t141 + t114 * t89 - g(1) * t397 - g(2) * t368 + (-g(1) * t296 - t446) * t242, t16, -t480, t12, t262, -t462, t50, -t92 * t424 + t117 * t72 - t40 * t131 + t69 * t137 + t14 * t481 - t352 * t173 - t64 * t99 + (t385 * t92 - t26) * t172 + t328, -t117 * t71 - t13 * t481 + t41 * t131 + t69 * t139 + t172 * t478 - t4 * t173 + t92 * t425 + t470 * t99 - t329, -t13 * t137 - t139 * t14 + t64 * t71 - t470 * t72 + t316 * t132 + (-qJD(5) * t317 + t239 * t352 + t243 * t4) * t172 - t332, -g(1) * t348 - g(2) * t312 + t28 * t117 + t41 * t13 + t40 * t14 - t352 * t64 + t4 * t470 + t92 * t69 + t258, t16, t12, t480, t50, t462, t262, t32 * t131 + t15 * t137 + t172 * t476 - t3 * t173 - t53 * t424 - t481 * t9 + t58 * t99 + t76 * t72 + t328, -t137 * t8 + t139 * t9 - t57 * t72 - t58 * t71 + t318 * t132 + (-qJD(5) * t319 + t1 * t243 + t239 * t3) * t172 - t332, t1 * t173 - t33 * t131 - t15 * t139 + t172 * t479 - t53 * t425 + t481 * t8 - t57 * t99 + t76 * t71 + t329, t1 * t57 + t33 * t8 + t7 * t76 + t53 * t15 + t3 * t58 + t32 * t9 - g(1) * (t155 * pkin(5) + t154 * qJ(6) + t348) - g(2) * (pkin(5) * t153 + qJ(6) * t152 + t312) + t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t370, t390 * t249, t378, t370, t377, qJDD(2), t241 * t272 - t445, g(3) * t241 + t244 * t272, 0, 0, t419, t359, t78, -t419, t80, t233, t128 * t234 + (-t161 * t387 + t453 * t233 - t234 * t386) * pkin(2) + t268, t129 * t234 + (-t233 * t240 - t234 * t356 - t387 * t388) * pkin(2) + t269, t105 * t374 - t161 * t339 + t252 * t452 + t270 - t306, -t123 * t128 - t124 * t129 + (t453 * t62 - t445 - t240 * t338 + (t123 * t240 + t453 * t124) * qJD(3) + (qJD(1) * t183 + t327) * t241) * pkin(2), t233, t77, t79, t419, t359, -t419, -t220 * t105 - t202 * t161 - t213 * t251 + t270 + t307, t115 * t161 - t469 * t234 + (-pkin(3) + t220) * t233 + t266, t115 * t388 + t213 * t233 - t234 * t393 + t265, -t54 * t213 + t59 * t220 - t112 * t115 - g(1) * (t245 * t330 + t188) - g(2) * (t242 * t330 + t186) - g(3) * (t391 + t441) + t393 * t118 - t469 * t114, t20, -t10, t29, t22, t31, t421, t213 * t72 + (-t51 + t341) * t481 + t392 * t137 + t257 + t310, -t213 * t71 + (t52 - t362) * t481 + t392 * t139 + (t211 * t99 - t373 * t481 - t349) * t239 + t290, t137 * t52 + (t211 * t385 + t51) * t139 + (t287 - t463) * t243 + t284 + t464, t28 * t213 - t41 * t52 - t40 * t51 + t392 * t92 + (t241 * t327 + t317 * t386 - t445) * pkin(2) + t263 * t211 + t253, t20, t29, t10, t421, -t31, t21, t169 * t72 + (t43 + t341) * t481 + t431 * t137 + t257 + t313, t137 * t42 - t139 * t43 + (-t350 + t287) * t243 + ((t139 * t211 - t32) * qJD(5) + t358) * t239 - t343 + t464, -t99 * t413 + t169 * t71 - t431 * t139 + (t342 - t42 + t362) * t481 + t271, t7 * t169 - t33 * t42 - t32 * t43 - g(1) * t394 - g(2) * t395 - g(3) * (-qJ(6) * t411 + t336) + t431 * t53 + (t319 * t386 - t445) * pkin(2) + t264 * t211 + t327 * (qJ(6) * t408 + t456 * t228 + t451); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t419, t359, t78, -t419, t80, t233, t268 + t426, -t123 * t234 + t269, 0, 0, t233, t77, t79, t419, t359, -t419, pkin(3) * t105 - qJ(4) * t251 - qJD(4) * t161 + t306 + t307, t120 * t161 + t266 - t426 - 0.2e1 * t450, t120 * t388 + t234 * t381 + t222 + t265, -t54 * qJ(4) - t59 * pkin(3) - t112 * t120 - t114 * t124 - g(1) * (-pkin(3) * t410 + t188) - g(2) * (-pkin(3) * t412 + t186) - g(3) * t391 - t381 * t118, t20, -t10, t29, t22, t31, t421, qJ(4) * t72 + t137 * t382 - t481 * t55 + t256 + t310, -qJ(4) * t71 + (t56 + t361) * t481 + t382 * t139 + (-t349 - t433) * t239 + t290, t137 * t56 + (-t239 * t383 + t55) * t139 + (-t463 - t434) * t243 + t284 + t477, t28 * qJ(4) - t263 * t456 + t382 * t92 - t40 * t55 - t41 * t56 + t253, t20, t29, t10, t421, -t31, t21, t137 * t430 + t181 * t72 + t45 * t481 + t256 + t313, t137 * t44 - t139 * t45 + (-t350 - t434) * t243 + ((-t139 * t456 - t32) * qJD(5) + t358) * t239 - t343 + t477, t99 * t402 + t181 * t71 + (-t44 - t361) * t481 - t430 * t139 + t271, t7 * t181 - t33 * t44 - t32 * t45 - g(1) * (-qJ(6) * t371 + t394) - g(2) * (-qJ(6) * t372 + t395) - g(3) * t336 + t430 * t53 + (g(3) * t428 + t278) * t228 - t264 * t456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, t233 - t419, -t234 ^ 2 - t457, t118 * t234 + t266 - t450, 0, 0, 0, 0, 0, 0, t473, -t243 * t347 - t406 + t93, t260, -t92 * t234 + (-t388 * t40 + t4) * t239 + t463 * t243 + t340, 0, 0, 0, 0, 0, 0, t473, t260, -t299 + t406, -t53 * t234 + t481 * t436 + (t32 * t481 + t1) * t239 + t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t423, -t360, t37, -t423, -t474, -t99, -t139 * t92 + t276 + t437, t92 * t137 + t40 * t481 - t460, 0, 0, t423, t37, t360, -t99, t474, -t423, -t137 * t91 - t259 + t437 - 0.2e1 * t454, pkin(5) * t71 - t72 * qJ(6) + (t33 - t41) * t139 + (t32 - t396) * t137, -0.2e1 * t439 - t137 * t53 + t139 * t91 + (0.2e1 * qJD(6) - t40) * t481 + t460, t1 * qJ(6) - t3 * pkin(5) - t53 * t91 - t32 * t41 - g(1) * (-pkin(5) * t152 + qJ(6) * t153) - g(2) * (pkin(5) * t154 - qJ(6) * t155) + t396 * t33 - t322 * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99 + t423, t37, -t458 - t347, t259 + t454 - t350;];
tau_reg  = t5;
