% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:48:01
% EndTime: 2019-05-07 07:48:48
% DurationCPUTime: 33.93s
% Computational Cost: add. (66558->716), mult. (138473->982), div. (0->0), fcn. (96486->8), ass. (0->529)
t1022 = sin(qJ(1));
t1026 = cos(qJ(1));
t1021 = sin(qJ(2));
t1025 = cos(qJ(2));
t1020 = sin(qJ(3));
t1024 = cos(qJ(3));
t1015 = qJDD(2) + qJDD(3);
t1019 = sin(qJ(5));
t1023 = cos(qJ(5));
t1093 = qJD(1) * t1025;
t1071 = qJD(2) * t1093;
t1083 = qJDD(1) * t1021;
t986 = t1071 + t1083;
t1010 = t1025 * qJDD(1);
t1094 = qJD(1) * t1021;
t1072 = qJD(2) * t1094;
t987 = t1010 - t1072;
t1066 = t1020 * t986 - t1024 * t987;
t976 = (t1020 * t1025 + t1021 * t1024) * qJD(1);
t894 = qJD(3) * t976 + t1066;
t1065 = t1019 * t1015 - t1023 * t894;
t968 = qJD(5) + t976;
t1097 = qJD(5) - t968;
t1016 = qJD(2) + qJD(3);
t974 = t1020 * t1094 - t1024 * t1093;
t937 = t1016 * t1023 + t1019 * t974;
t1039 = -t1097 * t937 - t1065;
t935 = t1016 * t1019 - t1023 * t974;
t881 = t937 * t935;
t1054 = t1020 * t987 + t1024 * t986;
t1037 = qJD(3) * t974 - t1054;
t889 = qJDD(5) - t1037;
t811 = -t889 - t881;
t1232 = t1023 * t811;
t1142 = t935 ^ 2;
t966 = t968 ^ 2;
t906 = t966 - t1142;
t758 = t1019 * t906 + t1232;
t686 = t1020 * t1039 + t1024 * t758;
t691 = t1020 * t758 - t1024 * t1039;
t632 = t1021 * t686 + t1025 * t691;
t1238 = t1019 * t811;
t761 = -t1023 * t906 + t1238;
t1305 = t1022 * t632 + t1026 * t761;
t1304 = -t1022 * t761 + t1026 * t632;
t1132 = t976 * t974;
t1216 = t1132 + t1015;
t1251 = t1020 * t1216;
t1014 = t1016 ^ 2;
t1140 = t976 ^ 2;
t946 = t1140 + t1014;
t852 = t1024 * t946 + t1251;
t1250 = t1024 * t1216;
t854 = -t1020 * t946 + t1250;
t775 = t1021 * t854 + t1025 * t852;
t1303 = pkin(7) * t775;
t778 = t1021 * t852 - t1025 * t854;
t1302 = pkin(7) * t778;
t1301 = t1022 * t778;
t916 = t1132 - t1015;
t1266 = t1020 * t916;
t954 = -t1140 + t1014;
t857 = -t1024 * t954 + t1266;
t1265 = t1024 * t916;
t861 = t1020 * t954 + t1265;
t789 = t1021 * t857 - t1025 * t861;
t1300 = t1022 * t789;
t1141 = t974 ^ 2;
t953 = t1141 - t1014;
t859 = t1020 * t953 + t1250;
t864 = -t1024 * t953 + t1251;
t791 = t1021 * t859 + t1025 * t864;
t1299 = t1022 * t791;
t1298 = t1026 * t778;
t1297 = t1026 * t789;
t1296 = t1026 * t791;
t1295 = -pkin(1) * t775 - pkin(2) * t852;
t1294 = t1021 * t691 - t1025 * t686;
t1292 = pkin(8) * t852;
t1291 = pkin(8) * t854;
t1290 = t1021 * t861 + t1025 * t857;
t1289 = t1021 * t864 - t1025 * t859;
t933 = t937 ^ 2;
t1079 = t966 + t933;
t745 = t1019 * t1079 + t1232;
t1288 = pkin(1) * t745;
t1287 = pkin(2) * t745;
t915 = -t1014 - t1141;
t826 = t1020 * t915 - t1265;
t829 = -t1024 * t915 - t1266;
t748 = t1021 * t829 - t1025 * t826;
t1286 = pkin(7) * t748;
t750 = t1021 * t826 + t1025 * t829;
t1285 = pkin(7) * t750;
t1167 = -t1142 - t966;
t1170 = -t881 + t889;
t806 = t1019 * t1170;
t1183 = t1023 * t1167 - t806;
t1096 = qJD(5) + t968;
t1038 = t1096 * t937 + t1065;
t1109 = t1023 * t1170;
t1181 = t1019 * t1167 + t1109;
t1208 = t1020 * t1038 - t1024 * t1181;
t1211 = t1020 * t1181 + t1024 * t1038;
t1244 = -t1021 * t1208 + t1025 * t1211;
t1257 = t1022 * t1183 + t1026 * t1244;
t1284 = pkin(6) * t1257;
t1052 = t1023 * t1015 + t1019 * t894;
t799 = t1097 * t935 - t1052;
t1155 = -t1019 * t799 + t1023 * t1039;
t1153 = t1019 * t1039 + t1023 * t799;
t825 = t933 + t1142;
t1212 = t1020 * t1153 - t1024 * t825;
t1213 = -t1020 * t825 - t1024 * t1153;
t1243 = -t1021 * t1213 + t1025 * t1212;
t1258 = t1022 * t1155 + t1026 * t1243;
t1283 = pkin(6) * t1258;
t1259 = t1022 * t1244 - t1026 * t1183;
t1282 = pkin(6) * t1259;
t1260 = t1022 * t1243 - t1026 * t1155;
t1281 = pkin(6) * t1260;
t743 = -t1023 * t1079 + t1238;
t1280 = t1020 * t743;
t1279 = t1022 * t745;
t1278 = t1022 * t750;
t1276 = t1024 * t743;
t1275 = t1026 * t745;
t1274 = t1026 * t750;
t1138 = pkin(3) + pkin(9);
t1272 = t1138 * t743;
t1271 = t1138 * t745;
t1270 = pkin(1) * t748 - pkin(2) * t826;
t1269 = pkin(4) * t743 - qJ(4) * t745;
t1242 = t1021 * t1212 + t1025 * t1213;
t1268 = pkin(7) * t1242;
t1245 = t1021 * t1211 + t1025 * t1208;
t1267 = pkin(7) * t1245;
t1264 = -pkin(1) * t1242 - pkin(2) * t1213 + qJ(4) * t825 + t1138 * t1153;
t1263 = -pkin(1) * t1245 - pkin(2) * t1208 + t1138 * t1181;
t1262 = -pkin(1) * t1155 + pkin(7) * t1243;
t1261 = -pkin(1) * t1183 + pkin(7) * t1244;
t1255 = pkin(8) * t826;
t1254 = pkin(8) * t829;
t1253 = pkin(8) * t1208;
t1252 = pkin(8) * t1213;
t1247 = -pkin(2) * t1155 + pkin(8) * t1212;
t1246 = -pkin(2) * t1183 + pkin(8) * t1211;
t822 = -qJD(5) * t935 + t1052;
t910 = t935 * t968;
t797 = t822 - t910;
t1239 = qJ(6) * t797;
t872 = t933 - t1142;
t1236 = t1020 * t872;
t1230 = t1024 * t872;
t908 = -t933 + t966;
t1196 = -t1023 * t908 - t806;
t1225 = t1020 * t1196;
t1195 = t1019 * t908 - t1109;
t1223 = t1022 * t1195;
t1221 = t1024 * t1196;
t1219 = t1026 * t1195;
t1217 = t1138 * t1183;
t1215 = -pkin(4) * t825 - t1138 * t1155;
t1107 = t1023 * t968;
t821 = -qJD(5) * t937 - t1065;
t1059 = t1019 * t821 - t1107 * t935;
t1125 = t1019 * t968;
t1078 = t935 * t1125;
t1047 = -t1023 * t821 - t1078;
t1077 = t1020 * t881;
t1151 = t1024 * t1047 - t1077;
t1075 = t1024 * t881;
t1152 = -t1020 * t1047 - t1075;
t1173 = -t1021 * t1151 + t1025 * t1152;
t1210 = t1022 * t1173 + t1026 * t1059;
t1043 = (-t1019 * t937 + t1023 * t935) * t968;
t899 = t937 * t1107;
t1061 = t899 + t1078;
t1154 = t1020 * t889 + t1024 * t1061;
t1156 = -t1020 * t1061 + t1024 * t889;
t1171 = -t1021 * t1154 + t1025 * t1156;
t1209 = t1022 * t1171 + t1026 * t1043;
t1207 = -t1022 * t1059 + t1026 * t1173;
t1206 = -t1022 * t1043 + t1026 * t1171;
t1205 = pkin(4) * t1181 - qJ(4) * t1183;
t1204 = 2 * qJD(4);
t1158 = -t1141 - t1140;
t1202 = pkin(1) * t1158;
t1200 = pkin(2) * t1158;
t960 = t974 * t1016;
t851 = t1037 - t960;
t1067 = t1037 + t960;
t1129 = t1016 * t976;
t1018 = t1025 ^ 2;
t1028 = qJD(1) ^ 2;
t996 = t1022 * g(1) - t1026 * g(2);
t1048 = qJDD(1) * pkin(1) + t996;
t1049 = qJD(2) * pkin(2) - pkin(8) * t1094;
t898 = t987 * pkin(2) + (pkin(8) * t1018 + pkin(7)) * t1028 - t1049 * t1094 + t1048;
t1197 = pkin(3) * t1129 - t1204 * t976 - t898;
t1192 = t1022 * t1158;
t1159 = -t1140 + t1141;
t1191 = t1022 * t1159;
t1188 = t1026 * t1158;
t1187 = t1026 * t1159;
t785 = -t1019 * t822 - t899;
t1046 = -t1020 * t785 + t1075;
t1060 = t1024 * t785 + t1077;
t1146 = -t1021 * t1060 + t1025 * t1046;
t786 = -t1023 * t822 + t1125 * t937;
t1184 = t1022 * t1146 + t1026 * t786;
t1041 = (-t1020 * t974 - t1024 * t976) * t1016;
t1042 = (t1020 * t976 - t1024 * t974) * t1016;
t1149 = -t1021 * t1041 + t1025 * t1042;
t1182 = -t1026 * t1015 + t1022 * t1149;
t1074 = t1026 * t1132;
t1089 = t1016 * t1024;
t1056 = -t1020 * t1037 + t1089 * t976;
t1090 = t1016 * t1020;
t1057 = -t1024 * t1037 - t1090 * t976;
t1143 = -t1021 * t1056 + t1025 * t1057;
t1180 = t1022 * t1143 - t1074;
t1044 = t1020 * t894 + t1089 * t974;
t1058 = -t1024 * t894 + t1090 * t974;
t1148 = -t1021 * t1058 + t1025 * t1044;
t1179 = t1022 * t1148 + t1074;
t1076 = t1022 * t1132;
t1178 = t1026 * t1143 + t1076;
t1177 = t1026 * t1148 - t1076;
t1176 = t1015 * t1022 + t1026 * t1149;
t1175 = -t1022 * t786 + t1026 * t1146;
t636 = pkin(4) * t1153 - qJ(4) * t1155;
t1174 = t1021 * t1152 + t1025 * t1151;
t1172 = t1021 * t1156 + t1025 * t1154;
t1169 = qJ(4) * t1067;
t1157 = -t821 * pkin(5) - t1239;
t1150 = t1021 * t1042 + t1025 * t1041;
t1147 = t1021 * t1044 + t1025 * t1058;
t1145 = t1021 * t1046 + t1025 * t1060;
t1144 = t1021 * t1057 + t1025 * t1056;
t1139 = 2 * qJD(6);
t1137 = pkin(3) * t1020;
t1136 = pkin(3) * t1024;
t1135 = pkin(5) * t1019;
t1134 = pkin(5) * t1023;
t1133 = t937 * t968;
t1029 = t1169 + t1197;
t950 = pkin(4) * t976 - pkin(9) * t1016;
t678 = -pkin(4) * t1141 + t1138 * t894 - t976 * t950 + t1029;
t1087 = t1021 * t1028;
t1095 = qJD(1) * qJD(2);
t997 = g(1) * t1026 + g(2) * t1022;
t979 = -pkin(1) * t1028 + qJDD(1) * pkin(7) - t997;
t1117 = t1021 * t979;
t871 = qJDD(2) * pkin(2) - t986 * pkin(8) - t1117 + (pkin(2) * t1087 + pkin(8) * t1095 - g(3)) * t1025;
t1012 = t1018 * t1028;
t949 = -t1021 * g(3) + t1025 * t979;
t877 = -pkin(2) * t1012 + t987 * pkin(8) - qJD(2) * t1049 + t949;
t804 = t1020 * t877 - t1024 * t871;
t922 = pkin(3) * t974 - qJ(4) * t976;
t1045 = -t1015 * pkin(3) - t1014 * qJ(4) + t976 * t922 + qJDD(4) + t804;
t702 = -pkin(4) * t851 + pkin(9) * t916 + t1045;
t629 = t1019 * t702 + t1023 * t678;
t1131 = -t1019 * t678 + t1023 * t702;
t805 = t1020 * t871 + t1024 * t877;
t1050 = t1014 * pkin(3) + t974 * t922 - t805;
t1036 = t1015 * qJ(4) - t1050;
t1032 = -t894 * pkin(4) - pkin(9) * t1141 + t1036;
t703 = (t1204 + t950) * t1016 + t1032;
t1128 = t1019 * t703;
t1127 = t1019 * t1038;
t1123 = t1020 * t898;
t718 = t1020 * t805 - t1024 * t804;
t1119 = t1021 * t718;
t978 = t1028 * pkin(7) + t1048;
t1118 = t1021 * t978;
t1003 = t1025 * t1087;
t994 = qJDD(2) + t1003;
t1116 = t1021 * t994;
t995 = qJDD(2) - t1003;
t1115 = t1021 * t995;
t1113 = t1023 * t703;
t1112 = t1023 * t1038;
t843 = t894 + t1129;
t1105 = t1024 * t843;
t1104 = t1024 * t898;
t1100 = t1025 * t718;
t1099 = t1025 * t978;
t1098 = t1025 * t995;
t1092 = qJD(4) * t1016;
t1017 = t1021 ^ 2;
t1088 = t1017 * t1028;
t1086 = -qJD(3) + t1016;
t1085 = qJD(3) + t1016;
t1084 = t1017 + t1018;
t1082 = qJDD(1) * t1022;
t1081 = qJDD(1) * t1026;
t1070 = qJ(4) * t1020 + pkin(2);
t1069 = qJ(6) * t1019 + pkin(4);
t1068 = qJ(6) * t1023 - qJ(4);
t719 = t1020 * t804 + t1024 * t805;
t948 = t1025 * g(3) + t1117;
t876 = t1021 * t948 + t1025 * t949;
t939 = -t1022 * t996 - t1026 * t997;
t1064 = t1022 * t1003;
t1063 = t1026 * t1003;
t991 = -t1022 * t1028 + t1081;
t1062 = -pkin(6) * t991 - g(3) * t1022;
t870 = pkin(5) * t935 - qJ(6) * t937;
t1055 = t889 * qJ(6) + t968 * t1139 - t935 * t870 + t629;
t575 = t1019 * t629 + t1023 * t1131;
t576 = -t1019 * t1131 + t1023 * t629;
t874 = t1021 * t949 - t1025 * t948;
t1053 = t1022 * t997 - t1026 * t996;
t1040 = -t889 * pkin(5) - t966 * qJ(6) + t870 * t937 + qJDD(6) - t1131;
t1034 = -t1085 * t974 + t1054;
t1033 = -t1096 * t935 + t1052;
t737 = t1036 + 0.2e1 * t1092;
t1006 = -0.2e1 * t1092;
t1031 = -t1016 * t950 + t937 * t1139 + t1006 - t1032 - t1157;
t1030 = -t894 * pkin(3) - t1197;
t1027 = qJD(2) ^ 2;
t1001 = -t1012 - t1027;
t1000 = t1012 - t1027;
t999 = -t1027 - t1088;
t998 = t1027 - t1088;
t993 = t1012 - t1088;
t992 = t1012 + t1088;
t990 = t1026 * t1028 + t1082;
t989 = t1084 * qJDD(1);
t988 = t1010 - 0.2e1 * t1072;
t985 = 0.2e1 * t1071 + t1083;
t983 = t1025 * t994;
t982 = t1084 * t1095;
t969 = -pkin(6) * t990 + g(3) * t1026;
t952 = -t1017 * t1095 + t1025 * t986;
t951 = -t1018 * t1095 - t1021 * t987;
t945 = -t1021 * t999 - t1098;
t944 = -t1021 * t998 + t983;
t943 = t1001 * t1025 - t1116;
t942 = t1000 * t1025 - t1115;
t941 = t1025 * t999 - t1115;
t940 = t1001 * t1021 + t983;
t930 = -t1022 * t992 + t1026 * t989;
t929 = t1022 * t989 + t1026 * t992;
t927 = -t1021 * t985 + t1025 * t988;
t914 = t1022 * t985 + t1026 * t945;
t913 = -t1022 * t988 + t1026 * t943;
t912 = t1022 * t945 - t1026 * t985;
t911 = t1022 * t943 + t1026 * t988;
t901 = -pkin(7) * t941 - t1099;
t900 = -pkin(7) * t940 - t1118;
t892 = -pkin(1) * t941 + t949;
t891 = -pkin(1) * t940 + t948;
t846 = t1086 * t974 + t1054;
t845 = -t894 + t1129;
t844 = t1086 * t976 - t1066;
t842 = t1085 * t976 + t1066;
t831 = -t1022 * t978 + t1026 * t876;
t830 = t1022 * t876 + t1026 * t978;
t802 = -t1104 + t1292;
t801 = t822 + t910;
t792 = -t1123 - t1255;
t774 = -t1020 * t1034 - t1105;
t773 = t1020 * t1067 - t1024 * t842;
t772 = -t1020 * t851 + t1024 * t845;
t771 = t1020 * t846 + t1024 * t844;
t770 = -t1020 * t843 + t1024 * t1034;
t769 = -t1020 * t842 - t1024 * t1067;
t768 = t1020 * t845 + t1024 * t851;
t767 = t1020 * t844 - t1024 * t846;
t736 = pkin(2) * t1067 - t1123 - t1291;
t727 = -pkin(2) * t842 + t1104 - t1254;
t726 = t1030 - t1169;
t725 = -t1022 * t1067 + t1298;
t724 = -t1022 * t1034 - t1298;
t723 = t1026 * t1067 + t1301;
t722 = t1026 * t1034 - t1301;
t721 = -qJ(4) * t1158 + t1045;
t720 = -pkin(3) * t1158 + t737;
t717 = -t1022 * t843 + t1274;
t716 = t1022 * t842 - t1274;
t715 = t1026 * t843 + t1278;
t714 = -t1026 * t842 - t1278;
t711 = t1019 * t1033 + t1112;
t710 = -t1019 * t797 - t1112;
t707 = -t1023 * t1033 + t1127;
t706 = t1023 * t797 - t1127;
t705 = (t843 + t894) * pkin(3) + t1029;
t704 = (-t1067 + t1034) * qJ(4) + t1030;
t699 = pkin(2) * t898 + pkin(8) * t719;
t698 = -t1021 * t770 + t1025 * t774;
t697 = -t1021 * t769 + t1025 * t773;
t696 = -t1021 * t768 + t1025 * t772;
t695 = -t1021 * t767 + t1025 * t771;
t694 = t1021 * t772 + t1025 * t768;
t693 = t1021 * t771 + t1025 * t767;
t692 = t1024 * t801 - t1225;
t689 = -t1024 * t799 - t1225;
t688 = t1020 * t801 + t1221;
t685 = -t1020 * t799 + t1221;
t682 = t1024 * t1033 + t1280;
t680 = t1020 * t1033 - t1276;
t675 = -t1024 * t797 - t1280;
t673 = -t1020 * t797 + t1276;
t671 = -t1295 + t805;
t670 = -t1020 * t706 - t1230;
t669 = -t1020 * t707 + t1230;
t668 = t1024 * t706 - t1236;
t667 = t1024 * t707 + t1236;
t666 = t1026 * t696 + t1192;
t665 = t1026 * t695 + t1192;
t664 = t1022 * t696 - t1188;
t663 = t1022 * t695 - t1188;
t658 = t1270 + t804;
t657 = t1020 * t1045 + t1024 * t737;
t656 = t1020 * t737 - t1024 * t1045;
t655 = -pkin(8) * t768 - t718;
t650 = t1024 * t704 - t1034 * t1137 - t1292;
t649 = qJ(4) * t1105 - t1020 * t705 + t1255;
t648 = pkin(8) * t772 - t1200 + t719;
t647 = -pkin(1) * t694 - pkin(2) * t768;
t646 = -pkin(3) * t946 + t1006 + (-t1015 - t1216) * qJ(4) + t1050 + t1295;
t645 = -t1021 * t736 + t1025 * t802 + t1303;
t644 = t1025 * t719 - t1119;
t643 = t1021 * t719 + t1100;
t642 = t1291 + t1020 * t704 + (pkin(2) + t1136) * t1034;
t641 = -pkin(3) * t916 + qJ(4) * t915 - t1045 - t1270;
t640 = t1024 * t705 + t1070 * t843 + t1254;
t639 = -t1021 * t727 + t1025 * t792 + t1286;
t638 = -t1022 * t898 + t1026 * t644;
t637 = t1022 * t644 + t1026 * t898;
t635 = (pkin(5) * t968 - (2 * qJD(6))) * t937 + t703 + t1157;
t634 = -pkin(1) * t693 - pkin(2) * t767 + pkin(3) * t846 - qJ(4) * t844;
t633 = -t1021 * t688 + t1025 * t692;
t630 = -t1021 * t685 + t1025 * t689;
t626 = -pkin(8) * t767 - t1020 * t720 + t1024 * t721;
t625 = -t1021 * t680 + t1025 * t682;
t623 = t1021 * t682 + t1025 * t680;
t621 = -t1021 * t673 + t1025 * t675;
t619 = t1021 * t675 + t1025 * t673;
t617 = pkin(8) * t771 + t1020 * t721 + t1024 * t720 - t1200;
t616 = -t1021 * t668 + t1025 * t670;
t615 = -t1021 * t667 + t1025 * t669;
t614 = (-t1038 - t1133) * pkin(5) + t1031;
t613 = -pkin(5) * t1133 + t1031 + t1239;
t608 = -pkin(1) * t643 - pkin(2) * t718;
t607 = -t1021 * t656 + t1025 * t657;
t606 = t1021 * t657 + t1025 * t656;
t605 = pkin(4) * t1033 - t1128 - t1271;
t603 = -t966 * pkin(5) + t1055;
t602 = pkin(4) * t1038 + t1113 - t1217;
t601 = -pkin(8) * t656 + (qJ(4) * t1024 - t1137) * t726;
t600 = t1026 * t625 + t1279;
t598 = t1022 * t625 - t1275;
t596 = pkin(5) * t799 + qJ(6) * t1039 + t636;
t595 = t1026 * t621 - t1279;
t593 = t1022 * t621 + t1275;
t591 = qJ(6) * t825 + t1040;
t590 = (t825 - t966) * pkin(5) + t1055;
t589 = t1269 - t629;
t588 = -t1022 * t726 + t1026 * t607;
t587 = t1022 * t607 + t1026 * t726;
t586 = t1131 + t1205;
t581 = pkin(8) * t657 + (t1070 + t1136) * t726;
t580 = -pkin(7) * t643 - pkin(8) * t1100 - t1021 * t699;
t579 = -t1021 * t642 + t1025 * t650 - t1303;
t578 = -t1021 * t640 + t1025 * t649 - t1286;
t577 = -pkin(7) * t694 - t1021 * t648 + t1025 * t655;
t574 = pkin(5) * t1170 + qJ(6) * t1167 - t1040 + t1205;
t573 = pkin(5) * t933 - qJ(6) * t811 + t1055 - t1269;
t572 = -t1023 * t614 + t1038 * t1069 - t1217;
t571 = -t1019 * t613 + (-pkin(4) - t1134) * t797 + t1271;
t570 = -pkin(1) * t606 - pkin(2) * t656 + pkin(3) * t1045 - qJ(4) * t737;
t569 = t1020 * t575 + t1024 * t703;
t568 = t1020 * t703 - t1024 * t575;
t567 = t1019 * t1040 + t1023 * t603;
t566 = t1019 * t603 - t1023 * t1040;
t565 = -pkin(7) * t693 - t1021 * t617 + t1025 * t626;
t564 = -pkin(1) * t623 - pkin(2) * t680 - qJ(4) * t1033 - t1113 + t1272;
t563 = -qJ(4) * t1038 - t1128 + t1263;
t562 = t1215 - t576;
t561 = -pkin(8) * t680 - t1020 * t605 + t1024 * t589;
t560 = -t1020 * t602 + t1024 * t586 - t1253;
t559 = t1020 * t566 + t1024 * t635;
t558 = t1020 * t635 - t1024 * t566;
t557 = pkin(8) * t682 + t1020 * t589 + t1024 * t605 - t1287;
t556 = t1020 * t586 + t1024 * t602 + t1246;
t555 = t1019 * t614 + t1038 * t1068 + t1263;
t554 = -pkin(1) * t619 - pkin(2) * t673 - t1023 * t613 + (qJ(4) + t1135) * t797 - t1272;
t553 = -t1019 * t591 - t1023 * t590 + t1215;
t552 = pkin(4) * t575 - qJ(4) * t576;
t551 = -pkin(7) * t606 - t1021 * t581 + t1025 * t601;
t550 = pkin(4) * t703 - t1138 * t576;
t549 = -t1020 * t562 + t1024 * t636 - t1252;
t548 = -t1020 * t572 + t1024 * t574 - t1253;
t547 = t1264 + t575;
t546 = -pkin(8) * t673 - t1020 * t571 + t1024 * t573;
t545 = -t1021 * t568 + t1025 * t569;
t544 = t1021 * t569 + t1025 * t568;
t543 = t1020 * t636 + t1024 * t562 + t1247;
t542 = t1020 * t574 + t1024 * t572 + t1246;
t541 = pkin(8) * t675 + t1020 * t573 + t1024 * t571 + t1287;
t540 = t1019 * t590 - t1023 * t591 + t1264;
t539 = -t1020 * t553 + t1024 * t596 - t1252;
t538 = t1020 * t596 + t1024 * t553 + t1247;
t537 = t1022 * t576 + t1026 * t545;
t536 = t1022 * t545 - t1026 * t576;
t535 = -t1021 * t558 + t1025 * t559;
t534 = t1021 * t559 + t1025 * t558;
t533 = pkin(4) * t566 - pkin(5) * t1040 - qJ(4) * t567 + qJ(6) * t603;
t532 = -t1138 * t567 + (t1069 + t1134) * t635;
t531 = -pkin(7) * t623 - t1021 * t557 + t1025 * t561;
t530 = -t1021 * t556 + t1025 * t560 - t1267;
t529 = t1022 * t567 + t1026 * t535;
t528 = t1022 * t535 - t1026 * t567;
t527 = -t1021 * t543 + t1025 * t549 - t1268;
t526 = -t1021 * t542 + t1025 * t548 - t1267;
t525 = -pkin(8) * t568 - t1020 * t550 + t1024 * t552;
t524 = -pkin(7) * t619 - t1021 * t541 + t1025 * t546;
t523 = -pkin(1) * t544 - pkin(2) * t568 - qJ(4) * t703 + t1138 * t575;
t522 = -pkin(2) * t576 + pkin(8) * t569 + t1020 * t552 + t1024 * t550;
t521 = -t1021 * t538 + t1025 * t539 - t1268;
t520 = -pkin(1) * t534 - pkin(2) * t558 + t1138 * t566 + (t1068 - t1135) * t635;
t519 = -pkin(8) * t558 - t1020 * t532 + t1024 * t533;
t518 = -pkin(2) * t567 + pkin(8) * t559 + t1020 * t533 + t1024 * t532;
t517 = -pkin(7) * t544 - t1021 * t522 + t1025 * t525;
t516 = -pkin(7) * t534 - t1021 * t518 + t1025 * t519;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t990, -t991, 0, t939, 0, 0, 0, 0, 0, 0, t913, t914, t930, t831, 0, 0, 0, 0, 0, 0, t716, t725, t666, t638, 0, 0, 0, 0, 0, 0, t665, t717, t724, t588, 0, 0, 0, 0, 0, 0, t1257, t600, t1258, t537, 0, 0, 0, 0, 0, 0, t1257, t1258, t595, t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t991, -t990, 0, -t1053, 0, 0, 0, 0, 0, 0, t911, t912, t929, t830, 0, 0, 0, 0, 0, 0, t714, t723, t664, t637, 0, 0, 0, 0, 0, 0, t663, t715, t722, t587, 0, 0, 0, 0, 0, 0, t1259, t598, t1260, t536, 0, 0, 0, 0, 0, 0, t1259, t1260, t593, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t940, t941, 0, t874, 0, 0, 0, 0, 0, 0, -t748, -t775, t694, t643, 0, 0, 0, 0, 0, 0, t693, t748, t775, t606, 0, 0, 0, 0, 0, 0, t1245, t623, t1242, t544, 0, 0, 0, 0, 0, 0, t1245, t1242, t619, t534; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t991, 0, -t990, 0, t1062, -t969, t1053, pkin(6) * t1053, t1026 * t952 - t1064, -t1022 * t993 + t1026 * t927, t1021 * t1082 + t1026 * t944, t1026 * t951 + t1064, t1010 * t1022 + t1026 * t942, qJDD(2) * t1022 + t1026 * t982, -pkin(6) * t911 - t1022 * t891 + t1026 * t900, -pkin(6) * t912 - t1022 * t892 + t1026 * t901, -pkin(6) * t929 - t1026 * t874, -pkin(6) * t830 + (pkin(1) * t1022 - pkin(7) * t1026) * t874, t1178, t1026 * t697 - t1191, -t1022 * t851 + t1297, t1177, t1022 * t844 - t1296, t1176, -pkin(6) * t714 - t1022 * t658 + t1026 * t639, -pkin(6) * t723 - t1022 * t671 + t1026 * t645, -pkin(6) * t664 - t1022 * t647 + t1026 * t577, -pkin(6) * t637 - t1022 * t608 + t1026 * t580, t1176, -t1022 * t846 - t1297, -t1022 * t845 + t1296, t1178, t1026 * t698 - t1191, t1177, -pkin(6) * t663 - t1022 * t634 + t1026 * t565, -pkin(6) * t715 - t1022 * t641 + t1026 * t578, -pkin(6) * t722 - t1022 * t646 + t1026 * t579, -pkin(6) * t587 - t1022 * t570 + t1026 * t551, t1175, -t1022 * t711 + t1026 * t615, t1026 * t630 - t1223, t1207, -t1304, t1206, -t1022 * t563 + t1026 * t530 - t1282, -pkin(6) * t598 - t1022 * t564 + t1026 * t531, -t1022 * t547 + t1026 * t527 - t1281, -pkin(6) * t536 - t1022 * t523 + t1026 * t517, t1175, t1026 * t633 - t1223, -t1022 * t710 + t1026 * t616, t1206, t1304, t1207, -t1022 * t555 + t1026 * t526 - t1282, -t1022 * t540 + t1026 * t521 - t1281, -pkin(6) * t593 - t1022 * t554 + t1026 * t524, -pkin(6) * t528 - t1022 * t520 + t1026 * t516; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t990, 0, t991, 0, t969, t1062, t939, pkin(6) * t939, t1022 * t952 + t1063, t1022 * t927 + t1026 * t993, -t1021 * t1081 + t1022 * t944, t1022 * t951 - t1063, -t1010 * t1026 + t1022 * t942, -qJDD(2) * t1026 + t1022 * t982, pkin(6) * t913 + t1022 * t900 + t1026 * t891, pkin(6) * t914 + t1022 * t901 + t1026 * t892, pkin(6) * t930 - t1022 * t874, pkin(6) * t831 + (-pkin(1) * t1026 - pkin(7) * t1022) * t874, t1180, t1022 * t697 + t1187, t1026 * t851 + t1300, t1179, -t1026 * t844 - t1299, t1182, pkin(6) * t716 + t1022 * t639 + t1026 * t658, pkin(6) * t725 + t1022 * t645 + t1026 * t671, pkin(6) * t666 + t1022 * t577 + t1026 * t647, pkin(6) * t638 + t1022 * t580 + t1026 * t608, t1182, t1026 * t846 - t1300, t1026 * t845 + t1299, t1180, t1022 * t698 + t1187, t1179, pkin(6) * t665 + t1022 * t565 + t1026 * t634, pkin(6) * t717 + t1022 * t578 + t1026 * t641, pkin(6) * t724 + t1022 * t579 + t1026 * t646, pkin(6) * t588 + t1022 * t551 + t1026 * t570, t1184, t1022 * t615 + t1026 * t711, t1022 * t630 + t1219, t1210, -t1305, t1209, t1022 * t530 + t1026 * t563 + t1284, pkin(6) * t600 + t1022 * t531 + t1026 * t564, t1022 * t527 + t1026 * t547 + t1283, pkin(6) * t537 + t1022 * t517 + t1026 * t523, t1184, t1022 * t633 + t1219, t1022 * t616 + t1026 * t710, t1209, t1305, t1210, t1022 * t526 + t1026 * t555 + t1284, t1022 * t521 + t1026 * t540 + t1283, pkin(6) * t595 + t1022 * t524 + t1026 * t554, pkin(6) * t529 + t1022 * t516 + t1026 * t520; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t996, t997, 0, 0, (t986 + t1071) * t1021, t1021 * t988 + t1025 * t985, t1025 * t998 + t1116, (t987 - t1072) * t1025, t1000 * t1021 + t1098, 0, pkin(1) * t988 + pkin(7) * t943 + t1099, -pkin(1) * t985 + pkin(7) * t945 - t1118, pkin(1) * t992 + pkin(7) * t989 + t876, pkin(1) * t978 + pkin(7) * t876, t1144, t1021 * t773 + t1025 * t769, -t1290, t1147, -t1289, t1150, -pkin(1) * t842 + t1021 * t792 + t1025 * t727 - t1285, pkin(1) * t1067 + t1021 * t802 + t1025 * t736 + t1302, pkin(7) * t696 + t1021 * t655 + t1025 * t648 - t1202, pkin(1) * t898 + pkin(7) * t644 - pkin(8) * t1119 + t1025 * t699, t1150, t1290, t1289, t1144, t1021 * t774 + t1025 * t770, t1147, pkin(7) * t695 + t1021 * t626 + t1025 * t617 - t1202, pkin(1) * t843 + t1021 * t649 + t1025 * t640 + t1285, pkin(1) * t1034 + t1021 * t650 + t1025 * t642 - t1302, pkin(1) * t726 + pkin(7) * t607 + t1021 * t601 + t1025 * t581, t1145, t1021 * t669 + t1025 * t667, t1021 * t689 + t1025 * t685, t1174, -t1294, t1172, t1021 * t560 + t1025 * t556 + t1261, pkin(7) * t625 + t1021 * t561 + t1025 * t557 - t1288, t1021 * t549 + t1025 * t543 + t1262, -pkin(1) * t576 + pkin(7) * t545 + t1021 * t525 + t1025 * t522, t1145, t1021 * t692 + t1025 * t688, t1021 * t670 + t1025 * t668, t1172, t1294, t1174, t1021 * t548 + t1025 * t542 + t1261, t1021 * t539 + t1025 * t538 + t1262, pkin(7) * t621 + t1021 * t546 + t1025 * t541 + t1288, -pkin(1) * t567 + pkin(7) * t535 + t1021 * t519 + t1025 * t518;];
tauB_reg  = t1;
