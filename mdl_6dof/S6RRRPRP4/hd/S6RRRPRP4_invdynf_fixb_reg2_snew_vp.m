% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 07:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:49:28
% EndTime: 2019-05-07 07:49:35
% DurationCPUTime: 7.52s
% Computational Cost: add. (18189->300), mult. (37947->317), div. (0->0), fcn. (26572->8), ass. (0->189)
t2406 = sin(qJ(3));
t2410 = cos(qJ(3));
t2411 = cos(qJ(2));
t2452 = qJD(1) * t2411;
t2407 = sin(qJ(2));
t2453 = qJD(1) * t2407;
t2369 = t2406 * t2453 - t2410 * t2452;
t2430 = qJD(2) * t2452;
t2433 = t2407 * qJDD(1);
t2378 = t2430 + t2433;
t2398 = t2411 * qJDD(1);
t2431 = qJD(2) * t2453;
t2379 = t2398 - t2431;
t2422 = t2410 * t2378 + t2406 * t2379;
t2333 = -qJD(3) * t2369 + t2422;
t2330 = qJDD(5) + t2333;
t2402 = qJD(2) + qJD(3);
t2405 = sin(qJ(5));
t2409 = cos(qJ(5));
t2347 = -t2409 * t2369 + t2402 * t2405;
t2349 = t2369 * t2405 + t2402 * t2409;
t2446 = t2347 * t2349;
t2298 = -t2330 - t2446;
t2346 = t2349 ^ 2;
t2371 = (t2406 * t2411 + t2407 * t2410) * qJD(1);
t2367 = qJD(5) + t2371;
t2456 = t2367 ^ 2;
t2463 = -t2346 - t2456;
t2269 = t2405 * t2298 + t2409 * t2463;
t2425 = t2406 * t2378 - t2410 * t2379;
t2332 = qJD(3) * t2371 + t2425;
t2401 = qJDD(2) + qJDD(3);
t2423 = t2405 * t2332 + t2409 * t2401;
t2436 = qJD(5) + t2367;
t2289 = -t2347 * t2436 + t2423;
t2239 = t2269 * t2410 - t2289 * t2406;
t2247 = t2269 * t2406 + t2289 * t2410;
t2226 = t2239 * t2407 + t2247 * t2411;
t2271 = t2298 * t2409 - t2405 * t2463;
t2408 = sin(qJ(1));
t2412 = cos(qJ(1));
t2501 = t2226 * t2408 - t2271 * t2412;
t2500 = t2226 * t2412 + t2271 * t2408;
t2444 = t2371 * t2369;
t2342 = -t2401 - t2444;
t2400 = t2402 ^ 2;
t2455 = t2371 ^ 2;
t2429 = -t2400 - t2455;
t2317 = t2342 * t2406 + t2410 * t2429;
t2319 = t2342 * t2410 - t2406 * t2429;
t2283 = t2317 * t2407 - t2319 * t2411;
t2499 = t2283 * t2408;
t2498 = t2283 * t2412;
t2220 = t2239 * t2411 - t2247 * t2407;
t2368 = t2369 ^ 2;
t2338 = -t2400 - t2368;
t2424 = t2401 - t2444;
t2301 = t2338 * t2406 + t2410 * t2424;
t2304 = -t2338 * t2410 + t2406 * t2424;
t2276 = t2301 * t2407 + t2304 * t2411;
t2497 = t2276 * t2408;
t2496 = t2276 * t2412;
t2437 = qJD(5) - t2367;
t2291 = t2347 * t2437 - t2423;
t2427 = t2409 * t2332 - t2405 * t2401;
t2418 = -t2349 * t2437 + t2427;
t2460 = -t2405 * t2291 + t2409 * t2418;
t2328 = t2347 ^ 2;
t2300 = t2346 + t2328;
t2458 = t2291 * t2409 + t2405 * t2418;
t2480 = -t2300 * t2410 + t2406 * t2458;
t2481 = -t2300 * t2406 - t2410 * t2458;
t2487 = -t2407 * t2481 + t2411 * t2480;
t2495 = t2408 * t2487 - t2412 * t2460;
t2297 = t2330 - t2446;
t2461 = -t2456 - t2328;
t2470 = -t2405 * t2297 + t2409 * t2461;
t2417 = t2349 * t2436 - t2427;
t2469 = t2297 * t2409 + t2405 * t2461;
t2478 = t2406 * t2417 - t2410 * t2469;
t2479 = t2406 * t2469 + t2410 * t2417;
t2488 = -t2407 * t2478 + t2411 * t2479;
t2494 = t2408 * t2488 - t2412 * t2470;
t2493 = t2408 * t2460 + t2412 * t2487;
t2492 = t2408 * t2470 + t2412 * t2488;
t2282 = t2317 * t2411 + t2319 * t2407;
t2489 = t2407 * t2479 + t2411 * t2478;
t2486 = t2407 * t2480 + t2411 * t2481;
t2439 = qJD(3) - t2402;
t2315 = t2369 * t2439 - t2422;
t2485 = t2315 * t2406;
t2484 = t2315 * t2410;
t2273 = t2301 * t2411 - t2304 * t2407;
t2462 = -t2368 - t2455;
t2475 = t2408 * t2462;
t2472 = t2412 * t2462;
t2404 = t2411 ^ 2;
t2414 = qJD(1) ^ 2;
t2387 = t2408 * g(1) - t2412 * g(2);
t2419 = qJDD(1) * pkin(1) + t2387;
t2420 = qJD(2) * pkin(2) - pkin(8) * t2453;
t2336 = t2379 * pkin(2) + (pkin(8) * t2404 + pkin(7)) * t2414 - t2420 * t2453 + t2419;
t2445 = t2369 * t2402;
t2426 = -t2333 + t2445;
t2443 = t2402 * t2371;
t2471 = pkin(3) * t2443 + t2426 * qJ(4) - 0.2e1 * qJD(4) * t2371 - t2336;
t2454 = 0.2e1 * qJD(4);
t2442 = t2404 * t2414;
t2388 = -g(1) * t2412 - g(2) * t2408;
t2374 = -pkin(1) * t2414 + qJDD(1) * pkin(7) + t2388;
t2441 = t2407 * t2374;
t2440 = t2407 * t2414;
t2438 = qJD(3) + t2402;
t2358 = pkin(4) * t2371 - pkin(9) * t2402;
t2243 = -t2368 * pkin(4) - t2371 * t2358 + (pkin(3) + pkin(9)) * t2332 + t2471;
t2324 = qJDD(2) * pkin(2) - t2378 * pkin(8) - t2441 + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2440 - g(3)) * t2411;
t2357 = -t2407 * g(3) + t2411 * t2374;
t2327 = -pkin(2) * t2442 + t2379 * pkin(8) - qJD(2) * t2420 + t2357;
t2293 = t2410 * t2324 - t2406 * t2327;
t2343 = pkin(3) * t2369 - qJ(4) * t2371;
t2268 = -t2401 * pkin(3) - t2400 * qJ(4) + t2371 * t2343 + qJDD(4) - t2293;
t2254 = -t2424 * pkin(9) + (t2333 + t2445) * pkin(4) + t2268;
t2228 = t2409 * t2243 + t2405 * t2254;
t2403 = t2407 ^ 2;
t2434 = t2403 + t2404;
t2428 = -t2243 * t2405 + t2409 * t2254;
t2294 = t2406 * t2324 + t2410 * t2327;
t2415 = -t2400 * pkin(3) + t2401 * qJ(4) - t2369 * t2343 + t2294;
t2255 = -t2332 * pkin(4) - t2368 * pkin(9) + (t2454 + t2358) * t2402 + t2415;
t2413 = qJD(2) ^ 2;
t2392 = t2411 * t2440;
t2390 = -t2413 - t2442;
t2389 = -t2403 * t2414 - t2413;
t2386 = -qJDD(2) + t2392;
t2385 = qJDD(2) + t2392;
t2384 = t2434 * t2414;
t2383 = -qJDD(1) * t2408 - t2412 * t2414;
t2382 = qJDD(1) * t2412 - t2408 * t2414;
t2381 = t2434 * qJDD(1);
t2380 = t2398 - 0.2e1 * t2431;
t2377 = 0.2e1 * t2430 + t2433;
t2373 = t2414 * pkin(7) + t2419;
t2356 = -t2411 * g(3) - t2441;
t2353 = t2386 * t2411 - t2389 * t2407;
t2352 = -t2385 * t2407 + t2390 * t2411;
t2351 = t2386 * t2407 + t2389 * t2411;
t2350 = t2385 * t2411 + t2390 * t2407;
t2326 = -t2356 * t2407 + t2357 * t2411;
t2325 = t2356 * t2411 + t2357 * t2407;
t2323 = pkin(5) * t2347 - qJ(6) * t2349;
t2313 = -t2369 * t2438 + t2422;
t2311 = -t2332 + t2443;
t2310 = -t2371 * t2439 - t2425;
t2309 = t2332 + t2443;
t2308 = t2371 * t2438 + t2425;
t2280 = t2311 * t2410 - t2485;
t2279 = t2310 * t2410 - t2485;
t2278 = t2311 * t2406 + t2484;
t2277 = t2310 * t2406 + t2484;
t2263 = t2402 * t2454 + t2415;
t2262 = -t2332 * pkin(3) - t2471;
t2261 = -t2293 * t2406 + t2294 * t2410;
t2260 = t2293 * t2410 + t2294 * t2406;
t2251 = -t2278 * t2407 + t2280 * t2411;
t2250 = -t2277 * t2407 + t2279 * t2411;
t2249 = t2278 * t2411 + t2280 * t2407;
t2248 = t2277 * t2411 + t2279 * t2407;
t2233 = t2263 * t2410 + t2268 * t2406;
t2232 = t2263 * t2406 - t2268 * t2410;
t2231 = -t2260 * t2407 + t2261 * t2411;
t2230 = t2260 * t2411 + t2261 * t2407;
t2229 = t2417 * pkin(5) - qJ(6) * t2289 - 0.2e1 * qJD(6) * t2349 + t2255;
t2214 = -t2232 * t2407 + t2233 * t2411;
t2213 = t2232 * t2411 + t2233 * t2407;
t2212 = -pkin(5) * t2330 - qJ(6) * t2456 + t2323 * t2349 + qJDD(6) - t2428;
t2210 = -pkin(5) * t2456 + qJ(6) * t2330 + 0.2e1 * qJD(6) * t2367 - t2323 * t2347 + t2228;
t2209 = t2228 * t2409 - t2405 * t2428;
t2208 = t2405 * t2228 + t2409 * t2428;
t2207 = t2208 * t2406 + t2255 * t2410;
t2206 = -t2208 * t2410 + t2255 * t2406;
t2205 = t2210 * t2409 + t2405 * t2212;
t2204 = t2210 * t2405 - t2212 * t2409;
t2203 = t2204 * t2406 + t2229 * t2410;
t2202 = -t2204 * t2410 + t2229 * t2406;
t2201 = -t2206 * t2407 + t2207 * t2411;
t2200 = t2206 * t2411 + t2207 * t2407;
t2199 = -t2202 * t2407 + t2203 * t2411;
t2198 = t2202 * t2411 + t2203 * t2407;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2383, -t2382, 0, -t2387 * t2408 + t2388 * t2412, 0, 0, 0, 0, 0, 0, t2352 * t2412 - t2380 * t2408, t2353 * t2412 + t2377 * t2408, t2381 * t2412 - t2384 * t2408, t2326 * t2412 - t2373 * t2408, 0, 0, 0, 0, 0, 0, t2308 * t2408 - t2496, -t2408 * t2426 - t2498, t2251 * t2412 + t2475, t2231 * t2412 - t2336 * t2408, 0, 0, 0, 0, 0, 0, t2250 * t2412 + t2475, -t2309 * t2408 + t2496, -t2313 * t2408 + t2498, t2214 * t2412 - t2262 * t2408, 0, 0, 0, 0, 0, 0, t2492, t2500, t2493, t2201 * t2412 + t2209 * t2408, 0, 0, 0, 0, 0, 0, t2492, t2493, -t2500, t2199 * t2412 + t2205 * t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2382, t2383, 0, t2387 * t2412 + t2388 * t2408, 0, 0, 0, 0, 0, 0, t2352 * t2408 + t2380 * t2412, t2353 * t2408 - t2377 * t2412, t2381 * t2408 + t2384 * t2412, t2326 * t2408 + t2373 * t2412, 0, 0, 0, 0, 0, 0, -t2308 * t2412 - t2497, t2412 * t2426 - t2499, t2251 * t2408 - t2472, t2231 * t2408 + t2336 * t2412, 0, 0, 0, 0, 0, 0, t2250 * t2408 - t2472, t2309 * t2412 + t2497, t2313 * t2412 + t2499, t2214 * t2408 + t2262 * t2412, 0, 0, 0, 0, 0, 0, t2494, t2501, t2495, t2201 * t2408 - t2209 * t2412, 0, 0, 0, 0, 0, 0, t2494, t2495, -t2501, t2199 * t2408 - t2205 * t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2350, t2351, 0, t2325, 0, 0, 0, 0, 0, 0, t2273, t2282, t2249, t2230, 0, 0, 0, 0, 0, 0, t2248, -t2273, -t2282, t2213, 0, 0, 0, 0, 0, 0, t2489, -t2220, t2486, t2200, 0, 0, 0, 0, 0, 0, t2489, t2486, t2220, t2198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2414, -qJDD(1), 0, t2388, 0, 0, 0, 0, 0, 0, t2352, t2353, t2381, t2326, 0, 0, 0, 0, 0, 0, -t2276, -t2283, t2251, t2231, 0, 0, 0, 0, 0, 0, t2250, t2276, t2283, t2214, 0, 0, 0, 0, 0, 0, t2488, t2226, t2487, t2201, 0, 0, 0, 0, 0, 0, t2488, t2487, -t2226, t2199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2414, 0, t2387, 0, 0, 0, 0, 0, 0, t2380, -t2377, t2384, t2373, 0, 0, 0, 0, 0, 0, -t2308, t2426, -t2462, t2336, 0, 0, 0, 0, 0, 0, -t2462, t2309, t2313, t2262, 0, 0, 0, 0, 0, 0, -t2470, -t2271, -t2460, -t2209, 0, 0, 0, 0, 0, 0, -t2470, -t2460, t2271, -t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2350, t2351, 0, t2325, 0, 0, 0, 0, 0, 0, t2273, t2282, t2249, t2230, 0, 0, 0, 0, 0, 0, t2248, -t2273, -t2282, t2213, 0, 0, 0, 0, 0, 0, t2489, -t2220, t2486, t2200, 0, 0, 0, 0, 0, 0, t2489, t2486, t2220, t2198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2390, t2386, t2398, t2357, 0, 0, 0, 0, 0, 0, -t2304, t2319, t2280, t2261, 0, 0, 0, 0, 0, 0, t2279, t2304, -t2319, t2233, 0, 0, 0, 0, 0, 0, t2479, t2247, t2480, t2207, 0, 0, 0, 0, 0, 0, t2479, t2480, -t2247, t2203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2385, t2389, -t2433, t2356, 0, 0, 0, 0, 0, 0, t2301, t2317, t2278, t2260, 0, 0, 0, 0, 0, 0, t2277, -t2301, -t2317, t2232, 0, 0, 0, 0, 0, 0, t2478, -t2239, t2481, t2206, 0, 0, 0, 0, 0, 0, t2478, t2481, t2239, t2202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2380, t2377, -t2384, -t2373, 0, 0, 0, 0, 0, 0, t2308, -t2426, t2462, -t2336, 0, 0, 0, 0, 0, 0, t2462, -t2309, -t2313, -t2262, 0, 0, 0, 0, 0, 0, t2470, t2271, t2460, t2209, 0, 0, 0, 0, 0, 0, t2470, t2460, -t2271, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2338, t2342, t2311, t2294, 0, 0, 0, 0, 0, 0, t2310, -t2338, -t2342, t2263, 0, 0, 0, 0, 0, 0, t2417, t2289, -t2300, t2255, 0, 0, 0, 0, 0, 0, t2417, -t2300, -t2289, t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2424, t2429, t2315, t2293, 0, 0, 0, 0, 0, 0, t2315, -t2424, -t2429, -t2268, 0, 0, 0, 0, 0, 0, -t2469, -t2269, -t2458, -t2208, 0, 0, 0, 0, 0, 0, -t2469, -t2458, t2269, -t2204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2308, -t2426, t2462, -t2336, 0, 0, 0, 0, 0, 0, t2462, -t2309, -t2313, -t2262, 0, 0, 0, 0, 0, 0, t2470, t2271, t2460, t2209, 0, 0, 0, 0, 0, 0, t2470, t2460, -t2271, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2462, -t2309, -t2313, -t2262, 0, 0, 0, 0, 0, 0, t2470, t2271, t2460, t2209, 0, 0, 0, 0, 0, 0, t2470, t2460, -t2271, t2205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2310, t2338, t2342, -t2263, 0, 0, 0, 0, 0, 0, -t2417, -t2289, t2300, -t2255, 0, 0, 0, 0, 0, 0, -t2417, t2300, t2289, -t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2315, t2424, t2429, t2268, 0, 0, 0, 0, 0, 0, t2469, t2269, t2458, t2208, 0, 0, 0, 0, 0, 0, t2469, t2458, -t2269, t2204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2461, t2298, t2418, t2228, 0, 0, 0, 0, 0, 0, t2461, t2418, -t2298, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2297, t2463, t2291, t2428, 0, 0, 0, 0, 0, 0, t2297, t2291, -t2463, -t2212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2417, t2289, -t2300, t2255, 0, 0, 0, 0, 0, 0, t2417, -t2300, -t2289, t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2461, t2418, -t2298, t2210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2417, -t2300, -t2289, t2229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2297, -t2291, t2463, t2212;];
f_new_reg  = t1;
