% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRPRP4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRP4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP4_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 16:46:01
% EndTime: 2019-03-09 16:46:09
% DurationCPUTime: 3.15s
% Computational Cost: add. (3984->271), mult. (8630->411), div. (0->0), fcn. (7821->6), ass. (0->166)
t112 = sin(qJ(3));
t174 = qJD(3) * t112;
t102 = pkin(2) * t174;
t111 = sin(qJ(5));
t109 = t111 ^ 2;
t114 = cos(qJ(5));
t110 = t114 ^ 2;
t63 = (t109 + t110) * t102;
t212 = (t109 - t110) * qJD(5);
t115 = cos(qJ(2));
t203 = cos(qJ(3));
t160 = t203 * t115;
t113 = sin(qJ(2));
t180 = t112 * t113;
t77 = -t160 + t180;
t215 = 0.2e1 * t77;
t214 = -t111 * pkin(5) + t114 * qJ(6);
t100 = -t115 * pkin(2) - pkin(1);
t179 = t112 * t115;
t78 = t203 * t113 + t179;
t133 = -t78 * qJ(4) + t100;
t207 = pkin(3) + pkin(9);
t39 = t207 * t77 + t133;
t206 = -pkin(8) - pkin(7);
t148 = t206 * t203;
t79 = t113 * t148;
t87 = t206 * t115;
t51 = -t112 * t87 - t79;
t44 = t78 * pkin(4) + t51;
t196 = t111 * t44 + t114 * t39;
t213 = qJD(5) * t196;
t211 = qJD(2) + qJD(3);
t154 = pkin(5) * qJD(5) - qJD(6);
t49 = t211 * t78;
t210 = -qJ(6) * t49 + t154 * t77;
t134 = qJD(2) * t148;
t155 = qJD(3) * t203;
t161 = t206 * qJD(2);
t33 = -t87 * t155 - t115 * t134 + (qJD(3) * t206 + t161) * t180;
t48 = -qJD(2) * t160 - t115 * t155 + t180 * t211;
t118 = -t48 * pkin(4) + t33;
t170 = t113 * qJD(2);
t166 = pkin(2) * t170;
t126 = t48 * qJ(4) - t78 * qJD(4) + t166;
t120 = t207 * t49 + t126;
t7 = -t111 * t120 + t114 * t118 - t213;
t209 = 0.2e1 * t212;
t117 = 0.2e1 * qJD(4);
t208 = 0.2e1 * qJD(6);
t205 = pkin(5) * t48;
t104 = qJD(5) * t114;
t52 = t206 * t180 - t203 * t87;
t28 = (-t114 * pkin(5) - t111 * qJ(6) - pkin(4)) * t77 + t52;
t27 = t28 * t104;
t175 = qJ(6) * qJD(5);
t132 = -pkin(5) * t49 - t77 * t175;
t32 = -qJD(3) * t79 - t113 * t134 - t161 * t179 - t87 * t174;
t22 = -t49 * pkin(4) - t32;
t9 = t111 * t210 + t132 * t114 + t22;
t204 = t9 * t111 + t27;
t202 = t112 * pkin(2);
t99 = -t203 * pkin(2) - pkin(3);
t94 = -pkin(9) + t99;
t201 = t48 * t94;
t173 = qJD(5) * t111;
t6 = -t44 * t104 - t111 * t118 - t114 * t120 + t39 * t173;
t200 = t6 * t111;
t199 = t78 * t94;
t150 = pkin(2) * t155;
t91 = t150 + qJD(4);
t95 = qJ(4) + t202;
t198 = t95 * t91;
t45 = -t77 * pkin(4) + t52;
t40 = t45 * t104;
t197 = t22 * t111 + t40;
t61 = pkin(5) * t104 + qJ(6) * t173 - t114 * qJD(6) + qJD(4);
t53 = t150 + t61;
t83 = qJ(4) - t214;
t70 = t83 + t202;
t195 = t70 * t104 + t53 * t111;
t194 = t83 * t104 + t61 * t111;
t193 = t94 * t63;
t192 = t95 * t104 + t91 * t111;
t191 = t207 * t63;
t189 = t109 * t49;
t188 = t110 * t49;
t187 = t114 * t49;
t186 = t207 * t48;
t185 = t207 * t78;
t184 = t48 * qJ(6);
t183 = qJ(4) * t104 + qJD(4) * t111;
t182 = qJD(5) * t45;
t177 = t78 * qJD(6);
t172 = qJD(5) * t207;
t171 = t111 * qJD(6);
t169 = t115 * qJD(2);
t168 = t49 * t215;
t42 = -0.2e1 * t78 * t48;
t167 = -0.2e1 * pkin(1) * qJD(2);
t165 = t111 * t187;
t164 = t77 * t173;
t163 = t78 * t173;
t162 = t78 * t104;
t26 = t28 * t173;
t159 = t111 * t172;
t158 = t114 * t172;
t157 = t113 * t169;
t156 = t111 * t104;
t152 = t78 * t102;
t74 = t77 ^ 2;
t149 = t74 * t156;
t147 = -t28 * t49 - t77 * t9;
t146 = t22 * t77 + t45 * t49;
t145 = -t52 * t32 + t51 * t33;
t144 = t48 * t77 - t78 * t49;
t143 = t70 * t77 - t199;
t142 = -t77 * t83 - t185;
t13 = t78 * qJ(6) + t196;
t16 = -t111 * t39 + t114 * t44;
t14 = -t78 * pkin(5) - t16;
t141 = t111 * t14 + t114 * t13;
t140 = t111 * t13 - t114 * t14;
t139 = t111 * t196 + t114 * t16;
t138 = -t111 * t16 + t114 * t196;
t136 = -qJ(4) * t49 - qJD(4) * t77;
t135 = t91 * qJ(4) + t95 * qJD(4);
t38 = -t111 * t48 + t162;
t36 = -t114 * t48 - t163;
t131 = qJD(5) * (t77 * t95 - t199);
t130 = qJD(5) * (qJ(4) * t77 + t185);
t129 = 0.2e1 * t144;
t128 = -t49 * t83 - t61 * t77 + t186;
t127 = t136 + t186;
t125 = -t95 * t49 - t91 * t77 + t152;
t124 = -t49 * t70 - t53 * t77 + t152 - t201;
t123 = t125 - t201;
t122 = 0.2e1 * t32 * t77 + 0.2e1 * t33 * t78 - 0.2e1 * t51 * t48 - 0.2e1 * t52 * t49;
t3 = t177 - t6 - t184;
t5 = t205 - t7;
t1 = t141 * qJD(5) + t3 * t111 - t5 * t114;
t121 = t138 * qJD(5) + t7 * t114 - t200;
t108 = qJ(4) * t117;
t106 = qJD(4) * t114;
t90 = -0.2e1 * t156;
t89 = 0.2e1 * t156;
t81 = t91 * t114;
t65 = t83 * t173;
t64 = -pkin(5) * t173 + qJ(6) * t104 + t171;
t59 = t70 * t173;
t58 = 0.2e1 * t63;
t57 = t111 * t102 + t94 * t104;
t56 = -t114 * t102 + t94 * t173;
t46 = t77 * pkin(3) + t133;
t37 = t77 * t104 + t111 * t49;
t35 = t164 - t187;
t31 = 0.2e1 * t77 * t188 - 0.2e1 * t149;
t30 = 0.2e1 * t77 * t189 + 0.2e1 * t149;
t29 = -t212 * t77 + t165;
t25 = t165 * t215 - t212 * t74;
t24 = t49 * pkin(3) + t126;
t23 = 0.4e1 * t77 * t156 - t188 + t189;
t21 = t22 * t114;
t11 = t144 * t114 + t77 * t163;
t10 = -0.2e1 * t144 * t111 + 0.2e1 * t77 * t162;
t2 = -t16 * t173 - t200 + (t7 + t213) * t114;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, 0.2e1 * (-t113 ^ 2 + t115 ^ 2) * qJD(2), 0, -0.2e1 * t157, 0, 0, t113 * t167, t115 * t167, 0, 0, t42, t129, 0, t168, 0, 0, 0.2e1 * t100 * t49 + 0.2e1 * t77 * t166, -0.2e1 * t100 * t48 + 0.2e1 * t78 * t166, t122, 0.2e1 * t100 * t166 + 0.2e1 * t145, 0, 0, 0, t42, t129, t168, t122, -0.2e1 * t24 * t77 - 0.2e1 * t46 * t49, -0.2e1 * t24 * t78 + 0.2e1 * t46 * t48, 0.2e1 * t46 * t24 + 0.2e1 * t145, t30, 0.2e1 * t25, t10, t31, -0.2e1 * t11, t42, -0.2e1 * t146 * t114 - 0.2e1 * t16 * t48 + 0.2e1 * t45 * t164 + 0.2e1 * t7 * t78, 0.2e1 * t146 * t111 + 0.2e1 * t196 * t48 + 0.2e1 * t77 * t40 + 0.2e1 * t6 * t78, 0.2e1 * t138 * t49 + 0.2e1 * (-t139 * qJD(5) - t111 * t7 - t114 * t6) * t77, 0.2e1 * t16 * t7 - 0.2e1 * t196 * t6 + 0.2e1 * t45 * t22, t30, t10, -0.2e1 * t25, t42, 0.2e1 * t11, t31, 0.2e1 * t114 * t147 + 0.2e1 * t14 * t48 + 0.2e1 * t26 * t77 - 0.2e1 * t5 * t78, 0.2e1 * t141 * t49 + 0.2e1 * (-qJD(5) * t140 + t111 * t5 + t114 * t3) * t77, 0.2e1 * t111 * t147 - 0.2e1 * t13 * t48 - 0.2e1 * t27 * t77 + 0.2e1 * t3 * t78, 0.2e1 * t13 * t3 + 0.2e1 * t14 * t5 + 0.2e1 * t28 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, 0, -t170, 0, -pkin(7) * t169, pkin(7) * t170, 0, 0, 0, 0, -t48, 0, -t49, 0, -t33, t32 (t203 * t48 - t112 * t49 + (t112 * t78 - t203 * t77) * qJD(3)) * pkin(2) (-t203 * t33 - t112 * t32 + (t112 * t51 + t203 * t52) * qJD(3)) * pkin(2), 0, t48, t49, 0, 0, 0, -t99 * t48 + t125, t33, -t32, t51 * t102 - t32 * t95 + t33 * t99 + t52 * t91, t29, -t23, t36, -t29, -t38, 0, t111 * t131 + t123 * t114 + t197, t21 + t114 * t131 + (-t123 - t182) * t111, -t2, t102 * t139 + t121 * t94 + t22 * t95 + t45 * t91, t29, t36, t23, 0, t38, -t29, t114 * t124 + t143 * t173 + t204, -t1, t26 + (-qJD(5) * t143 - t9) * t114 + t124 * t111, t1 * t94 + t102 * t140 + t28 * t53 + t9 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t102, -0.2e1 * t150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t102, 0.2e1 * t91, 0.2e1 * t99 * t102 + 0.2e1 * t198, t90, t209, 0, t89, 0, 0, 0.2e1 * t192, -0.2e1 * t95 * t173 + 0.2e1 * t81, -t58, 0.2e1 * t193 + 0.2e1 * t198, t90, 0, -t209, 0, 0, t89, 0.2e1 * t195, -t58, -0.2e1 * t53 * t114 + 0.2e1 * t59, 0.2e1 * t70 * t53 + 0.2e1 * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, -t49, 0, -t33, t32, 0, 0, 0, t48, t49, 0, 0, 0, pkin(3) * t48 + t136, t33, -t32, -t33 * pkin(3) - t32 * qJ(4) + t52 * qJD(4), t29, -t23, t36, -t29, -t38, 0, t111 * t130 + t127 * t114 + t197, t21 + t114 * t130 + (-t127 - t182) * t111, -t2, t22 * qJ(4) + t45 * qJD(4) - t121 * t207, t29, t36, t23, 0, t38, -t29, t114 * t128 - t142 * t173 + t204, -t1, t26 + (qJD(5) * t142 - t9) * t114 + t128 * t111, -t1 * t207 + t28 * t61 + t9 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, -t150, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, t117 + t150, -pkin(3) * t102 + t135, t90, t209, 0, t89, 0, 0, t183 + t192, t106 + t81 + (-qJ(4) - t95) * t173, -t63, t135 - t191, t90, 0, -t209, 0, 0, t89, t194 + t195, -t63, t59 + t65 + (-t53 - t61) * t114, t53 * t83 + t70 * t61 - t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, t108, t90, t209, 0, t89, 0, 0, 0.2e1 * t183, -0.2e1 * qJ(4) * t173 + 0.2e1 * t106, 0, t108, t90, 0, -t209, 0, 0, t89, 0.2e1 * t194, 0, -0.2e1 * t61 * t114 + 0.2e1 * t65, 0.2e1 * t83 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, 0, t33, 0, 0, 0, 0, 0, 0, t36, -t38, 0, t2, 0, 0, 0, 0, 0, 0, t36, 0, t38, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, -t35, -t48, t7, t6, 0, 0, 0, t37, 0, -t48, t35, 0, t7 - 0.2e1 * t205, t132 * t111 - t114 * t210, 0.2e1 * t177 - t6 - 0.2e1 * t184, -t5 * pkin(5) + t3 * qJ(6) + t13 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, 0, -t104, 0, -t56, -t57, 0, 0, 0, -t173, 0, 0, t104, 0, -t56, -t64, t57 (pkin(5) * t102 + t175 * t94) * t114 + (qJ(6) * t102 - t154 * t94) * t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, 0, -t104, 0, t159, t158, 0, 0, 0, -t173, 0, 0, t104, 0, t159, -t64, -t158 -(qJD(5) * t214 + t171) * t207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, -t104, 0, 0, 0, 0, 0, 0, 0, 0, -t173, 0, t104, t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, qJ(6) * t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t37, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, 0, -t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
