% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 14:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:46:04
% EndTime: 2019-05-06 14:46:34
% DurationCPUTime: 25.36s
% Computational Cost: add. (121521->773), mult. (272111->1125), div. (0->0), fcn. (185631->10), ass. (0->531)
t902 = qJD(2) ^ 2;
t896 = sin(qJ(2));
t890 = t896 ^ 2;
t903 = qJD(1) ^ 2;
t962 = t890 * t903;
t862 = t902 + t962;
t900 = cos(qJ(2));
t869 = t900 * t903 * t896;
t857 = qJDD(2) - t869;
t956 = t900 * t857;
t806 = -t862 * t896 + t956;
t946 = qJD(1) * qJD(2);
t929 = t900 * t946;
t944 = qJDD(1) * t896;
t846 = 0.2e1 * t929 + t944;
t897 = sin(qJ(1));
t901 = cos(qJ(1));
t760 = t806 * t897 + t846 * t901;
t1025 = pkin(6) * t760;
t763 = t806 * t901 - t846 * t897;
t1024 = pkin(6) * t763;
t1023 = pkin(7) * t806;
t1005 = 2 * qJD(3);
t970 = t857 * t896;
t800 = t862 * t900 + t970;
t1022 = pkin(1) * t800;
t1021 = pkin(7) * t800;
t895 = sin(qJ(4));
t899 = cos(qJ(4));
t949 = qJD(1) * t900;
t950 = qJD(1) * t896;
t832 = -t895 * t949 + t899 * t950;
t847 = t929 + t944;
t930 = t896 * t946;
t942 = qJDD(1) * t900;
t848 = -t930 + t942;
t923 = t895 * t847 + t899 * t848;
t748 = -qJD(4) * t832 - t923;
t831 = -t895 * t950 - t899 * t949;
t749 = qJD(4) * t831 + t847 * t899 - t848 * t895;
t892 = sin(pkin(10));
t893 = cos(pkin(10));
t924 = -t893 * t748 + t749 * t892;
t775 = t892 * t831 + t893 * t832;
t887 = qJD(2) - qJD(4);
t984 = t775 * t887;
t655 = t924 - t984;
t940 = qJDD(2) - qJDD(4);
t981 = t831 * t832;
t913 = -t940 + t981;
t894 = sin(qJ(6));
t898 = cos(qJ(6));
t742 = t775 * t894 + t898 * t887;
t744 = t775 * t898 - t887 * t894;
t688 = t744 * t742;
t916 = qJDD(6) + t924;
t1010 = -t688 + t916;
t1020 = t1010 * t894;
t1019 = t1010 * t898;
t849 = -0.2e1 * t930 + t942;
t974 = t849 * t900;
t978 = t846 * t896;
t788 = -t974 + t978;
t891 = t900 ^ 2;
t855 = (t890 - t891) * t903;
t1018 = t788 * t897 + t855 * t901;
t1017 = t788 * t901 - t855 * t897;
t961 = t891 * t903;
t864 = -t902 + t961;
t804 = -t864 * t900 + t970;
t941 = qJDD(1) * t901;
t1016 = t804 * t897 + t900 * t941;
t1015 = t804 * t901 - t897 * t942;
t773 = -t893 * t831 + t832 * t892;
t985 = t773 * t775;
t914 = -t940 - t985;
t1014 = t892 * t914;
t1013 = t893 * t914;
t1012 = t895 * t913;
t1011 = t899 * t913;
t686 = t748 * t892 + t749 * t893;
t766 = t773 * t887;
t659 = t686 + t766;
t645 = -t742 * qJD(6) + t898 * t686 - t894 * t940;
t770 = qJD(6) + t773;
t697 = t770 * t742;
t619 = -t697 + t645;
t819 = t831 * t887;
t1009 = t749 - t819;
t723 = t749 + t819;
t1002 = pkin(2) * t900;
t919 = -qJ(3) * t896 - t1002;
t844 = t919 * qJD(1);
t860 = g(1) * t901 + g(2) * t897;
t834 = -pkin(1) * t903 + qJDD(1) * pkin(7) - t860;
t928 = t896 * g(3) - t900 * t834;
t910 = qJDD(2) * qJ(3) + qJD(2) * t1005 + t844 * t949 - t928;
t738 = -pkin(2) * t902 + t910;
t858 = -qJD(2) * pkin(3) - pkin(8) * t950;
t705 = -pkin(3) * t961 - pkin(8) * t848 + qJD(2) * t858 + t738;
t1007 = t844 * t950 + qJDD(3);
t809 = t900 * g(3) + t896 * t834;
t909 = -qJDD(2) * pkin(2) + t1007 + t809;
t747 = t902 * qJ(3) - t909;
t856 = qJDD(2) + t869;
t706 = (-t847 + t929) * pkin(8) - t856 * pkin(3) - t747;
t643 = t899 * t705 + t895 * t706;
t811 = -pkin(4) * t887 - qJ(5) * t832;
t829 = t831 ^ 2;
t615 = -pkin(4) * t829 + qJ(5) * t748 + t811 * t887 + t643;
t642 = t895 * t705 - t899 * t706;
t905 = pkin(4) * t913 - t723 * qJ(5) - t642;
t542 = -0.2e1 * qJD(5) * t773 + t893 * t615 + t892 * t905;
t1008 = t864 * t896 + t956;
t925 = t894 * t686 + t898 * t940;
t616 = (qJD(6) - t770) * t744 + t925;
t739 = t742 ^ 2;
t740 = t744 ^ 2;
t769 = t770 ^ 2;
t771 = t773 ^ 2;
t772 = t775 ^ 2;
t830 = t832 ^ 2;
t1006 = t887 ^ 2;
t1004 = 0.2e1 * qJD(5);
t1003 = pkin(2) + pkin(3);
t1001 = pkin(5) * t892;
t865 = -t902 - t961;
t971 = t856 * t896;
t803 = t865 * t900 - t971;
t759 = t803 * t897 + t849 * t901;
t1000 = pkin(6) * t759;
t951 = t890 + t891;
t851 = t951 * qJDD(1);
t854 = t951 * t903;
t790 = t851 * t897 + t854 * t901;
t999 = pkin(6) * t790;
t839 = t900 * t856;
t798 = t865 * t896 + t839;
t998 = pkin(7) * t798;
t997 = t848 * pkin(2);
t996 = qJ(3) * t900;
t927 = t892 * t615 - t893 * t905;
t541 = t1004 * t775 + t927;
t496 = -t541 * t893 + t542 * t892;
t995 = t496 * t895;
t994 = t496 * t899;
t631 = t688 + t916;
t993 = t631 * t894;
t992 = t631 * t898;
t859 = t897 * g(1) - t901 * g(2);
t833 = qJDD(1) * pkin(1) + t903 * pkin(7) + t859;
t907 = -pkin(2) * t930 + t833;
t691 = t997 + t847 * qJ(3) + t848 * pkin(3) - pkin(8) * t961 + (qJD(2) * t996 + (t1005 + t858) * t896) * qJD(1) + t907;
t633 = -t748 * pkin(4) - t829 * qJ(5) + t832 * t811 + qJDD(5) + t691;
t991 = t633 * t892;
t990 = t633 * t893;
t701 = t940 - t985;
t989 = t701 * t892;
t988 = t701 * t893;
t987 = t770 * t894;
t986 = t770 * t898;
t783 = t940 + t981;
t983 = t783 * t895;
t982 = t783 * t899;
t980 = t833 * t896;
t979 = t833 * t900;
t975 = t849 * t896;
t967 = t940 * t897;
t966 = t887 * t892;
t965 = t887 * t893;
t964 = t887 * t895;
t963 = t887 * t899;
t704 = pkin(5) * t773 - pkin(9) * t775;
t517 = t940 * pkin(5) - t1006 * pkin(9) + (t1004 + t704) * t775 + t927;
t960 = t894 * t517;
t959 = t895 * t691;
t958 = t898 * t517;
t957 = t899 * t691;
t518 = -pkin(5) * t1006 - pkin(9) * t940 - t704 * t773 + t542;
t563 = pkin(5) * t655 - pkin(9) * t659 + t633;
t494 = t898 * t518 + t894 * t563;
t954 = pkin(1) * t849 + pkin(7) * t803;
t953 = pkin(1) * t854 + pkin(7) * t851;
t952 = t854 - t902;
t943 = qJDD(1) * t897;
t939 = t892 * t688;
t938 = t893 * t688;
t937 = t897 * t985;
t936 = t901 * t985;
t935 = t897 * t981;
t934 = t901 * t981;
t933 = -pkin(5) * t893 - pkin(4);
t493 = t518 * t894 - t898 * t563;
t459 = t894 * t493 + t898 * t494;
t497 = t541 * t892 + t893 * t542;
t735 = t809 * t896 - t900 * t928;
t795 = -t859 * t897 - t901 * t860;
t922 = t897 * t869;
t921 = t901 * t869;
t745 = -pkin(1) * t798 + t809;
t853 = -t897 * t903 + t941;
t920 = -pkin(6) * t853 - g(3) * t897;
t918 = pkin(2) * t896 - t996;
t917 = t847 + t929;
t458 = -t493 * t898 + t494 * t894;
t581 = -t642 * t899 + t643 * t895;
t582 = t895 * t642 + t899 * t643;
t734 = t809 * t900 + t896 * t928;
t915 = t846 * t900 + t975;
t794 = t859 * t901 - t860 * t897;
t911 = -t924 - t984;
t908 = (-qJD(4) - t887) * t832 - t923;
t906 = t1005 * t950 + t907;
t904 = qJ(3) * t917 + t906;
t872 = t901 * t940;
t863 = t902 - t962;
t852 = t901 * t903 + t943;
t842 = t918 * qJDD(1);
t838 = t951 * t946;
t828 = -pkin(6) * t852 + g(3) * t901;
t817 = -t830 + t1006;
t816 = t829 - t1006;
t815 = qJDD(2) * t897 + t838 * t901;
t814 = t847 * t900 - t890 * t946;
t813 = -qJDD(2) * t901 + t838 * t897;
t812 = -t848 * t896 - t891 * t946;
t808 = -t830 - t1006;
t805 = -t863 * t896 + t839;
t799 = t863 * t900 + t971;
t797 = t917 * t896;
t796 = (t848 - t930) * t900;
t791 = t851 * t901 - t854 * t897;
t789 = pkin(6) * t791;
t786 = t830 - t829;
t782 = t814 * t901 - t922;
t781 = t812 * t901 + t922;
t780 = t814 * t897 + t921;
t779 = t812 * t897 - t921;
t778 = t805 * t901 + t896 * t943;
t777 = t805 * t897 - t896 * t941;
t776 = -t1006 - t829;
t762 = t803 * t901 - t849 * t897;
t758 = -t772 + t1006;
t757 = t771 - t1006;
t756 = pkin(6) * t762;
t755 = (-t831 * t899 - t832 * t895) * t887;
t754 = (t831 * t895 - t832 * t899) * t887;
t753 = -t979 + t1021;
t752 = -t980 - t998;
t751 = -t772 - t1006;
t750 = -t829 - t830;
t746 = -t928 + t1022;
t732 = qJ(3) * t952 + t909;
t731 = pkin(2) * t952 + t910;
t730 = t904 + t997;
t729 = t816 * t899 + t983;
t728 = -t817 * t895 + t1011;
t727 = -t816 * t895 + t982;
t726 = -t817 * t899 - t1012;
t725 = -t808 * t895 + t982;
t724 = t808 * t899 + t983;
t718 = (qJD(4) - t887) * t832 + t923;
t717 = t749 * t899 + t832 * t964;
t716 = -t749 * t895 + t832 * t963;
t715 = -t748 * t895 + t831 * t963;
t714 = -t748 * t899 - t831 * t964;
t713 = (t848 + t849) * pkin(2) + t904;
t712 = t997 + (t846 + t917) * qJ(3) + t906;
t711 = t735 * t901 - t833 * t897;
t710 = t735 * t897 + t833 * t901;
t709 = t776 * t899 - t1012;
t708 = t776 * t895 + t1011;
t707 = t772 - t771;
t700 = -t1006 - t771;
t696 = -t740 + t769;
t695 = t739 - t769;
t694 = (t773 * t893 - t775 * t892) * t887;
t693 = (t773 * t892 + t775 * t893) * t887;
t692 = (-t865 - t902) * qJ(3) + (-qJDD(2) - t856) * pkin(2) + t745 + t1007;
t690 = -t1022 - qJ(3) * t857 + (-t862 + t902) * pkin(2) - t910;
t689 = -t754 * t896 + t755 * t900;
t687 = -t740 + t739;
t684 = t738 * t900 - t747 * t896;
t683 = t738 * t896 + t747 * t900;
t680 = -t771 - t772;
t679 = -pkin(2) * t978 + t712 * t900 - t1021;
t678 = qJ(3) * t974 - t713 * t896 - t998;
t677 = -t731 * t896 + t732 * t900;
t676 = -t740 - t769;
t675 = -t727 * t896 + t729 * t900;
t674 = -t726 * t896 + t728 * t900;
t673 = t757 * t893 + t989;
t672 = -t758 * t892 + t1013;
t671 = t757 * t892 - t988;
t670 = t758 * t893 + t1014;
t669 = -t751 * t892 + t988;
t668 = t751 * t893 + t989;
t667 = -t769 - t739;
t666 = t724 * t896 + t725 * t900;
t665 = -t724 * t900 + t725 * t896;
t664 = t723 * t895 + t899 * t908;
t663 = -t1009 * t895 - t718 * t899;
t662 = -t723 * t899 + t895 * t908;
t661 = -t1009 * t899 + t718 * t895;
t660 = t686 - t766;
t654 = t739 + t740;
t653 = t686 * t893 + t775 * t966;
t652 = t686 * t892 - t775 * t965;
t651 = -t773 * t965 + t892 * t924;
t650 = -t773 * t966 - t893 * t924;
t649 = -t716 * t896 + t717 * t900;
t648 = -t714 * t896 + t715 * t900;
t647 = t708 * t896 + t709 * t900;
t646 = -t708 * t900 + t709 * t896;
t644 = -qJD(6) * t744 - t925;
t641 = t700 * t893 - t1014;
t640 = t700 * t892 + t1013;
t639 = t684 * t901 - t730 * t897;
t638 = t684 * t897 + t730 * t901;
t637 = (-t742 * t898 + t744 * t894) * t770;
t636 = (-t742 * t894 - t744 * t898) * t770;
t635 = -t693 * t895 + t694 * t899;
t634 = -t693 * t899 - t694 * t895;
t629 = -pkin(1) * t683 - pkin(2) * t747 - qJ(3) * t738;
t628 = -t1009 * t897 + t666 * t901;
t627 = t1009 * t901 + t666 * t897;
t626 = -pkin(8) * t724 + qJ(3) * t1009 + t957;
t625 = t647 * t901 - t718 * t897;
t624 = t647 * t897 + t718 * t901;
t623 = -pkin(7) * t683 - t730 * t918;
t622 = -pkin(8) * t708 + qJ(3) * t718 + t959;
t620 = -t697 - t645;
t617 = (-qJD(6) - t770) * t744 - t925;
t614 = t645 * t898 - t744 * t987;
t613 = t645 * t894 + t744 * t986;
t612 = -t644 * t894 + t742 * t986;
t611 = t644 * t898 + t742 * t987;
t609 = -t671 * t895 + t673 * t899;
t608 = -t670 * t895 + t672 * t899;
t607 = -t671 * t899 - t673 * t895;
t606 = -t670 * t899 - t672 * t895;
t603 = -t668 * t895 + t669 * t899;
t602 = t668 * t899 + t669 * t895;
t601 = t662 * t896 + t664 * t900;
t600 = -t661 * t896 + t663 * t900;
t599 = -t662 * t900 + t664 * t896;
t598 = t637 * t893 + t892 * t916;
t597 = t637 * t892 - t893 * t916;
t596 = t660 * t892 + t893 * t911;
t595 = -t655 * t893 - t659 * t892;
t594 = -t660 * t893 + t892 * t911;
t593 = -t655 * t892 + t659 * t893;
t592 = t695 * t898 - t993;
t591 = -t696 * t894 + t1019;
t590 = t695 * t894 + t992;
t589 = t696 * t898 + t1020;
t588 = -pkin(8) * t725 + t1003 * t1009 - t959;
t587 = -t652 * t895 + t653 * t899;
t586 = -t650 * t895 + t651 * t899;
t585 = -t652 * t899 - t653 * t895;
t584 = -t650 * t899 - t651 * t895;
t583 = -pkin(8) * t709 + t1003 * t718 + t957;
t580 = -t676 * t894 - t992;
t579 = t676 * t898 - t993;
t578 = -qJ(5) * t668 + t990;
t577 = t601 * t901 - t750 * t897;
t576 = t601 * t897 + t750 * t901;
t575 = -t640 * t895 + t641 * t899;
t574 = t640 * t899 + t641 * t895;
t573 = t667 * t898 - t1020;
t572 = t667 * t894 + t1019;
t571 = t614 * t893 + t939;
t570 = t612 * t893 - t939;
t569 = t614 * t892 - t938;
t568 = t612 * t892 + t938;
t567 = -qJ(5) * t640 + t991;
t566 = -t634 * t896 + t635 * t900;
t565 = -pkin(8) * t581 + qJ(3) * t691;
t564 = -pkin(4) * t659 + qJ(5) * t669 + t991;
t560 = -pkin(1) * t665 - qJ(3) * t725 + t1003 * t724 - t643;
t559 = -t616 * t898 - t620 * t894;
t558 = t617 * t898 - t619 * t894;
t557 = -t616 * t894 + t620 * t898;
t556 = t617 * t894 + t619 * t898;
t555 = -pkin(4) * t655 + qJ(5) * t641 - t990;
t554 = -pkin(8) * t662 + qJ(3) * t750 - t581;
t553 = -pkin(8) * t582 + t1003 * t691;
t552 = -t607 * t896 + t609 * t900;
t551 = -t606 * t896 + t608 * t900;
t550 = t592 * t893 - t616 * t892;
t549 = t591 * t893 - t620 * t892;
t548 = t592 * t892 + t616 * t893;
t547 = t591 * t892 + t620 * t893;
t546 = t602 * t896 + t603 * t900;
t545 = -t602 * t900 + t603 * t896;
t544 = -pkin(1) * t646 - qJ(3) * t709 + t1003 * t708 - t642;
t543 = -pkin(8) * t664 + t1003 * t750 - t582;
t539 = -t597 * t895 + t598 * t899;
t538 = -t597 * t899 - t598 * t895;
t537 = t580 * t893 + t619 * t892;
t536 = t580 * t892 - t619 * t893;
t535 = -t594 * t895 + t596 * t899;
t534 = -t593 * t895 + t595 * t899;
t533 = t594 * t899 + t596 * t895;
t532 = -t593 * t899 - t595 * t895;
t531 = t573 * t893 - t617 * t892;
t530 = t573 * t892 + t617 * t893;
t529 = t558 * t893 - t687 * t892;
t528 = t558 * t892 + t687 * t893;
t527 = -t585 * t896 + t587 * t900;
t526 = -t584 * t896 + t586 * t900;
t525 = t559 * t893 - t654 * t892;
t524 = t559 * t892 + t654 * t893;
t523 = t581 * t896 + t582 * t900;
t522 = -t581 * t900 + t582 * t896;
t521 = -pkin(7) * t665 - t588 * t896 + t626 * t900;
t520 = t574 * t896 + t575 * t900;
t519 = -t574 * t900 + t575 * t896;
t515 = t546 * t901 - t659 * t897;
t514 = t546 * t897 + t659 * t901;
t513 = -pkin(1) * t599 - qJ(3) * t664 + t1003 * t662;
t512 = -pkin(7) * t646 - t583 * t896 + t622 * t900;
t511 = -t569 * t895 + t571 * t899;
t510 = -t568 * t895 + t570 * t899;
t509 = -t569 * t899 - t571 * t895;
t508 = -t568 * t899 - t570 * t895;
t507 = t523 * t901 - t691 * t897;
t506 = t523 * t897 + t691 * t901;
t505 = t520 * t901 - t655 * t897;
t504 = t520 * t897 + t655 * t901;
t503 = -pkin(9) * t579 + t958;
t502 = -pkin(9) * t572 + t960;
t501 = -t548 * t895 + t550 * t899;
t500 = -t547 * t895 + t549 * t899;
t499 = -t548 * t899 - t550 * t895;
t498 = -t547 * t899 - t549 * t895;
t495 = -t538 * t896 + t539 * t900;
t492 = -t536 * t895 + t537 * t899;
t491 = t536 * t899 + t537 * t895;
t489 = t533 * t896 + t535 * t900;
t488 = -t532 * t896 + t534 * t900;
t487 = -t533 * t900 + t535 * t896;
t486 = -t530 * t895 + t531 * t899;
t485 = t530 * t899 + t531 * t895;
t484 = -t528 * t895 + t529 * t899;
t483 = -t528 * t899 - t529 * t895;
t482 = -pkin(8) * t602 + qJ(3) * t659 - t564 * t895 + t578 * t899;
t481 = t489 * t901 - t680 * t897;
t480 = t489 * t897 + t680 * t901;
t479 = -t524 * t895 + t525 * t899;
t478 = t524 * t899 + t525 * t895;
t477 = -pkin(4) * t633 + qJ(5) * t497;
t476 = -pkin(8) * t574 + qJ(3) * t655 - t555 * t895 + t567 * t899;
t475 = -pkin(7) * t599 - t543 * t896 + t554 * t900;
t474 = -pkin(8) * t603 + t1003 * t659 - t899 * t564 - t895 * t578;
t473 = -qJ(5) * t594 - t496;
t472 = -t509 * t896 + t511 * t900;
t471 = -t508 * t896 + t510 * t900;
t470 = -pkin(8) * t575 + t1003 * t655 - t899 * t555 - t895 * t567;
t469 = -pkin(5) * t579 + t494;
t468 = -pkin(5) * t572 + t493;
t467 = -pkin(4) * t680 + qJ(5) * t596 + t497;
t466 = -pkin(7) * t522 - t553 * t896 + t565 * t900;
t465 = -pkin(1) * t522 - qJ(3) * t582 + t1003 * t581;
t464 = -pkin(1) * t545 + pkin(4) * t668 - qJ(3) * t603 + t1003 * t602 - t542;
t463 = -t499 * t896 + t501 * t900;
t462 = -t498 * t896 + t500 * t900;
t461 = t497 * t899 - t995;
t460 = t497 * t895 + t994;
t457 = t491 * t896 + t492 * t900;
t456 = -t491 * t900 + t492 * t896;
t455 = t485 * t896 + t486 * t900;
t454 = -t485 * t900 + t486 * t896;
t453 = -pkin(1) * t519 + pkin(4) * t640 - qJ(3) * t575 + t1003 * t574 - t541;
t452 = -t483 * t896 + t484 * t900;
t451 = t478 * t896 + t479 * t900;
t450 = -t478 * t900 + t479 * t896;
t449 = t457 * t901 - t579 * t897;
t448 = t457 * t897 + t579 * t901;
t447 = t455 * t901 - t572 * t897;
t446 = t455 * t897 + t572 * t901;
t445 = -pkin(9) * t557 - t458;
t444 = t459 * t893 + t517 * t892;
t443 = t459 * t892 - t517 * t893;
t442 = -qJ(5) * t536 - t469 * t892 + t503 * t893;
t441 = t451 * t901 - t557 * t897;
t440 = t451 * t897 + t557 * t901;
t439 = -qJ(5) * t530 - t468 * t892 + t502 * t893;
t438 = -pkin(7) * t545 - t474 * t896 + t482 * t900;
t437 = -pkin(1) * t487 + pkin(4) * t594 - qJ(3) * t535 + t1003 * t533;
t436 = -pkin(4) * t579 + qJ(5) * t537 + t469 * t893 + t503 * t892;
t435 = -pkin(4) * t572 + qJ(5) * t531 + t468 * t893 + t502 * t892;
t434 = -pkin(7) * t519 - t470 * t896 + t476 * t900;
t433 = -pkin(8) * t533 + qJ(3) * t680 - t467 * t895 + t473 * t899;
t432 = -pkin(8) * t535 + t1003 * t680 - t899 * t467 - t895 * t473;
t431 = -qJ(5) * t524 + t1001 * t557 + t445 * t893;
t430 = qJ(5) * t525 + t892 * t445 + t557 * t933;
t429 = t460 * t896 + t461 * t900;
t428 = -t460 * t900 + t461 * t896;
t427 = t429 * t901 - t633 * t897;
t426 = t429 * t897 + t633 * t901;
t425 = -pkin(8) * t460 + qJ(3) * t633 - qJ(5) * t994 - t477 * t895;
t424 = -pkin(8) * t461 + qJ(5) * t995 + t1003 * t633 - t899 * t477;
t423 = -t443 * t895 + t444 * t899;
t422 = t443 * t899 + t444 * t895;
t421 = -pkin(1) * t456 + pkin(4) * t536 - pkin(5) * t619 + pkin(9) * t580 - qJ(3) * t492 + t1003 * t491 + t960;
t420 = -qJ(5) * t443 + (-pkin(9) * t893 + t1001) * t458;
t419 = -pkin(1) * t454 + pkin(4) * t530 + pkin(5) * t617 + pkin(9) * t573 - qJ(3) * t486 + t1003 * t485 - t958;
t418 = -pkin(8) * t491 + qJ(3) * t579 - t436 * t895 + t442 * t899;
t417 = -pkin(8) * t485 + qJ(3) * t572 - t435 * t895 + t439 * t899;
t416 = -pkin(8) * t492 + t1003 * t579 - t899 * t436 - t895 * t442;
t415 = -pkin(8) * t486 + t1003 * t572 - t899 * t435 - t895 * t439;
t414 = -pkin(7) * t487 - t432 * t896 + t433 * t900;
t413 = qJ(5) * t444 + (-pkin(9) * t892 + t933) * t458;
t412 = -pkin(1) * t450 + pkin(4) * t524 + pkin(5) * t654 + pkin(9) * t559 - qJ(3) * t479 + t1003 * t478 + t459;
t411 = -pkin(8) * t478 + qJ(3) * t557 - t430 * t895 + t431 * t899;
t410 = -pkin(8) * t479 + t1003 * t557 - t899 * t430 - t895 * t431;
t409 = t422 * t896 + t423 * t900;
t408 = -t422 * t900 + t423 * t896;
t407 = -pkin(1) * t428 + pkin(4) * t496 - qJ(3) * t461 + t1003 * t460;
t406 = t409 * t901 - t458 * t897;
t405 = t409 * t897 + t458 * t901;
t404 = -pkin(7) * t428 - t424 * t896 + t425 * t900;
t403 = -pkin(7) * t456 - t416 * t896 + t418 * t900;
t402 = -pkin(7) * t454 - t415 * t896 + t417 * t900;
t401 = -pkin(7) * t450 - t410 * t896 + t411 * t900;
t400 = -pkin(8) * t422 + qJ(3) * t458 - t413 * t895 + t420 * t899;
t399 = -pkin(8) * t423 + t1003 * t458 - t899 * t413 - t895 * t420;
t398 = -pkin(1) * t408 + pkin(4) * t443 - pkin(5) * t517 + pkin(9) * t459 - qJ(3) * t423 + t1003 * t422;
t397 = -pkin(7) * t408 - t399 * t896 + t400 * t900;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t852, -t853, 0, t795, 0, 0, 0, 0, 0, 0, t762, -t763, t791, t711, 0, 0, 0, 0, 0, 0, t762, t791, t763, t639, 0, 0, 0, 0, 0, 0, t625, t628, t577, t507, 0, 0, 0, 0, 0, 0, t505, t515, t481, t427, 0, 0, 0, 0, 0, 0, t447, t449, t441, t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t853, -t852, 0, t794, 0, 0, 0, 0, 0, 0, t759, -t760, t790, t710, 0, 0, 0, 0, 0, 0, t759, t790, t760, t638, 0, 0, 0, 0, 0, 0, t624, t627, t576, t506, 0, 0, 0, 0, 0, 0, t504, t514, t480, t426, 0, 0, 0, 0, 0, 0, t446, t448, t440, t405; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t798, -t800, 0, -t734, 0, 0, 0, 0, 0, 0, t798, 0, t800, t683, 0, 0, 0, 0, 0, 0, t646, t665, t599, t522, 0, 0, 0, 0, 0, 0, t519, t545, t487, t428, 0, 0, 0, 0, 0, 0, t454, t456, t450, t408; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t853, 0, -t852, 0, t920, -t828, -t794, -pkin(6) * t794, t782, -t1017, t778, t781, -t1015, t815, -t745 * t897 + t752 * t901 - t1000, -t746 * t897 + t753 * t901 + t1025, t734 * t901 - t999, -pkin(6) * t710 - (pkin(1) * t897 - pkin(7) * t901) * t734, t782, t778, t1017, t815, t1015, t781, t678 * t901 - t692 * t897 - t1000, t677 * t901 - t842 * t897 - t999, t679 * t901 - t690 * t897 - t1025, -pkin(6) * t638 + t623 * t901 - t629 * t897, t649 * t901 + t935, t600 * t901 - t786 * t897, t674 * t901 - t723 * t897, t648 * t901 - t935, t675 * t901 - t897 * t908, t689 * t901 + t967, -pkin(6) * t624 + t512 * t901 - t544 * t897, -pkin(6) * t627 + t521 * t901 - t560 * t897, -pkin(6) * t576 + t475 * t901 - t513 * t897, -pkin(6) * t506 - t465 * t897 + t466 * t901, t527 * t901 - t937, t488 * t901 - t707 * t897, t551 * t901 - t660 * t897, t526 * t901 + t937, t552 * t901 - t897 * t911, t566 * t901 + t967, -pkin(6) * t504 + t434 * t901 - t453 * t897, -pkin(6) * t514 + t438 * t901 - t464 * t897, -pkin(6) * t480 + t414 * t901 - t437 * t897, -pkin(6) * t426 + t404 * t901 - t407 * t897, t472 * t901 - t613 * t897, t452 * t901 - t556 * t897, t462 * t901 - t589 * t897, t471 * t901 - t611 * t897, t463 * t901 - t590 * t897, t495 * t901 - t636 * t897, -pkin(6) * t446 + t402 * t901 - t419 * t897, -pkin(6) * t448 + t403 * t901 - t421 * t897, -pkin(6) * t440 + t401 * t901 - t412 * t897, -pkin(6) * t405 + t397 * t901 - t398 * t897; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t852, 0, t853, 0, t828, t920, t795, pkin(6) * t795, t780, -t1018, t777, t779, -t1016, t813, t745 * t901 + t752 * t897 + t756, t746 * t901 + t753 * t897 - t1024, t734 * t897 + t789, pkin(6) * t711 - (-pkin(1) * t901 - pkin(7) * t897) * t734, t780, t777, t1018, t813, t1016, t779, t678 * t897 + t692 * t901 + t756, t677 * t897 + t842 * t901 + t789, t679 * t897 + t690 * t901 + t1024, pkin(6) * t639 + t623 * t897 + t629 * t901, t649 * t897 - t934, t600 * t897 + t786 * t901, t674 * t897 + t723 * t901, t648 * t897 + t934, t675 * t897 + t901 * t908, t689 * t897 - t872, pkin(6) * t625 + t512 * t897 + t544 * t901, pkin(6) * t628 + t521 * t897 + t560 * t901, pkin(6) * t577 + t475 * t897 + t513 * t901, pkin(6) * t507 + t465 * t901 + t466 * t897, t527 * t897 + t936, t488 * t897 + t707 * t901, t551 * t897 + t660 * t901, t526 * t897 - t936, t552 * t897 + t901 * t911, t566 * t897 - t872, pkin(6) * t505 + t434 * t897 + t453 * t901, pkin(6) * t515 + t438 * t897 + t464 * t901, pkin(6) * t481 + t414 * t897 + t437 * t901, pkin(6) * t427 + t404 * t897 + t407 * t901, t472 * t897 + t613 * t901, t452 * t897 + t556 * t901, t462 * t897 + t589 * t901, t471 * t897 + t611 * t901, t463 * t897 + t590 * t901, t495 * t897 + t636 * t901, pkin(6) * t447 + t402 * t897 + t419 * t901, pkin(6) * t449 + t403 * t897 + t421 * t901, pkin(6) * t441 + t401 * t897 + t412 * t901, pkin(6) * t406 + t397 * t897 + t398 * t901; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t859, t860, 0, 0, t797, t915, t799, t796, t1008, 0, t954 + t979, -pkin(1) * t846 - t1023 - t980, t735 + t953, pkin(1) * t833 + pkin(7) * t735, t797, t799, -t915, 0, -t1008, t796, qJ(3) * t975 + t713 * t900 + t954, t731 * t900 + t732 * t896 + t953, t1023 + t896 * t712 + (pkin(1) + t1002) * t846, pkin(7) * t684 + (pkin(1) - t919) * t730, t716 * t900 + t717 * t896, t661 * t900 + t663 * t896, t726 * t900 + t728 * t896, t714 * t900 + t715 * t896, t727 * t900 + t729 * t896, t754 * t900 + t755 * t896, pkin(1) * t718 + pkin(7) * t647 + t583 * t900 + t622 * t896, pkin(1) * t1009 + pkin(7) * t666 + t588 * t900 + t626 * t896, pkin(1) * t750 + pkin(7) * t601 + t543 * t900 + t554 * t896, pkin(1) * t691 + pkin(7) * t523 + t553 * t900 + t565 * t896, t585 * t900 + t587 * t896, t532 * t900 + t534 * t896, t606 * t900 + t608 * t896, t584 * t900 + t586 * t896, t607 * t900 + t609 * t896, t634 * t900 + t635 * t896, pkin(1) * t655 + pkin(7) * t520 + t470 * t900 + t476 * t896, pkin(1) * t659 + pkin(7) * t546 + t474 * t900 + t482 * t896, pkin(1) * t680 + pkin(7) * t489 + t432 * t900 + t433 * t896, pkin(1) * t633 + pkin(7) * t429 + t424 * t900 + t425 * t896, t509 * t900 + t511 * t896, t483 * t900 + t484 * t896, t498 * t900 + t500 * t896, t508 * t900 + t510 * t896, t499 * t900 + t501 * t896, t538 * t900 + t539 * t896, pkin(1) * t572 + pkin(7) * t455 + t415 * t900 + t417 * t896, pkin(1) * t579 + pkin(7) * t457 + t416 * t900 + t418 * t896, pkin(1) * t557 + pkin(7) * t451 + t410 * t900 + t411 * t896, pkin(1) * t458 + pkin(7) * t409 + t399 * t900 + t400 * t896;];
tauB_reg  = t1;
