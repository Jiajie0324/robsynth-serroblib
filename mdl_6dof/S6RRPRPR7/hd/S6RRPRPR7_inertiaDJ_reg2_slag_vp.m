% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR7_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR7_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR7_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:47:43
% EndTime: 2019-03-09 10:47:51
% DurationCPUTime: 2.75s
% Computational Cost: add. (4785->241), mult. (10012->433), div. (0->0), fcn. (9422->8), ass. (0->146)
t171 = cos(qJ(4));
t95 = sin(qJ(2));
t136 = t95 * t171;
t127 = qJD(2) * t136;
t132 = qJD(4) * t171;
t97 = cos(qJ(2));
t89 = t97 * qJD(2);
t94 = sin(qJ(4));
t160 = -t95 * t132 - t94 * t89;
t111 = t127 + t160;
t153 = qJD(4) * t97;
t137 = t94 * t153;
t104 = -t111 - t137;
t155 = cos(pkin(10));
t162 = t95 * t94;
t112 = t97 * t171 + t162;
t154 = qJD(4) * t94;
t43 = t112 * qJD(2) - t97 * t132 - t95 * t154;
t92 = sin(pkin(10));
t22 = t155 * t104 + t43 * t92;
t23 = -t92 * t104 + t155 * t43;
t177 = pkin(2) + pkin(3);
t116 = t171 * pkin(4) + t177;
t148 = t95 * qJD(3);
t156 = t97 * qJ(3);
t26 = (-t116 * t95 + t156) * qJD(2) + t148 - (t137 + t160) * pkin(4);
t185 = t22 * pkin(5) - t23 * pkin(9) + t26;
t93 = sin(qJ(6));
t90 = t93 ^ 2;
t96 = cos(qJ(6));
t91 = t96 ^ 2;
t159 = t90 - t91;
t72 = t159 * qJD(6);
t176 = pkin(7) - pkin(8);
t128 = t176 * t171;
t115 = qJD(4) * t128;
t67 = t97 * t128;
t25 = -qJD(2) * t67 + t97 * t115 - (qJD(2) - qJD(4)) * t176 * t162;
t65 = -t97 * t94 + t136;
t184 = -t43 * qJ(5) - t65 * qJD(5) - t25;
t37 = t155 * t112 + t65 * t92;
t38 = -t92 * t112 + t155 * t65;
t87 = t171 * t177;
t69 = -qJ(3) * t94 - t87;
t68 = -pkin(4) + t69;
t70 = t171 * qJ(3) - t94 * t177;
t41 = t155 * t68 - t92 * t70;
t39 = pkin(5) - t41;
t42 = t155 * t70 + t92 * t68;
t40 = -pkin(9) + t42;
t140 = t94 * t176;
t130 = t97 * t140;
t143 = -qJD(2) * t130 - t95 * t115 + t176 * t127;
t15 = t111 * qJ(5) - qJD(5) * t162 + (-t171 * qJD(5) + (qJ(5) - t176) * t154) * t97 - t143;
t5 = t15 * t92 - t155 * t184;
t182 = -t5 + (t37 * t40 - t38 * t39) * qJD(6);
t45 = t95 * t128 - t130;
t101 = -t65 * qJ(5) + t45;
t46 = t95 * t140 + t67;
t30 = -t112 * qJ(5) + t46;
t19 = t92 * t101 + t155 * t30;
t44 = pkin(1) + (pkin(4) * t94 + qJ(3)) * t95 + t116 * t97;
t99 = t37 * pkin(5) - t38 * pkin(9) + t44;
t98 = t96 * t99;
t8 = -t93 * t19 + t98;
t9 = t96 * t19 + t93 * t99;
t124 = t8 * t93 - t9 * t96;
t151 = qJD(6) * t93;
t6 = t155 * t15 + t184 * t92;
t2 = -qJD(6) * t98 + t19 * t151 - t93 * t185 - t96 * t6;
t3 = -t9 * qJD(6) + t185 * t96 - t93 * t6;
t180 = qJD(6) * t124 + t2 * t93 - t3 * t96;
t179 = 0.2e1 * qJD(3);
t178 = 0.2e1 * qJD(6);
t18 = -t155 * t101 + t30 * t92;
t175 = t18 * t5;
t172 = t5 * t96;
t49 = qJ(3) * t154 - t171 * qJD(3) + qJD(4) * t87;
t50 = t94 * qJD(3) + t70 * qJD(4);
t27 = t155 * t50 - t49 * t92;
t170 = t18 * t27;
t169 = t23 * t96;
t110 = t155 * t171 - t92 * t94;
t168 = t27 * t110;
t167 = t27 * t93;
t166 = t27 * t96;
t165 = t38 * t23;
t164 = t38 * t93;
t63 = t155 * t94 + t92 * t171;
t53 = t63 * qJD(4);
t163 = t110 * t53;
t161 = t96 * t22;
t158 = t90 + t91;
t157 = t95 * qJ(3);
t150 = qJD(6) * t96;
t149 = t95 * qJD(2);
t147 = 0.2e1 * t37 * t22;
t146 = -0.2e1 * pkin(1) * qJD(2);
t145 = t93 * t169;
t85 = -t155 * pkin(4) - pkin(5);
t144 = t85 * t178;
t142 = pkin(7) * t149;
t141 = pkin(7) * t89;
t139 = t93 * t150;
t138 = t95 * t89;
t28 = -t155 * t49 - t92 * t50;
t17 = t158 * t28;
t54 = t110 * qJD(4);
t31 = t158 * t54;
t134 = t158 * t63;
t84 = pkin(4) * t92 + pkin(9);
t133 = t158 * t84;
t131 = qJD(6) * (t39 - t85);
t35 = t38 ^ 2;
t129 = t35 * t139;
t125 = -t8 * t96 - t9 * t93;
t123 = -t110 * t5 + t18 * t53;
t122 = -t97 * pkin(2) - t157;
t121 = -t22 * t84 + t23 * t85;
t120 = t27 * t38 - t28 * t37;
t118 = t110 * t38 + t37 * t63;
t117 = t37 * t84 - t38 * t85;
t13 = t37 * t150 + t22 * t93;
t114 = t38 * t150 + t23 * t93;
t113 = -t38 * t151 + t169;
t108 = -t110 * t23 - t22 * t63 - t37 * t54 + t38 * t53;
t107 = t122 * qJD(2) + t97 * qJD(3);
t1 = t125 * qJD(6) - t2 * t96 - t3 * t93;
t102 = -qJD(6) * t18 - t22 * t40 + t23 * t39 + t120;
t77 = -0.2e1 * t138;
t76 = 0.2e1 * t138;
t75 = -0.2e1 * t139;
t74 = 0.2e1 * t139;
t73 = (-t95 ^ 2 + t97 ^ 2) * qJD(2);
t71 = -pkin(1) + t122;
t64 = -0.2e1 * t72;
t60 = t177 * t97 + pkin(1) + t157;
t51 = -t148 + (pkin(2) * t95 - t156) * qJD(2);
t47 = t148 + (-t177 * t95 + t156) * qJD(2);
t33 = t110 * t151 + t53 * t96;
t32 = -t110 * t150 + t53 * t93;
t24 = qJD(4) * t130 + t143;
t12 = t37 * t151 - t161;
t11 = t38 * t72 - t145;
t10 = 0.4e1 * t38 * t139 + t159 * t23;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0.2e1 * t73, 0, t77, 0, 0, t95 * t146, t97 * t146, 0, 0, t76, 0, -0.2e1 * t73, 0, 0, t77, 0.2e1 * t149 * t71 - 0.2e1 * t51 * t97, 0, -0.2e1 * t51 * t95 - 0.2e1 * t71 * t89, 0.2e1 * t71 * t51, 0.2e1 * t65 * t43, -0.2e1 * t104 * t65 - 0.2e1 * t112 * t43, 0, 0.2e1 * t112 * t104, 0, 0, 0.2e1 * t104 * t60 + 0.2e1 * t112 * t47, 0.2e1 * t43 * t60 + 0.2e1 * t47 * t65, -0.2e1 * t104 * t46 + 0.2e1 * t112 * t24 + 0.2e1 * t25 * t65 - 0.2e1 * t45 * t43, -0.2e1 * t24 * t46 - 0.2e1 * t25 * t45 + 0.2e1 * t47 * t60, 0.2e1 * t165, -0.2e1 * t22 * t38 - 0.2e1 * t23 * t37, 0, t147, 0, 0, 0.2e1 * t22 * t44 + 0.2e1 * t26 * t37, 0.2e1 * t23 * t44 + 0.2e1 * t26 * t38, 0.2e1 * t18 * t23 - 0.2e1 * t19 * t22 - 0.2e1 * t37 * t6 + 0.2e1 * t38 * t5, 0.2e1 * t19 * t6 + 0.2e1 * t26 * t44 + 0.2e1 * t175, 0.2e1 * t165 * t91 - 0.2e1 * t129, t159 * t35 * t178 - 0.4e1 * t145 * t38, 0.2e1 * t113 * t37 + 0.2e1 * t161 * t38, 0.2e1 * t165 * t90 + 0.2e1 * t129, -0.2e1 * t114 * t37 - 0.2e1 * t164 * t22, t147, 0.2e1 * t114 * t18 + 0.2e1 * t164 * t5 + 0.2e1 * t8 * t22 + 0.2e1 * t3 * t37, 0.2e1 * t113 * t18 + 0.2e1 * t172 * t38 + 0.2e1 * t2 * t37 - 0.2e1 * t9 * t22, 0.2e1 * t125 * t23 + 0.2e1 * t180 * t38, -0.2e1 * t2 * t9 + 0.2e1 * t3 * t8 + 0.2e1 * t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t149, 0, -t141, t142, 0, 0, 0, t89, 0, 0, t149, 0, -t141, t107, -t142, t107 * pkin(7), 0, 0, -t43, 0, t104, 0, t25, -t24, -t104 * t70 + t112 * t49 - t69 * t43 + t50 * t65, -t24 * t70 - t25 * t69 - t45 * t50 - t46 * t49, 0, 0, -t23, 0, t22, 0, t5, t6, -t22 * t42 - t23 * t41 + t120, t19 * t28 - t41 * t5 + t42 * t6 + t170, t11, t10, -t13, -t11, t12, 0, t102 * t93 - t182 * t96, t102 * t96 + t182 * t93, -t1, t1 * t40 - t124 * t28 + t5 * t39 + t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t179, qJ(3) * t179, 0, 0, 0, 0, 0, 0, 0.2e1 * t50, -0.2e1 * t49, 0, -0.2e1 * t49 * t70 - 0.2e1 * t50 * t69, 0, 0, 0, 0, 0, 0, 0.2e1 * t27, 0.2e1 * t28, 0, -0.2e1 * t27 * t41 + 0.2e1 * t28 * t42, t74, t64, 0, t75, 0, 0, -0.2e1 * t151 * t39 + 0.2e1 * t166, -0.2e1 * t150 * t39 - 0.2e1 * t167, -0.2e1 * t17, 0.2e1 * t17 * t40 + 0.2e1 * t39 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t141, 0, 0, 0, 0, 0, 0, 0, 0, t111 * t94 + (-t153 * t171 - t43) * t171, -t25 * t171 - t24 * t94 + (t171 * t46 - t45 * t94) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t108, t19 * t54 + t6 * t63 + t123, 0, 0, 0, 0, 0, 0, t108 * t93 - t118 * t150, t108 * t96 + t118 * t151, 0, t1 * t63 - t124 * t54 + t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, t132, 0, -t50 * t171 - t49 * t94 + (t171 * t70 - t69 * t94) * qJD(4), 0, 0, 0, 0, 0, 0, t53, t54, 0, t28 * t63 - t41 * t53 + t42 * t54 - t168, 0, 0, 0, 0, 0, 0, t33, -t32, -t31, t134 * t28 + t31 * t40 + t39 * t53 - t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t54 * t63 - 0.2e1 * t163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t134 * t54 - 0.2e1 * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t104, 0, -t25, t24, 0, 0, 0, 0, t23, 0, -t22, 0, -t5, -t6 (-t155 * t23 - t22 * t92) * pkin(4) (-t155 * t5 + t6 * t92) * pkin(4), -t11, -t10, t13, t11, -t12, 0, -t172 + t121 * t93 + (-t117 * t96 + t18 * t93) * qJD(6), t5 * t93 + t121 * t96 + (t117 * t93 + t18 * t96) * qJD(6), t1, t1 * t84 + t5 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t49, 0, 0, 0, 0, 0, 0, 0, 0, -t27, -t28, 0 (-t155 * t27 + t28 * t92) * pkin(4), t75, 0.2e1 * t72, 0, t74, 0, 0, t131 * t93 - t166, t131 * t96 + t167, t17, t133 * t28 + t27 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t154, -t132, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t54, 0 (-t155 * t53 + t54 * t92) * pkin(4), 0, 0, 0, 0, 0, 0, -t33, t32, t31, t133 * t54 + t53 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t64, 0, t75, 0, 0, t93 * t144, t96 * t144, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, t23, 0, t26, 0, 0, 0, 0, 0, 0, -t12, -t13, -t158 * t23, -t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, -t114, t22, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150, 0, t151, 0, -t150 * t40 - t28 * t93, t151 * t40 - t28 * t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150 * t63 - t54 * t93, t151 * t63 - t54 * t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, 0, -t151, 0, -t84 * t150, t84 * t151, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t151, -t150, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
