% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 14:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR7_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:45:44
% EndTime: 2019-05-06 14:46:04
% DurationCPUTime: 7.50s
% Computational Cost: add. (39359->520), mult. (88187->689), div. (0->0), fcn. (60124->10), ass. (0->322)
t279 = qJD(2) ^ 2;
t274 = sin(qJ(2));
t268 = t274 ^ 2;
t280 = qJD(1) ^ 2;
t343 = t268 * t280;
t243 = t279 + t343;
t278 = cos(qJ(2));
t335 = t278 * t280;
t249 = t274 * t335;
t240 = qJDD(2) - t249;
t336 = t278 * t240;
t396 = pkin(7) * (-t243 * t274 + t336);
t270 = sin(pkin(10));
t273 = sin(qJ(4));
t277 = cos(qJ(4));
t330 = qJD(1) * t278;
t331 = qJD(1) * t274;
t221 = -t273 * t331 - t277 * t330;
t222 = -t273 * t330 + t277 * t331;
t271 = cos(pkin(10));
t191 = -t271 * t221 + t222 * t270;
t193 = t270 * t221 + t271 * t222;
t158 = t193 * t191;
t263 = qJDD(2) - qJDD(4);
t386 = -t158 - t263;
t395 = t270 * t386;
t394 = t271 * t386;
t272 = sin(qJ(6));
t326 = qJD(1) * qJD(2);
t319 = t278 * t326;
t325 = t274 * qJDD(1);
t233 = t319 + t325;
t259 = t278 * qJDD(1);
t320 = t274 * t326;
t234 = t259 - t320;
t311 = t273 * t233 + t277 * t234;
t177 = -qJD(4) * t222 - t311;
t178 = qJD(4) * t221 + t233 * t277 - t273 * t234;
t313 = -t271 * t177 + t178 * t270;
t137 = qJDD(6) + t313;
t264 = qJD(2) - qJD(4);
t276 = cos(qJ(6));
t173 = t193 * t272 + t276 * t264;
t175 = t193 * t276 - t264 * t272;
t141 = t175 * t173;
t387 = t137 - t141;
t393 = t272 * t387;
t199 = t221 * t222;
t385 = t199 - t263;
t392 = t273 * t385;
t391 = t276 * t387;
t390 = t277 * t385;
t389 = t234 - t320;
t352 = t193 * t264;
t120 = t313 - t352;
t275 = sin(qJ(1));
t374 = cos(qJ(1));
t301 = g(1) * t374 + t275 * g(2);
t362 = qJDD(1) * pkin(7);
t224 = -t280 * pkin(1) - t301 + t362;
t341 = t274 * qJ(3);
t373 = pkin(2) * t278;
t307 = -t341 - t373;
t230 = t307 * qJD(1);
t310 = qJD(1) * t230 + t224;
t388 = t274 * t310;
t139 = t177 * t270 + t178 * t271;
t184 = t191 * t264;
t124 = t139 + t184;
t212 = t221 * t264;
t163 = t178 - t212;
t164 = t178 + t212;
t318 = -qJDD(2) * pkin(2) - t279 * qJ(3) + qJDD(3);
t369 = t278 * g(3);
t302 = t318 + t369;
t285 = t302 + (-t233 + t319) * pkin(8);
t384 = -qJDD(2) * pkin(3) + t285;
t380 = t278 ^ 2;
t334 = t380 * t280;
t383 = t336 + (-t279 + t334) * t274;
t188 = qJD(6) + t191;
t314 = t272 * t139 + t276 * t263;
t97 = (qJD(6) - t188) * t175 + t314;
t241 = -qJD(2) * pkin(3) - pkin(8) * t331;
t216 = t278 * t224;
t379 = 2 * qJD(3);
t309 = qJDD(2) * qJ(3) + qJD(2) * t379 + t230 * t330 + t216;
t372 = pkin(2) * t279;
t299 = t309 - t372;
t288 = -pkin(8) * t234 + qJD(2) * t241 + t299;
t284 = -pkin(3) * t334 + t288;
t295 = -pkin(3) * t335 + t310;
t111 = t273 * t284 - (t273 * g(3) + t277 * t295) * t274 - t277 * t384;
t170 = t173 ^ 2;
t171 = t175 ^ 2;
t187 = t188 ^ 2;
t189 = t191 ^ 2;
t190 = t193 ^ 2;
t219 = t221 ^ 2;
t220 = t222 ^ 2;
t381 = t264 ^ 2;
t378 = 2 * qJD(5);
t377 = pkin(2) + pkin(3);
t281 = pkin(4) * t385 - qJ(5) * t164 - t111;
t370 = t274 * g(3);
t112 = t277 * (t284 - t370) + t273 * (t295 * t274 + t384);
t208 = -pkin(4) * t264 - qJ(5) * t222;
t96 = -pkin(4) * t219 + qJ(5) * t177 + t208 * t264 + t112;
t316 = t270 * t96 - t271 * t281;
t49 = t193 * t378 + t316;
t329 = qJD(5) * t191;
t185 = -0.2e1 * t329;
t368 = t270 * t281 + t271 * t96;
t50 = t185 + t368;
t32 = t270 * t50 - t271 * t49;
t376 = pkin(4) * t32;
t125 = t139 - t184;
t300 = -t313 - t352;
t82 = -t125 * t271 + t270 * t300;
t375 = pkin(4) * t82;
t371 = pkin(5) * t270;
t154 = pkin(5) * t191 - pkin(9) * t193;
t36 = t263 * pkin(5) - t381 * pkin(9) + (t378 + t154) * t193 + t316;
t367 = t272 * t36;
t366 = t273 * t32;
t365 = t276 * t36;
t364 = t277 * t32;
t363 = qJ(3) * t278;
t104 = t137 + t141;
t360 = t104 * t272;
t359 = t104 * t276;
t317 = t275 * g(1) - t374 * g(2);
t223 = qJDD(1) * pkin(1) + t280 * pkin(7) + t317;
t286 = pkin(2) * t389 + t223;
t142 = t233 * qJ(3) + t234 * pkin(3) - pkin(8) * t334 + (qJD(2) * t363 + (t379 + t241) * t274) * qJD(1) + t286;
t106 = -t177 * pkin(4) - t219 * qJ(5) + t222 * t208 + qJDD(5) + t142;
t358 = t106 * t270;
t357 = t106 * t271;
t151 = -t158 + t263;
t356 = t151 * t270;
t355 = t151 * t271;
t354 = t188 * t272;
t353 = t188 * t276;
t195 = t199 + t263;
t351 = t195 * t273;
t350 = t195 * t277;
t347 = t264 * t270;
t346 = t264 * t271;
t345 = t264 * t273;
t344 = t264 * t277;
t342 = t273 * t142;
t340 = t274 * t224;
t235 = t259 - 0.2e1 * t320;
t339 = t274 * t235;
t239 = qJDD(2) + t249;
t338 = t274 * t239;
t337 = t277 * t142;
t245 = -t279 - t334;
t333 = pkin(7) * (t245 * t278 - t338) + pkin(1) * t235;
t324 = t268 + t380;
t237 = t324 * t280;
t332 = pkin(1) * t237 + t324 * t362;
t327 = qJD(6) + t188;
t323 = t270 * t141;
t322 = t271 * t141;
t321 = -pkin(5) * t271 - pkin(4);
t37 = -pkin(5) * t381 - pkin(9) * t263 - t154 * t191 + t50;
t61 = pkin(5) * t120 - pkin(9) * t124 + t106;
t30 = t272 * t37 - t276 * t61;
t31 = t272 * t61 + t276 * t37;
t15 = t272 * t30 + t276 * t31;
t33 = t270 * t49 + t271 * t50;
t206 = t340 + t369;
t207 = t216 - t370;
t312 = t206 * t274 + t278 * t207;
t180 = -t190 - t381;
t129 = t180 * t271 + t356;
t308 = -pkin(4) * t129 + t368;
t306 = t233 + t319;
t14 = t272 * t31 - t276 * t30;
t75 = -t111 * t277 + t112 * t273;
t76 = t273 * t111 + t277 * t112;
t304 = -t276 * t139 + t272 * t263;
t232 = 0.2e1 * t319 + t325;
t303 = t232 * t278 + t339;
t298 = t309 - t370;
t11 = t15 * t270 - t271 * t36;
t297 = pkin(4) * t11 - pkin(5) * t36 + pkin(9) * t15;
t296 = t278 * t377 + pkin(1) + t341;
t294 = (-qJD(4) - t264) * t222 - t311;
t114 = -qJD(6) * t173 - t304;
t150 = -t381 - t189;
t109 = t150 * t270 + t394;
t293 = pkin(4) * t109 - t49;
t128 = -t187 - t170;
t69 = t128 * t276 - t393;
t98 = -t175 * t327 - t314;
t42 = t270 * t69 + t271 * t98;
t292 = pkin(4) * t42 + pkin(5) * t98 + pkin(9) * t69 - t365;
t102 = t173 * t327 + t304;
t135 = -t171 - t187;
t74 = -t135 * t272 - t359;
t46 = t102 * t271 + t270 * t74;
t291 = pkin(4) * t46 + pkin(5) * t102 + pkin(9) * t74 + t367;
t290 = t318 + t388;
t119 = t170 + t171;
t147 = t188 * t173;
t101 = t114 + t147;
t59 = t101 * t272 - t276 * t97;
t38 = t119 * t271 + t270 * t59;
t289 = pkin(4) * t38 + pkin(5) * t119 + pkin(9) * t59 + t15;
t283 = t331 * t379 + t286;
t238 = (t268 - t380) * t280;
t210 = -t220 + t381;
t209 = t219 - t381;
t205 = -t220 - t381;
t204 = t338 + t278 * (t279 - t343);
t203 = t306 * t274;
t202 = t389 * t278;
t198 = t220 - t219;
t194 = -t381 - t219;
t182 = -t190 + t381;
t181 = t189 - t381;
t176 = t290 + t369;
t169 = t298 - t372;
t166 = -t205 * t273 + t350;
t165 = t205 * t277 + t351;
t159 = (qJD(4) - t264) * t222 + t311;
t157 = t194 * t277 - t392;
t156 = t194 * t273 + t390;
t155 = t190 - t189;
t146 = -t171 + t187;
t145 = t170 - t187;
t144 = (t191 * t271 - t193 * t270) * t264;
t143 = (t191 * t270 + t193 * t271) * t264;
t140 = t171 - t170;
t136 = -t189 - t190;
t134 = t181 * t271 + t356;
t133 = -t182 * t270 + t394;
t132 = t181 * t270 - t355;
t131 = t182 * t271 + t395;
t130 = -t180 * t270 + t355;
t127 = t164 * t273 + t277 * t294;
t126 = -t164 * t277 + t273 * t294;
t118 = t139 * t271 + t193 * t347;
t117 = t139 * t270 - t193 * t346;
t116 = -t191 * t346 + t270 * t313;
t115 = -t191 * t347 - t271 * t313;
t113 = -qJD(6) * t175 - t314;
t110 = t150 * t271 - t395;
t108 = (-t173 * t276 + t175 * t272) * t188;
t107 = (-t173 * t272 - t175 * t276) * t188;
t100 = t114 - t147;
t95 = t114 * t276 - t175 * t354;
t94 = t114 * t272 + t175 * t353;
t93 = -t113 * t272 + t173 * t353;
t92 = -t113 * t276 - t173 * t354;
t88 = -t129 * t273 + t130 * t277;
t87 = t129 * t277 + t130 * t273;
t86 = t108 * t271 + t137 * t270;
t85 = t108 * t270 - t137 * t271;
t84 = t125 * t270 + t271 * t300;
t83 = -t120 * t271 - t124 * t270;
t81 = -t120 * t270 + t124 * t271;
t80 = t145 * t276 - t360;
t79 = -t146 * t272 + t391;
t78 = t145 * t272 + t359;
t77 = t146 * t276 + t393;
t73 = t135 * t276 - t360;
t72 = -qJ(5) * t129 + t357;
t71 = -t109 * t273 + t110 * t277;
t70 = t109 * t277 + t110 * t273;
t68 = t128 * t272 + t391;
t67 = t271 * t95 + t323;
t66 = t271 * t93 - t323;
t65 = t270 * t95 - t322;
t64 = t270 * t93 + t322;
t63 = -qJ(5) * t109 + t358;
t62 = -pkin(4) * t124 + qJ(5) * t130 + t358;
t58 = -t100 * t272 + t276 * t98;
t57 = -t101 * t276 - t272 * t97;
t56 = t100 * t276 + t272 * t98;
t55 = -pkin(4) * t120 + qJ(5) * t110 - t357;
t54 = -t270 * t97 + t271 * t80;
t53 = t101 * t270 + t271 * t79;
t52 = t270 * t80 + t271 * t97;
t51 = -t101 * t271 + t270 * t79;
t47 = -t102 * t270 + t271 * t74;
t45 = -t273 * t82 + t277 * t84;
t44 = t273 * t84 + t277 * t82;
t43 = -t270 * t98 + t271 * t69;
t41 = t140 * t270 + t271 * t58;
t40 = -t140 * t271 + t270 * t58;
t39 = -t119 * t270 + t271 * t59;
t35 = -pkin(9) * t73 + t365;
t34 = -pkin(9) * t68 + t367;
t29 = -t273 * t46 + t277 * t47;
t28 = t273 * t47 + t277 * t46;
t26 = -t273 * t42 + t277 * t43;
t25 = t273 * t43 + t277 * t42;
t24 = -t273 * t38 + t277 * t39;
t23 = t273 * t39 + t277 * t38;
t22 = -pkin(4) * t106 + qJ(5) * t33;
t21 = -qJ(5) * t82 - t32;
t20 = -pkin(5) * t73 + t31;
t19 = -pkin(5) * t68 + t30;
t18 = -pkin(4) * t136 + qJ(5) * t84 + t33;
t17 = t277 * t33 - t366;
t16 = t273 * t33 + t364;
t13 = -pkin(9) * t57 - t14;
t12 = t15 * t271 + t270 * t36;
t10 = -qJ(5) * t46 - t20 * t270 + t271 * t35;
t9 = -qJ(5) * t42 - t19 * t270 + t271 * t34;
t8 = -pkin(4) * t73 + qJ(5) * t47 + t20 * t271 + t270 * t35;
t7 = -pkin(4) * t68 + qJ(5) * t43 + t19 * t271 + t270 * t34;
t6 = -qJ(5) * t38 + t13 * t271 + t371 * t57;
t5 = qJ(5) * t39 + t270 * t13 + t321 * t57;
t4 = -t11 * t273 + t12 * t277;
t3 = t11 * t277 + t12 * t273;
t2 = -qJ(5) * t11 + (-pkin(9) * t271 + t371) * t14;
t1 = qJ(5) * t12 + (-pkin(9) * t270 + t321) * t14;
t27 = [0, 0, 0, 0, 0, qJDD(1), t317, t301, 0, 0, t203, t303, t204, t202, t383, 0, t223 * t278 + t333, -pkin(1) * t232 - t274 * t223 - t396, t312 + t332, pkin(1) * t223 + pkin(7) * t312, t203, t204, -t303, 0, -t383, t202, t278 * (pkin(2) * t235 + t283) + (t278 * t306 + t339) * qJ(3) + t333, t278 * (pkin(2) * t237 + t299) + (qJ(3) * t237 + t290) * t274 + t332, t274 * t283 + t396 + (pkin(1) + t373) * t232 + (t232 + t306) * t341, pkin(7) * (t169 * t278 + t176 * t274) + (pkin(1) - t307) * (qJ(3) * t306 + t283), t274 * (t178 * t277 + t222 * t345) + t278 * (-t178 * t273 + t222 * t344), t274 * (-t159 * t277 - t163 * t273) + t278 * (t159 * t273 - t163 * t277), t274 * (-t210 * t273 + t390) + t278 * (-t210 * t277 - t392), t274 * (-t177 * t273 + t221 * t344) + t278 * (-t177 * t277 - t221 * t345), t274 * (t209 * t277 + t351) + t278 * (-t209 * t273 + t350), (t274 * (-t221 * t277 - t222 * t273) + t278 * (t221 * t273 - t222 * t277)) * t264, t274 * (-pkin(8) * t156 + t342) + t278 * (-pkin(8) * t157 + t337) + pkin(7) * (t156 * t274 + t157 * t278) + t296 * t159, t274 * (-pkin(8) * t165 + t337) + t278 * (-pkin(8) * t166 - t342) + pkin(7) * (t165 * t274 + t166 * t278) + t296 * t163, t274 * (-pkin(8) * t126 - t75) + t278 * (-pkin(8) * t127 - t76) + pkin(7) * (t126 * t274 + t127 * t278) + t296 * (-t219 - t220), t142 * t296 + (pkin(7) - pkin(8)) * (t274 * t75 + t278 * t76), t274 * (-t117 * t273 + t118 * t277) + t278 * (-t117 * t277 - t118 * t273), t274 * (-t273 * t81 + t277 * t83) + t278 * (-t273 * t83 - t277 * t81), t274 * (-t131 * t273 + t133 * t277) + t278 * (-t131 * t277 - t133 * t273), t274 * (-t115 * t273 + t116 * t277) + t278 * (-t115 * t277 - t116 * t273), t274 * (-t132 * t273 + t134 * t277) + t278 * (-t132 * t277 - t134 * t273), t274 * (-t143 * t273 + t144 * t277) + t278 * (-t143 * t277 - t144 * t273), t274 * (-pkin(8) * t70 - t273 * t55 + t277 * t63) + t278 * (-pkin(8) * t71 - t273 * t63 - t277 * t55) + pkin(7) * (t274 * t70 + t278 * t71) + t296 * t120, t274 * (-pkin(8) * t87 - t273 * t62 + t277 * t72) + t278 * (-pkin(8) * t88 - t273 * t72 - t277 * t62) + pkin(7) * (t274 * t87 + t278 * t88) + t296 * t124, t274 * (-pkin(8) * t44 - t18 * t273 + t21 * t277) + t278 * (-pkin(8) * t45 - t277 * t18 - t273 * t21) + pkin(7) * (t274 * t44 + t278 * t45) + t296 * t136, t274 * (-pkin(8) * t16 - qJ(5) * t364 - t22 * t273) + t278 * (-pkin(8) * t17 + qJ(5) * t366 - t277 * t22) + pkin(7) * (t16 * t274 + t17 * t278) + t296 * t106, t274 * (-t273 * t65 + t277 * t67) + t278 * (-t273 * t67 - t277 * t65), t274 * (-t273 * t40 + t277 * t41) + t278 * (-t273 * t41 - t277 * t40), t274 * (-t273 * t51 + t277 * t53) + t278 * (-t273 * t53 - t277 * t51), t274 * (-t273 * t64 + t277 * t66) + t278 * (-t273 * t66 - t277 * t64), t274 * (-t273 * t52 + t277 * t54) + t278 * (-t273 * t54 - t277 * t52), t274 * (-t273 * t85 + t277 * t86) + t278 * (-t273 * t86 - t277 * t85), t274 * (-pkin(8) * t25 - t273 * t7 + t277 * t9) + t278 * (-pkin(8) * t26 - t273 * t9 - t277 * t7) + pkin(7) * (t25 * t274 + t26 * t278) + t296 * t68, t274 * (-pkin(8) * t28 + t10 * t277 - t273 * t8) + t278 * (-pkin(8) * t29 - t273 * t10 - t277 * t8) + pkin(7) * (t274 * t28 + t278 * t29) + t296 * t73, t274 * (-pkin(8) * t23 - t273 * t5 + t277 * t6) + t278 * (-pkin(8) * t24 - t273 * t6 - t277 * t5) + pkin(7) * (t23 * t274 + t24 * t278) + t296 * t57, t274 * (-pkin(8) * t3 - t1 * t273 + t2 * t277) + t278 * (-pkin(8) * t4 - t277 * t1 - t273 * t2) + pkin(7) * (t274 * t3 + t278 * t4) + t296 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249, t238, t325, t249, t259, qJDD(2), -t206, -t207, 0, 0, -t249, t325, -t238, qJDD(2), -t259, t249, pkin(2) * t239 + qJ(3) * t245 - t302 - t388, (-pkin(2) * t274 + t363) * qJDD(1), qJ(3) * t240 + (t243 - t279) * pkin(2) + t298, -pkin(2) * t176 + qJ(3) * t169, t199, -t198, -t164, -t199, -t294, t263, -pkin(2) * t156 + qJ(3) * t157 + t273 * (t288 - t370) - t277 * (t230 * t331 + t285 + t340) + (t239 * t277 - t273 * t334 - t156) * pkin(3), qJ(3) * t166 - t165 * t377 + t112, qJ(3) * t127 - t126 * t377, qJ(3) * t76 - t377 * t75, -t158, -t155, -t125, t158, -t300, t263, qJ(3) * t71 - t377 * t70 - t293, qJ(3) * t88 - t377 * t87 + t185 + t308, qJ(3) * t45 - t377 * t44 - t375, qJ(3) * t17 - t16 * t377 - t376, -t94, -t56, -t77, t92, -t78, -t107, qJ(3) * t26 - t25 * t377 - t292, qJ(3) * t29 - t28 * t377 - t291, qJ(3) * t24 - t23 * t377 - t289, qJ(3) * t4 - t3 * t377 - t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, t325, -t243, t176, 0, 0, 0, 0, 0, 0, t156, t165, t126, t75, 0, 0, 0, 0, 0, 0, t70, t87, t44, t16, 0, 0, 0, 0, 0, 0, t25, t28, t23, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t199, t198, t164, t199, t294, -t263, -t111, -t112, 0, 0, t158, t155, t125, -t158, t300, -t263, t293, -t308 + 0.2e1 * t329, t375, t376, t94, t56, t77, -t92, t78, t107, t292, t291, t289, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, t124, t136, t106, 0, 0, 0, 0, 0, 0, t68, t73, t57, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t140, t101, -t141, -t97, t137, -t30, -t31, 0, 0;];
tauJ_reg  = t27;
