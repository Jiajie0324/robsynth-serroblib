% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPR7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR7_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:47:51
% EndTime: 2019-03-09 10:48:07
% DurationCPUTime: 9.03s
% Computational Cost: add. (13101->684), mult. (28656->815), div. (0->0), fcn. (20118->12), ass. (0->340)
t251 = qJD(2) - qJD(4);
t261 = sin(qJ(6));
t265 = cos(qJ(6));
t266 = cos(qJ(4));
t267 = cos(qJ(2));
t381 = t266 * t267;
t262 = sin(qJ(4));
t263 = sin(qJ(2));
t387 = t262 * t263;
t162 = t381 + t387;
t146 = t162 * qJD(1);
t362 = qJD(1) * t267;
t363 = qJD(1) * t263;
t148 = -t262 * t362 + t266 * t363;
t258 = sin(pkin(10));
t398 = cos(pkin(10));
t301 = -t258 * t146 + t148 * t398;
t313 = t251 * t261 - t265 * t301;
t431 = t398 * t146 + t258 * t148;
t443 = qJD(6) + t431;
t458 = t261 * t443;
t466 = t313 * t458;
t418 = t313 * t301;
t297 = t162 * qJD(4);
t355 = qJD(1) * qJD(2);
t343 = t263 * t355;
t354 = t267 * qJDD(1);
t445 = t343 - t354;
t238 = t263 * qJDD(1);
t342 = t267 * t355;
t446 = -t342 - t238;
t69 = qJD(1) * t297 - t445 * t262 + t446 * t266;
t358 = qJD(4) * t266;
t359 = qJD(4) * t262;
t360 = qJD(2) * t267;
t456 = t262 * t360 + t263 * t358 - t267 * t359;
t70 = t456 * qJD(1) + qJDD(1) * t162 - t266 * t343;
t44 = -t258 * t69 + t398 * t70;
t43 = qJDD(6) + t44;
t406 = t261 * t43;
t457 = t265 * t443;
t444 = -t443 * t457 - t406;
t465 = t418 - t444;
t250 = qJDD(2) - qJDD(4);
t303 = t258 * t70 + t398 * t69;
t356 = qJD(6) * t265;
t357 = qJD(6) * t261;
t29 = t261 * t250 + t251 * t356 + t265 * t303 + t301 * t357;
t30 = -qJD(6) * t313 + t265 * t250 - t261 * t303;
t71 = t265 * t251 + t261 * t301;
t413 = -t261 * t30 - t71 * t356;
t420 = t71 * t431;
t464 = (t29 + t420) * t265 - t413;
t401 = t29 * t261;
t463 = t313 * t457 + t401;
t394 = qJ(5) * t148;
t233 = pkin(7) * t363;
t168 = pkin(8) * t363 - t233;
t427 = pkin(2) + pkin(3);
t346 = t427 * qJD(2);
t126 = qJD(3) - t346 - t168;
t234 = pkin(7) * t362;
t170 = -pkin(8) * t362 + t234;
t254 = qJD(2) * qJ(3);
t149 = t170 + t254;
t79 = t266 * t126 - t149 * t262;
t61 = t79 - t394;
t58 = -pkin(4) * t251 + t61;
t395 = qJ(5) * t146;
t80 = t126 * t262 + t149 * t266;
t62 = t80 - t395;
t59 = t398 * t62;
t34 = t258 * t58 + t59;
t32 = -pkin(9) * t251 + t34;
t150 = -qJD(1) * pkin(1) - pkin(2) * t362 - qJ(3) * t363;
t123 = pkin(3) * t362 - t150;
t83 = pkin(4) * t146 + qJD(5) + t123;
t37 = pkin(5) * t431 - pkin(9) * t301 + t83;
t11 = -t261 * t32 + t265 * t37;
t462 = t11 * t443;
t12 = t261 * t37 + t265 * t32;
t461 = t12 * t443;
t407 = t258 * t62;
t33 = t398 * t58 - t407;
t31 = t251 * pkin(5) - t33;
t460 = t31 * t443;
t228 = pkin(7) * t238;
t341 = pkin(7) * t342 + qJDD(3) + t228;
t95 = t446 * pkin(8) - t427 * qJDD(2) + t341;
t229 = pkin(7) * t354;
t252 = qJDD(2) * qJ(3);
t253 = qJD(2) * qJD(3);
t124 = -pkin(7) * t343 + t229 + t252 + t253;
t97 = t445 * pkin(8) + t124;
t39 = -t80 * qJD(4) - t262 * t97 + t266 * t95;
t399 = t431 * t251;
t455 = t303 + t399;
t416 = t431 ^ 2;
t417 = t301 ^ 2;
t454 = t416 - t417;
t453 = t11 * t301;
t452 = t12 * t301;
t451 = t33 * t431;
t421 = t71 * t301;
t450 = t443 * t301;
t408 = t251 * t301;
t449 = -t44 - t408;
t435 = t146 * t251 + t69;
t448 = t431 * t301;
t264 = sin(qJ(1));
t379 = t267 * t262;
t385 = t263 * t266;
t311 = t379 - t385;
t133 = t311 * t264;
t268 = cos(qJ(1));
t384 = t263 * t268;
t349 = t266 * t384;
t378 = t267 * t268;
t350 = t262 * t378;
t135 = -t349 + t350;
t447 = g(1) * t135 + g(2) * t133 + g(3) * t162 - t123 * t148 + t39;
t239 = t263 * qJD(3);
t257 = qJDD(1) * pkin(1);
t314 = pkin(2) * t354 - t446 * qJ(3) + qJD(1) * t239 + t257;
t325 = t263 * t346;
t74 = pkin(3) * t354 - qJD(1) * t325 + t314;
t49 = t70 * pkin(4) + qJDD(5) + t74;
t10 = t44 * pkin(5) + pkin(9) * t303 + t49;
t21 = -pkin(4) * t250 + qJ(5) * t69 - qJD(5) * t148 + t39;
t38 = t126 * t358 - t149 * t359 + t262 * t95 + t266 * t97;
t27 = -qJ(5) * t70 - qJD(5) * t146 + t38;
t8 = t258 * t21 + t398 * t27;
t6 = -pkin(9) * t250 + t8;
t1 = qJD(6) * t11 + t261 * t10 + t265 * t6;
t442 = -t11 * t431 + t1;
t9 = t265 * t10;
t2 = -qJD(6) * t12 - t261 * t6 + t9;
t441 = -t12 * t431 - t2;
t353 = qJ(4) + pkin(10);
t237 = sin(t353);
t337 = cos(t353);
t137 = t263 * t237 + t267 * t337;
t121 = t137 * t268;
t119 = t137 * t264;
t315 = t263 * t337;
t138 = -t267 * t237 + t315;
t319 = g(2) * t119 + g(3) * t138;
t295 = g(1) * t121 + t319;
t440 = t83 * t431 + t295 - t8;
t118 = t138 * t264;
t120 = t237 * t378 - t268 * t315;
t296 = g(1) * t120 - g(2) * t118 + g(3) * t137;
t414 = -t398 * t21 + t258 * t27;
t439 = -t83 * t301 + t296 - t414;
t438 = pkin(5) * t301 + pkin(9) * t431;
t368 = t267 * pkin(2) + t263 * qJ(3);
t437 = -pkin(1) - t368;
t434 = t148 * t251 + t70;
t426 = pkin(7) - pkin(8);
t188 = t426 * t263;
t189 = t426 * t267;
t114 = t262 * t188 + t266 * t189;
t227 = pkin(4) * t266 + pkin(3);
t433 = t267 * t227 + t368;
t173 = -qJ(3) * t262 - t266 * t427;
t249 = g(1) * t268;
t432 = g(2) * t264 + t249;
t429 = t263 * t432;
t397 = pkin(7) * qJDD(2);
t428 = (qJD(1) * t437 + t150) * qJD(2) - t397;
t425 = pkin(4) * t264;
t424 = g(1) * t119;
t248 = g(1) * t264;
t423 = g(2) * t268;
t422 = t148 * pkin(4);
t242 = t267 * pkin(3);
t419 = t313 * t71;
t415 = pkin(2) + t227;
t129 = t266 * qJD(3) + qJD(4) * t173;
t174 = qJ(3) * t266 - t262 * t427;
t130 = -t262 * qJD(3) - qJD(4) * t174;
t104 = -t168 * t262 + t170 * t266;
t289 = t104 - t395;
t105 = t266 * t168 + t262 * t170;
t75 = t105 + t394;
t412 = (-t130 + t289) * t398 + (t129 - t75) * t258;
t48 = t258 * t289 + t398 * t75;
t77 = t129 * t398 + t258 * t130;
t411 = t77 - t48;
t410 = t251 * t79;
t409 = t251 * t80;
t405 = t261 * t71;
t404 = t261 * t313;
t41 = t265 * t43;
t403 = t265 * t71;
t402 = t265 * t313;
t400 = t30 * t265;
t393 = qJD(6) * t443;
t392 = qJDD(2) * pkin(2);
t390 = t148 * t146;
t386 = t263 * t264;
t271 = qJD(1) ^ 2;
t383 = t263 * t271;
t382 = t264 * t267;
t375 = t129 - t105;
t374 = t130 - t104;
t161 = t258 * t266 + t262 * t398;
t373 = t251 * t161;
t300 = -t258 * t262 + t266 * t398;
t143 = t300 * qJD(2);
t144 = t300 * qJD(4);
t372 = -t144 + t143;
t167 = -pkin(4) + t173;
t107 = t258 * t167 + t398 * t174;
t244 = t268 * pkin(7);
t260 = -qJ(5) - pkin(8);
t370 = t268 * t260 + t244;
t369 = qJ(3) * t360 + t239;
t367 = t268 * pkin(1) + t264 * pkin(7);
t255 = t263 ^ 2;
t256 = t267 ^ 2;
t365 = -t255 + t256;
t364 = t255 + t256;
t361 = qJD(2) * t263;
t210 = pkin(4) * t387;
t99 = -t258 * t162 - t311 * t398;
t352 = t99 * t357;
t351 = t99 * t356;
t348 = t242 + t368;
t347 = -g(1) * t384 - g(2) * t386 + g(3) * t267;
t344 = t146 ^ 2 - t148 ^ 2;
t340 = t248 - t423;
t332 = -qJD(2) * pkin(2) + qJD(3);
t111 = -t143 * t261 + t265 * t363;
t331 = -t144 * t261 - t111;
t112 = t143 * t265 + t261 * t363;
t330 = t144 * t265 - t112;
t156 = pkin(1) + t348;
t328 = t251 ^ 2;
t327 = pkin(2) * t378 + qJ(3) * t384 + t367;
t326 = -t228 - t347;
t324 = t263 * t342;
t323 = t364 * qJDD(1) * pkin(7);
t270 = qJD(2) ^ 2;
t322 = pkin(7) * t270 + t423;
t321 = -g(1) * t118 - g(2) * t120;
t108 = -t266 * t361 + t456;
t109 = qJD(2) * t162 - t297;
t56 = -t258 * t108 + t109 * t398;
t318 = t43 * t99 + t443 * t56;
t317 = -qJD(6) * t32 - t423;
t316 = -t11 * t265 - t12 * t261;
t110 = pkin(4) * t162 + t156;
t98 = t162 * t398 - t258 * t311;
t51 = pkin(5) * t98 - pkin(9) * t99 + t110;
t113 = t188 * t266 - t189 * t262;
t288 = qJ(5) * t311 + t113;
t82 = -qJ(5) * t162 + t114;
t53 = t258 * t288 + t398 * t82;
t23 = -t261 * t53 + t265 * t51;
t24 = t261 * t51 + t265 * t53;
t177 = t233 + t332;
t182 = t234 + t254;
t312 = t177 * t267 - t182 * t263;
t310 = t41 + (-t261 * t431 - t357) * t443;
t184 = t379 * t425;
t308 = pkin(5) * t118 + pkin(9) * t119 - t184;
t187 = pkin(4) * t350;
t307 = -pkin(5) * t120 + pkin(9) * t121 - t187;
t306 = -pkin(5) * t137 + pkin(9) * t138 - t210;
t224 = qJ(3) * t362;
t132 = -t363 * t427 + t224;
t305 = qJD(6) * t31 * t99 + t424;
t131 = t341 - t392;
t304 = -0.2e1 * pkin(1) * t355 - t397;
t217 = pkin(4) * t258 + pkin(9);
t302 = -t217 * t43 + t460;
t106 = t167 * t398 - t258 * t174;
t116 = -t325 + t369;
t5 = pkin(5) * t250 + t414;
t299 = t31 * t56 + t5 * t99 + t249;
t169 = t426 * t361;
t171 = qJD(2) * t189;
t63 = -t266 * t169 + t262 * t171 + t188 * t358 - t189 * t359;
t293 = t268 * t210 + t227 * t378 + t264 * t260 + t327;
t292 = -t322 + 0.2e1 * t257;
t290 = t296 - t5;
t287 = -qJD(6) * t37 + t319 - t6;
t94 = t132 - t422;
t103 = -pkin(9) + t107;
t284 = -t103 * t43 - t443 * t77 - t460;
t67 = t108 * pkin(4) + t116;
t282 = t415 * t429;
t139 = pkin(2) * t361 - t369;
t93 = pkin(2) * t343 - t314;
t281 = -qJD(1) * t139 - qJDD(1) * t437 - t322 - t93;
t280 = t103 * t393 + t290;
t279 = t217 * t393 - t290;
t278 = qJD(6) * t316 + t1 * t265 - t2 * t261;
t277 = (-pkin(1) - t415 * t267 + (-pkin(4) * t262 - qJ(3)) * t263) * t248;
t276 = qJD(2) * t312 + t124 * t267 + t131 * t263;
t64 = -qJD(4) * t114 + t262 * t169 + t266 * t171;
t134 = t162 * t264;
t136 = t162 * t268;
t274 = -g(1) * t136 - g(2) * t134 + g(3) * t311 - t123 * t146 + t38;
t273 = -qJ(5) * t109 + qJD(5) * t311 + t64;
t218 = -pkin(4) * t398 - pkin(5);
t213 = g(1) * t382;
t206 = qJ(3) * t378;
t204 = qJ(3) * t382;
t201 = t267 * t383;
t186 = pkin(4) * t349;
t183 = t385 * t425;
t181 = t365 * t271;
t180 = qJDD(2) * t267 - t263 * t270;
t179 = qJDD(2) * t263 + t267 * t270;
t166 = pkin(2) * t363 - t224;
t158 = qJDD(1) * t256 - 0.2e1 * t324;
t157 = qJDD(1) * t255 + 0.2e1 * t324;
t125 = t263 * t354 + t355 * t365;
t102 = pkin(5) - t106;
t101 = t121 * t265 - t261 * t264;
t100 = -t121 * t261 - t264 * t265;
t55 = t108 * t398 + t109 * t258;
t52 = t258 * t82 - t288 * t398;
t50 = t422 + t438;
t46 = -qJ(5) * t108 - qJD(5) * t162 + t63;
t40 = -t438 + t94;
t36 = t398 * t61 - t407;
t35 = t258 * t61 + t59;
t22 = pkin(5) * t55 - pkin(9) * t56 + t67;
t18 = t258 * t273 + t398 * t46;
t17 = t258 * t46 - t273 * t398;
t16 = t261 * t40 + t265 * t48;
t15 = -t261 * t48 + t265 * t40;
t14 = t261 * t50 + t265 * t36;
t13 = -t261 * t36 + t265 * t50;
t4 = -qJD(6) * t24 - t261 * t18 + t265 * t22;
t3 = qJD(6) * t23 + t265 * t18 + t261 * t22;
t7 = [0, 0, 0, 0, 0, qJDD(1), t340, t432, 0, 0, t157, 0.2e1 * t125, t179, t158, t180, 0, t263 * t304 + t267 * t292 + t213, t304 * t267 + (-t292 - t248) * t263, 0.2e1 * t323 - t432, -g(1) * (-pkin(1) * t264 + t244) - g(2) * t367 + (pkin(7) ^ 2 * t364 + pkin(1) ^ 2) * qJDD(1), t157, t179, -0.2e1 * t125, 0, -t180, t158, t263 * t428 + t281 * t267 + t213, t323 + t276 - t432, -t428 * t267 + (t281 + t248) * t263, pkin(7) * t276 - g(1) * t244 - g(2) * t327 + t150 * t139 + (-t248 + t93) * t437, t109 * t148 + t311 * t69, -t108 * t148 - t109 * t146 + t162 * t69 + t311 * t70, -t109 * t251 + t250 * t311, t108 * t146 + t162 * t70, t108 * t251 + t162 * t250, 0, g(1) * t134 - g(2) * t136 + t108 * t123 - t113 * t250 + t116 * t146 + t156 * t70 + t162 * t74 - t251 * t64, -g(1) * t133 + g(2) * t135 + t109 * t123 + t114 * t250 + t116 * t148 - t156 * t69 + t251 * t63 - t311 * t74, -t108 * t80 - t109 * t79 + t113 * t69 - t114 * t70 - t146 * t63 - t148 * t64 - t162 * t38 + t311 * t39 + t432, t38 * t114 + t80 * t63 + t39 * t113 + t79 * t64 + t74 * t156 + t123 * t116 - g(1) * (-pkin(8) * t268 + t244) - g(2) * (pkin(3) * t378 + t327) + (-g(1) * (t437 - t242) + g(2) * pkin(8)) * t264, t301 * t56 - t303 * t99, -t301 * t55 + t303 * t98 - t431 * t56 - t99 * t44, -t250 * t99 - t251 * t56, t431 * t55 + t44 * t98, t250 * t98 + t251 * t55, 0, -g(2) * t121 + t110 * t44 + t17 * t251 + t250 * t52 + t431 * t67 + t49 * t98 + t55 * t83 + t424, -t110 * t303 + t18 * t251 + t53 * t250 + t301 * t67 + t49 * t99 + t83 * t56 - t321, t17 * t301 - t18 * t431 - t303 * t52 - t33 * t56 - t34 * t55 + t414 * t99 - t53 * t44 - t8 * t98 + t432, -g(1) * t370 - g(2) * t293 + t49 * t110 - t33 * t17 + t34 * t18 + t414 * t52 + t8 * t53 + t83 * t67 - t277, t313 * t352 + (-t29 * t99 - t313 * t56) * t265 (-t403 + t404) * t56 + (t401 - t400 + (t402 + t405) * qJD(6)) * t99, t265 * t318 - t29 * t98 - t313 * t55 - t352 * t443, t71 * t351 + (t30 * t99 + t56 * t71) * t261, -t261 * t318 - t30 * t98 - t351 * t443 - t71 * t55, t43 * t98 + t443 * t55, -g(2) * t101 + t11 * t55 + t17 * t71 + t2 * t98 + t23 * t43 + t261 * t299 + t265 * t305 + t52 * t30 + t4 * t443, -g(2) * t100 - t1 * t98 - t12 * t55 - t17 * t313 - t24 * t43 - t261 * t305 + t265 * t299 - t52 * t29 - t3 * t443, t23 * t29 - t24 * t30 - t3 * t71 + t4 * t313 + t316 * t56 + (-t1 * t261 - t2 * t265 + (t11 * t261 - t12 * t265) * qJD(6)) * t99 + t321, t1 * t24 + t12 * t3 + t2 * t23 + t11 * t4 + t5 * t52 + t31 * t17 - g(1) * (-pkin(5) * t119 + pkin(9) * t118 + t370) - g(2) * (pkin(5) * t121 + pkin(9) * t120 + t293) - t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t201, -t181, t238, t201, t354, qJDD(2), pkin(1) * t383 + t326, g(3) * t263 - t229 + (pkin(1) * t271 + t432) * t267, 0, 0, -t201, t238, t181, qJDD(2), -t354, t201, 0.2e1 * t392 - qJDD(3) + (-t150 * t263 + t166 * t267) * qJD(1) + t326 (-pkin(2) * t263 + qJ(3) * t267) * qJDD(1) + ((t182 - t254) * t263 + (-t177 + t332) * t267) * qJD(1), t229 + 0.2e1 * t252 + 0.2e1 * t253 + (qJD(1) * t166 - g(3)) * t263 + (qJD(1) * t150 - t432) * t267, t124 * qJ(3) + t182 * qJD(3) - t131 * pkin(2) - t150 * t166 - g(1) * (-pkin(2) * t384 + t206) - g(2) * (-pkin(2) * t386 + t204) - g(3) * t368 - t312 * qJD(1) * pkin(7), -t390, t344, t435, t390, t434, t250, -t132 * t146 - t173 * t250 - t251 * t374 - t447, -t132 * t148 + t174 * t250 + t251 * t375 + t274, t173 * t69 - t174 * t70 + (-t80 - t374) * t148 + (t79 - t375) * t146, -g(1) * t206 - g(2) * t204 - g(3) * t348 - t123 * t132 + t39 * t173 + t38 * t174 + t374 * t79 + t375 * t80 + t427 * t429, -t448, t454, t455, t448, -t449, t250, -t106 * t250 + t251 * t412 - t431 * t94 - t439, t107 * t250 + t251 * t411 - t301 * t94 - t440, t106 * t303 - t107 * t44 - t411 * t431 + t451 + (-t34 + t412) * t301, t8 * t107 - t414 * t106 - t83 * t94 - g(1) * (t187 + t206) - g(2) * (t184 + t204) - g(3) * (t210 + t433) + t411 * t34 - t412 * t33 + t282, t463, t464 - t466, -t465, -t405 * t443 + t400, t443 * t458 - t41 - t421, t450, t102 * t30 - t15 * t443 + t261 * t284 - t265 * t280 + t412 * t71 + t453, -t102 * t29 + t16 * t443 + t261 * t280 + t265 * t284 - t313 * t412 - t452, -t15 * t313 + t16 * t71 + (-t103 * t30 - t71 * t77 + (-t103 * t313 + t11) * qJD(6) - t442) * t265 + (-t103 * t29 - t313 * t77 + (t103 * t71 + t12) * qJD(6) - t441) * t261 + t295, t5 * t102 - g(1) * (t206 - t307) - g(2) * (t204 - t308) - g(3) * (-t306 + t433) + t412 * t31 + t282 + (t265 * t77 - t16) * t12 + (-t261 * t77 - t15) * t11 + t278 * t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2) - t201, t238, -t255 * t271 - t270, -qJD(2) * t182 + t150 * t363 + t131 + t347, 0, 0, 0, 0, 0, 0, -t146 * t363 - t266 * t250 - t262 * t328, -t148 * t363 + t262 * t250 - t266 * t328, -t262 * t434 + t266 * t435, -t123 * t363 + (t39 - t409) * t266 + (t38 + t410) * t262 + t347, 0, 0, 0, 0, 0, 0, -t250 * t300 - t251 * t373 - t363 * t431, t161 * t250 - t251 * t372 - t301 * t363, -t161 * t44 + t300 * t303 - t301 * t373 + t372 * t431, t161 * t8 - t300 * t414 + t33 * t373 - t34 * t372 - t363 * t83 + t347, 0, 0, 0, 0, 0, 0, -t161 * t406 - t300 * t30 - t373 * t71 + (-t161 * t356 + t331) * t443, -t161 * t41 + t300 * t29 + t373 * t313 + (t161 * t357 - t330) * t443, -t111 * t313 + t112 * t71 + (-t403 - t404) * t144 + (-t401 - t400 + (-t402 + t405) * qJD(6)) * t161, t11 * t331 + t12 * t330 + t161 * t278 - t300 * t5 - t31 * t373 + t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t390, -t344, -t435, -t390, -t434, -t250, -t409 + t447, -t274 - t410, 0, 0, t448, -t454, -t455, -t448, t449, -t250, -t35 * t251 + (-t148 * t431 - t250 * t398) * pkin(4) + t439, -t251 * t36 + (-t148 * t301 + t250 * t258) * pkin(4) + t440, -t451 + t36 * t431 + (-t258 * t44 + t303 * t398) * pkin(4) + (t34 - t35) * t301, -t34 * t36 + t33 * t35 - g(1) * (-t187 + t186) - g(2) * (-t184 + t183) + g(3) * t210 + (g(3) * t381 - t83 * t148 + t8 * t258 - t398 * t414) * pkin(4), -t463, t443 * t404 - t464, t465, t458 * t71 - t400, t310 + t421, -t450, -t13 * t443 + t218 * t30 + t261 * t302 - t265 * t279 - t35 * t71 - t453, t14 * t443 - t218 * t29 + t261 * t279 + t265 * t302 + t313 * t35 + t452, -t13 * t313 + t14 * t71 + (-t217 * t30 + (-t217 * t313 - t11) * qJD(6) + t442) * t265 + (-t217 * t29 + (t217 * t71 - t12) * qJD(6) + t441) * t261 - t295, t5 * t218 - t12 * t14 - t11 * t13 - t31 * t35 - g(1) * (t186 + t307) - g(2) * (t183 + t308) - g(3) * (-pkin(4) * t381 + t306) + t278 * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44 - t408, -t303 + t399, -t416 - t417, t301 * t33 + t34 * t431 + t340 + t49, 0, 0, 0, 0, 0, 0, t310 - t421, t418 + t444 (t29 - t420) * t265 - t466 + t413, -t31 * t301 + (t2 + t461) * t265 + (t1 - t462) * t261 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t419, t313 ^ 2 - t71 ^ 2, t443 * t71 - t29, t419, -t313 * t443 - t30, t43, -g(1) * t100 + t261 * t287 + t265 * t317 + t31 * t313 + t461 + t9, g(1) * t101 + t462 + t31 * t71 + (-t10 - t317) * t261 + t287 * t265, 0, 0;];
tau_reg  = t7;
