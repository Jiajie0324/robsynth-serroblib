% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRR10_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRPRRR10_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:25:49
% EndTime: 2019-03-09 14:26:13
% DurationCPUTime: 16.20s
% Computational Cost: add. (14274->661), mult. (37313->899), div. (0->0), fcn. (31262->12), ass. (0->272)
t716 = cos(pkin(6));
t800 = qJD(1) * t716;
t702 = qJD(2) + t800;
t713 = sin(pkin(12));
t715 = cos(pkin(12));
t720 = sin(qJ(2));
t714 = sin(pkin(6));
t801 = qJD(1) * t714;
t783 = t720 * t801;
t649 = t702 * t715 - t713 * t783;
t650 = t702 * t713 + t715 * t783;
t719 = sin(qJ(4));
t723 = cos(qJ(4));
t591 = -t723 * t649 + t650 * t719;
t843 = qJD(5) + qJD(6);
t866 = t591 + t843;
t718 = sin(qJ(5));
t721 = cos(qJ(6));
t717 = sin(qJ(6));
t722 = cos(qJ(5));
t820 = t717 * t722;
t677 = t718 * t721 + t820;
t806 = t866 * t677;
t819 = t723 * t715;
t672 = t713 * t719 - t819;
t724 = cos(qJ(2));
t822 = t714 * t724;
t730 = t672 * t822;
t638 = qJD(1) * t730;
t668 = t672 * qJD(4);
t805 = -t668 + t638;
t673 = t713 * t723 + t715 * t719;
t731 = t673 * t822;
t804 = -qJD(1) * t731 + t673 * qJD(4);
t750 = pkin(2) * t720 - qJ(3) * t724;
t662 = t750 * t801;
t788 = pkin(1) * t800;
t663 = -pkin(8) * t783 + t724 * t788;
t602 = t715 * t662 - t663 * t713;
t821 = t715 * t724;
t734 = (pkin(3) * t720 - pkin(9) * t821) * t714;
t576 = qJD(1) * t734 + t602;
t603 = t713 * t662 + t715 * t663;
t799 = qJD(1) * t724;
t782 = t714 * t799;
t760 = t713 * t782;
t584 = -pkin(9) * t760 + t603;
t841 = pkin(9) + qJ(3);
t688 = t841 * t713;
t689 = t841 * t715;
t745 = -t688 * t723 - t689 * t719;
t865 = -qJD(3) * t672 + qJD(4) * t745 - t719 * t576 - t723 * t584;
t728 = qJD(2) * t731;
t746 = t649 * t719 + t650 * t723;
t844 = qJD(4) * t746;
t549 = qJD(1) * t728 + t844;
t539 = t722 * t549;
t588 = qJD(5) + t591;
t860 = t588 ^ 2;
t864 = -t860 * t718 + t539;
t585 = qJD(6) + t588;
t676 = t717 * t718 - t721 * t722;
t850 = t866 * t676;
t863 = t677 * t549 - t585 * t850;
t664 = pkin(8) * t782 + t720 * t788;
t630 = pkin(3) * t760 + t664;
t862 = -pkin(4) * t804 + pkin(10) * t805 + t630;
t853 = -pkin(10) * t783 + t865;
t604 = -t638 * t718 - t722 * t783;
t851 = t668 * t718 + t604;
t861 = -t676 * t549 - t585 * t806;
t639 = qJ(3) * t702 + t664;
t659 = (-pkin(2) * t724 - qJ(3) * t720 - pkin(1)) * t714;
t644 = qJD(1) * t659;
t577 = -t639 * t713 + t715 * t644;
t530 = -pkin(3) * t782 - pkin(9) * t650 + t577;
t578 = t715 * t639 + t713 * t644;
t550 = pkin(9) * t649 + t578;
t480 = t530 * t723 - t719 * t550;
t693 = -qJD(4) + t782;
t477 = pkin(4) * t693 - t480;
t568 = t722 * t693 + t718 * t746;
t469 = pkin(5) * t568 + t477;
t570 = -t693 * t718 + t722 * t746;
t834 = t570 * t717;
t498 = t721 * t568 + t834;
t859 = t469 * t498;
t747 = t568 * t717 - t721 * t570;
t858 = t469 * t747;
t857 = t498 * t585;
t855 = t585 * t747;
t854 = t591 * t693;
t636 = -t688 * t719 + t689 * t723;
t852 = qJD(3) * t673 + qJD(4) * t636 + t576 * t723 - t719 * t584;
t794 = qJD(5) * t722;
t733 = t673 * t794 - t851;
t605 = -t638 * t722 + t718 * t783;
t769 = t668 * t722 + t605;
t849 = t549 * MDP(33) + (-t498 ^ 2 + t747 ^ 2) * MDP(30) - t498 * MDP(29) * t747;
t710 = t714 ^ 2;
t790 = qJD(1) * qJD(2);
t848 = -0.2e1 * t710 * t790;
t847 = MDP(5) * (t720 ^ 2 - t724 ^ 2);
t611 = t677 * t673;
t658 = pkin(8) * t822 + (pkin(1) * t720 + qJ(3)) * t716;
t596 = -t658 * t713 + t715 * t659;
t823 = t714 * t720;
t667 = t713 * t716 + t715 * t823;
t558 = -pkin(3) * t822 - pkin(9) * t667 + t596;
t597 = t715 * t658 + t713 * t659;
t666 = t713 * t823 - t716 * t715;
t575 = -pkin(9) * t666 + t597;
t811 = t719 * t558 + t723 * t575;
t496 = -pkin(10) * t822 + t811;
t606 = t723 * t666 + t667 * t719;
t607 = -t666 * t719 + t667 * t723;
t661 = pkin(8) * t823 + (-pkin(1) * t724 - pkin(2)) * t716;
t615 = pkin(3) * t666 + t661;
t514 = pkin(4) * t606 - pkin(10) * t607 + t615;
t817 = t722 * t496 + t718 * t514;
t809 = pkin(4) * t783 + t852;
t846 = t862 * t722;
t707 = -pkin(3) * t715 - pkin(2);
t617 = pkin(4) * t672 - pkin(10) * t673 + t707;
t795 = qJD(5) * t718;
t845 = -t617 * t794 + t636 * t795 + t718 * t862 - t853 * t722;
t777 = t714 * t790;
t757 = t724 * t777;
t744 = t713 * t757;
t796 = qJD(4) * t723;
t548 = t649 * t796 + t757 * t819 + (-qJD(4) * t650 - t744) * t719;
t758 = t720 * t777;
t490 = qJD(5) * t570 + t548 * t718 - t722 * t758;
t489 = t722 * t548 - t693 * t794 + t718 * t758 - t746 * t795;
t774 = t489 * t717 + t721 * t490;
t447 = -qJD(6) * t747 + t774;
t842 = pkin(10) + pkin(11);
t481 = t719 * t530 + t723 * t550;
t478 = -pkin(10) * t693 + t481;
t632 = -pkin(2) * t702 + qJD(3) - t663;
t589 = -pkin(3) * t649 + t632;
t493 = pkin(4) * t591 - pkin(10) * t746 + t589;
t460 = -t478 * t718 + t722 * t493;
t451 = -pkin(11) * t570 + t460;
t448 = pkin(5) * t588 + t451;
t840 = t448 * t721;
t461 = t478 * t722 + t493 * t718;
t452 = -pkin(11) * t568 + t461;
t839 = t452 * t721;
t838 = t489 * t718;
t837 = t549 * t718;
t836 = t568 * t588;
t835 = t570 * t588;
t833 = t577 * t720;
t832 = t578 * t720;
t831 = t591 * t718;
t828 = t673 * t718;
t827 = t673 * t722;
t725 = qJD(1) ^ 2;
t825 = t710 * t725;
t824 = t713 * t724;
t622 = t722 * t636;
t521 = pkin(4) * t746 + pkin(10) * t591;
t818 = t722 * t480 + t718 * t521;
t815 = t604 * t717 - t605 * t721 - t611 * t843 + t676 * t668;
t779 = t673 * t795;
t793 = qJD(6) * t717;
t814 = -t668 * t820 - t793 * t828 + (t827 * t843 - t851) * t721 + (-t779 - t605) * t717;
t812 = pkin(5) * t733 + t809;
t642 = (qJD(2) * t750 - qJD(3) * t720) * t714;
t626 = qJD(1) * t642;
t787 = pkin(1) * qJD(2) * t716;
t762 = qJD(1) * t787;
t739 = -pkin(8) * t758 + t724 * t762;
t627 = qJD(3) * t702 + t739;
t573 = t713 * t626 + t715 * t627;
t808 = t718 * t617 + t622;
t798 = qJD(2) * t720;
t781 = t714 * t798;
t743 = -pkin(8) * t781 + t724 * t787;
t648 = qJD(3) * t716 + t743;
t582 = t713 * t642 + t715 * t648;
t655 = pkin(8) * t757 + t720 * t762;
t780 = qJD(2) * t822;
t665 = pkin(8) * t780 + t720 * t787;
t797 = qJD(4) * t719;
t792 = qJD(6) * t721;
t791 = qJD(2) - t702;
t789 = pkin(1) * t825;
t786 = t718 * t822;
t785 = t721 * t489 - t717 * t490 - t568 * t792;
t620 = pkin(3) * t744 + t655;
t759 = t713 * t780;
t631 = pkin(3) * t759 + t665;
t784 = qJD(5) * t842;
t572 = t715 * t626 - t627 * t713;
t729 = qJD(2) * t734;
t531 = qJD(1) * t729 + t572;
t551 = -pkin(9) * t744 + t573;
t738 = t530 * t796 + t719 * t531 - t550 * t797 + t723 * t551;
t458 = pkin(10) * t758 + t738;
t475 = pkin(4) * t549 - pkin(10) * t548 + t620;
t441 = -qJD(5) * t461 - t458 * t718 + t722 * t475;
t437 = pkin(5) * t549 - pkin(11) * t489 + t441;
t440 = t722 * t458 + t718 * t475 - t478 * t795 + t493 * t794;
t438 = -pkin(11) * t490 + t440;
t776 = t721 * t437 - t717 * t438;
t450 = t452 * t793;
t775 = t717 * t437 - t450;
t773 = -t496 * t718 + t722 * t514;
t771 = t558 * t723 - t719 * t575;
t768 = t722 * t617 - t636 * t718;
t581 = t715 * t642 - t648 * t713;
t766 = t588 * t722;
t764 = qJD(6) * t448 + t438;
t763 = MDP(4) * t710 * t720 * t724;
t761 = t530 * t797 - t723 * t531 + t550 * t796 + t719 * t551;
t756 = -t481 + (t795 + t831) * pkin(5);
t755 = pkin(1) * t848;
t495 = pkin(4) * t822 - t771;
t520 = t722 * t521;
t695 = t842 * t722;
t754 = pkin(5) * t746 + qJD(6) * t695 - t480 * t718 + t520 + (pkin(11) * t591 + t784) * t722;
t694 = t842 * t718;
t753 = pkin(11) * t831 + qJD(6) * t694 + t718 * t784 + t818;
t536 = -pkin(11) * t828 + t808;
t752 = t622 * qJD(5) + qJD(6) * t536 + t846 - t769 * pkin(11) + (-(pkin(11) * t673 - t617) * qJD(5) + t853) * t718 - t804 * pkin(5);
t522 = pkin(5) * t672 - pkin(11) * t827 + t768;
t751 = pkin(11) * t733 - qJD(6) * t522 + t845;
t443 = t448 * t717 + t839;
t587 = t607 * t722 - t786;
t456 = pkin(5) * t606 - pkin(11) * t587 + t773;
t586 = t607 * t718 + t722 * t822;
t463 = -pkin(11) * t586 + t817;
t749 = t456 * t721 - t463 * t717;
t748 = t456 * t717 + t463 * t721;
t517 = t721 * t586 + t587 * t717;
t518 = -t586 * t717 + t587 * t721;
t555 = t581 + t729;
t571 = -pkin(9) * t759 + t582;
t742 = t555 * t723 - t558 * t797 - t719 * t571 - t575 * t796;
t740 = -pkin(10) * t549 + t477 * t588;
t737 = t719 * t555 + t558 * t796 + t723 * t571 - t575 * t797;
t465 = pkin(10) * t781 + t737;
t564 = -qJD(2) * t730 - qJD(4) * t606;
t565 = qJD(4) * t607 + t728;
t488 = pkin(4) * t565 - pkin(10) * t564 + t631;
t736 = t722 * t465 + t718 * t488 - t496 * t795 + t514 * t794;
t446 = -t570 * t793 + t785;
t732 = -t769 - t779;
t459 = -pkin(4) * t758 + t761;
t466 = -pkin(4) * t781 - t742;
t727 = -qJ(3) * t798 + (-pkin(2) * qJD(2) + qJD(3) - t632) * t724;
t726 = -qJD(5) * t817 - t465 * t718 + t722 * t488;
t435 = -qJD(6) * t443 + t776;
t709 = -pkin(5) * t722 - pkin(4);
t612 = t676 * t673;
t600 = pkin(5) * t828 - t745;
t523 = t549 * t672;
t513 = t549 * t606;
t504 = -qJD(5) * t786 + t564 * t718 + t607 * t794 - t722 * t781;
t503 = -qJD(5) * t586 + t564 * t722 + t718 * t781;
t472 = pkin(5) * t586 + t495;
t455 = qJD(6) * t518 + t503 * t717 + t721 * t504;
t454 = -qJD(6) * t517 + t503 * t721 - t504 * t717;
t449 = pkin(5) * t504 + t466;
t445 = pkin(5) * t490 + t459;
t444 = -pkin(11) * t504 + t736;
t442 = -t452 * t717 + t840;
t439 = pkin(5) * t565 - pkin(11) * t503 + t726;
t434 = t721 * t764 + t775;
t1 = [(-t572 * t667 - t573 * t666 - t581 * t650 + t582 * t649 + (-t577 * t715 - t578 * t713 + (-t596 * t715 - t597 * t713) * qJD(1)) * t780) * MDP(13) + (-(qJD(6) * t749 + t439 * t717 + t444 * t721) * t585 - t748 * t549 - t434 * t606 - t443 * t565 - t449 * t747 + t472 * t446 + t445 * t518 + t469 * t454) * MDP(35) + (t446 * t518 - t454 * t747) * MDP(29) + (-t446 * t517 - t447 * t518 - t454 * t498 + t455 * t747) * MDP(30) + (t446 * t606 + t454 * t585 + t518 * t549 - t565 * t747) * MDP(31) + (t565 * t693 + (t549 * t724 + (-qJD(1) * t606 - t591) * t798) * t714) * MDP(18) + (-t742 * t693 + t631 * t591 + t615 * t549 + t620 * t606 + t589 * t565 + (t761 * t724 + (qJD(1) * t771 + t480) * t798) * t714) * MDP(20) + 0.2e1 * t763 * t790 + (t650 * t665 + t655 * t667 + ((qJD(1) * t582 + t573) * t724 + (t632 * t821 - t832 + (-t597 * t720 + t661 * t821) * qJD(1)) * qJD(2)) * t714) * MDP(12) + (-t649 * t665 + t655 * t666 + ((-qJD(1) * t581 - t572) * t724 + (t632 * t824 + t833 + (t596 * t720 + t661 * t824) * qJD(1)) * qJD(2)) * t714) * MDP(11) + (t441 * t606 + t459 * t586 + t460 * t565 + t466 * t568 + t477 * t504 + t495 * t490 + t549 * t773 + t588 * t726) * MDP(27) + (-t440 * t606 + t459 * t587 - t461 * t565 + t466 * t570 + t477 * t503 + t495 * t489 - t549 * t817 - t588 * t736) * MDP(28) + (-t702 * t743 - t716 * t739 + t724 * t755) * MDP(10) + (-t655 * t716 - t665 * t702 + t720 * t755) * MDP(9) + ((-qJD(6) * t748 + t439 * t721 - t444 * t717) * t585 + t749 * t549 + t435 * t606 + t442 * t565 + t449 * t498 + t472 * t447 + t445 * t517 + t469 * t455) * MDP(34) + (-t693 * t714 - t710 * t799) * MDP(19) * t798 + (t737 * t693 + t631 * t746 + t615 * t548 + t620 * t607 + t589 * t564 + (t738 * t724 + (-qJD(1) * t811 - t481) * t798) * t714) * MDP(21) + (-t564 * t693 + (-t548 * t724 + (qJD(1) * t607 + t746) * t798) * t714) * MDP(17) + (t548 * t607 + t564 * t746) * MDP(15) + (-t548 * t606 - t549 * t607 - t564 * t591 - t565 * t746) * MDP(16) + (MDP(6) * t780 - MDP(7) * t781) * (t702 + t800) + t847 * t848 + (t565 * t585 + t513) * MDP(33) + (t489 * t587 + t503 * t570) * MDP(22) + (-t489 * t586 - t490 * t587 - t503 * t568 - t504 * t570) * MDP(23) + (t565 * t588 + t513) * MDP(26) + (-t447 * t606 - t455 * t585 - t498 * t565 - t517 * t549) * MDP(32) + (-t490 * t606 - t504 * t588 - t549 * t586 - t565 * t568) * MDP(25) + (t489 * t606 + t503 * t588 + t549 * t587 + t565 * t570) * MDP(24) + (t572 * t596 + t573 * t597 + t577 * t581 + t578 * t582 + t632 * t665 + t655 * t661) * MDP(14); (t602 * t650 - t603 * t649 + (qJD(3) * t649 + t577 * t782 + t573) * t715 + (qJD(3) * t650 + t578 * t782 - t572) * t713) * MDP(13) + (t664 * t702 + t720 * t789 - t655) * MDP(9) + (t585 * t804 + t523) * MDP(33) + (t588 * t804 + t523) * MDP(26) + (t446 * t672 - t549 * t612 + t585 * t815 - t747 * t804) * MDP(31) + (-t446 * t612 - t747 * t815) * MDP(29) + (-(t522 * t717 + t536 * t721) * t549 - t434 * t672 + t600 * t446 - t445 * t612 + (t717 * t752 + t721 * t751) * t585 - t812 * t747 + t815 * t469 - t804 * t443) * MDP(35) + (-t446 * t611 + t447 * t612 - t498 * t815 + t747 * t814) * MDP(30) + (-t440 * t672 + t459 * t827 - t804 * t461 + t732 * t477 - t489 * t745 - t808 * t549 + t809 * t570 + t588 * t845) * MDP(28) + ((-qJD(2) * t672 + t591) * MDP(18) + (qJD(2) * t745 - t480) * MDP(20) + (qJD(2) * t673 - t746) * MDP(17) + (-qJD(2) * t636 + t481) * MDP(21) + t693 * MDP(19) - t791 * MDP(7)) * t783 + (t663 * t702 + t724 * t789 - t739) * MDP(10) + (-t650 * t664 + t655 * t713 + (-t603 * t724 + t715 * t727 + t832) * t801) * MDP(12) + (t649 * t664 - t655 * t715 + (t602 * t724 + t713 * t727 - t833) * t801) * MDP(11) + (t489 * t827 + t570 * t732) * MDP(22) + (-t490 * t672 - t549 * t828 - t568 * t804 - t588 * t733) * MDP(25) + ((t522 * t721 - t536 * t717) * t549 + t435 * t672 + t600 * t447 + t445 * t611 + (t717 * t751 - t721 * t752) * t585 + t812 * t498 + t814 * t469 + t804 * t442) * MDP(34) + (-t447 * t672 - t498 * t804 - t549 * t611 - t585 * t814) * MDP(32) + (t489 * t672 + t539 * t673 + t570 * t804 + t588 * t732) * MDP(24) + (-pkin(2) * t655 - t577 * t602 - t578 * t603 - t632 * t664 + (-t577 * t713 + t578 * t715) * qJD(3) + (-t572 * t713 + t573 * t715) * qJ(3)) * MDP(14) + (t768 * t549 + t441 * t672 - t745 * t490 + t459 * t828 + (-t636 * t794 + (-qJD(5) * t617 - t853) * t718 - t846) * t588 + t809 * t568 + t804 * t460 + t733 * t477) * MDP(27) + (-t805 * MDP(17) + t804 * MDP(18) + t852 * MDP(20) + MDP(21) * t865) * t693 + (t851 * t570 + t769 * t568 + (-t838 - t490 * t722 + (t568 * t718 - t570 * t722) * qJD(5)) * t673) * MDP(23) - t725 * t763 + t791 * MDP(6) * t782 + (t548 * t673 + t746 * t805) * MDP(15) + (-t548 * t672 - t549 * t673 - t591 * t805 - t746 * t804) * MDP(16) + (t707 * t548 + t805 * t589 + t620 * t673 - t630 * t746) * MDP(21) + t825 * t847 + (t707 * t549 + t804 * t589 - t630 * t591 + t620 * t672) * MDP(20); (-t649 ^ 2 - t650 ^ 2) * MDP(13) + (t577 * t650 - t578 * t649 + t655) * MDP(14) + (-t693 * t746 + t549) * MDP(20) + (t548 + t854) * MDP(21) + (-t568 * t746 + t864) * MDP(27) + (-t570 * t746 - t722 * t860 - t837) * MDP(28) + (-t498 * t746 + t861) * MDP(34) + (t746 * t747 - t863) * MDP(35) + ((qJD(2) * t713 - t650) * MDP(11) + (qJD(2) * t715 - t649) * MDP(12)) * t782; -t591 ^ 2 * MDP(16) + (t548 - t854) * MDP(17) + (-t673 * t757 - t844) * MDP(18) + MDP(19) * t758 + (-t481 * t693 - t761) * MDP(20) + (-t480 * t693 + t589 * t591 - t738) * MDP(21) + (t570 * t766 + t838) * MDP(22) + ((t489 - t836) * t722 + (-t490 - t835) * t718) * MDP(23) + (t588 * t766 + t837) * MDP(24) + t864 * MDP(25) + (-pkin(4) * t490 - t459 * t722 - t481 * t568 + (-pkin(10) * t794 - t520) * t588 + (t480 * t588 + t740) * t718) * MDP(27) + (-pkin(4) * t489 + t459 * t718 - t481 * t570 + (pkin(10) * t795 + t818) * t588 + t740 * t722) * MDP(28) + (t446 * t677 + t747 * t850) * MDP(29) + (-t446 * t676 - t447 * t677 + t498 * t850 + t747 * t806) * MDP(30) + t863 * MDP(31) + t861 * MDP(32) + ((-t694 * t721 - t695 * t717) * t549 + t709 * t447 + t445 * t676 + (t717 * t753 - t721 * t754) * t585 + t756 * t498 + t806 * t469) * MDP(34) + (-(-t694 * t717 + t695 * t721) * t549 + t709 * t446 + t445 * t677 + (t717 * t754 + t721 * t753) * t585 - t756 * t747 - t850 * t469) * MDP(35) + (MDP(15) * t591 + MDP(16) * t746 - MDP(18) * t693 - MDP(20) * t589 - MDP(24) * t570 + MDP(25) * t568 - MDP(26) * t588 - MDP(27) * t460 + MDP(28) * t461 + MDP(31) * t747 + MDP(32) * t498 - MDP(33) * t585 - MDP(34) * t442 + MDP(35) * t443) * t746; t570 * t568 * MDP(22) + (-t568 ^ 2 + t570 ^ 2) * MDP(23) + (t489 + t836) * MDP(24) + (-t490 + t835) * MDP(25) + t549 * MDP(26) + (t461 * t588 - t477 * t570 + t441) * MDP(27) + (t460 * t588 + t477 * t568 - t440) * MDP(28) + (t446 + t857) * MDP(31) + (-t447 - t855) * MDP(32) + (-(-t451 * t717 - t839) * t585 + t858 + (-t498 * t570 + t549 * t721 - t585 * t793) * pkin(5) + t435) * MDP(34) + (t859 + t450 + (-t452 * t585 - t437) * t717 + (t451 * t585 - t764) * t721 + (-t549 * t717 + t570 * t747 - t585 * t792) * pkin(5)) * MDP(35) + t849; (t785 + t857) * MDP(31) + (-t774 - t855) * MDP(32) + (t443 * t585 + t776 + t858) * MDP(34) + (-t721 * t438 + t442 * t585 - t775 + t859) * MDP(35) + (-MDP(31) * t834 + MDP(32) * t747 - MDP(34) * t443 - MDP(35) * t840) * qJD(6) + t849;];
tauc  = t1;
