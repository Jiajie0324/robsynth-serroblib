% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 23:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR10_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 23:50:42
% EndTime: 2019-05-06 23:50:56
% DurationCPUTime: 14.30s
% Computational Cost: add. (176015->382), mult. (398971->585), div. (0->0), fcn. (329855->14), ass. (0->323)
t2659 = sin(pkin(6));
t2670 = cos(qJ(2));
t2722 = t2659 * t2670;
t2717 = qJD(1) * t2722;
t2708 = -qJD(4) + t2717;
t2707 = t2708 ^ 2;
t2661 = cos(pkin(6));
t2654 = qJD(1) * t2661 + qJD(2);
t2658 = sin(pkin(12));
t2660 = cos(pkin(12));
t2665 = sin(qJ(2));
t2729 = qJD(1) * t2665;
t2718 = t2659 * t2729;
t2629 = t2654 * t2660 - t2658 * t2718;
t2630 = t2654 * t2658 + t2660 * t2718;
t2664 = sin(qJ(4));
t2669 = cos(qJ(4));
t2605 = -t2669 * t2629 + t2630 * t2664;
t2604 = qJD(5) + t2605;
t2600 = qJD(6) + t2604;
t2743 = qJD(6) + t2600;
t2719 = qJDD(1) * t2659;
t2636 = qJD(2) * t2717 + t2665 * t2719;
t2711 = qJDD(1) * t2661 + qJDD(2);
t2613 = t2660 * t2636 + t2658 * t2711;
t2620 = t2629 * t2717;
t2596 = -t2620 - t2613;
t2653 = t2670 * t2719;
t2685 = qJD(2) * t2718 - t2653;
t2724 = t2629 * t2630;
t2598 = t2685 + t2724;
t2612 = -t2636 * t2658 + t2660 * t2711;
t2689 = t2664 * t2612 + t2669 * t2613;
t2564 = -t2605 * qJD(4) + t2689;
t2552 = t2605 * t2708 + t2564;
t2607 = t2629 * t2664 + t2630 * t2669;
t2663 = sin(qJ(5));
t2668 = cos(qJ(5));
t2589 = t2663 * t2607 + t2668 * t2708;
t2591 = t2668 * t2607 - t2663 * t2708;
t2662 = sin(qJ(6));
t2667 = cos(qJ(6));
t2559 = t2667 * t2589 + t2591 * t2662;
t2742 = t2559 ^ 2;
t2561 = -t2589 * t2662 + t2591 * t2667;
t2741 = t2561 ^ 2;
t2740 = t2589 ^ 2;
t2739 = t2591 ^ 2;
t2738 = t2600 ^ 2;
t2737 = t2604 ^ 2;
t2736 = t2605 ^ 2;
t2735 = t2607 ^ 2;
t2734 = t2629 ^ 2;
t2733 = t2630 ^ 2;
t2732 = t2654 ^ 2;
t2731 = t2661 * g(3);
t2730 = qJD(1) * t2659;
t2728 = t2559 * t2561;
t2727 = t2589 * t2591;
t2726 = t2604 * t2589;
t2725 = t2605 * t2607;
t2672 = qJD(1) ^ 2;
t2723 = t2659 ^ 2 * t2672;
t2721 = qJD(5) - t2604;
t2720 = qJD(6) - t2600;
t2666 = sin(qJ(1));
t2671 = cos(qJ(1));
t2648 = -g(1) * t2671 - g(2) * t2666;
t2632 = -pkin(1) * t2672 + pkin(8) * t2719 + t2648;
t2633 = (-pkin(2) * t2670 - qJ(3) * t2665) * t2730;
t2647 = t2666 * g(1) - t2671 * g(2);
t2680 = t2672 * t2659 * pkin(8) + qJDD(1) * pkin(1) + t2647;
t2678 = t2661 * t2680;
t2676 = (-t2659 * g(3) + t2678) * t2665;
t2674 = -t2732 * pkin(2) + t2711 * qJ(3) + (t2633 * t2730 + t2632) * t2670 + t2676;
t2675 = -t2653 * pkin(2) - t2731 - t2636 * qJ(3) + ((-qJ(3) * t2654 * t2670 + (qJD(2) + t2654) * t2665 * pkin(2)) * qJD(1) - t2680) * t2659;
t2539 = 0.2e1 * qJD(3) * t2629 + t2658 * t2675 + t2660 * t2674;
t2614 = -pkin(3) * t2717 - pkin(9) * t2630;
t2529 = -pkin(3) * t2734 + pkin(9) * t2612 + t2614 * t2717 + t2539;
t2538 = -0.2e1 * qJD(3) * t2630 - t2658 * t2674 + t2660 * t2675;
t2673 = pkin(3) * t2598 + pkin(9) * t2596 + t2538;
t2494 = t2669 * t2529 + t2664 * t2673;
t2573 = pkin(4) * t2605 - pkin(10) * t2607;
t2683 = qJDD(4) + t2685;
t2477 = -pkin(4) * t2707 + pkin(10) * t2683 - t2605 * t2573 + t2494;
t2712 = t2665 * t2632 - t2670 * t2678;
t2578 = qJDD(3) - t2711 * pkin(2) - t2732 * qJ(3) + (g(3) * t2670 + t2633 * t2729) * t2659 + t2712;
t2542 = -t2612 * pkin(3) - t2734 * pkin(9) + t2630 * t2614 + t2578;
t2713 = -t2669 * t2612 + t2664 * t2613;
t2550 = (0.2e1 * qJD(4) - t2717) * t2607 + t2713;
t2500 = t2550 * pkin(4) - pkin(10) * t2552 + t2542;
t2460 = t2668 * t2477 + t2663 * t2500;
t2657 = t2670 ^ 2;
t2716 = t2657 * t2723;
t2459 = -t2663 * t2477 + t2668 * t2500;
t2493 = -t2664 * t2529 + t2669 * t2673;
t2677 = -t2668 * t2564 - t2663 * t2683;
t2541 = -t2589 * qJD(5) - t2677;
t2714 = t2663 * t2564 - t2668 * t2683;
t2684 = qJD(5) * t2591 + t2714;
t2715 = -t2662 * t2541 - t2667 * t2684;
t2710 = t2654 * t2717;
t2709 = t2630 * t2717;
t2682 = t2607 * qJD(4) + qJDD(5) + t2713;
t2532 = t2682 - t2727;
t2444 = (-t2541 - t2726) * pkin(11) + t2532 * pkin(5) + t2459;
t2565 = pkin(5) * t2604 - pkin(11) * t2591;
t2446 = -pkin(5) * t2740 - pkin(11) * t2684 - t2604 * t2565 + t2460;
t2421 = t2444 * t2667 - t2446 * t2662;
t2422 = t2444 * t2662 + t2446 * t2667;
t2405 = t2421 * t2667 + t2422 * t2662;
t2406 = -t2421 * t2662 + t2422 * t2667;
t2398 = -t2405 * t2663 + t2406 * t2668;
t2476 = -t2683 * pkin(4) - t2707 * pkin(10) + t2607 * t2573 - t2493;
t2463 = pkin(5) * t2684 - pkin(11) * t2740 + t2591 * t2565 + t2476;
t2395 = t2398 * t2664 - t2463 * t2669;
t2396 = t2398 * t2669 + t2463 * t2664;
t2390 = -t2395 * t2658 + t2396 * t2660;
t2397 = t2405 * t2668 + t2406 * t2663;
t2706 = t2390 * t2665 - t2397 * t2670;
t2435 = -t2459 * t2663 + t2460 * t2668;
t2423 = t2435 * t2664 - t2476 * t2669;
t2424 = t2435 * t2669 + t2476 * t2664;
t2408 = -t2423 * t2658 + t2424 * t2660;
t2434 = t2459 * t2668 + t2460 * t2663;
t2705 = t2408 * t2665 - t2434 * t2670;
t2483 = -t2561 * t2720 + t2715;
t2679 = -t2667 * t2541 + t2662 * t2684;
t2485 = t2559 * t2720 + t2679;
t2455 = t2483 * t2662 + t2485 * t2667;
t2456 = t2483 * t2667 - t2485 * t2662;
t2432 = -t2455 * t2663 + t2456 * t2668;
t2510 = -t2741 - t2742;
t2429 = t2432 * t2664 - t2510 * t2669;
t2430 = t2432 * t2669 + t2510 * t2664;
t2410 = -t2429 * t2658 + t2430 * t2660;
t2431 = t2455 * t2668 + t2456 * t2663;
t2704 = t2410 * t2665 - t2431 * t2670;
t2681 = -qJDD(6) - t2682;
t2511 = -t2681 - t2728;
t2525 = -t2738 - t2742;
t2488 = t2511 * t2667 + t2525 * t2662;
t2489 = -t2511 * t2662 + t2525 * t2667;
t2458 = -t2488 * t2663 + t2489 * t2668;
t2482 = t2561 * t2743 - t2715;
t2439 = t2458 * t2664 - t2482 * t2669;
t2440 = t2458 * t2669 + t2482 * t2664;
t2416 = -t2439 * t2658 + t2440 * t2660;
t2457 = t2488 * t2668 + t2489 * t2663;
t2703 = t2416 * t2665 - t2457 * t2670;
t2512 = t2681 - t2728;
t2534 = -t2738 - t2741;
t2495 = t2512 * t2662 + t2534 * t2667;
t2496 = t2512 * t2667 - t2534 * t2662;
t2465 = -t2495 * t2663 + t2496 * t2668;
t2484 = -t2559 * t2743 - t2679;
t2441 = t2465 * t2664 - t2484 * t2669;
t2442 = t2465 * t2669 + t2484 * t2664;
t2420 = -t2441 * t2658 + t2442 * t2660;
t2464 = t2495 * t2668 + t2496 * t2663;
t2702 = t2420 * t2665 - t2464 * t2670;
t2461 = t2493 * t2669 + t2494 * t2664;
t2462 = -t2493 * t2664 + t2494 * t2669;
t2437 = -t2461 * t2658 + t2462 * t2660;
t2701 = t2437 * t2665 - t2542 * t2670;
t2522 = -t2591 * t2721 - t2714;
t2524 = t2589 * t2721 + t2677;
t2491 = t2522 * t2668 - t2524 * t2663;
t2544 = -t2739 - t2740;
t2473 = t2491 * t2664 - t2544 * t2669;
t2474 = t2491 * t2669 + t2544 * t2664;
t2448 = -t2473 * t2658 + t2474 * t2660;
t2490 = t2522 * t2663 + t2524 * t2668;
t2700 = t2448 * t2665 - t2490 * t2670;
t2549 = -t2737 - t2740;
t2505 = -t2532 * t2663 + t2549 * t2668;
t2521 = (qJD(5) + t2604) * t2591 + t2714;
t2478 = t2505 * t2664 - t2521 * t2669;
t2479 = t2505 * t2669 + t2521 * t2664;
t2452 = -t2478 * t2658 + t2479 * t2660;
t2504 = t2532 * t2668 + t2549 * t2663;
t2699 = t2452 * t2665 - t2504 * t2670;
t2533 = -t2682 - t2727;
t2554 = -t2737 - t2739;
t2509 = t2533 * t2668 - t2554 * t2663;
t2523 = t2541 - t2726;
t2480 = t2509 * t2664 - t2523 * t2669;
t2481 = t2509 * t2669 + t2523 * t2664;
t2454 = -t2480 * t2658 + t2481 * t2660;
t2508 = t2533 * t2663 + t2554 * t2668;
t2698 = t2454 * t2665 - t2508 * t2670;
t2551 = -t2607 * t2717 - t2713;
t2553 = t2605 * t2717 - t2689;
t2515 = t2551 * t2664 + t2553 * t2669;
t2516 = t2551 * t2669 - t2553 * t2664;
t2487 = -t2515 * t2658 + t2516 * t2660;
t2556 = -t2735 - t2736;
t2697 = t2487 * t2665 - t2556 * t2670;
t2569 = t2683 - t2725;
t2571 = -t2707 - t2736;
t2535 = t2569 * t2669 + t2571 * t2664;
t2536 = -t2569 * t2664 + t2571 * t2669;
t2503 = -t2535 * t2658 + t2536 * t2660;
t2696 = t2503 * t2665 - t2550 * t2670;
t2507 = -t2538 * t2658 + t2539 * t2660;
t2695 = t2507 * t2665 - t2578 * t2670;
t2568 = -t2683 - t2725;
t2585 = -t2735 - t2707;
t2545 = t2568 * t2664 + t2585 * t2669;
t2546 = t2568 * t2669 - t2585 * t2664;
t2514 = -t2545 * t2658 + t2546 * t2660;
t2694 = t2514 * t2665 - t2552 * t2670;
t2594 = t2612 - t2709;
t2563 = t2594 * t2660 - t2596 * t2658;
t2592 = -t2733 - t2734;
t2693 = t2563 * t2665 - t2592 * t2670;
t2603 = -t2716 - t2734;
t2567 = -t2598 * t2658 + t2603 * t2660;
t2593 = -t2612 - t2709;
t2692 = t2567 * t2665 - t2593 * t2670;
t2597 = -t2685 + t2724;
t2619 = -t2716 - t2733;
t2575 = t2597 * t2660 - t2619 * t2658;
t2595 = -t2620 + t2613;
t2691 = t2575 * t2665 - t2595 * t2670;
t2601 = -g(3) * t2722 - t2712;
t2602 = t2670 * t2632 + t2676;
t2690 = t2601 * t2670 + t2602 * t2665;
t2616 = t2710 - t2636;
t2639 = t2654 * t2718;
t2617 = t2639 - t2685;
t2688 = t2616 * t2670 + t2617 * t2665;
t2656 = t2665 ^ 2;
t2627 = -t2656 * t2723 - t2732;
t2646 = t2670 * t2665 * t2723;
t2635 = t2646 - t2711;
t2687 = t2627 * t2670 + t2635 * t2665;
t2634 = t2646 + t2711;
t2637 = -t2716 - t2732;
t2686 = t2634 * t2670 + t2637 * t2665;
t2645 = -qJDD(1) * t2666 - t2671 * t2672;
t2644 = qJDD(1) * t2671 - t2666 * t2672;
t2638 = (-t2656 - t2657) * t2723;
t2622 = -t2659 * t2680 - t2731;
t2618 = t2639 + t2685;
t2615 = t2710 + t2636;
t2609 = -t2634 * t2665 + t2637 * t2670;
t2608 = -t2627 * t2665 + t2635 * t2670;
t2586 = -t2616 * t2665 + t2617 * t2670;
t2584 = -t2659 * t2618 + t2661 * t2686;
t2583 = t2661 * t2618 + t2659 * t2686;
t2582 = -t2659 * t2615 + t2661 * t2687;
t2581 = t2661 * t2615 + t2659 * t2687;
t2580 = -t2659 * t2638 + t2661 * t2688;
t2579 = t2661 * t2638 + t2659 * t2688;
t2574 = t2597 * t2658 + t2619 * t2660;
t2572 = -t2601 * t2665 + t2602 * t2670;
t2566 = t2598 * t2660 + t2603 * t2658;
t2562 = t2594 * t2658 + t2596 * t2660;
t2558 = -t2659 * t2622 + t2661 * t2690;
t2557 = t2661 * t2622 + t2659 * t2690;
t2555 = t2575 * t2670 + t2595 * t2665;
t2548 = t2567 * t2670 + t2593 * t2665;
t2543 = t2563 * t2670 + t2592 * t2665;
t2531 = -t2659 * t2574 + t2661 * t2691;
t2530 = t2661 * t2574 + t2659 * t2691;
t2528 = -t2659 * t2566 + t2661 * t2692;
t2527 = t2661 * t2566 + t2659 * t2692;
t2520 = -t2659 * t2562 + t2661 * t2693;
t2519 = t2661 * t2562 + t2659 * t2693;
t2513 = t2545 * t2660 + t2546 * t2658;
t2506 = t2538 * t2660 + t2539 * t2658;
t2502 = t2535 * t2660 + t2536 * t2658;
t2501 = t2507 * t2670 + t2578 * t2665;
t2497 = t2514 * t2670 + t2552 * t2665;
t2492 = t2503 * t2670 + t2550 * t2665;
t2486 = t2515 * t2660 + t2516 * t2658;
t2472 = t2487 * t2670 + t2556 * t2665;
t2471 = -t2659 * t2513 + t2661 * t2694;
t2470 = t2661 * t2513 + t2659 * t2694;
t2469 = -t2659 * t2506 + t2661 * t2695;
t2468 = t2661 * t2506 + t2659 * t2695;
t2467 = -t2659 * t2502 + t2661 * t2696;
t2466 = t2661 * t2502 + t2659 * t2696;
t2453 = t2480 * t2660 + t2481 * t2658;
t2451 = t2478 * t2660 + t2479 * t2658;
t2450 = -t2659 * t2486 + t2661 * t2697;
t2449 = t2661 * t2486 + t2659 * t2697;
t2447 = t2473 * t2660 + t2474 * t2658;
t2445 = t2454 * t2670 + t2508 * t2665;
t2443 = t2452 * t2670 + t2504 * t2665;
t2438 = t2448 * t2670 + t2490 * t2665;
t2436 = t2461 * t2660 + t2462 * t2658;
t2433 = t2437 * t2670 + t2542 * t2665;
t2428 = -t2659 * t2453 + t2661 * t2698;
t2427 = t2661 * t2453 + t2659 * t2698;
t2426 = -t2659 * t2451 + t2661 * t2699;
t2425 = t2661 * t2451 + t2659 * t2699;
t2419 = t2441 * t2660 + t2442 * t2658;
t2418 = -t2659 * t2447 + t2661 * t2700;
t2417 = t2661 * t2447 + t2659 * t2700;
t2415 = t2439 * t2660 + t2440 * t2658;
t2414 = t2420 * t2670 + t2464 * t2665;
t2413 = -t2659 * t2436 + t2661 * t2701;
t2412 = t2661 * t2436 + t2659 * t2701;
t2411 = t2416 * t2670 + t2457 * t2665;
t2409 = t2429 * t2660 + t2430 * t2658;
t2407 = t2423 * t2660 + t2424 * t2658;
t2404 = -t2659 * t2419 + t2661 * t2702;
t2403 = t2661 * t2419 + t2659 * t2702;
t2402 = t2410 * t2670 + t2431 * t2665;
t2401 = t2408 * t2670 + t2434 * t2665;
t2400 = -t2659 * t2415 + t2661 * t2703;
t2399 = t2661 * t2415 + t2659 * t2703;
t2394 = -t2659 * t2409 + t2661 * t2704;
t2393 = t2661 * t2409 + t2659 * t2704;
t2392 = -t2659 * t2407 + t2661 * t2705;
t2391 = t2661 * t2407 + t2659 * t2705;
t2389 = t2395 * t2660 + t2396 * t2658;
t2388 = t2390 * t2670 + t2397 * t2665;
t2387 = -t2659 * t2389 + t2661 * t2706;
t2386 = t2661 * t2389 + t2659 * t2706;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2645, -t2644, 0, -t2647 * t2666 + t2648 * t2671, 0, 0, 0, 0, 0, 0, -t2584 * t2666 + t2609 * t2671, -t2582 * t2666 + t2608 * t2671, -t2580 * t2666 + t2586 * t2671, -t2558 * t2666 + t2572 * t2671, 0, 0, 0, 0, 0, 0, -t2528 * t2666 + t2548 * t2671, -t2531 * t2666 + t2555 * t2671, -t2520 * t2666 + t2543 * t2671, -t2469 * t2666 + t2501 * t2671, 0, 0, 0, 0, 0, 0, -t2467 * t2666 + t2492 * t2671, -t2471 * t2666 + t2497 * t2671, -t2450 * t2666 + t2472 * t2671, -t2413 * t2666 + t2433 * t2671, 0, 0, 0, 0, 0, 0, -t2426 * t2666 + t2443 * t2671, -t2428 * t2666 + t2445 * t2671, -t2418 * t2666 + t2438 * t2671, -t2392 * t2666 + t2401 * t2671, 0, 0, 0, 0, 0, 0, -t2400 * t2666 + t2411 * t2671, -t2404 * t2666 + t2414 * t2671, -t2394 * t2666 + t2402 * t2671, -t2387 * t2666 + t2388 * t2671; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2644, t2645, 0, t2647 * t2671 + t2648 * t2666, 0, 0, 0, 0, 0, 0, t2584 * t2671 + t2609 * t2666, t2582 * t2671 + t2608 * t2666, t2580 * t2671 + t2586 * t2666, t2558 * t2671 + t2572 * t2666, 0, 0, 0, 0, 0, 0, t2528 * t2671 + t2548 * t2666, t2531 * t2671 + t2555 * t2666, t2520 * t2671 + t2543 * t2666, t2469 * t2671 + t2501 * t2666, 0, 0, 0, 0, 0, 0, t2467 * t2671 + t2492 * t2666, t2471 * t2671 + t2497 * t2666, t2450 * t2671 + t2472 * t2666, t2413 * t2671 + t2433 * t2666, 0, 0, 0, 0, 0, 0, t2426 * t2671 + t2443 * t2666, t2428 * t2671 + t2445 * t2666, t2418 * t2671 + t2438 * t2666, t2392 * t2671 + t2401 * t2666, 0, 0, 0, 0, 0, 0, t2400 * t2671 + t2411 * t2666, t2404 * t2671 + t2414 * t2666, t2394 * t2671 + t2402 * t2666, t2387 * t2671 + t2388 * t2666; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2583, t2581, t2579, t2557, 0, 0, 0, 0, 0, 0, t2527, t2530, t2519, t2468, 0, 0, 0, 0, 0, 0, t2466, t2470, t2449, t2412, 0, 0, 0, 0, 0, 0, t2425, t2427, t2417, t2391, 0, 0, 0, 0, 0, 0, t2399, t2403, t2393, t2386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2672, -qJDD(1), 0, t2648, 0, 0, 0, 0, 0, 0, t2609, t2608, t2586, t2572, 0, 0, 0, 0, 0, 0, t2548, t2555, t2543, t2501, 0, 0, 0, 0, 0, 0, t2492, t2497, t2472, t2433, 0, 0, 0, 0, 0, 0, t2443, t2445, t2438, t2401, 0, 0, 0, 0, 0, 0, t2411, t2414, t2402, t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2672, 0, t2647, 0, 0, 0, 0, 0, 0, t2584, t2582, t2580, t2558, 0, 0, 0, 0, 0, 0, t2528, t2531, t2520, t2469, 0, 0, 0, 0, 0, 0, t2467, t2471, t2450, t2413, 0, 0, 0, 0, 0, 0, t2426, t2428, t2418, t2392, 0, 0, 0, 0, 0, 0, t2400, t2404, t2394, t2387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2583, t2581, t2579, t2557, 0, 0, 0, 0, 0, 0, t2527, t2530, t2519, t2468, 0, 0, 0, 0, 0, 0, t2466, t2470, t2449, t2412, 0, 0, 0, 0, 0, 0, t2425, t2427, t2417, t2391, 0, 0, 0, 0, 0, 0, t2399, t2403, t2393, t2386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2637, t2635, t2617, t2602, 0, 0, 0, 0, 0, 0, t2567, t2575, t2563, t2507, 0, 0, 0, 0, 0, 0, t2503, t2514, t2487, t2437, 0, 0, 0, 0, 0, 0, t2452, t2454, t2448, t2408, 0, 0, 0, 0, 0, 0, t2416, t2420, t2410, t2390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2634, t2627, t2616, t2601, 0, 0, 0, 0, 0, 0, -t2593, -t2595, -t2592, -t2578, 0, 0, 0, 0, 0, 0, -t2550, -t2552, -t2556, -t2542, 0, 0, 0, 0, 0, 0, -t2504, -t2508, -t2490, -t2434, 0, 0, 0, 0, 0, 0, -t2457, -t2464, -t2431, -t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2618, t2615, t2638, t2622, 0, 0, 0, 0, 0, 0, t2566, t2574, t2562, t2506, 0, 0, 0, 0, 0, 0, t2502, t2513, t2486, t2436, 0, 0, 0, 0, 0, 0, t2451, t2453, t2447, t2407, 0, 0, 0, 0, 0, 0, t2415, t2419, t2409, t2389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2603, t2597, t2594, t2539, 0, 0, 0, 0, 0, 0, t2536, t2546, t2516, t2462, 0, 0, 0, 0, 0, 0, t2479, t2481, t2474, t2424, 0, 0, 0, 0, 0, 0, t2440, t2442, t2430, t2396; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2598, t2619, t2596, t2538, 0, 0, 0, 0, 0, 0, t2535, t2545, t2515, t2461, 0, 0, 0, 0, 0, 0, t2478, t2480, t2473, t2423, 0, 0, 0, 0, 0, 0, t2439, t2441, t2429, t2395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2593, t2595, t2592, t2578, 0, 0, 0, 0, 0, 0, t2550, t2552, t2556, t2542, 0, 0, 0, 0, 0, 0, t2504, t2508, t2490, t2434, 0, 0, 0, 0, 0, 0, t2457, t2464, t2431, t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2571, t2568, t2551, t2494, 0, 0, 0, 0, 0, 0, t2505, t2509, t2491, t2435, 0, 0, 0, 0, 0, 0, t2458, t2465, t2432, t2398; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2569, t2585, t2553, t2493, 0, 0, 0, 0, 0, 0, -t2521, -t2523, -t2544, -t2476, 0, 0, 0, 0, 0, 0, -t2482, -t2484, -t2510, -t2463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2550, t2552, t2556, t2542, 0, 0, 0, 0, 0, 0, t2504, t2508, t2490, t2434, 0, 0, 0, 0, 0, 0, t2457, t2464, t2431, t2397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, t2533, t2522, t2460, 0, 0, 0, 0, 0, 0, t2489, t2496, t2456, t2406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2532, t2554, t2524, t2459, 0, 0, 0, 0, 0, 0, t2488, t2495, t2455, t2405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2521, t2523, t2544, t2476, 0, 0, 0, 0, 0, 0, t2482, t2484, t2510, t2463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2525, t2512, t2483, t2422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2511, t2534, t2485, t2421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2482, t2484, t2510, t2463;];
f_new_reg  = t1;
