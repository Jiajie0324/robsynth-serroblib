% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 23:51
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR10_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 23:47:22
% EndTime: 2019-05-06 23:48:48
% DurationCPUTime: 85.17s
% Computational Cost: add. (878015->1118), mult. (1988172->1814), div. (0->0), fcn. (1642923->14), ass. (0->805)
t1243 = sin(pkin(6));
t1245 = cos(pkin(6));
t1403 = qJD(1) * t1245;
t1352 = qJD(2) + t1403;
t1310 = qJD(1) * t1352;
t1290 = t1243 * t1310;
t1246 = sin(qJ(6));
t1242 = sin(pkin(12));
t1244 = cos(pkin(12));
t1249 = sin(qJ(2));
t1377 = t1243 * t1249;
t1366 = qJD(1) * t1377;
t1202 = -t1242 * t1366 + t1244 * t1352;
t1203 = t1242 * t1352 + t1244 * t1366;
t1248 = sin(qJ(4));
t1253 = cos(qJ(4));
t1165 = t1202 * t1248 + t1203 * t1253;
t1254 = cos(qJ(2));
t1402 = qJD(1) * t1254;
t1354 = qJD(2) * t1402;
t1368 = t1249 * qJDD(1);
t1209 = (t1354 + t1368) * t1243;
t1345 = qJDD(1) * t1245 + qJDD(2);
t1176 = t1244 * t1209 + t1242 * t1345;
t1347 = t1209 * t1242 - t1244 * t1345;
t1349 = t1176 * t1248 + t1253 * t1347;
t1087 = -qJD(4) * t1165 - t1349;
t1086 = qJDD(5) - t1087;
t1263 = qJDD(6) + t1086;
t1376 = t1243 * t1254;
t1365 = qJD(1) * t1376;
t1228 = -qJD(4) + t1365;
t1247 = sin(qJ(5));
t1252 = cos(qJ(5));
t1134 = t1165 * t1247 + t1252 * t1228;
t1136 = t1165 * t1252 - t1228 * t1247;
t1251 = cos(qJ(6));
t1071 = t1251 * t1134 + t1136 * t1246;
t1073 = -t1134 * t1246 + t1136 * t1251;
t997 = t1073 * t1071;
t1432 = t1263 - t997;
t1437 = t1246 * t1432;
t1075 = t1136 * t1134;
t1426 = -t1075 + t1086;
t1436 = t1247 * t1426;
t1435 = t1251 * t1432;
t1434 = t1252 * t1426;
t1163 = -t1253 * t1202 + t1203 * t1248;
t1160 = qJD(5) + t1163;
t1097 = t1160 * t1134;
t1231 = qJD(2) * t1366;
t1369 = qJDD(1) * t1254;
t1339 = t1243 * t1369 - t1231;
t1205 = -qJDD(4) + t1339;
t1267 = qJD(4) * t1163 - t1176 * t1253 + t1248 * t1347;
t1353 = t1134 * qJD(5) + t1247 * t1205 + t1252 * t1267;
t982 = -t1097 + t1353;
t1150 = t1163 * t1228;
t1433 = t1267 - t1150;
t1344 = t1352 ^ 2;
t1385 = t1202 * t1203;
t1268 = -t1339 + t1385;
t1431 = t1242 * t1268;
t1430 = t1244 * t1268;
t1387 = t1163 * t1165;
t1264 = -t1205 - t1387;
t1429 = t1248 * t1264;
t1428 = t1253 * t1264;
t1155 = qJD(6) + t1160;
t1038 = t1155 * t1071;
t1350 = t1252 * t1205 - t1247 * t1267;
t1023 = -qJD(5) * t1136 - t1350;
t1266 = qJD(6) * t1071 - t1023 * t1246 + t1251 * t1353;
t1427 = -t1038 - t1266;
t1187 = t1202 * t1365;
t1146 = -t1187 - t1176;
t1188 = t1203 * t1365;
t1142 = t1188 + t1347;
t983 = t1353 + t1097;
t1239 = t1243 ^ 2;
t1424 = (qJD(1) * (t1245 ^ 2 + t1239) + qJD(2) * t1245) * t1243;
t1351 = -t1251 * t1023 - t1246 * t1353;
t875 = (qJD(6) - t1155) * t1073 + t1351;
t978 = (qJD(5) - t1160) * t1136 + t1350;
t1051 = (qJD(4) + t1228) * t1165 + t1349;
t1423 = qJD(1) ^ 2;
t1069 = t1071 ^ 2;
t1070 = t1073 ^ 2;
t1422 = t1134 ^ 2;
t1133 = t1136 ^ 2;
t1154 = t1155 ^ 2;
t1158 = t1160 ^ 2;
t1161 = t1163 ^ 2;
t1162 = t1165 ^ 2;
t1421 = t1202 ^ 2;
t1199 = t1203 ^ 2;
t1420 = t1228 ^ 2;
t1419 = 2 * qJD(3);
t1418 = pkin(2) * t1249;
t1417 = pkin(2) * t1254;
t1416 = pkin(4) * t1248;
t1415 = pkin(8) * t1243;
t1414 = t1245 * g(3);
t1102 = pkin(4) * t1163 - pkin(10) * t1165;
t1250 = sin(qJ(1));
t1255 = cos(qJ(1));
t1229 = g(1) * t1250 - t1255 * g(2);
t1261 = qJDD(1) * pkin(1) + t1415 * t1423 + t1229;
t1288 = t1249 * t1310;
t1289 = t1254 * t1310;
t1258 = t1231 * pkin(2) - t1414 - t1209 * qJ(3) + (-qJ(3) * t1289 + (t1288 - t1369) * pkin(2) - t1261) * t1243;
t1230 = g(1) * t1255 + t1250 * g(2);
t1206 = -pkin(1) * t1423 + qJDD(1) * t1415 - t1230;
t1260 = t1245 * t1261;
t1157 = -g(3) * t1377 + t1254 * t1206 + t1249 * t1260;
t1342 = -qJ(3) * t1249 - t1417;
t1291 = t1423 * t1342;
t1259 = t1239 * t1254 * t1291 - pkin(2) * t1344 + qJ(3) * t1345 + t1157;
t1020 = t1203 * t1419 + t1242 * t1259 - t1244 * t1258;
t1257 = pkin(3) * t1268 + pkin(9) * t1146 - t1020;
t1021 = t1202 * t1419 + t1242 * t1258 + t1244 * t1259;
t1177 = -pkin(3) * t1365 - pkin(9) * t1203;
t990 = -pkin(3) * t1421 - pkin(9) * t1347 + t1177 * t1365 + t1021;
t899 = t1248 * t1257 + t1253 * t990;
t861 = -pkin(4) * t1420 - pkin(10) * t1205 - t1102 * t1163 + t899;
t1348 = t1249 * t1206 - t1254 * t1260;
t1112 = qJDD(3) - t1345 * pkin(2) - t1344 * qJ(3) + (t1254 * g(3) + t1291 * t1377) * t1243 + t1348;
t1027 = pkin(3) * t1347 - t1421 * pkin(9) + t1203 * t1177 + t1112;
t915 = t1433 * pkin(10) + (-t1165 * t1228 - t1087) * pkin(4) + t1027;
t814 = t1247 * t861 - t1252 * t915;
t756 = t1426 * pkin(5) + pkin(11) * t982 - t814;
t1089 = pkin(5) * t1160 - pkin(11) * t1136;
t815 = t1247 * t915 + t1252 * t861;
t765 = -pkin(5) * t1422 + pkin(11) * t1023 - t1089 * t1160 + t815;
t710 = t1246 * t756 + t1251 * t765;
t898 = t1248 * t990 - t1253 * t1257;
t820 = t1248 * t899 - t1253 * t898;
t1413 = t1242 * t820;
t1412 = t1244 * t820;
t860 = t1205 * pkin(4) - t1420 * pkin(10) + t1102 * t1165 + t898;
t822 = -t1023 * pkin(5) - pkin(11) * t1422 + t1089 * t1136 + t860;
t1411 = t1246 * t822;
t945 = t1263 + t997;
t1410 = t1246 * t945;
t709 = t1246 * t765 - t1251 * t756;
t651 = t1246 * t710 - t1251 * t709;
t1409 = t1247 * t651;
t1408 = t1247 * t860;
t1407 = t1251 * t822;
t1406 = t1251 * t945;
t1405 = t1252 * t651;
t1404 = t1252 * t860;
t1009 = t1075 + t1086;
t1401 = t1009 * t1247;
t1400 = t1009 * t1252;
t1399 = t1027 * t1248;
t1398 = t1027 * t1253;
t1094 = t1205 - t1387;
t1397 = t1094 * t1248;
t1396 = t1094 * t1253;
t1395 = t1112 * t1242;
t1394 = t1112 * t1244;
t1147 = t1339 + t1385;
t1393 = t1147 * t1242;
t1392 = t1147 * t1244;
t1391 = t1155 * t1246;
t1390 = t1155 * t1251;
t1389 = t1160 * t1247;
t1388 = t1160 * t1252;
t1189 = t1243 * t1261 + t1414;
t1386 = t1189 * t1249;
t1375 = t1249 * t1254;
t1378 = t1239 * t1423;
t1227 = t1375 * t1378;
t1207 = -t1227 + t1345;
t1384 = t1207 * t1249;
t1383 = t1207 * t1254;
t1208 = t1227 + t1345;
t1382 = t1208 * t1249;
t1381 = t1208 * t1254;
t1380 = t1228 * t1248;
t1379 = t1228 * t1253;
t1374 = t1254 * t1189;
t1367 = -pkin(4) * t1253 - pkin(3);
t1363 = t1248 * t997;
t1362 = t1253 * t997;
t1361 = t1248 * t1075;
t1360 = t1253 * t1075;
t1359 = t1249 * t1387;
t1358 = t1254 * t1387;
t1357 = t1249 * t1385;
t1356 = t1254 * t1385;
t1240 = t1249 ^ 2;
t1355 = t1240 * t1378;
t652 = t1246 * t709 + t1251 * t710;
t821 = t1248 * t898 + t1253 * t899;
t939 = t1020 * t1242 + t1244 * t1021;
t1191 = -t1229 * t1250 - t1255 * t1230;
t1226 = qJDD(1) * t1255 - t1250 * t1423;
t1343 = -pkin(7) * t1226 - g(3) * t1250;
t1198 = -t1355 - t1344;
t1166 = -t1198 * t1249 - t1383;
t1341 = pkin(8) * t1166 - t1386;
t1241 = t1254 ^ 2;
t1234 = t1241 * t1378;
t1213 = -t1234 - t1344;
t1170 = t1213 * t1254 - t1382;
t1340 = pkin(8) * t1170 + t1374;
t735 = t1247 * t815 - t1252 * t814;
t736 = t1247 * t814 + t1252 * t815;
t616 = t1252 * t652 - t1409;
t609 = t1248 * t616 - t1253 * t822;
t610 = t1248 * t822 + t1253 * t616;
t584 = -t1242 * t609 + t1244 * t610;
t615 = t1247 * t652 + t1405;
t1338 = t1249 * t584 - t1254 * t615;
t711 = t1248 * t736 - t1253 * t860;
t712 = t1248 * t860 + t1253 * t736;
t654 = -t1242 * t711 + t1244 * t712;
t1337 = t1249 * t654 - t1254 * t735;
t879 = -t1038 + t1266;
t804 = -t1246 * t875 + t1251 * t879;
t806 = -t1246 * t879 - t1251 * t875;
t731 = -t1247 * t804 + t1252 * t806;
t942 = -t1069 - t1070;
t722 = t1248 * t731 - t1253 * t942;
t723 = t1248 * t942 + t1253 * t731;
t656 = -t1242 * t722 + t1244 * t723;
t729 = t1247 * t806 + t1252 * t804;
t1336 = t1249 * t656 - t1254 * t729;
t874 = (qJD(6) + t1155) * t1073 + t1351;
t803 = -t1246 * t874 + t1251 * t1427;
t805 = -t1246 * t1427 - t1251 * t874;
t730 = -t1247 * t803 + t1252 * t805;
t996 = -t1070 + t1069;
t724 = t1248 * t730 + t1253 * t996;
t725 = -t1248 * t996 + t1253 * t730;
t658 = -t1242 * t724 + t1244 * t725;
t728 = -t1247 * t805 - t1252 * t803;
t1335 = t1249 * t658 + t1254 * t728;
t984 = -t1154 - t1069;
t886 = t1246 * t984 + t1435;
t887 = t1251 * t984 - t1437;
t809 = -t1247 * t886 + t1252 * t887;
t748 = t1248 * t809 - t1253 * t874;
t749 = t1248 * t874 + t1253 * t809;
t688 = -t1242 * t748 + t1244 * t749;
t808 = t1247 * t887 + t1252 * t886;
t1334 = t1249 * t688 - t1254 * t808;
t1011 = -t1070 - t1154;
t900 = t1011 * t1251 - t1410;
t901 = -t1011 * t1246 - t1406;
t824 = -t1247 * t900 + t1252 * t901;
t750 = t1248 * t824 - t1253 * t1427;
t751 = t1248 * t1427 + t1253 * t824;
t697 = -t1242 * t750 + t1244 * t751;
t823 = t1247 * t901 + t1252 * t900;
t1333 = t1249 * t697 - t1254 * t823;
t1037 = -t1070 + t1154;
t904 = t1037 * t1251 + t1437;
t906 = -t1037 * t1246 + t1435;
t833 = -t1247 * t904 + t1252 * t906;
t758 = t1248 * t833 + t1253 * t879;
t760 = -t1248 * t879 + t1253 * t833;
t702 = -t1242 * t758 + t1244 * t760;
t831 = -t1247 * t906 - t1252 * t904;
t1332 = t1249 * t702 + t1254 * t831;
t1036 = t1069 - t1154;
t905 = t1036 * t1246 + t1406;
t907 = t1036 * t1251 - t1410;
t834 = -t1247 * t905 + t1252 * t907;
t759 = t1248 * t834 + t1253 * t875;
t761 = -t1248 * t875 + t1253 * t834;
t703 = -t1242 * t759 + t1244 * t761;
t832 = -t1247 * t907 - t1252 * t905;
t1331 = t1249 * t703 + t1254 * t832;
t910 = -qJD(6) * t1073 - t1351;
t868 = t1071 * t1391 + t1251 * t910;
t869 = t1071 * t1390 - t1246 * t910;
t797 = -t1247 * t868 + t1252 * t869;
t769 = t1248 * t797 + t1362;
t771 = t1253 * t797 - t1363;
t715 = -t1242 * t769 + t1244 * t771;
t795 = -t1247 * t869 - t1252 * t868;
t1330 = t1249 * t715 + t1254 * t795;
t870 = t1073 * t1390 - t1246 * t1266;
t871 = -t1073 * t1391 - t1251 * t1266;
t798 = -t1247 * t870 + t1252 * t871;
t770 = t1248 * t798 - t1362;
t772 = t1253 * t798 + t1363;
t716 = -t1242 * t770 + t1244 * t772;
t796 = -t1247 * t871 - t1252 * t870;
t1329 = t1249 * t716 + t1254 * t796;
t949 = (-t1071 * t1246 - t1073 * t1251) * t1155;
t950 = (-t1071 * t1251 + t1073 * t1246) * t1155;
t867 = -t1247 * t949 + t1252 * t950;
t851 = t1248 * t867 - t1253 * t1263;
t852 = t1248 * t1263 + t1253 * t867;
t774 = -t1242 * t851 + t1244 * t852;
t866 = -t1247 * t950 - t1252 * t949;
t1328 = t1249 * t774 + t1254 * t866;
t1029 = t1133 + t1422;
t895 = -t1247 * t982 - t1252 * t978;
t856 = t1029 * t1253 + t1248 * t895;
t857 = -t1029 * t1248 + t1253 * t895;
t780 = -t1242 * t856 + t1244 * t857;
t893 = -t1247 * t978 + t1252 * t982;
t1327 = t1249 * t780 - t1254 * t893;
t1074 = -t1133 + t1422;
t979 = (-qJD(5) - t1160) * t1136 - t1350;
t894 = t1247 * t983 + t1252 * t979;
t862 = t1074 * t1253 + t1248 * t894;
t863 = -t1074 * t1248 + t1253 * t894;
t787 = -t1242 * t862 + t1244 * t863;
t892 = -t1247 * t979 + t1252 * t983;
t1326 = t1249 * t787 + t1254 * t892;
t1049 = -t1158 - t1422;
t934 = t1049 * t1252 - t1436;
t864 = t1248 * t934 + t1253 * t979;
t865 = -t1248 * t979 + t1253 * t934;
t793 = -t1242 * t864 + t1244 * t865;
t933 = t1049 * t1247 + t1434;
t1325 = t1249 * t793 - t1254 * t933;
t1059 = -t1133 - t1158;
t941 = -t1059 * t1247 - t1400;
t872 = t1248 * t941 + t1253 * t983;
t873 = -t1248 * t983 + t1253 * t941;
t800 = -t1242 * t872 + t1244 * t873;
t940 = t1059 * t1252 - t1401;
t1324 = t1249 * t800 - t1254 * t940;
t1093 = -t1133 + t1158;
t957 = -t1093 * t1247 + t1434;
t888 = t1248 * t957 + t1253 * t982;
t890 = -t1248 * t982 + t1253 * t957;
t812 = -t1242 * t888 + t1244 * t890;
t955 = -t1093 * t1252 - t1436;
t1323 = t1249 * t812 + t1254 * t955;
t1092 = -t1158 + t1422;
t958 = t1092 * t1252 - t1401;
t889 = t1248 * t958 + t1253 * t978;
t891 = -t1248 * t978 + t1253 * t958;
t813 = -t1242 * t889 + t1244 * t891;
t956 = -t1092 * t1247 - t1400;
t1322 = t1249 * t813 + t1254 * t956;
t972 = -t1023 * t1247 + t1134 * t1388;
t929 = t1248 * t972 + t1360;
t931 = t1253 * t972 - t1361;
t847 = -t1242 * t929 + t1244 * t931;
t971 = -t1023 * t1252 - t1134 * t1389;
t1321 = t1249 * t847 + t1254 * t971;
t974 = -t1136 * t1389 - t1252 * t1353;
t930 = t1248 * t974 - t1360;
t932 = t1253 * t974 + t1361;
t848 = -t1242 * t930 + t1244 * t932;
t973 = -t1136 * t1388 + t1247 * t1353;
t1320 = t1249 * t848 + t1254 * t973;
t1012 = (t1134 * t1247 + t1136 * t1252) * t1160;
t1013 = (-t1134 * t1252 + t1136 * t1247) * t1160;
t963 = t1013 * t1248 - t1086 * t1253;
t964 = t1013 * t1253 + t1086 * t1248;
t881 = -t1242 * t963 + t1244 * t964;
t1319 = t1012 * t1254 + t1249 * t881;
t740 = t1244 * t821 - t1413;
t1318 = -t1027 * t1254 + t1249 * t740;
t1050 = (qJD(4) - t1228) * t1165 + t1349;
t1100 = -t1420 - t1161;
t1014 = t1100 * t1248 + t1428;
t1015 = t1100 * t1253 - t1429;
t928 = -t1014 * t1242 + t1015 * t1244;
t1317 = -t1050 * t1254 + t1249 * t928;
t1140 = t1161 - t1420;
t1046 = t1140 * t1248 - t1396;
t1048 = t1140 * t1253 + t1397;
t962 = -t1046 * t1242 + t1048 * t1244;
t1316 = t1051 * t1254 + t1249 * t962;
t1123 = -t1162 - t1420;
t1032 = t1123 * t1253 + t1397;
t1033 = -t1123 * t1248 + t1396;
t948 = -t1032 * t1242 + t1033 * t1244;
t1315 = t1249 * t948 + t1254 * t1433;
t1055 = t1150 + t1267;
t1141 = -t1162 + t1420;
t1045 = t1141 * t1253 + t1429;
t1047 = -t1141 * t1248 + t1428;
t961 = -t1045 * t1242 + t1047 * t1244;
t1314 = t1055 * t1254 + t1249 * t961;
t1064 = -t1161 - t1162;
t966 = -t1051 * t1248 + t1055 * t1253;
t968 = -t1051 * t1253 - t1055 * t1248;
t885 = -t1242 * t966 + t1244 * t968;
t1313 = -t1064 * t1254 + t1249 * t885;
t1103 = -t1162 + t1161;
t965 = -t1050 * t1248 - t1253 * t1433;
t967 = -t1050 * t1253 + t1248 * t1433;
t884 = -t1242 * t965 + t1244 * t967;
t1312 = t1103 * t1254 + t1249 * t884;
t1311 = -t1112 * t1254 + t1249 * t939;
t1309 = t1239 * t1249 * t1354;
t1084 = (t1163 * t1248 + t1165 * t1253) * t1228;
t1085 = (t1163 * t1253 - t1165 * t1248) * t1228;
t1007 = -t1084 * t1242 + t1085 * t1244;
t1308 = t1007 * t1249 + t1205 * t1254;
t938 = -t1020 * t1244 + t1021 * t1242;
t1143 = t1188 - t1347;
t1145 = -t1187 + t1176;
t1078 = t1143 * t1244 - t1145 * t1242;
t1167 = -t1199 + t1421;
t1307 = t1078 * t1249 + t1167 * t1254;
t1079 = -t1142 * t1244 - t1146 * t1242;
t1137 = t1199 + t1421;
t1306 = t1079 * t1249 + t1137 * t1254;
t1159 = -t1234 - t1421;
t1091 = t1159 * t1244 - t1431;
t1305 = t1091 * t1249 + t1143 * t1254;
t1185 = -t1199 - t1234;
t1107 = -t1185 * t1242 + t1392;
t1304 = t1107 * t1249 - t1145 * t1254;
t1184 = -t1199 + t1234;
t1108 = -t1184 * t1242 + t1430;
t1303 = t1108 * t1249 + t1146 * t1254;
t1183 = -t1234 + t1421;
t1109 = t1183 * t1244 + t1393;
t1302 = t1109 * t1249 + t1142 * t1254;
t1156 = g(3) * t1376 + t1348;
t1301 = -t1254 * t1156 + t1249 * t1157;
t1101 = t1156 * t1249 + t1157 * t1254;
t1217 = t1243 * t1289;
t1179 = t1217 + t1209;
t1216 = t1243 * t1288;
t1182 = -t1216 + t1339;
t1300 = t1179 * t1254 + t1182 * t1249;
t1180 = -t1217 + t1209;
t1181 = t1216 + t1339;
t1299 = -t1180 * t1254 + t1181 * t1249;
t1298 = t1198 * t1254 - t1384;
t1212 = t1234 - t1344;
t1297 = t1212 * t1249 + t1383;
t1211 = t1344 - t1355;
t1296 = t1211 * t1254 + t1382;
t1295 = t1213 * t1249 + t1381;
t1190 = t1229 * t1255 - t1250 * t1230;
t1294 = t1243 * t1345;
t1040 = t1087 * t1253 - t1163 * t1380;
t1041 = -t1087 * t1248 - t1163 * t1379;
t953 = -t1040 * t1242 + t1041 * t1244;
t1293 = t1249 * t953 + t1358;
t1042 = -t1165 * t1379 - t1248 * t1267;
t1043 = t1165 * t1380 - t1253 * t1267;
t954 = -t1042 * t1242 + t1043 * t1244;
t1292 = t1249 * t954 - t1358;
t1129 = t1187 * t1244 + t1242 * t1347;
t1287 = t1129 * t1249 - t1356;
t1131 = t1176 * t1244 + t1188 * t1242;
t1286 = t1131 * t1249 + t1356;
t1285 = t1249 * t1339;
t1284 = t1254 * t1339;
t645 = -pkin(5) * t822 + pkin(11) * t652;
t588 = -pkin(10) * t615 - pkin(11) * t1405 - t1247 * t645;
t600 = -pkin(4) * t615 - pkin(5) * t651;
t568 = -pkin(3) * t615 + pkin(9) * t610 + t1248 * t588 + t1253 * t600;
t574 = -pkin(9) * t609 - t1248 * t600 + t1253 * t588;
t583 = t1242 * t610 + t1244 * t609;
t561 = -qJ(3) * t583 - t1242 * t568 + t1244 * t574;
t569 = -pkin(2) * t583 - pkin(3) * t609 + pkin(4) * t822 - pkin(10) * t616 + pkin(11) * t1409 - t1252 * t645;
t578 = t1249 * t615 + t1254 * t584;
t1283 = pkin(8) * t578 + t1249 * t561 + t1254 * t569;
t638 = -pkin(5) * t942 + pkin(11) * t806 + t652;
t642 = -pkin(11) * t804 - t651;
t601 = -pkin(10) * t729 - t1247 * t638 + t1252 * t642;
t686 = -pkin(4) * t729 - pkin(5) * t804;
t586 = -pkin(3) * t729 + pkin(9) * t723 + t1248 * t601 + t1253 * t686;
t590 = -pkin(9) * t722 - t1248 * t686 + t1253 * t601;
t655 = t1242 * t723 + t1244 * t722;
t575 = -qJ(3) * t655 - t1242 * t586 + t1244 * t590;
t587 = -pkin(2) * t655 - pkin(3) * t722 + pkin(4) * t942 - pkin(10) * t731 - t1247 * t642 - t1252 * t638;
t634 = t1249 * t729 + t1254 * t656;
t1282 = pkin(8) * t634 + t1249 * t575 + t1254 * t587;
t737 = -pkin(5) * t874 + pkin(11) * t887 - t1407;
t752 = -pkin(11) * t886 + t1411;
t662 = -pkin(10) * t808 - t1247 * t737 + t1252 * t752;
t664 = -pkin(4) * t808 - pkin(5) * t886 + t709;
t614 = -pkin(3) * t808 + pkin(9) * t749 + t1248 * t662 + t1253 * t664;
t621 = -pkin(9) * t748 - t1248 * t664 + t1253 * t662;
t687 = t1242 * t749 + t1244 * t748;
t581 = -qJ(3) * t687 - t1242 * t614 + t1244 * t621;
t623 = -pkin(2) * t687 - pkin(3) * t748 + pkin(4) * t874 - pkin(10) * t809 - t1247 * t752 - t1252 * t737;
t666 = t1249 * t808 + t1254 * t688;
t1281 = pkin(8) * t666 + t1249 * t581 + t1254 * t623;
t738 = -pkin(5) * t1427 + pkin(11) * t901 + t1411;
t762 = -pkin(11) * t900 + t1407;
t665 = -pkin(10) * t823 - t1247 * t738 + t1252 * t762;
t667 = -pkin(4) * t823 - pkin(5) * t900 + t710;
t617 = -pkin(3) * t823 + pkin(9) * t751 + t1248 * t665 + t1253 * t667;
t622 = -pkin(9) * t750 - t1248 * t667 + t1253 * t665;
t696 = t1242 * t751 + t1244 * t750;
t585 = -qJ(3) * t696 - t1242 * t617 + t1244 * t622;
t625 = -pkin(2) * t696 - pkin(3) * t750 + pkin(4) * t1427 - pkin(10) * t824 - t1247 * t762 - t1252 * t738;
t678 = t1249 * t823 + t1254 * t697;
t1280 = pkin(8) * t678 + t1249 * t585 + t1254 * t625;
t628 = pkin(9) * t712 + (-pkin(10) * t1248 + t1367) * t735;
t641 = -pkin(9) * t711 + (-pkin(10) * t1253 + t1416) * t735;
t653 = t1242 * t712 + t1244 * t711;
t593 = -qJ(3) * t653 - t1242 * t628 + t1244 * t641;
t620 = -pkin(2) * t653 - pkin(3) * t711 + pkin(4) * t860 - pkin(10) * t736;
t632 = t1249 * t735 + t1254 * t654;
t1279 = pkin(8) * t632 + t1249 * t593 + t1254 * t620;
t721 = -pkin(10) * t893 - t735;
t669 = pkin(9) * t857 + t1248 * t721 + t1367 * t893;
t684 = -pkin(9) * t856 + t1253 * t721 + t1416 * t893;
t779 = t1242 * t857 + t1244 * t856;
t626 = -qJ(3) * t779 - t1242 * t669 + t1244 * t684;
t663 = -pkin(2) * t779 - pkin(3) * t856 - pkin(4) * t1029 - pkin(10) * t895 - t736;
t744 = t1249 * t893 + t1254 * t780;
t1278 = pkin(8) * t744 + t1249 * t626 + t1254 * t663;
t766 = -pkin(4) * t933 + t814;
t827 = -pkin(10) * t933 + t1408;
t691 = -pkin(3) * t933 + pkin(9) * t865 + t1248 * t827 + t1253 * t766;
t704 = -pkin(9) * t864 - t1248 * t766 + t1253 * t827;
t792 = t1242 * t865 + t1244 * t864;
t635 = -qJ(3) * t792 - t1242 * t691 + t1244 * t704;
t699 = -pkin(2) * t792 - pkin(3) * t864 - pkin(4) * t979 - pkin(10) * t934 + t1404;
t753 = t1249 * t933 + t1254 * t793;
t1277 = pkin(8) * t753 + t1249 * t635 + t1254 * t699;
t767 = -pkin(4) * t940 + t815;
t828 = -pkin(10) * t940 + t1404;
t692 = -pkin(3) * t940 + pkin(9) * t873 + t1248 * t828 + t1253 * t767;
t707 = -pkin(9) * t872 - t1248 * t767 + t1253 * t828;
t799 = t1242 * t873 + t1244 * t872;
t637 = -qJ(3) * t799 - t1242 * t692 + t1244 * t707;
t706 = -pkin(2) * t799 - pkin(3) * t872 - pkin(4) * t983 - pkin(10) * t941 - t1408;
t757 = t1249 * t940 + t1254 * t800;
t1276 = pkin(8) * t757 + t1249 * t637 + t1254 * t706;
t739 = t1242 * t821 + t1412;
t807 = -pkin(3) * t1027 + pkin(9) * t821;
t675 = -pkin(9) * t1412 - qJ(3) * t739 - t1242 * t807;
t698 = -pkin(2) * t739 - pkin(3) * t820;
t734 = t1027 * t1249 + t1254 * t740;
t1275 = pkin(8) * t734 + t1249 * t675 + t1254 * t698;
t768 = -pkin(3) * t1064 + pkin(9) * t968 + t821;
t783 = -pkin(9) * t966 - t820;
t883 = t1242 * t968 + t1244 * t966;
t693 = -qJ(3) * t883 - t1242 * t768 + t1244 * t783;
t838 = -pkin(2) * t883 - pkin(3) * t966;
t853 = t1064 * t1249 + t1254 * t885;
t1274 = pkin(8) * t853 + t1249 * t693 + t1254 * t838;
t903 = -pkin(3) * t1050 + pkin(9) * t1015 - t1398;
t927 = t1014 * t1244 + t1015 * t1242;
t935 = -pkin(9) * t1014 + t1399;
t794 = -qJ(3) * t927 - t1242 * t903 + t1244 * t935;
t818 = -pkin(2) * t927 - pkin(3) * t1014 + t898;
t896 = t1050 * t1249 + t1254 * t928;
t1273 = pkin(8) * t896 + t1249 * t794 + t1254 * t818;
t908 = pkin(3) * t1433 + pkin(9) * t1033 + t1399;
t943 = -pkin(9) * t1032 + t1398;
t947 = t1032 * t1244 + t1033 * t1242;
t816 = -qJ(3) * t947 - t1242 * t908 + t1244 * t943;
t829 = -pkin(2) * t947 - pkin(3) * t1032 + t899;
t909 = -t1249 * t1433 + t1254 * t948;
t1272 = pkin(8) * t909 + t1249 * t816 + t1254 * t829;
t1090 = t1159 * t1242 + t1430;
t1018 = -qJ(3) * t1090 + t1395;
t1044 = t1091 * t1254 - t1143 * t1249;
t977 = -pkin(2) * t1090 + t1020;
t1271 = pkin(8) * t1044 + t1018 * t1249 + t1254 * t977;
t1104 = t1185 * t1244 + t1393;
t1030 = -qJ(3) * t1104 + t1394;
t1060 = t1107 * t1254 + t1145 * t1249;
t986 = -pkin(2) * t1104 + t1021;
t1270 = pkin(8) * t1060 + t1030 * t1249 + t1254 * t986;
t1124 = t1180 * t1249 + t1181 * t1254;
t1269 = pkin(8) * t1124 + t1101;
t1028 = t1079 * t1254 - t1137 * t1249;
t1077 = -t1142 * t1242 + t1146 * t1244;
t914 = -qJ(3) * t1077 - t938;
t1265 = pkin(8) * t1028 - t1077 * t1417 + t1249 * t914;
t921 = t1112 * t1249 + t1254 * t939;
t1262 = pkin(8) * t921 + t1342 * t938;
t1225 = t1250 * qJDD(1) + t1255 * t1423;
t1215 = -t1234 - t1355;
t1214 = -t1234 + t1355;
t1210 = -pkin(7) * t1225 + g(3) * t1255;
t1196 = t1245 * t1284;
t1195 = t1243 * t1284;
t1186 = (t1240 + t1241) * t1290;
t1178 = (t1368 + (0.2e1 * qJD(2) + t1403) * t1402) * t1243;
t1172 = t1254 * t1209 - t1240 * t1290;
t1171 = -t1241 * t1290 - t1285;
t1169 = t1212 * t1254 - t1384;
t1168 = -t1211 * t1249 + t1381;
t1153 = (t1245 * t1209 + t1402 * t1424) * t1249;
t1152 = -qJD(1) * t1375 * t1424 + t1196;
t1139 = (-t1202 * t1244 - t1203 * t1242) * t1365;
t1138 = (-t1202 * t1242 + t1203 * t1244) * t1365;
t1130 = t1176 * t1242 - t1188 * t1244;
t1128 = t1187 * t1242 - t1244 * t1347;
t1125 = -t1179 * t1249 + t1182 * t1254;
t1122 = t1243 * t1182 + t1245 * t1295;
t1121 = -t1243 * t1181 + t1245 * t1297;
t1120 = -t1243 * t1180 + t1245 * t1296;
t1119 = -t1245 * t1182 + t1243 * t1295;
t1118 = -t1243 * t1178 + t1245 * t1298;
t1117 = t1245 * t1178 + t1243 * t1298;
t1116 = t1254 * t1139 - t1285;
t1115 = -t1243 * t1214 + t1245 * t1300;
t1114 = -t1243 * t1215 + t1245 * t1299;
t1113 = t1245 * t1215 + t1243 * t1299;
t1106 = t1183 * t1242 - t1392;
t1105 = t1184 * t1244 + t1431;
t1099 = t1131 * t1254 - t1357;
t1098 = t1129 * t1254 + t1357;
t1081 = -t1250 * t1122 + t1170 * t1255;
t1080 = t1122 * t1255 + t1250 * t1170;
t1076 = t1143 * t1242 + t1145 * t1244;
t1068 = -t1250 * t1118 + t1166 * t1255;
t1067 = t1118 * t1255 + t1250 * t1166;
t1066 = t1243 * t1189 + t1245 * t1301;
t1065 = -t1245 * t1189 + t1243 * t1301;
t1063 = t1139 * t1245 * t1249 - t1138 * t1243 + t1196;
t1062 = t1109 * t1254 - t1142 * t1249;
t1061 = t1108 * t1254 - t1146 * t1249;
t1058 = -t1250 * t1114 + t1124 * t1255;
t1057 = t1114 * t1255 + t1250 * t1124;
t1056 = t1078 * t1254 - t1167 * t1249;
t1035 = -t1243 * t1130 + t1245 * t1286;
t1034 = -t1243 * t1128 + t1245 * t1287;
t1031 = -t1386 + (-t1119 * t1243 - t1122 * t1245) * pkin(8);
t1026 = -t1374 + (-t1117 * t1243 - t1118 * t1245) * pkin(8);
t1025 = -pkin(1) * t1119 + t1243 * t1156 + t1245 * t1340;
t1016 = -pkin(1) * t1117 + t1157 * t1243 + t1245 * t1341;
t1006 = t1084 * t1244 + t1085 * t1242;
t1005 = -pkin(2) * t1145 + qJ(3) * t1107 + t1395;
t1004 = pkin(8) * t1101 * t1245 - pkin(1) * t1065;
t1003 = -t1250 * t1066 + t1101 * t1255;
t1002 = t1066 * t1255 + t1250 * t1101;
t1001 = -t1243 * t1106 + t1245 * t1302;
t1000 = -t1243 * t1105 + t1245 * t1303;
t999 = -t1243 * t1104 + t1245 * t1304;
t998 = t1245 * t1104 + t1243 * t1304;
t995 = pkin(2) * t1143 + qJ(3) * t1091 - t1394;
t994 = t1007 * t1254 - t1205 * t1249;
t993 = -pkin(1) * t1113 + t1245 * t1269;
t992 = (-t1065 * t1243 - t1066 * t1245) * pkin(8);
t991 = (-t1113 * t1243 - t1114 * t1245) * pkin(8) - t1301;
t989 = -t1243 * t1090 + t1245 * t1305;
t988 = t1245 * t1090 + t1243 * t1305;
t985 = -t1243 * t1076 + t1245 * t1307;
t976 = -t1243 * t1077 + t1245 * t1306;
t975 = t1245 * t1077 + t1243 * t1306;
t960 = t1046 * t1244 + t1048 * t1242;
t959 = t1045 * t1244 + t1047 * t1242;
t952 = t1042 * t1244 + t1043 * t1242;
t951 = t1040 * t1244 + t1041 * t1242;
t937 = t1060 * t1255 - t1250 * t999;
t936 = t1250 * t1060 + t1255 * t999;
t926 = t1254 * t954 + t1359;
t925 = t1254 * t953 - t1359;
t924 = t1044 * t1255 - t1250 * t989;
t923 = t1250 * t1044 + t1255 * t989;
t922 = -pkin(2) * t1112 + qJ(3) * t939;
t920 = t1028 * t1255 - t1250 * t976;
t919 = t1250 * t1028 + t1255 * t976;
t918 = -t1243 * t1006 + t1245 * t1308;
t917 = -t1051 * t1249 + t1254 * t962;
t916 = -t1055 * t1249 + t1254 * t961;
t902 = pkin(2) * t1137 + qJ(3) * t1079 + t939;
t882 = t1242 * t967 + t1244 * t965;
t880 = t1242 * t964 + t1244 * t963;
t858 = -t1103 * t1249 + t1254 * t884;
t855 = -t1243 * t952 + t1245 * t1292;
t854 = -t1243 * t951 + t1245 * t1293;
t850 = -t1243 * t960 + t1245 * t1316;
t849 = -t1243 * t959 + t1245 * t1314;
t846 = t1242 * t932 + t1244 * t930;
t845 = t1242 * t931 + t1244 * t929;
t844 = -t1243 * t947 + t1245 * t1315;
t843 = t1243 * t1315 + t1245 * t947;
t842 = -t1012 * t1249 + t1254 * t881;
t841 = -t1243 * t938 + t1245 * t1311;
t840 = t1243 * t1311 + t1245 * t938;
t839 = t1254 * t1030 - t1249 * t986 + (-t1243 * t998 - t1245 * t999) * pkin(8);
t837 = -t1243 * t927 + t1245 * t1317;
t836 = t1243 * t1317 + t1245 * t927;
t835 = t1254 * t1018 - t1249 * t977 + (-t1243 * t988 - t1245 * t989) * pkin(8);
t830 = -pkin(1) * t998 - t1243 * t1005 + t1245 * t1270;
t826 = -t1249 * t973 + t1254 * t848;
t825 = -t1249 * t971 + t1254 * t847;
t819 = -pkin(1) * t988 - t1243 * t995 + t1245 * t1271;
t817 = t1077 * t1418 + t1254 * t914 + (-t1243 * t975 - t1245 * t976) * pkin(8);
t811 = t1242 * t891 + t1244 * t889;
t810 = t1242 * t890 + t1244 * t888;
t802 = -t1250 * t841 + t1255 * t921;
t801 = t1250 * t921 + t1255 * t841;
t791 = pkin(2) * t1433 + qJ(3) * t948 + t1242 * t943 + t1244 * t908;
t790 = -t1250 * t844 + t1255 * t909;
t789 = t1250 * t909 + t1255 * t844;
t788 = -t1243 * t882 + t1245 * t1312;
t786 = t1242 * t863 + t1244 * t862;
t785 = -t1243 * t883 + t1245 * t1313;
t784 = t1243 * t1313 + t1245 * t883;
t782 = -pkin(2) * t1050 + qJ(3) * t928 + t1242 * t935 + t1244 * t903;
t781 = -t1243 * t880 + t1245 * t1319;
t778 = -t1250 * t837 + t1255 * t896;
t777 = t1250 * t896 + t1255 * t837;
t776 = -t1249 * t956 + t1254 * t813;
t775 = -t1249 * t955 + t1254 * t812;
t773 = t1242 * t852 + t1244 * t851;
t763 = -pkin(1) * t975 - t1243 * t902 + t1245 * t1265;
t747 = -t1243 * t846 + t1245 * t1320;
t746 = -t1243 * t845 + t1245 * t1321;
t745 = -t1249 * t892 + t1254 * t787;
t743 = -t1250 * t785 + t1255 * t853;
t742 = t1250 * t853 + t1255 * t785;
t741 = -t1249 * t866 + t1254 * t774;
t733 = (-qJ(3) * t1254 + t1418) * t938 + (-t1243 * t840 - t1245 * t841) * pkin(8);
t732 = -pkin(1) * t840 - t1243 * t922 + t1245 * t1262;
t727 = -t1243 * t811 + t1245 * t1322;
t726 = -t1243 * t810 + t1245 * t1323;
t720 = -t1243 * t799 + t1245 * t1324;
t719 = t1243 * t1324 + t1245 * t799;
t718 = -t1243 * t792 + t1245 * t1325;
t717 = t1243 * t1325 + t1245 * t792;
t714 = t1242 * t772 + t1244 * t770;
t713 = t1242 * t771 + t1244 * t769;
t705 = -t1243 * t786 + t1245 * t1326;
t701 = t1242 * t761 + t1244 * t759;
t700 = t1242 * t760 + t1244 * t758;
t695 = -t1243 * t779 + t1245 * t1327;
t694 = t1243 * t1327 + t1245 * t779;
t690 = -pkin(2) * t1064 + qJ(3) * t885 + t1242 * t783 + t1244 * t768;
t689 = -t1243 * t773 + t1245 * t1328;
t685 = -t1249 * t829 + t1254 * t816 + (-t1243 * t843 - t1245 * t844) * pkin(8);
t683 = -t1249 * t832 + t1254 * t703;
t682 = -t1249 * t831 + t1254 * t702;
t681 = -t1249 * t796 + t1254 * t716;
t680 = -t1249 * t795 + t1254 * t715;
t679 = -t1249 * t818 + t1254 * t794 + (-t1243 * t836 - t1245 * t837) * pkin(8);
t677 = -t1250 * t720 + t1255 * t757;
t676 = t1250 * t757 + t1255 * t720;
t674 = -t1243 * t739 + t1245 * t1318;
t673 = t1243 * t1318 + t1245 * t739;
t672 = -t1250 * t718 + t1255 * t753;
t671 = t1250 * t753 + t1255 * t718;
t670 = -pkin(2) * t1027 - pkin(9) * t1413 + qJ(3) * t740 + t1244 * t807;
t668 = -pkin(1) * t843 - t1243 * t791 + t1245 * t1272;
t661 = -pkin(1) * t836 - t1243 * t782 + t1245 * t1273;
t660 = -t1250 * t695 + t1255 * t744;
t659 = t1250 * t744 + t1255 * t695;
t657 = t1242 * t725 + t1244 * t724;
t650 = -t1250 * t674 + t1255 * t734;
t649 = t1250 * t734 + t1255 * t674;
t648 = -t1249 * t838 + t1254 * t693 + (-t1243 * t784 - t1245 * t785) * pkin(8);
t647 = -t1243 * t714 + t1245 * t1329;
t646 = -t1243 * t713 + t1245 * t1330;
t644 = -t1243 * t701 + t1245 * t1331;
t643 = -t1243 * t700 + t1245 * t1332;
t640 = -t1243 * t696 + t1245 * t1333;
t639 = t1243 * t1333 + t1245 * t696;
t636 = -t1249 * t728 + t1254 * t658;
t633 = -pkin(2) * t940 + qJ(3) * t800 + t1242 * t707 + t1244 * t692;
t631 = -pkin(2) * t933 + qJ(3) * t793 + t1242 * t704 + t1244 * t691;
t630 = -t1243 * t687 + t1245 * t1334;
t629 = t1243 * t1334 + t1245 * t687;
t627 = -pkin(1) * t784 - t1243 * t690 + t1245 * t1274;
t624 = -pkin(2) * t893 + qJ(3) * t780 + t1242 * t684 + t1244 * t669;
t619 = -t1250 * t640 + t1255 * t678;
t618 = t1250 * t678 + t1255 * t640;
t613 = -t1250 * t630 + t1255 * t666;
t612 = t1250 * t666 + t1255 * t630;
t611 = -t1243 * t657 + t1245 * t1335;
t608 = -t1243 * t655 + t1245 * t1336;
t607 = t1243 * t1336 + t1245 * t655;
t606 = -t1243 * t653 + t1245 * t1337;
t605 = t1243 * t1337 + t1245 * t653;
t604 = -t1249 * t698 + t1254 * t675 + (-t1243 * t673 - t1245 * t674) * pkin(8);
t603 = -t1249 * t706 + t1254 * t637 + (-t1243 * t719 - t1245 * t720) * pkin(8);
t602 = -t1249 * t699 + t1254 * t635 + (-t1243 * t717 - t1245 * t718) * pkin(8);
t599 = -pkin(1) * t673 - t1243 * t670 + t1245 * t1275;
t598 = -t1250 * t608 + t1255 * t634;
t597 = t1250 * t634 + t1255 * t608;
t596 = -t1249 * t663 + t1254 * t626 + (-t1243 * t694 - t1245 * t695) * pkin(8);
t595 = -t1250 * t606 + t1255 * t632;
t594 = t1250 * t632 + t1255 * t606;
t592 = -pkin(1) * t719 - t1243 * t633 + t1245 * t1276;
t591 = -pkin(1) * t717 - t1243 * t631 + t1245 * t1277;
t589 = -pkin(2) * t735 + qJ(3) * t654 + t1242 * t641 + t1244 * t628;
t582 = -pkin(2) * t823 + qJ(3) * t697 + t1242 * t622 + t1244 * t617;
t580 = -pkin(2) * t808 + qJ(3) * t688 + t1242 * t621 + t1244 * t614;
t579 = -pkin(1) * t694 - t1243 * t624 + t1245 * t1278;
t577 = -t1249 * t625 + t1254 * t585 + (-t1243 * t639 - t1245 * t640) * pkin(8);
t576 = -t1249 * t623 + t1254 * t581 + (-t1243 * t629 - t1245 * t630) * pkin(8);
t573 = -pkin(2) * t729 + qJ(3) * t656 + t1242 * t590 + t1244 * t586;
t572 = -t1249 * t620 + t1254 * t593 + (-t1243 * t605 - t1245 * t606) * pkin(8);
t571 = -t1243 * t583 + t1245 * t1338;
t570 = t1243 * t1338 + t1245 * t583;
t567 = -pkin(1) * t639 - t1243 * t582 + t1245 * t1280;
t566 = -pkin(1) * t629 - t1243 * t580 + t1245 * t1281;
t565 = -pkin(1) * t605 - t1243 * t589 + t1245 * t1279;
t564 = -t1250 * t571 + t1255 * t578;
t563 = t1250 * t578 + t1255 * t571;
t562 = -t1249 * t587 + t1254 * t575 + (-t1243 * t607 - t1245 * t608) * pkin(8);
t560 = -pkin(1) * t607 - t1243 * t573 + t1245 * t1282;
t559 = -pkin(2) * t615 + qJ(3) * t584 + t1242 * t574 + t1244 * t568;
t558 = -t1249 * t569 + t1254 * t561 + (-t1243 * t570 - t1245 * t571) * pkin(8);
t557 = -pkin(1) * t570 - t1243 * t559 + t1245 * t1283;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1225, -t1226, 0, t1191, 0, 0, 0, 0, 0, 0, t1081, t1068, t1058, t1003, 0, 0, 0, 0, 0, 0, t924, t937, t920, t802, 0, 0, 0, 0, 0, 0, t778, t790, t743, t650, 0, 0, 0, 0, 0, 0, t672, t677, t660, t595, 0, 0, 0, 0, 0, 0, t613, t619, t598, t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1226, -t1225, 0, t1190, 0, 0, 0, 0, 0, 0, t1080, t1067, t1057, t1002, 0, 0, 0, 0, 0, 0, t923, t936, t919, t801, 0, 0, 0, 0, 0, 0, t777, t789, t742, t649, 0, 0, 0, 0, 0, 0, t671, t676, t659, t594, 0, 0, 0, 0, 0, 0, t612, t618, t597, t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1119, t1117, t1113, t1065, 0, 0, 0, 0, 0, 0, t988, t998, t975, t840, 0, 0, 0, 0, 0, 0, t836, t843, t784, t673, 0, 0, 0, 0, 0, 0, t717, t719, t694, t605, 0, 0, 0, 0, 0, 0, t629, t639, t607, t570; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1226, 0, -t1225, 0, t1343, -t1210, -t1190, -pkin(7) * t1190, -t1250 * t1153 + t1172 * t1255, -t1250 * t1115 + t1125 * t1255, -t1250 * t1120 + t1168 * t1255, -t1250 * t1152 + t1171 * t1255, -t1250 * t1121 + t1169 * t1255, t1255 * t1186 + t1250 * t1294, -pkin(7) * t1080 - t1250 * t1025 + t1031 * t1255, -pkin(7) * t1067 - t1250 * t1016 + t1026 * t1255, -pkin(7) * t1057 - t1250 * t993 + t1255 * t991, -pkin(7) * t1002 - t1250 * t1004 + t1255 * t992, -t1250 * t1035 + t1099 * t1255, t1056 * t1255 - t1250 * t985, -t1250 * t1000 + t1061 * t1255, -t1250 * t1034 + t1098 * t1255, -t1250 * t1001 + t1062 * t1255, -t1250 * t1063 + t1116 * t1255, -pkin(7) * t923 - t1250 * t819 + t1255 * t835, -pkin(7) * t936 - t1250 * t830 + t1255 * t839, -pkin(7) * t919 - t1250 * t763 + t1255 * t817, -pkin(7) * t801 - t1250 * t732 + t1255 * t733, -t1250 * t855 + t1255 * t926, -t1250 * t788 + t1255 * t858, -t1250 * t849 + t1255 * t916, -t1250 * t854 + t1255 * t925, -t1250 * t850 + t1255 * t917, -t1250 * t918 + t1255 * t994, -pkin(7) * t777 - t1250 * t661 + t1255 * t679, -pkin(7) * t789 - t1250 * t668 + t1255 * t685, -pkin(7) * t742 - t1250 * t627 + t1255 * t648, -pkin(7) * t649 - t1250 * t599 + t1255 * t604, -t1250 * t747 + t1255 * t826, -t1250 * t705 + t1255 * t745, -t1250 * t726 + t1255 * t775, -t1250 * t746 + t1255 * t825, -t1250 * t727 + t1255 * t776, -t1250 * t781 + t1255 * t842, -pkin(7) * t671 - t1250 * t591 + t1255 * t602, -pkin(7) * t676 - t1250 * t592 + t1255 * t603, -pkin(7) * t659 - t1250 * t579 + t1255 * t596, -pkin(7) * t594 - t1250 * t565 + t1255 * t572, -t1250 * t647 + t1255 * t681, -t1250 * t611 + t1255 * t636, -t1250 * t643 + t1255 * t682, -t1250 * t646 + t1255 * t680, -t1250 * t644 + t1255 * t683, -t1250 * t689 + t1255 * t741, -pkin(7) * t612 - t1250 * t566 + t1255 * t576, -pkin(7) * t618 - t1250 * t567 + t1255 * t577, -pkin(7) * t597 - t1250 * t560 + t1255 * t562, -pkin(7) * t563 - t1250 * t557 + t1255 * t558; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1225, 0, t1226, 0, t1210, t1343, t1191, pkin(7) * t1191, t1153 * t1255 + t1250 * t1172, t1115 * t1255 + t1250 * t1125, t1120 * t1255 + t1250 * t1168, t1152 * t1255 + t1250 * t1171, t1121 * t1255 + t1250 * t1169, t1250 * t1186 - t1255 * t1294, pkin(7) * t1081 + t1025 * t1255 + t1250 * t1031, pkin(7) * t1068 + t1016 * t1255 + t1250 * t1026, pkin(7) * t1058 + t1250 * t991 + t1255 * t993, pkin(7) * t1003 + t1004 * t1255 + t1250 * t992, t1035 * t1255 + t1250 * t1099, t1250 * t1056 + t1255 * t985, t1000 * t1255 + t1250 * t1061, t1034 * t1255 + t1250 * t1098, t1001 * t1255 + t1250 * t1062, t1063 * t1255 + t1250 * t1116, pkin(7) * t924 + t1250 * t835 + t1255 * t819, pkin(7) * t937 + t1250 * t839 + t1255 * t830, pkin(7) * t920 + t1250 * t817 + t1255 * t763, pkin(7) * t802 + t1250 * t733 + t1255 * t732, t1250 * t926 + t1255 * t855, t1250 * t858 + t1255 * t788, t1250 * t916 + t1255 * t849, t1250 * t925 + t1255 * t854, t1250 * t917 + t1255 * t850, t1250 * t994 + t1255 * t918, pkin(7) * t778 + t1250 * t679 + t1255 * t661, pkin(7) * t790 + t1250 * t685 + t1255 * t668, pkin(7) * t743 + t1250 * t648 + t1255 * t627, pkin(7) * t650 + t1250 * t604 + t1255 * t599, t1250 * t826 + t1255 * t747, t1250 * t745 + t1255 * t705, t1250 * t775 + t1255 * t726, t1250 * t825 + t1255 * t746, t1250 * t776 + t1255 * t727, t1250 * t842 + t1255 * t781, pkin(7) * t672 + t1250 * t602 + t1255 * t591, pkin(7) * t677 + t1250 * t603 + t1255 * t592, pkin(7) * t660 + t1250 * t596 + t1255 * t579, pkin(7) * t595 + t1250 * t572 + t1255 * t565, t1250 * t681 + t1255 * t647, t1250 * t636 + t1255 * t611, t1250 * t682 + t1255 * t643, t1250 * t680 + t1255 * t646, t1250 * t683 + t1255 * t644, t1250 * t741 + t1255 * t689, pkin(7) * t613 + t1250 * t576 + t1255 * t566, pkin(7) * t619 + t1250 * t577 + t1255 * t567, pkin(7) * t598 + t1250 * t562 + t1255 * t560, pkin(7) * t564 + t1250 * t558 + t1255 * t557; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1229, t1230, 0, 0, t1209 * t1377 + t1309, t1245 * t1214 + t1243 * t1300, t1245 * t1180 + t1243 * t1296, t1195 - t1309, t1245 * t1181 + t1243 * t1297, t1245 * t1345, pkin(1) * t1122 - t1245 * t1156 + t1243 * t1340, pkin(1) * t1118 - t1157 * t1245 + t1243 * t1341, pkin(1) * t1114 + t1243 * t1269, pkin(1) * t1066 + t1101 * t1415, t1245 * t1130 + t1243 * t1286, t1245 * t1076 + t1243 * t1307, t1245 * t1105 + t1243 * t1303, t1245 * t1128 + t1243 * t1287, t1245 * t1106 + t1243 * t1302, t1138 * t1245 + t1139 * t1377 + t1195, pkin(1) * t989 + t1243 * t1271 + t1245 * t995, pkin(1) * t999 + t1245 * t1005 + t1243 * t1270, pkin(1) * t976 + t1243 * t1265 + t1245 * t902, pkin(1) * t841 + t1243 * t1262 + t1245 * t922, t1243 * t1292 + t1245 * t952, t1243 * t1312 + t1245 * t882, t1243 * t1314 + t1245 * t959, t1243 * t1293 + t1245 * t951, t1243 * t1316 + t1245 * t960, t1245 * t1006 + t1243 * t1308, pkin(1) * t837 + t1243 * t1273 + t1245 * t782, pkin(1) * t844 + t1243 * t1272 + t1245 * t791, pkin(1) * t785 + t1243 * t1274 + t1245 * t690, pkin(1) * t674 + t1243 * t1275 + t1245 * t670, t1243 * t1320 + t1245 * t846, t1243 * t1326 + t1245 * t786, t1243 * t1323 + t1245 * t810, t1243 * t1321 + t1245 * t845, t1243 * t1322 + t1245 * t811, t1243 * t1319 + t1245 * t880, pkin(1) * t718 + t1243 * t1277 + t1245 * t631, pkin(1) * t720 + t1243 * t1276 + t1245 * t633, pkin(1) * t695 + t1243 * t1278 + t1245 * t624, pkin(1) * t606 + t1243 * t1279 + t1245 * t589, t1243 * t1329 + t1245 * t714, t1243 * t1335 + t1245 * t657, t1243 * t1332 + t1245 * t700, t1243 * t1330 + t1245 * t713, t1243 * t1331 + t1245 * t701, t1243 * t1328 + t1245 * t773, pkin(1) * t630 + t1243 * t1281 + t1245 * t580, pkin(1) * t640 + t1243 * t1280 + t1245 * t582, pkin(1) * t608 + t1243 * t1282 + t1245 * t573, pkin(1) * t571 + t1243 * t1283 + t1245 * t559;];
tauB_reg  = t1;
