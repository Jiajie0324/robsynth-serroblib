% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR10_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR10_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 14:25:23
% EndTime: 2019-03-09 14:25:49
% DurationCPUTime: 10.13s
% Computational Cost: add. (14174->558), mult. (37199->788), div. (0->0), fcn. (31262->12), ass. (0->274)
t282 = cos(pkin(6));
t364 = qJD(1) * t282;
t268 = qJD(2) + t364;
t279 = sin(pkin(12));
t281 = cos(pkin(12));
t286 = sin(qJ(2));
t280 = sin(pkin(6));
t365 = qJD(1) * t280;
t348 = t286 * t365;
t215 = t268 * t281 - t279 * t348;
t216 = t268 * t279 + t281 * t348;
t285 = sin(qJ(4));
t289 = cos(qJ(4));
t157 = -t289 * t215 + t216 * t285;
t405 = qJD(5) + qJD(6);
t433 = t157 + t405;
t284 = sin(qJ(5));
t287 = cos(qJ(6));
t283 = sin(qJ(6));
t288 = cos(qJ(5));
t375 = t283 * t288;
t243 = t284 * t287 + t375;
t392 = t433 * t243;
t372 = t289 * t281;
t238 = t279 * t285 - t372;
t290 = cos(qJ(2));
t377 = t280 * t290;
t297 = t238 * t377;
t204 = qJD(1) * t297;
t234 = t238 * qJD(4);
t368 = t204 - t234;
t239 = t279 * t289 + t281 * t285;
t298 = t239 * t377;
t367 = -qJD(1) * t298 + t239 * qJD(4);
t316 = pkin(2) * t286 - qJ(3) * t290;
t228 = t316 * t365;
t353 = pkin(1) * t364;
t229 = -pkin(8) * t348 + t290 * t353;
t168 = t281 * t228 - t279 * t229;
t376 = t281 * t290;
t300 = t280 * (pkin(3) * t286 - pkin(9) * t376);
t142 = qJD(1) * t300 + t168;
t169 = t279 * t228 + t281 * t229;
t363 = qJD(1) * t290;
t347 = t280 * t363;
t326 = t279 * t347;
t150 = -pkin(9) * t326 + t169;
t402 = pkin(9) + qJ(3);
t254 = t402 * t279;
t255 = t402 * t281;
t311 = -t254 * t289 - t255 * t285;
t432 = -qJD(3) * t238 + qJD(4) * t311 - t285 * t142 - t289 * t150;
t295 = qJD(2) * t298;
t312 = t215 * t285 + t216 * t289;
t406 = qJD(4) * t312;
t115 = qJD(1) * t295 + t406;
t106 = t288 * t115;
t154 = qJD(5) + t157;
t427 = t154 ^ 2;
t431 = -t427 * t284 + t106;
t151 = qJD(6) + t154;
t242 = t283 * t284 - t287 * t288;
t414 = t433 * t242;
t430 = t243 * t115 - t414 * t151;
t423 = -pkin(10) * t348 + t432;
t230 = pkin(8) * t347 + t286 * t353;
t196 = pkin(3) * t326 + t230;
t429 = -t367 * pkin(4) + t368 * pkin(10) + t196;
t170 = -t204 * t284 - t288 * t348;
t419 = t284 * t234 + t170;
t428 = -t242 * t115 - t392 * t151;
t259 = -qJD(4) + t347;
t134 = t288 * t259 + t284 * t312;
t205 = qJ(3) * t268 + t230;
t225 = (-pkin(2) * t290 - qJ(3) * t286 - pkin(1)) * t280;
t210 = qJD(1) * t225;
t144 = t281 * t205 + t279 * t210;
t116 = pkin(9) * t215 + t144;
t143 = -t205 * t279 + t281 * t210;
t97 = -pkin(3) * t347 - pkin(9) * t216 + t143;
t47 = -t285 * t116 + t289 * t97;
t44 = pkin(4) * t259 - t47;
t36 = pkin(5) * t134 + t44;
t136 = -t259 * t284 + t288 * t312;
t65 = t287 * t134 + t136 * t283;
t426 = t36 * t65;
t313 = t134 * t283 - t287 * t136;
t424 = t313 * t65;
t422 = t157 * t259;
t202 = -t254 * t285 + t255 * t289;
t421 = qJD(3) * t239 + qJD(4) * t202 + t142 * t289 - t285 * t150;
t358 = qJD(5) * t288;
t343 = t239 * t358;
t420 = -t343 + t419;
t171 = -t204 * t288 + t284 * t348;
t333 = t234 * t288 + t171;
t418 = t313 ^ 2 - t65 ^ 2;
t48 = t289 * t116 + t285 * t97;
t45 = -pkin(10) * t259 + t48;
t198 = -pkin(2) * t268 + qJD(3) - t229;
t155 = -pkin(3) * t215 + t198;
t60 = pkin(4) * t157 - pkin(10) * t312 + t155;
t27 = -t284 * t45 + t288 * t60;
t18 = -pkin(11) * t136 + t27;
t15 = pkin(5) * t154 + t18;
t28 = t284 * t60 + t288 * t45;
t19 = -pkin(11) * t134 + t28;
t398 = t19 * t287;
t10 = t15 * t283 + t398;
t354 = qJD(1) * qJD(2);
t340 = t280 * t354;
t324 = t290 * t340;
t310 = t279 * t324;
t360 = qJD(4) * t289;
t114 = t215 * t360 + t324 * t372 + (-qJD(4) * t216 - t310) * t285;
t323 = t286 * t340;
t359 = qJD(5) * t284;
t56 = t288 * t114 - t259 * t358 + t284 * t323 - t312 * t359;
t208 = (qJD(2) * t316 - qJD(3) * t286) * t280;
t192 = qJD(1) * t208;
t352 = pkin(1) * qJD(2) * t282;
t327 = qJD(1) * t352;
t303 = -pkin(8) * t323 + t290 * t327;
t193 = qJD(3) * t268 + t303;
t139 = t279 * t192 + t281 * t193;
t117 = -pkin(9) * t310 + t139;
t361 = qJD(4) * t285;
t138 = t281 * t192 - t279 * t193;
t296 = qJD(2) * t300;
t98 = qJD(1) * t296 + t138;
t304 = -t116 * t361 + t289 * t117 + t285 * t98 + t97 * t360;
t25 = pkin(10) * t323 + t304;
t221 = pkin(8) * t324 + t286 * t327;
t186 = pkin(3) * t310 + t221;
t42 = pkin(4) * t115 - pkin(10) * t114 + t186;
t8 = -qJD(5) * t28 - t284 * t25 + t288 * t42;
t4 = t115 * pkin(5) - t56 * pkin(11) + t8;
t57 = qJD(5) * t136 + t284 * t114 - t288 * t323;
t7 = t288 * t25 + t284 * t42 + t60 * t358 - t359 * t45;
t5 = -pkin(11) * t57 + t7;
t2 = -qJD(6) * t10 - t283 * t5 + t287 * t4;
t417 = t36 * t313 + t2;
t356 = qJD(6) * t287;
t357 = qJD(6) * t283;
t13 = -t134 * t356 - t136 * t357 - t283 * t57 + t287 * t56;
t416 = t151 * t65 + t13;
t292 = qJD(6) * t313 - t283 * t56 - t287 * t57;
t415 = -t151 * t313 + t292;
t413 = t312 * t65;
t412 = t312 * t313;
t394 = pkin(4) * t348 + t421;
t411 = t134 * t312;
t410 = t136 * t312;
t177 = t243 * t239;
t409 = t259 * t312;
t408 = t429 * t288;
t273 = -pkin(3) * t281 - pkin(2);
t183 = pkin(4) * t238 - pkin(10) * t239 + t273;
t407 = -t183 * t358 + t202 * t359 + t429 * t284 - t423 * t288;
t17 = t19 * t357;
t339 = qJD(6) * t15 + t5;
t1 = t283 * t4 + t287 * t339 - t17;
t404 = pkin(10) + pkin(11);
t403 = pkin(1) * t286;
t88 = pkin(4) * t312 + pkin(10) * t157;
t401 = t284 * t88 + t288 * t47;
t224 = pkin(8) * t377 + (qJ(3) + t403) * t282;
t162 = -t224 * t279 + t281 * t225;
t378 = t280 * t286;
t233 = t279 * t282 + t281 * t378;
t124 = -pkin(3) * t377 - pkin(9) * t233 + t162;
t163 = t281 * t224 + t279 * t225;
t232 = t279 * t378 - t282 * t281;
t141 = -pkin(9) * t232 + t163;
t371 = t285 * t124 + t289 * t141;
t63 = -pkin(10) * t377 + t371;
t172 = t289 * t232 + t233 * t285;
t173 = -t232 * t285 + t233 * t289;
t227 = pkin(8) * t378 + (-pkin(1) * t290 - pkin(2)) * t282;
t181 = t232 * pkin(3) + t227;
t81 = t172 * pkin(4) - t173 * pkin(10) + t181;
t400 = t284 * t81 + t288 * t63;
t344 = t239 * t359;
t382 = t239 * t288;
t383 = t239 * t284;
t399 = -t234 * t375 - t357 * t383 + (t405 * t382 - t419) * t287 + (-t344 - t171) * t283;
t397 = t56 * t284;
t395 = -t420 * pkin(5) + t394;
t390 = t170 * t283 - t171 * t287 - t405 * t177 + t242 * t234;
t389 = t134 * t154;
t388 = t136 * t154;
t387 = t143 * t286;
t386 = t144 * t286;
t385 = t157 * t284;
t276 = t280 ^ 2;
t380 = t276 * qJD(1) ^ 2;
t379 = t279 * t290;
t374 = t284 * t115;
t188 = t288 * t202;
t369 = t284 * t183 + t188;
t362 = qJD(2) * t286;
t346 = t280 * t362;
t309 = -pkin(8) * t346 + t290 * t352;
t214 = qJD(3) * t282 + t309;
t148 = t279 * t208 + t281 * t214;
t345 = qJD(2) * t377;
t231 = pkin(8) * t345 + t286 * t352;
t366 = t286 ^ 2 - t290 ^ 2;
t355 = qJD(2) - t268;
t351 = t290 * t380;
t350 = t284 * t377;
t325 = t279 * t345;
t197 = pkin(3) * t325 + t231;
t349 = qJD(5) * t404;
t341 = t276 * t354;
t337 = -t284 * t63 + t288 * t81;
t335 = t124 * t289 - t285 * t141;
t147 = t281 * t208 - t279 * t214;
t331 = t154 * t288;
t330 = t116 * t360 + t285 * t117 - t289 * t98 + t97 * t361;
t329 = t268 + t364;
t328 = 0.2e1 * t341;
t322 = -t48 + (t359 + t385) * pkin(5);
t180 = t288 * t183;
t89 = pkin(5) * t238 - pkin(11) * t382 - t202 * t284 + t180;
t321 = -t420 * pkin(11) - qJD(6) * t89 + t407;
t103 = -pkin(11) * t383 + t369;
t320 = t188 * qJD(5) + qJD(6) * t103 + t408 - t333 * pkin(11) + (-(pkin(11) * t239 - t183) * qJD(5) + t423) * t284 - t367 * pkin(5);
t319 = -0.2e1 * pkin(1) * t341;
t261 = t404 * t288;
t87 = t288 * t88;
t318 = pkin(5) * t312 + qJD(6) * t261 - t284 * t47 + t87 + (pkin(11) * t157 + t349) * t288;
t260 = t404 * t284;
t317 = pkin(11) * t385 + qJD(6) * t260 + t284 * t349 + t401;
t62 = pkin(4) * t377 - t335;
t153 = t173 * t288 - t350;
t23 = pkin(5) * t172 - pkin(11) * t153 + t337;
t152 = t173 * t284 + t288 * t377;
t30 = -pkin(11) * t152 + t400;
t315 = t23 * t287 - t283 * t30;
t314 = t23 * t283 + t287 * t30;
t84 = t287 * t152 + t153 * t283;
t85 = -t152 * t283 + t153 * t287;
t121 = t147 + t296;
t137 = -pkin(9) * t325 + t148;
t308 = t121 * t289 - t124 * t361 - t285 * t137 - t141 * t360;
t302 = t285 * t121 + t124 * t360 + t289 * t137 - t141 * t361;
t32 = pkin(10) * t346 + t302;
t130 = -qJD(2) * t297 - qJD(4) * t172;
t131 = qJD(4) * t173 + t295;
t55 = pkin(4) * t131 - pkin(10) * t130 + t197;
t307 = t284 * t55 + t288 * t32 + t81 * t358 - t359 * t63;
t305 = -pkin(10) * t115 + t154 * t44;
t299 = -t333 - t344;
t26 = -pkin(4) * t323 + t330;
t33 = -pkin(4) * t346 - t308;
t294 = -qJ(3) * t362 + (-pkin(2) * qJD(2) + qJD(3) - t198) * t290;
t293 = -qJD(5) * t400 - t284 * t32 + t288 * t55;
t275 = -pkin(5) * t288 - pkin(4);
t178 = t242 * t239;
t166 = pkin(5) * t383 - t311;
t90 = t115 * t238;
t80 = t115 * t172;
t71 = -qJD(5) * t350 + t130 * t284 + t173 * t358 - t288 * t346;
t70 = -qJD(5) * t152 + t288 * t130 + t284 * t346;
t39 = pkin(5) * t152 + t62;
t22 = qJD(6) * t85 + t283 * t70 + t287 * t71;
t21 = -qJD(6) * t84 - t283 * t71 + t287 * t70;
t16 = pkin(5) * t71 + t33;
t12 = pkin(5) * t57 + t26;
t11 = -pkin(11) * t71 + t307;
t9 = t15 * t287 - t19 * t283;
t6 = t131 * pkin(5) - t70 * pkin(11) + t293;
t3 = [0, 0, 0, t286 * t290 * t328, -t366 * t328, t329 * t345, -t329 * t346, 0, -t221 * t282 - t231 * t268 + t286 * t319, -t268 * t309 - t282 * t303 + t290 * t319, -t215 * t231 + t221 * t232 + ((-qJD(1) * t147 - t138) * t290 + (t198 * t379 + t387 + (t162 * t286 + t227 * t379) * qJD(1)) * qJD(2)) * t280, t216 * t231 + t221 * t233 + ((qJD(1) * t148 + t139) * t290 + (t198 * t376 - t386 + (-t163 * t286 + t227 * t376) * qJD(1)) * qJD(2)) * t280, -t138 * t233 - t139 * t232 - t147 * t216 + t148 * t215 + (-t143 * t281 - t144 * t279 + (-t162 * t281 - t163 * t279) * qJD(1)) * t345, t138 * t162 + t139 * t163 + t143 * t147 + t144 * t148 + t198 * t231 + t221 * t227, t114 * t173 + t130 * t312, -t114 * t172 - t115 * t173 - t130 * t157 - t131 * t312, -t130 * t259 + (-t114 * t290 + (qJD(1) * t173 + t312) * t362) * t280, t131 * t259 + (t115 * t290 + (-qJD(1) * t172 - t157) * t362) * t280 (-t259 * t280 - t276 * t363) * t362, -t308 * t259 + t197 * t157 + t181 * t115 + t186 * t172 + t155 * t131 + (t330 * t290 + (qJD(1) * t335 + t47) * t362) * t280, t302 * t259 + t197 * t312 + t181 * t114 + t186 * t173 + t155 * t130 + (t304 * t290 + (-qJD(1) * t371 - t48) * t362) * t280, t136 * t70 + t153 * t56, -t134 * t70 - t136 * t71 - t152 * t56 - t153 * t57, t115 * t153 + t131 * t136 + t154 * t70 + t172 * t56, -t115 * t152 - t131 * t134 - t154 * t71 - t172 * t57, t131 * t154 + t80, t115 * t337 + t27 * t131 + t33 * t134 + t26 * t152 + t154 * t293 + t8 * t172 + t44 * t71 + t62 * t57, -t115 * t400 - t28 * t131 + t33 * t136 + t26 * t153 - t154 * t307 - t7 * t172 + t44 * t70 + t62 * t56, t13 * t85 - t21 * t313, -t13 * t84 - t21 * t65 + t22 * t313 + t292 * t85, t115 * t85 + t13 * t172 - t131 * t313 + t151 * t21, -t115 * t84 - t131 * t65 - t151 * t22 + t172 * t292, t131 * t151 + t80 (-qJD(6) * t314 - t283 * t11 + t287 * t6) * t151 + t315 * t115 + t2 * t172 + t9 * t131 + t16 * t65 - t39 * t292 + t12 * t84 + t36 * t22 -(qJD(6) * t315 + t287 * t11 + t283 * t6) * t151 - t314 * t115 - t1 * t172 - t10 * t131 - t16 * t313 + t39 * t13 + t12 * t85 + t36 * t21; 0, 0, 0, -t286 * t351, t366 * t380, t355 * t347, -t355 * t348, 0, t230 * t268 + t380 * t403 - t221, pkin(1) * t351 + t229 * t268 - t303, t230 * t215 - t221 * t281 + (t168 * t290 + t279 * t294 - t387) * t365, -t230 * t216 + t221 * t279 + (-t169 * t290 + t281 * t294 + t386) * t365, t168 * t216 - t169 * t215 + (qJD(3) * t215 + t143 * t347 + t139) * t281 + (qJD(3) * t216 + t144 * t347 - t138) * t279, -t221 * pkin(2) - t143 * t168 - t144 * t169 - t198 * t230 + (-t143 * t279 + t144 * t281) * qJD(3) + (-t138 * t279 + t139 * t281) * qJ(3), t114 * t239 + t312 * t368, -t114 * t238 - t239 * t115 - t157 * t368 - t312 * t367, -t368 * t259 + (qJD(2) * t239 - t312) * t348, t367 * t259 + (-qJD(2) * t238 + t157) * t348, t259 * t348, t273 * t115 - t196 * t157 + t186 * t238 + t421 * t259 + t367 * t155 + (qJD(2) * t311 - t47) * t348, t273 * t114 - t196 * t312 + t186 * t239 + t432 * t259 + t368 * t155 + (-qJD(2) * t202 + t48) * t348, t136 * t299 + t382 * t56, t419 * t136 + t333 * t134 + (-t397 - t288 * t57 + (t134 * t284 - t136 * t288) * qJD(5)) * t239, t106 * t239 + t136 * t367 + t154 * t299 + t56 * t238, -t367 * t134 + t420 * t154 - t57 * t238 - t239 * t374, t154 * t367 + t90, t180 * t115 - t311 * t57 + t8 * t238 + (-t170 + t343) * t44 + t367 * t27 + (-t202 * t358 - t408) * t154 + t394 * t134 + (-t202 * t115 - t44 * t234 + t26 * t239 + (-qJD(5) * t183 - t423) * t154) * t284, -t369 * t115 + t394 * t136 + t407 * t154 - t7 * t238 + t26 * t382 - t367 * t28 + t299 * t44 - t311 * t56, -t13 * t178 - t313 * t390, -t13 * t177 - t178 * t292 + t313 * t399 - t390 * t65, -t178 * t115 + t13 * t238 + t151 * t390 - t313 * t367, -t177 * t115 - t151 * t399 + t238 * t292 - t367 * t65, t151 * t367 + t90 (-t103 * t283 + t287 * t89) * t115 + t2 * t238 - t166 * t292 + t12 * t177 + t367 * t9 + t395 * t65 + t399 * t36 + (t283 * t321 - t287 * t320) * t151 -(t103 * t287 + t283 * t89) * t115 - t1 * t238 + t166 * t13 - t12 * t178 - t395 * t313 + t390 * t36 + (t283 * t320 + t287 * t321) * t151 - t367 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(2) * t279 - t216) * t347 (qJD(2) * t281 - t215) * t347, -t215 ^ 2 - t216 ^ 2, t143 * t216 - t144 * t215 + t221, 0, 0, 0, 0, 0, t115 - t409, t114 + t422, 0, 0, 0, 0, 0, -t411 + t431, -t288 * t427 - t374 - t410, 0, 0, 0, 0, 0, -t413 + t428, t412 - t430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t312 * t157, -t157 ^ 2 + t312 ^ 2, t114 - t422, -t239 * t324 - t406 - t409, t323, -t155 * t312 - t259 * t48 - t330, t155 * t157 - t259 * t47 - t304, t136 * t331 + t397 (t56 - t389) * t288 + (-t57 - t388) * t284, t154 * t331 + t374 - t410, t411 + t431, -t154 * t312, -pkin(4) * t57 - t48 * t134 - t27 * t312 - t26 * t288 + (-pkin(10) * t358 - t87) * t154 + (t47 * t154 + t305) * t284, -pkin(4) * t56 - t48 * t136 + t28 * t312 + t26 * t284 + (pkin(10) * t359 + t401) * t154 + t305 * t288, t13 * t243 + t313 * t414, -t13 * t242 + t243 * t292 + t313 * t392 + t414 * t65, t412 + t430, t413 + t428, -t151 * t312 (-t260 * t287 - t261 * t283) * t115 - t275 * t292 + t12 * t242 - t9 * t312 + t322 * t65 + t392 * t36 + (t283 * t317 - t287 * t318) * t151 -(-t260 * t283 + t261 * t287) * t115 + t275 * t13 + t12 * t243 + t10 * t312 - t322 * t313 - t414 * t36 + (t283 * t318 + t287 * t317) * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136 * t134, -t134 ^ 2 + t136 ^ 2, t56 + t389, t388 - t57, t115, -t44 * t136 + t28 * t154 + t8, t134 * t44 + t154 * t27 - t7, -t424, t418, t416, t415, t115 -(-t18 * t283 - t398) * t151 + (t115 * t287 - t136 * t65 - t151 * t357) * pkin(5) + t417, t426 + t17 + (-t151 * t19 - t4) * t283 + (t151 * t18 - t339) * t287 + (-t115 * t283 + t136 * t313 - t151 * t356) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t424, t418, t416, t415, t115, t10 * t151 + t417, t9 * t151 - t1 + t426;];
tauc_reg  = t3;
