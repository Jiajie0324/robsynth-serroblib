% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP10_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 02:31
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP10_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP10_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP10_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP10_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP10_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP10_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRRP10_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 02:28:15
% EndTime: 2019-03-10 02:29:00
% DurationCPUTime: 34.25s
% Computational Cost: add. (22582->913), mult. (53813->1183), div. (0->0), fcn. (43244->14), ass. (0->355)
t912 = sin(pkin(6));
t1061 = qJD(1) * t912;
t919 = cos(qJ(2));
t1031 = t919 * t1061;
t871 = -qJD(3) + t1031;
t884 = pkin(8) * t1031;
t916 = sin(qJ(2));
t1115 = cos(pkin(6));
t1011 = t1115 * qJD(1);
t998 = pkin(1) * t1011;
t836 = t916 * t998 + t884;
t915 = sin(qJ(3));
t918 = cos(qJ(3));
t1184 = t836 + t871 * (pkin(3) * t915 - pkin(10) * t918);
t1056 = qJD(3) * t918;
t1032 = t916 * t1061;
t914 = sin(qJ(4));
t917 = cos(qJ(4));
t999 = t918 * t1031;
t807 = -t1032 * t917 + t914 * t999;
t1181 = -t914 * t1056 + t807;
t1053 = qJD(4) * t917;
t1180 = -t915 * t1053 + t1181;
t1059 = qJD(2) * t919;
t1029 = t915 * t1059;
t1049 = qJDD(1) * t916;
t981 = t1011 + qJD(2);
t944 = qJD(3) * t981;
t1005 = t1115 * qJDD(1);
t977 = t1005 + qJDD(2);
t718 = (qJD(1) * (t1056 * t916 + t1029) + t915 * t1049) * t912 + t915 * t944 - t918 * t977;
t711 = qJDD(4) + t718;
t707 = qJDD(5) + t711;
t1128 = cos(qJ(5));
t1019 = t1128 * qJD(5);
t1183 = (t1128 * qJD(4) + t1019) * t917;
t1058 = qJD(3) * t915;
t1125 = pkin(9) * t914;
t1182 = t1058 * t1125 - t1184 * t917;
t1054 = qJD(4) * t914;
t833 = -pkin(8) * t1032 + t919 * t998;
t989 = pkin(2) * t916 - pkin(9) * t919;
t834 = t989 * t1061;
t1068 = t918 * t833 + t915 * t834;
t737 = pkin(10) * t1032 + t1068;
t864 = -pkin(3) * t918 - pkin(10) * t915 - pkin(2);
t1179 = -t864 * t1053 - (-t1054 * t918 - t1058 * t917) * pkin(9) + t917 * t737 + t1184 * t914;
t1087 = t918 * t919;
t808 = (t1087 * t917 + t914 * t916) * t1061;
t1150 = t917 * t1056 - t808;
t1138 = -t915 * t1054 + t1150;
t817 = t1032 * t918 + t915 * t981;
t761 = -t914 * t817 - t871 * t917;
t762 = t817 * t917 - t871 * t914;
t913 = sin(qJ(5));
t674 = -t1128 * t761 + t762 * t913;
t962 = t1128 * t762 + t913 * t761;
t1178 = t674 * t962;
t920 = -pkin(11) - pkin(10);
t1036 = qJD(4) * t920;
t815 = t1032 * t915 - t918 * t981;
t1109 = t815 * t917;
t794 = pkin(9) * t981 + t836;
t979 = -pkin(2) * t919 - pkin(9) * t916 - pkin(1);
t831 = t979 * t912;
t809 = qJD(1) * t831;
t716 = -t915 * t794 + t809 * t918;
t749 = pkin(3) * t817 + pkin(10) * t815;
t744 = t917 * t749;
t1177 = pkin(4) * t817 + pkin(11) * t1109 - t917 * t1036 - t716 * t914 + t744;
t1079 = t917 * t716 + t914 * t749;
t1110 = t815 * t914;
t1176 = pkin(11) * t1110 - t914 * t1036 + t1079;
t1000 = t915 * t1031;
t1088 = t917 * t918;
t898 = pkin(9) * t1088;
t1175 = pkin(4) * t1000 - pkin(11) * t808 - t737 * t914 - (pkin(4) * t915 - pkin(11) * t1088) * qJD(3) - (-t898 + (pkin(11) * t915 - t864) * t914) * qJD(4) - t1182;
t1174 = -pkin(11) * t1180 + t1179;
t1130 = t962 ^ 2;
t1052 = qJD(5) * t913;
t1048 = qJDD(1) * t919;
t889 = t912 * t1048;
t1050 = qJD(1) * qJD(2);
t1017 = t916 * t1050;
t996 = t912 * t1017;
t832 = qJDD(3) - t889 + t996;
t1012 = t918 * t1049;
t1027 = t918 * t1059;
t1057 = qJD(3) * t916;
t927 = t977 * t915 + t944 * t918;
t925 = (t1012 + (-t1057 * t915 + t1027) * qJD(1)) * t912 + t927;
t1164 = t914 * t832 + t917 * t925;
t924 = qJD(4) * t761 + t1164;
t1040 = t817 * t1053 - t871 * t1054 + t914 * t925;
t976 = t832 * t917 - t1040;
t616 = -t761 * t1019 + t1052 * t762 - t1128 * t924 - t913 * t976;
t810 = qJD(4) + t815;
t803 = qJD(5) + t810;
t605 = t674 * t803 - t616;
t617 = t1019 * t762 + t1052 * t761 - t1128 * t976 + t913 * t924;
t1173 = t707 * MDP(29) + (t803 * t962 - t617) * MDP(28) + MDP(25) * t1178 + (-t674 ^ 2 + t1130) * MDP(26) + t605 * MDP(27);
t1098 = t912 * t919;
t1099 = t912 * t916;
t842 = t1099 * t918 + t1115 * t915;
t971 = t1098 * t914 - t842 * t917;
t1172 = pkin(11) * t971;
t696 = pkin(3) * t871 - t716;
t668 = -pkin(4) * t761 + t696;
t623 = pkin(5) * t674 - qJ(6) * t962 + t668;
t1171 = t623 * t674;
t1170 = t668 * t674;
t1145 = qJD(4) + qJD(5);
t854 = t1128 * t914 + t913 * t917;
t775 = t1145 * t854;
t997 = t1128 * t1056;
t1078 = t1128 * t808 - t1181 * t913 + t775 * t915 - t917 * t997;
t1092 = t914 * t915;
t1077 = -t1052 * t1092 - t1128 * t807 + t1138 * t913 + t1183 * t915 + t914 * t997;
t1014 = t912 * t1049;
t978 = qJD(2) * t998;
t995 = pkin(1) * t1005;
t1002 = pkin(8) * t1014 + qJD(2) * t884 + t916 * t978 - t919 * t995;
t748 = -pkin(2) * t977 + t1002;
t1127 = sin(qJ(1));
t1129 = cos(qJ(1));
t992 = t1115 * t1129;
t843 = t1127 * t916 - t919 * t992;
t991 = t1115 * t1127;
t845 = t1129 * t916 + t919 * t991;
t1140 = g(1) * t845 + g(2) * t843;
t940 = -g(3) * t1098 + t1140;
t1169 = t748 - t940;
t1096 = t913 * t914;
t959 = t1128 * t917 - t1096;
t1071 = -t1096 * t1145 + t959 * t815 + t1183;
t1070 = t854 * t815 + t775;
t818 = t915 * t833;
t736 = -pkin(3) * t1032 - t834 * t918 + t818;
t1168 = pkin(9) * t1056 - t736;
t1055 = qJD(4) * t810;
t1035 = t912 * t1129;
t844 = t1127 * t919 + t916 * t992;
t1006 = -t918 * t1035 - t844 * t915;
t1034 = t912 * t1127;
t846 = t1129 * t919 - t916 * t991;
t786 = -t1034 * t918 + t846 * t915;
t841 = t1099 * t915 - t1115 * t918;
t946 = g(1) * t786 - g(2) * t1006 + g(3) * t841;
t1166 = pkin(10) * t1055 - t946;
t1141 = t1058 - t1000;
t645 = pkin(5) * t962 + qJ(6) * t674;
t783 = -t915 * t1035 + t844 * t918;
t1163 = t783 * t914 - t843 * t917;
t1162 = t783 * t917 + t843 * t914;
t911 = qJ(4) + qJ(5);
t905 = sin(t911);
t906 = cos(t911);
t726 = t783 * t905 - t843 * t906;
t727 = t783 * t906 + t843 * t905;
t1160 = t810 ^ 2;
t1038 = pkin(4) * t914 + pkin(9);
t1095 = t914 * t711;
t1037 = pkin(1) * t1115;
t1065 = pkin(8) * t1098 + t916 * t1037;
t830 = pkin(9) * t1115 + t1065;
t1069 = t918 * t830 + t915 * t831;
t735 = -pkin(10) * t1098 + t1069;
t1094 = t914 * t735;
t974 = -pkin(8) * t1099 + t919 * t1037;
t829 = -pkin(2) * t1115 - t974;
t733 = t841 * pkin(3) - t842 * pkin(10) + t829;
t1008 = t917 * t733 - t1094;
t653 = pkin(4) * t841 + t1008 + t1172;
t1074 = t914 * t733 + t917 * t735;
t780 = t1098 * t917 + t842 * t914;
t658 = -pkin(11) * t780 + t1074;
t1157 = t1128 * t658 + t913 * t653;
t703 = t707 * qJ(6);
t795 = t803 * qJD(6);
t1156 = t703 + t795;
t872 = t920 * t914;
t873 = t920 * t917;
t799 = -t1128 * t873 + t913 * t872;
t1155 = -qJD(5) * t799 - t1128 * t1177 + t1176 * t913;
t1090 = t915 * t917;
t852 = t917 * t864;
t771 = -pkin(11) * t1090 + t852 + (-pkin(4) - t1125) * t918;
t1064 = t914 * t864 + t898;
t790 = -pkin(11) * t1092 + t1064;
t1154 = t1128 * t790 + t913 * t771;
t1153 = -pkin(4) * t1180 + t1168;
t1151 = -t762 * t1054 + t924 * t917;
t1149 = (qJDD(2) + 0.2e1 * t1005) * t912;
t1148 = t1056 - t999;
t717 = t918 * t794 + t915 * t809;
t994 = -t717 + (t1054 + t1110) * pkin(4);
t960 = t1128 * t872 + t913 * t873;
t1147 = -qJD(5) * t960 + t1128 * t1176 + t1177 * t913;
t1146 = -t771 * t1019 + t1052 * t790 + t1128 * t1174 + t1175 * t913;
t1142 = -t871 * t1058 - t832 * t918;
t704 = t707 * pkin(5);
t1139 = t704 - qJDD(6);
t787 = t1034 * t915 + t846 * t918;
t738 = -t787 * t914 + t845 * t917;
t1137 = -g(1) * t738 + g(2) * t1163 + g(3) * t780;
t1039 = pkin(8) * t889 + t916 * t995 + t919 * t978;
t939 = -pkin(8) * t996 + t1039;
t747 = pkin(9) * t977 + t939;
t970 = t989 * qJD(2);
t754 = (qJD(1) * t970 + qJDD(1) * t979) * t912;
t953 = t809 * t1056 - t1058 * t794 + t918 * t747 + t915 * t754;
t642 = pkin(10) * t832 + t953;
t651 = t718 * pkin(3) - pkin(10) * t925 + t748;
t1010 = -t914 * t642 + t917 * t651;
t793 = -pkin(2) * t981 - t833;
t691 = t815 * pkin(3) - t817 * pkin(10) + t793;
t697 = -pkin(10) * t871 + t717;
t599 = t711 * pkin(4) - pkin(11) * t924 - t1053 * t697 - t1054 * t691 + t1010;
t951 = -t691 * t1053 + t1054 * t697 - t917 * t642 - t914 * t651;
t602 = pkin(11) * t976 - t951;
t656 = t917 * t691 - t697 * t914;
t639 = -pkin(11) * t762 + t656;
t633 = pkin(4) * t810 + t639;
t657 = t691 * t914 + t697 * t917;
t640 = pkin(11) * t761 + t657;
t1004 = t640 * t1019 + t633 * t1052 - t1128 * t599 + t913 * t602;
t730 = t787 * t905 - t845 * t906;
t768 = t1098 * t906 + t842 * t905;
t936 = g(1) * t730 + g(2) * t726 + g(3) * t768 - t1004;
t928 = t623 * t962 - t1139 - t936;
t1136 = -t668 * t962 + t936;
t1060 = qJD(2) * t916;
t1030 = t912 * t1060;
t835 = t912 * t970;
t837 = t974 * qJD(2);
t952 = t831 * t1056 - t1058 * t830 + t915 * t835 + t918 * t837;
t670 = pkin(10) * t1030 + t952;
t778 = qJD(3) * t842 + t1029 * t912;
t779 = -qJD(3) * t841 + t1027 * t912;
t838 = t1065 * qJD(2);
t683 = t778 * pkin(3) - t779 * pkin(10) + t838;
t1009 = -t670 * t914 + t917 * t683;
t690 = -qJD(4) * t780 + t1030 * t914 + t779 * t917;
t609 = pkin(4) * t778 - pkin(11) * t690 - qJD(4) * t1074 + t1009;
t1041 = t733 * t1053 + t917 * t670 + t914 * t683;
t1028 = t917 * t1060;
t1112 = t779 * t914;
t942 = t1028 * t912 - t1112;
t615 = t942 * pkin(11) + (-t1094 + t1172) * qJD(4) + t1041;
t1135 = -qJD(5) * t1157 + t1128 * t609 - t913 * t615;
t1134 = -t799 * t707 - t946 * t905;
t1132 = -qJD(5) * t1154 - t1128 * t1175 + t1174 * t913;
t921 = qJD(1) ^ 2;
t1117 = g(3) * t912;
t1116 = t832 * pkin(3);
t1033 = t1128 * t640;
t611 = t913 * t633 + t1033;
t1114 = t611 * t803;
t1113 = t762 * t810;
t1108 = t817 * t871;
t955 = t871 * t915;
t1102 = t905 * t918;
t1101 = t906 * t918;
t908 = t912 ^ 2;
t1100 = t908 * t921;
t1097 = t913 * t640;
t1091 = t914 * t918;
t1089 = t917 * t711;
t1086 = qJ(6) * t1141 - qJD(6) * t918 - t1146;
t1085 = -pkin(5) * t1141 - t1132;
t840 = t959 * t915;
t1084 = pkin(5) * t1077 + qJ(6) * t1078 - qJD(6) * t840 + t1153;
t1080 = pkin(5) * t1070 - qJ(6) * t1071 - qJD(6) * t854 + t994;
t1076 = -qJ(6) * t817 - t1147;
t1075 = t817 * pkin(5) - t1155;
t613 = t1128 * t639 - t1097;
t1066 = pkin(4) * t1019 + qJD(6) - t613;
t858 = pkin(4) * t1092 + t915 * pkin(9);
t909 = t916 ^ 2;
t1063 = -t919 ^ 2 + t909;
t610 = t1128 * t633 - t1097;
t1051 = qJD(6) - t610;
t1043 = t919 * t1100;
t1042 = t905 * t1098;
t903 = pkin(4) * t917 + pkin(3);
t1018 = 0.2e1 * pkin(1) * t908;
t1016 = t919 * t1050;
t1015 = qJD(1) * t1057;
t1007 = -t915 * t830 + t831 * t918;
t591 = t633 * t1019 - t640 * t1052 + t1128 * t602 + t913 * t599;
t1003 = t794 * t1056 + t809 * t1058 + t915 * t747 - t918 * t754;
t612 = t913 * t639 + t1033;
t993 = pkin(4) * t1052 - t612;
t990 = t912 * t921 * t1115;
t987 = -g(1) * t726 + g(2) * t730;
t731 = t787 * t906 + t845 * t905;
t986 = g(1) * t727 - g(2) * t731;
t985 = g(1) * t1006 + g(2) * t786;
t984 = -g(1) * t846 - g(2) * t844;
t734 = pkin(3) * t1098 - t1007;
t980 = 0.2e1 * t1011 + qJD(2);
t975 = -t830 * t1056 - t831 * t1058 + t918 * t835 - t915 * t837;
t969 = t1128 * t653 - t913 * t658;
t966 = t1128 * t771 - t913 * t790;
t700 = -t1128 * t971 - t913 * t780;
t643 = t1003 - t1116;
t958 = t1053 * t696 + t643 * t914;
t954 = t1016 + t1049;
t950 = t653 * t1019 - t1052 * t658 + t1128 * t615 + t913 * t609;
t750 = -t1102 * t843 - t844 * t906;
t752 = -t1102 * t845 - t846 * t906;
t800 = t1042 * t918 - t1099 * t906;
t948 = -g(1) * t752 - g(2) * t750 - g(3) * t800;
t751 = -t1101 * t843 + t844 * t905;
t753 = -t1101 * t845 + t846 * t905;
t801 = (t1087 * t906 + t905 * t916) * t912;
t947 = -g(1) * t753 - g(2) * t751 - g(3) * t801;
t945 = g(1) * t787 + g(2) * t783 + g(3) * t842;
t679 = pkin(4) * t780 + t734;
t943 = t977 * MDP(8);
t769 = t842 * t906 - t1042;
t937 = g(1) * t731 + g(2) * t727 + g(3) * t769 - t591;
t604 = -qJD(4) * t657 + t1010;
t934 = t707 * t960 + t906 * t946;
t932 = t610 * t803 + t937;
t622 = -pkin(4) * t976 + t643;
t929 = qJD(4) * t971 + t942;
t926 = -g(1) * (-t730 * pkin(5) + qJ(6) * t731) - g(2) * (-t726 * pkin(5) + qJ(6) * t727) - g(3) * (-t768 * pkin(5) + qJ(6) * t769);
t644 = -(-t1053 * t842 - t1112) * pkin(4) + (-pkin(3) * t1060 - (t1054 * t919 + t1028) * pkin(4)) * t912 - t975;
t923 = t915 * t924;
t902 = -pkin(4) * t1128 - pkin(5);
t900 = pkin(4) * t913 + qJ(6);
t839 = t854 * t915;
t765 = -pkin(5) * t959 - qJ(6) * t854 - t903;
t740 = pkin(5) * t839 - qJ(6) * t840 + t858;
t739 = t787 * t917 + t845 * t914;
t699 = t1128 * t780 - t913 * t971;
t694 = t918 * pkin(5) - t966;
t693 = -qJ(6) * t918 + t1154;
t671 = -pkin(3) * t1030 - t975;
t634 = pkin(4) * t762 + t645;
t631 = pkin(5) * t699 - qJ(6) * t700 + t679;
t627 = qJD(5) * t700 - t1128 * t929 + t913 * t690;
t626 = t1019 * t780 - t1052 * t971 - t1128 * t690 - t913 * t929;
t619 = -t841 * pkin(5) - t969;
t618 = qJ(6) * t841 + t1157;
t607 = t803 * qJ(6) + t611;
t606 = -t803 * pkin(5) + t1051;
t598 = t627 * pkin(5) + t626 * qJ(6) - t700 * qJD(6) + t644;
t595 = t617 * pkin(5) + t616 * qJ(6) - qJD(6) * t962 + t622;
t594 = -t778 * pkin(5) - t1135;
t593 = qJ(6) * t778 + qJD(6) * t841 + t950;
t590 = t1004 - t1139;
t589 = t591 + t1156;
t1 = [(t1009 * t810 + t1008 * t711 + t604 * t841 + t656 * t778 - t671 * t761 - t734 * t976 + t643 * t780 - t696 * t942 + g(1) * t1162 - g(2) * t739 + (-t1074 * t810 - t696 * t971) * qJD(4)) * MDP(23) + (-t590 * t841 - t594 * t803 + t595 * t699 + t598 * t674 - t606 * t778 + t617 * t631 - t619 * t707 + t623 * t627 + t986) * MDP(32) + (-(-t1054 * t735 + t1041) * t810 - t1074 * t711 + t951 * t841 - t657 * t778 + t671 * t762 + t734 * t924 - t643 * t971 + t696 * t690 - g(1) * t1163 - g(2) * t738) * MDP(24) + (0.2e1 * (t1048 * t916 - t1050 * t1063) * MDP(5) + (qJDD(1) * t909 + 0.2e1 * t1016 * t916) * MDP(4)) * t908 + (-t838 * t981 + t974 * t977 - t1002 * t1115 + g(1) * t844 - g(2) * t846 + (-t1017 + t1048) * t1018) * MDP(9) + (-g(1) * t843 + g(2) * t845 - t1018 * t954 - t1065 * t977 - t1115 * t939 - t837 * t981) * MDP(10) + t1115 * t943 + (t589 * t618 + t607 * t593 + t595 * t631 + t623 * t598 + t590 * t619 + t606 * t594 - g(1) * (-pkin(1) * t1127 - t844 * pkin(2) - pkin(5) * t727 + pkin(8) * t1035 - qJ(6) * t726 - t1006 * t920 - t1038 * t843 - t783 * t903) - g(2) * (pkin(1) * t1129 + t846 * pkin(2) + t731 * pkin(5) + pkin(8) * t1034 + t730 * qJ(6) + t1038 * t845 - t786 * t920 + t787 * t903)) * MDP(35) + (g(1) * t1127 - g(2) * t1129) * MDP(2) + (g(1) * t1129 + g(2) * t1127) * MDP(3) + (-t779 * t871 + t842 * t832 + (-t927 * t919 + t817 * t1060 - (-t1015 * t915 + t1016 * t918 + t1012) * t1098) * t912) * MDP(13) + (-t1030 * t717 - t1069 * t832 + t1098 * t953 + t748 * t842 + t793 * t779 + t838 * t817 + t829 * t925 + t871 * t952 + t985) * MDP(17) + (-t1004 * t841 + t1135 * t803 + t610 * t778 + t679 * t617 + t622 * t699 + t668 * t627 + t644 * t674 + t969 * t707 + t986) * MDP(30) + (t762 * t690 - t924 * t971) * MDP(18) + (t690 * t810 - t711 * t971 + t762 * t778 + t841 * t924) * MDP(20) + (-t975 * t871 + t1007 * t832 + t838 * t815 + t829 * t718 + t748 * t841 + t793 * t778 + g(1) * t783 - g(2) * t787 + (t1003 * t919 + t1060 * t716) * t912) * MDP(16) + (-t1157 * t707 - t591 * t841 - t611 * t778 - t679 * t616 + t622 * t700 - t668 * t626 + t644 * t962 - t803 * t950 + t987) * MDP(31) + (t778 * t871 - t832 * t841 + (-t1060 * t815 + t718 * t919) * t912) * MDP(14) + (-t780 * t711 + t761 * t778 + t810 * t929 + t841 * t976) * MDP(21) + (t690 * t761 - t971 * t976 - t1164 * t780 + t762 * t942 + (-t761 * t780 + t762 * t971) * qJD(4)) * MDP(19) + (-t589 * t699 + t590 * t700 - t593 * t674 + t594 * t962 - t606 * t626 - t607 * t627 - t616 * t619 - t617 * t618 - t985) * MDP(33) + (t589 * t841 + t593 * t803 - t595 * t700 - t598 * t962 + t607 * t778 + t616 * t631 + t618 * t707 + t623 * t626 - t987) * MDP(34) + (t616 * t699 - t617 * t700 + t626 * t674 - t627 * t962) * MDP(26) + (-t616 * t700 - t626 * t962) * MDP(25) + (-t616 * t841 - t626 * t803 + t700 * t707 + t778 * t962) * MDP(27) + qJDD(1) * MDP(1) + (-t1060 * t871 - t832 * t919) * t912 * MDP(15) + (t711 * t841 + t778 * t810) * MDP(22) + (t707 * t841 + t778 * t803) * MDP(29) + (-t617 * t841 - t627 * t803 - t674 * t778 - t699 * t707) * MDP(28) + (-t1030 * t980 + t1149 * t919) * MDP(7) + (t1059 * t912 * t980 + t1149 * t916) * MDP(6) + (t817 * t779 + t842 * t925) * MDP(11) + (-t842 * t718 - t817 * t778 - t779 * t815 - t841 * t925) * MDP(12); ((-t1015 * t912 + t977) * t915 ^ 2 + ((t912 * t954 + t944) * t915 - t1108) * t918) * MDP(11) + (-t1077 * t607 - t1078 * t606 + t1085 * t962 - t1086 * t674 - t589 * t839 + t590 * t840 - t616 * t694 - t617 * t693 + t915 * t940) * MDP(33) + (-t1077 * t962 + t1078 * t674 + t616 * t839 - t617 * t840) * MDP(26) + (-t1078 * t962 - t616 * t840) * MDP(25) + (-t871 * t1056 + t832 * t915 + (t1087 * t871 - t817 * t916) * t1061) * MDP(13) + (t1089 * t915 + t1138 * t810 + t1141 * t762 - t918 * t924) * MDP(20) + ((t815 * t916 - t919 * t955) * t1061 - t1142) * MDP(14) + (-t716 * t1032 - pkin(2) * t718 - t836 * t815 - t818 * t871 + (-pkin(9) * t832 - t793 * t871) * t915 + ((pkin(9) * qJD(3) + t834) * t871 - t1169) * t918) * MDP(16) + (-pkin(2) * t925 + t1142 * pkin(9) + t1032 * t717 - t1068 * t871 + t1148 * t793 + t1169 * t915 - t836 * t817) * MDP(17) + (t1077 * t623 + t1084 * t674 - t1085 * t803 + t590 * t918 + t595 * t839 + t606 * t955 + t617 * t740 - t694 * t707 + t947) * MDP(32) + (-t1064 * t711 - t951 * t918 + pkin(9) * t923 + t643 * t1090 - g(1) * (t1091 * t845 + t846 * t917) - g(2) * (t1091 * t843 + t844 * t917) - (-t1087 * t914 + t916 * t917) * t1117 + t1179 * t810 + t1168 * t762 - t1141 * t657 + t1138 * t696) * MDP(24) + (t1090 * t976 + t1138 * t761 + t1180 * t762 - t914 * t923) * MDP(19) + (-t976 * t918 + t1181 * t810 + (-t1053 * t810 - t761 * t871 - t1095) * t915) * MDP(21) + (-t696 * t807 + t852 * t711 + t736 * t761 + t1182 * t810 + (-g(3) * t1099 + (-qJD(4) * t864 + t737) * t810 + t984) * t914 + (t696 * t914 * qJD(3) - t604 + (-qJD(3) * t761 - t1095) * pkin(9) + (-pkin(9) * t1055 + t940) * t917) * t918 + (-pkin(9) * t976 - t656 * t871 + t958) * t915) * MDP(23) + (pkin(1) * t1100 * t916 + t836 * t981 - t1002 + t940) * MDP(9) + (pkin(1) * t1043 + t833 * t981 + (pkin(8) * t1050 + g(3)) * t1099 - t984 - t1039) * MDP(10) + (t1004 * t918 + t1077 * t668 + t1132 * t803 + t1141 * t610 + t1153 * t674 + t858 * t617 + t622 * t839 + t966 * t707 + t947) * MDP(30) + (-t1078 * t803 + t616 * t918 + t707 * t840 - t955 * t962) * MDP(27) + (-t711 * t918 - t810 * t955) * MDP(22) + (-t707 * t918 - t803 * t955) * MDP(29) + (t1078 * t623 - t1084 * t962 + t1086 * t803 - t589 * t918 - t595 * t840 - t607 * t955 + t616 * t740 + t693 * t707 + t948) * MDP(34) + (-t1078 * t668 + t1146 * t803 + t1153 * t962 - t1154 * t707 + t591 * t918 + t611 * t955 - t858 * t616 + t622 * t840 - t948) * MDP(31) + (t916 * t990 + t889) * MDP(7) + (-t919 * t990 + t1014) * MDP(6) + t871 * MDP(15) * t1032 + t943 + (-t1077 * t803 + t617 * t918 + t674 * t955 - t707 * t839) * MDP(28) - t916 * MDP(4) * t1043 + (-t1141 * t817 - t1148 * t815 - t915 * t718 + t918 * t925) * MDP(12) + (t1150 * t762 + t1151 * t915) * MDP(18) + t1063 * MDP(5) * t1100 + (t589 * t693 + t595 * t740 + t590 * t694 - g(1) * (pkin(5) * t753 + qJ(6) * t752 + t1038 * t846) - g(2) * (pkin(5) * t751 + qJ(6) * t750 + t1038 * t844) - g(3) * (pkin(5) * t801 + qJ(6) * t800) + t1084 * t623 + t1086 * t607 + t1085 * t606 - t1038 * t916 * t1117 + (-t1117 * t919 + t1140) * (t903 * t918 - t915 * t920 + pkin(2))) * MDP(35); (t1071 * t962 - t616 * t854) * MDP(25) + (t1071 * t803 + t707 * t854 - t817 * t962) * MDP(27) + (-pkin(3) * t1040 - t656 * t817 + t717 * t761 - pkin(10) * t1095 + (-t643 + t1116 - t1166) * t917 + (-t744 + (t696 + t716) * t914) * t810) * MDP(23) + (-pkin(3) * t924 - pkin(10) * t1089 + t1079 * t810 + t1109 * t696 + t1166 * t914 + t657 * t817 - t717 * t762 + t958) * MDP(24) + (-t716 * t871 + t793 * t815 + t945 - t953) * MDP(17) + ((-qJD(4) * t817 + t832) * t914 ^ 2 + ((-qJD(4) * t871 + t925) * t914 + t1113) * t917) * MDP(18) + (-t1108 - t718) * MDP(14) + (-t717 * t871 - t793 * t817 - t1003 + t946) * MDP(16) + (t1075 * t606 + t1076 * t607 + t1080 * t623 + t589 * t799 - t590 * t960 + t595 * t765 + t920 * t945 + t946 * (pkin(5) * t906 + qJ(6) * t905 + t903)) * MDP(35) + (-t1070 * t962 - t1071 * t674 - t616 * t959 - t617 * t854) * MDP(26) + (t1070 * t623 - t1075 * t803 + t1080 * t674 - t595 * t959 + t606 * t817 + t617 * t765 + t934) * MDP(32) + (-t1070 * t803 + t674 * t817 + t707 * t959) * MDP(28) + (-t1070 * t607 + t1071 * t606 + t1075 * t962 - t1076 * t674 + t589 * t959 + t590 * t854 + t616 * t960 - t617 * t799 - t945) * MDP(33) + (t1070 * t668 + t1155 * t803 - t610 * t817 - t903 * t617 - t622 * t959 + t994 * t674 + t934) * MDP(30) + (-t1071 * t623 + t1076 * t803 - t1080 * t962 - t595 * t854 - t607 * t817 + t616 * t765 - t1134) * MDP(34) + (-t815 * t871 + t925) * MDP(13) - t810 * t817 * MDP(22) + t817 * t815 * MDP(11) - t803 * t817 * MDP(29) + t832 * MDP(15) + (-t815 ^ 2 + t817 ^ 2) * MDP(12) + (t1071 * t668 + t1147 * t803 + t611 * t817 + t903 * t616 + t622 * t854 + t994 * t962 + t1134) * MDP(31) + (-t1110 * t762 + t914 * t976 + (t1053 + t1109) * t761 + t1151) * MDP(19) + (-t1160 * t914 - t761 * t817 + t1089) * MDP(21) + (t1160 * t917 - t762 * t817 + t1095) * MDP(20); -t762 * t761 * MDP(18) + (-t761 ^ 2 + t762 ^ 2) * MDP(19) + (-t761 * t810 + t924) * MDP(20) + (t976 + t1113) * MDP(21) + t711 * MDP(22) + (t657 * t810 - t696 * t762 + t1137 + t604) * MDP(23) + (g(1) * t739 + g(2) * t1162 - g(3) * t971 + t656 * t810 - t696 * t761 + t951) * MDP(24) + (t612 * t803 + (-t1052 * t803 + t1128 * t707 - t674 * t762) * pkin(4) + t1136) * MDP(30) + (t613 * t803 + t1170 + (-t1019 * t803 - t913 * t707 - t762 * t962) * pkin(4) + t937) * MDP(31) + (-t634 * t674 - t707 * t902 - t803 * t993 - t928) * MDP(32) + (-t616 * t902 - t617 * t900 + (t607 + t993) * t962 + (-t1066 + t606) * t674) * MDP(33) + (t1066 * t803 + t634 * t962 + t707 * t900 + t1156 - t1171 - t937) * MDP(34) + (t589 * t900 + t590 * t902 - t623 * t634 - t606 * t612 + t1066 * t607 + (t1052 * t606 + t1137) * pkin(4) + t926) * MDP(35) + t1173; (t1114 + t1136) * MDP(30) + (t932 + t1170) * MDP(31) + (-t645 * t674 + t1114 + t704 - t928) * MDP(32) + (pkin(5) * t616 - qJ(6) * t617 + (t607 - t611) * t962 + (t606 - t1051) * t674) * MDP(33) + (t645 * t962 - t1171 + 0.2e1 * t703 + 0.2e1 * t795 - t932) * MDP(34) + (-t590 * pkin(5) + t589 * qJ(6) + t1051 * t607 - t606 * t611 - t623 * t645 + t926) * MDP(35) + t1173; t605 * MDP(33) + (-t803 ^ 2 - t1130) * MDP(34) + (-t607 * t803 + t928) * MDP(35) + (t1178 - t707) * MDP(32);];
tau  = t1;
