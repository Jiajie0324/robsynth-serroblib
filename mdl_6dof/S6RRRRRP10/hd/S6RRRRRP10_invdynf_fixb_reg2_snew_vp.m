% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRP10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 06:39
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRP10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP10_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 06:38:51
% EndTime: 2019-05-08 06:39:08
% DurationCPUTime: 18.11s
% Computational Cost: add. (99881->361), mult. (212918->497), div. (0->0), fcn. (172262->12), ass. (0->278)
t2990 = cos(pkin(6));
t2984 = qJD(1) * t2990 + qJD(2);
t2993 = sin(qJ(3));
t2998 = cos(qJ(3));
t2989 = sin(pkin(6));
t2994 = sin(qJ(2));
t3053 = t2989 * t2994;
t3047 = qJD(1) * t3053;
t2959 = t2984 * t2993 + t2998 * t3047;
t2999 = cos(qJ(2));
t3052 = t2989 * t2999;
t3046 = qJD(1) * t3052;
t3049 = qJDD(1) * t2989;
t2966 = qJD(2) * t3046 + t2994 * t3049;
t2983 = t2990 * qJDD(1) + qJDD(2);
t3043 = t2993 * t2966 - t2998 * t2983;
t3016 = t2959 * qJD(3) + qJDD(4) + t3043;
t3012 = qJDD(5) + t3016;
t2992 = sin(qJ(4));
t2997 = cos(qJ(4));
t3041 = -qJD(3) + t3046;
t2942 = t2959 * t2992 + t2997 * t3041;
t2943 = t2997 * t2959 - t2992 * t3041;
t2991 = sin(qJ(5));
t2996 = cos(qJ(5));
t2920 = t2942 * t2996 + t2943 * t2991;
t2922 = -t2942 * t2991 + t2943 * t2996;
t3059 = t2920 * t2922;
t2866 = t3012 + t3059;
t2919 = t2922 ^ 2;
t2957 = -t2998 * t2984 + t2993 * t3047;
t2956 = qJD(4) + t2957;
t2954 = qJD(5) + t2956;
t3069 = t2954 ^ 2;
t3075 = -t2919 - t3069;
t2833 = t2866 * t2991 - t2996 * t3075;
t2835 = t2866 * t2996 + t2991 * t3075;
t2811 = t2833 * t2992 - t2835 * t2997;
t3019 = t2998 * t2966 + t2993 * t2983;
t2932 = -t2957 * qJD(3) + t3019;
t3048 = qJDD(1) * t2999;
t3063 = qJD(1) * t2994;
t3076 = (qJD(2) * t3063 - t3048) * t2989;
t3011 = qJDD(3) + t3076;
t3008 = -t2997 * t2932 - t2992 * t3011;
t2893 = -t2942 * qJD(4) - t3008;
t3007 = -t2992 * t2932 + t2997 * t3011;
t3006 = -t2943 * qJD(4) + t3007;
t3004 = -t2920 * qJD(5) + t2996 * t2893 + t2991 * t3006;
t3058 = t2920 * t2954;
t3003 = t3004 - t3058;
t2784 = t2811 * t2993 - t2998 * t3003;
t2786 = t2811 * t2998 + t2993 * t3003;
t2803 = t2833 * t2997 + t2835 * t2992;
t3032 = t2786 * t2994 + t2803 * t2999;
t2756 = -t2989 * t2784 + t2990 * t3032;
t2767 = t2786 * t2999 - t2803 * t2994;
t2995 = sin(qJ(1));
t3000 = cos(qJ(1));
t3110 = t2756 * t2995 - t2767 * t3000;
t3109 = t2756 * t3000 + t2767 * t2995;
t2754 = t2990 * t2784 + t2989 * t3032;
t2828 = t3004 + t3058;
t3045 = t2893 * t2991 - t2996 * t3006;
t3015 = (-qJD(5) + t2954) * t2922 - t3045;
t3072 = t2828 * t2991 + t2996 * t3015;
t3073 = -t2996 * t2828 + t2991 * t3015;
t3079 = t2992 * t3072 + t2997 * t3073;
t2882 = t2920 ^ 2;
t2860 = t2919 + t2882;
t3080 = -t2992 * t3073 + t2997 * t3072;
t3085 = -t2860 * t2993 + t2998 * t3080;
t3089 = t2994 * t3079 + t2999 * t3085;
t3086 = t2860 * t2998 + t2993 * t3080;
t3090 = t2994 * t3085 - t2999 * t3079;
t3097 = -t2989 * t3086 + t2990 * t3090;
t3102 = -t2995 * t3097 + t3000 * t3089;
t3101 = t2995 * t3089 + t3000 * t3097;
t3098 = t2989 * t3090 + t2990 * t3086;
t2867 = t3012 - t3059;
t3074 = -t3069 - t2882;
t3081 = -t2867 * t2991 + t2996 * t3074;
t3082 = t2996 * t2867 + t2991 * t3074;
t3084 = -t2992 * t3082 + t2997 * t3081;
t3094 = t2993 * t3084;
t3083 = t2992 * t3081 + t2997 * t3082;
t3093 = t2994 * t3083;
t3092 = t2998 * t3084;
t3091 = t2999 * t3083;
t3040 = t3041 ^ 2;
t2915 = t2957 * t3041 + t2932;
t3071 = t2942 ^ 2;
t3070 = t2943 ^ 2;
t3068 = t2956 ^ 2;
t3067 = t2957 ^ 2;
t3066 = t2959 ^ 2;
t3065 = t2984 ^ 2;
t3064 = t2990 * g(3);
t3062 = qJD(1) * t2999;
t3057 = t2942 * t2943;
t3056 = t2956 * t2942;
t3055 = t2959 * t2957;
t3001 = qJD(1) ^ 2;
t3054 = t2989 ^ 2 * t3001;
t3051 = qJD(4) - t2956;
t2965 = (-pkin(2) * t2999 - pkin(9) * t2994) * t2989 * qJD(1);
t2978 = -g(1) * t3000 - g(2) * t2995;
t2962 = -pkin(1) * t3001 + pkin(8) * t3049 + t2978;
t2977 = t2995 * g(1) - t3000 * g(2);
t3010 = t3001 * t2989 * pkin(8) + qJDD(1) * pkin(1) + t2977;
t3009 = t2990 * t3010;
t3050 = t2999 * t2962 + t2994 * t3009;
t2910 = -t3065 * pkin(2) + t2983 * pkin(9) + (-g(3) * t2994 + t2965 * t3062) * t2989 + t3050;
t3002 = -t2966 * pkin(9) - t3064 + (-t2984 * pkin(9) * t3062 + (-t3048 + (qJD(2) + t2984) * t3063) * pkin(2) - t3010) * t2989;
t2872 = t2998 * t2910 + t2993 * t3002;
t2938 = pkin(3) * t2957 - pkin(10) * t2959;
t2855 = -pkin(3) * t3040 + pkin(10) * t3011 - t2957 * t2938 + t2872;
t3044 = t2994 * t2962 - t2999 * t3009;
t2909 = -t2983 * pkin(2) - t3065 * pkin(9) + (g(3) * t2999 + t2965 * t3063) * t2989 + t3044;
t2913 = (0.2e1 * qJD(3) - t3046) * t2959 + t3043;
t2857 = t2913 * pkin(3) - pkin(10) * t2915 + t2909;
t2816 = t2997 * t2855 + t2992 * t2857;
t2927 = pkin(4) * t2956 - pkin(11) * t2943;
t2808 = -pkin(4) * t3071 + pkin(11) * t3006 - t2956 * t2927 + t2816;
t2815 = -t2992 * t2855 + t2997 * t2857;
t2885 = t3016 - t3057;
t3005 = (-t2893 - t3056) * pkin(11) + t2885 * pkin(4) + t2815;
t2774 = t2996 * t2808 + t2991 * t3005;
t2773 = -t2808 * t2991 + t2996 * t3005;
t2871 = -t2910 * t2993 + t2998 * t3002;
t3042 = t2984 * t3046;
t2881 = pkin(5) * t2920 - qJ(6) * t2922;
t2761 = -pkin(5) * t3069 + qJ(6) * t3012 + 0.2e1 * qJD(6) * t2954 - t2920 * t2881 + t2774;
t2762 = -pkin(5) * t3012 - qJ(6) * t3069 + t2881 * t2922 + qJDD(6) - t2773;
t2742 = t2761 * t2991 - t2762 * t2996;
t2743 = t2761 * t2996 + t2762 * t2991;
t2733 = -t2742 * t2992 + t2743 * t2997;
t2854 = -t3011 * pkin(3) - t3040 * pkin(10) + t2938 * t2959 - t2871;
t2817 = -t3006 * pkin(4) - t3071 * pkin(11) + t2927 * t2943 + t2854;
t3018 = -qJD(5) * t2922 - t3045;
t2775 = -t3018 * pkin(5) + (pkin(5) * t2954 - 0.2e1 * qJD(6)) * t2922 + t2817 - t3003 * qJ(6);
t2731 = t2733 * t2998 + t2775 * t2993;
t2732 = t2742 * t2997 + t2743 * t2992;
t3039 = t2731 * t2994 - t2732 * t2999;
t2752 = t2773 * t2996 + t2774 * t2991;
t2753 = -t2773 * t2991 + t2774 * t2996;
t2737 = -t2752 * t2992 + t2753 * t2997;
t2735 = t2737 * t2998 + t2817 * t2993;
t2736 = t2752 * t2997 + t2753 * t2992;
t3038 = t2735 * t2994 - t2736 * t2999;
t2789 = -t2815 * t2992 + t2816 * t2997;
t2777 = t2789 * t2998 + t2854 * t2993;
t2788 = t2815 * t2997 + t2816 * t2992;
t3035 = t2777 * t2994 - t2788 * t2999;
t2824 = (qJD(5) + t2954) * t2922 + t3045;
t2783 = t2824 * t2993 + t3092;
t3033 = t2783 * t2994 - t3091;
t2825 = t2954 * t2922 - t3018;
t2787 = t2825 * t2993 + t3092;
t3031 = t2787 * t2994 - t3091;
t2876 = -t2943 * t3051 + t3007;
t2878 = t2942 * t3051 + t3008;
t2842 = t2876 * t2997 - t2878 * t2992;
t2894 = -t3070 - t3071;
t2820 = t2842 * t2998 + t2894 * t2993;
t2841 = t2876 * t2992 + t2878 * t2997;
t3030 = t2820 * t2994 - t2841 * t2999;
t2903 = -t3068 - t3071;
t2862 = -t2885 * t2992 + t2903 * t2997;
t2875 = (qJD(4) + t2956) * t2943 - t3007;
t2832 = t2862 * t2998 + t2875 * t2993;
t2861 = t2885 * t2997 + t2903 * t2992;
t3029 = t2832 * t2994 - t2861 * t2999;
t2886 = -t3016 - t3057;
t2918 = -t3068 - t3070;
t2865 = t2886 * t2997 - t2918 * t2992;
t2877 = t2893 - t3056;
t2838 = t2865 * t2998 + t2877 * t2993;
t2864 = t2886 * t2992 + t2918 * t2997;
t3028 = t2838 * t2994 - t2864 * t2999;
t2840 = -t2871 * t2993 + t2872 * t2998;
t3027 = t2840 * t2994 - t2909 * t2999;
t2914 = -t2959 * t3046 - t3043;
t2916 = t2957 * t3046 - t3019;
t2880 = t2914 * t2998 - t2916 * t2993;
t2926 = -t3066 - t3067;
t3026 = t2880 * t2994 - t2926 * t2999;
t2929 = t3011 - t3055;
t2933 = -t3040 - t3067;
t2891 = -t2929 * t2993 + t2933 * t2998;
t3025 = t2891 * t2994 - t2913 * t2999;
t2928 = -t3055 - t3011;
t2939 = -t3066 - t3040;
t2897 = t2928 * t2998 - t2939 * t2993;
t3024 = t2897 * t2994 - t2915 * t2999;
t2934 = -g(3) * t3052 - t3044;
t2935 = -g(3) * t3053 + t3050;
t3023 = t2934 * t2999 + t2935 * t2994;
t2945 = t3042 - t2966;
t2969 = t2984 * t3047;
t2946 = t2969 - t3076;
t3022 = t2945 * t2999 + t2946 * t2994;
t2987 = t2994 ^ 2;
t2955 = -t2987 * t3054 - t3065;
t2976 = t2999 * t2994 * t3054;
t2964 = t2976 - t2983;
t3021 = t2955 * t2999 + t2964 * t2994;
t2963 = t2976 + t2983;
t2988 = t2999 ^ 2;
t2967 = -t2988 * t3054 - t3065;
t3020 = t2963 * t2999 + t2967 * t2994;
t2975 = -qJDD(1) * t2995 - t3000 * t3001;
t2974 = qJDD(1) * t3000 - t2995 * t3001;
t2968 = (-t2987 - t2988) * t3054;
t2949 = -t2989 * t3010 - t3064;
t2947 = t2969 + t3076;
t2944 = t3042 + t2966;
t2940 = -t2963 * t2994 + t2967 * t2999;
t2937 = -t2955 * t2994 + t2964 * t2999;
t2925 = -t2945 * t2994 + t2946 * t2999;
t2924 = -t2989 * t2947 + t2990 * t3020;
t2923 = t2990 * t2947 + t2989 * t3020;
t2912 = -t2989 * t2944 + t2990 * t3021;
t2911 = t2990 * t2944 + t2989 * t3021;
t2908 = -t2989 * t2968 + t2990 * t3022;
t2907 = t2990 * t2968 + t2989 * t3022;
t2896 = t2928 * t2993 + t2939 * t2998;
t2895 = -t2934 * t2994 + t2935 * t2999;
t2890 = t2929 * t2998 + t2933 * t2993;
t2884 = -t2989 * t2949 + t2990 * t3023;
t2883 = t2990 * t2949 + t2989 * t3023;
t2879 = t2914 * t2993 + t2916 * t2998;
t2870 = t2897 * t2999 + t2915 * t2994;
t2869 = t2891 * t2999 + t2913 * t2994;
t2858 = t2880 * t2999 + t2926 * t2994;
t2852 = -t2989 * t2896 + t2990 * t3024;
t2851 = t2990 * t2896 + t2989 * t3024;
t2848 = -t2989 * t2890 + t2990 * t3025;
t2847 = t2990 * t2890 + t2989 * t3025;
t2839 = t2871 * t2998 + t2872 * t2993;
t2837 = t2865 * t2993 - t2877 * t2998;
t2831 = t2862 * t2993 - t2875 * t2998;
t2823 = -t2989 * t2879 + t2990 * t3026;
t2822 = t2990 * t2879 + t2989 * t3026;
t2819 = t2842 * t2993 - t2894 * t2998;
t2818 = t2840 * t2999 + t2909 * t2994;
t2814 = t2838 * t2999 + t2864 * t2994;
t2813 = t2832 * t2999 + t2861 * t2994;
t2802 = t2820 * t2999 + t2841 * t2994;
t2795 = -t2989 * t2839 + t2990 * t3027;
t2794 = t2990 * t2839 + t2989 * t3027;
t2793 = -t2989 * t2837 + t2990 * t3028;
t2792 = t2990 * t2837 + t2989 * t3028;
t2791 = -t2989 * t2831 + t2990 * t3029;
t2790 = t2990 * t2831 + t2989 * t3029;
t2785 = -t2825 * t2998 + t3094;
t2781 = -t2824 * t2998 + t3094;
t2779 = -t2989 * t2819 + t2990 * t3030;
t2778 = t2990 * t2819 + t2989 * t3030;
t2776 = t2789 * t2993 - t2854 * t2998;
t2768 = t2787 * t2999 + t3093;
t2760 = t2783 * t2999 + t3093;
t2758 = t2777 * t2999 + t2788 * t2994;
t2757 = -t2989 * t2785 + t2990 * t3031;
t2755 = t2990 * t2785 + t2989 * t3031;
t2751 = -t2989 * t2781 + t2990 * t3033;
t2749 = t2990 * t2781 + t2989 * t3033;
t2745 = -t2989 * t2776 + t2990 * t3035;
t2744 = t2990 * t2776 + t2989 * t3035;
t2734 = t2737 * t2993 - t2817 * t2998;
t2730 = t2733 * t2993 - t2775 * t2998;
t2729 = t2735 * t2999 + t2736 * t2994;
t2728 = t2731 * t2999 + t2732 * t2994;
t2727 = -t2989 * t2734 + t2990 * t3038;
t2726 = t2990 * t2734 + t2989 * t3038;
t2725 = -t2989 * t2730 + t2990 * t3039;
t2724 = t2990 * t2730 + t2989 * t3039;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2975, -t2974, 0, -t2977 * t2995 + t2978 * t3000, 0, 0, 0, 0, 0, 0, -t2924 * t2995 + t2940 * t3000, -t2912 * t2995 + t2937 * t3000, -t2908 * t2995 + t2925 * t3000, -t2884 * t2995 + t2895 * t3000, 0, 0, 0, 0, 0, 0, -t2848 * t2995 + t2869 * t3000, -t2852 * t2995 + t2870 * t3000, -t2823 * t2995 + t2858 * t3000, -t2795 * t2995 + t2818 * t3000, 0, 0, 0, 0, 0, 0, -t2791 * t2995 + t2813 * t3000, -t2793 * t2995 + t2814 * t3000, -t2779 * t2995 + t2802 * t3000, -t2745 * t2995 + t2758 * t3000, 0, 0, 0, 0, 0, 0, -t2751 * t2995 + t2760 * t3000, -t3110, t3102, -t2727 * t2995 + t2729 * t3000, 0, 0, 0, 0, 0, 0, -t2757 * t2995 + t2768 * t3000, t3102, t3110, -t2725 * t2995 + t2728 * t3000; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2974, t2975, 0, t2977 * t3000 + t2978 * t2995, 0, 0, 0, 0, 0, 0, t2924 * t3000 + t2940 * t2995, t2912 * t3000 + t2937 * t2995, t2908 * t3000 + t2925 * t2995, t2884 * t3000 + t2895 * t2995, 0, 0, 0, 0, 0, 0, t2848 * t3000 + t2869 * t2995, t2852 * t3000 + t2870 * t2995, t2823 * t3000 + t2858 * t2995, t2795 * t3000 + t2818 * t2995, 0, 0, 0, 0, 0, 0, t2791 * t3000 + t2813 * t2995, t2793 * t3000 + t2814 * t2995, t2779 * t3000 + t2802 * t2995, t2745 * t3000 + t2758 * t2995, 0, 0, 0, 0, 0, 0, t2751 * t3000 + t2760 * t2995, t3109, t3101, t2727 * t3000 + t2729 * t2995, 0, 0, 0, 0, 0, 0, t2757 * t3000 + t2768 * t2995, t3101, -t3109, t2725 * t3000 + t2728 * t2995; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2923, t2911, t2907, t2883, 0, 0, 0, 0, 0, 0, t2847, t2851, t2822, t2794, 0, 0, 0, 0, 0, 0, t2790, t2792, t2778, t2744, 0, 0, 0, 0, 0, 0, t2749, t2754, t3098, t2726, 0, 0, 0, 0, 0, 0, t2755, t3098, -t2754, t2724; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3001, -qJDD(1), 0, t2978, 0, 0, 0, 0, 0, 0, t2940, t2937, t2925, t2895, 0, 0, 0, 0, 0, 0, t2869, t2870, t2858, t2818, 0, 0, 0, 0, 0, 0, t2813, t2814, t2802, t2758, 0, 0, 0, 0, 0, 0, t2760, t2767, t3089, t2729, 0, 0, 0, 0, 0, 0, t2768, t3089, -t2767, t2728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3001, 0, t2977, 0, 0, 0, 0, 0, 0, t2924, t2912, t2908, t2884, 0, 0, 0, 0, 0, 0, t2848, t2852, t2823, t2795, 0, 0, 0, 0, 0, 0, t2791, t2793, t2779, t2745, 0, 0, 0, 0, 0, 0, t2751, t2756, t3097, t2727, 0, 0, 0, 0, 0, 0, t2757, t3097, -t2756, t2725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2923, t2911, t2907, t2883, 0, 0, 0, 0, 0, 0, t2847, t2851, t2822, t2794, 0, 0, 0, 0, 0, 0, t2790, t2792, t2778, t2744, 0, 0, 0, 0, 0, 0, t2749, t2754, t3098, t2726, 0, 0, 0, 0, 0, 0, t2755, t3098, -t2754, t2724; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2967, t2964, t2946, t2935, 0, 0, 0, 0, 0, 0, t2891, t2897, t2880, t2840, 0, 0, 0, 0, 0, 0, t2832, t2838, t2820, t2777, 0, 0, 0, 0, 0, 0, t2783, t2786, t3085, t2735, 0, 0, 0, 0, 0, 0, t2787, t3085, -t2786, t2731; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2963, t2955, t2945, t2934, 0, 0, 0, 0, 0, 0, -t2913, -t2915, -t2926, -t2909, 0, 0, 0, 0, 0, 0, -t2861, -t2864, -t2841, -t2788, 0, 0, 0, 0, 0, 0, -t3083, t2803, -t3079, -t2736, 0, 0, 0, 0, 0, 0, -t3083, -t3079, -t2803, -t2732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2947, t2944, t2968, t2949, 0, 0, 0, 0, 0, 0, t2890, t2896, t2879, t2839, 0, 0, 0, 0, 0, 0, t2831, t2837, t2819, t2776, 0, 0, 0, 0, 0, 0, t2781, t2784, t3086, t2734, 0, 0, 0, 0, 0, 0, t2785, t3086, -t2784, t2730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2933, t2928, t2914, t2872, 0, 0, 0, 0, 0, 0, t2862, t2865, t2842, t2789, 0, 0, 0, 0, 0, 0, t3084, t2811, t3080, t2737, 0, 0, 0, 0, 0, 0, t3084, t3080, -t2811, t2733; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2929, t2939, t2916, t2871, 0, 0, 0, 0, 0, 0, -t2875, -t2877, -t2894, -t2854, 0, 0, 0, 0, 0, 0, -t2824, -t3003, t2860, -t2817, 0, 0, 0, 0, 0, 0, -t2825, t2860, t3003, -t2775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2913, t2915, t2926, t2909, 0, 0, 0, 0, 0, 0, t2861, t2864, t2841, t2788, 0, 0, 0, 0, 0, 0, t3083, -t2803, t3079, t2736, 0, 0, 0, 0, 0, 0, t3083, t3079, t2803, t2732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2903, t2886, t2876, t2816, 0, 0, 0, 0, 0, 0, t3081, -t2835, t3072, t2753, 0, 0, 0, 0, 0, 0, t3081, t3072, t2835, t2743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2885, t2918, t2878, t2815, 0, 0, 0, 0, 0, 0, t3082, -t2833, t3073, t2752, 0, 0, 0, 0, 0, 0, t3082, t3073, t2833, t2742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2875, t2877, t2894, t2854, 0, 0, 0, 0, 0, 0, t2824, t3003, -t2860, t2817, 0, 0, 0, 0, 0, 0, t2825, -t2860, -t3003, t2775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3074, -t2866, t3015, t2774, 0, 0, 0, 0, 0, 0, t3074, t3015, t2866, t2761; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2867, t3075, -t2828, t2773, 0, 0, 0, 0, 0, 0, t2867, -t2828, -t3075, -t2762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2824, t3003, -t2860, t2817, 0, 0, 0, 0, 0, 0, t2825, -t2860, -t3003, t2775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3074, t3015, t2866, t2761; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2825, -t2860, -t3003, t2775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2867, t2828, t3075, t2762;];
f_new_reg  = t1;
