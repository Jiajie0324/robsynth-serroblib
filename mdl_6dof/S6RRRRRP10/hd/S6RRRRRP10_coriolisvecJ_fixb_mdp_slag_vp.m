% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP10_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 02:31
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRRRP10_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP10_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP10_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP10_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRRP10_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 02:28:01
% EndTime: 2019-03-10 02:28:35
% DurationCPUTime: 21.25s
% Computational Cost: add. (18576->737), mult. (47128->963), div. (0->0), fcn. (37015->10), ass. (0->274)
t720 = sin(pkin(6));
t727 = cos(qJ(2));
t821 = qJD(1) * t727;
t805 = t720 * t821;
t694 = -qJD(3) + t805;
t722 = sin(qJ(4));
t725 = cos(qJ(4));
t726 = cos(qJ(3));
t778 = t726 * t805;
t724 = sin(qJ(2));
t822 = qJD(1) * t720;
t806 = t724 * t822;
t639 = t722 * t778 - t725 * t806;
t818 = qJD(3) * t726;
t908 = -t722 * t818 + t639;
t868 = cos(pkin(6));
t790 = t868 * qJD(1);
t777 = pkin(1) * t790;
t699 = t724 * t777;
t669 = pkin(8) * t805 + t699;
t723 = sin(qJ(3));
t912 = t669 + t694 * (pkin(3) * t723 - pkin(10) * t726);
t816 = qJD(4) * t725;
t911 = t723 * t816 - t908;
t871 = cos(qJ(5));
t793 = t871 * qJD(5);
t910 = t725 * (t871 * qJD(4) + t793);
t819 = qJD(3) * t723;
t870 = pkin(9) * t722;
t909 = -t725 * t912 + t819 * t870;
t666 = -pkin(8) * t806 + t727 * t777;
t762 = t720 * (pkin(2) * t724 - pkin(9) * t727);
t667 = qJD(1) * t762;
t827 = t726 * t666 + t723 * t667;
t588 = pkin(10) * t806 + t827;
t690 = -pkin(3) * t726 - pkin(10) * t723 - pkin(2);
t817 = qJD(4) * t722;
t907 = -t690 * t816 - (-t725 * t819 - t726 * t817) * pkin(9) + t725 * t588 + t912 * t722;
t847 = t726 * t727;
t640 = (t722 * t724 + t725 * t847) * t822;
t878 = -t723 * t817 + t725 * t818 - t640;
t765 = t790 + qJD(2);
t653 = t723 * t765 + t726 * t806;
t600 = -t722 * t653 - t694 * t725;
t601 = t653 * t725 - t694 * t722;
t721 = sin(qJ(5));
t539 = -t871 * t600 + t601 * t721;
t753 = t721 * t600 + t601 * t871;
t906 = t539 * t753;
t628 = pkin(9) * t765 + t669;
t665 = (-pkin(2) * t727 - pkin(9) * t724 - pkin(1)) * t720;
t645 = qJD(1) * t665;
t575 = -t723 * t628 + t645 * t726;
t651 = t723 * t806 - t726 * t765;
t592 = pkin(3) * t653 + pkin(10) * t651;
t591 = t725 * t592;
t872 = -pkin(11) - pkin(10);
t808 = qJD(4) * t872;
t859 = t651 * t725;
t905 = pkin(4) * t653 + pkin(11) * t859 - t575 * t722 - t725 * t808 + t591;
t836 = t725 * t575 + t722 * t592;
t860 = t651 * t722;
t904 = pkin(11) * t860 - t722 * t808 + t836;
t848 = t725 * t726;
t709 = pkin(9) * t848;
t779 = t723 * t805;
t903 = pkin(4) * t779 - pkin(11) * t640 - t588 * t722 - (pkin(4) * t723 - pkin(11) * t848) * qJD(3) - (-t709 + (pkin(11) * t723 - t690) * t722) * qJD(4) - t909;
t902 = pkin(11) * t911 + t907;
t812 = qJD(1) * qJD(2);
t791 = t720 * t812;
t774 = t727 * t791;
t732 = -qJD(3) * t651 + t726 * t774;
t775 = t724 * t791;
t731 = t653 * t817 + t694 * t816 - t722 * t775 - t725 * t732;
t737 = -t653 * t816 + t694 * t817 - t722 * t732 + t725 * t775;
t815 = qJD(5) * t721;
t487 = -t600 * t793 + t601 * t815 - t721 * t737 + t871 * t731;
t646 = qJD(4) + t651;
t635 = qJD(5) + t646;
t474 = t539 * t635 - t487;
t488 = t600 * t815 + t601 * t793 - t721 * t731 - t871 * t737;
t606 = qJD(3) * t653 + t723 * t774;
t873 = t753 ^ 2;
t901 = t606 * MDP(29) + (t635 * t753 - t488) * MDP(28) + MDP(25) * t906 + (-t539 ^ 2 + t873) * MDP(26) + t474 * MDP(27);
t856 = t720 * t724;
t675 = t723 * t868 + t726 * t856;
t855 = t720 * t727;
t761 = -t675 * t725 + t722 * t855;
t900 = pkin(11) * t761;
t561 = pkin(3) * t694 - t575;
t527 = -pkin(4) * t600 + t561;
t485 = pkin(5) * t539 - qJ(6) * t753 + t527;
t899 = t485 * t539;
t898 = t527 * t539;
t683 = t721 * t725 + t722 * t871;
t879 = qJD(4) + qJD(5);
t615 = t879 * t683;
t776 = t871 * t818;
t835 = t615 * t723 + t640 * t871 - t721 * t908 - t725 * t776;
t850 = t722 * t723;
t834 = -t639 * t871 + t721 * t878 + t722 * t776 + t723 * t910 - t815 * t850;
t853 = t721 * t722;
t750 = t725 * t871 - t853;
t830 = t750 * t651 - t853 * t879 + t910;
t829 = t683 * t651 + t615;
t880 = t819 - t779;
t507 = pkin(5) * t753 + qJ(6) * t539;
t894 = t646 ^ 2;
t717 = t720 ^ 2;
t893 = -0.2e1 * t717 * t812;
t891 = MDP(5) * (t724 ^ 2 - t727 ^ 2);
t851 = t722 * t606;
t674 = t723 * t856 - t726 * t868;
t809 = pkin(1) * t868;
t882 = -pkin(8) * t856 + t727 * t809;
t663 = -pkin(2) * t868 - t882;
t583 = t674 * pkin(3) - t675 * pkin(10) + t663;
t738 = pkin(8) * t855 + t724 * t809;
t664 = pkin(9) * t868 + t738;
t828 = t726 * t664 + t723 * t665;
t585 = -pkin(10) * t855 + t828;
t852 = t722 * t585;
t787 = t725 * t583 - t852;
t512 = pkin(4) * t674 + t787 + t900;
t620 = t675 * t722 + t725 * t855;
t833 = t722 * t583 + t725 * t585;
t517 = -pkin(11) * t620 + t833;
t890 = t721 * t512 + t871 * t517;
t576 = t726 * t628 + t723 * t645;
t773 = -t576 + (t817 + t860) * pkin(4);
t695 = t872 * t722;
t696 = t872 * t725;
t751 = t695 * t871 + t721 * t696;
t889 = -qJD(5) * t751 + t721 * t905 + t871 * t904;
t633 = t721 * t695 - t696 * t871;
t888 = -qJD(5) * t633 + t721 * t904 - t871 * t905;
t681 = t725 * t690;
t849 = t723 * t725;
t611 = -pkin(11) * t849 + t681 + (-pkin(4) - t870) * t726;
t825 = t722 * t690 + t709;
t624 = -pkin(11) * t850 + t825;
t887 = t721 * t611 + t871 * t624;
t785 = -t723 * t666 + t667 * t726;
t587 = -pkin(3) * t806 - t785;
t886 = pkin(4) * t911 + pkin(9) * t818 - t587;
t796 = t601 * t818;
t885 = t723 * t731 - t796;
t884 = -t611 * t793 + t624 * t815 + t721 * t903 + t871 * t902;
t883 = t778 - t818;
t604 = t606 * pkin(5);
t627 = -pkin(2) * t765 - t666;
t556 = t651 * pkin(3) - t653 * pkin(10) + t627;
t562 = -pkin(10) * t694 + t576;
t668 = qJD(2) * t762;
t660 = qJD(1) * t668;
t670 = t882 * qJD(2);
t661 = qJD(1) * t670;
t744 = -t628 * t819 + t645 * t818 + t723 * t660 + t726 * t661;
t525 = pkin(10) * t775 + t744;
t768 = pkin(8) * t774;
t533 = t606 * pkin(3) - pkin(10) * t732 + qJD(2) * t699 + t768;
t789 = -t722 * t525 + t725 * t533;
t464 = t606 * pkin(4) + pkin(11) * t731 - t556 * t817 - t562 * t816 + t789;
t479 = t725 * t525 + t722 * t533 + t556 * t816 - t562 * t817;
t467 = pkin(11) * t737 + t479;
t515 = t725 * t556 - t562 * t722;
t504 = -pkin(11) * t601 + t515;
t497 = pkin(4) * t646 + t504;
t516 = t556 * t722 + t562 * t725;
t505 = pkin(11) * t600 + t516;
t782 = -t871 * t464 + t721 * t467 + t497 * t815 + t505 * t793;
t455 = -t604 + t782;
t739 = t485 * t753 + t455;
t877 = -t527 * t753 - t782;
t803 = qJD(2) * t855;
t619 = -qJD(3) * t674 + t726 * t803;
t820 = qJD(2) * t724;
t804 = t720 * t820;
t555 = -qJD(4) * t620 + t619 * t725 + t722 * t804;
t618 = qJD(3) * t675 + t723 * t803;
t743 = -t664 * t819 + t665 * t818 + t723 * t668 + t726 * t670;
t529 = pkin(10) * t804 + t743;
t671 = t738 * qJD(2);
t548 = t618 * pkin(3) - t619 * pkin(10) + t671;
t788 = -t529 * t722 + t725 * t548;
t471 = pkin(4) * t618 - pkin(11) * t555 - qJD(4) * t833 + t788;
t802 = t725 * t820;
t863 = t619 * t722;
t740 = t720 * t802 - t863;
t810 = t725 * t529 + t722 * t548 + t583 * t816;
t478 = t740 * pkin(11) + (-t852 + t900) * qJD(4) + t810;
t876 = -qJD(5) * t890 + t471 * t871 - t721 * t478;
t875 = -qJD(5) * t887 + t721 * t902 - t871 * t903;
t728 = qJD(1) ^ 2;
t869 = pkin(9) * t726;
t807 = t871 * t505;
t473 = t721 * t497 + t807;
t867 = t473 * t635;
t866 = t601 * t646;
t865 = t606 * t725;
t864 = t606 * t726;
t862 = t751 * t606;
t861 = t633 * t606;
t858 = t653 * t694;
t746 = t694 * t723;
t857 = t717 * t728;
t854 = t721 * t505;
t476 = t504 * t871 - t854;
t846 = -pkin(4) * t793 - qJD(6) + t476;
t845 = qJ(6) * t653 + t889;
t844 = -t653 * pkin(5) + t888;
t843 = -qJ(6) * t880 + qJD(6) * t726 + t884;
t842 = pkin(5) * t880 + t875;
t841 = -pkin(5) * t829 + qJ(6) * t830 + qJD(6) * t683 - t773;
t673 = t750 * t723;
t840 = -pkin(5) * t834 - qJ(6) * t835 + qJD(6) * t673 - t886;
t687 = pkin(4) * t850 + t723 * pkin(9);
t814 = t601 * qJD(4);
t472 = t497 * t871 - t854;
t813 = qJD(6) - t472;
t714 = -pkin(4) * t725 - pkin(3);
t801 = t694 * t819;
t795 = t723 * t814;
t786 = -t723 * t664 + t665 * t726;
t784 = t717 * t724 * t727 * MDP(4);
t783 = -t721 * t464 - t871 * t467 - t497 * t793 + t505 * t815;
t781 = t628 * t818 + t645 * t819 - t726 * t660 + t723 * t661;
t475 = t721 * t504 + t807;
t772 = pkin(4) * t815 - t475;
t770 = pkin(1) * t893;
t584 = pkin(3) * t855 - t786;
t763 = -t664 * t818 - t665 * t819 + t726 * t668 - t723 * t670;
t603 = t606 * qJ(6);
t629 = t635 * qJD(6);
t454 = t603 + t629 - t783;
t760 = t512 * t871 - t721 * t517;
t757 = t611 * t871 - t721 * t624;
t565 = -t721 * t620 - t761 * t871;
t526 = -pkin(3) * t775 + t781;
t749 = t526 * t722 + t561 * t816;
t748 = -t646 * t816 - t851;
t745 = t472 * t635 + t783;
t742 = t721 * t471 + t871 * t478 + t512 * t793 - t517 * t815;
t544 = pkin(4) * t620 + t584;
t736 = pkin(1) * (-qJD(2) * t790 + t857);
t480 = -qJD(4) * t516 + t789;
t734 = qJD(4) * t761 + t740;
t499 = -pkin(4) * t737 + t526;
t506 = -(-t675 * t816 - t863) * pkin(4) + (-pkin(3) * t820 - (t727 * t817 + t802) * pkin(4)) * t720 - t763;
t729 = t731 * t725;
t713 = -pkin(4) * t871 - pkin(5);
t711 = pkin(4) * t721 + qJ(6);
t672 = t683 * t723;
t662 = qJD(1) * t671;
t608 = -pkin(5) * t750 - qJ(6) * t683 + t714;
t589 = pkin(5) * t672 - qJ(6) * t673 + t687;
t586 = t606 * t674;
t564 = t620 * t871 - t721 * t761;
t559 = t726 * pkin(5) - t757;
t558 = -qJ(6) * t726 + t887;
t530 = -pkin(3) * t804 - t763;
t498 = pkin(4) * t601 + t507;
t495 = pkin(5) * t564 - qJ(6) * t565 + t544;
t491 = qJD(5) * t565 + t721 * t555 - t734 * t871;
t490 = -t555 * t871 + t620 * t793 - t721 * t734 - t761 * t815;
t482 = -t674 * pkin(5) - t760;
t481 = qJ(6) * t674 + t890;
t469 = t635 * qJ(6) + t473;
t468 = -t635 * pkin(5) + t813;
t461 = t491 * pkin(5) + t490 * qJ(6) - t565 * qJD(6) + t506;
t460 = t488 * pkin(5) + t487 * qJ(6) - qJD(6) * t753 + t499;
t459 = -t618 * pkin(5) - t876;
t458 = qJ(6) * t618 + qJD(6) * t674 + t742;
t1 = [(t618 * t694 + (t606 * t727 + (-qJD(1) * t674 - t651) * t820) * t720) * MDP(14) + (-t763 * t694 + t671 * t651 + t663 * t606 + t662 * t674 + t627 * t618 + (t781 * t727 + (qJD(1) * t786 + t575) * t820) * t720) * MDP(16) + (t788 * t646 + t787 * t606 + t480 * t674 + t515 * t618 - t530 * t600 - t584 * t737 + t526 * t620 - t561 * t740 + (-t561 * t761 - t646 * t833) * qJD(4)) * MDP(23) + (-t661 * t868 - t670 * t765 + t727 * t770) * MDP(10) + (-t662 * t868 - t671 * t765 + t724 * t770) * MDP(9) + (t600 * t618 - t620 * t606 + t646 * t734 + t674 * t737) * MDP(21) + (t653 * t619 + t675 * t732) * MDP(11) + (-t675 * t606 - t653 * t618 - t619 * t651 - t674 * t732) * MDP(12) + (-t694 * t720 - t717 * t821) * MDP(15) * t820 + 0.2e1 * t784 * t812 + (-t488 * t674 - t491 * t635 - t539 * t618 - t564 * t606) * MDP(28) + (-t455 * t674 - t459 * t635 + t460 * t564 + t461 * t539 - t468 * t618 - t482 * t606 + t485 * t491 + t488 * t495) * MDP(32) + (t618 * t646 + t586) * MDP(22) + (t618 * t635 + t586) * MDP(29) + t891 * t893 + (-t487 * t674 - t490 * t635 + t565 * t606 + t618 * t753) * MDP(27) + (t454 * t674 + t458 * t635 - t460 * t565 - t461 * t753 + t469 * t618 + t481 * t606 + t485 * t490 + t487 * t495) * MDP(34) + (t487 * t564 - t488 * t565 + t490 * t539 - t491 * t753) * MDP(26) + (-t454 * t564 + t455 * t565 - t458 * t539 + t459 * t753 - t468 * t490 - t469 * t491 - t481 * t488 - t482 * t487) * MDP(33) + (-t487 * t565 - t490 * t753) * MDP(25) + (MDP(6) * t803 - MDP(7) * t804) * (0.2e1 * t790 + qJD(2)) + (t454 * t481 + t455 * t482 + t458 * t469 + t459 * t468 + t460 * t495 + t461 * t485) * MDP(35) + (t472 * t618 + t544 * t488 + t527 * t491 + t499 * t564 + t506 * t539 + t760 * t606 + t635 * t876 - t674 * t782) * MDP(30) + (t601 * t555 + t731 * t761) * MDP(18) + (-(-t585 * t817 + t810) * t646 - t833 * t606 - t479 * t674 - t516 * t618 + t530 * t601 - t584 * t731 - t526 * t761 + t561 * t555) * MDP(24) + (t555 * t600 + t601 * t734 + t620 * t731 - t737 * t761) * MDP(19) + (t555 * t646 + t601 * t618 - t606 * t761 - t674 * t731) * MDP(20) + (-t473 * t618 - t544 * t487 - t527 * t490 + t499 * t565 + t506 * t753 - t606 * t890 - t635 * t742 + t674 * t783) * MDP(31) + (-t619 * t694 + t653 * t804 + t675 * t775 - t732 * t855) * MDP(13) + (-t576 * t804 + t627 * t619 + t671 * t653 + t662 * t675 + t663 * t732 + t694 * t743 + t744 * t855 - t775 * t828) * MDP(17); (t601 * t880 + t606 * t849 + t646 * t878 + t726 * t731) * MDP(20) + (-t694 * t818 + (t694 * t847 + (qJD(2) * t723 - t653) * t724) * t822) * MDP(13) + (t455 * t726 + t460 * t672 + t468 * t746 + t485 * t834 + t488 * t589 - t539 * t840 - t559 * t606 + t635 * t842) * MDP(32) + (t454 * t558 + t455 * t559 + t460 * t589 - t468 * t842 - t469 * t843 - t485 * t840) * MDP(35) + t694 * MDP(15) * t806 + (t488 * t726 + t539 * t746 - t606 * t672 - t635 * t834) * MDP(28) + (-pkin(2) * t606 - t662 * t726 + t785 * t694 - t669 * t651 + (t627 * t723 + t694 * t869) * qJD(3) + (-t575 * t724 + (-pkin(9) * t820 - t627 * t727) * t723) * t822) * MDP(16) + (-qJD(3) * t723 ^ 2 * t806 + ((qJD(3) * t765 + t774) * t723 - t858) * t726) * MDP(11) + (t600 * t878 + t601 * t639 + t722 * t885 - t725 * t795 + t737 * t849) * MDP(19) + (-t723 * t606 + t651 * t883 - t653 * t880 + t726 * t732) * MDP(12) + (-pkin(2) * t732 - pkin(9) * t801 + t576 * t806 - t627 * t883 - t669 * t653 + t662 * t723 - t694 * t827 - t775 * t869) * MDP(17) + (pkin(8) * t775 + t666 * t765 + t727 * t736) * MDP(10) + (t801 + (-t727 * t746 + (qJD(2) * t726 + t651) * t724) * t822) * MDP(14) + (t669 * t765 + t724 * t736 - t768) * MDP(9) + (-t561 * t639 + t587 * t600 + t681 * t606 + ((-qJD(4) * t690 + t588) * t722 + t909) * t646 + (t561 * t722 * qJD(3) - t480 + (-qJD(3) * t600 + t748) * pkin(9)) * t726 + (-pkin(9) * t737 - t515 * t694 + t749) * t723) * MDP(23) + (-t885 * pkin(9) + t479 * t726 - t880 * t516 + t526 * t849 + t878 * t561 - t587 * t601 - t606 * t825 + t646 * t907) * MDP(24) + (-t737 * t726 + t908 * t646 + (-t600 * t694 + t748) * t723) * MDP(21) + t857 * t891 + (-t601 * t640 - t722 * t795 - t723 * t729 + t725 * t796) * MDP(18) + (-t454 * t672 + t455 * t673 - t468 * t835 - t469 * t834 - t487 * t559 - t488 * t558 + t539 * t843 - t753 * t842) * MDP(33) + (t487 * t672 - t488 * t673 + t539 * t835 - t753 * t834) * MDP(26) + (-t487 * t673 - t753 * t835) * MDP(25) + (t472 * t880 + t687 * t488 + t499 * t672 + t527 * t834 + t539 * t886 + t757 * t606 + t635 * t875 + t726 * t782) * MDP(30) + (-t635 * t746 - t864) * MDP(29) + (-t454 * t726 - t460 * t673 - t469 * t746 + t485 * t835 + t487 * t589 + t558 * t606 - t635 * t843 + t753 * t840) * MDP(34) + (t487 * t726 + t606 * t673 - t635 * t835 - t746 * t753) * MDP(27) + (-t646 * t746 - t864) * MDP(22) + (t473 * t746 - t687 * t487 + t499 * t673 - t835 * t527 - t606 * t887 + t635 * t884 - t726 * t783 + t753 * t886) * MDP(31) + (-t784 + (-MDP(6) * t727 + MDP(7) * t724) * t720 * t868) * t728; (-t606 - t858) * MDP(14) + MDP(15) * t775 + (t473 * t653 - t714 * t487 + t499 * t683 + t830 * t527 + t635 * t889 + t773 * t753 - t861) * MDP(31) + ((-qJD(4) * t653 + t775) * t722 ^ 2 + ((-qJD(4) * t694 + t732) * t722 + t866) * t725) * MDP(18) + (-t600 * t653 - t722 * t894 + t865) * MDP(21) + (-t601 * t653 + t725 * t894 + t851) * MDP(20) + (-pkin(10) * t851 + pkin(3) * t737 - t515 * t653 - t526 * t725 + t576 * t600 + (-pkin(10) * t816 - t591 + (t561 + t575) * t722) * t646) * MDP(23) + (-t576 * t694 - t627 * t653 - t781) * MDP(16) + (-t651 * t694 + t732) * MDP(13) + (-t575 * t694 + t627 * t651 - t744) * MDP(17) + t653 * t651 * MDP(11) - t646 * t653 * MDP(22) - t635 * t653 * MDP(29) + (-t651 ^ 2 + t653 ^ 2) * MDP(12) + (-t601 * t860 - t729 + (t737 - t814) * t722 + (t816 + t859) * t600) * MDP(19) + (-t460 * t683 - t469 * t653 - t485 * t830 + t487 * t608 - t635 * t845 + t753 * t841 + t861) * MDP(34) + (t606 * t683 + t635 * t830 - t653 * t753) * MDP(27) + (-t487 * t683 + t753 * t830) * MDP(25) + (pkin(3) * t731 + t516 * t653 + t561 * t859 - t576 * t601 + t646 * t836 + t749 + (t646 * t817 - t865) * pkin(10)) * MDP(24) + (t454 * t633 - t455 * t751 + t460 * t608 - t468 * t844 - t469 * t845 - t485 * t841) * MDP(35) + (-t472 * t653 + t714 * t488 - t499 * t750 + t829 * t527 + t773 * t539 + t635 * t888 + t862) * MDP(30) + (-t460 * t750 + t468 * t653 + t485 * t829 + t488 * t608 - t539 * t841 + t635 * t844 + t862) * MDP(32) + (t539 * t653 + t606 * t750 - t635 * t829) * MDP(28) + (-t487 * t750 - t488 * t683 - t539 * t830 - t753 * t829) * MDP(26) + (t454 * t750 + t455 * t683 + t468 * t830 - t469 * t829 + t487 * t751 - t488 * t633 + t539 * t845 - t753 * t844) * MDP(33); -t601 * t600 * MDP(18) + (-t600 ^ 2 + t601 ^ 2) * MDP(19) + (-t600 * t646 - t731) * MDP(20) + (t737 + t866) * MDP(21) + t606 * MDP(22) + (t516 * t646 - t561 * t601 + t480) * MDP(23) + (t515 * t646 - t561 * t600 - t479) * MDP(24) + (t475 * t635 + (-t539 * t601 + t606 * t871 - t635 * t815) * pkin(4) + t877) * MDP(30) + (t476 * t635 + t898 + (-t601 * t753 - t721 * t606 - t635 * t793) * pkin(4) + t783) * MDP(31) + (-t498 * t539 - t606 * t713 - t635 * t772 - t739) * MDP(32) + (-t487 * t713 - t488 * t711 + (t469 + t772) * t753 + (t468 + t846) * t539) * MDP(33) + (t498 * t753 + t606 * t711 - t635 * t846 + t454 - t899) * MDP(34) + (t454 * t711 + t455 * t713 + t468 * t772 - t469 * t846 - t485 * t498) * MDP(35) + t901; (t867 + t877) * MDP(30) + (t745 + t898) * MDP(31) + (-t507 * t539 + t604 - t739 + t867) * MDP(32) + (pkin(5) * t487 - qJ(6) * t488 + (t469 - t473) * t753 + (t468 - t813) * t539) * MDP(33) + (t507 * t753 + 0.2e1 * t603 + 0.2e1 * t629 - t745 - t899) * MDP(34) + (-pkin(5) * t455 + qJ(6) * t454 - t468 * t473 + t469 * t813 - t485 * t507) * MDP(35) + t901; (-t606 + t906) * MDP(32) + t474 * MDP(33) + (-t635 ^ 2 - t873) * MDP(34) + (-t469 * t635 + t739) * MDP(35);];
tauc  = t1;
