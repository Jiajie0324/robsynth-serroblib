% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 06:39
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRP10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP10_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 06:34:05
% EndTime: 2019-05-08 06:36:41
% DurationCPUTime: 119.27s
% Computational Cost: add. (462868->986), mult. (985703->1518), div. (0->0), fcn. (799088->12), ass. (0->733)
t1301 = sin(qJ(1));
t1306 = cos(qJ(1));
t1295 = sin(pkin(6));
t1296 = cos(pkin(6));
t1300 = sin(qJ(2));
t1305 = cos(qJ(2));
t1299 = sin(qJ(3));
t1304 = cos(qJ(3));
t1464 = qJD(1) * t1296;
t1287 = qJD(2) + t1464;
t1429 = t1295 * t1300;
t1414 = qJD(1) * t1429;
t1256 = t1287 * t1299 + t1304 * t1414;
t1428 = t1295 * t1305;
t1413 = qJD(1) * t1428;
t1281 = -qJD(3) + t1413;
t1298 = sin(qJ(4));
t1303 = cos(qJ(4));
t1227 = t1256 * t1298 + t1303 * t1281;
t1228 = t1256 * t1303 - t1281 * t1298;
t1297 = sin(qJ(5));
t1302 = cos(qJ(5));
t1182 = t1302 * t1227 + t1228 * t1297;
t1254 = -t1304 * t1287 + t1299 * t1414;
t1418 = qJDD(1) * t1300;
t1462 = qJD(1) * t1305;
t1263 = (qJD(2) * t1462 + t1418) * t1295;
t1286 = qJDD(1) * t1296 + qJDD(2);
t1209 = -t1254 * qJD(3) + t1304 * t1263 + t1299 * t1286;
t1417 = qJDD(1) * t1305;
t1463 = qJD(1) * t1300;
t1339 = qJD(2) * t1463 - t1417;
t1322 = t1339 * t1295;
t1317 = qJDD(3) + t1322;
t1313 = -t1298 * t1209 + t1303 * t1317;
t1311 = t1228 * qJD(4) - t1313;
t1402 = t1227 * qJD(4) - t1303 * t1209 - t1298 * t1317;
t1309 = -t1182 * qJD(5) - t1297 * t1311 - t1302 * t1402;
t1250 = qJD(4) + t1254;
t1246 = qJD(5) + t1250;
t1450 = t1182 * t1246;
t1500 = t1309 - t1450;
t1184 = -t1227 * t1297 + t1228 * t1302;
t1181 = t1184 ^ 2;
t1487 = t1246 ^ 2;
t1092 = t1487 + t1181;
t1116 = t1184 * t1182;
t1397 = t1263 * t1299 - t1304 * t1286;
t1208 = -qJD(3) * t1256 - t1397;
t1207 = qJDD(4) - t1208;
t1206 = qJDD(5) + t1207;
t1502 = t1116 + t1206;
t1457 = t1502 * t1302;
t1011 = t1092 * t1297 - t1457;
t1458 = t1502 * t1297;
t992 = t1092 * t1302 + t1458;
t928 = t1011 * t1303 + t1298 * t992;
t858 = t1299 * t1500 + t1304 * t928;
t926 = t1011 * t1298 - t1303 * t992;
t1376 = t1300 * t858 - t1305 * t926;
t856 = t1299 * t928 - t1304 * t1500;
t763 = -t1295 * t856 + t1296 * t1376;
t811 = t1300 * t926 + t1305 * t858;
t725 = t1301 * t763 - t1306 * t811;
t1661 = pkin(7) * t725;
t729 = t1301 * t811 + t1306 * t763;
t1660 = pkin(7) * t729;
t761 = t1295 * t1376 + t1296 * t856;
t1659 = pkin(8) * (t1295 * t761 + t1296 * t763);
t1658 = pkin(1) * t761;
t1657 = pkin(1) * t763;
t1489 = t1182 ^ 2;
t1144 = t1489 - t1487;
t1018 = t1144 * t1297 + t1457;
t1022 = t1144 * t1302 - t1458;
t938 = t1018 * t1298 - t1022 * t1303;
t1399 = -t1297 * t1402 + t1302 * t1311;
t982 = (qJD(5) - t1246) * t1184 + t1399;
t869 = t1299 * t982 + t1304 * t938;
t934 = t1018 * t1303 + t1022 * t1298;
t1372 = t1300 * t869 + t1305 * t934;
t865 = t1299 * t938 - t1304 * t982;
t773 = -t1295 * t865 + t1296 * t1372;
t815 = -t1300 * t934 + t1305 * t869;
t1656 = t1301 * t773 - t1306 * t815;
t1113 = t1181 - t1489;
t981 = (qJD(5) + t1246) * t1184 + t1399;
t907 = -t1297 * t981 + t1302 * t1500;
t1474 = t1297 * t1500;
t909 = t1302 * t981 + t1474;
t824 = t1298 * t907 + t1303 * t909;
t809 = -t1113 * t1299 + t1304 * t824;
t822 = t1298 * t909 - t1303 * t907;
t1381 = t1300 * t809 - t1305 * t822;
t807 = t1113 * t1304 + t1299 * t824;
t721 = -t1295 * t807 + t1296 * t1381;
t748 = t1300 * t822 + t1305 * t809;
t1655 = t1301 * t721 - t1306 * t748;
t1654 = t1301 * t815 + t1306 * t773;
t1653 = t1301 * t748 + t1306 * t721;
t1651 = pkin(8) * t811;
t1644 = t1295 * t1372 + t1296 * t865;
t1643 = t1295 * t1381 + t1296 * t807;
t1642 = pkin(9) * t856;
t1499 = -t1450 - t1309;
t1535 = -t1297 * t1499 - t1302 * t982;
t1536 = -t1297 * t982 + t1302 * t1499;
t1554 = t1298 * t1535 + t1303 * t1536;
t1055 = -t1489 - t1181;
t1555 = -t1298 * t1536 + t1303 * t1535;
t1579 = t1055 * t1299 + t1304 * t1555;
t1596 = t1300 * t1554 + t1305 * t1579;
t1583 = -t1055 * t1304 + t1299 * t1555;
t1598 = t1300 * t1579 - t1305 * t1554;
t1606 = -t1295 * t1583 + t1296 * t1598;
t1627 = t1301 * t1596 + t1306 * t1606;
t1641 = pkin(7) * t1627;
t1629 = -t1301 * t1606 + t1306 * t1596;
t1640 = pkin(7) * t1629;
t1633 = pkin(2) * t856 - pkin(3) * t1500 + pkin(10) * t928;
t1632 = pkin(2) * t926 - pkin(9) * t858;
t1631 = pkin(1) * t1606;
t1608 = t1295 * t1598 + t1296 * t1583;
t1630 = pkin(1) * t1608;
t1145 = -t1181 + t1487;
t1503 = -t1116 + t1206;
t1456 = t1503 * t1297;
t1537 = t1302 * t1145 + t1456;
t1063 = t1302 * t1503;
t1538 = -t1145 * t1297 + t1063;
t1553 = -t1298 * t1538 - t1303 * t1537;
t1552 = -t1298 * t1537 + t1303 * t1538;
t1580 = -t1299 * t1499 + t1304 * t1552;
t1595 = -t1300 * t1553 + t1305 * t1580;
t1584 = t1299 * t1552 + t1304 * t1499;
t1597 = t1300 * t1580 + t1305 * t1553;
t1607 = -t1295 * t1584 + t1296 * t1597;
t1628 = -t1301 * t1607 + t1306 * t1595;
t1626 = t1301 * t1595 + t1306 * t1607;
t1625 = (-t1295 * t1608 - t1296 * t1606) * pkin(8);
t1623 = pkin(10) * t926;
t1622 = pkin(8) * t1596;
t1611 = pkin(3) * t926 - pkin(4) * t992;
t1609 = t1295 * t1597 + t1296 * t1584;
t1605 = pkin(9) * t1583;
t1600 = -pkin(2) * t1583 + pkin(3) * t1055 - pkin(10) * t1555;
t1599 = -pkin(2) * t1554 + pkin(9) * t1579;
t1593 = pkin(11) * t992;
t1591 = pkin(10) * t1554;
t1590 = pkin(11) * t1011;
t781 = -pkin(3) * t1554 - pkin(4) * t1536;
t1338 = (-t1182 * t1297 - t1184 * t1302) * t1246;
t1443 = t1246 * t1297;
t1142 = t1184 * t1443;
t1442 = t1246 * t1302;
t1408 = t1182 * t1442;
t1389 = t1142 - t1408;
t1496 = -t1298 * t1389 - t1303 * t1338;
t1495 = -t1298 * t1338 + t1303 * t1389;
t1509 = t1206 * t1299 + t1304 * t1495;
t1532 = -t1300 * t1496 + t1305 * t1509;
t1513 = -t1304 * t1206 + t1299 * t1495;
t1534 = t1300 * t1509 + t1305 * t1496;
t1556 = -t1295 * t1513 + t1296 * t1534;
t1582 = -t1301 * t1556 + t1306 * t1532;
t1026 = -qJD(5) * t1184 - t1399;
t1343 = -t1026 * t1297 + t1408;
t1390 = t1302 * t1026 + t1182 * t1443;
t1493 = -t1298 * t1343 - t1303 * t1390;
t1410 = t1299 * t1116;
t1494 = -t1298 * t1390 + t1303 * t1343;
t1510 = t1304 * t1494 - t1410;
t1531 = -t1300 * t1493 + t1305 * t1510;
t1409 = t1304 * t1116;
t1512 = t1299 * t1494 + t1409;
t1533 = t1300 * t1510 + t1305 * t1493;
t1557 = -t1295 * t1512 + t1296 * t1533;
t1581 = -t1301 * t1557 + t1306 * t1531;
t1578 = t1301 * t1532 + t1306 * t1556;
t1577 = t1301 * t1531 + t1306 * t1557;
t1498 = -t1487 - t1489;
t1511 = t1302 * t1498 - t1456;
t1514 = t1297 * t1498 + t1063;
t1529 = t1298 * t1511 + t1303 * t1514;
t1576 = pkin(2) * t1529;
t1574 = pkin(10) * t1529;
t1530 = -t1298 * t1514 + t1303 * t1511;
t1573 = pkin(10) * t1530;
t1572 = pkin(11) * t1536;
t1569 = t1299 * t1530;
t1568 = t1300 * t1529;
t1565 = t1304 * t1530;
t1564 = t1305 * t1529;
t1561 = -pkin(3) * t1529 - pkin(4) * t1514;
t1560 = -pkin(4) * t1055 + pkin(11) * t1535;
t1559 = t1295 * t1533 + t1296 * t1512;
t1558 = t1295 * t1534 + t1296 * t1513;
t1548 = pkin(11) * t1511;
t1547 = pkin(11) * t1514;
t1528 = 2 * qJD(6);
t1526 = qJ(6) * t1500;
t1190 = t1228 * t1227;
t1501 = -t1190 + t1207;
t1525 = t1298 * t1501;
t1520 = t1303 * t1501;
t1203 = t1250 * t1227;
t1103 = -t1203 + t1402;
t1194 = (t1254 * t1304 - t1256 * t1299) * t1281;
t1515 = t1300 * t1194 - t1305 * t1317;
t976 = t1184 * t1442 + t1297 * t1309;
t977 = t1302 * t1309 - t1142;
t901 = -t1298 * t976 + t1303 * t977;
t1391 = t1299 * t901 - t1409;
t1392 = t1304 * t901 + t1410;
t1426 = t1296 * t1305;
t898 = -t1298 * t977 - t1303 * t976;
t1492 = t1296 * t1300 * t1392 - t1295 * t1391 + t898 * t1426;
t1497 = -t1300 * t898 + t1305 * t1392;
t1508 = t1301 * t1497 + t1306 * t1492;
t1507 = -t1301 * t1492 + t1306 * t1497;
t1439 = t1254 * t1256;
t1315 = t1317 - t1439;
t1506 = t1299 * t1315;
t1505 = t1304 * t1315;
t1238 = t1254 * t1281;
t1174 = t1238 + t1209;
t1104 = t1402 + t1203;
t1112 = pkin(5) * t1182 - qJ(6) * t1184;
t1283 = g(1) * t1306 + t1301 * g(2);
t1480 = pkin(8) * t1295;
t1490 = qJD(1) ^ 2;
t1259 = -pkin(1) * t1490 + qJDD(1) * t1480 - t1283;
t1483 = pkin(2) * t1305;
t1394 = -pkin(9) * t1300 - t1483;
t1465 = qJD(1) * t1295;
t1262 = t1394 * t1465;
t1282 = t1301 * g(1) - t1306 * g(2);
t1319 = qJDD(1) * pkin(1) + t1480 * t1490 + t1282;
t1316 = t1296 * t1319;
t1314 = -g(3) * t1429 + t1300 * t1316;
t1485 = t1287 ^ 2;
t1163 = t1286 * pkin(9) - t1485 * pkin(2) + (t1262 * t1465 + t1259) * t1305 + t1314;
t1424 = qJD(2) + t1287;
t1478 = t1296 * g(3);
t1479 = pkin(9) * t1305;
t1484 = pkin(2) * t1300;
t1308 = -t1263 * pkin(9) - t1478 + ((-pkin(1) - t1483) * qJDD(1) + (-pkin(8) * t1465 - t1287 * t1479 + t1424 * t1484) * qJD(1) - t1282) * t1295;
t1088 = t1304 * t1163 + t1299 * t1308;
t1217 = pkin(3) * t1254 - pkin(10) * t1256;
t1486 = t1281 ^ 2;
t1040 = -pkin(3) * t1486 + pkin(10) * t1317 - t1254 * t1217 + t1088;
t1398 = t1259 * t1300 - t1305 * t1316;
t1162 = -t1286 * pkin(2) - t1485 * pkin(9) + (g(3) * t1305 + t1262 * t1463) * t1295 + t1398;
t1044 = -t1174 * pkin(10) + (-t1256 * t1281 - t1208) * pkin(3) + t1162;
t946 = t1040 * t1298 - t1303 * t1044;
t904 = t1501 * pkin(4) + pkin(11) * t1103 - t946;
t1196 = pkin(4) * t1250 - pkin(11) * t1228;
t1488 = t1227 ^ 2;
t947 = t1303 * t1040 + t1298 * t1044;
t921 = -pkin(4) * t1488 - pkin(11) * t1311 - t1250 * t1196 + t947;
t831 = t1297 * t904 + t1302 * t921;
t1386 = t1206 * qJ(6) - t1182 * t1112 + t1246 * t1528 + t831;
t1099 = (qJD(4) - t1250) * t1228 - t1313;
t1171 = (qJD(3) + t1281) * t1256 + t1397;
t1491 = t1296 * t1391 + t1392 * t1429 + t898 * t1428;
t1226 = t1228 ^ 2;
t1248 = t1250 ^ 2;
t1252 = t1254 ^ 2;
t1253 = t1256 ^ 2;
t1292 = t1295 ^ 2;
t1482 = pkin(3) * t1299;
t1481 = pkin(5) * t1302;
t830 = t1297 * t921 - t1302 * t904;
t1477 = qJ(6) * t1302;
t1087 = t1163 * t1299 - t1304 * t1308;
t1039 = -t1317 * pkin(3) - t1486 * pkin(10) + t1217 * t1256 + t1087;
t950 = t1311 * pkin(4) - t1488 * pkin(11) + t1196 * t1228 + t1039;
t1476 = t1297 * t950;
t756 = t1297 * t831 - t1302 * t830;
t1472 = t1298 * t756;
t1469 = t1302 * t950;
t1467 = t1303 * t756;
t1460 = t1039 * t1298;
t1459 = t1039 * t1303;
t1124 = t1190 + t1207;
t1455 = t1124 * t1298;
t1454 = t1124 * t1303;
t1452 = t1162 * t1299;
t1451 = t1162 * t1304;
t1199 = -t1317 - t1439;
t1449 = t1199 * t1299;
t1448 = t1199 * t1304;
t1240 = t1295 * t1319 + t1478;
t1446 = t1240 * t1300;
t1445 = t1240 * t1305;
t1444 = t1246 * t1184;
t1441 = t1250 * t1298;
t1440 = t1250 * t1303;
t1403 = t1300 * t1305 * t1490;
t1280 = t1292 * t1403;
t1260 = t1280 + t1286;
t1438 = t1260 * t1300;
t1437 = t1260 * t1305;
t1261 = -t1280 + t1286;
t1436 = t1261 * t1300;
t1435 = t1261 * t1305;
t1434 = t1281 * t1299;
t1433 = t1281 * t1304;
t1432 = t1286 * t1295;
t1431 = t1287 * t1295;
t1430 = t1292 * t1490;
t1420 = -t1055 - t1487;
t1293 = t1300 ^ 2;
t1294 = t1305 ^ 2;
t1419 = t1293 + t1294;
t1416 = -pkin(3) * t1304 - pkin(2);
t1415 = qJD(1) * t1431;
t1412 = t1293 * t1430;
t1411 = t1294 * t1430;
t1407 = t1299 * t1190;
t1406 = t1304 * t1190;
t1405 = t1300 * t1439;
t1404 = t1305 * t1439;
t1401 = -qJ(6) * t1297 - pkin(4);
t757 = t1297 * t830 + t1302 * t831;
t1400 = -t1287 + t1464;
t1000 = t1087 * t1299 + t1304 * t1088;
t1243 = -t1282 * t1301 - t1306 * t1283;
t1395 = t1184 * t1112 + qJDD(6) + t830;
t1279 = qJDD(1) * t1306 - t1301 * t1490;
t1393 = -pkin(7) * t1279 - g(3) * t1301;
t1249 = -t1412 - t1485;
t1216 = -t1249 * t1300 - t1435;
t1388 = pkin(8) * t1216 - t1446;
t1267 = -t1411 - t1485;
t1223 = t1267 * t1305 - t1438;
t1387 = pkin(8) * t1223 + t1445;
t860 = t1298 * t947 - t1303 * t946;
t861 = t1298 * t946 + t1303 * t947;
t793 = -pkin(5) * t1487 + t1386;
t1340 = -pkin(5) * t1206 + t1395;
t794 = qJ(6) * t1487 - t1340;
t739 = t1297 * t793 + t1302 * t794;
t740 = -t1297 * t794 + t1302 * t793;
t700 = -t1298 * t739 + t1303 * t740;
t1312 = -t1026 * pkin(5) - t1526 + t950;
t835 = (pkin(5) * t1246 - (2 * qJD(6))) * t1184 + t1312;
t689 = t1299 * t835 + t1304 * t700;
t699 = t1298 * t740 + t1303 * t739;
t1385 = t1300 * t689 - t1305 * t699;
t710 = t1303 * t757 - t1472;
t704 = t1299 * t950 + t1304 * t710;
t709 = t1298 * t757 + t1467;
t1384 = t1300 * t704 - t1305 * t709;
t840 = t1039 * t1299 + t1304 * t861;
t1379 = t1300 * t840 - t1305 * t860;
t852 = t1299 * t981 + t1565;
t1377 = t1300 * t852 - t1564;
t983 = -t1026 + t1444;
t859 = t1299 * t983 + t1565;
t1375 = t1300 * t859 - t1564;
t1100 = (-qJD(4) - t1250) * t1228 + t1313;
t1005 = -t1100 * t1298 + t1104 * t1303;
t1007 = t1100 * t1303 + t1104 * t1298;
t1189 = -t1226 + t1488;
t967 = t1007 * t1304 - t1189 * t1299;
t1366 = t1005 * t1305 + t1300 * t967;
t1006 = -t1099 * t1298 + t1103 * t1303;
t1008 = -t1099 * t1303 - t1103 * t1298;
t1137 = t1226 + t1488;
t963 = t1008 * t1304 - t1137 * t1299;
t1365 = -t1006 * t1305 + t1300 * t963;
t1155 = -t1248 - t1488;
t1059 = t1155 * t1298 + t1520;
t1060 = t1155 * t1303 - t1525;
t991 = t1060 * t1304 - t1100 * t1299;
t1364 = -t1059 * t1305 + t1300 * t991;
t1178 = -t1226 - t1248;
t1064 = t1178 * t1303 - t1455;
t1065 = -t1178 * t1298 - t1454;
t998 = t1065 * t1304 - t1104 * t1299;
t1363 = -t1064 * t1305 + t1300 * t998;
t1362 = t1000 * t1300 - t1162 * t1305;
t1198 = -t1226 + t1248;
t1084 = -t1198 * t1298 + t1520;
t1003 = t1084 * t1304 - t1103 * t1299;
t1082 = -t1198 * t1303 - t1525;
t1361 = t1003 * t1300 + t1082 * t1305;
t1197 = -t1248 + t1488;
t1085 = t1197 * t1303 - t1455;
t1004 = t1085 * t1304 - t1099 * t1299;
t1083 = -t1197 * t1298 - t1454;
t1360 = t1004 * t1300 + t1083 * t1305;
t1096 = t1227 * t1440 + t1298 * t1311;
t1047 = t1096 * t1304 - t1407;
t1095 = -t1227 * t1441 + t1303 * t1311;
t1359 = t1047 * t1300 + t1095 * t1305;
t1098 = -t1228 * t1441 - t1303 * t1402;
t1048 = t1098 * t1304 + t1407;
t1097 = -t1228 * t1440 + t1298 * t1402;
t1358 = t1048 * t1300 + t1097 * t1305;
t999 = -t1087 * t1304 + t1088 * t1299;
t1131 = (-t1227 * t1303 + t1228 * t1298) * t1250;
t1094 = t1131 * t1304 + t1207 * t1299;
t1130 = (t1227 * t1298 + t1228 * t1303) * t1250;
t1357 = t1094 * t1300 + t1130 * t1305;
t1172 = (-qJD(3) + t1281) * t1256 - t1397;
t1107 = t1172 * t1304 - t1174 * t1299;
t1218 = -t1253 + t1252;
t1356 = t1107 * t1300 + t1218 * t1305;
t1176 = t1238 - t1209;
t1108 = -t1171 * t1304 - t1176 * t1299;
t1195 = t1252 + t1253;
t1355 = t1108 * t1300 + t1195 * t1305;
t1212 = -t1486 - t1252;
t1134 = t1212 * t1304 - t1506;
t1354 = t1134 * t1300 + t1172 * t1305;
t1219 = -t1253 - t1486;
t1141 = -t1219 * t1299 + t1448;
t1353 = t1141 * t1300 - t1174 * t1305;
t1232 = -t1253 + t1486;
t1153 = -t1232 * t1299 + t1505;
t1352 = t1153 * t1300 + t1176 * t1305;
t1231 = t1252 - t1486;
t1154 = t1231 * t1304 + t1449;
t1351 = t1154 * t1300 + t1171 * t1305;
t1213 = g(3) * t1428 + t1398;
t1214 = t1305 * t1259 + t1314;
t1350 = -t1213 * t1305 + t1214 * t1300;
t1138 = t1213 * t1300 + t1214 * t1305;
t1271 = t1287 * t1413;
t1234 = t1271 + t1263;
t1270 = t1287 * t1414;
t1237 = -t1270 - t1322;
t1349 = t1234 * t1305 + t1237 * t1300;
t1235 = -t1271 + t1263;
t1236 = t1270 - t1322;
t1348 = -t1235 * t1305 + t1236 * t1300;
t1347 = t1249 * t1305 - t1436;
t1265 = -t1412 + t1485;
t1346 = t1265 * t1305 + t1438;
t1345 = t1267 * t1300 + t1437;
t1266 = t1411 - t1485;
t1344 = t1266 * t1300 + t1435;
t1242 = t1282 * t1306 - t1301 * t1283;
t1166 = -t1208 * t1299 - t1254 * t1433;
t1342 = t1166 * t1300 + t1404;
t1168 = t1209 * t1304 + t1256 * t1434;
t1341 = t1168 * t1300 - t1404;
t695 = pkin(11) * t740 + (t1401 - t1481) * t835;
t706 = -pkin(11) * t739 + (pkin(5) * t1297 - t1477) * t835;
t663 = -pkin(10) * t699 - t1298 * t695 + t1303 * t706;
t674 = -pkin(3) * t699 - pkin(4) * t739 - pkin(5) * t794 - qJ(6) * t793;
t688 = t1299 * t700 - t1304 * t835;
t645 = -pkin(9) * t688 - t1299 * t674 + t1304 * t663;
t655 = -pkin(2) * t688 + pkin(3) * t835 - pkin(10) * t700 - t1298 * t706 - t1303 * t695;
t671 = t1300 * t699 + t1305 * t689;
t1337 = pkin(8) * t671 + t1300 * t645 + t1305 * t655;
t743 = -pkin(4) * t950 + pkin(11) * t757;
t679 = -pkin(10) * t709 - pkin(11) * t1467 - t1298 * t743;
t687 = -pkin(3) * t709 - pkin(4) * t756;
t703 = t1299 * t710 - t1304 * t950;
t656 = -pkin(9) * t703 - t1299 * t687 + t1304 * t679;
t664 = -pkin(2) * t703 + pkin(3) * t950 - pkin(10) * t710 + pkin(11) * t1472 - t1303 * t743;
t678 = t1300 * t709 + t1305 * t704;
t1336 = pkin(8) * t678 + t1300 * t656 + t1305 * t664;
t785 = pkin(5) * t1420 + t1386;
t786 = qJ(6) * t1420 + t1340;
t720 = t1297 * t786 + t1302 * t785 + t1560;
t727 = -t1297 * t785 + t1302 * t786 - t1572;
t680 = -t1298 * t720 + t1303 * t727 - t1591;
t750 = -pkin(5) * t1499 + qJ(6) * t982 + t781;
t669 = -t1299 * t750 + t1304 * t680 - t1605;
t676 = -t1298 * t727 - t1303 * t720 + t1600;
t1335 = t1300 * t669 + t1305 * t676 + t1622;
t737 = t1560 + t757;
t738 = -t756 - t1572;
t686 = -t1298 * t737 + t1303 * t738 - t1591;
t675 = -t1299 * t781 + t1304 * t686 - t1605;
t681 = -t1298 * t738 - t1303 * t737 + t1600;
t1334 = t1300 * t675 + t1305 * t681 + t1622;
t1310 = t1184 * t1528 - t1312;
t805 = -pkin(5) * t1444 + t1310 + t1526;
t758 = -t1590 + t1297 * t805 + (pkin(4) + t1481) * t1500;
t776 = -pkin(5) * t1474 + t1302 * t805 - t1593;
t708 = -t1298 * t758 + t1303 * t776 + t1623;
t747 = -qJ(6) * t1502 + (-t1092 + t1487) * pkin(5) - t1386 + t1611;
t684 = -t1299 * t747 + t1304 * t708 + t1642;
t696 = -t1298 * t776 - t1303 * t758 + t1633;
t1333 = t1300 * t684 + t1305 * t696 - t1651;
t806 = (-t983 - t1444) * pkin(5) + t1310;
t760 = t1302 * t806 + t1401 * t983 + t1548;
t778 = -t1297 * t806 - t1477 * t983 - t1547;
t712 = -t1298 * t760 + t1303 * t778 - t1574;
t751 = (-t1498 - t1487) * qJ(6) + (-t1503 - t1206) * pkin(5) + t1395 + t1561;
t857 = -t1304 * t983 + t1569;
t685 = -pkin(9) * t857 - t1299 * t751 + t1304 * t712;
t698 = -pkin(2) * t857 + pkin(3) * t983 - t1298 * t778 - t1303 * t760 - t1573;
t812 = t1305 * t859 + t1568;
t1332 = pkin(8) * t812 + t1300 * t685 + t1305 * t698;
t842 = -pkin(4) * t981 - t1469 + t1548;
t886 = t1476 - t1547;
t759 = -t1298 * t842 + t1303 * t886 - t1574;
t770 = t1561 + t830;
t850 = -t1304 * t981 + t1569;
t702 = -pkin(9) * t850 - t1299 * t770 + t1304 * t759;
t734 = -pkin(2) * t850 + pkin(3) * t981 - t1298 * t886 - t1303 * t842 - t1573;
t790 = t1305 * t852 + t1568;
t1331 = pkin(8) * t790 + t1300 * t702 + t1305 * t734;
t848 = -pkin(4) * t1500 + t1476 + t1590;
t889 = t1469 + t1593;
t769 = -t1298 * t848 + t1303 * t889 - t1623;
t777 = -t1611 + t831;
t707 = -t1299 * t777 + t1304 * t769 - t1642;
t736 = -t1298 * t889 - t1303 * t848 - t1633;
t1330 = t1300 * t707 + t1305 * t736 + t1651;
t839 = -t1039 * t1304 + t1299 * t861;
t746 = -pkin(9) * t839 + (-pkin(10) * t1304 + t1482) * t860;
t775 = -pkin(2) * t839 + pkin(3) * t1039 - pkin(10) * t861;
t783 = t1300 * t860 + t1305 * t840;
t1329 = pkin(8) * t783 + t1300 * t746 + t1305 * t775;
t836 = -pkin(10) * t1006 - t860;
t962 = t1008 * t1299 + t1137 * t1304;
t784 = -pkin(9) * t962 + t1006 * t1482 + t1304 * t836;
t791 = -pkin(2) * t962 - pkin(3) * t1137 - pkin(10) * t1008 - t861;
t913 = t1006 * t1300 + t1305 * t963;
t1328 = pkin(8) * t913 + t1300 * t784 + t1305 * t791;
t922 = -pkin(3) * t1059 + t946;
t951 = -pkin(10) * t1059 + t1460;
t990 = t1060 * t1299 + t1100 * t1304;
t819 = -pkin(9) * t990 - t1299 * t922 + t1304 * t951;
t862 = -pkin(2) * t990 - pkin(3) * t1100 - pkin(10) * t1060 + t1459;
t940 = t1059 * t1300 + t1305 * t991;
t1327 = pkin(8) * t940 + t1300 * t819 + t1305 * t862;
t923 = -pkin(3) * t1064 + t947;
t955 = -pkin(10) * t1064 + t1459;
t997 = t1065 * t1299 + t1104 * t1304;
t828 = -pkin(9) * t997 - t1299 * t923 + t1304 * t955;
t871 = -pkin(2) * t997 - pkin(3) * t1104 - pkin(10) * t1065 - t1460;
t942 = t1064 * t1300 + t1305 * t998;
t1326 = pkin(8) * t942 + t1300 * t828 + t1305 * t871;
t1133 = t1212 * t1299 + t1505;
t1030 = -pkin(2) * t1133 + t1087;
t1071 = -pkin(9) * t1133 + t1452;
t1078 = t1134 * t1305 - t1172 * t1300;
t1325 = pkin(8) * t1078 + t1030 * t1305 + t1071 * t1300;
t1140 = t1219 * t1304 + t1449;
t1033 = -pkin(2) * t1140 + t1088;
t1079 = -pkin(9) * t1140 + t1451;
t1080 = t1141 * t1305 + t1174 * t1300;
t1324 = pkin(8) * t1080 + t1033 * t1305 + t1079 * t1300;
t1191 = t1235 * t1300 + t1236 * t1305;
t1323 = pkin(8) * t1191 + t1138;
t1054 = t1108 * t1305 - t1195 * t1300;
t1106 = -t1171 * t1299 + t1176 * t1304;
t945 = -pkin(9) * t1106 - t999;
t1321 = pkin(8) * t1054 - t1106 * t1483 + t1300 * t945;
t960 = t1000 * t1305 + t1162 * t1300;
t1320 = pkin(8) * t960 + t1394 * t999;
t1291 = t1295 * t1292;
t1278 = t1301 * qJDD(1) + t1306 * t1490;
t1269 = t1419 * t1430;
t1268 = (t1293 - t1294) * t1430;
t1264 = -pkin(7) * t1278 + g(3) * t1306;
t1239 = t1419 * t1415;
t1233 = (t1424 * t1462 + t1418) * t1295;
t1230 = t1263 * t1305 - t1293 * t1415;
t1229 = (-t1294 * t1287 * qJD(1) + t1300 * t1339) * t1295;
t1222 = t1266 * t1305 - t1436;
t1221 = -t1265 * t1300 + t1437;
t1211 = (t1263 * t1296 + (qJD(1) * t1291 + t1296 * t1431) * t1462) * t1300;
t1210 = -t1291 * t1403 + (-t1424 * t1463 + t1417) * t1295 * t1426;
t1193 = (t1254 * t1299 + t1256 * t1304) * t1281;
t1192 = -t1234 * t1300 + t1237 * t1305;
t1188 = t1237 * t1295 + t1296 * t1345;
t1187 = -t1236 * t1295 + t1296 * t1344;
t1186 = -t1235 * t1295 + t1296 * t1346;
t1185 = -t1237 * t1296 + t1295 * t1345;
t1170 = -t1233 * t1295 + t1296 * t1347;
t1169 = t1233 * t1296 + t1295 * t1347;
t1167 = t1209 * t1299 - t1256 * t1433;
t1165 = t1208 * t1304 - t1254 * t1434;
t1164 = t1305 * t1194 + t1300 * t1317;
t1161 = -t1268 * t1295 + t1296 * t1349;
t1160 = t1269 * t1295 + t1296 * t1348;
t1159 = -t1269 * t1296 + t1295 * t1348;
t1152 = t1231 * t1299 - t1448;
t1151 = t1232 * t1304 + t1506;
t1129 = -t1301 * t1188 + t1223 * t1306;
t1128 = t1188 * t1306 + t1301 * t1223;
t1122 = t1168 * t1305 + t1405;
t1121 = t1166 * t1305 - t1405;
t1120 = -t1301 * t1170 + t1216 * t1306;
t1119 = t1170 * t1306 + t1301 * t1216;
t1118 = t1240 * t1295 + t1296 * t1350;
t1117 = -t1240 * t1296 + t1295 * t1350;
t1111 = -t1295 * t1193 + t1296 * t1515;
t1110 = -t1301 * t1160 + t1191 * t1306;
t1109 = t1160 * t1306 + t1301 * t1191;
t1105 = t1172 * t1299 + t1174 * t1304;
t1093 = t1131 * t1299 - t1207 * t1304;
t1090 = t1154 * t1305 - t1171 * t1300;
t1089 = t1153 * t1305 - t1176 * t1300;
t1081 = -t1446 + (-t1185 * t1295 - t1188 * t1296) * pkin(8);
t1077 = -t1445 + (-t1169 * t1295 - t1170 * t1296) * pkin(8);
t1076 = -pkin(1) * t1185 + t1213 * t1295 + t1296 * t1387;
t1062 = t1107 * t1305 - t1218 * t1300;
t1061 = -pkin(1) * t1169 + t1214 * t1295 + t1296 * t1388;
t1058 = -t1167 * t1295 + t1296 * t1341;
t1057 = -t1165 * t1295 + t1296 * t1342;
t1051 = pkin(8) * t1138 * t1296 - pkin(1) * t1117;
t1050 = -t1301 * t1118 + t1138 * t1306;
t1049 = t1118 * t1306 + t1301 * t1138;
t1046 = t1098 * t1299 - t1406;
t1045 = t1096 * t1299 + t1406;
t1041 = -pkin(1) * t1159 + t1296 * t1323;
t1038 = -pkin(2) * t1174 + pkin(9) * t1141 + t1452;
t1036 = -t1152 * t1295 + t1296 * t1351;
t1035 = -t1151 * t1295 + t1296 * t1352;
t1034 = (-t1117 * t1295 - t1118 * t1296) * pkin(8);
t1032 = pkin(2) * t1172 + pkin(9) * t1134 - t1451;
t1031 = (-t1159 * t1295 - t1160 * t1296) * pkin(8) - t1350;
t1029 = -t1140 * t1295 + t1296 * t1353;
t1028 = t1140 * t1296 + t1295 * t1353;
t1027 = t1094 * t1305 - t1130 * t1300;
t1014 = -t1133 * t1295 + t1296 * t1354;
t1013 = t1133 * t1296 + t1295 * t1354;
t1002 = t1085 * t1299 + t1099 * t1304;
t1001 = t1084 * t1299 + t1103 * t1304;
t996 = -t1105 * t1295 + t1296 * t1356;
t980 = -t1106 * t1295 + t1296 * t1355;
t979 = t1106 * t1296 + t1295 * t1355;
t966 = t1007 * t1299 + t1189 * t1304;
t965 = t1048 * t1305 - t1097 * t1300;
t964 = t1047 * t1305 - t1095 * t1300;
t961 = -pkin(2) * t1162 + pkin(9) * t1000;
t954 = -t1093 * t1295 + t1296 * t1357;
t953 = -t1301 * t1029 + t1080 * t1306;
t952 = t1029 * t1306 + t1301 * t1080;
t949 = -t1301 * t1014 + t1078 * t1306;
t948 = t1014 * t1306 + t1301 * t1078;
t944 = t1004 * t1305 - t1083 * t1300;
t943 = t1003 * t1305 - t1082 * t1300;
t941 = pkin(2) * t1195 + pkin(9) * t1108 + t1000;
t931 = t1054 * t1306 - t1301 * t980;
t930 = t1301 * t1054 + t1306 * t980;
t925 = -t1046 * t1295 + t1296 * t1358;
t924 = -t1045 * t1295 + t1296 * t1359;
t918 = -t1005 * t1300 + t1305 * t967;
t891 = -t1295 * t999 + t1296 * t1362;
t890 = t1295 * t1362 + t1296 * t999;
t885 = -t1002 * t1295 + t1296 * t1360;
t884 = -t1001 * t1295 + t1296 * t1361;
t883 = -t1295 * t997 + t1296 * t1363;
t882 = t1295 * t1363 + t1296 * t997;
t873 = -t1295 * t990 + t1296 * t1364;
t872 = t1295 * t1364 + t1296 * t990;
t855 = -t1033 * t1300 + t1079 * t1305 + (-t1028 * t1295 - t1029 * t1296) * pkin(8);
t854 = -t1030 * t1300 + t1071 * t1305 + (-t1013 * t1295 - t1014 * t1296) * pkin(8);
t853 = -t1295 * t966 + t1296 * t1366;
t847 = -pkin(1) * t1028 - t1038 * t1295 + t1296 * t1324;
t846 = -t1295 * t962 + t1296 * t1365;
t845 = t1295 * t1365 + t1296 * t962;
t844 = -t1301 * t891 + t1306 * t960;
t843 = t1301 * t960 + t1306 * t891;
t841 = -pkin(1) * t1013 - t1032 * t1295 + t1296 * t1325;
t834 = t1106 * t1484 + t1305 * t945 + (-t1295 * t979 - t1296 * t980) * pkin(8);
t833 = -t1301 * t883 + t1306 * t942;
t832 = t1301 * t942 + t1306 * t883;
t818 = -t1301 * t873 + t1306 * t940;
t817 = t1301 * t940 + t1306 * t873;
t804 = -pkin(2) * t1064 + pkin(9) * t998 + t1299 * t955 + t1304 * t923;
t799 = -pkin(2) * t1059 + pkin(9) * t991 + t1299 * t951 + t1304 * t922;
t792 = -pkin(1) * t979 - t1295 * t941 + t1296 * t1321;
t788 = -t1301 * t846 + t1306 * t913;
t787 = t1301 * t913 + t1306 * t846;
t782 = (-t1479 + t1484) * t999 + (-t1295 * t890 - t1296 * t891) * pkin(8);
t780 = -pkin(1) * t890 - t1295 * t961 + t1296 * t1320;
t779 = pkin(9) * t963 + t1006 * t1416 + t1299 * t836;
t764 = -t1295 * t857 + t1296 * t1375;
t762 = t1295 * t1375 + t1296 * t857;
t755 = -t1295 * t850 + t1296 * t1377;
t753 = t1295 * t1377 + t1296 * t850;
t742 = -t1295 * t839 + t1296 * t1379;
t741 = t1295 * t1379 + t1296 * t839;
t735 = pkin(9) * t840 + (-pkin(10) * t1299 + t1416) * t860;
t733 = -t1300 * t871 + t1305 * t828 + (-t1295 * t882 - t1296 * t883) * pkin(8);
t732 = -t1301 * t764 + t1306 * t812;
t730 = t1301 * t812 + t1306 * t764;
t728 = -t1300 * t862 + t1305 * t819 + (-t1295 * t872 - t1296 * t873) * pkin(8);
t726 = -t1301 * t755 + t1306 * t790;
t724 = t1301 * t790 + t1306 * t755;
t715 = -pkin(1) * t882 - t1295 * t804 + t1296 * t1326;
t714 = -t1301 * t742 + t1306 * t783;
t713 = t1301 * t783 + t1306 * t742;
t711 = -pkin(1) * t872 - t1295 * t799 + t1296 * t1327;
t705 = -t1300 * t791 + t1305 * t784 + (-t1295 * t845 - t1296 * t846) * pkin(8);
t701 = t1299 * t769 + t1304 * t777 - t1632;
t697 = pkin(9) * t852 + t1299 * t759 + t1304 * t770 - t1576;
t694 = -pkin(1) * t845 - t1295 * t779 + t1296 * t1328;
t683 = pkin(9) * t859 + t1299 * t712 + t1304 * t751 - t1576;
t682 = t1299 * t708 + t1304 * t747 + t1632;
t677 = -t1300 * t775 + t1305 * t746 + (-t1295 * t741 - t1296 * t742) * pkin(8);
t673 = t1299 * t686 + t1304 * t781 + t1599;
t672 = -t1300 * t736 + t1305 * t707 - t1659;
t670 = -pkin(1) * t741 - t1295 * t735 + t1296 * t1329;
t668 = -t1300 * t734 + t1305 * t702 + (-t1295 * t753 - t1296 * t755) * pkin(8);
t667 = t1299 * t680 + t1304 * t750 + t1599;
t666 = -t1295 * t703 + t1296 * t1384;
t665 = t1295 * t1384 + t1296 * t703;
t662 = -t1295 * t701 + t1296 * t1330 - t1658;
t661 = -t1300 * t698 + t1305 * t685 + (-t1295 * t762 - t1296 * t764) * pkin(8);
t660 = -pkin(1) * t753 - t1295 * t697 + t1296 * t1331;
t659 = -t1300 * t696 + t1305 * t684 + t1659;
t658 = -t1295 * t688 + t1296 * t1385;
t657 = t1295 * t1385 + t1296 * t688;
t654 = -t1301 * t666 + t1306 * t678;
t653 = t1301 * t678 + t1306 * t666;
t652 = -pkin(1) * t762 - t1295 * t683 + t1296 * t1332;
t651 = -pkin(2) * t709 + pkin(9) * t704 + t1299 * t679 + t1304 * t687;
t650 = -t1295 * t682 + t1296 * t1333 + t1658;
t649 = -t1300 * t681 + t1305 * t675 + t1625;
t648 = -t1300 * t676 + t1305 * t669 + t1625;
t647 = -t1301 * t658 + t1306 * t671;
t646 = t1301 * t671 + t1306 * t658;
t644 = -t1295 * t673 + t1296 * t1334 - t1630;
t643 = -pkin(2) * t699 + pkin(9) * t689 + t1299 * t663 + t1304 * t674;
t642 = -t1295 * t667 + t1296 * t1335 - t1630;
t641 = -t1300 * t664 + t1305 * t656 + (-t1295 * t665 - t1296 * t666) * pkin(8);
t640 = -pkin(1) * t665 - t1295 * t651 + t1296 * t1336;
t639 = -t1300 * t655 + t1305 * t645 + (-t1295 * t657 - t1296 * t658) * pkin(8);
t638 = -pkin(1) * t657 - t1295 * t643 + t1296 * t1337;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1278, -t1279, 0, t1243, 0, 0, 0, 0, 0, 0, t1129, t1120, t1110, t1050, 0, 0, 0, 0, 0, 0, t949, t953, t931, t844, 0, 0, 0, 0, 0, 0, t818, t833, t788, t714, 0, 0, 0, 0, 0, 0, t726, -t725, t1629, t654, 0, 0, 0, 0, 0, 0, t732, t1629, t725, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1279, -t1278, 0, t1242, 0, 0, 0, 0, 0, 0, t1128, t1119, t1109, t1049, 0, 0, 0, 0, 0, 0, t948, t952, t930, t843, 0, 0, 0, 0, 0, 0, t817, t832, t787, t713, 0, 0, 0, 0, 0, 0, t724, t729, t1627, t653, 0, 0, 0, 0, 0, 0, t730, t1627, -t729, t646; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1185, t1169, t1159, t1117, 0, 0, 0, 0, 0, 0, t1013, t1028, t979, t890, 0, 0, 0, 0, 0, 0, t872, t882, t845, t741, 0, 0, 0, 0, 0, 0, t753, t761, t1608, t665, 0, 0, 0, 0, 0, 0, t762, t1608, -t761, t657; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1279, 0, -t1278, 0, t1393, -t1264, -t1242, -pkin(7) * t1242, -t1301 * t1211 + t1230 * t1306, -t1301 * t1161 + t1192 * t1306, -t1301 * t1186 + t1221 * t1306, -t1301 * t1210 + t1229 * t1306, -t1301 * t1187 + t1222 * t1306, t1239 * t1306 + t1301 * t1432, -pkin(7) * t1128 - t1301 * t1076 + t1081 * t1306, -pkin(7) * t1119 - t1301 * t1061 + t1077 * t1306, -pkin(7) * t1109 + t1031 * t1306 - t1301 * t1041, -pkin(7) * t1049 + t1034 * t1306 - t1301 * t1051, -t1301 * t1058 + t1122 * t1306, t1062 * t1306 - t1301 * t996, -t1301 * t1035 + t1089 * t1306, -t1301 * t1057 + t1121 * t1306, -t1301 * t1036 + t1090 * t1306, -t1301 * t1111 + t1164 * t1306, -pkin(7) * t948 - t1301 * t841 + t1306 * t854, -pkin(7) * t952 - t1301 * t847 + t1306 * t855, -pkin(7) * t930 - t1301 * t792 + t1306 * t834, -pkin(7) * t843 - t1301 * t780 + t1306 * t782, -t1301 * t925 + t1306 * t965, -t1301 * t853 + t1306 * t918, -t1301 * t884 + t1306 * t943, -t1301 * t924 + t1306 * t964, -t1301 * t885 + t1306 * t944, t1027 * t1306 - t1301 * t954, -pkin(7) * t817 - t1301 * t711 + t1306 * t728, -pkin(7) * t832 - t1301 * t715 + t1306 * t733, -pkin(7) * t787 - t1301 * t694 + t1306 * t705, -pkin(7) * t713 - t1301 * t670 + t1306 * t677, t1507, t1655, t1628, t1581, t1656, t1582, -pkin(7) * t724 - t1301 * t660 + t1306 * t668, -t1301 * t662 + t1306 * t672 - t1660, -t1301 * t644 + t1306 * t649 - t1641, -pkin(7) * t653 - t1301 * t640 + t1306 * t641, t1507, t1628, -t1655, t1582, -t1656, t1581, -pkin(7) * t730 - t1301 * t652 + t1306 * t661, -t1301 * t642 + t1306 * t648 - t1641, -t1301 * t650 + t1306 * t659 + t1660, -pkin(7) * t646 - t1301 * t638 + t1306 * t639; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1278, 0, t1279, 0, t1264, t1393, t1243, pkin(7) * t1243, t1211 * t1306 + t1301 * t1230, t1161 * t1306 + t1301 * t1192, t1186 * t1306 + t1301 * t1221, t1210 * t1306 + t1301 * t1229, t1187 * t1306 + t1301 * t1222, t1301 * t1239 - t1306 * t1432, pkin(7) * t1129 + t1076 * t1306 + t1301 * t1081, pkin(7) * t1120 + t1061 * t1306 + t1301 * t1077, pkin(7) * t1110 + t1301 * t1031 + t1041 * t1306, pkin(7) * t1050 + t1301 * t1034 + t1051 * t1306, t1058 * t1306 + t1301 * t1122, t1301 * t1062 + t1306 * t996, t1035 * t1306 + t1301 * t1089, t1057 * t1306 + t1301 * t1121, t1036 * t1306 + t1301 * t1090, t1111 * t1306 + t1301 * t1164, pkin(7) * t949 + t1301 * t854 + t1306 * t841, pkin(7) * t953 + t1301 * t855 + t1306 * t847, pkin(7) * t931 + t1301 * t834 + t1306 * t792, pkin(7) * t844 + t1301 * t782 + t1306 * t780, t1301 * t965 + t1306 * t925, t1301 * t918 + t1306 * t853, t1301 * t943 + t1306 * t884, t1301 * t964 + t1306 * t924, t1301 * t944 + t1306 * t885, t1301 * t1027 + t1306 * t954, pkin(7) * t818 + t1301 * t728 + t1306 * t711, pkin(7) * t833 + t1301 * t733 + t1306 * t715, pkin(7) * t788 + t1301 * t705 + t1306 * t694, pkin(7) * t714 + t1301 * t677 + t1306 * t670, t1508, -t1653, t1626, t1577, -t1654, t1578, pkin(7) * t726 + t1301 * t668 + t1306 * t660, t1301 * t672 + t1306 * t662 - t1661, t1301 * t649 + t1306 * t644 + t1640, pkin(7) * t654 + t1301 * t641 + t1306 * t640, t1508, t1626, t1653, t1578, t1654, t1577, pkin(7) * t732 + t1301 * t661 + t1306 * t652, t1301 * t648 + t1306 * t642 + t1640, t1301 * t659 + t1306 * t650 + t1661, pkin(7) * t647 + t1301 * t639 + t1306 * t638; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1282, t1283, 0, 0, (-t1292 * t1400 * t1462 + t1263 * t1295) * t1300, t1268 * t1296 + t1295 * t1349, t1235 * t1296 + t1295 * t1346, (t1417 + (-qJD(2) + t1400) * t1463) * t1292 * t1305, t1236 * t1296 + t1295 * t1344, t1296 * t1286, pkin(1) * t1188 - t1213 * t1296 + t1295 * t1387, pkin(1) * t1170 - t1214 * t1296 + t1295 * t1388, pkin(1) * t1160 + t1295 * t1323, pkin(1) * t1118 + t1138 * t1480, t1167 * t1296 + t1295 * t1341, t1105 * t1296 + t1295 * t1356, t1151 * t1296 + t1295 * t1352, t1165 * t1296 + t1295 * t1342, t1152 * t1296 + t1295 * t1351, t1296 * t1193 + t1295 * t1515, pkin(1) * t1014 + t1032 * t1296 + t1295 * t1325, pkin(1) * t1029 + t1038 * t1296 + t1295 * t1324, pkin(1) * t980 + t1295 * t1321 + t1296 * t941, pkin(1) * t891 + t1295 * t1320 + t1296 * t961, t1046 * t1296 + t1295 * t1358, t1295 * t1366 + t1296 * t966, t1001 * t1296 + t1295 * t1361, t1045 * t1296 + t1295 * t1359, t1002 * t1296 + t1295 * t1360, t1093 * t1296 + t1295 * t1357, pkin(1) * t873 + t1295 * t1327 + t1296 * t799, pkin(1) * t883 + t1295 * t1326 + t1296 * t804, pkin(1) * t846 + t1295 * t1328 + t1296 * t779, pkin(1) * t742 + t1295 * t1329 + t1296 * t735, t1491, -t1643, t1609, t1559, -t1644, t1558, pkin(1) * t755 + t1295 * t1331 + t1296 * t697, t1295 * t1330 + t1296 * t701 + t1657, t1295 * t1334 + t1296 * t673 + t1631, pkin(1) * t666 + t1295 * t1336 + t1296 * t651, t1491, t1609, t1643, t1558, t1644, t1559, pkin(1) * t764 + t1295 * t1332 + t1296 * t683, t1295 * t1335 + t1296 * t667 + t1631, t1295 * t1333 + t1296 * t682 - t1657, pkin(1) * t658 + t1295 * t1337 + t1296 * t643;];
tauB_reg  = t1;
