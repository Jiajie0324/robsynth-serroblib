% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPPR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:54:45
% EndTime: 2019-03-09 02:54:56
% DurationCPUTime: 6.80s
% Computational Cost: add. (8782->537), mult. (17947->667), div. (0->0), fcn. (12822->14), ass. (0->269)
t218 = cos(qJ(3));
t331 = cos(pkin(9));
t275 = t331 * t218;
t263 = qJD(1) * t275;
t211 = sin(pkin(9));
t216 = sin(qJ(3));
t298 = qJD(1) * t216;
t281 = t211 * t298;
t143 = t263 - t281;
t210 = sin(pkin(10));
t212 = cos(pkin(10));
t117 = qJD(3) * t210 + t143 * t212;
t215 = sin(qJ(6));
t355 = cos(qJ(6));
t132 = t210 * t143;
t369 = qJD(3) * t212 - t132;
t236 = t355 * t369;
t59 = -t215 * t117 + t236;
t377 = t59 ^ 2;
t235 = -t211 * t218 - t331 * t216;
t139 = t235 * qJD(1);
t137 = qJD(6) - t139;
t376 = t137 * t59;
t58 = t355 * t117 + t215 * t369;
t375 = t58 ^ 2;
t203 = qJ(3) + pkin(9);
t194 = cos(t203);
t192 = sin(t203);
t351 = g(3) * t192;
t219 = cos(qJ(1));
t200 = g(2) * t219;
t217 = sin(qJ(1));
t367 = g(1) * t217 - t200;
t228 = t194 * t367 - t351;
t365 = -qJDD(3) * pkin(4) + qJDD(5);
t220 = -pkin(1) - pkin(7);
t167 = t220 * qJDD(1) + qJDD(2);
t157 = t218 * t167;
t168 = t220 * qJD(1) + qJD(2);
t292 = qJD(1) * qJD(3);
t280 = t216 * t292;
t288 = t218 * qJDD(1);
t291 = qJD(1) * qJD(4);
t295 = qJD(3) * t216;
t73 = -t218 * t291 - t168 * t295 + qJDD(3) * pkin(3) + t157 + (t280 - t288) * qJ(4);
t271 = -qJ(4) * qJD(1) + t168;
t294 = qJD(3) * t218;
t89 = t271 * t294 + (-qJ(4) * qJDD(1) + t167 - t291) * t216;
t37 = -t211 * t89 + t331 * t73;
t34 = -t37 + t365;
t374 = t34 + t228;
t283 = t355 * t212;
t237 = -t215 * t210 + t283;
t293 = qJD(6) * t215;
t366 = qJD(6) * t283 - t210 * t293;
t333 = t237 * t139 - t366;
t156 = t355 * t210 + t215 * t212;
t148 = t156 * qJD(6);
t332 = -t156 * t139 + t148;
t145 = t235 * qJD(3);
t155 = -t211 * t216 + t275;
t135 = t271 * t216;
t127 = t211 * t135;
t297 = qJD(1) * t218;
t136 = -qJ(4) * t297 + t218 * t168;
t130 = qJD(3) * pkin(3) + t136;
t80 = t331 * t130 - t127;
t65 = -qJD(3) * pkin(4) + qJD(5) - t80;
t226 = t65 * t145 + t34 * t155 + t367;
t222 = qJD(1) ^ 2;
t372 = -t222 * qJ(2) - t367;
t205 = qJDD(1) * qJ(2);
t371 = t143 * t369;
t370 = t237 * t235;
t262 = g(1) * t219 + g(2) * t217;
t238 = t262 * t192;
t208 = t216 ^ 2;
t209 = t218 ^ 2;
t301 = t208 + t209;
t273 = t301 * t167;
t198 = t216 * pkin(3);
t213 = -qJ(4) - pkin(7);
t368 = t219 * t198 + t217 * t213;
t206 = qJD(1) * qJD(2);
t287 = 0.2e1 * t206;
t364 = 0.2e1 * t205 + t287 - t262;
t272 = qJDD(1) * t331;
t289 = t216 * qJDD(1);
t257 = -t211 * t289 + t218 * t272;
t109 = -qJD(1) * t145 - t257;
t90 = -qJDD(3) * t212 - t210 * t109;
t91 = qJDD(3) * t210 - t109 * t212;
t17 = -qJD(6) * t236 + t117 * t293 + t215 * t90 - t355 * t91;
t363 = -t17 * t237 - t332 * t58;
t285 = qJD(3) * t263 + t211 * t288 + t216 * t272;
t108 = t211 * t280 - t285;
t105 = -qJDD(6) + t108;
t362 = -t156 * t105 - t137 * t333;
t138 = t139 ^ 2;
t328 = t108 * t210;
t361 = -t138 * t212 + t328;
t141 = -qJD(3) * t275 + t211 * t295;
t360 = -t141 * t369 + t235 * t90;
t359 = -t145 * t369 + t155 * t90;
t276 = t331 * t135;
t81 = t211 * t130 + t276;
t66 = qJD(3) * qJ(5) + t81;
t159 = pkin(3) * t298 + qJD(1) * qJ(2) + qJD(4);
t82 = -pkin(4) * t139 - qJ(5) * t143 + t159;
t35 = -t210 * t66 + t212 * t82;
t21 = -pkin(5) * t139 - pkin(8) * t117 + t35;
t36 = t210 * t82 + t212 * t66;
t24 = pkin(8) * t369 + t36;
t239 = -t355 * t21 + t215 * t24;
t279 = t218 * t292;
t122 = qJDD(4) + t205 + t206 + (t279 + t289) * pkin(3);
t28 = -pkin(4) * t108 + qJ(5) * t109 - qJD(5) * t143 + t122;
t38 = t211 * t73 + t331 * t89;
t32 = qJDD(3) * qJ(5) + qJD(3) * qJD(5) + t38;
t12 = -t210 * t32 + t212 * t28;
t6 = -pkin(5) * t108 - pkin(8) * t91 + t12;
t13 = t210 * t28 + t212 * t32;
t9 = -pkin(8) * t90 + t13;
t1 = -qJD(6) * t239 + t215 * t6 + t355 * t9;
t358 = t143 ^ 2;
t356 = pkin(5) * t90;
t354 = pkin(3) * t218;
t353 = pkin(5) * t210;
t352 = pkin(8) * t212;
t350 = g(3) * t194;
t349 = g(3) * t216;
t348 = t212 * pkin(5);
t347 = t58 * t59;
t180 = pkin(3) * t211 + qJ(5);
t346 = pkin(8) + t180;
t150 = t346 * t210;
t151 = t346 * t212;
t103 = -t355 * t150 - t215 * t151;
t323 = t139 * t212;
t93 = t331 * t136 - t127;
t94 = pkin(3) * t297 + pkin(4) * t143 - qJ(5) * t139;
t39 = -t210 * t93 + t212 * t94;
t23 = pkin(5) * t143 - pkin(8) * t323 + t39;
t324 = t139 * t210;
t40 = t210 * t94 + t212 * t93;
t27 = -pkin(8) * t324 + t40;
t345 = qJD(5) * t237 + qJD(6) * t103 - t215 * t23 - t355 * t27;
t104 = -t215 * t150 + t355 * t151;
t344 = -qJD(5) * t156 - qJD(6) * t104 + t215 * t27 - t355 * t23;
t172 = pkin(3) * t294 + qJD(2);
t54 = -pkin(4) * t141 - qJ(5) * t145 - qJD(5) * t155 + t172;
t310 = qJ(4) - t220;
t274 = t310 * t218;
t133 = -qJD(3) * t274 - t216 * qJD(4);
t231 = -t218 * qJD(4) + t295 * t310;
t88 = t331 * t133 + t211 * t231;
t30 = t210 * t54 + t212 * t88;
t343 = t143 * t59;
t340 = t210 * t91;
t339 = t58 * t143;
t337 = t90 * t212;
t336 = t91 * t212;
t185 = qJ(2) + t198;
t106 = -pkin(4) * t235 - qJ(5) * t155 + t185;
t160 = t310 * t216;
t114 = -t331 * t160 - t211 * t274;
t49 = t210 * t106 + t212 * t114;
t335 = t237 * qJD(1) - qJD(6) * t370 - t141 * t156;
t95 = t156 * t235;
t334 = t156 * qJD(1) - qJD(6) * t95 + t141 * t237;
t330 = pkin(1) * qJDD(1);
t327 = t117 * t143;
t326 = t117 * t210;
t325 = t139 * t143;
t322 = t145 * t210;
t321 = t155 * t210;
t319 = t192 * t217;
t318 = t192 * t219;
t202 = pkin(10) + qJ(6);
t193 = cos(t202);
t317 = t193 * t217;
t316 = t193 * t219;
t315 = t194 * t217;
t314 = t194 * t219;
t102 = t212 * t108;
t92 = t136 * t211 + t276;
t311 = t92 * qJD(3);
t309 = -qJD(5) + t65;
t308 = -t210 * t138 - t102;
t307 = t145 * qJD(3) + t155 * qJDD(3);
t306 = g(1) * t314 + g(2) * t315;
t305 = (t287 + t205) * qJ(2);
t304 = t219 * pkin(1) + t217 * qJ(2);
t302 = t208 - t209;
t221 = qJD(3) ^ 2;
t300 = -t221 - t222;
t299 = qJD(1) * t159;
t290 = qJDD(3) * t216;
t286 = t218 * t222 * t216;
t284 = t217 * t198 + t304;
t197 = t219 * qJ(2);
t278 = -t217 * pkin(1) + t197;
t29 = -t210 * t88 + t212 * t54;
t277 = t215 * t91 + t355 * t90;
t48 = t212 * t106 - t114 * t210;
t87 = t133 * t211 - t331 * t231;
t113 = -t160 * t211 + t331 * t274;
t269 = t301 * qJDD(1);
t268 = qJDD(2) - t330;
t18 = qJD(6) * t58 + t277;
t267 = -t156 * t18 - t333 * t59;
t265 = t216 * t279;
t264 = -t237 * t105 - t332 * t137;
t184 = -t331 * pkin(3) - pkin(4);
t259 = pkin(4) * t194 + qJ(5) * t192;
t258 = pkin(4) * t192 - qJ(5) * t194;
t256 = -t12 * t212 - t13 * t210;
t255 = -t12 * t235 - t35 * t141;
t254 = t13 * t235 + t36 * t141;
t252 = -t210 * t35 + t212 * t36;
t251 = -t117 * t141 - t235 * t91;
t250 = t145 * t117 + t155 * t91;
t249 = t108 * t235 + t139 * t141;
t248 = t108 * t155 + t139 * t145;
t247 = -t109 * t155 + t143 * t145;
t183 = pkin(4) + t348;
t214 = -pkin(8) - qJ(5);
t246 = t183 * t194 - t192 * t214;
t245 = t183 * t192 + t194 * t214;
t244 = t212 * t369;
t243 = t278 + t368;
t242 = qJD(3) * t141 + qJDD(3) * t235;
t241 = -t219 * t213 + t284;
t33 = -pkin(5) * t235 - t155 * t352 + t48;
t41 = -pkin(8) * t321 + t49;
t14 = -t215 * t41 + t355 * t33;
t8 = t215 * t21 + t355 * t24;
t15 = t215 * t33 + t355 * t41;
t234 = g(1) * t319 - g(2) * t318 + t350;
t233 = 0.2e1 * qJ(2) * t292 + qJDD(3) * t220;
t230 = -g(1) * t315 + g(2) * t314 + t351 + t37;
t229 = t244 - t326;
t2 = -qJD(6) * t8 - t215 * t9 + t355 * t6;
t225 = -t141 * t81 + t145 * t80 + t155 * t37 - t235 * t38 - t367;
t224 = -t230 + t365;
t223 = -t220 * t221 + t364;
t195 = qJDD(3) * t218;
t191 = sin(t202);
t178 = t217 * t354;
t161 = t184 - t348;
t126 = -t191 * t217 + t192 * t316;
t125 = t191 * t318 + t317;
t124 = t191 * t219 + t192 * t317;
t123 = -t191 * t319 + t316;
t98 = t237 * t155;
t96 = t156 * t155;
t75 = t210 * t90;
t74 = pkin(5) * t321 + t113;
t51 = pkin(5) * t324 + t92;
t50 = pkin(5) * t322 + t87;
t46 = -pkin(5) * t369 + t65;
t45 = t145 * t156 + t155 * t366;
t43 = -t145 * t237 + t148 * t155;
t22 = -pkin(8) * t322 + t30;
t20 = -pkin(5) * t141 - t145 * t352 + t29;
t19 = t34 + t356;
t4 = -t15 * qJD(6) + t355 * t20 - t215 * t22;
t3 = t14 * qJD(6) + t215 * t20 + t355 * t22;
t5 = [0, 0, 0, 0, 0, qJDD(1), t367, t262, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t367 - 0.2e1 * t330, t364, -pkin(1) * t268 - g(1) * t278 - g(2) * t304 + t305, qJDD(1) * t209 - 0.2e1 * t265, -0.2e1 * t216 * t288 + 0.2e1 * t292 * t302, -t216 * t221 + t195, qJDD(1) * t208 + 0.2e1 * t265, -t218 * t221 - t290, 0, t216 * t223 + t218 * t233, -t216 * t233 + t218 * t223, -t220 * t269 - t273 + t367, -g(1) * (t220 * t217 + t197) - g(2) * (pkin(7) * t219 + t304) + t220 * t273 + t305, t247, -t109 * t235 + t141 * t143 + t248, t307, t249, t242, 0, -t87 * qJD(3) - t113 * qJDD(3) - t185 * t108 - t122 * t235 - t172 * t139 - t159 * t141 - t238, -qJD(3) * t88 - qJDD(3) * t114 - t109 * t185 + t122 * t155 + t143 * t172 + t145 * t159 - t306, t108 * t114 - t109 * t113 + t139 * t88 + t143 * t87 - t225, -g(1) * t243 - g(2) * t241 - t37 * t113 + t38 * t114 + t122 * t185 + t159 * t172 - t80 * t87 + t81 * t88, t250 * t212 (-t337 - t340) * t155 + t229 * t145, -t212 * t248 + t251, t359 * t210, t210 * t248 + t360, t249, -t48 * t108 + t113 * t90 - t29 * t139 + t210 * t226 - t212 * t238 - t369 * t87 + t255, t49 * t108 + t113 * t91 + t87 * t117 + t30 * t139 + t210 * t238 + t212 * t226 + t254, t30 * t369 - t49 * t90 - t29 * t117 - t48 * t91 + t256 * t155 - (t210 * t36 + t212 * t35) * t145 + t306, t13 * t49 + t36 * t30 + t12 * t48 + t35 * t29 + t34 * t113 + t65 * t87 - g(1) * (t219 * t258 + t243) - g(2) * (t217 * t258 + t241) -t17 * t98 - t43 * t58, t17 * t96 - t18 * t98 - t43 * t59 - t45 * t58, -t105 * t98 - t137 * t43 - t141 * t58 + t17 * t235, t18 * t96 - t45 * t59, t105 * t96 - t137 * t45 - t141 * t59 + t18 * t235, t105 * t235 - t137 * t141, -g(1) * t126 - g(2) * t124 - t105 * t14 + t137 * t4 + t141 * t239 + t18 * t74 + t19 * t96 - t2 * t235 + t45 * t46 - t50 * t59, g(1) * t125 - g(2) * t123 + t1 * t235 + t105 * t15 - t137 * t3 + t141 * t8 - t17 * t74 + t19 * t98 - t43 * t46 + t50 * t58, -t1 * t96 + t14 * t17 - t15 * t18 - t2 * t98 - t239 * t43 + t3 * t59 - t4 * t58 - t45 * t8 + t306, t1 * t15 + t8 * t3 + t2 * t14 - t239 * t4 + t19 * t74 + t46 * t50 - g(1) * (t197 + t368) - g(2) * t284 + (-g(1) * t245 - g(2) * (-t213 + t353)) * t219 + (-g(1) * (-pkin(1) - t353) - g(2) * t245) * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t222, t372 + t268, 0, 0, 0, 0, 0, 0, t216 * t300 + t195, t218 * t300 - t290, -t269, t273 + t372, 0, 0, 0, 0, 0, 0, qJD(1) * t139 + t307, -qJD(1) * t143 + t242, -t247 - t249, t225 - t299, 0, 0, 0, 0, 0, 0, -t235 * t328 - (-qJD(1) * t212 + t141 * t210) * t139 - t359, -t235 * t102 - (qJD(1) * t210 + t141 * t212) * t139 - t250 (qJD(1) * t117 + t360) * t212 + (-qJD(1) * t369 + t251) * t210 (-qJD(1) * t35 - t254) * t212 + (-qJD(1) * t36 - t255) * t210 - t226, 0, 0, 0, 0, 0, 0, -t95 * t105 - t137 * t335 + t145 * t59 - t155 * t18, -t105 * t370 + t137 * t334 - t145 * t58 + t155 * t17, t95 * t17 + t18 * t370 - t334 * t59 + t335 * t58, -t1 * t370 - t46 * t145 - t19 * t155 + t2 * t95 + t239 * t335 - t334 * t8 - t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t286, -t302 * t222, t288, -t286, -t289, qJDD(3), t218 * t372 + t157 + t349, g(3) * t218 + (-t167 - t372) * t216, 0, 0, -t325, -t138 + t358, t257, t325 (t143 + t281) * qJD(3) - t285, qJDD(3), t311 - t159 * t143 + (qJDD(3) * t331 + t139 * t297) * pkin(3) + t230, t93 * qJD(3) - t159 * t139 + (-qJDD(3) * t211 - t143 * t297) * pkin(3) + t234 - t38 (t81 - t92) * t143 - (-t80 + t93) * t139 + (t108 * t211 + t109 * t331) * pkin(3), t80 * t92 - t81 * t93 + (t331 * t37 + t349 + t211 * t38 + (-t367 - t299) * t218) * pkin(3), -t117 * t323 + t340, -t139 * t229 + t336 - t75, -t327 - t361, t324 * t369 - t337, t308 - t371, t325, t180 * t328 - t92 * t132 - t35 * t143 + t184 * t90 - (t210 * t309 - t39) * t139 + (t311 - t374) * t212, t180 * t102 - t92 * t117 + t36 * t143 + t184 * t91 - (t212 * t309 + t40) * t139 + t374 * t210, t39 * t117 + t40 * t132 + (-qJD(5) * t132 + t35 * t139 - t180 * t90 + t13 + (qJD(5) * t212 - t40) * qJD(3)) * t212 + (qJD(5) * t117 + t139 * t36 + t180 * t91 - t12) * t210 - t234, t34 * t184 - t36 * t40 - t35 * t39 - t65 * t92 - g(1) * (t217 * t259 + t178) - g(3) * (-t198 - t258) + (-t12 * t210 + t13 * t212) * t180 + t252 * qJD(5) - (-t259 - t354) * t200, -t17 * t156 - t333 * t58, t267 + t363, -t339 + t362, -t18 * t237 - t332 * t59, t264 - t343, -t137 * t143, -t103 * t105 + t137 * t344 + t143 * t239 + t161 * t18 - t19 * t237 - t193 * t228 + t332 * t46 + t51 * t59, t104 * t105 - t137 * t345 + t8 * t143 + t19 * t156 - t161 * t17 + t191 * t228 - t333 * t46 - t51 * t58, t1 * t237 + t103 * t17 - t104 * t18 - t2 * t156 - t239 * t333 - t332 * t8 - t344 * t58 + t345 * t59 - t234, t1 * t104 + t2 * t103 + t19 * t161 - t46 * t51 - g(1) * (t217 * t246 + t178) - g(3) * (-t198 - t245) + t345 * t8 - t344 * t239 - (-t246 - t354) * t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t143 - t281) * qJD(3) + t285, 0.2e1 * t139 * qJD(3) + t257, -t138 - t358, -t139 * t81 + t143 * t80 + t122 - t262, 0, 0, 0, 0, 0, 0, t308 + t371, -t327 + t361, -t336 - t75 - (t244 + t326) * t139, -t139 * t252 - t65 * t143 - t256 - t262, 0, 0, 0, 0, 0, 0, t264 + t343, -t339 - t362, t267 - t363, t1 * t156 - t46 * t143 + t2 * t237 + t239 * t332 - t333 * t8 - t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117 * t139 + t90, -t139 * t369 + t91, -t117 ^ 2 - t369 ^ 2, t117 * t35 - t36 * t369 + t224, 0, 0, 0, 0, 0, 0, t58 * t137 + t18, -t17 + t376, -t375 - t377, -t239 * t58 - t59 * t8 + t224 + t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t347, t375 - t377, -t17 - t376, t347, -t277 + (-qJD(6) + t137) * t58, -t105, -g(1) * t123 - g(2) * t125 + t8 * t137 + t191 * t350 - t46 * t58 + t2, g(1) * t124 - g(2) * t126 - t137 * t239 + t193 * t350 - t46 * t59 - t1, 0, 0;];
tau_reg  = t5;
