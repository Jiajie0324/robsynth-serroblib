% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:10
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:09:08
% EndTime: 2019-05-05 17:09:29
% DurationCPUTime: 20.13s
% Computational Cost: add. (97188->726), mult. (222727->1084), div. (0->0), fcn. (153348->10), ass. (0->484)
t781 = sin(pkin(9));
t783 = cos(pkin(9));
t785 = sin(qJ(3));
t788 = cos(qJ(3));
t741 = (t781 * t788 + t783 * t785) * qJD(1);
t834 = qJD(1) * t788;
t743 = -qJD(1) * t781 * t785 + t783 * t834;
t848 = t743 * t741;
t886 = qJDD(3) - t848;
t888 = t781 * t886;
t887 = t783 * t886;
t827 = qJD(1) * qJD(3);
t811 = t788 * t827;
t825 = qJDD(1) * t785;
t749 = -t811 - t825;
t812 = t785 * t827;
t823 = qJDD(1) * t788;
t750 = -t812 + t823;
t697 = t749 * t781 + t750 * t783;
t780 = sin(pkin(10));
t782 = cos(pkin(10));
t684 = t780 * qJDD(3) + t782 * t697;
t708 = -t782 * qJD(3) + t743 * t780;
t851 = t741 * t708;
t622 = -t684 - t851;
t833 = qJD(3) * t741;
t667 = t697 - t833;
t621 = -t851 + t684;
t711 = qJD(3) * t780 + t743 * t782;
t662 = t711 * t708;
t696 = -t783 * t749 + t750 * t781;
t879 = -t662 + t696;
t885 = t780 * t879;
t884 = t782 * t879;
t784 = sin(qJ(6));
t787 = cos(qJ(6));
t653 = t787 * t708 + t711 * t784;
t655 = -t708 * t784 + t711 * t787;
t601 = t655 * t653;
t802 = qJDD(6) + t696;
t881 = -t601 + t802;
t883 = t784 * t881;
t882 = t787 * t881;
t732 = qJD(6) + t741;
t634 = t732 * t653;
t683 = t782 * qJDD(3) - t697 * t780;
t796 = qJD(6) * t653 - t683 * t784 - t684 * t787;
t880 = -t634 - t796;
t832 = qJD(3) * t743;
t664 = t696 + t832;
t791 = qJD(1) ^ 2;
t786 = sin(qJ(1));
t789 = cos(qJ(1));
t759 = t786 * g(1) - t789 * g(2);
t803 = qJDD(2) - t759;
t797 = -t791 * qJ(2) + t803;
t874 = pkin(7) + pkin(1);
t794 = -qJDD(1) * t874 + t797;
t701 = -t788 * g(3) + t785 * t794;
t799 = qJD(3) * pkin(3) - qJ(4) * t834;
t777 = t785 ^ 2;
t841 = t777 * t791;
t650 = -pkin(3) * t841 + t749 * qJ(4) - qJD(3) * t799 + t701;
t793 = t788 * t794;
t837 = t788 * t791;
t792 = t793 - t750 * qJ(4) + qJDD(3) * pkin(3) + (-pkin(3) * t837 - qJ(4) * t827 + g(3)) * t785;
t583 = -0.2e1 * qJD(4) * t741 + t783 * t650 + t781 * t792;
t809 = -t787 * t683 + t784 * t684;
t534 = (qJD(6) - t732) * t655 + t809;
t760 = t789 * g(1) + t786 * g(2);
t775 = qJDD(1) * qJ(2);
t800 = t760 - t775;
t878 = -t749 * pkin(3) - (qJ(4) * t777 + t874) * t791 + t799 * t834 + qJDD(4) - t800;
t651 = t653 ^ 2;
t652 = t655 ^ 2;
t877 = t708 ^ 2;
t707 = t711 ^ 2;
t731 = t732 ^ 2;
t876 = t741 ^ 2;
t740 = t743 ^ 2;
t875 = 0.2e1 * qJD(4);
t873 = pkin(4) * t781;
t872 = qJDD(1) * pkin(1);
t685 = pkin(4) * t741 - qJ(5) * t743;
t790 = qJD(3) ^ 2;
t550 = -pkin(4) * t790 + qJDD(3) * qJ(5) - t685 * t741 + t583;
t826 = qJD(2) * qJD(1);
t773 = 0.2e1 * t826;
t564 = t664 * pkin(4) - qJ(5) * t667 + t773 + t878;
t496 = 0.2e1 * qJD(5) * t711 + t780 * t550 - t782 * t564;
t462 = t879 * pkin(5) + pkin(8) * t622 - t496;
t497 = -0.2e1 * qJD(5) * t708 + t782 * t550 + t780 * t564;
t669 = pkin(5) * t741 - pkin(8) * t711;
t468 = -pkin(5) * t877 + pkin(8) * t683 - t669 * t741 + t497;
t414 = -t787 * t462 + t468 * t784;
t415 = t784 * t462 + t787 * t468;
t380 = -t414 * t787 + t415 * t784;
t871 = t380 * t780;
t870 = t380 * t782;
t810 = t781 * t650 - t783 * t792;
t549 = qJDD(5) - t790 * qJ(5) - qJDD(3) * pkin(4) + (t875 + t685) * t743 + t810;
t503 = -t683 * pkin(5) - pkin(8) * t877 + t711 * t669 + t549;
t869 = t503 * t784;
t868 = t503 * t787;
t582 = t743 * t875 + t810;
t508 = -t582 * t783 + t583 * t781;
t867 = t508 * t785;
t866 = t508 * t788;
t865 = t549 * t780;
t864 = t549 * t782;
t573 = t601 + t802;
t863 = t573 * t784;
t862 = t573 * t787;
t625 = t662 + t696;
t861 = t625 * t780;
t860 = t625 * t782;
t821 = -0.2e1 * t826;
t656 = t821 - t878;
t859 = t656 * t781;
t858 = t656 * t783;
t688 = qJDD(3) + t848;
t857 = t688 * t781;
t856 = t688 * t783;
t855 = t696 * t781;
t854 = t711 * t741;
t853 = t732 * t784;
t852 = t732 * t787;
t850 = t741 * t780;
t849 = t741 * t782;
t778 = t788 ^ 2;
t835 = t777 + t778;
t752 = t835 * qJDD(1);
t847 = t752 * t786;
t846 = t752 * t789;
t814 = t785 * t837;
t757 = qJDD(3) + t814;
t845 = t757 * t785;
t844 = t757 * t788;
t758 = qJDD(3) - t814;
t843 = t758 * t785;
t842 = t758 * t788;
t840 = t778 * t791;
t721 = t791 * t874 + t800 + t821;
t839 = t785 * t721;
t838 = t788 * t721;
t831 = qJD(3) * t781;
t830 = qJD(3) * t783;
t824 = qJDD(1) * t786;
t822 = qJDD(1) * t789;
t820 = t781 * t601;
t819 = t783 * t601;
t818 = t781 * t662;
t817 = t783 * t662;
t816 = t786 * t848;
t815 = t789 * t848;
t813 = -pkin(4) * t783 - pkin(3);
t381 = t414 * t784 + t787 * t415;
t432 = t496 * t780 + t782 * t497;
t509 = t582 * t781 + t783 * t583;
t727 = -t791 * pkin(1) + t773 - t800;
t733 = -t797 + t872;
t676 = t789 * t727 - t733 * t786;
t712 = -t759 * t786 - t789 * t760;
t808 = t786 * t814;
t807 = t789 * t814;
t753 = -t786 * t791 + t822;
t805 = pkin(6) * t753 + g(3) * t786;
t754 = t789 * t791 + t824;
t804 = -pkin(6) * t754 + g(3) * t789;
t431 = -t496 * t782 + t497 * t780;
t700 = t785 * g(3) + t793;
t640 = t788 * t700 + t785 * t701;
t641 = -t700 * t785 + t701 * t788;
t673 = t727 * t786 + t733 * t789;
t710 = t759 * t789 - t760 * t786;
t618 = -t683 - t854;
t798 = -t696 + t832;
t771 = t789 * qJDD(3);
t770 = t786 * qJDD(3);
t765 = -t790 - t840;
t764 = t790 - t840;
t763 = -t790 - t841;
t762 = -t790 + t841;
t756 = (-t777 + t778) * t791;
t755 = t835 * t791;
t751 = -0.2e1 * t812 + t823;
t748 = 0.2e1 * t811 + t825;
t746 = t835 * t827;
t726 = -t740 - t790;
t725 = -t740 + t790;
t724 = t876 - t790;
t723 = -t750 * t785 - t778 * t827;
t722 = -t749 * t788 - t777 * t827;
t718 = -t765 * t785 - t844;
t717 = t763 * t788 - t843;
t716 = t765 * t788 - t845;
t715 = -t764 * t788 - t843;
t714 = t763 * t785 + t842;
t713 = -t762 * t785 - t844;
t705 = -t755 * t789 - t847;
t704 = -t755 * t786 + t846;
t698 = t748 * t785 - t751 * t788;
t692 = t740 - t876;
t691 = t783 * t696;
t686 = -t876 - t790;
t680 = (-t741 * t783 + t743 * t781) * qJD(3);
t679 = (-t741 * t781 - t743 * t783) * qJD(3);
t678 = t716 * t786 + t751 * t789;
t677 = t714 * t786 + t748 * t789;
t675 = -t716 * t789 + t751 * t786;
t674 = -t714 * t789 + t748 * t786;
t672 = -t707 + t876;
t671 = -t876 + t877;
t668 = t697 + t833;
t663 = -t876 - t740;
t661 = -t707 + t877;
t660 = t697 * t783 - t743 * t831;
t659 = t697 * t781 + t743 * t830;
t658 = t741 * t830 + t855;
t657 = t741 * t831 - t691;
t649 = -t707 - t876;
t648 = -t726 * t781 - t856;
t647 = -t725 * t781 + t887;
t646 = t724 * t783 - t857;
t645 = t726 * t783 - t857;
t644 = t725 * t783 + t888;
t643 = t724 * t781 + t856;
t637 = -t876 - t877;
t636 = -pkin(2) * t755 - t641;
t633 = -t652 + t731;
t632 = t651 - t731;
t631 = t707 + t877;
t630 = t686 * t783 - t888;
t629 = t686 * t781 + t887;
t628 = pkin(2) * t716 - qJ(2) * t718 - t701;
t627 = pkin(2) * t714 - qJ(2) * t717 + t700;
t619 = t683 - t854;
t617 = t684 * t782 - t711 * t850;
t616 = t684 * t780 + t711 * t849;
t615 = -t683 * t780 + t708 * t849;
t614 = t683 * t782 + t708 * t850;
t613 = (-t708 * t782 + t711 * t780) * t741;
t612 = (-t708 * t780 - t711 * t782) * t741;
t611 = pkin(2) * t748 - t717 * t874 - t838;
t610 = pkin(2) * t751 - t718 * t874 + t839;
t609 = -t679 * t788 - t680 * t785;
t608 = t640 * t786 - t721 * t789;
t607 = -t640 * t789 - t721 * t786;
t606 = -t652 - t731;
t605 = t668 * t781 + t783 * t798;
t604 = -t664 * t783 - t667 * t781;
t603 = -t668 * t783 + t781 * t798;
t602 = -t664 * t781 + t667 * t783;
t600 = -t652 + t651;
t599 = -t659 * t788 - t660 * t785;
t598 = -t657 * t788 - t658 * t785;
t597 = -qJ(4) * t645 - t858;
t596 = t613 * t783 + t855;
t595 = t613 * t781 - t691;
t594 = pkin(2) * t640 - qJ(2) * t641;
t593 = -t645 * t785 + t648 * t788;
t592 = t645 * t788 + t648 * t785;
t591 = -t644 * t788 - t647 * t785;
t590 = -t643 * t788 - t646 * t785;
t589 = t671 * t782 - t861;
t588 = -t672 * t780 + t884;
t587 = t671 * t780 + t860;
t586 = t672 * t782 + t885;
t585 = -t731 - t651;
t584 = -qJ(4) * t629 - t859;
t581 = t617 * t783 + t818;
t580 = t615 * t783 - t818;
t579 = t617 * t781 - t817;
t578 = t615 * t781 + t817;
t576 = -qJD(6) * t655 - t809;
t571 = -t649 * t780 - t860;
t570 = t649 * t782 - t861;
t569 = -pkin(2) * t721 - t641 * t874;
t568 = (-t653 * t787 + t655 * t784) * t732;
t567 = (-t653 * t784 - t655 * t787) * t732;
t566 = t637 * t782 - t885;
t565 = t637 * t780 + t884;
t563 = -t629 * t785 + t630 * t788;
t562 = t629 * t788 + t630 * t785;
t559 = -t618 * t782 - t622 * t780;
t558 = t619 * t782 - t621 * t780;
t557 = -t618 * t780 + t622 * t782;
t556 = t619 * t780 + t621 * t782;
t555 = -t651 - t652;
t554 = -pkin(3) * t667 + qJ(4) * t648 - t859;
t553 = t592 * t786 + t667 * t789;
t552 = -t592 * t789 + t667 * t786;
t551 = -pkin(3) * t664 + qJ(4) * t630 + t858;
t547 = t562 * t786 + t664 * t789;
t546 = -t603 * t785 + t605 * t788;
t545 = -t562 * t789 + t664 * t786;
t544 = t603 * t788 + t605 * t785;
t543 = -t602 * t788 - t604 * t785;
t542 = t589 * t783 - t618 * t781;
t541 = t588 * t783 - t622 * t781;
t540 = t589 * t781 + t618 * t783;
t539 = t588 * t781 + t622 * t783;
t538 = -t634 + t796;
t533 = (qJD(6) + t732) * t655 + t809;
t532 = -t655 * t853 - t787 * t796;
t531 = t655 * t852 - t784 * t796;
t530 = -t576 * t784 + t653 * t852;
t529 = t576 * t787 + t653 * t853;
t528 = t632 * t787 - t863;
t527 = -t633 * t784 + t882;
t526 = t632 * t784 + t862;
t525 = t633 * t787 + t883;
t524 = t558 * t783 - t661 * t781;
t523 = t558 * t781 + t661 * t783;
t522 = t571 * t783 + t621 * t781;
t521 = t571 * t781 - t621 * t783;
t520 = t566 * t783 - t619 * t781;
t519 = t566 * t781 + t619 * t783;
t518 = -t606 * t784 - t862;
t517 = t606 * t787 - t863;
t516 = t559 * t783 - t631 * t781;
t515 = t559 * t781 + t631 * t783;
t514 = -t595 * t788 - t596 * t785;
t513 = t544 * t786 + t663 * t789;
t512 = -t544 * t789 + t663 * t786;
t511 = t585 * t787 - t883;
t510 = t585 * t784 + t882;
t507 = -t579 * t788 - t581 * t785;
t506 = -t578 * t788 - t580 * t785;
t505 = -t567 * t780 + t568 * t782;
t504 = t567 * t782 + t568 * t780;
t502 = pkin(3) * t656 + qJ(4) * t509;
t501 = -qJ(5) * t570 + t864;
t500 = t505 * t783 + t781 * t802;
t499 = t505 * t781 - t783 * t802;
t498 = -qJ(5) * t565 + t865;
t494 = -qJ(4) * t603 - t508;
t493 = -t540 * t788 - t542 * t785;
t492 = -t539 * t788 - t541 * t785;
t491 = -t534 * t787 - t538 * t784;
t490 = -t533 * t787 - t784 * t880;
t489 = -t534 * t784 + t538 * t787;
t488 = -t533 * t784 + t787 * t880;
t487 = -pkin(3) * t663 + qJ(4) * t605 + t509;
t486 = -t531 * t780 + t532 * t782;
t485 = -t529 * t780 + t530 * t782;
t484 = t531 * t782 + t532 * t780;
t483 = t529 * t782 + t530 * t780;
t482 = -t523 * t788 - t524 * t785;
t481 = -t526 * t780 + t528 * t782;
t480 = -t525 * t780 + t527 * t782;
t479 = t526 * t782 + t528 * t780;
t478 = t525 * t782 + t527 * t780;
t477 = pkin(2) * t592 + pkin(3) * t645 - qJ(2) * t593 - t583;
t476 = -t521 * t785 + t522 * t788;
t475 = t521 * t788 + t522 * t785;
t474 = -t519 * t785 + t520 * t788;
t473 = t519 * t788 + t520 * t785;
t472 = -t517 * t780 + t518 * t782;
t471 = t517 * t782 + t518 * t780;
t470 = -t515 * t785 + t516 * t788;
t469 = t515 * t788 + t516 * t785;
t466 = -pkin(4) * t570 + t497;
t465 = pkin(2) * t544 + pkin(3) * t603 - qJ(2) * t546;
t464 = pkin(2) * t562 + pkin(3) * t629 - qJ(2) * t563 - t582;
t463 = -pkin(4) * t565 + t496;
t459 = -t510 * t780 + t511 * t782;
t458 = t510 * t782 + t511 * t780;
t457 = t486 * t783 + t820;
t456 = t485 * t783 - t820;
t455 = t486 * t781 - t819;
t454 = t485 * t781 + t819;
t453 = -pkin(8) * t517 + t868;
t452 = t509 * t788 - t867;
t451 = t509 * t785 + t866;
t450 = pkin(2) * t667 - t788 * t554 - t593 * t874 - t785 * t597;
t449 = -pkin(8) * t510 + t869;
t448 = t475 * t786 + t570 * t789;
t447 = -t475 * t789 + t570 * t786;
t446 = t451 * t786 - t656 * t789;
t445 = -t451 * t789 - t656 * t786;
t444 = t473 * t786 + t565 * t789;
t443 = -t473 * t789 + t565 * t786;
t442 = t469 * t786 + t557 * t789;
t441 = -t469 * t789 + t557 * t786;
t440 = t481 * t783 - t534 * t781;
t439 = t480 * t783 - t538 * t781;
t438 = t481 * t781 + t534 * t783;
t437 = t480 * t781 + t538 * t783;
t436 = pkin(2) * t664 - t788 * t551 - t563 * t874 - t785 * t584;
t435 = -t499 * t788 - t500 * t785;
t434 = t472 * t783 + t781 * t880;
t433 = t472 * t781 - t783 * t880;
t430 = t459 * t783 + t533 * t781;
t429 = t459 * t781 - t533 * t783;
t428 = -pkin(5) * t880 + pkin(8) * t518 + t869;
t427 = -pkin(5) * t533 + pkin(8) * t511 - t868;
t426 = -t489 * t780 + t491 * t782;
t425 = -t488 * t780 + t490 * t782;
t424 = t489 * t782 + t491 * t780;
t423 = t488 * t782 + t490 * t780;
t422 = -qJ(5) * t557 - t431;
t421 = t432 * t783 + t549 * t781;
t420 = t432 * t781 - t549 * t783;
t419 = t425 * t783 - t600 * t781;
t418 = t425 * t781 + t600 * t783;
t417 = t426 * t783 + t555 * t781;
t416 = t426 * t781 - t555 * t783;
t412 = -qJ(4) * t521 - t466 * t781 + t501 * t783;
t411 = -qJ(4) * t519 - t463 * t781 + t498 * t783;
t410 = -t455 * t788 - t457 * t785;
t409 = -t454 * t788 - t456 * t785;
t408 = -pkin(3) * t570 + qJ(4) * t522 + t466 * t783 + t501 * t781;
t407 = -pkin(3) * t565 + qJ(4) * t520 + t463 * t783 + t498 * t781;
t406 = pkin(2) * t663 - t788 * t487 - t785 * t494 - t546 * t874;
t405 = -pkin(4) * t424 - pkin(5) * t489;
t404 = -t438 * t788 - t440 * t785;
t403 = -t437 * t788 - t439 * t785;
t402 = -qJ(4) * t515 + t422 * t783 + t557 * t873;
t401 = -t433 * t785 + t434 * t788;
t400 = t433 * t788 + t434 * t785;
t399 = pkin(2) * t451 + pkin(3) * t508 - qJ(2) * t452;
t398 = qJ(4) * t516 + t781 * t422 + t557 * t813;
t397 = -t429 * t785 + t430 * t788;
t396 = t429 * t788 + t430 * t785;
t395 = pkin(2) * t475 + pkin(3) * t521 - pkin(4) * t621 - qJ(2) * t476 + qJ(5) * t571 + t865;
t394 = pkin(2) * t473 + pkin(3) * t519 + pkin(4) * t619 - qJ(2) * t474 + qJ(5) * t566 - t864;
t393 = -pkin(4) * t471 - pkin(5) * t517 + t415;
t392 = -pkin(2) * t656 + qJ(4) * t867 - t452 * t874 - t788 * t502;
t391 = -qJ(5) * t471 - t428 * t780 + t453 * t782;
t390 = -pkin(4) * t458 - pkin(5) * t510 + t414;
t389 = t400 * t786 + t471 * t789;
t388 = -t400 * t789 + t471 * t786;
t387 = -t420 * t785 + t421 * t788;
t386 = t420 * t788 + t421 * t785;
t385 = -t418 * t788 - t419 * t785;
t384 = -qJ(5) * t458 - t427 * t780 + t449 * t782;
t383 = -t416 * t785 + t417 * t788;
t382 = t416 * t788 + t417 * t785;
t379 = t396 * t786 + t458 * t789;
t378 = -t396 * t789 + t458 * t786;
t377 = pkin(2) * t469 + pkin(3) * t515 + pkin(4) * t631 - qJ(2) * t470 + qJ(5) * t559 + t432;
t376 = -pkin(5) * t503 + pkin(8) * t381;
t375 = -qJ(4) * t420 + (-qJ(5) * t783 + t873) * t431;
t374 = -pkin(8) * t489 - t380;
t373 = -pkin(5) * t555 + pkin(8) * t491 + t381;
t372 = t386 * t786 + t431 * t789;
t371 = -t386 * t789 + t431 * t786;
t370 = t382 * t786 + t424 * t789;
t369 = -t382 * t789 + t424 * t786;
t368 = qJ(4) * t421 + (-qJ(5) * t781 + t813) * t431;
t367 = pkin(2) * t570 - t788 * t408 - t785 * t412 - t476 * t874;
t366 = pkin(2) * t565 - t788 * t407 - t785 * t411 - t474 * t874;
t365 = pkin(2) * t557 - t788 * t398 - t785 * t402 - t470 * t874;
t364 = t381 * t782 - t871;
t363 = t381 * t780 + t870;
t362 = -qJ(4) * t433 + t391 * t783 - t393 * t781;
t361 = t364 * t783 + t503 * t781;
t360 = t364 * t781 - t503 * t783;
t359 = -qJ(4) * t429 + t384 * t783 - t390 * t781;
t358 = -pkin(3) * t471 + qJ(4) * t434 + t391 * t781 + t393 * t783;
t357 = -pkin(3) * t458 + qJ(4) * t430 + t384 * t781 + t390 * t783;
t356 = pkin(2) * t400 + pkin(3) * t433 - pkin(4) * t880 - qJ(2) * t401 + qJ(5) * t472 + t428 * t782 + t453 * t780;
t355 = pkin(2) * t386 + pkin(3) * t420 - pkin(4) * t549 - qJ(2) * t387 + qJ(5) * t432;
t354 = -qJ(5) * t424 - t373 * t780 + t374 * t782;
t353 = pkin(2) * t396 + pkin(3) * t429 - pkin(4) * t533 - qJ(2) * t397 + qJ(5) * t459 + t427 * t782 + t449 * t780;
t352 = -pkin(4) * t363 - pkin(5) * t380;
t351 = -qJ(4) * t416 + t354 * t783 - t405 * t781;
t350 = -pkin(8) * t870 - qJ(5) * t363 - t376 * t780;
t349 = -t360 * t785 + t361 * t788;
t348 = t360 * t788 + t361 * t785;
t347 = -pkin(3) * t424 + qJ(4) * t417 + t354 * t781 + t405 * t783;
t346 = pkin(2) * t431 - t788 * t368 - t785 * t375 - t387 * t874;
t345 = pkin(2) * t382 + pkin(3) * t416 - pkin(4) * t555 - qJ(2) * t383 + qJ(5) * t426 + t373 * t782 + t374 * t780;
t344 = pkin(2) * t471 - t788 * t358 - t785 * t362 - t401 * t874;
t343 = t348 * t786 + t363 * t789;
t342 = -t348 * t789 + t363 * t786;
t341 = pkin(2) * t458 - t788 * t357 - t785 * t359 - t397 * t874;
t340 = -qJ(4) * t360 + t350 * t783 - t352 * t781;
t339 = pkin(2) * t424 - t788 * t347 - t785 * t351 - t383 * t874;
t338 = -pkin(3) * t363 + qJ(4) * t361 + t350 * t781 + t352 * t783;
t337 = pkin(2) * t348 + pkin(3) * t360 - pkin(4) * t503 - pkin(8) * t871 - qJ(2) * t349 + qJ(5) * t364 + t376 * t782;
t336 = pkin(2) * t363 - t788 * t338 - t785 * t340 - t349 * t874;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t754, -t753, 0, t712, 0, 0, 0, 0, 0, 0, 0, t754, t753, t676, 0, 0, 0, 0, 0, 0, t677, t678, t705, t608, 0, 0, 0, 0, 0, 0, t547, t553, t513, t446, 0, 0, 0, 0, 0, 0, t444, t448, t442, t372, 0, 0, 0, 0, 0, 0, t379, t389, t370, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t753, -t754, 0, t710, 0, 0, 0, 0, 0, 0, 0, -t753, t754, t673, 0, 0, 0, 0, 0, 0, t674, t675, t704, t607, 0, 0, 0, 0, 0, 0, t545, t552, t512, t445, 0, 0, 0, 0, 0, 0, t443, t447, t441, t371, 0, 0, 0, 0, 0, 0, t378, t388, t369, t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t717, t718, 0, t641, 0, 0, 0, 0, 0, 0, t563, t593, t546, t452, 0, 0, 0, 0, 0, 0, t474, t476, t470, t387, 0, 0, 0, 0, 0, 0, t397, t401, t383, t349; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t753, 0, -t754, 0, -t805, -t804, -t710, -pkin(6) * t710, 0, -t753, t754, 0, 0, 0, -t673, t805, t804, -pkin(6) * t673 + (-pkin(1) * t786 + qJ(2) * t789) * g(3), -t723 * t786 + t807, -t698 * t786 + t756 * t789, -t715 * t786 + t788 * t822, -t722 * t786 - t807, -t713 * t786 - t785 * t822, -t746 * t786 + t771, -pkin(6) * t674 - t611 * t786 + t627 * t789, -pkin(6) * t675 - t610 * t786 + t628 * t789, -pkin(2) * t846 - pkin(6) * t704 - t636 * t786, -pkin(6) * t607 - t569 * t786 + t594 * t789, -t599 * t786 + t815, -t543 * t786 + t692 * t789, -t591 * t786 + t668 * t789, -t598 * t786 - t815, -t590 * t786 + t789 * t798, -t609 * t786 + t771, -pkin(6) * t545 - t436 * t786 + t464 * t789, -pkin(6) * t552 - t450 * t786 + t477 * t789, -pkin(6) * t512 - t406 * t786 + t465 * t789, -pkin(6) * t445 - t392 * t786 + t399 * t789, -t507 * t786 + t616 * t789, -t482 * t786 + t556 * t789, -t492 * t786 + t586 * t789, -t506 * t786 + t614 * t789, -t493 * t786 + t587 * t789, -t514 * t786 + t612 * t789, -pkin(6) * t443 - t366 * t786 + t394 * t789, -pkin(6) * t447 - t367 * t786 + t395 * t789, -pkin(6) * t441 - t365 * t786 + t377 * t789, -pkin(6) * t371 - t346 * t786 + t355 * t789, -t410 * t786 + t484 * t789, -t385 * t786 + t423 * t789, -t403 * t786 + t478 * t789, -t409 * t786 + t483 * t789, -t404 * t786 + t479 * t789, -t435 * t786 + t504 * t789, -pkin(6) * t378 - t341 * t786 + t353 * t789, -pkin(6) * t388 - t344 * t786 + t356 * t789, -pkin(6) * t369 - t339 * t786 + t345 * t789, -pkin(6) * t342 - t336 * t786 + t337 * t789; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t754, 0, t753, 0, t804, -t805, t712, pkin(6) * t712, 0, -t754, -t753, 0, 0, 0, t676, -t804, t805, pkin(6) * t676 + (pkin(1) * t789 + qJ(2) * t786) * g(3), t723 * t789 + t808, t698 * t789 + t756 * t786, t715 * t789 + t786 * t823, t722 * t789 - t808, t713 * t789 - t785 * t824, t746 * t789 + t770, pkin(6) * t677 + t611 * t789 + t627 * t786, pkin(6) * t678 + t610 * t789 + t628 * t786, -pkin(2) * t847 + pkin(6) * t705 + t636 * t789, pkin(6) * t608 + t569 * t789 + t594 * t786, t599 * t789 + t816, t543 * t789 + t692 * t786, t591 * t789 + t668 * t786, t598 * t789 - t816, t590 * t789 + t786 * t798, t609 * t789 + t770, pkin(6) * t547 + t436 * t789 + t464 * t786, pkin(6) * t553 + t450 * t789 + t477 * t786, pkin(6) * t513 + t406 * t789 + t465 * t786, pkin(6) * t446 + t392 * t789 + t399 * t786, t507 * t789 + t616 * t786, t482 * t789 + t556 * t786, t492 * t789 + t586 * t786, t506 * t789 + t614 * t786, t493 * t789 + t587 * t786, t514 * t789 + t612 * t786, pkin(6) * t444 + t366 * t789 + t394 * t786, pkin(6) * t448 + t367 * t789 + t395 * t786, pkin(6) * t442 + t365 * t789 + t377 * t786, pkin(6) * t372 + t346 * t789 + t355 * t786, t410 * t789 + t484 * t786, t385 * t789 + t423 * t786, t403 * t789 + t478 * t786, t409 * t789 + t483 * t786, t404 * t789 + t479 * t786, t435 * t789 + t504 * t786, pkin(6) * t379 + t341 * t789 + t353 * t786, pkin(6) * t389 + t344 * t789 + t356 * t786, pkin(6) * t370 + t339 * t789 + t345 * t786, pkin(6) * t343 + t336 * t789 + t337 * t786; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t759, t760, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t803 - 0.2e1 * t872, -t760 + t773 + 0.2e1 * t775, pkin(1) * t733 + qJ(2) * t727, (t750 - t812) * t788, -t748 * t788 - t751 * t785, -t764 * t785 + t842, (-t749 + t811) * t785, t762 * t788 - t845, 0, qJ(2) * t748 - t714 * t874 - t839, qJ(2) * t751 - t716 * t874 - t838, -qJ(2) * t755 + t752 * t874 - t640, -qJ(2) * t721 - t640 * t874, -t659 * t785 + t660 * t788, -t602 * t785 + t604 * t788, -t644 * t785 + t647 * t788, -t657 * t785 + t658 * t788, -t643 * t785 + t646 * t788, -t679 * t785 + t680 * t788, qJ(2) * t664 - t785 * t551 - t562 * t874 + t788 * t584, qJ(2) * t667 - t785 * t554 - t592 * t874 + t788 * t597, qJ(2) * t663 - t785 * t487 + t788 * t494 - t544 * t874, -qJ(2) * t656 - qJ(4) * t866 - t451 * t874 - t785 * t502, -t579 * t785 + t581 * t788, -t523 * t785 + t524 * t788, -t539 * t785 + t541 * t788, -t578 * t785 + t580 * t788, -t540 * t785 + t542 * t788, -t595 * t785 + t596 * t788, qJ(2) * t565 - t785 * t407 + t788 * t411 - t473 * t874, qJ(2) * t570 - t785 * t408 + t788 * t412 - t475 * t874, qJ(2) * t557 - t785 * t398 + t788 * t402 - t469 * t874, qJ(2) * t431 - t785 * t368 + t788 * t375 - t386 * t874, -t455 * t785 + t457 * t788, -t418 * t785 + t419 * t788, -t437 * t785 + t439 * t788, -t454 * t785 + t456 * t788, -t438 * t785 + t440 * t788, -t499 * t785 + t500 * t788, qJ(2) * t458 - t785 * t357 + t788 * t359 - t396 * t874, qJ(2) * t471 - t785 * t358 + t788 * t362 - t400 * t874, qJ(2) * t424 - t785 * t347 + t788 * t351 - t382 * t874, qJ(2) * t363 - t785 * t338 + t788 * t340 - t348 * t874;];
tauB_reg  = t1;
