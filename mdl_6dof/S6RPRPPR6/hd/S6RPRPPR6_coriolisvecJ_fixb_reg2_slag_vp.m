% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta4,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:55
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPPR6_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR6_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPPR6_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR6_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:54:38
% EndTime: 2019-03-09 02:54:49
% DurationCPUTime: 4.39s
% Computational Cost: add. (6863->385), mult. (15276->527), div. (0->0), fcn. (10876->8), ass. (0->202)
t178 = cos(qJ(3));
t249 = cos(pkin(9));
t207 = t249 * t178;
t202 = qJD(1) * t207;
t173 = sin(pkin(9));
t176 = sin(qJ(3));
t224 = qJD(1) * t176;
t210 = t173 * t224;
t131 = t202 - t210;
t172 = sin(pkin(10));
t174 = cos(pkin(10));
t105 = t172 * qJD(3) + t174 * t131;
t175 = sin(qJ(6));
t177 = cos(qJ(6));
t118 = t172 * t131;
t275 = t174 * qJD(3) - t118;
t193 = t177 * t275;
t58 = -t175 * t105 + t193;
t284 = t58 ^ 2;
t191 = -t173 * t178 - t176 * t249;
t127 = t191 * qJD(1);
t125 = qJD(6) - t127;
t283 = t58 * t125;
t57 = t177 * t105 + t175 * t275;
t282 = t57 ^ 2;
t233 = t177 * t174;
t273 = -t175 * t172 + t233;
t274 = t273 * qJD(6);
t251 = t127 * t273 - t274;
t143 = t177 * t172 + t175 * t174;
t136 = t143 * qJD(6);
t250 = -t143 * t127 + t136;
t133 = t191 * qJD(3);
t120 = qJD(1) * t133;
t237 = t172 * t120;
t280 = -t105 * t127 + t237;
t235 = t174 * t120;
t279 = t127 * t275 - t235;
t222 = qJD(3) * t176;
t129 = -qJD(3) * t207 + t173 * t222;
t150 = qJD(3) * t202;
t119 = qJD(3) * t210 - t150;
t93 = t191 * t119;
t196 = t127 * t129 + t93;
t278 = t120 * t143;
t277 = t131 * t275;
t276 = t273 * t191;
t272 = -qJD(6) + t125;
t25 = t175 * (qJD(6) * t105 + t237) - qJD(6) * t193 - t120 * t233;
t271 = -t25 * t273 - t250 * t57;
t270 = -t119 * t143 - t125 * t251;
t126 = t127 ^ 2;
t269 = t172 * t119 - t174 * t126;
t268 = t131 ^ 2;
t168 = qJD(1) * qJD(2);
t267 = 0.2e1 * t168;
t179 = -pkin(1) - pkin(7);
t264 = t174 * pkin(8);
t151 = t179 * qJD(1) + qJD(2);
t123 = (-qJ(4) * qJD(1) + t151) * t176;
t113 = t173 * t123;
t223 = qJD(1) * t178;
t124 = -qJ(4) * t223 + t178 * t151;
t79 = t124 * t249 - t113;
t214 = pkin(3) * t223;
t80 = t131 * pkin(4) - t127 * qJ(5) + t214;
t30 = -t172 * t79 + t174 * t80;
t19 = t131 * pkin(5) - t127 * t264 + t30;
t242 = t127 * t172;
t31 = t172 * t80 + t174 * t79;
t22 = -pkin(8) * t242 + t31;
t157 = t173 * pkin(3) + qJ(5);
t261 = pkin(8) + t157;
t137 = t261 * t172;
t138 = t261 * t174;
t87 = -t177 * t137 - t175 * t138;
t266 = qJD(5) * t273 + qJD(6) * t87 - t175 * t19 - t177 * t22;
t88 = -t175 * t137 + t177 * t138;
t265 = -qJD(5) * t143 - qJD(6) * t88 + t175 * t22 - t177 * t19;
t217 = t178 * qJD(4);
t102 = -t151 * t222 + (qJ(4) * t222 - t217) * qJD(1);
t218 = t176 * qJD(4);
t221 = qJD(3) * t178;
t103 = t151 * t221 + (-qJ(4) * t221 - t218) * qJD(1);
t51 = -t249 * t102 + t173 * t103;
t228 = qJ(4) - t179;
t147 = t228 * t176;
t148 = t228 * t178;
t99 = -t173 * t147 + t249 * t148;
t263 = t51 * t99;
t262 = t57 * t58;
t216 = qJD(1) * qJD(3);
t209 = t178 * t216;
t145 = pkin(3) * t209 + t168;
t44 = -pkin(4) * t119 - qJ(5) * t120 - qJD(5) * t131 + t145;
t52 = t173 * t102 + t249 * t103;
t47 = qJD(3) * qJD(5) + t52;
t17 = t172 * t44 + t174 * t47;
t116 = qJD(3) * pkin(3) + t124;
t208 = t249 * t123;
t70 = t173 * t116 + t208;
t63 = qJD(3) * qJ(5) + t70;
t146 = pkin(3) * t224 + qJD(1) * qJ(2) + qJD(4);
t71 = -t127 * pkin(4) - t131 * qJ(5) + t146;
t29 = t172 * t71 + t174 * t63;
t142 = -t173 * t176 + t207;
t152 = pkin(3) * t221 + qJD(2);
t53 = -t129 * pkin(4) - t133 * qJ(5) - t142 * qJD(5) + t152;
t121 = -qJD(3) * t148 - t218;
t187 = t222 * t228 - t217;
t77 = t121 * t249 + t173 * t187;
t24 = t172 * t53 + t174 * t77;
t100 = -t147 * t249 - t173 * t148;
t161 = t176 * pkin(3) + qJ(2);
t89 = -pkin(4) * t191 - t142 * qJ(5) + t161;
t41 = t174 * t100 + t172 * t89;
t260 = t120 * t99;
t259 = t131 * t58;
t258 = t131 * t57;
t256 = t51 * t142;
t254 = -t174 * t119 - t172 * t126;
t253 = qJD(1) * t273 - qJD(6) * t276 - t129 * t143;
t81 = t143 * t191;
t252 = t143 * qJD(1) - qJD(6) * t81 + t129 * t273;
t248 = t105 * t131;
t247 = t105 * t172;
t245 = t120 * t142;
t243 = t127 * t131;
t241 = t131 * t133;
t240 = t133 * t172;
t239 = t142 * t172;
t236 = t174 * t105;
t180 = qJD(3) ^ 2;
t232 = t180 * t176;
t231 = t180 * t178;
t181 = qJD(1) ^ 2;
t230 = t181 * qJ(2);
t229 = t181 * t178;
t227 = t176 ^ 2 - t178 ^ 2;
t226 = -t180 - t181;
t225 = qJD(1) * t127;
t220 = t129 * qJD(3);
t215 = 0.2e1 * qJD(1);
t213 = t176 * t229;
t16 = -t172 * t47 + t174 * t44;
t23 = -t172 * t77 + t174 * t53;
t28 = -t172 * t63 + t174 * t71;
t40 = -t172 * t100 + t174 * t89;
t76 = t173 * t121 - t249 * t187;
t78 = t173 * t124 + t208;
t26 = qJD(6) * t57 + t278;
t205 = -t143 * t26 - t251 * t58;
t204 = -t119 * t273 - t250 * t125;
t203 = t176 * t209;
t160 = -pkin(3) * t249 - pkin(4);
t37 = pkin(5) * t237 + t51;
t12 = -t119 * pkin(5) - pkin(8) * t235 + t16;
t13 = -pkin(8) * t237 + t17;
t201 = t175 * t12 + t177 * t13;
t200 = -t28 * t129 - t16 * t191;
t199 = t29 * t129 + t17 * t191;
t69 = t116 * t249 - t113;
t62 = -qJD(3) * pkin(4) + qJD(5) - t69;
t198 = -t62 * t133 - t256;
t15 = -t127 * pkin(5) - t105 * pkin(8) + t28;
t20 = pkin(8) * t275 + t29;
t5 = t177 * t15 - t175 * t20;
t6 = t175 * t15 + t177 * t20;
t197 = -t172 * t28 + t174 * t29;
t27 = -pkin(5) * t191 - t142 * t264 + t40;
t32 = -pkin(8) * t239 + t41;
t9 = -t175 * t32 + t177 * t27;
t10 = t175 * t27 + t177 * t32;
t195 = t172 * t275;
t194 = t174 * t275;
t190 = -t198 + t260;
t189 = -t196 - t245;
t188 = t119 * t142 + t120 * t191 + t127 * t133;
t186 = t194 - t247;
t185 = t194 + t247;
t183 = t157 * t119 + t160 * t120 - (-qJD(5) + t62) * t127;
t182 = -t129 * t70 + t133 * t69 - t191 * t52 - t256;
t2 = -qJD(6) * t6 + t177 * t12 - t175 * t13;
t167 = t174 ^ 2;
t166 = t172 ^ 2;
t164 = qJ(2) * t267;
t149 = -t174 * pkin(5) + t160;
t122 = t133 * qJD(3);
t84 = t273 * t142;
t82 = t143 * t142;
t67 = pkin(5) * t239 + t99;
t48 = pkin(5) * t242 + t78;
t46 = pkin(5) * t240 + t76;
t38 = -pkin(5) * t275 + t62;
t36 = t133 * t143 + t142 * t274;
t34 = -t133 * t273 + t136 * t142;
t18 = -pkin(8) * t240 + t24;
t14 = -t129 * pkin(5) - t133 * t264 + t23;
t4 = -qJD(6) * t10 + t177 * t14 - t175 * t18;
t3 = qJD(6) * t9 + t175 * t14 + t177 * t18;
t1 = qJD(6) * t5 + t201;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, t164, -0.2e1 * t203, 0.2e1 * t227 * t216, -t232, 0.2e1 * t203, -t231, 0, -t179 * t232 + (qJ(2) * t221 + qJD(2) * t176) * t215, -t179 * t231 + (-qJ(2) * t222 + qJD(2) * t178) * t215, 0, t164, t241 + t245, t129 * t131 + t188, t122, t196, t220, 0, -qJD(3) * t76 - t119 * t161 - t127 * t152 - t129 * t146 - t145 * t191, -qJD(3) * t77 + t120 * t161 + t131 * t152 + t133 * t146 + t142 * t145, t100 * t119 + t127 * t77 + t131 * t76 - t182 + t260, t100 * t52 + t145 * t161 + t146 * t152 - t69 * t76 + t70 * t77 + t263, t133 * t236 + t167 * t245, t133 * t186 - 0.2e1 * t235 * t239, -t105 * t129 - t174 * t188, -t133 * t195 + t166 * t245, -t129 * t275 + t172 * t188, t196, -t40 * t119 - t23 * t127 + t172 * t190 - t275 * t76 + t200, t76 * t105 + t41 * t119 + t24 * t127 + t174 * t190 + t199, -t23 * t105 - t24 * t118 + (t24 * qJD(3) - t40 * t120 - t28 * t133 - t16 * t142) * t174 + (-t41 * t120 - t29 * t133 - t17 * t142) * t172, t16 * t40 + t17 * t41 + t23 * t28 + t24 * t29 + t62 * t76 + t263, -t25 * t84 - t34 * t57, t25 * t82 - t26 * t84 - t34 * t58 - t36 * t57, -t119 * t84 - t125 * t34 - t129 * t57 + t191 * t25, t26 * t82 - t36 * t58, t119 * t82 - t125 * t36 - t129 * t58 + t191 * t26, -t125 * t129 + t93, -t119 * t9 + t125 * t4 - t129 * t5 - t191 * t2 + t26 * t67 + t36 * t38 + t37 * t82 - t46 * t58, t1 * t191 + t10 * t119 - t125 * t3 + t129 * t6 - t25 * t67 - t34 * t38 + t37 * t84 + t46 * t57, -t1 * t82 - t10 * t26 - t2 * t84 + t25 * t9 + t3 * t58 + t34 * t5 - t36 * t6 - t4 * t57, t1 * t10 + t2 * t9 + t3 * t6 + t37 * t67 + t38 * t46 + t4 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t181, -t230, 0, 0, 0, 0, 0, 0, t226 * t176, t226 * t178, 0, -t230, 0, 0, 0, 0, 0, 0, t122 + t225, -qJD(1) * t131 + t220, t189 - t241, -qJD(1) * t146 + t182, 0, 0, 0, 0, 0, 0, t133 * t275 + t172 * t189 + t174 * t225, -t133 * t105 - t172 * t225 + t174 * t189, -t185 * t129 + (-t195 + t236) * qJD(1) (-qJD(1) * t28 - t199) * t174 + (-qJD(1) * t29 - t200) * t172 + t198, 0, 0, 0, 0, 0, 0, -t119 * t81 - t125 * t253 + t133 * t58 - t142 * t26, -t119 * t276 + t125 * t252 - t133 * t57 + t142 * t25, t25 * t81 - t252 * t58 + t253 * t57 + t26 * t276, -t1 * t276 - t133 * t38 - t142 * t37 + t2 * t81 - t252 * t6 - t253 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t213, -t227 * t181, 0, -t213, 0, 0, -qJ(2) * t229, t176 * t230, 0, 0, -t243, -t126 + t268, 0, t243, -t150 + (t131 + t210) * qJD(3), 0, t78 * qJD(3) + t127 * t214 - t146 * t131 - t51, t79 * qJD(3) - t146 * t127 - t131 * t214 - t52 (t70 - t78) * t131 - (-t69 + t79) * t127 + (t119 * t173 - t120 * t249) * pkin(3), t69 * t78 - t70 * t79 + (-t146 * t223 + t173 * t52 - t249 * t51) * pkin(3), t280 * t174, -t186 * t127 - (t166 - t167) * t120, -t248 - t269, t279 * t172, t254 - t277, t243, t30 * t127 - t28 * t131 + t172 * t183 - t51 * t174 + t275 * t78, -t78 * t105 - t31 * t127 + t29 * t131 + t51 * t172 + t174 * t183, t30 * t105 + t31 * t118 + (-qJD(5) * t118 + t28 * t127 + t17 + (t174 * qJD(5) - t31) * qJD(3)) * t174 + (qJD(5) * t105 + t29 * t127 - t16) * t172, t51 * t160 - t28 * t30 - t29 * t31 - t62 * t78 + (-t16 * t172 + t17 * t174) * t157 + t197 * qJD(5), -t143 * t25 - t251 * t57, t205 + t271, -t258 + t270, -t250 * t58 - t26 * t273, t204 - t259, -t125 * t131, -t119 * t87 + t265 * t125 - t131 * t5 + t149 * t26 + t250 * t38 - t273 * t37 + t48 * t58, t119 * t88 - t266 * t125 + t131 * t6 + t143 * t37 - t149 * t25 - t251 * t38 - t48 * t57, t1 * t273 - t143 * t2 + t25 * t87 - t250 * t6 + t251 * t5 - t26 * t88 - t265 * t57 + t266 * t58, t1 * t88 + t149 * t37 + t2 * t87 + t265 * t5 + t266 * t6 - t38 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150 + (t131 - t210) * qJD(3), 0.2e1 * t127 * qJD(3), -t126 - t268, -t127 * t70 + t131 * t69 + t145, 0, 0, 0, 0, 0, 0, t254 + t277, -t248 + t269, -t185 * t127 - (t166 + t167) * t120, -t127 * t197 - t62 * t131 + t16 * t174 + t17 * t172, 0, 0, 0, 0, 0, 0, t204 + t259, -t258 - t270, t205 - t271, t1 * t143 - t131 * t38 + t2 * t273 - t250 * t5 - t251 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t280, -t279, -t105 ^ 2 - t275 ^ 2, t105 * t28 - t275 * t29 + t51, 0, 0, 0, 0, 0, 0, t57 * t125 + t26, -t25 + t283, -t282 - t284, t5 * t57 - t6 * t58 + t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262, t282 - t284, -t25 - t283, t262, t272 * t57 - t278, -t119, t6 * t125 - t38 * t57 + t2, t272 * t5 - t38 * t58 - t201, 0, 0;];
tauc_reg  = t7;
