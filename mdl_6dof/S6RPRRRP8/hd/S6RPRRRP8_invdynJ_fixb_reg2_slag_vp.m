% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP8_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:24:41
% EndTime: 2019-03-09 06:24:53
% DurationCPUTime: 6.88s
% Computational Cost: add. (10435->603), mult. (20009->693), div. (0->0), fcn. (13313->10), ass. (0->302)
t409 = sin(qJ(4));
t320 = qJD(4) * t409;
t440 = -qJD(3) * t409 - t320;
t224 = sin(qJ(3));
t227 = cos(qJ(4));
t228 = cos(qJ(3));
t147 = t227 * t224 + t228 * t409;
t141 = t147 * qJD(1);
t434 = qJD(5) + t141;
t313 = t434 ^ 2;
t324 = t409 * t224;
t346 = qJD(1) * t228;
t143 = -qJD(1) * t324 + t227 * t346;
t223 = sin(qJ(5));
t226 = cos(qJ(5));
t335 = qJD(3) + qJD(4);
t309 = t226 * t335;
t116 = t143 * t223 - t309;
t312 = t434 * t116;
t118 = t226 * t143 + t223 * t335;
t311 = t434 * t118;
t341 = qJD(5) * t226;
t374 = t141 * t226;
t439 = t341 + t374;
t233 = qJD(1) ^ 2;
t229 = cos(qJ(1));
t214 = g(2) * t229;
t225 = sin(qJ(1));
t352 = g(1) * t225 - t214;
t438 = -qJ(2) * t233 - t352;
t437 = t440 * qJD(1);
t339 = qJD(1) * qJD(3);
t318 = t228 * t339;
t337 = t224 * qJDD(1);
t436 = t318 + t337;
t336 = t228 * qJDD(1);
t435 = t224 * t339 - t336;
t217 = qJDD(1) * qJ(2);
t112 = t335 * t147;
t308 = t335 * t228;
t113 = t224 * t440 + t227 * t308;
t148 = t227 * t228 - t324;
t304 = qJD(5) * t147 + qJD(1);
t371 = t147 * t226;
t316 = qJDD(1) * t409;
t343 = qJD(4) * t227;
t347 = qJD(1) * t224;
t251 = -t224 * t316 - t435 * t227 + t228 * t437 - t343 * t347;
t334 = qJDD(3) + qJDD(4);
t342 = qJD(5) * t223;
t55 = -qJD(5) * t309 + t143 * t342 - t223 * t334 - t226 * t251;
t262 = t224 * t437 + t228 * t316;
t83 = (qJD(1) * t308 + t337) * t227 + t262;
t82 = qJDD(5) + t83;
t433 = t112 * t118 + t434 * (-t113 * t226 + t223 * t304) + t148 * t55 - t371 * t82;
t377 = t118 * t226;
t380 = t116 * t226;
t381 = t116 * t223;
t56 = qJD(5) * t118 + t223 * t251 - t226 * t334;
t391 = t226 * t56;
t393 = t223 * t55;
t432 = t148 * (qJD(5) * (-t377 + t381) - t391 + t393) + (t118 * t223 + t380) * t112;
t390 = t226 * t82;
t21 = -t116 * t143 + t223 * t313 - t390;
t9 = t223 * (t56 + t311) + t226 * (t55 + t312);
t398 = qJ(6) * t82;
t231 = -pkin(1) - pkin(7);
t178 = qJDD(1) * t231 + qJDD(2);
t149 = t228 * t178;
t180 = qJD(1) * t231 + qJD(2);
t345 = qJD(3) * t224;
t101 = qJDD(3) * pkin(3) + pkin(8) * t435 - t180 * t345 + t149;
t344 = qJD(3) * t228;
t104 = -pkin(8) * t436 + t178 * t224 + t180 * t344;
t131 = -pkin(8) * t346 + t228 * t180;
t127 = qJD(3) * pkin(3) + t131;
t130 = (-pkin(8) * qJD(1) + t180) * t224;
t30 = t409 * t101 + t227 * t104 + t127 * t343 - t130 * t320;
t27 = pkin(9) * t334 + t30;
t218 = qJD(1) * qJD(2);
t128 = pkin(3) * t436 + t217 + t218;
t37 = t83 * pkin(4) - pkin(9) * t251 + t128;
t126 = t227 * t130;
t92 = t127 * t409 + t126;
t85 = pkin(9) * t335 + t92;
t159 = pkin(3) * t347 + qJD(1) * qJ(2);
t95 = pkin(4) * t141 - pkin(9) * t143 + t159;
t6 = t223 * t37 + t226 * t27 + t95 * t341 - t342 * t85;
t2 = qJD(6) * t434 + t398 + t6;
t315 = t223 * t27 - t226 * t37 + t85 * t341 + t95 * t342;
t411 = pkin(5) * t82;
t4 = qJDD(6) + t315 - t411;
t431 = t2 * t226 + t4 * t223;
t430 = pkin(9) * (t342 * t434 - t390);
t310 = -t227 * t101 + t409 * t104 + t127 * t320 + t130 * t343;
t28 = -pkin(4) * t334 + t310;
t125 = t409 * t130;
t91 = t227 * t127 - t125;
t84 = -pkin(4) * t335 - t91;
t429 = t28 * t223 + t84 * t341;
t199 = pkin(3) * t409 + pkin(9);
t332 = pkin(3) * t343;
t306 = t226 * t332;
t428 = -t116 * t306 - t199 * t391;
t97 = t131 * t409 + t126;
t272 = pkin(3) * t320 - t97;
t425 = t56 - t311;
t220 = t224 ^ 2;
t221 = t228 ^ 2;
t350 = t220 + t221;
t314 = t350 * t178;
t212 = t224 * pkin(3);
t193 = qJ(2) + t212;
t108 = pkin(4) * t147 - pkin(9) * t148 + t193;
t399 = pkin(8) - t231;
t156 = t399 * t224;
t157 = t399 * t228;
t115 = -t227 * t156 - t157 * t409;
t423 = t223 * t108 + t226 * t115;
t375 = t141 * t223;
t422 = -t223 * qJD(6) - t439 * qJ(6) + (t342 + t375) * pkin(5);
t222 = qJ(3) + qJ(4);
t209 = cos(t222);
t365 = t209 * t229;
t175 = g(2) * t365;
t208 = sin(t222);
t195 = g(3) * t208;
t421 = t175 + t195;
t420 = t409 * t156 - t227 * t157;
t295 = g(1) * t229 + g(2) * t225;
t331 = 0.2e1 * t218;
t419 = 0.2e1 * t217 + t331 - t295;
t385 = t112 * t223;
t267 = t148 * t341 - t385;
t370 = t148 * t223;
t418 = t113 * t116 + t147 * t56 + t267 * t434 + t370 * t82;
t417 = -t143 * t112 + t148 * t251;
t181 = pkin(3) * t344 + qJD(2);
t66 = pkin(4) * t113 + pkin(9) * t112 + t181;
t146 = qJD(3) * t157;
t298 = t399 * t345;
t72 = qJD(4) * t420 - t227 * t146 + t409 * t298;
t15 = -qJD(5) * t423 - t223 * t72 + t226 * t66;
t414 = -t113 * t335 - t147 * t334;
t413 = t118 ^ 2;
t410 = pkin(9) * t82;
t408 = pkin(3) * t227;
t407 = pkin(3) * t228;
t406 = pkin(5) * t143;
t405 = pkin(9) * t208;
t194 = t209 * pkin(9);
t404 = g(3) * t194;
t196 = g(3) * t209;
t403 = g(3) * t223;
t402 = g(3) * t224;
t401 = g(3) * t226;
t8 = t56 * pkin(5) + t55 * qJ(6) - t118 * qJD(6) + t28;
t400 = t223 * t8;
t5 = t6 * t226;
t107 = pkin(4) * t143 + pkin(9) * t141;
t102 = pkin(3) * t346 + t107;
t98 = t227 * t131 - t125;
t58 = t223 * t102 + t226 * t98;
t52 = t223 * t95 + t226 * t85;
t397 = t434 * t52;
t46 = t116 * pkin(5) - t118 * qJ(6) + t84;
t396 = t141 * t46;
t395 = t141 * t84;
t394 = t199 * t82;
t392 = t223 * t82;
t389 = t422 + t272;
t388 = -t92 + t422;
t60 = t223 * t107 + t226 * t91;
t387 = pkin(1) * qJDD(1);
t384 = t112 * t226;
t382 = t116 * t199;
t379 = t118 * t116;
t376 = t434 * t143;
t372 = t143 * t141;
t369 = t148 * t226;
t368 = t208 * t225;
t367 = t208 * t229;
t366 = t209 * t225;
t364 = t223 * t225;
t363 = t223 * t229;
t362 = t225 * t226;
t361 = t229 * t226;
t51 = -t223 * t85 + t226 * t95;
t360 = qJD(6) - t51;
t359 = -t112 * t335 + t148 * t334;
t358 = t226 * t175 + t208 * t401;
t357 = pkin(4) * t366 + pkin(9) * t368;
t356 = g(1) * t365 + g(2) * t366;
t355 = t194 - t212;
t354 = (t331 + t217) * qJ(2);
t353 = t229 * pkin(1) + t225 * qJ(2);
t351 = t220 - t221;
t232 = qJD(3) ^ 2;
t349 = -t232 - t233;
t348 = qJD(1) * t159;
t338 = qJDD(3) * t224;
t333 = g(1) * t366;
t174 = g(2) * t367;
t330 = t46 * t341;
t329 = t209 * t364;
t328 = t228 * t233 * t224;
t43 = t46 * t342;
t78 = t84 * t342;
t327 = g(1) * t329 - t223 * t175 - t208 * t403;
t326 = g(1) * t368 - t174 + t196;
t323 = t199 * t341;
t322 = t116 ^ 2 - t413;
t211 = t229 * qJ(2);
t317 = -pkin(1) * t225 + t211;
t307 = t350 * qJDD(1);
t305 = qJDD(2) - t387;
t302 = t209 * pkin(5) * t362 + qJ(6) * t329 + t357;
t301 = t224 * t318;
t133 = t208 * t364 - t361;
t135 = t208 * t363 + t362;
t297 = -g(1) * t135 - g(2) * t133;
t134 = t208 * t362 + t363;
t136 = t208 * t361 - t364;
t296 = -g(1) * t136 - g(2) * t134;
t291 = pkin(5) * t226 + qJ(6) * t223;
t290 = pkin(5) * t223 - qJ(6) * t226;
t289 = -t394 + t395;
t38 = -pkin(5) * t434 + t360;
t39 = qJ(6) * t434 + t52;
t288 = t223 * t39 - t226 * t38;
t287 = t223 * t38 + t226 * t39;
t286 = t223 * t52 + t226 * t51;
t285 = t223 * t51 - t226 * t52;
t57 = t102 * t226 - t223 * t98;
t59 = t107 * t226 - t223 * t91;
t282 = t113 * t118 - t147 * t55;
t281 = t113 * t141 + t147 * t83;
t67 = t108 * t226 - t115 * t223;
t276 = t377 + t381;
t230 = -pkin(8) - pkin(7);
t275 = t229 * t212 + t225 * t230 + t317;
t274 = t143 * t38 + t358 + t43;
t273 = -t51 * t143 + t358 + t78;
t271 = -t51 * t374 - t52 * t375 - t326 + t5;
t270 = pkin(4) + t291;
t269 = t225 * t212 - t229 * t230 + t353;
t266 = -t148 * t342 - t384;
t14 = t108 * t341 - t115 * t342 + t223 * t66 + t226 * t72;
t265 = 0.2e1 * qJ(2) * t339 + qJDD(3) * t231;
t264 = -pkin(9) * qJD(5) * t434 - t333;
t263 = t118 * t332 - t199 * t55;
t261 = t270 * t209;
t259 = t52 * t143 + t327 + t429;
t258 = t223 * t312 - t391;
t257 = t270 * t195;
t256 = -t199 * t342 + t306;
t255 = -t223 * t332 - t323;
t252 = -t143 * t39 - t46 * t374 - t327 - t400;
t250 = g(1) * t133 - g(2) * t135 + t209 * t403 - t315;
t249 = t159 * t141 - t30 + t326;
t248 = pkin(4) * t367 - pkin(9) * t365 + t275;
t247 = -t39 * t375 + t38 * t439 - t326 + t431;
t246 = pkin(4) * t368 - pkin(9) * t366 + t269;
t245 = -t159 * t143 - t310 - t333 + t421;
t244 = -qJD(5) * t288 + t431;
t243 = -qJD(5) * t286 + t223 * t315 + t5;
t242 = t91 * t112 - t92 * t113 - t30 * t147 + t148 * t310 + t352;
t241 = t116 * t267 + t370 * t56;
t239 = t118 * t46 + qJDD(6) - t250;
t238 = -t231 * t232 + t419;
t73 = qJD(4) * t115 - t146 * t409 - t227 * t298;
t237 = -g(1) * t134 + g(2) * t136 - t209 * t401 + t6;
t236 = -t147 * t392 - t148 * t56 + t112 * t116 + (-t113 * t223 - t226 * t304) * t434;
t235 = (-t335 * t346 - t337) * t227 - t262;
t234 = -t56 * t371 - t113 * t380 + t304 * t377 + (t116 * t304 + t282) * t223;
t207 = qJDD(3) * t228;
t200 = -pkin(4) - t408;
t190 = t225 * t407;
t144 = -t270 - t408;
t132 = t143 * qJ(6);
t87 = -t141 ^ 2 + t143 ^ 2;
t77 = pkin(5) * t118 + qJ(6) * t116;
t74 = t148 * t290 - t420;
t70 = t143 * t335 + t235;
t69 = t141 * t335 + t251;
t63 = -pkin(5) * t147 - t67;
t62 = qJ(6) * t147 + t423;
t54 = pkin(9) * t391;
t49 = -t59 - t406;
t48 = t132 + t60;
t45 = -t57 - t406;
t44 = t132 + t58;
t42 = t113 * t434 + t147 * t82;
t32 = -t55 + t312;
t23 = -t118 * t143 + t226 * t313 + t392;
t18 = t226 * t311 - t393;
t17 = -t290 * t112 + (qJD(5) * t291 - qJD(6) * t226) * t148 + t73;
t16 = t118 * t266 - t369 * t55;
t13 = -pkin(5) * t113 - t15;
t12 = qJ(6) * t113 + qJD(6) * t147 + t14;
t11 = t266 * t434 + t369 * t82 + t282;
t1 = [0, 0, 0, 0, 0, qJDD(1), t352, t295, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t352 - 0.2e1 * t387, t419, -pkin(1) * t305 - g(1) * t317 - g(2) * t353 + t354, qJDD(1) * t221 - 0.2e1 * t301, -0.2e1 * t224 * t336 + 0.2e1 * t339 * t351, -t224 * t232 + t207, qJDD(1) * t220 + 0.2e1 * t301, -t228 * t232 - t338, 0, t224 * t238 + t228 * t265, -t224 * t265 + t228 * t238, -t231 * t307 - t314 + t352, -g(1) * (t225 * t231 + t211) - g(2) * (pkin(7) * t229 + t353) + t231 * t314 + t354, t417, t112 * t141 - t143 * t113 - t147 * t251 - t148 * t83, t359, t281, t414, 0, t159 * t113 + t128 * t147 + t181 * t141 + t193 * t83 - t208 * t295 + t334 * t420 - t335 * t73, -t159 * t112 - t115 * t334 + t128 * t148 + t181 * t143 + t193 * t251 - t335 * t72 - t356, -t115 * t83 - t72 * t141 + t73 * t143 - t251 * t420 + t242, -g(1) * t275 - g(2) * t269 + t30 * t115 + t128 * t193 + t159 * t181 - t310 * t420 + t92 * t72 - t91 * t73, t16, t432, t11, t241, -t418, t42, t113 * t51 + t116 * t73 - t147 * t315 + t148 * t429 + t15 * t434 - t84 * t385 - t420 * t56 + t67 * t82 + t296, -t84 * t384 - t113 * t52 + t420 * t55 + t118 * t73 - t434 * t14 - t147 * t6 - t423 * t82 + (t28 * t226 - t78) * t148 - t297, -t116 * t14 - t118 * t15 + t55 * t67 - t56 * t423 + t286 * t112 + (qJD(5) * t285 - t223 * t6 + t226 * t315) * t148 + t356, -g(1) * t248 - g(2) * t246 + t52 * t14 + t51 * t15 - t28 * t420 - t315 * t67 + t423 * t6 + t84 * t73, t16, t11, -t432, t42, t418, t241, -t46 * t385 - t113 * t38 + t116 * t17 - t13 * t434 - t147 * t4 + t56 * t74 - t63 * t82 + (t330 + t400) * t148 + t296, -t116 * t12 + t118 * t13 - t55 * t63 - t56 * t62 + t288 * t112 + (-qJD(5) * t287 - t2 * t223 + t226 * t4) * t148 + t356, t46 * t384 + t113 * t39 - t118 * t17 + t12 * t434 + t147 * t2 + t55 * t74 + t62 * t82 + (-t226 * t8 + t43) * t148 + t297, t2 * t62 + t39 * t12 + t8 * t74 + t46 * t17 + t4 * t63 + t38 * t13 - g(1) * (pkin(5) * t136 + qJ(6) * t135 + t248) - g(2) * (pkin(5) * t134 + qJ(6) * t133 + t246); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t233, t438 + t305, 0, 0, 0, 0, 0, 0, t224 * t349 + t207, t228 * t349 - t338, -t307, t314 + t438, 0, 0, 0, 0, 0, 0, -qJD(1) * t141 + t359, -qJD(1) * t143 + t414, -t281 - t417, -t242 - t348, 0, 0, 0, 0, 0, 0, t236, t433, t234, -qJD(1) * t286 + t112 * t84 - t113 * t285 + t147 * t243 - t148 * t28 - t352, 0, 0, 0, 0, 0, 0, t236, t234, -t433, -qJD(1) * t288 + t112 * t46 + t113 * t287 + t147 * t244 - t148 * t8 - t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t328, -t351 * t233, t336, -t328, -t337, qJDD(3), t228 * t438 + t149 + t402, g(3) * t228 + (-t178 - t438) * t224, 0, 0, t372, t87, t69, -t372, t70, t334, t97 * t335 + (-t141 * t346 + t227 * t334 - t320 * t335) * pkin(3) + t245, t98 * t335 + (-t143 * t346 - t334 * t409 - t335 * t343) * pkin(3) + t249 (t92 - t97) * t143 + (-t91 + t98) * t141 + (-t409 * t83 - t227 * t251 + (-t227 * t141 + t143 * t409) * qJD(4)) * pkin(3), t91 * t97 - t92 * t98 + (t409 * t30 + t402 - t227 * t310 + (t227 * t92 - t409 * t91) * qJD(4) + (-t352 - t348) * t228) * pkin(3), t18, -t9, t23, t258, -t21, -t376, t200 * t56 + (-t28 - t333) * t226 + t289 * t223 + t272 * t116 + (t255 - t57) * t434 + t273, -t200 * t55 + t289 * t226 + t272 * t118 + (-t256 + t58) * t434 + t259, t116 * t58 + t118 * t57 + (t118 * t199 - t51) * t341 + (t315 + (-t52 + t382) * qJD(5) + t263) * t223 + t271 + t428, t28 * t200 - t52 * t58 - t51 * t57 - t84 * t97 - g(1) * (t190 + t357) - g(3) * (-pkin(4) * t208 + t355) - (-pkin(4) * t209 - t405) * t214 + (t228 * t214 + (-t227 * t285 + t409 * t84) * qJD(4)) * pkin(3) + t243 * t199, t18, t23, t9, -t376, t21, t258, t144 * t56 + (-t8 - t333) * t226 + (-t394 + t396) * t223 + t389 * t116 + (t255 + t45) * t434 + t274, t116 * t44 + (-t45 + t323) * t118 + ((-t39 + t382) * qJD(5) + t263) * t223 + t247 + t428, t144 * t55 + (-qJD(5) * t46 + t394) * t226 - t389 * t118 + (t256 - t44) * t434 + t252, t8 * t144 - t39 * t44 - t38 * t45 - g(1) * (t190 + t302) - g(3) * t355 + t389 * t46 + t257 + t287 * t332 + t244 * t199 - (-t261 - t405 - t407) * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, t87, t69, -t372, t70, t334, t335 * t92 + t245, t335 * t91 + t249, 0, 0, t18, -t9, t23, t258, -t21, -t376, -pkin(4) * t56 - t116 * t92 - t434 * t59 + (t395 - t410) * t223 + (t264 - t28) * t226 + t273, pkin(4) * t55 - t118 * t92 + t374 * t84 + t434 * t60 + t259 + t430, t116 * t60 + t118 * t59 - t54 + (-pkin(9) * t55 + t315) * t223 + (pkin(9) * t276 - t286) * qJD(5) + t271, -t52 * t60 - t51 * t59 - t84 * t92 - g(1) * t357 - t404 + (-t28 + t421) * pkin(4) + (t243 + t174) * pkin(9), t18, t23, t9, -t376, t21, t258, t434 * t49 - t270 * t56 + (t396 - t410) * t223 + t388 * t116 + (t264 - t8) * t226 + t274, -t39 * t342 + t116 * t48 - t118 * t49 - t54 + (qJD(5) * t276 - t393) * pkin(9) + t247, -t118 * t388 - t270 * t55 - t434 * t48 + t252 - t330 - t430, -t8 * t270 - t39 * t48 - t38 * t49 - g(1) * t302 - t404 + t388 * t46 + t257 + t261 * t214 + (t244 + t174) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t379, -t322, t32, -t379, -t425, t82, -t118 * t84 + t250 + t397, t116 * t84 + t434 * t51 - t237, 0, 0, t379, t32, t322, t82, t425, -t379, -t116 * t77 - t239 + t397 + 0.2e1 * t411, pkin(5) * t55 - qJ(6) * t56 + (t39 - t52) * t118 + (t38 - t360) * t116, 0.2e1 * t398 - t116 * t46 + t118 * t77 + (0.2e1 * qJD(6) - t51) * t434 + t237, t2 * qJ(6) - t4 * pkin(5) - t46 * t77 - t38 * t52 - g(1) * (-pkin(5) * t133 + qJ(6) * t134) - g(2) * (pkin(5) * t135 - qJ(6) * t136) + t360 * t39 + t290 * t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(5) + t235 + t379, t32, -t413 - t313, -t39 * t434 + t239 - t411;];
tau_reg  = t1;
