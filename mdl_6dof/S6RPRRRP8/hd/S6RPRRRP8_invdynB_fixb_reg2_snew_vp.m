% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 01:49
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:48:24
% EndTime: 2019-05-06 01:48:52
% DurationCPUTime: 24.65s
% Computational Cost: add. (53686->638), mult. (106383->869), div. (0->0), fcn. (72952->8), ass. (0->450)
t829 = sin(qJ(4));
t830 = sin(qJ(3));
t833 = cos(qJ(4));
t834 = cos(qJ(3));
t900 = qJD(1) * t834;
t794 = -t829 * t830 * qJD(1) + t833 * t900;
t828 = sin(qJ(5));
t832 = cos(qJ(5));
t890 = qJD(3) + qJD(4);
t763 = t832 * t794 + t828 * t890;
t792 = (t829 * t834 + t830 * t833) * qJD(1);
t896 = qJD(1) * qJD(3);
t877 = t834 * t896;
t894 = qJDD(1) * t830;
t800 = -t877 - t894;
t878 = t830 * t896;
t892 = qJDD(1) * t834;
t801 = -t878 + t892;
t854 = t829 * t800 + t833 * t801;
t726 = -t792 * qJD(4) + t854;
t888 = qJDD(3) + qJDD(4);
t875 = t828 * t726 - t832 * t888;
t785 = qJD(5) + t792;
t897 = qJD(5) + t785;
t649 = t763 * t897 + t875;
t761 = t828 * t794 - t832 * t890;
t845 = -t832 * t726 - t828 * t888;
t843 = -t761 * qJD(5) - t845;
t918 = t761 * t785;
t955 = -t918 + t843;
t931 = t955 * t828;
t579 = -t649 * t832 - t931;
t760 = t763 ^ 2;
t946 = t761 ^ 2;
t717 = t760 - t946;
t548 = t579 * t829 - t717 * t833;
t550 = t579 * t833 + t717 * t829;
t500 = t548 * t834 + t550 * t830;
t575 = -t649 * t828 + t832 * t955;
t831 = sin(qJ(1));
t835 = cos(qJ(1));
t1049 = t500 * t831 + t575 * t835;
t1048 = t500 * t835 - t575 * t831;
t945 = t785 ^ 2;
t732 = t946 - t945;
t721 = t763 * t761;
t874 = -t833 * t800 + t829 * t801;
t725 = -t794 * qJD(4) - t874;
t723 = qJDD(5) - t725;
t958 = t721 + t723;
t928 = t958 * t828;
t624 = t732 * t832 - t928;
t650 = (qJD(5) - t785) * t763 + t875;
t565 = t624 * t829 + t650 * t833;
t569 = t624 * t833 - t650 * t829;
t516 = t565 * t834 + t569 * t830;
t927 = t958 * t832;
t620 = t732 * t828 + t927;
t1047 = t516 * t831 + t620 * t835;
t1046 = t516 * t835 - t620 * t831;
t957 = t760 + t946;
t956 = -t918 - t843;
t983 = -t650 * t832 - t956 * t828;
t1001 = -t829 * t957 + t833 * t983;
t1003 = t829 * t983 + t833 * t957;
t1016 = t1001 * t830 + t1003 * t834;
t984 = -t650 * t828 + t956 * t832;
t1038 = -t1016 * t835 + t831 * t984;
t1045 = pkin(6) * t1038;
t1040 = t1016 * t831 + t835 * t984;
t1044 = pkin(6) * t1040;
t1043 = t548 * t830 - t550 * t834;
t1042 = t565 * t830 - t569 * t834;
t733 = -t760 + t945;
t959 = -t721 + t723;
t925 = t959 * t832;
t985 = -t733 * t828 + t925;
t1000 = -t829 * t956 + t833 * t985;
t1002 = t829 * t985 + t833 * t956;
t1018 = -t1000 * t830 - t1002 * t834;
t926 = t959 * t828;
t987 = t832 * t733 + t926;
t1041 = -t1018 * t831 + t835 * t987;
t1039 = t1018 * t835 + t831 * t987;
t944 = pkin(7) + pkin(1);
t1037 = qJ(2) * t984 - t1016 * t944;
t1017 = t1001 * t834 - t1003 * t830;
t1036 = pkin(2) * t984 - t1017 * t944;
t1035 = pkin(2) * t1016 + pkin(3) * t1003 + pkin(4) * t957 + pkin(9) * t983 - qJ(2) * t1017;
t694 = t945 + t760;
t604 = t694 * t832 + t928;
t1034 = pkin(2) * t604;
t1033 = pkin(3) * t604;
t1032 = pkin(4) * t604;
t1031 = pkin(9) * t604;
t610 = t694 * t828 - t927;
t1030 = pkin(9) * t610;
t1029 = pkin(8) * t1001;
t1028 = pkin(8) * t1003;
t1027 = qJ(2) * t604;
t1026 = t604 * t831;
t1025 = t604 * t835;
t1024 = t610 * t829;
t1023 = t610 * t833;
t1019 = t1000 * t834 - t1002 * t830;
t1014 = pkin(9) * t984;
t914 = t794 * t792;
t986 = t888 - t914;
t1010 = t829 * t986;
t1007 = t833 * t986;
t954 = -t945 - t946;
t969 = t828 * t954 + t925;
t999 = pkin(2) * t969;
t998 = pkin(3) * t969;
t997 = pkin(4) * t969;
t968 = t832 * t954 - t926;
t996 = pkin(9) * t968;
t995 = pkin(9) * t969;
t994 = qJ(2) * t969;
t991 = t829 * t968;
t990 = t831 * t969;
t989 = t833 * t968;
t988 = t835 * t969;
t872 = t890 * t792;
t699 = t726 - t872;
t679 = -qJD(5) * t763 - t875;
t916 = t785 * t828;
t862 = t832 * t679 + t761 * t916;
t915 = t785 * t832;
t883 = t761 * t915;
t850 = -t679 * t828 + t883;
t885 = t829 * t721;
t951 = t833 * t850 - t885;
t884 = t833 * t721;
t952 = t829 * t850 + t884;
t964 = -t830 * t951 - t834 * t952;
t982 = -t831 * t964 + t835 * t862;
t847 = (-t761 * t828 - t763 * t832) * t785;
t728 = t763 * t916;
t861 = t728 - t883;
t950 = t723 * t829 + t833 * t861;
t953 = -t833 * t723 + t829 * t861;
t966 = -t830 * t950 - t834 * t953;
t981 = -t831 * t966 + t835 * t847;
t980 = t831 * t862 + t835 * t964;
t979 = t831 * t847 + t835 * t966;
t978 = 2 * qJD(6);
t976 = qJ(6) * t955;
t644 = t763 * t915 + t828 * t843;
t645 = t832 * t843 - t728;
t863 = t833 * t645 + t885;
t864 = t829 * t645 - t884;
t947 = -t830 * t863 - t834 * t864;
t971 = t831 * t644 + t835 * t947;
t970 = t835 * t644 - t831 * t947;
t967 = -t830 * t953 + t834 * t950;
t965 = -t830 * t952 + t834 * t951;
t887 = t890 ^ 2;
t895 = qJD(2) * qJD(1);
t823 = 0.2e1 * t895;
t871 = t890 * t794;
t826 = t830 ^ 2;
t837 = qJD(1) ^ 2;
t851 = qJD(3) * pkin(3) - pkin(8) * t900;
t811 = t835 * g(1) + t831 * g(2);
t825 = qJDD(1) * qJ(2);
t852 = t811 - t825;
t949 = -t800 * pkin(3) - (pkin(8) * t826 + t944) * t837 + t851 * t900 - t852;
t599 = t823 - t699 * pkin(9) + (-t725 + t871) * pkin(4) + t949;
t810 = t831 * g(1) - t835 * g(2);
t860 = qJDD(2) - t810;
t846 = -t837 * qJ(2) + t860;
t842 = -qJDD(1) * t944 + t846;
t755 = -t834 * g(3) + t830 * t842;
t907 = t826 * t837;
t714 = -pkin(3) * t907 + t800 * pkin(8) - qJD(3) * t851 + t755;
t839 = t834 * t842;
t903 = t834 * t837;
t838 = t839 - t801 * pkin(8) + qJDD(3) * pkin(3) + (-pkin(3) * t903 - pkin(8) * t896 + g(3)) * t830;
t661 = t833 * t714 + t829 * t838;
t748 = pkin(4) * t792 - pkin(9) * t794;
t603 = -pkin(4) * t887 + pkin(9) * t888 - t792 * t748 + t661;
t538 = t828 * t599 + t832 * t603;
t715 = pkin(5) * t761 - qJ(6) * t763;
t855 = t723 * qJ(6) - t761 * t715 + t785 * t978 + t538;
t948 = -t830 * t864 + t834 * t863;
t790 = t792 ^ 2;
t791 = t794 ^ 2;
t943 = pkin(4) * t829;
t942 = pkin(5) * t832;
t941 = qJ(6) * t832;
t940 = qJDD(1) * pkin(1);
t660 = t829 * t714 - t833 * t838;
t581 = -t660 * t833 + t661 * t829;
t939 = t581 * t830;
t938 = t581 * t834;
t602 = -t888 * pkin(4) - t887 * pkin(9) + t794 * t748 + t660;
t937 = t602 * t828;
t936 = t602 * t832;
t886 = -0.2e1 * t895;
t716 = t886 - t949;
t924 = t716 * t829;
t923 = t716 * t833;
t746 = t914 + t888;
t920 = t746 * t829;
t919 = t746 * t833;
t917 = t785 * t763;
t827 = t834 ^ 2;
t901 = t826 + t827;
t803 = t901 * qJDD(1);
t913 = t803 * t831;
t912 = t803 * t835;
t880 = t830 * t903;
t808 = qJDD(3) + t880;
t911 = t808 * t830;
t910 = t808 * t834;
t809 = qJDD(3) - t880;
t909 = t809 * t830;
t908 = t809 * t834;
t906 = t827 * t837;
t775 = t837 * t944 + t852 + t886;
t905 = t830 * t775;
t904 = t834 * t775;
t537 = -t832 * t599 + t828 * t603;
t902 = t957 - t945;
t893 = qJDD(1) * t831;
t891 = qJDD(1) * t835;
t889 = 0.2e1 * qJD(4) + qJD(3);
t882 = t831 * t914;
t881 = t835 * t914;
t879 = -pkin(4) * t833 - pkin(3);
t876 = -qJ(6) * t828 - pkin(4);
t492 = t537 * t828 + t832 * t538;
t582 = t660 * t829 + t833 * t661;
t782 = -t837 * pkin(1) + t823 - t852;
t784 = -t846 + t940;
t741 = t835 * t782 - t784 * t831;
t765 = -t810 * t831 - t835 * t811;
t870 = t831 * t880;
t869 = t835 * t880;
t867 = t763 * t715 + qJDD(6) + t537;
t804 = -t831 * t837 + t891;
t866 = pkin(6) * t804 + g(3) * t831;
t805 = t835 * t837 + t893;
t865 = -pkin(6) * t805 + g(3) * t835;
t859 = t829 * t872;
t858 = t829 * t871;
t857 = t833 * t872;
t856 = t833 * t871;
t491 = -t537 * t832 + t538 * t828;
t754 = t830 * g(3) + t839;
t703 = t834 * t754 + t830 * t755;
t704 = -t754 * t830 + t755 * t834;
t738 = t782 * t831 + t784 * t835;
t764 = t810 * t835 - t811 * t831;
t849 = qJD(3) * t794 - t874;
t848 = -t723 * pkin(5) + t867;
t841 = -t679 * pkin(5) + t602 - t976;
t840 = t763 * t978 - t841;
t836 = qJD(3) ^ 2;
t815 = -t836 - t906;
t814 = t836 - t906;
t813 = -t836 - t907;
t812 = -t836 + t907;
t807 = (-t826 + t827) * t837;
t806 = t901 * t837;
t802 = -0.2e1 * t878 + t892;
t799 = 0.2e1 * t877 + t894;
t797 = t901 * t896;
t779 = -t791 + t887;
t778 = t790 - t887;
t777 = -t801 * t830 - t827 * t896;
t776 = -t800 * t834 - t826 * t896;
t772 = -t791 - t887;
t771 = -t815 * t830 - t910;
t770 = t813 * t834 - t909;
t769 = t815 * t834 - t911;
t768 = -t814 * t834 - t909;
t767 = t813 * t830 + t908;
t766 = -t812 * t830 - t910;
t757 = -t806 * t835 - t913;
t756 = -t806 * t831 + t912;
t752 = t799 * t830 - t802 * t834;
t750 = t791 - t790;
t744 = -t887 - t790;
t743 = t769 * t831 + t802 * t835;
t742 = t767 * t831 + t799 * t835;
t740 = -t769 * t835 + t802 * t831;
t739 = -t767 * t835 + t799 * t831;
t730 = -t857 + t858;
t729 = -t859 - t856;
t727 = -t790 - t791;
t708 = t778 * t833 - t920;
t707 = -t779 * t829 + t1007;
t706 = t778 * t829 + t919;
t705 = t779 * t833 + t1010;
t702 = -t772 * t829 - t919;
t701 = t772 * t833 - t920;
t700 = t726 + t872;
t698 = -t792 * t889 + t854;
t695 = t794 * t889 + t874;
t692 = t833 * t726 - t858;
t691 = t829 * t726 + t856;
t690 = -t829 * t725 + t857;
t689 = t833 * t725 + t859;
t688 = -pkin(2) * t806 - t704;
t687 = t744 * t833 - t1010;
t686 = t744 * t829 + t1007;
t683 = pkin(2) * t769 - qJ(2) * t771 - t755;
t682 = pkin(2) * t767 - qJ(2) * t770 + t754;
t675 = pkin(2) * t799 - t770 * t944 - t904;
t674 = pkin(2) * t802 - t771 * t944 + t905;
t669 = t703 * t831 - t775 * t835;
t668 = -t703 * t835 - t775 * t831;
t667 = -t729 * t834 - t730 * t830;
t659 = -pkin(8) * t701 - t923;
t657 = t761 * t897 + t845;
t651 = -t679 + t917;
t648 = pkin(2) * t703 - qJ(2) * t704;
t647 = -t706 * t834 - t708 * t830;
t646 = -t705 * t834 - t707 * t830;
t639 = -pkin(8) * t686 - t924;
t634 = -t701 * t830 + t702 * t834;
t633 = t701 * t834 + t702 * t830;
t632 = t700 * t829 + t833 * t849;
t631 = -t695 * t833 - t699 * t829;
t630 = -t700 * t833 + t829 * t849;
t629 = -t695 * t829 + t699 * t833;
t616 = -pkin(2) * t775 - t704 * t944;
t615 = -t691 * t834 - t692 * t830;
t614 = -t689 * t834 - t690 * t830;
t613 = -t686 * t830 + t687 * t834;
t612 = t686 * t834 + t687 * t830;
t598 = -pkin(3) * t698 + pkin(8) * t702 - t924;
t587 = -pkin(3) * t695 + pkin(8) * t687 + t923;
t586 = t633 * t831 + t698 * t835;
t585 = -t633 * t835 + t698 * t831;
t584 = t612 * t831 + t695 * t835;
t583 = -t612 * t835 + t695 * t831;
t572 = -t630 * t830 + t632 * t834;
t571 = t630 * t834 + t632 * t830;
t570 = -t629 * t834 - t631 * t830;
t559 = t651 * t829 + t989;
t558 = -t657 * t829 + t1023;
t557 = -t651 * t833 + t991;
t556 = t657 * t833 + t1024;
t555 = pkin(3) * t716 + pkin(8) * t582;
t554 = t649 * t829 + t989;
t553 = -t829 * t955 - t1023;
t552 = -t649 * t833 + t991;
t551 = t833 * t955 - t1024;
t546 = t571 * t831 + t727 * t835;
t545 = -t571 * t835 + t727 * t831;
t540 = t936 + t1031;
t539 = t937 - t995;
t531 = -pkin(8) * t630 - t581;
t530 = -pkin(3) * t727 + pkin(8) * t632 + t582;
t529 = pkin(2) * t633 + pkin(3) * t701 - qJ(2) * t634 - t661;
t528 = (pkin(5) * t785 - (2 * qJD(6))) * t763 + t841;
t527 = t582 * t834 - t939;
t526 = t582 * t830 + t938;
t525 = -pkin(4) * t984 - pkin(5) * t956 + qJ(6) * t650;
t524 = pkin(2) * t612 + pkin(3) * t686 - qJ(2) * t613 - t660;
t523 = qJ(6) * t945 - t848;
t522 = -pkin(5) * t945 + t855;
t521 = t538 + t1032;
t520 = t537 - t997;
t519 = t526 * t831 - t716 * t835;
t518 = -t526 * t835 - t716 * t831;
t513 = (-t651 - t917) * pkin(5) + t840;
t512 = -pkin(5) * t917 + t840 + t976;
t511 = qJ(6) * t902 + t848;
t510 = -t557 * t830 + t559 * t834;
t509 = -t556 * t830 + t558 * t834;
t508 = t557 * t834 + t559 * t830;
t507 = t556 * t834 + t558 * t830;
t506 = pkin(5) * t902 + t855;
t505 = -t552 * t830 + t554 * t834;
t504 = -t551 * t830 + t553 * t834;
t503 = t552 * t834 + t554 * t830;
t502 = t551 * t834 + t553 * t830;
t499 = pkin(2) * t698 - t834 * t598 - t634 * t944 - t830 * t659;
t494 = pkin(2) * t571 + pkin(3) * t630 - qJ(2) * t572;
t493 = pkin(2) * t695 - t834 * t587 - t613 * t944 - t830 * t639;
t490 = t508 * t831 + t988;
t489 = t507 * t831 - t1025;
t488 = -t508 * t835 + t990;
t487 = -t507 * t835 - t1026;
t486 = t503 * t831 + t988;
t485 = t502 * t831 + t1025;
t484 = -t503 * t835 + t990;
t483 = -t502 * t835 + t1026;
t482 = -t997 + (-t954 - t945) * qJ(6) + (-t959 - t723) * pkin(5) + t867;
t481 = -t1032 - qJ(6) * t958 + (-t694 + t945) * pkin(5) - t855;
t480 = -t513 * t828 - t651 * t941 - t995;
t479 = -pkin(5) * t931 + t512 * t832 - t1031;
t478 = t492 * t833 + t602 * t829;
t477 = t492 * t829 - t602 * t833;
t472 = -t491 - t1014;
t471 = t522 * t832 - t523 * t828;
t470 = t522 * t828 + t523 * t832;
t469 = -pkin(8) * t556 - t521 * t829 + t540 * t833;
t468 = -pkin(8) * t552 - t520 * t829 + t539 * t833;
t467 = pkin(2) * t526 + pkin(3) * t581 - qJ(2) * t527;
t466 = pkin(8) * t558 + t521 * t833 + t540 * t829 + t1033;
t465 = pkin(8) * t554 + t520 * t833 + t539 * t829 - t998;
t464 = pkin(2) * t727 - t834 * t530 - t830 * t531 - t572 * t944;
t463 = -t506 * t828 + t511 * t832 - t1014;
t462 = t471 * t833 + t528 * t829;
t461 = t471 * t829 - t528 * t833;
t460 = t472 * t833 + t943 * t984 - t1028;
t459 = -pkin(2) * t716 + pkin(8) * t939 - t527 * t944 - t834 * t555;
t458 = t829 * t472 + t879 * t984 + t1029;
t457 = -t477 * t830 + t478 * t834;
t456 = t477 * t834 + t478 * t830;
t455 = pkin(2) * t507 + pkin(3) * t556 + pkin(4) * t657 - qJ(2) * t509 + t1030 + t937;
t454 = -pkin(9) * t470 + (pkin(5) * t828 - t941) * t528;
t453 = pkin(2) * t503 + pkin(3) * t552 - pkin(4) * t649 - qJ(2) * t505 - t936 + t996;
t452 = -pkin(8) * t557 + t480 * t833 - t482 * t829;
t451 = -pkin(8) * t551 + t479 * t833 - t481 * t829;
t450 = -pkin(4) * t470 - pkin(5) * t523 - qJ(6) * t522;
t449 = pkin(8) * t559 + t480 * t829 + t482 * t833 - t998;
t448 = pkin(8) * t553 + t479 * t829 + t481 * t833 - t1033;
t447 = t463 * t833 - t525 * t829 - t1028;
t446 = -pkin(8) * t477 + (-pkin(9) * t833 + t943) * t491;
t445 = pkin(2) * t508 + pkin(3) * t557 - qJ(2) * t510 + t832 * t513 + t651 * t876 + t996;
t444 = pkin(2) * t502 + pkin(3) * t551 - t1030 - qJ(2) * t504 + t828 * t512 + (pkin(4) + t942) * t955;
t443 = -pkin(3) * t984 + t463 * t829 + t525 * t833 + t1029;
t442 = t456 * t831 + t491 * t835;
t441 = -t456 * t835 + t491 * t831;
t440 = t1035 + t492;
t439 = -t461 * t830 + t462 * t834;
t438 = t461 * t834 + t462 * t830;
t437 = pkin(8) * t478 + (-pkin(9) * t829 + t879) * t491;
t436 = t506 * t832 + t511 * t828 + t1035;
t435 = -t834 * t466 - t830 * t469 - t509 * t944 - t1034;
t434 = -t834 * t465 - t830 * t468 - t505 * t944 + t999;
t433 = t438 * t831 + t470 * t835;
t432 = -t438 * t835 + t470 * t831;
t431 = -t834 * t458 - t830 * t460 + t1036;
t430 = -t834 * t449 - t830 * t452 - t510 * t944 + t999;
t429 = pkin(2) * t456 + pkin(3) * t477 - pkin(4) * t602 + pkin(9) * t492 - qJ(2) * t457;
t428 = -pkin(8) * t461 - t450 * t829 + t454 * t833;
t427 = -t834 * t448 - t830 * t451 - t504 * t944 + t1034;
t426 = -t834 * t443 - t830 * t447 + t1036;
t425 = -pkin(3) * t470 + pkin(8) * t462 + t450 * t833 + t454 * t829;
t424 = pkin(2) * t438 + pkin(3) * t461 + pkin(9) * t471 - qJ(2) * t439 + (t876 - t942) * t528;
t423 = pkin(2) * t491 - t834 * t437 - t830 * t446 - t457 * t944;
t422 = pkin(2) * t470 - t834 * t425 - t830 * t428 - t439 * t944;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t805, -t804, 0, t765, 0, 0, 0, 0, 0, 0, 0, t805, t804, t741, 0, 0, 0, 0, 0, 0, t742, t743, t757, t669, 0, 0, 0, 0, 0, 0, t584, t586, t546, t519, 0, 0, 0, 0, 0, 0, t486, t489, t1040, t442, 0, 0, 0, 0, 0, 0, t490, t1040, t485, t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t804, -t805, 0, t764, 0, 0, 0, 0, 0, 0, 0, -t804, t805, t738, 0, 0, 0, 0, 0, 0, t739, t740, t756, t668, 0, 0, 0, 0, 0, 0, t583, t585, t545, t518, 0, 0, 0, 0, 0, 0, t484, t487, t1038, t441, 0, 0, 0, 0, 0, 0, t488, t1038, t483, t432; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t770, t771, 0, t704, 0, 0, 0, 0, 0, 0, t613, t634, t572, t527, 0, 0, 0, 0, 0, 0, t505, t509, t1017, t457, 0, 0, 0, 0, 0, 0, t510, t1017, t504, t439; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t804, 0, -t805, 0, -t866, -t865, -t764, -pkin(6) * t764, 0, -t804, t805, 0, 0, 0, -t738, t866, t865, -pkin(6) * t738 + (-pkin(1) * t831 + qJ(2) * t835) * g(3), -t777 * t831 + t869, -t752 * t831 + t807 * t835, -t768 * t831 + t834 * t891, -t776 * t831 - t869, -t766 * t831 - t830 * t891, qJDD(3) * t835 - t797 * t831, -pkin(6) * t739 - t675 * t831 + t682 * t835, -pkin(6) * t740 - t674 * t831 + t683 * t835, -pkin(2) * t912 - pkin(6) * t756 - t688 * t831, -pkin(6) * t668 - t616 * t831 + t648 * t835, -t615 * t831 + t881, -t570 * t831 + t750 * t835, -t646 * t831 + t700 * t835, -t614 * t831 - t881, -t647 * t831 + t835 * t849, -t831 * t667 + t835 * t888, -pkin(6) * t583 - t493 * t831 + t524 * t835, -pkin(6) * t585 - t499 * t831 + t529 * t835, -pkin(6) * t545 - t464 * t831 + t494 * t835, -pkin(6) * t518 - t459 * t831 + t467 * t835, t970, t1049, t1041, t982, t1047, t981, -pkin(6) * t484 - t434 * t831 + t453 * t835, -pkin(6) * t487 - t435 * t831 + t455 * t835, -t431 * t831 + t440 * t835 - t1045, -pkin(6) * t441 - t423 * t831 + t429 * t835, t970, t1041, -t1049, t981, -t1047, t982, -pkin(6) * t488 - t430 * t831 + t445 * t835, -t426 * t831 + t436 * t835 - t1045, -pkin(6) * t483 - t427 * t831 + t444 * t835, -pkin(6) * t432 - t422 * t831 + t424 * t835; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t805, 0, t804, 0, t865, -t866, t765, pkin(6) * t765, 0, -t805, -t804, 0, 0, 0, t741, -t865, t866, pkin(6) * t741 + (pkin(1) * t835 + qJ(2) * t831) * g(3), t777 * t835 + t870, t752 * t835 + t807 * t831, t768 * t835 + t831 * t892, t776 * t835 - t870, t766 * t835 - t830 * t893, qJDD(3) * t831 + t797 * t835, pkin(6) * t742 + t675 * t835 + t682 * t831, pkin(6) * t743 + t674 * t835 + t683 * t831, -pkin(2) * t913 + pkin(6) * t757 + t688 * t835, pkin(6) * t669 + t616 * t835 + t648 * t831, t615 * t835 + t882, t570 * t835 + t750 * t831, t646 * t835 + t700 * t831, t614 * t835 - t882, t647 * t835 + t831 * t849, t835 * t667 + t831 * t888, pkin(6) * t584 + t493 * t835 + t524 * t831, pkin(6) * t586 + t499 * t835 + t529 * t831, pkin(6) * t546 + t464 * t835 + t494 * t831, pkin(6) * t519 + t459 * t835 + t467 * t831, t971, -t1048, t1039, t980, -t1046, t979, pkin(6) * t486 + t434 * t835 + t453 * t831, pkin(6) * t489 + t435 * t835 + t455 * t831, t431 * t835 + t440 * t831 + t1044, pkin(6) * t442 + t423 * t835 + t429 * t831, t971, t1039, t1048, t979, t1046, t980, pkin(6) * t490 + t430 * t835 + t445 * t831, t426 * t835 + t436 * t831 + t1044, pkin(6) * t485 + t427 * t835 + t444 * t831, pkin(6) * t433 + t422 * t835 + t424 * t831; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t810, t811, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t860 - 0.2e1 * t940, -t811 + t823 + 0.2e1 * t825, pkin(1) * t784 + qJ(2) * t782, (t801 - t878) * t834, -t799 * t834 - t802 * t830, -t814 * t830 + t908, (-t800 + t877) * t830, t812 * t834 - t911, 0, qJ(2) * t799 - t767 * t944 - t905, qJ(2) * t802 - t769 * t944 - t904, -qJ(2) * t806 + t803 * t944 - t703, -qJ(2) * t775 - t703 * t944, -t691 * t830 + t692 * t834, -t629 * t830 + t631 * t834, -t705 * t830 + t707 * t834, -t689 * t830 + t690 * t834, -t706 * t830 + t708 * t834, -t729 * t830 + t730 * t834, qJ(2) * t695 - t830 * t587 - t612 * t944 + t834 * t639, qJ(2) * t698 - t830 * t598 - t633 * t944 + t834 * t659, qJ(2) * t727 - t830 * t530 + t834 * t531 - t571 * t944, -pkin(8) * t938 - qJ(2) * t716 - t526 * t944 - t830 * t555, t948, -t1043, t1019, t965, -t1042, t967, -t830 * t465 + t834 * t468 - t503 * t944 + t994, -t830 * t466 + t834 * t469 - t507 * t944 - t1027, -t830 * t458 + t834 * t460 + t1037, qJ(2) * t491 - t830 * t437 + t834 * t446 - t456 * t944, t948, t1019, t1043, t967, t1042, t965, -t830 * t449 + t834 * t452 - t508 * t944 + t994, -t830 * t443 + t834 * t447 + t1037, -t830 * t448 + t834 * t451 - t502 * t944 + t1027, qJ(2) * t470 - t830 * t425 + t834 * t428 - t438 * t944;];
tauB_reg  = t1;
