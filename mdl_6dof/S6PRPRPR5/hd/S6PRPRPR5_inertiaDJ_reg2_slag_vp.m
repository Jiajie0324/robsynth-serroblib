% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRPR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR5_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:45:08
% EndTime: 2019-03-08 19:45:12
% DurationCPUTime: 1.64s
% Computational Cost: add. (1832->168), mult. (4528->305), div. (0->0), fcn. (4662->10), ass. (0->113)
t119 = pkin(8) + qJ(3);
t55 = sin(pkin(11));
t101 = t119 * t55;
t57 = cos(pkin(11));
t59 = sin(qJ(4));
t120 = t59 * t57;
t131 = cos(qJ(4));
t30 = t131 * t101 + t119 * t120;
t60 = sin(qJ(2));
t114 = qJD(2) * t60;
t42 = t131 * t55 + t120;
t37 = t42 * qJD(4);
t102 = t131 * t57;
t41 = t59 * t55 - t102;
t56 = sin(pkin(6));
t62 = cos(qJ(2));
t139 = (t41 * t114 - t37 * t62) * t56;
t112 = qJD(4) * t59;
t36 = -qJD(4) * t102 + t55 * t112;
t138 = (t42 * t114 + t36 * t62) * t56;
t132 = pkin(4) + pkin(9);
t76 = t42 * pkin(5) + t30;
t89 = qJ(5) * t36 - qJD(5) * t42;
t137 = -qJD(6) * t76 - t132 * t37 - t89;
t116 = cos(pkin(6));
t122 = t56 * t60;
t35 = t116 * t55 + t57 * t122;
t77 = -t116 * t57 + t55 * t122;
t136 = t35 * t57 + t77 * t55;
t58 = sin(qJ(6));
t53 = t58 ^ 2;
t61 = cos(qJ(6));
t54 = t61 ^ 2;
t98 = (t53 - t54) * qJD(6);
t113 = qJD(2) * t62;
t104 = t56 * t113;
t25 = t131 * t35 - t59 * t77;
t12 = qJD(4) * t25 + t42 * t104;
t123 = t56 ^ 2 * t60;
t69 = t131 * t77;
t24 = t35 * t59 + t69;
t11 = qJD(4) * t69 - t102 * t104 + (qJD(4) * t35 + t55 * t104) * t59;
t7 = t25 * t11;
t135 = -0.2e1 * t113 * t123 + 0.2e1 * t12 * t24 - 0.2e1 * t7;
t134 = -0.2e1 * t36;
t133 = 0.2e1 * qJD(5);
t129 = t37 * t53;
t128 = t37 * t58;
t127 = t37 * t61;
t126 = t41 * t37;
t125 = t41 * t58;
t124 = t41 * t61;
t34 = t54 * t37;
t121 = t56 * t62;
t118 = t55 ^ 2 + t57 ^ 2;
t115 = qJD(2) * t56;
t111 = qJD(6) * t58;
t110 = qJD(6) * t61;
t109 = qJD(6) * t132;
t108 = t59 * qJD(3);
t107 = qJ(5) * qJD(6);
t106 = 0.2e1 * t126;
t29 = t42 * t134;
t105 = t58 * t127;
t44 = t56 * t114;
t103 = t58 * t110;
t48 = -pkin(3) * t57 - pkin(2);
t100 = t118 * t62;
t99 = t131 * qJD(3);
t39 = t41 ^ 2;
t97 = t39 * t103;
t95 = 0.2e1 * t118 * qJD(3);
t87 = -qJ(5) * t42 + t48;
t19 = t132 * t41 + t87;
t8 = -t58 * t19 + t61 * t76;
t9 = t61 * t19 + t58 * t76;
t94 = -t58 * t8 + t61 * t9;
t93 = t119 * t131;
t16 = t58 * t121 + t24 * t61;
t86 = t61 * t121 - t24 * t58;
t92 = -t16 * t58 - t61 * t86;
t21 = qJD(4) * t30 + t55 * t108 - t57 * t99;
t22 = (qJD(4) * t93 + t108) * t57 + (-t119 * t112 + t99) * t55;
t31 = -t59 * t101 + t57 * t93;
t91 = -t21 * t31 + t22 * t30;
t90 = -t11 * qJ(5) + t25 * qJD(5);
t88 = -qJ(5) * t37 - qJD(5) * t41;
t83 = t42 * t110 - t36 * t58;
t82 = t42 * t111 + t61 * t36;
t81 = t41 * t110 + t128;
t80 = t41 * t111 - t127;
t78 = 0.2e1 * t36 * t41 - 0.2e1 * t37 * t42;
t14 = -t37 * pkin(5) - t21;
t75 = t14 + (qJ(5) * t41 + t132 * t42) * qJD(6);
t72 = -t11 * t31 + t12 * t30 - t21 * t25 + t22 * t24;
t71 = t11 * t41 + t12 * t42 - t24 * t36 - t25 * t37;
t23 = -t41 * pkin(5) + t31;
t68 = -qJD(6) * t23 - t132 * t36 - t88;
t64 = -t36 * pkin(5) + t22;
t3 = t19 * t111 + t137 * t61 - t58 * t64;
t4 = -t19 * t110 + t137 * t58 + t61 * t64;
t1 = t94 * qJD(6) - t3 * t58 + t4 * t61;
t67 = -t3 * t61 - t4 * t58 + (-t58 * t9 - t61 * t8) * qJD(6);
t5 = t86 * qJD(6) + t12 * t61 - t58 * t44;
t6 = t16 * qJD(6) + t12 * t58 + t61 * t44;
t66 = -t5 * t58 + t6 * t61 + (-t16 * t61 + t58 * t86) * qJD(6);
t2 = t92 * qJD(6) + t5 * t61 + t58 * t6;
t65 = 0.2e1 * t21 * t41 + 0.2e1 * t22 * t42 - 0.2e1 * t30 * t36 - 0.2e1 * t31 * t37;
t49 = qJ(5) * t133;
t28 = pkin(4) * t41 + t87;
t18 = pkin(4) * t37 + t89;
t15 = -t41 * t98 + t105;
t10 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (t136 * t56 - t123) * t113, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t16 * t5 - 0.2e1 * t6 * t86 - 0.2e1 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t104, 0, 0, 0, 0, 0, 0, 0, 0, -t57 * t44, t55 * t44, t100 * t115, t136 * qJD(3) + (-pkin(2) * t60 + qJ(3) * t100) * t115, 0, 0, 0, 0, 0, 0, t139, t138, t71, t48 * t44 + t72, 0, 0, 0, 0, 0, 0, t71, -t139, -t138 (t28 * t114 - t18 * t62) * t56 + t72, 0, 0, 0, 0, 0, 0, t11 * t124 - t16 * t36 + t25 * t80 + t42 * t5, -t11 * t125 + t25 * t81 - t36 * t86 - t42 * t6, t92 * t37 + t66 * t41, -t11 * t23 + t14 * t25 + t16 * t4 + t3 * t86 + t5 * t8 + t6 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, qJ(3) * t95, t29, t78, 0, t106, 0, 0, 0.2e1 * t48 * t37, t48 * t134, t65, 0.2e1 * t91, 0, 0, 0, t29, t78, t106, t65, -0.2e1 * t18 * t41 - 0.2e1 * t28 * t37, -0.2e1 * t18 * t42 + 0.2e1 * t28 * t36, 0.2e1 * t18 * t28 + 0.2e1 * t91, 0.2e1 * t53 * t126 + 0.2e1 * t97, 0.4e1 * t41 * t105 - 0.2e1 * t39 * t98, 0.2e1 * t42 * t128 + 0.2e1 * t41 * t83, 0.2e1 * t41 * t34 - 0.2e1 * t97, 0.2e1 * t42 * t127 - 0.2e1 * t41 * t82, t29, -0.2e1 * t14 * t124 + 0.2e1 * t23 * t80 - 0.2e1 * t36 * t8 + 0.2e1 * t4 * t42, 0.2e1 * t14 * t125 + 0.2e1 * t23 * t81 + 0.2e1 * t3 * t42 + 0.2e1 * t36 * t9, 0.2e1 * t94 * t37 + 0.2e1 * t67 * t41, 0.2e1 * t14 * t23 - 0.2e1 * t3 * t9 + 0.2e1 * t4 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t36, t18, 0, 0, 0, 0, 0, 0, -t83, t82, t34 + t129, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t11, -pkin(4) * t12 + t90, 0, 0, 0, 0, 0, 0, -t11 * t58 + t25 * t110, -t11 * t61 - t25 * t111, -t2, -t132 * t2 + t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, -t37, 0, -t22, t21, 0, 0, 0, t36, t37, 0, 0, 0, pkin(4) * t36 + t88, t22, -t21, -pkin(4) * t22 - qJ(5) * t21 + qJD(5) * t31, t15, -0.4e1 * t41 * t103 - t129 + t34, -t82, -t15, -t83, 0, t58 * t75 - t61 * t68, t58 * t68 + t61 * t75, -t1, t14 * qJ(5) + t23 * qJD(5) - t1 * t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, t49, -0.2e1 * t103, 0.2e1 * t98, 0, 0.2e1 * t103, 0, 0, 0.2e1 * t58 * qJD(5) + 0.2e1 * t61 * t107, 0.2e1 * qJD(5) * t61 - 0.2e1 * t58 * t107, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, 0, t22, 0, 0, 0, 0, 0, 0, -t82, -t83, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, -t80, -t36, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110, t111, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, 0, -t110, 0, t58 * t109, t61 * t109, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, -t110, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t10;
