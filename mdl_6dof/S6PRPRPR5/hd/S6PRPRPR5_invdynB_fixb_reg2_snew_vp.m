% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 23:01
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:59:22
% EndTime: 2019-05-04 23:00:05
% DurationCPUTime: 43.84s
% Computational Cost: add. (102200->850), mult. (233128->1338), div. (0->0), fcn. (175621->12), ass. (0->618)
t859 = cos(pkin(11));
t867 = cos(qJ(4));
t856 = sin(pkin(11));
t864 = sin(qJ(4));
t990 = t856 * t864;
t819 = (-t859 * t867 + t990) * qJD(2);
t910 = t856 * t867 + t859 * t864;
t821 = t910 * qJD(2);
t991 = t821 * t819;
t1065 = qJDD(4) - t991;
t1085 = t1065 * t864;
t1017 = t821 ^ 2;
t869 = qJD(4) ^ 2;
t798 = t1017 - t869;
t701 = t798 * t867 - t1085;
t1084 = t1065 * t867;
t706 = t798 * t864 + t1084;
t621 = t701 * t856 + t706 * t859;
t865 = sin(qJ(2));
t1115 = t621 * t865;
t868 = cos(qJ(2));
t1114 = t621 * t868;
t616 = t701 * t859 - t706 * t856;
t858 = sin(pkin(6));
t1113 = t858 * t616;
t861 = cos(pkin(6));
t1112 = t861 * t616;
t1064 = qJDD(4) + t991;
t1087 = t1064 * t864;
t797 = t1017 + t869;
t699 = t797 * t867 + t1087;
t1086 = t1064 * t867;
t705 = -t797 * t864 + t1086;
t614 = t699 * t859 + t705 * t856;
t1111 = qJ(3) * t614;
t623 = t699 * t856 - t705 * t859;
t1110 = qJ(3) * t623;
t1018 = t819 ^ 2;
t793 = t1018 - t869;
t697 = t793 * t864 + t1086;
t704 = -t793 * t867 + t1087;
t619 = t697 * t856 + t704 * t859;
t1109 = t619 * t865;
t1108 = t619 * t868;
t1107 = t623 * t865;
t1106 = t623 * t868;
t612 = t697 * t859 - t704 * t856;
t1105 = t858 * t612;
t1104 = t858 * t614;
t1103 = t861 * t612;
t1102 = t861 * t614;
t1101 = -pkin(2) * t614 - pkin(3) * t699;
t1099 = pkin(8) * t699;
t1098 = pkin(8) * t705;
t750 = -t869 - t1018;
t671 = t750 * t864 + t1084;
t674 = -t750 * t867 + t1085;
t588 = t671 * t859 - t674 * t856;
t1097 = qJ(3) * t588;
t591 = t671 * t856 + t674 * t859;
t1096 = qJ(3) * t591;
t1095 = t591 * t865;
t1094 = t591 * t868;
t1093 = t858 * t588;
t1092 = t861 * t588;
t1091 = -pkin(2) * t588 - pkin(3) * t671;
t1089 = pkin(8) * t671;
t1088 = pkin(8) * t674;
t1029 = t910 * qJDD(2);
t804 = qJD(4) * t819;
t762 = t1029 - t804;
t977 = t821 * qJD(4);
t945 = t867 * t762 - t864 * t977;
t947 = t864 * t762 + t867 * t977;
t1021 = -t856 * t947 + t859 * t945;
t964 = t865 * t991;
t1039 = t1021 * t868 + t964;
t1020 = t856 * t945 + t859 * t947;
t963 = t868 * t991;
t1040 = t1021 * t865 - t963;
t1058 = -t1020 * t858 + t1040 * t861;
t857 = sin(pkin(10));
t860 = cos(pkin(10));
t1083 = t1039 * t860 - t1058 * t857;
t1082 = t1039 * t857 + t1058 * t860;
t972 = qJDD(2) * t859;
t813 = qJDD(2) * t990 - t867 * t972;
t760 = t813 + t977;
t898 = t760 * t864 + t804 * t867;
t946 = -t867 * t760 + t804 * t864;
t1023 = -t856 * t946 + t859 * t898;
t1037 = t1023 * t868 - t964;
t1022 = t856 * t898 + t859 * t946;
t1038 = t1023 * t865 + t963;
t1060 = -t1022 * t858 + t1038 * t861;
t1081 = t1037 * t860 - t1060 * t857;
t1080 = t1037 * t857 + t1060 * t860;
t894 = (-t819 * t864 - t821 * t867) * qJD(4);
t895 = (-t819 * t867 + t821 * t864) * qJD(4);
t1024 = -t856 * t894 + t859 * t895;
t1036 = t865 * qJDD(4) + t1024 * t868;
t1025 = t856 * t895 + t859 * t894;
t1035 = -qJDD(4) * t868 + t1024 * t865;
t1062 = -t1025 * t858 + t1035 * t861;
t1079 = t1036 * t860 - t1062 * t857;
t1078 = t1036 * t857 + t1062 * t860;
t1016 = qJD(2) ^ 2;
t956 = g(1) * t857 - t860 * g(2);
t979 = g(3) - qJDD(1);
t1053 = -t858 * t979 + t861 * t956;
t834 = g(1) * t860 + g(2) * t857;
t737 = t1053 * t865 - t868 * t834;
t1054 = -pkin(2) * t1016 + qJDD(2) * qJ(3) + 0.2e1 * qJD(2) * qJD(3) + t737;
t1063 = t1025 * t861 + t1035 * t858;
t1061 = t1022 * t861 + t1038 * t858;
t1059 = t1020 * t861 + t1040 * t858;
t1027 = -t1018 - t1017;
t1057 = pkin(2) * t1027;
t1056 = pkin(3) * t1027;
t721 = -t804 + t762;
t1055 = qJ(5) * t721;
t871 = t859 ^ 2;
t845 = t871 * t1016;
t851 = t856 ^ 2;
t978 = t1016 * t851;
t829 = t845 + t978;
t1046 = t1027 * t865;
t1045 = t1027 * t868;
t1028 = -t1017 + t1018;
t1044 = t1028 * t865;
t1043 = t1028 * t868;
t863 = sin(qJ(6));
t866 = cos(qJ(6));
t785 = qJD(4) * t863 - t866 * t819;
t787 = qJD(4) * t866 + t819 * t863;
t725 = t787 * t785;
t747 = qJDD(6) + t762;
t1030 = -t725 + t747;
t1042 = t1030 * t863;
t1041 = t1030 * t866;
t1026 = t1016 * (t851 + t871);
t825 = t859 * t1026;
t970 = qJDD(2) * t868;
t958 = t859 * t970;
t896 = -t825 * t865 + t958;
t1031 = t896 * t861;
t971 = qJDD(2) * t865;
t782 = t825 * t868 + t859 * t971;
t693 = t1031 * t860 - t782 * t857;
t1034 = t1031 * t857 + t782 * t860;
t1033 = t857 * t979;
t1032 = t860 * t979;
t772 = t896 * t858;
t720 = t804 + t762;
t779 = -t860 * t834 - t857 * t956;
t778 = -t857 * t834 + t860 * t956;
t792 = t858 * t956 + t861 * t979;
t789 = t859 * t792;
t976 = t859 * t1016;
t654 = -t789 + (pkin(3) * t976 - pkin(8) * qJDD(2) - t1054) * t856;
t670 = t1054 * t859 - t856 * t792;
t655 = -pkin(3) * t845 + pkin(8) * t972 + t670;
t567 = -t867 * t654 + t864 * t655;
t746 = pkin(4) * t819 - qJ(5) * t821;
t899 = -qJDD(4) * pkin(4) - t869 * qJ(5) + t821 * t746 + qJDD(5) + t567;
t503 = pkin(5) * t720 - pkin(9) * t1065 + t899;
t791 = pkin(5) * t821 - qJD(4) * pkin(9);
t736 = -t1053 * t868 - t865 * t834;
t855 = qJDD(2) * pkin(2);
t727 = -t1016 * qJ(3) + qJDD(3) + t736 - t855;
t691 = -pkin(3) * t972 - pkin(8) * t829 + t727;
t875 = t760 * pkin(4) - t1055 + t691;
t1015 = -2 * qJD(5);
t953 = pkin(4) * qJD(4) + t1015;
t525 = (-t791 + t953) * t821 + t875 + t760 * pkin(9) - t1018 * pkin(5);
t438 = t503 * t863 + t525 * t866;
t952 = t503 * t866 - t863 * t525;
t398 = t866 * t438 - t863 * t952;
t397 = t863 * t438 + t866 * t952;
t784 = t785 ^ 2;
t1019 = t787 ^ 2;
t808 = qJD(6) + t821;
t806 = t808 ^ 2;
t1014 = 2 * qJD(5);
t1013 = pkin(4) + pkin(9);
t1012 = pkin(4) * t867;
t667 = t736 * t865 + t737 * t868;
t1011 = pkin(7) * t667;
t568 = t864 * t654 + t867 * t655;
t484 = -t567 * t867 + t568 * t864;
t1010 = t484 * t856;
t1009 = t484 * t859;
t1008 = t691 * t864;
t1007 = t691 * t867;
t718 = t760 + t977;
t1006 = t718 * t867;
t1005 = t721 * t864;
t1004 = t727 * t865;
t1003 = t727 * t868;
t996 = t785 * t808;
t961 = t856 * t976;
t790 = t856 * t958 - t865 * t961;
t995 = t790 * t857;
t994 = t790 * t860;
t993 = t808 * t863;
t992 = t808 * t866;
t988 = t859 * t865;
t906 = -t869 * pkin(4) - t819 * t746 + t568;
t969 = qJDD(4) * qJ(5);
t504 = t969 - t760 * pkin(5) - t1018 * pkin(9) + (t1014 + t791) * qJD(4) + t906;
t986 = t863 * t504;
t665 = t725 + t747;
t985 = t863 * t665;
t984 = t865 * t792;
t982 = t866 * t504;
t981 = t866 * t665;
t980 = t868 * t792;
t974 = qJDD(2) * t851;
t973 = qJDD(2) * t858;
t966 = t864 * t725;
t965 = t867 * t725;
t962 = t856 * t988;
t687 = -t785 * qJD(6) + t866 * qJDD(4) + t863 * t760;
t960 = -t806 - t1019;
t959 = t856 * t972;
t957 = qJ(5) * t864 + pkin(3);
t954 = -t727 + t855;
t485 = t567 * t864 + t867 * t568;
t669 = t1054 * t856 + t789;
t582 = t669 * t856 + t859 * t670;
t951 = t863 * qJDD(4) - t866 * t760;
t950 = t858 * t962;
t949 = t861 * t962;
t948 = t868 * t961;
t581 = t669 * t859 - t670 * t856;
t844 = t871 * qJDD(2);
t827 = t844 + t974;
t776 = t827 * t868 - t829 * t865;
t943 = pkin(7) * t776 + t581 * t865;
t832 = -t1016 * t865 + t970;
t942 = -pkin(7) * t832 - t984;
t907 = t1016 * t868 + t971;
t941 = -pkin(7) * t907 + t980;
t940 = t858 * t948;
t939 = t861 * t948;
t387 = -t397 * t867 + t504 * t864;
t388 = t397 * t864 + t504 * t867;
t349 = -t387 * t856 + t388 * t859;
t938 = t349 * t865 - t398 * t868;
t877 = qJD(4) * t1015 - t906;
t535 = -t877 + t969;
t464 = t535 * t864 - t867 * t899;
t465 = t535 * t867 + t864 * t899;
t412 = -t464 * t856 + t465 * t859;
t570 = t821 * t953 + t875;
t937 = t412 * t865 - t570 * t868;
t425 = t485 * t859 - t1010;
t936 = t425 * t865 - t691 * t868;
t880 = (-qJD(6) + t808) * t787 - t951;
t904 = t687 + t996;
t546 = t863 * t880 - t866 * t904;
t681 = -t784 - t1019;
t509 = -t546 * t867 + t681 * t864;
t510 = t546 * t864 + t681 * t867;
t437 = -t509 * t856 + t510 * t859;
t548 = t863 * t904 + t866 * t880;
t935 = t437 * t865 - t548 * t868;
t639 = (qJD(6) + t808) * t787 + t951;
t905 = t687 - t996;
t547 = t639 * t863 - t866 * t905;
t722 = -t784 + t1019;
t522 = t547 * t867 + t722 * t864;
t523 = -t547 * t864 + t722 * t867;
t448 = -t522 * t856 + t523 * t859;
t549 = t639 * t866 + t863 * t905;
t934 = t448 * t865 + t549 * t868;
t688 = -t806 - t784;
t592 = t863 * t688 + t1041;
t528 = -t592 * t867 + t639 * t864;
t529 = t592 * t864 + t639 * t867;
t453 = -t528 * t856 + t529 * t859;
t593 = t866 * t688 - t1042;
t933 = t453 * t865 - t593 * t868;
t602 = t866 * t960 - t985;
t532 = -t602 * t867 + t864 * t905;
t533 = t602 * t864 + t867 * t905;
t455 = -t532 * t856 + t533 * t859;
t603 = -t863 * t960 - t981;
t932 = t455 * t865 - t603 * t868;
t730 = t784 - t806;
t606 = -t730 * t863 - t981;
t536 = t606 * t867 + t864 * t880;
t538 = -t606 * t864 + t867 * t880;
t462 = -t536 * t856 + t538 * t859;
t608 = -t730 * t866 + t985;
t931 = t462 * t865 + t608 * t868;
t731 = t806 - t1019;
t605 = -t731 * t866 - t1042;
t537 = t867 * t605 + t864 * t904;
t539 = -t864 * t605 + t867 * t904;
t463 = -t537 * t856 + t539 * t859;
t607 = t731 * t863 - t1041;
t930 = t463 * t865 + t607 * t868;
t686 = -qJD(6) * t787 - t951;
t632 = -t686 * t866 - t785 * t993;
t575 = t632 * t867 - t966;
t577 = -t632 * t864 - t965;
t501 = -t575 * t856 + t577 * t859;
t633 = t686 * t863 - t785 * t992;
t929 = t501 * t865 + t633 * t868;
t634 = -t687 * t863 - t787 * t992;
t576 = t634 * t867 + t966;
t578 = -t634 * t864 + t965;
t502 = -t576 * t856 + t578 * t859;
t635 = -t687 * t866 + t787 * t993;
t928 = t502 * t865 + t635 * t868;
t660 = (t785 * t863 + t787 * t866) * t808;
t609 = t660 * t867 + t747 * t864;
t610 = -t660 * t864 + t747 * t867;
t531 = -t609 * t856 + t610 * t859;
t661 = (t785 * t866 - t787 * t863) * t808;
t927 = t531 * t865 + t661 * t868;
t644 = -t718 * t864 + t721 * t867;
t645 = -t1005 - t1006;
t551 = -t644 * t856 + t645 * t859;
t926 = t551 * t865 + t1043;
t925 = t582 * t865 - t1003;
t759 = t813 + 0.2e1 * t977;
t924 = -t759 * t868 - t1095;
t923 = t718 * t868 + t1095;
t719 = -t760 + t977;
t675 = -t1029 * t867 + t719 * t864;
t678 = t1029 * t864 + t719 * t867;
t597 = -t675 * t856 + t678 * t859;
t922 = t597 * t865 - t1045;
t761 = t1029 - 0.2e1 * t804;
t676 = -t759 * t864 + t761 * t867;
t679 = -t759 * t867 - t761 * t864;
t598 = -t676 * t856 + t679 * t859;
t921 = t598 * t865 + t1043;
t677 = -t720 * t867 - t813 * t864;
t680 = t720 * t864 - t813 * t867;
t599 = -t677 * t856 + t680 * t859;
t920 = t599 * t865 - t1045;
t919 = t813 * t868 - t1109;
t918 = t719 * t868 + t1109;
t917 = t721 * t868 - t1107;
t916 = -t1029 * t868 + t1115;
t915 = t720 * t868 - t1115;
t914 = -t761 * t868 + t1107;
t666 = t736 * t868 - t737 * t865;
t817 = t907 * t861;
t913 = t817 * t860 + t832 * t857;
t765 = t817 * t857 - t832 * t860;
t912 = t827 * t865 + t829 * t868;
t828 = t844 - t974;
t830 = t845 - t978;
t911 = t828 * t865 + t830 * t868;
t824 = t856 * t1026;
t897 = t824 * t865 - t856 * t970;
t353 = pkin(5) * t504 - t1013 * t398;
t358 = pkin(5) * t397 - qJ(5) * t398;
t329 = -pkin(3) * t398 + pkin(8) * t388 + t353 * t867 + t358 * t864;
t334 = -pkin(8) * t387 - t353 * t864 + t358 * t867;
t348 = t387 * t859 + t388 * t856;
t318 = -qJ(3) * t348 - t329 * t856 + t334 * t859;
t332 = -pkin(2) * t348 - pkin(3) * t387 - qJ(5) * t504 + t1013 * t397;
t342 = t349 * t868 + t398 * t865;
t892 = pkin(7) * t342 + t318 * t865 + t332 * t868;
t378 = pkin(5) * t681 - t1013 * t548 - t398;
t475 = pkin(5) * t546 - qJ(5) * t548;
t354 = -pkin(3) * t548 + pkin(8) * t510 + t378 * t867 + t475 * t864;
t357 = -pkin(8) * t509 - t378 * t864 + t475 * t867;
t436 = t509 * t859 + t510 * t856;
t337 = -qJ(3) * t436 - t354 * t856 + t357 * t859;
t355 = -pkin(2) * t436 - pkin(3) * t509 - qJ(5) * t681 + t1013 * t546 + t397;
t419 = t437 * t868 + t548 * t865;
t891 = pkin(7) * t419 + t337 * t865 + t355 * t868;
t415 = pkin(5) * t592 - qJ(5) * t593 + t952;
t426 = pkin(5) * t639 - t1013 * t593 + t982;
t367 = -pkin(3) * t593 + pkin(8) * t529 + t415 * t864 + t426 * t867;
t374 = -pkin(8) * t528 + t415 * t867 - t426 * t864;
t452 = t528 * t859 + t529 * t856;
t340 = -qJ(3) * t452 - t367 * t856 + t374 * t859;
t386 = -pkin(2) * t452 - pkin(3) * t528 - qJ(5) * t639 + t1013 * t592 - t986;
t429 = t453 * t868 + t593 * t865;
t890 = pkin(7) * t429 + t340 * t865 + t386 * t868;
t416 = pkin(5) * t602 - qJ(5) * t603 - t438;
t427 = pkin(5) * t905 - t1013 * t603 - t986;
t368 = -pkin(3) * t603 + pkin(8) * t533 + t416 * t864 + t427 * t867;
t377 = -pkin(8) * t532 + t416 * t867 - t427 * t864;
t454 = t532 * t859 + t533 * t856;
t341 = -qJ(3) * t454 - t368 * t856 + t377 * t859;
t390 = -pkin(2) * t454 - pkin(3) * t532 - qJ(5) * t905 + t1013 * t602 - t982;
t430 = t455 * t868 + t603 * t865;
t889 = pkin(7) * t430 + t341 * t865 + t390 * t868;
t409 = pkin(8) * t465 + (-t957 - t1012) * t570;
t411 = t464 * t859 + t465 * t856;
t418 = -pkin(8) * t464 + (pkin(4) * t864 - qJ(5) * t867) * t570;
t351 = -qJ(3) * t411 - t409 * t856 + t418 * t859;
t370 = -pkin(2) * t411 - pkin(3) * t464 + pkin(4) * t899 - qJ(5) * t535;
t401 = t412 * t868 + t570 * t865;
t888 = pkin(7) * t401 + t351 * t865 + t370 * t868;
t424 = t485 * t856 + t1009;
t476 = -pkin(3) * t691 + pkin(8) * t485;
t384 = -pkin(8) * t1009 - qJ(3) * t424 - t476 * t856;
t404 = -pkin(2) * t424 - pkin(3) * t484;
t420 = t425 * t868 + t691 * t865;
t887 = pkin(7) * t420 + t384 * t865 + t404 * t868;
t514 = -pkin(4) * t1027 + t535;
t515 = -qJ(5) * t1027 + t899;
t428 = pkin(8) * t680 + t514 * t867 + t515 * t864 - t1056;
t431 = -pkin(8) * t677 - t514 * t864 + t515 * t867;
t596 = t677 * t859 + t680 * t856;
t389 = -qJ(3) * t596 - t428 * t856 + t431 * t859;
t513 = -pkin(2) * t596 - pkin(3) * t677 + pkin(4) * t720 + qJ(5) * t813;
t556 = t599 * t868 + t1046;
t886 = pkin(7) * t556 + t389 * t865 + t513 * t868;
t459 = pkin(8) * t678 - t1056 + t485;
t474 = -pkin(8) * t675 - t484;
t594 = t675 * t859 + t678 * t856;
t407 = -qJ(3) * t594 - t459 * t856 + t474 * t859;
t545 = -pkin(2) * t594 - pkin(3) * t675;
t555 = t597 * t868 + t1046;
t885 = pkin(7) * t555 + t407 * t865 + t545 * t868;
t873 = -t1014 * t821 + t875;
t543 = (t718 + t977) * pkin(4) + t873;
t478 = t867 * t543 + t718 * t957 + t1088;
t489 = qJ(5) * t1006 - t543 * t864 + t1089;
t413 = -t478 * t856 + t489 * t859 + t1097;
t451 = pkin(4) * t1065 + qJ(5) * t750 - t1091 - t899;
t553 = -t718 * t865 + t1094;
t884 = pkin(7) * t553 + t413 * t865 + t451 * t868;
t542 = -pkin(4) * t977 + t1055 - t873;
t481 = t1098 + t864 * t542 + (pkin(3) + t1012) * t721;
t497 = -pkin(4) * t1005 + t542 * t867 - t1099;
t417 = -t481 * t856 + t497 * t859 - t1111;
t467 = -pkin(4) * t797 + (-qJDD(4) - t1064) * qJ(5) + t877 + t1101;
t572 = -t721 * t865 - t1106;
t883 = pkin(7) * t572 + t417 * t865 + t467 * t868;
t574 = -pkin(3) * t759 - t1007 - t1088;
t604 = t1008 - t1089;
t468 = -t574 * t856 + t604 * t859 - t1097;
t480 = t1091 + t567;
t562 = t759 * t865 - t1094;
t882 = pkin(7) * t562 + t468 * t865 + t480 * t868;
t583 = -pkin(3) * t761 + t1008 - t1098;
t611 = t1007 + t1099;
t479 = -t583 * t856 + t611 * t859 + t1111;
t488 = -t1101 + t568;
t579 = t761 * t865 + t1106;
t881 = pkin(7) * t579 + t479 * t865 + t488 * t868;
t879 = -pkin(7) * t782 + t1004 * t856 + t669 * t868;
t781 = t824 * t868 + t856 * t971;
t878 = pkin(7) * t781 + t670 * t868 + t727 * t988;
t552 = t582 * t868 + t1004;
t876 = pkin(7) * t552 - (-pkin(2) * t868 - qJ(3) * t865) * t581;
t818 = t832 * t861;
t816 = t832 * t858;
t815 = t907 * t858;
t777 = t828 * t868 - t830 * t865;
t773 = t897 * t861;
t771 = t897 * t858;
t766 = -t818 * t857 - t860 * t907;
t764 = t818 * t860 - t857 * t907;
t752 = t912 * t861;
t751 = t912 * t858;
t745 = -t939 + (-t858 * t871 - t949) * qJDD(2);
t744 = t939 + (-t851 * t858 + t949) * qJDD(2);
t728 = -0.2e1 * t858 * t959 + t861 * t911;
t694 = -t773 * t857 + t781 * t860;
t692 = t773 * t860 + t781 * t857;
t690 = -t980 + (t815 * t858 + t817 * t861) * pkin(7);
t689 = -t984 + (-t816 * t858 - t818 * t861) * pkin(7);
t685 = -t752 * t857 + t776 * t860;
t684 = t752 * t860 + t776 * t857;
t683 = -qJ(3) * t825 + t859 * t954;
t682 = qJ(3) * t824 - t856 * t954;
t662 = t667 * t861;
t647 = -pkin(1) * t816 + t858 * t736 + t861 * t941;
t646 = pkin(1) * t815 + t858 * t737 + t861 * t942;
t638 = -t666 * t861 + t858 * t792;
t637 = -t666 * t858 - t861 * t792;
t601 = t1029 * t865 + t1114;
t600 = -t813 * t865 - t1108;
t595 = t676 * t859 + t679 * t856;
t573 = -t720 * t865 - t1114;
t571 = -t719 * t865 + t1108;
t569 = pkin(2) * t829 + qJ(3) * t827 + t582;
t565 = t598 * t868 - t1044;
t561 = -pkin(1) * t637 + t1011 * t861;
t560 = -t638 * t857 + t667 * t860;
t559 = t638 * t860 + t667 * t857;
t558 = t859 * t1003 - t865 * t670 + (-t771 * t858 - t773 * t861) * pkin(7);
t557 = t856 * t1003 - t865 * t669 + (-t1031 * t861 - t772 * t858) * pkin(7);
t554 = -pkin(2) * t727 + qJ(3) * t582;
t550 = t644 * t859 + t645 * t856;
t544 = (-t637 * t858 - t638 * t861) * pkin(7);
t541 = t868 * t581 + (-t751 * t858 - t752 * t861) * pkin(7);
t534 = t551 * t868 - t1044;
t530 = t609 * t859 + t610 * t856;
t527 = -pkin(1) * t771 - t858 * t682 + t861 * t878;
t526 = -pkin(1) * t772 - t858 * t683 + t861 * t879;
t521 = t861 * t916 + t1113;
t520 = t861 * t919 - t1105;
t512 = t861 * t914 + t1104;
t511 = t858 * t914 - t1102;
t508 = t861 * t915 - t1113;
t507 = t861 * t917 - t1104;
t506 = t861 * t918 + t1105;
t505 = t858 * t917 + t1102;
t500 = t576 * t859 + t578 * t856;
t499 = t575 * t859 + t577 * t856;
t498 = -t858 * t595 + t861 * t921;
t496 = t531 * t868 - t661 * t865;
t495 = t861 * t924 - t1093;
t494 = t858 * t924 + t1092;
t493 = -t858 * t596 + t861 * t920;
t492 = -t858 * t594 + t861 * t922;
t491 = t861 * t596 + t858 * t920;
t490 = t861 * t594 + t858 * t922;
t487 = t861 * t923 + t1093;
t486 = t858 * t923 - t1092;
t483 = t581 * t858 + t861 * t925;
t482 = -t581 * t861 + t858 * t925;
t477 = -pkin(1) * t751 - t858 * t569 + t861 * t943;
t473 = -pkin(2) * t761 + t583 * t859 + t611 * t856 + t1110;
t472 = t502 * t868 - t635 * t865;
t471 = t501 * t868 - t633 * t865;
t470 = -t512 * t857 + t579 * t860;
t469 = t512 * t860 + t579 * t857;
t466 = -t858 * t550 + t861 * t926;
t461 = t537 * t859 + t539 * t856;
t460 = t536 * t859 + t538 * t856;
t458 = -t507 * t857 + t572 * t860;
t457 = t507 * t860 + t572 * t857;
t456 = -pkin(2) * t759 + t574 * t859 + t604 * t856 - t1096;
t450 = -t495 * t857 + t562 * t860;
t449 = t495 * t860 + t562 * t857;
t447 = t522 * t859 + t523 * t856;
t446 = -t493 * t857 + t556 * t860;
t445 = -t492 * t857 + t555 * t860;
t444 = t493 * t860 + t556 * t857;
t443 = t492 * t860 + t555 * t857;
t442 = -t487 * t857 + t553 * t860;
t441 = t487 * t860 + t553 * t857;
t440 = -t483 * t857 + t552 * t860;
t439 = t483 * t860 + t552 * t857;
t434 = -t858 * t530 + t861 * t927;
t433 = t463 * t868 - t607 * t865;
t432 = t462 * t868 - t608 * t865;
t423 = t448 * t868 - t549 * t865;
t422 = -t858 * t500 + t861 * t928;
t421 = -t858 * t499 + t861 * t929;
t414 = pkin(2) * t721 + t481 * t859 + t497 * t856 - t1110;
t410 = pkin(2) * t718 + t478 * t859 + t489 * t856 + t1096;
t408 = -(pkin(2) * t865 - qJ(3) * t868) * t581 + (-t482 * t858 - t483 * t861) * pkin(7);
t406 = -t858 * t461 + t861 * t930;
t405 = -t858 * t460 + t861 * t931;
t403 = -pkin(1) * t482 - t858 * t554 + t861 * t876;
t402 = qJ(3) * t597 + t459 * t859 + t474 * t856 - t1057;
t400 = -t858 * t454 + t861 * t932;
t399 = t861 * t454 + t858 * t932;
t396 = -t858 * t452 + t861 * t933;
t395 = t861 * t452 + t858 * t933;
t394 = -t858 * t447 + t861 * t934;
t393 = t868 * t479 - t865 * t488 + (-t511 * t858 - t512 * t861) * pkin(7);
t392 = -t858 * t436 + t861 * t935;
t391 = t861 * t436 + t858 * t935;
t385 = qJ(3) * t599 + t428 * t859 + t431 * t856 - t1057;
t383 = -t858 * t424 + t861 * t936;
t382 = t861 * t424 + t858 * t936;
t381 = t868 * t468 - t865 * t480 + (-t494 * t858 - t495 * t861) * pkin(7);
t380 = -pkin(2) * t691 - pkin(8) * t1010 + qJ(3) * t425 + t476 * t859;
t379 = -pkin(1) * t511 - t858 * t473 + t861 * t881;
t376 = -t400 * t857 + t430 * t860;
t375 = t400 * t860 + t430 * t857;
t373 = -t396 * t857 + t429 * t860;
t372 = t396 * t860 + t429 * t857;
t371 = -pkin(1) * t494 - t858 * t456 + t861 * t882;
t369 = t868 * t417 - t865 * t467 + (-t505 * t858 - t507 * t861) * pkin(7);
t366 = t868 * t407 - t865 * t545 + (-t490 * t858 - t492 * t861) * pkin(7);
t365 = -t858 * t411 + t861 * t937;
t364 = t861 * t411 + t858 * t937;
t363 = t868 * t413 - t865 * t451 + (-t486 * t858 - t487 * t861) * pkin(7);
t362 = -t392 * t857 + t419 * t860;
t361 = t392 * t860 + t419 * t857;
t360 = -t383 * t857 + t420 * t860;
t359 = t383 * t860 + t420 * t857;
t356 = t868 * t389 - t865 * t513 + (-t491 * t858 - t493 * t861) * pkin(7);
t352 = -pkin(1) * t505 - t858 * t414 + t861 * t883;
t350 = -pkin(1) * t490 - t858 * t402 + t861 * t885;
t347 = -pkin(1) * t486 - t858 * t410 + t861 * t884;
t346 = -pkin(2) * t570 + qJ(3) * t412 + t409 * t859 + t418 * t856;
t345 = -t365 * t857 + t401 * t860;
t344 = t365 * t860 + t401 * t857;
t343 = -pkin(1) * t491 - t858 * t385 + t861 * t886;
t339 = -pkin(2) * t603 + qJ(3) * t455 + t368 * t859 + t377 * t856;
t338 = -pkin(2) * t593 + qJ(3) * t453 + t367 * t859 + t374 * t856;
t336 = t868 * t384 - t865 * t404 + (-t382 * t858 - t383 * t861) * pkin(7);
t335 = -pkin(2) * t548 + qJ(3) * t437 + t354 * t859 + t357 * t856;
t333 = -pkin(1) * t382 - t858 * t380 + t861 * t887;
t331 = -t858 * t348 + t861 * t938;
t330 = t861 * t348 + t858 * t938;
t328 = t868 * t341 - t865 * t390 + (-t399 * t858 - t400 * t861) * pkin(7);
t327 = t868 * t340 - t865 * t386 + (-t395 * t858 - t396 * t861) * pkin(7);
t326 = t868 * t351 - t865 * t370 + (-t364 * t858 - t365 * t861) * pkin(7);
t325 = t868 * t337 - t865 * t355 + (-t391 * t858 - t392 * t861) * pkin(7);
t324 = -pkin(1) * t364 - t858 * t346 + t861 * t888;
t323 = -t331 * t857 + t342 * t860;
t322 = t331 * t860 + t342 * t857;
t321 = -pkin(1) * t399 - t858 * t339 + t861 * t889;
t320 = -pkin(1) * t395 - t858 * t338 + t861 * t890;
t319 = -pkin(1) * t391 - t858 * t335 + t861 * t891;
t317 = -pkin(2) * t398 + qJ(3) * t349 + t329 * t859 + t334 * t856;
t316 = t868 * t318 - t865 * t332 + (-t330 * t858 - t331 * t861) * pkin(7);
t315 = -pkin(1) * t330 - t858 * t317 + t861 * t892;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t779, 0, 0, 0, 0, 0, 0, t766, t765, 0, t560, 0, 0, 0, 0, 0, 0, -t1034, t694, t685, t440, 0, 0, 0, 0, 0, 0, t450, t470, t445, t360, 0, 0, 0, 0, 0, 0, t446, t442, t458, t345, 0, 0, 0, 0, 0, 0, t373, t376, t362, t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t778, 0, 0, 0, 0, 0, 0, t764, -t913, 0, t559, 0, 0, 0, 0, 0, 0, t693, t692, t684, t439, 0, 0, 0, 0, 0, 0, t449, t469, t443, t359, 0, 0, 0, 0, 0, 0, t444, t441, t457, t344, 0, 0, 0, 0, 0, 0, t372, t375, t361, t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t979, 0, 0, 0, 0, 0, 0, t816, -t815, 0, t637, 0, 0, 0, 0, 0, 0, t772, t771, t751, t482, 0, 0, 0, 0, 0, 0, t494, t511, t490, t382, 0, 0, 0, 0, 0, 0, t491, t486, t505, t364, 0, 0, 0, 0, 0, 0, t395, t399, t391, t330; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1033, -t1032, -t778, -qJ(1) * t778, 0, 0, -t765, 0, t766, t857 * t973, -qJ(1) * t764 - t647 * t857 + t689 * t860, qJ(1) * t913 - t646 * t857 + t690 * t860, -t662 * t857 + t666 * t860, -qJ(1) * t559 + t544 * t860 - t561 * t857, -t744 * t857 + t994, -t728 * t857 + t777 * t860, t694, -t745 * t857 - t994, t1034, 0, -qJ(1) * t693 - t526 * t857 + t557 * t860, -qJ(1) * t692 - t527 * t857 + t558 * t860, -qJ(1) * t684 - t477 * t857 + t541 * t860, -qJ(1) * t439 - t403 * t857 + t408 * t860, t1083, -t498 * t857 + t565 * t860, -t521 * t857 + t601 * t860, t1081, -t520 * t857 + t600 * t860, t1079, -qJ(1) * t449 - t371 * t857 + t381 * t860, -qJ(1) * t469 - t379 * t857 + t393 * t860, -qJ(1) * t443 - t350 * t857 + t366 * t860, -qJ(1) * t359 - t333 * t857 + t336 * t860, t1079, -t508 * t857 + t573 * t860, -t506 * t857 + t571 * t860, t1083, -t466 * t857 + t534 * t860, t1081, -qJ(1) * t444 - t343 * t857 + t356 * t860, -qJ(1) * t441 - t347 * t857 + t363 * t860, -qJ(1) * t457 - t352 * t857 + t369 * t860, -qJ(1) * t344 - t324 * t857 + t326 * t860, -t422 * t857 + t472 * t860, -t394 * t857 + t423 * t860, -t406 * t857 + t433 * t860, -t421 * t857 + t471 * t860, -t405 * t857 + t432 * t860, -t434 * t857 + t496 * t860, -qJ(1) * t372 - t320 * t857 + t327 * t860, -qJ(1) * t375 - t321 * t857 + t328 * t860, -qJ(1) * t361 - t319 * t857 + t325 * t860, -qJ(1) * t322 - t315 * t857 + t316 * t860; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1032, -t1033, t779, qJ(1) * t779, 0, 0, t913, 0, t764, -t860 * t973, qJ(1) * t766 + t647 * t860 + t689 * t857, qJ(1) * t765 + t646 * t860 + t690 * t857, t662 * t860 + t666 * t857, qJ(1) * t560 + t544 * t857 + t561 * t860, t744 * t860 + t995, t728 * t860 + t777 * t857, t692, t745 * t860 - t995, -t693, 0, -qJ(1) * t1034 + t526 * t860 + t557 * t857, qJ(1) * t694 + t527 * t860 + t558 * t857, qJ(1) * t685 + t477 * t860 + t541 * t857, qJ(1) * t440 + t403 * t860 + t408 * t857, t1082, t498 * t860 + t565 * t857, t521 * t860 + t601 * t857, t1080, t520 * t860 + t600 * t857, t1078, qJ(1) * t450 + t371 * t860 + t381 * t857, qJ(1) * t470 + t379 * t860 + t393 * t857, qJ(1) * t445 + t350 * t860 + t366 * t857, qJ(1) * t360 + t333 * t860 + t336 * t857, t1078, t508 * t860 + t573 * t857, t506 * t860 + t571 * t857, t1082, t466 * t860 + t534 * t857, t1080, qJ(1) * t446 + t343 * t860 + t356 * t857, qJ(1) * t442 + t347 * t860 + t363 * t857, qJ(1) * t458 + t352 * t860 + t369 * t857, qJ(1) * t345 + t324 * t860 + t326 * t857, t422 * t860 + t472 * t857, t394 * t860 + t423 * t857, t406 * t860 + t433 * t857, t421 * t860 + t471 * t857, t405 * t860 + t432 * t857, t434 * t860 + t496 * t857, qJ(1) * t373 + t320 * t860 + t327 * t857, qJ(1) * t376 + t321 * t860 + t328 * t857, qJ(1) * t362 + t319 * t860 + t325 * t857, qJ(1) * t323 + t315 * t860 + t316 * t857; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t956, t834, 0, 0, 0, 0, t815, 0, t816, t861 * qJDD(2), pkin(1) * t818 - t861 * t736 + t858 * t941, -pkin(1) * t817 - t861 * t737 + t858 * t942, t667 * t858, pkin(1) * t638 + t1011 * t858, t940 + (t851 * t861 + t950) * qJDD(2), t858 * t911 + 0.2e1 * t861 * t959, t771, -t940 + (t861 * t871 - t950) * qJDD(2), -t772, 0, pkin(1) * t1031 + t861 * t683 + t858 * t879, pkin(1) * t773 + t861 * t682 + t858 * t878, pkin(1) * t752 + t861 * t569 + t858 * t943, pkin(1) * t483 + t861 * t554 + t858 * t876, t1059, t861 * t595 + t858 * t921, t858 * t916 - t1112, t1061, t858 * t919 + t1103, t1063, pkin(1) * t495 + t861 * t456 + t858 * t882, pkin(1) * t512 + t861 * t473 + t858 * t881, pkin(1) * t492 + t861 * t402 + t858 * t885, pkin(1) * t383 + t861 * t380 + t858 * t887, t1063, t858 * t915 + t1112, t858 * t918 - t1103, t1059, t861 * t550 + t858 * t926, t1061, pkin(1) * t493 + t861 * t385 + t858 * t886, pkin(1) * t487 + t861 * t410 + t858 * t884, pkin(1) * t507 + t861 * t414 + t858 * t883, pkin(1) * t365 + t861 * t346 + t858 * t888, t861 * t500 + t858 * t928, t861 * t447 + t858 * t934, t861 * t461 + t858 * t930, t861 * t499 + t858 * t929, t861 * t460 + t858 * t931, t861 * t530 + t858 * t927, pkin(1) * t396 + t861 * t338 + t858 * t890, pkin(1) * t400 + t861 * t339 + t858 * t889, pkin(1) * t392 + t861 * t335 + t858 * t891, pkin(1) * t331 + t861 * t317 + t858 * t892;];
tauB_reg  = t1;
