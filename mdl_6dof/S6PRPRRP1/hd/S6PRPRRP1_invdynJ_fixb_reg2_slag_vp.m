% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:58
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:58:36
% EndTime: 2019-03-08 19:58:45
% DurationCPUTime: 5.19s
% Computational Cost: add. (5386->512), mult. (12662->669), div. (0->0), fcn. (10356->12), ass. (0->260)
t195 = sin(pkin(6));
t193 = sin(pkin(11));
t196 = cos(pkin(11));
t202 = sin(qJ(2));
t205 = cos(qJ(2));
t238 = t193 * t205 + t196 * t202;
t125 = t238 * t195;
t117 = qJD(1) * t125;
t201 = sin(qJ(4));
t204 = cos(qJ(4));
t245 = pkin(4) * t201 - pkin(9) * t204;
t152 = t245 * qJD(4);
t361 = -t117 + t152;
t290 = qJD(2) * t195;
t260 = qJD(1) * t290;
t276 = qJDD(1) * t195;
t360 = t202 * t276 + t205 * t260;
t281 = qJD(5) * t201;
t359 = qJD(2) * t281 - qJDD(4);
t198 = cos(pkin(6));
t105 = t125 * t201 - t198 * t204;
t197 = cos(pkin(10));
t309 = t195 * t204;
t300 = t205 * t196;
t142 = t193 * t202 - t300;
t194 = sin(pkin(10));
t305 = t198 * t205;
t306 = t198 * t202;
t296 = -t193 * t305 - t196 * t306;
t90 = t194 * t142 + t197 * t296;
t66 = t197 * t309 - t201 * t90;
t95 = -t197 * t142 + t194 * t296;
t68 = -t194 * t309 + t201 * t95;
t229 = g(1) * t68 + g(2) * t66 + g(3) * t105;
t200 = sin(qJ(5));
t203 = cos(qJ(5));
t275 = t201 * qJDD(2);
t288 = qJD(2) * t204;
t99 = t200 * (qJD(4) * (qJD(5) + t288) + t275) + t359 * t203;
t292 = qJD(1) * t195;
t267 = t202 * t292;
t160 = t193 * t267;
t266 = t205 * t292;
t120 = t196 * t266 - t160;
t285 = qJD(4) * t201;
t303 = t200 * t204;
t181 = pkin(2) * t193 + pkin(8);
t314 = t181 * t200;
t358 = t120 * t303 + t203 * t361 + t285 * t314;
t246 = pkin(4) * t204 + pkin(9) * t201;
t236 = -pkin(3) - t246;
t343 = pkin(2) * t196;
t138 = t236 - t343;
t280 = qJD(5) * t203;
t301 = t203 * t204;
t357 = -t120 * t301 + t138 * t280 + t200 * t361;
t278 = t203 * qJD(4);
t289 = qJD(2) * t201;
t144 = t200 * t289 - t278;
t178 = -qJD(5) + t288;
t318 = t144 * t178;
t277 = qJD(2) * qJD(4);
t259 = t204 * t277;
t98 = -qJD(5) * t278 + (-t259 - t275) * t203 + t359 * t200;
t356 = -t98 + t318;
t286 = qJD(4) * t200;
t146 = t203 * t289 + t286;
t316 = t146 * t178;
t355 = t99 - t316;
t150 = t181 * t301;
t104 = t200 * t138 + t150;
t354 = pkin(5) * t99 + qJDD(6);
t106 = t125 * t204 + t198 * t201;
t310 = t195 * t202;
t124 = t193 * t310 - t195 * t300;
t60 = -t106 * t200 + t124 * t203;
t311 = t195 * t201;
t67 = -t197 * t311 - t204 * t90;
t69 = t194 * t311 + t204 * t95;
t224 = t198 * t142;
t91 = -t194 * t238 - t197 * t224;
t94 = t194 * t224 - t197 * t238;
t353 = -g(3) * t60 - g(2) * (-t200 * t67 - t203 * t91) - g(1) * (-t200 * t69 - t203 * t94);
t188 = t204 * qJDD(2);
t141 = t201 * t277 + qJDD(5) - t188;
t263 = t204 * t278;
t222 = -t200 * t281 + t263;
t302 = t201 * t203;
t352 = t141 * t302 - t178 * t222;
t350 = t146 ^ 2;
t342 = pkin(5) * t141;
t341 = pkin(5) * t144;
t340 = pkin(5) * t200;
t199 = -qJ(6) - pkin(9);
t155 = qJD(2) * pkin(2) + t266;
t112 = t193 * t155 + t196 * t267;
t108 = qJD(2) * pkin(8) + t112;
t176 = qJD(1) * t198 + qJD(3);
t315 = t176 * t201;
t83 = t108 * t204 + t315;
t80 = qJD(4) * pkin(9) + t83;
t111 = t155 * t196 - t160;
t89 = qJD(2) * t236 - t111;
t30 = -t200 * t80 + t203 * t89;
t20 = -qJ(6) * t146 + t30;
t15 = -pkin(5) * t178 + t20;
t338 = -t20 + t15;
t235 = pkin(5) * t201 - qJ(6) * t301;
t279 = qJD(6) * t203;
t337 = -t201 * t279 + t235 * qJD(4) + (-t150 + (qJ(6) * t201 - t138) * t200) * qJD(5) + t358;
t336 = (-qJ(6) * qJD(5) - qJD(4) * t181) * t302 + (-qJD(6) * t201 + (-qJ(6) * qJD(4) - qJD(5) * t181) * t204) * t200 + t357;
t282 = qJD(5) * t200;
t335 = (-t201 * t278 - t204 * t282) * t181 + t357;
t334 = -qJD(5) * t104 + t358;
t333 = qJ(6) * t98;
t332 = qJ(6) * t99;
t173 = t198 * qJDD(1) + qJDD(3);
t284 = qJD(4) * t204;
t172 = t205 * t276;
t323 = qJDD(2) * pkin(2);
t121 = -t202 * t260 + t172 + t323;
t77 = t193 * t121 + t360 * t196;
t73 = qJDD(2) * pkin(8) + t77;
t252 = t108 * t284 - t204 * t173 + t176 * t285 + t201 * t73;
t322 = qJDD(4) * pkin(4);
t17 = t252 - t322;
t11 = t17 + t354;
t331 = t11 * t200;
t330 = t17 * t200;
t31 = t200 * t89 + t203 * t80;
t21 = -qJ(6) * t144 + t31;
t329 = t178 * t21;
t328 = t178 * t30;
t327 = t178 * t31;
t326 = -t144 * t263 - t99 * t302;
t256 = qJD(5) * t199;
t151 = t245 * qJD(2);
t102 = t201 * t108;
t82 = t176 * t204 - t102;
t48 = t200 * t151 + t203 * t82;
t325 = t279 - t48 + (qJ(6) * t288 + t256) * t200;
t47 = t203 * t151 - t200 * t82;
t324 = -qJD(2) * t235 - qJD(6) * t200 + t203 * t256 - t47;
t321 = t120 * t144;
t320 = t120 * t146;
t319 = t120 * t201;
t317 = t146 * t144;
t312 = t194 * t202;
t308 = t195 * t205;
t304 = t200 * t201;
t299 = qJDD(1) - g(3);
t295 = pkin(2) * t308 - t124 * pkin(3);
t191 = t201 ^ 2;
t192 = t204 ^ 2;
t294 = t191 - t192;
t291 = qJD(2) * t120;
t287 = qJD(4) * t144;
t283 = qJD(5) * t144;
t274 = t229 * t200;
t273 = -t201 * t173 - t176 * t284 - t204 * t73;
t271 = t197 * t305;
t207 = qJD(2) ^ 2;
t270 = t201 * t207 * t204;
t269 = -t196 * t121 + t360 * t193;
t268 = pkin(8) + t340;
t265 = t146 * t284;
t264 = t178 * t286;
t262 = t201 * t280;
t261 = t178 * t289;
t18 = -t108 * t285 - t273;
t16 = qJDD(4) * pkin(9) + t18;
t45 = qJD(2) * t152 + qJDD(2) * t236 + t269;
t6 = t203 * t16 + t200 * t45 + t89 * t280 - t80 * t282;
t255 = -qJD(6) - t341;
t254 = t146 * t285 + t204 * t98;
t253 = -t98 + t283;
t250 = t146 * t262;
t248 = t201 * t259;
t247 = pkin(8) * t125 + t295;
t244 = -t15 * t203 - t200 * t21;
t243 = t15 * t200 - t203 * t21;
t242 = -t200 * t31 - t203 * t30;
t241 = t200 * t30 - t203 * t31;
t240 = t201 * t82 - t204 * t83;
t61 = t106 * t203 + t124 * t200;
t184 = pkin(5) * t203 + pkin(4);
t239 = t184 * t204 - t199 * t201;
t163 = pkin(2) * t271;
t237 = -pkin(2) * t312 + t91 * pkin(3) + t163;
t79 = -qJD(4) * pkin(4) - t82;
t233 = -t194 * t305 - t197 * t202;
t232 = -t141 * t200 + t178 * t280;
t231 = -g(1) * (t203 * t95 - t94 * t303) - g(2) * (-t203 * t90 - t91 * t303) - g(3) * (t124 * t303 + t125 * t203);
t230 = -g(1) * (t200 * t95 + t94 * t301) - g(2) * (-t200 * t90 + t91 * t301) - g(3) * (-t124 * t301 + t125 * t200);
t228 = g(1) * t69 + g(2) * t67 + g(3) * t106;
t227 = -g(1) * t94 - g(2) * t91 + g(3) * t124;
t226 = -g(1) * t95 + g(2) * t90 - g(3) * t125;
t225 = -g(3) * t198 + (-g(1) * t194 + g(2) * t197) * t195;
t223 = -pkin(8) * t90 + t237;
t221 = t200 * t284 + t262;
t220 = -t17 + t229;
t219 = -pkin(9) * t141 - t178 * t79;
t218 = pkin(2) * t233 + t94 * pkin(3);
t217 = -qJD(2) * t117 - t227;
t107 = -qJD(2) * pkin(3) - t111;
t182 = -pkin(3) - t343;
t216 = -qJDD(4) * t181 + (qJD(2) * t182 + t107 + t120) * qJD(4);
t215 = -g(1) * (t200 * t94 - t203 * t69) - g(2) * (t200 * t91 - t203 * t67) + g(3) * t61 - t6;
t7 = -qJD(5) * t31 - t16 * t200 + t203 * t45;
t214 = t229 - t252;
t213 = pkin(8) * t95 + t218;
t212 = -g(1) * t233 - g(3) * t308;
t211 = t242 * qJD(5) - t7 * t200 + t6 * t203;
t210 = t18 * t204 + t252 * t201 + (-t201 * t83 - t204 * t82) * qJD(4);
t206 = qJD(4) ^ 2;
t72 = -qJDD(2) * pkin(3) + t269;
t209 = qJDD(2) * t182 + t181 * t206 + t217 + t72;
t208 = t7 + t353;
t165 = t199 * t203;
t164 = t199 * t200;
t162 = qJDD(4) * t204 - t201 * t206;
t161 = qJDD(4) * t201 + t204 * t206;
t140 = t144 ^ 2;
t132 = (t181 + t340) * t201;
t128 = t203 * t138;
t119 = t142 * t290;
t118 = qJD(2) * t125;
t110 = pkin(5) * t221 + t181 * t284;
t109 = -t141 * t204 - t178 * t285;
t103 = -t181 * t303 + t128;
t97 = -qJ(6) * t304 + t104;
t96 = -t140 + t350;
t88 = -qJ(6) * t302 + t128 + (-pkin(5) - t314) * t204;
t70 = t315 + (qJD(2) * t340 + t108) * t204;
t59 = -t316 - t99;
t58 = -t98 - t318;
t57 = -qJD(4) * t105 - t119 * t204;
t56 = qJD(4) * t106 - t119 * t201;
t53 = (-t146 * t201 + t178 * t301) * qJD(2) - t232;
t52 = t178 * t282 + t141 * t203 + (t144 * t201 - t178 * t303) * qJD(2);
t49 = -t255 + t79;
t43 = -t200 * t318 - t203 * t99;
t42 = -t200 * t98 - t203 * t316;
t39 = t144 * t221 + t99 * t304;
t38 = t146 * t222 - t98 * t302;
t25 = (t99 + t264) * t204 + (t232 - t287) * t201;
t24 = (-t99 + t264) * t204 + (t232 + t287) * t201;
t23 = t254 + t352;
t22 = t254 - t352;
t13 = t60 * qJD(5) + t118 * t200 + t203 * t57;
t12 = -t61 * qJD(5) + t118 * t203 - t200 * t57;
t10 = -t200 * t355 + t203 * t356;
t9 = -t250 + (-t265 + (t98 + t283) * t201) * t200 + t326;
t8 = t250 + (t201 * t253 + t265) * t200 + t326;
t5 = -qJD(6) * t144 - t332 + t6;
t4 = -t105 * t98 + t13 * t178 - t141 * t61 + t146 * t56;
t3 = t105 * t99 - t12 * t178 + t141 * t60 + t144 * t56;
t2 = -qJD(6) * t146 + t333 + t342 + t7;
t1 = -t12 * t146 - t13 * t144 + t60 * t98 - t61 * t99;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t299, 0, 0, 0, 0, 0, 0 (qJDD(2) * t205 - t202 * t207) * t195 (-qJDD(2) * t202 - t205 * t207) * t195, 0, -g(3) + (t198 ^ 2 + (t202 ^ 2 + t205 ^ 2) * t195 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -qJD(2) * t118 - qJDD(2) * t124, qJD(2) * t119 - qJDD(2) * t125, 0, -t111 * t118 - t112 * t119 + t124 * t269 + t125 * t77 + t173 * t198 - g(3), 0, 0, 0, 0, 0, 0, -t124 * t188 - qJD(4) * t56 - qJDD(4) * t105 + (-t118 * t204 + t124 * t285) * qJD(2), t124 * t275 - qJD(4) * t57 - qJDD(4) * t106 + (t118 * t201 + t124 * t284) * qJD(2) (t105 * t201 + t106 * t204) * qJDD(2) + (t201 * t56 + t204 * t57 + (t105 * t204 - t106 * t201) * qJD(4)) * qJD(2), t105 * t252 + t106 * t18 + t107 * t118 + t124 * t72 - t56 * t82 + t57 * t83 - g(3), 0, 0, 0, 0, 0, 0, t3, t4, t1, t105 * t17 + t12 * t30 + t13 * t31 + t56 * t79 + t6 * t61 + t60 * t7 - g(3), 0, 0, 0, 0, 0, 0, t3, t4, t1, t105 * t11 + t12 * t15 + t13 * t21 + t2 * t60 + t49 * t56 + t5 * t61 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t172 - g(2) * (t271 - t312) + t212, -g(1) * (t194 * t306 - t197 * t205) - g(2) * (-t194 * t205 - t197 * t306) - t299 * t310, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t196 * t323 - t217 - t269, -t193 * t323 - t226 + t291 - t77, 0, -g(2) * t163 + t111 * t117 - t112 * t120 + (g(2) * t312 + t77 * t193 - t196 * t269 + t212) * pkin(2), qJDD(2) * t191 + 0.2e1 * t248, 0.2e1 * t188 * t201 - 0.2e1 * t277 * t294, t161, qJDD(2) * t192 - 0.2e1 * t248, t162, 0, t201 * t216 - t204 * t209, t201 * t209 + t204 * t216, t210 + t226 + (qJDD(2) * t181 - t291) * (t191 + t192) -g(1) * t213 - g(2) * t223 - g(3) * t247 - t107 * t117 + t120 * t240 + t181 * t210 + t72 * t182, t38, t9, t23, t39, t25, t109, t103 * t141 - t334 * t178 + (-t7 + (t144 * t181 + t200 * t79) * qJD(4)) * t204 + (qJD(4) * t30 + t181 * t99 + t280 * t79 - t321 + t330) * t201 + t230, -t104 * t141 + t335 * t178 + (t6 + (t146 * t181 + t203 * t79) * qJD(4)) * t204 + (-qJD(4) * t31 + t17 * t203 - t181 * t98 - t282 * t79 - t320) * t201 + t231, t103 * t98 - t104 * t99 - t334 * t146 - t335 * t144 + t242 * t284 + (qJD(5) * t241 - t200 * t6 - t203 * t7 + t227) * t201, t6 * t104 + t7 * t103 - t79 * t319 - g(1) * (t246 * t94 + t213) - g(2) * (t246 * t91 + t223) - g(3) * (-t124 * t246 + t247) + t335 * t31 + t334 * t30 + (t17 * t201 + t284 * t79) * t181, t38, t9, t23, t39, t25, t109, t110 * t144 + t132 * t99 + t141 * t88 + (t286 * t49 - t2) * t204 - t337 * t178 + (qJD(4) * t15 + t280 * t49 - t321 + t331) * t201 + t230, t110 * t146 - t132 * t98 - t141 * t97 + (t278 * t49 + t5) * t204 + t336 * t178 + (-qJD(4) * t21 + t11 * t203 - t282 * t49 - t320) * t201 + t231, t88 * t98 - t97 * t99 - t337 * t146 - t336 * t144 + t244 * t284 + (qJD(5) * t243 - t2 * t203 - t200 * t5 + t227) * t201, t5 * t97 + t2 * t88 + t11 * t132 - g(1) * (t239 * t94 + t268 * t95 + t218) - g(2) * (t239 * t91 - t268 * t90 + t237) - g(3) * (-t124 * t239 + t125 * t268 + t295) + (t110 - t319) * t49 + t336 * t21 + t337 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t225 + t173, 0, 0, 0, 0, 0, 0, t162, -t161, 0, -qJD(4) * t240 + t18 * t201 - t204 * t252 + t225, 0, 0, 0, 0, 0, 0, t24, t22, t8 (-qJD(4) * t241 - t17) * t204 + (qJD(4) * t79 + t211) * t201 + t225, 0, 0, 0, 0, 0, 0, t24, t22, t8 (-qJD(4) * t243 - t11) * t204 + (qJD(4) * t49 + qJD(5) * t244 - t2 * t200 + t203 * t5) * t201 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t270, t294 * t207, t275, t270, t188, qJDD(4), qJD(4) * t83 - t107 * t289 + t214, -t107 * t288 + (t82 + t102) * qJD(4) + t228 + t273, 0, 0, t42, t10, t53, t43, t52, t261, -t30 * t289 - pkin(4) * t99 - t144 * t83 + t178 * t47 + t219 * t200 + (pkin(9) * qJD(5) * t178 + t220) * t203, t31 * t289 + pkin(4) * t98 - t146 * t83 + t330 + (-pkin(9) * t282 - t48) * t178 + t219 * t203 - t274, t144 * t48 + t146 * t47 + (t6 + t328 + (qJD(5) * t146 - t99) * pkin(9)) * t203 + (pkin(9) * t253 + t327 - t7) * t200 - t228, -t30 * t47 - t31 * t48 - t79 * t83 + t220 * pkin(4) + (t211 - t228) * pkin(9), t42, t10, t53, t43, t52, t261, -t15 * t289 + t141 * t164 - t144 * t70 - t184 * t99 - t324 * t178 + (-t49 * t288 + (t49 + t341) * qJD(5)) * t200 + (-t11 + t229) * t203, t331 + t141 * t165 - t146 * t70 + t184 * t98 + t325 * t178 + (t146 * t340 + t203 * t49) * qJD(5) + (t201 * t21 - t301 * t49) * qJD(2) - t274, t164 * t98 + t165 * t99 - t324 * t146 - t325 * t144 + (t15 * t178 + t5) * t203 + (-t2 + t329) * t200 - t228, -t5 * t165 + t2 * t164 - t11 * t184 - g(1) * (-t184 * t68 - t199 * t69) - g(2) * (-t184 * t66 - t199 * t67) - g(3) * (-t105 * t184 - t106 * t199) + (pkin(5) * t282 - t70) * t49 + t325 * t21 + t324 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t317, t96, t58, -t317, t59, t141, -t146 * t79 + t208 - t327, t144 * t79 + t215 - t328, 0, 0, t317, t96, t58, -t317, t59, t141, 0.2e1 * t342 + t333 - t329 + (t255 - t49) * t146 + t208, -pkin(5) * t350 + t332 - t178 * t20 + (qJD(6) + t49) * t144 + t215, pkin(5) * t98 - t144 * t338, t338 * t21 + (-t49 * t146 + t2 + t353) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t355, t356, -t140 - t350, t144 * t21 + t146 * t15 - t214 - t322 + t354;];
tau_reg  = t14;
