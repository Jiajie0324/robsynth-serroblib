% Calculate minimal parameter regressor of coriolis matrix for
% S6PRPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x21]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:58
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRPRRP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:58:31
% EndTime: 2019-03-08 19:58:38
% DurationCPUTime: 3.05s
% Computational Cost: add. (3951->318), mult. (9678->512), div. (0->0), fcn. (10280->10), ass. (0->255)
t241 = sin(qJ(5));
t389 = 0.2e1 * t241;
t362 = cos(pkin(11));
t230 = -t362 * pkin(2) - pkin(3);
t242 = sin(qJ(4));
t245 = cos(qJ(4));
t283 = -t245 * pkin(4) - t242 * pkin(9);
t193 = t283 + t230;
t244 = cos(qJ(5));
t181 = t244 * t193;
t240 = sin(pkin(11));
t229 = t240 * pkin(2) + pkin(8);
t342 = t245 * t229;
t317 = t241 * t342;
t152 = -t181 + t317;
t345 = t242 * t244;
t315 = qJ(6) * t345;
t127 = -t152 - t315;
t384 = t127 / 0.2e1;
t121 = -t315 + t181 + (-t229 * t241 - pkin(5)) * t245;
t385 = -t121 / 0.2e1;
t295 = t384 + t385;
t361 = sin(pkin(6));
t281 = t362 * t361;
t243 = sin(qJ(2));
t293 = t243 * t361;
t375 = cos(qJ(2));
t179 = t240 * t293 - t375 * t281;
t357 = t179 * t241;
t363 = cos(pkin(6));
t292 = t363 * t242;
t286 = t361 * t375;
t180 = t240 * t286 + t243 * t281;
t351 = t180 * t245;
t156 = t292 + t351;
t358 = t156 * t244;
t86 = t357 + t358;
t388 = t295 * t86;
t387 = -t121 + t127;
t346 = t241 * t245;
t352 = t180 * t244;
t101 = t179 * t346 + t352;
t386 = t101 / 0.2e1;
t371 = t245 * pkin(9);
t373 = t242 * pkin(4);
t213 = -t371 + t373;
t205 = t244 * t213;
t347 = t241 * t242;
t207 = t229 * t347;
t343 = t244 * t245;
t140 = t242 * pkin(5) - qJ(6) * t343 + t205 + t207;
t383 = t140 / 0.2e1;
t374 = t241 * pkin(5);
t294 = t229 + t374;
t184 = t294 * t242;
t382 = t184 / 0.2e1;
t370 = -qJ(6) - pkin(9);
t211 = t370 * t244;
t381 = t211 / 0.2e1;
t236 = t241 ^ 2;
t380 = t236 / 0.2e1;
t238 = t244 ^ 2;
t379 = -t238 / 0.2e1;
t378 = -t241 / 0.2e1;
t377 = -t242 / 0.2e1;
t376 = t244 / 0.2e1;
t372 = t245 * pkin(5);
t204 = t241 * t213;
t316 = t229 * t345;
t151 = -qJ(6) * t346 + t204 - t316;
t314 = t244 * t342;
t153 = t241 * t193 + t314;
t128 = -qJ(6) * t347 + t153;
t185 = t294 * t245;
t302 = t121 * t378;
t250 = t128 * t376 + t302 - t185 / 0.2e1;
t17 = t250 * t245 + (t140 * t378 + t151 * t376 + t382) * t242;
t318 = -t372 / 0.2e1;
t287 = t385 + t318;
t25 = (t384 + t287) * t345;
t369 = t17 * qJD(4) + t25 * qJD(5);
t368 = pkin(5) * qJD(5);
t355 = t179 * t244;
t359 = t156 * t241;
t85 = -t355 + t359;
t367 = t85 * t241;
t366 = t85 * t245;
t365 = t86 * t244;
t364 = t86 * t245;
t155 = t180 * t242 - t363 * t245;
t59 = t155 * t241;
t360 = t155 * t242;
t356 = t179 * t242;
t107 = t179 * t245;
t18 = (t372 / 0.2e1 + t295) * t244;
t354 = t18 * qJD(2);
t353 = t180 * t241;
t350 = t184 * t241;
t349 = t236 * t245;
t237 = t242 ^ 2;
t348 = t237 * t241;
t344 = t244 * t237;
t341 = t25 * qJD(2);
t28 = t387 * t347;
t340 = t28 * qJD(2);
t102 = -t179 * t343 + t353;
t264 = t101 * t378 + t102 * t376;
t301 = t107 / 0.2e1;
t40 = (t301 + t264) * t242;
t339 = t40 * qJD(1);
t338 = t86 * qJD(5);
t222 = t238 - t236;
t221 = t238 + t236;
t239 = t245 ^ 2;
t223 = t239 - t237;
t337 = qJD(4) * t241;
t336 = qJD(4) * t244;
t335 = qJD(5) * t241;
t334 = qJD(5) * t244;
t333 = qJD(5) * t245;
t332 = t155 * qJD(4);
t331 = t156 * qJD(4);
t200 = t221 * t237;
t330 = t200 * qJD(2);
t202 = t223 * t241;
t329 = t202 * qJD(2);
t203 = t244 * t239 - t344;
t328 = t203 * qJD(2);
t327 = t221 * qJD(4);
t326 = t223 * qJD(2);
t325 = t242 * qJD(2);
t324 = t242 * qJD(4);
t323 = t242 * qJD(5);
t322 = t245 * qJD(2);
t321 = t245 * qJD(4);
t320 = pkin(5) * t345;
t319 = 0.1e1 / 0.2e1 + t379;
t313 = t244 * t325;
t312 = t241 * t323;
t311 = t241 * t333;
t310 = t244 * t323;
t309 = t244 * t333;
t308 = t230 * t322;
t307 = t241 * t334;
t306 = t241 * t336;
t305 = t242 * t321;
t304 = t242 * t322;
t303 = t244 * t324;
t169 = t356 / 0.2e1;
t300 = -t347 / 0.2e1;
t299 = t347 / 0.2e1;
t298 = t346 / 0.2e1;
t297 = -t345 / 0.2e1;
t296 = t345 / 0.2e1;
t291 = pkin(5) * t310;
t290 = -qJD(5) + t322;
t289 = t241 * t303;
t288 = t155 * t296;
t285 = t357 / 0.2e1 - t86 / 0.2e1;
t284 = t355 / 0.2e1 + t85 / 0.2e1;
t282 = t180 / 0.2e1 - t360 / 0.2e1;
t280 = t85 * t296 + t86 * t300;
t234 = -t244 * pkin(5) - pkin(4);
t8 = t295 * t211 + (t383 + t234 * t297 - t350 / 0.2e1) * pkin(5);
t93 = t234 * t374;
t279 = -t8 * qJD(2) + t93 * qJD(4);
t14 = (t366 / 0.2e1 - t102 / 0.2e1) * t244 + (-t364 / 0.2e1 + t386) * t241;
t29 = (t121 * t245 + t140 * t242) * t244 + (t128 * t245 + t151 * t242) * t241;
t278 = t14 * qJD(1) - t29 * qJD(2);
t20 = (-t358 / 0.2e1 - t285) * t242;
t55 = t204 * t245 + (-t153 + t314) * t242;
t277 = -t20 * qJD(1) + t55 * qJD(2);
t21 = (-t359 / 0.2e1 + t284) * t242;
t54 = t152 * t242 + (-t207 + t205) * t245;
t276 = -t21 * qJD(1) - t54 * qJD(2);
t33 = t169 + t280;
t51 = (t121 * t244 + t128 * t241) * t242;
t275 = t33 * qJD(1) - t51 * qJD(2);
t267 = t367 / 0.2e1 + t365 / 0.2e1;
t10 = (-t156 / 0.2e1 + t267) * t245 + (-t236 / 0.2e1 + t319) * t360;
t12 = (t156 - t365 - t367) * t155;
t274 = t12 * qJD(1) + t10 * qJD(3);
t11 = -t85 * t101 + t86 * t102 - t155 * t356;
t273 = t11 * qJD(1) + t40 * qJD(3);
t210 = t370 * t241;
t272 = t210 * t241 + t211 * t244;
t108 = -t152 * t245 - t229 * t348;
t35 = -t241 * t282 + t245 * t284;
t271 = t35 * qJD(1) - t108 * qJD(2);
t109 = -t153 * t245 - t229 * t344;
t34 = t244 * t282 + t245 * t285;
t270 = t34 * qJD(1) + t109 * qJD(2);
t269 = t290 * t242;
t268 = t371 / 0.2e1 - t373 / 0.2e1;
t259 = t268 * t241;
t157 = t204 / 0.2e1 - t259;
t266 = pkin(4) * t336 - t157 * qJD(2);
t258 = t268 * t244;
t158 = -t205 / 0.2e1 + t258;
t265 = pkin(4) * t337 - t158 * qJD(2);
t263 = t244 * t269;
t168 = -t356 / 0.2e1;
t104 = t169 + t168;
t262 = -t104 * qJD(1) - t230 * t325;
t195 = (t380 + t379) * t242;
t261 = -t195 * qJD(2) + t306;
t260 = t313 + t337;
t257 = t241 * qJD(2) * t344 + t195 * qJD(4);
t201 = t222 * t237;
t256 = t201 * qJD(2) + 0.2e1 * t289;
t255 = -t222 * qJD(4) + t313 * t389;
t246 = -t250 * t155 + t156 * t382 - t85 * t140 / 0.2e1 + t86 * t151 / 0.2e1;
t248 = -t101 * t210 / 0.2e1 + t102 * t381 + t234 * t169;
t2 = t246 + t248;
t26 = t121 * t140 + t128 * t151 + t184 * t185;
t254 = t2 * qJD(1) + t26 * qJD(2) + t17 * qJD(3);
t27 = t387 * t128 + t184 * t320;
t4 = -t388 + (t155 * t297 + t386) * pkin(5);
t253 = -t4 * qJD(1) + t27 * qJD(2) + t25 * qJD(3);
t252 = t351 / 0.2e1 + t292 / 0.2e1;
t189 = t211 * t300;
t251 = -t189 + (t128 / 0.2e1 + t210 * t377) * t244;
t174 = (-0.1e1 + t221) * t245 * t242;
t249 = t10 * qJD(1) + t17 * qJD(2) + t174 * qJD(3);
t182 = t236 * t377 + t319 * t242;
t30 = t252 - t267;
t39 = -t342 / 0.2e1 + t287 * t241 + t251;
t247 = -t30 * qJD(1) + t39 * qJD(2) - t182 * qJD(3) - qJD(4) * t272;
t232 = t238 * t245;
t231 = t324 / 0.2e1;
t226 = t241 * t324;
t199 = (t322 - qJD(5) / 0.2e1) * t242;
t194 = t260 * pkin(5);
t191 = t195 * qJD(5);
t183 = (t238 / 0.2e1 + t380 + 0.1e1 / 0.2e1) * t242;
t124 = -pkin(5) * t346 - t211 * t299 - t189;
t123 = t207 + t205 / 0.2e1 + t258;
t122 = t316 - t204 / 0.2e1 - t259;
t105 = 0.2e1 * t169;
t61 = t155 * t244;
t38 = t302 + t342 / 0.2e1 + pkin(5) * t298 + t251;
t37 = t364 / 0.2e1 + t288 + t179 * t298 + t352 / 0.2e1;
t36 = -t366 / 0.2e1 + t155 * t300 + t244 * t301 - t353 / 0.2e1;
t32 = t168 + t280;
t31 = t252 + t267;
t23 = t156 * t296 + t179 * t300 + t86 * t377;
t22 = t156 * t299 + t179 * t296 + t85 * t377;
t19 = (t295 + t318) * t244;
t13 = (t85 * t376 + t86 * t378) * t245 + t264;
t9 = t121 * t381 - t211 * t384 + (t234 * t296 + t350 / 0.2e1 + t383) * pkin(5);
t7 = pkin(5) * t59;
t5 = t388 + (t288 + t386) * pkin(5);
t3 = t40 * qJD(2) + t10 * qJD(4);
t1 = t246 - t248;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11 * qJD(2) + t12 * qJD(4); 0, 0, -qJD(2) * t293, -qJD(2) * t286 (-t179 * t240 - t362 * t180) * qJD(2) * pkin(2), 0, 0, 0, 0, 0, t105 * qJD(4) - t180 * t322, t107 * qJD(4) + t180 * t325, 0, 0, 0, 0, 0 (-t101 * t245 - t179 * t348) * qJD(2) + t22 * qJD(4) + t37 * qJD(5) (t102 * t245 - t179 * t344) * qJD(2) + t23 * qJD(4) + t36 * qJD(5), t13 * qJD(4) + (-t101 * t244 - t102 * t241) * t325 (t101 * t121 + t102 * t128 - t184 * t356) * qJD(2) + t1 * qJD(4) + t5 * qJD(5) + t32 * qJD(6) + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * qJD(2) - t331, t107 * qJD(2) + t332, 0, 0, 0, 0, 0, t22 * qJD(2) + t59 * qJD(5) - t244 * t331, t23 * qJD(2) + t61 * qJD(5) + t241 * t331, t13 * qJD(2) - t221 * t332, t1 * qJD(2) + (t155 * t272 + t156 * t234) * qJD(4) + t7 * qJD(5) + t31 * qJD(6) + t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37 * qJD(2) + t59 * qJD(4) - t338, t36 * qJD(2) + t61 * qJD(4) + t85 * qJD(5), 0, -pkin(5) * t338 + t5 * qJD(2) + t7 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 * qJD(2) + t31 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104 * qJD(4), 0, 0, 0, 0, 0, 0, -t21 * qJD(4) - t34 * qJD(5), -t20 * qJD(4) - t35 * qJD(5), t14 * qJD(4), t2 * qJD(4) - t4 * qJD(5) + t33 * qJD(6) - t273; 0, 0, 0, 0, 0, t305, t223 * qJD(4), 0, 0, 0, t230 * t324, t230 * t321, -t237 * t307 + t238 * t305, -t201 * qJD(5) - 0.2e1 * t245 * t289, -t203 * qJD(4) + t242 * t311, t202 * qJD(4) + t242 * t309, -t305, -t54 * qJD(4) - t109 * qJD(5), t55 * qJD(4) + t108 * qJD(5), -t29 * qJD(4) - t28 * qJD(5) + t200 * qJD(6), t26 * qJD(4) + t27 * qJD(5) - t51 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t339 + t369; 0, 0, 0, 0, 0, t304, t326, t321, -t324, 0, -t229 * t321 - t262, t229 * t324 + t308, -t191 + (t238 * t325 + t306) * t245 (t232 - t349) * qJD(4) + (-qJD(5) - t322) * t345 * t389, t226 - t328, t303 + t329, -t199 (t241 * t283 - t314) * qJD(4) + t123 * qJD(5) + t276 (t244 * t283 + t317) * qJD(4) + t122 * qJD(5) + t277 ((-t210 * t245 + t151) * t244 + (t211 * t245 - t140) * t241) * qJD(4) + t19 * qJD(5) + t278 (t140 * t210 - t151 * t211 + t185 * t234) * qJD(4) + t9 * qJD(5) + t38 * qJD(6) + t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, -t256, t241 * t269, t263, t231, t123 * qJD(4) - t153 * qJD(5) - t270, t122 * qJD(4) + t152 * qJD(5) - t271, pkin(5) * t312 + t19 * qJD(4) - t340, t9 * qJD(4) - t128 * t368 + t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, t38 * qJD(4) + t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t339 + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t324, -t321, 0, 0, 0, 0, 0, -t303 - t311, t226 - t309 (t232 + t349) * qJD(4) (t242 * t234 - t245 * t272) * qJD(4) + t124 * qJD(5) + t183 * qJD(6) + t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t241 * t321 - t310, -t244 * t321 + t312, 0, t124 * qJD(4) - t291 + t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104 * qJD(2), 0, 0, 0, 0, 0, 0, t21 * qJD(2), t20 * qJD(2), -t14 * qJD(2), -t2 * qJD(2) - t30 * qJD(6) - t274; 0, 0, 0, 0, 0, -t304, -t326, 0, 0, 0, t262, -t308, -t238 * t304 - t191, t263 * t389, -t309 + t328, t311 - t329, t199, t158 * qJD(5) - t276, t157 * qJD(5) - t277, t18 * qJD(5) - t278, -t8 * qJD(5) + t39 * qJD(6) - t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t182 * qJD(6) - t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t307, t222 * qJD(5), 0, 0, 0, -pkin(4) * t335, -pkin(4) * t334, t221 * qJD(6), t93 * qJD(5) - qJD(6) * t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t261, -t255, -t290 * t244, t290 * t241, -t325 / 0.2e1, -pkin(9) * t334 - t265, pkin(9) * t335 - t266, -pkin(5) * t334 + t354, t211 * t368 + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t327, t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 * qJD(2), t35 * qJD(2), 0, t4 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, t256 (-t241 * t325 + t336) * t245, -t260 * t245, t231, -t158 * qJD(4) + t270, -t157 * qJD(4) + t271, -t18 * qJD(4) + t340, t8 * qJD(4) - qJD(6) * t320 - t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t261, t255, t244 * t322, -t241 * t322, t325 / 0.2e1, t265, t266, -t354, -qJD(6) * t374 - t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33 * qJD(2) + t30 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, -t39 * qJD(4) - t275 + t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t182 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327, pkin(5) * t335 - t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t6;
