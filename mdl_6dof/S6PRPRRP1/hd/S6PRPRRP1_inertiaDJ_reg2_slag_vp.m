% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:58
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRRP1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRP1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 19:58:29
% EndTime: 2019-03-08 19:58:36
% DurationCPUTime: 2.16s
% Computational Cost: add. (1637->220), mult. (4572->381), div. (0->0), fcn. (4354->10), ass. (0->146)
t138 = cos(pkin(6));
t137 = cos(pkin(11));
t79 = sin(pkin(11));
t80 = sin(pkin(6));
t83 = sin(qJ(2));
t86 = cos(qJ(2));
t38 = (t137 * t83 + t79 * t86) * t80;
t82 = sin(qJ(4));
t85 = cos(qJ(4));
t93 = t138 * t85 - t38 * t82;
t162 = t93 * qJD(4);
t161 = -0.4e1 * t82;
t128 = t85 * qJD(4);
t84 = cos(qJ(5));
t74 = qJD(5) * t84;
t81 = sin(qJ(5));
t48 = t81 * t128 + t82 * t74;
t160 = t48 * pkin(5);
t75 = t81 ^ 2;
t77 = t84 ^ 2;
t141 = t75 - t77;
t69 = pkin(2) * t79 + pkin(8);
t159 = t82 * qJD(6) + (qJ(6) * qJD(4) + qJD(5) * t69) * t85;
t158 = pkin(4) * t82;
t157 = pkin(5) * t84;
t156 = pkin(9) * t85;
t27 = t138 * t82 + t38 * t85;
t108 = t137 * t86;
t136 = qJD(2) * t80;
t115 = t83 * t136;
t35 = -t108 * t136 + t79 * t115;
t15 = t27 * qJD(4) - t35 * t82;
t155 = t15 * t93;
t154 = t15 * t82;
t110 = t69 * t128;
t28 = t110 + t160;
t153 = t28 * t81;
t152 = t28 * t84;
t36 = qJD(2) * t38;
t37 = (t79 * t83 - t108) * t80;
t151 = t36 * t37;
t144 = -qJ(6) - pkin(9);
t59 = t144 * t81;
t150 = t59 * t82;
t60 = t144 * t84;
t149 = t60 * t82;
t148 = t69 * t81;
t147 = t81 * t85;
t146 = t82 * t84;
t145 = t84 * t85;
t104 = -t85 * pkin(4) - t82 * pkin(9);
t70 = -t137 * pkin(2) - pkin(3);
t92 = t104 + t70;
t91 = qJD(5) * t92;
t103 = -t156 + t158;
t94 = t103 * qJD(4);
t143 = -t81 * t94 - t84 * t91;
t72 = t82 * qJD(4);
t112 = t69 * t72;
t142 = t81 * t112 + t84 * t94;
t54 = t69 * t145;
t23 = t81 * t92 + t54;
t76 = t82 ^ 2;
t140 = -t85 ^ 2 + t76;
t139 = qJ(6) * t82;
t135 = qJD(4) * t81;
t134 = qJD(4) * t84;
t133 = qJD(5) * t76;
t132 = qJD(5) * t81;
t131 = qJD(5) * t82;
t130 = qJD(5) * t85;
t127 = t69 * t147;
t126 = 0.2e1 * qJD(4) * t70;
t125 = -0.2e1 * t132;
t124 = pkin(5) * t72;
t123 = pkin(5) * t132;
t122 = t75 * t128;
t121 = t93 * t132;
t44 = (pkin(5) * t81 + t69) * t82;
t120 = t44 * t132;
t119 = t69 * t133;
t118 = t81 * t131;
t117 = t81 * t130;
t116 = t84 * t130;
t114 = t81 * t74;
t113 = t82 * t128;
t111 = t84 * t128;
t71 = -pkin(4) - t157;
t109 = -t71 + t157;
t107 = t140 * qJD(4);
t106 = t76 * t114;
t105 = t81 * t111;
t102 = pkin(5) * t75 + t71 * t84;
t17 = -t27 * t81 + t37 * t84;
t18 = t27 * t84 + t37 * t81;
t101 = -t17 * t84 - t18 * t81;
t100 = t17 * t81 - t18 * t84;
t41 = t84 * t92;
t19 = -t84 * t139 + t41 + (-pkin(5) - t148) * t85;
t20 = -t81 * t139 + t23;
t99 = -t19 * t84 - t20 * t81;
t98 = t19 * t81 - t20 * t84;
t22 = t41 - t127;
t97 = -t22 * t84 - t23 * t81;
t96 = t22 * t81 - t23 * t84;
t9 = t15 * t81 - t74 * t93;
t10 = -t15 * t84 - t121;
t46 = -t111 + t118;
t47 = t84 * t72 + t117;
t16 = -t35 * t85 + t162;
t7 = -t18 * qJD(5) - t16 * t81 + t36 * t84;
t8 = t36 * t81 - t27 * t132 + (qJD(5) * t37 + t16) * t84;
t4 = t101 * qJD(5) - t7 * t81 + t8 * t84;
t13 = t47 * t69 + t143;
t14 = -t23 * qJD(5) + t142;
t90 = t97 * qJD(5) - t13 * t84 - t14 * t81;
t89 = t154 + t16 * t85 + (-t27 * t82 - t85 * t93) * qJD(4);
t42 = -t84 * qJD(6) - t144 * t132;
t43 = -t81 * qJD(6) + t144 * t74;
t88 = -t42 * t84 - t43 * t81 + (-t59 * t84 + t60 * t81) * qJD(5);
t87 = qJ(6) * t118 - t159 * t84 - t81 * t91 + t142;
t66 = t77 * t128;
t64 = -0.2e1 * t113;
t63 = -0.2e1 * t114;
t62 = 0.2e1 * t114;
t57 = t77 * t113;
t56 = t75 * t113;
t53 = -0.2e1 * t141 * qJD(5);
t49 = t81 * t72 - t116;
t45 = t66 + t122;
t34 = 0.2e1 * t57 - 0.2e1 * t106;
t33 = 0.2e1 * t56 + 0.2e1 * t106;
t32 = t141 * t131 - t105;
t31 = t114 * t161 - t122 + t66;
t30 = -0.2e1 * t81 * t107 + 0.2e1 * t82 * t116;
t29 = 0.2e1 * t82 * t117 + 0.2e1 * t140 * t134;
t25 = t105 * t161 + 0.2e1 * t141 * t133;
t24 = 0.2e1 * t56 + 0.2e1 * t57 - 0.2e1 * t113;
t12 = (qJ(6) * qJD(5) + qJD(4) * t69) * t146 + t159 * t81 + t143;
t11 = t87 + t124;
t6 = (-t134 * t93 + t8) * t85 + (-qJD(4) * t18 - t10) * t82;
t5 = (-t135 * t93 - t7) * t85 + (qJD(4) * t17 + t9) * t82;
t3 = 0.2e1 * t17 * t7 + 0.2e1 * t18 * t8 - 0.2e1 * t155;
t2 = t101 * t128 + (t100 * qJD(5) - t7 * t84 - t8 * t81) * t82;
t1 = (-t100 * qJD(4) - t15) * t85 + (t4 - t162) * t82;
t21 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t35 * t38 + 0.2e1 * t151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t16 * t27 + 0.2e1 * t151 - 0.2e1 * t155, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t115, -t86 * t136, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t35, 0 (-t137 * t36 - t35 * t79) * pkin(2), 0, 0, 0, 0, 0, 0, -t36 * t85 + t37 * t72, t37 * t128 + t36 * t82, t89, t36 * t70 + t69 * t89, 0, 0, 0, 0, 0, 0, t5, t6, t2, -t13 * t18 + t14 * t17 + t22 * t7 + t23 * t8 + (-t128 * t93 + t154) * t69, 0, 0, 0, 0, 0, 0, t5, t6, t2, t11 * t17 - t12 * t18 + t15 * t44 + t19 * t7 + t20 * t8 - t28 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t113, -0.2e1 * t107, 0, t64, 0, 0, t82 * t126, t85 * t126, 0, 0, t34, t25, t29, t33, t30, t64, 0.2e1 * t84 * t119 - 0.2e1 * t14 * t85 + 0.2e1 * (t22 + 0.2e1 * t127) * t72, -0.2e1 * t81 * t119 - 0.2e1 * t13 * t85 + 0.2e1 * (-t23 + 0.2e1 * t54) * t72, 0.2e1 * t97 * t128 + 0.2e1 * (qJD(5) * t96 + t13 * t81 - t14 * t84) * t82, 0.2e1 * t113 * t69 ^ 2 - 0.2e1 * t13 * t23 + 0.2e1 * t14 * t22, t34, t25, t29, t33, t30, t64, 0.2e1 * (t135 * t44 - t11) * t85 + 0.2e1 * (qJD(4) * t19 + t44 * t74 + t153) * t82, 0.2e1 * (t134 * t44 - t12) * t85 + 0.2e1 * (-qJD(4) * t20 - t120 + t152) * t82, 0.2e1 * t99 * t128 + 0.2e1 * (qJD(5) * t98 - t11 * t84 + t12 * t81) * t82, 0.2e1 * t11 * t19 - 0.2e1 * t12 * t20 + 0.2e1 * t28 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15 * t85 + t16 * t82 + (t27 * t85 - t82 * t93) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90 * t82 + (t140 * t69 - t96 * t85) * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, 0 (-qJD(4) * t98 - t28) * t85 + (qJD(4) * t44 + qJD(5) * t99 - t11 * t81 - t12 * t84) * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t16, 0, 0, 0, 0, 0, 0, 0, 0, t10, t9, t4, -t15 * pkin(4) + pkin(9) * t4, 0, 0, 0, 0, 0, 0, t10, t9, t4, -pkin(5) * t121 + t15 * t71 + t17 * t43 - t18 * t42 + t59 * t7 - t60 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, 0, -t72, 0, -t110, t112, 0, 0, -t32, t31, t49, t32, t47, 0 (pkin(9) * t145 + (-pkin(4) * t84 + t148) * t82) * qJD(5) + (t104 * t81 - t54) * qJD(4) (t103 * t81 + t69 * t146) * qJD(5) + (t104 * t84 + t127) * qJD(4), t90, -pkin(4) * t110 + pkin(9) * t90, -t32, t31, t49, t32, t47, 0, -t152 - t43 * t85 + (t71 * t147 + t150) * qJD(4) + (t102 * t82 + t44 * t81) * qJD(5), t153 - t42 * t85 + (t71 * t145 + t149) * qJD(4) + (t109 * t81 * t82 + t44 * t84) * qJD(5) (-t59 * t128 - t43 * t82 - t12 + (-t19 + t149) * qJD(5)) * t84 + (t60 * t128 + t42 * t82 - t11 + (-t20 + t150) * qJD(5)) * t81, pkin(5) * t120 + t11 * t59 + t12 * t60 + t19 * t43 - t20 * t42 + t28 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t72, -t128, 0, 0, 0, 0, 0, 0, 0, 0, -t47, t49, t45 (-t158 + (t75 + t77) * t156) * qJD(4), 0, 0, 0, 0, 0, 0, -t47, t49, t45 (-t123 + (-t59 * t81 - t60 * t84) * qJD(4)) * t85 + (qJD(4) * t71 + t88) * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t53, 0, t63, 0, 0, pkin(4) * t125, -0.2e1 * pkin(4) * t74, 0, 0, t62, t53, 0, t63, 0, 0, t109 * t125, 0.2e1 * t102 * qJD(5), 0.2e1 * t88, 0.2e1 * t123 * t71 + 0.2e1 * t42 * t60 + 0.2e1 * t43 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, -t8, 0, 0, 0, 0, 0, 0, 0, 0, t7, -t8, 0, t7 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, -t48, t72, t14, t13, 0, 0, 0, 0, -t46, 0, -t48, t72, t87 + 0.2e1 * t124, t12, t46 * pkin(5), t11 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, t46, 0, 0, 0, 0, 0, 0, 0, 0, -t48, t46, 0, -t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, -t132, 0, -pkin(9) * t74, pkin(9) * t132, 0, 0, 0, 0, t74, 0, -t132, 0, t43, t42, -pkin(5) * t74, t43 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, -t46, 0, t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, t74, 0, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t21;
