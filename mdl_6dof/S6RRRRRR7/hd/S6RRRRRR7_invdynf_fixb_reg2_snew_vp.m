% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 12:42
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 12:40:35
% EndTime: 2019-05-08 12:40:54
% DurationCPUTime: 19.02s
% Computational Cost: add. (241851->390), mult. (516105->586), div. (0->0), fcn. (423480->14), ass. (0->329)
t2648 = sin(pkin(6));
t2660 = cos(qJ(2));
t2708 = qJDD(1) * t2660;
t2654 = sin(qJ(2));
t2725 = qJD(1) * t2654;
t2741 = (qJD(2) * t2725 - t2708) * t2648;
t2669 = qJDD(3) + t2741;
t2649 = cos(pkin(6));
t2643 = qJD(1) * t2649 + qJD(2);
t2653 = sin(qJ(3));
t2659 = cos(qJ(3));
t2715 = t2648 * t2654;
t2707 = qJD(1) * t2715;
t2614 = -t2659 * t2643 + t2653 * t2707;
t2612 = qJD(4) + t2614;
t2609 = qJD(5) + t2612;
t2606 = qJD(6) + t2609;
t2740 = qJD(6) + t2606;
t2616 = t2643 * t2653 + t2659 * t2707;
t2714 = t2648 * t2660;
t2706 = qJD(1) * t2714;
t2635 = -qJD(3) + t2706;
t2652 = sin(qJ(4));
t2658 = cos(qJ(4));
t2598 = t2616 * t2652 + t2658 * t2635;
t2599 = t2616 * t2658 - t2635 * t2652;
t2651 = sin(qJ(5));
t2657 = cos(qJ(5));
t2577 = t2657 * t2598 + t2599 * t2651;
t2579 = -t2598 * t2651 + t2599 * t2657;
t2650 = sin(qJ(6));
t2656 = cos(qJ(6));
t2541 = t2656 * t2577 + t2579 * t2650;
t2739 = t2541 ^ 2;
t2543 = -t2577 * t2650 + t2579 * t2656;
t2738 = t2543 ^ 2;
t2737 = t2577 ^ 2;
t2736 = t2579 ^ 2;
t2735 = t2598 ^ 2;
t2734 = t2599 ^ 2;
t2733 = t2606 ^ 2;
t2732 = t2609 ^ 2;
t2731 = t2612 ^ 2;
t2730 = t2614 ^ 2;
t2729 = t2616 ^ 2;
t2728 = t2635 ^ 2;
t2727 = t2643 ^ 2;
t2726 = t2649 * g(3);
t2724 = qJD(1) * t2660;
t2723 = t2541 * t2543;
t2722 = t2577 * t2579;
t2721 = t2598 * t2599;
t2720 = t2609 * t2577;
t2719 = t2612 * t2598;
t2718 = t2616 * t2614;
t2717 = t2616 * t2635;
t2662 = qJD(1) ^ 2;
t2716 = t2648 ^ 2 * t2662;
t2713 = qJD(4) - t2612;
t2712 = qJD(5) - t2609;
t2711 = qJD(6) - t2606;
t2623 = (-pkin(2) * t2660 - pkin(9) * t2654) * t2648 * qJD(1);
t2642 = t2649 * qJDD(1) + qJDD(2);
t2655 = sin(qJ(1));
t2661 = cos(qJ(1));
t2637 = -g(1) * t2661 - g(2) * t2655;
t2709 = qJDD(1) * t2648;
t2620 = -pkin(1) * t2662 + pkin(8) * t2709 + t2637;
t2636 = t2655 * g(1) - t2661 * g(2);
t2668 = t2662 * t2648 * pkin(8) + qJDD(1) * pkin(1) + t2636;
t2665 = t2649 * t2668;
t2710 = t2660 * t2620 + t2654 * t2665;
t2567 = -t2727 * pkin(2) + t2642 * pkin(9) + (-g(3) * t2654 + t2623 * t2724) * t2648 + t2710;
t2624 = qJD(2) * t2706 + t2654 * t2709;
t2663 = -t2624 * pkin(9) - t2726 + (-t2643 * pkin(9) * t2724 + (-t2708 + (qJD(2) + t2643) * t2725) * pkin(2) - t2668) * t2648;
t2533 = t2659 * t2567 + t2653 * t2663;
t2593 = pkin(3) * t2614 - pkin(10) * t2616;
t2516 = -pkin(3) * t2728 + pkin(10) * t2669 - t2614 * t2593 + t2533;
t2700 = t2654 * t2620 - t2660 * t2665;
t2566 = -t2642 * pkin(2) - t2727 * pkin(9) + (g(3) * t2660 + t2623 * t2725) * t2648 + t2700;
t2705 = -t2616 * qJD(3) - t2653 * t2624 + t2659 * t2642;
t2570 = -t2705 - t2717;
t2677 = -t2659 * t2624 - t2653 * t2642;
t2588 = -qJD(3) * t2614 - t2677;
t2701 = -t2614 * t2635 - t2588;
t2519 = pkin(3) * t2570 + pkin(10) * t2701 + t2566;
t2479 = -t2652 * t2516 + t2658 * t2519;
t2698 = -qJDD(4) + t2705;
t2546 = -t2698 - t2721;
t2664 = -t2658 * t2588 - t2652 * t2669;
t2553 = -t2598 * qJD(4) - t2664;
t2463 = (-t2553 - t2719) * pkin(11) + t2546 * pkin(4) + t2479;
t2480 = t2658 * t2516 + t2652 * t2519;
t2584 = pkin(4) * t2612 - pkin(11) * t2599;
t2702 = t2652 * t2588 - t2658 * t2669;
t2675 = -qJD(4) * t2599 - t2702;
t2470 = -pkin(4) * t2735 + pkin(11) * t2675 - t2612 * t2584 + t2480;
t2435 = t2651 * t2463 + t2657 * t2470;
t2434 = t2657 * t2463 - t2651 * t2470;
t2666 = -t2657 * t2553 - t2651 * t2675;
t2511 = -t2577 * qJD(5) - t2666;
t2703 = t2651 * t2553 - t2657 * t2675;
t2674 = qJD(5) * t2579 + t2703;
t2704 = -t2650 * t2511 - t2656 * t2674;
t2532 = -t2567 * t2653 + t2659 * t2663;
t2699 = t2643 * t2706;
t2676 = -qJDD(5) + t2698;
t2527 = -t2676 - t2722;
t2424 = (-t2511 - t2720) * pkin(12) + t2527 * pkin(5) + t2434;
t2558 = pkin(5) * t2609 - pkin(12) * t2579;
t2425 = -pkin(5) * t2737 - pkin(12) * t2674 - t2609 * t2558 + t2435;
t2402 = t2424 * t2656 - t2425 * t2650;
t2403 = t2424 * t2650 + t2425 * t2656;
t2388 = t2402 * t2656 + t2403 * t2650;
t2389 = -t2402 * t2650 + t2403 * t2656;
t2380 = t2388 * t2657 + t2389 * t2651;
t2381 = -t2388 * t2651 + t2389 * t2657;
t2375 = -t2380 * t2652 + t2381 * t2658;
t2515 = -t2669 * pkin(3) - t2728 * pkin(10) + t2593 * t2616 - t2532;
t2481 = -t2675 * pkin(4) - t2735 * pkin(11) + t2584 * t2599 + t2515;
t2448 = pkin(5) * t2674 - pkin(12) * t2737 + t2558 * t2579 + t2481;
t2373 = t2375 * t2659 + t2448 * t2653;
t2374 = t2380 * t2658 + t2381 * t2652;
t2697 = t2373 * t2654 - t2374 * t2660;
t2456 = -t2543 * t2711 + t2704;
t2667 = -t2656 * t2511 + t2650 * t2674;
t2458 = t2541 * t2711 + t2667;
t2427 = t2456 * t2650 + t2458 * t2656;
t2428 = t2456 * t2656 - t2458 * t2650;
t2406 = t2427 * t2657 + t2428 * t2651;
t2407 = -t2427 * t2651 + t2428 * t2657;
t2393 = -t2406 * t2652 + t2407 * t2658;
t2482 = -t2738 - t2739;
t2391 = t2393 * t2659 + t2482 * t2653;
t2392 = t2406 * t2658 + t2407 * t2652;
t2696 = t2391 * t2654 - t2392 * t2660;
t2415 = t2434 * t2657 + t2435 * t2651;
t2416 = -t2434 * t2651 + t2435 * t2657;
t2398 = -t2415 * t2652 + t2416 * t2658;
t2395 = t2398 * t2659 + t2481 * t2653;
t2397 = t2415 * t2658 + t2416 * t2652;
t2695 = t2395 * t2654 - t2397 * t2660;
t2672 = -qJDD(6) + t2676;
t2498 = -t2672 - t2723;
t2502 = -t2733 - t2739;
t2471 = t2498 * t2656 + t2502 * t2650;
t2472 = -t2498 * t2650 + t2502 * t2656;
t2436 = t2471 * t2657 + t2472 * t2651;
t2437 = -t2471 * t2651 + t2472 * t2657;
t2418 = -t2436 * t2652 + t2437 * t2658;
t2455 = t2543 * t2740 - t2704;
t2405 = t2418 * t2659 + t2455 * t2653;
t2417 = t2436 * t2658 + t2437 * t2652;
t2694 = t2405 * t2654 - t2417 * t2660;
t2499 = t2672 - t2723;
t2524 = -t2733 - t2738;
t2477 = t2499 * t2650 + t2524 * t2656;
t2478 = t2499 * t2656 - t2524 * t2650;
t2444 = t2477 * t2657 + t2478 * t2651;
t2445 = -t2477 * t2651 + t2478 * t2657;
t2423 = -t2444 * t2652 + t2445 * t2658;
t2457 = -t2541 * t2740 - t2667;
t2412 = t2423 * t2659 + t2457 * t2653;
t2422 = t2444 * t2658 + t2445 * t2652;
t2693 = t2412 * t2654 - t2422 * t2660;
t2489 = -t2579 * t2712 - t2703;
t2491 = t2577 * t2712 + t2666;
t2464 = t2489 * t2651 + t2491 * t2657;
t2465 = t2489 * t2657 - t2491 * t2651;
t2433 = -t2464 * t2652 + t2465 * t2658;
t2521 = -t2736 - t2737;
t2430 = t2433 * t2659 + t2521 * t2653;
t2432 = t2464 * t2658 + t2465 * t2652;
t2692 = t2430 * t2654 - t2432 * t2660;
t2450 = -t2479 * t2652 + t2480 * t2658;
t2439 = t2450 * t2659 + t2515 * t2653;
t2449 = t2479 * t2658 + t2480 * t2652;
t2691 = t2439 * t2654 - t2449 * t2660;
t2534 = -t2732 - t2737;
t2494 = t2527 * t2657 + t2534 * t2651;
t2495 = -t2527 * t2651 + t2534 * t2657;
t2468 = -t2494 * t2652 + t2495 * t2658;
t2488 = (qJD(5) + t2609) * t2579 + t2703;
t2443 = t2468 * t2659 + t2488 * t2653;
t2467 = t2494 * t2658 + t2495 * t2652;
t2690 = t2443 * t2654 - t2467 * t2660;
t2528 = t2676 - t2722;
t2548 = -t2732 - t2736;
t2505 = t2528 * t2651 + t2548 * t2657;
t2506 = t2528 * t2657 - t2548 * t2651;
t2474 = -t2505 * t2652 + t2506 * t2658;
t2490 = t2511 - t2720;
t2447 = t2474 * t2659 + t2490 * t2653;
t2473 = t2505 * t2658 + t2506 * t2652;
t2689 = t2447 * t2654 - t2473 * t2660;
t2536 = -t2599 * t2713 - t2702;
t2538 = t2598 * t2713 + t2664;
t2504 = t2536 * t2658 - t2538 * t2652;
t2554 = -t2734 - t2735;
t2485 = t2504 * t2659 + t2554 * t2653;
t2503 = t2536 * t2652 + t2538 * t2658;
t2688 = t2485 * t2654 - t2503 * t2660;
t2560 = -t2731 - t2735;
t2523 = -t2546 * t2652 + t2560 * t2658;
t2535 = (qJD(4) + t2612) * t2599 + t2702;
t2493 = t2523 * t2659 + t2535 * t2653;
t2522 = t2546 * t2658 + t2560 * t2652;
t2687 = t2493 * t2654 - t2522 * t2660;
t2547 = t2698 - t2721;
t2575 = -t2731 - t2734;
t2526 = t2547 * t2658 - t2575 * t2652;
t2537 = t2553 - t2719;
t2497 = t2526 * t2659 + t2537 * t2653;
t2525 = t2547 * t2652 + t2575 * t2658;
t2686 = t2497 * t2654 - t2525 * t2660;
t2501 = -t2532 * t2653 + t2533 * t2659;
t2685 = t2501 * t2654 - t2566 * t2660;
t2571 = t2705 - t2717;
t2573 = (qJD(3) + t2635) * t2614 + t2677;
t2540 = t2571 * t2659 - t2573 * t2653;
t2583 = -t2729 - t2730;
t2684 = t2540 * t2654 - t2583 * t2660;
t2586 = t2669 - t2718;
t2589 = -t2728 - t2730;
t2551 = -t2586 * t2653 + t2589 * t2659;
t2683 = t2551 * t2654 - t2570 * t2660;
t2585 = -t2718 - t2669;
t2594 = -t2728 - t2729;
t2557 = t2585 * t2659 - t2594 * t2653;
t2682 = t2557 * t2654 + t2660 * t2701;
t2590 = -g(3) * t2714 - t2700;
t2591 = -g(3) * t2715 + t2710;
t2681 = t2590 * t2660 + t2591 * t2654;
t2601 = t2699 - t2624;
t2627 = t2643 * t2707;
t2602 = t2627 - t2741;
t2680 = t2601 * t2660 + t2602 * t2654;
t2646 = t2654 ^ 2;
t2611 = -t2646 * t2716 - t2727;
t2634 = t2660 * t2654 * t2716;
t2622 = t2634 - t2642;
t2679 = t2611 * t2660 + t2622 * t2654;
t2621 = t2634 + t2642;
t2647 = t2660 ^ 2;
t2625 = -t2647 * t2716 - t2727;
t2678 = t2621 * t2660 + t2625 * t2654;
t2633 = -qJDD(1) * t2655 - t2661 * t2662;
t2632 = qJDD(1) * t2661 - t2655 * t2662;
t2626 = (-t2646 - t2647) * t2716;
t2605 = -t2648 * t2668 - t2726;
t2603 = t2627 + t2741;
t2600 = t2699 + t2624;
t2596 = -t2621 * t2654 + t2625 * t2660;
t2592 = -t2611 * t2654 + t2622 * t2660;
t2582 = -t2601 * t2654 + t2602 * t2660;
t2581 = -t2648 * t2603 + t2649 * t2678;
t2580 = t2649 * t2603 + t2648 * t2678;
t2569 = -t2648 * t2600 + t2649 * t2679;
t2568 = t2649 * t2600 + t2648 * t2679;
t2565 = -t2648 * t2626 + t2649 * t2680;
t2564 = t2649 * t2626 + t2648 * t2680;
t2556 = t2585 * t2653 + t2594 * t2659;
t2555 = -t2590 * t2654 + t2591 * t2660;
t2550 = t2586 * t2659 + t2589 * t2653;
t2545 = -t2648 * t2605 + t2649 * t2681;
t2544 = t2649 * t2605 + t2648 * t2681;
t2539 = t2571 * t2653 + t2573 * t2659;
t2530 = t2557 * t2660 - t2654 * t2701;
t2529 = t2551 * t2660 + t2570 * t2654;
t2520 = t2540 * t2660 + t2583 * t2654;
t2513 = -t2648 * t2556 + t2649 * t2682;
t2512 = t2649 * t2556 + t2648 * t2682;
t2508 = -t2648 * t2550 + t2649 * t2683;
t2507 = t2649 * t2550 + t2648 * t2683;
t2500 = t2532 * t2659 + t2533 * t2653;
t2496 = t2526 * t2653 - t2537 * t2659;
t2492 = t2523 * t2653 - t2535 * t2659;
t2487 = -t2648 * t2539 + t2649 * t2684;
t2486 = t2649 * t2539 + t2648 * t2684;
t2484 = t2504 * t2653 - t2554 * t2659;
t2483 = t2501 * t2660 + t2566 * t2654;
t2476 = t2497 * t2660 + t2525 * t2654;
t2475 = t2493 * t2660 + t2522 * t2654;
t2466 = t2485 * t2660 + t2503 * t2654;
t2460 = -t2648 * t2500 + t2649 * t2685;
t2459 = t2649 * t2500 + t2648 * t2685;
t2454 = -t2648 * t2496 + t2649 * t2686;
t2453 = t2649 * t2496 + t2648 * t2686;
t2452 = -t2648 * t2492 + t2649 * t2687;
t2451 = t2649 * t2492 + t2648 * t2687;
t2446 = t2474 * t2653 - t2490 * t2659;
t2442 = t2468 * t2653 - t2488 * t2659;
t2441 = -t2648 * t2484 + t2649 * t2688;
t2440 = t2649 * t2484 + t2648 * t2688;
t2438 = t2450 * t2653 - t2515 * t2659;
t2431 = t2447 * t2660 + t2473 * t2654;
t2429 = t2433 * t2653 - t2521 * t2659;
t2426 = t2443 * t2660 + t2467 * t2654;
t2421 = t2439 * t2660 + t2449 * t2654;
t2420 = -t2648 * t2446 + t2649 * t2689;
t2419 = t2649 * t2446 + t2648 * t2689;
t2414 = -t2648 * t2442 + t2649 * t2690;
t2413 = t2649 * t2442 + t2648 * t2690;
t2411 = t2423 * t2653 - t2457 * t2659;
t2410 = t2430 * t2660 + t2432 * t2654;
t2409 = -t2648 * t2438 + t2649 * t2691;
t2408 = t2649 * t2438 + t2648 * t2691;
t2404 = t2418 * t2653 - t2455 * t2659;
t2401 = -t2648 * t2429 + t2649 * t2692;
t2400 = t2649 * t2429 + t2648 * t2692;
t2399 = t2412 * t2660 + t2422 * t2654;
t2396 = t2405 * t2660 + t2417 * t2654;
t2394 = t2398 * t2653 - t2481 * t2659;
t2390 = t2393 * t2653 - t2482 * t2659;
t2387 = -t2648 * t2411 + t2649 * t2693;
t2386 = t2649 * t2411 + t2648 * t2693;
t2385 = -t2648 * t2404 + t2649 * t2694;
t2384 = t2649 * t2404 + t2648 * t2694;
t2383 = t2395 * t2660 + t2397 * t2654;
t2382 = t2391 * t2660 + t2392 * t2654;
t2379 = -t2648 * t2394 + t2649 * t2695;
t2378 = t2649 * t2394 + t2648 * t2695;
t2377 = -t2648 * t2390 + t2649 * t2696;
t2376 = t2649 * t2390 + t2648 * t2696;
t2372 = t2375 * t2653 - t2448 * t2659;
t2371 = t2373 * t2660 + t2374 * t2654;
t2370 = -t2648 * t2372 + t2649 * t2697;
t2369 = t2649 * t2372 + t2648 * t2697;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2633, -t2632, 0, -t2636 * t2655 + t2637 * t2661, 0, 0, 0, 0, 0, 0, -t2581 * t2655 + t2596 * t2661, -t2569 * t2655 + t2592 * t2661, -t2565 * t2655 + t2582 * t2661, -t2545 * t2655 + t2555 * t2661, 0, 0, 0, 0, 0, 0, -t2508 * t2655 + t2529 * t2661, -t2513 * t2655 + t2530 * t2661, -t2487 * t2655 + t2520 * t2661, -t2460 * t2655 + t2483 * t2661, 0, 0, 0, 0, 0, 0, -t2452 * t2655 + t2475 * t2661, -t2454 * t2655 + t2476 * t2661, -t2441 * t2655 + t2466 * t2661, -t2409 * t2655 + t2421 * t2661, 0, 0, 0, 0, 0, 0, -t2414 * t2655 + t2426 * t2661, -t2420 * t2655 + t2431 * t2661, -t2401 * t2655 + t2410 * t2661, -t2379 * t2655 + t2383 * t2661, 0, 0, 0, 0, 0, 0, -t2385 * t2655 + t2396 * t2661, -t2387 * t2655 + t2399 * t2661, -t2377 * t2655 + t2382 * t2661, -t2370 * t2655 + t2371 * t2661; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2632, t2633, 0, t2636 * t2661 + t2637 * t2655, 0, 0, 0, 0, 0, 0, t2581 * t2661 + t2596 * t2655, t2569 * t2661 + t2592 * t2655, t2565 * t2661 + t2582 * t2655, t2545 * t2661 + t2555 * t2655, 0, 0, 0, 0, 0, 0, t2508 * t2661 + t2529 * t2655, t2513 * t2661 + t2530 * t2655, t2487 * t2661 + t2520 * t2655, t2460 * t2661 + t2483 * t2655, 0, 0, 0, 0, 0, 0, t2452 * t2661 + t2475 * t2655, t2454 * t2661 + t2476 * t2655, t2441 * t2661 + t2466 * t2655, t2409 * t2661 + t2421 * t2655, 0, 0, 0, 0, 0, 0, t2414 * t2661 + t2426 * t2655, t2420 * t2661 + t2431 * t2655, t2401 * t2661 + t2410 * t2655, t2379 * t2661 + t2383 * t2655, 0, 0, 0, 0, 0, 0, t2385 * t2661 + t2396 * t2655, t2387 * t2661 + t2399 * t2655, t2377 * t2661 + t2382 * t2655, t2370 * t2661 + t2371 * t2655; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2580, t2568, t2564, t2544, 0, 0, 0, 0, 0, 0, t2507, t2512, t2486, t2459, 0, 0, 0, 0, 0, 0, t2451, t2453, t2440, t2408, 0, 0, 0, 0, 0, 0, t2413, t2419, t2400, t2378, 0, 0, 0, 0, 0, 0, t2384, t2386, t2376, t2369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2662, -qJDD(1), 0, t2637, 0, 0, 0, 0, 0, 0, t2596, t2592, t2582, t2555, 0, 0, 0, 0, 0, 0, t2529, t2530, t2520, t2483, 0, 0, 0, 0, 0, 0, t2475, t2476, t2466, t2421, 0, 0, 0, 0, 0, 0, t2426, t2431, t2410, t2383, 0, 0, 0, 0, 0, 0, t2396, t2399, t2382, t2371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2662, 0, t2636, 0, 0, 0, 0, 0, 0, t2581, t2569, t2565, t2545, 0, 0, 0, 0, 0, 0, t2508, t2513, t2487, t2460, 0, 0, 0, 0, 0, 0, t2452, t2454, t2441, t2409, 0, 0, 0, 0, 0, 0, t2414, t2420, t2401, t2379, 0, 0, 0, 0, 0, 0, t2385, t2387, t2377, t2370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2580, t2568, t2564, t2544, 0, 0, 0, 0, 0, 0, t2507, t2512, t2486, t2459, 0, 0, 0, 0, 0, 0, t2451, t2453, t2440, t2408, 0, 0, 0, 0, 0, 0, t2413, t2419, t2400, t2378, 0, 0, 0, 0, 0, 0, t2384, t2386, t2376, t2369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2625, t2622, t2602, t2591, 0, 0, 0, 0, 0, 0, t2551, t2557, t2540, t2501, 0, 0, 0, 0, 0, 0, t2493, t2497, t2485, t2439, 0, 0, 0, 0, 0, 0, t2443, t2447, t2430, t2395, 0, 0, 0, 0, 0, 0, t2405, t2412, t2391, t2373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2621, t2611, t2601, t2590, 0, 0, 0, 0, 0, 0, -t2570, t2701, -t2583, -t2566, 0, 0, 0, 0, 0, 0, -t2522, -t2525, -t2503, -t2449, 0, 0, 0, 0, 0, 0, -t2467, -t2473, -t2432, -t2397, 0, 0, 0, 0, 0, 0, -t2417, -t2422, -t2392, -t2374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2603, t2600, t2626, t2605, 0, 0, 0, 0, 0, 0, t2550, t2556, t2539, t2500, 0, 0, 0, 0, 0, 0, t2492, t2496, t2484, t2438, 0, 0, 0, 0, 0, 0, t2442, t2446, t2429, t2394, 0, 0, 0, 0, 0, 0, t2404, t2411, t2390, t2372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2589, t2585, t2571, t2533, 0, 0, 0, 0, 0, 0, t2523, t2526, t2504, t2450, 0, 0, 0, 0, 0, 0, t2468, t2474, t2433, t2398, 0, 0, 0, 0, 0, 0, t2418, t2423, t2393, t2375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2586, t2594, t2573, t2532, 0, 0, 0, 0, 0, 0, -t2535, -t2537, -t2554, -t2515, 0, 0, 0, 0, 0, 0, -t2488, -t2490, -t2521, -t2481, 0, 0, 0, 0, 0, 0, -t2455, -t2457, -t2482, -t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2570, -t2701, t2583, t2566, 0, 0, 0, 0, 0, 0, t2522, t2525, t2503, t2449, 0, 0, 0, 0, 0, 0, t2467, t2473, t2432, t2397, 0, 0, 0, 0, 0, 0, t2417, t2422, t2392, t2374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2560, t2547, t2536, t2480, 0, 0, 0, 0, 0, 0, t2495, t2506, t2465, t2416, 0, 0, 0, 0, 0, 0, t2437, t2445, t2407, t2381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2546, t2575, t2538, t2479, 0, 0, 0, 0, 0, 0, t2494, t2505, t2464, t2415, 0, 0, 0, 0, 0, 0, t2436, t2444, t2406, t2380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2535, t2537, t2554, t2515, 0, 0, 0, 0, 0, 0, t2488, t2490, t2521, t2481, 0, 0, 0, 0, 0, 0, t2455, t2457, t2482, t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2534, t2528, t2489, t2435, 0, 0, 0, 0, 0, 0, t2472, t2478, t2428, t2389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2527, t2548, t2491, t2434, 0, 0, 0, 0, 0, 0, t2471, t2477, t2427, t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2488, t2490, t2521, t2481, 0, 0, 0, 0, 0, 0, t2455, t2457, t2482, t2448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2502, t2499, t2456, t2403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2498, t2524, t2458, t2402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2455, t2457, t2482, t2448;];
f_new_reg  = t1;
