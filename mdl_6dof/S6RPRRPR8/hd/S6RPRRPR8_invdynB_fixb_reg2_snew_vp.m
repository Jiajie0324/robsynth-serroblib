% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 23:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 23:10:50
% EndTime: 2019-05-05 23:11:17
% DurationCPUTime: 18.57s
% Computational Cost: add. (137587->723), mult. (281428->1077), div. (0->0), fcn. (193180->10), ass. (0->484)
t803 = sin(pkin(10));
t806 = sin(qJ(4));
t810 = cos(qJ(4));
t811 = cos(qJ(3));
t852 = qJD(1) * t811;
t768 = -t810 * qJD(3) + t806 * t852;
t770 = qJD(3) * t806 + t810 * t852;
t804 = cos(pkin(10));
t724 = t804 * t768 + t770 * t803;
t726 = -t768 * t803 + t770 * t804;
t677 = t726 * t724;
t849 = qJD(1) * qJD(3);
t834 = t811 * t849;
t807 = sin(qJ(3));
t847 = qJDD(1) * t807;
t773 = -t834 - t847;
t766 = qJDD(4) - t773;
t894 = -t677 + t766;
t904 = t803 * t894;
t903 = t804 * t894;
t805 = sin(qJ(6));
t809 = cos(qJ(6));
t669 = t809 * t724 + t726 * t805;
t671 = -t724 * t805 + t726 * t809;
t604 = t671 * t669;
t815 = qJDD(6) + t766;
t897 = -t604 + t815;
t902 = t805 * t897;
t734 = t770 * t768;
t893 = -t734 + t766;
t901 = t806 * t893;
t900 = t809 * t897;
t899 = t810 * t893;
t814 = qJD(1) ^ 2;
t891 = pkin(7) + pkin(1);
t898 = t814 * t891;
t792 = qJD(1) * t807 + qJD(4);
t786 = qJD(6) + t792;
t650 = t786 * t669;
t835 = t807 * t849;
t845 = qJDD(1) * t811;
t774 = -t835 + t845;
t831 = -t810 * qJDD(3) + t806 * t774;
t719 = -qJD(4) * t770 - t831;
t720 = -t768 * qJD(4) + t806 * qJDD(3) + t810 * t774;
t661 = t719 * t803 + t720 * t804;
t832 = -t804 * t719 + t720 * t803;
t816 = qJD(6) * t669 - t661 * t809 + t805 * t832;
t896 = -t650 - t816;
t709 = t792 * t724;
t633 = -t661 - t709;
t895 = t661 - t709;
t751 = t792 * t768;
t693 = -t751 - t720;
t691 = -t751 + t720;
t833 = t805 * t661 + t809 * t832;
t541 = (qJD(6) - t786) * t671 + t833;
t688 = (qJD(4) - t792) * t770 + t831;
t667 = t669 ^ 2;
t668 = t671 ^ 2;
t722 = t724 ^ 2;
t723 = t726 ^ 2;
t764 = t768 ^ 2;
t765 = t770 ^ 2;
t785 = t786 ^ 2;
t892 = t792 ^ 2;
t890 = pkin(3) * t807;
t889 = qJDD(1) * pkin(1);
t848 = qJD(2) * qJD(1);
t798 = 0.2e1 * t848;
t808 = sin(qJ(1));
t812 = cos(qJ(1));
t784 = t812 * g(1) + t808 * g(2);
t800 = qJDD(1) * qJ(2);
t820 = t784 - t800;
t818 = t798 - t820;
t821 = -t774 + t835;
t822 = -t773 + t834;
t683 = pkin(3) * t822 + pkin(8) * t821 + t818 - t898;
t783 = t808 * g(1) - t812 * g(2);
t824 = qJDD(2) - t783;
t817 = -t814 * qJ(2) + t824;
t750 = -qJDD(1) * t891 + t817;
t729 = -t811 * g(3) + t807 * t750;
t813 = qJD(3) ^ 2;
t828 = -pkin(8) * t811 + t890;
t819 = t814 * t828;
t696 = -t813 * pkin(3) + qJDD(3) * pkin(8) - t807 * t819 + t729;
t626 = -t810 * t683 + t806 * t696;
t581 = pkin(4) * t893 + qJ(5) * t693 - t626;
t627 = t806 * t683 + t810 * t696;
t823 = pkin(4) * t792 - qJ(5) * t770;
t586 = -t764 * pkin(4) + t719 * qJ(5) - t792 * t823 + t627;
t516 = 0.2e1 * qJD(5) * t726 - t804 * t581 + t803 * t586;
t483 = pkin(5) * t894 + pkin(9) * t633 - t516;
t517 = -0.2e1 * qJD(5) * t724 + t803 * t581 + t804 * t586;
t827 = pkin(5) * t792 - pkin(9) * t726;
t496 = -t722 * pkin(5) - pkin(9) * t832 - t792 * t827 + t517;
t447 = -t809 * t483 + t496 * t805;
t448 = t805 * t483 + t809 * t496;
t414 = -t447 * t809 + t448 * t805;
t888 = t414 * t803;
t887 = t414 * t804;
t465 = -t516 * t804 + t517 * t803;
t886 = t465 * t806;
t885 = t465 * t810;
t728 = g(3) * t807 + t750 * t811;
t695 = qJDD(3) * pkin(3) + pkin(8) * t813 - t811 * t819 + t728;
t607 = pkin(4) * t719 + qJ(5) * t764 - t770 * t823 - qJDD(5) + t695;
t533 = -pkin(5) * t832 + pkin(9) * t722 - t726 * t827 + t607;
t884 = t533 * t805;
t883 = t533 * t809;
t598 = t604 + t815;
t882 = t598 * t805;
t881 = t598 * t809;
t880 = t607 * t803;
t879 = t607 * t804;
t656 = t677 + t766;
t878 = t656 * t803;
t877 = t656 * t804;
t876 = t695 * t806;
t875 = t695 * t810;
t712 = t734 + t766;
t874 = t712 * t806;
t873 = t712 * t810;
t872 = t726 * t792;
t871 = t766 * t807;
t870 = t766 * t811;
t801 = t807 ^ 2;
t802 = t811 ^ 2;
t853 = t801 + t802;
t776 = t853 * qJDD(1);
t869 = t776 * t808;
t868 = t776 * t812;
t837 = t807 * t811 * t814;
t781 = qJDD(3) + t837;
t867 = t781 * t807;
t866 = t781 * t811;
t782 = qJDD(3) - t837;
t865 = t782 * t807;
t864 = t782 * t811;
t863 = t786 * t805;
t862 = t786 * t809;
t861 = t792 * t803;
t860 = t792 * t804;
t859 = t792 * t806;
t858 = t792 * t810;
t857 = t801 * t814;
t856 = t802 * t814;
t745 = t820 - 0.2e1 * t848 + t898;
t855 = t807 * t745;
t854 = t811 * t745;
t846 = qJDD(1) * t808;
t844 = qJDD(1) * t812;
t843 = t807 * t604;
t842 = t811 * t604;
t841 = t807 * t677;
t840 = t811 * t677;
t839 = t807 * t734;
t838 = t811 * t734;
t836 = pkin(3) * t811 + pkin(2);
t415 = t447 * t805 + t809 * t448;
t466 = t516 * t803 + t804 * t517;
t569 = t626 * t806 + t810 * t627;
t752 = -t814 * pkin(1) + t818;
t753 = -t817 + t889;
t703 = t812 * t752 - t753 * t808;
t736 = -t783 * t808 - t812 * t784;
t830 = t808 * t837;
t829 = t812 * t837;
t777 = -t808 * t814 + t844;
t826 = pkin(6) * t777 + g(3) * t808;
t778 = t812 * t814 + t846;
t825 = -pkin(6) * t778 + g(3) * t812;
t568 = -t626 * t810 + t627 * t806;
t681 = t811 * t728 + t807 * t729;
t682 = -t728 * t807 + t729 * t811;
t700 = t752 * t808 + t753 * t812;
t735 = t783 * t812 - t784 * t808;
t629 = t832 - t872;
t790 = -t813 - t856;
t789 = t813 - t856;
t788 = -t813 - t857;
t787 = -t813 + t857;
t780 = (-t801 + t802) * t814;
t779 = t853 * t814;
t775 = -0.2e1 * t835 + t845;
t772 = 0.2e1 * t834 + t847;
t767 = t853 * t849;
t749 = -t765 + t892;
t748 = t764 - t892;
t747 = -t774 * t807 - t802 * t849;
t746 = -t773 * t811 - t801 * t849;
t742 = -t790 * t807 - t866;
t741 = t788 * t811 - t865;
t740 = t790 * t811 - t867;
t739 = -t789 * t811 - t865;
t738 = t788 * t807 + t864;
t737 = -t787 * t807 - t866;
t733 = -t765 + t764;
t732 = -t779 * t812 - t869;
t731 = -t779 * t808 + t868;
t730 = -t765 - t892;
t727 = t772 * t807 - t775 * t811;
t721 = -t892 - t764;
t710 = t764 + t765;
t707 = -t723 + t892;
t706 = t722 - t892;
t705 = t740 * t808 + t775 * t812;
t704 = t738 * t808 + t772 * t812;
t702 = -t740 * t812 + t775 * t808;
t701 = -t738 * t812 + t772 * t808;
t699 = (-t768 * t810 + t770 * t806) * t792;
t698 = (-t768 * t806 - t770 * t810) * t792;
t697 = -t723 - t892;
t689 = (-qJD(4) - t792) * t770 - t831;
t687 = t720 * t810 - t770 * t859;
t686 = t720 * t806 + t770 * t858;
t685 = -t719 * t806 + t768 * t858;
t684 = t719 * t810 + t768 * t859;
t678 = -t699 * t807 + t870;
t676 = t748 * t810 - t874;
t675 = -t749 * t806 + t899;
t674 = t748 * t806 + t873;
t673 = t749 * t810 + t901;
t672 = -t723 + t722;
t666 = -t730 * t806 - t873;
t665 = t730 * t810 - t874;
t664 = -t892 - t722;
t663 = -pkin(2) * t779 - t682;
t659 = pkin(2) * t740 - qJ(2) * t742 - t729;
t658 = pkin(2) * t738 - qJ(2) * t741 + t728;
t654 = t721 * t810 - t901;
t653 = t721 * t806 + t899;
t649 = -t668 + t785;
t648 = t667 - t785;
t647 = (-t724 * t804 + t726 * t803) * t792;
t646 = (-t724 * t803 - t726 * t804) * t792;
t645 = pkin(2) * t772 - t741 * t891 - t854;
t644 = pkin(2) * t775 - t742 * t891 + t855;
t643 = -t668 - t785;
t642 = t681 * t808 - t745 * t812;
t641 = -t681 * t812 - t745 * t808;
t640 = -t687 * t807 + t838;
t639 = -t685 * t807 - t838;
t638 = -t722 - t723;
t637 = -t688 * t810 - t693 * t806;
t636 = t689 * t810 - t691 * t806;
t635 = -t688 * t806 + t693 * t810;
t634 = t689 * t806 + t691 * t810;
t628 = t832 + t872;
t624 = t661 * t804 - t726 * t861;
t623 = t661 * t803 + t726 * t860;
t622 = t724 * t860 + t803 * t832;
t621 = t724 * t861 - t804 * t832;
t620 = t706 * t804 - t878;
t619 = -t707 * t803 + t903;
t618 = -t676 * t807 - t688 * t811;
t617 = -t675 * t807 - t693 * t811;
t616 = t706 * t803 + t877;
t615 = t707 * t804 + t904;
t614 = -pkin(8) * t665 - t875;
t613 = pkin(2) * t681 - qJ(2) * t682;
t612 = -pkin(8) * t653 - t876;
t611 = t666 * t811 + t691 * t807;
t610 = -t697 * t803 - t877;
t609 = t666 * t807 - t691 * t811;
t608 = t697 * t804 - t878;
t606 = t654 * t811 - t689 * t807;
t605 = t654 * t807 + t689 * t811;
t603 = -t668 + t667;
t602 = -t636 * t807 - t733 * t811;
t601 = -pkin(2) * t745 - t682 * t891;
t600 = -t785 - t667;
t596 = t664 * t804 - t904;
t595 = t664 * t803 + t903;
t594 = t637 * t811 - t710 * t807;
t593 = t637 * t807 + t710 * t811;
t592 = (-t669 * t809 + t671 * t805) * t786;
t591 = (-t669 * t805 - t671 * t809) * t786;
t590 = -t646 * t806 + t647 * t810;
t589 = t646 * t810 + t647 * t806;
t588 = -pkin(3) * t665 + t627;
t587 = -pkin(3) * t653 + t626;
t585 = -t590 * t807 + t870;
t583 = t609 * t808 + t665 * t812;
t582 = -t609 * t812 + t665 * t808;
t580 = -t667 - t668;
t577 = t605 * t808 + t653 * t812;
t576 = -t605 * t812 + t653 * t808;
t574 = -qJD(6) * t671 - t833;
t573 = -t629 * t804 - t633 * t803;
t572 = -t628 * t804 - t803 * t895;
t571 = -t629 * t803 + t633 * t804;
t570 = -t628 * t803 + t804 * t895;
t567 = t648 * t809 - t882;
t566 = -t649 * t805 + t900;
t565 = t648 * t805 + t881;
t564 = t649 * t809 + t902;
t563 = -t623 * t806 + t624 * t810;
t562 = -t621 * t806 + t622 * t810;
t561 = t623 * t810 + t624 * t806;
t560 = t621 * t810 + t622 * t806;
t559 = -t643 * t805 - t881;
t558 = t643 * t809 - t882;
t557 = -t616 * t806 + t620 * t810;
t556 = -t615 * t806 + t619 * t810;
t555 = t616 * t810 + t620 * t806;
t554 = t615 * t810 + t619 * t806;
t553 = -t608 * t806 + t610 * t810;
t552 = t608 * t810 + t610 * t806;
t551 = -qJ(5) * t608 - t879;
t550 = t593 * t808 + t635 * t812;
t549 = -t593 * t812 + t635 * t808;
t548 = t569 * t811 - t695 * t807;
t547 = t569 * t807 + t695 * t811;
t546 = -qJ(5) * t595 - t880;
t545 = -t650 + t816;
t540 = (qJD(6) + t786) * t671 + t833;
t539 = t600 * t809 - t902;
t538 = t600 * t805 + t900;
t537 = -t671 * t863 - t809 * t816;
t536 = t671 * t862 - t805 * t816;
t535 = -t574 * t805 + t669 * t862;
t534 = t574 * t809 + t669 * t863;
t532 = -t563 * t807 + t840;
t531 = -t562 * t807 - t840;
t530 = -t595 * t806 + t596 * t810;
t529 = t595 * t810 + t596 * t806;
t528 = -t591 * t803 + t592 * t804;
t527 = t591 * t804 + t592 * t803;
t526 = -pkin(8) * t635 - t568;
t525 = -t557 * t807 - t629 * t811;
t524 = -t556 * t807 - t633 * t811;
t523 = -pkin(4) * t895 + qJ(5) * t610 - t880;
t522 = t553 * t811 + t807 * t895;
t521 = t553 * t807 - t811 * t895;
t520 = -pkin(4) * t628 + qJ(5) * t596 + t879;
t519 = t530 * t811 + t628 * t807;
t518 = t530 * t807 - t628 * t811;
t515 = pkin(2) * t609 - pkin(3) * t691 + pkin(8) * t666 - qJ(2) * t611 - t876;
t513 = pkin(2) * t605 + pkin(3) * t689 + pkin(8) * t654 - qJ(2) * t606 + t875;
t512 = -t571 * t806 + t573 * t810;
t511 = -t570 * t806 + t572 * t810;
t510 = t571 * t810 + t573 * t806;
t509 = t570 * t810 + t572 * t806;
t508 = -t565 * t803 + t567 * t804;
t507 = -t564 * t803 + t566 * t804;
t506 = t565 * t804 + t567 * t803;
t505 = t564 * t804 + t566 * t803;
t504 = -t558 * t803 + t559 * t804;
t503 = t558 * t804 + t559 * t803;
t502 = t547 * t808 + t568 * t812;
t501 = -t547 * t812 + t568 * t808;
t500 = -t511 * t807 - t672 * t811;
t499 = -pkin(9) * t558 - t883;
t498 = t512 * t811 + t638 * t807;
t497 = t512 * t807 - t638 * t811;
t494 = -t541 * t809 - t545 * t805;
t493 = -t540 * t809 - t805 * t896;
t492 = -t541 * t805 + t545 * t809;
t491 = -t540 * t805 + t809 * t896;
t490 = -t538 * t803 + t539 * t804;
t489 = t538 * t804 + t539 * t803;
t488 = -t536 * t803 + t537 * t804;
t487 = -t534 * t803 + t535 * t804;
t486 = t536 * t804 + t537 * t803;
t485 = t534 * t804 + t535 * t803;
t484 = -pkin(9) * t538 - t884;
t480 = pkin(2) * t665 - t811 * t588 - t611 * t891 - t807 * t614;
t479 = t521 * t808 + t552 * t812;
t478 = -t521 * t812 + t552 * t808;
t477 = -t527 * t806 + t528 * t810;
t476 = t527 * t810 + t528 * t806;
t475 = pkin(2) * t653 - t811 * t587 - t606 * t891 - t807 * t612;
t474 = -t477 * t807 + t811 * t815;
t473 = pkin(2) * t593 + pkin(3) * t710 + pkin(8) * t637 - qJ(2) * t594 + t569;
t472 = -pkin(3) * t510 - pkin(4) * t571;
t471 = t518 * t808 + t529 * t812;
t470 = -t518 * t812 + t529 * t808;
t469 = -pkin(3) * t552 - pkin(4) * t608 + t517;
t468 = pkin(2) * t547 + pkin(3) * t695 + pkin(8) * t569 - qJ(2) * t548;
t467 = -pkin(5) * t896 + pkin(9) * t559 - t884;
t464 = -t807 * t526 - t594 * t891 + t635 * t836;
t463 = -pkin(3) * t529 - pkin(4) * t595 + t516;
t462 = -pkin(8) * t552 - t523 * t806 + t551 * t810;
t461 = -pkin(5) * t540 + pkin(9) * t539 + t883;
t460 = -t506 * t806 + t508 * t810;
t459 = -t505 * t806 + t507 * t810;
t458 = t506 * t810 + t508 * t806;
t457 = t505 * t810 + t507 * t806;
t456 = -t503 * t806 + t504 * t810;
t455 = t503 * t810 + t504 * t806;
t454 = pkin(4) * t607 + qJ(5) * t466;
t453 = -pkin(8) * t529 - t520 * t806 + t546 * t810;
t452 = t497 * t808 + t510 * t812;
t451 = -t497 * t812 + t510 * t808;
t450 = -qJ(5) * t571 - t465;
t449 = -pkin(4) * t638 + qJ(5) * t573 + t466;
t445 = -t492 * t803 + t494 * t804;
t444 = -t491 * t803 + t493 * t804;
t443 = t492 * t804 + t494 * t803;
t442 = t491 * t804 + t493 * t803;
t441 = -t489 * t806 + t490 * t810;
t440 = t489 * t810 + t490 * t806;
t439 = -t486 * t806 + t488 * t810;
t438 = -t485 * t806 + t487 * t810;
t437 = t486 * t810 + t488 * t806;
t436 = t485 * t810 + t487 * t806;
t435 = -t891 * t548 + (pkin(8) * t807 + t836) * t568;
t434 = -t460 * t807 - t541 * t811;
t433 = -t459 * t807 - t545 * t811;
t432 = t456 * t811 + t807 * t896;
t431 = t456 * t807 - t811 * t896;
t430 = -t439 * t807 + t842;
t429 = -t438 * t807 - t842;
t428 = t441 * t811 + t540 * t807;
t427 = t441 * t807 - t540 * t811;
t426 = t466 * t810 - t886;
t425 = t466 * t806 + t885;
t424 = pkin(2) * t521 - pkin(3) * t895 + pkin(8) * t553 - qJ(2) * t522 + t523 * t810 + t551 * t806;
t423 = t426 * t811 - t607 * t807;
t422 = t426 * t807 + t607 * t811;
t421 = -qJ(5) * t503 - t467 * t803 + t499 * t804;
t420 = pkin(2) * t518 - pkin(3) * t628 + pkin(8) * t530 - qJ(2) * t519 + t520 * t810 + t546 * t806;
t419 = -qJ(5) * t489 - t461 * t803 + t484 * t804;
t418 = -pkin(4) * t896 + qJ(5) * t504 + t467 * t804 + t499 * t803;
t417 = t431 * t808 + t455 * t812;
t416 = -t431 * t812 + t455 * t808;
t413 = -t443 * t806 + t445 * t810;
t412 = -t442 * t806 + t444 * t810;
t411 = t443 * t810 + t445 * t806;
t410 = t442 * t810 + t444 * t806;
t409 = -pkin(4) * t540 + qJ(5) * t490 + t461 * t804 + t484 * t803;
t408 = -t412 * t807 - t603 * t811;
t407 = -pkin(3) * t425 - pkin(4) * t465;
t406 = t413 * t811 + t580 * t807;
t405 = t413 * t807 - t580 * t811;
t404 = pkin(5) * t533 + pkin(9) * t415;
t403 = pkin(2) * t552 - t807 * t462 - t811 * t469 - t522 * t891;
t402 = -pkin(8) * t510 - t449 * t806 + t450 * t810;
t401 = t427 * t808 + t440 * t812;
t400 = -t427 * t812 + t440 * t808;
t399 = -pkin(3) * t455 - pkin(4) * t503 - pkin(5) * t558 + t448;
t398 = -pkin(9) * t492 - t414;
t397 = pkin(2) * t529 - t807 * t453 - t811 * t463 - t519 * t891;
t396 = -pkin(5) * t580 + pkin(9) * t494 + t415;
t395 = -pkin(3) * t440 - pkin(4) * t489 - pkin(5) * t538 + t447;
t394 = -pkin(8) * t425 - qJ(5) * t885 - t454 * t806;
t393 = t422 * t808 + t425 * t812;
t392 = -t422 * t812 + t425 * t808;
t391 = pkin(2) * t497 - pkin(3) * t638 + pkin(8) * t512 - qJ(2) * t498 + t449 * t810 + t450 * t806;
t390 = -pkin(3) * t411 - pkin(4) * t443 - pkin(5) * t492;
t389 = t415 * t804 - t888;
t388 = t415 * t803 + t887;
t387 = pkin(2) * t510 - t807 * t402 - t811 * t472 - t498 * t891;
t386 = t405 * t808 + t411 * t812;
t385 = -t405 * t812 + t411 * t808;
t384 = -pkin(8) * t455 - t418 * t806 + t421 * t810;
t383 = -pkin(8) * t440 - t409 * t806 + t419 * t810;
t382 = -qJ(5) * t443 - t396 * t803 + t398 * t804;
t381 = pkin(2) * t422 + pkin(3) * t607 + pkin(8) * t426 - qJ(2) * t423 - qJ(5) * t886 + t454 * t810;
t380 = -pkin(4) * t580 + qJ(5) * t445 + t396 * t804 + t398 * t803;
t379 = pkin(2) * t431 - pkin(3) * t896 + pkin(8) * t456 - qJ(2) * t432 + t418 * t810 + t421 * t806;
t378 = pkin(2) * t427 - pkin(3) * t540 + pkin(8) * t441 - qJ(2) * t428 + t409 * t810 + t419 * t806;
t377 = -t388 * t806 + t389 * t810;
t376 = t388 * t810 + t389 * t806;
t375 = -pkin(9) * t887 - qJ(5) * t388 - t404 * t803;
t374 = t377 * t811 - t533 * t807;
t373 = t377 * t807 + t533 * t811;
t372 = pkin(4) * t533 - pkin(9) * t888 + qJ(5) * t389 + t404 * t804;
t371 = pkin(2) * t455 - t807 * t384 - t811 * t399 - t432 * t891;
t370 = pkin(2) * t425 - t807 * t394 - t811 * t407 - t423 * t891;
t369 = pkin(2) * t440 - t807 * t383 - t811 * t395 - t428 * t891;
t368 = -pkin(3) * t376 - pkin(4) * t388 - pkin(5) * t414;
t367 = -pkin(8) * t411 - t380 * t806 + t382 * t810;
t366 = t373 * t808 + t376 * t812;
t365 = -t373 * t812 + t376 * t808;
t364 = pkin(2) * t405 - pkin(3) * t580 + pkin(8) * t413 - qJ(2) * t406 + t380 * t810 + t382 * t806;
t363 = pkin(2) * t411 - t807 * t367 - t811 * t390 - t406 * t891;
t362 = -pkin(8) * t376 - t372 * t806 + t375 * t810;
t361 = pkin(2) * t373 + pkin(3) * t533 + pkin(8) * t377 - qJ(2) * t374 + t372 * t810 + t375 * t806;
t360 = pkin(2) * t376 - t807 * t362 - t811 * t368 - t374 * t891;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t778, -t777, 0, t736, 0, 0, 0, 0, 0, 0, 0, t778, t777, t703, 0, 0, 0, 0, 0, 0, t704, t705, t732, t642, 0, 0, 0, 0, 0, 0, t577, t583, t550, t502, 0, 0, 0, 0, 0, 0, t471, t479, t452, t393, 0, 0, 0, 0, 0, 0, t401, t417, t386, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t777, -t778, 0, t735, 0, 0, 0, 0, 0, 0, 0, -t777, t778, t700, 0, 0, 0, 0, 0, 0, t701, t702, t731, t641, 0, 0, 0, 0, 0, 0, t576, t582, t549, t501, 0, 0, 0, 0, 0, 0, t470, t478, t451, t392, 0, 0, 0, 0, 0, 0, t400, t416, t385, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t741, t742, 0, t682, 0, 0, 0, 0, 0, 0, t606, t611, t594, t548, 0, 0, 0, 0, 0, 0, t519, t522, t498, t423, 0, 0, 0, 0, 0, 0, t428, t432, t406, t374; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t777, 0, -t778, 0, -t826, -t825, -t735, -pkin(6) * t735, 0, -t777, t778, 0, 0, 0, -t700, t826, t825, -pkin(6) * t700 + (-pkin(1) * t808 + qJ(2) * t812) * g(3), -t747 * t808 + t829, -t727 * t808 + t780 * t812, -t739 * t808 + t811 * t844, -t746 * t808 - t829, -t737 * t808 - t807 * t844, qJDD(3) * t812 - t767 * t808, -pkin(6) * t701 - t645 * t808 + t658 * t812, -pkin(6) * t702 - t644 * t808 + t659 * t812, -pkin(2) * t868 - pkin(6) * t731 - t663 * t808, -pkin(6) * t641 - t601 * t808 + t613 * t812, -t640 * t808 + t686 * t812, -t602 * t808 + t634 * t812, -t617 * t808 + t673 * t812, -t639 * t808 + t684 * t812, -t618 * t808 + t674 * t812, -t678 * t808 + t698 * t812, -pkin(6) * t576 - t475 * t808 + t513 * t812, -pkin(6) * t582 - t480 * t808 + t515 * t812, -pkin(6) * t549 - t464 * t808 + t473 * t812, -pkin(6) * t501 - t435 * t808 + t468 * t812, -t532 * t808 + t561 * t812, -t500 * t808 + t509 * t812, -t524 * t808 + t554 * t812, -t531 * t808 + t560 * t812, -t525 * t808 + t555 * t812, -t585 * t808 + t589 * t812, -pkin(6) * t470 - t397 * t808 + t420 * t812, -pkin(6) * t478 - t403 * t808 + t424 * t812, -pkin(6) * t451 - t387 * t808 + t391 * t812, -pkin(6) * t392 - t370 * t808 + t381 * t812, -t430 * t808 + t437 * t812, -t408 * t808 + t410 * t812, -t433 * t808 + t457 * t812, -t429 * t808 + t436 * t812, -t434 * t808 + t458 * t812, -t474 * t808 + t476 * t812, -pkin(6) * t400 - t369 * t808 + t378 * t812, -pkin(6) * t416 - t371 * t808 + t379 * t812, -pkin(6) * t385 - t363 * t808 + t364 * t812, -pkin(6) * t365 - t360 * t808 + t361 * t812; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t778, 0, t777, 0, t825, -t826, t736, pkin(6) * t736, 0, -t778, -t777, 0, 0, 0, t703, -t825, t826, pkin(6) * t703 + (pkin(1) * t812 + qJ(2) * t808) * g(3), t747 * t812 + t830, t727 * t812 + t780 * t808, t739 * t812 + t808 * t845, t746 * t812 - t830, t737 * t812 - t807 * t846, qJDD(3) * t808 + t767 * t812, pkin(6) * t704 + t645 * t812 + t658 * t808, pkin(6) * t705 + t644 * t812 + t659 * t808, -pkin(2) * t869 + pkin(6) * t732 + t663 * t812, pkin(6) * t642 + t601 * t812 + t613 * t808, t640 * t812 + t686 * t808, t602 * t812 + t634 * t808, t617 * t812 + t673 * t808, t639 * t812 + t684 * t808, t618 * t812 + t674 * t808, t678 * t812 + t698 * t808, pkin(6) * t577 + t475 * t812 + t513 * t808, pkin(6) * t583 + t480 * t812 + t515 * t808, pkin(6) * t550 + t464 * t812 + t473 * t808, pkin(6) * t502 + t435 * t812 + t468 * t808, t532 * t812 + t561 * t808, t500 * t812 + t509 * t808, t524 * t812 + t554 * t808, t531 * t812 + t560 * t808, t525 * t812 + t555 * t808, t585 * t812 + t589 * t808, pkin(6) * t471 + t397 * t812 + t420 * t808, pkin(6) * t479 + t403 * t812 + t424 * t808, pkin(6) * t452 + t387 * t812 + t391 * t808, pkin(6) * t393 + t370 * t812 + t381 * t808, t430 * t812 + t437 * t808, t408 * t812 + t410 * t808, t433 * t812 + t457 * t808, t429 * t812 + t436 * t808, t434 * t812 + t458 * t808, t474 * t812 + t476 * t808, pkin(6) * t401 + t369 * t812 + t378 * t808, pkin(6) * t417 + t371 * t812 + t379 * t808, pkin(6) * t386 + t363 * t812 + t364 * t808, pkin(6) * t366 + t360 * t812 + t361 * t808; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t783, t784, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t824 - 0.2e1 * t889, -t784 + t798 + 0.2e1 * t800, pkin(1) * t753 + qJ(2) * t752, -t821 * t811, -t772 * t811 - t775 * t807, -t789 * t807 + t864, t822 * t807, t787 * t811 - t867, 0, qJ(2) * t772 - t738 * t891 - t855, qJ(2) * t775 - t740 * t891 - t854, -qJ(2) * t779 + t776 * t891 - t681, -qJ(2) * t745 - t681 * t891, t687 * t811 + t839, t636 * t811 - t733 * t807, t675 * t811 - t693 * t807, t685 * t811 - t839, t676 * t811 - t688 * t807, t699 * t811 + t871, qJ(2) * t653 - t807 * t587 - t605 * t891 + t811 * t612, qJ(2) * t665 - t807 * t588 - t609 * t891 + t811 * t614, t811 * t526 + (qJ(2) + t890) * t635 - t891 * t593, -t891 * t547 + (qJ(2) + t828) * t568, t563 * t811 + t841, t511 * t811 - t672 * t807, t556 * t811 - t633 * t807, t562 * t811 - t841, t557 * t811 - t629 * t807, t590 * t811 + t871, qJ(2) * t529 + t811 * t453 - t807 * t463 - t518 * t891, qJ(2) * t552 + t811 * t462 - t807 * t469 - t521 * t891, qJ(2) * t510 + t811 * t402 - t807 * t472 - t497 * t891, qJ(2) * t425 + t811 * t394 - t807 * t407 - t422 * t891, t439 * t811 + t843, t412 * t811 - t603 * t807, t459 * t811 - t545 * t807, t438 * t811 - t843, t460 * t811 - t541 * t807, t477 * t811 + t807 * t815, qJ(2) * t440 + t811 * t383 - t807 * t395 - t427 * t891, qJ(2) * t455 + t811 * t384 - t807 * t399 - t431 * t891, qJ(2) * t411 + t811 * t367 - t807 * t390 - t405 * t891, qJ(2) * t376 + t811 * t362 - t807 * t368 - t373 * t891;];
tauB_reg  = t1;
