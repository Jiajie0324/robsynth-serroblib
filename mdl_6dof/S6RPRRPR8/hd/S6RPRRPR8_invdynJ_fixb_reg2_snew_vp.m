% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 23:12
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRPR8_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 23:10:33
% EndTime: 2019-05-05 23:10:50
% DurationCPUTime: 7.08s
% Computational Cost: add. (43593->456), mult. (89253->642), div. (0->0), fcn. (61347->10), ass. (0->307)
t263 = sin(qJ(4));
t267 = cos(qJ(4));
t268 = cos(qJ(3));
t309 = qJD(1) * t268;
t236 = -t267 * qJD(3) + t263 * t309;
t238 = qJD(3) * t263 + t267 * t309;
t260 = sin(pkin(10));
t261 = cos(pkin(10));
t212 = t261 * t236 + t238 * t260;
t210 = t212 ^ 2;
t264 = sin(qJ(3));
t249 = qJD(1) * t264 + qJD(4);
t346 = t249 ^ 2;
t170 = -t346 - t210;
t214 = -t236 * t260 + t238 * t261;
t179 = t214 * t212;
t303 = qJD(1) * qJD(3);
t250 = t268 * t303;
t251 = t264 * qJDD(1);
t240 = -t251 - t250;
t235 = qJDD(4) - t240;
t348 = -t179 + t235;
t357 = t261 * t348;
t121 = t170 * t260 + t357;
t302 = qJD(2) * qJD(1);
t255 = 0.2e1 * t302;
t257 = qJDD(1) * qJ(2);
t265 = sin(qJ(1));
t269 = cos(qJ(1));
t286 = t269 * g(1) + t265 * g(2);
t277 = -t257 + t286;
t275 = t255 - t277;
t253 = t268 * qJDD(1);
t297 = t264 * t303;
t241 = t253 - t297;
t281 = -t241 + t297;
t282 = -t240 + t250;
t271 = qJD(1) ^ 2;
t345 = pkin(7) + pkin(1);
t352 = t271 * t345;
t183 = pkin(3) * t282 + pkin(8) * t281 + t275 - t352;
t296 = t265 * g(1) - t269 * g(2);
t285 = qJDD(2) - t296;
t312 = t271 * qJ(2);
t274 = t285 - t312;
t226 = -qJDD(1) * t345 + t274;
t216 = t268 * g(3) - t264 * t226;
t270 = qJD(3) ^ 2;
t288 = pkin(3) * t264 - pkin(8) * t268;
t276 = t271 * t288;
t192 = -t270 * pkin(3) + qJDD(3) * pkin(8) - t264 * t276 - t216;
t143 = -t267 * t183 + t263 * t192;
t279 = -t263 * qJDD(3) - t267 * t241;
t208 = -qJD(4) * t236 - t279;
t227 = t249 * t236;
t188 = t208 + t227;
t219 = t238 * t236;
t347 = -t219 + t235;
t115 = pkin(4) * t347 - qJ(5) * t188 - t143;
t144 = t263 * t183 + t267 * t192;
t292 = -t267 * qJDD(3) + t263 * t241;
t207 = -qJD(4) * t238 - t292;
t233 = t236 ^ 2;
t283 = pkin(4) * t249 - qJ(5) * t238;
t117 = -t233 * pkin(4) + t207 * qJ(5) - t249 * t283 + t144;
t284 = -0.2e1 * qJD(5) * t214 + t261 * t115 - t260 * t117;
t359 = pkin(4) * t121 + t284;
t358 = t260 * t348;
t262 = sin(qJ(6));
t266 = cos(qJ(6));
t175 = t266 * t212 + t214 * t262;
t177 = -t212 * t262 + t214 * t266;
t128 = t177 * t175;
t231 = qJDD(6) + t235;
t350 = -t128 + t231;
t356 = t262 * t350;
t355 = t263 * t347;
t354 = t266 * t350;
t353 = t267 * t347;
t168 = t207 * t260 + t208 * t261;
t293 = -t261 * t207 + t208 * t260;
t111 = -qJD(6) * t175 + t168 * t266 - t262 * t293;
t247 = qJD(6) + t249;
t159 = t247 * t175;
t351 = t111 - t159;
t197 = t249 * t212;
t349 = t168 - t197;
t150 = t168 + t197;
t294 = t262 * t168 + t266 * t293;
t88 = (qJD(6) - t247) * t177 + t294;
t184 = (qJD(4) - t249) * t238 + t292;
t173 = t175 ^ 2;
t174 = t177 ^ 2;
t211 = t214 ^ 2;
t234 = t238 ^ 2;
t246 = t247 ^ 2;
t308 = qJD(5) * t212;
t205 = -0.2e1 * t308;
t311 = t260 * t115 + t261 * t117;
t71 = t205 + t311;
t42 = t260 * t71 + t261 * t284;
t344 = pkin(4) * t42;
t324 = t214 * t249;
t146 = t293 - t324;
t107 = -t146 * t260 - t150 * t261;
t343 = pkin(4) * t107;
t46 = pkin(5) * t348 - pkin(9) * t150 + t284;
t287 = pkin(5) * t249 - pkin(9) * t214;
t58 = -t210 * pkin(5) - pkin(9) * t293 - t249 * t287 + t71;
t34 = t262 * t58 - t266 * t46;
t35 = t262 * t46 + t266 * t58;
t17 = t262 * t35 - t266 * t34;
t341 = t17 * t260;
t340 = t17 * t261;
t215 = t264 * g(3) + t268 * t226;
t191 = qJDD(3) * pkin(3) + t270 * pkin(8) - t268 * t276 + t215;
t130 = t207 * pkin(4) + t233 * qJ(5) - t238 * t283 - qJDD(5) + t191;
t80 = -pkin(5) * t293 + t210 * pkin(9) - t214 * t287 + t130;
t339 = t262 * t80;
t338 = t263 * t42;
t337 = t266 * t80;
t336 = t267 * t42;
t335 = qJDD(1) * pkin(1);
t124 = t128 + t231;
t334 = t124 * t262;
t333 = t124 * t266;
t332 = t130 * t260;
t331 = t130 * t261;
t165 = t179 + t235;
t330 = t165 * t260;
t329 = t165 * t261;
t328 = t191 * t263;
t327 = t191 * t267;
t200 = t219 + t235;
t326 = t200 * t263;
t325 = t200 * t267;
t323 = t247 * t262;
t322 = t247 * t266;
t321 = t249 * t260;
t320 = t249 * t261;
t319 = t249 * t263;
t318 = t249 * t267;
t258 = t264 ^ 2;
t317 = t258 * t271;
t259 = t268 ^ 2;
t316 = t259 * t271;
t315 = t264 * t235;
t298 = t264 * t271 * t268;
t314 = t264 * (qJDD(3) + t298);
t313 = t268 * (qJDD(3) - t298);
t310 = t258 + t259;
t305 = qJD(4) + t249;
t301 = t264 * t128;
t300 = t264 * t179;
t299 = t264 * t219;
t43 = -t260 * t284 + t261 * t71;
t18 = t262 * t34 + t266 * t35;
t105 = t143 * t263 + t267 * t144;
t8 = t18 * t260 + t340;
t291 = pkin(4) * t8 + pkin(5) * t17;
t91 = t111 + t159;
t55 = -t262 * t88 - t266 * t91;
t57 = t262 * t91 - t266 * t88;
t30 = t260 * t57 + t261 * t55;
t290 = pkin(4) * t30 + pkin(5) * t55;
t193 = -t211 - t346;
t131 = t193 * t261 - t330;
t289 = pkin(4) * t131 - t311;
t280 = t143 * t267 - t144 * t263;
t182 = t268 * t215 - t264 * t216;
t278 = qJ(2) + t288;
t126 = -t246 - t173;
t85 = t126 * t262 + t354;
t86 = t126 * t266 - t356;
t52 = t260 * t86 + t261 * t85;
t273 = pkin(4) * t52 + pkin(5) * t85 - t34;
t154 = -t174 - t246;
t98 = t154 * t266 - t334;
t99 = -t154 * t262 - t333;
t61 = t260 * t99 + t261 * t98;
t272 = pkin(4) * t61 + pkin(5) * t98 - t35;
t243 = t310 * qJDD(1);
t242 = t253 - 0.2e1 * t297;
t239 = t251 + 0.2e1 * t250;
t228 = -t274 + t335;
t225 = -t234 + t346;
t224 = t233 - t346;
t223 = t277 - 0.2e1 * t302 + t352;
t221 = -t314 + t268 * (-t270 - t316);
t220 = t264 * (-t270 - t317) + t313;
t218 = t234 - t233;
t217 = -t234 - t346;
t209 = -t346 - t233;
t198 = t233 + t234;
t195 = -t211 + t346;
t194 = t210 - t346;
t189 = t236 * t305 + t279;
t187 = t208 - t227;
t185 = -t238 * t305 - t292;
t178 = t211 - t210;
t172 = -t217 * t263 - t325;
t171 = t217 * t267 - t326;
t163 = t209 * t267 - t355;
t162 = t209 * t263 + t353;
t158 = -t174 + t246;
t157 = t173 - t246;
t156 = (-t212 * t261 + t214 * t260) * t249;
t155 = (-t212 * t260 - t214 * t261) * t249;
t153 = -t210 - t211;
t152 = -t184 * t267 + t188 * t263;
t145 = t293 + t324;
t141 = t168 * t261 - t214 * t321;
t140 = t168 * t260 + t214 * t320;
t139 = t212 * t320 + t260 * t293;
t138 = t212 * t321 - t261 * t293;
t137 = t194 * t261 - t330;
t136 = -t195 * t260 + t357;
t135 = t194 * t260 + t329;
t134 = t195 * t261 + t358;
t133 = -t193 * t260 - t329;
t132 = t172 * t264 + t189 * t268;
t129 = t163 * t264 + t185 * t268;
t127 = t174 - t173;
t122 = t170 * t261 - t358;
t120 = t152 * t264 + t198 * t268;
t119 = (-t175 * t266 + t177 * t262) * t247;
t118 = (-t175 * t262 - t177 * t266) * t247;
t114 = -t173 - t174;
t110 = -qJD(6) * t177 - t294;
t109 = -t146 * t261 + t150 * t260;
t108 = -t145 * t261 - t260 * t349;
t106 = -t145 * t260 + t261 * t349;
t103 = t157 * t266 - t334;
t102 = -t158 * t262 + t354;
t101 = t157 * t262 + t333;
t100 = t158 * t266 + t356;
t97 = -t131 * t263 + t133 * t267;
t96 = t131 * t267 + t133 * t263;
t95 = -qJ(5) * t131 - t331;
t94 = t105 * t264 + t191 * t268;
t93 = -qJ(5) * t121 - t332;
t87 = (qJD(6) + t247) * t177 + t294;
t84 = t111 * t266 - t177 * t323;
t83 = t111 * t262 + t177 * t322;
t82 = -t110 * t262 + t175 * t322;
t81 = t110 * t266 + t175 * t323;
t79 = -t121 * t263 + t122 * t267;
t78 = t121 * t267 + t122 * t263;
t77 = -t118 * t260 + t119 * t261;
t76 = t118 * t261 + t119 * t260;
t75 = -pkin(4) * t349 + qJ(5) * t133 - t332;
t74 = t264 * t97 - t268 * t349;
t73 = -pkin(4) * t145 + qJ(5) * t122 + t331;
t72 = -t145 * t268 + t264 * t79;
t68 = -t107 * t263 + t109 * t267;
t67 = t107 * t267 + t109 * t263;
t66 = -t101 * t260 + t103 * t261;
t65 = -t100 * t260 + t102 * t261;
t64 = t101 * t261 + t103 * t260;
t63 = t100 * t261 + t102 * t260;
t62 = -t260 * t98 + t261 * t99;
t60 = -pkin(9) * t98 - t337;
t59 = -t153 * t268 + t264 * t68;
t56 = -t262 * t351 - t266 * t87;
t54 = -t262 * t87 + t266 * t351;
t53 = -t260 * t85 + t261 * t86;
t51 = -t260 * t83 + t261 * t84;
t50 = -t260 * t81 + t261 * t82;
t49 = t260 * t84 + t261 * t83;
t48 = t260 * t82 + t261 * t81;
t47 = -pkin(9) * t85 - t339;
t44 = -pkin(5) * t351 + pkin(9) * t99 - t339;
t41 = -pkin(5) * t87 + pkin(9) * t86 + t337;
t40 = -t263 * t61 + t267 * t62;
t39 = t263 * t62 + t267 * t61;
t38 = pkin(4) * t130 + qJ(5) * t43;
t37 = -qJ(5) * t107 - t42;
t36 = -pkin(4) * t153 + qJ(5) * t109 + t43;
t32 = -t260 * t55 + t261 * t57;
t31 = -t260 * t54 + t261 * t56;
t29 = t260 * t56 + t261 * t54;
t28 = -t263 * t52 + t267 * t53;
t27 = t263 * t53 + t267 * t52;
t26 = t264 * t40 - t268 * t351;
t25 = t264 * t28 - t268 * t87;
t24 = t267 * t43 - t338;
t23 = t263 * t43 + t336;
t22 = t130 * t268 + t24 * t264;
t21 = -qJ(5) * t61 - t260 * t44 + t261 * t60;
t20 = -qJ(5) * t52 - t260 * t41 + t261 * t47;
t19 = -pkin(4) * t351 + qJ(5) * t62 + t260 * t60 + t261 * t44;
t16 = -t263 * t30 + t267 * t32;
t15 = t263 * t32 + t267 * t30;
t14 = -pkin(4) * t87 + qJ(5) * t53 + t260 * t47 + t261 * t41;
t13 = -t114 * t268 + t16 * t264;
t12 = pkin(5) * t80 + pkin(9) * t18;
t11 = -pkin(9) * t55 - t17;
t10 = -pkin(5) * t114 + pkin(9) * t57 + t18;
t9 = t18 * t261 - t341;
t7 = -qJ(5) * t30 - t10 * t260 + t11 * t261;
t6 = -pkin(4) * t114 + qJ(5) * t32 + t10 * t261 + t11 * t260;
t5 = -t263 * t8 + t267 * t9;
t4 = t263 * t9 + t267 * t8;
t3 = -pkin(9) * t340 - qJ(5) * t8 - t12 * t260;
t2 = t264 * t5 + t268 * t80;
t1 = pkin(4) * t80 - pkin(9) * t341 + qJ(5) * t9 + t12 * t261;
t33 = [0, 0, 0, 0, 0, qJDD(1), t296, t286, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t285 - 0.2e1 * t335, t255 + 0.2e1 * t257 - t286, pkin(1) * t228 + qJ(2) * (-t271 * pkin(1) + t275), -t281 * t268, -t239 * t268 - t242 * t264, t313 - t264 * (t270 - t316), t282 * t264, t268 * (-t270 + t317) - t314, 0, qJ(2) * t239 - t220 * t345 - t264 * t223, qJ(2) * t242 - t221 * t345 - t268 * t223, t243 * t345 - t310 * t312 - t182, -qJ(2) * t223 - t182 * t345, t268 * (t208 * t267 - t238 * t319) + t299, t268 * (t185 * t267 - t187 * t263) + t264 * t218, t268 * (-t225 * t263 + t353) + t264 * t188, t268 * (-t207 * t263 + t236 * t318) - t299, t268 * (t224 * t267 - t326) - t264 * t184, t315 + t268 * (-t236 * t267 + t238 * t263) * t249, t268 * (-pkin(8) * t162 - t328) - t264 * (-pkin(3) * t162 + t143) + qJ(2) * t162 - t345 * t129, t268 * (-pkin(8) * t171 - t327) - t264 * (-pkin(3) * t171 + t144) + qJ(2) * t171 - t345 * t132, t268 * t280 + t278 * (-t184 * t263 - t188 * t267) - t345 * t120, -t278 * t280 - t345 * t94, t268 * (-t140 * t263 + t141 * t267) + t300, t268 * (-t106 * t263 + t108 * t267) + t264 * t178, t268 * (-t134 * t263 + t136 * t267) + t264 * t150, t268 * (-t138 * t263 + t139 * t267) - t300, t268 * (-t135 * t263 + t137 * t267) - t264 * t146, t268 * (-t155 * t263 + t156 * t267) + t315, t268 * (-pkin(8) * t78 - t263 * t73 + t267 * t93) - t264 * (-pkin(3) * t78 - t359) + qJ(2) * t78 - t345 * t72, t268 * (-pkin(8) * t96 - t263 * t75 + t267 * t95) - t264 * (-pkin(3) * t96 + t205 - t289) + qJ(2) * t96 - t345 * t74, t268 * (-pkin(8) * t67 - t263 * t36 + t267 * t37) - t264 * (-pkin(3) * t67 - t343) + qJ(2) * t67 - t345 * t59, t268 * (-pkin(8) * t23 - qJ(5) * t336 - t263 * t38) - t264 * (-pkin(3) * t23 - t344) + qJ(2) * t23 - t345 * t22, t268 * (-t263 * t49 + t267 * t51) + t301, t268 * (-t263 * t29 + t267 * t31) + t264 * t127, t268 * (-t263 * t63 + t267 * t65) + t264 * t91, t268 * (-t263 * t48 + t267 * t50) - t301, t268 * (-t263 * t64 + t267 * t66) - t264 * t88, t268 * (-t263 * t76 + t267 * t77) + t264 * t231, t268 * (-pkin(8) * t27 - t14 * t263 + t20 * t267) - t264 * (-pkin(3) * t27 - t273) + qJ(2) * t27 - t345 * t25, t268 * (-pkin(8) * t39 - t19 * t263 + t21 * t267) - t264 * (-pkin(3) * t39 - t272) + qJ(2) * t39 - t345 * t26, t268 * (-pkin(8) * t15 - t263 * t6 + t267 * t7) - t264 * (-pkin(3) * t15 - t290) + qJ(2) * t15 - t345 * t13, t268 * (-pkin(8) * t4 - t1 * t263 + t267 * t3) - t264 * (-pkin(3) * t4 - t291) + qJ(2) * t4 - t345 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t271, -t228, 0, 0, 0, 0, 0, 0, t220, t221, -t243, t182, 0, 0, 0, 0, 0, 0, t129, t132, t120, t94, 0, 0, 0, 0, 0, 0, t72, t74, t59, t22, 0, 0, 0, 0, 0, 0, t25, t26, t13, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, (-t258 + t259) * t271, t253, -t298, -t251, qJDD(3), t215, t216, 0, 0, t208 * t263 + t238 * t318, t185 * t263 + t187 * t267, t225 * t267 + t355, t207 * t267 + t236 * t319, t224 * t263 + t325, (-t236 * t263 - t238 * t267) * t249, pkin(3) * t185 + pkin(8) * t163 + t327, pkin(3) * t189 + pkin(8) * t172 - t328, pkin(3) * t198 + pkin(8) * t152 + t105, pkin(3) * t191 + pkin(8) * t105, t140 * t267 + t141 * t263, t106 * t267 + t108 * t263, t134 * t267 + t136 * t263, t138 * t267 + t139 * t263, t135 * t267 + t137 * t263, t155 * t267 + t156 * t263, -pkin(3) * t145 + pkin(8) * t79 + t263 * t93 + t267 * t73, -pkin(3) * t349 + pkin(8) * t97 + t263 * t95 + t267 * t75, -pkin(3) * t153 + pkin(8) * t68 + t263 * t37 + t267 * t36, pkin(3) * t130 + pkin(8) * t24 - qJ(5) * t338 + t267 * t38, t263 * t51 + t267 * t49, t263 * t31 + t267 * t29, t263 * t65 + t267 * t63, t263 * t50 + t267 * t48, t263 * t66 + t267 * t64, t263 * t77 + t267 * t76, -pkin(3) * t87 + pkin(8) * t28 + t14 * t267 + t20 * t263, -pkin(3) * t351 + pkin(8) * t40 + t19 * t267 + t21 * t263, -pkin(3) * t114 + pkin(8) * t16 + t263 * t7 + t267 * t6, pkin(3) * t80 + pkin(8) * t5 + t1 * t267 + t263 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t219, t218, t188, -t219, -t184, t235, -t143, -t144, 0, 0, t179, t178, t150, -t179, -t146, t235, t359, t289 + 0.2e1 * t308, t343, t344, t128, t127, t91, -t128, -t88, t231, t273, t272, t290, t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, t349, t153, -t130, 0, 0, 0, 0, 0, 0, t87, t351, t114, -t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, t127, t91, -t128, -t88, t231, -t34, -t35, 0, 0;];
tauJ_reg  = t33;
