% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPR8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR8_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:24:51
% EndTime: 2019-03-09 05:25:03
% DurationCPUTime: 5.01s
% Computational Cost: add. (5241->372), mult. (11818->674), div. (0->0), fcn. (10685->8), ass. (0->170)
t119 = cos(qJ(3));
t116 = sin(qJ(4));
t118 = cos(qJ(4));
t212 = sin(pkin(10));
t213 = cos(pkin(10));
t222 = t213 * t116 + t212 * t118;
t215 = t222 * t119;
t169 = qJD(4) * t212;
t170 = qJD(4) * t213;
t76 = -t116 * t169 + t118 * t170;
t228 = t119 * t76;
t223 = t212 * t116 - t213 * t118;
t117 = sin(qJ(3));
t218 = pkin(3) * t117;
t156 = -pkin(8) * t119 + t218;
t151 = qJ(2) + t156;
t110 = t119 * qJD(3);
t120 = -pkin(1) - pkin(7);
t180 = t120 * t110;
t227 = qJD(4) * t151 + t180;
t217 = pkin(3) * t119;
t157 = pkin(8) * t117 + t217;
t226 = t118 * t157;
t206 = t116 * t170 + t118 * t169;
t225 = t119 * t206;
t224 = t222 * t117;
t162 = t213 * pkin(4) + pkin(5);
t190 = t212 * pkin(4);
t219 = sin(qJ(6));
t220 = cos(qJ(6));
t72 = t220 * t162 - t219 * t190;
t112 = t116 ^ 2;
t114 = t118 ^ 2;
t205 = t112 - t114;
t167 = qJD(4) * t205;
t113 = t117 ^ 2;
t115 = t119 ^ 2;
t166 = (t113 - t115) * qJD(3);
t221 = 2 * qJD(2);
t216 = -qJ(5) - pkin(8);
t210 = t116 * t120;
t177 = pkin(4) - t210;
t208 = t118 * t119;
t83 = t118 * t151;
t46 = -qJ(5) * t208 + t177 * t117 + t83;
t211 = t116 * t119;
t209 = t117 * t120;
t98 = t118 * t209;
t60 = t116 * t151 + t98;
t51 = -qJ(5) * t211 + t60;
t23 = t212 * t46 + t213 * t51;
t53 = t223 * t216;
t109 = t117 * qJD(3);
t104 = t120 * t109;
t198 = qJD(4) * t119;
t186 = t118 * t198;
t214 = pkin(4) * t186 + t104;
t207 = t119 * t120;
t204 = t112 + t114;
t202 = t113 + t115;
t201 = qJD(4) * t116;
t200 = qJD(4) * t117;
t199 = qJD(4) * t118;
t197 = qJD(4) * t120;
t196 = qJD(5) * t119;
t195 = t118 * qJD(5);
t194 = -0.2e1 * pkin(3) * qJD(4);
t144 = t157 * qJD(3) + qJD(2);
t193 = t116 * t144 + t118 * t227;
t108 = pkin(4) * t201;
t192 = t116 * t209;
t191 = t116 * t207;
t107 = -t118 * pkin(4) - pkin(3);
t189 = t116 * t109;
t188 = t116 * t198;
t187 = t116 * t197;
t185 = t118 * t197;
t184 = qJ(5) * t198;
t183 = t116 * t199;
t182 = t118 * t109;
t181 = t117 * t110;
t179 = qJD(6) * t220;
t178 = qJD(6) * t219;
t176 = qJD(4) * t216;
t172 = qJD(3) * t213;
t171 = qJD(3) * t212;
t168 = t204 * t119;
t85 = pkin(4) * t211 - t207;
t100 = 0.2e1 * t181;
t165 = t116 * t182;
t164 = t115 * t183;
t163 = t220 * t215;
t161 = t119 * t172;
t160 = t119 * t171;
t59 = t83 - t192;
t155 = t116 * t60 + t118 * t59;
t154 = t116 * t59 - t118 * t60;
t125 = (qJD(2) - t196) * t118 + (-t98 + (-t216 * t119 - qJ(2) - t218) * t116) * qJD(4) + (t177 * t119 + (-t216 * t117 + t217) * t118) * qJD(3);
t130 = t118 * t184 - (-t196 + (qJ(5) * qJD(3) - t197) * t117) * t116 - t193;
t129 = t213 * t130;
t11 = t212 * t125 - t129;
t131 = qJD(3) * t224 - t228;
t122 = pkin(9) * t131 + t11;
t128 = t212 * t130;
t10 = t213 * t125 + t128;
t41 = t225 + (-t116 * t171 + t118 * t172) * t117;
t123 = pkin(5) * t110 + t41 * pkin(9) + t10;
t22 = -t212 * t51 + t213 * t46;
t70 = t223 * t119;
t138 = t117 * pkin(5) + t70 * pkin(9) + t22;
t136 = t220 * t138;
t17 = -t215 * pkin(9) + t23;
t1 = -qJD(6) * t136 - t220 * t122 - t219 * t123 + t17 * t178;
t69 = t223 * t117;
t37 = -t219 * t224 - t220 * t69;
t147 = t220 * t223;
t146 = -qJD(5) * t116 + t118 * t176;
t145 = t116 * t176 + t195;
t38 = -t219 * t215 - t220 * t70;
t140 = qJD(3) * t222;
t48 = -t219 * t223 + t220 * t222;
t27 = t117 * t187 - t193;
t28 = t118 * qJD(2) - t60 * qJD(4) + (-t191 + t226) * qJD(3);
t139 = -qJD(4) * t155 - t116 * t28 - t118 * t27;
t52 = t222 * t216;
t73 = t219 * t162 + t220 * t190;
t137 = -pkin(9) * t222 + t52;
t135 = t219 * t138;
t134 = t220 * t137;
t133 = t219 * t137;
t132 = -t117 * t140 + t228;
t9 = t220 * t17 + t135;
t43 = t213 * t145 + t212 * t146;
t42 = -t212 * t145 + t213 * t146;
t127 = -t76 * pkin(9) + t42;
t126 = -t206 * pkin(9) + t43;
t124 = qJ(5) * t182 - t117 * t185 + t118 * t144 - t119 * t195 + (t184 - t227) * t116;
t121 = -t219 * t122 + t220 * t123;
t111 = qJ(2) * t221;
t80 = -t186 + t189;
t79 = t116 * t110 + t117 * t199;
t78 = -t182 - t188;
t77 = -t118 * t110 + t116 * t200;
t64 = t73 * qJD(6);
t63 = t72 * qJD(6);
t62 = pkin(5) * t223 + t107;
t56 = t206 * pkin(5) + t108;
t55 = -pkin(4) * t189 + t214;
t54 = t119 * t167 + t165;
t50 = t215 * pkin(5) + t85;
t47 = t219 * t222 + t147;
t44 = -pkin(9) * t223 + t53;
t40 = qJD(4) * t224 + t116 * t160 - t118 * t161;
t39 = -t119 * t140 + t200 * t223;
t36 = -t219 * t70 + t163;
t35 = t219 * t69 - t220 * t224;
t24 = t228 * pkin(5) + (-t116 * pkin(4) - pkin(5) * t222) * t109 + t214;
t21 = t48 * qJD(6) + t220 * t206 + t219 * t76;
t20 = qJD(6) * t147 + t178 * t222 + t219 * t206 - t220 * t76;
t19 = t220 * t44 + t133;
t18 = -t219 * t44 + t134;
t15 = t38 * qJD(6) - t220 * t131 - t219 * t41;
t14 = -t37 * qJD(6) + t219 * t40 + t220 * t39;
t13 = qJD(6) * t163 - t219 * t131 - t70 * t178 + t220 * t41;
t12 = -t69 * t178 + t179 * t224 - t219 * t39 + t220 * t40;
t8 = -t219 * t17 + t136;
t4 = -qJD(6) * t133 - t219 * t126 + t220 * t127 - t44 * t179;
t3 = -qJD(6) * t134 - t220 * t126 - t219 * t127 + t44 * t178;
t2 = -qJD(6) * t9 + t121;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, t111, -0.2e1 * t181, 0.2e1 * t166, 0, t100, 0, 0, 0.2e1 * qJ(2) * t110 + 0.2e1 * qJD(2) * t117, -0.2e1 * qJ(2) * t109 + 0.2e1 * qJD(2) * t119, 0, t111, -0.2e1 * t114 * t181 - 0.2e1 * t164, 0.2e1 * t115 * t167 + 0.4e1 * t119 * t165, -0.2e1 * t117 * t188 - 0.2e1 * t118 * t166, -0.2e1 * t112 * t181 + 0.2e1 * t164, 0.2e1 * t116 * t166 - 0.2e1 * t117 * t186, t100, -0.2e1 * t115 * t185 + 0.2e1 * t28 * t117 + 0.2e1 * (t59 + 0.2e1 * t192) * t110, 0.2e1 * t115 * t187 + 0.2e1 * t27 * t117 + 0.2e1 * (-t60 + 0.2e1 * t98) * t110, 0.2e1 * t155 * t109 + 0.2e1 * (qJD(4) * t154 + t116 * t27 - t118 * t28) * t119, -0.2e1 * t120 ^ 2 * t181 - 0.2e1 * t60 * t27 + 0.2e1 * t59 * t28, 0.2e1 * t70 * t41, -0.2e1 * t70 * t131 + 0.2e1 * t41 * t215, -0.2e1 * t70 * t110 - 0.2e1 * t117 * t41, -0.2e1 * t215 * t131, -0.2e1 * t228 * t117 + 0.2e1 * (t113 * t222 - t215 * t119) * qJD(3), t100, 0.2e1 * t10 * t117 + 0.2e1 * t55 * t215 + 0.2e1 * t85 * t228 + 0.2e1 * (t22 * t119 - t224 * t85) * qJD(3), -0.2e1 * t11 * t117 - 0.2e1 * t110 * t23 - 0.2e1 * t41 * t85 - 0.2e1 * t55 * t70, 0.2e1 * t10 * t70 - 0.2e1 * t11 * t215 + 0.2e1 * t23 * t131 + 0.2e1 * t22 * t41, 0.2e1 * t10 * t22 + 0.2e1 * t11 * t23 + 0.2e1 * t55 * t85, -0.2e1 * t38 * t13, 0.2e1 * t13 * t36 - 0.2e1 * t15 * t38, 0.2e1 * t110 * t38 - 0.2e1 * t117 * t13, 0.2e1 * t36 * t15, -0.2e1 * t110 * t36 - 0.2e1 * t117 * t15, t100, 0.2e1 * t110 * t8 + 0.2e1 * t117 * t2 + 0.2e1 * t15 * t50 + 0.2e1 * t24 * t36, 0.2e1 * t1 * t117 - 0.2e1 * t110 * t9 - 0.2e1 * t13 * t50 + 0.2e1 * t24 * t38, 0.2e1 * t1 * t36 + 0.2e1 * t13 * t8 - 0.2e1 * t15 * t9 - 0.2e1 * t2 * t38, -0.2e1 * t1 * t9 + 0.2e1 * t2 * t8 + 0.2e1 * t24 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202 * t199, t202 * t201, 0, -t154 * t110 + (t139 - 0.2e1 * t180) * t117, 0, 0, 0, 0, 0, 0, t39 * t117 - t119 * t228 + (0.2e1 * t215 * t117 - t224 * t119) * qJD(3), t117 * t40 + t119 * t41 + (-t117 * t70 + t119 * t69) * qJD(3), -t69 * t131 + t40 * t215 - t224 * t41 + t39 * t70, -t10 * t224 + t109 * t85 - t11 * t69 - t119 * t55 + t22 * t39 - t23 * t40, 0, 0, 0, 0, 0, 0, t117 * t14 - t119 * t15 + (t117 * t36 + t119 * t35) * qJD(3), t117 * t12 + t119 * t13 + (t117 * t38 - t119 * t37) * qJD(3), t12 * t36 + t13 * t35 - t14 * t38 - t15 * t37, -t1 * t37 + t109 * t50 - t119 * t24 - t12 * t9 + t14 * t8 + t2 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t204) * t100, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t224 * t39 + 0.2e1 * t40 * t69 - 0.2e1 * t181, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t12 * t37 + 0.2e1 * t14 * t35 - 0.2e1 * t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, 0, -t110, 0, -t104, -t180, 0, 0, -t54, t205 * t109 - 0.4e1 * t119 * t183, t79, t54, -t77, 0 (-t191 - t226) * qJD(4) + (t116 * t156 - t98) * qJD(3) (t157 * t116 - t118 * t207) * qJD(4) + (-pkin(8) * t208 + (t118 * pkin(3) + t210) * t117) * qJD(3), t139, -pkin(3) * t104 + pkin(8) * t139, -t222 * t41 - t70 * t76, t131 * t222 + t70 * t206 - t76 * t215 + t223 * t41, t110 * t222 + t117 * t76, -t131 * t223 + t215 * t206, -t110 * t223 - t206 * t117, 0, t107 * t132 + t215 * t108 + t52 * t110 + t42 * t117 + t85 * t206 + t223 * t55, -t107 * t41 - t108 * t70 - t110 * t53 - t117 * t43 + t222 * t55 + t76 * t85, -t10 * t222 - t11 * t223 + t53 * t131 - t23 * t206 - t43 * t215 - t22 * t76 + t52 * t41 + t42 * t70, t10 * t52 + t107 * t55 + t108 * t85 + t11 * t53 + t22 * t42 + t23 * t43, -t13 * t48 - t20 * t38, t13 * t47 - t15 * t48 + t20 * t36 - t21 * t38, t110 * t48 - t117 * t20, t15 * t47 + t21 * t36, -t110 * t47 - t117 * t21, 0, t110 * t18 + t117 * t4 + t15 * t62 + t21 * t50 + t24 * t47 + t36 * t56, -t110 * t19 + t117 * t3 - t13 * t62 - t20 * t50 + t24 * t48 + t38 * t56, t1 * t47 + t13 * t18 - t15 * t19 - t2 * t48 + t20 * t8 - t21 * t9 + t3 * t36 - t38 * t4, -t1 * t19 + t18 * t2 + t24 * t62 - t3 * t9 + t4 * t8 + t50 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t110, 0, 0, 0, 0, 0, 0, 0, 0, t78, t80, qJD(3) * t168 (pkin(8) * t168 - t218) * qJD(3), 0, 0, 0, 0, 0, 0, t109 * t223 - t225, t109 * t222 - t228, t69 * t206 - t222 * t39 + t223 * t40 + t224 * t76, -pkin(4) * t188 + t107 * t109 - t224 * t42 + t39 * t52 - t40 * t53 - t43 * t69, 0, 0, 0, 0, 0, 0, t109 * t47 - t119 * t21, t109 * t48 + t119 * t20, t12 * t47 - t14 * t48 + t20 * t35 - t21 * t37, t109 * t62 - t119 * t56 - t12 * t19 + t14 * t18 - t3 * t37 + t35 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t183, -0.2e1 * t167, 0, -0.2e1 * t183, 0, 0, t116 * t194, t118 * t194, 0, 0, 0.2e1 * t222 * t76, -0.2e1 * t206 * t222 - 0.2e1 * t223 * t76, 0, 0.2e1 * t223 * t206, 0, 0, 0.2e1 * t107 * t206 + 0.2e1 * t108 * t223, 0.2e1 * t107 * t76 + 0.2e1 * t108 * t222, -0.2e1 * t53 * t206 - 0.2e1 * t222 * t42 - 0.2e1 * t223 * t43 - 0.2e1 * t52 * t76, 0.2e1 * t107 * t108 + 0.2e1 * t42 * t52 + 0.2e1 * t43 * t53, -0.2e1 * t48 * t20, 0.2e1 * t20 * t47 - 0.2e1 * t21 * t48, 0, 0.2e1 * t47 * t21, 0, 0, 0.2e1 * t21 * t62 + 0.2e1 * t47 * t56, -0.2e1 * t20 * t62 + 0.2e1 * t48 * t56, 0.2e1 * t18 * t20 - 0.2e1 * t19 * t21 + 0.2e1 * t3 * t47 - 0.2e1 * t4 * t48, 0.2e1 * t18 * t4 - 0.2e1 * t19 * t3 + 0.2e1 * t56 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, t80, t110, t28, t27, 0, 0, 0, 0, -t41, 0, t131, t110, 0.2e1 * pkin(4) * t161 + t213 * t124 + t128, -0.2e1 * pkin(4) * t160 - t212 * t124 + t129 (t212 * t131 + t213 * t41) * pkin(4) (t213 * t10 + t212 * t11) * pkin(4), 0, 0, -t13, 0, -t15, t110, -qJD(6) * t135 + t110 * t72 - t64 * t117 - t17 * t179 + t121, -t110 * t73 - t63 * t117 + t1, t13 * t72 - t15 * t73 - t36 * t63 + t38 * t64, -t1 * t73 + t2 * t72 + t63 * t9 - t64 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t77, 0, 0, 0, 0, 0, 0, 0, 0, t39, t40, 0 (-t212 * t40 + t213 * t39) * pkin(4), 0, 0, 0, 0, 0, 0, t14, t12, 0, -t12 * t73 + t14 * t72 - t35 * t64 + t37 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, 0, -t201, 0, -pkin(8) * t199, pkin(8) * t201, 0, 0, 0, 0, t76, 0, -t206, 0, t42, -t43 (-t212 * t206 - t213 * t76) * pkin(4) (t212 * t43 + t213 * t42) * pkin(4), 0, 0, -t20, 0, -t21, 0, t4, t3, t20 * t72 - t21 * t73 - t47 * t63 + t48 * t64, -t18 * t64 + t19 * t63 - t3 * t73 + t4 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t64, -0.2e1 * t63, 0, 0.2e1 * t63 * t73 - 0.2e1 * t64 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, -t41, 0, t55, 0, 0, 0, 0, 0, 0, t15, -t13, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, t76, 0, t108, 0, 0, 0, 0, 0, 0, t21, -t20, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13, 0, -t15, t110, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, 0, -t21, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, -t63, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t5;
