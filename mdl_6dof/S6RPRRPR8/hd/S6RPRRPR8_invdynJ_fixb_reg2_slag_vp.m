% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:24:58
% EndTime: 2019-03-09 05:25:21
% DurationCPUTime: 13.16s
% Computational Cost: add. (13200->687), mult. (26732->884), div. (0->0), fcn. (18301->14), ass. (0->314)
t276 = sin(qJ(6));
t277 = sin(qJ(4));
t280 = cos(qJ(4));
t357 = t280 * qJD(3);
t281 = cos(qJ(3));
t369 = qJD(1) * t281;
t216 = t277 * t369 - t357;
t366 = qJD(3) * t277;
t218 = t280 * t369 + t366;
t273 = sin(pkin(10));
t274 = cos(pkin(10));
t327 = t216 * t274 + t218 * t273;
t439 = cos(qJ(6));
t304 = t439 * t327;
t311 = -t216 * t273 + t218 * t274;
t358 = qJD(6) * t276;
t278 = sin(qJ(3));
t341 = t278 * t357;
t359 = qJD(4) * t281;
t297 = t277 * t359 + t341;
t352 = t281 * qJDD(1);
t124 = qJD(1) * t297 - qJD(4) * t357 - qJDD(3) * t277 - t280 * t352;
t365 = qJD(3) * t278;
t342 = t277 * t365;
t362 = qJD(4) * t218;
t125 = -qJD(1) * t342 - qJDD(3) * t280 + t277 * t352 + t362;
t61 = -t124 * t273 + t125 * t274;
t62 = -t124 * t274 - t125 * t273;
t14 = qJD(6) * t304 + t276 * t61 + t311 * t358 - t439 * t62;
t370 = qJD(1) * t278;
t241 = qJD(4) + t370;
t236 = qJD(6) + t241;
t68 = t276 * t311 + t304;
t423 = t236 * t68;
t462 = -t14 + t423;
t430 = t68 ^ 2;
t452 = -t276 * t327 + t311 * t439;
t431 = t452 ^ 2;
t461 = -t430 + t431;
t429 = t68 * t452;
t319 = pkin(3) * t278 - pkin(8) * t281;
t225 = qJ(2) + t319;
t194 = t225 * qJD(1);
t283 = -pkin(1) - pkin(7);
t238 = qJD(1) * t283 + qJD(2);
t224 = t278 * t238;
t201 = qJD(3) * pkin(8) + t224;
t120 = t194 * t280 - t201 * t277;
t86 = -qJ(5) * t218 + t120;
t79 = pkin(4) * t241 + t86;
t121 = t194 * t277 + t201 * t280;
t87 = -qJ(5) * t216 + t121;
t82 = t273 * t87;
t41 = t274 * t79 - t82;
t448 = pkin(9) * t311;
t30 = pkin(5) * t241 + t41 - t448;
t422 = t274 * t87;
t42 = t273 * t79 + t422;
t454 = pkin(9) * t327;
t33 = t42 - t454;
t337 = qJD(6) * t439;
t355 = qJD(1) * qJD(3);
t336 = t281 * t355;
t353 = t278 * qJDD(1);
t208 = qJDD(4) + t336 + t353;
t320 = pkin(3) * t281 + pkin(8) * t278;
t209 = qJD(3) * t320 + qJD(2);
t136 = qJD(1) * t209 + qJDD(1) * t225;
t127 = t280 * t136;
t234 = qJDD(1) * t283 + qJDD(2);
t364 = qJD(3) * t281;
t144 = qJDD(3) * pkin(8) + t234 * t278 + t238 * t364;
t48 = -qJD(4) * t121 - t277 * t144 + t127;
t26 = pkin(4) * t208 + qJ(5) * t124 - qJD(5) * t218 + t48;
t360 = qJD(4) * t280;
t361 = qJD(4) * t277;
t47 = t136 * t277 + t144 * t280 + t194 * t360 - t201 * t361;
t31 = -qJ(5) * t125 - qJD(5) * t216 + t47;
t8 = t26 * t274 - t273 * t31;
t6 = pkin(5) * t208 - pkin(9) * t62 + t8;
t9 = t26 * t273 + t274 * t31;
t7 = -pkin(9) * t61 + t9;
t1 = t276 * t6 + t30 * t337 - t33 * t358 + t439 * t7;
t269 = qJ(4) + pkin(10);
t260 = qJ(6) + t269;
t249 = sin(t260);
t250 = cos(t260);
t282 = cos(qJ(1));
t279 = sin(qJ(1));
t395 = t278 * t279;
t154 = t249 * t282 + t250 * t395;
t393 = t278 * t282;
t156 = -t249 * t279 + t250 * t393;
t432 = g(3) * t281;
t386 = t281 * t238;
t202 = -qJD(3) * pkin(3) - t386;
t138 = t216 * pkin(4) + qJD(5) + t202;
t76 = pkin(5) * t327 + t138;
t460 = g(1) * t154 - g(2) * t156 + t250 * t432 + t68 * t76 - t1;
t221 = t320 * qJD(1);
t140 = t221 * t280 - t277 * t386;
t428 = qJ(5) + pkin(8);
t331 = qJD(4) * t428;
t394 = t278 * t280;
t459 = -(pkin(4) * t281 + qJ(5) * t394) * qJD(1) - t140 - t277 * qJD(5) - t280 * t331;
t141 = t221 * t277 + t280 * t386;
t343 = t277 * t370;
t356 = t280 * qJD(5);
t458 = qJ(5) * t343 + t277 * t331 + t141 - t356;
t15 = qJD(6) * t452 + t276 * t62 + t439 * t61;
t421 = t452 * t236;
t457 = -t15 + t421;
t211 = t273 * t280 + t274 * t277;
t191 = t211 * qJD(4);
t192 = t211 * qJD(1);
t379 = t192 * t278 + t191;
t329 = -qJDD(3) * pkin(3) + t238 * t365;
t401 = t234 * t281;
t143 = t329 - t401;
t433 = g(3) * t278;
t266 = g(2) * t282;
t267 = g(1) * t279;
t444 = t267 - t266;
t295 = t281 * t444 - t433;
t292 = -t143 - t295;
t456 = -pkin(8) * qJD(4) * t241 + t292;
t399 = t274 * t280;
t210 = t273 * t277 - t399;
t442 = qJD(4) * t210;
t378 = t273 * t343 - t370 * t399 + t442;
t153 = -t249 * t395 + t250 * t282;
t155 = t249 * t393 + t250 * t279;
t11 = t276 * t30 + t33 * t439;
t2 = -qJD(6) * t11 - t276 * t7 + t439 * t6;
t455 = -g(1) * t153 - g(2) * t155 + t249 * t432 - t452 * t76 + t2;
t420 = t273 * t458 + t274 * t459;
t419 = t273 * t459 - t274 * t458;
t453 = t327 * t311;
t451 = -pkin(5) * t369 + pkin(9) * t378 + t420;
t450 = pkin(9) * t379 - t419;
t382 = qJD(1) * t210 - t211 * t364 + t278 * t442;
t175 = t211 * t278;
t178 = t210 * t281;
t381 = -qJD(3) * t178 - qJD(4) * t175 - t192;
t339 = t280 * t359;
t449 = t339 - t342;
t447 = -t120 * t241 + t47;
t271 = t278 ^ 2;
t272 = t281 ^ 2;
t372 = t271 + t272;
t330 = t372 * t234;
t321 = -t224 + (t343 + t361) * pkin(4);
t392 = t278 * t283;
t152 = t225 * t277 + t280 * t392;
t387 = t280 * t282;
t195 = -t277 * t395 + t387;
t391 = t279 * t280;
t197 = t277 * t393 + t391;
t443 = -g(1) * t195 - g(2) * t197;
t441 = 0.2e1 * qJ(2);
t440 = pkin(5) * t61;
t438 = pkin(4) * t273;
t437 = pkin(4) * t277;
t436 = pkin(4) * t280;
t231 = t428 * t277;
t232 = t428 * t280;
t145 = -t231 * t274 - t232 * t273;
t111 = -pkin(9) * t211 + t145;
t146 = -t231 * t273 + t232 * t274;
t112 = -pkin(9) * t210 + t146;
t51 = t111 * t439 - t112 * t276;
t427 = qJD(6) * t51 + t276 * t451 - t439 * t450;
t52 = t111 * t276 + t112 * t439;
t426 = -qJD(6) * t52 + t276 * t450 + t439 * t451;
t293 = -qJD(4) * t152 + t209 * t280;
t335 = -t277 * t283 + pkin(4);
t60 = qJ(5) * t341 + (qJ(5) * t361 + qJD(3) * t335 - t356) * t281 + t293;
t363 = qJD(3) * t283;
t340 = t281 * t363;
t346 = t209 * t277 + t225 * t360 + t280 * t340;
t64 = -qJ(5) * t339 + (-qJD(5) * t281 + (qJ(5) * qJD(3) - qJD(4) * t283) * t278) * t277 + t346;
t28 = t273 * t60 + t274 * t64;
t425 = t210 * t337 + t211 * t358 + t276 * t379 + t378 * t439;
t130 = -t210 * t276 + t211 * t439;
t424 = qJD(6) * t130 - t276 * t378 + t379 * t439;
t46 = t274 * t86 - t82;
t177 = t210 * t278;
t100 = -t175 * t276 - t177 * t439;
t418 = qJD(6) * t100 + t276 * t381 - t382 * t439;
t98 = -t175 * t439 + t177 * t276;
t417 = -qJD(6) * t98 - t276 * t382 - t381 * t439;
t251 = pkin(4) * t274 + pkin(5);
t181 = t251 * t439 - t276 * t438;
t45 = -t273 * t86 - t422;
t35 = t45 + t454;
t36 = t46 - t448;
t416 = qJD(6) * t181 - t276 * t35 - t36 * t439;
t182 = t251 * t276 + t438 * t439;
t415 = -qJD(6) * t182 + t276 * t36 - t35 * t439;
t414 = pkin(1) * qJDD(1);
t412 = t121 * t241;
t411 = t124 * t277;
t410 = t125 * t280;
t409 = t311 * t241;
t408 = t327 * t241;
t407 = t311 ^ 2;
t406 = t216 * t241;
t404 = t218 * t216;
t403 = t218 * t241;
t402 = t218 * t280;
t400 = t241 * t277;
t398 = t277 * t208;
t397 = t277 * t281;
t396 = t277 * t282;
t390 = t279 * t281;
t389 = t280 * t208;
t388 = t280 * t281;
t385 = t281 * t282;
t284 = qJD(3) ^ 2;
t384 = t283 * t284;
t285 = qJD(1) ^ 2;
t383 = t285 * qJ(2);
t207 = t280 * t225;
t128 = -qJ(5) * t388 + t278 * t335 + t207;
t139 = -qJ(5) * t397 + t152;
t73 = t128 * t273 + t139 * t274;
t380 = pkin(5) * t379 + t321;
t377 = g(1) * t385 + g(2) * t390;
t349 = 0.2e1 * qJD(1) * qJD(2);
t376 = (qJDD(1) * qJ(2) + t349) * qJ(2);
t375 = pkin(1) * t282 + qJ(2) * t279;
t373 = t271 - t272;
t371 = -t284 - t285;
t368 = qJD(3) * t216;
t367 = qJD(3) * t218;
t354 = qJDD(3) * t278;
t348 = t277 * t392;
t347 = t281 * t285 * t278;
t344 = pkin(7) * t282 + t375;
t253 = pkin(3) + t436;
t338 = t241 * t369;
t256 = cos(t269);
t223 = pkin(5) * t256 + t436;
t334 = -g(2) * t393 + t432;
t333 = -g(1) * t390 + t433;
t27 = -t273 * t64 + t274 * t60;
t328 = -t234 + t383;
t72 = t128 * t274 - t139 * t273;
t212 = pkin(4) * t397 - t281 * t283;
t326 = t372 * qJDD(1);
t325 = qJDD(2) - t414;
t324 = qJD(4) * t278 + qJD(1);
t323 = g(2) * t344;
t322 = t278 * t336;
t318 = g(1) * t282 + g(2) * t279;
t316 = -t444 - t383;
t315 = t327 ^ 2;
t314 = t281 * t327;
t313 = t120 * t280 + t121 * t277;
t312 = t120 * t277 - t121 * t280;
t220 = pkin(3) + t223;
t268 = -pkin(9) - t428;
t309 = t220 * t278 + t268 * t281;
t307 = t253 * t278 - t281 * t428;
t306 = qJDD(1) * t441 + t349;
t49 = pkin(5) * t278 + pkin(9) * t178 + t72;
t176 = t211 * t281;
t50 = -pkin(9) * t176 + t73;
t22 = -t276 * t50 + t439 * t49;
t23 = t276 * t49 + t439 * t50;
t101 = -t176 * t276 - t178 * t439;
t303 = t241 * t360 + t398;
t302 = -t241 * t361 + t389;
t148 = pkin(4) * t449 + t278 * t363;
t301 = -g(1) * t395 - t334;
t300 = qJDD(3) * t283 + t355 * t441;
t298 = pkin(4) * t125 + qJDD(5) + t329;
t296 = -pkin(8) * t208 + t202 * t241;
t74 = t298 - t401;
t291 = t306 - t318;
t290 = -qJD(4) * t313 - t48 * t277 + t47 * t280;
t288 = (-t234 - t266) * t281 + t298 - t333;
t263 = t282 * qJ(2);
t259 = qJDD(3) * t281;
t255 = sin(t269);
t222 = pkin(5) * t255 + t437;
t204 = qJDD(6) + t208;
t198 = -t277 * t279 + t278 * t387;
t196 = t278 * t391 + t396;
t171 = -t255 * t279 + t256 * t393;
t170 = t255 * t393 + t256 * t279;
t169 = t255 * t282 + t256 * t395;
t168 = -t255 * t395 + t256 * t282;
t160 = pkin(5) * t210 - t253;
t151 = t207 - t348;
t142 = t208 * t278 + t241 * t364;
t135 = pkin(5) * t176 + t212;
t129 = t210 * t439 + t211 * t276;
t108 = t191 * t281 - t273 * t342 + t274 * t341;
t106 = t211 * t365 + t281 * t442;
t99 = t176 * t439 - t178 * t276;
t90 = pkin(4) * t218 + pkin(5) * t311;
t89 = -t277 * t340 + t293;
t88 = -qJD(4) * t348 + t346;
t75 = -pkin(5) * t106 + t148;
t40 = qJD(6) * t101 - t106 * t439 - t108 * t276;
t38 = -t106 * t276 + t108 * t439 + t176 * t337 - t178 * t358;
t34 = t74 + t440;
t21 = pkin(9) * t106 + t28;
t20 = pkin(5) * t364 + pkin(9) * t108 + t27;
t10 = -t276 * t33 + t30 * t439;
t4 = -qJD(6) * t23 + t20 * t439 - t21 * t276;
t3 = qJD(6) * t22 + t20 * t276 + t21 * t439;
t5 = [0, 0, 0, 0, 0, qJDD(1), t444, t318, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t444 - 0.2e1 * t414, t291, -t325 * pkin(1) - g(1) * (-t279 * pkin(1) + t263) - g(2) * t375 + t376, qJDD(1) * t272 - 0.2e1 * t322, -0.2e1 * t278 * t352 + 0.2e1 * t355 * t373, -t278 * t284 + t259, qJDD(1) * t271 + 0.2e1 * t322, -t281 * t284 - t354, 0, t300 * t281 + (t291 - t384) * t278, -t300 * t278 + (t306 - t384) * t281 - t377, -t283 * t326 - t330 + t444, -g(1) * (t279 * t283 + t263) - t323 + t283 * t330 + t376, -t124 * t388 - t218 * t297 (t216 * t280 + t218 * t277) * t365 + (t411 - t410 + (t216 * t277 - t402) * qJD(4)) * t281 (-t241 * t357 - t124) * t278 + (t302 + t367) * t281, t125 * t397 + t216 * t449 (t241 * t366 - t125) * t278 + (-t303 - t368) * t281, t142, -g(1) * t198 - g(2) * t196 + t151 * t208 + t241 * t89 + (t48 + (-t202 * t277 + t216 * t283) * qJD(3)) * t278 + (qJD(3) * t120 - t125 * t283 + t143 * t277 + t202 * t360) * t281, g(1) * t197 - g(2) * t195 - t152 * t208 - t241 * t88 + (-t47 + (-t202 * t280 + t218 * t283) * qJD(3)) * t278 + (-qJD(3) * t121 + t124 * t283 + t143 * t280 - t202 * t361) * t281, t124 * t151 - t125 * t152 - t216 * t88 - t218 * t89 + t313 * t365 + (qJD(4) * t312 - t277 * t47 - t280 * t48) * t281 + t377, t47 * t152 + t121 * t88 + t48 * t151 + t120 * t89 - g(1) * (pkin(3) * t393 - pkin(8) * t385 + t263) - t323 + (-t143 * t281 + t202 * t365) * t283 + (-g(1) * t283 - g(2) * t319) * t279, -t108 * t311 - t178 * t62, t106 * t311 + t108 * t327 - t176 * t62 + t178 * t61, -t108 * t241 - t178 * t208 + t278 * t62 + t311 * t364, -t106 * t327 + t176 * t61, -qJD(3) * t314 + t106 * t241 - t176 * t208 - t278 * t61, t142, -g(1) * t171 - g(2) * t169 - t106 * t138 + t148 * t327 + t176 * t74 + t208 * t72 + t212 * t61 + t241 * t27 + t278 * t8 + t364 * t41, g(1) * t170 - g(2) * t168 - t108 * t138 + t148 * t311 - t178 * t74 - t208 * t73 + t212 * t62 - t241 * t28 - t278 * t9 - t364 * t42, t106 * t42 + t108 * t41 - t176 * t9 + t178 * t8 - t27 * t311 - t28 * t327 - t61 * t73 - t62 * t72 + t377, t9 * t73 + t42 * t28 + t8 * t72 + t41 * t27 + t74 * t212 + t138 * t148 - g(1) * (t253 * t393 - t385 * t428 + t263) - g(2) * (pkin(4) * t396 + t344) + (-g(1) * (-t437 + t283) - g(2) * t307) * t279, -t101 * t14 - t38 * t452, -t101 * t15 + t14 * t99 + t38 * t68 - t40 * t452, t101 * t204 - t14 * t278 - t236 * t38 + t364 * t452, t15 * t99 + t40 * t68, -t15 * t278 - t204 * t99 - t236 * t40 - t364 * t68, t204 * t278 + t236 * t364, -g(1) * t156 - g(2) * t154 + t10 * t364 + t135 * t15 + t2 * t278 + t204 * t22 + t236 * t4 + t34 * t99 + t40 * t76 + t68 * t75, g(1) * t155 - g(2) * t153 - t1 * t278 + t101 * t34 - t11 * t364 - t135 * t14 - t204 * t23 - t236 * t3 - t38 * t76 + t452 * t75, -t1 * t99 + t10 * t38 - t101 * t2 - t11 * t40 + t14 * t22 - t15 * t23 - t3 * t68 - t4 * t452 + t377, t1 * t23 + t11 * t3 + t2 * t22 + t10 * t4 + t34 * t135 + t76 * t75 - g(1) * (t220 * t393 + t268 * t385 + t263) - g(2) * (t222 * t282 + t344) + (-g(1) * (-t222 + t283) - g(2) * t309) * t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t285, t316 + t325, 0, 0, 0, 0, 0, 0, t278 * t371 + t259, t281 * t371 - t354, -t326, t330 + t316, 0, 0, 0, 0, 0, 0, -t125 * t281 + (t368 - t398) * t278 + (-t277 * t364 - t280 * t324) * t241, t124 * t281 + (t367 - t389) * t278 + (t277 * t324 - t281 * t357) * t241 (-t125 * t278 - t216 * t364 + t218 * t324) * t280 + (-t124 * t278 + t216 * t324 + t218 * t364) * t277, -t313 * qJD(1) + (-qJD(3) * t312 - t143) * t281 + (qJD(3) * t202 + t290) * t278 - t444, 0, 0, 0, 0, 0, 0, -t175 * t208 + t241 * t382 - t281 * t61 + t327 * t365, t177 * t208 - t241 * t381 - t281 * t62 + t311 * t365, t175 * t62 + t177 * t61 - t311 * t382 - t327 * t381, t138 * t365 - t175 * t8 - t177 * t9 - t281 * t74 + t381 * t42 + t382 * t41 - t444, 0, 0, 0, 0, 0, 0, -t281 * t15 + t98 * t204 - t236 * t418 + t365 * t68, -t100 * t204 + t281 * t14 + t236 * t417 + t365 * t452, -t100 * t15 + t14 * t98 + t417 * t68 + t418 * t452, t1 * t100 - t10 * t418 - t11 * t417 + t2 * t98 - t281 * t34 + t365 * t76 - t444; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, -t373 * t285, t352, -t347, -t353, qJDD(3) (-t328 + t266) * t281 + t333 (t328 + t267) * t278 + t334, 0, 0, t241 * t402 - t411 (-t124 - t406) * t280 + (-t125 - t403) * t277 (-t218 * t281 + t241 * t394) * qJD(1) + t303, t216 * t400 - t410 (t216 * t281 - t278 * t400) * qJD(1) + t302, -t338, -pkin(3) * t125 - t120 * t369 - t140 * t241 - t216 * t224 + t277 * t296 + t280 * t456, pkin(3) * t124 + t121 * t369 + t141 * t241 - t218 * t224 - t277 * t456 + t280 * t296, t140 * t218 + t141 * t216 + ((-t125 + t362) * pkin(8) + t447) * t280 + (-t48 - t412 + (qJD(4) * t216 - t124) * pkin(8)) * t277 + t301, -t202 * t224 - t120 * t140 - t121 * t141 + t292 * pkin(3) + (-t278 * t444 + t290 - t432) * pkin(8), t211 * t62 - t311 * t378, -t62 * t210 - t211 * t61 - t311 * t379 + t327 * t378, t208 * t211 - t241 * t378 - t311 * t369, t61 * t210 + t327 * t379, qJD(1) * t314 - t210 * t208 - t241 * t379, -t338, t138 * t379 + t145 * t208 + t74 * t210 + t241 * t420 - t253 * t61 - t256 * t295 + t321 * t327 - t369 * t41, -t138 * t378 - t146 * t208 + t211 * t74 - t241 * t419 - t253 * t62 + t255 * t295 + t311 * t321 + t369 * t42, -t145 * t62 - t146 * t61 - t9 * t210 - t8 * t211 - t311 * t420 - t327 * t419 + t378 * t41 - t379 * t42 + t301, g(3) * t307 + t138 * t321 + t8 * t145 + t9 * t146 - t74 * t253 + t41 * t420 + t419 * t42 - t444 * (t253 * t281 + t278 * t428) -t14 * t130 - t425 * t452, t129 * t14 - t130 * t15 - t424 * t452 + t425 * t68, t130 * t204 - t236 * t425 - t369 * t452, t129 * t15 + t424 * t68, -t129 * t204 - t236 * t424 + t369 * t68, -t236 * t369, -t10 * t369 + t129 * t34 + t15 * t160 + t204 * t51 + t236 * t426 - t250 * t295 + t380 * t68 + t424 * t76, t11 * t369 + t130 * t34 - t14 * t160 - t204 * t52 - t236 * t427 + t249 * t295 + t380 * t452 - t425 * t76, -t1 * t129 + t10 * t425 - t11 * t424 - t130 * t2 + t14 * t51 - t15 * t52 - t426 * t452 - t427 * t68 + t301, g(3) * t309 + t1 * t52 + t426 * t10 + t427 * t11 + t34 * t160 + t2 * t51 + t380 * t76 - t444 * (t220 * t281 - t268 * t278); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t404, -t216 ^ 2 + t218 ^ 2, -t124 + t406, -t404, t403 - t125, t208, -t201 * t360 + t412 - t202 * t218 + t127 + (-qJD(4) * t194 - t144 + t432) * t277 + t443, g(1) * t196 - g(2) * t198 + g(3) * t388 + t202 * t216 - t447, 0, 0, t453, -t315 + t407, t62 + t408, -t453, -t61 + t409, t208, t255 * t432 - g(1) * t168 - g(2) * t170 - t138 * t311 - t45 * t241 + (t274 * t208 - t218 * t327) * pkin(4) + t8, t256 * t432 + g(1) * t169 - g(2) * t171 + t327 * t138 + t241 * t46 + (-t208 * t273 - t218 * t311) * pkin(4) - t9 (-t273 * t61 - t274 * t62) * pkin(4) + (t42 + t45) * t311 + (t46 - t41) * t327, -t41 * t45 - t42 * t46 + (g(3) * t397 - t138 * t218 + t9 * t273 + t8 * t274 + t443) * pkin(4), t429, t461, t462, -t429, t457, t204, t181 * t204 + t236 * t415 - t68 * t90 + t455, -t182 * t204 - t236 * t416 - t452 * t90 + t460, t14 * t181 - t15 * t182 + (t11 - t415) * t452 + (-t10 - t416) * t68, t1 * t182 + t2 * t181 - t76 * t90 - g(1) * (-t222 * t395 + t223 * t282) - g(2) * (t222 * t393 + t223 * t279) + t222 * t432 + t416 * t11 + t415 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 + t409, t62 - t408, -t315 - t407, t311 * t41 + t327 * t42 + t288, 0, 0, 0, 0, 0, 0, t15 + t421, -t14 - t423, -t430 - t431, t10 * t452 + t11 * t68 + t288 + t440; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t429, t461, t462, -t429, t457, t204, t11 * t236 + t455, t10 * t236 + t460, 0, 0;];
tau_reg  = t5;
