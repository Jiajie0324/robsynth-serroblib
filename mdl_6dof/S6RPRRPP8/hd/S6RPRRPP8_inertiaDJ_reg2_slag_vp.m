% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRPP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRPP8_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP8_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP8_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPRRPP8_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:55:52
% EndTime: 2019-03-09 04:55:59
% DurationCPUTime: 2.69s
% Computational Cost: add. (1414->265), mult. (3096->408), div. (0->0), fcn. (2170->4), ass. (0->148)
t89 = sin(qJ(4));
t84 = t89 ^ 2;
t91 = cos(qJ(4));
t86 = t91 ^ 2;
t158 = t84 + t86;
t92 = cos(qJ(3));
t79 = t92 * qJD(3);
t32 = t158 * t79;
t145 = qJ(5) * qJD(3);
t124 = t92 * t145;
t90 = sin(qJ(3));
t177 = t90 * qJD(5) + t124;
t88 = -pkin(4) - qJ(6);
t176 = t88 * t92;
t175 = 0.2e1 * t177;
t159 = t84 - t86;
t155 = t89 * qJ(5);
t110 = -pkin(4) * t91 - t155;
t80 = qJD(5) * t91;
t174 = t110 * qJD(4) + t80;
t173 = t88 * t91 - t155;
t49 = t159 * qJD(4);
t169 = pkin(8) * t90;
t48 = -pkin(3) + t110;
t144 = qJ(5) * qJD(4);
t125 = t89 * t144;
t126 = t90 * t145;
t152 = qJD(4) * t92;
t132 = t91 * t152;
t148 = t90 * qJD(3);
t93 = -pkin(1) - pkin(7);
t73 = t93 * t148;
t119 = pkin(4) * t132 + t92 * t125 + t91 * t126 + t73;
t130 = t89 * t148;
t8 = -pkin(4) * t130 - t92 * t80 + t119;
t172 = (-t48 * t92 + t169) * qJD(4) + t8;
t85 = t90 ^ 2;
t87 = t92 ^ 2;
t157 = t85 - t87;
t121 = t157 * qJD(3);
t135 = t89 * t152;
t14 = 0.2e1 * t91 * t121 + 0.2e1 * t90 * t135;
t171 = 2 * qJD(2);
t170 = pkin(5) + pkin(8);
t168 = pkin(8) * t92;
t166 = t89 * t92;
t165 = t90 * t93;
t164 = t91 * t92;
t149 = t89 * qJD(5);
t81 = qJD(4) * t89;
t76 = pkin(4) * t81;
t29 = -t91 * t144 - t149 + t76;
t163 = t92 * t29;
t162 = t92 * t93;
t161 = t177 * t91;
t114 = pkin(3) * t90 - t168;
t47 = qJ(2) + t114;
t60 = t91 * t165;
t27 = t89 * t47 + t60;
t160 = pkin(8) * t32;
t156 = qJ(5) * t91;
t154 = qJD(3) * t89;
t153 = qJD(3) * t91;
t82 = qJD(4) * t91;
t151 = qJD(4) * t93;
t150 = qJD(6) * t90;
t146 = qJ(2) * qJD(3);
t143 = qJ(5) * qJD(5);
t142 = pkin(5) * t90 * t91;
t141 = -0.2e1 * pkin(3) * qJD(4);
t59 = t89 * t165;
t115 = pkin(3) * t92 + t169;
t101 = t115 * qJD(3) + qJD(2);
t127 = t93 * t79;
t140 = t89 * t101 + t91 * t127 + t47 * t82;
t139 = pkin(4) * t79;
t137 = pkin(8) * t81;
t136 = t91 * t148;
t134 = t89 * t151;
t133 = t90 * t82;
t131 = t91 * t151;
t129 = t89 * t82;
t128 = t90 * t79;
t123 = t88 * t90;
t26 = t91 * t47 - t59;
t122 = qJD(4) * (t85 + t87);
t67 = 0.2e1 * t128;
t120 = -t91 * t101 + t89 * t127 + t90 * t131 + t47 * t81;
t118 = t91 * t130;
t117 = t87 * t129;
t3 = (qJ(6) * qJD(4) - qJD(5)) * t164 + (qJD(3) * t123 + qJD(6) * t92) * t89 + t119;
t41 = -pkin(3) + t173;
t116 = t41 * t152 - t3;
t18 = -qJ(5) * t90 - t27;
t10 = -pkin(5) * t166 - t18;
t9 = t59 + (pkin(5) * t92 - t47) * t91 + t123;
t112 = t10 * t91 + t89 * t9;
t111 = t10 * t89 - t9 * t91;
t19 = -t90 * pkin(4) - t26;
t109 = t18 * t91 - t19 * t89;
t108 = t18 * t89 + t19 * t91;
t107 = t26 * t91 + t27 * t89;
t106 = t26 * t89 - t27 * t91;
t105 = qJ(6) * t89 - t156;
t104 = -t91 * qJD(6) - t149;
t37 = t89 * t79 + t133;
t6 = t90 * t134 - t140;
t102 = -pkin(5) * t135 + t120;
t16 = t105 * qJD(4) + t104 + t76;
t74 = pkin(4) * t166;
t17 = t74 + (t105 - t93) * t92;
t100 = -qJD(4) * t17 + t41 * t148 - t16 * t92;
t4 = -t124 + (-qJD(5) + t134) * t90 - t140;
t5 = t120 - t139;
t99 = t108 * qJD(4) - t4 * t91 + t5 * t89;
t98 = -t107 * qJD(4) + t120 * t89 - t6 * t91;
t44 = t170 * t81;
t77 = pkin(8) * t82;
t45 = pkin(5) * t82 + t77;
t53 = t170 * t89;
t54 = t170 * t91;
t97 = -t44 * t91 + t45 * t89 + (t53 * t91 - t54 * t89) * qJD(4);
t28 = t74 + (-t93 - t156) * t92;
t96 = -qJD(4) * t28 - t163 + (t48 * t90 + t168) * qJD(3);
t95 = pkin(5) * t130 + (-pkin(5) * t164 - t59) * qJD(4) + t140;
t94 = 0.2e1 * qJD(5);
t83 = qJ(2) * t171;
t66 = -0.2e1 * t129;
t65 = 0.2e1 * t129;
t58 = t89 * t126;
t43 = -0.2e1 * t49;
t38 = -t130 + t132;
t36 = t135 + t136;
t35 = -t91 * t79 + t90 * t81;
t34 = t91 * t122;
t33 = t89 * t122;
t25 = -0.2e1 * t86 * t128 - 0.2e1 * t117;
t24 = -0.2e1 * t84 * t128 + 0.2e1 * t117;
t23 = t152 * t159 + t118;
t22 = t90 * t132 - t157 * t154;
t20 = 0.4e1 * t92 * t129 - t148 * t159;
t15 = 0.2e1 * t22;
t13 = 0.2e1 * t92 * t118 + t49 * t87;
t12 = 0.2e1 * t13;
t11 = (-0.1e1 + t158) * t67;
t2 = t95 + t177;
t1 = -t150 + (-t142 + t176) * qJD(3) + t102;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t171, t83, -0.2e1 * t128, 0.2e1 * t121, 0, t67, 0, 0, 0.2e1 * qJD(2) * t90 + 0.2e1 * t92 * t146, 0.2e1 * qJD(2) * t92 - 0.2e1 * t90 * t146, 0, t83, t25, t12, -t14, t24, -0.2e1 * t22, t67, -0.2e1 * t87 * t131 - 0.2e1 * t120 * t90 + 0.2e1 * (t26 + 0.2e1 * t59) * t79, 0.2e1 * t87 * t134 + 0.2e1 * t6 * t90 + 0.2e1 * (-t27 + 0.2e1 * t60) * t79, 0.2e1 * t107 * t148 + 0.2e1 * (t106 * qJD(4) + t120 * t91 + t6 * t89) * t92, -0.2e1 * t93 ^ 2 * t128 - 0.2e1 * t120 * t26 - 0.2e1 * t27 * t6, t67, t14, t15, t25, t12, t24, -0.2e1 * t108 * t148 + 0.2e1 * (t109 * qJD(4) + t4 * t89 + t5 * t91) * t92, 0.2e1 * (t28 * t154 + t5) * t90 + 0.2e1 * (qJD(3) * t19 - t28 * t82 - t8 * t89) * t92, 0.2e1 * (t28 * t153 - t4) * t90 + 0.2e1 * (-qJD(3) * t18 + t28 * t81 - t8 * t91) * t92, 0.2e1 * t18 * t4 + 0.2e1 * t19 * t5 + 0.2e1 * t28 * t8, t67, t15, -t14, t24, -0.2e1 * t13, t25, 0.2e1 * t111 * t148 + 0.2e1 * (-qJD(4) * t112 + t1 * t91 - t2 * t89) * t92, 0.2e1 * (t153 * t17 + t2) * t90 + 0.2e1 * (qJD(3) * t10 + t17 * t81 - t3 * t91) * t92, 0.2e1 * (-t154 * t17 - t1) * t90 + 0.2e1 * (-qJD(3) * t9 + t17 * t82 + t3 * t89) * t92, 0.2e1 * t1 * t9 + 0.2e1 * t10 * t2 + 0.2e1 * t17 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t33, 0, -t106 * t79 + (t98 - 0.2e1 * t127) * t90, 0, 0, 0, 0, 0, 0, 0, t34, -t33 (-t109 * qJD(3) - t8) * t92 + (qJD(3) * t28 + t99) * t90, 0, 0, 0, 0, 0, 0, 0, -t33, -t34 (qJD(3) * t112 - t3) * t92 + (qJD(3) * t17 - qJD(4) * t111 + t1 * t89 + t2 * t91) * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, 0, -t79, 0, -t73, -t127, 0, 0, -t23, -t20, t37, t23, -t35, 0 (-t115 * t91 - t89 * t162) * qJD(4) + (t114 * t89 - t60) * qJD(3) (t115 * t89 - t91 * t162) * qJD(4) + (-pkin(8) * t164 + (pkin(3) * t91 + t89 * t93) * t90) * qJD(3), t98, -pkin(3) * t73 + t98 * pkin(8), 0, -t37, t35, -t23, -t20, t23, t99, t172 * t91 + t96 * t89, -t172 * t89 + t96 * t91, t99 * pkin(8) + t28 * t29 + t8 * t48, 0, t35, t37, t23, t20, -t23 (-t53 * t148 + t45 * t92 + t2 + (-t54 * t92 + t9) * qJD(4)) * t91 + (t54 * t148 + t44 * t92 + t1 + (-t53 * t92 - t10) * qJD(4)) * t89, t100 * t91 + t116 * t89 - t44 * t90 + t54 * t79, -t100 * t89 + t116 * t91 - t45 * t90 - t53 * t79, t1 * t53 - t10 * t44 + t16 * t17 + t2 * t54 + t3 * t41 + t45 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t79, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, t32, -pkin(3) * t148 + t160, 0, 0, 0, 0, 0, 0, t32, t36, t38, t48 * t148 + t160 - t163, 0, 0, 0, 0, 0, 0, t32, t38, -t36 (-t16 + (t53 * t89 + t54 * t91) * qJD(3)) * t92 + (qJD(3) * t41 + t97) * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t43, 0, t66, 0, 0, t89 * t141, t91 * t141, 0, 0, 0, 0, 0, t65, t43, t66, 0, 0.2e1 * t29 * t91 - 0.2e1 * t48 * t81, -0.2e1 * t29 * t89 - 0.2e1 * t48 * t82, 0.2e1 * t48 * t29, 0, 0, 0, t66, 0.2e1 * t49, t65, 0.2e1 * t97, -0.2e1 * t16 * t89 - 0.2e1 * t41 * t82, -0.2e1 * t16 * t91 + 0.2e1 * t41 * t81, 0.2e1 * t16 * t41 - 0.2e1 * t44 * t54 + 0.2e1 * t45 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, -t38, t79, -t120, t6, 0, 0, t79, t36, t38, 0, 0, 0, pkin(4) * t136 + t58 + (-t149 + (pkin(4) * t89 - t156) * qJD(4)) * t92, t120 - 0.2e1 * t139, -t6 + t175, -pkin(4) * t5 - qJ(5) * t4 - qJD(5) * t18, t79, t38, -t36, 0, 0, 0, -t88 * t136 + t58 + ((-t88 * t89 - t156) * qJD(4) + t104) * t92, t95 + t175, 0.2e1 * t150 + (t142 - 0.2e1 * t176) * qJD(3) - t102, qJ(5) * t2 + qJD(5) * t10 - qJD(6) * t9 + t1 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t35, -pkin(4) * t37 - t125 * t90 + t161, 0, 0, 0, 0, 0, 0, 0, -t35, -t37, t88 * t133 + (t88 * t79 + (-qJD(6) - t144) * t90) * t89 + t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t81, 0, -t77, t137, 0, 0, 0, -t82, t81, 0, 0, 0, t174, t77, -t137, t174 * pkin(8), 0, t81, t82, 0, 0, 0, qJD(4) * t173 - qJD(6) * t89 + t80, -t44, -t45, -qJ(5) * t44 + qJD(5) * t54 - t53 * qJD(6) + t45 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0.2e1 * t143, 0, 0, 0, 0, 0, 0, 0, t94, 0.2e1 * qJD(6), -0.2e1 * qJD(6) * t88 + 0.2e1 * t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t79, 0, t5, 0, 0, 0, 0, 0, 0, -t36, 0, -t79, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, 0, t77, 0, 0, 0, 0, 0, 0, t82, 0, 0, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t79, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t81, 0, 0, -t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t7;
