% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 21:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPP8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPRRPP8_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:53:06
% EndTime: 2019-05-05 21:53:28
% DurationCPUTime: 15.44s
% Computational Cost: add. (19609->528), mult. (37961->649), div. (0->0), fcn. (23243->6), ass. (0->357)
t691 = sin(qJ(1));
t694 = cos(qJ(1));
t689 = sin(qJ(4));
t692 = cos(qJ(4));
t693 = cos(qJ(3));
t743 = qJD(1) * qJD(3);
t730 = t693 * t743;
t690 = sin(qJ(3));
t741 = qJDD(1) * t690;
t657 = -t730 - t741;
t649 = qJDD(4) - t657;
t746 = qJD(1) * t693;
t651 = -t692 * qJD(3) + t689 * t746;
t653 = qJD(3) * t689 + t692 * t746;
t762 = t653 * t651;
t809 = -t762 + t649;
t768 = t809 * t692;
t679 = qJD(1) * t690 + qJD(4);
t678 = t679 ^ 2;
t798 = t651 ^ 2;
t810 = -t678 - t798;
t829 = t810 * t689 + t768;
t731 = t690 * t743;
t739 = qJDD(1) * t693;
t658 = -t731 + t739;
t584 = qJD(4) * t653 - t692 * qJDD(3) + t658 * t689;
t755 = t679 * t653;
t812 = t584 + t755;
t769 = t809 * t689;
t830 = t810 * t692 - t769;
t843 = t690 * t830 - t693 * t812;
t415 = -t691 * t829 + t694 * t843;
t899 = pkin(6) * t415;
t869 = t691 * t843 + t694 * t829;
t898 = pkin(6) * t869;
t797 = t653 ^ 2;
t594 = -t797 - t678;
t808 = t762 + t649;
t822 = t808 * t689;
t499 = t594 * t692 - t822;
t713 = t689 * qJDD(3) + t692 * t658;
t549 = (qJD(4) + t679) * t651 - t713;
t824 = t692 * t808;
t828 = t594 * t689 + t824;
t844 = -t549 * t693 + t690 * t828;
t421 = t499 * t691 + t694 * t844;
t901 = pkin(6) * t421;
t862 = -t499 * t694 + t691 * t844;
t900 = pkin(6) * t862;
t544 = (-qJD(4) + t679) * t651 + t713;
t623 = -t797 + t678;
t512 = t623 * t689 - t768;
t853 = t512 * t690;
t458 = t544 * t693 + t853;
t832 = t692 * t623 + t769;
t848 = t694 * t832;
t915 = t458 * t691 - t848;
t851 = t691 * t832;
t914 = t458 * t694 + t851;
t842 = t549 * t690 + t693 * t828;
t859 = pkin(2) * t844 + pkin(8) * t828 - qJ(2) * t842;
t913 = pkin(3) * t549 - t859;
t622 = t798 - t678;
t507 = t622 * t689 + t824;
t513 = t622 * t692 - t822;
t541 = t584 - t755;
t889 = t513 * t690 + t541 * t693;
t912 = t507 * t694 + t691 * t889;
t903 = -t507 * t691 + t694 * t889;
t795 = pkin(7) + pkin(1);
t841 = t690 * t812 + t693 * t830;
t866 = pkin(2) * t829 - t795 * t841;
t865 = qJ(2) * t829 - t795 * t843;
t911 = pkin(2) * t843 + pkin(8) * t830 - qJ(2) * t841;
t585 = -qJD(4) * t651 + t713;
t629 = t651 * t679;
t548 = t585 + t629;
t784 = t541 * t689;
t846 = -t548 * t692 - t784;
t569 = t798 + t797;
t835 = t569 * t693;
t538 = t692 * t541;
t847 = t548 * t689 - t538;
t870 = t690 * t847 + t835;
t886 = t691 * t846 - t694 * t870;
t910 = pkin(6) * t886;
t887 = t691 * t870 + t694 * t846;
t909 = pkin(6) * t887;
t850 = t512 * t693;
t908 = t544 * t690 - t850;
t857 = pkin(3) * t829;
t907 = qJ(5) * t810 + t857;
t821 = t812 * t692;
t476 = t549 * t689 - t821;
t597 = -t798 + t797;
t833 = t597 * t693;
t439 = t476 * t690 - t833;
t786 = t812 * t689;
t466 = t549 * t692 + t786;
t906 = t439 * t691 - t466 * t694;
t905 = t439 * t694 + t466 * t691;
t864 = -pkin(2) * t499 - t795 * t842;
t863 = -qJ(2) * t499 - t795 * t844;
t855 = pkin(8) * t829;
t836 = t569 * t690;
t868 = t693 * t847 - t836;
t891 = t795 * t868;
t890 = t795 * t870;
t888 = t513 * t693 - t541 * t690;
t839 = pkin(3) * t569;
t885 = pkin(2) * t870 + pkin(8) * t847 - qJ(2) * t868 + t839;
t883 = pkin(3) * t499;
t882 = pkin(8) * t499;
t881 = pkin(8) * t846;
t745 = qJD(5) * t679;
t873 = -qJ(5) * t808 - 0.2e1 * t745 + t883;
t834 = t597 * t690;
t871 = t476 * t693 + t834;
t860 = -pkin(3) * t812 + t911;
t838 = (t812 + t584) * pkin(4);
t837 = qJ(5) * t569;
t754 = t679 * t689;
t719 = -t692 * t584 + t651 * t754;
t753 = t679 * t692;
t734 = t651 * t753;
t709 = t584 * t689 + t734;
t735 = t693 * t762;
t802 = -t690 * t709 - t735;
t806 = t691 * t719 + t694 * t802;
t720 = t689 * t585 + t653 * t753;
t617 = t653 * t754;
t748 = t692 * t585 - t617;
t800 = -t690 * t748 + t735;
t805 = t691 * t720 + t694 * t800;
t804 = -t691 * t802 + t694 * t719;
t803 = -t691 * t800 + t694 * t720;
t718 = t617 - t734;
t763 = t649 * t693;
t801 = -t690 * t718 + t763;
t706 = (-t651 * t689 - t653 * t692) * t679;
t814 = t694 * t706;
t819 = -t691 * t801 + t814;
t816 = t691 * t706;
t818 = t694 * t801 + t816;
t696 = qJD(1) ^ 2;
t813 = t696 * t795;
t547 = t585 - t629;
t615 = pkin(5) * t653 - qJ(6) * t679;
t796 = -2 * qJD(6);
t807 = -t584 * qJ(6) + t653 * t615 + t651 * t796;
t670 = t691 * g(1) - t694 * g(2);
t717 = qJDD(2) - t670;
t705 = -t696 * qJ(2) + t717;
t627 = -qJDD(1) * t795 + t705;
t590 = t690 * g(3) + t693 * t627;
t695 = qJD(3) ^ 2;
t794 = pkin(3) * t690;
t725 = -pkin(8) * t693 + t794;
t708 = t696 * t725;
t551 = qJDD(3) * pkin(3) + t695 * pkin(8) - t693 * t708 + t590;
t700 = -pkin(4) * t755 + 0.2e1 * qJD(5) * t653 + t551;
t698 = qJ(5) * t547 + t700;
t736 = t690 * t762;
t722 = t693 * t709 - t736;
t764 = t649 * t690;
t799 = t693 * t718 + t764;
t721 = t693 * t748 + t736;
t791 = t584 * pkin(4);
t409 = (-t549 + t547) * qJ(5) + t700 - t791;
t793 = pkin(4) * t689;
t792 = pkin(4) * t692;
t790 = pkin(4) + qJ(6);
t789 = qJ(5) * t541;
t787 = qJDD(1) * pkin(1);
t774 = t551 * t689;
t773 = t551 * t692;
t687 = t690 ^ 2;
t688 = t693 ^ 2;
t747 = t687 + t688;
t660 = t747 * qJDD(1);
t761 = t660 * t691;
t760 = t660 * t694;
t733 = t690 * t693 * t696;
t665 = qJDD(3) + t733;
t759 = t665 * t690;
t758 = t665 * t693;
t666 = qJDD(3) - t733;
t757 = t666 * t690;
t756 = t666 * t693;
t752 = t687 * t696;
t751 = t688 * t696;
t671 = t694 * g(1) + t691 * g(2);
t686 = qJDD(1) * qJ(2);
t712 = t671 - t686;
t742 = qJD(2) * qJD(1);
t619 = t712 - 0.2e1 * t742 + t813;
t750 = t690 * t619;
t749 = t693 * t619;
t684 = 0.2e1 * t742;
t707 = t684 - t712;
t715 = -t658 + t731;
t716 = -t657 + t730;
t529 = pkin(3) * t716 + pkin(8) * t715 + t707 - t813;
t591 = -t693 * g(3) + t690 * t627;
t552 = -t695 * pkin(3) + qJDD(3) * pkin(8) - t690 * t708 + t591;
t465 = t689 * t529 + t692 * t552;
t740 = qJDD(1) * t691;
t738 = qJDD(1) * t694;
t732 = pkin(3) * t693 + pkin(2);
t729 = qJ(5) * t689 + pkin(3);
t464 = -t692 * t529 + t689 * t552;
t408 = t464 * t689 + t692 * t465;
t632 = -t696 * pkin(1) + t707;
t633 = -t705 + t787;
t562 = t694 * t632 - t633 * t691;
t605 = -t670 * t691 - t694 * t671;
t727 = t691 * t733;
t726 = t694 * t733;
t661 = -t691 * t696 + t738;
t724 = pkin(6) * t661 + g(3) * t691;
t662 = t694 * t696 + t740;
t723 = -pkin(6) * t662 + g(3) * t694;
t589 = pkin(4) * t651 - qJ(5) * t653;
t714 = t678 * pkin(4) - t649 * qJ(5) + t651 * t589 - t465;
t407 = -t464 * t692 + t465 * t689;
t527 = t693 * t590 + t690 * t591;
t528 = -t590 * t690 + t591 * t693;
t559 = t632 * t691 + t633 * t694;
t604 = t670 * t694 - t671 * t691;
t669 = 0.2e1 * t745;
t428 = t669 - t714;
t704 = -t649 * pkin(4) - t678 * qJ(5) + t653 * t589 + qJDD(5) + t464;
t702 = -t584 * pkin(5) - qJ(6) * t798 + t679 * t615 + qJDD(6) - t714;
t406 = t669 + t702;
t701 = t585 * pkin(5) - qJ(6) * t809 + t704;
t397 = (pkin(5) * t651 + t796) * t679 + t701;
t697 = t698 + t807;
t677 = -t695 - t751;
t676 = t695 - t751;
t675 = -t695 - t752;
t674 = -t695 + t752;
t664 = (-t687 + t688) * t696;
t663 = t747 * t696;
t659 = -0.2e1 * t731 + t739;
t656 = 0.2e1 * t730 + t741;
t650 = t747 * t743;
t621 = -t658 * t690 - t688 * t743;
t620 = -t657 * t693 - t687 * t743;
t614 = -t677 * t690 - t758;
t613 = t675 * t693 - t757;
t612 = t677 * t693 - t759;
t611 = -t676 * t693 - t757;
t610 = t675 * t690 + t756;
t609 = -t674 * t690 - t758;
t596 = -t663 * t694 - t761;
t595 = -t663 * t691 + t760;
t588 = t656 * t690 - t659 * t693;
t564 = t612 * t691 + t659 * t694;
t563 = t610 * t691 + t656 * t694;
t561 = -t612 * t694 + t659 * t691;
t560 = -t610 * t694 + t656 * t691;
t557 = (-t651 * t692 + t653 * t689) * t679;
t517 = -t557 * t690 + t763;
t497 = -pkin(2) * t663 - t528;
t496 = pkin(2) * t612 - qJ(2) * t614 - t591;
t495 = pkin(2) * t610 - qJ(2) * t613 + t590;
t488 = pkin(2) * t656 - t613 * t795 - t749;
t487 = pkin(2) * t659 - t614 * t795 + t750;
t486 = t527 * t691 - t619 * t694;
t485 = -t527 * t694 - t619 * t691;
t478 = -pkin(5) * t809 - qJ(5) * t812;
t475 = -t547 * t689 - t821;
t473 = t544 * t689 - t538;
t469 = t547 * t692 - t786;
t467 = -t544 * t692 - t784;
t457 = t548 * t693 + t853;
t456 = -t773 - t882;
t455 = pkin(2) * t527 - qJ(2) * t528;
t454 = -t774 - t855;
t440 = -t475 * t690 + t833;
t438 = -pkin(2) * t619 - t528 * t795;
t437 = pkin(5) * t808 - t549 * t790;
t434 = t473 * t693 - t836;
t431 = t473 * t690 + t835;
t430 = t698 - t791;
t427 = t465 - t883;
t426 = t464 - t857;
t419 = t704 + t837;
t412 = -pkin(3) * t467 + pkin(4) * t544 + t789;
t411 = pkin(4) * t569 + t428;
t410 = -t698 + t838;
t405 = pkin(5) * t798 + t697 - t791;
t402 = t431 * t691 + t467 * t694;
t399 = -t431 * t694 + t467 * t691;
t398 = -pkin(3) * t846 + t548 * t790 + t789;
t396 = t408 * t693 - t551 * t690;
t395 = t408 * t690 + t551 * t693;
t394 = pkin(4) * t594 + t714 + t873;
t393 = pkin(4) * t809 - t704 + t907;
t392 = -t407 - t881;
t391 = (t594 + t798) * pkin(5) + t409 + t807;
t390 = t409 * t692 + t549 * t793 + t882;
t389 = qJ(5) * t821 - t410 * t689 + t855;
t388 = t428 * t692 + t689 * t704;
t387 = t428 * t689 - t692 * t704;
t386 = t837 + t679 * t796 + (t548 + t629) * pkin(5) + t701;
t385 = -pkin(5) * t541 + t569 * t790 + t406;
t384 = t697 - qJ(6) * t812 - t838 + (t810 + t798) * pkin(5);
t383 = -t774 + t913;
t382 = t594 * t790 - t702 + t873;
t381 = t773 + t860;
t380 = -t790 * t809 + t397 - t907;
t379 = t395 * t691 + t407 * t694;
t378 = -t395 * t694 + t407 * t691;
t377 = t388 * t693 - t430 * t690;
t376 = t388 * t690 + t430 * t693;
t375 = t397 * t689 + t406 * t692;
t374 = -t397 * t692 + t406 * t689;
t373 = pkin(5) * t397 + qJ(5) * t405;
t372 = -pkin(8) * t467 - t411 * t689 + t419 * t692;
t371 = -t384 * t689 + t478 * t692 - t855;
t370 = t391 * t692 - t437 * t689 + t882;
t369 = -t693 * t427 - t690 * t456 - t864;
t368 = t689 * t409 - (pkin(3) + t792) * t549 + t859;
t367 = -t693 * t426 - t690 * t454 + t866;
t366 = t692 * t410 + t729 * t812 - t911;
t365 = t408 + t885;
t364 = -pkin(8) * t387 + (qJ(5) * t692 - t793) * t430;
t363 = -pkin(3) * t387 + pkin(4) * t704 - qJ(5) * t428;
t362 = pkin(5) * t406 + t405 * t790;
t361 = t375 * t693 - t405 * t690;
t360 = t375 * t690 + t405 * t693;
t359 = pkin(2) * t395 + pkin(3) * t551 + pkin(8) * t408 - qJ(2) * t396;
t358 = -t385 * t689 + t386 * t692 - t881;
t357 = t384 * t692 + t478 * t689 + t860;
t356 = -t690 * t392 + t732 * t846 - t891;
t355 = pkin(2) * t431 + pkin(8) * t473 - qJ(2) * t434 + t411 * t692 + t419 * t689 + t839;
t354 = t391 * t689 + t437 * t692 - t913;
t353 = t376 * t691 + t387 * t694;
t352 = -t376 * t694 + t387 * t691;
t351 = -t690 * t390 - t693 * t394 + t864;
t350 = -t690 * t389 - t693 * t393 - t866;
t349 = pkin(2) * t467 - t690 * t372 - t693 * t412 - t434 * t795;
t348 = t385 * t692 + t386 * t689 + t885;
t347 = -t795 * t396 + (pkin(8) * t690 + t732) * t407;
t346 = -t690 * t371 - t693 * t380 + t866;
t345 = -pkin(3) * t374 - qJ(5) * t406 + t397 * t790;
t344 = t360 * t691 + t374 * t694;
t343 = -t360 * t694 + t374 * t691;
t342 = -t690 * t370 - t693 * t382 + t864;
t341 = pkin(2) * t846 - t690 * t358 - t693 * t398 - t891;
t340 = -pkin(8) * t374 - t362 * t689 + t373 * t692;
t339 = pkin(2) * t376 + pkin(8) * t388 - qJ(2) * t377 + (t729 + t792) * t430;
t338 = pkin(2) * t387 - t693 * t363 - t690 * t364 - t377 * t795;
t337 = pkin(2) * t360 + pkin(3) * t405 + pkin(8) * t375 - qJ(2) * t361 + t362 * t692 + t373 * t689;
t336 = pkin(2) * t374 - t690 * t340 - t693 * t345 - t361 * t795;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t662, -t661, 0, t605, 0, 0, 0, 0, 0, 0, 0, t662, t661, t562, 0, 0, 0, 0, 0, 0, t563, t564, t596, t486, 0, 0, 0, 0, 0, 0, t869, -t862, t887, t379, 0, 0, 0, 0, 0, 0, t402, -t869, t862, t353, 0, 0, 0, 0, 0, 0, t887, t862, t869, t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t661, -t662, 0, t604, 0, 0, 0, 0, 0, 0, 0, -t661, t662, t559, 0, 0, 0, 0, 0, 0, t560, t561, t595, t485, 0, 0, 0, 0, 0, 0, -t415, t421, t886, t378, 0, 0, 0, 0, 0, 0, t399, t415, -t421, t352, 0, 0, 0, 0, 0, 0, t886, -t421, -t415, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t613, t614, 0, t528, 0, 0, 0, 0, 0, 0, t841, -t842, t868, t396, 0, 0, 0, 0, 0, 0, t434, -t841, t842, t377, 0, 0, 0, 0, 0, 0, t868, t842, t841, t361; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t661, 0, -t662, 0, -t724, -t723, -t604, -pkin(6) * t604, 0, -t661, t662, 0, 0, 0, -t559, t724, t723, -pkin(6) * t559 + (-pkin(1) * t691 + qJ(2) * t694) * g(3), -t621 * t691 + t726, -t588 * t691 + t664 * t694, -t611 * t691 + t693 * t738, -t620 * t691 - t726, -t609 * t691 - t690 * t738, qJDD(3) * t694 - t650 * t691, -pkin(6) * t560 - t488 * t691 + t495 * t694, -pkin(6) * t561 - t487 * t691 + t496 * t694, -pkin(2) * t760 - pkin(6) * t595 - t497 * t691, -pkin(6) * t485 - t438 * t691 + t455 * t694, t803, -t440 * t691 + t469 * t694, -t457 * t691 + t848, t804, t912, t819, -t367 * t691 + t381 * t694 + t899, -t369 * t691 + t383 * t694 - t901, -t356 * t691 + t365 * t694 - t910, -pkin(6) * t378 - t347 * t691 + t359 * t694, -t517 * t691 + t814, t915, -t912, t803, t906, t804, -pkin(6) * t399 - t349 * t691 + t355 * t694, -t350 * t691 + t366 * t694 - t899, -t351 * t691 + t368 * t694 + t901, -pkin(6) * t352 - t338 * t691 + t339 * t694, t819, -t912, -t915, t804, -t906, t803, -t341 * t691 + t348 * t694 - t910, -t342 * t691 + t354 * t694 + t901, -t346 * t691 + t357 * t694 + t899, -pkin(6) * t343 - t336 * t691 + t337 * t694; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t662, 0, t661, 0, t723, -t724, t605, pkin(6) * t605, 0, -t662, -t661, 0, 0, 0, t562, -t723, t724, pkin(6) * t562 + (pkin(1) * t694 + qJ(2) * t691) * g(3), t621 * t694 + t727, t588 * t694 + t664 * t691, t611 * t694 + t691 * t739, t620 * t694 - t727, t609 * t694 - t690 * t740, qJDD(3) * t691 + t650 * t694, pkin(6) * t563 + t488 * t694 + t495 * t691, pkin(6) * t564 + t487 * t694 + t496 * t691, -pkin(2) * t761 + pkin(6) * t596 + t497 * t694, pkin(6) * t486 + t438 * t694 + t455 * t691, t805, t440 * t694 + t469 * t691, t457 * t694 + t851, t806, -t903, t818, t367 * t694 + t381 * t691 + t898, t369 * t694 + t383 * t691 - t900, t356 * t694 + t365 * t691 + t909, pkin(6) * t379 + t347 * t694 + t359 * t691, t517 * t694 + t816, -t914, t903, t805, -t905, t806, pkin(6) * t402 + t349 * t694 + t355 * t691, t350 * t694 + t366 * t691 - t898, t351 * t694 + t368 * t691 + t900, pkin(6) * t353 + t338 * t694 + t339 * t691, t818, t903, t914, t806, t905, t805, t341 * t694 + t348 * t691 + t909, t342 * t694 + t354 * t691 + t900, t346 * t694 + t357 * t691 + t898, pkin(6) * t344 + t336 * t694 + t337 * t691; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t670, t671, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t717 - 0.2e1 * t787, -t671 + t684 + 0.2e1 * t686, pkin(1) * t633 + qJ(2) * t632, -t715 * t693, -t656 * t693 - t659 * t690, -t676 * t690 + t756, t716 * t690, t674 * t693 - t759, 0, qJ(2) * t656 - t610 * t795 - t750, qJ(2) * t659 - t612 * t795 - t749, -qJ(2) * t663 + t660 * t795 - t527, -qJ(2) * t619 - t527 * t795, t721, t475 * t693 + t834, t548 * t690 - t850, t722, t888, t799, -t690 * t426 + t693 * t454 + t865, -t690 * t427 + t693 * t456 - t863, t693 * t392 + (qJ(2) + t794) * t846 - t890, -t795 * t395 + (qJ(2) + t725) * t407, t557 * t693 + t764, -t908, -t888, t721, t871, t722, qJ(2) * t467 + t693 * t372 - t690 * t412 - t431 * t795, t693 * t389 - t690 * t393 - t865, t693 * t390 - t690 * t394 + t863, qJ(2) * t387 - t690 * t363 + t693 * t364 - t376 * t795, t799, -t888, t908, t722, -t871, t721, qJ(2) * t846 + t693 * t358 - t690 * t398 - t890, t693 * t370 - t690 * t382 + t863, t693 * t371 - t690 * t380 + t865, qJ(2) * t374 + t693 * t340 - t690 * t345 - t360 * t795;];
tauB_reg  = t1;
