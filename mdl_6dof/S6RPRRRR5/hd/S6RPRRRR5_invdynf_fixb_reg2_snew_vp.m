% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 03:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 03:34:24
% EndTime: 2019-05-06 03:34:33
% DurationCPUTime: 9.51s
% Computational Cost: add. (94448->332), mult. (226707->472), div. (0->0), fcn. (183789->12), ass. (0->260)
t2232 = cos(pkin(11));
t2244 = qJD(1) ^ 2;
t2237 = sin(qJ(1));
t2242 = cos(qJ(1));
t2217 = t2237 * g(1) - t2242 * g(2);
t2258 = -qJDD(2) + t2217;
t2231 = sin(pkin(11));
t2228 = t2231 ^ 2;
t2229 = t2232 ^ 2;
t2269 = t2228 + t2229;
t2192 = t2244 * (pkin(7) * t2269 + qJ(2)) + (pkin(2) * t2232 + pkin(1)) * qJDD(1) + t2258;
t2225 = t2232 * qJDD(1);
t2236 = sin(qJ(3));
t2241 = cos(qJ(3));
t2268 = t2231 * qJDD(1);
t2174 = t2241 * t2225 - t2236 * t2268;
t2256 = t2231 * t2241 + t2232 * t2236;
t2209 = t2256 * qJD(1);
t2275 = t2209 * qJD(3);
t2196 = t2174 - t2275;
t2208 = (-t2231 * t2236 + t2232 * t2241) * qJD(1);
t2206 = t2208 ^ 2;
t2259 = qJD(3) * pkin(3) - pkin(8) * t2209;
t2151 = t2196 * pkin(3) + t2206 * pkin(8) - t2209 * t2259 + t2192;
t2214 = t2269 * t2244;
t2235 = sin(qJ(4));
t2240 = cos(qJ(4));
t2186 = -t2240 * t2208 + t2209 * t2235;
t2185 = qJD(5) + t2186;
t2184 = qJD(6) + t2185;
t2300 = qJD(6) + t2184;
t2299 = t2256 * qJDD(1);
t2188 = t2208 * t2235 + t2209 * t2240;
t2230 = qJD(3) + qJD(4);
t2234 = sin(qJ(5));
t2239 = cos(qJ(5));
t2176 = t2188 * t2234 - t2239 * t2230;
t2178 = t2188 * t2239 + t2230 * t2234;
t2233 = sin(qJ(6));
t2238 = cos(qJ(6));
t2154 = t2238 * t2176 + t2178 * t2233;
t2295 = t2154 ^ 2;
t2156 = -t2176 * t2233 + t2178 * t2238;
t2294 = t2156 ^ 2;
t2293 = t2176 ^ 2;
t2292 = t2178 ^ 2;
t2291 = t2184 ^ 2;
t2290 = t2185 ^ 2;
t2289 = t2186 ^ 2;
t2288 = t2188 ^ 2;
t2287 = t2209 ^ 2;
t2286 = t2230 ^ 2;
t2283 = t2231 * g(3);
t2282 = t2232 * g(3);
t2281 = t2154 * t2156;
t2280 = t2176 * t2178;
t2279 = t2185 * t2176;
t2278 = t2186 * t2188;
t2277 = t2208 * qJD(3);
t2276 = t2208 * t2209;
t2274 = t2229 * t2244;
t2273 = t2232 * t2244;
t2272 = qJD(4) - t2230;
t2271 = qJD(5) - t2185;
t2270 = qJD(6) - t2184;
t2218 = -g(1) * t2242 - g(2) * t2237;
t2264 = -pkin(1) * t2244 + qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t2218;
t2255 = qJDD(1) * pkin(7) + t2264;
t2249 = pkin(2) * t2273 - t2255;
t2266 = pkin(2) * t2274;
t2158 = t2241 * (t2232 * t2255 - t2266 - t2283) + t2236 * (t2231 * t2249 - t2282);
t2134 = -t2206 * pkin(3) + t2196 * pkin(8) - qJD(3) * t2259 + t2158;
t2157 = t2236 * t2266 + (-t2241 * g(3) - t2236 * t2255) * t2232 + (t2236 * g(3) + t2241 * t2249) * t2231;
t2193 = qJDD(3) + t2276;
t2198 = t2299 + t2277;
t2247 = (-t2198 + t2277) * pkin(8) + t2193 * pkin(3) + t2157;
t2104 = t2240 * t2134 + t2235 * t2247;
t2164 = pkin(4) * t2186 - pkin(9) * t2188;
t2267 = qJDD(3) + qJDD(4);
t2095 = -pkin(4) * t2286 + pkin(9) * t2267 - t2186 * t2164 + t2104;
t2260 = -t2240 * t2196 + t2235 * t2198;
t2137 = (qJD(4) + t2230) * t2188 + t2260;
t2257 = -t2235 * t2196 - t2240 * t2198;
t2153 = -qJD(4) * t2186 - t2257;
t2262 = t2230 * t2186 - t2153;
t2098 = t2137 * pkin(4) + t2262 * pkin(9) - t2151;
t2067 = t2239 * t2095 + t2234 * t2098;
t2066 = -t2234 * t2095 + t2239 * t2098;
t2103 = -t2134 * t2235 + t2240 * t2247;
t2252 = -t2239 * t2153 - t2234 * t2267;
t2130 = -t2176 * qJD(5) - t2252;
t2261 = t2234 * t2153 - t2239 * t2267;
t2254 = qJD(5) * t2178 + t2261;
t2263 = -t2233 * t2130 - t2238 * t2254;
t2251 = qJD(4) * t2188 + qJDD(5) + t2260;
t2094 = -t2267 * pkin(4) - t2286 * pkin(9) + t2164 * t2188 - t2103;
t2250 = -qJDD(6) - t2251;
t2121 = t2251 - t2280;
t2248 = -t2238 * t2130 + t2233 * t2254;
t2243 = qJD(3) ^ 2;
t2219 = t2231 * t2273;
t2216 = -qJDD(1) * t2237 - t2242 * t2244;
t2215 = qJDD(1) * t2242 - t2237 * t2244;
t2213 = t2269 * qJDD(1);
t2212 = t2232 * t2214;
t2211 = t2231 * t2214;
t2205 = qJDD(1) * pkin(1) + t2244 * qJ(2) + t2258;
t2201 = -t2243 - t2287;
t2200 = t2232 * t2264 - t2283;
t2199 = -t2231 * t2264 - t2282;
t2197 = t2299 + 0.2e1 * t2277;
t2195 = -t2174 + 0.2e1 * t2275;
t2194 = -qJDD(3) + t2276;
t2191 = -t2243 - t2206;
t2181 = -t2286 - t2288;
t2179 = -t2206 - t2287;
t2172 = t2194 * t2241 - t2201 * t2236;
t2171 = t2194 * t2236 + t2201 * t2241;
t2170 = -t2199 * t2231 + t2200 * t2232;
t2169 = t2199 * t2232 + t2200 * t2231;
t2168 = t2174 * t2241 + t2236 * t2299;
t2167 = t2174 * t2236 - t2241 * t2299;
t2166 = t2191 * t2241 - t2193 * t2236;
t2165 = t2191 * t2236 + t2193 * t2241;
t2163 = -t2267 - t2278;
t2162 = t2267 - t2278;
t2161 = -t2286 - t2289;
t2159 = pkin(5) * t2185 - pkin(10) * t2178;
t2152 = -t2288 - t2289;
t2150 = -t2171 * t2231 + t2172 * t2232;
t2149 = t2171 * t2232 + t2172 * t2231;
t2148 = -t2290 - t2292;
t2147 = t2163 * t2240 - t2181 * t2235;
t2146 = t2163 * t2235 + t2181 * t2240;
t2145 = -t2290 - t2293;
t2143 = -t2292 - t2293;
t2142 = -t2167 * t2231 + t2168 * t2232;
t2141 = t2167 * t2232 + t2168 * t2231;
t2140 = t2186 * t2272 + t2257;
t2138 = -t2188 * t2272 - t2260;
t2136 = -t2165 * t2231 + t2166 * t2232;
t2135 = t2165 * t2232 + t2166 * t2231;
t2133 = t2161 * t2240 - t2162 * t2235;
t2132 = t2161 * t2235 + t2162 * t2240;
t2125 = -t2291 - t2294;
t2124 = -t2157 * t2236 + t2158 * t2241;
t2123 = t2157 * t2241 + t2158 * t2236;
t2122 = -t2251 - t2280;
t2120 = -t2291 - t2295;
t2119 = t2176 * t2271 + t2252;
t2118 = t2130 - t2279;
t2117 = -t2178 * t2271 - t2261;
t2116 = (qJD(5) + t2185) * t2178 + t2261;
t2115 = -t2146 * t2236 + t2147 * t2241;
t2114 = t2146 * t2241 + t2147 * t2236;
t2113 = -t2294 - t2295;
t2112 = t2138 * t2240 - t2140 * t2235;
t2111 = t2138 * t2235 + t2140 * t2240;
t2110 = t2250 - t2281;
t2109 = -t2250 - t2281;
t2108 = -t2132 * t2236 + t2133 * t2241;
t2107 = t2132 * t2241 + t2133 * t2236;
t2106 = t2122 * t2239 - t2148 * t2234;
t2105 = t2122 * t2234 + t2148 * t2239;
t2102 = -t2121 * t2234 + t2145 * t2239;
t2101 = t2121 * t2239 + t2145 * t2234;
t2100 = -t2123 * t2231 + t2124 * t2232;
t2099 = t2123 * t2232 + t2124 * t2231;
t2092 = t2110 * t2238 - t2125 * t2233;
t2091 = t2110 * t2233 + t2125 * t2238;
t2090 = t2117 * t2239 - t2119 * t2234;
t2089 = t2117 * t2234 + t2119 * t2239;
t2088 = -t2114 * t2231 + t2115 * t2232;
t2087 = t2114 * t2232 + t2115 * t2231;
t2086 = -t2109 * t2233 + t2120 * t2238;
t2085 = t2109 * t2238 + t2120 * t2233;
t2084 = t2154 * t2270 + t2248;
t2083 = -t2154 * t2300 - t2248;
t2082 = -t2156 * t2270 + t2263;
t2081 = t2156 * t2300 - t2263;
t2080 = t2106 * t2240 + t2118 * t2235;
t2079 = t2106 * t2235 - t2118 * t2240;
t2078 = t2102 * t2240 + t2116 * t2235;
t2077 = t2102 * t2235 - t2116 * t2240;
t2076 = -t2111 * t2236 + t2112 * t2241;
t2075 = t2111 * t2241 + t2112 * t2236;
t2074 = t2090 * t2240 + t2143 * t2235;
t2073 = t2090 * t2235 - t2143 * t2240;
t2072 = -t2107 * t2231 + t2108 * t2232;
t2071 = t2107 * t2232 + t2108 * t2231;
t2070 = -t2103 * t2235 + t2104 * t2240;
t2069 = t2103 * t2240 + t2104 * t2235;
t2068 = pkin(5) * t2254 - pkin(10) * t2293 + t2159 * t2178 + t2094;
t2065 = -t2091 * t2234 + t2092 * t2239;
t2064 = t2091 * t2239 + t2092 * t2234;
t2063 = -t2085 * t2234 + t2086 * t2239;
t2062 = t2085 * t2239 + t2086 * t2234;
t2061 = t2082 * t2238 - t2084 * t2233;
t2060 = t2082 * t2233 + t2084 * t2238;
t2059 = -t2079 * t2236 + t2080 * t2241;
t2058 = t2079 * t2241 + t2080 * t2236;
t2057 = -t2077 * t2236 + t2078 * t2241;
t2056 = t2077 * t2241 + t2078 * t2236;
t2055 = -pkin(5) * t2293 - pkin(10) * t2254 - t2185 * t2159 + t2067;
t2054 = -t2075 * t2231 + t2076 * t2232;
t2053 = t2075 * t2232 + t2076 * t2231;
t2052 = -t2073 * t2236 + t2074 * t2241;
t2051 = t2073 * t2241 + t2074 * t2236;
t2050 = (-t2130 - t2279) * pkin(10) + t2121 * pkin(5) + t2066;
t2049 = -t2069 * t2236 + t2070 * t2241;
t2048 = t2069 * t2241 + t2070 * t2236;
t2047 = t2065 * t2240 + t2083 * t2235;
t2046 = t2065 * t2235 - t2083 * t2240;
t2045 = t2063 * t2240 + t2081 * t2235;
t2044 = t2063 * t2235 - t2081 * t2240;
t2043 = -t2066 * t2234 + t2067 * t2239;
t2042 = t2066 * t2239 + t2067 * t2234;
t2041 = t2043 * t2240 + t2094 * t2235;
t2040 = t2043 * t2235 - t2094 * t2240;
t2039 = -t2060 * t2234 + t2061 * t2239;
t2038 = t2060 * t2239 + t2061 * t2234;
t2037 = -t2058 * t2231 + t2059 * t2232;
t2036 = t2058 * t2232 + t2059 * t2231;
t2035 = -t2056 * t2231 + t2057 * t2232;
t2034 = t2056 * t2232 + t2057 * t2231;
t2033 = t2050 * t2233 + t2055 * t2238;
t2032 = t2050 * t2238 - t2055 * t2233;
t2031 = t2039 * t2240 + t2113 * t2235;
t2030 = -t2051 * t2231 + t2052 * t2232;
t2029 = t2039 * t2235 - t2113 * t2240;
t2028 = t2051 * t2232 + t2052 * t2231;
t2027 = -t2048 * t2231 + t2049 * t2232;
t2026 = t2048 * t2232 + t2049 * t2231;
t2025 = -t2046 * t2236 + t2047 * t2241;
t2024 = t2046 * t2241 + t2047 * t2236;
t2023 = -t2044 * t2236 + t2045 * t2241;
t2022 = t2044 * t2241 + t2045 * t2236;
t2021 = -t2040 * t2236 + t2041 * t2241;
t2020 = t2040 * t2241 + t2041 * t2236;
t2019 = -t2032 * t2233 + t2033 * t2238;
t2018 = t2032 * t2238 + t2033 * t2233;
t2017 = -t2029 * t2236 + t2031 * t2241;
t2016 = t2029 * t2241 + t2031 * t2236;
t2015 = -t2024 * t2231 + t2025 * t2232;
t2014 = t2024 * t2232 + t2025 * t2231;
t2013 = -t2022 * t2231 + t2023 * t2232;
t2012 = t2022 * t2232 + t2023 * t2231;
t2011 = -t2020 * t2231 + t2021 * t2232;
t2010 = t2020 * t2232 + t2021 * t2231;
t2009 = -t2018 * t2234 + t2019 * t2239;
t2008 = t2018 * t2239 + t2019 * t2234;
t2007 = -t2016 * t2231 + t2017 * t2232;
t2006 = t2016 * t2232 + t2017 * t2231;
t2005 = t2009 * t2240 + t2068 * t2235;
t2004 = t2009 * t2235 - t2068 * t2240;
t2003 = -t2004 * t2236 + t2005 * t2241;
t2002 = t2004 * t2241 + t2005 * t2236;
t2001 = -t2002 * t2231 + t2003 * t2232;
t2000 = t2002 * t2232 + t2003 * t2231;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2216, -t2215, 0, -t2217 * t2237 + t2218 * t2242, 0, 0, 0, 0, 0, 0, -t2212 * t2242 - t2225 * t2237, t2211 * t2242 + t2237 * t2268, t2213 * t2242 - t2214 * t2237, t2170 * t2242 - t2205 * t2237, 0, 0, 0, 0, 0, 0, t2136 * t2242 + t2195 * t2237, t2150 * t2242 + t2197 * t2237, t2142 * t2242 + t2179 * t2237, t2100 * t2242 - t2192 * t2237, 0, 0, 0, 0, 0, 0, t2072 * t2242 + t2137 * t2237, t2088 * t2242 - t2237 * t2262, t2054 * t2242 + t2152 * t2237, t2027 * t2242 - t2151 * t2237, 0, 0, 0, 0, 0, 0, t2035 * t2242 + t2101 * t2237, t2037 * t2242 + t2105 * t2237, t2030 * t2242 + t2089 * t2237, t2011 * t2242 + t2042 * t2237, 0, 0, 0, 0, 0, 0, t2013 * t2242 + t2062 * t2237, t2015 * t2242 + t2064 * t2237, t2007 * t2242 + t2038 * t2237, t2001 * t2242 + t2008 * t2237; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2215, t2216, 0, t2217 * t2242 + t2218 * t2237, 0, 0, 0, 0, 0, 0, -t2212 * t2237 + t2225 * t2242, t2211 * t2237 - t2242 * t2268, t2213 * t2237 + t2214 * t2242, t2170 * t2237 + t2205 * t2242, 0, 0, 0, 0, 0, 0, t2136 * t2237 - t2195 * t2242, t2150 * t2237 - t2197 * t2242, t2142 * t2237 - t2179 * t2242, t2100 * t2237 + t2192 * t2242, 0, 0, 0, 0, 0, 0, t2072 * t2237 - t2137 * t2242, t2088 * t2237 + t2242 * t2262, t2054 * t2237 - t2152 * t2242, t2027 * t2237 + t2151 * t2242, 0, 0, 0, 0, 0, 0, t2035 * t2237 - t2101 * t2242, t2037 * t2237 - t2105 * t2242, t2030 * t2237 - t2089 * t2242, t2011 * t2237 - t2042 * t2242, 0, 0, 0, 0, 0, 0, t2013 * t2237 - t2062 * t2242, t2015 * t2237 - t2064 * t2242, t2007 * t2237 - t2038 * t2242, t2001 * t2237 - t2008 * t2242; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2169, 0, 0, 0, 0, 0, 0, t2135, t2149, t2141, t2099, 0, 0, 0, 0, 0, 0, t2071, t2087, t2053, t2026, 0, 0, 0, 0, 0, 0, t2034, t2036, t2028, t2010, 0, 0, 0, 0, 0, 0, t2012, t2014, t2006, t2000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2244, -qJDD(1), 0, t2218, 0, 0, 0, 0, 0, 0, -t2212, t2211, t2213, t2170, 0, 0, 0, 0, 0, 0, t2136, t2150, t2142, t2100, 0, 0, 0, 0, 0, 0, t2072, t2088, t2054, t2027, 0, 0, 0, 0, 0, 0, t2035, t2037, t2030, t2011, 0, 0, 0, 0, 0, 0, t2013, t2015, t2007, t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2244, 0, t2217, 0, 0, 0, 0, 0, 0, t2225, -t2268, t2214, t2205, 0, 0, 0, 0, 0, 0, -t2195, -t2197, -t2179, t2192, 0, 0, 0, 0, 0, 0, -t2137, t2262, -t2152, t2151, 0, 0, 0, 0, 0, 0, -t2101, -t2105, -t2089, -t2042, 0, 0, 0, 0, 0, 0, -t2062, -t2064, -t2038, -t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2169, 0, 0, 0, 0, 0, 0, t2135, t2149, t2141, t2099, 0, 0, 0, 0, 0, 0, t2071, t2087, t2053, t2026, 0, 0, 0, 0, 0, 0, t2034, t2036, t2028, t2010, 0, 0, 0, 0, 0, 0, t2012, t2014, t2006, t2000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2274, t2219, t2225, t2200, 0, 0, 0, 0, 0, 0, t2166, t2172, t2168, t2124, 0, 0, 0, 0, 0, 0, t2108, t2115, t2076, t2049, 0, 0, 0, 0, 0, 0, t2057, t2059, t2052, t2021, 0, 0, 0, 0, 0, 0, t2023, t2025, t2017, t2003; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2219, -t2228 * t2244, -t2268, t2199, 0, 0, 0, 0, 0, 0, t2165, t2171, t2167, t2123, 0, 0, 0, 0, 0, 0, t2107, t2114, t2075, t2048, 0, 0, 0, 0, 0, 0, t2056, t2058, t2051, t2020, 0, 0, 0, 0, 0, 0, t2022, t2024, t2016, t2002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2225, t2268, -t2214, -t2205, 0, 0, 0, 0, 0, 0, t2195, t2197, t2179, -t2192, 0, 0, 0, 0, 0, 0, t2137, -t2262, t2152, -t2151, 0, 0, 0, 0, 0, 0, t2101, t2105, t2089, t2042, 0, 0, 0, 0, 0, 0, t2062, t2064, t2038, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2191, t2194, t2174, t2158, 0, 0, 0, 0, 0, 0, t2133, t2147, t2112, t2070, 0, 0, 0, 0, 0, 0, t2078, t2080, t2074, t2041, 0, 0, 0, 0, 0, 0, t2045, t2047, t2031, t2005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2193, t2201, -t2299, t2157, 0, 0, 0, 0, 0, 0, t2132, t2146, t2111, t2069, 0, 0, 0, 0, 0, 0, t2077, t2079, t2073, t2040, 0, 0, 0, 0, 0, 0, t2044, t2046, t2029, t2004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2195, t2197, t2179, -t2192, 0, 0, 0, 0, 0, 0, t2137, -t2262, t2152, -t2151, 0, 0, 0, 0, 0, 0, t2101, t2105, t2089, t2042, 0, 0, 0, 0, 0, 0, t2062, t2064, t2038, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2161, t2163, t2138, t2104, 0, 0, 0, 0, 0, 0, t2102, t2106, t2090, t2043, 0, 0, 0, 0, 0, 0, t2063, t2065, t2039, t2009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2162, t2181, t2140, t2103, 0, 0, 0, 0, 0, 0, -t2116, -t2118, -t2143, -t2094, 0, 0, 0, 0, 0, 0, -t2081, -t2083, -t2113, -t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2137, -t2262, t2152, -t2151, 0, 0, 0, 0, 0, 0, t2101, t2105, t2089, t2042, 0, 0, 0, 0, 0, 0, t2062, t2064, t2038, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2145, t2122, t2117, t2067, 0, 0, 0, 0, 0, 0, t2086, t2092, t2061, t2019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2121, t2148, t2119, t2066, 0, 0, 0, 0, 0, 0, t2085, t2091, t2060, t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2116, t2118, t2143, t2094, 0, 0, 0, 0, 0, 0, t2081, t2083, t2113, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2120, t2110, t2082, t2033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2109, t2125, t2084, t2032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2081, t2083, t2113, t2068;];
f_new_reg  = t1;
