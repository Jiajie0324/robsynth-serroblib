% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 03:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRRR5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR5_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 03:32:12
% EndTime: 2019-05-06 03:32:38
% DurationCPUTime: 13.91s
% Computational Cost: add. (116449->653), mult. (279265->958), div. (0->0), fcn. (226156->12), ass. (0->421)
t372 = sin(qJ(6));
t370 = sin(pkin(11));
t371 = cos(pkin(11));
t375 = sin(qJ(3));
t380 = cos(qJ(3));
t355 = (-t370 * t375 + t371 * t380) * qJD(1);
t405 = t370 * t380 + t371 * t375;
t356 = t405 * qJD(1);
t374 = sin(qJ(4));
t379 = cos(qJ(4));
t331 = t355 * t374 + t356 * t379;
t369 = qJD(3) + qJD(4);
t373 = sin(qJ(5));
t378 = cos(qJ(5));
t315 = t331 * t373 - t378 * t369;
t317 = t331 * t378 + t369 * t373;
t377 = cos(qJ(6));
t284 = t377 * t315 + t317 * t372;
t286 = -t315 * t372 + t317 * t377;
t239 = t286 * t284;
t432 = t371 * qJDD(1);
t433 = t370 * qJDD(1);
t312 = -t375 * t433 + t380 * t432;
t438 = t356 * qJD(3);
t340 = t312 - t438;
t354 = t405 * qJDD(1);
t439 = qJD(3) * t355;
t342 = t354 + t439;
t414 = -t379 * t340 + t342 * t374;
t280 = -qJD(4) * t331 - t414;
t279 = qJDD(5) - t280;
t277 = qJDD(6) + t279;
t495 = -t239 + t277;
t503 = t372 * t495;
t288 = t317 * t315;
t493 = t279 - t288;
t502 = t373 * t493;
t329 = -t379 * t355 + t356 * t374;
t304 = t331 * t329;
t431 = qJDD(3) + qJDD(4);
t492 = -t304 + t431;
t501 = t374 * t492;
t344 = t355 * t356;
t490 = qJDD(3) + t344;
t500 = t375 * t490;
t499 = t377 * t495;
t498 = t378 * t493;
t497 = t379 * t492;
t496 = t380 * t490;
t382 = qJD(1) ^ 2;
t376 = sin(qJ(1));
t481 = cos(qJ(1));
t419 = g(1) * t376 - t481 * g(2);
t408 = -qJDD(2) + t419;
t480 = pkin(2) * t371;
t421 = pkin(1) + t480;
t367 = t370 ^ 2;
t368 = t371 ^ 2;
t440 = t367 + t368;
t335 = t421 * qJDD(1) + (pkin(7) * t440 + qJ(2)) * t382 + t408;
t352 = t355 ^ 2;
t407 = qJD(3) * pkin(3) - pkin(8) * t356;
t276 = pkin(3) * t340 + pkin(8) * t352 - t356 * t407 + t335;
t302 = pkin(4) * t329 - pkin(9) * t331;
t403 = g(1) * t481 + t376 * g(2);
t396 = -0.2e1 * qJD(2) * qJD(1) + t403;
t395 = -t382 * pkin(1) - t396;
t444 = t368 * t382;
t430 = pkin(2) * t444;
t475 = t370 * g(3);
t491 = qJDD(1) * (pkin(7) + qJ(2));
t388 = -t430 - t475 + (t395 + t491) * t371;
t474 = t371 * g(3);
t389 = -t474 + (t382 * t421 + t396 - t491) * t370;
t402 = (-t342 + t439) * pkin(8);
t394 = pkin(3) * t490 + t402;
t385 = -t375 * t388 + t380 * t389 + t394;
t251 = -t352 * pkin(3) + t340 * pkin(8) - qJD(3) * t407 + t375 * t389 + t380 * t388;
t441 = t379 * t251;
t483 = t369 ^ 2;
t174 = -pkin(4) * t483 + pkin(9) * t431 - t329 * t302 + t374 * t385 + t441;
t406 = t340 * t374 + t342 * t379;
t281 = -qJD(4) * t329 + t406;
t322 = t369 * t329;
t260 = t281 - t322;
t184 = -t260 * pkin(9) + (t331 * t369 - t280) * pkin(4) - t276;
t121 = t174 * t373 - t378 * t184;
t122 = t378 * t174 + t373 * t184;
t69 = t373 * t121 + t378 * t122;
t398 = -t378 * t281 - t373 * t431;
t248 = -t315 * qJD(5) - t398;
t415 = t281 * t373 - t378 * t431;
t400 = qJD(5) * t317 + t415;
t180 = -t284 * qJD(6) + t377 * t248 - t372 * t400;
t326 = qJD(5) + t329;
t324 = qJD(6) + t326;
t266 = t324 * t284;
t494 = -t266 + t180;
t297 = t326 * t315;
t231 = t297 + t248;
t466 = qJDD(1) * pkin(1);
t467 = qJ(2) * t382;
t351 = t408 + t466 + t467;
t489 = qJ(2) * t444 + t367 * t467 - t351 - t466;
t416 = t248 * t372 + t377 * t400;
t149 = (qJD(6) - t324) * t286 + t416;
t227 = (qJD(5) - t326) * t317 + t415;
t393 = qJDD(1) * qJ(2) + t395;
t392 = qJDD(1) * pkin(7) + t393;
t391 = t382 * t480 - t392;
t472 = t380 * g(3);
t473 = t375 * g(3);
t485 = t370 * (t380 * t391 + t473) - t371 * (t375 * t392 + t472);
t282 = t284 ^ 2;
t283 = t286 ^ 2;
t484 = t315 ^ 2;
t314 = t317 ^ 2;
t323 = t324 ^ 2;
t325 = t326 ^ 2;
t327 = t329 ^ 2;
t328 = t331 ^ 2;
t353 = t356 ^ 2;
t87 = pkin(5) * t493 - pkin(10) * t231 - t121;
t292 = pkin(5) * t326 - pkin(10) * t317;
t93 = -pkin(5) * t484 - pkin(10) * t400 - t326 * t292 + t122;
t51 = t372 * t93 - t377 * t87;
t52 = t372 * t87 + t377 * t93;
t29 = t372 * t52 - t377 * t51;
t482 = pkin(5) * t29;
t478 = pkin(4) * t374;
t152 = t266 + t180;
t104 = -t149 * t372 - t152 * t377;
t477 = pkin(5) * t104;
t470 = t29 * t373;
t469 = t29 * t378;
t194 = t251 * t374 - t379 * t385;
t173 = -t431 * pkin(4) - t483 * pkin(9) + t302 * t331 + t194;
t468 = -pkin(4) * t173 + pkin(9) * t69;
t124 = pkin(5) * t400 - pkin(10) * t484 + t292 * t317 + t173;
t465 = t124 * t372;
t464 = t124 * t377;
t386 = t374 * t485 + t441;
t412 = t375 * t430;
t195 = t374 * (t394 + t412) + t386;
t130 = -t194 * t379 + t195 * t374;
t463 = t130 * t375;
t462 = t130 * t380;
t202 = t239 + t277;
t461 = t202 * t372;
t460 = t202 * t377;
t236 = t279 + t288;
t459 = t236 * t373;
t458 = t236 * t378;
t290 = -t412 - t485;
t291 = -t380 * t430 + (t380 * t392 - t473) * t371 + (t375 * t391 - t472) * t370;
t240 = -t290 * t380 + t291 * t375;
t457 = t240 * t370;
t456 = t276 * t374;
t455 = t276 * t379;
t300 = t304 + t431;
t454 = t300 * t374;
t453 = t300 * t379;
t452 = t324 * t372;
t451 = t324 * t377;
t450 = t326 * t373;
t449 = t326 * t378;
t448 = t335 * t375;
t447 = t335 * t380;
t337 = qJDD(3) - t344;
t446 = t337 * t375;
t445 = t337 * t380;
t443 = t369 * t374;
t442 = t369 * t379;
t169 = t373 * t173;
t170 = t378 * t173;
t437 = qJD(4) + t369;
t435 = qJD(5) + t326;
t427 = t374 * t239;
t426 = t379 * t239;
t425 = t374 * t288;
t424 = t379 * t288;
t275 = -t314 - t325;
t198 = -t275 * t373 - t458;
t232 = t315 * t435 + t398;
t423 = pkin(4) * t232 + pkin(9) * t198 + t169;
t268 = -t325 - t484;
t193 = t268 * t378 - t502;
t228 = -t317 * t435 - t415;
t422 = pkin(4) * t228 + pkin(9) * t193 - t170;
t420 = -pkin(4) * t379 - pkin(3);
t30 = t372 * t51 + t377 * t52;
t209 = -t282 - t283;
t106 = -t149 * t377 + t152 * t372;
t21 = -pkin(5) * t209 + pkin(10) * t106 + t30;
t23 = -pkin(10) * t104 - t29;
t59 = -t104 * t373 + t106 * t378;
t418 = -pkin(4) * t209 + pkin(9) * t59 + t378 * t21 + t373 * t23;
t131 = t194 * t374 + t379 * t195;
t241 = t290 * t375 + t380 * t291;
t413 = t370 * (t370 * t393 + t474) + t371 * (t371 * t393 - t475);
t234 = -t323 - t282;
t156 = t234 * t372 + t499;
t157 = t234 * t377 - t503;
t109 = -t156 * t373 + t157 * t378;
t148 = (qJD(6) + t324) * t286 + t416;
t64 = -pkin(5) * t148 + pkin(10) * t157 - t464;
t85 = -pkin(10) * t156 + t465;
t411 = -pkin(4) * t148 + pkin(9) * t109 + t373 * t85 + t378 * t64;
t242 = -t283 - t323;
t167 = t242 * t377 - t461;
t168 = -t242 * t372 - t460;
t113 = -t167 * t373 + t168 * t378;
t66 = -pkin(5) * t494 + pkin(10) * t168 + t465;
t91 = -pkin(10) * t167 + t464;
t410 = -pkin(4) * t494 + pkin(9) * t113 + t373 * t91 + t378 * t66;
t166 = -t227 * t378 + t231 * t373;
t263 = t314 + t484;
t409 = pkin(4) * t263 + pkin(9) * t166 + t69;
t68 = -t121 * t378 + t122 * t373;
t404 = pkin(5) * t156 - t51;
t17 = t30 * t378 - t470;
t25 = -pkin(5) * t124 + pkin(10) * t30;
t401 = -pkin(4) * t124 + pkin(9) * t17 - pkin(10) * t470 + t378 * t25;
t399 = pkin(5) * t167 - t52;
t397 = (-qJD(4) + t369) * t331 - t414;
t381 = qJD(3) ^ 2;
t364 = t368 * qJDD(1);
t363 = t367 * qJDD(1);
t357 = t440 * t382;
t348 = -t353 - t381;
t347 = -t353 + t381;
t346 = t352 - t381;
t341 = t354 + 0.2e1 * t439;
t339 = -t312 + 0.2e1 * t438;
t334 = -t381 - t352;
t321 = -t328 + t483;
t320 = t327 - t483;
t319 = -t328 - t483;
t318 = -t352 - t353;
t310 = -t348 * t375 - t445;
t309 = t348 * t380 - t446;
t308 = t312 * t380 + t354 * t375;
t307 = t312 * t375 - t354 * t380;
t306 = t334 * t380 - t500;
t305 = t334 * t375 + t496;
t303 = t328 - t327;
t298 = -t483 - t327;
t296 = -t314 + t325;
t295 = -t325 + t484;
t294 = (-t329 * t379 + t331 * t374) * t369;
t293 = (-t329 * t374 - t331 * t379) * t369;
t287 = t314 - t484;
t278 = -t327 - t328;
t274 = t320 * t379 - t454;
t273 = -t321 * t374 + t497;
t272 = t320 * t374 + t453;
t271 = t321 * t379 + t501;
t270 = -t319 * t374 - t453;
t269 = t319 * t379 - t454;
t265 = -t283 + t323;
t264 = t282 - t323;
t261 = t281 + t322;
t259 = -t329 * t437 + t406;
t256 = t331 * t437 + t414;
t255 = t281 * t379 - t331 * t443;
t254 = t281 * t374 + t331 * t442;
t253 = -t280 * t374 + t329 * t442;
t252 = t280 * t379 + t329 * t443;
t250 = t298 * t379 - t501;
t249 = t298 * t374 + t497;
t245 = (-t315 * t378 + t317 * t373) * t326;
t244 = (-t315 * t373 - t317 * t378) * t326;
t238 = t283 - t282;
t233 = -pkin(8) * t269 - t455;
t230 = -t297 + t248;
t224 = t248 * t378 - t317 * t450;
t223 = t248 * t373 + t317 * t449;
t222 = t315 * t449 + t373 * t400;
t221 = t315 * t450 - t378 * t400;
t220 = -t269 * t375 + t270 * t380;
t219 = t269 * t380 + t270 * t375;
t218 = (-t284 * t377 + t286 * t372) * t324;
t217 = (-t284 * t372 - t286 * t377) * t324;
t216 = -pkin(8) * t249 - t456;
t215 = t245 * t379 + t279 * t374;
t214 = t245 * t374 - t279 * t379;
t213 = t295 * t378 - t459;
t212 = -t296 * t373 + t498;
t211 = t295 * t373 + t458;
t210 = t296 * t378 + t502;
t207 = t261 * t374 + t379 * t397;
t206 = -t256 * t379 - t260 * t374;
t205 = -t261 * t379 + t374 * t397;
t204 = -t256 * t374 + t260 * t379;
t200 = -t249 * t375 + t250 * t380;
t199 = t249 * t380 + t250 * t375;
t197 = t275 * t378 - t459;
t192 = t268 * t373 + t498;
t189 = t224 * t379 + t425;
t188 = t222 * t379 - t425;
t187 = t224 * t374 - t424;
t186 = t222 * t374 + t424;
t185 = -pkin(3) * t259 + pkin(8) * t270 - t456;
t181 = -pkin(3) * t256 + pkin(8) * t250 + t455;
t179 = -qJD(6) * t286 - t416;
t178 = t264 * t377 - t461;
t177 = -t265 * t372 + t499;
t176 = t264 * t372 + t460;
t175 = t265 * t377 + t503;
t165 = t228 * t378 - t230 * t373;
t164 = -t227 * t373 - t231 * t378;
t163 = t228 * t373 + t230 * t378;
t161 = t213 * t379 - t227 * t374;
t160 = t212 * t379 + t231 * t374;
t159 = t213 * t374 + t227 * t379;
t158 = t212 * t374 - t231 * t379;
t155 = -t217 * t373 + t218 * t378;
t154 = t217 * t378 + t218 * t373;
t145 = t180 * t377 - t286 * t452;
t144 = t180 * t372 + t286 * t451;
t143 = -t179 * t372 + t284 * t451;
t142 = t179 * t377 + t284 * t452;
t141 = t198 * t379 - t232 * t374;
t140 = t198 * t374 + t232 * t379;
t139 = t193 * t379 - t228 * t374;
t138 = t193 * t374 + t228 * t379;
t137 = t165 * t379 + t287 * t374;
t136 = t165 * t374 - t287 * t379;
t135 = -t205 * t375 + t207 * t380;
t134 = t205 * t380 + t207 * t375;
t133 = t166 * t379 - t263 * t374;
t132 = t166 * t374 + t263 * t379;
t129 = t155 * t379 + t277 * t374;
t128 = t155 * t374 - t277 * t379;
t127 = -pkin(9) * t197 + t170;
t126 = pkin(3) * t276 + pkin(8) * t131;
t125 = -pkin(9) * t192 + t169;
t118 = -t176 * t373 + t178 * t378;
t117 = -t175 * t373 + t177 * t378;
t116 = t176 * t378 + t178 * t373;
t115 = t175 * t378 + t177 * t373;
t114 = -pkin(8) * t205 - t130;
t112 = t167 * t378 + t168 * t373;
t110 = -pkin(3) * t278 + pkin(8) * t207 + t131;
t108 = t156 * t378 + t157 * t373;
t105 = -t148 * t377 - t372 * t494;
t103 = -t148 * t372 + t377 * t494;
t102 = -t144 * t373 + t145 * t378;
t101 = -t142 * t373 + t143 * t378;
t100 = t144 * t378 + t145 * t373;
t99 = t142 * t378 + t143 * t373;
t98 = -t140 * t375 + t141 * t380;
t97 = t140 * t380 + t141 * t375;
t96 = -t138 * t375 + t139 * t380;
t95 = t138 * t380 + t139 * t375;
t94 = -pkin(4) * t197 + t122;
t92 = -pkin(4) * t192 + t121;
t89 = -t132 * t375 + t133 * t380;
t88 = t132 * t380 + t133 * t375;
t83 = t131 * t380 - t463;
t82 = t131 * t375 + t462;
t81 = t102 * t379 + t427;
t80 = t101 * t379 - t427;
t79 = t102 * t374 - t426;
t78 = t101 * t374 + t426;
t77 = t118 * t379 - t149 * t374;
t76 = t117 * t379 + t152 * t374;
t75 = t118 * t374 + t149 * t379;
t74 = t117 * t374 - t152 * t379;
t73 = t113 * t379 + t374 * t494;
t72 = t113 * t374 - t379 * t494;
t71 = t109 * t379 + t148 * t374;
t70 = t109 * t374 - t148 * t379;
t62 = t173 * t374 + t379 * t69;
t61 = -t173 * t379 + t374 * t69;
t60 = -pkin(9) * t164 - t68;
t58 = -t103 * t373 + t105 * t378;
t57 = t104 * t378 + t106 * t373;
t56 = t103 * t378 + t105 * t373;
t54 = t238 * t374 + t379 * t58;
t53 = -t238 * t379 + t374 * t58;
t49 = -pkin(8) * t140 + t127 * t379 - t374 * t94;
t48 = -pkin(8) * t138 + t125 * t379 - t374 * t92;
t47 = t209 * t374 + t379 * t59;
t46 = -t209 * t379 + t374 * t59;
t45 = -pkin(3) * t197 + pkin(8) * t141 + t127 * t374 + t379 * t94;
t44 = -pkin(3) * t192 + pkin(8) * t139 + t125 * t374 + t379 * t92;
t43 = -t375 * t72 + t380 * t73;
t42 = t375 * t73 + t380 * t72;
t41 = -t375 * t70 + t380 * t71;
t40 = t375 * t71 + t380 * t70;
t39 = -pkin(8) * t132 + t164 * t478 + t379 * t60;
t38 = -pkin(4) * t57 - t477;
t37 = pkin(8) * t133 + t164 * t420 + t374 * t60;
t36 = -pkin(4) * t112 - t399;
t35 = -pkin(9) * t112 - t373 * t66 + t378 * t91;
t34 = -pkin(4) * t108 - t404;
t33 = -pkin(9) * t108 - t373 * t64 + t378 * t85;
t32 = -t375 * t61 + t380 * t62;
t31 = t375 * t62 + t380 * t61;
t28 = -t375 * t46 + t380 * t47;
t27 = t375 * t47 + t380 * t46;
t26 = -pkin(8) * t61 + (-pkin(9) * t379 + t478) * t68;
t19 = pkin(8) * t62 + (-pkin(9) * t374 + t420) * t68;
t18 = -pkin(8) * t72 + t35 * t379 - t36 * t374;
t16 = t30 * t373 + t469;
t14 = -pkin(8) * t70 + t33 * t379 - t34 * t374;
t13 = -pkin(3) * t112 + pkin(8) * t73 + t35 * t374 + t36 * t379;
t12 = t124 * t374 + t17 * t379;
t11 = -t124 * t379 + t17 * t374;
t10 = -pkin(3) * t108 + pkin(8) * t71 + t33 * t374 + t34 * t379;
t9 = -pkin(9) * t57 - t21 * t373 + t23 * t378;
t8 = -pkin(4) * t16 - t482;
t7 = -pkin(8) * t46 - t374 * t38 + t379 * t9;
t6 = -pkin(9) * t16 - pkin(10) * t469 - t25 * t373;
t5 = -t11 * t375 + t12 * t380;
t4 = t11 * t380 + t12 * t375;
t3 = -pkin(3) * t57 + pkin(8) * t47 + t374 * t9 + t379 * t38;
t2 = -pkin(8) * t11 - t374 * t8 + t379 * t6;
t1 = -pkin(3) * t16 + pkin(8) * t12 + t374 * t6 + t379 * t8;
t15 = [0, 0, 0, 0, 0, qJDD(1), t419, t403, 0, 0, t363, 0.2e1 * t370 * t432, 0, t364, 0, 0, -t489 * t371, t489 * t370, pkin(1) * t357 + qJ(2) * (t364 + t363) + t413, pkin(1) * t351 + qJ(2) * t413, t370 * (t342 * t380 - t375 * t438) + t371 * (t342 * t375 + t380 * t438), t370 * (-t339 * t380 - t341 * t375) + t371 * (-t339 * t375 + t341 * t380), t370 * (-t347 * t375 + t496) + t371 * (t347 * t380 + t500), t370 * (-t340 * t375 - t380 * t439) + t371 * (t340 * t380 - t375 * t439), t370 * (t346 * t380 - t446) + t371 * (t346 * t375 + t445), (t370 * (t355 * t380 + t356 * t375) + t371 * (t355 * t375 - t356 * t380)) * qJD(3), t370 * (-pkin(7) * t305 - t448) + t371 * (-pkin(2) * t339 + pkin(7) * t306 + t447) - pkin(1) * t339 + qJ(2) * (-t305 * t370 + t306 * t371), t370 * (-pkin(7) * t309 - t447) + t371 * (-pkin(2) * t341 + pkin(7) * t310 - t448) - pkin(1) * t341 + qJ(2) * (-t309 * t370 + t310 * t371), t370 * (-pkin(7) * t307 - t240) + t371 * (-pkin(2) * t318 + pkin(7) * t308 + t241) - pkin(1) * t318 + qJ(2) * (-t307 * t370 + t308 * t371), -pkin(7) * t457 + t371 * (pkin(2) * t335 + pkin(7) * t241) + pkin(1) * t335 + qJ(2) * (t241 * t371 - t457), t370 * (-t254 * t375 + t255 * t380) + t371 * (t254 * t380 + t255 * t375), t370 * (-t204 * t375 + t206 * t380) + t371 * (t204 * t380 + t206 * t375), t370 * (-t271 * t375 + t273 * t380) + t371 * (t271 * t380 + t273 * t375), t370 * (-t252 * t375 + t253 * t380) + t371 * (t252 * t380 + t253 * t375), t370 * (-t272 * t375 + t274 * t380) + t371 * (t272 * t380 + t274 * t375), t370 * (-t293 * t375 + t294 * t380) + t371 * (t293 * t380 + t294 * t375), t370 * (-pkin(7) * t199 - t181 * t375 + t216 * t380) + t371 * (-pkin(2) * t256 + pkin(7) * t200 + t181 * t380 + t216 * t375) - pkin(1) * t256 + qJ(2) * (-t199 * t370 + t200 * t371), t370 * (-pkin(7) * t219 - t185 * t375 + t233 * t380) + t371 * (-pkin(2) * t259 + pkin(7) * t220 + t185 * t380 + t233 * t375) - pkin(1) * t259 + qJ(2) * (-t219 * t370 + t220 * t371), t370 * (-pkin(7) * t134 - t110 * t375 + t114 * t380) + t371 * (-pkin(2) * t278 + pkin(7) * t135 + t110 * t380 + t114 * t375) - pkin(1) * t278 + qJ(2) * (-t134 * t370 + t135 * t371), t370 * (-pkin(7) * t82 - pkin(8) * t462 - t126 * t375) + t371 * (pkin(2) * t276 + pkin(7) * t83 - pkin(8) * t463 + t126 * t380) + pkin(1) * t276 + qJ(2) * (-t370 * t82 + t371 * t83), t370 * (-t187 * t375 + t189 * t380) + t371 * (t187 * t380 + t189 * t375), t370 * (-t136 * t375 + t137 * t380) + t371 * (t136 * t380 + t137 * t375), t370 * (-t158 * t375 + t160 * t380) + t371 * (t158 * t380 + t160 * t375), t370 * (-t186 * t375 + t188 * t380) + t371 * (t186 * t380 + t188 * t375), t370 * (-t159 * t375 + t161 * t380) + t371 * (t159 * t380 + t161 * t375), t370 * (-t214 * t375 + t215 * t380) + t371 * (t214 * t380 + t215 * t375), t370 * (-pkin(7) * t95 - t375 * t44 + t380 * t48) + t371 * (-pkin(2) * t192 + pkin(7) * t96 + t375 * t48 + t380 * t44) - pkin(1) * t192 + qJ(2) * (-t370 * t95 + t371 * t96), t370 * (-pkin(7) * t97 - t375 * t45 + t380 * t49) + t371 * (-pkin(2) * t197 + pkin(7) * t98 + t375 * t49 + t380 * t45) - pkin(1) * t197 + qJ(2) * (-t370 * t97 + t371 * t98), t370 * (-pkin(7) * t88 - t37 * t375 + t380 * t39) + t371 * (-pkin(2) * t164 + pkin(7) * t89 + t37 * t380 + t375 * t39) - pkin(1) * t164 + qJ(2) * (-t370 * t88 + t371 * t89), t370 * (-pkin(7) * t31 - t19 * t375 + t26 * t380) + t371 * (-pkin(2) * t68 + pkin(7) * t32 + t19 * t380 + t26 * t375) - pkin(1) * t68 + qJ(2) * (-t31 * t370 + t32 * t371), t370 * (-t375 * t79 + t380 * t81) + t371 * (t375 * t81 + t380 * t79), t370 * (-t375 * t53 + t380 * t54) + t371 * (t375 * t54 + t380 * t53), t370 * (-t375 * t74 + t380 * t76) + t371 * (t375 * t76 + t380 * t74), t370 * (-t375 * t78 + t380 * t80) + t371 * (t375 * t80 + t380 * t78), t370 * (-t375 * t75 + t380 * t77) + t371 * (t375 * t77 + t380 * t75), t370 * (-t128 * t375 + t129 * t380) + t371 * (t128 * t380 + t129 * t375), t370 * (-pkin(7) * t40 - t10 * t375 + t14 * t380) + t371 * (-pkin(2) * t108 + pkin(7) * t41 + t10 * t380 + t14 * t375) - pkin(1) * t108 + qJ(2) * (-t370 * t40 + t371 * t41), t370 * (-pkin(7) * t42 - t13 * t375 + t18 * t380) + t371 * (-pkin(2) * t112 + pkin(7) * t43 + t13 * t380 + t18 * t375) - pkin(1) * t112 + qJ(2) * (-t370 * t42 + t371 * t43), t370 * (-pkin(7) * t27 - t3 * t375 + t380 * t7) + t371 * (-pkin(2) * t57 + pkin(7) * t28 + t3 * t380 + t375 * t7) - pkin(1) * t57 + qJ(2) * (-t27 * t370 + t28 * t371), t370 * (-pkin(7) * t4 - t1 * t375 + t2 * t380) + t371 * (-pkin(2) * t16 + pkin(7) * t5 + t1 * t380 + t2 * t375) - pkin(1) * t16 + qJ(2) * (-t370 * t4 + t371 * t5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t432, t433, -t357, -t351, 0, 0, 0, 0, 0, 0, t339, t341, t318, -t335, 0, 0, 0, 0, 0, 0, t256, t259, t278, -t276, 0, 0, 0, 0, 0, 0, t192, t197, t164, t68, 0, 0, 0, 0, 0, 0, t108, t112, t57, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t344, t353 - t352, t354, t344, t312, qJDD(3), -t290, -t291, 0, 0, t304, t303, t261, -t304, t397, t431, pkin(3) * t249 - t194, -t374 * (t402 + t412) + (-t374 * t490 + t269) * pkin(3) - t386, pkin(3) * t205, pkin(3) * t130, t223, t163, t210, t221, t211, t244, pkin(3) * t138 + t422, pkin(3) * t140 + t423, pkin(3) * t132 + t409, pkin(3) * t61 + t468, t100, t56, t115, t99, t116, t154, pkin(3) * t70 + t411, pkin(3) * t72 + t410, pkin(3) * t46 + t418, pkin(3) * t11 + t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, t303, t261, -t304, t397, t431, -t194, -t195, 0, 0, t223, t163, t210, t221, t211, t244, t422, t423, t409, t468, t100, t56, t115, t99, t116, t154, t411, t410, t418, t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t288, t287, t231, -t288, -t227, t279, -t121, -t122, 0, 0, t239, t238, t152, -t239, -t149, t277, t404, t399, t477, t482; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239, t238, t152, -t239, -t149, t277, -t51, -t52, 0, 0;];
tauJ_reg  = t15;
