% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR5_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:09:50
% EndTime: 2019-03-09 07:10:04
% DurationCPUTime: 4.90s
% Computational Cost: add. (12404->329), mult. (26426->562), div. (0->0), fcn. (28307->10), ass. (0->191)
t146 = sin(qJ(4));
t142 = sin(pkin(11));
t143 = cos(pkin(11));
t267 = sin(qJ(3));
t270 = cos(qJ(3));
t262 = pkin(7) + qJ(2);
t282 = t270 * t262;
t283 = t262 * t267;
t160 = (t270 * pkin(8) + t282) * t143 + (-t267 * pkin(8) - t283) * t142;
t116 = t270 * t142 + t267 * t143;
t96 = -t142 * t282 - t143 * t283;
t165 = -t116 * pkin(8) + t96;
t269 = cos(qJ(4));
t54 = t146 * t160 - t269 * t165;
t176 = -t267 * t142 + t270 * t143;
t173 = t176 * qJD(3);
t284 = -t270 * qJD(2) + qJD(3) * t283;
t285 = -t267 * qJD(2) - qJD(3) * t282;
t73 = t142 * t284 + t143 * t285;
t156 = -pkin(8) * t173 + t73;
t242 = t116 * qJD(3);
t72 = -t142 * t285 + t143 * t284;
t157 = -t242 * pkin(8) - t72;
t149 = t54 * qJD(4) - t146 * t156 - t269 * t157;
t132 = -t143 * pkin(2) - pkin(1);
t102 = -t176 * pkin(3) + t132;
t169 = t269 * t176;
t90 = t146 * t116 - t169;
t174 = t146 * t176;
t91 = t269 * t116 + t174;
t163 = t90 * pkin(4) - t91 * pkin(9) + t102;
t287 = -qJD(5) * t163 + t149;
t155 = t146 * t165 + t269 * t160;
t218 = t242 * pkin(3);
t240 = qJD(4) * t146;
t60 = t116 * t240 + t146 * t242 + (-qJD(3) - qJD(4)) * t169;
t219 = qJD(4) * t269;
t61 = qJD(4) * t174 + t116 * t219 + t146 * t173 + t269 * t242;
t286 = -t61 * pkin(4) - t60 * pkin(9) + qJD(5) * t155 - t218;
t145 = sin(qJ(5));
t140 = t145 ^ 2;
t147 = cos(qJ(5));
t141 = t147 ^ 2;
t241 = t140 - t141;
t276 = t241 * qJD(5);
t281 = t140 + t141;
t268 = cos(qJ(6));
t215 = t268 * qJD(6);
t280 = t268 * qJD(5) + t215;
t223 = t268 * t147;
t144 = sin(qJ(6));
t244 = t144 * t145;
t279 = t223 - t244;
t136 = qJD(5) * t147;
t227 = t91 * t136;
t278 = -t145 * t60 + t227;
t239 = qJD(5) * t145;
t228 = t91 * t239;
t250 = t147 * t60;
t183 = t228 + t250;
t30 = -t145 * t155 + t147 * t163;
t31 = t145 * t163 + t147 * t155;
t277 = -t145 * t30 + t147 * t31;
t275 = qJD(5) + qJD(6);
t10 = t145 * t286 + t147 * t287;
t11 = t145 * t287 - t147 * t286;
t274 = -qJD(5) * t277 + t10 * t145 - t11 * t147;
t273 = -pkin(10) - pkin(9);
t272 = pkin(9) * t61;
t271 = t61 * pkin(5);
t266 = pkin(3) * t146;
t265 = t147 * pkin(5);
t137 = t147 * pkin(10);
t28 = t155 * qJD(4) + t146 * t157 - t269 * t156;
t264 = t54 * t28;
t263 = t91 * t60;
t20 = t278 * pkin(5) + t28;
t252 = t145 * t91;
t39 = pkin(5) * t252 + t54;
t224 = t268 * t145;
t119 = t144 * t147 + t224;
t93 = t275 * t119;
t261 = -t20 * t279 + t39 * t93;
t92 = -t280 * t147 + t275 * t244;
t260 = t20 * t119 - t39 * t92;
t48 = t54 * t136;
t259 = t28 * t145 + t48;
t231 = t91 * t244;
t23 = -t60 * t224 - t144 * t228 - qJD(6) * t231 + (-t144 * t60 + t280 * t91) * t147;
t58 = t119 * t91;
t258 = -t119 * t23 + t92 * t58;
t257 = pkin(3) * qJD(4);
t256 = t279 * t93;
t255 = t119 * t92;
t233 = pkin(3) * t240;
t234 = pkin(5) * t239;
t120 = t233 + t234;
t237 = t269 * pkin(3);
t134 = -t237 - pkin(4);
t123 = t134 - t265;
t249 = -t120 * t279 + t123 * t93;
t248 = t120 * t119 - t123 * t92;
t135 = -pkin(4) - t265;
t247 = t135 * t93 - t234 * t279;
t246 = t119 * t234 - t135 * t92;
t243 = t134 * t136 + t145 * t233;
t238 = qJD(6) * t144;
t43 = 0.2e1 * t90 * t61;
t236 = pkin(4) * t239;
t235 = pkin(4) * t136;
t232 = pkin(5) * t238;
t230 = t145 * t250;
t229 = t144 * t273;
t47 = t54 * t239;
t226 = pkin(9) + t266;
t221 = t145 * t136;
t152 = t90 * pkin(5) - t91 * t137 + t30;
t150 = t268 * t152;
t27 = -pkin(10) * t252 + t31;
t14 = -t144 * t27 + t150;
t151 = t144 * t152;
t15 = t268 * t27 + t151;
t148 = t183 * pkin(10) + t11 + t271;
t153 = -t278 * pkin(10) - t10;
t3 = -qJD(6) * t150 - t144 * t148 - t268 * t153 + t27 * t238;
t4 = -qJD(6) * t151 - t144 * t153 + t268 * t148 - t27 * t215;
t220 = -t4 * t119 + t14 * t92 - t15 * t93 - t279 * t3;
t199 = t147 * t226;
t114 = t199 + t137;
t211 = -pkin(10) - t226;
t187 = qJD(5) * t211;
t210 = pkin(3) * t219;
t190 = t147 * t210;
t166 = t145 * t187 + t190;
t191 = t145 * t210;
t167 = t147 * t187 - t191;
t188 = t211 * t145;
t179 = t268 * t188;
t52 = -qJD(6) * t179 + t114 * t238 - t144 * t167 - t268 * t166;
t181 = t144 * t188;
t53 = -qJD(6) * t181 - t114 * t215 - t144 * t166 + t268 * t167;
t87 = -t144 * t114 + t179;
t88 = t268 * t114 + t181;
t213 = -t53 * t119 - t279 * t52 + t87 * t92 - t88 * t93;
t124 = t147 * pkin(9) + t137;
t206 = t273 * t268;
t189 = t145 * t206;
t67 = t124 * t238 - t229 * t136 - t275 * t189;
t208 = t145 * t229;
t99 = t268 * t124 + t208;
t68 = -t99 * qJD(6) + (t147 * t206 - t208) * qJD(5);
t98 = -t144 * t124 + t189;
t212 = -t68 * t119 - t279 * t67 + t98 * t92 - t99 * t93;
t209 = pkin(5) * t215;
t89 = t91 ^ 2;
t207 = t89 * t221;
t205 = 0.2e1 * (t142 ^ 2 + t143 ^ 2) * qJD(2);
t200 = t145 * t226;
t198 = t28 * t91 - t54 * t60;
t197 = t60 * t90 - t61 * t91;
t196 = qJD(5) * t226;
t22 = t279 * t60 + t93 * t91;
t59 = t91 * t223 - t231;
t195 = t22 * t279 + t59 * t93;
t37 = t119 * t61 - t90 * t92;
t193 = t31 * t145 + t30 * t147;
t186 = t134 * t239 - t147 * t233;
t41 = t90 * t136 + t145 * t61;
t182 = -t147 * t61 + t90 * t239;
t178 = -t134 * t91 + t226 * t90;
t177 = t281 * t269;
t172 = 0.2e1 * t173;
t168 = -t146 * t61 + (t146 * t91 - t269 * t90) * qJD(4);
t5 = -t193 * qJD(5) - t10 * t147 - t11 * t145;
t162 = t168 * pkin(3) - t134 * t60 - t272;
t127 = -0.2e1 * t221;
t126 = 0.2e1 * t221;
t117 = -0.2e1 * t276;
t110 = t177 * t257;
t97 = -t142 * t283 + t143 * t282;
t76 = -0.2e1 * t255;
t75 = -0.2e1 * t256;
t55 = -0.2e1 * t119 * t93 - 0.2e1 * t279 * t92;
t46 = (t268 * t92 - t144 * t93 + (t119 * t144 + t268 * t279) * qJD(6)) * pkin(5);
t38 = t279 * t61 - t90 * t93;
t36 = t276 * t91 + t230;
t29 = -0.4e1 * t91 * t221 + t241 * t60;
t17 = -t23 * t279 + t58 * t93;
t16 = -t119 * t22 - t59 * t92;
t6 = -t195 + t258;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, qJ(2) * t205, t116 * t172, 0.2e1 * t176 ^ 2 * qJD(3) - 0.2e1 * t116 * t242, 0, -0.2e1 * t176 * t242, 0, 0, 0.2e1 * t132 * t242, t132 * t172, -0.2e1 * t73 * t116 - 0.2e1 * t97 * t242 + 0.2e1 * (-qJD(3) * t96 - t72) * t176, -0.2e1 * t72 * t97 + 0.2e1 * t73 * t96, -0.2e1 * t263, 0.2e1 * t197, 0, t43, 0, 0, 0.2e1 * t102 * t61 + 0.2e1 * t90 * t218, -0.2e1 * t102 * t60 + 0.2e1 * t91 * t218, 0.2e1 * t149 * t90 - 0.2e1 * t155 * t61 + 0.2e1 * t198, 0.2e1 * t102 * t218 - 0.2e1 * t155 * t149 + 0.2e1 * t264, -0.2e1 * t141 * t263 - 0.2e1 * t207, 0.4e1 * t91 * t230 + 0.2e1 * t89 * t276, -0.2e1 * t197 * t147 - 0.2e1 * t90 * t228, -0.2e1 * t140 * t263 + 0.2e1 * t207, 0.2e1 * t145 * t197 - 0.2e1 * t227 * t90, t43, 0.2e1 * t11 * t90 + 0.2e1 * t145 * t198 + 0.2e1 * t30 * t61 + 0.2e1 * t48 * t91, 0.2e1 * t10 * t90 + 0.2e1 * t147 * t198 - 0.2e1 * t31 * t61 - 0.2e1 * t47 * t91, 0.2e1 * t193 * t60 + 0.2e1 * t274 * t91, -0.2e1 * t10 * t31 + 0.2e1 * t11 * t30 + 0.2e1 * t264, -0.2e1 * t59 * t22, 0.2e1 * t22 * t58 - 0.2e1 * t23 * t59, -0.2e1 * t22 * t90 + 0.2e1 * t59 * t61, 0.2e1 * t58 * t23, -0.2e1 * t23 * t90 - 0.2e1 * t58 * t61, t43, 0.2e1 * t14 * t61 + 0.2e1 * t20 * t58 + 0.2e1 * t23 * t39 + 0.2e1 * t4 * t90, -0.2e1 * t15 * t61 + 0.2e1 * t20 * t59 - 0.2e1 * t22 * t39 + 0.2e1 * t3 * t90, 0.2e1 * t14 * t22 - 0.2e1 * t15 * t23 + 0.2e1 * t3 * t58 - 0.2e1 * t4 * t59, 0.2e1 * t14 * t4 - 0.2e1 * t15 * t3 + 0.2e1 * t20 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, t173, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t60, 0, t218, 0, 0, 0, 0, 0, 0, -t182, -t41, t281 * t60, -t274, 0, 0, 0, 0, 0, 0, t38, -t37, t195 + t258, -t119 * t3 - t14 * t93 - t15 * t92 + t279 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t255 - 0.2e1 * t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, 0, -t242, 0, t73, t72, 0, 0, 0, 0, -t60, 0, -t61, 0, -t28, t149 (t269 * t60 + t168) * pkin(3), -t149 * t266 + t155 * t210 + t54 * t233 - t28 * t237, -t36, t29, t41, t36, -t182, 0, t47 + (-qJD(5) * t178 - t28) * t147 + t162 * t145, t147 * t162 + t178 * t239 + t259, t5, -t10 * t199 - t11 * t200 + t28 * t134 + (-t199 * t30 - t200 * t31) * qJD(5) + (t54 * t146 + t277 * t269) * t257, t16, t6, t37, t17, t38, 0, t120 * t58 + t123 * t23 + t53 * t90 + t61 * t87 + t261, t120 * t59 - t123 * t22 + t52 * t90 - t61 * t88 + t260, t22 * t87 - t23 * t88 + t52 * t58 - t53 * t59 + t220, t120 * t39 + t123 * t20 + t14 * t53 - t15 * t52 - t3 * t88 + t4 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119 * t52 + t279 * t53 - t87 * t93 - t88 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t233, -0.2e1 * t210, 0, 0, t126, t117, 0, t127, 0, 0, 0.2e1 * t186, 0.2e1 * t243, 0.2e1 * t110, 0.2e1 * (t281 * t226 * t237 + t134 * t266) * qJD(4), t76, t55, 0, t75, 0, 0, 0.2e1 * t249, 0.2e1 * t248, 0.2e1 * t213, 0.2e1 * t120 * t123 - 0.2e1 * t52 * t88 + 0.2e1 * t53 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, 0, -t61, 0, -t28, t149, 0, 0, -t36, t29, t41, t36, -t182, 0, t47 + (pkin(4) * t60 - t272) * t145 + (-t28 + (-pkin(4) * t91 - pkin(9) * t90) * qJD(5)) * t147, pkin(4) * t183 + pkin(9) * t182 + t259, t5, -t28 * pkin(4) + pkin(9) * t5, t16, t6, t37, t17, t38, 0, t135 * t23 + t234 * t58 + t61 * t98 + t68 * t90 + t261, -t135 * t22 + t234 * t59 - t61 * t99 + t67 * t90 + t260, t22 * t98 - t23 * t99 + t58 * t67 - t59 * t68 + t220, t135 * t20 + t14 * t68 - t15 * t67 + t234 * t39 - t3 * t99 + t4 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119 * t67 + t279 * t68 - t92 * t99 - t93 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t233, -t210, 0, 0, t126, t117, 0, t127, 0, 0, t186 - t236, -t235 + t243, t110 (-pkin(4) * t146 + pkin(9) * t177) * t257, t76, t55, 0, t75, 0, 0, t247 + t249, t246 + t248, t212 + t213, t120 * t135 + t123 * t234 - t52 * t99 + t53 * t98 - t67 * t88 + t68 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, t117, 0, t127, 0, 0, -0.2e1 * t236, -0.2e1 * t235, 0, 0, t76, t55, 0, t75, 0, 0, 0.2e1 * t247, 0.2e1 * t246, 0.2e1 * t212, 0.2e1 * t135 * t234 - 0.2e1 * t67 * t99 + 0.2e1 * t68 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, 0, -t278, t61, t11, t10, 0, 0, 0, 0, -t22, 0, -t23, t61, -t232 * t90 + t268 * t271 + t4 (-t144 * t61 - t215 * t90) * pkin(5) + t3 (t268 * t22 - t144 * t23 + (t144 * t59 - t268 * t58) * qJD(6)) * pkin(5) (t268 * t4 - t144 * t3 + (-t14 * t144 + t15 * t268) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, -t136, 0, 0, 0, 0, 0, 0, 0, 0, -t93, t92, 0 (-t268 * t93 - t144 * t92 + (t119 * t268 - t144 * t279) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t239, 0, -t147 * t196 - t191, t145 * t196 - t190, 0, 0, 0, 0, -t92, 0, -t93, 0, t53, t52, t46 (t268 * t53 - t144 * t52 + (-t144 * t87 + t268 * t88) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t239, 0, -pkin(9) * t136, pkin(9) * t239, 0, 0, 0, 0, -t92, 0, -t93, 0, t68, t67, t46 (t268 * t68 - t144 * t67 + (-t144 * t98 + t268 * t99) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t232, -0.2e1 * t209, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t23, t61, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, t92, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, 0, -t93, 0, t53, t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, 0, -t93, 0, t68, t67, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t232, -t209, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t1;
