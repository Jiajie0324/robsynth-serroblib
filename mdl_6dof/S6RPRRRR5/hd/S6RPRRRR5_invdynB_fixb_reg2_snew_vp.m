% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 03:34
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 03:32:38
% EndTime: 2019-05-06 03:33:25
% DurationCPUTime: 44.06s
% Computational Cost: add. (394162->919), mult. (945198->1426), div. (0->0), fcn. (765456->12), ass. (0->634)
t1090 = sin(qJ(6));
t1089 = cos(pkin(11));
t1098 = cos(qJ(3));
t1088 = sin(pkin(11));
t1093 = sin(qJ(3));
t1143 = t1088 * t1093;
t1060 = (t1089 * t1098 - t1143) * qJD(1);
t1116 = t1088 * t1098 + t1089 * t1093;
t1061 = t1116 * qJD(1);
t1092 = sin(qJ(4));
t1097 = cos(qJ(4));
t1021 = t1060 * t1092 + t1061 * t1097;
t1138 = qJDD(1) * t1089;
t1058 = qJDD(1) * t1143 - t1098 * t1138;
t1150 = t1061 * qJD(3);
t1030 = -t1058 - t1150;
t1153 = t1060 * qJD(3);
t1197 = t1116 * qJDD(1);
t1032 = t1197 + t1153;
t1120 = -t1097 * t1030 + t1092 * t1032;
t947 = -qJD(4) * t1021 - t1120;
t945 = qJDD(5) - t947;
t1111 = qJDD(6) + t945;
t1087 = qJD(3) + qJD(4);
t1091 = sin(qJ(5));
t1096 = cos(qJ(5));
t1000 = t1021 * t1091 - t1096 * t1087;
t1002 = t1021 * t1096 + t1087 * t1091;
t1095 = cos(qJ(6));
t951 = t1095 * t1000 + t1002 * t1090;
t953 = -t1000 * t1090 + t1002 * t1095;
t883 = t953 * t951;
t1201 = t1111 - t883;
t1212 = t1090 * t1201;
t956 = t1002 * t1000;
t1202 = t945 - t956;
t1211 = t1091 * t1202;
t1135 = qJDD(3) + qJDD(4);
t1019 = -t1097 * t1060 + t1061 * t1092;
t975 = t1021 * t1019;
t1200 = -t975 + t1135;
t1210 = t1092 * t1200;
t1035 = t1060 * t1061;
t1196 = qJDD(3) + t1035;
t1209 = t1093 * t1196;
t1208 = t1095 * t1201;
t1207 = t1096 * t1202;
t1206 = t1097 * t1200;
t1205 = t1098 * t1196;
t1101 = qJD(1) ^ 2;
t1094 = sin(qJ(1));
t1099 = cos(qJ(1));
t1071 = t1094 * g(1) - t1099 * g(2);
t1117 = -qJDD(2) + t1071;
t1188 = pkin(2) * t1089;
t1132 = pkin(1) + t1188;
t1085 = t1088 ^ 2;
t1086 = t1089 ^ 2;
t1139 = t1085 + t1086;
t1025 = t1132 * qJDD(1) + (pkin(7) * t1139 + qJ(2)) * t1101 + t1117;
t1056 = t1060 ^ 2;
t1119 = qJD(3) * pkin(3) - pkin(8) * t1061;
t939 = t1030 * pkin(3) + t1056 * pkin(8) - t1061 * t1119 + t1025;
t1010 = t1087 * t1019;
t1112 = qJD(4) * t1019 - t1030 * t1092 - t1032 * t1097;
t1204 = t1112 + t1010;
t1121 = -t1091 * t1112 - t1096 * t1135;
t897 = -qJD(5) * t1002 - t1121;
t898 = -t1000 * qJD(5) + t1091 * t1135 - t1096 * t1112;
t806 = -qJD(6) * t951 + t1090 * t897 + t1095 * t898;
t1016 = qJD(5) + t1019;
t1012 = qJD(6) + t1016;
t924 = t1012 * t951;
t1203 = t806 - t924;
t968 = t1016 * t1000;
t871 = -t968 - t898;
t870 = -t968 + t898;
t1198 = qJDD(1) * (pkin(7) + qJ(2));
t1122 = t1090 * t898 - t1095 * t897;
t774 = (qJD(6) - t1012) * t953 + t1122;
t1193 = t1101 * t1139;
t867 = (qJD(5) - t1016) * t1002 + t1121;
t912 = (qJD(4) - t1087) * t1021 + t1120;
t949 = t951 ^ 2;
t950 = t953 ^ 2;
t1191 = t1000 ^ 2;
t999 = t1002 ^ 2;
t1011 = t1012 ^ 2;
t1015 = t1016 ^ 2;
t1017 = t1019 ^ 2;
t1018 = t1021 ^ 2;
t1057 = t1061 ^ 2;
t1190 = t1087 ^ 2;
t1187 = pkin(4) * t1092;
t1184 = t1088 * g(3);
t1183 = t1089 * g(3);
t1182 = qJDD(1) * pkin(1);
t1081 = t1086 * t1101;
t1072 = t1099 * g(1) + t1094 * g(2);
t1113 = -0.2e1 * qJD(2) * qJD(1) + t1072;
t1110 = -t1101 * pkin(1) - t1113;
t1106 = -pkin(2) * t1081 - t1184 + (t1110 + t1198) * t1089;
t1107 = -t1183 + (t1101 * t1132 + t1113 - t1198) * t1088;
t1104 = -t1093 * t1106 + t1098 * t1107 + (-t1032 + t1153) * pkin(8) + t1196 * pkin(3);
t959 = t1093 * t1107 + t1098 * t1106;
t904 = -t1056 * pkin(3) + t1030 * pkin(8) - qJD(3) * t1119 + t959;
t827 = t1092 * t1104 + t1097 * t904;
t973 = pkin(4) * t1019 - pkin(9) * t1021;
t800 = -pkin(4) * t1190 + pkin(9) * t1135 - t1019 * t973 + t827;
t810 = t1204 * pkin(9) + (t1021 * t1087 - t947) * pkin(4) - t939;
t731 = t1091 * t800 - t1096 * t810;
t686 = pkin(5) * t1202 + pkin(10) * t871 - t731;
t732 = t1091 * t810 + t1096 * t800;
t960 = pkin(5) * t1016 - pkin(10) * t1002;
t696 = -pkin(5) * t1191 + pkin(10) * t897 - t1016 * t960 + t732;
t639 = t1090 * t686 + t1095 * t696;
t1109 = qJDD(1) * qJ(2) + t1110;
t1108 = qJDD(1) * pkin(7) + t1109;
t1105 = (-t1093 * g(3) - t1098 * (t1101 * t1188 - t1108)) * t1088 + (t1098 * g(3) + t1093 * t1108) * t1089;
t1124 = t1093 * t1081;
t958 = -pkin(2) * t1124 + t1105;
t886 = t1093 * t959 - t1098 * t958;
t1181 = t1088 * t886;
t1180 = t1089 * t886;
t826 = t1092 * t904 - t1097 * t1104;
t799 = -t1135 * pkin(4) - t1190 * pkin(9) + t1021 * t973 + t826;
t735 = -t897 * pkin(5) - pkin(10) * t1191 + t1002 * t960 + t799;
t1179 = t1090 * t735;
t838 = t1111 + t883;
t1178 = t1090 * t838;
t638 = t1090 * t696 - t1095 * t686;
t587 = t1090 * t639 - t1095 * t638;
t1177 = t1091 * t587;
t1176 = t1091 * t799;
t878 = t945 + t956;
t1175 = t1091 * t878;
t1174 = t1092 * t939;
t971 = t975 + t1135;
t1173 = t1092 * t971;
t749 = t1092 * t827 - t1097 * t826;
t1172 = t1093 * t749;
t1171 = t1095 * t735;
t1170 = t1095 * t838;
t1169 = t1096 * t587;
t1168 = t1096 * t799;
t1167 = t1096 * t878;
t1166 = t1097 * t939;
t1165 = t1097 * t971;
t1164 = t1098 * t749;
t1163 = t1012 * t1090;
t1162 = t1012 * t1095;
t1161 = t1016 * t1091;
t1160 = t1016 * t1096;
t1159 = t1025 * t1093;
t1158 = t1025 * t1098;
t1027 = qJDD(3) - t1035;
t1157 = t1027 * t1093;
t1156 = t1027 * t1098;
t1054 = t1101 * qJ(2) + t1117 + t1182;
t1155 = t1054 * t1094;
t1154 = t1054 * t1099;
t1152 = t1060 * t1093;
t1151 = t1060 * t1098;
t1149 = t1061 * t1093;
t1148 = t1061 * t1098;
t1147 = t1085 * t1101;
t1146 = t1087 * t1092;
t1145 = t1087 * t1097;
t1144 = t1088 * t1089;
t1137 = qJDD(1) * t1094;
t1136 = qJDD(1) * t1099;
t1134 = t1092 * t883;
t1133 = t1097 * t883;
t1131 = -pkin(4) * t1097 - pkin(3);
t1130 = t1092 * t956;
t1129 = t1097 * t956;
t1128 = t1094 * t975;
t1127 = t1099 * t975;
t1126 = t1094 * t1035;
t1125 = t1099 * t1035;
t1123 = t1054 + t1182;
t588 = t1090 * t638 + t1095 * t639;
t750 = t1092 * t826 + t1097 * t827;
t887 = t1093 * t958 + t1098 * t959;
t1036 = t1088 * t1109 + t1183;
t1037 = t1089 * t1109 - t1184;
t984 = t1036 * t1088 + t1089 * t1037;
t1045 = -t1071 * t1094 - t1099 * t1072;
t1070 = -t1094 * t1101 + t1136;
t1118 = -pkin(6) * t1070 - g(3) * t1094;
t660 = t1091 * t732 - t1096 * t731;
t661 = t1091 * t731 + t1096 * t732;
t983 = t1036 * t1089 - t1037 * t1088;
t1044 = t1071 * t1099 - t1072 * t1094;
t1069 = t1099 * t1101 + t1137;
t1063 = t1089 * t1193;
t1041 = -t1063 * t1094 + t1089 * t1136;
t1115 = t1063 * t1099 + t1089 * t1137;
t1100 = qJD(3) ^ 2;
t1080 = t1086 * qJDD(1);
t1079 = t1085 * qJDD(1);
t1068 = t1081 - t1147;
t1067 = t1081 + t1147;
t1066 = t1080 - t1079;
t1065 = t1080 + t1079;
t1062 = t1088 * t1193;
t1055 = -pkin(6) * t1069 + g(3) * t1099;
t1050 = -t1057 - t1100;
t1049 = -t1057 + t1100;
t1048 = t1056 - t1100;
t1047 = t1070 * t1144;
t1046 = t1069 * t1144;
t1042 = t1062 * t1099 + t1088 * t1137;
t1040 = t1062 * t1094 - t1088 * t1136;
t1039 = t1065 * t1099 - t1067 * t1094;
t1038 = t1065 * t1094 + t1067 * t1099;
t1034 = -t1057 + t1056;
t1031 = t1197 + 0.2e1 * t1153;
t1029 = t1058 + 0.2e1 * t1150;
t1024 = -t1100 - t1056;
t1014 = (t1149 + t1151) * qJD(3);
t1013 = (-t1148 + t1152) * qJD(3);
t1008 = -t1018 + t1190;
t1007 = t1017 - t1190;
t1005 = -t1018 - t1190;
t1003 = -t1056 - t1057;
t994 = -qJD(3) * t1149 + t1032 * t1098;
t993 = qJD(3) * t1148 + t1032 * t1093;
t992 = -qJD(3) * t1151 - t1030 * t1093;
t991 = -qJD(3) * t1152 + t1030 * t1098;
t990 = -t1050 * t1093 - t1156;
t989 = -t1049 * t1093 + t1205;
t988 = t1048 * t1098 - t1157;
t987 = t1050 * t1098 - t1157;
t986 = t1049 * t1098 + t1209;
t985 = t1048 * t1093 + t1156;
t981 = -t1029 * t1098 - t1031 * t1093;
t980 = -t1058 * t1098 + t1093 * t1197;
t979 = -t1029 * t1093 + t1031 * t1098;
t978 = -t1058 * t1093 - t1098 * t1197;
t977 = t1024 * t1098 - t1209;
t976 = t1024 * t1093 + t1205;
t974 = -t1018 + t1017;
t969 = -t1190 - t1017;
t967 = -t1013 * t1088 + t1014 * t1089;
t966 = -t999 + t1015;
t965 = -t1015 + t1191;
t964 = (-t1019 * t1097 + t1021 * t1092) * t1087;
t963 = (-t1019 * t1092 - t1021 * t1097) * t1087;
t962 = t1099 * t984 - t1155;
t961 = t1094 * t984 + t1154;
t955 = -t999 + t1191;
t954 = -pkin(7) * t987 - t1158;
t946 = -pkin(7) * t976 - t1159;
t944 = -t1017 - t1018;
t941 = -t1088 * t993 + t1089 * t994;
t940 = -t1088 * t991 + t1089 * t992;
t938 = -t1088 * t987 + t1089 * t990;
t937 = -t1088 * t986 + t1089 * t989;
t936 = -t1088 * t985 + t1089 * t988;
t935 = t1088 * t990 + t1089 * t987;
t934 = -t999 - t1015;
t933 = t1007 * t1097 - t1173;
t932 = -t1008 * t1092 + t1206;
t931 = t1007 * t1092 + t1165;
t930 = t1008 * t1097 + t1210;
t929 = -pkin(2) * t1031 + pkin(7) * t990 - t1159;
t928 = -t1005 * t1092 - t1165;
t927 = t1005 * t1097 - t1173;
t926 = -t1015 - t1191;
t923 = -t950 + t1011;
t922 = t949 - t1011;
t921 = t999 + t1191;
t920 = -pkin(2) * t1029 + pkin(7) * t977 + t1158;
t919 = -t1088 * t979 + t1089 * t981;
t918 = -t1088 * t978 + t1089 * t980;
t917 = t1088 * t980 + t1089 * t978;
t916 = -t1010 + t1112;
t911 = (qJD(4) + t1087) * t1021 + t1120;
t910 = -t1088 * t976 + t1089 * t977;
t909 = t1088 * t977 + t1089 * t976;
t908 = -t1021 * t1146 - t1097 * t1112;
t907 = t1021 * t1145 - t1092 * t1112;
t906 = t1019 * t1145 - t1092 * t947;
t905 = t1019 * t1146 + t1097 * t947;
t903 = t1031 * t1094 + t1099 * t938;
t902 = -t1031 * t1099 + t1094 * t938;
t901 = t1097 * t969 - t1210;
t900 = t1092 * t969 + t1206;
t894 = (-t1000 * t1096 + t1002 * t1091) * t1016;
t893 = (t1000 * t1091 + t1002 * t1096) * t1016;
t890 = -t1093 * t963 + t1098 * t964;
t889 = t1093 * t964 + t1098 * t963;
t888 = -t950 - t1011;
t885 = t1029 * t1094 + t1099 * t910;
t884 = -t1029 * t1099 + t1094 * t910;
t882 = -t950 + t949;
t881 = t1003 * t1094 + t1099 * t918;
t880 = -t1003 * t1099 + t1094 * t918;
t876 = pkin(2) * t1025 + pkin(7) * t887;
t875 = -pkin(1) * t917 - pkin(2) * t978;
t874 = -t1011 - t949;
t873 = -pkin(8) * t927 - t1166;
t868 = (-qJD(5) - t1016) * t1002 - t1121;
t866 = -pkin(7) * t978 - t886;
t865 = -t1093 * t931 + t1098 * t933;
t864 = -t1093 * t930 + t1098 * t932;
t863 = t1093 * t933 + t1098 * t931;
t862 = t1093 * t932 + t1098 * t930;
t861 = -t1002 * t1161 + t1096 * t898;
t860 = -t1002 * t1160 - t1091 * t898;
t859 = t1000 * t1160 - t1091 * t897;
t858 = -t1000 * t1161 - t1096 * t897;
t857 = -t1093 * t927 + t1098 * t928;
t856 = t1093 * t928 + t1098 * t927;
t855 = -pkin(1) * t935 - pkin(2) * t987 + t959;
t854 = (t1090 * t953 - t1095 * t951) * t1012;
t853 = (-t1090 * t951 - t1095 * t953) * t1012;
t852 = -pkin(8) * t900 - t1174;
t851 = t1092 * t945 + t1097 * t894;
t850 = t1092 * t894 - t1097 * t945;
t849 = t1096 * t965 - t1175;
t848 = -t1091 * t966 + t1207;
t847 = -t1091 * t965 - t1167;
t846 = -t1096 * t966 - t1211;
t845 = -t949 - t950;
t844 = -pkin(2) * t1003 + pkin(7) * t980 + t887;
t843 = -t1092 * t916 - t1097 * t912;
t842 = t1092 * t1204 - t1097 * t911;
t841 = -t1092 * t912 + t1097 * t916;
t840 = -t1092 * t911 - t1097 * t1204;
t836 = -pkin(1) * t909 + (-t976 - t1124) * pkin(2) + t1105;
t835 = -t1093 * t907 + t1098 * t908;
t834 = -t1093 * t905 + t1098 * t906;
t833 = t1093 * t908 + t1098 * t907;
t832 = t1093 * t906 + t1098 * t905;
t831 = -t1093 * t900 + t1098 * t901;
t830 = t1093 * t901 + t1098 * t900;
t829 = -t1091 * t934 - t1167;
t828 = t1096 * t934 - t1175;
t825 = t1096 * t926 - t1211;
t824 = t1091 * t926 + t1207;
t822 = -qJ(2) * t935 - t1088 * t929 + t1089 * t954;
t821 = t1097 * t861 + t1130;
t820 = t1097 * t859 - t1130;
t819 = t1092 * t861 - t1129;
t818 = t1092 * t859 + t1129;
t817 = -t1088 * t889 + t1089 * t890;
t816 = t1089 * t887 - t1181;
t815 = t1088 * t887 + t1180;
t814 = pkin(3) * t1204 + pkin(8) * t928 - t1174;
t813 = -qJ(2) * t909 - t1088 * t920 + t1089 * t946;
t812 = -t1025 * t1094 + t1099 * t816;
t811 = t1025 * t1099 + t1094 * t816;
t807 = -pkin(3) * t911 + pkin(8) * t901 + t1166;
t805 = -qJD(6) * t953 - t1122;
t804 = t1095 * t922 - t1178;
t803 = -t1090 * t923 + t1208;
t802 = t1090 * t922 + t1170;
t801 = t1095 * t923 + t1212;
t797 = -t1090 * t888 - t1170;
t796 = t1095 * t888 - t1178;
t795 = -t1091 * t871 - t1096 * t867;
t794 = -t1091 * t870 + t1096 * t868;
t793 = -t1091 * t867 + t1096 * t871;
t792 = -t1091 * t868 - t1096 * t870;
t791 = -t1088 * t863 + t1089 * t865;
t790 = -t1088 * t862 + t1089 * t864;
t789 = -t1088 * t856 + t1089 * t857;
t788 = t1088 * t857 + t1089 * t856;
t787 = -t1092 * t867 + t1097 * t849;
t786 = -t1092 * t871 + t1097 * t848;
t785 = t1092 * t849 + t1097 * t867;
t784 = t1092 * t848 + t1097 * t871;
t783 = t1095 * t874 - t1212;
t782 = t1090 * t874 + t1208;
t781 = -pkin(1) * t815 - pkin(2) * t886;
t780 = -t1091 * t853 + t1096 * t854;
t779 = -t1091 * t854 - t1096 * t853;
t778 = -t806 - t924;
t773 = (qJD(6) + t1012) * t953 + t1122;
t772 = t1095 * t806 - t1163 * t953;
t771 = t1090 * t806 + t1162 * t953;
t770 = -t1090 * t805 + t1162 * t951;
t769 = t1095 * t805 + t1163 * t951;
t768 = -t1093 * t850 + t1098 * t851;
t767 = t1093 * t851 + t1098 * t850;
t766 = t1092 * t870 + t1097 * t829;
t765 = t1092 * t829 - t1097 * t870;
t764 = -t1092 * t868 + t1097 * t825;
t763 = t1092 * t825 + t1097 * t868;
t762 = -t1092 * t955 + t1097 * t794;
t761 = t1092 * t794 + t1097 * t955;
t760 = -t1093 * t841 + t1098 * t843;
t759 = -t1093 * t840 + t1098 * t842;
t758 = t1093 * t843 + t1098 * t841;
t757 = t1093 * t842 + t1098 * t840;
t756 = -t1088 * t833 + t1089 * t835;
t755 = -t1088 * t832 + t1089 * t834;
t754 = -t1092 * t921 + t1097 * t795;
t753 = t1092 * t795 + t1097 * t921;
t752 = -t1088 * t830 + t1089 * t831;
t751 = t1088 * t831 + t1089 * t830;
t748 = -t1094 * t1204 + t1099 * t789;
t747 = t1094 * t789 + t1099 * t1204;
t746 = t1092 * t1111 + t1097 * t780;
t745 = t1092 * t780 - t1097 * t1111;
t744 = -qJ(2) * t917 - t1088 * t844 + t1089 * t866;
t743 = -t1093 * t819 + t1098 * t821;
t742 = -t1093 * t818 + t1098 * t820;
t741 = t1093 * t821 + t1098 * t819;
t740 = t1093 * t820 + t1098 * t818;
t739 = -pkin(7) * t1180 - qJ(2) * t815 - t1088 * t876;
t738 = -pkin(9) * t828 + t1168;
t737 = pkin(3) * t939 + pkin(8) * t750;
t736 = -pkin(9) * t824 + t1176;
t734 = t1094 * t911 + t1099 * t752;
t733 = t1094 * t752 - t1099 * t911;
t730 = -t1091 * t802 + t1096 * t804;
t729 = -t1091 * t801 + t1096 * t803;
t728 = -t1091 * t804 - t1096 * t802;
t727 = -t1091 * t803 - t1096 * t801;
t726 = -pkin(7) * t856 - t1093 * t814 + t1098 * t873;
t725 = -pkin(8) * t841 - t749;
t724 = -t1091 * t796 + t1096 * t797;
t723 = t1091 * t797 + t1096 * t796;
t722 = -pkin(7) * t830 - t1093 * t807 + t1098 * t852;
t721 = pkin(2) * t1204 + pkin(7) * t857 + t1093 * t873 + t1098 * t814;
t720 = -pkin(3) * t944 + pkin(8) * t843 + t750;
t719 = -t1093 * t785 + t1098 * t787;
t718 = -t1093 * t784 + t1098 * t786;
t717 = t1093 * t787 + t1098 * t785;
t716 = t1093 * t786 + t1098 * t784;
t715 = -t1091 * t782 + t1096 * t783;
t714 = t1091 * t783 + t1096 * t782;
t713 = -t1090 * t778 - t1095 * t774;
t712 = -t1090 * t1203 - t1095 * t773;
t711 = -t1090 * t774 + t1095 * t778;
t710 = -t1090 * t773 + t1095 * t1203;
t709 = -t1091 * t771 + t1096 * t772;
t708 = -t1091 * t769 + t1096 * t770;
t707 = -t1091 * t772 - t1096 * t771;
t706 = -t1091 * t770 - t1096 * t769;
t705 = -t1088 * t767 + t1089 * t768;
t704 = -t1093 * t765 + t1098 * t766;
t703 = t1093 * t766 + t1098 * t765;
t702 = -pkin(2) * t911 + pkin(7) * t831 + t1093 * t852 + t1098 * t807;
t701 = -t1093 * t763 + t1098 * t764;
t700 = t1093 * t764 + t1098 * t763;
t699 = -pkin(4) * t828 + t732;
t698 = -t1093 * t761 + t1098 * t762;
t697 = t1093 * t762 + t1098 * t761;
t695 = -pkin(4) * t824 + t731;
t693 = -t1088 * t758 + t1089 * t760;
t692 = -t1088 * t757 + t1089 * t759;
t691 = t1088 * t760 + t1089 * t758;
t690 = -pkin(1) * t788 - pkin(2) * t856 - pkin(3) * t927 + t827;
t689 = -pkin(10) * t796 + t1171;
t688 = -t1093 * t753 + t1098 * t754;
t687 = t1093 * t754 + t1098 * t753;
t683 = t1094 * t944 + t1099 * t693;
t682 = t1094 * t693 - t1099 * t944;
t681 = -pkin(10) * t782 + t1179;
t680 = t1098 * t750 - t1172;
t679 = t1093 * t750 + t1164;
t678 = t1097 * t709 + t1134;
t677 = t1097 * t708 - t1134;
t676 = t1092 * t709 - t1133;
t675 = t1092 * t708 + t1133;
t674 = -t1093 * t745 + t1098 * t746;
t673 = t1093 * t746 + t1098 * t745;
t672 = -t1088 * t741 + t1089 * t743;
t671 = -t1088 * t740 + t1089 * t742;
t670 = -pkin(1) * t751 - pkin(2) * t830 - pkin(3) * t900 + t826;
t669 = -t1092 * t774 + t1097 * t730;
t668 = -t1092 * t778 + t1097 * t729;
t667 = t1092 * t730 + t1097 * t774;
t666 = t1092 * t729 + t1097 * t778;
t665 = t1092 * t1203 + t1097 * t724;
t664 = t1092 * t724 - t1097 * t1203;
t663 = t1092 * t773 + t1097 * t715;
t662 = t1092 * t715 - t1097 * t773;
t659 = -pkin(5) * t1203 + pkin(10) * t797 + t1179;
t658 = -pkin(5) * t773 + pkin(10) * t783 - t1171;
t657 = -pkin(1) * t691 - pkin(2) * t758 - pkin(3) * t841;
t656 = -t1088 * t717 + t1089 * t719;
t655 = -t1088 * t716 + t1089 * t718;
t654 = t1092 * t799 + t1097 * t661;
t653 = t1092 * t661 - t1097 * t799;
t652 = -pkin(9) * t793 - t660;
t651 = -t1091 * t711 + t1096 * t713;
t650 = -t1091 * t710 + t1096 * t712;
t649 = t1091 * t713 + t1096 * t711;
t648 = -t1091 * t712 - t1096 * t710;
t647 = -t1088 * t703 + t1089 * t704;
t646 = t1088 * t704 + t1089 * t703;
t645 = -t1088 * t700 + t1089 * t701;
t644 = t1088 * t701 + t1089 * t700;
t643 = -t1088 * t697 + t1089 * t698;
t642 = -qJ(2) * t788 - t1088 * t721 + t1089 * t726;
t641 = -t1092 * t882 + t1097 * t650;
t640 = t1092 * t650 + t1097 * t882;
t636 = -pkin(8) * t765 - t1092 * t699 + t1097 * t738;
t635 = -pkin(8) * t763 - t1092 * t695 + t1097 * t736;
t634 = t1092 * t845 + t1097 * t651;
t633 = -t1088 * t687 + t1089 * t688;
t632 = t1092 * t651 - t1097 * t845;
t631 = t1088 * t688 + t1089 * t687;
t630 = -pkin(7) * t758 - t1093 * t720 + t1098 * t725;
t629 = t1094 * t828 + t1099 * t647;
t628 = t1094 * t647 - t1099 * t828;
t627 = -t1088 * t679 + t1089 * t680;
t626 = t1088 * t680 + t1089 * t679;
t625 = t1094 * t824 + t1099 * t645;
t624 = t1094 * t645 - t1099 * t824;
t623 = -t1093 * t676 + t1098 * t678;
t622 = -t1093 * t675 + t1098 * t677;
t621 = t1093 * t678 + t1098 * t676;
t620 = t1093 * t677 + t1098 * t675;
t619 = -t1088 * t673 + t1089 * t674;
t618 = -pkin(2) * t944 + pkin(7) * t760 + t1093 * t725 + t1098 * t720;
t617 = -pkin(7) * t679 - pkin(8) * t1164 - t1093 * t737;
t616 = -t1094 * t939 + t1099 * t627;
t615 = t1094 * t627 + t1099 * t939;
t614 = -qJ(2) * t751 - t1088 * t702 + t1089 * t722;
t613 = -pkin(3) * t828 + pkin(8) * t766 + t1092 * t738 + t1097 * t699;
t612 = -pkin(3) * t824 + pkin(8) * t764 + t1092 * t736 + t1097 * t695;
t611 = pkin(2) * t939 + pkin(7) * t680 - pkin(8) * t1172 + t1098 * t737;
t610 = -t1093 * t667 + t1098 * t669;
t609 = -t1093 * t666 + t1098 * t668;
t608 = t1093 * t669 + t1098 * t667;
t607 = t1093 * t668 + t1098 * t666;
t606 = t1094 * t793 + t1099 * t633;
t605 = t1094 * t633 - t1099 * t793;
t604 = -t1093 * t664 + t1098 * t665;
t603 = t1093 * t665 + t1098 * t664;
t602 = -t1093 * t662 + t1098 * t663;
t601 = t1093 * t663 + t1098 * t662;
t600 = -pkin(8) * t753 + t1097 * t652 + t1187 * t793;
t599 = -pkin(4) * t649 - pkin(5) * t711;
t598 = pkin(8) * t754 + t1092 * t652 + t1131 * t793;
t597 = -pkin(4) * t723 - pkin(5) * t796 + t639;
t596 = -pkin(9) * t723 - t1091 * t659 + t1096 * t689;
t595 = -pkin(4) * t714 - pkin(5) * t782 + t638;
t594 = -pkin(9) * t714 - t1091 * t658 + t1096 * t681;
t593 = -t1093 * t653 + t1098 * t654;
t592 = t1093 * t654 + t1098 * t653;
t591 = -pkin(1) * t626 - pkin(2) * t679 - pkin(3) * t749;
t590 = -t1093 * t640 + t1098 * t641;
t589 = t1093 * t641 + t1098 * t640;
t586 = -pkin(1) * t646 - pkin(2) * t703 - pkin(3) * t765 + pkin(4) * t870 - pkin(9) * t829 - t1176;
t585 = -pkin(1) * t644 - pkin(2) * t700 - pkin(3) * t763 - pkin(4) * t868 - pkin(9) * t825 + t1168;
t584 = -t1093 * t632 + t1098 * t634;
t583 = t1093 * t634 + t1098 * t632;
t582 = -t1088 * t621 + t1089 * t623;
t581 = -t1088 * t620 + t1089 * t622;
t580 = -pkin(8) * t653 + (-pkin(9) * t1097 + t1187) * t660;
t579 = -pkin(5) * t735 + pkin(10) * t588;
t578 = -t1088 * t608 + t1089 * t610;
t577 = -t1088 * t607 + t1089 * t609;
t576 = -pkin(10) * t711 - t587;
t575 = -t1088 * t603 + t1089 * t604;
t574 = t1088 * t604 + t1089 * t603;
t573 = -pkin(5) * t845 + pkin(10) * t713 + t588;
t572 = -pkin(7) * t703 - t1093 * t613 + t1098 * t636;
t571 = -qJ(2) * t691 - t1088 * t618 + t1089 * t630;
t570 = -t1088 * t601 + t1089 * t602;
t569 = t1088 * t602 + t1089 * t601;
t568 = -pkin(7) * t700 - t1093 * t612 + t1098 * t635;
t567 = -pkin(1) * t631 - pkin(2) * t687 - pkin(3) * t753 - pkin(4) * t921 - pkin(9) * t795 - t661;
t566 = -pkin(2) * t828 + pkin(7) * t704 + t1093 * t636 + t1098 * t613;
t565 = -pkin(2) * t824 + pkin(7) * t701 + t1093 * t635 + t1098 * t612;
t564 = t1094 * t723 + t1099 * t575;
t563 = t1094 * t575 - t1099 * t723;
t562 = pkin(8) * t654 + (-pkin(9) * t1092 + t1131) * t660;
t561 = t1094 * t714 + t1099 * t570;
t560 = t1094 * t570 - t1099 * t714;
t559 = -qJ(2) * t626 - t1088 * t611 + t1089 * t617;
t558 = -pkin(7) * t687 - t1093 * t598 + t1098 * t600;
t557 = -t1088 * t592 + t1089 * t593;
t556 = t1088 * t593 + t1089 * t592;
t555 = -pkin(2) * t793 + pkin(7) * t688 + t1093 * t600 + t1098 * t598;
t554 = -pkin(8) * t664 - t1092 * t597 + t1097 * t596;
t553 = -t1088 * t589 + t1089 * t590;
t552 = t1096 * t588 - t1177;
t551 = t1091 * t588 + t1169;
t550 = -pkin(8) * t662 - t1092 * t595 + t1097 * t594;
t549 = -t1088 * t583 + t1089 * t584;
t548 = t1088 * t584 + t1089 * t583;
t547 = t1094 * t660 + t1099 * t557;
t546 = t1094 * t557 - t1099 * t660;
t545 = -pkin(3) * t723 + pkin(8) * t665 + t1092 * t596 + t1097 * t597;
t544 = t1092 * t735 + t1097 * t552;
t543 = t1092 * t552 - t1097 * t735;
t542 = -pkin(3) * t714 + pkin(8) * t663 + t1092 * t594 + t1097 * t595;
t541 = t1094 * t649 + t1099 * t549;
t540 = t1094 * t549 - t1099 * t649;
t539 = -pkin(9) * t649 - t1091 * t573 + t1096 * t576;
t538 = -pkin(4) * t551 - pkin(5) * t587;
t537 = -pkin(1) * t574 - pkin(2) * t603 - pkin(3) * t664 + pkin(4) * t1203 - pkin(9) * t724 - t1091 * t689 - t1096 * t659;
t536 = -qJ(2) * t646 - t1088 * t566 + t1089 * t572;
t535 = -qJ(2) * t644 - t1088 * t565 + t1089 * t568;
t534 = -pkin(1) * t569 - pkin(2) * t601 - pkin(3) * t662 + pkin(4) * t773 - pkin(9) * t715 - t1091 * t681 - t1096 * t658;
t533 = -pkin(7) * t592 - t1093 * t562 + t1098 * t580;
t532 = -pkin(1) * t556 - pkin(2) * t592 - pkin(3) * t653 + pkin(4) * t799 - pkin(9) * t661;
t531 = -pkin(2) * t660 + pkin(7) * t593 + t1093 * t580 + t1098 * t562;
t530 = -qJ(2) * t631 - t1088 * t555 + t1089 * t558;
t529 = -pkin(8) * t632 - t1092 * t599 + t1097 * t539;
t528 = -pkin(9) * t551 - pkin(10) * t1169 - t1091 * t579;
t527 = -t1093 * t543 + t1098 * t544;
t526 = t1093 * t544 + t1098 * t543;
t525 = -pkin(3) * t649 + pkin(8) * t634 + t1092 * t539 + t1097 * t599;
t524 = -pkin(7) * t603 - t1093 * t545 + t1098 * t554;
t523 = -pkin(2) * t723 + pkin(7) * t604 + t1093 * t554 + t1098 * t545;
t522 = -pkin(7) * t601 - t1093 * t542 + t1098 * t550;
t521 = -pkin(2) * t714 + pkin(7) * t602 + t1093 * t550 + t1098 * t542;
t520 = -pkin(1) * t548 - pkin(2) * t583 - pkin(3) * t632 + pkin(4) * t845 - pkin(9) * t651 - t1091 * t576 - t1096 * t573;
t519 = -t1088 * t526 + t1089 * t527;
t518 = t1088 * t527 + t1089 * t526;
t517 = -qJ(2) * t556 - t1088 * t531 + t1089 * t533;
t516 = -pkin(8) * t543 - t1092 * t538 + t1097 * t528;
t515 = -pkin(7) * t583 - t1093 * t525 + t1098 * t529;
t514 = -pkin(2) * t649 + pkin(7) * t584 + t1093 * t529 + t1098 * t525;
t513 = t1094 * t551 + t1099 * t519;
t512 = t1094 * t519 - t1099 * t551;
t511 = -qJ(2) * t574 - t1088 * t523 + t1089 * t524;
t510 = -pkin(3) * t551 + pkin(8) * t544 + t1092 * t528 + t1097 * t538;
t509 = -qJ(2) * t569 - t1088 * t521 + t1089 * t522;
t508 = -pkin(1) * t518 - pkin(2) * t526 - pkin(3) * t543 + pkin(4) * t735 - pkin(9) * t552 + pkin(10) * t1177 - t1096 * t579;
t507 = -qJ(2) * t548 - t1088 * t514 + t1089 * t515;
t506 = -pkin(7) * t526 - t1093 * t510 + t1098 * t516;
t505 = -pkin(2) * t551 + pkin(7) * t527 + t1093 * t516 + t1098 * t510;
t504 = -qJ(2) * t518 - t1088 * t505 + t1089 * t506;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1069, -t1070, 0, t1045, 0, 0, 0, 0, 0, 0, -t1115, t1042, t1039, t962, 0, 0, 0, 0, 0, 0, t885, t903, t881, t812, 0, 0, 0, 0, 0, 0, t734, t748, t683, t616, 0, 0, 0, 0, 0, 0, t625, t629, t606, t547, 0, 0, 0, 0, 0, 0, t561, t564, t541, t513; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1070, -t1069, 0, t1044, 0, 0, 0, 0, 0, 0, t1041, t1040, t1038, t961, 0, 0, 0, 0, 0, 0, t884, t902, t880, t811, 0, 0, 0, 0, 0, 0, t733, t747, t682, t615, 0, 0, 0, 0, 0, 0, t624, t628, t605, t546, 0, 0, 0, 0, 0, 0, t560, t563, t540, t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t983, 0, 0, 0, 0, 0, 0, t909, t935, t917, t815, 0, 0, 0, 0, 0, 0, t751, t788, t691, t626, 0, 0, 0, 0, 0, 0, t644, t646, t631, t556, 0, 0, 0, 0, 0, 0, t569, t574, t548, t518; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1070, 0, -t1069, 0, t1118, -t1055, -t1044, -pkin(6) * t1044, t1047, t1066 * t1099 - t1068 * t1094, t1042, -t1047, t1115, 0, -pkin(6) * t1041 - t1036 * t1094 - t1088 * t1154, -pkin(6) * t1040 - t1037 * t1094 - t1089 * t1154, -pkin(6) * t1038 + t1099 * t983, -pkin(6) * t961 - (pkin(1) * t1094 - qJ(2) * t1099) * t983, t1099 * t941 - t1126, -t1034 * t1094 + t1099 * t919, t1094 * t1197 + t1099 * t937, t1099 * t940 + t1126, -t1058 * t1094 + t1099 * t936, qJDD(3) * t1094 + t1099 * t967, -pkin(6) * t884 - t1094 * t836 + t1099 * t813, -pkin(6) * t902 - t1094 * t855 + t1099 * t822, -pkin(6) * t880 - t1094 * t875 + t1099 * t744, -pkin(6) * t811 - t1094 * t781 + t1099 * t739, t1099 * t756 + t1128, -t1094 * t974 + t1099 * t692, -t1094 * t916 + t1099 * t790, t1099 * t755 - t1128, -t1094 * t912 + t1099 * t791, t1094 * t1135 + t1099 * t817, -pkin(6) * t733 - t1094 * t670 + t1099 * t614, -pkin(6) * t747 - t1094 * t690 + t1099 * t642, -pkin(6) * t682 - t1094 * t657 + t1099 * t571, -pkin(6) * t615 - t1094 * t591 + t1099 * t559, -t1094 * t860 + t1099 * t672, -t1094 * t792 + t1099 * t643, -t1094 * t846 + t1099 * t655, -t1094 * t858 + t1099 * t671, -t1094 * t847 + t1099 * t656, -t1094 * t893 + t1099 * t705, -pkin(6) * t624 - t1094 * t585 + t1099 * t535, -pkin(6) * t628 - t1094 * t586 + t1099 * t536, -pkin(6) * t605 - t1094 * t567 + t1099 * t530, -pkin(6) * t546 - t1094 * t532 + t1099 * t517, -t1094 * t707 + t1099 * t582, -t1094 * t648 + t1099 * t553, -t1094 * t727 + t1099 * t577, -t1094 * t706 + t1099 * t581, -t1094 * t728 + t1099 * t578, -t1094 * t779 + t1099 * t619, -pkin(6) * t560 - t1094 * t534 + t1099 * t509, -pkin(6) * t563 - t1094 * t537 + t1099 * t511, -pkin(6) * t540 - t1094 * t520 + t1099 * t507, -pkin(6) * t512 - t1094 * t508 + t1099 * t504; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1069, 0, t1070, 0, t1055, t1118, t1045, pkin(6) * t1045, t1046, t1066 * t1094 + t1068 * t1099, t1040, -t1046, -t1041, 0, -pkin(6) * t1115 + t1036 * t1099 - t1088 * t1155, pkin(6) * t1042 + t1037 * t1099 - t1089 * t1155, pkin(6) * t1039 + t1094 * t983, pkin(6) * t962 - (-pkin(1) * t1099 - qJ(2) * t1094) * t983, t1094 * t941 + t1125, t1034 * t1099 + t1094 * t919, t1094 * t937 - t1099 * t1197, t1094 * t940 - t1125, t1058 * t1099 + t1094 * t936, -qJDD(3) * t1099 + t1094 * t967, pkin(6) * t885 + t1094 * t813 + t1099 * t836, pkin(6) * t903 + t1094 * t822 + t1099 * t855, pkin(6) * t881 + t1094 * t744 + t1099 * t875, pkin(6) * t812 + t1094 * t739 + t1099 * t781, t1094 * t756 - t1127, t1094 * t692 + t1099 * t974, t1094 * t790 + t1099 * t916, t1094 * t755 + t1127, t1094 * t791 + t1099 * t912, t1094 * t817 - t1099 * t1135, pkin(6) * t734 + t1094 * t614 + t1099 * t670, pkin(6) * t748 + t1094 * t642 + t1099 * t690, pkin(6) * t683 + t1094 * t571 + t1099 * t657, pkin(6) * t616 + t1094 * t559 + t1099 * t591, t1094 * t672 + t1099 * t860, t1094 * t643 + t1099 * t792, t1094 * t655 + t1099 * t846, t1094 * t671 + t1099 * t858, t1094 * t656 + t1099 * t847, t1094 * t705 + t1099 * t893, pkin(6) * t625 + t1094 * t535 + t1099 * t585, pkin(6) * t629 + t1094 * t536 + t1099 * t586, pkin(6) * t606 + t1094 * t530 + t1099 * t567, pkin(6) * t547 + t1094 * t517 + t1099 * t532, t1094 * t582 + t1099 * t707, t1094 * t553 + t1099 * t648, t1094 * t577 + t1099 * t727, t1094 * t581 + t1099 * t706, t1094 * t578 + t1099 * t728, t1094 * t619 + t1099 * t779, pkin(6) * t561 + t1094 * t509 + t1099 * t534, pkin(6) * t564 + t1094 * t511 + t1099 * t537, pkin(6) * t541 + t1094 * t507 + t1099 * t520, pkin(6) * t513 + t1094 * t504 + t1099 * t508; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1071, t1072, 0, 0, t1079, 0.2e1 * t1088 * t1138, 0, t1080, 0, 0, -qJ(2) * t1063 + t1089 * t1123, qJ(2) * t1062 - t1088 * t1123, pkin(1) * t1067 + qJ(2) * t1065 + t984, pkin(1) * t1054 + qJ(2) * t984, t1088 * t994 + t1089 * t993, t1088 * t981 + t1089 * t979, t1088 * t989 + t1089 * t986, t1088 * t992 + t1089 * t991, t1088 * t988 + t1089 * t985, t1013 * t1089 + t1014 * t1088, -pkin(1) * t1029 + qJ(2) * t910 + t1088 * t946 + t1089 * t920, -pkin(1) * t1031 + qJ(2) * t938 + t1088 * t954 + t1089 * t929, -pkin(1) * t1003 + qJ(2) * t918 + t1088 * t866 + t1089 * t844, pkin(1) * t1025 - pkin(7) * t1181 + qJ(2) * t816 + t1089 * t876, t1088 * t835 + t1089 * t833, t1088 * t759 + t1089 * t757, t1088 * t864 + t1089 * t862, t1088 * t834 + t1089 * t832, t1088 * t865 + t1089 * t863, t1088 * t890 + t1089 * t889, -pkin(1) * t911 + qJ(2) * t752 + t1088 * t722 + t1089 * t702, pkin(1) * t1204 + qJ(2) * t789 + t1088 * t726 + t1089 * t721, -pkin(1) * t944 + qJ(2) * t693 + t1088 * t630 + t1089 * t618, pkin(1) * t939 + qJ(2) * t627 + t1088 * t617 + t1089 * t611, t1088 * t743 + t1089 * t741, t1088 * t698 + t1089 * t697, t1088 * t718 + t1089 * t716, t1088 * t742 + t1089 * t740, t1088 * t719 + t1089 * t717, t1088 * t768 + t1089 * t767, -pkin(1) * t824 + qJ(2) * t645 + t1088 * t568 + t1089 * t565, -pkin(1) * t828 + qJ(2) * t647 + t1088 * t572 + t1089 * t566, -pkin(1) * t793 + qJ(2) * t633 + t1088 * t558 + t1089 * t555, -pkin(1) * t660 + qJ(2) * t557 + t1088 * t533 + t1089 * t531, t1088 * t623 + t1089 * t621, t1088 * t590 + t1089 * t589, t1088 * t609 + t1089 * t607, t1088 * t622 + t1089 * t620, t1088 * t610 + t1089 * t608, t1088 * t674 + t1089 * t673, -pkin(1) * t714 + qJ(2) * t570 + t1088 * t522 + t1089 * t521, -pkin(1) * t723 + qJ(2) * t575 + t1088 * t524 + t1089 * t523, -pkin(1) * t649 + qJ(2) * t549 + t1088 * t515 + t1089 * t514, -pkin(1) * t551 + qJ(2) * t519 + t1088 * t506 + t1089 * t505;];
tauB_reg  = t1;
