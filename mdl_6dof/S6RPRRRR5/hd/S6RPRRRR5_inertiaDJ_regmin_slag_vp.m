% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRRRR5_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR5_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRR5_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR5_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 07:09:50
% EndTime: 2019-03-09 07:09:56
% DurationCPUTime: 1.93s
% Computational Cost: add. (4445->220), mult. (9936->357), div. (0->0), fcn. (10711->10), ass. (0->162)
t114 = sin(pkin(11));
t115 = cos(pkin(11));
t119 = sin(qJ(3));
t122 = cos(qJ(3));
t83 = t122 * t114 + t119 * t115;
t118 = sin(qJ(4));
t132 = t119 * t114 - t122 * t115;
t198 = cos(qJ(4));
t68 = -t118 * t132 + t198 * t83;
t117 = sin(qJ(5));
t120 = cos(qJ(6));
t116 = sin(qJ(6));
t121 = cos(qJ(5));
t175 = t116 * t121;
t86 = t120 * t117 + t175;
t46 = t86 * t68;
t108 = qJD(5) * t121;
t158 = t68 * t108;
t177 = t83 * qJD(3);
t67 = t118 * t83 + t198 * t132;
t80 = t132 * qJD(3);
t48 = -t67 * qJD(4) - t118 * t177 - t198 * t80;
t182 = t117 * t48;
t204 = t158 + t182;
t113 = t121 ^ 2;
t171 = t117 ^ 2 - t113;
t148 = t171 * qJD(5);
t166 = qJD(5) + qJD(6);
t194 = pkin(7) + qJ(2);
t92 = t194 * t114;
t93 = t194 * t115;
t136 = t119 * t93 + t122 * t92;
t203 = t132 * qJD(2) + t136 * qJD(3);
t103 = -t115 * pkin(2) - pkin(1);
t202 = 0.2e1 * t103;
t201 = -pkin(9) - pkin(10);
t49 = t68 * qJD(4) - t118 * t80 + t198 * t177;
t200 = t49 * pkin(5);
t199 = t67 * pkin(5);
t169 = qJD(5) * t117;
t124 = -t177 * pkin(8) - t203;
t135 = t119 * t92 - t122 * t93;
t126 = -t83 * qJD(2) + t135 * qJD(3);
t125 = t80 * pkin(8) + t126;
t152 = qJD(4) * t198;
t170 = qJD(4) * t118;
t58 = -t83 * pkin(8) - t136;
t59 = -t132 * pkin(8) - t135;
t19 = -t118 * t125 - t198 * t124 - t58 * t152 + t59 * t170;
t154 = t177 * pkin(3);
t24 = t49 * pkin(4) - t48 * pkin(9) + t154;
t43 = t118 * t58 + t198 * t59;
t75 = t132 * pkin(3) + t103;
t44 = t67 * pkin(4) - t68 * pkin(9) + t75;
t7 = -t44 * t108 - t117 * t24 + t121 * t19 + t43 * t169;
t6 = -pkin(10) * t204 - t7;
t197 = t120 * t6;
t196 = t121 * pkin(5);
t195 = t68 * t48;
t105 = t118 * pkin(3) + pkin(9);
t193 = -pkin(10) - t105;
t123 = t118 * t124 - t198 * t125;
t12 = t204 * pkin(5) + t59 * t152 + t58 * t170 + t123;
t181 = t117 * t68;
t42 = t118 * t59 - t198 * t58;
t30 = pkin(5) * t181 + t42;
t70 = t166 * t86;
t176 = t116 * t117;
t85 = -t120 * t121 + t176;
t192 = t12 * t85 + t30 * t70;
t167 = qJD(6) * t120;
t69 = -t120 * t108 - t121 * t167 + t166 * t176;
t191 = t12 * t86 - t30 * t69;
t20 = t43 * qJD(4) + t123;
t35 = t42 * t108;
t190 = t20 * t117 + t35;
t37 = t121 * t43;
t189 = t117 * t44 + t37;
t162 = pkin(5) * t169;
t163 = pkin(3) * t170;
t89 = t162 + t163;
t106 = -t198 * pkin(3) - pkin(4);
t94 = t106 - t196;
t188 = t94 * t70 + t89 * t85;
t187 = -t94 * t69 + t89 * t86;
t107 = -pkin(4) - t196;
t186 = t107 * t70 + t85 * t162;
t185 = -t107 * t69 + t86 * t162;
t184 = t106 * t108 + t117 * t163;
t18 = -pkin(10) * t181 + t189;
t183 = t116 * t18;
t180 = t120 * t18;
t179 = t121 * t48;
t178 = t121 * t68;
t174 = t117 * t121;
t168 = qJD(6) * t116;
t165 = pkin(4) * t169;
t164 = pkin(4) * t108;
t161 = pkin(5) * t168;
t160 = pkin(5) * t167;
t159 = t68 * t169;
t34 = t42 * t169;
t39 = t121 * t44;
t15 = -pkin(10) * t178 - t117 * t43 + t199 + t39;
t157 = -t15 - t199;
t151 = t117 * t19 + t121 * t24;
t5 = -pkin(10) * t179 + t200 + (-t37 + (pkin(10) * t68 - t44) * t117) * qJD(5) + t151;
t156 = -t116 * t6 + t120 * t5;
t155 = qJD(5) * t201;
t153 = t117 * t108;
t150 = qJD(5) * t193;
t149 = -0.4e1 * t68 * t174;
t147 = pkin(3) * t152;
t146 = 0.2e1 * (t114 ^ 2 + t115 ^ 2) * qJD(2);
t145 = t20 * t68 + t42 * t48;
t144 = t48 * t67 + t68 * t49;
t28 = t86 * t49 - t69 * t67;
t143 = t105 * t67 - t106 * t68;
t142 = -t120 * t15 + t183;
t141 = t116 * t15 + t180;
t81 = t193 * t117;
t109 = t121 * pkin(10);
t82 = t121 * t105 + t109;
t140 = t116 * t82 - t120 * t81;
t139 = t116 * t81 + t120 * t82;
t95 = t201 * t117;
t96 = t121 * pkin(9) + t109;
t138 = t116 * t96 - t120 * t95;
t137 = t116 * t95 + t120 * t96;
t134 = t117 * t147;
t133 = t121 * t147;
t131 = t106 * t169 - t121 * t163;
t129 = t159 - t179;
t32 = t67 * t108 + t117 * t49;
t128 = -t121 * t49 + t67 * t169;
t127 = -t105 * t49 + t106 * t48 + (t118 * t68 - t198 * t67) * qJD(4) * pkin(3);
t98 = 0.2e1 * t153;
t88 = t121 * t155;
t87 = t117 * t155;
t84 = -0.2e1 * t148;
t74 = t121 * t150 - t134;
t73 = t117 * t150 + t133;
t66 = t68 ^ 2;
t57 = -0.2e1 * t86 * t69;
t54 = -t137 * qJD(6) - t116 * t87 + t120 * t88;
t53 = t138 * qJD(6) - t116 * t88 - t120 * t87;
t47 = t85 * t68;
t45 = 0.2e1 * t69 * t85 - 0.2e1 * t86 * t70;
t41 = -t139 * qJD(6) - t116 * t73 + t120 * t74;
t40 = t140 * qJD(6) - t116 * t74 - t120 * t73;
t33 = 0.2e1 * t67 * t49;
t29 = -t85 * t49 - t70 * t67;
t27 = -t68 * t148 + t48 * t174;
t21 = qJD(5) * t149 - t171 * t48;
t14 = t48 * t175 - t116 * t159 - t168 * t181 + (t166 * t178 + t182) * t120;
t13 = -t166 * t46 - t85 * t48;
t9 = t13 * t86 + t47 * t69;
t8 = -t189 * qJD(5) + t151;
t3 = -t13 * t85 - t86 * t14 + t69 * t46 + t47 * t70;
t2 = -t141 * qJD(6) + t156;
t1 = t142 * qJD(6) - t116 * t5 - t197;
t4 = [0, 0, 0, 0, 0, t146, qJ(2) * t146, -0.2e1 * t83 * t80, 0.2e1 * t80 * t132 - 0.2e1 * t83 * t177, 0, 0, 0, t177 * t202, -t80 * t202, 0.2e1 * t195, -0.2e1 * t144, 0, 0, 0, 0.2e1 * t67 * t154 + 0.2e1 * t75 * t49, 0.2e1 * t68 * t154 + 0.2e1 * t75 * t48, 0.2e1 * t113 * t195 - 0.2e1 * t66 * t153, 0.2e1 * t66 * t148 + t48 * t149, 0.2e1 * t144 * t121 - 0.2e1 * t67 * t159, -0.2e1 * t144 * t117 - 0.2e1 * t67 * t158, t33, 0.2e1 * t68 * t35 + 0.2e1 * t39 * t49 + 0.2e1 * t8 * t67 + 0.2e1 * (-t43 * t49 + t145) * t117, 0.2e1 * t145 * t121 - 0.2e1 * t189 * t49 - 0.2e1 * t68 * t34 + 0.2e1 * t7 * t67, -0.2e1 * t47 * t13, -0.2e1 * t13 * t46 + 0.2e1 * t47 * t14, 0.2e1 * t13 * t67 - 0.2e1 * t47 * t49, -0.2e1 * t14 * t67 - 0.2e1 * t46 * t49, t33, 0.2e1 * t12 * t46 + 0.2e1 * t30 * t14 - 0.2e1 * t142 * t49 + 0.2e1 * t2 * t67, 0.2e1 * t1 * t67 - 0.2e1 * t12 * t47 + 0.2e1 * t30 * t13 - 0.2e1 * t141 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, -t80, 0, 0, 0, 0, 0, t49, t48, 0, 0, 0, 0, 0, -t128, -t32, 0, 0, 0, 0, 0, t29, -t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, -t177, 0, t126, t203, 0, 0, t48, -t49, 0, -t20, t19, t27, t21, t32, -t128, 0, t34 + (-t143 * qJD(5) - t20) * t121 + t127 * t117, t127 * t121 + t143 * t169 + t190, t9, t3, t28, t29, 0, t94 * t14 - t140 * t49 + t41 * t67 + t89 * t46 + t192, t94 * t13 - t139 * t49 + t40 * t67 - t89 * t47 + t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t163, -0.2e1 * t147, t98, t84, 0, 0, 0, 0.2e1 * t131, 0.2e1 * t184, t57, t45, 0, 0, 0, 0.2e1 * t188, 0.2e1 * t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, -t49, 0, -t20, t19, t27, t21, t32, -t128, 0, t34 + (-pkin(4) * t48 - pkin(9) * t49) * t117 + (-t20 + (-pkin(4) * t68 - pkin(9) * t67) * qJD(5)) * t121, t129 * pkin(4) + t128 * pkin(9) + t190, t9, t3, t28, t29, 0, t107 * t14 - t138 * t49 + t162 * t46 + t54 * t67 + t192, t107 * t13 - t137 * t49 - t162 * t47 + t53 * t67 + t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t147, t98, t84, 0, 0, 0, t131 - t165, -t164 + t184, t57, t45, 0, 0, 0, t186 + t188, t185 + t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, t84, 0, 0, 0, -0.2e1 * t165, -0.2e1 * t164, t57, t45, 0, 0, 0, 0.2e1 * t186, 0.2e1 * t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t129, -t204, t49, t8, t7, 0, 0, t13, -t14, t49, t120 * t200 + (t116 * t157 - t180) * qJD(6) + t156, -t197 + (-t5 - t200) * t116 + (t157 * t120 + t183) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t169, -t108, 0, 0, 0, 0, 0, -t70, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, -t169, 0, -t105 * t108 - t134, t105 * t169 - t133, 0, 0, -t69, -t70, 0, t41, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, -t169, 0, -pkin(9) * t108, pkin(9) * t169, 0, 0, -t69, -t70, 0, t54, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t161, -0.2e1 * t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, -t14, t49, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, -t70, 0, t41, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, -t70, 0, t54, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t161, -t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
