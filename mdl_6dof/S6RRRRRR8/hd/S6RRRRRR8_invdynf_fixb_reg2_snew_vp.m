% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 14:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR8_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR8_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR8_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 14:15:50
% EndTime: 2019-05-08 14:16:20
% DurationCPUTime: 31.10s
% Computational Cost: add. (435027->422), mult. (1067766->673), div. (0->0), fcn. (917195->16), ass. (0->366)
t3104 = sin(pkin(7));
t3106 = cos(pkin(7));
t3105 = sin(pkin(6));
t3112 = sin(qJ(2));
t3118 = cos(qJ(2));
t3107 = cos(pkin(6));
t3113 = sin(qJ(1));
t3119 = cos(qJ(1));
t3093 = t3113 * g(1) - t3119 * g(2);
t3120 = qJD(1) ^ 2;
t3130 = pkin(9) * t3105 * t3120 + qJDD(1) * pkin(1) + t3093;
t3126 = t3107 * t3130;
t3094 = -g(1) * t3119 - g(2) * t3113;
t3185 = qJDD(1) * t3105;
t3129 = -pkin(1) * t3120 + pkin(9) * t3185 + t3094;
t3049 = -t3112 * t3129 + (-t3105 * g(3) + t3126) * t3118;
t3204 = qJD(1) * t3105;
t3182 = t3118 * t3204;
t3080 = qJD(2) * t3182 + t3112 * t3185;
t3098 = t3107 * qJDD(1) + qJDD(2);
t3205 = pkin(10) * t3104;
t3131 = (-pkin(2) * t3118 - t3112 * t3205) * t3204;
t3099 = qJD(1) * t3107 + qJD(2);
t3191 = t3106 * t3099;
t3184 = pkin(10) * t3191;
t3206 = t3099 ^ 2;
t3122 = t3098 * pkin(2) + (-t3080 * t3106 + t3104 * t3206) * pkin(10) + (-t3112 * t3131 + t3118 * t3184) * t3204 + t3049;
t3068 = -t3107 * g(3) - t3105 * t3130;
t3192 = t3105 * t3112;
t3183 = qJD(1) * t3192;
t3081 = -qJD(2) * t3183 + t3118 * t3185;
t3175 = t3106 * t3182;
t3124 = -t3080 * t3205 - t3081 * pkin(2) + (-pkin(10) * t3106 * t3183 + pkin(2) * t3099) * t3183 - (t3099 * t3104 + t3175) * pkin(10) * t3182 + t3068;
t3220 = t3104 * t3124 + t3106 * t3122;
t3117 = cos(qJ(3));
t3111 = sin(qJ(3));
t3190 = t3106 * t3111;
t3194 = t3104 * t3111;
t3062 = t3099 * t3194 + (t3112 * t3117 + t3118 * t3190) * t3204;
t3073 = t3104 * t3182 - qJD(3) - t3191;
t3110 = sin(qJ(4));
t3116 = cos(qJ(4));
t3046 = t3062 * t3110 + t3073 * t3116;
t3048 = t3062 * t3116 - t3073 * t3110;
t3109 = sin(qJ(5));
t3115 = cos(qJ(5));
t3019 = t3115 * t3046 + t3048 * t3109;
t3017 = qJD(6) + t3019;
t3219 = qJD(6) + t3017;
t3021 = -t3046 * t3109 + t3048 * t3115;
t3193 = t3104 * t3117;
t3060 = -t3099 * t3193 + t3111 * t3183 - t3117 * t3175;
t3058 = qJD(4) + t3060;
t3055 = qJD(5) + t3058;
t3108 = sin(qJ(6));
t3114 = cos(qJ(6));
t3002 = t3021 * t3108 - t3114 * t3055;
t3218 = t3002 ^ 2;
t3004 = t3021 * t3114 + t3055 * t3108;
t3217 = t3004 ^ 2;
t3216 = t3017 ^ 2;
t3215 = t3019 ^ 2;
t3214 = t3021 ^ 2;
t3213 = t3046 ^ 2;
t3212 = t3048 ^ 2;
t3211 = t3055 ^ 2;
t3210 = t3058 ^ 2;
t3209 = t3060 ^ 2;
t3208 = t3062 ^ 2;
t3207 = t3073 ^ 2;
t3203 = t3002 * t3004;
t3202 = t3019 * t3021;
t3201 = t3046 * t3048;
t3200 = t3058 * t3046;
t3199 = t3060 * t3062;
t3198 = t3060 * t3073;
t3197 = t3062 * t3073;
t3196 = t3081 * t3106;
t3195 = t3105 ^ 2 * t3120;
t3189 = qJD(4) - t3058;
t3188 = qJD(5) - t3055;
t3187 = qJD(6) - t3017;
t3186 = t3112 * t3126 + t3118 * t3129;
t3018 = -t3206 * pkin(2) + (t3098 * t3104 + t3196) * pkin(10) + (-t3112 * g(3) + (t3112 * t3184 + t3118 * t3131) * qJD(1)) * t3105 + t3186;
t2971 = t3117 * t3018 + t3111 * t3220;
t3042 = pkin(3) * t3060 - pkin(11) * t3062;
t3134 = -t3081 * t3104 + t3098 * t3106 + qJDD(3);
t2960 = -pkin(3) * t3207 + pkin(11) * t3134 - t3060 * t3042 + t2971;
t2991 = -t3104 * t3122 + t3106 * t3124;
t3174 = -t3062 * qJD(3) - t3111 * t3080 + t3098 * t3193 + t3117 * t3196;
t3007 = -t3174 - t3197;
t3034 = -t3060 * qJD(3) + t3117 * t3080 + t3081 * t3190 + t3098 * t3194;
t3177 = -t3034 - t3198;
t2962 = pkin(3) * t3007 + pkin(11) * t3177 + t2991;
t2924 = t3116 * t2960 + t3110 * t2962;
t3178 = t3110 * t3034 - t3116 * t3134;
t2998 = -qJD(4) * t3048 - t3178;
t3027 = pkin(4) * t3058 - pkin(12) * t3048;
t2908 = -pkin(4) * t3213 + pkin(12) * t2998 - t3027 * t3058 + t2924;
t2923 = -t3110 * t2960 + t3116 * t2962;
t3135 = qJDD(4) - t3174;
t2992 = t3135 - t3201;
t3128 = -t3116 * t3034 - t3110 * t3134;
t2999 = -t3046 * qJD(4) - t3128;
t3125 = (-t2999 - t3200) * pkin(12) + t2992 * pkin(4) + t2923;
t2876 = t3115 * t2908 + t3109 * t3125;
t2875 = -t2908 * t3109 + t3115 * t3125;
t3143 = -t3109 * t2998 - t3115 * t2999;
t2965 = -qJD(5) * t3019 - t3143;
t3181 = t3055 * t3019 - t2965;
t3133 = qJDD(5) + t3135;
t3180 = -t3108 * t2965 + t3114 * t3133;
t3179 = -t3115 * t2998 + t3109 * t2999;
t3176 = t3099 * t3182;
t3173 = t3111 * t3018 - t3117 * t3220;
t2990 = pkin(5) * t3019 - pkin(13) * t3021;
t2869 = -pkin(5) * t3211 + pkin(13) * t3133 - t3019 * t2990 + t2876;
t2959 = -t3134 * pkin(3) - t3207 * pkin(11) + t3062 * t3042 + t3173;
t2935 = -t2998 * pkin(4) - t3213 * pkin(12) + t3048 * t3027 + t2959;
t2945 = (qJD(5) + t3055) * t3021 + t3179;
t2894 = pkin(5) * t2945 + pkin(13) * t3181 + t2935;
t2854 = -t2869 * t3108 + t2894 * t3114;
t2855 = t2869 * t3114 + t2894 * t3108;
t2838 = -t2854 * t3108 + t2855 * t3114;
t2868 = -pkin(5) * t3133 - pkin(13) * t3211 + t2990 * t3021 - t2875;
t2826 = t2838 * t3109 - t2868 * t3115;
t2827 = t2838 * t3115 + t2868 * t3109;
t2815 = t2826 * t3116 + t2827 * t3110;
t2816 = -t2826 * t3110 + t2827 * t3116;
t2837 = t2854 * t3114 + t2855 * t3108;
t3171 = t2816 * t3111 - t2837 * t3117;
t2808 = -t3104 * t2815 + t3106 * t3171;
t2811 = t2816 * t3117 + t2837 * t3111;
t3172 = t2808 * t3118 + t2811 * t3112;
t2851 = t2875 * t3115 + t2876 * t3109;
t2852 = -t2875 * t3109 + t2876 * t3115;
t2835 = t2851 * t3116 + t2852 * t3110;
t2836 = -t2851 * t3110 + t2852 * t3116;
t3168 = t2836 * t3111 - t2935 * t3117;
t2822 = -t3104 * t2835 + t3106 * t3168;
t2830 = t2836 * t3117 + t2935 * t3111;
t3170 = t2822 * t3118 + t2830 * t3112;
t2926 = -t3004 * t3187 + t3180;
t3127 = -t3114 * t2965 - t3108 * t3133;
t2928 = t3002 * t3187 + t3127;
t2898 = t2926 * t3114 - t2928 * t3108;
t2964 = -t3217 - t3218;
t2886 = t2898 * t3109 - t2964 * t3115;
t2887 = t2898 * t3115 + t2964 * t3109;
t2858 = t2886 * t3116 + t2887 * t3110;
t2859 = -t2886 * t3110 + t2887 * t3116;
t2897 = t2926 * t3108 + t2928 * t3114;
t3164 = t2859 * t3111 - t2897 * t3117;
t2832 = -t3104 * t2858 + t3106 * t3164;
t2849 = t2859 * t3117 + t2897 * t3111;
t3169 = t2832 * t3118 + t2849 * t3112;
t3132 = -qJD(5) * t3021 - qJDD(6) - t3179;
t2940 = -t3132 - t3203;
t2966 = -t3216 - t3218;
t2914 = -t2940 * t3108 + t2966 * t3114;
t2925 = t3004 * t3219 - t3180;
t2890 = t2914 * t3109 - t2925 * t3115;
t2891 = t2914 * t3115 + t2925 * t3109;
t2863 = t2890 * t3116 + t2891 * t3110;
t2864 = -t2890 * t3110 + t2891 * t3116;
t2913 = t2940 * t3114 + t2966 * t3108;
t3162 = t2864 * t3111 - t2913 * t3117;
t2840 = -t3104 * t2863 + t3106 * t3162;
t2850 = t2864 * t3117 + t2913 * t3111;
t3167 = t2840 * t3118 + t2850 * t3112;
t2941 = t3132 - t3203;
t2967 = -t3216 - t3217;
t2918 = t2941 * t3114 - t2967 * t3108;
t2927 = -t3002 * t3219 - t3127;
t2892 = t2918 * t3109 - t2927 * t3115;
t2893 = t2918 * t3115 + t2927 * t3109;
t2865 = t2892 * t3116 + t2893 * t3110;
t2866 = -t2892 * t3110 + t2893 * t3116;
t2917 = t2941 * t3108 + t2967 * t3114;
t3161 = t2866 * t3111 - t2917 * t3117;
t2842 = -t3104 * t2865 + t3106 * t3161;
t2853 = t2866 * t3117 + t2917 * t3111;
t3166 = t2842 * t3118 + t2853 * t3112;
t2946 = -t3021 * t3188 - t3179;
t2948 = t3019 * t3188 + t3143;
t2909 = t2946 * t3109 + t2948 * t3115;
t2910 = t2946 * t3115 - t2948 * t3109;
t2884 = t2909 * t3116 + t2910 * t3110;
t2885 = -t2909 * t3110 + t2910 * t3116;
t2972 = -t3214 - t3215;
t3158 = t2885 * t3111 - t2972 * t3117;
t2857 = -t3104 * t2884 + t3106 * t3158;
t2874 = t2885 * t3117 + t2972 * t3111;
t3165 = t2857 * t3118 + t2874 * t3112;
t2895 = t2923 * t3116 + t2924 * t3110;
t2896 = -t2923 * t3110 + t2924 * t3116;
t3157 = t2896 * t3111 - t2959 * t3117;
t2862 = -t3104 * t2895 + t3106 * t3157;
t2883 = t2896 * t3117 + t2959 * t3111;
t3163 = t2862 * t3118 + t2883 * t3112;
t2977 = t3133 - t3202;
t2984 = -t3211 - t3215;
t2950 = t2977 * t3115 + t2984 * t3109;
t2951 = -t2977 * t3109 + t2984 * t3115;
t2915 = t2950 * t3116 + t2951 * t3110;
t2916 = -t2950 * t3110 + t2951 * t3116;
t3155 = t2916 * t3111 - t2945 * t3117;
t2873 = -t3104 * t2915 + t3106 * t3155;
t2900 = t2916 * t3117 + t2945 * t3111;
t3160 = t2873 * t3118 + t2900 * t3112;
t2978 = -t3133 - t3202;
t2994 = -t3211 - t3214;
t2955 = t2978 * t3109 + t2994 * t3115;
t2956 = t2978 * t3115 - t2994 * t3109;
t2919 = t2955 * t3116 + t2956 * t3110;
t2920 = -t2955 * t3110 + t2956 * t3116;
t3154 = t2920 * t3111 + t3117 * t3181;
t2878 = -t3104 * t2919 + t3106 * t3154;
t2902 = t2920 * t3117 - t3111 * t3181;
t3159 = t2878 * t3118 + t2902 * t3112;
t2987 = -t3048 * t3189 - t3178;
t2989 = t3046 * t3189 + t3128;
t2953 = t2987 * t3110 + t2989 * t3116;
t2954 = t2987 * t3116 - t2989 * t3110;
t3000 = -t3212 - t3213;
t3150 = t2954 * t3111 - t3000 * t3117;
t2912 = -t3104 * t2953 + t3106 * t3150;
t2943 = t2954 * t3117 + t3000 * t3111;
t3156 = t2912 * t3118 + t2943 * t3112;
t3006 = -t3210 - t3213;
t2973 = t2992 * t3116 + t3006 * t3110;
t2974 = -t2992 * t3110 + t3006 * t3116;
t2986 = (qJD(4) + t3058) * t3048 + t3178;
t3147 = t2974 * t3111 - t2986 * t3117;
t2930 = -t3104 * t2973 + t3106 * t3147;
t2949 = t2974 * t3117 + t2986 * t3111;
t3153 = t2930 * t3118 + t2949 * t3112;
t3148 = t2971 * t3111 - t3117 * t3173;
t2932 = -t3104 * t2991 + t3106 * t3148;
t2942 = t2971 * t3117 + t3111 * t3173;
t3152 = t2932 * t3118 + t2942 * t3112;
t2993 = -t3135 - t3201;
t3015 = -t3210 - t3212;
t2975 = t2993 * t3110 + t3015 * t3116;
t2976 = t2993 * t3116 - t3015 * t3110;
t2988 = t2999 - t3200;
t3146 = t2976 * t3111 - t2988 * t3117;
t2934 = -t3104 * t2975 + t3106 * t3146;
t2952 = t2976 * t3117 + t2988 * t3111;
t3151 = t2934 * t3118 + t2952 * t3112;
t3025 = -t3208 - t3209;
t3008 = t3174 - t3197;
t3010 = -t3034 + t3198;
t3142 = t3008 * t3111 + t3010 * t3117;
t2969 = -t3104 * t3025 + t3106 * t3142;
t2985 = t3008 * t3117 - t3010 * t3111;
t3149 = t2969 * t3118 + t2985 * t3112;
t3029 = t3134 - t3199;
t3033 = -t3207 - t3209;
t3140 = t3029 * t3117 + t3033 * t3111;
t2980 = -t3104 * t3007 + t3106 * t3140;
t2995 = -t3029 * t3111 + t3033 * t3117;
t3145 = t2980 * t3118 + t2995 * t3112;
t3028 = -t3134 - t3199;
t3039 = -t3207 - t3208;
t3141 = t3028 * t3111 + t3039 * t3117;
t2982 = t3104 * t3177 + t3106 * t3141;
t3001 = t3028 * t3117 - t3039 * t3111;
t3144 = t2982 * t3118 + t3001 * t3112;
t3050 = -g(3) * t3192 + t3186;
t3139 = t3049 * t3118 + t3050 * t3112;
t3065 = t3176 - t3080;
t3084 = t3099 * t3183;
t3066 = t3081 + t3084;
t3138 = t3065 * t3118 + t3066 * t3112;
t3102 = t3112 ^ 2;
t3074 = -t3102 * t3195 - t3206;
t3092 = t3118 * t3112 * t3195;
t3079 = t3092 - t3098;
t3137 = t3074 * t3118 + t3079 * t3112;
t3078 = t3092 + t3098;
t3103 = t3118 ^ 2;
t3082 = -t3103 * t3195 - t3206;
t3136 = t3078 * t3118 + t3082 * t3112;
t3091 = -qJDD(1) * t3113 - t3119 * t3120;
t3090 = qJDD(1) * t3119 - t3113 * t3120;
t3083 = (-t3102 - t3103) * t3195;
t3067 = -t3081 + t3084;
t3064 = t3176 + t3080;
t3054 = -t3078 * t3112 + t3082 * t3118;
t3051 = -t3074 * t3112 + t3079 * t3118;
t3043 = -t3065 * t3112 + t3066 * t3118;
t3041 = -t3105 * t3067 + t3107 * t3136;
t3040 = t3107 * t3067 + t3105 * t3136;
t3038 = -t3105 * t3064 + t3107 * t3137;
t3037 = t3107 * t3064 + t3105 * t3137;
t3036 = -t3105 * t3083 + t3107 * t3138;
t3035 = t3107 * t3083 + t3105 * t3138;
t3026 = -t3049 * t3112 + t3050 * t3118;
t3012 = -t3105 * t3068 + t3107 * t3139;
t3011 = t3107 * t3068 + t3105 * t3139;
t2981 = t3104 * t3141 - t3106 * t3177;
t2979 = t3106 * t3007 + t3104 * t3140;
t2968 = t3106 * t3025 + t3104 * t3142;
t2963 = -t2982 * t3112 + t3001 * t3118;
t2958 = -t2980 * t3112 + t2995 * t3118;
t2944 = -t2969 * t3112 + t2985 * t3118;
t2939 = -t3105 * t2981 + t3107 * t3144;
t2938 = t3107 * t2981 + t3105 * t3144;
t2937 = -t3105 * t2979 + t3107 * t3145;
t2936 = t3107 * t2979 + t3105 * t3145;
t2933 = t3106 * t2975 + t3104 * t3146;
t2931 = t3106 * t2991 + t3104 * t3148;
t2929 = t3106 * t2973 + t3104 * t3147;
t2922 = -t3105 * t2968 + t3107 * t3149;
t2921 = t3107 * t2968 + t3105 * t3149;
t2911 = t3106 * t2953 + t3104 * t3150;
t2904 = -t2934 * t3112 + t2952 * t3118;
t2903 = -t2930 * t3112 + t2949 * t3118;
t2901 = -t2932 * t3112 + t2942 * t3118;
t2899 = -t2912 * t3112 + t2943 * t3118;
t2889 = -t3105 * t2933 + t3107 * t3151;
t2888 = t3107 * t2933 + t3105 * t3151;
t2882 = -t3105 * t2929 + t3107 * t3153;
t2881 = t3107 * t2929 + t3105 * t3153;
t2880 = -t3105 * t2931 + t3107 * t3152;
t2879 = t3107 * t2931 + t3105 * t3152;
t2877 = t3106 * t2919 + t3104 * t3154;
t2872 = t3106 * t2915 + t3104 * t3155;
t2871 = -t3105 * t2911 + t3107 * t3156;
t2870 = t3107 * t2911 + t3105 * t3156;
t2867 = -t2878 * t3112 + t2902 * t3118;
t2861 = t3106 * t2895 + t3104 * t3157;
t2860 = -t2873 * t3112 + t2900 * t3118;
t2856 = t3106 * t2884 + t3104 * t3158;
t2848 = -t3105 * t2877 + t3107 * t3159;
t2847 = t3107 * t2877 + t3105 * t3159;
t2846 = -t2862 * t3112 + t2883 * t3118;
t2845 = -t3105 * t2872 + t3107 * t3160;
t2844 = t3107 * t2872 + t3105 * t3160;
t2843 = -t2857 * t3112 + t2874 * t3118;
t2841 = t3106 * t2865 + t3104 * t3161;
t2839 = t3106 * t2863 + t3104 * t3162;
t2834 = -t3105 * t2861 + t3107 * t3163;
t2833 = t3107 * t2861 + t3105 * t3163;
t2831 = t3106 * t2858 + t3104 * t3164;
t2829 = -t3105 * t2856 + t3107 * t3165;
t2828 = t3107 * t2856 + t3105 * t3165;
t2825 = -t2842 * t3112 + t2853 * t3118;
t2824 = -t2840 * t3112 + t2850 * t3118;
t2823 = -t2832 * t3112 + t2849 * t3118;
t2821 = t3106 * t2835 + t3104 * t3168;
t2820 = -t3105 * t2841 + t3107 * t3166;
t2819 = t3107 * t2841 + t3105 * t3166;
t2818 = -t3105 * t2839 + t3107 * t3167;
t2817 = t3107 * t2839 + t3105 * t3167;
t2814 = -t3105 * t2831 + t3107 * t3169;
t2813 = t3107 * t2831 + t3105 * t3169;
t2812 = -t2822 * t3112 + t2830 * t3118;
t2810 = -t3105 * t2821 + t3107 * t3170;
t2809 = t3107 * t2821 + t3105 * t3170;
t2807 = t3106 * t2815 + t3104 * t3171;
t2806 = -t2808 * t3112 + t2811 * t3118;
t2805 = -t3105 * t2807 + t3107 * t3172;
t2804 = t3107 * t2807 + t3105 * t3172;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3091, -t3090, 0, -t3093 * t3113 + t3094 * t3119, 0, 0, 0, 0, 0, 0, -t3041 * t3113 + t3054 * t3119, -t3038 * t3113 + t3051 * t3119, -t3036 * t3113 + t3043 * t3119, -t3012 * t3113 + t3026 * t3119, 0, 0, 0, 0, 0, 0, -t2937 * t3113 + t2958 * t3119, -t2939 * t3113 + t2963 * t3119, -t2922 * t3113 + t2944 * t3119, -t2880 * t3113 + t2901 * t3119, 0, 0, 0, 0, 0, 0, -t2882 * t3113 + t2903 * t3119, -t2889 * t3113 + t2904 * t3119, -t2871 * t3113 + t2899 * t3119, -t2834 * t3113 + t2846 * t3119, 0, 0, 0, 0, 0, 0, -t2845 * t3113 + t2860 * t3119, -t2848 * t3113 + t2867 * t3119, -t2829 * t3113 + t2843 * t3119, -t2810 * t3113 + t2812 * t3119, 0, 0, 0, 0, 0, 0, -t2818 * t3113 + t2824 * t3119, -t2820 * t3113 + t2825 * t3119, -t2814 * t3113 + t2823 * t3119, -t2805 * t3113 + t2806 * t3119; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3090, t3091, 0, t3093 * t3119 + t3094 * t3113, 0, 0, 0, 0, 0, 0, t3041 * t3119 + t3054 * t3113, t3038 * t3119 + t3051 * t3113, t3036 * t3119 + t3043 * t3113, t3012 * t3119 + t3026 * t3113, 0, 0, 0, 0, 0, 0, t2937 * t3119 + t2958 * t3113, t2939 * t3119 + t2963 * t3113, t2922 * t3119 + t2944 * t3113, t2880 * t3119 + t2901 * t3113, 0, 0, 0, 0, 0, 0, t2882 * t3119 + t2903 * t3113, t2889 * t3119 + t2904 * t3113, t2871 * t3119 + t2899 * t3113, t2834 * t3119 + t2846 * t3113, 0, 0, 0, 0, 0, 0, t2845 * t3119 + t2860 * t3113, t2848 * t3119 + t2867 * t3113, t2829 * t3119 + t2843 * t3113, t2810 * t3119 + t2812 * t3113, 0, 0, 0, 0, 0, 0, t2818 * t3119 + t2824 * t3113, t2820 * t3119 + t2825 * t3113, t2814 * t3119 + t2823 * t3113, t2805 * t3119 + t2806 * t3113; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3040, t3037, t3035, t3011, 0, 0, 0, 0, 0, 0, t2936, t2938, t2921, t2879, 0, 0, 0, 0, 0, 0, t2881, t2888, t2870, t2833, 0, 0, 0, 0, 0, 0, t2844, t2847, t2828, t2809, 0, 0, 0, 0, 0, 0, t2817, t2819, t2813, t2804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3120, -qJDD(1), 0, t3094, 0, 0, 0, 0, 0, 0, t3054, t3051, t3043, t3026, 0, 0, 0, 0, 0, 0, t2958, t2963, t2944, t2901, 0, 0, 0, 0, 0, 0, t2903, t2904, t2899, t2846, 0, 0, 0, 0, 0, 0, t2860, t2867, t2843, t2812, 0, 0, 0, 0, 0, 0, t2824, t2825, t2823, t2806; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3120, 0, t3093, 0, 0, 0, 0, 0, 0, t3041, t3038, t3036, t3012, 0, 0, 0, 0, 0, 0, t2937, t2939, t2922, t2880, 0, 0, 0, 0, 0, 0, t2882, t2889, t2871, t2834, 0, 0, 0, 0, 0, 0, t2845, t2848, t2829, t2810, 0, 0, 0, 0, 0, 0, t2818, t2820, t2814, t2805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3040, t3037, t3035, t3011, 0, 0, 0, 0, 0, 0, t2936, t2938, t2921, t2879, 0, 0, 0, 0, 0, 0, t2881, t2888, t2870, t2833, 0, 0, 0, 0, 0, 0, t2844, t2847, t2828, t2809, 0, 0, 0, 0, 0, 0, t2817, t2819, t2813, t2804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3082, t3079, t3066, t3050, 0, 0, 0, 0, 0, 0, t2995, t3001, t2985, t2942, 0, 0, 0, 0, 0, 0, t2949, t2952, t2943, t2883, 0, 0, 0, 0, 0, 0, t2900, t2902, t2874, t2830, 0, 0, 0, 0, 0, 0, t2850, t2853, t2849, t2811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3078, t3074, t3065, t3049, 0, 0, 0, 0, 0, 0, t2980, t2982, t2969, t2932, 0, 0, 0, 0, 0, 0, t2930, t2934, t2912, t2862, 0, 0, 0, 0, 0, 0, t2873, t2878, t2857, t2822, 0, 0, 0, 0, 0, 0, t2840, t2842, t2832, t2808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3067, t3064, t3083, t3068, 0, 0, 0, 0, 0, 0, t2979, t2981, t2968, t2931, 0, 0, 0, 0, 0, 0, t2929, t2933, t2911, t2861, 0, 0, 0, 0, 0, 0, t2872, t2877, t2856, t2821, 0, 0, 0, 0, 0, 0, t2839, t2841, t2831, t2807; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3033, t3028, t3008, t2971, 0, 0, 0, 0, 0, 0, t2974, t2976, t2954, t2896, 0, 0, 0, 0, 0, 0, t2916, t2920, t2885, t2836, 0, 0, 0, 0, 0, 0, t2864, t2866, t2859, t2816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3029, t3039, t3010, -t3173, 0, 0, 0, 0, 0, 0, -t2986, -t2988, -t3000, -t2959, 0, 0, 0, 0, 0, 0, -t2945, t3181, -t2972, -t2935, 0, 0, 0, 0, 0, 0, -t2913, -t2917, -t2897, -t2837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3007, -t3177, t3025, t2991, 0, 0, 0, 0, 0, 0, t2973, t2975, t2953, t2895, 0, 0, 0, 0, 0, 0, t2915, t2919, t2884, t2835, 0, 0, 0, 0, 0, 0, t2863, t2865, t2858, t2815; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3006, t2993, t2987, t2924, 0, 0, 0, 0, 0, 0, t2951, t2956, t2910, t2852, 0, 0, 0, 0, 0, 0, t2891, t2893, t2887, t2827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2992, t3015, t2989, t2923, 0, 0, 0, 0, 0, 0, t2950, t2955, t2909, t2851, 0, 0, 0, 0, 0, 0, t2890, t2892, t2886, t2826; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2986, t2988, t3000, t2959, 0, 0, 0, 0, 0, 0, t2945, -t3181, t2972, t2935, 0, 0, 0, 0, 0, 0, t2913, t2917, t2897, t2837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2984, t2978, t2946, t2876, 0, 0, 0, 0, 0, 0, t2914, t2918, t2898, t2838; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2977, t2994, t2948, t2875, 0, 0, 0, 0, 0, 0, -t2925, -t2927, -t2964, -t2868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2945, -t3181, t2972, t2935, 0, 0, 0, 0, 0, 0, t2913, t2917, t2897, t2837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2966, t2941, t2926, t2855; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2940, t2967, t2928, t2854; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2925, t2927, t2964, t2868;];
f_new_reg  = t1;
