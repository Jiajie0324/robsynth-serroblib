% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRRRR8
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRRRR8_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 13:29
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRRRR8_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR8_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR8_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRRRR8_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR8_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:30
	% EndTime: 2019-10-10 13:29:30
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:30
	% EndTime: 2019-10-10 13:29:30
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:30
	% EndTime: 2019-10-10 13:29:31
	% DurationCPUTime: 0.41s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:31
	% EndTime: 2019-10-10 13:29:32
	% DurationCPUTime: 1.26s
	% Computational Cost: add. (2555->103), mult. (7918->233), div. (442->12), fcn. (10062->13), ass. (0->106)
	t218 = sin(pkin(6));
	t219 = cos(pkin(7));
	t220 = cos(pkin(6));
	t217 = sin(pkin(7));
	t225 = cos(qJ(2));
	t268 = t217 * t225;
	t206 = -t218 * t268 + t220 * t219;
	t203 = 0.1e1 / t206;
	t222 = sin(qJ(2));
	t226 = cos(qJ(1));
	t260 = t226 * t222;
	t223 = sin(qJ(1));
	t261 = t223 * t225;
	t238 = t220 * t260 + t261;
	t267 = t218 * t222;
	t204 = 0.1e1 / t206 ^ 2;
	t259 = t226 * t225;
	t262 = t223 * t222;
	t207 = -t220 * t259 + t262;
	t265 = t218 * t226;
	t242 = -t207 * t217 + t219 * t265;
	t272 = t242 * t204;
	t284 = t217 * (t203 * t238 + t267 * t272);
	t189 = atan2(t242, t206);
	t184 = sin(t189);
	t185 = cos(t189);
	t170 = t184 * t242 + t185 * t206;
	t167 = 0.1e1 / t170;
	t221 = sin(qJ(3));
	t224 = cos(qJ(3));
	t237 = t220 * t262 - t259;
	t239 = t220 * t261 + t260;
	t266 = t218 * t223;
	t252 = t217 * t266;
	t240 = -t219 * t239 + t252;
	t181 = t221 * t240 - t224 * t237;
	t175 = 0.1e1 / t181;
	t168 = 0.1e1 / t170 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t200 = -t217 * t239 - t219 * t266;
	t197 = t200 ^ 2;
	t163 = t197 * t168 + 0.1e1;
	t192 = qJD(1) * t207 + qJD(2) * t237;
	t258 = qJD(1) * t218;
	t249 = t226 * t258;
	t182 = t192 * t217 - t219 * t249;
	t276 = t182 * t168;
	t196 = t242 ^ 2;
	t188 = t196 * t204 + 0.1e1;
	t186 = 0.1e1 / t188;
	t194 = qJD(1) * t239 + qJD(2) * t238;
	t250 = t223 * t258;
	t183 = -t194 * t217 - t219 * t250;
	t257 = qJD(2) * t218;
	t269 = t217 * t222;
	t245 = t257 * t269;
	t244 = t204 * t245;
	t233 = t183 * t203 - t242 * t244;
	t159 = t233 * t186;
	t243 = -t184 * t206 + t185 * t242;
	t155 = t159 * t243 + t184 * t183 + t185 * t245;
	t282 = t155 * t167 * t168;
	t283 = (-t197 * t282 + t200 * t276) / t163 ^ 2;
	t193 = qJD(1) * t238 + qJD(2) * t239;
	t235 = t192 * t219 + t217 * t249;
	t165 = qJD(3) * t181 - t193 * t221 - t224 * t235;
	t263 = t219 * t224;
	t270 = t237 * t221;
	t180 = -t224 * t252 + t239 * t263 - t270;
	t174 = t180 ^ 2;
	t173 = t174 * t176 + 0.1e1;
	t277 = t176 * t180;
	t166 = -t193 * t224 + t235 * t221 + (t224 * t240 + t270) * qJD(3);
	t279 = t166 * t175 * t176;
	t281 = (t165 * t277 - t174 * t279) / t173 ^ 2;
	t205 = t203 * t204;
	t280 = (-t196 * t205 * t245 + t183 * t272) / t188 ^ 2;
	t278 = t168 * t200;
	t275 = t184 * t200;
	t274 = t185 * t200;
	t273 = t242 * t203;
	t271 = t238 * t221;
	t264 = t219 * t221;
	t256 = -0.2e1 * t283;
	t255 = -0.2e1 * t282;
	t254 = 0.2e1 * t281;
	t253 = 0.2e1 * t280;
	t251 = t217 * t265;
	t248 = -0.2e1 * t203 * t280;
	t247 = 0.2e1 * t180 * t279;
	t246 = t217 * t250;
	t241 = t207 * t219 + t251;
	t190 = -t221 * t239 - t237 * t263;
	t191 = -t224 * t239 + t237 * t264;
	t234 = t184 + (t185 * t273 - t184) * t186;
	t179 = t221 * t241 - t224 * t238;
	t216 = t217 ^ 2;
	t195 = qJD(1) * t237 + qJD(2) * t207;
	t178 = -t224 * t241 - t271;
	t171 = 0.1e1 / t173;
	t161 = 0.1e1 / t163;
	t160 = t186 * t284;
	t158 = t234 * t200;
	t156 = (-t184 * t238 + t185 * t267) * t217 - t243 * t160;
	t154 = t253 * t284 + (t195 * t203 * t217 + (-t183 * t204 * t269 + (t204 * t238 * t216 * t222 + (0.2e1 * t205 * t216 * t218 * t222 ^ 2 - t204 * t268) * t242) * qJD(2)) * t218) * t186;
	t1 = [t200 * t248 + (t182 * t203 - t200 * t244) * t186, t154, 0, 0, 0, 0; t242 * t167 * t256 + (t183 * t167 + (-t155 * t242 + t158 * t182) * t168) * t161 + ((t158 * t255 + t234 * t276) * t161 + (t158 * t256 + ((-t159 * t186 * t273 + t253) * t275 + (t242 * t248 + t159 + (-t159 + t233) * t186) * t274) * t161) * t168) * t200, 0.2e1 * (t167 * t217 * t237 - t156 * t278) * t283 + ((t243 * t154 - (-t159 * t170 + t183 * t185) * t160) * t278 + (t200 * t255 + t276) * t156 + (-t193 * t167 + (t237 * t155 + (-t159 * t238 + t225 * t257) * t274 + (t195 + (qJD(2) * t160 - t159) * t267) * t275) * t168) * t217) * t161, 0, 0, 0, 0; (-t175 * t178 + t179 * t277) * t254 + ((-t194 * t263 + t195 * t221 + t224 * t246) * t175 + t179 * t247 + (-t178 * t166 - (t194 * t264 + t195 * t224 - t221 * t246) * t180 - t179 * t165) * t176 + (t179 * t175 - (t207 * t263 + t224 * t251 + t271) * t277) * qJD(3)) * t171, (-t175 * t190 + t191 * t277) * t254 + ((qJD(3) * t191 + t192 * t221 - t193 * t263) * t175 + t191 * t247 + (-t190 * t166 - (-qJD(3) * t190 + t192 * t224 + t193 * t264) * t180 - t191 * t165) * t176) * t171, -0.2e1 * t281 + 0.2e1 * (t165 * t176 * t171 + (-t171 * t279 - t176 * t281) * t180) * t180, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:31
	% EndTime: 2019-10-10 13:29:34
	% DurationCPUTime: 2.94s
	% Computational Cost: add. (8022->174), mult. (25165->321), div. (705->12), fcn. (31370->15), ass. (0->161)
	t337 = cos(pkin(7));
	t339 = sin(qJ(3));
	t436 = cos(pkin(6));
	t437 = sin(qJ(2));
	t388 = t436 * t437;
	t438 = sin(qJ(1));
	t374 = t438 * t388;
	t341 = cos(qJ(2));
	t342 = cos(qJ(1));
	t417 = t342 * t341;
	t357 = t374 - t417;
	t398 = t341 * t436;
	t358 = t342 * t437 + t438 * t398;
	t336 = sin(pkin(6));
	t435 = sin(pkin(7));
	t399 = t336 * t435;
	t382 = t438 * t399;
	t439 = cos(qJ(3));
	t300 = -t357 * t439 + (-t358 * t337 + t382) * t339;
	t420 = t336 * t337;
	t392 = t438 * t420;
	t319 = t358 * t435 + t392;
	t338 = sin(qJ(4));
	t340 = cos(qJ(4));
	t280 = t300 * t338 - t319 * t340;
	t448 = 0.2e1 * t280;
	t324 = t438 * t341 + t342 * t388;
	t390 = t342 * t399;
	t375 = t439 * t390;
	t359 = -t324 * t339 - t375;
	t335 = t438 * t437;
	t380 = -t342 * t398 + t335;
	t363 = t380 * t439;
	t361 = t337 * t363;
	t294 = t361 - t359;
	t292 = t294 ^ 2;
	t401 = t437 * t339;
	t402 = t439 * t341;
	t366 = t337 * t402 - t401;
	t384 = t435 * t436;
	t373 = t439 * t384;
	t316 = -t366 * t336 - t373;
	t314 = 0.1e1 / t316 ^ 2;
	t286 = t292 * t314 + 0.1e1;
	t284 = 0.1e1 / t286;
	t371 = t380 * t339;
	t404 = t324 * t439;
	t353 = -t337 * t371 + t404;
	t310 = t358 * qJD(1) + t324 * qJD(2);
	t311 = -qJD(1) * t374 - qJD(2) * t335 + (qJD(2) * t436 + qJD(1)) * t417;
	t331 = t339 * t390;
	t369 = t439 * t382;
	t403 = t337 * t439;
	t362 = -qJD(1) * t369 - qJD(3) * t331 + t310 * t403 + t311 * t339;
	t269 = t353 * qJD(3) + t362;
	t391 = t439 * t437;
	t418 = t339 * t341;
	t365 = t337 * t391 + t418;
	t367 = t337 * t418 + t391;
	t381 = t339 * t384;
	t290 = qJD(3) * t381 + (t365 * qJD(2) + t367 * qJD(3)) * t336;
	t313 = 0.1e1 / t316;
	t422 = t294 * t314;
	t379 = -t269 * t313 + t290 * t422;
	t251 = t379 * t284;
	t287 = atan2(-t294, t316);
	t282 = sin(t287);
	t283 = cos(t287);
	t383 = -t282 * t316 - t283 * t294;
	t246 = t383 * t251 - t282 * t269 + t283 * t290;
	t263 = -t282 * t294 + t283 * t316;
	t261 = 0.1e1 / t263 ^ 2;
	t447 = t246 * t261;
	t446 = t290 * t314;
	t356 = t358 * t439;
	t444 = -t337 * t356 + t339 * t357 + t369;
	t293 = t444 ^ 2;
	t257 = t293 * t261 + 0.1e1;
	t255 = 0.1e1 / t257;
	t260 = 0.1e1 / t263;
	t309 = t324 * qJD(1) + t358 * qJD(2);
	t351 = t380 * qJD(1) + t357 * qJD(2);
	t349 = t351 * t439;
	t267 = -qJD(1) * t375 + t300 * qJD(3) - t309 * t339 - t337 * t349;
	t426 = t267 * t261;
	t433 = t260 * t447;
	t434 = (-t293 * t433 - t426 * t444) / t257 ^ 2;
	t445 = -t255 * t447 - 0.2e1 * t260 * t434;
	t440 = -0.2e1 * t444;
	t393 = t433 * t440;
	t415 = 0.2e1 * t434;
	t428 = t261 * t444;
	t443 = -t415 * t428 + (t393 - t426) * t255;
	t442 = -(qJD(1) * t382 - t324 * qJD(3) - t310 * t337) * t339 + qJD(3) * t375 - t311 * t439;
	t281 = t300 * t340 + t319 * t338;
	t275 = 0.1e1 / t281;
	t276 = 0.1e1 / t281 ^ 2;
	t441 = -0.2e1 * t294;
	t350 = t351 * t339;
	t268 = qJD(1) * t331 + t444 * qJD(3) - t309 * t439 + t337 * t350;
	t405 = t342 * t420;
	t301 = qJD(1) * t405 - t351 * t435;
	t258 = t281 * qJD(4) + t268 * t338 - t301 * t340;
	t274 = t280 ^ 2;
	t266 = t274 * t276 + 0.1e1;
	t425 = t276 * t280;
	t416 = qJD(4) * t280;
	t259 = t268 * t340 + t301 * t338 - t416;
	t429 = t259 * t275 * t276;
	t432 = (t258 * t425 - t274 * t429) / t266 ^ 2;
	t424 = t313 * t446;
	t431 = (t269 * t422 - t292 * t424) / t286 ^ 2;
	t430 = t255 * t260;
	t264 = 0.1e1 / t266;
	t427 = t264 * t276;
	t423 = t294 * t313;
	t419 = t337 * t339;
	t414 = -0.2e1 * t432;
	t413 = -0.2e1 * t431;
	t412 = t276 * t432;
	t411 = t313 * t431;
	t410 = t255 * t428;
	t409 = t258 * t427;
	t406 = t280 * t429;
	t400 = t357 * t435;
	t397 = t435 * t309;
	t395 = 0.2e1 * t406;
	t394 = t424 * t441;
	t372 = t337 * t380;
	t354 = t339 * t372 - t404;
	t298 = t331 + t354;
	t318 = -t380 * t435 + t405;
	t279 = t298 * t340 + t318 * t338;
	t278 = t298 * t338 - t318 * t340;
	t378 = -t338 * t275 + t340 * t425;
	t296 = -t331 + t353;
	t317 = t367 * t336 + t381;
	t377 = -t296 * t313 + t317 * t422;
	t306 = t324 * t403 - t371;
	t323 = t365 * t336;
	t376 = -t306 * t313 + t323 * t422;
	t308 = t357 * t419 - t356;
	t289 = t308 * t340 - t338 * t400;
	t370 = -t308 * t338 - t340 * t400;
	t368 = -t282 + (t283 * t423 + t282) * t284;
	t364 = -t337 * t401 + t402;
	t360 = t439 * t372;
	t307 = -t358 * t339 - t357 * t403;
	t303 = (t366 * qJD(2) + t364 * qJD(3)) * t336;
	t302 = -qJD(1) * t392 - t310 * t435;
	t291 = qJD(3) * t373 + (t364 * qJD(2) + t366 * qJD(3)) * t336;
	t273 = t311 * t403 - t310 * t339 + (-t324 * t419 - t363) * qJD(3);
	t272 = -t307 * qJD(3) + t309 * t419 + t349;
	t271 = qJD(3) * t360 + t442;
	t270 = -qJD(3) * t361 - t442;
	t254 = t376 * t284;
	t253 = t377 * t284;
	t247 = t383 * t253 - t282 * t296 + t283 * t317;
	t245 = t376 * t413 + (t323 * t394 - t273 * t313 + (t269 * t323 + t290 * t306 + t294 * t303) * t314) * t284;
	t244 = t377 * t413 + (t317 * t394 - t270 * t313 + (t269 * t317 + t290 * t296 + t291 * t294) * t314) * t284;
	t1 = [t411 * t440 + (-t267 * t313 - t444 * t446) * t284, t245, t244, 0, 0, 0; (t354 * qJD(3) - t362) * t430 + (t368 * t267 - ((-t251 * t284 * t423 + t413) * t282 + (t411 * t441 - t251 + (t251 - t379) * t284) * t283) * t444) * t410 + t445 * (-t360 + t359) - t443 * t368 * t444, (t308 * qJD(3) - t309 * t403 + t350) * t430 + ((-t245 * t294 - t254 * t269 + t303 + (-t254 * t316 - t306) * t251) * t283 + (-t245 * t316 - t254 * t290 - t273 + (t254 * t294 - t323) * t251) * t282) * t410 + t445 * t307 + t443 * (t383 * t254 - t282 * t306 + t283 * t323), (-t247 * t428 - t260 * t300) * t415 + (t247 * t393 + t268 * t260 + (-t300 * t246 - t247 * t267 - (-(-t244 * t294 - t253 * t269 + t291 + (-t253 * t316 - t296) * t251) * t283 - (-t244 * t316 - t253 * t290 - t270 + (t253 * t294 - t317) * t251) * t282) * t444) * t261) * t255, 0, 0, 0; 0.2e1 * (-t275 * t278 + t279 * t425) * t432 + ((t279 * qJD(4) + t271 * t338 - t302 * t340) * t275 + t279 * t395 + (-t278 * t259 - (-t278 * qJD(4) + t271 * t340 + t302 * t338) * t280 - t279 * t258) * t276) * t264, (t412 * t448 - t409) * t289 - (-t259 * t427 + t275 * t414) * t370 + ((t289 * qJD(4) + t272 * t338 + t340 * t397) * t275 - (t370 * qJD(4) + t272 * t340 - t338 * t397) * t425 + t289 * t395) * t264, -t378 * t444 * t414 + (t378 * t267 - ((-qJD(4) * t275 - 0.2e1 * t406) * t340 + (t258 * t340 + (t259 - t416) * t338) * t276) * t444) * t264, t414 + (t409 + (-t264 * t429 - t412) * t280) * t448, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:31
	% EndTime: 2019-10-10 13:29:34
	% DurationCPUTime: 3.01s
	% Computational Cost: add. (8994->176), mult. (26325->322), div. (723->12), fcn. (32770->15), ass. (0->163)
	t366 = cos(pkin(7));
	t367 = sin(qJ(3));
	t466 = cos(pkin(6));
	t467 = sin(qJ(2));
	t416 = t466 * t467;
	t468 = sin(qJ(1));
	t400 = t468 * t416;
	t368 = cos(qJ(2));
	t369 = cos(qJ(1));
	t447 = t369 * t368;
	t384 = t400 - t447;
	t429 = t368 * t466;
	t385 = t369 * t467 + t468 * t429;
	t365 = sin(pkin(6));
	t465 = sin(pkin(7));
	t430 = t365 * t465;
	t410 = t468 * t430;
	t469 = cos(qJ(3));
	t325 = -t384 * t469 + (-t385 * t366 + t410) * t367;
	t450 = t365 * t366;
	t420 = t468 * t450;
	t344 = t385 * t465 + t420;
	t364 = qJ(4) + qJ(5);
	t361 = sin(t364);
	t362 = cos(t364);
	t305 = t325 * t361 - t344 * t362;
	t478 = 0.2e1 * t305;
	t349 = t468 * t368 + t369 * t416;
	t418 = t369 * t430;
	t402 = t469 * t418;
	t386 = -t349 * t367 - t402;
	t360 = t468 * t467;
	t408 = -t369 * t429 + t360;
	t390 = t408 * t469;
	t388 = t366 * t390;
	t319 = t388 - t386;
	t317 = t319 ^ 2;
	t432 = t467 * t367;
	t433 = t469 * t368;
	t393 = t366 * t433 - t432;
	t412 = t466 * t465;
	t399 = t469 * t412;
	t341 = -t393 * t365 - t399;
	t339 = 0.1e1 / t341 ^ 2;
	t311 = t317 * t339 + 0.1e1;
	t309 = 0.1e1 / t311;
	t397 = t408 * t367;
	t435 = t349 * t469;
	t380 = -t366 * t397 + t435;
	t335 = t385 * qJD(1) + t349 * qJD(2);
	t336 = -qJD(1) * t400 - qJD(2) * t360 + (qJD(2) * t466 + qJD(1)) * t447;
	t356 = t367 * t418;
	t396 = t469 * t410;
	t434 = t366 * t469;
	t389 = -qJD(1) * t396 - qJD(3) * t356 + t335 * t434 + t336 * t367;
	t294 = t380 * qJD(3) + t389;
	t419 = t469 * t467;
	t448 = t367 * t368;
	t392 = t366 * t419 + t448;
	t394 = t366 * t448 + t419;
	t409 = t367 * t412;
	t315 = qJD(3) * t409 + (t392 * qJD(2) + t394 * qJD(3)) * t365;
	t338 = 0.1e1 / t341;
	t452 = t319 * t339;
	t406 = -t294 * t338 + t315 * t452;
	t276 = t406 * t309;
	t312 = atan2(-t319, t341);
	t307 = sin(t312);
	t308 = cos(t312);
	t411 = -t307 * t341 - t308 * t319;
	t271 = t411 * t276 - t294 * t307 + t308 * t315;
	t288 = -t307 * t319 + t308 * t341;
	t286 = 0.1e1 / t288 ^ 2;
	t477 = t271 * t286;
	t476 = t315 * t339;
	t383 = t385 * t469;
	t474 = -t366 * t383 + t367 * t384 + t396;
	t318 = t474 ^ 2;
	t282 = t286 * t318 + 0.1e1;
	t280 = 0.1e1 / t282;
	t285 = 0.1e1 / t288;
	t334 = t349 * qJD(1) + t385 * qJD(2);
	t378 = t408 * qJD(1) + t384 * qJD(2);
	t376 = t378 * t469;
	t292 = -qJD(1) * t402 + t325 * qJD(3) - t334 * t367 - t366 * t376;
	t456 = t292 * t286;
	t463 = t285 * t477;
	t464 = (-t318 * t463 - t456 * t474) / t282 ^ 2;
	t475 = -t280 * t477 - 0.2e1 * t285 * t464;
	t470 = -0.2e1 * t474;
	t425 = t463 * t470;
	t446 = 0.2e1 * t464;
	t458 = t286 * t474;
	t473 = -t446 * t458 + (t425 - t456) * t280;
	t472 = (qJD(1) * t410 - t349 * qJD(3) - t335 * t366) * t367 - qJD(3) * t402 + t336 * t469;
	t306 = t325 * t362 + t344 * t361;
	t300 = 0.1e1 / t306;
	t301 = 0.1e1 / t306 ^ 2;
	t471 = -0.2e1 * t319;
	t363 = qJD(4) + qJD(5);
	t436 = t369 * t450;
	t421 = -qJD(1) * t436 + t325 * t363 + t378 * t465;
	t377 = t378 * t367;
	t293 = qJD(1) * t356 + t474 * qJD(3) - t334 * t469 + t366 * t377;
	t424 = t344 * t363 + t293;
	t283 = t424 * t361 + t421 * t362;
	t299 = t305 ^ 2;
	t291 = t299 * t301 + 0.1e1;
	t455 = t301 * t305;
	t284 = -t421 * t361 + t424 * t362;
	t459 = t284 * t300 * t301;
	t462 = (t283 * t455 - t299 * t459) / t291 ^ 2;
	t454 = t338 * t476;
	t461 = (t294 * t452 - t317 * t454) / t311 ^ 2;
	t460 = t280 * t285;
	t289 = 0.1e1 / t291;
	t457 = t289 * t301;
	t453 = t319 * t338;
	t449 = t366 * t367;
	t445 = -0.2e1 * t462;
	t444 = -0.2e1 * t461;
	t442 = t301 * t462;
	t441 = t338 * t461;
	t440 = t280 * t458;
	t439 = t283 * t457;
	t437 = t305 * t459;
	t431 = t384 * t465;
	t427 = 0.2e1 * t437;
	t426 = t454 * t471;
	t343 = -t408 * t465 + t436;
	t398 = t366 * t408;
	t387 = t469 * t398;
	t423 = qJD(3) * t387 + t343 * t363 - t472;
	t381 = t367 * t398 - t435;
	t323 = t356 + t381;
	t422 = qJD(1) * t420 + t323 * t363 + t335 * t465;
	t332 = -t385 * t367 - t384 * t434;
	t407 = -t332 * qJD(3) + t334 * t449 - t363 * t431 + t376;
	t405 = -t361 * t300 + t362 * t455;
	t321 = -t356 + t380;
	t342 = t394 * t365 + t409;
	t404 = -t321 * t338 + t342 * t452;
	t331 = t349 * t434 - t397;
	t348 = t392 * t365;
	t403 = -t331 * t338 + t348 * t452;
	t333 = t384 * t449 - t383;
	t401 = t333 * t363 + t465 * t334;
	t395 = -t307 + (t308 * t453 + t307) * t309;
	t391 = -t366 * t432 + t433;
	t328 = (t393 * qJD(2) + t391 * qJD(3)) * t365;
	t316 = qJD(3) * t399 + (t391 * qJD(2) + t393 * qJD(3)) * t365;
	t314 = t333 * t362 - t361 * t431;
	t304 = t323 * t362 + t343 * t361;
	t303 = t323 * t361 - t343 * t362;
	t298 = t336 * t434 - t335 * t367 + (-t349 * t449 - t390) * qJD(3);
	t295 = -qJD(3) * t388 + t472;
	t279 = t403 * t309;
	t278 = t404 * t309;
	t272 = t411 * t278 - t307 * t321 + t308 * t342;
	t270 = t403 * t444 + (t348 * t426 - t298 * t338 + (t294 * t348 + t315 * t331 + t319 * t328) * t339) * t309;
	t269 = t404 * t444 + (t342 * t426 - t295 * t338 + (t294 * t342 + t315 * t321 + t316 * t319) * t339) * t309;
	t267 = t445 + (t439 + (-t289 * t459 - t442) * t305) * t478;
	t1 = [t441 * t470 + (-t292 * t338 - t474 * t476) * t309, t270, t269, 0, 0, 0; (t381 * qJD(3) - t389) * t460 + (t395 * t292 - ((-t276 * t309 * t453 + t444) * t307 + (t441 * t471 - t276 + (t276 - t406) * t309) * t308) * t474) * t440 + t475 * (-t387 + t386) - t473 * t395 * t474, (t333 * qJD(3) - t334 * t434 + t377) * t460 + ((-t270 * t319 - t279 * t294 + t328 + (-t279 * t341 - t331) * t276) * t308 + (-t270 * t341 - t279 * t315 - t298 + (t279 * t319 - t348) * t276) * t307) * t440 + t475 * t332 + t473 * (t411 * t279 - t307 * t331 + t308 * t348), (-t272 * t458 - t285 * t325) * t446 + (t272 * t425 + t293 * t285 + (-t325 * t271 - t272 * t292 - (-(-t269 * t319 - t278 * t294 + t316 + (-t278 * t341 - t321) * t276) * t308 - (-t269 * t341 - t278 * t315 - t295 + (t278 * t319 - t342) * t276) * t307) * t474) * t286) * t280, 0, 0, 0; 0.2e1 * (-t300 * t303 + t304 * t455) * t462 + ((t423 * t361 + t422 * t362) * t300 + t304 * t427 + (-t303 * t284 - (-t422 * t361 + t423 * t362) * t305 - t304 * t283) * t301) * t289, (t442 * t478 - t439) * t314 + (-t284 * t457 + t300 * t445) * (t333 * t361 + t362 * t431) + ((t407 * t361 + t401 * t362) * t300 - (-t401 * t361 + t407 * t362) * t455 + t314 * t427) * t289, -t405 * t474 * t445 + (t405 * t292 - ((-t300 * t363 - 0.2e1 * t437) * t362 + (t283 * t362 + (-t305 * t363 + t284) * t361) * t301) * t474) * t289, t267, t267, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 13:29:33
	% EndTime: 2019-10-10 13:29:42
	% DurationCPUTime: 9.43s
	% Computational Cost: add. (32556->246), mult. (74391->465), div. (1246->12), fcn. (94105->17), ass. (0->196)
	t503 = qJ(4) + qJ(5);
	t500 = sin(t503);
	t620 = cos(pkin(6));
	t621 = sin(qJ(2));
	t565 = t620 * t621;
	t509 = cos(qJ(2));
	t622 = sin(qJ(1));
	t583 = t622 * t509;
	t623 = cos(qJ(1));
	t490 = t623 * t565 + t583;
	t530 = t620 * t583 + t623 * t621;
	t480 = qJD(1) * t530 + qJD(2) * t490;
	t499 = t622 * t621;
	t544 = t622 * t565;
	t566 = t620 * t623;
	t481 = -qJD(1) * t544 - qJD(2) * t499 + (qJD(1) * t623 + qJD(2) * t566) * t509;
	t502 = qJD(4) + qJD(5);
	t506 = sin(qJ(3));
	t508 = cos(qJ(3));
	t541 = -t509 * t566 + t499;
	t504 = sin(pkin(6));
	t619 = cos(pkin(7));
	t580 = t504 * t619;
	t558 = t623 * t580;
	t618 = sin(pkin(7));
	t523 = t541 * t618 - t558;
	t579 = t504 * t618;
	t554 = t622 * t579;
	t542 = qJD(1) * t554;
	t557 = t623 * t579;
	t630 = t541 * t619;
	t522 = t630 + t557;
	t626 = t490 * t506 + t522 * t508;
	t569 = t626 * qJD(3) - t502 * t523 - (-t480 * t619 + t542) * t506 - t481 * t508;
	t639 = t500 * t569;
	t501 = cos(t503);
	t596 = t490 * t508;
	t470 = t506 * t522 - t596;
	t555 = t622 * t580;
	t528 = qJD(1) * t555 + t480 * t618;
	t567 = t470 * t502 + t528;
	t410 = -t500 * t567 + t501 * t569;
	t450 = t470 * t500 + t501 * t523;
	t451 = t470 * t501 - t500 * t523;
	t635 = -t530 * t619 + t554;
	t577 = t508 * t619;
	t594 = qJD(3) * t506;
	t633 = (t506 * t630 - t596) * qJD(3) - t480 * t577 - t481 * t506 + t508 * t542 + t557 * t594;
	t576 = t509 * t619;
	t539 = t506 * t576 + t621 * t508;
	t561 = t620 * t618;
	t485 = t504 * t539 + t506 * t561;
	t563 = t618 * t621;
	t559 = t504 * t563;
	t533 = qJD(2) * t559 - t485 * t502;
	t575 = t509 * t618;
	t489 = -t504 * t575 + t619 * t620;
	t564 = t619 * t621;
	t537 = -t506 * t564 + t508 * t509;
	t538 = -t621 * t506 + t508 * t576;
	t553 = qJD(3) * t561;
	t568 = t489 * t502 + t508 * t553 + (t537 * qJD(2) + t538 * qJD(3)) * t504;
	t436 = t500 * t568 - t501 * t533;
	t462 = t485 * t500 - t489 * t501;
	t458 = 0.1e1 / t462 ^ 2;
	t632 = t436 * t458;
	t457 = 0.1e1 / t462;
	t484 = t504 * t538 + t508 * t561;
	t602 = t450 * t458;
	t547 = t457 * t626 - t484 * t602;
	t631 = t500 * t547;
	t529 = -t623 * t509 + t544;
	t518 = t541 * qJD(1) + t529 * qJD(2);
	t629 = qJD(1) * t557 + t518 * t619;
	t628 = t635 * t508;
	t429 = atan2(t450, t462);
	t416 = sin(t429);
	t417 = cos(t429);
	t405 = t416 * t450 + t417 * t462;
	t402 = 0.1e1 / t405;
	t472 = t635 * t506 - t529 * t508;
	t520 = t530 * t618 + t555;
	t453 = t472 * t501 + t500 * t520;
	t507 = cos(qJ(6));
	t471 = -t506 * t529 - t628;
	t505 = sin(qJ(6));
	t600 = t471 * t505;
	t427 = t453 * t507 + t600;
	t419 = 0.1e1 / t427;
	t403 = 0.1e1 / t405 ^ 2;
	t420 = 0.1e1 / t427 ^ 2;
	t625 = 0.2e1 * t450;
	t452 = t472 * t500 - t501 * t520;
	t624 = 0.2e1 * t452;
	t446 = t452 ^ 2;
	t401 = t403 * t446 + 0.1e1;
	t516 = qJD(1) * t558 - t518 * t618;
	t479 = qJD(1) * t490 + qJD(2) * t530;
	t431 = t628 * qJD(3) - t479 * t508 + t629 * t506 + t529 * t594;
	t519 = t502 * t520 + t431;
	t595 = t501 * t502;
	t406 = t472 * t595 + t500 * t519 - t501 * t516;
	t611 = t403 * t452;
	t445 = t450 ^ 2;
	t428 = t445 * t458 + 0.1e1;
	t422 = 0.1e1 / t428;
	t408 = -t470 * t595 - t501 * t528 - t639;
	t551 = -t408 * t457 - t436 * t602;
	t392 = t551 * t422;
	t560 = -t416 * t462 + t417 * t450;
	t386 = t392 * t560 - t416 * t408 + t417 * t436;
	t404 = t402 * t403;
	t616 = t386 * t404;
	t617 = (t406 * t611 - t446 * t616) / t401 ^ 2;
	t604 = t457 * t632;
	t614 = (-t408 * t602 - t445 * t604) / t428 ^ 2;
	t407 = t519 * t501 + (-t472 * t502 + t516) * t500;
	t430 = t472 * qJD(3) - t479 * t506 - t629 * t508;
	t599 = t471 * t507;
	t426 = t453 * t505 - t599;
	t593 = qJD(6) * t426;
	t397 = t407 * t507 + t430 * t505 - t593;
	t613 = t397 * t419 * t420;
	t612 = t403 * t406;
	t396 = qJD(6) * t427 + t407 * t505 - t430 * t507;
	t418 = t426 ^ 2;
	t413 = t418 * t420 + 0.1e1;
	t606 = t420 * t426;
	t610 = 0.1e1 / t413 ^ 2 * (t396 * t606 - t418 * t613);
	t609 = t416 * t452;
	t608 = t417 * t452;
	t607 = t419 * t505;
	t605 = t426 * t507;
	t603 = t450 * t457;
	t601 = t471 * t500;
	t592 = 0.2e1 * t617;
	t591 = -0.2e1 * t614;
	t590 = t404 * t624;
	t589 = -0.2e1 * t610;
	t588 = 0.2e1 * t610;
	t587 = t457 * t614;
	t586 = t426 * t613;
	t585 = t403 * t609;
	t584 = t403 * t608;
	t582 = t501 * t618;
	t581 = t502 * t618;
	t578 = t506 * t619;
	t574 = -0.2e1 * t402 * t617;
	t573 = t403 * t592;
	t572 = t386 * t590;
	t571 = 0.2e1 * t586;
	t570 = t604 * t625;
	t562 = qJD(6) * t471 * t501 + t431;
	t425 = t451 * t507 - t505 * t626;
	t424 = t451 * t505 + t507 * t626;
	t477 = -t508 * t530 + t529 * t578;
	t456 = -t500 * t529 * t618 + t477 * t501;
	t476 = -t506 * t530 - t529 * t577;
	t441 = t456 * t507 + t476 * t505;
	t440 = t456 * t505 - t476 * t507;
	t552 = -t476 * qJD(3) + t479 * t578 + t518 * t508 - t529 * t581;
	t550 = t420 * t605 - t607;
	t463 = t485 * t501 + t489 * t500;
	t549 = t451 * t457 - t463 * t602;
	t475 = -t490 * t578 - t508 * t541;
	t454 = t475 * t500 - t490 * t582;
	t488 = t537 * t504;
	t478 = t488 * t500 - t501 * t559;
	t548 = -t454 * t457 - t478 * t602;
	t545 = t477 * t502 + t618 * t479;
	t540 = -t416 + (-t417 * t603 + t416) * t422;
	t536 = -t506 * t509 - t508 * t564;
	t535 = qJD(6) * t472 - t430 * t501 + t502 * t601;
	t460 = -t506 * t553 + (qJD(2) * t536 - qJD(3) * t539) * t504;
	t455 = t477 * t500 + t529 * t582;
	t444 = t488 * t595 + ((qJD(3) * t536 + t502 * t563) * t500 + (-t500 * t539 - t501 * t575) * qJD(2)) * t504;
	t443 = t472 * t505 - t501 * t599;
	t442 = -t472 * t507 - t501 * t600;
	t438 = qJD(3) * t477 - t479 * t577 + t506 * t518;
	t437 = t500 * t533 + t501 * t568;
	t415 = t475 * t595 - t481 * t582 + (-t481 * t578 - t480 * t508 + (-t490 * t577 + t506 * t541) * qJD(3) + t490 * t581) * t500;
	t414 = -t500 * t545 + t501 * t552;
	t411 = 0.1e1 / t413;
	t399 = 0.1e1 / t401;
	t398 = t422 * t631;
	t395 = t548 * t422;
	t394 = t549 * t422;
	t391 = t540 * t452;
	t389 = (t416 * t626 + t417 * t484) * t500 + t560 * t398;
	t387 = t394 * t560 + t416 * t451 + t417 * t463;
	t385 = t548 * t591 + (t478 * t570 - t415 * t457 + (t408 * t478 + t436 * t454 - t444 * t450) * t458) * t422;
	t383 = t549 * t591 + (t463 * t570 + t410 * t457 + (t408 * t463 - t436 * t451 - t437 * t450) * t458) * t422;
	t382 = t591 * t631 + (t547 * t595 + (t484 * t570 - t633 * t457 + (t408 * t484 - t436 * t626 - t450 * t460) * t458) * t500) * t422;
	t381 = t550 * t452 * t589 + (t550 * t406 + ((-qJD(6) * t419 - 0.2e1 * t586) * t507 + (t396 * t507 + (t397 - t593) * t505) * t420) * t452) * t411;
	t380 = (t387 * t611 - t402 * t453) * t592 + (t387 * t572 + t407 * t402 + (-t453 * t386 - t387 * t406 - (t383 * t450 - t394 * t408 + t437 + (-t394 * t462 + t451) * t392) * t608 - (-t383 * t462 - t394 * t436 + t410 + (-t394 * t450 - t463) * t392) * t609) * t403) * t399;
	t1 = [t587 * t624 + (-t406 * t457 + t452 * t632) * t422, t385, t382, t383, t383, 0; t450 * t574 + ((t501 * t567 + t639) * t402 + (-t386 * t450 - t391 * t406) * t403) * t399 + (t391 * t573 + (0.2e1 * t391 * t616 - (t392 * t422 * t603 + t591) * t585 - (t587 * t625 - t392 + (t392 - t551) * t422) * t584 - t540 * t612) * t399) * t452, t455 * t574 + ((t500 * t552 + t501 * t545) * t402 - t455 * t403 * t386 - ((t385 * t450 - t395 * t408 + t444 + (-t395 * t462 - t454) * t392) * t417 + (-t385 * t462 - t395 * t436 - t415 + (-t395 * t450 - t478) * t392) * t416) * t611) * t399 + (t452 * t573 + (-t612 + t572) * t399) * (t395 * t560 - t416 * t454 + t417 * t478), (t389 * t611 + t402 * t601) * t592 + (-t389 * t612 + (-t430 * t500 - t471 * t595) * t402 + (t389 * t590 + t403 * t601) * t386 - (t484 * t595 + t382 * t450 - t398 * t408 + t460 * t500 + (-t398 * t462 + t500 * t626) * t392) * t584 - (t626 * t595 - t382 * t462 - t398 * t436 - t633 * t500 + (-t398 * t450 - t484 * t500) * t392) * t585) * t399, t380, t380, 0; (-t419 * t424 + t425 * t606) * t588 + ((qJD(6) * t425 + t410 * t505 - t507 * t633) * t419 + t425 * t571 + (-t424 * t397 - (-qJD(6) * t424 + t410 * t507 + t505 * t633) * t426 - t425 * t396) * t420) * t411, (-t419 * t440 + t441 * t606) * t588 + ((qJD(6) * t441 + t414 * t505 - t438 * t507) * t419 + t441 * t571 + (-t440 * t397 - (-qJD(6) * t440 + t414 * t507 + t438 * t505) * t426 - t441 * t396) * t420) * t411, (-t419 * t442 + t443 * t606) * t588 + (t443 * t571 - t562 * t419 * t507 + t535 * t607 + (-t426 * t505 * t562 - t443 * t396 - t442 * t397 - t535 * t605) * t420) * t411, t381, t381, t589 + 0.2e1 * (t396 * t420 * t411 + (-t411 * t613 - t420 * t610) * t426) * t426;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end