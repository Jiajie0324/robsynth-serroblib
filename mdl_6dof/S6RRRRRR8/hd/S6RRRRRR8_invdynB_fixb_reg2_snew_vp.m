% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 14:16
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 14:04:42
% EndTime: 2019-05-08 14:10:22
% DurationCPUTime: 237.58s
% Computational Cost: add. (2419284->1289), mult. (5934032->2155), div. (0->0), fcn. (5096847->16), ass. (0->945)
t1447 = sin(pkin(7));
t1449 = cos(pkin(7));
t1450 = cos(pkin(6));
t1702 = qJD(1) * t1450;
t1439 = qJD(2) + t1702;
t1438 = t1439 ^ 2;
t1448 = sin(pkin(6));
t1455 = sin(qJ(2));
t1461 = cos(qJ(2));
t1456 = sin(qJ(1));
t1462 = cos(qJ(1));
t1435 = t1456 * g(1) - t1462 * g(2);
t1536 = qJDD(1) * pkin(1) + t1435;
t1510 = t1450 * t1536;
t1710 = pkin(10) * t1455;
t1537 = -pkin(2) * t1461 - t1447 * t1710;
t1526 = t1537 * t1448;
t1436 = g(1) * t1462 + t1456 * g(2);
t1721 = qJD(1) ^ 2;
t1709 = t1721 * pkin(1);
t1528 = t1436 + t1709;
t1629 = qJDD(1) * t1450 + qJDD(2);
t1605 = t1629 * pkin(2);
t1711 = pkin(10) * t1449;
t1648 = -pkin(9) - t1711;
t1652 = qJDD(1) * t1455;
t1662 = t1449 * t1461;
t1712 = pkin(10) * t1447;
t1713 = pkin(9) * t1450;
t1469 = t1438 * t1712 + t1455 * t1528 + t1461 * t1510 + t1605 + (-t1461 * g(3) + t1648 * t1652 + ((-qJD(2) + t1439) * pkin(10) * t1662 + qJD(1) * (-t1455 * t1526 + t1461 * t1713)) * qJD(1)) * t1448;
t1667 = t1448 * t1455;
t1646 = qJD(1) * t1667;
t1437 = qJD(2) * t1646;
t1445 = t1455 ^ 2;
t1446 = t1461 ^ 2;
t1653 = t1445 + t1446;
t1658 = qJD(2) + t1439;
t1671 = t1439 * t1455;
t1703 = qJD(1) * t1448;
t1708 = t1450 * g(3);
t1471 = t1437 * pkin(2) - t1708 + ((-pkin(1) + t1537) * qJDD(1) + (pkin(2) * t1671 - pkin(9) * t1703 + (-t1658 * t1461 * t1447 - t1449 * t1653 * t1703) * pkin(10)) * qJD(1) - t1435) * t1448;
t1268 = t1447 * t1469 - t1449 * t1471;
t1454 = sin(qJ(3));
t1460 = cos(qJ(3));
t1666 = t1448 * t1461;
t1645 = qJD(1) * t1666;
t1627 = t1449 * t1645;
t1668 = t1447 * t1460;
t1397 = -t1439 * t1668 + t1454 * t1646 - t1460 * t1627;
t1651 = qJDD(1) * t1461;
t1621 = t1448 * t1651 - t1437;
t1479 = t1447 * t1629 + t1449 * t1621;
t1701 = qJD(1) * t1461;
t1529 = qJD(2) * t1701 + t1652;
t1492 = t1529 * t1448;
t1474 = t1454 * t1479 + t1460 * t1492;
t1355 = -t1397 * qJD(3) + t1474;
t1628 = t1447 * t1645;
t1665 = t1449 * t1439;
t1414 = -qJD(3) + t1628 - t1665;
t1378 = t1397 * t1414;
t1316 = t1378 + t1355;
t1745 = -t1316 * pkin(11) - t1268;
t1451 = sin(qJ(6));
t1669 = t1447 * t1454;
t1399 = t1439 * t1669 + (t1454 * t1662 + t1455 * t1460) * t1703;
t1453 = sin(qJ(4));
t1459 = cos(qJ(4));
t1374 = -t1453 * t1399 - t1414 * t1459;
t1375 = t1399 * t1459 - t1414 * t1453;
t1452 = sin(qJ(5));
t1458 = cos(qJ(5));
t1331 = t1374 * t1452 + t1375 * t1458;
t1392 = qJD(4) + t1397;
t1390 = qJD(5) + t1392;
t1457 = cos(qJ(6));
t1296 = t1331 * t1451 - t1457 * t1390;
t1298 = t1331 * t1457 + t1390 * t1451;
t1231 = t1298 * t1296;
t1485 = -t1447 * t1621 + t1449 * t1629 + qJDD(3);
t1630 = t1355 * t1453 - t1459 * t1485;
t1288 = -qJD(4) * t1375 - t1630;
t1289 = t1374 * qJD(4) + t1459 * t1355 + t1453 * t1485;
t1632 = -t1458 * t1288 + t1289 * t1452;
t1201 = -qJD(5) * t1331 - t1632;
t1495 = qJDD(6) - t1201;
t1728 = -t1231 + t1495;
t1740 = t1451 * t1728;
t1329 = -t1458 * t1374 + t1375 * t1452;
t1267 = t1331 * t1329;
t1481 = t1454 * t1492 - t1460 * t1479;
t1354 = -t1399 * qJD(3) - t1481;
t1477 = qJDD(4) - t1354;
t1352 = qJDD(5) + t1477;
t1727 = -t1267 + t1352;
t1739 = t1452 * t1727;
t1333 = t1374 * t1375;
t1725 = t1333 + t1477;
t1738 = t1453 * t1725;
t1737 = t1457 * t1728;
t1736 = t1458 * t1727;
t1735 = t1459 * t1725;
t1734 = t1447 * t1471 + t1449 * t1469;
t1301 = t1390 * t1329;
t1494 = qJD(5) * t1329 - t1288 * t1452 - t1289 * t1458;
t1733 = t1494 + t1301;
t1444 = t1448 ^ 2;
t1731 = t1444 * t1455;
t1679 = t1399 * t1397;
t1480 = t1485 - t1679;
t1730 = t1454 * t1480;
t1729 = t1460 * t1480;
t1347 = t1392 * t1374;
t1259 = t1347 - t1289;
t1258 = t1347 + t1289;
t1325 = qJD(6) + t1329;
t1246 = t1325 * t1296;
t1635 = t1296 * qJD(6) - t1451 * t1352 + t1457 * t1494;
t1118 = t1635 + t1246;
t1633 = -t1457 * t1352 - t1451 * t1494;
t1113 = t1298 * (qJD(6) - t1325) + t1633;
t1165 = (qJD(5) - t1390) * t1331 + t1632;
t1255 = (qJD(4) - t1392) * t1375 + t1630;
t1294 = t1296 ^ 2;
t1295 = t1298 ^ 2;
t1322 = t1325 ^ 2;
t1327 = t1329 ^ 2;
t1328 = t1331 ^ 2;
t1720 = t1374 ^ 2;
t1373 = t1375 ^ 2;
t1719 = t1390 ^ 2;
t1391 = t1392 ^ 2;
t1393 = t1397 ^ 2;
t1394 = t1399 ^ 2;
t1718 = t1414 ^ 2;
t1717 = pkin(3) * t1454;
t1716 = pkin(3) * t1460;
t1715 = pkin(5) * t1452;
t1714 = pkin(9) * t1448;
t1265 = pkin(5) * t1329 - pkin(13) * t1331;
t1366 = pkin(3) * t1397 - pkin(11) * t1399;
t1440 = g(3) * t1667;
t1493 = qJDD(1) * t1714 - t1436;
t1661 = t1450 * t1455;
t1326 = t1461 * t1493 + t1455 * t1510 - t1440 - t1438 * pkin(2) + t1479 * pkin(10) + (-pkin(1) * t1701 + (t1665 * t1710 + (pkin(9) * t1661 + t1461 * t1526) * qJD(1)) * t1448) * qJD(1);
t1659 = t1460 * t1326;
t1466 = pkin(11) * t1485 - t1397 * t1366 + t1454 * t1734 + t1659;
t1465 = -pkin(3) * t1718 + t1466;
t1676 = t1414 * t1399;
t1631 = -t1354 - t1676;
t1467 = t1631 * pkin(3) + t1745;
t1108 = t1453 * t1467 + t1459 * t1465;
t1341 = pkin(4) * t1392 - pkin(12) * t1375;
t1056 = -pkin(4) * t1720 + pkin(12) * t1288 - t1341 * t1392 + t1108;
t1107 = t1453 * t1465 - t1459 * t1467;
t1464 = pkin(4) * t1725 + pkin(12) * t1259 - t1107;
t968 = t1056 * t1452 - t1458 * t1464;
t959 = -t1352 * pkin(5) - pkin(13) * t1719 + t1265 * t1331 + t968;
t1707 = t1451 * t959;
t969 = t1458 * t1056 + t1452 * t1464;
t893 = t1452 * t969 - t1458 * t968;
t1706 = t1453 * t893;
t1705 = t1457 * t959;
t1704 = t1459 * t893;
t1214 = t1326 * t1454 - t1460 * t1734;
t1191 = -t1485 * pkin(3) - t1718 * pkin(11) + t1366 * t1399 + t1214;
t1130 = -t1288 * pkin(4) - t1720 * pkin(12) + t1341 * t1375 + t1191;
t1012 = t1733 * pkin(13) + (t1331 * t1390 - t1201) * pkin(5) + t1130;
t960 = -pkin(5) * t1719 + pkin(13) * t1352 - t1265 * t1329 + t969;
t898 = t1451 * t1012 + t1457 * t960;
t1700 = t1130 * t1452;
t1699 = t1130 * t1458;
t1144 = t1231 + t1495;
t1698 = t1144 * t1451;
t1697 = t1144 * t1457;
t1696 = t1191 * t1453;
t1695 = t1191 * t1459;
t1226 = t1267 + t1352;
t1694 = t1226 * t1452;
t1693 = t1226 * t1458;
t1692 = t1268 * t1454;
t1691 = t1268 * t1460;
t1277 = -t1333 + t1477;
t1690 = t1277 * t1453;
t1689 = t1277 * t1459;
t1688 = t1325 * t1451;
t1687 = t1325 * t1457;
t1342 = -t1485 - t1679;
t1686 = t1342 * t1454;
t1685 = t1342 * t1460;
t1684 = t1390 * t1452;
t1683 = t1390 * t1458;
t1682 = t1392 * t1453;
t1681 = t1392 * t1459;
t1680 = t1397 * t1460;
t1486 = t1714 * t1721 + t1536;
t1409 = t1448 * t1486 + t1708;
t1678 = t1409 * t1455;
t1677 = t1409 * t1461;
t1660 = t1455 * t1721;
t1636 = t1461 * t1660;
t1434 = t1444 * t1636;
t1416 = t1434 + t1629;
t1675 = t1416 * t1455;
t1674 = t1416 * t1461;
t1417 = -t1434 + t1629;
t1673 = t1417 * t1455;
t1672 = t1417 * t1461;
t1670 = t1444 * t1721;
t1664 = t1449 * t1454;
t1663 = t1449 * t1460;
t1657 = qJD(3) - t1414;
t1649 = -pkin(5) * t1458 - pkin(4);
t1647 = t1439 * t1703;
t1644 = t1445 * t1670;
t1643 = t1446 * t1670;
t1642 = t1452 * t1231;
t1641 = t1458 * t1231;
t1640 = t1454 * t1267;
t1639 = t1460 * t1267;
t1638 = t1454 * t1333;
t1637 = t1460 * t1333;
t894 = t1452 * t968 + t1458 * t969;
t897 = -t1457 * t1012 + t1451 * t960;
t1634 = -t1439 + t1702;
t1023 = t1107 * t1453 + t1459 * t1108;
t1411 = -t1435 * t1456 - t1462 * t1436;
t1433 = qJDD(1) * t1462 - t1456 * t1721;
t1626 = -pkin(8) * t1433 - g(3) * t1456;
t1415 = -t1644 - t1438;
t1383 = -t1415 * t1455 - t1672;
t1625 = pkin(9) * t1383 - t1678;
t1421 = -t1438 - t1643;
t1388 = t1421 * t1461 - t1675;
t1624 = pkin(9) * t1388 + t1677;
t1353 = -t1718 - t1393;
t1285 = t1353 * t1460 - t1730;
t1623 = pkin(10) * t1285 + t1691;
t1361 = -t1394 - t1718;
t1292 = -t1361 * t1454 + t1685;
t1622 = pkin(10) * t1292 - t1692;
t852 = t1451 * t898 - t1457 * t897;
t853 = t1451 * t897 + t1457 * t898;
t824 = t1452 * t853 - t1458 * t959;
t825 = t1452 * t959 + t1458 * t853;
t782 = -t1453 * t824 + t1459 * t825;
t1620 = t1454 * t782 - t1460 * t852;
t781 = t1453 * t825 + t1459 * t824;
t748 = -t1447 * t781 + t1449 * t1620;
t770 = t1454 * t852 + t1460 * t782;
t1619 = t1455 * t770 + t1461 * t748;
t849 = t1459 * t894 - t1706;
t1590 = -t1130 * t1460 + t1454 * t849;
t848 = t1453 * t894 + t1704;
t792 = -t1447 * t848 + t1449 * t1590;
t839 = t1130 * t1454 + t1460 * t849;
t1618 = t1455 * t839 + t1461 * t792;
t1117 = -t1246 + t1635;
t1025 = -t1113 * t1451 + t1117 * t1457;
t1027 = -t1113 * t1457 - t1117 * t1451;
t1200 = t1294 + t1295;
t998 = t1027 * t1452 + t1200 * t1458;
t999 = t1027 * t1458 - t1200 * t1452;
t910 = -t1453 * t998 + t1459 * t999;
t1603 = -t1025 * t1460 + t1454 * t910;
t909 = t1453 * t999 + t1459 * t998;
t843 = -t1447 * t909 + t1449 * t1603;
t879 = t1025 * t1454 + t1460 * t910;
t1617 = t1455 * t879 + t1461 * t843;
t1114 = (-qJD(6) - t1325) * t1298 - t1633;
t1024 = -t1114 * t1451 + t1118 * t1457;
t1026 = t1114 * t1457 + t1118 * t1451;
t1230 = -t1295 + t1294;
t1002 = t1026 * t1452 + t1230 * t1458;
t1003 = t1026 * t1458 - t1230 * t1452;
t921 = -t1002 * t1453 + t1003 * t1459;
t1604 = t1024 * t1460 + t1454 * t921;
t920 = t1002 * t1459 + t1003 * t1453;
t851 = -t1447 * t920 + t1449 * t1604;
t884 = -t1024 * t1454 + t1460 * t921;
t1616 = t1455 * t884 + t1461 * t851;
t1207 = -t1322 - t1294;
t1079 = t1207 * t1451 + t1737;
t1080 = t1207 * t1457 - t1740;
t1006 = t1080 * t1452 + t1114 * t1458;
t1007 = t1080 * t1458 - t1114 * t1452;
t928 = -t1006 * t1453 + t1007 * t1459;
t1596 = -t1079 * t1460 + t1454 * t928;
t927 = t1006 * t1459 + t1007 * t1453;
t855 = -t1447 * t927 + t1449 * t1596;
t892 = t1079 * t1454 + t1460 * t928;
t1615 = t1455 * t892 + t1461 * t855;
t1209 = -t1295 - t1322;
t1084 = t1209 * t1457 - t1698;
t1085 = -t1209 * t1451 - t1697;
t1008 = t1085 * t1452 + t1118 * t1458;
t1009 = t1085 * t1458 - t1118 * t1452;
t932 = -t1008 * t1453 + t1009 * t1459;
t1595 = -t1084 * t1460 + t1454 * t932;
t931 = t1008 * t1459 + t1009 * t1453;
t857 = -t1447 * t931 + t1449 * t1595;
t895 = t1084 * t1454 + t1460 * t932;
t1614 = t1455 * t895 + t1461 * t857;
t1245 = -t1295 + t1322;
t1094 = -t1245 * t1457 - t1740;
t1096 = -t1245 * t1451 + t1737;
t1016 = t1096 * t1452 + t1117 * t1458;
t1018 = t1096 * t1458 - t1117 * t1452;
t947 = -t1016 * t1453 + t1018 * t1459;
t1594 = t1094 * t1460 + t1454 * t947;
t945 = t1016 * t1459 + t1018 * t1453;
t863 = -t1447 * t945 + t1449 * t1594;
t904 = -t1094 * t1454 + t1460 * t947;
t1613 = t1455 * t904 + t1461 * t863;
t1244 = t1294 - t1322;
t1095 = -t1244 * t1451 - t1697;
t1097 = t1244 * t1457 - t1698;
t1017 = t1097 * t1452 + t1113 * t1458;
t1019 = t1097 * t1458 - t1113 * t1452;
t948 = -t1017 * t1453 + t1019 * t1459;
t1593 = t1095 * t1460 + t1454 * t948;
t946 = t1017 * t1459 + t1019 * t1453;
t864 = -t1447 * t946 + t1449 * t1593;
t905 = -t1095 * t1454 + t1460 * t948;
t1612 = t1455 * t905 + t1461 * t864;
t1149 = -qJD(6) * t1298 - t1633;
t1109 = -t1149 * t1457 - t1296 * t1688;
t1110 = -t1149 * t1451 + t1296 * t1687;
t1063 = t1110 * t1452 + t1641;
t1065 = t1110 * t1458 - t1642;
t980 = -t1063 * t1453 + t1065 * t1459;
t1592 = t1109 * t1460 + t1454 * t980;
t978 = t1063 * t1459 + t1065 * t1453;
t889 = -t1447 * t978 + t1449 * t1592;
t953 = -t1109 * t1454 + t1460 * t980;
t1611 = t1455 * t953 + t1461 * t889;
t1111 = -t1298 * t1687 + t1451 * t1635;
t1112 = -t1298 * t1688 - t1457 * t1635;
t1064 = t1112 * t1452 - t1641;
t1066 = t1112 * t1458 + t1642;
t981 = -t1064 * t1453 + t1066 * t1459;
t1591 = t1111 * t1460 + t1454 * t981;
t979 = t1064 * t1459 + t1066 * t1453;
t890 = -t1447 * t979 + t1449 * t1591;
t954 = -t1111 * t1454 + t1460 * t981;
t1610 = t1455 * t954 + t1461 * t890;
t1216 = -t1327 - t1328;
t1169 = -t1301 + t1494;
t1074 = -t1165 * t1452 + t1169 * t1458;
t1076 = -t1165 * t1458 - t1169 * t1452;
t997 = -t1074 * t1453 + t1076 * t1459;
t1589 = -t1216 * t1460 + t1454 * t997;
t995 = t1074 * t1459 + t1076 * t1453;
t901 = -t1447 * t995 + t1449 * t1589;
t966 = t1216 * t1454 + t1460 * t997;
t1609 = t1455 * t966 + t1461 * t901;
t1266 = -t1328 + t1327;
t1164 = (qJD(5) + t1390) * t1331 + t1632;
t1073 = -t1164 * t1452 - t1458 * t1733;
t1075 = -t1164 * t1458 + t1452 * t1733;
t996 = -t1073 * t1453 + t1075 * t1459;
t1588 = t1266 * t1460 + t1454 * t996;
t994 = t1073 * t1459 + t1075 * t1453;
t903 = -t1447 * t994 + t1449 * t1588;
t974 = -t1266 * t1454 + t1460 * t996;
t1608 = t1455 * t974 + t1461 * t903;
t1180 = (-t1296 * t1457 + t1298 * t1451) * t1325;
t1100 = t1180 * t1452 - t1458 * t1495;
t1101 = t1180 * t1458 + t1452 * t1495;
t1014 = t1100 * t1459 + t1101 * t1453;
t1015 = -t1100 * t1453 + t1101 * t1459;
t1179 = (t1296 * t1451 + t1298 * t1457) * t1325;
t1587 = t1015 * t1454 + t1179 * t1460;
t919 = -t1014 * t1447 + t1449 * t1587;
t982 = t1015 * t1460 - t1179 * t1454;
t1607 = t1455 * t982 + t1461 * t919;
t1022 = -t1107 * t1459 + t1108 * t1453;
t1586 = t1023 * t1454 - t1191 * t1460;
t924 = -t1022 * t1447 + t1449 * t1586;
t992 = t1023 * t1460 + t1191 * t1454;
t1606 = t1455 * t992 + t1461 * t924;
t1247 = -t1719 - t1327;
t1174 = t1247 * t1452 + t1736;
t1175 = t1247 * t1458 - t1739;
t1083 = -t1174 * t1453 + t1175 * t1459;
t1031 = t1083 * t1460 + t1164 * t1454;
t1082 = t1174 * t1459 + t1175 * t1453;
t1583 = t1083 * t1454 - t1164 * t1460;
t964 = -t1082 * t1447 + t1449 * t1583;
t1602 = t1031 * t1455 + t1461 * t964;
t1280 = -t1328 - t1719;
t1187 = t1280 * t1458 - t1694;
t1188 = -t1280 * t1452 - t1693;
t1103 = -t1187 * t1453 + t1188 * t1459;
t1039 = t1103 * t1460 - t1454 * t1733;
t1102 = t1187 * t1459 + t1188 * t1453;
t1581 = t1103 * t1454 + t1460 * t1733;
t977 = -t1102 * t1447 + t1449 * t1581;
t1601 = t1039 * t1455 + t1461 * t977;
t1300 = -t1328 + t1719;
t1194 = t1300 * t1458 + t1739;
t1196 = -t1300 * t1452 + t1736;
t1123 = -t1194 * t1453 + t1196 * t1459;
t1040 = t1123 * t1460 - t1169 * t1454;
t1121 = t1194 * t1459 + t1196 * t1453;
t1579 = t1123 * t1454 + t1169 * t1460;
t987 = -t1121 * t1447 + t1449 * t1579;
t1600 = t1040 * t1455 + t1461 * t987;
t1299 = t1327 - t1719;
t1195 = t1299 * t1452 + t1693;
t1197 = t1299 * t1458 - t1694;
t1124 = -t1195 * t1453 + t1197 * t1459;
t1041 = t1124 * t1460 - t1165 * t1454;
t1122 = t1195 * t1459 + t1197 * t1453;
t1578 = t1124 * t1454 + t1165 * t1460;
t988 = -t1122 * t1447 + t1449 * t1578;
t1599 = t1041 * t1455 + t1461 * t988;
t1160 = t1201 * t1458 + t1329 * t1684;
t1161 = -t1201 * t1452 + t1329 * t1683;
t1071 = -t1160 * t1453 + t1161 * t1459;
t1044 = t1071 * t1460 - t1640;
t1069 = t1160 * t1459 + t1161 * t1453;
t1535 = t1071 * t1454 + t1639;
t972 = -t1069 * t1447 + t1449 * t1535;
t1598 = t1044 * t1455 + t1461 * t972;
t1162 = t1331 * t1683 - t1452 * t1494;
t1163 = -t1331 * t1684 - t1458 * t1494;
t1072 = -t1162 * t1453 + t1163 * t1459;
t1045 = t1072 * t1460 + t1640;
t1070 = t1162 * t1459 + t1163 * t1453;
t1534 = t1072 * t1454 - t1639;
t973 = -t1070 * t1447 + t1449 * t1534;
t1597 = t1045 * t1455 + t1461 * t973;
t1232 = (-t1329 * t1452 - t1331 * t1458) * t1390;
t1233 = (-t1329 * t1458 + t1331 * t1452) * t1390;
t1170 = t1232 * t1459 + t1233 * t1453;
t1171 = -t1232 * t1453 + t1233 * t1459;
t1571 = t1171 * t1454 - t1352 * t1460;
t1059 = -t1170 * t1447 + t1449 * t1571;
t1152 = t1171 * t1460 + t1352 * t1454;
t1585 = t1059 * t1461 + t1152 * t1455;
t1184 = -t1255 * t1453 + t1259 * t1459;
t1186 = -t1255 * t1459 - t1259 * t1453;
t1290 = t1373 + t1720;
t1569 = t1186 * t1454 + t1290 * t1460;
t1078 = -t1184 * t1447 + t1449 * t1569;
t1153 = t1186 * t1460 - t1290 * t1454;
t1584 = t1078 * t1461 + t1153 * t1455;
t1256 = (-qJD(4) - t1392) * t1375 - t1630;
t1183 = t1256 * t1453 + t1258 * t1459;
t1185 = t1256 * t1459 - t1258 * t1453;
t1332 = -t1373 + t1720;
t1570 = t1185 * t1454 + t1332 * t1460;
t1087 = -t1183 * t1447 + t1449 * t1570;
t1158 = t1185 * t1460 - t1332 * t1454;
t1582 = t1087 * t1461 + t1158 * t1455;
t1305 = -t1391 - t1720;
t1219 = t1305 * t1453 + t1735;
t1220 = t1305 * t1459 - t1738;
t1565 = t1220 * t1454 + t1256 * t1460;
t1120 = -t1219 * t1447 + t1449 * t1565;
t1173 = t1220 * t1460 - t1256 * t1454;
t1580 = t1120 * t1461 + t1173 * t1455;
t1482 = t1450 * t1486;
t1504 = t1439 * t1447 + t1627;
t1487 = qJD(1) * t1504;
t1215 = t1659 + (t1449 * (-g(3) * t1666 + t1461 * t1482 + t1605) + t1447 * (-pkin(2) * t1621 - t1409) + (t1449 * (-qJD(2) * t1627 + t1439 * t1504) + t1447 * (-qJD(2) * t1628 - t1487 * t1666)) * pkin(10) + (t1449 * t1528 + (pkin(2) * t1487 + (-pkin(10) * t1447 ^ 2 + t1449 * t1648) * qJDD(1)) * t1448) * t1455) * t1454;
t1566 = -t1214 * t1460 + t1215 * t1454;
t1127 = t1268 * t1447 + t1449 * t1566;
t1151 = t1214 * t1454 + t1215 * t1460;
t1577 = t1127 * t1461 + t1151 * t1455;
t1321 = -t1373 - t1391;
t1223 = t1321 * t1459 - t1690;
t1224 = -t1321 * t1453 - t1689;
t1563 = t1224 * t1454 - t1258 * t1460;
t1129 = -t1223 * t1447 + t1449 * t1563;
t1176 = t1224 * t1460 + t1258 * t1454;
t1576 = t1129 * t1461 + t1176 * t1455;
t1346 = -t1373 + t1391;
t1236 = t1346 * t1459 + t1738;
t1238 = -t1346 * t1453 + t1735;
t1560 = t1238 * t1454 + t1259 * t1460;
t1134 = -t1236 * t1447 + t1449 * t1560;
t1181 = t1238 * t1460 - t1259 * t1454;
t1575 = t1134 * t1461 + t1181 * t1455;
t1345 = -t1391 + t1720;
t1237 = t1345 * t1453 + t1689;
t1239 = t1345 * t1459 - t1690;
t1559 = t1239 * t1454 + t1255 * t1460;
t1135 = -t1237 * t1447 + t1449 * t1559;
t1182 = t1239 * t1460 - t1255 * t1454;
t1574 = t1135 * t1461 + t1182 * t1455;
t1251 = t1288 * t1459 - t1374 * t1682;
t1252 = -t1288 * t1453 - t1374 * t1681;
t1533 = t1252 * t1454 - t1637;
t1156 = -t1251 * t1447 + t1449 * t1533;
t1210 = t1252 * t1460 + t1638;
t1573 = t1156 * t1461 + t1210 * t1455;
t1253 = t1289 * t1453 + t1375 * t1681;
t1254 = t1289 * t1459 - t1375 * t1682;
t1532 = t1254 * t1454 + t1637;
t1157 = -t1253 * t1447 + t1449 * t1532;
t1211 = t1254 * t1460 - t1638;
t1572 = t1157 * t1461 + t1211 * t1455;
t1281 = (t1374 * t1453 - t1375 * t1459) * t1392;
t1282 = (t1374 * t1459 + t1375 * t1453) * t1392;
t1475 = t1454 * t1282 - t1460 * t1477;
t1204 = -t1447 * t1281 + t1449 * t1475;
t1248 = t1460 * t1282 + t1454 * t1477;
t1568 = t1204 * t1461 + t1248 * t1455;
t1339 = -t1393 - t1394;
t1317 = -t1378 + t1355;
t1476 = (-qJD(3) - t1414) * t1399 - t1481;
t1552 = -t1317 * t1460 + t1454 * t1476;
t1213 = -t1339 * t1447 + t1449 * t1552;
t1250 = t1317 * t1454 + t1460 * t1476;
t1567 = t1213 * t1461 + t1250 * t1455;
t1367 = t1394 - t1393;
t1312 = t1399 * t1657 + t1481;
t1553 = -t1312 * t1454 + t1316 * t1460;
t1222 = -t1367 * t1447 + t1449 * t1553;
t1249 = -t1312 * t1460 - t1316 * t1454;
t1564 = t1222 * t1461 + t1249 * t1455;
t1548 = t1353 * t1454 + t1729;
t1229 = -t1312 * t1447 + t1449 * t1548;
t1562 = t1229 * t1461 + t1285 * t1455;
t1315 = -t1397 * t1657 + t1474;
t1551 = t1361 * t1460 + t1686;
t1235 = -t1315 * t1447 + t1449 * t1551;
t1561 = t1235 * t1461 + t1292 * t1455;
t1377 = -t1394 + t1718;
t1549 = t1377 * t1460 + t1730;
t1242 = -t1317 * t1447 + t1449 * t1549;
t1303 = -t1377 * t1454 + t1729;
t1558 = t1242 * t1461 + t1303 * t1455;
t1376 = t1393 - t1718;
t1550 = t1376 * t1454 - t1685;
t1243 = -t1447 * t1476 + t1449 * t1550;
t1304 = t1376 * t1460 + t1686;
t1557 = t1243 * t1461 + t1304 * t1455;
t1273 = t1354 * t1663 + (t1399 * t1447 - t1414 * t1664) * t1397;
t1310 = -t1354 * t1454 - t1414 * t1680;
t1556 = t1273 * t1461 + t1310 * t1455;
t1275 = t1355 * t1664 + (-t1397 * t1447 - t1414 * t1663) * t1399;
t1311 = t1355 * t1460 + t1454 * t1676;
t1555 = t1275 * t1461 + t1311 * t1455;
t1527 = t1414 * (t1397 * t1454 + t1399 * t1460);
t1309 = -t1447 * t1485 + t1449 * t1527;
t1338 = (-t1399 * t1454 + t1680) * t1414;
t1554 = t1309 * t1461 + t1338 * t1455;
t1483 = t1493 - t1709;
t1381 = t1455 * t1483 + (t1448 * g(3) - t1482) * t1461;
t1382 = t1455 * t1482 + t1461 * t1483 - t1440;
t1547 = -t1381 * t1461 + t1382 * t1455;
t1340 = t1381 * t1455 + t1382 * t1461;
t1425 = t1439 * t1645;
t1404 = t1425 + t1492;
t1424 = t1439 * t1646;
t1407 = -t1424 + t1621;
t1546 = t1404 * t1461 + t1407 * t1455;
t1405 = -t1425 + t1492;
t1406 = t1424 + t1621;
t1545 = -t1405 * t1461 + t1406 * t1455;
t1544 = t1415 * t1461 - t1673;
t1419 = t1438 - t1644;
t1543 = t1419 * t1461 + t1675;
t1542 = t1421 * t1455 + t1674;
t1420 = -t1438 + t1643;
t1541 = t1420 * t1455 + t1672;
t1410 = t1435 * t1462 - t1456 * t1436;
t1538 = t1448 * t1629;
t760 = pkin(12) * t825 + (-pkin(13) * t1452 + t1649) * t852;
t771 = -pkin(12) * t824 + (-pkin(13) * t1458 + t1715) * t852;
t733 = -pkin(11) * t781 - t1453 * t760 + t1459 * t771;
t755 = -pkin(3) * t781 - pkin(4) * t824 + pkin(5) * t959 - pkin(13) * t853;
t1516 = pkin(10) * t770 + t1454 * t733 + t1460 * t755;
t732 = -pkin(3) * t852 + pkin(11) * t782 + t1453 * t771 + t1459 * t760;
t747 = t1447 * t1620 + t1449 * t781;
t715 = -pkin(2) * t747 - t1447 * t732 + t1449 * t1516;
t719 = -t1454 * t755 + t1460 * t733 + (-t1447 * t747 - t1449 * t748) * pkin(10);
t734 = -t1455 * t748 + t1461 * t770;
t1525 = pkin(9) * t734 + t1455 * t719 + t1461 * t715;
t835 = -pkin(13) * t1025 - t852;
t800 = pkin(12) * t999 + t1025 * t1649 + t1452 * t835;
t809 = -pkin(12) * t998 + t1025 * t1715 + t1458 * t835;
t767 = -pkin(11) * t909 - t1453 * t800 + t1459 * t809;
t796 = -pkin(3) * t909 - pkin(4) * t998 - pkin(5) * t1200 - pkin(13) * t1027 - t853;
t1515 = pkin(10) * t879 + t1454 * t767 + t1460 * t796;
t764 = -pkin(3) * t1025 + pkin(11) * t910 + t1453 * t809 + t1459 * t800;
t842 = t1447 * t1603 + t1449 * t909;
t731 = -pkin(2) * t842 - t1447 * t764 + t1449 * t1515;
t745 = -t1454 * t796 + t1460 * t767 + (-t1447 * t842 - t1449 * t843) * pkin(10);
t801 = -t1455 * t843 + t1461 * t879;
t1524 = pkin(9) * t801 + t1455 * t745 + t1461 * t731;
t886 = -pkin(4) * t1130 + pkin(12) * t894;
t793 = -pkin(11) * t848 - pkin(12) * t1704 - t1453 * t886;
t811 = -pkin(3) * t848 - pkin(4) * t893;
t1512 = pkin(10) * t839 + t1454 * t793 + t1460 * t811;
t788 = -pkin(3) * t1130 + pkin(11) * t849 - pkin(12) * t1706 + t1459 * t886;
t791 = t1447 * t1590 + t1449 * t848;
t737 = -pkin(2) * t791 - t1447 * t788 + t1449 * t1512;
t744 = -t1454 * t811 + t1460 * t793 + (-t1447 * t791 - t1449 * t792) * pkin(10);
t772 = -t1455 * t792 + t1461 * t839;
t1523 = pkin(9) * t772 + t1455 * t744 + t1461 * t737;
t883 = -pkin(5) * t1079 + t897;
t925 = -pkin(13) * t1079 + t1707;
t818 = -pkin(4) * t1079 + pkin(12) * t1007 + t1452 * t925 + t1458 * t883;
t831 = -pkin(12) * t1006 - t1452 * t883 + t1458 * t925;
t775 = -pkin(11) * t927 - t1453 * t818 + t1459 * t831;
t838 = -pkin(3) * t927 - pkin(4) * t1006 - pkin(5) * t1114 - pkin(13) * t1080 + t1705;
t1514 = pkin(10) * t892 + t1454 * t775 + t1460 * t838;
t773 = -pkin(3) * t1079 + pkin(11) * t928 + t1453 * t831 + t1459 * t818;
t854 = t1447 * t1596 + t1449 * t927;
t741 = -pkin(2) * t854 - t1447 * t773 + t1449 * t1514;
t749 = -t1454 * t838 + t1460 * t775 + (-t1447 * t854 - t1449 * t855) * pkin(10);
t815 = -t1455 * t855 + t1461 * t892;
t1522 = pkin(9) * t815 + t1455 * t749 + t1461 * t741;
t885 = -pkin(5) * t1084 + t898;
t926 = -pkin(13) * t1084 + t1705;
t821 = -pkin(4) * t1084 + pkin(12) * t1009 + t1452 * t926 + t1458 * t885;
t832 = -pkin(12) * t1008 - t1452 * t885 + t1458 * t926;
t776 = -pkin(11) * t931 - t1453 * t821 + t1459 * t832;
t841 = -pkin(3) * t931 - pkin(4) * t1008 - pkin(5) * t1118 - pkin(13) * t1085 - t1707;
t1513 = pkin(10) * t895 + t1454 * t776 + t1460 * t841;
t774 = -pkin(3) * t1084 + pkin(11) * t932 + t1453 * t832 + t1459 * t821;
t856 = t1447 * t1595 + t1449 * t931;
t743 = -pkin(2) * t856 - t1447 * t774 + t1449 * t1513;
t750 = -t1454 * t841 + t1460 * t776 + (-t1447 * t856 - t1449 * t857) * pkin(10);
t816 = -t1455 * t857 + t1461 * t895;
t1521 = pkin(9) * t816 + t1455 * t750 + t1461 * t743;
t873 = -pkin(4) * t1216 + pkin(12) * t1076 + t894;
t880 = -pkin(12) * t1074 - t893;
t812 = -pkin(11) * t995 - t1453 * t873 + t1459 * t880;
t952 = -pkin(3) * t995 - pkin(4) * t1074;
t1511 = pkin(10) * t966 + t1454 * t812 + t1460 * t952;
t810 = -pkin(3) * t1216 + pkin(11) * t997 + t1453 * t880 + t1459 * t873;
t900 = t1447 * t1589 + t1449 * t995;
t763 = -pkin(2) * t900 - t1447 * t810 + t1449 * t1511;
t777 = -t1454 * t952 + t1460 * t812 + (-t1447 * t900 - t1449 * t901) * pkin(10);
t866 = -t1455 * t901 + t1461 * t966;
t1520 = pkin(9) * t866 + t1455 * t777 + t1461 * t763;
t1013 = -pkin(4) * t1164 + pkin(12) * t1175 - t1699;
t1046 = -pkin(12) * t1174 + t1700;
t915 = -pkin(11) * t1082 - t1013 * t1453 + t1046 * t1459;
t922 = -pkin(3) * t1082 - pkin(4) * t1174 + t968;
t1506 = pkin(10) * t1031 + t1454 * t915 + t1460 * t922;
t899 = -pkin(3) * t1164 + pkin(11) * t1083 + t1013 * t1459 + t1046 * t1453;
t963 = t1082 * t1449 + t1447 * t1583;
t799 = -pkin(2) * t963 - t1447 * t899 + t1449 * t1506;
t817 = -t1454 * t922 + t1460 * t915 + (-t1447 * t963 - t1449 * t964) * pkin(10);
t914 = t1031 * t1461 - t1455 * t964;
t1519 = pkin(9) * t914 + t1455 * t817 + t1461 * t799;
t1021 = pkin(4) * t1733 + pkin(12) * t1188 + t1700;
t1052 = -pkin(12) * t1187 + t1699;
t929 = -pkin(11) * t1102 - t1021 * t1453 + t1052 * t1459;
t933 = -pkin(3) * t1102 - pkin(4) * t1187 + t969;
t1505 = pkin(10) * t1039 + t1454 * t929 + t1460 * t933;
t908 = pkin(3) * t1733 + pkin(11) * t1103 + t1021 * t1459 + t1052 * t1453;
t976 = t1102 * t1449 + t1447 * t1581;
t805 = -pkin(2) * t976 - t1447 * t908 + t1449 * t1505;
t822 = -t1454 * t933 + t1460 * t929 + (-t1447 * t976 - t1449 * t977) * pkin(10);
t934 = t1039 * t1461 - t1455 * t977;
t1518 = pkin(9) * t934 + t1455 * t822 + t1461 * t805;
t1488 = pkin(10) * t992 + (-pkin(11) * t1454 - t1716) * t1022;
t923 = t1022 * t1449 + t1447 * t1586;
t993 = -pkin(3) * t1191 + pkin(11) * t1023;
t830 = -pkin(2) * t923 - t1447 * t993 + t1449 * t1488;
t834 = (-pkin(11) * t1460 + t1717) * t1022 + (-t1447 * t923 - t1449 * t924) * pkin(10);
t874 = -t1455 * t924 + t1461 * t992;
t1517 = pkin(9) * t874 + t1455 * t834 + t1461 * t830;
t1028 = -t1078 * t1455 + t1153 * t1461;
t1077 = t1184 * t1449 + t1447 * t1569;
t991 = -pkin(11) * t1184 - t1022;
t1491 = pkin(10) * t1153 - t1184 * t1716 + t1454 * t991;
t975 = pkin(3) * t1290 + pkin(11) * t1186 + t1023;
t871 = -pkin(2) * t1077 - t1447 * t975 + t1449 * t1491;
t896 = t1184 * t1717 + t1460 * t991 + (-t1077 * t1447 - t1078 * t1449) * pkin(10);
t1509 = pkin(9) * t1028 + t1455 * t896 + t1461 * t871;
t1042 = -t1120 * t1455 + t1173 * t1461;
t1088 = pkin(3) * t1256 + pkin(11) * t1220 - t1695;
t1119 = t1219 * t1449 + t1447 * t1565;
t1057 = t1453 * t1466 - t1459 * t1745 + (-t1453 * t1718 - t1459 * t1631 - t1219) * pkin(3);
t1137 = -pkin(11) * t1219 + t1696;
t1498 = pkin(10) * t1173 + t1057 * t1460 + t1137 * t1454;
t912 = -pkin(2) * t1119 - t1088 * t1447 + t1449 * t1498;
t944 = -t1057 * t1454 + t1137 * t1460 + (-t1119 * t1447 - t1120 * t1449) * pkin(10);
t1508 = pkin(9) * t1042 + t1455 * t944 + t1461 * t912;
t1043 = -t1129 * t1455 + t1176 * t1461;
t1091 = -pkin(3) * t1258 + pkin(11) * t1224 + t1696;
t1128 = t1223 * t1449 + t1447 * t1563;
t1062 = -pkin(3) * t1223 + t1108;
t1140 = -pkin(11) * t1223 + t1695;
t1497 = pkin(10) * t1176 + t1062 * t1460 + t1140 * t1454;
t917 = -pkin(2) * t1128 - t1091 * t1447 + t1449 * t1497;
t949 = -t1062 * t1454 + t1140 * t1460 + (-t1128 * t1447 - t1129 * t1449) * pkin(10);
t1507 = pkin(9) * t1043 + t1455 * t949 + t1461 * t917;
t1126 = -t1268 * t1449 + t1447 * t1566;
t1029 = (-t1126 * t1447 - t1127 * t1449) * pkin(10);
t1034 = -t1127 * t1455 + t1151 * t1461;
t1035 = -pkin(2) * t1126 + t1151 * t1711;
t1503 = pkin(9) * t1034 + t1029 * t1455 + t1035 * t1461;
t1212 = t1339 * t1449 + t1447 * t1552;
t1049 = (-t1212 * t1447 - t1213 * t1449) * pkin(10) - t1566;
t1496 = pkin(10) * t1250 + t1151;
t1054 = -pkin(2) * t1212 + t1449 * t1496;
t1159 = -t1213 * t1455 + t1250 * t1461;
t1502 = pkin(9) * t1159 + t1049 * t1455 + t1054 * t1461;
t1228 = t1312 * t1449 + t1447 * t1548;
t1090 = -pkin(2) * t1228 + t1214 * t1447 + t1449 * t1623;
t1131 = -t1692 + (-t1228 * t1447 - t1229 * t1449) * pkin(10);
t1190 = -t1229 * t1455 + t1285 * t1461;
t1501 = pkin(9) * t1190 + t1090 * t1461 + t1131 * t1455;
t1234 = t1315 * t1449 + t1447 * t1551;
t1093 = -pkin(2) * t1234 + t1215 * t1447 + t1449 * t1622;
t1136 = -t1691 + (-t1234 * t1447 - t1235 * t1449) * pkin(10);
t1193 = -t1235 * t1455 + t1292 * t1461;
t1500 = pkin(9) * t1193 + t1093 * t1461 + t1136 * t1455;
t1368 = t1405 * t1455 + t1406 * t1461;
t1499 = pkin(9) * t1368 + t1340;
t1403 = (t1658 * t1701 + t1652) * t1448;
t1443 = t1448 * t1444;
t1432 = t1456 * qJDD(1) + t1462 * t1721;
t1423 = t1653 * t1670;
t1422 = (t1445 - t1446) * t1670;
t1418 = -pkin(8) * t1432 + g(3) * t1462;
t1408 = t1653 * t1647;
t1401 = (-t1445 * t1439 * qJD(1) + t1461 * t1529) * t1448;
t1400 = -t1446 * t1647 - t1455 * t1621;
t1387 = t1420 * t1461 - t1673;
t1386 = -t1419 * t1455 + t1674;
t1380 = t1403 * t1661 + t1443 * t1636;
t1379 = (-t1443 * t1660 + (-t1437 + (-qJD(1) * t1671 + t1651) * t1448) * t1450) * t1461;
t1369 = -t1404 * t1455 + t1407 * t1461;
t1365 = t1407 * t1448 + t1450 * t1542;
t1364 = -t1406 * t1448 + t1450 * t1541;
t1363 = -t1405 * t1448 + t1450 * t1543;
t1362 = -t1407 * t1450 + t1448 * t1542;
t1360 = -t1403 * t1448 + t1450 * t1544;
t1359 = t1403 * t1450 + t1448 * t1544;
t1358 = -t1422 * t1448 + t1450 * t1546;
t1357 = t1423 * t1448 + t1450 * t1545;
t1356 = -t1423 * t1450 + t1448 * t1545;
t1337 = -t1456 * t1365 + t1388 * t1462;
t1336 = t1365 * t1462 + t1456 * t1388;
t1324 = -t1456 * t1360 + t1383 * t1462;
t1323 = t1360 * t1462 + t1456 * t1383;
t1319 = t1409 * t1448 + t1450 * t1547;
t1318 = -t1409 * t1450 + t1448 * t1547;
t1308 = t1447 * t1527 + t1449 * t1485;
t1307 = -t1456 * t1357 + t1368 * t1462;
t1306 = t1357 * t1462 + t1456 * t1368;
t1291 = -t1678 + (-t1362 * t1448 - t1365 * t1450) * pkin(9);
t1284 = -t1677 + (-t1359 * t1448 - t1360 * t1450) * pkin(9);
t1283 = -pkin(1) * t1362 + t1381 * t1448 + t1450 * t1624;
t1279 = -pkin(1) * t1359 + t1382 * t1448 + t1450 * t1625;
t1274 = t1355 * t1669 + (t1397 * t1449 - t1414 * t1668) * t1399;
t1272 = t1354 * t1668 + (-t1399 * t1449 - t1414 * t1669) * t1397;
t1271 = -pkin(1) * t1318 + t1340 * t1713;
t1270 = -t1456 * t1319 + t1340 * t1462;
t1269 = t1319 * t1462 + t1456 * t1340;
t1264 = -pkin(1) * t1356 + t1450 * t1499;
t1263 = -t1309 * t1455 + t1338 * t1461;
t1262 = (-t1318 * t1448 - t1319 * t1450) * pkin(9);
t1261 = (-t1356 * t1448 - t1357 * t1450) * pkin(9) - t1547;
t1241 = t1447 * t1550 + t1449 * t1476;
t1240 = t1317 * t1449 + t1447 * t1549;
t1221 = t1367 * t1449 + t1447 * t1553;
t1218 = -t1275 * t1455 + t1311 * t1461;
t1217 = -t1273 * t1455 + t1310 * t1461;
t1208 = -t1308 * t1448 + t1450 * t1554;
t1206 = -t1243 * t1455 + t1304 * t1461;
t1205 = -t1242 * t1455 + t1303 * t1461;
t1203 = t1449 * t1281 + t1447 * t1475;
t1178 = -t1274 * t1448 + t1450 * t1555;
t1177 = -t1272 * t1448 + t1450 * t1556;
t1172 = -t1222 * t1455 + t1249 * t1461;
t1155 = t1253 * t1449 + t1447 * t1532;
t1154 = t1251 * t1449 + t1447 * t1533;
t1148 = -t1204 * t1455 + t1248 * t1461;
t1147 = -t1241 * t1448 + t1450 * t1557;
t1146 = -t1240 * t1448 + t1450 * t1558;
t1142 = -t1234 * t1448 + t1450 * t1561;
t1141 = t1234 * t1450 + t1448 * t1561;
t1139 = -t1228 * t1448 + t1450 * t1562;
t1138 = t1228 * t1450 + t1448 * t1562;
t1133 = t1237 * t1449 + t1447 * t1559;
t1132 = t1236 * t1449 + t1447 * t1560;
t1125 = -t1221 * t1448 + t1450 * t1564;
t1105 = -t1212 * t1448 + t1450 * t1567;
t1104 = t1212 * t1450 + t1448 * t1567;
t1099 = -t1157 * t1455 + t1211 * t1461;
t1098 = -t1156 * t1455 + t1210 * t1461;
t1092 = pkin(2) * t1235 - t1215 * t1449 + t1447 * t1622;
t1089 = pkin(2) * t1229 - t1214 * t1449 + t1447 * t1623;
t1086 = t1183 * t1449 + t1447 * t1570;
t1081 = -t1203 * t1448 + t1450 * t1568;
t1068 = -t1456 * t1142 + t1193 * t1462;
t1067 = t1142 * t1462 + t1456 * t1193;
t1061 = -t1456 * t1139 + t1190 * t1462;
t1060 = t1139 * t1462 + t1456 * t1190;
t1058 = t1170 * t1449 + t1447 * t1571;
t1053 = pkin(2) * t1213 + t1447 * t1496;
t1051 = -t1135 * t1455 + t1182 * t1461;
t1050 = -t1134 * t1455 + t1181 * t1461;
t1038 = -t1456 * t1105 + t1159 * t1462;
t1037 = t1105 * t1462 + t1456 * t1159;
t1036 = pkin(2) * t1127 + t1151 * t1712;
t1033 = -t1155 * t1448 + t1450 * t1572;
t1032 = -t1154 * t1448 + t1450 * t1573;
t1030 = -t1087 * t1455 + t1158 * t1461;
t1020 = -t1059 * t1455 + t1152 * t1461;
t1005 = -t1133 * t1448 + t1450 * t1574;
t1004 = -t1132 * t1448 + t1450 * t1575;
t1001 = -t1128 * t1448 + t1450 * t1576;
t1000 = t1128 * t1450 + t1448 * t1576;
t990 = -t1119 * t1448 + t1450 * t1580;
t989 = t1119 * t1450 + t1448 * t1580;
t986 = t1122 * t1449 + t1447 * t1578;
t985 = t1121 * t1449 + t1447 * t1579;
t984 = -t1126 * t1448 + t1450 * t1577;
t983 = t1126 * t1450 + t1448 * t1577;
t971 = t1070 * t1449 + t1447 * t1534;
t970 = t1069 * t1449 + t1447 * t1535;
t965 = -t1086 * t1448 + t1450 * t1582;
t962 = -t1077 * t1448 + t1450 * t1584;
t961 = t1077 * t1450 + t1448 * t1584;
t957 = -t1058 * t1448 + t1450 * t1585;
t956 = -t1093 * t1455 + t1136 * t1461 + (-t1141 * t1448 - t1142 * t1450) * pkin(9);
t955 = -t1090 * t1455 + t1131 * t1461 + (-t1138 * t1448 - t1139 * t1450) * pkin(9);
t951 = -t1456 * t1001 + t1043 * t1462;
t950 = t1001 * t1462 + t1456 * t1043;
t943 = t1042 * t1462 - t1456 * t990;
t942 = t1456 * t1042 + t1462 * t990;
t941 = t1041 * t1461 - t1455 * t988;
t940 = t1040 * t1461 - t1455 * t987;
t939 = t1045 * t1461 - t1455 * t973;
t938 = t1044 * t1461 - t1455 * t972;
t937 = -pkin(1) * t1141 - t1092 * t1448 + t1450 * t1500;
t936 = t1034 * t1462 - t1456 * t984;
t935 = t1456 * t1034 + t1462 * t984;
t930 = -pkin(1) * t1138 - t1089 * t1448 + t1450 * t1501;
t918 = t1014 * t1449 + t1447 * t1587;
t916 = pkin(2) * t1129 + t1091 * t1449 + t1447 * t1497;
t913 = t1049 * t1461 - t1054 * t1455 + (-t1104 * t1448 - t1105 * t1450) * pkin(9);
t911 = pkin(2) * t1120 + t1088 * t1449 + t1447 * t1498;
t907 = t1028 * t1462 - t1456 * t962;
t906 = t1456 * t1028 + t1462 * t962;
t902 = t1447 * t1588 + t1449 * t994;
t891 = -pkin(1) * t1104 - t1053 * t1448 + t1450 * t1502;
t888 = t1447 * t1591 + t1449 * t979;
t887 = t1447 * t1592 + t1449 * t978;
t882 = -t1448 * t986 + t1450 * t1599;
t881 = -t1448 * t985 + t1450 * t1600;
t878 = -t1448 * t976 + t1450 * t1601;
t877 = t1448 * t1601 + t1450 * t976;
t876 = -t1448 * t971 + t1450 * t1597;
t875 = -t1448 * t970 + t1450 * t1598;
t872 = -t1455 * t919 + t1461 * t982;
t870 = pkin(2) * t1078 + t1447 * t1491 + t1449 * t975;
t869 = -t1448 * t963 + t1450 * t1602;
t868 = t1448 * t1602 + t1450 * t963;
t867 = -t1455 * t903 + t1461 * t974;
t865 = t1029 * t1461 - t1035 * t1455 + (-t1448 * t983 - t1450 * t984) * pkin(9);
t862 = t1447 * t1593 + t1449 * t946;
t861 = t1447 * t1594 + t1449 * t945;
t860 = -pkin(1) * t983 - t1036 * t1448 + t1450 * t1503;
t859 = -t1455 * t890 + t1461 * t954;
t858 = -t1455 * t889 + t1461 * t953;
t850 = t1447 * t1604 + t1449 * t920;
t847 = -t1456 * t878 + t1462 * t934;
t846 = t1456 * t934 + t1462 * t878;
t845 = -t1448 * t923 + t1450 * t1606;
t844 = t1448 * t1606 + t1450 * t923;
t840 = -t1448 * t918 + t1450 * t1607;
t837 = -t1456 * t869 + t1462 * t914;
t836 = t1456 * t914 + t1462 * t869;
t833 = -t1448 * t902 + t1450 * t1608;
t829 = pkin(2) * t924 + t1447 * t1488 + t1449 * t993;
t828 = -t1448 * t900 + t1450 * t1609;
t827 = t1448 * t1609 + t1450 * t900;
t826 = -t1455 * t917 + t1461 * t949 + (-t1000 * t1448 - t1001 * t1450) * pkin(9);
t823 = -t1455 * t912 + t1461 * t944 + (-t1448 * t989 - t1450 * t990) * pkin(9);
t820 = -t1455 * t864 + t1461 * t905;
t819 = -t1455 * t863 + t1461 * t904;
t814 = -t1448 * t888 + t1450 * t1610;
t813 = -t1448 * t887 + t1450 * t1611;
t808 = -pkin(1) * t1000 - t1448 * t916 + t1450 * t1507;
t807 = -t1455 * t851 + t1461 * t884;
t806 = -pkin(1) * t989 - t1448 * t911 + t1450 * t1508;
t804 = pkin(2) * t977 + t1447 * t1505 + t1449 * t908;
t803 = -t1456 * t845 + t1462 * t874;
t802 = t1456 * t874 + t1462 * t845;
t798 = pkin(2) * t964 + t1447 * t1506 + t1449 * t899;
t797 = -t1455 * t871 + t1461 * t896 + (-t1448 * t961 - t1450 * t962) * pkin(9);
t795 = -t1456 * t828 + t1462 * t866;
t794 = t1456 * t866 + t1462 * t828;
t790 = -t1448 * t862 + t1450 * t1612;
t789 = -t1448 * t861 + t1450 * t1613;
t787 = -t1448 * t856 + t1450 * t1614;
t786 = t1448 * t1614 + t1450 * t856;
t785 = -t1448 * t854 + t1450 * t1615;
t784 = t1448 * t1615 + t1450 * t854;
t783 = -pkin(1) * t961 - t1448 * t870 + t1450 * t1509;
t780 = -t1448 * t850 + t1450 * t1616;
t779 = -t1448 * t842 + t1450 * t1617;
t778 = t1448 * t1617 + t1450 * t842;
t769 = -t1456 * t787 + t1462 * t816;
t768 = t1456 * t816 + t1462 * t787;
t766 = -t1456 * t785 + t1462 * t815;
t765 = t1456 * t815 + t1462 * t785;
t762 = pkin(2) * t901 + t1447 * t1511 + t1449 * t810;
t761 = -t1455 * t805 + t1461 * t822 + (-t1448 * t877 - t1450 * t878) * pkin(9);
t759 = -t1456 * t779 + t1462 * t801;
t758 = t1456 * t801 + t1462 * t779;
t757 = -t1455 * t830 + t1461 * t834 + (-t1448 * t844 - t1450 * t845) * pkin(9);
t756 = -t1455 * t799 + t1461 * t817 + (-t1448 * t868 - t1450 * t869) * pkin(9);
t754 = -pkin(1) * t844 - t1448 * t829 + t1450 * t1517;
t753 = -t1448 * t791 + t1450 * t1618;
t752 = t1448 * t1618 + t1450 * t791;
t751 = -pkin(1) * t877 - t1448 * t804 + t1450 * t1518;
t746 = -pkin(1) * t868 - t1448 * t798 + t1450 * t1519;
t742 = pkin(2) * t857 + t1447 * t1513 + t1449 * t774;
t740 = pkin(2) * t855 + t1447 * t1514 + t1449 * t773;
t739 = -t1456 * t753 + t1462 * t772;
t738 = t1456 * t772 + t1462 * t753;
t736 = pkin(2) * t792 + t1447 * t1512 + t1449 * t788;
t735 = -t1455 * t763 + t1461 * t777 + (-t1448 * t827 - t1450 * t828) * pkin(9);
t730 = pkin(2) * t843 + t1447 * t1515 + t1449 * t764;
t729 = -pkin(1) * t827 - t1448 * t762 + t1450 * t1520;
t728 = -t1448 * t747 + t1450 * t1619;
t727 = t1448 * t1619 + t1450 * t747;
t726 = -t1455 * t743 + t1461 * t750 + (-t1448 * t786 - t1450 * t787) * pkin(9);
t725 = -t1455 * t741 + t1461 * t749 + (-t1448 * t784 - t1450 * t785) * pkin(9);
t724 = -t1455 * t731 + t1461 * t745 + (-t1448 * t778 - t1450 * t779) * pkin(9);
t723 = -t1456 * t728 + t1462 * t734;
t722 = t1456 * t734 + t1462 * t728;
t721 = -pkin(1) * t786 - t1448 * t742 + t1450 * t1521;
t720 = -pkin(1) * t784 - t1448 * t740 + t1450 * t1522;
t718 = -t1455 * t737 + t1461 * t744 + (-t1448 * t752 - t1450 * t753) * pkin(9);
t717 = -pkin(1) * t752 - t1448 * t736 + t1450 * t1523;
t716 = -pkin(1) * t778 - t1448 * t730 + t1450 * t1524;
t714 = pkin(2) * t748 + t1447 * t1516 + t1449 * t732;
t713 = -t1455 * t715 + t1461 * t719 + (-t1448 * t727 - t1450 * t728) * pkin(9);
t712 = -pkin(1) * t727 - t1448 * t714 + t1450 * t1525;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1432, -t1433, 0, t1411, 0, 0, 0, 0, 0, 0, t1337, t1324, t1307, t1270, 0, 0, 0, 0, 0, 0, t1061, t1068, t1038, t936, 0, 0, 0, 0, 0, 0, t943, t951, t907, t803, 0, 0, 0, 0, 0, 0, t837, t847, t795, t739, 0, 0, 0, 0, 0, 0, t766, t769, t759, t723; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1433, -t1432, 0, t1410, 0, 0, 0, 0, 0, 0, t1336, t1323, t1306, t1269, 0, 0, 0, 0, 0, 0, t1060, t1067, t1037, t935, 0, 0, 0, 0, 0, 0, t942, t950, t906, t802, 0, 0, 0, 0, 0, 0, t836, t846, t794, t738, 0, 0, 0, 0, 0, 0, t765, t768, t758, t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1362, t1359, t1356, t1318, 0, 0, 0, 0, 0, 0, t1138, t1141, t1104, t983, 0, 0, 0, 0, 0, 0, t989, t1000, t961, t844, 0, 0, 0, 0, 0, 0, t868, t877, t827, t752, 0, 0, 0, 0, 0, 0, t784, t786, t778, t727; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1433, 0, -t1432, 0, t1626, -t1418, -t1410, -pkin(8) * t1410, -t1456 * t1380 + t1401 * t1462, -t1456 * t1358 + t1369 * t1462, -t1456 * t1363 + t1386 * t1462, -t1456 * t1379 + t1400 * t1462, -t1456 * t1364 + t1387 * t1462, t1462 * t1408 + t1456 * t1538, -pkin(8) * t1336 - t1456 * t1283 + t1291 * t1462, -pkin(8) * t1323 - t1456 * t1279 + t1284 * t1462, -pkin(8) * t1306 + t1261 * t1462 - t1456 * t1264, -pkin(8) * t1269 + t1262 * t1462 - t1456 * t1271, -t1456 * t1178 + t1218 * t1462, -t1456 * t1125 + t1172 * t1462, -t1456 * t1146 + t1205 * t1462, -t1456 * t1177 + t1217 * t1462, -t1456 * t1147 + t1206 * t1462, -t1456 * t1208 + t1263 * t1462, -pkin(8) * t1060 - t1456 * t930 + t1462 * t955, -pkin(8) * t1067 - t1456 * t937 + t1462 * t956, -pkin(8) * t1037 - t1456 * t891 + t1462 * t913, -pkin(8) * t935 - t1456 * t860 + t1462 * t865, -t1456 * t1033 + t1099 * t1462, t1030 * t1462 - t1456 * t965, -t1456 * t1004 + t1050 * t1462, -t1456 * t1032 + t1098 * t1462, -t1456 * t1005 + t1051 * t1462, -t1456 * t1081 + t1148 * t1462, -pkin(8) * t942 - t1456 * t806 + t1462 * t823, -pkin(8) * t950 - t1456 * t808 + t1462 * t826, -pkin(8) * t906 - t1456 * t783 + t1462 * t797, -pkin(8) * t802 - t1456 * t754 + t1462 * t757, -t1456 * t876 + t1462 * t939, -t1456 * t833 + t1462 * t867, -t1456 * t881 + t1462 * t940, -t1456 * t875 + t1462 * t938, -t1456 * t882 + t1462 * t941, t1020 * t1462 - t1456 * t957, -pkin(8) * t836 - t1456 * t746 + t1462 * t756, -pkin(8) * t846 - t1456 * t751 + t1462 * t761, -pkin(8) * t794 - t1456 * t729 + t1462 * t735, -pkin(8) * t738 - t1456 * t717 + t1462 * t718, -t1456 * t814 + t1462 * t859, -t1456 * t780 + t1462 * t807, -t1456 * t789 + t1462 * t819, -t1456 * t813 + t1462 * t858, -t1456 * t790 + t1462 * t820, -t1456 * t840 + t1462 * t872, -pkin(8) * t765 - t1456 * t720 + t1462 * t725, -pkin(8) * t768 - t1456 * t721 + t1462 * t726, -pkin(8) * t758 - t1456 * t716 + t1462 * t724, -pkin(8) * t722 - t1456 * t712 + t1462 * t713; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1432, 0, t1433, 0, t1418, t1626, t1411, pkin(8) * t1411, t1380 * t1462 + t1456 * t1401, t1358 * t1462 + t1456 * t1369, t1363 * t1462 + t1456 * t1386, t1379 * t1462 + t1456 * t1400, t1364 * t1462 + t1456 * t1387, t1456 * t1408 - t1462 * t1538, pkin(8) * t1337 + t1283 * t1462 + t1456 * t1291, pkin(8) * t1324 + t1279 * t1462 + t1456 * t1284, pkin(8) * t1307 + t1456 * t1261 + t1264 * t1462, pkin(8) * t1270 + t1456 * t1262 + t1271 * t1462, t1178 * t1462 + t1456 * t1218, t1125 * t1462 + t1456 * t1172, t1146 * t1462 + t1456 * t1205, t1177 * t1462 + t1456 * t1217, t1147 * t1462 + t1456 * t1206, t1208 * t1462 + t1456 * t1263, pkin(8) * t1061 + t1456 * t955 + t1462 * t930, pkin(8) * t1068 + t1456 * t956 + t1462 * t937, pkin(8) * t1038 + t1456 * t913 + t1462 * t891, pkin(8) * t936 + t1456 * t865 + t1462 * t860, t1033 * t1462 + t1456 * t1099, t1456 * t1030 + t1462 * t965, t1004 * t1462 + t1456 * t1050, t1032 * t1462 + t1456 * t1098, t1005 * t1462 + t1456 * t1051, t1081 * t1462 + t1456 * t1148, pkin(8) * t943 + t1456 * t823 + t1462 * t806, pkin(8) * t951 + t1456 * t826 + t1462 * t808, pkin(8) * t907 + t1456 * t797 + t1462 * t783, pkin(8) * t803 + t1456 * t757 + t1462 * t754, t1456 * t939 + t1462 * t876, t1456 * t867 + t1462 * t833, t1456 * t940 + t1462 * t881, t1456 * t938 + t1462 * t875, t1456 * t941 + t1462 * t882, t1456 * t1020 + t1462 * t957, pkin(8) * t837 + t1456 * t756 + t1462 * t746, pkin(8) * t847 + t1456 * t761 + t1462 * t751, pkin(8) * t795 + t1456 * t735 + t1462 * t729, pkin(8) * t739 + t1456 * t718 + t1462 * t717, t1456 * t859 + t1462 * t814, t1456 * t807 + t1462 * t780, t1456 * t819 + t1462 * t789, t1456 * t858 + t1462 * t813, t1456 * t820 + t1462 * t790, t1456 * t872 + t1462 * t840, pkin(8) * t766 + t1456 * t725 + t1462 * t720, pkin(8) * t769 + t1456 * t726 + t1462 * t721, pkin(8) * t759 + t1456 * t724 + t1462 * t716, pkin(8) * t723 + t1456 * t713 + t1462 * t712; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1435, t1436, 0, 0, (t1652 + (qJD(2) - t1634) * t1701) * t1731, t1422 * t1450 + t1448 * t1546, t1405 * t1450 + t1448 * t1543, (qJD(1) * t1634 * t1731 + t1448 * t1621) * t1461, t1406 * t1450 + t1448 * t1541, t1450 * t1629, pkin(1) * t1365 - t1381 * t1450 + t1448 * t1624, pkin(1) * t1360 - t1382 * t1450 + t1448 * t1625, pkin(1) * t1357 + t1448 * t1499, pkin(1) * t1319 + t1340 * t1714, t1274 * t1450 + t1448 * t1555, t1221 * t1450 + t1448 * t1564, t1240 * t1450 + t1448 * t1558, t1272 * t1450 + t1448 * t1556, t1241 * t1450 + t1448 * t1557, t1308 * t1450 + t1448 * t1554, pkin(1) * t1139 + t1089 * t1450 + t1448 * t1501, pkin(1) * t1142 + t1092 * t1450 + t1448 * t1500, pkin(1) * t1105 + t1053 * t1450 + t1448 * t1502, pkin(1) * t984 + t1036 * t1450 + t1448 * t1503, t1155 * t1450 + t1448 * t1572, t1086 * t1450 + t1448 * t1582, t1132 * t1450 + t1448 * t1575, t1154 * t1450 + t1448 * t1573, t1133 * t1450 + t1448 * t1574, t1203 * t1450 + t1448 * t1568, pkin(1) * t990 + t1448 * t1508 + t1450 * t911, pkin(1) * t1001 + t1448 * t1507 + t1450 * t916, pkin(1) * t962 + t1448 * t1509 + t1450 * t870, pkin(1) * t845 + t1448 * t1517 + t1450 * t829, t1448 * t1597 + t1450 * t971, t1448 * t1608 + t1450 * t902, t1448 * t1600 + t1450 * t985, t1448 * t1598 + t1450 * t970, t1448 * t1599 + t1450 * t986, t1058 * t1450 + t1448 * t1585, pkin(1) * t869 + t1448 * t1519 + t1450 * t798, pkin(1) * t878 + t1448 * t1518 + t1450 * t804, pkin(1) * t828 + t1448 * t1520 + t1450 * t762, pkin(1) * t753 + t1448 * t1523 + t1450 * t736, t1448 * t1610 + t1450 * t888, t1448 * t1616 + t1450 * t850, t1448 * t1613 + t1450 * t861, t1448 * t1611 + t1450 * t887, t1448 * t1612 + t1450 * t862, t1448 * t1607 + t1450 * t918, pkin(1) * t785 + t1448 * t1522 + t1450 * t740, pkin(1) * t787 + t1448 * t1521 + t1450 * t742, pkin(1) * t779 + t1448 * t1524 + t1450 * t730, pkin(1) * t728 + t1448 * t1525 + t1450 * t714;];
tauB_reg  = t1;
