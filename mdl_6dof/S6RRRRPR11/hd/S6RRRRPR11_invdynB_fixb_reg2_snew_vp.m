% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 23:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR11_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR11_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR11_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR11_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 23:39:08
% EndTime: 2019-05-07 23:41:23
% DurationCPUTime: 101.45s
% Computational Cost: add. (1130436->1117), mult. (2436357->1815), div. (0->0), fcn. (1991462->14), ass. (0->810)
t1257 = sin(pkin(12));
t1260 = cos(pkin(6));
t1418 = qJD(1) * t1260;
t1249 = qJD(2) + t1418;
t1263 = sin(qJ(3));
t1268 = cos(qJ(3));
t1258 = sin(pkin(6));
t1264 = sin(qJ(2));
t1389 = t1258 * t1264;
t1374 = qJD(1) * t1389;
t1217 = t1249 * t1263 + t1268 * t1374;
t1262 = sin(qJ(4));
t1267 = cos(qJ(4));
t1269 = cos(qJ(2));
t1388 = t1258 * t1269;
t1247 = qJD(1) * t1388;
t1381 = t1247 - qJD(3);
t1188 = t1217 * t1262 + t1267 * t1381;
t1189 = t1267 * t1217 - t1262 * t1381;
t1259 = cos(pkin(12));
t1144 = t1259 * t1188 + t1189 * t1257;
t1146 = -t1188 * t1257 + t1189 * t1259;
t1083 = t1146 * t1144;
t1379 = qJDD(1) * t1264;
t1416 = qJD(1) * t1269;
t1225 = (qJD(2) * t1416 + t1379) * t1258;
t1248 = qJDD(1) * t1260 + qJDD(2);
t1361 = t1217 * qJD(3) + t1263 * t1225 - t1268 * t1248;
t1168 = qJDD(4) + t1361;
t1443 = -t1083 + t1168;
t1456 = t1257 * t1443;
t1455 = t1259 * t1443;
t1261 = sin(qJ(6));
t1303 = qJDD(6) + t1168;
t1266 = cos(qJ(6));
t1076 = t1266 * t1144 + t1146 * t1261;
t1078 = -t1144 * t1261 + t1146 * t1266;
t985 = t1078 * t1076;
t1448 = -t985 + t1303;
t1454 = t1261 * t1448;
t1152 = t1189 * t1188;
t1441 = -t1152 + t1168;
t1453 = t1262 * t1441;
t1452 = t1266 * t1448;
t1451 = t1267 * t1441;
t1215 = -t1268 * t1249 + t1263 * t1374;
t1211 = qJD(4) + t1215;
t1164 = t1211 * t1188;
t1170 = -t1215 * qJD(3) + t1268 * t1225 + t1263 * t1248;
t1378 = qJDD(1) * t1269;
t1417 = qJD(1) * t1264;
t1300 = qJD(2) * t1417 - t1378;
t1283 = t1300 * t1258;
t1278 = qJDD(3) + t1283;
t1362 = t1188 * qJD(4) - t1267 * t1170 - t1262 * t1278;
t1068 = -t1164 + t1362;
t1199 = t1215 * t1381;
t1136 = t1199 + t1170;
t1360 = t1381 * t1217;
t1450 = t1361 - t1360;
t1351 = t1268 * t1199;
t1352 = t1263 * t1360;
t1156 = t1351 - t1352;
t1449 = t1264 * t1156 - t1269 * t1278;
t1377 = t1381 ^ 2;
t1397 = t1217 * t1215;
t1276 = t1278 - t1397;
t1447 = t1263 * t1276;
t1446 = t1268 * t1276;
t1206 = qJD(6) + t1211;
t1051 = t1206 * t1076;
t1274 = -t1262 * t1170 + t1267 * t1278;
t1273 = t1189 * qJD(4) - t1274;
t1022 = -t1257 * t1273 - t1259 * t1362;
t1357 = -t1257 * t1362 + t1259 * t1273;
t1284 = qJD(6) * t1076 - t1022 * t1266 + t1261 * t1357;
t1444 = -t1051 - t1284;
t1110 = t1211 * t1144;
t983 = -t1110 - t1022;
t1442 = -t1110 + t1022;
t1069 = t1362 + t1164;
t1358 = t1261 * t1022 + t1266 * t1357;
t875 = (qJD(6) - t1206) * t1078 + t1358;
t1064 = (qJD(4) - t1211) * t1189 - t1274;
t1440 = qJD(1) ^ 2;
t1074 = t1076 ^ 2;
t1075 = t1078 ^ 2;
t1439 = t1144 ^ 2;
t1143 = t1146 ^ 2;
t1438 = t1188 ^ 2;
t1187 = t1189 ^ 2;
t1204 = t1206 ^ 2;
t1437 = t1211 ^ 2;
t1213 = t1215 ^ 2;
t1214 = t1217 ^ 2;
t1436 = t1249 ^ 2;
t1254 = t1258 ^ 2;
t1435 = pkin(2) * t1264;
t1434 = pkin(2) * t1269;
t1433 = pkin(3) * t1263;
t1432 = pkin(8) * t1258;
t1431 = pkin(9) * t1269;
t1430 = t1260 * g(3);
t1265 = sin(qJ(1));
t1270 = cos(qJ(1));
t1244 = g(1) * t1270 + t1265 * g(2);
t1221 = -pkin(1) * t1440 + qJDD(1) * t1432 - t1244;
t1355 = -pkin(9) * t1264 - t1434;
t1419 = qJD(1) * t1258;
t1224 = t1355 * t1419;
t1243 = t1265 * g(1) - t1270 * g(2);
t1280 = qJDD(1) * pkin(1) + t1432 * t1440 + t1243;
t1277 = t1260 * t1280;
t1275 = -g(3) * t1389 + t1264 * t1277;
t1124 = t1248 * pkin(9) - t1436 * pkin(2) + (t1224 * t1419 + t1221) * t1269 + t1275;
t1384 = qJD(2) + t1249;
t1272 = -t1225 * pkin(9) - t1430 + ((-pkin(1) - t1434) * qJDD(1) + (-pkin(8) * t1419 - t1249 * t1431 + t1384 * t1435) * qJD(1) - t1243) * t1258;
t1054 = t1268 * t1124 + t1263 * t1272;
t1177 = pkin(3) * t1215 - pkin(10) * t1217;
t1005 = -pkin(3) * t1377 + pkin(10) * t1278 - t1215 * t1177 + t1054;
t1356 = t1264 * t1221 - t1269 * t1277;
t1123 = -t1248 * pkin(2) - t1436 * pkin(9) + (g(3) * t1269 + t1224 * t1417) * t1258 + t1356;
t1009 = pkin(3) * t1450 - t1136 * pkin(10) + t1123;
t924 = t1262 * t1005 - t1267 * t1009;
t869 = t1441 * pkin(4) + qJ(5) * t1068 - t924;
t1158 = pkin(4) * t1211 - qJ(5) * t1189;
t925 = t1267 * t1005 + t1262 * t1009;
t885 = -pkin(4) * t1438 - qJ(5) * t1273 - t1211 * t1158 + t925;
t782 = 0.2e1 * qJD(5) * t1146 + t1257 * t885 - t1259 * t869;
t768 = pkin(5) * t1443 + pkin(11) * t983 - t782;
t1107 = pkin(5) * t1211 - pkin(11) * t1146;
t783 = -0.2e1 * qJD(5) * t1144 + t1257 * t869 + t1259 * t885;
t770 = -pkin(5) * t1439 - pkin(11) * t1357 - t1107 * t1211 + t783;
t705 = t1261 * t768 + t1266 * t770;
t704 = t1261 * t770 - t1266 * t768;
t653 = t1261 * t705 - t1266 * t704;
t1429 = t1257 * t653;
t1053 = t1124 * t1263 - t1268 * t1272;
t1004 = -t1278 * pkin(3) - t1377 * pkin(10) + t1177 * t1217 + t1053;
t928 = t1273 * pkin(4) - t1438 * qJ(5) + t1158 * t1189 + qJDD(5) + t1004;
t1428 = t1257 * t928;
t1427 = t1259 * t653;
t1426 = t1259 * t928;
t849 = pkin(5) * t1357 - pkin(11) * t1439 + t1107 * t1146 + t928;
t1425 = t1261 * t849;
t957 = t985 + t1303;
t1424 = t1261 * t957;
t719 = t1257 * t783 - t1259 * t782;
t1423 = t1262 * t719;
t1422 = t1266 * t849;
t1421 = t1266 * t957;
t1420 = t1267 * t719;
t1415 = t1004 * t1262;
t1414 = t1004 * t1267;
t1032 = t1083 + t1168;
t1413 = t1032 * t1257;
t1412 = t1032 * t1259;
t1091 = t1152 + t1168;
t1411 = t1091 * t1262;
t1410 = t1091 * t1267;
t1409 = t1123 * t1263;
t1408 = t1123 * t1268;
t1407 = t1146 * t1211;
t1161 = -t1278 - t1397;
t1406 = t1161 * t1263;
t1405 = t1161 * t1268;
t1404 = t1168 * t1263;
t1403 = t1206 * t1261;
t1402 = t1206 * t1266;
t1401 = t1211 * t1257;
t1400 = t1211 * t1259;
t1399 = t1211 * t1262;
t1398 = t1211 * t1267;
t1363 = t1264 * t1269 * t1440;
t1242 = t1254 * t1363;
t1222 = t1242 + t1248;
t1396 = t1222 * t1264;
t1395 = t1222 * t1269;
t1223 = -t1242 + t1248;
t1394 = t1223 * t1264;
t1393 = t1223 * t1269;
t1392 = t1248 * t1258;
t1391 = t1249 * t1258;
t1390 = t1254 * t1440;
t1201 = t1258 * t1280 + t1430;
t1386 = t1264 * t1201;
t1385 = t1269 * t1201;
t1255 = t1264 ^ 2;
t1256 = t1269 ^ 2;
t1380 = t1255 + t1256;
t1376 = -pkin(3) * t1268 - pkin(2);
t1375 = qJD(1) * t1391;
t1373 = t1255 * t1390;
t1372 = t1256 * t1390;
t1371 = t1263 * t985;
t1370 = t1268 * t985;
t1369 = t1263 * t1083;
t1368 = t1268 * t1083;
t1367 = t1263 * t1152;
t1366 = t1268 * t1152;
t1365 = t1264 * t1397;
t1364 = t1269 * t1397;
t720 = t1257 * t782 + t1259 * t783;
t654 = t1261 * t704 + t1266 * t705;
t1359 = -t1249 + t1418;
t962 = t1053 * t1263 + t1268 * t1054;
t1203 = -t1243 * t1265 - t1270 * t1244;
t1241 = qJDD(1) * t1270 - t1265 * t1440;
t1354 = -pkin(7) * t1241 - g(3) * t1265;
t1353 = t1263 * t1199;
t1350 = t1268 * t1360;
t1210 = -t1373 - t1436;
t1176 = -t1210 * t1264 - t1393;
t1349 = pkin(8) * t1176 - t1386;
t1229 = -t1372 - t1436;
t1184 = t1229 * t1269 - t1396;
t1348 = pkin(8) * t1184 + t1385;
t841 = t1262 * t925 - t1267 * t924;
t842 = t1262 * t924 + t1267 * t925;
t621 = t1257 * t654 + t1427;
t622 = t1259 * t654 - t1429;
t599 = -t1262 * t621 + t1267 * t622;
t594 = t1263 * t849 + t1268 * t599;
t598 = t1262 * t622 + t1267 * t621;
t1347 = t1264 * t594 - t1269 * t598;
t673 = t1267 * t720 - t1423;
t662 = t1263 * t928 + t1268 * t673;
t672 = t1262 * t720 + t1420;
t1346 = t1264 * t662 - t1269 * t672;
t879 = -t1051 + t1284;
t792 = -t1261 * t875 + t1266 * t879;
t794 = -t1261 * t879 - t1266 * t875;
t726 = t1257 * t794 + t1259 * t792;
t728 = -t1257 * t792 + t1259 * t794;
t679 = -t1262 * t726 + t1267 * t728;
t934 = -t1074 - t1075;
t665 = t1263 * t934 + t1268 * t679;
t677 = t1262 * t728 + t1267 * t726;
t1345 = t1264 * t665 - t1269 * t677;
t874 = (qJD(6) + t1206) * t1078 + t1358;
t791 = -t1261 * t874 + t1266 * t1444;
t793 = -t1261 * t1444 - t1266 * t874;
t725 = t1257 * t793 + t1259 * t791;
t727 = -t1257 * t791 + t1259 * t793;
t678 = -t1262 * t725 + t1267 * t727;
t984 = -t1075 + t1074;
t670 = -t1263 * t984 + t1268 * t678;
t676 = -t1262 * t727 - t1267 * t725;
t1344 = t1264 * t670 + t1269 * t676;
t967 = -t1204 - t1074;
t890 = t1261 * t967 + t1452;
t891 = t1266 * t967 - t1454;
t812 = t1257 * t891 + t1259 * t890;
t813 = -t1257 * t890 + t1259 * t891;
t740 = -t1262 * t812 + t1267 * t813;
t713 = t1263 * t874 + t1268 * t740;
t739 = t1262 * t813 + t1267 * t812;
t1343 = t1264 * t713 - t1269 * t739;
t910 = -qJD(6) * t1078 - t1358;
t870 = t1076 * t1403 + t1266 * t910;
t871 = t1076 * t1402 - t1261 * t910;
t787 = t1257 * t871 + t1259 * t870;
t789 = -t1257 * t870 + t1259 * t871;
t723 = -t1262 * t787 + t1267 * t789;
t716 = t1268 * t723 - t1371;
t721 = -t1262 * t789 - t1267 * t787;
t1342 = t1264 * t716 + t1269 * t721;
t872 = t1078 * t1402 - t1261 * t1284;
t873 = -t1078 * t1403 - t1266 * t1284;
t788 = t1257 * t873 + t1259 * t872;
t790 = -t1257 * t872 + t1259 * t873;
t724 = -t1262 * t788 + t1267 * t790;
t717 = t1268 * t724 + t1371;
t722 = -t1262 * t790 - t1267 * t788;
t1341 = t1264 * t717 + t1269 * t722;
t1034 = -t1075 - t1204;
t915 = t1034 * t1266 - t1424;
t916 = -t1034 * t1261 - t1421;
t831 = t1257 * t916 + t1259 * t915;
t832 = -t1257 * t915 + t1259 * t916;
t758 = -t1262 * t831 + t1267 * t832;
t730 = t1263 * t1444 + t1268 * t758;
t757 = t1262 * t832 + t1267 * t831;
t1340 = t1264 * t730 - t1269 * t757;
t1050 = -t1075 + t1204;
t917 = t1050 * t1266 + t1454;
t919 = -t1050 * t1261 + t1452;
t834 = t1257 * t919 + t1259 * t917;
t836 = -t1257 * t917 + t1259 * t919;
t763 = -t1262 * t834 + t1267 * t836;
t733 = -t1263 * t879 + t1268 * t763;
t761 = -t1262 * t836 - t1267 * t834;
t1339 = t1264 * t733 + t1269 * t761;
t1049 = t1074 - t1204;
t918 = t1049 * t1261 + t1421;
t920 = t1049 * t1266 - t1424;
t835 = t1257 * t920 + t1259 * t918;
t837 = -t1257 * t918 + t1259 * t920;
t764 = -t1262 * t835 + t1267 * t837;
t734 = -t1263 * t875 + t1268 * t764;
t762 = -t1262 * t837 - t1267 * t835;
t1338 = t1264 * t734 + t1269 * t762;
t1018 = -t1143 - t1439;
t979 = t1357 - t1407;
t901 = -t1257 * t979 + t1259 * t983;
t903 = -t1257 * t983 - t1259 * t979;
t821 = -t1262 * t901 + t1267 * t903;
t802 = t1018 * t1263 + t1268 * t821;
t819 = t1262 * t903 + t1267 * t901;
t1337 = t1264 * t802 - t1269 * t819;
t959 = (-t1076 * t1261 - t1078 * t1266) * t1206;
t960 = (-t1076 * t1266 + t1078 * t1261) * t1206;
t887 = t1257 * t960 + t1259 * t959;
t888 = -t1257 * t959 + t1259 * t960;
t809 = -t1262 * t887 + t1267 * t888;
t804 = t1263 * t1303 + t1268 * t809;
t808 = -t1262 * t888 - t1267 * t887;
t1336 = t1264 * t804 + t1269 * t808;
t1082 = -t1143 + t1439;
t978 = t1357 + t1407;
t900 = -t1257 * t978 + t1259 * t1442;
t902 = -t1257 * t1442 - t1259 * t978;
t820 = -t1262 * t900 + t1267 * t902;
t811 = -t1082 * t1263 + t1268 * t820;
t818 = -t1262 * t902 - t1267 * t900;
t1335 = t1264 * t811 + t1269 * t818;
t817 = t1004 * t1263 + t1268 * t842;
t1334 = t1264 * t817 - t1269 * t841;
t1057 = -t1437 - t1439;
t951 = t1057 * t1257 + t1455;
t952 = t1057 * t1259 - t1456;
t882 = -t1262 * t951 + t1267 * t952;
t839 = t1263 * t978 + t1268 * t882;
t881 = t1262 * t952 + t1267 * t951;
t1333 = t1264 * t839 - t1269 * t881;
t1093 = -t1143 - t1437;
t976 = t1093 * t1259 - t1413;
t977 = -t1093 * t1257 - t1412;
t899 = -t1262 * t976 + t1267 * t977;
t848 = t1263 * t1442 + t1268 * t899;
t898 = t1262 * t977 + t1267 * t976;
t1332 = t1264 * t848 - t1269 * t898;
t1109 = -t1143 + t1437;
t988 = t1109 * t1259 + t1456;
t990 = -t1109 * t1257 + t1455;
t908 = -t1262 * t988 + t1267 * t990;
t854 = -t1263 * t983 + t1268 * t908;
t906 = -t1262 * t990 - t1267 * t988;
t1331 = t1264 * t854 + t1269 * t906;
t1108 = -t1437 + t1439;
t989 = t1108 * t1257 + t1412;
t991 = t1108 * t1259 - t1413;
t909 = -t1262 * t989 + t1267 * t991;
t855 = -t1263 * t979 + t1268 * t909;
t907 = -t1262 * t991 - t1267 * t989;
t1330 = t1264 * t855 + t1269 * t907;
t972 = t1144 * t1401 - t1259 * t1357;
t973 = t1144 * t1400 + t1257 * t1357;
t896 = -t1262 * t972 + t1267 * t973;
t865 = t1268 * t896 - t1369;
t894 = -t1262 * t973 - t1267 * t972;
t1329 = t1264 * t865 + t1269 * t894;
t974 = t1022 * t1257 + t1146 * t1400;
t975 = t1022 * t1259 - t1146 * t1401;
t897 = -t1262 * t974 + t1267 * t975;
t866 = t1268 * t897 + t1369;
t895 = -t1262 * t975 - t1267 * t974;
t1328 = t1264 * t866 + t1269 * t895;
t1036 = (-t1144 * t1257 - t1146 * t1259) * t1211;
t1037 = (-t1144 * t1259 + t1146 * t1257) * t1211;
t946 = -t1036 * t1262 + t1037 * t1267;
t936 = t1268 * t946 + t1404;
t945 = -t1036 * t1267 - t1037 * t1262;
t1327 = t1264 * t936 + t1269 * t945;
t1103 = t1187 + t1438;
t971 = -t1064 * t1267 - t1068 * t1262;
t940 = -t1103 * t1263 + t1268 * t971;
t969 = -t1064 * t1262 + t1068 * t1267;
t1326 = t1264 * t940 - t1269 * t969;
t1151 = -t1187 + t1438;
t1065 = (-qJD(4) - t1211) * t1189 + t1274;
t970 = t1065 * t1267 + t1069 * t1262;
t944 = -t1151 * t1263 + t1268 * t970;
t968 = -t1065 * t1262 + t1069 * t1267;
t1325 = t1264 * t944 + t1269 * t968;
t1116 = -t1437 - t1438;
t1025 = t1116 * t1262 + t1451;
t1026 = t1116 * t1267 - t1453;
t950 = t1026 * t1268 - t1065 * t1263;
t1324 = -t1025 * t1269 + t1264 * t950;
t1142 = -t1187 - t1437;
t1029 = t1142 * t1267 - t1411;
t1030 = -t1142 * t1262 - t1410;
t955 = t1030 * t1268 - t1069 * t1263;
t1323 = -t1029 * t1269 + t1264 * t955;
t1160 = -t1187 + t1437;
t1044 = -t1160 * t1267 - t1453;
t1046 = -t1160 * t1262 + t1451;
t965 = t1046 * t1268 - t1068 * t1263;
t1322 = t1044 * t1269 + t1264 * t965;
t1159 = -t1437 + t1438;
t1045 = -t1159 * t1262 - t1410;
t1047 = t1159 * t1267 - t1411;
t966 = t1047 * t1268 - t1064 * t1263;
t1321 = t1045 * t1269 + t1264 * t966;
t1320 = -t1123 * t1269 + t1264 * t962;
t1061 = t1188 * t1398 + t1262 * t1273;
t1012 = t1061 * t1268 - t1367;
t1060 = -t1188 * t1399 + t1267 * t1273;
t1319 = t1012 * t1264 + t1060 * t1269;
t1063 = -t1189 * t1399 - t1267 * t1362;
t1013 = t1063 * t1268 + t1367;
t1062 = -t1189 * t1398 + t1262 * t1362;
t1318 = t1013 * t1264 + t1062 * t1269;
t961 = -t1053 * t1268 + t1054 * t1263;
t1097 = (-t1188 * t1267 + t1189 * t1262) * t1211;
t1059 = t1097 * t1268 + t1404;
t1096 = (t1188 * t1262 + t1189 * t1267) * t1211;
t1317 = t1059 * t1264 + t1096 * t1269;
t1072 = -t1136 * t1263 - t1268 * t1450;
t1179 = -t1214 + t1213;
t1316 = t1072 * t1264 + t1179 * t1269;
t1133 = t1360 + t1361;
t1138 = -t1170 + t1199;
t1073 = -t1133 * t1268 - t1138 * t1263;
t1157 = t1213 + t1214;
t1315 = t1073 * t1264 + t1157 * t1269;
t1173 = -t1377 - t1213;
t1100 = t1173 * t1268 - t1447;
t1314 = t1100 * t1264 - t1269 * t1450;
t1180 = -t1214 - t1377;
t1106 = -t1180 * t1263 + t1405;
t1313 = t1106 * t1264 - t1136 * t1269;
t1193 = t1377 - t1214;
t1114 = -t1193 * t1263 + t1446;
t1312 = t1114 * t1264 + t1138 * t1269;
t1192 = t1213 - t1377;
t1115 = t1192 * t1268 + t1406;
t1311 = t1115 * t1264 + t1133 * t1269;
t1174 = g(3) * t1388 + t1356;
t1175 = t1269 * t1221 + t1275;
t1310 = -t1269 * t1174 + t1264 * t1175;
t1104 = t1174 * t1264 + t1175 * t1269;
t1233 = t1249 * t1247;
t1195 = t1233 + t1225;
t1232 = t1249 * t1374;
t1198 = -t1232 - t1283;
t1309 = t1195 * t1269 + t1198 * t1264;
t1196 = -t1233 + t1225;
t1197 = t1232 - t1283;
t1308 = -t1196 * t1269 + t1197 * t1264;
t1307 = t1210 * t1269 - t1394;
t1227 = -t1373 + t1436;
t1306 = t1227 * t1269 + t1396;
t1305 = t1229 * t1264 + t1395;
t1228 = t1372 - t1436;
t1304 = t1228 * t1264 + t1393;
t1202 = t1243 * t1270 - t1265 * t1244;
t1127 = t1263 * t1361 - t1351;
t1302 = t1127 * t1264 + t1364;
t1129 = t1268 * t1170 + t1352;
t1301 = t1129 * t1264 - t1364;
t647 = -pkin(5) * t849 + pkin(11) * t654;
t592 = -pkin(4) * t849 - pkin(11) * t1429 + qJ(5) * t622 + t1259 * t647;
t595 = -pkin(11) * t1427 - qJ(5) * t621 - t1257 * t647;
t576 = -pkin(10) * t598 - t1262 * t592 + t1267 * t595;
t587 = -pkin(3) * t598 - pkin(4) * t621 - pkin(5) * t653;
t593 = t1263 * t599 - t1268 * t849;
t570 = -pkin(9) * t593 - t1263 * t587 + t1268 * t576;
t574 = -pkin(2) * t593 + pkin(3) * t849 - pkin(10) * t599 - t1262 * t595 - t1267 * t592;
t584 = t1264 * t598 + t1269 * t594;
t1299 = pkin(8) * t584 + t1264 * t570 + t1269 * t574;
t640 = -pkin(5) * t934 + pkin(11) * t794 + t654;
t645 = -pkin(11) * t792 - t653;
t608 = -pkin(4) * t934 + qJ(5) * t728 + t1257 * t645 + t1259 * t640;
t609 = -qJ(5) * t726 - t1257 * t640 + t1259 * t645;
t589 = -pkin(10) * t677 - t1262 * t608 + t1267 * t609;
t638 = -pkin(3) * t677 - pkin(4) * t726 - pkin(5) * t792;
t664 = t1263 * t679 - t1268 * t934;
t583 = -pkin(9) * t664 - t1263 * t638 + t1268 * t589;
t586 = -pkin(2) * t664 + pkin(3) * t934 - pkin(10) * t679 - t1262 * t609 - t1267 * t608;
t635 = t1264 * t677 + t1269 * t665;
t1298 = pkin(8) * t635 + t1264 * t583 + t1269 * t586;
t709 = -pkin(4) * t928 + qJ(5) * t720;
t632 = -pkin(10) * t672 - qJ(5) * t1420 - t1262 * t709;
t646 = -pkin(3) * t672 - pkin(4) * t719;
t661 = t1263 * t673 - t1268 * t928;
t604 = -pkin(9) * t661 - t1263 * t646 + t1268 * t632;
t612 = -pkin(2) * t661 + pkin(3) * t928 - pkin(10) * t673 + qJ(5) * t1423 - t1267 * t709;
t631 = t1264 * t672 + t1269 * t662;
t1297 = pkin(8) * t631 + t1264 * t604 + t1269 * t612;
t752 = -pkin(5) * t874 + pkin(11) * t891 - t1422;
t779 = -pkin(11) * t890 + t1425;
t675 = -pkin(4) * t874 + qJ(5) * t813 + t1257 * t779 + t1259 * t752;
t686 = -qJ(5) * t812 - t1257 * t752 + t1259 * t779;
t627 = -pkin(10) * t739 - t1262 * t675 + t1267 * t686;
t649 = -pkin(3) * t739 - pkin(4) * t812 - pkin(5) * t890 + t704;
t712 = t1263 * t740 - t1268 * t874;
t605 = -pkin(9) * t712 - t1263 * t649 + t1268 * t627;
t618 = -pkin(2) * t712 + pkin(3) * t874 - pkin(10) * t740 - t1262 * t686 - t1267 * t675;
t674 = t1264 * t739 + t1269 * t713;
t1296 = pkin(8) * t674 + t1264 * t605 + t1269 * t618;
t756 = -pkin(5) * t1444 + pkin(11) * t916 + t1425;
t798 = -pkin(11) * t915 + t1422;
t685 = -pkin(4) * t1444 + qJ(5) * t832 + t1257 * t798 + t1259 * t756;
t690 = -qJ(5) * t831 - t1257 * t756 + t1259 * t798;
t634 = -pkin(10) * t757 - t1262 * t685 + t1267 * t690;
t657 = -pkin(3) * t757 - pkin(4) * t831 - pkin(5) * t915 + t705;
t729 = t1263 * t758 - t1268 * t1444;
t607 = -pkin(9) * t729 - t1263 * t657 + t1268 * t634;
t619 = -pkin(2) * t729 + pkin(3) * t1444 - pkin(10) * t758 - t1262 * t690 - t1267 * t685;
t687 = t1264 * t757 + t1269 * t730;
t1295 = pkin(8) * t687 + t1264 * t607 + t1269 * t619;
t706 = -pkin(4) * t1018 + qJ(5) * t903 + t720;
t708 = -qJ(5) * t901 - t719;
t648 = -pkin(10) * t819 - t1262 * t706 + t1267 * t708;
t773 = -pkin(3) * t819 - pkin(4) * t901;
t801 = -t1018 * t1268 + t1263 * t821;
t637 = -pkin(9) * t801 - t1263 * t773 + t1268 * t648;
t639 = -pkin(2) * t801 + pkin(3) * t1018 - pkin(10) * t821 - t1262 * t708 - t1267 * t706;
t741 = t1264 * t819 + t1269 * t802;
t1294 = pkin(8) * t741 + t1264 * t637 + t1269 * t639;
t828 = -pkin(4) * t978 + qJ(5) * t952 - t1426;
t858 = -qJ(5) * t951 + t1428;
t738 = -pkin(10) * t881 - t1262 * t828 + t1267 * t858;
t742 = -pkin(3) * t881 - pkin(4) * t951 + t782;
t838 = t1263 * t882 - t1268 * t978;
t666 = -pkin(9) * t838 - t1263 * t742 + t1268 * t738;
t699 = -pkin(2) * t838 + pkin(3) * t978 - pkin(10) * t882 - t1262 * t858 - t1267 * t828;
t776 = t1264 * t881 + t1269 * t839;
t1293 = pkin(8) * t776 + t1264 * t666 + t1269 * t699;
t830 = -pkin(4) * t1442 + qJ(5) * t977 + t1428;
t860 = -qJ(5) * t976 + t1426;
t744 = -pkin(10) * t898 - t1262 * t830 + t1267 * t860;
t748 = -pkin(3) * t898 - pkin(4) * t976 + t783;
t847 = t1263 * t899 - t1268 * t1442;
t680 = -pkin(9) * t847 - t1263 * t748 + t1268 * t744;
t707 = -pkin(2) * t847 + pkin(3) * t1442 - pkin(10) * t899 - t1262 * t860 - t1267 * t830;
t780 = t1264 * t898 + t1269 * t848;
t1292 = pkin(8) * t780 + t1264 * t680 + t1269 * t707;
t816 = -t1004 * t1268 + t1263 * t842;
t718 = -pkin(9) * t816 + (-pkin(10) * t1268 + t1433) * t841;
t747 = -pkin(2) * t816 + pkin(3) * t1004 - pkin(10) * t842;
t755 = t1264 * t841 + t1269 * t817;
t1291 = pkin(8) * t755 + t1264 * t718 + t1269 * t747;
t814 = -pkin(10) * t969 - t841;
t939 = t1103 * t1268 + t1263 * t971;
t765 = -pkin(9) * t939 + t1268 * t814 + t1433 * t969;
t774 = -pkin(2) * t939 - pkin(3) * t1103 - pkin(10) * t971 - t842;
t880 = t1264 * t969 + t1269 * t940;
t1290 = pkin(8) * t880 + t1264 * t765 + t1269 * t774;
t886 = -pkin(3) * t1025 + t924;
t929 = -pkin(10) * t1025 + t1415;
t949 = t1026 * t1263 + t1065 * t1268;
t786 = -pkin(9) * t949 - t1263 * t886 + t1268 * t929;
t843 = -pkin(2) * t949 - pkin(3) * t1065 - pkin(10) * t1026 + t1414;
t912 = t1025 * t1264 + t1269 * t950;
t1289 = pkin(8) * t912 + t1264 * t786 + t1269 * t843;
t889 = -pkin(3) * t1029 + t925;
t933 = -pkin(10) * t1029 + t1414;
t954 = t1030 * t1263 + t1069 * t1268;
t795 = -pkin(9) * t954 - t1263 * t889 + t1268 * t933;
t844 = -pkin(2) * t954 - pkin(3) * t1069 - pkin(10) * t1030 - t1415;
t914 = t1029 * t1264 + t1269 * t955;
t1288 = pkin(8) * t914 + t1264 * t795 + t1269 * t844;
t1099 = t1173 * t1263 + t1446;
t1035 = -pkin(9) * t1099 + t1409;
t1040 = t1100 * t1269 + t1264 * t1450;
t995 = -pkin(2) * t1099 + t1053;
t1287 = pkin(8) * t1040 + t1035 * t1264 + t1269 * t995;
t1105 = t1180 * t1268 + t1406;
t1041 = -pkin(9) * t1105 + t1408;
t1042 = t1106 * t1269 + t1136 * t1264;
t998 = -pkin(2) * t1105 + t1054;
t1286 = pkin(8) * t1042 + t1041 * t1264 + t1269 * t998;
t1153 = t1196 * t1264 + t1197 * t1269;
t1285 = pkin(8) * t1153 + t1104;
t1019 = t1073 * t1269 - t1157 * t1264;
t1071 = -t1133 * t1263 + t1138 * t1268;
t923 = -pkin(9) * t1071 - t961;
t1282 = pkin(8) * t1019 - t1071 * t1434 + t1264 * t923;
t937 = t1123 * t1264 + t1269 * t962;
t1281 = pkin(8) * t937 + t1355 * t961;
t1253 = t1258 * t1254;
t1240 = t1265 * qJDD(1) + t1270 * t1440;
t1231 = t1380 * t1390;
t1230 = (t1255 - t1256) * t1390;
t1226 = -pkin(7) * t1240 + g(3) * t1270;
t1200 = t1380 * t1375;
t1194 = (t1384 * t1416 + t1379) * t1258;
t1191 = t1225 * t1269 - t1255 * t1375;
t1190 = (-t1256 * t1249 * qJD(1) + t1264 * t1300) * t1258;
t1183 = t1228 * t1269 - t1394;
t1182 = -t1227 * t1264 + t1395;
t1172 = (t1225 * t1260 + (qJD(1) * t1253 + t1260 * t1391) * t1416) * t1264;
t1171 = -t1253 * t1363 + (-t1384 * t1417 + t1378) * t1260 * t1388;
t1165 = t1268 * t1168;
t1155 = t1353 + t1350;
t1154 = -t1195 * t1264 + t1198 * t1269;
t1150 = t1258 * t1198 + t1260 * t1305;
t1149 = -t1258 * t1197 + t1260 * t1304;
t1148 = -t1258 * t1196 + t1260 * t1306;
t1147 = -t1260 * t1198 + t1258 * t1305;
t1131 = -t1258 * t1194 + t1260 * t1307;
t1130 = t1260 * t1194 + t1258 * t1307;
t1128 = t1263 * t1170 - t1350;
t1126 = -t1268 * t1361 - t1353;
t1125 = t1269 * t1156 + t1264 * t1278;
t1122 = -t1258 * t1230 + t1260 * t1309;
t1121 = t1258 * t1231 + t1260 * t1308;
t1120 = -t1260 * t1231 + t1258 * t1308;
t1113 = t1192 * t1263 - t1405;
t1112 = t1193 * t1268 + t1447;
t1095 = -t1265 * t1150 + t1184 * t1270;
t1094 = t1150 * t1270 + t1265 * t1184;
t1089 = t1129 * t1269 + t1365;
t1088 = t1127 * t1269 - t1365;
t1087 = -t1265 * t1131 + t1176 * t1270;
t1086 = t1131 * t1270 + t1265 * t1176;
t1085 = t1258 * t1201 + t1260 * t1310;
t1084 = -t1260 * t1201 + t1258 * t1310;
t1081 = -t1258 * t1155 + t1260 * t1449;
t1080 = -t1265 * t1121 + t1153 * t1270;
t1079 = t1121 * t1270 + t1265 * t1153;
t1070 = t1136 * t1268 - t1263 * t1450;
t1058 = t1097 * t1263 - t1165;
t1056 = t1115 * t1269 - t1133 * t1264;
t1055 = t1114 * t1269 - t1138 * t1264;
t1043 = -t1386 + (-t1147 * t1258 - t1150 * t1260) * pkin(8);
t1039 = -t1385 + (-t1130 * t1258 - t1131 * t1260) * pkin(8);
t1038 = -pkin(1) * t1147 + t1258 * t1174 + t1260 * t1348;
t1028 = t1072 * t1269 - t1179 * t1264;
t1027 = -pkin(1) * t1130 + t1258 * t1175 + t1260 * t1349;
t1024 = -t1258 * t1128 + t1260 * t1301;
t1023 = -t1258 * t1126 + t1260 * t1302;
t1016 = pkin(8) * t1104 * t1260 - pkin(1) * t1084;
t1015 = -t1265 * t1085 + t1104 * t1270;
t1014 = t1085 * t1270 + t1265 * t1104;
t1011 = t1063 * t1263 - t1366;
t1010 = t1061 * t1263 + t1366;
t1006 = -pkin(1) * t1120 + t1260 * t1285;
t1003 = -pkin(2) * t1136 + pkin(9) * t1106 + t1409;
t1001 = -t1258 * t1113 + t1260 * t1311;
t1000 = -t1258 * t1112 + t1260 * t1312;
t999 = (-t1084 * t1258 - t1085 * t1260) * pkin(8);
t997 = -pkin(2) * t1450 + pkin(9) * t1100 - t1408;
t996 = (-t1120 * t1258 - t1121 * t1260) * pkin(8) - t1310;
t994 = -t1258 * t1105 + t1260 * t1313;
t993 = t1260 * t1105 + t1258 * t1313;
t992 = t1059 * t1269 - t1096 * t1264;
t987 = -t1258 * t1099 + t1260 * t1314;
t986 = t1260 * t1099 + t1258 * t1314;
t964 = t1047 * t1263 + t1064 * t1268;
t963 = t1046 * t1263 + t1068 * t1268;
t953 = -t1258 * t1070 + t1260 * t1316;
t948 = -t1258 * t1071 + t1260 * t1315;
t947 = t1260 * t1071 + t1258 * t1315;
t943 = t1151 * t1268 + t1263 * t970;
t942 = t1013 * t1269 - t1062 * t1264;
t941 = t1012 * t1269 - t1060 * t1264;
t938 = -pkin(2) * t1123 + pkin(9) * t962;
t935 = t1263 * t946 - t1165;
t932 = -t1258 * t1058 + t1260 * t1317;
t931 = t1042 * t1270 - t1265 * t994;
t930 = t1265 * t1042 + t1270 * t994;
t927 = t1040 * t1270 - t1265 * t987;
t926 = t1265 * t1040 + t1270 * t987;
t922 = -t1045 * t1264 + t1269 * t966;
t921 = -t1044 * t1264 + t1269 * t965;
t913 = pkin(2) * t1157 + pkin(9) * t1073 + t962;
t905 = t1019 * t1270 - t1265 * t948;
t904 = t1265 * t1019 + t1270 * t948;
t893 = -t1258 * t1011 + t1260 * t1318;
t892 = -t1258 * t1010 + t1260 * t1319;
t883 = -t1264 * t968 + t1269 * t944;
t864 = t1263 * t897 - t1368;
t863 = t1263 * t896 + t1368;
t862 = -t1258 * t961 + t1260 * t1320;
t861 = t1258 * t1320 + t1260 * t961;
t859 = -t1264 * t945 + t1269 * t936;
t857 = -t1258 * t964 + t1260 * t1321;
t856 = -t1258 * t963 + t1260 * t1322;
t853 = t1263 * t909 + t1268 * t979;
t852 = t1263 * t908 + t1268 * t983;
t851 = -t1258 * t954 + t1260 * t1323;
t850 = t1258 * t1323 + t1260 * t954;
t846 = -t1258 * t949 + t1260 * t1324;
t845 = t1258 * t1324 + t1260 * t949;
t840 = t1269 * t1041 - t1264 * t998 + (-t1258 * t993 - t1260 * t994) * pkin(8);
t833 = t1269 * t1035 - t1264 * t995 + (-t1258 * t986 - t1260 * t987) * pkin(8);
t829 = -t1258 * t943 + t1260 * t1325;
t827 = -pkin(1) * t993 - t1258 * t1003 + t1260 * t1286;
t826 = -t1258 * t939 + t1260 * t1326;
t825 = t1258 * t1326 + t1260 * t939;
t824 = -t1265 * t862 + t1270 * t937;
t823 = t1265 * t937 + t1270 * t862;
t822 = -pkin(1) * t986 - t1258 * t997 + t1260 * t1287;
t815 = -t1258 * t935 + t1260 * t1327;
t810 = t1082 * t1268 + t1263 * t820;
t807 = -t1264 * t895 + t1269 * t866;
t806 = -t1264 * t894 + t1269 * t865;
t805 = t1071 * t1435 + t1269 * t923 + (-t1258 * t947 - t1260 * t948) * pkin(8);
t803 = t1263 * t809 - t1268 * t1303;
t800 = -t1265 * t851 + t1270 * t914;
t799 = t1265 * t914 + t1270 * t851;
t797 = -t1264 * t907 + t1269 * t855;
t796 = -t1264 * t906 + t1269 * t854;
t785 = -t1265 * t846 + t1270 * t912;
t784 = t1265 * t912 + t1270 * t846;
t778 = -pkin(2) * t1029 + pkin(9) * t955 + t1263 * t933 + t1268 * t889;
t777 = -pkin(2) * t1025 + pkin(9) * t950 + t1263 * t929 + t1268 * t886;
t775 = -pkin(1) * t947 - t1258 * t913 + t1260 * t1282;
t772 = -t1265 * t826 + t1270 * t880;
t771 = t1265 * t880 + t1270 * t826;
t760 = -t1258 * t864 + t1260 * t1328;
t759 = -t1258 * t863 + t1260 * t1329;
t754 = (-t1431 + t1435) * t961 + (-t1258 * t861 - t1260 * t862) * pkin(8);
t753 = -pkin(1) * t861 - t1258 * t938 + t1260 * t1281;
t751 = pkin(9) * t940 + t1263 * t814 + t1376 * t969;
t750 = -t1258 * t853 + t1260 * t1330;
t749 = -t1258 * t852 + t1260 * t1331;
t746 = -t1258 * t847 + t1260 * t1332;
t745 = t1258 * t1332 + t1260 * t847;
t743 = -t1264 * t818 + t1269 * t811;
t737 = -t1258 * t838 + t1260 * t1333;
t736 = t1258 * t1333 + t1260 * t838;
t735 = -t1264 * t808 + t1269 * t804;
t732 = t1263 * t764 + t1268 * t875;
t731 = t1263 * t763 + t1268 * t879;
t715 = t1263 * t724 - t1370;
t714 = t1263 * t723 + t1370;
t711 = -t1258 * t816 + t1260 * t1334;
t710 = t1258 * t1334 + t1260 * t816;
t702 = -t1258 * t810 + t1260 * t1335;
t701 = -t1265 * t746 + t1270 * t780;
t700 = t1265 * t780 + t1270 * t746;
t698 = -t1258 * t801 + t1260 * t1337;
t697 = t1258 * t1337 + t1260 * t801;
t696 = pkin(9) * t817 + (-pkin(10) * t1263 + t1376) * t841;
t695 = -t1264 * t844 + t1269 * t795 + (-t1258 * t850 - t1260 * t851) * pkin(8);
t694 = -t1258 * t803 + t1260 * t1336;
t693 = -t1264 * t843 + t1269 * t786 + (-t1258 * t845 - t1260 * t846) * pkin(8);
t692 = -t1265 * t737 + t1270 * t776;
t691 = t1265 * t776 + t1270 * t737;
t689 = -t1264 * t762 + t1269 * t734;
t688 = -t1264 * t761 + t1269 * t733;
t684 = -pkin(1) * t850 - t1258 * t778 + t1260 * t1288;
t683 = -t1265 * t711 + t1270 * t755;
t682 = t1265 * t755 + t1270 * t711;
t681 = -pkin(1) * t845 - t1258 * t777 + t1260 * t1289;
t671 = -t1264 * t774 + t1269 * t765 + (-t1258 * t825 - t1260 * t826) * pkin(8);
t669 = t1263 * t678 + t1268 * t984;
t668 = -t1264 * t722 + t1269 * t717;
t667 = -t1264 * t721 + t1269 * t716;
t663 = -pkin(2) * t898 + pkin(9) * t848 + t1263 * t744 + t1268 * t748;
t660 = -t1265 * t698 + t1270 * t741;
t659 = t1265 * t741 + t1270 * t698;
t658 = -pkin(2) * t881 + pkin(9) * t839 + t1263 * t738 + t1268 * t742;
t656 = -t1258 * t732 + t1260 * t1338;
t655 = -t1258 * t731 + t1260 * t1339;
t652 = -t1258 * t729 + t1260 * t1340;
t651 = t1258 * t1340 + t1260 * t729;
t650 = -pkin(1) * t825 - t1258 * t751 + t1260 * t1290;
t644 = -t1258 * t712 + t1260 * t1343;
t643 = t1258 * t1343 + t1260 * t712;
t642 = -t1258 * t715 + t1260 * t1341;
t641 = -t1258 * t714 + t1260 * t1342;
t636 = -t1264 * t676 + t1269 * t670;
t633 = -t1264 * t747 + t1269 * t718 + (-t1258 * t710 - t1260 * t711) * pkin(8);
t630 = -t1265 * t652 + t1270 * t687;
t629 = t1265 * t687 + t1270 * t652;
t628 = -pkin(2) * t819 + pkin(9) * t802 + t1263 * t648 + t1268 * t773;
t626 = -t1264 * t707 + t1269 * t680 + (-t1258 * t745 - t1260 * t746) * pkin(8);
t625 = -pkin(1) * t710 - t1258 * t696 + t1260 * t1291;
t624 = -t1265 * t644 + t1270 * t674;
t623 = t1265 * t674 + t1270 * t644;
t620 = -t1264 * t699 + t1269 * t666 + (-t1258 * t736 - t1260 * t737) * pkin(8);
t617 = -t1258 * t669 + t1260 * t1344;
t616 = -t1258 * t664 + t1260 * t1345;
t615 = t1258 * t1345 + t1260 * t664;
t614 = -t1258 * t661 + t1260 * t1346;
t613 = t1258 * t1346 + t1260 * t661;
t611 = -pkin(1) * t745 - t1258 * t663 + t1260 * t1292;
t610 = -pkin(1) * t736 - t1258 * t658 + t1260 * t1293;
t606 = -pkin(2) * t757 + pkin(9) * t730 + t1263 * t634 + t1268 * t657;
t603 = -pkin(2) * t739 + pkin(9) * t713 + t1263 * t627 + t1268 * t649;
t602 = -t1264 * t639 + t1269 * t637 + (-t1258 * t697 - t1260 * t698) * pkin(8);
t601 = -t1265 * t616 + t1270 * t635;
t600 = t1265 * t635 + t1270 * t616;
t597 = -t1265 * t614 + t1270 * t631;
t596 = t1265 * t631 + t1270 * t614;
t591 = -pkin(2) * t672 + pkin(9) * t662 + t1263 * t632 + t1268 * t646;
t590 = -pkin(1) * t697 - t1258 * t628 + t1260 * t1294;
t588 = -t1264 * t619 + t1269 * t607 + (-t1258 * t651 - t1260 * t652) * pkin(8);
t585 = -t1264 * t618 + t1269 * t605 + (-t1258 * t643 - t1260 * t644) * pkin(8);
t582 = -pkin(2) * t677 + pkin(9) * t665 + t1263 * t589 + t1268 * t638;
t581 = -pkin(1) * t651 - t1258 * t606 + t1260 * t1295;
t580 = -t1264 * t612 + t1269 * t604 + (-t1258 * t613 - t1260 * t614) * pkin(8);
t579 = -pkin(1) * t643 - t1258 * t603 + t1260 * t1296;
t578 = -t1258 * t593 + t1260 * t1347;
t577 = t1258 * t1347 + t1260 * t593;
t575 = -pkin(1) * t613 - t1258 * t591 + t1260 * t1297;
t573 = -t1265 * t578 + t1270 * t584;
t572 = t1265 * t584 + t1270 * t578;
t571 = -t1264 * t586 + t1269 * t583 + (-t1258 * t615 - t1260 * t616) * pkin(8);
t569 = -pkin(2) * t598 + pkin(9) * t594 + t1263 * t576 + t1268 * t587;
t568 = -pkin(1) * t615 - t1258 * t582 + t1260 * t1298;
t567 = -t1264 * t574 + t1269 * t570 + (-t1258 * t577 - t1260 * t578) * pkin(8);
t566 = -pkin(1) * t577 - t1258 * t569 + t1260 * t1299;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1240, -t1241, 0, t1203, 0, 0, 0, 0, 0, 0, t1095, t1087, t1080, t1015, 0, 0, 0, 0, 0, 0, t927, t931, t905, t824, 0, 0, 0, 0, 0, 0, t785, t800, t772, t683, 0, 0, 0, 0, 0, 0, t692, t701, t660, t597, 0, 0, 0, 0, 0, 0, t624, t630, t601, t573; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1241, -t1240, 0, t1202, 0, 0, 0, 0, 0, 0, t1094, t1086, t1079, t1014, 0, 0, 0, 0, 0, 0, t926, t930, t904, t823, 0, 0, 0, 0, 0, 0, t784, t799, t771, t682, 0, 0, 0, 0, 0, 0, t691, t700, t659, t596, 0, 0, 0, 0, 0, 0, t623, t629, t600, t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1147, t1130, t1120, t1084, 0, 0, 0, 0, 0, 0, t986, t993, t947, t861, 0, 0, 0, 0, 0, 0, t845, t850, t825, t710, 0, 0, 0, 0, 0, 0, t736, t745, t697, t613, 0, 0, 0, 0, 0, 0, t643, t651, t615, t577; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1241, 0, -t1240, 0, t1354, -t1226, -t1202, -pkin(7) * t1202, -t1265 * t1172 + t1191 * t1270, -t1265 * t1122 + t1154 * t1270, -t1265 * t1148 + t1182 * t1270, -t1265 * t1171 + t1190 * t1270, -t1265 * t1149 + t1183 * t1270, t1200 * t1270 + t1265 * t1392, -pkin(7) * t1094 - t1265 * t1038 + t1043 * t1270, -pkin(7) * t1086 - t1265 * t1027 + t1039 * t1270, -pkin(7) * t1079 - t1265 * t1006 + t1270 * t996, -pkin(7) * t1014 - t1265 * t1016 + t1270 * t999, -t1265 * t1024 + t1089 * t1270, t1028 * t1270 - t1265 * t953, -t1265 * t1000 + t1055 * t1270, -t1265 * t1023 + t1088 * t1270, -t1265 * t1001 + t1056 * t1270, -t1265 * t1081 + t1125 * t1270, -pkin(7) * t926 - t1265 * t822 + t1270 * t833, -pkin(7) * t930 - t1265 * t827 + t1270 * t840, -pkin(7) * t904 - t1265 * t775 + t1270 * t805, -pkin(7) * t823 - t1265 * t753 + t1270 * t754, -t1265 * t893 + t1270 * t942, -t1265 * t829 + t1270 * t883, -t1265 * t856 + t1270 * t921, -t1265 * t892 + t1270 * t941, -t1265 * t857 + t1270 * t922, -t1265 * t932 + t1270 * t992, -pkin(7) * t784 - t1265 * t681 + t1270 * t693, -pkin(7) * t799 - t1265 * t684 + t1270 * t695, -pkin(7) * t771 - t1265 * t650 + t1270 * t671, -pkin(7) * t682 - t1265 * t625 + t1270 * t633, -t1265 * t760 + t1270 * t807, -t1265 * t702 + t1270 * t743, -t1265 * t749 + t1270 * t796, -t1265 * t759 + t1270 * t806, -t1265 * t750 + t1270 * t797, -t1265 * t815 + t1270 * t859, -pkin(7) * t691 - t1265 * t610 + t1270 * t620, -pkin(7) * t700 - t1265 * t611 + t1270 * t626, -pkin(7) * t659 - t1265 * t590 + t1270 * t602, -pkin(7) * t596 - t1265 * t575 + t1270 * t580, -t1265 * t642 + t1270 * t668, -t1265 * t617 + t1270 * t636, -t1265 * t655 + t1270 * t688, -t1265 * t641 + t1270 * t667, -t1265 * t656 + t1270 * t689, -t1265 * t694 + t1270 * t735, -pkin(7) * t623 - t1265 * t579 + t1270 * t585, -pkin(7) * t629 - t1265 * t581 + t1270 * t588, -pkin(7) * t600 - t1265 * t568 + t1270 * t571, -pkin(7) * t572 - t1265 * t566 + t1270 * t567; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1240, 0, t1241, 0, t1226, t1354, t1203, pkin(7) * t1203, t1172 * t1270 + t1265 * t1191, t1122 * t1270 + t1265 * t1154, t1148 * t1270 + t1265 * t1182, t1171 * t1270 + t1265 * t1190, t1149 * t1270 + t1265 * t1183, t1265 * t1200 - t1270 * t1392, pkin(7) * t1095 + t1038 * t1270 + t1265 * t1043, pkin(7) * t1087 + t1027 * t1270 + t1265 * t1039, pkin(7) * t1080 + t1006 * t1270 + t1265 * t996, pkin(7) * t1015 + t1016 * t1270 + t1265 * t999, t1024 * t1270 + t1265 * t1089, t1265 * t1028 + t1270 * t953, t1000 * t1270 + t1265 * t1055, t1023 * t1270 + t1265 * t1088, t1001 * t1270 + t1265 * t1056, t1081 * t1270 + t1265 * t1125, pkin(7) * t927 + t1265 * t833 + t1270 * t822, pkin(7) * t931 + t1265 * t840 + t1270 * t827, pkin(7) * t905 + t1265 * t805 + t1270 * t775, pkin(7) * t824 + t1265 * t754 + t1270 * t753, t1265 * t942 + t1270 * t893, t1265 * t883 + t1270 * t829, t1265 * t921 + t1270 * t856, t1265 * t941 + t1270 * t892, t1265 * t922 + t1270 * t857, t1265 * t992 + t1270 * t932, pkin(7) * t785 + t1265 * t693 + t1270 * t681, pkin(7) * t800 + t1265 * t695 + t1270 * t684, pkin(7) * t772 + t1265 * t671 + t1270 * t650, pkin(7) * t683 + t1265 * t633 + t1270 * t625, t1265 * t807 + t1270 * t760, t1265 * t743 + t1270 * t702, t1265 * t796 + t1270 * t749, t1265 * t806 + t1270 * t759, t1265 * t797 + t1270 * t750, t1265 * t859 + t1270 * t815, pkin(7) * t692 + t1265 * t620 + t1270 * t610, pkin(7) * t701 + t1265 * t626 + t1270 * t611, pkin(7) * t660 + t1265 * t602 + t1270 * t590, pkin(7) * t597 + t1265 * t580 + t1270 * t575, t1265 * t668 + t1270 * t642, t1265 * t636 + t1270 * t617, t1265 * t688 + t1270 * t655, t1265 * t667 + t1270 * t641, t1265 * t689 + t1270 * t656, t1265 * t735 + t1270 * t694, pkin(7) * t624 + t1265 * t585 + t1270 * t579, pkin(7) * t630 + t1265 * t588 + t1270 * t581, pkin(7) * t601 + t1265 * t571 + t1270 * t568, pkin(7) * t573 + t1265 * t567 + t1270 * t566; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1243, t1244, 0, 0, (-t1254 * t1359 * t1416 + t1225 * t1258) * t1264, t1260 * t1230 + t1258 * t1309, t1260 * t1196 + t1258 * t1306, (t1378 + (-qJD(2) + t1359) * t1417) * t1254 * t1269, t1260 * t1197 + t1258 * t1304, t1260 * t1248, pkin(1) * t1150 - t1260 * t1174 + t1258 * t1348, pkin(1) * t1131 - t1260 * t1175 + t1258 * t1349, pkin(1) * t1121 + t1258 * t1285, pkin(1) * t1085 + t1104 * t1432, t1260 * t1128 + t1258 * t1301, t1260 * t1070 + t1258 * t1316, t1260 * t1112 + t1258 * t1312, t1260 * t1126 + t1258 * t1302, t1260 * t1113 + t1258 * t1311, t1260 * t1155 + t1258 * t1449, pkin(1) * t987 + t1258 * t1287 + t1260 * t997, pkin(1) * t994 + t1260 * t1003 + t1258 * t1286, pkin(1) * t948 + t1258 * t1282 + t1260 * t913, pkin(1) * t862 + t1258 * t1281 + t1260 * t938, t1260 * t1011 + t1258 * t1318, t1258 * t1325 + t1260 * t943, t1258 * t1322 + t1260 * t963, t1260 * t1010 + t1258 * t1319, t1258 * t1321 + t1260 * t964, t1260 * t1058 + t1258 * t1317, pkin(1) * t846 + t1258 * t1289 + t1260 * t777, pkin(1) * t851 + t1258 * t1288 + t1260 * t778, pkin(1) * t826 + t1258 * t1290 + t1260 * t751, pkin(1) * t711 + t1258 * t1291 + t1260 * t696, t1258 * t1328 + t1260 * t864, t1258 * t1335 + t1260 * t810, t1258 * t1331 + t1260 * t852, t1258 * t1329 + t1260 * t863, t1258 * t1330 + t1260 * t853, t1258 * t1327 + t1260 * t935, pkin(1) * t737 + t1258 * t1293 + t1260 * t658, pkin(1) * t746 + t1258 * t1292 + t1260 * t663, pkin(1) * t698 + t1258 * t1294 + t1260 * t628, pkin(1) * t614 + t1258 * t1297 + t1260 * t591, t1258 * t1341 + t1260 * t715, t1258 * t1344 + t1260 * t669, t1258 * t1339 + t1260 * t731, t1258 * t1342 + t1260 * t714, t1258 * t1338 + t1260 * t732, t1258 * t1336 + t1260 * t803, pkin(1) * t644 + t1258 * t1296 + t1260 * t603, pkin(1) * t652 + t1258 * t1295 + t1260 * t606, pkin(1) * t616 + t1258 * t1298 + t1260 * t582, pkin(1) * t578 + t1258 * t1299 + t1260 * t569;];
tauB_reg  = t1;
