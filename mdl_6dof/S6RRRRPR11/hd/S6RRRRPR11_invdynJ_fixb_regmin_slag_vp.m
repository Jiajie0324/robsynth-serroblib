% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x33]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPR11_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR11_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR11_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR11_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR11_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR11_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 23:23:39
% EndTime: 2019-03-09 23:24:18
% DurationCPUTime: 18.62s
% Computational Cost: add. (20475->734), mult. (49593->1025), div. (0->0), fcn. (40580->16), ass. (0->349)
t358 = sin(pkin(6));
t369 = cos(qJ(2));
t481 = qJD(1) * t369;
t456 = t358 * t481;
t321 = -qJD(3) + t456;
t364 = sin(qJ(2));
t524 = cos(pkin(6));
t439 = t524 * qJD(1);
t427 = pkin(1) * t439;
t280 = pkin(8) * t456 + t364 * t427;
t363 = sin(qJ(3));
t368 = cos(qJ(3));
t590 = t280 + t321 * (pkin(3) * t363 - pkin(10) * t368);
t405 = t439 + qJD(2);
t482 = qJD(1) * t358;
t457 = t364 * t482;
t259 = t363 * t405 + t368 * t457;
t362 = sin(qJ(4));
t367 = cos(qJ(4));
t208 = t259 * t362 + t367 * t321;
t210 = t259 * t367 - t321 * t362;
t357 = sin(pkin(12));
t359 = cos(pkin(12));
t127 = t208 * t357 - t210 * t359;
t361 = sin(qJ(6));
t366 = cos(qJ(6));
t471 = qJD(6) * t361;
t409 = -t208 * t359 - t210 * t357;
t502 = t366 * t409;
t433 = t524 * qJDD(1);
t339 = t433 + qJDD(2);
t385 = qJD(3) * t405;
t429 = t363 * t457;
t469 = qJDD(1) * t364;
t446 = t358 * t469;
t470 = qJD(1) * qJD(2);
t447 = t369 * t470;
t568 = -t358 * t447 - t446;
t171 = -qJD(3) * t429 + t363 * t339 + (t385 - t568) * t368;
t468 = qJDD(1) * t369;
t338 = t358 * t468;
t448 = t364 * t470;
t426 = t358 * t448;
t274 = qJDD(3) - t338 + t426;
t473 = qJD(4) * t367;
t475 = qJD(4) * t362;
t112 = t367 * t171 - t259 * t475 + t362 * t274 - t321 * t473;
t113 = qJD(4) * t210 + t171 * t362 - t367 * t274;
t57 = -t112 * t357 - t113 * t359;
t58 = t112 * t359 - t113 * t357;
t17 = qJD(6) * t502 + t127 * t471 + t361 * t57 + t366 * t58;
t257 = -t368 * t405 + t429;
t250 = qJD(4) + t257;
t242 = qJD(6) + t250;
t77 = t127 * t361 + t502;
t530 = t242 * t77;
t589 = t17 - t530;
t567 = -t366 * t127 + t361 * t409;
t588 = t567 * t77;
t478 = qJD(3) * t363;
t544 = pkin(9) * t362;
t587 = -t367 * t590 + t478 * t544;
t246 = t362 * t368 * t456 - t367 * t457;
t477 = qJD(3) * t368;
t576 = -t362 * t477 + t246;
t499 = t368 * t369;
t247 = (t362 * t364 + t367 * t499) * t482;
t586 = -t367 * t477 + t247;
t277 = -pkin(8) * t457 + t369 * t427;
t419 = pkin(2) * t364 - pkin(9) * t369;
t278 = t419 * t482;
t489 = t368 * t277 + t363 * t278;
t183 = pkin(10) * t457 + t489;
t317 = -pkin(3) * t368 - pkin(10) * t363 - pkin(2);
t585 = t367 * t183 - t317 * t473 + t362 * t590;
t584 = t567 ^ 2 - t77 ^ 2;
t365 = sin(qJ(1));
t441 = t364 * t524;
t550 = cos(qJ(1));
t293 = -t365 * t441 + t369 * t550;
t508 = t358 * t365;
t232 = t293 * t368 + t363 * t508;
t440 = t369 * t524;
t292 = t364 * t550 + t365 * t440;
t352 = qJ(4) + pkin(12) + qJ(6);
t347 = sin(t352);
t348 = cos(t352);
t166 = t232 * t348 + t292 * t347;
t507 = t358 * t368;
t289 = t363 * t524 + t364 * t507;
t239 = -pkin(2) * t405 - t277;
t144 = t257 * pkin(3) - t259 * pkin(10) + t239;
t240 = pkin(9) * t405 + t280;
t403 = -pkin(2) * t369 - pkin(9) * t364 - pkin(1);
t272 = t403 * t358;
t249 = qJD(1) * t272;
t170 = t368 * t240 + t363 * t249;
t147 = -pkin(10) * t321 + t170;
t96 = t144 * t362 + t147 * t367;
t70 = -qJ(5) * t208 + t96;
t529 = t359 * t70;
t95 = t367 * t144 - t147 * t362;
t69 = -qJ(5) * t210 + t95;
t61 = pkin(4) * t250 + t69;
t36 = t357 * t61 + t529;
t562 = pkin(11) * t409;
t26 = t36 + t562;
t479 = qJD(2) * t369;
t452 = t363 * t479;
t172 = -t368 * t339 + (qJD(1) * (t364 * t477 + t452) + t363 * t469) * t358 + t363 * t385;
t162 = qJDD(4) + t172;
t402 = qJD(2) * t427;
t424 = pkin(1) * t433;
t462 = -pkin(8) * t338 - t364 * t424 - t369 * t402;
t381 = -pkin(8) * t426 - t462;
t192 = pkin(9) * t339 + t381;
t397 = t419 * qJD(2);
t198 = (qJD(1) * t397 + qJDD(1) * t403) * t358;
t392 = t368 * t192 + t363 * t198 - t240 * t478 + t249 * t477;
t72 = pkin(10) * t274 + t392;
t431 = t568 * pkin(8) - t364 * t402 + t369 * t424;
t193 = -pkin(2) * t339 - t431;
t83 = pkin(3) * t172 - pkin(10) * t171 + t193;
t25 = -qJD(4) * t96 - t362 * t72 + t367 * t83;
t16 = pkin(4) * t162 - qJ(5) * t112 - qJD(5) * t210 + t25;
t394 = -t144 * t473 + t147 * t475 - t362 * t83 - t367 * t72;
t20 = -qJ(5) * t113 - qJD(5) * t208 - t394;
t6 = t359 * t16 - t20 * t357;
t4 = pkin(5) * t162 - pkin(11) * t58 + t6;
t449 = -t26 * t471 + t361 * t4;
t506 = t358 * t369;
t421 = t524 * t550;
t291 = t364 * t421 + t365 * t369;
t458 = t358 * t550;
t228 = t291 * t368 - t363 * t458;
t290 = t364 * t365 - t369 * t421;
t565 = t228 * t348 + t290 * t347;
t169 = -t363 * t240 + t249 * t368;
t146 = pkin(3) * t321 - t169;
t118 = pkin(4) * t208 + qJD(5) + t146;
t64 = -pkin(5) * t409 + t118;
t583 = -t64 * t77 + g(1) * t166 + g(2) * t565 - g(3) * (-t289 * t348 + t347 * t506) - t449;
t18 = qJD(6) * t567 + t361 * t58 - t366 * t57;
t531 = t242 * t567;
t581 = -t18 + t531;
t194 = pkin(3) * t259 + pkin(10) * t257;
t189 = t367 * t194;
t360 = -qJ(5) - pkin(10);
t442 = qJD(4) * t360;
t580 = -pkin(4) * t259 - t189 + (-qJ(5) * t257 + t442) * t367 + (-qJD(5) + t169) * t362;
t472 = qJD(5) * t367;
t493 = t367 * t169 + t362 * t194;
t519 = t257 * t362;
t579 = qJ(5) * t519 - t362 * t442 - t472 + t493;
t500 = t367 * t368;
t345 = pkin(9) * t500;
t455 = t363 * t481;
t428 = t358 * t455;
t545 = pkin(4) * t363;
t578 = -pkin(4) * t428 + qJ(5) * t247 + t183 * t362 - t363 * t472 + (-qJ(5) * t500 + t545) * qJD(3) + (-t345 + (qJ(5) * t363 - t317) * t362) * qJD(4) + t587;
t503 = t363 * t367;
t532 = pkin(9) * qJD(3);
t577 = -qJ(5) * t246 - (-qJ(5) * qJD(4) - t532) * t503 - (-qJD(5) * t363 + (-pkin(9) * qJD(4) - qJ(5) * qJD(3)) * t368) * t362 + t585;
t416 = g(1) * t293 + g(2) * t291;
t509 = t358 * t364;
t382 = -g(3) * t509 - t416;
t165 = -t232 * t347 + t292 * t348;
t566 = t228 * t347 - t290 * t348;
t575 = -t64 * t567 - g(3) * (-t289 * t347 - t348 * t506) + g(2) * t566 - g(1) * t165;
t574 = pkin(11) * t127;
t299 = t357 * t367 + t359 * t362;
t572 = t250 * t299;
t406 = t357 * t362 - t359 * t367;
t571 = t250 * t406;
t474 = qJD(4) * t363;
t570 = -t246 * t359 - t247 * t357 + t299 * t477 - t406 * t474;
t569 = t299 * t474 - t576 * t357 + t586 * t359;
t383 = -g(1) * t292 - g(2) * t290 + g(3) * t506;
t564 = t228 * t362 - t290 * t367;
t563 = t228 * t367 + t290 * t362;
t354 = t358 ^ 2;
t467 = 0.2e1 * t354;
t534 = t577 * t357 + t578 * t359;
t533 = t578 * t357 - t577 * t359;
t527 = t579 * t357 + t580 * t359;
t526 = t580 * t357 - t579 * t359;
t65 = t357 * t70;
t35 = t359 * t61 - t65;
t22 = pkin(5) * t250 + t35 + t574;
t7 = t357 * t16 + t359 * t20;
t5 = pkin(11) * t57 + t7;
t559 = (qJD(6) * t22 + t5) * t366;
t340 = pkin(8) * t509;
t558 = pkin(1) * t440 - t340;
t270 = -pkin(2) * t524 - t558;
t288 = t363 * t509 - t368 * t524;
t179 = t288 * pkin(3) - t289 * pkin(10) + t270;
t486 = pkin(1) * t441 + pkin(8) * t506;
t271 = pkin(9) * t524 + t486;
t490 = t368 * t271 + t363 * t272;
t181 = -pkin(10) * t506 + t490;
t492 = t362 * t179 + t367 * t181;
t557 = -t576 * pkin(4) + pkin(9) * t477 + t473 * t545;
t556 = -t170 + (t475 + t519) * pkin(4);
t554 = pkin(4) * t113 + qJDD(5);
t184 = -t232 * t362 + t292 * t367;
t225 = t289 * t362 + t367 * t506;
t553 = -g(1) * t184 + g(2) * t564 + g(3) * t225;
t370 = qJD(1) ^ 2;
t549 = pkin(3) * t274;
t546 = pkin(4) * t357;
t453 = t358 * t479;
t224 = -qJD(3) * t288 + t368 * t453;
t480 = qJD(2) * t364;
t454 = t358 * t480;
t143 = -qJD(4) * t225 + t224 * t367 + t362 * t454;
t223 = qJD(3) * t289 + t358 * t452;
t464 = t362 * t506;
t226 = t289 * t367 - t464;
t279 = t358 * t397;
t281 = t558 * qJD(2);
t391 = -t271 * t478 + t272 * t477 + t363 * t279 + t368 * t281;
t120 = pkin(10) * t454 + t391;
t282 = t486 * qJD(2);
t135 = t223 * pkin(3) - t224 * pkin(10) + t282;
t374 = -t492 * qJD(4) - t120 * t362 + t367 * t135;
t33 = pkin(4) * t223 - qJ(5) * t143 - qJD(5) * t226 + t374;
t142 = -qJD(4) * t464 + t224 * t362 + t289 * t473 - t367 * t454;
t390 = t367 * t120 + t362 * t135 + t179 * t473 - t181 * t475;
t37 = -qJ(5) * t142 - qJD(5) * t225 + t390;
t13 = t357 * t33 + t359 * t37;
t41 = t359 * t69 - t65;
t438 = t367 * t179 - t181 * t362;
t86 = pkin(4) * t288 - qJ(5) * t226 + t438;
t97 = -qJ(5) * t225 + t492;
t48 = t357 * t86 + t359 * t97;
t528 = t366 * t22;
t525 = t572 * pkin(5) + t556;
t523 = t112 * t362;
t522 = t208 * t250;
t521 = t210 * t250;
t434 = t250 * t367;
t520 = t257 * t321;
t518 = t259 * t321;
t513 = t321 * t363;
t512 = t347 * t368;
t511 = t348 * t368;
t510 = t354 * t370;
t505 = t362 * t162;
t504 = t362 * t363;
t501 = t367 * t162;
t275 = t299 * t363;
t276 = t406 * t363;
t408 = -t366 * t275 + t276 * t361;
t498 = qJD(6) * t408 - t570 * t361 - t569 * t366;
t197 = -t275 * t361 - t276 * t366;
t497 = qJD(6) * t197 - t569 * t361 + t570 * t366;
t407 = -t299 * t361 - t366 * t406;
t496 = qJD(6) * t407 - t572 * t361 - t571 * t366;
t216 = t299 * t366 - t361 * t406;
t495 = qJD(6) * t216 - t571 * t361 + t572 * t366;
t260 = t363 * t277;
t435 = -t278 * t368 + t260;
t182 = -pkin(3) * t457 + t435;
t494 = t570 * pkin(5) - t182 + t557;
t301 = t367 * t317;
t217 = -qJ(5) * t503 + t301 + (-pkin(4) - t544) * t368;
t485 = t362 * t317 + t345;
t235 = -qJ(5) * t504 + t485;
t150 = t357 * t217 + t359 * t235;
t322 = t360 * t362;
t323 = t360 * t367;
t238 = t357 * t322 - t359 * t323;
t484 = pkin(4) * t504 + t363 * pkin(9);
t355 = t364 ^ 2;
t483 = -t369 ^ 2 + t355;
t476 = qJD(4) * t250;
t465 = t369 * t510;
t350 = pkin(4) * t367 + pkin(3);
t460 = pkin(4) * t362 + pkin(9);
t459 = -t361 * t5 + t366 * t4;
t12 = t359 * t33 - t357 * t37;
t40 = -t357 * t69 - t529;
t47 = -t357 * t97 + t359 * t86;
t149 = t359 * t217 - t235 * t357;
t436 = -t363 * t271 + t272 * t368;
t237 = t359 * t322 + t323 * t357;
t432 = -t363 * t192 + t368 * t198 - t240 * t477 - t249 * t478;
t122 = -pkin(5) * t368 + pkin(11) * t276 + t149;
t423 = t570 * pkin(11) - qJD(6) * t122 - t533;
t126 = -pkin(11) * t275 + t150;
t422 = qJD(6) * t126 - t534 - t569 * pkin(11) + (t428 - t478) * pkin(5);
t420 = t358 * t370 * t524;
t227 = t291 * t363 + t368 * t458;
t231 = t293 * t363 - t365 * t507;
t417 = -g(1) * t227 + g(2) * t231;
t206 = -pkin(11) * t406 + t238;
t415 = pkin(5) * t259 - t571 * pkin(11) + qJD(6) * t206 - t527;
t205 = -pkin(11) * t299 + t237;
t414 = t572 * pkin(11) - qJD(6) * t205 - t526;
t180 = pkin(3) * t506 - t436;
t10 = t361 * t22 + t366 * t26;
t153 = -t225 * t357 + t226 * t359;
t38 = pkin(5) * t288 - pkin(11) * t153 + t47;
t152 = -t225 * t359 - t226 * t357;
t42 = pkin(11) * t152 + t48;
t412 = -t361 * t42 + t366 * t38;
t411 = t361 * t38 + t366 * t42;
t410 = t366 * t152 - t153 * t361;
t103 = t152 * t361 + t153 * t366;
t404 = 0.2e1 * t439 + qJD(2);
t401 = -t271 * t477 - t272 * t478 + t279 * t368 - t363 * t281;
t349 = pkin(4) * t359 + pkin(5);
t400 = t349 * t361 + t366 * t546;
t399 = t349 * t366 - t361 * t546;
t73 = -t432 - t549;
t393 = -pkin(10) * t162 + t146 * t250;
t389 = t358 * (t433 + t339);
t388 = g(1) * t231 + g(2) * t227 + g(3) * t288;
t387 = -g(1) * t232 - g(2) * t228 - g(3) * t289;
t386 = pkin(4) * t225 + t180;
t380 = -t193 - t383;
t379 = -pkin(9) * t274 - t239 * t321;
t49 = t73 + t554;
t121 = -pkin(3) * t454 - t401;
t2 = -qJD(6) * t10 + t459;
t375 = t388 + t432;
t373 = pkin(10) * t476 - t388 + t73;
t372 = pkin(9) * t476 + t383;
t371 = pkin(4) * t142 + t121;
t266 = pkin(5) * t406 - t350;
t218 = pkin(5) * t275 + t484;
t185 = t232 * t367 + t292 * t362;
t156 = qJDD(6) + t162;
t110 = pkin(4) * t210 - pkin(5) * t127;
t93 = -pkin(5) * t152 + t386;
t92 = -t142 * t357 + t143 * t359;
t90 = -t142 * t359 - t143 * t357;
t45 = -pkin(5) * t90 + t371;
t30 = qJD(6) * t103 + t361 * t92 - t366 * t90;
t29 = qJD(6) * t410 + t361 * t90 + t366 * t92;
t28 = t41 + t574;
t27 = t40 - t562;
t21 = -pkin(5) * t57 + t49;
t11 = pkin(11) * t90 + t13;
t9 = -t26 * t361 + t528;
t8 = pkin(5) * t223 - pkin(11) * t92 + t12;
t1 = t449 + t559;
t3 = [qJDD(1), g(1) * t365 - g(2) * t550, g(1) * t550 + g(2) * t365 (qJDD(1) * t355 + 0.2e1 * t364 * t447) * t354 (t364 * t468 - t470 * t483) * t467, t364 * t389 + t404 * t453, t369 * t389 - t404 * t454, t339 * t524, -t282 * t405 - t340 * t339 + t431 * t524 + g(1) * t291 - g(2) * t293 + (t339 * t440 + (-t448 + t468) * t467) * pkin(1), -t281 * t405 - t486 * t339 - t381 * t524 - g(1) * t290 + g(2) * t292 + (-t447 - t469) * pkin(1) * t467, t171 * t289 + t224 * t259, -t171 * t288 - t172 * t289 - t223 * t259 - t224 * t257, -t224 * t321 + t274 * t289 + (-t171 * t369 + t259 * t480) * t358, t223 * t321 - t274 * t288 + (t172 * t369 - t257 * t480) * t358 (-t274 * t369 - t321 * t480) * t358, -t401 * t321 + t436 * t274 + t282 * t257 + t270 * t172 + t193 * t288 + t239 * t223 + g(1) * t228 - g(2) * t232 + (t169 * t480 - t369 * t432) * t358, t391 * t321 - t490 * t274 + t282 * t259 + t270 * t171 + t193 * t289 + t239 * t224 + (-t170 * t480 + t369 * t392) * t358 + t417, t112 * t226 + t143 * t210, -t112 * t225 - t113 * t226 - t142 * t210 - t143 * t208, t112 * t288 + t143 * t250 + t162 * t226 + t210 * t223, -t113 * t288 - t142 * t250 - t162 * t225 - t208 * t223, t162 * t288 + t223 * t250, g(1) * t563 - g(2) * t185 + t180 * t113 + t121 * t208 + t146 * t142 + t438 * t162 + t95 * t223 + t73 * t225 + t25 * t288 + t374 * t250, -g(1) * t564 - g(2) * t184 + t180 * t112 + t121 * t210 + t146 * t143 - t492 * t162 - t96 * t223 + t73 * t226 - t390 * t250 + t394 * t288, t12 * t127 + t13 * t409 + t152 * t7 - t153 * t6 - t35 * t92 + t36 * t90 - t47 * t58 + t48 * t57 - t417, t7 * t48 + t36 * t13 + t6 * t47 + t35 * t12 + t49 * t386 + t118 * t371 - g(1) * (-t365 * pkin(1) - t291 * pkin(2) + pkin(8) * t458 + t227 * t360 - t228 * t350 - t290 * t460) - g(2) * (pkin(1) * t550 + t293 * pkin(2) + pkin(8) * t508 - t231 * t360 + t232 * t350 + t292 * t460) t103 * t17 + t29 * t567, -t103 * t18 + t17 * t410 + t29 * t77 - t30 * t567, t103 * t156 + t17 * t288 + t223 * t567 + t242 * t29, t156 * t410 - t18 * t288 + t223 * t77 - t242 * t30, t156 * t288 + t223 * t242 (-qJD(6) * t411 - t11 * t361 + t366 * t8) * t242 + t412 * t156 + t2 * t288 + t9 * t223 - t45 * t77 + t93 * t18 - t21 * t410 + t64 * t30 + g(1) * t565 - g(2) * t166 -(qJD(6) * t412 + t11 * t366 + t361 * t8) * t242 - t411 * t156 - t1 * t288 - t10 * t223 + t45 * t567 + t93 * t17 + t21 * t103 + t64 * t29 - g(1) * t566 - g(2) * t165; 0, 0, 0, -t364 * t465, t483 * t510, -t369 * t420 + t446, t364 * t420 + t338, t339, pkin(1) * t364 * t510 + t280 * t405 - t383 + t431, pkin(1) * t465 + t277 * t405 + (pkin(8) * t470 + g(3)) * t509 + t416 + t462, t171 * t363 - t368 * t518 (t171 + t520) * t368 + (-t172 + t518) * t363, -t321 * t477 + t363 * t274 + (-t259 * t364 + t321 * t499) * t482, t321 * t478 + t368 * t274 + (t257 * t364 - t369 * t513) * t482, t321 * t457, -t169 * t457 - pkin(2) * t172 - t280 * t257 - t260 * t321 + t379 * t363 + ((t278 + t532) * t321 + t380) * t368, -pkin(2) * t171 - t489 * t321 + t170 * t457 - t280 * t259 + t379 * t368 + (-t321 * t532 - t380) * t363, t112 * t503 + (-t362 * t474 - t586) * t210, t208 * t247 + t210 * t246 + (-t208 * t367 - t210 * t362) * t477 + (-t523 - t113 * t367 + (t208 * t362 - t210 * t367) * qJD(4)) * t363, -t112 * t368 - t586 * t250 + (-t210 * t321 - t250 * t475 + t501) * t363, t113 * t368 + t576 * t250 + (t208 * t321 - t250 * t473 - t505) * t363, -t162 * t368 - t250 * t513, -t146 * t246 + t301 * t162 - t182 * t208 + t587 * t250 + ((-qJD(4) * t317 + t183) * t250 + t382) * t362 + (t146 * t362 * qJD(3) - t25 + (qJD(3) * t208 - t505) * pkin(9) - t372 * t367) * t368 + (pkin(9) * t113 + t146 * t473 - t321 * t95 + t73 * t362) * t363, -t485 * t162 - t182 * t210 - t146 * t247 + t585 * t250 + t382 * t367 + (-t394 + (pkin(9) * t210 + t146 * t367) * qJD(3) + t372 * t362) * t368 + (-t146 * t475 + t73 * t367 + t321 * t96 + (qJD(3) * t434 + t112) * pkin(9)) * t363, t534 * t127 - t149 * t58 + t150 * t57 - t275 * t7 + t276 * t6 + t569 * t35 - t570 * t36 - t383 * t363 + t533 * t409, t7 * t150 + t6 * t149 + t49 * t484 + t533 * t36 + t534 * t35 - t383 * (t350 * t368 - t360 * t363 + pkin(2)) + (pkin(3) * qJD(1) * t509 - t435 + t557) * t118 + t382 * t460, t17 * t197 + t498 * t567, t17 * t408 - t18 * t197 - t497 * t567 + t498 * t77, t156 * t197 - t17 * t368 + t242 * t498 - t513 * t567, t156 * t408 + t18 * t368 - t242 * t497 - t513 * t77, -t156 * t368 - t242 * t513 (t122 * t366 - t126 * t361) * t156 - t2 * t368 + t9 * t478 + t218 * t18 - t21 * t408 - g(1) * (-t292 * t511 + t293 * t347) - g(2) * (-t290 * t511 + t291 * t347) - t494 * t77 + t497 * t64 + (t361 * t423 - t366 * t422) * t242 + (-t9 * t455 - g(3) * (t347 * t364 + t348 * t499)) * t358 -(t122 * t361 + t126 * t366) * t156 + t1 * t368 - t10 * t478 + t218 * t17 + t21 * t197 - g(1) * (t292 * t512 + t293 * t348) - g(2) * (t290 * t512 + t291 * t348) + t494 * t567 + t498 * t64 + (t361 * t422 + t366 * t423) * t242 + (t10 * t455 - g(3) * (-t347 * t499 + t348 * t364)) * t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t259 * t257, -t257 ^ 2 + t259 ^ 2, t171 - t520, -t172 - t518, t274, -t170 * t321 - t239 * t259 + t375, -t169 * t321 + t239 * t257 - t387 - t392, t210 * t434 + t523 (t112 - t522) * t367 + (-t113 - t521) * t362, -t210 * t259 + t250 * t434 + t505, -t250 ^ 2 * t362 + t208 * t259 + t501, -t250 * t259, -pkin(3) * t113 - t170 * t208 - t189 * t250 - t95 * t259 + (t169 * t250 + t393) * t362 - t373 * t367, -pkin(3) * t112 - t170 * t210 + t250 * t493 + t96 * t259 + t362 * t373 + t367 * t393, t527 * t127 - t237 * t58 + t238 * t57 - t299 * t6 + t571 * t35 - t572 * t36 - t406 * t7 + t526 * t409 + t387, t7 * t238 + t6 * t237 - t49 * t350 - g(1) * (-t231 * t350 - t232 * t360) - g(2) * (-t227 * t350 - t228 * t360) - g(3) * (-t288 * t350 - t289 * t360) + t526 * t36 + t527 * t35 + t556 * t118, t17 * t216 + t496 * t567, t17 * t407 - t18 * t216 - t495 * t567 + t496 * t77, t156 * t216 + t242 * t496 - t259 * t567, t156 * t407 - t242 * t495 - t259 * t77, -t242 * t259 (t205 * t366 - t206 * t361) * t156 + t266 * t18 - t21 * t407 - t9 * t259 - t525 * t77 + t495 * t64 + (t361 * t414 - t366 * t415) * t242 + t388 * t348 -(t205 * t361 + t206 * t366) * t156 + t266 * t17 + t21 * t216 + t10 * t259 + t525 * t567 + t496 * t64 + (t361 * t415 + t366 * t414) * t242 - t388 * t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t210 * t208, -t208 ^ 2 + t210 ^ 2, t112 + t522, -t113 + t521, t162, -t146 * t210 + t96 * t250 + t25 + t553, g(1) * t185 + g(2) * t563 + g(3) * t226 + t146 * t208 + t95 * t250 + t394 (t357 * t57 - t359 * t58) * pkin(4) + (-t41 + t35) * t409 + (-t36 - t40) * t127, -t35 * t40 - t36 * t41 + (-t118 * t210 + t7 * t357 + t6 * t359 + t553) * pkin(4), -t588, t584, t589, t581, t156, t399 * t156 - (t27 * t366 - t28 * t361) * t242 + t110 * t77 + (-t242 * t400 - t10) * qJD(6) + t459 + t575, -t400 * t156 - t366 * t5 + (t27 * t361 + t28 * t366) * t242 - t110 * t567 + (-t242 * t399 - t528) * qJD(6) + t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127 ^ 2 - t409 ^ 2, -t127 * t35 - t36 * t409 - t375 - t549 + t554, 0, 0, 0, 0, 0, t18 + t531, t17 + t530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t588, t584, t589, t581, t156, t10 * t242 + t2 + t575, t242 * t9 - t559 + t583;];
tau_reg  = t3;
