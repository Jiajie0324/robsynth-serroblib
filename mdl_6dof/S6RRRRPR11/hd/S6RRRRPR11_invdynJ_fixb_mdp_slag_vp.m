% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6,theta5]';
% MDP [33x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(33,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR11_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR11_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRPR11_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [33 1]), ...
  'S6RRRRPR11_invdynJ_fixb_mdp_slag_vp: MDP has to be [33x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 23:24:18
% EndTime: 2019-03-09 23:24:56
% DurationCPUTime: 28.72s
% Computational Cost: add. (20574->838), mult. (49706->1137), div. (0->0), fcn. (40580->16), ass. (0->349)
t960 = cos(qJ(2));
t1072 = qJD(1) * t960;
t949 = sin(pkin(6));
t1047 = t949 * t1072;
t912 = -qJD(3) + t1047;
t1127 = cos(pkin(6));
t1033 = t1127 * qJD(1);
t1018 = pkin(1) * t1033;
t955 = sin(qJ(2));
t871 = pkin(8) * t1047 + t955 * t1018;
t954 = sin(qJ(3));
t959 = cos(qJ(3));
t1175 = t871 + t912 * (pkin(3) * t954 - pkin(10) * t959);
t1073 = qJD(1) * t949;
t1048 = t955 * t1073;
t996 = t1033 + qJD(2);
t850 = t1048 * t959 + t954 * t996;
t953 = sin(qJ(4));
t958 = cos(qJ(4));
t799 = t850 * t953 + t958 * t912;
t801 = t850 * t958 - t912 * t953;
t948 = sin(pkin(12));
t950 = cos(pkin(12));
t1000 = -t799 * t950 - t801 * t948;
t957 = cos(qJ(6));
t1098 = t957 * t1000;
t717 = t799 * t948 - t801 * t950;
t952 = sin(qJ(6));
t1123 = t717 * t952;
t667 = t1098 + t1123;
t1020 = t954 * t1048;
t848 = -t959 * t996 + t1020;
t841 = qJD(4) + t848;
t833 = qJD(6) + t841;
t1125 = t667 * t833;
t1062 = qJD(6) * t952;
t1061 = qJD(1) * qJD(2);
t1040 = t955 * t1061;
t1017 = t949 * t1040;
t1059 = qJDD(1) * t960;
t929 = t949 * t1059;
t865 = qJDD(3) - t929 + t1017;
t1068 = qJD(3) * t959;
t1069 = qJD(3) * t954;
t1024 = t1127 * qJDD(1);
t930 = t1024 + qJDD(2);
t1015 = pkin(1) * t1024;
t993 = qJD(2) * t1018;
t1052 = -pkin(8) * t929 - t955 * t1015 - t960 * t993;
t972 = -pkin(8) * t1017 - t1052;
t783 = pkin(9) * t930 + t972;
t1012 = pkin(2) * t955 - pkin(9) * t960;
t988 = t1012 * qJD(2);
t994 = -pkin(2) * t960 - pkin(9) * t955 - pkin(1);
t789 = (qJD(1) * t988 + qJDD(1) * t994) * t949;
t831 = pkin(9) * t996 + t871;
t863 = t994 * t949;
t840 = qJD(1) * t863;
t984 = t840 * t1068 - t1069 * t831 + t959 * t783 + t954 * t789;
t662 = pkin(10) * t865 + t984;
t1060 = qJDD(1) * t955;
t1038 = t949 * t1060;
t1039 = t960 * t1061;
t1157 = -t949 * t1039 - t1038;
t976 = qJD(3) * t996;
t762 = -qJD(3) * t1020 + t954 * t930 + (t976 - t1157) * t959;
t1070 = qJD(2) * t960;
t1043 = t954 * t1070;
t763 = (qJD(1) * (t1068 * t955 + t1043) + t954 * t1060) * t949 - t959 * t930 + t954 * t976;
t1022 = pkin(8) * t1157 + t960 * t1015 - t955 * t993;
t784 = -pkin(2) * t930 - t1022;
t673 = pkin(3) * t763 - pkin(10) * t762 + t784;
t868 = -pkin(8) * t1048 + t1018 * t960;
t830 = -pkin(2) * t996 - t868;
t734 = t848 * pkin(3) - t850 * pkin(10) + t830;
t761 = t959 * t831 + t954 * t840;
t737 = -pkin(10) * t912 + t761;
t686 = t734 * t953 + t737 * t958;
t615 = -qJD(4) * t686 - t953 * t662 + t958 * t673;
t1064 = qJD(4) * t958;
t1066 = qJD(4) * t953;
t702 = -t912 * t1064 - t1066 * t850 + t958 * t762 + t953 * t865;
t753 = qJDD(4) + t763;
t606 = pkin(4) * t753 - qJ(5) * t702 - qJD(5) * t801 + t615;
t703 = qJD(4) * t801 + t762 * t953 - t958 * t865;
t982 = -t734 * t1064 + t1066 * t737 - t958 * t662 - t953 * t673;
t610 = -qJ(5) * t703 - qJD(5) * t799 - t982;
t596 = t950 * t606 - t610 * t948;
t648 = t702 * t950 - t703 * t948;
t594 = pkin(5) * t753 - pkin(11) * t648 + t596;
t1151 = pkin(11) * t1000;
t660 = -qJ(5) * t799 + t686;
t1103 = t950 * t660;
t685 = t958 * t734 - t737 * t953;
t659 = -qJ(5) * t801 + t685;
t651 = pkin(4) * t841 + t659;
t626 = t948 * t651 + t1103;
t616 = t626 + t1151;
t1031 = -t616 * t1062 + t952 * t594;
t1104 = t949 * t960;
t1141 = cos(qJ(1));
t1049 = t949 * t1141;
t1014 = t1127 * t1141;
t956 = sin(qJ(1));
t882 = t1014 * t955 + t956 * t960;
t819 = -t954 * t1049 + t882 * t959;
t881 = -t1014 * t960 + t955 * t956;
t943 = qJ(4) + pkin(12) + qJ(6);
t938 = sin(t943);
t939 = cos(t943);
t1153 = t819 * t939 + t881 * t938;
t597 = t948 * t606 + t950 * t610;
t647 = -t702 * t948 - t703 * t950;
t595 = pkin(11) * t647 + t597;
t760 = -t954 * t831 + t840 * t959;
t736 = pkin(3) * t912 - t760;
t708 = pkin(4) * t799 + qJD(5) + t736;
t654 = -pkin(5) * t1000 + t708;
t1106 = t949 * t956;
t1035 = t955 * t1127;
t884 = -t1035 * t956 + t1141 * t960;
t823 = t1106 * t954 + t884 * t959;
t1034 = t960 * t1127;
t883 = t1034 * t956 + t1141 * t955;
t757 = t823 * t939 + t883 * t938;
t1105 = t949 * t959;
t880 = t1105 * t955 + t1127 * t954;
t1174 = -t654 * t667 + g(1) * t757 + g(2) * t1153 - g(3) * (t1104 * t938 - t880 * t939) - t957 * t595 - t1031;
t1152 = t1000 * t952 - t957 * t717;
t747 = qJDD(6) + t753;
t1173 = t747 * MDP(31) + (t1152 ^ 2 - t667 ^ 2) * MDP(28) - t667 * MDP(27) * t1152;
t1135 = pkin(9) * t953;
t1172 = t1069 * t1135 - t1175 * t958;
t837 = t1047 * t953 * t959 - t1048 * t958;
t1165 = -t953 * t1068 + t837;
t1096 = t959 * t960;
t838 = (t1096 * t958 + t953 * t955) * t1073;
t1008 = t958 * t1068 - t838;
t869 = t1012 * t1073;
t1081 = t959 * t868 + t954 * t869;
t774 = pkin(10) * t1048 + t1081;
t908 = -pkin(3) * t959 - pkin(10) * t954 - pkin(2);
t1171 = -t908 * t1064 + t1175 * t953 + t958 * t774;
t951 = -qJ(5) - pkin(10);
t1036 = qJD(4) * t951;
t785 = pkin(3) * t850 + pkin(10) * t848;
t780 = t958 * t785;
t1169 = -pkin(4) * t850 - t780 + (-qJ(5) * t848 + t1036) * t958 + (-qJD(5) + t760) * t953;
t1063 = qJD(5) * t958;
t1088 = t958 * t760 + t953 * t785;
t1118 = t848 * t953;
t1168 = qJ(5) * t1118 - t1036 * t953 - t1063 + t1088;
t1046 = t954 * t1072;
t1019 = t949 * t1046;
t1097 = t958 * t959;
t1136 = pkin(4) * t954;
t936 = pkin(9) * t1097;
t1167 = -pkin(4) * t1019 + qJ(5) * t838 + t774 * t953 - t954 * t1063 + (-qJ(5) * t1097 + t1136) * qJD(3) + (-t936 + (qJ(5) * t954 - t908) * t953) * qJD(4) + t1172;
t1100 = t954 * t958;
t1128 = pkin(9) * qJD(3);
t1166 = -qJ(5) * t837 - (-qJ(5) * qJD(4) - t1128) * t1100 - (-qJD(5) * t954 + (-pkin(9) * qJD(4) - qJ(5) * qJD(3)) * t959) * t953 + t1171;
t1126 = t1152 * t833;
t1009 = g(1) * t884 + g(2) * t882;
t1107 = t949 * t955;
t973 = -g(3) * t1107 - t1009;
t1032 = t957 * t594 - t952 * t595;
t1154 = t819 * t938 - t881 * t939;
t756 = -t823 * t938 + t883 * t939;
t1164 = -t654 * t1152 - g(1) * t756 + g(2) * t1154 - g(3) * (-t1104 * t939 - t880 * t938) + t1032;
t1163 = pkin(11) * t717;
t890 = t948 * t958 + t950 * t953;
t1161 = t841 * t890;
t997 = t948 * t953 - t950 * t958;
t1160 = t841 * t997;
t1065 = qJD(4) * t954;
t1159 = -t1065 * t997 + t1068 * t890 - t837 * t950 - t838 * t948;
t1158 = -t1008 * t950 + t1065 * t890 - t1165 * t948;
t974 = -g(1) * t883 - g(2) * t881 + g(3) * t1104;
t1156 = t819 * t953 - t881 * t958;
t1155 = t819 * t958 + t881 * t953;
t1095 = t1166 * t948 + t1167 * t950;
t1094 = -t1166 * t950 + t1167 * t948;
t931 = pkin(8) * t1107;
t1148 = pkin(1) * t1034 - t931;
t861 = -pkin(2) * t1127 - t1148;
t879 = t1107 * t954 - t1127 * t959;
t770 = t879 * pkin(3) - t880 * pkin(10) + t861;
t1078 = pkin(1) * t1035 + pkin(8) * t1104;
t862 = pkin(9) * t1127 + t1078;
t1082 = t959 * t862 + t954 * t863;
t772 = -pkin(10) * t1104 + t1082;
t1087 = t953 * t770 + t958 * t772;
t1085 = t1168 * t948 + t1169 * t950;
t1084 = -t1168 * t950 + t1169 * t948;
t1147 = -t1165 * pkin(4) + pkin(9) * t1068 + t1064 * t1136;
t1146 = -t761 + (t1066 + t1118) * pkin(4);
t1144 = pkin(4) * t703 + qJDD(5);
t775 = -t823 * t953 + t883 * t958;
t816 = t1104 * t958 + t880 * t953;
t1143 = -g(1) * t775 + g(2) * t1156 + g(3) * t816;
t1030 = -t957 * t647 + t648 * t952;
t608 = qJD(6) * t1152 + t1030;
t961 = qJD(1) ^ 2;
t1140 = pkin(3) * t865;
t1137 = pkin(4) * t948;
t1124 = t702 * t953;
t1122 = t753 * t958;
t1121 = t799 * t841;
t1120 = t801 * t841;
t1025 = t841 * t958;
t1119 = t848 * t912;
t1117 = t850 * t912;
t1112 = t912 * t954;
t1111 = t930 * MDP(8);
t1110 = t938 * t959;
t1109 = t939 * t959;
t945 = t949 ^ 2;
t1108 = t945 * t961;
t655 = t948 * t660;
t1102 = t953 * t753;
t1101 = t953 * t954;
t625 = t950 * t651 - t655;
t612 = pkin(5) * t841 + t1163 + t625;
t1099 = t957 * t612;
t1071 = qJD(2) * t955;
t1045 = t949 * t1071;
t1044 = t949 * t1070;
t815 = -qJD(3) * t879 + t1044 * t959;
t733 = -qJD(4) * t816 + t1045 * t953 + t815 * t958;
t814 = qJD(3) * t880 + t1043 * t949;
t1055 = t953 * t1104;
t817 = t880 * t958 - t1055;
t870 = t949 * t988;
t872 = t1148 * qJD(2);
t983 = t863 * t1068 - t1069 * t862 + t954 * t870 + t959 * t872;
t710 = pkin(10) * t1045 + t983;
t873 = t1078 * qJD(2);
t725 = t814 * pkin(3) - t815 * pkin(10) + t873;
t966 = -qJD(4) * t1087 - t710 * t953 + t958 * t725;
t623 = pkin(4) * t814 - qJ(5) * t733 - qJD(5) * t817 + t966;
t732 = -qJD(4) * t1055 - t1045 * t958 + t1064 * t880 + t815 * t953;
t981 = t770 * t1064 - t1066 * t772 + t958 * t710 + t953 * t725;
t627 = -qJ(5) * t732 - qJD(5) * t816 + t981;
t603 = t948 * t623 + t950 * t627;
t631 = t950 * t659 - t655;
t1029 = t958 * t770 - t772 * t953;
t676 = pkin(4) * t879 - qJ(5) * t817 + t1029;
t687 = -qJ(5) * t816 + t1087;
t638 = t948 * t676 + t950 * t687;
t866 = t890 * t954;
t867 = t997 * t954;
t999 = -t957 * t866 + t867 * t952;
t1093 = qJD(6) * t999 - t1158 * t957 - t1159 * t952;
t788 = -t866 * t952 - t867 * t957;
t1092 = qJD(6) * t788 - t1158 * t952 + t1159 * t957;
t998 = -t890 * t952 - t957 * t997;
t1091 = qJD(6) * t998 - t1160 * t957 - t1161 * t952;
t807 = t890 * t957 - t952 * t997;
t1090 = qJD(6) * t807 - t1160 * t952 + t1161 * t957;
t851 = t954 * t868;
t1026 = -t869 * t959 + t851;
t773 = -pkin(3) * t1048 + t1026;
t1089 = pkin(5) * t1159 + t1147 - t773;
t892 = t958 * t908;
t808 = -qJ(5) * t1100 + t892 + (-pkin(4) - t1135) * t959;
t1077 = t953 * t908 + t936;
t826 = -qJ(5) * t1101 + t1077;
t740 = t948 * t808 + t950 * t826;
t1083 = pkin(5) * t1161 + t1146;
t913 = t951 * t953;
t914 = t951 * t958;
t829 = t948 * t913 - t950 * t914;
t1076 = pkin(4) * t1101 + t954 * pkin(9);
t946 = t955 ^ 2;
t1075 = -t960 ^ 2 + t946;
t1067 = qJD(4) * t841;
t1058 = 0.2e1 * t945;
t1056 = t960 * t1108;
t1054 = qJD(6) * t1098 + t952 * t647 + t957 * t648;
t941 = pkin(4) * t958 + pkin(3);
t1050 = pkin(4) * t953 + pkin(9);
t602 = t950 * t623 - t627 * t948;
t630 = -t659 * t948 - t1103;
t637 = t950 * t676 - t687 * t948;
t739 = t950 * t808 - t826 * t948;
t1027 = -t954 * t862 + t863 * t959;
t828 = t950 * t913 + t914 * t948;
t1023 = t831 * t1068 + t840 * t1069 + t954 * t783 - t959 * t789;
t1013 = t949 * t961 * t1127;
t818 = t1049 * t959 + t882 * t954;
t822 = -t1105 * t956 + t884 * t954;
t1010 = -g(1) * t818 + g(2) * t822;
t771 = pkin(3) * t1104 - t1027;
t797 = -pkin(11) * t997 + t829;
t1007 = pkin(5) * t850 - pkin(11) * t1160 + qJD(6) * t797 - t1085;
t796 = -pkin(11) * t890 + t828;
t1006 = pkin(11) * t1161 - qJD(6) * t796 - t1084;
t716 = -pkin(11) * t866 + t740;
t1005 = qJD(6) * t716 - t1095 - t1158 * pkin(11) + (t1019 - t1069) * pkin(5);
t712 = -pkin(5) * t959 + pkin(11) * t867 + t739;
t1004 = pkin(11) * t1159 - qJD(6) * t712 - t1094;
t600 = t952 * t612 + t957 * t616;
t743 = -t816 * t948 + t817 * t950;
t628 = pkin(5) * t879 - pkin(11) * t743 + t637;
t742 = -t816 * t950 - t817 * t948;
t632 = pkin(11) * t742 + t638;
t1003 = t628 * t957 - t632 * t952;
t1002 = t628 * t952 + t632 * t957;
t1001 = t957 * t742 - t743 * t952;
t693 = t742 * t952 + t743 * t957;
t995 = 0.2e1 * t1033 + qJD(2);
t992 = -t862 * t1068 - t863 * t1069 + t870 * t959 - t954 * t872;
t940 = pkin(4) * t950 + pkin(5);
t991 = t1137 * t957 + t940 * t952;
t990 = -t1137 * t952 + t940 * t957;
t663 = t1023 - t1140;
t985 = -pkin(10) * t753 + t736 * t841;
t607 = t1062 * t717 + t1054;
t980 = t949 * (t1024 + t930);
t979 = g(1) * t822 + g(2) * t818 + g(3) * t879;
t978 = -g(1) * t823 - g(2) * t819 - g(3) * t880;
t977 = pkin(4) * t816 + t771;
t971 = -t784 - t974;
t970 = -pkin(9) * t865 - t830 * t912;
t639 = t663 + t1144;
t711 = -pkin(3) * t1045 - t992;
t967 = t979 - t1023;
t965 = pkin(9) * t1067 + t974;
t964 = pkin(10) * t1067 + t663 - t979;
t963 = pkin(4) * t732 + t711;
t857 = pkin(5) * t997 - t941;
t809 = pkin(5) * t866 + t1076;
t776 = t823 * t958 + t883 * t953;
t700 = pkin(4) * t801 - pkin(5) * t717;
t683 = -pkin(5) * t742 + t977;
t682 = -t732 * t948 + t733 * t950;
t680 = -t732 * t950 - t733 * t948;
t635 = -pkin(5) * t680 + t963;
t620 = qJD(6) * t693 - t957 * t680 + t682 * t952;
t619 = qJD(6) * t1001 + t680 * t952 + t682 * t957;
t618 = t631 + t1163;
t617 = t630 - t1151;
t611 = -pkin(5) * t647 + t639;
t601 = pkin(11) * t680 + t603;
t599 = -t616 * t952 + t1099;
t598 = pkin(5) * t814 - pkin(11) * t682 + t602;
t592 = -qJD(6) * t600 + t1032;
t591 = (qJD(6) * t612 + t595) * t957 + t1031;
t1 = [(0.2e1 * (t1059 * t955 - t1061 * t1075) * MDP(5) + (qJDD(1) * t946 + 0.2e1 * t1039 * t955) * MDP(4)) * t945 + (-t992 * t912 + t1027 * t865 + t873 * t848 + t861 * t763 + t784 * t879 + t830 * t814 + g(1) * t819 - g(2) * t823 + (t1023 * t960 + t1071 * t760) * t949) * MDP(16) + (t597 * t638 + t626 * t603 + t596 * t637 + t625 * t602 + t639 * t977 + t708 * t963 - g(1) * (-t956 * pkin(1) - t882 * pkin(2) + pkin(8) * t1049 - t1050 * t881 + t818 * t951 - t819 * t941) - g(2) * (pkin(1) * t1141 + t884 * pkin(2) + pkin(8) * t1106 + t1050 * t883 - t822 * t951 + t823 * t941)) * MDP(26) + (t1152 * t814 + t607 * t879 + t619 * t833 + t693 * t747) * MDP(29) + (t1152 * t619 + t607 * t693) * MDP(27) + (-(qJD(6) * t1003 + t598 * t952 + t601 * t957) * t833 - t1002 * t747 - t591 * t879 - t600 * t814 + t635 * t1152 + t683 * t607 + t611 * t693 + t654 * t619 - g(1) * t1154 - g(2) * t756) * MDP(33) + (-t1071 * t912 - t865 * t960) * t949 * MDP(15) + (t1000 * t603 - t596 * t743 + t597 * t742 + t602 * t717 - t625 * t682 + t626 * t680 - t637 * t648 + t638 * t647 - t1010) * MDP(25) + (t1001 * t607 - t1152 * t620 - t608 * t693 + t619 * t667) * MDP(28) + (t1001 * t747 - t608 * t879 - t620 * t833 + t667 * t814) * MDP(30) + ((-qJD(6) * t1002 + t598 * t957 - t601 * t952) * t833 + t1003 * t747 + t592 * t879 + t599 * t814 - t635 * t667 + t683 * t608 - t611 * t1001 + t654 * t620 + g(1) * t1153 - g(2) * t757) * MDP(32) + qJDD(1) * MDP(1) + (-t762 * t879 - t763 * t880 - t814 * t850 - t815 * t848) * MDP(12) + (t762 * t880 + t815 * t850) * MDP(11) + (-t703 * t879 - t732 * t841 - t753 * t816 - t799 * t814) * MDP(21) + (t702 * t879 + t733 * t841 + t753 * t817 + t801 * t814) * MDP(20) + (t753 * t879 + t814 * t841) * MDP(22) + (t747 * t879 + t814 * t833) * MDP(31) + (g(1) * t956 - g(2) * t1141) * MDP(2) + (g(1) * t1141 + g(2) * t956) * MDP(3) + t1127 * t1111 + (-t872 * t996 - t1078 * t930 - t972 * t1127 - g(1) * t881 + g(2) * t883 + (-t1039 - t1060) * pkin(1) * t1058) * MDP(10) + (-t873 * t996 - t931 * t930 + t1022 * t1127 + g(1) * t882 - g(2) * t884 + (t930 * t1034 + (-t1040 + t1059) * t1058) * pkin(1)) * MDP(9) + (-t702 * t816 - t703 * t817 - t732 * t801 - t733 * t799) * MDP(19) + (t702 * t817 + t733 * t801) * MDP(18) + (t983 * t912 - t1082 * t865 + t873 * t850 + t861 * t762 + t784 * t880 + t830 * t815 + (-t1071 * t761 + t960 * t984) * t949 + t1010) * MDP(17) + (t814 * t912 - t865 * t879 + (-t1071 * t848 + t763 * t960) * t949) * MDP(14) + (-t815 * t912 + t865 * t880 + (t1071 * t850 - t762 * t960) * t949) * MDP(13) + (g(1) * t1155 - g(2) * t776 + t1029 * t753 + t615 * t879 + t663 * t816 + t685 * t814 + t771 * t703 + t711 * t799 + t736 * t732 + t966 * t841) * MDP(23) + (-g(1) * t1156 - g(2) * t775 - t1087 * t753 + t663 * t817 - t686 * t814 + t771 * t702 + t711 * t801 + t736 * t733 - t981 * t841 + t982 * t879) * MDP(24) + (t1044 * t995 + t955 * t980) * MDP(6) + (-t1045 * t995 + t960 * t980) * MDP(7); (-t1112 * t841 - t753 * t959) * MDP(22) + (-t1112 * t833 - t747 * t959) * MDP(31) + (t1093 * t833 - t1112 * t1152 - t607 * t959 + t747 * t788) * MDP(29) + (-(t712 * t952 + t716 * t957) * t747 + t591 * t959 - t600 * t1069 + t809 * t607 + t611 * t788 - g(1) * (t1110 * t883 + t884 * t939) - g(2) * (t1110 * t881 + t882 * t939) + (t1004 * t957 + t1005 * t952) * t833 + t1089 * t1152 + t1093 * t654 + (t600 * t1046 - g(3) * (-t1096 * t938 + t939 * t955)) * t949) * MDP(33) + (t1093 * t1152 + t607 * t788) * MDP(27) + (t703 * t959 + t1165 * t841 + (-t1064 * t841 + t799 * t912 - t1102) * t954) * MDP(21) + t912 * MDP(15) * t1048 + t1111 + (-t736 * t837 + t892 * t753 - t773 * t799 + t1172 * t841 + ((-qJD(4) * t908 + t774) * t841 + t973) * t953 + (t736 * t953 * qJD(3) - t615 + (qJD(3) * t799 - t1102) * pkin(9) - t965 * t958) * t959 + (pkin(9) * t703 + t1064 * t736 + t663 * t953 - t685 * t912) * t954) * MDP(23) + (-t1077 * t753 - t773 * t801 - t736 * t838 + t1171 * t841 + t973 * t958 + (-t982 + (pkin(9) * t801 + t736 * t958) * qJD(3) + t965 * t953) * t959 + (-t736 * t1066 + t663 * t958 + t912 * t686 + (qJD(3) * t1025 + t702) * pkin(9)) * t954) * MDP(24) + (t597 * t740 + t596 * t739 + t639 * t1076 + t1094 * t626 + t1095 * t625 - t974 * (t941 * t959 - t951 * t954 + pkin(2)) + (pkin(3) * qJD(1) * t1107 - t1026 + t1147) * t708 + t973 * t1050) * MDP(26) - t955 * MDP(4) * t1056 + (t1013 * t955 + t929) * MDP(7) + ((t712 * t957 - t716 * t952) * t747 - t592 * t959 + t599 * t1069 + t809 * t608 - t611 * t999 - g(1) * (-t1109 * t883 + t884 * t938) - g(2) * (-t1109 * t881 + t882 * t938) + (t1004 * t952 - t1005 * t957) * t833 - t1089 * t667 + t1092 * t654 + (-t599 * t1046 - g(3) * (t1096 * t939 + t938 * t955)) * t949) * MDP(32) + (-t1092 * t1152 + t1093 * t667 + t607 * t999 - t608 * t788) * MDP(28) + (-t1092 * t833 - t1112 * t667 + t608 * t959 + t747 * t999) * MDP(30) + (-pkin(2) * t762 - t1081 * t912 + t761 * t1048 - t871 * t850 + t970 * t959 + (-t1128 * t912 - t971) * t954) * MDP(17) + (-t760 * t1048 - pkin(2) * t763 - t871 * t848 - t851 * t912 + t970 * t954 + ((t869 + t1128) * t912 + t971) * t959) * MDP(16) + (t799 * t838 + t801 * t837 + (-t799 * t958 - t801 * t953) * t1068 + (-t1124 - t703 * t958 + (t799 * t953 - t801 * t958) * qJD(4)) * t954) * MDP(19) + (-t702 * t959 + t1008 * t841 + (-t1066 * t841 - t801 * t912 + t1122) * t954) * MDP(20) + (-t1117 * t959 + t762 * t954) * MDP(11) + ((t762 + t1119) * t959 + (-t763 + t1117) * t954) * MDP(12) + (t912 * t1069 + t959 * t865 + (-t1112 * t960 + t848 * t955) * t1073) * MDP(14) + (pkin(1) * t1108 * t955 + t871 * t996 + t1022 - t974) * MDP(9) + (pkin(1) * t1056 + t868 * t996 + (pkin(8) * t1061 + g(3)) * t1107 + t1009 + t1052) * MDP(10) + (t702 * t1100 + (-t1065 * t953 + t1008) * t801) * MDP(18) + (-t912 * t1068 + t865 * t954 + (t1096 * t912 - t850 * t955) * t1073) * MDP(13) + (t1094 * t1000 + t1095 * t717 + t1158 * t625 - t1159 * t626 + t596 * t867 - t597 * t866 + t647 * t740 - t648 * t739 - t974 * t954) * MDP(25) + t1075 * MDP(5) * t1108 + (-t1013 * t960 + t1038) * MDP(6); -t848 ^ 2 * MDP(12) + (t762 - t1119) * MDP(13) + (-t1117 - t763) * MDP(14) + t865 * MDP(15) + (-t761 * t912 + t967) * MDP(16) + (-t760 * t912 + t830 * t848 - t978 - t984) * MDP(17) + (t1025 * t801 + t1124) * MDP(18) + ((t702 - t1121) * t958 + (-t703 - t1120) * t953) * MDP(19) + (t1025 * t841 + t1102) * MDP(20) + (-t841 ^ 2 * t953 + t1122) * MDP(21) + (-pkin(3) * t703 - t761 * t799 - t780 * t841 + (t760 * t841 + t985) * t953 - t964 * t958) * MDP(23) + (-pkin(3) * t702 + t1088 * t841 - t761 * t801 + t953 * t964 + t958 * t985) * MDP(24) + (t1084 * t1000 + t1085 * t717 + t1160 * t625 - t1161 * t626 - t596 * t890 - t597 * t997 + t647 * t829 - t648 * t828 + t978) * MDP(25) + (t597 * t829 + t596 * t828 - t639 * t941 - g(1) * (-t822 * t941 - t823 * t951) - g(2) * (-t818 * t941 - t819 * t951) - g(3) * (-t879 * t941 - t880 * t951) + t1146 * t708 + t1084 * t626 + t1085 * t625) * MDP(26) + (t1091 * t1152 + t607 * t807) * MDP(27) + (-t1090 * t1152 + t1091 * t667 + t607 * t998 - t608 * t807) * MDP(28) + (t1091 * t833 + t747 * t807) * MDP(29) + (-t1090 * t833 + t747 * t998) * MDP(30) + ((t796 * t957 - t797 * t952) * t747 + t857 * t608 - t611 * t998 + (t1006 * t952 - t1007 * t957) * t833 - t1083 * t667 + t1090 * t654 + t979 * t939) * MDP(32) + (-(t796 * t952 + t797 * t957) * t747 + t857 * t607 + t611 * t807 + (t1006 * t957 + t1007 * t952) * t833 + t1083 * t1152 + t1091 * t654 - t979 * t938) * MDP(33) + (MDP(11) * t848 + MDP(12) * t850 - MDP(16) * t830 - MDP(20) * t801 + MDP(21) * t799 - MDP(22) * t841 - MDP(23) * t685 + MDP(24) * t686 - MDP(29) * t1152 - MDP(30) * t667 - MDP(31) * t833 - MDP(32) * t599 + MDP(33) * t600) * t850; t801 * t799 * MDP(18) + (-t799 ^ 2 + t801 ^ 2) * MDP(19) + (t702 + t1121) * MDP(20) + (t1120 - t703) * MDP(21) + t753 * MDP(22) + (t686 * t841 - t736 * t801 + t1143 + t615) * MDP(23) + (g(1) * t776 + g(2) * t1155 + g(3) * t817 + t685 * t841 + t736 * t799 + t982) * MDP(24) + ((t647 * t948 - t648 * t950) * pkin(4) + (t625 - t631) * t1000 + (-t626 - t630) * t717) * MDP(25) + (-t625 * t630 - t626 * t631 + (t596 * t950 + t597 * t948 - t708 * t801 + t1143) * pkin(4)) * MDP(26) + (t607 - t1125) * MDP(29) + (t1126 - t608) * MDP(30) + (t990 * t747 - (t617 * t957 - t618 * t952) * t833 + t700 * t667 + (-t833 * t991 - t600) * qJD(6) + t1164) * MDP(32) + (-t991 * t747 + (t617 * t952 + t618 * t957) * t833 - t700 * t1152 + (-t833 * t990 - t1099) * qJD(6) + t1174) * MDP(33) + t1173; (-t1000 ^ 2 - t717 ^ 2) * MDP(25) + (-t1000 * t626 - t625 * t717 - t1140 + t1144 - t967) * MDP(26) + (t608 + t1126) * MDP(32) + (t607 + t1125) * MDP(33); (t1054 - t1125) * MDP(29) + (-t1030 + t1126) * MDP(30) + (t600 * t833 + t1164) * MDP(32) + (t599 * t833 + t1174) * MDP(33) + (MDP(29) * t1123 - MDP(30) * t1152 - MDP(32) * t600 - MDP(33) * t1099) * qJD(6) + t1173;];
tau  = t1;
