% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 16:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR12_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR12_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR12_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 16:21:21
% EndTime: 2019-05-06 16:21:30
% DurationCPUTime: 9.51s
% Computational Cost: add. (59793->352), mult. (138341->469), div. (0->0), fcn. (104827->12), ass. (0->266)
t2349 = sin(pkin(6));
t2351 = cos(pkin(6));
t2354 = sin(qJ(2));
t2358 = cos(qJ(2));
t2314 = (qJD(1) * qJD(2) * t2358 + qJDD(1) * t2354) * t2349;
t2343 = qJD(1) * t2351 + qJD(2);
t2403 = t2349 * t2358;
t2395 = qJD(1) * t2403;
t2388 = t2343 * t2395;
t2368 = -t2314 - t2388;
t2339 = t2343 ^ 2;
t2360 = qJD(1) ^ 2;
t2407 = t2349 ^ 2 * t2360;
t2340 = t2354 ^ 2 * t2407;
t2297 = -t2340 - t2339;
t2328 = t2358 * t2354 * t2407;
t2342 = qJDD(1) * t2351 + qJDD(2);
t2313 = -t2328 + t2342;
t2371 = t2297 * t2358 - t2313 * t2354;
t2254 = t2349 * t2368 + t2351 * t2371;
t2283 = t2297 * t2354 + t2313 * t2358;
t2355 = sin(qJ(1));
t2359 = cos(qJ(1));
t2437 = t2254 * t2355 + t2283 * t2359;
t2436 = t2254 * t2359 - t2283 * t2355;
t2404 = t2349 * t2354;
t2396 = qJD(1) * t2404;
t2397 = qJDD(1) * t2349;
t2315 = -qJD(2) * t2396 + t2358 * t2397;
t2320 = t2343 * t2396;
t2292 = t2315 - t2320;
t2341 = t2358 ^ 2 * t2407;
t2316 = -t2341 - t2339;
t2427 = -t2342 - t2328;
t2370 = t2316 * t2354 - t2358 * t2427;
t2261 = t2349 * t2292 + t2351 * t2370;
t2287 = -t2316 * t2358 - t2354 * t2427;
t2435 = t2261 * t2355 + t2287 * t2359;
t2434 = t2261 * t2359 - t2287 * t2355;
t2365 = qJDD(4) + t2314;
t2353 = sin(qJ(4));
t2357 = cos(qJ(4));
t2300 = t2343 * t2353 + t2357 * t2395;
t2302 = t2343 * t2357 - t2353 * t2395;
t2348 = sin(pkin(11));
t2350 = cos(pkin(11));
t2280 = t2350 * t2300 + t2302 * t2348;
t2279 = qJD(6) + t2280;
t2429 = qJD(6) + t2279;
t2428 = pkin(2) * t2320 - 0.2e1 * qJD(3) * t2396;
t2259 = -t2351 * t2292 + t2349 * t2370;
t2252 = t2349 * t2371 - t2351 * t2368;
t2282 = -t2300 * t2348 + t2302 * t2350;
t2330 = qJD(4) + t2396;
t2352 = sin(qJ(6));
t2356 = cos(qJ(6));
t2265 = t2282 * t2352 - t2356 * t2330;
t2426 = t2265 ^ 2;
t2267 = t2282 * t2356 + t2330 * t2352;
t2425 = t2267 ^ 2;
t2424 = t2279 ^ 2;
t2423 = t2280 ^ 2;
t2422 = t2282 ^ 2;
t2299 = t2300 ^ 2;
t2421 = t2302 ^ 2;
t2420 = t2330 ^ 2;
t2419 = 0.2e1 * qJD(3);
t2418 = -2 * qJD(5);
t2417 = g(3) * t2358;
t2416 = t2351 * g(3);
t2415 = t2265 * t2267;
t2414 = t2280 * t2330;
t2413 = t2282 * t2280;
t2412 = t2282 * t2330;
t2411 = t2302 * t2300;
t2332 = t2355 * g(1) - g(2) * t2359;
t2308 = pkin(8) * t2349 * t2360 + qJDD(1) * pkin(1) + t2332;
t2410 = t2308 * t2351;
t2310 = (-pkin(2) * t2358 - qJ(3) * t2354) * t2349 * qJD(1);
t2409 = t2310 * t2354;
t2408 = t2343 * t2358;
t2400 = qJD(4) - t2330;
t2399 = qJD(4) + t2330;
t2398 = qJD(6) - t2279;
t2311 = pkin(3) * t2396 - pkin(9) * t2343;
t2229 = -pkin(3) * t2341 - t2416 - t2314 * qJ(3) + (-pkin(2) - pkin(9)) * t2315 + (-t2308 + (-qJ(3) * t2408 - t2311 * t2354) * qJD(1)) * t2349 + t2428;
t2333 = -g(1) * t2359 - g(2) * t2355;
t2309 = -pkin(1) * t2360 + pkin(8) * t2397 + t2333;
t2390 = t2354 * t2309 - t2358 * t2410;
t2366 = -t2342 * pkin(2) - t2339 * qJ(3) + qJDD(3) + t2390;
t2232 = t2314 * pkin(3) + t2427 * pkin(9) + (t2417 + (-pkin(3) * t2408 + t2409) * qJD(1)) * t2349 + t2366;
t2204 = t2357 * t2229 + t2353 * t2232;
t2389 = t2357 * t2315 + t2353 * t2342;
t2272 = -qJD(4) * t2302 - t2389;
t2288 = pkin(4) * t2330 - qJ(5) * t2302;
t2186 = -pkin(4) * t2299 + qJ(5) * t2272 - t2288 * t2330 + t2204;
t2203 = -t2353 * t2229 + t2357 * t2232;
t2269 = t2365 - t2411;
t2369 = t2353 * t2315 - t2357 * t2342;
t2273 = -qJD(4) * t2300 - t2369;
t2361 = (-t2300 * t2330 - t2273) * qJ(5) + t2269 * pkin(4) + t2203;
t2159 = t2350 * t2186 + t2280 * t2418 + t2348 * t2361;
t2276 = -g(3) * t2404 + t2358 * t2309 + t2354 * t2410;
t2394 = t2348 * t2186 - t2350 * t2361;
t2240 = t2272 * t2348 + t2273 * t2350;
t2393 = -t2240 + t2414;
t2392 = -t2352 * t2240 + t2356 * t2365;
t2391 = -t2350 * t2272 + t2273 * t2348;
t2293 = -t2349 * t2308 - t2416;
t2387 = -qJDD(6) - t2391;
t2247 = pkin(5) * t2280 - pkin(10) * t2282;
t2155 = -pkin(5) * t2420 + pkin(10) * t2365 - t2280 * t2247 + t2159;
t2363 = -t2339 * pkin(2) + t2342 * qJ(3) + t2310 * t2395 + t2276;
t2228 = t2315 * pkin(3) - pkin(9) * t2341 + (t2419 + t2311) * t2343 + t2363;
t2205 = -t2272 * pkin(4) - t2299 * qJ(5) + t2302 * t2288 + qJDD(5) + t2228;
t2220 = t2391 + t2412;
t2173 = pkin(5) * t2220 + pkin(10) * t2393 + t2205;
t2140 = -t2155 * t2352 + t2173 * t2356;
t2141 = t2155 * t2356 + t2173 * t2352;
t2130 = -t2140 * t2352 + t2141 * t2356;
t2154 = -t2365 * pkin(5) - t2420 * pkin(10) + ((2 * qJD(5)) + t2247) * t2282 + t2394;
t2122 = t2130 * t2348 - t2154 * t2350;
t2123 = t2130 * t2350 + t2154 * t2348;
t2118 = t2122 * t2357 + t2123 * t2353;
t2129 = t2140 * t2356 + t2141 * t2352;
t2386 = -t2118 * t2358 + t2129 * t2354;
t2158 = t2282 * t2418 - t2394;
t2138 = t2158 * t2350 + t2159 * t2348;
t2139 = -t2158 * t2348 + t2159 * t2350;
t2127 = t2138 * t2357 + t2139 * t2353;
t2385 = -t2127 * t2358 + t2205 * t2354;
t2196 = -t2267 * t2398 + t2392;
t2362 = -t2356 * t2240 - t2352 * t2365;
t2198 = t2265 * t2398 + t2362;
t2172 = t2196 * t2356 - t2198 * t2352;
t2214 = -t2425 - t2426;
t2161 = t2172 * t2348 - t2214 * t2350;
t2162 = t2172 * t2350 + t2214 * t2348;
t2142 = t2161 * t2357 + t2162 * t2353;
t2171 = t2196 * t2352 + t2198 * t2356;
t2384 = -t2142 * t2358 + t2171 * t2354;
t2206 = -t2387 - t2415;
t2217 = -t2424 - t2426;
t2182 = -t2206 * t2352 + t2217 * t2356;
t2195 = t2267 * t2429 - t2392;
t2164 = t2182 * t2348 - t2195 * t2350;
t2165 = t2182 * t2350 + t2195 * t2348;
t2146 = t2164 * t2357 + t2165 * t2353;
t2181 = t2206 * t2356 + t2217 * t2352;
t2383 = -t2146 * t2358 + t2181 * t2354;
t2207 = t2387 - t2415;
t2226 = -t2424 - t2425;
t2188 = t2207 * t2356 - t2226 * t2352;
t2197 = -t2265 * t2429 - t2362;
t2166 = t2188 * t2348 - t2197 * t2350;
t2167 = t2188 * t2350 + t2197 * t2348;
t2148 = t2166 * t2357 + t2167 * t2353;
t2187 = t2207 * t2352 + t2226 * t2356;
t2382 = -t2148 * t2358 + t2187 * t2354;
t2221 = -t2391 + t2412;
t2223 = -t2240 - t2414;
t2191 = t2221 * t2348 + t2223 * t2350;
t2192 = t2221 * t2350 - t2223 * t2348;
t2168 = t2191 * t2357 + t2192 * t2353;
t2231 = -t2422 - t2423;
t2381 = -t2168 * t2358 + t2231 * t2354;
t2174 = t2203 * t2357 + t2204 * t2353;
t2380 = -t2174 * t2358 + t2228 * t2354;
t2237 = t2365 - t2413;
t2242 = -t2420 - t2423;
t2209 = t2237 * t2350 + t2242 * t2348;
t2210 = -t2237 * t2348 + t2242 * t2350;
t2177 = t2209 * t2357 + t2210 * t2353;
t2379 = -t2177 * t2358 + t2220 * t2354;
t2238 = -t2365 - t2413;
t2263 = -t2420 - t2422;
t2215 = t2238 * t2348 + t2263 * t2350;
t2216 = t2238 * t2350 - t2263 * t2348;
t2189 = t2215 * t2357 + t2216 * t2353;
t2378 = -t2189 * t2358 - t2354 * t2393;
t2256 = -t2302 * t2400 - t2389;
t2258 = t2300 * t2400 + t2369;
t2218 = t2256 * t2353 + t2258 * t2357;
t2268 = -t2299 - t2421;
t2377 = -t2218 * t2358 + t2268 * t2354;
t2274 = -t2420 - t2299;
t2235 = t2269 * t2357 + t2274 * t2353;
t2255 = t2302 * t2399 + t2389;
t2376 = -t2235 * t2358 + t2255 * t2354;
t2270 = -t2365 - t2411;
t2285 = -t2420 - t2421;
t2243 = t2270 * t2353 + t2285 * t2357;
t2257 = -t2300 * t2399 - t2369;
t2375 = -t2243 * t2358 + t2257 * t2354;
t2245 = t2343 * t2419 + t2363;
t2248 = (qJD(1) * t2409 + t2417) * t2349 + t2366;
t2374 = t2245 * t2354 - t2248 * t2358;
t2275 = -g(3) * t2403 - t2390;
t2373 = t2275 * t2358 + t2276 * t2354;
t2290 = t2314 - t2388;
t2291 = t2315 + t2320;
t2372 = -t2290 * t2358 + t2291 * t2354;
t2326 = -qJDD(1) * t2355 - t2359 * t2360;
t2325 = qJDD(1) * t2359 - t2355 * t2360;
t2317 = -t2340 - t2341;
t2264 = t2290 * t2354 + t2291 * t2358;
t2250 = -t2349 * t2317 + t2351 * t2372;
t2249 = t2351 * t2317 + t2349 * t2372;
t2246 = -t2315 * pkin(2) + qJ(3) * t2368 + t2293 + t2428;
t2244 = t2270 * t2357 - t2285 * t2353;
t2241 = -t2275 * t2354 + t2276 * t2358;
t2236 = -t2269 * t2353 + t2274 * t2357;
t2234 = -t2349 * t2293 + t2351 * t2373;
t2233 = t2351 * t2293 + t2349 * t2373;
t2225 = -t2250 * t2355 + t2264 * t2359;
t2224 = t2250 * t2359 + t2264 * t2355;
t2219 = t2256 * t2357 - t2258 * t2353;
t2213 = t2243 * t2354 + t2257 * t2358;
t2212 = t2245 * t2358 + t2248 * t2354;
t2211 = t2235 * t2354 + t2255 * t2358;
t2208 = t2218 * t2354 + t2268 * t2358;
t2202 = -t2349 * t2246 + t2351 * t2374;
t2201 = t2351 * t2246 + t2349 * t2374;
t2200 = -t2349 * t2244 + t2351 * t2375;
t2199 = t2351 * t2244 + t2349 * t2375;
t2194 = -t2349 * t2236 + t2351 * t2376;
t2193 = t2351 * t2236 + t2349 * t2376;
t2190 = -t2215 * t2353 + t2216 * t2357;
t2185 = -t2349 * t2219 + t2351 * t2377;
t2184 = t2351 * t2219 + t2349 * t2377;
t2178 = -t2209 * t2353 + t2210 * t2357;
t2176 = t2189 * t2354 - t2358 * t2393;
t2175 = -t2203 * t2353 + t2204 * t2357;
t2170 = t2177 * t2354 + t2220 * t2358;
t2169 = -t2191 * t2353 + t2192 * t2357;
t2163 = t2174 * t2354 + t2228 * t2358;
t2160 = t2168 * t2354 + t2231 * t2358;
t2157 = -t2349 * t2190 + t2351 * t2378;
t2156 = t2351 * t2190 + t2349 * t2378;
t2153 = -t2349 * t2178 + t2351 * t2379;
t2152 = t2351 * t2178 + t2349 * t2379;
t2151 = -t2349 * t2175 + t2351 * t2380;
t2150 = t2351 * t2175 + t2349 * t2380;
t2149 = -t2166 * t2353 + t2167 * t2357;
t2147 = -t2164 * t2353 + t2165 * t2357;
t2145 = -t2349 * t2169 + t2351 * t2381;
t2144 = t2351 * t2169 + t2349 * t2381;
t2143 = -t2161 * t2353 + t2162 * t2357;
t2137 = t2148 * t2354 + t2187 * t2358;
t2136 = t2146 * t2354 + t2181 * t2358;
t2135 = t2142 * t2354 + t2171 * t2358;
t2134 = -t2349 * t2149 + t2351 * t2382;
t2133 = t2351 * t2149 + t2349 * t2382;
t2132 = -t2349 * t2147 + t2351 * t2383;
t2131 = t2351 * t2147 + t2349 * t2383;
t2128 = -t2138 * t2353 + t2139 * t2357;
t2126 = t2127 * t2354 + t2205 * t2358;
t2125 = -t2349 * t2143 + t2351 * t2384;
t2124 = t2351 * t2143 + t2349 * t2384;
t2121 = -t2349 * t2128 + t2351 * t2385;
t2120 = t2351 * t2128 + t2349 * t2385;
t2119 = -t2122 * t2353 + t2123 * t2357;
t2117 = t2118 * t2354 + t2129 * t2358;
t2116 = -t2349 * t2119 + t2351 * t2386;
t2115 = t2351 * t2119 + t2349 * t2386;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2326, -t2325, 0, -t2332 * t2355 + t2333 * t2359, 0, 0, 0, 0, 0, 0, -t2435, -t2437, t2225, -t2234 * t2355 + t2241 * t2359, 0, 0, 0, 0, 0, 0, t2225, t2435, t2437, -t2202 * t2355 + t2212 * t2359, 0, 0, 0, 0, 0, 0, -t2194 * t2355 + t2211 * t2359, -t2200 * t2355 + t2213 * t2359, -t2185 * t2355 + t2208 * t2359, -t2151 * t2355 + t2163 * t2359, 0, 0, 0, 0, 0, 0, -t2153 * t2355 + t2170 * t2359, -t2157 * t2355 + t2176 * t2359, -t2145 * t2355 + t2160 * t2359, -t2121 * t2355 + t2126 * t2359, 0, 0, 0, 0, 0, 0, -t2132 * t2355 + t2136 * t2359, -t2134 * t2355 + t2137 * t2359, -t2125 * t2355 + t2135 * t2359, -t2116 * t2355 + t2117 * t2359; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2325, t2326, 0, t2332 * t2359 + t2333 * t2355, 0, 0, 0, 0, 0, 0, t2434, t2436, t2224, t2234 * t2359 + t2241 * t2355, 0, 0, 0, 0, 0, 0, t2224, -t2434, -t2436, t2202 * t2359 + t2212 * t2355, 0, 0, 0, 0, 0, 0, t2194 * t2359 + t2211 * t2355, t2200 * t2359 + t2213 * t2355, t2185 * t2359 + t2208 * t2355, t2151 * t2359 + t2163 * t2355, 0, 0, 0, 0, 0, 0, t2153 * t2359 + t2170 * t2355, t2157 * t2359 + t2176 * t2355, t2145 * t2359 + t2160 * t2355, t2121 * t2359 + t2126 * t2355, 0, 0, 0, 0, 0, 0, t2132 * t2359 + t2136 * t2355, t2134 * t2359 + t2137 * t2355, t2125 * t2359 + t2135 * t2355, t2116 * t2359 + t2117 * t2355; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2259, t2252, t2249, t2233, 0, 0, 0, 0, 0, 0, t2249, -t2259, -t2252, t2201, 0, 0, 0, 0, 0, 0, t2193, t2199, t2184, t2150, 0, 0, 0, 0, 0, 0, t2152, t2156, t2144, t2120, 0, 0, 0, 0, 0, 0, t2131, t2133, t2124, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2360, -qJDD(1), 0, t2333, 0, 0, 0, 0, 0, 0, -t2287, -t2283, t2264, t2241, 0, 0, 0, 0, 0, 0, t2264, t2287, t2283, t2212, 0, 0, 0, 0, 0, 0, t2211, t2213, t2208, t2163, 0, 0, 0, 0, 0, 0, t2170, t2176, t2160, t2126, 0, 0, 0, 0, 0, 0, t2136, t2137, t2135, t2117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2360, 0, t2332, 0, 0, 0, 0, 0, 0, t2261, t2254, t2250, t2234, 0, 0, 0, 0, 0, 0, t2250, -t2261, -t2254, t2202, 0, 0, 0, 0, 0, 0, t2194, t2200, t2185, t2151, 0, 0, 0, 0, 0, 0, t2153, t2157, t2145, t2121, 0, 0, 0, 0, 0, 0, t2132, t2134, t2125, t2116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2259, t2252, t2249, t2233, 0, 0, 0, 0, 0, 0, t2249, -t2259, -t2252, t2201, 0, 0, 0, 0, 0, 0, t2193, t2199, t2184, t2150, 0, 0, 0, 0, 0, 0, t2152, t2156, t2144, t2120, 0, 0, 0, 0, 0, 0, t2131, t2133, t2124, t2115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2316, -t2313, t2291, t2276, 0, 0, 0, 0, 0, 0, t2291, -t2316, t2313, t2245, 0, 0, 0, 0, 0, 0, t2255, t2257, t2268, t2228, 0, 0, 0, 0, 0, 0, t2220, -t2393, t2231, t2205, 0, 0, 0, 0, 0, 0, t2181, t2187, t2171, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2427, t2297, -t2290, t2275, 0, 0, 0, 0, 0, 0, -t2290, t2427, -t2297, -t2248, 0, 0, 0, 0, 0, 0, -t2235, -t2243, -t2218, -t2174, 0, 0, 0, 0, 0, 0, -t2177, -t2189, -t2168, -t2127, 0, 0, 0, 0, 0, 0, -t2146, -t2148, -t2142, -t2118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2292, -t2368, t2317, t2293, 0, 0, 0, 0, 0, 0, t2317, t2292, t2368, t2246, 0, 0, 0, 0, 0, 0, t2236, t2244, t2219, t2175, 0, 0, 0, 0, 0, 0, t2178, t2190, t2169, t2128, 0, 0, 0, 0, 0, 0, t2147, t2149, t2143, t2119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2317, t2292, t2368, t2246, 0, 0, 0, 0, 0, 0, t2236, t2244, t2219, t2175, 0, 0, 0, 0, 0, 0, t2178, t2190, t2169, t2128, 0, 0, 0, 0, 0, 0, t2147, t2149, t2143, t2119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2291, t2316, -t2313, -t2245, 0, 0, 0, 0, 0, 0, -t2255, -t2257, -t2268, -t2228, 0, 0, 0, 0, 0, 0, -t2220, t2393, -t2231, -t2205, 0, 0, 0, 0, 0, 0, -t2181, -t2187, -t2171, -t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2290, -t2427, t2297, t2248, 0, 0, 0, 0, 0, 0, t2235, t2243, t2218, t2174, 0, 0, 0, 0, 0, 0, t2177, t2189, t2168, t2127, 0, 0, 0, 0, 0, 0, t2146, t2148, t2142, t2118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2274, t2270, t2256, t2204, 0, 0, 0, 0, 0, 0, t2210, t2216, t2192, t2139, 0, 0, 0, 0, 0, 0, t2165, t2167, t2162, t2123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2269, t2285, t2258, t2203, 0, 0, 0, 0, 0, 0, t2209, t2215, t2191, t2138, 0, 0, 0, 0, 0, 0, t2164, t2166, t2161, t2122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2255, t2257, t2268, t2228, 0, 0, 0, 0, 0, 0, t2220, -t2393, t2231, t2205, 0, 0, 0, 0, 0, 0, t2181, t2187, t2171, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2242, t2238, t2221, t2159, 0, 0, 0, 0, 0, 0, t2182, t2188, t2172, t2130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2237, t2263, t2223, t2158, 0, 0, 0, 0, 0, 0, -t2195, -t2197, -t2214, -t2154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2220, -t2393, t2231, t2205, 0, 0, 0, 0, 0, 0, t2181, t2187, t2171, t2129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2217, t2207, t2196, t2141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2206, t2226, t2198, t2140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2195, t2197, t2214, t2154;];
f_new_reg  = t1;
