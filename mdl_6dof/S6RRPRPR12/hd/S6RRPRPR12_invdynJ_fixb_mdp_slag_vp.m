% Calculate vector of inverse dynamics joint torques for
% S6RRPRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRPR12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRPR12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR12_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRPRPR12_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:22:09
% EndTime: 2019-03-09 11:22:26
% DurationCPUTime: 12.42s
% Computational Cost: add. (9081->681), mult. (21905->901), div. (0->0), fcn. (16886->14), ass. (0->317)
t708 = sin(pkin(6));
t717 = cos(qJ(2));
t829 = qJD(1) * t717;
t800 = t708 * t829;
t670 = pkin(8) * t800;
t713 = sin(qJ(2));
t709 = cos(pkin(6));
t831 = qJD(1) * t709;
t810 = pkin(1) * t831;
t619 = t713 * t810 + t670;
t595 = pkin(3) * t800 + t619;
t716 = cos(qJ(4));
t581 = t716 * t595;
t830 = qJD(1) * t713;
t801 = t708 * t830;
t674 = pkin(2) * t801;
t879 = qJ(3) * t717;
t762 = pkin(9) * t713 - t879;
t832 = qJD(1) * t708;
t593 = t762 * t832 + t674;
t712 = sin(qJ(4));
t825 = qJD(4) * t712;
t719 = -pkin(2) - pkin(9);
t844 = qJ(5) - t719;
t853 = t712 * t713;
t910 = t593 * t712 - t581 - (pkin(4) * t717 - qJ(5) * t853) * t832 - qJD(5) * t716 + t825 * t844;
t773 = t716 * t801;
t790 = t844 * t716;
t839 = t716 * t593 + t712 * t595;
t909 = qJ(5) * t773 + qJD(4) * t790 + qJD(5) * t712 + t839;
t816 = qJD(1) * qJD(2);
t796 = t713 * t816;
t771 = t708 * t796;
t813 = qJDD(1) * t717;
t794 = t708 * t813;
t906 = t771 - t794;
t654 = qJD(4) + t801;
t715 = cos(qJ(6));
t711 = sin(qJ(6));
t680 = qJD(2) + t831;
t606 = t680 * t712 + t716 * t800;
t772 = t712 * t800;
t608 = t680 * t716 - t772;
t707 = sin(pkin(11));
t881 = cos(pkin(11));
t747 = -t707 * t606 + t608 * t881;
t874 = t747 * t711;
t527 = -t715 * t654 + t874;
t784 = -t881 * t606 - t608 * t707;
t896 = qJD(6) - t784;
t908 = t527 * t896;
t529 = t654 * t711 + t715 * t747;
t907 = t529 * t896;
t791 = qJD(4) * t881;
t860 = t707 * t712;
t838 = -t707 * t825 + t716 * t791 + t773 * t881 - t801 * t860;
t746 = t707 * t716 + t712 * t881;
t824 = qJD(4) * t716;
t837 = t707 * t824 + t712 * t791 + t746 * t801;
t782 = t896 * t715;
t815 = qJDD(1) * t709;
t678 = qJDD(2) + t815;
t534 = -qJD(4) * t606 + t716 * t678 + t712 * t906;
t535 = -qJD(4) * t772 + t678 * t712 + (qJD(4) * t680 - t906) * t716;
t502 = -t534 * t707 - t881 * t535;
t500 = qJDD(6) - t502;
t877 = t500 * t711;
t905 = -t896 * t782 - t877;
t695 = pkin(4) * t716 + pkin(3);
t618 = pkin(8) * t801 - t717 * t810;
t897 = qJD(3) + t618;
t904 = pkin(4) * t824 + t695 * t801 + t897;
t718 = cos(qJ(1));
t847 = t717 * t718;
t714 = sin(qJ(1));
t851 = t713 * t714;
t629 = -t709 * t847 + t851;
t704 = qJ(4) + pkin(11);
t698 = sin(t704);
t699 = cos(t704);
t856 = t708 * t718;
t568 = -t629 * t698 + t699 * t856;
t848 = t714 * t717;
t849 = t713 * t718;
t630 = t709 * t849 + t848;
t903 = t568 * t711 + t630 * t715;
t902 = t568 * t715 - t630 * t711;
t900 = t712 * pkin(4) + qJ(3);
t843 = t909 * t707 + t881 * t910;
t841 = t707 * t910 - t909 * t881;
t859 = t708 * t713;
t682 = pkin(8) * t859;
t802 = -pkin(1) * t717 - pkin(2);
t574 = pkin(3) * t859 + t682 + (-pkin(9) + t802) * t709;
t857 = t708 * t717;
t836 = pkin(2) * t857 + qJ(3) * t859;
t591 = (-pkin(9) * t717 - pkin(1)) * t708 - t836;
t840 = t712 * t574 + t716 * t591;
t655 = t678 * qJ(3);
t899 = -t680 * qJD(3) - t655;
t627 = t709 * t712 + t716 * t857;
t805 = t712 * t857;
t628 = t709 * t716 - t805;
t557 = -t707 * t627 + t628 * t881;
t850 = t713 * t715;
t659 = t708 * t850;
t898 = -t557 * t711 + t659;
t819 = pkin(3) * t801 + t897;
t793 = -qJ(3) * t713 - pkin(1);
t754 = -pkin(2) * t717 + t793;
t600 = t754 * t832;
t895 = t600 * t801 + qJDD(3);
t894 = pkin(4) * t535 + qJDD(5);
t631 = t709 * t848 + t849;
t858 = t708 * t714;
t585 = t631 * t716 - t712 * t858;
t852 = t712 * t718;
t870 = t629 * t716;
t893 = g(3) * t627 - g(2) * (t708 * t852 + t870) - g(1) * t585;
t795 = t717 * t816;
t814 = qJDD(1) * t713;
t743 = t795 + t814;
t733 = t743 * t708;
t615 = qJDD(4) + t733;
t550 = t680 * t719 + t819;
t740 = t717 * t719 + t793;
t570 = t740 * t832;
t515 = t550 * t712 + t570 * t716;
t809 = pkin(1) * qJD(2) * t709;
t777 = qJD(1) * t809;
t808 = pkin(1) * t815;
t774 = qJD(2) * t670 + qJDD(1) * t682 + t713 * t777 - t717 * t808;
t757 = qJDD(3) + t774;
t521 = pkin(3) * t733 + t678 * t719 + t757;
t649 = pkin(2) * t771;
t826 = qJD(3) * t713;
t727 = qJD(2) * t762 - t826;
t525 = t649 + (qJD(1) * t727 + qJDD(1) * t740) * t708;
t722 = -qJD(4) * t515 + t716 * t521 - t712 * t525;
t468 = pkin(4) * t615 - qJ(5) * t534 - qJD(5) * t608 + t722;
t742 = -t712 * t521 - t716 * t525 - t550 * t824 + t570 * t825;
t470 = -qJ(5) * t535 - qJD(5) * t606 - t742;
t457 = t468 * t881 - t707 * t470;
t455 = -t615 * pkin(5) - t457;
t693 = pkin(4) * t707 + pkin(10);
t892 = t896 * (pkin(4) * t608 + pkin(5) * t747 - pkin(10) * t784 + qJD(6) * t693) + g(1) * (t631 * t699 - t698 * t858) + g(2) * (t629 * t699 + t698 * t856) + g(3) * (-t698 * t709 - t699 * t857) + t455;
t657 = t680 * qJ(3);
t561 = t657 + t595;
t891 = t561 * t654 + t719 * t615;
t458 = t707 * t468 + t881 * t470;
t514 = t716 * t550 - t570 * t712;
t507 = -qJ(5) * t608 + t514;
t504 = pkin(4) * t654 + t507;
t508 = -qJ(5) * t606 + t515;
t861 = t707 * t508;
t473 = t504 * t881 - t861;
t505 = t881 * t508;
t474 = t707 * t504 + t505;
t635 = t716 * t881 - t860;
t753 = g(1) * t631 + g(2) * t629 - g(3) * t857;
t889 = t457 * t635 + t458 * t746 - t473 * t837 + t474 * t838 - t753;
t888 = pkin(3) + pkin(8);
t887 = pkin(1) * t713;
t886 = pkin(2) * t678;
t882 = g(3) * t708;
t880 = MDP(7) * t708;
t503 = t534 * t881 - t707 * t535;
t821 = qJD(6) * t715;
t804 = t715 * t503 + t711 * t615 + t654 * t821;
t822 = qJD(6) * t711;
t477 = -t747 * t822 + t804;
t878 = t477 * t711;
t876 = t527 * t747;
t875 = t529 * t747;
t872 = t606 * t654;
t871 = t608 * t654;
t867 = t635 * t711;
t866 = t635 * t715;
t865 = t678 * t709;
t864 = t698 * t711;
t863 = t698 * t715;
t703 = t708 ^ 2;
t862 = t703 * qJD(1) ^ 2;
t855 = t711 * t713;
t854 = t712 * t615;
t497 = t715 * t500;
t828 = qJD(2) * t713;
t799 = t708 * t828;
t583 = -qJD(4) * t627 + t712 * t799;
t669 = pkin(2) * t799;
t564 = t708 * t727 + t669;
t688 = t709 * t887;
t596 = (t857 * t888 + t688) * qJD(2);
t723 = -qJD(4) * t840 - t564 * t712 + t716 * t596;
t827 = qJD(2) * t717;
t798 = t708 * t827;
t481 = pkin(4) * t798 - qJ(5) * t583 - qJD(5) * t628 + t723;
t584 = -qJD(4) * t805 + t709 * t824 - t716 * t799;
t741 = t716 * t564 + t574 * t824 - t591 * t825 + t712 * t596;
t485 = -qJ(5) * t584 - qJD(5) * t627 + t741;
t465 = t707 * t481 + t881 * t485;
t785 = t716 * t574 - t591 * t712;
t512 = pkin(4) * t859 - qJ(5) * t628 + t785;
t517 = -qJ(5) * t627 + t840;
t487 = t707 * t512 + t881 * t517;
t842 = pkin(5) * t800 - t843;
t835 = pkin(8) * t857 + t688;
t705 = t713 ^ 2;
t834 = -t717 ^ 2 + t705;
t833 = MDP(11) * t708;
t823 = qJD(4) * t719;
t820 = qJD(2) - t680;
t812 = 0.2e1 * t703;
t811 = g(3) * t859;
t807 = t717 * t862;
t806 = t708 * t855;
t632 = -t709 * t851 + t847;
t803 = t718 * pkin(1) + t632 * pkin(2) + pkin(8) * t858;
t611 = -t709 * qJ(3) - t835;
t456 = pkin(10) * t615 + t458;
t775 = pkin(8) * t906 - t713 * t808 - t717 * t777;
t536 = t775 + t899;
t663 = pkin(3) * t794;
t524 = -pkin(3) * t771 - t536 + t663;
t493 = t524 + t894;
t466 = -pkin(5) * t502 - pkin(10) * t503 + t493;
t789 = -t711 * t456 + t715 * t466;
t788 = t503 * t711 - t715 * t615;
t787 = t711 * t837 - t715 * t800;
t786 = t711 * t800 + t715 * t837;
t783 = t629 * t712 - t716 * t856;
t781 = t680 + t831;
t779 = -qJD(6) * t746 - t680;
t778 = t678 + t815;
t776 = t713 * t807;
t590 = pkin(3) * t857 - t611;
t770 = -pkin(1) * t714 - t630 * pkin(2) + pkin(8) * t856;
t769 = g(1) * t629 - g(2) * t631;
t768 = -g(1) * t632 - g(2) * t630;
t767 = g(1) * t630 - g(2) * t632;
t766 = g(1) * t718 + g(2) * t714;
t560 = pkin(5) * t746 - pkin(10) * t635 + t900;
t764 = pkin(10) * t800 - qJD(6) * t560 - t841;
t642 = t844 * t712;
t577 = -t642 * t881 - t707 * t790;
t763 = -pkin(5) * t838 - pkin(10) * t837 + qJD(6) * t577 - t904;
t761 = t715 * t456 + t711 * t466;
t472 = pkin(10) * t654 + t474;
t533 = pkin(4) * t606 + qJD(5) + t561;
t490 = -pkin(5) * t784 - pkin(10) * t747 + t533;
t460 = t472 * t715 + t490 * t711;
t760 = t472 * t711 - t490 * t715;
t483 = pkin(10) * t859 + t487;
t556 = t627 * t881 + t628 * t707;
t751 = pkin(4) * t627 + t590;
t498 = pkin(5) * t556 - pkin(10) * t557 + t751;
t759 = t483 * t715 + t498 * t711;
t758 = -t483 * t711 + t498 * t715;
t612 = -pkin(1) * t708 - t836;
t756 = qJD(2) * (-qJD(1) * t612 - t600);
t673 = t717 * t809;
t755 = -pkin(8) * t799 + t673;
t752 = t497 + (t711 * t784 - t822) * t896;
t541 = t557 * t715 + t806;
t750 = t654 * t712;
t749 = -qJ(3) * t827 - t826;
t464 = t481 * t881 - t707 * t485;
t486 = t512 * t881 - t707 * t517;
t539 = t649 + (qJD(1) * t749 + qJDD(1) * t754) * t708;
t597 = t708 * t749 + t669;
t744 = qJD(1) * t597 + qJDD(1) * t612 + t539;
t620 = t835 * qJD(2);
t739 = t620 * t680 - t767;
t738 = t635 * t821 - t787;
t737 = -t635 * t822 - t786;
t697 = t709 * qJD(3);
t573 = -t799 * t888 + t673 + t697;
t732 = t768 - t775;
t731 = t524 + t768 - t811;
t471 = -t654 * pkin(5) - t473;
t476 = t507 * t881 - t861;
t730 = -t693 * t500 + (t471 + t476) * t896;
t729 = t753 - t774;
t728 = t708 * (t820 * t829 + t814);
t726 = pkin(4) * t584 + t573;
t725 = t732 - t899;
t721 = t619 * t680 + t729;
t710 = -qJ(5) - pkin(9);
t694 = -pkin(4) * t881 - pkin(5);
t623 = t631 * pkin(2);
t621 = t629 * pkin(2);
t617 = -qJ(3) * t800 + t674;
t613 = t709 * t802 + t682;
t610 = -t698 * t857 + t699 * t709;
t604 = t716 * t615;
t601 = -t697 - t755;
t592 = -t657 - t619;
t587 = -pkin(2) * t680 + t897;
t586 = t631 * t712 + t716 * t858;
t576 = -t642 * t707 + t790 * t881;
t566 = t631 * t698 + t699 * t858;
t548 = t757 - t886;
t538 = t566 * t715 + t632 * t711;
t537 = -t566 * t711 + t632 * t715;
t531 = t583 * t881 - t707 * t584;
t530 = t583 * t707 + t584 * t881;
t495 = qJD(6) * t541 + t531 * t711 - t715 * t798;
t494 = qJD(6) * t898 + t531 * t715 + t711 * t798;
t482 = -pkin(5) * t859 - t486;
t479 = pkin(5) * t530 - pkin(10) * t531 + t726;
t478 = qJD(6) * t529 + t788;
t475 = t507 * t707 + t505;
t462 = pkin(10) * t798 + t465;
t461 = -pkin(5) * t798 - t464;
t454 = -qJD(6) * t460 + t789;
t453 = -qJD(6) * t760 + t761;
t1 = [(-t457 * t557 - t458 * t556 - t464 * t747 + t465 * t784 - t473 * t531 - t474 * t530 - t486 * t503 + t487 * t502 + t767) * MDP(22) + ((-qJD(6) * t759 - t462 * t711 + t479 * t715) * t896 + t758 * t500 + t454 * t556 - t760 * t530 + t461 * t527 + t482 * t478 - t455 * t898 + t471 * t495 - g(1) * t902 - g(2) * t538) * MDP(29) + (-t478 * t556 - t495 * t896 + t500 * t898 - t527 * t530) * MDP(27) + (t477 * t898 - t478 * t541 - t494 * t527 - t495 * t529) * MDP(25) + (-(qJD(6) * t758 + t462 * t715 + t479 * t711) * t896 - t759 * t500 - t453 * t556 - t460 * t530 + t461 * t529 + t482 * t477 + t455 * t541 + t471 * t494 + g(1) * t903 - g(2) * t537) * MDP(30) + ((qJDD(1) * t705 + 0.2e1 * t713 * t795) * MDP(4) + 0.2e1 * (t713 * t813 - t816 * t834) * MDP(5)) * t703 + (-pkin(1) * t743 * t812 - t678 * t835 - t680 * t755 + t709 * t775 - t769) * MDP(10) + (t477 * t556 + t494 * t896 + t500 * t541 + t529 * t530) * MDP(26) + (t500 * t556 + t530 * t896) * MDP(28) + (t458 * t487 + t474 * t465 + t457 * t486 + t473 * t464 + t493 * t751 + t533 * t726 - g(1) * (-t629 * t900 + t630 * t710 + t695 * t856 + t770) - g(2) * (t631 * t900 - t632 * t710 + t695 * t858 + t803)) * MDP(23) + (-t682 * t678 - t774 * t709 + (t717 * t865 + (-t796 + t813) * t812) * pkin(1) - t739) * MDP(9) + (-t584 * t654 - t615 * t627) * MDP(18) + (t583 * t654 + t615 * t628) * MDP(17) + (t539 * t612 + t600 * t597 + t536 * t611 + t592 * t601 + t548 * t613 + t587 * t620 - g(1) * (-qJ(3) * t629 + t770) - g(2) * (qJ(3) * t631 + t803)) * MDP(14) + t766 * MDP(3) + (t548 * t709 + t613 * t678 + t739) * MDP(12) + (g(1) * t870 - g(2) * t585 + t524 * t628 + t590 * t534 + t561 * t583 + t573 * t608 - t840 * t615 - t741 * t654) * MDP(21) + (g(1) * t783 - g(2) * t586 + t524 * t627 + t590 * t535 + t561 * t584 + t573 * t606 + t785 * t615 + t723 * t654) * MDP(20) + (-t536 * t709 - t601 * t680 - t611 * t678 + t769) * MDP(13) + ((t713 * t756 + t717 * t744) * MDP(12) + (g(1) * t852 - t515 * t827 + t713 * t742) * MDP(21) + (t514 * t827 + t713 * t722) * MDP(20) + (t534 * t713 + t608 * t827) * MDP(17) + (t713 * t778 + t781 * t827) * MDP(6) + (t615 * t713 + t654 * t827) * MDP(19) + (-t535 * t713 - t606 * t827) * MDP(18) + (-t713 * t744 + t717 * t756) * MDP(13)) * t708 + (t717 * t778 - t781 * t828) * t880 + MDP(8) * t865 + ((qJD(2) * t587 - qJDD(1) * t611 - t536 + (qJD(2) * t613 - t601) * qJD(1)) * t717 + (qJD(2) * t592 + qJDD(1) * t613 + t548 + (qJD(2) * t611 + t620) * qJD(1)) * t713 - t766) * t833 + (g(1) * t714 - g(2) * t718) * MDP(2) + qJDD(1) * MDP(1) + (-t534 * t627 - t535 * t628 - t583 * t606 - t584 * t608) * MDP(16) + (t534 * t628 + t583 * t608) * MDP(15) + (t477 * t541 + t494 * t529) * MDP(24); (t502 * t577 + t503 * t576 - t747 * t843 + t784 * t841 - t889) * MDP(22) + (t862 * t887 + t721) * MDP(9) + ((-t535 - t871) * t716 + (-t534 + t872) * t712) * MDP(16) + t834 * MDP(5) * t862 - MDP(4) * t776 + (-t514 * t800 + qJ(3) * t535 - t581 * t654 + t819 * t606 + t891 * t716 + ((t593 - t823) * t654 + t731) * t712) * MDP(20) + (qJ(3) * t534 + t839 * t654 + t515 * t800 + t819 * t608 - t891 * t712 + (-t654 * t823 + t731) * t716) * MDP(21) + (-t654 * t824 - t854 + (-t654 * t713 * t716 + t606 * t717) * t832) * MDP(18) + (pkin(1) * t807 - t618 * t680 - t732 + t811) * MDP(10) + (-t654 * t825 + t604 + (-t608 * t717 - t654 * t853) * t832) * MDP(17) + (t787 * t529 + t786 * t527 + (-t878 - t478 * t715 + (t527 * t711 - t529 * t715) * qJD(6)) * t635) * MDP(25) + (-t478 * t746 - t500 * t867 - t527 * t838 - t738 * t896) * MDP(27) + (t500 * t746 + t838 * t896) * MDP(28) + (t477 * t746 + t497 * t635 + t529 * t838 + t737 * t896) * MDP(26) + ((t560 * t715 - t577 * t711) * t500 + t454 * t746 + t576 * t478 + t455 * t867 - g(1) * (-t631 * t711 + t632 * t863) - g(2) * (-t629 * t711 + t630 * t863) - (t698 * t850 + t711 * t717) * t882 + (t711 * t764 - t715 * t763) * t896 + t842 * t527 - t838 * t760 + t738 * t471) * MDP(29) + (-(t560 * t711 + t577 * t715) * t500 - t453 * t746 + t576 * t477 + t455 * t866 - g(1) * (-t631 * t715 - t632 * t864) - g(2) * (-t629 * t715 - t630 * t864) - (-t698 * t855 + t715 * t717) * t882 + (t711 * t763 + t715 * t764) * t896 + t842 * t529 - t838 * t460 + t737 * t471) * MDP(30) + ((-pkin(2) * t713 + t879) * qJDD(1) + ((-qJ(3) * qJD(2) - t592 - t619) * t713 + (-pkin(2) * qJD(2) - t587 + t897) * t717) * qJD(1)) * t833 + (-t536 * qJ(3) - t548 * pkin(2) - t600 * t617 - t587 * t619 - g(1) * (qJ(3) * t632 - t623) - g(2) * (qJ(3) * t630 - t621) - g(3) * t836 - t897 * t592) * MDP(14) + (t655 + t897 * t680 + (-g(3) * t713 + (t600 * t717 + t617 * t713) * qJD(1)) * t708 + t725) * MDP(13) + (t534 * t716 - t608 * t750) * MDP(15) + (t477 * t866 + t529 * t737) * MDP(24) - t654 * MDP(19) * t800 + (-t617 * t800 - t721 - 0.2e1 * t886 + t895) * MDP(12) + (-t820 * t830 + t813) * t880 + MDP(6) * t728 + t678 * MDP(8) + (t458 * t577 - t457 * t576 + t493 * t900 - g(1) * (t631 * t710 + t632 * t900 - t623) - g(2) * (t629 * t710 + t630 * t900 - t621) - g(3) * ((pkin(4) * t853 - t710 * t717) * t708 + t836) + t904 * t533 + t841 * t474 + t843 * t473) * MDP(23); MDP(11) * t728 + (t678 + t776) * MDP(12) + (-t680 ^ 2 - t705 * t862) * MDP(13) + (t592 * t680 - t729 - t886 + t895) * MDP(14) + (-t606 * t680 - t654 * t750 + t604) * MDP(20) + (-t654 ^ 2 * t716 - t608 * t680 - t854) * MDP(21) + (t502 * t746 - t503 * t635 + t747 * t837 + t784 * t838) * MDP(22) + (-t533 * t680 + t889) * MDP(23) + (-t746 * t877 - t635 * t478 + t837 * t527 + (-t711 * t838 + t715 * t779) * t896) * MDP(29) + (-t746 * t497 - t635 * t477 + t837 * t529 + (-t711 * t779 - t715 * t838) * t896) * MDP(30); t608 * t606 * MDP(15) + (-t606 ^ 2 + t608 ^ 2) * MDP(16) + (t534 + t872) * MDP(17) + (-t535 + t871) * MDP(18) + t615 * MDP(19) + (t515 * t654 - t561 * t608 + t722 + t893) * MDP(20) + (g(1) * t586 + g(2) * t783 + g(3) * t628 + t514 * t654 + t561 * t606 + t742) * MDP(21) + ((t502 * t707 - t503 * t881) * pkin(4) + (t473 - t476) * t784 + (t474 - t475) * t747) * MDP(22) + (t473 * t475 - t474 * t476 + (t457 * t881 + t458 * t707 - t533 * t608 + t893) * pkin(4)) * MDP(23) + (t529 * t782 + t878) * MDP(24) + ((t477 - t908) * t715 + (-t478 - t907) * t711) * MDP(25) + (-t875 - t905) * MDP(26) + (t752 + t876) * MDP(27) - t896 * t747 * MDP(28) + (-t475 * t527 + t694 * t478 + t730 * t711 - t715 * t892 + t747 * t760) * MDP(29) + (t460 * t747 - t475 * t529 + t694 * t477 + t711 * t892 + t730 * t715) * MDP(30); (-t747 ^ 2 - t784 ^ 2) * MDP(22) + (t473 * t747 - t474 * t784 + t663 + (-pkin(3) * t816 - g(3)) * t859 + t725 + t894) * MDP(23) + (t752 - t876) * MDP(29) + (-t875 + t905) * MDP(30); t529 * t527 * MDP(24) + (-t527 ^ 2 + t529 ^ 2) * MDP(25) + (t804 + t908) * MDP(26) + (-t788 + t907) * MDP(27) + t500 * MDP(28) + (t460 * t896 - t471 * t529 - g(1) * t537 - g(2) * t903 - g(3) * (-t610 * t711 + t659) + t789) * MDP(29) + (-t760 * t896 + t471 * t527 + g(1) * t538 - g(2) * t902 - g(3) * (-t610 * t715 - t806) - t761) * MDP(30) + (-MDP(26) * t874 - MDP(27) * t529 - MDP(29) * t460 + MDP(30) * t760) * qJD(6);];
tau  = t1;
