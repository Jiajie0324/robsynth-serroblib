% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPR12_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR12_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR12_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR12_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR12_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR12_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:21:57
% EndTime: 2019-03-09 11:22:25
% DurationCPUTime: 16.92s
% Computational Cost: add. (19342->845), mult. (46478->1083), div. (0->0), fcn. (35674->14), ass. (0->395)
t328 = sin(qJ(2));
t323 = sin(pkin(6));
t451 = qJD(1) * t323;
t424 = t328 * t451;
t291 = pkin(2) * t424;
t332 = cos(qJ(2));
t493 = qJ(3) * t332;
t383 = pkin(9) * t328 - t493;
t180 = t383 * t451 + t291;
t423 = t332 * t451;
t287 = pkin(8) * t423;
t324 = cos(pkin(6));
t450 = qJD(1) * t324;
t434 = pkin(1) * t450;
t222 = t328 * t434 + t287;
t183 = pkin(3) * t423 + t222;
t327 = sin(qJ(4));
t331 = cos(qJ(4));
t105 = t331 * t180 + t327 * t183;
t397 = t331 * t424;
t334 = -pkin(2) - pkin(9);
t459 = qJ(5) - t334;
t412 = t331 * t459;
t556 = -qJ(5) * t397 - qJD(4) * t412 - t327 * qJD(5) - t105;
t104 = -t327 * t180 + t331 * t183;
t447 = qJD(4) * t327;
t466 = t327 * t328;
t555 = -t331 * qJD(5) + t447 * t459 - (pkin(4) * t332 - qJ(5) * t466) * t451 - t104;
t322 = sin(pkin(11));
t494 = cos(pkin(11));
t242 = t322 * t331 + t327 * t494;
t176 = t242 * t424;
t231 = t242 * qJD(4);
t458 = t176 + t231;
t474 = t322 * t327;
t175 = -t397 * t494 + t424 * t474;
t414 = t494 * t331;
t229 = -qJD(4) * t414 + t322 * t447;
t457 = t229 + t175;
t289 = t332 * t434;
t535 = qJD(3) - t289;
t495 = t555 * t322 + t494 * t556;
t310 = pkin(4) * t331 + pkin(3);
t446 = qJD(4) * t331;
t455 = pkin(4) * t446 - (-pkin(8) - t310) * t424 + t535;
t440 = qJD(1) * qJD(2);
t419 = t328 * t440;
t394 = t323 * t419;
t437 = qJDD(1) * t332;
t417 = t323 * t437;
t548 = t394 - t417;
t269 = qJD(4) + t424;
t296 = qJD(2) + t450;
t395 = t327 * t423;
t196 = t296 * t331 - t395;
t526 = pkin(3) + pkin(8);
t125 = t296 * t334 + t526 * t424 + t535;
t416 = -qJ(3) * t328 - pkin(1);
t357 = t332 * t334 + t416;
t154 = t357 * t451;
t78 = t331 * t125 - t154 * t327;
t71 = -qJ(5) * t196 + t78;
t68 = pkin(4) * t269 + t71;
t194 = t296 * t327 + t331 * t423;
t79 = t125 * t327 + t154 * t331;
t72 = -qJ(5) * t194 + t79;
t69 = t494 * t72;
t33 = t322 * t68 + t69;
t29 = pkin(10) * t269 + t33;
t326 = sin(qJ(6));
t330 = cos(qJ(6));
t274 = t296 * qJ(3);
t143 = t274 + t183;
t106 = pkin(4) * t194 + qJD(5) + t143;
t119 = t494 * t194 + t196 * t322;
t362 = -t322 * t194 + t196 * t494;
t52 = pkin(5) * t119 - pkin(10) * t362 + t106;
t10 = t29 * t330 + t326 * t52;
t439 = qJDD(1) * t324;
t294 = qJDD(2) + t439;
t108 = -qJD(4) * t395 + t294 * t327 + (qJD(4) * t296 - t548) * t331;
t533 = pkin(4) * t108 + qJDD(5);
t433 = pkin(1) * qJD(2) * t324;
t400 = qJD(1) * t433;
t432 = pkin(1) * t439;
t399 = pkin(8) * t548 - t328 * t432 - t332 * t400;
t272 = t294 * qJ(3);
t536 = -t296 * qJD(3) - t272;
t109 = t399 + t536;
t281 = pkin(3) * t417;
t88 = -pkin(3) * t394 - t109 + t281;
t55 = t88 + t533;
t107 = qJD(4) * t194 - t331 * t294 - t327 * t548;
t66 = -t107 * t322 + t494 * t108;
t67 = -t107 * t494 - t322 * t108;
t16 = pkin(5) * t66 - pkin(10) * t67 + t55;
t418 = t332 * t440;
t438 = qJDD(1) * t328;
t358 = t418 + t438;
t347 = t358 * t323;
t214 = qJDD(4) + t347;
t473 = t323 * t328;
t298 = pkin(8) * t473;
t398 = qJD(2) * t287 + qJDD(1) * t298 + t328 * t400 - t332 * t432;
t379 = qJDD(3) + t398;
t85 = pkin(3) * t347 + t294 * t334 + t379;
t264 = pkin(2) * t394;
t448 = qJD(3) * t328;
t343 = qJD(2) * t383 - t448;
t92 = t264 + (qJD(1) * t343 + qJDD(1) * t357) * t323;
t31 = -qJD(4) * t79 - t327 * t92 + t331 * t85;
t21 = pkin(4) * t214 + qJ(5) * t107 - qJD(5) * t196 + t31;
t364 = -t125 * t446 + t154 * t447 - t327 * t85 - t331 * t92;
t23 = -qJ(5) * t108 - qJD(5) * t194 - t364;
t8 = t322 * t21 + t494 * t23;
t6 = pkin(10) * t214 + t8;
t2 = -qJD(6) * t10 + t330 * t16 - t326 * t6;
t545 = qJD(6) + t119;
t554 = t10 * t545 + t2;
t382 = t29 * t326 - t330 * t52;
t1 = -t382 * qJD(6) + t326 * t16 + t330 * t6;
t553 = t382 * t545 + t1;
t552 = -pkin(10) * t423 + t495;
t551 = -t457 * pkin(5) + pkin(10) * t458 + t455;
t550 = t119 * t362;
t549 = -t78 * t269 - t364;
t333 = cos(qJ(1));
t465 = t327 * t333;
t460 = t332 * t333;
t329 = sin(qJ(1));
t464 = t328 * t329;
t234 = -t324 * t460 + t464;
t484 = t234 * t331;
t547 = t323 * t465 + t484;
t404 = t330 * t545;
t64 = qJDD(6) + t66;
t546 = -t326 * t64 - t404 * t545;
t318 = t323 ^ 2;
t544 = 0.2e1 * t318;
t496 = t322 * t556 - t555 * t494;
t543 = t79 * t269 + t31;
t319 = qJ(4) + pkin(11);
t314 = cos(t319);
t461 = t329 * t332;
t462 = t328 * t333;
t235 = t324 * t462 + t461;
t237 = -t324 * t464 + t460;
t389 = -g(1) * t237 - g(2) * t235;
t435 = g(3) * t473;
t349 = -t389 + t435;
t541 = t349 * t314;
t366 = t194 * t269;
t540 = t107 - t366;
t487 = t196 * t269;
t539 = -t108 + t487;
t524 = pkin(1) * t332;
t425 = -pkin(2) - t524;
t161 = pkin(3) * t473 + t298 + (-pkin(9) + t425) * t324;
t471 = t323 * t332;
t454 = pkin(2) * t471 + qJ(3) * t473;
t178 = (-pkin(9) * t332 - pkin(1)) * t323 - t454;
t101 = t327 * t161 + t331 * t178;
t316 = t327 * pkin(4);
t325 = -qJ(5) - pkin(9);
t538 = t234 * t325 + t235 * t316;
t236 = t324 * t461 + t462;
t537 = t236 * t325 + t237 * t316;
t525 = pkin(1) * t328;
t304 = t324 * t525;
t239 = pkin(8) * t471 + t304;
t224 = qJD(2) * t239;
t375 = -pkin(2) * t332 + t416;
t188 = t375 * t451;
t534 = t188 * t424 + qJDD(3);
t532 = -t119 * t457 + t242 * t66;
t531 = t143 * t269 + t214 * t334;
t313 = sin(t319);
t470 = t323 * t333;
t370 = -t234 * t313 + t314 * t470;
t530 = t235 * t330 + t326 * t370;
t529 = -t235 * t326 + t330 * t370;
t243 = t414 - t474;
t528 = t67 * t243 - t362 * t458;
t510 = t322 * t72;
t32 = t494 * t68 - t510;
t373 = g(1) * t236 + g(2) * t234 - g(3) * t471;
t7 = t494 * t21 - t322 * t23;
t527 = t242 * t8 + t243 * t7 - t32 * t458 - t33 * t457 - t373;
t523 = pkin(2) * t294;
t232 = t324 * t327 + t331 * t471;
t521 = pkin(4) * t232;
t518 = g(3) * t232;
t517 = g(3) * t323;
t95 = -t330 * t269 + t326 * t362;
t97 = t269 * t326 + t330 * t362;
t516 = t97 * t95;
t413 = -t330 * t214 + t326 * t67;
t38 = qJD(6) * t97 + t413;
t444 = qJD(6) * t330;
t515 = -t326 * t38 - t95 * t444;
t422 = qJD(2) * t473;
t170 = qJD(4) * t232 - t327 * t422;
t427 = t327 * t471;
t233 = t324 * t331 - t427;
t449 = qJD(2) * t332;
t421 = t323 * t449;
t286 = pkin(2) * t422;
t146 = t323 * t343 + t286;
t184 = (t471 * t526 + t304) * qJD(2);
t57 = -qJD(4) * t101 - t327 * t146 + t331 * t184;
t41 = pkin(4) * t421 + qJ(5) * t170 - qJD(5) * t233 + t57;
t171 = -qJD(4) * t427 + t324 * t446 - t331 * t422;
t56 = t331 * t146 + t161 * t446 - t178 * t447 + t327 * t184;
t45 = -qJ(5) * t171 - qJD(5) * t232 + t56;
t15 = t322 * t41 + t494 * t45;
t309 = qJ(3) + t316;
t142 = pkin(5) * t242 - pkin(10) * t243 + t309;
t253 = t459 * t327;
t164 = -t253 * t494 - t322 * t412;
t89 = t142 * t330 - t164 * t326;
t514 = qJD(6) * t89 + t551 * t326 + t330 * t552;
t90 = t142 * t326 + t164 * t330;
t513 = -qJD(6) * t90 - t326 * t552 + t551 * t330;
t100 = t331 * t161 - t178 * t327;
t436 = pkin(4) * t473;
t76 = -qJ(5) * t233 + t100 + t436;
t81 = -qJ(5) * t232 + t101;
t47 = t322 * t76 + t494 * t81;
t512 = t362 * t95;
t508 = t326 * t95;
t507 = t326 * t97;
t506 = t330 * t95;
t505 = t330 * t97;
t445 = qJD(6) * t326;
t37 = -t326 * t214 - t269 * t444 - t330 * t67 + t362 * t445;
t504 = t37 * t326;
t503 = t38 * t330;
t502 = t64 * t242;
t498 = t97 * t362;
t497 = pkin(5) * t423 + t496;
t492 = t362 ^ 2;
t491 = t362 * t269;
t490 = t119 ^ 2;
t489 = t119 * t269;
t488 = t196 * t194;
t485 = t234 * t327;
t481 = t236 * t327;
t480 = t236 * t331;
t479 = t243 * t326;
t478 = t243 * t330;
t477 = t313 * t326;
t476 = t313 * t330;
t475 = t318 * qJD(1) ^ 2;
t472 = t323 * t329;
t469 = t325 * t332;
t468 = t326 * t328;
t467 = t327 * t214;
t463 = t328 * t330;
t456 = t547 * pkin(4);
t453 = t333 * pkin(1) + pkin(8) * t472;
t320 = t328 ^ 2;
t321 = t332 ^ 2;
t452 = t320 - t321;
t401 = t526 * t473;
t443 = qJD(1) * t401 + t535;
t221 = pkin(8) * t424 - t289;
t442 = qJD(3) + t221;
t431 = t332 * t475;
t430 = t323 * t468;
t429 = t327 * t472;
t276 = t323 * t463;
t426 = t327 * t436 + t454;
t204 = -t324 * qJ(3) - t239;
t420 = pkin(1) * t544;
t415 = -pkin(1) * t329 + pkin(8) * t470;
t225 = t234 * pkin(2);
t411 = qJ(3) * t235 - t225;
t227 = t236 * pkin(2);
t410 = qJ(3) * t237 - t227;
t131 = -t175 * t326 + t296 * t330;
t409 = t229 * t326 - t131;
t132 = t175 * t330 + t296 * t326;
t408 = -t229 * t330 - t132;
t133 = t176 * t326 - t330 * t423;
t407 = t231 * t326 + t133;
t134 = t176 * t330 + t326 * t423;
t406 = t231 * t330 + t134;
t405 = -t331 * t470 + t485;
t403 = qJD(1) * (qJD(2) - t296);
t402 = t294 + t439;
t177 = pkin(3) * t471 - t204;
t396 = t269 * t423;
t393 = t328 * t418;
t392 = pkin(5) * t313 - pkin(10) * t314;
t148 = -t236 * t314 + t313 * t472;
t369 = t234 * t314 + t313 * t470;
t391 = g(1) * t369 + g(2) * t148;
t390 = -g(1) * t234 + g(2) * t236;
t388 = g(1) * t235 - g(2) * t237;
t387 = g(1) * t333 + g(2) * t329;
t386 = t243 * t214 - t269 * t458;
t43 = pkin(10) * t473 + t47;
t128 = t177 + t521;
t135 = t232 * t494 + t233 * t322;
t136 = -t322 * t232 + t233 * t494;
t62 = pkin(5) * t135 - pkin(10) * t136 + t128;
t25 = t326 * t62 + t330 * t43;
t24 = -t326 * t43 + t330 * t62;
t381 = t506 - t507;
t380 = t506 + t507;
t205 = -pkin(1) * t323 - t454;
t378 = qJD(2) * (-qJD(1) * t205 - t188);
t377 = qJD(2) * (t296 + t450);
t290 = t332 * t433;
t223 = -pkin(8) * t422 + t290;
t376 = t330 * t64 + (-t119 * t326 - t445) * t545;
t372 = t237 * pkin(2) + qJ(3) * t236 + t453;
t371 = -t330 * t37 - t445 * t97;
t114 = t136 * t330 + t430;
t14 = -t322 * t45 + t41 * t494;
t46 = -t322 * t81 + t494 * t76;
t368 = t269 ^ 2;
t365 = -qJ(3) * t449 - t448;
t28 = -t269 * pkin(5) - t32;
t307 = pkin(4) * t322 + pkin(10);
t363 = t28 * t545 - t307 * t64;
t112 = t264 + (qJD(1) * t365 + qJDD(1) * t375) * t323;
t185 = t323 * t365 + t286;
t360 = qJD(1) * t185 + qJDD(1) * t205 + t112;
t359 = -t242 * t214 + t269 * t457;
t200 = -t313 * t324 - t314 * t471;
t356 = g(1) * t148 - g(2) * t369 - g(3) * t200;
t149 = t236 * t313 + t314 * t472;
t201 = -t313 * t471 + t314 * t324;
t355 = -g(1) * t149 + g(2) * t370 - g(3) * t201;
t353 = -t235 * pkin(2) - qJ(3) * t234 + t415;
t352 = t224 * t296 - t388;
t351 = t243 * t444 - t407;
t350 = -t243 * t445 - t406;
t312 = t324 * qJD(3);
t160 = -qJD(2) * t401 + t290 + t312;
t346 = t389 - t399;
t345 = pkin(4) * t481 - t237 * t325 + t310 * t472 + t372;
t344 = t373 - t398;
t157 = (t332 * t403 + t438) * t323;
t342 = -pkin(4) * t485 + t235 * t325 + t310 * t470 + t353;
t102 = pkin(4) * t171 + t160;
t340 = t346 - t536;
t5 = -pkin(5) * t214 - t7;
t339 = qJD(6) * t307 * t545 - t356 + t5;
t338 = t1 * t330 - t2 * t326 + (-t10 * t326 + t330 * t382) * qJD(6);
t337 = t222 * t296 + t344;
t336 = -qJD(4) * t269 * t334 - t349 + t88;
t308 = -pkin(4) * t494 - pkin(5);
t256 = t328 * t431;
t252 = t294 * t324;
t238 = t324 * t524 - t298;
t230 = t452 * t475;
t220 = -qJ(3) * t423 + t291;
t212 = t324 * t425 + t298;
t210 = pkin(4) * t480;
t203 = (qJDD(1) * t321 - 0.2e1 * t393) * t318;
t202 = (qJDD(1) * t320 + 0.2e1 * t393) * t318;
t192 = t331 * t214;
t189 = -t223 - t312;
t179 = -t274 - t222;
t174 = -pkin(2) * t296 + t442;
t173 = t331 * t472 + t481;
t172 = -t429 + t480;
t163 = -t253 * t322 + t412 * t494;
t158 = (t328 * t437 - t440 * t452) * t544;
t156 = (t328 * t403 - t437) * t323;
t129 = (t214 * t328 + t269 * t449) * t323;
t123 = t379 - t523;
t117 = (t328 * t402 + t332 * t377) * t323;
t116 = (t328 * t377 - t332 * t402) * t323;
t113 = t136 * t326 - t276;
t111 = t149 * t330 + t237 * t326;
t110 = -t149 * t326 + t237 * t330;
t99 = -t170 * t494 - t322 * t171;
t98 = -t170 * t322 + t171 * t494;
t60 = pkin(4) * t196 + pkin(5) * t362 + pkin(10) * t119;
t59 = qJD(6) * t114 + t326 * t99 - t330 * t421;
t58 = -qJD(6) * t276 + t136 * t445 - t326 * t421 - t330 * t99;
t42 = -pkin(5) * t473 - t46;
t39 = pkin(5) * t98 - pkin(10) * t99 + t102;
t35 = t494 * t71 - t510;
t34 = t322 * t71 + t69;
t18 = t326 * t60 + t330 * t35;
t17 = -t326 * t35 + t330 * t60;
t12 = pkin(10) * t421 + t15;
t11 = -pkin(5) * t421 - t14;
t4 = -qJD(6) * t25 - t326 * t12 + t330 * t39;
t3 = qJD(6) * t24 + t330 * t12 + t326 * t39;
t9 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t329 - g(2) * t333, t387, 0, 0, t202, t158, t117, t203, -t116, t252, -t398 * t324 + t238 * t294 + (-t419 + t437) * t420 - t352, -t223 * t296 - t239 * t294 + t324 * t399 - t358 * t420 + t390 ((qJD(2) * t221 + qJDD(1) * t239 - t399 + (-qJD(2) * t238 + t223) * qJD(1)) * t332 + (-qJD(2) * t222 - qJDD(1) * t238 + t398) * t328 - t387) * t323, t318 * qJDD(1) * pkin(1) ^ 2 - g(1) * t415 - g(2) * t453 + t221 * t224 + t222 * t223 - t238 * t398 - t239 * t399, t252, -t117, t116, t202, t158, t203 ((qJD(2) * t174 - qJDD(1) * t204 - t109 + (qJD(2) * t212 - t189) * qJD(1)) * t332 + (qJD(2) * t179 + qJDD(1) * t212 + t123 + (qJD(2) * t204 + t224) * qJD(1)) * t328 - t387) * t323, t123 * t324 + t212 * t294 + (t328 * t378 + t332 * t360) * t323 + t352, -t109 * t324 - t189 * t296 - t204 * t294 + (-t328 * t360 + t332 * t378) * t323 - t390, -g(1) * t353 - g(2) * t372 + t109 * t204 + t112 * t205 + t123 * t212 + t174 * t224 + t179 * t189 + t188 * t185, -t107 * t233 - t170 * t196, t107 * t232 - t108 * t233 + t170 * t194 - t171 * t196, -t170 * t269 + t214 * t233 + (-t107 * t328 + t196 * t449) * t323, t108 * t232 + t171 * t194, -t171 * t269 - t214 * t232 + (-t108 * t328 - t194 * t449) * t323, t129, t57 * t269 + t100 * t214 + t160 * t194 + t177 * t108 + t88 * t232 + t143 * t171 + g(1) * t405 - g(2) * t173 + (t31 * t328 + t449 * t78) * t323, g(1) * t484 - g(2) * t172 - t101 * t214 - t177 * t107 - t143 * t170 + t160 * t196 + t88 * t233 - t56 * t269 + (g(1) * t465 + t328 * t364 - t449 * t79) * t323, t100 * t107 - t101 * t108 + t170 * t78 - t171 * t79 - t194 * t56 - t196 * t57 + t232 * t364 - t233 * t31 + t388, -t364 * t101 + t79 * t56 + t31 * t100 + t78 * t57 + t88 * t177 + t143 * t160 - g(1) * (pkin(3) * t470 - pkin(9) * t235 + t353) - g(2) * (pkin(3) * t472 + pkin(9) * t237 + t372) t136 * t67 + t362 * t99, -t119 * t99 - t135 * t67 - t136 * t66 - t362 * t98, t136 * t214 + t269 * t99 + (t328 * t67 + t362 * t449) * t323, t119 * t98 + t135 * t66, -t135 * t214 - t269 * t98 + (-t119 * t449 - t328 * t66) * t323, t129, -g(1) * t370 - g(2) * t149 + t102 * t119 + t106 * t98 + t128 * t66 + t135 * t55 + t14 * t269 + t214 * t46 + (t32 * t449 + t328 * t7) * t323, t102 * t362 + t106 * t99 + t128 * t67 + t136 * t55 - t15 * t269 - t214 * t47 + (-t328 * t8 - t33 * t449) * t323 + t391, -t119 * t15 - t135 * t8 - t136 * t7 - t14 * t362 - t32 * t99 - t33 * t98 - t46 * t67 - t47 * t66 + t388, -g(1) * t342 - g(2) * t345 + t106 * t102 + t55 * t128 + t32 * t14 + t33 * t15 + t7 * t46 + t8 * t47, -t114 * t37 - t58 * t97, t113 * t37 - t114 * t38 + t58 * t95 - t59 * t97, t114 * t64 - t135 * t37 - t545 * t58 + t97 * t98, t113 * t38 + t59 * t95, -t113 * t64 - t135 * t38 - t545 * t59 - t95 * t98, t135 * t64 + t545 * t98, -g(1) * t529 - g(2) * t111 + t11 * t95 + t5 * t113 + t2 * t135 + t24 * t64 + t28 * t59 + t42 * t38 - t382 * t98 + t4 * t545, g(1) * t530 - g(2) * t110 - t1 * t135 - t10 * t98 + t11 * t97 + t5 * t114 - t25 * t64 - t28 * t58 - t3 * t545 - t42 * t37, -t1 * t113 - t10 * t59 - t114 * t2 + t24 * t37 - t25 * t38 - t3 * t95 - t382 * t58 - t4 * t97 - t391, t1 * t25 + t10 * t3 + t2 * t24 - t382 * t4 + t5 * t42 + t28 * t11 - g(1) * (pkin(5) * t370 + pkin(10) * t369 + t342) - g(2) * (pkin(5) * t149 + pkin(10) * t148 + t345); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, t230, t157, t256, -t156, t294, t475 * t525 + t337, pkin(1) * t431 - t221 * t296 - t346 + t435, 0, 0, t294, -t157, t156, -t256, t230, t256 ((-pkin(2) * t328 + t493) * qJDD(1) + ((-qJ(3) * qJD(2) - t179 - t222) * t328 + (-pkin(2) * qJD(2) - t174 + t442) * t332) * qJD(1)) * t323, -t220 * t423 - t337 - 0.2e1 * t523 + t534, t272 + t442 * t296 + (-g(3) * t328 + (t188 * t332 + t220 * t328) * qJD(1)) * t323 + t340, -t123 * pkin(2) - g(1) * t410 - g(2) * t411 - g(3) * t454 - t109 * qJ(3) - t174 * t222 - t179 * t442 - t188 * t220, -t331 * t107 - t327 * t487 (-t108 - t487) * t331 + (t107 + t366) * t327, -t269 * t447 + t192 + (-t196 * t332 - t269 * t466) * t451, t108 * t327 + t331 * t366, -t269 * t446 - t467 + (-t269 * t328 * t331 + t194 * t332) * t451, -t396, qJ(3) * t108 - t104 * t269 + t443 * t194 + t336 * t327 + t331 * t531 - t78 * t423, -qJ(3) * t107 + t105 * t269 + t443 * t196 - t327 * t531 + t336 * t331 + t79 * t423, t104 * t196 + t105 * t194 + (-t79 * t424 + t107 * t334 - t31 + (-t194 * t334 - t79) * qJD(4)) * t331 + (t78 * t424 - t108 * t334 + t364 + (t196 * t334 + t78) * qJD(4)) * t327 + t373, t88 * qJ(3) - t79 * t105 - t78 * t104 - g(1) * (-pkin(9) * t236 + t410) - g(2) * (-pkin(9) * t234 + t411) - g(3) * (pkin(9) * t471 + t454) + t443 * t143 + (-t364 * t327 + t31 * t331 + (-t327 * t78 + t331 * t79) * qJD(4)) * t334, t528, t119 * t458 - t242 * t67 - t243 * t66 + t362 * t457, -t362 * t423 + t386, t532, t119 * t423 + t359, -t396, -t106 * t457 + t119 * t455 - t163 * t214 + t242 * t55 - t269 * t496 + t309 * t66 - t313 * t349 - t32 * t423, -t106 * t458 - t164 * t214 + t243 * t55 - t269 * t495 + t309 * t67 + t33 * t423 + t362 * t455 - t541, -t119 * t495 + t163 * t67 - t164 * t66 + t362 * t496 - t527, t8 * t164 - t7 * t163 + t55 * t309 - g(1) * (t410 + t537) - g(2) * (t411 + t538) - g(3) * (-t323 * t469 + t426) + t495 * t33 - t496 * t32 + t455 * t106, t350 * t97 - t37 * t478, t133 * t97 + t134 * t95 + t380 * t231 + (t504 - t503 + (-t505 + t508) * qJD(6)) * t243, -t242 * t37 + t350 * t545 - t457 * t97 + t478 * t64, t351 * t95 + t38 * t479, -t242 * t38 - t351 * t545 + t457 * t95 - t479 * t64, -t457 * t545 + t502, t89 * t64 + t2 * t242 + t163 * t38 + t5 * t479 - g(1) * (-t236 * t326 + t237 * t476) - g(2) * (-t234 * t326 + t235 * t476) + t497 * t95 + t457 * t382 - (t313 * t463 + t326 * t332) * t517 + t513 * t545 + t351 * t28, -t90 * t64 - t1 * t242 - t163 * t37 + t5 * t478 - g(1) * (-t236 * t330 - t237 * t477) - g(2) * (-t234 * t330 - t235 * t477) + t497 * t97 - (-t313 * t468 + t330 * t332) * t517 - t514 * t545 + t457 * t10 + t350 * t28, t37 * t89 - t38 * t90 - t513 * t97 - t514 * t95 - t406 * t382 + t407 * t10 + t541 + (-t1 * t326 - t2 * t330 + (-t10 * t330 - t326 * t382) * qJD(6)) * t243, t1 * t90 + t2 * t89 + t5 * t163 - g(1) * (-t227 + t537) - g(2) * (-t225 + t538) - g(3) * t426 - t513 * t382 - (t328 * t392 - t469) * t517 + t497 * t28 + t514 * t10 + t389 * (qJ(3) + t392); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157, t256 + t294, -t296 ^ 2 - t320 * t475, t179 * t296 - t344 - t523 + t534, 0, 0, 0, 0, 0, 0, -t296 * t194 - t327 * t368 + t192, -t196 * t296 - t331 * t368 - t467, t327 * t539 + t331 * t540, -t143 * t296 + t327 * t549 + t543 * t331 - t373, 0, 0, 0, 0, 0, 0, -t119 * t296 + t386, -t296 * t362 + t359, -t528 - t532, -t106 * t296 + t527, 0, 0, 0, 0, 0, 0, -t326 * t502 - t243 * t38 + t458 * t95 + (-t242 * t444 + t409) * t545, -t330 * t502 + t243 * t37 + t458 * t97 + (t242 * t445 - t408) * t545, t131 * t97 + t132 * t95 + t381 * t229 + (-t504 - t503 + (t505 + t508) * qJD(6)) * t242, t10 * t408 + t242 * t338 - t243 * t5 + t28 * t458 - t382 * t409 - t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t488, -t194 ^ 2 + t196 ^ 2, -t540, -t488, t539, t214, -g(1) * t172 - g(2) * t547 - t143 * t196 + t518 + t543, g(1) * t173 + g(2) * t405 + g(3) * t233 + t143 * t194 - t549, 0, 0, t550, -t490 + t492, t67 + t489, -t550, -t66 + t491, t214, -t106 * t362 + t34 * t269 + (-t119 * t196 + t214 * t494) * pkin(4) + t356 + t7, t106 * t119 + t269 * t35 + (-t196 * t362 - t214 * t322) * pkin(4) - t355 - t8 (-t322 * t66 - t494 * t67) * pkin(4) + (t33 - t34) * t362 + (t35 - t32) * t119, -t33 * t35 + t32 * t34 - g(1) * t210 - g(2) * t456 + (g(1) * t429 - t106 * t196 + t8 * t322 + t494 * t7 + t518) * pkin(4), t404 * t97 - t504, -t119 * t380 + t371 + t515, -t498 - t546, t508 * t545 - t503, t376 + t512, -t545 * t362, -t17 * t545 + t308 * t38 + t326 * t363 - t330 * t339 - t34 * t95 + t362 * t382, t10 * t362 + t18 * t545 - t308 * t37 + t326 * t339 + t330 * t363 - t34 * t97, t17 * t97 + t18 * t95 + (t119 * t382 - t307 * t38 + t1 + (t307 * t97 + t382) * qJD(6)) * t330 + (-t10 * t119 - t307 * t37 - t2 + (t307 * t95 - t10) * qJD(6)) * t326 + t355, t5 * t308 - t10 * t18 + t382 * t17 - t28 * t34 - g(1) * (-pkin(4) * t429 - pkin(5) * t148 + pkin(10) * t149 + t210) - g(2) * (pkin(5) * t369 - pkin(10) * t370 + t456) - g(3) * (t200 * pkin(5) + t201 * pkin(10) - t521) + t338 * t307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 + t491, t67 - t489, -t490 - t492, t362 * t32 + t119 * t33 + t281 + (-pkin(3) * t440 - g(3)) * t473 + t340 + t533, 0, 0, 0, 0, 0, 0, t376 - t512, -t498 + t546, -t119 * t381 - t371 + t515, -t362 * t28 + t326 * t553 + t330 * t554 - t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t516, -t95 ^ 2 + t97 ^ 2, t545 * t95 - t37, -t516, -t413 + (-qJD(6) + t545) * t97, t64, -t28 * t97 - g(1) * t110 - g(2) * t530 - g(3) * (-t201 * t326 + t276) + t554, t28 * t95 + g(1) * t111 - g(2) * t529 - g(3) * (-t201 * t330 - t430) - t553, 0, 0;];
tau_reg  = t9;
