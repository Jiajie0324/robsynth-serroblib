% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 16:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR12_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR12_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR12_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 16:19:31
% EndTime: 2019-05-06 16:20:25
% DurationCPUTime: 48.53s
% Computational Cost: add. (275044->939), mult. (635110->1443), div. (0->0), fcn. (480374->12), ass. (0->679)
t1045 = sin(qJ(1));
t1049 = cos(qJ(1));
t1039 = sin(pkin(6));
t1041 = cos(pkin(6));
t1048 = cos(qJ(2));
t1044 = sin(qJ(2));
t1029 = qJDD(1) * t1041 + qJDD(2);
t1036 = t1039 ^ 2;
t1050 = qJD(1) ^ 2;
t1144 = t1044 * t1050;
t1130 = t1036 * t1144;
t1122 = t1048 * t1130;
t995 = t1029 - t1122;
t1169 = t1044 * t995;
t1030 = t1041 * qJD(1) + qJD(2);
t1026 = t1030 ^ 2;
t1149 = t1036 * t1050;
t1211 = t1044 ^ 2;
t1027 = t1211 * t1149;
t975 = -t1027 - t1026;
t1085 = -t1048 * t975 + t1169;
t1147 = t1039 * t1048;
t1131 = qJD(1) * t1147;
t1006 = t1030 * t1131;
t996 = (qJD(1) * qJD(2) * t1048 + qJDD(1) * t1044) * t1039;
t1219 = t1006 + t996;
t882 = t1039 * t1219 + t1041 * t1085;
t1159 = t1048 * t995;
t940 = t1044 * t975 + t1159;
t821 = t1045 * t940 + t1049 * t882;
t1254 = pkin(7) * t821;
t824 = t1045 * t882 - t1049 * t940;
t1253 = pkin(7) * t824;
t1037 = t1048 ^ 2;
t1028 = t1037 * t1149;
t1001 = -t1028 - t1026;
t994 = t1029 + t1122;
t1160 = t1048 * t994;
t1082 = t1001 * t1044 + t1160;
t1148 = t1039 * t1044;
t1132 = qJD(1) * t1148;
t1023 = qJD(2) * t1132;
t1155 = qJD(1) * t1044;
t1133 = t1030 * t1155;
t1143 = qJDD(1) * t1048;
t962 = -t1023 + (-t1133 + t1143) * t1039;
t896 = t1039 * t962 + t1041 * t1082;
t1170 = t1044 * t994;
t951 = t1001 * t1048 - t1170;
t832 = t1045 * t951 + t1049 * t896;
t1252 = pkin(7) * t832;
t835 = t1045 * t896 - t1049 * t951;
t1251 = pkin(7) * t835;
t890 = t1039 * t1082 - t1041 * t962;
t1250 = pkin(8) * (t1039 * t890 + t1041 * t896);
t1182 = t1041 * t1219;
t880 = t1039 * t1085 - t1182;
t1249 = pkin(8) * (t1039 * t880 + t1041 * t882);
t1248 = pkin(1) * t880;
t1247 = pkin(1) * t882;
t1246 = pkin(1) * t890;
t1245 = pkin(1) * t896;
t1000 = t1028 - t1026;
t1083 = t1000 * t1044 + t1159;
t961 = -t1023 + (t1133 + t1143) * t1039;
t894 = -t1039 * t961 + t1041 * t1083;
t949 = t1000 * t1048 - t1169;
t1244 = t1045 * t894 - t1049 * t949;
t999 = -t1027 + t1026;
t1084 = t1048 * t999 + t1170;
t960 = -t1006 + t996;
t892 = -t1039 * t960 + t1041 * t1084;
t948 = t1044 * t999 - t1160;
t1243 = t1045 * t892 + t1049 * t948;
t1242 = t1045 * t949 + t1049 * t894;
t1241 = -t1045 * t948 + t1049 * t892;
t1238 = pkin(8) * t940;
t1237 = pkin(8) * t951;
t1038 = sin(pkin(11));
t1040 = cos(pkin(11));
t1043 = sin(qJ(4));
t1047 = cos(qJ(4));
t982 = -t1043 * t1030 - t1047 * t1131;
t983 = t1030 * t1047 - t1043 * t1131;
t937 = t1038 * t983 - t1040 * t982;
t939 = t1038 * t982 + t1040 * t983;
t864 = t939 * t937;
t988 = qJDD(4) + t996;
t1221 = -t864 + t988;
t1228 = t1038 * t1221;
t1227 = t1040 * t1221;
t1042 = sin(qJ(6));
t997 = t1039 * t1143 - t1023;
t1124 = t1043 * t1029 + t1047 * t997;
t922 = -qJD(4) * t983 - t1124;
t923 = t982 * qJD(4) + t1047 * t1029 - t1043 * t997;
t1127 = t1038 * t923 - t1040 * t922;
t1116 = qJDD(6) + t1127;
t1019 = qJD(4) + t1132;
t1046 = cos(qJ(6));
t909 = -t1046 * t1019 + t1042 * t939;
t911 = t1019 * t1042 + t1046 * t939;
t831 = t911 * t909;
t1218 = t1116 - t831;
t1226 = t1042 * t1218;
t945 = t982 * t983;
t1220 = t945 + t988;
t1225 = t1043 * t1220;
t1224 = t1046 * t1218;
t1223 = t1047 * t1220;
t1194 = t1019 * t939;
t799 = t1127 + t1194;
t1222 = qJ(3) * t1219;
t850 = t1038 * t922 + t1040 * t923;
t776 = -t909 * qJD(6) + t1042 * t988 + t1046 * t850;
t934 = qJD(6) + t937;
t848 = t934 * t909;
t739 = -t848 + t776;
t1195 = t1019 * t937;
t1217 = -t850 + t1195;
t1193 = t1019 * t982;
t888 = -t923 + t1193;
t1157 = qJD(1) * t1030;
t1216 = t1036 * (-t1041 * t1050 + t1157);
t1204 = pkin(2) * t1048;
t1115 = -qJ(3) * t1044 - t1204;
t1156 = qJD(1) * t1039;
t992 = t1115 * t1156;
t1215 = t992 * t1132 + qJDD(3);
t1020 = -0.2e1 * qJD(3) * t1132;
t1123 = t1030 * t1132;
t1004 = pkin(2) * t1123;
t1200 = t1041 * g(3);
t1129 = -t1004 + t1200;
t1197 = qJ(3) * t1048;
t1208 = -pkin(2) - pkin(9);
t1021 = g(1) * t1045 - t1049 * g(2);
t1202 = pkin(8) * t1039;
t990 = qJDD(1) * pkin(1) + t1050 * t1202 + t1021;
t993 = pkin(3) * t1132 - pkin(9) * t1030;
t814 = -pkin(3) * t1028 - t996 * qJ(3) + t1020 + t1208 * t997 + (-t990 + (-t1030 * t1197 - t1044 * t993) * qJD(1)) * t1039 - t1129;
t1145 = t1041 * t1048;
t1022 = g(1) * t1049 + g(2) * t1045;
t991 = -pkin(1) * t1050 + qJDD(1) * t1202 - t1022;
t1125 = t1044 * t991 - t990 * t1145;
t1192 = t1026 * qJ(3);
t817 = t996 * pkin(3) - t1192 + t1208 * t1029 + (-pkin(9) * t1130 + (-pkin(3) * t1157 + g(3)) * t1039) * t1048 + t1125 + t1215;
t746 = t1043 * t814 - t1047 * t817;
t1052 = pkin(4) * t1220 + qJ(5) * t888 - t746;
t747 = t1043 * t817 + t1047 * t814;
t955 = pkin(4) * t1019 - qJ(5) * t983;
t980 = t982 ^ 2;
t703 = -pkin(4) * t980 + qJ(5) * t922 - t1019 * t955 + t747;
t621 = -0.2e1 * qJD(5) * t937 + t1038 * t1052 + t1040 * t703;
t1126 = t1042 * t850 - t1046 * t988;
t736 = (qJD(6) - t934) * t911 + t1126;
t1214 = t1039 * t1083 + t1041 * t961;
t1213 = t1039 * t1084 + t1041 * t960;
t907 = t909 ^ 2;
t908 = t911 ^ 2;
t933 = t934 ^ 2;
t935 = t937 ^ 2;
t936 = t939 ^ 2;
t981 = t983 ^ 2;
t1212 = t1019 ^ 2;
t1210 = 0.2e1 * qJD(3);
t1209 = 0.2e1 * qJD(5);
t1003 = -t1027 - t1028;
t1086 = t1044 * t961 - t1048 * t960;
t873 = -t1039 * t1003 + t1041 * t1086;
t901 = t1044 * t960 + t1048 * t961;
t806 = t1045 * t901 + t1049 * t873;
t1207 = pkin(7) * t806;
t1206 = t997 * pkin(2);
t1205 = pkin(2) * t1044;
t1203 = pkin(5) * t1038;
t1201 = pkin(8) * t1041;
t858 = pkin(5) * t937 - pkin(10) * t939;
t612 = -pkin(5) * t1212 + pkin(10) * t988 - t858 * t937 + t621;
t1146 = t1041 * t1044;
t1117 = -g(3) * t1148 + t1146 * t990;
t1055 = (t1156 * t992 + t991) * t1048 - t1026 * pkin(2) + t1117;
t1191 = t1029 * qJ(3);
t813 = t1191 - pkin(9) * t1028 + t997 * pkin(3) + (t1210 + t993) * t1030 + t1055;
t752 = -t922 * pkin(4) - t980 * qJ(5) + t983 * t955 + qJDD(5) + t813;
t663 = pkin(5) * t799 + t1217 * pkin(10) + t752;
t578 = t1042 * t663 + t1046 * t612;
t1198 = pkin(1) * t873 + t901 * t1202;
t1190 = t1038 * t752;
t845 = t864 + t988;
t1189 = t1038 * t845;
t1184 = t1040 * t752;
t1183 = t1040 * t845;
t1128 = t1038 * t703 - t1040 * t1052;
t611 = -t1212 * pkin(10) - t988 * pkin(5) + (t1209 + t858) * t939 + t1128;
t1178 = t1042 * t611;
t761 = t1116 + t831;
t1177 = t1042 * t761;
t1176 = t1042 * t934;
t620 = t1209 * t939 + t1128;
t569 = t1038 * t621 - t1040 * t620;
t1175 = t1043 * t569;
t1174 = t1043 * t813;
t914 = -t945 + t988;
t1173 = t1043 * t914;
t1172 = t1044 * t962;
t964 = t1039 * t990 + t1200;
t1171 = t1044 * t964;
t1168 = t1046 * t611;
t1167 = t1046 * t761;
t1166 = t1046 * t934;
t1165 = t1047 * t569;
t1164 = t1047 * t813;
t1163 = t1047 * t914;
t1162 = t1048 * t962;
t1161 = t1048 * t964;
t1154 = t1019 * t1038;
t1153 = t1019 * t1040;
t1152 = t1019 * t1043;
t1151 = t1019 * t1047;
t1150 = t1029 * t1039;
t1142 = t1038 * t831;
t1141 = t1040 * t831;
t1140 = t1044 * t864;
t1139 = t1044 * t945;
t1138 = t1048 * t864;
t1137 = t1048 * t945;
t1136 = -pkin(5) * t1040 - pkin(4);
t871 = t1041 * t1003 + t1039 * t1086;
t1135 = -pkin(1) * t871 + t901 * t1201;
t1134 = t1030 * t1156;
t570 = t1038 * t620 + t1040 * t621;
t577 = t1042 * t612 - t1046 * t663;
t537 = t1042 * t577 + t1046 * t578;
t967 = -t1021 * t1045 - t1049 * t1022;
t1015 = qJDD(1) * t1049 - t1045 * t1050;
t1120 = -pkin(7) * t1015 - g(3) * t1045;
t1119 = -t1171 - t1238;
t1118 = t1161 + t1237;
t536 = t1042 * t578 - t1046 * t577;
t664 = t1043 * t747 - t1047 * t746;
t665 = t1043 * t746 + t1047 * t747;
t525 = t1038 * t537 - t1040 * t611;
t526 = t1038 * t611 + t1040 * t537;
t500 = t1043 * t526 + t1047 * t525;
t1114 = t1044 * t536 - t1048 * t500;
t534 = t1043 * t570 + t1165;
t1113 = t1044 * t752 - t1048 * t534;
t740 = -t848 - t776;
t660 = -t1042 * t740 - t1046 * t736;
t781 = t907 + t908;
t629 = t1038 * t660 + t1040 * t781;
t630 = -t1038 * t781 + t1040 * t660;
t580 = t1043 * t630 + t1047 * t629;
t658 = -t1042 * t736 + t1046 * t740;
t1112 = t1044 * t658 - t1048 * t580;
t737 = (-qJD(6) - t934) * t911 - t1126;
t659 = -t1042 * t739 + t1046 * t737;
t829 = -t908 + t907;
t635 = t1038 * t659 + t1040 * t829;
t636 = -t1038 * t829 + t1040 * t659;
t586 = -t1043 * t636 - t1047 * t635;
t657 = t1042 * t737 + t1046 * t739;
t1111 = t1044 * t657 + t1048 * t586;
t790 = -t933 - t907;
t698 = t1046 * t790 - t1226;
t638 = t1038 * t698 + t1040 * t737;
t639 = -t1038 * t737 + t1040 * t698;
t593 = t1043 * t639 + t1047 * t638;
t697 = t1042 * t790 + t1224;
t1110 = t1044 * t697 - t1048 * t593;
t811 = -t908 - t933;
t705 = -t1042 * t811 - t1167;
t640 = t1038 * t705 - t1040 * t739;
t641 = t1038 * t739 + t1040 * t705;
t595 = t1043 * t641 + t1047 * t640;
t704 = t1046 * t811 - t1177;
t1109 = t1044 * t704 - t1048 * t595;
t843 = -t908 + t933;
t715 = -t1042 * t843 + t1224;
t648 = t1038 * t715 + t1040 * t740;
t650 = -t1038 * t740 + t1040 * t715;
t599 = -t1043 * t650 - t1047 * t648;
t713 = t1046 * t843 + t1226;
t1108 = t1044 * t713 + t1048 * t599;
t842 = t907 - t933;
t716 = t1046 * t842 - t1177;
t649 = t1038 * t716 + t1040 * t736;
t651 = -t1038 * t736 + t1040 * t716;
t600 = -t1043 * t651 - t1047 * t649;
t714 = t1042 * t842 + t1167;
t1107 = t1044 * t714 + t1048 * t600;
t775 = -qJD(6) * t911 - t1126;
t733 = -t1042 * t775 + t1166 * t909;
t687 = t1038 * t733 + t1141;
t689 = t1040 * t733 - t1142;
t622 = -t1043 * t689 - t1047 * t687;
t732 = t1046 * t775 + t1176 * t909;
t1106 = t1044 * t732 + t1048 * t622;
t735 = t1046 * t776 - t1176 * t911;
t688 = t1038 * t735 - t1141;
t690 = t1040 * t735 + t1142;
t623 = -t1043 * t690 - t1047 * t688;
t734 = t1042 * t776 + t1166 * t911;
t1105 = t1044 * t734 + t1048 * t623;
t767 = (t1042 * t911 - t1046 * t909) * t934;
t721 = t1038 * t767 - t1040 * t1116;
t722 = t1038 * t1116 + t1040 * t767;
t642 = -t1043 * t722 - t1047 * t721;
t766 = (-t1042 * t909 - t1046 * t911) * t934;
t1104 = t1044 * t766 + t1048 * t642;
t724 = -t1038 * t799 - t1040 * t1217;
t726 = t1038 * t1217 - t1040 * t799;
t644 = -t1043 * t726 - t1047 * t724;
t859 = t936 - t935;
t1103 = t1044 * t859 + t1048 * t644;
t1075 = -t1127 + t1194;
t803 = -t1195 - t850;
t725 = t1038 * t1075 + t1040 * t803;
t727 = -t1038 * t803 + t1040 * t1075;
t645 = t1043 * t727 + t1047 * t725;
t816 = -t935 - t936;
t1102 = t1044 * t816 - t1048 * t645;
t1101 = t1044 * t813 - t1048 * t664;
t853 = -t1212 - t935;
t768 = t1038 * t853 + t1227;
t769 = t1040 * t853 - t1228;
t683 = t1043 * t769 + t1047 * t768;
t1100 = t1044 * t799 - t1048 * t683;
t900 = -t936 - t1212;
t782 = t1040 * t900 - t1189;
t783 = -t1038 * t900 - t1183;
t707 = t1043 * t783 + t1047 * t782;
t1099 = -t1044 * t1217 - t1048 * t707;
t917 = -t936 + t1212;
t786 = t1040 * t917 + t1228;
t788 = -t1038 * t917 + t1227;
t709 = -t1043 * t788 - t1047 * t786;
t1098 = -t1044 * t803 + t1048 * t709;
t916 = t935 - t1212;
t787 = t1038 * t916 + t1183;
t789 = t1040 * t916 - t1189;
t710 = -t1043 * t789 - t1047 * t787;
t1097 = t1044 * t1075 + t1048 * t710;
t1080 = t923 + t1193;
t884 = (qJD(4) + t1019) * t983 + t1124;
t795 = t1043 * t884 - t1047 * t1080;
t944 = t981 - t980;
t1096 = t1044 * t944 + t1048 * t795;
t1061 = (-qJD(4) + t1019) * t983 - t1124;
t796 = t1043 * t1061 + t1047 * t888;
t912 = -t980 - t981;
t1095 = t1044 * t912 - t1048 * t796;
t928 = -t1212 - t980;
t838 = t1043 * t928 + t1223;
t1094 = t1044 * t884 - t1048 * t838;
t1053 = t1030 * t1210 + t1055;
t856 = t1053 + t1191;
t840 = -pkin(2) * t1003 + t856;
t929 = g(3) * t1147 + t1125;
t1057 = t929 + t1215;
t1056 = -t1029 * pkin(2) + t1057;
t851 = (-t1003 - t1026) * qJ(3) + t1056;
t1093 = t1044 * t851 + t1048 * t840;
t946 = -t981 - t1212;
t854 = t1047 * t946 - t1173;
t1092 = t1044 * t1080 - t1048 * t854;
t866 = -t1056 + t1192;
t1091 = t1044 * t856 + t1048 * t866;
t957 = -t981 + t1212;
t860 = -t1047 * t957 - t1225;
t1090 = -t1044 * t888 + t1048 * t860;
t956 = t980 - t1212;
t861 = -t1043 * t956 - t1163;
t1089 = t1044 * t1061 + t1048 * t861;
t930 = t1048 * t991 + t1117;
t1088 = t1044 * t930 - t1048 * t929;
t852 = t1044 * t929 + t1048 * t930;
t1087 = t1048 * t1219 + t1172;
t966 = t1021 * t1049 - t1022 * t1045;
t791 = -t1040 * t1127 + t1154 * t937;
t792 = t1038 * t1127 + t1153 * t937;
t717 = -t1043 * t792 - t1047 * t791;
t1079 = t1048 * t717 - t1140;
t793 = t1038 * t850 + t1153 * t939;
t794 = t1040 * t850 - t1154 * t939;
t718 = -t1043 * t794 - t1047 * t793;
t1078 = t1048 * t718 + t1140;
t876 = -t1047 * t922 + t1152 * t982;
t1077 = t1048 * t876 + t1139;
t878 = -t1043 * t923 - t1151 * t983;
t1076 = t1048 * t878 - t1139;
t1074 = (-t1039 * t871 - t1041 * t873) * pkin(8);
t487 = qJ(5) * t526 + (-pkin(10) * t1038 + t1136) * t536;
t497 = -qJ(5) * t525 + (-pkin(10) * t1040 + t1203) * t536;
t501 = -t1043 * t525 + t1047 * t526;
t470 = pkin(3) * t536 - t1043 * t497 - t1047 * t487 + t1208 * t501;
t479 = pkin(3) * t500 + pkin(4) * t525 - pkin(5) * t611 + pkin(10) * t537 - qJ(3) * t501;
t490 = t1044 * t500 + t1048 * t536;
t1073 = pkin(8) * t490 + t1044 * t479 + t1048 * t470;
t529 = -pkin(10) * t658 - t536;
t510 = qJ(5) * t630 + t1038 * t529 + t1136 * t658;
t516 = -qJ(5) * t629 + t1040 * t529 + t1203 * t658;
t581 = -t1043 * t629 + t1047 * t630;
t486 = pkin(3) * t658 - t1043 * t516 - t1047 * t510 + t1208 * t581;
t502 = pkin(3) * t580 + pkin(4) * t629 + pkin(5) * t781 + pkin(10) * t660 - qJ(3) * t581 + t537;
t548 = t1044 * t580 + t1048 * t658;
t1072 = pkin(8) * t548 + t1044 * t502 + t1048 * t486;
t556 = -pkin(5) * t697 + t577;
t588 = -pkin(10) * t697 + t1178;
t523 = -pkin(4) * t697 + qJ(5) * t639 + t1038 * t588 + t1040 * t556;
t527 = -qJ(5) * t638 - t1038 * t556 + t1040 * t588;
t594 = -t1043 * t638 + t1047 * t639;
t489 = pkin(3) * t697 - t1043 * t527 - t1047 * t523 + t1208 * t594;
t515 = pkin(3) * t593 + pkin(4) * t638 + pkin(5) * t737 + pkin(10) * t698 - qJ(3) * t594 - t1168;
t566 = t1044 * t593 + t1048 * t697;
t1071 = pkin(8) * t566 + t1044 * t515 + t1048 * t489;
t559 = -pkin(5) * t704 + t578;
t591 = -pkin(10) * t704 + t1168;
t524 = -pkin(4) * t704 + qJ(5) * t641 + t1038 * t591 + t1040 * t559;
t528 = -qJ(5) * t640 - t1038 * t559 + t1040 * t591;
t596 = -t1043 * t640 + t1047 * t641;
t492 = pkin(3) * t704 - t1043 * t528 - t1047 * t524 + t1208 * t596;
t517 = pkin(3) * t595 + pkin(4) * t640 - pkin(5) * t739 + pkin(10) * t705 - qJ(3) * t596 + t1178;
t567 = t1044 * t595 + t1048 * t704;
t1070 = pkin(8) * t567 + t1044 * t517 + t1048 * t492;
t535 = t1047 * t570 - t1175;
t560 = -pkin(4) * t752 + qJ(5) * t570;
t496 = pkin(3) * t752 + qJ(5) * t1175 - t1047 * t560 + t1208 * t535;
t499 = pkin(3) * t534 + pkin(4) * t569 - qJ(3) * t535;
t532 = t1044 * t534 + t1048 * t752;
t1069 = pkin(8) * t532 + t1044 * t499 + t1048 * t496;
t547 = -pkin(4) * t816 + qJ(5) * t727 + t570;
t552 = -qJ(5) * t725 - t569;
t647 = -t1043 * t725 + t1047 * t727;
t513 = pkin(3) * t816 - t1043 * t552 - t1047 * t547 + t1208 * t647;
t573 = pkin(3) * t645 + pkin(4) * t725 - qJ(3) * t647;
t628 = t1044 * t645 + t1048 * t816;
t1068 = pkin(8) * t628 + t1044 * t573 + t1048 * t513;
t652 = -pkin(4) * t799 + qJ(5) * t769 - t1184;
t676 = -qJ(5) * t768 + t1190;
t684 = -t1043 * t768 + t1047 * t769;
t550 = pkin(3) * t799 - t1043 * t676 - t1047 * t652 + t1208 * t684;
t561 = pkin(3) * t683 + pkin(4) * t768 - qJ(3) * t684 - t620;
t656 = t1044 * t683 + t1048 * t799;
t1067 = pkin(8) * t656 + t1044 * t561 + t1048 * t550;
t655 = pkin(4) * t1217 + qJ(5) * t783 + t1190;
t679 = -qJ(5) * t782 + t1184;
t708 = -t1043 * t782 + t1047 * t783;
t563 = -pkin(3) * t1217 - t1043 * t679 - t1047 * t655 + t1208 * t708;
t568 = pkin(3) * t707 + pkin(4) * t782 - qJ(3) * t708 - t621;
t666 = t1044 * t707 - t1048 * t1217;
t1066 = pkin(8) * t666 + t1044 * t568 + t1048 * t563;
t604 = pkin(3) * t813 + t1208 * t665;
t607 = pkin(3) * t664 - qJ(3) * t665;
t637 = t1044 * t664 + t1048 * t813;
t1065 = pkin(8) * t637 + t1044 * t607 + t1048 * t604;
t798 = -t1043 * t888 + t1047 * t1061;
t614 = pkin(3) * t912 + t1208 * t798 - t665;
t728 = pkin(3) * t796 - qJ(3) * t798;
t763 = t1044 * t796 + t1048 * t912;
t1064 = pkin(8) * t763 + t1044 * t728 + t1048 * t614;
t839 = t1047 * t928 - t1225;
t671 = pkin(3) * t838 - qJ(3) * t839 - t746;
t681 = pkin(3) * t884 + t1208 * t839 + t1164;
t774 = t1044 * t838 + t1048 * t884;
t1063 = pkin(8) * t774 + t1044 * t671 + t1048 * t681;
t855 = -t1043 * t946 - t1163;
t673 = pkin(3) * t854 - qJ(3) * t855 - t747;
t693 = pkin(3) * t1080 + t1208 * t855 - t1174;
t779 = t1044 * t854 + t1048 * t1080;
t1062 = pkin(8) * t779 + t1044 * t673 + t1048 * t693;
t827 = t1206 + (t1155 * t1210 + t990) * t1039 + 0.2e1 * t1222 + t1129;
t1060 = t1044 * t827 + t1204 * t1219 + t1238;
t1054 = t1004 + t1020 - t964 - t1222;
t828 = (-t962 - t997) * pkin(2) + t1054;
t1059 = -qJ(3) * t1172 + t1048 * t828 - t1237;
t777 = -t1044 * t866 + t1048 * t856;
t857 = t1054 - t1206;
t1058 = pkin(8) * t777 + t1115 * t857;
t1035 = t1039 * t1036;
t1014 = qJDD(1) * t1045 + t1049 * t1050;
t1010 = t1041 * t1029;
t1002 = t1027 - t1028;
t998 = -pkin(7) * t1014 + g(3) * t1049;
t979 = t1048 * t988;
t969 = t988 * t1146;
t968 = t988 * t1148;
t963 = (t1037 + t1211) * t1134;
t954 = t1048 * t996 - t1134 * t1211;
t953 = -t1037 * t1134 - t1044 * t997;
t943 = t1045 * t1150 + t1049 * t963;
t942 = t1045 * t963 - t1049 * t1150;
t927 = (t1035 * t1048 * t1050 + t1182) * t1044;
t926 = (t1039 * t996 + t1048 * t1216) * t1044;
t925 = (t1039 * t997 - t1044 * t1216) * t1048;
t924 = (-t1035 * t1144 + (t997 - t1123) * t1041) * t1048;
t906 = -pkin(2) * t960 + qJ(3) * t961;
t905 = (t1043 * t983 + t1047 * t982) * t1019;
t904 = (-t1043 * t982 + t1047 * t983) * t1019;
t902 = -t1044 * t1219 + t1162;
t879 = t1047 * t923 - t1152 * t983;
t877 = -t1043 * t922 - t1151 * t982;
t875 = -t1044 * t904 + t979;
t874 = -t1039 * t1002 + t1041 * t1087;
t872 = t1041 * t1002 + t1039 * t1087;
t870 = -t1045 * t927 + t1049 * t954;
t869 = -t1045 * t924 + t1049 * t953;
t868 = t1045 * t954 + t1049 * t927;
t867 = t1045 * t953 + t1049 * t924;
t863 = t1047 * t956 - t1173;
t862 = -t1043 * t957 + t1223;
t837 = (t1038 * t939 - t1040 * t937) * t1019;
t836 = (-t1038 * t937 - t1040 * t939) * t1019;
t830 = (-t1001 - t1026) * qJ(3) + (-t1029 - t994) * pkin(2) + t1057;
t826 = -t1044 * t878 - t1137;
t825 = -t1044 * t876 + t1137;
t820 = t1039 * t964 + t1041 * t1088;
t819 = t1039 * t1088 - t1041 * t964;
t818 = -pkin(2) * t975 + (t1029 + t995) * qJ(3) + t1053;
t810 = -t1039 * t905 + t1145 * t904 + t969;
t809 = -t1045 * t874 + t1049 * t902;
t808 = -t1045 * t873 + t1049 * t901;
t807 = t1045 * t902 + t1049 * t874;
t805 = pkin(7) * t808;
t797 = -t1043 * t1080 - t1047 * t884;
t785 = -t1044 * t861 + t1048 * t1061;
t784 = -t1044 * t860 - t1048 * t888;
t780 = -t1171 - t1250;
t778 = pkin(2) * t866 + qJ(3) * t856;
t773 = -t1161 + t1249;
t772 = t1039 * t929 + t1041 * t1118 - t1246;
t771 = -t1044 * t795 + t1048 * t944;
t770 = t1039 * t930 + t1041 * t1119 + t1248;
t765 = -t1039 * t879 + t1041 * t1076;
t764 = -t1039 * t877 + t1041 * t1077;
t759 = -t1043 * t836 + t1047 * t837;
t758 = -t1043 * t837 - t1047 * t836;
t757 = -pkin(1) * t819 + t1201 * t852;
t756 = -t1045 * t820 + t1049 * t852;
t755 = t1045 * t852 + t1049 * t820;
t754 = -t1044 * t758 + t979;
t753 = t1041 * t852 + t1135;
t751 = -t1039 * t863 + t1041 * t1089;
t750 = -t1039 * t862 + t1041 * t1090;
t749 = (-t1039 * t819 - t1041 * t820) * pkin(8);
t748 = t1074 - t1088;
t745 = -t1039 * t857 + t1041 * t1091;
t744 = t1039 * t1091 + t1041 * t857;
t743 = -t1039 * t855 + t1041 * t1092;
t742 = t1039 * t1092 + t1041 * t855;
t731 = -t1039 * t839 + t1041 * t1094;
t730 = t1039 * t1094 + t1041 * t839;
t729 = -qJ(3) * t1162 - t1044 * t828 + t1250;
t723 = t1048 * t827 - t1219 * t1205 - t1249;
t720 = -t1043 * t793 + t1047 * t794;
t719 = -t1043 * t791 + t1047 * t792;
t712 = -t1043 * t787 + t1047 * t789;
t711 = -t1043 * t786 + t1047 * t788;
t706 = -t1039 * t797 + t1041 * t1096;
t702 = -t1039 * t798 + t1041 * t1095;
t701 = t1039 * t1095 + t1041 * t798;
t699 = -t1044 * t840 + t1048 * t851 + t1074;
t696 = -t1039 * t830 + t1041 * t1059 + t1246;
t692 = qJ(3) * t1080 + t1208 * t854 + t1164;
t691 = -t1039 * t818 + t1041 * t1060 - t1248;
t686 = -t1044 * t718 + t1138;
t685 = -t1044 * t717 - t1138;
t682 = -t1039 * t906 + t1041 * t1093 + t1135;
t680 = qJ(3) * t884 + t1208 * t838 + t1174;
t678 = -t1045 * t743 + t1049 * t779;
t677 = t1045 * t779 + t1049 * t743;
t675 = -t1045 * t745 + t1049 * t777;
t674 = t1045 * t777 + t1049 * t745;
t672 = -t1039 * t759 + t1145 * t758 + t969;
t670 = -t1044 * t710 + t1048 * t1075;
t669 = -t1044 * t709 - t1048 * t803;
t668 = -t1045 * t731 + t1049 * t774;
t667 = t1045 * t774 + t1049 * t731;
t654 = -t1045 * t702 + t1049 * t763;
t653 = t1045 * t763 + t1049 * t702;
t646 = -t1043 * t724 + t1047 * t726;
t643 = -t1043 * t721 + t1047 * t722;
t634 = -t1044 * t644 + t1048 * t859;
t633 = -t1039 * t720 + t1041 * t1078;
t632 = -t1039 * t719 + t1041 * t1079;
t631 = (-t1197 + t1205) * t857 + (-t1039 * t744 - t1041 * t745) * pkin(8);
t627 = -t1039 * t712 + t1041 * t1097;
t626 = -t1039 * t711 + t1041 * t1098;
t625 = -t1043 * t688 + t1047 * t690;
t624 = -t1043 * t687 + t1047 * t689;
t618 = -pkin(1) * t744 - t1039 * t778 + t1041 * t1058;
t617 = -t1044 * t642 + t1048 * t766;
t616 = -t1039 * t708 + t1041 * t1099;
t615 = t1039 * t1099 + t1041 * t708;
t613 = qJ(3) * t912 + t1208 * t796 - t664;
t609 = -t1039 * t684 + t1041 * t1100;
t608 = t1039 * t1100 + t1041 * t684;
t606 = -t1044 * t623 + t1048 * t734;
t605 = -t1044 * t622 + t1048 * t732;
t603 = qJ(3) * t813 + t1208 * t664;
t602 = -t1043 * t649 + t1047 * t651;
t601 = -t1043 * t648 + t1047 * t650;
t598 = -t1039 * t665 + t1041 * t1101;
t597 = t1039 * t1101 + t1041 * t665;
t592 = -t1039 * t646 + t1041 * t1103;
t590 = -t1045 * t616 + t1049 * t666;
t589 = t1045 * t666 + t1049 * t616;
t587 = -t1043 * t635 + t1047 * t636;
t585 = -t1039 * t647 + t1041 * t1102;
t584 = t1039 * t1102 + t1041 * t647;
t583 = -t1044 * t693 + t1048 * t673 + (-t1039 * t742 - t1041 * t743) * pkin(8);
t582 = -t1039 * t643 + t1041 * t1104;
t579 = -t1044 * t681 + t1048 * t671 + (-t1039 * t730 - t1041 * t731) * pkin(8);
t575 = -t1044 * t600 + t1048 * t714;
t574 = -t1044 * t599 + t1048 * t713;
t572 = -t1045 * t609 + t1049 * t656;
t571 = t1045 * t656 + t1049 * t609;
t565 = -pkin(1) * t742 - t1039 * t692 + t1041 * t1062;
t564 = -pkin(1) * t730 - t1039 * t680 + t1041 * t1063;
t562 = -qJ(3) * t1217 - t1043 * t655 + t1047 * t679 + t1208 * t707;
t558 = -t1045 * t598 + t1049 * t637;
t557 = t1045 * t637 + t1049 * t598;
t555 = -t1039 * t625 + t1041 * t1105;
t554 = -t1039 * t624 + t1041 * t1106;
t553 = -t1044 * t586 + t1048 * t657;
t551 = -t1044 * t614 + t1048 * t728 + (-t1039 * t701 - t1041 * t702) * pkin(8);
t549 = qJ(3) * t799 - t1043 * t652 + t1047 * t676 + t1208 * t683;
t546 = -t1045 * t585 + t1049 * t628;
t545 = t1045 * t628 + t1049 * t585;
t544 = -pkin(1) * t701 - t1039 * t613 + t1041 * t1064;
t543 = -t1039 * t602 + t1041 * t1107;
t542 = -t1039 * t601 + t1041 * t1108;
t541 = -t1039 * t596 + t1041 * t1109;
t540 = t1039 * t1109 + t1041 * t596;
t539 = -t1039 * t594 + t1041 * t1110;
t538 = t1039 * t1110 + t1041 * t594;
t533 = -t1039 * t587 + t1041 * t1111;
t531 = -t1039 * t581 + t1041 * t1112;
t530 = t1039 * t1112 + t1041 * t581;
t522 = -t1045 * t541 + t1049 * t567;
t521 = t1045 * t567 + t1049 * t541;
t520 = -t1044 * t604 + t1048 * t607 + (-t1039 * t597 - t1041 * t598) * pkin(8);
t519 = -t1045 * t539 + t1049 * t566;
t518 = t1045 * t566 + t1049 * t539;
t514 = -t1044 * t563 + t1048 * t568 + (-t1039 * t615 - t1041 * t616) * pkin(8);
t512 = qJ(3) * t816 - t1043 * t547 + t1047 * t552 + t1208 * t645;
t511 = -pkin(1) * t597 - t1039 * t603 + t1041 * t1065;
t509 = -t1045 * t531 + t1049 * t548;
t508 = t1045 * t548 + t1049 * t531;
t507 = -t1044 * t550 + t1048 * t561 + (-t1039 * t608 - t1041 * t609) * pkin(8);
t506 = -pkin(1) * t615 - t1039 * t562 + t1041 * t1066;
t505 = -t1039 * t535 + t1041 * t1113;
t504 = t1039 * t1113 + t1041 * t535;
t503 = -pkin(1) * t608 - t1039 * t549 + t1041 * t1067;
t498 = -t1044 * t513 + t1048 * t573 + (-t1039 * t584 - t1041 * t585) * pkin(8);
t495 = qJ(3) * t752 - qJ(5) * t1165 - t1043 * t560 + t1208 * t534;
t494 = -t1045 * t505 + t1049 * t532;
t493 = t1045 * t532 + t1049 * t505;
t491 = qJ(3) * t704 - t1043 * t524 + t1047 * t528 + t1208 * t595;
t488 = qJ(3) * t697 - t1043 * t523 + t1047 * t527 + t1208 * t593;
t485 = qJ(3) * t658 - t1043 * t510 + t1047 * t516 + t1208 * t580;
t484 = -pkin(1) * t584 - t1039 * t512 + t1041 * t1068;
t483 = -t1039 * t501 + t1041 * t1114;
t482 = t1039 * t1114 + t1041 * t501;
t481 = -t1044 * t492 + t1048 * t517 + (-t1039 * t540 - t1041 * t541) * pkin(8);
t480 = -t1044 * t489 + t1048 * t515 + (-t1039 * t538 - t1041 * t539) * pkin(8);
t478 = -t1044 * t486 + t1048 * t502 + (-t1039 * t530 - t1041 * t531) * pkin(8);
t477 = -t1045 * t483 + t1049 * t490;
t476 = t1045 * t490 + t1049 * t483;
t475 = -pkin(1) * t540 - t1039 * t491 + t1041 * t1070;
t474 = -t1044 * t496 + t1048 * t499 + (-t1039 * t504 - t1041 * t505) * pkin(8);
t473 = -pkin(1) * t538 - t1039 * t488 + t1041 * t1071;
t472 = -pkin(1) * t504 - t1039 * t495 + t1041 * t1069;
t471 = -pkin(1) * t530 - t1039 * t485 + t1041 * t1072;
t469 = qJ(3) * t536 - t1043 * t487 + t1047 * t497 + t1208 * t500;
t468 = -t1044 * t470 + t1048 * t479 + (-t1039 * t482 - t1041 * t483) * pkin(8);
t467 = -pkin(1) * t482 - t1039 * t469 + t1041 * t1073;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1014, -t1015, 0, t967, 0, 0, 0, 0, 0, 0, -t835, t824, t808, t756, 0, 0, 0, 0, 0, 0, t808, t835, -t824, t675, 0, 0, 0, 0, 0, 0, t668, t678, t654, t558, 0, 0, 0, 0, 0, 0, t572, t590, t546, t494, 0, 0, 0, 0, 0, 0, t519, t522, t509, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1015, -t1014, 0, t966, 0, 0, 0, 0, 0, 0, t832, -t821, t806, t755, 0, 0, 0, 0, 0, 0, t806, -t832, t821, t674, 0, 0, 0, 0, 0, 0, t667, t677, t653, t557, 0, 0, 0, 0, 0, 0, t571, t589, t545, t493, 0, 0, 0, 0, 0, 0, t518, t521, t508, t476; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t890, -t880, t871, t819, 0, 0, 0, 0, 0, 0, t871, -t890, t880, t744, 0, 0, 0, 0, 0, 0, t730, t742, t701, t597, 0, 0, 0, 0, 0, 0, t608, t615, t584, t504, 0, 0, 0, 0, 0, 0, t538, t540, t530, t482; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1015, 0, -t1014, 0, t1120, -t998, -t966, -pkin(7) * t966, t870, t809, -t1243, t869, -t1244, t943, -t1045 * t772 + t1049 * t780 - t1252, -t1045 * t770 + t1049 * t773 + t1254, -t1045 * t753 + t1049 * t748 - t1207, -pkin(7) * t755 - t1045 * t757 + t1049 * t749, t943, t1243, t1244, t870, t809, t869, -t1045 * t682 + t1049 * t699 - t1207, -t1045 * t696 + t1049 * t729 + t1252, -t1045 * t691 + t1049 * t723 - t1254, -pkin(7) * t674 - t1045 * t618 + t1049 * t631, -t1045 * t765 + t1049 * t826, -t1045 * t706 + t1049 * t771, -t1045 * t750 + t1049 * t784, -t1045 * t764 + t1049 * t825, -t1045 * t751 + t1049 * t785, -t1045 * t810 + t1049 * t875, -pkin(7) * t667 - t1045 * t564 + t1049 * t579, -pkin(7) * t677 - t1045 * t565 + t1049 * t583, -pkin(7) * t653 - t1045 * t544 + t1049 * t551, -pkin(7) * t557 - t1045 * t511 + t1049 * t520, -t1045 * t633 + t1049 * t686, -t1045 * t592 + t1049 * t634, -t1045 * t626 + t1049 * t669, -t1045 * t632 + t1049 * t685, -t1045 * t627 + t1049 * t670, -t1045 * t672 + t1049 * t754, -pkin(7) * t571 - t1045 * t503 + t1049 * t507, -pkin(7) * t589 - t1045 * t506 + t1049 * t514, -pkin(7) * t545 - t1045 * t484 + t1049 * t498, -pkin(7) * t493 - t1045 * t472 + t1049 * t474, -t1045 * t555 + t1049 * t606, -t1045 * t533 + t1049 * t553, -t1045 * t542 + t1049 * t574, -t1045 * t554 + t1049 * t605, -t1045 * t543 + t1049 * t575, -t1045 * t582 + t1049 * t617, -pkin(7) * t518 - t1045 * t473 + t1049 * t480, -pkin(7) * t521 - t1045 * t475 + t1049 * t481, -pkin(7) * t508 - t1045 * t471 + t1049 * t478, -pkin(7) * t476 - t1045 * t467 + t1049 * t468; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1014, 0, t1015, 0, t998, t1120, t967, pkin(7) * t967, t868, t807, t1241, t867, t1242, t942, t1045 * t780 + t1049 * t772 - t1251, t1045 * t773 + t1049 * t770 + t1253, t1045 * t748 + t1049 * t753 + t805, pkin(7) * t756 + t1045 * t749 + t1049 * t757, t942, -t1241, -t1242, t868, t807, t867, t1045 * t699 + t1049 * t682 + t805, t1045 * t729 + t1049 * t696 + t1251, t1045 * t723 + t1049 * t691 - t1253, pkin(7) * t675 + t1045 * t631 + t1049 * t618, t1045 * t826 + t1049 * t765, t1045 * t771 + t1049 * t706, t1045 * t784 + t1049 * t750, t1045 * t825 + t1049 * t764, t1045 * t785 + t1049 * t751, t1045 * t875 + t1049 * t810, pkin(7) * t668 + t1045 * t579 + t1049 * t564, pkin(7) * t678 + t1045 * t583 + t1049 * t565, pkin(7) * t654 + t1045 * t551 + t1049 * t544, pkin(7) * t558 + t1045 * t520 + t1049 * t511, t1045 * t686 + t1049 * t633, t1045 * t634 + t1049 * t592, t1045 * t669 + t1049 * t626, t1045 * t685 + t1049 * t632, t1045 * t670 + t1049 * t627, t1045 * t754 + t1049 * t672, pkin(7) * t572 + t1045 * t507 + t1049 * t503, pkin(7) * t590 + t1045 * t514 + t1049 * t506, pkin(7) * t546 + t1045 * t498 + t1049 * t484, pkin(7) * t494 + t1045 * t474 + t1049 * t472, t1045 * t606 + t1049 * t555, t1045 * t553 + t1049 * t533, t1045 * t574 + t1049 * t542, t1045 * t605 + t1049 * t554, t1045 * t575 + t1049 * t543, t1045 * t617 + t1049 * t582, pkin(7) * t519 + t1045 * t480 + t1049 * t473, pkin(7) * t522 + t1045 * t481 + t1049 * t475, pkin(7) * t509 + t1045 * t478 + t1049 * t471, pkin(7) * t477 + t1045 * t468 + t1049 * t467; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1021, t1022, 0, 0, t926, t872, t1213, t925, t1214, t1010, t1039 * t1118 - t1041 * t929 + t1245, t1039 * t1119 - t1041 * t930 - t1247, t1039 * t852 + t1198, pkin(1) * t820 + t1202 * t852, t1010, -t1213, -t1214, t926, t872, t925, t1039 * t1093 + t1041 * t906 + t1198, t1039 * t1059 + t1041 * t830 - t1245, t1039 * t1060 + t1041 * t818 + t1247, pkin(1) * t745 + t1039 * t1058 + t1041 * t778, t1039 * t1076 + t1041 * t879, t1039 * t1096 + t1041 * t797, t1039 * t1090 + t1041 * t862, t1039 * t1077 + t1041 * t877, t1039 * t1089 + t1041 * t863, t1041 * t905 + t1147 * t904 + t968, pkin(1) * t731 + t1039 * t1063 + t1041 * t680, pkin(1) * t743 + t1039 * t1062 + t1041 * t692, pkin(1) * t702 + t1039 * t1064 + t1041 * t613, pkin(1) * t598 + t1039 * t1065 + t1041 * t603, t1039 * t1078 + t1041 * t720, t1039 * t1103 + t1041 * t646, t1039 * t1098 + t1041 * t711, t1039 * t1079 + t1041 * t719, t1039 * t1097 + t1041 * t712, t1041 * t759 + t1147 * t758 + t968, pkin(1) * t609 + t1039 * t1067 + t1041 * t549, pkin(1) * t616 + t1039 * t1066 + t1041 * t562, pkin(1) * t585 + t1039 * t1068 + t1041 * t512, pkin(1) * t505 + t1039 * t1069 + t1041 * t495, t1039 * t1105 + t1041 * t625, t1039 * t1111 + t1041 * t587, t1039 * t1108 + t1041 * t601, t1039 * t1106 + t1041 * t624, t1039 * t1107 + t1041 * t602, t1039 * t1104 + t1041 * t643, pkin(1) * t539 + t1039 * t1071 + t1041 * t488, pkin(1) * t541 + t1039 * t1070 + t1041 * t491, pkin(1) * t531 + t1039 * t1072 + t1041 * t485, pkin(1) * t483 + t1039 * t1073 + t1041 * t469;];
tauB_reg  = t1;
