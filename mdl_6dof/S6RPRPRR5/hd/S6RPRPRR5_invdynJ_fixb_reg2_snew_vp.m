% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 18:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRPRR5_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:53:49
% EndTime: 2019-05-05 18:54:09
% DurationCPUTime: 9.46s
% Computational Cost: add. (31042->516), mult. (75889->676), div. (0->0), fcn. (57656->10), ass. (0->305)
t274 = cos(qJ(3));
t270 = sin(qJ(3));
t266 = sin(pkin(10));
t267 = cos(pkin(10));
t326 = qJD(1) * t274;
t327 = qJD(1) * t270;
t244 = -t266 * t327 + t267 * t326;
t245 = t266 * t326 + t267 * t327;
t331 = t244 * t245;
t363 = qJDD(3) - t331;
t338 = t363 * t270;
t241 = t245 ^ 2;
t275 = qJD(3) ^ 2;
t366 = -t241 - t275;
t164 = -t274 * t366 + t338;
t337 = t363 * t274;
t166 = t270 * t366 + t337;
t402 = qJ(2) * (t164 * t266 - t166 * t267);
t401 = pkin(7) * t164;
t400 = pkin(7) * t166;
t360 = t244 ^ 2;
t227 = t360 - t275;
t398 = t266 * (-t227 * t274 + t338) - t267 * (t227 * t270 + t337);
t362 = qJDD(3) + t331;
t336 = t362 * t270;
t364 = -t275 - t360;
t373 = t274 * t364 - t336;
t395 = pkin(7) * t373;
t320 = t267 * qJDD(1);
t321 = t266 * qJDD(1);
t242 = t270 * t321 - t274 * t320;
t330 = t266 * t274;
t243 = (t267 * t270 + t330) * qJDD(1);
t375 = -t242 * t270 - t274 * t243;
t394 = pkin(7) * t375;
t201 = t274 * t362;
t376 = t270 * t364 + t201;
t393 = pkin(7) * t376;
t261 = t266 ^ 2;
t262 = t267 ^ 2;
t328 = t261 + t262;
t271 = sin(qJ(1));
t357 = cos(qJ(1));
t289 = t357 * g(1) + t271 * g(2);
t390 = 0.2e1 * qJD(2) * qJD(1) - t289;
t181 = -t360 - t241;
t374 = -t242 * t274 + t243 * t270;
t389 = -pkin(2) * t181 + pkin(7) * t374;
t325 = t245 * qJD(3);
t214 = t242 + 0.2e1 * t325;
t388 = qJ(2) * (-t266 * t376 + t267 * t373) - pkin(1) * t214;
t228 = -t241 + t275;
t387 = t266 * (-t228 * t270 + t201) + t267 * (t274 * t228 + t336);
t386 = qJ(2) * (-t266 * t375 + t267 * t374) - pkin(1) * t181;
t268 = sin(qJ(6));
t269 = sin(qJ(5));
t273 = cos(qJ(5));
t200 = -t244 * t269 + t245 * t273;
t215 = t242 + t325;
t237 = t244 * qJD(3);
t217 = t243 + t237;
t305 = -t273 * t215 + t269 * t217;
t144 = -t200 * qJD(5) - t305;
t143 = qJDD(6) - t144;
t272 = cos(qJ(6));
t319 = qJD(3) - qJD(5);
t178 = t200 * t268 + t272 * t319;
t180 = t272 * t200 - t268 * t319;
t147 = t180 * t178;
t371 = t143 - t147;
t385 = t268 * t371;
t198 = t273 * t244 + t245 * t269;
t162 = t200 * t198;
t260 = qJDD(3) - qJDD(5);
t370 = -t162 - t260;
t384 = t269 * t370;
t382 = t272 * t371;
t381 = t273 * t370;
t367 = t237 + t217;
t379 = t367 * qJ(4);
t145 = -qJD(5) * t198 + t215 * t269 + t217 * t273;
t190 = t198 * t319;
t378 = t145 + t190;
t276 = qJD(1) ^ 2;
t377 = -t276 * pkin(1) + qJDD(1) * qJ(2) + t390;
t317 = t319 ^ 2;
t372 = qJ(2) + pkin(7);
t308 = t271 * g(1) - t357 * g(2);
t298 = -qJDD(2) + t308;
t311 = t267 * pkin(2) + pkin(1);
t208 = t311 * qJDD(1) + (t328 * pkin(7) + qJ(2)) * t276 + t298;
t369 = -pkin(3) * t325 + t208;
t368 = -t237 + t217;
t365 = t241 - t360;
t329 = t276 * qJ(2);
t348 = qJDD(1) * pkin(1);
t239 = t298 + t329 + t348;
t361 = t328 * t329 - t239 - t348;
t193 = qJD(6) + t198;
t306 = t145 * t268 + t272 * t260;
t93 = (qJD(6) - t193) * t180 + t306;
t176 = t178 ^ 2;
t177 = t180 ^ 2;
t192 = t193 ^ 2;
t196 = t198 ^ 2;
t197 = t200 ^ 2;
t359 = 2 * qJD(4);
t358 = pkin(3) + pkin(4);
t356 = pkin(3) * t270;
t355 = pkin(3) * t274;
t354 = t215 * pkin(3);
t353 = t267 * g(3);
t160 = pkin(5) * t198 - pkin(9) * t200;
t299 = -g(3) * t266 + t267 * t377;
t191 = -pkin(2) * t262 * t276 + pkin(7) * t320 + t299;
t282 = -t353 + (-qJDD(1) * t372 + t311 * t276 - t390) * t266;
t150 = t274 * t191 + t270 * t282;
t293 = -pkin(3) * t244 - qJ(4) * t245;
t291 = qJDD(3) * qJ(4) + qJD(3) * t359 + t244 * t293 + t150;
t130 = -pkin(3) * t275 + t291;
t224 = -qJD(3) * pkin(4) - pkin(8) * t245;
t103 = -pkin(4) * t360 + pkin(8) * t215 + qJD(3) * t224 + t130;
t149 = t270 * t191 - t274 * t282;
t131 = -qJDD(3) * pkin(3) - t275 * qJ(4) + t245 * t293 + qJDD(4) + t149;
t280 = -pkin(4) * t362 - t368 * pkin(8) + t131;
t63 = t103 * t269 - t273 * t280;
t49 = t260 * pkin(5) - pkin(9) * t317 + t160 * t200 + t63;
t352 = t268 * t49;
t281 = t369 + t379;
t99 = -t354 - t215 * pkin(4) - t360 * pkin(8) + (t359 + t224) * t245 + t281;
t351 = t269 * t99;
t350 = t272 * t49;
t349 = t273 * t99;
t105 = t143 + t147;
t347 = t105 * t268;
t346 = t105 * t272;
t111 = -t149 * t274 + t150 * t270;
t345 = t111 * t266;
t157 = -t162 + t260;
t344 = t157 * t269;
t343 = t157 * t273;
t342 = t193 * t268;
t341 = t193 * t272;
t340 = t208 * t270;
t339 = t208 * t274;
t335 = t214 * t270;
t334 = t214 * t274;
t64 = t273 * t103 + t269 * t280;
t323 = qJD(6) + t193;
t318 = t245 * t359;
t313 = t269 * t147;
t312 = t273 * t147;
t310 = -qJ(4) * t270 - pkin(2);
t309 = pkin(5) * t269 + qJ(4);
t50 = -pkin(5) * t317 - t260 * pkin(9) - t198 * t160 + t64;
t301 = t319 * t200;
t57 = t99 - t378 * pkin(9) + (-t144 - t301) * pkin(5);
t31 = t268 * t50 - t272 * t57;
t32 = t268 * t57 + t272 * t50;
t15 = t268 * t31 + t272 * t32;
t112 = t149 * t270 + t274 * t150;
t304 = t266 * (t266 * t377 + t353) + t267 * t299;
t302 = pkin(5) * t273 + t358;
t300 = -pkin(5) * t49 + pkin(9) * t15;
t297 = t269 * t190;
t296 = t269 * t301;
t295 = t273 * t190;
t294 = t273 * t301;
t14 = t268 * t32 - t272 * t31;
t35 = t269 * t64 - t273 * t63;
t36 = t269 * t63 + t273 * t64;
t290 = -t145 * t272 + t260 * t268;
t125 = qJD(3) * t200 + t305;
t140 = -t177 - t192;
t72 = -t140 * t268 - t346;
t98 = t323 * t178 + t290;
t288 = pkin(5) * t98 + pkin(9) * t72 + t352;
t133 = -t192 - t176;
t70 = t133 * t272 - t385;
t94 = -t323 * t180 - t306;
t287 = pkin(5) * t94 + pkin(9) * t70 - t350;
t132 = t176 + t177;
t116 = -qJD(6) * t178 - t290;
t155 = t193 * t178;
t97 = t116 + t155;
t62 = t268 * t97 - t272 * t93;
t286 = pkin(5) * t132 + pkin(9) * t62 + t15;
t284 = t266 * (t215 * t270 - t274 * t237) + t267 * (-t274 * t215 - t270 * t237);
t225 = t270 * t325;
t283 = t266 * t225 + (t244 * t330 + t267 * (t244 * t270 - t245 * t274)) * qJD(3);
t279 = t281 + t318;
t256 = t262 * qJDD(1);
t255 = t261 * qJDD(1);
t246 = t328 * t276;
t216 = t243 + 0.2e1 * t237;
t188 = -t197 + t317;
t187 = t196 - t317;
t185 = -t197 - t317;
t161 = t197 - t196;
t156 = -t317 - t196;
t154 = -t177 + t192;
t153 = t176 - t192;
t152 = t295 - t296;
t151 = -t297 - t294;
t146 = t177 - t176;
t142 = -t196 - t197;
t141 = t266 * (t217 * t274 - t225) + t267 * (t217 * t270 + t274 * t325);
t139 = t187 * t273 + t344;
t138 = -t188 * t269 + t381;
t137 = -t187 * t269 + t343;
t136 = -t188 * t273 - t384;
t135 = -t185 * t269 + t343;
t134 = t185 * t273 + t344;
t129 = t145 - t190;
t124 = (0.2e1 * qJD(5) - qJD(3)) * t200 + t305;
t123 = t279 - t354;
t122 = t273 * t145 + t296;
t121 = -t269 * t145 + t294;
t120 = -t269 * t144 - t295;
t119 = -t273 * t144 + t297;
t118 = t156 * t273 - t384;
t117 = t156 * t269 + t381;
t115 = -qJD(6) * t180 - t306;
t114 = (-t178 * t272 + t180 * t268) * t193;
t113 = (-t178 * t268 - t180 * t272) * t193;
t110 = (-t214 - t215) * pkin(3) + t279;
t109 = -qJ(4) * t181 + t131;
t108 = (-t181 - t275) * pkin(3) + t291;
t107 = t318 - t354 + t369 + 0.2e1 * t379;
t96 = t116 - t155;
t92 = t116 * t272 - t180 * t342;
t91 = t116 * t268 + t180 * t341;
t90 = -t115 * t268 + t178 * t341;
t89 = -t115 * t272 - t178 * t342;
t88 = t134 * t270 + t135 * t274;
t87 = -t134 * t274 + t135 * t270;
t86 = t114 * t273 + t143 * t269;
t85 = -t114 * t269 + t143 * t273;
t84 = t153 * t272 - t347;
t83 = -t154 * t268 + t382;
t82 = t153 * t268 + t346;
t81 = t154 * t272 + t385;
t78 = -t125 * t273 + t129 * t269;
t77 = -t124 * t273 - t269 * t378;
t76 = -t125 * t269 - t129 * t273;
t75 = t124 * t269 - t273 * t378;
t74 = t117 * t270 + t118 * t274;
t73 = -t117 * t274 + t118 * t270;
t71 = t140 * t272 - t347;
t69 = t133 * t268 + t382;
t68 = t273 * t92 + t313;
t67 = t273 * t90 - t313;
t66 = -t269 * t92 + t312;
t65 = -t269 * t90 - t312;
t61 = -t268 * t96 + t272 * t94;
t60 = -t268 * t93 - t272 * t97;
t59 = t268 * t94 + t272 * t96;
t58 = -pkin(8) * t134 + qJ(4) * t378 + t349;
t55 = -pkin(8) * t117 + qJ(4) * t124 + t351;
t54 = -t269 * t93 + t273 * t84;
t53 = t269 * t97 + t273 * t83;
t52 = -t269 * t84 - t273 * t93;
t51 = -t269 * t83 + t273 * t97;
t48 = -t269 * t98 + t273 * t72;
t47 = t269 * t72 + t273 * t98;
t46 = -t269 * t94 + t273 * t70;
t45 = t269 * t70 + t273 * t94;
t44 = t146 * t269 + t273 * t61;
t43 = t146 * t273 - t269 * t61;
t42 = t270 * t76 + t274 * t78;
t41 = t270 * t78 - t274 * t76;
t40 = -t132 * t269 + t273 * t62;
t39 = t132 * t273 + t269 * t62;
t38 = -pkin(8) * t135 + t358 * t378 - t351;
t37 = -pkin(8) * t118 + t124 * t358 + t349;
t34 = -pkin(9) * t71 + t350;
t33 = -pkin(9) * t69 + t352;
t29 = -pkin(8) * t35 + qJ(4) * t99;
t28 = t270 * t47 + t274 * t48;
t27 = t270 * t48 - t274 * t47;
t26 = t270 * t45 + t274 * t46;
t25 = t270 * t46 - t274 * t45;
t24 = t270 * t39 + t274 * t40;
t23 = t270 * t40 - t274 * t39;
t22 = -pkin(8) * t76 + qJ(4) * t142 - t35;
t21 = -pkin(8) * t36 + t358 * t99;
t20 = -pkin(8) * t78 + t142 * t358 - t36;
t19 = -pkin(5) * t71 + t32;
t18 = -pkin(5) * t69 + t31;
t17 = t270 * t35 + t274 * t36;
t16 = t270 * t36 - t274 * t35;
t13 = -pkin(9) * t60 - t14;
t12 = t15 * t273 + t269 * t49;
t11 = t15 * t269 - t273 * t49;
t10 = -pkin(8) * t47 + qJ(4) * t71 - t19 * t269 + t273 * t34;
t9 = -pkin(8) * t45 + qJ(4) * t69 - t18 * t269 + t273 * t33;
t8 = -pkin(8) * t48 - t19 * t273 - t269 * t34 + t358 * t71;
t7 = -pkin(8) * t46 - t18 * t273 - t269 * t33 + t358 * t69;
t6 = -pkin(8) * t39 + t13 * t273 + t309 * t60;
t5 = -pkin(8) * t40 - t13 * t269 + t302 * t60;
t4 = t11 * t270 + t12 * t274;
t3 = -t11 * t274 + t12 * t270;
t2 = -pkin(8) * t11 + (-pkin(9) * t273 + t309) * t14;
t1 = -pkin(8) * t12 + (pkin(9) * t269 + t302) * t14;
t30 = [0, 0, 0, 0, 0, qJDD(1), t308, t289, 0, 0, t255, 0.2e1 * t266 * t320, 0, t256, 0, 0, -t361 * t267, t361 * t266, pkin(1) * t246 + qJ(2) * (t256 + t255) + t304, pkin(1) * t239 + qJ(2) * t304, t141, t266 * (-t216 * t270 - t334) + t267 * (t216 * t274 - t335), t387, t284, -t398, t283, t266 * (-t340 - t393) + t267 * (-pkin(2) * t214 + t339 + t395) + t388, t266 * (-t339 + t401) + t267 * (-pkin(2) * t216 - t340 - t400) - pkin(1) * t216 + t402, t266 * (-t111 - t394) + t267 * (t112 + t389) + t386, -pkin(7) * t345 + t267 * (pkin(2) * t208 + pkin(7) * t112) + pkin(1) * t208 + qJ(2) * (t112 * t267 - t345), t141, t387, t266 * (t270 * t367 + t334) + t267 * (-t274 * t367 + t335), t283, t398, t284, t266 * (-qJ(4) * t334 - t110 * t270 - t393) + t267 * (t110 * t274 + t214 * t310 + t395) + t388, t266 * (-t108 * t270 + t109 * t274 - t394) + t267 * (t108 * t274 + t109 * t270 + t389) + t386, t266 * (t107 * t274 - t401) + t267 * (t107 * t270 + t400) - t402 + (-t266 * t356 + t267 * (pkin(2) + t355) + pkin(1)) * t367, (t266 * (qJ(4) * t274 - t356) + t267 * (-t310 + t355) + pkin(1)) * t123 + t372 * (-t266 * (t130 * t270 - t131 * t274) + t267 * (t130 * t274 + t131 * t270)), t266 * (-t121 * t270 + t122 * t274) + t267 * (t121 * t274 + t122 * t270), t266 * (-t270 * t75 + t274 * t77) + t267 * (t270 * t77 + t274 * t75), t266 * (-t136 * t270 + t138 * t274) + t267 * (t136 * t274 + t138 * t270), t266 * (-t119 * t270 + t120 * t274) + t267 * (t119 * t274 + t120 * t270), t266 * (-t137 * t270 + t139 * t274) + t267 * (t137 * t274 + t139 * t270), t266 * (-t151 * t270 + t152 * t274) + t267 * (t151 * t274 + t152 * t270), t266 * (-pkin(7) * t73 - t270 * t37 + t274 * t55) + t267 * (pkin(2) * t124 + pkin(7) * t74 + t270 * t55 + t274 * t37) + pkin(1) * t124 + qJ(2) * (-t266 * t73 + t267 * t74), t266 * (-pkin(7) * t87 - t270 * t38 + t274 * t58) + t267 * (pkin(2) * t378 + pkin(7) * t88 + t270 * t58 + t274 * t38) + pkin(1) * t378 + qJ(2) * (-t266 * t87 + t267 * t88), t266 * (-pkin(7) * t41 - t20 * t270 + t22 * t274) + t267 * (pkin(2) * t142 + pkin(7) * t42 + t20 * t274 + t22 * t270) + pkin(1) * t142 + qJ(2) * (-t266 * t41 + t267 * t42), t266 * (-pkin(7) * t16 - t21 * t270 + t274 * t29) + t267 * (pkin(2) * t99 + pkin(7) * t17 + t21 * t274 + t270 * t29) + pkin(1) * t99 + qJ(2) * (-t16 * t266 + t17 * t267), t266 * (-t270 * t66 + t274 * t68) + t267 * (t270 * t68 + t274 * t66), t266 * (-t270 * t43 + t274 * t44) + t267 * (t270 * t44 + t274 * t43), t266 * (-t270 * t51 + t274 * t53) + t267 * (t270 * t53 + t274 * t51), t266 * (-t270 * t65 + t274 * t67) + t267 * (t270 * t67 + t274 * t65), t266 * (-t270 * t52 + t274 * t54) + t267 * (t270 * t54 + t274 * t52), t266 * (-t270 * t85 + t274 * t86) + t267 * (t270 * t86 + t274 * t85), t266 * (-pkin(7) * t25 - t270 * t7 + t274 * t9) + t267 * (pkin(2) * t69 + pkin(7) * t26 + t270 * t9 + t274 * t7) + pkin(1) * t69 + qJ(2) * (-t25 * t266 + t26 * t267), t266 * (-pkin(7) * t27 + t10 * t274 - t270 * t8) + t267 * (pkin(2) * t71 + pkin(7) * t28 + t10 * t270 + t274 * t8) + pkin(1) * t71 + qJ(2) * (-t266 * t27 + t267 * t28), t266 * (-pkin(7) * t23 - t270 * t5 + t274 * t6) + t267 * (pkin(2) * t60 + pkin(7) * t24 + t270 * t6 + t274 * t5) + pkin(1) * t60 + qJ(2) * (-t23 * t266 + t24 * t267), t266 * (-pkin(7) * t3 - t1 * t270 + t2 * t274) + t267 * (pkin(2) * t14 + pkin(7) * t4 + t1 * t274 + t2 * t270) + pkin(1) * t14 + qJ(2) * (-t266 * t3 + t267 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t320, t321, -t246, -t239, 0, 0, 0, 0, 0, 0, t214, t216, t181, -t208, 0, 0, 0, 0, 0, 0, t214, t181, -t367, -t123, 0, 0, 0, 0, 0, 0, -t124, -t378, -t142, -t99, 0, 0, 0, 0, 0, 0, -t69, -t71, -t60, -t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t331, t365, t243, t331, -t242, qJDD(3), -t149, -t150, 0, 0, -t331, t368, -t365, qJDD(3), t242, t331, pkin(3) * t362 + qJ(4) * t364 - t131, -pkin(3) * t243 - qJ(4) * t242, qJ(4) * t363 + (-t366 - t275) * pkin(3) + t291, -pkin(3) * t131 + qJ(4) * t130, -t162, -t161, -t129, t162, t125, t260, qJ(4) * t118 - t117 * t358 + t63, qJ(4) * t135 - t134 * t358 + t64, qJ(4) * t78 - t358 * t76, qJ(4) * t36 - t35 * t358, -t91, -t59, -t81, t89, -t82, -t113, qJ(4) * t46 - t358 * t45 - t287, qJ(4) * t48 - t358 * t47 - t288, qJ(4) * t40 - t358 * t39 - t286, qJ(4) * t12 - t11 * t358 - t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t362, t243, t366, t131, 0, 0, 0, 0, 0, 0, t117, t134, t76, t35, 0, 0, 0, 0, 0, 0, t45, t47, t39, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162, t161, t129, -t162, -t125, -t260, -t63, -t64, 0, 0, t91, t59, t81, -t89, t82, t113, t287, t288, t286, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, t146, t97, -t147, -t93, t143, -t31, -t32, 0, 0;];
tauJ_reg  = t30;
