% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR5_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:49:35
% EndTime: 2019-03-09 03:49:42
% DurationCPUTime: 2.36s
% Computational Cost: add. (4322->198), mult. (9103->349), div. (0->0), fcn. (9305->8), ass. (0->123)
t147 = sin(qJ(3));
t149 = cos(qJ(3));
t79 = sin(pkin(10));
t80 = cos(pkin(10));
t109 = t147 * t79 - t149 * t80;
t129 = t149 * t79;
t98 = -t147 * t80 - t129;
t159 = t98 * qJD(3);
t95 = -0.2e1 * t159;
t169 = t109 * t95;
t148 = cos(qJ(5));
t119 = t149 * qJD(2);
t123 = qJD(3) * t147;
t125 = qJD(2) * t147;
t139 = pkin(7) + qJ(2);
t53 = t139 * t129;
t61 = t139 * t80;
t27 = qJD(3) * t53 - t80 * t119 + t61 * t123 + t79 * t125;
t23 = -pkin(8) * t159 - t27;
t82 = sin(qJ(5));
t124 = qJD(3) * t149;
t106 = t79 * t123 - t80 * t124;
t110 = t139 * t147;
t28 = (-qJD(3) * t110 + t119) * t79 + t61 * t124 + t80 * t125;
t87 = t106 * pkin(8) + t28;
t168 = t148 * t23 + t82 * t87;
t167 = -0.2e1 * t106 * t109 + 0.2e1 * t159 * t98;
t81 = sin(qJ(6));
t77 = t81 ^ 2;
t83 = cos(qJ(6));
t78 = t83 ^ 2;
t62 = (t77 - t78) * qJD(6);
t164 = 0.2e1 * t62;
t163 = t77 + t78;
t39 = t147 * t61 + t53;
t102 = pkin(8) * t98 + t39;
t40 = -t79 * t110 + t149 * t61;
t32 = t109 * pkin(8) + t40;
t14 = -t148 * t102 + t82 * t32;
t135 = t14 * qJD(5);
t161 = t135 - t168;
t69 = -t80 * pkin(2) - pkin(1);
t34 = t109 * pkin(3) + qJ(4) * t98 + t69;
t26 = -t109 * pkin(4) - t34;
t100 = t148 * t109;
t36 = -t82 * t98 - t100;
t37 = t82 * t109 - t148 * t98;
t89 = t36 * pkin(5) - t37 * pkin(9) + t26;
t162 = -qJD(6) * t89 + t161;
t15 = t82 * t102 + t148 * t32;
t7 = -t81 * t15 + t83 * t89;
t8 = t83 * t15 + t81 * t89;
t158 = -t7 * t81 + t8 * t83;
t122 = qJD(5) * t148;
t5 = t15 * qJD(5) - t148 * t87 + t82 * t23;
t154 = -pkin(3) - pkin(4);
t115 = t148 * t154;
t59 = -t82 * qJ(4) + t115;
t57 = pkin(5) - t59;
t60 = t148 * qJ(4) + t82 * t154;
t58 = -pkin(9) + t60;
t157 = -t5 + (t36 * t58 - t37 * t57) * qJD(6);
t156 = -0.2e1 * t39 * t106 + 0.2e1 * t27 * t109 + 0.2e1 * t159 * t40 - 0.2e1 * t28 * t98;
t155 = 2 * qJD(4);
t153 = t14 * t5;
t152 = t5 * t81;
t45 = t82 * qJD(4) + t60 * qJD(5);
t146 = t14 * t45;
t145 = t37 * t83;
t144 = t45 * t81;
t143 = t45 * t83;
t137 = qJD(5) * t82;
t18 = -qJD(5) * t100 + t148 * t106 - t137 * t98 + t159 * t82;
t142 = t77 * t18;
t17 = t78 * t18;
t19 = t37 * qJD(5) - t82 * t106 + t148 * t159;
t141 = t81 * t19;
t140 = t81 * t83;
t72 = qJD(6) * t81;
t73 = qJD(6) * t83;
t134 = 0.2e1 * t36 * t19;
t133 = -0.2e1 * pkin(5) * qJD(6);
t132 = t5 * t148;
t131 = t81 * t73;
t130 = t45 * t148;
t44 = qJ(4) * t137 - t148 * qJD(4) - qJD(5) * t115;
t30 = t163 * t44;
t127 = 0.4e1 * t37 * t140;
t126 = -t40 * t27 + t28 * t39;
t121 = qJD(6) * (pkin(5) + t57);
t120 = qJD(6) * t148;
t35 = t37 ^ 2;
t118 = t35 * t131;
t117 = 0.2e1 * (t79 ^ 2 + t80 ^ 2) * qJD(2);
t114 = pkin(5) * t18 - pkin(9) * t19;
t113 = pkin(5) * t37 + pkin(9) * t36;
t112 = t7 * t83 + t8 * t81;
t108 = t36 * t44 + t37 * t45;
t105 = -t81 * t18 + t37 * t73;
t104 = -t18 * t83 - t37 * t72;
t13 = t36 * t73 + t141;
t103 = t148 * t37 + t36 * t82;
t99 = t163 * t148;
t25 = -pkin(3) * t159 + t106 * qJ(4) + qJD(4) * t98;
t21 = pkin(4) * t159 - t25;
t86 = t19 * pkin(5) + t18 * pkin(9) + t21;
t2 = t15 * t72 + t162 * t83 - t81 * t86;
t3 = -t15 * t73 + t162 * t81 + t83 * t86;
t93 = -qJD(6) * t158 + t2 * t81 - t3 * t83;
t1 = -t112 * qJD(6) - t2 * t83 - t3 * t81;
t91 = -qJD(6) * t14 - t18 * t57 - t19 * t58 + t108;
t90 = t148 * t18 - t82 * t19 + (-t148 * t36 + t37 * t82) * qJD(5);
t64 = -0.2e1 * t131;
t63 = 0.2e1 * t131;
t56 = -0.2e1 * t62;
t50 = t81 * t120 + t83 * t137;
t49 = -t83 * t120 + t81 * t137;
t48 = t99 * qJD(5);
t38 = 0.2e1 * t98 * t106;
t12 = -t19 * t83 + t36 * t72;
t10 = t18 * t140 + t37 * t62;
t9 = qJD(6) * t127 - t142 + t17;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, qJ(2) * t117, t38, -t167, 0, t169, 0, 0, t69 * t95, -0.2e1 * t69 * t106, t156, 0.2e1 * t126, t38, 0, t167, 0, 0, t169, 0.2e1 * t25 * t109 - 0.2e1 * t159 * t34, t156, 0.2e1 * t34 * t106 + 0.2e1 * t25 * t98, 0.2e1 * t25 * t34 + 0.2e1 * t126, -0.2e1 * t37 * t18, 0.2e1 * t18 * t36 - 0.2e1 * t19 * t37, 0, t134, 0, 0, 0.2e1 * t19 * t26 + 0.2e1 * t21 * t36, -0.2e1 * t18 * t26 + 0.2e1 * t21 * t37, -0.2e1 * t14 * t18 - 0.2e1 * t15 * t19 + 0.2e1 * t161 * t36 + 0.2e1 * t5 * t37, -0.2e1 * t15 * t161 + 0.2e1 * t26 * t21 + 0.2e1 * t153, -0.2e1 * t37 * t17 - 0.2e1 * t118, t18 * t127 + t35 * t164, 0.2e1 * t104 * t36 + 0.2e1 * t19 * t145, -0.2e1 * t37 * t142 + 0.2e1 * t118, -0.2e1 * t105 * t36 - 0.2e1 * t37 * t141, t134, 0.2e1 * t105 * t14 + 0.2e1 * t37 * t152 + 0.2e1 * t7 * t19 + 0.2e1 * t3 * t36, 0.2e1 * t104 * t14 + 0.2e1 * t5 * t145 - 0.2e1 * t8 * t19 + 0.2e1 * t2 * t36, 0.2e1 * t112 * t18 + 0.2e1 * t93 * t37, -0.2e1 * t2 * t8 + 0.2e1 * t3 * t7 + 0.2e1 * t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159, -t106, 0, 0, 0, 0, 0, 0, 0, 0, -t159, 0, t106, t25, 0, 0, 0, 0, 0, 0, -t19, t18, 0, -t21, 0, 0, 0, 0, 0, 0, t12, t13, -t17 - t142, t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, 0, t159, 0, -t28, t27, 0, 0, 0, -t106, 0, 0, -t159, 0, -t28, pkin(3) * t106 + qJ(4) * t159 - t109 * qJD(4), -t27, -pkin(3) * t28 - qJ(4) * t27 + qJD(4) * t40, 0, 0, t18, 0, t19, 0, t5, -t161, t18 * t59 - t19 * t60 + t108, -t15 * t44 - t161 * t60 - t5 * t59 + t146, t10, t9, -t13, -t10, t12, 0, -t157 * t83 + t91 * t81, t157 * t81 + t91 * t83, -t1, t1 * t58 - t158 * t44 + t5 * t57 + t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, qJ(4) * t155, 0, 0, 0, 0, 0, 0, 0.2e1 * t45, -0.2e1 * t44, 0, -0.2e1 * t44 * t60 - 0.2e1 * t45 * t59, t63, t56, 0, t64, 0, 0, -0.2e1 * t57 * t72 + 0.2e1 * t143, -0.2e1 * t57 * t73 - 0.2e1 * t144, 0.2e1 * t30, -0.2e1 * t58 * t30 + 0.2e1 * t57 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, t90, t15 * t122 + t168 * t82 - t132, 0, 0, 0, 0, 0, 0, -t103 * t73 + t90 * t81, t103 * t72 + t90 * t83, 0, -t132 + (t1 + t135) * t82 + t158 * t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t122, 0, -t130 - t44 * t82 + (t148 * t60 - t59 * t82) * qJD(5), 0, 0, 0, 0, 0, 0, t50, -t49, -t48, -t130 - t82 * t30 + (t57 * t82 + t99 * t58) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (-t148 + t99) * t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t19, 0, -t5, t161, 0, 0, -t10, -t9, t13, t10, -t12, 0, -t5 * t83 + t114 * t81 + (-t113 * t83 + t14 * t81) * qJD(6), t152 + t114 * t83 + (t113 * t81 + t14 * t83) * qJD(6), t1, -t5 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, t44, 0, 0, t64, t164, 0, t63, 0, 0, t81 * t121 - t143, t83 * t121 + t144, -t30, -t45 * pkin(5) - pkin(9) * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137, -t122, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t49, t48 (-pkin(5) * t82 + t99 * pkin(9)) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t56, 0, t64, 0, 0, t81 * t133, t83 * t133, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t105, t19, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, t73, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, 0, t72, 0, t81 * t44 - t58 * t73, t44 * t83 + t58 * t72, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t81 * t122 - t82 * t73, -t83 * t122 + t82 * t72, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, -t72, 0, -pkin(9) * t73, pkin(9) * t72, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
