% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 18:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:54:09
% EndTime: 2019-05-05 18:54:36
% DurationCPUTime: 27.48s
% Computational Cost: add. (108268->758), mult. (264310->1103), div. (0->0), fcn. (200696->10), ass. (0->528)
t909 = sin(pkin(10));
t910 = cos(pkin(10));
t917 = cos(qJ(3));
t971 = qJD(1) * t917;
t913 = sin(qJ(3));
t972 = qJD(1) * t913;
t872 = t909 * t971 + t910 * t972;
t867 = t872 ^ 2;
t919 = qJD(3) ^ 2;
t819 = t919 + t867;
t870 = t909 * t972 - t910 * t971;
t834 = t872 * t870;
t1020 = qJDD(3) + t834;
t993 = t1020 * t913;
t748 = t819 * t917 + t993;
t992 = t1020 * t917;
t769 = t819 * t913 - t992;
t675 = t748 * t910 - t769 * t909;
t1087 = qJ(2) * t675;
t709 = t748 * t909 + t769 * t910;
t1086 = qJ(2) * t709;
t914 = sin(qJ(1));
t1085 = t709 * t914;
t918 = cos(qJ(1));
t1084 = t709 * t918;
t1083 = -pkin(1) * t675 - pkin(2) * t748;
t1014 = t870 ^ 2;
t854 = t919 - t1014;
t759 = t854 * t913 - t992;
t765 = t854 * t917 + t993;
t704 = t759 * t909 - t765 * t910;
t966 = qJDD(1) * t910;
t868 = qJDD(1) * t909 * t913 - t917 * t966;
t1082 = t704 * t914 + t868 * t918;
t1081 = t704 * t918 - t868 * t914;
t1021 = (t909 * t917 + t910 * t913) * qJDD(1);
t852 = -t867 + t919;
t822 = qJDD(3) - t834;
t991 = t822 * t913;
t1067 = t917 * t852 + t991;
t811 = t822 * t917;
t1068 = -t852 * t913 + t811;
t1069 = -t1067 * t909 + t1068 * t910;
t1080 = -t1021 * t918 + t1069 * t914;
t1079 = t1021 * t914 + t1069 * t918;
t1077 = pkin(7) * t748;
t1076 = pkin(7) * t769;
t1037 = t1021 * t913 - t868 * t917;
t1038 = -t917 * t1021 - t868 * t913;
t1044 = t1037 * t910 - t1038 * t909;
t787 = t867 + t1014;
t1058 = t1044 * t918 - t787 * t914;
t1075 = pkin(6) * t1058;
t1059 = t1044 * t914 + t787 * t918;
t1074 = pkin(6) * t1059;
t1022 = -t919 - t1014;
t1031 = t1022 * t917 - t991;
t1032 = t1022 * t913 + t811;
t1046 = t1031 * t910 - t1032 * t909;
t970 = t872 * qJD(3);
t826 = t868 + 0.2e1 * t970;
t1061 = t1046 * t918 + t826 * t914;
t1073 = pkin(6) * t1061;
t1062 = t1046 * t914 - t918 * t826;
t1072 = pkin(6) * t1062;
t1071 = t759 * t910 + t765 * t909;
t1070 = t1067 * t910 + t1068 * t909;
t1043 = t1037 * t909 + t1038 * t910;
t1066 = qJ(2) * t1043;
t1045 = t1031 * t909 + t1032 * t910;
t1065 = qJ(2) * t1045;
t636 = -pkin(1) * t1043 - pkin(2) * t1038;
t1064 = -pkin(1) * t1045 - pkin(2) * t1032;
t1063 = -pkin(1) * t826 + qJ(2) * t1046;
t1060 = pkin(1) * t787 + qJ(2) * t1044;
t1054 = pkin(7) * t1031;
t1053 = pkin(7) * t1032;
t1052 = pkin(7) * t1038;
t831 = t867 - t1014;
t1049 = t831 * t914;
t1048 = t831 * t918;
t884 = g(1) * t918 + g(2) * t914;
t920 = qJD(1) ^ 2;
t1042 = -pkin(1) * t920 + qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) - t884;
t1047 = pkin(2) * t787 + pkin(7) * t1037;
t1012 = 2 * qJD(4);
t862 = qJD(3) * t870;
t829 = t1021 - t862;
t1024 = -t862 + t829;
t1041 = t1024 * qJ(4);
t912 = sin(qJ(5));
t916 = cos(qJ(5));
t810 = t870 * t912 + t872 * t916;
t906 = qJD(3) - qJD(5);
t911 = sin(qJ(6));
t915 = cos(qJ(6));
t783 = t810 * t911 + t915 * t906;
t785 = t810 * t915 - t906 * t911;
t724 = t785 * t783;
t827 = t868 + t970;
t947 = -t916 * t827 + t912 * t829;
t720 = -qJD(5) * t810 - t947;
t928 = qJDD(6) - t720;
t1026 = -t724 + t928;
t1040 = t1026 * t911;
t1039 = t1026 * t915;
t953 = t917 * t862;
t933 = t827 * t913 + t953;
t938 = -t917 * t827 + t862 * t913;
t1016 = -t909 * t938 + t910 * t933;
t955 = t918 * t834;
t1036 = t1016 * t914 + t955;
t956 = t914 * t834;
t1035 = t1016 * t918 - t956;
t931 = (-t870 * t913 - t872 * t917) * qJD(3);
t849 = t913 * t970;
t937 = t849 - t953;
t1017 = -t909 * t931 + t910 * t937;
t1034 = t914 * qJDD(3) + t1017 * t918;
t1033 = -qJDD(3) * t918 + t1017 * t914;
t903 = -qJDD(3) + qJDD(5);
t808 = -t916 * t870 + t872 * t912;
t996 = t808 * t810;
t934 = t903 - t996;
t1028 = t912 * t934;
t1027 = t916 * t934;
t721 = -qJD(5) * t808 + t827 * t912 + t829 * t916;
t796 = t808 * t906;
t682 = t721 + t796;
t1010 = pkin(2) * t910;
t904 = t909 ^ 2;
t905 = t910 ^ 2;
t1023 = t904 + t905;
t883 = t914 * g(1) - t918 * g(2);
t939 = -qJDD(2) + t883;
t820 = (pkin(1) + t1010) * qJDD(1) + (pkin(7) * t1023 + qJ(2)) * t920 + t939;
t1025 = -pkin(3) * t970 + t820;
t803 = qJD(6) + t808;
t738 = t803 * t783;
t954 = t783 * qJD(6) - t915 * t721 - t911 * t903;
t632 = t954 + t738;
t1007 = t910 * g(3);
t792 = -t1007 + (-pkin(7) * qJDD(1) + t1010 * t920 - t1042) * t909;
t836 = -g(3) * t909 + t1042 * t910;
t897 = t905 * t920;
t797 = -pkin(2) * t897 + pkin(7) * t966 + t836;
t727 = t913 * t792 + t917 * t797;
t815 = pkin(3) * t870 - qJ(4) * t872;
t936 = qJDD(3) * qJ(4) + qJD(3) * t1012 - t870 * t815 + t727;
t1019 = t920 * t1023;
t948 = t911 * t721 - t915 * t903;
t627 = (qJD(6) - t803) * t785 + t948;
t1018 = t909 * t937 + t910 * t931;
t1015 = t909 * t933 + t910 * t938;
t781 = t783 ^ 2;
t782 = t785 ^ 2;
t802 = t803 ^ 2;
t806 = t808 ^ 2;
t807 = t810 ^ 2;
t1013 = t906 ^ 2;
t1011 = pkin(3) + pkin(4);
t1009 = pkin(3) * t917;
t1008 = t827 * pkin(3);
t1006 = qJDD(1) * pkin(1);
t643 = t724 + t928;
t1005 = t643 * t911;
t1004 = t643 * t915;
t726 = -t917 * t792 + t913 * t797;
t653 = -t726 * t917 + t727 * t913;
t1003 = t653 * t909;
t1002 = t653 * t910;
t742 = -t903 - t996;
t1001 = t742 * t912;
t1000 = t742 * t916;
t999 = t1024 * t913;
t998 = t803 * t911;
t997 = t803 * t915;
t995 = t820 * t913;
t994 = t820 * t917;
t990 = t826 * t913;
t988 = t826 * t917;
t864 = t920 * qJ(2) + t1006 + t939;
t986 = t864 * t914;
t985 = t864 * t918;
t981 = t904 * t920;
t980 = t906 * t912;
t979 = t906 * t916;
t978 = t909 * t910;
t687 = -pkin(3) * t919 + t936;
t848 = -qJD(3) * pkin(4) - pkin(8) * t872;
t639 = -pkin(4) * t1014 + pkin(8) * t827 + qJD(3) * t848 + t687;
t929 = t872 * t815 + qJDD(4) + t726;
t926 = -qJDD(3) * pkin(3) + t929;
t688 = t919 * qJ(4) - t926;
t924 = (-t829 - t862) * pkin(8) - t822 * pkin(4) - t688;
t571 = t912 * t639 - t916 * t924;
t745 = pkin(5) * t808 - pkin(9) * t810;
t550 = -t903 * pkin(5) - pkin(9) * t1013 + t745 * t810 + t571;
t977 = t911 * t550;
t925 = t1025 + t1041;
t633 = -t1008 - t827 * pkin(4) - t1014 * pkin(8) + (t1012 + t848) * t872 + t925;
t976 = t912 * t633;
t975 = t915 * t550;
t974 = t916 * t633;
t572 = t916 * t639 + t912 * t924;
t551 = -pkin(5) * t1013 + pkin(9) * t903 - t745 * t808 + t572;
t560 = t633 - t682 * pkin(9) + (-t810 * t906 - t720) * pkin(5);
t501 = t915 * t551 + t911 * t560;
t973 = t787 - t919;
t965 = qJDD(1) * t914;
t964 = qJDD(1) * t918;
t962 = t872 * t1012;
t960 = t912 * t724;
t959 = t916 * t724;
t958 = t914 * t996;
t957 = t918 * t996;
t952 = -qJ(4) * t913 - pkin(2);
t951 = pkin(5) * t912 + qJ(4);
t950 = t864 + t1006;
t500 = t551 * t911 - t915 * t560;
t464 = t911 * t500 + t915 * t501;
t654 = t726 * t913 + t917 * t727;
t835 = t1042 * t909 + t1007;
t757 = t835 * t909 + t910 * t836;
t844 = -t883 * t914 - t918 * t884;
t945 = pkin(5) * t916 + t1011;
t882 = -t914 * t920 + t964;
t942 = -pkin(6) * t882 - g(3) * t914;
t774 = t829 * t913 + t917 * t970;
t775 = t829 * t917 - t849;
t715 = -t774 * t909 + t775 * t910;
t941 = t914 * t715 - t955;
t940 = t918 * t715 + t956;
t463 = -t500 * t915 + t501 * t911;
t509 = -t571 * t916 + t572 * t912;
t510 = t912 * t571 + t916 * t572;
t756 = t835 * t910 - t836 * t909;
t843 = t883 * t918 - t884 * t914;
t881 = t918 * t920 + t965;
t875 = t910 * t1019;
t840 = -t875 * t914 + t910 * t964;
t932 = t875 * t918 + t910 * t965;
t927 = (-qJD(5) - t906) * t810 - t947;
t923 = t925 + t962;
t896 = t905 * qJDD(1);
t895 = t904 * qJDD(1);
t880 = t897 - t981;
t879 = t897 + t981;
t878 = t896 - t895;
t877 = t896 + t895;
t874 = t909 * t1019;
t865 = -pkin(6) * t881 + g(3) * t918;
t847 = t882 * t978;
t846 = t881 * t978;
t841 = t874 * t918 + t909 * t965;
t839 = t874 * t914 - t909 * t964;
t838 = t877 * t918 - t879 * t914;
t837 = t877 * t914 + t879 * t918;
t828 = t1021 - 0.2e1 * t862;
t794 = -t807 + t1013;
t793 = t806 - t1013;
t790 = -t807 - t1013;
t754 = -t828 * t913 - t988;
t752 = t828 * t917 - t990;
t746 = t807 - t806;
t741 = -t1013 - t806;
t735 = -t782 + t802;
t734 = t781 - t802;
t733 = (t808 * t916 - t810 * t912) * t906;
t732 = (-t808 * t912 - t810 * t916) * t906;
t731 = t757 * t918 - t986;
t730 = t757 * t914 + t985;
t729 = t988 + t999;
t728 = -t1024 * t917 + t990;
t723 = -t782 + t781;
t722 = -t994 + t1077;
t719 = -t995 - t1053;
t717 = -t806 - t807;
t712 = t774 * t910 + t775 * t909;
t701 = -t782 - t802;
t700 = t793 * t916 + t1001;
t699 = -t794 * t912 + t1027;
t698 = -t793 * t912 + t1000;
t697 = -t794 * t916 - t1028;
t696 = -pkin(2) * t828 + t1076 - t995;
t695 = -t790 * t912 + t1000;
t694 = t790 * t916 + t1001;
t693 = -t802 - t781;
t690 = t781 + t782;
t689 = -pkin(2) * t826 + t1054 + t994;
t686 = -t752 * t909 + t754 * t910;
t683 = t721 - t796;
t678 = (qJD(5) - t906) * t810 + t947;
t673 = t923 - t1008;
t672 = t721 * t916 + t810 * t980;
t671 = -t721 * t912 + t810 * t979;
t670 = -t720 * t912 - t808 * t979;
t669 = -t720 * t916 + t808 * t980;
t668 = pkin(3) * t1021 + qJ(4) * t868 + t636;
t667 = t828 * t914 + t1084;
t665 = -t828 * t918 + t1085;
t663 = t741 * t916 - t1028;
t662 = t741 * t912 + t1027;
t660 = -qJD(6) * t785 - t948;
t659 = (-t783 * t915 + t785 * t911) * t803;
t658 = (-t783 * t911 - t785 * t915) * t803;
t657 = -t732 * t913 + t733 * t917;
t656 = t732 * t917 + t733 * t913;
t655 = -t728 * t909 + t729 * t910;
t652 = (-t826 - t827) * pkin(3) + t923;
t649 = qJ(4) * t973 + t926;
t648 = pkin(3) * t973 + t936;
t645 = -t1008 + t1025 + t962 + 0.2e1 * t1041;
t641 = -t1024 * t914 - t1084;
t640 = t1024 * t918 - t1085;
t638 = pkin(2) * t820 + pkin(7) * t654;
t631 = -t738 + t954;
t628 = (-qJD(6) - t803) * t785 - t948;
t626 = -t653 - t1052;
t625 = -t698 * t913 + t700 * t917;
t624 = -t697 * t913 + t699 * t917;
t623 = t698 * t917 + t700 * t913;
t622 = t697 * t917 + t699 * t913;
t621 = -t785 * t998 - t915 * t954;
t620 = t785 * t997 - t911 * t954;
t619 = -t660 * t911 + t783 * t997;
t618 = t660 * t915 + t783 * t998;
t617 = t694 * t913 + t695 * t917;
t616 = -t694 * t917 + t695 * t913;
t615 = -t1083 + t727;
t614 = -qJ(4) * t988 - t652 * t913 - t1053;
t613 = t659 * t916 + t912 * t928;
t612 = -t659 * t912 + t916 * t928;
t611 = t734 * t915 - t1005;
t610 = -t735 * t911 + t1039;
t609 = t734 * t911 + t1004;
t608 = t735 * t915 + t1040;
t607 = t687 * t917 - t688 * t913;
t606 = t687 * t913 + t688 * t917;
t605 = t1047 + t654;
t604 = t683 * t912 + t916 * t927;
t603 = -t678 * t916 - t682 * t912;
t602 = -t683 * t916 + t912 * t927;
t601 = t678 * t912 - t682 * t916;
t600 = t1064 + t726;
t599 = t917 * t652 + t826 * t952 + t1054;
t598 = -t671 * t913 + t672 * t917;
t597 = -t669 * t913 + t670 * t917;
t596 = t671 * t917 + t672 * t913;
t595 = t669 * t917 + t670 * t913;
t594 = t662 * t913 + t663 * t917;
t593 = -t662 * t917 + t663 * t913;
t592 = -pkin(3) * t999 + t645 * t917 - t1077;
t591 = -t701 * t911 - t1004;
t590 = t701 * t915 - t1005;
t589 = t693 * t915 - t1040;
t588 = t693 * t911 + t1039;
t587 = -t696 * t909 + t722 * t910 + t1087;
t586 = t621 * t916 + t960;
t585 = t619 * t916 - t960;
t584 = -t621 * t912 + t959;
t583 = -t619 * t912 - t959;
t582 = -t656 * t909 + t657 * t910;
t581 = t654 * t910 - t1003;
t580 = t654 * t909 + t1002;
t579 = (-t1022 - t919) * qJ(4) + (-qJDD(3) - t822) * pkin(3) + t929 + t1064;
t578 = -t1076 + t913 * t645 + (pkin(2) + t1009) * t1024;
t577 = -t689 * t909 + t719 * t910 - t1065;
t576 = t581 * t918 - t820 * t914;
t575 = t581 * t914 + t820 * t918;
t574 = -t648 * t913 + t649 * t917 - t1052;
t573 = -qJ(4) * t1020 + (-t819 + t919) * pkin(3) - t936 + t1083;
t570 = t648 * t917 + t649 * t913 + t1047;
t569 = -t627 * t915 - t631 * t911;
t568 = t628 * t915 + t632 * t911;
t567 = -t627 * t911 + t631 * t915;
t566 = t628 * t911 - t632 * t915;
t565 = -pkin(8) * t694 + qJ(4) * t682 + t974;
t564 = -t623 * t909 + t625 * t910;
t563 = -t622 * t909 + t624 * t910;
t562 = -t616 * t909 + t617 * t910;
t561 = t616 * t910 + t617 * t909;
t557 = -pkin(8) * t662 + qJ(4) * t678 + t976;
t556 = t611 * t916 - t627 * t912;
t555 = t610 * t916 - t631 * t912;
t554 = -t611 * t912 - t627 * t916;
t553 = -t610 * t912 - t631 * t916;
t552 = -pkin(1) * t580 - pkin(2) * t653;
t548 = -t612 * t913 + t613 * t917;
t547 = t612 * t917 + t613 * t913;
t546 = t591 * t916 - t632 * t912;
t545 = t591 * t912 + t632 * t916;
t544 = t589 * t916 - t628 * t912;
t543 = t589 * t912 + t628 * t916;
t542 = -t606 * t909 + t607 * t910;
t541 = t606 * t910 + t607 * t909;
t540 = -pkin(7) * t606 + (-pkin(3) * t913 + qJ(4) * t917) * t673;
t539 = t568 * t916 - t723 * t912;
t538 = -t568 * t912 - t723 * t916;
t537 = t602 * t913 + t604 * t917;
t536 = -t601 * t913 + t603 * t917;
t535 = -t602 * t917 + t604 * t913;
t534 = t601 * t917 + t603 * t913;
t533 = -t596 * t909 + t598 * t910;
t532 = -t595 * t909 + t597 * t910;
t531 = t569 * t916 - t690 * t912;
t530 = t569 * t912 + t690 * t916;
t529 = -t593 * t909 + t594 * t910;
t528 = t593 * t910 + t594 * t909;
t527 = -pkin(8) * t695 + t1011 * t682 - t976;
t526 = t562 * t918 - t682 * t914;
t525 = t562 * t914 + t682 * t918;
t524 = -pkin(8) * t663 + t1011 * t678 + t974;
t523 = -t605 * t909 + t626 * t910 - t1066;
t522 = -t584 * t913 + t586 * t917;
t521 = -t583 * t913 + t585 * t917;
t520 = t584 * t917 + t586 * t913;
t519 = t583 * t917 + t585 * t913;
t518 = -t599 * t909 + t614 * t910 - t1065;
t517 = t542 * t918 - t673 * t914;
t516 = t542 * t914 + t673 * t918;
t515 = pkin(7) * t607 + (-t952 + t1009) * t673;
t514 = -pkin(7) * t1002 - qJ(2) * t580 - t638 * t909;
t513 = t529 * t918 - t678 * t914;
t512 = t529 * t914 + t678 * t918;
t511 = -t578 * t909 + t592 * t910 - t1087;
t508 = -pkin(9) * t590 + t975;
t507 = -pkin(9) * t588 + t977;
t506 = -t570 * t909 + t574 * t910 - t1066;
t505 = -t554 * t913 + t556 * t917;
t504 = -t553 * t913 + t555 * t917;
t503 = t554 * t917 + t556 * t913;
t502 = t553 * t917 + t555 * t913;
t498 = -pkin(8) * t509 + qJ(4) * t633;
t497 = -t547 * t909 + t548 * t910;
t496 = t545 * t913 + t546 * t917;
t495 = -t545 * t917 + t546 * t913;
t494 = -pkin(1) * t541 - pkin(2) * t606 - pkin(3) * t688 - qJ(4) * t687;
t493 = t543 * t913 + t544 * t917;
t492 = -t543 * t917 + t544 * t913;
t491 = -t538 * t913 + t539 * t917;
t490 = t538 * t917 + t539 * t913;
t489 = -t535 * t909 + t537 * t910;
t488 = -t534 * t909 + t536 * t910;
t487 = t535 * t910 + t537 * t909;
t486 = t530 * t913 + t531 * t917;
t485 = -t530 * t917 + t531 * t913;
t484 = -pkin(8) * t602 + qJ(4) * t717 - t509;
t483 = t489 * t918 - t717 * t914;
t482 = t489 * t914 + t717 * t918;
t481 = -pkin(8) * t510 + t1011 * t633;
t480 = -pkin(8) * t604 + t1011 * t717 - t510;
t479 = -t520 * t909 + t522 * t910;
t478 = -t519 * t909 + t521 * t910;
t477 = -pkin(5) * t590 + t501;
t476 = -pkin(7) * t616 - t527 * t913 + t565 * t917;
t475 = -pkin(5) * t588 + t500;
t474 = -pkin(7) * t593 - t524 * t913 + t557 * t917;
t473 = pkin(2) * t682 + pkin(7) * t617 + t527 * t917 + t565 * t913;
t472 = -pkin(1) * t561 - pkin(2) * t616 - qJ(4) * t695 + t1011 * t694 - t572;
t471 = pkin(2) * t678 + pkin(7) * t594 + t524 * t917 + t557 * t913;
t470 = t509 * t913 + t510 * t917;
t469 = -t509 * t917 + t510 * t913;
t468 = -pkin(1) * t528 - pkin(2) * t593 - qJ(4) * t663 + t1011 * t662 - t571;
t467 = -qJ(2) * t541 - t515 * t909 + t540 * t910;
t466 = -t503 * t909 + t505 * t910;
t465 = -t502 * t909 + t504 * t910;
t462 = -t495 * t909 + t496 * t910;
t461 = t495 * t910 + t496 * t909;
t460 = -t492 * t909 + t493 * t910;
t459 = t492 * t910 + t493 * t909;
t458 = -t490 * t909 + t491 * t910;
t457 = -t485 * t909 + t486 * t910;
t456 = t485 * t910 + t486 * t909;
t455 = t462 * t918 - t590 * t914;
t454 = t462 * t914 + t590 * t918;
t453 = -pkin(9) * t567 - t463;
t452 = t460 * t918 - t588 * t914;
t451 = t460 * t914 + t588 * t918;
t450 = -pkin(1) * t487 - pkin(2) * t535 - qJ(4) * t604 + t1011 * t602;
t449 = t464 * t916 + t550 * t912;
t448 = t464 * t912 - t550 * t916;
t447 = t457 * t918 - t567 * t914;
t446 = t457 * t914 + t567 * t918;
t445 = -pkin(8) * t545 + qJ(4) * t590 - t477 * t912 + t508 * t916;
t444 = -pkin(8) * t543 + qJ(4) * t588 - t475 * t912 + t507 * t916;
t443 = -pkin(7) * t535 - t480 * t913 + t484 * t917;
t442 = pkin(2) * t717 + pkin(7) * t537 + t480 * t917 + t484 * t913;
t441 = -qJ(2) * t561 - t473 * t909 + t476 * t910;
t440 = -pkin(8) * t546 + t1011 * t590 - t916 * t477 - t912 * t508;
t439 = -t469 * t909 + t470 * t910;
t438 = t469 * t910 + t470 * t909;
t437 = -pkin(8) * t544 + t1011 * t588 - t916 * t475 - t912 * t507;
t436 = t439 * t918 - t633 * t914;
t435 = t439 * t914 + t633 * t918;
t434 = -qJ(2) * t528 - t471 * t909 + t474 * t910;
t433 = -pkin(7) * t469 - t481 * t913 + t498 * t917;
t432 = -pkin(8) * t530 + t916 * t453 + t567 * t951;
t431 = pkin(2) * t633 + pkin(7) * t470 + t481 * t917 + t498 * t913;
t430 = -pkin(8) * t531 - t912 * t453 + t567 * t945;
t429 = t448 * t913 + t449 * t917;
t428 = -t448 * t917 + t449 * t913;
t427 = -pkin(1) * t461 - pkin(2) * t495 + pkin(5) * t632 + pkin(9) * t591 - qJ(4) * t546 + t1011 * t545 + t977;
t426 = -pkin(1) * t459 - pkin(2) * t492 + pkin(5) * t628 + pkin(9) * t589 - qJ(4) * t544 + t1011 * t543 - t975;
t425 = -pkin(7) * t495 - t440 * t913 + t445 * t917;
t424 = -qJ(2) * t487 - t442 * t909 + t443 * t910;
t423 = -pkin(7) * t492 - t437 * t913 + t444 * t917;
t422 = -pkin(1) * t438 - pkin(2) * t469 - qJ(4) * t510 + t1011 * t509;
t421 = pkin(2) * t590 + pkin(7) * t496 + t440 * t917 + t445 * t913;
t420 = pkin(2) * t588 + pkin(7) * t493 + t437 * t917 + t444 * t913;
t419 = -pkin(1) * t456 - pkin(2) * t485 + pkin(5) * t690 + pkin(9) * t569 - qJ(4) * t531 + t1011 * t530 + t464;
t418 = -pkin(8) * t448 + (-pkin(9) * t916 + t951) * t463;
t417 = -pkin(7) * t485 - t430 * t913 + t432 * t917;
t416 = pkin(2) * t567 + pkin(7) * t486 + t430 * t917 + t432 * t913;
t415 = -t428 * t909 + t429 * t910;
t414 = t428 * t910 + t429 * t909;
t413 = -pkin(8) * t449 + (pkin(9) * t912 + t945) * t463;
t412 = -qJ(2) * t438 - t431 * t909 + t433 * t910;
t411 = t415 * t918 - t463 * t914;
t410 = t415 * t914 + t463 * t918;
t409 = -qJ(2) * t461 - t421 * t909 + t425 * t910;
t408 = -qJ(2) * t459 - t420 * t909 + t423 * t910;
t407 = -qJ(2) * t456 - t416 * t909 + t417 * t910;
t406 = -pkin(7) * t428 - t413 * t913 + t418 * t917;
t405 = -pkin(1) * t414 - pkin(2) * t428 - pkin(5) * t550 + pkin(9) * t464 - qJ(4) * t449 + t1011 * t448;
t404 = pkin(2) * t463 + pkin(7) * t429 + t413 * t917 + t418 * t913;
t403 = -qJ(2) * t414 - t404 * t909 + t406 * t910;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t881, -t882, 0, t844, 0, 0, 0, 0, 0, 0, -t932, t841, t838, t731, 0, 0, 0, 0, 0, 0, t1061, t667, t1058, t576, 0, 0, 0, 0, 0, 0, t1061, t1058, t641, t517, 0, 0, 0, 0, 0, 0, t513, t526, t483, t436, 0, 0, 0, 0, 0, 0, t452, t455, t447, t411; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t882, -t881, 0, t843, 0, 0, 0, 0, 0, 0, t840, t839, t837, t730, 0, 0, 0, 0, 0, 0, t1062, t665, t1059, t575, 0, 0, 0, 0, 0, 0, t1062, t1059, t640, t516, 0, 0, 0, 0, 0, 0, t512, t525, t482, t435, 0, 0, 0, 0, 0, 0, t451, t454, t446, t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t756, 0, 0, 0, 0, 0, 0, t1045, -t675, t1043, t580, 0, 0, 0, 0, 0, 0, t1045, t1043, t675, t541, 0, 0, 0, 0, 0, 0, t528, t561, t487, t438, 0, 0, 0, 0, 0, 0, t459, t461, t456, t414; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t882, 0, -t881, 0, t942, -t865, -t843, -pkin(6) * t843, t847, t878 * t918 - t880 * t914, t841, -t847, t932, 0, -pkin(6) * t840 - t835 * t914 - t909 * t985, -pkin(6) * t839 - t836 * t914 - t910 * t985, -pkin(6) * t837 + t756 * t918, -pkin(6) * t730 - (pkin(1) * t914 - qJ(2) * t918) * t756, t940, t686 * t918 + t1049, t1079, t1035, t1081, t1034, t577 * t918 - t600 * t914 - t1072, -pkin(6) * t665 + t587 * t918 - t615 * t914, t523 * t918 - t636 * t914 - t1074, -pkin(6) * t575 + t514 * t918 - t552 * t914, t940, t1079, t655 * t918 - t1049, t1034, -t1081, t1035, t518 * t918 - t579 * t914 - t1072, t506 * t918 - t668 * t914 - t1074, -pkin(6) * t640 + t511 * t918 - t573 * t914, -pkin(6) * t516 + t467 * t918 - t494 * t914, t533 * t918 - t958, t488 * t918 - t746 * t914, t563 * t918 - t683 * t914, t532 * t918 + t958, t564 * t918 - t914 * t927, t582 * t918 - t903 * t914, -pkin(6) * t512 + t434 * t918 - t468 * t914, -pkin(6) * t525 + t441 * t918 - t472 * t914, -pkin(6) * t482 + t424 * t918 - t450 * t914, -pkin(6) * t435 + t412 * t918 - t422 * t914, t479 * t918 - t620 * t914, t458 * t918 - t566 * t914, t465 * t918 - t608 * t914, t478 * t918 - t618 * t914, t466 * t918 - t609 * t914, t497 * t918 - t658 * t914, -pkin(6) * t451 + t408 * t918 - t426 * t914, -pkin(6) * t454 + t409 * t918 - t427 * t914, -pkin(6) * t446 + t407 * t918 - t419 * t914, -pkin(6) * t410 + t403 * t918 - t405 * t914; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t881, 0, t882, 0, t865, t942, t844, pkin(6) * t844, t846, t878 * t914 + t880 * t918, t839, -t846, -t840, 0, -pkin(6) * t932 + t835 * t918 - t909 * t986, pkin(6) * t841 + t836 * t918 - t910 * t986, pkin(6) * t838 + t756 * t914, pkin(6) * t731 - (-pkin(1) * t918 - qJ(2) * t914) * t756, t941, t686 * t914 - t1048, t1080, t1036, t1082, t1033, t577 * t914 + t600 * t918 + t1073, pkin(6) * t667 + t587 * t914 + t615 * t918, t523 * t914 + t636 * t918 + t1075, pkin(6) * t576 + t514 * t914 + t552 * t918, t941, t1080, t655 * t914 + t1048, t1033, -t1082, t1036, t518 * t914 + t579 * t918 + t1073, t506 * t914 + t668 * t918 + t1075, pkin(6) * t641 + t511 * t914 + t573 * t918, pkin(6) * t517 + t467 * t914 + t494 * t918, t533 * t914 + t957, t488 * t914 + t746 * t918, t563 * t914 + t683 * t918, t532 * t914 - t957, t564 * t914 + t918 * t927, t582 * t914 + t903 * t918, pkin(6) * t513 + t434 * t914 + t468 * t918, pkin(6) * t526 + t441 * t914 + t472 * t918, pkin(6) * t483 + t424 * t914 + t450 * t918, pkin(6) * t436 + t412 * t914 + t422 * t918, t479 * t914 + t620 * t918, t458 * t914 + t566 * t918, t465 * t914 + t608 * t918, t478 * t914 + t618 * t918, t466 * t914 + t609 * t918, t497 * t914 + t658 * t918, pkin(6) * t452 + t408 * t914 + t426 * t918, pkin(6) * t455 + t409 * t914 + t427 * t918, pkin(6) * t447 + t407 * t914 + t419 * t918, pkin(6) * t411 + t403 * t914 + t405 * t918; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t883, t884, 0, 0, t895, 0.2e1 * t909 * t966, 0, t896, 0, 0, -qJ(2) * t875 + t910 * t950, qJ(2) * t874 - t909 * t950, pkin(1) * t879 + qJ(2) * t877 + t757, pkin(1) * t864 + qJ(2) * t757, t712, t752 * t910 + t754 * t909, t1070, t1015, -t1071, t1018, t689 * t910 + t719 * t909 + t1063, -pkin(1) * t828 + t696 * t910 + t722 * t909 + t1086, t605 * t910 + t626 * t909 + t1060, pkin(1) * t820 - pkin(7) * t1003 + qJ(2) * t581 + t638 * t910, t712, t1070, t728 * t910 + t729 * t909, t1018, t1071, t1015, t599 * t910 + t614 * t909 + t1063, t570 * t910 + t574 * t909 + t1060, pkin(1) * t1024 + t578 * t910 + t592 * t909 - t1086, pkin(1) * t673 + qJ(2) * t542 + t515 * t910 + t540 * t909, t596 * t910 + t598 * t909, t534 * t910 + t536 * t909, t622 * t910 + t624 * t909, t595 * t910 + t597 * t909, t623 * t910 + t625 * t909, t656 * t910 + t657 * t909, pkin(1) * t678 + qJ(2) * t529 + t471 * t910 + t474 * t909, pkin(1) * t682 + qJ(2) * t562 + t473 * t910 + t476 * t909, pkin(1) * t717 + qJ(2) * t489 + t442 * t910 + t443 * t909, pkin(1) * t633 + qJ(2) * t439 + t431 * t910 + t433 * t909, t520 * t910 + t522 * t909, t490 * t910 + t491 * t909, t502 * t910 + t504 * t909, t519 * t910 + t521 * t909, t503 * t910 + t505 * t909, t547 * t910 + t548 * t909, pkin(1) * t588 + qJ(2) * t460 + t420 * t910 + t423 * t909, pkin(1) * t590 + qJ(2) * t462 + t421 * t910 + t425 * t909, pkin(1) * t567 + qJ(2) * t457 + t416 * t910 + t417 * t909, pkin(1) * t463 + qJ(2) * t415 + t404 * t910 + t406 * t909;];
tauB_reg  = t1;
