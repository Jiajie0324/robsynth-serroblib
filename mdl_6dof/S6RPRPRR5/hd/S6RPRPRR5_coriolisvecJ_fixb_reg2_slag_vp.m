% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRR5_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR5_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR5_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR5_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:49:35
% EndTime: 2019-03-09 03:49:45
% DurationCPUTime: 5.09s
% Computational Cost: add. (9389->426), mult. (23873->531), div. (0->0), fcn. (18086->8), ass. (0->226)
t162 = sin(qJ(6));
t165 = cos(qJ(6));
t160 = cos(pkin(10));
t271 = cos(qJ(3));
t149 = t271 * t160;
t203 = qJD(1) * t149;
t159 = sin(pkin(10));
t164 = sin(qJ(3));
t243 = t159 * t164;
t221 = qJD(1) * t243;
t121 = -t203 + t221;
t143 = qJD(3) * t203;
t232 = qJD(3) * t164;
t147 = t159 * t232;
t101 = qJD(1) * t147 - t143;
t132 = t159 * t271 + t164 * t160;
t281 = t132 * qJD(1);
t102 = t281 * qJD(3);
t163 = sin(qJ(5));
t231 = qJD(5) * t163;
t270 = cos(qJ(5));
t184 = t101 * t270 - t163 * t102 + t231 * t281;
t219 = qJD(5) * t270;
t172 = -t121 * t219 + t184;
t227 = qJD(3) - qJD(5);
t206 = t165 * t227;
t230 = qJD(6) * t162;
t78 = t163 * t121 + t270 * t281;
t21 = qJD(6) * t206 + t165 * t172 + t230 * t78;
t64 = -t162 * t227 + t165 * t78;
t246 = qJD(6) * t64;
t22 = -t162 * t172 + t246;
t288 = -t270 * t121 + t163 * t281;
t296 = qJD(6) + t288;
t310 = t64 * t296;
t62 = t162 * t78 + t206;
t311 = t62 * t296;
t319 = t162 * (t22 + t310) + t165 * (t21 + t311);
t318 = -t21 + t311;
t315 = t310 - t22;
t263 = t64 * t78;
t213 = t163 * t101 + t270 * t102;
t298 = qJD(5) * t78;
t34 = -t213 + t298;
t255 = t162 * t34;
t308 = t165 * t296;
t303 = t296 * t308 + t255;
t314 = -t263 + t303;
t256 = t162 * t21;
t313 = t308 * t64 - t256;
t166 = -pkin(3) - pkin(4);
t258 = pkin(7) + qJ(2);
t141 = t258 * t160;
t134 = qJD(1) * t141;
t119 = t164 * t134;
t140 = t258 * t159;
t133 = qJD(1) * t140;
t87 = -t271 * t133 - t119;
t201 = -pkin(8) * t281 - t87;
t297 = qJD(4) + t201;
t52 = qJD(3) * t166 + t297;
t158 = qJD(3) * qJ(4);
t88 = -t164 * t133 + t134 * t271;
t179 = t121 * pkin(8) + t88;
t56 = t158 + t179;
t27 = -t163 * t56 + t270 * t52;
t24 = pkin(5) * t227 - t27;
t312 = t24 * t296;
t139 = t270 * qJ(4) + t163 * t166;
t247 = qJD(5) * t139 + t297 * t163 + t179 * t270;
t28 = t163 * t52 + t270 * t56;
t309 = t28 - t247;
t290 = t227 * t288;
t307 = t172 + t290;
t215 = -t165 * t34 + t230 * t296;
t253 = t162 * t296;
t204 = t253 * t288 + t215;
t266 = t62 * t78;
t306 = t204 - t266;
t239 = t78 * qJD(3);
t305 = t239 - t213;
t261 = t288 ^ 2;
t262 = t78 ^ 2;
t304 = t261 - t262;
t51 = t102 * pkin(3) + t101 * qJ(4) - qJD(4) * t281;
t38 = -t102 * pkin(4) - t51;
t10 = t34 * pkin(5) + pkin(9) * t172 + t38;
t180 = t132 * qJD(2);
t176 = qJD(1) * t180;
t55 = t88 * qJD(3) + t176;
t169 = t101 * pkin(8) + t55;
t157 = qJD(3) * qJD(4);
t228 = qJD(1) * qJD(2);
t217 = t159 * t228;
t145 = qJD(2) * t149;
t220 = qJD(3) * t271;
t236 = qJD(1) * t145 - t133 * t220;
t54 = (-qJD(3) * t134 - t217) * t164 + t236;
t53 = t157 + t54;
t39 = pkin(8) * t102 + t53;
t188 = -t163 * t169 - t52 * t219 + t231 * t56 - t270 * t39;
t150 = -t160 * pkin(2) - pkin(1);
t137 = t150 * qJD(1) + qJD(2);
t66 = t121 * pkin(3) - qJ(4) * t281 + t137;
t47 = -pkin(4) * t121 - t66;
t20 = pkin(5) * t288 - pkin(9) * t78 + t47;
t25 = -pkin(9) * t227 + t28;
t8 = t162 * t20 + t165 * t25;
t2 = -qJD(6) * t8 + t165 * t10 + t162 * t188;
t291 = -t296 * t8 - t2;
t195 = t162 * t25 - t165 * t20;
t1 = -qJD(6) * t195 + t10 * t162 - t165 * t188;
t300 = t195 * t296 + t1;
t302 = t78 * t8;
t301 = t296 * t78;
t299 = t195 * t78;
t260 = t78 * t288;
t216 = t163 * t39 - t270 * t169;
t295 = t47 * t78 + t216;
t294 = t288 * t47 + t188;
t208 = -t149 + t243;
t282 = qJD(3) * t132;
t293 = t102 * t208 + t121 * t282;
t192 = -t160 * t220 + t147;
t292 = -t101 * t208 + t132 * t102 - t121 * t192 + t281 * t282;
t36 = pkin(5) * t78 + pkin(9) * t288;
t138 = -t163 * qJ(4) + t166 * t270;
t103 = qJD(4) * t270 + qJD(5) * t138;
t30 = t163 * t179 - t201 * t270;
t248 = t103 - t30;
t276 = qJD(3) ^ 2;
t286 = t276 * t132;
t115 = t121 ^ 2;
t277 = t281 ^ 2;
t285 = -t115 - t277;
t284 = -t164 * t140 + t271 * t141;
t283 = -t277 + t115;
t279 = qJD(3) * (t87 + t119) + t164 * t217 - t236;
t278 = t227 ^ 2;
t89 = t271 * t140 + t164 * t141;
t71 = -pkin(8) * t132 + t89;
t72 = pkin(8) * t208 + t284;
t191 = -t163 * t72 + t270 * t71;
t6 = t28 * qJD(5) + t216;
t275 = t191 * t6;
t86 = t132 * t270 + t163 * t208;
t274 = t6 * t86;
t187 = t270 * t208;
t85 = t132 * t163 - t187;
t269 = t34 * t85;
t268 = t55 * t89;
t265 = t64 * t62;
t259 = t86 * t34;
t82 = t158 + t88;
t257 = t82 - t88;
t254 = t162 * t62;
t252 = t165 * t22;
t250 = t165 * t64;
t249 = t66 * t281;
t245 = qJD(6) * t296;
t244 = t281 * t121;
t233 = qJD(2) * t159;
t235 = -t140 * t220 + t145;
t67 = (-qJD(3) * t141 - t233) * t164 + t235;
t241 = t67 * qJD(3);
t68 = qJD(3) * t284 + t180;
t240 = t68 * qJD(3);
t238 = qJD(4) - t87;
t83 = pkin(3) * t281 + t121 * qJ(4);
t234 = t159 ^ 2 + t160 ^ 2;
t229 = qJD(6) * t165;
t226 = t6 * t270;
t225 = t86 * t230;
t224 = t86 * t229;
t59 = pkin(3) * t282 + t192 * qJ(4) - t132 * qJD(4);
t223 = t162 * t270;
t222 = t165 * t270;
t218 = t270 * qJD(3);
t209 = t234 * qJD(1) ^ 2;
t207 = t27 * t227;
t84 = t208 * pkin(3) - t132 * qJ(4) + t150;
t205 = pkin(9) * t245 + t6;
t136 = -pkin(9) + t139;
t202 = t136 * t245 - t6;
t58 = -pkin(4) * t281 - t83;
t42 = -qJD(5) * t187 + t132 * t231 - t163 * t282 + t192 * t270;
t200 = -t24 * t42 + t274;
t199 = t162 * t8 - t165 * t195;
t198 = -t162 * t195 - t165 * t8;
t197 = -t296 * t42 + t259;
t60 = -pkin(4) * t208 - t84;
t26 = t85 * pkin(5) - t86 * pkin(9) + t60;
t32 = t163 * t71 + t270 * t72;
t16 = -t162 * t32 + t165 * t26;
t17 = t162 * t26 + t165 * t32;
t193 = 0.2e1 * t234 * t228;
t190 = -t163 * t78 + t270 * t288;
t189 = -pkin(9) * t34 + t312;
t178 = -t103 * t296 - t136 * t34 - t312;
t177 = -t89 * t101 - t102 * t284 - t67 * t121 + t55 * t132 + t281 * t68;
t174 = 0.2e1 * t102;
t173 = -qJD(6) * t199 + t1 * t165 - t162 * t2;
t44 = -pkin(4) * t282 - t59;
t170 = qJD(2) * t281;
t168 = t147 * pkin(8) + (-pkin(8) * t149 + t284) * qJD(3) + t180;
t135 = pkin(5) - t138;
t106 = t192 * qJD(3);
t92 = t162 * t281 + t165 * t218;
t91 = -t162 * t218 + t165 * t281;
t81 = t143 + (t121 - t221) * qJD(3);
t80 = -t143 + (t121 + t221) * qJD(3);
t79 = -qJD(3) * pkin(3) + t238;
t48 = pkin(8) * t282 - t141 * t232 - t164 * t233 + t235;
t46 = -t101 * t132 - t192 * t281;
t43 = qJD(5) * t86 - t163 * t192 - t270 * t282;
t23 = -t36 + t58;
t19 = t162 * t36 + t165 * t27;
t18 = -t162 * t27 + t165 * t36;
t15 = t43 * pkin(5) + t42 * pkin(9) + t44;
t14 = qJD(5) * t32 + t163 * t48 - t168 * t270;
t13 = qJD(5) * t191 + t163 * t168 + t270 * t48;
t12 = t162 * t23 + t165 * t30;
t11 = -t162 * t30 + t165 * t23;
t4 = -qJD(6) * t17 - t13 * t162 + t15 * t165;
t3 = qJD(6) * t16 + t13 * t165 + t15 * t162;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, qJ(2) * t193, t46, -t292, -t106, t293, -t286, 0, t150 * t102 + t137 * t282 - t240, -t150 * t101 - t137 * t192 - t241, t192 * t87 - t208 * t54 - t282 * t88 + t177, t284 * t54 + t67 * t88 - t68 * t87 + t268, t46, -t106, t292, 0, t286, t293, t84 * t102 + t59 * t121 + t208 * t51 + t282 * t66 - t240, -t192 * t79 - t208 * t53 - t282 * t82 + t177, t84 * t101 - t51 * t132 + t192 * t66 - t281 * t59 + t241, t284 * t53 + t51 * t84 + t59 * t66 + t67 * t82 + t68 * t79 + t268, -t172 * t86 - t78 * t42, t172 * t85 + t288 * t42 - t78 * t43 - t259, t42 * t227, t288 * t43 + t269, t43 * t227, 0, t14 * t227 + t288 * t44 + t60 * t34 + t38 * t85 + t47 * t43, t13 * t227 - t172 * t60 + t38 * t86 - t47 * t42 + t44 * t78, -t13 * t288 + t14 * t78 + t172 * t191 + t188 * t85 + t27 * t42 - t28 * t43 - t32 * t34 + t274, t13 * t28 - t14 * t27 - t188 * t32 + t38 * t60 + t44 * t47 - t275, -t64 * t225 + (-t21 * t86 - t42 * t64) * t165 (t162 * t64 + t165 * t62) * t42 + (t256 - t252 + (-t250 + t254) * qJD(6)) * t86, t165 * t197 - t21 * t85 - t225 * t296 + t43 * t64, t62 * t224 + (t22 * t86 - t42 * t62) * t162, -t162 * t197 - t22 * t85 - t224 * t296 - t43 * t62, t296 * t43 + t269, t14 * t62 + t16 * t34 + t162 * t200 - t191 * t22 - t195 * t43 + t2 * t85 + t224 * t24 + t296 * t4, -t1 * t85 + t14 * t64 + t165 * t200 - t17 * t34 + t191 * t21 - t225 * t24 - t296 * t3 - t43 * t8, t16 * t21 - t17 * t22 - t3 * t62 - t4 * t64 + t199 * t42 + (qJD(6) * t198 - t1 * t162 - t165 * t2) * t86, t1 * t17 + t14 * t24 + t16 * t2 - t195 * t4 + t3 * t8 - t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t209, -qJ(2) * t209, 0, 0, 0, 0, 0, 0, t174, -t80, t285, t121 * t88 + t281 * t87, 0, 0, 0, 0, 0, 0, t174, t285, t80, t121 * t82 - t281 * t79 + t51, 0, 0, 0, 0, 0, 0, t213 + t239 - 0.2e1 * t298, t172 - t290, t261 + t262, -t27 * t78 - t28 * t288 - t38, 0, 0, 0, 0, 0, 0, t204 + t266, t263 + t303, -t315 * t162 + t165 * t318, -t162 * t300 + t165 * t291 + t24 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244, -t283, t81, -t244, 0, 0, -t137 * t281 - t170, t121 * t137 + t279, 0, 0, t244, t81, t283, 0, 0, -t244, -t83 * t121 - t170 - t249, pkin(3) * t101 - qJ(4) * t102 + t257 * t281 + (t79 - t238) * t121, -t121 * t66 + t281 * t83 + 0.2e1 * t157 - t279, -pkin(3) * t55 + qJ(4) * t53 + t238 * t82 - t66 * t83 - t79 * t88, -t260, t304, t307, t260, t305, 0, t247 * qJD(3) + qJD(5) * t309 - t58 * t288 + t295, t248 * t227 - t58 * t78 - t294, t138 * t172 - t139 * t34 - t309 * t78 + (-t248 + t27) * t288, -t138 * t6 - t139 * t188 - t247 * t27 + t248 * t28 - t47 * t58, -t313, t319, -t314, -t254 * t296 + t252, t306, t301, -t11 * t296 + t135 * t22 + t162 * t178 - t165 * t202 + t247 * t62 - t299, t12 * t296 - t135 * t21 + t162 * t202 + t165 * t178 + t247 * t64 - t302, t11 * t64 + t12 * t62 + (-t103 * t62 - t136 * t22 - t195 * t288 - t1 + (t136 * t64 - t195) * qJD(6)) * t165 + (t103 * t64 - t136 * t21 + t288 * t8 + t2 + (t136 * t62 + t8) * qJD(6)) * t162, -t103 * t198 + t11 * t195 - t12 * t8 + t135 * t6 + t136 * t173 + t24 * t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244, t81, -t277 - t276, -qJD(3) * t257 + t176 + t249, 0, 0, 0, 0, 0, 0, -t163 * t278 - t281 * t288, -t270 * t278 - t281 * t78, -t163 * t34 + t270 * t184 + (-t121 * t270 ^ 2 - t190) * qJD(5) + t190 * qJD(3), -t226 - t47 * t281 + (-t218 + t219) * t28 + (-t188 + t207) * t163, 0, 0, 0, 0, 0, 0, -t270 * t22 + (-t162 * t219 - t91) * t296 + (-t227 * t62 - t229 * t296 - t255) * t163, t270 * t21 + (-t165 * t219 + t92) * t296 + (-t227 * t64 + t215) * t163, t92 * t62 + t91 * t64 + (-t222 * t62 + t223 * t64) * qJD(5) + (-t256 - t252 + (t250 + t254) * qJD(6)) * t163, -t226 + t195 * t91 - t8 * t92 + (t195 * t223 + t222 * t8) * qJD(5) + (-t227 * t24 + t173) * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t260, -t304, -t307, -t260, -t305, 0, -t28 * qJD(3) - t295, -t207 + t294, 0, 0, t313, -t319, t314, t253 * t62 - t252, -t306, -t301, -pkin(5) * t22 + t162 * t189 - t165 * t205 - t18 * t296 - t28 * t62 + t299, pkin(5) * t21 + t162 * t205 + t165 * t189 + t19 * t296 - t28 * t64 + t302, t18 * t64 + t19 * t62 + ((-t22 + t246) * pkin(9) + t300) * t165 + ((qJD(6) * t62 - t21) * pkin(9) + t291) * t162, -pkin(5) * t6 + pkin(9) * t173 + t18 * t195 - t19 * t8 - t24 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, -t62 ^ 2 + t64 ^ 2, t318, -t265, t315, t34, -t24 * t64 - t291, t24 * t62 - t300, 0, 0;];
tauc_reg  = t5;
