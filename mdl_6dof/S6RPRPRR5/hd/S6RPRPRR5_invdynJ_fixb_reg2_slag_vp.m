% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:49:42
% EndTime: 2019-03-09 03:49:56
% DurationCPUTime: 7.91s
% Computational Cost: add. (11579->581), mult. (27269->690), div. (0->0), fcn. (20888->12), ass. (0->288)
t217 = sin(qJ(6));
t221 = cos(qJ(6));
t214 = cos(pkin(10));
t366 = cos(qJ(3));
t194 = t366 * t214;
t282 = qJD(1) * t194;
t213 = sin(pkin(10));
t219 = sin(qJ(3));
t332 = t213 * t219;
t303 = qJD(1) * t332;
t145 = -t282 + t303;
t218 = sin(qJ(5));
t320 = qJD(5) * t218;
t365 = cos(qJ(5));
t156 = t213 * t366 + t219 * t214;
t379 = t156 * qJD(1);
t321 = qJD(3) * t219;
t186 = t213 * t321;
t296 = qJDD(1) * t366;
t314 = t214 * qJDD(1);
t309 = qJD(3) * t282 + t213 * t296 + t219 * t314;
t96 = qJD(1) * t186 - t309;
t315 = t213 * qJDD(1);
t275 = -t214 * t296 + t219 * t315;
t395 = qJD(3) * t379;
t97 = t275 + t395;
t252 = -t218 * t97 + t320 * t379 + t365 * t96;
t301 = qJD(5) * t365;
t231 = -t145 * t301 + t252;
t313 = qJD(3) - qJD(5);
t287 = t221 * t313;
t312 = qJDD(3) - qJDD(5);
t319 = qJD(6) * t217;
t88 = t218 * t145 + t365 * t379;
t22 = qJD(6) * t287 + t217 * t312 + t221 * t231 + t319 * t88;
t75 = -t217 * t313 + t221 * t88;
t340 = qJD(6) * t75;
t23 = -t217 * t231 + t221 * t312 + t340;
t386 = -t365 * t145 + t218 * t379;
t394 = qJD(6) + t386;
t408 = t75 * t394;
t73 = t217 * t88 + t287;
t409 = t73 * t394;
t419 = t217 * (t23 + t408) + t221 * (t22 + t409);
t367 = t97 * pkin(4);
t196 = pkin(2) * t314;
t212 = qJDD(1) * pkin(1);
t199 = qJDD(2) - t212;
t161 = -t196 + t199;
t377 = t97 * pkin(3) + t96 * qJ(4) - qJD(4) * t379;
t43 = t161 + t377;
t25 = -t43 - t367;
t298 = t218 * t96 + t365 * t97;
t397 = qJD(5) * t88;
t40 = -t298 + t397;
t10 = t40 * pkin(5) + pkin(9) * t231 + t25;
t195 = t214 * pkin(2) + pkin(1);
t162 = -qJD(1) * t195 + qJD(2);
t76 = t145 * pkin(3) - qJ(4) * t379 + t162;
t57 = -pkin(4) * t145 - t76;
t24 = pkin(5) * t386 - pkin(9) * t88 + t57;
t368 = pkin(3) + pkin(4);
t351 = pkin(7) + qJ(2);
t168 = t351 * t214;
t158 = qJD(1) * t168;
t143 = t219 * t158;
t167 = t351 * t213;
t157 = qJD(1) * t167;
t101 = -t366 * t157 - t143;
t281 = -pkin(8) * t379 - t101;
t402 = qJD(4) + t281;
t64 = -qJD(3) * t368 + t402;
t211 = qJD(3) * qJ(4);
t102 = -t219 * t157 + t158 * t366;
t243 = t145 * pkin(8) + t102;
t65 = t211 + t243;
t39 = t218 * t64 + t365 * t65;
t34 = -pkin(9) * t313 + t39;
t11 = -t217 * t34 + t221 * t24;
t316 = qJD(1) * qJD(2);
t373 = qJDD(1) * t351 + t316;
t118 = t373 * t213;
t119 = t373 * t214;
t302 = qJD(3) * t366;
t286 = t366 * t118 + t219 * t119 - t157 * t321 + t158 * t302;
t271 = qJDD(4) + t286;
t31 = t96 * pkin(8) - qJDD(3) * t368 + t271;
t209 = qJDD(3) * qJ(4);
t210 = qJD(3) * qJD(4);
t311 = -t219 * t118 + t366 * t119 - t157 * t302;
t50 = -t158 * t321 + t311;
t46 = t209 + t210 + t50;
t32 = pkin(8) * t97 + t46;
t259 = -t218 * t31 - t64 * t301 - t365 * t32 + t320 * t65;
t5 = -pkin(9) * t312 - t259;
t1 = qJD(6) * t11 + t217 * t10 + t221 * t5;
t363 = t11 * t394;
t418 = -t1 + t363;
t12 = t217 * t24 + t221 * t34;
t7 = t221 * t10;
t2 = -qJD(6) * t12 - t217 * t5 + t7;
t362 = t12 * t394;
t417 = -t2 - t362;
t416 = -t22 + t409;
t413 = t408 - t23;
t355 = t75 * t88;
t37 = qJDD(6) + t40;
t349 = t217 * t37;
t407 = t221 * t394;
t401 = t394 * t407 + t349;
t412 = -t355 + t401;
t346 = t22 * t217;
t411 = t407 * t75 - t346;
t38 = -t218 * t65 + t365 * t64;
t33 = pkin(5) * t313 - t38;
t410 = t33 * t394;
t388 = t313 * t386;
t406 = t231 + t388;
t297 = -t221 * t37 + t319 * t394;
t347 = t217 * t394;
t283 = t347 * t386 + t297;
t358 = t73 * t88;
t405 = t283 - t358;
t329 = t88 * qJD(3);
t404 = t329 - t298;
t353 = t386 ^ 2;
t354 = t88 ^ 2;
t403 = t353 - t354;
t400 = t11 * t88;
t399 = t12 * t88;
t398 = t394 * t88;
t352 = t88 * t386;
t206 = t213 ^ 2;
t207 = t214 ^ 2;
t324 = t206 + t207;
t284 = 0.2e1 * t324;
t222 = cos(qJ(1));
t205 = g(1) * t222;
t220 = sin(qJ(1));
t382 = g(2) * t220 + t205;
t396 = t284 * t316 - t382;
t204 = g(2) * t222;
t383 = g(1) * t220 - t204;
t267 = -t383 + t199;
t208 = pkin(10) + qJ(3);
t200 = sin(t208);
t306 = t200 * t365;
t201 = cos(t208);
t334 = t201 * t220;
t113 = t218 * t334 - t220 * t306;
t333 = t201 * t222;
t115 = t218 * t333 - t222 * t306;
t137 = t200 * t218 + t201 * t365;
t254 = g(1) * t115 + g(2) * t113 + g(3) * t137;
t294 = t218 * t32 + t65 * t301 - t365 * t31 + t64 * t320;
t393 = -t57 * t88 + t254 - t294;
t116 = t137 * t222;
t114 = t137 * t220;
t138 = -t201 * t218 + t306;
t277 = g(2) * t114 + g(3) * t138;
t253 = g(1) * t116 + t277;
t392 = t386 * t57 + t253 + t259;
t289 = -t194 + t332;
t380 = qJD(3) * t156;
t391 = t145 * t380 + t289 * t97;
t266 = -t214 * t302 + t186;
t390 = -t145 * t266 + t156 * t97 - t289 * t96 + t379 * t380;
t49 = pkin(5) * t88 + pkin(9) * t386;
t163 = -t218 * qJ(4) - t365 * t368;
t124 = qJD(4) * t365 + qJD(5) * t163;
t42 = t218 * t243 - t281 * t365;
t342 = t124 - t42;
t164 = t365 * qJ(4) - t218 * t368;
t341 = qJD(5) * t164 + t218 * t402 + t243 * t365;
t139 = t145 ^ 2;
t370 = t379 ^ 2;
t385 = -t139 - t370;
t384 = -t219 * t167 + t366 * t168;
t326 = t201 * pkin(3) + t200 * qJ(4);
t381 = -t370 + t139;
t317 = qJD(4) - t101;
t378 = qJ(2) * qJDD(1);
t323 = qJD(2) * t213;
t327 = qJD(2) * t194 - t167 * t302;
t77 = (-qJD(3) * t168 - t323) * t219 + t327;
t375 = -t77 * qJD(3) - qJDD(3) * t384 - t200 * t383;
t374 = t313 ^ 2;
t369 = qJD(3) ^ 2;
t372 = qJDD(3) * t289 + t156 * t369;
t371 = g(3) * t200 + qJD(3) * (t101 + t143) + t201 * t382 - t311;
t191 = t201 * pkin(4);
t258 = t365 * t289;
t53 = -qJD(5) * t258 + t156 * t320 - t218 * t380 + t266 * t365;
t360 = t33 * t53;
t357 = t75 * t73;
t350 = pkin(8) - t351;
t348 = t217 * t73;
t344 = t221 * t75;
t343 = t23 * t221;
t339 = qJD(6) * t394;
t338 = qJDD(3) * pkin(3);
t337 = t379 * t145;
t336 = t200 * t220;
t335 = t200 * t222;
t330 = t222 * t351;
t93 = pkin(3) * t379 + t145 * qJ(4);
t322 = qJD(3) * t102;
t318 = qJD(6) * t221;
t70 = pkin(3) * t380 + t266 * qJ(4) - t156 * qJD(4);
t172 = t222 * t195;
t310 = pkin(3) * t333 + qJ(4) * t335 + t172;
t308 = t191 + t326;
t307 = -g(1) * t335 - g(2) * t336 + g(3) * t201;
t305 = t217 * t365;
t304 = t221 * t365;
t300 = t365 * qJD(3);
t291 = t324 * qJD(1) ^ 2;
t105 = t366 * t167 + t219 * t168;
t288 = t38 * t313;
t285 = pkin(4) * t333 + t310;
t67 = -pkin(4) * t379 - t93;
t280 = g(1) * t113 - g(2) * t115;
t276 = -qJD(6) * t34 - t204;
t274 = t11 * t221 + t12 * t217;
t100 = t156 * t365 + t218 * t289;
t272 = -t289 * pkin(3) + t156 * qJ(4) + t195;
t71 = -pkin(4) * t289 + t272;
t99 = t156 * t218 - t258;
t35 = t99 * pkin(5) - t100 * pkin(9) + t71;
t81 = -pkin(8) * t156 + t105;
t82 = pkin(8) * t289 + t384;
t45 = t218 * t81 + t365 * t82;
t18 = -t217 * t45 + t221 * t35;
t19 = t217 * t35 + t221 * t45;
t265 = -t195 - t326;
t264 = -t218 * t82 + t365 * t81;
t263 = -t218 * t88 + t365 * t386;
t262 = -t318 * t394 - t349;
t260 = -pkin(9) * t37 + t410;
t255 = -t196 + t267;
t251 = -t286 - t307;
t6 = pkin(5) * t312 + t294;
t250 = t254 - t6;
t249 = -qJD(6) * t24 + t277 - t5;
t245 = t156 * qJD(2);
t244 = -t267 + t212;
t78 = qJD(3) * t384 + t245;
t242 = -t105 * t96 - t77 * t145 + t379 * t78 - t384 * t97 - t382;
t160 = -pkin(9) + t164;
t241 = -t124 * t394 - t160 * t37 - t410;
t240 = t255 + t377;
t239 = g(1) * t334 - g(2) * t333 - t78 * qJD(3) - t105 * qJDD(3);
t238 = t382 * t368 * t200;
t235 = t379 * t76 + qJDD(4) - t251;
t234 = pkin(9) * t339 - t250;
t233 = t160 * t339 + t250;
t232 = -qJD(6) * t274 + t1 * t221 - t2 * t217;
t55 = -pkin(4) * t380 - t70;
t228 = (-g(1) * (t265 - t191) + g(2) * t350) * t220;
t227 = t275 + 0.2e1 * t395;
t226 = t186 * pkin(8) + (-pkin(8) * t194 + t384) * qJD(3) + t245;
t171 = qJ(4) * t333;
t169 = qJ(4) * t334;
t159 = pkin(5) - t163;
t108 = t217 * t379 + t221 * t300;
t107 = -t217 * t300 + t221 * t379;
t104 = t116 * t221 - t217 * t220;
t103 = -t116 * t217 - t220 * t221;
t98 = -qJD(3) * t266 + t156 * qJDD(3);
t91 = t211 + t102;
t90 = -qJD(3) * pkin(3) + t317;
t69 = (t145 - t303) * qJD(3) + t309;
t68 = (t145 + t303) * qJD(3) - t309;
t58 = pkin(8) * t380 - t168 * t321 - t219 * t323 + t327;
t54 = qJD(5) * t100 - t218 * t266 - t365 * t380;
t52 = -t96 * t156 - t266 * t379;
t47 = t271 - t338;
t26 = -t49 + t67;
t21 = t217 * t49 + t221 * t38;
t20 = -t217 * t38 + t221 * t49;
t17 = t54 * pkin(5) + t53 * pkin(9) + t55;
t16 = qJD(5) * t45 + t218 * t58 - t226 * t365;
t15 = qJD(5) * t264 + t218 * t226 + t365 * t58;
t14 = t217 * t26 + t221 * t42;
t13 = -t217 * t42 + t221 * t26;
t4 = -qJD(6) * t19 - t217 * t15 + t221 * t17;
t3 = qJD(6) * t18 + t221 * t15 + t217 * t17;
t8 = [0, 0, 0, 0, 0, qJDD(1), t383, t382, 0, 0, t206 * qJDD(1), 0.2e1 * t213 * t314, 0, t207 * qJDD(1), 0, 0, t244 * t214, -t244 * t213, t284 * t378 + t396, -t267 * pkin(1) + (t324 * t378 + t396) * qJ(2), t52, -t390, t98, t391, -t372, 0, t161 * t289 + t162 * t380 - t195 * t97 + t239, t161 * t156 - t162 * t266 + t195 * t96 + t375, t101 * t266 - t102 * t380 + t156 * t286 - t289 * t50 + t242, t50 * t384 + t102 * t77 + t286 * t105 - t101 * t78 - t161 * t195 - g(1) * (-t220 * t195 + t330) - g(2) * (t220 * t351 + t172) t52, t98, t390, 0, t372, t391, t70 * t145 - t272 * t97 + t289 * t43 + t380 * t76 + t239, t47 * t156 - t266 * t90 - t289 * t46 - t380 * t91 + t242, -t43 * t156 + t266 * t76 - t272 * t96 - t379 * t70 - t375, t46 * t384 + t91 * t77 - t43 * t272 + t76 * t70 + t47 * t105 + t90 * t78 - g(1) * t330 - g(2) * t310 + (-g(1) * t265 - g(2) * t351) * t220, -t100 * t231 - t88 * t53, -t100 * t40 + t231 * t99 + t386 * t53 - t88 * t54, -t100 * t312 + t313 * t53, t386 * t54 + t40 * t99, t312 * t99 + t313 * t54, 0, g(1) * t114 - g(2) * t116 + t16 * t313 + t25 * t99 - t264 * t312 + t386 * t55 + t71 * t40 + t57 * t54, t25 * t100 + t15 * t313 - t231 * t71 + t312 * t45 - t57 * t53 + t55 * t88 - t280, t100 * t294 - t15 * t386 + t16 * t88 + t231 * t264 + t259 * t99 + t38 * t53 - t39 * t54 - t45 * t40 + t382, -g(2) * t285 + t39 * t15 - t38 * t16 + t205 * t350 + t25 * t71 - t259 * t45 - t264 * t294 + t57 * t55 + t228, -t53 * t344 + (-t221 * t22 - t319 * t75) * t100 (t217 * t75 + t221 * t73) * t53 + (t346 - t343 + (-t344 + t348) * qJD(6)) * t100, -t100 * t297 - t22 * t99 - t407 * t53 + t75 * t54, -t53 * t348 + (t217 * t23 + t318 * t73) * t100, t100 * t262 - t23 * t99 + t347 * t53 - t73 * t54, t37 * t99 + t394 * t54, t4 * t394 + t18 * t37 + t2 * t99 + t11 * t54 + t16 * t73 - t264 * t23 - t217 * t360 - g(1) * (-t114 * t221 - t217 * t222) - g(2) * t104 + (t6 * t217 + t318 * t33) * t100, -t3 * t394 - t19 * t37 - t1 * t99 - t12 * t54 + t16 * t75 + t264 * t22 - t221 * t360 - g(1) * (t114 * t217 - t221 * t222) - g(2) * t103 + (t6 * t221 - t319 * t33) * t100, t18 * t22 - t19 * t23 - t3 * t73 - t4 * t75 + t274 * t53 + (-t1 * t217 - t2 * t221 + (t11 * t217 - t12 * t221) * qJD(6)) * t100 + t280, t1 * t19 + t12 * t3 + t2 * t18 + t11 * t4 - t6 * t264 + t33 * t16 - g(1) * (-t114 * pkin(5) - t222 * pkin(8) - t113 * pkin(9) + t330) - g(2) * (t116 * pkin(5) + t115 * pkin(9) + t285) + t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t314, t315, -t291, -qJ(2) * t291 + t267, 0, 0, 0, 0, 0, 0, t227, -t68, t385, t101 * t379 + t102 * t145 + t255, 0, 0, 0, 0, 0, 0, t227, t385, t68, t145 * t91 - t379 * t90 + t240, 0, 0, 0, 0, 0, 0, t298 + t329 - 0.2e1 * t397, t231 - t388, t353 + t354, -t38 * t88 - t386 * t39 + t240 + t367, 0, 0, 0, 0, 0, 0, t283 + t358, t355 + t401, -t217 * t413 + t221 * t416, t217 * t418 + t417 * t221 + t33 * t88 - t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t337, -t381, t69, -t337, -t275, qJDD(3), -t162 * t379 + t251 + t322, t162 * t145 + t371, 0, 0, t337, t69, t381, qJDD(3), t275, -t337, -t145 * t93 - t235 + t322 + 0.2e1 * t338, pkin(3) * t96 - t97 * qJ(4) + (-t102 + t91) * t379 + (t90 - t317) * t145, -t76 * t145 + t379 * t93 + 0.2e1 * t209 + 0.2e1 * t210 - t371, t46 * qJ(4) - t47 * pkin(3) - t76 * t93 - t90 * t102 - g(1) * (-pkin(3) * t335 + t171) - g(2) * (-pkin(3) * t336 + t169) - g(3) * t326 + t317 * t91, -t352, t403, t406, t352, t404, t312, -t163 * t312 + t313 * t341 - t386 * t67 - t393, t164 * t312 + t313 * t342 - t67 * t88 - t392, t163 * t231 - t164 * t40 + (t341 - t39) * t88 + (-t342 + t38) * t386, -g(1) * t171 - g(2) * t169 - g(3) * t308 - t163 * t294 - t164 * t259 - t341 * t38 + t342 * t39 - t57 * t67 + t238, -t411, t419, -t412, -t348 * t394 + t343, t405, t398, -t13 * t394 + t159 * t23 + t217 * t241 - t221 * t233 + t341 * t73 + t400, t14 * t394 - t159 * t22 + t217 * t233 + t221 * t241 + t341 * t75 - t399, t13 * t75 + t14 * t73 + (t11 * t386 - t124 * t73 - t160 * t23 - t1 + (t160 * t75 + t11) * qJD(6)) * t221 + (t12 * t386 + t124 * t75 - t160 * t22 + t2 + (t160 * t73 + t12) * qJD(6)) * t217 + t253, t6 * t159 - g(1) * (t115 * pkin(5) - t116 * pkin(9) + t171) - g(2) * (t113 * pkin(5) - t114 * pkin(9) + t169) - g(3) * (pkin(5) * t137 - pkin(9) * t138 + t308) + t341 * t33 + t238 + (t124 * t221 - t14) * t12 + (-t124 * t217 - t13) * t11 + t232 * t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(3) + t337, t69, -t370 - t369, -qJD(3) * t91 + t235 - t338, 0, 0, 0, 0, 0, 0, -t218 * t374 - t365 * t312 - t379 * t386, t218 * t312 - t365 * t374 - t379 * t88, -t218 * t40 + t365 * t252 + (-t145 * t365 ^ 2 - t263) * qJD(5) + t263 * qJD(3), -t294 * t365 - t57 * t379 + (-t300 + t301) * t39 + (-t259 + t288) * t218 + t307, 0, 0, 0, 0, 0, 0, -t365 * t23 + (-t217 * t301 - t107) * t394 + (-t313 * t73 + t262) * t218, t365 * t22 + (-t221 * t301 + t108) * t394 + (-t313 * t75 + t297) * t218, t107 * t75 + t108 * t73 + (-t304 * t73 + t305 * t75) * qJD(5) + (-t346 - t343 + (t344 + t348) * qJD(6)) * t218, -t6 * t365 - t11 * t107 - t12 * t108 + (-t11 * t305 + t12 * t304) * qJD(5) + (-t313 * t33 + t232) * t218 + t307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t352, -t403, -t406, -t352, -t404, -t312, -t313 * t39 + t393, -t288 + t392, 0, 0, t411, -t419, t412, t347 * t73 - t343, -t405, -t398, -pkin(5) * t23 - t20 * t394 + t217 * t260 - t221 * t234 - t39 * t73 - t400, pkin(5) * t22 + t21 * t394 + t217 * t234 + t221 * t260 - t39 * t75 + t399, t20 * t75 + t21 * t73 + ((-t23 + t340) * pkin(9) - t418) * t221 + ((qJD(6) * t73 - t22) * pkin(9) + t417) * t217 - t253, -t11 * t20 - t12 * t21 - t33 * t39 + t250 * pkin(5) + (t232 - t253) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357, -t73 ^ 2 + t75 ^ 2, t416, -t357, t413, t37, -g(1) * t103 + t217 * t249 + t221 * t276 - t33 * t75 + t362 + t7, g(1) * t104 + t363 + t33 * t73 + (-t10 - t276) * t217 + t249 * t221, 0, 0;];
tau_reg  = t8;
