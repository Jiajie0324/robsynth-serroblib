% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 10:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 10:30:22
% EndTime: 2019-05-07 10:30:32
% DurationCPUTime: 10.24s
% Computational Cost: add. (123120->342), mult. (254853->483), div. (0->0), fcn. (190468->12), ass. (0->273)
t2330 = sin(qJ(3));
t2335 = cos(qJ(3));
t2336 = cos(qJ(2));
t2374 = qJD(1) * t2336;
t2331 = sin(qJ(2));
t2375 = qJD(1) * t2331;
t2294 = t2330 * t2375 - t2335 * t2374;
t2293 = qJD(5) + t2294;
t2291 = qJD(6) + t2293;
t2387 = qJD(6) + t2291;
t2296 = (t2330 * t2336 + t2331 * t2335) * qJD(1);
t2356 = qJD(2) * t2374;
t2360 = t2331 * qJDD(1);
t2302 = t2356 + t2360;
t2321 = t2336 * qJDD(1);
t2357 = qJD(2) * t2375;
t2303 = t2321 - t2357;
t2265 = t2296 * qJD(3) + t2330 * t2302 - t2335 * t2303;
t2323 = qJD(2) + qJD(3);
t2366 = t2296 * t2323;
t2244 = t2265 + t2366;
t2326 = sin(pkin(11));
t2327 = cos(pkin(11));
t2280 = t2296 * t2326 - t2323 * t2327;
t2281 = t2296 * t2327 + t2323 * t2326;
t2371 = t2280 * t2281;
t2235 = t2265 - t2371;
t2325 = t2336 ^ 2;
t2339 = qJD(1) ^ 2;
t2332 = sin(qJ(1));
t2337 = cos(qJ(1));
t2311 = t2332 * g(1) - t2337 * g(2);
t2347 = qJDD(1) * pkin(1) + t2311;
t2348 = qJD(2) * pkin(2) - pkin(8) * t2375;
t2268 = t2303 * pkin(2) + (pkin(8) * t2325 + pkin(7)) * t2339 - t2348 * t2375 + t2347;
t2329 = sin(qJ(5));
t2334 = cos(qJ(5));
t2254 = t2334 * t2280 + t2281 * t2329;
t2256 = -t2280 * t2329 + t2281 * t2334;
t2328 = sin(qJ(6));
t2333 = cos(qJ(6));
t2226 = t2333 * t2254 + t2256 * t2328;
t2386 = t2226 ^ 2;
t2228 = -t2254 * t2328 + t2256 * t2333;
t2385 = t2228 ^ 2;
t2384 = t2254 ^ 2;
t2383 = t2256 ^ 2;
t2382 = t2280 ^ 2;
t2381 = t2281 ^ 2;
t2380 = t2291 ^ 2;
t2379 = t2293 ^ 2;
t2275 = t2294 ^ 2;
t2378 = t2296 ^ 2;
t2377 = t2323 ^ 2;
t2376 = -2 * qJD(4);
t2373 = t2226 * t2228;
t2372 = t2254 * t2256;
t2370 = t2281 * t2294;
t2369 = t2293 * t2254;
t2368 = t2294 * t2280;
t2367 = t2294 * t2296;
t2365 = t2325 * t2339;
t2364 = t2331 * t2339;
t2350 = -t2335 * t2302 - t2330 * t2303;
t2266 = -qJD(3) * t2294 - t2350;
t2353 = t2323 * t2294 - t2266;
t2206 = pkin(3) * t2244 + t2353 * qJ(4) - t2268;
t2312 = -g(1) * t2337 - g(2) * t2332;
t2343 = -pkin(1) * t2339 + qJDD(1) * pkin(7) + t2312;
t2288 = -t2331 * g(3) + t2336 * t2343;
t2264 = -pkin(2) * t2365 + t2303 * pkin(8) - qJD(2) * t2348 + t2288;
t2342 = t2331 * t2343;
t2340 = -t2342 - t2302 * pkin(8) + qJDD(2) * pkin(2) + (pkin(8) * qJD(1) * qJD(2) + pkin(2) * t2364 - g(3)) * t2336;
t2230 = t2335 * t2264 + t2330 * t2340;
t2274 = pkin(3) * t2294 - qJ(4) * t2296;
t2359 = qJDD(2) + qJDD(3);
t2212 = -pkin(3) * t2377 + qJ(4) * t2359 - t2294 * t2274 + t2230;
t2174 = t2327 * t2206 - t2326 * t2212 + t2281 * t2376;
t2257 = t2327 * t2266 + t2326 * t2359;
t2234 = -t2257 - t2368;
t2157 = pkin(4) * t2235 + t2234 * pkin(9) + t2174;
t2175 = t2326 * t2206 + t2327 * t2212 + t2280 * t2376;
t2269 = pkin(4) * t2294 - pkin(9) * t2281;
t2352 = -t2266 * t2326 + t2327 * t2359;
t2167 = -pkin(4) * t2382 + pkin(9) * t2352 - t2294 * t2269 + t2175;
t2133 = t2329 * t2157 + t2334 * t2167;
t2363 = -t2291 + qJD(6);
t2362 = -t2293 + qJD(5);
t2324 = t2331 ^ 2;
t2361 = t2324 + t2325;
t2132 = t2334 * t2157 - t2329 * t2167;
t2345 = -t2334 * t2257 - t2329 * t2352;
t2205 = -t2254 * qJD(5) - t2345;
t2354 = t2329 * t2257 - t2334 * t2352;
t2346 = qJD(5) * t2256 + t2354;
t2355 = -t2328 * t2205 - t2333 * t2346;
t2229 = -t2330 * t2264 + t2335 * t2340;
t2351 = -qJDD(5) - t2265;
t2349 = -qJDD(6) + t2351;
t2213 = -t2351 - t2372;
t2211 = -t2359 * pkin(3) - t2377 * qJ(4) + t2296 * t2274 + qJDD(4) - t2229;
t2341 = -t2333 * t2205 + t2328 * t2346;
t2177 = -t2352 * pkin(4) - t2382 * pkin(9) + t2281 * t2269 + t2211;
t2338 = qJD(2) ^ 2;
t2317 = t2336 * t2364;
t2314 = -t2338 - t2365;
t2313 = -t2324 * t2339 - t2338;
t2310 = -qJDD(2) + t2317;
t2309 = qJDD(2) + t2317;
t2308 = t2361 * t2339;
t2307 = -qJDD(1) * t2332 - t2337 * t2339;
t2306 = qJDD(1) * t2337 - t2332 * t2339;
t2305 = t2361 * qJDD(1);
t2304 = t2321 - 0.2e1 * t2357;
t2301 = 0.2e1 * t2356 + t2360;
t2297 = t2339 * pkin(7) + t2347;
t2287 = -t2336 * g(3) - t2342;
t2286 = -t2377 - t2378;
t2285 = t2310 * t2336 - t2313 * t2331;
t2284 = -t2309 * t2331 + t2314 * t2336;
t2283 = t2310 * t2331 + t2313 * t2336;
t2282 = t2309 * t2336 + t2314 * t2331;
t2273 = -t2359 - t2367;
t2272 = t2359 - t2367;
t2271 = -t2275 - t2377;
t2267 = -t2378 - t2275;
t2263 = -t2287 * t2331 + t2288 * t2336;
t2262 = t2287 * t2336 + t2288 * t2331;
t2258 = -t2275 - t2381;
t2249 = t2273 * t2335 - t2286 * t2330;
t2248 = t2273 * t2330 + t2286 * t2335;
t2247 = (qJD(3) - t2323) * t2294 + t2350;
t2245 = -t2265 + t2366;
t2243 = -t2275 - t2382;
t2241 = t2271 * t2335 - t2272 * t2330;
t2240 = t2271 * t2330 + t2272 * t2335;
t2239 = pkin(5) * t2293 - pkin(10) * t2256;
t2238 = -t2381 - t2382;
t2237 = -t2379 - t2383;
t2236 = -t2265 - t2371;
t2233 = t2257 - t2368;
t2232 = t2352 + t2370;
t2231 = -t2352 + t2370;
t2225 = -t2379 - t2384;
t2224 = -t2248 * t2331 + t2249 * t2336;
t2223 = t2248 * t2336 + t2249 * t2331;
t2222 = t2245 * t2335 - t2247 * t2330;
t2221 = t2245 * t2330 + t2247 * t2335;
t2219 = -t2240 * t2331 + t2241 * t2336;
t2218 = t2240 * t2336 + t2241 * t2331;
t2217 = -t2380 - t2385;
t2216 = t2236 * t2327 - t2258 * t2326;
t2215 = t2236 * t2326 + t2258 * t2327;
t2214 = t2351 - t2372;
t2209 = -t2235 * t2326 + t2243 * t2327;
t2208 = t2235 * t2327 + t2243 * t2326;
t2207 = -t2383 - t2384;
t2200 = t2232 * t2327 - t2234 * t2326;
t2199 = t2232 * t2326 + t2234 * t2327;
t2198 = -t2229 * t2330 + t2230 * t2335;
t2197 = t2229 * t2335 + t2230 * t2330;
t2196 = t2254 * t2362 + t2345;
t2195 = t2205 - t2369;
t2194 = -t2256 * t2362 - t2354;
t2193 = (qJD(5) + t2293) * t2256 + t2354;
t2192 = t2214 * t2334 - t2237 * t2329;
t2191 = t2214 * t2329 + t2237 * t2334;
t2190 = -t2380 - t2386;
t2189 = t2216 * t2335 + t2233 * t2330;
t2188 = t2216 * t2330 - t2233 * t2335;
t2187 = t2209 * t2335 + t2231 * t2330;
t2186 = t2209 * t2330 - t2231 * t2335;
t2185 = -t2221 * t2331 + t2222 * t2336;
t2184 = t2221 * t2336 + t2222 * t2331;
t2183 = t2200 * t2335 + t2238 * t2330;
t2182 = t2200 * t2330 - t2238 * t2335;
t2181 = t2349 - t2373;
t2180 = -t2349 - t2373;
t2179 = -t2213 * t2329 + t2225 * t2334;
t2178 = t2213 * t2334 + t2225 * t2329;
t2176 = -t2385 - t2386;
t2173 = -t2197 * t2331 + t2198 * t2336;
t2172 = t2197 * t2336 + t2198 * t2331;
t2171 = t2181 * t2333 - t2217 * t2328;
t2170 = t2181 * t2328 + t2217 * t2333;
t2169 = t2194 * t2334 - t2196 * t2329;
t2168 = t2194 * t2329 + t2196 * t2334;
t2165 = -t2191 * t2326 + t2192 * t2327;
t2164 = t2191 * t2327 + t2192 * t2326;
t2163 = -t2188 * t2331 + t2189 * t2336;
t2162 = t2188 * t2336 + t2189 * t2331;
t2161 = -t2186 * t2331 + t2187 * t2336;
t2160 = t2186 * t2336 + t2187 * t2331;
t2159 = -t2180 * t2328 + t2190 * t2333;
t2158 = t2180 * t2333 + t2190 * t2328;
t2156 = -t2182 * t2331 + t2183 * t2336;
t2155 = t2182 * t2336 + t2183 * t2331;
t2152 = -t2178 * t2326 + t2179 * t2327;
t2151 = t2178 * t2327 + t2179 * t2326;
t2150 = t2226 * t2363 + t2341;
t2149 = -t2226 * t2387 - t2341;
t2148 = -t2228 * t2363 + t2355;
t2147 = t2228 * t2387 - t2355;
t2146 = pkin(5) * t2346 - pkin(10) * t2384 + t2256 * t2239 + t2177;
t2145 = -t2174 * t2326 + t2175 * t2327;
t2144 = t2174 * t2327 + t2175 * t2326;
t2143 = t2165 * t2335 + t2195 * t2330;
t2142 = t2165 * t2330 - t2195 * t2335;
t2141 = t2152 * t2335 + t2193 * t2330;
t2140 = t2152 * t2330 - t2193 * t2335;
t2139 = -t2170 * t2329 + t2171 * t2334;
t2138 = t2170 * t2334 + t2171 * t2329;
t2137 = t2145 * t2335 + t2211 * t2330;
t2136 = t2145 * t2330 - t2211 * t2335;
t2135 = -t2168 * t2326 + t2169 * t2327;
t2134 = t2168 * t2327 + t2169 * t2326;
t2131 = -t2158 * t2329 + t2159 * t2334;
t2130 = t2158 * t2334 + t2159 * t2329;
t2129 = t2135 * t2335 + t2207 * t2330;
t2128 = t2135 * t2330 - t2207 * t2335;
t2127 = t2148 * t2333 - t2150 * t2328;
t2126 = t2148 * t2328 + t2150 * t2333;
t2125 = -pkin(5) * t2384 - pkin(10) * t2346 - t2293 * t2239 + t2133;
t2124 = (-t2205 - t2369) * pkin(10) + t2213 * pkin(5) + t2132;
t2123 = -t2142 * t2331 + t2143 * t2336;
t2122 = t2142 * t2336 + t2143 * t2331;
t2121 = -t2140 * t2331 + t2141 * t2336;
t2120 = t2140 * t2336 + t2141 * t2331;
t2119 = -t2138 * t2326 + t2139 * t2327;
t2118 = t2138 * t2327 + t2139 * t2326;
t2117 = -t2136 * t2331 + t2137 * t2336;
t2116 = t2136 * t2336 + t2137 * t2331;
t2115 = -t2132 * t2329 + t2133 * t2334;
t2114 = t2132 * t2334 + t2133 * t2329;
t2113 = -t2130 * t2326 + t2131 * t2327;
t2112 = t2130 * t2327 + t2131 * t2326;
t2111 = -t2128 * t2331 + t2129 * t2336;
t2110 = t2128 * t2336 + t2129 * t2331;
t2109 = t2119 * t2335 + t2149 * t2330;
t2108 = t2119 * t2330 - t2149 * t2335;
t2107 = -t2126 * t2329 + t2127 * t2334;
t2106 = t2126 * t2334 + t2127 * t2329;
t2105 = t2113 * t2335 + t2147 * t2330;
t2104 = t2113 * t2330 - t2147 * t2335;
t2103 = t2124 * t2328 + t2125 * t2333;
t2102 = t2124 * t2333 - t2125 * t2328;
t2101 = -t2114 * t2326 + t2115 * t2327;
t2100 = t2114 * t2327 + t2115 * t2326;
t2099 = t2101 * t2335 + t2177 * t2330;
t2098 = t2101 * t2330 - t2177 * t2335;
t2097 = -t2108 * t2331 + t2109 * t2336;
t2096 = t2108 * t2336 + t2109 * t2331;
t2095 = -t2106 * t2326 + t2107 * t2327;
t2094 = t2106 * t2327 + t2107 * t2326;
t2093 = t2095 * t2335 + t2176 * t2330;
t2092 = t2095 * t2330 - t2176 * t2335;
t2091 = -t2104 * t2331 + t2105 * t2336;
t2090 = t2104 * t2336 + t2105 * t2331;
t2089 = -t2102 * t2328 + t2103 * t2333;
t2088 = t2102 * t2333 + t2103 * t2328;
t2087 = -t2098 * t2331 + t2099 * t2336;
t2086 = t2098 * t2336 + t2099 * t2331;
t2085 = -t2092 * t2331 + t2093 * t2336;
t2084 = t2092 * t2336 + t2093 * t2331;
t2083 = -t2088 * t2329 + t2089 * t2334;
t2082 = t2088 * t2334 + t2089 * t2329;
t2081 = -t2082 * t2326 + t2083 * t2327;
t2080 = t2082 * t2327 + t2083 * t2326;
t2079 = t2081 * t2335 + t2146 * t2330;
t2078 = t2081 * t2330 - t2146 * t2335;
t2077 = -t2078 * t2331 + t2079 * t2336;
t2076 = t2078 * t2336 + t2079 * t2331;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2307, -t2306, 0, -t2311 * t2332 + t2312 * t2337, 0, 0, 0, 0, 0, 0, t2284 * t2337 - t2304 * t2332, t2285 * t2337 + t2301 * t2332, t2305 * t2337 - t2308 * t2332, t2263 * t2337 - t2297 * t2332, 0, 0, 0, 0, 0, 0, t2219 * t2337 + t2244 * t2332, t2224 * t2337 - t2332 * t2353, t2185 * t2337 + t2267 * t2332, t2173 * t2337 - t2268 * t2332, 0, 0, 0, 0, 0, 0, t2161 * t2337 + t2208 * t2332, t2163 * t2337 + t2215 * t2332, t2156 * t2337 + t2199 * t2332, t2117 * t2337 + t2144 * t2332, 0, 0, 0, 0, 0, 0, t2121 * t2337 + t2151 * t2332, t2123 * t2337 + t2164 * t2332, t2111 * t2337 + t2134 * t2332, t2087 * t2337 + t2100 * t2332, 0, 0, 0, 0, 0, 0, t2091 * t2337 + t2112 * t2332, t2097 * t2337 + t2118 * t2332, t2085 * t2337 + t2094 * t2332, t2077 * t2337 + t2080 * t2332; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2306, t2307, 0, t2311 * t2337 + t2312 * t2332, 0, 0, 0, 0, 0, 0, t2284 * t2332 + t2304 * t2337, t2285 * t2332 - t2301 * t2337, t2305 * t2332 + t2308 * t2337, t2263 * t2332 + t2297 * t2337, 0, 0, 0, 0, 0, 0, t2219 * t2332 - t2244 * t2337, t2224 * t2332 + t2337 * t2353, t2185 * t2332 - t2267 * t2337, t2173 * t2332 + t2268 * t2337, 0, 0, 0, 0, 0, 0, t2161 * t2332 - t2208 * t2337, t2163 * t2332 - t2215 * t2337, t2156 * t2332 - t2199 * t2337, t2117 * t2332 - t2144 * t2337, 0, 0, 0, 0, 0, 0, t2121 * t2332 - t2151 * t2337, t2123 * t2332 - t2164 * t2337, t2111 * t2332 - t2134 * t2337, t2087 * t2332 - t2100 * t2337, 0, 0, 0, 0, 0, 0, t2091 * t2332 - t2112 * t2337, t2097 * t2332 - t2118 * t2337, t2085 * t2332 - t2094 * t2337, t2077 * t2332 - t2080 * t2337; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2282, t2283, 0, t2262, 0, 0, 0, 0, 0, 0, t2218, t2223, t2184, t2172, 0, 0, 0, 0, 0, 0, t2160, t2162, t2155, t2116, 0, 0, 0, 0, 0, 0, t2120, t2122, t2110, t2086, 0, 0, 0, 0, 0, 0, t2090, t2096, t2084, t2076; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2339, -qJDD(1), 0, t2312, 0, 0, 0, 0, 0, 0, t2284, t2285, t2305, t2263, 0, 0, 0, 0, 0, 0, t2219, t2224, t2185, t2173, 0, 0, 0, 0, 0, 0, t2161, t2163, t2156, t2117, 0, 0, 0, 0, 0, 0, t2121, t2123, t2111, t2087, 0, 0, 0, 0, 0, 0, t2091, t2097, t2085, t2077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2339, 0, t2311, 0, 0, 0, 0, 0, 0, t2304, -t2301, t2308, t2297, 0, 0, 0, 0, 0, 0, -t2244, t2353, -t2267, t2268, 0, 0, 0, 0, 0, 0, -t2208, -t2215, -t2199, -t2144, 0, 0, 0, 0, 0, 0, -t2151, -t2164, -t2134, -t2100, 0, 0, 0, 0, 0, 0, -t2112, -t2118, -t2094, -t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2282, t2283, 0, t2262, 0, 0, 0, 0, 0, 0, t2218, t2223, t2184, t2172, 0, 0, 0, 0, 0, 0, t2160, t2162, t2155, t2116, 0, 0, 0, 0, 0, 0, t2120, t2122, t2110, t2086, 0, 0, 0, 0, 0, 0, t2090, t2096, t2084, t2076; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2314, t2310, t2321, t2288, 0, 0, 0, 0, 0, 0, t2241, t2249, t2222, t2198, 0, 0, 0, 0, 0, 0, t2187, t2189, t2183, t2137, 0, 0, 0, 0, 0, 0, t2141, t2143, t2129, t2099, 0, 0, 0, 0, 0, 0, t2105, t2109, t2093, t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2309, t2313, -t2360, t2287, 0, 0, 0, 0, 0, 0, t2240, t2248, t2221, t2197, 0, 0, 0, 0, 0, 0, t2186, t2188, t2182, t2136, 0, 0, 0, 0, 0, 0, t2140, t2142, t2128, t2098, 0, 0, 0, 0, 0, 0, t2104, t2108, t2092, t2078; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2304, t2301, -t2308, -t2297, 0, 0, 0, 0, 0, 0, t2244, -t2353, t2267, -t2268, 0, 0, 0, 0, 0, 0, t2208, t2215, t2199, t2144, 0, 0, 0, 0, 0, 0, t2151, t2164, t2134, t2100, 0, 0, 0, 0, 0, 0, t2112, t2118, t2094, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2271, t2273, t2245, t2230, 0, 0, 0, 0, 0, 0, t2209, t2216, t2200, t2145, 0, 0, 0, 0, 0, 0, t2152, t2165, t2135, t2101, 0, 0, 0, 0, 0, 0, t2113, t2119, t2095, t2081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2272, t2286, t2247, t2229, 0, 0, 0, 0, 0, 0, -t2231, -t2233, -t2238, -t2211, 0, 0, 0, 0, 0, 0, -t2193, -t2195, -t2207, -t2177, 0, 0, 0, 0, 0, 0, -t2147, -t2149, -t2176, -t2146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2244, -t2353, t2267, -t2268, 0, 0, 0, 0, 0, 0, t2208, t2215, t2199, t2144, 0, 0, 0, 0, 0, 0, t2151, t2164, t2134, t2100, 0, 0, 0, 0, 0, 0, t2112, t2118, t2094, t2080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2243, t2236, t2232, t2175, 0, 0, 0, 0, 0, 0, t2179, t2192, t2169, t2115, 0, 0, 0, 0, 0, 0, t2131, t2139, t2107, t2083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2235, t2258, t2234, t2174, 0, 0, 0, 0, 0, 0, t2178, t2191, t2168, t2114, 0, 0, 0, 0, 0, 0, t2130, t2138, t2106, t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2231, t2233, t2238, t2211, 0, 0, 0, 0, 0, 0, t2193, t2195, t2207, t2177, 0, 0, 0, 0, 0, 0, t2147, t2149, t2176, t2146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2225, t2214, t2194, t2133, 0, 0, 0, 0, 0, 0, t2159, t2171, t2127, t2089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2213, t2237, t2196, t2132, 0, 0, 0, 0, 0, 0, t2158, t2170, t2126, t2088; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2193, t2195, t2207, t2177, 0, 0, 0, 0, 0, 0, t2147, t2149, t2176, t2146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2190, t2181, t2148, t2103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2180, t2217, t2150, t2102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2147, t2149, t2176, t2146;];
f_new_reg  = t1;
