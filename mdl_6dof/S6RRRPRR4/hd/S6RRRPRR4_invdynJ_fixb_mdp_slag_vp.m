% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR4_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR4_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR4_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR4_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR4_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:18:12
% EndTime: 2019-03-09 18:18:32
% DurationCPUTime: 14.92s
% Computational Cost: add. (13211->680), mult. (29205->861), div. (0->0), fcn. (22849->18), ass. (0->299)
t817 = sin(qJ(3));
t822 = cos(qJ(2));
t954 = cos(qJ(3));
t888 = qJD(1) * t954;
t818 = sin(qJ(2));
t907 = qJD(1) * t818;
t972 = -t817 * t907 + t822 * t888;
t719 = qJD(5) - t972;
t713 = qJD(6) + t719;
t925 = t817 * t822;
t728 = -qJD(1) * t925 - t818 * t888;
t809 = qJD(2) + qJD(3);
t813 = sin(pkin(11));
t814 = cos(pkin(11));
t688 = t728 * t814 - t809 * t813;
t690 = t728 * t813 + t814 * t809;
t816 = sin(qJ(5));
t821 = cos(qJ(5));
t632 = t688 * t816 + t690 * t821;
t820 = cos(qJ(6));
t815 = sin(qJ(6));
t964 = t688 * t821 - t690 * t816;
t940 = t964 * t815;
t976 = t632 * t820 + t940;
t971 = t713 * t976;
t978 = t809 * t972;
t977 = t632 * t719;
t857 = -t632 * t815 + t820 * t964;
t970 = t713 * t857;
t749 = t813 * t821 + t814 * t816;
t725 = t749 * qJD(5);
t969 = -t749 * t972 + t725;
t924 = t821 * t814;
t748 = t813 * t816 - t924;
t917 = t719 * t748;
t975 = t719 * t964;
t669 = -pkin(3) * t728 - qJ(4) * t972;
t824 = -pkin(8) - pkin(7);
t768 = t824 * t822;
t758 = qJD(1) * t768;
t731 = t817 * t758;
t767 = t824 * t818;
t756 = qJD(1) * t767;
t944 = qJD(2) * pkin(2);
t735 = t756 + t944;
t673 = t735 * t954 + t731;
t609 = t813 * t669 + t814 * t673;
t937 = t972 * t813;
t896 = pkin(9) * t937;
t587 = -t896 + t609;
t905 = qJD(4) * t814;
t973 = t587 - t905;
t676 = -t748 * t815 + t749 * t820;
t921 = -qJD(6) * t676 + t815 * t917 - t820 * t969;
t675 = t820 * t748 + t749 * t815;
t920 = qJD(6) * t675 + t815 * t969 + t820 * t917;
t732 = t954 * t758;
t679 = t817 * t756 - t732;
t906 = qJD(3) * t817;
t868 = pkin(2) * t906 - t679;
t812 = qJ(2) + qJ(3);
t804 = sin(t812);
t819 = sin(qJ(1));
t823 = cos(qJ(1));
t866 = g(1) * t823 + g(2) * t819;
t851 = t804 * t866;
t805 = cos(t812);
t948 = g(3) * t805;
t968 = -t851 + t948;
t929 = t804 * t823;
t930 = t804 * t819;
t967 = g(1) * t929 + g(2) * t930 - t948;
t953 = pkin(2) * t822;
t800 = pkin(1) + t953;
t766 = t800 * qJD(1);
t653 = -pkin(3) * t972 + qJ(4) * t728 - t766;
t674 = t817 * t735 - t732;
t661 = qJ(4) * t809 + t674;
t592 = t814 * t653 - t661 * t813;
t556 = -pkin(4) * t972 + pkin(9) * t688 + t592;
t593 = t813 * t653 + t814 * t661;
t565 = pkin(9) * t690 + t593;
t525 = t556 * t816 + t565 * t821;
t515 = pkin(10) * t632 + t525;
t902 = qJD(6) * t815;
t513 = t515 * t902;
t659 = -t809 * pkin(3) + qJD(4) - t673;
t614 = -pkin(4) * t690 + t659;
t557 = -pkin(5) * t632 + t614;
t808 = pkin(11) + qJ(5);
t803 = qJ(6) + t808;
t791 = sin(t803);
t792 = cos(t803);
t927 = t805 * t819;
t696 = t791 * t823 - t792 * t927;
t926 = t805 * t823;
t698 = t791 * t819 + t792 * t926;
t796 = g(3) * t804;
t966 = g(1) * t698 - g(2) * t696 - t557 * t976 + t792 * t796 + t513;
t695 = t791 * t927 + t792 * t823;
t697 = -t791 * t926 + t792 * t819;
t882 = qJDD(1) * t954;
t897 = qJDD(1) * t822;
t642 = t817 * t897 + t818 * t882 + t978;
t807 = qJDD(2) + qJDD(3);
t625 = t642 * t813 - t814 * t807;
t626 = t642 * t814 + t807 * t813;
t903 = qJD(5) * t821;
t904 = qJD(5) * t816;
t542 = -t816 * t625 + t821 * t626 + t688 * t904 + t690 * t903;
t751 = t818 * t954 + t925;
t683 = t809 * t751;
t898 = qJDD(1) * t818;
t860 = t817 * t898 - t822 * t882;
t643 = qJD(1) * t683 + t860;
t638 = qJDD(5) + t643;
t899 = qJD(1) * qJD(2);
t886 = t818 * t899;
t720 = pkin(2) * t886 - qJDD(1) * t800;
t555 = pkin(3) * t643 - qJ(4) * t642 + qJD(4) * t728 + t720;
t885 = t822 * t899;
t685 = qJDD(2) * pkin(2) - t824 * (-t885 - t898);
t691 = t824 * (-t886 + t897);
t887 = qJD(3) * t954;
t834 = t817 * t685 - t691 * t954 + t735 * t887 + t758 * t906;
t574 = t807 * qJ(4) + t809 * qJD(4) + t834;
t527 = t814 * t555 - t574 * t813;
t510 = pkin(4) * t643 - pkin(9) * t626 + t527;
t528 = t813 * t555 + t814 * t574;
t519 = -pkin(9) * t625 + t528;
t880 = t821 * t510 - t519 * t816;
t835 = -qJD(5) * t525 + t880;
t493 = pkin(5) * t638 - pkin(10) * t542 + t835;
t543 = -qJD(5) * t964 + t821 * t625 + t626 * t816;
t844 = t816 * t510 + t821 * t519 + t556 * t903 - t565 * t904;
t494 = -pkin(10) * t543 + t844;
t881 = t820 * t493 - t815 * t494;
t965 = -g(1) * t697 + g(2) * t695 + t557 * t857 + t791 * t796 + t881;
t637 = qJDD(6) + t638;
t963 = t637 * MDP(33) + (t857 ^ 2 - t976 ^ 2) * MDP(30) + t976 * MDP(29) * t857;
t865 = g(1) * t819 - g(2) * t823;
t962 = t865 * t804;
t848 = -t817 * t818 + t822 * t954;
t672 = -pkin(3) * t848 - qJ(4) * t751 - t800;
t693 = t817 * t767 - t768 * t954;
t615 = t814 * t672 - t693 * t813;
t934 = t751 * t814;
t586 = -pkin(4) * t848 - pkin(9) * t934 + t615;
t616 = t813 * t672 + t814 * t693;
t935 = t751 * t813;
t601 = -pkin(9) * t935 + t616;
t919 = t816 * t586 + t821 * t601;
t706 = pkin(4) * t937;
t869 = -t706 + t868;
t793 = pkin(2) * t817 + qJ(4);
t733 = (-pkin(9) - t793) * t813;
t806 = t814 * pkin(9);
t931 = t793 * t814;
t734 = t806 + t931;
t913 = t816 * t733 + t821 * t734;
t961 = t969 * pkin(10);
t764 = (-pkin(9) - qJ(4)) * t813;
t943 = qJ(4) * t814;
t765 = t806 + t943;
t911 = t816 * t764 + t821 * t765;
t910 = t805 * pkin(3) + t804 * qJ(4);
t960 = -t728 * pkin(5) - pkin(10) * t917;
t959 = t954 * t767 + t817 * t768;
t958 = t969 * pkin(5);
t957 = -pkin(3) * t807 + qJDD(4);
t878 = t815 * t542 + t820 * t543;
t502 = -qJD(6) * t857 + t878;
t608 = t814 * t669 - t673 * t813;
t936 = t972 * t814;
t870 = -t728 * pkin(4) - pkin(9) * t936;
t573 = t608 + t870;
t854 = qJD(4) * t813 + qJD(5) * t765;
t956 = -t764 * t903 + t973 * t821 + (t573 + t854) * t816;
t660 = pkin(2) * t907 + t669;
t680 = t756 * t954 + t731;
t606 = t814 * t660 - t680 * t813;
t569 = t606 + t870;
t607 = t813 * t660 + t814 * t680;
t585 = -t896 + t607;
t778 = pkin(2) * t887 + qJD(4);
t933 = t778 * t813;
t855 = qJD(5) * t734 + t933;
t955 = t821 * t585 - t733 * t903 - t778 * t924 + (t569 + t855) * t816;
t949 = pkin(10) * t749;
t946 = t748 * pkin(5);
t945 = t814 * pkin(4);
t524 = t821 * t556 - t565 * t816;
t514 = pkin(10) * t964 + t524;
t512 = pkin(5) * t719 + t514;
t942 = t512 * t820;
t941 = t515 * t820;
t526 = t528 * t814;
t939 = t643 * t813;
t682 = t809 * t848;
t938 = t682 * t813;
t932 = t778 * t814;
t928 = t805 * t813;
t895 = t818 * t944;
t602 = pkin(3) * t683 - qJ(4) * t682 - qJD(4) * t751 + t895;
t891 = qJD(2) * t824;
t757 = t818 * t891;
t759 = t822 * t891;
t633 = qJD(3) * t959 + t954 * t757 + t817 * t759;
t550 = t813 * t602 + t814 * t633;
t916 = t659 - t778;
t915 = t958 + t869;
t810 = t818 ^ 2;
t909 = -t822 ^ 2 + t810;
t901 = qJD(6) * t820;
t900 = -qJD(4) + t659;
t893 = t820 * t542 - t815 * t543 + t632 * t901;
t636 = t706 + t674;
t892 = g(1) * t926 + g(2) * t927 + t796;
t794 = -pkin(3) - t945;
t884 = -t636 + t958;
t549 = t814 * t602 - t633 * t813;
t535 = pkin(4) * t683 - t682 * t806 + t549;
t545 = -pkin(9) * t938 + t550;
t879 = t821 * t535 - t545 * t816;
t877 = t821 * t586 - t601 * t816;
t876 = -t607 + t932;
t874 = t821 * t733 - t734 * t816;
t873 = t821 * t764 - t765 * t816;
t872 = qJD(6) * t512 + t494;
t871 = -t954 * t685 - t817 * t691 + t735 * t906 - t758 * t887;
t799 = -pkin(2) * t954 - pkin(3);
t867 = -pkin(2) * t818 - pkin(3) * t804;
t564 = t821 * t569;
t739 = t748 * pkin(10);
t640 = -t739 + t913;
t864 = qJD(5) * t913 + qJD(6) * t640 - t585 * t816 + t749 * t778 + t564 + t960;
t568 = t821 * t573;
t657 = -t739 + t911;
t863 = t749 * qJD(4) + qJD(5) * t911 + qJD(6) * t657 - t587 * t816 + t568 + t960;
t639 = t874 - t949;
t862 = -qJD(6) * t639 + t955 + t961;
t656 = t873 - t949;
t861 = -qJD(6) * t656 + t956 + t961;
t500 = t512 * t815 + t941;
t859 = -t527 * t813 + t526;
t664 = t749 * t751;
t665 = t748 * t751;
t603 = t820 * t664 - t665 * t815;
t604 = -t664 * t815 - t665 * t820;
t655 = pkin(4) * t935 - t959;
t853 = t800 + t910;
t852 = t592 * t936 + t593 * t937 + t526 - t892;
t850 = t865 * t805;
t849 = -0.2e1 * pkin(1) * t899 - pkin(7) * qJDD(2);
t763 = t799 - t945;
t634 = t817 * t757 - t759 * t954 + t767 * t906 - t768 * t887;
t843 = t816 * t535 + t821 * t545 + t586 * t903 - t601 * t904;
t501 = t902 * t964 + t893;
t578 = t871 + t957;
t591 = pkin(4) * t938 + t634;
t842 = -t871 + t967;
t825 = qJD(2) ^ 2;
t840 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t825 + t865;
t826 = qJD(1) ^ 2;
t839 = pkin(1) * t826 - pkin(7) * qJDD(1) + t866;
t838 = t578 * t751 + t659 * t682 - t866;
t548 = pkin(4) * t625 + t578;
t837 = t592 * t728 + (-t578 + t967) * t814;
t836 = -t766 * t728 + t842;
t833 = g(3) * t928 - t593 * t728 + (t578 - t851) * t813;
t499 = -t515 * t815 + t942;
t511 = pkin(5) * t543 + t548;
t832 = t499 * t728 + t511 * t675 - t557 * t921 + t792 * t967;
t802 = cos(t808);
t831 = t524 * t728 + t548 * t748 + t614 * t969 + t802 * t967;
t830 = -t500 * t728 + t511 * t676 - t557 * t920 + t791 * t968;
t801 = sin(t808);
t829 = -t525 * t728 + t548 * t749 - t614 * t917 + t801 * t968;
t828 = t766 * t972 - t834 + t892;
t827 = (-t501 * t675 - t502 * t676 - t857 * t921 - t920 * t976) * MDP(30) + (t501 * t676 + t857 * t920) * MDP(29) + (-t542 * t748 - t543 * t749 - t632 * t917 + t964 * t969) * MDP(23) + (t637 * t676 - t713 * t920 - t728 * t857) * MDP(31) + (-t637 * t675 + t713 * t921 + t728 * t976) * MDP(32) + (t542 * t749 + t917 * t964) * MDP(22) + (t638 * t749 - t719 * t917 - t728 * t964) * MDP(24) + (t632 * t728 - t638 * t748 - t719 * t969) * MDP(25) + (t642 - t978) * MDP(13) + (-t860 + (-qJD(1) * t751 - t728) * t809) * MDP(14) + (t728 ^ 2 - t972 ^ 2) * MDP(12) + t807 * MDP(15) + (MDP(11) * t972 + MDP(26) * t719 + MDP(33) * t713) * t728;
t770 = qJ(4) * t926;
t769 = qJ(4) * t927;
t704 = t794 + t946;
t703 = t801 * t819 + t802 * t926;
t702 = -t801 * t926 + t802 * t819;
t701 = t801 * t823 - t802 * t927;
t700 = t801 * t927 + t802 * t823;
t694 = t763 + t946;
t605 = t664 * pkin(5) + t655;
t572 = t682 * t749 + t903 * t934 - t904 * t935;
t571 = -t682 * t748 - t725 * t751;
t536 = t572 * pkin(5) + t591;
t532 = -pkin(10) * t664 + t919;
t529 = -pkin(5) * t848 + pkin(10) * t665 + t877;
t518 = qJD(6) * t604 + t571 * t815 + t820 * t572;
t517 = -qJD(6) * t603 + t571 * t820 - t572 * t815;
t498 = -pkin(10) * t572 + t843;
t497 = pkin(5) * t683 - pkin(10) * t571 - qJD(5) * t919 + t879;
t1 = [(t527 * t615 + t528 * t616 + t592 * t549 + t593 * t550 - t578 * t959 + t659 * t634 + (g(1) * t824 - g(2) * t853) * t823 + (g(1) * t853 + g(2) * t824) * t819) * MDP(21) + (-t542 * t665 - t571 * t964) * MDP(22) + (-g(1) * t700 - g(2) * t702 - t525 * t683 + t655 * t542 - t548 * t665 + t614 * t571 - t591 * t964 - t638 * t919 - t719 * t843 + t844 * t848) * MDP(28) + (-t542 * t848 + t571 * t719 - t638 * t665 - t683 * t964) * MDP(24) + (-t501 * t603 - t502 * t604 + t517 * t976 + t518 * t857) * MDP(30) + ((t497 * t820 - t498 * t815) * t713 + (t529 * t820 - t532 * t815) * t637 - t881 * t848 + t499 * t683 - t536 * t976 + t605 * t502 + t511 * t603 + t557 * t518 - g(1) * t696 - g(2) * t698 + ((-t529 * t815 - t532 * t820) * t713 + t500 * t848) * qJD(6)) * MDP(34) + (t502 * t848 - t518 * t713 - t603 * t637 + t683 * t976) * MDP(32) + (-t542 * t664 + t543 * t665 + t571 * t632 + t572 * t964) * MDP(23) + (t879 * t719 + t877 * t638 - t880 * t848 + t524 * t683 - t591 * t632 + t655 * t543 + t548 * t664 + t614 * t572 - g(1) * t701 - g(2) * t703 + (t525 * t848 - t719 * t919) * qJD(5)) * MDP(27) + (t543 * t848 - t572 * t719 + t632 * t683 - t638 * t664) * MDP(25) + (-t527 * t848 - t549 * t972 + t592 * t683 + t615 * t643 - t625 * t959 - t634 * t690 + t813 * t838 + t814 * t850) * MDP(18) + (t528 * t848 + t550 * t972 - t593 * t683 - t616 * t643 - t626 * t959 - t634 * t688 + t814 * t838 - t865 * t928) * MDP(19) + (-t634 * t809 - t643 * t800 - t683 * t766 - t720 * t848 + t807 * t959 - t895 * t972 + t850) * MDP(16) + (t642 * t848 - t643 * t751 + t682 * t972 + t683 * t728) * MDP(12) + (t501 * t604 - t517 * t857) * MDP(29) + (t549 * t688 + t550 * t690 - t615 * t626 - t616 * t625 + t962 + (-t527 * t814 - t528 * t813) * t751 + (-t592 * t814 - t593 * t813) * t682) * MDP(20) + (-t501 * t848 + t517 * t713 + t604 * t637 - t683 * t857) * MDP(31) + (-g(1) * t695 - g(2) * t697 - t500 * t683 + t605 * t501 + t511 * t604 - t513 * t848 + t557 * t517 - t536 * t857 + (-(-qJD(6) * t532 + t497) * t713 - t529 * t637 + t493 * t848) * t815 + (-(qJD(6) * t529 + t498) * t713 - t532 * t637 + t872 * t848) * t820) * MDP(35) + (-t683 * t809 + t807 * t848) * MDP(14) + (-t638 * t848 + t683 * t719) * MDP(26) + (-t637 * t848 + t683 * t713) * MDP(33) + qJDD(1) * MDP(1) + (qJDD(2) * t818 + t822 * t825) * MDP(6) + (qJDD(2) * t822 - t818 * t825) * MDP(7) + (t682 * t809 + t751 * t807) * MDP(13) + (t642 * t751 - t682 * t728) * MDP(11) + (-t633 * t809 - t642 * t800 - t682 * t766 - t693 * t807 + t720 * t751 - t728 * t895 - t962) * MDP(17) + (t818 * t849 + t822 * t840) * MDP(9) + (-t818 * t840 + t822 * t849) * MDP(10) + t865 * MDP(2) + t866 * MDP(3) + (qJDD(1) * t810 + 0.2e1 * t818 * t885) * MDP(4) + 0.2e1 * (t818 * t897 - t899 * t909) * MDP(5); t827 + (t679 * t809 + (t807 * t954 - t809 * t906 + t907 * t972) * pkin(2) + t836) * MDP(16) + (-t625 * t931 - t606 * t688 + t876 * t690 + (t626 * t793 - t688 * t778 - t527) * t813 + t852) * MDP(20) + ((t639 * t820 - t640 * t815) * t637 + t694 * t502 + (t815 * t862 - t820 * t864) * t713 - t915 * t976 + t832) * MDP(34) + MDP(7) * t897 + MDP(6) * t898 + (-g(3) * t822 + t818 * t839) * MDP(9) + (g(3) * t818 + t822 * t839) * MDP(10) + (-t643 * t931 + t626 * t799 - t868 * t688 - (t814 * t916 + t607) * t972 + t833) * MDP(19) + (t680 * t809 + (t728 * t907 - t807 * t817 - t809 * t887) * pkin(2) + t828) * MDP(17) + (-t793 * t939 + t625 * t799 - t868 * t690 - (t813 * t916 - t606) * t972 + t837) * MDP(18) + (-(t639 * t815 + t640 * t820) * t637 + t694 * t501 + (t815 * t864 + t820 * t862) * t713 - t915 * t857 + t830) * MDP(35) + qJDD(2) * MDP(8) + (t578 * t799 - g(1) * (t823 * t867 + t770) - g(2) * (t819 * t867 + t769) - g(3) * (t910 + t953) + t859 * t793 + t868 * t659 + t876 * t593 + (-t606 - t933) * t592) * MDP(21) + (t763 * t542 - t913 * t638 + t719 * t955 - t869 * t964 + t829) * MDP(28) + (t874 * t638 + t763 * t543 + (-t564 - t855 * t821 + (-qJD(5) * t733 + t585 - t932) * t816) * t719 - t869 * t632 + t831) * MDP(27) + (-MDP(4) * t818 * t822 + MDP(5) * t909) * t826; t827 + (t873 * t638 + t794 * t543 + t636 * t632 + (-t568 - t854 * t821 + (-qJD(5) * t764 + t973) * t816) * t719 + t831) * MDP(27) + (-t578 * pkin(3) - t593 * t609 - t592 * t608 - t659 * t674 - g(1) * (-pkin(3) * t929 + t770) - g(2) * (-pkin(3) * t930 + t769) - g(3) * t910 + (-t592 * t813 + t593 * t814) * qJD(4) + t859 * qJ(4)) * MDP(21) + (-t625 * t943 - t608 * t688 - (t609 - t905) * t690 + (qJ(4) * t626 - qJD(4) * t688 - t527) * t813 + t852) * MDP(20) + (-qJ(4) * t939 - pkin(3) * t625 + t674 * t690 - (t813 * t900 - t608) * t972 + t837) * MDP(18) + (-t643 * t943 - pkin(3) * t626 + t674 * t688 - (t814 * t900 + t609) * t972 + t833) * MDP(19) + (t794 * t542 + t636 * t964 - t911 * t638 + t719 * t956 + t829) * MDP(28) + (t673 * t809 + t828) * MDP(17) + (t674 * t809 + t836) * MDP(16) + ((t656 * t820 - t657 * t815) * t637 + t704 * t502 + (t815 * t861 - t820 * t863) * t713 - t884 * t976 + t832) * MDP(34) + (-(t656 * t815 + t657 * t820) * t637 + t704 * t501 + (t815 * t863 + t820 * t861) * t713 - t884 * t857 + t830) * MDP(35); (t688 * t972 + t625) * MDP(18) + (-t690 * t972 + t626) * MDP(19) + (-t688 ^ 2 - t690 ^ 2) * MDP(20) + (-t592 * t688 - t593 * t690 - t842 + t957) * MDP(21) + (t543 - t975) * MDP(27) + (t542 + t977) * MDP(28) + (t502 - t970) * MDP(34) + (t501 + t971) * MDP(35); t964 * t632 * MDP(22) + (-t632 ^ 2 + t964 ^ 2) * MDP(23) + (t542 - t977) * MDP(24) + (-t543 - t975) * MDP(25) + t638 * MDP(26) + (-g(1) * t702 + g(2) * t700 + t525 * t719 + t614 * t964 + t796 * t801 + t835) * MDP(27) + (g(1) * t703 - g(2) * t701 + t524 * t719 - t614 * t632 + t796 * t802 - t844) * MDP(28) + (t501 - t971) * MDP(31) + (-t502 - t970) * MDP(32) + (-(-t514 * t815 - t941) * t713 - t500 * qJD(6) + (t637 * t820 - t713 * t902 - t964 * t976) * pkin(5) + t965) * MDP(34) + ((-t515 * t713 - t493) * t815 + (t514 * t713 - t872) * t820 + (-t637 * t815 - t713 * t901 - t857 * t964) * pkin(5) + t966) * MDP(35) + t963; (t893 - t971) * MDP(31) + (-t878 - t970) * MDP(32) + (t500 * t713 + t965) * MDP(34) + (-t815 * t493 - t820 * t494 + t499 * t713 + t966) * MDP(35) + (MDP(31) * t940 + MDP(32) * t857 - MDP(34) * t500 - MDP(35) * t942) * qJD(6) + t963;];
tau  = t1;
