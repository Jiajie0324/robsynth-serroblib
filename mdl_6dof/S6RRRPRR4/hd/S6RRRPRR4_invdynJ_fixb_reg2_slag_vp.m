% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:17:55
% EndTime: 2019-03-09 18:18:24
% DurationCPUTime: 15.44s
% Computational Cost: add. (30978->766), mult. (68868->964), div. (0->0), fcn. (52646->18), ass. (0->362)
t400 = sin(qJ(3));
t401 = sin(qJ(2));
t404 = cos(qJ(2));
t556 = cos(qJ(3));
t327 = t400 * t404 + t401 * t556;
t306 = t327 * qJD(1);
t391 = qJD(2) + qJD(3);
t395 = sin(pkin(11));
t396 = cos(pkin(11));
t260 = t306 * t395 - t396 * t391;
t262 = t306 * t396 + t391 * t395;
t399 = sin(qJ(5));
t403 = cos(qJ(5));
t191 = t260 * t403 + t262 * t399;
t193 = t260 * t399 - t262 * t403;
t398 = sin(qJ(6));
t555 = cos(qJ(6));
t108 = t555 * t191 - t398 * t193;
t591 = t108 ^ 2;
t110 = t398 * t191 + t193 * t555;
t590 = t110 ^ 2;
t473 = t556 * t404;
t365 = qJD(1) * t473;
t491 = qJD(1) * t401;
t472 = t400 * t491;
t304 = -t365 + t472;
t297 = qJD(5) + t304;
t290 = qJD(6) + t297;
t589 = t108 * t290;
t588 = t110 * t290;
t324 = t395 * t403 + t396 * t399;
t303 = t324 * qJD(5);
t577 = t324 * t304 + t303;
t502 = t403 * t396;
t565 = -t395 * t399 + t502;
t487 = qJD(5) * t403;
t488 = qJD(5) * t399;
t566 = -t395 * t488 + t396 * t487;
t576 = t565 * t304 + t566;
t587 = t191 ^ 2;
t586 = t193 ^ 2;
t585 = t191 * t297;
t584 = t193 * t297;
t237 = pkin(3) * t306 + qJ(4) * t304;
t225 = pkin(2) * t491 + t237;
t558 = pkin(8) + pkin(7);
t346 = t558 * t404;
t334 = qJD(1) * t346;
t307 = t400 * t334;
t345 = t558 * t401;
t332 = qJD(1) * t345;
t251 = -t332 * t556 - t307;
t167 = t396 * t225 - t251 * t395;
t516 = t304 * t396;
t454 = t306 * pkin(4) + pkin(9) * t516;
t122 = t167 + t454;
t168 = t395 * t225 + t396 * t251;
t517 = t304 * t395;
t481 = pkin(9) * t517;
t142 = t481 + t168;
t374 = pkin(2) * t400 + qJ(4);
t310 = (-pkin(9) - t374) * t395;
t387 = t396 * pkin(9);
t513 = t374 * t396;
t311 = t387 + t513;
t469 = qJD(3) * t556;
t358 = pkin(2) * t469 + qJD(4);
t514 = t358 * t395;
t532 = -t403 * t142 + t310 * t487 + t358 * t502 + (-qJD(5) * t311 - t122 - t514) * t399;
t235 = t399 * t310 + t403 * t311;
t531 = -qJD(5) * t235 - t403 * t122 + t142 * t399 - t324 * t358;
t534 = qJD(2) * pkin(2);
t312 = -t332 + t534;
t241 = t312 * t556 - t307;
t169 = t396 * t237 - t241 * t395;
t126 = t169 + t454;
t170 = t395 * t237 + t396 * t241;
t146 = t481 + t170;
t397 = -pkin(9) - qJ(4);
t342 = t397 * t395;
t343 = qJ(4) * t396 + t387;
t489 = qJD(4) * t396;
t530 = t342 * t487 + (-t146 + t489) * t403 + (-qJD(4) * t395 - qJD(5) * t343 - t126) * t399;
t259 = t399 * t342 + t403 * t343;
t529 = -t324 * qJD(4) - qJD(5) * t259 - t403 * t126 + t146 * t399;
t583 = t577 * pkin(10);
t582 = -t306 * pkin(5) - pkin(10) * t576;
t581 = -t583 + t532;
t580 = t582 + t531;
t579 = -t583 + t530;
t578 = t582 + t529;
t527 = t108 * t110;
t484 = qJD(1) * qJD(2);
t466 = t404 * t484;
t483 = t401 * qJDD(1);
t256 = qJDD(2) * pkin(2) + t558 * (-t466 - t483);
t467 = t401 * t484;
t482 = t404 * qJDD(1);
t264 = t558 * (-t467 + t482);
t490 = qJD(3) * t400;
t145 = t556 * t256 - t400 * t264 - t312 * t490 - t334 * t469;
t388 = qJDD(2) + qJDD(3);
t135 = -pkin(3) * t388 + qJDD(4) - t145;
t394 = qJ(2) + qJ(3);
t386 = cos(t394);
t378 = g(3) * t386;
t385 = sin(t394);
t405 = cos(qJ(1));
t509 = t385 * t405;
t402 = sin(qJ(1));
t510 = t385 * t402;
t563 = -g(1) * t509 - g(2) * t510 + t378;
t421 = t135 + t563;
t244 = t324 * t555 + t398 * t565;
t501 = -qJD(6) * t244 - t398 * t576 - t555 * t577;
t468 = qJD(6) * t555;
t486 = qJD(6) * t398;
t500 = t324 * t486 + t398 * t577 - t468 * t565 - t555 * t576;
t308 = t556 * t334;
t250 = -t332 * t400 + t308;
t451 = pkin(2) * t490 - t250;
t449 = g(1) * t405 + g(2) * t402;
t435 = t449 * t385;
t575 = t378 - t435;
t574 = t590 - t591;
t503 = t400 * t401;
t447 = t391 * t503;
t461 = qJDD(1) * t556;
t456 = -t365 * t391 - t400 * t482 - t401 * t461;
t204 = qJD(1) * t447 + t456;
t188 = -t204 * t395 - t396 * t388;
t189 = -t204 * t396 + t388 * t395;
t87 = t399 * t188 - t403 * t189 + t260 * t487 + t262 * t488;
t88 = t188 * t403 + t399 * t189 - t260 * t488 + t262 * t487;
t32 = t191 * t468 - t193 * t486 + t398 * t88 + t555 * t87;
t573 = -t32 + t589;
t224 = -t391 * pkin(3) + qJD(4) - t241;
t175 = t260 * pkin(4) + t224;
t106 = t191 * pkin(5) + t175;
t390 = pkin(11) + qJ(5);
t384 = qJ(6) + t390;
t372 = sin(t384);
t373 = cos(t384);
t507 = t386 * t402;
t269 = t372 * t405 - t373 * t507;
t506 = t386 * t405;
t271 = t372 * t402 + t373 * t506;
t553 = pkin(2) * t404;
t381 = pkin(1) + t553;
t344 = t381 * qJD(1);
t217 = t304 * pkin(3) - t306 * qJ(4) - t344;
t242 = t400 * t312 + t308;
t226 = t391 * qJ(4) + t242;
t153 = t396 * t217 - t226 * t395;
t103 = pkin(4) * t304 - pkin(9) * t262 + t153;
t154 = t395 * t217 + t396 * t226;
t116 = -pkin(9) * t260 + t154;
t253 = t391 * t327;
t445 = t400 * t483 - t404 * t461;
t205 = qJD(1) * t253 + t445;
t298 = pkin(2) * t467 - qJDD(1) * t381;
t102 = t205 * pkin(3) + t204 * qJ(4) - t306 * qJD(4) + t298;
t457 = -t400 * t256 - t556 * t264 - t312 * t469 + t334 * t490;
t131 = qJ(4) * t388 + qJD(4) * t391 - t457;
t65 = t396 * t102 - t131 * t395;
t44 = pkin(4) * t205 - pkin(9) * t189 + t65;
t66 = t395 * t102 + t396 * t131;
t53 = -pkin(9) * t188 + t66;
t15 = t103 * t487 - t116 * t488 + t399 * t44 + t403 * t53;
t10 = -pkin(10) * t88 + t15;
t62 = t403 * t103 - t116 * t399;
t48 = pkin(10) * t193 + t62;
t46 = pkin(5) * t297 + t48;
t63 = t103 * t399 + t116 * t403;
t49 = -pkin(10) * t191 + t63;
t16 = -qJD(5) * t63 - t399 * t53 + t403 * t44;
t200 = qJDD(5) + t205;
t9 = t200 * pkin(5) + t87 * pkin(10) + t16;
t3 = t10 * t555 + t398 * t9 + t46 * t468 - t49 * t486;
t377 = g(3) * t385;
t572 = g(1) * t271 - g(2) * t269 + t106 * t108 + t373 * t377 - t3;
t326 = -t473 + t503;
t240 = pkin(3) * t326 - qJ(4) * t327 - t381;
t266 = -t400 * t345 + t346 * t556;
t178 = t396 * t240 - t266 * t395;
t143 = pkin(4) * t326 - t327 * t387 + t178;
t179 = t395 * t240 + t396 * t266;
t515 = t327 * t395;
t162 = -pkin(9) * t515 + t179;
t90 = t399 * t143 + t403 * t162;
t280 = pkin(4) * t517;
t452 = t280 + t451;
t539 = t396 * pkin(4);
t375 = pkin(3) + t539;
t383 = cos(t390);
t325 = pkin(5) * t383 + t375;
t389 = -pkin(10) + t397;
t570 = t386 * t325 - t385 * t389;
t569 = -t556 * t345 - t400 * t346;
t568 = t386 * t375 - t385 * t397;
t567 = t386 * pkin(3) + t385 * qJ(4);
t465 = pkin(4) * t395 + t558;
t564 = t577 * pkin(5);
t382 = sin(t390);
t273 = t382 * t507 + t383 * t405;
t275 = -t382 * t506 + t383 * t402;
t562 = -g(1) * t275 + g(2) * t273 + t382 * t377;
t268 = t372 * t507 + t373 * t405;
t270 = -t372 * t506 + t373 * t402;
t477 = t555 * t49;
t23 = t398 * t46 + t477;
t4 = -qJD(6) * t23 - t398 * t10 + t555 * t9;
t561 = -g(1) * t270 + g(2) * t268 + t106 * t110 + t372 * t377 + t4;
t33 = -qJD(6) * t110 - t398 * t87 + t555 * t88;
t560 = -t33 - t588;
t559 = t304 ^ 2;
t557 = pkin(5) * t88;
t554 = pkin(2) * t401;
t552 = pkin(4) * t188;
t549 = pkin(10) * t324;
t350 = t405 * t381;
t545 = g(2) * t350;
t543 = g(3) * t404;
t540 = t565 * pkin(5);
t234 = t403 * t310 - t311 * t399;
t201 = t234 - t549;
t316 = t565 * pkin(10);
t202 = t316 + t235;
t129 = t201 * t555 - t398 * t202;
t538 = qJD(6) * t129 + t580 * t398 + t555 * t581;
t130 = t398 * t201 + t202 * t555;
t537 = -qJD(6) * t130 - t398 * t581 + t580 * t555;
t258 = t403 * t342 - t343 * t399;
t221 = t258 - t549;
t222 = t316 + t259;
t151 = t221 * t555 - t398 * t222;
t536 = qJD(6) * t151 + t398 * t578 + t555 * t579;
t152 = t398 * t221 + t222 * t555;
t535 = -qJD(6) * t152 - t398 * t579 + t555 * t578;
t533 = t398 * t49;
t64 = t66 * t396;
t528 = pkin(7) * qJDD(1);
t526 = t188 * t396;
t525 = t189 * t395;
t524 = t193 * t191;
t523 = t205 * t395;
t522 = t205 * t396;
t252 = -qJD(2) * t473 - t404 * t469 + t447;
t521 = t252 * t395;
t520 = t290 * t306;
t519 = t297 * t306;
t518 = t304 * t306;
t508 = t386 * t395;
t479 = t401 * t534;
t163 = pkin(3) * t253 + qJ(4) * t252 - qJD(4) * t327 + t479;
t474 = qJD(2) * t558;
t333 = t401 * t474;
t335 = t404 * t474;
t196 = qJD(3) * t569 - t556 * t333 - t400 * t335;
t97 = t395 * t163 + t396 * t196;
t497 = t224 - t358;
t496 = t564 + t452;
t495 = pkin(5) * t382 + t465;
t392 = t401 ^ 2;
t393 = t404 ^ 2;
t493 = t392 - t393;
t492 = t392 + t393;
t485 = -qJD(4) + t224;
t408 = qJD(1) ^ 2;
t476 = t401 * t408 * t404;
t475 = g(1) * t506 + g(2) * t507 + t377;
t198 = -t280 + t242;
t464 = -t198 + t564;
t89 = t403 * t143 - t162 * t399;
t96 = t396 * t163 - t196 * t395;
t460 = t358 * t396 - t168;
t380 = -pkin(2) * t556 - pkin(3);
t455 = t401 * t466;
t453 = -g(1) * t510 + g(2) * t509;
t450 = -pkin(3) * t385 - t554;
t448 = g(1) * t402 - g(2) * t405;
t220 = pkin(4) * t515 - t569;
t444 = -t65 * t395 + t64;
t443 = t205 * t327 - t252 * t304;
t442 = t205 * t326 + t253 * t304;
t441 = t260 * t396 + t262 * t395;
t439 = t325 * t385 + t386 * t389;
t437 = t375 * t385 + t386 * t397;
t436 = -t153 * t516 - t154 * t517 - t475 + t64;
t230 = t565 * t327;
t67 = pkin(5) * t326 - pkin(10) * t230 + t89;
t229 = t324 * t327;
t70 = -pkin(10) * t229 + t90;
t34 = -t398 * t70 + t555 * t67;
t35 = t398 * t67 + t555 * t70;
t434 = t448 * t386;
t433 = -0.2e1 * pkin(1) * t484 - pkin(7) * qJDD(2);
t165 = -t398 * t229 + t230 * t555;
t341 = t380 - t539;
t80 = pkin(4) * t253 + t252 * t387 + t96;
t92 = pkin(9) * t521 + t97;
t26 = t143 * t487 - t162 * t488 + t399 * t80 + t403 * t92;
t407 = qJD(2) ^ 2;
t427 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t407 + t448;
t426 = pkin(1) * t408 + t449 - t528;
t425 = -t344 * t304 + t457 + t475;
t424 = t344 * t306 + t145 - t563;
t423 = t135 * t327 - t224 * t252 - t449;
t95 = t135 + t552;
t422 = -t153 * t306 - t396 * t421;
t27 = -qJD(5) * t90 - t399 * t92 + t403 * t80;
t22 = t46 * t555 - t533;
t243 = t324 * t398 - t555 * t565;
t420 = t22 * t500 + t23 * t501 - t3 * t243 - t4 * t244 - t475;
t419 = t15 * t565 - t16 * t324 - t576 * t62 - t577 * t63 - t475;
t45 = t95 + t557;
t417 = -t106 * t501 - t22 * t306 + t45 * t243 - t373 * t563;
t197 = qJD(3) * t266 - t400 * t333 + t556 * t335;
t416 = t175 * t577 - t62 * t306 - t383 * t563 - t565 * t95;
t415 = g(3) * t508 + t154 * t306 + (t135 - t435) * t395;
t414 = t421 + t552;
t150 = -pkin(4) * t521 + t197;
t413 = -t106 * t500 + t23 * t306 + t45 * t244 + t372 * t575;
t412 = t175 * t576 + t63 * t306 + t95 * t324 + t382 * t575;
t348 = qJ(4) * t506;
t347 = qJ(4) * t507;
t278 = -t375 - t540;
t276 = t382 * t402 + t383 * t506;
t274 = t382 * t405 - t383 * t507;
t267 = t341 - t540;
t206 = t306 ^ 2 - t559;
t199 = qJDD(6) + t200;
t173 = -t456 + (t304 - t472) * t391;
t166 = pkin(5) * t229 + t220;
t164 = t229 * t555 + t230 * t398;
t128 = t262 * t516 + t525;
t127 = t260 * t517 - t526;
t125 = -t252 * t324 + t327 * t566;
t124 = t252 * t565 + t303 * t327;
t105 = t260 * t306 - t395 * t559 + t522;
t104 = -t262 * t306 + t396 * t559 + t523;
t81 = t125 * pkin(5) + t150;
t73 = -t395 * t188 + t189 * t396 - t304 * t441;
t69 = t191 * t306 + t200 * t565 - t297 * t577;
t68 = t193 * t306 + t324 * t200 + t297 * t576;
t52 = qJD(6) * t165 - t398 * t124 + t125 * t555;
t51 = t124 * t555 + t398 * t125 + t229 * t468 + t230 * t486;
t41 = t191 * t577 - t565 * t88;
t40 = -t193 * t576 - t87 * t324;
t37 = t108 * t306 - t243 * t199 + t290 * t501;
t36 = t110 * t306 + t244 * t199 - t290 * t500;
t25 = t48 * t555 - t533;
t24 = -t398 * t48 - t477;
t21 = -pkin(10) * t125 + t26;
t20 = t253 * pkin(5) + t124 * pkin(10) + t27;
t17 = -t191 * t576 + t193 * t577 - t324 * t88 - t565 * t87;
t12 = -t108 * t501 + t243 * t33;
t11 = t110 * t500 - t244 * t32;
t7 = -qJD(6) * t35 + t20 * t555 - t398 * t21;
t6 = qJD(6) * t34 + t398 * t20 + t21 * t555;
t5 = t108 * t500 - t110 * t501 + t243 * t32 - t244 * t33;
t1 = [0, 0, 0, 0, 0, qJDD(1), t448, t449, 0, 0, qJDD(1) * t392 + 0.2e1 * t455, 0.2e1 * t401 * t482 - 0.2e1 * t484 * t493, qJDD(2) * t401 + t404 * t407, qJDD(1) * t393 - 0.2e1 * t455, qJDD(2) * t404 - t401 * t407, 0, t401 * t433 + t404 * t427, -t401 * t427 + t404 * t433, 0.2e1 * t492 * t528 - t449, -g(1) * (-pkin(1) * t402 + pkin(7) * t405) - g(2) * (pkin(1) * t405 + pkin(7) * t402) + (pkin(7) ^ 2 * t492 + pkin(1) ^ 2) * qJDD(1), -t204 * t327 - t252 * t306, t204 * t326 - t253 * t306 - t443, -t252 * t391 + t327 * t388, t442, -t253 * t391 - t326 * t388, 0, -t197 * t391 - t381 * t205 - t344 * t253 + t298 * t326 + t304 * t479 + t388 * t569 + t434, -t196 * t391 + t204 * t381 + t252 * t344 - t266 * t388 + t298 * t327 + t306 * t479 + t453, -t145 * t327 - t196 * t304 + t197 * t306 + t204 * t569 - t205 * t266 + t241 * t252 - t242 * t253 + t326 * t457 - t449, -t457 * t266 + t242 * t196 + t145 * t569 - t241 * t197 - t298 * t381 - t344 * t479 - g(1) * (-t402 * t381 + t405 * t558) - g(2) * (t402 * t558 + t350) (t189 * t327 - t252 * t262) * t396 (-t525 - t526) * t327 + t441 * t252, t189 * t326 + t262 * t253 + t396 * t443 (t188 * t327 - t252 * t260) * t395, -t188 * t326 - t260 * t253 - t395 * t443, t442, t153 * t253 + t178 * t205 - t188 * t569 + t197 * t260 + t96 * t304 + t65 * t326 + t395 * t423 + t396 * t434, -t154 * t253 - t179 * t205 - t189 * t569 + t197 * t262 - t97 * t304 - t66 * t326 + t396 * t423 - t448 * t508, -t178 * t189 - t179 * t188 - t97 * t260 - t96 * t262 + (-t395 * t66 - t396 * t65) * t327 + (t153 * t396 + t154 * t395) * t252 - t453, -t545 - t135 * t569 + t153 * t96 + t154 * t97 + t65 * t178 + t66 * t179 + t224 * t197 + (-g(1) * t558 - g(2) * t567) * t405 + (-g(1) * (-t381 - t567) - g(2) * t558) * t402, t124 * t193 - t230 * t87, t124 * t191 + t125 * t193 + t229 * t87 - t230 * t88, -t124 * t297 - t193 * t253 + t200 * t230 - t326 * t87, t125 * t191 + t229 * t88, -t125 * t297 - t191 * t253 - t200 * t229 - t326 * t88, t200 * t326 + t253 * t297, -g(1) * t274 - g(2) * t276 + t125 * t175 + t150 * t191 + t16 * t326 + t200 * t89 + t220 * t88 + t229 * t95 + t253 * t62 + t27 * t297, -g(1) * t273 - g(2) * t275 - t124 * t175 - t15 * t326 - t150 * t193 - t200 * t90 - t220 * t87 + t230 * t95 - t253 * t63 - t26 * t297, t124 * t62 - t125 * t63 - t15 * t229 - t16 * t230 - t191 * t26 + t193 * t27 + t87 * t89 - t88 * t90 - t453, -t545 + t15 * t90 + t175 * t150 + t16 * t89 + t95 * t220 + t63 * t26 + t62 * t27 + (-g(1) * t465 - g(2) * t568) * t405 + (-g(1) * (-t381 - t568) - g(2) * t465) * t402, t110 * t51 - t165 * t32, t108 * t51 + t110 * t52 + t164 * t32 - t165 * t33, -t110 * t253 + t165 * t199 - t290 * t51 - t32 * t326, t108 * t52 + t164 * t33, -t108 * t253 - t164 * t199 - t290 * t52 - t326 * t33, t199 * t326 + t253 * t290, -g(1) * t269 - g(2) * t271 + t106 * t52 + t108 * t81 + t164 * t45 + t166 * t33 + t199 * t34 + t22 * t253 + t290 * t7 + t326 * t4, -g(1) * t268 - g(2) * t270 - t106 * t51 - t110 * t81 + t165 * t45 - t166 * t32 - t199 * t35 - t23 * t253 - t290 * t6 - t3 * t326, -t108 * t6 + t110 * t7 - t164 * t3 - t165 * t4 + t22 * t51 - t23 * t52 + t32 * t34 - t33 * t35 - t453, -t545 + t106 * t81 + t45 * t166 + t22 * t7 + t23 * t6 + t3 * t35 + t4 * t34 + (-g(1) * t495 - g(2) * t570) * t405 + (-g(1) * (-t381 - t570) - g(2) * t495) * t402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t476, t493 * t408, t483, t476, t482, qJDD(2), t401 * t426 - t543, g(3) * t401 + t404 * t426, 0, 0, t518, t206, t173, -t518, -t445, t388, t250 * t391 + (-t304 * t491 + t388 * t556 - t391 * t490) * pkin(2) + t424, t251 * t391 + (-t306 * t491 - t388 * t400 - t391 * t469) * pkin(2) + t425 (t242 - t250) * t306 + (-t241 + t251) * t304 + (t556 * t204 - t205 * t400 + (-t304 * t556 + t306 * t400) * qJD(3)) * pkin(2), t241 * t250 - t242 * t251 + (t556 * t145 - t543 - t457 * t400 + (-t241 * t400 + t242 * t556) * qJD(3) + (qJD(1) * t344 + t449) * t401) * pkin(2), t128, t73, t104, t127, t105, -t518, -t374 * t523 + t380 * t188 + t451 * t260 + (t395 * t497 - t167) * t304 + t422, -t205 * t513 + t380 * t189 + t451 * t262 + (t396 * t497 + t168) * t304 + t415, -t188 * t513 + t167 * t262 - t460 * t260 + (t189 * t374 + t262 * t358 - t65) * t395 + t436, t135 * t380 - g(1) * (t405 * t450 + t348) - g(2) * (t402 * t450 + t347) - g(3) * (t567 + t553) + t444 * t374 + t451 * t224 + t460 * t154 + (-t167 - t514) * t153, t40, t17, t68, t41, t69, -t519, t191 * t452 + t234 * t200 + t297 * t531 + t341 * t88 + t416, -t193 * t452 - t200 * t235 - t297 * t532 - t341 * t87 + t412, -t191 * t532 + t193 * t531 + t234 * t87 - t235 * t88 + t419, t15 * t235 + t16 * t234 + t95 * t341 - g(3) * (t568 + t553) + t532 * t63 + t531 * t62 + t452 * t175 + t449 * (t437 + t554) t11, t5, t36, t12, t37, -t520, t108 * t496 + t129 * t199 + t267 * t33 + t290 * t537 + t417, -t110 * t496 - t130 * t199 - t267 * t32 - t290 * t538 + t413, -t108 * t538 + t110 * t537 + t129 * t32 - t130 * t33 + t420, t3 * t130 + t4 * t129 + t45 * t267 - g(3) * (t570 + t553) + t538 * t23 + t537 * t22 + t496 * t106 + t449 * (t439 + t554); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t518, t206, t173, -t518, -t445, t388, t242 * t391 + t424, t241 * t391 + t425, 0, 0, t128, t73, t104, t127, t105, -t518, -qJ(4) * t523 - pkin(3) * t188 - t242 * t260 + (t395 * t485 - t169) * t304 + t422, -qJ(4) * t522 - pkin(3) * t189 - t242 * t262 + (t396 * t485 + t170) * t304 + t415, -qJ(4) * t526 + t169 * t262 + (t170 - t489) * t260 + (qJ(4) * t189 + qJD(4) * t262 - t65) * t395 + t436, -t135 * pkin(3) - t154 * t170 - t153 * t169 - t224 * t242 - g(1) * (-pkin(3) * t509 + t348) - g(2) * (-pkin(3) * t510 + t347) - g(3) * t567 + (-t153 * t395 + t154 * t396) * qJD(4) + t444 * qJ(4), t40, t17, t68, t41, t69, -t519, -t198 * t191 + t258 * t200 + t297 * t529 - t375 * t88 + t416, t193 * t198 - t259 * t200 - t297 * t530 + t375 * t87 + t412, -t191 * t530 + t193 * t529 + t258 * t87 - t259 * t88 + t419, -g(3) * t568 + t15 * t259 + t16 * t258 - t175 * t198 - t95 * t375 + t437 * t449 + t529 * t62 + t530 * t63, t11, t5, t36, t12, t37, -t520, t108 * t464 + t151 * t199 + t278 * t33 + t290 * t535 + t417, -t110 * t464 - t152 * t199 - t278 * t32 - t290 * t536 + t413, -t108 * t536 + t110 * t535 + t151 * t32 - t152 * t33 + t420, -g(3) * t570 + t106 * t464 + t4 * t151 + t3 * t152 + t22 * t535 + t23 * t536 + t45 * t278 + t439 * t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t262 * t304 + t188, -t260 * t304 + t189, -t260 ^ 2 - t262 ^ 2, t153 * t262 + t154 * t260 + t421, 0, 0, 0, 0, 0, 0, t88 - t584, -t87 - t585, -t586 - t587, t191 * t63 - t193 * t62 + t414, 0, 0, 0, 0, 0, 0, t33 - t588, -t32 - t589, -t590 - t591, t108 * t23 - t110 * t22 + t414 + t557; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t524, t586 - t587, -t87 + t585, t524, -t88 - t584, t200, t175 * t193 + t63 * t297 + t16 + t562, g(1) * t276 - g(2) * t274 + t175 * t191 + t297 * t62 + t377 * t383 - t15, 0, 0, -t527, t574, t573, t527, t560, t199, -t24 * t290 + (t108 * t193 + t199 * t555 - t290 * t486) * pkin(5) + t561, t25 * t290 + (-t110 * t193 - t199 * t398 - t290 * t468) * pkin(5) + t572, -t23 * t110 + t25 * t108 - t22 * t108 - t24 * t110 + (t555 * t32 - t33 * t398 + (-t108 * t555 - t110 * t398) * qJD(6)) * pkin(5), -t22 * t24 - t23 * t25 + (t3 * t398 + t4 * t555 + t106 * t193 + (-t22 * t398 + t23 * t555) * qJD(6) + t562) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t527, t574, t573, t527, t560, t199, t23 * t290 + t561, t22 * t290 + t572, 0, 0;];
tau_reg  = t1;
