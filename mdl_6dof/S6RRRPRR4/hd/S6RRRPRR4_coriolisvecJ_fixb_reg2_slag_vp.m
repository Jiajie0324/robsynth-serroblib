% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:17:46
% EndTime: 2019-03-09 18:18:10
% DurationCPUTime: 10.63s
% Computational Cost: add. (26225->586), mult. (62335->778), div. (0->0), fcn. (47410->10), ass. (0->301)
t346 = sin(qJ(3));
t347 = sin(qJ(2));
t349 = cos(qJ(2));
t461 = cos(qJ(3));
t309 = t346 * t349 + t347 * t461;
t291 = qJD(1) * t309;
t339 = qJD(2) + qJD(3);
t342 = sin(pkin(11));
t343 = cos(pkin(11));
t252 = t291 * t342 - t339 * t343;
t254 = t291 * t343 + t339 * t342;
t345 = sin(qJ(5));
t348 = cos(qJ(5));
t183 = t252 * t348 + t254 * t345;
t185 = t252 * t345 - t254 * t348;
t344 = sin(qJ(6));
t460 = cos(qJ(6));
t100 = t183 * t460 - t185 * t344;
t494 = t100 ^ 2;
t102 = t183 * t344 + t185 * t460;
t493 = t102 ^ 2;
t394 = t461 * t349;
t326 = qJD(1) * t394;
t406 = qJD(1) * t347;
t393 = t346 * t406;
t289 = -t326 + t393;
t283 = qJD(5) + t289;
t273 = qJD(6) + t283;
t492 = t100 * t273;
t491 = t102 * t273;
t307 = t342 * t348 + t343 * t345;
t288 = t307 * qJD(5);
t480 = t289 * t307 + t288;
t418 = t348 * t343;
t467 = -t342 * t345 + t418;
t403 = qJD(5) * t348;
t404 = qJD(5) * t345;
t468 = -t342 * t404 + t343 * t403;
t479 = t289 * t467 + t468;
t490 = t183 ^ 2;
t489 = t185 ^ 2;
t488 = t183 * t283;
t487 = t185 * t283;
t234 = pkin(3) * t291 + qJ(4) * t289;
t219 = pkin(2) * t406 + t234;
t462 = -pkin(8) - pkin(7);
t320 = t462 * t349;
t313 = qJD(1) * t320;
t292 = t346 * t313;
t319 = t462 * t347;
t311 = qJD(1) * t319;
t246 = t311 * t461 + t292;
t162 = t219 * t343 - t246 * t342;
t427 = t289 * t343;
t377 = pkin(4) * t291 + pkin(9) * t427;
t118 = t162 + t377;
t163 = t219 * t342 + t246 * t343;
t428 = t289 * t342;
t400 = pkin(9) * t428;
t136 = t400 + t163;
t331 = pkin(2) * t346 + qJ(4);
t295 = (-pkin(9) - t331) * t342;
t336 = t343 * pkin(9);
t296 = t331 * t343 + t336;
t390 = qJD(3) * t461;
t323 = pkin(2) * t390 + qJD(4);
t424 = t323 * t342;
t446 = -t348 * t136 + t295 * t403 + t323 * t418 + (-qJD(5) * t296 - t118 - t424) * t345;
t230 = t295 * t345 + t296 * t348;
t445 = -qJD(5) * t230 - t118 * t348 + t136 * t345 - t307 * t323;
t449 = qJD(2) * pkin(2);
t297 = t311 + t449;
t238 = t297 * t461 + t292;
t165 = t234 * t343 - t238 * t342;
t121 = t165 + t377;
t166 = t234 * t342 + t238 * t343;
t138 = t400 + t166;
t316 = (-pkin(9) - qJ(4)) * t342;
t317 = qJ(4) * t343 + t336;
t444 = qJD(4) * t418 - t348 * t138 + t316 * t403 + (-qJD(4) * t342 - qJD(5) * t317 - t121) * t345;
t251 = t316 * t345 + t317 * t348;
t443 = -qJD(4) * t307 - qJD(5) * t251 - t121 * t348 + t138 * t345;
t486 = t480 * pkin(10);
t485 = t291 * pkin(5) + pkin(10) * t479;
t484 = -t486 + t446;
t483 = t485 - t445;
t482 = -t486 + t444;
t481 = t485 - t443;
t442 = t100 * t102;
t241 = t307 * t460 + t344 * t467;
t413 = -qJD(6) * t241 - t344 * t479 - t460 * t480;
t389 = qJD(6) * t460;
t402 = qJD(6) * t344;
t412 = t307 * t402 + t344 * t480 - t389 * t467 - t460 * t479;
t293 = t461 * t313;
t245 = t311 * t346 - t293;
t405 = qJD(3) * t346;
t375 = pkin(2) * t405 - t245;
t478 = t493 - t494;
t419 = t346 * t347;
t374 = t339 * t419;
t408 = t339 * t326;
t232 = qJD(1) * t374 - t408;
t438 = t232 * t342;
t93 = t345 * (qJD(5) * t254 - t438) + t232 * t418 + t252 * t403;
t94 = -t232 * t307 - t252 * t404 + t254 * t403;
t34 = t183 * t389 - t185 * t402 + t344 * t94 + t460 * t93;
t477 = -t34 + t492;
t335 = -pkin(2) * t349 - pkin(1);
t318 = qJD(1) * t335;
t208 = t289 * pkin(3) - t291 * qJ(4) + t318;
t239 = t297 * t346 - t293;
t221 = qJ(4) * t339 + t239;
t146 = t208 * t342 + t221 * t343;
t110 = -pkin(9) * t252 + t146;
t248 = t339 * t309;
t233 = t248 * qJD(1);
t437 = t232 * t343;
t401 = qJD(1) * qJD(2);
t388 = t347 * t401;
t134 = pkin(2) * t388 + pkin(3) * t233 + qJ(4) * t232 - qJD(4) * t291;
t395 = qJD(2) * t462;
t379 = qJD(1) * t395;
t300 = t347 * t379;
t301 = t349 * t379;
t380 = -t297 * t390 - t300 * t461 - t301 * t346 - t313 * t405;
t164 = qJD(4) * t339 - t380;
t84 = t134 * t343 - t164 * t342;
t57 = pkin(4) * t233 + pkin(9) * t437 + t84;
t85 = t134 * t342 + t164 * t343;
t67 = pkin(9) * t438 + t85;
t145 = t208 * t343 - t221 * t342;
t97 = pkin(4) * t289 - pkin(9) * t254 + t145;
t15 = -t110 * t404 + t345 * t57 + t348 * t67 + t403 * t97;
t10 = -pkin(10) * t94 + t15;
t59 = -t110 * t345 + t348 * t97;
t42 = pkin(10) * t185 + t59;
t40 = pkin(5) * t283 + t42;
t60 = t110 * t348 + t345 * t97;
t43 = -pkin(10) * t183 + t60;
t16 = -qJD(5) * t60 - t345 * t67 + t348 * t57;
t9 = t233 * pkin(5) + t93 * pkin(10) + t16;
t353 = -t10 * t460 - t344 * t9 - t389 * t40 + t402 * t43;
t218 = -pkin(3) * t339 + qJD(4) - t238;
t172 = pkin(4) * t252 + t218;
t98 = pkin(5) * t183 + t172;
t476 = t100 * t98 + t353;
t475 = t252 * t289 + t437;
t474 = t254 * t289 - t438;
t399 = t347 * t449;
t472 = 0.2e1 * t399;
t471 = -0.2e1 * t401;
t373 = -t84 * t342 + t343 * t85;
t308 = -t394 + t419;
t237 = pkin(3) * t308 - qJ(4) * t309 + t335;
t257 = t319 * t346 - t320 * t461;
t175 = t237 * t343 - t257 * t342;
t425 = t309 * t343;
t137 = pkin(4) * t308 - pkin(9) * t425 + t175;
t176 = t237 * t342 + t257 * t343;
t426 = t309 * t342;
t156 = -pkin(9) * t426 + t176;
t81 = t137 * t345 + t156 * t348;
t263 = pkin(4) * t428;
t376 = t263 + t375;
t196 = t233 * t308;
t470 = t248 * t289 + t196;
t469 = t319 * t461 + t320 * t346;
t466 = t480 * pkin(5);
t397 = t460 * t43;
t23 = t344 * t40 + t397;
t4 = -qJD(6) * t23 - t344 * t10 + t460 * t9;
t465 = t102 * t98 + t4;
t35 = -qJD(6) * t102 - t344 * t93 + t460 * t94;
t464 = -t35 - t491;
t463 = t289 ^ 2;
t458 = pkin(10) * t307;
t455 = t467 * pkin(5);
t454 = t343 * pkin(4);
t229 = t295 * t348 - t296 * t345;
t193 = t229 - t458;
t299 = t467 * pkin(10);
t194 = t299 + t230;
t124 = t193 * t344 + t194 * t460;
t453 = qJD(6) * t124 + t344 * t484 + t460 * t483;
t123 = t193 * t460 - t194 * t344;
t452 = -qJD(6) * t123 + t344 * t483 - t460 * t484;
t250 = t316 * t348 - t317 * t345;
t212 = t250 - t458;
t213 = t299 + t251;
t144 = t212 * t344 + t213 * t460;
t451 = qJD(6) * t144 + t344 * t482 + t460 * t481;
t143 = t212 * t460 - t213 * t344;
t450 = -qJD(6) * t143 + t344 * t481 - t460 * t482;
t448 = t344 * t43;
t171 = t297 * t405 + t300 * t346 - t301 * t461 - t313 * t390;
t441 = t171 * t469;
t440 = t185 * t183;
t439 = t232 * t309;
t247 = -qJD(2) * t394 - t349 * t390 + t374;
t436 = t247 * t342;
t435 = t247 * t343;
t433 = t252 * t343;
t432 = t254 * t342;
t431 = t273 * t291;
t430 = t283 * t291;
t429 = t289 * t291;
t351 = qJD(1) ^ 2;
t417 = t349 * t351;
t350 = qJD(2) ^ 2;
t416 = t350 * t347;
t415 = t350 * t349;
t414 = t466 + t376;
t157 = pkin(3) * t248 + qJ(4) * t247 - qJD(4) * t309 + t399;
t312 = t347 * t395;
t314 = t349 * t395;
t188 = qJD(3) * t469 + t312 * t461 + t314 * t346;
t89 = t157 * t342 + t188 * t343;
t407 = t347 ^ 2 - t349 ^ 2;
t396 = t347 * t417;
t332 = -pkin(3) - t454;
t192 = -t263 + t239;
t387 = -t192 + t466;
t384 = pkin(1) * t471;
t80 = t137 * t348 - t156 * t345;
t383 = t146 * t291 + t171 * t342;
t88 = t157 * t343 - t188 * t342;
t382 = t162 + t424;
t381 = t323 * t343 - t163;
t334 = -pkin(2) * t461 - pkin(3);
t378 = t349 * t388;
t211 = pkin(4) * t426 - t469;
t122 = -pkin(4) * t438 + t171;
t372 = -t145 * t291 - t171 * t343;
t371 = t171 * t309 + t232 * t469;
t370 = t432 + t433;
t368 = -t145 * t427 - t146 * t428 + t373;
t225 = t467 * t309;
t62 = pkin(5) * t308 - pkin(10) * t225 + t80;
t224 = t307 * t309;
t63 = -pkin(10) * t224 + t81;
t32 = -t344 * t63 + t460 * t62;
t33 = t344 * t62 + t460 * t63;
t159 = -t224 * t344 + t225 * t460;
t315 = t334 - t454;
t76 = pkin(4) * t248 + pkin(9) * t435 + t88;
t86 = pkin(9) * t436 + t89;
t26 = t137 * t403 - t156 * t404 + t345 * t76 + t348 * t86;
t22 = t40 * t460 - t448;
t240 = t307 * t344 - t460 * t467;
t61 = pkin(5) * t94 + t122;
t366 = -t22 * t291 + t61 * t240 - t413 * t98;
t365 = t23 * t291 + t61 * t241 - t412 * t98;
t364 = -t318 * t291 - t171;
t363 = t318 * t289 + t380;
t362 = -t122 * t467 + t172 * t480 - t59 * t291;
t361 = t122 * t307 + t172 * t479 + t60 * t291;
t360 = -t218 * t247 + t371;
t359 = t232 * t308 - t233 * t309 + t247 * t289;
t358 = t22 * t412 + t23 * t413 + t240 * t353 - t4 * t241;
t357 = t15 * t467 - t16 * t307 - t479 * t59 - t480 * t60;
t356 = pkin(3) * t232 - qJ(4) * t233 + (-qJD(4) + t218) * t289;
t355 = -t232 * t334 - t233 * t331 + (t218 - t323) * t289;
t27 = -qJD(5) * t81 - t345 * t86 + t348 * t76;
t189 = qJD(3) * t257 + t312 * t346 - t314 * t461;
t142 = -pkin(4) * t436 + t189;
t338 = t343 ^ 2;
t337 = t342 ^ 2;
t261 = t332 - t455;
t258 = t315 - t455;
t197 = t291 ^ 2 - t463;
t190 = t408 + (t289 - t393) * t339;
t160 = pkin(5) * t224 + t211;
t158 = t224 * t460 + t225 * t344;
t148 = t475 * t342;
t147 = t474 * t343;
t120 = -t247 * t307 + t309 * t468;
t119 = t247 * t467 + t288 * t309;
t112 = t233 * t343 + t252 * t291 - t342 * t463;
t111 = t233 * t342 - t254 * t291 + t343 * t463;
t87 = -t370 * t289 + (t337 - t338) * t232;
t77 = t120 * pkin(5) + t142;
t71 = t183 * t291 + t233 * t467 - t283 * t480;
t70 = t185 * t291 + t307 * t233 + t283 * t479;
t45 = qJD(6) * t159 - t344 * t119 + t120 * t460;
t44 = t119 * t460 + t120 * t344 + t224 * t389 + t225 * t402;
t39 = t183 * t480 - t467 * t94;
t38 = -t185 * t479 - t93 * t307;
t37 = t100 * t291 - t240 * t233 + t273 * t413;
t36 = t102 * t291 + t241 * t233 - t273 * t412;
t25 = t42 * t460 - t448;
t24 = -t344 * t42 - t397;
t21 = -t183 * t479 + t185 * t480 - t307 * t94 - t467 * t93;
t20 = -pkin(10) * t120 + t26;
t19 = t248 * pkin(5) + t119 * pkin(10) + t27;
t12 = -t100 * t413 + t35 * t240;
t11 = t102 * t412 - t34 * t241;
t7 = t100 * t412 - t102 * t413 + t34 * t240 - t241 * t35;
t6 = -qJD(6) * t33 + t19 * t460 - t344 * t20;
t5 = qJD(6) * t32 + t19 * t344 + t20 * t460;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t378, t407 * t471, t415, -0.2e1 * t378, -t416, 0, -pkin(7) * t415 + t347 * t384, pkin(7) * t416 + t349 * t384, 0, 0, -t247 * t291 - t439, -t248 * t291 + t359, -t247 * t339, t470, -t248 * t339, 0, -t189 * t339 + t335 * t233 + t318 * t248 + (qJD(1) * t308 + t289) * t399, -t188 * t339 - t335 * t232 - t318 * t247 + t291 * t472, -t188 * t289 + t189 * t291 - t233 * t257 + t238 * t247 - t239 * t248 + t308 * t380 + t371, t239 * t188 - t238 * t189 - t257 * t380 + t318 * t472 - t441, -t254 * t435 - t338 * t439, t247 * t370 + 0.2e1 * t425 * t438, t248 * t254 - t343 * t359, -t252 * t436 - t337 * t439, -t252 * t248 + t342 * t359, t470, t145 * t248 + t175 * t233 + t189 * t252 + t88 * t289 + t84 * t308 + t342 * t360, -t146 * t248 - t176 * t233 + t189 * t254 - t89 * t289 - t85 * t308 + t343 * t360, -t89 * t252 - t88 * t254 + (t145 * t247 + t175 * t232 - t309 * t84) * t343 + (t146 * t247 + t176 * t232 - t309 * t85) * t342, t145 * t88 + t146 * t89 + t175 * t84 + t176 * t85 + t189 * t218 - t441, t119 * t185 - t225 * t93, t119 * t183 + t120 * t185 + t224 * t93 - t225 * t94, -t119 * t283 - t185 * t248 + t225 * t233 - t308 * t93, t120 * t183 + t224 * t94, -t120 * t283 - t183 * t248 - t224 * t233 - t308 * t94, t248 * t283 + t196, t120 * t172 + t122 * t224 + t142 * t183 + t16 * t308 + t211 * t94 + t233 * t80 + t248 * t59 + t27 * t283, -t119 * t172 + t122 * t225 - t142 * t185 - t15 * t308 - t211 * t93 - t233 * t81 - t248 * t60 - t26 * t283, t119 * t59 - t120 * t60 - t15 * t224 - t16 * t225 - t183 * t26 + t185 * t27 + t80 * t93 - t81 * t94, t122 * t211 + t142 * t172 + t15 * t81 + t16 * t80 + t26 * t60 + t27 * t59, t102 * t44 - t159 * t34, t100 * t44 + t102 * t45 + t158 * t34 - t159 * t35, -t102 * t248 + t159 * t233 - t273 * t44 - t308 * t34, t100 * t45 + t158 * t35, -t100 * t248 - t158 * t233 - t273 * t45 - t308 * t35, t248 * t273 + t196, t100 * t77 + t158 * t61 + t160 * t35 + t22 * t248 + t233 * t32 + t273 * t6 + t308 * t4 + t45 * t98, -t102 * t77 + t159 * t61 - t160 * t34 - t23 * t248 - t233 * t33 - t273 * t5 + t308 * t353 - t44 * t98, -t100 * t5 + t102 * t6 + t158 * t353 - t159 * t4 + t22 * t44 - t23 * t45 + t32 * t34 - t33 * t35, t160 * t61 + t22 * t6 + t23 * t5 + t32 * t4 - t33 * t353 + t77 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t396, t407 * t351, 0, t396, 0, 0, t351 * pkin(1) * t347, pkin(1) * t417, 0, 0, t429, t197, t190, -t429, 0, 0, t245 * t339 + (-t289 * t406 - t339 * t405) * pkin(2) + t364, t246 * t339 + (-t291 * t406 - t339 * t390) * pkin(2) + t363 (t239 - t245) * t291 + (-t238 + t246) * t289 + (t461 * t232 - t233 * t346 + (-t289 * t461 + t291 * t346) * qJD(3)) * pkin(2), t238 * t245 - t239 * t246 + (-t318 * t406 - t461 * t171 - t380 * t346 + (-t238 * t346 + t239 * t461) * qJD(3)) * pkin(2), t147, t87, t111, t148, t112, -t429, -t162 * t289 + t252 * t375 + t342 * t355 + t372, t163 * t289 + t254 * t375 + t343 * t355 + t383, -t252 * t381 + t254 * t382 + t368, -t145 * t382 + t146 * t381 + t171 * t334 + t218 * t375 + t331 * t373, t38, t21, t70, t39, t71, -t430, t183 * t376 + t229 * t233 + t283 * t445 + t315 * t94 + t362, -t185 * t376 - t230 * t233 - t283 * t446 - t315 * t93 + t361, -t183 * t446 + t185 * t445 + t229 * t93 - t230 * t94 + t357, t122 * t315 + t15 * t230 + t16 * t229 + t172 * t376 + t445 * t59 + t446 * t60, t11, t7, t36, t12, t37, -t431, t100 * t414 + t123 * t233 + t258 * t35 - t273 * t453 + t366, -t102 * t414 - t124 * t233 - t258 * t34 + t273 * t452 + t365, t100 * t452 - t102 * t453 + t123 * t34 - t124 * t35 + t358, t4 * t123 - t124 * t353 - t22 * t453 - t23 * t452 + t61 * t258 + t414 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t429, t197, t190, -t429, 0, 0, t239 * t339 + t364, t238 * t339 + t363, 0, 0, t147, t87, t111, t148, t112, -t429, -t165 * t289 - t239 * t252 + t342 * t356 + t372, t166 * t289 - t239 * t254 + t343 * t356 + t383, t165 * t254 + t166 * t252 + (t432 - t433) * qJD(4) + t368, -t171 * pkin(3) - t145 * t165 - t146 * t166 - t218 * t239 + (-t145 * t342 + t146 * t343) * qJD(4) + t373 * qJ(4), t38, t21, t70, t39, t71, -t430, -t192 * t183 + t250 * t233 + t283 * t443 + t332 * t94 + t362, t185 * t192 - t251 * t233 - t283 * t444 - t332 * t93 + t361, -t183 * t444 + t185 * t443 + t250 * t93 - t251 * t94 + t357, t122 * t332 + t15 * t251 + t16 * t250 - t172 * t192 + t443 * t59 + t444 * t60, t11, t7, t36, t12, t37, -t431, t100 * t387 + t143 * t233 + t261 * t35 - t273 * t451 + t366, -t102 * t387 - t144 * t233 - t261 * t34 + t273 * t450 + t365, t100 * t450 - t102 * t451 + t143 * t34 - t144 * t35 + t358, t4 * t143 - t144 * t353 - t22 * t451 - t23 * t450 + t61 * t261 + t387 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t474, -t475, -t252 ^ 2 - t254 ^ 2, t145 * t254 + t146 * t252 + t171, 0, 0, 0, 0, 0, 0, t94 - t487, -t93 - t488, -t489 - t490, t183 * t60 - t185 * t59 + t122, 0, 0, 0, 0, 0, 0, t35 - t491, -t34 - t492, -t493 - t494, t100 * t23 - t102 * t22 + t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t440, t489 - t490, -t93 + t488, t440, -t94 - t487, t233, t172 * t185 + t60 * t283 + t16, t172 * t183 + t283 * t59 - t15, 0, 0, -t442, t478, t477, t442, t464, t233, -t24 * t273 + (t100 * t185 + t233 * t460 - t273 * t402) * pkin(5) + t465, t25 * t273 + (-t102 * t185 - t233 * t344 - t273 * t389) * pkin(5) + t476, t25 * t100 - t22 * t100 - t24 * t102 - t23 * t102 + (t460 * t34 - t344 * t35 + (-t100 * t460 - t102 * t344) * qJD(6)) * pkin(5), -t22 * t24 - t23 * t25 + (t460 * t4 + t185 * t98 - t353 * t344 + (-t22 * t344 + t23 * t460) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t442, t478, t477, t442, t464, t233, t23 * t273 + t465, t22 * t273 + t476, 0, 0;];
tauc_reg  = t1;
