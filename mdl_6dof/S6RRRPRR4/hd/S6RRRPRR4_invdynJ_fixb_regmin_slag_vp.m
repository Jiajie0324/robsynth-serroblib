% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x35]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPRR4_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR4_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR4_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR4_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:17:51
% EndTime: 2019-03-09 18:18:12
% DurationCPUTime: 9.25s
% Computational Cost: add. (13108->578), mult. (29086->759), div. (0->0), fcn. (22849->18), ass. (0->311)
t325 = sin(qJ(3));
t330 = cos(qJ(2));
t461 = cos(qJ(3));
t394 = qJD(1) * t461;
t326 = sin(qJ(2));
t414 = qJD(1) * t326;
t481 = -t325 * t414 + t330 * t394;
t228 = qJD(5) - t481;
t222 = qJD(6) + t228;
t426 = t325 * t330;
t237 = -qJD(1) * t426 - t326 * t394;
t317 = qJD(2) + qJD(3);
t321 = sin(pkin(11));
t322 = cos(pkin(11));
t197 = t237 * t322 - t317 * t321;
t199 = t237 * t321 + t322 * t317;
t324 = sin(qJ(5));
t329 = cos(qJ(5));
t142 = t197 * t324 + t199 * t329;
t323 = sin(qJ(6));
t328 = cos(qJ(6));
t470 = t197 * t329 - t199 * t324;
t486 = t142 * t328 + t323 * t470;
t490 = t222 * t486;
t489 = t317 * t481;
t488 = t142 * t228;
t365 = -t142 * t323 + t328 * t470;
t487 = t222 * t365;
t258 = t321 * t329 + t322 * t324;
t234 = t258 * qJD(5);
t478 = -t258 * t481 + t234;
t425 = t329 * t322;
t257 = t321 * t324 - t425;
t422 = t228 * t257;
t412 = qJD(4) * t322;
t178 = -pkin(3) * t237 - qJ(4) * t481;
t332 = -pkin(8) - pkin(7);
t277 = t332 * t330;
t267 = qJD(1) * t277;
t240 = t325 * t267;
t276 = t332 * t326;
t265 = qJD(1) * t276;
t449 = qJD(2) * pkin(2);
t244 = t265 + t449;
t182 = t244 * t461 + t240;
t119 = t321 * t178 + t322 * t182;
t439 = t481 * t321;
t403 = pkin(9) * t439;
t97 = -t403 + t119;
t485 = -t412 + t97;
t484 = t228 * t470;
t480 = t365 * t486;
t185 = -t257 * t323 + t258 * t328;
t479 = qJD(6) * t185 - t323 * t422 + t328 * t478;
t184 = t328 * t257 + t258 * t323;
t424 = qJD(6) * t184 + t323 * t478 + t328 * t422;
t241 = t461 * t267;
t188 = t325 * t265 - t241;
t413 = qJD(3) * t325;
t376 = pkin(2) * t413 - t188;
t320 = qJ(2) + qJ(3);
t312 = sin(t320);
t327 = sin(qJ(1));
t331 = cos(qJ(1));
t374 = g(1) * t331 + g(2) * t327;
t359 = t374 * t312;
t313 = cos(t320);
t455 = g(3) * t313;
t477 = -t359 + t455;
t430 = t312 * t331;
t431 = t312 * t327;
t476 = g(1) * t430 + g(2) * t431 - t455;
t475 = t365 ^ 2 - t486 ^ 2;
t408 = qJD(6) * t328;
t409 = qJD(6) * t323;
t385 = qJDD(1) * t461;
t404 = t330 * qJDD(1);
t151 = t325 * t404 + t326 * t385 + t489;
t315 = qJDD(2) + qJDD(3);
t135 = t151 * t321 - t322 * t315;
t136 = t151 * t322 + t315 * t321;
t410 = qJD(5) * t329;
t411 = qJD(5) * t324;
t52 = -t324 * t135 + t329 * t136 + t197 * t411 + t199 * t410;
t53 = -qJD(5) * t470 + t329 * t135 + t136 * t324;
t11 = t142 * t408 - t323 * t53 + t328 * t52 + t409 * t470;
t474 = t11 - t490;
t316 = pkin(11) + qJ(5);
t311 = qJ(6) + t316;
t300 = sin(t311);
t301 = cos(t311);
t428 = t313 * t327;
t205 = t300 * t331 - t301 * t428;
t427 = t313 * t331;
t207 = t300 * t327 + t301 * t427;
t460 = pkin(2) * t330;
t308 = pkin(1) + t460;
t275 = t308 * qJD(1);
t162 = -pkin(3) * t481 + qJ(4) * t237 - t275;
t183 = t325 * t244 - t241;
t170 = qJ(4) * t317 + t183;
t102 = t322 * t162 - t170 * t321;
t66 = -pkin(4) * t481 + pkin(9) * t197 + t102;
t103 = t321 * t162 + t322 * t170;
t75 = pkin(9) * t199 + t103;
t35 = t324 * t66 + t329 * t75;
t25 = pkin(10) * t142 + t35;
t23 = t25 * t409;
t305 = g(3) * t312;
t168 = -t317 * pkin(3) + qJD(4) - t182;
t124 = -pkin(4) * t199 + t168;
t67 = -pkin(5) * t142 + t124;
t473 = g(1) * t207 - g(2) * t205 + t301 * t305 - t486 * t67 + t23;
t34 = -t324 * t75 + t329 * t66;
t24 = pkin(10) * t470 + t34;
t22 = pkin(5) * t228 + t24;
t448 = t25 * t328;
t10 = t22 * t323 + t448;
t204 = t300 * t428 + t301 * t331;
t206 = -t300 * t427 + t301 * t327;
t260 = t326 * t461 + t426;
t192 = t317 * t260;
t405 = t326 * qJDD(1);
t368 = t325 * t405 - t330 * t385;
t152 = qJD(1) * t192 + t368;
t147 = qJDD(5) + t152;
t406 = qJD(1) * qJD(2);
t392 = t326 * t406;
t229 = pkin(2) * t392 - qJDD(1) * t308;
t65 = pkin(3) * t152 - qJ(4) * t151 + qJD(4) * t237 + t229;
t391 = t330 * t406;
t194 = qJDD(2) * pkin(2) - t332 * (-t391 - t405);
t200 = t332 * (-t392 + t404);
t393 = qJD(3) * t461;
t340 = t325 * t194 - t200 * t461 + t244 * t393 + t267 * t413;
t84 = t315 * qJ(4) + t317 * qJD(4) + t340;
t37 = -t321 * t84 + t322 * t65;
t20 = pkin(4) * t152 - pkin(9) * t136 + t37;
t38 = t321 * t65 + t322 * t84;
t29 = -pkin(9) * t135 + t38;
t388 = t329 * t20 - t29 * t324;
t345 = -qJD(5) * t35 + t388;
t3 = pkin(5) * t147 - pkin(10) * t52 + t345;
t356 = t324 * t20 + t329 * t29 + t66 * t410 - t411 * t75;
t4 = -pkin(10) * t53 + t356;
t399 = t328 * t3 - t323 * t4;
t472 = -g(1) * t206 + g(2) * t204 - qJD(6) * t10 + t300 * t305 + t67 * t365 + t399;
t344 = qJD(6) * t365 - t323 * t52 - t328 * t53;
t471 = t344 - t487;
t355 = -t325 * t326 + t330 * t461;
t181 = -pkin(3) * t355 - qJ(4) * t260 - t308;
t202 = t325 * t276 - t277 * t461;
t126 = t321 * t181 + t322 * t202;
t436 = t260 * t321;
t111 = -pkin(9) * t436 + t126;
t125 = t322 * t181 - t202 * t321;
t435 = t260 * t322;
t96 = -pkin(4) * t355 - pkin(9) * t435 + t125;
t447 = t329 * t111 + t324 * t96;
t373 = g(1) * t327 - g(2) * t331;
t469 = t373 * t312;
t215 = pkin(4) * t439;
t377 = -t215 + t376;
t302 = pkin(2) * t325 + qJ(4);
t242 = (-pkin(9) - t302) * t321;
t314 = t322 * pkin(9);
t432 = t302 * t322;
t243 = t314 + t432;
t419 = t324 * t242 + t329 * t243;
t468 = t478 * pkin(10);
t273 = (-pkin(9) - qJ(4)) * t321;
t444 = qJ(4) * t322;
t274 = t314 + t444;
t417 = t324 * t273 + t329 * t274;
t416 = t313 * pkin(3) + t312 * qJ(4);
t467 = -t237 * pkin(5) - pkin(10) * t422;
t466 = t461 * t276 + t325 * t277;
t465 = t478 * pkin(5);
t464 = -pkin(3) * t315 + qJDD(4);
t362 = qJD(4) * t321 + qJD(5) * t274;
t118 = t322 * t178 - t182 * t321;
t438 = t481 * t322;
t378 = -t237 * pkin(4) - pkin(9) * t438;
t83 = t118 + t378;
t463 = -t273 * t410 + t485 * t329 + (t362 + t83) * t324;
t287 = pkin(2) * t393 + qJD(4);
t434 = t287 * t321;
t363 = qJD(5) * t243 + t434;
t169 = pkin(2) * t414 + t178;
t189 = t265 * t461 + t240;
t116 = t322 * t169 - t189 * t321;
t79 = t116 + t378;
t117 = t321 * t169 + t322 * t189;
t95 = -t403 + t117;
t462 = -t242 * t410 - t287 * t425 + t329 * t95 + (t363 + t79) * t324;
t456 = pkin(10) * t258;
t453 = t257 * pkin(5);
t452 = t322 * pkin(4);
t36 = t38 * t322;
t445 = t465 + t377;
t443 = t152 * t321;
t191 = t317 * t355;
t442 = t191 * t321;
t441 = t222 * t237;
t440 = t228 * t237;
t437 = t237 * t481;
t433 = t287 * t322;
t429 = t313 * t321;
t402 = t326 * t449;
t112 = pkin(3) * t192 - qJ(4) * t191 - qJD(4) * t260 + t402;
t398 = qJD(2) * t332;
t266 = t326 * t398;
t268 = t330 * t398;
t143 = qJD(3) * t466 + t461 * t266 + t325 * t268;
t60 = t321 * t112 + t322 * t143;
t421 = t168 - t287;
t318 = t326 ^ 2;
t415 = -t330 ^ 2 + t318;
t407 = -qJD(4) + t168;
t145 = t215 + t183;
t400 = g(1) * t427 + g(2) * t428 + t305;
t303 = -pkin(3) - t452;
t395 = -t145 + t465;
t389 = qJD(6) * t22 + t4;
t59 = t322 * t112 - t143 * t321;
t45 = pkin(4) * t192 - t191 * t314 + t59;
t55 = -pkin(9) * t442 + t60;
t386 = -t324 * t55 + t329 * t45;
t384 = -t111 * t324 + t329 * t96;
t383 = -t117 + t433;
t381 = t329 * t242 - t243 * t324;
t380 = t329 * t273 - t274 * t324;
t379 = -t461 * t194 - t325 * t200 + t244 * t413 - t267 * t393;
t307 = -pkin(2) * t461 - pkin(3);
t375 = -pkin(2) * t326 - pkin(3) * t312;
t148 = t381 - t456;
t372 = -qJD(6) * t148 + t462 + t468;
t248 = t257 * pkin(10);
t149 = -t248 + t419;
t74 = t329 * t79;
t371 = qJD(5) * t419 + qJD(6) * t149 + t258 * t287 - t324 * t95 + t467 + t74;
t165 = t380 - t456;
t370 = -qJD(6) * t165 + t463 + t468;
t166 = -t248 + t417;
t78 = t329 * t83;
t369 = t258 * qJD(4) + qJD(5) * t417 + qJD(6) * t166 - t324 * t97 + t467 + t78;
t367 = -t37 * t321 + t36;
t173 = t258 * t260;
t174 = t257 * t260;
t113 = t328 * t173 - t174 * t323;
t114 = -t173 * t323 - t174 * t328;
t361 = t102 * t438 + t103 * t439 + t36 - t400;
t164 = pkin(4) * t436 - t466;
t360 = t308 + t416;
t358 = t373 * t313;
t357 = -0.2e1 * pkin(1) * t406 - pkin(7) * qJDD(2);
t354 = -t111 * t411 + t324 * t45 + t329 * t55 + t96 * t410;
t272 = t307 - t452;
t144 = t325 * t266 - t268 * t461 + t276 * t413 - t277 * t393;
t88 = t379 + t464;
t101 = pkin(4) * t442 + t144;
t350 = -t379 + t476;
t333 = qJD(2) ^ 2;
t349 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t333 + t373;
t334 = qJD(1) ^ 2;
t348 = pkin(1) * t334 - pkin(7) * qJDD(1) + t374;
t347 = t168 * t191 + t260 * t88 - t374;
t346 = t102 * t237 + (-t88 + t476) * t322;
t58 = pkin(4) * t135 + t88;
t343 = -t275 * t237 + t350;
t21 = pkin(5) * t53 + t58;
t9 = t22 * t328 - t25 * t323;
t342 = t21 * t184 + t9 * t237 + t476 * t301 + t479 * t67;
t341 = g(3) * t429 - t103 * t237 + (-t359 + t88) * t321;
t310 = cos(t316);
t339 = t124 * t478 + t34 * t237 + t58 * t257 + t310 * t476;
t338 = -t10 * t237 + t21 * t185 + t300 * t477 - t424 * t67;
t309 = sin(t316);
t337 = -t124 * t422 - t35 * t237 + t58 * t258 + t309 * t477;
t335 = t275 * t481 - t340 + t400;
t279 = qJ(4) * t427;
t278 = qJ(4) * t428;
t213 = t303 + t453;
t212 = t309 * t327 + t310 * t427;
t211 = -t309 * t427 + t310 * t327;
t210 = t309 * t331 - t310 * t428;
t209 = t309 * t428 + t310 * t331;
t203 = t272 + t453;
t153 = t237 ^ 2 - t481 ^ 2;
t146 = qJDD(6) + t147;
t123 = -t368 + (-qJD(1) * t260 - t237) * t317;
t122 = t151 - t489;
t115 = t173 * pkin(5) + t164;
t82 = t191 * t258 + t410 * t435 - t411 * t436;
t81 = -t191 * t257 - t234 * t260;
t46 = t82 * pkin(5) + t101;
t42 = -pkin(10) * t173 + t447;
t41 = t142 * t237 - t147 * t257 - t228 * t478;
t40 = t147 * t258 - t228 * t422 - t237 * t470;
t39 = -pkin(5) * t355 + pkin(10) * t174 + t384;
t28 = qJD(6) * t114 + t323 * t81 + t328 * t82;
t27 = -qJD(6) * t113 - t323 * t82 + t328 * t81;
t17 = t258 * t52 + t422 * t470;
t14 = -t146 * t184 - t222 * t479 + t237 * t486;
t13 = t146 * t185 - t222 * t424 - t237 * t365;
t8 = -pkin(10) * t82 + t354;
t7 = pkin(5) * t192 - pkin(10) * t81 - qJD(5) * t447 + t386;
t6 = -t142 * t422 - t257 * t52 - t258 * t53 + t470 * t478;
t5 = t11 * t185 + t365 * t424;
t1 = -t11 * t184 + t185 * t344 + t365 * t479 - t424 * t486;
t2 = [qJDD(1), t373, t374, qJDD(1) * t318 + 0.2e1 * t326 * t391, 0.2e1 * t326 * t404 - 0.2e1 * t406 * t415, qJDD(2) * t326 + t330 * t333, qJDD(2) * t330 - t326 * t333, 0, t326 * t357 + t330 * t349, -t326 * t349 + t330 * t357, t151 * t260 - t191 * t237, t151 * t355 - t152 * t260 + t191 * t481 + t192 * t237, t191 * t317 + t260 * t315, -t192 * t317 + t315 * t355, 0, -t144 * t317 - t152 * t308 - t192 * t275 - t229 * t355 + t315 * t466 - t402 * t481 + t358, -t143 * t317 - t151 * t308 - t191 * t275 - t202 * t315 + t229 * t260 - t237 * t402 - t469, t102 * t192 + t125 * t152 - t135 * t466 - t144 * t199 + t321 * t347 + t322 * t358 - t355 * t37 - t481 * t59, -t103 * t192 - t126 * t152 - t136 * t466 - t144 * t197 + t322 * t347 + t355 * t38 - t373 * t429 + t481 * t60, -t125 * t136 - t126 * t135 + t199 * t60 + t197 * t59 + t469 + (-t321 * t38 - t322 * t37) * t260 + (-t102 * t322 - t103 * t321) * t191, t102 * t59 + t103 * t60 + t37 * t125 + t38 * t126 + t168 * t144 - t88 * t466 + (g(1) * t332 - g(2) * t360) * t331 + (g(1) * t360 + g(2) * t332) * t327, -t174 * t52 - t470 * t81, t142 * t81 - t173 * t52 + t174 * t53 + t470 * t82, -t147 * t174 - t192 * t470 + t228 * t81 - t355 * t52, t142 * t192 - t147 * t173 - t228 * t82 + t355 * t53, -t147 * t355 + t192 * t228, t386 * t228 + t384 * t147 - t388 * t355 + t34 * t192 - t101 * t142 + t164 * t53 + t58 * t173 + t124 * t82 - g(1) * t210 - g(2) * t212 + (-t228 * t447 + t35 * t355) * qJD(5), -g(1) * t209 - g(2) * t211 - t101 * t470 + t124 * t81 - t147 * t447 + t164 * t52 - t58 * t174 - t35 * t192 - t228 * t354 + t355 * t356, t11 * t114 - t27 * t365, -t11 * t113 + t114 * t344 + t27 * t486 + t28 * t365, -t11 * t355 + t114 * t146 - t192 * t365 + t222 * t27, -t113 * t146 + t192 * t486 - t222 * t28 - t344 * t355, -t146 * t355 + t192 * t222 (-t323 * t8 + t328 * t7) * t222 + (-t323 * t42 + t328 * t39) * t146 - t399 * t355 + t9 * t192 - t46 * t486 - t115 * t344 + t21 * t113 + t67 * t28 - g(1) * t205 - g(2) * t207 + ((-t323 * t39 - t328 * t42) * t222 + t10 * t355) * qJD(6), -g(1) * t204 - g(2) * t206 - t10 * t192 + t115 * t11 + t21 * t114 - t23 * t355 + t67 * t27 - t46 * t365 + (-(-qJD(6) * t42 + t7) * t222 - t39 * t146 + t3 * t355) * t323 + (-(qJD(6) * t39 + t8) * t222 - t42 * t146 + t389 * t355) * t328; 0, 0, 0, -t326 * t334 * t330, t415 * t334, t405, t404, qJDD(2), -g(3) * t330 + t326 * t348, g(3) * t326 + t330 * t348, t437, t153, t122, t123, t315, t188 * t317 + (t315 * t461 - t317 * t413 + t414 * t481) * pkin(2) + t343, t189 * t317 + (t237 * t414 - t315 * t325 - t317 * t393) * pkin(2) + t335, -t302 * t443 + t135 * t307 - t376 * t199 - (t321 * t421 - t116) * t481 + t346, -t152 * t432 + t136 * t307 - t376 * t197 - (t322 * t421 + t117) * t481 + t341, -t135 * t432 - t116 * t197 + t383 * t199 + (t136 * t302 - t197 * t287 - t37) * t321 + t361, t88 * t307 - g(1) * (t331 * t375 + t279) - g(2) * (t327 * t375 + t278) - g(3) * (t416 + t460) + t367 * t302 + t376 * t168 + t383 * t103 + (-t116 - t434) * t102, t17, t6, t40, t41, t440, t381 * t147 + t272 * t53 + (-t74 - t363 * t329 + (-qJD(5) * t242 - t433 + t95) * t324) * t228 - t377 * t142 + t339, -t419 * t147 + t228 * t462 + t272 * t52 - t377 * t470 + t337, t5, t1, t13, t14, t441 (t148 * t328 - t149 * t323) * t146 - t203 * t344 - t445 * t486 + (t323 * t372 - t328 * t371) * t222 + t342 -(t148 * t323 + t149 * t328) * t146 + t203 * t11 - t445 * t365 + (t323 * t371 + t328 * t372) * t222 + t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t437, t153, t122, t123, t315, t183 * t317 + t343, t182 * t317 + t335, -qJ(4) * t443 - pkin(3) * t135 + t183 * t199 - (t321 * t407 - t118) * t481 + t346, -t152 * t444 - pkin(3) * t136 + t183 * t197 - (t322 * t407 + t119) * t481 + t341, -t135 * t444 - t118 * t197 - (t119 - t412) * t199 + (qJ(4) * t136 - qJD(4) * t197 - t37) * t321 + t361, -t88 * pkin(3) - t103 * t119 - t102 * t118 - t168 * t183 - g(1) * (-pkin(3) * t430 + t279) - g(2) * (-pkin(3) * t431 + t278) - g(3) * t416 + (-t102 * t321 + t103 * t322) * qJD(4) + t367 * qJ(4), t17, t6, t40, t41, t440, t380 * t147 + t303 * t53 + t145 * t142 + (-t78 - t362 * t329 + (-qJD(5) * t273 + t485) * t324) * t228 + t339, t145 * t470 - t417 * t147 + t228 * t463 + t303 * t52 + t337, t5, t1, t13, t14, t441 (t165 * t328 - t166 * t323) * t146 - t213 * t344 - t395 * t486 + (t323 * t370 - t328 * t369) * t222 + t342 -(t165 * t323 + t166 * t328) * t146 + t213 * t11 - t395 * t365 + (t323 * t369 + t328 * t370) * t222 + t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197 * t481 + t135, -t199 * t481 + t136, -t197 ^ 2 - t199 ^ 2, -t102 * t197 - t103 * t199 - t350 + t464, 0, 0, 0, 0, 0, t53 - t484, t52 + t488, 0, 0, 0, 0, 0, -t344 - t487, t11 + t490; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t470 * t142, -t142 ^ 2 + t470 ^ 2, t52 - t488, -t53 - t484, t147, -g(1) * t211 + g(2) * t209 + t124 * t470 + t228 * t35 + t305 * t309 + t345, g(1) * t212 - g(2) * t210 - t124 * t142 + t228 * t34 + t305 * t310 - t356, t480, t475, t474, t471, t146 -(-t24 * t323 - t448) * t222 + (t146 * t328 - t222 * t409 - t470 * t486) * pkin(5) + t472 (-t222 * t25 - t3) * t323 + (t222 * t24 - t389) * t328 + (-t146 * t323 - t222 * t408 - t365 * t470) * pkin(5) + t473; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t480, t475, t474, t471, t146, t10 * t222 + t472, t222 * t9 - t323 * t3 - t328 * t389 + t473;];
tau_reg  = t2;
