% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauc_reg [6x35]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRPRR4_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR4_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR4_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR4_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 18:17:46
% EndTime: 2019-03-09 18:18:03
% DurationCPUTime: 6.77s
% Computational Cost: add. (10784->460), mult. (26017->633), div. (0->0), fcn. (20320->10), ass. (0->256)
t277 = sin(qJ(3));
t281 = cos(qJ(2));
t385 = cos(qJ(3));
t329 = qJD(1) * t385;
t278 = sin(qJ(2));
t345 = qJD(1) * t278;
t404 = -t277 * t345 + t281 * t329;
t214 = qJD(5) - t404;
t206 = qJD(6) + t214;
t357 = t277 * t281;
t222 = -qJD(1) * t357 - t278 * t329;
t270 = qJD(2) + qJD(3);
t273 = sin(pkin(11));
t274 = cos(pkin(11));
t190 = t222 * t274 - t270 * t273;
t192 = t222 * t273 + t274 * t270;
t276 = sin(qJ(5));
t280 = cos(qJ(5));
t135 = t190 * t276 + t192 * t280;
t275 = sin(qJ(6));
t279 = cos(qJ(6));
t395 = t190 * t280 - t192 * t276;
t409 = t135 * t279 + t275 * t395;
t412 = t409 * t206;
t172 = t404 * t270;
t411 = t135 * t214;
t303 = -t135 * t275 + t279 * t395;
t410 = t206 * t303;
t241 = t273 * t280 + t274 * t276;
t219 = t241 * qJD(5);
t401 = -t241 * t404 + t219;
t356 = t280 * t274;
t240 = t273 * t276 - t356;
t351 = t214 * t240;
t174 = -pkin(3) * t222 - qJ(4) * t404;
t386 = -pkin(8) - pkin(7);
t254 = t386 * t281;
t247 = qJD(1) * t254;
t225 = t277 * t247;
t253 = t386 * t278;
t245 = qJD(1) * t253;
t376 = qJD(2) * pkin(2);
t229 = t245 + t376;
t178 = t229 * t385 + t225;
t117 = t273 * t174 + t274 * t178;
t364 = t404 * t273;
t337 = pkin(9) * t364;
t93 = -t337 + t117;
t408 = -qJD(4) * t274 + t93;
t407 = t214 * t395;
t403 = t303 * t409;
t180 = t279 * t240 + t241 * t275;
t372 = -qJD(6) * t180 - t401 * t275 - t351 * t279;
t181 = -t240 * t275 + t241 * t279;
t402 = qJD(6) * t181 - t351 * t275 + t401 * t279;
t226 = t385 * t247;
t183 = t277 * t245 - t226;
t344 = qJD(3) * t277;
t313 = pkin(2) * t344 - t183;
t400 = t303 ^ 2 - t409 ^ 2;
t268 = -pkin(2) * t281 - pkin(1);
t252 = t268 * qJD(1);
t154 = -pkin(3) * t404 + t222 * qJ(4) + t252;
t179 = t277 * t229 - t226;
t164 = qJ(4) * t270 + t179;
t98 = t274 * t154 - t164 * t273;
t60 = -pkin(4) * t404 + pkin(9) * t190 + t98;
t99 = t273 * t154 + t274 * t164;
t71 = pkin(9) * t192 + t99;
t32 = t276 * t60 + t280 * t71;
t19 = pkin(10) * t135 + t32;
t340 = qJD(6) * t275;
t17 = t19 * t340;
t161 = -t270 * pkin(3) + qJD(4) - t178;
t122 = -pkin(4) * t192 + t161;
t61 = -pkin(5) * t135 + t122;
t399 = -t409 * t61 + t17;
t339 = qJD(6) * t279;
t341 = qJD(5) * t280;
t369 = t172 * t273;
t56 = t172 * t356 + t192 * t341 + (qJD(5) * t190 - t369) * t276;
t57 = -qJD(5) * t395 + t172 * t241;
t11 = t135 * t339 - t275 * t57 + t279 * t56 + t340 * t395;
t398 = t11 - t412;
t31 = -t276 * t71 + t280 * t60;
t18 = pkin(10) * t395 + t31;
t16 = pkin(5) * t214 + t18;
t375 = t19 * t279;
t10 = t16 * t275 + t375;
t243 = t278 * t385 + t357;
t187 = t270 * t243;
t173 = t187 * qJD(1);
t368 = t172 * t274;
t333 = qJD(2) * t386;
t316 = qJD(1) * t333;
t232 = t278 * t316;
t233 = t281 * t316;
t328 = qJD(3) * t385;
t285 = t229 * t328 + t232 * t385 + t277 * t233 + t247 * t344;
t115 = t270 * qJD(4) + t285;
t338 = qJD(1) * qJD(2);
t327 = t278 * t338;
t89 = pkin(2) * t327 + pkin(3) * t173 - qJ(4) * t172 + qJD(4) * t222;
t48 = -t115 * t273 + t274 * t89;
t29 = pkin(4) * t173 - pkin(9) * t368 + t48;
t49 = t274 * t115 + t273 * t89;
t37 = -pkin(9) * t369 + t49;
t323 = -t276 * t37 + t280 * t29;
t287 = -qJD(5) * t32 + t323;
t3 = t173 * pkin(5) - t56 * pkin(10) + t287;
t342 = qJD(5) * t276;
t299 = t276 * t29 + t280 * t37 + t60 * t341 - t342 * t71;
t4 = -pkin(10) * t57 + t299;
t334 = -t275 * t4 + t279 * t3;
t397 = -qJD(6) * t10 + t61 * t303 + t334;
t286 = qJD(6) * t303 - t275 * t56 - t279 * t57;
t396 = t286 - t410;
t394 = -0.2e1 * t338;
t298 = -t277 * t278 + t281 * t385;
t177 = -pkin(3) * t298 - qJ(4) * t243 + t268;
t194 = t277 * t253 - t254 * t385;
t124 = t273 * t177 + t274 * t194;
t361 = t243 * t273;
t107 = -pkin(9) * t361 + t124;
t123 = t274 * t177 - t194 * t273;
t360 = t243 * t274;
t92 = -pkin(4) * t298 - pkin(9) * t360 + t123;
t373 = t280 * t107 + t276 * t92;
t308 = -t48 * t273 + t49 * t274;
t199 = pkin(4) * t364;
t314 = -t199 + t313;
t264 = pkin(2) * t277 + qJ(4);
t227 = (-pkin(9) - t264) * t273;
t269 = t274 * pkin(9);
t228 = t264 * t274 + t269;
t349 = t276 * t227 + t280 * t228;
t393 = t401 * pkin(10);
t250 = (-pkin(9) - qJ(4)) * t273;
t251 = qJ(4) * t274 + t269;
t347 = t276 * t250 + t280 * t251;
t392 = -t222 * pkin(5) - pkin(10) * t351;
t391 = t385 * t253 + t277 * t254;
t390 = t401 * pkin(5);
t389 = qJD(1) * t243;
t300 = qJD(4) * t273 + qJD(5) * t251;
t116 = t274 * t174 - t178 * t273;
t363 = t404 * t274;
t315 = -t222 * pkin(4) - pkin(9) * t363;
t78 = t116 + t315;
t388 = -t250 * t341 + t408 * t280 + (t300 + t78) * t276;
t257 = pkin(2) * t328 + qJD(4);
t359 = t257 * t273;
t301 = qJD(5) * t228 + t359;
t162 = pkin(2) * t345 + t174;
t184 = t245 * t385 + t225;
t113 = t274 * t162 - t184 * t273;
t75 = t113 + t315;
t114 = t273 * t162 + t274 * t184;
t91 = -t337 + t114;
t387 = -t227 * t341 - t257 * t356 + t280 * t91 + (t301 + t75) * t276;
t383 = pkin(10) * t241;
t380 = t240 * pkin(5);
t379 = t274 * pkin(4);
t370 = t390 + t314;
t186 = t270 * t298;
t367 = t186 * t273;
t366 = t206 * t222;
t365 = t214 * t222;
t362 = t222 * t404;
t358 = t257 * t274;
t283 = qJD(1) ^ 2;
t355 = t281 * t283;
t282 = qJD(2) ^ 2;
t354 = t282 * t278;
t353 = t282 * t281;
t336 = t278 * t376;
t108 = pkin(3) * t187 - qJ(4) * t186 - qJD(4) * t243 + t336;
t246 = t278 * t333;
t248 = t281 * t333;
t136 = t391 * qJD(3) + t385 * t246 + t277 * t248;
t52 = t273 * t108 + t274 * t136;
t346 = t278 ^ 2 - t281 ^ 2;
t140 = t199 + t179;
t265 = -pkin(3) - t379;
t330 = -t140 + t390;
t325 = qJD(6) * t16 + t4;
t51 = t274 * t108 - t136 * t273;
t42 = pkin(4) * t187 - t186 * t269 + t51;
t50 = -pkin(9) * t367 + t52;
t322 = -t276 * t50 + t280 * t42;
t321 = -t107 * t276 + t280 * t92;
t121 = t229 * t344 + t277 * t232 - t385 * t233 - t247 * t328;
t320 = t121 * t273 - t99 * t222;
t319 = pkin(1) * t394;
t318 = t280 * t227 - t228 * t276;
t317 = t280 * t250 - t251 * t276;
t267 = -pkin(2) * t385 - pkin(3);
t141 = t318 - t383;
t312 = -qJD(6) * t141 + t387 + t393;
t231 = t240 * pkin(10);
t142 = -t231 + t349;
t70 = t280 * t75;
t311 = t349 * qJD(5) + qJD(6) * t142 + t241 * t257 - t276 * t91 + t392 + t70;
t157 = t317 - t383;
t310 = -qJD(6) * t157 + t388 + t393;
t158 = -t231 + t347;
t74 = t280 * t78;
t309 = t241 * qJD(4) + t347 * qJD(5) + qJD(6) * t158 - t276 * t93 + t392 + t74;
t307 = -t273 * t98 + t274 * t99;
t79 = pkin(4) * t369 + t121;
t305 = -t121 * t274 + t98 * t222;
t304 = t98 * t363 + t99 * t364 + t308;
t167 = t241 * t243;
t168 = t240 * t243;
t109 = t279 * t167 - t168 * t275;
t110 = -t167 * t275 - t168 * t279;
t156 = pkin(4) * t361 - t391;
t297 = -t107 * t342 + t276 * t42 + t280 * t50 + t92 * t341;
t33 = pkin(5) * t57 + t79;
t9 = t16 * t279 - t19 * t275;
t296 = t33 * t180 + t9 * t222 + t402 * t61;
t249 = t267 - t379;
t295 = -t10 * t222 + t33 * t181 + t372 * t61;
t294 = t252 * t222 - t121;
t137 = t277 * t246 - t248 * t385 + t253 * t344 - t254 * t328;
t293 = -t351 * t122 - t32 * t222 + t79 * t241;
t292 = t401 * t122 + t31 * t222 + t79 * t240;
t97 = pkin(4) * t367 + t137;
t291 = t121 * t243 + t161 * t186 - t172 * t391;
t290 = -pkin(3) * t172 - qJ(4) * t173 - (-qJD(4) + t161) * t404;
t289 = t172 * t267 - t173 * t264 - (t161 - t257) * t404;
t284 = -t252 * t404 - t285;
t197 = t265 + t380;
t195 = t249 + t380;
t145 = t222 ^ 2 - t404 ^ 2;
t144 = t173 * t298;
t139 = (-t222 - t389) * t270;
t111 = t167 * pkin(5) + t156;
t77 = t186 * t241 + t341 * t360 - t342 * t361;
t76 = -t186 * t240 - t243 * t219;
t43 = t77 * pkin(5) + t97;
t39 = t135 * t222 - t240 * t173 - t214 * t401;
t38 = t241 * t173 - t214 * t351 - t222 * t395;
t35 = -pkin(10) * t167 + t373;
t34 = -pkin(5) * t298 + pkin(10) * t168 + t321;
t21 = qJD(6) * t110 + t275 * t76 + t279 * t77;
t20 = -qJD(6) * t109 - t275 * t77 + t279 * t76;
t15 = t56 * t241 + t351 * t395;
t14 = -t180 * t173 - t206 * t402 + t222 * t409;
t13 = t181 * t173 + t206 * t372 - t222 * t303;
t8 = -t135 * t351 - t56 * t240 - t241 * t57 + t395 * t401;
t7 = -pkin(10) * t77 + t297;
t6 = t187 * pkin(5) - t76 * pkin(10) - qJD(5) * t373 + t322;
t5 = t11 * t181 - t303 * t372;
t1 = -t11 * t180 + t181 * t286 + t303 * t402 + t372 * t409;
t2 = [0, 0, 0, 0.2e1 * t281 * t327, t346 * t394, t353, -t354, 0, -pkin(7) * t353 + t278 * t319, pkin(7) * t354 + t281 * t319, t172 * t243 - t186 * t222, t172 * t298 - t173 * t243 + t186 * t404 + t187 * t222, t186 * t270, -t187 * t270, 0, -t137 * t270 + t268 * t173 + t252 * t187 + (-qJD(1) * t298 - t404) * t336, -t136 * t270 + t268 * t172 + t252 * t186 + (-t222 + t389) * t336, t123 * t173 - t137 * t192 + t98 * t187 + t273 * t291 - t298 * t48 - t404 * t51, -t124 * t173 - t137 * t190 - t99 * t187 + t274 * t291 + t298 * t49 + t404 * t52, t52 * t192 + t51 * t190 + (-t123 * t172 - t186 * t98 - t243 * t48) * t274 + (-t124 * t172 - t186 * t99 - t243 * t49) * t273, -t121 * t391 + t123 * t48 + t124 * t49 + t137 * t161 + t51 * t98 + t52 * t99, -t168 * t56 - t395 * t76, t135 * t76 - t167 * t56 + t168 * t57 + t395 * t77, -t168 * t173 - t187 * t395 + t214 * t76 - t298 * t56, t135 * t187 - t167 * t173 - t214 * t77 + t298 * t57, t187 * t214 - t144, t322 * t214 + t321 * t173 - t323 * t298 + t31 * t187 - t97 * t135 + t156 * t57 + t79 * t167 + t122 * t77 + (-t214 * t373 + t298 * t32) * qJD(5), t122 * t76 + t156 * t56 - t79 * t168 - t173 * t373 - t32 * t187 - t214 * t297 + t298 * t299 - t395 * t97, t11 * t110 - t20 * t303, -t109 * t11 + t110 * t286 + t20 * t409 + t21 * t303, -t11 * t298 + t110 * t173 - t187 * t303 + t20 * t206, -t109 * t173 + t187 * t409 - t206 * t21 - t286 * t298, t187 * t206 - t144 (-t275 * t7 + t279 * t6) * t206 + (-t275 * t35 + t279 * t34) * t173 - t334 * t298 + t9 * t187 - t43 * t409 - t111 * t286 + t33 * t109 + t61 * t21 + ((-t275 * t34 - t279 * t35) * t206 + t10 * t298) * qJD(6), -t10 * t187 + t111 * t11 + t33 * t110 - t17 * t298 + t61 * t20 - t43 * t303 + (-(-qJD(6) * t35 + t6) * t206 - t34 * t173 + t3 * t298) * t275 + (-(qJD(6) * t34 + t7) * t206 - t35 * t173 + t325 * t298) * t279; 0, 0, 0, -t278 * t355, t346 * t283, 0, 0, 0, t283 * pkin(1) * t278, pkin(1) * t355, t362, t145, 0, t139, 0, t183 * t270 + (-t270 * t344 + t345 * t404) * pkin(2) + t294, t184 * t270 + (t222 * t345 - t270 * t328) * pkin(2) + t284, t113 * t404 - t192 * t313 + t273 * t289 + t305, -t114 * t404 - t190 * t313 + t274 * t289 + t320 -(t113 + t359) * t190 - (t114 - t358) * t192 + t304, -t98 * t113 - t99 * t114 + t121 * t267 + t161 * t313 + t257 * t307 + t264 * t308, t15, t8, t38, t39, t365, t318 * t173 + t249 * t57 + (-t70 - t301 * t280 + (-qJD(5) * t227 - t358 + t91) * t276) * t214 - t314 * t135 + t292, -t349 * t173 + t387 * t214 + t249 * t56 - t314 * t395 + t293, t5, t1, t13, t14, t366 (t141 * t279 - t142 * t275) * t173 - t195 * t286 - t370 * t409 + (t275 * t312 - t279 * t311) * t206 + t296 -(t141 * t275 + t142 * t279) * t173 + t195 * t11 - t370 * t303 + (t275 * t311 + t279 * t312) * t206 + t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t362, t145, 0, t139, 0, t179 * t270 + t294, t178 * t270 + t284, t116 * t404 + t179 * t192 + t273 * t290 + t305, -t117 * t404 + t179 * t190 + t274 * t290 + t320, -t116 * t190 - t117 * t192 + (-t190 * t273 + t192 * t274) * qJD(4) + t304, -t121 * pkin(3) + qJ(4) * t308 + qJD(4) * t307 - t98 * t116 - t99 * t117 - t161 * t179, t15, t8, t38, t39, t365, t317 * t173 + t265 * t57 + t140 * t135 + (-t74 - t300 * t280 + (-qJD(5) * t250 + t408) * t276) * t214 + t292, t140 * t395 - t347 * t173 + t388 * t214 + t265 * t56 + t293, t5, t1, t13, t14, t366 (t157 * t279 - t158 * t275) * t173 - t197 * t286 - t330 * t409 + (t275 * t310 - t279 * t309) * t206 + t296 -(t157 * t275 + t158 * t279) * t173 + t197 * t11 - t330 * t303 + (t275 * t309 + t279 * t310) * t206 + t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190 * t404 + t369, -t192 * t404 + t368, -t190 ^ 2 - t192 ^ 2, -t190 * t98 - t192 * t99 + t121, 0, 0, 0, 0, 0, t57 - t407, t56 + t411, 0, 0, 0, 0, 0, -t286 - t410, t11 + t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395 * t135, -t135 ^ 2 + t395 ^ 2, t56 - t411, -t57 - t407, t173, t122 * t395 + t32 * t214 + t287, -t122 * t135 + t214 * t31 - t299, t403, t400, t398, t396, t173 -(-t18 * t275 - t375) * t206 + (t173 * t279 - t206 * t340 - t395 * t409) * pkin(5) + t397 (-t19 * t206 - t3) * t275 + (t18 * t206 - t325) * t279 + (-t173 * t275 - t206 * t339 - t303 * t395) * pkin(5) + t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t403, t400, t398, t396, t173, t10 * t206 + t397, t9 * t206 - t275 * t3 - t279 * t325 + t399;];
tauc_reg  = t2;
