% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 01:19
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 01:18:41
% EndTime: 2019-05-05 01:19:08
% DurationCPUTime: 24.59s
% Computational Cost: add. (99325->785), mult. (191552->1242), div. (0->0), fcn. (137723->12), ass. (0->558)
t727 = sin(qJ(5));
t714 = qJDD(4) + qJDD(5);
t728 = sin(qJ(4));
t731 = cos(qJ(5));
t732 = cos(qJ(4));
t672 = (t727 * t732 + t728 * t731) * qJD(2);
t815 = qJD(2) * t732;
t674 = -t727 * t728 * qJD(2) + t731 * t815;
t838 = t674 * t672;
t879 = t714 - t838;
t881 = t727 * t879;
t880 = t731 * t879;
t812 = qJD(2) * qJD(4);
t796 = t732 * t812;
t809 = qJDD(2) * t728;
t680 = -t796 - t809;
t798 = t728 * t812;
t807 = qJDD(2) * t732;
t681 = -t798 + t807;
t763 = t727 * t680 + t731 * t681;
t595 = -qJD(5) * t672 + t763;
t715 = qJD(4) + qJD(5);
t831 = t715 * t672;
t573 = t595 - t831;
t733 = cos(qJ(2));
t806 = qJDD(2) * t733;
t729 = sin(qJ(2));
t735 = qJD(2) ^ 2;
t822 = t729 * t735;
t684 = t806 - t822;
t721 = sin(pkin(6));
t666 = t684 * t721;
t723 = cos(pkin(6));
t709 = t723 * qJDD(2);
t668 = -t709 * t733 + t723 * t822;
t720 = sin(pkin(11));
t722 = cos(pkin(11));
t688 = g(1) * t720 - t722 * g(2);
t818 = g(3) - qJDD(1);
t659 = t688 * t721 + t723 * t818;
t823 = t729 * t659;
t577 = (-t666 * t721 + t668 * t723) * pkin(7) - t823;
t808 = qJDD(2) * t729;
t685 = t733 * t735 + t808;
t625 = t668 * t720 - t685 * t722;
t878 = -qJ(1) * t625 - t577 * t720;
t620 = t668 * t722 + t685 * t720;
t877 = -qJ(1) * t620 - t577 * t722;
t665 = t685 * t721;
t667 = t685 * t723;
t819 = t733 * t659;
t580 = (t665 * t721 + t667 * t723) * pkin(7) - t819;
t623 = t667 * t720 - t684 * t722;
t876 = -qJ(1) * t623 - t580 * t720;
t618 = t667 * t722 + t684 * t720;
t875 = -qJ(1) * t618 - t580 * t722;
t726 = sin(qJ(6));
t730 = cos(qJ(6));
t640 = t674 * t726 - t730 * t715;
t642 = t674 * t730 + t715 * t726;
t588 = t642 * t640;
t793 = -t731 * t680 + t727 * t681;
t594 = -qJD(5) * t674 - t793;
t741 = qJDD(6) - t594;
t865 = -t588 + t741;
t870 = t726 * t865;
t869 = t730 * t865;
t868 = -t723 * t688 + t721 * t818;
t867 = t720 * t818;
t866 = t722 * t818;
t545 = -t640 * qJD(6) + t730 * t595 + t726 * t714;
t664 = qJD(6) + t672;
t605 = t664 * t640;
t507 = -t605 + t545;
t794 = t726 * t595 - t730 * t714;
t504 = (qJD(6) - t664) * t642 + t794;
t789 = pkin(7) * t685 - t819;
t864 = pkin(1) * t668 + t721 * t789;
t790 = pkin(7) * t684 + t823;
t863 = pkin(1) * t667 + t721 * t790;
t862 = pkin(1) * t666 + t723 * t789;
t861 = -pkin(1) * t665 + t723 * t790;
t638 = t640 ^ 2;
t639 = t642 ^ 2;
t663 = t664 ^ 2;
t670 = t672 ^ 2;
t671 = t674 ^ 2;
t860 = t715 ^ 2;
t859 = 2 * qJD(3);
t858 = -pkin(8) - pkin(2);
t853 = pkin(5) * t727;
t689 = g(1) * t722 + g(2) * t720;
t608 = -t689 * t729 + t733 * t868;
t609 = -t733 * t689 - t729 * t868;
t547 = t608 * t729 + t609 * t733;
t852 = pkin(7) * t547;
t693 = qJD(4) * pkin(4) - pkin(9) * t815;
t719 = qJDD(2) * pkin(2);
t759 = qJDD(3) + t608;
t598 = -t735 * qJ(3) - t719 + t759;
t591 = -qJDD(2) * pkin(8) + t598;
t817 = -t728 * t591 + t732 * t659;
t717 = t728 ^ 2;
t828 = t717 * t735;
t527 = -pkin(4) * t828 + pkin(9) * t680 - qJD(4) * t693 - t817;
t820 = t732 * t735;
t843 = t591 * t732;
t736 = qJDD(4) * pkin(4) - pkin(9) * t681 + t843 + (-pkin(4) * t820 - pkin(9) * t812 + t659) * t728;
t449 = t527 * t727 - t731 * t736;
t450 = t731 * t527 + t727 * t736;
t388 = -t449 * t731 + t450 * t727;
t851 = t388 * t728;
t850 = t388 * t732;
t626 = pkin(5) * t672 - pkin(10) * t674;
t433 = -t714 * pkin(5) - pkin(10) * t860 + t626 * t674 + t449;
t849 = t433 * t726;
t848 = t433 * t730;
t535 = t588 + t741;
t847 = t535 * t726;
t846 = t535 * t730;
t724 = t735 * pkin(8);
t811 = qJDD(2) * qJ(3);
t737 = -t735 * pkin(2) + t609 + t811;
t548 = -t680 * pkin(4) - pkin(9) * t828 - t724 + (t693 * t732 + t859) * qJD(2) + t737;
t845 = t548 * t727;
t844 = t548 * t731;
t616 = t838 + t714;
t842 = t616 * t727;
t841 = t616 * t731;
t840 = t664 * t726;
t839 = t664 * t730;
t718 = t732 ^ 2;
t816 = t717 + t718;
t683 = t816 * qJDD(2);
t837 = t683 * t729;
t836 = t683 * t733;
t800 = t728 * t820;
t690 = qJDD(4) + t800;
t835 = t690 * t728;
t834 = t690 * t732;
t691 = qJDD(4) - t800;
t833 = t691 * t728;
t832 = t691 * t732;
t830 = t715 * t727;
t829 = t715 * t731;
t827 = t718 * t735;
t826 = t721 * t659;
t805 = qJD(2) * t859;
t593 = t737 + t805;
t589 = -t724 + t593;
t824 = t728 * t589;
t821 = t732 * t589;
t434 = -pkin(5) * t860 + pkin(10) * t714 - t626 * t672 + t450;
t451 = -t573 * pkin(10) + (t674 * t715 - t594) * pkin(5) + t548;
t382 = t730 * t434 + t726 * t451;
t814 = qJD(5) + t715;
t810 = qJDD(2) * t721;
t804 = t727 * t588;
t803 = t731 * t588;
t802 = t729 * t838;
t801 = t733 * t838;
t799 = -pkin(5) * t731 - pkin(4);
t797 = t722 * t810;
t381 = t434 * t726 - t730 * t451;
t330 = t381 * t726 + t730 * t382;
t389 = t449 * t727 + t731 * t450;
t637 = -t688 * t720 - t722 * t689;
t792 = t729 * t800;
t791 = t733 * t800;
t326 = t330 * t727 - t433 * t731;
t327 = t330 * t731 + t433 * t727;
t293 = t326 * t732 + t327 * t728;
t329 = -t381 * t730 + t382 * t726;
t788 = -t293 * t733 + t329 * t729;
t338 = t389 * t728 + t850;
t787 = -t338 * t733 + t548 * t729;
t508 = -t605 - t545;
t438 = -t504 * t730 - t508 * t726;
t549 = t638 + t639;
t408 = t438 * t727 + t549 * t731;
t409 = t438 * t731 - t549 * t727;
t350 = t408 * t732 + t409 * t728;
t436 = -t504 * t726 + t508 * t730;
t786 = -t350 * t733 + t436 * t729;
t506 = (-qJD(6) - t664) * t642 - t794;
t439 = t506 * t730 - t507 * t726;
t586 = -t639 + t638;
t415 = t439 * t727 + t586 * t731;
t416 = t439 * t731 - t586 * t727;
t354 = -t415 * t732 - t416 * t728;
t437 = t506 * t726 + t507 * t730;
t785 = t354 * t733 + t437 * t729;
t562 = -t663 - t638;
t468 = t562 * t730 - t870;
t418 = t468 * t727 + t506 * t731;
t419 = t468 * t731 - t506 * t727;
t361 = t418 * t732 + t419 * t728;
t467 = t562 * t726 + t869;
t784 = -t361 * t733 + t467 * t729;
t585 = -t639 - t663;
t471 = -t585 * t726 - t846;
t420 = t471 * t727 - t507 * t731;
t421 = t471 * t731 + t507 * t727;
t367 = t420 * t732 + t421 * t728;
t470 = t585 * t730 - t847;
t783 = -t367 * t733 + t470 * t729;
t603 = -t639 + t663;
t484 = -t603 * t726 + t869;
t424 = t484 * t727 + t508 * t731;
t426 = t484 * t731 - t508 * t727;
t370 = -t424 * t732 - t426 * t728;
t482 = t603 * t730 + t870;
t782 = t370 * t733 + t482 * t729;
t602 = t638 - t663;
t485 = t602 * t730 - t847;
t425 = t485 * t727 + t504 * t731;
t427 = t485 * t731 - t504 * t727;
t371 = -t425 * t732 - t427 * t728;
t483 = t602 * t726 + t846;
t781 = t371 * t733 + t483 * t729;
t544 = -qJD(6) * t642 - t794;
t495 = -t544 * t726 + t640 * t839;
t461 = t495 * t727 + t803;
t463 = t495 * t731 - t804;
t396 = -t461 * t732 - t463 * t728;
t494 = t544 * t730 + t640 * t840;
t780 = t396 * t733 + t494 * t729;
t497 = t545 * t730 - t642 * t840;
t462 = t497 * t727 - t803;
t464 = t497 * t731 + t804;
t397 = -t462 * t732 - t464 * t728;
t496 = t545 * t726 + t642 * t839;
t779 = t397 * t733 + t496 * t729;
t541 = (-t640 * t730 + t642 * t726) * t664;
t486 = t541 * t727 - t731 * t741;
t487 = t541 * t731 + t727 * t741;
t422 = -t486 * t732 - t487 * t728;
t540 = (-t640 * t726 - t642 * t730) * t664;
t778 = t422 * t733 + t540 * t729;
t569 = t674 * t814 + t793;
t488 = -t569 * t727 + t573 * t731;
t490 = -t569 * t731 - t573 * t727;
t428 = -t488 * t732 - t490 * t728;
t629 = t671 - t670;
t777 = t428 * t733 + t629 * t729;
t574 = t595 + t831;
t740 = (-qJD(5) + t715) * t674 - t793;
t489 = -t574 * t731 + t727 * t740;
t491 = t574 * t727 + t731 * t740;
t429 = t489 * t732 + t491 * t728;
t597 = -t670 - t671;
t776 = -t429 * t733 + t597 * t729;
t610 = -t860 - t670;
t550 = t610 * t727 + t880;
t551 = t610 * t731 - t881;
t473 = t550 * t732 + t551 * t728;
t775 = -t473 * t733 + t569 * t729;
t552 = -t659 * t728 - t843;
t475 = -t732 * t552 - t728 * t817;
t774 = -t475 * t733 + t589 * t729;
t654 = -t671 - t860;
t575 = t654 * t731 - t842;
t576 = -t654 * t727 - t841;
t492 = t575 * t732 + t576 * t728;
t572 = -t672 * t814 + t763;
t773 = -t492 * t733 + t572 * t729;
t661 = -t671 + t860;
t581 = t661 * t731 + t881;
t583 = -t661 * t727 + t880;
t500 = -t581 * t732 - t583 * t728;
t772 = t500 * t733 + t574 * t729;
t660 = t670 - t860;
t582 = t660 * t727 + t841;
t584 = t660 * t731 - t842;
t501 = -t582 * t732 - t584 * t728;
t771 = t501 * t733 + t729 * t740;
t600 = (-t672 * t727 - t674 * t731) * t715;
t601 = (-t672 * t731 + t674 * t727) * t715;
t538 = -t600 * t732 - t601 * t728;
t770 = t538 * t733 + t714 * t729;
t476 = t552 * t728 - t732 * t817;
t531 = t593 * t733 + t598 * t729;
t769 = t593 * t729 - t598 * t733;
t546 = t608 * t733 - t609 * t729;
t679 = 0.2e1 * t796 + t809;
t682 = -0.2e1 * t798 + t807;
t631 = t679 * t728 - t682 * t732;
t687 = (-t717 + t718) * t735;
t768 = t631 * t733 + t687 * t729;
t734 = qJD(4) ^ 2;
t698 = -t734 - t828;
t646 = t698 * t728 + t832;
t767 = -t646 * t733 + t679 * t729;
t700 = -t734 - t827;
t648 = t700 * t732 - t835;
t766 = -t648 * t733 + t682 * t729;
t686 = t816 * t735;
t762 = -t686 * t729 + t836;
t636 = t688 * t722 - t689 * t720;
t678 = t816 * t812;
t760 = qJDD(4) * t729 + t678 * t733;
t558 = t594 * t731 + t672 * t830;
t559 = -t594 * t727 + t672 * t829;
t478 = -t558 * t732 - t559 * t728;
t758 = t478 * t733 - t802;
t560 = t595 * t727 + t674 * t829;
t561 = t595 * t731 - t674 * t830;
t479 = -t560 * t732 - t561 * t728;
t757 = t479 * t733 + t802;
t697 = -t734 + t828;
t645 = -t697 * t728 - t834;
t756 = t645 * t733 - t728 * t808;
t699 = t734 - t827;
t647 = -t699 * t732 - t833;
t755 = t647 * t733 + t729 * t807;
t656 = -t680 * t732 - t717 * t812;
t754 = t656 * t733 - t792;
t657 = -t681 * t728 - t718 * t812;
t753 = t657 * t733 + t792;
t281 = pkin(9) * t327 + (-pkin(10) * t727 + t799) * t329;
t284 = -pkin(9) * t326 + (-pkin(10) * t731 + t853) * t329;
t294 = -t326 * t728 + t327 * t732;
t261 = pkin(3) * t329 - t732 * t281 - t728 * t284 + t294 * t858;
t271 = pkin(3) * t293 + pkin(4) * t326 - pkin(5) * t433 + pkin(10) * t330 - qJ(3) * t294;
t283 = t293 * t729 + t329 * t733;
t752 = pkin(7) * t283 + t261 * t733 + t271 * t729;
t328 = -pkin(10) * t436 - t329;
t302 = pkin(9) * t409 + t727 * t328 + t436 * t799;
t308 = -pkin(9) * t408 + t328 * t731 + t436 * t853;
t351 = -t408 * t728 + t409 * t732;
t275 = pkin(3) * t436 - t732 * t302 - t728 * t308 + t351 * t858;
t285 = pkin(3) * t350 + pkin(4) * t408 + pkin(5) * t549 + pkin(10) * t438 - qJ(3) * t351 + t330;
t334 = t350 * t729 + t436 * t733;
t751 = pkin(7) * t334 + t275 * t733 + t285 * t729;
t352 = -pkin(5) * t467 + t381;
t385 = -pkin(10) * t467 + t849;
t314 = -pkin(4) * t467 + pkin(9) * t419 + t352 * t731 + t385 * t727;
t318 = -pkin(9) * t418 - t352 * t727 + t385 * t731;
t362 = -t418 * t728 + t419 * t732;
t278 = pkin(3) * t467 - t732 * t314 - t728 * t318 + t362 * t858;
t303 = pkin(3) * t361 + pkin(4) * t418 + pkin(5) * t506 + pkin(10) * t468 - qJ(3) * t362 - t848;
t340 = t361 * t729 + t467 * t733;
t750 = pkin(7) * t340 + t278 * t733 + t303 * t729;
t353 = -pkin(5) * t470 + t382;
t387 = -pkin(10) * t470 + t848;
t315 = -pkin(4) * t470 + pkin(9) * t421 + t353 * t731 + t387 * t727;
t321 = -pkin(9) * t420 - t353 * t727 + t387 * t731;
t368 = -t420 * t728 + t421 * t732;
t280 = pkin(3) * t470 - t732 * t315 - t728 * t321 + t368 * t858;
t304 = pkin(3) * t367 + pkin(4) * t420 - pkin(5) * t507 + pkin(10) * t471 - qJ(3) * t368 + t849;
t343 = t367 * t729 + t470 * t733;
t749 = pkin(7) * t343 + t280 * t733 + t304 * t729;
t339 = t389 * t732 - t851;
t377 = -pkin(4) * t548 + pkin(9) * t389;
t289 = pkin(3) * t548 + pkin(9) * t851 + t339 * t858 - t732 * t377;
t298 = pkin(3) * t338 + pkin(4) * t388 - qJ(3) * t339;
t331 = t338 * t729 + t548 * t733;
t748 = pkin(7) * t331 + t289 * t733 + t298 * t729;
t358 = -pkin(4) * t597 + pkin(9) * t491 + t389;
t369 = -pkin(9) * t489 - t388;
t431 = -t489 * t728 + t491 * t732;
t310 = pkin(3) * t597 - t732 * t358 - t728 * t369 + t431 * t858;
t348 = pkin(3) * t429 + pkin(4) * t489 - qJ(3) * t431;
t412 = t429 * t729 + t597 * t733;
t747 = pkin(7) * t412 + t310 * t733 + t348 * t729;
t444 = -pkin(4) * t569 + pkin(9) * t551 - t844;
t472 = -pkin(9) * t550 + t845;
t474 = -t550 * t728 + t551 * t732;
t342 = pkin(3) * t569 - t732 * t444 - t728 * t472 + t474 * t858;
t363 = pkin(3) * t473 + pkin(4) * t550 - qJ(3) * t474 - t449;
t443 = t473 * t729 + t569 * t733;
t746 = pkin(7) * t443 + t342 * t733 + t363 * t729;
t448 = -pkin(4) * t572 + pkin(9) * t576 + t845;
t477 = -pkin(9) * t575 + t844;
t493 = -t575 * t728 + t576 * t732;
t347 = pkin(3) * t572 - t732 * t448 - t728 * t477 + t493 * t858;
t376 = pkin(3) * t492 + pkin(4) * t575 - qJ(3) * t493 - t450;
t453 = t492 * t729 + t572 * t733;
t745 = pkin(7) * t453 + t347 * t733 + t376 * t729;
t403 = pkin(3) * t589 + t476 * t858;
t413 = pkin(3) * t475 - qJ(3) * t476;
t452 = t475 * t729 + t589 * t733;
t744 = pkin(7) * t452 + t403 * t733 + t413 * t729;
t650 = t698 * t732 - t833;
t510 = pkin(3) * t646 - qJ(3) * t650 - t552;
t519 = pkin(3) * t679 + t650 * t858 + t821;
t606 = t646 * t729 + t679 * t733;
t743 = pkin(7) * t606 + t510 * t729 + t519 * t733;
t653 = -t700 * t728 - t834;
t511 = pkin(3) * t648 - qJ(3) * t653 + t817;
t518 = pkin(3) * t682 + t653 * t858 - t824;
t607 = t648 * t729 + t682 * t733;
t742 = pkin(7) * t607 + t511 * t729 + t518 * t733;
t469 = -pkin(3) * t686 - t476;
t634 = -t686 * t733 - t837;
t739 = -pkin(3) * t837 + pkin(7) * t634 + t469 * t733;
t738 = pkin(7) * t531 + (pkin(2) * t733 + qJ(3) * t729) * t659;
t694 = t720 * t810;
t658 = qJDD(4) * t733 - t678 * t729;
t652 = -t699 * t728 + t832;
t651 = (t681 - t798) * t732;
t649 = t697 * t732 - t835;
t644 = (-t680 + t796) * t728;
t643 = t723 * t659;
t635 = t760 * t723;
t632 = -t679 * t732 - t682 * t728;
t628 = t762 * t723;
t627 = t762 * t721;
t614 = -t656 * t729 - t791;
t613 = -t657 * t729 + t791;
t612 = -t647 * t729 + t732 * t806;
t611 = -t645 * t729 - t728 * t806;
t604 = -0.2e1 * t719 + t759;
t599 = t609 + t805 + 0.2e1 * t811;
t596 = -t631 * t729 + t687 * t733;
t568 = -t628 * t720 + t634 * t722;
t567 = t628 * t722 + t634 * t720;
t566 = -t721 * t644 + t723 * t754;
t565 = -t721 * t651 + t723 * t753;
t564 = -t721 * t652 + t723 * t755;
t563 = -t721 * t649 + t723 * t756;
t557 = -t721 * t653 + t723 * t766;
t556 = -t721 * t650 + t723 * t767;
t555 = t723 * t653 + t721 * t766;
t554 = t723 * t650 + t721 * t767;
t543 = -t721 * t632 + t723 * t768;
t542 = t547 * t723;
t539 = -t600 * t728 + t601 * t732;
t537 = -pkin(2) * t598 + qJ(3) * t593;
t533 = t721 * t608 - t862;
t532 = t721 * t609 - t861;
t529 = -t721 * t604 + t862;
t528 = -t538 * t729 + t714 * t733;
t526 = t531 * t723;
t525 = -t721 * t599 + t861;
t521 = -t546 * t723 + t826;
t520 = -t546 * t721 - t643;
t517 = qJ(3) * t682 + t648 * t858 + t821;
t516 = qJ(3) * t679 + t646 * t858 + t824;
t515 = -t557 * t720 + t607 * t722;
t514 = -t556 * t720 + t606 * t722;
t513 = t557 * t722 + t607 * t720;
t512 = t556 * t722 + t606 * t720;
t503 = -t582 * t728 + t584 * t732;
t502 = -t581 * t728 + t583 * t732;
t499 = t723 * t769 + t826;
t498 = t721 * t769 - t643;
t481 = -t560 * t728 + t561 * t732;
t480 = -t558 * t728 + t559 * t732;
t466 = -t479 * t729 + t801;
t465 = -t478 * t729 - t801;
t460 = -qJ(3) * t686 - t683 * t858 - t475;
t459 = -pkin(1) * t520 + t723 * t852;
t458 = -t500 * t729 + t574 * t733;
t457 = -t501 * t729 + t733 * t740;
t456 = -t521 * t720 + t547 * t722;
t455 = t521 * t722 + t547 * t720;
t454 = -t721 * t539 + t723 * t770;
t442 = (-t520 * t721 - t521 * t723) * pkin(7);
t441 = -t499 * t720 + t531 * t722;
t440 = t499 * t722 + t531 * t720;
t435 = -pkin(3) * t836 - t729 * t469 + (-t627 * t721 - t628 * t723) * pkin(7);
t430 = -t488 * t728 + t490 * t732;
t423 = -t486 * t728 + t487 * t732;
t417 = (-pkin(2) * t729 + qJ(3) * t733) * t659 + (-t498 * t721 - t499 * t723) * pkin(7);
t414 = -t428 * t729 + t629 * t733;
t411 = -t721 * t502 + t723 * t772;
t410 = -t721 * t503 + t723 * t771;
t407 = -t721 * t481 + t723 * t757;
t406 = -t721 * t480 + t723 * t758;
t405 = -t721 * t493 + t723 * t773;
t404 = t723 * t493 + t721 * t773;
t402 = qJ(3) * t589 + t475 * t858;
t401 = -t721 * t476 + t723 * t774;
t400 = t723 * t476 + t721 * t774;
t399 = -t462 * t728 + t464 * t732;
t398 = -t461 * t728 + t463 * t732;
t395 = -pkin(1) * t498 - t537 * t721 + t723 * t738;
t394 = -t422 * t729 + t540 * t733;
t393 = -t721 * t474 + t723 * t775;
t392 = t723 * t474 + t721 * t775;
t391 = t733 * t511 - t729 * t518 + (-t555 * t721 - t557 * t723) * pkin(7);
t390 = t733 * t510 - t729 * t519 + (-t554 * t721 - t556 * t723) * pkin(7);
t386 = -pkin(1) * t627 - t460 * t721 + t723 * t739;
t384 = -pkin(1) * t555 - t517 * t721 + t723 * t742;
t383 = -pkin(1) * t554 - t516 * t721 + t723 * t743;
t379 = -t397 * t729 + t496 * t733;
t378 = -t396 * t729 + t494 * t733;
t375 = -t405 * t720 + t453 * t722;
t374 = t405 * t722 + t453 * t720;
t373 = -t425 * t728 + t427 * t732;
t372 = -t424 * t728 + t426 * t732;
t366 = -t401 * t720 + t452 * t722;
t365 = t401 * t722 + t452 * t720;
t364 = -t721 * t430 + t723 * t777;
t360 = -t721 * t431 + t723 * t776;
t359 = t723 * t431 + t721 * t776;
t357 = -t393 * t720 + t443 * t722;
t356 = t393 * t722 + t443 * t720;
t355 = -t415 * t728 + t416 * t732;
t349 = -t721 * t423 + t723 * t778;
t346 = qJ(3) * t572 - t728 * t448 + t732 * t477 + t492 * t858;
t345 = -t371 * t729 + t483 * t733;
t344 = -t370 * t729 + t482 * t733;
t341 = qJ(3) * t569 - t728 * t444 + t732 * t472 + t473 * t858;
t337 = -t354 * t729 + t437 * t733;
t336 = -t721 * t399 + t723 * t779;
t335 = -t721 * t398 + t723 * t780;
t333 = -t360 * t720 + t412 * t722;
t332 = t360 * t722 + t412 * t720;
t325 = -t721 * t373 + t723 * t781;
t324 = -t721 * t372 + t723 * t782;
t323 = -t721 * t368 + t723 * t783;
t322 = t723 * t368 + t721 * t783;
t320 = -t721 * t362 + t723 * t784;
t319 = t723 * t362 + t721 * t784;
t317 = -t729 * t403 + t733 * t413 + (-t400 * t721 - t401 * t723) * pkin(7);
t316 = -t721 * t355 + t723 * t785;
t313 = -t721 * t351 + t723 * t786;
t312 = t723 * t351 + t721 * t786;
t311 = -pkin(1) * t400 - t402 * t721 + t723 * t744;
t309 = qJ(3) * t597 - t728 * t358 + t732 * t369 + t429 * t858;
t307 = -t721 * t339 + t723 * t787;
t306 = t723 * t339 + t721 * t787;
t305 = -t729 * t347 + t733 * t376 + (-t404 * t721 - t405 * t723) * pkin(7);
t301 = -t323 * t720 + t343 * t722;
t300 = t323 * t722 + t343 * t720;
t299 = -t729 * t342 + t733 * t363 + (-t392 * t721 - t393 * t723) * pkin(7);
t297 = -t320 * t720 + t340 * t722;
t296 = t320 * t722 + t340 * t720;
t295 = -pkin(1) * t404 - t346 * t721 + t723 * t745;
t292 = -t313 * t720 + t334 * t722;
t291 = t313 * t722 + t334 * t720;
t290 = -pkin(1) * t392 - t341 * t721 + t723 * t746;
t288 = -pkin(9) * t850 + qJ(3) * t548 + t338 * t858 - t728 * t377;
t287 = -t307 * t720 + t331 * t722;
t286 = t307 * t722 + t331 * t720;
t282 = -t729 * t310 + t733 * t348 + (-t359 * t721 - t360 * t723) * pkin(7);
t279 = qJ(3) * t470 - t728 * t315 + t732 * t321 + t367 * t858;
t277 = qJ(3) * t467 - t728 * t314 + t732 * t318 + t361 * t858;
t276 = -pkin(1) * t359 - t721 * t309 + t723 * t747;
t274 = qJ(3) * t436 - t728 * t302 + t732 * t308 + t350 * t858;
t273 = -t721 * t294 + t723 * t788;
t272 = t723 * t294 + t721 * t788;
t270 = -t729 * t289 + t733 * t298 + (-t306 * t721 - t307 * t723) * pkin(7);
t269 = -t729 * t280 + t733 * t304 + (-t322 * t721 - t323 * t723) * pkin(7);
t268 = -t729 * t278 + t733 * t303 + (-t319 * t721 - t320 * t723) * pkin(7);
t267 = -t273 * t720 + t283 * t722;
t266 = t273 * t722 + t283 * t720;
t265 = -pkin(1) * t306 - t721 * t288 + t723 * t748;
t264 = -t729 * t275 + t733 * t285 + (-t312 * t721 - t313 * t723) * pkin(7);
t263 = -pkin(1) * t322 - t721 * t279 + t723 * t749;
t262 = -pkin(1) * t319 - t721 * t277 + t723 * t750;
t260 = qJ(3) * t329 - t728 * t281 + t732 * t284 + t293 * t858;
t259 = -pkin(1) * t312 - t721 * t274 + t723 * t751;
t258 = -t729 * t261 + t733 * t271 + (-t272 * t721 - t273 * t723) * pkin(7);
t257 = -pkin(1) * t272 - t721 * t260 + t723 * t752;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t637, 0, 0, 0, 0, 0, 0, t625, t623, 0, t456, 0, 0, 0, 0, 0, 0, 0, -t625, -t623, t441, 0, 0, 0, 0, 0, 0, t514, t515, t568, t366, 0, 0, 0, 0, 0, 0, t357, t375, t333, t287, 0, 0, 0, 0, 0, 0, t297, t301, t292, t267; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t636, 0, 0, 0, 0, 0, 0, -t620, -t618, 0, t455, 0, 0, 0, 0, 0, 0, 0, t620, t618, t440, 0, 0, 0, 0, 0, 0, t512, t513, t567, t365, 0, 0, 0, 0, 0, 0, t356, t374, t332, t286, 0, 0, 0, 0, 0, 0, t296, t300, t291, t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t818, 0, 0, 0, 0, 0, 0, t666, -t665, 0, t520, 0, 0, 0, 0, 0, 0, 0, -t666, t665, t498, 0, 0, 0, 0, 0, 0, t554, t555, t627, t400, 0, 0, 0, 0, 0, 0, t392, t404, t359, t306, 0, 0, 0, 0, 0, 0, t319, t322, t312, t272; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t867, -t866, -t636, -qJ(1) * t636, 0, 0, -t623, 0, t625, t694, -t533 * t720 - t877, -t532 * t720 - t875, -t542 * t720 + t546 * t722, -qJ(1) * t455 + t442 * t722 - t459 * t720, t694, t623, -t625, 0, 0, 0, -t526 * t720 - t722 * t769, -t529 * t720 + t877, -t525 * t720 + t875, -qJ(1) * t440 - t395 * t720 + t417 * t722, -t565 * t720 + t613 * t722, -t543 * t720 + t596 * t722, -t564 * t720 + t612 * t722, -t566 * t720 + t614 * t722, -t563 * t720 + t611 * t722, -t635 * t720 + t658 * t722, -qJ(1) * t512 - t383 * t720 + t390 * t722, -qJ(1) * t513 - t384 * t720 + t391 * t722, -qJ(1) * t567 - t386 * t720 + t435 * t722, -qJ(1) * t365 - t311 * t720 + t317 * t722, -t407 * t720 + t466 * t722, -t364 * t720 + t414 * t722, -t411 * t720 + t458 * t722, -t406 * t720 + t465 * t722, -t410 * t720 + t457 * t722, -t454 * t720 + t528 * t722, -qJ(1) * t356 - t290 * t720 + t299 * t722, -qJ(1) * t374 - t295 * t720 + t305 * t722, -qJ(1) * t332 - t276 * t720 + t282 * t722, -qJ(1) * t286 - t265 * t720 + t270 * t722, -t336 * t720 + t379 * t722, -t316 * t720 + t337 * t722, -t324 * t720 + t344 * t722, -t335 * t720 + t378 * t722, -t325 * t720 + t345 * t722, -t349 * t720 + t394 * t722, -qJ(1) * t296 - t262 * t720 + t268 * t722, -qJ(1) * t300 - t263 * t720 + t269 * t722, -qJ(1) * t291 - t259 * t720 + t264 * t722, -qJ(1) * t266 - t257 * t720 + t258 * t722; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t866, -t867, t637, qJ(1) * t637, 0, 0, t618, 0, -t620, -t797, t533 * t722 - t878, t532 * t722 - t876, t542 * t722 + t546 * t720, qJ(1) * t456 + t442 * t720 + t459 * t722, -t797, -t618, t620, 0, 0, 0, t526 * t722 - t720 * t769, t529 * t722 + t878, t525 * t722 + t876, qJ(1) * t441 + t395 * t722 + t417 * t720, t565 * t722 + t613 * t720, t543 * t722 + t596 * t720, t564 * t722 + t612 * t720, t566 * t722 + t614 * t720, t563 * t722 + t611 * t720, t635 * t722 + t658 * t720, qJ(1) * t514 + t383 * t722 + t390 * t720, qJ(1) * t515 + t384 * t722 + t391 * t720, qJ(1) * t568 + t386 * t722 + t435 * t720, qJ(1) * t366 + t311 * t722 + t317 * t720, t407 * t722 + t466 * t720, t364 * t722 + t414 * t720, t411 * t722 + t458 * t720, t406 * t722 + t465 * t720, t410 * t722 + t457 * t720, t454 * t722 + t528 * t720, qJ(1) * t357 + t290 * t722 + t299 * t720, qJ(1) * t375 + t295 * t722 + t305 * t720, qJ(1) * t333 + t276 * t722 + t282 * t720, qJ(1) * t287 + t265 * t722 + t270 * t720, t336 * t722 + t379 * t720, t316 * t722 + t337 * t720, t324 * t722 + t344 * t720, t335 * t722 + t378 * t720, t325 * t722 + t345 * t720, t349 * t722 + t394 * t720, qJ(1) * t297 + t262 * t722 + t268 * t720, qJ(1) * t301 + t263 * t722 + t269 * t720, qJ(1) * t292 + t259 * t722 + t264 * t720, qJ(1) * t267 + t257 * t722 + t258 * t720; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t688, t689, 0, 0, 0, 0, t665, 0, t666, t709, -t723 * t608 - t864, -t723 * t609 - t863, t547 * t721, pkin(1) * t521 + t721 * t852, t709, -t665, -t666, 0, 0, 0, t531 * t721, t723 * t604 + t864, t723 * t599 + t863, pkin(1) * t499 + t537 * t723 + t721 * t738, t723 * t651 + t721 * t753, t723 * t632 + t721 * t768, t723 * t652 + t721 * t755, t723 * t644 + t721 * t754, t723 * t649 + t721 * t756, t760 * t721, pkin(1) * t556 + t516 * t723 + t721 * t743, pkin(1) * t557 + t517 * t723 + t721 * t742, pkin(1) * t628 + t460 * t723 + t721 * t739, pkin(1) * t401 + t402 * t723 + t721 * t744, t723 * t481 + t721 * t757, t723 * t430 + t721 * t777, t723 * t502 + t721 * t772, t723 * t480 + t721 * t758, t723 * t503 + t721 * t771, t723 * t539 + t721 * t770, pkin(1) * t393 + t341 * t723 + t721 * t746, pkin(1) * t405 + t346 * t723 + t721 * t745, pkin(1) * t360 + t309 * t723 + t721 * t747, pkin(1) * t307 + t723 * t288 + t721 * t748, t723 * t399 + t721 * t779, t723 * t355 + t721 * t785, t723 * t372 + t721 * t782, t723 * t398 + t721 * t780, t723 * t373 + t721 * t781, t723 * t423 + t721 * t778, pkin(1) * t320 + t723 * t277 + t721 * t750, pkin(1) * t323 + t723 * t279 + t721 * t749, pkin(1) * t313 + t723 * t274 + t721 * t751, pkin(1) * t273 + t723 * t260 + t721 * t752;];
tauB_reg  = t1;
