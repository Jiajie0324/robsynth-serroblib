% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRR5_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR5_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR5_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR5_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR5_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRR5_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:43:49
% EndTime: 2019-03-08 20:43:56
% DurationCPUTime: 6.51s
% Computational Cost: add. (7665->553), mult. (15456->733), div. (0->0), fcn. (11551->14), ass. (0->284)
t200 = cos(qJ(2));
t190 = sin(pkin(6));
t305 = qJD(1) * t190;
t268 = t200 * t305;
t244 = qJD(3) - t268;
t195 = sin(qJ(4));
t198 = cos(qJ(5));
t194 = sin(qJ(5));
t199 = cos(qJ(4));
t315 = t194 * t199;
t140 = t195 * t198 + t315;
t133 = t140 * qJD(2);
t379 = qJD(6) + t133;
t301 = qJD(2) * t199;
t302 = qJD(2) * t195;
t135 = -t194 * t302 + t198 * t301;
t193 = sin(qJ(6));
t197 = cos(qJ(6));
t281 = qJD(4) + qJD(5);
t255 = t197 * t281;
t98 = t193 * t135 - t255;
t385 = t379 * t98;
t298 = qJD(4) * t199;
t247 = pkin(4) * t298 + t244;
t202 = -pkin(2) - pkin(8);
t360 = pkin(9) - t202;
t145 = t360 * t199;
t137 = qJD(4) * t145;
t299 = qJD(4) * t195;
t249 = t360 * t299;
t196 = sin(qJ(2));
t272 = t196 * t305;
t144 = t360 * t195;
t92 = -t144 * t194 + t198 * t145;
t355 = -qJD(5) * t92 - t198 * t137 - t140 * t272 + t194 * t249;
t86 = t281 * t140;
t254 = t281 * t199;
t297 = qJD(5) * t194;
t87 = -t194 * t299 - t195 * t297 + t198 * t254;
t384 = pkin(5) * t87 + pkin(10) * t86 + t247;
t192 = cos(pkin(6));
t304 = qJD(1) * t192;
t271 = t195 * t304;
t322 = t190 * t196;
t270 = qJD(2) * t322;
t150 = qJD(1) * t270;
t288 = qJDD(1) * t190;
t263 = t200 * t288;
t225 = qJDD(3) + t150 - t263;
t101 = t202 * qJDD(2) + t225;
t132 = t202 * qJD(2) + t244;
t287 = qJDD(1) * t192;
t278 = t195 * t101 + t132 * t298 + t199 * t287;
t50 = -qJD(4) * t271 + t278;
t246 = t199 * t101 - t195 * t287;
t267 = t199 * t304;
t95 = t132 * t195 + t267;
t51 = -t95 * qJD(4) + t246;
t94 = t199 * t132 - t271;
t212 = -(t195 * t94 - t199 * t95) * qJD(4) + t50 * t195 + t51 * t199;
t189 = sin(pkin(11));
t191 = cos(pkin(11));
t318 = t192 * t200;
t126 = t189 * t196 - t191 * t318;
t128 = t189 * t318 + t191 * t196;
t320 = t190 * t200;
t229 = g(1) * t128 + g(2) * t126 - g(3) * t320;
t383 = t212 - t229;
t290 = qJD(2) * qJD(4);
t265 = t199 * t290;
t283 = t195 * qJDD(2);
t382 = t265 + t283;
t282 = t199 * qJDD(2);
t381 = -t195 * t290 + t282;
t323 = t190 * t195;
t380 = t126 * t199 + t191 * t323;
t289 = qJD(2) * qJD(5);
t378 = -t195 * t289 + t381;
t188 = qJ(4) + qJ(5);
t182 = sin(t188);
t183 = cos(t188);
t112 = -t182 * t192 - t183 * t320;
t325 = t189 * t190;
t79 = t128 * t183 - t182 * t325;
t324 = t190 * t191;
t81 = t126 * t183 + t182 * t324;
t377 = g(1) * t79 + g(2) * t81 + g(3) * t112;
t293 = qJD(6) * t197;
t370 = (pkin(9) * qJD(2) - t132) * t195 - t267;
t346 = t194 * t370;
t83 = -pkin(9) * t301 + t94;
t73 = qJD(4) * pkin(4) + t83;
t41 = t198 * t73 + t346;
t38 = -pkin(5) * t281 - t41;
t280 = qJDD(4) + qJDD(5);
t37 = qJDD(4) * pkin(4) - pkin(9) * t282 + qJD(4) * t370 + t246;
t40 = -t382 * pkin(9) + t50;
t261 = t194 * t40 - t198 * t37;
t342 = t198 * t370;
t42 = t194 * t73 - t342;
t9 = -qJD(5) * t42 - t261;
t7 = -pkin(5) * t280 - t9;
t376 = t7 * t193 + t38 * t293;
t141 = -t194 * t195 + t198 * t199;
t93 = -t144 * t198 - t145 * t194;
t354 = qJD(5) * t93 - t194 * t137 + t141 * t272 - t198 * t249;
t319 = t192 * t196;
t127 = t189 * t200 + t191 * t319;
t129 = -t189 * t319 + t191 * t200;
t372 = -g(1) * t129 - g(2) * t127;
t219 = g(3) * t322 - t372;
t375 = t219 * t183;
t184 = t195 * pkin(4);
t201 = -pkin(9) - pkin(8);
t374 = t126 * t201 + t127 * t184;
t373 = t128 * t201 + t129 * t184;
t314 = t196 * t197;
t151 = t190 * t314;
t130 = -t192 * t195 - t199 * t320;
t226 = -t192 * t199 + t195 * t320;
t67 = t130 * t194 - t198 * t226;
t56 = -t193 * t67 + t151;
t217 = -t382 * t194 + t378 * t198 - t289 * t315;
t228 = t378 * t194;
t60 = (qJD(2) * t254 + t283) * t198 + t228;
t159 = t196 * t288;
t286 = qJDD(2) * qJ(3);
t102 = t286 + t159 + (qJD(3) + t268) * qJD(2);
t71 = t382 * pkin(4) + t102;
t21 = t60 * pkin(5) - pkin(10) * t217 + t71;
t39 = pkin(10) * t281 + t42;
t303 = qJD(2) * qJ(3);
t142 = t272 + t303;
t120 = pkin(4) * t302 + t142;
t58 = pkin(5) * t133 - pkin(10) * t135 + t120;
t238 = t193 * t39 - t197 * t58;
t296 = qJD(5) * t198;
t8 = t194 * t37 + t198 * t40 + t73 * t296 + t297 * t370;
t6 = pkin(10) * t280 + t8;
t2 = -t238 * qJD(6) + t193 * t21 + t197 * t6;
t1 = t2 * t197;
t331 = t133 * t197;
t23 = t193 * t58 + t197 * t39;
t351 = t193 * t23;
t371 = -t133 * t351 + t238 * t331 + t1;
t369 = qJD(4) * (-t142 + t272 - t303) - qJDD(4) * t202;
t368 = -t140 * t280 - t281 * t87;
t362 = g(3) * t130;
t361 = g(3) * t190;
t173 = qJ(3) + t184;
t77 = pkin(5) * t140 - pkin(10) * t141 + t173;
t46 = -t193 * t93 + t197 * t77;
t359 = qJD(6) * t46 + t384 * t193 + t355 * t197;
t47 = t193 * t77 + t197 * t93;
t358 = -qJD(6) * t47 - t355 * t193 + t384 * t197;
t357 = t192 ^ 2 * qJDD(1) - g(3);
t43 = t194 * t83 - t342;
t356 = t42 - t43;
t100 = t197 * t135 + t193 * t281;
t353 = t100 * t98;
t352 = t133 * t38;
t55 = qJDD(6) + t60;
t350 = t193 * t55;
t348 = t193 * t86;
t347 = t193 * t98;
t345 = t197 * t55;
t344 = t197 * t86;
t343 = t197 * t98;
t294 = qJD(6) * t193;
t30 = -qJD(6) * t255 + t135 * t294 - t193 * t280 - t197 * t217;
t341 = t30 * t193;
t259 = t193 * t217 - t197 * t280;
t31 = qJD(6) * t100 + t259;
t340 = t31 * t197;
t339 = t141 * t280 - t86 * t281;
t338 = qJDD(2) * pkin(2);
t337 = t100 * t193;
t336 = t100 * t197;
t335 = t102 * t196;
t334 = t379 * t135;
t332 = t128 * t199;
t330 = t135 * t133;
t329 = t141 * t197;
t328 = t142 * t200;
t327 = t182 * t193;
t326 = t182 * t197;
t321 = t190 * t199;
t317 = t193 * t196;
t312 = t200 * t201;
t204 = qJD(2) ^ 2;
t311 = t200 * t204;
t310 = t380 * pkin(4);
t309 = pkin(2) * t320 + qJ(3) * t322;
t186 = t195 ^ 2;
t187 = t199 ^ 2;
t308 = t186 - t187;
t307 = t186 + t187;
t203 = qJD(4) ^ 2;
t306 = -t203 - t204;
t300 = qJD(2) * t200;
t295 = qJD(6) * t379;
t292 = t142 * qJD(2);
t285 = qJDD(4) * t195;
t279 = pkin(4) * t296;
t277 = t189 * t323;
t275 = t190 * t317;
t274 = t199 * t204 * t195;
t32 = t38 * t294;
t273 = t322 * t184 + t309;
t269 = t190 * t300;
t262 = t135 * t238 + t32;
t118 = t126 * pkin(2);
t258 = qJ(3) * t127 - t118;
t119 = t128 * pkin(2);
t257 = qJ(3) * t129 - t119;
t256 = t197 * t379;
t253 = t307 * qJDD(2);
t252 = qJD(6) * t140 + qJD(2);
t251 = t195 * t265;
t250 = pkin(4) * t297 - t43;
t76 = pkin(5) * t135 + pkin(10) * t133;
t248 = pkin(5) * t182 - pkin(10) * t183;
t243 = t133 * t87 + t140 * t60;
t175 = pkin(4) * t194 + pkin(10);
t242 = -t175 * t55 + t352;
t241 = -t135 * t86 + t141 * t217;
t240 = -t197 * t238 + t351;
t239 = -t193 * t238 - t197 * t23;
t235 = t336 + t347;
t234 = t198 * t130 + t194 * t226;
t233 = (-qJD(2) * pkin(2) + t244) * t196 + t328;
t232 = t102 * qJ(3) + t142 * qJD(3);
t231 = qJDD(2) * t196 + t311;
t57 = t197 * t67 + t275;
t227 = -t141 * t294 - t344;
t113 = -t182 * t320 + t183 * t192;
t80 = t128 * t182 + t183 * t325;
t82 = -t126 * t182 + t183 * t324;
t223 = g(1) * t80 - g(2) * t82 + g(3) * t113;
t222 = t23 * t135 + t377 * t193 + t376;
t221 = -t377 - t7;
t218 = -t159 + t219;
t3 = -qJD(6) * t23 - t193 * t6 + t197 * t21;
t216 = -qJD(6) * t240 - t3 * t193;
t215 = t229 + t263;
t214 = qJDD(3) - t215;
t213 = t216 + t1;
t211 = qJD(6) * t235 - t340 - t341;
t210 = g(1) * t277 - t362;
t209 = -t120 * t135 - t261 - t377;
t208 = t120 * t133 + t223 - t8;
t207 = -t8 * t140 - t9 * t141 + t41 * t86 - t42 * t87 + t229;
t206 = t216 - t223;
t205 = qJD(2) * t244 - t202 * t203 + t102 - t219 + t286;
t181 = qJDD(4) * t199;
t176 = -pkin(4) * t198 - pkin(5);
t125 = t231 * t190;
t124 = (-qJDD(2) * t200 + t196 * t204) * t190;
t109 = pkin(4) * t332;
t106 = t112 * pkin(5);
t104 = t225 - t338;
t89 = qJD(4) * t226 + t199 * t270;
t88 = qJD(4) * t130 + t195 * t270;
t75 = t81 * pkin(5);
t74 = t79 * pkin(5);
t65 = pkin(4) * t301 + t76;
t61 = -t133 ^ 2 + t135 ^ 2;
t49 = t135 * t281 + (-t281 * t301 - t283) * t198 - t228;
t48 = t133 * t281 + t217;
t44 = t198 * t83 + t346;
t29 = qJD(5) * t67 + t194 * t88 - t198 * t89;
t28 = qJD(5) * t234 + t194 * t89 + t198 * t88;
t27 = t193 * t76 + t197 * t41;
t26 = -t193 * t41 + t197 * t76;
t25 = t193 * t65 + t197 * t44;
t24 = -t193 * t44 + t197 * t65;
t19 = -t100 * t135 + t256 * t379 + t350;
t18 = -t193 * t379 ^ 2 + t98 * t135 + t345;
t15 = t347 * t379 - t340;
t14 = t100 * t256 - t341;
t13 = -qJD(6) * t57 - t193 * t28 + t197 * t269;
t12 = qJD(6) * t56 + t193 * t269 + t197 * t28;
t4 = (-t30 - t385) * t197 + (-t100 * t379 - t31) * t193;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1) - g(3), 0, 0, 0, 0, 0, 0, -t124, -t125, 0 (t196 ^ 2 + t200 ^ 2) * t190 ^ 2 * qJDD(1) + t357, 0, 0, 0, 0, 0, 0, 0, t124, t125 (qJD(2) * t233 - t104 * t200 + t335) * t190 + t357, 0, 0, 0, 0, 0, 0, t89 * qJD(4) + t130 * qJDD(4) + (t195 * t231 + t196 * t265) * t190, -t88 * qJD(4) + t226 * qJDD(4) + (t381 * t196 + t199 * t311) * t190 (-t130 * t199 + t195 * t226) * qJDD(2) + (-t195 * t88 - t199 * t89 + (t130 * t195 + t199 * t226) * qJD(4)) * qJD(2), t51 * t130 - t50 * t226 + t95 * t88 + t94 * t89 - g(3) + (t200 * t292 + t335) * t190, 0, 0, 0, 0, 0, 0, -t29 * t281 + t234 * t280 + (t133 * t300 + t196 * t60) * t190, -t28 * t281 - t67 * t280 + (t135 * t300 + t196 * t217) * t190, -t133 * t28 + t135 * t29 - t217 * t234 - t60 * t67, t42 * t28 - t41 * t29 + t9 * t234 + t8 * t67 - g(3) + (t120 * t300 + t196 * t71) * t190, 0, 0, 0, 0, 0, 0, t13 * t379 - t234 * t31 + t29 * t98 + t55 * t56, t100 * t29 - t12 * t379 + t234 * t30 - t55 * t57, -t100 * t13 - t12 * t98 + t30 * t56 - t31 * t57, t12 * t23 - t13 * t238 + t2 * t57 - t234 * t7 + t29 * t38 + t3 * t56 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t215, t218, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t214 - 0.2e1 * t338, 0.2e1 * qJD(2) * qJD(3) - t218 + 0.2e1 * t286, -t104 * pkin(2) - g(1) * t257 - g(2) * t258 - g(3) * t309 - t233 * t305 + t232, qJDD(2) * t187 - 0.2e1 * t251, -0.2e1 * t195 * t282 + 0.2e1 * t290 * t308, -t195 * t203 + t181, qJDD(2) * t186 + 0.2e1 * t251, -t199 * t203 - t285, 0, t205 * t195 - t199 * t369, t195 * t369 + t205 * t199, t150 * t307 - t202 * t253 - t383, -g(1) * (-pkin(8) * t128 + t257) - g(2) * (-pkin(8) * t126 + t258) - g(3) * (pkin(8) * t320 + t309) + (-t328 + (-t195 * t95 - t199 * t94) * t196) * t305 + t212 * t202 + t232, t241, t133 * t86 - t135 * t87 - t140 * t217 - t141 * t60, t339, t243, t368, 0, t120 * t87 + t133 * t247 + t71 * t140 + t173 * t60 - t182 * t219 - t280 * t92 - t281 * t354, -t120 * t86 + t135 * t247 + t71 * t141 + t173 * t217 - t280 * t93 - t281 * t355 - t375, -t133 * t355 + t135 * t354 + t217 * t92 - t93 * t60 + t207, t8 * t93 - t9 * t92 + t71 * t173 - g(1) * (t257 + t373) - g(2) * (t258 + t374) - g(3) * (-t190 * t312 + t273) + t355 * t42 - t354 * t41 + t247 * t120, t100 * t227 - t30 * t329 (t337 + t343) * t86 + (t341 - t340 + (-t336 + t347) * qJD(6)) * t141, t100 * t87 - t30 * t140 + t227 * t379 + t329 * t55, -t86 * t347 + (t193 * t31 + t293 * t98) * t141, -t141 * t350 - t31 * t140 - t98 * t87 + (-t141 * t293 + t348) * t379, t140 * t55 + t379 * t87, t46 * t55 + t3 * t140 - t238 * t87 + t92 * t31 - t38 * t348 - g(1) * (-t128 * t193 + t129 * t326) - g(2) * (-t126 * t193 + t127 * t326) + t354 * t98 - (t182 * t314 + t193 * t200) * t361 + t376 * t141 + t358 * t379, -t47 * t55 - t2 * t140 - t23 * t87 - t92 * t30 - t38 * t344 - g(1) * (-t128 * t197 - t129 * t327) - g(2) * (-t126 * t197 - t127 * t327) - (-t182 * t317 + t197 * t200) * t361 + (t7 * t197 - t32) * t141 - t359 * t379 + t354 * t100, t46 * t30 - t47 * t31 - t359 * t98 + t240 * t86 - t358 * t100 + t375 + (qJD(6) * t239 - t193 * t2 - t197 * t3) * t141, t2 * t47 + t3 * t46 + t7 * t92 - g(1) * (-t119 + t373) - g(2) * (-t118 + t374) - g(3) * t273 + t354 * t38 + t359 * t23 - t358 * t238 - (t196 * t248 - t312) * t361 + t372 * (qJ(3) + t248); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t204, t150 + t214 - t292 - t338, 0, 0, 0, 0, 0, 0, t195 * t306 + t181, t199 * t306 - t285, -t253, -t292 + t383, 0, 0, 0, 0, 0, 0, -qJD(2) * t133 + t339, -qJD(2) * t135 + t368, -t241 - t243, -qJD(2) * t120 - t207, 0, 0, 0, 0, 0, 0, -t140 * t350 - t141 * t31 + t86 * t98 + (-t193 * t87 - t197 * t252) * t379, -t140 * t345 + t86 * t100 + t141 * t30 + (t193 * t252 - t197 * t87) * t379 (t337 - t343) * t87 + t235 * qJD(2) + t211 * t140, -qJD(2) * t240 + t140 * t213 - t7 * t141 - t239 * t87 + t38 * t86 - t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t274, -t308 * t204, t282, -t274, -t283, qJDD(4), -t199 * t292 - g(1) * (-t277 + t332) - g(2) * t380 - t362 + t246, t195 * t292 - g(1) * (-t128 * t195 - t189 * t321) - g(2) * (-t126 * t195 + t191 * t321) - g(3) * t226 + (t94 + t271) * qJD(4) - t278, 0, 0, t330, t61, t48, -t330, t49, t280, t43 * qJD(4) - t356 * qJD(5) + (-t133 * t301 + t198 * t280 - t281 * t297) * pkin(4) + t209, t44 * t281 + (-t135 * t301 - t194 * t280 - t281 * t296) * pkin(4) + t208, t356 * t135 + (-t41 + t44) * t133 + (-t194 * t60 - t198 * t217 + (-t133 * t198 + t135 * t194) * qJD(5)) * pkin(4), -t42 * t44 + t41 * t43 - g(1) * t109 - g(2) * t310 + (t8 * t194 + t9 * t198 - t120 * t301 + (-t194 * t41 + t198 * t42) * qJD(5) + t210) * pkin(4), t14, t4, t19, t15, t18, -t334, -t24 * t379 + t176 * t31 + t250 * t98 + (-t279 * t379 + t242) * t193 + (-t175 * t295 + t221) * t197 + t262, -t176 * t30 + t242 * t197 + t250 * t100 + (t175 * t294 - t197 * t279 + t25) * t379 + t222, t24 * t100 + t25 * t98 + (-t98 * t279 - t175 * t31 + (t100 * t175 + t238) * qJD(6)) * t197 + (t100 * t279 - t175 * t30 - t3 + (t175 * t98 - t23) * qJD(6)) * t193 - t223 + t371, t7 * t176 - t23 * t25 + t238 * t24 - t38 * t43 - g(1) * (pkin(10) * t80 + t109 + t74) - g(2) * (-pkin(10) * t82 + t310 + t75) - g(3) * (t113 * pkin(10) + t106) + t213 * t175 + ((t38 * t194 - t198 * t239) * qJD(5) + t210) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, t61, t48, -t330, t49, t280, t42 * qJD(4) + t209, t281 * t41 + t208, 0, 0, t14, t4, t19, t15, t18, -t334, -pkin(5) * t31 - t26 * t379 - t42 * t98 + (-pkin(10) * t55 + t352) * t193 + (-pkin(10) * t295 + t221) * t197 + t262, t38 * t331 + pkin(5) * t30 - t42 * t100 + t27 * t379 + (t294 * t379 - t345) * pkin(10) + t222, pkin(10) * t211 + t26 * t100 + t27 * t98 + t206 + t371, -t7 * pkin(5) - g(1) * t74 - g(2) * t75 - g(3) * t106 + t238 * t26 - t23 * t27 - t38 * t42 + (t206 + t1) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t353, t100 ^ 2 - t98 ^ 2, -t30 + t385, -t353, -t259 + (-qJD(6) + t379) * t100, t55, t23 * t379 - t38 * t100 - g(1) * (t129 * t197 - t193 * t80) - g(2) * (t127 * t197 + t193 * t82) - g(3) * (-t113 * t193 + t151) + t3, -t238 * t379 + t38 * t98 - g(1) * (-t129 * t193 - t197 * t80) - g(2) * (-t127 * t193 + t197 * t82) - g(3) * (-t113 * t197 - t275) - t2, 0, 0;];
tau_reg  = t5;
