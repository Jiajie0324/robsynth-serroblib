% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6PRPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6PRPRRR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR5_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR5_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRR5_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:43:35
% EndTime: 2019-03-08 20:43:41
% DurationCPUTime: 2.26s
% Computational Cost: add. (2776->220), mult. (6266->379), div. (0->0), fcn. (6102->10), ass. (0->135)
t162 = qJD(4) + qJD(5);
t81 = sin(qJ(5));
t82 = sin(qJ(4));
t85 = cos(qJ(5));
t86 = cos(qJ(4));
t52 = t81 * t86 + t85 * t82;
t37 = t162 * t52;
t131 = t82 * qJD(4);
t134 = qJD(5) * t81;
t142 = t85 * t86;
t38 = -t81 * t131 - t82 * t134 + t162 * t142;
t53 = -t81 * t82 + t142;
t148 = t53 * t81;
t97 = (t52 * t85 - t148) * qJD(5);
t166 = (t37 * t85 - t38 * t81 - t97) * pkin(4);
t78 = sin(pkin(6));
t87 = cos(qJ(2));
t145 = t78 * t87;
t79 = cos(pkin(6));
t101 = t86 * t145 + t79 * t82;
t165 = t101 * qJD(4);
t80 = sin(qJ(6));
t76 = t80 ^ 2;
t84 = cos(qJ(6));
t77 = t84 ^ 2;
t138 = t76 - t77;
t163 = t138 * qJD(6);
t50 = t53 ^ 2;
t161 = t86 ^ 2;
t160 = 2 * qJD(3);
t159 = t37 * pkin(5);
t88 = -pkin(2) - pkin(8);
t158 = pkin(9) - t88;
t100 = t82 * t145 - t79 * t86;
t30 = -t100 * t85 - t101 * t81;
t83 = sin(qJ(2));
t146 = t78 * t83;
t67 = qJD(2) * t146;
t39 = -t82 * t67 + t165;
t90 = t100 * qJD(4) + t86 * t67;
t11 = t30 * qJD(5) - t81 * t39 - t85 * t90;
t29 = -t100 * t81 + t101 * t85;
t157 = t29 * t11;
t156 = t29 * t81;
t73 = -t85 * pkin(4) - pkin(5);
t155 = t37 * t73;
t154 = t37 * t84;
t114 = t158 * t131;
t117 = t158 * t86;
t54 = t158 * t82;
t41 = -t81 * t117 - t85 * t54;
t49 = qJD(4) * t117;
t22 = t41 * qJD(5) - t85 * t114 - t81 * t49;
t40 = t85 * t117 - t81 * t54;
t153 = t40 * t22;
t152 = t40 * t81;
t151 = t52 * t38;
t150 = t53 * t37;
t149 = t53 * t80;
t147 = t53 * t84;
t144 = t80 * t38;
t143 = t84 * t38;
t74 = qJD(6) * t84;
t141 = t22 * t80 + t40 * t74;
t135 = qJD(2) * t87;
t121 = t78 * t135;
t140 = qJ(3) * t121 + qJD(3) * t146;
t123 = pkin(4) * t134;
t139 = t80 * t123 + t73 * t74;
t137 = t76 + t77;
t136 = pkin(4) * qJD(5);
t132 = qJD(6) * t80;
t130 = t86 * qJD(4);
t129 = qJ(3) * qJD(4);
t128 = 0.2e1 * t151;
t127 = t84 * t146;
t126 = t80 * t154;
t125 = pkin(5) * t132;
t124 = pkin(5) * t74;
t122 = t85 * t136;
t120 = t80 * t74;
t119 = t82 * t130;
t118 = t52 ^ 2 + t50;
t20 = t137 * t38;
t116 = t137 * t85;
t70 = t82 * pkin(4) + qJ(3);
t115 = t50 * t120;
t65 = pkin(4) * t130 + qJD(3);
t113 = t11 * t40 + t29 * t22;
t112 = -t11 * t53 + t29 * t37;
t95 = t52 * pkin(5) - t53 * pkin(10) + t70;
t93 = t84 * t95;
t16 = -t80 * t41 + t93;
t17 = t84 * t41 + t80 * t95;
t111 = t16 * t84 + t17 * t80;
t110 = t16 * t80 - t17 * t84;
t109 = -t22 * t53 + t40 * t37;
t23 = -t80 * t30 + t127;
t24 = t80 * t146 + t84 * t30;
t108 = t23 * t84 + t24 * t80;
t107 = t23 * t80 - t24 * t84;
t106 = t150 - t151;
t72 = t81 * pkin(4) + pkin(10);
t104 = t52 * t72 - t53 * t73;
t102 = -t84 * t123 + t73 * t132;
t99 = -t37 * t80 + t53 * t74;
t98 = t53 * t132 + t154;
t25 = t52 * t132 - t143;
t96 = 0.2e1 * t106;
t94 = t38 * pkin(5) + t37 * pkin(10) + t65;
t10 = t29 * qJD(5) + t85 * t39 - t81 * t90;
t92 = t10 * t52 - t30 * t38 - t112;
t21 = t40 * qJD(5) - t81 * t114 + t85 * t49;
t91 = t21 * t52 - t41 * t38 - t109;
t3 = -qJD(6) * t93 + t41 * t132 + t84 * t21 - t80 * t94;
t4 = -t17 * qJD(6) + t80 * t21 + t84 * t94;
t1 = -t111 * qJD(6) - t3 * t84 - t4 * t80;
t5 = -qJD(6) * t127 + t84 * t10 - t80 * t121 + t30 * t132;
t6 = -t24 * qJD(6) + t80 * t10 + t84 * t121;
t2 = -t108 * qJD(6) - t5 * t84 - t6 * t80;
t89 = -pkin(4) * t97 - t38 * t72 - t155;
t12 = t161 * t67 + (t165 - t39) * t82;
t75 = qJ(3) * t160;
t64 = -0.2e1 * t120;
t63 = 0.2e1 * t120;
t57 = t78 ^ 2 * t83 * t135;
t51 = -0.2e1 * t163;
t44 = t116 * t136;
t33 = t40 * t132;
t26 = t52 * t74 + t144;
t15 = t53 * t163 + t126;
t13 = -0.4e1 * t53 * t120 + t138 * t37;
t8 = -t11 * t84 + t29 * t132;
t7 = t11 * t80 + t29 * t74;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t100 * t39 - 0.2e1 * t101 * t90 + 0.2e1 * t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t30 * t10 + 0.2e1 * t157 + 0.2e1 * t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t23 * t6 - 0.2e1 * t24 * t5 + 0.2e1 * t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, -t121, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t121, -pkin(2) * t67 + t140, 0, 0, 0, 0, 0, 0 (t83 * t130 + t82 * t135) * t78 (-t83 * t131 + t86 * t135) * t78, -t12, t12 * t88 + t140, 0, 0, 0, 0, 0, 0 (t52 * t135 + t38 * t83) * t78 (t53 * t135 - t37 * t83) * t78, t92, -t10 * t41 - t30 * t21 + (t70 * t135 + t65 * t83) * t78 + t113, 0, 0, 0, 0, 0, 0, t11 * t149 + t23 * t38 + t99 * t29 + t6 * t52, t11 * t147 - t24 * t38 - t98 * t29 + t5 * t52, t108 * t37 + (t107 * qJD(6) + t5 * t80 - t6 * t84) * t53, t6 * t16 - t5 * t17 + t23 * t4 - t24 * t3 + t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t160, t75, -0.2e1 * t119, 0.2e1 * (t82 ^ 2 - t161) * qJD(4), 0, 0.2e1 * t119, 0, 0, 0.2e1 * qJD(3) * t82 + 0.2e1 * t86 * t129, 0.2e1 * qJD(3) * t86 - 0.2e1 * t82 * t129, 0, t75, -0.2e1 * t150, 0.2e1 * t37 * t52 - 0.2e1 * t53 * t38, 0, t128, 0, 0, 0.2e1 * t70 * t38 + 0.2e1 * t65 * t52, -0.2e1 * t70 * t37 + 0.2e1 * t65 * t53, 0.2e1 * t91, -0.2e1 * t41 * t21 + 0.2e1 * t70 * t65 + 0.2e1 * t153, -0.2e1 * t77 * t150 - 0.2e1 * t115, 0.4e1 * t53 * t126 + 0.2e1 * t50 * t163, 0.2e1 * t53 * t143 - 0.2e1 * t98 * t52, -0.2e1 * t76 * t150 + 0.2e1 * t115, -0.2e1 * t53 * t144 - 0.2e1 * t99 * t52, t128, 0.2e1 * t22 * t149 + 0.2e1 * t16 * t38 + 0.2e1 * t4 * t52 + 0.2e1 * t99 * t40, 0.2e1 * t22 * t147 - 0.2e1 * t17 * t38 + 0.2e1 * t3 * t52 - 0.2e1 * t98 * t40, 0.2e1 * t111 * t37 + 0.2e1 * (t110 * qJD(6) + t3 * t80 - t4 * t84) * t53, 0.2e1 * t16 * t4 - 0.2e1 * t17 * t3 + 0.2e1 * t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107 * t38 + t2 * t52 + t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, -t91, 0, 0, 0, 0, 0, 0, -t118 * t74 + t80 * t96, t118 * t132 + t84 * t96, 0, t1 * t52 - t110 * t38 + t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t52 * t20 - 0.2e1 * t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, t39, 0, 0, 0, 0, 0, 0, 0, 0, -t11, t10, 0 (-t10 * t81 - t11 * t85 + (t30 * t85 + t156) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, t8, t7, t2, t11 * t73 + (-t107 * t85 + t156) * t136 + t2 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, 0, -t130, 0, -t88 * t131, -t88 * t130, 0, 0, 0, 0, -t37, 0, -t38, 0, -t22, t21, t166 (-t21 * t81 - t22 * t85 + (t41 * t85 + t152) * qJD(5)) * pkin(4), -t15, t13, t26, t15, -t25, 0, t33 + (-t104 * qJD(6) - t22) * t84 + t89 * t80, t104 * t132 + t89 * t84 + t141, t1, t22 * t73 + (-t110 * t85 + t152) * t136 + t1 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t131, -t130, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t38, 0, -t166, 0, 0, 0, 0, 0, 0, -t98, -t99, t20, t155 + t72 * t20 + (t116 * t52 - t148) * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t123, -0.2e1 * t122, 0, 0, t63, t51, 0, t64, 0, 0, 0.2e1 * t102, 0.2e1 * t139, 0.2e1 * t44, 0.2e1 * (t116 * t72 + t73 * t81) * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, t10, 0, 0, 0, 0, 0, 0, 0, 0, t8, t7, t2, -t11 * pkin(5) + pkin(10) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, 0, -t38, 0, -t22, t21, 0, 0, -t15, t13, t26, t15, -t25, 0, t33 + (-pkin(10) * t38 + t159) * t80 + (-t22 + (-pkin(5) * t53 - pkin(10) * t52) * qJD(6)) * t84, t98 * pkin(5) + t25 * pkin(10) + t141, t1, -t22 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t38, 0, 0, 0, 0, 0, 0, 0, 0, -t98, -t99, t20, pkin(10) * t20 - t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123, -t122, 0, 0, t63, t51, 0, t64, 0, 0, t102 - t125, -t124 + t139, t44 (-pkin(5) * t81 + pkin(10) * t116) * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t51, 0, t64, 0, 0, -0.2e1 * t125, -0.2e1 * t124, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t98, 0, -t99, t38, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, t25, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, -t132, 0, -t80 * t122 - t72 * t74, -t84 * t122 + t72 * t132, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, -t132, 0, -pkin(10) * t74, pkin(10) * t132, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t9;
