% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRPRR10_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR10_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR10_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR10_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:09:20
% EndTime: 2019-03-09 04:09:35
% DurationCPUTime: 5.87s
% Computational Cost: add. (10235->476), mult. (22480->672), div. (0->0), fcn. (15757->8), ass. (0->225)
t222 = sin(pkin(10));
t228 = cos(qJ(3));
t279 = qJD(1) * t228;
t262 = t222 * t279;
t223 = cos(pkin(10));
t270 = t223 * qJD(3);
t181 = t262 - t270;
t261 = t223 * t279;
t277 = qJD(3) * t222;
t183 = t261 + t277;
t225 = sin(qJ(5));
t227 = cos(qJ(5));
t115 = t181 * t225 - t183 * t227;
t116 = t227 * t181 + t183 * t225;
t224 = sin(qJ(6));
t316 = cos(qJ(6));
t46 = t316 * t115 + t224 * t116;
t335 = t46 ^ 2;
t50 = t224 * t115 - t316 * t116;
t334 = t50 ^ 2;
t226 = sin(qJ(3));
t280 = qJD(1) * t226;
t212 = qJD(5) + t280;
t206 = qJD(6) + t212;
t333 = t206 * t50;
t332 = t46 * t206;
t189 = t222 * t227 + t223 * t225;
t169 = t189 * qJD(1);
t143 = t226 * t169;
t171 = t189 * qJD(5);
t286 = t143 + t171;
t263 = t222 * t280;
t291 = t227 * t223;
t272 = qJD(5) * t227;
t273 = qJD(5) * t225;
t321 = -t222 * t273 + t223 * t272;
t285 = -t225 * t263 + t280 * t291 + t321;
t245 = pkin(3) * t228 + qJ(4) * t226;
t191 = t245 * qJD(1);
t229 = -pkin(1) - pkin(7);
t320 = qJD(1) * t229;
t207 = qJD(2) + t320;
t294 = t223 * t228;
t129 = t222 * t191 + t207 * t294;
t104 = pkin(8) * t263 + t129;
t314 = pkin(8) + qJ(4);
t200 = t314 * t222;
t201 = t314 * t223;
t133 = -t225 * t200 + t227 * t201;
t296 = t222 * t228;
t128 = t223 * t191 - t207 * t296;
t267 = pkin(8) * t223 * t226;
t235 = (pkin(4) * t228 + t267) * qJD(1);
t88 = t128 + t235;
t311 = t189 * qJD(4) + t133 * qJD(5) - t104 * t225 + t227 * t88;
t310 = -qJD(4) * t291 + t227 * t104 + t200 * t272 + (qJD(4) * t222 + qJD(5) * t201 + t88) * t225;
t331 = t115 ^ 2;
t330 = t116 ^ 2;
t329 = pkin(5) * t279 + pkin(9) * t285 + t311;
t328 = pkin(9) * t286 + t310;
t315 = t50 * t46;
t154 = t189 * t226;
t188 = t222 * t225 - t291;
t157 = t188 * t228;
t303 = qJD(3) * t157 + qJD(5) * t154 + t169;
t327 = t115 * t212;
t326 = t116 * t212;
t156 = t188 * t226;
t278 = qJD(3) * t189;
t287 = t188 * qJD(1) + qJD(5) * t156 - t228 * t278;
t325 = -t334 + t335;
t253 = qJD(6) * t316;
t271 = qJD(6) * t224;
t276 = qJD(3) * t226;
t260 = t222 * t276;
t246 = qJD(1) * t260;
t258 = t227 * t276;
t247 = t223 * t258;
t68 = qJD(1) * t247 + t181 * t272 + t183 * t273 - t225 * t246;
t284 = -t181 * t273 + t183 * t272;
t69 = -t278 * t280 + t284;
t20 = -t115 * t271 + t116 * t253 + t224 * t69 + t316 * t68;
t324 = -t20 - t333;
t158 = qJD(3) * t245 - qJD(4) * t228 + qJD(2);
t134 = t158 * qJD(1);
t297 = t207 * t228;
t163 = (qJD(4) + t297) * qJD(3);
t78 = t223 * t134 - t163 * t222;
t59 = qJD(3) * t235 + t78;
t194 = pkin(3) * t226 - qJ(4) * t228 + qJ(2);
t174 = t194 * qJD(1);
t193 = t226 * t207;
t175 = qJD(3) * qJ(4) + t193;
t107 = t223 * t174 - t175 * t222;
t71 = pkin(4) * t280 - pkin(8) * t183 + t107;
t79 = t222 * t134 + t223 * t163;
t72 = pkin(8) * t246 + t79;
t108 = t222 * t174 + t223 * t175;
t73 = -pkin(8) * t181 + t108;
t12 = t225 * t59 + t227 * t72 + t71 * t272 - t273 * t73;
t11 = -pkin(9) * t69 + t12;
t34 = -t225 * t73 + t227 * t71;
t28 = pkin(9) * t115 + t34;
t26 = pkin(5) * t212 + t28;
t35 = t225 * t71 + t227 * t73;
t29 = -pkin(9) * t116 + t35;
t13 = -qJD(5) * t35 - t225 * t72 + t227 * t59;
t269 = qJD(1) * qJD(3);
t215 = t228 * t269;
t8 = pkin(5) * t215 + pkin(9) * t68 + t13;
t233 = -t316 * t11 - t224 * t8 - t26 * t253 + t29 * t271;
t307 = qJD(3) * pkin(3);
t250 = -qJD(4) + t307;
t166 = -t250 - t297;
t126 = pkin(4) * t181 + t166;
t58 = pkin(5) * t116 + t126;
t323 = -t50 * t58 + t233;
t268 = 0.2e1 * qJD(1);
t179 = t223 * t194;
t252 = -t222 * t229 + pkin(4);
t114 = -pkin(8) * t294 + t226 * t252 + t179;
t292 = t226 * t229;
t137 = t222 * t194 + t223 * t292;
t127 = -pkin(8) * t296 + t137;
t55 = t225 * t114 + t227 * t127;
t220 = t226 ^ 2;
t221 = t228 ^ 2;
t319 = qJD(1) * (0.2e1 * t220 - t221);
t265 = t316 * t29;
t6 = t224 * t26 + t265;
t2 = -qJD(6) * t6 - t224 * t11 + t316 * t8;
t318 = t46 * t58 + t2;
t21 = -qJD(6) * t46 - t224 * t68 + t316 * t69;
t317 = -t21 - t332;
t132 = -t227 * t200 - t201 * t225;
t96 = -pkin(9) * t189 + t132;
t97 = -pkin(9) * t188 + t133;
t41 = t224 * t96 + t316 * t97;
t313 = t41 * qJD(6) - t328 * t224 + t329 * t316;
t40 = -t224 * t97 + t316 * t96;
t312 = -t40 * qJD(6) + t329 * t224 + t328 * t316;
t309 = t188 * t253 + t189 * t271 + t286 * t224 - t285 * t316;
t122 = -t224 * t188 + t316 * t189;
t308 = t122 * qJD(6) + t285 * t224 + t286 * t316;
t306 = t224 * t29;
t92 = -t224 * t154 - t316 * t156;
t305 = t92 * qJD(6) - t303 * t224 - t287 * t316;
t90 = -t316 * t154 + t224 * t156;
t304 = -t90 * qJD(6) - t287 * t224 + t303 * t316;
t302 = t115 * t116;
t301 = t181 * t222;
t300 = t181 * t223;
t299 = t183 * t222;
t298 = t183 * t223;
t231 = qJD(1) ^ 2;
t295 = t222 * t231;
t293 = t223 * t231;
t230 = qJD(3) ^ 2;
t290 = t230 * t226;
t289 = t230 * t228;
t288 = t231 * qJ(2);
t274 = qJD(3) * t229;
t257 = t228 * t274;
t125 = t222 * t158 + t223 * t257;
t283 = t220 - t221;
t281 = -t230 - t231;
t275 = qJD(3) * t228;
t266 = qJD(2) * t268;
t264 = t228 * t231 * t226;
t214 = -pkin(4) * t223 - pkin(3);
t259 = t225 * t276;
t211 = t226 * t274;
t146 = -pkin(4) * t263 + t193;
t254 = t286 * pkin(5) - t146;
t54 = t227 * t114 - t127 * t225;
t180 = pkin(4) * t296 - t228 * t229;
t249 = t181 + t270;
t248 = -t183 + t277;
t244 = -t222 * t78 + t223 * t79;
t243 = -t107 * t223 - t108 * t222;
t242 = -t107 * t222 + t108 * t223;
t241 = t249 * t226;
t240 = qJD(1) * t249;
t167 = -pkin(4) * t260 + t211;
t38 = pkin(5) * t226 + pkin(9) * t157 + t54;
t155 = t189 * t228;
t39 = -pkin(9) * t155 + t55;
t22 = -t224 * t39 + t316 * t38;
t23 = t224 * t38 + t316 * t39;
t93 = -t224 * t155 - t316 * t157;
t238 = t248 * t280;
t102 = pkin(8) * t260 + t125;
t141 = t223 * t158;
t82 = t141 + (t228 * t252 + t267) * qJD(3);
t24 = t227 * t102 + t114 * t272 - t127 * t273 + t225 * t82;
t190 = t207 * t276;
t138 = -pkin(4) * t246 + t190;
t236 = -t166 + (t207 + t320) * t228;
t44 = pkin(5) * t69 + t138;
t234 = -qJ(4) * t275 + (t166 + t250) * t226;
t25 = -t55 * qJD(5) - t102 * t225 + t227 * t82;
t219 = t223 ^ 2;
t218 = t222 ^ 2;
t216 = qJ(2) * t266;
t204 = t226 * t215;
t203 = 0.2e1 * t204;
t145 = pkin(5) * t188 + t214;
t136 = -t222 * t292 + t179;
t124 = -t222 * t257 + t141;
t123 = pkin(5) * t155 + t180;
t121 = t316 * t188 + t189 * t224;
t101 = -t222 * t258 - t223 * t259 + t321 * t228;
t99 = t171 * t228 - t222 * t259 + t247;
t91 = t316 * t155 - t157 * t224;
t70 = pkin(5) * t101 + t167;
t33 = t93 * qJD(6) + t316 * t101 - t224 * t99;
t31 = t224 * t101 + t155 * t253 - t157 * t271 + t316 * t99;
t19 = -pkin(9) * t101 + t24;
t18 = pkin(5) * t275 + pkin(9) * t99 + t25;
t10 = t316 * t28 - t306;
t9 = -t224 * t28 - t265;
t5 = t316 * t26 - t306;
t4 = -t23 * qJD(6) + t316 * t18 - t224 * t19;
t3 = t22 * qJD(6) + t224 * t18 + t316 * t19;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t266, t216, -0.2e1 * t204, 0.2e1 * t283 * t269, -t290, t203, -t289, 0, -t229 * t290 + (qJ(2) * t275 + qJD(2) * t226) * t268, -t229 * t289 + (-qJ(2) * t276 + qJD(2) * t228) * t268, 0, t216 (-t219 * t279 - t298) * t276 (t300 + (t183 + 0.2e1 * t261) * t222) * t276 (t183 * t228 - t223 * t319) * qJD(3) (-t218 * t279 - t301) * t276 (-t181 * t228 + t222 * t319) * qJD(3), t203 (qJD(1) * t124 + t78) * t226 + ((qJD(1) * t136 + t107) * t228 + (t181 * t229 + t222 * t236) * t226) * qJD(3) (-qJD(1) * t125 - t79) * t226 + ((-qJD(1) * t137 - t108) * t228 + (t183 * t229 + t223 * t236) * t226) * qJD(3), -t124 * t183 - t125 * t181 + (-t222 * t79 - t223 * t78) * t228 + ((t136 * t223 + t137 * t222) * qJD(1) - t243) * t276, t107 * t124 + t108 * t125 + t136 * t78 + t137 * t79 + (t166 - t297) * t211, t115 * t99 + t157 * t68, t101 * t115 + t116 * t99 + t155 * t68 + t157 * t69, -t212 * t99 - t226 * t68 + (-qJD(1) * t157 - t115) * t275, t101 * t116 + t155 * t69, -t101 * t212 - t226 * t69 + (-qJD(1) * t155 - t116) * t275, t212 * t275 + t204, t101 * t126 + t116 * t167 + t13 * t226 + t138 * t155 + t180 * t69 + t212 * t25 + (qJD(1) * t54 + t34) * t275, -t115 * t167 - t12 * t226 - t126 * t99 - t138 * t157 - t180 * t68 - t212 * t24 + (-qJD(1) * t55 - t35) * t275, -t101 * t35 + t115 * t25 - t116 * t24 - t12 * t155 + t13 * t157 + t34 * t99 + t54 * t68 - t55 * t69, t12 * t55 + t126 * t167 + t13 * t54 + t138 * t180 + t24 * t35 + t25 * t34, -t20 * t93 + t31 * t46, t20 * t91 - t21 * t93 - t31 * t50 + t33 * t46, -t20 * t226 - t206 * t31 + (qJD(1) * t93 - t46) * t275, t21 * t91 - t33 * t50, -t206 * t33 - t21 * t226 + (-qJD(1) * t91 + t50) * t275, t206 * t275 + t204, t123 * t21 + t2 * t226 + t206 * t4 + t33 * t58 + t44 * t91 - t50 * t70 + (qJD(1) * t22 + t5) * t275, t233 * t226 - t123 * t20 - t206 * t3 - t31 * t58 + t44 * t93 - t46 * t70 + (-qJD(1) * t23 - t6) * t275, -t2 * t93 + t20 * t22 - t21 * t23 + t233 * t91 + t3 * t50 + t31 * t5 - t33 * t6 + t4 * t46, t123 * t44 + t2 * t22 - t23 * t233 + t3 * t6 + t4 * t5 + t58 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t231, -t288, 0, 0, 0, 0, 0, 0, t281 * t226, t281 * t228, 0, -t288, 0, 0, 0, 0, 0, 0 (-t293 + (t181 - t262) * qJD(3)) * t226 (t295 + (t183 - t261) * qJD(3)) * t226 (t299 - t300) * t275 + (t298 + t301) * qJD(1), t244 * t226 + t243 * qJD(1) + (t166 * t226 + (t242 - t193) * t228) * qJD(3), 0, 0, 0, 0, 0, 0, -t228 * t69 + t287 * t212 + (t116 * t226 - t154 * t279) * qJD(3), t228 * t68 + t303 * t212 + (-t115 * t226 + t156 * t279) * qJD(3), t115 * t287 + t303 * t116 - t154 * t68 + t156 * t69, -t12 * t156 + t126 * t276 - t13 * t154 - t138 * t228 + t287 * t34 - t303 * t35, 0, 0, 0, 0, 0, 0, -t21 * t228 - t305 * t206 + (-t226 * t50 + t279 * t90) * qJD(3), t20 * t228 + t304 * t206 + (-t226 * t46 - t279 * t92) * qJD(3), t20 * t90 - t21 * t92 - t304 * t50 - t305 * t46, t2 * t90 - t228 * t44 - t233 * t92 + t58 * t276 - t304 * t6 - t305 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t264, -t283 * t231, 0, -t264, 0, 0, -t228 * t288, t226 * t288, 0, 0, -t223 * t238 (-t300 - t299 + (t218 - t219) * qJD(3)) * t280, t220 * t293 + t248 * t279, t226 * t222 * t240, -t220 * t295 + t228 * t240, -t264, -t207 * t241 + (-t107 * t228 - t128 * t226 + t222 * t234) * qJD(1), t248 * t193 + (t108 * t228 + t129 * t226 + t223 * t234) * qJD(1), t128 * t183 + t129 * t181 + (-qJD(4) * t181 - t107 * t280 + t79) * t223 + (qJD(4) * t183 - t108 * t280 - t78) * t222, -t107 * t128 - t108 * t129 + (-t166 - t307) * t193 + t242 * qJD(4) + t244 * qJ(4), -t115 * t285 - t68 * t189, t115 * t286 - t285 * t116 + t188 * t68 - t189 * t69, t285 * t212 + (t115 + t278) * t279, t286 * t116 + t69 * t188, -t286 * t212 + (-qJD(3) * t188 + t116) * t279, -t212 * t279, -t116 * t146 + t138 * t188 + t214 * t69 - t311 * t212 + t286 * t126 + (qJD(3) * t132 - t34) * t279, t115 * t146 + t138 * t189 - t214 * t68 + t310 * t212 + t285 * t126 + (-qJD(3) * t133 + t35) * t279, -t115 * t311 + t310 * t116 - t12 * t188 - t13 * t189 + t132 * t68 - t133 * t69 - t285 * t34 - t286 * t35, t12 * t133 - t126 * t146 + t13 * t132 + t138 * t214 - t310 * t35 - t311 * t34, -t20 * t122 + t309 * t46, t121 * t20 - t122 * t21 + t308 * t46 - t309 * t50, -t309 * t206 + (qJD(3) * t122 + t46) * t279, t21 * t121 - t308 * t50, -t308 * t206 + (-qJD(3) * t121 - t50) * t279, -t206 * t279, t121 * t44 + t145 * t21 + t308 * t58 - t254 * t50 - t313 * t206 + (qJD(3) * t40 - t5) * t279, t122 * t44 - t145 * t20 - t309 * t58 - t254 * t46 + t312 * t206 + (-qJD(3) * t41 + t6) * t279, t121 * t233 - t122 * t2 + t20 * t40 - t21 * t41 - t308 * t6 + t309 * t5 - t312 * t50 - t313 * t46, t145 * t44 + t2 * t40 - t233 * t41 + t254 * t58 - t312 * t6 - t313 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t238, -qJD(1) * t241, -t181 ^ 2 - t183 ^ 2, t107 * t183 + t108 * t181 + t190, 0, 0, 0, 0, 0, 0, t69 - t327, -t68 - t326, -t330 - t331, -t115 * t34 + t116 * t35 + t138, 0, 0, 0, 0, 0, 0, t21 - t332, -t20 + t333, -t334 - t335, -t46 * t5 - t50 * t6 + t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, -t330 + t331, -t68 + t326, t302, qJD(3) * t143 - t284 - t327, t215, t115 * t126 + t212 * t35 + t13, t116 * t126 + t212 * t34 - t12, 0, 0, t315, t325, t324, -t315, t317, t215, -t9 * t206 + (-t115 * t50 - t206 * t271 + t316 * t215) * pkin(5) + t318, t10 * t206 + (-t115 * t46 - t206 * t253 - t215 * t224) * pkin(5) + t323, -t10 * t50 - t6 * t46 + t5 * t50 - t9 * t46 + (t316 * t20 - t21 * t224 + (-t224 * t46 + t316 * t50) * qJD(6)) * pkin(5), -t6 * t10 - t5 * t9 + (t316 * t2 - t233 * t224 + t115 * t58 + (-t224 * t5 + t316 * t6) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t315, t325, t324, -t315, t317, t215, t6 * t206 + t318, t5 * t206 + t323, 0, 0;];
tauc_reg  = t1;
