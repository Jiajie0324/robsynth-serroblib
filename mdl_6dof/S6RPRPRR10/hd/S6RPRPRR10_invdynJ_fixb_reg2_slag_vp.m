% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:09:26
% EndTime: 2019-03-09 04:09:42
% DurationCPUTime: 8.98s
% Computational Cost: add. (12496->649), mult. (25460->838), div. (0->0), fcn. (17882->14), ass. (0->290)
t260 = sin(pkin(10));
t268 = cos(qJ(3));
t350 = qJD(1) * t268;
t327 = t260 * t350;
t261 = cos(pkin(10));
t342 = t261 * qJD(3);
t197 = t327 - t342;
t325 = t261 * t350;
t349 = qJD(3) * t260;
t199 = t325 + t349;
t264 = sin(qJ(5));
t267 = cos(qJ(5));
t120 = t197 * t264 - t199 * t267;
t121 = t267 * t197 + t199 * t264;
t263 = sin(qJ(6));
t403 = cos(qJ(6));
t58 = t120 * t403 + t263 * t121;
t425 = t58 ^ 2;
t62 = t263 * t120 - t403 * t121;
t424 = t62 ^ 2;
t265 = sin(qJ(3));
t351 = qJD(1) * t265;
t233 = qJD(5) + t351;
t225 = qJD(6) + t233;
t423 = t225 * t62;
t422 = t58 * t225;
t206 = t260 * t267 + t261 * t264;
t183 = t206 * qJD(1);
t185 = t206 * qJD(5);
t361 = t265 * t183 + t185;
t326 = t261 * t351;
t328 = t260 * t351;
t344 = qJD(5) * t267;
t345 = qJD(5) * t264;
t409 = -t260 * t345 + t261 * t344;
t360 = -t264 * t328 + t267 * t326 + t409;
t297 = pkin(3) * t268 + qJ(4) * t265;
t209 = t297 * qJD(1);
t270 = -pkin(1) - pkin(7);
t226 = qJD(1) * t270 + qJD(2);
t375 = t261 * t268;
t135 = t260 * t209 + t226 * t375;
t108 = pkin(8) * t328 + t135;
t395 = pkin(8) + qJ(4);
t220 = t395 * t260;
t221 = t395 * t261;
t369 = t267 * t261;
t377 = t260 * t268;
t134 = t261 * t209 - t226 * t377;
t334 = pkin(8) * t261 * t265;
t89 = (pkin(4) * t268 + t334) * qJD(1) + t134;
t390 = qJD(4) * t369 - t267 * t108 - t220 * t344 + (-qJD(4) * t260 - qJD(5) * t221 - t89) * t264;
t138 = -t264 * t220 + t267 * t221;
t389 = -t206 * qJD(4) - qJD(5) * t138 + t108 * t264 - t267 * t89;
t421 = t120 ^ 2;
t420 = t121 ^ 2;
t419 = -pkin(5) * t350 - pkin(9) * t360 + t389;
t418 = pkin(9) * t361 - t390;
t396 = t62 * t58;
t417 = t120 * t233;
t416 = t121 * t233;
t169 = t206 * t265;
t205 = t260 * t264 - t369;
t172 = t205 * t268;
t363 = -qJD(3) * t172 - qJD(5) * t169 - t183;
t171 = t205 * t265;
t347 = qJD(3) * t268;
t362 = t205 * qJD(1) + qJD(5) * t171 - t206 * t347;
t415 = -t424 + t425;
t317 = qJD(6) * t403;
t343 = qJD(6) * t263;
t335 = t268 * qJDD(1);
t227 = t260 * t335;
t303 = -t261 * qJDD(3) + t227;
t340 = qJD(1) * qJD(3);
t316 = t265 * t340;
t146 = t260 * t316 - t303;
t228 = t261 * t335;
t359 = t260 * qJDD(3) + t228;
t147 = t261 * t316 - t359;
t53 = -t264 * t146 + t267 * t147 + t197 * t344 + t199 * t345;
t54 = -t146 * t267 - t264 * t147 - t197 * t345 + t199 * t344;
t14 = -t120 * t343 + t121 * t317 + t263 * t54 + t403 * t53;
t414 = -t14 - t423;
t296 = pkin(3) * t265 - qJ(4) * t268;
t212 = qJ(2) + t296;
t188 = t212 * qJD(1);
t211 = t265 * t226;
t189 = qJD(3) * qJ(4) + t211;
t111 = t261 * t188 - t189 * t260;
t74 = pkin(4) * t351 - pkin(8) * t199 + t111;
t112 = t260 * t188 + t261 * t189;
t76 = -pkin(8) * t197 + t112;
t35 = -t264 * t76 + t267 * t74;
t28 = pkin(9) * t120 + t35;
t26 = pkin(5) * t233 + t28;
t36 = t264 * t74 + t267 * t76;
t29 = -pkin(9) * t121 + t36;
t315 = t268 * t340;
t336 = t265 * qJDD(1);
t281 = t315 + t336;
t204 = qJDD(5) + t281;
t173 = qJD(3) * t297 - t268 * qJD(4) + qJD(2);
t106 = qJD(1) * t173 + qJDD(1) * t212;
t224 = qJDD(1) * t270 + qJDD(2);
t378 = t226 * t268;
t131 = qJDD(3) * qJ(4) + t265 * t224 + (qJD(4) + t378) * qJD(3);
t55 = t261 * t106 - t260 * t131;
t40 = pkin(4) * t281 + t147 * pkin(8) + t55;
t56 = t260 * t106 + t261 * t131;
t43 = pkin(8) * t146 + t56;
t9 = -qJD(5) * t36 - t264 * t43 + t267 * t40;
t6 = t204 * pkin(5) + t53 * pkin(9) + t9;
t8 = t264 * t40 + t267 * t43 + t74 * t344 - t345 * t76;
t7 = -pkin(9) * t54 + t8;
t1 = t26 * t317 + t263 * t6 - t29 * t343 + t403 * t7;
t256 = pkin(10) + qJ(5);
t248 = qJ(6) + t256;
t239 = sin(t248);
t240 = cos(t248);
t269 = cos(qJ(1));
t266 = sin(qJ(1));
t373 = t265 * t266;
t149 = t239 * t269 + t240 * t373;
t372 = t265 * t269;
t151 = -t239 * t266 + t240 * t372;
t398 = g(3) * t268;
t180 = -qJD(3) * pkin(3) + qJD(4) - t378;
t132 = pkin(4) * t197 + t180;
t68 = pkin(5) * t121 + t132;
t413 = g(1) * t149 - g(2) * t151 + t240 * t398 - t62 * t68 - t1;
t253 = g(2) * t269;
t254 = g(1) * t266;
t410 = t254 - t253;
t411 = t410 * t261;
t258 = t265 ^ 2;
t259 = t268 ^ 2;
t353 = t258 + t259;
t310 = t353 * t224;
t195 = t261 * t212;
t314 = -t260 * t270 + pkin(4);
t119 = -pkin(8) * t375 + t265 * t314 + t195;
t371 = t265 * t270;
t144 = t260 * t212 + t261 * t371;
t133 = -pkin(8) * t377 + t144;
t67 = t264 * t119 + t267 * t133;
t354 = t258 - t259;
t308 = qJD(1) * t354;
t245 = sin(t256);
t246 = cos(t256);
t159 = -t245 * t373 + t246 * t269;
t161 = t245 * t372 + t246 * t266;
t408 = -g(1) * t159 - g(2) * t161 + t245 * t398;
t148 = -t239 * t373 + t240 * t269;
t150 = t239 * t372 + t240 * t266;
t331 = t403 * t29;
t11 = t263 * t26 + t331;
t2 = -qJD(6) * t11 - t263 * t7 + t403 * t6;
t407 = -g(1) * t148 - g(2) * t150 + t239 * t398 + t58 * t68 + t2;
t15 = -qJD(6) * t58 - t263 * t53 + t403 * t54;
t406 = -t15 - t422;
t399 = g(3) * t265;
t280 = t268 * t410 - t399;
t405 = 0.2e1 * qJ(2);
t404 = t54 * pkin(5);
t402 = pkin(4) * t260;
t397 = t146 * pkin(4);
t100 = -pkin(9) * t205 + t138;
t137 = -t267 * t220 - t221 * t264;
t99 = -pkin(9) * t206 + t137;
t49 = -t263 * t100 + t403 * t99;
t394 = qJD(6) * t49 + t263 * t419 - t403 * t418;
t50 = t100 * t403 + t263 * t99;
t393 = -qJD(6) * t50 + t263 * t418 + t403 * t419;
t392 = t205 * t317 + t206 * t343 + t263 * t361 - t360 * t403;
t127 = -t263 * t205 + t206 * t403;
t391 = qJD(6) * t127 + t263 * t360 + t361 * t403;
t388 = t263 * t29;
t93 = -t263 * t169 - t171 * t403;
t387 = qJD(6) * t93 + t263 * t363 - t362 * t403;
t91 = -t169 * t403 + t263 * t171;
t386 = -qJD(6) * t91 - t263 * t362 - t363 * t403;
t385 = pkin(1) * qJDD(1);
t384 = t120 * t121;
t348 = qJD(3) * t265;
t294 = -qJDD(3) * pkin(3) + t226 * t348 + qJDD(4);
t136 = -t224 * t268 + t294;
t383 = t136 * t260;
t382 = t136 * t261;
t381 = t136 * t268;
t380 = t146 * t261;
t379 = t147 * t260;
t272 = qJD(1) ^ 2;
t376 = t260 * t272;
t374 = t261 * t272;
t370 = t266 * t268;
t368 = t268 * t146;
t367 = t268 * t147;
t366 = t268 * t269;
t271 = qJD(3) ^ 2;
t365 = t270 * t271;
t364 = t272 * qJ(2);
t346 = qJD(3) * t270;
t321 = t268 * t346;
t130 = t260 * t173 + t261 * t321;
t358 = g(1) * t366 + g(2) * t370;
t332 = 0.2e1 * qJD(1) * qJD(2);
t357 = (qJDD(1) * qJ(2) + t332) * qJ(2);
t356 = t269 * pkin(1) + t266 * qJ(2);
t352 = -t271 - t272;
t341 = -qJD(4) + t180;
t339 = qJDD(1) * t260;
t338 = qJDD(1) * t261;
t337 = qJDD(3) * t265;
t330 = t268 * t272 * t265;
t329 = t269 * pkin(7) + t356;
t241 = pkin(4) * t261 + pkin(3);
t324 = t260 * t348;
t323 = t264 * t348;
t322 = t267 * t348;
t158 = -pkin(4) * t328 + t211;
t318 = pkin(5) * t361 - t158;
t313 = -g(2) * t372 + t398;
t312 = -g(1) * t370 + t399;
t309 = -t224 + t364;
t66 = t267 * t119 - t133 * t264;
t196 = pkin(4) * t377 - t268 * t270;
t307 = t197 + t342;
t306 = -t199 + t349;
t305 = t353 * qJDD(1);
t304 = qJDD(2) - t385;
t302 = g(2) * t329;
t301 = t265 * t315;
t300 = g(1) * t269 + g(2) * t266;
t298 = -t410 - t364;
t295 = -t55 * t260 + t56 * t261;
t293 = t111 * t261 + t112 * t260;
t292 = -t111 * t260 + t112 * t261;
t291 = t197 * t261 + t199 * t260;
t208 = pkin(5) * t246 + t241;
t255 = -pkin(9) - t395;
t289 = t208 * t265 + t255 * t268;
t287 = t241 * t265 - t268 * t395;
t181 = -pkin(4) * t324 + t265 * t346;
t286 = qJDD(1) * t405 + t332;
t44 = pkin(5) * t265 + pkin(9) * t172 + t66;
t170 = t206 * t268;
t45 = -pkin(9) * t170 + t67;
t22 = -t263 * t45 + t403 * t44;
t23 = t263 * t44 + t403 * t45;
t285 = t410 * t260;
t94 = -t263 * t170 - t172 * t403;
t105 = pkin(8) * t324 + t130;
t153 = t261 * t173;
t83 = t153 + (t268 * t314 + t334) * qJD(3);
t24 = t267 * t105 + t119 * t344 - t133 * t345 + t264 * t83;
t283 = -g(1) * t373 - t313;
t282 = qJDD(3) * t270 + t340 * t405;
t75 = t136 - t397;
t278 = t286 - t300;
t25 = -qJD(5) * t67 - t264 * t105 + t267 * t83;
t276 = (-t224 - t253) * t268 + t294 - t312;
t275 = t276 - t397;
t250 = t269 * qJ(2);
t247 = qJDD(3) * t268;
t210 = pkin(5) * t245 + t402;
t192 = qJDD(1) * t258 + 0.2e1 * t301;
t190 = qJDD(6) + t204;
t162 = -t245 * t266 + t246 * t372;
t160 = t245 * t269 + t246 * t373;
t157 = pkin(5) * t205 - t241;
t143 = -t260 * t371 + t195;
t129 = -t260 * t321 + t153;
t128 = pkin(5) * t170 + t196;
t126 = t205 * t403 + t206 * t263;
t104 = -t260 * t322 - t261 * t323 + t268 * t409;
t102 = t185 * t268 - t260 * t323 + t261 * t322;
t92 = t170 * t403 - t172 * t263;
t73 = pkin(5) * t104 + t181;
t34 = qJD(6) * t94 - t263 * t102 + t104 * t403;
t32 = t102 * t403 + t263 * t104 + t170 * t317 - t172 * t343;
t30 = t75 + t404;
t21 = -pkin(9) * t104 + t24;
t20 = pkin(5) * t347 + t102 * pkin(9) + t25;
t13 = t28 * t403 - t388;
t12 = -t263 * t28 - t331;
t10 = t26 * t403 - t388;
t4 = -qJD(6) * t23 + t20 * t403 - t263 * t21;
t3 = qJD(6) * t22 + t263 * t20 + t21 * t403;
t5 = [0, 0, 0, 0, 0, qJDD(1), t410, t300, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(2) - t410 - 0.2e1 * t385, t278, -t304 * pkin(1) - g(1) * (-t266 * pkin(1) + t250) - g(2) * t356 + t357, qJDD(1) * t259 - 0.2e1 * t301, 0.2e1 * qJD(3) * t308 - 0.2e1 * t265 * t335, -t265 * t271 + t247, t192, -t268 * t271 - t337, 0, t282 * t268 + (t278 - t365) * t265, -t282 * t265 + (t286 - t365) * t268 - t358, -t270 * t305 - t310 + t410, -g(1) * (t266 * t270 + t250) - t302 + t270 * t310 + t357 (-t199 * t348 - t367) * t261 (t379 + t380) * t268 + t291 * t348 (-t147 + t228) * t265 + (t199 * t268 - t261 * t308) * qJD(3) (-t197 * t348 - t368) * t260 (t146 - t227) * t265 + (-t197 * t268 + t260 * t308) * qJD(3), t192, t285 + (t383 + t270 * t146 + (qJD(1) * t143 + t111) * qJD(3)) * t268 + (t129 * qJD(1) + t143 * qJDD(1) + t55 - t300 * t261 + (-t180 * t260 + t197 * t270) * qJD(3)) * t265, t411 + (t382 + t270 * t147 + (-qJD(1) * t144 - t112) * qJD(3)) * t268 + (-t130 * qJD(1) - t144 * qJDD(1) - t56 + t300 * t260 + (-t180 * t261 + t199 * t270) * qJD(3)) * t265, -t129 * t199 - t130 * t197 + t143 * t147 + t144 * t146 + (-t260 * t56 - t261 * t55) * t268 + t293 * t348 + t358, t56 * t144 + t112 * t130 + t55 * t143 + t111 * t129 - g(1) * (pkin(3) * t372 - qJ(4) * t366 + t250) - t302 + (t180 * t348 - t381) * t270 + (-g(1) * t270 - g(2) * t296) * t266, t102 * t120 + t172 * t53, t102 * t121 + t104 * t120 + t170 * t53 + t172 * t54, -t102 * t233 - t120 * t347 - t172 * t204 - t265 * t53, t104 * t121 + t170 * t54, -t104 * t233 - t121 * t347 - t170 * t204 - t265 * t54, t204 * t265 + t233 * t347, -g(1) * t162 - g(2) * t160 + t104 * t132 + t121 * t181 + t170 * t75 + t196 * t54 + t204 * t66 + t233 * t25 + t265 * t9 + t347 * t35, g(1) * t161 - g(2) * t159 - t102 * t132 - t120 * t181 - t172 * t75 - t196 * t53 - t204 * t67 - t233 * t24 - t265 * t8 - t347 * t36, t102 * t35 - t104 * t36 + t120 * t25 - t121 * t24 - t170 * t8 + t172 * t9 + t53 * t66 - t54 * t67 + t358, t8 * t67 + t36 * t24 + t9 * t66 + t35 * t25 + t75 * t196 + t132 * t181 - g(1) * (t241 * t372 - t366 * t395 + t250) - g(2) * (t269 * t402 + t329) + (-g(1) * (-t402 + t270) - g(2) * t287) * t266, -t14 * t94 + t32 * t58, t14 * t92 - t15 * t94 - t32 * t62 + t34 * t58, -t14 * t265 + t190 * t94 - t225 * t32 - t347 * t58, t15 * t92 - t34 * t62, -t15 * t265 - t190 * t92 - t225 * t34 + t347 * t62, t190 * t265 + t225 * t347, -g(1) * t151 - g(2) * t149 + t10 * t347 + t128 * t15 + t190 * t22 + t2 * t265 + t225 * t4 + t30 * t92 + t34 * t68 - t62 * t73, g(1) * t150 - g(2) * t148 - t1 * t265 - t11 * t347 - t128 * t14 - t190 * t23 - t225 * t3 + t30 * t94 - t32 * t68 - t58 * t73, -t1 * t92 + t10 * t32 - t11 * t34 + t14 * t22 - t15 * t23 - t2 * t94 + t3 * t62 + t4 * t58 + t358, t1 * t23 + t11 * t3 + t2 * t22 + t10 * t4 + t30 * t128 + t68 * t73 - g(1) * (t208 * t372 + t255 * t366 + t250) - g(2) * (t269 * t210 + t329) + (-g(1) * (-t210 + t270) - g(2) * t289) * t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t272, t298 + t304, 0, 0, 0, 0, 0, 0, t265 * t352 + t247, t268 * t352 - t337, -t305, t310 + t298, 0, 0, 0, 0, 0, 0, -t258 * t339 + t368 + (-t374 + (t197 - 0.2e1 * t327) * qJD(3)) * t265, -t258 * t338 + t367 + (t376 + (t199 - 0.2e1 * t325) * qJD(3)) * t265 (qJD(1) * t199 + t265 * t146 - t197 * t347) * t261 + (qJD(1) * t197 - t265 * t147 + t199 * t347) * t260, -t381 + t295 * t265 - t293 * qJD(1) + (t180 * t265 + t268 * t292) * qJD(3) - t410, 0, 0, 0, 0, 0, 0, t121 * t348 - t169 * t204 + t233 * t362 - t268 * t54, -t120 * t348 + t171 * t204 - t233 * t363 + t268 * t53, t120 * t362 - t121 * t363 - t169 * t53 + t171 * t54, t132 * t348 - t9 * t169 - t8 * t171 - t75 * t268 + t35 * t362 + t36 * t363 - t410, 0, 0, 0, 0, 0, 0, -t268 * t15 + t91 * t190 - t225 * t387 - t348 * t62, t268 * t14 - t93 * t190 + t225 * t386 - t348 * t58, t91 * t14 - t93 * t15 - t386 * t62 - t387 * t58, t1 * t93 - t10 * t387 - t11 * t386 + t2 * t91 - t30 * t268 + t348 * t68 - t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, -t354 * t272, t335, -t330, -t336, qJDD(3) (-t309 + t253) * t268 + t312 (t309 + t254) * t265 + t313, 0, 0, t199 * t326 - t379, t260 * t146 - t147 * t261 - t291 * t351, t258 * t374 + t260 * t336 + t306 * t350, t197 * t328 + t380, -t258 * t376 + t261 * t336 + t307 * t350, -t330, pkin(3) * t146 - t382 + (-t411 + (-qJ(4) * t349 - t111) * qJD(1)) * t268 + (-qJ(4) * t339 + g(3) * t261 - t197 * t226 + (t260 * t341 - t134) * qJD(1)) * t265, pkin(3) * t147 + t383 + (t285 + (-qJ(4) * t342 + t112) * qJD(1)) * t268 + (-qJ(4) * t338 - g(3) * t260 - t199 * t226 + (t261 * t341 + t135) * qJD(1)) * t265, t134 * t199 + t135 * t197 + (qJ(4) * t146 - qJD(4) * t197 - t111 * t351 + t56) * t261 + (-qJ(4) * t147 + qJD(4) * t199 - t112 * t351 - t55) * t260 + t283, -t180 * t211 - t111 * t134 - t112 * t135 + t292 * qJD(4) + (-t136 - t280) * pkin(3) + (-t265 * t410 + t295 - t398) * qJ(4), -t120 * t360 - t53 * t206, t120 * t361 - t121 * t360 + t53 * t205 - t206 * t54, t120 * t350 + t206 * t204 + t233 * t360, t121 * t361 + t54 * t205, t121 * t350 - t205 * t204 - t233 * t361, -t233 * t350, -t158 * t121 + t132 * t361 + t137 * t204 + t75 * t205 + t233 * t389 - t241 * t54 - t246 * t280 - t35 * t350, t120 * t158 + t132 * t360 - t138 * t204 + t75 * t206 - t233 * t390 + t241 * t53 + t245 * t280 + t350 * t36, t120 * t389 - t121 * t390 + t137 * t53 - t138 * t54 - t8 * t205 - t9 * t206 - t35 * t360 - t36 * t361 + t283, g(3) * t287 - t132 * t158 + t9 * t137 + t8 * t138 - t75 * t241 + t35 * t389 + t36 * t390 - t410 * (t241 * t268 + t265 * t395) -t14 * t127 + t392 * t58, t14 * t126 - t127 * t15 + t391 * t58 - t392 * t62, t127 * t190 - t225 * t392 + t350 * t58, t15 * t126 - t391 * t62, -t126 * t190 - t225 * t391 - t350 * t62, -t225 * t350, -t10 * t350 + t30 * t126 + t157 * t15 + t49 * t190 + t225 * t393 - t240 * t280 - t318 * t62 + t391 * t68, t11 * t350 + t30 * t127 - t157 * t14 - t50 * t190 - t225 * t394 + t239 * t280 - t318 * t58 - t392 * t68, -t1 * t126 + t10 * t392 - t11 * t391 - t2 * t127 + t49 * t14 - t50 * t15 + t393 * t58 + t394 * t62 + t283, g(3) * t289 + t1 * t50 + t10 * t393 + t11 * t394 + t30 * t157 + t2 * t49 + t318 * t68 - t410 * (t208 * t268 - t255 * t265); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t306 * t351 + t303, -t307 * t351 + t359, -t197 ^ 2 - t199 ^ 2, t111 * t199 + t112 * t197 + t276, 0, 0, 0, 0, 0, 0, t54 - t417, -t53 - t416, -t420 - t421, -t35 * t120 + t121 * t36 + t275, 0, 0, 0, 0, 0, 0, t15 - t422, -t14 + t423, -t424 - t425, -t10 * t58 - t11 * t62 + t275 + t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t384, -t420 + t421, -t53 + t416, t384, -t54 - t417, t204, t120 * t132 + t36 * t233 + t408 + t9, g(1) * t160 - g(2) * t162 + t121 * t132 + t233 * t35 + t246 * t398 - t8, 0, 0, t396, t415, t414, -t396, t406, t190, -t12 * t225 + (-t120 * t62 + t190 * t403 - t225 * t343) * pkin(5) + t407, t13 * t225 + (-t120 * t58 - t190 * t263 - t225 * t317) * pkin(5) + t413, t10 * t62 - t11 * t58 - t12 * t58 - t13 * t62 + (t403 * t14 - t15 * t263 + (-t263 * t58 + t403 * t62) * qJD(6)) * pkin(5), -t10 * t12 - t11 * t13 + (t1 * t263 + t2 * t403 + t68 * t120 + (-t10 * t263 + t11 * t403) * qJD(6) + t408) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t396, t415, t414, -t396, t406, t190, t11 * t225 + t407, t10 * t225 + t413, 0, 0;];
tau_reg  = t5;
