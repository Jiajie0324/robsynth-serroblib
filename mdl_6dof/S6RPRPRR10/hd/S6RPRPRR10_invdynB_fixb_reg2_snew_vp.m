% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 20:04
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR10_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 20:03:37
% EndTime: 2019-05-05 20:04:00
% DurationCPUTime: 18.20s
% Computational Cost: add. (129361->723), mult. (275444->1078), div. (0->0), fcn. (189260->10), ass. (0->484)
t777 = sin(pkin(10));
t778 = cos(pkin(10));
t785 = cos(qJ(3));
t830 = qJD(1) * t785;
t740 = -qJD(3) * t778 + t777 * t830;
t742 = qJD(3) * t777 + t778 * t830;
t706 = t742 * t740;
t827 = qJD(1) * qJD(3);
t808 = t785 * t827;
t781 = sin(qJ(3));
t825 = qJDD(1) * t781;
t747 = t808 + t825;
t866 = -t706 + t747;
t877 = t777 * t866;
t876 = t778 * t866;
t779 = sin(qJ(6));
t780 = sin(qJ(5));
t784 = cos(qJ(5));
t696 = t740 * t784 + t742 * t780;
t698 = -t740 * t780 + t742 * t784;
t783 = cos(qJ(6));
t646 = t696 * t783 + t698 * t779;
t648 = -t696 * t779 + t698 * t783;
t580 = t648 * t646;
t743 = qJDD(5) + t747;
t789 = qJDD(6) + t743;
t870 = -t580 + t789;
t875 = t779 * t870;
t650 = t698 * t696;
t868 = -t650 + t743;
t874 = t780 * t868;
t873 = t783 * t870;
t872 = t784 * t868;
t770 = t781 * qJD(1);
t766 = t770 + qJD(5);
t683 = t766 * t696;
t809 = t781 * t827;
t823 = qJDD(1) * t785;
t748 = -t809 + t823;
t721 = qJDD(3) * t778 - t748 * t777;
t722 = qJDD(3) * t777 + t748 * t778;
t791 = qJD(5) * t696 - t721 * t780 - t722 * t784;
t603 = -t683 + t791;
t788 = qJD(1) ^ 2;
t865 = pkin(7) + pkin(1);
t871 = t788 * t865;
t760 = qJD(6) + t766;
t630 = t760 * t646;
t806 = -t721 * t784 + t780 * t722;
t626 = -qJD(5) * t698 - t806;
t790 = qJD(6) * t646 - t626 * t779 + t783 * t791;
t869 = -t630 - t790;
t867 = -t683 - t791;
t807 = -t626 * t783 - t779 * t791;
t517 = (qJD(6) - t760) * t648 + t807;
t599 = (qJD(5) - t766) * t698 + t806;
t643 = t646 ^ 2;
t644 = t648 ^ 2;
t694 = t696 ^ 2;
t695 = t698 ^ 2;
t738 = t740 ^ 2;
t739 = t742 ^ 2;
t759 = t760 ^ 2;
t765 = t766 ^ 2;
t864 = pkin(3) * t781;
t863 = qJDD(1) * pkin(1);
t826 = qJD(2) * qJD(1);
t772 = 0.2e1 * t826;
t782 = sin(qJ(1));
t786 = cos(qJ(1));
t758 = t786 * g(1) + t782 * g(2);
t774 = qJDD(1) * qJ(2);
t796 = t758 - t774;
t793 = t772 - t796;
t797 = -t748 + t809;
t798 = t747 + t808;
t661 = pkin(3) * t798 + qJ(4) * t797 + t793 - t871;
t757 = t782 * g(1) - g(2) * t786;
t800 = qJDD(2) - t757;
t792 = -t788 * qJ(2) + t800;
t723 = -qJDD(1) * t865 + t792;
t703 = -t785 * g(3) + t723 * t781;
t787 = qJD(3) ^ 2;
t799 = -qJ(4) * t785 + t864;
t794 = t788 * t799;
t665 = -t787 * pkin(3) + qJDD(3) * qJ(4) - t781 * t794 + t703;
t585 = 0.2e1 * qJD(4) * t742 - t661 * t778 + t777 * t665;
t813 = t740 * t770;
t688 = -t722 - t813;
t558 = pkin(4) * t866 + pkin(8) * t688 - t585;
t586 = -0.2e1 * qJD(4) * t740 + t661 * t777 + t665 * t778;
t795 = pkin(4) * t770 - pkin(8) * t742;
t565 = -t738 * pkin(4) + t721 * pkin(8) - t770 * t795 + t586;
t496 = -t558 * t784 + t780 * t565;
t472 = pkin(5) * t868 + pkin(9) * t603 - t496;
t497 = t558 * t780 + t565 * t784;
t803 = pkin(5) * t766 - pkin(9) * t698;
t480 = -t694 * pkin(5) + t626 * pkin(9) - t766 * t803 + t497;
t426 = -t472 * t783 + t480 * t779;
t427 = t472 * t779 + t480 * t783;
t395 = -t426 * t783 + t427 * t779;
t862 = t395 * t780;
t861 = t395 * t784;
t445 = -t496 * t784 + t497 * t780;
t860 = t445 * t777;
t859 = t445 * t778;
t702 = g(3) * t781 + t723 * t785;
t664 = qJDD(3) * pkin(3) + qJ(4) * t787 - t785 * t794 - qJDD(4) + t702;
t606 = pkin(4) * t721 + pkin(8) * t738 - t742 * t795 + t664;
t526 = pkin(5) * t626 + pkin(9) * t694 - t698 * t803 + t606;
t858 = t526 * t779;
t857 = t526 * t783;
t573 = t580 + t789;
t856 = t573 * t779;
t855 = t573 * t783;
t854 = t606 * t780;
t853 = t606 * t784;
t633 = t650 + t743;
t852 = t633 * t780;
t851 = t633 * t784;
t850 = t664 * t777;
t849 = t664 * t778;
t690 = t706 + t747;
t848 = t690 * t777;
t847 = t690 * t778;
t846 = t747 * t785;
t775 = t781 ^ 2;
t776 = t785 ^ 2;
t831 = t775 + t776;
t750 = t831 * qJDD(1);
t845 = t750 * t782;
t844 = t750 * t786;
t815 = t781 * t785 * t788;
t755 = qJDD(3) + t815;
t843 = t755 * t781;
t842 = t755 * t785;
t756 = qJDD(3) - t815;
t841 = t756 * t781;
t840 = t756 * t785;
t839 = t760 * t779;
t838 = t760 * t783;
t837 = t766 * t780;
t836 = t766 * t784;
t835 = t775 * t788;
t834 = t776 * t788;
t718 = t796 - 0.2e1 * t826 + t871;
t833 = t781 * t718;
t832 = t785 * t718;
t824 = qJDD(1) * t782;
t822 = qJDD(1) * t786;
t821 = t781 * t580;
t820 = t785 * t580;
t819 = t781 * t650;
t818 = t785 * t650;
t817 = t781 * t706;
t816 = t785 * t706;
t814 = pkin(3) * t785 + pkin(2);
t812 = t742 * t770;
t811 = t777 * t770;
t810 = t778 * t770;
t396 = t426 * t779 + t427 * t783;
t446 = t496 * t780 + t497 * t784;
t531 = t585 * t777 + t586 * t778;
t727 = -t788 * pkin(1) + t793;
t728 = -t792 + t863;
t674 = t727 * t786 - t728 * t782;
t708 = -t757 * t782 - t758 * t786;
t805 = t782 * t815;
t804 = t786 * t815;
t751 = -t782 * t788 + t822;
t802 = pkin(6) * t751 + g(3) * t782;
t752 = t786 * t788 + t824;
t801 = -pkin(6) * t752 + g(3) * t786;
t530 = -t585 * t778 + t586 * t777;
t659 = t785 * t702 + t781 * t703;
t660 = -t702 * t781 + t703 * t785;
t671 = t727 * t782 + t728 * t786;
t707 = t757 * t786 - t758 * t782;
t686 = t721 + t812;
t764 = -t787 - t834;
t763 = t787 - t834;
t762 = -t787 - t835;
t761 = -t787 + t835;
t754 = (-t775 + t776) * t788;
t753 = t831 * t788;
t749 = -0.2e1 * t809 + t823;
t746 = 0.2e1 * t808 + t825;
t744 = t831 * t827;
t726 = -t739 - t835;
t725 = -t739 + t835;
t724 = t738 - t835;
t720 = -t748 * t781 - t776 * t827;
t719 = -t775 * t827 + t846;
t715 = -t764 * t781 - t842;
t714 = t762 * t785 - t841;
t713 = t764 * t785 - t843;
t712 = -t763 * t785 - t841;
t711 = t762 * t781 + t840;
t710 = -t761 * t781 - t842;
t705 = -t753 * t786 - t845;
t704 = -t753 * t782 + t844;
t701 = -t739 + t738;
t700 = t746 * t781 - t749 * t785;
t699 = -t835 - t738;
t687 = t722 - t813;
t685 = t721 - t812;
t681 = t738 + t739;
t680 = (-t740 * t778 + t742 * t777) * t770;
t679 = (-t740 * t777 - t742 * t778) * t770;
t678 = -t695 + t765;
t677 = t694 - t765;
t676 = t713 * t782 + t749 * t786;
t675 = t711 * t782 + t746 * t786;
t673 = -t713 * t786 + t749 * t782;
t672 = -t711 * t786 + t746 * t782;
t670 = t722 * t778 - t742 * t811;
t669 = t722 * t777 + t742 * t810;
t668 = -t721 * t777 + t740 * t810;
t667 = t721 * t778 + t740 * t811;
t666 = -t695 - t765;
t662 = -t680 * t781 + t846;
t656 = t724 * t778 - t848;
t655 = -t726 * t777 - t847;
t654 = -t725 * t777 + t876;
t653 = t724 * t777 + t847;
t652 = t726 * t778 - t848;
t651 = t725 * t778 + t877;
t649 = -t695 + t694;
t645 = -pkin(2) * t753 - t660;
t642 = -t765 - t694;
t640 = t699 * t778 - t877;
t639 = t699 * t777 + t876;
t638 = pkin(2) * t713 - qJ(2) * t715 - t703;
t637 = pkin(2) * t711 - qJ(2) * t714 + t702;
t636 = -t670 * t781 + t816;
t635 = -t668 * t781 - t816;
t629 = -t644 + t759;
t628 = t643 - t759;
t625 = t686 * t778 - t688 * t777;
t624 = t685 * t778 - t687 * t777;
t623 = t686 * t777 + t688 * t778;
t622 = t685 * t777 + t687 * t778;
t621 = (-t696 * t784 + t698 * t780) * t766;
t620 = (-t696 * t780 - t698 * t784) * t766;
t618 = pkin(2) * t746 - t714 * t865 - t832;
t617 = pkin(2) * t749 - t715 * t865 + t833;
t616 = t659 * t782 - t718 * t786;
t615 = -t659 * t786 - t718 * t782;
t614 = -t644 - t759;
t613 = -t694 - t695;
t612 = t655 * t785 + t687 * t781;
t611 = -t656 * t781 + t686 * t785;
t610 = t655 * t781 - t687 * t785;
t609 = -t654 * t781 - t688 * t785;
t608 = -t624 * t781 - t701 * t785;
t607 = -qJ(4) * t652 - t849;
t605 = t640 * t785 - t685 * t781;
t604 = t640 * t781 + t685 * t785;
t598 = (qJD(5) + t766) * t698 + t806;
t597 = pkin(2) * t659 - qJ(2) * t660;
t596 = t677 * t784 - t852;
t595 = -t678 * t780 + t872;
t594 = t677 * t780 + t851;
t593 = t678 * t784 + t874;
t592 = -t698 * t837 - t784 * t791;
t591 = t698 * t836 - t780 * t791;
t590 = -t626 * t780 + t696 * t836;
t589 = t626 * t784 + t696 * t837;
t588 = t625 * t785 - t681 * t781;
t587 = t625 * t781 + t681 * t785;
t584 = -t666 * t780 - t851;
t583 = t666 * t784 - t852;
t582 = -qJ(4) * t639 - t850;
t579 = -t644 + t643;
t578 = -pkin(2) * t718 - t660 * t865;
t577 = -t759 - t643;
t576 = t642 * t784 - t874;
t575 = t642 * t780 + t872;
t571 = (-t646 * t783 + t648 * t779) * t760;
t570 = (-t646 * t779 - t648 * t783) * t760;
t569 = -t620 * t777 + t621 * t778;
t568 = t620 * t778 + t621 * t777;
t567 = t610 * t782 + t652 * t786;
t566 = -t610 * t786 + t652 * t782;
t563 = -pkin(3) * t652 + t586;
t562 = -t569 * t781 + t743 * t785;
t561 = t604 * t782 + t639 * t786;
t560 = -t604 * t786 + t639 * t782;
t559 = -pkin(3) * t639 + t585;
t555 = -t643 - t644;
t554 = t587 * t782 + t623 * t786;
t553 = -t587 * t786 + t623 * t782;
t551 = -qJD(6) * t648 - t807;
t550 = t628 * t783 - t856;
t549 = -t629 * t779 + t873;
t548 = t628 * t779 + t855;
t547 = t629 * t783 + t875;
t546 = -t599 * t784 - t603 * t780;
t545 = -t598 * t784 - t780 * t867;
t544 = -t599 * t780 + t603 * t784;
t543 = -t598 * t780 + t784 * t867;
t542 = -t614 * t779 - t855;
t541 = t614 * t783 - t856;
t540 = -pkin(8) * t583 - t853;
t539 = -t594 * t777 + t596 * t778;
t538 = -t593 * t777 + t595 * t778;
t537 = t594 * t778 + t596 * t777;
t536 = t593 * t778 + t595 * t777;
t535 = -t591 * t777 + t592 * t778;
t534 = -t589 * t777 + t590 * t778;
t533 = t591 * t778 + t592 * t777;
t532 = t589 * t778 + t590 * t777;
t529 = -t583 * t777 + t584 * t778;
t528 = t583 * t778 + t584 * t777;
t527 = -pkin(8) * t575 - t854;
t525 = t577 * t783 - t875;
t524 = t577 * t779 + t873;
t523 = -t575 * t777 + t576 * t778;
t522 = t575 * t778 + t576 * t777;
t521 = -t630 + t790;
t516 = (qJD(6) + t760) * t648 + t807;
t515 = t531 * t785 - t664 * t781;
t514 = t531 * t781 + t664 * t785;
t513 = -t648 * t839 - t783 * t790;
t512 = t648 * t838 - t779 * t790;
t511 = -t551 * t779 + t646 * t838;
t510 = t551 * t783 + t646 * t839;
t509 = -t535 * t781 + t818;
t508 = -t534 * t781 - t818;
t507 = -t570 * t780 + t571 * t784;
t506 = t570 * t784 + t571 * t780;
t505 = -qJ(4) * t623 - t530;
t504 = pkin(2) * t610 - pkin(3) * t687 - qJ(2) * t612 + qJ(4) * t655 - t850;
t503 = -pkin(4) * t867 + pkin(8) * t584 - t854;
t502 = -t539 * t781 - t599 * t785;
t501 = -t538 * t781 - t603 * t785;
t500 = t529 * t785 + t781 * t867;
t499 = t529 * t781 - t785 * t867;
t498 = -pkin(4) * t598 + pkin(8) * t576 + t853;
t494 = pkin(2) * t604 + pkin(3) * t685 - qJ(2) * t605 + qJ(4) * t640 + t849;
t493 = t523 * t785 + t598 * t781;
t492 = t523 * t781 - t598 * t785;
t491 = -t548 * t780 + t550 * t784;
t490 = -t547 * t780 + t549 * t784;
t489 = t548 * t784 + t550 * t780;
t488 = t547 * t784 + t549 * t780;
t487 = -t544 * t777 + t546 * t778;
t486 = -t543 * t777 + t545 * t778;
t485 = t544 * t778 + t546 * t777;
t484 = t543 * t778 + t545 * t777;
t483 = -t541 * t780 + t542 * t784;
t482 = t541 * t784 + t542 * t780;
t481 = -pkin(9) * t541 - t857;
t478 = -t486 * t781 - t649 * t785;
t477 = t514 * t782 + t530 * t786;
t476 = -t514 * t786 + t530 * t782;
t475 = pkin(2) * t652 - t785 * t563 - t781 * t607 - t612 * t865;
t474 = t487 * t785 + t613 * t781;
t473 = t487 * t781 - t613 * t785;
t469 = -pkin(9) * t524 - t858;
t468 = -t524 * t780 + t525 * t784;
t467 = t524 * t784 + t525 * t780;
t466 = -t517 * t783 - t521 * t779;
t465 = -t516 * t783 - t779 * t869;
t464 = -t517 * t779 + t521 * t783;
t463 = -t516 * t779 + t783 * t869;
t462 = pkin(2) * t587 + pkin(3) * t681 - qJ(2) * t588 + qJ(4) * t625 + t531;
t461 = -t512 * t780 + t513 * t784;
t460 = -t510 * t780 + t511 * t784;
t459 = t512 * t784 + t513 * t780;
t458 = t510 * t784 + t511 * t780;
t457 = pkin(2) * t639 - t785 * t559 - t781 * t582 - t605 * t865;
t456 = t499 * t782 + t528 * t786;
t455 = -t499 * t786 + t528 * t782;
t454 = -t506 * t777 + t507 * t778;
t453 = t506 * t778 + t507 * t777;
t452 = -t454 * t781 + t785 * t789;
t451 = -pkin(3) * t485 - pkin(4) * t544;
t450 = t492 * t782 + t522 * t786;
t449 = -t492 * t786 + t522 * t782;
t448 = -t781 * t505 - t588 * t865 + t623 * t814;
t447 = -pkin(3) * t528 - pkin(4) * t583 + t497;
t444 = -pkin(3) * t522 - pkin(4) * t575 + t496;
t443 = -pkin(5) * t869 + pkin(9) * t542 - t858;
t442 = -qJ(4) * t528 - t503 * t777 + t540 * t778;
t441 = pkin(4) * t606 + pkin(8) * t446;
t440 = -pkin(5) * t516 + pkin(9) * t525 + t857;
t439 = pkin(2) * t514 + pkin(3) * t664 - qJ(2) * t515 + qJ(4) * t531;
t438 = -t489 * t777 + t491 * t778;
t437 = -t488 * t777 + t490 * t778;
t436 = t489 * t778 + t491 * t777;
t435 = t488 * t778 + t490 * t777;
t434 = -qJ(4) * t522 - t498 * t777 + t527 * t778;
t433 = -t482 * t777 + t483 * t778;
t432 = t482 * t778 + t483 * t777;
t431 = -pkin(8) * t544 - t445;
t430 = t473 * t782 + t485 * t786;
t429 = -t473 * t786 + t485 * t782;
t428 = -pkin(4) * t613 + pkin(8) * t546 + t446;
t424 = -t467 * t777 + t468 * t778;
t423 = t467 * t778 + t468 * t777;
t422 = -t464 * t780 + t466 * t784;
t421 = -t463 * t780 + t465 * t784;
t420 = t464 * t784 + t466 * t780;
t419 = t463 * t784 + t465 * t780;
t418 = -t438 * t781 - t517 * t785;
t417 = -t437 * t781 - t521 * t785;
t416 = -t459 * t777 + t461 * t778;
t415 = -t458 * t777 + t460 * t778;
t414 = t459 * t778 + t461 * t777;
t413 = t458 * t778 + t460 * t777;
t412 = t433 * t785 + t781 * t869;
t411 = t433 * t781 - t785 * t869;
t410 = -t865 * t515 + (qJ(4) * t781 + t814) * t530;
t409 = -t416 * t781 + t820;
t408 = -t415 * t781 - t820;
t407 = t424 * t785 + t516 * t781;
t406 = t424 * t781 - t516 * t785;
t405 = t446 * t778 - t860;
t404 = t446 * t777 + t859;
t403 = t405 * t785 - t606 * t781;
t402 = t405 * t781 + t606 * t785;
t401 = pkin(2) * t499 - pkin(3) * t867 - qJ(2) * t500 + qJ(4) * t529 + t503 * t778 + t540 * t777;
t400 = -pkin(8) * t482 - t443 * t780 + t481 * t784;
t399 = pkin(2) * t492 - pkin(3) * t598 - qJ(2) * t493 + qJ(4) * t523 + t498 * t778 + t527 * t777;
t398 = -pkin(8) * t467 - t440 * t780 + t469 * t784;
t397 = -pkin(4) * t869 + pkin(8) * t483 + t443 * t784 + t481 * t780;
t394 = t411 * t782 + t432 * t786;
t393 = -t411 * t786 + t432 * t782;
t392 = -pkin(3) * t404 - pkin(4) * t445;
t391 = -pkin(4) * t516 + pkin(8) * t468 + t440 * t784 + t469 * t780;
t390 = -t420 * t777 + t422 * t778;
t389 = -t419 * t777 + t421 * t778;
t388 = t420 * t778 + t422 * t777;
t387 = t419 * t778 + t421 * t777;
t386 = pkin(5) * t526 + pkin(9) * t396;
t385 = -qJ(4) * t485 - t428 * t777 + t431 * t778;
t384 = -t389 * t781 - t579 * t785;
t383 = pkin(2) * t528 - t781 * t442 - t785 * t447 - t500 * t865;
t382 = t390 * t785 + t555 * t781;
t381 = t390 * t781 - t555 * t785;
t380 = t406 * t782 + t423 * t786;
t379 = -t406 * t786 + t423 * t782;
t378 = -pkin(3) * t432 - pkin(4) * t482 - pkin(5) * t541 + t427;
t377 = -pkin(9) * t464 - t395;
t376 = pkin(2) * t522 - t781 * t434 - t785 * t444 - t493 * t865;
t375 = -pkin(5) * t555 + pkin(9) * t466 + t396;
t374 = -pkin(8) * t859 - qJ(4) * t404 - t441 * t777;
t373 = t402 * t782 + t404 * t786;
t372 = -t402 * t786 + t404 * t782;
t371 = -pkin(3) * t423 - pkin(4) * t467 - pkin(5) * t524 + t426;
t370 = pkin(2) * t473 - pkin(3) * t613 - qJ(2) * t474 + qJ(4) * t487 + t428 * t778 + t431 * t777;
t369 = -pkin(3) * t388 - pkin(4) * t420 - pkin(5) * t464;
t368 = t396 * t784 - t862;
t367 = t396 * t780 + t861;
t366 = pkin(2) * t485 - t781 * t385 - t785 * t451 - t474 * t865;
t365 = -qJ(4) * t432 - t397 * t777 + t400 * t778;
t364 = t381 * t782 + t388 * t786;
t363 = -t381 * t786 + t388 * t782;
t362 = -qJ(4) * t423 - t391 * t777 + t398 * t778;
t361 = pkin(2) * t402 + pkin(3) * t606 - pkin(8) * t860 - qJ(2) * t403 + qJ(4) * t405 + t441 * t778;
t360 = -pkin(8) * t420 - t375 * t780 + t377 * t784;
t359 = -pkin(4) * t555 + pkin(8) * t422 + t375 * t784 + t377 * t780;
t358 = pkin(2) * t411 - pkin(3) * t869 - qJ(2) * t412 + qJ(4) * t433 + t397 * t778 + t400 * t777;
t357 = -t367 * t777 + t368 * t778;
t356 = t367 * t778 + t368 * t777;
t355 = pkin(2) * t406 - pkin(3) * t516 - qJ(2) * t407 + qJ(4) * t424 + t391 * t778 + t398 * t777;
t354 = -pkin(8) * t367 - pkin(9) * t861 - t386 * t780;
t353 = t357 * t785 - t526 * t781;
t352 = t357 * t781 + t526 * t785;
t351 = pkin(4) * t526 + pkin(8) * t368 - pkin(9) * t862 + t386 * t784;
t350 = pkin(2) * t404 - t781 * t374 - t785 * t392 - t403 * t865;
t349 = pkin(2) * t432 - t781 * t365 - t785 * t378 - t412 * t865;
t348 = pkin(2) * t423 - t781 * t362 - t785 * t371 - t407 * t865;
t347 = -pkin(3) * t356 - pkin(4) * t367 - pkin(5) * t395;
t346 = -qJ(4) * t388 - t359 * t777 + t360 * t778;
t345 = t352 * t782 + t356 * t786;
t344 = -t352 * t786 + t356 * t782;
t343 = pkin(2) * t381 - pkin(3) * t555 - qJ(2) * t382 + qJ(4) * t390 + t359 * t778 + t360 * t777;
t342 = -qJ(4) * t356 - t351 * t777 + t354 * t778;
t341 = pkin(2) * t388 - t781 * t346 - t785 * t369 - t382 * t865;
t340 = pkin(2) * t352 + pkin(3) * t526 - qJ(2) * t353 + qJ(4) * t357 + t351 * t778 + t354 * t777;
t339 = pkin(2) * t356 - t781 * t342 - t785 * t347 - t353 * t865;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t752, -t751, 0, t708, 0, 0, 0, 0, 0, 0, 0, t752, t751, t674, 0, 0, 0, 0, 0, 0, t675, t676, t705, t616, 0, 0, 0, 0, 0, 0, t561, t567, t554, t477, 0, 0, 0, 0, 0, 0, t450, t456, t430, t373, 0, 0, 0, 0, 0, 0, t380, t394, t364, t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t751, -t752, 0, t707, 0, 0, 0, 0, 0, 0, 0, -t751, t752, t671, 0, 0, 0, 0, 0, 0, t672, t673, t704, t615, 0, 0, 0, 0, 0, 0, t560, t566, t553, t476, 0, 0, 0, 0, 0, 0, t449, t455, t429, t372, 0, 0, 0, 0, 0, 0, t379, t393, t363, t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t714, t715, 0, t660, 0, 0, 0, 0, 0, 0, t605, t612, t588, t515, 0, 0, 0, 0, 0, 0, t493, t500, t474, t403, 0, 0, 0, 0, 0, 0, t407, t412, t382, t353; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t751, 0, -t752, 0, -t802, -t801, -t707, -pkin(6) * t707, 0, -t751, t752, 0, 0, 0, -t671, t802, t801, -pkin(6) * t671 + (-pkin(1) * t782 + qJ(2) * t786) * g(3), -t720 * t782 + t804, -t700 * t782 + t754 * t786, -t712 * t782 + t785 * t822, -t719 * t782 - t804, -t710 * t782 - t781 * t822, qJDD(3) * t786 - t744 * t782, -pkin(6) * t672 - t618 * t782 + t637 * t786, -pkin(6) * t673 - t617 * t782 + t638 * t786, -pkin(2) * t844 - pkin(6) * t704 - t645 * t782, -pkin(6) * t615 - t578 * t782 + t597 * t786, -t636 * t782 + t669 * t786, -t608 * t782 + t622 * t786, -t609 * t782 + t651 * t786, -t635 * t782 + t667 * t786, -t611 * t782 + t653 * t786, -t662 * t782 + t679 * t786, -pkin(6) * t560 - t457 * t782 + t494 * t786, -pkin(6) * t566 - t475 * t782 + t504 * t786, -pkin(6) * t553 - t448 * t782 + t462 * t786, -pkin(6) * t476 - t410 * t782 + t439 * t786, -t509 * t782 + t533 * t786, -t478 * t782 + t484 * t786, -t501 * t782 + t536 * t786, -t508 * t782 + t532 * t786, -t502 * t782 + t537 * t786, -t562 * t782 + t568 * t786, -pkin(6) * t449 - t376 * t782 + t399 * t786, -pkin(6) * t455 - t383 * t782 + t401 * t786, -pkin(6) * t429 - t366 * t782 + t370 * t786, -pkin(6) * t372 - t350 * t782 + t361 * t786, -t409 * t782 + t414 * t786, -t384 * t782 + t387 * t786, -t417 * t782 + t435 * t786, -t408 * t782 + t413 * t786, -t418 * t782 + t436 * t786, -t452 * t782 + t453 * t786, -pkin(6) * t379 - t348 * t782 + t355 * t786, -pkin(6) * t393 - t349 * t782 + t358 * t786, -pkin(6) * t363 - t341 * t782 + t343 * t786, -pkin(6) * t344 - t339 * t782 + t340 * t786; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t752, 0, t751, 0, t801, -t802, t708, pkin(6) * t708, 0, -t752, -t751, 0, 0, 0, t674, -t801, t802, pkin(6) * t674 + (pkin(1) * t786 + qJ(2) * t782) * g(3), t720 * t786 + t805, t700 * t786 + t754 * t782, t712 * t786 + t782 * t823, t719 * t786 - t805, t710 * t786 - t781 * t824, qJDD(3) * t782 + t744 * t786, pkin(6) * t675 + t618 * t786 + t637 * t782, pkin(6) * t676 + t617 * t786 + t638 * t782, -pkin(2) * t845 + pkin(6) * t705 + t645 * t786, pkin(6) * t616 + t578 * t786 + t597 * t782, t636 * t786 + t669 * t782, t608 * t786 + t622 * t782, t609 * t786 + t651 * t782, t635 * t786 + t667 * t782, t611 * t786 + t653 * t782, t662 * t786 + t679 * t782, pkin(6) * t561 + t457 * t786 + t494 * t782, pkin(6) * t567 + t475 * t786 + t504 * t782, pkin(6) * t554 + t448 * t786 + t462 * t782, pkin(6) * t477 + t410 * t786 + t439 * t782, t509 * t786 + t533 * t782, t478 * t786 + t484 * t782, t501 * t786 + t536 * t782, t508 * t786 + t532 * t782, t502 * t786 + t537 * t782, t562 * t786 + t568 * t782, pkin(6) * t450 + t376 * t786 + t399 * t782, pkin(6) * t456 + t383 * t786 + t401 * t782, pkin(6) * t430 + t366 * t786 + t370 * t782, pkin(6) * t373 + t350 * t786 + t361 * t782, t409 * t786 + t414 * t782, t384 * t786 + t387 * t782, t417 * t786 + t435 * t782, t408 * t786 + t413 * t782, t418 * t786 + t436 * t782, t452 * t786 + t453 * t782, pkin(6) * t380 + t348 * t786 + t355 * t782, pkin(6) * t394 + t349 * t786 + t358 * t782, pkin(6) * t364 + t341 * t786 + t343 * t782, pkin(6) * t345 + t339 * t786 + t340 * t782; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t757, t758, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t800 - 0.2e1 * t863, -t758 + t772 + 0.2e1 * t774, pkin(1) * t728 + qJ(2) * t727, -t797 * t785, -t746 * t785 - t749 * t781, -t763 * t781 + t840, t798 * t781, t761 * t785 - t843, 0, qJ(2) * t746 - t711 * t865 - t833, qJ(2) * t749 - t713 * t865 - t832, -qJ(2) * t753 + t750 * t865 - t659, -qJ(2) * t718 - t659 * t865, t670 * t785 + t817, t624 * t785 - t701 * t781, t654 * t785 - t688 * t781, t668 * t785 - t817, t656 * t785 + t686 * t781, t680 * t785 + t747 * t781, qJ(2) * t639 - t781 * t559 + t785 * t582 - t604 * t865, qJ(2) * t652 - t781 * t563 + t785 * t607 - t610 * t865, t785 * t505 + (qJ(2) + t864) * t623 - t865 * t587, -t865 * t514 + (qJ(2) + t799) * t530, t535 * t785 + t819, t486 * t785 - t649 * t781, t538 * t785 - t603 * t781, t534 * t785 - t819, t539 * t785 - t599 * t781, t569 * t785 + t743 * t781, qJ(2) * t522 + t785 * t434 - t781 * t444 - t492 * t865, qJ(2) * t528 + t785 * t442 - t781 * t447 - t499 * t865, qJ(2) * t485 + t785 * t385 - t781 * t451 - t473 * t865, qJ(2) * t404 + t785 * t374 - t781 * t392 - t402 * t865, t416 * t785 + t821, t389 * t785 - t579 * t781, t437 * t785 - t521 * t781, t415 * t785 - t821, t438 * t785 - t517 * t781, t454 * t785 + t781 * t789, qJ(2) * t423 + t785 * t362 - t781 * t371 - t406 * t865, qJ(2) * t432 + t785 * t365 - t781 * t378 - t411 * t865, qJ(2) * t388 + t785 * t346 - t781 * t369 - t381 * t865, qJ(2) * t356 + t785 * t342 - t781 * t347 - t352 * t865;];
tauB_reg  = t1;
