% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRRRPP4_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP4_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP4_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP4_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:02:35
% EndTime: 2019-03-09 21:02:49
% DurationCPUTime: 5.12s
% Computational Cost: add. (8218->394), mult. (20274->682), div. (0->0), fcn. (17970->8), ass. (0->183)
t133 = sin(qJ(3));
t132 = sin(qJ(4));
t135 = cos(qJ(3));
t215 = t132 * t135;
t226 = cos(qJ(4));
t155 = t133 * t226 + t215;
t216 = t132 * t133;
t227 = -pkin(9) - pkin(8);
t101 = t227 * t216;
t172 = t226 * t227;
t189 = t226 * t135;
t75 = -t189 * t227 + t101;
t54 = (t135 * t172 - t101) * qJD(3) - t75 * qJD(4);
t179 = qJD(4) * t226;
t228 = qJD(3) + qJD(4);
t71 = -qJD(3) * t189 - t135 * t179 + t216 * t228;
t231 = t71 * qJ(5) - qJD(5) * t155 + t54;
t163 = t133 * t172;
t74 = t227 * t215 + t163;
t134 = sin(qJ(2));
t205 = qJD(3) * t135;
t184 = t134 * t205;
t136 = cos(qJ(2));
t207 = qJD(2) * t136;
t187 = t133 * t207;
t230 = t184 + t187;
t127 = t133 ^ 2;
t129 = t135 ^ 2;
t210 = t127 - t129;
t177 = qJD(3) * t210;
t204 = qJD(3) * t136;
t185 = t133 * t204;
t208 = qJD(2) * t135;
t152 = t134 * t208 + t185;
t168 = pkin(2) * t134 - pkin(8) * t136;
t156 = t168 * t133;
t222 = t136 * pkin(2);
t169 = -pkin(8) * t134 - t222;
t162 = -pkin(1) + t169;
t99 = t135 * t162;
t218 = qJD(2) * t156 + qJD(3) * t99;
t55 = pkin(7) * t152 - t218;
t137 = 2 * qJD(6);
t211 = t135 * t136;
t115 = pkin(7) * t211;
t223 = pkin(7) * t133;
t191 = -pkin(3) - t223;
t192 = t227 * t135;
t225 = pkin(2) * t135;
t138 = (-t115 + (-t134 * t227 + pkin(1) + t222) * t133) * qJD(3) + (t136 * t192 + (-t191 + t225) * t134) * qJD(2);
t139 = -pkin(9) * t230 - t55;
t203 = qJD(4) * t132;
t212 = t134 * t135;
t68 = -pkin(9) * t212 + t136 * t191 + t99;
t214 = t133 * t134;
t80 = t133 * t162 + t115;
t73 = -pkin(9) * t214 + t80;
t19 = -t132 * t138 - t139 * t226 - t179 * t68 + t203 * t73;
t149 = qJD(2) * t155;
t154 = t189 - t216;
t52 = t134 * t154 * t228 + t136 * t149;
t88 = t155 * t134;
t11 = -qJ(5) * t52 - qJD(5) * t88 - t19;
t131 = sin(pkin(10));
t217 = cos(pkin(10));
t44 = t226 * t138;
t141 = -t132 * (-pkin(7) * t185 - pkin(9) * t184 + t218) + t44;
t195 = pkin(7) * t212;
t213 = t133 * t136;
t147 = t132 * (-pkin(9) * t213 - t195);
t70 = t226 * t73;
t48 = t132 * t68 + t70;
t150 = t48 * qJD(4);
t186 = t135 * t207;
t148 = t155 * qJD(3);
t72 = qJD(4) * t155 + t148;
t51 = t132 * t187 + t134 * t72 - t186 * t226;
t89 = -t132 * t214 + t134 * t189;
t9 = t51 * qJ(5) - t89 * qJD(5) - t150 + (t134 * pkin(4) - t147) * qJD(2) + t141;
t4 = t11 * t217 + t131 * t9;
t224 = pkin(4) * t131;
t140 = (-qJ(5) + t227) * t215 + (-qJ(5) * t226 + t172) * t133;
t60 = qJ(5) * t154 + t75;
t39 = t131 * t60 - t140 * t217;
t178 = t217 * t132;
t86 = (t131 * t226 + t178) * qJD(4) * pkin(3);
t221 = t39 * t86;
t58 = -t131 * t88 + t217 * t89;
t220 = t58 * t86;
t67 = t131 * t154 + t155 * t217;
t219 = t67 * t86;
t47 = -t132 * t73 + t226 * t68;
t36 = -pkin(4) * t136 - qJ(5) * t89 + t47;
t41 = -qJ(5) * t88 + t48;
t24 = t131 * t36 + t217 * t41;
t194 = t226 * pkin(3);
t120 = t194 + pkin(4);
t91 = pkin(3) * t178 + t120 * t131;
t103 = pkin(3) * t214 + pkin(7) * t134;
t128 = t134 ^ 2;
t209 = -t136 ^ 2 + t128;
t125 = qJD(2) * t134;
t206 = qJD(3) * t133;
t202 = qJD(6) * t136;
t28 = -t131 * t51 + t217 * t52;
t57 = t131 * t89 + t217 * t88;
t201 = 0.2e1 * t57 * t28;
t45 = -t131 * t71 + t217 * t72;
t66 = t131 * t155 - t154 * t217;
t200 = 0.2e1 * t66 * t45;
t199 = -0.2e1 * pkin(1) * qJD(2);
t198 = -0.2e1 * pkin(2) * qJD(3);
t197 = qJ(6) * t125 + t4;
t196 = pkin(7) * t213;
t123 = pkin(3) * t206;
t193 = pkin(3) * t203;
t122 = pkin(7) * t207;
t77 = pkin(3) * t230 + t122;
t121 = -pkin(3) * t135 - pkin(2);
t53 = -t74 * qJD(4) + (-t132 * t192 - t163) * qJD(3);
t33 = -t72 * qJ(5) + qJD(5) * t154 - t53;
t15 = t131 * t33 - t217 * t231;
t16 = t131 * t231 + t217 * t33;
t40 = t131 * t140 + t217 * t60;
t190 = t15 * t39 + t16 * t40;
t188 = t217 * pkin(4);
t183 = t135 * t204;
t182 = t133 * t205;
t181 = t134 * t207;
t61 = pkin(4) * t72 + t123;
t180 = t11 * t131 - t217 * t9;
t176 = t209 * qJD(2);
t175 = 0.2e1 * t181;
t174 = pkin(3) * t179;
t171 = t135 * t181;
t170 = t128 * t182;
t69 = pkin(4) * t88 + t103;
t124 = pkin(5) * t125;
t2 = -t124 + t180;
t29 = -t131 * t52 - t217 * t51;
t167 = t28 * t58 + t29 * t57;
t166 = t28 * t66 + t45 * t57;
t46 = -t131 * t72 - t217 * t71;
t165 = t45 * t67 + t46 * t66;
t79 = t99 - t196;
t164 = -t133 * t80 - t135 * t79;
t42 = pkin(4) * t52 + t77;
t82 = -pkin(4) * t154 + t121;
t161 = t136 * t86 - t180;
t160 = -t125 * t39 + t136 * t15;
t159 = t125 * t40 - t136 * t16;
t158 = t125 * t57 - t136 * t28;
t157 = t125 * t66 - t136 * t45;
t23 = -t131 * t41 + t217 * t36;
t153 = t15 * t58 - t16 * t57 - t28 * t40 + t29 * t39;
t90 = -pkin(3) * t131 * t132 + t120 * t217;
t87 = -t131 * t193 + t174 * t217;
t146 = 0.2e1 * t15 * t67 - 0.2e1 * t16 * t66 + 0.2e1 * t39 * t46 - 0.2e1 * t40 * t45;
t145 = t28 * t67 + t29 * t66 + t45 * t58 + t46 * t57;
t56 = -t80 * qJD(3) + (pkin(7) * t214 + t135 * t168) * qJD(2);
t142 = qJD(3) * t164 - t133 * t56 - t135 * t55;
t117 = -t188 - pkin(5);
t116 = qJ(6) + t224;
t110 = -0.2e1 * t181;
t85 = -pkin(5) - t90;
t84 = qJ(6) + t91;
t83 = qJD(6) + t87;
t81 = 0.2e1 * t86;
t76 = -t133 * t186 + t134 * t177;
t38 = pkin(5) * t66 - qJ(6) * t67 + t82;
t34 = 0.2e1 * t67 * t46;
t31 = t125 * t67 - t136 * t46;
t30 = pkin(5) * t57 - qJ(6) * t58 + t69;
t26 = 0.2e1 * t58 * t29;
t25 = 0.2e1 * t125 * t58 - 0.2e1 * t136 * t29;
t22 = pkin(5) * t136 - t23;
t21 = -qJ(6) * t136 + t24;
t20 = -t132 * t139 - t150 + t44;
t18 = pkin(5) * t45 - qJ(6) * t46 - qJD(6) * t67 + t61;
t12 = t29 * t67 + t46 * t58;
t5 = pkin(5) * t28 - qJ(6) * t29 - qJD(6) * t58 + t42;
t1 = t197 - t202;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, -0.2e1 * t176, 0, t110, 0, 0, t134 * t199, t136 * t199, 0, 0, 0.2e1 * t129 * t181 - 0.2e1 * t170, 0.2e1 * t128 * t177 - 0.4e1 * t133 * t171, 0.2e1 * t134 * t185 + 0.2e1 * t208 * t209, 0.2e1 * t127 * t181 + 0.2e1 * t170, -0.2e1 * t133 * t176 + 0.2e1 * t134 * t183, t110, 0.2e1 * t79 * t125 - 0.2e1 * t136 * t56 + 0.2e1 * (t128 * t205 + t133 * t175) * pkin(7), -0.2e1 * t80 * t125 - 0.2e1 * t136 * t55 + 0.2e1 * (-t128 * t206 + 0.2e1 * t171) * pkin(7), 0.2e1 * t164 * t207 + 0.2e1 * (t133 * t55 - t135 * t56 + (t133 * t79 - t135 * t80) * qJD(3)) * t134, 0.2e1 * pkin(7) ^ 2 * t181 - 0.2e1 * t55 * t80 + 0.2e1 * t56 * t79, -0.2e1 * t89 * t51, 0.2e1 * t51 * t88 - 0.2e1 * t52 * t89, 0.2e1 * t125 * t89 + 0.2e1 * t136 * t51, 0.2e1 * t88 * t52, -0.2e1 * t125 * t88 + 0.2e1 * t136 * t52, t110, 0.2e1 * t103 * t52 + 0.2e1 * t125 * t47 - 0.2e1 * t136 * t20 + 0.2e1 * t77 * t88, -0.2e1 * t103 * t51 - 0.2e1 * t125 * t48 - 0.2e1 * t136 * t19 + 0.2e1 * t77 * t89, 0.2e1 * t19 * t88 - 0.2e1 * t20 * t89 + 0.2e1 * t47 * t51 - 0.2e1 * t48 * t52, 0.2e1 * t103 * t77 - 0.2e1 * t19 * t48 + 0.2e1 * t20 * t47, t26, -0.2e1 * t167, t25, t201, -0.2e1 * t158, t110, 0.2e1 * t125 * t23 + 0.2e1 * t136 * t180 + 0.2e1 * t28 * t69 + 0.2e1 * t42 * t57, -0.2e1 * t125 * t24 + 0.2e1 * t136 * t4 + 0.2e1 * t29 * t69 + 0.2e1 * t42 * t58, 0.2e1 * t180 * t58 - 0.2e1 * t23 * t29 - 0.2e1 * t24 * t28 - 0.2e1 * t4 * t57, -0.2e1 * t180 * t23 + 0.2e1 * t24 * t4 + 0.2e1 * t42 * t69, t26, t25, 0.2e1 * t167, t110, 0.2e1 * t158, t201, -0.2e1 * t125 * t22 + 0.2e1 * t136 * t2 + 0.2e1 * t28 * t30 + 0.2e1 * t5 * t57, -0.2e1 * t1 * t57 + 0.2e1 * t2 * t58 - 0.2e1 * t21 * t28 + 0.2e1 * t22 * t29, -0.2e1 * t1 * t136 + 0.2e1 * t125 * t21 - 0.2e1 * t29 * t30 - 0.2e1 * t5 * t58, 0.2e1 * t1 * t21 + 0.2e1 * t2 * t22 + 0.2e1 * t30 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, 0, -t125, 0, -t122, pkin(7) * t125, 0, 0, -t76, -0.4e1 * t134 * t182 - t207 * t210, t125 * t133 - t183, t76, t152, 0 (pkin(8) * t211 + (t223 - t225) * t134) * qJD(3) + (t133 * t169 - t115) * qJD(2) (t156 + t195) * qJD(3) + (t135 * t169 + t196) * qJD(2), t142, -pkin(2) * t122 + pkin(8) * t142, -t155 * t51 - t71 * t89, -t154 * t51 - t155 * t52 + t71 * t88 - t72 * t89, t134 * t149 + t136 * t71, -t154 * t52 + t72 * t88, t125 * t154 + t136 * t72, 0, t103 * t72 + t121 * t52 + t123 * t88 + t125 * t74 - t136 * t54 - t154 * t77, -t103 * t71 - t121 * t51 + t123 * t89 - t125 * t75 - t53 * t136 + t155 * t77, -t154 * t19 - t155 * t20 + t47 * t71 - t48 * t72 + t51 * t74 - t52 * t75 + t53 * t88 - t54 * t89, t103 * t123 + t121 * t77 - t19 * t75 + t20 * t74 + t47 * t54 - t48 * t53, t12, -t145, t31, t166, -t157, 0, t28 * t82 + t42 * t66 + t45 * t69 + t57 * t61 + t160, t29 * t82 + t42 * t67 + t46 * t69 + t58 * t61 - t159, t180 * t67 - t23 * t46 - t24 * t45 - t4 * t66 + t153, -t15 * t23 + t16 * t24 + t180 * t39 + t4 * t40 + t42 * t82 + t61 * t69, t12, t31, t145, 0, t157, t166, t18 * t57 + t28 * t38 + t30 * t45 + t5 * t66 + t160, -t1 * t66 + t2 * t67 - t21 * t45 + t22 * t46 + t153, -t18 * t58 - t29 * t38 - t30 * t46 - t5 * t67 + t159, t1 * t40 + t15 * t22 + t16 * t21 + t18 * t30 + t2 * t39 + t38 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t182, -0.2e1 * t177, 0, -0.2e1 * t182, 0, 0, t133 * t198, t135 * t198, 0, 0, -0.2e1 * t155 * t71, -0.2e1 * t154 * t71 - 0.2e1 * t155 * t72, 0, -0.2e1 * t154 * t72, 0, 0, 0.2e1 * t121 * t72 - 0.2e1 * t123 * t154, 0.2e1 * pkin(3) * t133 * t148 - 0.2e1 * t121 * t71, -0.2e1 * t154 * t53 - 0.2e1 * t155 * t54 + 0.2e1 * t71 * t74 - 0.2e1 * t72 * t75, 0.2e1 * t121 * t123 - 0.2e1 * t53 * t75 + 0.2e1 * t54 * t74, t34, -0.2e1 * t165, 0, t200, 0, 0, 0.2e1 * t45 * t82 + 0.2e1 * t61 * t66, 0.2e1 * t46 * t82 + 0.2e1 * t61 * t67, t146, 0.2e1 * t61 * t82 + 0.2e1 * t190, t34, 0, 0.2e1 * t165, 0, 0, t200, 0.2e1 * t18 * t66 + 0.2e1 * t38 * t45, t146, -0.2e1 * t18 * t67 - 0.2e1 * t38 * t46, 0.2e1 * t18 * t38 + 0.2e1 * t190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134 * t206 + t186, 0, -t230, t125, t56, t55, 0, 0, 0, 0, -t51, 0, -t52, t125 (t134 * t194 - t147) * qJD(2) + (-t70 + (pkin(3) * t136 - t68) * t132) * qJD(4) + t141 (-t125 * t132 + t136 * t179) * pkin(3) + t19 (t226 * t51 - t132 * t52 + (t132 * t89 - t226 * t88) * qJD(4)) * pkin(3) (t226 * t20 - t132 * t19 + (-t132 * t47 + t226 * t48) * qJD(4)) * pkin(3), 0, 0, t29, 0, -t28, t125, t125 * t90 + t161, -t125 * t91 + t136 * t87 - t4, -t28 * t91 - t29 * t90 - t57 * t87 + t220, -t180 * t90 - t23 * t86 + t24 * t87 + t4 * t91, 0, t29, 0, t125, t28, 0, -t125 * t85 + t124 + t161, -t28 * t84 + t29 * t85 - t57 * t83 + t220, t84 * t125 + (-qJD(6) - t83) * t136 + t197, t1 * t84 + t2 * t85 + t21 * t83 + t22 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, 0, -t206, 0, -pkin(8) * t205, pkin(8) * t206, 0, 0, 0, 0, -t71, 0, -t72, 0, t54, t53 (t226 * t71 - t132 * t72 + (t132 * t155 + t154 * t226) * qJD(4)) * pkin(3) (t226 * t54 - t132 * t53 + (-t132 * t74 + t226 * t75) * qJD(4)) * pkin(3), 0, 0, t46, 0, -t45, 0, -t15, -t16, -t45 * t91 - t46 * t90 - t66 * t87 + t219, -t15 * t90 + t16 * t91 + t40 * t87 + t221, 0, t46, 0, 0, t45, 0, -t15, -t45 * t84 + t46 * t85 - t66 * t83 + t219, t16, t15 * t85 + t16 * t84 + t40 * t83 + t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t193, -0.2e1 * t174, 0, 0, 0, 0, 0, 0, 0, 0, -t81, -0.2e1 * t87, 0, -0.2e1 * t86 * t90 + 0.2e1 * t87 * t91, 0, 0, 0, 0, 0, 0, -t81, 0, 0.2e1 * t83, 0.2e1 * t83 * t84 + 0.2e1 * t85 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, 0, -t52, t125, t20, t19, 0, 0, 0, 0, t29, 0, -t28, t125, t125 * t188 - t180, -t125 * t224 - t4 (-t131 * t28 - t217 * t29) * pkin(4) (t131 * t4 - t180 * t217) * pkin(4), 0, t29, 0, t125, t28, 0, -t117 * t125 - t2, -qJD(6) * t57 - t116 * t28 + t117 * t29, t116 * t125 + t197 - 0.2e1 * t202, qJD(6) * t21 + t1 * t116 + t117 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, 0, -t72, 0, t54, t53, 0, 0, 0, 0, t46, 0, -t45, 0, -t15, -t16 (-t131 * t45 - t217 * t46) * pkin(4) (t131 * t16 - t15 * t217) * pkin(4), 0, t46, 0, 0, t45, 0, -t15, -qJD(6) * t66 - t116 * t45 + t117 * t46, t16, qJD(6) * t40 + t116 * t16 + t117 * t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t193, -t174, 0, 0, 0, 0, 0, 0, 0, 0, -t86, -t87, 0 (t131 * t87 - t217 * t86) * pkin(4), 0, 0, 0, 0, 0, 0, -t86, 0, t137 + t87, qJD(6) * t84 + t116 * t83 + t117 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t116 * t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t29, 0, t42, 0, 0, 0, 0, 0, 0, t28, 0, -t29, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t46, 0, t61, 0, 0, 0, 0, 0, 0, t45, 0, -t46, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t125, t29, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
