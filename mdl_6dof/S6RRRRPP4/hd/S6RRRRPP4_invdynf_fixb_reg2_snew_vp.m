% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP4_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:22:26
% EndTime: 2019-05-07 18:22:37
% DurationCPUTime: 12.21s
% Computational Cost: add. (63686->319), mult. (131700->388), div. (0->0), fcn. (96221->10), ass. (0->223)
t2574 = sin(qJ(2));
t2612 = qJD(1) * t2574;
t2563 = qJD(2) * t2612;
t2578 = cos(qJ(2));
t2597 = t2578 * qJDD(1);
t2592 = t2563 - t2597;
t2591 = -qJDD(3) - t2592;
t2589 = -qJDD(4) + t2591;
t2573 = sin(qJ(3));
t2577 = cos(qJ(3));
t2539 = -qJD(2) * t2577 + t2573 * t2612;
t2540 = qJD(2) * t2573 + t2577 * t2612;
t2572 = sin(qJ(4));
t2576 = cos(qJ(4));
t2521 = t2576 * t2539 + t2540 * t2572;
t2522 = -t2539 * t2572 + t2540 * t2576;
t2569 = sin(pkin(10));
t2570 = cos(pkin(10));
t2495 = t2521 * t2570 + t2569 * t2522;
t2497 = -t2521 * t2569 + t2522 * t2570;
t2608 = t2495 * t2497;
t2452 = t2589 - t2608;
t2494 = t2497 ^ 2;
t2611 = qJD(1) * t2578;
t2560 = -qJD(3) + t2611;
t2555 = -qJD(4) + t2560;
t2617 = t2555 ^ 2;
t2626 = -t2494 - t2617;
t2433 = t2452 * t2569 + t2570 * t2626;
t2435 = t2452 * t2570 - t2569 * t2626;
t2390 = t2433 * t2572 - t2435 * t2576;
t2402 = t2433 * t2576 + t2435 * t2572;
t2373 = t2390 * t2577 + t2402 * t2573;
t2596 = qJD(2) * t2611;
t2598 = t2574 * qJDD(1);
t2543 = t2596 + t2598;
t2590 = -t2573 * qJDD(2) - t2577 * t2543;
t2518 = -qJD(3) * t2539 - t2590;
t2593 = -t2577 * qJDD(2) + t2573 * t2543;
t2588 = qJD(3) * t2540 + t2593;
t2585 = -t2576 * t2518 + t2572 * t2588;
t2474 = -t2521 * qJD(4) - t2585;
t2584 = -t2572 * t2518 - t2576 * t2588;
t2583 = -t2522 * qJD(4) + t2584;
t2582 = t2570 * t2474 + t2569 * t2583;
t2607 = t2495 * t2555;
t2426 = t2582 + t2607;
t2359 = t2373 * t2578 - t2426 * t2574;
t2371 = t2390 * t2573 - t2402 * t2577;
t2575 = sin(qJ(1));
t2579 = cos(qJ(1));
t2658 = t2359 * t2575 - t2371 * t2579;
t2657 = t2359 * t2579 + t2371 * t2575;
t2357 = t2373 * t2574 + t2426 * t2578;
t2453 = t2589 + t2608;
t2462 = t2495 ^ 2;
t2625 = -t2617 - t2462;
t2631 = t2453 * t2569 + t2570 * t2625;
t2632 = -t2570 * t2453 + t2569 * t2625;
t2637 = t2572 * t2631 + t2576 * t2632;
t2638 = -t2572 * t2632 + t2576 * t2631;
t2642 = t2573 * t2638 + t2577 * t2637;
t2594 = -t2474 * t2569 + t2570 * t2583;
t2606 = t2497 * t2555;
t2586 = -t2594 - t2606;
t2641 = -t2573 * t2637 + t2577 * t2638;
t2648 = t2574 * t2586 + t2578 * t2641;
t2654 = t2575 * t2648 - t2579 * t2642;
t2653 = t2575 * t2642 + t2579 * t2648;
t2650 = t2574 * t2641 - t2578 * t2586;
t2425 = t2582 - t2607;
t2587 = t2594 - t2606;
t2623 = t2425 * t2569 + t2570 * t2587;
t2624 = -t2570 * t2425 + t2569 * t2587;
t2629 = t2572 * t2623 + t2576 * t2624;
t2630 = -t2572 * t2624 + t2576 * t2623;
t2636 = t2573 * t2630 + t2577 * t2629;
t2442 = t2494 + t2462;
t2635 = -t2573 * t2629 + t2577 * t2630;
t2643 = -t2442 * t2574 + t2578 * t2635;
t2649 = t2575 * t2643 - t2579 * t2636;
t2647 = t2575 * t2636 + t2579 * t2643;
t2644 = t2442 * t2578 + t2574 * t2635;
t2622 = qJD(2) ^ 2;
t2621 = t2521 ^ 2;
t2620 = t2522 ^ 2;
t2619 = t2539 ^ 2;
t2618 = t2540 ^ 2;
t2616 = t2560 ^ 2;
t2615 = -2 * qJD(5);
t2614 = -2 * qJD(6);
t2613 = t2578 * g(3);
t2605 = t2521 * t2522;
t2604 = t2521 * t2555;
t2603 = t2539 * t2540;
t2602 = t2539 * t2560;
t2601 = qJD(3) + t2560;
t2600 = qJD(4) + t2555;
t2552 = t2575 * g(1) - t2579 * g(2);
t2580 = qJD(1) ^ 2;
t2536 = qJDD(1) * pkin(1) + t2580 * pkin(7) + t2552;
t2500 = (-t2543 - t2596) * pkin(8) + (t2592 + t2563) * pkin(2) - t2536;
t2553 = -g(1) * t2579 - g(2) * t2575;
t2537 = -pkin(1) * t2580 + qJDD(1) * pkin(7) + t2553;
t2529 = -g(3) * t2574 + t2578 * t2537;
t2541 = (-pkin(2) * t2578 - pkin(8) * t2574) * qJD(1);
t2510 = -pkin(2) * t2622 + qJDD(2) * pkin(8) + t2541 * t2611 + t2529;
t2475 = t2577 * t2500 - t2573 * t2510;
t2515 = -t2591 - t2603;
t2444 = (-t2518 + t2602) * pkin(9) + t2515 * pkin(3) + t2475;
t2476 = t2573 * t2500 + t2577 * t2510;
t2530 = -pkin(3) * t2560 - pkin(9) * t2540;
t2446 = -pkin(3) * t2619 - pkin(9) * t2588 + t2560 * t2530 + t2476;
t2411 = t2572 * t2444 + t2576 * t2446;
t2566 = t2574 ^ 2;
t2567 = t2578 ^ 2;
t2599 = t2566 + t2567;
t2511 = -pkin(4) * t2555 - qJ(5) * t2522;
t2401 = -pkin(4) * t2621 + qJ(5) * t2583 + t2555 * t2511 + t2411;
t2410 = t2576 * t2444 - t2572 * t2446;
t2485 = -t2589 - t2605;
t2581 = (-t2474 + t2604) * qJ(5) + t2485 * pkin(4) + t2410;
t2370 = t2570 * t2401 + t2495 * t2615 + t2569 * t2581;
t2595 = t2569 * t2401 - t2570 * t2581;
t2509 = t2613 - qJDD(2) * pkin(2) - t2622 * pkin(8) + (qJD(1) * t2541 + t2537) * t2574;
t2469 = t2588 * pkin(3) - t2619 * pkin(9) + t2540 * t2530 + t2509;
t2412 = -t2583 * pkin(4) - t2621 * qJ(5) + t2522 * t2511 + qJDD(5) + t2469;
t2559 = t2578 * t2580 * t2574;
t2558 = -t2567 * t2580 - t2622;
t2557 = -t2566 * t2580 - t2622;
t2551 = -qJDD(2) + t2559;
t2550 = qJDD(2) + t2559;
t2548 = t2599 * t2580;
t2547 = -qJDD(1) * t2575 - t2579 * t2580;
t2546 = qJDD(1) * t2579 - t2575 * t2580;
t2545 = t2599 * qJDD(1);
t2544 = -0.2e1 * t2563 + t2597;
t2542 = 0.2e1 * t2596 + t2598;
t2528 = -t2574 * t2537 - t2613;
t2527 = t2551 * t2578 - t2557 * t2574;
t2526 = -t2550 * t2574 + t2558 * t2578;
t2525 = t2551 * t2574 + t2557 * t2578;
t2524 = t2550 * t2578 + t2558 * t2574;
t2523 = -t2616 - t2618;
t2520 = -t2616 - t2619;
t2514 = t2591 - t2603;
t2513 = -t2618 - t2619;
t2507 = -t2617 - t2620;
t2506 = -t2528 * t2574 + t2529 * t2578;
t2505 = t2528 * t2578 + t2529 * t2574;
t2504 = t2539 * t2601 + t2590;
t2503 = t2518 + t2602;
t2502 = -t2540 * t2601 - t2593;
t2501 = (qJD(3) - t2560) * t2540 + t2593;
t2493 = t2514 * t2577 - t2523 * t2573;
t2492 = t2514 * t2573 + t2523 * t2577;
t2491 = -t2617 - t2621;
t2487 = -t2515 * t2573 + t2520 * t2577;
t2486 = t2515 * t2577 + t2520 * t2573;
t2484 = t2589 - t2605;
t2477 = -t2620 - t2621;
t2471 = t2502 * t2577 - t2504 * t2573;
t2470 = t2502 * t2573 + t2504 * t2577;
t2468 = t2493 * t2578 + t2503 * t2574;
t2467 = t2493 * t2574 - t2503 * t2578;
t2466 = t2484 * t2576 - t2507 * t2572;
t2465 = t2484 * t2572 + t2507 * t2576;
t2464 = t2487 * t2578 + t2501 * t2574;
t2463 = t2487 * t2574 - t2501 * t2578;
t2461 = pkin(5) * t2495 - qJ(6) * t2497;
t2460 = t2521 * t2600 + t2585;
t2459 = t2474 + t2604;
t2458 = -t2522 * t2600 + t2584;
t2457 = (qJD(4) - t2555) * t2522 - t2584;
t2451 = -t2485 * t2572 + t2491 * t2576;
t2450 = t2485 * t2576 + t2491 * t2572;
t2449 = t2471 * t2578 + t2513 * t2574;
t2448 = t2471 * t2574 - t2513 * t2578;
t2440 = -t2475 * t2573 + t2476 * t2577;
t2439 = t2475 * t2577 + t2476 * t2573;
t2432 = t2440 * t2578 + t2509 * t2574;
t2431 = t2440 * t2574 - t2509 * t2578;
t2430 = -t2465 * t2573 + t2466 * t2577;
t2429 = t2465 * t2577 + t2466 * t2573;
t2421 = t2458 * t2576 - t2460 * t2572;
t2420 = t2458 * t2572 + t2460 * t2576;
t2414 = -t2450 * t2573 + t2451 * t2577;
t2413 = t2450 * t2577 + t2451 * t2573;
t2409 = t2430 * t2578 + t2459 * t2574;
t2408 = t2430 * t2574 - t2459 * t2578;
t2407 = t2414 * t2578 + t2457 * t2574;
t2406 = t2414 * t2574 - t2457 * t2578;
t2399 = -t2420 * t2573 + t2421 * t2577;
t2398 = t2420 * t2577 + t2421 * t2573;
t2387 = t2399 * t2578 + t2477 * t2574;
t2386 = t2399 * t2574 - t2477 * t2578;
t2385 = -t2410 * t2572 + t2411 * t2576;
t2384 = t2410 * t2576 + t2411 * t2572;
t2379 = t2412 - t2594 * pkin(5) + (-pkin(5) * t2555 + t2614) * t2497 - t2426 * qJ(6);
t2369 = t2497 * t2615 - t2595;
t2364 = qJDD(6) + t2589 * pkin(5) - t2617 * qJ(6) + ((2 * qJD(5)) + t2461) * t2497 + t2595;
t2363 = -pkin(5) * t2617 - qJ(6) * t2589 - t2495 * t2461 + t2555 * t2614 + t2370;
t2362 = -t2384 * t2573 + t2385 * t2577;
t2361 = t2384 * t2577 + t2385 * t2573;
t2356 = t2362 * t2578 + t2469 * t2574;
t2355 = t2362 * t2574 - t2469 * t2578;
t2350 = -t2369 * t2569 + t2370 * t2570;
t2349 = t2369 * t2570 + t2370 * t2569;
t2344 = t2363 * t2570 + t2364 * t2569;
t2343 = t2363 * t2569 - t2364 * t2570;
t2342 = -t2349 * t2572 + t2350 * t2576;
t2341 = t2349 * t2576 + t2350 * t2572;
t2340 = -t2343 * t2572 + t2344 * t2576;
t2339 = t2343 * t2576 + t2344 * t2572;
t2338 = -t2341 * t2573 + t2342 * t2577;
t2337 = t2341 * t2577 + t2342 * t2573;
t2336 = t2338 * t2578 + t2412 * t2574;
t2335 = t2338 * t2574 - t2412 * t2578;
t2334 = -t2339 * t2573 + t2340 * t2577;
t2333 = t2339 * t2577 + t2340 * t2573;
t2332 = t2334 * t2578 + t2379 * t2574;
t2331 = t2334 * t2574 - t2379 * t2578;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2547, -t2546, 0, -t2552 * t2575 + t2553 * t2579, 0, 0, 0, 0, 0, 0, t2526 * t2579 - t2544 * t2575, t2527 * t2579 + t2542 * t2575, t2545 * t2579 - t2548 * t2575, t2506 * t2579 - t2536 * t2575, 0, 0, 0, 0, 0, 0, t2464 * t2579 + t2486 * t2575, t2468 * t2579 + t2492 * t2575, t2449 * t2579 + t2470 * t2575, t2432 * t2579 + t2439 * t2575, 0, 0, 0, 0, 0, 0, t2407 * t2579 + t2413 * t2575, t2409 * t2579 + t2429 * t2575, t2387 * t2579 + t2398 * t2575, t2356 * t2579 + t2361 * t2575, 0, 0, 0, 0, 0, 0, t2653, -t2657, t2647, t2336 * t2579 + t2337 * t2575, 0, 0, 0, 0, 0, 0, t2653, t2647, t2657, t2332 * t2579 + t2333 * t2575; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2546, t2547, 0, t2552 * t2579 + t2553 * t2575, 0, 0, 0, 0, 0, 0, t2526 * t2575 + t2544 * t2579, t2527 * t2575 - t2542 * t2579, t2545 * t2575 + t2548 * t2579, t2506 * t2575 + t2536 * t2579, 0, 0, 0, 0, 0, 0, t2464 * t2575 - t2486 * t2579, t2468 * t2575 - t2492 * t2579, t2449 * t2575 - t2470 * t2579, t2432 * t2575 - t2439 * t2579, 0, 0, 0, 0, 0, 0, t2407 * t2575 - t2413 * t2579, t2409 * t2575 - t2429 * t2579, t2387 * t2575 - t2398 * t2579, t2356 * t2575 - t2361 * t2579, 0, 0, 0, 0, 0, 0, t2654, -t2658, t2649, t2336 * t2575 - t2337 * t2579, 0, 0, 0, 0, 0, 0, t2654, t2649, t2658, t2332 * t2575 - t2333 * t2579; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2524, t2525, 0, t2505, 0, 0, 0, 0, 0, 0, t2463, t2467, t2448, t2431, 0, 0, 0, 0, 0, 0, t2406, t2408, t2386, t2355, 0, 0, 0, 0, 0, 0, t2650, -t2357, t2644, t2335, 0, 0, 0, 0, 0, 0, t2650, t2644, t2357, t2331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2580, -qJDD(1), 0, t2553, 0, 0, 0, 0, 0, 0, t2526, t2527, t2545, t2506, 0, 0, 0, 0, 0, 0, t2464, t2468, t2449, t2432, 0, 0, 0, 0, 0, 0, t2407, t2409, t2387, t2356, 0, 0, 0, 0, 0, 0, t2648, -t2359, t2643, t2336, 0, 0, 0, 0, 0, 0, t2648, t2643, t2359, t2332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2580, 0, t2552, 0, 0, 0, 0, 0, 0, t2544, -t2542, t2548, t2536, 0, 0, 0, 0, 0, 0, -t2486, -t2492, -t2470, -t2439, 0, 0, 0, 0, 0, 0, -t2413, -t2429, -t2398, -t2361, 0, 0, 0, 0, 0, 0, -t2642, t2371, -t2636, -t2337, 0, 0, 0, 0, 0, 0, -t2642, -t2636, -t2371, -t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2524, t2525, 0, t2505, 0, 0, 0, 0, 0, 0, t2463, t2467, t2448, t2431, 0, 0, 0, 0, 0, 0, t2406, t2408, t2386, t2355, 0, 0, 0, 0, 0, 0, t2650, -t2357, t2644, t2335, 0, 0, 0, 0, 0, 0, t2650, t2644, t2357, t2331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2558, t2551, t2597, t2529, 0, 0, 0, 0, 0, 0, t2487, t2493, t2471, t2440, 0, 0, 0, 0, 0, 0, t2414, t2430, t2399, t2362, 0, 0, 0, 0, 0, 0, t2641, -t2373, t2635, t2338, 0, 0, 0, 0, 0, 0, t2641, t2635, t2373, t2334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2550, t2557, -t2598, t2528, 0, 0, 0, 0, 0, 0, -t2501, -t2503, -t2513, -t2509, 0, 0, 0, 0, 0, 0, -t2457, -t2459, -t2477, -t2469, 0, 0, 0, 0, 0, 0, -t2586, -t2426, t2442, -t2412, 0, 0, 0, 0, 0, 0, -t2586, t2442, t2426, -t2379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2544, t2542, -t2548, -t2536, 0, 0, 0, 0, 0, 0, t2486, t2492, t2470, t2439, 0, 0, 0, 0, 0, 0, t2413, t2429, t2398, t2361, 0, 0, 0, 0, 0, 0, t2642, -t2371, t2636, t2337, 0, 0, 0, 0, 0, 0, t2642, t2636, t2371, t2333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2520, t2514, t2502, t2476, 0, 0, 0, 0, 0, 0, t2451, t2466, t2421, t2385, 0, 0, 0, 0, 0, 0, t2638, -t2390, t2630, t2342, 0, 0, 0, 0, 0, 0, t2638, t2630, t2390, t2340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2515, t2523, t2504, t2475, 0, 0, 0, 0, 0, 0, t2450, t2465, t2420, t2384, 0, 0, 0, 0, 0, 0, t2637, t2402, t2629, t2341, 0, 0, 0, 0, 0, 0, t2637, t2629, -t2402, t2339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2501, t2503, t2513, t2509, 0, 0, 0, 0, 0, 0, t2457, t2459, t2477, t2469, 0, 0, 0, 0, 0, 0, t2586, t2426, -t2442, t2412, 0, 0, 0, 0, 0, 0, t2586, -t2442, -t2426, t2379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2491, t2484, t2458, t2411, 0, 0, 0, 0, 0, 0, t2631, t2435, t2623, t2350, 0, 0, 0, 0, 0, 0, t2631, t2623, -t2435, t2344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2485, t2507, t2460, t2410, 0, 0, 0, 0, 0, 0, t2632, t2433, t2624, t2349, 0, 0, 0, 0, 0, 0, t2632, t2624, -t2433, t2343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2457, t2459, t2477, t2469, 0, 0, 0, 0, 0, 0, t2586, t2426, -t2442, t2412, 0, 0, 0, 0, 0, 0, t2586, -t2442, -t2426, t2379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2625, t2452, t2587, t2370, 0, 0, 0, 0, 0, 0, t2625, t2587, -t2452, t2363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2453, t2626, -t2425, t2369, 0, 0, 0, 0, 0, 0, -t2453, -t2425, -t2626, -t2364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2586, t2426, -t2442, t2412, 0, 0, 0, 0, 0, 0, t2586, -t2442, -t2426, t2379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2625, t2587, -t2452, t2363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2586, -t2442, -t2426, t2379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2453, t2425, t2626, t2364;];
f_new_reg  = t1;
