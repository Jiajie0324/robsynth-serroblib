% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 18:22
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRPP4_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:19:30
% EndTime: 2019-05-07 18:20:09
% DurationCPUTime: 19.15s
% Computational Cost: add. (80625->583), mult. (167333->746), div. (0->0), fcn. (123464->10), ass. (0->384)
t366 = sin(qJ(2));
t370 = cos(qJ(2));
t365 = sin(qJ(3));
t369 = cos(qJ(3));
t432 = qJD(1) * t366;
t334 = -t369 * qJD(2) + t365 * t432;
t353 = t366 * qJDD(1);
t425 = qJD(1) * qJD(2);
t413 = t370 * t425;
t338 = t353 + t413;
t387 = -t365 * qJDD(2) - t369 * t338;
t307 = -qJD(3) * t334 - t387;
t335 = qJD(2) * t365 + t369 * t432;
t364 = sin(qJ(4));
t368 = cos(qJ(4));
t311 = t368 * t334 + t335 * t364;
t388 = t369 * qJDD(2) - t365 * t338;
t378 = -qJD(3) * t335 + t388;
t242 = -t311 * qJD(4) + t368 * t307 + t364 * t378;
t361 = sin(pkin(10));
t362 = cos(pkin(10));
t313 = -t334 * t364 + t335 * t368;
t408 = t364 * t307 - t368 * t378;
t383 = qJD(4) * t313 + t408;
t188 = t362 * t242 - t361 * t383;
t277 = t362 * t311 + t313 * t361;
t350 = qJD(1) * t370 - qJD(3);
t346 = -qJD(4) + t350;
t258 = t277 * t346;
t494 = t258 + t188;
t279 = -t311 * t361 + t313 * t362;
t230 = t279 * t277;
t352 = t366 * t425;
t424 = t370 * qJDD(1);
t339 = -t352 + t424;
t333 = -qJDD(3) + t339;
t330 = -qJDD(4) + t333;
t496 = -t230 + t330;
t455 = t496 * t361;
t276 = t279 ^ 2;
t476 = t346 ^ 2;
t491 = -t276 - t476;
t172 = t362 * t491 + t455;
t454 = t496 * t362;
t174 = -t361 * t491 + t454;
t114 = t172 * t368 + t174 * t364;
t88 = t172 * t364 - t174 * t368;
t61 = t114 * t365 + t369 * t88;
t76 = t114 * t369 - t365 * t88;
t576 = pkin(7) * (-t366 * t494 + t370 * t61) + pkin(1) * t76;
t574 = pkin(2) * t76;
t573 = pkin(8) * t76;
t572 = pkin(2) * t494 + pkin(8) * t61;
t479 = t277 ^ 2;
t255 = t479 - t476;
t179 = t255 * t361 - t454;
t183 = t255 * t362 + t455;
t121 = t179 * t368 + t183 * t364;
t124 = t179 * t364 - t183 * t368;
t259 = t279 * t346;
t409 = t242 * t361 + t362 * t383;
t160 = -t409 - t259;
t570 = t370 * t160 + t366 * (t121 * t365 + t124 * t369);
t490 = t276 - t479;
t493 = -t259 + t409;
t102 = -t493 * t361 + t362 * t494;
t456 = t494 * t361;
t106 = -t493 * t362 - t456;
t66 = t102 * t368 + t106 * t364;
t70 = -t102 * t364 + t106 * t368;
t569 = t366 * (t365 * t66 - t369 * t70) + t370 * t490;
t568 = pkin(3) * t114;
t567 = pkin(9) * t114;
t566 = -pkin(3) * t494 - pkin(9) * t88;
t565 = t365 * t70 + t369 * t66;
t563 = t121 * t369 - t124 * t365;
t495 = -t258 + t188;
t519 = t160 * t362 + t495 * t361;
t520 = t160 * t361 - t362 * t495;
t532 = t364 * t519 + t368 * t520;
t533 = -t364 * t520 + t368 * t519;
t544 = t365 * t533 + t369 * t532;
t561 = pkin(2) * t544;
t560 = pkin(8) * t544;
t192 = -t479 - t276;
t543 = -t365 * t532 + t369 * t533;
t559 = -pkin(2) * t192 + pkin(8) * t543;
t256 = -t276 + t476;
t209 = t330 + t230;
t453 = t209 * t361;
t536 = t362 * t256 - t453;
t203 = t362 * t209;
t537 = -t256 * t361 - t203;
t545 = -t364 * t536 + t368 * t537;
t546 = t364 * t537 + t368 * t536;
t558 = t365 * t545 + t369 * t546;
t557 = pkin(7) * (t192 * t366 + t370 * t543) - pkin(1) * t544;
t556 = t366 * (-t365 * t546 + t369 * t545) - t370 * t495;
t487 = -t476 - t479;
t503 = t362 * t487 + t453;
t504 = t361 * t487 - t203;
t517 = t364 * t503 + t368 * t504;
t518 = -t364 * t504 + t368 * t503;
t531 = t365 * t518 + t369 * t517;
t555 = pkin(2) * t531;
t554 = pkin(3) * t532;
t553 = pkin(4) * t172;
t552 = pkin(8) * t531;
t551 = pkin(9) * t532;
t550 = qJ(5) * t172;
t549 = qJ(5) * t174;
t530 = -t365 * t517 + t369 * t518;
t548 = -pkin(2) * t493 + pkin(8) * t530;
t547 = -pkin(3) * t192 + pkin(9) * t533;
t542 = pkin(7) * (t366 * t493 + t370 * t530) - pkin(1) * t531;
t473 = pkin(3) * t517;
t99 = pkin(4) * t520;
t541 = pkin(9) * t517;
t540 = qJ(5) * t520;
t535 = -pkin(3) * t493 + pkin(9) * t518;
t534 = -pkin(4) * t192 + qJ(5) * t519;
t526 = pkin(4) * t504;
t525 = qJ(5) * t503;
t524 = qJ(5) * t504;
t523 = qJ(6) * t494;
t372 = qJD(1) ^ 2;
t367 = sin(qJ(1));
t371 = cos(qJ(1));
t399 = g(1) * t371 + g(2) * t367;
t462 = qJDD(1) * pkin(7);
t329 = -pkin(1) * t372 - t399 + t462;
t400 = -pkin(2) * t370 - pkin(8) * t366;
t406 = t372 * t400 + t329;
t469 = t370 * g(3);
t475 = qJD(2) ^ 2;
t293 = -qJDD(2) * pkin(2) - t475 * pkin(8) + t406 * t366 + t469;
t319 = -pkin(3) * t350 - pkin(9) * t335;
t477 = t334 ^ 2;
t233 = -t378 * pkin(3) - t477 * pkin(9) + t335 * t319 + t293;
t295 = -pkin(4) * t346 - qJ(5) * t313;
t478 = t311 ^ 2;
t131 = t383 * pkin(4) - t478 * qJ(5) + t313 * t295 + qJDD(5) + t233;
t521 = pkin(5) * t409 + t131 - t523;
t281 = t313 * t311;
t489 = -t281 - t330;
t510 = t364 * t489;
t507 = t368 * t489;
t440 = t346 * t362;
t420 = t277 * t440;
t385 = t361 * t409 - t420;
t441 = t346 * t361;
t398 = -t277 * t441 - t362 * t409;
t480 = t364 * t385 + t368 * t398;
t481 = -t364 * t398 + t368 * t385;
t502 = t365 * t481 + t369 * t480;
t381 = (t277 * t361 + t279 * t362) * t346;
t253 = t279 * t441;
t397 = -t253 + t420;
t482 = -t364 * t381 + t368 * t397;
t483 = t364 * t397 + t368 * t381;
t501 = t365 * t482 + t369 * t483;
t419 = t370 * t230;
t500 = t366 * (-t365 * t480 + t369 * t481) + t419;
t323 = t370 * t330;
t499 = t366 * (-t365 * t483 + t369 * t482) + t323;
t442 = t335 * t334;
t379 = -t333 - t442;
t498 = t365 * t379;
t497 = t369 * t379;
t431 = qJD(5) * t277;
t268 = -0.2e1 * t431;
t429 = qJD(6) * t346;
t492 = t268 - 0.2e1 * t429;
t298 = t311 * t346;
t224 = -t298 + t242;
t488 = t298 + t242;
t322 = t334 * t350;
t289 = t307 - t322;
t485 = pkin(5) * t209 - qJ(6) * t487 - t526;
t221 = (qJD(4) + t346) * t313 + t408;
t285 = (qJD(3) + t350) * t335 - t388;
t310 = t313 ^ 2;
t332 = t335 ^ 2;
t348 = t350 ^ 2;
t411 = t367 * g(1) - t371 * g(2);
t328 = qJDD(1) * pkin(1) + t372 * pkin(7) + t411;
t394 = -t339 + t352;
t395 = t338 + t413;
t284 = pkin(2) * t394 - pkin(8) * t395 - t328;
t470 = t366 * g(3);
t294 = -pkin(2) * t475 + qJDD(2) * pkin(8) + t370 * t406 - t470;
t244 = -t369 * t284 + t365 * t294;
t196 = t379 * pkin(3) - pkin(9) * t289 - t244;
t245 = t365 * t284 + t369 * t294;
t198 = -pkin(3) * t477 + pkin(9) * t378 + t350 * t319 + t245;
t129 = -t368 * t196 + t364 * t198;
t130 = t364 * t196 + t368 * t198;
t83 = -t129 * t368 + t130 * t364;
t474 = pkin(3) * t83;
t154 = -t221 * t364 - t224 * t368;
t472 = pkin(3) * t154;
t471 = pkin(5) * t362;
t113 = -pkin(4) * t478 - qJ(5) * t383 + t346 * t295 + t130;
t98 = pkin(4) * t489 - qJ(5) * t224 - t129;
t410 = t361 * t113 - t362 * t98;
t430 = qJD(5) * t279;
t422 = 0.2e1 * t430;
t57 = t410 + t422;
t464 = t362 * t113 + t361 * t98;
t58 = t268 + t464;
t33 = t361 * t58 - t362 * t57;
t468 = t33 * t364;
t467 = t33 * t368;
t466 = t365 * t83;
t465 = t369 * t83;
t463 = qJ(6) * t362;
t461 = t131 * t361;
t460 = t131 * t362;
t452 = t233 * t364;
t451 = t233 * t368;
t262 = -t281 + t330;
t449 = t262 * t364;
t448 = t262 * t368;
t447 = t293 * t365;
t446 = t293 * t369;
t301 = t333 - t442;
t445 = t301 * t365;
t444 = t301 * t369;
t439 = t346 * t364;
t438 = t346 * t368;
t437 = t350 * t365;
t436 = t350 * t369;
t349 = t370 * t372 * t366;
t435 = t366 * (qJDD(2) + t349);
t433 = t370 * (-t349 + qJDD(2));
t428 = qJD(3) - t350;
t226 = pkin(5) * t277 - qJ(6) * t279;
t405 = -t330 * qJ(6) - t277 * t226 + t464;
t384 = -pkin(5) * t476 + t405;
t51 = t384 + t492;
t380 = t330 * pkin(5) - qJ(6) * t476 + qJDD(6) + t410;
t53 = (0.2e1 * qJD(5) + t226) * t279 + t380;
t28 = t361 * t51 - t362 * t53;
t423 = pkin(4) * t28 - pkin(5) * t53 + qJ(6) * t51;
t421 = -t464 + t553;
t418 = t370 * t281;
t417 = t370 * t442;
t416 = -pkin(5) * t495 + qJ(6) * t160 + t99;
t34 = t361 * t57 + t362 * t58;
t17 = t34 * t364 + t467;
t32 = pkin(4) * t33;
t415 = pkin(3) * t17 + t32;
t414 = t99 + t554;
t412 = -qJ(6) * t361 - pkin(4);
t84 = t129 * t364 + t368 * t130;
t191 = t244 * t365 + t369 * t245;
t317 = t366 * t329 + t469;
t318 = t329 * t370 - t470;
t407 = t366 * t317 + t370 * t318;
t291 = -t310 - t476;
t231 = t291 * t368 + t449;
t404 = pkin(3) * t231 - t130;
t148 = t188 * t361 - t279 * t440;
t149 = t188 * t362 + t253;
t92 = t148 * t368 + t149 * t364;
t95 = -t148 * t364 + t149 * t368;
t402 = t366 * (-t365 * t92 + t369 * t95) - t419;
t401 = -t410 + t526;
t29 = t361 * t53 + t362 * t51;
t14 = t28 * t368 + t29 * t364;
t396 = pkin(3) * t14 + t423;
t393 = t244 * t369 - t245 * t365;
t392 = t416 + t554;
t391 = t421 + t568;
t389 = -pkin(1) + t400;
t271 = -t476 - t478;
t205 = t271 * t364 + t507;
t386 = pkin(3) * t205 - t129;
t382 = t401 + t473;
t377 = -pkin(5) * t491 - qJ(6) * t496 + t384 - t553;
t376 = t377 - t568;
t270 = -0.2e1 * t430;
t375 = -t226 * t279 + t270 - t380 - t485;
t373 = 0.2e1 * qJD(6) * t279 - t521;
t359 = t370 ^ 2;
t358 = t366 ^ 2;
t356 = t359 * t372;
t354 = t358 * t372;
t340 = -0.2e1 * t352 + t424;
t337 = t353 + 0.2e1 * t413;
t321 = -t332 + t348;
t320 = -t348 + t477;
t315 = t332 - t477;
t314 = -t332 - t348;
t309 = -t348 - t477;
t300 = t332 + t477;
t297 = -t310 + t476;
t296 = -t476 + t478;
t290 = t334 * t428 + t387;
t288 = t307 + t322;
t286 = -t335 * t428 + t388;
t280 = t310 - t478;
t273 = -t314 * t365 + t444;
t272 = t314 * t369 + t445;
t269 = 0.2e1 * t431;
t266 = t309 * t369 - t498;
t265 = t309 * t365 + t497;
t251 = (t311 * t368 - t313 * t364) * t346;
t250 = (t311 * t364 + t313 * t368) * t346;
t246 = -t310 - t478;
t239 = -t285 * t369 + t289 * t365;
t237 = t296 * t368 + t449;
t236 = -t297 * t364 + t507;
t235 = t296 * t364 - t448;
t234 = t297 * t368 + t510;
t232 = -t291 * t364 + t448;
t220 = (qJD(4) - t346) * t313 + t408;
t216 = t242 * t368 + t313 * t439;
t215 = t242 * t364 - t313 * t438;
t214 = -t311 * t438 + t364 * t383;
t213 = -t311 * t439 - t368 * t383;
t206 = t271 * t368 - t510;
t169 = -pkin(9) * t231 + t451;
t168 = -t231 * t365 + t232 * t369;
t167 = t231 * t369 + t232 * t365;
t166 = -pkin(9) * t205 + t452;
t156 = -t221 * t368 + t224 * t364;
t155 = -t220 * t368 - t364 * t488;
t153 = -t220 * t364 + t368 * t488;
t137 = -t205 * t365 + t206 * t369;
t136 = t205 * t369 + t206 * t365;
t127 = -pkin(3) * t488 + pkin(9) * t232 + t452;
t126 = -pkin(3) * t220 + pkin(9) * t206 - t451;
t111 = t460 - t550;
t110 = -t154 * t365 + t156 * t369;
t109 = t154 * t369 + t156 * t365;
t85 = t461 - t524;
t82 = -pkin(4) * t494 + t461 + t549;
t81 = -pkin(3) * t233 + pkin(9) * t84;
t80 = -pkin(4) * t493 - t460 + t525;
t75 = (-pkin(5) * t346 - 0.2e1 * qJD(6)) * t279 + t521;
t74 = -pkin(9) * t154 - t83;
t73 = -pkin(3) * t246 + pkin(9) * t156 + t84;
t64 = t365 * t95 + t369 * t92;
t55 = t373 + (-t493 + t259) * pkin(5);
t54 = pkin(5) * t259 + t373 + t523;
t49 = t369 * t84 - t466;
t48 = t365 * t84 + t465;
t47 = -qJ(6) * t192 + t53;
t46 = (-t192 - t476) * pkin(5) + t405 + t492;
t45 = -t361 * t55 - t463 * t493 - t524;
t44 = -pkin(5) * t456 + t362 * t54 + t550;
t43 = t111 * t368 - t364 * t82 - t567;
t42 = t362 * t55 + t412 * t493 + t525;
t41 = -t549 + t361 * t54 - (-pkin(4) - t471) * t494;
t40 = -t364 * t80 + t368 * t85 - t541;
t39 = t111 * t364 + t368 * t82 + t566;
t31 = t364 * t85 + t368 * t80 + t535;
t30 = -pkin(4) * t131 + qJ(5) * t34;
t26 = -t33 - t540;
t25 = t34 + t534;
t24 = -t361 * t46 + t362 * t47 - t540;
t23 = t361 * t47 + t362 * t46 + t534;
t22 = -t364 * t42 + t368 * t45 - t541;
t21 = -t364 * t41 + t368 * t44 + t567;
t20 = t364 * t45 + t368 * t42 + t535;
t19 = -qJ(5) * t28 + (pkin(5) * t361 - t463) * t75;
t18 = t34 * t368 - t468;
t16 = t364 * t44 + t368 * t41 - t566;
t15 = -t28 * t364 + t29 * t368;
t13 = qJ(5) * t29 + (t412 - t471) * t75;
t12 = -t25 * t364 + t26 * t368 - t551;
t11 = t25 * t368 + t26 * t364 + t547;
t10 = -t23 * t364 + t24 * t368 - t551;
t9 = t23 * t368 + t24 * t364 + t547;
t8 = -t17 * t365 + t18 * t369;
t7 = t17 * t369 + t18 * t365;
t6 = -pkin(9) * t17 - qJ(5) * t467 - t30 * t364;
t5 = -pkin(3) * t131 + pkin(9) * t18 - qJ(5) * t468 + t30 * t368;
t4 = -t14 * t365 + t15 * t369;
t3 = t14 * t369 + t15 * t365;
t2 = -pkin(9) * t14 - t13 * t364 + t19 * t368;
t1 = -pkin(3) * t75 + pkin(9) * t15 + t13 * t368 + t19 * t364;
t27 = [0, 0, 0, 0, 0, qJDD(1), t411, t399, 0, 0, t395 * t366, t337 * t370 + t340 * t366, t435 + t370 * (-t354 + t475), -t394 * t370, t366 * (t356 - t475) + t433, 0, t370 * t328 + pkin(1) * t340 + pkin(7) * (t370 * (-t356 - t475) - t435), -t366 * t328 - pkin(1) * t337 + pkin(7) * (-t433 - t366 * (-t354 - t475)), pkin(1) * (t354 + t356) + (t358 + t359) * t462 + t407, pkin(1) * t328 + pkin(7) * t407, t366 * (t307 * t369 + t335 * t437) - t417, t366 * (t286 * t369 - t288 * t365) - t370 * t315, t366 * (-t321 * t365 + t497) - t370 * t289, t366 * (-t334 * t436 - t365 * t378) + t417, t366 * (t320 * t369 + t445) + t370 * t285, t370 * t333 + t366 * (t334 * t369 - t335 * t365) * t350, t366 * (-pkin(8) * t265 + t447) + t370 * (-pkin(2) * t265 + t244) - pkin(1) * t265 + pkin(7) * (t266 * t370 - t286 * t366), t366 * (-pkin(8) * t272 + t446) + t370 * (-pkin(2) * t272 + t245) - pkin(1) * t272 + pkin(7) * (t273 * t370 - t290 * t366), t366 * t393 + pkin(7) * (t239 * t370 - t300 * t366) + t389 * (-t285 * t365 - t289 * t369), pkin(7) * (t191 * t370 + t293 * t366) - t389 * t393, t366 * (-t215 * t365 + t216 * t369) - t418, t366 * (-t153 * t365 + t155 * t369) - t370 * t280, t366 * (-t234 * t365 + t236 * t369) - t370 * t224, t366 * (-t213 * t365 + t214 * t369) + t418, t366 * (-t235 * t365 + t237 * t369) + t370 * t221, t366 * (-t250 * t365 + t251 * t369) + t323, t366 * (-pkin(8) * t136 - t126 * t365 + t166 * t369) + t370 * (-pkin(2) * t136 - t386) - pkin(1) * t136 + pkin(7) * (t137 * t370 + t220 * t366), t366 * (-pkin(8) * t167 - t127 * t365 + t169 * t369) + t370 * (-pkin(2) * t167 - t404) - pkin(1) * t167 + pkin(7) * (t168 * t370 + t366 * t488), t366 * (-pkin(8) * t109 - t365 * t73 + t369 * t74) + t370 * (-pkin(2) * t109 - t472) - pkin(1) * t109 + pkin(7) * (t110 * t370 + t246 * t366), t366 * (-pkin(8) * t48 - pkin(9) * t465 - t365 * t81) + t370 * (-pkin(2) * t48 - t474) - pkin(1) * t48 + pkin(7) * (t233 * t366 + t370 * t49), t402, -t569, t556, t500, -t570, t499, t366 * (-t31 * t365 + t369 * t40 - t552) + t370 * (-t382 + t422 - t555) + t542, t366 * (-t365 * t39 + t369 * t43 - t573) + t370 * (t268 - t391 - t574) - t576, t366 * (-t11 * t365 + t12 * t369 - t560) + t370 * (-t414 - t561) + t557, t366 * (-pkin(8) * t7 - t365 * t5 + t369 * t6) + t370 * (-pkin(2) * t7 - t415) - pkin(1) * t7 + pkin(7) * (t131 * t366 + t370 * t8), t402, t556, t569, t499, t570, t500, t366 * (-t20 * t365 + t22 * t369 - t552) + t370 * (-t473 + t485 + t53 - t555) + t542, t366 * (t10 * t369 - t365 * t9 - t560) + t370 * (-t392 - t561) + t557, t366 * (-t16 * t365 + t21 * t369 + t573) + t370 * (t269 - t376 + 0.2e1 * t429 + t574) + t576, t366 * (-pkin(8) * t3 - t1 * t365 + t2 * t369) + t370 * (-pkin(2) * t3 - t396) - pkin(1) * t3 + pkin(7) * (t366 * t75 + t370 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t349, t354 - t356, t353, t349, t424, qJDD(2), -t317, -t318, 0, 0, t307 * t365 - t335 * t436, t286 * t365 + t288 * t369, t321 * t369 + t498, -t334 * t437 + t369 * t378, t320 * t365 - t444, (t334 * t365 + t335 * t369) * t350, pkin(2) * t286 + pkin(8) * t266 - t446, pkin(2) * t290 + pkin(8) * t273 + t447, pkin(2) * t300 + pkin(8) * t239 + t191, -pkin(2) * t293 + pkin(8) * t191, t215 * t369 + t216 * t365, t153 * t369 + t155 * t365, t234 * t369 + t236 * t365, t213 * t369 + t214 * t365, t235 * t369 + t237 * t365, t250 * t369 + t251 * t365, -pkin(2) * t220 + pkin(8) * t137 + t126 * t369 + t166 * t365, -pkin(2) * t488 + pkin(8) * t168 + t127 * t369 + t169 * t365, -pkin(2) * t246 + pkin(8) * t110 + t365 * t74 + t369 * t73, -pkin(2) * t233 + pkin(8) * t49 - pkin(9) * t466 + t369 * t81, t64, t565, t558, t502, t563, t501, t31 * t369 + t365 * t40 + t548, t365 * t43 + t369 * t39 - t572, t11 * t369 + t12 * t365 + t559, -pkin(2) * t131 + pkin(8) * t8 + t365 * t6 + t369 * t5, t64, t558, -t565, t501, -t563, t502, t20 * t369 + t22 * t365 + t548, t10 * t365 + t369 * t9 + t559, t16 * t369 + t21 * t365 + t572, -pkin(2) * t75 + pkin(8) * t4 + t1 * t369 + t2 * t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t442, t315, t289, -t442, -t285, -t333, -t244, -t245, 0, 0, t281, t280, t224, -t281, -t221, -t330, t386, t404, t472, t474, t230, t490, t495, -t230, t160, -t330, t270 + t382, t269 + t391, t414, t415, t230, t495, -t490, -t330, -t160, -t230, t375 + t473, t392, t376 + t492, t396; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, t280, t224, -t281, -t221, -t330, -t129, -t130, 0, 0, t230, t490, t495, -t230, t160, -t330, t270 + t401, t269 + t421, t99, t32, t230, t495, -t490, -t330, -t160, -t230, t375, t416, t377 + t492, t423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t493, t494, t192, t131, 0, 0, 0, 0, 0, 0, t493, t192, -t494, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209, t495, t491, t53;];
tauJ_reg  = t27;
