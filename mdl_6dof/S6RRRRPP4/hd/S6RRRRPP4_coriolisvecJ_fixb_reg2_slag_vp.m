% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRRRPP4_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP4_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP4_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP4_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:02:45
% EndTime: 2019-03-09 21:03:03
% DurationCPUTime: 9.76s
% Computational Cost: add. (16807->637), mult. (41799->814), div. (0->0), fcn. (29705->8), ass. (0->299)
t276 = sin(qJ(3));
t277 = sin(qJ(2));
t357 = qJD(1) * t277;
t337 = t276 * t357;
t278 = cos(qJ(3));
t345 = t278 * qJD(2);
t216 = t337 - t345;
t336 = t278 * t357;
t355 = qJD(2) * t276;
t218 = t336 + t355;
t275 = sin(qJ(4));
t409 = cos(qJ(4));
t156 = t409 * t216 + t218 * t275;
t274 = sin(pkin(10));
t295 = -t275 * t216 + t218 * t409;
t389 = cos(pkin(10));
t100 = t389 * t156 + t274 * t295;
t386 = t100 ^ 2;
t427 = -t274 * t156 + t295 * t389;
t398 = t427 ^ 2;
t445 = -t386 + t398;
t266 = pkin(7) * t357;
t401 = qJD(2) * pkin(2);
t235 = t266 - t401;
t177 = pkin(3) * t216 + t235;
t119 = pkin(4) * t156 + qJD(5) + t177;
t46 = pkin(5) * t100 - qJ(6) * t427 + t119;
t444 = t100 * t46;
t279 = cos(qJ(2));
t356 = qJD(1) * t279;
t256 = -qJD(3) + t356;
t243 = -qJD(4) + t256;
t385 = t100 * t243;
t350 = qJD(3) * t277;
t327 = qJD(1) * t350;
t240 = t276 * t327;
t316 = qJD(3) + t356;
t301 = qJD(2) * t316;
t289 = t278 * t301 - t240;
t329 = t409 * qJD(4);
t344 = qJD(1) * qJD(2);
t328 = t279 * t344;
t351 = qJD(3) * t276;
t340 = qJD(2) * t351 + t276 * t328 + t278 * t327;
t348 = qJD(4) * t275;
t86 = t216 * t329 + t218 * t348 + t275 * t340 - t409 * t289;
t87 = qJD(4) * t295 + t275 * t289 + t409 * t340;
t52 = -t274 * t87 - t389 * t86;
t443 = t52 - t385;
t442 = t100 * t119;
t441 = t100 * t427;
t374 = t275 * t276;
t416 = qJD(3) + qJD(4);
t417 = t409 * qJD(3) + t329;
t166 = -t278 * t417 + t374 * t416;
t294 = t278 * t409 - t374;
t184 = t294 * t356;
t361 = t166 + t184;
t220 = t275 * t278 + t276 * t409;
t167 = t416 * t220;
t183 = t220 * t356;
t360 = t167 - t183;
t262 = t277 * t344;
t255 = pkin(5) * t262;
t423 = t427 * t46;
t440 = t255 - t423;
t326 = t274 * t86 - t389 * t87;
t397 = t243 * t427;
t439 = -t326 + t397;
t438 = pkin(5) * t427 + qJ(6) * t100;
t422 = qJ(5) * t295;
t229 = -pkin(2) * t279 - pkin(8) * t277 - pkin(1);
t209 = t229 * qJD(1);
t267 = pkin(7) * t356;
t236 = qJD(2) * pkin(8) + t267;
t162 = t278 * t209 - t236 * t276;
t133 = -pkin(9) * t218 + t162;
t124 = -pkin(3) * t256 + t133;
t163 = t209 * t276 + t236 * t278;
t134 = -pkin(9) * t216 + t163;
t129 = t275 * t134;
t72 = t409 * t124 - t129;
t61 = t72 - t422;
t58 = -pkin(4) * t243 + t61;
t431 = t156 * qJ(5);
t338 = t409 * t134;
t73 = t275 * t124 + t338;
t62 = t73 - t431;
t59 = t389 * t62;
t23 = t274 * t58 + t59;
t21 = -qJ(6) * t243 + t23;
t436 = t21 * t427;
t435 = t23 * t427;
t433 = t119 * t427;
t382 = t156 * t295;
t364 = -t361 * t274 + t360 * t389;
t363 = -t360 * t274 - t361 * t389;
t309 = -t267 + (-t276 * t356 + t351) * pkin(3);
t353 = qJD(2) * t279;
t335 = t276 * t353;
t349 = qJD(3) * t278;
t290 = t277 * t349 + t335;
t430 = -t156 ^ 2 + t295 ^ 2;
t429 = -t156 * t243 - t86;
t308 = pkin(2) * t277 - pkin(8) * t279;
t226 = t308 * qJD(2);
t210 = qJD(1) * t226;
t315 = pkin(7) * t262;
t116 = -qJD(3) * t163 + t278 * t210 + t276 * t315;
t82 = t240 * pkin(9) + (-pkin(9) * t278 * t316 + pkin(3) * t357) * qJD(2) + t116;
t115 = t209 * t349 + t276 * t210 - t236 * t351 - t278 * t315;
t93 = -pkin(9) * t340 + t115;
t321 = -t124 * t329 + t134 * t348 - t275 * t82 - t409 * t93;
t428 = t156 * t177 + t321;
t425 = -0.2e1 * t344;
t424 = pkin(4) * t295;
t410 = -pkin(9) - pkin(8);
t237 = t410 * t276;
t238 = t410 * t278;
t173 = t275 * t237 - t409 * t238;
t339 = qJD(3) * t410;
t224 = t276 * t339;
t225 = t278 * t339;
t122 = -qJD(4) * t173 - t275 * t224 + t409 * t225;
t282 = t166 * qJ(5) - t220 * qJD(5) + t122;
t223 = t308 * qJD(1);
t175 = pkin(7) * t337 + t278 * t223;
t370 = t278 * t279;
t300 = pkin(3) * t277 - pkin(9) * t370;
t141 = qJD(1) * t300 + t175;
t204 = t276 * t223;
t371 = t277 * t278;
t372 = t276 * t279;
t160 = t204 + (-pkin(7) * t371 - pkin(9) * t372) * qJD(1);
t96 = t409 * t141 - t160 * t275;
t74 = pkin(4) * t357 - qJ(5) * t184 + t96;
t121 = t409 * t224 + t275 * t225 + t237 * t329 + t238 * t348;
t75 = -qJ(5) * t167 + qJD(5) * t294 + t121;
t97 = t275 * t141 + t409 * t160;
t77 = -qJ(5) * t183 + t97;
t404 = (-t282 + t74) * t389 + (t75 - t77) * t274;
t78 = -t275 * t133 - t338;
t288 = t78 + t431;
t342 = t274 * t275 * pkin(3);
t79 = t409 * t133 - t129;
t65 = t79 - t422;
t390 = -qJD(4) * t342 - t274 * t288 + (t329 * pkin(3) - t65) * t389;
t419 = t162 * t256 + t115;
t418 = t163 * t256 - t116;
t362 = t360 * pkin(4) + t309;
t215 = t278 * t229;
t408 = pkin(7) * t276;
t161 = -pkin(9) * t371 + t215 + (-pkin(3) - t408) * t279;
t258 = pkin(7) * t370;
t182 = t276 * t229 + t258;
t373 = t276 * t277;
t168 = -pkin(9) * t373 + t182;
t111 = t275 * t161 + t409 * t168;
t26 = -qJD(4) * t73 - t275 * t93 + t409 * t82;
t415 = -t177 * t295 + t26;
t414 = -t243 * t295 - t87;
t195 = t220 * t277;
t196 = t294 * t277;
t135 = t195 * t389 + t196 * t274;
t354 = qJD(2) * t277;
t311 = t409 * t353;
t117 = t167 * t277 + t275 * t335 - t278 * t311;
t334 = t276 * t350;
t118 = t276 * t311 - t275 * t334 - t348 * t373 + (t275 * t353 + t277 * t417) * t278;
t66 = -t117 * t274 + t118 * t389;
t413 = -t243 * t66 + t279 * t326 + (qJD(1) * t135 + t100) * t354;
t153 = t220 * t274 - t294 * t389;
t412 = t243 * t364 - (qJD(2) * t153 - t100) * t357;
t154 = t220 * t389 + t274 * t294;
t411 = t100 * t363 + t153 * t52 - t154 * t326 + t364 * t427;
t15 = pkin(4) * t262 + t86 * qJ(5) - qJD(5) * t295 + t26;
t18 = -qJ(5) * t87 - qJD(5) * t156 - t321;
t407 = -t389 * t15 + t274 * t18;
t4 = t274 * t15 + t389 * t18;
t359 = t278 * t226 + t354 * t408;
t107 = t300 * qJD(2) + (-t258 + (pkin(9) * t277 - t229) * t276) * qJD(3) + t359;
t131 = t276 * t226 + t229 * t349 + (-t277 * t345 - t279 * t351) * pkin(7);
t114 = -pkin(9) * t290 + t131;
t48 = -qJD(4) * t111 + t409 * t107 - t275 * t114;
t27 = pkin(4) * t354 + t117 * qJ(5) - t196 * qJD(5) + t48;
t47 = t275 * t107 + t409 * t114 + t161 * t329 - t168 * t348;
t32 = -qJ(5) * t118 - qJD(5) * t195 + t47;
t8 = t274 * t27 + t389 * t32;
t44 = t274 * t74 + t389 * t77;
t39 = qJ(6) * t357 + t44;
t42 = t274 * t282 + t389 * t75;
t406 = t39 - t42;
t405 = pkin(5) * t357 + t404;
t403 = t42 - t44;
t402 = pkin(5) * t364 - qJ(6) * t363 - qJD(6) * t154 + t362;
t110 = t409 * t161 - t168 * t275;
t88 = -pkin(4) * t279 - qJ(5) * t196 + t110;
t94 = -qJ(5) * t195 + t111;
t56 = t274 * t88 + t389 * t94;
t396 = t274 * t62;
t30 = t274 * t61 + t59;
t395 = t30 * t427;
t394 = t121 - t97;
t393 = t122 - t96;
t392 = qJD(6) + t390;
t324 = t389 * t275;
t391 = -t274 * t65 + t389 * t288 + (t274 * t409 + t324) * qJD(4) * pkin(3);
t140 = qJ(5) * t294 + t173;
t172 = t237 * t409 + t275 * t238;
t287 = -t220 * qJ(5) + t172;
t91 = t140 * t274 - t287 * t389;
t388 = qJD(2) * t91;
t92 = t140 * t389 + t274 * t287;
t387 = qJD(2) * t92;
t379 = t216 * t256;
t378 = t218 * t216;
t377 = t218 * t256;
t376 = t235 * t276;
t375 = t256 * t276;
t369 = t279 * t256;
t281 = qJD(1) ^ 2;
t368 = t279 * t281;
t280 = qJD(2) ^ 2;
t367 = t280 * t277;
t366 = t280 * t279;
t31 = t389 * t61 - t396;
t365 = qJD(6) - t31;
t264 = pkin(3) * t409 + pkin(4);
t199 = pkin(3) * t324 + t274 * t264;
t227 = pkin(3) * t373 + t277 * pkin(7);
t272 = t277 ^ 2;
t358 = -t279 ^ 2 + t272;
t352 = qJD(3) * t216;
t347 = t218 * qJD(3);
t346 = t272 * qJD(1);
t343 = pkin(7) * t372;
t2 = -t255 + t407;
t268 = pkin(7) * t353;
t341 = t277 * t368;
t178 = pkin(3) * t290 + t268;
t265 = -pkin(3) * t278 - pkin(2);
t332 = t256 * t349;
t331 = t243 * t357;
t325 = t391 * t427;
t323 = -t235 - t401;
t322 = pkin(1) * t425;
t228 = t243 * qJD(6);
t250 = qJ(6) * t262;
t1 = t250 - t228 + t4;
t318 = t216 + t345;
t317 = -t218 + t355;
t314 = -t42 * t100 + t326 * t92 + t52 * t91;
t313 = -t243 * t31 - t4;
t312 = -t30 * t243 - t407;
t310 = t279 * t262;
t164 = pkin(4) * t195 + t227;
t126 = pkin(3) * t218 + t424;
t307 = t100 * t66 - t135 * t326;
t304 = -t386 - t398;
t185 = -pkin(4) * t294 + t265;
t95 = pkin(4) * t118 + t178;
t299 = t243 * t391 - t407;
t298 = -t326 - t397;
t152 = pkin(3) * t340 + pkin(7) * t328;
t7 = t27 * t389 - t274 * t32;
t22 = t389 * t58 - t396;
t55 = -t274 * t94 + t389 * t88;
t293 = t276 * t301;
t292 = t100 * t364 - t153 * t326;
t198 = t264 * t389 - t342;
t68 = t87 * pkin(4) + t152;
t286 = -t52 - t385;
t136 = -t274 * t195 + t196 * t389;
t67 = -t117 * t389 - t274 * t118;
t285 = t100 * t67 + t135 * t52 - t136 * t326 + t427 * t66;
t9 = -pkin(5) * t326 - t52 * qJ(6) - qJD(6) * t427 + t68;
t260 = -pkin(4) * t389 - pkin(5);
t259 = pkin(4) * t274 + qJ(6);
t189 = -pkin(5) - t198;
t188 = qJ(6) + t199;
t181 = t215 - t343;
t179 = (-t243 - t356) * t354;
t176 = -pkin(7) * t336 + t204;
t132 = -qJD(3) * t182 + t359;
t90 = pkin(5) * t153 - qJ(6) * t154 + t185;
t69 = pkin(5) * t135 - qJ(6) * t136 + t164;
t54 = t424 + t438;
t53 = t279 * pkin(5) - t55;
t50 = -qJ(6) * t279 + t56;
t49 = t126 + t438;
t38 = -t363 * t243 + (qJD(2) * t154 - t427) * t357;
t20 = t243 * pkin(5) + qJD(6) - t22;
t19 = pkin(5) * t66 - qJ(6) * t67 - qJD(6) * t136 + t95;
t12 = t136 * t52 + t427 * t67;
t11 = -t243 * t67 - t279 * t52 + (qJD(1) * t136 + t427) * t354;
t10 = t154 * t52 + t363 * t427;
t6 = -pkin(5) * t354 - t7;
t5 = qJ(6) * t354 - qJD(6) * t279 + t8;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t310, t358 * t425, t366, -0.2e1 * t310, -t367, 0, -pkin(7) * t366 + t277 * t322, pkin(7) * t367 + t279 * t322, 0, 0, t289 * t371 + (t279 * t345 - t334) * t218 (-t216 * t278 - t218 * t276) * t353 + ((t240 + t352) * t276 + (-t293 - t340 - t347) * t278) * t277, t256 * t334 + t240 * t279 + (t218 * t277 + (t346 + (-t256 - t316) * t279) * t278) * qJD(2), t216 * t290 + t340 * t373, t277 * t332 + t340 * t279 + (-t216 * t277 + (-t346 + t369) * t276) * qJD(2) (-t256 - t356) * t354, -t116 * t279 - t132 * t256 + (pkin(7) * t340 + t235 * t349) * t277 + ((pkin(7) * t216 + t376) * t279 + (t162 + (t181 + t343) * qJD(1)) * t277) * qJD(2), t131 * t256 + (-t235 * t351 - pkin(7) * t240 + (pkin(7) * t349 - qJD(1) * t182 - t163) * qJD(2)) * t277 + (t115 + (t235 * t278 + (t218 + 0.2e1 * t336) * pkin(7)) * qJD(2)) * t279, -t131 * t216 - t182 * t340 - t132 * t218 + t181 * t240 + (-t163 * t372 + (-t162 * t279 - t181 * t316) * t278) * qJD(2) + (-t115 * t276 - t116 * t278 + (t162 * t276 - t163 * t278) * qJD(3)) * t277, t115 * t182 + t116 * t181 + t131 * t163 + t132 * t162 + (t235 + t266) * t268, -t117 * t295 - t196 * t86, t117 * t156 - t118 * t295 + t195 * t86 - t196 * t87, t117 * t243 + t279 * t86 + (qJD(1) * t196 + t295) * t354, t118 * t156 + t195 * t87, t118 * t243 + t279 * t87 + (-qJD(1) * t195 - t156) * t354, t179, t118 * t177 + t152 * t195 + t156 * t178 + t227 * t87 - t243 * t48 - t26 * t279 + (qJD(1) * t110 + t72) * t354, -t117 * t177 + t152 * t196 + t295 * t178 - t227 * t86 + t243 * t47 - t321 * t279 + (-qJD(1) * t111 - t73) * t354, t110 * t86 - t111 * t87 + t117 * t72 - t118 * t73 - t156 * t47 + t195 * t321 - t196 * t26 - t295 * t48, t110 * t26 - t111 * t321 + t152 * t227 + t177 * t178 + t47 * t73 + t48 * t72, t12, -t285, t11, t307, -t413, t179, t100 * t95 + t119 * t66 + t135 * t68 - t164 * t326 - t243 * t7 + t279 * t407 + (qJD(1) * t55 + t22) * t354, t427 * t95 + t119 * t67 + t136 * t68 + t164 * t52 + t243 * t8 + t279 * t4 + (-qJD(1) * t56 - t23) * t354, -t100 * t8 - t135 * t4 + t136 * t407 - t22 * t67 - t23 * t66 + t326 * t56 - t427 * t7 - t52 * t55, t119 * t95 + t164 * t68 + t22 * t7 + t23 * t8 + t4 * t56 - t407 * t55, t12, t11, t285, t179, t413, t307, t100 * t19 + t135 * t9 + t2 * t279 + t243 * t6 + t46 * t66 - t326 * t69 + (-qJD(1) * t53 - t20) * t354, -t1 * t135 - t100 * t5 + t136 * t2 + t20 * t67 - t21 * t66 + t326 * t50 + t427 * t6 + t52 * t53, -t1 * t279 - t427 * t19 - t136 * t9 - t243 * t5 - t46 * t67 - t52 * t69 + (qJD(1) * t50 + t21) * t354, t1 * t50 + t19 * t46 + t2 * t53 + t20 * t6 + t21 * t5 + t69 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, t358 * t281, 0, t341, 0, 0, t281 * pkin(1) * t277, pkin(1) * t368, 0, 0, -t240 * t276 + (t293 - t377) * t278 (-t340 + t377) * t276 + (t289 + t379) * t278, -t332 + (t277 * t317 + t278 * t369) * qJD(1), -t216 * t375 - t278 * t340, t256 * t351 + (-t276 * t369 + t277 * t318) * qJD(1), t256 * t357, -pkin(2) * t340 + t175 * t256 + (pkin(8) * t256 * t278 + t376) * qJD(3) + ((-pkin(8) * t355 - t162) * t277 + (-pkin(7) * t318 - t376) * t279) * qJD(1), pkin(2) * t240 - t176 * t256 + (-pkin(8) * t375 + (t235 - t401) * t278) * qJD(3) + ((-pkin(8) * t345 + t163) * t277 + (pkin(7) * t317 + t278 * t323) * t279) * qJD(1), t175 * t218 + t176 * t216 + ((-t340 + t347) * pkin(8) + t419) * t278 + ((t289 + t352) * pkin(8) + t418) * t276, -t162 * t175 - t163 * t176 + t323 * t267 + (t115 * t278 - t116 * t276 + (-t162 * t278 - t163 * t276) * qJD(3)) * pkin(8), -t220 * t86 - t295 * t361, t156 * t361 - t220 * t87 - t294 * t86 - t295 * t360, t361 * t243 + (qJD(2) * t220 - t295) * t357, t156 * t360 - t294 * t87, t360 * t243 + (qJD(2) * t294 + t156) * t357, t331, -t152 * t294 + t265 * t87 - t393 * t243 + t360 * t177 + t309 * t156 + (qJD(2) * t172 - t72) * t357, t152 * t220 - t265 * t86 + t394 * t243 - t361 * t177 + t309 * t295 + (-qJD(2) * t173 + t73) * t357, -t156 * t394 + t172 * t86 - t173 * t87 - t220 * t26 - t294 * t321 - t295 * t393 - t360 * t73 + t361 * t72, t152 * t265 + t172 * t26 - t173 * t321 + t177 * t309 + t393 * t72 + t394 * t73, t10, -t411, t38, t292, t412, t331, t153 * t68 - t185 * t326 + t404 * t243 + t364 * t119 + t362 * t100 + (-t22 - t388) * t357, t154 * t68 + t185 * t52 + t403 * t243 + t363 * t119 + t362 * t427 + (t23 - t387) * t357, t100 * t44 - t153 * t4 + t154 * t407 - t22 * t363 - t23 * t364 + t404 * t427 + t314, t119 * t362 + t185 * t68 - t22 * t404 + t23 * t403 + t4 * t92 + t407 * t91, t10, t38, t411, t331, -t412, t292, t153 * t9 - t326 * t90 + t364 * t46 + t405 * t243 + t402 * t100 + (t20 - t388) * t357, -t1 * t153 + t100 * t39 + t154 * t2 + t20 * t363 - t21 * t364 + t405 * t427 + t314, -t154 * t9 - t52 * t90 - t363 * t46 + t406 * t243 - t402 * t427 + (-t21 + t387) * t357, t1 * t92 + t2 * t91 + t20 * t405 - t21 * t406 + t402 * t46 + t9 * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t378, -t216 ^ 2 + t218 ^ 2, t289 - t379, -t378, -t340 - t377, t262, -t218 * t235 - t418, t216 * t235 - t419, 0, 0, t382, t430, t429, -t382, t414, t262, t78 * t243 + (-t156 * t218 + t243 * t348 + t262 * t409) * pkin(3) + t415, -t79 * t243 + (-t218 * t295 + t243 * t329 - t262 * t275) * pkin(3) + t428, t73 * t295 + t79 * t156 - t72 * t156 + t78 * t295 + (t409 * t86 - t275 * t87 + (-t156 * t409 + t275 * t295) * qJD(4)) * pkin(3), -t72 * t78 - t73 * t79 + (t409 * t26 - t177 * t218 - t321 * t275 + (-t275 * t72 + t409 * t73) * qJD(4)) * pkin(3), t441, t445, t443, -t441, -t439, t262, -t100 * t126 + t198 * t262 + t299 - t433, -t126 * t427 - t199 * t262 + t243 * t390 - t4 + t442, -t198 * t52 + t199 * t326 + t325 + t435 + (-t22 - t390) * t100, -t119 * t126 - t198 * t407 + t199 * t4 - t22 * t391 + t23 * t390, t441, t443, -t445, t262, t439, -t441, -t100 * t49 - t189 * t262 + t299 + t440, t188 * t326 + t189 * t52 + t325 + t436 + (t20 - t392) * t100, t188 * t262 - t243 * t392 + t427 * t49 + t1 - t444, t1 * t188 + t189 * t2 + t20 * t391 + t21 * t392 - t46 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t382, t430, t429, -t382, t414, t262, -t73 * t243 + t415, -t243 * t72 + t428, 0, 0, t441, t445, t443, -t441, -t439, t262, -t433 + (-t100 * t295 + t262 * t389) * pkin(4) + t312, t442 + (-t262 * t274 - t295 * t427) * pkin(4) + t313, -t395 + t435 + (t274 * t326 - t389 * t52) * pkin(4) + (t31 - t22) * t100, t22 * t30 - t23 * t31 + (-t119 * t295 + t274 * t4 - t389 * t407) * pkin(4), t441, t443, -t445, t262, t439, -t441, -t100 * t54 - t260 * t262 + t312 + t440, t436 + t259 * t326 + t260 * t52 - t395 + (t20 - t365) * t100, t259 * t262 + t427 * t54 - 0.2e1 * t228 + t250 - t313 - t444, t1 * t259 + t2 * t260 - t20 * t30 + t21 * t365 - t46 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, -t286, t304, t100 * t23 + t22 * t427 + t68, 0, 0, 0, 0, 0, 0, t298, t304, t286, t100 * t21 - t20 * t427 + t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262 + t441, t443, -t243 ^ 2 - t398, t21 * t243 + t2 + t423;];
tauc_reg  = t3;
