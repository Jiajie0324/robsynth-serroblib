% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRRPP4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP4_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 21:02:43
% EndTime: 2019-03-09 21:03:10
% DurationCPUTime: 15.26s
% Computational Cost: add. (20454->829), mult. (46500->1011), div. (0->0), fcn. (33392->14), ass. (0->387)
t334 = cos(qJ(2));
t453 = qJD(1) * t334;
t296 = -qJD(3) + t453;
t331 = sin(qJ(2));
t436 = t331 * qJDD(1);
t309 = pkin(7) * t436;
t439 = qJD(1) * qJD(2);
t419 = t334 * t439;
t497 = qJDD(2) * pkin(2);
t217 = pkin(7) * t419 + t309 - t497;
t323 = g(3) * t334;
t332 = sin(qJ(1));
t335 = cos(qJ(1));
t398 = g(1) * t335 + g(2) * t332;
t359 = -t398 * t331 + t323;
t351 = -t217 - t359;
t571 = qJD(3) * pkin(8) * t296 + t351 + t497;
t330 = sin(qJ(3));
t454 = qJD(1) * t331;
t429 = t330 * t454;
t333 = cos(qJ(3));
t440 = t333 * qJD(2);
t246 = t429 - t440;
t428 = t333 * t454;
t452 = qJD(2) * t330;
t248 = t428 + t452;
t329 = sin(qJ(4));
t528 = cos(qJ(4));
t159 = t528 * t246 + t248 * t329;
t328 = sin(pkin(10));
t378 = -t329 * t246 + t248 * t528;
t499 = cos(pkin(10));
t102 = t499 * t159 + t328 * t378;
t492 = t102 ^ 2;
t551 = -t328 * t159 + t378 * t499;
t496 = t551 ^ 2;
t570 = -t492 + t496;
t273 = -qJD(2) * pkin(2) + pkin(7) * t454;
t183 = pkin(3) * t246 + t273;
t119 = pkin(4) * t159 + qJD(5) + t183;
t48 = pkin(5) * t102 - qJ(6) * t551 + t119;
t569 = t102 * t48;
t409 = qJD(3) + t453;
t387 = t409 * qJD(2);
t358 = t387 + t436;
t447 = qJD(3) * t331;
t418 = qJD(1) * t447;
t278 = t330 * t418;
t437 = t330 * qJDD(2);
t408 = -t278 + t437;
t345 = t358 * t333 + t408;
t291 = t330 * t436;
t555 = qJD(2) * qJD(3) + t419;
t407 = t330 * t555 + t333 * t418 + t291;
t371 = t333 * qJDD(2) - t407;
t421 = t528 * qJD(4);
t445 = qJD(4) * t329;
t76 = t246 * t421 + t248 * t445 - t329 * t371 - t528 * t345;
t77 = qJD(4) * t378 + t329 * t345 - t528 * t371;
t40 = -t328 * t77 - t499 * t76;
t284 = -qJD(4) + t296;
t491 = t102 * t284;
t568 = t40 - t491;
t567 = t102 * t119;
t566 = t102 * t551;
t479 = t329 * t330;
t539 = qJD(3) + qJD(4);
t542 = t528 * qJD(3) + t421;
t172 = -t333 * t542 + t479 * t539;
t377 = t333 * t528 - t479;
t193 = t377 * t453;
t461 = t172 + t193;
t250 = t329 * t333 + t330 * t528;
t173 = t539 * t250;
t192 = t250 * t453;
t460 = t173 - t192;
t417 = t328 * t76 - t499 * t77;
t495 = t551 * t284;
t565 = -t417 + t495;
t564 = pkin(5) * t551 + qJ(6) * t102;
t314 = t334 * qJDD(1);
t543 = -t331 * t439 + t314;
t241 = qJDD(3) - t543;
t233 = qJDD(4) + t241;
t327 = qJ(3) + qJ(4);
t315 = pkin(10) + t327;
t301 = sin(t315);
t336 = -pkin(9) - pkin(8);
t275 = t336 * t330;
t276 = t336 * t333;
t177 = t329 * t275 - t528 * t276;
t141 = qJ(5) * t377 + t177;
t176 = t275 * t528 + t329 * t276;
t362 = -t250 * qJ(5) + t176;
t93 = t141 * t499 + t328 * t362;
t563 = -t233 * t93 + t301 * t359;
t547 = qJ(5) * t378;
t402 = pkin(2) * t334 + pkin(8) * t331;
t265 = -pkin(1) - t402;
t234 = t265 * qJD(1);
t311 = pkin(7) * t453;
t274 = qJD(2) * pkin(8) + t311;
t168 = t333 * t234 - t274 * t330;
t134 = -pkin(9) * t248 + t168;
t125 = -pkin(3) * t296 + t134;
t169 = t234 * t330 + t274 * t333;
t135 = -pkin(9) * t246 + t169;
t130 = t329 * t135;
t80 = t528 * t125 - t130;
t64 = t80 - t547;
t59 = -pkin(4) * t284 + t64;
t556 = t159 * qJ(5);
t430 = t528 * t135;
t81 = t329 * t125 + t430;
t65 = t81 - t556;
t60 = t499 * t65;
t28 = t328 * t59 + t60;
t26 = -qJ(6) * t284 + t28;
t561 = t26 * t551;
t560 = t28 * t551;
t558 = t119 * t551;
t538 = t233 * pkin(5) - qJDD(6);
t532 = t48 * t551 - t538;
t488 = t159 * t378;
t464 = -t328 * t461 + t460 * t499;
t463 = -t328 * t460 - t461 * t499;
t448 = qJD(3) * t330;
t527 = pkin(3) * t330;
t403 = pkin(3) * t448 - t453 * t527 - t311;
t450 = qJD(2) * t334;
t427 = t330 * t450;
t446 = qJD(3) * t333;
t367 = t331 * t446 + t427;
t554 = -t159 ^ 2 + t378 ^ 2;
t553 = -t159 * t284 - t76;
t317 = sin(t327);
t318 = cos(t327);
t470 = t332 * t334;
t199 = t317 * t335 - t318 * t470;
t467 = t334 * t335;
t201 = t317 * t332 + t318 * t467;
t401 = pkin(2) * t331 - pkin(8) * t334;
t257 = t401 * qJD(2);
t174 = qJD(1) * t257 + qJDD(1) * t265;
t164 = t333 * t174;
t355 = t436 + t555;
t216 = pkin(7) * t543 + qJDD(2) * pkin(8);
t410 = -qJD(3) * t234 - t216;
t66 = t241 * pkin(3) + t278 * pkin(9) + t164 + (-pkin(9) * qJDD(2) + t410) * t330 + (-pkin(9) * t355 - qJD(3) * t274) * t333;
t94 = t330 * t174 + t333 * t216 + t234 * t446 - t274 * t448;
t73 = pkin(9) * t371 + t94;
t411 = -t125 * t421 + t135 * t445 - t329 * t66 - t528 * t73;
t515 = g(3) * t331;
t552 = g(1) * t201 - g(2) * t199 + t159 * t183 + t318 * t515 + t411;
t549 = pkin(4) * t378;
t431 = qJD(3) * t336;
t255 = t330 * t431;
t256 = t333 * t431;
t122 = -qJD(4) * t177 - t329 * t255 + t528 * t256;
t342 = t172 * qJ(5) - t250 * qJD(5) + t122;
t254 = t401 * qJD(1);
t179 = pkin(7) * t429 + t333 * t254;
t469 = t333 * t334;
t386 = pkin(3) * t331 - pkin(9) * t469;
t145 = qJD(1) * t386 + t179;
t227 = t330 * t254;
t474 = t331 * t333;
t477 = t330 * t334;
t165 = t227 + (-pkin(7) * t474 - pkin(9) * t477) * qJD(1);
t98 = t528 * t145 - t165 * t329;
t82 = pkin(4) * t454 - qJ(5) * t193 + t98;
t121 = t528 * t255 + t329 * t256 + t275 * t421 + t276 * t445;
t83 = -qJ(5) * t173 + qJD(5) * t377 + t121;
t99 = t329 * t145 + t528 * t165;
t85 = -qJ(5) * t192 + t99;
t512 = (-t342 + t82) * t499 + (t83 - t85) * t328;
t86 = -t329 * t134 - t430;
t363 = t86 + t556;
t435 = t328 * t329 * pkin(3);
t87 = t528 * t134 - t130;
t69 = t87 - t547;
t500 = -qJD(4) * t435 - t328 * t363 + (pkin(3) * t421 - t69) * t499;
t548 = t168 * t296 + t94;
t462 = pkin(4) * t460 + t403;
t243 = t333 * t265;
t523 = pkin(7) * t330;
t166 = -pkin(9) * t474 + t243 + (-pkin(3) - t523) * t334;
t298 = pkin(7) * t469;
t191 = t330 * t265 + t298;
t478 = t330 * t331;
t175 = -pkin(9) * t478 + t191;
t113 = t329 * t166 + t528 * t175;
t215 = t233 * qJ(6);
t264 = t284 * qJD(6);
t544 = t215 - t264;
t222 = t330 * t470 + t333 * t335;
t224 = -t330 * t467 + t332 * t333;
t540 = -g(1) * t224 + g(2) * t222;
t537 = -pkin(5) * t417 - t40 * qJ(6) - qJD(6) * t551;
t480 = t318 * t335;
t198 = t317 * t470 + t480;
t433 = t317 * t467;
t481 = t318 * t332;
t200 = -t433 + t481;
t21 = -qJD(4) * t81 - t329 * t73 + t528 * t66;
t536 = -g(1) * t200 + g(2) * t198 - t183 * t378 + t317 * t515 + t21;
t535 = -t284 * t378 - t77;
t156 = t250 * t328 - t377 * t499;
t534 = t102 * t454 - t156 * t233 + t284 * t464;
t533 = t334 * t398 + t515;
t157 = t250 * t499 + t328 * t377;
t531 = t102 * t463 + t156 * t40 - t157 * t417 + t464 * t551;
t530 = -0.2e1 * pkin(1);
t526 = pkin(3) * t333;
t525 = pkin(4) * t317;
t524 = pkin(5) * t301;
t522 = pkin(8) * t241;
t520 = g(1) * t332;
t516 = g(2) * t335;
t319 = t331 * pkin(7);
t12 = t233 * pkin(4) + t76 * qJ(5) - qJD(5) * t378 + t21;
t16 = -qJ(5) * t77 - qJD(5) * t159 - t411;
t514 = -t499 * t12 + t328 * t16;
t4 = t328 * t12 + t499 * t16;
t406 = t528 * t450;
t117 = t173 * t331 + t329 * t427 - t333 * t406;
t208 = t377 * t331;
t451 = qJD(2) * t331;
t458 = t333 * t257 + t451 * t523;
t109 = t386 * qJD(2) + (-t298 + (pkin(9) * t331 - t265) * t330) * qJD(3) + t458;
t132 = t330 * t257 + t265 * t446 + (-t331 * t440 - t334 * t448) * pkin(7);
t116 = -pkin(9) * t367 + t132;
t50 = -qJD(4) * t113 + t528 * t109 - t329 * t116;
t30 = pkin(4) * t451 + t117 * qJ(5) - t208 * qJD(5) + t50;
t425 = t330 * t447;
t118 = t330 * t406 - t329 * t425 - t445 * t478 + (t329 * t450 + t331 * t542) * t333;
t207 = t250 * t331;
t49 = t329 * t109 + t528 * t116 + t166 * t421 - t175 * t445;
t35 = -qJ(5) * t118 - qJD(5) * t207 + t49;
t9 = t328 * t30 + t499 * t35;
t513 = pkin(5) * t454 + t512;
t46 = t328 * t82 + t499 * t85;
t41 = qJ(6) * t454 + t46;
t44 = t328 * t342 + t499 * t83;
t511 = t44 - t41;
t510 = t44 - t46;
t509 = pkin(5) * t464 - qJ(6) * t463 - qJD(6) * t157 + t462;
t112 = t528 * t166 - t175 * t329;
t89 = -pkin(4) * t334 - qJ(5) * t208 + t112;
t96 = -qJ(5) * t207 + t113;
t56 = t328 * t89 + t499 * t96;
t507 = t328 * t65;
t33 = t328 * t64 + t60;
t506 = t33 * t551;
t504 = t121 - t99;
t503 = t122 - t98;
t502 = qJD(6) + t500;
t415 = t499 * t329;
t501 = -t328 * t69 + t363 * t499 + (t328 * t528 + t415) * qJD(4) * pkin(3);
t498 = pkin(7) * qJDD(1);
t486 = t169 * t296;
t485 = t246 * t296;
t484 = t248 * t246;
t483 = t248 * t296;
t302 = cos(t315);
t482 = t302 * t331;
t476 = t330 * t335;
t475 = t331 * t332;
t473 = t331 * t335;
t472 = t331 * t336;
t471 = t332 * t302;
t260 = pkin(4) * t318 + t526;
t253 = pkin(2) + t260;
t232 = t334 * t253;
t468 = t334 * t296;
t259 = t525 + t527;
t239 = t335 * t259;
t466 = t335 * t301;
t34 = t499 * t64 - t507;
t465 = qJD(6) - t34;
t459 = -t334 * t239 + t332 * t260;
t307 = pkin(3) * t528 + pkin(4);
t212 = pkin(3) * t415 + t328 * t307;
t258 = pkin(3) * t478 + t319;
t457 = t335 * pkin(1) + t332 * pkin(7);
t325 = t331 ^ 2;
t326 = t334 ^ 2;
t456 = t325 - t326;
t455 = t325 + t326;
t449 = qJD(3) * t169;
t443 = t246 * qJD(3);
t442 = t248 * qJD(3);
t441 = t273 * qJD(3);
t338 = qJD(1) ^ 2;
t432 = t331 * t338 * t334;
t184 = pkin(3) * t367 + pkin(7) * t450;
t308 = pkin(2) + t526;
t426 = t296 * t448;
t423 = t284 * t454;
t416 = t501 * t551;
t185 = t301 * t470 + t302 * t335;
t186 = t302 * t470 - t466;
t414 = -t185 * pkin(5) + qJ(6) * t186;
t187 = t334 * t466 - t471;
t188 = t301 * t332 + t302 * t467;
t413 = -t187 * pkin(5) + qJ(6) * t188;
t412 = -t259 * t470 - t260 * t335;
t405 = t331 * t419;
t299 = g(1) * t475;
t404 = -g(2) * t473 + t299;
t170 = pkin(4) * t207 + t258;
t127 = pkin(3) * t248 + t549;
t400 = g(1) * t185 - g(2) * t187;
t399 = g(1) * t186 - g(2) * t188;
t397 = pkin(5) * t302 + qJ(6) * t301;
t396 = pkin(7) * t246 + t273 * t330;
t136 = t207 * t499 + t208 * t328;
t70 = -t117 * t328 + t118 * t499;
t395 = t102 * t70 - t136 * t417;
t393 = -t492 - t496;
t389 = t308 * t334 - t472;
t194 = -pkin(4) * t377 - t308;
t97 = pkin(4) * t118 + t184;
t385 = -t334 * pkin(7) * t248 + t169 * t331;
t383 = -t417 - t495;
t379 = -pkin(7) * qJDD(2) + t439 * t530;
t8 = t30 * t499 - t328 * t35;
t27 = t499 * t59 - t507;
t55 = -t328 * t96 + t499 * t89;
t375 = t330 * t241 - t296 * t446;
t374 = t102 * t464 - t156 * t417;
t372 = pkin(1) * t338 + t398;
t337 = qJD(2) ^ 2;
t370 = pkin(7) * t337 + qJDD(1) * t530 + t516;
t211 = t307 * t499 - t435;
t369 = g(1) * t188 + g(2) * t186 + g(3) * t482 - t4;
t368 = g(1) * t187 + g(2) * t185 + t301 * t515 - t514;
t324 = -qJ(5) + t336;
t366 = t253 * t467 + t332 * t259 - t324 * t473 + t457;
t92 = t141 * t328 - t362 * t499;
t365 = g(2) * t331 * t471 - t233 * t92 + (g(1) * t473 - t323) * t302;
t321 = t335 * pkin(7);
t364 = t239 + t324 * t475 + t321 + (-pkin(1) - t232) * t332;
t361 = -t40 - t491;
t137 = -t328 * t207 + t208 * t499;
t71 = -t117 * t499 - t328 * t118;
t354 = t102 * t71 + t136 * t40 - t137 * t417 + t551 * t70;
t353 = -t284 * t34 + t369;
t352 = -t33 * t284 + t368;
t349 = t355 * t333;
t348 = t102 * t451 + t136 * t233 - t284 * t70 + t334 * t417;
t347 = t284 * t501 + t368;
t346 = -t44 * t102 + t40 * t92 + t417 * t93 - t533;
t124 = -pkin(3) * t371 + t217;
t57 = t77 * pkin(4) + qJDD(5) + t124;
t341 = t57 + t359;
t303 = -pkin(4) * t499 - pkin(5);
t300 = pkin(4) * t328 + qJ(6);
t280 = pkin(4) * t481;
t261 = qJ(6) * t482;
t225 = t330 * t332 + t333 * t467;
t223 = -t332 * t469 + t476;
t203 = -pkin(5) - t211;
t202 = qJ(6) + t212;
t190 = -pkin(7) * t477 + t243;
t180 = -pkin(7) * t428 + t227;
t167 = -t233 * t334 - t284 * t451;
t133 = -qJD(3) * t191 + t458;
t95 = -t330 * t216 + t164 - t449;
t91 = pkin(5) * t156 - qJ(6) * t157 + t194;
t74 = pkin(5) * t136 - qJ(6) * t137 + t170;
t54 = t549 + t564;
t53 = t334 * pkin(5) - t55;
t52 = -qJ(6) * t334 + t56;
t51 = t127 + t564;
t38 = t157 * t233 - t284 * t463 - t454 * t551;
t25 = t284 * pkin(5) + qJD(6) - t27;
t19 = pkin(5) * t70 - qJ(6) * t71 - qJD(6) * t137 + t97;
t18 = t137 * t40 + t551 * t71;
t17 = t137 * t233 - t284 * t71 - t334 * t40 + t451 * t551;
t13 = t157 * t40 + t463 * t551;
t7 = -pkin(5) * t451 - t8;
t6 = qJ(6) * t451 - qJD(6) * t334 + t9;
t5 = t57 + t537;
t2 = t514 - t538;
t1 = t4 + t544;
t3 = [0, 0, 0, 0, 0, qJDD(1), -t516 + t520, t398, 0, 0, qJDD(1) * t325 + 0.2e1 * t405, 0.2e1 * t314 * t331 - 0.2e1 * t439 * t456, qJDD(2) * t331 + t334 * t337, qJDD(1) * t326 - 0.2e1 * t405, qJDD(2) * t334 - t331 * t337, 0, t379 * t331 + (-t370 + t520) * t334, t331 * t370 + t334 * t379 - t299, 0.2e1 * t455 * t498 - t398, -g(1) * (-pkin(1) * t332 + t321) - g(2) * t457 + (pkin(7) ^ 2 * t455 + pkin(1) ^ 2) * qJDD(1), -t248 * t425 + (t248 * t450 + (t349 + t408) * t331) * t333 (-t246 * t333 - t248 * t330) * t450 + ((-t408 + t443) * t330 + (-t330 * t387 - t291 + t371 - t442) * t333) * t331, -t408 * t334 + (qJD(2) * t248 + t426) * t331 + ((t241 - t314) * t331 + (-t296 - t409) * t450) * t333, t246 * t367 - t371 * t478 (t296 * t452 - t371) * t334 + (-qJD(2) * t246 - t375) * t331, -t241 * t334 - t296 * t451, -g(1) * t223 - g(2) * t225 - t133 * t296 + t190 * t241 + (qJD(2) * t396 - t95) * t334 + (-pkin(7) * t371 + t168 * qJD(2) + t217 * t330 + t333 * t441) * t331, -g(1) * t222 - g(2) * t224 + t132 * t296 - t191 * t241 + t94 * t334 + (-t330 * t441 + t217 * t333 + (t333 * t436 + t408) * pkin(7)) * t331 + ((t273 * t334 + t319 * t409) * t333 - t385) * qJD(2), -t132 * t246 + t191 * t371 - t133 * t248 - t190 * t408 + t299 + (-t169 * t477 + (-t168 * t334 - t190 * t409) * t333) * qJD(2) + (-t516 + (qJD(3) * t168 - t94) * t330 + (-qJDD(1) * t190 - t449 - t95) * t333) * t331, t94 * t191 + t169 * t132 + t95 * t190 + t168 * t133 - g(1) * t321 - g(2) * (t335 * t402 + t457) - t265 * t520 + (t217 * t331 + t273 * t450) * pkin(7), -t117 * t378 - t208 * t76, t117 * t159 - t118 * t378 + t207 * t76 - t208 * t77, t117 * t284 + t208 * t233 + t334 * t76 + t378 * t451, t118 * t159 + t207 * t77, t118 * t284 - t159 * t451 - t207 * t233 + t334 * t77, t167, -g(1) * t199 - g(2) * t201 + t112 * t233 + t118 * t183 + t124 * t207 + t159 * t184 - t21 * t334 + t258 * t77 - t284 * t50 + t451 * t80, -g(1) * t198 - g(2) * t200 - t113 * t233 - t117 * t183 + t124 * t208 + t184 * t378 - t258 * t76 + t284 * t49 - t334 * t411 - t451 * t81, t112 * t76 - t113 * t77 + t117 * t80 - t118 * t81 - t159 * t49 + t207 * t411 - t208 * t21 - t378 * t50 + t404, -t411 * t113 + t81 * t49 + t21 * t112 + t80 * t50 + t124 * t258 + t183 * t184 - g(1) * (pkin(3) * t476 + t321) - g(2) * (t308 * t467 - t335 * t472 + t457) + (-g(1) * (-pkin(1) - t389) - g(2) * t527) * t332, t18, -t354, t17, t395, -t348, t167, t102 * t97 + t119 * t70 + t136 * t57 - t170 * t417 + t233 * t55 + t27 * t451 - t284 * t8 + t334 * t514 + t399, t119 * t71 + t137 * t57 + t170 * t40 - t233 * t56 - t28 * t451 + t284 * t9 + t334 * t4 + t551 * t97 - t400, -t102 * t9 - t136 * t4 + t137 * t514 - t27 * t71 - t28 * t70 - t40 * t55 + t417 * t56 - t551 * t8 + t404, -g(1) * t364 - g(2) * t366 + t119 * t97 + t57 * t170 + t27 * t8 + t28 * t9 + t4 * t56 - t514 * t55, t18, t17, t354, t167, t348, t395, t102 * t19 + t136 * t5 + t2 * t334 - t233 * t53 - t25 * t451 + t284 * t7 - t417 * t74 + t48 * t70 + t399, -t1 * t136 - t102 * t6 + t137 * t2 + t25 * t71 - t26 * t70 + t40 * t53 + t417 * t52 + t551 * t7 + t404, -t1 * t334 - t137 * t5 - t19 * t551 + t233 * t52 + t26 * t451 - t284 * t6 - t40 * t74 - t48 * t71 + t400, t1 * t52 + t26 * t6 + t5 * t74 + t48 * t19 + t2 * t53 + t25 * t7 - g(1) * (-pkin(5) * t186 - qJ(6) * t185 + t364) - g(2) * (pkin(5) * t188 + qJ(6) * t187 + t366); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t432, t456 * t338, t436, t432, t314, qJDD(2), t331 * t372 - t309 - t323, t515 + (t372 - t498) * t334, 0, 0, t408 * t330 + (t330 * t358 - t483) * t333 (-t407 + t483) * t330 + (-t278 + t349 + 0.2e1 * t437 + t485) * t333 (-t248 * t331 + t333 * t468) * qJD(1) + t375, -t330 * t485 + t333 * t371, t426 + t333 * t241 + (t246 * t331 - t330 * t468) * qJD(1), t296 * t454, -pkin(2) * t407 + t179 * t296 + (t441 - t522) * t330 + (-t168 * t331 - t334 * t396) * qJD(1) + t571 * t333, pkin(2) * t278 - t180 * t296 + t385 * qJD(1) + (-pkin(2) * t355 - t273 * t296 - t522) * t333 - t571 * t330, t179 * t248 + t180 * t246 + (-t95 + t486 + (t408 + t443) * pkin(8)) * t330 + ((t330 * t355 + t371 + t442) * pkin(8) + t548) * t333 - t533, -t273 * t311 - t168 * t179 - t169 * t180 + t351 * pkin(2) + (-t95 * t330 + t94 * t333 + (-t168 * t333 - t169 * t330) * qJD(3) - t533) * pkin(8), -t250 * t76 - t378 * t461, t159 * t461 - t250 * t77 - t377 * t76 - t378 * t460, t233 * t250 + t284 * t461 - t378 * t454, t159 * t460 - t377 * t77, t159 * t454 + t233 * t377 + t284 * t460, t423, -t124 * t377 + t159 * t403 + t176 * t233 + t183 * t460 - t284 * t503 - t308 * t77 - t318 * t359 - t454 * t80, t124 * t250 - t177 * t233 - t183 * t461 + t284 * t504 + t308 * t76 + t317 * t359 + t378 * t403 + t454 * t81, -t159 * t504 + t176 * t76 - t177 * t77 - t21 * t250 - t377 * t411 - t378 * t503 - t460 * t81 + t461 * t80 - t533, -g(3) * t389 - t124 * t308 + t21 * t176 - t411 * t177 + t183 * t403 + t503 * t80 + t504 * t81 + t398 * (t308 * t331 + t334 * t336) t13, -t531, t38, t374, t534, t423, t102 * t462 + t119 * t464 + t156 * t57 - t194 * t417 - t27 * t454 + t284 * t512 + t365, t119 * t463 + t157 * t57 + t194 * t40 + t28 * t454 + t284 * t510 + t462 * t551 + t563, t102 * t46 - t156 * t4 + t157 * t514 - t27 * t463 - t28 * t464 + t512 * t551 + t346, t4 * t93 + t514 * t92 + t57 * t194 - g(3) * (-t324 * t331 + t232) + t510 * t28 - t512 * t27 + t462 * t119 + t398 * (t253 * t331 + t324 * t334) t13, t38, t531, t423, -t534, t374, t102 * t509 + t156 * t5 + t25 * t454 + t284 * t513 - t417 * t91 + t464 * t48 + t365, -t1 * t156 + t102 * t41 + t157 * t2 + t25 * t463 - t26 * t464 + t513 * t551 + t346, -t157 * t5 - t26 * t454 - t284 * t511 - t40 * t91 - t463 * t48 - t509 * t551 - t563, -g(3) * t232 + t1 * t93 + t2 * t92 + t5 * t91 + t509 * t48 + t511 * t26 + t513 * t25 + (-g(3) * t397 + t324 * t398) * t334 + (g(3) * t324 + t398 * (t253 + t397)) * t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t484, -t246 ^ 2 + t248 ^ 2, t345 - t485, -t484, t371 - t483, t241, -t274 * t446 - t486 - t248 * t273 + t164 + (t410 + t515) * t330 + t540, g(1) * t225 - g(2) * t223 + g(3) * t474 + t246 * t273 - t548, 0, 0, t488, t554, t553, -t488, t535, t233, t86 * t284 + (-t159 * t248 + t233 * t528 + t284 * t445) * pkin(3) + t536, -t87 * t284 + (-t233 * t329 - t248 * t378 + t284 * t421) * pkin(3) + t552, t81 * t378 + t87 * t159 - t80 * t159 + t86 * t378 + (t528 * t76 - t329 * t77 + (-t159 * t528 + t329 * t378) * qJD(4)) * pkin(3), -t80 * t86 - t81 * t87 + (-t411 * t329 + t21 * t528 - t183 * t248 + g(3) * t478 + (-t80 * t329 + t528 * t81) * qJD(4) + t540) * pkin(3), t566, t570, t568, -t566, -t565, t233, -t102 * t127 + t211 * t233 + t347 - t558, -t127 * t551 - t212 * t233 + t284 * t500 + t369 + t567, -t211 * t40 + t212 * t417 + t416 + t560 + (-t27 - t500) * t102, -g(1) * t459 - g(2) * t412 - t119 * t127 - t211 * t514 + t4 * t212 + t259 * t515 - t27 * t501 + t28 * t500, t566, t568, -t570, t233, t565, -t566, -t102 * t51 - t203 * t233 + t347 - t532, t202 * t417 + t203 * t40 + t416 + t561 + (t25 - t502) * t102, t202 * t233 - t284 * t502 + t51 * t551 - t369 + t544 - t569, t1 * t202 + t2 * t203 - t48 * t51 - g(1) * (t413 + t459) - g(2) * (t412 + t414) - g(3) * (t261 + (-t259 - t524) * t331) + t502 * t26 + t501 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t488, t554, t553, -t488, t535, t233, -t81 * t284 + t536, -t284 * t80 + t552, 0, 0, t566, t570, t568, -t566, -t565, t233, -t558 + (-t102 * t378 + t233 * t499) * pkin(4) + t352, t567 + (-t233 * t328 - t378 * t551) * pkin(4) + t353, t560 - t506 + (t328 * t417 - t40 * t499) * pkin(4) + (t34 - t27) * t102, -g(1) * t280 + t27 * t33 - t28 * t34 + (g(2) * t480 - t119 * t378 + t317 * t533 + t4 * t328 - t499 * t514) * pkin(4), t566, t568, -t570, t233, t565, -t566, -t102 * t54 - t233 * t303 + t352 - t532, t561 + t300 * t417 + t303 * t40 - t506 + (t25 - t465) * t102, t233 * t300 + t54 * t551 + t215 - 0.2e1 * t264 - t353 - t569, t1 * t300 + t2 * t303 - t48 * t54 - t25 * t33 - g(1) * (-pkin(4) * t433 + t280 + t413) - g(2) * (-pkin(4) * t198 + t414) - g(3) * (t261 + (-t524 - t525) * t331) + t465 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, -t361, t393, t102 * t28 + t27 * t551 + t341, 0, 0, 0, 0, 0, 0, t383, t393, t361, t102 * t26 - t25 * t551 + t341 + t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t233 + t566, t568, -t284 ^ 2 - t496, t26 * t284 - t368 + t532;];
tau_reg  = t3;
