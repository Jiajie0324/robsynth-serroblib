% Calculate vector of inverse dynamics joint torques for
% S6RRRRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRPR14_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRPR14_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR14_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR14_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR14_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR14_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR14_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRPR14_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 00:26:36
% EndTime: 2019-03-10 00:27:44
% DurationCPUTime: 48.63s
% Computational Cost: add. (37709->1054), mult. (108033->1453), div. (0->0), fcn. (91482->18), ass. (0->405)
t1102 = sin(pkin(6));
t1107 = sin(qJ(2));
t1110 = cos(qJ(2));
t1106 = sin(qJ(3));
t1306 = cos(pkin(7));
t1228 = t1106 * t1306;
t1318 = cos(qJ(3));
t1135 = -t1107 * t1228 + t1110 * t1318;
t1018 = t1135 * t1102;
t1002 = qJD(1) * t1018;
t1101 = sin(pkin(7));
t1245 = t1101 * t1318;
t1208 = qJD(3) * t1245;
t1351 = t1002 - t1208;
t1309 = pkin(10) * t1101;
t1167 = pkin(2) * t1107 - t1110 * t1309;
t1144 = t1167 * t1102;
t1022 = qJD(1) * t1144;
t1202 = t1306 * t1318;
t1265 = t1101 * t1106;
t1151 = pkin(2) * t1202 - pkin(10) * t1265;
t1307 = cos(pkin(6));
t1248 = pkin(1) * t1307;
t1089 = t1110 * t1248;
t1079 = qJD(1) * t1089;
t1165 = t1102 * (-pkin(10) * t1306 - pkin(9));
t1147 = t1107 * t1165;
t984 = qJD(1) * t1147 + t1079;
t1088 = t1107 * t1248;
t1120 = t1110 * t1165 - t1088;
t985 = t1120 * qJD(1);
t1350 = t1151 * qJD(3) - t1022 * t1265 - t985 * t1228 - t1318 * t984;
t1133 = t1106 * t1110 + t1107 * t1202;
t1017 = t1133 * t1102;
t1001 = qJD(1) * t1017;
t903 = t1306 * t1022 - t1101 * t985;
t1349 = -pkin(3) * t1001 + pkin(11) * t1002 + (pkin(3) * t1106 - pkin(11) * t1318) * t1101 * qJD(3) - t903;
t1263 = t1102 * t1107;
t1234 = t1101 * t1263;
t1201 = qJD(1) * t1234;
t1348 = pkin(11) * t1201 - t1350;
t1097 = pkin(13) + qJ(6);
t1094 = sin(t1097);
t1095 = cos(t1097);
t1105 = sin(qJ(4));
t1109 = cos(qJ(4));
t1319 = cos(qJ(1));
t1204 = t1307 * t1319;
t1317 = sin(qJ(1));
t1146 = t1317 * t1107 - t1110 * t1204;
t1229 = t1102 * t1306;
t1320 = t1101 * t1146 - t1319 * t1229;
t1041 = t1107 * t1204 + t1110 * t1317;
t1244 = t1102 * t1319;
t1341 = t1101 * t1244 + t1146 * t1306;
t917 = -t1041 * t1318 + t1106 * t1341;
t868 = -t1105 * t1320 + t917 * t1109;
t914 = t1041 * t1106 + t1318 * t1341;
t1347 = t1094 * t868 + t1095 * t914;
t1346 = -t1094 * t914 + t1095 * t868;
t1039 = t1105 * t1265 - t1109 * t1306;
t1198 = t1105 * t1234;
t1290 = qJD(1) * t1198 + qJD(4) * t1039 + t1109 * t1351;
t1264 = t1101 * t1109;
t1040 = t1105 * t1306 + t1106 * t1264;
t1195 = t1109 * t1234;
t1287 = qJD(1) * t1195 + qJD(4) * t1040 - t1105 * t1351;
t1226 = t1307 * qJD(1);
t1180 = t1226 + qJD(2);
t1152 = t1101 * t1180;
t1170 = t1110 * t1202;
t1160 = t1102 * t1170;
t1259 = t1106 * t1107;
t1233 = t1102 * t1259;
t1200 = qJD(1) * t1233;
t1327 = qJD(1) * t1160 + t1318 * t1152 - t1200;
t943 = qJD(4) - t1327;
t1256 = pkin(2) * t1228 + pkin(10) * t1245;
t1345 = t1256 * qJD(3) - t1106 * t984 + t1202 * t985;
t1240 = qJD(1) * t1263;
t1242 = t1318 * t1022;
t1282 = -(-pkin(3) * t1240 - t1242) * t1101 + t1345;
t1236 = qJD(3) * t1265;
t1334 = t1001 - t1236;
t1028 = pkin(11) * t1306 + t1256;
t1029 = (-pkin(3) * t1318 - pkin(11) * t1106 - pkin(2)) * t1101;
t1210 = -t1105 * t1028 + t1029 * t1109;
t1342 = -qJD(4) * t1210 - t1105 * t1349 + t1348 * t1109;
t867 = t1105 * t917 + t1109 * t1320;
t1257 = t1109 * t1028 + t1105 * t1029;
t1340 = -qJD(4) * t1257 + t1348 * t1105 + t1109 * t1349;
t1108 = cos(qJ(6));
t1100 = sin(pkin(13));
t1103 = cos(pkin(13));
t1262 = t1102 * t1110;
t1232 = t1101 * t1262;
t1124 = qJD(1) * t1232 - t1180 * t1306 - qJD(3);
t1227 = t1110 * t1306;
t1134 = t1106 * t1227 + t1107 * t1318;
t1126 = t1134 * t1102;
t1141 = t1106 * t1152;
t948 = qJD(1) * t1126 + t1141;
t890 = -t1105 * t1124 + t1109 * t948;
t842 = t1100 * t890 - t1103 * t943;
t1283 = t1108 * t842;
t1104 = sin(qJ(6));
t844 = t1100 * t943 + t1103 * t890;
t1284 = t1104 * t844;
t768 = t1283 + t1284;
t996 = t1109 * t1124;
t888 = t1105 * t948 + t996;
t887 = qJD(6) + t888;
t1339 = t768 * t887;
t1277 = qJD(3) * t1106;
t1338 = qJ(5) * t1001 - (qJ(5) * t1277 - qJD(5) * t1318) * t1101 + t1342;
t1337 = t1287 * pkin(4) + qJ(5) * t1290 - t1040 * qJD(5) + t1282;
t1138 = pkin(9) * t1262 + t1088;
t1189 = t1102 * t1227;
t940 = t1138 * qJD(1) + (qJD(1) * t1189 + t1152) * pkin(10);
t1123 = pkin(2) * t1307 + t1147;
t945 = qJD(2) * pkin(2) + qJD(1) * t1123 + t1079;
t1166 = pkin(2) * t1110 + t1107 * t1309;
t1161 = -pkin(1) - t1166;
t1009 = t1161 * t1102;
t997 = qJD(1) * t1009;
t834 = t945 * t1228 + t997 * t1265 + t1318 * t940;
t1335 = -qJD(5) * t1105 - t834 + t943 * (pkin(4) * t1105 - qJ(5) * t1109);
t1096 = t1102 ^ 2;
t1333 = 0.2e1 * pkin(1) * t1096;
t1294 = -t1100 * t1290 + t1334 * t1103;
t1293 = -t1334 * t1100 - t1103 * t1290;
t1174 = t1104 * t842 - t1108 * t844;
t1332 = t1174 * t887;
t1254 = t1107 * qJDD(1);
t1223 = t1102 * t1254;
t1278 = qJD(1) * qJD(2);
t1237 = t1110 * t1278;
t1328 = t1102 * t1237 + t1223;
t1219 = t1307 * qJDD(1);
t1081 = t1219 + qJDD(2);
t1112 = qJD(2) * t1133 + qJD(3) * t1134;
t857 = qJD(3) * t1141 - qJDD(1) * t1160 - t1081 * t1245 + t1102 * (qJD(1) * t1112 + t1106 * t1254);
t1303 = t1100 * t1338 + t1103 * t1337;
t1302 = t1100 * t1337 - t1103 * t1338;
t1295 = pkin(4) * t1334 - t1340;
t1268 = t1100 * t1105;
t1308 = pkin(11) * qJD(4);
t833 = -t1106 * t940 + t1202 * t945 + t1245 * t997;
t876 = pkin(3) * t948 - pkin(11) * t1327;
t1298 = t1105 * t876 + t1109 * t833;
t766 = qJ(5) * t948 + t1298;
t1289 = t1100 * t766 + t1103 * t1335 + t1268 * t1308;
t1326 = t1105 * t943;
t1325 = -t1100 * t1335 + t1103 * t766;
t1203 = t1307 * t1317;
t1130 = t1107 * t1319 + t1110 * t1203;
t1243 = t1102 * t1317;
t1323 = -t1101 * t1243 + t1130 * t1306;
t853 = qJDD(4) + t857;
t1322 = -pkin(4) * t853 + qJDD(5);
t1042 = -t1107 * t1203 + t1110 * t1319;
t918 = t1042 * t1106 + t1318 * t1323;
t1225 = t1307 * t1101;
t1172 = t1318 * t1225;
t974 = -t1160 - t1172 + t1233;
t1155 = g(1) * t918 + g(2) * t914 + g(3) * t974;
t1111 = qJD(1) ^ 2;
t1312 = pkin(12) + qJ(5);
t1310 = pkin(5) * t1105;
t1305 = t888 * t943;
t1304 = t890 * t943;
t1275 = qJD(4) * t1109;
t1276 = qJD(4) * t1105;
t1173 = qJD(3) * t1202;
t1238 = t1107 * t1278;
t1197 = t1102 * t1238;
t1072 = t1079 * qJD(2);
t1209 = pkin(1) * t1219;
t1253 = t1110 * qJDD(1);
t1222 = t1102 * t1253;
t1230 = pkin(9) * t1222 + t1107 * t1209 + t1072;
t1132 = -pkin(9) * t1197 + t1230;
t1220 = qJDD(1) * t1306;
t1184 = t1110 * t1220;
t1224 = t1306 * qJD(2);
t1193 = qJD(1) * t1224;
t882 = (t1081 * t1101 + (-t1107 * t1193 + t1184) * t1102) * pkin(10) + t1132;
t1139 = -t1088 * t1278 + t1110 * t1209;
t1150 = -t1237 - t1254;
t1140 = t1150 * pkin(9);
t886 = t1081 * pkin(2) + ((-t1107 * t1220 - t1110 * t1193) * pkin(10) + t1140) * t1102 + t1139;
t920 = (qJDD(1) * t1161 + t1167 * t1278) * t1102;
t1137 = -t945 * t1173 - t997 * t1208 - t886 * t1228 - t920 * t1265 + t1277 * t940 - t1318 * t882;
t954 = t1081 * t1306 + qJDD(3) + (t1197 - t1222) * t1101;
t734 = pkin(11) * t954 - t1137;
t823 = -t1101 * t886 + t1306 * t920;
t856 = t1106 * t1102 * t1184 + qJD(3) * t1327 + t1081 * t1265 - t1224 * t1200 + t1318 * t1328;
t741 = pkin(3) * t857 - pkin(11) * t856 + t823;
t885 = -t1101 * t945 + t1306 * t997;
t809 = -pkin(3) * t1327 - pkin(11) * t948 + t885;
t816 = -pkin(11) * t1124 + t834;
t693 = t1105 * t741 + t1109 * t734 + t809 * t1275 - t1276 * t816;
t691 = qJ(5) * t853 + qJD(5) * t943 + t693;
t1192 = qJD(3) * t1228;
t1246 = qJD(3) * t1318;
t746 = -t1106 * t882 - t945 * t1192 + t886 * t1202 - t997 * t1236 + t920 * t1245 - t940 * t1246;
t735 = -pkin(3) * t954 - t746;
t775 = -qJD(4) * t996 + t1105 * t954 + t1109 * t856 - t1276 * t948;
t1216 = t1105 * t856 - t1109 * t954;
t776 = qJD(4) * t890 + t1216;
t700 = pkin(4) * t776 - qJ(5) * t775 - qJD(5) * t890 + t735;
t682 = t1100 * t700 + t1103 * t691;
t1023 = qJD(2) * t1144;
t1206 = t1009 * t1245;
t966 = (t1189 + t1225) * pkin(10) + t1138;
t981 = t1089 + t1123;
t1080 = qJD(2) * t1089;
t986 = qJD(2) * t1147 + t1080;
t987 = t1120 * qJD(2);
t1136 = qJD(3) * t1206 + t1023 * t1265 + t981 * t1173 + t987 * t1228 - t1277 * t966 + t1318 * t986;
t1199 = qJD(2) * t1234;
t781 = pkin(11) * t1199 + t1136;
t1190 = t1106 * t1225;
t899 = qJD(3) * t1190 + t1102 * t1112;
t900 = qJD(3) * t1172 + ((t1170 - t1259) * qJD(3) + t1135 * qJD(2)) * t1102;
t904 = t1306 * t1023 - t1101 * t987;
t797 = pkin(3) * t899 - pkin(11) * t900 + t904;
t898 = t1306 * t1009 - t1101 * t981;
t975 = t1190 + t1126;
t829 = pkin(3) * t974 - pkin(11) * t975 + t898;
t1036 = -t1306 * t1307 + t1232;
t991 = t1009 * t1265;
t1250 = t981 * t1228 + t1318 * t966 + t991;
t837 = -pkin(11) * t1036 + t1250;
t1153 = t1105 * t797 + t1109 * t781 + t829 * t1275 - t1276 * t837;
t704 = qJ(5) * t899 + qJD(5) * t974 + t1153;
t1129 = -qJD(3) * t991 - t1106 * t986 - t981 * t1192 + t1202 * t987 - t966 * t1246;
t1239 = qJD(2) * t1263;
t1241 = t1318 * t1023;
t782 = (-pkin(3) * t1239 - t1241) * t1101 - t1129;
t910 = -t1036 * t1105 + t1109 * t975;
t821 = -qJD(2) * t1195 + qJD(4) * t910 + t1105 * t900;
t909 = t1036 * t1109 + t1105 * t975;
t822 = qJD(2) * t1198 - qJD(4) * t909 + t1109 * t900;
t718 = t821 * pkin(4) - t822 * qJ(5) - t910 * qJD(5) + t782;
t689 = t1100 * t718 + t1103 * t704;
t753 = t1105 * t809 + t1109 * t816;
t740 = qJ(5) * t943 + t753;
t815 = pkin(3) * t1124 - t833;
t757 = t888 * pkin(4) - t890 * qJ(5) + t815;
t708 = t1100 * t757 + t1103 * t740;
t752 = -t1105 * t816 + t1109 * t809;
t820 = pkin(4) * t890 + qJ(5) * t888;
t727 = t1100 * t820 + t1103 * t752;
t1297 = t1105 * t829 + t1109 * t837;
t759 = qJ(5) * t974 + t1297;
t1122 = -t1106 * t966 + t1202 * t981 + t1206;
t836 = t1036 * pkin(3) - t1122;
t773 = t909 * pkin(4) - t910 * qJ(5) + t836;
t722 = t1100 * t773 + t1103 * t759;
t982 = t1100 * t1040 + t1103 * t1245;
t983 = t1103 * t1040 - t1100 * t1245;
t895 = t1104 * t983 + t1108 * t982;
t1301 = -qJD(6) * t895 - t1104 * t1294 + t1108 * t1293;
t896 = -t1104 * t982 + t1108 * t983;
t1300 = qJD(6) * t896 + t1104 * t1293 + t1108 * t1294;
t1299 = pkin(5) * t1294 + t1295;
t1027 = -pkin(3) * t1306 - t1151;
t908 = t1039 * pkin(4) - t1040 * qJ(5) + t1027;
t911 = -qJ(5) * t1245 + t1257;
t840 = t1100 * t908 + t1103 * t911;
t1258 = t1108 * t1103;
t1053 = t1100 * t1104 - t1258;
t1054 = t1100 * t1108 + t1103 * t1104;
t1273 = qJD(6) * t1105;
t1267 = t1100 * t1109;
t872 = -t1103 * t948 + t1267 * t1327;
t1260 = t1103 * t1109;
t873 = t1100 * t948 + t1260 * t1327;
t1292 = -t1053 * t1275 - t1054 * t1273 + t1104 * t872 - t1108 * t873;
t1274 = qJD(6) * t1104;
t1291 = t1054 * t1275 - t1104 * t873 - t1108 * t872 + t1258 * t1273 - t1268 * t1274;
t1261 = t1103 * t1105;
t1252 = pkin(11) * t1261;
t1288 = -qJD(4) * t1252 - t1325;
t1286 = t1081 * MDP(8);
t1285 = t1100 * t888;
t1281 = t887 * t1053;
t1280 = t887 * t1054;
t1247 = pkin(5) * t1100 + pkin(11);
t827 = t1105 * t833;
t767 = -pkin(4) * t948 - t1109 * t876 + t827;
t1279 = -pkin(5) * t872 + t1247 * t1275 - t767;
t1271 = t1094 * t1109;
t1270 = t1095 * t1109;
t1269 = t1096 * t1111;
t1266 = t1101 * t1105;
t1168 = pkin(4) * t1109 + qJ(5) * t1105 + pkin(3);
t1011 = pkin(11) * t1260 - t1100 * t1168;
t1098 = t1107 ^ 2;
t1255 = -t1110 ^ 2 + t1098;
t748 = t1100 * t775 - t1103 * t853;
t749 = t1100 * t853 + t1103 * t775;
t1251 = -qJD(6) * t1283 - t1104 * t748 + t1108 * t749;
t1235 = t1110 * t1269;
t681 = -t1100 * t691 + t1103 * t700;
t688 = -t1100 * t704 + t1103 * t718;
t707 = -t1100 * t740 + t1103 * t757;
t726 = -t1100 * t752 + t1103 * t820;
t721 = -t1100 * t759 + t1103 * t773;
t839 = -t1100 * t911 + t1103 * t908;
t679 = pkin(5) * t776 - pkin(12) * t749 + t681;
t680 = -pkin(12) * t748 + t682;
t1218 = -t1104 * t680 + t1108 * t679;
t1217 = t1104 * t749 + t1108 * t748;
t1215 = -t1105 * t837 + t1109 * t829;
t1212 = t1109 * t943;
t1211 = t1105 * t734 - t1109 * t741 + t816 * t1275 + t809 * t1276;
t1113 = -t1101 * t1130 - t1229 * t1317;
t919 = t1042 * t1318 - t1106 * t1323;
t869 = t1105 * t919 + t1109 * t1113;
t1194 = g(1) * t867 + g(2) * t869;
t1191 = t1102 * t1111 * t1307;
t990 = -pkin(12) * t1268 + t1011;
t1188 = -pkin(12) * t873 + qJD(6) * t990 + t1310 * t1327 - (-pkin(12) * t1260 + t1310) * qJD(4) - t1289;
t814 = -pkin(12) * t982 + t840;
t1187 = -pkin(5) * t1287 + pkin(12) * t1293 + qJD(6) * t814 - t1303;
t1047 = t1103 * t1168;
t963 = -pkin(12) * t1261 - t1047 + (-pkin(11) * t1100 - pkin(5)) * t1109;
t1186 = -pkin(12) * t872 - qJD(6) * t963 - (-pkin(12) * t1267 - t1252) * qJD(4) + t1325;
t798 = pkin(5) * t1039 - pkin(12) * t983 + t839;
t1185 = pkin(12) * t1294 - qJD(6) * t798 - t1302;
t913 = pkin(4) * t1245 - t1210;
t1179 = 0.2e1 * t1226 + qJD(2);
t1178 = t1104 * t679 + t1108 * t680;
t701 = pkin(5) * t888 - pkin(12) * t844 + t707;
t702 = -pkin(12) * t842 + t708;
t1177 = t1104 * t702 - t1108 * t701;
t685 = t1104 * t701 + t1108 * t702;
t864 = t1100 * t974 + t1103 * t910;
t706 = pkin(5) * t909 - pkin(12) * t864 + t721;
t863 = t1100 * t910 - t974 * t1103;
t709 = -pkin(12) * t863 + t722;
t1176 = -t1104 * t709 + t1108 * t706;
t1175 = t1104 * t706 + t1108 * t709;
t792 = t1104 * t864 + t1108 * t863;
t793 = -t1104 * t863 + t1108 * t864;
t1169 = -t1105 * t781 + t1109 * t797 - t837 * t1275 - t829 * t1276;
t760 = -pkin(4) * t974 - t1215;
t1164 = -pkin(11) * t853 + t815 * t943;
t1070 = t1312 * t1100;
t1163 = pkin(12) * t1285 - qJD(5) * t1103 + qJD(6) * t1070 + t727;
t1071 = t1312 * t1103;
t1162 = pkin(12) * t1103 * t888 + pkin(5) * t890 + qJD(5) * t1100 + qJD(6) * t1071 + t726;
t737 = -pkin(4) * t943 + qJD(5) - t752;
t1159 = -qJ(5) * t776 + (-qJD(5) + t737) * t888;
t1158 = g(1) * t869 - g(2) * t867 + g(3) * t909;
t870 = -t1105 * t1113 + t919 * t1109;
t1157 = -g(1) * t870 + g(2) * t868 - g(3) * t910;
t936 = -t1041 * t1228 - t1146 * t1318;
t891 = -t1041 * t1264 + t1105 * t936;
t938 = -t1042 * t1228 - t1130 * t1318;
t893 = -t1042 * t1264 + t1105 * t938;
t949 = t1018 * t1105 - t1195;
t1156 = -g(1) * t893 - g(2) * t891 - g(3) * t949;
t1154 = g(1) * t919 - g(2) * t917 + g(3) * t975;
t695 = -t1274 * t844 + t1251;
t1149 = t1102 * (t1219 + t1081);
t692 = t1211 + t1322;
t1143 = t1158 - t692;
t1142 = t1155 - t735;
t705 = -pkin(4) * t899 - t1169;
t1125 = t1158 - t1211;
t696 = -qJD(6) * t1174 + t1217;
t1119 = qJD(3) * t1124;
t1117 = t1180 * t1138;
t1116 = t1124 * t1234;
t1092 = -pkin(5) * t1103 - pkin(4);
t1058 = t1247 * t1105;
t1031 = t1053 * t1105;
t1030 = t1054 * t1105;
t1010 = -pkin(11) * t1267 - t1047;
t950 = t1018 * t1109 + t1198;
t937 = t1042 * t1202 - t1106 * t1130;
t935 = t1041 * t1202 - t1106 * t1146;
t894 = t1042 * t1266 + t1109 * t938;
t892 = t1041 * t1266 + t1109 * t936;
t874 = pkin(5) * t982 + t913;
t806 = t1094 * t918 + t1095 * t870;
t805 = -t1094 * t870 + t1095 * t918;
t788 = t1100 * t899 + t1103 * t822;
t787 = t1100 * t822 - t899 * t1103;
t774 = qJDD(6) + t776;
t733 = pkin(5) * t863 + t760;
t732 = -pkin(5) * t1285 + t753;
t723 = pkin(5) * t842 + t737;
t711 = qJD(6) * t793 + t1104 * t788 + t1108 * t787;
t710 = -qJD(6) * t792 - t1104 * t787 + t1108 * t788;
t697 = pkin(5) * t787 + t705;
t687 = pkin(5) * t748 + t692;
t686 = -pkin(12) * t787 + t689;
t683 = pkin(5) * t821 - pkin(12) * t788 + t688;
t677 = -t685 * qJD(6) + t1218;
t676 = -qJD(6) * t1177 + t1178;
t1 = [(-g(1) * t868 - g(2) * t870 + t1169 * t943 - t1211 * t974 + t1215 * t853 + t735 * t909 + t752 * t899 + t836 * t776 + t782 * t888 + t815 * t821) * MDP(23) + (-t1174 * t821 + t695 * t909 + t710 * t887 + t774 * t793) * MDP(31) + (-t1174 * t710 + t695 * t793) * MDP(29) + (t1174 * t711 - t695 * t792 - t696 * t793 - t710 * t768) * MDP(30) + (-t856 * t1036 - t1124 * t900 + t1199 * t948 + t975 * t954) * MDP(13) + (t1110 * t1149 - t1179 * t1239) * MDP(7) + (g(1) * t1317 - g(2) * t1319) * MDP(2) + (g(1) * t1319 + g(2) * t1317) * MDP(3) + (-t681 * t864 - t682 * t863 - t688 * t844 - t689 * t842 - t707 * t788 - t708 * t787 - t721 * t749 - t722 * t748 - t1194) * MDP(27) + (-g(1) * t914 + g(2) * t918 - t1036 * t1137 + t1124 * t1136 - t1199 * t834 - t1250 * t954 + t823 * t975 + t898 * t856 + t885 * t900 + t904 * t948) * MDP(17) + (t682 * t722 + t708 * t689 + t681 * t721 + t707 * t688 + t692 * t760 + t737 * t705 - g(1) * (-pkin(1) * t1317 - t1041 * pkin(2) + t917 * pkin(3) + t868 * pkin(4) + pkin(9) * t1244 - pkin(11) * t914 + t867 * qJ(5)) - g(2) * (pkin(1) * t1319 + t1042 * pkin(2) + t919 * pkin(3) + t870 * pkin(4) + pkin(9) * t1243 + t918 * pkin(11) + t869 * qJ(5)) + (g(1) * t1320 + g(2) * t1113) * pkin(10)) * MDP(28) + (t688 * t888 + t721 * t776 + t681 * t909 + t707 * t821 + t705 * t842 + t760 * t748 + t692 * t863 + t737 * t787 - g(1) * (-t1100 * t914 + t1103 * t868) - g(2) * (t1100 * t918 + t1103 * t870)) * MDP(25) + (-t689 * t888 - t722 * t776 - t682 * t909 - t708 * t821 + t705 * t844 + t760 * t749 + t692 * t864 + t737 * t788 - g(1) * (-t1100 * t868 - t1103 * t914) - g(2) * (-t1100 * t870 + t1103 * t918)) * MDP(26) + (t857 * t1036 + t1124 * t899 + t1199 * t1327 - t974 * t954) * MDP(14) + (-(t1101 * t1241 + t1129) * t1124 + t1122 * t954 - t746 * t1036 + t833 * t1199 - t904 * t1327 + t898 * t857 + t823 * t974 + t885 * t899 - g(1) * t917 - g(2) * t919) * MDP(16) + (t1327 * t900 - t856 * t974 - t857 * t975 - t899 * t948) * MDP(12) + (t774 * t909 + t821 * t887) * MDP(33) + (-t696 * t909 - t711 * t887 - t768 * t821 - t774 * t792) * MDP(32) + qJDD(1) * MDP(1) + (t775 * t910 + t822 * t890) * MDP(18) + (-t775 * t909 - t776 * t910 - t821 * t890 - t822 * t888) * MDP(19) + t1307 * t1286 + (-t776 * t974 - t821 * t943 - t853 * t909 - t888 * t899) * MDP(21) + (t775 * t974 + t822 * t943 + t853 * t910 + t890 * t899) * MDP(20) + (t853 * t974 + t899 * t943) * MDP(22) + (t856 * t975 + t900 * t948) * MDP(11) + (-t1153 * t943 - t1297 * t853 - t693 * t974 + t735 * t910 - t753 * t899 + t836 * t775 + t782 * t890 + t815 * t822 + t1194) * MDP(24) + (-qJD(2) * t1117 + (-pkin(9) * t1263 + t1089) * t1081 + (t1102 * t1140 + t1139) * t1307 + g(1) * t1041 - g(2) * t1042 + (t1253 - t1238) * t1333) * MDP(9) + (-(-pkin(9) * t1239 + t1080) * t1180 - t1138 * t1081 - t1132 * t1307 - g(1) * t1146 + g(2) * t1130 + t1150 * t1333) * MDP(10) + (qJD(2) * t1179 * t1262 + t1107 * t1149) * MDP(6) + (0.2e1 * (t1107 * t1253 - t1255 * t1278) * MDP(5) + (qJDD(1) * t1098 + 0.2e1 * t1107 * t1237) * MDP(4)) * t1096 + ((-qJD(6) * t1175 - t1104 * t686 + t1108 * t683) * t887 + t1176 * t774 + t677 * t909 - t1177 * t821 + t697 * t768 + t733 * t696 + t687 * t792 + t723 * t711 - g(1) * t1346 - g(2) * t806) * MDP(34) + (-(qJD(6) * t1176 + t1104 * t683 + t1108 * t686) * t887 - t1175 * t774 - t676 * t909 - t685 * t821 - t697 * t1174 + t733 * t695 + t687 * t793 + t723 * t710 + g(1) * t1347 - g(2) * t805) * MDP(35) + (-qJD(2) * t1116 - t954 * t1036) * MDP(15); ((-t1104 * t814 + t1108 * t798) * t774 + t677 * t1039 + t874 * t696 + t687 * t895 - g(1) * (t1094 * t937 + t1095 * t894) - g(2) * (t1094 * t935 + t1095 * t892) - g(3) * (t1017 * t1094 + t1095 * t950) + (t1104 * t1185 - t1108 * t1187) * t887 + t1299 * t768 + t1300 * t723 - t1287 * t1177) * MDP(34) + (-(t1104 * t798 + t1108 * t814) * t774 - t676 * t1039 + t874 * t695 + t687 * t896 - g(1) * (-t1094 * t894 + t1095 * t937) - g(2) * (-t1094 * t892 + t1095 * t935) - g(3) * (t1017 * t1095 - t1094 * t950) + (t1104 * t1187 + t1108 * t1185) * t887 - t1299 * t1174 + t1301 * t723 - t1287 * t685) * MDP(35) + (-t1174 * t1301 + t695 * t896) * MDP(29) + (t1039 * t695 - t1174 * t1287 + t1301 * t887 + t774 * t896) * MDP(31) + (t1174 * t1300 - t1301 * t768 - t695 * t895 - t696 * t896) * MDP(30) + (t682 * t840 + t681 * t839 + t692 * t913 - g(1) * (-pkin(2) * t1130 + t938 * pkin(3) + t894 * pkin(4) + t937 * pkin(11) + t893 * qJ(5) + t1042 * t1309) - g(2) * (-pkin(2) * t1146 + t936 * pkin(3) + t892 * pkin(4) + t935 * pkin(11) + t891 * qJ(5) + t1041 * t1309) - g(3) * (pkin(3) * t1018 + pkin(4) * t950 + pkin(11) * t1017 + qJ(5) * t949 + t1102 * t1166) + t1295 * t737 + t1302 * t708 + t1303 * t707) * MDP(28) + (t1210 * t853 + t1027 * t776 + t735 * t1039 - t752 * t1001 - g(1) * t894 - g(2) * t892 - g(3) * t950 + t1340 * t943 + t1282 * t888 + t1287 * t815 + (t1211 * t1318 + t1277 * t752) * t1101) * MDP(23) + (-t1039 * t696 - t1287 * t768 - t1300 * t887 - t774 * t895) * MDP(32) + (-t840 * t776 - t682 * t1039 + t913 * t749 + t692 * t983 - g(1) * (-t1100 * t894 + t1103 * t937) - g(2) * (-t1100 * t892 + t1103 * t935) - g(3) * (t1017 * t1103 - t1100 * t950) - t1302 * t888 + t1295 * t844 + t1293 * t737 - t1287 * t708) * MDP(26) + (t839 * t776 + t681 * t1039 + t913 * t748 + t692 * t982 - g(1) * (t1100 * t937 + t1103 * t894) - g(2) * (t1100 * t935 + t1103 * t892) - g(3) * (t1017 * t1100 + t1103 * t950) + t1303 * t888 + t1295 * t842 + t1294 * t737 + t1287 * t707) * MDP(25) + (-t1293 * t707 - t1294 * t708 - t1302 * t842 - t1303 * t844 - t681 * t983 - t682 * t982 - t748 * t840 - t749 * t839 + t1156) * MDP(27) + (-t948 * t1002 + (t1106 * t856 + t1246 * t948) * t1101) * MDP(11) + (-t943 * t1001 + (t1277 * t943 - t1318 * t853) * t1101) * MDP(22) + (t888 * t1001 - t1039 * t853 - t1287 * t943 + (-t1277 * t888 + t1318 * t776) * t1101) * MDP(21) + (-t890 * t1001 + t1040 * t853 - t1290 * t943 + (t1277 * t890 - t1318 * t775) * t1101) * MDP(20) + t1286 + ((-pkin(9) * t1240 + t1079) * t1226 + pkin(1) * t1235 + g(1) * t1042 + g(2) * t1041 + g(3) * t1263 + t1072 - t1230) * MDP(10) + (t948 * t1001 - t1002 * t1327 + (t1318 * t856 - t1106 * t857 + (-t1106 * t948 + t1318 * t1327) * qJD(3)) * t1101) * MDP(12) + (-t857 * t1306 - t1001 * t1124 + (t1106 * t1119 - t1240 * t1327 + t1318 * t954) * t1101) * MDP(14) + (-t1257 * t853 + t1027 * t775 + t735 * t1040 + t753 * t1001 + t1342 * t943 + t1282 * t890 - t1290 * t815 + (-t1277 * t753 + t1318 * t693) * t1101 - t1156) * MDP(24) + (t1151 * t954 + t746 * t1306 - t1101 * pkin(2) * t857 - t823 * t1245 - t833 * t1201 + t903 * t1327 - g(1) * t938 - g(2) * t936 - g(3) * t1018 - t1334 * t885 + (t1101 * t1242 + t1345) * t1124) * MDP(16) + (t1107 * t1191 + t1222) * MDP(7) + (-t1110 * t1191 + t1223) * MDP(6) - t1107 * MDP(4) * t1235 + (-t1256 * t954 + t1137 * t1306 - t903 * t948 - t885 * t1002 + g(1) * t937 + g(2) * t935 + g(3) * t1017 + (-pkin(2) * t856 + t823 * t1106 + t1240 * t834 + t1246 * t885) * t1101 + t1350 * t1124) * MDP(17) + (qJD(1) * t1116 + t1306 * t954) * MDP(15) + t1255 * MDP(5) * t1269 + (pkin(1) * t1107 * t1269 - pkin(9) * t1328 + g(1) * t1130 + g(2) * t1146 - g(3) * t1262 + qJD(1) * t1117 + t1139) * MDP(9) + (t856 * t1306 + t1002 * t1124 + (t1106 * t954 - t1119 * t1318 - t1240 * t948) * t1101) * MDP(13) + (t1039 * t774 + t1287 * t887) * MDP(33) + (-t1039 * t775 - t1040 * t776 - t1287 * t890 + t1290 * t888) * MDP(19) + (t1040 * t775 - t1290 * t890) * MDP(18); (t1105 * t853 + t1212 * t943) * MDP(20) + (t1105 * t775 + t1212 * t890) * MDP(18) + ((-t1104 * t990 + t1108 * t963) * t774 - t677 * t1109 + t1058 * t696 + t687 * t1030 - g(1) * (t1094 * t919 - t1270 * t918) - g(2) * (-t1094 * t917 - t1270 * t914) - g(3) * (t1094 * t975 - t1270 * t974) + (t1104 * t1186 - t1108 * t1188) * t887 + t1279 * t768 + t1291 * t723 - t1177 * t1326) * MDP(34) + ((t775 - t1305) * t1109 + (-t776 - t1304) * t1105) * MDP(19) + (-t1124 * t834 + t1155 + t746) * MDP(16) + (-t1124 * t833 - t1327 * t885 + t1137 + t1154) * MDP(17) - t1327 ^ 2 * MDP(12) + (t1124 * t1327 + t856) * MDP(13) + (-pkin(3) * t775 + t1298 * t943 - t834 * t890 + t1164 * t1109 + (t1308 * t943 - t1142) * t1105) * MDP(24) + (-pkin(3) * t776 + t827 * t943 - t834 * t888 + t1164 * t1105 + ((-t876 - t1308) * t943 + t1142) * t1109) * MDP(23) + (-t1109 * t774 + t1326 * t887) * MDP(33) + (-t1031 * t695 - t1174 * t1292) * MDP(29) + (-t1031 * t774 - t1109 * t695 - t1174 * t1326 + t1292 * t887) * MDP(31) + (-t1030 * t695 + t1031 * t696 + t1174 * t1291 - t1292 * t768) * MDP(30) + t954 * MDP(15) + (t681 * t1010 + t682 * t1011 - t737 * t767 + t1288 * t708 + t1289 * t707 + (t1105 * t692 + t1275 * t737 - t1154) * pkin(11) + t1155 * t1168) * MDP(28) - t857 * MDP(14) + (t1109 * t853 - t1326 * t943) * MDP(21) + (-t1030 * t774 + t1109 * t696 - t1291 * t887 - t1326 * t768) * MDP(32) + (-(t1104 * t963 + t1108 * t990) * t774 + t676 * t1109 + t1058 * t695 - t687 * t1031 - g(1) * (t1095 * t919 + t1271 * t918) - g(2) * (-t1095 * t917 + t1271 * t914) - g(3) * (t1095 * t975 + t1271 * t974) + (t1104 * t1188 + t1108 * t1186) * t887 - t1279 * t1174 + t1292 * t723 - t685 * t1326) * MDP(35) + (-t1011 * t776 - t737 * t873 - t767 * t844 - t1288 * t888 - t1154 * t1103 + (t682 + (pkin(11) * t844 + t1103 * t737) * qJD(4) - t1155 * t1100) * t1109 + (pkin(11) * t749 + t692 * t1103 - t708 * t943) * t1105) * MDP(26) + (t1010 * t776 - t737 * t872 - t767 * t842 + t1289 * t888 - t1154 * t1100 + (-t681 + (pkin(11) * t842 + t1100 * t737) * qJD(4) + t1155 * t1103) * t1109 + (pkin(11) * t748 + t1100 * t692 + t707 * t943) * t1105) * MDP(25) + (-t1010 * t749 - t1011 * t748 + t707 * t873 + t708 * t872 - t1289 * t844 - t1288 * t842 + (-t1100 * t708 - t1103 * t707) * t1275 + (-t1100 * t682 - t1103 * t681 + t1155) * t1105) * MDP(27) + (-MDP(11) * t1327 + MDP(12) * t948 - MDP(14) * t1124 - MDP(16) * t885 - MDP(20) * t890 + MDP(21) * t888 - MDP(22) * t943 - MDP(23) * t752 + MDP(24) * t753) * t948; -t888 ^ 2 * MDP(19) + (t775 + t1305) * MDP(20) + (-t1216 + t1304) * MDP(21) + t853 * MDP(22) + (t753 * t943 + t1125) * MDP(23) + (t752 * t943 + t815 * t888 - t1157 - t693) * MDP(24) + (-pkin(4) * t748 + t1100 * t1159 + t1103 * t1143 - t726 * t888 - t753 * t842) * MDP(25) + (-pkin(4) * t749 - t1100 * t1143 + t1103 * t1159 + t727 * t888 - t753 * t844) * MDP(26) + (t726 * t844 + t727 * t842 + (-qJ(5) * t748 - qJD(5) * t842 - t707 * t888 + t682) * t1103 + (qJ(5) * t749 + qJD(5) * t844 - t708 * t888 - t681) * t1100 + t1157) * MDP(27) + (-t707 * t726 - t708 * t727 - t737 * t753 + (-t1100 * t707 + t1103 * t708) * qJD(5) + t1143 * pkin(4) + (-t1100 * t681 + t1103 * t682 + t1157) * qJ(5)) * MDP(28) + (t1054 * t695 + t1174 * t1281) * MDP(29) + (-t1053 * t695 - t1054 * t696 + t1174 * t1280 + t1281 * t768) * MDP(30) + (t1054 * t774 - t1281 * t887) * MDP(31) + (-t1053 * t774 - t1280 * t887) * MDP(32) + ((-t1070 * t1108 - t1071 * t1104) * t774 + t1092 * t696 + t687 * t1053 - t732 * t768 + (t1104 * t1163 - t1108 * t1162) * t887 + t1280 * t723 + t1158 * t1095) * MDP(34) + (-(-t1070 * t1104 + t1071 * t1108) * t774 + t1092 * t695 + t687 * t1054 + t732 * t1174 + (t1104 * t1162 + t1108 * t1163) * t887 - t1281 * t723 - t1158 * t1094) * MDP(35) + (MDP(18) * t888 + MDP(19) * t890 - MDP(21) * qJD(4) - MDP(23) * t815 - MDP(25) * t707 + MDP(26) * t708 + MDP(31) * t1174 + MDP(32) * t768 - MDP(33) * t887 + MDP(34) * t1177 + MDP(35) * t685) * t890; (t844 * t888 + t748) * MDP(25) + (-t842 * t888 + t749) * MDP(26) + (-t842 ^ 2 - t844 ^ 2) * MDP(27) + (t707 * t844 + t708 * t842 - t1125 + t1322) * MDP(28) + (t696 - t1332) * MDP(34) + (t695 - t1339) * MDP(35); -t1174 * t768 * MDP(29) + (t1174 ^ 2 - t768 ^ 2) * MDP(30) + (t1251 + t1339) * MDP(31) + (-t1217 - t1332) * MDP(32) + t774 * MDP(33) + (t685 * t887 + t723 * t1174 - g(1) * t805 - g(2) * t1347 - g(3) * (-t1094 * t910 + t1095 * t974) + t1218) * MDP(34) + (-t1177 * t887 + t723 * t768 + g(1) * t806 - g(2) * t1346 - g(3) * (-t1094 * t974 - t1095 * t910) - t1178) * MDP(35) + (-MDP(31) * t1284 + MDP(32) * t1174 - MDP(34) * t685 + MDP(35) * t1177) * qJD(6);];
tau  = t1;
