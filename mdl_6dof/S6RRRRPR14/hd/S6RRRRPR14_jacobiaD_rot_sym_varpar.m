% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRRPR14
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRRPR14_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 12:54
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRRPR14_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR14_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR14_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRRPR14_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR14_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:12
	% EndTime: 2019-10-10 12:54:12
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:12
	% EndTime: 2019-10-10 12:54:12
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:12
	% EndTime: 2019-10-10 12:54:13
	% DurationCPUTime: 0.40s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:13
	% EndTime: 2019-10-10 12:54:14
	% DurationCPUTime: 1.28s
	% Computational Cost: add. (2555->103), mult. (7918->233), div. (442->12), fcn. (10062->13), ass. (0->106)
	t218 = sin(pkin(6));
	t219 = cos(pkin(7));
	t220 = cos(pkin(6));
	t217 = sin(pkin(7));
	t225 = cos(qJ(2));
	t268 = t217 * t225;
	t206 = -t218 * t268 + t220 * t219;
	t203 = 0.1e1 / t206;
	t222 = sin(qJ(2));
	t226 = cos(qJ(1));
	t260 = t226 * t222;
	t223 = sin(qJ(1));
	t261 = t223 * t225;
	t238 = t220 * t260 + t261;
	t267 = t218 * t222;
	t204 = 0.1e1 / t206 ^ 2;
	t259 = t226 * t225;
	t262 = t223 * t222;
	t207 = -t220 * t259 + t262;
	t265 = t218 * t226;
	t242 = -t207 * t217 + t219 * t265;
	t272 = t242 * t204;
	t284 = t217 * (t203 * t238 + t267 * t272);
	t189 = atan2(t242, t206);
	t184 = sin(t189);
	t185 = cos(t189);
	t170 = t184 * t242 + t185 * t206;
	t167 = 0.1e1 / t170;
	t221 = sin(qJ(3));
	t224 = cos(qJ(3));
	t237 = t220 * t262 - t259;
	t239 = t220 * t261 + t260;
	t266 = t218 * t223;
	t252 = t217 * t266;
	t240 = -t219 * t239 + t252;
	t181 = t221 * t240 - t224 * t237;
	t175 = 0.1e1 / t181;
	t168 = 0.1e1 / t170 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t200 = -t217 * t239 - t219 * t266;
	t197 = t200 ^ 2;
	t163 = t197 * t168 + 0.1e1;
	t192 = qJD(1) * t207 + qJD(2) * t237;
	t258 = qJD(1) * t218;
	t249 = t226 * t258;
	t182 = t192 * t217 - t219 * t249;
	t276 = t182 * t168;
	t196 = t242 ^ 2;
	t188 = t196 * t204 + 0.1e1;
	t186 = 0.1e1 / t188;
	t194 = qJD(1) * t239 + qJD(2) * t238;
	t250 = t223 * t258;
	t183 = -t194 * t217 - t219 * t250;
	t257 = qJD(2) * t218;
	t269 = t217 * t222;
	t245 = t257 * t269;
	t244 = t204 * t245;
	t233 = t183 * t203 - t242 * t244;
	t159 = t233 * t186;
	t243 = -t184 * t206 + t185 * t242;
	t155 = t159 * t243 + t184 * t183 + t185 * t245;
	t282 = t155 * t167 * t168;
	t283 = (-t197 * t282 + t200 * t276) / t163 ^ 2;
	t193 = qJD(1) * t238 + qJD(2) * t239;
	t235 = t192 * t219 + t217 * t249;
	t165 = qJD(3) * t181 - t193 * t221 - t224 * t235;
	t263 = t219 * t224;
	t270 = t237 * t221;
	t180 = -t224 * t252 + t239 * t263 - t270;
	t174 = t180 ^ 2;
	t173 = t174 * t176 + 0.1e1;
	t277 = t176 * t180;
	t166 = -t193 * t224 + t235 * t221 + (t224 * t240 + t270) * qJD(3);
	t279 = t166 * t175 * t176;
	t281 = (t165 * t277 - t174 * t279) / t173 ^ 2;
	t205 = t203 * t204;
	t280 = (-t196 * t205 * t245 + t183 * t272) / t188 ^ 2;
	t278 = t168 * t200;
	t275 = t184 * t200;
	t274 = t185 * t200;
	t273 = t242 * t203;
	t271 = t238 * t221;
	t264 = t219 * t221;
	t256 = -0.2e1 * t283;
	t255 = -0.2e1 * t282;
	t254 = 0.2e1 * t281;
	t253 = 0.2e1 * t280;
	t251 = t217 * t265;
	t248 = -0.2e1 * t203 * t280;
	t247 = 0.2e1 * t180 * t279;
	t246 = t217 * t250;
	t241 = t207 * t219 + t251;
	t190 = -t221 * t239 - t237 * t263;
	t191 = -t224 * t239 + t237 * t264;
	t234 = t184 + (t185 * t273 - t184) * t186;
	t179 = t221 * t241 - t224 * t238;
	t216 = t217 ^ 2;
	t195 = qJD(1) * t237 + qJD(2) * t207;
	t178 = -t224 * t241 - t271;
	t171 = 0.1e1 / t173;
	t161 = 0.1e1 / t163;
	t160 = t186 * t284;
	t158 = t234 * t200;
	t156 = (-t184 * t238 + t185 * t267) * t217 - t243 * t160;
	t154 = t253 * t284 + (t195 * t203 * t217 + (-t183 * t204 * t269 + (t204 * t238 * t216 * t222 + (0.2e1 * t205 * t216 * t218 * t222 ^ 2 - t204 * t268) * t242) * qJD(2)) * t218) * t186;
	t1 = [t200 * t248 + (t182 * t203 - t200 * t244) * t186, t154, 0, 0, 0, 0; t242 * t167 * t256 + (t183 * t167 + (-t155 * t242 + t158 * t182) * t168) * t161 + ((t158 * t255 + t234 * t276) * t161 + (t158 * t256 + ((-t159 * t186 * t273 + t253) * t275 + (t242 * t248 + t159 + (-t159 + t233) * t186) * t274) * t161) * t168) * t200, 0.2e1 * (t167 * t217 * t237 - t156 * t278) * t283 + ((t243 * t154 - (-t159 * t170 + t183 * t185) * t160) * t278 + (t200 * t255 + t276) * t156 + (-t193 * t167 + (t237 * t155 + (-t159 * t238 + t225 * t257) * t274 + (t195 + (qJD(2) * t160 - t159) * t267) * t275) * t168) * t217) * t161, 0, 0, 0, 0; (-t175 * t178 + t179 * t277) * t254 + ((-t194 * t263 + t195 * t221 + t224 * t246) * t175 + t179 * t247 + (-t178 * t166 - (t194 * t264 + t195 * t224 - t221 * t246) * t180 - t179 * t165) * t176 + (t179 * t175 - (t207 * t263 + t224 * t251 + t271) * t277) * qJD(3)) * t171, (-t175 * t190 + t191 * t277) * t254 + ((qJD(3) * t191 + t192 * t221 - t193 * t263) * t175 + t191 * t247 + (-t190 * t166 - (-qJD(3) * t190 + t192 * t224 + t193 * t264) * t180 - t191 * t165) * t176) * t171, -0.2e1 * t281 + 0.2e1 * (t165 * t176 * t171 + (-t171 * t279 - t176 * t281) * t180) * t180, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:13
	% EndTime: 2019-10-10 12:54:16
	% DurationCPUTime: 2.93s
	% Computational Cost: add. (8022->174), mult. (25165->321), div. (705->12), fcn. (31370->15), ass. (0->161)
	t337 = cos(pkin(7));
	t339 = sin(qJ(3));
	t436 = cos(pkin(6));
	t437 = sin(qJ(2));
	t388 = t436 * t437;
	t438 = sin(qJ(1));
	t374 = t438 * t388;
	t341 = cos(qJ(2));
	t342 = cos(qJ(1));
	t417 = t342 * t341;
	t357 = t374 - t417;
	t398 = t341 * t436;
	t358 = t342 * t437 + t438 * t398;
	t336 = sin(pkin(6));
	t435 = sin(pkin(7));
	t399 = t336 * t435;
	t382 = t438 * t399;
	t439 = cos(qJ(3));
	t300 = -t357 * t439 + (-t358 * t337 + t382) * t339;
	t420 = t336 * t337;
	t392 = t438 * t420;
	t319 = t358 * t435 + t392;
	t338 = sin(qJ(4));
	t340 = cos(qJ(4));
	t280 = t300 * t338 - t319 * t340;
	t448 = 0.2e1 * t280;
	t324 = t438 * t341 + t342 * t388;
	t390 = t342 * t399;
	t375 = t439 * t390;
	t359 = -t324 * t339 - t375;
	t335 = t438 * t437;
	t380 = -t342 * t398 + t335;
	t363 = t380 * t439;
	t361 = t337 * t363;
	t294 = t361 - t359;
	t292 = t294 ^ 2;
	t401 = t437 * t339;
	t402 = t439 * t341;
	t366 = t337 * t402 - t401;
	t384 = t435 * t436;
	t373 = t439 * t384;
	t316 = -t366 * t336 - t373;
	t314 = 0.1e1 / t316 ^ 2;
	t286 = t292 * t314 + 0.1e1;
	t284 = 0.1e1 / t286;
	t371 = t380 * t339;
	t404 = t324 * t439;
	t353 = -t337 * t371 + t404;
	t310 = t358 * qJD(1) + t324 * qJD(2);
	t311 = -qJD(1) * t374 - qJD(2) * t335 + (qJD(2) * t436 + qJD(1)) * t417;
	t331 = t339 * t390;
	t369 = t439 * t382;
	t403 = t337 * t439;
	t362 = -qJD(1) * t369 - qJD(3) * t331 + t310 * t403 + t311 * t339;
	t269 = t353 * qJD(3) + t362;
	t391 = t437 * t439;
	t418 = t339 * t341;
	t364 = t337 * t391 + t418;
	t367 = t337 * t418 + t391;
	t381 = t339 * t384;
	t290 = qJD(3) * t381 + (t364 * qJD(2) + t367 * qJD(3)) * t336;
	t313 = 0.1e1 / t316;
	t422 = t294 * t314;
	t379 = -t269 * t313 + t290 * t422;
	t251 = t379 * t284;
	t287 = atan2(-t294, t316);
	t282 = sin(t287);
	t283 = cos(t287);
	t383 = -t282 * t316 - t283 * t294;
	t246 = t383 * t251 - t282 * t269 + t283 * t290;
	t263 = -t282 * t294 + t283 * t316;
	t261 = 0.1e1 / t263 ^ 2;
	t447 = t246 * t261;
	t446 = t290 * t314;
	t356 = t358 * t439;
	t444 = -t337 * t356 + t339 * t357 + t369;
	t293 = t444 ^ 2;
	t257 = t293 * t261 + 0.1e1;
	t255 = 0.1e1 / t257;
	t260 = 0.1e1 / t263;
	t309 = t324 * qJD(1) + t358 * qJD(2);
	t351 = t380 * qJD(1) + t357 * qJD(2);
	t349 = t351 * t439;
	t267 = -qJD(1) * t375 + t300 * qJD(3) - t309 * t339 - t337 * t349;
	t426 = t267 * t261;
	t433 = t260 * t447;
	t434 = (-t293 * t433 - t426 * t444) / t257 ^ 2;
	t445 = -t255 * t447 - 0.2e1 * t260 * t434;
	t440 = -0.2e1 * t444;
	t393 = t433 * t440;
	t415 = 0.2e1 * t434;
	t428 = t261 * t444;
	t443 = -t415 * t428 + (t393 - t426) * t255;
	t442 = -(qJD(1) * t382 - t324 * qJD(3) - t310 * t337) * t339 + qJD(3) * t375 - t311 * t439;
	t281 = t300 * t340 + t319 * t338;
	t275 = 0.1e1 / t281;
	t276 = 0.1e1 / t281 ^ 2;
	t441 = -0.2e1 * t294;
	t350 = t351 * t339;
	t268 = qJD(1) * t331 + t444 * qJD(3) - t309 * t439 + t337 * t350;
	t405 = t342 * t420;
	t301 = qJD(1) * t405 - t351 * t435;
	t258 = t281 * qJD(4) + t268 * t338 - t301 * t340;
	t274 = t280 ^ 2;
	t266 = t274 * t276 + 0.1e1;
	t425 = t276 * t280;
	t416 = qJD(4) * t280;
	t259 = t268 * t340 + t301 * t338 - t416;
	t429 = t259 * t275 * t276;
	t432 = (t258 * t425 - t274 * t429) / t266 ^ 2;
	t424 = t313 * t446;
	t431 = (t269 * t422 - t292 * t424) / t286 ^ 2;
	t430 = t255 * t260;
	t264 = 0.1e1 / t266;
	t427 = t264 * t276;
	t423 = t294 * t313;
	t419 = t337 * t339;
	t414 = -0.2e1 * t432;
	t413 = -0.2e1 * t431;
	t412 = t276 * t432;
	t411 = t313 * t431;
	t410 = t255 * t428;
	t409 = t258 * t427;
	t406 = t280 * t429;
	t400 = t357 * t435;
	t397 = t435 * t309;
	t395 = 0.2e1 * t406;
	t394 = t424 * t441;
	t372 = t337 * t380;
	t354 = t339 * t372 - t404;
	t298 = t331 + t354;
	t318 = -t380 * t435 + t405;
	t279 = t298 * t340 + t318 * t338;
	t278 = t298 * t338 - t318 * t340;
	t378 = -t338 * t275 + t340 * t425;
	t296 = -t331 + t353;
	t317 = t367 * t336 + t381;
	t377 = -t296 * t313 + t317 * t422;
	t306 = t324 * t403 - t371;
	t323 = t364 * t336;
	t376 = -t306 * t313 + t323 * t422;
	t308 = t357 * t419 - t356;
	t289 = t308 * t340 - t338 * t400;
	t370 = -t308 * t338 - t340 * t400;
	t368 = -t282 + (t283 * t423 + t282) * t284;
	t365 = -t337 * t401 + t402;
	t360 = t439 * t372;
	t307 = -t358 * t339 - t357 * t403;
	t303 = (t366 * qJD(2) + t365 * qJD(3)) * t336;
	t302 = -qJD(1) * t392 - t310 * t435;
	t291 = qJD(3) * t373 + (t365 * qJD(2) + t366 * qJD(3)) * t336;
	t273 = t311 * t403 - t310 * t339 + (-t324 * t419 - t363) * qJD(3);
	t272 = -t307 * qJD(3) + t309 * t419 + t349;
	t271 = qJD(3) * t360 + t442;
	t270 = -qJD(3) * t361 - t442;
	t254 = t376 * t284;
	t253 = t377 * t284;
	t247 = t383 * t253 - t282 * t296 + t283 * t317;
	t245 = t376 * t413 + (t323 * t394 - t273 * t313 + (t269 * t323 + t290 * t306 + t294 * t303) * t314) * t284;
	t244 = t377 * t413 + (t317 * t394 - t270 * t313 + (t269 * t317 + t290 * t296 + t291 * t294) * t314) * t284;
	t1 = [t411 * t440 + (-t267 * t313 - t444 * t446) * t284, t245, t244, 0, 0, 0; (t354 * qJD(3) - t362) * t430 + (t368 * t267 - ((-t251 * t284 * t423 + t413) * t282 + (t411 * t441 - t251 + (t251 - t379) * t284) * t283) * t444) * t410 + t445 * (-t360 + t359) - t443 * t368 * t444, (t308 * qJD(3) - t309 * t403 + t350) * t430 + ((-t245 * t294 - t254 * t269 + t303 + (-t254 * t316 - t306) * t251) * t283 + (-t245 * t316 - t254 * t290 - t273 + (t254 * t294 - t323) * t251) * t282) * t410 + t445 * t307 + t443 * (t383 * t254 - t282 * t306 + t283 * t323), (-t247 * t428 - t260 * t300) * t415 + (t247 * t393 + t268 * t260 + (-t300 * t246 - t247 * t267 - (-(-t244 * t294 - t253 * t269 + t291 + (-t253 * t316 - t296) * t251) * t283 - (-t244 * t316 - t253 * t290 - t270 + (t253 * t294 - t317) * t251) * t282) * t444) * t261) * t255, 0, 0, 0; 0.2e1 * (-t275 * t278 + t279 * t425) * t432 + ((t279 * qJD(4) + t271 * t338 - t302 * t340) * t275 + t279 * t395 + (-t278 * t259 - (-t278 * qJD(4) + t271 * t340 + t302 * t338) * t280 - t279 * t258) * t276) * t264, (t412 * t448 - t409) * t289 - (-t259 * t427 + t275 * t414) * t370 + ((t289 * qJD(4) + t272 * t338 + t340 * t397) * t275 - (t370 * qJD(4) + t272 * t340 - t338 * t397) * t425 + t289 * t395) * t264, -t378 * t444 * t414 + (t378 * t267 - ((-qJD(4) * t275 - 0.2e1 * t406) * t340 + (t258 * t340 + (t259 - t416) * t338) * t276) * t444) * t264, t414 + (t409 + (-t264 * t429 - t412) * t280) * t448, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:14
	% EndTime: 2019-10-10 12:54:22
	% DurationCPUTime: 8.10s
	% Computational Cost: add. (18619->234), mult. (55569->452), div. (959->12), fcn. (70289->17), ass. (0->190)
	t523 = cos(pkin(6));
	t524 = sin(qJ(2));
	t469 = t523 * t524;
	t422 = cos(qJ(2));
	t525 = sin(qJ(1));
	t482 = t525 * t422;
	t526 = cos(qJ(1));
	t403 = t526 * t469 + t482;
	t442 = t523 * t482 + t526 * t524;
	t393 = t442 * qJD(1) + t403 * qJD(2);
	t412 = t525 * t524;
	t455 = t525 * t469;
	t470 = t523 * t526;
	t394 = -qJD(1) * t455 - qJD(2) * t412 + (t526 * qJD(1) + qJD(2) * t470) * t422;
	t417 = cos(pkin(7));
	t419 = sin(qJ(3));
	t421 = cos(qJ(3));
	t414 = sin(pkin(7));
	t415 = sin(pkin(6));
	t483 = t415 * t525;
	t471 = qJD(1) * t483;
	t464 = t414 * t471;
	t532 = -t422 * t470 + t412;
	t444 = t532 * t417;
	t484 = t415 * t526;
	t474 = t414 * t484;
	t435 = t444 + t474;
	t529 = t403 * t419 + t435 * t421;
	t335 = t529 * qJD(3) - (-t393 * t417 + t464) * t419 - t394 * t421;
	t504 = t403 * t421;
	t383 = t435 * t419 - t504;
	t418 = sin(qJ(4));
	t420 = cos(qJ(4));
	t437 = t414 * t532 - t417 * t484;
	t364 = t383 * t418 + t437 * t420;
	t447 = t393 * t414 + t417 * t471;
	t326 = t364 * qJD(4) - t335 * t420 + t447 * t418;
	t365 = t383 * t420 - t437 * t418;
	t539 = t365 * qJD(4) + t335 * t418 + t447 * t420;
	t481 = t524 * t419;
	t497 = t421 * t422;
	t451 = -t417 * t481 + t497;
	t452 = t417 * t497 - t481;
	t479 = t414 * t523;
	t468 = qJD(3) * t479;
	t372 = t421 * t468 + (t451 * qJD(2) + t452 * qJD(3)) * t415;
	t480 = t524 * t421;
	t498 = t419 * t422;
	t453 = t417 * t498 + t480;
	t398 = t453 * t415 + t419 * t479;
	t501 = t414 * t422;
	t402 = -t415 * t501 + t523 * t417;
	t377 = t398 * t420 + t402 * t418;
	t485 = t414 * t524;
	t475 = t415 * t485;
	t463 = qJD(2) * t475;
	t350 = t377 * qJD(4) + t372 * t418 - t420 * t463;
	t376 = t398 * t418 - t402 * t420;
	t374 = 0.1e1 / t376 ^ 2;
	t534 = t350 * t374;
	t373 = 0.1e1 / t376;
	t397 = t452 * t415 + t421 * t479;
	t509 = t364 * t374;
	t458 = t373 * t529 - t397 * t509;
	t533 = t418 * t458;
	t440 = t442 * t421;
	t472 = t414 * t483;
	t531 = -t417 * t440 + t421 * t472;
	t349 = atan2(t364, t376);
	t344 = sin(t349);
	t345 = cos(t349);
	t319 = t344 * t364 + t345 * t376;
	t316 = 0.1e1 / t319;
	t441 = -t526 * t422 + t455;
	t385 = -t441 * t421 + (-t442 * t417 + t472) * t419;
	t434 = t442 * t414 + t417 * t483;
	t367 = t385 * t420 + t434 * t418;
	t384 = -t419 * t441 - t531;
	t413 = sin(pkin(13));
	t416 = cos(pkin(13));
	t343 = t367 * t416 + t384 * t413;
	t337 = 0.1e1 / t343;
	t317 = 0.1e1 / t319 ^ 2;
	t338 = 0.1e1 / t343 ^ 2;
	t528 = 0.2e1 * t364;
	t433 = t434 * t420;
	t366 = t385 * t418 - t433;
	t527 = 0.2e1 * t366;
	t360 = t366 ^ 2;
	t313 = t317 * t360 + 0.1e1;
	t392 = t403 * qJD(1) + t442 * qJD(2);
	t439 = t441 * qJD(2);
	t432 = qJD(1) * t532 + t439;
	t431 = t432 * t419;
	t465 = qJD(1) * t474;
	t496 = qJD(3) * t419;
	t331 = t531 * qJD(3) - t392 * t421 + t417 * t431 + t419 * t465 + t441 * t496;
	t429 = -t437 * qJD(1) - t414 * t439;
	t323 = t367 * qJD(4) + t331 * t418 - t429 * t420;
	t517 = t317 * t366;
	t359 = t364 ^ 2;
	t348 = t359 * t374 + 0.1e1;
	t346 = 0.1e1 / t348;
	t461 = -t350 * t509 + t373 * t539;
	t306 = t461 * t346;
	t466 = -t344 * t376 + t345 * t364;
	t300 = t466 * t306 + t344 * t539 + t345 * t350;
	t318 = t316 * t317;
	t521 = t300 * t318;
	t522 = (t323 * t517 - t360 * t521) / t313 ^ 2;
	t511 = t373 * t534;
	t520 = (-t359 * t511 + t509 * t539) / t348 ^ 2;
	t495 = qJD(4) * t418;
	t324 = qJD(4) * t433 + t331 * t420 - t385 * t495 + t429 * t418;
	t430 = t432 * t421;
	t330 = t385 * qJD(3) - t392 * t419 - t417 * t430 - t421 * t465;
	t315 = t324 * t416 + t330 * t413;
	t519 = t315 * t337 * t338;
	t518 = t317 * t323;
	t516 = t337 * t413;
	t342 = t367 * t413 - t384 * t416;
	t515 = t338 * t342;
	t514 = t342 * t416;
	t513 = t344 * t366;
	t512 = t345 * t366;
	t510 = t364 * t373;
	t508 = t384 * t418;
	t507 = t384 * t420;
	t503 = t414 * t418;
	t502 = t414 * t420;
	t500 = t417 * t419;
	t499 = t417 * t421;
	t494 = qJD(4) * t420;
	t493 = 0.2e1 * t522;
	t314 = t324 * t413 - t330 * t416;
	t336 = t342 ^ 2;
	t322 = t336 * t338 + 0.1e1;
	t492 = 0.2e1 * (t314 * t515 - t336 * t519) / t322 ^ 2;
	t491 = -0.2e1 * t520;
	t490 = t318 * t527;
	t489 = t373 * t520;
	t488 = t342 * t519;
	t487 = t317 * t513;
	t486 = t317 * t512;
	t478 = t300 * t490;
	t477 = 0.2e1 * t488;
	t476 = t511 * t528;
	t460 = t365 * t373 - t377 * t509;
	t388 = -t403 * t500 - t421 * t532;
	t368 = t388 * t418 - t403 * t502;
	t401 = t451 * t415;
	t391 = t401 * t418 - t420 * t475;
	t459 = -t368 * t373 - t391 * t509;
	t390 = t441 * t500 - t440;
	t457 = -t390 * t418 - t441 * t502;
	t370 = t390 * t420 - t441 * t503;
	t456 = -t330 * t420 + t384 * t495;
	t450 = -t417 * t480 - t498;
	t449 = -t344 + (-t345 * t510 + t344) * t346;
	t448 = -t393 * t499 - t394 * t419 + t421 * t464 + t474 * t496;
	t445 = t532 * t419;
	t389 = -t442 * t419 - t441 * t499;
	t371 = -t419 * t468 + (t450 * qJD(2) - t453 * qJD(3)) * t415;
	t358 = t401 * t494 + ((t450 * qJD(3) + qJD(4) * t485) * t418 + (-t453 * t418 - t420 * t501) * qJD(2)) * t415;
	t357 = t370 * t416 + t389 * t413;
	t356 = t370 * t413 - t389 * t416;
	t355 = t385 * t413 - t416 * t507;
	t354 = -t385 * t416 - t413 * t507;
	t353 = -t389 * qJD(3) + t392 * t500 + t430;
	t352 = t390 * qJD(3) - t392 * t499 + t431;
	t351 = -t376 * qJD(4) + t372 * t420 + t418 * t463;
	t341 = t365 * t416 - t413 * t529;
	t340 = t365 * t413 + t416 * t529;
	t334 = (t419 * t444 - t504) * qJD(3) + t448;
	t332 = (t417 * t445 - t504) * qJD(3) + t448;
	t329 = (-t394 * t500 - t393 * t421 + (-t403 * t499 + t445) * qJD(3)) * t418 + t388 * t494 - t394 * t502 + t403 * t414 * t495;
	t328 = t457 * qJD(4) + t353 * t420 - t392 * t503;
	t320 = 0.1e1 / t322;
	t311 = 0.1e1 / t313;
	t310 = t346 * t533;
	t309 = t459 * t346;
	t308 = t460 * t346;
	t305 = t449 * t366;
	t303 = (t344 * t529 + t345 * t397) * t418 + t466 * t310;
	t302 = t466 * t309 - t344 * t368 + t345 * t391;
	t301 = t466 * t308 + t344 * t365 + t345 * t377;
	t299 = t459 * t491 + (t391 * t476 - t329 * t373 + (t350 * t368 - t358 * t364 - t391 * t539) * t374) * t346;
	t297 = t460 * t491 + (t377 * t476 - t326 * t373 + (-t350 * t365 - t351 * t364 - t377 * t539) * t374) * t346;
	t296 = t491 * t533 + (t458 * t494 + (t397 * t476 - t332 * t373 + (-t350 * t529 - t364 * t371 - t397 * t539) * t374) * t418) * t346;
	t1 = [t489 * t527 + (-t323 * t373 + t366 * t534) * t346, t299, t296, t297, 0, 0; -0.2e1 * t364 * t316 * t522 + (t539 * t316 + (-t300 * t364 - t305 * t323) * t317) * t311 + (t305 * t317 * t493 + (0.2e1 * t305 * t521 - (t306 * t346 * t510 + t491) * t487 - (t489 * t528 - t306 + (t306 - t461) * t346) * t486 - t449 * t518) * t311) * t366, (t302 * t517 + t316 * t457) * t493 + ((t370 * qJD(4) + t353 * t418 + t392 * t502) * t316 + t302 * t478 + (t457 * t300 - t302 * t323 - (t299 * t364 + t309 * t539 + t358 + (-t309 * t376 - t368) * t306) * t512 - (-t299 * t376 - t309 * t350 - t329 + (-t309 * t364 - t391) * t306) * t513) * t317) * t311, (t303 * t517 + t316 * t508) * t493 + (-t303 * t518 + (-t330 * t418 - t384 * t494) * t316 + (t303 * t490 + t317 * t508) * t300 - (t397 * t494 + t296 * t364 + t310 * t539 + t371 * t418 + (-t310 * t376 + t418 * t529) * t306) * t486 - (t529 * t494 - t296 * t376 - t310 * t350 - t332 * t418 + (-t310 * t364 - t397 * t418) * t306) * t487) * t311, (t301 * t517 - t316 * t367) * t493 + (t301 * t478 + t324 * t316 + (-t367 * t300 - t301 * t323 - (t297 * t364 + t308 * t539 + t351 + (-t308 * t376 + t365) * t306) * t512 - (-t297 * t376 - t308 * t350 - t326 + (-t308 * t364 - t377) * t306) * t513) * t317) * t311, 0, 0; (-t337 * t340 + t341 * t515) * t492 + ((-t326 * t413 - t334 * t416) * t337 + t341 * t477 + (-t340 * t315 - (-t326 * t416 + t334 * t413) * t342 - t341 * t314) * t338) * t320, (-t337 * t356 + t357 * t515) * t492 + ((t328 * t413 - t352 * t416) * t337 + t357 * t477 + (-t356 * t315 - (t328 * t416 + t352 * t413) * t342 - t357 * t314) * t338) * t320, (-t337 * t354 + t355 * t515) * t492 + ((-t331 * t416 + t456 * t413) * t337 + t355 * t477 + (-t354 * t315 - (t331 * t413 + t456 * t416) * t342 - t355 * t314) * t338) * t320, (-t338 * t514 + t516) * t366 * t492 + (-0.2e1 * t366 * t416 * t488 - t323 * t516 + (t323 * t514 + (t314 * t416 + t315 * t413) * t366) * t338) * t320, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:54:15
	% EndTime: 2019-10-10 12:54:23
	% DurationCPUTime: 8.61s
	% Computational Cost: add. (20400->242), mult. (59163->460), div. (983->12), fcn. (74815->17), ass. (0->187)
	t569 = cos(pkin(6));
	t570 = sin(qJ(2));
	t519 = t569 * t570;
	t466 = cos(qJ(2));
	t571 = sin(qJ(1));
	t533 = t571 * t466;
	t572 = cos(qJ(1));
	t448 = t572 * t519 + t533;
	t485 = t569 * t533 + t572 * t570;
	t438 = t485 * qJD(1) + t448 * qJD(2);
	t457 = t571 * t570;
	t500 = t571 * t519;
	t520 = t569 * t572;
	t439 = -qJD(1) * t500 - qJD(2) * t457 + (t572 * qJD(1) + qJD(2) * t520) * t466;
	t463 = sin(qJ(3));
	t465 = cos(qJ(3));
	t461 = sin(pkin(6));
	t567 = sin(pkin(7));
	t531 = t461 * t567;
	t508 = t571 * t531;
	t498 = qJD(1) * t508;
	t568 = cos(pkin(7));
	t511 = t572 * t531;
	t496 = -t466 * t520 + t457;
	t579 = t496 * t568;
	t477 = t579 + t511;
	t575 = t448 * t463 + t477 * t465;
	t387 = t575 * qJD(3) - (-t438 * t568 + t498) * t463 - t439 * t465;
	t548 = t448 * t465;
	t428 = t477 * t463 - t548;
	t462 = sin(qJ(4));
	t464 = cos(qJ(4));
	t532 = t461 * t568;
	t512 = t572 * t532;
	t478 = t496 * t567 - t512;
	t408 = t428 * t462 + t478 * t464;
	t509 = t571 * t532;
	t483 = qJD(1) * t509 + t438 * t567;
	t370 = t408 * qJD(4) - t387 * t464 + t483 * t462;
	t409 = t428 * t464 - t478 * t462;
	t588 = t409 * qJD(4) + t387 * t462 + t483 * t464;
	t585 = -t485 * t568 + t508;
	t528 = t465 * t568;
	t545 = qJD(3) * t463;
	t582 = (t463 * t579 - t548) * qJD(3) - t438 * t528 - t439 * t463 + t465 * t498 + t511 * t545;
	t518 = t568 * t570;
	t491 = -t463 * t518 + t465 * t466;
	t527 = t466 * t568;
	t492 = -t570 * t463 + t465 * t527;
	t515 = t569 * t567;
	t507 = qJD(3) * t515;
	t417 = t465 * t507 + (t491 * qJD(2) + t492 * qJD(3)) * t461;
	t493 = t463 * t527 + t570 * t465;
	t443 = t493 * t461 + t463 * t515;
	t447 = -t466 * t531 + t569 * t568;
	t422 = t443 * t464 + t447 * t462;
	t517 = t567 * t570;
	t513 = t461 * t517;
	t497 = qJD(2) * t513;
	t394 = t422 * qJD(4) + t417 * t462 - t464 * t497;
	t421 = t443 * t462 - t447 * t464;
	t419 = 0.1e1 / t421 ^ 2;
	t581 = t394 * t419;
	t418 = 0.1e1 / t421;
	t442 = t492 * t461 + t465 * t515;
	t553 = t408 * t419;
	t502 = t418 * t575 - t442 * t553;
	t580 = t462 * t502;
	t484 = -t572 * t466 + t500;
	t475 = t496 * qJD(1) + t484 * qJD(2);
	t578 = qJD(1) * t511 + t475 * t568;
	t577 = t585 * t465;
	t393 = atan2(t408, t421);
	t388 = sin(t393);
	t389 = cos(t393);
	t363 = t388 * t408 + t389 * t421;
	t360 = 0.1e1 / t363;
	t430 = t585 * t463 - t484 * t465;
	t476 = t485 * t567 + t509;
	t411 = t430 * t464 + t476 * t462;
	t429 = -t463 * t484 - t577;
	t460 = pkin(13) + qJ(6);
	t458 = sin(t460);
	t459 = cos(t460);
	t381 = t411 * t459 + t429 * t458;
	t375 = 0.1e1 / t381;
	t361 = 0.1e1 / t363 ^ 2;
	t376 = 0.1e1 / t381 ^ 2;
	t574 = 0.2e1 * t408;
	t410 = t430 * t462 - t476 * t464;
	t573 = 0.2e1 * t410;
	t404 = t410 ^ 2;
	t359 = t404 * t361 + 0.1e1;
	t437 = t448 * qJD(1) + t485 * qJD(2);
	t383 = t577 * qJD(3) - t437 * t465 + t578 * t463 + t484 * t545;
	t473 = qJD(1) * t512 - t475 * t567;
	t367 = t411 * qJD(4) + t383 * t462 - t473 * t464;
	t559 = t367 * t361;
	t403 = t408 ^ 2;
	t392 = t403 * t419 + 0.1e1;
	t390 = 0.1e1 / t392;
	t506 = -t394 * t553 + t418 * t588;
	t350 = t506 * t390;
	t514 = -t388 * t421 + t389 * t408;
	t344 = t514 * t350 + t388 * t588 + t389 * t394;
	t362 = t360 * t361;
	t565 = t344 * t362;
	t566 = (-t404 * t565 + t410 * t559) / t359 ^ 2;
	t368 = -t410 * qJD(4) + t383 * t464 + t473 * t462;
	t382 = t430 * qJD(3) - t437 * t463 - t578 * t465;
	t353 = t381 * qJD(6) + t368 * t458 - t382 * t459;
	t380 = t411 * t458 - t429 * t459;
	t374 = t380 ^ 2;
	t366 = t374 * t376 + 0.1e1;
	t558 = t376 * t380;
	t543 = qJD(6) * t380;
	t354 = t368 * t459 + t382 * t458 - t543;
	t561 = t354 * t375 * t376;
	t563 = (t353 * t558 - t374 * t561) / t366 ^ 2;
	t555 = t418 * t581;
	t562 = (-t403 * t555 + t553 * t588) / t392 ^ 2;
	t560 = t361 * t410;
	t557 = t388 * t410;
	t556 = t389 * t410;
	t554 = t408 * t418;
	t552 = t429 * t462;
	t551 = t429 * t464;
	t547 = t458 * t375;
	t546 = t459 * t380;
	t544 = qJD(4) * t464;
	t542 = 0.2e1 * t566;
	t541 = -0.2e1 * t563;
	t540 = 0.2e1 * t563;
	t539 = -0.2e1 * t562;
	t538 = t362 * t573;
	t537 = t418 * t562;
	t536 = t361 * t557;
	t535 = t361 * t556;
	t534 = t380 * t561;
	t530 = t462 * t567;
	t529 = t463 * t568;
	t526 = t567 * t464;
	t525 = -0.2e1 * t360 * t566;
	t524 = t361 * t542;
	t523 = t344 * t538;
	t522 = 0.2e1 * t534;
	t521 = t555 * t574;
	t516 = qJD(6) * t551 + t383;
	t379 = t409 * t459 - t458 * t575;
	t378 = t409 * t458 + t459 * t575;
	t435 = -t485 * t465 + t484 * t529;
	t414 = t435 * t464 - t484 * t530;
	t434 = -t485 * t463 - t484 * t528;
	t401 = t414 * t459 + t434 * t458;
	t400 = t414 * t458 - t434 * t459;
	t505 = t376 * t546 - t547;
	t504 = t409 * t418 - t422 * t553;
	t433 = -t448 * t529 - t496 * t465;
	t412 = t433 * t462 - t448 * t526;
	t446 = t491 * t461;
	t436 = t446 * t462 - t464 * t513;
	t503 = -t412 * t418 - t436 * t553;
	t495 = -t435 * t462 - t484 * t526;
	t494 = -t388 + (-t389 * t554 + t388) * t390;
	t490 = -t463 * t466 - t465 * t518;
	t489 = qJD(4) * t552 + qJD(6) * t430 - t382 * t464;
	t416 = -t463 * t507 + (t490 * qJD(2) - t493 * qJD(3)) * t461;
	t402 = t446 * t544 + ((t490 * qJD(3) + qJD(4) * t517) * t462 + (-t493 * t462 - t466 * t526) * qJD(2)) * t461;
	t399 = t430 * t458 - t459 * t551;
	t398 = -t430 * t459 - t458 * t551;
	t397 = -t434 * qJD(3) + t437 * t529 + t475 * t465;
	t396 = t435 * qJD(3) - t437 * t528 + t475 * t463;
	t395 = -t421 * qJD(4) + t417 * t464 + t462 * t497;
	t373 = (-t439 * t529 - t438 * t465 + (-t448 * t528 + t496 * t463) * qJD(3)) * t462 + t433 * t544 - t439 * t526 + t448 * qJD(4) * t530;
	t372 = t495 * qJD(4) + t397 * t464 - t437 * t530;
	t364 = 0.1e1 / t366;
	t357 = 0.1e1 / t359;
	t356 = t390 * t580;
	t355 = t503 * t390;
	t352 = t504 * t390;
	t349 = t494 * t410;
	t347 = (t388 * t575 + t389 * t442) * t462 + t514 * t356;
	t345 = t514 * t352 + t388 * t409 + t389 * t422;
	t343 = t503 * t539 + (t436 * t521 - t373 * t418 + (t394 * t412 - t402 * t408 - t436 * t588) * t419) * t390;
	t341 = t504 * t539 + (t422 * t521 - t370 * t418 + (-t394 * t409 - t395 * t408 - t422 * t588) * t419) * t390;
	t340 = t539 * t580 + (t502 * t544 + (t442 * t521 - t582 * t418 + (-t394 * t575 - t408 * t416 - t442 * t588) * t419) * t462) * t390;
	t1 = [t537 * t573 + (-t367 * t418 + t410 * t581) * t390, t343, t340, t341, 0, 0; t408 * t525 + (t588 * t360 + (-t408 * t344 - t349 * t367) * t361) * t357 + (t349 * t524 + (0.2e1 * t349 * t565 - (t350 * t390 * t554 + t539) * t536 - (t537 * t574 - t350 + (t350 - t506) * t390) * t535 - t494 * t559) * t357) * t410, -t495 * t525 + ((t414 * qJD(4) + t397 * t462 + t437 * t526) * t360 + t495 * t361 * t344 - ((t343 * t408 + t355 * t588 + t402 + (-t355 * t421 - t412) * t350) * t389 + (-t343 * t421 - t355 * t394 - t373 + (-t355 * t408 - t436) * t350) * t388) * t560) * t357 + (t410 * t524 + (-t559 + t523) * t357) * (t514 * t355 - t388 * t412 + t389 * t436), (t347 * t560 + t360 * t552) * t542 + (-t347 * t559 + (-t382 * t462 - t429 * t544) * t360 + (t347 * t538 + t361 * t552) * t344 - (t442 * t544 + t340 * t408 + t356 * t588 + t416 * t462 + (-t356 * t421 + t462 * t575) * t350) * t535 - (t575 * t544 - t340 * t421 - t356 * t394 - t582 * t462 + (-t356 * t408 - t442 * t462) * t350) * t536) * t357, (t345 * t560 - t360 * t411) * t542 + (t345 * t523 + t368 * t360 + (-t411 * t344 - t345 * t367 - (t341 * t408 + t352 * t588 + t395 + (-t352 * t421 + t409) * t350) * t556 - (-t341 * t421 - t352 * t394 - t370 + (-t352 * t408 - t422) * t350) * t557) * t361) * t357, 0, 0; (-t375 * t378 + t379 * t558) * t540 + ((t379 * qJD(6) - t370 * t458 - t459 * t582) * t375 + t379 * t522 + (-t378 * t354 - (-t378 * qJD(6) - t370 * t459 + t458 * t582) * t380 - t379 * t353) * t376) * t364, (-t375 * t400 + t401 * t558) * t540 + ((t401 * qJD(6) + t372 * t458 - t396 * t459) * t375 + t401 * t522 + (-t400 * t354 - (-t400 * qJD(6) + t372 * t459 + t396 * t458) * t380 - t401 * t353) * t376) * t364, (-t375 * t398 + t399 * t558) * t540 + (t399 * t522 - t516 * t375 * t459 + t489 * t547 + (-t516 * t380 * t458 - t399 * t353 - t398 * t354 - t489 * t546) * t376) * t364, t505 * t410 * t541 + (t505 * t367 + ((-qJD(6) * t375 - 0.2e1 * t534) * t459 + (t353 * t459 + (t354 - t543) * t458) * t376) * t410) * t364, 0, t541 + 0.2e1 * (t353 * t376 * t364 + (-t364 * t561 - t376 * t563) * t380) * t380;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end