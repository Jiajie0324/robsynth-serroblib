% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 02:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRPR14_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR14_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR14_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR14_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR14_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR14_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 02:32:43
% EndTime: 2019-05-08 02:36:27
% DurationCPUTime: 189.13s
% Computational Cost: add. (2414552->1294), mult. (5991834->2168), div. (0->0), fcn. (5114067->16), ass. (0->946)
t1416 = sin(pkin(13));
t1421 = cos(pkin(6));
t1661 = qJD(1) * t1421;
t1408 = qJD(2) + t1661;
t1424 = sin(qJ(3));
t1425 = sin(qJ(2));
t1429 = cos(qJ(3));
t1420 = cos(pkin(7));
t1430 = cos(qJ(2));
t1618 = t1420 * t1430;
t1417 = sin(pkin(7));
t1625 = t1417 * t1424;
t1418 = sin(pkin(6));
t1662 = qJD(1) * t1418;
t1366 = t1408 * t1625 + (t1424 * t1618 + t1425 * t1429) * t1662;
t1620 = t1418 * t1430;
t1602 = qJD(1) * t1620;
t1587 = t1417 * t1602;
t1628 = t1408 * t1420;
t1383 = qJD(3) - t1587 + t1628;
t1423 = sin(qJ(4));
t1428 = cos(qJ(4));
t1345 = t1366 * t1428 + t1383 * t1423;
t1588 = t1420 * t1602;
t1621 = t1418 * t1425;
t1603 = qJD(1) * t1621;
t1623 = t1417 * t1429;
t1364 = -t1408 * t1623 + t1424 * t1603 - t1429 * t1588;
t1359 = qJD(4) + t1364;
t1419 = cos(pkin(13));
t1305 = t1345 * t1416 - t1419 * t1359;
t1307 = t1345 * t1419 + t1359 * t1416;
t1252 = t1307 * t1305;
t1406 = qJD(2) * t1603;
t1608 = qJDD(1) * t1430;
t1580 = t1418 * t1608 - t1406;
t1589 = qJDD(1) * t1421 + qJDD(2);
t1443 = t1417 * t1589 + t1420 * t1580;
t1609 = qJDD(1) * t1425;
t1660 = qJD(1) * t1430;
t1489 = qJD(2) * t1660 + t1609;
t1452 = t1489 * t1418;
t1439 = t1424 * t1443 + t1429 * t1452;
t1322 = -t1364 * qJD(3) + t1439;
t1370 = -t1417 * t1580 + t1420 * t1589 + qJDD(3);
t1590 = t1322 * t1423 - t1428 * t1370;
t1261 = qJD(4) * t1345 + t1590;
t1683 = -t1252 + t1261;
t1695 = t1416 * t1683;
t1694 = t1419 * t1683;
t1422 = sin(qJ(6));
t1427 = cos(qJ(6));
t1244 = t1427 * t1305 + t1307 * t1422;
t1246 = -t1305 * t1422 + t1307 * t1427;
t1173 = t1246 * t1244;
t1455 = qJDD(6) + t1261;
t1685 = -t1173 + t1455;
t1693 = t1422 * t1685;
t1343 = t1366 * t1423 - t1428 * t1383;
t1295 = t1345 * t1343;
t1445 = t1424 * t1452 - t1429 * t1443;
t1442 = t1366 * qJD(3) + t1445;
t1321 = qJDD(4) + t1442;
t1682 = -t1295 + t1321;
t1692 = t1423 * t1682;
t1691 = t1427 * t1685;
t1690 = t1428 * t1682;
t1407 = t1408 ^ 2;
t1426 = sin(qJ(1));
t1431 = cos(qJ(1));
t1404 = t1426 * g(1) - t1431 * g(2);
t1493 = qJDD(1) * pkin(1) + t1404;
t1467 = t1421 * t1493;
t1405 = g(1) * t1431 + t1426 * g(2);
t1681 = qJD(1) ^ 2;
t1669 = t1681 * pkin(1);
t1488 = t1405 + t1669;
t1555 = t1589 * pkin(2);
t1671 = pkin(10) * t1417;
t1438 = t1407 * t1671 + t1425 * t1488 + t1430 * t1467 + t1555;
t1624 = t1417 * t1425;
t1494 = -pkin(2) * t1430 - pkin(10) * t1624;
t1486 = t1494 * t1418;
t1670 = pkin(10) * t1420;
t1605 = -pkin(9) - t1670;
t1672 = pkin(9) * t1421;
t1607 = t1430 * t1672;
t1667 = t1430 * g(3);
t1435 = (-t1667 + t1605 * t1609 + ((-t1425 * t1486 + t1607) * qJD(1) + (-qJD(2) + t1408) * pkin(10) * t1618) * qJD(1)) * t1418 + t1438;
t1668 = t1421 * g(3);
t1586 = t1406 * pkin(2) - t1668;
t1414 = t1425 ^ 2;
t1415 = t1430 ^ 2;
t1610 = t1414 + t1415;
t1614 = qJD(2) + t1408;
t1622 = t1417 * t1430;
t1627 = t1408 * t1425;
t1437 = ((-pkin(1) + t1494) * qJDD(1) + (pkin(2) * t1627 - pkin(9) * t1662 + (-t1420 * t1610 * t1662 - t1614 * t1622) * pkin(10)) * qJD(1) - t1404) * t1418 + t1586;
t1689 = t1417 * t1437 + t1420 * t1435;
t1413 = t1418 ^ 2;
t1688 = t1413 * t1425;
t1637 = t1366 * t1364;
t1444 = t1370 - t1637;
t1687 = t1424 * t1444;
t1686 = t1429 * t1444;
t1339 = qJD(6) + t1343;
t1229 = t1339 * t1244;
t1262 = -t1343 * qJD(4) + t1428 * t1322 + t1423 * t1370;
t1216 = -t1262 * t1416 + t1419 * t1321;
t1217 = t1419 * t1262 + t1416 * t1321;
t1454 = qJD(6) * t1244 - t1216 * t1422 - t1217 * t1427;
t1684 = -t1229 - t1454;
t1269 = t1343 * t1305;
t1170 = -t1269 - t1217;
t1168 = -t1269 + t1217;
t1315 = t1359 * t1343;
t1221 = -t1315 + t1262;
t1348 = t1383 * t1364;
t1283 = -t1348 + t1322;
t1591 = -t1427 * t1216 + t1217 * t1422;
t1066 = (qJD(6) - t1339) * t1246 + t1591;
t1218 = (qJD(4) - t1359) * t1345 + t1590;
t1242 = t1244 ^ 2;
t1243 = t1246 ^ 2;
t1680 = t1305 ^ 2;
t1304 = t1307 ^ 2;
t1338 = t1339 ^ 2;
t1679 = t1343 ^ 2;
t1342 = t1345 ^ 2;
t1678 = t1359 ^ 2;
t1360 = t1364 ^ 2;
t1361 = t1366 ^ 2;
t1677 = t1383 ^ 2;
t1676 = pkin(3) * t1424;
t1675 = pkin(3) * t1429;
t1674 = pkin(4) * t1423;
t1673 = pkin(9) * t1418;
t1333 = pkin(3) * t1364 - pkin(11) * t1366;
t1409 = g(3) * t1621;
t1453 = qJDD(1) * t1673 - t1405;
t1617 = t1421 * t1425;
t1291 = t1430 * t1453 + t1425 * t1467 - t1409 - pkin(2) * t1407 + t1443 * pkin(10) + (-pkin(1) * t1660 + (t1627 * t1670 + (pkin(9) * t1617 + t1430 * t1486) * qJD(1)) * t1418) * qJD(1);
t1615 = t1429 * t1291;
t1150 = -t1677 * pkin(3) + t1370 * pkin(11) - t1364 * t1333 + t1424 * t1689 + t1615;
t1634 = t1383 * t1366;
t1433 = -t1417 * t1435 + t1420 * t1437 - t1283 * pkin(11) + (t1442 + t1634) * pkin(3);
t1058 = t1428 * t1150 + t1423 * t1433;
t1292 = pkin(4) * t1343 - qJ(5) * t1345;
t1021 = -pkin(4) * t1678 + qJ(5) * t1321 - t1292 * t1343 + t1058;
t1181 = t1291 * t1424 - t1429 * t1689;
t1149 = -t1370 * pkin(3) - t1677 * pkin(11) + t1333 * t1366 + t1181;
t1047 = -t1221 * qJ(5) + (t1345 * t1359 + t1261) * pkin(4) + t1149;
t951 = 0.2e1 * qJD(5) * t1307 + t1021 * t1416 - t1419 * t1047;
t913 = pkin(5) * t1683 + pkin(12) * t1170 - t951;
t1266 = pkin(5) * t1343 - pkin(12) * t1307;
t952 = -0.2e1 * qJD(5) * t1305 + t1419 * t1021 + t1416 * t1047;
t924 = -pkin(5) * t1680 + pkin(12) * t1216 - t1266 * t1343 + t952;
t849 = t1422 * t913 + t1427 * t924;
t848 = t1422 * t924 - t1427 * t913;
t793 = t1422 * t849 - t1427 * t848;
t1666 = t1416 * t793;
t1665 = t1419 * t793;
t1057 = t1150 * t1423 - t1428 * t1433;
t1018 = -t1321 * pkin(4) - t1678 * qJ(5) + t1292 * t1345 + qJDD(5) + t1057;
t981 = -t1216 * pkin(5) - pkin(12) * t1680 + t1266 * t1307 + t1018;
t1664 = t1422 * t981;
t1663 = t1427 * t981;
t1659 = t1018 * t1416;
t1658 = t1018 * t1419;
t1131 = t1173 + t1455;
t1657 = t1131 * t1422;
t1656 = t1131 * t1427;
t1655 = t1149 * t1423;
t1654 = t1149 * t1428;
t1179 = t1252 + t1261;
t1653 = t1179 * t1416;
t1652 = t1179 * t1419;
t1233 = t1417 * t1438 - t1420 * t1586 + (t1417 * (-pkin(9) * t1609 - t1667) - t1420 * (-pkin(2) * t1608 - t1493) + ((t1417 * t1607 + (-t1494 * t1624 - t1420 * (-t1610 * t1670 - pkin(9))) * t1418) * qJD(1) + (-pkin(2) * t1425 + 0.2e1 * pkin(10) * t1622) * t1628) * qJD(1)) * t1418;
t1651 = t1233 * t1424;
t1650 = t1233 * t1429;
t1248 = t1295 + t1321;
t1649 = t1248 * t1423;
t1648 = t1248 * t1428;
t1647 = t1261 * t1423;
t1646 = t1307 * t1343;
t1310 = -t1370 - t1637;
t1645 = t1310 * t1424;
t1644 = t1310 * t1429;
t1643 = t1339 * t1422;
t1642 = t1339 * t1427;
t1641 = t1343 * t1416;
t1640 = t1343 * t1419;
t1639 = t1359 * t1423;
t1638 = t1359 * t1428;
t1448 = t1673 * t1681 + t1493;
t1377 = t1418 * t1448 + t1668;
t1636 = t1377 * t1425;
t1635 = t1377 * t1430;
t1633 = t1383 * t1429;
t1616 = t1425 * t1681;
t1593 = t1430 * t1616;
t1403 = t1413 * t1593;
t1385 = t1403 + t1589;
t1632 = t1385 * t1425;
t1631 = t1385 * t1430;
t1386 = -t1403 + t1589;
t1630 = t1386 * t1425;
t1629 = t1386 * t1430;
t1626 = t1413 * t1681;
t1619 = t1420 * t1424;
t1613 = qJD(3) + t1383;
t1606 = -pkin(4) * t1428 - pkin(3);
t1604 = t1408 * t1662;
t1601 = t1414 * t1626;
t1600 = t1415 * t1626;
t1599 = t1423 * t1173;
t1598 = t1428 * t1173;
t1597 = t1423 * t1252;
t1596 = t1428 * t1252;
t1595 = t1424 * t1295;
t1594 = t1429 * t1295;
t794 = t1422 * t848 + t1427 * t849;
t1592 = -t1408 + t1661;
t968 = t1057 * t1423 + t1428 * t1058;
t1380 = -t1404 * t1426 - t1431 * t1405;
t1402 = qJDD(1) * t1431 - t1426 * t1681;
t1585 = -pkin(8) * t1402 - g(3) * t1426;
t1384 = -t1601 - t1407;
t1353 = -t1384 * t1425 - t1629;
t1584 = pkin(9) * t1353 - t1636;
t1390 = -t1407 - t1600;
t1357 = t1390 * t1430 - t1632;
t1583 = pkin(9) * t1357 + t1635;
t1320 = -t1677 - t1360;
t1257 = t1320 * t1429 - t1687;
t1582 = pkin(10) * t1257 + t1650;
t1328 = -t1361 - t1677;
t1265 = -t1328 * t1424 + t1644;
t1581 = pkin(10) * t1265 - t1651;
t866 = t1416 * t952 - t1419 * t951;
t867 = t1416 * t951 + t1419 * t952;
t746 = t1419 * t794 - t1666;
t743 = t1423 * t981 + t1428 * t746;
t745 = t1416 * t794 + t1665;
t1579 = t1424 * t743 - t1429 * t745;
t851 = t1018 * t1423 + t1428 * t867;
t1578 = t1424 * t851 - t1429 * t866;
t1127 = -t1242 - t1243;
t1070 = -t1229 + t1454;
t974 = -t1066 * t1422 + t1070 * t1427;
t976 = -t1066 * t1427 - t1070 * t1422;
t899 = -t1416 * t974 + t1419 * t976;
t875 = t1127 * t1423 + t1428 * t899;
t897 = t1416 * t976 + t1419 * t974;
t1577 = t1424 * t875 - t1429 * t897;
t1172 = -t1243 + t1242;
t1065 = (qJD(6) + t1339) * t1246 + t1591;
t973 = -t1065 * t1422 + t1427 * t1684;
t975 = -t1065 * t1427 - t1422 * t1684;
t898 = -t1416 * t973 + t1419 * t975;
t883 = -t1172 * t1423 + t1428 * t898;
t896 = -t1416 * t975 - t1419 * t973;
t1576 = t1424 * t883 + t1429 * t896;
t1158 = -t1338 - t1242;
t1054 = t1158 * t1422 + t1691;
t1055 = t1158 * t1427 - t1693;
t966 = -t1054 * t1416 + t1055 * t1419;
t921 = t1065 * t1423 + t1428 * t966;
t965 = t1054 * t1419 + t1055 * t1416;
t1575 = t1424 * t921 - t1429 * t965;
t1193 = -t1243 - t1338;
t1082 = t1193 * t1427 - t1657;
t1083 = -t1193 * t1422 - t1656;
t986 = -t1082 * t1416 + t1083 * t1419;
t930 = t1423 * t1684 + t1428 * t986;
t985 = t1082 * t1419 + t1083 * t1416;
t1574 = t1424 * t930 - t1429 * t985;
t1228 = -t1243 + t1338;
t1098 = t1228 * t1427 + t1693;
t1100 = -t1228 * t1422 + t1691;
t1001 = -t1098 * t1416 + t1100 * t1419;
t940 = t1001 * t1428 - t1070 * t1423;
t999 = -t1098 * t1419 - t1100 * t1416;
t1573 = t1424 * t940 + t1429 * t999;
t1108 = -qJD(6) * t1246 - t1591;
t1061 = t1108 * t1427 + t1244 * t1643;
t1062 = -t1108 * t1422 + t1244 * t1642;
t971 = -t1061 * t1416 + t1062 * t1419;
t959 = t1428 * t971 - t1599;
t969 = -t1061 * t1419 - t1062 * t1416;
t1572 = t1424 * t959 + t1429 * t969;
t1063 = t1246 * t1642 - t1422 * t1454;
t1064 = -t1246 * t1643 - t1427 * t1454;
t972 = -t1063 * t1416 + t1064 * t1419;
t960 = t1428 * t972 + t1599;
t970 = -t1063 * t1419 - t1064 * t1416;
t1571 = t1424 * t960 + t1429 * t970;
t742 = t1423 * t746 - t1428 * t981;
t702 = -t1417 * t742 + t1420 * t1579;
t718 = t1424 * t745 + t1429 * t743;
t1570 = t1425 * t718 + t1430 * t702;
t850 = -t1018 * t1428 + t1423 * t867;
t773 = -t1417 * t850 + t1420 * t1578;
t806 = t1424 * t866 + t1429 * t851;
t1569 = t1425 * t806 + t1430 * t773;
t874 = -t1127 * t1428 + t1423 * t899;
t789 = -t1417 * t874 + t1420 * t1577;
t816 = t1424 * t897 + t1429 * t875;
t1568 = t1425 * t816 + t1430 * t789;
t882 = t1172 * t1428 + t1423 * t898;
t792 = -t1417 * t882 + t1420 * t1576;
t818 = -t1424 * t896 + t1429 * t883;
t1567 = t1425 * t818 + t1430 * t792;
t920 = -t1065 * t1428 + t1423 * t966;
t822 = -t1417 * t920 + t1420 * t1575;
t861 = t1424 * t965 + t1429 * t921;
t1566 = t1425 * t861 + t1430 * t822;
t929 = t1423 * t986 - t1428 * t1684;
t828 = -t1417 * t929 + t1420 * t1574;
t873 = t1424 * t985 + t1429 * t930;
t1565 = t1425 * t873 + t1430 * t828;
t938 = t1001 * t1423 + t1070 * t1428;
t835 = -t1417 * t938 + t1420 * t1573;
t886 = -t1424 * t999 + t1429 * t940;
t1564 = t1425 * t886 + t1430 * t835;
t1227 = t1242 - t1338;
t1099 = t1227 * t1422 + t1656;
t1101 = t1227 * t1427 - t1657;
t1000 = -t1099 * t1419 - t1101 * t1416;
t1002 = -t1099 * t1416 + t1101 * t1419;
t941 = t1002 * t1428 - t1066 * t1423;
t1554 = t1000 * t1429 + t1424 * t941;
t939 = t1002 * t1423 + t1066 * t1428;
t836 = -t1417 * t939 + t1420 * t1554;
t887 = -t1000 * t1424 + t1429 * t941;
t1563 = t1425 * t887 + t1430 * t836;
t957 = t1423 * t971 + t1598;
t841 = -t1417 * t957 + t1420 * t1572;
t880 = -t1424 * t969 + t1429 * t959;
t1562 = t1425 * t880 + t1430 * t841;
t958 = t1423 * t972 - t1598;
t842 = -t1417 * t958 + t1420 * t1571;
t881 = -t1424 * t970 + t1429 * t960;
t1561 = t1425 * t881 + t1430 * t842;
t1548 = -t1149 * t1429 + t1424 * t968;
t967 = -t1057 * t1428 + t1058 * t1423;
t872 = -t1417 * t967 + t1420 * t1548;
t947 = t1149 * t1424 + t1429 * t968;
t1560 = t1425 * t947 + t1430 * t872;
t1145 = (-t1244 * t1422 - t1246 * t1427) * t1339;
t1146 = (-t1244 * t1427 + t1246 * t1422) * t1339;
t1051 = -t1145 * t1416 + t1146 * t1419;
t1026 = t1051 * t1423 - t1428 * t1455;
t1027 = t1051 * t1428 + t1423 * t1455;
t1050 = -t1145 * t1419 - t1146 * t1416;
t1545 = t1027 * t1424 + t1050 * t1429;
t907 = -t1026 * t1417 + t1420 * t1545;
t963 = t1027 * t1429 - t1050 * t1424;
t1559 = t1425 * t963 + t1430 * t907;
t1165 = -t1216 - t1646;
t1094 = -t1165 * t1419 - t1170 * t1416;
t1206 = t1304 + t1680;
t1031 = t1094 * t1423 + t1206 * t1428;
t1032 = t1094 * t1428 - t1206 * t1423;
t1092 = -t1165 * t1416 + t1170 * t1419;
t1543 = t1032 * t1424 - t1092 * t1429;
t917 = -t1031 * t1417 + t1420 * t1543;
t977 = t1032 * t1429 + t1092 * t1424;
t1558 = t1425 * t977 + t1430 * t917;
t1166 = t1216 - t1646;
t1093 = t1166 * t1419 - t1168 * t1416;
t1251 = -t1304 + t1680;
t1048 = t1093 * t1423 + t1251 * t1428;
t1049 = t1093 * t1428 - t1251 * t1423;
t1091 = -t1166 * t1416 - t1168 * t1419;
t1541 = t1049 * t1424 + t1091 * t1429;
t927 = -t1048 * t1417 + t1420 * t1541;
t983 = t1049 * t1429 - t1091 * t1424;
t1557 = t1425 * t983 + t1430 * t927;
t1231 = -t1679 - t1680;
t1119 = t1231 * t1419 - t1695;
t1043 = t1119 * t1423 + t1166 * t1428;
t1044 = t1119 * t1428 - t1166 * t1423;
t1118 = t1231 * t1416 + t1694;
t1542 = t1044 * t1424 - t1118 * t1429;
t935 = -t1043 * t1417 + t1420 * t1542;
t998 = t1044 * t1429 + t1118 * t1424;
t1556 = t1425 * t998 + t1430 * t935;
t1237 = -t1304 - t1679;
t1129 = -t1237 * t1416 - t1652;
t1060 = t1129 * t1428 + t1168 * t1423;
t1128 = t1237 * t1419 - t1653;
t1004 = t1060 * t1429 + t1128 * t1424;
t1059 = t1129 * t1423 - t1168 * t1428;
t1540 = t1060 * t1424 - t1128 * t1429;
t943 = -t1059 * t1417 + t1420 * t1540;
t1553 = t1004 * t1425 + t1430 * t943;
t1268 = -t1304 + t1679;
t1143 = -t1268 * t1416 + t1694;
t1078 = t1143 * t1428 - t1170 * t1423;
t1141 = -t1268 * t1419 - t1695;
t1006 = t1078 * t1429 - t1141 * t1424;
t1076 = t1143 * t1423 + t1170 * t1428;
t1537 = t1078 * t1424 + t1141 * t1429;
t955 = -t1076 * t1417 + t1420 * t1537;
t1552 = t1006 * t1425 + t1430 * t955;
t1267 = -t1679 + t1680;
t1144 = t1267 * t1419 - t1653;
t1079 = t1144 * t1428 - t1165 * t1423;
t1142 = -t1267 * t1416 - t1652;
t1007 = t1079 * t1429 - t1142 * t1424;
t1077 = t1144 * t1423 + t1165 * t1428;
t1536 = t1079 * t1424 + t1142 * t1429;
t956 = -t1077 * t1417 + t1420 * t1536;
t1551 = t1007 * t1425 + t1430 * t956;
t1162 = -t1216 * t1416 + t1305 * t1640;
t1124 = t1162 * t1428 - t1597;
t1161 = -t1216 * t1419 - t1305 * t1641;
t1041 = t1124 * t1429 - t1161 * t1424;
t1122 = t1162 * t1423 + t1596;
t1530 = t1124 * t1424 + t1161 * t1429;
t996 = -t1122 * t1417 + t1420 * t1530;
t1550 = t1041 * t1425 + t1430 * t996;
t1164 = t1217 * t1419 - t1307 * t1641;
t1125 = t1164 * t1428 + t1597;
t1163 = -t1217 * t1416 - t1307 * t1640;
t1042 = t1125 * t1429 - t1163 * t1424;
t1123 = t1164 * t1423 - t1596;
t1529 = t1125 * t1424 + t1163 * t1429;
t997 = -t1123 * t1417 + t1420 * t1529;
t1549 = t1042 * t1425 + t1430 * t997;
t1195 = (-t1305 * t1419 + t1307 * t1416) * t1343;
t1259 = t1428 * t1261;
t1153 = t1195 * t1423 - t1259;
t1154 = t1195 * t1428 + t1647;
t1194 = (t1305 * t1416 + t1307 * t1419) * t1343;
t1526 = t1154 * t1424 + t1194 * t1429;
t1020 = -t1153 * t1417 + t1420 * t1526;
t1102 = t1154 * t1429 - t1194 * t1424;
t1547 = t1020 * t1430 + t1102 * t1425;
t1222 = -t1315 - t1262;
t1138 = -t1218 * t1423 + t1222 * t1428;
t1140 = -t1218 * t1428 - t1222 * t1423;
t1263 = t1679 + t1342;
t1527 = t1140 * t1424 + t1263 * t1429;
t1025 = -t1138 * t1417 + t1420 * t1527;
t1111 = t1140 * t1429 - t1263 * t1424;
t1546 = t1025 * t1430 + t1111 * t1425;
t1219 = (-qJD(4) - t1359) * t1345 - t1590;
t1137 = t1219 * t1423 + t1221 * t1428;
t1139 = t1219 * t1428 - t1221 * t1423;
t1293 = -t1342 + t1679;
t1528 = t1139 * t1424 + t1293 * t1429;
t1030 = -t1137 * t1417 + t1420 * t1528;
t1116 = t1139 * t1429 - t1293 * t1424;
t1544 = t1030 * t1430 + t1116 * t1425;
t1272 = -t1679 - t1678;
t1185 = t1272 * t1423 + t1690;
t1186 = t1272 * t1428 - t1692;
t1522 = t1186 * t1424 + t1219 * t1429;
t1072 = -t1185 * t1417 + t1420 * t1522;
t1121 = t1186 * t1429 - t1219 * t1424;
t1539 = t1072 * t1430 + t1121 * t1425;
t1446 = t1421 * t1448;
t1463 = t1408 * t1417 + t1588;
t1449 = qJD(1) * t1463;
t1182 = t1615 + (t1420 * (-g(3) * t1620 + t1430 * t1446 + t1555) + t1417 * (-pkin(2) * t1580 - t1377) + (t1420 * (-qJD(2) * t1588 + t1408 * t1463) + t1417 * (-qJD(2) * t1587 - t1449 * t1620)) * pkin(10) + (t1420 * t1488 + (pkin(2) * t1449 + (-pkin(10) * t1417 ^ 2 + t1420 * t1605) * qJDD(1)) * t1418) * t1425) * t1424;
t1523 = -t1181 * t1429 + t1182 * t1424;
t1075 = t1233 * t1417 + t1420 * t1523;
t1110 = t1181 * t1424 + t1182 * t1429;
t1538 = t1075 * t1430 + t1110 * t1425;
t1288 = -t1342 - t1678;
t1189 = t1288 * t1428 - t1649;
t1190 = -t1288 * t1423 - t1648;
t1520 = t1190 * t1424 - t1221 * t1429;
t1081 = -t1189 * t1417 + t1420 * t1520;
t1126 = t1190 * t1429 + t1221 * t1424;
t1535 = t1081 * t1430 + t1126 * t1425;
t1314 = -t1342 + t1678;
t1198 = t1314 * t1428 + t1692;
t1200 = -t1314 * t1423 + t1690;
t1517 = t1200 * t1424 + t1222 * t1429;
t1087 = -t1198 * t1417 + t1420 * t1517;
t1135 = t1200 * t1429 - t1222 * t1424;
t1534 = t1087 * t1430 + t1135 * t1425;
t1313 = t1679 - t1678;
t1199 = t1313 * t1423 + t1648;
t1201 = t1313 * t1428 - t1649;
t1516 = t1201 * t1424 + t1218 * t1429;
t1088 = -t1199 * t1417 + t1420 * t1516;
t1136 = t1201 * t1429 - t1218 * t1424;
t1533 = t1088 * t1430 + t1136 * t1425;
t1210 = t1343 * t1639 - t1259;
t1211 = t1343 * t1638 + t1647;
t1492 = t1211 * t1424 + t1594;
t1114 = -t1210 * t1417 + t1420 * t1492;
t1174 = t1211 * t1429 - t1595;
t1532 = t1114 * t1430 + t1174 * t1425;
t1212 = t1262 * t1423 + t1345 * t1638;
t1213 = t1262 * t1428 - t1345 * t1639;
t1491 = t1213 * t1424 - t1594;
t1115 = -t1212 * t1417 + t1420 * t1491;
t1175 = t1213 * t1429 + t1595;
t1531 = t1115 * t1430 + t1175 * t1425;
t1253 = (-t1343 * t1423 - t1345 * t1428) * t1359;
t1254 = (-t1343 * t1428 + t1345 * t1423) * t1359;
t1511 = t1254 * t1424 - t1321 * t1429;
t1157 = -t1253 * t1417 + t1420 * t1511;
t1207 = t1254 * t1429 + t1321 * t1424;
t1525 = t1157 * t1430 + t1207 * t1425;
t1308 = -t1360 - t1361;
t1284 = t1348 + t1322;
t1440 = (-qJD(3) + t1383) * t1366 - t1445;
t1508 = -t1284 * t1429 + t1424 * t1440;
t1177 = -t1308 * t1417 + t1420 * t1508;
t1209 = t1284 * t1424 + t1429 * t1440;
t1524 = t1177 * t1430 + t1209 * t1425;
t1334 = t1361 - t1360;
t1279 = t1366 * t1613 + t1445;
t1509 = -t1279 * t1424 + t1283 * t1429;
t1188 = -t1334 * t1417 + t1420 * t1509;
t1208 = -t1279 * t1429 - t1283 * t1424;
t1521 = t1188 * t1430 + t1208 * t1425;
t1504 = t1320 * t1424 + t1686;
t1192 = -t1279 * t1417 + t1420 * t1504;
t1519 = t1192 * t1430 + t1257 * t1425;
t1282 = -t1364 * t1613 + t1439;
t1507 = t1328 * t1429 + t1645;
t1197 = -t1282 * t1417 + t1420 * t1507;
t1518 = t1197 * t1430 + t1265 * t1425;
t1347 = -t1361 + t1677;
t1505 = t1347 * t1429 + t1687;
t1204 = -t1284 * t1417 + t1420 * t1505;
t1270 = -t1347 * t1424 + t1686;
t1515 = t1204 * t1430 + t1270 * t1425;
t1346 = t1360 - t1677;
t1506 = t1346 * t1424 - t1644;
t1205 = -t1417 * t1440 + t1420 * t1506;
t1271 = t1346 * t1429 + t1645;
t1514 = t1205 * t1430 + t1271 * t1425;
t1441 = t1429 * t1442;
t1239 = -t1420 * t1441 + (t1366 * t1417 + t1383 * t1619) * t1364;
t1277 = t1364 * t1633 + t1424 * t1442;
t1513 = t1239 * t1430 + t1277 * t1425;
t1241 = t1322 * t1619 + (-t1364 * t1417 + t1420 * t1633) * t1366;
t1278 = t1322 * t1429 - t1424 * t1634;
t1512 = t1241 * t1430 + t1278 * t1425;
t1487 = t1383 * (-t1364 * t1424 - t1366 * t1429);
t1276 = -t1370 * t1417 + t1420 * t1487;
t1299 = (-t1364 * t1429 + t1366 * t1424) * t1383;
t1510 = t1276 * t1430 + t1299 * t1425;
t1447 = t1453 - t1669;
t1351 = t1425 * t1447 + (t1418 * g(3) - t1446) * t1430;
t1352 = t1425 * t1446 + t1430 * t1447 - t1409;
t1503 = -t1351 * t1430 + t1352 * t1425;
t1309 = t1351 * t1425 + t1352 * t1430;
t1394 = t1408 * t1602;
t1372 = t1394 + t1452;
t1393 = t1408 * t1603;
t1375 = -t1393 + t1580;
t1502 = t1372 * t1430 + t1375 * t1425;
t1373 = -t1394 + t1452;
t1374 = t1393 + t1580;
t1501 = -t1373 * t1430 + t1374 * t1425;
t1500 = t1384 * t1430 - t1630;
t1388 = t1407 - t1601;
t1499 = t1388 * t1430 + t1632;
t1498 = t1390 * t1425 + t1631;
t1389 = -t1407 + t1600;
t1497 = t1389 * t1425 + t1629;
t1379 = t1404 * t1431 - t1426 * t1405;
t1495 = t1418 * t1589;
t779 = -pkin(5) * t981 + pkin(12) * t794;
t719 = -pkin(12) * t1665 - qJ(5) * t745 - t1416 * t779;
t730 = -pkin(4) * t745 - pkin(5) * t793;
t697 = -pkin(11) * t742 - t1423 * t730 + t1428 * t719;
t700 = -pkin(3) * t742 + pkin(4) * t981 + pkin(12) * t1666 - qJ(5) * t746 - t1419 * t779;
t1474 = pkin(10) * t718 + t1424 * t697 + t1429 * t700;
t695 = -pkin(3) * t745 + pkin(11) * t743 + t1423 * t719 + t1428 * t730;
t701 = t1417 * t1579 + t1420 * t742;
t680 = -pkin(2) * t701 - t1417 * t695 + t1420 * t1474;
t681 = -t1424 * t700 + t1429 * t697 + (-t1417 * t701 - t1420 * t702) * pkin(10);
t696 = -t1425 * t702 + t1430 * t718;
t1485 = pkin(9) * t696 + t1425 * t681 + t1430 * t680;
t775 = -pkin(5) * t1127 + pkin(12) * t976 + t794;
t777 = -pkin(12) * t974 - t793;
t736 = -qJ(5) * t897 - t1416 * t775 + t1419 * t777;
t853 = -pkin(4) * t897 - pkin(5) * t974;
t728 = -pkin(11) * t874 - t1423 * t853 + t1428 * t736;
t729 = -pkin(3) * t874 + pkin(4) * t1127 - qJ(5) * t899 - t1416 * t777 - t1419 * t775;
t1473 = pkin(10) * t816 + t1424 * t728 + t1429 * t729;
t724 = -pkin(3) * t897 + pkin(11) * t875 + t1423 * t736 + t1428 * t853;
t788 = t1417 * t1577 + t1420 * t874;
t693 = -pkin(2) * t788 - t1417 * t724 + t1420 * t1473;
t698 = -t1424 * t729 + t1429 * t728 + (-t1417 * t788 - t1420 * t789) * pkin(10);
t749 = -t1425 * t789 + t1430 * t816;
t1484 = pkin(9) * t749 + t1425 * t698 + t1430 * t693;
t774 = -pkin(11) * t850 + (-qJ(5) * t1428 + t1674) * t866;
t795 = -pkin(3) * t850 + pkin(4) * t1018 - qJ(5) * t867;
t1470 = pkin(10) * t806 + t1424 * t774 + t1429 * t795;
t755 = pkin(11) * t851 + (-qJ(5) * t1423 + t1606) * t866;
t772 = t1417 * t1578 + t1420 * t850;
t704 = -pkin(2) * t772 - t1417 * t755 + t1420 * t1470;
t714 = -t1424 * t795 + t1429 * t774 + (-t1417 * t772 - t1420 * t773) * pkin(10);
t741 = -t1425 * t773 + t1430 * t806;
t1483 = pkin(9) * t741 + t1425 * t714 + t1430 * t704;
t810 = -pkin(4) * t965 - pkin(5) * t1054 + t848;
t900 = -pkin(5) * t1065 + pkin(12) * t1055 - t1663;
t925 = -pkin(12) * t1054 + t1664;
t813 = -qJ(5) * t965 - t1416 * t900 + t1419 * t925;
t752 = -pkin(11) * t920 - t1423 * t810 + t1428 * t813;
t790 = -pkin(3) * t920 + pkin(4) * t1065 - qJ(5) * t966 - t1416 * t925 - t1419 * t900;
t1472 = pkin(10) * t861 + t1424 * t752 + t1429 * t790;
t747 = -pkin(3) * t965 + pkin(11) * t921 + t1423 * t813 + t1428 * t810;
t821 = t1417 * t1575 + t1420 * t920;
t708 = -pkin(2) * t821 - t1417 * t747 + t1420 * t1472;
t720 = -t1424 * t790 + t1429 * t752 + (-t1417 * t821 - t1420 * t822) * pkin(10);
t786 = -t1425 * t822 + t1430 * t861;
t1482 = pkin(9) * t786 + t1425 * t720 + t1430 * t708;
t814 = -pkin(4) * t985 - pkin(5) * t1082 + t849;
t903 = -pkin(5) * t1684 + pkin(12) * t1083 + t1664;
t928 = -pkin(12) * t1082 + t1663;
t817 = -qJ(5) * t985 - t1416 * t903 + t1419 * t928;
t758 = -pkin(11) * t929 - t1423 * t814 + t1428 * t817;
t796 = -pkin(3) * t929 + pkin(4) * t1684 - qJ(5) * t986 - t1416 * t928 - t1419 * t903;
t1471 = pkin(10) * t873 + t1424 * t758 + t1429 * t796;
t748 = -pkin(3) * t985 + pkin(11) * t930 + t1423 * t817 + t1428 * t814;
t827 = t1417 * t1574 + t1420 * t929;
t712 = -pkin(2) * t827 - t1417 * t748 + t1420 * t1471;
t725 = -t1424 * t796 + t1429 * t758 + (-t1417 * t827 - t1420 * t828) * pkin(10);
t797 = -t1425 * t828 + t1430 * t873;
t1481 = pkin(9) * t797 + t1425 * t725 + t1430 * t712;
t857 = -qJ(5) * t1092 - t866;
t826 = -pkin(11) * t1031 + t1092 * t1674 + t1428 * t857;
t829 = -pkin(3) * t1031 - pkin(4) * t1206 - qJ(5) * t1094 - t867;
t1469 = pkin(10) * t977 + t1424 * t826 + t1429 * t829;
t815 = pkin(11) * t1032 + t1092 * t1606 + t1423 * t857;
t916 = t1031 * t1420 + t1417 * t1543;
t740 = -pkin(2) * t916 - t1417 * t815 + t1420 * t1469;
t753 = -t1424 * t829 + t1429 * t826 + (-t1417 * t916 - t1420 * t917) * pkin(10);
t862 = -t1425 * t917 + t1430 * t977;
t1480 = pkin(9) * t862 + t1425 * t753 + t1430 * t740;
t918 = -pkin(4) * t1118 + t951;
t980 = -qJ(5) * t1118 + t1659;
t852 = -pkin(11) * t1043 - t1423 * t918 + t1428 * t980;
t909 = -pkin(3) * t1043 - pkin(4) * t1166 - qJ(5) * t1119 + t1658;
t1468 = pkin(10) * t998 + t1424 * t852 + t1429 * t909;
t843 = -pkin(3) * t1118 + pkin(11) * t1044 + t1423 * t980 + t1428 * t918;
t934 = t1043 * t1420 + t1417 * t1542;
t757 = -pkin(2) * t934 - t1417 * t843 + t1420 * t1468;
t776 = -t1424 * t909 + t1429 * t852 + (-t1417 * t934 - t1420 * t935) * pkin(10);
t879 = -t1425 * t935 + t1430 * t998;
t1479 = pkin(9) * t879 + t1425 * t776 + t1430 * t757;
t922 = -pkin(4) * t1128 + t952;
t982 = -qJ(5) * t1128 + t1658;
t855 = -pkin(11) * t1059 - t1423 * t922 + t1428 * t982;
t910 = -pkin(3) * t1059 + pkin(4) * t1168 - qJ(5) * t1129 - t1659;
t1464 = pkin(10) * t1004 + t1424 * t855 + t1429 * t910;
t844 = -pkin(3) * t1128 + pkin(11) * t1060 + t1423 * t982 + t1428 * t922;
t942 = t1059 * t1420 + t1417 * t1540;
t760 = -pkin(2) * t942 - t1417 * t844 + t1420 * t1464;
t778 = -t1424 * t910 + t1429 * t855 + (-t1417 * t942 - t1420 * t943) * pkin(10);
t889 = t1004 * t1430 - t1425 * t943;
t1478 = pkin(9) * t889 + t1425 * t778 + t1430 * t760;
t1450 = pkin(10) * t947 + (-pkin(11) * t1424 - t1675) * t967;
t871 = t1417 * t1548 + t1420 * t967;
t948 = -pkin(3) * t1149 + pkin(11) * t968;
t783 = -pkin(2) * t871 - t1417 * t948 + t1420 * t1450;
t787 = (-pkin(11) * t1429 + t1676) * t967 + (-t1417 * t871 - t1420 * t872) * pkin(10);
t830 = -t1425 * t872 + t1430 * t947;
t1477 = pkin(9) * t830 + t1425 * t787 + t1430 * t783;
t1024 = t1138 * t1420 + t1417 * t1527;
t946 = -pkin(11) * t1138 - t967;
t1451 = pkin(10) * t1111 - t1138 * t1675 + t1424 * t946;
t931 = pkin(3) * t1263 + pkin(11) * t1140 + t968;
t824 = -pkin(2) * t1024 - t1417 * t931 + t1420 * t1451;
t858 = t1138 * t1676 + t1429 * t946 + (-t1024 * t1417 - t1025 * t1420) * pkin(10);
t978 = -t1025 * t1425 + t1111 * t1430;
t1476 = pkin(9) * t978 + t1425 * t858 + t1430 * t824;
t1074 = -t1233 * t1420 + t1417 * t1523;
t979 = (-t1074 * t1417 - t1075 * t1420) * pkin(10);
t989 = -t1075 * t1425 + t1110 * t1430;
t990 = -pkin(2) * t1074 + t1110 * t1670;
t1475 = pkin(9) * t989 + t1425 * t979 + t1430 * t990;
t1003 = -t1072 * t1425 + t1121 * t1430;
t1033 = pkin(3) * t1219 + pkin(11) * t1186 - t1654;
t1071 = t1185 * t1420 + t1417 * t1522;
t1013 = -pkin(3) * t1185 + t1057;
t1090 = -pkin(11) * t1185 + t1655;
t1458 = pkin(10) * t1121 + t1013 * t1429 + t1090 * t1424;
t864 = -pkin(2) * t1071 - t1033 * t1417 + t1420 * t1458;
t892 = -t1013 * t1424 + t1090 * t1429 + (-t1071 * t1417 - t1072 * t1420) * pkin(10);
t1466 = pkin(9) * t1003 + t1425 * t892 + t1430 * t864;
t1005 = -t1081 * t1425 + t1126 * t1430;
t1036 = -pkin(3) * t1221 + pkin(11) * t1190 + t1655;
t1080 = t1189 * t1420 + t1417 * t1520;
t1016 = -pkin(3) * t1189 + t1058;
t1097 = -pkin(11) * t1189 + t1654;
t1457 = pkin(10) * t1126 + t1016 * t1429 + t1097 * t1424;
t869 = -pkin(2) * t1080 - t1036 * t1417 + t1420 * t1457;
t893 = -t1016 * t1424 + t1097 * t1429 + (-t1080 * t1417 - t1081 * t1420) * pkin(10);
t1465 = pkin(9) * t1005 + t1425 * t893 + t1430 * t869;
t1176 = t1308 * t1420 + t1417 * t1508;
t1008 = (-t1176 * t1417 - t1177 * t1420) * pkin(10) - t1523;
t1456 = pkin(10) * t1209 + t1110;
t1012 = -pkin(2) * t1176 + t1420 * t1456;
t1117 = -t1177 * t1425 + t1209 * t1430;
t1462 = pkin(9) * t1117 + t1008 * t1425 + t1012 * t1430;
t1191 = t1279 * t1420 + t1417 * t1504;
t1035 = -pkin(2) * t1191 + t1181 * t1417 + t1420 * t1582;
t1084 = -t1651 + (-t1191 * t1417 - t1192 * t1420) * pkin(10);
t1148 = -t1192 * t1425 + t1257 * t1430;
t1461 = pkin(9) * t1148 + t1035 * t1430 + t1084 * t1425;
t1196 = t1282 * t1420 + t1417 * t1507;
t1038 = -pkin(2) * t1196 + t1182 * t1417 + t1420 * t1581;
t1089 = -t1650 + (-t1196 * t1417 - t1197 * t1420) * pkin(10);
t1155 = -t1197 * t1425 + t1265 * t1430;
t1460 = pkin(9) * t1155 + t1038 * t1430 + t1089 * t1425;
t1335 = t1373 * t1425 + t1374 * t1430;
t1459 = pkin(9) * t1335 + t1309;
t1371 = (t1614 * t1660 + t1609) * t1418;
t1412 = t1418 * t1413;
t1401 = t1426 * qJDD(1) + t1431 * t1681;
t1392 = t1610 * t1626;
t1391 = (t1414 - t1415) * t1626;
t1387 = -pkin(8) * t1401 + g(3) * t1431;
t1376 = t1610 * t1604;
t1368 = (-t1414 * t1408 * qJD(1) + t1430 * t1489) * t1418;
t1367 = -t1415 * t1604 - t1425 * t1580;
t1356 = t1389 * t1430 - t1630;
t1355 = -t1388 * t1425 + t1631;
t1350 = t1371 * t1617 + t1412 * t1593;
t1349 = (-t1412 * t1616 + (-t1406 + (-qJD(1) * t1627 + t1608) * t1418) * t1421) * t1430;
t1336 = -t1372 * t1425 + t1375 * t1430;
t1332 = t1375 * t1418 + t1421 * t1498;
t1331 = -t1374 * t1418 + t1421 * t1497;
t1330 = -t1373 * t1418 + t1421 * t1499;
t1329 = -t1375 * t1421 + t1418 * t1498;
t1327 = -t1371 * t1418 + t1421 * t1500;
t1326 = t1371 * t1421 + t1418 * t1500;
t1325 = -t1391 * t1418 + t1421 * t1502;
t1324 = t1392 * t1418 + t1421 * t1501;
t1323 = -t1392 * t1421 + t1418 * t1501;
t1298 = -t1426 * t1332 + t1357 * t1431;
t1297 = t1332 * t1431 + t1426 * t1357;
t1290 = -t1426 * t1327 + t1353 * t1431;
t1289 = t1327 * t1431 + t1426 * t1353;
t1286 = t1377 * t1418 + t1421 * t1503;
t1285 = -t1377 * t1421 + t1418 * t1503;
t1275 = t1370 * t1420 + t1417 * t1487;
t1274 = -t1426 * t1324 + t1335 * t1431;
t1273 = t1324 * t1431 + t1426 * t1335;
t1264 = -t1636 + (-t1329 * t1418 - t1332 * t1421) * pkin(9);
t1256 = -t1635 + (-t1326 * t1418 - t1327 * t1421) * pkin(9);
t1255 = -pkin(1) * t1329 + t1351 * t1418 + t1421 * t1583;
t1250 = -pkin(1) * t1326 + t1352 * t1418 + t1421 * t1584;
t1240 = t1322 * t1625 + (t1364 * t1420 + t1383 * t1623) * t1366;
t1238 = -t1417 * t1441 + (-t1366 * t1420 + t1383 * t1625) * t1364;
t1236 = -pkin(1) * t1285 + t1309 * t1672;
t1235 = -t1426 * t1286 + t1309 * t1431;
t1234 = t1286 * t1431 + t1426 * t1309;
t1232 = -pkin(1) * t1323 + t1421 * t1459;
t1226 = -t1276 * t1425 + t1299 * t1430;
t1225 = (-t1285 * t1418 - t1286 * t1421) * pkin(9);
t1224 = (-t1323 * t1418 - t1324 * t1421) * pkin(9) - t1503;
t1203 = t1417 * t1506 + t1420 * t1440;
t1202 = t1284 * t1420 + t1417 * t1505;
t1187 = t1334 * t1420 + t1417 * t1509;
t1184 = -t1241 * t1425 + t1278 * t1430;
t1183 = -t1239 * t1425 + t1277 * t1430;
t1171 = -t1275 * t1418 + t1421 * t1510;
t1160 = -t1205 * t1425 + t1271 * t1430;
t1159 = -t1204 * t1425 + t1270 * t1430;
t1156 = t1253 * t1420 + t1417 * t1511;
t1134 = -t1240 * t1418 + t1421 * t1512;
t1133 = -t1238 * t1418 + t1421 * t1513;
t1120 = -t1188 * t1425 + t1208 * t1430;
t1113 = t1212 * t1420 + t1417 * t1491;
t1112 = t1210 * t1420 + t1417 * t1492;
t1107 = -t1157 * t1425 + t1207 * t1430;
t1106 = -t1203 * t1418 + t1421 * t1514;
t1105 = -t1202 * t1418 + t1421 * t1515;
t1104 = -t1196 * t1418 + t1421 * t1518;
t1103 = t1196 * t1421 + t1418 * t1518;
t1096 = -t1191 * t1418 + t1421 * t1519;
t1095 = t1191 * t1421 + t1418 * t1519;
t1086 = t1199 * t1420 + t1417 * t1516;
t1085 = t1198 * t1420 + t1417 * t1517;
t1073 = -t1187 * t1418 + t1421 * t1521;
t1053 = -t1176 * t1418 + t1421 * t1524;
t1052 = t1176 * t1421 + t1418 * t1524;
t1040 = -t1115 * t1425 + t1175 * t1430;
t1039 = -t1114 * t1425 + t1174 * t1430;
t1037 = pkin(2) * t1197 - t1182 * t1420 + t1417 * t1581;
t1034 = pkin(2) * t1192 - t1181 * t1420 + t1417 * t1582;
t1029 = t1137 * t1420 + t1417 * t1528;
t1028 = -t1156 * t1418 + t1421 * t1525;
t1023 = -t1426 * t1104 + t1155 * t1431;
t1022 = t1104 * t1431 + t1426 * t1155;
t1019 = t1153 * t1420 + t1417 * t1526;
t1015 = -t1426 * t1096 + t1148 * t1431;
t1014 = t1096 * t1431 + t1426 * t1148;
t1011 = pkin(2) * t1177 + t1417 * t1456;
t1010 = -t1088 * t1425 + t1136 * t1430;
t1009 = -t1087 * t1425 + t1135 * t1430;
t995 = t1123 * t1420 + t1417 * t1529;
t994 = t1122 * t1420 + t1417 * t1530;
t993 = -t1426 * t1053 + t1117 * t1431;
t992 = t1053 * t1431 + t1426 * t1117;
t991 = pkin(2) * t1075 + t1110 * t1671;
t988 = -t1113 * t1418 + t1421 * t1531;
t987 = -t1112 * t1418 + t1421 * t1532;
t984 = -t1030 * t1425 + t1116 * t1430;
t964 = -t1020 * t1425 + t1102 * t1430;
t962 = -t1086 * t1418 + t1421 * t1533;
t961 = -t1085 * t1418 + t1421 * t1534;
t954 = t1077 * t1420 + t1417 * t1536;
t953 = t1076 * t1420 + t1417 * t1537;
t950 = -t1080 * t1418 + t1421 * t1535;
t949 = t1080 * t1421 + t1418 * t1535;
t945 = -t1071 * t1418 + t1421 * t1539;
t944 = t1071 * t1421 + t1418 * t1539;
t937 = -t1074 * t1418 + t1421 * t1538;
t936 = t1074 * t1421 + t1418 * t1538;
t933 = t1042 * t1430 - t1425 * t997;
t932 = t1041 * t1430 - t1425 * t996;
t926 = t1048 * t1420 + t1417 * t1541;
t919 = -t1029 * t1418 + t1421 * t1544;
t915 = -t1024 * t1418 + t1421 * t1546;
t914 = t1024 * t1421 + t1418 * t1546;
t908 = -t1019 * t1418 + t1421 * t1547;
t906 = t1026 * t1420 + t1417 * t1545;
t905 = -t1038 * t1425 + t1089 * t1430 + (-t1103 * t1418 - t1104 * t1421) * pkin(9);
t904 = -t1035 * t1425 + t1084 * t1430 + (-t1095 * t1418 - t1096 * t1421) * pkin(9);
t902 = t1007 * t1430 - t1425 * t956;
t901 = t1006 * t1430 - t1425 * t955;
t895 = t1005 * t1431 - t1426 * t950;
t894 = t1426 * t1005 + t1431 * t950;
t891 = t1003 * t1431 - t1426 * t945;
t890 = t1426 * t1003 + t1431 * t945;
t888 = -pkin(1) * t1103 - t1037 * t1418 + t1421 * t1460;
t885 = -t1426 * t937 + t1431 * t989;
t884 = t1426 * t989 + t1431 * t937;
t878 = -t1418 * t995 + t1421 * t1549;
t877 = -t1418 * t994 + t1421 * t1550;
t876 = -pkin(1) * t1095 - t1034 * t1418 + t1421 * t1461;
t870 = -t1425 * t927 + t1430 * t983;
t868 = pkin(2) * t1081 + t1036 * t1420 + t1417 * t1457;
t865 = t1008 * t1430 - t1012 * t1425 + (-t1052 * t1418 - t1053 * t1421) * pkin(9);
t863 = pkin(2) * t1072 + t1033 * t1420 + t1417 * t1458;
t860 = -t1426 * t915 + t1431 * t978;
t859 = t1426 * t978 + t1431 * t915;
t856 = -t1425 * t907 + t1430 * t963;
t854 = -pkin(1) * t1052 - t1011 * t1418 + t1421 * t1462;
t846 = -t1418 * t954 + t1421 * t1551;
t845 = -t1418 * t953 + t1421 * t1552;
t840 = t1417 * t1571 + t1420 * t958;
t839 = t1417 * t1572 + t1420 * t957;
t838 = -t1418 * t942 + t1421 * t1553;
t837 = t1418 * t1553 + t1421 * t942;
t834 = t1417 * t1554 + t1420 * t939;
t833 = t1417 * t1573 + t1420 * t938;
t832 = -t1418 * t934 + t1421 * t1556;
t831 = t1418 * t1556 + t1421 * t934;
t825 = -t1418 * t926 + t1421 * t1557;
t823 = pkin(2) * t1025 + t1417 * t1451 + t1420 * t931;
t820 = -t1418 * t916 + t1421 * t1558;
t819 = t1418 * t1558 + t1421 * t916;
t812 = -t1425 * t990 + t1430 * t979 + (-t1418 * t936 - t1421 * t937) * pkin(9);
t811 = -t1418 * t906 + t1421 * t1559;
t809 = -pkin(1) * t936 - t1418 * t991 + t1421 * t1475;
t808 = -t1426 * t838 + t1431 * t889;
t807 = t1426 * t889 + t1431 * t838;
t805 = -t1425 * t842 + t1430 * t881;
t804 = -t1425 * t841 + t1430 * t880;
t803 = -t1425 * t836 + t1430 * t887;
t802 = -t1425 * t835 + t1430 * t886;
t801 = -t1426 * t832 + t1431 * t879;
t800 = t1426 * t879 + t1431 * t832;
t799 = -t1418 * t871 + t1421 * t1560;
t798 = t1418 * t1560 + t1421 * t871;
t791 = t1417 * t1576 + t1420 * t882;
t785 = -t1426 * t820 + t1431 * t862;
t784 = t1426 * t862 + t1431 * t820;
t782 = pkin(2) * t872 + t1417 * t1450 + t1420 * t948;
t781 = -t1425 * t869 + t1430 * t893 + (-t1418 * t949 - t1421 * t950) * pkin(9);
t780 = -t1425 * t864 + t1430 * t892 + (-t1418 * t944 - t1421 * t945) * pkin(9);
t771 = -pkin(1) * t949 - t1418 * t868 + t1421 * t1465;
t770 = -t1418 * t840 + t1421 * t1561;
t769 = -t1418 * t839 + t1421 * t1562;
t768 = -pkin(1) * t944 - t1418 * t863 + t1421 * t1466;
t767 = -t1418 * t834 + t1421 * t1563;
t766 = -t1418 * t833 + t1421 * t1564;
t765 = -t1426 * t799 + t1431 * t830;
t764 = t1426 * t830 + t1431 * t799;
t763 = -t1418 * t827 + t1421 * t1565;
t762 = t1418 * t1565 + t1421 * t827;
t761 = -t1425 * t824 + t1430 * t858 + (-t1418 * t914 - t1421 * t915) * pkin(9);
t759 = pkin(2) * t943 + t1417 * t1464 + t1420 * t844;
t756 = pkin(2) * t935 + t1417 * t1468 + t1420 * t843;
t754 = -t1425 * t792 + t1430 * t818;
t751 = -t1418 * t821 + t1421 * t1566;
t750 = t1418 * t1566 + t1421 * t821;
t744 = -pkin(1) * t914 - t1418 * t823 + t1421 * t1476;
t739 = pkin(2) * t917 + t1417 * t1469 + t1420 * t815;
t738 = -t1426 * t763 + t1431 * t797;
t737 = t1426 * t797 + t1431 * t763;
t735 = -t1418 * t791 + t1421 * t1567;
t734 = -t1418 * t788 + t1421 * t1568;
t733 = t1418 * t1568 + t1421 * t788;
t732 = -t1426 * t751 + t1431 * t786;
t731 = t1426 * t786 + t1431 * t751;
t727 = -t1418 * t772 + t1421 * t1569;
t726 = t1418 * t1569 + t1421 * t772;
t723 = -t1425 * t760 + t1430 * t778 + (-t1418 * t837 - t1421 * t838) * pkin(9);
t722 = -t1425 * t757 + t1430 * t776 + (-t1418 * t831 - t1421 * t832) * pkin(9);
t721 = -t1425 * t783 + t1430 * t787 + (-t1418 * t798 - t1421 * t799) * pkin(9);
t717 = -t1426 * t734 + t1431 * t749;
t716 = t1426 * t749 + t1431 * t734;
t715 = -pkin(1) * t798 - t1418 * t782 + t1421 * t1477;
t713 = -pkin(1) * t837 - t1418 * t759 + t1421 * t1478;
t711 = pkin(2) * t828 + t1417 * t1471 + t1420 * t748;
t710 = -t1425 * t740 + t1430 * t753 + (-t1418 * t819 - t1421 * t820) * pkin(9);
t709 = -pkin(1) * t831 - t1418 * t756 + t1421 * t1479;
t707 = pkin(2) * t822 + t1417 * t1472 + t1420 * t747;
t706 = -t1426 * t727 + t1431 * t741;
t705 = t1426 * t741 + t1431 * t727;
t703 = pkin(2) * t773 + t1417 * t1470 + t1420 * t755;
t699 = -pkin(1) * t819 - t1418 * t739 + t1421 * t1480;
t694 = -t1425 * t712 + t1430 * t725 + (-t1418 * t762 - t1421 * t763) * pkin(9);
t692 = pkin(2) * t789 + t1417 * t1473 + t1420 * t724;
t691 = -t1425 * t708 + t1430 * t720 + (-t1418 * t750 - t1421 * t751) * pkin(9);
t690 = -t1418 * t701 + t1421 * t1570;
t689 = t1418 * t1570 + t1421 * t701;
t688 = -pkin(1) * t762 - t1418 * t711 + t1421 * t1481;
t687 = -pkin(1) * t750 - t1418 * t707 + t1421 * t1482;
t686 = -t1425 * t704 + t1430 * t714 + (-t1418 * t726 - t1421 * t727) * pkin(9);
t685 = -pkin(1) * t726 - t1418 * t703 + t1421 * t1483;
t684 = -t1425 * t693 + t1430 * t698 + (-t1418 * t733 - t1421 * t734) * pkin(9);
t683 = -t1426 * t690 + t1431 * t696;
t682 = t1426 * t696 + t1431 * t690;
t679 = pkin(2) * t702 + t1417 * t1474 + t1420 * t695;
t678 = -pkin(1) * t733 - t1418 * t692 + t1421 * t1484;
t677 = -t1425 * t680 + t1430 * t681 + (-t1418 * t689 - t1421 * t690) * pkin(9);
t676 = -pkin(1) * t689 - t1418 * t679 + t1421 * t1485;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1401, -t1402, 0, t1380, 0, 0, 0, 0, 0, 0, t1298, t1290, t1274, t1235, 0, 0, 0, 0, 0, 0, t1015, t1023, t993, t885, 0, 0, 0, 0, 0, 0, t891, t895, t860, t765, 0, 0, 0, 0, 0, 0, t801, t808, t785, t706, 0, 0, 0, 0, 0, 0, t732, t738, t717, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1402, -t1401, 0, t1379, 0, 0, 0, 0, 0, 0, t1297, t1289, t1273, t1234, 0, 0, 0, 0, 0, 0, t1014, t1022, t992, t884, 0, 0, 0, 0, 0, 0, t890, t894, t859, t764, 0, 0, 0, 0, 0, 0, t800, t807, t784, t705, 0, 0, 0, 0, 0, 0, t731, t737, t716, t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1329, t1326, t1323, t1285, 0, 0, 0, 0, 0, 0, t1095, t1103, t1052, t936, 0, 0, 0, 0, 0, 0, t944, t949, t914, t798, 0, 0, 0, 0, 0, 0, t831, t837, t819, t726, 0, 0, 0, 0, 0, 0, t750, t762, t733, t689; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1402, 0, -t1401, 0, t1585, -t1387, -t1379, -pkin(8) * t1379, -t1426 * t1350 + t1368 * t1431, -t1426 * t1325 + t1336 * t1431, -t1426 * t1330 + t1355 * t1431, -t1426 * t1349 + t1367 * t1431, -t1426 * t1331 + t1356 * t1431, t1431 * t1376 + t1426 * t1495, -pkin(8) * t1297 - t1426 * t1255 + t1264 * t1431, -pkin(8) * t1289 - t1426 * t1250 + t1256 * t1431, -pkin(8) * t1273 + t1224 * t1431 - t1426 * t1232, -pkin(8) * t1234 + t1225 * t1431 - t1426 * t1236, -t1426 * t1134 + t1184 * t1431, -t1426 * t1073 + t1120 * t1431, -t1426 * t1105 + t1159 * t1431, -t1426 * t1133 + t1183 * t1431, -t1426 * t1106 + t1160 * t1431, -t1426 * t1171 + t1226 * t1431, -pkin(8) * t1014 - t1426 * t876 + t1431 * t904, -pkin(8) * t1022 - t1426 * t888 + t1431 * t905, -pkin(8) * t992 - t1426 * t854 + t1431 * t865, -pkin(8) * t884 - t1426 * t809 + t1431 * t812, t1040 * t1431 - t1426 * t988, -t1426 * t919 + t1431 * t984, t1009 * t1431 - t1426 * t961, t1039 * t1431 - t1426 * t987, t1010 * t1431 - t1426 * t962, -t1426 * t1028 + t1107 * t1431, -pkin(8) * t890 - t1426 * t768 + t1431 * t780, -pkin(8) * t894 - t1426 * t771 + t1431 * t781, -pkin(8) * t859 - t1426 * t744 + t1431 * t761, -pkin(8) * t764 - t1426 * t715 + t1431 * t721, -t1426 * t878 + t1431 * t933, -t1426 * t825 + t1431 * t870, -t1426 * t845 + t1431 * t901, -t1426 * t877 + t1431 * t932, -t1426 * t846 + t1431 * t902, -t1426 * t908 + t1431 * t964, -pkin(8) * t800 - t1426 * t709 + t1431 * t722, -pkin(8) * t807 - t1426 * t713 + t1431 * t723, -pkin(8) * t784 - t1426 * t699 + t1431 * t710, -pkin(8) * t705 - t1426 * t685 + t1431 * t686, -t1426 * t770 + t1431 * t805, -t1426 * t735 + t1431 * t754, -t1426 * t766 + t1431 * t802, -t1426 * t769 + t1431 * t804, -t1426 * t767 + t1431 * t803, -t1426 * t811 + t1431 * t856, -pkin(8) * t731 - t1426 * t687 + t1431 * t691, -pkin(8) * t737 - t1426 * t688 + t1431 * t694, -pkin(8) * t716 - t1426 * t678 + t1431 * t684, -pkin(8) * t682 - t1426 * t676 + t1431 * t677; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1401, 0, t1402, 0, t1387, t1585, t1380, pkin(8) * t1380, t1350 * t1431 + t1426 * t1368, t1325 * t1431 + t1426 * t1336, t1330 * t1431 + t1426 * t1355, t1349 * t1431 + t1426 * t1367, t1331 * t1431 + t1426 * t1356, t1426 * t1376 - t1431 * t1495, pkin(8) * t1298 + t1255 * t1431 + t1426 * t1264, pkin(8) * t1290 + t1250 * t1431 + t1426 * t1256, pkin(8) * t1274 + t1426 * t1224 + t1232 * t1431, pkin(8) * t1235 + t1426 * t1225 + t1236 * t1431, t1134 * t1431 + t1426 * t1184, t1073 * t1431 + t1426 * t1120, t1105 * t1431 + t1426 * t1159, t1133 * t1431 + t1426 * t1183, t1106 * t1431 + t1426 * t1160, t1171 * t1431 + t1426 * t1226, pkin(8) * t1015 + t1426 * t904 + t1431 * t876, pkin(8) * t1023 + t1426 * t905 + t1431 * t888, pkin(8) * t993 + t1426 * t865 + t1431 * t854, pkin(8) * t885 + t1426 * t812 + t1431 * t809, t1426 * t1040 + t1431 * t988, t1426 * t984 + t1431 * t919, t1426 * t1009 + t1431 * t961, t1426 * t1039 + t1431 * t987, t1426 * t1010 + t1431 * t962, t1028 * t1431 + t1426 * t1107, pkin(8) * t891 + t1426 * t780 + t1431 * t768, pkin(8) * t895 + t1426 * t781 + t1431 * t771, pkin(8) * t860 + t1426 * t761 + t1431 * t744, pkin(8) * t765 + t1426 * t721 + t1431 * t715, t1426 * t933 + t1431 * t878, t1426 * t870 + t1431 * t825, t1426 * t901 + t1431 * t845, t1426 * t932 + t1431 * t877, t1426 * t902 + t1431 * t846, t1426 * t964 + t1431 * t908, pkin(8) * t801 + t1426 * t722 + t1431 * t709, pkin(8) * t808 + t1426 * t723 + t1431 * t713, pkin(8) * t785 + t1426 * t710 + t1431 * t699, pkin(8) * t706 + t1426 * t686 + t1431 * t685, t1426 * t805 + t1431 * t770, t1426 * t754 + t1431 * t735, t1426 * t802 + t1431 * t766, t1426 * t804 + t1431 * t769, t1426 * t803 + t1431 * t767, t1426 * t856 + t1431 * t811, pkin(8) * t732 + t1426 * t691 + t1431 * t687, pkin(8) * t738 + t1426 * t694 + t1431 * t688, pkin(8) * t717 + t1426 * t684 + t1431 * t678, pkin(8) * t683 + t1426 * t677 + t1431 * t676; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1404, t1405, 0, 0, (t1609 + (qJD(2) - t1592) * t1660) * t1688, t1391 * t1421 + t1418 * t1502, t1373 * t1421 + t1418 * t1499, (qJD(1) * t1592 * t1688 + t1418 * t1580) * t1430, t1374 * t1421 + t1418 * t1497, t1421 * t1589, pkin(1) * t1332 - t1351 * t1421 + t1418 * t1583, pkin(1) * t1327 - t1352 * t1421 + t1418 * t1584, pkin(1) * t1324 + t1418 * t1459, pkin(1) * t1286 + t1309 * t1673, t1240 * t1421 + t1418 * t1512, t1187 * t1421 + t1418 * t1521, t1202 * t1421 + t1418 * t1515, t1238 * t1421 + t1418 * t1513, t1203 * t1421 + t1418 * t1514, t1275 * t1421 + t1418 * t1510, pkin(1) * t1096 + t1034 * t1421 + t1418 * t1461, pkin(1) * t1104 + t1037 * t1421 + t1418 * t1460, pkin(1) * t1053 + t1011 * t1421 + t1418 * t1462, pkin(1) * t937 + t1418 * t1475 + t1421 * t991, t1113 * t1421 + t1418 * t1531, t1029 * t1421 + t1418 * t1544, t1085 * t1421 + t1418 * t1534, t1112 * t1421 + t1418 * t1532, t1086 * t1421 + t1418 * t1533, t1156 * t1421 + t1418 * t1525, pkin(1) * t945 + t1418 * t1466 + t1421 * t863, pkin(1) * t950 + t1418 * t1465 + t1421 * t868, pkin(1) * t915 + t1418 * t1476 + t1421 * t823, pkin(1) * t799 + t1418 * t1477 + t1421 * t782, t1418 * t1549 + t1421 * t995, t1418 * t1557 + t1421 * t926, t1418 * t1552 + t1421 * t953, t1418 * t1550 + t1421 * t994, t1418 * t1551 + t1421 * t954, t1019 * t1421 + t1418 * t1547, pkin(1) * t832 + t1418 * t1479 + t1421 * t756, pkin(1) * t838 + t1418 * t1478 + t1421 * t759, pkin(1) * t820 + t1418 * t1480 + t1421 * t739, pkin(1) * t727 + t1418 * t1483 + t1421 * t703, t1418 * t1561 + t1421 * t840, t1418 * t1567 + t1421 * t791, t1418 * t1564 + t1421 * t833, t1418 * t1562 + t1421 * t839, t1418 * t1563 + t1421 * t834, t1418 * t1559 + t1421 * t906, pkin(1) * t751 + t1418 * t1482 + t1421 * t707, pkin(1) * t763 + t1418 * t1481 + t1421 * t711, pkin(1) * t734 + t1418 * t1484 + t1421 * t692, pkin(1) * t690 + t1418 * t1485 + t1421 * t679;];
tauB_reg  = t1;
