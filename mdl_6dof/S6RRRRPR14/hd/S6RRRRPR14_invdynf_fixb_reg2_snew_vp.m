% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRPR14
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 02:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRPR14_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR14_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRPR14_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRPR14_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRPR14_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR14_invdynf_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 02:40:41
% EndTime: 2019-05-08 02:41:10
% DurationCPUTime: 31.14s
% Computational Cost: add. (440536->425), mult. (1093697->675), div. (0->0), fcn. (933564->16), ass. (0->367)
t3042 = cos(pkin(6));
t3031 = qJD(1) * t3042 + qJD(2);
t3046 = sin(qJ(2));
t3050 = cos(qJ(3));
t3051 = cos(qJ(2));
t3041 = cos(pkin(7));
t3045 = sin(qJ(3));
t3125 = t3041 * t3045;
t3038 = sin(pkin(7));
t3128 = t3038 * t3045;
t3039 = sin(pkin(6));
t3140 = qJD(1) * t3039;
t2994 = t3031 * t3128 + (t3046 * t3050 + t3051 * t3125) * t3140;
t3127 = t3039 * t3046;
t3117 = qJD(1) * t3127;
t3119 = qJDD(1) * t3039;
t3013 = -qJD(2) * t3117 + t3051 * t3119;
t3030 = t3042 * qJDD(1) + qJDD(2);
t3070 = t3013 * t3041 + t3030 * t3038;
t3126 = t3039 * t3051;
t3116 = qJD(1) * t3126;
t3120 = qJD(2) * t3116 + t3046 * t3119;
t3063 = -t2994 * qJD(3) - t3045 * t3120 + t3050 * t3070;
t3059 = qJDD(4) - t3063;
t3053 = qJD(1) ^ 2;
t3129 = t3039 ^ 2 * t3053;
t3158 = t3046 * t3129;
t3047 = sin(qJ(1));
t3052 = cos(qJ(1));
t3026 = -g(1) * t3052 - g(2) * t3047;
t3061 = -pkin(1) * t3053 + pkin(9) * t3119 + t3026;
t3058 = t3046 * t3061;
t3025 = t3047 * g(1) - t3052 * g(2);
t3064 = pkin(9) * t3039 * t3053 + qJDD(1) * pkin(1) + t3025;
t3060 = t3042 * t3064;
t2982 = -t3058 + (-t3039 * g(3) + t3060) * t3051;
t3001 = -t3042 * g(3) - t3039 * t3064;
t3156 = t3031 * t3038 + t3041 * t3116;
t3065 = t3156 * pkin(10);
t3057 = -t3013 * pkin(2) + (-pkin(10) * t3041 * t3117 + pkin(2) * t3031) * t3117 - t3065 * t3116 + t3001;
t3142 = pkin(10) * t3038;
t3069 = -pkin(2) * t3051 - t3046 * t3142;
t3067 = t3069 * t3140;
t3130 = t3031 * t3041;
t3118 = pkin(10) * t3130;
t3141 = t3030 * pkin(2);
t3144 = t3031 ^ 2;
t3157 = t3041 * (t3141 + (t3038 * t3144 - t3041 * t3120) * pkin(10) + (-t3046 * t3067 + t3051 * t3118) * t3140 + t2982) + t3038 * (-t3120 * t3142 + t3057);
t3006 = -t3038 * t3116 + qJD(3) + t3130;
t3044 = sin(qJ(4));
t3049 = cos(qJ(4));
t2979 = t2994 * t3044 - t3049 * t3006;
t2978 = qJD(6) + t2979;
t3155 = qJD(6) + t2978;
t2981 = t2994 * t3049 + t3006 * t3044;
t2992 = t3045 * t3117 - t3050 * t3156;
t2990 = qJD(4) + t2992;
t3037 = sin(pkin(13));
t3040 = cos(pkin(13));
t2957 = t2981 * t3037 - t3040 * t2990;
t2959 = t2981 * t3040 + t2990 * t3037;
t3043 = sin(qJ(6));
t3048 = cos(qJ(6));
t2925 = t3048 * t2957 + t2959 * t3043;
t3154 = t2925 ^ 2;
t2927 = -t2957 * t3043 + t2959 * t3048;
t3153 = t2927 ^ 2;
t3152 = t2957 ^ 2;
t3151 = t2959 ^ 2;
t3150 = t2978 ^ 2;
t2950 = t2979 ^ 2;
t3149 = t2981 ^ 2;
t3148 = t2990 ^ 2;
t3147 = t2992 ^ 2;
t3146 = t2994 ^ 2;
t3145 = t3006 ^ 2;
t3143 = -2 * qJD(5);
t3139 = t2925 * t2927;
t3138 = t2957 * t2959;
t3137 = t2959 * t2979;
t3136 = t2979 * t2957;
t3135 = t2979 * t2981;
t3134 = t2992 * t2994;
t3133 = t2992 * t3006;
t3132 = t3006 * t2994;
t3124 = qJD(4) - t2990;
t3123 = qJD(6) - t2978;
t3121 = t3046 * t3060 + t3051 * t3061;
t2948 = -t3144 * pkin(2) + t3070 * pkin(10) + (-t3046 * g(3) + (t3046 * t3118 + t3051 * t3067) * qJD(1)) * t3039 + t3121;
t2902 = t3050 * t2948 + t3045 * t3157;
t2976 = pkin(3) * t2992 - pkin(11) * t2994;
t2996 = -t3013 * t3038 + t3041 * t3030 + qJDD(3);
t2888 = -pkin(3) * t3145 + pkin(11) * t2996 - t2976 * t2992 + t2902;
t2923 = -t3038 * (-g(3) * t3126 + t3031 * t3065 + t3051 * t3060 - t3069 * t3158 - t3058 + t3141) + t3041 * t3057;
t2938 = -t3063 + t3132;
t2968 = -t2992 * qJD(3) + t3013 * t3125 + t3030 * t3128 + t3050 * t3120;
t3111 = -t2968 + t3133;
t3054 = pkin(3) * t2938 + pkin(11) * t3111 + t2923;
t2850 = t3049 * t2888 + t3044 * t3054;
t2949 = pkin(4) * t2979 - qJ(5) * t2981;
t2835 = -pkin(4) * t3148 + qJ(5) * t3059 - t2979 * t2949 + t2850;
t3108 = t2948 * t3045 - t3050 * t3157;
t2887 = -t2996 * pkin(3) - t3145 * pkin(11) + t2976 * t2994 + t3108;
t3112 = t2968 * t3044 - t3049 * t2996;
t2931 = qJD(4) * t2981 + t3112;
t3075 = -t2968 * t3049 - t2996 * t3044;
t2932 = -qJD(4) * t2979 - t3075;
t3113 = t2990 * t2979 - t2932;
t2844 = t3113 * qJ(5) + (t2981 * t2990 + t2931) * pkin(4) + t2887;
t2816 = t3040 * t2835 + t3037 * t2844 + t2957 * t3143;
t2849 = -t2888 * t3044 + t3049 * t3054;
t2916 = t3040 * t2932 + t3037 * t3059;
t3114 = t2932 * t3037 - t3040 * t3059;
t3115 = -t2916 * t3043 - t3048 * t3114;
t2896 = -t2916 - t3136;
t2899 = t2931 - t3138;
t3110 = t3031 * t3116;
t2815 = -t2835 * t3037 + t3040 * t2844 + t2959 * t3143;
t2794 = pkin(5) * t2899 + pkin(12) * t2896 + t2815;
t2935 = pkin(5) * t2979 - pkin(12) * t2959;
t2801 = -pkin(5) * t3152 - pkin(12) * t3114 - t2979 * t2935 + t2816;
t2777 = t2794 * t3048 - t2801 * t3043;
t2778 = t2794 * t3043 + t2801 * t3048;
t2759 = t2777 * t3048 + t2778 * t3043;
t2760 = -t2777 * t3043 + t2778 * t3048;
t2748 = -t2759 * t3037 + t2760 * t3040;
t2834 = -t3059 * pkin(4) - t3148 * qJ(5) + t2949 * t2981 + qJDD(5) - t2849;
t2825 = pkin(5) * t3114 - pkin(12) * t3152 + t2935 * t2959 + t2834;
t2745 = t2748 * t3044 - t2825 * t3049;
t2746 = t2748 * t3049 + t2825 * t3044;
t2747 = t2759 * t3040 + t2760 * t3037;
t3106 = t2746 * t3045 - t2747 * t3050;
t2738 = -t3038 * t2745 + t3041 * t3106;
t2739 = t2746 * t3050 + t2747 * t3045;
t3107 = t2738 * t3051 + t2739 * t3046;
t2784 = -t2815 * t3037 + t2816 * t3040;
t2779 = t2784 * t3044 - t2834 * t3049;
t2780 = t2784 * t3049 + t2834 * t3044;
t2783 = t2815 * t3040 + t2816 * t3037;
t3101 = t2780 * t3045 - t2783 * t3050;
t2755 = -t3038 * t2779 + t3041 * t3101;
t2764 = t2780 * t3050 + t2783 * t3045;
t3105 = t2755 * t3051 + t2764 * t3046;
t2854 = -t2927 * t3123 + t3115;
t3066 = -t3048 * t2916 + t3043 * t3114;
t2856 = t2925 * t3123 + t3066;
t2821 = t2854 * t3043 + t2856 * t3048;
t2822 = t2854 * t3048 - t2856 * t3043;
t2793 = -t2821 * t3037 + t2822 * t3040;
t2878 = -t3153 - t3154;
t2788 = t2793 * t3044 - t2878 * t3049;
t2789 = t2793 * t3049 + t2878 * t3044;
t2792 = t2821 * t3040 + t2822 * t3037;
t3099 = t2789 * t3045 - t2792 * t3050;
t2758 = -t3038 * t2788 + t3041 * t3099;
t2765 = t2789 * t3050 + t2792 * t3045;
t3104 = t2758 * t3051 + t2765 * t3046;
t3068 = -qJDD(6) - t2931;
t2881 = -t3068 - t3139;
t2892 = -t3150 - t3154;
t2847 = t2881 * t3048 + t2892 * t3043;
t2848 = -t2881 * t3043 + t2892 * t3048;
t2818 = -t2847 * t3037 + t2848 * t3040;
t2853 = t2927 * t3155 - t3115;
t2799 = t2818 * t3044 - t2853 * t3049;
t2800 = t2818 * t3049 + t2853 * t3044;
t2817 = t2847 * t3040 + t2848 * t3037;
t3097 = t2800 * t3045 - t2817 * t3050;
t2769 = -t3038 * t2799 + t3041 * t3097;
t2781 = t2800 * t3050 + t2817 * t3045;
t3103 = t2769 * t3051 + t2781 * t3046;
t2882 = t3068 - t3139;
t2909 = -t3150 - t3153;
t2863 = t2882 * t3043 + t2909 * t3048;
t2864 = t2882 * t3048 - t2909 * t3043;
t2827 = -t2863 * t3037 + t2864 * t3040;
t2855 = -t2925 * t3155 - t3066;
t2802 = t2827 * t3044 - t2855 * t3049;
t2803 = t2827 * t3049 + t2855 * t3044;
t2826 = t2863 * t3040 + t2864 * t3037;
t3096 = t2803 * t3045 - t2826 * t3050;
t2771 = -t3038 * t2802 + t3041 * t3096;
t2787 = t2803 * t3050 + t2826 * t3045;
t3102 = t2771 * t3051 + t2787 * t3046;
t2819 = t2849 * t3049 + t2850 * t3044;
t2820 = -t2849 * t3044 + t2850 * t3049;
t3093 = t2820 * t3045 - t2887 * t3050;
t2786 = -t3038 * t2819 + t3041 * t3093;
t2812 = t2820 * t3050 + t2887 * t3045;
t3100 = t2786 * t3051 + t2812 * t3046;
t2894 = -t3114 + t3137;
t2866 = t2894 * t3040 - t2896 * t3037;
t2912 = -t3151 - t3152;
t2838 = t2866 * t3044 - t2912 * t3049;
t2839 = t2866 * t3049 + t2912 * t3044;
t2865 = t2894 * t3037 + t2896 * t3040;
t3091 = t2839 * t3045 - t2865 * t3050;
t2798 = -t3038 * t2838 + t3041 * t3091;
t2823 = t2839 * t3050 + t2865 * t3045;
t3098 = t2798 * t3051 + t2823 * t3046;
t2922 = -t2950 - t3152;
t2875 = -t2899 * t3037 + t2922 * t3040;
t2893 = t3114 + t3137;
t2840 = t2875 * t3044 - t2893 * t3049;
t2841 = t2875 * t3049 + t2893 * t3044;
t2874 = t2899 * t3040 + t2922 * t3037;
t3090 = t2841 * t3045 - t2874 * t3050;
t2805 = -t3038 * t2840 + t3041 * t3090;
t2829 = t2841 * t3050 + t2874 * t3045;
t3095 = t2805 * t3051 + t2829 * t3046;
t2900 = -t2931 - t3138;
t2924 = -t2950 - t3151;
t2880 = t2900 * t3040 - t2924 * t3037;
t2895 = t2916 - t3136;
t2851 = t2880 * t3044 - t2895 * t3049;
t2852 = t2880 * t3049 + t2895 * t3044;
t2879 = t2900 * t3037 + t2924 * t3040;
t3089 = t2852 * t3045 - t2879 * t3050;
t2809 = -t3038 * t2851 + t3041 * t3089;
t2831 = t2852 * t3050 + t2879 * t3045;
t3094 = t2809 * t3051 + t2831 * t3046;
t2918 = -t2981 * t3124 - t3112;
t2920 = t2979 * t3124 + t3075;
t2883 = t2918 * t3044 + t2920 * t3049;
t2884 = t2918 * t3049 - t2920 * t3044;
t2933 = -t3149 - t2950;
t3085 = t2884 * t3045 - t2933 * t3050;
t2837 = -t2883 * t3038 + t3041 * t3085;
t2872 = t2884 * t3050 + t2933 * t3045;
t3092 = t2837 * t3051 + t2872 * t3046;
t2928 = t3059 - t3135;
t2937 = -t2950 - t3148;
t2903 = t2928 * t3049 + t2937 * t3044;
t2904 = -t2928 * t3044 + t2937 * t3049;
t2917 = (qJD(4) + t2990) * t2981 + t3112;
t3082 = t2904 * t3045 - t2917 * t3050;
t2858 = -t2903 * t3038 + t3041 * t3082;
t2876 = t2904 * t3050 + t2917 * t3045;
t3088 = t2858 * t3051 + t2876 * t3046;
t3083 = t2902 * t3045 - t3050 * t3108;
t2860 = -t2923 * t3038 + t3041 * t3083;
t2871 = t2902 * t3050 + t3045 * t3108;
t3087 = t2860 * t3051 + t2871 * t3046;
t2929 = -t3135 - t3059;
t2946 = -t3148 - t3149;
t2905 = t2929 * t3044 + t2946 * t3049;
t2906 = t2929 * t3049 - t2946 * t3044;
t3081 = t2906 * t3045 + t3050 * t3113;
t2862 = -t2905 * t3038 + t3041 * t3081;
t2877 = t2906 * t3050 - t3045 * t3113;
t3086 = t2862 * t3051 + t2877 * t3046;
t2960 = -t3146 - t3147;
t2939 = t3063 + t3132;
t2941 = -t2968 - t3133;
t3078 = t2939 * t3045 + t2941 * t3050;
t2898 = -t2960 * t3038 + t3041 * t3078;
t2913 = t2939 * t3050 - t2941 * t3045;
t3084 = t2898 * t3051 + t2913 * t3046;
t2963 = t2996 - t3134;
t2967 = -t3145 - t3147;
t3076 = t2963 * t3050 + t2967 * t3045;
t2908 = -t2938 * t3038 + t3041 * t3076;
t2930 = -t2963 * t3045 + t2967 * t3050;
t3080 = t2908 * t3051 + t2930 * t3046;
t2962 = -t2996 - t3134;
t2973 = -t3145 - t3146;
t3077 = t2962 * t3045 + t2973 * t3050;
t2911 = t3038 * t3111 + t3041 * t3077;
t2934 = t2962 * t3050 - t2973 * t3045;
t3079 = t2911 * t3051 + t2934 * t3046;
t2983 = -g(3) * t3127 + t3121;
t3074 = t2982 * t3051 + t2983 * t3046;
t2998 = t3110 - t3120;
t3016 = t3031 * t3117;
t2999 = t3013 + t3016;
t3073 = t2998 * t3051 + t2999 * t3046;
t3035 = t3046 ^ 2;
t3007 = -t3035 * t3129 - t3144;
t3024 = t3051 * t3158;
t3012 = t3024 - t3030;
t3072 = t3007 * t3051 + t3012 * t3046;
t3011 = t3024 + t3030;
t3036 = t3051 ^ 2;
t3014 = -t3036 * t3129 - t3144;
t3071 = t3011 * t3051 + t3014 * t3046;
t3023 = -qJDD(1) * t3047 - t3052 * t3053;
t3022 = qJDD(1) * t3052 - t3047 * t3053;
t3015 = (-t3035 - t3036) * t3129;
t3000 = -t3013 + t3016;
t2997 = t3110 + t3120;
t2986 = -t3011 * t3046 + t3014 * t3051;
t2984 = -t3007 * t3046 + t3012 * t3051;
t2977 = -t2998 * t3046 + t2999 * t3051;
t2975 = -t3000 * t3039 + t3042 * t3071;
t2974 = t3000 * t3042 + t3039 * t3071;
t2972 = -t2997 * t3039 + t3042 * t3072;
t2971 = t2997 * t3042 + t3039 * t3072;
t2970 = -t3015 * t3039 + t3042 * t3073;
t2969 = t3015 * t3042 + t3039 * t3073;
t2961 = -t2982 * t3046 + t2983 * t3051;
t2943 = -t3001 * t3039 + t3042 * t3074;
t2942 = t3001 * t3042 + t3039 * t3074;
t2910 = t3038 * t3077 - t3041 * t3111;
t2907 = t2938 * t3041 + t3038 * t3076;
t2897 = t2960 * t3041 + t3038 * t3078;
t2891 = -t2911 * t3046 + t2934 * t3051;
t2886 = -t2908 * t3046 + t2930 * t3051;
t2873 = -t2898 * t3046 + t2913 * t3051;
t2870 = -t2910 * t3039 + t3042 * t3079;
t2869 = t2910 * t3042 + t3039 * t3079;
t2868 = -t2907 * t3039 + t3042 * t3080;
t2867 = t2907 * t3042 + t3039 * t3080;
t2861 = t2905 * t3041 + t3038 * t3081;
t2859 = t2923 * t3041 + t3038 * t3083;
t2857 = t2903 * t3041 + t3038 * t3082;
t2846 = -t2897 * t3039 + t3042 * t3084;
t2845 = t2897 * t3042 + t3039 * t3084;
t2836 = t2883 * t3041 + t3038 * t3085;
t2832 = -t2862 * t3046 + t2877 * t3051;
t2830 = -t2858 * t3046 + t2876 * t3051;
t2828 = -t2860 * t3046 + t2871 * t3051;
t2824 = -t2837 * t3046 + t2872 * t3051;
t2814 = -t2861 * t3039 + t3042 * t3086;
t2813 = t2861 * t3042 + t3039 * t3086;
t2811 = -t3039 * t2857 + t3042 * t3088;
t2810 = t3042 * t2857 + t3039 * t3088;
t2808 = t3041 * t2851 + t3038 * t3089;
t2807 = -t2859 * t3039 + t3042 * t3087;
t2806 = t2859 * t3042 + t3039 * t3087;
t2804 = t3041 * t2840 + t3038 * t3090;
t2797 = t3041 * t2838 + t3038 * t3091;
t2796 = -t3039 * t2836 + t3042 * t3092;
t2795 = t3042 * t2836 + t3039 * t3092;
t2791 = -t2809 * t3046 + t2831 * t3051;
t2790 = -t2805 * t3046 + t2829 * t3051;
t2785 = t3041 * t2819 + t3038 * t3093;
t2782 = -t2798 * t3046 + t2823 * t3051;
t2776 = -t3039 * t2808 + t3042 * t3094;
t2775 = t3042 * t2808 + t3039 * t3094;
t2774 = -t3039 * t2804 + t3042 * t3095;
t2773 = t3042 * t2804 + t3039 * t3095;
t2772 = -t2786 * t3046 + t2812 * t3051;
t2770 = t3041 * t2802 + t3038 * t3096;
t2768 = t3041 * t2799 + t3038 * t3097;
t2767 = -t3039 * t2797 + t3042 * t3098;
t2766 = t3042 * t2797 + t3039 * t3098;
t2763 = -t3039 * t2785 + t3042 * t3100;
t2762 = t3042 * t2785 + t3039 * t3100;
t2761 = -t2771 * t3046 + t2787 * t3051;
t2757 = t3041 * t2788 + t3038 * t3099;
t2756 = -t2769 * t3046 + t2781 * t3051;
t2754 = t3041 * t2779 + t3038 * t3101;
t2753 = -t3039 * t2770 + t3042 * t3102;
t2752 = t3042 * t2770 + t3039 * t3102;
t2751 = -t3039 * t2768 + t3042 * t3103;
t2750 = t3042 * t2768 + t3039 * t3103;
t2749 = -t2758 * t3046 + t2765 * t3051;
t2744 = -t2755 * t3046 + t2764 * t3051;
t2743 = -t3039 * t2757 + t3042 * t3104;
t2742 = t3042 * t2757 + t3039 * t3104;
t2741 = -t3039 * t2754 + t3042 * t3105;
t2740 = t3042 * t2754 + t3039 * t3105;
t2737 = t3041 * t2745 + t3038 * t3106;
t2736 = -t2738 * t3046 + t2739 * t3051;
t2735 = -t3039 * t2737 + t3042 * t3107;
t2734 = t3042 * t2737 + t3039 * t3107;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3023, -t3022, 0, -t3025 * t3047 + t3026 * t3052, 0, 0, 0, 0, 0, 0, -t2975 * t3047 + t2986 * t3052, -t2972 * t3047 + t2984 * t3052, -t2970 * t3047 + t2977 * t3052, -t2943 * t3047 + t2961 * t3052, 0, 0, 0, 0, 0, 0, -t2868 * t3047 + t2886 * t3052, -t2870 * t3047 + t2891 * t3052, -t2846 * t3047 + t2873 * t3052, -t2807 * t3047 + t2828 * t3052, 0, 0, 0, 0, 0, 0, -t2811 * t3047 + t2830 * t3052, -t2814 * t3047 + t2832 * t3052, -t2796 * t3047 + t2824 * t3052, -t2763 * t3047 + t2772 * t3052, 0, 0, 0, 0, 0, 0, -t2774 * t3047 + t2790 * t3052, -t2776 * t3047 + t2791 * t3052, -t2767 * t3047 + t2782 * t3052, -t2741 * t3047 + t2744 * t3052, 0, 0, 0, 0, 0, 0, -t2751 * t3047 + t2756 * t3052, -t2753 * t3047 + t2761 * t3052, -t2743 * t3047 + t2749 * t3052, -t2735 * t3047 + t2736 * t3052; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3022, t3023, 0, t3025 * t3052 + t3026 * t3047, 0, 0, 0, 0, 0, 0, t2975 * t3052 + t2986 * t3047, t2972 * t3052 + t2984 * t3047, t2970 * t3052 + t2977 * t3047, t2943 * t3052 + t2961 * t3047, 0, 0, 0, 0, 0, 0, t2868 * t3052 + t2886 * t3047, t2870 * t3052 + t2891 * t3047, t2846 * t3052 + t2873 * t3047, t2807 * t3052 + t2828 * t3047, 0, 0, 0, 0, 0, 0, t2811 * t3052 + t2830 * t3047, t2814 * t3052 + t2832 * t3047, t2796 * t3052 + t2824 * t3047, t2763 * t3052 + t2772 * t3047, 0, 0, 0, 0, 0, 0, t2774 * t3052 + t2790 * t3047, t2776 * t3052 + t2791 * t3047, t2767 * t3052 + t2782 * t3047, t2741 * t3052 + t2744 * t3047, 0, 0, 0, 0, 0, 0, t2751 * t3052 + t2756 * t3047, t2753 * t3052 + t2761 * t3047, t2743 * t3052 + t2749 * t3047, t2735 * t3052 + t2736 * t3047; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2974, t2971, t2969, t2942, 0, 0, 0, 0, 0, 0, t2867, t2869, t2845, t2806, 0, 0, 0, 0, 0, 0, t2810, t2813, t2795, t2762, 0, 0, 0, 0, 0, 0, t2773, t2775, t2766, t2740, 0, 0, 0, 0, 0, 0, t2750, t2752, t2742, t2734; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3053, -qJDD(1), 0, t3026, 0, 0, 0, 0, 0, 0, t2986, t2984, t2977, t2961, 0, 0, 0, 0, 0, 0, t2886, t2891, t2873, t2828, 0, 0, 0, 0, 0, 0, t2830, t2832, t2824, t2772, 0, 0, 0, 0, 0, 0, t2790, t2791, t2782, t2744, 0, 0, 0, 0, 0, 0, t2756, t2761, t2749, t2736; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3053, 0, t3025, 0, 0, 0, 0, 0, 0, t2975, t2972, t2970, t2943, 0, 0, 0, 0, 0, 0, t2868, t2870, t2846, t2807, 0, 0, 0, 0, 0, 0, t2811, t2814, t2796, t2763, 0, 0, 0, 0, 0, 0, t2774, t2776, t2767, t2741, 0, 0, 0, 0, 0, 0, t2751, t2753, t2743, t2735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2974, t2971, t2969, t2942, 0, 0, 0, 0, 0, 0, t2867, t2869, t2845, t2806, 0, 0, 0, 0, 0, 0, t2810, t2813, t2795, t2762, 0, 0, 0, 0, 0, 0, t2773, t2775, t2766, t2740, 0, 0, 0, 0, 0, 0, t2750, t2752, t2742, t2734; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3014, t3012, t2999, t2983, 0, 0, 0, 0, 0, 0, t2930, t2934, t2913, t2871, 0, 0, 0, 0, 0, 0, t2876, t2877, t2872, t2812, 0, 0, 0, 0, 0, 0, t2829, t2831, t2823, t2764, 0, 0, 0, 0, 0, 0, t2781, t2787, t2765, t2739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3011, t3007, t2998, t2982, 0, 0, 0, 0, 0, 0, t2908, t2911, t2898, t2860, 0, 0, 0, 0, 0, 0, t2858, t2862, t2837, t2786, 0, 0, 0, 0, 0, 0, t2805, t2809, t2798, t2755, 0, 0, 0, 0, 0, 0, t2769, t2771, t2758, t2738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3000, t2997, t3015, t3001, 0, 0, 0, 0, 0, 0, t2907, t2910, t2897, t2859, 0, 0, 0, 0, 0, 0, t2857, t2861, t2836, t2785, 0, 0, 0, 0, 0, 0, t2804, t2808, t2797, t2754, 0, 0, 0, 0, 0, 0, t2768, t2770, t2757, t2737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2967, t2962, t2939, t2902, 0, 0, 0, 0, 0, 0, t2904, t2906, t2884, t2820, 0, 0, 0, 0, 0, 0, t2841, t2852, t2839, t2780, 0, 0, 0, 0, 0, 0, t2800, t2803, t2789, t2746; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2963, t2973, t2941, -t3108, 0, 0, 0, 0, 0, 0, -t2917, t3113, -t2933, -t2887, 0, 0, 0, 0, 0, 0, -t2874, -t2879, -t2865, -t2783, 0, 0, 0, 0, 0, 0, -t2817, -t2826, -t2792, -t2747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2938, -t3111, t2960, t2923, 0, 0, 0, 0, 0, 0, t2903, t2905, t2883, t2819, 0, 0, 0, 0, 0, 0, t2840, t2851, t2838, t2779, 0, 0, 0, 0, 0, 0, t2799, t2802, t2788, t2745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2937, t2929, t2918, t2850, 0, 0, 0, 0, 0, 0, t2875, t2880, t2866, t2784, 0, 0, 0, 0, 0, 0, t2818, t2827, t2793, t2748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2928, t2946, t2920, t2849, 0, 0, 0, 0, 0, 0, -t2893, -t2895, -t2912, -t2834, 0, 0, 0, 0, 0, 0, -t2853, -t2855, -t2878, -t2825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2917, -t3113, t2933, t2887, 0, 0, 0, 0, 0, 0, t2874, t2879, t2865, t2783, 0, 0, 0, 0, 0, 0, t2817, t2826, t2792, t2747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2922, t2900, t2894, t2816, 0, 0, 0, 0, 0, 0, t2848, t2864, t2822, t2760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2899, t2924, t2896, t2815, 0, 0, 0, 0, 0, 0, t2847, t2863, t2821, t2759; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2893, t2895, t2912, t2834, 0, 0, 0, 0, 0, 0, t2853, t2855, t2878, t2825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2892, t2882, t2854, t2778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2881, t2909, t2856, t2777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2853, t2855, t2878, t2825;];
f_new_reg  = t1;
