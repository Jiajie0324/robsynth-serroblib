% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRRR1_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR1_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR1_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR1_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:14:39
% EndTime: 2019-03-09 13:14:56
% DurationCPUTime: 9.72s
% Computational Cost: add. (26576->535), mult. (69494->681), div. (0->0), fcn. (54772->10), ass. (0->285)
t228 = sin(qJ(5));
t229 = sin(qJ(2));
t231 = cos(qJ(2));
t329 = cos(pkin(11));
t288 = qJD(1) * t329;
t279 = t231 * t288;
t328 = sin(pkin(11));
t287 = qJD(1) * t328;
t193 = t229 * t287 - t279;
t257 = t229 * t329 + t231 * t328;
t195 = t257 * qJD(1);
t365 = sin(qJ(4));
t367 = cos(qJ(4));
t259 = t193 * t365 - t195 * t367;
t277 = qJD(2) * t287;
t212 = t229 * t277;
t278 = qJD(2) * t288;
t263 = t231 * t278 - t212;
t314 = t229 * t278 + t231 * t277;
t240 = qJD(4) * t259 - t263 * t365 - t367 * t314;
t296 = qJD(4) * t365;
t297 = qJD(4) * t367;
t258 = -t193 * t297 - t195 * t296 + t367 * t263 - t365 * t314;
t261 = -t193 * t367 - t195 * t365;
t366 = cos(qJ(5));
t295 = qJD(5) * t366;
t309 = qJD(5) * t228;
t48 = -t228 * t240 - t258 * t366 - t259 * t309 - t261 * t295;
t292 = -t228 * t258 + t240 * t366;
t395 = t228 * t261 - t259 * t366;
t408 = t395 * qJD(5);
t49 = -t292 + t408;
t304 = qJD(1) * qJD(2);
t294 = t229 * t304;
t217 = pkin(2) * t294;
t160 = pkin(3) * t314 + t217;
t76 = -pkin(4) * t240 + t160;
t12 = t49 * pkin(5) + t48 * pkin(10) + t76;
t227 = sin(qJ(6));
t230 = cos(qJ(6));
t355 = -qJ(3) - pkin(7);
t291 = qJD(2) * t355;
t190 = qJD(3) * t231 + t229 * t291;
t173 = t190 * qJD(1);
t191 = -qJD(3) * t229 + t231 * t291;
t174 = t191 * qJD(1);
t127 = -t173 * t328 + t329 * t174;
t111 = -pkin(8) * t263 + t127;
t128 = t329 * t173 + t328 * t174;
t112 = -pkin(8) * t314 + t128;
t210 = t355 * t231;
t206 = qJD(1) * t210;
t197 = t328 * t206;
t209 = t355 * t229;
t205 = qJD(1) * t209;
t348 = qJD(2) * pkin(2);
t201 = t205 + t348;
t154 = t329 * t201 + t197;
t360 = t195 * pkin(8);
t122 = qJD(2) * pkin(3) + t154 - t360;
t290 = t329 * t206;
t155 = t328 * t201 - t290;
t361 = t193 * pkin(8);
t126 = t155 - t361;
t282 = -t365 * t111 - t367 * t112 - t122 * t297 + t126 * t296;
t31 = pkin(9) * t240 - t282;
t260 = -t122 * t365 - t126 * t367;
t51 = qJD(4) * t260 + t367 * t111 - t112 * t365;
t32 = -pkin(9) * t258 + t51;
t224 = qJD(2) + qJD(4);
t404 = pkin(9) * t259;
t74 = t367 * t122 - t126 * t365;
t67 = t74 + t404;
t64 = t224 * pkin(4) + t67;
t390 = pkin(9) * t261;
t68 = -t260 + t390;
t242 = -t228 * t32 - t295 * t64 + t68 * t309 - t31 * t366;
t289 = qJD(5) + t224;
t302 = t366 * t68;
t38 = t228 * t64 + t302;
t36 = pkin(10) * t289 + t38;
t101 = t228 * t259 + t261 * t366;
t221 = -t231 * pkin(2) - pkin(1);
t312 = qJD(1) * t221;
t207 = qJD(3) + t312;
t159 = pkin(3) * t193 + t207;
t113 = -pkin(4) * t261 + t159;
t54 = -pkin(5) * t101 - pkin(10) * t395 + t113;
t274 = t227 * t36 - t230 * t54;
t2 = -qJD(6) * t274 + t12 * t227 - t230 * t242;
t416 = qJD(6) - t101;
t363 = t274 * t416;
t424 = t2 + t363;
t346 = t395 ^ 2;
t347 = t101 ^ 2;
t399 = t346 - t347;
t14 = t227 * t54 + t230 * t36;
t3 = -qJD(6) * t14 + t230 * t12 + t227 * t242;
t423 = t14 * t416 + t3;
t84 = t227 * t289 + t230 * t395;
t327 = qJD(6) * t84;
t29 = -t227 * t48 + t327;
t27 = t29 * t230;
t272 = t230 * t289;
t82 = t227 * t395 - t272;
t339 = t227 * t82;
t422 = t339 * t416 - t27;
t308 = qJD(6) * t227;
t28 = -qJD(6) * t272 + t230 * t48 + t308 * t395;
t25 = t28 * t227;
t307 = qJD(6) * t230;
t420 = t101 * t230;
t407 = -t25 + (t307 - t420) * t84;
t45 = t227 * t49;
t353 = t307 * t416 + t45;
t356 = t84 * t395;
t405 = -t416 * t420 + t353 - t356;
t336 = t228 * t68;
t37 = t366 * t64 - t336;
t35 = -pkin(5) * t289 - t37;
t421 = t101 * t35;
t387 = t101 * t289;
t398 = -t48 - t387;
t419 = t101 * t274;
t345 = t395 * t101;
t284 = t395 * t224;
t371 = t284 + t292;
t30 = t366 * t32;
t293 = t228 * t31 - t30;
t386 = t113 * t395;
t418 = -t293 - t386;
t415 = t101 * t14 - t3;
t63 = pkin(5) * t395 - pkin(10) * t101;
t414 = t101 * t37 + t38 * t395;
t397 = -t113 * t101 + t242;
t335 = t230 * t82;
t338 = t227 * t84;
t273 = t335 + t338;
t301 = t84 * t308;
t26 = t230 * t28;
t354 = -t227 * t29 - t82 * t307;
t303 = -t26 + t354;
t413 = t101 * t273 - t301 + t303;
t358 = t82 * t395;
t388 = t416 * t395;
t322 = t259 * t224;
t410 = t240 - t322;
t321 = t261 ^ 2;
t323 = t259 ^ 2;
t409 = -t321 + t323;
t8 = qJD(5) * t38 + t293;
t368 = t8 * t227 + t35 * t307;
t374 = t14 * t395 + t368;
t33 = t35 * t308;
t376 = t274 * t395 + t33;
t337 = t227 * t416;
t47 = t230 * t49;
t406 = -t337 * t416 + t358 + t47;
t364 = pkin(4) * t259;
t319 = t261 * t259;
t320 = t261 * t224;
t401 = t258 - t320;
t256 = t229 * t328 - t231 * t329;
t156 = -t365 * t256 + t367 * t257;
t400 = t367 * t256 + t365 * t257;
t396 = t159 * t259 + t51;
t394 = t224 * t156;
t235 = t224 * t400;
t392 = -0.2e1 * t304;
t157 = -t205 * t328 + t290;
t129 = t157 + t361;
t158 = t329 * t205 + t197;
t130 = t158 - t360;
t77 = t129 * t367 - t130 * t365;
t251 = t77 - t390;
t78 = t365 * t129 + t367 * t130;
t70 = t78 + t404;
t42 = t228 * t251 + t366 * t70;
t218 = pkin(2) * t329 + pkin(3);
t298 = t328 * pkin(2);
t188 = t367 * t218 - t365 * t298;
t187 = pkin(4) + t188;
t189 = t218 * t365 + t298 * t367;
t139 = t187 * t366 - t228 * t189;
t181 = t188 * qJD(4);
t182 = t189 * qJD(4);
t85 = qJD(5) * t139 + t181 * t366 - t228 * t182;
t351 = -t85 + t42;
t140 = t228 * t187 + t366 * t189;
t350 = -t140 * qJD(5) + (-t182 - t251) * t366 + (-t181 + t70) * t228;
t267 = t308 * t416 - t47;
t379 = t14 * t230 + t227 * t274;
t378 = qJD(2) * t256;
t377 = qJD(2) * t257;
t372 = -t159 * t261 + t282;
t370 = t195 ^ 2;
t232 = qJD(2) ^ 2;
t161 = t329 * t209 + t210 * t328;
t146 = -pkin(8) * t257 + t161;
t162 = t328 * t209 - t329 * t210;
t147 = -pkin(8) * t256 + t162;
t88 = t367 * t146 - t147 * t365;
t72 = -t156 * pkin(9) + t88;
t89 = t365 * t146 + t367 * t147;
t73 = -pkin(9) * t400 + t89;
t52 = t228 * t73 - t366 * t72;
t369 = t52 * t8;
t1 = t2 * t230;
t359 = t8 * t230;
t357 = t84 * t82;
t349 = pkin(4) * qJD(5);
t237 = t366 * t400;
t106 = t156 * t228 + t237;
t344 = t106 * t49;
t341 = t227 * t35;
t334 = t230 * t84;
t333 = t230 * t416;
t331 = t181 - t78;
t330 = -t182 - t77;
t326 = qJD(6) * t416;
t318 = t195 * t193;
t233 = qJD(1) ^ 2;
t317 = t231 * t233;
t316 = t232 * t229;
t315 = t232 * t231;
t145 = t329 * t190 + t328 * t191;
t313 = t229 ^ 2 - t231 ^ 2;
t311 = qJD(1) * t229;
t310 = qJD(2) * t195;
t223 = t229 * t348;
t222 = pkin(2) * t311;
t299 = t229 * t317;
t166 = pkin(3) * t195 + t222;
t285 = pkin(1) * t392;
t283 = pkin(4) * t295;
t281 = t231 * t294;
t39 = t228 * t67 + t302;
t280 = pkin(4) * t309 - t39;
t275 = t14 * t227 - t230 * t274;
t53 = t228 * t72 + t366 * t73;
t238 = t228 * t400;
t107 = t156 * t366 - t238;
t176 = pkin(3) * t256 + t221;
t123 = pkin(4) * t400 + t176;
t61 = t106 * pkin(5) - t107 * pkin(10) + t123;
t23 = t227 * t61 + t230 * t53;
t22 = -t227 * t53 + t230 * t61;
t144 = -t190 * t328 + t329 * t191;
t270 = t101 * t337 - t267;
t114 = t166 - t364;
t269 = -t301 - t26;
t138 = pkin(10) + t140;
t264 = -t138 * t49 - t416 * t85 - t421;
t118 = pkin(8) * t378 + t144;
t119 = -pkin(8) * t377 + t145;
t262 = t118 * t367 - t119 * t365;
t58 = t365 * t118 + t367 * t119 + t146 * t297 - t147 * t296;
t219 = t228 * pkin(4) + pkin(10);
t250 = -t219 * t49 - t283 * t416 - t421;
t241 = -qJD(6) * t275 - t3 * t227 + t1;
t167 = pkin(3) * t377 + t223;
t81 = pkin(4) * t394 + t167;
t234 = pkin(9) * t235 - t146 * t296 - t147 * t297 + t262;
t220 = -pkin(4) * t366 - pkin(5);
t192 = t193 ^ 2;
t137 = -pkin(5) - t139;
t60 = -t364 + t63;
t59 = -qJD(4) * t89 + t262;
t57 = -qJD(5) * t238 + t156 * t295 - t228 * t235 + t366 * t394;
t56 = qJD(5) * t237 + t156 * t309 + t228 * t394 + t235 * t366;
t55 = t114 + t63;
t44 = -pkin(9) * t394 + t58;
t40 = t366 * t67 - t336;
t21 = t227 * t63 + t230 * t37;
t20 = -t227 * t37 + t230 * t63;
t19 = t227 * t60 + t230 * t40;
t18 = -t227 * t40 + t230 * t60;
t17 = t227 * t55 + t230 * t42;
t16 = -t227 * t42 + t230 * t55;
t15 = t57 * pkin(5) + t56 * pkin(10) + t81;
t10 = qJD(5) * t53 + t228 * t44 - t234 * t366;
t9 = t228 * t234 + t295 * t72 - t309 * t73 + t366 * t44;
t5 = -qJD(6) * t23 + t15 * t230 - t227 * t9;
t4 = qJD(6) * t22 + t15 * t227 + t230 * t9;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t281, t313 * t392, t315, -0.2e1 * t281, -t316, 0, -pkin(7) * t315 + t229 * t285, pkin(7) * t316 + t231 * t285, 0, 0, -t195 * t378 + t257 * t263, t193 * t378 - t195 * t377 - t256 * t263 - t257 * t314, -t256 * t232, t193 * t377 + t256 * t314, -t257 * t232, 0, t144 * qJD(2) + t193 * t223 + t207 * t377 + t221 * t314 + t222 * t378, -t145 * qJD(2) + t195 * t223 - t207 * t378 + t221 * t263 + t222 * t377, -t127 * t257 - t128 * t256 - t144 * t195 - t145 * t193 + t154 * t378 - t155 * t377 - t161 * t263 - t162 * t314, t127 * t161 + t128 * t162 + t144 * t154 + t145 * t155 + (t207 + t312) * t223, t258 * t156 + t235 * t259, t156 * t240 - t235 * t261 - t258 * t400 + t259 * t394, -t235 * t224, -t240 * t400 - t394 * t261, -t394 * t224, 0, t159 * t394 + t160 * t400 - t167 * t261 - t176 * t240 + t59 * t224, t160 * t156 - t159 * t235 - t167 * t259 + t176 * t258 - t58 * t224, -t51 * t156 + t235 * t74 + t240 * t89 - t258 * t88 + t259 * t59 + t260 * t394 + t261 * t58 + t282 * t400, t159 * t167 + t160 * t176 - t260 * t58 - t282 * t89 + t51 * t88 + t59 * t74, -t107 * t48 - t395 * t56, -t101 * t56 + t106 * t48 - t107 * t49 - t395 * t57, -t56 * t289, -t101 * t57 + t344, -t57 * t289, 0, -t10 * t289 - t101 * t81 + t76 * t106 + t113 * t57 + t123 * t49, t76 * t107 - t113 * t56 - t123 * t48 - t289 * t9 + t395 * t81, t10 * t395 + t101 * t9 + t106 * t242 + t107 * t8 + t37 * t56 - t38 * t57 - t48 * t52 - t49 * t53, -t10 * t37 + t113 * t81 + t123 * t76 - t242 * t53 + t38 * t9 + t369, t107 * t269 - t334 * t56, t273 * t56 + (t25 - t27 + (-t334 + t339) * qJD(6)) * t107, -t106 * t28 - t107 * t267 - t333 * t56 + t57 * t84, -t107 * t354 - t339 * t56, -t106 * t29 - t107 * t353 + t337 * t56 - t57 * t82, t416 * t57 + t344, t10 * t82 + t106 * t3 + t107 * t368 + t22 * t49 - t274 * t57 + t29 * t52 - t341 * t56 + t416 * t5, -t230 * t35 * t56 + t10 * t84 - t106 * t2 - t14 * t57 - t23 * t49 - t28 * t52 - t4 * t416 + (-t33 + t359) * t107, t22 * t28 - t23 * t29 - t4 * t82 - t5 * t84 + t275 * t56 + (-qJD(6) * t379 - t2 * t227 - t230 * t3) * t107, t10 * t35 + t14 * t4 + t2 * t23 + t22 * t3 - t274 * t5 + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t313 * t233, 0, t299, 0, 0, t233 * pkin(1) * t229, pkin(1) * t317, 0, 0, t318, -t192 + t370, -t212 + (t279 + t193) * qJD(2), -t318, t310 - t314, 0, -t157 * qJD(2) - t193 * t222 - t207 * t195 + t127, qJD(2) * t158 + t193 * t207 - t195 * t222 - t128 (t155 + t157) * t195 + (t158 - t154) * t193 + (-t263 * t329 - t314 * t328) * pkin(2), -t154 * t157 - t155 * t158 + (t127 * t329 + t128 * t328 - t207 * t311) * pkin(2), t319, t409, t401, -t319, t410, 0, t166 * t261 + t224 * t330 + t396, t166 * t259 - t224 * t331 + t372, -t188 * t258 + t189 * t240 + (t331 + t74) * t261 + (t260 + t330) * t259, -t159 * t166 + t188 * t51 - t189 * t282 - t260 * t331 + t330 * t74, -t345, t399, t398, t345, t371, 0, t114 * t101 + (-t38 + t350) * qJD(5) + t350 * t224 + t418, -t114 * t395 + t351 * t289 + t397, -t101 * t351 + t139 * t48 - t140 * t49 - t350 * t395 + t414, -t113 * t114 - t139 * t8 - t140 * t242 + t350 * t37 - t351 * t38, t407, t413, t405, t422, t270 + t358, -t388, t137 * t29 - t16 * t416 - t350 * t82 + (-t138 * t326 - t8) * t230 + t264 * t227 + t376, -t137 * t28 + (t138 * t308 + t17) * t416 - t350 * t84 + t264 * t230 + t374, t16 * t84 + t17 * t82 + t1 + (-t419 - t138 * t29 - t82 * t85 + (t138 * t84 + t274) * qJD(6)) * t230 + (-t138 * t28 + t84 * t85 + (t138 * t82 - t14) * qJD(6) + t415) * t227, t137 * t8 - t350 * t35 + (t230 * t85 - t17) * t14 - (-t227 * t85 - t16) * t274 + t241 * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t310 + t314, -t212 + (t279 - t193) * qJD(2), -t192 - t370, t154 * t195 + t155 * t193 + t217, 0, 0, 0, 0, 0, 0, -t240 - t322, t258 + t320, -t321 - t323, -t259 * t74 + t260 * t261 + t160, 0, 0, 0, 0, 0, 0, t284 - t292 + 0.2e1 * t408, -t48 + t387, -t346 - t347, -t38 * t101 + t37 * t395 + t76, 0, 0, 0, 0, 0, 0, t270 - t358, -t333 * t416 - t356 - t45 (t335 - t338) * t101 - t269 + t354, t424 * t227 + t423 * t230 - t35 * t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t319, t409, t401, -t319, t410, 0, -t224 * t260 + t396, t224 * t74 + t372, 0, 0, -t345, t399, t398, t345, t371, 0, -t68 * t295 + t30 - t101 * t364 - t386 + t39 * t289 + (-qJD(5) * t64 - t289 * t349 - t31) * t228, t40 * t289 + (t259 * t395 - t289 * t295) * pkin(4) + t397, -t39 * t395 - t40 * t101 + (t366 * t48 - t228 * t49 + (t101 * t366 + t228 * t395) * qJD(5)) * pkin(4) + t414, t37 * t39 - t38 * t40 + (-t366 * t8 + t113 * t259 - t228 * t242 + (-t228 * t37 + t366 * t38) * qJD(5)) * pkin(4), t407, t413, t405, t422, t406, -t388, -t18 * t416 + t220 * t29 + t280 * t82 + (-t219 * t326 - t8) * t230 + t250 * t227 + t376, -t220 * t28 + (t219 * t308 + t19) * t416 + t280 * t84 + t250 * t230 + t374, t18 * t84 + t19 * t82 + t1 + (-t82 * t283 - t419 - t219 * t29 + (t219 * t84 + t274) * qJD(6)) * t230 + (t84 * t283 - t219 * t28 + (t219 * t82 - t14) * qJD(6) + t415) * t227, t274 * t18 - t14 * t19 + t8 * t220 - t35 * t39 + (t228 * t35 + t366 * t379) * t349 + t241 * t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t345, t399, t398, t345, t371, 0, t224 * t38 + t418, t289 * t37 + t397, 0, 0, t407, -t337 * t84 + t420 * t82 + t303, t405, t337 * t82 - t27, t406, -t388, -pkin(5) * t29 - pkin(10) * t353 - t101 * t341 - t20 * t416 - t38 * t82 - t359 + t376, pkin(5) * t28 + pkin(10) * t267 + t21 * t416 - t35 * t420 - t38 * t84 + t374, t20 * t84 + t21 * t82 + t1 + (t363 + (-t29 + t327) * pkin(10)) * t230 + ((qJD(6) * t82 - t28) * pkin(10) - t423) * t227, -pkin(5) * t8 + pkin(10) * t241 - t14 * t21 + t20 * t274 - t35 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357, -t82 ^ 2 + t84 ^ 2, t416 * t82 - t28, -t357, t416 * t84 - t29, t49, -t35 * t84 + t423, t35 * t82 - t424, 0, 0;];
tauc_reg  = t6;
