% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:14:29
% EndTime: 2019-03-09 13:14:40
% DurationCPUTime: 3.89s
% Computational Cost: add. (13456->257), mult. (28176->450), div. (0->0), fcn. (30104->10), ass. (0->151)
t102 = sin(qJ(6));
t100 = t102 ^ 2;
t105 = cos(qJ(6));
t101 = t105 ^ 2;
t183 = t100 + t101;
t103 = sin(qJ(5));
t187 = cos(pkin(11));
t154 = t187 * pkin(2) + pkin(3);
t202 = cos(qJ(4));
t137 = t202 * t154;
t186 = sin(pkin(11));
t166 = t186 * pkin(2);
t200 = sin(qJ(4));
t143 = t200 * t166;
t121 = t143 - t137;
t119 = pkin(4) - t121;
t201 = cos(qJ(5));
t117 = t201 * t119;
t80 = t200 * t154 + t202 * t166;
t118 = t80 * qJD(4);
t87 = qJD(4) * t143;
t127 = -qJD(4) * t137 + t87;
t176 = -qJD(5) * t117 + t103 * t118 + t201 * t127;
t180 = qJD(5) * t103;
t35 = t80 * t180 + t176;
t161 = t183 * t35;
t104 = sin(qJ(2));
t106 = cos(qJ(2));
t197 = -qJ(3) - pkin(7);
t146 = t186 * t197;
t147 = t187 * t197;
t115 = (-t186 * pkin(8) + t146) * t106 + (-t187 * pkin(8) + t147) * t104;
t130 = t186 * t104 - t187 * t106;
t66 = t130 * t197;
t61 = -t130 * pkin(8) + t66;
t208 = -t202 * t115 + t200 * t61;
t131 = t187 * t104 + t186 * t106;
t114 = t202 * t130 + t200 * t131;
t64 = -t200 * t130 + t202 * t131;
t184 = t100 - t101;
t206 = t184 * qJD(6);
t38 = t200 * t115 + t202 * t61;
t113 = t201 * t114;
t44 = t103 * t64 + t113;
t45 = -t103 * t114 + t201 * t64;
t98 = -t106 * pkin(2) - pkin(1);
t73 = t130 * pkin(3) + t98;
t48 = t114 * pkin(4) + t73;
t109 = -t44 * pkin(5) + t45 * pkin(10) - t48;
t108 = t105 * t109;
t138 = -t64 * pkin(9) - t208;
t30 = -pkin(9) * t114 + t38;
t20 = t103 * t138 + t201 * t30;
t10 = -t102 * t20 - t108;
t11 = -t102 * t109 + t105 * t20;
t207 = -t10 * t102 + t105 * t11;
t157 = qJD(2) * t186;
t158 = qJD(2) * t187;
t141 = -t104 * t157 + t106 * t158;
t194 = t104 * t158 + t106 * t157;
t111 = t114 * qJD(4) - t202 * t141 + t200 * t194;
t135 = t64 * qJD(4) + t200 * t141 + t202 * t194;
t22 = qJD(5) * t113 + t103 * t135 + t201 * t111 + t64 * t180;
t23 = t45 * qJD(5) - t103 * t111 + t201 * t135;
t182 = qJD(2) * t104;
t172 = pkin(2) * t182;
t67 = t194 * pkin(3) + t172;
t31 = t135 * pkin(4) + t67;
t116 = t23 * pkin(5) + t22 * pkin(10) + t31;
t179 = qJD(6) * t102;
t162 = qJD(2) * t197;
t132 = t106 * qJD(3) + t104 * t162;
t133 = -t104 * qJD(3) + t106 * t162;
t59 = -t186 * t132 + t187 * t133;
t110 = -t141 * pkin(8) + t59;
t60 = t187 * t132 + t186 * t133;
t112 = -t194 * pkin(8) + t60;
t25 = -t38 * qJD(4) + t202 * t110 - t200 * t112;
t107 = -pkin(9) * t111 - t25;
t128 = t201 * t138;
t24 = t208 * qJD(4) - t200 * t110 - t202 * t112;
t16 = -t135 * pkin(9) - t24;
t6 = -qJD(5) * t128 + t103 * t107 - t201 * t16 + t30 * t180;
t2 = qJD(6) * t108 - t102 * t116 + t105 * t6 + t20 * t179;
t3 = -t11 * qJD(6) + t102 * t6 + t105 * t116;
t205 = -qJD(6) * t207 + t2 * t102 - t3 * t105;
t19 = t103 * t30 - t128;
t7 = t20 * qJD(5) + t103 * t16 + t201 * t107;
t204 = t19 * t7;
t99 = qJD(6) * t105;
t18 = t19 * t99;
t203 = t7 * t102 + t18;
t122 = t103 * t127 - t201 * t118;
t74 = t201 * t80;
t58 = t103 * t119 + t74;
t36 = t58 * qJD(5) - t122;
t199 = t19 * t36;
t198 = t45 * t22;
t190 = t103 * t80;
t57 = t117 - t190;
t55 = -pkin(5) - t57;
t196 = t36 * t102 + t55 * t99;
t175 = t201 * pkin(4);
t156 = qJD(5) * t175;
t81 = t183 * t156;
t171 = pkin(4) * t180;
t97 = -t175 - pkin(5);
t195 = t102 * t171 + t97 * t99;
t193 = qJD(5) * pkin(4);
t191 = t103 * t19;
t188 = t105 * t22;
t181 = qJD(2) * t106;
t178 = 0.2e1 * t44 * t23;
t177 = -0.2e1 * pkin(1) * qJD(2);
t174 = pkin(5) * t179;
t173 = pkin(5) * t99;
t170 = t102 * t188;
t168 = t45 * t179;
t167 = t45 * t99;
t17 = t19 * t179;
t165 = t102 * t99;
t164 = t104 * t181;
t49 = t55 * t179;
t163 = -t36 * t105 + t49;
t43 = t45 ^ 2;
t155 = t43 * t165;
t153 = -t19 * t22 + t45 * t7;
t151 = t22 * t44 - t23 * t45;
t150 = t35 * t44 + t36 * t45;
t56 = pkin(10) + t58;
t149 = t44 * t56 - t45 * t55;
t96 = t103 * pkin(4) + pkin(10);
t148 = t44 * t96 - t45 * t97;
t145 = t10 * t105 + t102 * t11;
t85 = t97 * t179;
t142 = -t105 * t171 + t85;
t140 = t168 + t188;
t14 = t102 * t23 + t44 * t99;
t139 = -t105 * t23 + t44 * t179;
t136 = t183 * t201;
t134 = (t103 * t45 - t201 * t44) * qJD(5);
t129 = -t22 * t55 - t23 * t56 + t150;
t1 = -t145 * qJD(6) - t3 * t102 - t2 * t105;
t120 = pkin(4) * t134 - t22 * t97 - t23 * t96;
t92 = -0.2e1 * t165;
t91 = 0.2e1 * t165;
t84 = -0.2e1 * t206;
t65 = t104 * t147 + t106 * t146;
t12 = t45 * t206 + t170;
t9 = -0.4e1 * t45 * t165 + t184 * t22;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t164, 0.2e1 * (-t104 ^ 2 + t106 ^ 2) * qJD(2), 0, -0.2e1 * t164, 0, 0, t104 * t177, t106 * t177, 0, 0, 0.2e1 * t131 * t141, -0.2e1 * t141 * t130 - 0.2e1 * t131 * t194, 0, 0.2e1 * t130 * t194, 0, 0, 0.2e1 * t130 * t172 + 0.2e1 * t98 * t194, 0.2e1 * t131 * t172 + 0.2e1 * t98 * t141, -0.2e1 * t60 * t130 - 0.2e1 * t59 * t131 - 0.2e1 * t65 * t141 - 0.2e1 * t66 * t194, 0.2e1 * t98 * t172 + 0.2e1 * t65 * t59 + 0.2e1 * t66 * t60, -0.2e1 * t64 * t111, 0.2e1 * t111 * t114 - 0.2e1 * t64 * t135, 0, 0.2e1 * t114 * t135, 0, 0, 0.2e1 * t67 * t114 + 0.2e1 * t73 * t135, -0.2e1 * t111 * t73 + 0.2e1 * t67 * t64, -0.2e1 * t111 * t208 + 0.2e1 * t24 * t114 - 0.2e1 * t38 * t135 - 0.2e1 * t25 * t64, -0.2e1 * t208 * t25 - 0.2e1 * t38 * t24 + 0.2e1 * t73 * t67, -0.2e1 * t198, 0.2e1 * t151, 0, t178, 0, 0, 0.2e1 * t23 * t48 + 0.2e1 * t31 * t44, -0.2e1 * t22 * t48 + 0.2e1 * t31 * t45, -0.2e1 * t20 * t23 + 0.2e1 * t44 * t6 + 0.2e1 * t153, -0.2e1 * t20 * t6 + 0.2e1 * t31 * t48 + 0.2e1 * t204, -0.2e1 * t101 * t198 - 0.2e1 * t155, 0.4e1 * t45 * t170 + 0.2e1 * t43 * t206, -0.2e1 * t105 * t151 - 0.2e1 * t44 * t168, -0.2e1 * t100 * t198 + 0.2e1 * t155, 0.2e1 * t102 * t151 - 0.2e1 * t44 * t167, t178, 0.2e1 * t10 * t23 + 0.2e1 * t102 * t153 + 0.2e1 * t45 * t18 + 0.2e1 * t3 * t44, 0.2e1 * t105 * t153 - 0.2e1 * t11 * t23 - 0.2e1 * t45 * t17 + 0.2e1 * t2 * t44, 0.2e1 * t145 * t22 + 0.2e1 * t205 * t45, 0.2e1 * t10 * t3 - 0.2e1 * t11 * t2 + 0.2e1 * t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, 0, -t182, 0, -pkin(7) * t181, pkin(7) * t182, 0, 0, 0, 0, t141, 0, -t194, 0, t59, -t60 (-t187 * t141 - t186 * t194) * pkin(2) (t186 * t60 + t187 * t59) * pkin(2), 0, 0, -t111, 0, -t135, 0, t25, t24, -t111 * t121 + t127 * t114 + t64 * t118 - t80 * t135, t118 * t208 - t121 * t25 - t38 * t127 - t24 * t80, 0, 0, -t22, 0, -t23, 0, -t7, t6, t22 * t57 - t23 * t58 + t150, -t20 * t35 - t57 * t7 - t58 * t6 + t199, -t12, t9, t14, t12, -t139, 0, t17 + (-qJD(6) * t149 - t7) * t105 + t129 * t102, t105 * t129 + t149 * t179 + t203, t1, t1 * t56 - t207 * t35 + t7 * t55 + t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t118, 0.2e1 * t127, 0, 0.2e1 * (-t87 + (t137 + t121) * qJD(4)) * t80, 0, 0, 0, 0, 0, 0, -0.2e1 * t36, 0.2e1 * t35, 0, -0.2e1 * t35 * t58 - 0.2e1 * t36 * t57, t91, t84, 0, t92, 0, 0, 0.2e1 * t163, 0.2e1 * t196, -0.2e1 * t161, -0.2e1 * t161 * t56 + 0.2e1 * t55 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, t141, 0, t172, 0, 0, 0, 0, 0, 0, t135, -t111, 0, t67, 0, 0, 0, 0, 0, 0, t23, -t22, 0, t31, 0, 0, 0, 0, 0, 0, -t139, -t14, t183 * t22, -t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, 0, -t135, 0, t25, t24, 0, 0, 0, 0, -t22, 0, -t23, 0, -t7, t6 (-t103 * t23 + t201 * t22 + t134) * pkin(4) (-t201 * t7 - t103 * t6 + (t201 * t20 + t191) * qJD(5)) * pkin(4), -t12, t9, t14, t12, -t139, 0, t17 + (-qJD(6) * t148 - t7) * t105 + t120 * t102, t105 * t120 + t148 * t179 + t203, t1, t7 * t97 + (t207 * t201 + t191) * t193 + t1 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t118, t127, 0, 0, 0, 0, 0, 0, 0, 0 (-t74 + (-0.2e1 * pkin(4) + t121) * t103) * qJD(5) + t122 (-t175 + t190) * qJD(5) + t176, 0 (-t201 * t36 - t103 * t35 + (-t103 * t57 + t201 * t58) * qJD(5)) * pkin(4), t91, t84, 0, t92, 0, 0, t49 + t85 + (-t36 - t171) * t105, t195 + t196, t81 - t161, t36 * t97 - t96 * t161 + (t103 * t55 + t136 * t56) * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t171, -0.2e1 * t156, 0, 0, t91, t84, 0, t92, 0, 0, 0.2e1 * t142, 0.2e1 * t195, 0.2e1 * t81, 0.2e1 * (t103 * t97 + t136 * t96) * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, 0, -t23, 0, -t7, t6, 0, 0, -t12, t9, t14, t12, -t139, 0, t17 + (pkin(5) * t22 - pkin(10) * t23) * t102 + (-t7 + (-pkin(5) * t45 - pkin(10) * t44) * qJD(6)) * t105, pkin(5) * t140 + pkin(10) * t139 + t203, t1, -t7 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t35, 0, 0, t91, t84, 0, t92, 0, 0, t163 - t174, -t173 + t196, -t161, -t36 * pkin(5) - pkin(10) * t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t171, -t156, 0, 0, t91, t84, 0, t92, 0, 0, t142 - t174, -t173 + t195, t81 (-pkin(5) * t103 + pkin(10) * t136) * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, t84, 0, t92, 0, 0, -0.2e1 * t174, -0.2e1 * t173, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t140, 0, t102 * t22 - t167, t23, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, -t179, 0, t102 * t35 - t56 * t99, t105 * t35 + t56 * t179, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t179, -t99, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, -t179, 0, -t102 * t156 - t96 * t99, -t105 * t156 + t96 * t179, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, -t179, 0, -pkin(10) * t99, pkin(10) * t179, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t4;
