% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 19:35
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:32:52
% EndTime: 2019-05-06 19:33:54
% DurationCPUTime: 57.87s
% Computational Cost: add. (481134->953), mult. (1164215->1473), div. (0->0), fcn. (905054->12), ass. (0->654)
t1106 = cos(qJ(2));
t1088 = t1106 * qJDD(1);
t1101 = sin(qJ(2));
t1174 = qJD(1) * t1101;
t1138 = qJD(2) * t1174;
t1062 = t1088 - t1138;
t1095 = t1106 ^ 2;
t1109 = qJD(1) ^ 2;
t1117 = qJD(2) * pkin(2) - qJ(3) * t1174;
t1102 = sin(qJ(1));
t1107 = cos(qJ(1));
t1071 = t1102 * g(1) - t1107 * g(2);
t1118 = qJDD(1) * pkin(1) + t1071;
t987 = t1062 * pkin(2) - t1117 * t1174 - qJDD(3) + t1118 + (qJ(3) * t1095 + pkin(7)) * t1109;
t1096 = sin(pkin(11));
t1097 = cos(pkin(11));
t1173 = qJD(1) * t1106;
t1050 = t1096 * t1174 - t1097 * t1173;
t1048 = t1050 ^ 2;
t1052 = (t1096 * t1106 + t1097 * t1101) * qJD(1);
t1123 = qJD(2) * pkin(3) - pkin(8) * t1052;
t1133 = qJD(2) * t1173;
t1148 = qJDD(1) * t1101;
t1061 = t1133 + t1148;
t1126 = t1061 * t1096 - t1097 * t1062;
t914 = -pkin(3) * t1126 + t1048 * pkin(8) - t1052 * t1123 + t987;
t1214 = -2 * qJD(3);
t1021 = t1052 * t1050;
t1201 = qJDD(2) - t1021;
t1213 = t1096 * t1201;
t1212 = t1097 * t1201;
t1098 = sin(qJ(6));
t1099 = sin(qJ(5));
t1104 = cos(qJ(5));
t1100 = sin(qJ(4));
t1105 = cos(qJ(4));
t1013 = -t1050 * t1100 + t1052 * t1105;
t1023 = t1061 * t1097 + t1062 * t1096;
t1127 = t1100 * t1023 + t1105 * t1126;
t931 = -qJD(4) * t1013 - t1127;
t1012 = -t1050 * t1105 - t1100 * t1052;
t932 = qJD(4) * t1012 + t1105 * t1023 - t1100 * t1126;
t1129 = t1099 * t932 - t1104 * t931;
t958 = t1012 * t1099 + t1013 * t1104;
t843 = -qJD(5) * t958 - t1129;
t1116 = qJDD(6) - t843;
t1093 = qJD(2) + qJD(4);
t1086 = qJD(5) + t1093;
t1103 = cos(qJ(6));
t940 = -t1103 * t1086 + t1098 * t958;
t942 = t1086 * t1098 + t1103 * t958;
t878 = t942 * t940;
t1204 = t1116 - t878;
t1211 = t1098 * t1204;
t1144 = qJDD(2) + qJDD(4);
t1085 = qJDD(5) + t1144;
t956 = -t1104 * t1012 + t1013 * t1099;
t897 = t958 * t956;
t1203 = -t897 + t1085;
t1210 = t1099 * t1203;
t964 = t1012 * t1013;
t1202 = t964 + t1144;
t1209 = t1100 * t1202;
t1208 = t1103 * t1204;
t1207 = t1104 * t1203;
t1206 = t1105 * t1202;
t1010 = t1012 ^ 2;
t1122 = pkin(4) * t1093 - pkin(9) * t1013;
t826 = t931 * pkin(4) + t1010 * pkin(9) - t1013 * t1122 + t914;
t1171 = qJD(2) * t1052;
t991 = -t1126 + t1171;
t844 = -qJD(5) * t956 + t1099 * t931 + t1104 * t932;
t949 = t1086 * t956;
t818 = t844 - t949;
t809 = -t940 * qJD(6) + t1098 * t1085 + t1103 * t844;
t952 = qJD(6) + t956;
t887 = t952 * t940;
t783 = -t887 + t809;
t1002 = t1093 * t1012;
t910 = t1002 - t932;
t1205 = t1002 + t932;
t1108 = qJD(2) ^ 2;
t1015 = -t1108 - t1048;
t1152 = t1101 * t1109;
t1072 = g(1) * t1107 + g(2) * t1102;
t1055 = -pkin(1) * t1109 + qJDD(1) * pkin(7) - t1072;
t1153 = t1101 * t1055;
t1175 = qJD(1) * qJD(2);
t982 = qJDD(2) * pkin(2) - t1061 * qJ(3) - t1153 + (pkin(2) * t1152 + qJ(3) * t1175 - g(3)) * t1106;
t1037 = -t1101 * g(3) + t1106 * t1055;
t1090 = t1095 * t1109;
t983 = -pkin(2) * t1090 + t1062 * qJ(3) - qJD(2) * t1117 + t1037;
t1120 = t1052 * t1214 - t1096 * t983 + t1097 * t982;
t1128 = -t1103 * t1085 + t1098 * t844;
t780 = (qJD(6) - t952) * t942 + t1128;
t816 = (qJD(5) - t1086) * t958 + t1129;
t906 = (qJD(4) - t1093) * t1013 + t1127;
t938 = t940 ^ 2;
t939 = t942 ^ 2;
t951 = t952 ^ 2;
t954 = t956 ^ 2;
t955 = t958 ^ 2;
t1011 = t1013 ^ 2;
t1049 = t1052 ^ 2;
t1200 = t1086 ^ 2;
t1092 = t1093 ^ 2;
t1199 = pkin(5) * t1099;
t1172 = qJD(2) * t1050;
t993 = -t1023 - t1172;
t1113 = pkin(3) * t1201 + pkin(8) * t993 + t1120;
t916 = t1050 * t1214 + t1096 * t982 + t1097 * t983;
t1114 = -t1048 * pkin(3) - pkin(8) * t1126 - qJD(2) * t1123 + t916;
t804 = t1100 * t1114 - t1105 * t1113;
t1110 = pkin(4) * t1202 + pkin(9) * t910 - t804;
t805 = t1100 * t1113 + t1105 * t1114;
t769 = -t1010 * pkin(4) + t931 * pkin(9) - t1093 * t1122 + t805;
t695 = t1099 * t1110 + t1104 * t769;
t893 = pkin(5) * t956 - pkin(10) * t958;
t676 = -pkin(5) * t1200 + pkin(10) * t1085 - t893 * t956 + t695;
t712 = (t1086 * t958 - t843) * pkin(5) - t818 * pkin(10) - t826;
t639 = t1098 * t712 + t1103 * t676;
t727 = t1100 * t805 - t1105 * t804;
t1198 = t1096 * t727;
t1197 = t1096 * t987;
t1196 = t1097 * t727;
t1195 = t1097 * t987;
t694 = t1099 * t769 - t1104 * t1110;
t675 = -t1085 * pkin(5) - pkin(10) * t1200 + t893 * t958 + t694;
t1194 = t1098 * t675;
t799 = t1116 + t878;
t1193 = t1098 * t799;
t1192 = t1098 * t952;
t1191 = t1099 * t826;
t891 = t897 + t1085;
t1190 = t1099 * t891;
t644 = t1099 * t695 - t1104 * t694;
t1189 = t1100 * t644;
t1188 = t1100 * t914;
t961 = -t964 + t1144;
t1187 = t1100 * t961;
t856 = t1096 * t916 + t1097 * t1120;
t1186 = t1101 * t856;
t1185 = t1103 * t675;
t1184 = t1103 * t799;
t1183 = t1103 * t952;
t1182 = t1104 * t826;
t1181 = t1104 * t891;
t1180 = t1105 * t644;
t1179 = t1105 * t914;
t1178 = t1105 * t961;
t1177 = t1106 * t856;
t1017 = qJDD(2) + t1021;
t1169 = t1017 * t1096;
t1168 = t1017 * t1097;
t1167 = t1050 * t1096;
t1166 = t1050 * t1097;
t1165 = t1052 * t1096;
t1164 = t1052 * t1097;
t1054 = t1109 * pkin(7) + t1118;
t1163 = t1054 * t1101;
t1162 = t1054 * t1106;
t1081 = t1106 * t1152;
t1069 = qJDD(2) + t1081;
t1161 = t1069 * t1101;
t1070 = qJDD(2) - t1081;
t1160 = t1070 * t1101;
t1159 = t1070 * t1106;
t1158 = t1086 * t1099;
t1157 = t1086 * t1104;
t1156 = t1093 * t1100;
t1155 = t1093 * t1105;
t1094 = t1101 ^ 2;
t1154 = t1094 * t1109;
t1149 = t1094 + t1095;
t1147 = qJDD(1) * t1102;
t1146 = qJDD(1) * t1107;
t1145 = qJDD(2) * t1107;
t1143 = t1099 * t878;
t1142 = t1102 * t897;
t1141 = t1104 * t878;
t1140 = t1107 * t897;
t1139 = -pkin(5) * t1104 - pkin(4);
t1137 = t1102 * t964;
t1136 = t1107 * t964;
t1135 = t1102 * t1021;
t1134 = t1107 * t1021;
t857 = -t1096 * t1120 + t1097 * t916;
t638 = t1098 * t676 - t1103 * t712;
t645 = t1099 * t694 + t1104 * t695;
t728 = t1100 * t804 + t1105 * t805;
t1036 = t1106 * g(3) + t1153;
t986 = t1036 * t1101 + t1106 * t1037;
t1029 = -t1071 * t1102 - t1107 * t1072;
t1125 = t1102 * t1081;
t1124 = t1107 * t1081;
t1066 = -t1102 * t1109 + t1146;
t1121 = -pkin(6) * t1066 - g(3) * t1102;
t591 = t1098 * t639 - t1103 * t638;
t592 = t1098 * t638 + t1103 * t639;
t985 = t1036 * t1106 - t1037 * t1101;
t1028 = t1071 * t1107 - t1072 * t1102;
t1087 = t1102 * qJDD(2);
t1080 = -t1090 - t1108;
t1079 = t1090 - t1108;
t1078 = -t1108 - t1154;
t1077 = t1108 - t1154;
t1068 = t1090 - t1154;
t1067 = t1090 + t1154;
t1065 = t1107 * t1109 + t1147;
t1064 = t1149 * qJDD(1);
t1063 = t1088 - 0.2e1 * t1138;
t1060 = 0.2e1 * t1133 + t1148;
t1058 = t1106 * t1069;
t1057 = t1149 * t1175;
t1047 = -pkin(6) * t1065 + g(3) * t1107;
t1042 = -t1049 - t1108;
t1041 = -t1049 + t1108;
t1040 = t1048 - t1108;
t1039 = t1061 * t1106 - t1094 * t1175;
t1038 = -t1062 * t1101 - t1095 * t1175;
t1035 = -t1078 * t1101 - t1159;
t1034 = -t1077 * t1101 + t1058;
t1033 = t1080 * t1106 - t1161;
t1032 = t1079 * t1106 - t1160;
t1031 = t1078 * t1106 - t1160;
t1030 = t1080 * t1101 + t1058;
t1026 = t1064 * t1107 - t1067 * t1102;
t1025 = t1064 * t1102 + t1067 * t1107;
t1024 = -t1060 * t1101 + t1063 * t1106;
t1020 = -t1049 + t1048;
t1008 = (t1165 - t1166) * qJD(2);
t1007 = (-t1164 - t1167) * qJD(2);
t1006 = t1035 * t1107 + t1060 * t1102;
t1005 = t1033 * t1107 - t1063 * t1102;
t1004 = t1035 * t1102 - t1060 * t1107;
t1003 = t1033 * t1102 + t1063 * t1107;
t1000 = -t1011 + t1092;
t999 = t1010 - t1092;
t998 = -pkin(7) * t1031 - t1162;
t997 = -pkin(7) * t1030 - t1163;
t996 = -t1011 - t1092;
t995 = -pkin(1) * t1031 + t1037;
t994 = -pkin(1) * t1030 + t1036;
t992 = t1023 - t1172;
t989 = t1126 + t1171;
t988 = -t1048 - t1049;
t981 = -qJD(2) * t1165 + t1023 * t1097;
t980 = qJD(2) * t1164 + t1023 * t1096;
t979 = qJD(2) * t1166 + t1096 * t1126;
t978 = qJD(2) * t1167 - t1097 * t1126;
t974 = -t1042 * t1096 - t1168;
t973 = -t1041 * t1096 + t1212;
t972 = t1040 * t1097 - t1169;
t971 = t1042 * t1097 - t1169;
t970 = t1041 * t1097 + t1213;
t969 = t1040 * t1096 + t1168;
t968 = -t1054 * t1102 + t1107 * t986;
t967 = t1054 * t1107 + t1102 * t986;
t966 = t1015 * t1097 - t1213;
t965 = t1015 * t1096 + t1212;
t963 = -t1011 + t1010;
t959 = -t1092 - t1010;
t948 = -t955 + t1200;
t947 = t954 - t1200;
t946 = -t1007 * t1101 + t1008 * t1106;
t945 = (t1012 * t1105 + t1013 * t1100) * t1093;
t944 = (t1012 * t1100 - t1013 * t1105) * t1093;
t943 = -t955 - t1200;
t936 = -t1096 * t993 + t1097 * t991;
t935 = -t1096 * t992 - t1097 * t989;
t934 = t1096 * t991 + t1097 * t993;
t933 = -t1096 * t989 + t1097 * t992;
t929 = -qJ(3) * t971 - t1195;
t928 = -t1010 - t1011;
t927 = -t1101 * t980 + t1106 * t981;
t926 = -t1101 * t978 + t1106 * t979;
t925 = -t1101 * t971 + t1106 * t974;
t924 = -t1101 * t970 + t1106 * t973;
t923 = -t1101 * t969 + t1106 * t972;
t922 = t1101 * t974 + t1106 * t971;
t921 = -qJ(3) * t965 - t1197;
t920 = t1105 * t999 - t1187;
t919 = -t1000 * t1100 + t1206;
t918 = t1100 * t999 + t1178;
t917 = t1000 * t1105 + t1209;
t913 = -t1100 * t996 - t1178;
t912 = t1105 * t996 - t1187;
t905 = (qJD(4) + t1093) * t1013 + t1127;
t904 = -t1013 * t1156 + t1105 * t932;
t903 = t1013 * t1155 + t1100 * t932;
t902 = -t1012 * t1155 - t1100 * t931;
t901 = -t1012 * t1156 + t1105 * t931;
t900 = -t1101 * t965 + t1106 * t966;
t899 = t1101 * t966 + t1106 * t965;
t898 = -pkin(2) * t992 + qJ(3) * t974 - t1197;
t896 = -t955 + t954;
t895 = t1105 * t959 - t1209;
t894 = t1100 * t959 + t1206;
t889 = -t1200 - t954;
t888 = -pkin(2) * t989 + qJ(3) * t966 + t1195;
t886 = -t939 + t951;
t885 = t938 - t951;
t884 = t1102 * t992 + t1107 * t925;
t883 = t1102 * t925 - t1107 * t992;
t882 = (t1099 * t958 - t1104 * t956) * t1086;
t881 = (-t1099 * t956 - t1104 * t958) * t1086;
t880 = -t1096 * t944 + t1097 * t945;
t879 = t1096 * t945 + t1097 * t944;
t877 = -t939 + t938;
t875 = t1102 * t989 + t1107 * t900;
t874 = -t1101 * t934 + t1106 * t936;
t873 = -t1101 * t933 + t1106 * t935;
t872 = t1102 * t900 - t1107 * t989;
t871 = t1101 * t936 + t1106 * t934;
t869 = -t954 - t955;
t868 = -t939 - t951;
t867 = t1104 * t947 - t1190;
t866 = -t1099 * t948 + t1207;
t865 = t1099 * t947 + t1181;
t864 = t1104 * t948 + t1210;
t863 = t1102 * t988 + t1107 * t874;
t862 = t1102 * t874 - t1107 * t988;
t861 = -t1096 * t918 + t1097 * t920;
t860 = -t1096 * t917 + t1097 * t919;
t859 = t1096 * t920 + t1097 * t918;
t858 = t1096 * t919 + t1097 * t917;
t855 = -pkin(8) * t912 - t1179;
t854 = -t1099 * t943 - t1181;
t853 = t1104 * t943 - t1190;
t852 = -t951 - t938;
t851 = -t1096 * t912 + t1097 * t913;
t850 = t1096 * t913 + t1097 * t912;
t849 = t938 + t939;
t848 = -t1100 * t910 - t1105 * t906;
t847 = -t1100 * t1205 - t1105 * t905;
t846 = -t1100 * t906 + t1105 * t910;
t845 = -t1100 * t905 + t1105 * t1205;
t842 = -pkin(8) * t894 - t1188;
t839 = -t1096 * t903 + t1097 * t904;
t838 = -t1096 * t901 + t1097 * t902;
t837 = t1096 * t904 + t1097 * t903;
t836 = t1096 * t902 + t1097 * t901;
t835 = -pkin(1) * t871 - pkin(2) * t934;
t834 = -pkin(1) * t922 - pkin(2) * t971 + t916;
t833 = pkin(2) * t987 + qJ(3) * t857;
t832 = -t1096 * t894 + t1097 * t895;
t831 = t1096 * t895 + t1097 * t894;
t830 = t1104 * t889 - t1210;
t829 = t1099 * t889 + t1207;
t828 = (t1098 * t940 + t1103 * t942) * t952;
t827 = (t1098 * t942 - t1103 * t940) * t952;
t825 = -pkin(1) * t899 - pkin(2) * t965 - t1120;
t824 = -t1100 * t881 + t1105 * t882;
t823 = t1100 * t882 + t1105 * t881;
t822 = -qJ(3) * t934 - t856;
t821 = -t1101 * t879 + t1106 * t880;
t820 = -t844 - t949;
t815 = (qJD(5) + t1086) * t958 + t1129;
t814 = t1104 * t844 - t1158 * t958;
t813 = t1099 * t844 + t1157 * t958;
t812 = -t1099 * t843 + t1157 * t956;
t811 = t1104 * t843 + t1158 * t956;
t810 = -pkin(7) * t922 - t1101 * t898 + t1106 * t929;
t808 = -qJD(6) * t942 - t1128;
t807 = -pkin(3) * t1205 + pkin(8) * t913 - t1188;
t806 = -pkin(2) * t988 + qJ(3) * t936 + t857;
t802 = -pkin(3) * t905 + pkin(8) * t895 + t1179;
t801 = -pkin(7) * t899 - t1101 * t888 + t1106 * t921;
t797 = -t1100 * t865 + t1105 * t867;
t796 = -t1100 * t864 + t1105 * t866;
t795 = t1100 * t867 + t1105 * t865;
t794 = t1100 * t866 + t1105 * t864;
t793 = -t1101 * t859 + t1106 * t861;
t792 = -t1101 * t858 + t1106 * t860;
t791 = t1106 * t857 - t1186;
t790 = t1101 * t857 + t1177;
t789 = -t1100 * t853 + t1105 * t854;
t788 = t1100 * t854 + t1105 * t853;
t787 = -t1101 * t850 + t1106 * t851;
t786 = t1101 * t851 + t1106 * t850;
t784 = -t887 - t809;
t781 = (-qJD(6) - t952) * t942 - t1128;
t779 = -t1102 * t987 + t1107 * t791;
t778 = t1102 * t791 + t1107 * t987;
t777 = t1103 * t809 - t1192 * t942;
t776 = -t1103 * t808 - t1192 * t940;
t775 = -t1098 * t809 - t1183 * t942;
t774 = -t1098 * t808 + t1183 * t940;
t773 = -t1096 * t846 + t1097 * t848;
t772 = -t1096 * t845 + t1097 * t847;
t771 = t1096 * t848 + t1097 * t846;
t770 = t1096 * t847 + t1097 * t845;
t767 = -pkin(9) * t853 - t1182;
t766 = -t1101 * t837 + t1106 * t839;
t765 = -t1101 * t836 + t1106 * t838;
t762 = t1099 * t1116 + t1104 * t827;
t761 = t1099 * t827 - t1104 * t1116;
t760 = -t1103 * t886 - t1211;
t759 = t1103 * t885 - t1193;
t758 = -t1098 * t885 - t1184;
t757 = -t1098 * t886 + t1208;
t756 = -t1101 * t831 + t1106 * t832;
t755 = t1101 * t832 + t1106 * t831;
t754 = -t1100 * t829 + t1105 * t830;
t753 = t1100 * t830 + t1105 * t829;
t752 = t1102 * t1205 + t1107 * t787;
t751 = t1102 * t787 - t1107 * t1205;
t750 = -pkin(9) * t829 - t1191;
t749 = -t1096 * t823 + t1097 * t824;
t748 = t1096 * t824 + t1097 * t823;
t747 = -t1098 * t868 - t1184;
t746 = t1103 * t868 - t1193;
t745 = t1103 * t852 - t1211;
t744 = t1098 * t852 + t1208;
t743 = -t1099 * t820 - t1104 * t816;
t742 = -t1099 * t818 - t1104 * t815;
t741 = -t1099 * t816 + t1104 * t820;
t740 = -t1099 * t815 + t1104 * t818;
t739 = t1104 * t777 + t1143;
t738 = t1104 * t774 - t1143;
t737 = t1099 * t777 - t1141;
t736 = t1099 * t774 + t1141;
t735 = -t1100 * t813 + t1105 * t814;
t734 = -t1100 * t811 + t1105 * t812;
t733 = t1100 * t814 + t1105 * t813;
t732 = t1100 * t812 + t1105 * t811;
t731 = -pkin(1) * t790 - pkin(2) * t856;
t730 = t1102 * t905 + t1107 * t756;
t729 = t1102 * t756 - t1107 * t905;
t726 = -qJ(3) * t850 - t1096 * t807 + t1097 * t855;
t725 = pkin(3) * t914 + pkin(8) * t728;
t724 = -pkin(7) * t871 - t1101 * t806 + t1106 * t822;
t723 = -pkin(4) * t818 + pkin(9) * t854 - t1191;
t722 = -t1096 * t795 + t1097 * t797;
t721 = -t1096 * t794 + t1097 * t796;
t720 = t1096 * t797 + t1097 * t795;
t719 = t1096 * t796 + t1097 * t794;
t718 = -t1096 * t788 + t1097 * t789;
t717 = t1096 * t789 + t1097 * t788;
t716 = -pkin(4) * t815 + pkin(9) * t830 + t1182;
t715 = -qJ(3) * t831 - t1096 * t802 + t1097 * t842;
t714 = -pkin(2) * t1205 + qJ(3) * t851 + t1096 * t855 + t1097 * t807;
t713 = -pkin(7) * t790 - qJ(3) * t1177 - t1101 * t833;
t709 = -pkin(8) * t846 - t727;
t708 = -t1098 * t781 - t1103 * t783;
t707 = -t1098 * t784 - t1103 * t780;
t706 = -t1098 * t783 + t1103 * t781;
t705 = -t1098 * t780 + t1103 * t784;
t704 = -t1101 * t771 + t1106 * t773;
t703 = -t1101 * t770 + t1106 * t772;
t702 = t1101 * t773 + t1106 * t771;
t701 = -pkin(2) * t905 + qJ(3) * t832 + t1096 * t842 + t1097 * t802;
t700 = -pkin(3) * t928 + pkin(8) * t848 + t728;
t699 = -t1099 * t780 + t1104 * t759;
t698 = -t1099 * t784 + t1104 * t757;
t697 = t1099 * t759 + t1104 * t780;
t696 = t1099 * t757 + t1104 * t784;
t692 = -t1100 * t761 + t1105 * t762;
t691 = t1100 * t762 + t1105 * t761;
t690 = t1102 * t928 + t1107 * t704;
t689 = t1102 * t704 - t1107 * t928;
t688 = t1099 * t783 + t1104 * t747;
t687 = t1099 * t747 - t1104 * t783;
t686 = -t1099 * t781 + t1104 * t745;
t685 = t1099 * t745 + t1104 * t781;
t684 = -t1099 * t877 + t1104 * t706;
t683 = t1099 * t706 + t1104 * t877;
t682 = -pkin(1) * t786 - pkin(2) * t850 - pkin(3) * t912 + t805;
t681 = -t1096 * t753 + t1097 * t754;
t680 = t1096 * t754 + t1097 * t753;
t679 = -t1099 * t849 + t1104 * t707;
t678 = t1099 * t707 + t1104 * t849;
t677 = -t1101 * t748 + t1106 * t749;
t673 = -t1100 * t741 + t1105 * t743;
t672 = -t1100 * t740 + t1105 * t742;
t671 = t1100 * t743 + t1105 * t741;
t670 = t1100 * t742 + t1105 * t740;
t669 = -t1100 * t737 + t1105 * t739;
t668 = -t1100 * t736 + t1105 * t738;
t667 = t1100 * t739 + t1105 * t737;
t666 = t1100 * t738 + t1105 * t736;
t665 = -t1096 * t733 + t1097 * t735;
t664 = -t1096 * t732 + t1097 * t734;
t663 = t1096 * t735 + t1097 * t733;
t662 = t1096 * t734 + t1097 * t732;
t661 = -pkin(1) * t755 - pkin(2) * t831 + t1100 * t916 - t1105 * t1120 + (t1100 * t991 - t1105 * t993) * pkin(8) + (t1015 * t1100 - t1105 * t1201 - t894) * pkin(3);
t660 = t1097 * t728 - t1198;
t659 = t1096 * t728 + t1196;
t658 = -pkin(1) * t702 - pkin(2) * t771 - pkin(3) * t846;
t657 = -t1101 * t720 + t1106 * t722;
t656 = -t1101 * t719 + t1106 * t721;
t655 = -t1101 * t717 + t1106 * t718;
t654 = t1101 * t718 + t1106 * t717;
t653 = -pkin(8) * t788 - t1100 * t723 + t1105 * t767;
t652 = -pkin(10) * t746 + t1185;
t651 = -pkin(10) * t744 + t1194;
t650 = -pkin(8) * t753 - t1100 * t716 + t1105 * t750;
t649 = -t1100 * t697 + t1105 * t699;
t648 = -t1100 * t696 + t1105 * t698;
t647 = t1100 * t699 + t1105 * t697;
t646 = t1100 * t698 + t1105 * t696;
t643 = t1102 * t818 + t1107 * t655;
t642 = t1102 * t655 - t1107 * t818;
t641 = -pkin(3) * t818 + pkin(8) * t789 + t1100 * t767 + t1105 * t723;
t640 = -pkin(7) * t786 - t1101 * t714 + t1106 * t726;
t637 = -t1096 * t691 + t1097 * t692;
t636 = t1096 * t692 + t1097 * t691;
t635 = -t1100 * t687 + t1105 * t688;
t634 = t1100 * t688 + t1105 * t687;
t633 = -t1100 * t685 + t1105 * t686;
t632 = t1100 * t686 + t1105 * t685;
t631 = -t1100 * t683 + t1105 * t684;
t630 = t1100 * t684 + t1105 * t683;
t629 = -t1101 * t680 + t1106 * t681;
t628 = t1101 * t681 + t1106 * t680;
t627 = pkin(4) * t826 + pkin(9) * t645;
t626 = -pkin(3) * t815 + pkin(8) * t754 + t1100 * t750 + t1105 * t716;
t625 = -t1100 * t678 + t1105 * t679;
t624 = t1100 * t679 + t1105 * t678;
t623 = -qJ(3) * t771 - t1096 * t700 + t1097 * t709;
t622 = -pkin(7) * t755 - t1101 * t701 + t1106 * t715;
t621 = -pkin(2) * t928 + qJ(3) * t773 + t1096 * t709 + t1097 * t700;
t620 = -t1096 * t671 + t1097 * t673;
t619 = -t1096 * t670 + t1097 * t672;
t618 = t1096 * t673 + t1097 * t671;
t617 = t1096 * t672 + t1097 * t670;
t616 = -t1096 * t667 + t1097 * t669;
t615 = -t1096 * t666 + t1097 * t668;
t614 = t1096 * t669 + t1097 * t667;
t613 = t1096 * t668 + t1097 * t666;
t612 = -t1101 * t663 + t1106 * t665;
t611 = -t1101 * t662 + t1106 * t664;
t610 = t1102 * t815 + t1107 * t629;
t609 = t1102 * t629 - t1107 * t815;
t608 = -pkin(9) * t741 - t644;
t607 = -t1101 * t659 + t1106 * t660;
t606 = t1101 * t660 + t1106 * t659;
t605 = -pkin(5) * t746 + t639;
t604 = -pkin(5) * t744 + t638;
t603 = -pkin(8) * t1196 - qJ(3) * t659 - t1096 * t725;
t602 = -t1102 * t914 + t1107 * t607;
t601 = t1102 * t607 + t1107 * t914;
t600 = -pkin(4) * t869 + pkin(9) * t743 + t645;
t599 = pkin(2) * t914 - pkin(8) * t1198 + qJ(3) * t660 + t1097 * t725;
t598 = -t1096 * t647 + t1097 * t649;
t597 = -t1096 * t646 + t1097 * t648;
t596 = t1096 * t649 + t1097 * t647;
t595 = t1096 * t648 + t1097 * t646;
t594 = t1105 * t645 - t1189;
t593 = t1100 * t645 + t1180;
t590 = -pkin(1) * t654 - pkin(2) * t717 - pkin(3) * t788 - pkin(4) * t853 + t695;
t589 = -t1101 * t636 + t1106 * t637;
t588 = -t1096 * t634 + t1097 * t635;
t587 = t1096 * t635 + t1097 * t634;
t586 = -t1096 * t632 + t1097 * t633;
t585 = t1096 * t633 + t1097 * t632;
t584 = -t1096 * t630 + t1097 * t631;
t583 = t1096 * t631 + t1097 * t630;
t582 = -t1096 * t624 + t1097 * t625;
t581 = t1096 * t625 + t1097 * t624;
t580 = -qJ(3) * t717 - t1096 * t641 + t1097 * t653;
t579 = -pkin(1) * t606 - pkin(2) * t659 - pkin(3) * t727;
t578 = -pkin(2) * t818 + qJ(3) * t718 + t1096 * t653 + t1097 * t641;
t577 = -t1101 * t618 + t1106 * t620;
t576 = -t1101 * t617 + t1106 * t619;
t575 = t1101 * t620 + t1106 * t618;
t574 = -t1101 * t614 + t1106 * t616;
t573 = -t1101 * t613 + t1106 * t615;
t572 = -pkin(1) * t628 - pkin(2) * t680 - pkin(3) * t753 - pkin(4) * t829 + t694;
t571 = -pkin(10) * t705 - t591;
t570 = t1102 * t869 + t1107 * t577;
t569 = t1102 * t577 - t1107 * t869;
t568 = -qJ(3) * t680 - t1096 * t626 + t1097 * t650;
t567 = t1099 * t675 + t1104 * t592;
t566 = t1099 * t592 - t1104 * t675;
t565 = -pkin(9) * t687 - t1099 * t605 + t1104 * t652;
t564 = -pkin(9) * t685 - t1099 * t604 + t1104 * t651;
t563 = -pkin(2) * t815 + qJ(3) * t681 + t1096 * t650 + t1097 * t626;
t562 = -pkin(7) * t702 - t1101 * t621 + t1106 * t623;
t561 = -pkin(4) * t746 + pkin(9) * t688 + t1099 * t652 + t1104 * t605;
t560 = -pkin(4) * t744 + pkin(9) * t686 + t1099 * t651 + t1104 * t604;
t559 = -pkin(8) * t671 - t1100 * t600 + t1105 * t608;
t558 = -pkin(3) * t869 + pkin(8) * t673 + t1100 * t608 + t1105 * t600;
t557 = -pkin(9) * t678 + t1104 * t571 + t1199 * t705;
t556 = -t1101 * t596 + t1106 * t598;
t555 = -t1101 * t595 + t1106 * t597;
t554 = -t1096 * t593 + t1097 * t594;
t553 = t1096 * t594 + t1097 * t593;
t552 = pkin(9) * t679 + t1099 * t571 + t1139 * t705;
t551 = -pkin(8) * t593 - pkin(9) * t1180 - t1100 * t627;
t550 = -pkin(7) * t606 - t1101 * t599 + t1106 * t603;
t549 = -t1101 * t587 + t1106 * t588;
t548 = t1101 * t588 + t1106 * t587;
t547 = pkin(3) * t826 + pkin(8) * t594 - pkin(9) * t1189 + t1105 * t627;
t546 = -t1101 * t585 + t1106 * t586;
t545 = t1101 * t586 + t1106 * t585;
t544 = -t1101 * t583 + t1106 * t584;
t543 = t1102 * t746 + t1107 * t549;
t542 = t1102 * t549 - t1107 * t746;
t541 = t1102 * t744 + t1107 * t546;
t540 = t1102 * t546 - t1107 * t744;
t539 = -t1101 * t581 + t1106 * t582;
t538 = t1101 * t582 + t1106 * t581;
t537 = -pkin(1) * t575 - pkin(2) * t618 - pkin(3) * t671 - pkin(4) * t741;
t536 = t1102 * t705 + t1107 * t539;
t535 = t1102 * t539 - t1107 * t705;
t534 = -t1100 * t566 + t1105 * t567;
t533 = t1100 * t567 + t1105 * t566;
t532 = -pkin(7) * t654 - t1101 * t578 + t1106 * t580;
t531 = -pkin(7) * t628 - t1101 * t563 + t1106 * t568;
t530 = -pkin(9) * t566 + (-pkin(10) * t1104 + t1199) * t591;
t529 = -pkin(8) * t634 - t1100 * t561 + t1105 * t565;
t528 = -pkin(8) * t632 - t1100 * t560 + t1105 * t564;
t527 = -pkin(3) * t746 + pkin(8) * t635 + t1100 * t565 + t1105 * t561;
t526 = -pkin(3) * t744 + pkin(8) * t633 + t1100 * t564 + t1105 * t560;
t525 = -qJ(3) * t618 - t1096 * t558 + t1097 * t559;
t524 = -t1101 * t553 + t1106 * t554;
t523 = t1101 * t554 + t1106 * t553;
t522 = -pkin(2) * t869 + qJ(3) * t620 + t1096 * t559 + t1097 * t558;
t521 = -t1102 * t826 + t1107 * t524;
t520 = t1102 * t524 + t1107 * t826;
t519 = -pkin(8) * t624 - t1100 * t552 + t1105 * t557;
t518 = pkin(9) * t567 + (-pkin(10) * t1099 + t1139) * t591;
t517 = -pkin(1) * t548 - pkin(2) * t587 - pkin(3) * t634 - pkin(4) * t687 + pkin(5) * t783 - pkin(10) * t747 - t1194;
t516 = -pkin(1) * t545 - pkin(2) * t585 - pkin(3) * t632 - pkin(4) * t685 - pkin(5) * t781 - pkin(10) * t745 + t1185;
t515 = -pkin(3) * t705 + pkin(8) * t625 + t1100 * t557 + t1105 * t552;
t514 = -t1096 * t533 + t1097 * t534;
t513 = t1096 * t534 + t1097 * t533;
t512 = -pkin(1) * t538 - pkin(2) * t581 - pkin(3) * t624 - pkin(4) * t678 - pkin(5) * t849 - pkin(10) * t707 - t592;
t511 = -qJ(3) * t553 - t1096 * t547 + t1097 * t551;
t510 = pkin(2) * t826 + qJ(3) * t554 + t1096 * t551 + t1097 * t547;
t509 = -pkin(1) * t523 - pkin(2) * t553 - pkin(3) * t593 - pkin(4) * t644;
t508 = -qJ(3) * t587 - t1096 * t527 + t1097 * t529;
t507 = -qJ(3) * t585 - t1096 * t526 + t1097 * t528;
t506 = -pkin(2) * t746 + qJ(3) * t588 + t1096 * t529 + t1097 * t527;
t505 = -pkin(2) * t744 + qJ(3) * t586 + t1096 * t528 + t1097 * t526;
t504 = -pkin(7) * t575 - t1101 * t522 + t1106 * t525;
t503 = -qJ(3) * t581 - t1096 * t515 + t1097 * t519;
t502 = -pkin(2) * t705 + qJ(3) * t582 + t1096 * t519 + t1097 * t515;
t501 = -pkin(8) * t533 - t1100 * t518 + t1105 * t530;
t500 = -t1101 * t513 + t1106 * t514;
t499 = t1101 * t514 + t1106 * t513;
t498 = -pkin(3) * t591 + pkin(8) * t534 + t1100 * t530 + t1105 * t518;
t497 = t1102 * t591 + t1107 * t500;
t496 = t1102 * t500 - t1107 * t591;
t495 = -pkin(7) * t523 - t1101 * t510 + t1106 * t511;
t494 = -pkin(7) * t548 - t1101 * t506 + t1106 * t508;
t493 = -pkin(7) * t545 - t1101 * t505 + t1106 * t507;
t492 = -pkin(1) * t499 - pkin(2) * t513 - pkin(3) * t533 - pkin(4) * t566 + pkin(5) * t675 - pkin(10) * t592;
t491 = -pkin(7) * t538 - t1101 * t502 + t1106 * t503;
t490 = -qJ(3) * t513 - t1096 * t498 + t1097 * t501;
t489 = -pkin(2) * t591 + qJ(3) * t514 + t1096 * t501 + t1097 * t498;
t488 = -pkin(7) * t499 - t1101 * t489 + t1106 * t490;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1065, -t1066, 0, t1029, 0, 0, 0, 0, 0, 0, t1005, t1006, t1026, t968, 0, 0, 0, 0, 0, 0, t875, t884, t863, t779, 0, 0, 0, 0, 0, 0, t730, t752, t690, t602, 0, 0, 0, 0, 0, 0, t610, t643, t570, t521, 0, 0, 0, 0, 0, 0, t541, t543, t536, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1066, -t1065, 0, t1028, 0, 0, 0, 0, 0, 0, t1003, t1004, t1025, t967, 0, 0, 0, 0, 0, 0, t872, t883, t862, t778, 0, 0, 0, 0, 0, 0, t729, t751, t689, t601, 0, 0, 0, 0, 0, 0, t609, t642, t569, t520, 0, 0, 0, 0, 0, 0, t540, t542, t535, t496; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1030, t1031, 0, -t985, 0, 0, 0, 0, 0, 0, t899, t922, t871, t790, 0, 0, 0, 0, 0, 0, t755, t786, t702, t606, 0, 0, 0, 0, 0, 0, t628, t654, t575, t523, 0, 0, 0, 0, 0, 0, t545, t548, t538, t499; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1066, 0, -t1065, 0, t1121, -t1047, -t1028, -pkin(6) * t1028, t1039 * t1107 - t1125, t1024 * t1107 - t1068 * t1102, t1034 * t1107 + t1101 * t1147, t1038 * t1107 + t1125, t1032 * t1107 + t1088 * t1102, t1057 * t1107 + t1087, -pkin(6) * t1003 - t1102 * t994 + t1107 * t997, -pkin(6) * t1004 - t1102 * t995 + t1107 * t998, -pkin(6) * t1025 + t1107 * t985, -pkin(6) * t967 - (pkin(1) * t1102 - pkin(7) * t1107) * t985, t1107 * t927 + t1135, -t1020 * t1102 + t1107 * t873, -t1102 * t993 + t1107 * t924, t1107 * t926 - t1135, t1102 * t991 + t1107 * t923, t1107 * t946 + t1087, -pkin(6) * t872 - t1102 * t825 + t1107 * t801, -pkin(6) * t883 - t1102 * t834 + t1107 * t810, -pkin(6) * t862 - t1102 * t835 + t1107 * t724, -pkin(6) * t778 - t1102 * t731 + t1107 * t713, t1107 * t766 - t1137, -t1102 * t963 + t1107 * t703, -t1102 * t910 + t1107 * t792, t1107 * t765 + t1137, -t1102 * t906 + t1107 * t793, t1102 * t1144 + t1107 * t821, -pkin(6) * t729 - t1102 * t661 + t1107 * t622, -pkin(6) * t751 - t1102 * t682 + t1107 * t640, -pkin(6) * t689 - t1102 * t658 + t1107 * t562, -pkin(6) * t601 - t1102 * t579 + t1107 * t550, t1107 * t612 + t1142, -t1102 * t896 + t1107 * t576, -t1102 * t820 + t1107 * t656, t1107 * t611 - t1142, -t1102 * t816 + t1107 * t657, t1085 * t1102 + t1107 * t677, -pkin(6) * t609 - t1102 * t572 + t1107 * t531, -pkin(6) * t642 - t1102 * t590 + t1107 * t532, -pkin(6) * t569 - t1102 * t537 + t1107 * t504, -pkin(6) * t520 - t1102 * t509 + t1107 * t495, -t1102 * t775 + t1107 * t574, -t1102 * t708 + t1107 * t544, -t1102 * t760 + t1107 * t555, -t1102 * t776 + t1107 * t573, -t1102 * t758 + t1107 * t556, -t1102 * t828 + t1107 * t589, -pkin(6) * t540 - t1102 * t516 + t1107 * t493, -pkin(6) * t542 - t1102 * t517 + t1107 * t494, -pkin(6) * t535 - t1102 * t512 + t1107 * t491, -pkin(6) * t496 - t1102 * t492 + t1107 * t488; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1065, 0, t1066, 0, t1047, t1121, t1029, pkin(6) * t1029, t1039 * t1102 + t1124, t1024 * t1102 + t1068 * t1107, t1034 * t1102 - t1101 * t1146, t1038 * t1102 - t1124, t1032 * t1102 - t1088 * t1107, t1057 * t1102 - t1145, pkin(6) * t1005 + t1102 * t997 + t1107 * t994, pkin(6) * t1006 + t1102 * t998 + t1107 * t995, pkin(6) * t1026 + t1102 * t985, pkin(6) * t968 - (-pkin(1) * t1107 - pkin(7) * t1102) * t985, t1102 * t927 - t1134, t1020 * t1107 + t1102 * t873, t1102 * t924 + t1107 * t993, t1102 * t926 + t1134, t1102 * t923 - t1107 * t991, t1102 * t946 - t1145, pkin(6) * t875 + t1102 * t801 + t1107 * t825, pkin(6) * t884 + t1102 * t810 + t1107 * t834, pkin(6) * t863 + t1102 * t724 + t1107 * t835, pkin(6) * t779 + t1102 * t713 + t1107 * t731, t1102 * t766 + t1136, t1102 * t703 + t1107 * t963, t1102 * t792 + t1107 * t910, t1102 * t765 - t1136, t1102 * t793 + t1107 * t906, t1102 * t821 - t1107 * t1144, pkin(6) * t730 + t1102 * t622 + t1107 * t661, pkin(6) * t752 + t1102 * t640 + t1107 * t682, pkin(6) * t690 + t1102 * t562 + t1107 * t658, pkin(6) * t602 + t1102 * t550 + t1107 * t579, t1102 * t612 - t1140, t1102 * t576 + t1107 * t896, t1102 * t656 + t1107 * t820, t1102 * t611 + t1140, t1102 * t657 + t1107 * t816, -t1085 * t1107 + t1102 * t677, pkin(6) * t610 + t1102 * t531 + t1107 * t572, pkin(6) * t643 + t1102 * t532 + t1107 * t590, pkin(6) * t570 + t1102 * t504 + t1107 * t537, pkin(6) * t521 + t1102 * t495 + t1107 * t509, t1102 * t574 + t1107 * t775, t1102 * t544 + t1107 * t708, t1102 * t555 + t1107 * t760, t1102 * t573 + t1107 * t776, t1102 * t556 + t1107 * t758, t1102 * t589 + t1107 * t828, pkin(6) * t541 + t1102 * t493 + t1107 * t516, pkin(6) * t543 + t1102 * t494 + t1107 * t517, pkin(6) * t536 + t1102 * t491 + t1107 * t512, pkin(6) * t497 + t1102 * t488 + t1107 * t492; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1071, t1072, 0, 0, (t1061 + t1133) * t1101, t1060 * t1106 + t1063 * t1101, t1077 * t1106 + t1161, (t1062 - t1138) * t1106, t1079 * t1101 + t1159, 0, pkin(1) * t1063 + pkin(7) * t1033 + t1162, -pkin(1) * t1060 + pkin(7) * t1035 - t1163, pkin(1) * t1067 + pkin(7) * t1064 + t986, pkin(1) * t1054 + pkin(7) * t986, t1101 * t981 + t1106 * t980, t1101 * t935 + t1106 * t933, t1101 * t973 + t1106 * t970, t1101 * t979 + t1106 * t978, t1101 * t972 + t1106 * t969, t1007 * t1106 + t1008 * t1101, -pkin(1) * t989 + pkin(7) * t900 + t1101 * t921 + t1106 * t888, -pkin(1) * t992 + pkin(7) * t925 + t1101 * t929 + t1106 * t898, -pkin(1) * t988 + pkin(7) * t874 + t1101 * t822 + t1106 * t806, pkin(1) * t987 + pkin(7) * t791 - qJ(3) * t1186 + t1106 * t833, t1101 * t839 + t1106 * t837, t1101 * t772 + t1106 * t770, t1101 * t860 + t1106 * t858, t1101 * t838 + t1106 * t836, t1101 * t861 + t1106 * t859, t1101 * t880 + t1106 * t879, -pkin(1) * t905 + pkin(7) * t756 + t1101 * t715 + t1106 * t701, -pkin(1) * t1205 + pkin(7) * t787 + t1101 * t726 + t1106 * t714, -pkin(1) * t928 + pkin(7) * t704 + t1101 * t623 + t1106 * t621, pkin(1) * t914 + pkin(7) * t607 + t1101 * t603 + t1106 * t599, t1101 * t665 + t1106 * t663, t1101 * t619 + t1106 * t617, t1101 * t721 + t1106 * t719, t1101 * t664 + t1106 * t662, t1101 * t722 + t1106 * t720, t1101 * t749 + t1106 * t748, -pkin(1) * t815 + pkin(7) * t629 + t1101 * t568 + t1106 * t563, -pkin(1) * t818 + pkin(7) * t655 + t1101 * t580 + t1106 * t578, -pkin(1) * t869 + pkin(7) * t577 + t1101 * t525 + t1106 * t522, pkin(1) * t826 + pkin(7) * t524 + t1101 * t511 + t1106 * t510, t1101 * t616 + t1106 * t614, t1101 * t584 + t1106 * t583, t1101 * t597 + t1106 * t595, t1101 * t615 + t1106 * t613, t1101 * t598 + t1106 * t596, t1101 * t637 + t1106 * t636, -pkin(1) * t744 + pkin(7) * t546 + t1101 * t507 + t1106 * t505, -pkin(1) * t746 + pkin(7) * t549 + t1101 * t508 + t1106 * t506, -pkin(1) * t705 + pkin(7) * t539 + t1101 * t503 + t1106 * t502, -pkin(1) * t591 + pkin(7) * t500 + t1101 * t490 + t1106 * t489;];
tauB_reg  = t1;
