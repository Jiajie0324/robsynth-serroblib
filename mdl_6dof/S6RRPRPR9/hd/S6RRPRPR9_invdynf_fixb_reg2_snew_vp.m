% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR9_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR9_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR9_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 15:22:54
% EndTime: 2019-05-06 15:23:07
% DurationCPUTime: 14.03s
% Computational Cost: add. (169375->381), mult. (389106->583), div. (0->0), fcn. (320143->14), ass. (0->321)
t2666 = cos(pkin(6));
t2657 = qJD(1) * t2666 + qJD(2);
t2662 = sin(pkin(11));
t2665 = cos(pkin(11));
t2663 = sin(pkin(6));
t2669 = sin(qJ(2));
t2729 = qJD(1) * t2669;
t2717 = t2663 * t2729;
t2631 = t2657 * t2665 - t2662 * t2717;
t2632 = t2657 * t2662 + t2665 * t2717;
t2668 = sin(qJ(4));
t2672 = cos(qJ(4));
t2607 = -t2672 * t2631 + t2632 * t2668;
t2606 = qJD(6) + t2607;
t2743 = qJD(6) + t2606;
t2673 = cos(qJ(2));
t2721 = t2663 * t2673;
t2716 = qJD(1) * t2721;
t2718 = qJDD(1) * t2663;
t2638 = qJD(2) * t2716 + t2669 * t2718;
t2709 = qJDD(1) * t2666 + qJDD(2);
t2615 = t2665 * t2638 + t2662 * t2709;
t2622 = t2631 * t2716;
t2599 = -t2622 - t2615;
t2656 = t2673 * t2718;
t2685 = qJD(2) * t2717 - t2656;
t2723 = t2631 * t2632;
t2601 = t2685 + t2723;
t2609 = t2631 * t2668 + t2632 * t2672;
t2649 = -qJD(4) + t2716;
t2661 = sin(pkin(12));
t2664 = cos(pkin(12));
t2592 = t2609 * t2661 + t2664 * t2649;
t2594 = t2609 * t2664 - t2649 * t2661;
t2667 = sin(qJ(6));
t2671 = cos(qJ(6));
t2558 = t2671 * t2592 + t2594 * t2667;
t2742 = t2558 ^ 2;
t2560 = -t2592 * t2667 + t2594 * t2671;
t2741 = t2560 ^ 2;
t2740 = t2592 ^ 2;
t2739 = t2594 ^ 2;
t2738 = t2606 ^ 2;
t2574 = t2607 ^ 2;
t2737 = t2609 ^ 2;
t2736 = t2631 ^ 2;
t2735 = t2632 ^ 2;
t2734 = t2649 ^ 2;
t2733 = t2657 ^ 2;
t2732 = -2 * qJD(5);
t2731 = t2666 * g(3);
t2730 = qJD(1) * t2663;
t2728 = t2558 * t2560;
t2727 = t2592 * t2594;
t2726 = t2594 * t2607;
t2725 = t2607 * t2592;
t2724 = t2607 * t2609;
t2675 = qJD(1) ^ 2;
t2722 = t2663 ^ 2 * t2675;
t2720 = qJD(4) + t2649;
t2719 = qJD(6) - t2606;
t2670 = sin(qJ(1));
t2674 = cos(qJ(1));
t2651 = -g(1) * t2674 - g(2) * t2670;
t2634 = -pkin(1) * t2675 + pkin(8) * t2718 + t2651;
t2635 = (-pkin(2) * t2673 - qJ(3) * t2669) * t2730;
t2650 = t2670 * g(1) - t2674 * g(2);
t2681 = t2675 * t2663 * pkin(8) + qJDD(1) * pkin(1) + t2650;
t2680 = t2666 * t2681;
t2679 = (-t2663 * g(3) + t2680) * t2669;
t2677 = -t2733 * pkin(2) + t2709 * qJ(3) + (t2635 * t2730 + t2634) * t2673 + t2679;
t2678 = -t2656 * pkin(2) - t2731 - t2638 * qJ(3) + ((-qJ(3) * t2657 * t2673 + (qJD(2) + t2657) * t2669 * pkin(2)) * qJD(1) - t2681) * t2663;
t2537 = 0.2e1 * qJD(3) * t2631 + t2662 * t2678 + t2665 * t2677;
t2614 = -t2638 * t2662 + t2665 * t2709;
t2616 = -pkin(3) * t2716 - pkin(9) * t2632;
t2524 = -pkin(3) * t2736 + pkin(9) * t2614 + t2616 * t2716 + t2537;
t2536 = -0.2e1 * qJD(3) * t2632 - t2662 * t2677 + t2665 * t2678;
t2676 = pkin(3) * t2601 + pkin(9) * t2599 + t2536;
t2487 = t2672 * t2524 + t2668 * t2676;
t2660 = t2673 ^ 2;
t2715 = t2660 * t2722;
t2573 = pkin(4) * t2607 - qJ(5) * t2609;
t2684 = qJDD(4) + t2685;
t2474 = -pkin(4) * t2734 + qJ(5) * t2684 - t2607 * t2573 + t2487;
t2710 = t2669 * t2634 - t2673 * t2680;
t2579 = qJDD(3) - t2709 * pkin(2) - t2733 * qJ(3) + (g(3) * t2673 + t2635 * t2729) * t2663 + t2710;
t2538 = -t2614 * pkin(3) - t2736 * pkin(9) + t2632 * t2616 + t2579;
t2711 = -t2672 * t2614 + t2668 * t2615;
t2563 = qJD(4) * t2609 + t2711;
t2689 = -t2668 * t2614 - t2672 * t2615;
t2564 = -qJD(4) * t2607 - t2689;
t2713 = -t2607 * t2649 - t2564;
t2497 = t2713 * qJ(5) + (-t2609 * t2649 + t2563) * pkin(4) + t2538;
t2451 = t2664 * t2474 + t2661 * t2497 + t2592 * t2732;
t2486 = -t2668 * t2524 + t2672 * t2676;
t2555 = t2664 * t2564 + t2661 * t2684;
t2712 = t2564 * t2661 - t2664 * t2684;
t2714 = -t2667 * t2555 - t2671 * t2712;
t2530 = -t2555 - t2725;
t2531 = t2563 - t2727;
t2708 = t2657 * t2716;
t2707 = t2632 * t2716;
t2450 = -t2661 * t2474 + t2664 * t2497 + t2594 * t2732;
t2440 = pkin(5) * t2531 + pkin(10) * t2530 + t2450;
t2565 = pkin(5) * t2607 - pkin(10) * t2594;
t2444 = -pkin(5) * t2740 - pkin(10) * t2712 - t2607 * t2565 + t2451;
t2418 = t2440 * t2671 - t2444 * t2667;
t2419 = t2440 * t2667 + t2444 * t2671;
t2404 = t2418 * t2671 + t2419 * t2667;
t2405 = -t2418 * t2667 + t2419 * t2671;
t2395 = -t2404 * t2661 + t2405 * t2664;
t2473 = -t2684 * pkin(4) - t2734 * qJ(5) + t2609 * t2573 + qJDD(5) - t2486;
t2464 = pkin(5) * t2712 - pkin(10) * t2740 + t2594 * t2565 + t2473;
t2392 = t2395 * t2668 - t2464 * t2672;
t2393 = t2395 * t2672 + t2464 * t2668;
t2389 = -t2392 * t2662 + t2393 * t2665;
t2394 = t2404 * t2664 + t2405 * t2661;
t2706 = t2389 * t2669 - t2394 * t2673;
t2429 = -t2450 * t2661 + t2451 * t2664;
t2420 = t2429 * t2668 - t2473 * t2672;
t2421 = t2429 * t2672 + t2473 * t2668;
t2407 = -t2420 * t2662 + t2421 * t2665;
t2428 = t2450 * t2664 + t2451 * t2661;
t2705 = t2407 * t2669 - t2428 * t2673;
t2491 = -t2560 * t2719 + t2714;
t2682 = -t2671 * t2555 + t2667 * t2712;
t2493 = t2558 * t2719 + t2682;
t2462 = t2491 * t2667 + t2493 * t2671;
t2463 = t2491 * t2671 - t2493 * t2667;
t2436 = -t2462 * t2661 + t2463 * t2664;
t2509 = -t2741 - t2742;
t2430 = t2436 * t2668 - t2509 * t2672;
t2431 = t2436 * t2672 + t2509 * t2668;
t2409 = -t2430 * t2662 + t2431 * t2665;
t2435 = t2462 * t2664 + t2463 * t2661;
t2704 = t2409 * t2669 - t2435 * t2673;
t2683 = -qJDD(6) - t2563;
t2510 = -t2683 - t2728;
t2520 = -t2738 - t2742;
t2479 = t2510 * t2671 + t2520 * t2667;
t2480 = -t2510 * t2667 + t2520 * t2671;
t2453 = -t2479 * t2661 + t2480 * t2664;
t2490 = t2560 * t2743 - t2714;
t2437 = t2453 * t2668 - t2490 * t2672;
t2438 = t2453 * t2672 + t2490 * t2668;
t2415 = -t2437 * t2662 + t2438 * t2665;
t2452 = t2479 * t2664 + t2480 * t2661;
t2703 = t2415 * t2669 - t2452 * t2673;
t2511 = t2683 - t2728;
t2533 = -t2738 - t2741;
t2488 = t2511 * t2667 + t2533 * t2671;
t2489 = t2511 * t2671 - t2533 * t2667;
t2461 = -t2488 * t2661 + t2489 * t2664;
t2492 = -t2558 * t2743 - t2682;
t2441 = t2461 * t2668 - t2492 * t2672;
t2442 = t2461 * t2672 + t2492 * t2668;
t2417 = -t2441 * t2662 + t2442 * t2665;
t2460 = t2488 * t2664 + t2489 * t2661;
t2702 = t2417 * t2669 - t2460 * t2673;
t2458 = t2486 * t2672 + t2487 * t2668;
t2459 = -t2486 * t2668 + t2487 * t2672;
t2434 = -t2458 * t2662 + t2459 * t2665;
t2701 = t2434 * t2669 - t2538 * t2673;
t2528 = -t2712 + t2726;
t2500 = t2528 * t2664 - t2530 * t2661;
t2539 = -t2739 - t2740;
t2477 = t2500 * t2668 - t2539 * t2672;
t2478 = t2500 * t2672 + t2539 * t2668;
t2449 = -t2477 * t2662 + t2478 * t2665;
t2499 = t2528 * t2661 + t2530 * t2664;
t2700 = t2449 * t2669 - t2499 * t2673;
t2545 = -t2574 - t2740;
t2504 = -t2531 * t2661 + t2545 * t2664;
t2527 = t2712 + t2726;
t2481 = t2504 * t2668 - t2527 * t2672;
t2482 = t2504 * t2672 + t2527 * t2668;
t2455 = -t2481 * t2662 + t2482 * t2665;
t2503 = t2531 * t2664 + t2545 * t2661;
t2699 = t2455 * t2669 - t2503 * t2673;
t2532 = -t2563 - t2727;
t2550 = -t2574 - t2739;
t2508 = t2532 * t2664 - t2550 * t2661;
t2529 = t2555 - t2725;
t2483 = t2508 * t2668 - t2529 * t2672;
t2484 = t2508 * t2672 + t2529 * t2668;
t2457 = -t2483 * t2662 + t2484 * t2665;
t2507 = t2532 * t2661 + t2550 * t2664;
t2698 = t2457 * t2669 - t2507 * t2673;
t2547 = -t2609 * t2720 - t2711;
t2549 = t2607 * t2720 + t2689;
t2514 = t2547 * t2668 + t2549 * t2672;
t2515 = t2547 * t2672 - t2549 * t2668;
t2476 = -t2514 * t2662 + t2515 * t2665;
t2553 = -t2737 - t2574;
t2697 = t2476 * t2669 - t2553 * t2673;
t2569 = t2684 - t2724;
t2571 = -t2574 - t2734;
t2534 = t2569 * t2672 + t2571 * t2668;
t2535 = -t2569 * t2668 + t2571 * t2672;
t2502 = -t2534 * t2662 + t2535 * t2665;
t2546 = (qJD(4) - t2649) * t2609 + t2711;
t2696 = t2502 * t2669 - t2546 * t2673;
t2506 = -t2536 * t2662 + t2537 * t2665;
t2695 = t2506 * t2669 - t2579 * t2673;
t2568 = -t2684 - t2724;
t2586 = -t2734 - t2737;
t2541 = t2568 * t2668 + t2586 * t2672;
t2542 = t2568 * t2672 - t2586 * t2668;
t2513 = -t2541 * t2662 + t2542 * t2665;
t2694 = t2513 * t2669 + t2673 * t2713;
t2597 = t2614 - t2707;
t2562 = t2597 * t2665 - t2599 * t2662;
t2595 = -t2735 - t2736;
t2693 = t2562 * t2669 - t2595 * t2673;
t2605 = -t2715 - t2736;
t2567 = -t2601 * t2662 + t2605 * t2665;
t2596 = -t2614 - t2707;
t2692 = t2567 * t2669 - t2596 * t2673;
t2600 = -t2685 + t2723;
t2621 = -t2715 - t2735;
t2576 = t2600 * t2665 - t2621 * t2662;
t2598 = -t2622 + t2615;
t2691 = t2576 * t2669 - t2598 * t2673;
t2603 = -g(3) * t2721 - t2710;
t2604 = t2673 * t2634 + t2679;
t2690 = t2603 * t2673 + t2604 * t2669;
t2618 = t2708 - t2638;
t2641 = t2657 * t2717;
t2619 = t2641 - t2685;
t2688 = t2618 * t2673 + t2619 * t2669;
t2659 = t2669 ^ 2;
t2629 = -t2659 * t2722 - t2733;
t2648 = t2673 * t2669 * t2722;
t2637 = t2648 - t2709;
t2687 = t2629 * t2673 + t2637 * t2669;
t2636 = t2648 + t2709;
t2639 = -t2715 - t2733;
t2686 = t2636 * t2673 + t2639 * t2669;
t2647 = -qJDD(1) * t2670 - t2674 * t2675;
t2646 = qJDD(1) * t2674 - t2670 * t2675;
t2640 = (-t2659 - t2660) * t2722;
t2624 = -t2663 * t2681 - t2731;
t2620 = t2641 + t2685;
t2617 = t2708 + t2638;
t2611 = -t2636 * t2669 + t2639 * t2673;
t2610 = -t2629 * t2669 + t2637 * t2673;
t2588 = -t2618 * t2669 + t2619 * t2673;
t2585 = -t2663 * t2620 + t2666 * t2686;
t2584 = t2666 * t2620 + t2663 * t2686;
t2583 = -t2663 * t2617 + t2666 * t2687;
t2582 = t2666 * t2617 + t2663 * t2687;
t2581 = -t2663 * t2640 + t2666 * t2688;
t2580 = t2666 * t2640 + t2663 * t2688;
t2575 = t2600 * t2662 + t2621 * t2665;
t2572 = -t2603 * t2669 + t2604 * t2673;
t2566 = t2601 * t2665 + t2605 * t2662;
t2561 = t2597 * t2662 + t2599 * t2665;
t2557 = -t2663 * t2624 + t2666 * t2690;
t2556 = t2666 * t2624 + t2663 * t2690;
t2551 = t2576 * t2673 + t2598 * t2669;
t2544 = t2567 * t2673 + t2596 * t2669;
t2540 = t2562 * t2673 + t2595 * t2669;
t2526 = -t2663 * t2575 + t2666 * t2691;
t2525 = t2666 * t2575 + t2663 * t2691;
t2523 = -t2663 * t2566 + t2666 * t2692;
t2522 = t2666 * t2566 + t2663 * t2692;
t2519 = -t2663 * t2561 + t2666 * t2693;
t2518 = t2666 * t2561 + t2663 * t2693;
t2512 = t2541 * t2665 + t2542 * t2662;
t2505 = t2536 * t2665 + t2537 * t2662;
t2501 = t2534 * t2665 + t2535 * t2662;
t2498 = t2506 * t2673 + t2579 * t2669;
t2494 = t2513 * t2673 - t2669 * t2713;
t2485 = t2502 * t2673 + t2546 * t2669;
t2475 = t2514 * t2665 + t2515 * t2662;
t2471 = t2476 * t2673 + t2553 * t2669;
t2470 = -t2663 * t2512 + t2666 * t2694;
t2469 = t2666 * t2512 + t2663 * t2694;
t2468 = -t2663 * t2505 + t2666 * t2695;
t2467 = t2666 * t2505 + t2663 * t2695;
t2466 = -t2663 * t2501 + t2666 * t2696;
t2465 = t2666 * t2501 + t2663 * t2696;
t2456 = t2483 * t2665 + t2484 * t2662;
t2454 = t2481 * t2665 + t2482 * t2662;
t2448 = t2477 * t2665 + t2478 * t2662;
t2447 = -t2663 * t2475 + t2666 * t2697;
t2446 = t2666 * t2475 + t2663 * t2697;
t2445 = t2457 * t2673 + t2507 * t2669;
t2443 = t2455 * t2673 + t2503 * t2669;
t2439 = t2449 * t2673 + t2499 * t2669;
t2433 = t2458 * t2665 + t2459 * t2662;
t2432 = t2434 * t2673 + t2538 * t2669;
t2427 = -t2663 * t2456 + t2666 * t2698;
t2426 = t2666 * t2456 + t2663 * t2698;
t2425 = -t2663 * t2454 + t2666 * t2699;
t2424 = t2666 * t2454 + t2663 * t2699;
t2423 = -t2663 * t2448 + t2666 * t2700;
t2422 = t2666 * t2448 + t2663 * t2700;
t2416 = t2441 * t2665 + t2442 * t2662;
t2414 = t2437 * t2665 + t2438 * t2662;
t2413 = t2417 * t2673 + t2460 * t2669;
t2412 = -t2663 * t2433 + t2666 * t2701;
t2411 = t2666 * t2433 + t2663 * t2701;
t2410 = t2415 * t2673 + t2452 * t2669;
t2408 = t2430 * t2665 + t2431 * t2662;
t2406 = t2420 * t2665 + t2421 * t2662;
t2403 = t2409 * t2673 + t2435 * t2669;
t2402 = -t2663 * t2416 + t2666 * t2702;
t2401 = t2666 * t2416 + t2663 * t2702;
t2400 = -t2663 * t2414 + t2666 * t2703;
t2399 = t2666 * t2414 + t2663 * t2703;
t2398 = t2407 * t2673 + t2428 * t2669;
t2397 = -t2663 * t2408 + t2666 * t2704;
t2396 = t2666 * t2408 + t2663 * t2704;
t2391 = -t2663 * t2406 + t2666 * t2705;
t2390 = t2666 * t2406 + t2663 * t2705;
t2388 = t2392 * t2665 + t2393 * t2662;
t2387 = t2389 * t2673 + t2394 * t2669;
t2386 = -t2663 * t2388 + t2666 * t2706;
t2385 = t2666 * t2388 + t2663 * t2706;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2647, -t2646, 0, -t2650 * t2670 + t2651 * t2674, 0, 0, 0, 0, 0, 0, -t2585 * t2670 + t2611 * t2674, -t2583 * t2670 + t2610 * t2674, -t2581 * t2670 + t2588 * t2674, -t2557 * t2670 + t2572 * t2674, 0, 0, 0, 0, 0, 0, -t2523 * t2670 + t2544 * t2674, -t2526 * t2670 + t2551 * t2674, -t2519 * t2670 + t2540 * t2674, -t2468 * t2670 + t2498 * t2674, 0, 0, 0, 0, 0, 0, -t2466 * t2670 + t2485 * t2674, -t2470 * t2670 + t2494 * t2674, -t2447 * t2670 + t2471 * t2674, -t2412 * t2670 + t2432 * t2674, 0, 0, 0, 0, 0, 0, -t2425 * t2670 + t2443 * t2674, -t2427 * t2670 + t2445 * t2674, -t2423 * t2670 + t2439 * t2674, -t2391 * t2670 + t2398 * t2674, 0, 0, 0, 0, 0, 0, -t2400 * t2670 + t2410 * t2674, -t2402 * t2670 + t2413 * t2674, -t2397 * t2670 + t2403 * t2674, -t2386 * t2670 + t2387 * t2674; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2646, t2647, 0, t2650 * t2674 + t2651 * t2670, 0, 0, 0, 0, 0, 0, t2585 * t2674 + t2611 * t2670, t2583 * t2674 + t2610 * t2670, t2581 * t2674 + t2588 * t2670, t2557 * t2674 + t2572 * t2670, 0, 0, 0, 0, 0, 0, t2523 * t2674 + t2544 * t2670, t2526 * t2674 + t2551 * t2670, t2519 * t2674 + t2540 * t2670, t2468 * t2674 + t2498 * t2670, 0, 0, 0, 0, 0, 0, t2466 * t2674 + t2485 * t2670, t2470 * t2674 + t2494 * t2670, t2447 * t2674 + t2471 * t2670, t2412 * t2674 + t2432 * t2670, 0, 0, 0, 0, 0, 0, t2425 * t2674 + t2443 * t2670, t2427 * t2674 + t2445 * t2670, t2423 * t2674 + t2439 * t2670, t2391 * t2674 + t2398 * t2670, 0, 0, 0, 0, 0, 0, t2400 * t2674 + t2410 * t2670, t2402 * t2674 + t2413 * t2670, t2397 * t2674 + t2403 * t2670, t2386 * t2674 + t2387 * t2670; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2584, t2582, t2580, t2556, 0, 0, 0, 0, 0, 0, t2522, t2525, t2518, t2467, 0, 0, 0, 0, 0, 0, t2465, t2469, t2446, t2411, 0, 0, 0, 0, 0, 0, t2424, t2426, t2422, t2390, 0, 0, 0, 0, 0, 0, t2399, t2401, t2396, t2385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2675, -qJDD(1), 0, t2651, 0, 0, 0, 0, 0, 0, t2611, t2610, t2588, t2572, 0, 0, 0, 0, 0, 0, t2544, t2551, t2540, t2498, 0, 0, 0, 0, 0, 0, t2485, t2494, t2471, t2432, 0, 0, 0, 0, 0, 0, t2443, t2445, t2439, t2398, 0, 0, 0, 0, 0, 0, t2410, t2413, t2403, t2387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2675, 0, t2650, 0, 0, 0, 0, 0, 0, t2585, t2583, t2581, t2557, 0, 0, 0, 0, 0, 0, t2523, t2526, t2519, t2468, 0, 0, 0, 0, 0, 0, t2466, t2470, t2447, t2412, 0, 0, 0, 0, 0, 0, t2425, t2427, t2423, t2391, 0, 0, 0, 0, 0, 0, t2400, t2402, t2397, t2386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2584, t2582, t2580, t2556, 0, 0, 0, 0, 0, 0, t2522, t2525, t2518, t2467, 0, 0, 0, 0, 0, 0, t2465, t2469, t2446, t2411, 0, 0, 0, 0, 0, 0, t2424, t2426, t2422, t2390, 0, 0, 0, 0, 0, 0, t2399, t2401, t2396, t2385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2639, t2637, t2619, t2604, 0, 0, 0, 0, 0, 0, t2567, t2576, t2562, t2506, 0, 0, 0, 0, 0, 0, t2502, t2513, t2476, t2434, 0, 0, 0, 0, 0, 0, t2455, t2457, t2449, t2407, 0, 0, 0, 0, 0, 0, t2415, t2417, t2409, t2389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2636, t2629, t2618, t2603, 0, 0, 0, 0, 0, 0, -t2596, -t2598, -t2595, -t2579, 0, 0, 0, 0, 0, 0, -t2546, t2713, -t2553, -t2538, 0, 0, 0, 0, 0, 0, -t2503, -t2507, -t2499, -t2428, 0, 0, 0, 0, 0, 0, -t2452, -t2460, -t2435, -t2394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2620, t2617, t2640, t2624, 0, 0, 0, 0, 0, 0, t2566, t2575, t2561, t2505, 0, 0, 0, 0, 0, 0, t2501, t2512, t2475, t2433, 0, 0, 0, 0, 0, 0, t2454, t2456, t2448, t2406, 0, 0, 0, 0, 0, 0, t2414, t2416, t2408, t2388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2605, t2600, t2597, t2537, 0, 0, 0, 0, 0, 0, t2535, t2542, t2515, t2459, 0, 0, 0, 0, 0, 0, t2482, t2484, t2478, t2421, 0, 0, 0, 0, 0, 0, t2438, t2442, t2431, t2393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2601, t2621, t2599, t2536, 0, 0, 0, 0, 0, 0, t2534, t2541, t2514, t2458, 0, 0, 0, 0, 0, 0, t2481, t2483, t2477, t2420, 0, 0, 0, 0, 0, 0, t2437, t2441, t2430, t2392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2596, t2598, t2595, t2579, 0, 0, 0, 0, 0, 0, t2546, -t2713, t2553, t2538, 0, 0, 0, 0, 0, 0, t2503, t2507, t2499, t2428, 0, 0, 0, 0, 0, 0, t2452, t2460, t2435, t2394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2571, t2568, t2547, t2487, 0, 0, 0, 0, 0, 0, t2504, t2508, t2500, t2429, 0, 0, 0, 0, 0, 0, t2453, t2461, t2436, t2395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2569, t2586, t2549, t2486, 0, 0, 0, 0, 0, 0, -t2527, -t2529, -t2539, -t2473, 0, 0, 0, 0, 0, 0, -t2490, -t2492, -t2509, -t2464; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2546, -t2713, t2553, t2538, 0, 0, 0, 0, 0, 0, t2503, t2507, t2499, t2428, 0, 0, 0, 0, 0, 0, t2452, t2460, t2435, t2394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2545, t2532, t2528, t2451, 0, 0, 0, 0, 0, 0, t2480, t2489, t2463, t2405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2531, t2550, t2530, t2450, 0, 0, 0, 0, 0, 0, t2479, t2488, t2462, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2527, t2529, t2539, t2473, 0, 0, 0, 0, 0, 0, t2490, t2492, t2509, t2464; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2520, t2511, t2491, t2419; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2510, t2533, t2493, t2418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2490, t2492, t2509, t2464;];
f_new_reg  = t1;
