% Calculate minimal parameter regressor of coriolis joint torque vector for
% S6RRPRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tauc_reg [6x32]
%   minimal parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRPR9_coriolisvecJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR9_coriolisvecJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR9_coriolisvecJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR9_coriolisvecJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:01:09
% EndTime: 2019-03-09 11:01:29
% DurationCPUTime: 7.70s
% Computational Cost: add. (13228->534), mult. (35678->764), div. (0->0), fcn. (29314->12), ass. (0->249)
t280 = cos(pkin(6));
t343 = qJD(1) * t280;
t264 = qJD(2) + t343;
t276 = sin(pkin(11));
t279 = cos(pkin(11));
t283 = sin(qJ(2));
t277 = sin(pkin(6));
t344 = qJD(1) * t277;
t331 = t283 * t344;
t215 = t264 * t279 - t276 * t331;
t216 = t264 * t276 + t279 * t331;
t282 = sin(qJ(4));
t285 = cos(qJ(4));
t163 = -t285 * t215 + t216 * t282;
t275 = sin(pkin(12));
t278 = cos(pkin(12));
t281 = sin(qJ(6));
t284 = cos(qJ(6));
t241 = t275 * t284 + t278 * t281;
t234 = t241 * qJD(6);
t368 = t241 * t163 + t234;
t351 = t285 * t279;
t240 = t276 * t282 - t351;
t286 = cos(qJ(2));
t353 = t277 * t286;
t291 = t240 * t353;
t204 = qJD(1) * t291;
t235 = t240 * qJD(4);
t347 = t204 - t235;
t242 = t276 * t285 + t279 * t282;
t292 = t242 * t353;
t346 = -qJD(1) * t292 + t242 * qJD(4);
t309 = pkin(2) * t283 - qJ(3) * t286;
t227 = t309 * t344;
t334 = pkin(1) * t343;
t228 = -pkin(8) * t331 + t286 * t334;
t174 = t279 * t227 - t228 * t276;
t352 = t279 * t286;
t293 = t277 * (pkin(3) * t283 - pkin(9) * t352);
t146 = qJD(1) * t293 + t174;
t175 = t276 * t227 + t279 * t228;
t342 = qJD(1) * t286;
t330 = t277 * t342;
t318 = t276 * t330;
t154 = -pkin(9) * t318 + t175;
t378 = pkin(9) + qJ(3);
t251 = t378 * t276;
t253 = t378 * t279;
t302 = -t251 * t285 - t253 * t282;
t396 = -qJD(3) * t240 + qJD(4) * t302 - t282 * t146 - t285 * t154;
t159 = qJD(6) + t163;
t289 = qJD(2) * t292;
t303 = t215 * t282 + t216 * t285;
t380 = qJD(4) * t303;
t115 = qJD(1) * t289 + t380;
t239 = t275 * t281 - t284 * t278;
t384 = t159 * t239;
t395 = t241 * t115 - t159 * t384;
t394 = -qJ(5) * t331 + t396;
t229 = pkin(8) * t330 + t283 * t334;
t196 = pkin(3) * t318 + t229;
t393 = -t346 * pkin(4) + t347 * qJ(5) + qJD(5) * t242 + t196;
t392 = -t239 * t115 - t368 * t159;
t257 = -qJD(4) + t330;
t135 = t278 * t257 + t275 * t303;
t137 = -t257 * t275 + t278 * t303;
t64 = t284 * t135 + t137 * t281;
t391 = t159 * t64;
t304 = t135 * t281 - t137 * t284;
t389 = t159 * t304;
t388 = t163 * t257;
t202 = -t251 * t282 + t253 * t285;
t387 = qJD(3) * t242 + qJD(4) * t202 + t146 * t285 - t282 * t154;
t176 = -t204 * t275 - t278 * t331;
t386 = t235 * t275 + t176;
t177 = -t204 * t278 + t275 * t331;
t385 = t235 * t278 + t177;
t376 = t275 * t394 + t393 * t278;
t375 = t393 * t275 - t278 * t394;
t383 = t303 * t64;
t382 = t303 * t304;
t370 = pkin(4) * t331 + t387;
t381 = t257 * t303;
t335 = qJD(1) * qJD(2);
t326 = t277 * t335;
t316 = t286 * t326;
t301 = t276 * t316;
t339 = qJD(4) * t285;
t114 = t215 * t339 + t316 * t351 + (-qJD(4) * t216 - t301) * t282;
t315 = t283 * t326;
t88 = t114 * t275 - t278 * t315;
t89 = t114 * t278 + t275 * t315;
t26 = -qJD(6) * t304 + t281 * t89 + t284 * t88;
t379 = pkin(1) * t283;
t377 = pkin(10) + qJ(5);
t208 = (qJD(2) * t309 - qJD(3) * t283) * t277;
t192 = qJD(1) * t208;
t333 = pkin(1) * qJD(2) * t280;
t319 = qJD(1) * t333;
t295 = -pkin(8) * t315 + t286 * t319;
t193 = qJD(3) * t264 + t295;
t141 = t279 * t192 - t193 * t276;
t290 = qJD(2) * t293;
t101 = qJD(1) * t290 + t141;
t205 = qJ(3) * t264 + t229;
t224 = (-pkin(2) * t286 - qJ(3) * t283 - pkin(1)) * t277;
t210 = qJD(1) * t224;
t148 = t279 * t205 + t276 * t210;
t116 = pkin(9) * t215 + t148;
t142 = t276 * t192 + t279 * t193;
t117 = -pkin(9) * t301 + t142;
t340 = qJD(4) * t282;
t147 = -t205 * t276 + t279 * t210;
t98 = -pkin(3) * t330 - pkin(9) * t216 + t147;
t296 = -t282 * t101 + t116 * t340 - t285 * t117 - t98 * t339;
t20 = qJ(5) * t315 - qJD(5) * t257 - t296;
t222 = pkin(8) * t316 + t283 * t319;
t188 = pkin(3) * t301 + t222;
t43 = pkin(4) * t115 - qJ(5) * t114 - qJD(5) * t303 + t188;
t10 = t278 * t20 + t275 * t43;
t341 = qJD(2) * t283;
t329 = t277 * t341;
t300 = -pkin(8) * t329 + t286 * t333;
t214 = qJD(3) * t280 + t300;
t152 = t279 * t208 - t214 * t276;
t121 = t152 + t290;
t223 = pkin(8) * t353 + (qJ(3) + t379) * t280;
t168 = -t223 * t276 + t279 * t224;
t354 = t277 * t283;
t232 = t276 * t280 + t279 * t354;
t124 = -pkin(3) * t353 - pkin(9) * t232 + t168;
t153 = t276 * t208 + t279 * t214;
t328 = qJD(2) * t353;
t317 = t276 * t328;
t140 = -pkin(9) * t317 + t153;
t169 = t279 * t223 + t276 * t224;
t231 = t276 * t354 - t280 * t279;
t145 = -pkin(9) * t231 + t169;
t294 = t282 * t121 + t124 * t339 + t285 * t140 - t145 * t340;
t30 = (qJ(5) * t341 - qJD(5) * t286) * t277 + t294;
t178 = t285 * t231 + t232 * t282;
t131 = -qJD(2) * t291 - qJD(4) * t178;
t179 = -t231 * t282 + t232 * t285;
t132 = qJD(4) * t179 + t289;
t230 = pkin(8) * t328 + t283 * t333;
t197 = pkin(3) * t317 + t230;
t49 = pkin(4) * t132 - qJ(5) * t131 - qJD(5) * t179 + t197;
t13 = t275 * t49 + t278 * t30;
t56 = t285 * t116 + t282 * t98;
t53 = -qJ(5) * t257 + t56;
t198 = -pkin(2) * t264 + qJD(3) - t228;
t160 = -pkin(3) * t215 + t198;
t60 = pkin(4) * t163 - qJ(5) * t303 + t160;
t24 = t275 * t60 + t278 * t53;
t55 = -t282 * t116 + t285 * t98;
t81 = pkin(4) * t303 + qJ(5) * t163;
t34 = t275 * t81 + t278 * t55;
t349 = t282 * t124 + t285 * t145;
t62 = -qJ(5) * t353 + t349;
t226 = pkin(8) * t354 + (-pkin(1) * t286 - pkin(2)) * t280;
t184 = pkin(3) * t231 + t226;
t74 = pkin(4) * t178 - qJ(5) * t179 + t184;
t38 = t275 * t74 + t278 * t62;
t374 = t176 * t281 - t177 * t284 - t242 * t234 + t235 * t239;
t337 = qJD(6) * t284;
t338 = qJD(6) * t281;
t357 = t242 * t278;
t358 = t242 * t275;
t373 = -t284 * t176 - t177 * t281 - t235 * t241 + t337 * t357 - t338 * t358;
t371 = -t386 * pkin(5) + t370;
t367 = t115 * t275;
t366 = t115 * t278;
t365 = t147 * t283;
t364 = t148 * t283;
t363 = t163 * t275;
t362 = t163 * t278;
t272 = t277 ^ 2;
t356 = t272 * qJD(1) ^ 2;
t355 = t276 * t286;
t52 = pkin(4) * t257 + qJD(5) - t55;
t350 = -qJD(5) + t52;
t271 = -pkin(3) * t279 - pkin(2);
t185 = pkin(4) * t240 - qJ(5) * t242 + t271;
t127 = t275 * t185 + t278 * t202;
t345 = t283 ^ 2 - t286 ^ 2;
t336 = qJD(2) - t264;
t332 = t286 * t356;
t327 = t272 * t335;
t9 = -t20 * t275 + t278 * t43;
t12 = -t275 * t30 + t278 * t49;
t23 = -t275 * t53 + t278 * t60;
t33 = -t275 * t55 + t278 * t81;
t37 = -t275 * t62 + t278 * t74;
t324 = t124 * t285 - t282 * t145;
t126 = t278 * t185 - t202 * t275;
t322 = -t285 * t101 + t116 * t339 + t282 * t117 + t98 * t340;
t321 = t264 + t343;
t320 = 0.2e1 * t327;
t84 = pkin(5) * t240 - pkin(10) * t357 + t126;
t314 = -t386 * pkin(10) - qJD(6) * t84 + t375;
t102 = -pkin(10) * t358 + t127;
t313 = -t346 * pkin(5) - t385 * pkin(10) + qJD(6) * t102 + t376;
t312 = -0.2e1 * pkin(1) * t327;
t6 = pkin(5) * t115 - pkin(10) * t89 + t9;
t7 = -pkin(10) * t88 + t10;
t311 = t281 * t6 + t284 * t7;
t63 = pkin(4) * t353 - t324;
t310 = -t10 * t275 - t278 * t9;
t14 = pkin(5) * t163 - pkin(10) * t137 + t23;
t16 = -pkin(10) * t135 + t24;
t3 = t14 * t284 - t16 * t281;
t4 = t14 * t281 + t16 * t284;
t158 = t179 * t278 - t275 * t353;
t21 = pkin(5) * t178 - pkin(10) * t158 + t37;
t157 = t179 * t275 + t278 * t353;
t28 = -pkin(10) * t157 + t38;
t308 = t21 * t284 - t28 * t281;
t307 = t21 * t281 + t28 * t284;
t22 = -pkin(4) * t315 + t322;
t306 = t22 * t242 - t235 * t52;
t305 = t23 * t275 - t24 * t278;
t77 = t284 * t157 + t158 * t281;
t78 = -t157 * t281 + t158 * t284;
t299 = t121 * t285 - t124 * t340 - t282 * t140 - t145 * t339;
t252 = t377 * t278;
t298 = pkin(5) * t303 + pkin(10) * t362 + qJD(5) * t275 + qJD(6) * t252 + t33;
t250 = t377 * t275;
t297 = pkin(10) * t363 - qJD(5) * t278 + qJD(6) * t250 + t34;
t25 = -t135 * t337 - t137 * t338 - t281 * t88 + t284 * t89;
t31 = -pkin(4) * t329 - t299;
t2 = -qJD(6) * t4 - t281 * t7 + t284 * t6;
t288 = -qJ(3) * t341 + (-pkin(2) * qJD(2) + qJD(3) - t198) * t286;
t270 = -pkin(5) * t278 - pkin(4);
t181 = t239 * t242;
t180 = t241 * t242;
t173 = pkin(5) * t358 - t302;
t111 = t131 * t278 + t275 * t329;
t110 = t131 * t275 - t278 * t329;
t50 = pkin(5) * t157 + t63;
t44 = -pkin(5) * t363 + t56;
t40 = pkin(5) * t135 + t52;
t36 = qJD(6) * t78 + t284 * t110 + t111 * t281;
t35 = -qJD(6) * t77 - t110 * t281 + t111 * t284;
t18 = pkin(5) * t110 + t31;
t15 = pkin(5) * t88 + t22;
t11 = -pkin(10) * t110 + t13;
t8 = pkin(5) * t132 - pkin(10) * t111 + t12;
t1 = qJD(6) * t3 + t311;
t5 = [0, 0, 0, t283 * t286 * t320, -t345 * t320, t321 * t328, -t321 * t329, 0, -t222 * t280 - t230 * t264 + t283 * t312, -t264 * t300 - t280 * t295 + t286 * t312, -t215 * t230 + t222 * t231 + ((-qJD(1) * t152 - t141) * t286 + (t198 * t355 + t365 + (t168 * t283 + t226 * t355) * qJD(1)) * qJD(2)) * t277, t216 * t230 + t222 * t232 + ((qJD(1) * t153 + t142) * t286 + (t198 * t352 - t364 + (-t169 * t283 + t226 * t352) * qJD(1)) * qJD(2)) * t277, -t141 * t232 - t142 * t231 - t152 * t216 + t153 * t215 + (-t147 * t279 - t148 * t276 + (-t168 * t279 - t169 * t276) * qJD(1)) * t328, t141 * t168 + t142 * t169 + t147 * t152 + t148 * t153 + t198 * t230 + t222 * t226, t114 * t179 + t131 * t303, -t114 * t178 - t115 * t179 - t131 * t163 - t132 * t303, -t131 * t257 + (-t114 * t286 + (qJD(1) * t179 + t303) * t341) * t277, t132 * t257 + (t115 * t286 + (-qJD(1) * t178 - t163) * t341) * t277 (-t257 * t277 - t272 * t342) * t341, -t299 * t257 + t197 * t163 + t184 * t115 + t188 * t178 + t160 * t132 + (t322 * t286 + (qJD(1) * t324 + t55) * t341) * t277, t294 * t257 + t197 * t303 + t184 * t114 + t188 * t179 + t160 * t131 + (-t296 * t286 + (-qJD(1) * t349 - t56) * t341) * t277, t110 * t52 + t115 * t37 + t12 * t163 + t132 * t23 + t135 * t31 + t157 * t22 + t178 * t9 + t63 * t88, -t10 * t178 + t111 * t52 - t115 * t38 - t13 * t163 - t132 * t24 + t137 * t31 + t158 * t22 + t63 * t89, -t10 * t157 - t110 * t24 - t111 * t23 - t12 * t137 - t13 * t135 - t158 * t9 - t37 * t89 - t38 * t88, t10 * t38 + t12 * t23 + t13 * t24 + t22 * t63 + t31 * t52 + t37 * t9, t25 * t78 - t304 * t35, -t25 * t77 - t26 * t78 + t304 * t36 - t35 * t64, t115 * t78 - t132 * t304 + t159 * t35 + t178 * t25, -t115 * t77 - t132 * t64 - t159 * t36 - t178 * t26, t115 * t178 + t132 * t159 (-qJD(6) * t307 - t11 * t281 + t284 * t8) * t159 + t308 * t115 + t2 * t178 + t3 * t132 + t18 * t64 + t50 * t26 + t15 * t77 + t40 * t36 -(qJD(6) * t308 + t11 * t284 + t281 * t8) * t159 - t307 * t115 - t1 * t178 - t4 * t132 - t18 * t304 + t50 * t25 + t15 * t78 + t40 * t35; 0, 0, 0, -t283 * t332, t345 * t356, t336 * t330, -t336 * t331, 0, t229 * t264 + t356 * t379 - t222, pkin(1) * t332 + t228 * t264 - t295, t215 * t229 - t222 * t279 + (t174 * t286 + t276 * t288 - t365) * t344, -t216 * t229 + t222 * t276 + (-t175 * t286 + t279 * t288 + t364) * t344, t174 * t216 - t175 * t215 + (qJD(3) * t215 + t147 * t330 + t142) * t279 + (qJD(3) * t216 + t148 * t330 - t141) * t276, -pkin(2) * t222 - t147 * t174 - t148 * t175 - t198 * t229 + (-t147 * t276 + t148 * t279) * qJD(3) + (-t141 * t276 + t142 * t279) * qJ(3), t114 * t242 + t303 * t347, -t114 * t240 - t115 * t242 - t163 * t347 - t303 * t346, -t347 * t257 + (qJD(2) * t242 - t303) * t331, t346 * t257 + (-qJD(2) * t240 + t163) * t331, t257 * t331, t271 * t115 - t196 * t163 + t188 * t240 + t387 * t257 + t346 * t160 + (qJD(2) * t302 - t55) * t331, t271 * t114 - t196 * t303 + t188 * t242 + t396 * t257 + t347 * t160 + (-qJD(2) * t202 + t56) * t331, t115 * t126 + t135 * t370 - t163 * t376 - t176 * t52 + t23 * t346 + t240 * t9 + t275 * t306 - t302 * t88, -t10 * t240 - t115 * t127 + t137 * t370 + t163 * t375 - t177 * t52 - t24 * t346 + t278 * t306 - t302 * t89, -t126 * t89 - t127 * t88 + t375 * t135 + t376 * t137 + t23 * t385 + t24 * t386 + t310 * t242, t10 * t127 + t126 * t9 - t22 * t302 - t23 * t376 - t24 * t375 + t370 * t52, -t181 * t25 - t304 * t374, -t180 * t25 + t181 * t26 + t304 * t373 - t374 * t64, -t115 * t181 + t159 * t374 + t240 * t25 - t304 * t346, -t115 * t180 - t159 * t373 - t240 * t26 - t346 * t64, t115 * t240 + t159 * t346 (-t102 * t281 + t284 * t84) * t115 + t2 * t240 + t173 * t26 + t15 * t180 + t371 * t64 + t373 * t40 + t346 * t3 + (t281 * t314 - t284 * t313) * t159 -(t102 * t284 + t281 * t84) * t115 - t1 * t240 + t173 * t25 - t15 * t181 - t371 * t304 + t374 * t40 - t346 * t4 + (t281 * t313 + t284 * t314) * t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (qJD(2) * t276 - t216) * t330 (qJD(2) * t279 - t215) * t330, -t215 ^ 2 - t216 ^ 2, t147 * t216 - t148 * t215 + t222, 0, 0, 0, 0, 0, t115 - t381, t114 + t388, -t135 * t303 - t163 * t363 + t366, -t137 * t303 - t163 * t362 - t367, -t275 * t88 - t278 * t89 - (t135 * t278 - t137 * t275) * t163, -t163 * t305 - t303 * t52 - t310, 0, 0, 0, 0, 0, -t383 + t392, t382 - t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t303 * t163, -t163 ^ 2 + t303 ^ 2, t114 - t388, -t242 * t316 - t380 - t381, t315, -t160 * t303 - t257 * t56 - t322, t160 * t163 - t257 * t55 + t296, -qJ(5) * t367 - pkin(4) * t88 - t135 * t56 - t303 * t23 - t22 * t278 + (t275 * t350 - t33) * t163, -qJ(5) * t366 - pkin(4) * t89 - t137 * t56 + t303 * t24 + t22 * t275 + (t278 * t350 + t34) * t163, t135 * t34 + t137 * t33 + (-qJ(5) * t88 - qJD(5) * t135 - t163 * t23 + t10) * t278 + (qJ(5) * t89 + qJD(5) * t137 - t163 * t24 - t9) * t275, -pkin(4) * t22 - t23 * t33 - t24 * t34 - t52 * t56 - t305 * qJD(5) + (t10 * t278 - t275 * t9) * qJ(5), t241 * t25 + t304 * t384, -t239 * t25 - t241 * t26 + t304 * t368 + t384 * t64, t382 + t395, t383 + t392, -t159 * t303 (-t250 * t284 - t252 * t281) * t115 + t270 * t26 + t15 * t239 - t3 * t303 - t44 * t64 + t368 * t40 + (t281 * t297 - t284 * t298) * t159 -(-t250 * t281 + t252 * t284) * t115 + t270 * t25 + t15 * t241 + t4 * t303 + t44 * t304 - t384 * t40 + (t281 * t298 + t284 * t297) * t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137 * t163 + t88, -t135 * t163 + t89, -t135 ^ 2 - t137 ^ 2, t135 * t24 + t137 * t23 + t22, 0, 0, 0, 0, 0, t26 - t389, t25 - t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304 * t64, t304 ^ 2 - t64 ^ 2, t25 + t391, -t26 - t389, t115, t159 * t4 + t304 * t40 + t2, t40 * t64 - t311 + (-qJD(6) + t159) * t3;];
tauc_reg  = t5;
