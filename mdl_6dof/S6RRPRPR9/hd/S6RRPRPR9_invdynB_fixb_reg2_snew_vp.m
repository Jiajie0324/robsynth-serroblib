% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR9_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 15:19:42
% EndTime: 2019-05-06 15:21:02
% DurationCPUTime: 77.63s
% Computational Cost: add. (844549->1115), mult. (1938297->1812), div. (0->0), fcn. (1593819->14), ass. (0->804)
t1240 = sin(pkin(12));
t1241 = sin(pkin(11));
t1244 = cos(pkin(11));
t1245 = cos(pkin(6));
t1401 = qJD(1) * t1245;
t1349 = qJD(2) + t1401;
t1242 = sin(pkin(6));
t1248 = sin(qJ(2));
t1374 = t1242 * t1248;
t1362 = qJD(1) * t1374;
t1200 = -t1241 * t1362 + t1244 * t1349;
t1201 = t1241 * t1349 + t1244 * t1362;
t1247 = sin(qJ(4));
t1251 = cos(qJ(4));
t1164 = t1200 * t1247 + t1201 * t1251;
t1252 = cos(qJ(2));
t1373 = t1242 * t1252;
t1361 = qJD(1) * t1373;
t1226 = -qJD(4) + t1361;
t1243 = cos(pkin(12));
t1134 = t1164 * t1240 + t1243 * t1226;
t1136 = t1164 * t1243 - t1226 * t1240;
t1073 = t1136 * t1134;
t1400 = qJD(1) * t1252;
t1350 = qJD(2) * t1400;
t1364 = t1248 * qJDD(1);
t1207 = (t1350 + t1364) * t1242;
t1342 = qJDD(1) * t1245 + qJDD(2);
t1174 = t1244 * t1207 + t1241 * t1342;
t1344 = t1207 * t1241 - t1244 * t1342;
t1346 = t1247 * t1174 + t1251 * t1344;
t1085 = qJD(4) * t1164 + t1346;
t1424 = -t1073 + t1085;
t1434 = t1240 * t1424;
t1307 = qJD(1) * t1349;
t1287 = t1242 * t1307;
t1433 = t1243 * t1424;
t1246 = sin(qJ(6));
t1264 = qJDD(6) + t1085;
t1250 = cos(qJ(6));
t1069 = t1250 * t1134 + t1136 * t1246;
t1071 = -t1134 * t1246 + t1136 * t1250;
t985 = t1071 * t1069;
t1430 = t1264 - t985;
t1432 = t1246 * t1430;
t1431 = t1250 * t1430;
t1162 = -t1251 * t1200 + t1201 * t1247;
t1097 = t1162 * t1134;
t1086 = -t1162 * qJD(4) + t1251 * t1174 - t1247 * t1344;
t1229 = qJD(2) * t1362;
t1365 = qJDD(1) * t1252;
t1336 = t1242 * t1365 - t1229;
t1203 = -qJDD(4) + t1336;
t1367 = -t1243 * t1086 + t1240 * t1203;
t999 = -t1097 + t1367;
t1341 = t1349 ^ 2;
t1382 = t1200 * t1201;
t1265 = -t1336 + t1382;
t1429 = t1241 * t1265;
t1428 = t1244 * t1265;
t1385 = t1162 * t1164;
t1261 = -t1203 - t1385;
t1427 = t1247 * t1261;
t1426 = t1251 * t1261;
t1158 = qJD(6) + t1162;
t1032 = t1158 * t1069;
t1061 = -t1086 * t1240 - t1243 * t1203;
t1263 = qJD(6) * t1069 - t1061 * t1246 + t1250 * t1367;
t1425 = -t1032 - t1263;
t1150 = t1162 * t1226;
t1047 = t1150 + t1086;
t1185 = t1200 * t1361;
t1146 = -t1185 - t1174;
t1186 = t1201 * t1361;
t1142 = t1186 + t1344;
t998 = t1367 + t1097;
t1237 = t1242 ^ 2;
t1423 = (qJD(1) * (t1245 ^ 2 + t1237) + qJD(2) * t1245) * t1242;
t1348 = -t1250 * t1061 - t1246 * t1367;
t892 = (qJD(6) - t1158) * t1071 + t1348;
t1045 = (qJD(4) + t1226) * t1164 + t1346;
t1422 = qJD(1) ^ 2;
t1065 = t1069 ^ 2;
t1066 = t1071 ^ 2;
t1421 = t1134 ^ 2;
t1133 = t1136 ^ 2;
t1156 = t1158 ^ 2;
t1420 = t1162 ^ 2;
t1161 = t1164 ^ 2;
t1419 = t1200 ^ 2;
t1199 = t1201 ^ 2;
t1418 = t1226 ^ 2;
t1417 = 2 * qJD(3);
t1416 = pkin(2) * t1248;
t1415 = pkin(2) * t1252;
t1414 = pkin(4) * t1247;
t1413 = pkin(8) * t1242;
t1412 = t1245 * g(3);
t1100 = pkin(4) * t1162 - qJ(5) * t1164;
t1249 = sin(qJ(1));
t1253 = cos(qJ(1));
t1227 = t1249 * g(1) - t1253 * g(2);
t1259 = qJDD(1) * pkin(1) + t1413 * t1422 + t1227;
t1285 = t1248 * t1307;
t1286 = t1252 * t1307;
t1256 = t1229 * pkin(2) - t1412 - t1207 * qJ(3) + (-qJ(3) * t1286 + (t1285 - t1365) * pkin(2) - t1259) * t1242;
t1228 = g(1) * t1253 + t1249 * g(2);
t1204 = -pkin(1) * t1422 + qJDD(1) * t1413 - t1228;
t1258 = t1245 * t1259;
t1155 = -g(3) * t1374 + t1252 * t1204 + t1248 * t1258;
t1339 = -qJ(3) * t1248 - t1415;
t1288 = t1422 * t1339;
t1257 = t1237 * t1252 * t1288 - pkin(2) * t1341 + qJ(3) * t1342 + t1155;
t1017 = t1201 * t1417 + t1241 * t1257 - t1244 * t1256;
t1255 = pkin(3) * t1265 + pkin(9) * t1146 - t1017;
t1018 = t1200 * t1417 + t1241 * t1256 + t1244 * t1257;
t1175 = -pkin(3) * t1361 - pkin(9) * t1201;
t978 = -pkin(3) * t1419 - pkin(9) * t1344 + t1175 * t1361 + t1018;
t879 = t1247 * t1255 + t1251 * t978;
t853 = -pkin(4) * t1418 - qJ(5) * t1203 - t1100 * t1162 + t879;
t1345 = t1248 * t1204 - t1252 * t1258;
t1111 = qJDD(3) - t1342 * pkin(2) - t1341 * qJ(3) + (t1252 * g(3) + t1288 * t1374) * t1242 + t1345;
t1021 = t1344 * pkin(3) - t1419 * pkin(9) + t1201 * t1175 + t1111;
t907 = -t1047 * qJ(5) + (-t1164 * t1226 + t1085) * pkin(4) + t1021;
t792 = 0.2e1 * qJD(5) * t1136 + t1240 * t853 - t1243 * t907;
t747 = t1424 * pkin(5) + pkin(10) * t999 - t792;
t1087 = pkin(5) * t1162 - pkin(10) * t1136;
t793 = -0.2e1 * qJD(5) * t1134 + t1240 * t907 + t1243 * t853;
t760 = -pkin(5) * t1421 + pkin(10) * t1061 - t1087 * t1162 + t793;
t698 = t1246 * t747 + t1250 * t760;
t697 = t1246 * t760 - t1250 * t747;
t647 = t1246 * t698 - t1250 * t697;
t1411 = t1240 * t647;
t878 = t1247 * t978 - t1251 * t1255;
t852 = t1203 * pkin(4) - t1418 * qJ(5) + t1100 * t1164 + qJDD(5) + t878;
t1410 = t1240 * t852;
t806 = t1247 * t879 - t1251 * t878;
t1409 = t1241 * t806;
t1408 = t1243 * t647;
t1407 = t1243 * t852;
t1406 = t1244 * t806;
t825 = -t1061 * pkin(5) - pkin(10) * t1421 + t1087 * t1136 + t852;
t1405 = t1246 * t825;
t943 = t1264 + t985;
t1404 = t1246 * t943;
t1403 = t1250 * t825;
t1402 = t1250 * t943;
t1007 = t1073 + t1085;
t1399 = t1007 * t1240;
t1398 = t1007 * t1243;
t1397 = t1021 * t1247;
t1396 = t1021 * t1251;
t1395 = t1085 * t1247;
t1090 = t1203 - t1385;
t1394 = t1090 * t1247;
t1393 = t1090 * t1251;
t1392 = t1111 * t1241;
t1391 = t1111 * t1244;
t1390 = t1136 * t1162;
t1147 = t1336 + t1382;
t1389 = t1147 * t1241;
t1388 = t1147 * t1244;
t1387 = t1158 * t1246;
t1386 = t1158 * t1250;
t1384 = t1162 * t1240;
t1383 = t1162 * t1243;
t1371 = t1248 * t1252;
t1375 = t1237 * t1422;
t1225 = t1371 * t1375;
t1205 = -t1225 + t1342;
t1381 = t1205 * t1248;
t1380 = t1205 * t1252;
t1206 = t1225 + t1342;
t1379 = t1206 * t1248;
t1378 = t1206 * t1252;
t1377 = t1226 * t1247;
t1376 = t1226 * t1251;
t1187 = t1242 * t1259 + t1412;
t1372 = t1248 * t1187;
t1370 = t1252 * t1187;
t1363 = -pkin(4) * t1251 - pkin(3);
t1359 = t1247 * t985;
t1358 = t1251 * t985;
t1357 = t1247 * t1073;
t1356 = t1251 * t1073;
t1355 = t1248 * t1385;
t1354 = t1252 * t1385;
t1353 = t1248 * t1382;
t1352 = t1252 * t1382;
t1238 = t1248 ^ 2;
t1351 = t1238 * t1375;
t648 = t1246 * t697 + t1250 * t698;
t807 = t1247 * t878 + t1251 * t879;
t933 = t1017 * t1241 + t1244 * t1018;
t1189 = -t1227 * t1249 - t1253 * t1228;
t1224 = qJDD(1) * t1253 - t1249 * t1422;
t1340 = -pkin(7) * t1224 - g(3) * t1249;
t1196 = -t1351 - t1341;
t1165 = -t1196 * t1248 - t1380;
t1338 = pkin(8) * t1165 - t1372;
t1239 = t1252 ^ 2;
t1232 = t1239 * t1375;
t1211 = -t1232 - t1341;
t1169 = t1211 * t1252 - t1379;
t1337 = pkin(8) * t1169 + t1370;
t722 = t1240 * t793 - t1243 * t792;
t723 = t1240 * t792 + t1243 * t793;
t611 = t1243 * t648 - t1411;
t605 = t1247 * t611 - t1251 * t825;
t606 = t1247 * t825 + t1251 * t611;
t582 = -t1241 * t605 + t1244 * t606;
t610 = t1240 * t648 + t1408;
t1335 = t1248 * t582 - t1252 * t610;
t699 = t1247 * t723 - t1251 * t852;
t700 = t1247 * t852 + t1251 * t723;
t650 = -t1241 * t699 + t1244 * t700;
t1334 = t1248 * t650 - t1252 * t722;
t896 = -t1032 + t1263;
t821 = -t1246 * t892 + t1250 * t896;
t823 = -t1246 * t896 - t1250 * t892;
t740 = -t1240 * t821 + t1243 * t823;
t936 = -t1065 - t1066;
t725 = t1247 * t740 - t1251 * t936;
t726 = t1247 * t936 + t1251 * t740;
t657 = -t1241 * t725 + t1244 * t726;
t738 = t1240 * t823 + t1243 * t821;
t1333 = t1248 * t657 - t1252 * t738;
t891 = (qJD(6) + t1158) * t1071 + t1348;
t820 = -t1246 * t891 + t1250 * t1425;
t822 = -t1246 * t1425 - t1250 * t891;
t739 = -t1240 * t820 + t1243 * t822;
t983 = -t1066 + t1065;
t729 = t1247 * t739 + t1251 * t983;
t730 = -t1247 * t983 + t1251 * t739;
t665 = -t1241 * t729 + t1244 * t730;
t737 = -t1240 * t822 - t1243 * t820;
t1332 = t1248 * t665 + t1252 * t737;
t972 = -t1156 - t1065;
t868 = t1246 * t972 + t1431;
t869 = t1250 * t972 - t1432;
t795 = -t1240 * t868 + t1243 * t869;
t742 = t1247 * t795 - t1251 * t891;
t743 = t1247 * t891 + t1251 * t795;
t690 = -t1241 * t742 + t1244 * t743;
t794 = t1240 * t869 + t1243 * t868;
t1331 = t1248 * t690 - t1252 * t794;
t1009 = -t1066 - t1156;
t880 = t1009 * t1250 - t1404;
t881 = -t1009 * t1246 - t1402;
t809 = -t1240 * t880 + t1243 * t881;
t749 = t1247 * t809 - t1251 * t1425;
t750 = t1247 * t1425 + t1251 * t809;
t694 = -t1241 * t749 + t1244 * t750;
t808 = t1240 * t881 + t1243 * t880;
t1330 = t1248 * t694 - t1252 * t808;
t1031 = -t1066 + t1156;
t898 = t1031 * t1250 + t1432;
t900 = -t1031 * t1246 + t1431;
t829 = -t1240 * t898 + t1243 * t900;
t761 = t1247 * t829 + t1251 * t896;
t763 = -t1247 * t896 + t1251 * t829;
t705 = -t1241 * t761 + t1244 * t763;
t827 = -t1240 * t900 - t1243 * t898;
t1329 = t1248 * t705 + t1252 * t827;
t1030 = t1065 - t1156;
t899 = t1030 * t1246 + t1402;
t901 = t1030 * t1250 - t1404;
t830 = -t1240 * t899 + t1243 * t901;
t762 = t1247 * t830 + t1251 * t892;
t764 = -t1247 * t892 + t1251 * t830;
t706 = -t1241 * t762 + t1244 * t764;
t828 = -t1240 * t901 - t1243 * t899;
t1328 = t1248 * t706 + t1252 * t828;
t927 = -qJD(6) * t1071 - t1348;
t886 = t1069 * t1387 + t1250 * t927;
t887 = t1069 * t1386 - t1246 * t927;
t817 = -t1240 * t886 + t1243 * t887;
t782 = t1247 * t817 + t1358;
t784 = t1251 * t817 - t1359;
t718 = -t1241 * t782 + t1244 * t784;
t815 = -t1240 * t887 - t1243 * t886;
t1327 = t1248 * t718 + t1252 * t815;
t888 = t1071 * t1386 - t1246 * t1263;
t889 = -t1071 * t1387 - t1250 * t1263;
t818 = -t1240 * t888 + t1243 * t889;
t783 = t1247 * t818 - t1358;
t785 = t1251 * t818 + t1359;
t719 = -t1241 * t783 + t1244 * t785;
t816 = -t1240 * t889 - t1243 * t888;
t1326 = t1248 * t719 + t1252 * t816;
t947 = (-t1069 * t1246 - t1071 * t1250) * t1158;
t948 = (-t1069 * t1250 + t1071 * t1246) * t1158;
t859 = -t1240 * t947 + t1243 * t948;
t845 = t1247 * t859 - t1251 * t1264;
t846 = t1247 * t1264 + t1251 * t859;
t768 = -t1241 * t845 + t1244 * t846;
t858 = -t1240 * t948 - t1243 * t947;
t1325 = t1248 * t768 + t1252 * t858;
t1022 = t1133 + t1421;
t994 = -t1061 - t1390;
t918 = -t1240 * t999 - t1243 * t994;
t864 = t1022 * t1251 + t1247 * t918;
t865 = -t1022 * t1247 + t1251 * t918;
t791 = -t1241 * t864 + t1244 * t865;
t916 = -t1240 * t994 + t1243 * t999;
t1324 = t1248 * t791 - t1252 * t916;
t1043 = -t1420 - t1421;
t926 = t1043 * t1243 - t1434;
t995 = t1061 - t1390;
t870 = t1247 * t926 + t1251 * t995;
t871 = -t1247 * t995 + t1251 * t926;
t797 = -t1241 * t870 + t1244 * t871;
t925 = t1043 * t1240 + t1433;
t1323 = t1248 * t797 - t1252 * t925;
t1053 = -t1133 - t1420;
t935 = -t1053 * t1240 - t1398;
t872 = t1247 * t935 + t1251 * t998;
t873 = -t1247 * t998 + t1251 * t935;
t799 = -t1241 * t872 + t1244 * t873;
t934 = t1053 * t1243 - t1399;
t1322 = t1248 * t799 - t1252 * t934;
t1072 = -t1133 + t1421;
t917 = t1240 * t998 + t1243 * t995;
t874 = t1072 * t1251 + t1247 * t917;
t875 = -t1072 * t1247 + t1251 * t917;
t804 = -t1241 * t874 + t1244 * t875;
t915 = -t1240 * t995 + t1243 * t998;
t1321 = t1248 * t804 + t1252 * t915;
t1094 = -t1133 + t1420;
t955 = -t1094 * t1240 + t1433;
t882 = t1247 * t955 + t1251 * t999;
t884 = -t1247 * t999 + t1251 * t955;
t812 = -t1241 * t882 + t1244 * t884;
t953 = -t1094 * t1243 - t1434;
t1320 = t1248 * t812 + t1252 * t953;
t1093 = -t1420 + t1421;
t956 = t1093 * t1243 - t1399;
t883 = t1247 * t956 + t1251 * t994;
t885 = -t1247 * t994 + t1251 * t956;
t813 = -t1241 * t883 + t1244 * t885;
t954 = -t1093 * t1240 - t1398;
t1319 = t1248 * t813 + t1252 * t954;
t991 = -t1061 * t1240 + t1134 * t1383;
t937 = t1247 * t991 + t1356;
t939 = t1251 * t991 - t1357;
t856 = -t1241 * t937 + t1244 * t939;
t990 = -t1061 * t1243 - t1134 * t1384;
t1318 = t1248 * t856 + t1252 * t990;
t993 = -t1136 * t1384 - t1243 * t1367;
t938 = t1247 * t993 - t1356;
t940 = t1251 * t993 + t1357;
t857 = -t1241 * t938 + t1244 * t940;
t992 = -t1136 * t1383 + t1240 * t1367;
t1317 = t1248 * t857 + t1252 * t992;
t1010 = (t1134 * t1240 + t1136 * t1243) * t1162;
t1011 = (-t1134 * t1243 + t1136 * t1240) * t1162;
t1081 = t1251 * t1085;
t965 = t1011 * t1247 - t1081;
t966 = t1011 * t1251 + t1395;
t867 = -t1241 * t965 + t1244 * t966;
t1316 = t1010 * t1252 + t1248 * t867;
t732 = t1244 * t807 - t1409;
t1315 = -t1021 * t1252 + t1248 * t732;
t1044 = (qJD(4) - t1226) * t1164 + t1346;
t1098 = -t1420 - t1418;
t1012 = t1098 * t1247 + t1426;
t1013 = t1098 * t1251 - t1427;
t924 = -t1012 * t1241 + t1013 * t1244;
t1314 = -t1044 * t1252 + t1248 * t924;
t1140 = t1420 - t1418;
t1040 = t1140 * t1247 - t1393;
t1042 = t1140 * t1251 + t1394;
t960 = -t1040 * t1241 + t1042 * t1244;
t1313 = t1045 * t1252 + t1248 * t960;
t1122 = -t1161 - t1418;
t1026 = t1122 * t1251 + t1394;
t1027 = -t1122 * t1247 + t1393;
t946 = -t1026 * t1241 + t1027 * t1244;
t1312 = -t1047 * t1252 + t1248 * t946;
t1049 = t1150 - t1086;
t1141 = -t1161 + t1418;
t1039 = t1141 * t1251 + t1427;
t1041 = -t1141 * t1247 + t1426;
t959 = -t1039 * t1241 + t1041 * t1244;
t1311 = t1049 * t1252 + t1248 * t959;
t1059 = -t1420 - t1161;
t962 = -t1045 * t1247 + t1049 * t1251;
t964 = -t1045 * t1251 - t1049 * t1247;
t863 = -t1241 * t962 + t1244 * t964;
t1310 = -t1059 * t1252 + t1248 * t863;
t1101 = -t1161 + t1420;
t961 = -t1044 * t1247 + t1047 * t1251;
t963 = -t1044 * t1251 - t1047 * t1247;
t862 = -t1241 * t961 + t1244 * t963;
t1309 = t1101 * t1252 + t1248 * t862;
t1308 = -t1111 * t1252 + t1248 * t933;
t1306 = t1237 * t1248 * t1350;
t1082 = (t1162 * t1247 + t1164 * t1251) * t1226;
t1083 = (t1162 * t1251 - t1164 * t1247) * t1226;
t1005 = -t1082 * t1241 + t1083 * t1244;
t1305 = t1005 * t1248 + t1203 * t1252;
t932 = -t1017 * t1244 + t1018 * t1241;
t1143 = t1186 - t1344;
t1145 = -t1185 + t1174;
t1076 = t1143 * t1244 - t1145 * t1241;
t1166 = -t1199 + t1419;
t1304 = t1076 * t1248 + t1166 * t1252;
t1077 = -t1142 * t1244 - t1146 * t1241;
t1137 = t1199 + t1419;
t1303 = t1077 * t1248 + t1137 * t1252;
t1157 = -t1232 - t1419;
t1089 = t1157 * t1244 - t1429;
t1302 = t1089 * t1248 + t1143 * t1252;
t1183 = -t1199 - t1232;
t1106 = -t1183 * t1241 + t1388;
t1301 = t1106 * t1248 - t1145 * t1252;
t1182 = -t1199 + t1232;
t1107 = -t1182 * t1241 + t1428;
t1300 = t1107 * t1248 + t1146 * t1252;
t1181 = -t1232 + t1419;
t1108 = t1181 * t1244 + t1389;
t1299 = t1108 * t1248 + t1142 * t1252;
t1154 = g(3) * t1373 + t1345;
t1298 = -t1252 * t1154 + t1248 * t1155;
t1099 = t1154 * t1248 + t1155 * t1252;
t1215 = t1242 * t1286;
t1177 = t1215 + t1207;
t1214 = t1242 * t1285;
t1180 = -t1214 + t1336;
t1297 = t1177 * t1252 + t1180 * t1248;
t1178 = -t1215 + t1207;
t1179 = t1214 + t1336;
t1296 = -t1178 * t1252 + t1179 * t1248;
t1295 = t1196 * t1252 - t1381;
t1210 = t1232 - t1341;
t1294 = t1210 * t1248 + t1380;
t1209 = t1341 - t1351;
t1293 = t1209 * t1252 + t1379;
t1292 = t1211 * t1248 + t1378;
t1188 = t1227 * t1253 - t1249 * t1228;
t1291 = t1242 * t1342;
t1034 = -t1162 * t1377 - t1081;
t1035 = -t1162 * t1376 + t1395;
t951 = -t1034 * t1241 + t1035 * t1244;
t1290 = t1248 * t951 + t1354;
t1036 = t1086 * t1247 - t1164 * t1376;
t1037 = t1086 * t1251 + t1164 * t1377;
t952 = -t1036 * t1241 + t1037 * t1244;
t1289 = t1248 * t952 - t1354;
t1130 = t1185 * t1244 + t1241 * t1344;
t1284 = t1130 * t1248 - t1352;
t1132 = t1174 * t1244 + t1186 * t1241;
t1283 = t1132 * t1248 + t1352;
t1282 = t1248 * t1336;
t1281 = t1252 * t1336;
t639 = -pkin(5) * t825 + pkin(10) * t648;
t584 = -pkin(10) * t1408 - qJ(5) * t610 - t1240 * t639;
t596 = -pkin(4) * t610 - pkin(5) * t647;
t566 = -pkin(3) * t610 + pkin(9) * t606 + t1247 * t584 + t1251 * t596;
t571 = -pkin(9) * t605 - t1247 * t596 + t1251 * t584;
t581 = t1241 * t606 + t1244 * t605;
t558 = -qJ(3) * t581 - t1241 * t566 + t1244 * t571;
t567 = -pkin(2) * t581 - pkin(3) * t605 + pkin(4) * t825 + pkin(10) * t1411 - qJ(5) * t611 - t1243 * t639;
t576 = t1248 * t610 + t1252 * t582;
t1280 = pkin(8) * t576 + t1248 * t558 + t1252 * t567;
t635 = -pkin(5) * t936 + pkin(10) * t823 + t648;
t638 = -pkin(10) * t821 - t647;
t599 = -qJ(5) * t738 - t1240 * t635 + t1243 * t638;
t701 = -pkin(4) * t738 - pkin(5) * t821;
t586 = -pkin(3) * t738 + pkin(9) * t726 + t1247 * t599 + t1251 * t701;
t593 = -pkin(9) * t725 - t1247 * t701 + t1251 * t599;
t656 = t1241 * t726 + t1244 * t725;
t574 = -qJ(3) * t656 - t1241 * t586 + t1244 * t593;
t587 = -pkin(2) * t656 - pkin(3) * t725 + pkin(4) * t936 - qJ(5) * t740 - t1240 * t638 - t1243 * t635;
t643 = t1248 * t738 + t1252 * t657;
t1279 = pkin(8) * t643 + t1248 * t574 + t1252 * t587;
t654 = -pkin(4) * t794 - pkin(5) * t868 + t697;
t733 = -pkin(5) * t891 + pkin(10) * t869 - t1403;
t748 = -pkin(10) * t868 + t1405;
t655 = -qJ(5) * t794 - t1240 * t733 + t1243 * t748;
t607 = -pkin(3) * t794 + pkin(9) * t743 + t1247 * t655 + t1251 * t654;
t618 = -pkin(9) * t742 - t1247 * t654 + t1251 * t655;
t689 = t1241 * t743 + t1244 * t742;
t579 = -qJ(3) * t689 - t1241 * t607 + t1244 * t618;
t621 = -pkin(2) * t689 - pkin(3) * t742 + pkin(4) * t891 - qJ(5) * t795 - t1240 * t748 - t1243 * t733;
t662 = t1248 * t794 + t1252 * t690;
t1278 = pkin(8) * t662 + t1248 * t579 + t1252 * t621;
t659 = -pkin(4) * t808 - pkin(5) * t880 + t698;
t741 = -pkin(5) * t1425 + pkin(10) * t881 + t1405;
t755 = -pkin(10) * t880 + t1403;
t661 = -qJ(5) * t808 - t1240 * t741 + t1243 * t755;
t613 = -pkin(3) * t808 + pkin(9) * t750 + t1247 * t661 + t1251 * t659;
t620 = -pkin(9) * t749 - t1247 * t659 + t1251 * t661;
t693 = t1241 * t750 + t1244 * t749;
t585 = -qJ(3) * t693 - t1241 * t613 + t1244 * t620;
t624 = -pkin(2) * t693 - pkin(3) * t749 + pkin(4) * t1425 - qJ(5) * t809 - t1240 * t755 - t1243 * t741;
t675 = t1248 * t808 + t1252 * t694;
t1277 = pkin(8) * t675 + t1248 * t585 + t1252 * t624;
t622 = pkin(9) * t700 + (-qJ(5) * t1247 + t1363) * t722;
t632 = -pkin(9) * t699 + (-qJ(5) * t1251 + t1414) * t722;
t649 = t1241 * t700 + t1244 * t699;
t588 = -qJ(3) * t649 - t1241 * t622 + t1244 * t632;
t612 = -pkin(2) * t649 - pkin(3) * t699 + pkin(4) * t852 - qJ(5) * t723;
t627 = t1248 * t722 + t1252 * t650;
t1276 = pkin(8) * t627 + t1248 * t588 + t1252 * t612;
t710 = -qJ(5) * t916 - t722;
t671 = pkin(9) * t865 + t1247 * t710 + t1363 * t916;
t680 = -pkin(9) * t864 + t1251 * t710 + t1414 * t916;
t790 = t1241 * t865 + t1244 * t864;
t626 = -qJ(3) * t790 - t1241 * t671 + t1244 * t680;
t658 = -pkin(2) * t790 - pkin(3) * t864 - pkin(4) * t1022 - qJ(5) * t918 - t723;
t744 = t1248 * t916 + t1252 * t791;
t1275 = pkin(8) * t744 + t1248 * t626 + t1252 * t658;
t753 = -pkin(4) * t925 + t792;
t814 = -qJ(5) * t925 + t1410;
t686 = -pkin(3) * t925 + pkin(9) * t871 + t1247 * t814 + t1251 * t753;
t692 = -pkin(9) * t870 - t1247 * t753 + t1251 * t814;
t796 = t1241 * t871 + t1244 * t870;
t633 = -qJ(3) * t796 - t1241 * t686 + t1244 * t692;
t702 = -pkin(2) * t796 - pkin(3) * t870 - pkin(4) * t995 - qJ(5) * t926 + t1407;
t758 = t1248 * t925 + t1252 * t797;
t1274 = pkin(8) * t758 + t1248 * t633 + t1252 * t702;
t754 = -pkin(4) * t934 + t793;
t819 = -qJ(5) * t934 + t1407;
t687 = -pkin(3) * t934 + pkin(9) * t873 + t1247 * t819 + t1251 * t754;
t695 = -pkin(9) * t872 - t1247 * t754 + t1251 * t819;
t798 = t1241 * t873 + t1244 * t872;
t634 = -qJ(3) * t798 - t1241 * t687 + t1244 * t695;
t707 = -pkin(2) * t798 - pkin(3) * t872 - pkin(4) * t998 - qJ(5) * t935 - t1410;
t766 = t1248 * t934 + t1252 * t799;
t1273 = pkin(8) * t766 + t1248 * t634 + t1252 * t707;
t731 = t1241 * t807 + t1406;
t789 = -pkin(3) * t1021 + pkin(9) * t807;
t670 = -pkin(9) * t1406 - qJ(3) * t731 - t1241 * t789;
t691 = -pkin(2) * t731 - pkin(3) * t806;
t728 = t1021 * t1248 + t1252 * t732;
t1272 = pkin(8) * t728 + t1248 * t670 + t1252 * t691;
t765 = -pkin(3) * t1059 + pkin(9) * t964 + t807;
t773 = -pkin(9) * t962 - t806;
t861 = t1241 * t964 + t1244 * t962;
t688 = -qJ(3) * t861 - t1241 * t765 + t1244 * t773;
t834 = -pkin(2) * t861 - pkin(3) * t962;
t847 = t1059 * t1248 + t1252 * t863;
t1271 = pkin(8) * t847 + t1248 * t688 + t1252 * t834;
t897 = -pkin(3) * t1044 + pkin(9) * t1013 - t1396;
t923 = t1012 * t1244 + t1013 * t1241;
t929 = -pkin(9) * t1012 + t1397;
t786 = -qJ(3) * t923 - t1241 * t897 + t1244 * t929;
t802 = -pkin(2) * t923 - pkin(3) * t1012 + t878;
t876 = t1044 * t1248 + t1252 * t924;
t1270 = pkin(8) * t876 + t1248 * t786 + t1252 * t802;
t902 = -pkin(3) * t1047 + pkin(9) * t1027 + t1397;
t941 = -pkin(9) * t1026 + t1396;
t945 = t1026 * t1244 + t1027 * t1241;
t800 = -qJ(3) * t945 - t1241 * t902 + t1244 * t941;
t824 = -pkin(2) * t945 - pkin(3) * t1026 + t879;
t903 = t1047 * t1248 + t1252 * t946;
t1269 = pkin(8) * t903 + t1248 * t800 + t1252 * t824;
t1088 = t1157 * t1241 + t1428;
t1016 = -qJ(3) * t1088 + t1392;
t1038 = t1089 * t1252 - t1143 * t1248;
t971 = -pkin(2) * t1088 + t1017;
t1268 = pkin(8) * t1038 + t1016 * t1248 + t1252 * t971;
t1103 = t1183 * t1244 + t1389;
t1024 = -qJ(3) * t1103 + t1391;
t1054 = t1106 * t1252 + t1145 * t1248;
t974 = -pkin(2) * t1103 + t1018;
t1267 = pkin(8) * t1054 + t1024 * t1248 + t1252 * t974;
t1124 = t1178 * t1248 + t1179 * t1252;
t1266 = pkin(8) * t1124 + t1099;
t1023 = t1077 * t1252 - t1137 * t1248;
t1075 = -t1142 * t1241 + t1146 * t1244;
t906 = -qJ(3) * t1075 - t932;
t1262 = pkin(8) * t1023 - t1075 * t1415 + t1248 * t906;
t913 = t1111 * t1248 + t1252 * t933;
t1260 = pkin(8) * t913 + t1339 * t932;
t1223 = t1249 * qJDD(1) + t1253 * t1422;
t1213 = -t1232 - t1351;
t1212 = -t1232 + t1351;
t1208 = -pkin(7) * t1223 + g(3) * t1253;
t1194 = t1245 * t1281;
t1193 = t1242 * t1281;
t1184 = (t1238 + t1239) * t1287;
t1176 = (t1364 + (0.2e1 * qJD(2) + t1401) * t1400) * t1242;
t1171 = t1252 * t1207 - t1238 * t1287;
t1170 = -t1239 * t1287 - t1282;
t1168 = t1210 * t1252 - t1381;
t1167 = -t1209 * t1248 + t1378;
t1153 = (t1245 * t1207 + t1400 * t1423) * t1248;
t1152 = -qJD(1) * t1371 * t1423 + t1194;
t1139 = (-t1200 * t1244 - t1201 * t1241) * t1361;
t1138 = (-t1200 * t1241 + t1201 * t1244) * t1361;
t1131 = t1174 * t1241 - t1186 * t1244;
t1129 = t1185 * t1241 - t1244 * t1344;
t1125 = -t1177 * t1248 + t1180 * t1252;
t1121 = t1242 * t1180 + t1245 * t1292;
t1120 = -t1242 * t1179 + t1245 * t1294;
t1119 = -t1242 * t1178 + t1245 * t1293;
t1118 = -t1245 * t1180 + t1242 * t1292;
t1117 = -t1242 * t1176 + t1245 * t1295;
t1116 = t1245 * t1176 + t1242 * t1295;
t1115 = t1252 * t1139 - t1282;
t1114 = -t1242 * t1212 + t1245 * t1297;
t1113 = -t1242 * t1213 + t1245 * t1296;
t1112 = t1245 * t1213 + t1242 * t1296;
t1105 = t1181 * t1241 - t1388;
t1104 = t1182 * t1244 + t1429;
t1096 = t1132 * t1252 - t1353;
t1095 = t1130 * t1252 + t1353;
t1079 = -t1249 * t1121 + t1169 * t1253;
t1078 = t1121 * t1253 + t1249 * t1169;
t1074 = t1143 * t1241 + t1145 * t1244;
t1068 = -t1249 * t1117 + t1165 * t1253;
t1067 = t1117 * t1253 + t1249 * t1165;
t1064 = t1242 * t1187 + t1245 * t1298;
t1063 = -t1245 * t1187 + t1242 * t1298;
t1057 = t1139 * t1245 * t1248 - t1138 * t1242 + t1194;
t1056 = t1108 * t1252 - t1142 * t1248;
t1055 = t1107 * t1252 - t1146 * t1248;
t1052 = -t1249 * t1113 + t1124 * t1253;
t1051 = t1113 * t1253 + t1249 * t1124;
t1050 = t1076 * t1252 - t1166 * t1248;
t1029 = -t1242 * t1131 + t1245 * t1283;
t1028 = -t1242 * t1129 + t1245 * t1284;
t1025 = -t1372 + (-t1118 * t1242 - t1121 * t1245) * pkin(8);
t1020 = -t1370 + (-t1116 * t1242 - t1117 * t1245) * pkin(8);
t1019 = -pkin(1) * t1118 + t1242 * t1154 + t1245 * t1337;
t1014 = -pkin(1) * t1116 + t1242 * t1155 + t1245 * t1338;
t1004 = t1082 * t1244 + t1083 * t1241;
t1003 = -pkin(2) * t1145 + qJ(3) * t1106 + t1392;
t1002 = pkin(8) * t1099 * t1245 - pkin(1) * t1063;
t1001 = -t1249 * t1064 + t1099 * t1253;
t1000 = t1064 * t1253 + t1249 * t1099;
t989 = -t1242 * t1105 + t1245 * t1299;
t988 = -t1242 * t1104 + t1245 * t1300;
t987 = -t1242 * t1103 + t1245 * t1301;
t986 = t1245 * t1103 + t1242 * t1301;
t984 = pkin(2) * t1143 + qJ(3) * t1089 - t1391;
t982 = t1005 * t1252 - t1203 * t1248;
t981 = -pkin(1) * t1112 + t1245 * t1266;
t980 = (-t1063 * t1242 - t1064 * t1245) * pkin(8);
t979 = (-t1112 * t1242 - t1113 * t1245) * pkin(8) - t1298;
t977 = -t1242 * t1088 + t1245 * t1302;
t976 = t1245 * t1088 + t1242 * t1302;
t973 = -t1242 * t1074 + t1245 * t1304;
t970 = -t1242 * t1075 + t1245 * t1303;
t969 = t1245 * t1075 + t1242 * t1303;
t958 = t1040 * t1244 + t1042 * t1241;
t957 = t1039 * t1244 + t1041 * t1241;
t950 = t1036 * t1244 + t1037 * t1241;
t949 = t1034 * t1244 + t1035 * t1241;
t931 = t1054 * t1253 - t1249 * t987;
t930 = t1249 * t1054 + t1253 * t987;
t922 = t1252 * t952 + t1355;
t921 = t1252 * t951 - t1355;
t920 = t1038 * t1253 - t1249 * t977;
t919 = t1249 * t1038 + t1253 * t977;
t914 = -pkin(2) * t1111 + qJ(3) * t933;
t912 = t1023 * t1253 - t1249 * t970;
t911 = t1249 * t1023 + t1253 * t970;
t910 = -t1242 * t1004 + t1245 * t1305;
t909 = -t1045 * t1248 + t1252 * t960;
t908 = -t1049 * t1248 + t1252 * t959;
t890 = pkin(2) * t1137 + qJ(3) * t1077 + t933;
t866 = t1241 * t966 + t1244 * t965;
t860 = t1241 * t963 + t1244 * t961;
t855 = t1241 * t940 + t1244 * t938;
t854 = t1241 * t939 + t1244 * t937;
t850 = -t1101 * t1248 + t1252 * t862;
t849 = -t1242 * t950 + t1245 * t1289;
t848 = -t1242 * t949 + t1245 * t1290;
t844 = -t1242 * t958 + t1245 * t1313;
t843 = -t1242 * t957 + t1245 * t1311;
t842 = -t1010 * t1248 + t1252 * t867;
t841 = -t1242 * t945 + t1245 * t1312;
t840 = t1242 * t1312 + t1245 * t945;
t839 = -t1242 * t932 + t1245 * t1308;
t838 = t1242 * t1308 + t1245 * t932;
t837 = t1252 * t1024 - t1248 * t974 + (-t1242 * t986 - t1245 * t987) * pkin(8);
t836 = -t1248 * t992 + t1252 * t857;
t835 = -t1248 * t990 + t1252 * t856;
t833 = -t1242 * t923 + t1245 * t1314;
t832 = t1242 * t1314 + t1245 * t923;
t831 = t1252 * t1016 - t1248 * t971 + (-t1242 * t976 - t1245 * t977) * pkin(8);
t826 = -pkin(1) * t986 - t1242 * t1003 + t1245 * t1267;
t811 = t1241 * t885 + t1244 * t883;
t810 = t1241 * t884 + t1244 * t882;
t805 = -pkin(1) * t976 - t1242 * t984 + t1245 * t1268;
t803 = t1241 * t875 + t1244 * t874;
t801 = t1075 * t1416 + t1252 * t906 + (-t1242 * t969 - t1245 * t970) * pkin(8);
t788 = -t1249 * t839 + t1253 * t913;
t787 = t1249 * t913 + t1253 * t839;
t781 = -pkin(2) * t1047 + qJ(3) * t946 + t1241 * t941 + t1244 * t902;
t780 = -t1249 * t841 + t1253 * t903;
t779 = t1249 * t903 + t1253 * t841;
t778 = -t1242 * t860 + t1245 * t1309;
t777 = -t1242 * t861 + t1245 * t1310;
t776 = t1242 * t1310 + t1245 * t861;
t775 = -t1248 * t954 + t1252 * t813;
t774 = -t1248 * t953 + t1252 * t812;
t772 = -pkin(2) * t1044 + qJ(3) * t924 + t1241 * t929 + t1244 * t897;
t771 = -t1242 * t866 + t1245 * t1316;
t770 = -t1249 * t833 + t1253 * t876;
t769 = t1249 * t876 + t1253 * t833;
t767 = t1241 * t846 + t1244 * t845;
t757 = -pkin(1) * t969 - t1242 * t890 + t1245 * t1262;
t756 = -t1248 * t915 + t1252 * t804;
t752 = -t1242 * t855 + t1245 * t1317;
t751 = -t1242 * t854 + t1245 * t1318;
t736 = -t1249 * t777 + t1253 * t847;
t735 = t1249 * t847 + t1253 * t777;
t734 = -t1248 * t858 + t1252 * t768;
t727 = (-qJ(3) * t1252 + t1416) * t932 + (-t1242 * t838 - t1245 * t839) * pkin(8);
t724 = -pkin(1) * t838 - t1242 * t914 + t1245 * t1260;
t721 = -t1242 * t811 + t1245 * t1319;
t720 = -t1242 * t810 + t1245 * t1320;
t717 = t1241 * t785 + t1244 * t783;
t716 = t1241 * t784 + t1244 * t782;
t715 = -t1242 * t798 + t1245 * t1322;
t714 = t1242 * t1322 + t1245 * t798;
t713 = -t1242 * t803 + t1245 * t1321;
t712 = -t1242 * t796 + t1245 * t1323;
t711 = t1242 * t1323 + t1245 * t796;
t709 = -t1242 * t790 + t1245 * t1324;
t708 = t1242 * t1324 + t1245 * t790;
t704 = t1241 * t764 + t1244 * t762;
t703 = t1241 * t763 + t1244 * t761;
t685 = -pkin(2) * t1059 + qJ(3) * t863 + t1241 * t773 + t1244 * t765;
t684 = -t1248 * t816 + t1252 * t719;
t683 = -t1248 * t815 + t1252 * t718;
t682 = -t1242 * t767 + t1245 * t1325;
t681 = -t1248 * t824 + t1252 * t800 + (-t1242 * t840 - t1245 * t841) * pkin(8);
t679 = -t1248 * t828 + t1252 * t706;
t678 = -t1248 * t827 + t1252 * t705;
t677 = -t1249 * t715 + t1253 * t766;
t676 = t1249 * t766 + t1253 * t715;
t674 = -t1248 * t802 + t1252 * t786 + (-t1242 * t832 - t1245 * t833) * pkin(8);
t673 = -t1249 * t712 + t1253 * t758;
t672 = t1249 * t758 + t1253 * t712;
t669 = -t1242 * t731 + t1245 * t1315;
t668 = t1242 * t1315 + t1245 * t731;
t667 = -t1249 * t709 + t1253 * t744;
t666 = t1249 * t744 + t1253 * t709;
t664 = t1241 * t730 + t1244 * t729;
t663 = -pkin(2) * t1021 - pkin(9) * t1409 + qJ(3) * t732 + t1244 * t789;
t660 = -pkin(1) * t840 - t1242 * t781 + t1245 * t1269;
t653 = -pkin(1) * t832 - t1242 * t772 + t1245 * t1270;
t652 = -t1242 * t717 + t1245 * t1326;
t651 = -t1242 * t716 + t1245 * t1327;
t646 = -t1248 * t737 + t1252 * t665;
t645 = -t1249 * t669 + t1253 * t728;
t644 = t1249 * t728 + t1253 * t669;
t642 = -t1242 * t704 + t1245 * t1328;
t641 = -t1242 * t703 + t1245 * t1329;
t640 = -t1248 * t834 + t1252 * t688 + (-t1242 * t776 - t1245 * t777) * pkin(8);
t637 = -t1242 * t693 + t1245 * t1330;
t636 = t1242 * t1330 + t1245 * t693;
t631 = -t1242 * t689 + t1245 * t1331;
t630 = t1242 * t1331 + t1245 * t689;
t629 = -pkin(2) * t934 + qJ(3) * t799 + t1241 * t695 + t1244 * t687;
t628 = -pkin(2) * t925 + qJ(3) * t797 + t1241 * t692 + t1244 * t686;
t625 = -pkin(2) * t916 + qJ(3) * t791 + t1241 * t680 + t1244 * t671;
t623 = -pkin(1) * t776 - t1242 * t685 + t1245 * t1271;
t619 = -t1242 * t664 + t1245 * t1332;
t617 = -t1249 * t637 + t1253 * t675;
t616 = t1249 * t675 + t1253 * t637;
t615 = -t1242 * t656 + t1245 * t1333;
t614 = t1242 * t1333 + t1245 * t656;
t609 = -t1249 * t631 + t1253 * t662;
t608 = t1249 * t662 + t1253 * t631;
t604 = -t1242 * t649 + t1245 * t1334;
t603 = t1242 * t1334 + t1245 * t649;
t602 = -t1248 * t707 + t1252 * t634 + (-t1242 * t714 - t1245 * t715) * pkin(8);
t601 = -t1248 * t702 + t1252 * t633 + (-t1242 * t711 - t1245 * t712) * pkin(8);
t600 = -t1248 * t691 + t1252 * t670 + (-t1242 * t668 - t1245 * t669) * pkin(8);
t598 = -t1249 * t615 + t1253 * t643;
t597 = t1249 * t643 + t1253 * t615;
t595 = -pkin(1) * t668 - t1242 * t663 + t1245 * t1272;
t594 = -t1248 * t658 + t1252 * t626 + (-t1242 * t708 - t1245 * t709) * pkin(8);
t592 = -pkin(1) * t714 - t1242 * t629 + t1245 * t1273;
t591 = -t1249 * t604 + t1253 * t627;
t590 = t1249 * t627 + t1253 * t604;
t589 = -pkin(1) * t711 - t1242 * t628 + t1245 * t1274;
t583 = -pkin(2) * t722 + qJ(3) * t650 + t1241 * t632 + t1244 * t622;
t580 = -pkin(2) * t808 + qJ(3) * t694 + t1241 * t620 + t1244 * t613;
t578 = -pkin(1) * t708 - t1242 * t625 + t1245 * t1275;
t577 = -pkin(2) * t794 + qJ(3) * t690 + t1241 * t618 + t1244 * t607;
t575 = -t1248 * t624 + t1252 * t585 + (-t1242 * t636 - t1245 * t637) * pkin(8);
t573 = -pkin(2) * t738 + qJ(3) * t657 + t1241 * t593 + t1244 * t586;
t572 = -t1248 * t621 + t1252 * t579 + (-t1242 * t630 - t1245 * t631) * pkin(8);
t570 = -t1248 * t612 + t1252 * t588 + (-t1242 * t603 - t1245 * t604) * pkin(8);
t569 = -t1242 * t581 + t1245 * t1335;
t568 = t1242 * t1335 + t1245 * t581;
t565 = -pkin(1) * t636 - t1242 * t580 + t1245 * t1277;
t564 = -pkin(1) * t630 - t1242 * t577 + t1245 * t1278;
t563 = -pkin(1) * t603 - t1242 * t583 + t1245 * t1276;
t562 = -t1248 * t587 + t1252 * t574 + (-t1242 * t614 - t1245 * t615) * pkin(8);
t561 = -t1249 * t569 + t1253 * t576;
t560 = t1249 * t576 + t1253 * t569;
t559 = -pkin(1) * t614 - t1242 * t573 + t1245 * t1279;
t557 = -pkin(2) * t610 + qJ(3) * t582 + t1241 * t571 + t1244 * t566;
t556 = -t1248 * t567 + t1252 * t558 + (-t1242 * t568 - t1245 * t569) * pkin(8);
t555 = -pkin(1) * t568 - t1242 * t557 + t1245 * t1280;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1223, -t1224, 0, t1189, 0, 0, 0, 0, 0, 0, t1079, t1068, t1052, t1001, 0, 0, 0, 0, 0, 0, t920, t931, t912, t788, 0, 0, 0, 0, 0, 0, t770, t780, t736, t645, 0, 0, 0, 0, 0, 0, t673, t677, t667, t591, 0, 0, 0, 0, 0, 0, t609, t617, t598, t561; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1224, -t1223, 0, t1188, 0, 0, 0, 0, 0, 0, t1078, t1067, t1051, t1000, 0, 0, 0, 0, 0, 0, t919, t930, t911, t787, 0, 0, 0, 0, 0, 0, t769, t779, t735, t644, 0, 0, 0, 0, 0, 0, t672, t676, t666, t590, 0, 0, 0, 0, 0, 0, t608, t616, t597, t560; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1118, t1116, t1112, t1063, 0, 0, 0, 0, 0, 0, t976, t986, t969, t838, 0, 0, 0, 0, 0, 0, t832, t840, t776, t668, 0, 0, 0, 0, 0, 0, t711, t714, t708, t603, 0, 0, 0, 0, 0, 0, t630, t636, t614, t568; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1224, 0, -t1223, 0, t1340, -t1208, -t1188, -pkin(7) * t1188, -t1249 * t1153 + t1171 * t1253, -t1249 * t1114 + t1125 * t1253, -t1249 * t1119 + t1167 * t1253, -t1249 * t1152 + t1170 * t1253, -t1249 * t1120 + t1168 * t1253, t1253 * t1184 + t1249 * t1291, -pkin(7) * t1078 - t1249 * t1019 + t1025 * t1253, -pkin(7) * t1067 - t1249 * t1014 + t1020 * t1253, -pkin(7) * t1051 - t1249 * t981 + t1253 * t979, -pkin(7) * t1000 - t1249 * t1002 + t1253 * t980, -t1249 * t1029 + t1096 * t1253, t1050 * t1253 - t1249 * t973, t1055 * t1253 - t1249 * t988, -t1249 * t1028 + t1095 * t1253, t1056 * t1253 - t1249 * t989, -t1249 * t1057 + t1115 * t1253, -pkin(7) * t919 - t1249 * t805 + t1253 * t831, -pkin(7) * t930 - t1249 * t826 + t1253 * t837, -pkin(7) * t911 - t1249 * t757 + t1253 * t801, -pkin(7) * t787 - t1249 * t724 + t1253 * t727, -t1249 * t849 + t1253 * t922, -t1249 * t778 + t1253 * t850, -t1249 * t843 + t1253 * t908, -t1249 * t848 + t1253 * t921, -t1249 * t844 + t1253 * t909, -t1249 * t910 + t1253 * t982, -pkin(7) * t769 - t1249 * t653 + t1253 * t674, -pkin(7) * t779 - t1249 * t660 + t1253 * t681, -pkin(7) * t735 - t1249 * t623 + t1253 * t640, -pkin(7) * t644 - t1249 * t595 + t1253 * t600, -t1249 * t752 + t1253 * t836, -t1249 * t713 + t1253 * t756, -t1249 * t720 + t1253 * t774, -t1249 * t751 + t1253 * t835, -t1249 * t721 + t1253 * t775, -t1249 * t771 + t1253 * t842, -pkin(7) * t672 - t1249 * t589 + t1253 * t601, -pkin(7) * t676 - t1249 * t592 + t1253 * t602, -pkin(7) * t666 - t1249 * t578 + t1253 * t594, -pkin(7) * t590 - t1249 * t563 + t1253 * t570, -t1249 * t652 + t1253 * t684, -t1249 * t619 + t1253 * t646, -t1249 * t641 + t1253 * t678, -t1249 * t651 + t1253 * t683, -t1249 * t642 + t1253 * t679, -t1249 * t682 + t1253 * t734, -pkin(7) * t608 - t1249 * t564 + t1253 * t572, -pkin(7) * t616 - t1249 * t565 + t1253 * t575, -pkin(7) * t597 - t1249 * t559 + t1253 * t562, -pkin(7) * t560 - t1249 * t555 + t1253 * t556; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1223, 0, t1224, 0, t1208, t1340, t1189, pkin(7) * t1189, t1153 * t1253 + t1249 * t1171, t1114 * t1253 + t1249 * t1125, t1119 * t1253 + t1249 * t1167, t1152 * t1253 + t1249 * t1170, t1120 * t1253 + t1249 * t1168, t1249 * t1184 - t1253 * t1291, pkin(7) * t1079 + t1019 * t1253 + t1249 * t1025, pkin(7) * t1068 + t1014 * t1253 + t1249 * t1020, pkin(7) * t1052 + t1249 * t979 + t1253 * t981, pkin(7) * t1001 + t1002 * t1253 + t1249 * t980, t1029 * t1253 + t1249 * t1096, t1249 * t1050 + t1253 * t973, t1249 * t1055 + t1253 * t988, t1028 * t1253 + t1249 * t1095, t1249 * t1056 + t1253 * t989, t1057 * t1253 + t1249 * t1115, pkin(7) * t920 + t1249 * t831 + t1253 * t805, pkin(7) * t931 + t1249 * t837 + t1253 * t826, pkin(7) * t912 + t1249 * t801 + t1253 * t757, pkin(7) * t788 + t1249 * t727 + t1253 * t724, t1249 * t922 + t1253 * t849, t1249 * t850 + t1253 * t778, t1249 * t908 + t1253 * t843, t1249 * t921 + t1253 * t848, t1249 * t909 + t1253 * t844, t1249 * t982 + t1253 * t910, pkin(7) * t770 + t1249 * t674 + t1253 * t653, pkin(7) * t780 + t1249 * t681 + t1253 * t660, pkin(7) * t736 + t1249 * t640 + t1253 * t623, pkin(7) * t645 + t1249 * t600 + t1253 * t595, t1249 * t836 + t1253 * t752, t1249 * t756 + t1253 * t713, t1249 * t774 + t1253 * t720, t1249 * t835 + t1253 * t751, t1249 * t775 + t1253 * t721, t1249 * t842 + t1253 * t771, pkin(7) * t673 + t1249 * t601 + t1253 * t589, pkin(7) * t677 + t1249 * t602 + t1253 * t592, pkin(7) * t667 + t1249 * t594 + t1253 * t578, pkin(7) * t591 + t1249 * t570 + t1253 * t563, t1249 * t684 + t1253 * t652, t1249 * t646 + t1253 * t619, t1249 * t678 + t1253 * t641, t1249 * t683 + t1253 * t651, t1249 * t679 + t1253 * t642, t1249 * t734 + t1253 * t682, pkin(7) * t609 + t1249 * t572 + t1253 * t564, pkin(7) * t617 + t1249 * t575 + t1253 * t565, pkin(7) * t598 + t1249 * t562 + t1253 * t559, pkin(7) * t561 + t1249 * t556 + t1253 * t555; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1227, t1228, 0, 0, t1207 * t1374 + t1306, t1245 * t1212 + t1242 * t1297, t1245 * t1178 + t1242 * t1293, t1193 - t1306, t1245 * t1179 + t1242 * t1294, t1245 * t1342, pkin(1) * t1121 - t1245 * t1154 + t1242 * t1337, pkin(1) * t1117 - t1245 * t1155 + t1242 * t1338, pkin(1) * t1113 + t1242 * t1266, pkin(1) * t1064 + t1099 * t1413, t1245 * t1131 + t1242 * t1283, t1245 * t1074 + t1242 * t1304, t1245 * t1104 + t1242 * t1300, t1245 * t1129 + t1242 * t1284, t1245 * t1105 + t1242 * t1299, t1138 * t1245 + t1139 * t1374 + t1193, pkin(1) * t977 + t1242 * t1268 + t1245 * t984, pkin(1) * t987 + t1245 * t1003 + t1242 * t1267, pkin(1) * t970 + t1242 * t1262 + t1245 * t890, pkin(1) * t839 + t1242 * t1260 + t1245 * t914, t1242 * t1289 + t1245 * t950, t1242 * t1309 + t1245 * t860, t1242 * t1311 + t1245 * t957, t1242 * t1290 + t1245 * t949, t1242 * t1313 + t1245 * t958, t1245 * t1004 + t1242 * t1305, pkin(1) * t833 + t1242 * t1270 + t1245 * t772, pkin(1) * t841 + t1242 * t1269 + t1245 * t781, pkin(1) * t777 + t1242 * t1271 + t1245 * t685, pkin(1) * t669 + t1242 * t1272 + t1245 * t663, t1242 * t1317 + t1245 * t855, t1242 * t1321 + t1245 * t803, t1242 * t1320 + t1245 * t810, t1242 * t1318 + t1245 * t854, t1242 * t1319 + t1245 * t811, t1242 * t1316 + t1245 * t866, pkin(1) * t712 + t1242 * t1274 + t1245 * t628, pkin(1) * t715 + t1242 * t1273 + t1245 * t629, pkin(1) * t709 + t1242 * t1275 + t1245 * t625, pkin(1) * t604 + t1242 * t1276 + t1245 * t583, t1242 * t1326 + t1245 * t717, t1242 * t1332 + t1245 * t664, t1242 * t1329 + t1245 * t703, t1242 * t1327 + t1245 * t716, t1242 * t1328 + t1245 * t704, t1242 * t1325 + t1245 * t767, pkin(1) * t631 + t1242 * t1278 + t1245 * t577, pkin(1) * t637 + t1242 * t1277 + t1245 * t580, pkin(1) * t615 + t1242 * t1279 + t1245 * t573, pkin(1) * t569 + t1242 * t1280 + t1245 * t557;];
tauB_reg  = t1;
