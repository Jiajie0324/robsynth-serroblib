% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRPRPR9
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRPRPR9_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 10:19
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRPRPR9_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR9_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR9_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRPRPR9_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR9_jacobiaD_rot_sym_varpar: pkin has to be [12x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:18:59
	% EndTime: 2019-10-10 10:18:59
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:18:59
	% EndTime: 2019-10-10 10:18:59
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:18:59
	% EndTime: 2019-10-10 10:18:59
	% DurationCPUTime: 0.40s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:18:59
	% EndTime: 2019-10-10 10:19:00
	% DurationCPUTime: 0.82s
	% Computational Cost: add. (1295->85), mult. (3755->195), div. (644->14), fcn. (4884->11), ass. (0->88)
	t141 = sin(qJ(2));
	t143 = cos(qJ(2));
	t142 = sin(qJ(1));
	t181 = cos(pkin(6));
	t159 = t142 * t181;
	t189 = cos(qJ(1));
	t151 = -t189 * t141 - t143 * t159;
	t156 = t181 * t189;
	t155 = t143 * t156;
	t173 = t142 * t141;
	t123 = -t155 + t173;
	t139 = sin(pkin(6));
	t174 = t139 * t143;
	t117 = atan2(-t123, -t174);
	t115 = sin(t117);
	t116 = cos(t117);
	t97 = -t115 * t123 - t116 * t174;
	t95 = 0.1e1 / t97 ^ 2;
	t182 = t151 * t95;
	t121 = t123 ^ 2;
	t134 = 0.1e1 / t139 ^ 2;
	t136 = 0.1e1 / t143 ^ 2;
	t120 = t121 * t134 * t136 + 0.1e1;
	t118 = 0.1e1 / t120;
	t133 = 0.1e1 / t139;
	t135 = 0.1e1 / t143;
	t165 = t123 * t133 * t135;
	t190 = (t116 * t165 - t115) * t118 + t115;
	t94 = 0.1e1 / t97;
	t157 = t141 * t159;
	t163 = t189 * t143;
	t127 = t163 - t157;
	t138 = sin(pkin(11));
	t140 = cos(pkin(11));
	t175 = t139 * t142;
	t114 = t127 * t140 + t138 * t175;
	t108 = 0.1e1 / t114;
	t109 = 0.1e1 / t114 ^ 2;
	t103 = -qJD(1) * t155 - qJD(2) * t163 + (qJD(2) * t181 + qJD(1)) * t173;
	t122 = t151 ^ 2;
	t150 = -t141 * t156 - t142 * t143;
	t105 = -t151 * qJD(1) - t150 * qJD(2);
	t172 = qJD(2) * t141;
	t161 = t136 * t172;
	t152 = t105 * t135 + t123 * t161;
	t178 = t118 * t133;
	t88 = t152 * t178;
	t84 = (-t123 * t88 + t139 * t172) * t116 + (t88 * t174 - t105) * t115;
	t96 = t94 * t95;
	t187 = t84 * t96;
	t92 = t122 * t95 + 0.1e1;
	t188 = (t103 * t182 - t122 * t187) / t92 ^ 2;
	t113 = t127 * t138 - t140 * t175;
	t107 = t113 ^ 2;
	t100 = t107 * t109 + 0.1e1;
	t104 = t150 * qJD(1) + t151 * qJD(2);
	t160 = t189 * qJD(1);
	t158 = t139 * t160;
	t101 = t104 * t138 - t140 * t158;
	t179 = t109 * t113;
	t102 = t104 * t140 + t138 * t158;
	t180 = t102 * t108 * t109;
	t186 = (t101 * t179 - t107 * t180) / t100 ^ 2;
	t185 = t103 * t95;
	t137 = t135 * t136;
	t184 = 0.1e1 / t120 ^ 2 * (t105 * t123 * t136 + t121 * t137 * t172) * t134;
	t177 = t136 * t141;
	t153 = t123 * t177 - t135 * t150;
	t89 = t153 * t178;
	t183 = t123 * t89;
	t176 = t138 * t108;
	t171 = 0.2e1 * t188;
	t170 = 0.2e1 * t186;
	t169 = -0.2e1 * t184;
	t168 = t115 * t182;
	t167 = t116 * t182;
	t166 = t113 * t180;
	t164 = t139 * t189;
	t162 = qJD(1) * t175;
	t112 = t138 * t164 + t140 * t150;
	t111 = t138 * t150 - t140 * t164;
	t106 = -qJD(1) * t157 - t142 * t172 + (qJD(2) * t156 + t160) * t143;
	t98 = 0.1e1 / t100;
	t90 = 0.1e1 / t92;
	t87 = t190 * t151;
	t85 = (t139 * t141 - t183) * t116 + (t89 * t174 + t150) * t115;
	t83 = (t153 * t169 + (t105 * t177 + t106 * t135 + (-t150 * t177 + (0.2e1 * t137 * t141 ^ 2 + t135) * t123) * qJD(2)) * t118) * t133;
	t1 = [(-t151 * t135 * t169 + (-t103 * t135 - t151 * t161) * t118) * t133, t83, 0, 0, 0, 0; -0.2e1 * t188 * t87 * t182 + t123 * t94 * t171 + (-t105 * t94 + (t103 * t87 + t123 * t84) * t95 - (0.2e1 * t187 * t87 + (t118 * t88 * t165 + t169) * t168 + (0.2e1 * t165 * t184 - t88 + (-t152 * t133 + t88) * t118) * t167 - t190 * t185) * t151) * t90, (-t127 * t94 - t85 * t182) * t171 + (t85 * t185 + t104 * t94 + (-0.2e1 * t151 * t85 * t96 - t127 * t95) * t84 + (-t105 * t89 - t123 * t83 + t150 * t88 + (t88 * t89 + qJD(2)) * t174) * t167 + (t88 * t183 - t106 + (t143 * t83 + (-qJD(2) * t89 - t88) * t141) * t139) * t168) * t90, 0, 0, 0, 0; (-t108 * t111 + t112 * t179) * t170 + ((-t106 * t138 + t140 * t162) * t108 + 0.2e1 * t112 * t166 + (-t111 * t102 - (-t106 * t140 - t138 * t162) * t113 - t112 * t101) * t109) * t98, (-t140 * t179 + t176) * t98 * t103 - (-0.2e1 * t140 * t98 * t166 + t170 * t176 + (t102 * t138 * t98 + (t101 * t98 - 0.2e1 * t113 * t186) * t140) * t109) * t151, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:18:59
	% EndTime: 2019-10-10 10:19:00
	% DurationCPUTime: 1.07s
	% Computational Cost: add. (1788->92), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->92)
	t178 = sin(qJ(2));
	t179 = sin(qJ(1));
	t231 = cos(pkin(6));
	t201 = t179 * t231;
	t199 = t178 * t201;
	t180 = cos(qJ(2));
	t181 = cos(qJ(1));
	t215 = t181 * t180;
	t162 = -t199 + t215;
	t173 = pkin(11) + qJ(4);
	t169 = sin(t173);
	t170 = cos(t173);
	t177 = sin(pkin(6));
	t219 = t177 * t179;
	t191 = -t162 * t169 + t170 * t219;
	t233 = t191 * qJD(4);
	t200 = t181 * t231;
	t198 = t180 * t200;
	t216 = t179 * t178;
	t158 = -t198 + t216;
	t218 = t177 * t180;
	t152 = atan2(-t158, -t218);
	t150 = sin(t152);
	t151 = cos(t152);
	t156 = t158 ^ 2;
	t172 = 0.1e1 / t177 ^ 2;
	t175 = 0.1e1 / t180 ^ 2;
	t155 = t156 * t172 * t175 + 0.1e1;
	t153 = 0.1e1 / t155;
	t171 = 0.1e1 / t177;
	t174 = 0.1e1 / t180;
	t205 = t158 * t171 * t174;
	t232 = (t151 * t205 - t150) * t153 + t150;
	t134 = -t150 * t158 - t151 * t218;
	t131 = 0.1e1 / t134;
	t149 = t162 * t170 + t169 * t219;
	t143 = 0.1e1 / t149;
	t132 = 0.1e1 / t134 ^ 2;
	t144 = 0.1e1 / t149 ^ 2;
	t188 = -t178 * t200 - t179 * t180;
	t189 = -t181 * t178 - t180 * t201;
	t140 = -t189 * qJD(1) - t188 * qJD(2);
	t213 = qJD(2) * t178;
	t202 = t175 * t213;
	t190 = t140 * t174 + t158 * t202;
	t221 = t153 * t171;
	t123 = t190 * t221;
	t194 = t150 * t218 - t151 * t158;
	t206 = t151 * t177 * t178;
	t119 = qJD(2) * t206 + t194 * t123 - t150 * t140;
	t230 = t119 * t131 * t132;
	t220 = t175 * t178;
	t193 = t158 * t220 - t174 * t188;
	t124 = t193 * t221;
	t120 = t194 * t124 + t150 * t188 + t206;
	t229 = t120 * t189;
	t139 = t188 * qJD(1) + t189 * qJD(2);
	t214 = qJD(1) * t177;
	t203 = t181 * t214;
	t128 = t149 * qJD(4) + t139 * t169 - t170 * t203;
	t142 = t191 ^ 2;
	t137 = t142 * t144 + 0.1e1;
	t224 = t144 * t191;
	t129 = t139 * t170 + t169 * t203 + t233;
	t227 = t129 * t143 * t144;
	t228 = (-t128 * t224 - t142 * t227) / t137 ^ 2;
	t176 = t174 * t175;
	t226 = (t140 * t158 * t175 + t156 * t176 * t213) * t172 / t155 ^ 2;
	t197 = qJD(2) * t231 + qJD(1);
	t212 = qJD(2) * t180;
	t138 = -qJD(1) * t198 - t181 * t212 + t197 * t216;
	t225 = t138 * t132;
	t223 = t150 * t189;
	t222 = t151 * t189;
	t217 = t177 * t181;
	t157 = t189 ^ 2;
	t127 = t157 * t132 + 0.1e1;
	t211 = 0.2e1 * (-t157 * t230 + t189 * t225) / t127 ^ 2;
	t210 = 0.2e1 * t230;
	t209 = 0.2e1 * t228;
	t208 = -0.2e1 * t226;
	t207 = t191 * t227;
	t204 = t179 * t214;
	t195 = t169 * t143 + t170 * t224;
	t192 = -t169 * t188 + t170 * t217;
	t147 = t169 * t217 + t170 * t188;
	t141 = -qJD(1) * t199 - t179 * t213 + t197 * t215;
	t135 = 0.1e1 / t137;
	t125 = 0.1e1 / t127;
	t122 = t232 * t189;
	t118 = (t193 * t208 + (t140 * t220 + t141 * t174 + (-t188 * t220 + (0.2e1 * t176 * t178 ^ 2 + t174) * t158) * qJD(2)) * t153) * t171;
	t1 = [(-t189 * t174 * t208 + (-t138 * t174 - t189 * t202) * t153) * t171, t118, 0, 0, 0, 0; t158 * t131 * t211 + (-t140 * t131 + (t119 * t158 + t122 * t138) * t132) * t125 - ((t122 * t210 - t232 * t225) * t125 + (t122 * t211 + ((t123 * t153 * t205 + t208) * t223 + (0.2e1 * t205 * t226 - t123 + (-t190 * t171 + t123) * t153) * t222) * t125) * t132) * t189, (-t131 * t162 - t132 * t229) * t211 + (-t210 * t229 + t139 * t131 + (-t162 * t119 + t120 * t138 + (t177 * t212 - t118 * t158 - t124 * t140 + (t124 * t218 + t188) * t123) * t222 + (t123 * t124 * t158 - t141 + (t118 * t180 + (-qJD(2) * t124 - t123) * t178) * t177) * t223) * t132) * t125, 0, 0, 0, 0; (t143 * t192 - t147 * t224) * t209 + ((t147 * qJD(4) - t141 * t169 + t170 * t204) * t143 - 0.2e1 * t147 * t207 + (t192 * t129 + (t192 * qJD(4) - t141 * t170 - t169 * t204) * t191 - t147 * t128) * t144) * t135, -t195 * t189 * t209 + (t195 * t138 - ((-qJD(4) * t143 + 0.2e1 * t207) * t170 + (t128 * t170 + (t129 + t233) * t169) * t144) * t189) * t135, 0, -0.2e1 * t228 - 0.2e1 * (t128 * t144 * t135 - (-t135 * t227 - t144 * t228) * t191) * t191, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:18:59
	% EndTime: 2019-10-10 10:19:01
	% DurationCPUTime: 1.98s
	% Computational Cost: add. (7870->139), mult. (12381->281), div. (702->12), fcn. (15714->13), ass. (0->122)
	t235 = cos(pkin(6));
	t236 = sin(qJ(2));
	t302 = sin(qJ(1));
	t266 = t302 * t236;
	t256 = t235 * t266;
	t260 = t302 * qJD(2);
	t237 = cos(qJ(2));
	t238 = cos(qJ(1));
	t280 = t238 * t237;
	t233 = sin(pkin(6));
	t283 = t233 * t238;
	t307 = -qJD(1) * t256 - t236 * t260 + (qJD(2) * t235 + qJD(1)) * t280 - qJD(4) * t283;
	t218 = -t256 + t280;
	t231 = pkin(11) + qJ(4);
	t229 = sin(t231);
	t230 = cos(t231);
	t267 = t233 * t302;
	t209 = t218 * t230 + t229 * t267;
	t232 = sin(pkin(12));
	t234 = cos(pkin(12));
	t265 = t302 * t237;
	t281 = t238 * t236;
	t247 = -t235 * t265 - t281;
	t287 = t247 * t234;
	t187 = t209 * t232 + t287;
	t249 = -t235 * t281 - t265;
	t196 = qJD(1) * t249 + qJD(2) * t247;
	t248 = -t218 * t229 + t230 * t267;
	t264 = qJD(1) * t283;
	t175 = qJD(4) * t248 + t196 * t230 + t229 * t264;
	t261 = t302 * qJD(1);
	t268 = t235 * t280;
	t278 = qJD(2) * t237;
	t195 = -qJD(1) * t268 - t238 * t278 + (t235 * t260 + t261) * t236;
	t170 = t175 * t234 - t195 * t232;
	t288 = t247 * t232;
	t188 = t209 * t234 - t288;
	t180 = 0.1e1 / t188;
	t181 = 0.1e1 / t188 ^ 2;
	t297 = t170 * t180 * t181;
	t259 = 0.2e1 * t187 * t297;
	t203 = -t229 * t249 + t230 * t283;
	t285 = t233 * t236;
	t213 = t229 * t285 - t235 * t230;
	t192 = atan2(-t203, t213);
	t183 = sin(t192);
	t184 = cos(t192);
	t168 = -t183 * t203 + t184 * t213;
	t166 = 0.1e1 / t168 ^ 2;
	t202 = t248 ^ 2;
	t164 = t202 * t166 + 0.1e1;
	t174 = qJD(4) * t209 + t196 * t229 - t230 * t264;
	t296 = t174 * t166;
	t201 = t203 ^ 2;
	t211 = 0.1e1 / t213 ^ 2;
	t191 = t201 * t211 + 0.1e1;
	t189 = 0.1e1 / t191;
	t255 = t233 * t261;
	t277 = qJD(4) * t230;
	t176 = t307 * t229 - t230 * t255 - t249 * t277;
	t214 = t235 * t229 + t230 * t285;
	t263 = t233 * t278;
	t199 = qJD(4) * t214 + t229 * t263;
	t210 = 0.1e1 / t213;
	t290 = t203 * t211;
	t253 = -t176 * t210 + t199 * t290;
	t158 = t253 * t189;
	t254 = -t183 * t213 - t184 * t203;
	t153 = t158 * t254 - t183 * t176 + t184 * t199;
	t165 = 0.1e1 / t168;
	t167 = t165 * t166;
	t300 = t153 * t167;
	t276 = 0.2e1 * (-t202 * t300 - t248 * t296) / t164 ^ 2;
	t306 = t199 * t211;
	t215 = -t266 + t268;
	t284 = t233 * t237;
	t250 = -t210 * t215 + t284 * t290;
	t305 = t229 * t250;
	t177 = t229 * (qJD(4) * t249 + t255) + t307 * t230;
	t304 = -0.2e1 * t203;
	t303 = -0.2e1 * t248;
	t292 = t210 * t306;
	t299 = (t176 * t290 - t201 * t292) / t191 ^ 2;
	t298 = t166 * t248;
	t295 = t181 * t187;
	t294 = t183 * t248;
	t293 = t184 * t248;
	t291 = t203 * t210;
	t289 = t247 * t229;
	t286 = t232 * t180;
	t282 = t234 * t187;
	t279 = qJD(2) * t236;
	t169 = t175 * t232 + t195 * t234;
	t179 = t187 ^ 2;
	t173 = t179 * t181 + 0.1e1;
	t275 = 0.2e1 * (t169 * t295 - t179 * t297) / t173 ^ 2;
	t274 = -0.2e1 * t299;
	t273 = t167 * t303;
	t272 = t210 * t299;
	t271 = t166 * t294;
	t270 = t166 * t293;
	t258 = t292 * t304;
	t205 = -t229 * t283 - t230 * t249;
	t252 = -t205 * t210 + t214 * t290;
	t251 = -qJD(4) * t289 + t195 * t230;
	t245 = -t183 + (t184 * t291 + t183) * t189;
	t200 = -qJD(4) * t213 + t230 * t263;
	t197 = qJD(1) * t247 + qJD(2) * t249;
	t194 = t218 * t232 + t230 * t287;
	t193 = -t218 * t234 + t230 * t288;
	t186 = -t205 * t234 + t215 * t232;
	t185 = -t205 * t232 - t215 * t234;
	t171 = 0.1e1 / t173;
	t162 = 0.1e1 / t164;
	t161 = t189 * t305;
	t159 = t252 * t189;
	t157 = t245 * t248;
	t155 = (-t183 * t215 + t184 * t284) * t229 + t254 * t161;
	t154 = t159 * t254 - t183 * t205 + t184 * t214;
	t152 = t252 * t274 + (t214 * t258 - t177 * t210 + (t176 * t214 + t199 * t205 + t200 * t203) * t211) * t189;
	t150 = t274 * t305 + (t250 * t277 + (t258 * t284 - t197 * t210 + (t199 * t215 + (t176 * t237 - t203 * t279) * t233) * t211) * t229) * t189;
	t1 = [t272 * t303 + (-t174 * t210 - t248 * t306) * t189, t150, 0, t152, 0, 0; t203 * t165 * t276 + (-t176 * t165 + (t153 * t203 + t157 * t174) * t166) * t162 - (-t157 * t166 * t276 + (-0.2e1 * t157 * t300 + (-t158 * t189 * t291 + t274) * t271 + (t272 * t304 - t158 + (t158 - t253) * t189) * t270 - t245 * t296) * t162) * t248, (-t155 * t298 - t165 * t289) * t276 + (-t155 * t296 + (t195 * t229 + t247 * t277) * t165 + (t155 * t273 - t166 * t289) * t153 + (-t150 * t203 - t161 * t176 + (-t229 * t279 + t237 * t277) * t233 + (-t161 * t213 - t215 * t229) * t158) * t270 + (-t215 * t277 - t150 * t213 - t161 * t199 - t197 * t229 + (t161 * t203 - t229 * t284) * t158) * t271) * t162, 0, (-t154 * t298 - t165 * t209) * t276 + (t154 * t153 * t273 + t175 * t165 + (-t209 * t153 - t154 * t174 + (-t152 * t203 - t159 * t176 + t200 + (-t159 * t213 - t205) * t158) * t293 + (-t152 * t213 - t159 * t199 - t177 + (t159 * t203 - t214) * t158) * t294) * t166) * t162, 0, 0; (-t180 * t185 + t186 * t295) * t275 + ((-t177 * t232 - t197 * t234) * t180 + t186 * t259 + (-t185 * t170 - (-t177 * t234 + t197 * t232) * t187 - t186 * t169) * t181) * t171, (-t180 * t193 + t194 * t295) * t275 + ((-t196 * t234 + t232 * t251) * t180 + t194 * t259 + (-t193 * t170 - (t196 * t232 + t234 * t251) * t187 - t194 * t169) * t181) * t171, 0, -(-t181 * t282 + t286) * t248 * t275 + (t248 * t234 * t259 - t174 * t286 + (t174 * t282 - (t169 * t234 + t170 * t232) * t248) * t181) * t171, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 10:19:00
	% EndTime: 2019-10-10 10:19:02
	% DurationCPUTime: 2.22s
	% Computational Cost: add. (8849->150), mult. (13478->297), div. (726->12), fcn. (17045->13), ass. (0->128)
	t275 = cos(pkin(6));
	t276 = sin(qJ(2));
	t346 = sin(qJ(1));
	t308 = t346 * t276;
	t298 = t275 * t308;
	t302 = t346 * qJD(2);
	t277 = cos(qJ(2));
	t278 = cos(qJ(1));
	t324 = t278 * t277;
	t274 = sin(pkin(6));
	t326 = t274 * t278;
	t351 = -qJD(1) * t298 - t276 * t302 + (qJD(2) * t275 + qJD(1)) * t324 - qJD(4) * t326;
	t273 = pkin(11) + qJ(4);
	t269 = sin(t273);
	t271 = cos(t273);
	t307 = t346 * t277;
	t325 = t278 * t276;
	t290 = -t275 * t325 - t307;
	t241 = -t269 * t290 + t271 * t326;
	t328 = t274 * t276;
	t252 = t269 * t328 - t275 * t271;
	t230 = atan2(-t241, t252);
	t225 = sin(t230);
	t226 = cos(t230);
	t208 = -t225 * t241 + t226 * t252;
	t206 = 0.1e1 / t208 ^ 2;
	t257 = -t298 + t324;
	t309 = t274 * t346;
	t289 = -t257 * t269 + t271 * t309;
	t240 = t289 ^ 2;
	t202 = t240 * t206 + 0.1e1;
	t288 = -t275 * t307 - t325;
	t234 = qJD(1) * t290 + qJD(2) * t288;
	t247 = t257 * t271 + t269 * t309;
	t306 = qJD(1) * t326;
	t212 = qJD(4) * t247 + t234 * t269 - t271 * t306;
	t339 = t212 * t206;
	t239 = t241 ^ 2;
	t250 = 0.1e1 / t252 ^ 2;
	t229 = t239 * t250 + 0.1e1;
	t227 = 0.1e1 / t229;
	t303 = t346 * qJD(1);
	t297 = t274 * t303;
	t321 = qJD(4) * t271;
	t214 = t351 * t269 - t271 * t297 - t290 * t321;
	t253 = t275 * t269 + t271 * t328;
	t322 = qJD(2) * t277;
	t305 = t274 * t322;
	t237 = qJD(4) * t253 + t269 * t305;
	t249 = 0.1e1 / t252;
	t333 = t241 * t250;
	t294 = -t214 * t249 + t237 * t333;
	t196 = t294 * t227;
	t295 = -t225 * t252 - t226 * t241;
	t191 = t196 * t295 - t225 * t214 + t226 * t237;
	t205 = 0.1e1 / t208;
	t207 = t205 * t206;
	t344 = t191 * t207;
	t319 = 0.2e1 * (-t240 * t344 - t289 * t339) / t202 ^ 2;
	t350 = t237 * t250;
	t310 = t275 * t324;
	t254 = -t308 + t310;
	t327 = t274 * t277;
	t291 = -t249 * t254 + t327 * t333;
	t349 = t269 * t291;
	t215 = t269 * (qJD(4) * t290 + t297) + t351 * t271;
	t272 = pkin(12) + qJ(6);
	t268 = sin(t272);
	t270 = cos(t272);
	t224 = t247 * t270 - t268 * t288;
	t218 = 0.1e1 / t224;
	t219 = 0.1e1 / t224 ^ 2;
	t348 = -0.2e1 * t241;
	t347 = -0.2e1 * t289;
	t213 = qJD(4) * t289 + t234 * t271 + t269 * t306;
	t233 = -qJD(1) * t310 - t278 * t322 + (t275 * t302 + t303) * t276;
	t203 = qJD(6) * t224 + t213 * t268 + t233 * t270;
	t223 = t247 * t268 + t270 * t288;
	t217 = t223 ^ 2;
	t211 = t217 * t219 + 0.1e1;
	t338 = t219 * t223;
	t320 = qJD(6) * t223;
	t204 = t213 * t270 - t233 * t268 - t320;
	t341 = t204 * t218 * t219;
	t343 = (t203 * t338 - t217 * t341) / t211 ^ 2;
	t335 = t249 * t350;
	t342 = (t214 * t333 - t239 * t335) / t229 ^ 2;
	t340 = t206 * t289;
	t337 = t225 * t289;
	t336 = t226 * t289;
	t334 = t241 * t249;
	t332 = t288 * t269;
	t331 = t288 * t271;
	t330 = t268 * t218;
	t329 = t270 * t223;
	t323 = qJD(2) * t276;
	t318 = -0.2e1 * t343;
	t317 = 0.2e1 * t343;
	t316 = -0.2e1 * t342;
	t315 = t207 * t347;
	t314 = t249 * t342;
	t313 = t206 * t337;
	t312 = t206 * t336;
	t311 = t223 * t341;
	t301 = 0.2e1 * t311;
	t300 = t335 * t348;
	t243 = -t269 * t326 - t271 * t290;
	t296 = -qJD(6) * t331 + t234;
	t222 = -t243 * t270 + t254 * t268;
	t221 = -t243 * t268 - t254 * t270;
	t293 = t329 * t219 - t330;
	t292 = -t243 * t249 + t253 * t333;
	t286 = -t225 + (t226 * t334 + t225) * t227;
	t285 = -qJD(4) * t332 + qJD(6) * t257 + t233 * t271;
	t238 = -qJD(4) * t252 + t271 * t305;
	t235 = qJD(1) * t288 + qJD(2) * t290;
	t232 = t257 * t268 + t270 * t331;
	t231 = -t257 * t270 + t268 * t331;
	t209 = 0.1e1 / t211;
	t200 = 0.1e1 / t202;
	t199 = t227 * t349;
	t197 = t292 * t227;
	t195 = t286 * t289;
	t193 = (-t225 * t254 + t226 * t327) * t269 + t295 * t199;
	t192 = t197 * t295 - t225 * t243 + t226 * t253;
	t190 = t292 * t316 + (t253 * t300 - t215 * t249 + (t214 * t253 + t237 * t243 + t238 * t241) * t250) * t227;
	t188 = t316 * t349 + (t291 * t321 + (t300 * t327 - t235 * t249 + (t237 * t254 + (t214 * t277 - t241 * t323) * t274) * t250) * t269) * t227;
	t1 = [t314 * t347 + (-t212 * t249 - t289 * t350) * t227, t188, 0, t190, 0, 0; t241 * t205 * t319 + (-t214 * t205 + (t191 * t241 + t195 * t212) * t206) * t200 - (-t195 * t206 * t319 + (-0.2e1 * t195 * t344 + (-t196 * t227 * t334 + t316) * t313 + (t314 * t348 - t196 + (t196 - t294) * t227) * t312 - t286 * t339) * t200) * t289, (-t193 * t340 - t205 * t332) * t319 + (-t193 * t339 + (t233 * t269 + t288 * t321) * t205 + (t193 * t315 - t206 * t332) * t191 + (-t188 * t241 - t199 * t214 + (-t269 * t323 + t277 * t321) * t274 + (-t199 * t252 - t254 * t269) * t196) * t312 + (-t254 * t321 - t188 * t252 - t199 * t237 - t235 * t269 + (t199 * t241 - t269 * t327) * t196) * t313) * t200, 0, (-t192 * t340 - t205 * t247) * t319 + (t192 * t191 * t315 + t213 * t205 + (-t247 * t191 - t192 * t212 + (-t190 * t241 - t197 * t214 + t238 + (-t197 * t252 - t243) * t196) * t336 + (-t190 * t252 - t197 * t237 - t215 + (t197 * t241 - t253) * t196) * t337) * t206) * t200, 0, 0; (-t218 * t221 + t222 * t338) * t317 + ((qJD(6) * t222 - t215 * t268 - t235 * t270) * t218 + t222 * t301 + (-t221 * t204 - (-qJD(6) * t221 - t215 * t270 + t235 * t268) * t223 - t222 * t203) * t219) * t209, (-t218 * t231 + t232 * t338) * t317 + (t232 * t301 - t296 * t218 * t270 + t285 * t330 + (-t223 * t268 * t296 - t232 * t203 - t231 * t204 - t285 * t329) * t219) * t209, 0, -t293 * t289 * t318 + (t293 * t212 - ((-qJD(6) * t218 - 0.2e1 * t311) * t270 + (t203 * t270 + (t204 - t320) * t268) * t219) * t289) * t209, 0, t318 + 0.2e1 * (t203 * t219 * t209 + (-t209 * t341 - t219 * t343) * t223) * t223;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end