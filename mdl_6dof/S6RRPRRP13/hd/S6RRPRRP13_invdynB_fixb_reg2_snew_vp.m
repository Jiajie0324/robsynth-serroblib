% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 19:15
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP13_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP13_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP13_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP13_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:14:18
% EndTime: 2019-05-06 19:15:02
% DurationCPUTime: 28.54s
% Computational Cost: add. (133222->794), mult. (299799->1155), div. (0->0), fcn. (222272->10), ass. (0->602)
t927 = cos(qJ(2));
t1038 = qJD(1) * t927;
t919 = sin(pkin(6));
t923 = sin(qJ(2));
t880 = (qJD(2) * t1038 + qJDD(1) * t923) * t919;
t1024 = t919 * t1038;
t920 = cos(pkin(6));
t911 = t920 * qJD(1) + qJD(2);
t890 = t911 * t1024;
t1104 = t890 + t880;
t929 = qJD(1) ^ 2;
t1046 = t927 * t929;
t917 = t919 ^ 2;
t1060 = t917 * t923;
t1013 = t1046 * t1060;
t910 = qJDD(1) * t920 + qJDD(2);
t879 = t910 - t1013;
t1064 = t879 * t923;
t907 = t911 ^ 2;
t1059 = t917 * t929;
t1101 = t923 ^ 2;
t908 = t1101 * t1059;
t862 = -t908 - t907;
t971 = t862 * t927 - t1064;
t779 = -t1104 * t919 + t920 * t971;
t1063 = t879 * t927;
t823 = t862 * t923 + t1063;
t924 = sin(qJ(1));
t928 = cos(qJ(1));
t723 = t779 * t928 - t823 * t924;
t1137 = pkin(7) * t723;
t724 = t779 * t924 + t823 * t928;
t1136 = pkin(7) * t724;
t1039 = qJD(1) * t923;
t1026 = t911 * t1039;
t1035 = qJDD(1) * t927;
t1025 = t919 * t1039;
t904 = qJD(2) * t1025;
t853 = -t904 + (-t1026 + t1035) * t919;
t878 = t910 + t1013;
t1065 = t878 * t927;
t918 = t927 ^ 2;
t909 = t918 * t1059;
t885 = -t909 - t907;
t969 = t885 * t923 + t1065;
t793 = t919 * t853 + t920 * t969;
t1066 = t878 * t923;
t836 = -t885 * t927 + t1066;
t734 = t793 * t928 - t836 * t924;
t1135 = pkin(7) * t734;
t737 = t793 * t924 + t836 * t928;
t1134 = pkin(7) * t737;
t787 = -t920 * t853 + t919 * t969;
t1133 = pkin(8) * (t787 * t919 + t793 * t920);
t1054 = t920 * t1104;
t777 = t919 * t971 + t1054;
t1132 = pkin(8) * (t777 * t919 + t779 * t920);
t1131 = pkin(1) * t777;
t1130 = pkin(1) * t779;
t1129 = pkin(1) * t787;
t1128 = pkin(1) * t793;
t1004 = qJD(4) + t1025;
t922 = sin(qJ(4));
t926 = cos(qJ(4));
t869 = -t1024 * t922 + t911 * t926;
t921 = sin(qJ(5));
t925 = cos(qJ(5));
t842 = -t1004 * t925 + t869 * t921;
t844 = t1004 * t921 + t925 * t869;
t796 = t844 * t842;
t881 = t1035 * t919 - t904;
t1014 = t926 * t881 + t922 * t910;
t814 = -t869 * qJD(4) - t1014;
t813 = qJDD(5) - t814;
t1017 = -t813 + t796;
t1075 = t1017 * t921;
t1074 = t1017 * t925;
t852 = -t904 + (t1026 + t1035) * t919;
t884 = t909 - t907;
t968 = t884 * t923 + t1063;
t791 = -t919 * t852 + t920 * t968;
t834 = -t884 * t927 + t1064;
t1127 = t791 * t924 + t834 * t928;
t1126 = t791 * t928 - t834 * t924;
t851 = -t890 + t880;
t883 = -t908 + t907;
t970 = t883 * t927 + t1066;
t789 = -t919 * t851 + t920 * t970;
t831 = -t883 * t923 + t1065;
t1125 = t789 * t924 - t831 * t928;
t1124 = t789 * t928 + t831 * t924;
t1100 = -pkin(2) - pkin(9);
t1121 = pkin(8) * t823;
t1120 = pkin(8) * t836;
t1109 = t1017 * pkin(5);
t867 = t1024 * t926 + t911 * t922;
t829 = t869 * t867;
t872 = qJDD(4) + t880;
t1105 = -t829 + t872;
t1111 = t1105 * t922;
t1110 = t1105 * t926;
t965 = t1004 ^ 2;
t1108 = qJ(3) * t1104;
t1085 = g(3) * t927;
t1098 = pkin(2) * t927;
t1007 = -qJ(3) * t923 - t1098;
t1040 = qJD(1) * t919;
t876 = t1007 * t1040;
t1107 = t919 * (t1039 * t876 + t1085);
t863 = qJD(5) + t867;
t811 = t863 * t842;
t967 = -t922 * t881 + t926 * t910;
t815 = -t867 * qJD(4) + t967;
t939 = qJD(5) * t842 - t815 * t925 - t872 * t921;
t1106 = -t811 - t939;
t854 = t1004 * t867;
t783 = t815 - t854;
t1103 = t920 * t852 + t919 * t968;
t1102 = t920 * t851 + t919 * t970;
t1016 = t921 * t815 - t925 * t872;
t699 = (qJD(5) - t863) * t844 + t1016;
t840 = t842 ^ 2;
t841 = t844 ^ 2;
t861 = t863 ^ 2;
t865 = t867 ^ 2;
t866 = t869 ^ 2;
t1099 = pkin(2) * t923;
t760 = -t861 - t840;
t669 = t760 * t921 - t1074;
t1097 = pkin(4) * t669;
t732 = t796 + t813;
t1077 = t732 * t921;
t786 = -t841 - t861;
t675 = t786 * t925 - t1077;
t1096 = pkin(4) * t675;
t1095 = pkin(4) * t922;
t703 = -t811 + t939;
t634 = -t699 * t925 - t703 * t921;
t749 = -t840 - t841;
t601 = t634 * t926 + t749 * t922;
t600 = t634 * t922 - t749 * t926;
t632 = -t699 * t921 + t703 * t925;
t992 = -t600 * t927 + t632 * t923;
t522 = -t919 * t601 + t920 * t992;
t556 = t600 * t923 + t632 * t927;
t487 = t522 * t928 + t556 * t924;
t1094 = pkin(7) * t487;
t670 = t760 * t925 + t1075;
t698 = (qJD(5) + t863) * t844 + t1016;
t616 = t670 * t926 + t698 * t922;
t615 = t670 * t922 - t698 * t926;
t990 = -t615 * t927 + t669 * t923;
t538 = -t919 * t616 + t920 * t990;
t574 = t615 * t923 + t669 * t927;
t499 = t538 * t928 + t574 * t924;
t1093 = pkin(7) * t499;
t1076 = t732 * t925;
t676 = -t786 * t921 - t1076;
t625 = t1106 * t922 + t676 * t926;
t624 = -t1106 * t926 + t676 * t922;
t989 = -t624 * t927 + t675 * t923;
t541 = -t919 * t625 + t920 * t989;
t578 = t624 * t923 + t675 * t927;
t504 = t541 * t928 + t578 * t924;
t1092 = pkin(7) * t504;
t887 = -t908 - t909;
t972 = -t851 * t927 + t852 * t923;
t769 = -t919 * t887 + t920 * t972;
t799 = t851 * t923 + t852 * t927;
t709 = t769 * t928 + t799 * t924;
t1091 = pkin(7) * t709;
t1090 = pkin(8) * t919;
t1089 = pkin(8) * t920;
t1088 = pkin(10) * t632;
t1087 = pkin(10) * t669;
t1086 = pkin(10) * t675;
t1084 = t881 * pkin(2);
t1083 = t910 * pkin(2);
t1082 = t920 * g(3);
t1037 = qJD(6) * t844;
t1012 = t911 * t1025;
t888 = pkin(2) * t1012;
t1018 = -t888 + t1082;
t1061 = t911 * t927;
t902 = g(1) * t924 - t928 * g(2);
t874 = qJDD(1) * pkin(1) + t1090 * t929 + t902;
t877 = pkin(3) * t1025 - pkin(9) * t911;
t1023 = qJD(3) * t1039;
t900 = -0.2e1 * t919 * t1023;
t716 = -pkin(3) * t909 - t880 * qJ(3) + t900 + t1100 * t881 + (-t874 + (-qJ(3) * t1061 - t877 * t923) * qJD(1)) * t919 - t1018;
t1067 = t874 * t920;
t903 = g(1) * t928 + g(2) * t924;
t875 = -pkin(1) * t929 + qJDD(1) * t1090 - t903;
t1015 = -t927 * t1067 + t923 * t875;
t1002 = qJDD(3) + t1015;
t934 = t907 * qJ(3) - t1002 + t1083;
t931 = t880 * pkin(3) - t878 * pkin(9) + (t1085 + (-pkin(3) * t1061 + t876 * t923) * qJD(1)) * t919 - t934;
t651 = t926 * t716 + t922 * t931;
t827 = pkin(4) * t867 - pkin(10) * t869;
t623 = -pkin(4) * t965 + t872 * pkin(10) - t867 * t827 + t651;
t822 = t927 * t875 + (-g(3) * t919 + t1067) * t923;
t754 = -t907 * pkin(2) + t910 * qJ(3) + 0.2e1 * qJD(3) * t911 + t876 * t1024 + t822;
t715 = t881 * pkin(3) - pkin(9) * t909 + t911 * t877 + t754;
t956 = t1004 * t869;
t643 = -t783 * pkin(10) + (-t814 + t956) * pkin(4) + t715;
t1042 = -t921 * t623 + t925 * t643;
t1029 = -qJ(6) * t939 - t1042;
t951 = -qJ(6) * t811 - t1029;
t535 = -0.2e1 * t1037 + t951 - t1109;
t1081 = t535 * t921;
t1080 = t535 * t925;
t650 = t716 * t922 - t926 * t931;
t622 = -t872 * pkin(4) - t965 * pkin(10) + t827 * t869 + t650;
t1079 = t622 * t921;
t1078 = t622 * t925;
t809 = t829 + t872;
t1073 = t809 * t922;
t1072 = t809 * t926;
t1071 = t853 * t923;
t1070 = t853 * t927;
t1069 = t863 * t921;
t1068 = t863 * t925;
t1062 = t910 * t919;
t1050 = t922 * t715;
t856 = t919 * t874 + t1082;
t1049 = t923 * t856;
t1048 = t926 * t715;
t1047 = t927 * t856;
t1045 = pkin(1) * t522 + t556 * t1090;
t1044 = pkin(1) * t538 + t574 * t1090;
t1043 = pkin(1) * t541 + t578 * t1090;
t564 = t925 * t623 + t921 * t643;
t1041 = pkin(1) * t769 + t799 * t1090;
t1034 = t1100 * t601;
t1033 = t922 * t796;
t1032 = t926 * t796;
t1031 = t923 * t829;
t1030 = t927 * t829;
t1028 = pkin(4) * t926 + pkin(3);
t1027 = t911 * t1040;
t521 = t920 * t601 + t919 * t992;
t1022 = -pkin(1) * t521 + t556 * t1089;
t537 = t920 * t616 + t919 * t990;
t1021 = -pkin(1) * t537 + t574 * t1089;
t540 = t920 * t625 + t919 * t989;
t1020 = -pkin(1) * t540 + t578 * t1089;
t767 = t920 * t887 + t919 * t972;
t1019 = -pkin(1) * t767 + t799 * t1089;
t514 = -t1042 * t921 + t925 * t564;
t859 = -t902 * t924 - t928 * t903;
t1011 = qJ(3) * t632 + t1100 * t600;
t1010 = qJ(3) * t669 + t1100 * t615;
t1009 = qJ(3) * t675 + t1100 * t624;
t896 = qJDD(1) * t928 - t924 * t929;
t1008 = -pkin(7) * t896 - g(3) * t924;
t1006 = -t1049 - t1121;
t1005 = t1047 - t1120;
t1003 = 0.2e1 * qJD(4) + t1025;
t746 = -qJD(5) * t844 - t1016;
t805 = pkin(5) * t863 - qJ(6) * t844;
t950 = t746 * qJ(6) - 0.2e1 * qJD(6) * t842 - t863 * t805 + t564;
t525 = -qJ(6) * t699 + (-t749 - t840) * pkin(5) + t950;
t838 = 0.2e1 * t1037;
t527 = t838 + (-t703 + t811) * qJ(6) + t1109 + t1029;
t473 = -t525 * t921 + t527 * t925 - t1088;
t587 = -pkin(4) * t632 - pkin(5) * t703;
t462 = pkin(3) * t632 - t922 * t473 - t926 * t587 + t1034;
t964 = pkin(3) * t600 - pkin(4) * t749 + pkin(10) * t634 - qJ(3) * t601;
t463 = t525 * t925 + t527 * t921 + t964;
t1001 = t462 * t927 + t463 * t923;
t515 = -t1097 + t838 - t951 + 0.2e1 * t1109;
t571 = -t746 * pkin(5) - t840 * qJ(6) + t805 * t844 + qJDD(6) + t622;
t552 = -pkin(5) * t698 + qJ(6) * t760 - t571;
t524 = qJ(6) * t1074 - t552 * t921 - t1087;
t961 = pkin(3) * t669 + t1100 * t616;
t465 = -t926 * t515 - t922 * t524 + t961;
t963 = pkin(3) * t615 - pkin(4) * t698 + pkin(10) * t670 - qJ(3) * t616;
t481 = qJ(6) * t1075 + t552 * t925 + t963;
t1000 = t465 * t927 + t481 * t923;
t523 = -t1096 + (-t786 - t840) * pkin(5) + t950;
t561 = -qJ(6) * t786 + t571;
t649 = -pkin(5) * t1106 - qJ(6) * t732;
t526 = t561 * t925 - t649 * t921 - t1086;
t960 = pkin(3) * t675 + t1100 * t625;
t467 = -t926 * t523 - t922 * t526 + t960;
t962 = pkin(3) * t624 - pkin(4) * t1106 + pkin(10) * t676 - qJ(3) * t625;
t482 = t561 * t921 + t649 * t925 + t962;
t999 = t467 * t927 + t482 * t923;
t513 = t1042 * t925 + t564 * t921;
t497 = -t513 - t1088;
t469 = t1028 * t632 - t922 * t497 + t1034;
t474 = t514 + t964;
t998 = t469 * t927 + t474 * t923;
t544 = -pkin(5) * t840 + t950;
t490 = t544 * t925 - t1081;
t475 = t490 * t922 - t571 * t926;
t489 = t544 * t921 + t1080;
t997 = -t475 * t927 + t489 * t923;
t549 = -t1042 - t1097;
t575 = t1079 - t1087;
t478 = -t926 * t549 - t922 * t575 + t961;
t506 = t963 - t1078;
t996 = t478 * t927 + t506 * t923;
t550 = t564 - t1096;
t579 = t1078 - t1086;
t480 = -t926 * t550 - t922 * t579 + t960;
t508 = t962 + t1079;
t995 = t480 * t927 + t508 * t923;
t495 = t514 * t922 - t622 * t926;
t994 = -t495 * t927 + t513 * t923;
t580 = -t926 * t650 + t922 * t651;
t993 = -t580 * t927 + t715 * t923;
t633 = -t1106 * t921 - t698 * t925;
t795 = -t841 + t840;
t607 = -t633 * t922 - t795 * t926;
t635 = t1106 * t925 - t698 * t921;
t991 = t607 * t927 + t635 * t923;
t807 = -t841 + t861;
t684 = -t807 * t921 - t1074;
t626 = -t684 * t922 - t703 * t926;
t687 = t807 * t925 - t1075;
t988 = t626 * t927 + t687 * t923;
t806 = t840 - t861;
t686 = t806 * t925 - t1077;
t627 = -t686 * t922 - t699 * t926;
t685 = t806 * t921 + t1076;
t987 = t627 * t927 + t685 * t923;
t581 = t922 * t650 + t926 * t651;
t692 = t1068 * t842 - t746 * t921;
t657 = -t692 * t922 - t1032;
t694 = t1069 * t842 + t746 * t925;
t986 = t657 * t927 + t694 * t923;
t695 = -t1069 * t844 - t925 * t939;
t658 = -t695 * t922 + t1032;
t693 = t1068 * t844 - t921 * t939;
t985 = t658 * t927 + t693 * t923;
t738 = (-t842 * t925 + t844 * t921) * t863;
t690 = -t738 * t922 + t813 * t926;
t739 = (-t842 * t921 - t844 * t925) * t863;
t984 = t690 * t927 + t739 * t923;
t780 = t1003 * t869 + t1014;
t704 = t780 * t922 - t783 * t926;
t828 = t866 - t865;
t983 = t704 * t927 + t828 * t923;
t784 = t815 + t854;
t937 = t1025 * t869 - t1014;
t705 = -t784 * t926 + t922 * t937;
t804 = -t865 - t866;
t982 = -t705 * t927 + t804 * t923;
t820 = -t965 - t865;
t742 = t820 * t922 + t1110;
t981 = -t742 * t927 + t780 * t923;
t745 = -pkin(2) * t887 + t754;
t933 = t1002 + t1107;
t750 = -t1083 + (-t887 - t907) * qJ(3) + t933;
t980 = t745 * t927 + t750 * t923;
t830 = -t866 - t965;
t752 = t830 * t926 - t1073;
t785 = -t1003 * t867 + t967;
t979 = -t752 * t927 + t785 * t923;
t762 = t934 - t1107;
t978 = t754 * t923 + t762 * t927;
t848 = -t866 + t965;
t756 = -t848 * t926 - t1111;
t977 = t756 * t927 + t784 * t923;
t847 = t865 - t965;
t757 = -t847 * t922 - t1072;
t976 = t757 * t927 + t923 * t937;
t946 = t926 * t956;
t949 = t922 * t854;
t801 = t949 + t946;
t975 = t801 * t927 + t872 * t923;
t821 = t1085 * t919 + t1015;
t974 = -t927 * t821 + t923 * t822;
t751 = t821 * t923 + t822 * t927;
t973 = t1104 * t927 + t1071;
t858 = t902 * t928 - t903 * t924;
t966 = qJD(1) * t911 - t920 * t929;
t772 = -t926 * t814 - t949;
t958 = t772 * t927 - t1031;
t774 = -t922 * t815 - t946;
t957 = t774 * t927 + t1031;
t955 = (-t521 * t919 - t522 * t920) * pkin(8);
t954 = (-t537 * t919 - t538 * t920) * pkin(8);
t953 = (-t540 * t919 - t541 * t920) * pkin(8);
t952 = (-t767 * t919 - t769 * t920) * pkin(8);
t948 = t922 * t956;
t947 = t926 * t854;
t502 = -pkin(5) * t571 + qJ(6) * t544;
t460 = -pkin(10) * t489 - qJ(6) * t1080 - t502 * t921;
t471 = -pkin(4) * t489 - pkin(5) * t535;
t476 = t490 * t926 + t571 * t922;
t433 = pkin(3) * t489 + t1100 * t476 - t922 * t460 - t926 * t471;
t440 = pkin(3) * t475 - pkin(4) * t571 + pkin(10) * t490 - qJ(3) * t476 - qJ(6) * t1081 + t502 * t925;
t459 = t475 * t923 + t489 * t927;
t945 = pkin(8) * t459 + t433 * t927 + t440 * t923;
t496 = t514 * t926 + t622 * t922;
t448 = t1100 * t496 + (pkin(10) * t922 + t1028) * t513;
t455 = pkin(3) * t495 - pkin(4) * t622 + pkin(10) * t514 - qJ(3) * t496;
t470 = t495 * t923 + t513 * t927;
t944 = pkin(8) * t470 + t448 * t927 + t455 * t923;
t519 = pkin(3) * t715 + t1100 * t581;
t530 = pkin(3) * t580 - qJ(3) * t581;
t560 = t580 * t923 + t715 * t927;
t943 = pkin(8) * t560 + t519 * t927 + t530 * t923;
t707 = t784 * t922 + t926 * t937;
t543 = pkin(3) * t804 + t1100 * t707 - t581;
t637 = pkin(3) * t705 - qJ(3) * t707;
t664 = t705 * t923 + t804 * t927;
t942 = pkin(8) * t664 + t543 * t927 + t637 * t923;
t743 = t820 * t926 - t1111;
t586 = pkin(3) * t742 - qJ(3) * t743 - t650;
t596 = pkin(3) * t780 + t1100 * t743 + t1048;
t679 = t742 * t923 + t780 * t927;
t941 = pkin(8) * t679 + t586 * t923 + t596 * t927;
t753 = -t830 * t922 - t1072;
t588 = pkin(3) * t752 - qJ(3) * t753 - t651;
t604 = pkin(3) * t785 + t1100 * t753 - t1050;
t682 = t752 * t923 + t785 * t927;
t940 = pkin(8) * t682 + t588 * t923 + t604 * t927;
t728 = t1084 + (t874 + 0.2e1 * t1023) * t919 + 0.2e1 * t1108 + t1018;
t938 = t1098 * t1104 + t728 * t923 + t1121;
t932 = -t856 + t888 + t900 - t1108;
t729 = (-t853 - t881) * pkin(2) + t932;
t936 = -qJ(3) * t1071 + t729 * t927 + t1120;
t680 = t754 * t927 - t762 * t923;
t755 = t932 - t1084;
t935 = pkin(8) * t680 + t1007 * t755;
t916 = t919 * t917;
t895 = qJDD(1) * t924 + t928 * t929;
t894 = t920 * t910;
t886 = t908 - t909;
t882 = -pkin(7) * t895 + g(3) * t928;
t855 = (t918 + t1101) * t1027;
t846 = -t1027 * t1101 + t880 * t927;
t845 = -t1027 * t918 - t881 * t923;
t826 = t1062 * t924 + t855 * t928;
t825 = -t1062 * t928 + t855 * t924;
t819 = (t1046 * t916 + t1054) * t923;
t818 = (t917 * t927 * t966 + t880 * t919) * t923;
t817 = (-t1060 * t966 + t881 * t919) * t927;
t816 = (-t916 * t923 * t929 + (t881 - t1012) * t920) * t927;
t803 = -pkin(2) * t851 + qJ(3) * t852;
t802 = -t947 + t948;
t800 = -t1104 * t923 + t1070;
t775 = t926 * t815 - t948;
t773 = -t922 * t814 + t947;
t771 = -t801 * t923 + t872 * t927;
t770 = -t919 * t886 + t920 * t973;
t768 = t920 * t886 + t919 * t973;
t766 = -t819 * t924 + t846 * t928;
t765 = -t816 * t924 + t845 * t928;
t764 = t819 * t928 + t846 * t924;
t763 = t816 * t928 + t845 * t924;
t759 = t847 * t926 - t1073;
t758 = -t848 * t922 + t1110;
t730 = (-t885 - t907) * qJ(3) + (-t878 - t910) * pkin(2) + t933;
t727 = -t774 * t923 + t1030;
t726 = -t772 * t923 - t1030;
t721 = t919 * t856 + t920 * t974;
t720 = -t920 * t856 + t919 * t974;
t719 = -pkin(2) * t862 + qJ(3) * t879 + t754;
t713 = -t919 * t802 + t920 * t975;
t712 = -t770 * t924 + t800 * t928;
t711 = -t769 * t924 + t799 * t928;
t710 = t770 * t928 + t800 * t924;
t708 = pkin(7) * t711;
t706 = -t780 * t926 - t783 * t922;
t691 = t738 * t926 + t813 * t922;
t689 = -t756 * t923 + t784 * t927;
t688 = -t757 * t923 + t927 * t937;
t683 = -t1049 - t1133;
t681 = pkin(2) * t762 + qJ(3) * t754;
t678 = -t1047 - t1132;
t677 = t1005 * t920 + t919 * t821 - t1129;
t672 = -t704 * t923 + t828 * t927;
t671 = t1006 * t920 + t919 * t822 - t1131;
t666 = -t919 * t775 + t920 * t957;
t665 = -t919 * t773 + t920 * t958;
t663 = -pkin(1) * t720 + t1089 * t751;
t662 = -t721 * t924 + t751 * t928;
t661 = t721 * t928 + t751 * t924;
t660 = t695 * t926 + t1033;
t659 = t692 * t926 - t1033;
t656 = t751 * t920 + t1019;
t655 = -t919 * t758 + t920 * t977;
t654 = -t919 * t759 + t920 * t976;
t653 = (-t720 * t919 - t721 * t920) * pkin(8);
t652 = t952 - t974;
t648 = -t919 * t755 + t920 * t978;
t647 = t920 * t755 + t919 * t978;
t646 = -t919 * t753 + t920 * t979;
t645 = t920 * t753 + t919 * t979;
t644 = -t690 * t923 + t739 * t927;
t640 = -t919 * t743 + t920 * t981;
t639 = t920 * t743 + t919 * t981;
t638 = -qJ(3) * t1070 - t923 * t729 + t1133;
t636 = -t1104 * t1099 + t927 * t728 + t1132;
t629 = t686 * t926 - t699 * t922;
t628 = t684 * t926 - t703 * t922;
t617 = -t919 * t706 + t920 * t983;
t612 = -t919 * t707 + t920 * t982;
t611 = t920 * t707 + t919 * t982;
t610 = -t923 * t745 + t927 * t750 + t952;
t609 = -t919 * t730 + t920 * t936 + t1129;
t608 = t633 * t926 - t795 * t922;
t606 = -t657 * t923 + t694 * t927;
t605 = -t658 * t923 + t693 * t927;
t603 = qJ(3) * t785 + t1100 * t752 + t1048;
t602 = -t919 * t719 + t920 * t938 + t1131;
t599 = -t919 * t803 + t920 * t980 + t1019;
t595 = qJ(3) * t780 + t1100 * t742 + t1050;
t594 = -t919 * t691 + t920 * t984;
t593 = t920 * t691 + t919 * t984;
t592 = -t646 * t924 + t682 * t928;
t591 = t646 * t928 + t682 * t924;
t590 = -t648 * t924 + t680 * t928;
t589 = t648 * t928 + t680 * t924;
t585 = -t640 * t924 + t679 * t928;
t584 = t640 * t928 + t679 * t924;
t583 = -t626 * t923 + t687 * t927;
t582 = -t627 * t923 + t685 * t927;
t570 = -t612 * t924 + t664 * t928;
t569 = t612 * t928 + t664 * t924;
t568 = -t919 * t659 + t920 * t986;
t567 = -t919 * t660 + t920 * t985;
t566 = t920 * t659 + t919 * t986;
t565 = t920 * t660 + t919 * t985;
t559 = -t607 * t923 + t635 * t927;
t558 = -t594 * t924 + t644 * t928;
t557 = t594 * t928 + t644 * t924;
t555 = (-qJ(3) * t927 + t1099) * t755 + (-t647 * t919 - t648 * t920) * pkin(8);
t551 = -pkin(1) * t647 - t919 * t681 + t920 * t935;
t548 = -t919 * t628 + t920 * t988;
t547 = -t919 * t629 + t920 * t987;
t546 = t920 * t628 + t919 * t988;
t545 = t920 * t629 + t919 * t987;
t542 = qJ(3) * t804 + t1100 * t705 - t580;
t534 = -t568 * t924 + t606 * t928;
t533 = -t567 * t924 + t605 * t928;
t532 = t568 * t928 + t606 * t924;
t531 = t567 * t928 + t605 * t924;
t529 = -t919 * t608 + t920 * t991;
t528 = t920 * t608 + t919 * t991;
t518 = qJ(3) * t715 + t1100 * t580;
t517 = -t919 * t581 + t920 * t993;
t516 = t920 * t581 + t919 * t993;
t512 = -t548 * t924 + t583 * t928;
t511 = -t547 * t924 + t582 * t928;
t510 = t548 * t928 + t583 * t924;
t509 = t547 * t928 + t582 * t924;
t507 = t927 * t588 - t923 * t604 + (-t645 * t919 - t646 * t920) * pkin(8);
t505 = -t541 * t924 + t578 * t928;
t503 = pkin(7) * t505;
t501 = t927 * t586 - t923 * t596 + (-t639 * t919 - t640 * t920) * pkin(8);
t500 = -t538 * t924 + t574 * t928;
t498 = pkin(7) * t500;
t494 = -pkin(1) * t645 - t919 * t603 + t920 * t940;
t493 = -t529 * t924 + t559 * t928;
t492 = t529 * t928 + t559 * t924;
t491 = -pkin(1) * t639 - t919 * t595 + t920 * t941;
t488 = -t522 * t924 + t556 * t928;
t486 = pkin(7) * t488;
t485 = -t517 * t924 + t560 * t928;
t484 = t517 * t928 + t560 * t924;
t483 = -t923 * t543 + t927 * t637 + (-t611 * t919 - t612 * t920) * pkin(8);
t479 = -t550 * t922 + t579 * t926 + t1009;
t477 = -t549 * t922 + t575 * t926 + t1010;
t472 = -pkin(1) * t611 - t919 * t542 + t920 * t942;
t468 = t1095 * t632 + t497 * t926 + t1011;
t466 = -t523 * t922 + t526 * t926 + t1009;
t464 = -t515 * t922 + t524 * t926 + t1010;
t461 = t473 * t926 - t587 * t922 + t1011;
t458 = -t919 * t496 + t920 * t994;
t457 = t920 * t496 + t919 * t994;
t456 = -t923 * t519 + t927 * t530 + (-t516 * t919 - t517 * t920) * pkin(8);
t454 = -pkin(1) * t516 - t919 * t518 + t920 * t943;
t453 = -t923 * t480 + t927 * t508 + t953;
t452 = -t923 * t478 + t927 * t506 + t954;
t451 = -t919 * t476 + t920 * t997;
t450 = t920 * t476 + t919 * t997;
t449 = -t923 * t467 + t927 * t482 + t953;
t447 = t1100 * t495 + (-pkin(10) * t926 + qJ(3) + t1095) * t513;
t446 = -t923 * t465 + t927 * t481 + t954;
t445 = -t919 * t479 + t920 * t995 + t1020;
t444 = -t458 * t924 + t470 * t928;
t443 = t458 * t928 + t470 * t924;
t442 = -t919 * t477 + t920 * t996 + t1021;
t441 = -t923 * t469 + t927 * t474 + t955;
t439 = -t919 * t466 + t920 * t999 + t1020;
t438 = -t923 * t462 + t927 * t463 + t955;
t437 = t1000 * t920 - t919 * t464 + t1021;
t436 = -t919 * t468 + t920 * t998 + t1022;
t435 = -t451 * t924 + t459 * t928;
t434 = t451 * t928 + t459 * t924;
t432 = qJ(3) * t489 + t1100 * t475 + t926 * t460 - t922 * t471;
t431 = t1001 * t920 - t919 * t461 + t1022;
t430 = -t923 * t448 + t927 * t455 + (-t457 * t919 - t458 * t920) * pkin(8);
t429 = -pkin(1) * t457 - t919 * t447 + t920 * t944;
t428 = -t923 * t433 + t927 * t440 + (-t450 * t919 - t451 * t920) * pkin(8);
t427 = -pkin(1) * t450 - t919 * t432 + t920 * t945;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t895, -t896, 0, t859, 0, 0, 0, 0, 0, 0, -t737, -t724, t711, t662, 0, 0, 0, 0, 0, 0, t711, t737, t724, t590, 0, 0, 0, 0, 0, 0, t585, t592, t570, t485, 0, 0, 0, 0, 0, 0, t500, t505, t488, t444, 0, 0, 0, 0, 0, 0, t500, t505, t488, t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t896, -t895, 0, t858, 0, 0, 0, 0, 0, 0, t734, t723, t709, t661, 0, 0, 0, 0, 0, 0, t709, -t734, -t723, t589, 0, 0, 0, 0, 0, 0, t584, t591, t569, t484, 0, 0, 0, 0, 0, 0, t499, t504, t487, t443, 0, 0, 0, 0, 0, 0, t499, t504, t487, t434; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t787, t777, t767, t720, 0, 0, 0, 0, 0, 0, t767, -t787, -t777, t647, 0, 0, 0, 0, 0, 0, t639, t645, t611, t516, 0, 0, 0, 0, 0, 0, t537, t540, t521, t457, 0, 0, 0, 0, 0, 0, t537, t540, t521, t450; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t896, 0, -t895, 0, t1008, -t882, -t858, -pkin(7) * t858, t766, t712, -t1125, t765, -t1127, t826, -t677 * t924 + t683 * t928 - t1135, -t671 * t924 + t678 * t928 - t1137, t652 * t928 - t656 * t924 - t1091, -pkin(7) * t661 + t653 * t928 - t663 * t924, t826, t1125, t1127, t766, t712, t765, -t599 * t924 + t610 * t928 - t1091, -t609 * t924 + t638 * t928 + t1135, -t602 * t924 + t636 * t928 + t1137, -pkin(7) * t589 - t551 * t924 + t555 * t928, -t666 * t924 + t727 * t928, -t617 * t924 + t672 * t928, -t655 * t924 + t689 * t928, -t665 * t924 + t726 * t928, -t654 * t924 + t688 * t928, -t713 * t924 + t771 * t928, -pkin(7) * t584 - t491 * t924 + t501 * t928, -pkin(7) * t591 - t494 * t924 + t507 * t928, -pkin(7) * t569 - t472 * t924 + t483 * t928, -pkin(7) * t484 - t454 * t924 + t456 * t928, t533, t493, t512, t534, t511, t558, -t442 * t924 + t452 * t928 - t1093, -t445 * t924 + t453 * t928 - t1092, -t436 * t924 + t441 * t928 - t1094, -pkin(7) * t443 - t429 * t924 + t430 * t928, t533, t493, t512, t534, t511, t558, -t437 * t924 + t446 * t928 - t1093, -t439 * t924 + t449 * t928 - t1092, -t431 * t924 + t438 * t928 - t1094, -pkin(7) * t434 - t427 * t924 + t428 * t928; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t895, 0, t896, 0, t882, t1008, t859, pkin(7) * t859, t764, t710, t1124, t763, t1126, t825, t677 * t928 + t683 * t924 - t1134, t671 * t928 + t678 * t924 - t1136, t652 * t924 + t656 * t928 + t708, pkin(7) * t662 + t653 * t924 + t663 * t928, t825, -t1124, -t1126, t764, t710, t763, t599 * t928 + t610 * t924 + t708, t609 * t928 + t638 * t924 + t1134, t602 * t928 + t636 * t924 + t1136, pkin(7) * t590 + t551 * t928 + t555 * t924, t666 * t928 + t727 * t924, t617 * t928 + t672 * t924, t655 * t928 + t689 * t924, t665 * t928 + t726 * t924, t654 * t928 + t688 * t924, t713 * t928 + t771 * t924, pkin(7) * t585 + t491 * t928 + t501 * t924, pkin(7) * t592 + t494 * t928 + t507 * t924, pkin(7) * t570 + t472 * t928 + t483 * t924, pkin(7) * t485 + t454 * t928 + t456 * t924, t531, t492, t510, t532, t509, t557, t442 * t928 + t452 * t924 + t498, t445 * t928 + t453 * t924 + t503, t436 * t928 + t441 * t924 + t486, pkin(7) * t444 + t429 * t928 + t430 * t924, t531, t492, t510, t532, t509, t557, t437 * t928 + t446 * t924 + t498, t439 * t928 + t449 * t924 + t503, t431 * t928 + t438 * t924 + t486, pkin(7) * t435 + t427 * t928 + t428 * t924; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t902, t903, 0, 0, t818, t768, t1102, t817, t1103, t894, t1005 * t919 - t920 * t821 + t1128, t1006 * t919 - t920 * t822 + t1130, t751 * t919 + t1041, pkin(1) * t721 + t1090 * t751, t894, -t1102, -t1103, t818, t768, t817, t920 * t803 + t919 * t980 + t1041, t920 * t730 + t919 * t936 - t1128, t920 * t719 + t919 * t938 - t1130, pkin(1) * t648 + t920 * t681 + t919 * t935, t920 * t775 + t919 * t957, t920 * t706 + t919 * t983, t920 * t758 + t919 * t977, t920 * t773 + t919 * t958, t920 * t759 + t919 * t976, t920 * t802 + t919 * t975, pkin(1) * t640 + t920 * t595 + t919 * t941, pkin(1) * t646 + t920 * t603 + t919 * t940, pkin(1) * t612 + t920 * t542 + t919 * t942, pkin(1) * t517 + t920 * t518 + t919 * t943, t565, t528, t546, t566, t545, t593, t920 * t477 + t919 * t996 + t1044, t920 * t479 + t919 * t995 + t1043, t920 * t468 + t919 * t998 + t1045, pkin(1) * t458 + t920 * t447 + t919 * t944, t565, t528, t546, t566, t545, t593, t1000 * t919 + t920 * t464 + t1044, t920 * t466 + t919 * t999 + t1043, t1001 * t919 + t920 * t461 + t1045, pkin(1) * t451 + t920 * t432 + t919 * t945;];
tauB_reg  = t1;
