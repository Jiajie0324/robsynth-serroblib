% Calculate vector of inverse dynamics joint torques for
% S6RRPRRP13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP13_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRP13_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP13_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP13_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP13_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP13_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP13_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRPRRP13_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:01:56
% EndTime: 2019-03-09 13:02:14
% DurationCPUTime: 13.67s
% Computational Cost: add. (7794->730), mult. (18612->931), div. (0->0), fcn. (14034->10), ass. (0->313)
t683 = cos(qJ(2));
t674 = sin(pkin(6));
t679 = sin(qJ(2));
t824 = qJD(1) * t679;
t792 = t674 * t824;
t675 = cos(pkin(6));
t825 = qJD(1) * t675;
t800 = pkin(1) * t825;
t832 = -pkin(8) * t792 + t683 * t800;
t807 = qJD(3) - t832;
t678 = sin(qJ(4));
t682 = cos(qJ(4));
t758 = pkin(4) * t682 + pkin(10) * t678;
t895 = (-pkin(3) - t758) * t792 - qJD(4) * t758 - t807;
t806 = qJD(1) * qJD(2);
t781 = t679 * t806;
t760 = t674 * t781;
t803 = qJDD(1) * t683;
t777 = t674 * t803;
t894 = t760 - t777;
t677 = sin(qJ(5));
t826 = qJD(1) * t674;
t681 = cos(qJ(5));
t848 = t679 * t681;
t579 = (t677 * t683 + t678 * t848) * t826;
t817 = qJD(4) * t678;
t750 = -t681 * t817 - t579;
t805 = qJDD(1) * t675;
t655 = qJDD(2) + t805;
t815 = qJD(4) * t683;
t787 = t674 * t815;
t737 = -qJD(1) * t787 + t655;
t780 = t683 * t806;
t804 = qJDD(1) * t679;
t717 = t780 + t804;
t701 = t717 * t674;
t695 = qJDD(4) + t701;
t680 = sin(qJ(1));
t846 = t680 * t683;
t684 = cos(qJ(1));
t847 = t679 * t684;
t610 = t675 * t846 + t847;
t854 = t674 * t680;
t561 = t610 * t678 + t682 * t854;
t843 = t683 * t684;
t849 = t679 * t680;
t611 = -t675 * t849 + t843;
t517 = -t561 * t677 + t611 * t681;
t853 = t674 * t683;
t796 = t678 * t853;
t607 = t675 * t682 - t796;
t736 = -t607 * t677 + t674 * t848;
t609 = t675 * t847 + t846;
t608 = -t675 * t843 + t849;
t852 = t674 * t684;
t735 = -t608 * t678 + t682 * t852;
t883 = t609 * t681 + t677 * t735;
t893 = -g(1) * t517 - g(2) * t883 - g(3) * t736;
t634 = t655 * qJ(3);
t657 = qJD(2) + t825;
t635 = t657 * qJD(3);
t799 = pkin(1) * qJD(2) * t675;
t766 = qJD(1) * t799;
t798 = pkin(1) * t805;
t763 = pkin(8) * t894 - t679 * t798 - t683 * t766;
t513 = -t634 - t635 + t763;
t707 = pkin(3) * t777 - t513;
t497 = -pkin(3) * t760 + t707;
t685 = -pkin(2) - pkin(9);
t855 = t674 * t679;
t801 = g(3) * t855;
t886 = -g(1) * t611 - g(2) * t609;
t702 = -t886 + t801;
t748 = qJD(4) + t792;
t885 = qJD(4) * t748;
t892 = -t685 * t885 + t497 - t702;
t877 = pkin(5) * t677;
t793 = pkin(9) + t877;
t823 = qJD(1) * t683;
t791 = t674 * t823;
t587 = t657 * t682 - t678 * t791;
t728 = t681 * t748;
t529 = t587 * t677 - t728;
t891 = t529 * t748;
t659 = pkin(8) * t855;
t794 = -pkin(1) * t683 - pkin(2);
t548 = pkin(3) * t855 + t659 + (-pkin(9) + t794) * t675;
t830 = pkin(2) * t853 + qJ(3) * t855;
t568 = (-pkin(9) * t683 - pkin(1)) * t674 - t830;
t836 = t678 * t548 + t682 * t568;
t501 = pkin(10) * t855 + t836;
t879 = pkin(1) * t679;
t665 = t675 * t879;
t829 = pkin(8) * t853 + t665;
t588 = -t675 * qJ(3) - t829;
t567 = pkin(3) * t853 - t588;
t606 = t675 * t678 + t682 * t853;
t509 = pkin(4) * t606 - pkin(10) * t607 + t567;
t838 = t681 * t501 + t677 * t509;
t890 = t895 * t681;
t620 = pkin(4) * t678 - pkin(10) * t682 + qJ(3);
t831 = t681 * t678 * t685 + t677 * t620;
t784 = t682 * t815;
t821 = qJD(2) * t679;
t788 = t678 * t821;
t705 = -t784 + t788;
t844 = t682 * t655;
t732 = t657 * t817 - t844;
t778 = t678 * t803;
t889 = (qJD(1) * t705 - t778) * t674 - t732;
t703 = g(1) * t610 + g(2) * t608 - g(3) * t853;
t653 = pkin(2) * t792;
t871 = qJ(3) * t683;
t749 = pkin(9) * t679 - t871;
t570 = t749 * t826 + t653;
t649 = pkin(8) * t791;
t596 = t679 * t800 + t649;
t572 = pkin(3) * t791 + t596;
t835 = t682 * t570 + t678 * t572;
t505 = pkin(10) * t791 + t835;
t816 = qJD(4) * t682;
t785 = t681 * t816;
t813 = qJD(5) * t681;
t887 = t681 * t505 - t620 * t813 + t677 * t895 - t685 * t785;
t808 = pkin(3) * t792 + t807;
t776 = -qJ(3) * t679 - pkin(1);
t741 = -pkin(2) * t683 + t776;
t575 = t741 * t826;
t884 = t575 * t792 + qJDD(3);
t882 = -t609 * t677 + t681 * t735;
t818 = qJD(4) * t657;
t512 = t737 * t678 + (t818 - t894) * t682;
t531 = t681 * t587 + t677 * t748;
t477 = qJD(5) * t531 + t677 * t889 - t681 * t695;
t881 = t531 ^ 2;
t880 = pkin(3) + pkin(8);
t878 = pkin(2) * t655;
t873 = g(3) * t679;
t676 = -qJ(6) - pkin(10);
t872 = MDP(7) * t674;
t870 = qJ(6) * t677;
t814 = qJD(5) * t677;
t476 = -qJD(5) * t728 + t587 * t814 - t677 * t695 - t681 * t889;
t869 = t476 * t677;
t868 = t477 * t681;
t511 = qJDD(5) + t512;
t867 = t511 * t681;
t857 = t657 * t678;
t585 = t682 * t791 + t857;
t581 = qJD(5) + t585;
t866 = t529 * t581;
t865 = t529 * t677;
t864 = t529 * t681;
t863 = t531 * t581;
t862 = t531 * t677;
t861 = t531 * t681;
t858 = t655 * t675;
t636 = t657 * qJ(3);
t671 = t674 ^ 2;
t856 = t671 * qJD(1) ^ 2;
t851 = t677 * t511;
t850 = t677 * t685;
t845 = t681 * t682;
t527 = t657 * t685 + t808;
t711 = t683 * t685 + t776;
t544 = t711 * t826;
t486 = t678 * t527 + t682 * t544;
t479 = pkin(10) * t748 + t486;
t540 = t636 + t572;
t489 = pkin(4) * t585 - pkin(10) * t587 + t540;
t466 = -t479 * t677 + t681 * t489;
t459 = -qJ(6) * t531 + t466;
t458 = pkin(5) * t581 + t459;
t842 = -t459 + t458;
t485 = t682 * t527 - t678 * t544;
t526 = pkin(4) * t587 + pkin(10) * t585;
t841 = t681 * t485 + t677 * t526;
t761 = t682 * t792;
t775 = pkin(5) - t850;
t810 = qJD(6) * t681;
t840 = pkin(5) * t761 + t505 * t677 - t831 * qJD(5) + (qJD(4) * t775 - t810) * t682 - t890 + (t682 * t814 - t750) * qJ(6);
t578 = t677 * t678 * t792 - t681 * t791;
t812 = qJD(5) * t682;
t783 = t681 * t812;
t811 = qJD(5) * t685;
t839 = qJ(6) * t578 - qJ(6) * t783 + (-qJD(6) * t682 + (qJ(6) * qJD(4) - t811) * t678) * t677 - t887;
t774 = qJD(5) * t676;
t834 = -t585 * t870 + t677 * t774 + t810 - t841;
t520 = t681 * t526;
t833 = -pkin(5) * t587 - t520 + (-qJ(6) * t585 + t774) * t681 + (-qJD(6) + t485) * t677;
t672 = t679 ^ 2;
t828 = -t683 ^ 2 + t672;
t827 = MDP(11) * t674;
t822 = qJD(2) * t678;
t820 = qJD(2) * t683;
t819 = qJD(3) * t679;
t809 = qJD(2) - t657;
t802 = 0.2e1 * t671;
t797 = t683 * t856;
t790 = t674 * t821;
t789 = t674 * t820;
t782 = g(3) * t830;
t779 = t674 * t804;
t773 = -t501 * t677 + t681 * t509;
t772 = t548 * t682 - t678 * t568;
t771 = -t678 * t570 + t572 * t682;
t770 = t581 * t681;
t769 = t657 + t825;
t768 = 0.2e1 * t780;
t767 = t655 + t805;
t765 = t679 * t797;
t762 = pkin(8) * t779 + qJD(2) * t649 + t679 * t766 - t683 * t798;
t744 = qJDD(3) + t762;
t492 = pkin(3) * t701 + t655 * t685 + t744;
t626 = pkin(2) * t760;
t696 = qJD(2) * t749 - t819;
t502 = t626 + (qJD(1) * t696 + qJDD(1) * t711) * t674;
t764 = -t682 * t492 + t678 * t502 + t527 * t817 + t544 * t816;
t560 = -t610 * t682 + t678 * t854;
t734 = t608 * t682 + t678 * t852;
t757 = g(1) * t734 + g(2) * t560;
t755 = g(1) * t608 - g(2) * t610;
t753 = g(1) * t684 + g(2) * t680;
t751 = t677 * t817 + t578;
t467 = t479 * t681 + t489 * t677;
t460 = -qJ(6) * t529 + t467;
t747 = t458 * t681 + t460 * t677;
t746 = t458 * t677 - t460 * t681;
t667 = pkin(5) * t681 + pkin(4);
t745 = t667 * t678 + t676 * t682;
t589 = -pkin(1) * t674 - t830;
t743 = qJD(2) * (-qJD(1) * t589 - t575);
t652 = t683 * t799;
t742 = -pkin(8) * t790 + t652;
t739 = t684 * pkin(1) + t611 * pkin(2) + pkin(8) * t854 + qJ(3) * t610;
t648 = pkin(2) * t790;
t542 = t674 * t696 + t648;
t573 = (t853 * t880 + t665) * qJD(2);
t738 = -t678 * t542 - t548 * t817 - t568 * t816 + t573 * t682;
t559 = t607 * t681 + t677 * t855;
t731 = -t581 * t813 - t851;
t730 = -t581 * t814 + t867;
t727 = t682 * t748;
t726 = t587 * t748;
t725 = t748 * t531;
t724 = -qJ(3) * t820 - t819;
t478 = -pkin(4) * t748 - t485;
t720 = -pkin(10) * t511 + t478 * t581;
t514 = t626 + (qJD(1) * t724 + qJDD(1) * t741) * t674;
t574 = t674 * t724 + t648;
t718 = qJD(1) * t574 + qJDD(1) * t589 + t514;
t716 = t781 - t803;
t715 = -t678 * t492 - t682 * t502 - t527 * t816 + t544 * t817;
t714 = t682 * t542 + t548 * t816 - t568 * t817 + t678 * t573;
t456 = pkin(10) * t695 - t715;
t463 = t732 * pkin(10) + t512 * pkin(4) + (pkin(10) * t778 + (-pkin(3) * t821 - pkin(10) * t705) * qJD(1)) * t674 + t707;
t713 = -t681 * t456 - t677 * t463 + t479 * t814 - t489 * t813;
t473 = pkin(10) * t789 + t714;
t668 = t675 * qJD(3);
t547 = -t790 * t880 + t652 + t668;
t556 = -qJD(4) * t606 + t674 * t788;
t557 = t675 * t816 - t678 * t787 - t682 * t790;
t482 = pkin(4) * t557 - pkin(10) * t556 + t547;
t712 = t681 * t473 + t677 * t482 - t501 * t814 + t509 * t813;
t500 = -pkin(4) * t855 - t772;
t710 = g(1) * t560 - g(2) * t734 + g(3) * t606;
t709 = -g(1) * t561 + g(2) * t735 - g(3) * t607;
t708 = -pkin(1) * t680 - t609 * pkin(2) + pkin(8) * t852 - qJ(3) * t608;
t597 = t829 * qJD(2);
t706 = -g(1) * t609 + g(2) * t611 + t597 * t657;
t704 = t748 * t826;
t700 = t886 - t763;
t698 = t703 - t762;
t697 = t674 * (t809 * t823 + t804);
t474 = -pkin(4) * t789 - t738;
t694 = -qJD(5) * t838 - t473 * t677 + t681 * t482;
t451 = -qJD(5) * t467 - t677 * t456 + t681 * t463;
t457 = -pkin(4) * t695 + t764;
t693 = pkin(10) * qJD(5) * t581 + t457 - t710;
t692 = t581 * t811 + t702;
t584 = t682 * t695;
t691 = t596 * t657 + t698;
t689 = -t679 * t704 - t885;
t688 = t678 * t689 + t584;
t454 = t477 * pkin(5) + qJDD(6) + t457;
t633 = t676 * t681;
t632 = t676 * t677;
t615 = t681 * t620;
t600 = t610 * pkin(2);
t598 = t608 * pkin(2);
t594 = -qJ(3) * t791 + t653;
t590 = t675 * t794 + t659;
t580 = -t668 - t742;
t577 = t657 * t677 - t681 * t761;
t576 = t657 * t681 + t677 * t761;
t569 = -t636 - t596;
t566 = -pkin(2) * t657 + t807;
t553 = -t682 * t870 + t831;
t543 = -qJ(6) * t845 + t678 * t775 + t615;
t528 = t529 ^ 2;
t523 = t744 - t878;
t518 = t561 * t681 + t611 * t677;
t504 = -pkin(4) * t791 - t771;
t499 = qJD(5) * t736 + t556 * t681 + t677 * t789;
t498 = qJD(5) * t559 + t556 * t677 - t681 * t789;
t475 = t529 * pkin(5) + qJD(6) + t478;
t468 = qJ(6) * t736 + t838;
t464 = pkin(5) * t606 - qJ(6) * t559 + t773;
t453 = -qJ(6) * t498 + qJD(6) * t736 + t712;
t452 = pkin(5) * t557 - qJ(6) * t499 - qJD(6) * t559 + t694;
t449 = -qJ(6) * t477 - qJD(6) * t529 - t713;
t448 = pkin(5) * t511 + qJ(6) * t476 - qJD(6) * t531 + t451;
t1 = [(-t714 * t748 + t836 * (-qJDD(4) - t779) + t715 * t855 + t547 * t587 + t567 * (t678 * t760 - t732) + t497 * t607 + t540 * t556 + (t567 * (-qJD(1) * t816 - qJDD(1) * t678) + (-qJD(1) * t836 - t486) * qJD(2)) * t853 + t757) * MDP(21) + (-t659 * t655 - t762 * t675 + (t683 * t858 - t716 * t802) * pkin(1) - t706) * MDP(9) + ((qJD(2) * t566 - qJDD(1) * t588 - t513 + (qJD(2) * t590 - t580) * qJD(1)) * t683 + (qJD(2) * t569 + qJDD(1) * t590 + t523 + (qJD(2) * t588 + t597) * qJD(1)) * t679 - t753) * t827 + (qJD(2) * t815 + (qJDD(4) + (t768 + t804) * t674) * t679) * t674 * MDP(19) + (t587 * t556 + t607 * t889) * MDP(15) + (-t607 * t512 - t556 * t585 - t587 * t557 - t606 * t889) * MDP(16) + (t523 * t675 + t590 * t655 + (t679 * t743 + t683 * t718) * t674 + t706) * MDP(12) + (-g(1) * t735 - g(2) * t561 + t485 * t789 + t497 * t606 + t567 * t512 + t540 * t557 + t547 * t585 + t695 * t772 + t738 * t748 - t764 * t855) * MDP(20) + (t556 * qJD(4) + t607 * qJDD(4) + ((qJD(1) * t607 + t587) * t820 + ((t607 - t796) * qJDD(1) + (t674 * t705 + t556) * qJD(1) - t732) * t679) * t674) * MDP(17) + (-t557 * qJD(4) - t606 * qJDD(4) + ((-qJD(1) * t606 - t585) * t820 + (-qJD(1) * t557 - qJDD(1) * t606 - t512) * t679) * t674) * MDP(18) + qJDD(1) * MDP(1) + t753 * MDP(3) + (-t513 * t675 - t580 * t657 - t588 * t655 + (-t679 * t718 + t683 * t743) * t674 + t755) * MDP(13) + ((qJDD(1) * t672 + t679 * t768) * MDP(4) + 0.2e1 * (t679 * t803 - t806 * t828) * MDP(5)) * t671 + (g(1) * t883 - g(2) * t517 + t457 * t559 - t467 * t557 + t474 * t531 - t500 * t476 + t478 * t499 - t838 * t511 - t712 * t581 + t606 * t713) * MDP(28) + (-g(1) * t882 - g(2) * t518 + t451 * t606 - t457 * t736 + t466 * t557 + t474 * t529 + t500 * t477 + t478 * t498 + t773 * t511 + t694 * t581) * MDP(27) + (-t448 * t559 + t449 * t736 - t452 * t531 - t453 * t529 - t458 * t499 - t460 * t498 + t464 * t476 - t468 * t477 - t757) * MDP(29) + (t449 * t468 + t460 * t453 + t448 * t464 + t458 * t452 + t454 * (-pkin(5) * t736 + t500) + t475 * (pkin(5) * t498 + t474) - g(1) * (pkin(3) * t852 - t609 * t793 + t667 * t735 - t676 * t734 + t708) - g(2) * (pkin(3) * t854 - t560 * t676 + t561 * t667 + t611 * t793 + t739)) * MDP(30) + (-t477 * t606 - t498 * t581 + t511 * t736 - t529 * t557) * MDP(25) + (-t476 * t736 - t477 * t559 - t498 * t531 - t499 * t529) * MDP(23) + (g(1) * t680 - g(2) * t684) * MDP(2) + (-g(1) * t708 - g(2) * t739 + t513 * t588 + t514 * t589 + t523 * t590 + t566 * t597 + t569 * t580 + t575 * t574) * MDP(14) + (-t476 * t606 + t499 * t581 + t511 * t559 + t531 * t557) * MDP(24) + (t511 * t606 + t557 * t581) * MDP(26) + (-t476 * t559 + t499 * t531) * MDP(22) + MDP(8) * t858 + (t683 * t767 - t769 * t821) * t872 + (t679 * t767 + t769 * t820) * t674 * MDP(6) + (-pkin(1) * t717 * t802 - t655 * t829 - t657 * t742 + t675 * t763 - t755) * MDP(10); (t856 * t879 + t691) * MDP(9) + (-t513 * qJ(3) - t523 * pkin(2) - t575 * t594 - t566 * t596 - g(1) * (qJ(3) * t611 - t600) - g(2) * (qJ(3) * t609 - t598) - t782 - t807 * t569) * MDP(14) + (t529 * t579 + t531 * t578 + (t862 + t864) * t817 + (t869 - t868 + (-t861 + t865) * qJD(5)) * t682) * MDP(23) + t828 * MDP(5) * t856 + (t835 * t748 + t486 * t791 + t808 * t587 + (-t685 * qJDD(4) + (-t540 - t636) * qJD(4) + (qJ(3) * t716 - t540 * t824 - t685 * t717) * t674) * t678 + (qJ(3) * t737 + t892) * t682) * MDP(21) + (qJ(3) * t512 - t485 * t791 + t540 * t727 + t685 * t584 + t808 * t585 + t678 * t892 - t771 * t748) * MDP(20) + ((-t512 - t726) * t682 + (-t844 + (t585 + t857) * qJD(4) + (t778 + (t784 + (t585 - t822) * t679) * qJD(1)) * t674) * t678) * MDP(16) + (t737 * t682 ^ 2 + ((t674 * t716 - t818) * t682 - t726) * t678) * MDP(15) - t683 * MDP(19) * t704 + ((-pkin(2) * t679 + t871) * qJDD(1) + ((-qJ(3) * qJD(2) - t569 - t596) * t679 + (-pkin(2) * qJD(2) - t566 + t807) * t683) * qJD(1)) * t827 + (0.2e1 * t634 + t635 + t807 * t657 + (-t873 + (t575 * t683 + t594 * t679) * qJD(1)) * t674 + t700) * MDP(13) - MDP(4) * t765 + (t511 * t678 + t581 * t727) * MDP(26) + (-t476 * t845 + (-t677 * t812 + t750) * t531) * MDP(22) + (-t594 * t791 - t691 - 0.2e1 * t878 + t884) * MDP(12) + (-t678 * qJDD(4) + (t585 * t823 - t678 * t717) * t674 + t689 * t682) * MDP(18) + (-t476 * t678 + t750 * t581 + (t725 + t730) * t682) * MDP(24) + (-t587 * t791 + t688) * MDP(17) + (t458 * t579 + t460 * t578 + t476 * t543 - t477 * t553 - t840 * t531 - t839 * t529 + t747 * t817 + (qJD(5) * t746 - t448 * t681 - t449 * t677 + t702) * t682) * MDP(29) + (-t831 * t511 - t504 * t531 - t478 * t579 + t887 * t581 + t703 * t681 + (t713 + (-t478 * t681 + t531 * t685) * qJD(4) + t692 * t677) * t678 + (t457 * t681 - t467 * t748 + t685 * t476 - t478 * t814) * t682) * MDP(28) + (pkin(1) * t797 + t657 * t832 - t700 + t801) * MDP(10) + (-t478 * t578 - t504 * t529 + t615 * t511 - t890 * t581 + ((-qJD(5) * t620 + t505) * t581 + t703) * t677 + (-t511 * t850 + t451 + (-t478 * t677 + t529 * t685) * qJD(4) - t692 * t681) * t678 + (t466 * t792 + t478 * t813 + t457 * t677 - t685 * t477 + (-t581 * t850 + t466) * qJD(4)) * t682) * MDP(27) + t655 * MDP(8) + (-t477 * t678 + t751 * t581 + (t731 - t891) * t682) * MDP(25) + (t449 * t553 + t448 * t543 - g(1) * (-t610 * t793 - t600) - g(2) * (-t608 * t793 - t598) - t782 + t454 * (-t685 + t877) * t682 + (t685 * t817 + (-t751 + t783) * pkin(5) + t771) * t475 + t839 * t460 + t840 * t458 + (-t745 * t873 + (t475 * pkin(4) * qJD(1) - g(3) * t793) * t683) * t674 + t886 * (qJ(3) + t745)) * MDP(30) + (-t809 * t824 + t803) * t872 + MDP(6) * t697; MDP(11) * t697 + (t655 + t765) * MDP(12) + (-t657 ^ 2 - t672 * t856) * MDP(13) + (t569 * t657 - t698 - t878 + t884) * MDP(14) + (-t657 * t585 + t688) * MDP(20) + (-t678 * t695 - t657 * t587 + (-t748 * t792 - t885) * t682) * MDP(21) + (-t477 * t682 + (-t677 * t816 - t576) * t581 + (t731 + t891) * t678) * MDP(27) + (t476 * t682 + (t577 - t785) * t581 + (t725 - t730) * t678) * MDP(28) + (t529 * t577 + t531 * t576 + (t862 - t864) * t816 + (-t869 - t868 + (t861 + t865) * qJD(5)) * t678) * MDP(29) + (-t458 * t576 - t460 * t577 + (-qJD(4) * t746 - t454) * t682 + (-qJD(5) * t747 - t448 * t677 + t449 * t681 + t475 * t748) * t678 - t703) * MDP(30); -t585 ^ 2 * MDP(16) + (t844 + (t585 - t857) * qJD(4) + (-t778 + (-t784 + (t585 + t822) * t679) * qJD(1)) * t674) * MDP(17) - t512 * MDP(18) + t695 * MDP(19) + (t486 * t748 + t710 - t764) * MDP(20) + (t485 * t748 + t540 * t585 - t709 + t715) * MDP(21) + (t531 * t770 - t869) * MDP(22) + ((-t476 - t866) * t681 + (-t477 - t863) * t677) * MDP(23) + (t581 * t770 + t851) * MDP(24) + (-t581 ^ 2 * t677 + t867) * MDP(25) + (-pkin(4) * t477 - t486 * t529 - t520 * t581 + (t485 * t581 + t720) * t677 - t693 * t681) * MDP(27) + (pkin(4) * t476 - t486 * t531 + t581 * t841 + t677 * t693 + t681 * t720) * MDP(28) + (t476 * t632 + t477 * t633 - t833 * t531 - t834 * t529 + (-t458 * t581 + t449) * t681 + (-t460 * t581 - t448) * t677 + t709) * MDP(29) + (-t449 * t633 + t448 * t632 - t454 * t667 - g(1) * (-t560 * t667 - t561 * t676) - g(2) * (t667 * t734 + t676 * t735) - g(3) * (-t606 * t667 - t607 * t676) + (t581 * t877 - t486) * t475 + t834 * t460 + t833 * t458) * MDP(30) + (MDP(15) * t585 + t587 * MDP(16) + MDP(18) * t748 - t540 * MDP(20) - t531 * MDP(24) + t529 * MDP(25) - t581 * MDP(26) - t466 * MDP(27) + t467 * MDP(28)) * t587; t531 * t529 * MDP(22) + (-t528 + t881) * MDP(23) + (-t476 + t866) * MDP(24) + (-t477 + t863) * MDP(25) + t511 * MDP(26) + (t467 * t581 - t478 * t531 + t451 + t893) * MDP(27) + (g(1) * t518 - g(2) * t882 + g(3) * t559 + t466 * t581 + t478 * t529 + t713) * MDP(28) + (pkin(5) * t476 - t529 * t842) * MDP(29) + (t842 * t460 + (-t475 * t531 + t448 + t893) * pkin(5)) * MDP(30); (-t528 - t881) * MDP(29) + (t458 * t531 + t460 * t529 + t454 - t710) * MDP(30);];
tau  = t1;
