% Calculate vector of inverse dynamics joint torques for
% S6RRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4,theta5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPPR5_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPPR5_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR5_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR5_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR5_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR5_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPPR5_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRPPR5_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:44:50
% EndTime: 2019-03-09 15:45:25
% DurationCPUTime: 27.06s
% Computational Cost: add. (17372->787), mult. (43185->1074), div. (0->0), fcn. (35026->18), ass. (0->336)
t846 = sin(pkin(6));
t857 = cos(qJ(2));
t945 = qJD(1) * t857;
t919 = t846 * t945;
t1022 = qJD(3) - t919;
t853 = sin(qJ(2));
t896 = pkin(2) * t853 - pkin(9) * t857;
t947 = qJD(1) * t846;
t754 = t896 * t947;
t856 = cos(qJ(3));
t737 = t856 * t754;
t920 = t853 * t947;
t849 = cos(pkin(6));
t946 = qJD(1) * t849;
t932 = pkin(1) * t946;
t753 = -pkin(8) * t920 + t857 * t932;
t852 = sin(qJ(3));
t850 = -qJ(4) - pkin(9);
t913 = qJD(3) * t850;
t967 = t856 * t857;
t1021 = -t737 - (pkin(3) * t853 - qJ(4) * t967) * t947 + t856 * t913 + (t753 - qJD(4)) * t852;
t901 = t852 * t919;
t953 = t856 * t753 + t852 * t754;
t1020 = -qJ(4) * t901 - qJD(4) * t856 - t852 * t913 + t953;
t845 = sin(pkin(11));
t848 = cos(pkin(11));
t774 = t845 * t852 - t848 * t856;
t714 = t774 * t919;
t762 = t774 * qJD(3);
t1019 = -t714 + t762;
t776 = t845 * t856 + t848 * t852;
t952 = t1022 * t776;
t957 = -t1020 * t848 + t1021 * t845;
t937 = qJD(1) * qJD(2);
t915 = t857 * t937;
t935 = qJDD(1) * t853;
t1018 = t915 + t935;
t756 = pkin(8) * t919 + t853 * t932;
t942 = qJD(3) * t852;
t1017 = -t756 + (-t901 + t942) * pkin(3);
t844 = sin(pkin(12));
t847 = cos(pkin(12));
t819 = qJD(2) + t946;
t732 = t819 * t856 - t852 * t920;
t733 = t819 * t852 + t856 * t920;
t881 = t732 * t845 + t848 * t733;
t648 = -t1022 * t847 + t844 * t881;
t855 = cos(qJ(6));
t650 = t1022 * t844 + t847 * t881;
t851 = sin(qJ(6));
t999 = t650 * t851;
t590 = t855 * t648 + t999;
t677 = -t848 * t732 + t733 * t845;
t674 = qJD(6) + t677;
t1016 = t590 * t674;
t1015 = qJ(5) * t920 - t957;
t1014 = t952 * pkin(4) + qJ(5) * t1019 - qJD(5) * t776 + t1017;
t882 = t648 * t851 - t650 * t855;
t1013 = t674 * t882;
t689 = -t714 * t844 - t847 * t920;
t910 = -t762 * t844 - t689;
t690 = -t714 * t847 + t844 * t920;
t909 = -t762 * t847 - t690;
t959 = t1020 * t845 + t1021 * t848;
t777 = t844 * t855 + t847 * t851;
t764 = t777 * qJD(6);
t950 = t777 * t677 + t764;
t1011 = t1018 * t846;
t854 = sin(qJ(1));
t968 = t854 * t857;
t858 = cos(qJ(1));
t969 = t853 * t858;
t768 = t849 * t969 + t968;
t841 = qJ(3) + pkin(11);
t835 = sin(t841);
t837 = cos(t841);
t976 = t846 * t858;
t701 = t768 * t837 - t835 * t976;
t965 = t857 * t858;
t970 = t853 * t854;
t767 = -t849 * t965 + t970;
t840 = pkin(12) + qJ(6);
t834 = sin(t840);
t836 = cos(t840);
t1010 = t701 * t834 - t767 * t836;
t1009 = t701 * t836 + t767 * t834;
t936 = qJDD(1) * t849;
t818 = qJDD(2) + t936;
t898 = qJD(3) * t920;
t941 = qJD(3) * t856;
t668 = t819 * t941 + t1011 * t856 + (t818 - t898) * t852;
t934 = qJDD(1) * t857;
t817 = t846 * t934;
t916 = t853 * t937;
t900 = t846 * t916;
t748 = qJDD(3) - t817 + t900;
t719 = pkin(9) * t819 + t756;
t880 = -pkin(2) * t857 - pkin(9) * t853 - pkin(1);
t746 = t880 * t846;
t723 = qJD(1) * t746;
t667 = t719 * t856 + t723 * t852;
t931 = pkin(1) * qJD(2) * t849;
t904 = qJD(1) * t931;
t929 = pkin(1) * t936;
t921 = -pkin(8) * t817 - t853 * t929 - t857 * t904;
t864 = -pkin(8) * t900 - t921;
t683 = pkin(9) * t818 + t864;
t877 = t896 * qJD(2);
t688 = (qJD(1) * t877 + qJDD(1) * t880) * t846;
t861 = -qJD(3) * t667 - t852 * t683 + t856 * t688;
t556 = pkin(3) * t748 - qJ(4) * t668 - qJD(4) * t733 + t861;
t872 = -t856 * t683 - t852 * t688 + t719 * t942 - t723 * t941;
t903 = t1011 * t852 + t819 * t942 + t856 * t898;
t873 = t856 * t818 - t903;
t559 = qJ(4) * t873 + t732 * qJD(4) - t872;
t525 = t556 * t848 - t845 * t559;
t524 = -pkin(4) * t748 + qJDD(5) - t525;
t700 = t768 * t835 + t837 * t976;
t770 = -t849 * t970 + t965;
t979 = t846 * t854;
t704 = t770 * t835 - t837 * t979;
t980 = t846 * t853;
t742 = t835 * t980 - t849 * t837;
t870 = g(1) * t704 + g(2) * t700 + g(3) * t742;
t866 = -t524 + t870;
t964 = t1014 * t847 + t1015 * t844;
t963 = t1014 * t844 - t1015 * t847;
t958 = pkin(4) * t920 - t959;
t1007 = pkin(1) * t853;
t977 = t846 * t857;
t949 = pkin(8) * t977 + t1007 * t849;
t745 = pkin(9) * t849 + t949;
t956 = t856 * t745 + t852 * t746;
t769 = t849 * t968 + t969;
t868 = g(1) * t769 + g(2) * t767 - g(3) * t977;
t611 = t668 * t845 - t848 * t873;
t608 = qJDD(6) + t611;
t775 = t844 * t851 - t855 * t847;
t951 = t674 * t775;
t1008 = -t608 * t777 + t674 * t951;
t1006 = g(3) * t846;
t1005 = t818 * pkin(2);
t828 = pkin(3) * t845 + qJ(5);
t1004 = pkin(10) + t828;
t1003 = MDP(6) * t846;
t1002 = t590 * t881;
t1001 = t882 * t881;
t998 = t677 * t844;
t997 = t732 * t1022;
t996 = t733 * t1022;
t991 = t768 * t852;
t990 = t770 * t852;
t989 = t776 * t844;
t988 = t776 * t847;
t987 = t818 * MDP(8);
t986 = t834 * t837;
t985 = t836 * t837;
t984 = t837 * t844;
t983 = t837 * t847;
t982 = t837 * t857;
t839 = t846 ^ 2;
t981 = t839 * qJD(1) ^ 2;
t637 = qJ(4) * t732 + t667;
t632 = t845 * t637;
t978 = t846 * t856;
t975 = t847 * t857;
t974 = t848 * t637;
t973 = t849 * t856;
t972 = t849 * t857;
t971 = t850 * t853;
t966 = t856 * t858;
t526 = t845 * t556 + t848 * t559;
t523 = qJ(5) * t748 + qJD(5) * t1022 + t526;
t612 = t848 * t668 + t845 * t873;
t902 = pkin(8) * t1011 + t853 * t904 - t857 * t929;
t684 = t902 - t1005;
t618 = -pkin(3) * t873 + qJDD(4) + t684;
t534 = t611 * pkin(4) - t612 * qJ(5) - qJD(5) * t881 + t618;
t514 = t847 * t523 + t844 * t534;
t927 = t852 * t980;
t765 = t927 - t973;
t943 = qJD(2) * t857;
t917 = t846 * t943;
t709 = -qJD(3) * t765 + t856 * t917;
t766 = t849 * t852 + t853 * t978;
t755 = t846 * t877;
t820 = pkin(8) * t980;
t757 = (pkin(1) * t972 - t820) * qJD(2);
t862 = -qJD(3) * t956 + t856 * t755 - t757 * t852;
t944 = qJD(2) * t853;
t918 = t846 * t944;
t588 = pkin(3) * t918 - qJ(4) * t709 - qJD(4) * t766 + t862;
t708 = qJD(3) * t766 + t852 * t917;
t871 = -t745 * t942 + t746 * t941 + t852 * t755 + t856 * t757;
t597 = -qJ(4) * t708 - qJD(4) * t765 + t871;
t548 = t845 * t588 + t848 * t597;
t542 = (qJ(5) * t944 - qJD(5) * t857) * t846 + t548;
t654 = t848 * t708 + t709 * t845;
t655 = -t708 * t845 + t709 * t848;
t696 = -t765 * t845 + t766 * t848;
t758 = pkin(8) * t917 + t853 * t931;
t897 = pkin(3) * t708 + t758;
t564 = pkin(4) * t654 - qJ(5) * t655 - qJD(5) * t696 + t897;
t521 = t847 * t542 + t844 * t564;
t666 = -t719 * t852 + t856 * t723;
t636 = -qJ(4) * t733 + t666;
t623 = pkin(3) * t1022 + t636;
t571 = t845 * t623 + t974;
t569 = qJ(5) * t1022 + t571;
t718 = -pkin(2) * t819 - t753;
t675 = -pkin(3) * t732 + qJD(4) + t718;
t578 = pkin(4) * t677 - qJ(5) * t881 + t675;
t539 = t847 * t569 + t844 * t578;
t575 = t636 * t848 - t632;
t604 = pkin(3) * t733 + pkin(4) * t881 + qJ(5) * t677;
t544 = t847 * t575 + t844 * t604;
t908 = -t745 * t852 + t856 * t746;
t643 = -pkin(3) * t977 - qJ(4) * t766 + t908;
t656 = -qJ(4) * t765 + t956;
t596 = t845 * t643 + t848 * t656;
t584 = -qJ(5) * t977 + t596;
t695 = t848 * t765 + t766 * t845;
t744 = t820 + (-pkin(1) * t857 - pkin(2)) * t849;
t865 = pkin(3) * t765 + t744;
t613 = pkin(4) * t695 - qJ(5) * t696 + t865;
t552 = t847 * t584 + t844 * t613;
t962 = t689 * t851 - t690 * t855 + t762 * t775 - t764 * t776;
t939 = qJD(6) * t855;
t940 = qJD(6) * t851;
t961 = -t855 * t689 - t690 * t851 - t762 * t777 + t939 * t988 - t940 * t989;
t960 = pkin(5) * t910 + t958;
t833 = pkin(3) * t856 + pkin(2);
t699 = pkin(4) * t774 - qJ(5) * t776 - t833;
t802 = t850 * t852;
t803 = t850 * t856;
t717 = t802 * t845 - t803 * t848;
t645 = t844 * t699 + t847 * t717;
t955 = -t767 * t833 - t768 * t850;
t954 = -t769 * t833 - t770 * t850;
t842 = t853 ^ 2;
t948 = -t857 ^ 2 + t842;
t938 = qJD(2) - t819;
t933 = 0.2e1 * t839;
t928 = t857 * t981;
t926 = t852 * t979;
t925 = t854 * t978;
t924 = t846 * t966;
t805 = t852 * t976;
t586 = t612 * t844 - t847 * t748;
t587 = t612 * t847 + t748 * t844;
t923 = -t851 * t586 + t855 * t587 - t648 * t939;
t832 = -pkin(3) * t848 - pkin(4);
t513 = -t523 * t844 + t847 * t534;
t511 = pkin(5) * t611 - pkin(10) * t587 + t513;
t512 = -pkin(10) * t586 + t514;
t912 = t855 * t511 - t851 * t512;
t520 = -t542 * t844 + t847 * t564;
t538 = -t569 * t844 + t847 * t578;
t543 = -t575 * t844 + t847 * t604;
t911 = t855 * t586 + t851 * t587;
t551 = -t584 * t844 + t847 * t613;
t547 = t588 * t848 - t845 * t597;
t570 = t623 * t848 - t632;
t574 = t636 * t845 + t974;
t595 = t643 * t848 - t845 * t656;
t644 = t847 * t699 - t717 * t844;
t907 = t768 * t856 - t805;
t716 = -t848 * t802 - t803 * t845;
t906 = t819 + t946;
t905 = t818 + t936;
t894 = -g(1) * t767 + g(2) * t769;
t893 = g(1) * t770 + g(2) * t768;
t892 = -t775 * t608 - t674 * t950;
t585 = pkin(4) * t977 - t595;
t628 = -pkin(10) * t989 + t645;
t891 = -pkin(5) * t952 + pkin(10) * t909 + qJD(6) * t628 - t964;
t621 = pkin(5) * t774 - pkin(10) * t988 + t644;
t890 = pkin(10) * t910 - qJD(6) * t621 - t963;
t889 = pkin(4) * t837 + qJ(5) * t835;
t888 = t858 * pkin(1) + pkin(3) * t926 + pkin(8) * t979 - t769 * t850 + t770 * t833;
t887 = t851 * t511 + t855 * t512;
t886 = -t513 * t847 - t514 * t844;
t527 = pkin(5) * t677 - pkin(10) * t650 + t538;
t530 = -pkin(10) * t648 + t539;
t515 = t527 * t855 - t530 * t851;
t516 = t527 * t851 + t530 * t855;
t673 = t696 * t847 - t844 * t977;
t536 = pkin(5) * t695 - pkin(10) * t673 + t551;
t672 = t696 * t844 + t846 * t975;
t540 = -pkin(10) * t672 + t552;
t885 = t536 * t855 - t540 * t851;
t884 = t536 * t851 + t540 * t855;
t883 = t538 * t844 - t539 * t847;
t616 = t855 * t672 + t673 * t851;
t617 = -t672 * t851 + t673 * t855;
t878 = -t924 - t991;
t876 = -pkin(1) * t854 + pkin(3) * t805 + pkin(8) * t976 + t767 * t850 - t768 * t833;
t772 = t1004 * t847;
t875 = pkin(10) * t677 * t847 + pkin(5) * t881 + qJD(5) * t844 + qJD(6) * t772 + t543;
t771 = t1004 * t844;
t874 = pkin(10) * t998 - qJD(5) * t847 + qJD(6) * t771 + t544;
t528 = -t650 * t940 + t923;
t568 = -pkin(4) * t1022 + qJD(5) - t570;
t869 = -t611 * t828 + (-qJD(5) + t568) * t677;
t867 = g(3) * t980 + t893;
t545 = -pkin(4) * t918 - t547;
t863 = -pkin(9) * t748 + t1022 * t718;
t529 = -qJD(6) * t882 + t911;
t860 = pkin(9) * qJD(3) * t1022 + t684 - t868;
t826 = pkin(3) * t973;
t800 = pkin(3) * t925;
t789 = -pkin(5) * t847 + t832;
t779 = t833 * t977;
t743 = t835 * t849 + t837 * t980;
t711 = t770 * t856 + t926;
t710 = t925 - t990;
t705 = t770 * t837 + t835 * t979;
t694 = t775 * t776;
t693 = t777 * t776;
t687 = pkin(5) * t989 + t716;
t663 = t705 * t836 + t769 * t834;
t662 = -t705 * t834 + t769 * t836;
t639 = t655 * t847 + t844 * t918;
t638 = t655 * t844 - t847 * t918;
t566 = pkin(5) * t672 + t585;
t565 = -pkin(5) * t998 + t574;
t555 = pkin(5) * t648 + t568;
t550 = qJD(6) * t617 + t855 * t638 + t639 * t851;
t549 = -qJD(6) * t616 - t638 * t851 + t639 * t855;
t535 = pkin(5) * t638 + t545;
t519 = -pkin(10) * t638 + t521;
t518 = pkin(5) * t586 + t524;
t517 = pkin(5) * t654 - pkin(10) * t639 + t520;
t509 = -qJD(6) * t516 + t912;
t508 = qJD(6) * t515 + t887;
t1 = [(-g(1) * t876 - g(2) * t888 + t525 * t595 + t526 * t596 + t570 * t547 + t571 * t548 + t618 * t865 + t675 * t897) * MDP(19) + (t528 * t695 + t549 * t674 + t608 * t617 - t654 * t882) * MDP(26) + (-t528 * t616 - t529 * t617 - t549 * t590 + t550 * t882) * MDP(25) + (t528 * t617 - t549 * t882) * MDP(24) + (g(1) * t700 - g(2) * t704 - t513 * t673 - t514 * t672 - t520 * t650 - t521 * t648 - t538 * t639 - t539 * t638 - t551 * t587 - t552 * t586) * MDP(22) + (t514 * t552 + t539 * t521 + t513 * t551 + t538 * t520 + t524 * t585 + t568 * t545 - g(1) * (-pkin(4) * t701 - qJ(5) * t700 + t876) - g(2) * (pkin(4) * t705 + qJ(5) * t704 + t888)) * MDP(23) + (-t521 * t677 - t552 * t611 - t514 * t695 - t539 * t654 + t545 * t650 + t585 * t587 + t524 * t673 + t568 * t639 - g(1) * (t701 * t844 - t767 * t847) - g(2) * (-t705 * t844 + t769 * t847)) * MDP(21) + (t520 * t677 + t551 * t611 + t513 * t695 + t538 * t654 + t545 * t648 + t585 * t586 + t524 * t672 + t568 * t638 - g(1) * (-t701 * t847 - t767 * t844) - g(2) * (t705 * t847 + t769 * t844)) * MDP(20) + ((-qJD(6) * t884 + t517 * t855 - t519 * t851) * t674 + t885 * t608 + t509 * t695 + t515 * t654 + t535 * t590 + t566 * t529 + t518 * t616 + t555 * t550 + g(1) * t1009 - g(2) * t663) * MDP(29) + (-(qJD(6) * t885 + t517 * t851 + t519 * t855) * t674 - t884 * t608 - t508 * t695 - t516 * t654 - t535 * t882 + t566 * t528 + t518 * t617 + t555 * t549 - g(1) * t1010 - g(2) * t662) * MDP(30) + (-t668 * t765 - t733 * t708 + t709 * t732 + t766 * t873) * MDP(12) + (0.2e1 * (t853 * t934 - t937 * t948) * MDP(5) + (qJDD(1) * t842 + 0.2e1 * t853 * t915) * MDP(4)) * t839 + (-t758 * t819 - t820 * t818 - t902 * t849 + g(1) * t768 - g(2) * t770 + (t818 * t972 + (-t916 + t934) * t933) * pkin(1)) * MDP(9) + qJDD(1) * MDP(1) + (-pkin(1) * t1018 * t933 - t757 * t819 - t949 * t818 - t864 * t849 + t894) * MDP(10) + (g(1) * t907 - g(2) * t711 + t1022 * t862 + t684 * t765 + t718 * t708 - t758 * t732 - t744 * t873 + t908 * t748) * MDP(16) + (-g(1) * t991 - g(2) * t710 - t1022 * t871 + t744 * t668 + t684 * t766 + t718 * t709 + t758 * t733 - t956 * t748) * MDP(17) + ((t732 * t944 - t857 * t873) * MDP(14) + (t666 * t944 - t857 * t861) * MDP(16) + (-t668 * t857 + t733 * t944) * MDP(13) + (-g(1) * t966 - t667 * t944 - t857 * t872) * MDP(17) + (t857 * t905 - t906 * t944) * MDP(7) + (t1022 * t944 - t748 * t857) * MDP(15)) * t846 + (-t1022 * t708 - t765 * t748) * MDP(14) + (t1022 * t709 + t748 * t766) * MDP(13) + (g(1) * t854 - g(2) * t858) * MDP(2) + (g(1) * t858 + g(2) * t854) * MDP(3) + (t853 * t905 + t906 * t943) * t1003 + (t668 * t766 + t709 * t733) * MDP(11) + (-t529 * t695 - t550 * t674 - t590 * t654 - t608 * t616) * MDP(27) + (t608 * t695 + t654 * t674) * MDP(28) + (-t525 * t696 - t526 * t695 - t547 * t881 - t548 * t677 - t570 * t655 - t571 * t654 - t595 * t612 - t596 * t611 - t894) * MDP(18) + t849 * t987; (pkin(1) * t928 + t753 * t819 + (pkin(8) * t937 + g(3)) * t980 + t893 + t921) * MDP(10) + (-t645 * t611 - t514 * t774 + t716 * t587 + t524 * t988 - g(1) * (t769 * t984 + t770 * t847) - g(2) * (t767 * t984 + t768 * t847) - (-t844 * t982 + t847 * t853) * t1006 - t963 * t677 + t958 * t650 + t909 * t568 - t952 * t539) * MDP(21) + (t644 * t611 + t513 * t774 + t716 * t586 + t524 * t989 - g(1) * (-t769 * t983 + t770 * t844) - g(2) * (-t767 * t983 + t768 * t844) - (t837 * t975 + t844 * t853) * t1006 + t964 * t677 + t958 * t648 + t910 * t568 + t952 * t538) * MDP(20) + ((t621 * t855 - t628 * t851) * t608 + t509 * t774 + t687 * t529 + t518 * t693 - g(1) * (-t769 * t985 + t770 * t834) - g(2) * (-t767 * t985 + t768 * t834) - (t834 * t853 + t836 * t982) * t1006 + (t851 * t890 - t855 * t891) * t674 + t960 * t590 + t961 * t555 + t952 * t515) * MDP(29) + (t514 * t645 + t513 * t644 + t524 * t716 - g(1) * (-t769 * t889 + t954) - g(2) * (-t767 * t889 + t955) - g(3) * t779 - (t857 * t889 - t971) * t1006 + t958 * t568 + t963 * t539 + t964 * t538) * MDP(23) - t1022 * MDP(15) * t920 + (-(t621 * t851 + t628 * t855) * t608 - t508 * t774 + t687 * t528 - t518 * t694 - g(1) * (t769 * t986 + t770 * t836) - g(2) * (t767 * t986 + t768 * t836) - (-t834 * t982 + t836 * t853) * t1006 + (t851 * t891 + t855 * t890) * t674 - t960 * t882 + t962 * t555 - t952 * t516) * MDP(30) + (-t528 * t694 - t882 * t962) * MDP(24) + (t528 * t774 - t608 * t694 + t674 * t962 - t882 * t952) * MDP(26) + (-t528 * t693 + t529 * t694 - t590 * t962 + t882 * t961) * MDP(25) + (t1019 * t570 - t525 * t776 - t526 * t774 - t952 * t571 - t611 * t717 + t612 * t716 - t957 * t677 - t959 * t881 - t867) * MDP(18) + (t608 * t774 + t674 * t952) * MDP(28) + (t1007 * t981 + t756 * t819 + t868 - t902) * MDP(9) + (-t920 * t938 + t817) * MDP(7) + t987 + (-t538 * t909 - t539 * t910 - t586 * t645 - t587 * t644 - t648 * t963 - t650 * t964 + t776 * t886 + t835 * t868) * MDP(22) + (t668 * t852 + t856 * t996) * MDP(11) + ((t668 + t997) * t856 + (t873 - t996) * t852) * MDP(12) - t853 * MDP(4) * t928 + (t526 * t717 - t525 * t716 - t618 * t833 - g(1) * t954 - g(2) * t955 - g(3) * (-t846 * t971 + t779) + t1017 * t675 + t957 * t571 + t959 * t570) * MDP(19) + (-pkin(2) * t903 - t737 * t1022 - t666 * t920 + t756 * t732 + (t1022 * t753 + t863) * t852 + (-t860 + t1005) * t856) * MDP(16) + (-pkin(2) * t668 + t1022 * t953 + t667 * t920 - t756 * t733 + t852 * t860 + t856 * t863) * MDP(17) + (-t1022 * t942 + t748 * t856 + (t1022 * t852 * t857 - t732 * t853) * t947) * MDP(14) + (t1022 * t941 + t852 * t748 + (-t1022 * t967 - t733 * t853) * t947) * MDP(13) + (t938 * t945 + t935) * t1003 + (-t529 * t774 - t590 * t952 - t608 * t693 - t674 * t961) * MDP(27) + t948 * MDP(5) * t981; -t733 * t732 * MDP(11) + (-t732 ^ 2 + t733 ^ 2) * MDP(12) + (t668 - t997) * MDP(13) + (t873 + t996) * MDP(14) + t748 * MDP(15) + (-g(1) * t710 - g(2) * t878 + g(3) * t765 + t1022 * t667 - t718 * t733 + t861) * MDP(16) + (g(1) * t711 + g(2) * t907 + g(3) * t766 + t1022 * t666 - t718 * t732 + t872) * MDP(17) + ((-t611 * t845 - t612 * t848) * pkin(3) + (t571 - t574) * t881 + (-t570 + t575) * t677) * MDP(18) + (-g(1) * t800 - g(3) * t826 + t570 * t574 - t571 * t575 + (g(2) * t924 + t525 * t848 + t526 * t845 - t675 * t733 + t852 * t867) * pkin(3)) * MDP(19) + (-t538 * t881 - t543 * t677 - t574 * t648 + t586 * t832 + t844 * t869 + t847 * t866) * MDP(20) + (t539 * t881 + t544 * t677 - t574 * t650 + t587 * t832 - t844 * t866 + t847 * t869) * MDP(21) + (-g(1) * t705 - g(2) * t701 - g(3) * t743 + t543 * t650 + t544 * t648 + (-qJD(5) * t648 - t538 * t677 - t586 * t828 + t514) * t847 + (qJD(5) * t650 - t539 * t677 + t587 * t828 - t513) * t844) * MDP(22) + (t524 * t832 - t539 * t544 - t538 * t543 - t568 * t574 - g(1) * (-pkin(3) * t990 - pkin(4) * t704 + qJ(5) * t705 + t800) - g(2) * (pkin(3) * t878 - pkin(4) * t700 + qJ(5) * t701) - g(3) * (-pkin(3) * t927 - pkin(4) * t742 + qJ(5) * t743 + t826) + (-t513 * t844 + t514 * t847) * t828 - t883 * qJD(5)) * MDP(23) + (t528 * t777 + t882 * t951) * MDP(24) + (-t528 * t775 - t529 * t777 + t590 * t951 + t882 * t950) * MDP(25) + (t1001 - t1008) * MDP(26) + (t892 + t1002) * MDP(27) - t674 * t881 * MDP(28) + ((-t771 * t855 - t772 * t851) * t608 + t789 * t529 + t518 * t775 - t515 * t881 - t565 * t590 + (t851 * t874 - t855 * t875) * t674 + t950 * t555 + t870 * t836) * MDP(29) + (-(-t771 * t851 + t772 * t855) * t608 + t789 * t528 + t518 * t777 + t516 * t881 + t565 * t882 + (t851 * t875 + t855 * t874) * t674 - t951 * t555 - t870 * t834) * MDP(30); -t881 ^ 2 * MDP(18) + (t570 * t881 + t618 - t868) * MDP(19) + (t611 * t847 - t648 * t881) * MDP(20) + (-t611 * t844 - t650 * t881) * MDP(21) + (-t586 * t844 - t587 * t847) * MDP(22) + (-t568 * t881 - t868 - t886) * MDP(23) + (t892 - t1002) * MDP(29) + (t1001 + t1008) * MDP(30) - (-t571 * MDP(19) + (t648 * t847 - t650 * t844) * MDP(22) + t883 * MDP(23) + (t844 * MDP(20) + t847 * MDP(21) + MDP(18)) * t677) * t677; (t650 * t677 + t586) * MDP(20) + (-t648 * t677 + t587) * MDP(21) + (-t648 ^ 2 - t650 ^ 2) * MDP(22) + (t538 * t650 + t539 * t648 - t866) * MDP(23) + (t529 - t1013) * MDP(29) + (t528 - t1016) * MDP(30); -t882 * t590 * MDP(24) + (-t590 ^ 2 + t882 ^ 2) * MDP(25) + (t923 + t1016) * MDP(26) + (-t911 - t1013) * MDP(27) + t608 * MDP(28) + (t516 * t674 + t555 * t882 - g(1) * t662 + g(2) * t1010 - g(3) * (-t743 * t834 - t836 * t977) + t912) * MDP(29) + (t515 * t674 + t555 * t590 + g(1) * t663 + g(2) * t1009 - g(3) * (-t743 * t836 + t834 * t977) - t887) * MDP(30) + (-MDP(26) * t999 + MDP(27) * t882 - MDP(29) * t516 - MDP(30) * t515) * qJD(6);];
tau  = t1;
