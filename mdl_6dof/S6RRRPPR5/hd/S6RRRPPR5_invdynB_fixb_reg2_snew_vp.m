% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 05:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 05:07:35
% EndTime: 2019-05-07 05:08:59
% DurationCPUTime: 79.00s
% Computational Cost: add. (883908->1114), mult. (1975198->1816), div. (0->0), fcn. (1616041->14), ass. (0->805)
t1256 = sin(pkin(12));
t1263 = sin(qJ(3));
t1267 = cos(qJ(3));
t1261 = cos(pkin(6));
t1420 = qJD(1) * t1261;
t1363 = qJD(2) + t1420;
t1258 = sin(pkin(6));
t1264 = sin(qJ(2));
t1390 = t1258 * t1264;
t1378 = qJD(1) * t1390;
t1216 = -t1263 * t1378 + t1267 * t1363;
t1217 = t1263 * t1363 + t1267 * t1378;
t1257 = sin(pkin(11));
t1260 = cos(pkin(11));
t1182 = t1257 * t1216 + t1260 * t1217;
t1268 = cos(qJ(2));
t1389 = t1258 * t1268;
t1242 = qJD(1) * t1389 - qJD(3);
t1259 = cos(pkin(12));
t1154 = t1182 * t1256 + t1259 * t1242;
t1156 = t1182 * t1259 - t1242 * t1256;
t1091 = t1156 * t1154;
t1419 = qJD(1) * t1268;
t1366 = qJD(2) * t1419;
t1380 = t1264 * qJDD(1);
t1224 = (t1366 + t1380) * t1258;
t1357 = qJDD(1) * t1261 + qJDD(2);
t1167 = t1216 * qJD(3) + t1267 * t1224 + t1263 * t1357;
t1359 = t1263 * t1224 - t1267 * t1357;
t1294 = qJD(3) * t1217 + t1359;
t1108 = t1167 * t1257 + t1260 * t1294;
t1442 = -t1091 + t1108;
t1452 = t1256 * t1442;
t1320 = qJD(1) * t1363;
t1299 = t1258 * t1320;
t1451 = t1259 * t1442;
t1262 = sin(qJ(6));
t1266 = cos(qJ(6));
t1085 = t1266 * t1154 + t1156 * t1262;
t1087 = -t1154 * t1262 + t1156 * t1266;
t1002 = t1087 * t1085;
t1349 = qJDD(6) + t1108;
t1444 = -t1002 + t1349;
t1450 = t1262 * t1444;
t1449 = t1266 * t1444;
t1356 = t1363 ^ 2;
t1381 = qJDD(1) * t1258;
t1383 = -qJD(2) * t1378 + t1268 * t1381;
t1365 = -qJDD(3) + t1383;
t1180 = -t1260 * t1216 + t1217 * t1257;
t1404 = t1180 * t1182;
t1304 = -t1365 - t1404;
t1448 = t1257 * t1304;
t1447 = t1260 * t1304;
t1400 = t1216 * t1217;
t1303 = -t1365 + t1400;
t1446 = t1263 * t1303;
t1445 = t1267 * t1303;
t1176 = qJD(6) + t1180;
t1049 = t1176 * t1085;
t1109 = t1260 * t1167 - t1257 * t1294;
t1079 = -t1109 * t1256 - t1259 * t1365;
t1080 = t1259 * t1109 - t1256 * t1365;
t1278 = qJD(6) * t1085 - t1079 * t1262 - t1080 * t1266;
t1443 = -t1049 - t1278;
t1107 = t1180 * t1154;
t1015 = -t1107 - t1080;
t1013 = -t1107 + t1080;
t1163 = t1180 * t1242;
t1067 = t1163 + t1109;
t1199 = t1216 * t1242;
t1139 = -t1199 - t1167;
t1137 = -t1199 + t1167;
t1253 = t1258 ^ 2;
t1441 = (qJD(1) * (t1261 ^ 2 + t1253) + qJD(2) * t1261) * t1258;
t1362 = -t1266 * t1079 + t1262 * t1080;
t907 = (qJD(6) - t1176) * t1087 + t1362;
t1134 = (qJD(3) + t1242) * t1217 + t1359;
t1440 = qJD(1) ^ 2;
t1083 = t1085 ^ 2;
t1084 = t1087 ^ 2;
t1439 = t1154 ^ 2;
t1153 = t1156 ^ 2;
t1175 = t1176 ^ 2;
t1438 = t1180 ^ 2;
t1179 = t1182 ^ 2;
t1437 = t1216 ^ 2;
t1215 = t1217 ^ 2;
t1220 = t1242 ^ 2;
t1436 = 2 * qJD(4);
t1435 = pkin(2) * t1264;
t1434 = pkin(2) * t1268;
t1433 = pkin(4) * t1257;
t1432 = pkin(8) * t1258;
t1431 = t1261 * g(3);
t1114 = pkin(4) * t1180 - qJ(5) * t1182;
t1265 = sin(qJ(1));
t1269 = cos(qJ(1));
t1244 = g(1) * t1269 + t1265 * g(2);
t1221 = -pkin(1) * t1440 + pkin(8) * t1381 - t1244;
t1243 = t1265 * g(1) - t1269 * g(2);
t1275 = qJDD(1) * pkin(1) + t1432 * t1440 + t1243;
t1274 = t1261 * t1275;
t1172 = -g(3) * t1390 + t1268 * t1221 + t1264 * t1274;
t1355 = -pkin(9) * t1264 - t1434;
t1302 = t1440 * t1355;
t1272 = t1253 * t1268 * t1302 - pkin(2) * t1356 + pkin(9) * t1357 + t1172;
t1297 = t1268 * t1320;
t1298 = t1264 * t1320;
t1273 = -t1431 - t1224 * pkin(9) - t1383 * pkin(2) + (pkin(2) * t1298 - pkin(9) * t1297 - t1275) * t1258;
t1043 = t1263 * t1272 - t1267 * t1273;
t1271 = pkin(3) * t1303 + qJ(4) * t1139 - t1043;
t1044 = t1263 * t1273 + t1267 * t1272;
t1191 = -pkin(3) * t1242 - qJ(4) * t1217;
t990 = -pkin(3) * t1437 - qJ(4) * t1294 + t1242 * t1191 + t1044;
t884 = -0.2e1 * qJD(4) * t1180 + t1257 * t1271 + t1260 * t990;
t859 = -pkin(4) * t1220 - qJ(5) * t1365 - t1180 * t1114 + t884;
t1360 = t1264 * t1221 - t1268 * t1274;
t1126 = -t1357 * pkin(2) - t1356 * pkin(9) + (t1268 * g(3) + t1302 * t1390) * t1258 + t1360;
t1029 = t1294 * pkin(3) - t1437 * qJ(4) + t1217 * t1191 + qJDD(4) + t1126;
t1401 = t1182 * t1242;
t1064 = t1108 - t1401;
t919 = pkin(4) * t1064 - qJ(5) * t1067 + t1029;
t796 = 0.2e1 * qJD(5) * t1156 + t1256 * t859 - t1259 * t919;
t759 = pkin(5) * t1442 + pkin(10) * t1015 - t796;
t1100 = pkin(5) * t1180 - pkin(10) * t1156;
t797 = -0.2e1 * qJD(5) * t1154 + t1256 * t919 + t1259 * t859;
t767 = -pkin(5) * t1439 + pkin(10) * t1079 - t1100 * t1180 + t797;
t709 = t1262 * t759 + t1266 * t767;
t708 = t1262 * t767 - t1266 * t759;
t661 = t1262 * t709 - t1266 * t708;
t1430 = t1256 * t661;
t1364 = t1257 * t990 - t1260 * t1271;
t858 = qJDD(5) + t1365 * pkin(4) - t1220 * qJ(5) + (t1436 + t1114) * t1182 + t1364;
t1429 = t1256 * t858;
t1428 = t1259 * t661;
t1427 = t1259 * t858;
t824 = -t1079 * pkin(5) - pkin(10) * t1439 + t1156 * t1100 + t858;
t1426 = t1262 * t824;
t958 = t1002 + t1349;
t1425 = t1262 * t958;
t883 = t1182 * t1436 + t1364;
t807 = t1257 * t884 - t1260 * t883;
t1424 = t1263 * t807;
t1423 = t1266 * t824;
t1422 = t1266 * t958;
t1421 = t1267 * t807;
t1019 = t1091 + t1108;
t1418 = t1019 * t1256;
t1417 = t1019 * t1259;
t1416 = t1029 * t1257;
t1415 = t1029 * t1260;
t1101 = t1365 - t1404;
t1414 = t1101 * t1257;
t1413 = t1101 * t1260;
t1412 = t1108 * t1257;
t1411 = t1126 * t1263;
t1410 = t1126 * t1267;
t1409 = t1156 * t1180;
t1158 = t1365 + t1400;
t1408 = t1158 * t1263;
t1407 = t1158 * t1267;
t1406 = t1176 * t1262;
t1405 = t1176 * t1266;
t1403 = t1180 * t1256;
t1402 = t1180 * t1259;
t1391 = t1253 * t1440;
t1241 = t1268 * t1264 * t1391;
t1222 = -t1241 + t1357;
t1399 = t1222 * t1264;
t1398 = t1222 * t1268;
t1223 = t1241 + t1357;
t1397 = t1223 * t1264;
t1396 = t1223 * t1268;
t1395 = t1242 * t1257;
t1394 = t1242 * t1260;
t1393 = t1242 * t1263;
t1392 = t1242 * t1267;
t1388 = t1261 * t1264;
t1201 = t1258 * t1275 + t1431;
t1387 = t1264 * t1201;
t1386 = t1268 * t1201;
t1254 = t1264 ^ 2;
t1255 = t1268 ^ 2;
t1382 = t1254 + t1255;
t1379 = -pkin(4) * t1260 - pkin(3);
t1376 = t1257 * t1002;
t1375 = t1260 * t1002;
t1374 = t1257 * t1091;
t1373 = t1260 * t1091;
t1372 = t1264 * t1404;
t1371 = t1268 * t1404;
t1370 = t1264 * t1400;
t1369 = t1268 * t1400;
t1368 = t1254 * t1391;
t1367 = t1255 * t1391;
t808 = t1257 * t883 + t1260 * t884;
t662 = t1262 * t708 + t1266 * t709;
t961 = t1043 * t1263 + t1267 * t1044;
t1203 = -t1243 * t1265 - t1269 * t1244;
t1239 = qJDD(1) * t1269 - t1265 * t1440;
t1354 = -pkin(7) * t1239 - g(3) * t1265;
t1353 = t1264 * t1365;
t1352 = t1268 * t1365;
t1211 = -t1368 - t1356;
t1183 = -t1211 * t1264 - t1398;
t1351 = pkin(8) * t1183 - t1387;
t1228 = -t1356 - t1367;
t1188 = t1228 * t1268 - t1397;
t1350 = pkin(8) * t1188 + t1386;
t729 = t1256 * t797 - t1259 * t796;
t730 = t1256 * t796 + t1259 * t797;
t621 = t1259 * t662 - t1430;
t617 = t1257 * t621 - t1260 * t824;
t618 = t1257 * t824 + t1260 * t621;
t593 = -t1263 * t617 + t1267 * t618;
t620 = t1256 * t662 + t1428;
t1348 = t1264 * t593 - t1268 * t620;
t705 = t1257 * t730 - t1260 * t858;
t706 = t1257 * t858 + t1260 * t730;
t660 = -t1263 * t705 + t1267 * t706;
t1347 = t1264 * t660 - t1268 * t729;
t911 = -t1049 + t1278;
t836 = -t1262 * t907 + t1266 * t911;
t838 = -t1262 * t911 - t1266 * t907;
t751 = -t1256 * t836 + t1259 * t838;
t949 = -t1083 - t1084;
t737 = t1257 * t751 - t1260 * t949;
t738 = t1257 * t949 + t1260 * t751;
t676 = -t1263 * t737 + t1267 * t738;
t749 = t1256 * t838 + t1259 * t836;
t1346 = t1264 * t676 - t1268 * t749;
t1001 = -t1084 + t1083;
t906 = (qJD(6) + t1176) * t1087 + t1362;
t835 = -t1262 * t906 + t1266 * t1443;
t837 = -t1262 * t1443 - t1266 * t906;
t750 = -t1256 * t835 + t1259 * t837;
t741 = t1001 * t1260 + t1257 * t750;
t742 = -t1001 * t1257 + t1260 * t750;
t680 = -t1263 * t741 + t1267 * t742;
t748 = -t1256 * t837 - t1259 * t835;
t1345 = t1264 * t680 + t1268 * t748;
t986 = -t1175 - t1083;
t872 = t1262 * t986 + t1449;
t873 = t1266 * t986 - t1450;
t804 = -t1256 * t872 + t1259 * t873;
t754 = t1257 * t804 - t1260 * t906;
t755 = t1257 * t906 + t1260 * t804;
t703 = -t1263 * t754 + t1267 * t755;
t803 = t1256 * t873 + t1259 * t872;
t1344 = t1264 * t703 - t1268 * t803;
t1022 = -t1084 - t1175;
t894 = t1022 * t1266 - t1425;
t895 = -t1022 * t1262 - t1422;
t826 = -t1256 * t894 + t1259 * t895;
t768 = t1257 * t826 - t1260 * t1443;
t769 = t1257 * t1443 + t1260 * t826;
t712 = -t1263 * t768 + t1267 * t769;
t825 = t1256 * t895 + t1259 * t894;
t1343 = t1264 * t712 - t1268 * t825;
t1046 = -t1084 + t1175;
t913 = t1046 * t1266 + t1450;
t915 = -t1046 * t1262 + t1449;
t842 = -t1256 * t913 + t1259 * t915;
t774 = t1257 * t842 + t1260 * t911;
t776 = -t1257 * t911 + t1260 * t842;
t718 = -t1263 * t774 + t1267 * t776;
t840 = -t1256 * t915 - t1259 * t913;
t1342 = t1264 * t718 + t1268 * t840;
t1045 = t1083 - t1175;
t914 = t1045 * t1262 + t1422;
t916 = t1045 * t1266 - t1425;
t843 = -t1256 * t914 + t1259 * t916;
t775 = t1257 * t843 + t1260 * t907;
t777 = -t1257 * t907 + t1260 * t843;
t719 = -t1263 * t775 + t1267 * t777;
t841 = -t1256 * t916 - t1259 * t914;
t1341 = t1264 * t719 + t1268 * t841;
t944 = -qJD(6) * t1087 - t1362;
t902 = t1085 * t1406 + t1266 * t944;
t903 = t1085 * t1405 - t1262 * t944;
t833 = -t1256 * t902 + t1259 * t903;
t799 = t1257 * t833 + t1375;
t801 = t1260 * t833 - t1376;
t733 = -t1263 * t799 + t1267 * t801;
t831 = -t1256 * t903 - t1259 * t902;
t1340 = t1264 * t733 + t1268 * t831;
t904 = t1087 * t1405 - t1262 * t1278;
t905 = -t1087 * t1406 - t1266 * t1278;
t834 = -t1256 * t904 + t1259 * t905;
t800 = t1257 * t834 - t1375;
t802 = t1260 * t834 + t1376;
t734 = -t1263 * t800 + t1267 * t802;
t832 = -t1256 * t905 - t1259 * t904;
t1339 = t1264 * t734 + t1268 * t832;
t962 = (-t1085 * t1262 - t1087 * t1266) * t1176;
t963 = (-t1085 * t1266 + t1087 * t1262) * t1176;
t871 = -t1256 * t962 + t1259 * t963;
t855 = t1257 * t871 - t1260 * t1349;
t856 = t1257 * t1349 + t1260 * t871;
t779 = -t1263 * t855 + t1267 * t856;
t870 = -t1256 * t963 - t1259 * t962;
t1338 = t1264 * t779 + t1268 * t870;
t1038 = t1153 + t1439;
t1010 = -t1079 - t1409;
t932 = -t1010 * t1259 - t1015 * t1256;
t874 = t1038 * t1260 + t1257 * t932;
t875 = -t1038 * t1257 + t1260 * t932;
t806 = -t1263 * t874 + t1267 * t875;
t930 = -t1010 * t1256 + t1015 * t1259;
t1337 = t1264 * t806 - t1268 * t930;
t1011 = t1079 - t1409;
t1055 = -t1438 - t1439;
t941 = t1055 * t1259 - t1452;
t885 = t1011 * t1260 + t1257 * t941;
t886 = -t1011 * t1257 + t1260 * t941;
t812 = -t1263 * t885 + t1267 * t886;
t940 = t1055 * t1256 + t1451;
t1336 = t1264 * t812 - t1268 * t940;
t1073 = -t1153 - t1438;
t948 = -t1073 * t1256 - t1417;
t887 = -t1013 * t1260 + t1257 * t948;
t888 = t1013 * t1257 + t1260 * t948;
t817 = -t1263 * t887 + t1267 * t888;
t947 = t1073 * t1259 - t1418;
t1335 = t1264 * t817 - t1268 * t947;
t1090 = -t1153 + t1439;
t931 = t1011 * t1259 - t1013 * t1256;
t891 = t1090 * t1260 + t1257 * t931;
t892 = -t1090 * t1257 + t1260 * t931;
t821 = -t1263 * t891 + t1267 * t892;
t929 = -t1011 * t1256 - t1013 * t1259;
t1334 = t1264 * t821 + t1268 * t929;
t1105 = -t1153 + t1438;
t970 = -t1105 * t1256 + t1451;
t897 = t1015 * t1260 + t1257 * t970;
t899 = -t1015 * t1257 + t1260 * t970;
t829 = -t1263 * t897 + t1267 * t899;
t968 = -t1105 * t1259 - t1452;
t1333 = t1264 * t829 + t1268 * t968;
t1104 = -t1438 + t1439;
t971 = t1104 * t1259 - t1418;
t898 = t1010 * t1260 + t1257 * t971;
t900 = -t1010 * t1257 + t1260 * t971;
t830 = -t1263 * t898 + t1267 * t900;
t969 = -t1104 * t1256 - t1417;
t1332 = t1264 * t830 + t1268 * t969;
t1003 = -t1079 * t1259 - t1154 * t1403;
t1004 = -t1079 * t1256 + t1154 * t1402;
t951 = t1004 * t1257 + t1373;
t953 = t1004 * t1260 - t1374;
t868 = -t1263 * t951 + t1267 * t953;
t1331 = t1003 * t1268 + t1264 * t868;
t1005 = -t1080 * t1256 - t1156 * t1402;
t1006 = t1080 * t1259 - t1156 * t1403;
t952 = t1006 * t1257 - t1373;
t954 = t1006 * t1260 + t1374;
t869 = -t1263 * t952 + t1267 * t954;
t1330 = t1005 * t1268 + t1264 * t869;
t1025 = (t1154 * t1256 + t1156 * t1259) * t1180;
t1026 = (-t1154 * t1259 + t1156 * t1256) * t1180;
t1099 = t1260 * t1108;
t976 = t1026 * t1257 - t1099;
t977 = t1026 * t1260 + t1412;
t877 = -t1263 * t976 + t1267 * t977;
t1329 = t1025 * t1268 + t1264 * t877;
t740 = t1267 * t808 - t1424;
t1328 = -t1029 * t1268 + t1264 * t740;
t1111 = -t1438 - t1220;
t1027 = t1111 * t1257 + t1447;
t1028 = t1111 * t1260 - t1448;
t936 = -t1027 * t1263 + t1028 * t1267;
t1327 = -t1064 * t1268 + t1264 * t936;
t1065 = t1108 + t1401;
t1161 = t1438 - t1220;
t1052 = t1161 * t1257 - t1413;
t1054 = t1161 * t1260 + t1414;
t967 = -t1052 * t1263 + t1054 * t1267;
t1326 = t1065 * t1268 + t1264 * t967;
t1144 = -t1179 - t1220;
t1041 = t1144 * t1260 + t1414;
t1042 = -t1144 * t1257 + t1413;
t956 = -t1041 * t1263 + t1042 * t1267;
t1325 = -t1067 * t1268 + t1264 * t956;
t1069 = t1163 - t1109;
t1162 = -t1179 + t1220;
t1051 = t1162 * t1260 + t1448;
t1053 = -t1162 * t1257 + t1447;
t966 = -t1051 * t1263 + t1053 * t1267;
t1324 = t1069 * t1268 + t1264 * t966;
t1074 = -t1438 - t1179;
t979 = -t1065 * t1257 + t1069 * t1260;
t981 = -t1065 * t1260 - t1069 * t1257;
t882 = -t1263 * t979 + t1267 * t981;
t1323 = -t1074 * t1268 + t1264 * t882;
t1115 = -t1179 + t1438;
t978 = -t1064 * t1257 + t1067 * t1260;
t980 = -t1064 * t1260 - t1067 * t1257;
t881 = -t1263 * t978 + t1267 * t980;
t1322 = t1115 * t1268 + t1264 * t881;
t1321 = -t1126 * t1268 + t1264 * t961;
t1319 = t1253 * t1264 * t1366;
t960 = -t1043 * t1267 + t1044 * t1263;
t1135 = (-qJD(3) + t1242) * t1217 - t1359;
t1062 = t1135 * t1267 - t1137 * t1263;
t1184 = -t1215 + t1437;
t1318 = t1062 * t1264 + t1184 * t1268;
t1063 = -t1134 * t1267 - t1139 * t1263;
t1157 = t1215 + t1437;
t1317 = t1063 * t1264 + t1157 * t1268;
t1170 = -t1220 - t1437;
t1097 = t1170 * t1267 - t1446;
t1316 = t1097 * t1264 + t1135 * t1268;
t1185 = -t1215 - t1220;
t1113 = -t1185 * t1263 + t1407;
t1315 = t1113 * t1264 - t1137 * t1268;
t1193 = -t1215 + t1220;
t1118 = -t1193 * t1263 + t1445;
t1314 = t1118 * t1264 + t1139 * t1268;
t1192 = -t1220 + t1437;
t1119 = t1192 * t1267 + t1408;
t1313 = t1119 * t1264 + t1134 * t1268;
t1171 = g(3) * t1389 + t1360;
t1312 = -t1268 * t1171 + t1264 * t1172;
t1110 = t1171 * t1264 + t1172 * t1268;
t1232 = t1258 * t1297;
t1195 = t1232 + t1224;
t1231 = t1258 * t1298;
t1198 = -t1231 + t1383;
t1311 = t1195 * t1268 + t1198 * t1264;
t1196 = -t1232 + t1224;
t1197 = t1231 + t1383;
t1310 = -t1196 * t1268 + t1197 * t1264;
t1309 = t1211 * t1268 - t1399;
t1227 = -t1356 + t1367;
t1308 = t1227 * t1264 + t1398;
t1226 = t1356 - t1368;
t1307 = t1226 * t1268 + t1397;
t1306 = t1228 * t1264 + t1396;
t1202 = t1243 * t1269 - t1265 * t1244;
t1305 = t1258 * t1357;
t1056 = -t1180 * t1395 - t1099;
t1057 = -t1180 * t1394 + t1412;
t974 = -t1056 * t1263 + t1057 * t1267;
t1301 = t1264 * t974 + t1371;
t1058 = t1109 * t1257 - t1182 * t1394;
t1059 = t1109 * t1260 + t1182 * t1395;
t975 = -t1058 * t1263 + t1059 * t1267;
t1300 = t1264 * t975 - t1371;
t1129 = t1216 * t1392 + t1263 * t1294;
t1296 = t1129 * t1264 - t1369;
t1131 = t1167 * t1267 + t1217 * t1393;
t1295 = t1131 * t1264 + t1369;
t648 = -pkin(5) * t824 + pkin(10) * t662;
t596 = -pkin(10) * t1428 - qJ(5) * t620 - t1256 * t648;
t608 = -pkin(4) * t620 - pkin(5) * t661;
t578 = -pkin(3) * t620 + qJ(4) * t618 + t1257 * t596 + t1260 * t608;
t583 = -qJ(4) * t617 - t1257 * t608 + t1260 * t596;
t592 = t1263 * t618 + t1267 * t617;
t570 = -pkin(9) * t592 - t1263 * t578 + t1267 * t583;
t579 = -pkin(2) * t592 - pkin(3) * t617 + pkin(4) * t824 + pkin(10) * t1430 - qJ(5) * t621 - t1259 * t648;
t588 = t1264 * t620 + t1268 * t593;
t1293 = pkin(8) * t588 + t1264 * t570 + t1268 * t579;
t647 = -pkin(5) * t949 + pkin(10) * t838 + t662;
t649 = -pkin(10) * t836 - t661;
t612 = -qJ(5) * t749 - t1256 * t647 + t1259 * t649;
t713 = -pkin(4) * t749 - pkin(5) * t836;
t600 = -pkin(3) * t749 + qJ(4) * t738 + t1257 * t612 + t1260 * t713;
t605 = -qJ(4) * t737 - t1257 * t713 + t1260 * t612;
t675 = t1263 * t738 + t1267 * t737;
t586 = -pkin(9) * t675 - t1263 * t600 + t1267 * t605;
t599 = -pkin(2) * t675 - pkin(3) * t737 + pkin(4) * t949 - qJ(5) * t751 - t1256 * t649 - t1259 * t647;
t657 = t1264 * t749 + t1268 * t676;
t1292 = pkin(8) * t657 + t1264 * t586 + t1268 * t599;
t667 = -pkin(4) * t803 - pkin(5) * t872 + t708;
t744 = -pkin(5) * t906 + pkin(10) * t873 - t1423;
t760 = -pkin(10) * t872 + t1426;
t668 = -qJ(5) * t803 - t1256 * t744 + t1259 * t760;
t622 = -pkin(3) * t803 + qJ(4) * t755 + t1257 * t668 + t1260 * t667;
t626 = -qJ(4) * t754 - t1257 * t667 + t1260 * t668;
t702 = t1263 * t755 + t1267 * t754;
t594 = -pkin(9) * t702 - t1263 * t622 + t1267 * t626;
t634 = -pkin(2) * t702 - pkin(3) * t754 + pkin(4) * t906 - qJ(5) * t804 - t1256 * t760 - t1259 * t744;
t678 = t1264 * t803 + t1268 * t703;
t1291 = pkin(8) * t678 + t1264 * t594 + t1268 * t634;
t673 = -pkin(4) * t825 - pkin(5) * t894 + t709;
t747 = -pkin(5) * t1443 + pkin(10) * t895 + t1426;
t765 = -pkin(10) * t894 + t1423;
t677 = -qJ(5) * t825 - t1256 * t747 + t1259 * t765;
t625 = -pkin(3) * t825 + qJ(4) * t769 + t1257 * t677 + t1260 * t673;
t632 = -qJ(4) * t768 - t1257 * t673 + t1260 * t677;
t711 = t1263 * t769 + t1267 * t768;
t597 = -pkin(9) * t711 - t1263 * t625 + t1267 * t632;
t637 = -pkin(2) * t711 - pkin(3) * t768 + pkin(4) * t1443 - qJ(5) * t826 - t1256 * t765 - t1259 * t747;
t685 = t1264 * t825 + t1268 * t712;
t1290 = pkin(8) * t685 + t1264 * t597 + t1268 * t637;
t633 = qJ(4) * t706 + (-qJ(5) * t1257 + t1379) * t729;
t641 = -qJ(4) * t705 + (-qJ(5) * t1260 + t1433) * t729;
t659 = t1263 * t706 + t1267 * t705;
t598 = -pkin(9) * t659 - t1263 * t633 + t1267 * t641;
t619 = -pkin(2) * t659 - pkin(3) * t705 + pkin(4) * t858 - qJ(5) * t730;
t639 = t1264 * t729 + t1268 * t660;
t1289 = pkin(8) * t639 + t1264 * t598 + t1268 * t619;
t720 = -qJ(5) * t930 - t729;
t683 = qJ(4) * t875 + t1257 * t720 + t1379 * t930;
t690 = -qJ(4) * t874 + t1260 * t720 + t1433 * t930;
t805 = t1263 * t875 + t1267 * t874;
t638 = -pkin(9) * t805 - t1263 * t683 + t1267 * t690;
t669 = -pkin(2) * t805 - pkin(3) * t874 - pkin(4) * t1038 - qJ(5) * t932 - t730;
t762 = t1264 * t930 + t1268 * t806;
t1288 = pkin(8) * t762 + t1264 * t638 + t1268 * t669;
t761 = -pkin(4) * t940 + t796;
t818 = -qJ(5) * t940 + t1429;
t695 = -pkin(3) * t940 + qJ(4) * t886 + t1257 * t818 + t1260 * t761;
t704 = -qJ(4) * t885 - t1257 * t761 + t1260 * t818;
t811 = t1263 * t886 + t1267 * t885;
t643 = -pkin(9) * t811 - t1263 * t695 + t1267 * t704;
t714 = -pkin(2) * t811 - pkin(3) * t885 - pkin(4) * t1011 - qJ(5) * t941 + t1427;
t773 = t1264 * t940 + t1268 * t812;
t1287 = pkin(8) * t773 + t1264 * t643 + t1268 * t714;
t763 = -pkin(4) * t947 + t797;
t822 = -qJ(5) * t947 + t1427;
t697 = -pkin(3) * t947 + qJ(4) * t888 + t1257 * t822 + t1260 * t763;
t710 = -qJ(4) * t887 - t1257 * t763 + t1260 * t822;
t816 = t1263 * t888 + t1267 * t887;
t646 = -pkin(9) * t816 - t1263 * t697 + t1267 * t710;
t715 = -pkin(2) * t816 - pkin(3) * t887 + pkin(4) * t1013 - qJ(5) * t948 - t1429;
t780 = t1264 * t947 + t1268 * t817;
t1286 = pkin(8) * t780 + t1264 * t646 + t1268 * t715;
t739 = t1263 * t808 + t1421;
t786 = -pkin(3) * t1029 + qJ(4) * t808;
t672 = -pkin(9) * t739 - qJ(4) * t1421 - t1263 * t786;
t701 = -pkin(2) * t739 - pkin(3) * t807;
t728 = t1029 * t1264 + t1268 * t740;
t1285 = pkin(8) * t728 + t1264 * t672 + t1268 * t701;
t764 = -pkin(3) * t1074 + qJ(4) * t981 + t808;
t783 = -qJ(4) * t979 - t807;
t880 = t1263 * t981 + t1267 * t979;
t696 = -pkin(9) * t880 - t1263 * t764 + t1267 * t783;
t849 = -pkin(2) * t880 - pkin(3) * t979;
t862 = t1074 * t1264 + t1268 * t882;
t1284 = pkin(8) * t862 + t1264 * t696 + t1268 * t849;
t896 = -pkin(3) * t1064 + qJ(4) * t1028 - t1415;
t935 = t1027 * t1267 + t1028 * t1263;
t939 = -qJ(4) * t1027 + t1416;
t793 = -pkin(9) * t935 - t1263 * t896 + t1267 * t939;
t810 = -pkin(2) * t935 - pkin(3) * t1027 + t883;
t893 = t1064 * t1264 + t1268 * t936;
t1283 = pkin(8) * t893 + t1264 * t793 + t1268 * t810;
t912 = -pkin(3) * t1067 + qJ(4) * t1042 + t1416;
t946 = -qJ(4) * t1041 + t1415;
t955 = t1041 * t1267 + t1042 * t1263;
t809 = -pkin(9) * t955 - t1263 * t912 + t1267 * t946;
t823 = -pkin(2) * t955 - pkin(3) * t1041 + t884;
t920 = t1067 * t1264 + t1268 * t956;
t1282 = pkin(8) * t920 + t1264 * t809 + t1268 * t823;
t1096 = t1170 * t1263 + t1445;
t1032 = -pkin(9) * t1096 + t1411;
t1035 = t1097 * t1268 - t1135 * t1264;
t991 = -pkin(2) * t1096 + t1043;
t1281 = pkin(8) * t1035 + t1032 * t1264 + t1268 * t991;
t1112 = t1185 * t1267 + t1408;
t1036 = -pkin(9) * t1112 + t1410;
t1037 = t1113 * t1268 + t1137 * t1264;
t994 = -pkin(2) * t1112 + t1044;
t1280 = pkin(8) * t1037 + t1036 * t1264 + t1268 * t994;
t1145 = t1196 * t1264 + t1197 * t1268;
t1279 = pkin(8) * t1145 + t1110;
t1021 = t1063 * t1268 - t1157 * t1264;
t1061 = -t1134 * t1263 + t1139 * t1267;
t921 = -pkin(9) * t1061 - t960;
t1277 = pkin(8) * t1021 - t1061 * t1434 + t1264 * t921;
t933 = t1126 * t1264 + t1268 * t961;
t1276 = pkin(8) * t933 + t1355 * t960;
t1238 = t1265 * qJDD(1) + t1269 * t1440;
t1230 = t1382 * t1391;
t1229 = (t1254 - t1255) * t1391;
t1225 = -pkin(7) * t1238 + g(3) * t1269;
t1205 = t1261 * t1352;
t1204 = t1258 * t1352;
t1200 = t1382 * t1299;
t1194 = (t1380 + (0.2e1 * qJD(2) + t1420) * t1419) * t1258;
t1190 = t1268 * t1224 - t1254 * t1299;
t1189 = -t1255 * t1299 - t1264 * t1383;
t1187 = t1227 * t1268 - t1399;
t1186 = -t1226 * t1264 + t1396;
t1169 = (t1261 * t1224 + t1419 * t1441) * t1264;
t1168 = (-qJD(1) * t1264 * t1441 + t1261 * t1383) * t1268;
t1152 = (-t1216 * t1267 - t1217 * t1263) * t1242;
t1151 = (-t1216 * t1263 + t1217 * t1267) * t1242;
t1146 = -t1195 * t1264 + t1198 * t1268;
t1143 = t1258 * t1198 + t1261 * t1306;
t1142 = -t1258 * t1197 + t1261 * t1308;
t1141 = -t1258 * t1196 + t1261 * t1307;
t1140 = -t1261 * t1198 + t1258 * t1306;
t1133 = -t1258 * t1194 + t1261 * t1309;
t1132 = t1261 * t1194 + t1258 * t1309;
t1130 = t1167 * t1263 - t1217 * t1392;
t1128 = t1216 * t1393 - t1267 * t1294;
t1127 = t1268 * t1152 - t1353;
t1125 = -t1258 * t1229 + t1261 * t1311;
t1124 = t1258 * t1230 + t1261 * t1310;
t1123 = -t1261 * t1230 + t1258 * t1310;
t1117 = t1192 * t1263 - t1407;
t1116 = t1193 * t1267 + t1446;
t1095 = (t1180 * t1260 - t1182 * t1257) * t1242;
t1094 = (t1180 * t1257 + t1182 * t1260) * t1242;
t1093 = -t1265 * t1143 + t1188 * t1269;
t1092 = t1143 * t1269 + t1265 * t1188;
t1089 = t1131 * t1268 - t1370;
t1088 = t1129 * t1268 + t1370;
t1082 = -t1265 * t1133 + t1183 * t1269;
t1081 = t1133 * t1269 + t1265 * t1183;
t1076 = t1258 * t1201 + t1261 * t1312;
t1075 = -t1261 * t1201 + t1258 * t1312;
t1072 = -t1151 * t1258 + t1152 * t1388 + t1205;
t1071 = -t1265 * t1124 + t1145 * t1269;
t1070 = t1124 * t1269 + t1265 * t1145;
t1060 = t1135 * t1263 + t1137 * t1267;
t1048 = t1119 * t1268 - t1134 * t1264;
t1047 = t1118 * t1268 - t1139 * t1264;
t1039 = -t1387 + (-t1140 * t1258 - t1143 * t1261) * pkin(8);
t1034 = -t1386 + (-t1132 * t1258 - t1133 * t1261) * pkin(8);
t1033 = -pkin(1) * t1140 + t1258 * t1171 + t1261 * t1350;
t1031 = t1062 * t1268 - t1184 * t1264;
t1030 = -pkin(1) * t1132 + t1258 * t1172 + t1261 * t1351;
t1024 = -t1258 * t1130 + t1261 * t1295;
t1023 = -t1258 * t1128 + t1261 * t1296;
t1017 = -t1094 * t1263 + t1095 * t1267;
t1016 = t1094 * t1267 + t1095 * t1263;
t1009 = pkin(8) * t1110 * t1261 - pkin(1) * t1075;
t1008 = -t1265 * t1076 + t1110 * t1269;
t1007 = t1076 * t1269 + t1265 * t1110;
t1000 = t1268 * t1017 - t1353;
t999 = -pkin(1) * t1123 + t1261 * t1279;
t998 = -pkin(2) * t1137 + pkin(9) * t1113 + t1411;
t997 = -t1258 * t1117 + t1261 * t1313;
t996 = -t1258 * t1116 + t1261 * t1314;
t995 = (-t1075 * t1258 - t1076 * t1261) * pkin(8);
t993 = pkin(2) * t1135 + pkin(9) * t1097 - t1410;
t992 = (-t1123 * t1258 - t1124 * t1261) * pkin(8) - t1312;
t989 = -t1258 * t1112 + t1261 * t1315;
t988 = t1261 * t1112 + t1258 * t1315;
t985 = -t1258 * t1096 + t1261 * t1316;
t984 = t1261 * t1096 + t1258 * t1316;
t973 = t1058 * t1267 + t1059 * t1263;
t972 = t1056 * t1267 + t1057 * t1263;
t965 = t1052 * t1267 + t1054 * t1263;
t964 = t1051 * t1267 + t1053 * t1263;
t950 = -t1258 * t1060 + t1261 * t1318;
t943 = -t1258 * t1061 + t1261 * t1317;
t942 = t1261 * t1061 + t1258 * t1317;
t938 = t1268 * t975 + t1372;
t937 = t1268 * t974 - t1372;
t934 = -pkin(2) * t1126 + pkin(9) * t961;
t928 = t1037 * t1269 - t1265 * t989;
t927 = t1265 * t1037 + t1269 * t989;
t926 = -t1016 * t1258 + t1017 * t1388 + t1205;
t925 = -t1065 * t1264 + t1268 * t967;
t924 = -t1069 * t1264 + t1268 * t966;
t923 = t1035 * t1269 - t1265 * t985;
t922 = t1265 * t1035 + t1269 * t985;
t901 = pkin(2) * t1157 + pkin(9) * t1063 + t961;
t890 = t1021 * t1269 - t1265 * t943;
t889 = t1265 * t1021 + t1269 * t943;
t879 = t1263 * t980 + t1267 * t978;
t876 = t1263 * t977 + t1267 * t976;
t867 = t1263 * t954 + t1267 * t952;
t866 = t1263 * t953 + t1267 * t951;
t865 = -t1115 * t1264 + t1268 * t881;
t864 = -t1258 * t973 + t1261 * t1300;
t863 = -t1258 * t972 + t1261 * t1301;
t861 = -t1258 * t960 + t1261 * t1321;
t860 = t1258 * t1321 + t1261 * t960;
t854 = -t1258 * t965 + t1261 * t1326;
t853 = -t1258 * t964 + t1261 * t1324;
t852 = -t1025 * t1264 + t1268 * t877;
t851 = -t1258 * t955 + t1261 * t1325;
t850 = t1258 * t1325 + t1261 * t955;
t848 = -t1005 * t1264 + t1268 * t869;
t847 = -t1003 * t1264 + t1268 * t868;
t846 = -t1258 * t935 + t1261 * t1327;
t845 = t1258 * t1327 + t1261 * t935;
t844 = t1268 * t1036 - t1264 * t994 + (-t1258 * t988 - t1261 * t989) * pkin(8);
t839 = t1268 * t1032 - t1264 * t991 + (-t1258 * t984 - t1261 * t985) * pkin(8);
t828 = t1263 * t900 + t1267 * t898;
t827 = t1263 * t899 + t1267 * t897;
t820 = t1263 * t892 + t1267 * t891;
t819 = -pkin(1) * t988 - t1258 * t998 + t1261 * t1280;
t815 = -t1265 * t861 + t1269 * t933;
t814 = t1265 * t933 + t1269 * t861;
t813 = -pkin(1) * t984 - t1258 * t993 + t1261 * t1281;
t798 = -t1258 * t879 + t1261 * t1322;
t795 = -t1265 * t851 + t1269 * t920;
t794 = t1265 * t920 + t1269 * t851;
t792 = -t1258 * t880 + t1261 * t1323;
t791 = t1258 * t1323 + t1261 * t880;
t790 = -pkin(2) * t1067 + pkin(9) * t956 + t1263 * t946 + t1267 * t912;
t789 = t1061 * t1435 + t1268 * t921 + (-t1258 * t942 - t1261 * t943) * pkin(8);
t788 = -t1264 * t969 + t1268 * t830;
t787 = -t1264 * t968 + t1268 * t829;
t785 = -t1258 * t876 + t1261 * t1329;
t784 = -pkin(2) * t1064 + pkin(9) * t936 + t1263 * t939 + t1267 * t896;
t782 = -t1265 * t846 + t1269 * t893;
t781 = t1265 * t893 + t1269 * t846;
t778 = t1263 * t856 + t1267 * t855;
t772 = -t1264 * t929 + t1268 * t821;
t771 = -t1258 * t867 + t1261 * t1330;
t770 = -t1258 * t866 + t1261 * t1331;
t756 = -pkin(1) * t942 - t1258 * t901 + t1261 * t1277;
t753 = -t1265 * t792 + t1269 * t862;
t752 = t1265 * t862 + t1269 * t792;
t746 = (-pkin(9) * t1268 + t1435) * t960 + (-t1258 * t860 - t1261 * t861) * pkin(8);
t745 = -t1264 * t870 + t1268 * t779;
t743 = -pkin(1) * t860 - t1258 * t934 + t1261 * t1276;
t736 = -t1258 * t828 + t1261 * t1332;
t735 = -t1258 * t827 + t1261 * t1333;
t732 = t1263 * t802 + t1267 * t800;
t731 = t1263 * t801 + t1267 * t799;
t727 = -t1258 * t816 + t1261 * t1335;
t726 = t1258 * t1335 + t1261 * t816;
t725 = -t1258 * t820 + t1261 * t1334;
t724 = -t1258 * t811 + t1261 * t1336;
t723 = t1258 * t1336 + t1261 * t811;
t722 = -t1258 * t805 + t1261 * t1337;
t721 = t1258 * t1337 + t1261 * t805;
t717 = t1263 * t777 + t1267 * t775;
t716 = t1263 * t776 + t1267 * t774;
t700 = -t1264 * t832 + t1268 * t734;
t699 = -t1264 * t831 + t1268 * t733;
t698 = -t1258 * t778 + t1261 * t1338;
t694 = -pkin(2) * t1074 + pkin(9) * t882 + t1263 * t783 + t1267 * t764;
t693 = -t1264 * t823 + t1268 * t809 + (-t1258 * t850 - t1261 * t851) * pkin(8);
t692 = -t1264 * t841 + t1268 * t719;
t691 = -t1264 * t840 + t1268 * t718;
t689 = -t1265 * t727 + t1269 * t780;
t688 = t1265 * t780 + t1269 * t727;
t687 = -t1265 * t724 + t1269 * t773;
t686 = t1265 * t773 + t1269 * t724;
t684 = -t1264 * t810 + t1268 * t793 + (-t1258 * t845 - t1261 * t846) * pkin(8);
t682 = -t1265 * t722 + t1269 * t762;
t681 = t1265 * t762 + t1269 * t722;
t679 = t1263 * t742 + t1267 * t741;
t674 = -pkin(1) * t850 - t1258 * t790 + t1261 * t1282;
t671 = -t1258 * t739 + t1261 * t1328;
t670 = t1258 * t1328 + t1261 * t739;
t666 = -pkin(2) * t1029 + pkin(9) * t740 - qJ(4) * t1424 + t1267 * t786;
t665 = -pkin(1) * t845 - t1258 * t784 + t1261 * t1283;
t664 = -t1258 * t732 + t1261 * t1339;
t663 = -t1258 * t731 + t1261 * t1340;
t658 = -t1264 * t748 + t1268 * t680;
t656 = -t1258 * t717 + t1261 * t1341;
t655 = -t1258 * t716 + t1261 * t1342;
t654 = -t1264 * t849 + t1268 * t696 + (-t1258 * t791 - t1261 * t792) * pkin(8);
t653 = -t1258 * t711 + t1261 * t1343;
t652 = t1258 * t1343 + t1261 * t711;
t651 = -t1265 * t671 + t1269 * t728;
t650 = t1265 * t728 + t1269 * t671;
t645 = -t1258 * t702 + t1261 * t1344;
t644 = t1258 * t1344 + t1261 * t702;
t642 = -pkin(2) * t947 + pkin(9) * t817 + t1263 * t710 + t1267 * t697;
t640 = -pkin(2) * t940 + pkin(9) * t812 + t1263 * t704 + t1267 * t695;
t636 = -pkin(2) * t930 + pkin(9) * t806 + t1263 * t690 + t1267 * t683;
t635 = -pkin(1) * t791 - t1258 * t694 + t1261 * t1284;
t631 = -t1258 * t679 + t1261 * t1345;
t630 = -t1265 * t653 + t1269 * t685;
t629 = t1265 * t685 + t1269 * t653;
t628 = -t1258 * t675 + t1261 * t1346;
t627 = t1258 * t1346 + t1261 * t675;
t624 = -t1265 * t645 + t1269 * t678;
t623 = t1265 * t678 + t1269 * t645;
t616 = -t1258 * t659 + t1261 * t1347;
t615 = t1258 * t1347 + t1261 * t659;
t614 = -t1264 * t715 + t1268 * t646 + (-t1258 * t726 - t1261 * t727) * pkin(8);
t613 = -t1264 * t714 + t1268 * t643 + (-t1258 * t723 - t1261 * t724) * pkin(8);
t611 = -t1264 * t701 + t1268 * t672 + (-t1258 * t670 - t1261 * t671) * pkin(8);
t610 = -t1265 * t628 + t1269 * t657;
t609 = t1265 * t657 + t1269 * t628;
t607 = -t1264 * t669 + t1268 * t638 + (-t1258 * t721 - t1261 * t722) * pkin(8);
t606 = -pkin(1) * t670 - t1258 * t666 + t1261 * t1285;
t604 = -pkin(1) * t726 - t1258 * t642 + t1261 * t1286;
t603 = -pkin(1) * t723 - t1258 * t640 + t1261 * t1287;
t602 = -t1265 * t616 + t1269 * t639;
t601 = t1265 * t639 + t1269 * t616;
t595 = -pkin(2) * t825 + pkin(9) * t712 + t1263 * t632 + t1267 * t625;
t591 = -pkin(2) * t729 + pkin(9) * t660 + t1263 * t641 + t1267 * t633;
t590 = -pkin(1) * t721 - t1258 * t636 + t1261 * t1288;
t589 = -pkin(2) * t803 + pkin(9) * t703 + t1263 * t626 + t1267 * t622;
t587 = -t1264 * t637 + t1268 * t597 + (-t1258 * t652 - t1261 * t653) * pkin(8);
t585 = -pkin(2) * t749 + pkin(9) * t676 + t1263 * t605 + t1267 * t600;
t584 = -t1264 * t634 + t1268 * t594 + (-t1258 * t644 - t1261 * t645) * pkin(8);
t582 = -t1258 * t592 + t1261 * t1348;
t581 = t1258 * t1348 + t1261 * t592;
t580 = -t1264 * t619 + t1268 * t598 + (-t1258 * t615 - t1261 * t616) * pkin(8);
t577 = -pkin(1) * t652 - t1258 * t595 + t1261 * t1290;
t576 = -pkin(1) * t644 - t1258 * t589 + t1261 * t1291;
t575 = -pkin(1) * t615 - t1258 * t591 + t1261 * t1289;
t574 = -t1264 * t599 + t1268 * t586 + (-t1258 * t627 - t1261 * t628) * pkin(8);
t573 = -t1265 * t582 + t1269 * t588;
t572 = t1265 * t588 + t1269 * t582;
t571 = -pkin(1) * t627 - t1258 * t585 + t1261 * t1292;
t569 = -pkin(2) * t620 + pkin(9) * t593 + t1263 * t583 + t1267 * t578;
t568 = -t1264 * t579 + t1268 * t570 + (-t1258 * t581 - t1261 * t582) * pkin(8);
t567 = -pkin(1) * t581 - t1258 * t569 + t1261 * t1293;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1238, -t1239, 0, t1203, 0, 0, 0, 0, 0, 0, t1093, t1082, t1071, t1008, 0, 0, 0, 0, 0, 0, t923, t928, t890, t815, 0, 0, 0, 0, 0, 0, t782, t795, t753, t651, 0, 0, 0, 0, 0, 0, t687, t689, t682, t602, 0, 0, 0, 0, 0, 0, t624, t630, t610, t573; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1239, -t1238, 0, t1202, 0, 0, 0, 0, 0, 0, t1092, t1081, t1070, t1007, 0, 0, 0, 0, 0, 0, t922, t927, t889, t814, 0, 0, 0, 0, 0, 0, t781, t794, t752, t650, 0, 0, 0, 0, 0, 0, t686, t688, t681, t601, 0, 0, 0, 0, 0, 0, t623, t629, t609, t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1140, t1132, t1123, t1075, 0, 0, 0, 0, 0, 0, t984, t988, t942, t860, 0, 0, 0, 0, 0, 0, t845, t850, t791, t670, 0, 0, 0, 0, 0, 0, t723, t726, t721, t615, 0, 0, 0, 0, 0, 0, t644, t652, t627, t581; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1239, 0, -t1238, 0, t1354, -t1225, -t1202, -pkin(7) * t1202, -t1265 * t1169 + t1190 * t1269, -t1265 * t1125 + t1146 * t1269, -t1265 * t1141 + t1186 * t1269, -t1265 * t1168 + t1189 * t1269, -t1265 * t1142 + t1187 * t1269, t1269 * t1200 + t1265 * t1305, -pkin(7) * t1092 - t1265 * t1033 + t1039 * t1269, -pkin(7) * t1081 - t1265 * t1030 + t1034 * t1269, -pkin(7) * t1070 - t1265 * t999 + t1269 * t992, -pkin(7) * t1007 - t1265 * t1009 + t1269 * t995, -t1265 * t1024 + t1089 * t1269, t1031 * t1269 - t1265 * t950, t1047 * t1269 - t1265 * t996, -t1265 * t1023 + t1088 * t1269, t1048 * t1269 - t1265 * t997, -t1265 * t1072 + t1127 * t1269, -pkin(7) * t922 - t1265 * t813 + t1269 * t839, -pkin(7) * t927 - t1265 * t819 + t1269 * t844, -pkin(7) * t889 - t1265 * t756 + t1269 * t789, -pkin(7) * t814 - t1265 * t743 + t1269 * t746, -t1265 * t864 + t1269 * t938, -t1265 * t798 + t1269 * t865, -t1265 * t853 + t1269 * t924, -t1265 * t863 + t1269 * t937, -t1265 * t854 + t1269 * t925, t1000 * t1269 - t1265 * t926, -pkin(7) * t781 - t1265 * t665 + t1269 * t684, -pkin(7) * t794 - t1265 * t674 + t1269 * t693, -pkin(7) * t752 - t1265 * t635 + t1269 * t654, -pkin(7) * t650 - t1265 * t606 + t1269 * t611, -t1265 * t771 + t1269 * t848, -t1265 * t725 + t1269 * t772, -t1265 * t735 + t1269 * t787, -t1265 * t770 + t1269 * t847, -t1265 * t736 + t1269 * t788, -t1265 * t785 + t1269 * t852, -pkin(7) * t686 - t1265 * t603 + t1269 * t613, -pkin(7) * t688 - t1265 * t604 + t1269 * t614, -pkin(7) * t681 - t1265 * t590 + t1269 * t607, -pkin(7) * t601 - t1265 * t575 + t1269 * t580, -t1265 * t664 + t1269 * t700, -t1265 * t631 + t1269 * t658, -t1265 * t655 + t1269 * t691, -t1265 * t663 + t1269 * t699, -t1265 * t656 + t1269 * t692, -t1265 * t698 + t1269 * t745, -pkin(7) * t623 - t1265 * t576 + t1269 * t584, -pkin(7) * t629 - t1265 * t577 + t1269 * t587, -pkin(7) * t609 - t1265 * t571 + t1269 * t574, -pkin(7) * t572 - t1265 * t567 + t1269 * t568; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1238, 0, t1239, 0, t1225, t1354, t1203, pkin(7) * t1203, t1169 * t1269 + t1265 * t1190, t1125 * t1269 + t1265 * t1146, t1141 * t1269 + t1265 * t1186, t1168 * t1269 + t1265 * t1189, t1142 * t1269 + t1265 * t1187, t1265 * t1200 - t1269 * t1305, pkin(7) * t1093 + t1033 * t1269 + t1265 * t1039, pkin(7) * t1082 + t1030 * t1269 + t1265 * t1034, pkin(7) * t1071 + t1265 * t992 + t1269 * t999, pkin(7) * t1008 + t1009 * t1269 + t1265 * t995, t1024 * t1269 + t1265 * t1089, t1265 * t1031 + t1269 * t950, t1265 * t1047 + t1269 * t996, t1023 * t1269 + t1265 * t1088, t1265 * t1048 + t1269 * t997, t1072 * t1269 + t1265 * t1127, pkin(7) * t923 + t1265 * t839 + t1269 * t813, pkin(7) * t928 + t1265 * t844 + t1269 * t819, pkin(7) * t890 + t1265 * t789 + t1269 * t756, pkin(7) * t815 + t1265 * t746 + t1269 * t743, t1265 * t938 + t1269 * t864, t1265 * t865 + t1269 * t798, t1265 * t924 + t1269 * t853, t1265 * t937 + t1269 * t863, t1265 * t925 + t1269 * t854, t1265 * t1000 + t1269 * t926, pkin(7) * t782 + t1265 * t684 + t1269 * t665, pkin(7) * t795 + t1265 * t693 + t1269 * t674, pkin(7) * t753 + t1265 * t654 + t1269 * t635, pkin(7) * t651 + t1265 * t611 + t1269 * t606, t1265 * t848 + t1269 * t771, t1265 * t772 + t1269 * t725, t1265 * t787 + t1269 * t735, t1265 * t847 + t1269 * t770, t1265 * t788 + t1269 * t736, t1265 * t852 + t1269 * t785, pkin(7) * t687 + t1265 * t613 + t1269 * t603, pkin(7) * t689 + t1265 * t614 + t1269 * t604, pkin(7) * t682 + t1265 * t607 + t1269 * t590, pkin(7) * t602 + t1265 * t580 + t1269 * t575, t1265 * t700 + t1269 * t664, t1265 * t658 + t1269 * t631, t1265 * t691 + t1269 * t655, t1265 * t699 + t1269 * t663, t1265 * t692 + t1269 * t656, t1265 * t745 + t1269 * t698, pkin(7) * t624 + t1265 * t584 + t1269 * t576, pkin(7) * t630 + t1265 * t587 + t1269 * t577, pkin(7) * t610 + t1265 * t574 + t1269 * t571, pkin(7) * t573 + t1265 * t568 + t1269 * t567; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1243, t1244, 0, 0, t1224 * t1390 + t1319, t1261 * t1229 + t1258 * t1311, t1261 * t1196 + t1258 * t1307, t1383 * t1389 - t1319, t1261 * t1197 + t1258 * t1308, t1261 * t1357, pkin(1) * t1143 - t1261 * t1171 + t1258 * t1350, pkin(1) * t1133 - t1261 * t1172 + t1258 * t1351, pkin(1) * t1124 + t1258 * t1279, pkin(1) * t1076 + t1110 * t1432, t1261 * t1130 + t1258 * t1295, t1261 * t1060 + t1258 * t1318, t1261 * t1116 + t1258 * t1314, t1261 * t1128 + t1258 * t1296, t1261 * t1117 + t1258 * t1313, t1151 * t1261 + t1152 * t1390 + t1204, pkin(1) * t985 + t1258 * t1281 + t1261 * t993, pkin(1) * t989 + t1258 * t1280 + t1261 * t998, pkin(1) * t943 + t1258 * t1277 + t1261 * t901, pkin(1) * t861 + t1258 * t1276 + t1261 * t934, t1258 * t1300 + t1261 * t973, t1258 * t1322 + t1261 * t879, t1258 * t1324 + t1261 * t964, t1258 * t1301 + t1261 * t972, t1258 * t1326 + t1261 * t965, t1016 * t1261 + t1017 * t1390 + t1204, pkin(1) * t846 + t1258 * t1283 + t1261 * t784, pkin(1) * t851 + t1258 * t1282 + t1261 * t790, pkin(1) * t792 + t1258 * t1284 + t1261 * t694, pkin(1) * t671 + t1258 * t1285 + t1261 * t666, t1258 * t1330 + t1261 * t867, t1258 * t1334 + t1261 * t820, t1258 * t1333 + t1261 * t827, t1258 * t1331 + t1261 * t866, t1258 * t1332 + t1261 * t828, t1258 * t1329 + t1261 * t876, pkin(1) * t724 + t1258 * t1287 + t1261 * t640, pkin(1) * t727 + t1258 * t1286 + t1261 * t642, pkin(1) * t722 + t1258 * t1288 + t1261 * t636, pkin(1) * t616 + t1258 * t1289 + t1261 * t591, t1258 * t1339 + t1261 * t732, t1258 * t1345 + t1261 * t679, t1258 * t1342 + t1261 * t716, t1258 * t1340 + t1261 * t731, t1258 * t1341 + t1261 * t717, t1258 * t1338 + t1261 * t778, pkin(1) * t645 + t1258 * t1291 + t1261 * t589, pkin(1) * t653 + t1258 * t1290 + t1261 * t595, pkin(1) * t628 + t1258 * t1292 + t1261 * t585, pkin(1) * t582 + t1258 * t1293 + t1261 * t569;];
tauB_reg  = t1;
