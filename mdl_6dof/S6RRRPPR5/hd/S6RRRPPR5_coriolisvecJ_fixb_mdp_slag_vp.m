% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S6RRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4,theta5]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPPR5_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [6x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S6RRRPPR5_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR5_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR5_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPPR5_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRRPPR5_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:44:38
% EndTime: 2019-03-09 15:45:01
% DurationCPUTime: 15.62s
% Computational Cost: add. (13879->609), mult. (37174->843), div. (0->0), fcn. (29666->12), ass. (0->250)
t668 = sin(pkin(6));
t677 = cos(qJ(2));
t733 = qJD(1) * t677;
t717 = t668 * t733;
t785 = qJD(3) - t717;
t673 = sin(qJ(3));
t674 = sin(qJ(2));
t676 = cos(qJ(3));
t735 = qJD(1) * t668;
t718 = t674 * t735;
t671 = cos(pkin(6));
t734 = qJD(1) * t671;
t724 = pkin(1) * t734;
t612 = -pkin(8) * t718 + t677 * t724;
t687 = t668 * (pkin(2) * t674 - pkin(9) * t677);
t613 = qJD(1) * t687;
t706 = -t612 * t673 + t676 * t613;
t768 = -qJ(4) - pkin(9);
t712 = qJD(3) * t768;
t750 = t676 * t677;
t784 = -(pkin(3) * t674 - qJ(4) * t750) * t735 - t706 - qJD(4) * t673 + t676 * t712;
t703 = t673 * t717;
t740 = t676 * t612 + t673 * t613;
t783 = -qJ(4) * t703 - qJD(4) * t676 - t673 * t712 + t740;
t655 = qJD(2) + t734;
t595 = t655 * t676 - t673 * t718;
t596 = t655 * t673 + t676 * t718;
t667 = sin(pkin(11));
t670 = cos(pkin(11));
t554 = -t670 * t595 + t596 * t667;
t551 = qJD(6) + t554;
t666 = sin(pkin(12));
t669 = cos(pkin(12));
t688 = t595 * t667 + t670 * t596;
t528 = t666 * t688 - t669 * t785;
t675 = cos(qJ(6));
t530 = t666 * t785 + t669 * t688;
t672 = sin(qJ(6));
t764 = t530 * t672;
t777 = -t675 * t528 - t764;
t782 = t551 * t777;
t629 = t667 * t673 - t670 * t676;
t579 = t629 * t717;
t621 = t629 * qJD(3);
t781 = t579 - t621;
t631 = t667 * t676 + t670 * t673;
t739 = t785 * t631;
t742 = t784 * t667 - t783 * t670;
t652 = t674 * t724;
t615 = pkin(8) * t717 + t652;
t730 = qJD(3) * t673;
t780 = -t615 + (-t703 + t730) * pkin(3);
t779 = qJ(5) * t718 - t742;
t778 = -pkin(4) * t739 + qJ(5) * t781 + qJD(5) * t631 - t780;
t689 = t528 * t672 - t530 * t675;
t776 = t551 * t689;
t560 = -t579 * t666 - t669 * t718;
t709 = -t621 * t666 - t560;
t561 = -t579 * t669 + t666 * t718;
t708 = -t621 * t669 - t561;
t743 = t783 * t667 + t784 * t670;
t632 = t666 * t675 + t669 * t672;
t623 = t632 * qJD(6);
t737 = t632 * t554 + t623;
t663 = t668 ^ 2;
t725 = qJD(1) * qJD(2);
t774 = -0.2e1 * t663 * t725;
t773 = MDP(5) * (t674 ^ 2 - t677 ^ 2);
t749 = -t666 * t779 + t778 * t669;
t748 = t778 * t666 + t669 * t779;
t747 = pkin(4) * t718 - t743;
t752 = t668 * t677;
t771 = pkin(1) * t674;
t609 = pkin(8) * t752 + (pkin(9) + t771) * t671;
t610 = (-pkin(2) * t677 - pkin(9) * t674 - pkin(1)) * t668;
t741 = t676 * t609 + t673 * t610;
t700 = qJD(3) * t718;
t713 = t668 * t725;
t701 = t677 * t713;
t729 = qJD(3) * t676;
t571 = t655 * t729 - t673 * t700 + t676 * t701;
t721 = t655 * t730 + t673 * t701 + t676 * t700;
t518 = t571 * t667 + t670 * t721;
t630 = t666 * t672 - t675 * t669;
t738 = t551 * t630;
t772 = -t518 * t632 + t551 * t738;
t770 = pkin(1) * t677;
t658 = pkin(3) * t667 + qJ(5);
t769 = pkin(10) + t658;
t767 = t777 * t688;
t766 = t689 * t688;
t763 = t554 * t666;
t762 = t595 * t785;
t761 = t596 * t785;
t758 = t631 * t666;
t757 = t631 * t669;
t756 = t785 * t673;
t755 = t785 * t676;
t678 = qJD(1) ^ 2;
t754 = t663 * t678;
t584 = pkin(9) * t655 + t615;
t591 = qJD(1) * t610;
t545 = t584 * t676 + t591 * t673;
t515 = qJ(4) * t595 + t545;
t510 = t667 * t515;
t753 = t668 * t674;
t751 = t670 * t515;
t614 = qJD(2) * t687;
t604 = qJD(1) * t614;
t656 = pkin(8) * t753;
t616 = (t671 * t770 - t656) * qJD(2);
t605 = qJD(1) * t616;
t679 = -qJD(3) * t545 + t676 * t604 - t673 * t605;
t702 = t674 * t713;
t450 = pkin(3) * t702 - qJ(4) * t571 - qJD(4) * t596 + t679;
t684 = -t584 * t730 + t591 * t729 + t673 * t604 + t676 * t605;
t457 = -qJ(4) * t721 + t595 * qJD(4) + t684;
t416 = t667 * t450 + t670 * t457;
t409 = qJ(5) * t702 + qJD(5) * t785 + t416;
t519 = t670 * t571 - t667 * t721;
t606 = pkin(8) * t701 + qJD(2) * t652;
t541 = pkin(3) * t721 + t606;
t434 = t518 * pkin(4) - t519 * qJ(5) - qJD(5) * t688 + t541;
t399 = t669 * t409 + t666 * t434;
t624 = -t671 * t676 + t673 * t753;
t715 = qJD(2) * t752;
t576 = -qJD(3) * t624 + t676 * t715;
t625 = t671 * t673 + t676 * t753;
t680 = -qJD(3) * t741 + t676 * t614 - t616 * t673;
t732 = qJD(2) * t674;
t716 = t668 * t732;
t465 = pkin(3) * t716 - qJ(4) * t576 - qJD(4) * t625 + t680;
t575 = qJD(3) * t625 + t673 * t715;
t683 = -t609 * t730 + t610 * t729 + t673 * t614 + t676 * t616;
t474 = -qJ(4) * t575 - qJD(4) * t624 + t683;
t427 = t667 * t465 + t670 * t474;
t421 = (qJ(5) * t732 - qJD(5) * t677) * t668 + t427;
t534 = t670 * t575 + t576 * t667;
t535 = -t575 * t667 + t576 * t670;
t567 = -t624 * t667 + t625 * t670;
t617 = t671 * pkin(1) * t732 + pkin(8) * t715;
t699 = pkin(3) * t575 + t617;
t441 = pkin(4) * t534 - qJ(5) * t535 - qJD(5) * t567 + t699;
t402 = t669 * t421 + t666 * t441;
t544 = -t584 * t673 + t676 * t591;
t514 = -qJ(4) * t596 + t544;
t501 = pkin(3) * t785 + t514;
t449 = t667 * t501 + t751;
t446 = qJ(5) * t785 + t449;
t583 = -pkin(2) * t655 - t612;
t552 = -pkin(3) * t595 + qJD(4) + t583;
t460 = pkin(4) * t554 - qJ(5) * t688 + t552;
t414 = t669 * t446 + t666 * t460;
t456 = t514 * t670 - t510;
t480 = pkin(3) * t596 + pkin(4) * t688 + qJ(5) * t554;
t423 = t669 * t456 + t666 * t480;
t707 = -t609 * t673 + t676 * t610;
t523 = -pkin(3) * t752 - qJ(4) * t625 + t707;
t536 = -qJ(4) * t624 + t741;
t473 = t667 * t523 + t670 * t536;
t463 = -qJ(5) * t752 + t473;
t566 = t670 * t624 + t625 * t667;
t608 = t656 + (-pkin(2) - t770) * t671;
t681 = pkin(3) * t624 + t608;
t486 = pkin(4) * t566 - qJ(5) * t567 + t681;
t431 = t669 * t463 + t666 * t486;
t746 = t560 * t672 - t561 * t675 + t621 * t630 - t623 * t631;
t727 = qJD(6) * t675;
t728 = qJD(6) * t672;
t745 = -t675 * t560 - t561 * t672 - t621 * t632 + t727 * t757 - t728 * t758;
t744 = pkin(5) * t709 + t747;
t719 = -pkin(3) * t676 - pkin(2);
t572 = pkin(4) * t629 - qJ(5) * t631 + t719;
t648 = t768 * t673;
t649 = t768 * t676;
t582 = t648 * t667 - t649 * t670;
t525 = t666 * t572 + t669 * t582;
t731 = qJD(2) * t676;
t726 = qJD(2) - t655;
t497 = t519 * t666 - t669 * t702;
t498 = t519 * t669 + t666 * t702;
t722 = -t672 * t497 + t675 * t498 - t528 * t727;
t662 = -pkin(3) * t670 - pkin(4);
t398 = -t409 * t666 + t669 * t434;
t395 = pkin(5) * t518 - pkin(10) * t498 + t398;
t396 = -pkin(10) * t497 + t399;
t711 = t675 * t395 - t396 * t672;
t401 = -t421 * t666 + t669 * t441;
t413 = -t446 * t666 + t669 * t460;
t415 = t450 * t670 - t667 * t457;
t422 = -t456 * t666 + t669 * t480;
t430 = -t463 * t666 + t669 * t486;
t426 = t465 * t670 - t667 * t474;
t710 = t675 * t497 + t672 * t498;
t448 = t501 * t670 - t510;
t455 = t514 * t667 + t751;
t472 = t523 * t670 - t667 * t536;
t524 = t669 * t572 - t582 * t666;
t581 = -t670 * t648 - t649 * t667;
t704 = t663 * t674 * t677 * MDP(4);
t698 = pkin(1) * t774;
t697 = -t630 * t518 - t551 * t737;
t464 = pkin(4) * t752 - t472;
t506 = -pkin(10) * t758 + t525;
t696 = -pkin(5) * t739 + pkin(10) * t708 + qJD(6) * t506 + t749;
t493 = pkin(5) * t629 - pkin(10) * t757 + t524;
t695 = pkin(10) * t709 - qJD(6) * t493 + t748;
t694 = t395 * t672 + t396 * t675;
t693 = -t398 * t669 - t399 * t666;
t403 = pkin(5) * t554 - pkin(10) * t530 + t413;
t405 = -pkin(10) * t528 + t414;
t392 = t403 * t675 - t405 * t672;
t393 = t403 * t672 + t405 * t675;
t550 = t567 * t669 - t666 * t752;
t410 = pkin(5) * t566 - pkin(10) * t550 + t430;
t549 = t567 * t666 + t669 * t752;
t419 = -pkin(10) * t549 + t431;
t692 = t410 * t675 - t419 * t672;
t691 = t410 * t672 + t419 * t675;
t690 = t413 * t666 - t414 * t669;
t489 = t675 * t549 + t550 * t672;
t490 = -t549 * t672 + t550 * t675;
t627 = t769 * t669;
t686 = pkin(10) * t554 * t669 + pkin(5) * t688 + qJD(5) * t666 + qJD(6) * t627 + t422;
t626 = t769 * t666;
t685 = pkin(10) * t763 - qJD(5) * t669 + qJD(6) * t626 + t423;
t417 = -t530 * t728 + t722;
t445 = -pkin(4) * t785 + qJD(5) - t448;
t682 = -t518 * t658 + (-qJD(5) + t445) * t554;
t424 = -pkin(4) * t716 - t426;
t411 = -pkin(4) * t702 - t415;
t418 = -qJD(6) * t689 + t710;
t641 = -pkin(5) * t669 + t662;
t565 = t630 * t631;
t564 = t632 * t631;
t559 = pkin(5) * t758 + t581;
t517 = t535 * t669 + t666 * t716;
t516 = t535 * t666 - t669 * t716;
t443 = pkin(5) * t549 + t464;
t442 = -pkin(5) * t763 + t455;
t436 = pkin(5) * t528 + t445;
t429 = qJD(6) * t490 + t675 * t516 + t517 * t672;
t428 = -qJD(6) * t489 - t516 * t672 + t517 * t675;
t407 = pkin(5) * t516 + t424;
t404 = pkin(5) * t497 + t411;
t400 = -pkin(10) * t516 + t402;
t397 = pkin(5) * t534 - pkin(10) * t517 + t401;
t391 = -qJD(6) * t393 + t711;
t390 = qJD(6) * t392 + t694;
t1 = [t773 * t774 + (-t605 * t671 - t616 * t655 + t677 * t698) * MDP(10) + (-t606 * t671 - t617 * t655 + t674 * t698) * MDP(9) + (t415 * t472 + t416 * t473 + t448 * t426 + t449 * t427 + t541 * t681 + t552 * t699) * MDP(19) + (-t663 * t733 + t668 * t785) * MDP(15) * t732 + (-t571 * t624 - t596 * t575 + t576 * t595 - t625 * t721) * MDP(12) + (MDP(6) * t715 - MDP(7) * t716) * (t655 + t734) + (-t415 * t567 - t416 * t566 - t426 * t688 - t427 * t554 - t448 * t535 - t449 * t534 - t472 * t519 - t473 * t518) * MDP(18) + (-(qJD(6) * t692 + t397 * t672 + t400 * t675) * t551 - t691 * t518 - t390 * t566 - t393 * t534 - t407 * t689 + t443 * t417 + t404 * t490 + t436 * t428) * MDP(30) + (t417 * t490 - t428 * t689) * MDP(24) + (t417 * t566 + t428 * t551 + t490 * t518 - t534 * t689) * MDP(26) + (-t683 * t785 + t617 * t596 + t608 * t571 + t606 * t625 + t583 * t576 + (t684 * t677 + (-qJD(1) * t741 - t545) * t732) * t668) * MDP(17) + (t576 * t785 + (-t571 * t677 + (qJD(1) * t625 + t596) * t732) * t668) * MDP(13) + (-t575 * t785 + (t721 * t677 + (-qJD(1) * t624 + t595) * t732) * t668) * MDP(14) + (t680 * t785 - t617 * t595 + t608 * t721 + t606 * t624 + t583 * t575 + (-t679 * t677 + (qJD(1) * t707 + t544) * t732) * t668) * MDP(16) + 0.2e1 * t704 * t725 + ((-qJD(6) * t691 + t397 * t675 - t400 * t672) * t551 + t692 * t518 + t391 * t566 + t392 * t534 - t407 * t777 + t443 * t418 + t404 * t489 + t436 * t429) * MDP(29) + (-t417 * t489 - t418 * t490 + t428 * t777 + t429 * t689) * MDP(25) + (-t418 * t566 - t429 * t551 - t489 * t518 + t534 * t777) * MDP(27) + (t571 * t625 + t576 * t596) * MDP(11) + (t398 * t430 + t399 * t431 + t401 * t413 + t402 * t414 + t411 * t464 + t424 * t445) * MDP(23) + (-t398 * t550 - t399 * t549 - t401 * t530 - t402 * t528 - t413 * t517 - t414 * t516 - t430 * t498 - t431 * t497) * MDP(22) + (t518 * t566 + t534 * t551) * MDP(28) + (t398 * t566 + t401 * t554 + t411 * t549 + t413 * t534 + t424 * t528 + t430 * t518 + t445 * t516 + t464 * t497) * MDP(20) + (-t399 * t566 - t402 * t554 + t411 * t550 - t414 * t534 + t424 * t530 - t431 * t518 + t445 * t517 + t464 * t498) * MDP(21); (-t413 * t708 - t414 * t709 - t497 * t525 - t498 * t524 + t528 * t748 + t530 * t749 + t631 * t693) * MDP(22) + (t398 * t524 + t399 * t525 + t411 * t581 - t413 * t749 - t414 * t748 + t445 * t747) * MDP(23) + t754 * t773 + (pkin(8) * t702 + t612 * t655 + (-t671 * t725 + t754) * t770) * MDP(10) + (t615 * t655 + t754 * t771 - t606) * MDP(9) + (t518 * t629 + t551 * t739) * MDP(28) + (-t399 * t629 + t411 * t757 - t414 * t739 + t445 * t708 + t498 * t581 - t518 * t525 + t530 * t747 + t554 * t748) * MDP(21) + (t398 * t629 + t411 * t758 + t413 * t739 + t445 * t709 + t497 * t581 + t518 * t524 + t528 * t747 - t554 * t749) * MDP(20) + (-t415 * t631 - t416 * t629 - t448 * t781 - t739 * t449 - t518 * t582 + t519 * t581 - t742 * t554 - t743 * t688) * MDP(18) + (t417 * t629 - t518 * t565 + t551 * t746 - t689 * t739) * MDP(26) + (-(t493 * t672 + t506 * t675) * t518 - t390 * t629 + t559 * t417 - t404 * t565 + (t672 * t696 + t675 * t695) * t551 - t744 * t689 + t746 * t436 - t739 * t393) * MDP(30) + (-t417 * t565 - t689 * t746) * MDP(24) + (t571 * t673 + t596 * t755) * MDP(11) + t726 * MDP(6) * t717 + ((t571 + t762) * t676 + (-t721 - t761) * t673) * MDP(12) + (-t415 * t581 + t416 * t582 + t743 * t448 + t742 * t449 + t541 * t719 + t552 * t780) * MDP(19) + (t785 * t729 + (-t785 * t750 + (qJD(2) * t673 - t596) * t674) * t735) * MDP(13) + (-MDP(15) * t785 - MDP(7) * t726) * t718 + (-pkin(2) * t721 - t606 * t676 - t706 * t785 + t615 * t595 + (-pkin(9) * t755 + t583 * t673) * qJD(3) + (-t544 * t674 + (-pkin(9) * t732 - t583 * t677) * t673) * t735) * MDP(16) + (-t785 * t730 + (t677 * t756 + (-t595 + t731) * t674) * t735) * MDP(14) + (-pkin(2) * t571 + t606 * t673 + t740 * t785 - t615 * t596 + (pkin(9) * t756 + t583 * t676) * qJD(3) + (-t583 * t750 + (-pkin(9) * t731 + t545) * t674) * t735) * MDP(17) - t678 * t704 + ((t493 * t675 - t506 * t672) * t518 + t391 * t629 + t559 * t418 + t404 * t564 + (t672 * t695 - t675 * t696) * t551 - t744 * t777 + t745 * t436 + t739 * t392) * MDP(29) + (-t418 * t629 - t518 * t564 - t551 * t745 + t739 * t777) * MDP(27) + (-t417 * t564 + t418 * t565 + t689 * t745 + t746 * t777) * MDP(25); -t596 * t595 * MDP(11) + (-t595 ^ 2 + t596 ^ 2) * MDP(12) + (t571 - t762) * MDP(13) + (-t721 + t761) * MDP(14) + MDP(15) * t702 + (t545 * t785 - t583 * t596 + t679) * MDP(16) + (t544 * t785 - t583 * t595 - t684) * MDP(17) + ((-t518 * t667 - t519 * t670) * pkin(3) + (t449 - t455) * t688 + (-t448 + t456) * t554) * MDP(18) + (t448 * t455 - t449 * t456 + (t415 * t670 + t416 * t667 - t552 * t596) * pkin(3)) * MDP(19) + (-t411 * t669 - t413 * t688 - t422 * t554 - t455 * t528 + t497 * t662 + t666 * t682) * MDP(20) + (t411 * t666 + t414 * t688 + t423 * t554 - t455 * t530 + t498 * t662 + t669 * t682) * MDP(21) + (t422 * t530 + t423 * t528 + (-qJD(5) * t528 - t413 * t554 - t497 * t658 + t399) * t669 + (qJD(5) * t530 - t414 * t554 + t498 * t658 - t398) * t666) * MDP(22) + (t411 * t662 - t413 * t422 - t414 * t423 - t445 * t455 + (-t398 * t666 + t399 * t669) * t658 - t690 * qJD(5)) * MDP(23) + (t417 * t632 + t689 * t738) * MDP(24) + (-t417 * t630 - t418 * t632 + t689 * t737 - t738 * t777) * MDP(25) + (t766 - t772) * MDP(26) + (t697 - t767) * MDP(27) - t551 * t688 * MDP(28) + ((-t626 * t675 - t627 * t672) * t518 + t641 * t418 + t404 * t630 - t392 * t688 + t442 * t777 + (t672 * t685 - t675 * t686) * t551 + t737 * t436) * MDP(29) + (-(-t626 * t672 + t627 * t675) * t518 + t641 * t417 + t404 * t632 + t393 * t688 + t442 * t689 + (t672 * t686 + t675 * t685) * t551 - t738 * t436) * MDP(30); -t688 ^ 2 * MDP(18) + (t448 * t688 + t541) * MDP(19) + (t518 * t669 - t528 * t688) * MDP(20) + (-t518 * t666 - t530 * t688) * MDP(21) + (-t497 * t666 - t498 * t669) * MDP(22) + (-t445 * t688 - t693) * MDP(23) + (t697 + t767) * MDP(29) + (t766 + t772) * MDP(30) - (-t449 * MDP(19) + (t528 * t669 - t530 * t666) * MDP(22) + t690 * MDP(23) + (MDP(20) * t666 + MDP(21) * t669 + MDP(18)) * t554) * t554; (t530 * t554 + t497) * MDP(20) + (-t528 * t554 + t498) * MDP(21) + (-t528 ^ 2 - t530 ^ 2) * MDP(22) + (t413 * t530 + t414 * t528 + t411) * MDP(23) + (t418 - t776) * MDP(29) + (t417 + t782) * MDP(30); t689 * t777 * MDP(24) + (t689 ^ 2 - t777 ^ 2) * MDP(25) + (t722 - t782) * MDP(26) + (-t710 - t776) * MDP(27) + t518 * MDP(28) + (t393 * t551 + t436 * t689 + t711) * MDP(29) + (t392 * t551 - t436 * t777 - t694) * MDP(30) + (-MDP(26) * t764 + MDP(27) * t689 - MDP(29) * t393 - MDP(30) * t392) * qJD(6);];
tauc  = t1;
