% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPPR5_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4,theta5]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 11:24
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPPR5_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR5_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR5_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPPR5_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPPR5_jacobiaD_rot_sym_varpar: pkin has to be [12x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:03
	% EndTime: 2019-10-10 11:24:03
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:03
	% EndTime: 2019-10-10 11:24:03
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:03
	% EndTime: 2019-10-10 11:24:03
	% DurationCPUTime: 0.41s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:03
	% EndTime: 2019-10-10 11:24:04
	% DurationCPUTime: 1.04s
	% Computational Cost: add. (1479->91), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->91)
	t171 = sin(qJ(2));
	t172 = sin(qJ(1));
	t225 = cos(pkin(6));
	t195 = t172 * t225;
	t193 = t171 * t195;
	t174 = cos(qJ(2));
	t175 = cos(qJ(1));
	t209 = t175 * t174;
	t157 = -t193 + t209;
	t170 = sin(qJ(3));
	t173 = cos(qJ(3));
	t169 = sin(pkin(6));
	t213 = t169 * t172;
	t185 = -t157 * t170 + t173 * t213;
	t227 = t185 * qJD(3);
	t194 = t175 * t225;
	t192 = t174 * t194;
	t210 = t172 * t171;
	t153 = -t192 + t210;
	t212 = t169 * t174;
	t147 = atan2(-t153, -t212);
	t145 = sin(t147);
	t146 = cos(t147);
	t151 = t153 ^ 2;
	t165 = 0.1e1 / t169 ^ 2;
	t167 = 0.1e1 / t174 ^ 2;
	t150 = t151 * t165 * t167 + 0.1e1;
	t148 = 0.1e1 / t150;
	t164 = 0.1e1 / t169;
	t166 = 0.1e1 / t174;
	t199 = t153 * t164 * t166;
	t226 = (t146 * t199 - t145) * t148 + t145;
	t129 = -t145 * t153 - t146 * t212;
	t126 = 0.1e1 / t129;
	t144 = t157 * t173 + t170 * t213;
	t138 = 0.1e1 / t144;
	t127 = 0.1e1 / t129 ^ 2;
	t139 = 0.1e1 / t144 ^ 2;
	t182 = -t171 * t194 - t172 * t174;
	t183 = -t175 * t171 - t174 * t195;
	t135 = -t183 * qJD(1) - t182 * qJD(2);
	t207 = qJD(2) * t171;
	t196 = t167 * t207;
	t184 = t135 * t166 + t153 * t196;
	t215 = t148 * t164;
	t118 = t184 * t215;
	t188 = t145 * t212 - t146 * t153;
	t200 = t146 * t169 * t171;
	t114 = qJD(2) * t200 + t188 * t118 - t145 * t135;
	t224 = t114 * t126 * t127;
	t214 = t167 * t171;
	t187 = t153 * t214 - t166 * t182;
	t119 = t187 * t215;
	t115 = t188 * t119 + t145 * t182 + t200;
	t223 = t115 * t183;
	t134 = t182 * qJD(1) + t183 * qJD(2);
	t208 = qJD(1) * t169;
	t197 = t175 * t208;
	t124 = t144 * qJD(3) + t134 * t170 - t173 * t197;
	t137 = t185 ^ 2;
	t132 = t137 * t139 + 0.1e1;
	t218 = t139 * t185;
	t125 = t134 * t173 + t170 * t197 + t227;
	t220 = t125 * t138 * t139;
	t222 = (-t124 * t218 - t137 * t220) / t132 ^ 2;
	t168 = t166 * t167;
	t221 = (t135 * t153 * t167 + t151 * t168 * t207) * t165 / t150 ^ 2;
	t191 = qJD(2) * t225 + qJD(1);
	t206 = qJD(2) * t174;
	t133 = -qJD(1) * t192 - t175 * t206 + t191 * t210;
	t219 = t133 * t127;
	t217 = t145 * t183;
	t216 = t146 * t183;
	t211 = t169 * t175;
	t152 = t183 ^ 2;
	t122 = t152 * t127 + 0.1e1;
	t205 = 0.2e1 * (-t152 * t224 + t183 * t219) / t122 ^ 2;
	t204 = 0.2e1 * t224;
	t203 = 0.2e1 * t222;
	t202 = -0.2e1 * t221;
	t201 = t185 * t220;
	t198 = t172 * t208;
	t189 = t170 * t138 + t173 * t218;
	t186 = -t170 * t182 + t173 * t211;
	t142 = t170 * t211 + t173 * t182;
	t136 = -qJD(1) * t193 - t172 * t207 + t191 * t209;
	t130 = 0.1e1 / t132;
	t120 = 0.1e1 / t122;
	t117 = t226 * t183;
	t113 = (t187 * t202 + (t135 * t214 + t136 * t166 + (-t182 * t214 + (0.2e1 * t168 * t171 ^ 2 + t166) * t153) * qJD(2)) * t148) * t164;
	t1 = [(-t183 * t166 * t202 + (-t133 * t166 - t183 * t196) * t148) * t164, t113, 0, 0, 0, 0; t153 * t126 * t205 + (-t135 * t126 + (t114 * t153 + t117 * t133) * t127) * t120 - ((t117 * t204 - t226 * t219) * t120 + (t117 * t205 + ((t118 * t148 * t199 + t202) * t217 + (0.2e1 * t199 * t221 - t118 + (-t184 * t164 + t118) * t148) * t216) * t120) * t127) * t183, (-t126 * t157 - t127 * t223) * t205 + (-t204 * t223 + t134 * t126 + (-t157 * t114 + t115 * t133 + (t169 * t206 - t113 * t153 - t119 * t135 + (t119 * t212 + t182) * t118) * t216 + (t118 * t119 * t153 - t136 + (t113 * t174 + (-qJD(2) * t119 - t118) * t171) * t169) * t217) * t127) * t120, 0, 0, 0, 0; (t138 * t186 - t142 * t218) * t203 + ((t142 * qJD(3) - t136 * t170 + t173 * t198) * t138 - 0.2e1 * t142 * t201 + (t186 * t125 + (t186 * qJD(3) - t136 * t173 - t170 * t198) * t185 - t142 * t124) * t139) * t130, -t189 * t183 * t203 + (t189 * t133 - ((-qJD(3) * t138 + 0.2e1 * t201) * t173 + (t124 * t173 + (t125 + t227) * t170) * t139) * t183) * t130, -0.2e1 * t222 - 0.2e1 * (t124 * t139 * t130 - (-t130 * t220 - t139 * t222) * t185) * t185, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:03
	% EndTime: 2019-10-10 11:24:04
	% DurationCPUTime: 1.04s
	% Computational Cost: add. (1788->92), mult. (4303->201), div. (668->14), fcn. (5516->11), ass. (0->92)
	t179 = sin(qJ(2));
	t180 = sin(qJ(1));
	t232 = cos(pkin(6));
	t202 = t180 * t232;
	t200 = t179 * t202;
	t181 = cos(qJ(2));
	t182 = cos(qJ(1));
	t216 = t182 * t181;
	t163 = -t200 + t216;
	t174 = qJ(3) + pkin(11);
	t170 = sin(t174);
	t171 = cos(t174);
	t178 = sin(pkin(6));
	t220 = t178 * t180;
	t192 = -t163 * t170 + t171 * t220;
	t234 = qJD(3) * t192;
	t201 = t182 * t232;
	t199 = t181 * t201;
	t217 = t180 * t179;
	t159 = -t199 + t217;
	t219 = t178 * t181;
	t153 = atan2(-t159, -t219);
	t151 = sin(t153);
	t152 = cos(t153);
	t157 = t159 ^ 2;
	t173 = 0.1e1 / t178 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t156 = t157 * t173 * t176 + 0.1e1;
	t154 = 0.1e1 / t156;
	t172 = 0.1e1 / t178;
	t175 = 0.1e1 / t181;
	t206 = t159 * t172 * t175;
	t233 = (t152 * t206 - t151) * t154 + t151;
	t135 = -t151 * t159 - t152 * t219;
	t132 = 0.1e1 / t135;
	t150 = t163 * t171 + t170 * t220;
	t144 = 0.1e1 / t150;
	t133 = 0.1e1 / t135 ^ 2;
	t145 = 0.1e1 / t150 ^ 2;
	t189 = -t179 * t201 - t180 * t181;
	t190 = -t182 * t179 - t181 * t202;
	t141 = -qJD(1) * t190 - qJD(2) * t189;
	t214 = qJD(2) * t179;
	t203 = t176 * t214;
	t191 = t141 * t175 + t159 * t203;
	t222 = t154 * t172;
	t124 = t191 * t222;
	t195 = t151 * t219 - t152 * t159;
	t207 = t152 * t178 * t179;
	t120 = qJD(2) * t207 + t195 * t124 - t151 * t141;
	t231 = t120 * t132 * t133;
	t221 = t176 * t179;
	t194 = t159 * t221 - t175 * t189;
	t125 = t194 * t222;
	t121 = t195 * t125 + t151 * t189 + t207;
	t230 = t121 * t190;
	t140 = qJD(1) * t189 + qJD(2) * t190;
	t215 = qJD(1) * t178;
	t204 = t182 * t215;
	t129 = qJD(3) * t150 + t140 * t170 - t171 * t204;
	t143 = t192 ^ 2;
	t138 = t143 * t145 + 0.1e1;
	t225 = t145 * t192;
	t130 = t140 * t171 + t170 * t204 + t234;
	t228 = t130 * t144 * t145;
	t229 = (-t129 * t225 - t143 * t228) / t138 ^ 2;
	t177 = t175 * t176;
	t227 = (t141 * t159 * t176 + t157 * t177 * t214) * t173 / t156 ^ 2;
	t198 = qJD(2) * t232 + qJD(1);
	t213 = qJD(2) * t181;
	t139 = -qJD(1) * t199 - t182 * t213 + t198 * t217;
	t226 = t139 * t133;
	t224 = t151 * t190;
	t223 = t152 * t190;
	t218 = t178 * t182;
	t158 = t190 ^ 2;
	t128 = t158 * t133 + 0.1e1;
	t212 = 0.2e1 * (-t158 * t231 + t190 * t226) / t128 ^ 2;
	t211 = 0.2e1 * t231;
	t210 = 0.2e1 * t229;
	t209 = -0.2e1 * t227;
	t208 = t192 * t228;
	t205 = t180 * t215;
	t196 = t170 * t144 + t171 * t225;
	t193 = -t170 * t189 + t171 * t218;
	t148 = t170 * t218 + t171 * t189;
	t142 = -qJD(1) * t200 - t180 * t214 + t198 * t216;
	t136 = 0.1e1 / t138;
	t126 = 0.1e1 / t128;
	t123 = t233 * t190;
	t119 = (t194 * t209 + (t141 * t221 + t142 * t175 + (-t189 * t221 + (0.2e1 * t177 * t179 ^ 2 + t175) * t159) * qJD(2)) * t154) * t172;
	t1 = [(-t190 * t175 * t209 + (-t139 * t175 - t190 * t203) * t154) * t172, t119, 0, 0, 0, 0; t159 * t132 * t212 + (-t141 * t132 + (t120 * t159 + t123 * t139) * t133) * t126 - ((t123 * t211 - t233 * t226) * t126 + (t123 * t212 + ((t124 * t154 * t206 + t209) * t224 + (0.2e1 * t206 * t227 - t124 + (-t172 * t191 + t124) * t154) * t223) * t126) * t133) * t190, (-t132 * t163 - t133 * t230) * t212 + (-t211 * t230 + t140 * t132 + (-t163 * t120 + t121 * t139 + (t178 * t213 - t119 * t159 - t125 * t141 + (t125 * t219 + t189) * t124) * t223 + (t124 * t125 * t159 - t142 + (t119 * t181 + (-qJD(2) * t125 - t124) * t179) * t178) * t224) * t133) * t126, 0, 0, 0, 0; (t144 * t193 - t148 * t225) * t210 + ((qJD(3) * t148 - t142 * t170 + t171 * t205) * t144 - 0.2e1 * t148 * t208 + (t193 * t130 + (qJD(3) * t193 - t142 * t171 - t170 * t205) * t192 - t148 * t129) * t145) * t136, -t196 * t190 * t210 + (t196 * t139 - ((-qJD(3) * t144 + 0.2e1 * t208) * t171 + (t129 * t171 + (t130 + t234) * t170) * t145) * t190) * t136, -0.2e1 * t229 - 0.2e1 * (t129 * t145 * t136 - (-t136 * t228 - t145 * t229) * t192) * t192, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:03
	% EndTime: 2019-10-10 11:24:05
	% DurationCPUTime: 1.95s
	% Computational Cost: add. (7870->139), mult. (12381->281), div. (702->12), fcn. (15714->13), ass. (0->122)
	t236 = cos(pkin(6));
	t237 = sin(qJ(2));
	t303 = sin(qJ(1));
	t267 = t303 * t237;
	t257 = t236 * t267;
	t261 = t303 * qJD(2);
	t238 = cos(qJ(2));
	t239 = cos(qJ(1));
	t281 = t239 * t238;
	t234 = sin(pkin(6));
	t284 = t234 * t239;
	t308 = -qJD(1) * t257 - t237 * t261 + (qJD(2) * t236 + qJD(1)) * t281 - qJD(3) * t284;
	t219 = -t257 + t281;
	t232 = qJ(3) + pkin(11);
	t230 = sin(t232);
	t231 = cos(t232);
	t268 = t234 * t303;
	t210 = t219 * t231 + t230 * t268;
	t233 = sin(pkin(12));
	t235 = cos(pkin(12));
	t266 = t303 * t238;
	t282 = t239 * t237;
	t248 = -t236 * t266 - t282;
	t288 = t248 * t235;
	t188 = t210 * t233 + t288;
	t250 = -t236 * t282 - t266;
	t197 = t250 * qJD(1) + t248 * qJD(2);
	t249 = -t219 * t230 + t231 * t268;
	t265 = qJD(1) * t284;
	t176 = t249 * qJD(3) + t197 * t231 + t230 * t265;
	t262 = t303 * qJD(1);
	t269 = t236 * t281;
	t279 = qJD(2) * t238;
	t196 = -qJD(1) * t269 - t239 * t279 + (t236 * t261 + t262) * t237;
	t171 = t176 * t235 - t196 * t233;
	t289 = t248 * t233;
	t189 = t210 * t235 - t289;
	t181 = 0.1e1 / t189;
	t182 = 0.1e1 / t189 ^ 2;
	t298 = t171 * t181 * t182;
	t260 = 0.2e1 * t188 * t298;
	t204 = -t230 * t250 + t231 * t284;
	t286 = t234 * t237;
	t214 = t230 * t286 - t236 * t231;
	t193 = atan2(-t204, t214);
	t184 = sin(t193);
	t185 = cos(t193);
	t169 = -t184 * t204 + t185 * t214;
	t167 = 0.1e1 / t169 ^ 2;
	t203 = t249 ^ 2;
	t165 = t203 * t167 + 0.1e1;
	t175 = t210 * qJD(3) + t197 * t230 - t231 * t265;
	t297 = t175 * t167;
	t202 = t204 ^ 2;
	t212 = 0.1e1 / t214 ^ 2;
	t192 = t202 * t212 + 0.1e1;
	t190 = 0.1e1 / t192;
	t256 = t234 * t262;
	t278 = qJD(3) * t231;
	t177 = t308 * t230 - t231 * t256 - t250 * t278;
	t215 = t236 * t230 + t231 * t286;
	t264 = t234 * t279;
	t200 = t215 * qJD(3) + t230 * t264;
	t211 = 0.1e1 / t214;
	t291 = t204 * t212;
	t254 = -t177 * t211 + t200 * t291;
	t159 = t254 * t190;
	t255 = -t184 * t214 - t185 * t204;
	t154 = t255 * t159 - t184 * t177 + t185 * t200;
	t166 = 0.1e1 / t169;
	t168 = t166 * t167;
	t301 = t154 * t168;
	t277 = 0.2e1 * (-t203 * t301 - t249 * t297) / t165 ^ 2;
	t307 = t200 * t212;
	t216 = -t267 + t269;
	t285 = t234 * t238;
	t251 = -t211 * t216 + t285 * t291;
	t306 = t230 * t251;
	t178 = (qJD(3) * t250 + t256) * t230 + t308 * t231;
	t305 = -0.2e1 * t204;
	t304 = -0.2e1 * t249;
	t293 = t211 * t307;
	t300 = (t177 * t291 - t202 * t293) / t192 ^ 2;
	t299 = t167 * t249;
	t296 = t182 * t188;
	t295 = t184 * t249;
	t294 = t185 * t249;
	t292 = t204 * t211;
	t290 = t248 * t230;
	t287 = t233 * t181;
	t283 = t235 * t188;
	t280 = qJD(2) * t237;
	t170 = t176 * t233 + t196 * t235;
	t180 = t188 ^ 2;
	t174 = t180 * t182 + 0.1e1;
	t276 = 0.2e1 * (t170 * t296 - t180 * t298) / t174 ^ 2;
	t275 = -0.2e1 * t300;
	t274 = t168 * t304;
	t273 = t211 * t300;
	t272 = t167 * t295;
	t271 = t167 * t294;
	t259 = t293 * t305;
	t206 = -t230 * t284 - t231 * t250;
	t253 = -t206 * t211 + t215 * t291;
	t252 = -qJD(3) * t290 + t196 * t231;
	t246 = -t184 + (t185 * t292 + t184) * t190;
	t201 = -t214 * qJD(3) + t231 * t264;
	t198 = t248 * qJD(1) + t250 * qJD(2);
	t195 = t219 * t233 + t231 * t288;
	t194 = -t219 * t235 + t231 * t289;
	t187 = -t206 * t235 + t216 * t233;
	t186 = -t206 * t233 - t216 * t235;
	t172 = 0.1e1 / t174;
	t163 = 0.1e1 / t165;
	t162 = t190 * t306;
	t160 = t253 * t190;
	t158 = t246 * t249;
	t156 = (-t184 * t216 + t185 * t285) * t230 + t255 * t162;
	t155 = t255 * t160 - t184 * t206 + t185 * t215;
	t153 = t253 * t275 + (t215 * t259 - t178 * t211 + (t177 * t215 + t200 * t206 + t201 * t204) * t212) * t190;
	t151 = t275 * t306 + (t251 * t278 + (t259 * t285 - t198 * t211 + (t200 * t216 + (t177 * t238 - t204 * t280) * t234) * t212) * t230) * t190;
	t1 = [t273 * t304 + (-t175 * t211 - t249 * t307) * t190, t151, t153, 0, 0, 0; t204 * t166 * t277 + (-t177 * t166 + (t154 * t204 + t158 * t175) * t167) * t163 - (-t158 * t167 * t277 + (-0.2e1 * t158 * t301 + (-t159 * t190 * t292 + t275) * t272 + (t273 * t305 - t159 + (t159 - t254) * t190) * t271 - t246 * t297) * t163) * t249, (-t156 * t299 - t166 * t290) * t277 + (-t156 * t297 + (t196 * t230 + t248 * t278) * t166 + (t156 * t274 - t167 * t290) * t154 + (-t151 * t204 - t162 * t177 + (-t230 * t280 + t238 * t278) * t234 + (-t162 * t214 - t216 * t230) * t159) * t271 + (-t216 * t278 - t151 * t214 - t162 * t200 - t198 * t230 + (t162 * t204 - t230 * t285) * t159) * t272) * t163, (-t155 * t299 - t166 * t210) * t277 + (t155 * t154 * t274 + t176 * t166 + (-t210 * t154 - t155 * t175 + (-t153 * t204 - t160 * t177 + t201 + (-t160 * t214 - t206) * t159) * t294 + (-t153 * t214 - t160 * t200 - t178 + (t160 * t204 - t215) * t159) * t295) * t167) * t163, 0, 0, 0; (-t181 * t186 + t187 * t296) * t276 + ((-t178 * t233 - t198 * t235) * t181 + t187 * t260 + (-t186 * t171 - (-t178 * t235 + t198 * t233) * t188 - t187 * t170) * t182) * t172, (-t181 * t194 + t195 * t296) * t276 + ((-t197 * t235 + t252 * t233) * t181 + t195 * t260 + (-t194 * t171 - (t197 * t233 + t252 * t235) * t188 - t195 * t170) * t182) * t172, -(-t182 * t283 + t287) * t249 * t276 + (t249 * t235 * t260 - t175 * t287 + (t175 * t283 - (t170 * t235 + t171 * t233) * t249) * t182) * t172, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 11:24:04
	% EndTime: 2019-10-10 11:24:06
	% DurationCPUTime: 2.15s
	% Computational Cost: add. (8849->150), mult. (13478->297), div. (726->12), fcn. (17045->13), ass. (0->128)
	t276 = cos(pkin(6));
	t277 = sin(qJ(2));
	t347 = sin(qJ(1));
	t309 = t347 * t277;
	t299 = t276 * t309;
	t303 = t347 * qJD(2);
	t278 = cos(qJ(2));
	t279 = cos(qJ(1));
	t325 = t279 * t278;
	t275 = sin(pkin(6));
	t327 = t275 * t279;
	t352 = -qJD(1) * t299 - t277 * t303 + (qJD(2) * t276 + qJD(1)) * t325 - qJD(3) * t327;
	t274 = qJ(3) + pkin(11);
	t270 = sin(t274);
	t272 = cos(t274);
	t308 = t347 * t278;
	t326 = t279 * t277;
	t291 = -t276 * t326 - t308;
	t242 = -t270 * t291 + t272 * t327;
	t329 = t275 * t277;
	t253 = t270 * t329 - t276 * t272;
	t231 = atan2(-t242, t253);
	t226 = sin(t231);
	t227 = cos(t231);
	t209 = -t226 * t242 + t227 * t253;
	t207 = 0.1e1 / t209 ^ 2;
	t258 = -t299 + t325;
	t310 = t275 * t347;
	t290 = -t258 * t270 + t272 * t310;
	t241 = t290 ^ 2;
	t203 = t241 * t207 + 0.1e1;
	t289 = -t276 * t308 - t326;
	t235 = t291 * qJD(1) + t289 * qJD(2);
	t248 = t258 * t272 + t270 * t310;
	t307 = qJD(1) * t327;
	t213 = t248 * qJD(3) + t235 * t270 - t272 * t307;
	t340 = t213 * t207;
	t240 = t242 ^ 2;
	t251 = 0.1e1 / t253 ^ 2;
	t230 = t240 * t251 + 0.1e1;
	t228 = 0.1e1 / t230;
	t304 = t347 * qJD(1);
	t298 = t275 * t304;
	t322 = qJD(3) * t272;
	t215 = t352 * t270 - t272 * t298 - t291 * t322;
	t254 = t276 * t270 + t272 * t329;
	t323 = qJD(2) * t278;
	t306 = t275 * t323;
	t238 = t254 * qJD(3) + t270 * t306;
	t250 = 0.1e1 / t253;
	t334 = t242 * t251;
	t295 = -t215 * t250 + t238 * t334;
	t197 = t295 * t228;
	t296 = -t226 * t253 - t227 * t242;
	t192 = t296 * t197 - t226 * t215 + t227 * t238;
	t206 = 0.1e1 / t209;
	t208 = t206 * t207;
	t345 = t192 * t208;
	t320 = 0.2e1 * (-t241 * t345 - t290 * t340) / t203 ^ 2;
	t351 = t238 * t251;
	t311 = t276 * t325;
	t255 = -t309 + t311;
	t328 = t275 * t278;
	t292 = -t250 * t255 + t328 * t334;
	t350 = t270 * t292;
	t216 = (qJD(3) * t291 + t298) * t270 + t352 * t272;
	t273 = pkin(12) + qJ(6);
	t269 = sin(t273);
	t271 = cos(t273);
	t225 = t248 * t271 - t269 * t289;
	t219 = 0.1e1 / t225;
	t220 = 0.1e1 / t225 ^ 2;
	t349 = -0.2e1 * t242;
	t348 = -0.2e1 * t290;
	t214 = t290 * qJD(3) + t235 * t272 + t270 * t307;
	t234 = -qJD(1) * t311 - t279 * t323 + (t276 * t303 + t304) * t277;
	t204 = t225 * qJD(6) + t214 * t269 + t234 * t271;
	t224 = t248 * t269 + t271 * t289;
	t218 = t224 ^ 2;
	t212 = t218 * t220 + 0.1e1;
	t339 = t220 * t224;
	t321 = qJD(6) * t224;
	t205 = t214 * t271 - t234 * t269 - t321;
	t342 = t205 * t219 * t220;
	t344 = (t204 * t339 - t218 * t342) / t212 ^ 2;
	t336 = t250 * t351;
	t343 = (t215 * t334 - t240 * t336) / t230 ^ 2;
	t341 = t207 * t290;
	t338 = t226 * t290;
	t337 = t227 * t290;
	t335 = t242 * t250;
	t333 = t289 * t270;
	t332 = t289 * t272;
	t331 = t269 * t219;
	t330 = t271 * t224;
	t324 = qJD(2) * t277;
	t319 = -0.2e1 * t344;
	t318 = 0.2e1 * t344;
	t317 = -0.2e1 * t343;
	t316 = t208 * t348;
	t315 = t250 * t343;
	t314 = t207 * t338;
	t313 = t207 * t337;
	t312 = t224 * t342;
	t302 = 0.2e1 * t312;
	t301 = t336 * t349;
	t244 = -t270 * t327 - t272 * t291;
	t297 = -qJD(6) * t332 + t235;
	t223 = -t244 * t271 + t255 * t269;
	t222 = -t244 * t269 - t255 * t271;
	t294 = t220 * t330 - t331;
	t293 = -t244 * t250 + t254 * t334;
	t287 = -t226 + (t227 * t335 + t226) * t228;
	t286 = -qJD(3) * t333 + qJD(6) * t258 + t234 * t272;
	t239 = -t253 * qJD(3) + t272 * t306;
	t236 = t289 * qJD(1) + t291 * qJD(2);
	t233 = t258 * t269 + t271 * t332;
	t232 = -t258 * t271 + t269 * t332;
	t210 = 0.1e1 / t212;
	t201 = 0.1e1 / t203;
	t200 = t228 * t350;
	t198 = t293 * t228;
	t196 = t287 * t290;
	t194 = (-t226 * t255 + t227 * t328) * t270 + t296 * t200;
	t193 = t296 * t198 - t226 * t244 + t227 * t254;
	t191 = t293 * t317 + (t254 * t301 - t216 * t250 + (t215 * t254 + t238 * t244 + t239 * t242) * t251) * t228;
	t189 = t317 * t350 + (t292 * t322 + (t301 * t328 - t236 * t250 + (t238 * t255 + (t215 * t278 - t242 * t324) * t275) * t251) * t270) * t228;
	t1 = [t315 * t348 + (-t213 * t250 - t290 * t351) * t228, t189, t191, 0, 0, 0; t242 * t206 * t320 + (-t215 * t206 + (t192 * t242 + t196 * t213) * t207) * t201 - (-t196 * t207 * t320 + (-0.2e1 * t196 * t345 + (-t197 * t228 * t335 + t317) * t314 + (t315 * t349 - t197 + (t197 - t295) * t228) * t313 - t287 * t340) * t201) * t290, (-t194 * t341 - t206 * t333) * t320 + (-t194 * t340 + (t234 * t270 + t289 * t322) * t206 + (t194 * t316 - t207 * t333) * t192 + (-t189 * t242 - t200 * t215 + (-t270 * t324 + t278 * t322) * t275 + (-t200 * t253 - t255 * t270) * t197) * t313 + (-t255 * t322 - t189 * t253 - t200 * t238 - t236 * t270 + (t200 * t242 - t270 * t328) * t197) * t314) * t201, (-t193 * t341 - t206 * t248) * t320 + (t193 * t192 * t316 + t214 * t206 + (-t248 * t192 - t193 * t213 + (-t191 * t242 - t198 * t215 + t239 + (-t198 * t253 - t244) * t197) * t337 + (-t191 * t253 - t198 * t238 - t216 + (t198 * t242 - t254) * t197) * t338) * t207) * t201, 0, 0, 0; (-t219 * t222 + t223 * t339) * t318 + ((t223 * qJD(6) - t216 * t269 - t236 * t271) * t219 + t223 * t302 + (-t222 * t205 - (-t222 * qJD(6) - t216 * t271 + t236 * t269) * t224 - t223 * t204) * t220) * t210, (-t219 * t232 + t233 * t339) * t318 + (t233 * t302 - t297 * t219 * t271 + t286 * t331 + (-t297 * t224 * t269 - t233 * t204 - t232 * t205 - t286 * t330) * t220) * t210, -t294 * t290 * t319 + (t294 * t213 - ((-qJD(6) * t219 - 0.2e1 * t312) * t271 + (t204 * t271 + (t205 - t321) * t269) * t220) * t290) * t210, 0, 0, t319 + 0.2e1 * (t204 * t220 * t210 + (-t210 * t342 - t220 * t344) * t224) * t224;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end