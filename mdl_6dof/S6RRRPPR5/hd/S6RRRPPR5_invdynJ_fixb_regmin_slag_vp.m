% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4,theta5]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:46
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRRPPR5_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR5_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR5_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR5_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR5_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPPR5_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 15:44:18
% EndTime: 2019-03-09 15:44:50
% DurationCPUTime: 15.84s
% Computational Cost: add. (17285->694), mult. (43087->964), div. (0->0), fcn. (35026->18), ass. (0->330)
t339 = sin(pkin(6));
t350 = cos(qJ(2));
t436 = qJD(1) * t350;
t410 = t339 * t436;
t507 = qJD(3) - t410;
t346 = sin(qJ(2));
t387 = pkin(2) * t346 - pkin(9) * t350;
t438 = qJD(1) * t339;
t247 = t387 * t438;
t349 = cos(qJ(3));
t230 = t349 * t247;
t411 = t346 * t438;
t342 = cos(pkin(6));
t437 = qJD(1) * t342;
t422 = pkin(1) * t437;
t246 = -pkin(8) * t411 + t350 * t422;
t345 = sin(qJ(3));
t343 = -qJ(4) - pkin(9);
t403 = qJD(3) * t343;
t453 = t349 * t350;
t506 = t230 + (pkin(3) * t346 - qJ(4) * t453) * t438 - t349 * t403 + (-t246 + qJD(4)) * t345;
t395 = t345 * t410;
t444 = t349 * t246 + t345 * t247;
t505 = qJ(4) * t395 + qJD(4) * t349 + t345 * t403 - t444;
t338 = sin(pkin(11));
t341 = cos(pkin(11));
t267 = t338 * t345 - t341 * t349;
t207 = t267 * t410;
t255 = t267 * qJD(3);
t504 = -t207 + t255;
t269 = t338 * t349 + t341 * t345;
t443 = t507 * t269;
t448 = -t338 * t506 + t505 * t341;
t428 = qJD(1) * qJD(2);
t406 = t350 * t428;
t426 = qJDD(1) * t346;
t503 = t406 + t426;
t249 = pkin(8) * t410 + t346 * t422;
t433 = qJD(3) * t345;
t502 = -t249 + (-t395 + t433) * pkin(3);
t501 = -qJ(5) * t411 + t448;
t500 = t443 * pkin(4) + t504 * qJ(5) - qJD(5) * t269 + t502;
t312 = qJD(2) + t437;
t225 = t312 * t349 - t345 * t411;
t226 = t312 * t345 + t349 * t411;
t170 = -t341 * t225 + t226 * t338;
t167 = qJD(6) + t170;
t337 = sin(pkin(12));
t340 = cos(pkin(12));
t375 = t225 * t338 + t341 * t226;
t141 = t337 * t375 - t340 * t507;
t143 = t337 * t507 + t340 * t375;
t344 = sin(qJ(6));
t348 = cos(qJ(6));
t83 = t348 * t141 + t143 * t344;
t499 = t167 * t83;
t482 = t505 * t338 + t341 * t506;
t376 = t141 * t344 - t143 * t348;
t498 = t167 * t376;
t182 = -t207 * t337 - t340 * t411;
t497 = -t255 * t337 - t182;
t270 = t337 * t348 + t340 * t344;
t257 = t270 * qJD(6);
t441 = t270 * t170 + t257;
t496 = t503 * t339;
t347 = sin(qJ(1));
t454 = t347 * t350;
t351 = cos(qJ(1));
t455 = t346 * t351;
t261 = t342 * t455 + t454;
t334 = qJ(3) + pkin(11);
t328 = sin(t334);
t330 = cos(t334);
t461 = t339 * t351;
t194 = t261 * t330 - t328 * t461;
t451 = t350 * t351;
t456 = t346 * t347;
t260 = -t342 * t451 + t456;
t333 = pkin(12) + qJ(6);
t327 = sin(t333);
t329 = cos(t333);
t495 = t194 * t327 - t260 * t329;
t494 = t194 * t329 + t260 * t327;
t332 = t339 ^ 2;
t424 = 0.2e1 * t332;
t486 = -t501 * t337 + t500 * t340;
t485 = t500 * t337 + t501 * t340;
t427 = qJDD(1) * t342;
t311 = qJDD(2) + t427;
t392 = qJD(3) * t411;
t432 = qJD(3) * t349;
t161 = t312 * t432 + t496 * t349 + (t311 - t392) * t345;
t425 = qJDD(1) * t350;
t310 = t339 * t425;
t407 = t346 * t428;
t394 = t339 * t407;
t241 = qJDD(3) - t310 + t394;
t212 = pkin(9) * t312 + t249;
t374 = -pkin(2) * t350 - pkin(9) * t346 - pkin(1);
t239 = t374 * t339;
t216 = qJD(1) * t239;
t160 = t212 * t349 + t216 * t345;
t421 = pkin(1) * qJD(2) * t342;
t398 = qJD(1) * t421;
t419 = pkin(1) * t427;
t412 = -pkin(8) * t310 - t346 * t419 - t350 * t398;
t358 = -pkin(8) * t394 - t412;
t176 = pkin(9) * t311 + t358;
t371 = t387 * qJD(2);
t181 = (qJD(1) * t371 + qJDD(1) * t374) * t339;
t354 = -qJD(3) * t160 - t345 * t176 + t349 * t181;
t49 = pkin(3) * t241 - qJ(4) * t161 - qJD(4) * t226 + t354;
t366 = -t349 * t176 - t345 * t181 + t212 * t433 - t216 * t432;
t397 = t312 * t433 + t345 * t496 + t349 * t392;
t367 = t349 * t311 - t397;
t52 = qJ(4) * t367 + t225 * qJD(4) - t366;
t18 = -t338 * t52 + t341 * t49;
t17 = -pkin(4) * t241 + qJDD(5) - t18;
t193 = t261 * t328 + t330 * t461;
t263 = -t342 * t456 + t451;
t464 = t339 * t347;
t197 = t263 * t328 - t330 * t464;
t465 = t339 * t346;
t235 = t328 * t465 - t342 * t330;
t364 = g(1) * t197 + g(2) * t193 + g(3) * t235;
t362 = -t17 + t364;
t483 = pkin(4) * t411 + t482;
t462 = t339 * t350;
t492 = pkin(1) * t346;
t440 = pkin(8) * t462 + t342 * t492;
t238 = pkin(9) * t342 + t440;
t447 = t349 * t238 + t345 * t239;
t262 = t342 * t454 + t455;
t386 = g(1) * t262 + g(2) * t260;
t361 = -g(3) * t462 + t386;
t104 = t161 * t338 - t341 * t367;
t101 = qJDD(6) + t104;
t268 = t337 * t344 - t348 * t340;
t442 = t167 * t268;
t493 = -t101 * t270 + t167 * t442;
t105 = t341 * t161 + t338 * t367;
t79 = t105 * t337 - t340 * t241;
t80 = t105 * t340 + t241 * t337;
t22 = -qJD(6) * t376 + t344 * t80 + t348 * t79;
t491 = g(3) * t339;
t490 = t311 * pkin(2);
t321 = pkin(3) * t338 + qJ(5);
t489 = pkin(10) + t321;
t19 = t338 * t49 + t341 * t52;
t16 = qJ(5) * t241 + qJD(5) * t507 + t19;
t396 = pkin(8) * t496 + t346 * t398 - t350 * t419;
t177 = t396 - t490;
t111 = -pkin(3) * t367 + qJDD(4) + t177;
t27 = t104 * pkin(4) - t105 * qJ(5) - qJD(5) * t375 + t111;
t7 = t340 * t16 + t337 * t27;
t417 = t345 * t465;
t459 = t342 * t349;
t258 = t417 - t459;
t434 = qJD(2) * t350;
t408 = t339 * t434;
t202 = -qJD(3) * t258 + t349 * t408;
t463 = t339 * t349;
t259 = t342 * t345 + t346 * t463;
t248 = t339 * t371;
t313 = pkin(8) * t465;
t458 = t342 * t350;
t250 = (pkin(1) * t458 - t313) * qJD(2);
t355 = -qJD(3) * t447 + t349 * t248 - t250 * t345;
t435 = qJD(2) * t346;
t409 = t339 * t435;
t81 = pkin(3) * t409 - qJ(4) * t202 - qJD(4) * t259 + t355;
t201 = qJD(3) * t259 + t345 * t408;
t365 = -t238 * t433 + t239 * t432 + t345 * t248 + t349 * t250;
t90 = -qJ(4) * t201 - qJD(4) * t258 + t365;
t41 = t338 * t81 + t341 * t90;
t35 = (qJ(5) * t435 - qJD(5) * t350) * t339 + t41;
t147 = t341 * t201 + t202 * t338;
t148 = -t201 * t338 + t202 * t341;
t189 = -t258 * t338 + t259 * t341;
t251 = pkin(8) * t408 + t346 * t421;
t391 = pkin(3) * t201 + t251;
t57 = pkin(4) * t147 - qJ(5) * t148 - qJD(5) * t189 + t391;
t14 = t337 * t57 + t340 * t35;
t159 = -t212 * t345 + t349 * t216;
t129 = -qJ(4) * t226 + t159;
t116 = pkin(3) * t507 + t129;
t130 = qJ(4) * t225 + t160;
t460 = t341 * t130;
t64 = t338 * t116 + t460;
t62 = qJ(5) * t507 + t64;
t211 = -pkin(2) * t312 - t246;
t168 = -pkin(3) * t225 + qJD(4) + t211;
t71 = pkin(4) * t170 - qJ(5) * t375 + t168;
t32 = t337 * t71 + t340 * t62;
t125 = t338 * t130;
t68 = t129 * t341 - t125;
t97 = pkin(3) * t226 + pkin(4) * t375 + qJ(5) * t170;
t37 = t337 * t97 + t340 * t68;
t488 = t375 * t83;
t487 = t375 * t376;
t484 = pkin(5) * t497 + t483;
t188 = t341 * t258 + t259 * t338;
t237 = t313 + (-pkin(1) * t350 - pkin(2)) * t342;
t359 = pkin(3) * t258 + t237;
t106 = pkin(4) * t188 - qJ(5) * t189 + t359;
t402 = -t238 * t345 + t349 * t239;
t136 = -pkin(3) * t462 - qJ(4) * t259 + t402;
t149 = -qJ(4) * t258 + t447;
t89 = t338 * t136 + t341 * t149;
t77 = -qJ(5) * t462 + t89;
t45 = t337 * t106 + t340 * t77;
t480 = t170 * t337;
t479 = t170 * t340;
t478 = t225 * t507;
t477 = t226 * t507;
t473 = t261 * t345;
t472 = t263 * t345;
t471 = t269 * t337;
t470 = t269 * t340;
t469 = t327 * t330;
t468 = t329 * t330;
t467 = t330 * t350;
t466 = t332 * qJD(1) ^ 2;
t457 = t343 * t346;
t452 = t349 * t351;
t183 = -t207 * t340 + t337 * t411;
t450 = t182 * t344 - t183 * t348 + t255 * t268 - t257 * t269;
t430 = qJD(6) * t348;
t431 = qJD(6) * t344;
t449 = -t348 * t182 - t183 * t344 - t255 * t270 + t430 * t470 - t431 * t471;
t326 = pkin(3) * t349 + pkin(2);
t192 = pkin(4) * t267 - qJ(5) * t269 - t326;
t295 = t343 * t345;
t296 = t343 * t349;
t210 = t295 * t338 - t296 * t341;
t138 = t337 * t192 + t340 * t210;
t446 = -t260 * t326 - t261 * t343;
t445 = -t262 * t326 - t263 * t343;
t335 = t346 ^ 2;
t439 = -t350 ^ 2 + t335;
t429 = qJD(2) - t312;
t423 = g(3) * t465;
t418 = t350 * t466;
t416 = t345 * t464;
t415 = t347 * t463;
t414 = t339 * t452;
t298 = t345 * t461;
t325 = -pkin(3) * t341 - pkin(4);
t6 = -t16 * t337 + t340 * t27;
t13 = -t337 * t35 + t340 * t57;
t31 = -t337 * t62 + t340 * t71;
t36 = -t337 * t68 + t340 * t97;
t40 = -t338 * t90 + t341 * t81;
t44 = t340 * t106 - t337 * t77;
t63 = t116 * t341 - t125;
t67 = t129 * t338 + t460;
t88 = t136 * t341 - t338 * t149;
t137 = t340 * t192 - t210 * t337;
t401 = t261 * t349 - t298;
t209 = -t341 * t295 - t296 * t338;
t400 = t312 + t437;
t399 = t311 + t427;
t114 = pkin(5) * t267 - pkin(10) * t470 + t137;
t390 = pkin(10) * t497 - qJD(6) * t114 - t485;
t121 = -pkin(10) * t471 + t138;
t389 = qJD(6) * t121 - t486 + (-t255 * t340 - t183) * pkin(10) - t443 * pkin(5);
t388 = -t268 * t101 - t167 * t441;
t385 = -g(1) * t260 + g(2) * t262;
t384 = g(1) * t263 + g(2) * t261;
t383 = -t337 * t7 - t340 * t6;
t4 = pkin(5) * t104 - pkin(10) * t80 + t6;
t5 = -pkin(10) * t79 + t7;
t382 = t344 * t4 + t348 * t5;
t78 = pkin(4) * t462 - t88;
t381 = pkin(4) * t330 + qJ(5) * t328;
t20 = pkin(5) * t170 - pkin(10) * t143 + t31;
t23 = -pkin(10) * t141 + t32;
t8 = t20 * t348 - t23 * t344;
t9 = t20 * t344 + t23 * t348;
t166 = t189 * t340 - t337 * t462;
t29 = pkin(5) * t188 - pkin(10) * t166 + t44;
t165 = t189 * t337 + t340 * t462;
t33 = -pkin(10) * t165 + t45;
t380 = t29 * t348 - t33 * t344;
t379 = t29 * t344 + t33 * t348;
t378 = t31 * t337 - t32 * t340;
t377 = t351 * pkin(1) + pkin(3) * t416 + pkin(8) * t464 - t262 * t343 + t263 * t326;
t109 = t348 * t165 + t166 * t344;
t110 = -t165 * t344 + t166 * t348;
t372 = -t414 - t473;
t265 = t489 * t340;
t370 = pkin(5) * t375 + pkin(10) * t479 + qJD(5) * t337 + qJD(6) * t265 + t36;
t264 = t489 * t337;
t369 = pkin(10) * t480 - qJD(5) * t340 + qJD(6) * t264 + t37;
t368 = -pkin(1) * t347 + pkin(3) * t298 + pkin(8) * t461 + t260 * t343 - t261 * t326;
t21 = -t141 * t430 - t143 * t431 - t344 * t79 + t348 * t80;
t61 = -pkin(4) * t507 + qJD(5) - t63;
t363 = -t104 * t321 + (-qJD(5) + t61) * t170;
t38 = -pkin(4) * t409 - t40;
t360 = t384 + t423;
t357 = -pkin(9) * t241 + t211 * t507;
t356 = t17 * t269 - t255 * t61 - t384;
t2 = -qJD(6) * t9 - t344 * t5 + t348 * t4;
t353 = pkin(9) * qJD(3) * t507 + t177 - t361;
t319 = pkin(3) * t459;
t293 = pkin(3) * t415;
t282 = -pkin(5) * t340 + t325;
t272 = t326 * t462;
t236 = t328 * t342 + t330 * t465;
t204 = t263 * t349 + t416;
t203 = t415 - t472;
t198 = t263 * t330 + t328 * t464;
t187 = t268 * t269;
t186 = t270 * t269;
t180 = pkin(5) * t471 + t209;
t156 = t198 * t329 + t262 * t327;
t155 = -t198 * t327 + t262 * t329;
t132 = t148 * t340 + t337 * t409;
t131 = t148 * t337 - t340 * t409;
t59 = pkin(5) * t165 + t78;
t58 = -pkin(5) * t480 + t67;
t48 = pkin(5) * t141 + t61;
t43 = qJD(6) * t110 + t348 * t131 + t132 * t344;
t42 = -qJD(6) * t109 - t131 * t344 + t132 * t348;
t28 = pkin(5) * t131 + t38;
t12 = -pkin(10) * t131 + t14;
t11 = pkin(5) * t79 + t17;
t10 = pkin(5) * t147 - pkin(10) * t132 + t13;
t1 = t8 * qJD(6) + t382;
t3 = [qJDD(1), g(1) * t347 - g(2) * t351, g(1) * t351 + g(2) * t347 (qJDD(1) * t335 + 0.2e1 * t346 * t406) * t332 (t346 * t425 - t428 * t439) * t424 (t346 * t399 + t400 * t434) * t339 (t350 * t399 - t400 * t435) * t339, t311 * t342, -t251 * t312 - t313 * t311 - t396 * t342 + g(1) * t261 - g(2) * t263 + (t311 * t458 + (-t407 + t425) * t424) * pkin(1), -pkin(1) * t424 * t503 - t250 * t312 - t440 * t311 - t358 * t342 + t385, t161 * t259 + t202 * t226, -t161 * t258 - t226 * t201 + t202 * t225 + t259 * t367, t202 * t507 + t241 * t259 + (-t161 * t350 + t226 * t435) * t339, -t201 * t507 - t258 * t241 + (t225 * t435 - t350 * t367) * t339 (-t241 * t350 + t435 * t507) * t339, t355 * t507 + t402 * t241 - t251 * t225 - t237 * t367 + t177 * t258 + t211 * t201 + g(1) * t401 - g(2) * t204 + (t159 * t435 - t350 * t354) * t339, -t365 * t507 - t447 * t241 + t251 * t226 + t237 * t161 + t177 * t259 + t211 * t202 - g(1) * t473 - g(2) * t203 + (-g(1) * t452 - t160 * t435 - t350 * t366) * t339, -t104 * t89 - t105 * t88 - t147 * t64 - t148 * t63 - t170 * t41 - t18 * t189 - t188 * t19 - t375 * t40 - t385, -g(1) * t368 - g(2) * t377 + t111 * t359 + t168 * t391 + t18 * t88 + t19 * t89 + t63 * t40 + t64 * t41, t13 * t170 + t44 * t104 + t6 * t188 + t31 * t147 + t38 * t141 + t78 * t79 + t17 * t165 + t61 * t131 - g(1) * (-t194 * t340 - t260 * t337) - g(2) * (t198 * t340 + t262 * t337) -t14 * t170 - t45 * t104 - t7 * t188 - t32 * t147 + t38 * t143 + t78 * t80 + t17 * t166 + t61 * t132 - g(1) * (t194 * t337 - t260 * t340) - g(2) * (-t198 * t337 + t262 * t340) g(1) * t193 - g(2) * t197 - t13 * t143 - t131 * t32 - t132 * t31 - t14 * t141 - t165 * t7 - t166 * t6 - t44 * t80 - t45 * t79, t7 * t45 + t32 * t14 + t6 * t44 + t31 * t13 + t17 * t78 + t61 * t38 - g(1) * (-pkin(4) * t194 - qJ(5) * t193 + t368) - g(2) * (pkin(4) * t198 + qJ(5) * t197 + t377) t110 * t21 - t376 * t42, -t109 * t21 - t110 * t22 + t376 * t43 - t42 * t83, t101 * t110 - t147 * t376 + t167 * t42 + t188 * t21, -t101 * t109 - t147 * t83 - t167 * t43 - t188 * t22, t101 * t188 + t147 * t167 (-qJD(6) * t379 + t10 * t348 - t12 * t344) * t167 + t380 * t101 + t2 * t188 + t8 * t147 + t28 * t83 + t59 * t22 + t11 * t109 + t48 * t43 + g(1) * t494 - g(2) * t156 -(qJD(6) * t380 + t10 * t344 + t12 * t348) * t167 - t379 * t101 - t1 * t188 - t9 * t147 - t28 * t376 + t59 * t21 + t11 * t110 + t48 * t42 - g(1) * t495 - g(2) * t155; 0, 0, 0, -t346 * t418, t439 * t466 (t429 * t436 + t426) * t339, -t411 * t429 + t310, t311, t249 * t312 + t466 * t492 + t361 - t396, pkin(1) * t418 + t246 * t312 + (pkin(8) * t428 + g(3)) * t465 + t384 + t412, t161 * t345 + t349 * t477 (t161 + t478) * t349 + (t367 - t477) * t345, t507 * t432 + t241 * t345 + (-t226 * t346 - t453 * t507) * t438, -t507 * t433 + t241 * t349 + (t345 * t350 * t507 - t225 * t346) * t438, -t507 * t411, -pkin(2) * t397 - t230 * t507 - t159 * t411 + t249 * t225 + (t246 * t507 + t357) * t345 + (-t353 + t490) * t349, -pkin(2) * t161 + t160 * t411 - t249 * t226 + t345 * t353 + t349 * t357 + t444 * t507, -t104 * t210 + t105 * t209 - t448 * t170 - t18 * t269 - t19 * t267 + t482 * t375 - t443 * t64 + t504 * t63 - t360, t19 * t210 - t18 * t209 - t111 * t326 - g(1) * t445 - g(2) * t446 - g(3) * (-t339 * t457 + t272) + t448 * t64 - t482 * t63 + t502 * t168, t137 * t104 - t61 * t182 + t209 * t79 + t6 * t267 + t361 * t340 * t330 + (t356 - t423) * t337 + t443 * t31 + t486 * t170 + t483 * t141, -t138 * t104 - t61 * t183 + t209 * t80 - t7 * t267 - t386 * t337 * t330 + t356 * t340 - (-t337 * t467 + t340 * t346) * t491 - t443 * t32 - t485 * t170 + t483 * t143, -t137 * t80 - t138 * t79 + t182 * t32 + t183 * t31 + t383 * t269 - (-t31 * t340 - t32 * t337) * t255 - t486 * t143 - t485 * t141 + t361 * t328, t7 * t138 + t6 * t137 + t17 * t209 - g(1) * (-t262 * t381 + t445) - g(2) * (-t260 * t381 + t446) - g(3) * t272 + t483 * t61 - (t350 * t381 - t457) * t491 + t485 * t32 + t486 * t31, -t187 * t21 - t376 * t450, -t186 * t21 + t187 * t22 + t376 * t449 - t450 * t83, -t101 * t187 + t167 * t450 + t21 * t267 - t376 * t443, -t101 * t186 - t167 * t449 - t22 * t267 - t443 * t83, t101 * t267 + t167 * t443 (t114 * t348 - t121 * t344) * t101 + t2 * t267 + t180 * t22 + t11 * t186 - g(1) * (-t262 * t468 + t263 * t327) - g(2) * (-t260 * t468 + t261 * t327) + t484 * t83 + t443 * t8 + t449 * t48 - (t327 * t346 + t329 * t467) * t491 + (t344 * t390 - t348 * t389) * t167 -(t114 * t344 + t121 * t348) * t101 - t1 * t267 + t180 * t21 - t11 * t187 - g(1) * (t262 * t469 + t263 * t329) - g(2) * (t260 * t469 + t261 * t329) - t443 * t9 - t484 * t376 + t450 * t48 - (-t327 * t467 + t329 * t346) * t491 + (t344 * t389 + t348 * t390) * t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t226 * t225, -t225 ^ 2 + t226 ^ 2, t161 - t478, t367 + t477, t241, -g(1) * t203 - g(2) * t372 + g(3) * t258 + t160 * t507 - t211 * t226 + t354, g(1) * t204 + g(2) * t401 + g(3) * t259 + t159 * t507 - t211 * t225 + t366 (-t104 * t338 - t105 * t341) * pkin(3) + (t64 - t67) * t375 + (t68 - t63) * t170, -g(1) * t293 - g(3) * t319 + t63 * t67 - t64 * t68 + (g(2) * t414 - t168 * t226 + t18 * t341 + t19 * t338 + t345 * t360) * pkin(3), -t141 * t67 - t170 * t36 - t31 * t375 + t325 * t79 + t337 * t363 + t340 * t362, -t143 * t67 + t170 * t37 + t32 * t375 + t325 * t80 - t337 * t362 + t340 * t363, -g(1) * t198 - g(2) * t194 - g(3) * t236 + t141 * t37 + t143 * t36 + (-qJD(5) * t141 - t170 * t31 - t321 * t79 + t7) * t340 + (qJD(5) * t143 - t170 * t32 + t321 * t80 - t6) * t337, t17 * t325 - t32 * t37 - t31 * t36 - t61 * t67 - g(1) * (-pkin(3) * t472 - pkin(4) * t197 + qJ(5) * t198 + t293) - g(2) * (pkin(3) * t372 - pkin(4) * t193 + qJ(5) * t194) - g(3) * (-pkin(3) * t417 - pkin(4) * t235 + qJ(5) * t236 + t319) + (-t337 * t6 + t340 * t7) * t321 - t378 * qJD(5), t21 * t270 + t376 * t442, -t21 * t268 - t22 * t270 + t376 * t441 + t442 * t83, t487 - t493, t388 + t488, -t167 * t375 (-t264 * t348 - t265 * t344) * t101 + t282 * t22 + t11 * t268 - t8 * t375 - t58 * t83 + t441 * t48 + (t344 * t369 - t348 * t370) * t167 + t364 * t329 -(-t264 * t344 + t265 * t348) * t101 + t282 * t21 + t11 * t270 + t9 * t375 + t58 * t376 - t442 * t48 + (t344 * t370 + t348 * t369) * t167 - t364 * t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170 ^ 2 - t375 ^ 2, t170 * t64 + t375 * t63 + t111 - t361, t104 * t340 - t141 * t375 - t170 * t480, -t104 * t337 - t143 * t375 - t170 * t479, -t337 * t79 - t340 * t80 - (t141 * t340 - t143 * t337) * t170, -t170 * t378 - t375 * t61 - t361 - t383, 0, 0, 0, 0, 0, t388 - t488, t487 + t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143 * t170 + t79, -t141 * t170 + t80, -t141 ^ 2 - t143 ^ 2, t141 * t32 + t143 * t31 - t362, 0, 0, 0, 0, 0, t22 - t498, t21 - t499; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t376 * t83, t376 ^ 2 - t83 ^ 2, t21 + t499, -t22 - t498, t101, t9 * t167 + t48 * t376 - g(1) * t155 + g(2) * t495 - g(3) * (-t236 * t327 - t329 * t462) + t2, t48 * t83 + g(1) * t156 + g(2) * t494 - g(3) * (-t236 * t329 + t327 * t462) - t382 + (t167 - qJD(6)) * t8;];
tau_reg  = t3;
