% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRPPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 05:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRPPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 05:10:58
% EndTime: 2019-05-07 05:11:11
% DurationCPUTime: 14.02s
% Computational Cost: add. (177307->382), mult. (396509->582), div. (0->0), fcn. (324646->14), ass. (0->323)
t2688 = cos(pkin(6));
t2679 = qJD(1) * t2688 + qJD(2);
t2690 = sin(qJ(3));
t2694 = cos(qJ(3));
t2685 = sin(pkin(6));
t2691 = sin(qJ(2));
t2753 = qJD(1) * t2691;
t2738 = t2685 * t2753;
t2652 = t2679 * t2694 - t2690 * t2738;
t2653 = t2679 * t2690 + t2694 * t2738;
t2684 = sin(pkin(11));
t2687 = cos(pkin(11));
t2632 = -t2687 * t2652 + t2653 * t2684;
t2631 = qJD(6) + t2632;
t2767 = qJD(6) + t2631;
t2695 = cos(qJ(2));
t2739 = qJDD(1) * t2685;
t2678 = t2695 * t2739;
t2707 = qJD(2) * t2738 - t2678;
t2706 = qJDD(3) + t2707;
t2745 = t2652 * t2653;
t2620 = t2706 + t2745;
t2634 = t2684 * t2652 + t2687 * t2653;
t2742 = t2685 * t2695;
t2737 = qJD(1) * t2742;
t2671 = -qJD(3) + t2737;
t2683 = sin(pkin(12));
t2686 = cos(pkin(12));
t2615 = t2634 * t2683 + t2686 * t2671;
t2617 = t2634 * t2686 - t2671 * t2683;
t2689 = sin(qJ(6));
t2693 = cos(qJ(6));
t2579 = t2693 * t2615 + t2617 * t2689;
t2766 = t2579 ^ 2;
t2581 = -t2615 * t2689 + t2617 * t2693;
t2765 = t2581 ^ 2;
t2764 = t2615 ^ 2;
t2763 = t2617 ^ 2;
t2762 = t2631 ^ 2;
t2595 = t2632 ^ 2;
t2761 = t2634 ^ 2;
t2760 = t2652 ^ 2;
t2759 = t2653 ^ 2;
t2655 = t2671 ^ 2;
t2758 = t2679 ^ 2;
t2757 = -2 * qJD(4);
t2756 = -2 * qJD(5);
t2755 = t2688 * g(3);
t2754 = qJD(1) * t2685;
t2752 = t2579 * t2581;
t2751 = t2615 * t2617;
t2750 = t2617 * t2632;
t2749 = t2632 * t2615;
t2748 = t2632 * t2634;
t2747 = t2632 * t2671;
t2746 = t2634 * t2671;
t2744 = t2652 * t2671;
t2697 = qJD(1) ^ 2;
t2743 = t2685 ^ 2 * t2697;
t2741 = -qJD(3) - t2671;
t2740 = qJD(6) - t2631;
t2692 = sin(qJ(1));
t2696 = cos(qJ(1));
t2673 = -g(1) * t2696 - g(2) * t2692;
t2656 = -pkin(1) * t2697 + pkin(8) * t2739 + t2673;
t2659 = (-pkin(2) * t2695 - pkin(9) * t2691) * t2754;
t2672 = t2692 * g(1) - t2696 * g(2);
t2703 = t2697 * t2685 * pkin(8) + qJDD(1) * pkin(1) + t2672;
t2702 = t2688 * t2703;
t2701 = (-t2685 * g(3) + t2702) * t2691;
t2730 = qJDD(1) * t2688 + qJDD(2);
t2699 = t2730 * pkin(9) - t2758 * pkin(2) + (t2659 * t2754 + t2656) * t2695 + t2701;
t2660 = qJD(2) * t2737 + t2691 * t2739;
t2700 = -t2678 * pkin(2) - t2660 * pkin(9) - t2755 + ((-pkin(9) * t2679 * t2695 + (qJD(2) + t2679) * t2691 * pkin(2)) * qJD(1) - t2703) * t2685;
t2563 = t2690 * t2700 + t2694 * t2699;
t2731 = t2690 * t2660 - t2694 * t2730;
t2624 = -qJD(3) * t2653 - t2731;
t2638 = -pkin(3) * t2671 - qJ(4) * t2653;
t2545 = -pkin(3) * t2760 + qJ(4) * t2624 + t2638 * t2671 + t2563;
t2562 = -t2690 * t2699 + t2694 * t2700;
t2704 = -t2694 * t2660 - t2690 * t2730;
t2625 = t2652 * qJD(3) - t2704;
t2698 = t2562 + (-t2625 - t2744) * qJ(4) + t2620 * pkin(3);
t2501 = t2687 * t2545 + t2632 * t2757 + t2684 * t2698;
t2594 = pkin(4) * t2632 - qJ(5) * t2634;
t2490 = -pkin(4) * t2655 + qJ(5) * t2706 - t2632 * t2594 + t2501;
t2732 = t2691 * t2656 - t2695 * t2702;
t2600 = -t2730 * pkin(2) - t2758 * pkin(9) + (g(3) * t2695 + t2659 * t2753) * t2685 + t2732;
t2556 = -t2624 * pkin(3) - t2760 * qJ(4) + t2653 * t2638 + qJDD(4) + t2600;
t2588 = -t2687 * t2624 + t2625 * t2684;
t2568 = t2588 - t2746;
t2589 = t2624 * t2684 + t2625 * t2687;
t2734 = -t2589 - t2747;
t2515 = pkin(4) * t2568 + qJ(5) * t2734 + t2556;
t2468 = t2686 * t2490 + t2683 * t2515 + t2615 * t2756;
t2736 = t2684 * t2545 - t2687 * t2698;
t2578 = t2686 * t2589 + t2683 * t2706;
t2733 = t2589 * t2683 - t2686 * t2706;
t2735 = -t2689 * t2578 - t2693 * t2733;
t2549 = -t2578 - t2749;
t2550 = t2588 - t2751;
t2729 = t2679 * t2737;
t2467 = -t2683 * t2490 + t2686 * t2515 + t2617 * t2756;
t2728 = -qJDD(6) - t2588;
t2458 = pkin(5) * t2550 + pkin(10) * t2549 + t2467;
t2584 = pkin(5) * t2632 - pkin(10) * t2617;
t2460 = -pkin(5) * t2764 - pkin(10) * t2733 - t2632 * t2584 + t2468;
t2437 = t2458 * t2693 - t2460 * t2689;
t2438 = t2458 * t2689 + t2460 * t2693;
t2425 = t2437 * t2693 + t2438 * t2689;
t2426 = -t2437 * t2689 + t2438 * t2693;
t2414 = -t2425 * t2683 + t2426 * t2686;
t2489 = qJDD(5) - t2706 * pkin(4) - t2655 * qJ(5) + ((2 * qJD(4)) + t2594) * t2634 + t2736;
t2479 = pkin(5) * t2733 - pkin(10) * t2764 + t2617 * t2584 + t2489;
t2411 = t2414 * t2684 - t2479 * t2687;
t2412 = t2414 * t2687 + t2479 * t2684;
t2408 = -t2411 * t2690 + t2412 * t2694;
t2413 = t2425 * t2686 + t2426 * t2683;
t2727 = t2408 * t2691 - t2413 * t2695;
t2449 = -t2467 * t2683 + t2468 * t2686;
t2435 = t2449 * t2684 - t2489 * t2687;
t2436 = t2449 * t2687 + t2489 * t2684;
t2424 = -t2435 * t2690 + t2436 * t2694;
t2448 = t2467 * t2686 + t2468 * t2683;
t2726 = t2424 * t2691 - t2448 * t2695;
t2510 = -t2581 * t2740 + t2735;
t2705 = -t2693 * t2578 + t2689 * t2733;
t2512 = t2579 * t2740 + t2705;
t2482 = t2510 * t2689 + t2512 * t2693;
t2483 = t2510 * t2693 - t2512 * t2689;
t2455 = -t2482 * t2683 + t2483 * t2686;
t2528 = -t2765 - t2766;
t2450 = t2455 * t2684 - t2528 * t2687;
t2451 = t2455 * t2687 + t2528 * t2684;
t2430 = -t2450 * t2690 + t2451 * t2694;
t2454 = t2482 * t2686 + t2483 * t2683;
t2725 = t2430 * t2691 - t2454 * t2695;
t2531 = -t2728 - t2752;
t2541 = -t2762 - t2766;
t2494 = t2531 * t2693 + t2541 * t2689;
t2495 = -t2531 * t2689 + t2541 * t2693;
t2470 = -t2494 * t2683 + t2495 * t2686;
t2509 = t2581 * t2767 - t2735;
t2456 = t2470 * t2684 - t2509 * t2687;
t2457 = t2470 * t2687 + t2509 * t2684;
t2434 = -t2456 * t2690 + t2457 * t2694;
t2469 = t2494 * t2686 + t2495 * t2683;
t2724 = t2434 * t2691 - t2469 * t2695;
t2532 = t2728 - t2752;
t2553 = -t2762 - t2765;
t2507 = t2532 * t2689 + t2553 * t2693;
t2508 = t2532 * t2693 - t2553 * t2689;
t2481 = -t2507 * t2683 + t2508 * t2686;
t2511 = -t2579 * t2767 - t2705;
t2461 = t2481 * t2684 - t2511 * t2687;
t2462 = t2481 * t2687 + t2511 * t2684;
t2440 = -t2461 * t2690 + t2462 * t2694;
t2480 = t2507 * t2686 + t2508 * t2683;
t2723 = t2440 * t2691 - t2480 * t2695;
t2500 = t2634 * t2757 - t2736;
t2473 = t2500 * t2687 + t2501 * t2684;
t2474 = -t2500 * t2684 + t2501 * t2687;
t2453 = -t2473 * t2690 + t2474 * t2694;
t2722 = t2453 * t2691 - t2556 * t2695;
t2547 = -t2733 + t2750;
t2518 = t2547 * t2686 - t2549 * t2683;
t2559 = -t2763 - t2764;
t2496 = t2518 * t2684 - t2559 * t2687;
t2497 = t2518 * t2687 + t2559 * t2684;
t2472 = -t2496 * t2690 + t2497 * t2694;
t2517 = t2547 * t2683 + t2549 * t2686;
t2721 = t2472 * t2691 - t2517 * t2695;
t2565 = -t2595 - t2764;
t2523 = -t2550 * t2683 + t2565 * t2686;
t2546 = t2733 + t2750;
t2502 = t2523 * t2684 - t2546 * t2687;
t2503 = t2523 * t2687 + t2546 * t2684;
t2476 = -t2502 * t2690 + t2503 * t2694;
t2522 = t2550 * t2686 + t2565 * t2683;
t2720 = t2476 * t2691 - t2522 * t2695;
t2551 = -t2588 - t2751;
t2572 = -t2595 - t2763;
t2527 = t2551 * t2686 - t2572 * t2683;
t2548 = t2578 - t2749;
t2504 = t2527 * t2684 - t2548 * t2687;
t2505 = t2527 * t2687 + t2548 * t2684;
t2478 = -t2504 * t2690 + t2505 * t2694;
t2526 = t2551 * t2683 + t2572 * t2686;
t2719 = t2478 * t2691 - t2526 * t2695;
t2569 = -t2588 - t2746;
t2571 = -t2589 + t2747;
t2535 = t2569 * t2684 + t2571 * t2687;
t2536 = t2569 * t2687 - t2571 * t2684;
t2499 = -t2535 * t2690 + t2536 * t2694;
t2573 = -t2761 - t2595;
t2718 = t2499 * t2691 - t2573 * t2695;
t2586 = t2706 - t2748;
t2591 = -t2595 - t2655;
t2554 = t2586 * t2687 + t2591 * t2684;
t2555 = -t2586 * t2684 + t2591 * t2687;
t2521 = -t2554 * t2690 + t2555 * t2694;
t2717 = t2521 * t2691 - t2568 * t2695;
t2585 = -t2706 - t2748;
t2609 = -t2655 - t2761;
t2560 = t2585 * t2684 + t2609 * t2687;
t2561 = t2585 * t2687 - t2609 * t2684;
t2530 = -t2560 * t2690 + t2561 * t2694;
t2716 = t2530 * t2691 + t2695 * t2734;
t2534 = -t2562 * t2690 + t2563 * t2694;
t2715 = t2534 * t2691 - t2600 * t2695;
t2604 = t2653 * t2741 - t2731;
t2606 = t2652 * t2741 + t2704;
t2567 = t2604 * t2694 - t2606 * t2690;
t2618 = -t2759 - t2760;
t2714 = t2567 * t2691 - t2618 * t2695;
t2626 = -t2655 - t2760;
t2583 = -t2620 * t2690 + t2626 * t2694;
t2603 = (qJD(3) - t2671) * t2653 + t2731;
t2713 = t2583 * t2691 - t2603 * t2695;
t2619 = -t2706 + t2745;
t2636 = -t2655 - t2759;
t2593 = t2619 * t2694 - t2636 * t2690;
t2605 = t2625 - t2744;
t2712 = t2593 * t2691 - t2605 * t2695;
t2627 = -g(3) * t2742 - t2732;
t2628 = t2695 * t2656 + t2701;
t2711 = t2627 * t2695 + t2628 * t2691;
t2640 = t2729 - t2660;
t2663 = t2679 * t2738;
t2641 = t2663 - t2707;
t2710 = t2640 * t2695 + t2641 * t2691;
t2681 = t2691 ^ 2;
t2649 = -t2681 * t2743 - t2758;
t2670 = t2695 * t2691 * t2743;
t2658 = t2670 - t2730;
t2709 = t2649 * t2695 + t2658 * t2691;
t2657 = t2670 + t2730;
t2682 = t2695 ^ 2;
t2661 = -t2682 * t2743 - t2758;
t2708 = t2657 * t2695 + t2661 * t2691;
t2668 = -qJDD(1) * t2692 - t2696 * t2697;
t2667 = qJDD(1) * t2696 - t2692 * t2697;
t2662 = (-t2681 - t2682) * t2743;
t2644 = -t2685 * t2703 - t2755;
t2642 = t2663 + t2707;
t2639 = t2729 + t2660;
t2637 = -t2657 * t2691 + t2661 * t2695;
t2635 = -t2649 * t2691 + t2658 * t2695;
t2610 = -t2640 * t2691 + t2641 * t2695;
t2608 = -t2685 * t2642 + t2688 * t2708;
t2607 = t2688 * t2642 + t2685 * t2708;
t2602 = -t2685 * t2639 + t2688 * t2709;
t2601 = t2688 * t2639 + t2685 * t2709;
t2599 = -t2685 * t2662 + t2688 * t2710;
t2598 = t2688 * t2662 + t2685 * t2710;
t2592 = t2619 * t2690 + t2636 * t2694;
t2590 = -t2627 * t2691 + t2628 * t2695;
t2582 = t2620 * t2694 + t2626 * t2690;
t2575 = -t2685 * t2644 + t2688 * t2711;
t2574 = t2688 * t2644 + t2685 * t2711;
t2566 = t2604 * t2690 + t2606 * t2694;
t2558 = t2593 * t2695 + t2605 * t2691;
t2557 = t2583 * t2695 + t2603 * t2691;
t2552 = t2567 * t2695 + t2618 * t2691;
t2544 = -t2685 * t2592 + t2688 * t2712;
t2543 = t2688 * t2592 + t2685 * t2712;
t2540 = -t2685 * t2582 + t2688 * t2713;
t2539 = t2688 * t2582 + t2685 * t2713;
t2533 = t2562 * t2694 + t2563 * t2690;
t2529 = t2560 * t2694 + t2561 * t2690;
t2525 = -t2685 * t2566 + t2688 * t2714;
t2524 = t2688 * t2566 + t2685 * t2714;
t2520 = t2554 * t2694 + t2555 * t2690;
t2519 = t2534 * t2695 + t2600 * t2691;
t2516 = t2530 * t2695 - t2691 * t2734;
t2506 = t2521 * t2695 + t2568 * t2691;
t2498 = t2535 * t2694 + t2536 * t2690;
t2493 = t2499 * t2695 + t2573 * t2691;
t2492 = -t2685 * t2533 + t2688 * t2715;
t2491 = t2688 * t2533 + t2685 * t2715;
t2487 = -t2685 * t2529 + t2688 * t2716;
t2486 = t2688 * t2529 + t2685 * t2716;
t2485 = -t2685 * t2520 + t2688 * t2717;
t2484 = t2688 * t2520 + t2685 * t2717;
t2477 = t2504 * t2694 + t2505 * t2690;
t2475 = t2502 * t2694 + t2503 * t2690;
t2471 = t2496 * t2694 + t2497 * t2690;
t2466 = -t2685 * t2498 + t2688 * t2718;
t2465 = t2688 * t2498 + t2685 * t2718;
t2464 = t2478 * t2695 + t2526 * t2691;
t2463 = t2476 * t2695 + t2522 * t2691;
t2459 = t2472 * t2695 + t2517 * t2691;
t2452 = t2473 * t2694 + t2474 * t2690;
t2447 = t2453 * t2695 + t2556 * t2691;
t2446 = -t2685 * t2477 + t2688 * t2719;
t2445 = t2688 * t2477 + t2685 * t2719;
t2444 = -t2685 * t2475 + t2688 * t2720;
t2443 = t2688 * t2475 + t2685 * t2720;
t2442 = -t2685 * t2471 + t2688 * t2721;
t2441 = t2688 * t2471 + t2685 * t2721;
t2439 = t2461 * t2694 + t2462 * t2690;
t2433 = t2456 * t2694 + t2457 * t2690;
t2432 = t2440 * t2695 + t2480 * t2691;
t2431 = t2434 * t2695 + t2469 * t2691;
t2429 = t2450 * t2694 + t2451 * t2690;
t2428 = -t2685 * t2452 + t2688 * t2722;
t2427 = t2688 * t2452 + t2685 * t2722;
t2423 = t2435 * t2694 + t2436 * t2690;
t2422 = t2430 * t2695 + t2454 * t2691;
t2421 = -t2685 * t2439 + t2688 * t2723;
t2420 = t2688 * t2439 + t2685 * t2723;
t2419 = -t2685 * t2433 + t2688 * t2724;
t2418 = t2688 * t2433 + t2685 * t2724;
t2417 = t2424 * t2695 + t2448 * t2691;
t2416 = -t2685 * t2429 + t2688 * t2725;
t2415 = t2688 * t2429 + t2685 * t2725;
t2410 = -t2685 * t2423 + t2688 * t2726;
t2409 = t2688 * t2423 + t2685 * t2726;
t2407 = t2411 * t2694 + t2412 * t2690;
t2406 = t2408 * t2695 + t2413 * t2691;
t2405 = -t2685 * t2407 + t2688 * t2727;
t2404 = t2688 * t2407 + t2685 * t2727;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2668, -t2667, 0, -t2672 * t2692 + t2673 * t2696, 0, 0, 0, 0, 0, 0, -t2608 * t2692 + t2637 * t2696, -t2602 * t2692 + t2635 * t2696, -t2599 * t2692 + t2610 * t2696, -t2575 * t2692 + t2590 * t2696, 0, 0, 0, 0, 0, 0, -t2540 * t2692 + t2557 * t2696, -t2544 * t2692 + t2558 * t2696, -t2525 * t2692 + t2552 * t2696, -t2492 * t2692 + t2519 * t2696, 0, 0, 0, 0, 0, 0, -t2485 * t2692 + t2506 * t2696, -t2487 * t2692 + t2516 * t2696, -t2466 * t2692 + t2493 * t2696, -t2428 * t2692 + t2447 * t2696, 0, 0, 0, 0, 0, 0, -t2444 * t2692 + t2463 * t2696, -t2446 * t2692 + t2464 * t2696, -t2442 * t2692 + t2459 * t2696, -t2410 * t2692 + t2417 * t2696, 0, 0, 0, 0, 0, 0, -t2419 * t2692 + t2431 * t2696, -t2421 * t2692 + t2432 * t2696, -t2416 * t2692 + t2422 * t2696, -t2405 * t2692 + t2406 * t2696; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2667, t2668, 0, t2672 * t2696 + t2673 * t2692, 0, 0, 0, 0, 0, 0, t2608 * t2696 + t2637 * t2692, t2602 * t2696 + t2635 * t2692, t2599 * t2696 + t2610 * t2692, t2575 * t2696 + t2590 * t2692, 0, 0, 0, 0, 0, 0, t2540 * t2696 + t2557 * t2692, t2544 * t2696 + t2558 * t2692, t2525 * t2696 + t2552 * t2692, t2492 * t2696 + t2519 * t2692, 0, 0, 0, 0, 0, 0, t2485 * t2696 + t2506 * t2692, t2487 * t2696 + t2516 * t2692, t2466 * t2696 + t2493 * t2692, t2428 * t2696 + t2447 * t2692, 0, 0, 0, 0, 0, 0, t2444 * t2696 + t2463 * t2692, t2446 * t2696 + t2464 * t2692, t2442 * t2696 + t2459 * t2692, t2410 * t2696 + t2417 * t2692, 0, 0, 0, 0, 0, 0, t2419 * t2696 + t2431 * t2692, t2421 * t2696 + t2432 * t2692, t2416 * t2696 + t2422 * t2692, t2405 * t2696 + t2406 * t2692; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2607, t2601, t2598, t2574, 0, 0, 0, 0, 0, 0, t2539, t2543, t2524, t2491, 0, 0, 0, 0, 0, 0, t2484, t2486, t2465, t2427, 0, 0, 0, 0, 0, 0, t2443, t2445, t2441, t2409, 0, 0, 0, 0, 0, 0, t2418, t2420, t2415, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2697, -qJDD(1), 0, t2673, 0, 0, 0, 0, 0, 0, t2637, t2635, t2610, t2590, 0, 0, 0, 0, 0, 0, t2557, t2558, t2552, t2519, 0, 0, 0, 0, 0, 0, t2506, t2516, t2493, t2447, 0, 0, 0, 0, 0, 0, t2463, t2464, t2459, t2417, 0, 0, 0, 0, 0, 0, t2431, t2432, t2422, t2406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2697, 0, t2672, 0, 0, 0, 0, 0, 0, t2608, t2602, t2599, t2575, 0, 0, 0, 0, 0, 0, t2540, t2544, t2525, t2492, 0, 0, 0, 0, 0, 0, t2485, t2487, t2466, t2428, 0, 0, 0, 0, 0, 0, t2444, t2446, t2442, t2410, 0, 0, 0, 0, 0, 0, t2419, t2421, t2416, t2405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2607, t2601, t2598, t2574, 0, 0, 0, 0, 0, 0, t2539, t2543, t2524, t2491, 0, 0, 0, 0, 0, 0, t2484, t2486, t2465, t2427, 0, 0, 0, 0, 0, 0, t2443, t2445, t2441, t2409, 0, 0, 0, 0, 0, 0, t2418, t2420, t2415, t2404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2661, t2658, t2641, t2628, 0, 0, 0, 0, 0, 0, t2583, t2593, t2567, t2534, 0, 0, 0, 0, 0, 0, t2521, t2530, t2499, t2453, 0, 0, 0, 0, 0, 0, t2476, t2478, t2472, t2424, 0, 0, 0, 0, 0, 0, t2434, t2440, t2430, t2408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2657, t2649, t2640, t2627, 0, 0, 0, 0, 0, 0, -t2603, -t2605, -t2618, -t2600, 0, 0, 0, 0, 0, 0, -t2568, t2734, -t2573, -t2556, 0, 0, 0, 0, 0, 0, -t2522, -t2526, -t2517, -t2448, 0, 0, 0, 0, 0, 0, -t2469, -t2480, -t2454, -t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2642, t2639, t2662, t2644, 0, 0, 0, 0, 0, 0, t2582, t2592, t2566, t2533, 0, 0, 0, 0, 0, 0, t2520, t2529, t2498, t2452, 0, 0, 0, 0, 0, 0, t2475, t2477, t2471, t2423, 0, 0, 0, 0, 0, 0, t2433, t2439, t2429, t2407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2626, t2619, t2604, t2563, 0, 0, 0, 0, 0, 0, t2555, t2561, t2536, t2474, 0, 0, 0, 0, 0, 0, t2503, t2505, t2497, t2436, 0, 0, 0, 0, 0, 0, t2457, t2462, t2451, t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2620, t2636, t2606, t2562, 0, 0, 0, 0, 0, 0, t2554, t2560, t2535, t2473, 0, 0, 0, 0, 0, 0, t2502, t2504, t2496, t2435, 0, 0, 0, 0, 0, 0, t2456, t2461, t2450, t2411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2603, t2605, t2618, t2600, 0, 0, 0, 0, 0, 0, t2568, -t2734, t2573, t2556, 0, 0, 0, 0, 0, 0, t2522, t2526, t2517, t2448, 0, 0, 0, 0, 0, 0, t2469, t2480, t2454, t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2591, t2585, t2569, t2501, 0, 0, 0, 0, 0, 0, t2523, t2527, t2518, t2449, 0, 0, 0, 0, 0, 0, t2470, t2481, t2455, t2414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2586, t2609, t2571, t2500, 0, 0, 0, 0, 0, 0, -t2546, -t2548, -t2559, -t2489, 0, 0, 0, 0, 0, 0, -t2509, -t2511, -t2528, -t2479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2568, -t2734, t2573, t2556, 0, 0, 0, 0, 0, 0, t2522, t2526, t2517, t2448, 0, 0, 0, 0, 0, 0, t2469, t2480, t2454, t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2565, t2551, t2547, t2468, 0, 0, 0, 0, 0, 0, t2495, t2508, t2483, t2426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2550, t2572, t2549, t2467, 0, 0, 0, 0, 0, 0, t2494, t2507, t2482, t2425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2546, t2548, t2559, t2489, 0, 0, 0, 0, 0, 0, t2509, t2511, t2528, t2479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2541, t2532, t2510, t2438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2531, t2553, t2512, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2509, t2511, t2528, t2479;];
f_new_reg  = t1;
