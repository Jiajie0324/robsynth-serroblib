% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 14:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:30:04
% EndTime: 2019-05-06 14:30:14
% DurationCPUTime: 10.93s
% Computational Cost: add. (54689->363), mult. (145146->513), div. (0->0), fcn. (115233->12), ass. (0->298)
t2759 = sin(qJ(2));
t2763 = cos(qJ(2));
t2754 = sin(pkin(6));
t2829 = qJD(1) * t2754;
t2811 = t2763 * t2829;
t2813 = qJDD(1) * t2754;
t2727 = qJD(2) * t2811 + t2759 * t2813;
t2819 = t2754 * t2759;
t2812 = qJD(1) * t2819;
t2728 = -qJD(2) * t2812 + t2763 * t2813;
t2753 = sin(pkin(11));
t2755 = cos(pkin(11));
t2801 = t2727 * t2753 - t2755 * t2728;
t2689 = qJDD(4) + t2801;
t2718 = (t2753 * t2763 + t2755 * t2759) * t2829;
t2756 = cos(pkin(6));
t2747 = qJD(1) * t2756 + qJD(2);
t2758 = sin(qJ(4));
t2762 = cos(qJ(4));
t2697 = t2718 * t2758 - t2762 * t2747;
t2699 = t2718 * t2762 + t2747 * t2758;
t2824 = t2699 * t2697;
t2637 = t2689 + t2824;
t2716 = t2753 * t2812 - t2755 * t2811;
t2714 = qJD(4) + t2716;
t2713 = t2714 ^ 2;
t2834 = t2699 ^ 2;
t2807 = -t2713 - t2834;
t2619 = t2637 * t2762 + t2758 * t2807;
t2852 = t2619 * t2753;
t2851 = t2619 * t2755;
t2617 = t2637 * t2758 - t2762 * t2807;
t2850 = t2754 * t2617;
t2849 = t2756 * t2617;
t2696 = t2697 ^ 2;
t2654 = -t2713 - t2696;
t2803 = -t2689 + t2824;
t2615 = t2654 * t2762 + t2758 * t2803;
t2848 = t2615 * t2753;
t2847 = t2615 * t2755;
t2614 = -t2654 * t2758 + t2762 * t2803;
t2846 = t2754 * t2614;
t2845 = t2756 * t2614;
t2838 = -t2696 - t2834;
t2844 = t2753 * t2838;
t2843 = t2755 * t2838;
t2690 = t2755 * t2727 + t2753 * t2728;
t2746 = t2756 * qJDD(1) + qJDD(2);
t2780 = t2762 * t2690 + t2758 * t2746;
t2775 = -qJD(4) * t2697 + t2780;
t2629 = -t2697 * t2714 + t2775;
t2817 = qJD(4) - t2714;
t2772 = t2697 * t2817 - t2780;
t2842 = t2758 * t2772;
t2840 = t2762 * t2772;
t2822 = t2716 * t2747;
t2670 = t2690 - t2822;
t2757 = sin(qJ(6));
t2761 = cos(qJ(6));
t2674 = -t2761 * t2697 + t2714 * t2757;
t2837 = t2674 ^ 2;
t2676 = t2697 * t2757 + t2714 * t2761;
t2836 = t2676 ^ 2;
t2695 = qJD(6) + t2699;
t2835 = t2695 ^ 2;
t2833 = t2716 ^ 2;
t2832 = t2718 ^ 2;
t2731 = t2747 ^ 2;
t2831 = -2 * qJD(3);
t2830 = 2 * qJD(5);
t2826 = t2674 * t2676;
t2823 = t2716 * t2718;
t2821 = t2718 * t2747;
t2765 = qJD(1) ^ 2;
t2820 = t2754 ^ 2 * t2765;
t2760 = sin(qJ(1));
t2764 = cos(qJ(1));
t2739 = t2760 * g(1) - g(2) * t2764;
t2724 = pkin(8) * t2754 * t2765 + qJDD(1) * pkin(1) + t2739;
t2818 = t2756 * t2724;
t2816 = qJD(4) + t2714;
t2815 = qJD(6) - t2695;
t2814 = qJD(6) + t2695;
t2752 = t2763 ^ 2;
t2810 = t2752 * t2820;
t2809 = t2759 * t2820;
t2740 = -g(1) * t2764 - g(2) * t2760;
t2771 = -pkin(1) * t2765 + pkin(8) * t2813 + t2740;
t2682 = -g(3) * t2819 + t2759 * t2818 + t2763 * t2771;
t2723 = pkin(2) * t2747 - qJ(3) * t2812;
t2649 = -pkin(2) * t2810 + qJ(3) * t2728 - t2723 * t2747 + t2682;
t2769 = t2759 * t2771;
t2766 = -t2769 - t2727 * qJ(3) + t2746 * pkin(2) + (pkin(2) * t2809 + t2818 + (qJ(3) * qJD(1) * t2747 - g(3)) * t2754) * t2763;
t2607 = t2755 * t2649 + t2716 * t2831 + t2753 * t2766;
t2808 = -t2835 - t2836;
t2806 = pkin(4) * t2714 - (2 * qJD(5));
t2687 = pkin(3) * t2716 - pkin(9) * t2718;
t2592 = -pkin(3) * t2731 + pkin(9) * t2746 - t2687 * t2716 + t2607;
t2705 = -t2756 * g(3) - t2754 * t2724;
t2665 = -t2728 * pkin(2) - qJ(3) * t2810 + t2723 * t2812 + qJDD(3) + t2705;
t2668 = t2801 + t2821;
t2611 = t2668 * pkin(3) - pkin(9) * t2670 + t2665;
t2569 = -t2758 * t2592 + t2762 * t2611;
t2805 = t2753 * t2649 - t2755 * t2766;
t2802 = t2758 * t2690 - t2762 * t2746;
t2658 = qJD(4) * t2699 + t2802;
t2804 = t2761 * t2658 - t2757 * t2689;
t2800 = t2747 * t2811;
t2666 = pkin(4) * t2697 - qJ(5) * t2699;
t2559 = -t2689 * pkin(4) - t2713 * qJ(5) + t2699 * t2666 + qJDD(5) - t2569;
t2540 = -pkin(5) * t2772 + t2803 * pkin(10) + t2559;
t2677 = pkin(5) * t2699 - pkin(10) * t2714;
t2591 = -t2746 * pkin(3) - t2731 * pkin(9) + ((2 * qJD(3)) + t2687) * t2718 + t2805;
t2767 = t2658 * pkin(4) - qJ(5) * t2629 + t2591;
t2551 = -t2696 * pkin(5) + t2658 * pkin(10) + (-t2677 + t2806) * t2699 + t2767;
t2521 = t2540 * t2757 + t2551 * t2761;
t2793 = t2540 * t2761 - t2551 * t2757;
t2506 = t2757 * t2521 + t2761 * t2793;
t2570 = t2762 * t2592 + t2758 * t2611;
t2770 = -t2713 * pkin(4) + t2689 * qJ(5) - t2697 * t2666 + t2570;
t2546 = -t2658 * pkin(5) - t2696 * pkin(10) + (t2830 + t2677) * t2714 + t2770;
t2502 = t2506 * t2758 + t2546 * t2762;
t2507 = t2521 * t2761 - t2757 * t2793;
t2497 = t2502 * t2753 - t2507 * t2755;
t2498 = t2502 * t2755 + t2507 * t2753;
t2799 = t2497 * t2763 + t2498 * t2759;
t2556 = t2714 * t2830 + t2770;
t2523 = t2556 * t2762 + t2559 * t2758;
t2566 = t2699 * t2806 + t2767;
t2517 = t2523 * t2753 - t2566 * t2755;
t2518 = t2523 * t2755 + t2566 * t2753;
t2798 = t2517 * t2763 + t2518 * t2759;
t2595 = -t2676 * t2815 + t2804;
t2782 = -t2757 * t2658 - t2761 * t2689;
t2773 = t2674 * t2815 + t2782;
t2567 = t2757 * t2595 + t2761 * t2773;
t2622 = -t2836 - t2837;
t2555 = t2567 * t2758 + t2622 * t2762;
t2568 = t2595 * t2761 - t2757 * t2773;
t2524 = t2555 * t2753 - t2568 * t2755;
t2525 = t2555 * t2755 + t2568 * t2753;
t2797 = t2524 * t2763 + t2525 * t2759;
t2535 = -t2569 * t2758 + t2570 * t2762;
t2526 = t2535 * t2753 - t2591 * t2755;
t2527 = t2535 * t2755 + t2591 * t2753;
t2796 = t2526 * t2763 + t2527 * t2759;
t2623 = -t2835 - t2837;
t2774 = qJDD(6) + t2775;
t2768 = t2774 - t2826;
t2577 = t2757 * t2623 + t2761 * t2768;
t2594 = t2676 * t2814 - t2804;
t2563 = t2577 * t2758 + t2594 * t2762;
t2578 = t2623 * t2761 - t2757 * t2768;
t2532 = t2563 * t2753 - t2578 * t2755;
t2533 = t2563 * t2755 + t2578 * t2753;
t2795 = t2532 * t2763 + t2533 * t2759;
t2612 = -t2774 - t2826;
t2585 = t2757 * t2612 + t2761 * t2808;
t2596 = -t2674 * t2814 - t2782;
t2565 = t2585 * t2758 + t2596 * t2762;
t2586 = t2612 * t2761 - t2757 * t2808;
t2538 = t2565 * t2753 - t2586 * t2755;
t2539 = t2565 * t2755 + t2586 * t2753;
t2794 = t2538 * t2763 + t2539 * t2759;
t2606 = t2718 * t2831 - t2805;
t2571 = t2606 * t2755 + t2607 * t2753;
t2572 = -t2606 * t2753 + t2607 * t2755;
t2792 = t2571 * t2763 + t2572 * t2759;
t2626 = -t2699 * t2817 - t2802;
t2599 = t2626 * t2762 - t2842;
t2573 = t2599 * t2753 - t2843;
t2575 = t2599 * t2755 + t2844;
t2791 = t2573 * t2763 + t2575 * t2759;
t2679 = t2714 * t2699;
t2627 = -t2658 + t2679;
t2600 = t2627 * t2762 - t2842;
t2574 = t2600 * t2753 - t2843;
t2576 = t2600 * t2755 + t2844;
t2790 = t2574 * t2763 + t2576 * t2759;
t2624 = t2699 * t2816 + t2802;
t2581 = -t2624 * t2755 + t2848;
t2583 = t2624 * t2753 + t2847;
t2789 = t2581 * t2763 + t2583 * t2759;
t2625 = t2658 + t2679;
t2582 = t2625 * t2755 - t2848;
t2584 = -t2625 * t2753 - t2847;
t2788 = t2582 * t2763 + t2584 * t2759;
t2628 = -t2697 * t2816 + t2780;
t2587 = t2628 * t2755 + t2852;
t2589 = -t2628 * t2753 + t2851;
t2787 = t2587 * t2763 + t2589 * t2759;
t2588 = -t2629 * t2755 - t2852;
t2590 = t2629 * t2753 - t2851;
t2786 = t2588 * t2763 + t2590 * t2759;
t2669 = -t2801 + t2821;
t2671 = -t2690 - t2822;
t2632 = t2669 * t2753 + t2671 * t2755;
t2633 = t2669 * t2755 - t2671 * t2753;
t2785 = t2632 * t2763 + t2633 * t2759;
t2683 = -t2731 - t2833;
t2684 = t2746 - t2823;
t2642 = t2683 * t2753 + t2684 * t2755;
t2643 = t2683 * t2755 - t2684 * t2753;
t2784 = t2642 * t2763 + t2643 * t2759;
t2685 = -t2746 - t2823;
t2694 = -t2731 - t2832;
t2651 = t2685 * t2753 + t2694 * t2755;
t2652 = t2685 * t2755 - t2694 * t2753;
t2783 = t2651 * t2763 + t2652 * t2759;
t2681 = -t2769 + (-g(3) * t2754 + t2818) * t2763;
t2781 = t2681 * t2763 + t2682 * t2759;
t2702 = t2800 - t2727;
t2732 = t2747 * t2812;
t2703 = t2728 + t2732;
t2779 = t2702 * t2763 + t2703 * t2759;
t2751 = t2759 ^ 2;
t2715 = -t2751 * t2820 - t2731;
t2738 = t2763 * t2809;
t2726 = t2738 - t2746;
t2778 = t2715 * t2763 + t2726 * t2759;
t2725 = t2738 + t2746;
t2729 = -t2810 - t2731;
t2777 = t2725 * t2763 + t2729 * t2759;
t2737 = -qJDD(1) * t2760 - t2764 * t2765;
t2736 = qJDD(1) * t2764 - t2760 * t2765;
t2730 = (-t2751 - t2752) * t2820;
t2704 = -t2728 + t2732;
t2701 = t2800 + t2727;
t2691 = -t2725 * t2759 + t2729 * t2763;
t2686 = -t2715 * t2759 + t2726 * t2763;
t2673 = -t2832 - t2833;
t2672 = -t2702 * t2759 + t2703 * t2763;
t2664 = -t2754 * t2704 + t2756 * t2777;
t2663 = t2756 * t2704 + t2754 * t2777;
t2660 = -t2754 * t2701 + t2756 * t2778;
t2659 = t2756 * t2701 + t2754 * t2778;
t2657 = -t2754 * t2730 + t2756 * t2779;
t2656 = t2756 * t2730 + t2754 * t2779;
t2641 = -t2681 * t2759 + t2682 * t2763;
t2635 = -t2754 * t2705 + t2756 * t2781;
t2634 = t2756 * t2705 + t2754 * t2781;
t2621 = -t2651 * t2759 + t2652 * t2763;
t2610 = -t2642 * t2759 + t2643 * t2763;
t2605 = -t2754 * t2670 + t2756 * t2783;
t2604 = t2756 * t2670 + t2754 * t2783;
t2603 = -t2632 * t2759 + t2633 * t2763;
t2602 = -t2754 * t2668 + t2756 * t2784;
t2601 = t2756 * t2668 + t2754 * t2784;
t2598 = t2627 * t2758 + t2840;
t2597 = t2626 * t2758 + t2840;
t2580 = -t2754 * t2673 + t2756 * t2785;
t2579 = t2756 * t2673 + t2754 * t2785;
t2564 = -t2585 * t2762 + t2596 * t2758;
t2562 = -t2577 * t2762 + t2594 * t2758;
t2561 = -t2588 * t2759 + t2590 * t2763;
t2560 = -t2587 * t2759 + t2589 * t2763;
t2558 = -t2582 * t2759 + t2584 * t2763;
t2557 = -t2581 * t2759 + t2583 * t2763;
t2554 = -t2567 * t2762 + t2622 * t2758;
t2553 = -t2574 * t2759 + t2576 * t2763;
t2552 = -t2573 * t2759 + t2575 * t2763;
t2550 = t2756 * t2786 + t2850;
t2549 = t2756 * t2787 - t2850;
t2548 = t2754 * t2786 - t2849;
t2547 = t2754 * t2787 + t2849;
t2545 = t2756 * t2788 - t2846;
t2544 = t2756 * t2789 + t2846;
t2543 = t2754 * t2788 + t2845;
t2542 = t2754 * t2789 - t2845;
t2541 = -t2571 * t2759 + t2572 * t2763;
t2537 = -t2754 * t2665 + t2756 * t2792;
t2536 = t2756 * t2665 + t2754 * t2792;
t2534 = t2569 * t2762 + t2570 * t2758;
t2531 = -t2754 * t2598 + t2756 * t2790;
t2530 = -t2754 * t2597 + t2756 * t2791;
t2529 = t2756 * t2598 + t2754 * t2790;
t2528 = t2756 * t2597 + t2754 * t2791;
t2522 = t2556 * t2758 - t2559 * t2762;
t2519 = -t2538 * t2759 + t2539 * t2763;
t2516 = -t2532 * t2759 + t2533 * t2763;
t2515 = -t2754 * t2564 + t2756 * t2794;
t2514 = t2756 * t2564 + t2754 * t2794;
t2513 = -t2526 * t2759 + t2527 * t2763;
t2512 = -t2524 * t2759 + t2525 * t2763;
t2511 = -t2754 * t2562 + t2756 * t2795;
t2510 = t2756 * t2562 + t2754 * t2795;
t2509 = -t2754 * t2554 + t2756 * t2797;
t2508 = t2756 * t2554 + t2754 * t2797;
t2505 = -t2754 * t2534 + t2756 * t2796;
t2504 = t2756 * t2534 + t2754 * t2796;
t2503 = -t2517 * t2759 + t2518 * t2763;
t2501 = -t2506 * t2762 + t2546 * t2758;
t2500 = -t2754 * t2522 + t2756 * t2798;
t2499 = t2756 * t2522 + t2754 * t2798;
t2496 = -t2497 * t2759 + t2498 * t2763;
t2495 = -t2754 * t2501 + t2756 * t2799;
t2494 = t2756 * t2501 + t2754 * t2799;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2737, -t2736, 0, -t2739 * t2760 + t2740 * t2764, 0, 0, 0, 0, 0, 0, -t2664 * t2760 + t2691 * t2764, -t2660 * t2760 + t2686 * t2764, -t2657 * t2760 + t2672 * t2764, -t2635 * t2760 + t2641 * t2764, 0, 0, 0, 0, 0, 0, -t2602 * t2760 + t2610 * t2764, -t2605 * t2760 + t2621 * t2764, -t2580 * t2760 + t2603 * t2764, -t2537 * t2760 + t2541 * t2764, 0, 0, 0, 0, 0, 0, -t2544 * t2760 + t2557 * t2764, -t2550 * t2760 + t2561 * t2764, -t2531 * t2760 + t2553 * t2764, -t2505 * t2760 + t2513 * t2764, 0, 0, 0, 0, 0, 0, -t2530 * t2760 + t2552 * t2764, -t2545 * t2760 + t2558 * t2764, -t2549 * t2760 + t2560 * t2764, -t2500 * t2760 + t2503 * t2764, 0, 0, 0, 0, 0, 0, -t2511 * t2760 + t2516 * t2764, -t2515 * t2760 + t2519 * t2764, -t2509 * t2760 + t2512 * t2764, -t2495 * t2760 + t2496 * t2764; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2736, t2737, 0, t2739 * t2764 + t2740 * t2760, 0, 0, 0, 0, 0, 0, t2664 * t2764 + t2691 * t2760, t2660 * t2764 + t2686 * t2760, t2657 * t2764 + t2672 * t2760, t2635 * t2764 + t2641 * t2760, 0, 0, 0, 0, 0, 0, t2602 * t2764 + t2610 * t2760, t2605 * t2764 + t2621 * t2760, t2580 * t2764 + t2603 * t2760, t2537 * t2764 + t2541 * t2760, 0, 0, 0, 0, 0, 0, t2544 * t2764 + t2557 * t2760, t2550 * t2764 + t2561 * t2760, t2531 * t2764 + t2553 * t2760, t2505 * t2764 + t2513 * t2760, 0, 0, 0, 0, 0, 0, t2530 * t2764 + t2552 * t2760, t2545 * t2764 + t2558 * t2760, t2549 * t2764 + t2560 * t2760, t2500 * t2764 + t2503 * t2760, 0, 0, 0, 0, 0, 0, t2511 * t2764 + t2516 * t2760, t2515 * t2764 + t2519 * t2760, t2509 * t2764 + t2512 * t2760, t2495 * t2764 + t2496 * t2760; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2663, t2659, t2656, t2634, 0, 0, 0, 0, 0, 0, t2601, t2604, t2579, t2536, 0, 0, 0, 0, 0, 0, t2542, t2548, t2529, t2504, 0, 0, 0, 0, 0, 0, t2528, t2543, t2547, t2499, 0, 0, 0, 0, 0, 0, t2510, t2514, t2508, t2494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2765, -qJDD(1), 0, t2740, 0, 0, 0, 0, 0, 0, t2691, t2686, t2672, t2641, 0, 0, 0, 0, 0, 0, t2610, t2621, t2603, t2541, 0, 0, 0, 0, 0, 0, t2557, t2561, t2553, t2513, 0, 0, 0, 0, 0, 0, t2552, t2558, t2560, t2503, 0, 0, 0, 0, 0, 0, t2516, t2519, t2512, t2496; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2765, 0, t2739, 0, 0, 0, 0, 0, 0, t2664, t2660, t2657, t2635, 0, 0, 0, 0, 0, 0, t2602, t2605, t2580, t2537, 0, 0, 0, 0, 0, 0, t2544, t2550, t2531, t2505, 0, 0, 0, 0, 0, 0, t2530, t2545, t2549, t2500, 0, 0, 0, 0, 0, 0, t2511, t2515, t2509, t2495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2663, t2659, t2656, t2634, 0, 0, 0, 0, 0, 0, t2601, t2604, t2579, t2536, 0, 0, 0, 0, 0, 0, t2542, t2548, t2529, t2504, 0, 0, 0, 0, 0, 0, t2528, t2543, t2547, t2499, 0, 0, 0, 0, 0, 0, t2510, t2514, t2508, t2494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2729, t2726, t2703, t2682, 0, 0, 0, 0, 0, 0, t2643, t2652, t2633, t2572, 0, 0, 0, 0, 0, 0, t2583, t2590, t2576, t2527, 0, 0, 0, 0, 0, 0, t2575, t2584, t2589, t2518, 0, 0, 0, 0, 0, 0, t2533, t2539, t2525, t2498; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2725, t2715, t2702, t2681, 0, 0, 0, 0, 0, 0, t2642, t2651, t2632, t2571, 0, 0, 0, 0, 0, 0, t2581, t2588, t2574, t2526, 0, 0, 0, 0, 0, 0, t2573, t2582, t2587, t2517, 0, 0, 0, 0, 0, 0, t2532, t2538, t2524, t2497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2704, t2701, t2730, t2705, 0, 0, 0, 0, 0, 0, t2668, t2670, t2673, t2665, 0, 0, 0, 0, 0, 0, -t2614, -t2617, t2598, t2534, 0, 0, 0, 0, 0, 0, t2597, t2614, t2617, t2522, 0, 0, 0, 0, 0, 0, t2562, t2564, t2554, t2501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2683, t2685, t2669, t2607, 0, 0, 0, 0, 0, 0, t2615, -t2619, t2600, t2535, 0, 0, 0, 0, 0, 0, t2599, -t2615, t2619, t2523, 0, 0, 0, 0, 0, 0, t2563, t2565, t2555, t2502; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2684, t2694, t2671, t2606, 0, 0, 0, 0, 0, 0, -t2624, -t2629, -t2838, -t2591, 0, 0, 0, 0, 0, 0, -t2838, t2625, t2628, -t2566, 0, 0, 0, 0, 0, 0, -t2578, -t2586, -t2568, -t2507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2668, t2670, t2673, t2665, 0, 0, 0, 0, 0, 0, -t2614, -t2617, t2598, t2534, 0, 0, 0, 0, 0, 0, t2597, t2614, t2617, t2522, 0, 0, 0, 0, 0, 0, t2562, t2564, t2554, t2501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2654, -t2637, t2627, t2570, 0, 0, 0, 0, 0, 0, t2626, -t2654, t2637, t2556, 0, 0, 0, 0, 0, 0, t2594, t2596, t2622, t2546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2803, t2807, t2772, t2569, 0, 0, 0, 0, 0, 0, t2772, t2803, -t2807, -t2559, 0, 0, 0, 0, 0, 0, -t2577, -t2585, -t2567, -t2506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2624, t2629, t2838, t2591, 0, 0, 0, 0, 0, 0, t2838, -t2625, -t2628, t2566, 0, 0, 0, 0, 0, 0, t2578, t2586, t2568, t2507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2838, -t2625, -t2628, t2566, 0, 0, 0, 0, 0, 0, t2578, t2586, t2568, t2507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2626, t2654, -t2637, -t2556, 0, 0, 0, 0, 0, 0, -t2594, -t2596, -t2622, -t2546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2772, -t2803, t2807, t2559, 0, 0, 0, 0, 0, 0, t2577, t2585, t2567, t2506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2623, t2612, t2595, t2521; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2768, t2808, t2773, t2793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2594, t2596, t2622, t2546;];
f_new_reg  = t1;
