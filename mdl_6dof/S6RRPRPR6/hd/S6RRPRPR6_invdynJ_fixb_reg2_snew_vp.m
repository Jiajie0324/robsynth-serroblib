% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 14:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR6_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR6_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:26:32
% EndTime: 2019-05-06 14:27:04
% DurationCPUTime: 19.15s
% Computational Cost: add. (61061->659), mult. (161616->937), div. (0->0), fcn. (128074->12), ass. (0->390)
t354 = sin(qJ(4));
t349 = sin(pkin(11));
t351 = cos(pkin(11));
t359 = cos(qJ(2));
t350 = sin(pkin(6));
t421 = qJD(1) * t350;
t403 = t359 * t421;
t355 = sin(qJ(2));
t404 = t355 * t421;
t312 = t349 * t404 - t351 * t403;
t308 = qJD(4) + t312;
t307 = t308 ^ 2;
t314 = t349 * t403 + t351 * t404;
t352 = cos(pkin(6));
t342 = qJD(1) * t352 + qJD(2);
t358 = cos(qJ(4));
t291 = t314 * t358 + t342 * t354;
t475 = t291 ^ 2;
t487 = -t475 - t307;
t402 = qJD(2) * t421;
t416 = qJDD(1) * t350;
t321 = t355 * t416 + t359 * t402;
t322 = -t355 * t402 + t359 * t416;
t394 = t321 * t349 - t351 * t322;
t276 = qJDD(4) + t394;
t289 = t314 * t354 - t358 * t342;
t441 = t291 * t289;
t489 = t441 + t276;
t496 = t489 * t358;
t165 = t354 * t487 + t496;
t278 = t351 * t321 + t349 * t322;
t341 = t352 * qJDD(1) + qJDD(2);
t383 = t278 * t358 + t341 * t354;
t417 = qJD(4) + t308;
t194 = t289 * t417 - t383;
t113 = t165 * t349 - t194 * t351;
t115 = t165 * t351 + t194 * t349;
t543 = pkin(1) * (t113 * t359 + t115 * t355);
t497 = t489 * t354;
t163 = -t358 * t487 + t497;
t542 = -pkin(1) * t163 - pkin(8) * (t113 * t355 - t115 * t359);
t541 = qJ(3) * t113;
t540 = pkin(2) * t113 + pkin(9) * t165;
t539 = -pkin(2) * t163 + qJ(3) * t115;
t260 = -t475 + t307;
t205 = -t441 + t276;
t509 = t205 * t354;
t168 = t260 * t358 + t509;
t508 = t205 * t358;
t172 = -t260 * t354 + t508;
t371 = qJD(4) * t289 - t383;
t442 = t289 * t308;
t190 = t442 - t371;
t538 = t352 * t168 + (t355 * (t172 * t351 + t190 * t349) + t359 * (t172 * t349 - t190 * t351)) * t350;
t532 = pkin(3) * t163;
t531 = pkin(9) * t163;
t476 = t289 ^ 2;
t259 = t476 - t307;
t175 = t259 * t358 - t497;
t529 = t175 * t349;
t528 = t175 * t351;
t171 = t259 * t354 + t496;
t526 = t352 * t171;
t228 = -t307 - t476;
t156 = -t228 * t354 - t508;
t523 = pkin(1) * t156;
t522 = pkin(2) * t156;
t521 = pkin(3) * t156;
t216 = t476 + t475;
t520 = pkin(3) * t216;
t519 = pkin(9) * t156;
t157 = t228 * t358 - t509;
t518 = pkin(9) * t157;
t517 = t157 * t349;
t516 = t157 * t351;
t513 = t190 * t354;
t512 = t190 * t358;
t507 = t216 * t349;
t506 = t216 * t351;
t488 = -t442 - t371;
t486 = t475 - t476;
t505 = t349 * t486;
t504 = t351 * t486;
t353 = sin(qJ(6));
t357 = cos(qJ(6));
t253 = -t357 * t289 + t308 * t353;
t255 = t289 * t353 + t308 * t357;
t199 = t255 * t253;
t229 = qJDD(6) - t371;
t492 = -t199 + t229;
t503 = t353 * t492;
t501 = t354 * t488;
t500 = t357 * t492;
t498 = t358 * t488;
t437 = t314 * t342;
t243 = t394 + t437;
t346 = t350 ^ 2;
t361 = qJD(1) ^ 2;
t422 = qJD(1) * t342;
t495 = t346 * (-t352 * t361 + t422);
t438 = t314 * t312;
t386 = t341 - t438;
t494 = t349 * t386;
t493 = t351 * t386;
t298 = t342 * t312;
t491 = -t298 + t278;
t356 = sin(qJ(1));
t360 = cos(qJ(1));
t392 = g(1) * t360 + g(2) * t356;
t369 = -pkin(1) * t361 + pkin(8) * t416 - t392;
t432 = t350 * t355;
t400 = t356 * g(1) - g(2) * t360;
t431 = t350 * t361;
t318 = qJDD(1) * pkin(1) + pkin(8) * t431 + t400;
t436 = t318 * t352;
t266 = -g(3) * t432 + t355 * t436 + t359 * t369;
t375 = pkin(2) * t342 - qJ(3) * t404;
t348 = t359 ^ 2;
t433 = t346 * t361;
t409 = t348 * t433;
t218 = -pkin(2) * t409 + t322 * qJ(3) - t342 * t375 + t266;
t365 = t355 * t369 - t359 * t436;
t408 = t355 * t433;
t362 = -t321 * qJ(3) + t341 * pkin(2) + (pkin(2) * t408 + (qJ(3) * t422 - g(3)) * t350) * t359 - t365;
t148 = -0.2e1 * qJD(3) * t312 + t351 * t218 + t349 * t362;
t265 = t350 * t359 * g(3) + t365;
t490 = t355 * t265 + t359 * t266;
t395 = -t278 * t354 + t358 * t341;
t232 = qJD(4) * t291 - t395;
t485 = t232 * pkin(4) - qJ(5) * t488;
t237 = pkin(4) * t289 - qJ(5) * t291;
t273 = pkin(3) * t312 - pkin(9) * t314;
t474 = t342 ^ 2;
t124 = -pkin(3) * t474 + pkin(9) * t341 - t273 * t312 + t148;
t299 = g(3) * t352 + t318 * t350;
t236 = pkin(2) * t322 + qJ(3) * t409 - t375 * t404 - qJDD(3) + t299;
t152 = t243 * pkin(3) - t491 * pkin(9) - t236;
t91 = t124 * t354 - t358 * t152;
t75 = -t276 * pkin(4) - t307 * qJ(5) + t237 * t291 + qJDD(5) + t91;
t61 = t190 * pkin(5) - pkin(10) * t205 + t75;
t256 = pkin(5) * t291 - pkin(10) * t308;
t398 = t218 * t349 - t351 * t362;
t381 = -t341 * pkin(3) - pkin(9) * t474 + t398;
t123 = (0.2e1 * qJD(3) + t273) * t314 + t381;
t366 = t123 + t485;
t399 = pkin(4) * t308 - (2 * qJD(5));
t63 = -pkin(5) * t476 + pkin(10) * t232 + (-t256 + t399) * t291 + t366;
t36 = t353 * t63 - t357 * t61;
t37 = t353 * t61 + t357 * t63;
t19 = t353 * t37 - t357 * t36;
t472 = pkin(4) + pkin(10);
t92 = t124 * t358 + t152 * t354;
t370 = -t307 * pkin(4) - t237 * t289 + t92;
t461 = qJ(5) * t276;
t473 = 2 * qJD(5);
t62 = t461 - t232 * pkin(5) - t476 * pkin(10) + (t473 + t256) * t308 + t370;
t484 = qJ(5) * t62 - t19 * t472;
t251 = t253 ^ 2;
t252 = t255 ^ 2;
t167 = -t251 - t252;
t160 = -t253 * qJD(6) + t353 * t232 + t357 * t276;
t284 = qJD(6) + t291;
t448 = t253 * t284;
t134 = t160 + t448;
t397 = -t357 * t232 + t276 * t353;
t372 = (-qJD(6) + t284) * t255 - t397;
t86 = -t134 * t357 + t353 * t372;
t483 = qJ(5) * t167 - t472 * t86 - t19;
t368 = t308 * t473 + t370;
t482 = -pkin(4) * t487 + qJ(5) * (t489 + t276) + t368;
t281 = t284 ^ 2;
t176 = -t281 - t251;
t105 = t353 * t176 + t500;
t131 = (qJD(6) + t284) * t255 + t397;
t464 = t353 * t62;
t481 = qJ(5) * t131 - t105 * t472 + t464;
t415 = -t252 - t281;
t154 = t199 + t229;
t430 = t353 * t154;
t111 = t357 * t415 - t430;
t380 = -t160 + t448;
t462 = t357 * t62;
t480 = -qJ(5) * t380 - t111 * t472 + t462;
t376 = (-t289 * t354 - t291 * t358) * t308;
t377 = (-t289 * t358 + t291 * t354) * t308;
t479 = t352 * t376 + (t355 * (t276 * t349 + t351 * t377) + t359 * (-t351 * t276 + t349 * t377)) * t350;
t439 = t308 * t358;
t379 = t232 * t354 + t289 * t439;
t440 = t308 * t354;
t390 = -t358 * t232 + t289 * t440;
t411 = t351 * t441;
t412 = t349 * t441;
t478 = t352 * t390 + (t355 * (t351 * t379 - t412) + t359 * (t349 * t379 + t411)) * t350;
t389 = -t291 * t440 - t358 * t371;
t391 = t291 * t439 - t354 * t371;
t477 = t352 * t391 + (t355 * (t351 * t389 + t412) + t359 * (t349 * t389 - t411)) * t350;
t310 = t312 ^ 2;
t311 = t314 ^ 2;
t419 = qJD(3) * t314;
t147 = t398 + 0.2e1 * t419;
t95 = -t147 * t351 + t148 * t349;
t471 = pkin(2) * t95;
t247 = t298 + t278;
t378 = -t394 + t437;
t195 = -t247 * t351 + t349 * t378;
t470 = pkin(2) * t195;
t469 = pkin(3) * t349;
t468 = pkin(4) * t354;
t467 = pkin(4) * t358;
t466 = pkin(8) * t350;
t463 = t355 * t95;
t460 = t123 * t354;
t459 = t123 * t358;
t458 = t154 * t357;
t263 = t308 * t291;
t186 = t232 + t263;
t457 = t186 * t358;
t450 = t236 * t349;
t449 = t236 * t351;
t270 = -t341 - t438;
t447 = t270 * t349;
t446 = t270 * t351;
t444 = t284 * t353;
t443 = t284 * t357;
t435 = t342 * t349;
t434 = t342 * t351;
t334 = t359 * t408;
t319 = t334 + t341;
t428 = t355 * t319;
t320 = -t334 + t341;
t426 = t359 * t320;
t423 = t252 - t281;
t418 = qJD(5) * t291;
t414 = t354 * t199;
t413 = t358 * t199;
t347 = t355 ^ 2;
t410 = t347 * t433;
t407 = t352 * t438;
t327 = t342 * t403;
t406 = t327 + t321;
t405 = -pkin(3) * t351 - pkin(2);
t401 = qJ(5) * t354 + pkin(3);
t55 = t354 * t91 + t358 * t92;
t96 = t147 * t349 + t351 * t148;
t74 = t368 + t461;
t393 = -pkin(4) * t75 + qJ(5) * t74;
t187 = (-qJD(4) + t308) * t291 + t395;
t388 = -pkin(4) * t190 + qJ(5) * t187;
t20 = t353 * t36 + t357 * t37;
t54 = t354 * t92 - t358 * t91;
t363 = -pkin(4) * t205 - qJ(5) * t228 + t75;
t328 = t352 * t341;
t326 = t342 * t404;
t324 = (t347 - t348) * t433;
t323 = -t474 - t409;
t309 = -t474 - t410;
t305 = -0.2e1 * t419;
t297 = -t311 + t474;
t296 = t310 - t474;
t295 = t322 - t326;
t294 = t322 + t326;
t293 = -t327 + t321;
t282 = -t311 - t474;
t275 = t311 - t310;
t267 = -t474 - t310;
t250 = -t310 - t311;
t226 = -t282 * t349 + t446;
t225 = t282 * t351 + t447;
t219 = t251 - t281;
t211 = t267 * t351 - t494;
t210 = t267 * t349 + t493;
t198 = t252 - t251;
t196 = t247 * t349 + t351 * t378;
t188 = -t291 * t417 + t395;
t185 = t232 - t263;
t162 = (-t253 * t357 + t255 * t353) * t284;
t161 = (t253 * t353 + t255 * t357) * t284;
t159 = -qJD(6) * t255 - t397;
t145 = -t185 * t358 + t513;
t144 = -t457 - t501;
t143 = t188 * t358 - t501;
t142 = t187 * t358 + t513;
t141 = -t185 * t354 - t512;
t140 = -t186 * t354 + t498;
t139 = t188 * t354 + t498;
t138 = t187 * t354 - t512;
t137 = -t161 * t354 + t229 * t358;
t136 = t161 * t358 + t229 * t354;
t128 = t160 * t357 - t255 * t444;
t127 = -t160 * t353 - t255 * t443;
t126 = t159 * t353 - t253 * t443;
t125 = -t159 * t357 - t253 * t444;
t122 = t219 * t357 - t430;
t121 = t353 * t423 + t500;
t120 = -t219 * t353 - t458;
t119 = t357 * t423 - t503;
t118 = pkin(2) * t225 - t148;
t117 = pkin(2) * t210 + t305 - t398;
t112 = -t353 * t415 - t458;
t110 = -t186 * t349 - t516;
t109 = -t188 * t349 + t516;
t108 = t186 * t351 - t517;
t107 = t188 * t351 + t517;
t106 = t176 * t357 - t503;
t104 = t145 * t351 - t507;
t103 = t142 * t351 - t507;
t102 = t145 * t349 + t506;
t101 = t142 * t349 + t506;
t100 = -t127 * t354 + t413;
t99 = -t125 * t354 - t413;
t98 = t127 * t358 + t414;
t97 = t125 * t358 - t414;
t94 = t459 + t531;
t93 = t460 + t519;
t89 = -pkin(3) * t138 - t388;
t88 = t353 * t134 + t357 * t372;
t87 = -t131 * t357 + t353 * t380;
t85 = t353 * t131 + t357 * t380;
t84 = -t119 * t354 + t134 * t358;
t83 = -t120 * t354 + t358 * t372;
t82 = t119 * t358 + t134 * t354;
t81 = t120 * t358 + t354 * t372;
t80 = t291 * t399 + t366;
t79 = t111 * t354 - t358 * t380;
t78 = -t111 * t358 - t354 * t380;
t77 = t105 * t354 + t131 * t358;
t76 = -t105 * t358 + t131 * t354;
t73 = t92 + t532;
t72 = t198 * t358 - t354 * t85;
t71 = t198 * t354 + t358 * t85;
t70 = t91 + t521;
t69 = -0.2e1 * t418 + (t186 + t263) * pkin(4) + t366;
t68 = -pkin(4) * t263 - qJ(5) * t194 - t273 * t314 + t305 - t381 + 0.2e1 * t418 - t485;
t67 = t167 * t358 + t354 * t86;
t66 = t167 * t354 - t358 * t86;
t65 = qJ(5) * t216 + t75;
t64 = pkin(4) * t216 + t74;
t59 = pkin(3) * t194 + t460 - t540;
t58 = t112 * t349 + t351 * t79;
t57 = -t112 * t351 + t349 * t79;
t56 = pkin(2) * t107 + pkin(3) * t188 - t459 + t518;
t53 = t106 * t349 + t351 * t77;
t52 = -t106 * t351 + t349 * t77;
t51 = -t482 - t532;
t50 = -t363 - t521;
t49 = t194 * t468 + t358 * t68 - t531;
t48 = qJ(5) * t457 - t354 * t69 - t519;
t47 = pkin(5) * t86 - qJ(5) * t88;
t46 = -pkin(9) * t141 - t54;
t45 = t123 * t349 + t351 * t55;
t44 = -t123 * t351 + t349 * t55;
t43 = t349 * t88 + t351 * t67;
t42 = t349 * t67 - t351 * t88;
t41 = t354 * t75 + t358 * t74;
t40 = t354 * t74 - t358 * t75;
t39 = t354 * t68 - (pkin(3) + t467) * t194 + t540;
t38 = pkin(2) * t108 + t186 * t401 + t358 * t69 - t518;
t34 = pkin(2) * t102 + pkin(9) * t145 + t520 + t55;
t33 = -pkin(9) * t138 - t354 * t64 + t358 * t65;
t32 = -pkin(5) * t380 - t112 * t472 - t464;
t31 = pkin(5) * t131 - t106 * t472 + t462;
t30 = t349 * t80 + t351 * t41;
t29 = t349 * t41 - t351 * t80;
t28 = pkin(2) * t101 + pkin(9) * t142 + t354 * t65 + t358 * t64 + t520;
t27 = pkin(5) * t111 - qJ(5) * t112 - t37;
t26 = pkin(5) * t105 - qJ(5) * t106 - t36;
t25 = -pkin(3) * t78 - t480;
t24 = -pkin(3) * t76 - t481;
t23 = -pkin(9) * t40 + (-qJ(5) * t358 + t468) * t80;
t22 = pkin(2) * t44 - pkin(3) * t123 + pkin(9) * t55;
t21 = -pkin(3) * t40 - t393;
t18 = t19 * t354 + t358 * t62;
t17 = -t19 * t358 + t354 * t62;
t16 = pkin(5) * t167 - t472 * t88 - t20;
t15 = -pkin(9) * t78 + t27 * t358 - t32 * t354;
t14 = -pkin(9) * t76 + t26 * t358 - t31 * t354;
t13 = pkin(2) * t29 + pkin(9) * t41 + (-t401 - t467) * t80;
t12 = -pkin(3) * t66 - t483;
t11 = pkin(2) * t57 - pkin(3) * t112 + pkin(9) * t79 + t27 * t354 + t32 * t358;
t10 = pkin(2) * t52 - pkin(3) * t106 + pkin(9) * t77 + t26 * t354 + t31 * t358;
t9 = -pkin(9) * t66 - t16 * t354 + t358 * t47;
t8 = pkin(5) * t19 - qJ(5) * t20;
t7 = pkin(5) * t62 - t20 * t472;
t6 = t18 * t351 + t20 * t349;
t5 = t18 * t349 - t20 * t351;
t4 = pkin(2) * t42 - pkin(3) * t88 + pkin(9) * t67 + t16 * t358 + t354 * t47;
t3 = -pkin(3) * t17 - t484;
t2 = -pkin(9) * t17 - t354 * t7 + t358 * t8;
t1 = pkin(2) * t5 - pkin(3) * t20 + pkin(9) * t18 + t354 * t8 + t358 * t7;
t35 = [0, 0, 0, 0, 0, qJDD(1), t400, t392, 0, 0, (t321 * t350 + t359 * t495) * t355, t352 * t324 + (t355 * t295 + t359 * t406) * t350, t352 * t293 + (t428 + t359 * (t474 - t410)) * t350, (t322 * t350 - t355 * t495) * t359, t352 * t294 + (t355 * (-t474 + t409) + t426) * t350, t328, (-t265 + pkin(1) * (t319 * t359 + t323 * t355)) * t352 + (t359 * t299 + pkin(1) * t295 + pkin(8) * (t323 * t359 - t428)) * t350, -t299 * t432 - t352 * t266 + pkin(1) * (-t350 * t406 + (t309 * t359 - t320 * t355) * t352) + (-t309 * t355 - t426) * t466, pkin(1) * ((-t293 * t359 + t294 * t355) * t352 - (-t347 - t348) * t346 * t431) + (t293 * t355 + t294 * t359) * t466 + t490 * t350, pkin(1) * (t299 * t350 + (-t265 * t359 + t266 * t355) * t352) + t490 * t466, t407 + (t355 * (t278 * t351 - t314 * t435) + t359 * (t278 * t349 + t314 * t434)) * t350, t352 * t275 + (t355 * (-t243 * t351 - t349 * t491) + t359 * (-t243 * t349 + t351 * t491)) * t350, t352 * t247 + (t355 * (-t297 * t349 + t493) + t359 * (t297 * t351 + t494)) * t350, -t407 + (t355 * (t312 * t434 + t349 * t394) + t359 * (t312 * t435 - t351 * t394)) * t350, t352 * t378 + (t355 * (t296 * t351 + t447) + t359 * (t296 * t349 - t446)) * t350, t328 + (t355 * (-t312 * t351 + t314 * t349) + t359 * (-t312 * t349 - t314 * t351)) * t350 * t342, (t117 + pkin(1) * (t210 * t359 + t211 * t355)) * t352 + (t355 * (-qJ(3) * t210 - t450) + t359 * (-pkin(2) * t243 + qJ(3) * t211 + t449) - pkin(1) * t243 + pkin(8) * (-t210 * t355 + t211 * t359)) * t350, (t118 + pkin(1) * (t225 * t359 + t226 * t355)) * t352 + (t355 * (-qJ(3) * t225 - t449) + t359 * (-pkin(2) * t491 + qJ(3) * t226 - t450) - pkin(1) * t491 + pkin(8) * (-t225 * t355 + t226 * t359)) * t350, (t470 + pkin(1) * (t195 * t359 + t196 * t355)) * t352 + (t355 * (-qJ(3) * t195 - t95) + t359 * (-pkin(2) * t250 + qJ(3) * t196 + t96) - pkin(1) * t250 + pkin(8) * (-t195 * t355 + t196 * t359)) * t350, (t471 + pkin(1) * (t355 * t96 + t359 * t95)) * t352 + (-qJ(3) * t463 + t359 * (pkin(2) * t236 + qJ(3) * t96) + pkin(1) * t236 + pkin(8) * (t359 * t96 - t463)) * t350, t477, t352 * t139 + (t355 * (t143 * t351 + t505) + t359 * (t143 * t349 - t504)) * t350, t538, t478, t526 + (t355 * (t187 * t349 + t528) + t359 * (-t187 * t351 + t529)) * t350, t479, (t56 + pkin(1) * (t107 * t359 + t109 * t355)) * t352 + (t355 * (-qJ(3) * t107 - t349 * t70 + t351 * t93) + t359 * (qJ(3) * t109 + t349 * t93 + t351 * t70 + t522) + t523 + pkin(8) * (-t107 * t355 + t109 * t359)) * t350, (t59 - t543) * t352 + (t355 * (-t349 * t73 + t351 * t94 + t541) + t359 * (t349 * t94 + t351 * t73 - t539) - t542) * t350, (t34 + pkin(1) * (t102 * t359 + t104 * t355)) * t352 + (t355 * (-qJ(3) * t102 + t351 * t46) + t359 * (qJ(3) * t104 + t349 * t46) + pkin(8) * (-t102 * t355 + t104 * t359) + (t355 * t469 + t359 * t405 - pkin(1)) * t141) * t350, (t22 + pkin(1) * (t355 * t45 + t359 * t44)) * t352 + ((t355 * (-pkin(9) * t351 + t469) + t359 * (-pkin(9) * t349 + t405) - pkin(1)) * t54 + (pkin(8) + qJ(3)) * (-t355 * t44 + t359 * t45)) * t350, t479, -t538, -t526 + (t355 * (t185 * t349 - t528) + t359 * (-t185 * t351 - t529)) * t350, t477, t352 * t140 + (t355 * (t144 * t351 + t505) + t359 * (t144 * t349 - t504)) * t350, t478, (t28 + pkin(1) * (t101 * t359 + t103 * t355)) * t352 + (t355 * (-qJ(3) * t101 + t33 * t351 - t349 * t89) + t359 * (-pkin(2) * t138 + qJ(3) * t103 + t33 * t349 + t351 * t89) - pkin(1) * t138 + pkin(8) * (-t101 * t355 + t103 * t359)) * t350, (t38 + pkin(1) * (t108 * t359 + t110 * t355)) * t352 + (t355 * (-qJ(3) * t108 - t349 * t50 + t351 * t48) + t359 * (qJ(3) * t110 + t349 * t48 + t351 * t50 - t522) - t523 + pkin(8) * (-t108 * t355 + t110 * t359)) * t350, (t39 + t543) * t352 + (t355 * (-t349 * t51 + t351 * t49 - t541) + t359 * (t349 * t49 + t351 * t51 + t539) + t542) * t350, (t13 + pkin(1) * (t29 * t359 + t30 * t355)) * t352 + (t355 * (-qJ(3) * t29 - t21 * t349 + t23 * t351) + t359 * (-pkin(2) * t40 + qJ(3) * t30 + t21 * t351 + t23 * t349) - pkin(1) * t40 + pkin(8) * (-t29 * t355 + t30 * t359)) * t350, t352 * t98 + (t355 * (t100 * t351 + t128 * t349) + t359 * (t100 * t349 - t128 * t351)) * t350, t352 * t71 + (t355 * (t349 * t87 + t351 * t72) + t359 * (t349 * t72 - t351 * t87)) * t350, t352 * t82 + (t355 * (t121 * t349 + t351 * t84) + t359 * (-t121 * t351 + t349 * t84)) * t350, t352 * t97 + (t355 * (-t126 * t349 + t351 * t99) + t359 * (t126 * t351 + t349 * t99)) * t350, t352 * t81 + (t355 * (t122 * t349 + t351 * t83) + t359 * (-t122 * t351 + t349 * t83)) * t350, t352 * t136 + (t355 * (t137 * t351 + t162 * t349) + t359 * (t137 * t349 - t162 * t351)) * t350, (t10 + pkin(1) * (t355 * t53 + t359 * t52)) * t352 + (t355 * (-qJ(3) * t52 + t14 * t351 - t24 * t349) + t359 * (-pkin(2) * t76 + qJ(3) * t53 + t14 * t349 + t24 * t351) - pkin(1) * t76 + pkin(8) * (-t355 * t52 + t359 * t53)) * t350, (t11 + pkin(1) * (t355 * t58 + t359 * t57)) * t352 + (t355 * (-qJ(3) * t57 + t15 * t351 - t25 * t349) + t359 * (-pkin(2) * t78 + qJ(3) * t58 + t15 * t349 + t25 * t351) - pkin(1) * t78 + pkin(8) * (-t355 * t57 + t359 * t58)) * t350, (t4 + pkin(1) * (t355 * t43 + t359 * t42)) * t352 + (t355 * (-qJ(3) * t42 - t12 * t349 + t351 * t9) + t359 * (-pkin(2) * t66 + qJ(3) * t43 + t12 * t351 + t349 * t9) - pkin(1) * t66 + pkin(8) * (-t355 * t42 + t359 * t43)) * t350, (t1 + pkin(1) * (t355 * t6 + t359 * t5)) * t352 + (t355 * (-qJ(3) * t5 + t2 * t351 - t3 * t349) + t359 * (-pkin(2) * t17 + qJ(3) * t6 + t2 * t349 + t3 * t351) - pkin(1) * t17 + pkin(8) * (-t355 * t5 + t359 * t6)) * t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t334, t324, t293, t334, t294, t341, -t265, -t266, 0, 0, t438, t275, t247, -t438, t378, t341, t117, t118, t470, t471, t391, t139, t168, t390, t171, t376, t56, t59, t34, t22, t376, -t168, -t171, t391, t140, t390, t28, t38, t39, t13, t98, t71, t82, t97, t81, t136, t10, t11, t4, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t243, t491, t250, -t236, 0, 0, 0, 0, 0, 0, -t156, -t163, t141, t54, 0, 0, 0, 0, 0, 0, t138, t156, t163, t40, 0, 0, 0, 0, 0, 0, t76, t78, t66, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t441, t486, t190, -t441, t187, t276, -t91, -t92, 0, 0, t276, -t190, t185, t441, t486, -t441, t388, t363, t482, t393, t128, t87, t121, -t126, t122, t162, t481, t480, t483, t484; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190, t205, t487, t75, 0, 0, 0, 0, 0, 0, t105, t111, t86, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, t198, t134, -t199, t372, t229, -t36, -t37, 0, 0;];
tauJ_reg  = t35;
