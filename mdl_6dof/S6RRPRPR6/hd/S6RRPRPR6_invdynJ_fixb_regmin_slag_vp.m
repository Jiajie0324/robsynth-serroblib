% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPR6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:43:08
% EndTime: 2019-03-09 10:43:22
% DurationCPUTime: 8.10s
% Computational Cost: add. (9059->610), mult. (25819->803), div. (0->0), fcn. (21319->12), ass. (0->312)
t227 = sin(qJ(4));
t355 = qJD(4) * t227;
t225 = sin(pkin(6));
t228 = sin(qJ(2));
t387 = sin(pkin(11));
t329 = t228 * t387;
t307 = t225 * t329;
t278 = qJD(1) * t307;
t232 = cos(qJ(2));
t388 = cos(pkin(11));
t327 = t232 * t388;
t303 = qJD(1) * t327;
t170 = t225 * t303 - t278;
t374 = t170 * t227;
t432 = -t355 + t374;
t222 = t225 ^ 2;
t431 = 0.2e1 * t222;
t192 = -t228 * t388 - t232 * t387;
t252 = qJD(1) * t192;
t173 = t225 * t252;
t231 = cos(qJ(4));
t389 = cos(pkin(6));
t320 = t389 * qJD(1);
t282 = t320 + qJD(2);
t143 = -t231 * t173 + t227 * t282;
t140 = qJD(6) + t143;
t430 = pkin(1) * t431;
t141 = -t173 * t227 - t231 * t282;
t164 = qJD(4) - t170;
t380 = t141 * t164;
t315 = t389 * qJDD(1);
t277 = t315 + qJDD(2);
t422 = qJD(2) * t278 + (-qJD(2) * t303 + qJDD(1) * t192) * t225;
t427 = -qJD(4) * t282 + t422;
t59 = -t173 * t355 - t227 * t277 + t231 * t427;
t429 = t59 - t380;
t328 = t232 * t389;
t214 = pkin(1) * t328;
t210 = qJD(1) * t214;
t404 = pkin(8) + qJ(3);
t336 = t404 * t225;
t311 = t228 * t336;
t255 = pkin(2) * t389 - t311;
t145 = qJD(2) * pkin(2) + qJD(1) * t255 + t210;
t330 = t228 * t389;
t213 = pkin(1) * t330;
t369 = t225 * t232;
t158 = (t369 * t404 + t213) * qJD(1);
t325 = t388 * t158;
t77 = t387 * t145 + t325;
t70 = pkin(9) * t282 + t77;
t220 = t232 * pkin(2) + pkin(1);
t304 = t220 * t225;
t183 = -qJD(1) * t304 + qJD(3);
t93 = -pkin(3) * t170 + pkin(9) * t173 + t183;
t40 = t227 * t70 - t231 * t93;
t362 = qJD(5) + t40;
t226 = sin(qJ(6));
t230 = cos(qJ(6));
t365 = t227 * t230;
t113 = -t170 * t365 - t173 * t226;
t428 = t230 * t355 + t113;
t157 = -qJD(1) * t311 + t210;
t96 = t157 * t387 + t325;
t426 = pkin(4) * t432 + qJD(5) * t227 + t96;
t229 = sin(qJ(1));
t233 = cos(qJ(1));
t326 = t233 * t389;
t425 = -t229 * t228 + t232 * t326;
t290 = t389 * t387;
t291 = t389 * t388;
t177 = t228 * t291 + t232 * t290;
t258 = t327 - t329;
t133 = t177 * t233 + t229 * t258;
t368 = t225 * t233;
t115 = t133 * t227 + t231 * t368;
t244 = -t228 * t290 + t232 * t291;
t132 = t229 * t192 + t233 * t244;
t424 = t115 * t226 - t132 * t230;
t423 = t115 * t230 + t132 * t226;
t354 = qJD(4) * t231;
t385 = qJ(5) * t231;
t421 = -qJ(5) * t354 + t170 * t385 - t426;
t367 = t226 * t227;
t114 = t170 * t367 - t173 * t230;
t292 = t226 * t355 - t114;
t351 = qJD(6) * t231;
t256 = -t230 * t351 + t292;
t420 = t256 * t140;
t419 = (qJDD(2) + 0.2e1 * t315) * t225;
t363 = pkin(5) * t143 + t362;
t41 = t227 * t93 + t231 * t70;
t31 = -qJ(5) * t164 - t41;
t411 = pkin(5) * t141;
t22 = -t31 - t411;
t414 = pkin(4) + pkin(10);
t58 = -qJDD(6) + t59;
t418 = t414 * t58 + (t22 - t41 + t411) * t140;
t306 = t225 * t327;
t195 = qJDD(1) * t306;
t251 = qJD(2) * t192;
t295 = qJDD(1) * t329;
t126 = qJDD(4) - t195 + (-qJD(1) * t251 + t295) * t225;
t197 = t231 * t277;
t60 = qJD(4) * t143 - t227 * t422 - t197;
t84 = t141 * t226 + t164 * t230;
t21 = qJD(6) * t84 + t126 * t226 - t230 * t60;
t416 = t143 ^ 2;
t415 = t164 ^ 2;
t235 = qJD(1) ^ 2;
t412 = pkin(4) * t126;
t176 = t192 * t225;
t410 = pkin(9) * t176;
t409 = g(1) * t229;
t153 = -t176 * t227 - t231 * t389;
t408 = t153 * pkin(4);
t407 = t225 * pkin(8);
t406 = t231 * pkin(4);
t340 = t387 * pkin(2);
t218 = t340 + pkin(9);
t405 = pkin(5) + t218;
t352 = qJD(6) * t230;
t353 = qJD(6) * t226;
t20 = t230 * t126 + t141 * t352 - t164 * t353 + t226 * t60;
t403 = t20 * t227 + t84 * t354;
t312 = pkin(1) * qJD(2) * t389;
t279 = qJD(1) * t312;
t308 = pkin(1) * t315;
t259 = -t228 * t279 + t232 * t308;
t331 = qJD(2) * t404;
t346 = t228 * qJDD(1);
t357 = qJD(3) * t228;
t74 = t277 * pkin(2) + (-t404 * t346 + (-t232 * t331 - t357) * qJD(1)) * t225 + t259;
t262 = qJD(3) * t232 - t228 * t331;
t348 = qJDD(1) * t232;
t332 = t225 * t348;
t342 = pkin(8) * t332 + t228 * t308 + t232 * t279;
t88 = (qJ(3) * t348 + qJD(1) * t262) * t225 + t342;
t39 = t387 * t74 + t388 * t88;
t371 = t225 * t228;
t339 = qJD(1) * t371;
t313 = pkin(2) * t339;
t108 = -pkin(3) * t173 - pkin(9) * t170 + t313;
t150 = t387 * t158;
t97 = t157 * t388 - t150;
t402 = t227 * t108 + t231 * t97;
t82 = -t230 * t141 + t164 * t226;
t401 = t140 * t82;
t400 = t140 * t84;
t399 = t164 * t31;
t398 = t164 * t41;
t397 = t164 * t82;
t396 = t170 * t84;
t395 = t20 * t230;
t394 = t21 * t227;
t393 = t226 * t58;
t55 = t230 * t58;
t42 = qJ(5) * t173 - t402;
t392 = pkin(5) * t374 - t405 * t355 + t42;
t175 = t307 - t306;
t112 = pkin(3) * t175 - t304 + t410;
t156 = t214 + t255;
t361 = pkin(8) * t369 + t213;
t167 = qJ(3) * t369 + t361;
t106 = t387 * t156 + t388 * t167;
t95 = pkin(9) * t389 + t106;
t390 = t227 * t112 + t231 * t95;
t386 = qJ(5) * t141;
t123 = t126 * qJ(5);
t384 = t126 * t227;
t381 = t140 * t226;
t379 = t141 * t173;
t378 = t143 * t141;
t377 = t143 * t164;
t376 = t143 * t173;
t154 = -t176 * t231 + t227 * t389;
t375 = t154 * qJ(5);
t373 = t218 * t126;
t372 = t222 * t235;
t370 = t225 * t229;
t366 = t227 * qJ(5);
t223 = t228 ^ 2;
t360 = -t232 ^ 2 + t223;
t359 = qJD(2) * t225;
t358 = qJD(2) * t228;
t356 = qJD(4) * t218;
t350 = qJD(1) * qJD(2);
t349 = qJDD(1) * t225;
t335 = t228 * t350;
t310 = t225 * t335;
t345 = pkin(2) * t310 + qJDD(3);
t344 = pkin(2) * t369;
t343 = t232 * t372;
t341 = t388 * pkin(2);
t338 = t225 * t358;
t190 = t405 * t231;
t334 = t232 * t350;
t333 = t225 * t346;
t35 = pkin(9) * t277 + t39;
t127 = t195 + (qJD(2) * t252 - t295) * t225;
t52 = -pkin(1) * t349 - pkin(2) * t332 - t127 * pkin(3) + pkin(9) * t422 + t345;
t324 = -t227 * t52 - t231 * t35 - t93 * t354 + t70 * t355;
t323 = -t227 * t35 + t231 * t52 - t70 * t354 - t93 * t355;
t322 = t112 * t231 - t227 * t95;
t116 = t133 * t231 - t227 * t368;
t179 = pkin(2) * t330 - t336;
t319 = -t179 * t229 + t233 * t220;
t317 = t164 * t231;
t309 = t425 * pkin(2);
t219 = -t341 - pkin(3);
t46 = -qJ(5) * t175 - t390;
t302 = t225 * t235 * t389;
t134 = t229 * t177 - t233 * t258;
t119 = -t134 * t227 - t231 * t370;
t301 = -g(1) * t115 + g(2) * t119;
t120 = -t134 * t231 + t227 * t370;
t300 = g(1) * t116 - g(2) * t120;
t293 = qJDD(5) - t323;
t4 = -pkin(5) * t59 - t126 * t414 + t293;
t38 = -t387 * t88 + t388 * t74;
t34 = -pkin(3) * t277 - t38;
t239 = t59 * qJ(5) - t143 * qJD(5) + t34;
t7 = t414 * t60 + t239;
t299 = t226 * t4 + t230 * t7;
t189 = t405 * t227;
t298 = -qJD(6) * t189 - t164 * (pkin(10) * t227 - t385) + t426;
t263 = t219 - t366;
t178 = -t231 * t414 + t263;
t91 = t227 * t97;
t297 = qJD(6) * t178 - qJD(4) * t190 + t91 + (pkin(5) * t170 - t108) * t231 + t414 * t173;
t296 = t140 * t428 + t351 * t381;
t294 = g(2) * t368 - g(3) * t389;
t17 = -t164 * t414 + t363;
t76 = t145 * t388 - t150;
t69 = -pkin(3) * t282 - t76;
t240 = -t143 * qJ(5) + t69;
t25 = t141 * t414 + t240;
t9 = t17 * t230 - t226 * t25;
t10 = t17 * t226 + t230 * t25;
t24 = pkin(5) * t154 - t175 * t414 - t322;
t105 = t156 * t388 - t387 * t167;
t94 = -pkin(3) * t389 - t105;
t246 = t94 - t375;
t36 = t153 * t414 + t246;
t287 = -t226 * t36 + t230 * t24;
t286 = t226 * t24 + t230 * t36;
t211 = t232 * t312;
t146 = t225 * t262 + t211;
t147 = -t225 * t357 + (-t232 * t336 - t213) * qJD(2);
t72 = t146 * t387 - t388 * t147;
t285 = t153 * t230 - t175 * t226;
t111 = t153 * t226 + t175 * t230;
t284 = -t179 * t233 - t220 * t229;
t281 = 0.2e1 * t320 + qJD(2);
t171 = t225 * t251;
t172 = t258 * t359;
t109 = pkin(2) * t338 - pkin(3) * t171 - pkin(9) * t172;
t73 = t146 * t388 + t147 * t387;
t280 = t109 * t231 - t112 * t355 - t227 * t73 - t95 * t354;
t162 = t164 * qJD(5);
t6 = -t123 - t162 + t324;
t276 = pkin(3) + t366 + t406;
t273 = t231 * t126 + t164 * t432;
t271 = -t140 * t381 - t55;
t270 = t227 * t109 + t112 * t354 + t231 * t73 - t355 * t95;
t269 = t164 * t69 - t373;
t37 = t141 * pkin(4) + t240;
t268 = -t164 * t37 + t373;
t267 = -t334 - t346;
t266 = -g(1) * t120 - g(2) * t116 - g(3) * t154;
t135 = t192 * t233 - t229 * t244;
t265 = -g(1) * t135 - g(2) * t132 + g(3) * t175;
t186 = -t233 * t228 - t229 * t328;
t261 = -t140 ^ 2 * t230 + t393;
t260 = t164 * t317 + t384;
t257 = -t273 - t379;
t254 = t186 * pkin(2);
t2 = -qJD(6) * t10 - t226 * t7 + t230 * t4;
t104 = t176 * t355 + (qJD(4) * t389 + t172) * t231;
t250 = -t104 * qJ(5) - t154 * qJD(5) + t72;
t249 = g(1) * t119 + g(2) * t115 + g(3) * t153 + t323;
t248 = t266 - t324;
t247 = t164 * t356 - t265;
t11 = t60 * pkin(4) + t239;
t245 = t11 + t247;
t14 = qJ(5) * t171 - qJD(5) * t175 - t270;
t5 = -pkin(5) * t60 - t6;
t243 = t5 + (t140 * t414 + t386) * t140 + t266;
t242 = t143 * t37 + qJDD(5) - t249;
t241 = t282 * t361;
t188 = t263 - t406;
t187 = -t229 * t330 + t233 * t232;
t185 = -t228 * t326 - t229 * t232;
t103 = qJD(4) * t154 + t172 * t227;
t71 = pkin(4) * t143 + t386;
t62 = t119 * t226 - t135 * t230;
t61 = t119 * t230 + t135 * t226;
t51 = t246 + t408;
t47 = -pkin(4) * t175 - t322;
t45 = qJD(6) * t285 + t103 * t226 - t171 * t230;
t44 = qJD(6) * t111 - t103 * t230 - t171 * t226;
t43 = pkin(4) * t173 - t108 * t231 + t91;
t29 = -pkin(5) * t153 - t46;
t28 = -pkin(4) * t164 + t362;
t19 = t103 * pkin(4) + t250;
t16 = t103 * t414 + t250;
t15 = pkin(4) * t171 - t280;
t13 = -pkin(5) * t103 - t14;
t12 = pkin(5) * t104 + t171 * t414 - t280;
t8 = t293 - t412;
t1 = t9 * qJD(6) + t299;
t3 = [qJDD(1), -g(2) * t233 + t409, g(1) * t233 + g(2) * t229 (qJDD(1) * t223 + 0.2e1 * t228 * t334) * t222 (t232 * t346 - t350 * t360) * t431, t232 * t281 * t359 + t228 * t419, t232 * t419 - t281 * t338, t277 * t389, -qJD(2) * t241 + (-pkin(8) * t371 + t214) * t277 + (t267 * t407 + t259) * t389 - g(1) * t185 - g(2) * t187 + (t348 - t335) * t430 -(-pkin(8) * t338 + t211) * t282 - t361 * t277 - (-pkin(8) * t310 + t342) * t389 + g(1) * t425 - g(2) * t186 + t267 * t430, -g(1) * t368 - g(2) * t370 + t105 * t422 + t106 * t127 + t73 * t170 + t77 * t171 - t76 * t172 - t72 * t173 - t39 * t175 + t38 * t176, t39 * t106 + t77 * t73 + t38 * t105 - t76 * t72 - g(1) * t284 - g(2) * t319 + (pkin(2) * t183 * t358 + (t220 * t349 - t345) * t220) * t225, t104 * t143 - t154 * t59, -t103 * t143 - t104 * t141 + t153 * t59 - t154 * t60, t104 * t164 + t126 * t154 - t143 * t171 - t175 * t59, -t103 * t164 - t126 * t153 + t141 * t171 - t175 * t60, t126 * t175 - t164 * t171, t69 * t103 + t126 * t322 + t72 * t141 + t34 * t153 + t164 * t280 + t40 * t171 + t175 * t323 + t94 * t60 + t300, t69 * t104 - t126 * t390 + t72 * t143 + t34 * t154 - t164 * t270 + t41 * t171 + t175 * t324 - t94 * t59 + t301, -g(1) * t132 + g(2) * t135 + t103 * t31 + t104 * t28 + t14 * t141 + t143 * t15 + t153 * t6 + t154 * t8 + t46 * t60 - t47 * t59, -t103 * t37 - t11 * t153 + t126 * t47 - t141 * t19 + t15 * t164 - t171 * t28 + t175 * t8 - t51 * t60 - t300, -t104 * t37 - t11 * t154 - t126 * t46 - t14 * t164 - t143 * t19 + t171 * t31 - t175 * t6 + t51 * t59 - t301, t11 * t51 + t37 * t19 + t6 * t46 + t31 * t14 + t8 * t47 + t28 * t15 - g(1) * (-pkin(3) * t133 - pkin(4) * t116 + pkin(9) * t132 - qJ(5) * t115 + t284) - g(2) * (-pkin(3) * t134 + pkin(4) * t120 - pkin(9) * t135 + qJ(5) * t119 + t319) t111 * t20 + t45 * t84, -t111 * t21 + t20 * t285 - t44 * t84 - t45 * t82, t104 * t84 - t111 * t58 + t140 * t45 + t154 * t20, -t104 * t82 - t140 * t44 - t154 * t21 - t285 * t58, t104 * t140 - t154 * t58 (-qJD(6) * t286 + t12 * t230 - t16 * t226) * t140 - t287 * t58 + t2 * t154 + t9 * t104 + t13 * t82 + t29 * t21 - t5 * t285 + t22 * t44 + g(1) * t424 - g(2) * t62 -(qJD(6) * t287 + t12 * t226 + t16 * t230) * t140 + t286 * t58 - t1 * t154 - t10 * t104 + t13 * t84 + t29 * t20 + t5 * t111 + t22 * t45 + g(1) * t423 - g(2) * t61; 0, 0, 0, -t228 * t343, t360 * t372, -t232 * t302 + t333, t228 * t302 + t332, t277, pkin(1) * t228 * t372 - pkin(8) * t333 - g(1) * t186 - g(2) * t425 - g(3) * t369 + qJD(1) * t241 - t334 * t407 + t259, pkin(1) * t343 + (-pkin(8) * t339 + t210) * t320 + g(1) * t187 - g(2) * t185 + g(3) * t371 + t210 * qJD(2) - t342, t127 * t340 + t422 * t341 + (-t77 + t96) * t173 + (-t97 + t76) * t170, -g(1) * t254 - g(2) * t309 - g(3) * t344 - t183 * t313 + t340 * t39 + t341 * t38 + t76 * t96 - t77 * t97, t143 * t317 - t227 * t59 (-t59 - t380) * t231 + (-t60 - t377) * t227, t260 + t376, t273 - t379, t164 * t173, -t96 * t141 + t91 * t164 - t40 * t173 + t219 * t60 + t269 * t227 + (-t34 + (-t108 - t356) * t164 + t265) * t231, -t219 * t59 + t402 * t164 - t41 * t173 - t96 * t143 + t269 * t231 + (t247 + t34) * t227, g(1) * t134 - g(2) * t133 + g(3) * t176 - t141 * t42 - t143 * t43 + (-t170 * t28 - t218 * t60 - t6 + (t143 * t218 + t28) * qJD(4)) * t231 + (-t170 * t31 - t218 * t59 + t8 + (t141 * t218 + t31) * qJD(4)) * t227, -t141 * t421 - t164 * t43 + t173 * t28 - t188 * t60 + t227 * t268 + t231 * t245, -t143 * t421 + t164 * t42 - t173 * t31 + t188 * t59 - t227 * t245 + t231 * t268, t11 * t188 - t31 * t42 - t28 * t43 - g(1) * (-t134 * pkin(9) + t135 * t276 + t254) - g(2) * (pkin(9) * t133 + t132 * t276 + t309) - g(3) * (-t175 * t276 + t344 - t410) + t421 * t37 + (t8 * t227 - t6 * t231 + t28 * t354 + t31 * t355) * t218, -t20 * t226 * t231 + t256 * t84, t113 * t84 + t114 * t82 + (-t226 * t82 + t230 * t84) * t355 + (-t395 + t21 * t226 + (t226 * t84 + t230 * t82) * qJD(6)) * t231 (t393 - t396) * t231 + t420 + t403, -t394 + (t55 - t397) * t231 + t296, t140 * t317 - t227 * t58 -(-t226 * t178 + t230 * t189) * t58 + t2 * t227 + t190 * t21 - g(1) * (-t134 * t230 + t135 * t367) - g(2) * (t132 * t367 + t133 * t230) - g(3) * (-t175 * t367 - t176 * t230) + t392 * t82 - t428 * t22 + (t226 * t298 - t230 * t297) * t140 + (t164 * t9 - t22 * t353 + t5 * t230) * t231 (t178 * t230 + t189 * t226) * t58 - t1 * t227 + t190 * t20 - g(1) * (t134 * t226 + t135 * t365) - g(2) * (t132 * t365 - t133 * t226) - g(3) * (-t175 * t365 + t176 * t226) + t392 * t84 + t292 * t22 + (t226 * t297 + t230 * t298) * t140 + (-t10 * t164 - t22 * t352 - t5 * t226) * t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170 ^ 2 - t173 ^ 2, -t77 * t170 - t76 * t173 + (-qJDD(1) * t220 - t409) * t225 + t294 + t345, 0, 0, 0, 0, 0, -t257, -t231 * t415 + t376 - t384, t429 * t231 + (-t60 + t377) * t227, t257, t260 - t376, -g(1) * t370 + t37 * t173 + (-t8 - t399) * t231 + (t164 * t28 - t6) * t227 + t294, 0, 0, 0, 0, 0, t394 + (t55 + t397) * t231 + t296 (-t393 - t396) * t231 - t420 + t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t378, -t141 ^ 2 + t416, -t429, t173 * t354 + t227 * t427 + t197 + t377, t126, -t143 * t69 + t249 + t398, t141 * t69 - t164 * t40 - t248, pkin(4) * t59 - qJ(5) * t60 + (-t31 - t41) * t143 + (t28 - t362) * t141, t141 * t71 + t242 - t398 - 0.2e1 * t412, -t141 * t37 + t143 * t71 + t164 * t362 + 0.2e1 * t123 + t162 + t248, -t6 * qJ(5) - t8 * pkin(4) - t37 * t71 - t28 * t41 - g(1) * (-pkin(4) * t119 + qJ(5) * t120) - g(2) * (-pkin(4) * t115 + qJ(5) * t116) - g(3) * (t375 - t408) - t362 * t31, -t381 * t84 + t395 (-t21 - t400) * t230 + (-t20 + t401) * t226, t141 * t84 + t271, -t141 * t82 + t261, t140 * t141, qJ(5) * t21 + t9 * t141 + t243 * t226 + t230 * t418 + t363 * t82, qJ(5) * t20 - t10 * t141 - t226 * t418 + t243 * t230 + t363 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t429, t126 - t378, -t415 - t416, t242 + t399 - t412, 0, 0, 0, 0, 0, t271 - t397, -t164 * t84 + t261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84 * t82, -t82 ^ 2 + t84 ^ 2, t20 + t401, -t21 + t400, -t58, -g(1) * t61 - g(2) * t423 - g(3) * t285 + t10 * t140 - t22 * t84 + t2, t22 * t82 + g(1) * t62 + g(2) * t424 + g(3) * t111 - t299 + (t140 - qJD(6)) * t9;];
tau_reg  = t3;
