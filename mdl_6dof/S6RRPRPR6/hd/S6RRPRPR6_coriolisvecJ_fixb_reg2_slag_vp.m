% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPRPR6_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:42:56
% EndTime: 2019-03-09 10:43:15
% DurationCPUTime: 9.13s
% Computational Cost: add. (14334->609), mult. (42889->777), div. (0->0), fcn. (34103->10), ass. (0->296)
t222 = sin(qJ(4));
t320 = qJD(4) * t222;
t220 = sin(pkin(6));
t226 = cos(qJ(2));
t329 = t220 * t226;
t346 = cos(pkin(11));
t278 = t346 * t329;
t202 = qJD(1) * t278;
t219 = sin(pkin(11));
t223 = sin(qJ(2));
t330 = t220 * t223;
t307 = qJD(1) * t330;
t174 = t219 * t307 - t202;
t334 = t174 * t222;
t405 = t320 + t334;
t384 = (t219 * t226 + t223 * t346) * t220;
t178 = qJD(1) * t384;
t225 = cos(qJ(4));
t347 = cos(pkin(6));
t290 = t347 * qJD(1);
t262 = t290 + qJD(2);
t236 = -t225 * t178 - t222 * t262;
t394 = qJD(6) - t236;
t252 = t225 * t262;
t140 = t178 * t222 - t252;
t169 = qJD(4) + t174;
t221 = sin(qJ(6));
t224 = cos(qJ(6));
t92 = -t224 * t140 + t169 * t221;
t291 = t394 * t92;
t177 = qJD(2) * t384;
t167 = qJD(1) * t177;
t316 = qJD(6) * t224;
t317 = qJD(6) * t221;
t311 = qJD(1) * qJD(2);
t297 = t220 * t311;
t279 = t223 * t297;
t244 = qJD(2) * t202 - t219 * t279;
t91 = -qJD(4) * t236 + t222 * t244;
t42 = -t140 * t316 - t224 * t167 + t169 * t317 - t221 * t91;
t404 = t42 - t291;
t124 = t178 * t221 + t224 * t334;
t319 = qJD(4) * t224;
t269 = t222 * t319 + t124;
t315 = qJD(6) * t225;
t403 = t221 * t315 + t269;
t308 = pkin(1) * t347;
t211 = t226 * t308;
t207 = qJD(1) * t211;
t370 = pkin(8) + qJ(3);
t299 = t370 * t223;
t280 = t220 * t299;
t160 = -qJD(1) * t280 + t207;
t210 = t223 * t308;
t382 = t329 * t370 + t210;
t161 = t382 * qJD(1);
t294 = t346 * t161;
t107 = t219 * t160 + t294;
t402 = t405 * pkin(4) - t222 * qJD(5) - t107;
t205 = qJD(2) * t207;
t238 = (-qJD(2) * t299 + qJD(3) * t226) * t220;
t134 = qJD(1) * t238 + t205;
t146 = -t382 * qJD(2) - qJD(3) * t330;
t135 = t146 * qJD(1);
t68 = t219 * t134 - t346 * t135;
t90 = -qJD(4) * t252 + t178 * t320 - t225 * t244;
t240 = t90 * qJ(5) + qJD(5) * t236 + t68;
t377 = pkin(4) + pkin(10);
t18 = t377 * t91 + t240;
t198 = (-pkin(2) * t226 - pkin(1)) * t220;
t323 = qJD(1) * t198;
t192 = qJD(3) + t323;
t231 = t174 * pkin(3) - t178 * pkin(9) + t192;
t241 = pkin(2) * t347 - t280;
t144 = qJD(2) * pkin(2) + qJD(1) * t241 + t207;
t87 = t219 * t144 + t294;
t75 = pkin(9) * t262 + t87;
t46 = t222 * t75 - t225 * t231;
t326 = qJD(5) + t46;
t327 = -pkin(5) * t236 + t326;
t29 = -t169 * t377 + t327;
t149 = t219 * t161;
t86 = t144 * t346 - t149;
t74 = -pkin(3) * t262 - t86;
t229 = qJ(5) * t236 + t74;
t34 = t140 * t377 + t229;
t6 = t221 * t29 + t224 * t34;
t204 = pkin(2) * t279;
t103 = t167 * pkin(3) - pkin(9) * t244 + t204;
t318 = qJD(4) * t225;
t69 = t134 * t346 + t219 * t135;
t397 = -qJD(4) * t231 - t69;
t21 = t225 * t103 + t397 * t222 - t75 * t318;
t8 = -t90 * pkin(5) - t167 * t377 - t21;
t2 = -qJD(6) * t6 - t221 * t18 + t224 * t8;
t401 = t394 * t6 + t2;
t266 = t221 * t34 - t224 * t29;
t1 = -qJD(6) * t266 + t224 * t18 + t221 * t8;
t400 = t266 * t394 + t1;
t399 = t402 + t169 * (pkin(10) * t222 - qJ(5) * t225);
t108 = t160 * t346 - t149;
t101 = t222 * t108;
t283 = pkin(2) * t307;
t119 = pkin(3) * t178 + pkin(9) * t174 + t283;
t213 = pkin(2) * t219 + pkin(9);
t371 = pkin(5) + t213;
t197 = t371 * t225;
t398 = -qJD(4) * t197 + t101 + (-pkin(5) * t174 - t119) * t225 - t377 * t178;
t125 = t178 * t224 - t221 * t334;
t396 = -t221 * t320 + t125;
t293 = -t222 * t103 + t397 * t225 + t75 * t320;
t395 = t169 * t46 - t293;
t216 = t220 ^ 2;
t298 = t216 * t311;
t393 = -0.2e1 * t298;
t94 = t140 * t221 + t169 * t224;
t392 = t269 * t94;
t391 = t394 * t94;
t376 = pkin(4) * t167;
t17 = -t21 - t376;
t47 = t222 * t231 + t225 * t75;
t40 = -t169 * qJ(5) - t47;
t390 = -t169 * t40 - t17;
t257 = t169 * t47 + t21;
t322 = qJD(2) * t220;
t306 = t223 * t322;
t176 = -qJD(2) * t278 + t219 * t306;
t115 = -t384 * t320 + (qJD(4) * t347 - t176) * t225;
t153 = t222 * t347 + t225 * t384;
t62 = t90 * t153;
t389 = -t115 * t236 - t62;
t286 = t236 * t169;
t85 = t90 * t222;
t388 = -t225 * t286 - t85;
t387 = t91 + t286;
t386 = t174 * t262;
t242 = -t224 * t315 - t396;
t385 = t242 * t394;
t375 = t140 * pkin(5);
t31 = -t40 - t375;
t383 = t31 * t394 + t377 * t90;
t273 = -t221 * t266 - t224 * t6;
t381 = -qJD(6) * t273 + t1 * t221 + t2 * t224;
t380 = t236 ^ 2;
t379 = t169 ^ 2;
t378 = t178 ^ 2;
t228 = qJD(1) ^ 2;
t162 = t167 * qJ(5);
t12 = -t169 * qJD(5) - t162 + t293;
t9 = -pkin(5) * t91 - t12;
t374 = t9 * t221;
t373 = t9 * t224;
t372 = t94 * t92;
t214 = -pkin(2) * t346 - pkin(3);
t251 = -t222 * qJ(5) + t214;
t184 = -t225 * t377 + t251;
t196 = t371 * t222;
t133 = t184 * t224 + t196 * t221;
t369 = qJD(6) * t133 + t399 * t221 + t398 * t224;
t132 = -t184 * t221 + t196 * t224;
t368 = -qJD(6) * t132 + t398 * t221 - t399 * t224;
t367 = -t42 * t222 + t94 * t318;
t45 = t140 * pkin(4) + t229;
t366 = t236 * t45;
t362 = t169 * t92;
t361 = t174 * t94;
t360 = t213 * t90;
t359 = t213 * t91;
t358 = t221 * t90;
t357 = t221 * t94;
t292 = t221 * t167 - t224 * t91;
t43 = qJD(6) * t94 + t292;
t356 = t222 * t43;
t355 = t224 * t42;
t83 = t224 * t90;
t354 = t224 * t92;
t352 = t31 * t169;
t351 = t43 * t221;
t350 = -t140 * t318 - t222 * t91;
t56 = t225 * t108 + t222 * t119;
t48 = -qJ(5) * t178 - t56;
t349 = -pkin(5) * t334 - t371 * t320 + t48;
t333 = t174 * t225;
t348 = (-t318 - t333) * qJ(5) + t402;
t344 = t140 * qJ(5);
t343 = t140 * t236;
t342 = t140 * t174;
t341 = t140 * t178;
t340 = t140 * t213;
t339 = t236 * t178;
t338 = t236 * t213;
t182 = t219 * t330 - t278;
t337 = t167 * t182;
t336 = t167 * t213;
t335 = t169 * t178;
t332 = t178 * t174;
t331 = t216 * t228;
t328 = t222 * t167;
t159 = t211 + t241;
t325 = pkin(8) * t329 + t210;
t173 = qJ(3) * t329 + t325;
t117 = t219 * t159 + t346 * t173;
t105 = pkin(9) * t347 + t117;
t123 = t182 * pkin(3) - pkin(9) * t384 + t198;
t59 = t225 * t105 + t222 * t123;
t324 = t223 ^ 2 - t226 ^ 2;
t321 = qJD(4) * t140;
t314 = qJD(6) * t377;
t313 = t178 * qJD(2);
t310 = t226 * t331;
t309 = t225 * t167 - t405 * t169;
t305 = t213 * t320;
t304 = t213 * t318;
t300 = -t140 ^ 2 + t380;
t296 = t396 * t92;
t295 = t178 * t347;
t58 = -t222 * t105 + t225 * t123;
t55 = t225 * t119 - t101;
t208 = qJD(2) * t211;
t145 = t208 + t238;
t77 = t219 * t145 - t346 * t146;
t289 = t221 * t394;
t288 = t169 * t225;
t285 = t169 * t222;
t282 = pkin(2) * t306;
t281 = t223 * t310;
t277 = t220 * t228 * t347;
t276 = pkin(1) * t393;
t274 = t221 * t6 - t224 * t266;
t52 = -qJ(5) * t182 - t59;
t272 = t403 * t394;
t33 = t153 * pkin(5) - t182 * t377 - t58;
t152 = t222 * t384 - t225 * t347;
t116 = t159 * t346 - t219 * t173;
t104 = -pkin(3) * t347 - t116;
t232 = -t153 * qJ(5) + t104;
t44 = t152 * t377 + t232;
t13 = -t221 * t44 + t224 * t33;
t14 = t221 * t33 + t224 * t44;
t114 = qJD(4) * t153 - t176 * t222;
t265 = t114 * t140 + t152 * t91;
t264 = t152 * t224 - t182 * t221;
t122 = t152 * t221 + t182 * t224;
t263 = t223 * t226 * t298;
t261 = 0.2e1 * t290 + qJD(2);
t120 = pkin(3) * t177 + pkin(9) * t176 + t282;
t78 = t145 * t346 + t219 * t146;
t27 = -t105 * t318 + t225 * t120 - t123 * t320 - t222 * t78;
t259 = t309 - t341;
t258 = -t309 - t341;
t256 = -t289 * t394 - t83;
t180 = -pkin(8) * t279 + t205;
t26 = -t105 * t320 + t222 * t120 + t123 * t318 + t225 * t78;
t254 = t169 * t74 - t336;
t253 = -t169 * t45 + t336;
t250 = -t224 * t394 ^ 2 + t358;
t249 = t140 * t285 - t91 * t225;
t248 = t169 * t288 + t328;
t247 = -t225 * t379 - t328;
t243 = t140 * t169 - t90;
t239 = -t115 * qJ(5) - t153 * qJD(5) + t77;
t188 = t325 * qJD(2);
t235 = t114 * t236 - t115 * t140 + t152 * t90 - t153 * t91;
t234 = t114 * t169 + t140 * t177 + t152 * t167 + t182 * t91;
t233 = t115 * t169 + t153 * t167 - t177 * t236 - t182 * t90;
t19 = -qJ(5) * t177 - qJD(5) * t182 - t26;
t195 = -t225 * pkin(4) + t251;
t193 = -pkin(8) * t330 + t211;
t187 = -pkin(8) * t306 + t208;
t186 = t325 * qJD(1);
t185 = -pkin(8) * t307 + t207;
t181 = qJD(1) * t188;
t171 = t174 ^ 2;
t106 = t140 * t333;
t76 = -pkin(4) * t236 + t344;
t63 = t169 * t177 + t337;
t60 = -t236 * t377 + t344;
t57 = t152 * pkin(4) + t232;
t53 = -pkin(4) * t182 - t58;
t51 = qJD(6) * t264 + t114 * t221 + t177 * t224;
t50 = qJD(6) * t122 - t114 * t224 + t177 * t221;
t49 = -t178 * pkin(4) - t55;
t38 = -pkin(5) * t152 - t52;
t37 = -pkin(4) * t169 + t326;
t36 = t47 - t375;
t30 = pkin(4) * t114 + t239;
t28 = pkin(4) * t91 + t240;
t25 = t114 * t377 + t239;
t24 = -pkin(4) * t177 - t27;
t23 = t221 * t36 + t224 * t60;
t22 = -t221 * t60 + t224 * t36;
t11 = -pkin(5) * t114 - t19;
t10 = t115 * pkin(5) - t177 * t377 - t27;
t4 = -qJD(6) * t14 + t224 * t10 - t221 * t25;
t3 = qJD(6) * t13 + t221 * t10 + t224 * t25;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t263, t324 * t393, t261 * t226 * t322, -0.2e1 * t263, -t261 * t306, 0, -t181 * t347 - t188 * t262 + t223 * t276, -t180 * t347 - t187 * t262 + t226 * t276 (t180 * t226 + t181 * t223 + (-t185 * t226 - t186 * t223) * qJD(2) + (t187 * t226 + t188 * t223 + (-t193 * t226 - t223 * t325) * qJD(2)) * qJD(1)) * t220, t180 * t325 - t181 * t193 - t185 * t188 + t186 * t187, -t178 * t176 + t244 * t384, -t167 * t384 + t176 * t174 - t178 * t177 - t182 * t244, -t176 * t262 + t244 * t347, t174 * t177 + t337, -t167 * t347 - t177 * t262, 0, -t77 * t262 - t68 * t347 + t198 * t167 + t192 * t177 + (qJD(1) * t182 + t174) * t282, -t192 * t176 + 0.2e1 * t178 * t282 + t198 * t244 - t78 * t262 - t69 * t347, -t116 * t244 - t117 * t167 - t78 * t174 + t86 * t176 - t87 * t177 + t77 * t178 - t69 * t182 + t384 * t68, -t68 * t116 + t69 * t117 - t86 * t77 + t87 * t78 + (t192 + t323) * t282, t389, t235, t233, t265, -t234, t63, t104 * t91 + t114 * t74 + t140 * t77 + t152 * t68 + t167 * t58 + t169 * t27 - t177 * t46 + t182 * t21, -t104 * t90 + t115 * t74 + t153 * t68 - t167 * t59 - t169 * t26 - t177 * t47 + t182 * t293 - t236 * t77, -t114 * t47 + t115 * t46 - t140 * t26 + t152 * t293 - t153 * t21 + t236 * t27 + t58 * t90 - t59 * t91, t104 * t68 + t21 * t58 + t26 * t47 - t27 * t46 - t293 * t59 + t74 * t77, t63, -t233, t234, t389, t235, t265, t114 * t40 + t115 * t37 + t12 * t152 + t140 * t19 + t153 * t17 - t236 * t24 + t52 * t91 - t53 * t90, -t114 * t45 - t140 * t30 - t152 * t28 + t167 * t53 + t169 * t24 + t17 * t182 + t177 * t37 - t57 * t91, -t115 * t45 - t12 * t182 - t153 * t28 - t167 * t52 - t169 * t19 - t177 * t40 + t236 * t30 + t57 * t90, t12 * t52 + t17 * t53 + t19 * t40 + t24 * t37 + t28 * t57 + t30 * t45, -t122 * t42 + t51 * t94, -t122 * t43 - t264 * t42 - t50 * t94 - t51 * t92, t115 * t94 - t122 * t90 - t153 * t42 + t394 * t51, -t264 * t43 + t50 * t92, -t115 * t92 - t153 * t43 - t264 * t90 - t394 * t50, t115 * t394 - t62, t11 * t92 - t115 * t266 - t13 * t90 + t153 * t2 - t264 * t9 + t31 * t50 + t38 * t43 + t394 * t4, -t1 * t153 + t11 * t94 - t115 * t6 + t122 * t9 + t14 * t90 - t3 * t394 + t31 * t51 - t38 * t42, t1 * t264 - t122 * t2 + t13 * t42 - t14 * t43 + t266 * t51 - t3 * t92 - t4 * t94 - t50 * t6, t1 * t14 + t11 * t31 + t13 * t2 - t266 * t4 + t3 * t6 + t38 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t281, t324 * t331, -t226 * t277, t281, t223 * t277, 0, -t226 * pkin(8) * t297 + t186 * t262 + (-qJD(2) * t290 + t331) * t223 * pkin(1), pkin(1) * t310 + t185 * t262 - t180, 0, 0, t332, -t171 + t378, t244 + t386, -t332, t313 + (t295 - t177) * qJD(1), 0, t107 * t262 - t174 * t283 - t192 * t178 - t68, t108 * t262 + t192 * t174 - t178 * t283 - t69 (t87 - t107) * t178 + (t108 - t86) * t174 + (-t219 * t167 - t244 * t346) * pkin(2), t86 * t107 - t87 * t108 + (-t192 * t307 + t219 * t69 - t346 * t68) * pkin(2), t388 (-t90 - t342) * t225 + t222 * t286 + t350, t248 + t339, t249, -t258, -t335, -t107 * t140 + t46 * t178 + t214 * t91 - t68 * t225 + (-t55 - t304) * t169 + t254 * t222, t107 * t236 + t47 * t178 - t214 * t90 + t68 * t222 + (t56 + t305) * t169 + t254 * t225, t140 * t56 - t236 * t55 + (t174 * t46 - t359 - t293 + (t46 - t338) * qJD(4)) * t225 + (-t174 * t47 - t360 - t21 + (-t47 + t340) * qJD(4)) * t222, -t74 * t107 + t68 * t214 + t46 * t55 - t47 * t56 + (-t293 * t225 - t21 * t222 + (-t222 * t47 + t225 * t46) * qJD(4)) * t213, -t335, t247 - t339, t258, t388, -t106 + (-t90 - t321) * t225 + (-t91 + t286) * t222, t249, -t140 * t48 + t236 * t49 + (t174 * t37 - t359 - t12 + (t37 - t338) * qJD(4)) * t225 + (t174 * t40 - t360 + t17 + (t40 + t340) * qJD(4)) * t222, -t178 * t37 - t195 * t91 + t225 * t28 + (-t49 + t304) * t169 - t348 * t140 + t253 * t222, t178 * t40 + t195 * t90 - t222 * t28 + (t48 - t305) * t169 + t348 * t236 + t253 * t225, t28 * t195 - t37 * t49 - t40 * t48 + t348 * t45 + (-t12 * t225 + t17 * t222 + (t222 * t40 + t225 * t37) * qJD(4)) * t213, t42 * t221 * t225 + t242 * t94, t392 + (t351 + t355 + (t354 + t357) * qJD(6)) * t225 + t296 (t358 + t361) * t225 + t385 + t367, t43 * t224 * t225 - t403 * t92, -t356 + (t83 - t362) * t225 + t272, t288 * t394 - t85, -t124 * t31 - t132 * t90 + t197 * t43 + t349 * t92 + (-t31 * t319 + t2) * t222 - t369 * t394 + (-t169 * t266 - t31 * t317 + t373) * t225, -t125 * t31 + t133 * t90 - t197 * t42 + t349 * t94 + (qJD(4) * t221 * t31 - t1) * t222 + t368 * t394 + (-t169 * t6 - t31 * t316 - t374) * t225, t124 * t6 - t125 * t266 + t132 * t42 - t133 * t43 + t369 * t94 + t368 * t92 - t273 * t320 + (qJD(6) * t274 - t1 * t224 + t2 * t221) * t225, t1 * t133 + t2 * t132 + t9 * t197 + t266 * t369 + t31 * t349 - t368 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313 + (t295 + t177) * qJD(1), t244 - t386, -t171 - t378, t174 * t87 + t178 * t86 + t204, 0, 0, 0, 0, 0, 0, t259, t247 + t339 (t90 - t342) * t225 - t236 * t285 + t350, -t74 * t178 + t395 * t222 + t257 * t225, 0, 0, 0, 0, 0, 0, -t106 + (t90 - t321) * t225 - t387 * t222, -t259, t248 - t339, -t45 * t178 + t390 * t225 + (t169 * t37 - t12) * t222, 0, 0, 0, 0, 0, 0, t356 + (t83 + t362) * t225 + t272 (-t358 + t361) * t225 - t385 + t367, -t392 + (t351 - t355 + (t354 - t357) * qJD(6)) * t225 + t296, -t124 * t266 - t125 * t6 + (qJD(4) * t274 + t9) * t222 + (t352 - t381) * t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t343, t300, t243, t343, -t387, t167, t236 * t74 + t257, t140 * t74 - t395, 0, 0, t167, -t243, t387, -t343, t300, t343, pkin(4) * t90 - qJ(5) * t91 - (-t40 - t47) * t236 + (t37 - t326) * t140, t140 * t76 - t257 - t366 - 0.2e1 * t376, -t140 * t45 + t169 * t326 - t236 * t76 - t12 + t162, -t17 * pkin(4) - t12 * qJ(5) - t326 * t40 - t37 * t47 - t45 * t76, -t289 * t94 - t355 (-t43 - t391) * t224 + (t42 + t291) * t221, t94 * t140 + t256, t224 * t291 + t351, -t92 * t140 + t250, t394 * t140, qJ(5) * t43 - t266 * t140 + t374 + t327 * t92 + (t221 * t314 - t22) * t394 + t383 * t224, -qJ(5) * t42 - t6 * t140 + t373 + t327 * t94 + (t224 * t314 + t23) * t394 - t383 * t221, t22 * t94 + t23 * t92 + (t236 * t6 - t377 * t42 - t2 + (t377 * t92 - t6) * qJD(6)) * t224 + (t236 * t266 + t377 * t43 - t1 + (-t377 * t94 - t266) * qJD(6)) * t221, t9 * qJ(5) + t22 * t266 - t6 * t23 + t327 * t31 - t377 * t381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t243, t167 + t343, -t379 - t380, -t366 - t390, 0, 0, 0, 0, 0, 0, t256 - t362, -t169 * t94 + t250, t404 * t224 + (-t43 + t391) * t221, t400 * t221 + t401 * t224 - t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, -t92 ^ 2 + t94 ^ 2, -t404, -t372, -t292 + (-qJD(6) + t394) * t94, -t90, -t31 * t94 + t401, t31 * t92 - t400, 0, 0;];
tauc_reg  = t5;
