% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x30]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRPR6_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:42:55
% EndTime: 2019-03-09 10:43:02
% DurationCPUTime: 2.38s
% Computational Cost: add. (3323->273), mult. (9523->500), div. (0->0), fcn. (9321->10), ass. (0->161)
t115 = cos(qJ(4));
t196 = pkin(4) + pkin(10);
t202 = t196 * t115;
t112 = sin(qJ(4));
t114 = cos(qJ(6));
t164 = qJD(4) * t114;
t144 = t112 * t164;
t111 = sin(qJ(6));
t160 = qJD(6) * t115;
t149 = t111 * t160;
t84 = t144 + t149;
t108 = sin(pkin(6));
t107 = sin(pkin(11));
t109 = cos(pkin(11));
t113 = sin(qJ(2));
t116 = cos(qJ(2));
t132 = t107 * t116 + t109 * t113;
t126 = t132 * t108;
t72 = qJD(2) * t126;
t173 = t108 * t116;
t174 = t108 * t113;
t76 = t107 * t174 - t109 * t173;
t201 = -t72 * qJ(5) - t76 * qJD(5);
t102 = t108 ^ 2;
t167 = qJD(2) * t113;
t200 = t102 * t167;
t106 = t115 ^ 2;
t139 = qJD(4) * (t112 ^ 2 - t106);
t103 = t111 ^ 2;
t169 = -t114 ^ 2 + t103;
t138 = t169 * qJD(6);
t100 = qJD(4) * t112;
t148 = t114 * t160;
t110 = cos(pkin(6));
t125 = t112 * t126;
t166 = qJD(2) * t116;
t146 = t108 * t166;
t147 = t108 * t167;
t73 = -t107 * t147 + t109 * t146;
t43 = -qJD(4) * t125 + (t110 * qJD(4) + t73) * t115;
t177 = t43 * t115;
t63 = t110 * t112 + t115 * t126;
t199 = -t111 * (t63 * t100 - t177) + t63 * t148;
t193 = pkin(1) * t110;
t157 = t113 * t193;
t189 = pkin(8) + qJ(3);
t71 = t189 * t173 + t157;
t163 = qJD(5) * t115;
t171 = t112 * qJ(5);
t97 = t107 * pkin(2) + pkin(9);
t194 = pkin(5) + t97;
t89 = t194 * t115;
t198 = qJD(4) * (t171 + t202) - qJD(6) * t89 - t163;
t197 = 0.2e1 * qJD(5);
t195 = t72 * pkin(4);
t192 = t115 * pkin(4);
t42 = qJD(4) * t63 + t73 * t112;
t101 = qJD(4) * t115;
t142 = t189 * t113;
t94 = t166 * t193;
t58 = t94 + (-qJD(2) * t142 + qJD(3) * t116) * t108;
t59 = -t71 * qJD(2) - qJD(3) * t174;
t31 = t107 * t59 + t109 * t58;
t64 = (pkin(1) * t116 + pkin(2)) * t110 - t108 * t142;
t45 = t107 * t64 + t109 * t71;
t36 = t110 * pkin(9) + t45;
t93 = pkin(2) * t147;
t47 = t72 * pkin(3) - t73 * pkin(9) + t93;
t151 = -pkin(2) * t116 - pkin(1);
t50 = t76 * pkin(3) + (-t132 * pkin(9) + t151) * t108;
t10 = t36 * t100 - t50 * t101 - t112 * t47 - t115 * t31;
t7 = t10 + t201;
t4 = -t42 * pkin(5) - t7;
t191 = t4 * t111;
t190 = t4 * t114;
t62 = -t110 * t115 + t125;
t48 = t76 * t111 - t62 * t114;
t19 = -t48 * qJD(6) + t42 * t111 + t72 * t114;
t49 = t62 * t111 + t76 * t114;
t188 = t49 * t101 + t19 * t112;
t187 = t112 * t50 + t115 * t36;
t186 = t84 * t63;
t18 = qJD(6) * t49 + t72 * t111 - t42 * t114;
t185 = t112 * t18;
t184 = t112 * t42;
t183 = t112 * t63;
t182 = t112 * t97;
t181 = t115 * t62;
t180 = t115 * t97;
t179 = t19 * t114;
t178 = t43 * t114;
t176 = qJ(5) * t115;
t175 = qJD(4) * t48;
t172 = t111 * t196;
t170 = t114 * t196;
t165 = qJD(4) * t111;
t162 = qJD(6) * t111;
t161 = qJD(6) * t114;
t159 = qJD(6) * t196;
t98 = -t109 * pkin(2) - pkin(3);
t158 = 0.2e1 * qJD(4) * t98;
t156 = t76 * t182;
t155 = t72 * t182;
t154 = t76 * t180;
t153 = t72 * t180;
t152 = t97 * t100;
t150 = t102 * t166;
t145 = t112 * t101;
t143 = t111 * t161;
t30 = t107 * t58 - t109 * t59;
t44 = -t107 * t71 + t109 * t64;
t141 = -t112 * t36 + t115 * t50;
t140 = pkin(4) * t100 - t112 * qJD(5);
t136 = t111 * t144;
t20 = -t76 * qJ(5) - t187;
t90 = t97 * t101;
t135 = pkin(5) * t101 + t90;
t14 = t63 * pkin(5) - t196 * t76 - t141;
t35 = -t110 * pkin(3) - t44;
t124 = -t63 * qJ(5) + t35;
t16 = t196 * t62 + t124;
t6 = t111 * t14 + t114 * t16;
t134 = t111 * t48 - t114 * t49;
t130 = t98 - t171;
t77 = t130 - t202;
t88 = t194 * t112;
t54 = t111 * t88 + t114 * t77;
t11 = -t50 * t100 - t36 * t101 - t112 * t31 + t115 * t47;
t128 = t76 * t101 + t112 * t72;
t127 = -t43 * t111 - t63 * t161;
t81 = t194 * t100;
t123 = -t81 + (t112 * t196 - t176) * qJD(6);
t122 = -t43 * qJ(5) - t63 * qJD(5) + t30;
t121 = t163 + (-t171 - t192) * qJD(4);
t120 = t43 * pkin(5) - t196 * t72 - t11;
t119 = -(pkin(10) * t112 - t176) * qJD(4) - t140;
t118 = -t196 * t42 - t122;
t95 = 0.2e1 * t145;
t87 = t130 - t192;
t86 = -t111 * t100 + t148;
t85 = t111 * t101 + t112 * t161;
t83 = t114 * t101 - t112 * t162;
t82 = qJ(5) * t101 - t140;
t80 = (-pkin(8) * t173 - t157) * qJD(2);
t79 = pkin(8) * t147 - t94;
t53 = -t111 * t77 + t114 * t88;
t51 = t76 * t100 - t115 * t72;
t27 = 0.2e1 * t63 * t43;
t26 = -t54 * qJD(6) + t111 * t119 + t114 * t135;
t25 = -t111 * t135 + t114 * t119 - t88 * t161 + t77 * t162;
t24 = -t63 * t162 + t178;
t23 = t63 * t101 + t43 * t112;
t22 = t62 * pkin(4) + t124;
t21 = -t76 * pkin(4) - t141;
t15 = -t62 * pkin(5) - t20;
t12 = t42 * pkin(4) + t122;
t8 = -t11 - t195;
t5 = -t111 * t16 + t114 * t14;
t2 = -t6 * qJD(6) + t111 * t118 + t114 * t120;
t1 = -t111 * t120 + t114 * t118 - t14 * t161 + t16 * t162;
t3 = [0, 0, 0, 0.2e1 * t113 * t150, 0.2e1 * (-t113 ^ 2 + t116 ^ 2) * t102 * qJD(2), 0.2e1 * t110 * t146, -0.2e1 * t110 * t147, 0, -0.2e1 * pkin(1) * t200 + 0.2e1 * t80 * t110, -0.2e1 * pkin(1) * t150 + 0.2e1 * t79 * t110, 0.2e1 * t30 * t126 - 0.2e1 * t31 * t76 - 0.2e1 * t44 * t73 - 0.2e1 * t45 * t72, 0.2e1 * pkin(2) * t151 * t200 - 0.2e1 * t44 * t30 + 0.2e1 * t45 * t31, t27, -0.2e1 * t63 * t42 - 0.2e1 * t43 * t62, 0.2e1 * t43 * t76 + 0.2e1 * t63 * t72, -0.2e1 * t42 * t76 - 0.2e1 * t62 * t72, 0.2e1 * t76 * t72, 0.2e1 * t11 * t76 + 0.2e1 * t141 * t72 + 0.2e1 * t30 * t62 + 0.2e1 * t35 * t42, 0.2e1 * t10 * t76 - 0.2e1 * t187 * t72 + 0.2e1 * t30 * t63 + 0.2e1 * t35 * t43, 0.2e1 * t20 * t42 + 0.2e1 * t21 * t43 + 0.2e1 * t7 * t62 + 0.2e1 * t8 * t63, -0.2e1 * t12 * t62 + 0.2e1 * t21 * t72 - 0.2e1 * t22 * t42 + 0.2e1 * t8 * t76, -0.2e1 * t12 * t63 - 0.2e1 * t20 * t72 - 0.2e1 * t22 * t43 - 0.2e1 * t7 * t76, 0.2e1 * t22 * t12 + 0.2e1 * t20 * t7 + 0.2e1 * t21 * t8, 0.2e1 * t49 * t19, -0.2e1 * t49 * t18 - 0.2e1 * t19 * t48, 0.2e1 * t19 * t63 + 0.2e1 * t49 * t43, -0.2e1 * t18 * t63 - 0.2e1 * t48 * t43, t27, 0.2e1 * t15 * t18 + 0.2e1 * t2 * t63 + 0.2e1 * t4 * t48 + 0.2e1 * t5 * t43, 0.2e1 * t1 * t63 + 0.2e1 * t15 * t19 + 0.2e1 * t4 * t49 - 0.2e1 * t6 * t43; 0, 0, 0, 0, 0, t146, -t147, 0, t80, t79 (-t107 * t72 - t109 * t73) * pkin(2) (t107 * t31 - t109 * t30) * pkin(2), t23, -t184 + t177 + (-t181 - t183) * qJD(4), t128, -t51, 0, -t155 - t30 * t115 + t98 * t42 + (t112 * t35 - t154) * qJD(4), -t153 + t30 * t112 + t98 * t43 + (t115 * t35 + t156) * qJD(4) (-t42 * t97 - t7) * t115 + (t43 * t97 + t8) * t112 + ((t63 * t97 + t21) * t115 + (t62 * t97 + t20) * t112) * qJD(4), t155 + t12 * t115 - t87 * t42 + t82 * t62 + (-t112 * t22 + t154) * qJD(4), t153 - t12 * t112 - t87 * t43 + t82 * t63 + (-t115 * t22 - t156) * qJD(4), t12 * t87 - t22 * t82 + (t8 * t112 - t7 * t115 + (t112 * t20 + t115 * t21) * qJD(4)) * t97, -t49 * t148 + (t49 * t100 - t115 * t19) * t111, -t134 * t100 + (t111 * t18 - t179 + (t111 * t49 + t114 * t48) * qJD(6)) * t115, t188 - t199, -t185 + (-t175 - t178) * t115 + t186, t23, t89 * t18 + t26 * t63 + t53 * t43 - t81 * t48 + (-t15 * t164 + t2) * t112 + (qJD(4) * t5 - t15 * t162 + t190) * t115, t89 * t19 + t25 * t63 - t54 * t43 - t81 * t49 + (t15 * t165 + t1) * t112 + (-qJD(4) * t6 - t15 * t161 - t191) * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -0.2e1 * t139, 0, 0, 0, t112 * t158, t115 * t158, 0, -0.2e1 * t87 * t100 - 0.2e1 * t82 * t115, -0.2e1 * t87 * t101 + 0.2e1 * t82 * t112, -0.2e1 * t87 * t82, -0.2e1 * t103 * t145 + 0.2e1 * t106 * t143, -0.2e1 * t106 * t138 - 0.4e1 * t115 * t136, 0.2e1 * t111 * t139 - 0.2e1 * t112 * t148, 0.2e1 * t112 * t149 + 0.2e1 * t114 * t139, t95, 0.2e1 * (-t89 * t164 + t26) * t112 + 0.2e1 * (qJD(4) * t53 - t81 * t114 - t89 * t162) * t115, 0.2e1 * (t89 * t165 + t25) * t112 + 0.2e1 * (-qJD(4) * t54 + t81 * t111 - t89 * t161) * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, 0, 0, 0, 0, -t51, -t128, -t184 - t177 + (-t181 + t183) * qJD(4), t51, t128, -t7 * t112 - t8 * t115 + (t112 * t21 - t115 * t20) * qJD(4), 0, 0, 0, 0, 0, t185 + (t175 - t178) * t115 + t186, t188 + t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t42, t72, t11, t10, -t43 * pkin(4) - qJ(5) * t42 - qJD(5) * t62, -t11 - 0.2e1 * t195, -t7 - t201, -t8 * pkin(4) - t7 * qJ(5) - t20 * qJD(5), -t49 * t162 + t179, qJD(6) * t134 - t19 * t111 - t114 * t18, t24, t127, 0, -t43 * t170 + qJ(5) * t18 + qJD(5) * t48 + t191 + (t114 * t15 + t63 * t172) * qJD(6), t43 * t172 + qJ(5) * t19 + qJD(5) * t49 + t190 + (-t111 * t15 + t63 * t170) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, -t100, 0, -t90, t152, t121, t90, -t152, t121 * t97, t115 * t138 + t136, -t169 * t100 + 0.4e1 * t115 * t143, t83, -t85, 0, t123 * t111 - t198 * t114, t198 * t111 + t123 * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, -t101, 0, t100, t101, t82, 0, 0, 0, 0, 0, t85, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, qJ(5) * t197, -0.2e1 * t143, 0.2e1 * t138, 0, 0, 0, 0.2e1 * qJ(5) * t161 + 0.2e1 * qJD(5) * t111, -0.2e1 * qJ(5) * t162 + 0.2e1 * qJD(5) * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, t72, 0, t8, 0, 0, 0, 0, 0, t24, t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, 0, t90, 0, 0, 0, 0, 0, t83, -t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t18, t43, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, t84, t101, t26, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, -t161, 0, t111 * t159, t114 * t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, -t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
