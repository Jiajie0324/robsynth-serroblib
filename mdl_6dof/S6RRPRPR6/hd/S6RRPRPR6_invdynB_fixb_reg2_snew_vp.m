% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 14:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:27:04
% EndTime: 2019-05-06 14:28:27
% DurationCPUTime: 84.64s
% Computational Cost: add. (260961->999), mult. (690857->1556), div. (0->0), fcn. (547572->12), ass. (0->733)
t1194 = sin(qJ(1));
t1198 = cos(qJ(1));
t1188 = sin(pkin(6));
t1190 = cos(pkin(6));
t1193 = sin(qJ(2));
t1197 = cos(qJ(2));
t1187 = sin(pkin(11));
t1189 = cos(pkin(11));
t1310 = qJDD(1) * t1193;
t1347 = qJD(1) * t1197;
t1149 = (qJD(2) * t1347 + t1310) * t1188;
t1318 = t1188 * t1193;
t1306 = qJD(1) * t1318;
t1311 = qJDD(1) * t1188;
t1150 = -qJD(2) * t1306 + t1197 * t1311;
t1095 = t1189 * t1149 + t1187 * t1150;
t1317 = t1188 * t1197;
t1305 = qJD(1) * t1317;
t1142 = t1187 * t1305 + t1189 * t1306;
t1178 = qJD(1) * t1190 + qJD(2);
t1192 = sin(qJ(4));
t1196 = cos(qJ(4));
t1111 = t1142 * t1192 - t1196 * t1178;
t1177 = t1190 * qJDD(1) + qJDD(2);
t1295 = t1111 * qJD(4) - t1196 * t1095 - t1192 * t1177;
t1140 = t1187 * t1306 - t1189 * t1305;
t1136 = qJD(4) + t1140;
t1333 = t1111 * t1136;
t1384 = -t1333 - t1295;
t1135 = t1136 ^ 2;
t1113 = t1142 * t1196 + t1178 * t1192;
t1373 = t1113 ^ 2;
t1036 = t1373 + t1135;
t1289 = t1149 * t1187 - t1189 * t1150;
t1093 = qJDD(4) + t1289;
t1332 = t1113 * t1111;
t1385 = t1332 + t1093;
t1404 = t1196 * t1385;
t933 = t1036 * t1192 - t1404;
t838 = t1187 * t933 - t1189 * t1384;
t840 = t1187 * t1384 + t1189 * t933;
t1261 = t1193 * t840 + t1197 * t838;
t1408 = t1192 * t1385;
t930 = t1036 * t1196 + t1408;
t739 = t1188 * t930 + t1190 * t1261;
t767 = t1193 * t838 - t1197 * t840;
t683 = -t1194 * t767 + t1198 * t739;
t1478 = pkin(7) * t683;
t684 = t1194 * t739 + t1198 * t767;
t1477 = pkin(7) * t684;
t737 = t1188 * t1261 - t1190 * t930;
t1476 = pkin(8) * (t1188 * t737 + t1190 * t739);
t1475 = pkin(1) * t737;
t1474 = pkin(1) * t739;
t1383 = -t1333 + t1295;
t1073 = -t1373 + t1135;
t996 = -t1332 + t1093;
t1432 = t1196 * t996;
t945 = t1073 * t1192 - t1432;
t846 = t1187 * t945 - t1189 * t1383;
t850 = t1187 * t1383 + t1189 * t945;
t1259 = t1193 * t850 + t1197 * t846;
t1433 = t1192 * t996;
t940 = t1073 * t1196 + t1433;
t742 = t1188 * t940 + t1190 * t1259;
t776 = t1193 * t846 - t1197 * t850;
t1473 = t1194 * t742 + t1198 * t776;
t1472 = -t1194 * t776 + t1198 * t742;
t1470 = pkin(8) * t767;
t1465 = t1188 * t1259 - t1190 * t940;
t1464 = qJ(3) * t838;
t1463 = -pkin(2) * t838 - pkin(9) * t933;
t1462 = -pkin(2) * t930 - qJ(3) * t840;
t1460 = pkin(3) * t930;
t1459 = pkin(9) * t930;
t1374 = t1111 ^ 2;
t1072 = t1374 - t1135;
t947 = t1072 * t1196 - t1408;
t1457 = t1187 * t947;
t943 = t1072 * t1192 + t1404;
t1454 = t1188 * t943;
t1453 = t1189 * t947;
t1450 = t1190 * t943;
t1021 = -t1135 - t1374;
t918 = t1021 * t1192 + t1432;
t1449 = pkin(2) * t918;
t1448 = pkin(3) * t918;
t1447 = pkin(9) * t918;
t921 = -t1021 * t1196 + t1433;
t1446 = pkin(9) * t921;
t1445 = t1187 * t921;
t1444 = t1188 * t918;
t1443 = t1189 * t921;
t1442 = t1190 * t918;
t1227 = (-t1111 * t1196 + t1113 * t1192) * t1136;
t1377 = t1093 * t1187 + t1189 * t1227;
t1380 = -t1189 * t1093 + t1187 * t1227;
t1399 = -t1193 * t1380 + t1197 * t1377;
t1226 = (-t1111 * t1192 - t1113 * t1196) * t1136;
t1398 = t1193 * t1377 + t1197 * t1380;
t1418 = -t1188 * t1226 + t1190 * t1398;
t1441 = -t1194 * t1418 + t1198 * t1399;
t1290 = -t1192 * t1095 + t1196 * t1177;
t1028 = qJD(4) * t1113 - t1290;
t1330 = t1136 * t1196;
t1229 = t1028 * t1192 + t1111 * t1330;
t1302 = t1187 * t1332;
t1376 = t1189 * t1229 - t1302;
t1301 = t1189 * t1332;
t1379 = t1187 * t1229 + t1301;
t1401 = -t1193 * t1379 + t1197 * t1376;
t1331 = t1136 * t1192;
t1286 = -t1196 * t1028 + t1111 * t1331;
t1400 = t1193 * t1376 + t1197 * t1379;
t1419 = -t1188 * t1286 + t1190 * t1400;
t1440 = -t1194 * t1419 + t1198 * t1401;
t1285 = -t1113 * t1331 - t1196 * t1295;
t1375 = t1189 * t1285 + t1302;
t1378 = t1187 * t1285 - t1301;
t1403 = -t1193 * t1378 + t1197 * t1375;
t1287 = t1113 * t1330 - t1192 * t1295;
t1402 = t1193 * t1375 + t1197 * t1378;
t1420 = -t1188 * t1287 + t1190 * t1402;
t1439 = -t1194 * t1420 + t1198 * t1403;
t1438 = t1194 * t1399 + t1198 * t1418;
t1437 = t1194 * t1401 + t1198 * t1419;
t1436 = t1194 * t1403 + t1198 * t1420;
t1009 = t1374 + t1373;
t1435 = pkin(3) * t1009;
t1434 = qJ(5) * t1384;
t1431 = t1009 * t1187;
t1430 = t1009 * t1189;
t1423 = t1188 * t1402 + t1190 * t1287;
t1422 = t1188 * t1400 + t1190 * t1286;
t1421 = t1188 * t1398 + t1190 * t1226;
t1382 = -t1373 + t1374;
t1415 = t1187 * t1382;
t1413 = t1189 * t1382;
t1191 = sin(qJ(6));
t1022 = qJDD(6) - t1295;
t1195 = cos(qJ(6));
t1064 = -t1195 * t1111 + t1136 * t1191;
t1066 = t1111 * t1191 + t1136 * t1195;
t988 = t1066 * t1064;
t1397 = -t988 + t1022;
t1411 = t1191 * t1397;
t1410 = t1192 * t1383;
t1409 = t1192 * t1384;
t1407 = t1195 * t1397;
t1406 = t1196 * t1383;
t1405 = t1196 * t1384;
t1328 = t1142 * t1178;
t1052 = t1289 + t1328;
t1184 = t1188 ^ 2;
t1199 = qJD(1) ^ 2;
t1348 = qJD(1) * t1178;
t1396 = t1184 * (-t1190 * t1199 + t1348);
t1329 = t1140 * t1142;
t1282 = t1177 - t1329;
t1395 = t1187 * t1282;
t1391 = t1189 * t1282;
t1158 = t1178 * t1306;
t1120 = t1150 - t1158;
t1390 = t1190 * t1120;
t1124 = t1178 * t1140;
t1386 = -t1124 + t1095;
t1159 = t1178 * t1305;
t1117 = t1159 + t1149;
t1172 = g(1) * t1198 + g(2) * t1194;
t1204 = -pkin(1) * t1199 + pkin(8) * t1311 - t1172;
t1171 = g(1) * t1194 - t1198 * g(2);
t1364 = pkin(8) * t1188;
t1146 = qJDD(1) * pkin(1) + t1199 * t1364 + t1171;
t1327 = t1146 * t1190;
t1081 = -g(3) * t1318 + t1193 * t1327 + t1197 * t1204;
t1225 = pkin(2) * t1178 - qJ(3) * t1306;
t1186 = t1197 ^ 2;
t1320 = t1184 * t1199;
t1299 = t1186 * t1320;
t1010 = -pkin(2) * t1299 + t1150 * qJ(3) - t1178 * t1225 + t1081;
t1202 = t1193 * t1204 - t1197 * t1327;
t1315 = t1193 * t1199;
t1298 = t1184 * t1315;
t1201 = -t1149 * qJ(3) + t1177 * pkin(2) + (pkin(2) * t1298 + (qJ(3) * t1348 - g(3)) * t1188) * t1197 - t1202;
t901 = -0.2e1 * qJD(3) * t1140 + t1189 * t1010 + t1187 * t1201;
t1381 = t1028 * pkin(4) - t1434;
t1062 = t1064 ^ 2;
t1063 = t1066 ^ 2;
t1105 = qJD(6) + t1113;
t1102 = t1105 ^ 2;
t1138 = t1140 ^ 2;
t1139 = t1142 ^ 2;
t1372 = t1178 ^ 2;
t1371 = -2 * qJD(5);
t1370 = pkin(4) + pkin(10);
t1369 = pkin(2) * t1188;
t1368 = pkin(2) * t1190;
t1367 = pkin(3) * t1187;
t1366 = pkin(4) * t1192;
t1365 = pkin(4) * t1196;
t1089 = pkin(3) * t1140 - pkin(9) * t1142;
t861 = -pkin(3) * t1372 + pkin(9) * t1177 - t1089 * t1140 + t901;
t1125 = t1190 * g(3) + t1188 * t1146;
t1042 = t1150 * pkin(2) + qJ(3) * t1299 - t1225 * t1306 - qJDD(3) + t1125;
t915 = pkin(3) * t1052 - t1386 * pkin(9) - t1042;
t798 = t1192 * t915 + t1196 * t861;
t1363 = -t1192 * t861 + t1196 * t915;
t1362 = t1093 * qJ(5);
t1069 = pkin(5) * t1113 - pkin(10) * t1136;
t1047 = pkin(4) * t1111 - qJ(5) * t1113;
t1233 = t1135 * pkin(4) + t1111 * t1047 - t798;
t735 = t1362 - t1028 * pkin(5) - t1374 * pkin(10) + ((2 * qJD(5)) + t1069) * t1136 - t1233;
t1361 = t1191 * t735;
t917 = t988 + t1022;
t1360 = t1191 * t917;
t1292 = t1187 * t1010 - t1189 * t1201;
t1232 = -t1177 * pkin(3) - pkin(9) * t1372 + t1292;
t860 = (0.2e1 * qJD(3) + t1089) * t1142 + t1232;
t1359 = t1192 * t860;
t1345 = qJD(3) * t1142;
t900 = t1292 + 0.2e1 * t1345;
t805 = t1187 * t901 - t1189 * t900;
t1356 = t1193 * t805;
t1355 = t1195 * t735;
t1354 = t1195 * t917;
t1353 = t1196 * t860;
t1076 = t1136 * t1113;
t966 = t1028 + t1076;
t1352 = t1196 * t966;
t1349 = t1197 * t805;
t1344 = qJD(5) * t1113;
t1341 = t1042 * t1187;
t1340 = t1042 * t1189;
t1339 = t1064 * t1105;
t1085 = -t1177 - t1329;
t1338 = t1085 * t1187;
t1337 = t1085 * t1189;
t1335 = t1105 * t1191;
t1334 = t1105 * t1195;
t1170 = t1197 * t1298;
t1147 = t1170 + t1177;
t1326 = t1147 * t1193;
t1325 = t1147 * t1197;
t1148 = -t1170 + t1177;
t1324 = t1148 * t1193;
t1323 = t1148 * t1197;
t1322 = t1178 * t1187;
t1321 = t1178 * t1189;
t1319 = t1188 * t1177;
t1316 = t1193 * t1125;
t1314 = t1197 * t1125;
t1185 = t1193 ^ 2;
t1312 = t1185 + t1186;
t1309 = -t1063 - t1102;
t1308 = -pkin(3) * t1189 - pkin(2);
t1307 = t1188 * t1348;
t1304 = t1192 * t988;
t1303 = t1196 * t988;
t1300 = t1185 * t1320;
t1297 = t1188 * t1329;
t1296 = t1190 * t1329;
t927 = -t1064 * qJD(6) + t1191 * t1028 + t1195 * t1093;
t1294 = qJ(5) * t1192 + pkin(3);
t1293 = pkin(4) * t1136 + t1371;
t806 = t1187 * t900 + t1189 * t901;
t713 = -t1192 * t1363 + t1196 * t798;
t1291 = -t1195 * t1028 + t1191 * t1093;
t1129 = -t1171 * t1194 - t1198 * t1172;
t1169 = qJDD(1) * t1198 - t1194 * t1199;
t1288 = -pkin(7) * t1169 - g(3) * t1194;
t1137 = -t1372 - t1300;
t1086 = -t1137 * t1193 - t1323;
t1284 = pkin(8) * t1086 - t1316;
t1154 = -t1372 - t1299;
t1098 = t1154 * t1197 - t1326;
t1283 = pkin(8) * t1098 + t1314;
t1230 = -t1093 * pkin(4) - t1135 * qJ(5) + t1113 * t1047 + qJDD(5) - t1363;
t724 = -pkin(5) * t1383 - pkin(10) * t996 + t1230;
t1203 = t860 + t1381;
t740 = -t1374 * pkin(5) + t1028 * pkin(10) + (-t1069 + t1293) * t1113 + t1203;
t672 = t1191 * t740 - t1195 * t724;
t673 = t1191 * t724 + t1195 * t740;
t617 = t1191 * t673 - t1195 * t672;
t618 = t1191 * t672 + t1195 * t673;
t712 = t1192 * t798 + t1196 * t1363;
t613 = t1192 * t617 + t1196 * t735;
t581 = t1187 * t613 - t1189 * t618;
t582 = t1187 * t618 + t1189 * t613;
t1281 = t1193 * t582 + t1197 * t581;
t1205 = t1136 * t1371 + t1233;
t763 = -t1205 + t1362;
t690 = t1192 * t1230 + t1196 * t763;
t780 = t1113 * t1293 + t1203;
t651 = t1187 * t690 - t1189 * t780;
t652 = t1187 * t780 + t1189 * t690;
t1280 = t1193 * t652 + t1197 * t651;
t1207 = (-qJD(6) + t1105) * t1066 - t1291;
t871 = t927 + t1339;
t791 = t1191 * t1207 - t1195 * t871;
t936 = -t1062 - t1063;
t750 = t1192 * t791 + t1196 * t936;
t793 = t1191 * t871 + t1195 * t1207;
t691 = t1187 * t750 - t1189 * t793;
t692 = t1187 * t793 + t1189 * t750;
t1279 = t1193 * t692 + t1197 * t691;
t693 = t1187 * t713 - t1189 * t860;
t694 = t1187 * t860 + t1189 * t713;
t1278 = t1193 * t694 + t1197 * t693;
t1231 = t927 - t1339;
t867 = (qJD(6) + t1105) * t1066 + t1291;
t790 = t1191 * t867 - t1195 * t1231;
t987 = t1063 - t1062;
t761 = -t1192 * t790 + t1196 * t987;
t792 = t1191 * t1231 + t1195 * t867;
t696 = t1187 * t761 + t1189 * t792;
t697 = -t1187 * t792 + t1189 * t761;
t1277 = t1193 * t697 + t1197 * t696;
t955 = -t1102 - t1062;
t823 = t1191 * t955 + t1407;
t770 = t1192 * t823 + t1196 * t867;
t824 = t1195 * t955 - t1411;
t710 = t1187 * t770 - t1189 * t824;
t711 = t1187 * t824 + t1189 * t770;
t1276 = t1193 * t711 + t1197 * t710;
t835 = t1195 * t1309 - t1360;
t773 = t1192 * t835 + t1196 * t1231;
t836 = -t1191 * t1309 - t1354;
t720 = t1187 * t773 - t1189 * t836;
t721 = t1187 * t836 + t1189 * t773;
t1275 = t1193 * t721 + t1197 * t720;
t1011 = t1062 - t1102;
t855 = -t1011 * t1191 - t1354;
t783 = -t1192 * t855 + t1196 * t1207;
t857 = -t1011 * t1195 + t1360;
t726 = t1187 * t783 + t1189 * t857;
t728 = -t1187 * t857 + t1189 * t783;
t1274 = t1193 * t728 + t1197 * t726;
t1012 = -t1063 + t1102;
t854 = -t1012 * t1195 - t1411;
t784 = -t1192 * t854 + t1196 * t871;
t856 = t1012 * t1191 - t1407;
t727 = t1187 * t784 + t1189 * t856;
t729 = -t1187 * t856 + t1189 * t784;
t1273 = t1193 * t729 + t1197 * t727;
t926 = -qJD(6) * t1066 - t1291;
t862 = -t1064 * t1335 - t1195 * t926;
t817 = -t1192 * t862 - t1303;
t863 = -t1064 * t1334 + t1191 * t926;
t755 = t1187 * t817 + t1189 * t863;
t757 = -t1187 * t863 + t1189 * t817;
t1272 = t1193 * t757 + t1197 * t755;
t864 = -t1066 * t1334 - t1191 * t927;
t818 = -t1192 * t864 + t1303;
t865 = t1066 * t1335 - t1195 * t927;
t756 = t1187 * t818 + t1189 * t865;
t758 = -t1187 * t865 + t1189 * t818;
t1271 = t1193 * t758 + t1197 * t756;
t928 = (t1064 * t1191 + t1066 * t1195) * t1105;
t874 = t1022 * t1196 - t1192 * t928;
t929 = (t1064 * t1195 - t1066 * t1191) * t1105;
t803 = t1187 * t874 + t1189 * t929;
t804 = -t1187 * t929 + t1189 * t874;
t1270 = t1193 * t804 + t1197 * t803;
t1269 = t1193 * t806 + t1349;
t967 = (-qJD(4) + t1136) * t1113 + t1290;
t879 = t1196 * t967 - t1410;
t819 = t1187 * t879 + t1430;
t821 = t1189 * t879 - t1431;
t1268 = t1193 * t821 + t1197 * t819;
t969 = -t1028 + t1076;
t882 = t1196 * t969 - t1410;
t820 = t1187 * t882 + t1430;
t822 = t1189 * t882 - t1431;
t1267 = t1193 * t822 + t1197 * t820;
t968 = (-qJD(4) - t1136) * t1113 + t1290;
t880 = t1196 * t968 - t1409;
t825 = t1187 * t880 + t1413;
t827 = t1189 * t880 - t1415;
t1266 = t1193 * t827 + t1197 * t825;
t881 = -t1352 - t1409;
t826 = t1187 * t881 + t1413;
t828 = t1189 * t881 - t1415;
t1265 = t1193 * t828 + t1197 * t826;
t831 = t1189 * t968 - t1445;
t833 = -t1187 * t968 - t1443;
t1264 = t1193 * t833 + t1197 * t831;
t832 = t1189 * t966 + t1445;
t834 = -t1187 * t966 + t1443;
t1263 = t1193 * t834 + t1197 * t832;
t847 = t1189 * t969 - t1457;
t851 = -t1187 * t969 - t1453;
t1258 = t1193 * t851 + t1197 * t847;
t848 = -t1189 * t967 + t1457;
t852 = t1187 * t967 + t1453;
t1257 = t1193 * t852 + t1197 * t848;
t977 = -t1052 * t1187 + t1189 * t1386;
t979 = -t1052 * t1189 - t1187 * t1386;
t1250 = t1193 * t979 + t1197 * t977;
t1056 = t1124 + t1095;
t1228 = -t1289 + t1328;
t978 = -t1056 * t1189 + t1187 * t1228;
t980 = t1056 * t1187 + t1189 * t1228;
t1249 = t1193 * t980 + t1197 * t978;
t1082 = -t1372 - t1138;
t1003 = t1082 * t1187 + t1391;
t1004 = t1082 * t1189 - t1395;
t1247 = t1003 * t1197 + t1004 * t1193;
t1103 = -t1139 - t1372;
t1018 = t1103 * t1189 + t1338;
t1019 = -t1103 * t1187 + t1337;
t1246 = t1018 * t1197 + t1019 * t1193;
t1122 = -t1139 + t1372;
t1030 = t1122 * t1189 + t1395;
t1032 = -t1122 * t1187 + t1391;
t1245 = t1030 * t1197 + t1032 * t1193;
t1121 = t1138 - t1372;
t1031 = t1121 * t1187 - t1337;
t1033 = t1121 * t1189 + t1338;
t1244 = t1031 * t1197 + t1033 * t1193;
t1043 = t1140 * t1322 - t1189 * t1289;
t1044 = t1140 * t1321 + t1187 * t1289;
t1243 = t1043 * t1197 + t1044 * t1193;
t1045 = t1095 * t1187 + t1142 * t1321;
t1046 = t1095 * t1189 - t1142 * t1322;
t1242 = t1045 * t1197 + t1046 * t1193;
t1067 = (-t1140 * t1187 - t1142 * t1189) * t1178;
t1068 = (-t1140 * t1189 + t1142 * t1187) * t1178;
t1241 = t1067 * t1197 + t1068 * t1193;
t1080 = g(3) * t1317 + t1202;
t1240 = -t1197 * t1080 + t1193 * t1081;
t1001 = t1080 * t1193 + t1081 * t1197;
t1239 = t1117 * t1197 + t1120 * t1193;
t1118 = -t1159 + t1149;
t1119 = t1150 + t1158;
t1238 = -t1118 * t1197 + t1119 * t1193;
t1237 = t1137 * t1197 - t1324;
t1152 = t1372 - t1300;
t1236 = t1152 * t1197 + t1326;
t1235 = t1154 * t1193 + t1325;
t1153 = -t1372 + t1299;
t1234 = t1153 * t1193 + t1323;
t1128 = t1171 * t1198 - t1172 * t1194;
t583 = pkin(5) * t735 - t1370 * t618;
t586 = pkin(5) * t617 - qJ(5) * t618;
t612 = t1192 * t735 - t1196 * t617;
t561 = -pkin(9) * t612 - t1192 * t583 + t1196 * t586;
t567 = -pkin(3) * t612 - qJ(5) * t735 + t1370 * t617;
t546 = -pkin(2) * t612 + qJ(3) * t582 + t1187 * t561 + t1189 * t567;
t548 = -qJ(3) * t581 - t1187 * t567 + t1189 * t561;
t563 = -t1193 * t581 + t1197 * t582;
t1223 = pkin(8) * t563 + t1193 * t548 + t1197 * t546;
t606 = pkin(5) * t936 - t1370 * t793 - t618;
t701 = pkin(5) * t791 - qJ(5) * t793;
t749 = t1192 * t936 - t1196 * t791;
t588 = -pkin(9) * t749 - t1192 * t606 + t1196 * t701;
t598 = -pkin(3) * t749 - qJ(5) * t936 + t1370 * t791 + t617;
t565 = -pkin(2) * t749 + qJ(3) * t692 + t1187 * t588 + t1189 * t598;
t566 = -qJ(3) * t691 - t1187 * t598 + t1189 * t588;
t631 = -t1193 * t691 + t1197 * t692;
t1222 = pkin(8) * t631 + t1193 * t566 + t1197 * t565;
t643 = pkin(5) * t823 - qJ(5) * t824 - t672;
t656 = pkin(5) * t867 - t1370 * t824 + t1355;
t769 = t1192 * t867 - t1196 * t823;
t603 = -pkin(9) * t769 - t1192 * t656 + t1196 * t643;
t639 = -pkin(3) * t769 - qJ(5) * t867 + t1370 * t823 - t1361;
t571 = -pkin(2) * t769 + qJ(3) * t711 + t1187 * t603 + t1189 * t639;
t575 = -qJ(3) * t710 - t1187 * t639 + t1189 * t603;
t649 = -t1193 * t710 + t1197 * t711;
t1221 = pkin(8) * t649 + t1193 * t575 + t1197 * t571;
t646 = pkin(5) * t835 - qJ(5) * t836 - t673;
t659 = pkin(5) * t1231 - t1370 * t836 - t1361;
t772 = t1192 * t1231 - t1196 * t835;
t605 = -pkin(9) * t772 - t1192 * t659 + t1196 * t646;
t641 = -pkin(3) * t772 - qJ(5) * t1231 + t1370 * t835 - t1355;
t572 = -pkin(2) * t772 + qJ(3) * t721 + t1187 * t605 + t1189 * t641;
t577 = -qJ(3) * t720 - t1187 * t641 + t1189 * t605;
t654 = -t1193 * t720 + t1197 * t721;
t1220 = pkin(8) * t654 + t1193 * t577 + t1197 * t572;
t689 = t1192 * t763 - t1196 * t1230;
t627 = -pkin(3) * t689 + pkin(4) * t1230 - qJ(5) * t763;
t635 = -pkin(9) * t689 + (-qJ(5) * t1196 + t1366) * t780;
t573 = -pkin(2) * t689 + qJ(3) * t652 + t1187 * t635 + t1189 * t627;
t584 = -qJ(3) * t651 - t1187 * t627 + t1189 * t635;
t614 = -t1193 * t651 + t1197 * t652;
t1219 = pkin(8) * t614 + t1193 * t584 + t1197 * t573;
t611 = qJ(3) * t694 + (-pkin(9) * t1187 + t1308) * t712;
t621 = -qJ(3) * t693 + (-pkin(9) * t1189 + t1367) * t712;
t633 = -t1193 * t693 + t1197 * t694;
t1218 = pkin(8) * t633 + t1193 * t621 + t1197 * t611;
t745 = pkin(4) * t1009 + t763;
t748 = qJ(5) * t1009 + t1230;
t875 = t1192 * t967 + t1406;
t664 = -pkin(9) * t875 - t1192 * t745 + t1196 * t748;
t794 = -pkin(3) * t875 - pkin(4) * t1383 - qJ(5) * t967;
t624 = -pkin(2) * t875 + qJ(3) * t821 + t1187 * t664 + t1189 * t794;
t626 = -qJ(3) * t819 - t1187 * t794 + t1189 * t664;
t746 = -t1193 * t819 + t1197 * t821;
t1217 = pkin(8) * t746 + t1193 * t626 + t1197 * t624;
t752 = -0.2e1 * t1344 + (t966 + t1076) * pkin(4) + t1203;
t702 = qJ(5) * t1352 - t1192 * t752 + t1447;
t708 = pkin(4) * t996 + qJ(5) * t1021 - t1230 + t1448;
t630 = qJ(3) * t834 + t1187 * t702 + t1189 * t708 + t1449;
t640 = -qJ(3) * t832 - t1187 * t708 + t1189 * t702;
t765 = -t1193 * t832 + t1197 * t834;
t1216 = pkin(8) * t765 + t1193 * t640 + t1197 * t630;
t1133 = -0.2e1 * t1345;
t751 = -pkin(4) * t1076 - t1142 * t1089 + t1133 - t1232 + 0.2e1 * t1344 - t1381 + t1434;
t703 = t1196 * t751 - t1366 * t1384 - t1459;
t709 = -t1460 - pkin(4) * t1036 + (-t1093 - t1385) * qJ(5) + t1205;
t632 = t1187 * t703 + t1189 * t709 + t1462;
t642 = -t1187 * t709 + t1189 * t703 + t1464;
t1215 = t1193 * t642 + t1197 * t632 + t1470;
t878 = t1192 * t969 + t1406;
t695 = -pkin(9) * t878 - t712;
t648 = qJ(3) * t822 + t1187 * t695 + t1308 * t878;
t653 = -qJ(3) * t820 + t1189 * t695 + t1367 * t878;
t747 = -t1193 * t820 + t1197 * t822;
t1214 = pkin(8) * t747 + t1193 * t653 + t1197 * t648;
t759 = -t1363 - t1448;
t799 = t1359 - t1447;
t670 = qJ(3) * t833 + t1187 * t799 + t1189 * t759 - t1449;
t680 = -qJ(3) * t831 - t1187 * t759 + t1189 * t799;
t764 = -t1193 * t831 + t1197 * t833;
t1213 = pkin(8) * t764 + t1193 * t680 + t1197 * t670;
t762 = t798 + t1460;
t802 = t1353 + t1459;
t674 = t1187 * t802 + t1189 * t762 - t1462;
t686 = -t1187 * t762 + t1189 * t802 - t1464;
t1212 = t1193 * t686 + t1197 * t674 - t1470;
t1061 = -t1138 - t1139;
t771 = -pkin(2) * t1061 + qJ(3) * t980 + t806;
t789 = -qJ(3) * t978 - t805;
t887 = -t1193 * t978 + t1197 * t980;
t1211 = pkin(8) * t887 + t1193 * t789 + t1197 * t771;
t892 = -pkin(2) * t1052 + qJ(3) * t1004 + t1340;
t914 = -t1003 * t1193 + t1004 * t1197;
t937 = -qJ(3) * t1003 - t1341;
t1210 = pkin(8) * t914 + t1193 * t937 + t1197 * t892;
t898 = -pkin(2) * t1386 + qJ(3) * t1019 - t1341;
t935 = -t1018 * t1193 + t1019 * t1197;
t948 = -qJ(3) * t1018 - t1340;
t1209 = pkin(8) * t935 + t1193 * t948 + t1197 * t898;
t1058 = t1118 * t1193 + t1119 * t1197;
t1208 = pkin(8) * t1058 + t1001;
t730 = t1197 * t806 - t1356;
t795 = pkin(2) * t1042 + qJ(3) * t806;
t1206 = pkin(8) * t730 - qJ(3) * t1356 + t1197 * t795;
t1183 = t1188 * t1184;
t1168 = qJDD(1) * t1194 + t1198 * t1199;
t1161 = t1190 * t1177;
t1156 = t1312 * t1320;
t1155 = (t1185 - t1186) * t1320;
t1151 = -pkin(7) * t1168 + g(3) * t1198;
t1123 = t1312 * t1307;
t1116 = (t1310 + (qJD(2) + t1178) * t1347) * t1188;
t1115 = t1149 * t1197 - t1185 * t1307;
t1110 = -t1150 * t1193 - t1186 * t1307;
t1097 = t1153 * t1197 - t1324;
t1096 = -t1152 * t1193 + t1325;
t1092 = t1139 - t1138;
t1079 = (t1183 * t1197 * t1199 + t1117 * t1190) * t1193;
t1078 = (-t1183 * t1315 + t1390) * t1197;
t1059 = -t1117 * t1193 + t1120 * t1197;
t1041 = t1188 * t1120 + t1190 * t1235;
t1040 = -t1188 * t1119 + t1190 * t1234;
t1039 = -t1188 * t1118 + t1190 * t1236;
t1038 = t1188 * t1235 - t1390;
t1035 = -t1188 * t1116 + t1190 * t1237;
t1034 = t1190 * t1116 + t1188 * t1237;
t1027 = -t1188 * t1155 + t1190 * t1239;
t1026 = t1188 * t1156 + t1190 * t1238;
t1025 = -t1190 * t1156 + t1188 * t1238;
t990 = -t1041 * t1194 + t1098 * t1198;
t989 = t1041 * t1198 + t1098 * t1194;
t986 = -t1067 * t1193 + t1068 * t1197;
t985 = -t1035 * t1194 + t1086 * t1198;
t984 = t1035 * t1198 + t1086 * t1194;
t982 = t1188 * t1125 + t1190 * t1240;
t981 = -t1190 * t1125 + t1188 * t1240;
t976 = t1190 * t1241 - t1319;
t957 = -t1045 * t1193 + t1046 * t1197;
t956 = -t1043 * t1193 + t1044 * t1197;
t954 = -t1026 * t1194 + t1058 * t1198;
t953 = t1026 * t1198 + t1058 * t1194;
t939 = -t1031 * t1193 + t1033 * t1197;
t938 = -t1030 * t1193 + t1032 * t1197;
t934 = -t1316 + (-t1038 * t1188 - t1041 * t1190) * pkin(8);
t925 = -t1314 + (-t1034 * t1188 - t1035 * t1190) * pkin(8);
t924 = t1190 * t1242 - t1297;
t923 = t1190 * t1243 + t1297;
t922 = -pkin(1) * t1038 + t1188 * t1080 + t1190 * t1283;
t912 = -pkin(1) * t1034 + t1188 * t1081 + t1190 * t1284;
t897 = -t1188 * t1228 + t1190 * t1244;
t896 = -t1188 * t1056 + t1190 * t1245;
t895 = pkin(8) * t1001 * t1190 - pkin(1) * t981;
t894 = t1001 * t1198 - t1194 * t982;
t893 = t1001 * t1194 + t1198 * t982;
t891 = -t1188 * t1386 + t1190 * t1246;
t890 = t1188 * t1246 + t1190 * t1386;
t889 = -pkin(1) * t1025 + t1190 * t1208;
t888 = (-t1188 * t981 - t1190 * t982) * pkin(8);
t886 = -t1193 * t977 + t1197 * t979;
t885 = -t1188 * t1052 + t1190 * t1247;
t884 = t1190 * t1052 + t1188 * t1247;
t883 = (-t1025 * t1188 - t1026 * t1190) * pkin(8) - t1240;
t877 = -t1192 * t966 + t1405;
t876 = t1192 * t968 + t1405;
t873 = t1022 * t1192 + t1196 * t928;
t853 = pkin(2) * t1018 - t901;
t844 = pkin(2) * t1003 + t1133 - t1292;
t841 = -t1188 * t1092 + t1190 * t1250;
t830 = -t1188 * t1061 + t1190 * t1249;
t829 = t1190 * t1061 + t1188 * t1249;
t816 = t1196 * t864 + t1304;
t815 = t1196 * t862 - t1304;
t810 = -t1194 * t891 + t1198 * t935;
t809 = t1194 * t935 + t1198 * t891;
t801 = -t1194 * t885 + t1198 * t914;
t800 = t1194 * t914 + t1198 * t885;
t782 = t1192 * t871 + t1196 * t854;
t781 = t1192 * t1207 + t1196 * t855;
t779 = -t1193 * t848 + t1197 * t852;
t778 = -t1193 * t847 + t1197 * t851;
t775 = -t1194 * t830 + t1198 * t887;
t774 = t1194 * t887 + t1198 * t830;
t760 = t1192 * t987 + t1196 * t790;
t754 = -t1193 * t826 + t1197 * t828;
t753 = -t1193 * t825 + t1197 * t827;
t744 = t1190 * t1257 - t1454;
t743 = t1190 * t1258 + t1454;
t734 = t1190 * t1263 + t1444;
t733 = t1190 * t1264 - t1444;
t732 = t1188 * t1263 - t1442;
t731 = t1188 * t1264 + t1442;
t725 = -t1193 * t898 + t1197 * t948 + (-t1188 * t890 - t1190 * t891) * pkin(8);
t723 = -pkin(3) * t1384 + t1359 - t1463;
t722 = -t1193 * t803 + t1197 * t804;
t719 = t1188 * t1042 + t1190 * t1269;
t718 = -t1190 * t1042 + t1188 * t1269;
t717 = pkin(2) * t831 + pkin(3) * t968 - t1353 - t1446;
t716 = -t1193 * t892 + t1197 * t937 + (-t1188 * t884 - t1190 * t885) * pkin(8);
t715 = -t1188 * t877 + t1190 * t1265;
t714 = -t1188 * t876 + t1190 * t1266;
t707 = -t1188 * t878 + t1190 * t1267;
t706 = -t1188 * t875 + t1190 * t1268;
t705 = t1188 * t1267 + t1190 * t878;
t704 = t1188 * t1268 + t1190 * t875;
t700 = -pkin(1) * t890 - t1188 * t853 + t1190 * t1209;
t699 = -pkin(1) * t884 - t1188 * t844 + t1190 * t1210;
t698 = -t1188 * t873 + t1190 * t1270;
t688 = -t1193 * t756 + t1197 * t758;
t687 = -t1193 * t755 + t1197 * t757;
t681 = t1192 * t751 + (pkin(3) + t1365) * t1384 + t1463;
t679 = pkin(2) * t832 + t1196 * t752 + t1294 * t966 + t1446;
t678 = -t1194 * t734 + t1198 * t765;
t677 = -t1194 * t733 + t1198 * t764;
t676 = t1194 * t765 + t1198 * t734;
t675 = t1194 * t764 + t1198 * t733;
t669 = pkin(2) * t820 + pkin(9) * t882 + t1435 + t713;
t668 = -t1193 * t727 + t1197 * t729;
t667 = -t1193 * t726 + t1197 * t728;
t666 = -t1188 * t816 + t1190 * t1271;
t665 = -t1188 * t815 + t1190 * t1272;
t663 = -t1194 * t707 + t1198 * t747;
t662 = -t1194 * t706 + t1198 * t746;
t661 = t1194 * t747 + t1198 * t707;
t660 = t1194 * t746 + t1198 * t706;
t658 = -t1194 * t719 + t1198 * t730;
t657 = t1194 * t730 + t1198 * t719;
t655 = -t1193 * t771 + t1197 * t789 + (-t1188 * t829 - t1190 * t830) * pkin(8);
t650 = -pkin(1) * t829 + t1190 * t1211 - t1369 * t978;
t647 = pkin(2) * t819 + pkin(9) * t879 + t1192 * t748 + t1196 * t745 + t1435;
t645 = -t1188 * t782 + t1190 * t1273;
t644 = -t1188 * t781 + t1190 * t1274;
t638 = -t1193 * t696 + t1197 * t697;
t637 = -t1188 * t772 + t1190 * t1275;
t636 = t1188 * t1275 + t1190 * t772;
t634 = pkin(2) * t693 - pkin(3) * t860 + pkin(9) * t713;
t629 = -t1188 * t769 + t1190 * t1276;
t628 = t1188 * t1276 + t1190 * t769;
t625 = -qJ(3) * t1349 - t1193 * t795 + (-t1188 * t718 - t1190 * t719) * pkin(8);
t623 = -t1188 * t760 + t1190 * t1277;
t622 = -pkin(1) * t718 + t1190 * t1206 - t1369 * t805;
t620 = -t1188 * t749 + t1190 * t1279;
t619 = t1188 * t1279 + t1190 * t749;
t616 = -t1188 * t712 + t1190 * t1278;
t615 = t1188 * t1278 + t1190 * t712;
t610 = -t1194 * t637 + t1198 * t654;
t609 = t1194 * t654 + t1198 * t637;
t608 = -t1194 * t629 + t1198 * t649;
t607 = t1194 * t649 + t1198 * t629;
t604 = -t1193 * t674 + t1197 * t686 - t1476;
t602 = -t1193 * t670 + t1197 * t680 + (-t1188 * t731 - t1190 * t733) * pkin(8);
t601 = pkin(2) * t651 + pkin(9) * t690 + (-t1294 - t1365) * t780;
t600 = -t1188 * t689 + t1190 * t1280;
t599 = t1188 * t1280 + t1190 * t689;
t597 = -t1188 * t723 + t1190 * t1212 - t1475;
t596 = -pkin(1) * t731 - t1188 * t717 + t1190 * t1213;
t595 = -t1194 * t620 + t1198 * t631;
t594 = t1194 * t631 + t1198 * t620;
t593 = pkin(2) * t720 - pkin(3) * t836 + pkin(9) * t773 + t1192 * t646 + t1196 * t659;
t592 = -t1194 * t616 + t1198 * t633;
t591 = t1194 * t633 + t1198 * t616;
t590 = -t1193 * t648 + t1197 * t653 + (-t1188 * t705 - t1190 * t707) * pkin(8);
t589 = pkin(2) * t710 - pkin(3) * t824 + pkin(9) * t770 + t1192 * t643 + t1196 * t656;
t587 = -t1193 * t632 + t1197 * t642 + t1476;
t585 = -t1193 * t630 + t1197 * t640 + (-t1188 * t732 - t1190 * t734) * pkin(8);
t580 = -pkin(1) * t705 - t1188 * t669 + t1190 * t1214;
t579 = -t1193 * t624 + t1197 * t626 + (-t1188 * t704 - t1190 * t706) * pkin(8);
t578 = -t1188 * t681 + t1190 * t1215 + t1475;
t576 = -pkin(1) * t732 - t1188 * t679 + t1190 * t1216;
t574 = pkin(2) * t691 - pkin(3) * t793 + pkin(9) * t750 + t1192 * t701 + t1196 * t606;
t570 = -t1194 * t600 + t1198 * t614;
t569 = t1194 * t614 + t1198 * t600;
t568 = -pkin(1) * t704 - t1188 * t647 + t1190 * t1217;
t564 = -t1193 * t611 + t1197 * t621 + (-t1188 * t615 - t1190 * t616) * pkin(8);
t562 = -pkin(1) * t615 - t1188 * t634 + t1190 * t1218;
t560 = -t1188 * t612 + t1190 * t1281;
t559 = t1188 * t1281 + t1190 * t612;
t558 = -t1193 * t572 + t1197 * t577 + (-t1188 * t636 - t1190 * t637) * pkin(8);
t557 = -t1193 * t571 + t1197 * t575 + (-t1188 * t628 - t1190 * t629) * pkin(8);
t556 = -t1193 * t573 + t1197 * t584 + (-t1188 * t599 - t1190 * t600) * pkin(8);
t555 = -pkin(1) * t636 - t1188 * t593 + t1190 * t1220;
t554 = -pkin(1) * t628 - t1188 * t589 + t1190 * t1221;
t553 = -pkin(1) * t599 - t1188 * t601 + t1190 * t1219;
t552 = pkin(2) * t581 - pkin(3) * t618 + pkin(9) * t613 + t1192 * t586 + t1196 * t583;
t551 = -t1193 * t565 + t1197 * t566 + (-t1188 * t619 - t1190 * t620) * pkin(8);
t550 = -t1194 * t560 + t1198 * t563;
t549 = t1194 * t563 + t1198 * t560;
t547 = -pkin(1) * t619 - t1188 * t574 + t1190 * t1222;
t545 = -t1193 * t546 + t1197 * t548 + (-t1188 * t559 - t1190 * t560) * pkin(8);
t544 = -pkin(1) * t559 - t1188 * t552 + t1190 * t1223;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1168, -t1169, 0, t1129, 0, 0, 0, 0, 0, 0, t990, t985, t954, t894, 0, 0, 0, 0, 0, 0, t801, t810, t775, t658, 0, 0, 0, 0, 0, 0, t677, -t684, t663, t592, 0, 0, 0, 0, 0, 0, t662, t678, t684, t570, 0, 0, 0, 0, 0, 0, t608, t610, t595, t550; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1169, -t1168, 0, t1128, 0, 0, 0, 0, 0, 0, t989, t984, t953, t893, 0, 0, 0, 0, 0, 0, t800, t809, t774, t657, 0, 0, 0, 0, 0, 0, t675, t683, t661, t591, 0, 0, 0, 0, 0, 0, t660, t676, -t683, t569, 0, 0, 0, 0, 0, 0, t607, t609, t594, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1038, t1034, t1025, t981, 0, 0, 0, 0, 0, 0, t884, t890, t829, t718, 0, 0, 0, 0, 0, 0, t731, t737, t705, t615, 0, 0, 0, 0, 0, 0, t704, t732, -t737, t599, 0, 0, 0, 0, 0, 0, t628, t636, t619, t559; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1169, 0, -t1168, 0, t1288, -t1151, -t1128, -pkin(7) * t1128, -t1079 * t1194 + t1115 * t1198, -t1027 * t1194 + t1059 * t1198, -t1039 * t1194 + t1096 * t1198, -t1078 * t1194 + t1110 * t1198, -t1040 * t1194 + t1097 * t1198, t1123 * t1198 + t1194 * t1319, -pkin(7) * t989 - t1194 * t922 + t1198 * t934, -pkin(7) * t984 - t1194 * t912 + t1198 * t925, -pkin(7) * t953 - t1194 * t889 + t1198 * t883, -pkin(7) * t893 - t1194 * t895 + t1198 * t888, -t1194 * t924 + t1198 * t957, -t1194 * t841 + t1198 * t886, -t1194 * t896 + t1198 * t938, -t1194 * t923 + t1198 * t956, -t1194 * t897 + t1198 * t939, -t1194 * t976 + t1198 * t986, -pkin(7) * t800 - t1194 * t699 + t1198 * t716, -pkin(7) * t809 - t1194 * t700 + t1198 * t725, -pkin(7) * t774 - t1194 * t650 + t1198 * t655, -pkin(7) * t657 - t1194 * t622 + t1198 * t625, t1439, -t1194 * t714 + t1198 * t753, t1473, t1440, -t1194 * t744 + t1198 * t779, t1441, -pkin(7) * t675 - t1194 * t596 + t1198 * t602, -t1194 * t597 + t1198 * t604 - t1478, -pkin(7) * t661 - t1194 * t580 + t1198 * t590, -pkin(7) * t591 - t1194 * t562 + t1198 * t564, t1441, -t1473, -t1194 * t743 + t1198 * t778, t1439, -t1194 * t715 + t1198 * t754, t1440, -pkin(7) * t660 - t1194 * t568 + t1198 * t579, -pkin(7) * t676 - t1194 * t576 + t1198 * t585, -t1194 * t578 + t1198 * t587 + t1478, -pkin(7) * t569 - t1194 * t553 + t1198 * t556, -t1194 * t666 + t1198 * t688, -t1194 * t623 + t1198 * t638, -t1194 * t645 + t1198 * t668, -t1194 * t665 + t1198 * t687, -t1194 * t644 + t1198 * t667, -t1194 * t698 + t1198 * t722, -pkin(7) * t607 - t1194 * t554 + t1198 * t557, -pkin(7) * t609 - t1194 * t555 + t1198 * t558, -pkin(7) * t594 - t1194 * t547 + t1198 * t551, -pkin(7) * t549 - t1194 * t544 + t1198 * t545; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1168, 0, t1169, 0, t1151, t1288, t1129, pkin(7) * t1129, t1079 * t1198 + t1115 * t1194, t1027 * t1198 + t1059 * t1194, t1039 * t1198 + t1096 * t1194, t1078 * t1198 + t1110 * t1194, t1040 * t1198 + t1097 * t1194, t1123 * t1194 - t1198 * t1319, pkin(7) * t990 + t1194 * t934 + t1198 * t922, pkin(7) * t985 + t1194 * t925 + t1198 * t912, pkin(7) * t954 + t1194 * t883 + t1198 * t889, pkin(7) * t894 + t1194 * t888 + t1198 * t895, t1194 * t957 + t1198 * t924, t1194 * t886 + t1198 * t841, t1194 * t938 + t1198 * t896, t1194 * t956 + t1198 * t923, t1194 * t939 + t1198 * t897, t1194 * t986 + t1198 * t976, pkin(7) * t801 + t1194 * t716 + t1198 * t699, pkin(7) * t810 + t1194 * t725 + t1198 * t700, pkin(7) * t775 + t1194 * t655 + t1198 * t650, pkin(7) * t658 + t1194 * t625 + t1198 * t622, t1436, t1194 * t753 + t1198 * t714, -t1472, t1437, t1194 * t779 + t1198 * t744, t1438, pkin(7) * t677 + t1194 * t602 + t1198 * t596, t1194 * t604 + t1198 * t597 - t1477, pkin(7) * t663 + t1194 * t590 + t1198 * t580, pkin(7) * t592 + t1194 * t564 + t1198 * t562, t1438, t1472, t1194 * t778 + t1198 * t743, t1436, t1194 * t754 + t1198 * t715, t1437, pkin(7) * t662 + t1194 * t579 + t1198 * t568, pkin(7) * t678 + t1194 * t585 + t1198 * t576, t1194 * t587 + t1198 * t578 + t1477, pkin(7) * t570 + t1194 * t556 + t1198 * t553, t1194 * t688 + t1198 * t666, t1194 * t638 + t1198 * t623, t1194 * t668 + t1198 * t645, t1194 * t687 + t1198 * t665, t1194 * t667 + t1198 * t644, t1194 * t722 + t1198 * t698, pkin(7) * t608 + t1194 * t557 + t1198 * t554, pkin(7) * t610 + t1194 * t558 + t1198 * t555, pkin(7) * t595 + t1194 * t551 + t1198 * t547, pkin(7) * t550 + t1194 * t545 + t1198 * t544; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1171, t1172, 0, 0, (t1149 * t1188 + t1197 * t1396) * t1193, t1190 * t1155 + t1188 * t1239, t1190 * t1118 + t1188 * t1236, (t1150 * t1188 - t1193 * t1396) * t1197, t1190 * t1119 + t1188 * t1234, t1161, pkin(1) * t1041 - t1190 * t1080 + t1188 * t1283, pkin(1) * t1035 - t1190 * t1081 + t1188 * t1284, pkin(1) * t1026 + t1188 * t1208, pkin(1) * t982 + t1001 * t1364, t1188 * t1242 + t1296, t1190 * t1092 + t1188 * t1250, t1190 * t1056 + t1188 * t1245, t1188 * t1243 - t1296, t1188 * t1244 + t1190 * t1228, t1188 * t1241 + t1161, pkin(1) * t885 + t1188 * t1210 + t1190 * t844, pkin(1) * t891 + t1188 * t1209 + t1190 * t853, pkin(1) * t830 + t1188 * t1211 + t1368 * t978, pkin(1) * t719 + t1188 * t1206 + t1368 * t805, t1423, t1188 * t1266 + t1190 * t876, -t1465, t1422, t1188 * t1257 + t1450, t1421, pkin(1) * t733 + t1188 * t1213 + t1190 * t717, t1188 * t1212 + t1190 * t723 + t1474, pkin(1) * t707 + t1188 * t1214 + t1190 * t669, pkin(1) * t616 + t1188 * t1218 + t1190 * t634, t1421, t1465, t1188 * t1258 - t1450, t1423, t1188 * t1265 + t1190 * t877, t1422, pkin(1) * t706 + t1188 * t1217 + t1190 * t647, pkin(1) * t734 + t1188 * t1216 + t1190 * t679, t1188 * t1215 + t1190 * t681 - t1474, pkin(1) * t600 + t1188 * t1219 + t1190 * t601, t1188 * t1271 + t1190 * t816, t1188 * t1277 + t1190 * t760, t1188 * t1273 + t1190 * t782, t1188 * t1272 + t1190 * t815, t1188 * t1274 + t1190 * t781, t1188 * t1270 + t1190 * t873, pkin(1) * t629 + t1188 * t1221 + t1190 * t589, pkin(1) * t637 + t1188 * t1220 + t1190 * t593, pkin(1) * t620 + t1188 * t1222 + t1190 * t574, pkin(1) * t560 + t1188 * t1223 + t1190 * t552;];
tauB_reg  = t1;
