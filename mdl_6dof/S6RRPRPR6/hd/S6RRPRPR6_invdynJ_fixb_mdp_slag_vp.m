% Calculate vector of inverse dynamics joint torques for
% S6RRPRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRPR6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRPR6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR6_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRPRPR6_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:43:22
% EndTime: 2019-03-09 10:43:39
% DurationCPUTime: 13.97s
% Computational Cost: add. (9146->701), mult. (25917->907), div. (0->0), fcn. (21319->12), ass. (0->316)
t659 = sin(qJ(4));
t794 = qJD(4) * t659;
t657 = sin(pkin(6));
t660 = sin(qJ(2));
t839 = sin(pkin(11));
t763 = t660 * t839;
t739 = t657 * t763;
t711 = qJD(1) * t739;
t664 = cos(qJ(2));
t840 = cos(pkin(11));
t761 = t664 * t840;
t735 = qJD(1) * t761;
t602 = t657 * t735 - t711;
t816 = t602 * t659;
t870 = -t794 + t816;
t624 = -t660 * t840 - t664 * t839;
t685 = qJD(1) * t624;
t605 = t657 * t685;
t663 = cos(qJ(4));
t841 = cos(pkin(6));
t758 = t841 * qJD(1);
t715 = t758 + qJD(2);
t575 = -t663 * t605 + t659 * t715;
t572 = qJD(6) + t575;
t654 = t657 ^ 2;
t869 = 0.2e1 * pkin(1) * t654;
t749 = t841 * qJDD(1);
t710 = t749 + qJDD(2);
t861 = qJD(2) * t711 + (-qJD(2) * t735 + qJDD(1) * t624) * t657;
t866 = -qJD(4) * t715 + t861;
t491 = -t605 * t794 - t659 * t710 + t663 * t866;
t573 = -t605 * t659 - t663 * t715;
t596 = qJD(4) - t602;
t823 = t573 * t596;
t868 = t491 - t823;
t658 = sin(qJ(6));
t662 = cos(qJ(6));
t807 = t659 * t662;
t545 = -t602 * t807 - t605 * t658;
t867 = t662 * t794 + t545;
t762 = t664 * t841;
t646 = pkin(1) * t762;
t642 = qJD(1) * t646;
t842 = pkin(8) + qJ(3);
t770 = t842 * t660;
t743 = t657 * t770;
t589 = -qJD(1) * t743 + t642;
t764 = t660 * t841;
t645 = pkin(1) * t764;
t811 = t657 * t664;
t590 = (t811 * t842 + t645) * qJD(1);
t759 = t840 * t590;
t528 = t589 * t839 + t759;
t865 = pkin(4) * t870 + qJD(5) * t659 + t528;
t661 = sin(qJ(1));
t665 = cos(qJ(1));
t760 = t665 * t841;
t864 = -t661 * t660 + t664 * t760;
t688 = pkin(2) * t841 - t743;
t577 = qJD(2) * pkin(2) + qJD(1) * t688 + t642;
t509 = t839 * t577 + t759;
t502 = pkin(9) * t715 + t509;
t652 = t664 * pkin(2) + pkin(1);
t736 = t652 * t657;
t615 = -qJD(1) * t736 + qJD(3);
t525 = -pkin(3) * t602 + pkin(9) * t605 + t615;
t472 = t502 * t659 - t663 * t525;
t788 = qJD(5) + t472;
t724 = t841 * t839;
t725 = t841 * t840;
t609 = t660 * t725 + t664 * t724;
t692 = t761 - t763;
t565 = t609 * t665 + t661 * t692;
t810 = t657 * t665;
t547 = t565 * t659 + t663 * t810;
t677 = -t660 * t724 + t664 * t725;
t564 = t661 * t624 + t665 * t677;
t863 = t547 * t658 - t564 * t662;
t862 = t547 * t662 + t564 * t658;
t809 = t658 * t659;
t546 = t602 * t809 - t605 * t662;
t728 = t658 * t794 - t546;
t790 = qJD(6) * t663;
t689 = -t662 * t790 + t728;
t860 = t689 * t572;
t490 = -qJDD(6) + t491;
t487 = t662 * t490;
t817 = t596 * t658;
t514 = -t662 * t573 + t817;
t830 = t514 * t596;
t859 = t487 + t830;
t793 = qJD(4) * t663;
t837 = qJ(5) * t663;
t858 = -qJ(5) * t793 + t602 * t837 - t865;
t738 = t657 * t761;
t627 = qJDD(1) * t738;
t684 = qJD(2) * t624;
t730 = qJDD(1) * t763;
t558 = (-qJD(1) * t684 + t730) * t657 + qJDD(4) - t627;
t857 = (qJDD(2) + 0.2e1 * t749) * t657;
t789 = pkin(5) * t575 + t788;
t473 = t663 * t502 + t659 * t525;
t463 = -qJ(5) * t596 - t473;
t849 = pkin(5) * t573;
t454 = -t463 - t849;
t852 = pkin(4) + pkin(10);
t856 = t852 * t490 + (t454 - t473 + t849) * t572;
t854 = t575 ^ 2;
t853 = t596 ^ 2;
t667 = qJD(1) ^ 2;
t850 = pkin(4) * t558;
t608 = t624 * t657;
t848 = pkin(9) * t608;
t847 = g(1) * t661;
t585 = -t608 * t659 - t663 * t841;
t846 = t585 * pkin(4);
t845 = t657 * pkin(8);
t844 = t663 * pkin(4);
t775 = t839 * pkin(2);
t650 = t775 + pkin(9);
t843 = pkin(5) + t650;
t838 = qJ(5) * t573;
t629 = t663 * t710;
t492 = qJD(4) * t575 - t659 * t861 - t629;
t791 = qJD(6) * t662;
t778 = t658 * t492 + t662 * t558 + t573 * t791;
t792 = qJD(6) * t658;
t452 = -t596 * t792 + t778;
t836 = t452 * t662;
t516 = t573 * t658 + t596 * t662;
t756 = -t662 * t492 + t558 * t658;
t453 = qJD(6) * t516 + t756;
t835 = t453 * t659;
t834 = t463 * t596;
t833 = t473 * t596;
t832 = t490 * t658;
t831 = t514 * t572;
t829 = t516 * t572;
t828 = t516 * t602;
t555 = t558 * qJ(5);
t827 = t558 * t659;
t824 = t572 * t658;
t822 = t573 * t605;
t821 = t575 * t573;
t820 = t575 * t596;
t819 = t575 * t605;
t586 = -t608 * t663 + t659 * t841;
t818 = t586 * qJ(5);
t815 = t650 * t558;
t814 = t654 * t667;
t813 = t657 * t660;
t812 = t657 * t661;
t808 = t659 * qJ(5);
t805 = t452 * t659 + t516 * t793;
t744 = pkin(1) * qJD(2) * t841;
t712 = qJD(1) * t744;
t740 = pkin(1) * t749;
t691 = -t660 * t712 + t664 * t740;
t765 = qJD(2) * t842;
t796 = qJD(3) * t660;
t506 = t710 * pkin(2) + (-qJDD(1) * t770 + (-t664 * t765 - t796) * qJD(1)) * t657 + t691;
t694 = qJD(3) * t664 - t660 * t765;
t784 = qJDD(1) * t664;
t766 = t657 * t784;
t777 = pkin(8) * t766 + t660 * t740 + t664 * t712;
t520 = (qJ(3) * t784 + qJD(1) * t694) * t657 + t777;
t471 = t839 * t506 + t840 * t520;
t588 = t646 + t688;
t800 = pkin(8) * t811 + t645;
t599 = qJ(3) * t811 + t800;
t538 = t839 * t588 + t840 * t599;
t527 = pkin(9) * t841 + t538;
t607 = t739 - t738;
t544 = pkin(3) * t607 - t736 + t848;
t803 = t663 * t527 + t659 * t544;
t582 = t839 * t590;
t529 = t589 * t840 - t582;
t774 = qJD(1) * t813;
t747 = pkin(2) * t774;
t540 = -pkin(3) * t605 - pkin(9) * t602 + t747;
t802 = t663 * t529 + t659 * t540;
t474 = qJ(5) * t605 - t802;
t801 = pkin(5) * t816 - t843 * t794 + t474;
t655 = t660 ^ 2;
t799 = -t664 ^ 2 + t655;
t798 = qJD(2) * t657;
t797 = qJD(2) * t660;
t795 = qJD(4) * t650;
t787 = qJD(1) * qJD(2);
t786 = qJDD(1) * t657;
t785 = qJDD(1) * t660;
t769 = t660 * t787;
t742 = t657 * t769;
t782 = pkin(2) * t742 + qJDD(3);
t780 = g(3) * t811;
t779 = t664 * t814;
t776 = t840 * pkin(2);
t773 = t657 * t797;
t622 = t843 * t663;
t771 = t842 * t657;
t768 = t664 * t787;
t767 = t657 * t785;
t467 = pkin(9) * t710 + t471;
t559 = t627 + (qJD(2) * t685 - t730) * t657;
t484 = -pkin(1) * t786 - pkin(2) * t766 - t559 * pkin(3) + pkin(9) * t861 + t782;
t745 = -t659 * t467 + t663 * t484 - t502 * t793 - t525 * t794;
t713 = qJDD(5) - t745;
t436 = -pkin(5) * t491 - t558 * t852 + t713;
t470 = t506 * t840 - t839 * t520;
t466 = -pkin(3) * t710 - t470;
t672 = t491 * qJ(5) - t575 * qJD(5) + t466;
t439 = t492 * t852 + t672;
t757 = t662 * t436 - t658 * t439;
t755 = -t659 * t527 + t544 * t663;
t548 = t565 * t663 - t659 * t810;
t611 = pkin(2) * t764 - t771;
t754 = -t611 * t661 + t665 * t652;
t752 = t596 * t663;
t750 = t572 * t662;
t746 = -t663 * t467 - t659 * t484 + t502 * t794 - t525 * t793;
t741 = t864 * pkin(2);
t651 = -t776 - pkin(3);
t734 = t657 * t667 * t841;
t566 = t661 * t609 - t665 * t692;
t551 = -t566 * t659 - t663 * t812;
t733 = -g(1) * t547 + g(2) * t551;
t552 = -t566 * t663 + t659 * t812;
t732 = g(1) * t548 - g(2) * t552;
t478 = -qJ(5) * t607 - t803;
t731 = t572 * t867 + t790 * t824;
t729 = g(2) * t810 - g(3) * t841;
t523 = t659 * t529;
t696 = t651 - t808;
t610 = -t663 * t852 + t696;
t727 = qJD(6) * t610 + t523 + (pkin(5) * t602 - t540) * t663 + t852 * t605 - qJD(4) * t622;
t621 = t843 * t659;
t726 = -qJD(6) * t621 - t596 * (pkin(10) * t659 - t837) + t865;
t508 = t577 * t840 - t582;
t537 = t588 * t840 - t839 * t599;
t643 = t664 * t744;
t578 = t657 * t694 + t643;
t579 = -t657 * t796 + (-t664 * t771 - t645) * qJD(2);
t504 = t578 * t839 - t840 * t579;
t722 = t658 * t436 + t662 * t439;
t449 = -t596 * t852 + t789;
t501 = -pkin(3) * t715 - t508;
t674 = -t575 * qJ(5) + t501;
t457 = t573 * t852 + t674;
t441 = t449 * t662 - t457 * t658;
t442 = t449 * t658 + t457 * t662;
t456 = pkin(5) * t586 - t607 * t852 - t755;
t526 = -pkin(3) * t841 - t537;
t679 = t526 - t818;
t468 = t585 * t852 + t679;
t721 = t456 * t662 - t468 * t658;
t720 = t456 * t658 + t468 * t662;
t718 = t585 * t662 - t607 * t658;
t543 = t585 * t658 + t607 * t662;
t717 = -t611 * t665 - t652 * t661;
t714 = 0.2e1 * t758 + qJD(2);
t709 = pkin(3) + t808 + t844;
t505 = t578 * t840 + t579 * t839;
t603 = t657 * t684;
t604 = t692 * t798;
t541 = pkin(2) * t773 - pkin(3) * t603 - pkin(9) * t604;
t708 = -t659 * t505 - t527 * t793 + t541 * t663 - t544 * t794;
t706 = t663 * t558 + t596 * t870;
t594 = t596 * qJD(5);
t438 = -t555 - t594 + t746;
t703 = -t768 - t785;
t702 = t663 * t505 - t527 * t794 + t659 * t541 + t544 * t793;
t701 = t501 * t596 - t815;
t469 = t573 * pkin(4) + t674;
t700 = -t469 * t596 + t815;
t699 = -g(1) * t552 - g(2) * t548 - g(3) * t586;
t567 = t624 * t665 - t661 * t677;
t698 = -g(1) * t567 - g(2) * t564 + g(3) * t607;
t695 = t710 * MDP(8);
t618 = -t665 * t660 - t661 * t762;
t693 = t596 * t752 + t827;
t687 = t618 * pkin(2);
t536 = t608 * t794 + (qJD(4) * t841 + t604) * t663;
t683 = -t536 * qJ(5) - t586 * qJD(5) + t504;
t682 = t596 * t795 - t698;
t681 = g(1) * t551 + g(2) * t547 + g(3) * t585 + t745;
t680 = t699 - t746;
t443 = t492 * pkin(4) + t672;
t678 = t443 + t682;
t446 = qJ(5) * t603 - qJD(5) * t607 - t702;
t437 = -pkin(5) * t492 - t438;
t676 = t437 + (t572 * t852 + t838) * t572 + t699;
t675 = t715 * t800;
t673 = t469 * t575 + qJDD(5) - t681;
t620 = t696 - t844;
t619 = -t661 * t764 + t665 * t664;
t617 = -t660 * t760 - t661 * t664;
t535 = qJD(4) * t586 + t604 * t659;
t503 = pkin(4) * t575 + t838;
t494 = t551 * t658 - t567 * t662;
t493 = t551 * t662 + t567 * t658;
t483 = t679 + t846;
t479 = -pkin(4) * t607 - t755;
t477 = qJD(6) * t718 + t535 * t658 - t603 * t662;
t476 = qJD(6) * t543 - t535 * t662 - t603 * t658;
t475 = pkin(4) * t605 - t540 * t663 + t523;
t461 = -pkin(5) * t585 - t478;
t460 = -pkin(4) * t596 + t788;
t451 = t535 * pkin(4) + t683;
t448 = t535 * t852 + t683;
t447 = pkin(4) * t603 - t708;
t445 = -pkin(5) * t535 - t446;
t444 = pkin(5) * t536 + t603 * t852 - t708;
t440 = t713 - t850;
t434 = -qJD(6) * t442 + t757;
t433 = qJD(6) * t441 + t722;
t1 = [(-(qJD(6) * t721 + t444 * t658 + t448 * t662) * t572 + t720 * t490 - t433 * t586 - t442 * t536 + t445 * t516 + t461 * t452 + t437 * t543 + t454 * t477 + g(1) * t862 - g(2) * t493) * MDP(30) + ((-qJD(6) * t720 + t444 * t662 - t448 * t658) * t572 - t721 * t490 + t434 * t586 + t441 * t536 + t445 * t514 + t461 * t453 - t437 * t718 + t454 * t476 + g(1) * t863 - g(2) * t494) * MDP(29) + (-qJD(2) * t675 + (-pkin(8) * t813 + t646) * t710 + (t703 * t845 + t691) * t841 - g(1) * t617 - g(2) * t619 + (t784 - t769) * t869) * MDP(9) + (-t453 * t586 - t476 * t572 - t490 * t718 - t514 * t536) * MDP(27) + (t452 * t718 - t453 * t543 - t476 * t516 - t477 * t514) * MDP(25) + (t443 * t483 + t469 * t451 + t438 * t478 + t463 * t446 + t440 * t479 + t460 * t447 - g(1) * (-pkin(3) * t565 - pkin(4) * t548 + pkin(9) * t564 - qJ(5) * t547 + t717) - g(2) * (-pkin(3) * t566 + pkin(4) * t552 - pkin(9) * t567 + qJ(5) * t551 + t754)) * MDP(23) + (t440 * t607 - t443 * t585 + t447 * t596 - t451 * t573 - t460 * t603 - t469 * t535 + t479 * t558 - t483 * t492 - t732) * MDP(21) + (-t438 * t607 - t443 * t586 - t446 * t596 - t451 * t575 + t463 * t603 - t469 * t536 - t478 * t558 + t483 * t491 - t733) * MDP(22) + (-t492 * t607 - t535 * t596 - t558 * t585 + t573 * t603) * MDP(16) + (-t491 * t607 + t536 * t596 + t558 * t586 - t575 * t603) * MDP(15) + (t558 * t607 - t596 * t603) * MDP(17) + (t466 * t585 + t472 * t603 + t526 * t492 + t501 * t535 + t504 * t573 + t558 * t755 + t596 * t708 + t607 * t745 + t732) * MDP(18) + (t466 * t586 + t473 * t603 - t526 * t491 + t501 * t536 + t504 * t575 - t558 * t803 - t596 * t702 + t607 * t746 + t733) * MDP(19) + (-g(1) * t810 - g(2) * t812 + t470 * t608 - t471 * t607 - t504 * t605 + t505 * t602 - t508 * t604 + t509 * t603 + t537 * t861 + t538 * t559) * MDP(11) + (-(-pkin(8) * t773 + t643) * t715 - t800 * t710 - (-pkin(8) * t742 + t777) * t841 + g(1) * t864 - g(2) * t618 + t703 * t869) * MDP(10) + ((qJDD(1) * t655 + 0.2e1 * t660 * t768) * MDP(4) + 0.2e1 * (t660 * t784 - t787 * t799) * MDP(5)) * t654 + (t664 * t714 * t798 + t660 * t857) * MDP(6) + (t664 * t857 - t714 * t773) * MDP(7) + (t471 * t538 + t509 * t505 + t470 * t537 - t508 * t504 - g(1) * t717 - g(2) * t754 + (pkin(2) * t615 * t797 + (t786 * t652 - t782) * t652) * t657) * MDP(12) + qJDD(1) * MDP(1) + (-g(1) * t564 + g(2) * t567 + t438 * t585 + t440 * t586 + t446 * t573 + t447 * t575 + t460 * t536 + t463 * t535 + t478 * t492 - t479 * t491) * MDP(20) + (t491 * t585 - t492 * t586 - t535 * t575 - t536 * t573) * MDP(14) + (-t491 * t586 + t536 * t575) * MDP(13) + (t452 * t586 + t477 * t572 - t490 * t543 + t516 * t536) * MDP(26) + (-t490 * t586 + t536 * t572) * MDP(28) + (g(1) * t665 + g(2) * t661) * MDP(3) + (t452 * t543 + t477 * t516) * MDP(24) + (-g(2) * t665 + t847) * MDP(2) + t841 * t695; (-(-t610 * t658 + t621 * t662) * t490 + t434 * t659 + t622 * t453 - g(1) * (-t566 * t662 + t567 * t809) - g(2) * (t564 * t809 + t565 * t662) - g(3) * (-t607 * t809 - t608 * t662) + (t658 * t726 - t662 * t727) * t572 + t801 * t514 - t867 * t454 + (t437 * t662 + t441 * t596 - t454 * t792) * t663) * MDP(29) + (g(1) * t566 - g(2) * t565 + g(3) * t608 - t474 * t573 - t475 * t575 + (-t460 * t602 - t492 * t650 - t438 + (t575 * t650 + t460) * qJD(4)) * t663 + (-t463 * t602 - t491 * t650 + t440 + (t573 * t650 + t463) * qJD(4)) * t659) * MDP(20) + ((t610 * t662 + t621 * t658) * t490 - t433 * t659 + t622 * t452 - g(1) * (t566 * t658 + t567 * t807) - g(2) * (t564 * t807 - t565 * t658) - g(3) * (-t607 * t807 + t608 * t658) + (t658 * t727 + t662 * t726) * t572 + t801 * t516 + t728 * t454 + (-t437 * t658 - t442 * t596 - t454 * t791) * t663) * MDP(30) + (t443 * t620 - t463 * t474 - t460 * t475 - g(1) * (-t566 * pkin(9) + t567 * t709 + t687) - g(2) * (pkin(9) * t565 + t564 * t709 + t741) - g(3) * (pkin(2) * t811 - t607 * t709 - t848) + t858 * t469 + (-t438 * t663 + t440 * t659 + t460 * t793 + t463 * t794) * t650) * MDP(23) + ((-t491 - t823) * t663 + (-t492 - t820) * t659) * MDP(14) + (t559 * t775 + t861 * t776 + (-t509 + t528) * t605 + (t508 - t529) * t602) * MDP(11) + (t460 * t605 - t475 * t596 - t492 * t620 - t573 * t858 + t659 * t700 + t663 * t678) * MDP(21) + (-t463 * t605 + t474 * t596 + t491 * t620 - t575 * t858 - t659 * t678 + t663 * t700) * MDP(22) + (pkin(1) * t660 * t814 - pkin(8) * t767 - g(1) * t618 - g(2) * t864 + qJD(1) * t675 - t768 * t845 + t691 - t780) * MDP(9) + ((-t828 + t832) * t663 + t860 + t805) * MDP(26) + (-t452 * t658 * t663 + t516 * t689) * MDP(24) + t596 * t605 * MDP(17) - t660 * MDP(4) * t779 + t695 + t799 * MDP(5) * t814 + (-t491 * t659 + t575 * t752) * MDP(13) + (-t490 * t659 + t572 * t752) * MDP(28) + (t660 * t734 + t766) * MDP(7) + (-t664 * t734 + t767) * MDP(6) + (-pkin(2) * t780 - g(1) * t687 - g(2) * t741 + t470 * t776 + t471 * t775 + t508 * t528 - t509 * t529 - t615 * t747) * MDP(12) + (-t472 * t605 + t651 * t492 + t523 * t596 - t528 * t573 + t701 * t659 + (-t466 + (-t540 - t795) * t596 + t698) * t663) * MDP(18) + (-t651 * t491 + t802 * t596 - t473 * t605 - t528 * t575 + t701 * t663 + (t466 + t682) * t659) * MDP(19) + (pkin(1) * t779 + (-pkin(8) * t774 + t642) * t758 + g(1) * t619 - g(2) * t617 + g(3) * t813 + t642 * qJD(2) - t777) * MDP(10) + (t693 + t819) * MDP(15) + (t706 - t822) * MDP(16) + (-t835 + (t487 - t830) * t663 + t731) * MDP(27) + (t514 * t546 + t516 * t545 + (-t514 * t658 + t516 * t662) * t794 + (-t836 + t453 * t658 + (t514 * t662 + t516 * t658) * qJD(6)) * t663) * MDP(25); (-t602 ^ 2 - t605 ^ 2) * MDP(11) + (-t508 * t605 - t509 * t602 + (-qJDD(1) * t652 - t847) * t657 + t729 + t782) * MDP(12) + (-t663 * t853 + t819 - t827) * MDP(19) + (t868 * t663 + (-t492 + t820) * t659) * MDP(20) + (t693 - t819) * MDP(22) + (-g(1) * t812 + t469 * t605 + (-t440 - t834) * t663 + (t460 * t596 - t438) * t659 + t729) * MDP(23) + (t663 * t859 + t731 + t835) * MDP(29) + ((-t828 - t832) * t663 - t860 + t805) * MDP(30) + (-MDP(18) + MDP(21)) * (-t706 - t822); MDP(13) * t821 + (-t573 ^ 2 + t854) * MDP(14) - t868 * MDP(15) + (t605 * t793 + t659 * t866 + t629 + t820) * MDP(16) + t558 * MDP(17) + (-t501 * t575 + t681 + t833) * MDP(18) + (-t472 * t596 + t501 * t573 - t680) * MDP(19) + (pkin(4) * t491 - qJ(5) * t492 + (-t463 - t473) * t575 + (t460 - t788) * t573) * MDP(20) + (t503 * t573 + t673 - t833 - 0.2e1 * t850) * MDP(21) + (-t469 * t573 + t503 * t575 + t596 * t788 + 0.2e1 * t555 + t594 + t680) * MDP(22) + (-t438 * qJ(5) - t440 * pkin(4) - t469 * t503 - t460 * t473 - g(1) * (-pkin(4) * t551 + qJ(5) * t552) - g(2) * (-pkin(4) * t547 + qJ(5) * t548) - g(3) * (t818 - t846) - t788 * t463) * MDP(23) + (-t516 * t824 + t836) * MDP(24) + ((-t453 - t829) * t662 + (-t452 + t831) * t658) * MDP(25) + (t516 * t573 - t572 * t824 - t487) * MDP(26) + (-t514 * t573 - t572 * t750 + t832) * MDP(27) + t572 * t573 * MDP(28) + (qJ(5) * t453 + t441 * t573 + t789 * t514 + t676 * t658 + t662 * t856) * MDP(29) + (qJ(5) * t452 - t442 * t573 + t789 * t516 - t658 * t856 + t676 * t662) * MDP(30); -t868 * MDP(20) + (-t853 - t854) * MDP(22) + (t673 + t834 - t850) * MDP(23) - t859 * MDP(29) + (-t516 * t596 + t832) * MDP(30) + (-MDP(29) * t824 - MDP(30) * t750) * t572 + (-t821 + t558) * MDP(21); t516 * t514 * MDP(24) + (-t514 ^ 2 + t516 ^ 2) * MDP(25) + (t778 + t831) * MDP(26) + (-t756 + t829) * MDP(27) - t490 * MDP(28) + (-g(1) * t493 - g(2) * t862 - g(3) * t718 + t442 * t572 - t454 * t516 + t757) * MDP(29) + (g(1) * t494 + g(2) * t863 + g(3) * t543 + t441 * t572 + t454 * t514 - t722) * MDP(30) + (-MDP(26) * t817 - MDP(27) * t516 - MDP(29) * t442 - MDP(30) * t441) * qJD(6);];
tau  = t1;
