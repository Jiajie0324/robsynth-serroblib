% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 06:43
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPPR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR9_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPPR9_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPPR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPPR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR9_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 06:39:48
% EndTime: 2019-05-07 06:41:32
% DurationCPUTime: 91.02s
% Computational Cost: add. (306105->966), mult. (673518->1477), div. (0->0), fcn. (537167->12), ass. (0->718)
t1238 = sin(qJ(1));
t1242 = cos(qJ(1));
t1232 = sin(pkin(6));
t1234 = cos(pkin(6));
t1237 = sin(qJ(2));
t1241 = cos(qJ(2));
t1236 = sin(qJ(3));
t1240 = cos(qJ(3));
t1413 = qJD(1) * t1234;
t1223 = qJD(2) + t1413;
t1369 = t1232 * t1237;
t1355 = qJD(1) * t1369;
t1189 = -t1240 * t1223 + t1236 * t1355;
t1359 = qJDD(1) * t1237;
t1411 = qJD(1) * t1241;
t1198 = (qJD(2) * t1411 + t1359) * t1232;
t1222 = qJDD(1) * t1234 + qJDD(2);
t1139 = -t1189 * qJD(3) + t1240 * t1198 + t1236 * t1222;
t1231 = sin(pkin(11));
t1233 = cos(pkin(11));
t1219 = qJD(2) * t1355;
t1358 = qJDD(1) * t1241;
t1324 = t1232 * t1358 - t1219;
t1279 = -qJDD(3) + t1324;
t1112 = t1233 * t1139 - t1231 * t1279;
t1191 = t1223 * t1236 + t1240 * t1355;
t1368 = t1232 * t1241;
t1354 = qJD(1) * t1368;
t1216 = -qJD(3) + t1354;
t1161 = t1191 * t1231 + t1233 * t1216;
t1386 = t1161 * t1189;
t1446 = -t1386 + t1112;
t1163 = t1191 * t1233 - t1216 * t1231;
t1160 = t1163 ^ 2;
t1433 = t1189 ^ 2;
t1073 = t1433 + t1160;
t1117 = t1163 * t1161;
t1337 = t1236 * t1198 - t1240 * t1222;
t1138 = qJD(3) * t1191 + t1337;
t1450 = t1117 + t1138;
t1398 = t1450 * t1233;
t982 = t1073 * t1231 - t1398;
t897 = t1236 * t1446 + t1240 * t982;
t1399 = t1450 * t1231;
t962 = t1073 * t1233 + t1399;
t1305 = t1237 * t897 + t1241 * t962;
t895 = t1236 * t982 - t1240 * t1446;
t796 = -t1232 * t895 + t1234 * t1305;
t850 = -t1237 * t962 + t1241 * t897;
t735 = t1238 * t796 - t1242 * t850;
t1599 = pkin(7) * t735;
t746 = t1238 * t850 + t1242 * t796;
t1598 = pkin(7) * t746;
t794 = t1232 * t1305 + t1234 * t895;
t1597 = pkin(8) * (t1232 * t794 + t1234 * t796);
t1596 = pkin(1) * t794;
t1595 = pkin(1) * t796;
t1339 = t1139 * t1231 + t1233 * t1279;
t1383 = t1189 * t1163;
t1276 = -t1339 + t1383;
t1434 = t1161 ^ 2;
t1129 = t1434 - t1433;
t999 = t1129 * t1233 - t1399;
t918 = t1276 * t1236 + t1240 * t999;
t994 = t1129 * t1231 + t1398;
t1300 = t1237 * t918 - t1241 * t994;
t914 = t1236 * t999 - t1276 * t1240;
t808 = -t1232 * t914 + t1234 * t1300;
t859 = t1237 * t994 + t1241 * t918;
t1594 = t1238 * t808 - t1242 * t859;
t1114 = t1160 - t1434;
t1275 = t1339 + t1383;
t1404 = t1446 * t1231;
t946 = -t1275 * t1233 - t1404;
t894 = t1114 * t1236 + t1240 * t946;
t941 = -t1275 * t1231 + t1233 * t1446;
t1306 = t1237 * t894 - t1241 * t941;
t892 = -t1114 * t1240 + t1236 * t946;
t783 = -t1232 * t892 + t1234 * t1306;
t839 = t1237 * t941 + t1241 * t894;
t1593 = t1238 * t783 - t1242 * t839;
t1592 = t1238 * t859 + t1242 * t808;
t1591 = t1238 * t839 + t1242 * t783;
t1589 = pkin(8) * t850;
t1582 = t1232 * t1300 + t1234 * t914;
t1581 = t1232 * t1306 + t1234 * t892;
t1130 = -t1160 + t1433;
t1340 = -t1138 + t1117;
t1397 = t1340 * t1231;
t1522 = -t1130 * t1233 + t1397;
t1451 = -t1112 - t1386;
t1396 = t1340 * t1233;
t1521 = -t1130 * t1231 - t1396;
t1533 = -t1236 * t1451 + t1240 * t1521;
t1555 = -t1237 * t1522 + t1241 * t1533;
t1535 = t1236 * t1521 + t1240 * t1451;
t1557 = t1237 * t1533 + t1241 * t1522;
t1564 = -t1232 * t1535 + t1234 * t1557;
t1580 = -t1238 * t1564 + t1242 * t1555;
t1579 = t1238 * t1555 + t1242 * t1564;
t1578 = pkin(9) * t895;
t1445 = -t1433 - t1434;
t1472 = t1231 * t1445 - t1396;
t1471 = t1233 * t1445 + t1397;
t1485 = t1236 * t1275 + t1240 * t1471;
t1513 = t1237 * t1472 + t1241 * t1485;
t1487 = t1236 * t1471 - t1240 * t1275;
t1516 = t1237 * t1485 - t1241 * t1472;
t1536 = -t1232 * t1487 + t1234 * t1516;
t1554 = t1238 * t1513 + t1242 * t1536;
t1577 = pkin(7) * t1554;
t1556 = -t1238 * t1536 + t1242 * t1513;
t1576 = pkin(7) * t1556;
t1567 = pkin(2) * t895 + qJ(4) * t982;
t1566 = -pkin(2) * t962 - pkin(9) * t897;
t1565 = t1232 * t1557 + t1234 * t1535;
t1563 = pkin(1) * t1536;
t1537 = t1232 * t1516 + t1234 * t1487;
t1562 = pkin(1) * t1537;
t1443 = t1231 * t1276 + t1233 * t1451;
t1442 = -t1231 * t1451 + t1233 * t1276;
t1449 = t1160 + t1434;
t1465 = -t1236 * t1449 + t1240 * t1442;
t1484 = t1237 * t1443 + t1241 * t1465;
t1464 = t1236 * t1442 + t1240 * t1449;
t1486 = t1237 * t1465 - t1241 * t1443;
t1517 = -t1232 * t1464 + t1234 * t1486;
t1532 = t1238 * t1484 + t1242 * t1517;
t1561 = pkin(7) * t1532;
t1534 = -t1238 * t1517 + t1242 * t1484;
t1560 = pkin(7) * t1534;
t1553 = (-t1232 * t1537 - t1234 * t1536) * pkin(8);
t1551 = pkin(3) * t962;
t1550 = pkin(1) * t1517;
t1518 = t1232 * t1486 + t1234 * t1464;
t1549 = pkin(1) * t1518;
t1548 = pkin(8) * t1513;
t1547 = qJ(4) * t962;
t1531 = (-t1232 * t1518 - t1234 * t1517) * pkin(8);
t1530 = pkin(8) * t1484;
t1529 = pkin(9) * t1487;
t1520 = -pkin(2) * t1487 - qJ(4) * t1471;
t1519 = -pkin(2) * t1472 + pkin(9) * t1485;
t1380 = t1189 * t1233;
t1124 = t1163 * t1380;
t1381 = t1189 * t1231;
t1345 = t1161 * t1381;
t1327 = t1124 + t1345;
t1123 = t1163 * t1381;
t1344 = t1161 * t1380;
t1328 = t1123 - t1344;
t1387 = t1138 * t1236;
t1439 = t1240 * t1328 + t1387;
t1468 = -t1237 * t1327 + t1241 * t1439;
t1135 = t1240 * t1138;
t1444 = t1236 * t1328 - t1135;
t1470 = t1237 * t1439 + t1241 * t1327;
t1488 = -t1232 * t1444 + t1234 * t1470;
t1515 = -t1238 * t1488 + t1242 * t1468;
t1251 = t1233 * t1339 - t1345;
t1250 = t1231 * t1339 + t1344;
t1349 = t1236 * t1117;
t1440 = t1240 * t1250 - t1349;
t1467 = -t1237 * t1251 + t1241 * t1440;
t1348 = t1240 * t1117;
t1441 = t1236 * t1250 + t1348;
t1469 = t1237 * t1440 + t1241 * t1251;
t1489 = -t1232 * t1441 + t1234 * t1469;
t1514 = -t1238 * t1489 + t1242 * t1467;
t1512 = t1238 * t1468 + t1242 * t1488;
t1511 = t1238 * t1467 + t1242 * t1489;
t1509 = pkin(3) * t1472;
t1508 = pkin(9) * t1464;
t1507 = pkin(9) * t1465;
t1505 = qJ(4) * t1472;
t1492 = -pkin(2) * t1464 - pkin(3) * t1449 - qJ(4) * t1442;
t1491 = t1232 * t1469 + t1234 * t1441;
t1490 = t1232 * t1470 + t1234 * t1444;
t1483 = 2 * qJD(5);
t1482 = qJ(4) * t1443;
t1481 = qJ(5) * t1446;
t1026 = -t1112 * t1231 - t1124;
t1027 = t1112 * t1233 - t1123;
t1329 = t1240 * t1027 + t1349;
t1330 = t1236 * t1027 - t1348;
t1436 = -t1232 * t1330 + (t1026 * t1241 + t1237 * t1329) * t1234;
t1438 = -t1026 * t1237 + t1241 * t1329;
t1463 = t1238 * t1438 + t1242 * t1436;
t1462 = -t1238 * t1436 + t1242 * t1438;
t1235 = sin(qJ(6));
t1137 = qJDD(6) - t1138;
t1239 = cos(qJ(6));
t1101 = -t1239 * t1161 + t1163 * t1235;
t1103 = t1161 * t1235 + t1163 * t1239;
t1393 = t1101 * t1103;
t1249 = t1137 - t1393;
t1461 = t1235 * t1249;
t1382 = t1189 * t1191;
t1254 = -t1279 - t1382;
t1460 = t1236 * t1254;
t1456 = t1239 * t1249;
t1455 = t1240 * t1254;
t1173 = t1189 * t1216;
t1094 = t1173 + t1139;
t1121 = (t1189 * t1240 - t1191 * t1236) * t1216;
t1448 = t1237 * t1121 + t1241 * t1279;
t1113 = pkin(4) * t1161 - qJ(5) * t1163;
t1218 = g(1) * t1242 + t1238 * g(2);
t1425 = pkin(8) * t1232;
t1435 = qJD(1) ^ 2;
t1194 = -pkin(1) * t1435 + qJDD(1) * t1425 - t1218;
t1428 = pkin(2) * t1241;
t1334 = -pkin(9) * t1237 - t1428;
t1414 = qJD(1) * t1232;
t1197 = t1334 * t1414;
t1217 = t1238 * g(1) - t1242 * g(2);
t1252 = qJDD(1) * pkin(1) + t1425 * t1435 + t1217;
t1248 = t1234 * t1252;
t1246 = -g(3) * t1369 + t1237 * t1248;
t1431 = t1223 ^ 2;
t1081 = t1222 * pkin(9) - t1431 * pkin(2) + (t1197 * t1414 + t1194) * t1241 + t1246;
t1429 = pkin(2) * t1237;
t1333 = -pkin(9) * t1241 + t1429;
t1424 = t1234 * g(3);
t1244 = t1219 * pkin(2) - t1198 * pkin(9) - t1424 + ((-pkin(1) - t1428) * qJDD(1) + (-pkin(8) * t1414 + t1223 * t1333) * qJD(1) - t1217) * t1232;
t1002 = t1240 * t1081 + t1236 * t1244;
t1146 = pkin(3) * t1189 - qJ(4) * t1191;
t1432 = t1216 ^ 2;
t940 = -pkin(3) * t1432 - qJ(4) * t1279 - t1189 * t1146 + t1002;
t1338 = t1237 * t1194 - t1241 * t1248;
t1412 = qJD(1) * t1237;
t1080 = -t1222 * pkin(2) - t1431 * pkin(9) + (g(3) * t1241 + t1197 * t1412) * t1232 + t1338;
t952 = -t1094 * qJ(4) + (-t1191 * t1216 + t1138) * pkin(3) + t1080;
t1422 = t1231 * t952 + t1233 * t940;
t1447 = t1138 * qJ(5) - t1161 * t1113 + t1189 * t1483 + t1422;
t1089 = (qJD(3) + t1216) * t1191 + t1337;
t1437 = t1026 * t1368 + t1234 * t1330 + t1329 * t1369;
t1099 = t1101 ^ 2;
t1100 = t1103 ^ 2;
t1183 = -qJD(6) + t1189;
t1181 = t1183 ^ 2;
t1188 = t1191 ^ 2;
t1430 = pkin(4) + pkin(5);
t1427 = pkin(3) * t1236;
t1426 = pkin(4) * t1233;
t1423 = t1231 * t940 - t1233 * t952;
t1421 = qJ(5) * t1233;
t1001 = t1236 * t1081 - t1240 * t1244;
t939 = t1279 * pkin(3) - t1432 * qJ(4) + t1191 * t1146 + qJDD(4) + t1001;
t1420 = t1231 * t939;
t1419 = t1233 * t939;
t1332 = -pkin(5) * t1189 - pkin(10) * t1163;
t1247 = t1339 * pkin(4) - t1481 + t939;
t847 = (pkin(4) * t1189 - (2 * qJD(5))) * t1163 + t1247;
t814 = pkin(5) * t1339 + pkin(10) * t1434 - t1163 * t1332 + t847;
t1418 = t1235 * t814;
t976 = -t1137 - t1393;
t1417 = t1235 * t976;
t1416 = t1239 * t814;
t1415 = t1239 * t976;
t1410 = qJD(4) * t1161;
t1409 = qJD(4) * t1163;
t1395 = t1080 * t1236;
t1394 = t1080 * t1240;
t1392 = t1101 * t1183;
t1125 = t1279 - t1382;
t1391 = t1125 * t1236;
t1390 = t1125 * t1240;
t1385 = t1183 * t1235;
t1384 = t1183 * t1239;
t1366 = t1237 * t1435;
t1228 = t1232 ^ 2;
t1370 = t1228 * t1241;
t1215 = t1366 * t1370;
t1195 = t1215 + t1222;
t1379 = t1195 * t1237;
t1378 = t1195 * t1241;
t1196 = -t1215 + t1222;
t1377 = t1196 * t1237;
t1376 = t1196 * t1241;
t1375 = t1216 * t1236;
t1374 = t1216 * t1240;
t1373 = t1222 * t1232;
t1372 = t1223 * t1232;
t1371 = t1228 * t1435;
t1175 = t1232 * t1252 + t1424;
t1364 = t1237 * t1175;
t1363 = t1241 * t1175;
t1361 = t1449 - t1433;
t1229 = t1237 ^ 2;
t1230 = t1241 ^ 2;
t1360 = t1229 + t1230;
t1154 = 0.2e1 * t1409;
t848 = t1154 + t1423;
t1152 = -0.2e1 * t1410;
t849 = t1152 + t1422;
t1357 = -pkin(3) * t1240 - pkin(2);
t1356 = qJD(1) * t1372;
t1353 = t1229 * t1371;
t1352 = t1230 * t1371;
t1351 = t1236 * t1393;
t1350 = t1240 * t1393;
t1347 = t1237 * t1382;
t1346 = t1241 * t1382;
t957 = -t1101 * qJD(6) + t1239 * t1112 + t1235 * t1339;
t1343 = qJ(5) * t1231 + pkin(3);
t1335 = t1163 * t1113 + qJDD(5) + t1423;
t1274 = -t1138 * pkin(4) + t1335;
t1253 = -qJ(5) * t1433 + t1274;
t780 = t1340 * pkin(5) + pkin(10) * t1451 + t1154 + t1253;
t1280 = t1152 + t1447;
t816 = -pkin(4) * t1433 + t1280;
t788 = -pkin(5) * t1434 + pkin(10) * t1339 + t1189 * t1332 + t816;
t712 = t1235 * t788 - t1239 * t780;
t1342 = -t1223 + t1413;
t882 = t1001 * t1236 + t1240 * t1002;
t1341 = t1235 * t1112 - t1239 * t1339;
t1177 = -t1217 * t1238 - t1242 * t1218;
t1214 = qJDD(1) * t1242 - t1238 * t1435;
t1331 = -pkin(7) * t1214 - g(3) * t1238;
t1182 = -t1353 - t1431;
t1145 = -t1182 * t1237 - t1376;
t1326 = pkin(8) * t1145 - t1364;
t1202 = -t1352 - t1431;
t1157 = t1202 * t1241 - t1379;
t1325 = pkin(8) * t1157 + t1363;
t766 = t1231 * t849 - t1233 * t848;
t767 = t1231 * t848 + t1233 * t849;
t713 = t1235 * t780 + t1239 * t788;
t676 = t1235 * t713 - t1239 * t712;
t677 = t1235 * t712 + t1239 * t713;
t642 = t1231 * t676 + t1233 * t677;
t636 = t1236 * t814 + t1240 * t642;
t641 = t1231 * t677 - t1233 * t676;
t1323 = t1237 * t636 - t1241 * t641;
t817 = -t1253 - 0.2e1 * t1409;
t740 = -t1231 * t817 + t1233 * t816;
t709 = t1236 * t847 + t1240 * t740;
t739 = t1231 * t816 + t1233 * t817;
t1322 = t1237 * t709 - t1241 * t739;
t1257 = (-qJD(6) - t1183) * t1103 - t1341;
t907 = -t957 + t1392;
t827 = t1235 * t1257 + t1239 * t907;
t829 = -t1235 * t907 + t1239 * t1257;
t758 = t1231 * t827 + t1233 * t829;
t958 = -t1099 - t1100;
t731 = -t1236 * t958 + t1240 * t758;
t756 = t1231 * t829 - t1233 * t827;
t1321 = t1237 * t731 - t1241 * t756;
t1017 = t1100 - t1099;
t1281 = t957 + t1392;
t903 = (qJD(6) - t1183) * t1103 + t1341;
t826 = t1235 * t903 - t1239 * t1281;
t828 = -t1235 * t1281 - t1239 * t903;
t757 = -t1231 * t826 + t1233 * t828;
t744 = -t1017 * t1236 + t1240 * t757;
t755 = -t1231 * t828 - t1233 * t826;
t1320 = t1237 * t744 + t1241 * t755;
t752 = t1236 * t939 + t1240 * t767;
t1319 = t1237 * t752 - t1241 * t766;
t1005 = -t1181 - t1099;
t874 = t1005 * t1235 + t1456;
t875 = t1005 * t1239 - t1461;
t813 = t1231 * t874 + t1233 * t875;
t769 = -t1236 * t903 + t1240 * t813;
t812 = t1231 * t875 - t1233 * t874;
t1318 = t1237 * t769 - t1241 * t812;
t1048 = -t1100 - t1181;
t909 = t1048 * t1239 + t1417;
t910 = -t1048 * t1235 + t1415;
t825 = t1231 * t909 + t1233 * t910;
t778 = -t1236 * t1281 + t1240 * t825;
t824 = t1231 * t910 - t1233 * t909;
t1317 = t1237 * t778 - t1241 * t824;
t1065 = -t1100 + t1181;
t921 = -t1065 * t1239 - t1461;
t923 = -t1065 * t1235 + t1456;
t836 = -t1231 * t921 + t1233 * t923;
t786 = t1236 * t907 + t1240 * t836;
t834 = -t1231 * t923 - t1233 * t921;
t1316 = t1237 * t786 + t1241 * t834;
t1064 = t1099 - t1181;
t922 = -t1064 * t1235 + t1415;
t924 = t1064 * t1239 + t1417;
t837 = -t1231 * t922 + t1233 * t924;
t787 = -t1236 * t1257 + t1240 * t837;
t835 = -t1231 * t924 - t1233 * t922;
t1315 = t1237 * t787 + t1241 * t835;
t956 = -qJD(6) * t1103 - t1341;
t899 = t1101 * t1385 - t1239 * t956;
t900 = -t1101 * t1384 - t1235 * t956;
t822 = -t1231 * t899 + t1233 * t900;
t803 = t1240 * t822 + t1351;
t820 = -t1231 * t900 - t1233 * t899;
t1314 = t1237 * t803 + t1241 * t820;
t901 = t1103 * t1384 - t1235 * t957;
t902 = t1103 * t1385 + t1239 * t957;
t823 = -t1231 * t901 + t1233 * t902;
t804 = t1240 * t823 - t1351;
t821 = -t1231 * t902 - t1233 * t901;
t1313 = t1237 * t804 + t1241 * t821;
t984 = (-t1101 * t1235 - t1103 * t1239) * t1183;
t985 = (t1101 * t1239 - t1103 * t1235) * t1183;
t871 = -t1231 * t984 + t1233 * t985;
t867 = -t1137 * t1236 + t1240 * t871;
t870 = -t1231 * t985 - t1233 * t984;
t1312 = t1237 * t867 + t1241 * t870;
t1297 = -t1080 * t1241 + t1237 * t882;
t881 = -t1001 * t1240 + t1002 * t1236;
t1090 = (-qJD(3) + t1216) * t1191 - t1337;
t1012 = t1090 * t1240 - t1094 * t1236;
t1147 = -t1188 + t1433;
t1294 = t1012 * t1237 + t1147 * t1241;
t1093 = t1173 - t1139;
t1013 = -t1089 * t1240 - t1093 * t1236;
t1122 = t1433 + t1188;
t1293 = t1013 * t1237 + t1122 * t1241;
t1142 = -t1433 - t1432;
t1056 = t1142 * t1240 - t1460;
t1292 = t1056 * t1237 + t1090 * t1241;
t1149 = -t1188 - t1432;
t1063 = -t1149 * t1236 + t1390;
t1291 = t1063 * t1237 - t1094 * t1241;
t1167 = -t1188 + t1432;
t1070 = -t1167 * t1236 + t1455;
t1290 = t1070 * t1237 + t1093 * t1241;
t1166 = t1433 - t1432;
t1071 = t1166 * t1240 + t1391;
t1289 = t1071 * t1237 + t1089 * t1241;
t1143 = g(3) * t1368 + t1338;
t1144 = t1241 * t1194 + t1246;
t1288 = -t1241 * t1143 + t1237 * t1144;
t1061 = t1143 * t1237 + t1144 * t1241;
t1206 = t1223 * t1354;
t1169 = t1206 + t1198;
t1205 = t1223 * t1355;
t1172 = -t1205 + t1324;
t1287 = t1169 * t1241 + t1172 * t1237;
t1170 = -t1206 + t1198;
t1171 = t1205 + t1324;
t1286 = -t1170 * t1241 + t1171 * t1237;
t1285 = t1182 * t1241 - t1377;
t1200 = -t1353 + t1431;
t1284 = t1200 * t1241 + t1379;
t1283 = t1202 * t1237 + t1378;
t1201 = t1352 - t1431;
t1282 = t1201 * t1237 + t1376;
t1176 = t1217 * t1242 - t1238 * t1218;
t1084 = -t1189 * t1374 + t1387;
t1278 = t1084 * t1237 + t1346;
t1086 = t1139 * t1240 + t1191 * t1375;
t1277 = t1086 * t1237 - t1346;
t618 = -pkin(3) * t641 - qJ(5) * t677 + t1430 * t676;
t657 = -pkin(10) * t677 - t1430 * t814;
t665 = -pkin(10) * t676 - qJ(5) * t814;
t620 = -qJ(4) * t641 - t1231 * t657 + t1233 * t665;
t635 = t1236 * t642 - t1240 * t814;
t606 = -pkin(9) * t635 - t1236 * t618 + t1240 * t620;
t612 = -pkin(2) * t635 + pkin(3) * t814 - qJ(4) * t642 - t1231 * t665 - t1233 * t657;
t623 = t1237 * t641 + t1241 * t636;
t1273 = pkin(8) * t623 + t1237 * t606 + t1241 * t612;
t660 = -pkin(10) * t829 + t1430 * t958 - t677;
t663 = -pkin(10) * t827 + qJ(5) * t958 - t676;
t627 = -qJ(4) * t756 - t1231 * t660 + t1233 * t663;
t683 = -pkin(3) * t756 - qJ(5) * t829 + t1430 * t827;
t730 = t1236 * t758 + t1240 * t958;
t624 = -pkin(9) * t730 - t1236 * t683 + t1240 * t627;
t626 = -pkin(2) * t730 - pkin(3) * t958 - qJ(4) * t758 - t1231 * t663 - t1233 * t660;
t688 = t1237 * t756 + t1241 * t731;
t1272 = pkin(8) * t688 + t1237 * t624 + t1241 * t626;
t718 = -pkin(10) * t875 + t1430 * t903 - t1416;
t745 = -pkin(10) * t874 + qJ(5) * t903 - t1418;
t673 = -qJ(4) * t812 - t1231 * t718 + t1233 * t745;
t678 = -pkin(3) * t812 - qJ(5) * t875 + t1430 * t874 - t712;
t768 = t1236 * t813 + t1240 * t903;
t634 = -pkin(9) * t768 - t1236 * t678 + t1240 * t673;
t656 = -pkin(2) * t768 - pkin(3) * t903 - qJ(4) * t813 - t1231 * t745 - t1233 * t718;
t715 = t1237 * t812 + t1241 * t769;
t1271 = pkin(8) * t715 + t1237 * t634 + t1241 * t656;
t720 = -pkin(10) * t910 + t1281 * t1430 + t1418;
t750 = -pkin(10) * t909 + qJ(5) * t1281 - t1416;
t679 = -qJ(4) * t824 - t1231 * t720 + t1233 * t750;
t681 = -pkin(3) * t824 - qJ(5) * t910 + t1430 * t909 - t713;
t777 = t1236 * t825 + t1240 * t1281;
t638 = -pkin(9) * t777 - t1236 * t681 + t1240 * t679;
t659 = -pkin(2) * t777 - pkin(3) * t1281 - qJ(4) * t825 - t1231 * t750 - t1233 * t720;
t725 = t1237 * t824 + t1241 * t778;
t1270 = pkin(8) * t725 + t1237 * t638 + t1241 * t659;
t687 = -pkin(3) * t739 - pkin(4) * t817 - qJ(5) * t816;
t696 = -qJ(4) * t739 + (pkin(4) * t1231 - t1421) * t847;
t708 = t1236 * t740 - t1240 * t847;
t643 = -pkin(9) * t708 - t1236 * t687 + t1240 * t696;
t658 = -pkin(2) * t708 - qJ(4) * t740 + (t1343 + t1426) * t847;
t682 = t1237 * t739 + t1241 * t709;
t1269 = pkin(8) * t682 + t1237 * t643 + t1241 * t658;
t751 = t1236 * t767 - t1240 * t939;
t680 = -pkin(9) * t751 + (-qJ(4) * t1240 + t1427) * t766;
t692 = -pkin(2) * t751 + pkin(3) * t939 - qJ(4) * t767;
t700 = t1237 * t766 + t1241 * t752;
t1268 = pkin(8) * t700 + t1237 * t680 + t1241 * t692;
t799 = pkin(4) * t1361 + t1280;
t800 = qJ(5) * t1361 + t1154 + t1274;
t711 = -t1231 * t799 + t1233 * t800 - t1482;
t853 = -pkin(3) * t1443 - pkin(4) * t1451 - qJ(5) * t1276;
t689 = -t1236 * t853 + t1240 * t711 - t1508;
t703 = -t1231 * t800 - t1233 * t799 + t1492;
t1267 = t1237 * t689 + t1241 * t703 + t1530;
t763 = -t1551 - qJ(5) * t1450 + 0.2e1 * t1410 + (-t1073 + t1433) * pkin(4) - t1447;
t1245 = t1163 * t1483 - t1247;
t818 = -pkin(4) * t1383 + t1245 + t1481;
t771 = -pkin(4) * t1404 + t1233 * t818 - t1547;
t697 = -t1236 * t763 + t1240 * t771 + t1578;
t732 = -t1231 * t818 + (-pkin(3) - t1426) * t1446 + t1567;
t1266 = t1237 * t697 + t1241 * t732 - t1589;
t764 = -t1509 + t1154 + (-t1445 - t1433) * qJ(5) + (t1340 - t1138) * pkin(4) + t1335;
t819 = (-t1275 - t1383) * pkin(4) + t1245;
t772 = -t1231 * t819 - t1275 * t1421 - t1505;
t701 = -t1236 * t764 + t1240 * t772 - t1529;
t741 = -t1233 * t819 + t1275 * t1343 + t1520;
t1265 = t1237 * t701 + t1241 * t741 + t1548;
t753 = -t766 - t1482;
t710 = t1240 * t753 + t1427 * t1443 - t1508;
t716 = t1492 - t767;
t1264 = t1237 * t710 + t1241 * t716 + t1530;
t811 = t848 - t1509;
t860 = t1420 - t1505;
t726 = -t1236 * t811 + t1240 * t860 - t1529;
t781 = pkin(3) * t1275 + t1419 + t1520;
t1263 = t1237 * t726 + t1241 * t781 + t1548;
t815 = t849 + t1551;
t863 = t1419 + t1547;
t729 = -t1236 * t815 + t1240 * t863 - t1578;
t789 = pkin(3) * t1446 - t1420 - t1567;
t1262 = t1237 * t729 + t1241 * t789 + t1589;
t1055 = t1142 * t1236 + t1455;
t929 = -pkin(2) * t1055 + t1001;
t981 = -pkin(9) * t1055 + t1395;
t988 = t1056 * t1241 - t1090 * t1237;
t1261 = pkin(8) * t988 + t1237 * t981 + t1241 * t929;
t1062 = t1149 * t1240 + t1391;
t932 = -pkin(2) * t1062 + t1002;
t989 = -pkin(9) * t1062 + t1394;
t990 = t1063 * t1241 + t1094 * t1237;
t1260 = pkin(8) * t990 + t1237 * t989 + t1241 * t932;
t1118 = t1170 * t1237 + t1171 * t1241;
t1259 = pkin(8) * t1118 + t1061;
t1011 = -t1089 * t1236 + t1093 * t1240;
t852 = -pkin(9) * t1011 - t881;
t959 = t1013 * t1241 - t1122 * t1237;
t1256 = pkin(8) * t959 - t1011 * t1428 + t1237 * t852;
t868 = t1080 * t1237 + t1241 * t882;
t1255 = pkin(8) * t868 + t1334 * t881;
t1227 = t1232 * t1228;
t1213 = t1238 * qJDD(1) + t1242 * t1435;
t1204 = t1360 * t1371;
t1203 = (t1229 - t1230) * t1371;
t1199 = -pkin(7) * t1213 + g(3) * t1242;
t1174 = t1360 * t1356;
t1168 = (t1359 + (qJD(2) + t1223) * t1411) * t1232;
t1165 = t1198 * t1241 - t1229 * t1356;
t1164 = -t1230 * t1356 - t1237 * t1324;
t1156 = t1201 * t1241 - t1377;
t1155 = -t1200 * t1237 + t1378;
t1141 = (t1198 * t1234 + (qJD(1) * t1227 + t1234 * t1372) * t1411) * t1237;
t1140 = (-t1227 * t1366 + (-t1219 + (-t1223 * t1412 + t1358) * t1232) * t1234) * t1241;
t1120 = (t1189 * t1236 + t1191 * t1240) * t1216;
t1119 = -t1169 * t1237 + t1172 * t1241;
t1111 = t1232 * t1172 + t1234 * t1283;
t1110 = -t1232 * t1171 + t1234 * t1282;
t1109 = -t1232 * t1170 + t1234 * t1284;
t1108 = -t1234 * t1172 + t1232 * t1283;
t1088 = -t1232 * t1168 + t1234 * t1285;
t1087 = t1234 * t1168 + t1232 * t1285;
t1085 = t1139 * t1236 - t1191 * t1374;
t1083 = -t1189 * t1375 - t1135;
t1082 = t1241 * t1121 - t1237 * t1279;
t1079 = -t1232 * t1203 + t1234 * t1287;
t1078 = t1232 * t1204 + t1234 * t1286;
t1077 = -t1234 * t1204 + t1232 * t1286;
t1069 = t1166 * t1236 - t1390;
t1068 = t1167 * t1240 + t1460;
t1050 = -t1238 * t1111 + t1157 * t1242;
t1049 = t1111 * t1242 + t1238 * t1157;
t1033 = t1086 * t1241 + t1347;
t1032 = t1084 * t1241 - t1347;
t1031 = -t1238 * t1088 + t1145 * t1242;
t1030 = t1088 * t1242 + t1238 * t1145;
t1029 = t1232 * t1175 + t1234 * t1288;
t1028 = -t1234 * t1175 + t1232 * t1288;
t1016 = -t1232 * t1120 + t1234 * t1448;
t1015 = -t1238 * t1078 + t1118 * t1242;
t1014 = t1078 * t1242 + t1238 * t1118;
t1010 = t1090 * t1236 + t1094 * t1240;
t1004 = t1071 * t1241 - t1089 * t1237;
t1003 = t1070 * t1241 - t1093 * t1237;
t991 = -t1364 + (-t1108 * t1232 - t1111 * t1234) * pkin(8);
t987 = -t1363 + (-t1087 * t1232 - t1088 * t1234) * pkin(8);
t986 = -pkin(1) * t1108 + t1232 * t1143 + t1234 * t1325;
t975 = t1012 * t1241 - t1147 * t1237;
t974 = -pkin(1) * t1087 + t1232 * t1144 + t1234 * t1326;
t961 = -t1232 * t1085 + t1234 * t1277;
t960 = -t1232 * t1083 + t1234 * t1278;
t955 = pkin(8) * t1061 * t1234 - pkin(1) * t1028;
t954 = -t1238 * t1029 + t1061 * t1242;
t953 = t1029 * t1242 + t1238 * t1061;
t949 = -pkin(1) * t1077 + t1234 * t1259;
t938 = -pkin(2) * t1094 + pkin(9) * t1063 + t1395;
t935 = -t1232 * t1069 + t1234 * t1289;
t934 = -t1232 * t1068 + t1234 * t1290;
t933 = (-t1028 * t1232 - t1029 * t1234) * pkin(8);
t931 = pkin(2) * t1090 + pkin(9) * t1056 - t1394;
t930 = (-t1077 * t1232 - t1078 * t1234) * pkin(8) - t1288;
t926 = -t1232 * t1062 + t1234 * t1291;
t925 = t1234 * t1062 + t1232 * t1291;
t920 = -t1232 * t1055 + t1234 * t1292;
t919 = t1234 * t1055 + t1232 * t1292;
t876 = -t1232 * t1010 + t1234 * t1294;
t873 = -t1232 * t1011 + t1234 * t1293;
t872 = t1234 * t1011 + t1232 * t1293;
t869 = -pkin(2) * t1080 + pkin(9) * t882;
t866 = t1137 * t1240 + t1236 * t871;
t862 = -t1238 * t926 + t1242 * t990;
t861 = t1238 * t990 + t1242 * t926;
t855 = -t1238 * t920 + t1242 * t988;
t854 = t1238 * t988 + t1242 * t920;
t840 = pkin(2) * t1122 + pkin(9) * t1013 + t882;
t833 = -t1238 * t873 + t1242 * t959;
t832 = t1238 * t959 + t1242 * t873;
t810 = -t1232 * t881 + t1234 * t1297;
t809 = t1232 * t1297 + t1234 * t881;
t802 = t1236 * t823 + t1350;
t801 = t1236 * t822 - t1350;
t798 = -t1237 * t870 + t1241 * t867;
t785 = t1236 * t837 + t1240 * t1257;
t784 = t1236 * t836 - t1240 * t907;
t770 = -t1237 * t932 + t1241 * t989 + (-t1232 * t925 - t1234 * t926) * pkin(8);
t765 = -t1237 * t929 + t1241 * t981 + (-t1232 * t919 - t1234 * t920) * pkin(8);
t762 = -pkin(1) * t925 - t1232 * t938 + t1234 * t1260;
t761 = -t1238 * t810 + t1242 * t868;
t760 = t1238 * t868 + t1242 * t810;
t759 = -pkin(1) * t919 - t1232 * t931 + t1234 * t1261;
t754 = -t1232 * t866 + t1234 * t1312;
t743 = t1017 * t1240 + t1236 * t757;
t742 = t1011 * t1429 + t1241 * t852 + (-t1232 * t872 - t1234 * t873) * pkin(8);
t738 = -t1237 * t821 + t1241 * t804;
t737 = -t1237 * t820 + t1241 * t803;
t728 = -t1237 * t835 + t1241 * t787;
t727 = -t1237 * t834 + t1241 * t786;
t719 = t1236 * t863 + t1240 * t815 - t1566;
t717 = t1236 * t860 + t1240 * t811 + t1519;
t714 = -pkin(1) * t872 - t1232 * t840 + t1234 * t1256;
t707 = t1236 * t753 + t1357 * t1443 + t1507;
t706 = -t1232 * t802 + t1234 * t1313;
t705 = -t1232 * t801 + t1234 * t1314;
t704 = t1333 * t881 + (-t1232 * t809 - t1234 * t810) * pkin(8);
t702 = -pkin(1) * t809 - t1232 * t869 + t1234 * t1255;
t699 = -t1232 * t785 + t1234 * t1315;
t698 = -t1232 * t784 + t1234 * t1316;
t695 = -t1232 * t777 + t1234 * t1317;
t694 = t1232 * t1317 + t1234 * t777;
t693 = t1236 * t772 + t1240 * t764 + t1519;
t691 = t1236 * t771 + t1240 * t763 + t1566;
t690 = -t1237 * t755 + t1241 * t744;
t686 = -t1232 * t768 + t1234 * t1318;
t685 = t1232 * t1318 + t1234 * t768;
t684 = -pkin(2) * t1443 + t1236 * t711 + t1240 * t853 + t1507;
t675 = -t1232 * t751 + t1234 * t1319;
t674 = t1232 * t1319 + t1234 * t751;
t672 = -t1237 * t789 + t1241 * t729 - t1597;
t671 = -t1232 * t743 + t1234 * t1320;
t670 = -t1238 * t695 + t1242 * t725;
t669 = t1238 * t725 + t1242 * t695;
t668 = -t1237 * t781 + t1241 * t726 + t1553;
t667 = -t1232 * t730 + t1234 * t1321;
t666 = t1232 * t1321 + t1234 * t730;
t664 = pkin(9) * t752 + (-qJ(4) * t1236 + t1357) * t766;
t662 = -t1238 * t686 + t1242 * t715;
t661 = t1238 * t715 + t1242 * t686;
t655 = -t1232 * t708 + t1234 * t1322;
t654 = t1232 * t1322 + t1234 * t708;
t653 = -t1232 * t719 + t1234 * t1262 - t1596;
t652 = -t1237 * t741 + t1241 * t701 + t1553;
t651 = -t1232 * t717 + t1234 * t1263 - t1562;
t650 = -t1237 * t716 + t1241 * t710 + t1531;
t649 = -t1237 * t732 + t1241 * t697 + t1597;
t648 = -t1238 * t675 + t1242 * t700;
t647 = t1238 * t700 + t1242 * t675;
t646 = -t1238 * t667 + t1242 * t688;
t645 = t1238 * t688 + t1242 * t667;
t644 = -t1237 * t703 + t1241 * t689 + t1531;
t640 = -t1232 * t707 + t1234 * t1264 - t1549;
t639 = -t1232 * t693 + t1234 * t1265 - t1562;
t637 = -t1232 * t691 + t1234 * t1266 + t1596;
t633 = -pkin(2) * t824 + pkin(9) * t778 + t1236 * t679 + t1240 * t681;
t632 = -pkin(2) * t739 + pkin(9) * t709 + t1236 * t696 + t1240 * t687;
t631 = -t1238 * t655 + t1242 * t682;
t630 = t1238 * t682 + t1242 * t655;
t629 = -pkin(2) * t812 + pkin(9) * t769 + t1236 * t673 + t1240 * t678;
t628 = -t1232 * t684 + t1234 * t1267 - t1549;
t625 = -t1237 * t692 + t1241 * t680 + (-t1232 * t674 - t1234 * t675) * pkin(8);
t622 = -pkin(2) * t756 + pkin(9) * t731 + t1236 * t627 + t1240 * t683;
t621 = -pkin(1) * t674 - t1232 * t664 + t1234 * t1268;
t619 = -t1237 * t659 + t1241 * t638 + (-t1232 * t694 - t1234 * t695) * pkin(8);
t617 = -t1237 * t656 + t1241 * t634 + (-t1232 * t685 - t1234 * t686) * pkin(8);
t616 = -t1237 * t658 + t1241 * t643 + (-t1232 * t654 - t1234 * t655) * pkin(8);
t615 = -t1232 * t635 + t1234 * t1323;
t614 = t1232 * t1323 + t1234 * t635;
t613 = -pkin(1) * t694 - t1232 * t633 + t1234 * t1270;
t611 = -pkin(1) * t685 - t1232 * t629 + t1234 * t1271;
t610 = -pkin(1) * t654 - t1232 * t632 + t1234 * t1269;
t609 = -t1237 * t626 + t1241 * t624 + (-t1232 * t666 - t1234 * t667) * pkin(8);
t608 = -t1238 * t615 + t1242 * t623;
t607 = t1238 * t623 + t1242 * t615;
t605 = -pkin(2) * t641 + pkin(9) * t636 + t1236 * t620 + t1240 * t618;
t604 = -pkin(1) * t666 - t1232 * t622 + t1234 * t1272;
t603 = -t1237 * t612 + t1241 * t606 + (-t1232 * t614 - t1234 * t615) * pkin(8);
t602 = -pkin(1) * t614 - t1232 * t605 + t1234 * t1273;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1213, -t1214, 0, t1177, 0, 0, 0, 0, 0, 0, t1050, t1031, t1015, t954, 0, 0, 0, 0, 0, 0, t855, t862, t833, t761, 0, 0, 0, 0, 0, 0, t1556, -t735, t1534, t648, 0, 0, 0, 0, 0, 0, t1556, t1534, t735, t631, 0, 0, 0, 0, 0, 0, t662, t670, t646, t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1214, -t1213, 0, t1176, 0, 0, 0, 0, 0, 0, t1049, t1030, t1014, t953, 0, 0, 0, 0, 0, 0, t854, t861, t832, t760, 0, 0, 0, 0, 0, 0, t1554, t746, t1532, t647, 0, 0, 0, 0, 0, 0, t1554, t1532, -t746, t630, 0, 0, 0, 0, 0, 0, t661, t669, t645, t607; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1108, t1087, t1077, t1028, 0, 0, 0, 0, 0, 0, t919, t925, t872, t809, 0, 0, 0, 0, 0, 0, t1537, t794, t1518, t674, 0, 0, 0, 0, 0, 0, t1537, t1518, -t794, t654, 0, 0, 0, 0, 0, 0, t685, t694, t666, t614; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1214, 0, -t1213, 0, t1331, -t1199, -t1176, -pkin(7) * t1176, -t1238 * t1141 + t1165 * t1242, -t1238 * t1079 + t1119 * t1242, -t1238 * t1109 + t1155 * t1242, -t1238 * t1140 + t1164 * t1242, -t1238 * t1110 + t1156 * t1242, t1174 * t1242 + t1238 * t1373, -pkin(7) * t1049 - t1238 * t986 + t1242 * t991, -pkin(7) * t1030 - t1238 * t974 + t1242 * t987, -pkin(7) * t1014 - t1238 * t949 + t1242 * t930, -pkin(7) * t953 - t1238 * t955 + t1242 * t933, t1033 * t1242 - t1238 * t961, -t1238 * t876 + t1242 * t975, t1003 * t1242 - t1238 * t934, t1032 * t1242 - t1238 * t960, t1004 * t1242 - t1238 * t935, -t1238 * t1016 + t1082 * t1242, -pkin(7) * t854 - t1238 * t759 + t1242 * t765, -pkin(7) * t861 - t1238 * t762 + t1242 * t770, -pkin(7) * t832 - t1238 * t714 + t1242 * t742, -pkin(7) * t760 - t1238 * t702 + t1242 * t704, t1462, -t1593, t1580, t1514, -t1594, t1515, -t1238 * t651 + t1242 * t668 - t1577, -t1238 * t653 + t1242 * t672 - t1598, -t1238 * t640 + t1242 * t650 - t1561, -pkin(7) * t647 - t1238 * t621 + t1242 * t625, t1462, t1580, t1593, t1515, t1594, t1514, -t1238 * t639 + t1242 * t652 - t1577, -t1238 * t628 + t1242 * t644 - t1561, -t1238 * t637 + t1242 * t649 + t1598, -pkin(7) * t630 - t1238 * t610 + t1242 * t616, -t1238 * t706 + t1242 * t738, -t1238 * t671 + t1242 * t690, -t1238 * t698 + t1242 * t727, -t1238 * t705 + t1242 * t737, -t1238 * t699 + t1242 * t728, -t1238 * t754 + t1242 * t798, -pkin(7) * t661 - t1238 * t611 + t1242 * t617, -pkin(7) * t669 - t1238 * t613 + t1242 * t619, -pkin(7) * t645 - t1238 * t604 + t1242 * t609, -pkin(7) * t607 - t1238 * t602 + t1242 * t603; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1213, 0, t1214, 0, t1199, t1331, t1177, pkin(7) * t1177, t1141 * t1242 + t1238 * t1165, t1079 * t1242 + t1238 * t1119, t1109 * t1242 + t1238 * t1155, t1140 * t1242 + t1238 * t1164, t1110 * t1242 + t1238 * t1156, t1238 * t1174 - t1242 * t1373, pkin(7) * t1050 + t1238 * t991 + t1242 * t986, pkin(7) * t1031 + t1238 * t987 + t1242 * t974, pkin(7) * t1015 + t1238 * t930 + t1242 * t949, pkin(7) * t954 + t1238 * t933 + t1242 * t955, t1238 * t1033 + t1242 * t961, t1238 * t975 + t1242 * t876, t1238 * t1003 + t1242 * t934, t1238 * t1032 + t1242 * t960, t1238 * t1004 + t1242 * t935, t1016 * t1242 + t1238 * t1082, pkin(7) * t855 + t1238 * t765 + t1242 * t759, pkin(7) * t862 + t1238 * t770 + t1242 * t762, pkin(7) * t833 + t1238 * t742 + t1242 * t714, pkin(7) * t761 + t1238 * t704 + t1242 * t702, t1463, t1591, t1579, t1511, t1592, t1512, t1238 * t668 + t1242 * t651 + t1576, t1238 * t672 + t1242 * t653 - t1599, t1238 * t650 + t1242 * t640 + t1560, pkin(7) * t648 + t1238 * t625 + t1242 * t621, t1463, t1579, -t1591, t1512, -t1592, t1511, t1238 * t652 + t1242 * t639 + t1576, t1238 * t644 + t1242 * t628 + t1560, t1238 * t649 + t1242 * t637 + t1599, pkin(7) * t631 + t1238 * t616 + t1242 * t610, t1238 * t738 + t1242 * t706, t1238 * t690 + t1242 * t671, t1238 * t727 + t1242 * t698, t1238 * t737 + t1242 * t705, t1238 * t728 + t1242 * t699, t1238 * t798 + t1242 * t754, pkin(7) * t662 + t1238 * t617 + t1242 * t611, pkin(7) * t670 + t1238 * t619 + t1242 * t613, pkin(7) * t646 + t1238 * t609 + t1242 * t604, pkin(7) * t608 + t1238 * t603 + t1242 * t602; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1217, t1218, 0, 0, (-qJD(1) * t1342 * t1370 + t1198 * t1232) * t1237, t1234 * t1203 + t1232 * t1287, t1234 * t1170 + t1232 * t1284, (t1228 * t1342 * t1412 + t1232 * t1324) * t1241, t1234 * t1171 + t1232 * t1282, t1234 * t1222, pkin(1) * t1111 - t1234 * t1143 + t1232 * t1325, pkin(1) * t1088 - t1234 * t1144 + t1232 * t1326, pkin(1) * t1078 + t1232 * t1259, pkin(1) * t1029 + t1061 * t1425, t1234 * t1085 + t1232 * t1277, t1234 * t1010 + t1232 * t1294, t1234 * t1068 + t1232 * t1290, t1234 * t1083 + t1232 * t1278, t1234 * t1069 + t1232 * t1289, t1234 * t1120 + t1232 * t1448, pkin(1) * t920 + t1232 * t1261 + t1234 * t931, pkin(1) * t926 + t1232 * t1260 + t1234 * t938, pkin(1) * t873 + t1232 * t1256 + t1234 * t840, pkin(1) * t810 + t1232 * t1255 + t1234 * t869, t1437, t1581, t1565, t1491, t1582, t1490, t1232 * t1263 + t1234 * t717 + t1563, t1232 * t1262 + t1234 * t719 + t1595, t1232 * t1264 + t1234 * t707 + t1550, pkin(1) * t675 + t1232 * t1268 + t1234 * t664, t1437, t1565, -t1581, t1490, -t1582, t1491, t1232 * t1265 + t1234 * t693 + t1563, t1232 * t1267 + t1234 * t684 + t1550, t1232 * t1266 + t1234 * t691 - t1595, pkin(1) * t655 + t1232 * t1269 + t1234 * t632, t1232 * t1313 + t1234 * t802, t1232 * t1320 + t1234 * t743, t1232 * t1316 + t1234 * t784, t1232 * t1314 + t1234 * t801, t1232 * t1315 + t1234 * t785, t1232 * t1312 + t1234 * t866, pkin(1) * t686 + t1232 * t1271 + t1234 * t629, pkin(1) * t695 + t1232 * t1270 + t1234 * t633, pkin(1) * t667 + t1232 * t1272 + t1234 * t622, pkin(1) * t615 + t1232 * t1273 + t1234 * t605;];
tauB_reg  = t1;
