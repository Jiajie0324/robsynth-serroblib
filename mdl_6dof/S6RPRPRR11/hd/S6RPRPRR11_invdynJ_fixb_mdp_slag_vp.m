% Calculate vector of inverse dynamics joint torques for
% S6RPRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRPRR11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRPRR11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR11_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR11_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR11_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RPRPRR11_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:15:47
% EndTime: 2019-03-09 04:16:17
% DurationCPUTime: 22.84s
% Computational Cost: add. (19064->747), mult. (60985->1037), div. (0->0), fcn. (54221->18), ass. (0->310)
t775 = cos(pkin(12));
t778 = sin(qJ(3));
t926 = cos(pkin(7));
t863 = t778 * t926;
t839 = t775 * t863;
t772 = sin(pkin(7));
t927 = cos(pkin(6));
t860 = t927 * t772;
t840 = t778 * t860;
t771 = sin(pkin(12));
t773 = sin(pkin(6));
t884 = qJDD(1) * t773;
t866 = t771 * t884;
t932 = cos(qJ(3));
t895 = qJD(1) * t773;
t872 = t771 * t895;
t836 = t926 * t932;
t814 = t775 * t836;
t815 = t932 * t860;
t955 = t773 * t814 + t815;
t947 = qJD(1) * t955 - t778 * t872;
t614 = qJD(3) * t947 + qJDD(1) * t840 + t839 * t884 + t866 * t932;
t827 = t927 * t926;
t883 = qJDD(1) * t775;
t865 = t773 * t883;
t709 = -qJDD(1) * t827 + t772 * t865 - qJDD(3);
t770 = sin(pkin(13));
t774 = cos(pkin(13));
t596 = t614 * t770 + t774 * t709;
t597 = t614 * t774 - t709 * t770;
t777 = sin(qJ(5));
t780 = cos(qJ(5));
t852 = t780 * t596 + t777 * t597;
t687 = t773 * (t771 * t932 + t839) + t840;
t680 = t687 * qJD(1);
t871 = t775 * t895;
t710 = -qJD(1) * t827 + t772 * t871 - qJD(3);
t623 = t680 * t774 - t710 * t770;
t659 = t770 * t680;
t851 = t710 * t774 + t659;
t951 = t780 * t623 - t777 * t851;
t521 = qJD(5) * t951 + t852;
t518 = qJDD(6) + t521;
t779 = cos(qJ(6));
t516 = t779 * t518;
t776 = sin(qJ(6));
t620 = t780 * t851;
t572 = t623 * t777 + t620;
t570 = qJD(6) + t572;
t961 = t570 ^ 2;
t962 = -t776 * t961 + t516;
t668 = qJD(5) - t947;
t960 = t572 * t668;
t781 = cos(qJ(1));
t862 = t781 * t927;
t931 = sin(qJ(1));
t717 = t771 * t862 + t775 * t931;
t903 = t773 * t781;
t905 = t772 * t778;
t810 = t931 * t771 - t775 * t862;
t945 = t810 * t926;
t633 = -t717 * t932 + t778 * t945 + t903 * t905;
t864 = t773 * t926;
t692 = t772 * t810 - t781 * t864;
t769 = pkin(13) + qJ(5);
t763 = sin(t769);
t764 = cos(t769);
t600 = t633 * t764 - t692 * t763;
t877 = t772 * t932;
t630 = t717 * t778 + t877 * t903 + t932 * t945;
t959 = t600 * t776 + t630 * t779;
t958 = t600 * t779 - t630 * t776;
t954 = t633 * t763 + t692 * t764;
t728 = t770 * t777 - t780 * t774;
t899 = t668 * t728;
t729 = t770 * t780 + t774 * t777;
t898 = t668 * t729;
t679 = t687 * qJD(3);
t615 = qJD(1) * t679 - qJDD(1) * t955 + t778 * t866;
t767 = t773 ^ 2;
t946 = t767 * (t771 ^ 2 + t775 ^ 2);
t879 = pkin(1) * t927;
t757 = t775 * t879;
t907 = t771 * t773;
t787 = t927 * pkin(2) + (-pkin(9) * t926 - qJ(2)) * t907;
t688 = t757 + t787;
t908 = t771 * t772;
t705 = (-pkin(2) * t775 - pkin(9) * t908 - pkin(1)) * t773;
t624 = -t688 * t772 + t926 * t705;
t906 = t771 * t778;
t686 = t773 * t906 - t955;
t579 = pkin(3) * t686 - qJ(4) * t687 + t624;
t904 = t773 * t775;
t714 = t772 * t904 - t827;
t720 = qJ(2) * t904 + t771 * t879;
t788 = (t775 * t864 + t860) * pkin(9);
t683 = t788 + t720;
t880 = t683 * t932 + t688 * t863 + t705 * t905;
t584 = -qJ(4) * t714 + t880;
t543 = t774 * t579 - t584 * t770;
t629 = t687 * t774 - t714 * t770;
t524 = pkin(4) * t686 - pkin(10) * t629 + t543;
t544 = t770 * t579 + t774 * t584;
t628 = t687 * t770 + t714 * t774;
t529 = -pkin(10) * t628 + t544;
t944 = t777 * t524 + t780 * t529;
t704 = (-t771 * t863 + t775 * t932) * t895;
t847 = t772 * t872;
t647 = -t704 * t770 + t774 * t847;
t648 = t704 * t774 + t770 * t847;
t715 = -t770 * t905 + t774 * t926;
t716 = t770 * t926 + t774 * t905;
t817 = t715 * t780 - t716 * t777;
t873 = t780 * t932;
t874 = t777 * t932;
t893 = qJD(3) * t772;
t943 = t647 * t777 + t648 * t780 - t817 * qJD(5) - (-t770 * t874 + t774 * t873) * t893;
t654 = t715 * t777 + t716 * t780;
t942 = t647 * t780 - t648 * t777 + t654 * qJD(5) + (t770 * t873 + t774 * t874) * t893;
t858 = qJD(1) * t927;
t844 = pkin(1) * t858;
t713 = qJ(2) * t871 + t771 * t844;
t658 = qJD(1) * t788 + t713;
t749 = t775 * t844;
t669 = qJD(1) * t787 + t749;
t696 = qJD(1) * t705 + qJD(2);
t588 = -t778 * t658 + t669 * t836 + t696 * t877;
t613 = pkin(3) * t680 - qJ(4) * t947;
t550 = -t588 * t770 + t774 * t613;
t536 = -pkin(10) * t774 * t947 + pkin(4) * t680 + t550;
t551 = t774 * t588 + t770 * t613;
t917 = t947 * t770;
t546 = -pkin(10) * t917 + t551;
t928 = pkin(10) + qJ(4);
t740 = t928 * t770;
t741 = t928 * t774;
t816 = -t740 * t780 - t741 * t777;
t941 = qJD(4) * t728 - qJD(5) * t816 + t777 * t536 + t780 * t546;
t700 = -t740 * t777 + t741 * t780;
t940 = -qJD(4) * t729 - qJD(5) * t700 - t536 * t780 + t546 * t777;
t591 = -t628 * t777 + t629 * t780;
t682 = t686 * t779;
t939 = -t591 * t776 + t682;
t703 = (t771 * t836 + t775 * t778) * t895;
t892 = qJD(3) * t778;
t869 = t772 * t892;
t938 = t703 - t869;
t837 = t927 * t931;
t794 = t781 * t771 + t775 * t837;
t876 = t773 * t931;
t937 = -t772 * t876 + t794 * t926;
t935 = pkin(3) * t709 + qJDD(4);
t612 = qJDD(5) + t615;
t616 = -t669 * t772 + t926 * t696;
t567 = -pkin(3) * t947 - qJ(4) * t680 + t616;
t589 = t658 * t932 + t669 * t863 + t696 * t905;
t569 = -qJ(4) * t710 + t589;
t532 = t774 * t567 - t569 * t770;
t512 = -pkin(4) * t947 - pkin(10) * t623 + t532;
t533 = t770 * t567 + t774 * t569;
t514 = -pkin(10) * t851 + t533;
t495 = t512 * t777 + t514 * t780;
t842 = qJDD(1) * t879;
t885 = qJD(1) * qJD(2);
t867 = t773 * t885;
t698 = qJ(2) * t865 + t771 * t842 + t775 * t867;
t640 = qJDD(1) * t788 + t698;
t747 = t775 * t842;
t641 = qJDD(1) * t787 - t771 * t867 + t747;
t694 = qJDD(1) * t705 + qJDD(2);
t812 = qJD(3) * t836;
t868 = qJD(3) * t932;
t843 = t772 * t868;
t792 = t640 * t932 + t641 * t863 - t658 * t892 + t669 * t812 + t694 * t905 + t696 * t843;
t531 = -qJ(4) * t709 - qJD(4) * t710 + t792;
t607 = -t641 * t772 + t926 * t694;
t542 = pkin(3) * t615 - qJ(4) * t614 - qJD(4) * t680 + t607;
t502 = -t531 * t770 + t774 * t542;
t493 = pkin(4) * t615 - pkin(10) * t597 + t502;
t503 = t774 * t531 + t770 * t542;
t499 = -pkin(10) * t596 + t503;
t856 = -t780 * t493 + t499 * t777;
t933 = qJD(5) * t495 + t856;
t482 = -pkin(5) * t612 + t933;
t718 = -t771 * t837 + t781 * t775;
t635 = t718 * t932 - t778 * t937;
t693 = t772 * t794 + t864 * t931;
t601 = -t635 * t763 + t693 * t764;
t805 = g(1) * t601 + g(2) * t954 + g(3) * (-t687 * t763 - t714 * t764);
t934 = t570 * (pkin(5) * t951 + pkin(11) * t570) + t482 + t805;
t930 = pkin(1) * t767;
t925 = qJ(4) * t615;
t891 = qJD(5) * t777;
t520 = -qJD(5) * t620 - t777 * t596 + t780 * t597 - t623 * t891;
t888 = qJD(6) * t779;
t881 = t779 * t520 + t776 * t612 + t668 * t888;
t889 = qJD(6) * t776;
t500 = -t889 * t951 + t881;
t924 = t500 * t776;
t923 = t518 * t776;
t920 = t951 * t776;
t553 = -t779 * t668 + t920;
t922 = t553 * t570;
t555 = t668 * t776 + t779 * t951;
t921 = t555 * t570;
t919 = t589 * t710;
t678 = (t815 + (t814 - t906) * t773) * qJD(3);
t916 = t678 * t770;
t915 = t678 * t774;
t914 = t686 * t776;
t912 = t729 * t776;
t911 = t729 * t779;
t910 = t764 * t776;
t909 = t764 * t779;
t813 = qJD(2) * t771 * t864;
t894 = qJD(2) * t773;
t870 = t775 * t894;
t783 = t688 * t812 + t705 * t843 + t932 * t870 + (-qJD(3) * t683 - t813) * t778;
t563 = -t714 * qJD(4) + t783;
t845 = t894 * t908;
t592 = pkin(3) * t679 - qJ(4) * t678 - qJD(4) * t687 + t845;
t538 = t774 * t563 + t770 * t592;
t900 = pkin(5) * t680 - t940;
t897 = t781 * pkin(1) + qJ(2) * t876;
t890 = qJD(5) * t780;
t887 = t709 * MDP(12);
t568 = t710 * pkin(3) + qJD(4) - t588;
t886 = -qJD(4) + t568;
t882 = g(1) * t931;
t762 = -pkin(4) * t774 - pkin(3);
t878 = t770 * t932;
t875 = t774 * t932;
t782 = qJD(1) ^ 2;
t861 = t782 * t927;
t807 = t777 * t493 + t780 * t499 + t512 * t890 - t514 * t891;
t481 = pkin(11) * t612 + t807;
t835 = qJD(3) * t863;
t809 = t778 * t640 - t641 * t836 + t658 * t868 + t669 * t835 - t694 * t877 + t696 * t869;
t534 = t809 + t935;
t513 = pkin(4) * t596 + t534;
t488 = pkin(5) * t521 - pkin(11) * t520 + t513;
t857 = -t776 * t481 + t779 * t488;
t855 = t520 * t776 - t779 * t612;
t537 = -t563 * t770 + t774 * t592;
t854 = -t779 * t680 + t776 * t899;
t853 = t680 * t776 + t779 * t899;
t849 = t570 * t779;
t557 = pkin(4) * t917 + t589;
t838 = -pkin(1) * t931 + qJ(2) * t903;
t634 = t718 * t778 + t932 * t937;
t834 = g(1) * t630 - g(2) * t634;
t833 = qJD(2) * t858;
t831 = g(2) * t903 - g(3) * t927;
t673 = pkin(5) * t728 - pkin(11) * t729 + t762;
t829 = pkin(11) * t680 - qJD(6) * t673 + t941;
t828 = -pkin(5) * t898 - pkin(11) * t899 + qJD(6) * t700 + t557;
t576 = t683 * t868 + t688 * t835 + t705 * t869 + t778 * t870 + t813 * t932;
t826 = t779 * t481 + t776 * t488;
t490 = pkin(11) * t668 + t495;
t547 = pkin(4) * t851 + t568;
t507 = t572 * pkin(5) - pkin(11) * t951 + t547;
t486 = t490 * t779 + t507 * t776;
t825 = t490 * t776 - t507 * t779;
t497 = pkin(11) * t686 + t944;
t785 = -t778 * t683 + t688 * t836 + t705 * t877;
t587 = t714 * pkin(3) - t785;
t552 = t628 * pkin(4) + t587;
t590 = t780 * t628 + t629 * t777;
t508 = t590 * pkin(5) - t591 * pkin(11) + t552;
t824 = t497 * t779 + t508 * t776;
t823 = -t497 * t776 + t508 * t779;
t494 = t512 * t780 - t514 * t777;
t519 = pkin(4) * t679 - pkin(10) * t915 + t537;
t528 = -pkin(10) * t916 + t538;
t822 = t519 * t780 - t528 * t777;
t821 = t524 * t780 - t529 * t777;
t559 = t591 * t779 + t914;
t818 = (-qJ(2) * t872 + t749) * t771 - t713 * t775;
t811 = g(1) * t781 + g(2) * t931;
t556 = pkin(4) * t916 + t576;
t806 = t777 * t519 + t524 * t890 + t780 * t528 - t529 * t891;
t804 = g(1) * t634 + g(2) * t630 + g(3) * t686;
t803 = -g(1) * t635 + g(2) * t633 - g(3) * t687;
t801 = -t776 * t654 - t779 * t877;
t800 = -t779 * t654 + t776 * t877;
t799 = t729 * t888 - t854;
t798 = -t729 * t889 - t853;
t796 = -t534 + t804;
t489 = -pkin(5) * t668 - t494;
t789 = -pkin(11) * t518 + (t489 + t494) * t570;
t784 = t804 - t809;
t750 = -pkin(1) * t884 + qJDD(2);
t719 = -qJ(2) * t907 + t757;
t697 = t747 + (-qJ(2) * qJDD(1) - t885) * t907;
t626 = t687 * t764 - t714 * t763;
t602 = t635 * t764 + t693 * t763;
t561 = t602 * t779 + t634 * t776;
t560 = -t602 * t776 + t634 * t779;
t549 = qJD(5) * t591 + t678 * t729;
t548 = -qJD(5) * t590 - t678 * t728;
t510 = qJD(6) * t559 + t548 * t776 - t679 * t779;
t509 = qJD(6) * t939 + t548 * t779 + t679 * t776;
t504 = pkin(5) * t549 - pkin(11) * t548 + t556;
t501 = qJD(6) * t555 + t855;
t496 = -pkin(5) * t686 - t821;
t484 = -pkin(5) * t679 + qJD(5) * t944 - t822;
t483 = pkin(11) * t679 + t806;
t480 = -qJD(6) * t486 + t857;
t479 = -qJD(6) * t825 + t826;
t1 = [(g(1) * t954 - g(2) * t601 - t495 * t679 + t513 * t591 + t552 * t520 + t547 * t548 + t556 * t951 - t944 * t612 - t806 * t668 - t807 * t686) * MDP(25) + (t538 * t947 - t544 * t615 - t503 * t686 - t533 * t679 + t576 * t623 + t587 * t597 + t534 * t629 + t568 * t915 - g(1) * (-t633 * t770 - t692 * t774) - g(2) * (-t635 * t770 + t693 * t774)) * MDP(16) + (-t537 * t947 + t543 * t615 + t502 * t686 + t532 * t679 + t576 * t851 + t587 * t596 + t534 * t628 + t568 * t916 - g(1) * (t633 * t774 - t692 * t770) - g(2) * (t635 * t774 + t693 * t770)) * MDP(15) + (-t614 * t686 - t615 * t687 + t678 * t947 - t679 * t680) * MDP(9) + (-g(1) * t633 - g(2) * t635 + t576 * t710 + t607 * t686 + t624 * t615 + t616 * t679 - t709 * t785 + t714 * t809 - t845 * t947) * MDP(13) + (t885 * t946 + (-t697 * t771 + t698 * t775 + (-t719 * t771 + t720 * t775) * qJDD(1) - t811) * t773) * MDP(6) + (t500 * t939 - t501 * t559 - t509 * t553 - t510 * t555) * MDP(27) + (-t501 * t590 - t510 * t570 + t518 * t939 - t549 * t553) * MDP(29) + ((-qJD(6) * t824 - t483 * t776 + t504 * t779) * t570 + t823 * t518 + t480 * t590 - t825 * t549 + t484 * t553 + t496 * t501 - t482 * t939 + t489 * t510 - g(1) * t958 - g(2) * t561) * MDP(31) + (-(qJD(6) * t823 + t483 * t779 + t504 * t776) * t570 - t824 * t518 - t479 * t590 - t486 * t549 + t484 * t555 + t496 * t500 + t482 * t559 + t489 * t509 + g(1) * t959 - g(2) * t560) * MDP(32) + qJDD(1) * MDP(1) + (t520 * t591 + t548 * t951) * MDP(19) + (-t520 * t590 - t521 * t591 - t548 * t572 - t549 * t951) * MDP(20) + (t520 * t686 + t548 * t668 + t591 * t612 + t679 * t951) * MDP(21) + (t822 * t668 + t821 * t612 - t856 * t686 + t494 * t679 + t556 * t572 + t552 * t521 + t513 * t590 + t547 * t549 - g(1) * t600 - g(2) * t602 + (-t495 * t686 - t668 * t944) * qJD(5)) * MDP(24) + (t503 * t544 + t533 * t538 + t502 * t543 + t532 * t537 + t534 * t587 + t568 * t576 - g(1) * (-t717 * pkin(2) + t633 * pkin(3) - pkin(9) * t692 - qJ(4) * t630 + t838) - g(2) * (t718 * pkin(2) + t635 * pkin(3) + pkin(9) * t693 + t634 * qJ(4) + t897)) * MDP(18) + (t615 * t714 + t679 * t710 + t686 * t709) * MDP(11) + (-t614 * t714 - t678 * t710 - t687 * t709) * MDP(10) + (t612 * t686 + t668 * t679) * MDP(23) + (-t521 * t686 - t549 * t668 - t572 * t679 - t590 * t612) * MDP(22) + (t614 * t687 + t678 * t680) * MDP(8) + (t500 * t559 + t509 * t555) * MDP(26) + (t518 * t590 + t549 * t570) * MDP(30) + (t500 * t590 + t509 * t570 + t518 * t559 + t549 * t555) * MDP(28) + (-t698 * t927 - g(1) * t810 + g(2) * t794 + (t750 * t771 - t775 * t833) * t773 + (-t720 * t927 - t771 * t930) * qJDD(1)) * MDP(5) + (t697 * t927 + g(1) * t717 - g(2) * t718 + (-t750 * t775 - t771 * t833) * t773 + (t719 * t927 + t775 * t930) * qJDD(1)) * MDP(4) + (t698 * t720 + t697 * t719 - g(1) * t838 - g(2) * t897 + (-t750 * pkin(1) - qJD(2) * t818) * t773) * MDP(7) + (-g(2) * t781 + t882) * MDP(2) + (t607 * t687 + t624 * t614 + t616 * t678 + t680 * t845 + t709 * t880 + t710 * t783 + t714 * t792 - t834) * MDP(14) + (-t538 * t851 - t544 * t596 - t503 * t628 - t537 * t623 - t543 * t597 - t502 * t629 + (-t532 * t774 - t533 * t770) * t678 + t834) * MDP(17) + t811 * MDP(3) + t714 * t887; -t782 * MDP(6) * t946 + (qJDD(2) + t831) * MDP(7) + (t926 * t615 - t703 * t710 + (-t709 * t932 + t710 * t892 + t872 * t947) * t772) * MDP(13) + (t926 * t614 - t704 * t710 + (-t680 * t872 + t709 * t778 + t710 * t868) * t772) * MDP(14) + (t715 * t615 + t647 * t947 - t703 * t851 + (-t932 * t596 + (t778 * t851 + t878 * t947) * qJD(3)) * t772) * MDP(15) + (-t716 * t615 - t703 * t623 - t648 * t947 + (-t932 * t597 + (t623 * t778 + t875 * t947) * qJD(3)) * t772) * MDP(16) + (-t716 * t596 - t715 * t597 + t648 * t851 + t647 * t623 + (t623 * t878 - t851 * t875) * t893) * MDP(17) + (-g(1) * t876 + t502 * t715 + t503 * t716 - t532 * t647 - t533 * t648 - t568 * t703 + (-t932 * t534 + (-t532 * t878 + t533 * t875 + t568 * t778) * qJD(3)) * t772 + t831) * MDP(18) + (-t521 * t877 - t572 * t938 + t612 * t817 - t668 * t942) * MDP(24) + (-t520 * t877 - t654 * t612 + t668 * t943 - t938 * t951) * MDP(25) + (-t817 * t501 + t801 * t518 + (qJD(6) * t800 + t776 * t943 - t779 * t938) * t570 + t942 * t553) * MDP(31) + (-t817 * t500 + t800 * t518 + (-qJD(6) * t801 + t776 * t938 + t779 * t943) * t570 + t942 * t555) * MDP(32) + ((t771 * t861 - t883) * MDP(4) + (qJDD(1) * t771 + t775 * t861) * MDP(5) + (-pkin(1) * qJDD(1) + qJD(1) * t818 - t882) * MDP(7)) * t773; (-t588 * t710 - t616 * t947 - t792 - t803) * MDP(14) + (-t532 * t550 - t533 * t551 - t568 * t589 + (-t532 * t770 + t533 * t774) * qJD(4) + t796 * pkin(3) + (-t502 * t770 + t503 * t774 + t803) * qJ(4)) * MDP(18) - t947 ^ 2 * MDP(9) + (t710 * t947 + t614) * MDP(10) + (-t770 * t925 - pkin(3) * t596 - t589 * t659 - (t770 * t886 - t550) * t947 + (t796 - t919) * t774) * MDP(15) + (-t774 * t925 - pkin(3) * t597 - t589 * t623 - (t774 * t886 + t551) * t947 - t796 * t770) * MDP(16) + (t854 * t555 + t853 * t553 + (-t924 - t501 * t779 + (t553 * t776 - t555 * t779) * qJD(6)) * t729) * MDP(27) + (t784 - t919) * MDP(13) + (t500 * t911 + t555 * t798) * MDP(26) + (-(t673 * t776 + t700 * t779) * t518 - t479 * t728 - t816 * t500 + t482 * t911 - g(1) * (t634 * t910 + t635 * t779) - g(2) * (t630 * t910 - t633 * t779) - g(3) * (t686 * t910 + t687 * t779) + (t776 * t828 + t779 * t829) * t570 + t900 * t555 - t898 * t486 + t798 * t489) * MDP(32) + (-t501 * t728 - t518 * t912 - t553 * t898 - t570 * t799) * MDP(29) + ((t673 * t779 - t700 * t776) * t518 + t480 * t728 - t816 * t501 + t482 * t912 - g(1) * (-t634 * t909 + t635 * t776) - g(2) * (-t630 * t909 - t633 * t776) - g(3) * (-t686 * t909 + t687 * t776) + (t776 * t829 - t779 * t828) * t570 + t900 * t553 - t898 * t825 + t799 * t489) * MDP(31) + (-t520 * t728 - t521 * t729 + t572 * t899 - t898 * t951) * MDP(20) + (t513 * t729 + t762 * t520 - t899 * t547 - t557 * t951 - t700 * t612 + t668 * t941 - t804 * t763) * MDP(25) + (t500 * t728 + t516 * t729 + t555 * t898 + t570 * t798) * MDP(28) + (t518 * t728 + t570 * t898) * MDP(30) + (t513 * t728 + t762 * t521 + t898 * t547 - t557 * t572 + t612 * t816 + t668 * t940 + t804 * t764) * MDP(24) + (-t612 * t728 - t668 * t898) * MDP(22) + (t612 * t729 - t668 * t899) * MDP(21) + (t520 * t729 - t899 * t951) * MDP(19) - t887 + (t550 * t623 + t551 * t659 + (-qJ(4) * t596 - qJD(4) * t851 + t532 * t947 + t551 * t710 + t503) * t774 + (qJ(4) * t597 + qJD(4) * t623 + t533 * t947 - t502) * t770 + t803) * MDP(17) - t615 * MDP(11) + (-MDP(11) * t710 - MDP(13) * t616 - MDP(15) * t532 + MDP(16) * t533 - MDP(21) * t951 + MDP(22) * t572 - MDP(23) * t668 - MDP(24) * t494 + MDP(25) * t495 - MDP(8) * t947 + MDP(9) * t680) * t680; (-t623 * t947 + t596) * MDP(15) + (t851 * t947 + t597) * MDP(16) + (-t623 ^ 2 - t851 ^ 2) * MDP(17) + (t532 * t623 + t533 * t851 - t784 + t935) * MDP(18) + (t668 * t951 + t521) * MDP(24) + (t520 - t960) * MDP(25) + (-t553 * t951 + t962) * MDP(31) + (-t555 * t951 - t779 * t961 - t923) * MDP(32); -t572 ^ 2 * MDP(20) + (t520 + t960) * MDP(21) - t852 * MDP(22) + t612 * MDP(23) + (t495 * t668 - t805 - t933) * MDP(24) + (g(1) * t602 - g(2) * t600 + g(3) * t626 + t494 * t668 + t547 * t572 - t807) * MDP(25) + (t555 * t849 + t924) * MDP(26) + ((t500 - t922) * t779 + (-t501 - t921) * t776) * MDP(27) + (t570 * t849 + t923) * MDP(28) + t962 * MDP(29) + (-pkin(5) * t501 - t495 * t553 + t789 * t776 - t779 * t934) * MDP(31) + (-pkin(5) * t500 - t495 * t555 + t776 * t934 + t789 * t779) * MDP(32) + (t572 * MDP(19) + (-qJD(5) + t668) * MDP(22) - t547 * MDP(24) - t555 * MDP(28) + t553 * MDP(29) - t570 * MDP(30) + t825 * MDP(31) + t486 * MDP(32) + MDP(20) * t951) * t951; t555 * t553 * MDP(26) + (-t553 ^ 2 + t555 ^ 2) * MDP(27) + (t881 + t922) * MDP(28) + (-t855 + t921) * MDP(29) + t518 * MDP(30) + (t486 * t570 - t489 * t555 - g(1) * t560 - g(2) * t959 - g(3) * (-t626 * t776 + t682) + t857) * MDP(31) + (-t825 * t570 + t489 * t553 + g(1) * t561 - g(2) * t958 - g(3) * (-t626 * t779 - t914) - t826) * MDP(32) + (-MDP(28) * t920 - MDP(29) * t555 - MDP(31) * t486 + MDP(32) * t825) * qJD(6);];
tau  = t1;
