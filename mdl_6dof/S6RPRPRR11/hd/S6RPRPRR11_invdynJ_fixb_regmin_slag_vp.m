% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RPRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR11_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR11_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR11_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR11_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR11_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR11_invdynJ_fixb_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:15:18
% EndTime: 2019-03-09 04:15:47
% DurationCPUTime: 14.18s
% Computational Cost: add. (18975->648), mult. (60885->918), div. (0->0), fcn. (54221->18), ass. (0->305)
t298 = sin(qJ(6));
t301 = cos(qJ(6));
t297 = cos(pkin(12));
t300 = sin(qJ(3));
t432 = cos(pkin(7));
t380 = t300 * t432;
t361 = t297 * t380;
t294 = sin(pkin(7));
t433 = cos(pkin(6));
t376 = t433 * t294;
t362 = t300 * t376;
t293 = sin(pkin(12));
t295 = sin(pkin(6));
t402 = qJDD(1) * t295;
t385 = t293 * t402;
t445 = cos(qJ(3));
t411 = qJD(1) * t295;
t391 = t293 * t411;
t358 = t432 * t445;
t338 = t297 * t358;
t339 = t445 * t376;
t469 = t295 * t338 + t339;
t460 = qJD(1) * t469 - t300 * t391;
t136 = qJD(3) * t460 + qJDD(1) * t362 + t361 * t402 + t385 * t445;
t350 = t433 * t432;
t401 = qJDD(1) * t297;
t384 = t295 * t401;
t231 = -qJDD(1) * t350 + t294 * t384 - qJDD(3);
t292 = sin(pkin(13));
t296 = cos(pkin(13));
t118 = t136 * t292 + t296 * t231;
t119 = t136 * t296 - t231 * t292;
t299 = sin(qJ(5));
t302 = cos(qJ(5));
t372 = t302 * t118 + t299 * t119;
t209 = t295 * (t293 * t445 + t361) + t362;
t202 = t209 * qJD(1);
t390 = t297 * t411;
t232 = -qJD(1) * t350 + t294 * t390 - qJD(3);
t145 = t202 * t296 - t232 * t292;
t181 = t292 * t202;
t371 = t232 * t296 + t181;
t465 = t302 * t145 - t299 * t371;
t43 = qJD(5) * t465 + t372;
t40 = qJDD(6) + t43;
t142 = t302 * t371;
t94 = t145 * t299 + t142;
t92 = qJD(6) + t94;
t477 = t92 ^ 2;
t478 = -t298 * t477 + t301 * t40;
t190 = qJD(5) - t460;
t476 = t190 * t94;
t303 = cos(qJ(1));
t379 = t303 * t433;
t444 = sin(qJ(1));
t239 = t293 * t379 + t297 * t444;
t417 = t295 * t303;
t419 = t294 * t300;
t334 = t444 * t293 - t297 * t379;
t458 = t334 * t432;
t155 = -t239 * t445 + t300 * t458 + t417 * t419;
t381 = t295 * t432;
t214 = t294 * t334 - t303 * t381;
t291 = pkin(13) + qJ(5);
t285 = sin(t291);
t286 = cos(t291);
t122 = t155 * t286 - t214 * t285;
t396 = t294 * t445;
t152 = t239 * t300 + t396 * t417 + t445 * t458;
t475 = t122 * t298 + t152 * t301;
t474 = t122 * t301 - t152 * t298;
t75 = -t301 * t190 + t298 * t465;
t473 = t465 * t75;
t77 = t190 * t298 + t301 * t465;
t472 = t465 * t77;
t468 = t155 * t285 + t214 * t286;
t250 = t292 * t299 - t302 * t296;
t128 = t250 * t460;
t243 = t250 * qJD(5);
t415 = t128 - t243;
t251 = t292 * t302 + t296 * t299;
t414 = t190 * t251;
t201 = t209 * qJD(3);
t137 = qJD(1) * t201 - qJDD(1) * t469 + t300 * t385;
t284 = -pkin(4) * t296 - pkin(3);
t195 = pkin(5) * t250 - pkin(11) * t251 + t284;
t439 = pkin(10) + qJ(4);
t262 = t439 * t292;
t263 = t439 * t296;
t222 = -t262 * t299 + t263 * t302;
t359 = t433 * t444;
t240 = -t293 * t359 + t303 * t297;
t316 = t303 * t293 + t297 * t359;
t395 = t295 * t444;
t451 = -t294 * t395 + t316 * t432;
t156 = t240 * t300 + t445 * t451;
t420 = t293 * t300;
t208 = t295 * t420 - t469;
t328 = g(1) * t156 + g(2) * t152 + g(3) * t208;
t318 = t328 * t286;
t374 = qJD(1) * t433;
t366 = pkin(1) * t374;
t235 = qJ(2) * t390 + t293 * t366;
t311 = (t297 * t381 + t376) * pkin(9);
t180 = qJD(1) * t311 + t235;
t271 = t297 * t366;
t421 = t293 * t295;
t310 = t433 * pkin(2) + (-pkin(9) * t432 - qJ(2)) * t421;
t191 = qJD(1) * t310 + t271;
t422 = t293 * t294;
t227 = (-pkin(2) * t297 - pkin(9) * t422 - pkin(1)) * t295;
t218 = qJD(1) * t227 + qJD(2);
t111 = t180 * t445 + t191 * t380 + t218 * t419;
t428 = t460 * t292;
t79 = pkin(4) * t428 + t111;
t461 = (-pkin(5) * t414 + pkin(11) * t415 + qJD(6) * t222 + t79) * t92 - t195 * t40 - t318;
t289 = t295 ^ 2;
t459 = t289 * (t293 ^ 2 + t297 ^ 2);
t226 = (-t293 * t380 + t297 * t445) * t411;
t369 = t294 * t391;
t169 = -t226 * t292 + t296 * t369;
t170 = t226 * t296 + t292 * t369;
t237 = -t292 * t419 + t296 * t432;
t238 = t292 * t432 + t296 * t419;
t341 = t237 * t302 - t238 * t299;
t392 = t302 * t445;
t393 = t299 * t445;
t409 = qJD(3) * t294;
t457 = t169 * t299 + t170 * t302 - t341 * qJD(5) - (-t292 * t393 + t296 * t392) * t409;
t176 = t237 * t299 + t238 * t302;
t456 = t169 * t302 - t170 * t299 + t176 * qJD(5) + (t292 * t392 + t296 * t393) * t409;
t340 = -t262 * t302 - t263 * t299;
t110 = -t300 * t180 + t191 * t358 + t218 * t396;
t135 = pkin(3) * t202 - qJ(4) * t460;
t72 = -t110 * t292 + t296 * t135;
t58 = -pkin(10) * t296 * t460 + pkin(4) * t202 + t72;
t73 = t296 * t110 + t292 * t135;
t68 = -pkin(10) * t428 + t73;
t455 = qJD(4) * t250 - qJD(5) * t340 + t299 * t58 + t302 * t68;
t454 = -qJD(4) * t251 - qJD(5) * t222 + t299 * t68 - t302 * t58;
t418 = t295 * t297;
t236 = t294 * t418 - t350;
t150 = t209 * t292 + t236 * t296;
t151 = t209 * t296 - t236 * t292;
t113 = -t150 * t299 + t151 * t302;
t204 = t208 * t301;
t453 = -t113 * t298 + t204;
t225 = (t293 * t358 + t297 * t300) * t411;
t408 = qJD(3) * t300;
t388 = t294 * t408;
t452 = t225 - t388;
t449 = -qJD(5) + t190;
t448 = pkin(3) * t231 + qJDD(4);
t157 = t240 * t445 - t300 * t451;
t215 = t294 * t316 + t381 * t444;
t123 = -t157 * t285 + t215 * t286;
t329 = g(1) * t123 + g(2) * t468 + g(3) * (-t209 * t285 - t236 * t286);
t134 = qJDD(5) + t137;
t138 = -t191 * t294 + t432 * t218;
t89 = -pkin(3) * t460 - qJ(4) * t202 + t138;
t91 = -qJ(4) * t232 + t111;
t54 = -t292 * t91 + t296 * t89;
t34 = -pkin(4) * t460 - pkin(10) * t145 + t54;
t55 = t292 * t89 + t296 * t91;
t36 = -pkin(10) * t371 + t55;
t17 = t299 * t34 + t302 * t36;
t398 = pkin(1) * t433;
t364 = qJDD(1) * t398;
t403 = qJD(1) * qJD(2);
t386 = t295 * t403;
t220 = qJ(2) * t384 + t293 * t364 + t297 * t386;
t162 = qJDD(1) * t311 + t220;
t269 = t297 * t364;
t163 = qJDD(1) * t310 - t293 * t386 + t269;
t216 = qJDD(1) * t227 + qJDD(2);
t336 = qJD(3) * t358;
t387 = qJD(3) * t445;
t365 = t294 * t387;
t314 = t162 * t445 + t163 * t380 - t180 * t408 + t191 * t336 + t216 * t419 + t218 * t365;
t53 = -qJ(4) * t231 - qJD(4) * t232 + t314;
t129 = -t163 * t294 + t432 * t216;
t64 = pkin(3) * t137 - qJ(4) * t136 - qJD(4) * t202 + t129;
t24 = -t292 * t53 + t296 * t64;
t15 = pkin(4) * t137 - pkin(10) * t119 + t24;
t25 = t292 * t64 + t296 * t53;
t21 = -pkin(10) * t118 + t25;
t382 = -t302 * t15 + t21 * t299;
t4 = -pkin(5) * t134 + qJD(5) * t17 + t382;
t447 = (pkin(5) * t465 + pkin(11) * t92) * t92 + t329 + t4;
t407 = qJD(5) * t299;
t42 = -qJD(5) * t142 - t299 * t118 + t302 * t119 - t145 * t407;
t23 = qJD(6) * t77 - t301 * t134 + t298 * t42;
t357 = qJD(3) * t380;
t333 = t300 * t162 - t163 * t358 + t180 * t387 + t191 * t357 - t216 * t396 + t218 * t388;
t56 = t333 + t448;
t35 = pkin(4) * t118 + t56;
t10 = pkin(5) * t43 - pkin(11) * t42 + t35;
t406 = qJD(5) * t302;
t332 = t299 * t15 + t302 * t21 + t34 * t406 - t36 * t407;
t3 = pkin(11) * t134 + t332;
t12 = pkin(11) * t190 + t17;
t90 = t232 * pkin(3) + qJD(4) - t110;
t69 = pkin(4) * t371 + t90;
t29 = t94 * pkin(5) - pkin(11) * t465 + t69;
t349 = t12 * t298 - t29 * t301;
t1 = -t349 * qJD(6) + t298 * t10 + t301 * t3;
t443 = pkin(1) * t289;
t441 = t75 * t92;
t440 = t77 * t92;
t279 = t297 * t398;
t210 = t279 + t310;
t146 = -t210 * t294 + t432 * t227;
t101 = pkin(3) * t208 - qJ(4) * t209 + t146;
t242 = qJ(2) * t418 + t293 * t398;
t205 = t311 + t242;
t399 = t205 * t445 + t210 * t380 + t227 * t419;
t106 = -qJ(4) * t236 + t399;
t65 = t296 * t101 - t106 * t292;
t46 = pkin(4) * t208 - pkin(10) * t151 + t65;
t66 = t292 * t101 + t296 * t106;
t51 = -pkin(10) * t150 + t66;
t344 = t299 * t46 + t302 * t51;
t404 = qJD(6) * t301;
t405 = qJD(6) * t298;
t22 = t298 * t134 + t190 * t404 + t301 * t42 - t405 * t465;
t436 = t22 * t298;
t435 = t298 * t40;
t434 = pkin(5) * t202 - t454;
t200 = (t339 + (t338 - t420) * t295) * qJD(3);
t410 = qJD(2) * t295;
t367 = t410 * t422;
t114 = pkin(3) * t201 - qJ(4) * t200 - qJD(4) * t209 + t367;
t337 = qJD(2) * t293 * t381;
t389 = t297 * t410;
t306 = t210 * t336 + t227 * t365 + t445 * t389 + (-qJD(3) * t205 - t337) * t300;
t85 = -t236 * qJD(4) + t306;
t60 = t292 * t114 + t296 * t85;
t431 = qJ(4) * t137;
t430 = t111 * t232;
t427 = t200 * t292;
t426 = t200 * t296;
t425 = t208 * t298;
t423 = t251 * t301;
t416 = -qJD(4) + t90;
t413 = t303 * pkin(1) + qJ(2) * t395;
t400 = g(1) * t444;
t397 = t292 * t445;
t394 = t296 * t445;
t304 = qJD(1) ^ 2;
t378 = t304 * t433;
t59 = t296 * t114 - t292 * t85;
t373 = t301 * t92;
t360 = -pkin(1) * t444 + qJ(2) * t417;
t356 = g(1) * t152 - g(2) * t156;
t354 = qJD(2) * t374;
t352 = g(2) * t417 - g(3) * t433;
t8 = t12 * t301 + t29 * t298;
t19 = pkin(11) * t208 + t344;
t112 = t302 * t150 + t151 * t299;
t308 = -t300 * t205 + t210 * t358 + t227 * t396;
t109 = t236 * pkin(3) - t308;
t74 = t150 * pkin(4) + t109;
t30 = t112 * pkin(5) - t113 * pkin(11) + t74;
t348 = t19 * t301 + t298 * t30;
t347 = -t19 * t298 + t30 * t301;
t16 = -t299 * t36 + t302 * t34;
t41 = pkin(4) * t201 - pkin(10) * t426 + t59;
t50 = -pkin(10) * t427 + t60;
t346 = -t299 * t50 + t302 * t41;
t345 = -t299 * t51 + t302 * t46;
t98 = t205 * t387 + t210 * t357 + t227 * t388 + t300 * t389 + t337 * t445;
t81 = t113 * t301 + t425;
t342 = (-qJ(2) * t391 + t271) * t293 - t235 * t297;
t335 = g(1) * t303 + g(2) * t444;
t78 = pkin(4) * t427 + t98;
t331 = t299 * t41 + t302 * t50 + t46 * t406 - t407 * t51;
t327 = -g(1) * t157 + g(2) * t155 - g(3) * t209;
t325 = -t298 * t176 - t301 * t396;
t324 = -t301 * t176 + t298 * t396;
t102 = -t128 * t298 - t301 * t202;
t323 = -t243 * t298 + t251 * t404 - t102;
t103 = -t128 * t301 + t202 * t298;
t322 = -t243 * t301 - t251 * t405 - t103;
t320 = t328 - t56;
t11 = -pkin(5) * t190 - t16;
t317 = -pkin(11) * t40 + (t11 + t16) * t92;
t2 = -qJD(6) * t8 + t301 * t10 - t298 * t3;
t307 = t328 - t333;
t305 = -t222 * t40 + t4 * t251 + (pkin(11) * t202 - qJD(6) * t195 + t455) * t92 + t327;
t272 = -pkin(1) * t402 + qJDD(2);
t241 = -qJ(2) * t421 + t279;
t219 = t269 + (-qJ(2) * qJDD(1) - t403) * t421;
t148 = t209 * t286 - t236 * t285;
t124 = t157 * t286 + t215 * t285;
t83 = t124 * t301 + t156 * t298;
t82 = -t124 * t298 + t156 * t301;
t71 = qJD(5) * t113 + t200 * t251;
t70 = -qJD(5) * t112 - t200 * t250;
t32 = qJD(6) * t81 - t201 * t301 + t298 * t70;
t31 = qJD(6) * t453 + t201 * t298 + t301 * t70;
t26 = pkin(5) * t71 - pkin(11) * t70 + t78;
t18 = -pkin(5) * t208 - t345;
t6 = -pkin(5) * t201 + qJD(5) * t344 - t346;
t5 = pkin(11) * t201 + t331;
t7 = [qJDD(1), -g(2) * t303 + t400, t335, t219 * t433 + g(1) * t239 - g(2) * t240 + (-t272 * t297 - t293 * t354) * t295 + (t241 * t433 + t297 * t443) * qJDD(1), -t220 * t433 - g(1) * t334 + g(2) * t316 + (t272 * t293 - t297 * t354) * t295 + (-t242 * t433 - t293 * t443) * qJDD(1), t403 * t459 + (-t219 * t293 + t220 * t297 + (-t241 * t293 + t242 * t297) * qJDD(1) - t335) * t295, t220 * t242 + t219 * t241 - g(1) * t360 - g(2) * t413 + (-t272 * pkin(1) - qJD(2) * t342) * t295, t136 * t209 + t200 * t202, -t136 * t208 - t137 * t209 + t200 * t460 - t201 * t202, -t136 * t236 - t200 * t232 - t209 * t231, t137 * t236 + t201 * t232 + t208 * t231, t231 * t236, -g(1) * t155 - g(2) * t157 + t129 * t208 + t146 * t137 + t138 * t201 - t231 * t308 + t98 * t232 + t236 * t333 - t367 * t460, t129 * t209 + t146 * t136 + t138 * t200 + t202 * t367 + t231 * t399 + t232 * t306 + t236 * t314 - t356, -t59 * t460 + t65 * t137 + t24 * t208 + t54 * t201 + t98 * t371 + t109 * t118 + t56 * t150 + t90 * t427 - g(1) * (t155 * t296 - t214 * t292) - g(2) * (t157 * t296 + t215 * t292) t60 * t460 - t66 * t137 - t25 * t208 - t55 * t201 + t98 * t145 + t109 * t119 + t56 * t151 + t90 * t426 - g(1) * (-t155 * t292 - t214 * t296) - g(2) * (-t157 * t292 + t215 * t296) -t60 * t371 - t66 * t118 - t25 * t150 - t59 * t145 - t65 * t119 - t24 * t151 + (-t292 * t55 - t296 * t54) * t200 + t356, t25 * t66 + t55 * t60 + t24 * t65 + t54 * t59 + t56 * t109 + t90 * t98 - g(1) * (-t239 * pkin(2) + t155 * pkin(3) - pkin(9) * t214 - qJ(4) * t152 + t360) - g(2) * (t240 * pkin(2) + t157 * pkin(3) + pkin(9) * t215 + t156 * qJ(4) + t413) t113 * t42 + t465 * t70, -t112 * t42 - t113 * t43 - t465 * t71 - t70 * t94, t113 * t134 + t190 * t70 + t201 * t465 + t208 * t42, -t112 * t134 - t190 * t71 - t201 * t94 - t208 * t43, t134 * t208 + t190 * t201, t346 * t190 + t345 * t134 - t382 * t208 + t16 * t201 + t78 * t94 + t74 * t43 + t35 * t112 + t69 * t71 - g(1) * t122 - g(2) * t124 + (-t17 * t208 - t190 * t344) * qJD(5), g(1) * t468 - g(2) * t123 + t35 * t113 - t344 * t134 - t17 * t201 - t331 * t190 - t332 * t208 + t74 * t42 + t78 * t465 + t69 * t70, t22 * t81 + t31 * t77, t22 * t453 - t23 * t81 - t31 * t75 - t32 * t77, t112 * t22 + t31 * t92 + t40 * t81 + t71 * t77, -t112 * t23 - t32 * t92 + t40 * t453 - t71 * t75, t112 * t40 + t71 * t92 (-qJD(6) * t348 + t26 * t301 - t298 * t5) * t92 + t347 * t40 + t2 * t112 - t349 * t71 + t6 * t75 + t18 * t23 - t4 * t453 + t11 * t32 - g(1) * t474 - g(2) * t83 -(qJD(6) * t347 + t26 * t298 + t301 * t5) * t92 - t348 * t40 - t1 * t112 - t8 * t71 + t6 * t77 + t18 * t22 + t4 * t81 + t11 * t31 + g(1) * t475 - g(2) * t82; 0, 0, 0 (t293 * t378 - t401) * t295 (qJDD(1) * t293 + t297 * t378) * t295, -t304 * t459, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t342 - t400) * t295 + t352, 0, 0, 0, 0, 0, t432 * t137 - t225 * t232 + (-t231 * t445 + t232 * t408 + t391 * t460) * t294, t432 * t136 - t226 * t232 + (-t202 * t391 + t231 * t300 + t232 * t387) * t294, t237 * t137 + t169 * t460 - t225 * t371 + (-t445 * t118 + (t300 * t371 + t397 * t460) * qJD(3)) * t294, -t238 * t137 - t225 * t145 - t170 * t460 + (-t445 * t119 + (t145 * t300 + t394 * t460) * qJD(3)) * t294, -t238 * t118 - t237 * t119 + t170 * t371 + t169 * t145 + (t145 * t397 - t371 * t394) * t409, -g(1) * t395 - t54 * t169 - t55 * t170 - t90 * t225 + t24 * t237 + t25 * t238 + (-t445 * t56 + (t300 * t90 + t394 * t55 - t397 * t54) * qJD(3)) * t294 + t352, 0, 0, 0, 0, 0, t341 * t134 - t225 * t94 + (t94 * t408 - t43 * t445) * t294 - t456 * t190, -t176 * t134 - t225 * t465 + (t408 * t465 - t42 * t445) * t294 + t457 * t190, 0, 0, 0, 0, 0, -t341 * t23 + t325 * t40 + (qJD(6) * t324 + t298 * t457 - t301 * t452) * t92 + t456 * t75, -t341 * t22 + t324 * t40 + (-qJD(6) * t325 + t298 * t452 + t301 * t457) * t92 + t456 * t77; 0, 0, 0, 0, 0, 0, 0, -t202 * t460, t202 ^ 2 - t460 ^ 2, t232 * t460 + t136, -t202 * t232 - t137, -t231, -t138 * t202 + t307 - t430, -t110 * t232 - t138 * t460 - t314 - t327, -t292 * t431 - pkin(3) * t118 - t111 * t181 - t54 * t202 - (t292 * t416 - t72) * t460 + (t320 - t430) * t296, -t296 * t431 - pkin(3) * t119 - t111 * t145 + t202 * t55 - (t296 * t416 + t73) * t460 - t320 * t292, t72 * t145 + t73 * t181 + (-qJ(4) * t118 - qJD(4) * t371 + t73 * t232 + t460 * t54 + t25) * t296 + (qJ(4) * t119 + qJD(4) * t145 + t460 * t55 - t24) * t292 + t327, -t90 * t111 - t54 * t72 - t55 * t73 + (-t292 * t54 + t296 * t55) * qJD(4) + t320 * pkin(3) + (-t24 * t292 + t25 * t296 + t327) * qJ(4), t251 * t42 + t415 * t465, -t250 * t42 - t251 * t43 - t414 * t465 - t415 * t94, t134 * t251 + t190 * t415 - t202 * t465, -t134 * t250 - t190 * t414 + t202 * t94, -t190 * t202, t134 * t340 - t16 * t202 + t190 * t454 + t35 * t250 + t284 * t43 + t414 * t69 - t79 * t94 + t318, -t222 * t134 + t17 * t202 + t190 * t455 + t35 * t251 + t284 * t42 - t328 * t285 + t415 * t69 - t465 * t79, t22 * t423 + t322 * t77, t102 * t77 + t103 * t75 - (-t298 * t77 - t301 * t75) * t243 + (-t436 - t23 * t301 + (t298 * t75 - t301 * t77) * qJD(6)) * t251, t22 * t250 + t322 * t92 + t40 * t423 + t414 * t77, -t23 * t250 - t251 * t435 - t323 * t92 - t414 * t75, t250 * t40 + t414 * t92, t323 * t11 + t2 * t250 - t340 * t23 + t305 * t298 - t301 * t461 - t414 * t349 + t434 * t75, -t1 * t250 + t322 * t11 - t340 * t22 + t298 * t461 + t305 * t301 - t414 * t8 + t434 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145 * t460 + t118, t371 * t460 + t119, -t145 ^ 2 - t371 ^ 2, t145 * t54 + t371 * t55 - t307 + t448, 0, 0, 0, 0, 0, t190 * t465 + t43, t42 - t476, 0, 0, 0, 0, 0, -t473 + t478, -t301 * t477 - t435 - t472; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t465 * t94, t465 ^ 2 - t94 ^ 2, t42 + t476, t449 * t465 - t372, t134, t17 * t449 - t465 * t69 - t329 - t382, g(1) * t124 - g(2) * t122 + g(3) * t148 + t16 * t190 + t69 * t94 - t332, t373 * t77 + t436 (t22 - t441) * t301 + (-t23 - t440) * t298, t373 * t92 + t435 - t472, t473 + t478, -t92 * t465, -pkin(5) * t23 - t17 * t75 + t317 * t298 - t301 * t447 + t349 * t465, -pkin(5) * t22 - t17 * t77 + t298 * t447 + t317 * t301 + t465 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77 * t75, -t75 ^ 2 + t77 ^ 2, t22 + t441, -t23 + t440, t40, t8 * t92 - t11 * t77 - g(1) * t82 - g(2) * t475 - g(3) * (-t148 * t298 + t204) + t2, -t349 * t92 + t11 * t75 + g(1) * t83 - g(2) * t474 - g(3) * (-t148 * t301 - t425) - t1;];
tau_reg  = t7;
