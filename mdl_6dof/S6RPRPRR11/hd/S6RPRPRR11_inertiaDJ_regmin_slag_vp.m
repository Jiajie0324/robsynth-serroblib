% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRR11_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR11_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR11_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR11_inertiaDJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:15:13
% EndTime: 2019-03-09 04:15:23
% DurationCPUTime: 3.52s
% Computational Cost: add. (7615->306), mult. (22585->586), div. (0->0), fcn. (24763->14), ass. (0->168)
t122 = sin(pkin(12));
t124 = sin(pkin(6));
t126 = cos(pkin(12));
t130 = sin(qJ(3));
t133 = cos(qJ(3));
t123 = sin(pkin(7));
t201 = cos(pkin(6));
t170 = t201 * t123;
t127 = cos(pkin(7));
t192 = t127 * t133;
t222 = (-t122 * t130 + t126 * t192) * t124 + t133 * t170;
t121 = sin(pkin(13));
t129 = sin(qJ(5));
t125 = cos(pkin(13));
t132 = cos(qJ(5));
t190 = t132 * t125;
t100 = t121 * t129 - t190;
t193 = t126 * t130;
t84 = t130 * t170 + (t122 * t133 + t127 * t193) * t124;
t195 = t124 * t126;
t93 = t123 * t195 - t127 * t201;
t62 = t121 * t84 + t125 * t93;
t63 = -t121 * t93 + t125 * t84;
t52 = t129 * t63 + t132 * t62;
t79 = t222 * qJD(3);
t30 = -qJD(5) * t52 - t100 * t79;
t101 = t121 * t132 + t125 * t129;
t53 = -t129 * t62 + t132 * t63;
t31 = qJD(5) * t53 + t101 * t79;
t220 = t31 * pkin(5) - t30 * pkin(11);
t131 = cos(qJ(6));
t120 = t131 ^ 2;
t128 = sin(qJ(6));
t187 = t128 ^ 2 - t120;
t167 = t187 * qJD(6);
t186 = qJD(2) * t124;
t175 = t122 * t186;
t165 = t127 * t175;
t183 = qJD(3) * t133;
t172 = t123 * t183;
t174 = t126 * t186;
t176 = pkin(1) * t201;
t112 = t126 * t176;
t199 = t122 * t124;
t85 = t201 * pkin(2) + t112 + (-pkin(9) * t127 - qJ(2)) * t199;
t213 = t127 * t85;
t189 = qJ(2) * t195 + t122 * t176;
t82 = (t127 * t195 + t170) * pkin(9) + t189;
t90 = (-pkin(9) * t122 * t123 - pkin(2) * t126 - pkin(1)) * t124;
t42 = (qJD(3) * t82 + t165) * t130 - t133 * t174 - t90 * t172 - t183 * t213;
t60 = -t123 * t85 + t127 * t90;
t46 = -pkin(3) * t222 - qJ(4) * t84 + t60;
t155 = t123 * t90 + t213;
t135 = t130 * t155 + t133 * t82;
t48 = -t93 * qJ(4) + t135;
t28 = -t121 * t48 + t125 * t46;
t20 = -pkin(4) * t222 - pkin(10) * t63 + t28;
t29 = t121 * t46 + t125 * t48;
t25 = -pkin(10) * t62 + t29;
t151 = t129 * t20 + t132 * t25;
t202 = t79 * t125;
t39 = -t93 * qJD(4) - t42;
t166 = t123 * t175;
t80 = t84 * qJD(3);
t54 = pkin(3) * t80 - qJ(4) * t79 - qJD(4) * t84 + t166;
t26 = -t121 * t39 + t125 * t54;
t17 = pkin(4) * t80 - pkin(10) * t202 + t26;
t203 = t79 * t121;
t27 = t121 * t54 + t125 * t39;
t24 = -pkin(10) * t203 + t27;
t6 = -qJD(5) * t151 - t129 * t24 + t132 * t17;
t219 = 0.2e1 * t80;
t115 = -pkin(4) * t125 - pkin(3);
t218 = 0.2e1 * t115;
t215 = pkin(10) + qJ(4);
t96 = t100 * qJD(5);
t214 = t101 * t96;
t212 = t128 * t96;
t97 = t101 * qJD(5);
t211 = t128 * t97;
t210 = t129 * t25;
t209 = t131 * t96;
t208 = t131 * t97;
t36 = t128 * t53 + t131 * t222;
t14 = -qJD(6) * t36 + t80 * t128 + t131 * t30;
t207 = t14 * t128;
t206 = t14 * t131;
t106 = t215 * t121;
t107 = t215 * t125;
t88 = -t106 * t129 + t107 * t132;
t68 = qJD(4) * t101 + qJD(5) * t88;
t205 = t68 * t128;
t204 = t68 * t131;
t200 = t121 * t133;
t197 = t123 * t130;
t196 = t123 * t133;
t194 = t125 * t133;
t191 = t128 * t131;
t188 = t121 ^ 2 + t125 ^ 2;
t185 = qJD(3) * t123;
t184 = qJD(3) * t130;
t182 = qJD(5) * t132;
t181 = qJD(6) * t128;
t180 = qJD(6) * t131;
t179 = -0.2e1 * pkin(5) * qJD(6);
t173 = t123 * t184;
t171 = t128 * t180;
t169 = t188 * t133;
t168 = -0.4e1 * t101 * t191;
t164 = 0.2e1 * t188 * qJD(4);
t163 = pkin(5) * t97 + pkin(11) * t96;
t162 = pkin(5) * t96 - pkin(11) * t97;
t160 = pkin(5) * t101 + pkin(11) * t100;
t10 = -pkin(11) * t222 + t151;
t51 = t93 * pkin(3) + t130 * t82 - t133 * t155;
t32 = t62 * pkin(4) + t51;
t13 = t52 * pkin(5) - t53 * pkin(11) + t32;
t8 = t10 * t131 + t128 * t13;
t159 = -t26 * t121 + t27 * t125;
t158 = -t121 * t28 + t125 * t29;
t157 = t121 * t63 - t125 * t62;
t94 = -t121 * t197 + t125 * t127;
t95 = t121 * t127 + t125 * t197;
t156 = -t121 * t94 + t125 * t95;
t37 = -t128 * t222 + t131 * t53;
t154 = -t128 * t37 - t131 * t36;
t78 = pkin(5) * t100 - pkin(11) * t101 + t115;
t57 = t128 * t78 + t131 * t88;
t152 = t132 * t20 - t210;
t70 = t129 * t94 + t132 * t95;
t150 = -0.2e1 * t201 * t186;
t4 = -t80 * pkin(5) - t6;
t9 = pkin(5) * t222 - t152;
t149 = t4 * t128 + t180 * t9;
t148 = t4 * t131 - t181 * t9;
t147 = t128 * t31 + t180 * t52;
t146 = -t131 * t31 + t181 * t52;
t59 = qJD(5) * t70 + t101 * t172;
t69 = t129 * t95 - t132 * t94;
t145 = t128 * t59 + t180 * t69;
t144 = -t131 * t59 + t181 * t69;
t143 = t128 * t70 + t131 * t196;
t142 = t128 * t196 - t131 * t70;
t141 = t100 * t180 + t211;
t140 = -t101 * t180 + t212;
t139 = -t101 * t181 - t209;
t5 = qJD(5) * t210 - t129 * t17 - t132 * t24 - t182 * t20;
t138 = -pkin(3) * t79 - qJ(4) * t80 + qJD(4) * t222;
t136 = -pkin(11) * t80 + t5;
t134 = t135 * qJD(3);
t43 = (t122 * t192 + t193) * t186 + t134;
t72 = pkin(4) * t203;
t33 = t72 + t43;
t99 = t101 ^ 2;
t87 = t106 * t132 + t107 * t129;
t76 = -t100 * t181 + t208;
t67 = -qJD(4) * t190 + t106 * t182 + (qJD(4) * t121 + qJD(5) * t107) * t129;
t58 = -t172 * t190 - t94 * t182 + (qJD(5) * t95 + t121 * t172) * t129;
t56 = -t128 * t88 + t131 * t78;
t41 = qJD(6) * t142 + t128 * t58 + t131 * t173;
t40 = qJD(6) * t143 - t128 * t173 + t131 * t58;
t35 = -qJD(6) * t57 + t128 * t67 + t131 * t163;
t34 = -t128 * t163 + t131 * t67 - t180 * t78 + t181 * t88;
t15 = qJD(6) * t37 + t128 * t30 - t131 * t80;
t7 = -t10 * t128 + t13 * t131;
t2 = -t8 * qJD(6) + t128 * t136 + (t130 * t174 + t133 * t165 + t134 + t220 + t72) * t131;
t1 = t10 * t181 - t128 * (t33 + t220) - t13 * t180 + t131 * t136;
t3 = [0, 0, 0, t122 * t150, t126 * t150, 0.2e1 * (t122 ^ 2 + t126 ^ 2) * t124 ^ 2 * qJD(2), 0.2e1 * (t189 * t126 + (qJ(2) * t199 - t112) * t122) * t186, 0.2e1 * t84 * t79, 0.2e1 * t222 * t79 - 0.2e1 * t80 * t84, -0.2e1 * t79 * t93, t93 * t219, 0, -0.2e1 * t166 * t222 + 0.2e1 * t43 * t93 + 0.2e1 * t60 * t80, 0.2e1 * t166 * t84 - 0.2e1 * t42 * t93 + 0.2e1 * t60 * t79, 0.2e1 * t203 * t51 - 0.2e1 * t222 * t26 + 0.2e1 * t28 * t80 + 0.2e1 * t43 * t62, 0.2e1 * t202 * t51 + 0.2e1 * t222 * t27 - 0.2e1 * t29 * t80 + 0.2e1 * t43 * t63, -0.2e1 * t26 * t63 - 0.2e1 * t27 * t62 + 0.2e1 * (-t121 * t29 - t125 * t28) * t79, 0.2e1 * t26 * t28 + 0.2e1 * t27 * t29 + 0.2e1 * t43 * t51, 0.2e1 * t53 * t30, -0.2e1 * t30 * t52 - 0.2e1 * t31 * t53, -0.2e1 * t222 * t30 + 0.2e1 * t53 * t80, 0.2e1 * t222 * t31 - 0.2e1 * t52 * t80, -t222 * t219, 0.2e1 * t152 * t80 - 0.2e1 * t222 * t6 + 0.2e1 * t31 * t32 + 0.2e1 * t33 * t52, -0.2e1 * t151 * t80 - 0.2e1 * t222 * t5 + 0.2e1 * t30 * t32 + 0.2e1 * t33 * t53, 0.2e1 * t37 * t14, -0.2e1 * t14 * t36 - 0.2e1 * t15 * t37, 0.2e1 * t14 * t52 + 0.2e1 * t31 * t37, -0.2e1 * t15 * t52 - 0.2e1 * t31 * t36, 0.2e1 * t52 * t31, 0.2e1 * t15 * t9 + 0.2e1 * t2 * t52 + 0.2e1 * t31 * t7 + 0.2e1 * t36 * t4, 0.2e1 * t1 * t52 + 0.2e1 * t14 * t9 - 0.2e1 * t31 * t8 + 0.2e1 * t37 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127 * t80 + t173 * t93, t127 * t79 + t172 * t93, t94 * t80 + (-t79 * t200 + (t130 * t62 + t200 * t222) * qJD(3)) * t123, -t95 * t80 + (-t79 * t194 + (t130 * t63 + t194 * t222) * qJD(3)) * t123 (-t121 * t95 - t125 * t94) * t79 + t157 * t172, t26 * t94 + t27 * t95 + (-t133 * t43 + (t130 * t51 + t133 * t158) * qJD(3)) * t123, 0, 0, 0, 0, 0, t59 * t222 - t69 * t80 + (-t133 * t31 + t184 * t52) * t123, -t58 * t222 - t70 * t80 + (-t133 * t30 + t184 * t53) * t123, 0, 0, 0, 0, 0, -t143 * t31 + t15 * t69 + t36 * t59 + t41 * t52, t14 * t69 + t142 * t31 + t37 * t59 + t40 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (t156 - t197) * t172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t80, 0, -t43, t42, t121 * t138 - t43 * t125, t43 * t121 + t125 * t138, qJD(4) * t157 + t159, -t43 * pkin(3) + qJ(4) * t159 + qJD(4) * t158, t101 * t30 - t53 * t96, -t100 * t30 - t101 * t31 + t52 * t96 - t53 * t97, t101 * t80 + t222 * t96, -t100 * t80 + t222 * t97, 0, t100 * t33 + t115 * t31 + t222 * t68 + t32 * t97 - t80 * t87, t101 * t33 + t115 * t30 - t222 * t67 - t32 * t96 - t80 * t88, -t37 * t209 + (-t181 * t37 + t206) * t101, -t154 * t96 + (-t207 - t131 * t15 + (t128 * t36 - t131 * t37) * qJD(6)) * t101, t14 * t100 - t101 * t146 - t209 * t52 + t37 * t97, -t15 * t100 - t101 * t147 + t212 * t52 - t36 * t97, t100 * t31 + t52 * t97, t2 * t100 + t101 * t149 + t87 * t15 - t212 * t9 + t56 * t31 + t35 * t52 + t68 * t36 + t7 * t97, t1 * t100 + t101 * t148 + t87 * t14 - t209 * t9 - t57 * t31 + t34 * t52 + t68 * t37 - t8 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, -t172, -t125 * t173, t121 * t173, t169 * t185, t156 * qJD(4) + (-pkin(3) * t130 + qJ(4) * t169) * t185, 0, 0, 0, 0, 0 (t100 * t184 - t133 * t97) * t123 (t101 * t184 + t133 * t96) * t123, 0, 0, 0, 0, 0, t41 * t100 + t101 * t145 - t143 * t97 - t212 * t69, t40 * t100 - t101 * t144 + t142 * t97 - t209 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, qJ(4) * t164, -0.2e1 * t214, 0.2e1 * t100 * t96 - 0.2e1 * t101 * t97, 0, 0, 0, t97 * t218, -t96 * t218, -0.2e1 * t120 * t214 - 0.2e1 * t171 * t99, 0.2e1 * t167 * t99 - t168 * t96, 0.2e1 * t100 * t139 + 0.2e1 * t101 * t208, 0.2e1 * t100 * t140 - 0.2e1 * t101 * t211, 0.2e1 * t100 * t97, -0.2e1 * t87 * t212 + 0.2e1 * t35 * t100 + 0.2e1 * t56 * t97 + 0.2e1 * (t180 * t87 + t205) * t101, -0.2e1 * t87 * t209 + 0.2e1 * t34 * t100 - 0.2e1 * t57 * t97 + 0.2e1 * (-t181 * t87 + t204) * t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203, t202, 0, t43, 0, 0, 0, 0, 0, t31, t30, 0, 0, 0, 0, 0, -t146, -t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t96, 0, 0, 0, 0, 0, t76, -t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t31, t80, t6, t5, t180 * t37 + t207, qJD(6) * t154 - t128 * t15 + t206, t147, -t146, 0, -pkin(5) * t15 - pkin(11) * t147 - t148, -pkin(5) * t14 + pkin(11) * t146 + t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, t58, 0, 0, 0, 0, 0, t144, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t97, 0, -t68, t67, -t101 * t167 - t191 * t96, qJD(6) * t168 + t187 * t96, t141, t76, 0, -t204 + t162 * t128 + (t128 * t87 - t131 * t160) * qJD(6), t205 + t162 * t131 + (t128 * t160 + t131 * t87) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t171, -0.2e1 * t167, 0, 0, 0, t128 * t179, t131 * t179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t15, t31, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139, t140, t97, t35, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t181, -t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, -t181, 0, -pkin(11) * t180, pkin(11) * t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
